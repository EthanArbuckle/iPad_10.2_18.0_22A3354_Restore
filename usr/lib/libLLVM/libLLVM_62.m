llvm::raw_ostream *llvm::VPlanPrinter::drawEdge(llvm::VPlanPrinter *this, const llvm::VPBlockBase *a2, const llvm::VPBlockBase *a3, int a4, const llvm::Twine *a5)
{
  const llvm::VPBlockBase *v10;
  BOOL v11;
  const llvm::VPBlockBase *v12;
  BOOL v13;
  llvm::raw_ostream *v14;
  char v15;
  int v16;
  const char *v17;
  size_t v18;
  size_t v19;
  uint64_t *UID;
  uint64_t v21;
  _DWORD *v22;
  uint64_t *v23;
  uint64_t v24;
  llvm::raw_ostream *v25;
  llvm::raw_ostream *v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  llvm::raw_ostream *v30;
  void *v31;
  llvm::raw_ostream *result;
  _WORD *v33;
  llvm::raw_ostream *v34;
  _DWORD *v35;
  uint64_t *v36;
  uint64_t v37;
  llvm::raw_ostream *v38;
  _DWORD *v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42[4];
  char v43;
  char v44;
  uint64_t v45;
  size_t v46;
  uint64_t v47;
  size_t v48;
  char v49;
  char v50;

  v10 = a2;
  if (a2)
  {
    v10 = a2;
    if (*((_BYTE *)a2 + 8) == 1)
    {
      v10 = a2;
      do
      {
        v10 = (const llvm::VPBlockBase *)*((_QWORD *)v10 + 26);
        if (v10)
          v11 = *((_BYTE *)v10 + 8) == 1;
        else
          v11 = 0;
      }
      while (v11);
    }
  }
  v12 = a3;
  if (a3)
  {
    v12 = a3;
    if (*((_BYTE *)a3 + 8) == 1)
    {
      v12 = a3;
      do
      {
        v12 = (const llvm::VPBlockBase *)*((_QWORD *)v12 + 25);
        if (v12)
          v13 = *((_BYTE *)v12 + 8) == 1;
        else
          v13 = 0;
      }
      while (v13);
    }
  }
  v14 = *(llvm::raw_ostream **)this;
  v15 = *((_BYTE *)this + 47);
  v16 = v15;
  if (v15 >= 0)
    v17 = (char *)this + 24;
  else
    v17 = (const char *)*((_QWORD *)this + 3);
  v18 = v15 & 0x7F;
  if (v16 >= 0)
    v19 = v18;
  else
    v19 = *((_QWORD *)this + 4);
  llvm::raw_ostream::write(*(llvm::raw_ostream **)this, v17, v19);
  UID = llvm::VPlanPrinter::getUID(this, v10, (uint64_t)&v45);
  llvm::Twine::printOneChild((uint64_t)UID, v14, v45, v46, v49);
  llvm::Twine::printOneChild(v21, v14, v47, v48, v50);
  v22 = (_DWORD *)*((_QWORD *)v14 + 4);
  if (*((_QWORD *)v14 + 3) - (_QWORD)v22 > 3uLL)
  {
    *v22 = 540945696;
    *((_QWORD *)v14 + 4) += 4;
  }
  else
  {
    llvm::raw_ostream::write(v14, " -> ", 4uLL);
  }
  v23 = llvm::VPlanPrinter::getUID(this, v12, (uint64_t)v42);
  llvm::Twine::printOneChild((uint64_t)v23, v14, v42[0], v42[1], v43);
  llvm::Twine::printOneChild(v24, v14, v42[2], v42[3], v44);
  v26 = *(llvm::raw_ostream **)this;
  v27 = *(_QWORD *)(*(_QWORD *)this + 32);
  if ((unint64_t)(*(_QWORD *)(*(_QWORD *)this + 24) - v27) > 9)
  {
    *(_WORD *)(v27 + 8) = 8765;
    *(_QWORD *)v27 = *(_QWORD *)" [ label=\"";
    *((_QWORD *)v26 + 4) += 10;
  }
  else
  {
    v25 = llvm::raw_ostream::write(*(llvm::raw_ostream **)this, " [ label=\"", 0xAuLL);
  }
  llvm::Twine::printOneChild((uint64_t)v25, v26, *(_QWORD *)a5, *((_QWORD *)a5 + 1), *((_BYTE *)a5 + 32));
  llvm::Twine::printOneChild(v28, v26, *((_QWORD *)a5 + 2), *((_QWORD *)a5 + 3), *((_BYTE *)a5 + 33));
  v29 = (_BYTE *)*((_QWORD *)v26 + 4);
  if ((unint64_t)v29 >= *((_QWORD *)v26 + 3))
  {
    llvm::raw_ostream::write(v26, 34);
  }
  else
  {
    *((_QWORD *)v26 + 4) = v29 + 1;
    *v29 = 34;
  }
  if (v10 != a2)
  {
    v34 = *(llvm::raw_ostream **)this;
    v35 = *(_DWORD **)(*(_QWORD *)this + 32);
    if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v35 > 6uLL)
    {
      *(_DWORD *)((char *)v35 + 3) = 1030515041;
      *v35 = 1635019808;
      *((_QWORD *)v34 + 4) += 7;
    }
    else
    {
      llvm::raw_ostream::write(*(llvm::raw_ostream **)this, " ltail=", 7uLL);
    }
    v36 = llvm::VPlanPrinter::getUID(this, a2, (uint64_t)&v45);
    llvm::Twine::printOneChild((uint64_t)v36, v34, v45, v46, v49);
    llvm::Twine::printOneChild(v37, v34, v47, v48, v50);
  }
  if (v12 == a3)
  {
    if (a4)
    {
LABEL_31:
      v30 = *(llvm::raw_ostream **)this;
      v31 = *(void **)(*(_QWORD *)this + 32);
      if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v31 > 0xDuLL)
      {
        qmemcpy(v31, "; splines=none", 14);
        *((_QWORD *)v30 + 4) += 14;
      }
      else
      {
        llvm::raw_ostream::write(v30, "; splines=none", 0xEuLL);
      }
    }
  }
  else
  {
    v38 = *(llvm::raw_ostream **)this;
    v39 = *(_DWORD **)(*(_QWORD *)this + 32);
    if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v39 > 6uLL)
    {
      *(_DWORD *)((char *)v39 + 3) = 1029988709;
      *v39 = 1701342240;
      *((_QWORD *)v38 + 4) += 7;
    }
    else
    {
      llvm::raw_ostream::write(*(llvm::raw_ostream **)this, " lhead=", 7uLL);
    }
    v40 = llvm::VPlanPrinter::getUID(this, a3, (uint64_t)&v45);
    llvm::Twine::printOneChild((uint64_t)v40, v38, v45, v46, v49);
    llvm::Twine::printOneChild(v41, v38, v47, v48, v50);
    if (a4)
      goto LABEL_31;
  }
  result = *(llvm::raw_ostream **)this;
  v33 = *(_WORD **)(*(_QWORD *)this + 32);
  if (*(_QWORD *)(*(_QWORD *)this + 24) - (_QWORD)v33 <= 1uLL)
    return llvm::raw_ostream::write(result, "]\n", 2uLL);
  *v33 = 2653;
  *((_QWORD *)result + 4) += 2;
  return result;
}

void sub_1C60C1790(uint64_t a1, const void *a2, size_t a3, const void *a4, size_t a5)
{
  llvm::raw_ostream *v9;
  char v10;
  int v11;
  size_t v12;
  const char *v13;
  const char *v14;
  const char *v15;
  const char *v16;
  size_t v17;
  size_t v18;
  _BYTE *v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  std::string *p_p;
  size_t size;
  uint64_t v25;
  void *v26;
  void *v27;
  size_t v28;
  unint64_t v29;
  std::string __p;

  v9 = *(llvm::raw_ostream **)a1;
  v10 = *(_BYTE *)(a1 + 47);
  v11 = v10;
  v12 = *(_QWORD *)(a1 + 32);
  v15 = *(const char **)(a1 + 24);
  v13 = (const char *)(a1 + 24);
  v14 = v15;
  if (v10 >= 0)
    v16 = v13;
  else
    v16 = v14;
  v17 = v10 & 0x7F;
  if (v11 >= 0)
    v18 = v17;
  else
    v18 = v12;
  llvm::raw_ostream::write(v9, v16, v18);
  v19 = (_BYTE *)*((_QWORD *)v9 + 4);
  if ((unint64_t)v19 < *((_QWORD *)v9 + 3))
  {
    *((_QWORD *)v9 + 4) = v19 + 1;
    *v19 = 34;
    if (a2)
      goto LABEL_9;
LABEL_14:
    v27 = 0;
    v28 = 0;
    v29 = 0;
    goto LABEL_20;
  }
  llvm::raw_ostream::write(v9, 34);
  if (!a2)
    goto LABEL_14;
LABEL_9:
  if (a3 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (a3 >= 0x17)
  {
    v21 = (a3 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a3 | 7) != 0x17)
      v21 = a3 | 7;
    v22 = v21 + 1;
    v20 = operator new(v21 + 1);
    v28 = a3;
    v29 = v22 | 0x8000000000000000;
    v27 = v20;
  }
  else
  {
    HIBYTE(v29) = a3;
    v20 = &v27;
    if (!a3)
      goto LABEL_19;
  }
  memmove(v20, a2, a3);
LABEL_19:
  *((_BYTE *)v20 + a3) = 0;
LABEL_20:
  llvm::DOT::EscapeString((char *)&v27, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
  else
    size = __p.__r_.__value_.__l.__size_;
  llvm::raw_ostream::write(v9, (const char *)p_p, size);
  v25 = *((_QWORD *)v9 + 4);
  if ((unint64_t)(*((_QWORD *)v9 + 3) - v25) > 2)
  {
    *(_BYTE *)(v25 + 2) = 34;
    *(_WORD *)v25 = 27740;
    v26 = (void *)(*((_QWORD *)v9 + 4) + 3);
    *((_QWORD *)v9 + 4) = v26;
  }
  else
  {
    llvm::raw_ostream::write(v9, "\\l\"", 3uLL);
    v26 = (void *)*((_QWORD *)v9 + 4);
  }
  if (a5 <= *((_QWORD *)v9 + 3) - (_QWORD)v26)
  {
    if (a5)
    {
      memcpy(v26, a4, a5);
      *((_QWORD *)v9 + 4) += a5;
    }
  }
  else
  {
    llvm::raw_ostream::write(v9, (const char *)a4, a5);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(v29) < 0)
    operator delete(v27);
}

_BYTE *llvm::VPlanIngredient::print(llvm::Value **this, llvm::raw_ostream *a2)
{
  llvm::Value *v3;
  BOOL v4;
  const char *OpcodeName;
  unint64_t v6;
  int v7;
  uint64_t v8;
  _BYTE *result;
  uint64_t v10;
  llvm::Value **v11;
  uint64_t v12;
  int v13;
  char *v14;
  llvm::Value *v15;
  _WORD *v16;

  v3 = *this;
  if (*this)
    v4 = *((unsigned __int8 *)*this + 16) >= 0x1Cu;
  else
    v4 = 0;
  if (!v4)
    return (_BYTE *)llvm::Value::printAsOperand(*this, a2, 0, 0);
  if (*(_BYTE *)(*(_QWORD *)v3 + 8) != 7)
  {
    llvm::Value::printAsOperand(*this, a2, 0, 0);
    v10 = *((_QWORD *)a2 + 4);
    if ((unint64_t)(*((_QWORD *)a2 + 3) - v10) > 2)
    {
      *(_BYTE *)(v10 + 2) = 32;
      *(_WORD *)v10 = 15648;
      *((_QWORD *)a2 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(a2, " = ", 3uLL);
    }
  }
  OpcodeName = llvm::Instruction::getOpcodeName((llvm::Instruction *)(*((unsigned __int8 *)v3 + 16) - 28));
  v6 = strlen(OpcodeName);
  result = (_BYTE *)*((_QWORD *)a2 + 4);
  if (v6 <= *((_QWORD *)a2 + 3) - (_QWORD)result)
  {
    if (v6)
    {
      memcpy(result, OpcodeName, v6);
      result = (_BYTE *)(*((_QWORD *)a2 + 4) + v6);
      *((_QWORD *)a2 + 4) = result;
    }
  }
  else
  {
    llvm::raw_ostream::write(a2, OpcodeName, v6);
    result = (_BYTE *)*((_QWORD *)a2 + 4);
  }
  if (*((_BYTE **)a2 + 3) == result)
  {
    result = llvm::raw_ostream::write(a2, " ", 1uLL);
  }
  else
  {
    *result = 32;
    ++*((_QWORD *)a2 + 4);
  }
  v7 = *((_DWORD *)v3 + 5);
  v8 = v7 & 0x7FFFFFF;
  if ((v7 & 0x7FFFFFF) != 0)
  {
    v11 = (v7 & 0x40000000) != 0 ? (llvm::Value **)*((_QWORD *)v3 - 1) : (llvm::Value **)((char *)v3 - 32 * v8);
    result = (_BYTE *)llvm::Value::printAsOperand(*v11, a2, 0, 0);
    if (v8 >= 2)
    {
      v12 = 32;
      do
      {
        v13 = *((_DWORD *)v3 + 5);
        if ((v13 & 0x40000000) != 0)
          v14 = (char *)*((_QWORD *)v3 - 1);
        else
          v14 = (char *)v3 - 32 * (v13 & 0x7FFFFFF);
        v15 = *(llvm::Value **)&v14[v12];
        v16 = (_WORD *)*((_QWORD *)a2 + 4);
        if (*((_QWORD *)a2 + 3) - (_QWORD)v16 > 1uLL)
        {
          *v16 = 8236;
          *((_QWORD *)a2 + 4) += 2;
        }
        else
        {
          llvm::raw_ostream::write(a2, ", ", 2uLL);
        }
        result = (_BYTE *)llvm::Value::printAsOperand(v15, a2, 0, 0);
        v12 += 32;
      }
      while (32 * v8 != v12);
    }
  }
  return result;
}

BOOL llvm::VPWidenIntOrFpInductionRecipe::isCanonical(llvm::VPWidenIntOrFpInductionRecipe *this)
{
  uint64_t v1;
  llvm::SCEV *v2;
  BOOL v3;
  llvm::APInt *v4;
  unsigned int v5;
  BOOL v6;
  _BOOL4 v7;

  v1 = *(_QWORD *)(**((_QWORD **)this + 6) + 40);
  if (*(_WORD *)(*(_QWORD *)(*((_QWORD *)this + 20) + 32) + 24))
    v2 = 0;
  else
    v2 = *(llvm::SCEV **)(*((_QWORD *)this + 20) + 32);
  if (v1)
    v3 = *(_BYTE *)(v1 + 16) == 16;
  else
    v3 = 0;
  if (!v3)
    return 0;
  v4 = (llvm::APInt *)(v1 + 24);
  v5 = *(_DWORD *)(v1 + 32);
  v6 = v5 > 0x40 ? llvm::APInt::countLeadingZerosSlowCase(v4) == v5 : *(_QWORD *)v4 == 0;
  v7 = v6;
  return v7 && v2 != 0 && llvm::SCEV::isOne(v2);
}

void llvm::VPWidenCanonicalIVRecipe::execute(llvm::VPValue ***this, llvm::VPTransformState *a2)
{
  unsigned __int8 *v4;
  uint64_t VectorSplat;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  llvm::Type *v10;
  unint64_t v11;
  uint64_t v13;
  uint64_t v14;
  BOOL v17;
  llvm::Value **StepForVF;
  uint64_t v19;
  llvm::ConstantInt ***v20;
  unsigned __int8 *StepVector;
  char *v22;
  char *v23;
  unsigned __int8 **v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  unsigned __int8 ***v29;
  uint64_t v30;
  llvm::Value *v31;
  char *v32;
  char *v33;
  llvm::Value ***v34;
  uint64_t v35;
  llvm::Value *v36;
  llvm::Value ****v37;
  llvm::Value *v38;
  char *v39;
  char *v40;
  unsigned __int8 **v41;
  int v42;
  unsigned __int8 *v43;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  char *v46;
  char *v47;
  unsigned __int8 **v48;
  int v49;
  unsigned __int8 *v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  char *v56;
  BOOL v57;
  llvm::ConstantInt *v58;
  _QWORD v59[4];
  __int16 v60;
  _QWORD v61[4];
  __int16 v62;
  _QWORD v63[4];
  __int16 v64;
  unsigned __int8 *v65;
  void *v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;

  v73 = *MEMORY[0x1E0C80C00];
  v4 = llvm::VPTransformState::get(a2, *this[6], 0);
  VectorSplat = (uint64_t)v4;
  v6 = *((_QWORD *)a2 + 11);
  v7 = *(_QWORD *)(v6 + 40);
  if (v7 == v6 + 40)
  {
    v9 = 0;
  }
  else
  {
    if (v7)
      v8 = v7 - 24;
    else
      v8 = 0;
    if (*(unsigned __int8 *)(v8 + 16) - 29 >= 0xB)
      v9 = 0;
    else
      v9 = v8;
  }
  v58 = *(llvm::ConstantInt **)v4;
  sub_1C4773D54((uint64_t)&v66, v9, 0, 0, 0);
  v10 = *(llvm::Type **)a2;
  v11 = *(_QWORD *)a2 & 0xFFFFFFFF00000000;
  if (v11 == 0x100000000 || (_DWORD)v10 != 1)
  {
    v63[0] = "broadcast";
    v64 = 259;
    VectorSplat = llvm::IRBuilderBase::CreateVectorSplat((uint64_t)&v66, v10, (uint64_t ***)VectorSplat, (uint64_t)v63);
  }
  v13 = *((unsigned int *)a2 + 2);
  if ((_DWORD)v13)
  {
    v14 = 0;
    v17 = (v11 != 0x100000000 || (_DWORD)v10 == 0) && v10 < 2;
    v57 = v17;
    v55 = (_QWORD *)(VectorSplat + 8);
    v56 = (char *)(this + 12);
    while (1)
    {
      StepForVF = llvm::createStepForVF((uint64_t *)&v66, v58, (unint64_t)v10, v14);
      if (!v57)
      {
        v64 = 257;
        v19 = llvm::IRBuilderBase::CreateVectorSplat((uint64_t)&v66, v10, (uint64_t ***)StepForVF, (uint64_t)v63);
        v20 = *(llvm::ConstantInt ****)v19;
        v62 = 257;
        StepVector = llvm::IRBuilderBase::CreateStepVector((uint64_t)&v66, v20, (uint64_t)v61);
        v60 = 257;
        StepForVF = (llvm::Value **)(*(uint64_t (**)(uint64_t, uint64_t, unsigned __int8 *, _QWORD, _QWORD))(*(_QWORD *)v71 + 16))(v71, v19, StepVector, 0, 0);
        if (!StepForVF)
        {
          v64 = 257;
          v22 = (char *)operator new(0x80uLL);
          v23 = v22;
          *(_QWORD *)v22 = 0;
          *((_QWORD *)v22 + 1) = 0;
          *((_QWORD *)v22 + 2) = 0;
          *((_QWORD *)v22 + 5) = 0;
          *((_QWORD *)v22 + 6) = 0;
          *((_QWORD *)v22 + 4) = 0;
          v24 = (unsigned __int8 **)(v22 + 32);
          *((_QWORD *)v22 + 8) = *(_QWORD *)v19;
          StepForVF = (llvm::Value **)(v22 + 64);
          *((_QWORD *)v22 + 3) = v22 + 64;
          *((_QWORD *)v22 + 7) = v22 + 64;
          *((_QWORD *)v22 + 9) = 0;
          v22[80] = 41;
          v22[81] = 0;
          *((_WORD *)v22 + 41) = 0;
          *((_DWORD *)v22 + 21) = 2;
          *((_DWORD *)v22 + 30) = 0;
          *(_OWORD *)(v22 + 104) = 0u;
          *(_OWORD *)(v22 + 88) = 0u;
          *(_QWORD *)v22 = v19;
          v27 = *(_QWORD *)(v19 + 8);
          v26 = (_QWORD *)(v19 + 8);
          v25 = v27;
          *((_QWORD *)v22 + 1) = v27;
          if (v27)
            *(_QWORD *)(v25 + 16) = v22 + 8;
          *((_QWORD *)v22 + 2) = v26;
          *v26 = v22;
          if (*((_QWORD *)v22 + 4))
          {
            **((_QWORD **)v22 + 6) = *((_QWORD *)v22 + 5);
            v54 = *((_QWORD *)v22 + 5);
            if (v54)
              *(_QWORD *)(v54 + 16) = *((_QWORD *)v22 + 6);
          }
          *v24 = StepVector;
          if (StepVector)
          {
            v30 = *((_QWORD *)StepVector + 1);
            v29 = (unsigned __int8 ***)(StepVector + 8);
            v28 = v30;
            *((_QWORD *)v22 + 5) = v30;
            if (v30)
              *(_QWORD *)(v28 + 16) = v22 + 40;
            *((_QWORD *)v22 + 6) = v29;
            *v29 = v24;
          }
          llvm::Value::setName((uint64_t ***)v22 + 8, (uint64_t)v63);
          (*(void (**)(uint64_t, llvm::Value **, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)v72 + 16))(v72, StepForVF, v59, v69, v70);
          if (v67)
            break;
        }
      }
LABEL_35:
      v61[0] = "vec.iv";
      v62 = 259;
      v31 = (llvm::Value *)(*(uint64_t (**)(uint64_t, uint64_t, llvm::Value **, _QWORD, _QWORD))(*(_QWORD *)v71 + 16))(v71, VectorSplat, StepForVF, 0, 0);
      if (!v31)
      {
        v64 = 257;
        v32 = (char *)operator new(0x80uLL);
        v33 = v32;
        *((_QWORD *)v32 + 5) = 0;
        *((_QWORD *)v32 + 6) = 0;
        *((_QWORD *)v32 + 4) = 0;
        v34 = (llvm::Value ***)(v32 + 32);
        *((_QWORD *)v32 + 8) = *(_QWORD *)VectorSplat;
        v31 = (llvm::Value *)(v32 + 64);
        *((_QWORD *)v32 + 3) = v32 + 64;
        *((_QWORD *)v32 + 7) = v32 + 64;
        *((_QWORD *)v32 + 9) = 0;
        v32[80] = 41;
        v32[81] = 0;
        *((_WORD *)v32 + 41) = 0;
        *((_DWORD *)v32 + 21) = 2;
        *(_OWORD *)(v32 + 88) = 0u;
        *(_OWORD *)(v32 + 104) = 0u;
        *((_DWORD *)v32 + 30) = 0;
        *(_QWORD *)v32 = VectorSplat;
        v35 = *(_QWORD *)(VectorSplat + 8);
        *((_QWORD *)v32 + 1) = v35;
        if (v35)
          *(_QWORD *)(v35 + 16) = v32 + 8;
        *((_QWORD *)v32 + 2) = v55;
        *v55 = v32;
        if (*((_QWORD *)v32 + 4))
        {
          **((_QWORD **)v32 + 6) = *((_QWORD *)v32 + 5);
          v53 = *((_QWORD *)v32 + 5);
          if (v53)
            *(_QWORD *)(v53 + 16) = *((_QWORD *)v32 + 6);
        }
        *v34 = StepForVF;
        if (StepForVF)
        {
          v38 = StepForVF[1];
          v37 = (llvm::Value ****)(StepForVF + 1);
          v36 = v38;
          *((_QWORD *)v32 + 5) = v38;
          if (v38)
            *((_QWORD *)v36 + 2) = v32 + 40;
          *((_QWORD *)v32 + 6) = v37;
          *v37 = v34;
        }
        llvm::Value::setName((uint64_t ***)v32 + 8, (uint64_t)v63);
        (*(void (**)(uint64_t, llvm::Value *, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)v72 + 16))(v72, v31, v61, v69, v70);
        if (v67)
        {
          v39 = (char *)v66;
          v40 = (char *)v66 + 16 * v67;
          v41 = (unsigned __int8 **)(v33 + 112);
          do
          {
            v42 = *(_DWORD *)v39;
            v43 = (unsigned __int8 *)*((_QWORD *)v39 + 1);
            if (v43)
            {
              if (!v42)
              {
                v59[0] = *((_QWORD *)v39 + 1);
                llvm::MetadataTracking::track((uint64_t)v59, v43, 2);
                v44 = *v41;
                if (!*v41)
                {
LABEL_58:
                  v45 = (unsigned __int8 *)v59[0];
                  *v41 = (unsigned __int8 *)v59[0];
                  if (v45)
                    llvm::MetadataTracking::retrack((uint64_t)v59, v45, (uint64_t)(v33 + 112));
                  goto LABEL_55;
                }
LABEL_52:
                llvm::MetadataTracking::untrack((uint64_t)(v33 + 112), v44);
                goto LABEL_58;
              }
            }
            else
            {
              v44 = *v41;
              if (!*v41 && (v33[87] & 0x20) == 0)
                goto LABEL_55;
              if (!v42)
              {
                v59[0] = 0;
                if (!v44)
                  goto LABEL_58;
                goto LABEL_52;
              }
            }
            llvm::Value::setMetadata(v31, *(_DWORD *)v39, (llvm::MDNode *)v43);
LABEL_55:
            v39 += 16;
          }
          while (v39 != v40);
        }
      }
      sub_1C63D1D2C((uint64_t)a2, v56, (uint64_t)v31, v14++);
      if (v14 == v13)
        goto LABEL_78;
    }
    v46 = (char *)v66;
    v47 = (char *)v66 + 16 * v67;
    v48 = (unsigned __int8 **)(v23 + 112);
    while (1)
    {
      v49 = *(_DWORD *)v46;
      v50 = (unsigned __int8 *)*((_QWORD *)v46 + 1);
      if (v50)
      {
        if (!v49)
        {
          v65 = (unsigned __int8 *)*((_QWORD *)v46 + 1);
          llvm::MetadataTracking::track((uint64_t)&v65, v50, 2);
          v51 = *v48;
          if (!*v48)
          {
LABEL_72:
            v52 = v65;
            *v48 = v65;
            if (v52)
              llvm::MetadataTracking::retrack((uint64_t)&v65, v52, (uint64_t)(v23 + 112));
            goto LABEL_69;
          }
LABEL_66:
          llvm::MetadataTracking::untrack((uint64_t)(v23 + 112), v51);
          goto LABEL_72;
        }
      }
      else
      {
        v51 = *v48;
        if (!*v48 && (v23[87] & 0x20) == 0)
          goto LABEL_69;
        if (!v49)
        {
          v65 = 0;
          if (!v51)
            goto LABEL_72;
          goto LABEL_66;
        }
      }
      llvm::Value::setMetadata((llvm::Value *)StepForVF, *(_DWORD *)v46, (llvm::MDNode *)v50);
LABEL_69:
      v46 += 16;
      if (v46 == v47)
        goto LABEL_35;
    }
  }
LABEL_78:
  if (v66 != &v68)
    free(v66);
}

_QWORD *llvm::VPFirstOrderRecurrencePHIRecipe::execute(llvm::VPFirstOrderRecurrencePHIRecipe *this, llvm::VPTransformState *a2)
{
  uint64_t v4;
  unsigned __int8 *v5;
  llvm::PoisonValue *v6;
  llvm::Type *v8;
  uint64_t **v9;
  llvm::PoisonValue *v10;
  const llvm::APInt *v11;
  uint64_t PreheaderBBFor;
  BOOL v13;
  uint64_t v15;
  llvm::ConstantInt *v16;
  unsigned int v17;
  char v18;
  llvm::ValueHandleBase *v19;
  llvm::ConstantInt *v20;
  unsigned __int8 *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  llvm::Value **RuntimeVF;
  uint64_t v26;
  llvm::Type *v27;
  _QWORD *v28;
  uint64_t v29;
  unsigned __int8 *v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *i;
  uint64_t *v34;
  unsigned int v35;
  BOOL v36;
  uint64_t v37;
  _QWORD *v39;
  _QWORD *v40;
  llvm::Value *v41;
  char *v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  llvm::ValueSymbolTable *v50;
  char *v51;
  unsigned int v52;
  __int16 v53;
  uint64_t v54;
  __int128 v55;
  char *v56;

  v4 = *((_QWORD *)a2 + 34);
  v5 = *(unsigned __int8 **)(**((_QWORD **)this + 6) + 40);
  v6 = *(llvm::PoisonValue **)v5;
  if (*((_DWORD *)a2 + 1) == 1 || *(_DWORD *)a2 != 1)
  {
    v8 = *(llvm::Type **)a2;
    v9 = *(uint64_t ***)v5;
    if (HIDWORD(*(_QWORD *)a2) == 1)
      llvm::ScalableVectorType::get(v9, v8);
    else
      llvm::FixedVectorType::get((llvm::FixedVectorType *)v9, v8);
    v6 = v10;
  }
  PreheaderBBFor = llvm::VPTransformState::CFGState::getPreheaderBBFor((llvm::VPTransformState *)((char *)a2 + 80), this);
  if (*(_DWORD *)a2)
    v13 = *((_DWORD *)a2 + 1) == 1;
  else
    v13 = 0;
  if (v13 || *(_DWORD *)a2 >= 2u)
  {
    v15 = **(_QWORD **)(v4 + 64);
    v16 = *(llvm::ConstantInt **)(v15 + 1960);
    v17 = *(_DWORD *)(v15 + 1968);
    v52 = v17 >> 8;
    if (v17 >> 8 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v51, 1, 0);
    }
    else
    {
      if (v17 <= 0xFF)
        v18 = 0;
      else
        v18 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v17);
      v51 = (char *)(v18 & 1);
    }
    v19 = llvm::ConstantInt::get(v16, (llvm::LLVMContext *)&v51, v11);
    if (v52 >= 0x41 && v51)
      MEMORY[0x1CAA32F9C](v51, 0x1000C8000313F17);
    v20 = (llvm::ConstantInt *)(v15 + 1960);
    v54 = v4;
    v55 = *(_OWORD *)(v4 + 48);
    llvm::IRBuilderBase::getCurrentDebugLocation((unsigned int *)v4, (unsigned __int8 **)&v56);
    v21 = 0;
    v22 = *(_QWORD *)(PreheaderBBFor + 40);
    if (v22)
      v23 = v22 - 24;
    else
      v23 = 0;
    if (*(unsigned __int8 *)(v23 + 16) - 29 >= 0xB)
      v23 = 0;
    *(_QWORD *)(v4 + 48) = *(_QWORD *)(v23 + 40);
    *(_QWORD *)(v4 + 56) = v23 + 24;
    v24 = *(unsigned __int8 **)(v23 + 48);
    v51 = (char *)v24;
    if (v24)
    {
      llvm::MetadataTracking::track((uint64_t)&v51, v24, 2);
      v21 = (unsigned __int8 *)v51;
    }
    sub_1C4774EF4(v4, 0, (uint64_t)v21);
    if (v51)
      llvm::MetadataTracking::untrack((uint64_t)&v51, (unsigned __int8 *)v51);
    RuntimeVF = llvm::getRuntimeVF((uint64_t *)v4, v20, *(_QWORD *)a2);
    v53 = 257;
    v26 = sub_1C47733F8(v4, (uint64_t)RuntimeVF, (uint64_t)v19, (uint64_t)&v51, 0, 0);
    v28 = llvm::PoisonValue::get(v6, v27);
    v51 = "vector.recur.init";
    v53 = 259;
    v5 = sub_1C4773154((uint64_t *)v4, (uint64_t)v28, (uint64_t)v5, v26, (uint64_t)&v51);
    v29 = v54;
    if ((_QWORD)v55)
    {
      sub_1C4D8AE2C(v54, v55, *((uint64_t *)&v55 + 1));
      v29 = v54;
    }
    else
    {
      *(_QWORD *)(v54 + 48) = 0;
      *(_QWORD *)(v29 + 56) = 0;
    }
    v51 = v56;
    if (v56)
    {
      llvm::MetadataTracking::track((uint64_t)&v51, (unsigned __int8 *)v56, 2);
      v30 = (unsigned __int8 *)v51;
    }
    else
    {
      v30 = 0;
    }
    sub_1C4774EF4(v29, 0, (uint64_t)v30);
    if (v51)
      llvm::MetadataTracking::untrack((uint64_t)&v51, (unsigned __int8 *)v51);
    if (v56)
      llvm::MetadataTracking::untrack((uint64_t)&v56, (unsigned __int8 *)v56);
  }
  v51 = "vector.recur";
  v53 = 259;
  v31 = *((_QWORD *)a2 + 11);
  v32 = (uint64_t *)(v31 + 40);
  for (i = *(uint64_t **)(v31 + 48); i != v32; i = (uint64_t *)i[1])
  {
    v34 = i - 3;
    if (!i)
      v34 = 0;
    if (*((_BYTE *)v34 + 16) != 83)
    {
      v35 = *((unsigned __int8 *)i - 8) - 38;
      v36 = v35 > 0x38;
      v37 = (1 << v35) & 0x100060000000001;
      if (v36 || v37 == 0)
        v32 = i;
      else
        v32 = (uint64_t *)i[1];
      break;
    }
  }
  v39 = operator new(0x48uLL);
  v40 = v39;
  v39[1] = v6;
  v41 = (llvm::Value *)(v39 + 1);
  *v39 = 0;
  v39[2] = 0;
  v39[3] = 0x4000000000000053;
  *((_OWORD *)v39 + 2) = 0u;
  v42 = (char *)(v39 + 4);
  *((_OWORD *)v39 + 3) = 0u;
  *((_DWORD *)v39 + 16) = 0;
  if (v32)
  {
    v47 = v32[2];
    v39[6] = v47;
    *(_WORD *)(v47 + 18) &= ~0x8000u;
    if ((*((_BYTE *)v39 + 31) & 0x10) != 0)
    {
      v49 = *(_QWORD *)(v47 + 56);
      if (v49)
      {
        v50 = *(llvm::ValueSymbolTable **)(v49 + 104);
        if (v50)
          llvm::ValueSymbolTable::reinsertValue(v50, v41);
      }
    }
    v48 = *v32;
    v40[4] = *v32;
    v40[5] = v32;
    *(_QWORD *)(v48 + 8) = v42;
    *v32 = (uint64_t)v42;
  }
  *((_DWORD *)v40 + 17) = 2;
  llvm::Value::setName((uint64_t ***)v41, (uint64_t)&v51);
  v43 = *((unsigned int *)v40 + 17);
  v44 = operator new(40 * v43);
  *v40 = v44;
  if ((_DWORD)v43)
  {
    v45 = &v44[4 * v43];
    do
    {
      *v44 = 0;
      v44[1] = 0;
      v44[2] = 0;
      v44[3] = v41;
      v44 += 4;
    }
    while (v44 != v45);
  }
  sub_1C477667C(v41, (uint64_t)v5, PreheaderBBFor);
  return sub_1C63D1D2C((uint64_t)a2, (char *)this + 96, (uint64_t)v41, 0);
}

uint64_t llvm::DomTreeBuilder::Calculate<llvm::DominatorTreeBase<llvm::VPBlockBase,false>>(uint64_t a1)
{
  return sub_1C60C2600(a1, 0);
}

uint64_t sub_1C60C2600(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t *v9;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  _QWORD v20[2];

  v20[1] = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 56);
  sub_1C4EF5C94((uint64_t *)(a1 + 24));
  *(_DWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 68) = 0;
  *(_BYTE *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = v4;
  if (a2)
  {
    v6 = *(_QWORD *)(a2 + 16);
    if (v6)
    {
      sub_1C63E6D9C(*(_QWORD *)(a2 + 8), v6);
      v4 = *(_QWORD *)(a1 + 56);
      v7 = a2;
    }
    else
    {
      v7 = 0;
    }
    v8 = operator new(8uLL);
    v11 = v8;
    *v8 = 0;
    v12 = v8 + 1;
    v13 = v8 + 1;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = v7;
    v18 = v20;
    v20[0] = *(_QWORD *)(v4 + 200);
    v19 = 0x100000001;
    sub_1C614D378(a1, (uint64_t)&v18);
    if (v18 != v20)
      free(v18);
    sub_1C60C49A4((uint64_t)&v11, **(void ***)a1, 0, (unsigned int (*)(uint64_t, uint64_t))sub_1C63E6DF4, 0, 0);
    sub_1C60C4600((uint64_t *)&v11, a1, 0);
    *(_BYTE *)a2 = 1;
  }
  else
  {
    v5 = operator new(8uLL);
    v11 = v5;
    *v5 = 0;
    v12 = v5 + 1;
    v13 = v5 + 1;
    v14 = 0;
    v15 = 0;
    v16 = 0;
    v17 = 0;
    v18 = v20;
    v20[0] = *(_QWORD *)(v4 + 200);
    v19 = 0x100000001;
    sub_1C614D378(a1, (uint64_t)&v18);
    if (v18 != v20)
      free(v18);
    sub_1C60C49A4((uint64_t)&v11, **(void ***)a1, 0, (unsigned int (*)(uint64_t, uint64_t))sub_1C63E6DF4, 0, 0);
    sub_1C60C4600((uint64_t *)&v11, a1, 0);
  }
  if (*(_DWORD *)(a1 + 8))
  {
    v9 = (uint64_t *)sub_1C63E6DFC(a1, **(_QWORD **)a1);
    *(_QWORD *)(a1 + 48) = v9;
    sub_1C60C48A8((uint64_t)&v11, a1, v9);
  }
  return sub_1C63E778C((uint64_t)&v11);
}

void llvm::VPInterleavedAccessInfo::visitRegion(unint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  char *v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;

  v10 = *(_QWORD *)(a2 + 200);
  v11 = 0;
  v12 = 0;
  v13 = 0;
  sub_1C63E6C88(&v11, &v10);
  v8 = v11;
  v7 = v12;
  if (v12 != v11)
  {
    do
    {
      v9 = *((_QWORD *)v7 - 1);
      v7 -= 8;
      llvm::VPInterleavedAccessInfo::visitBlock(a1, v9, a3, a4);
    }
    while (v7 != v8);
    v7 = v11;
  }
  if (v7)
  {
    v12 = v7;
    operator delete(v7);
  }
}

unint64_t llvm::VPInterleavedAccessInfo::visitBlock(unint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  uint64_t v22;
  unsigned int *v23;
  unsigned int v24;
  signed int v25;
  unsigned int v26;
  unint64_t v27;
  signed int v28;
  BOOL v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  int *v34;
  int v35;
  int v36;
  int v37;
  unsigned int *v38;
  uint64_t *v39;
  unsigned __int8 v40;
  unsigned __int8 v41;
  int v42;
  unsigned int v43;
  signed int *v44;
  int v45;
  uint64_t *v46;
  int *v47;
  int v48;
  BOOL v49;
  unsigned int v50;
  unsigned int v51;
  int v52;
  int v53;
  unsigned int *v54;
  unsigned int v55;
  uint64_t v56;
  unsigned int v57;
  unsigned int v58;
  int v59;
  int *v60;
  int v61;
  BOOL v62;
  unsigned int v63;
  unsigned int *v64;
  unsigned int v65;
  uint64_t v66;
  unsigned int v67;
  unsigned int v68;
  int v69;
  int v70;
  BOOL v71;
  unsigned int v72;
  unsigned int *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  v5 = result;
  if (!a2 || *(_BYTE *)(a2 + 8))
  {
    if (*(_BYTE *)(a2 + 8) != 1)
      a2 = 0;
    return llvm::VPInterleavedAccessInfo::visitRegion(result, a2, a3);
  }
  else
  {
    v6 = a2 + 200;
    v7 = *(_QWORD *)(a2 + 208);
    if (v7 != a2 + 200)
    {
      v8 = (uint64_t *)(a4 + 48);
      do
      {
        if (v7)
          v9 = v7 - 24;
        else
          v9 = 0;
        v10 = *(unsigned __int8 *)(v9 + 8);
        if ((v10 - 14) < 4 || v10 == 20)
          goto LABEL_13;
        v74 = v9;
        v75 = 0;
        v12 = *(_QWORD *)(v9 + 136);
        v76 = v12;
        result = sub_1C61252B8(v8, &v76, &v75);
        if ((result & 1) == 0)
          goto LABEL_13;
        v13 = *(_QWORD *)(v75 + 8);
        v76 = v13;
        if (!v13)
          goto LABEL_13;
        v14 = *(unsigned int *)(a3 + 16);
        if ((_DWORD)v14)
        {
          v15 = *(_QWORD *)a3;
          LODWORD(v16) = (v14 - 1) & ((v13 >> 4) ^ (v13 >> 9));
          v17 = (uint64_t *)(*(_QWORD *)a3 + 16 * v16);
          v18 = *v17;
          if (*v17 == v13)
          {
LABEL_19:
            if (v17 != (uint64_t *)(v15 + 16 * v14))
              goto LABEL_21;
          }
          else
          {
            v52 = 1;
            while (v18 != -4096)
            {
              v53 = v16 + v52++;
              v16 = v53 & (v14 - 1);
              v18 = *(_QWORD *)(v15 + 16 * v16);
              if (v18 == v13)
              {
                v17 = (uint64_t *)(v15 + 16 * v16);
                goto LABEL_19;
              }
            }
          }
        }
        v19 = operator new();
        v20 = *(_BYTE *)(v13 + 4);
        v21 = *(_BYTE *)(v13 + 5);
        *(_DWORD *)v19 = *(_DWORD *)v13;
        *(_BYTE *)(v19 + 4) = v20;
        *(_BYTE *)(v19 + 5) = v21;
        *(_QWORD *)(v19 + 8) = 0;
        *(_QWORD *)(v19 + 16) = 0;
        *(_DWORD *)(v19 + 24) = 0;
        *(_QWORD *)(v19 + 32) = 0;
        *(_QWORD *)(v19 + 40) = 0;
        sub_1C60C6238(a3, &v76)[1] = v19;
LABEL_21:
        if (v12 == *(_QWORD *)(v13 + 40))
          *(_QWORD *)(sub_1C60C6238(a3, &v76)[1] + 40) = v9;
        v22 = sub_1C60C6238(a3, &v76)[1];
        sub_1C60C6238(v5, &v74)[1] = v22;
        v23 = (unsigned int *)sub_1C60C6238(v5, &v74)[1];
        v24 = sub_1C4FA892C(v13, v12);
        v25 = v24;
        v26 = *(_DWORD *)v13;
        if (*(_BYTE *)(v13 + 4))
          v27 = -v26;
        else
          v27 = v26;
        result = sub_1C4FAA3C4(v24, v23[8], (void (*)(uint64_t **__return_ptr, char *, uint64_t *, char *))llvm::APInt::sadd_ov, 0);
        v28 = result;
        if (HIDWORD(result))
          v29 = (result - 0x7FFFFFFF) >= 2;
        else
          v29 = 0;
        if (!v29)
          goto LABEL_13;
        v31 = (uint64_t *)(v23 + 2);
        v30 = *((_QWORD *)v23 + 1);
        v32 = v23[6];
        v73 = v23;
        if ((_DWORD)v32)
        {
          LODWORD(v33) = (v32 - 1) & (37 * result);
          v34 = (int *)(v30 + 16 * v33);
          v35 = *v34;
          if (*v34 == (_DWORD)result)
            goto LABEL_38;
          v36 = 1;
          while (1)
          {
            v31 = (uint64_t *)(v23 + 2);
            if (v35 == 0x7FFFFFFF)
              break;
            v37 = v33 + v36++;
            v33 = v37 & (v32 - 1);
            v35 = *(_DWORD *)(v30 + 16 * v33);
            if (v35 == (_DWORD)result)
            {
              v34 = (int *)(v30 + 16 * v33);
              v31 = (uint64_t *)(v23 + 2);
              goto LABEL_38;
            }
          }
        }
        v34 = (int *)(v30 + 16 * v32);
LABEL_38:
        v38 = v23;
        if ((int *)(v30 + 16 * v32) == v34)
        {
          result = v23[9];
          if ((int)result >= v28)
          {
            if ((int)v23[8] > v28)
            {
              v39 = v31;
              result = sub_1C4FAA3C4(result, v28, (void (*)(uint64_t **__return_ptr, char *, uint64_t *, char *))llvm::APInt::ssub_ov, 0);
              if (!HIDWORD(result) || *v23 <= (uint64_t)(int)result)
                goto LABEL_13;
              v31 = v39;
              v23[8] = v28;
              v30 = *((_QWORD *)v23 + 1);
              LODWORD(v32) = v23[6];
              v38 = v23;
            }
LABEL_46:
            v40 = 63 - __clz(v27);
            if (*((unsigned __int8 *)v38 + 5) >= v40)
              v41 = v40;
            else
              v41 = *((_BYTE *)v38 + 5);
            *((_BYTE *)v38 + 5) = v41;
            if (!(_DWORD)v32)
            {
              v44 = 0;
              goto LABEL_61;
            }
            v42 = v32 - 1;
            v43 = (v32 - 1) & (37 * v28);
            v44 = (signed int *)(v30 + 16 * v43);
            v45 = *v44;
            if (*v44 != v28)
            {
              v46 = v31;
              v47 = 0;
              v48 = 1;
              while (v45 != 0x7FFFFFFF)
              {
                if (v47)
                  v49 = 0;
                else
                  v49 = v45 == 0x80000000;
                if (v49)
                  v47 = v44;
                v50 = v43 + v48++;
                v43 = v50 & v42;
                v44 = (signed int *)(v30 + 16 * (v50 & v42));
                v45 = *v44;
                if (*v44 == v28)
                  goto LABEL_66;
              }
              if (v47)
                v44 = v47;
              v38 = v23;
              v31 = v46;
LABEL_61:
              v51 = v38[4];
              if (4 * v51 + 4 < 3 * (int)v32)
              {
                if ((_DWORD)v32 + ~v51 - v38[5] > v32 >> 3)
                  goto LABEL_63;
                v64 = v38;
                result = (unint64_t)sub_1C4FA99D8(v31, v32);
                v65 = v64[6];
                if (v65)
                {
                  v66 = *((_QWORD *)v73 + 1);
                  v67 = v65 - 1;
                  v68 = (v65 - 1) & (37 * v28);
                  v44 = (signed int *)(v66 + 16 * v68);
                  v69 = *v44;
                  if (*v44 != v28)
                  {
                    v60 = 0;
                    v70 = 1;
                    while (v69 != 0x7FFFFFFF)
                    {
                      if (v60)
                        v71 = 0;
                      else
                        v71 = v69 == 0x80000000;
                      if (v71)
                        v60 = v44;
                      v72 = v68 + v70++;
                      v68 = v72 & v67;
                      v44 = (signed int *)(v66 + 16 * (v72 & v67));
                      v69 = *v44;
                      v38 = v73;
                      if (*v44 == v28)
                        goto LABEL_63;
                    }
                    goto LABEL_98;
                  }
                  goto LABEL_97;
                }
LABEL_96:
                v44 = 0;
                goto LABEL_97;
              }
              v54 = v38;
              result = (unint64_t)sub_1C4FA99D8(v31, 2 * (int)v32);
              v55 = v54[6];
              if (!v55)
                goto LABEL_96;
              v56 = *((_QWORD *)v73 + 1);
              v57 = v55 - 1;
              v58 = (v55 - 1) & (37 * v28);
              v44 = (signed int *)(v56 + 16 * v58);
              v59 = *v44;
              if (*v44 != v28)
              {
                v60 = 0;
                v61 = 1;
                while (v59 != 0x7FFFFFFF)
                {
                  if (v60)
                    v62 = 0;
                  else
                    v62 = v59 == 0x80000000;
                  if (v62)
                    v60 = v44;
                  v63 = v58 + v61++;
                  v58 = v63 & v57;
                  v44 = (signed int *)(v56 + 16 * (v63 & v57));
                  v59 = *v44;
                  v38 = v73;
                  if (*v44 == v28)
                    goto LABEL_63;
                }
LABEL_98:
                if (v60)
                  v44 = v60;
              }
LABEL_97:
              v38 = v73;
LABEL_63:
              ++v38[4];
              if (*v44 != 0x7FFFFFFF)
                --v38[5];
              *v44 = v28;
              *((_QWORD *)v44 + 1) = 0;
            }
LABEL_66:
            *((_QWORD *)v44 + 1) = v9;
            goto LABEL_13;
          }
          if ((int)*v23 > v25)
          {
            v23[9] = v28;
            goto LABEL_46;
          }
        }
LABEL_13:
        v7 = *(_QWORD *)(v7 + 8);
      }
      while (v7 != v6);
    }
  }
  return result;
}

llvm::VPInterleavedAccessInfo *llvm::VPInterleavedAccessInfo::VPInterleavedAccessInfo(llvm::VPInterleavedAccessInfo *this, llvm::VPlan *a2, llvm::InterleavedAccessInfo *a3)
{
  uint64_t v4;
  BOOL v5;
  _QWORD v7[2];
  int v8;

  *(_QWORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  *((_DWORD *)this + 4) = 0;
  v7[0] = 0;
  v7[1] = 0;
  v8 = 0;
  v4 = *(_QWORD *)a2;
  if (v4)
    v5 = *(_BYTE *)(v4 + 8) == 1;
  else
    v5 = 0;
  if (!v5)
  {
    if (*(_DWORD *)(v4 + 80) == 1)
      v4 = **(_QWORD **)(v4 + 72);
    else
      v4 = 0;
  }
  llvm::VPInterleavedAccessInfo::visitRegion((unint64_t)this, v4, (uint64_t)v7, (uint64_t)a3);
  MEMORY[0x1CAA32FB4](v7[0], 8);
  return this;
}

_QWORD *llvm::VPSlotTracker::assignSlot(llvm::VPSlotTracker *this, const llvm::VPValue *a2)
{
  int v2;
  _QWORD *result;
  const llvm::VPValue *v4;

  v4 = a2;
  v2 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = v2 + 1;
  result = sub_1C6144C70((uint64_t)this, (uint64_t *)&v4);
  *((_DWORD *)result + 2) = v2;
  return result;
}

void llvm::VPSlotTracker::assignSlots(llvm::VPSlotTracker *this, const llvm::VPlan *a2)
{
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  _QWORD *v11;
  int v12;
  int v13;
  uint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t i;
  uint64_t v22;
  unint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  char *v31;
  char *v32;
  uint64_t v33;
  uint64_t v34;

  v4 = *((_QWORD *)a2 + 11);
  v5 = *((unsigned int *)a2 + 26);
  v6 = (_QWORD *)(v4 + 16 * v5);
  if (*((_DWORD *)a2 + 24))
  {
    if ((_DWORD)v5)
    {
      v8 = 16 * v5;
      v7 = (_QWORD *)*((_QWORD *)a2 + 11);
      while ((*v7 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v7 += 2;
        v8 -= 16;
        if (!v8)
          goto LABEL_7;
      }
    }
    else
    {
      v7 = (_QWORD *)*((_QWORD *)a2 + 11);
    }
  }
  else
  {
LABEL_7:
    v7 = (_QWORD *)(v4 + 16 * v5);
  }
  v9 = (_QWORD *)(v4 + 16 * v5);
LABEL_9:
  while (v7 != v9)
  {
    v31 = (char *)v7[1];
    v10 = *((_DWORD *)this + 6);
    *((_DWORD *)this + 6) = v10 + 1;
    *((_DWORD *)sub_1C6144C70((uint64_t)this, (uint64_t *)&v31) + 2) = v10;
    v11 = v7 + 2;
    v7 = v6;
    if (v11 != v6)
    {
      v7 = v11;
      while ((*v7 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v7 += 2;
        if (v7 == v6)
        {
          v7 = v6;
          goto LABEL_9;
        }
      }
    }
  }
  v31 = (char *)a2 + 128;
  v12 = *((_DWORD *)this + 6);
  *((_DWORD *)this + 6) = v12 + 1;
  *((_DWORD *)sub_1C6144C70((uint64_t)this, (uint64_t *)&v31) + 2) = v12;
  if (*((_QWORD *)a2 + 15))
  {
    v31 = (char *)*((_QWORD *)a2 + 15);
    v13 = *((_DWORD *)this + 6);
    *((_DWORD *)this + 6) = v13 + 1;
    *((_DWORD *)sub_1C6144C70((uint64_t)this, (uint64_t *)&v31) + 2) = v13;
  }
  v14 = *(_QWORD *)a2;
  v32 = 0;
  v33 = 0;
  v31 = 0;
  sub_1C63E7834((uint64_t)&v31, v14);
  v16 = v31;
  v15 = v32;
  do
  {
    if (v15 == v31)
      goto LABEL_36;
    v18 = *((_QWORD *)v15 - 1);
    v15 -= 8;
    v17 = v18;
  }
  while (*(_BYTE *)(v18 + 8));
LABEL_20:
  v19 = v15 + 8;
  v20 = v17 + 200;
  for (i = *(_QWORD *)(v17 + 208); i != v20; i = *(_QWORD *)(i + 8))
  {
    v22 = i - 24;
    if (!i)
      v22 = 0;
    v24 = (uint64_t *)(v22 + 16);
    v23 = *(_QWORD *)(v22 + 16);
    if (v23 >= 8)
    {
      if ((v23 & 4) != 0)
      {
        v26 = v23 & 0xFFFFFFFFFFFFFFF8;
        v27 = *(unsigned int *)(v26 + 8);
        if (!(_DWORD)v27)
          continue;
        v24 = *(uint64_t **)v26;
        v25 = *(_QWORD *)v26 + 8 * v27;
      }
      else
      {
        v25 = v22 + 24;
      }
      do
      {
        v28 = *v24++;
        v34 = v28;
        v29 = *((_DWORD *)this + 6);
        *((_DWORD *)this + 6) = v29 + 1;
        *((_DWORD *)sub_1C6144C70((uint64_t)this, &v34) + 2) = v29;
      }
      while (v24 != (uint64_t *)v25);
    }
  }
  v15 = v19 - 8;
  while (v15 != v16)
  {
    v30 = *((_QWORD *)v15 - 1);
    v15 -= 8;
    v17 = v30;
    if (!*(_BYTE *)(v30 + 8))
      goto LABEL_20;
  }
  v16 = v31;
LABEL_36:
  if (v16)
  {
    v32 = v16;
    operator delete(v16);
  }
}

uint64_t llvm::vputils::getOrCreateVPValueForSCEVExpr(llvm::vputils *this, llvm::VPlan *a2, const llvm::SCEV *a3, llvm::ScalarEvolution *a4)
{
  llvm::vputils *v6;
  uint64_t v7;
  uint64_t v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;

  v6 = this;
  if (a2 && !*((_WORD *)a2 + 12))
  {
    v7 = *((_QWORD *)a2 + 4);
    return sub_1C63D7A5C((uint64_t)this, v7);
  }
  if (a2 && *((_WORD *)a2 + 12) == 14)
  {
    v7 = *((_QWORD *)a2 - 1);
    return sub_1C63D7A5C((uint64_t)this, v7);
  }
  do
  {
    v9 = *(_QWORD *)v6;
    v10 = *(unsigned __int8 *)(*(_QWORD *)v6 + 8);
    v6 = (llvm::vputils *)(*(_QWORD *)v6 + 200);
    if (v9)
      v11 = v10 == 1;
    else
      v11 = 0;
  }
  while (v11);
  v12 = operator new();
  *(_BYTE *)(v12 + 8) = 1;
  *(_QWORD *)(v12 + 24) = 0;
  *(_QWORD *)(v12 + 32) = 0;
  *(_QWORD *)(v12 + 16) = 0;
  *(_QWORD *)(v12 + 56) = 0x200000000;
  *(_DWORD *)(v12 + 80) = 0;
  *(_QWORD *)(v12 + 88) = 0;
  *(_QWORD *)v12 = &off_1E81ADA48;
  *(_QWORD *)(v12 + 40) = &unk_1E81ADA88;
  *(_QWORD *)(v12 + 48) = v12 + 64;
  *(_QWORD *)(v12 + 96) = &off_1E81ADA28;
  *(_BYTE *)(v12 + 104) = 0;
  *(_QWORD *)(v12 + 112) = v12 + 128;
  *(_QWORD *)(v12 + 120) = 0x100000000;
  *(_QWORD *)(v12 + 136) = 0;
  *(_QWORD *)(v12 + 144) = v12;
  sub_1C619116C(v12 + 16, v12 + 96);
  *(_QWORD *)v12 = &off_1E81ADA48;
  *(_QWORD *)(v12 + 40) = &unk_1E81ADA88;
  *(_QWORD *)(v12 + 152) = a2;
  *(_QWORD *)(v12 + 160) = a3;
  v13 = *(_QWORD **)(v12 + 144);
  v14 = *(_QWORD *)(v9 + 200);
  v13[3] = v14;
  v13 += 3;
  *(_QWORD *)(v12 + 96) = &unk_1E81ADAA8;
  v13[8] = v9;
  v13[1] = v6;
  *(_QWORD *)(v14 + 8) = v13;
  *(_QWORD *)(v9 + 200) = v13;
  return v12 + 96;
}

unint64_t *sub_1C60C322C(unint64_t *result, uint64_t a2)
{
  unint64_t v2;
  unint64_t *v3;
  unint64_t *v4;
  unint64_t *i;
  _BOOL4 v6;
  unint64_t v7;

  v2 = *result;
  if ((*result & 4) != 0)
  {
    v4 = *(unint64_t **)(v2 & 0xFFFFFFFFFFFFFFF8);
    v3 = &v4[*(unsigned int *)((v2 & 0xFFFFFFFFFFFFFFF8) + 8)];
  }
  else
  {
    v3 = &result[v2 > 7];
    v4 = result;
  }
  if (v4 != v3)
  {
    while (*v4 != a2)
    {
      if (++v4 == v3)
      {
        v4 = v3;
        break;
      }
    }
  }
  if (v4 != v3)
  {
    for (i = v4 + 1; i != v3; ++i)
    {
      if (*i != a2)
        *v4++ = *i;
    }
  }
  if ((v2 & 4) != 0)
  {
    v7 = v2 & 0xFFFFFFFFFFFFFFF8;
    if (v7)
      *(_DWORD *)(v7 + 8) = ((unint64_t)v4 - *(_QWORD *)v7) >> 3;
  }
  else
  {
    v6 = v2 > 7;
    if (v4 == result && v4 != &result[v6])
      *result = 0;
  }
  return result;
}

uint64_t sub_1C60C32EC(uint64_t a1)
{
  void *v2;
  void *v3;

  *(_QWORD *)a1 = &unk_1E81AD6C0;
  sub_1C63DB2AC(a1 + 144);
  sub_1C63DB2AC(a1 + 96);
  v2 = *(void **)(a1 + 72);
  if (v2 != (void *)(a1 + 88))
    free(v2);
  v3 = *(void **)(a1 + 48);
  if (v3 != (void *)(a1 + 64))
    free(v3);
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t sub_1C60C3360(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  const void *v5;
  const void *v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  int v10;
  _BYTE *v11;
  const void *v12;
  const void *v13;
  unsigned int v14;
  uint64_t i;
  char *v16;
  char *v17;
  char *v18;
  int v19;
  BOOL v20;
  uint64_t v22;
  uint64_t v23;
  _BYTE *v24;
  _BYTE v25[64];
  char *v26;
  char *v27;
  uint64_t v28;
  _BYTE *v29;
  _BYTE *v30;
  unsigned int v31;
  unsigned int v32;
  int v33;
  _BYTE v34[64];
  void *__p;
  char *v36;
  uint64_t v37;

  v4 = v34;
  v29 = v34;
  v5 = *(const void **)(a1 + 8);
  if (v5 == *(const void **)a1)
  {
    v30 = v34;
    v6 = v5;
  }
  else
  {
    v22 = *(unsigned int *)(a1 + 16);
    v4 = malloc_type_malloc(8 * v22, 0x4065EBACuLL);
    if (!v4)
    {
      if ((_DWORD)v22)
        goto LABEL_49;
      v4 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v4)
        goto LABEL_49;
    }
    v30 = v4;
    v6 = *(const void **)a1;
    v5 = *(const void **)(a1 + 8);
  }
  v8 = *(_DWORD *)(a1 + 16);
  v7 = *(_DWORD *)(a1 + 20);
  v31 = v8;
  if (v5 == v6)
    v9 = v7;
  else
    v9 = v8;
  if (v9)
  {
    memmove(v4, v5, 8 * v9);
    v7 = *(_DWORD *)(a1 + 20);
  }
  v10 = *(_DWORD *)(a1 + 24);
  v32 = v7;
  v33 = v10;
  v36 = 0;
  v37 = 0;
  __p = 0;
  sub_1C4D6CDA0(&__p, *(_BYTE **)(a1 + 96), *(_BYTE **)(a1 + 104), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96)) >> 3));
  v11 = v25;
  v12 = *(const void **)(a2 + 8);
  if (v12 != *(const void **)a2)
  {
    v23 = *(unsigned int *)(a2 + 16);
    v11 = malloc_type_malloc(8 * v23, 0x4065EBACuLL);
    if (v11 || !(_DWORD)v23 && (v11 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
    {
      v24 = v11;
      v13 = *(const void **)a2;
      v12 = *(const void **)(a2 + 8);
      goto LABEL_10;
    }
LABEL_49:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  v24 = v25;
  v13 = *(const void **)(a2 + 8);
LABEL_10:
  if (v12 == v13)
    v14 = *(_DWORD *)(a2 + 20);
  else
    v14 = *(_DWORD *)(a2 + 16);
  if (v14)
    memmove(v11, v12, 8 * v14);
  v27 = 0;
  v28 = 0;
  v26 = 0;
  sub_1C4D6CDA0(&v26, *(_BYTE **)(a2 + 96), *(_BYTE **)(a2 + 104), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 104) - *(_QWORD *)(a2 + 96)) >> 3));
  for (i = 0; ; ++i)
  {
    if (v36 - (_BYTE *)__p != v27 - v26)
      goto LABEL_30;
    if (__p == v36)
      break;
    v16 = v26 + 8;
    v17 = (char *)__p + 8;
    while (1)
    {
      v18 = v17 - 8;
      if (*((_QWORD *)v17 - 1) != *((_QWORD *)v16 - 1))
        break;
      v19 = v16[8];
      if (v17[8])
        v20 = v19 == 0;
      else
        v20 = 1;
      if (v20)
      {
        if ((v17[8] == 0) == (v19 != 0))
          break;
      }
      else if (*(_QWORD *)v17 != *(_QWORD *)v16)
      {
        break;
      }
      v16 += 24;
      v17 += 24;
      if (v18 + 24 == v36)
        goto LABEL_31;
    }
LABEL_30:
    sub_1C63DD89C((char *)&v29);
  }
LABEL_31:
  if (v26)
  {
    v27 = v26;
    operator delete(v26);
  }
  if (v24 != v25)
    free(v24);
  if (__p)
  {
    v36 = (char *)__p;
    operator delete(__p);
  }
  if (v30 != v29)
    free(v30);
  return i;
}

void sub_1C60C35EC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  _BYTE *v6;
  const void *v7;
  const void *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  _BYTE *v13;
  const void *v14;
  const void *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  char *v19;
  _BYTE *v20;
  unsigned int v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  int v29;
  BOOL v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _BYTE *v35;
  _BYTE *v36;
  int v37;
  unsigned int v38;
  int v39;
  _BYTE v40[64];
  void *__p;
  __int128 v42;
  _BYTE *v43;
  _BYTE *v44;
  uint64_t v45;
  int v46;
  _BYTE v47[57];
  void *v48;
  __int128 v49;
  _BYTE *v50;
  _BYTE *v51;
  int v52;
  unsigned int v53;
  int v54;
  _BYTE v55[64];
  char *v56;
  __int128 v57;
  _BYTE *v58;
  _BYTE *v59;
  unint64_t v60;
  int v61;
  _BYTE v62[64];
  void *v63;
  __int128 v64;
  _BYTE *v65;
  _BYTE *v66;
  int v67;
  int v68;
  int v69;
  _BYTE v70[64];
  char *v71;
  char *v72;
  uint64_t v73;
  _QWORD *v74;

  v6 = v47;
  v43 = v47;
  v7 = *(const void **)(a1 + 8);
  if (v7 == *(const void **)a1)
  {
    v44 = v47;
    v8 = v7;
  }
  else
  {
    v33 = *(unsigned int *)(a1 + 16);
    v6 = malloc_type_malloc(8 * v33, 0x4065EBACuLL);
    if (!v6)
    {
      if ((_DWORD)v33)
        goto LABEL_74;
      v6 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v6)
        goto LABEL_74;
    }
    v44 = v6;
    v8 = *(const void **)a1;
    v7 = *(const void **)(a1 + 8);
  }
  v10 = *(_DWORD *)(a1 + 16);
  v9 = *(_DWORD *)(a1 + 20);
  LODWORD(v45) = v10;
  if (v7 == v8)
    v11 = v9;
  else
    v11 = v10;
  if (v11)
  {
    memmove(v6, v7, 8 * v11);
    v9 = *(_DWORD *)(a1 + 20);
  }
  v12 = *(_DWORD *)(a1 + 24);
  HIDWORD(v45) = v9;
  v46 = v12;
  v49 = 0uLL;
  v48 = 0;
  sub_1C4D6CDA0(&v48, *(_BYTE **)(a1 + 96), *(_BYTE **)(a1 + 104), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 104) - *(_QWORD *)(a1 + 96)) >> 3));
  v13 = v40;
  v14 = *(const void **)(a2 + 8);
  if (v14 != *(const void **)a2)
  {
    v34 = *(unsigned int *)(a2 + 16);
    v13 = malloc_type_malloc(8 * v34, 0x4065EBACuLL);
    if (v13 || !(_DWORD)v34 && (v13 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
    {
      v36 = v13;
      v15 = *(const void **)a2;
      v14 = *(const void **)(a2 + 8);
      goto LABEL_10;
    }
LABEL_74:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  v36 = v40;
  v15 = *(const void **)(a2 + 8);
LABEL_10:
  v16 = *(_DWORD *)(a2 + 20);
  v37 = *(_DWORD *)(a2 + 16);
  if (v14 == v15)
    v17 = *(_DWORD *)(a2 + 20);
  else
    v17 = *(_DWORD *)(a2 + 16);
  if (v17)
  {
    memmove(v13, v14, 8 * v17);
    v16 = *(_DWORD *)(a2 + 20);
  }
  v38 = v16;
  v39 = *(_DWORD *)(a2 + 24);
  v42 = 0uLL;
  __p = 0;
  sub_1C4D6CDA0(&__p, *(_BYTE **)(a2 + 96), *(_BYTE **)(a2 + 104), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a2 + 104) - *(_QWORD *)(a2 + 96)) >> 3));
  v58 = v62;
  if (v44 == v43)
  {
    v59 = v62;
    v18 = HIDWORD(v45);
    if (HIDWORD(v45))
      memmove(v62, v44, 8 * HIDWORD(v45));
  }
  else
  {
    v59 = v44;
    v44 = v43;
    v18 = HIDWORD(v45);
  }
  v60 = __PAIR64__(v18, v45);
  v61 = v46;
  v45 = 8;
  v46 = 0;
  v19 = (char *)v48;
  v63 = v48;
  v20 = (_BYTE *)v49;
  v64 = v49;
  v49 = 0uLL;
  v48 = 0;
  v50 = v55;
  if (v36 == v40)
  {
    v51 = v55;
    v21 = v38;
    if (v38)
    {
      v35 = v20;
      memmove(v55, v36, 8 * v38);
      v20 = v35;
    }
  }
  else
  {
    v51 = v36;
    v36 = v40;
    v21 = v38;
  }
  v52 = v37;
  v53 = v21;
  v54 = v39;
  v22 = (char *)__p;
  v56 = (char *)__p;
  v23 = v42;
  v57 = v42;
  v42 = 0uLL;
  v24 = v23;
  v25 = v20;
  __p = 0;
  while (1)
  {
    if (v25 - v19 != v24 - (_QWORD)v22)
      goto LABEL_36;
    if (v19 == v25)
      break;
    v26 = v22 + 8;
    v27 = v19 + 8;
    while (1)
    {
      v28 = v27 - 8;
      if (*((_QWORD *)v27 - 1) != *((_QWORD *)v26 - 1))
        break;
      v29 = v26[8];
      if (v27[8])
        v30 = v29 == 0;
      else
        v30 = 1;
      if (v30)
      {
        if ((v27[8] == 0) == (v29 != 0))
          break;
      }
      else if (*(_QWORD *)v27 != *(_QWORD *)v26)
      {
        break;
      }
      v26 += 24;
      v27 += 24;
      if (v28 + 24 == v25)
        goto LABEL_38;
    }
LABEL_36:
    *a3++ = *((_QWORD *)v25 - 3);
    sub_1C63DD89C((char *)&v58);
    v22 = v56;
    v24 = v57;
    v19 = (char *)v63;
    v25 = (char *)v64;
  }
  v25 = v19;
LABEL_38:
  v65 = v70;
  if (v59 == v58)
  {
    v66 = v70;
    v31 = HIDWORD(v60);
    if (HIDWORD(v60))
      memmove(v70, v59, 8 * HIDWORD(v60));
  }
  else
  {
    v66 = v59;
    v59 = v58;
    v31 = HIDWORD(v60);
  }
  v67 = v60;
  v68 = v31;
  v69 = v61;
  v60 = 8;
  v61 = 0;
  v71 = v19;
  v72 = v25;
  v32 = *((_QWORD *)&v64 + 1);
  v64 = 0uLL;
  v63 = 0;
  v73 = v32;
  v74 = a3;
  if (v22)
  {
    *(_QWORD *)&v57 = v22;
    operator delete(v22);
  }
  if (v51 != v50)
    free(v51);
  if (v63)
  {
    *(_QWORD *)&v64 = v63;
    operator delete(v63);
  }
  if (v59 != v58)
    free(v59);
  if (v71)
  {
    v72 = v71;
    operator delete(v71);
  }
  if (v66 != v65)
    free(v66);
  if (__p)
  {
    *(_QWORD *)&v42 = __p;
    operator delete(__p);
  }
  if (v36 != v40)
    free(v36);
  if (v48)
  {
    *(_QWORD *)&v49 = v48;
    operator delete(v48);
  }
  if (v44 != v43)
    free(v44);
}

uint64_t sub_1C60C3A6C(llvm::SmallPtrSetImplBase *a1, llvm::SmallPtrSetImplBase *a2, char **a3)
{
  uint64_t v5;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void *v17;
  _QWORD v18[17];
  void *v19;
  void *v20;
  void *v21;
  uint64_t v22;
  void *v23;
  void *v24;
  void *v25;
  _QWORD v26[17];

  v26[16] = *MEMORY[0x1E0C80C00];
  sub_1C61AF960((const void **)&v11, a1);
  sub_1C61AF960((const void **)&v7, a2);
  sub_1C61AF908((uint64_t)&v23, (uint64_t)&v11);
  sub_1C61AF908((uint64_t)&v19, (uint64_t)&v7);
  sub_1C60C3BE4((uint64_t)&v23, (uint64_t)&v19, a3, (uint64_t)&v15);
  if (v21 != &v22)
    free(v21);
  if (v20 != v19)
    free(v20);
  if (v25 != v26)
    free(v25);
  if (v24 != v23)
    free(v24);
  v5 = v18[16];
  if (v17 != v18)
    free(v17);
  if (v16 != v15)
    free(v16);
  if (v9 != &v10)
    free(v9);
  if (v8 != v7)
    free(v8);
  if (v13 != &v14)
    free(v13);
  if (v12 != v11)
    free(v12);
  return v5;
}

void sub_1C60C3BE4(uint64_t a1@<X0>, uint64_t a2@<X1>, char **a3@<X2>, uint64_t a4@<X8>)
{
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  void *v11;
  void *v12;
  void *v13;
  _QWORD v14[17];

  v14[16] = *MEMORY[0x1E0C80C00];
  sub_1C61AF908((uint64_t)&v11, a1);
  sub_1C61AF908((uint64_t)&v7, a2);
  sub_1C60C3CC8((llvm::SmallPtrSetImplBase *)&v11, (uint64_t)&v7, a3, a4);
  if (v9 != &v10)
    free(v9);
  if (v8 != v7)
    free(v8);
  if (v13 != v14)
    free(v13);
  if (v12 != v11)
    free(v12);
}

void sub_1C60C3CC8(llvm::SmallPtrSetImplBase *a1@<X0>, uint64_t a2@<X1>, char **a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  uint64_t v24;
  void *v25;
  void *v26;
  void *v27;
  uint64_t v28;
  void *v29;
  void *v30;
  void *v31;
  _QWORD v32[17];
  void *v33;
  void *v34;
  void *v35;
  uint64_t v36;
  void *v37;
  void *v38;
  void *v39;
  uint64_t v40;
  void *v41;
  void *v42;
  void *v43;
  uint64_t v44;
  void *v45;
  void *v46;
  void *v47;
  _QWORD v48[17];

  v48[16] = *MEMORY[0x1E0C80C00];
  sub_1C61AF960((const void **)&v37, a1);
  sub_1C61AF908((uint64_t)&v33, a2);
  sub_1C60C3F78((uint64_t)&v37, (uint64_t)&v33, (uint64_t)&v41);
  if (v35 != &v36)
    free(v35);
  if (v34 != v33)
    free(v34);
  if (v39 != &v40)
    free(v39);
  if (v38 != v37)
    free(v38);
  sub_1C61AF908((uint64_t)&v25, (uint64_t)&v41);
  sub_1C61AF908((uint64_t)&v21, (uint64_t)&v45);
  sub_1C60C4130((uint64_t)&v25, (uint64_t)&v21, a3, (uint64_t)&v29);
  if (v23 != &v24)
    free(v23);
  if (v22 != v21)
    free(v22);
  if (v27 != &v28)
    free(v27);
  if (v26 != v25)
    free(v26);
  sub_1C61AF908((uint64_t)&v13, (uint64_t)a1);
  sub_1C61AF908((uint64_t)&v9, (uint64_t)&v29);
  sub_1C60C42BC((uint64_t)&v13, (uint64_t)&v9, (uint64_t)&v17);
  v8 = v32[16];
  sub_1C61AF908(a4, (uint64_t)&v17);
  *(_QWORD *)(a4 + 240) = v8;
  if (v19 != &v20)
    free(v19);
  if (v18 != v17)
    free(v18);
  if (v11 != &v12)
    free(v11);
  if (v10 != v9)
    free(v10);
  if (v15 != &v16)
    free(v15);
  if (v14 != v13)
    free(v14);
  if (v31 != v32)
    free(v31);
  if (v30 != v29)
    free(v30);
  if (v47 != v48)
    free(v47);
  if (v46 != v45)
    free(v46);
  if (v43 != &v44)
    free(v43);
  if (v42 != v41)
    free(v42);
}

void sub_1C60C3F78(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  void *v17;
  void *v18;
  void *v19;
  uint64_t v20;
  void *v21;
  void *v22;
  void *v23;
  _QWORD v24[17];

  v24[16] = *MEMORY[0x1E0C80C00];
  sub_1C61AF908((uint64_t)&v13, a1);
  sub_1C61AF960((const void **)&v21, (llvm::SmallPtrSetImplBase *)&v13);
  sub_1C61AF908((uint64_t)&v17, (uint64_t)&v21);
  if (v23 != v24)
    free(v23);
  if (v22 != v21)
    free(v22);
  sub_1C61AF908((uint64_t)&v5, a2);
  sub_1C61AF960((const void **)&v21, (llvm::SmallPtrSetImplBase *)&v5);
  sub_1C61AF908((uint64_t)&v9, (uint64_t)&v21);
  if (v23 != v24)
    free(v23);
  if (v22 != v21)
    free(v22);
  sub_1C61AF908(a3, (uint64_t)&v17);
  sub_1C61AF908(a3 + 240, (uint64_t)&v9);
  if (v11 != &v12)
    free(v11);
  if (v10 != v9)
    free(v10);
  if (v7 != &v8)
    free(v7);
  if (v6 != v5)
    free(v6);
  if (v19 != &v20)
    free(v19);
  if (v18 != v17)
    free(v18);
  if (v15 != &v16)
    free(v15);
  if (v14 != v13)
    free(v14);
}

uint64_t sub_1C60C4130@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, char **a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  char *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t result;

  while (1)
  {
    v7 = *(unsigned int *)(a1 + 104);
    v8 = *(_QWORD *)(a1 + 96);
    if ((_DWORD)v7 != *(_DWORD *)(a2 + 104))
      goto LABEL_11;
    if (!(_DWORD)v7)
      break;
    v9 = *(_QWORD **)(a2 + 96);
    v10 = *(_QWORD **)(a1 + 96);
    while (*v10 == *v9 && v10[1] == v9[1])
    {
      v10 += 2;
      v9 += 2;
      if (v10 == (_QWORD *)(v8 + 16 * v7))
        goto LABEL_30;
    }
LABEL_11:
    v12 = v8 + 16 * v7;
    v14 = a3[1];
    v13 = (unint64_t)a3[2];
    if ((unint64_t)v14 >= v13)
    {
      v16 = *a3;
      v17 = (v14 - *a3) >> 3;
      v18 = v17 + 1;
      if ((unint64_t)(v17 + 1) >> 61)
        abort();
      v19 = v13 - (_QWORD)v16;
      if (v19 >> 2 > v18)
        v18 = v19 >> 2;
      if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
        v20 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v20 = v18;
      if (v20)
      {
        if (v20 >> 61)
          sub_1C4764EE4();
        v21 = (char *)operator new(8 * v20);
      }
      else
      {
        v21 = 0;
      }
      v22 = &v21[8 * v17];
      *(_QWORD *)v22 = *(_QWORD *)(v12 - 16);
      v15 = v22 + 8;
      if (v14 != v16)
      {
        do
        {
          v23 = *((_QWORD *)v14 - 1);
          v14 -= 8;
          *((_QWORD *)v22 - 1) = v23;
          v22 -= 8;
        }
        while (v14 != v16);
        v14 = *a3;
      }
      *a3 = v22;
      a3[1] = v15;
      a3[2] = &v21[8 * v20];
      if (v14)
      {
        operator delete(v14);
        LODWORD(v7) = *(_DWORD *)(a1 + 104);
      }
    }
    else
    {
      *(_QWORD *)v14 = *(_QWORD *)(v12 - 16);
      v15 = v14 + 8;
    }
    a3[1] = v15;
    *(_DWORD *)(a1 + 104) = v7 - 1;
    if ((_DWORD)v7 != 1)
      sub_1C60C4390((_QWORD *)a1);
  }
LABEL_30:
  result = sub_1C61AF908(a4, a1);
  *(_QWORD *)(result + 240) = a3;
  return result;
}

void sub_1C60C42BC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  _QWORD v12[17];

  v12[16] = *MEMORY[0x1E0C80C00];
  sub_1C61AF908((uint64_t)&v9, a1);
  sub_1C61AF908((uint64_t)&v5, a2);
  sub_1C60C447C((uint64_t)&v9, (uint64_t)&v5, a3);
  if (v7 != &v8)
    free(v7);
  if (v6 != v5)
    free(v6);
  if (v11 != v12)
    free(v11);
  if (v10 != v9)
    free(v10);
}

_QWORD *sub_1C60C4390(_QWORD *this)
{
  _QWORD *v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;

  v1 = this + 12;
  v2 = this[12] + 16 * *((unsigned int *)this + 26);
  v5 = *(uint64_t **)(v2 - 8);
  v3 = (_QWORD *)(v2 - 8);
  v4 = v5;
  if (v5 != (uint64_t *)(*(_QWORD *)(*(v3 - 1) + 72) + 8 * *(unsigned int *)(*(v3 - 1) + 80)))
  {
    v6 = (uint64_t)this;
    v7 = (uint64_t)(this + 14);
    do
    {
      *v3 = v4 + 1;
      v8 = *v4;
      this = sub_1C4774094((llvm::SmallPtrSetImplBase *)v6, *v4);
      v9 = *(unsigned int *)(v6 + 104);
      if (v10)
      {
        v11 = *(_QWORD *)(v8 + 72);
        if (v9 >= *(_DWORD *)(v6 + 108))
        {
          this = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v1, v7, v9 + 1, 16);
          LODWORD(v9) = *(_DWORD *)(v6 + 104);
        }
        v9 = *(_QWORD *)(v6 + 96) + 16 * v9;
        *(_QWORD *)v9 = v8;
        *(_QWORD *)(v9 + 8) = v11;
        LODWORD(v9) = *(_DWORD *)(v6 + 104) + 1;
        *(_DWORD *)(v6 + 104) = v9;
      }
      v12 = *v1 + 16 * v9;
      v13 = *(uint64_t **)(v12 - 8);
      v3 = (_QWORD *)(v12 - 8);
      v4 = v13;
    }
    while (v13 != (uint64_t *)(*(_QWORD *)(*(v3 - 1) + 72) + 8 * *(unsigned int *)(*(v3 - 1) + 80)));
  }
  return this;
}

void sub_1C60C447C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void *v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;
  void *v10;
  void *v11;
  _QWORD v12[17];

  v12[16] = *MEMORY[0x1E0C80C00];
  sub_1C61AF908((uint64_t)&v9, a1);
  sub_1C61AF908((uint64_t)&v5, a2);
  sub_1C61AF908(a3, (uint64_t)&v5);
  if (v7 != &v8)
    free(v7);
  if (v6 != v5)
    free(v6);
  if (v11 != v12)
    free(v11);
  if (v10 != v9)
    free(v10);
}

uint64_t sub_1C60C454C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;

  *(_QWORD *)a1 = a1 + 32;
  *(_QWORD *)(a1 + 8) = a1 + 32;
  *(_QWORD *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 24) = 0;
  v4 = a1 + 112;
  *(_QWORD *)(a1 + 96) = a1 + 112;
  v5 = a1 + 96;
  *(_QWORD *)(a1 + 104) = 0x800000000;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)a1, a2);
  v6 = *(_QWORD *)(a2 + 72);
  v7 = *(unsigned int *)(a1 + 104);
  if (v7 >= *(_DWORD *)(a1 + 108))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v5, v4, v7 + 1, 16);
    LODWORD(v7) = *(_DWORD *)(a1 + 104);
  }
  v8 = (uint64_t *)(*(_QWORD *)(a1 + 96) + 16 * v7);
  *v8 = a2;
  v8[1] = v6;
  ++*(_DWORD *)(a1 + 104);
  sub_1C60C4390((_QWORD *)a1);
  return a1;
}

void sub_1C60C4600(uint64_t *a1, uint64_t a2, unsigned int a3)
{
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  _QWORD *v23;
  unsigned int v24;
  uint64_t i;
  unsigned int v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32[2];
  _QWORD v33[34];

  v33[32] = *MEMORY[0x1E0C80C00];
  v6 = *a1;
  v7 = a1[1] - *a1;
  v8 = v7 >> 3;
  if ((v7 >> 3) >= 2)
  {
    v9 = 1;
    do
    {
      v32[0] = 0;
      v32[0] = *(void **)(v6 + 8 * v9);
      v10 = sub_1C63E715C(a1 + 3, v32);
      v6 = *a1;
      v10[4] = *(_QWORD *)(*a1 + 8 * *((unsigned int *)v10 + 3));
      ++v9;
    }
    while ((v7 >> 3) != v9);
  }
  v32[0] = v33;
  v32[1] = (void *)0x2000000000;
  v11 = (v8 - 1);
  if (v11 >= 2)
  {
    v26 = a3;
    v27 = a2;
    v28 = (uint64_t *)(a2 + 24);
    v12 = v7 >> 3;
    do
    {
      v29 = 0;
      v29 = *(_QWORD *)(*a1 + 8 * v11);
      v13 = sub_1C63E715C(a1 + 3, &v29);
      *((_DWORD *)v13 + 4) = *((_DWORD *)v13 + 3);
      v14 = *((unsigned int *)v13 + 12);
      if ((_DWORD)v14)
      {
        v15 = v13;
        v16 = (uint64_t *)v13[5];
        v17 = 8 * v14;
        do
        {
          v18 = *v16;
          v30 = 0;
          v31 = v18;
          if (sub_1C63E70B8(a1 + 3, &v31, &v30))
          {
            v19 = *v16;
            v30 = 0;
            v31 = v19;
            if (!sub_1C61252B8(v28, &v31, &v30)
              || v30 == *(_QWORD *)(v27 + 24) + 16 * *(unsigned int *)(v27 + 40)
              || (v20 = *(_QWORD *)(v30 + 8)) == 0
              || *(_DWORD *)(v20 + 16) >= v26)
            {
              v31 = sub_1C63E7430(a1, *v16, v12, (uint64_t)v32);
              v21 = *((_DWORD *)sub_1C63E715C(a1 + 3, &v31) + 4);
              if (v21 < *((_DWORD *)v15 + 4))
                *((_DWORD *)v15 + 4) = v21;
            }
          }
          ++v16;
          v17 -= 8;
        }
        while (v17);
      }
      LODWORD(v12) = v11--;
    }
    while ((v11 & 0xFFFFFFFE) != 0);
    if (v8 >= 3)
    {
      v22 = 2;
      do
      {
        v31 = 0;
        v31 = *(_QWORD *)(*a1 + 8 * v22);
        v23 = sub_1C63E715C(a1 + 3, &v31);
        v24 = *((_DWORD *)sub_1C63E715C(a1 + 3, (_QWORD *)(*a1 + 8 * *((unsigned int *)v23 + 4))) + 2);
        for (i = v23[4]; ; i = sub_1C63E715C(a1 + 3, &v30)[4])
        {
          v30 = i;
          if (*((_DWORD *)sub_1C63E715C(a1 + 3, &v30) + 2) <= v24)
            break;
        }
        v23[4] = v30;
        ++v22;
      }
      while (v22 != (v7 >> 3));
    }
  }
  if (v32[0] != v33)
    free(v32[0]);
}

uint64_t sub_1C60C48A8(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v5 = *a3;
  v6 = a1 + 24;
  result = (uint64_t)sub_1C63E715C((uint64_t *)(a1 + 24), (_QWORD *)(*(_QWORD *)a1 + 8));
  *(_QWORD *)(result + 32) = v5;
  v8 = *(_QWORD *)(a1 + 8) - *(_QWORD *)a1;
  if (v8 != 8)
  {
    v9 = v8 >> 3;
    v10 = 1;
    do
    {
      v14 = 0;
      v14 = *(_QWORD *)(*(_QWORD *)a1 + 8 * v10);
      result = (uint64_t)sub_1C63E7568((uint64_t *)(a2 + 24), &v14);
      if (!*(_QWORD *)(result + 8))
      {
        v11 = sub_1C60C61D4(v6, v14);
        if (*(_QWORD *)(a1 + 24) + 72 * *(unsigned int *)(a1 + 40) == v11)
          v12 = 0;
        else
          v12 = *(_QWORD *)(v11 + 32);
        v13 = sub_1C60C6118(a1, v12, a2);
        result = sub_1C63E7674(a2, v14, v13);
      }
      ++v10;
    }
    while (v9 != v10);
  }
  return result;
}

uint64_t sub_1C60C49A4(uint64_t a1, void *a2, uint64_t a3, unsigned int (*a4)(uint64_t, uint64_t), int a5, _DWORD *a6)
{
  uint64_t *v11;
  unsigned int v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  unsigned int (*v19)(uint64_t, uint64_t);
  uint64_t *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  _DWORD *v32;
  uint64_t v33;
  unint64_t v34;
  _DWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  _DWORD *v40;
  _DWORD *v42;
  unsigned int (*v43)(uint64_t, uint64_t);
  uint64_t v44;
  uint64_t v45;
  void *v46;
  uint64_t v47;
  _DWORD *v48;
  void *v49;
  unsigned int v50;
  uint64_t v51;
  void *v52;
  uint64_t v53;
  _QWORD v54[66];

  v54[64] = *MEMORY[0x1E0C80C00];
  v46 = a2;
  v52 = v54;
  v54[0] = a2;
  v53 = 0x4000000001;
  v11 = (uint64_t *)(a1 + 24);
  v48 = 0;
  v49 = a2;
  if (sub_1C63E70B8((uint64_t *)(a1 + 24), &v49, &v48))
    *((_DWORD *)sub_1C63E715C(v11, &v46) + 3) = a5;
  v12 = v53;
  if ((_DWORD)v53)
  {
    v43 = a4;
    do
    {
      v45 = 0;
      v13 = *((_QWORD *)v52 + v12 - 1);
      LODWORD(v53) = v12 - 1;
      v45 = v13;
      v14 = sub_1C63E715C(v11, &v45);
      if (!*((_DWORD *)v14 + 2))
      {
        a3 = (a3 + 1);
        *((_DWORD *)v14 + 4) = a3;
        *((_DWORD *)v14 + 2) = a3;
        v15 = v45;
        v14[3] = v45;
        v17 = *(uint64_t **)(a1 + 8);
        v16 = *(_QWORD *)(a1 + 16);
        if ((unint64_t)v17 >= v16)
        {
          v20 = *(uint64_t **)a1;
          v21 = ((uint64_t)v17 - *(_QWORD *)a1) >> 3;
          v22 = v21 + 1;
          if ((unint64_t)(v21 + 1) >> 61)
            abort();
          v23 = v16 - (_QWORD)v20;
          if (v23 >> 2 > v22)
            v22 = v23 >> 2;
          if ((unint64_t)v23 >= 0x7FFFFFFFFFFFFFF8)
            v24 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v24 = v22;
          if (v24)
          {
            if (v24 >> 61)
              sub_1C4764EE4();
            v25 = (char *)operator new(8 * v24);
          }
          else
          {
            v25 = 0;
          }
          v26 = (uint64_t *)&v25[8 * v21];
          *v26 = v15;
          v18 = v26 + 1;
          if (v17 == v20)
          {
            v19 = v43;
          }
          else
          {
            v19 = v43;
            do
            {
              v27 = *--v17;
              *--v26 = v27;
            }
            while (v17 != v20);
            v17 = *(uint64_t **)a1;
          }
          *(_QWORD *)a1 = v26;
          *(_QWORD *)(a1 + 8) = v18;
          *(_QWORD *)(a1 + 16) = &v25[8 * v24];
          if (v17)
            operator delete(v17);
        }
        else
        {
          *v17 = v15;
          v18 = v17 + 1;
          v19 = v43;
        }
        *(_QWORD *)(a1 + 8) = v18;
        v28 = *(_QWORD *)(a1 + 48);
        if (v28)
          sub_1C60C4E40(*(_QWORD *)(v28 + 8), v45, (unsigned int *)&v49);
        else
          sub_1C60C5024(v45, (unsigned int *)&v49);
        v29 = v50;
        if (a6 && v50 >= 2uLL)
        {
          v48 = a6;
          sub_1C60C50F0((uint64_t)v49, (uint64_t *)v49 + v50, (uint64_t *)&v48, 126 - 2 * __clz(v50), 1);
          v29 = v50;
        }
        v30 = (uint64_t *)v49;
        if (v29)
        {
          v31 = 8 * v29;
          while (1)
          {
            v44 = 0;
            v44 = *v30;
            v47 = v44;
            v48 = 0;
            if (!sub_1C63E70B8(v11, &v47, &v48))
              break;
            v32 = v48;
            if (v48 == (_DWORD *)(*(_QWORD *)(a1 + 24) + 72 * *(unsigned int *)(a1 + 40)) || !v48[2])
              break;
            v33 = v45;
            if (v44 != v45)
            {
              v35 = v48 + 12;
              v34 = v48[12];
              v36 = v48 + 10;
              if (v34 < v48[13])
              {
LABEL_38:
                *(_QWORD *)(*v36 + 8 * v34) = v33;
                ++*v35;
                goto LABEL_40;
              }
LABEL_45:
              v42 = v32;
              v39 = v36;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v36, (uint64_t)(v32 + 14), v34 + 1, 8);
              v36 = v39;
              v19 = v43;
              v34 = v42[12];
              goto LABEL_38;
            }
LABEL_40:
            ++v30;
            v31 -= 8;
            if (!v31)
            {
              v30 = (uint64_t *)v49;
              goto LABEL_46;
            }
          }
          if (!v19(v45, v44))
            goto LABEL_40;
          v32 = sub_1C63E715C(v11, &v44);
          v37 = v44;
          v38 = v53;
          if (v53 >= (unint64_t)HIDWORD(v53))
          {
            v40 = v32;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v52, (uint64_t)v54, v53 + 1, 8);
            v32 = v40;
            v38 = v53;
          }
          *((_QWORD *)v52 + v38) = v37;
          v35 = v32 + 12;
          v34 = v32[12];
          LODWORD(v53) = v53 + 1;
          v32[3] = a3;
          v36 = v32 + 10;
          v33 = v45;
          v19 = v43;
          if (v34 < v32[13])
            goto LABEL_38;
          goto LABEL_45;
        }
LABEL_46:
        if (v30 != &v51)
          free(v30);
      }
      v12 = v53;
    }
    while ((_DWORD)v53);
  }
  if (v52 != v54)
    free(v52);
  return a3;
}

_QWORD *sub_1C60C4D7C(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(72 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C63E728C(a1, v4, v4 + 72 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 72 * v10;
    do
    {
      *result = -4096;
      result += 9;
      v11 -= 72;
    }
    while (v11);
  }
  return result;
}

_BYTE *sub_1C60C4E40@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  _BYTE *result;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;

  v6 = *(_QWORD *)(a2 + 72);
  v7 = v6 + 8 * *(unsigned int *)(a2 + 80);
  *(_QWORD *)a3 = a3 + 4;
  *((_QWORD *)a3 + 1) = 0x800000000;
  sub_1C61898C0(a3, v7, v7, v6, v6);
  v8 = *(char **)a3;
  v9 = a3[2];
  v10 = *(char **)a3;
  if ((_DWORD)v9)
  {
    v11 = 8 * v9;
    v10 = *(char **)a3;
    while (*(_QWORD *)v10)
    {
      v10 += 8;
      v11 -= 8;
      if (!v11)
      {
        v10 = (char *)(*(_QWORD *)a3 + 8 * v9);
        break;
      }
    }
  }
  v12 = (v10 - v8) >> 3;
  v13 = v10 + 8;
  if (v12 != v9 && v13 != (_QWORD *)(*(_QWORD *)a3 + 8 * v9))
  {
    v15 = 8 * v9 - 8 * v12 - 8;
    do
    {
      if (*v13)
      {
        *(_QWORD *)v10 = *v13;
        v10 += 8;
      }
      ++v13;
      v15 -= 8;
    }
    while (v15);
    v8 = *(char **)a3;
  }
  a3[2] = (unint64_t)(v10 - v8) >> 3;
  result = (_BYTE *)sub_1C61E0EDC(a1, a2);
  v17 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v18 = 4;
  }
  else
  {
    v17 = *(_QWORD *)(a1 + 8);
    v18 = *(_DWORD *)(a1 + 16);
  }
  if ((_BYTE *)(v17 + 72 * v18) != result)
  {
    v19 = *((unsigned int *)result + 4);
    v20 = a3[2];
    v21 = *(char **)a3;
    if ((_DWORD)v19)
    {
      v22 = (uint64_t *)*((_QWORD *)result + 1);
      v23 = &v22[v19];
      do
      {
        v24 = *v22;
        v25 = 8 * v20;
        v26 = v21;
        v27 = &v21[8 * v20];
        if (v20)
        {
          v28 = 8 * v20;
          v26 = v21;
          while (*(_QWORD *)v26 != v24)
          {
            v26 += 8;
            v28 -= 8;
            if (!v28)
            {
              v26 = &v21[8 * v20];
              break;
            }
          }
        }
        v29 = (v26 - v21) >> 3;
        if (v29 != v20)
        {
          v30 = v26 + 8;
          if (v26 + 8 != v27)
          {
            v31 = v25 - 8 * v29 - 8;
            do
            {
              if (*v30 != v24)
              {
                *(_QWORD *)v26 = *v30;
                v26 += 8;
              }
              ++v30;
              v31 -= 8;
            }
            while (v31);
            v21 = *(char **)a3;
          }
        }
        v20 = ((unint64_t)(v26 - v21) >> 3);
        ++v22;
      }
      while (v22 != v23);
      a3[2] = v20;
    }
    return sub_1C61BB99C(a3, (uint64_t)&v21[8 * v20], *((uint64_t **)result + 5), (uint64_t *)(*((_QWORD *)result + 5) + 8 * *((unsigned int *)result + 12)));
  }
  return result;
}

unsigned int *sub_1C60C5024@<X0>(uint64_t a1@<X0>, unsigned int *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int *result;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v13;

  v3 = *(_QWORD *)(a1 + 72);
  v4 = v3 + 8 * *(unsigned int *)(a1 + 80);
  *(_QWORD *)a2 = a2 + 4;
  *((_QWORD *)a2 + 1) = 0x800000000;
  result = sub_1C61898C0(a2, v4, v4, v3, v3);
  v6 = *(char **)a2;
  v7 = a2[2];
  v8 = *(char **)a2;
  if ((_DWORD)v7)
  {
    v9 = 8 * v7;
    v8 = *(char **)a2;
    while (*(_QWORD *)v8)
    {
      v8 += 8;
      v9 -= 8;
      if (!v9)
      {
        v8 = (char *)(*(_QWORD *)a2 + 8 * v7);
        break;
      }
    }
  }
  v10 = (v8 - v6) >> 3;
  v11 = v8 + 8;
  if (v10 != v7 && v11 != (_QWORD *)(*(_QWORD *)a2 + 8 * v7))
  {
    v13 = 8 * v7 - 8 * v10 - 8;
    do
    {
      if (*v11)
      {
        *(_QWORD *)v8 = *v11;
        v8 += 8;
      }
      ++v11;
      v13 -= 8;
    }
    while (v13);
    v6 = *(char **)a2;
  }
  a2[2] = (unint64_t)(v8 - v6) >> 3;
  return result;
}

uint64_t sub_1C60C50F0(uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t a4, char a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  char v18;
  BOOL v19;
  uint64_t v20;

  v8 = (uint64_t *)result;
LABEL_2:
  v9 = v8;
LABEL_3:
  v10 = 1 - a4;
  while (2)
  {
    v8 = v9;
    v11 = v10;
    v12 = (char *)a2 - (char *)v9;
    v13 = a2 - v9;
    switch(v13)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        result = sub_1C63E7390(a3, *(a2 - 1), *v9);
        if ((_DWORD)result)
        {
          v20 = *v9;
          *v9 = *(a2 - 1);
          *(a2 - 1) = v20;
        }
        return result;
      case 3uLL:
        return sub_1C60C5588(v9, v9 + 1, a2 - 1, a3);
      case 4uLL:
        return sub_1C60C5A40(v9, v9 + 1, v9 + 2, a2 - 1, a3);
      case 5uLL:
        return sub_1C60C5AF4(v9, v9 + 1, v9 + 2, v9 + 3, a2 - 1, a3);
      default:
        if (v12 <= 191)
        {
          if ((a5 & 1) != 0)
            return (uint64_t)sub_1C60C5434(v9, a2, a3);
          else
            return (uint64_t)sub_1C60C54F4(v9, a2, a3);
        }
        if (v11 != 1)
        {
          v14 = v13 >> 1;
          v15 = &v9[v13 >> 1];
          if ((unint64_t)v12 < 0x401)
          {
            sub_1C60C5588(&v9[v13 >> 1], v9, a2 - 1, a3);
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          else
          {
            sub_1C60C5588(v9, &v9[v13 >> 1], a2 - 1, a3);
            sub_1C60C5588(v9 + 1, v15 - 1, a2 - 2, a3);
            sub_1C60C5588(v9 + 2, &v9[v14 + 1], a2 - 3, a3);
            sub_1C60C5588(v15 - 1, v15, &v9[v14 + 1], a3);
            v16 = *v9;
            *v9 = *v15;
            *v15 = v16;
            if ((a5 & 1) != 0)
              goto LABEL_11;
          }
          if (!sub_1C63E7390(a3, *(v9 - 1), *v9))
          {
            result = (uint64_t)sub_1C60C5674(v9, a2, a3);
            v9 = (uint64_t *)result;
            goto LABEL_18;
          }
LABEL_11:
          v17 = sub_1C60C5780(v9, a2, a3);
          if ((v18 & 1) == 0)
            goto LABEL_17;
          v19 = sub_1C60C5898(v9, v17, a3);
          v9 = v17 + 1;
          result = sub_1C60C5898(v17 + 1, a2, a3);
          if (!(_DWORD)result)
          {
            v10 = v11 + 1;
            if (v19)
              continue;
LABEL_17:
            result = sub_1C60C50F0(v8, v17, a3, -v11, a5 & 1);
            v9 = v17 + 1;
LABEL_18:
            a5 = 0;
            a4 = -v11;
            goto LABEL_3;
          }
          a4 = -v11;
          a2 = v17;
          if (v19)
            return result;
          goto LABEL_2;
        }
        if (v9 != a2)
          return (uint64_t)sub_1C60C5BD0(v9, a2, a2, a3);
        return result;
    }
  }
}

uint64_t *sub_1C60C5434(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;

  if (result != a2)
  {
    v4 = result;
    v5 = result + 1;
    if (result + 1 != a2)
    {
      v7 = 0;
      v8 = result;
      do
      {
        v10 = *v8;
        v9 = v8[1];
        v8 = v5;
        result = (uint64_t *)sub_1C63E7390(a3, v9, v10);
        if ((_DWORD)result)
        {
          v11 = *v8;
          v12 = v7;
          while (1)
          {
            *(uint64_t *)((char *)v4 + v12 + 8) = *(uint64_t *)((char *)v4 + v12);
            if (!v12)
              break;
            result = (uint64_t *)sub_1C63E7390(a3, v11, *(uint64_t *)((char *)v4 + v12 - 8));
            v12 -= 8;
            if ((result & 1) == 0)
            {
              v13 = (uint64_t *)((char *)v4 + v12 + 8);
              goto LABEL_10;
            }
          }
          v13 = v4;
LABEL_10:
          *v13 = v11;
        }
        v5 = v8 + 1;
        v7 += 8;
      }
      while (v8 + 1 != a2);
    }
  }
  return result;
}

uint64_t *sub_1C60C54F4(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t *i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;

  if (result != a2)
  {
    v4 = result;
    for (i = result + 1; v4 + 1 != a2; i = v4 + 1)
    {
      v8 = *v4;
      v7 = v4[1];
      v4 = i;
      result = (uint64_t *)sub_1C63E7390(a3, v7, v8);
      if ((_DWORD)result)
      {
        v9 = *v4;
        v10 = v4;
        do
        {
          v11 = v10;
          v12 = *--v10;
          *v11 = v12;
          result = (uint64_t *)sub_1C63E7390(a3, v9, *(v11 - 2));
        }
        while ((result & 1) != 0);
        *v10 = v9;
      }
    }
  }
  return result;
}

uint64_t sub_1C60C5588(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  BOOL v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  v8 = sub_1C63E7390(a4, *a2, *a1);
  result = sub_1C63E7390(a4, *a3, *a2);
  if (v8)
  {
    v10 = *a1;
    if ((_DWORD)result)
    {
      *a1 = *a3;
      *a3 = v10;
      return 1;
    }
    *a1 = *a2;
    *a2 = v10;
    if (!sub_1C63E7390(a4, *a3, v10))
      return 1;
    v11 = *a2;
    *a2 = *a3;
    *a3 = v11;
    return 2;
  }
  if ((_DWORD)result)
  {
    v12 = *a2;
    *a2 = *a3;
    *a3 = v12;
    if (!sub_1C63E7390(a4, *a2, *a1))
      return 1;
    v13 = *a1;
    *a1 = *a2;
    *a2 = v13;
    return 2;
  }
  return result;
}

uint64_t *sub_1C60C5674(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v14;

  v4 = a2;
  v6 = *a1;
  if (sub_1C63E7390(a3, *a1, *(a2 - 1)))
  {
    v7 = a1;
    do
    {
      v8 = v7[1];
      ++v7;
    }
    while (!sub_1C63E7390(a3, v6, v8));
  }
  else
  {
    v14 = a1 + 1;
    do
    {
      v7 = v14;
      if (v14 >= v4)
        break;
      ++v14;
    }
    while (!sub_1C63E7390(a3, v6, *v7));
  }
  if (v7 < v4)
  {
    do
      v9 = *--v4;
    while (sub_1C63E7390(a3, v6, v9));
  }
  while (v7 < v4)
  {
    v10 = *v7;
    *v7 = *v4;
    *v4 = v10;
    do
    {
      v11 = v7[1];
      ++v7;
    }
    while (!sub_1C63E7390(a3, v6, v11));
    do
      v12 = *--v4;
    while (sub_1C63E7390(a3, v6, v12));
  }
  if (v7 - 1 != a1)
    *a1 = *(v7 - 1);
  *(v7 - 1) = v6;
  return v7;
}

uint64_t *sub_1C60C5780(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v6 = 0;
  v7 = *a1;
  while (sub_1C63E7390(a3, a1[++v6], v7))
    ;
  v9 = &a1[v6];
  v10 = &a1[v6 - 1];
  if (v6 == 1)
  {
    do
    {
      if (v9 >= a2)
        break;
      v12 = *--a2;
    }
    while (!sub_1C63E7390(a3, v12, v7));
  }
  else
  {
    do
      v11 = *--a2;
    while (!sub_1C63E7390(a3, v11, v7));
  }
  if (v9 < a2)
  {
    v13 = &a1[v6];
    v14 = a2;
    do
    {
      v15 = *v13;
      *v13 = *v14;
      *v14 = v15;
      do
      {
        v16 = v13[1];
        ++v13;
      }
      while (sub_1C63E7390(a3, v16, v7));
      do
        v17 = *--v14;
      while (!sub_1C63E7390(a3, v17, v7));
    }
    while (v13 < v14);
    v10 = v13 - 1;
  }
  if (v10 != a1)
    *a1 = *v10;
  *v10 = v7;
  return v10;
}

BOOL sub_1C60C5898(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t *v15;
  uint64_t v16;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (sub_1C63E7390(a3, *(a2 - 1), *a1))
      {
        v16 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v16;
      }
      return 1;
    case 3:
      sub_1C60C5588(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_1C60C5A40(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_1C60C5AF4(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v8 = a1 + 2;
      sub_1C60C5588(a1, a1 + 1, a1 + 2, a3);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 0;
      break;
  }
  while (1)
  {
    if (sub_1C63E7390(a3, *v9, *v8))
    {
      v12 = *v9;
      v13 = v10;
      while (1)
      {
        v14 = (char *)a1 + v13;
        *(uint64_t *)((char *)a1 + v13 + 24) = *(uint64_t *)((char *)a1 + v13 + 16);
        if (v13 == -16)
          break;
        v13 -= 8;
        if (!sub_1C63E7390(a3, v12, *((_QWORD *)v14 + 1)))
        {
          v15 = (uint64_t *)((char *)a1 + v13 + 24);
          goto LABEL_11;
        }
      }
      v15 = a1;
LABEL_11:
      *v15 = v12;
      if (++v11 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v10 += 8;
    result = 1;
    if (++v9 == a2)
      return result;
  }
}

BOOL sub_1C60C5A40(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  _BOOL8 result;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  sub_1C60C5588(a1, a2, a3, a5);
  result = sub_1C63E7390(a5, *a4, *a3);
  if (result)
  {
    v11 = *a3;
    *a3 = *a4;
    *a4 = v11;
    result = sub_1C63E7390(a5, *a3, *a2);
    if (result)
    {
      v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      result = sub_1C63E7390(a5, *a2, *a1);
      if (result)
      {
        v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
      }
    }
  }
  return result;
}

BOOL sub_1C60C5AF4(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  _BOOL8 result;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  sub_1C60C5A40(a1, a2, a3, a4, a6);
  result = sub_1C63E7390(a6, *a5, *a4);
  if (result)
  {
    v13 = *a4;
    *a4 = *a5;
    *a5 = v13;
    result = sub_1C63E7390(a6, *a4, *a3);
    if (result)
    {
      v14 = *a3;
      *a3 = *a4;
      *a4 = v14;
      result = sub_1C63E7390(a6, *a3, *a2);
      if (result)
      {
        v15 = *a2;
        *a2 = *a3;
        *a3 = v15;
        result = sub_1C63E7390(a6, *a2, *a1);
        if (result)
        {
          v16 = *a1;
          *a1 = *a2;
          *a2 = v16;
        }
      }
    }
  }
  return result;
}

uint64_t *sub_1C60C5BD0(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t *v18;

  if (a1 != a2)
  {
    v8 = (char *)a2 - (char *)a1;
    v9 = a2 - a1;
    if ((char *)a2 - (char *)a1 >= 9)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = &a1[v10];
      do
      {
        sub_1C60C5D20((_BOOL8)a1, a4, v9, v12--);
        --v11;
      }
      while (v11);
    }
    v13 = a2;
    if (a2 != a3)
    {
      v14 = a2;
      do
      {
        if (sub_1C63E7390(a4, *v14, *a1))
        {
          v15 = *v14;
          *v14 = *a1;
          *a1 = v15;
          sub_1C60C5D20((_BOOL8)a1, a4, v9, a1);
        }
        ++v14;
      }
      while (v14 != a3);
      v13 = a3;
    }
    if (v8 >= 9)
    {
      v16 = a2 - 1;
      do
      {
        v17 = *a1;
        v18 = sub_1C60C5E44(a1, a4, v9);
        if (v16 == v18)
        {
          *v18 = v17;
        }
        else
        {
          *v18 = *v16;
          *v16 = v17;
          sub_1C60C5EF8((_BOOL8)a1, (uint64_t)(v18 + 1), a4, v18 + 1 - a1);
        }
        --v16;
      }
      while (v9-- > 2);
    }
    return v13;
  }
  return a3;
}

BOOL sub_1C60C5D20(_BOOL8 result, uint64_t *a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v4;
  uint64_t *v5;
  _BOOL8 v6;
  int64_t v7;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;

  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v6 = result;
    v7 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= ((uint64_t)a4 - result) >> 3)
    {
      v10 = ((uint64_t)a4 - result) >> 2;
      v11 = v10 + 1;
      v12 = (uint64_t *)(result + 8 * (v10 + 1));
      v13 = v10 + 2;
      if (v10 + 2 < a3 && sub_1C63E7390(a2, *v12, v12[1]))
      {
        ++v12;
        v11 = v13;
      }
      result = sub_1C63E7390(a2, *v12, *v5);
      if (!result)
      {
        v14 = *v5;
        do
        {
          v15 = v12;
          *v5 = *v12;
          if (v7 < v11)
            break;
          v16 = (2 * v11) | 1;
          v12 = (uint64_t *)(v6 + 8 * v16);
          if (2 * v11 + 2 < a3 && sub_1C63E7390(a2, *v12, v12[1]))
          {
            ++v12;
            v16 = 2 * v11 + 2;
          }
          result = sub_1C63E7390(a2, *v12, v14);
          v5 = v15;
          v11 = v16;
        }
        while (!result);
        *v15 = v14;
      }
    }
  }
  return result;
}

uint64_t *sub_1C60C5E44(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;

  v6 = 0;
  v7 = a3 - 2;
  if (a3 < 2)
    v7 = a3 - 1;
  v8 = v7 >> 1;
  do
  {
    v9 = &a1[v6 + 1];
    v10 = (2 * v6) | 1;
    v11 = 2 * v6 + 2;
    if (v11 < a3 && sub_1C63E7390(a2, *v9, a1[v6 + 2]))
    {
      ++v9;
      v10 = v11;
    }
    *a1 = *v9;
    a1 = v9;
    v6 = v10;
  }
  while (v10 <= v8);
  return v9;
}

BOOL sub_1C60C5EF8(_BOOL8 result, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  unint64_t v4;
  _BOOL8 v6;
  unint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t *v11;

  v4 = a4 - 2;
  if (a4 >= 2)
  {
    v6 = result;
    v7 = v4 >> 1;
    v8 = (uint64_t *)(result + 8 * (v4 >> 1));
    v9 = (uint64_t *)(a2 - 8);
    result = sub_1C63E7390(a3, *v8, *(_QWORD *)(a2 - 8));
    if (result)
    {
      v10 = *v9;
      do
      {
        v11 = v8;
        *v9 = *v8;
        if (!v7)
          break;
        v7 = (v7 - 1) >> 1;
        v8 = (uint64_t *)(v6 + 8 * v7);
        result = sub_1C63E7390(a3, *v8, v10);
        v9 = v11;
      }
      while (result);
      *v11 = v10;
    }
  }
  return result;
}

_QWORD *sub_1C60C5F98(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C60C6050((uint64_t *)a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t *sub_1C60C6050(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;

  v4 = result;
  result[1] = 0;
  v5 = *((unsigned int *)result + 4);
  if ((_DWORD)v5)
  {
    v6 = (_QWORD *)*result;
    v7 = 16 * v5;
    do
    {
      *v6 = -4096;
      v6 += 2;
      v7 -= 16;
    }
    while (v7);
  }
  if (a2 != a3)
  {
    v8 = a2 + 1;
    do
    {
      if ((*(v8 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v12 = 0;
        sub_1C61252B8(v4, v8 - 1, &v12);
        v10 = v12;
        *v12 = *(v8 - 1);
        v11 = *v8;
        *v8 = 0;
        v10[1] = v11;
        ++*((_DWORD *)v4 + 2);
        result = sub_1C48680A4(v8);
      }
      v9 = v8 + 1;
      v8 += 2;
    }
    while (v9 != a3);
  }
  return result;
}

uint64_t sub_1C60C6118(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v10 = 0;
  v11 = a2;
  if (!sub_1C61252B8((uint64_t *)(a3 + 24), &v11, &v10)
    || v10 == *(_QWORD *)(a3 + 24) + 16 * *(unsigned int *)(a3 + 40)
    || (result = *(_QWORD *)(v10 + 8)) == 0)
  {
    v7 = sub_1C60C61D4(a1 + 24, a2);
    if (*(_QWORD *)(a1 + 24) + 72 * *(unsigned int *)(a1 + 40) == v7)
      v8 = 0;
    else
      v8 = *(_QWORD *)(v7 + 32);
    v9 = sub_1C60C6118(a1, v8, a3);
    return sub_1C63E7674(a3, a2, v9);
  }
  return result;
}

uint64_t sub_1C60C61D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;

  v4 = 0;
  v5 = a2;
  if (sub_1C63E70B8((uint64_t *)a1, &v5, &v4))
    return v4;
  else
    return *(_QWORD *)a1 + 72 * *(unsigned int *)(a1 + 16);
}

uint64_t *sub_1C60C6238(uint64_t a1, uint64_t *a2)
{
  char v4;
  uint64_t *result;
  int v6;
  unsigned int v7;
  uint64_t *v8;

  v8 = 0;
  v4 = sub_1C49F21C0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  result = v8;
  if ((v4 & 1) != 0)
    return result;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_9;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_9:
    sub_1C5FBF684(a1, v7);
    v8 = 0;
    sub_1C49F21C0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
    result = v8;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*result != -4096)
    --*(_DWORD *)(a1 + 12);
  *result = *a2;
  result[1] = 0;
  return result;
}

void sub_1C60C6310(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  llvm::SmallPtrSetImplBase *v4;
  char **v5;
  char **v6;
  llvm::SmallPtrSetImplBase *v7;
  llvm::SmallPtrSetImplBase *v8;
  unsigned int v9;
  _QWORD *v10;
  _QWORD *v11;
  char *v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  char **v25;
  void *v26;
  void *v27;
  void *v28;
  uint64_t v29;
  void *v30;
  void *v31;
  void *v32;
  uint64_t v33;
  void *v34;
  void *v35;
  void *v36;
  _QWORD v37[25];
  void *v38;
  void *v39;
  void *v40;
  uint64_t v41;
  void *v42;
  void *v43;
  void *v44;
  uint64_t v45;
  void *v46;
  void *v47;
  void *v48;
  uint64_t v49;
  void *v50;
  void *v51;
  void *v52;
  uint64_t v53;
  void *v54;
  void *v55;
  void *v56;
  uint64_t v57;
  void *v58;
  void *v59;
  void *v60;
  uint64_t v61;
  void *v62;
  void *v63;
  void *v64;
  uint64_t v65;
  void *v66;
  void *v67;
  void *v68;
  int v69;
  uint64_t v70;
  void *v71;
  void *v72;
  void *v73;
  unsigned int v74;
  uint64_t v75;
  void *v76;
  void *v77;
  void *v78;
  _BYTE v79[192];
  char **v80;
  void *v81;
  void *v82;
  void *v83;
  uint64_t v84;
  void *v85;
  void *v86;
  void *v87;
  uint64_t v88;
  void *v89;
  void *v90;
  void *v91;
  _BYTE v92[192];
  void *v93;
  void *v94;
  void *v95;
  uint64_t v96;
  void *v97;
  void *v98;
  void *v99;
  uint64_t v100;
  void *v101;
  void *v102;
  void *v103;
  _BYTE v104[192];
  void *v105;
  void *v106;
  void *v107;
  _QWORD v108[26];

  v4 = (llvm::SmallPtrSetImplBase *)MEMORY[0x1E0C80A78](a1, a2, a3, a4);
  v6 = v5;
  v8 = v7;
  v108[24] = *MEMORY[0x1E0C80C00];
  sub_1C63E7A44((const void **)&v30, v4);
  sub_1C63E7A44((const void **)&v26, v8);
  sub_1C63E79EC((uint64_t)&v42, (uint64_t)&v30);
  sub_1C63E79EC((uint64_t)&v38, (uint64_t)&v26);
  sub_1C63E79EC((uint64_t)&v50, (uint64_t)&v42);
  sub_1C63E79EC((uint64_t)&v46, (uint64_t)&v38);
  sub_1C63E7A44((const void **)&v85, (llvm::SmallPtrSetImplBase *)&v50);
  sub_1C63E79EC((uint64_t)&v81, (uint64_t)&v46);
  sub_1C63E79EC((uint64_t)&v34, (uint64_t)&v85);
  sub_1C63E7A44((const void **)&v89, (llvm::SmallPtrSetImplBase *)&v34);
  sub_1C63E79EC((uint64_t)&v76, (uint64_t)&v89);
  if (v91 != v92)
    free(v91);
  if (v90 != v89)
    free(v90);
  sub_1C63E79EC((uint64_t)&v101, (uint64_t)&v81);
  sub_1C63E7A44((const void **)&v89, (llvm::SmallPtrSetImplBase *)&v101);
  sub_1C63E79EC((uint64_t)&v105, (uint64_t)&v89);
  if (v91 != v92)
    free(v91);
  if (v90 != v89)
    free(v90);
  sub_1C63E79EC((uint64_t)&v89, (uint64_t)&v76);
  sub_1C63E79EC((uint64_t)&v93, (uint64_t)&v105);
  if (v107 != v108)
    free(v107);
  if (v106 != v105)
    free(v106);
  if (v103 != v104)
    free(v103);
  if (v102 != v101)
    free(v102);
  if (v78 != v79)
    free(v78);
  if (v77 != v76)
    free(v77);
  if (v36 != v37)
    free(v36);
  if (v35 != v34)
    free(v35);
  if (v83 != &v84)
    free(v83);
  if (v82 != v81)
    free(v82);
  if (v87 != &v88)
    free(v87);
  if (v86 != v85)
    free(v86);
  sub_1C63E79EC((uint64_t)&v71, (uint64_t)&v89);
  sub_1C63E79EC((uint64_t)&v66, (uint64_t)&v93);
  while (1)
  {
    v9 = v74;
    if (v74 != v69)
      goto LABEL_45;
    if (!v74)
      break;
    v10 = v68;
    v11 = v73;
    while (*v11 == *v10)
    {
      if (v11[1] != v10[1] || v11[2] != v10[2])
        break;
      v11 += 3;
      v10 += 3;
      if (v11 == (_QWORD *)((char *)v73 + 24 * v74))
        goto LABEL_64;
    }
LABEL_45:
    v13 = (char *)v73 + 24 * v74;
    v15 = v6[1];
    v14 = (unint64_t)v6[2];
    if ((unint64_t)v15 >= v14)
    {
      v17 = *v6;
      v18 = (v15 - *v6) >> 3;
      v19 = v18 + 1;
      if ((unint64_t)(v18 + 1) >> 61)
        abort();
      v20 = v14 - (_QWORD)v17;
      if (v20 >> 2 > v19)
        v19 = v20 >> 2;
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
        v21 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v21 = v19;
      if (v21)
      {
        if (v21 >> 61)
          sub_1C4764EE4();
        v22 = (char *)operator new(8 * v21);
      }
      else
      {
        v22 = 0;
      }
      v23 = &v22[8 * v18];
      *(_QWORD *)v23 = *((_QWORD *)v13 - 3);
      v16 = v23 + 8;
      if (v15 != v17)
      {
        do
        {
          v24 = *((_QWORD *)v15 - 1);
          v15 -= 8;
          *((_QWORD *)v23 - 1) = v24;
          v23 -= 8;
        }
        while (v15 != v17);
        v15 = *v6;
      }
      *v6 = v23;
      v6[1] = v16;
      v6[2] = &v22[8 * v21];
      if (v15)
      {
        operator delete(v15);
        v9 = v74;
      }
    }
    else
    {
      *(_QWORD *)v15 = *((_QWORD *)v13 - 3);
      v16 = v15 + 8;
    }
    v6[1] = v16;
    v74 = v9 - 1;
    if (v9 != 1)
      sub_1C60C6B44((uint64_t)&v71);
  }
LABEL_64:
  sub_1C63E79EC((uint64_t)&v76, (uint64_t)&v71);
  v80 = v6;
  if (v68 != &v70)
    free(v68);
  if (v67 != v66)
    free(v67);
  if (v73 != &v75)
    free(v73);
  if (v72 != v71)
    free(v72);
  sub_1C63E79EC((uint64_t)&v58, (uint64_t)&v50);
  sub_1C63E79EC((uint64_t)&v54, (uint64_t)&v76);
  sub_1C63E79EC((uint64_t)&v101, (uint64_t)&v58);
  sub_1C63E79EC((uint64_t)&v97, (uint64_t)&v54);
  sub_1C63E79EC((uint64_t)&v34, (uint64_t)&v101);
  sub_1C63E79EC((uint64_t)&v105, (uint64_t)&v97);
  sub_1C63E79EC((uint64_t)&v62, (uint64_t)&v105);
  if (v107 != v108)
    free(v107);
  if (v106 != v105)
    free(v106);
  if (v36 != v37)
    free(v36);
  if (v35 != v34)
    free(v35);
  if (v99 != &v100)
    free(v99);
  if (v98 != v97)
    free(v98);
  if (v103 != v104)
    free(v103);
  if (v102 != v101)
    free(v102);
  v25 = v80;
  sub_1C63E79EC((uint64_t)&v34, (uint64_t)&v62);
  v37[24] = v25;
  if (v64 != &v65)
    free(v64);
  if (v63 != v62)
    free(v63);
  if (v56 != &v57)
    free(v56);
  if (v55 != v54)
    free(v55);
  if (v60 != &v61)
    free(v60);
  if (v59 != v58)
    free(v59);
  if (v78 != v79)
    free(v78);
  if (v77 != v76)
    free(v77);
  if (v95 != &v96)
    free(v95);
  if (v94 != v93)
    free(v94);
  if (v91 != v92)
    free(v91);
  if (v90 != v89)
    free(v90);
  if (v48 != &v49)
    free(v48);
  if (v47 != v46)
    free(v47);
  if (v52 != &v53)
    free(v52);
  if (v51 != v50)
    free(v51);
  if (v40 != &v41)
    free(v40);
  if (v39 != v38)
    free(v39);
  if (v44 != &v45)
    free(v44);
  if (v43 != v42)
    free(v43);
  if (v36 != v37)
    free(v36);
  if (v35 != v34)
    free(v35);
  if (v28 != &v29)
    free(v28);
  if (v27 != v26)
    free(v27);
  if (v32 != &v33)
    free(v32);
  if (v31 != v30)
    free(v31);
}

uint64_t sub_1C60C6B44(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  uint64_t *v12;
  uint64_t v13;
  char v14;
  unsigned int v15;
  uint64_t v16;
  _QWORD v17[3];

  v1 = this;
  v2 = this + 96;
  while (1)
  {
    v3 = *(_QWORD *)(v1 + 96) + 24 * *(unsigned int *)(v1 + 104);
    v4 = *(_QWORD *)(v3 - 24);
    if (v4)
    {
      v5 = *(_QWORD *)(v3 - 24);
      while (!*(_DWORD *)(v5 + 80))
      {
        v5 = *(_QWORD *)(v5 + 40);
        if (!v5)
        {
          v5 = *(_QWORD *)(v3 - 24);
          break;
        }
      }
    }
    else
    {
      v5 = 0;
    }
    v6 = *(_QWORD *)(v3 - 16);
    if (v6 != v4)
    {
      v7 = *(_QWORD *)(v3 - 8);
      goto LABEL_16;
    }
    v8 = *(_BYTE *)(v4 + 8) != 1 || v4 == 0;
    v9 = *(unsigned int *)(v5 + 80);
    v10 = (v9 + 1);
    if (v8)
      v10 = v9;
    v7 = *(_QWORD *)(v3 - 8);
    if (v7 == v10)
      return this;
LABEL_16:
    *(_QWORD *)(v3 - 8) = v7 + 1;
    if (v6)
      v11 = *(_BYTE *)(v6 + 8) == 1;
    else
      v11 = 0;
    if (v11)
    {
      if (!(_DWORD)v7)
      {
        v12 = (uint64_t *)(v6 + 200);
        goto LABEL_26;
      }
      LODWORD(v7) = v7 - 1;
    }
    while (!*(_DWORD *)(v6 + 80))
      v6 = *(_QWORD *)(v6 + 40);
    v12 = (uint64_t *)(*(_QWORD *)(v6 + 72) + 8 * v7);
LABEL_26:
    v13 = *v12;
    this = (uint64_t)sub_1C4774094((llvm::SmallPtrSetImplBase *)v1, *v12);
    if (v14)
    {
      v17[0] = v13;
      v17[1] = v13;
      v17[2] = 0;
      this = sub_1C60C6C84(v2, (unint64_t)v17);
      v15 = *(_DWORD *)(v1 + 104);
      v16 = *(_QWORD *)(v1 + 96) + 24 * v15;
      *(_OWORD *)v16 = *(_OWORD *)this;
      *(_QWORD *)(v16 + 16) = *(_QWORD *)(this + 16);
      *(_DWORD *)(v1 + 104) = v15 + 1;
    }
  }
}

unint64_t sub_1C60C6C84(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;

  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v5 = v3 + 1;
    v6 = *(_QWORD *)a1 + 24 * v3;
    if (*(_QWORD *)a1 <= a2 && v6 > a2)
    {
      v8 = a2 - *(_QWORD *)a1;
      sub_1C63E7954(a1, v5);
      return *(_QWORD *)a1 + v8;
    }
    else
    {
      sub_1C63E7954(a1, v5);
    }
  }
  return a2;
}

uint64_t sub_1C60C6CEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  if (a1 != a2)
  {
    v4 = *(_QWORD *)a2;
    if (*(_QWORD *)a2 == a2 + 16)
    {
      v5 = *(unsigned int *)(a2 + 8);
      v6 = *(unsigned int *)(a1 + 8);
      if (v6 >= v5)
      {
        if ((_DWORD)v5)
        {
          v11 = *(_QWORD *)a1;
          v12 = v4 + 24 * v5;
          do
          {
            *(_OWORD *)v11 = *(_OWORD *)v4;
            *(_QWORD *)(v11 + 16) = *(_QWORD *)(v4 + 16);
            v4 += 24;
            v11 += 24;
          }
          while (v4 != v12);
        }
      }
      else
      {
        if (*(_DWORD *)(a1 + 12) < v5)
        {
          *(_DWORD *)(a1 + 8) = 0;
          sub_1C63E7954(a1, v5);
          v6 = 0;
          v4 = *(_QWORD *)a2;
          v13 = *(unsigned int *)(a2 + 8);
          v7 = *(_QWORD *)a1;
        }
        else
        {
          v7 = *(_QWORD *)a1;
          if ((_DWORD)v6)
          {
            v8 = 0;
            do
            {
              v9 = v7 + v8;
              v10 = v4 + v8;
              *(_OWORD *)v9 = *(_OWORD *)(v4 + v8);
              *(_QWORD *)(v9 + 16) = *(_QWORD *)(v4 + v8 + 16);
              v8 += 24;
            }
            while (v10 + 24 != v4 + 24 * v6);
          }
          else
          {
            v6 = 0;
          }
          v13 = v5;
        }
        if (v6 != v13)
        {
          v14 = 3 * v6;
          v15 = v4 + 24 * v13;
          v16 = v7 + 8 * v14;
          v17 = v4 + 8 * v14;
          do
          {
            *(_OWORD *)v16 = *(_OWORD *)v17;
            *(_QWORD *)(v16 + 16) = *(_QWORD *)(v17 + 16);
            v17 += 24;
            v16 += 24;
          }
          while (v17 != v15);
        }
      }
      *(_DWORD *)(a1 + 8) = v5;
      *(_DWORD *)(a2 + 8) = 0;
    }
    else
    {
      sub_1C5A965AC(a1, a2);
    }
  }
  return a1;
}

uint64_t sub_1C60C6E40(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  if ((uint64_t *)a1 != a2)
  {
    v4 = *((unsigned int *)a2 + 2);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if ((_DWORD)v4)
      {
        v11 = *a2;
        v12 = *a2 + 24 * v4;
        v13 = *(_QWORD *)a1;
        do
        {
          *(_OWORD *)v13 = *(_OWORD *)v11;
          *(_QWORD *)(v13 + 16) = *(_QWORD *)(v11 + 16);
          v11 += 24;
          v13 += 24;
        }
        while (v11 != v12);
      }
    }
    else
    {
      if (*(_DWORD *)(a1 + 12) < v4)
      {
        *(_DWORD *)(a1 + 8) = 0;
        sub_1C63E7954(a1, v4);
        v5 = 0;
        v6 = *a2;
        v14 = *((unsigned int *)a2 + 2);
        v7 = *(_QWORD *)a1;
      }
      else
      {
        v6 = *a2;
        v7 = *(_QWORD *)a1;
        if ((_DWORD)v5)
        {
          v8 = 0;
          do
          {
            v9 = v7 + v8;
            v10 = v6 + v8;
            *(_OWORD *)v9 = *(_OWORD *)(v6 + v8);
            *(_QWORD *)(v9 + 16) = *(_QWORD *)(v6 + v8 + 16);
            v8 += 24;
          }
          while (v10 + 24 != v6 + 24 * v5);
        }
        else
        {
          v5 = 0;
        }
        v14 = v4;
      }
      if (v5 != v14)
      {
        v15 = 3 * v5;
        v16 = v6 + 24 * v14;
        v17 = v7 + 8 * v15;
        v18 = v6 + 8 * v15;
        do
        {
          *(_OWORD *)v17 = *(_OWORD *)v18;
          *(_QWORD *)(v17 + 16) = *(_QWORD *)(v18 + 16);
          v18 += 24;
          v17 += 24;
        }
        while (v18 != v16);
      }
    }
    *(_DWORD *)(a1 + 8) = v4;
  }
  return a1;
}

uint64_t llvm::VPlanHCFGBuilder::buildPlainCFG(llvm::VPlanHCFGBuilder *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t LoopPredecessor;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t i;
  void *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t UniqueExitBlock;
  uint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  _QWORD *v42;
  int v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  unint64_t v47;
  _QWORD *v48;
  uint64_t v49;
  void *__p[2];
  char v51;
  void *v52;
  char *v53;
  uint64_t v54;
  llvm::LoopInfo *v55[2];
  uint64_t v56;
  __int128 v57;
  _QWORD v58[4];
  uint64_t v59[2];
  int v60;
  void *v61;
  uint64_t v62;
  _QWORD v63[10];

  v63[8] = *MEMORY[0x1E0C80C00];
  v1 = *((_QWORD *)this + 2);
  *(_OWORD *)v55 = *(_OWORD *)this;
  v56 = v1;
  v57 = 0u;
  memset(v58, 0, 28);
  v59[0] = 0;
  v59[1] = 0;
  v60 = 0;
  v61 = v63;
  v62 = 0x800000000;
  v2 = operator new();
  v51 = 9;
  strcpy((char *)__p, "TopRegion");
  v3 = sub_1C60899F8(v2, 1, (__int128 *)__p);
  *(_QWORD *)v3 = &off_1E81ADC00;
  *(_QWORD *)(v3 + 200) = 0;
  *(_QWORD *)(v3 + 208) = 0;
  *(_BYTE *)(v3 + 216) = 0;
  *(_QWORD *)&v57 = v3;
  if (v51 < 0)
    operator delete(__p[0]);
  LoopPredecessor = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor((uint64_t)v55[0]);
  if (!LoopPredecessor)
    goto LABEL_10;
  v5 = *(_QWORD *)(LoopPredecessor + 40);
  if (v5 == LoopPredecessor + 40)
    goto LABEL_10;
  if (v5)
    v6 = v5 - 24;
  else
    v6 = 0;
  if (*(_BYTE *)(v6 + 16) != 30)
  {
    v7 = 0;
    switch(*(_BYTE *)(v6 + 16))
    {
      case 0x1D:
      case 0x21:
      case 0x22:
      case 0x23:
      case 0x24:
      case 0x25:
      case 0x26:
        goto LABEL_15;
      case 0x1E:
        __break(1u);
        goto LABEL_66;
      case 0x1F:
        v8 = (*(_DWORD *)(v6 + 20) >> 1) & 0x3FFFFFF;
        break;
      case 0x20:
LABEL_66:
        v8 = (*(_DWORD *)(v6 + 20) & 0x7FFFFFF) - 1;
        break;
      case 0x27:
        v8 = *(_DWORD *)(v6 + 80) + 1;
        break;
      default:
        goto LABEL_10;
    }
    if (v8 != 1)
      goto LABEL_10;
LABEL_14:
    v7 = LoopPredecessor;
    goto LABEL_15;
  }
  if ((*(_DWORD *)(v6 + 20) & 0x7FFFFFF) != 3)
    goto LABEL_14;
LABEL_10:
  v7 = 0;
LABEL_15:
  v9 = sub_1C60C81F4((uint64_t)v55, v7);
  v10 = v7 + 40;
  for (i = *(_QWORD *)(v7 + 48); i != v10; i = *(_QWORD *)(i + 8))
  {
    if (i)
      v12 = (void *)(i - 24);
    else
      v12 = 0;
    if (*(_BYTE *)(*(_QWORD *)v12 + 8) != 7)
    {
      v13 = sub_1C63D7A5C(v56, (uint64_t)v12);
      __p[0] = v12;
      sub_1C61B6040(v59, __p)[1] = v13;
    }
  }
  v14 = sub_1C60C81F4((uint64_t)v55, **((_QWORD **)v55[0] + 4));
  __p[0] = "vector.body";
  LOWORD(v52) = 259;
  sub_1C60805FC((uint64_t)v14, (llvm::Twine *)__p);
  v15 = *((unsigned int *)v9 + 20);
  if (v15 >= *((_DWORD *)v9 + 21))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v9 + 9), (uint64_t)(v9 + 11), v15 + 1, 8);
    LODWORD(v15) = *((_DWORD *)v9 + 20);
  }
  *(_QWORD *)(v9[9] + 8 * v15) = v14;
  v48 = v9;
  ++*((_DWORD *)v9 + 20);
  sub_1C4DFE414((uint64_t)__p, (uint64_t)v55[0]);
  llvm::LoopBlocksDFS::perform((llvm::LoopBlocksDFS *)__p, v55[1]);
  v17 = (char *)v52;
  v16 = v53;
  if (v53 != v52)
  {
    do
    {
      v36 = *((_QWORD *)v16 - 1);
      v16 -= 8;
      v35 = v36;
      v37 = sub_1C60C81F4((uint64_t)v55, v36);
      sub_1C60C8348(v55, (uint64_t)v37, v36);
      v38 = *(_QWORD *)(v36 + 40);
      if (v38 == v36 + 40)
      {
        v40 = 0;
      }
      else
      {
        if (v38)
          v39 = v38 - 24;
        else
          v39 = 0;
        if (*(unsigned __int8 *)(v39 + 16) - 29 >= 0xB)
          v40 = 0;
        else
          v40 = v39;
      }
      v41 = *(unsigned __int8 *)(v40 + 16);
      if (v41 != 30)
        __asm { BR              X11 }
      if ((*(_DWORD *)(v40 + 20) & 0x7FFFFFF) == 3)
      {
        v42 = sub_1C60C81F4((uint64_t)v55, *(_QWORD *)(v40 - 32));
        v43 = *(unsigned __int8 *)(v40 + 16);
        if (v43 != 30)
          __asm { BR              X9 }
        v44 = sub_1C60C81F4((uint64_t)v55, *(_QWORD *)(v40 - 64));
        v54 = 0;
        v54 = *(_QWORD *)(v40 - 96);
        v45 = sub_1C61B6040(v59, &v54);
        sub_1C63DBA70((uint64_t)v37, (uint64_t)v42, (uint64_t)v44, v45[1]);
      }
      else
      {
        v46 = sub_1C60C81F4((uint64_t)v55, *(_QWORD *)(v40 - 32));
        v47 = *((unsigned int *)v37 + 20);
        if (v47 >= *((unsigned int *)v37 + 21))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v37 + 9), (uint64_t)(v37 + 11), v47 + 1, 8);
          v47 = *((unsigned int *)v37 + 20);
        }
        *(_QWORD *)(v37[9] + 8 * v47) = v46;
        ++*((_DWORD *)v37 + 20);
      }
      sub_1C60C8690((uint64_t)v55, v37, *(_QWORD *)(v35 + 8));
    }
    while (v16 != v17);
  }
  UniqueExitBlock = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getUniqueExitBlock((_QWORD *)v55[0]);
  v49 = UniqueExitBlock;
  v19 = sub_1C6180A54((uint64_t)&v58[1], &v49)[1];
  sub_1C60C8348(v55, v19, UniqueExitBlock);
  sub_1C60C8690((uint64_t)v55, (_DWORD *)v19, *(_QWORD *)(UniqueExitBlock + 8));
  if ((_DWORD)v62)
  {
    v20 = (uint64_t *)v61;
    v21 = (uint64_t *)((char *)v61 + 8 * v62);
    do
    {
      v22 = *v20;
      v54 = *v20;
      v23 = sub_1C61B6040(v59, &v54)[1];
      if (v23)
        v24 = v23 - 96;
      else
        v24 = 0;
      v25 = *(_DWORD *)(v22 + 20);
      v26 = v25 & 0x7FFFFFF;
      if ((v25 & 0x7FFFFFF) != 0)
      {
        v27 = 0;
        do
        {
          if ((v25 & 0x40000000) != 0)
            v28 = *(_QWORD *)(v22 - 8);
          else
            v28 = v22 - 32 * v26;
          v29 = sub_1C60C87D4((uint64_t)v55, *(_QWORD *)(v28 + 32 * v27));
          v30 = *(_DWORD *)(v22 + 20);
          if ((v30 & 0x40000000) != 0)
            v31 = *(_QWORD *)(v22 - 8);
          else
            v31 = v22 - 32 * (v30 & 0x7FFFFFF);
          v54 = *(_QWORD *)(v31 + 32 * *(unsigned int *)(v22 + 60) + 8 * v27);
          v32 = sub_1C6180A54((uint64_t)&v58[1], &v54);
          sub_1C63E7BA8(v24, v29, v32[1]);
          ++v27;
          v25 = *(_DWORD *)(v22 + 20);
          v26 = v25 & 0x7FFFFFF;
        }
        while (v27 != (v25 & 0x7FFFFFF));
      }
      ++v20;
    }
    while (v20 != v21);
  }
  v33 = v57;
  *(_QWORD *)(v57 + 200) = v48;
  v48[5] = v33;
  *(_QWORD *)(v33 + 208) = v19;
  *(_QWORD *)(v19 + 40) = v33;
  if (v52)
  {
    v53 = (char *)v52;
    operator delete(v52);
  }
  MEMORY[0x1CAA32FB4](__p[1], 8);
  if (v61 != v63)
    free(v61);
  MEMORY[0x1CAA32FB4](v59[0], 8);
  MEMORY[0x1CAA32FB4](v58[1], 8);
  return v33;
}

void sub_1C60C76CC(uint64_t *a1, uint64_t a2)
{
  uint64_t *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  void *v16;
  char *v17;
  uint64_t *v18;
  uint64_t *v19;
  char *v20;
  char *v21;
  unsigned int v22;
  char *v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t v32;
  int v33;
  unint64_t *v34;
  uint64_t v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  char *v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t v48;
  char *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  size_t v55;
  char *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  uint64_t v63;
  unint64_t v64;
  size_t v65;
  _BYTE *v66;
  unsigned int v67;
  _BYTE *v68;
  char *v69;
  char *v70;
  char *v71;
  uint64_t v72;
  uint64_t v73;
  _BYTE *v74;
  _BYTE *v75;
  char *v76;
  char *v77;
  char *v78;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  void *v83;
  _QWORD *v84;
  _QWORD *v85;
  unint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  unint64_t v89;
  _QWORD *v90;
  _QWORD *v91;
  _QWORD *v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  char *v97;
  _QWORD *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  _QWORD *v110;
  BOOL v111;
  unint64_t v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  _QWORD *v116;
  unint64_t v118;
  uint64_t v119;
  char *__src;
  uint64_t *v121;
  uint64_t *v122;
  unsigned int v123;
  unsigned int v124;
  char *v125;
  int v126;
  uint64_t *v127;
  uint64_t *v128;
  char *v129;
  unint64_t v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  void *v135;
  uint64_t v136;
  _BYTE v137[32];
  void *v138;
  void *v139;
  void *v140;
  int v141;
  _BYTE v142[128];
  void *v143;
  void *v144;
  void *v145;
  unsigned int v146;
  _BYTE v147[128];
  void *v148;
  void *v149;
  void *v150;
  _BYTE v151[128];
  void *v152;
  void *v153;
  void *v154;
  _QWORD v155[18];

  v155[16] = *MEMORY[0x1E0C80C00];
  v4 = *(uint64_t **)(a2 + 48);
  sub_1C61AE614((uint64_t)&v148, (uint64_t)v4);
  sub_1C61AF960((const void **)&v143, (llvm::SmallPtrSetImplBase *)&v148);
  sub_1C61AF960((const void **)&v138, (llvm::SmallPtrSetImplBase *)&v152);
  v132 = (uint64_t)(a1 + 6);
  while (1)
  {
    if (v146 != v141)
      goto LABEL_12;
    if (!v146)
      break;
    v5 = v140;
    v6 = v145;
    while (*v6 == *v5 && v6[1] == v5[1])
    {
      v6 += 2;
      v5 += 2;
      if (v6 == (_QWORD *)((char *)v145 + 16 * v146))
        goto LABEL_114;
    }
LABEL_12:
    v8 = **((_QWORD **)v145 + 2 * v146 - 2);
    v135 = v137;
    v136 = 0x400000000;
    v9 = *(unsigned int *)(v8 + 56);
    if (!(_DWORD)v9)
      goto LABEL_21;
    v10 = *(uint64_t **)(v8 + 48);
    v11 = 8 * v9;
    do
    {
      v12 = *v10;
      if (sub_1C60C8868(a2, v8, *v10) && sub_1C60C8950(a2, v12))
      {
        v13 = v136;
        if (v136 >= (unint64_t)HIDWORD(v136))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v135, (uint64_t)v137, v136 + 1, 8);
          v13 = v136;
        }
        *((_QWORD *)v135 + v13) = v12;
        LODWORD(v136) = v136 + 1;
      }
      ++v10;
      v11 -= 8;
    }
    while (v11);
    if (!(_DWORD)v136)
      goto LABEL_21;
    v14 = sub_1C484358C(v132, 152, 3);
    sub_1C63E7CE8(v14, v8);
    v15 = v136;
    if ((_DWORD)v136)
    {
      v16 = v135;
      v17 = (char *)operator new(8 * v136);
      v18 = v4;
      v19 = a1;
      v20 = &v17[8 * v15];
      memmove(v17, v16, 8 * v15);
      LODWORD(v15) = 0;
      v129 = v20;
      v21 = v20;
      a1 = v19;
      v4 = v18;
      v22 = 0;
      while (1)
      {
        v23 = v21 - 8;
        v24 = *((_QWORD *)v21 - 1);
        v133 = 0;
        v134 = v24;
        if ((sub_1C61252B8(a1, &v134, &v133) & 1) != 0)
        {
          v25 = *(unint64_t **)(v133 + 8);
          if (v25)
          {
            do
            {
              v26 = v25;
              v25 = (unint64_t *)*v25;
            }
            while (v25);
            if (v26 != (unint64_t *)v14)
            {
              *v26 = v14;
              LODWORD(v15) = v15 + 1;
              v27 = (uint64_t *)v26[4];
              v22 += (v26[6] - (unint64_t)v27) >> 3;
              v28 = *v27;
              v29 = *(unsigned int *)(v28 + 56);
              if ((_DWORD)v29)
              {
                v126 = v15;
                v123 = v22;
                v30 = *(uint64_t **)(v28 + 48);
                v127 = &v30[v29];
                while (1)
                {
                  v31 = v4;
                  v32 = *v30;
                  v133 = 0;
                  v134 = v32;
                  v33 = sub_1C61252B8(a1, &v134, &v133);
                  v34 = 0;
                  if (v33)
                    v34 = *(unint64_t **)(v133 + 8);
                  if (v34 != v26)
                  {
                    if (v23 >= v129)
                    {
                      v121 = a1;
                      v35 = (v23 - v17) >> 3;
                      v36 = v35 + 1;
                      if ((unint64_t)(v35 + 1) >> 61)
                        goto LABEL_217;
                      if ((v129 - v17) >> 2 > v36)
                        v36 = (v129 - v17) >> 2;
                      if ((unint64_t)(v129 - v17) >= 0x7FFFFFFFFFFFFFF8)
                        v37 = 0x1FFFFFFFFFFFFFFFLL;
                      else
                        v37 = v36;
                      if (v37)
                      {
                        if (v37 >> 61)
                          goto LABEL_218;
                        v130 = v37;
                        v38 = (char *)operator new(8 * v37);
                        v37 = v130;
                      }
                      else
                      {
                        v38 = 0;
                      }
                      v39 = &v38[8 * v35];
                      *(_QWORD *)v39 = v32;
                      v40 = v39 + 8;
                      if (v23 == v17)
                      {
                        v17 = v39;
                        v4 = v31;
                      }
                      else
                      {
                        v4 = v31;
                        do
                        {
                          v41 = *((_QWORD *)v23 - 1);
                          v23 -= 8;
                          *((_QWORD *)v39 - 1) = v41;
                          v39 -= 8;
                        }
                        while (v23 != v17);
                        v23 = v17;
                        v17 = v39;
                      }
                      v129 = &v38[8 * v37];
                      if (v23)
                        operator delete(v23);
                      v23 = v40;
                      a1 = v121;
                      goto LABEL_57;
                    }
                    *(_QWORD *)v23 = v32;
                    v23 += 8;
                  }
                  v4 = v31;
LABEL_57:
                  if (++v30 == v127)
                  {
                    v21 = v23;
                    v22 = v123;
                    goto LABEL_59;
                  }
                }
              }
            }
LABEL_61:
            v21 = v23;
            goto LABEL_62;
          }
        }
        if (!sub_1C60C8950(a2, v24))
          goto LABEL_61;
        v134 = v24;
        sub_1C61DF1DC(a1, &v134)[1] = v14;
        ++v22;
        if (v24 == **(_QWORD **)(v14 + 32))
          goto LABEL_61;
        v126 = v15;
        v42 = *(unsigned int *)(v24 + 56);
        if (!(_DWORD)v42)
          break;
        v128 = v4;
        v122 = a1;
        v43 = *(char **)(v24 + 48);
        v44 = v23 - v17;
        v45 = &v17[(v23 - v17) & 0xFFFFFFFFFFFFFFF8];
        if (v42 <= (v129 - v23) >> 3)
        {
          v51 = &v43[8 * v42];
          v52 = v23 - v45;
          v53 = (v23 - v45) >> 3;
          if (v53 >= v42)
          {
            v56 = v23;
LABEL_80:
            v57 = &v56[-8 * v42];
            v21 = v56;
            while (v57 < v23)
            {
              v58 = *(_QWORD *)v57;
              v57 += 8;
              *(_QWORD *)v21 = v58;
              v21 += 8;
            }
            v59 = &v45[8 * v42];
            a1 = v122;
            if (v56 != v59)
            {
              v60 = v45;
              v61 = v43;
              memmove(&v56[-8 * ((v56 - v59) >> 3)], v45, v56 - v59);
              v43 = v61;
              v45 = v60;
            }
            LODWORD(v15) = v126;
            if (v51 != v43)
              memmove(v45, v43, v51 - v43);
            v4 = v128;
            goto LABEL_62;
          }
          v125 = *(char **)(v24 + 48);
          v54 = &v43[8 * v53];
          v55 = v51 - v54;
          v51 = v54;
          memmove(v23, v54, v55);
          v56 = &v23[v55];
          if (v52 >= 1)
          {
            v45 = &v17[(v23 - v17) & 0xFFFFFFFFFFFFFFF8];
            v43 = v125;
            goto LABEL_80;
          }
          v21 = &v23[v55];
          a1 = v122;
          v4 = v128;
          goto LABEL_59;
        }
        v124 = v22;
        v46 = v44 >> 3;
        v47 = (v44 >> 3) + v42;
        if (v47 >> 61)
          goto LABEL_217;
        if ((v129 - v17) >> 2 > v47)
          v47 = (v129 - v17) >> 2;
        v48 = 0x1FFFFFFFFFFFFFFFLL;
        if ((unint64_t)(v129 - v17) < 0x7FFFFFFFFFFFFFF8)
          v48 = v47;
        __src = &v17[(v23 - v17) & 0xFFFFFFFFFFFFFFF8];
        v131 = v48;
        if (v48)
        {
          if (v48 >> 61)
            goto LABEL_218;
          v49 = *(char **)(v24 + 48);
          v50 = (char *)operator new(8 * v48);
          v43 = v49;
        }
        else
        {
          v50 = 0;
        }
        v62 = &v50[8 * v46];
        memcpy(v62, v43, 8 * v42);
        if ((unint64_t)v44 >= 8)
        {
          v63 = 8 * v46;
          do
          {
            *(_QWORD *)&v50[v63 - 8] = *(_QWORD *)&v17[v63 - 8];
            v63 -= 8;
          }
          while (v63);
          v62 = v50;
        }
        v64 = (v44 & 0xFFFFFFFFFFFFFFF8) + 8 * v42;
        v15 = (unint64_t)&v50[v64];
        v65 = v23 - __src;
        if (v65)
          memmove(&v50[v64], __src, v65);
        v4 = v128;
        v129 = &v50[8 * v131];
        v21 = (char *)(v15 + v65);
        a1 = v122;
        LODWORD(v15) = v126;
        if (v17)
          operator delete(v17);
        v17 = v62;
        v22 = v124;
LABEL_62:
        if (v17 == v21)
          goto LABEL_100;
      }
      v21 = v23;
LABEL_59:
      LODWORD(v15) = v126;
      goto LABEL_62;
    }
    v21 = 0;
    v22 = 0;
LABEL_100:
    v66 = *(_BYTE **)(v14 + 8);
    if (v15 > (unint64_t)((uint64_t)(*(_QWORD *)(v14 + 24) - (_QWORD)v66) >> 3))
    {
      v67 = v22;
      v68 = *(_BYTE **)(v14 + 16);
      v69 = (char *)operator new(8 * v15);
      v70 = &v69[(v68 - v66) & 0xFFFFFFFFFFFFFFF8];
      v71 = v70;
      if (v68 != v66)
      {
        v71 = &v69[(v68 - v66) & 0xFFFFFFFFFFFFFFF8];
        do
        {
          v72 = *((_QWORD *)v68 - 1);
          v68 -= 8;
          *((_QWORD *)v71 - 1) = v72;
          v71 -= 8;
        }
        while (v68 != v66);
      }
      *(_QWORD *)(v14 + 8) = v71;
      *(_QWORD *)(v14 + 16) = v70;
      *(_QWORD *)(v14 + 24) = &v69[8 * v15];
      v22 = v67;
      if (v66)
        operator delete(v66);
    }
    v73 = v22;
    v74 = *(_BYTE **)(v14 + 32);
    if (v22 > (unint64_t)((uint64_t)(*(_QWORD *)(v14 + 48) - (_QWORD)v74) >> 3))
    {
      v75 = *(_BYTE **)(v14 + 40);
      v76 = (char *)operator new(8 * v73);
      v77 = &v76[(v75 - v74) & 0xFFFFFFFFFFFFFFF8];
      v78 = v77;
      if (v75 != v74)
      {
        v78 = &v76[(v75 - v74) & 0xFFFFFFFFFFFFFFF8];
        do
        {
          v79 = *((_QWORD *)v75 - 1);
          v75 -= 8;
          *((_QWORD *)v78 - 1) = v79;
          v78 -= 8;
        }
        while (v75 != v74);
      }
      *(_QWORD *)(v14 + 32) = v78;
      *(_QWORD *)(v14 + 40) = v77;
      *(_QWORD *)(v14 + 48) = &v76[8 * v73];
      if (v74)
        operator delete(v74);
    }
    if (v21)
      operator delete(v21);
LABEL_21:
    if (v135 != v137)
      free(v135);
    if (--v146)
      sub_1C4EB6F48(&v143);
  }
LABEL_114:
  if (v140 != v142)
    free(v140);
  if (v139 != v138)
    free(v139);
  if (v145 != v147)
    free(v145);
  if (v144 != v143)
    free(v144);
  if (v154 != v155)
    free(v154);
  if (v153 != v152)
    free(v153);
  if (v150 != v151)
    free(v150);
  if (v149 != v148)
    free(v149);
  sub_1C63E7D58((uint64_t)&v148, *v4);
  sub_1C61AF960((const void **)&v143, (llvm::SmallPtrSetImplBase *)&v148);
  sub_1C61AF960((const void **)&v138, (llvm::SmallPtrSetImplBase *)&v152);
  while (1)
  {
    if (v146 != v141)
      goto LABEL_141;
    if (!v146)
      break;
    v80 = v140;
    v81 = v145;
    while (*v81 == *v80 && v81[1] == v80[1])
    {
      v81 += 2;
      v80 += 2;
      if (v81 == (_QWORD *)((char *)v145 + 16 * v146))
        goto LABEL_200;
    }
LABEL_141:
    v83 = (void *)*((_QWORD *)v145 + 2 * v146 - 2);
    v134 = 0;
    v135 = v83;
    if ((sub_1C61252B8(a1, &v135, &v134) & 1) != 0)
    {
      v84 = *(_QWORD **)(v134 + 8);
      if (v84)
      {
        if (*(void **)v84[4] == v83)
        {
          v85 = (_QWORD *)*v84;
          if (*v84)
          {
            v87 = (_QWORD *)v85[2];
            v86 = v85[3];
            if ((unint64_t)v87 < v86)
            {
              *v87 = v84;
              v88 = v87 + 1;
              goto LABEL_173;
            }
            v92 = (_QWORD *)v85[1];
            v93 = v87 - v92;
            v94 = v93 + 1;
            if (!((unint64_t)(v93 + 1) >> 61))
            {
              v95 = v86 - (_QWORD)v92;
              if (v95 >> 2 > v94)
                v94 = v95 >> 2;
              if ((unint64_t)v95 >= 0x7FFFFFFFFFFFFFF8)
                v96 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v96 = v94;
              if (!v96)
              {
                v97 = 0;
                goto LABEL_168;
              }
              if (!(v96 >> 61))
              {
                v97 = (char *)operator new(8 * v96);
LABEL_168:
                v104 = &v97[8 * v93];
                *(_QWORD *)v104 = v84;
                v88 = v104 + 8;
                if (v87 != v92)
                {
                  do
                  {
                    v105 = *--v87;
                    *((_QWORD *)v104 - 1) = v105;
                    v104 -= 8;
                  }
                  while (v87 != v92);
                  v87 = (_QWORD *)v85[1];
                }
                v85[1] = v104;
                v85[2] = v88;
                v85[3] = &v97[8 * v96];
                if (v87)
                  operator delete(v87);
LABEL_173:
                v85[2] = v88;
LABEL_181:
                v108 = v84[4];
                v109 = v84[5];
                v110 = (_QWORD *)(v109 - 8);
                v111 = v108 + 8 == v109 || v108 + 8 >= (unint64_t)v110;
                if (!v111)
                {
                  v112 = v108 + 16;
                  do
                  {
                    v113 = *(_QWORD *)(v112 - 8);
                    *(_QWORD *)(v112 - 8) = *v110;
                    *v110-- = v113;
                    v111 = v112 >= (unint64_t)v110;
                    v112 += 8;
                  }
                  while (!v111);
                }
                v114 = v84[1];
                v115 = v84[2];
                v116 = (_QWORD *)(v115 - 8);
                if (v114 != v115 && v114 < (unint64_t)v116)
                {
                  v118 = v114 + 8;
                  do
                  {
                    v119 = *(_QWORD *)(v118 - 8);
                    *(_QWORD *)(v118 - 8) = *v116;
                    *v116-- = v119;
                    v111 = v118 >= (unint64_t)v116;
                    v118 += 8;
                  }
                  while (!v111);
                }
                goto LABEL_197;
              }
LABEL_218:
              sub_1C4764EE4();
            }
LABEL_217:
            abort();
          }
          v90 = (_QWORD *)a1[4];
          v89 = a1[5];
          if ((unint64_t)v90 >= v89)
          {
            v98 = (_QWORD *)a1[3];
            v99 = v90 - v98;
            v100 = v99 + 1;
            if ((unint64_t)(v99 + 1) >> 61)
              goto LABEL_217;
            v101 = v89 - (_QWORD)v98;
            if (v101 >> 2 > v100)
              v100 = v101 >> 2;
            if ((unint64_t)v101 >= 0x7FFFFFFFFFFFFFF8)
              v102 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v102 = v100;
            if (v102)
            {
              if (v102 >> 61)
                goto LABEL_218;
              v103 = (char *)operator new(8 * v102);
            }
            else
            {
              v103 = 0;
            }
            v106 = &v103[8 * v99];
            *(_QWORD *)v106 = v84;
            v91 = v106 + 8;
            if (v90 != v98)
            {
              do
              {
                v107 = *--v90;
                *((_QWORD *)v106 - 1) = v107;
                v106 -= 8;
              }
              while (v90 != v98);
              v90 = (_QWORD *)a1[3];
            }
            a1[3] = (uint64_t)v106;
            a1[4] = (uint64_t)v91;
            a1[5] = (uint64_t)&v103[8 * v102];
            if (v90)
              operator delete(v90);
          }
          else
          {
            *v90 = v84;
            v91 = v90 + 1;
          }
          a1[4] = (uint64_t)v91;
          goto LABEL_181;
        }
        do
        {
          sub_1C63E7E68((uint64_t)v84, (uint64_t)v83);
LABEL_197:
          v84 = (_QWORD *)*v84;
        }
        while (v84);
      }
    }
    if (--v146)
      sub_1C60C4390(&v143);
  }
LABEL_200:
  if (v140 != v142)
    free(v140);
  if (v139 != v138)
    free(v139);
  if (v145 != v147)
    free(v145);
  if (v144 != v143)
    free(v144);
  if (v154 != v155)
    free(v154);
  if (v153 != v152)
    free(v153);
  if (v150 != v151)
    free(v150);
  if (v149 != v148)
    free(v149);
}

_QWORD *sub_1C60C81F4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  _QWORD *v7;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  int v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD v22[4];
  __int16 v23;
  uint64_t v24;

  v24 = a2;
  v5 = a1 + 48;
  v4 = *(_QWORD *)(a1 + 48);
  v22[0] = 0;
  if (sub_1C6144BDC(v4, *(_DWORD *)(v5 + 16), a2, v22))
    v6 = v22[0] == *(_QWORD *)v5 + 16 * *(unsigned int *)(v5 + 16);
  else
    v6 = 1;
  if (v6)
  {
    v9 = (_QWORD *)operator new();
    v7 = v9;
    if ((*(_BYTE *)(a2 + 23) & 0x10) == 0)
    {
      v20 = 0;
      v19 = &byte_1C871356D;
      goto LABEL_16;
    }
    v10 = ***(_QWORD ***)a2;
    v11 = *(_QWORD *)(v10 + 152);
    v12 = *(unsigned int *)(v10 + 168);
    if ((_DWORD)v12)
    {
      LODWORD(v13) = (v12 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v14 = (uint64_t *)(v11 + 16 * v13);
      v15 = *v14;
      if (*v14 == a2)
      {
LABEL_15:
        v18 = (_QWORD *)v14[1];
        v21 = *v18;
        v19 = (char *)(v18 + 2);
        v20 = v21;
LABEL_16:
        v23 = 261;
        v22[0] = v19;
        v22[1] = v20;
        sub_1C6089974(v9, (llvm::Twine *)v22, 0);
        sub_1C6180A54(v5, &v24)[1] = v7;
        v7[5] = *(_QWORD *)(a1 + 24);
        return v7;
      }
      v16 = 1;
      while (v15 != -4096)
      {
        v17 = v13 + v16++;
        v13 = v17 & (v12 - 1);
        v15 = *(_QWORD *)(v11 + 16 * v13);
        if (v15 == a2)
        {
          v14 = (uint64_t *)(v11 + 16 * v13);
          goto LABEL_15;
        }
      }
    }
    v14 = (uint64_t *)(v11 + 16 * v12);
    goto LABEL_15;
  }
  return *(_QWORD **)(v22[0] + 8);
}

_QWORD *sub_1C60C8348(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  void *v31;
  uint64_t v32;
  _QWORD v33[5];

  v33[4] = *MEMORY[0x1E0C80C00];
  v30 = a2 + 200;
  result[4] = a2;
  result[5] = a2 + 200;
  v3 = result + 4;
  v4 = a3 + 40;
  v5 = *(_QWORD *)(a3 + 48);
  if (v5 != a3 + 40)
  {
    v7 = (uint64_t)result;
    v27 = (uint64_t)(result + 14);
    v28 = (uint64_t)(result + 12);
    v8 = result + 9;
    v29 = result + 9;
    while (1)
    {
      if (v5)
        v9 = v5 - 24;
      else
        v9 = 0;
      v10 = *(unsigned __int8 *)(v9 + 16);
      if (v10 == 30)
        v11 = v9;
      else
        v11 = 0;
      if (v5 && v10 == 30)
      {
        if ((*(_DWORD *)(v11 + 20) & 0x7FFFFFF) == 3)
          result = (_QWORD *)sub_1C60C87D4(v7, *(_QWORD *)(v11 - 96));
        goto LABEL_13;
      }
      v12 = v10 == 83 ? v9 : 0;
      if (!v5 || v10 != 83)
        break;
      v13 = operator new();
      *(_BYTE *)(v13 + 8) = 16;
      *(_QWORD *)(v13 + 24) = 0;
      *(_QWORD *)(v13 + 16) = 0;
      *(_QWORD *)(v13 + 48) = v13 + 64;
      *(_QWORD *)(v13 + 56) = 0x200000000;
      *(_DWORD *)(v13 + 80) = 0;
      *(_QWORD *)(v13 + 88) = 0;
      *(_QWORD *)v13 = &unk_1E81AD7B8;
      *(_QWORD *)(v13 + 32) = 0;
      *(_QWORD *)(v13 + 40) = &unk_1E81AD7F8;
      *(_QWORD *)(v13 + 96) = &off_1E81ADA28;
      v14 = v13 + 96;
      *(_BYTE *)(v13 + 104) = 13;
      *(_QWORD *)(v13 + 112) = v13 + 128;
      *(_QWORD *)(v13 + 120) = 0x100000000;
      *(_QWORD *)(v13 + 136) = v12;
      *(_QWORD *)(v13 + 144) = v13;
      sub_1C619116C(v13 + 16, v13 + 96);
      *(_QWORD *)v13 = &off_1E81AD738;
      *(_QWORD *)(v13 + 96) = &unk_1E81AD798;
      *(_QWORD *)(v13 + 152) = v13 + 168;
      *(_QWORD *)(v13 + 160) = 0x200000000;
      *(_QWORD *)(v13 + 88) = a2;
      v15 = *(_QWORD *)(a2 + 200);
      *(_QWORD *)(v13 + 32) = v30;
      *(_QWORD *)(v13 + 40) = &unk_1E81AD778;
      *(_QWORD *)(v13 + 24) = v15;
      *(_QWORD *)(v15 + 8) = v13 + 24;
      *(_QWORD *)(a2 + 200) = v13 + 24;
      v16 = *(unsigned int *)(v7 + 104);
      if (v16 >= *(unsigned int *)(v7 + 108))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v28, v27, v16 + 1, 8);
        v16 = *(unsigned int *)(v7 + 104);
      }
      v8 = v29;
      *(_QWORD *)(*(_QWORD *)(v7 + 96) + 8 * v16) = v12;
      ++*(_DWORD *)(v7 + 104);
LABEL_39:
      v31 = (void *)v9;
      result = sub_1C61B6040(v8, &v31);
      result[1] = v14;
LABEL_13:
      v5 = *(_QWORD *)(v5 + 8);
      if (v5 == v4)
        return result;
    }
    v31 = v33;
    v32 = 0x400000000;
    v17 = *(_DWORD *)(v9 + 20);
    if ((v17 & 0x40000000) != 0)
    {
      v19 = *(uint64_t **)(v9 - 8);
      v18 = v17 & 0x7FFFFFF;
      if (v18)
      {
LABEL_25:
        v20 = 32 * v18;
        do
        {
          v21 = sub_1C60C87D4(v7, *v19);
          v22 = v32;
          if (v32 >= (unint64_t)HIDWORD(v32))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v31, (uint64_t)v33, v32 + 1, 8);
            v22 = v32;
          }
          *((_QWORD *)v31 + v22) = v21;
          LODWORD(v18) = v32 + 1;
          LODWORD(v32) = v32 + 1;
          v19 += 4;
          v20 -= 32;
        }
        while (v20);
        LOBYTE(v10) = *(_BYTE *)(v9 + 16);
        v23 = (uint64_t *)v31;
        v8 = v29;
        goto LABEL_32;
      }
    }
    else
    {
      v18 = v17 & 0x7FFFFFF;
      v19 = (uint64_t *)(v9 - 32 * v18);
      if (v18)
        goto LABEL_25;
    }
    v23 = v33;
LABEL_32:
    v24 = sub_1C63D5A30(v3, v10 - 28, v23, v18, v9);
    v25 = v24 - 12;
    if (!v24)
      v25 = 0;
    v26 = v25 + 12;
    if (v24)
      v14 = (uint64_t)v26;
    else
      v14 = 0;
    if (v31 != v33)
      free(v31);
    goto LABEL_39;
  }
  return result;
}

void sub_1C60C8690(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  unsigned int v7;
  BOOL v8;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  unsigned int v13;
  BOOL v14;
  void *v16;
  uint64_t v17;
  _QWORD v18[9];

  v18[8] = *MEMORY[0x1E0C80C00];
  v16 = v18;
  v17 = 0x800000000;
  if (a3)
  {
    v4 = a3;
    while (1)
    {
      v6 = *(_QWORD *)(v4 + 24);
      v7 = *(unsigned __int8 *)(v6 + 16);
      v8 = v6 && v7 >= 0x1C;
      if (v8 && v7 - 29 <= 0xA)
        break;
      v4 = *(_QWORD *)(v4 + 8);
      if (!v4)
      {
        a3 = 0;
        goto LABEL_13;
      }
    }
LABEL_14:
    v11 = sub_1C60C81F4(a1, *(_QWORD *)(v6 + 40));
    v12 = v17;
    if (v17 >= (unint64_t)HIDWORD(v17))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v16, (uint64_t)v18, v17 + 1, 8);
      v12 = v17;
    }
    *((_QWORD *)v16 + v12) = v11;
    a3 = (v17 + 1);
    LODWORD(v17) = v17 + 1;
    while (1)
    {
      v4 = *(_QWORD *)(v4 + 8);
      if (!v4)
        break;
      v6 = *(_QWORD *)(v4 + 24);
      v13 = *(unsigned __int8 *)(v6 + 16);
      if (v6)
        v14 = v13 >= 0x1C;
      else
        v14 = 0;
      if (v14 && v13 - 29 < 0xB)
        goto LABEL_14;
    }
    v10 = (uint64_t *)v16;
  }
  else
  {
LABEL_13:
    v10 = v18;
  }
  sub_1C63DBB20(a2, v10, a3);
  if (v16 != v18)
    free(v16);
}

uint64_t sub_1C60C87D4(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = a2;
  v8 = a2;
  v4 = (uint64_t *)(a1 + 72);
  v9 = 0;
  if (sub_1C61252B8((uint64_t *)(a1 + 72), &v8, &v9)
    && v9 != *(_QWORD *)(a1 + 72) + 16 * *(unsigned int *)(a1 + 88))
  {
    return *(_QWORD *)(v9 + 8);
  }
  v5 = sub_1C63D7A5C(*(_QWORD *)(a1 + 16), a2);
  sub_1C61B6040(v4, &v7)[1] = v5;
  return v5;
}

BOOL sub_1C60C8868(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[7];

  if (a2 == a3)
    return 1;
  v18[5] = v3;
  v18[6] = v4;
  v8 = (uint64_t *)(a1 + 24);
  v17 = 0;
  v18[0] = a2;
  if (sub_1C61252B8((uint64_t *)(a1 + 24), v18, &v17))
  {
    v9 = v17;
    v10 = *(_QWORD *)(a1 + 24);
    v11 = *(unsigned int *)(a1 + 40);
  }
  else
  {
    v10 = *(_QWORD *)(a1 + 24);
    v11 = *(unsigned int *)(a1 + 40);
    v9 = v10 + 16 * v11;
  }
  if (v9 == v10 + 16 * v11)
    v12 = 0;
  else
    v12 = *(_QWORD *)(v9 + 8);
  v17 = 0;
  v18[0] = a3;
  if (sub_1C61252B8(v8, v18, &v17))
  {
    v13 = v17;
    v14 = *(_QWORD *)(a1 + 24);
    v15 = *(unsigned int *)(a1 + 40);
  }
  else
  {
    v14 = *(_QWORD *)(a1 + 24);
    v15 = *(unsigned int *)(a1 + 40);
    v13 = v14 + 16 * v15;
  }
  if (v13 == v14 + 16 * v15)
    v16 = 0;
  else
    v16 = *(_QWORD *)(v13 + 8);
  return sub_1C63E7C0C(a1, v12, v16);
}

BOOL sub_1C60C8950(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;

  v7 = 0;
  v8 = a2;
  if (sub_1C61252B8((uint64_t *)(a1 + 24), &v8, &v7))
  {
    v3 = v7;
    v4 = *(_QWORD *)(a1 + 24);
    v5 = *(unsigned int *)(a1 + 40);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 24);
    v5 = *(unsigned int *)(a1 + 40);
    v3 = v4 + 16 * v5;
  }
  return v3 != v4 + 16 * v5 && *(_QWORD *)(v3 + 8) != 0;
}

void sub_1C60C89C8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  unsigned int v5;
  char *v6;
  uint64_t v7;
  char *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  _QWORD *v14;
  void *v15;
  unsigned int v16;
  unsigned int v17;
  _QWORD v18[65];

  v18[64] = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a1 + 64))
  {
    *(_DWORD *)(a1 + 68) = 0;
  }
  else
  {
    v15 = v18;
    v17 = 32;
    v2 = *(_QWORD *)(a1 + 48);
    if (v2)
    {
      v3 = *(_QWORD *)(v2 + 24);
      v18[0] = *(_QWORD *)(a1 + 48);
      v18[1] = v3;
      v4 = 1;
      v16 = 1;
      *(_DWORD *)(v2 + 72) = 0;
      v5 = 1;
      do
      {
        v6 = (char *)v15;
        v7 = v5;
        v8 = (char *)v15 + 16 * v5;
        v10 = *((_QWORD *)v8 - 2);
        v9 = (uint64_t *)*((_QWORD *)v8 - 1);
        if (v9 == (uint64_t *)(*(_QWORD *)(v10 + 24) + 8 * *(unsigned int *)(v10 + 32)))
        {
          *(_DWORD *)(v10 + 76) = v4;
          v5 = v7 - 1;
          v16 = v7 - 1;
        }
        else
        {
          v11 = *v9;
          *((_QWORD *)v8 - 1) = v9 + 1;
          v12 = *(_QWORD *)(v11 + 24);
          if (v7 >= v17)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v15, (uint64_t)v18, v7 + 1, 16);
            v6 = (char *)v15;
            v7 = v16;
          }
          v13 = &v6[16 * v7];
          *(_QWORD *)v13 = v11;
          *((_QWORD *)v13 + 1) = v12;
          v5 = ++v16;
          *(_DWORD *)(v11 + 72) = v4;
        }
        ++v4;
      }
      while (v5);
      v14 = v15;
      *(_DWORD *)(a1 + 68) = 0;
      *(_BYTE *)(a1 + 64) = 1;
      if (v14 != v18)
        free(v14);
    }
  }
}

_QWORD *llvm::VPlanPredicator::getOrCreateNotPredicate(llvm::VPlanPredicator *this, llvm::VPBasicBlock *a2, llvm::VPBasicBlock *a3)
{
  _QWORD *v5;
  llvm::VPBasicBlock **v6;
  llvm::VPBasicBlock *v7;
  llvm::VPBasicBlock **v8;
  uint64_t v9;
  llvm::VPBasicBlock *v10;
  uint64_t v11;
  unsigned __int8 *v13;

  if (*((_DWORD *)a2 + 28) == 1)
    v5 = (_QWORD *)**((_QWORD **)a2 + 13);
  else
    v5 = 0;
  v6 = (llvm::VPBasicBlock **)*((_QWORD *)a2 + 9);
  v7 = *v6;
  if (*v6 != a3)
  {
    v8 = v6 + 1;
    v9 = 8 * *((unsigned int *)a2 + 20) - 8;
    do
    {
      v10 = *v8++;
      v9 -= 8;
    }
    while (v10 != a3);
    if (v7 != a3)
    {
      v13 = 0;
      v5 = sub_1C63D587C((uint64_t *)this + 11, (uint64_t)v5, &v13);
      if (v13)
        llvm::MetadataTracking::untrack((uint64_t)&v13, v13);
    }
  }
  if (*((_DWORD *)a2 + 40) == 1)
  {
    v11 = **((_QWORD **)a2 + 19);
    if (v11)
      return sub_1C63E7EB8((uint64_t *)this + 11, v11, (uint64_t)v5, 0);
  }
  return v5;
}

BOOL llvm::VPlanPredicator::getEdgeTypeBetween(llvm::VPlanPredicator *this, llvm::VPBlockBase *a2, llvm::VPBlockBase *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _BOOL8 result;

  v3 = *((unsigned int *)a2 + 20);
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = 8 * v3;
    while (*(llvm::VPBlockBase **)(*((_QWORD *)a2 + 9) + 8 * v4) != a3)
    {
      ++v4;
      v5 -= 8;
      if (!v5)
        return result;
    }
    return (_DWORD)v4 != 0;
  }
  return result;
}

BOOL sub_1C60C8C50(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v10;
  uint64_t v11;

  v10 = 0;
  v11 = a1;
  if ((sub_1C61252B8(a2, &v11, &v10) & 1) == 0)
    return 0;
  v3 = *(_QWORD *)(v10 + 8);
  if (!v3)
    return 0;
  v4 = **(_QWORD **)(v3 + 32);
  v5 = *(_QWORD **)(v4 + 48);
  v6 = *(unsigned int *)(v4 + 56);
  if ((_DWORD)v6)
  {
    v7 = 8 * v6;
    v8 = v5;
    while (*v8 != a1)
    {
      ++v8;
      v7 -= 8;
      if (!v7)
      {
        v8 = &v5[v6];
        return v6 != v8 - v5;
      }
    }
  }
  else
  {
    v8 = v5;
  }
  return v6 != v8 - v5;
}

llvm::VPlanPredicator *llvm::VPlanPredicator::VPlanPredicator(llvm::VPlanPredicator *this, llvm::VPlan *a2)
{
  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = (char *)a2 + 352;
  *((_QWORD *)this + 2) = (char *)this + 32;
  *((_QWORD *)this + 3) = 0x100000000;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_BYTE *)this + 80) = 0;
  *(_QWORD *)((char *)this + 92) = 0;
  *(_QWORD *)((char *)this + 84) = 0;
  *((_DWORD *)this + 25) = 0;
  *((_QWORD *)this + 9) = *(_QWORD *)a2;
  sub_1C60C2600((uint64_t)this + 16, 0);
  return this;
}

{
  *(_QWORD *)this = a2;
  *((_QWORD *)this + 1) = (char *)a2 + 352;
  *((_QWORD *)this + 2) = (char *)this + 32;
  *((_QWORD *)this + 3) = 0x100000000;
  *((_QWORD *)this + 5) = 0;
  *((_QWORD *)this + 6) = 0;
  *((_DWORD *)this + 14) = 0;
  *((_QWORD *)this + 8) = 0;
  *((_QWORD *)this + 9) = 0;
  *((_BYTE *)this + 80) = 0;
  *(_QWORD *)((char *)this + 92) = 0;
  *(_QWORD *)((char *)this + 84) = 0;
  *((_DWORD *)this + 25) = 0;
  *((_QWORD *)this + 9) = *(_QWORD *)a2;
  sub_1C60C2600((uint64_t)this + 16, 0);
  return this;
}

uint64_t llvm::VPlanSlp::markFailed(llvm::VPlanSlp *this)
{
  *((_BYTE *)this + 40) = 0;
  return 0;
}

void llvm::VPlanSlp::addCombined(uint64_t a1, _BYTE *a2, uint64_t a3, uint64_t a4)
{
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unsigned int v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD **v18;
  uint64_t v19;
  unsigned int v20;
  int v21;
  unsigned int v22;
  uint64_t v23;
  void *v24[2];
  _BYTE v25[32];
  _QWORD v26[2];
  _QWORD v27[5];

  v27[4] = *MEMORY[0x1E0C80C00];
  v7 = &a2[8 * a3];
  if (a3)
  {
    v8 = 8 * a3;
    v9 = 8 * a3;
    v10 = a2;
    while (1)
    {
      if (*v10)
        v11 = *v10 - 96;
      else
        v11 = 0;
      v12 = *(_QWORD *)(v11 + 16);
      v13 = v12 & 0xFFFFFFFFFFFFFFF8;
      if ((v12 & 4) != 0)
        v13 = **(_QWORD **)v13;
      if (!*(_QWORD *)(v13 + 40))
        break;
      ++v10;
      v9 -= 8;
      if (!v9)
      {
        v14 = 0;
        v15 = a2;
        do
        {
          if (*v15)
            v16 = *v15 - 96;
          else
            v16 = 0;
          v17 = *(_QWORD *)(v16 + 16);
          v18 = (_QWORD **)(v17 & 0xFFFFFFFFFFFFFFF8);
          if ((v17 & 4) != 0)
            v18 = (_QWORD **)**v18;
          v19 = *v18[5];
          if ((*(_DWORD *)(v19 + 8) & 0xFE) == 0x12)
            v19 = **(_QWORD **)(v19 + 16);
          v14 += llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v19);
          ++v15;
          v8 -= 8;
        }
        while (v8);
        goto LABEL_21;
      }
    }
  }
  else
  {
    v14 = 0;
LABEL_21:
    v20 = *(_DWORD *)(a1 + 44);
    if (v20 <= v14)
      v20 = v14;
    *(_DWORD *)(a1 + 44) = v20;
  }
  v24[0] = v25;
  v24[1] = (void *)0x400000000;
  sub_1C618A450((unsigned int *)v24, a2, v7);
  v26[0] = 0;
  if ((sub_1C60CA828(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), (uint64_t)v24, v26) & 1) == 0)
  {
    v21 = *(_DWORD *)(a1 + 8);
    v22 = *(_DWORD *)(a1 + 16);
    if (4 * v21 + 4 >= 3 * v22)
    {
      v22 *= 2;
    }
    else if (v22 + ~v21 - *(_DWORD *)(a1 + 12) > v22 >> 3)
    {
      goto LABEL_30;
    }
    sub_1C60CADA8(a1, v22);
    v26[0] = 0;
    sub_1C60CA828(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), (uint64_t)v24, v26);
LABEL_30:
    v23 = v26[0];
    ++*(_DWORD *)(a1 + 8);
    v26[0] = v27;
    v27[0] = -1;
    v26[1] = 0x400000001;
    if (*(_DWORD *)(v23 + 8) != 1 || **(_QWORD **)v23 != v27[0])
      --*(_DWORD *)(a1 + 12);
    sub_1C614D378(v23, (uint64_t)v24);
    *(_QWORD *)(v23 + 48) = a4;
  }
  if (v24[0] != v25)
    free(v24[0]);
}

uint64_t llvm::VPlanSlp::areVectorizable(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  const char *v16;
  int PrimitiveSizeInBits;
  uint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  const char *v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t i;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  uint64_t v40;
  int v41;
  BOOL v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t result;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  int v54;
  __int16 v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  int v61;
  __int16 v62;
  unint64_t v63;

  v4 = a2;
  if (a3)
  {
    v6 = 8 * a3;
    v7 = a2;
    do
    {
      v8 = *v7;
      if (!*v7 || *(_BYTE *)(v8 + 8) != 1)
        return 0;
      v9 = *(_QWORD *)(v8 - 80);
      v10 = v9 & 0xFFFFFFFFFFFFFFF8;
      if ((v9 & 4) != 0)
        v10 = **(_QWORD **)v10;
      if (!*(_QWORD *)(v10 + 40))
        return 0;
      ++v7;
      v6 -= 8;
    }
    while (v6);
  }
  if (*a2)
    v11 = *a2 - 96;
  else
    v11 = 0;
  v12 = *(_QWORD *)(v11 + 16);
  v13 = v12 & 0xFFFFFFFFFFFFFFF8;
  if ((v12 & 4) != 0)
    v13 = **(_QWORD **)v13;
  v14 = *(_QWORD *)(v13 + 40);
  v15 = *(unsigned __int8 *)(v14 + 16);
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)v14);
  if ((_DWORD)v16 == 1)
  if (a3)
  {
    v18 = 8 * a3;
    v19 = 8 * a3;
    v20 = v4;
    while (1)
    {
      if (*v20)
        v21 = *v20 - 96;
      else
        v21 = 0;
      v22 = *(_QWORD *)(v21 + 16);
      v23 = v22 & 0xFFFFFFFFFFFFFFF8;
      if ((v22 & 4) != 0)
        v23 = **(_QWORD **)v23;
      v24 = *(_QWORD *)(v23 + 40);
      if (*(unsigned __int8 *)(v24 + 16) != v15)
        return 0;
      v25 = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)v24);
      if ((_DWORD)v26 == 1)
      {
        v63 = v25;
        v25 = v63;
      }
      if (v25 != PrimitiveSizeInBits)
        return 0;
      ++v20;
      v19 -= 8;
      if (!v19)
      {
        v27 = v4;
        while (1)
        {
          v28 = *v27 ? *v27 - 96 : 0;
          if (*(_QWORD *)(v28 + 88) != *(_QWORD *)(a1 + 32))
            return 0;
          ++v27;
          v18 -= 8;
          if (!v18)
          {
            v29 = v4;
            do
            {
              v30 = *(unsigned int *)(*v29 + 24);
              if ((_DWORD)v30)
              {
                v31 = *(_QWORD **)(*v29 + 16);
                v32 = 8 * v30;
                for (i = 8; v32 != i; i += 8)
                {
                  v34 = v31[(unint64_t)i / 8];
                  if (*v31 != v34)
                    return 0;
                }
              }
              ++v29;
            }
            while (v29 != &v4[a3]);
            goto LABEL_41;
          }
        }
      }
    }
  }
LABEL_41:
  if (v15 == 61)
  {
    if (a3)
    {
      v56 = 8 * a3;
      result = 1;
      while (1)
      {
        if (*v4)
          v57 = *v4 - 96;
        else
          v57 = 0;
        v58 = *(_QWORD *)(v57 + 16);
        v59 = v58 & 0xFFFFFFFFFFFFFFF8;
        if ((v58 & 4) != 0)
          v59 = **(_QWORD **)v59;
        v60 = *(_QWORD *)(v59 + 40);
        v61 = *(unsigned __int8 *)(v60 + 16);
        if (v61 == 60 || v61 == 61)
        {
          v62 = *(_WORD *)(v60 + 18);
          if ((v62 & 0x380) != 0 || (v62 & 1) != 0)
            return 0;
        }
        else if ((v61 - 63) < 3 || (*(_WORD *)(v60 + 18) & 1) != 0)
        {
          return 0;
        }
        ++v4;
        v56 -= 8;
        if (!v56)
          return result;
      }
    }
    return 1;
  }
  if (v15 != 60)
    return 1;
  if (*v4)
    v35 = *v4 - 96;
  else
    v35 = 0;
  v36 = *(_QWORD *)(v35 + 88);
  v37 = v36 + 200;
  v38 = *(_QWORD *)(v36 + 208);
  if (v38 != v37)
  {
    v39 = 0;
    do
    {
      v40 = v38 - 24;
      if (!v38)
        v40 = 0;
      v41 = *(unsigned __int8 *)(v40 + 8);
      v42 = v41 == 2;
      v43 = v41 == 2 ? v40 : 0;
      if (!v38 || !v42)
        break;
      v44 = *(unsigned __int8 *)(v43 + 152);
      if (v44 == 32)
      {
        if (a3)
        {
          v45 = v43 + 96;
          v46 = 8 * a3;
          v47 = v4;
          while (*v47 != v45)
          {
            ++v47;
            v46 -= 8;
            if (!v46)
            {
              v47 = &v4[a3];
              break;
            }
          }
        }
        else
        {
          v47 = v4;
        }
        if (a3 != v47 - v4)
          ++v39;
      }
      if (a3 == v39)
        break;
      if (v39
        && ((v44 - 33) <= 0x28 && ((1 << (v44 - 33)) & 0x10000800001) != 0 || v44 == 5))
      {
        return 0;
      }
      v38 = *(_QWORD *)(v38 + 8);
    }
    while (v38 != v37);
  }
  if (!a3)
    return 1;
  v48 = 8 * a3;
  result = 1;
  do
  {
    if (*v4)
      v50 = *v4 - 96;
    else
      v50 = 0;
    v51 = *(_QWORD *)(v50 + 16);
    v52 = v51 & 0xFFFFFFFFFFFFFFF8;
    if ((v51 & 4) != 0)
      v52 = **(_QWORD **)v52;
    v53 = *(_QWORD *)(v52 + 40);
    v54 = *(unsigned __int8 *)(v53 + 16);
    if (v54 == 60 || v54 == 61)
    {
      v55 = *(_WORD *)(v53 + 18);
      if ((v55 & 0x380) != 0)
        return 0;
    }
    else
    {
      if ((v54 - 63) < 3)
        return 0;
      v55 = *(_WORD *)(v53 + 18);
    }
    if ((v55 & 1) != 0)
      return 0;
    ++v4;
    v48 -= 8;
  }
  while (v48);
  return result;
}

uint64_t llvm::VPlanSlp::getBest(uint64_t a1, unsigned int a2, uint64_t a3, _QWORD *a4, uint64_t a5)
{
  uint64_t v8;
  unsigned int *v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  uint64_t v21;
  unsigned int v23;
  uint64_t v24;
  int v25;
  uint64_t *v26;
  uint64_t v27;
  int v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  BOOL v34;
  _QWORD *v35;
  uint64_t v36;
  unsigned int *v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  uint64_t v41;
  _QWORD v42[5];

  v42[4] = *MEMORY[0x1E0C80C00];
  v40 = v42;
  v41 = 0x400000000;
  v8 = a4[1];
  if (v8 == *a4)
    v9 = (unsigned int *)a4 + 5;
  else
    v9 = (unsigned int *)(a4 + 2);
  v10 = *v9;
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    v12 = (unint64_t *)a4[1];
    while (*v12 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v12;
      v11 -= 8;
      if (!v11)
        goto LABEL_26;
    }
  }
  else
  {
    v12 = (unint64_t *)a4[1];
  }
  v13 = (unint64_t *)(v8 + 8 * v10);
  if (v12 == v13)
  {
LABEL_26:
    v21 = 0;
  }
  else
  {
    v14 = a2;
    if (a3)
      v15 = a3 - 96;
    else
      v15 = 0;
    v16 = *v12;
LABEL_15:
    if (v16)
      v17 = v16 - 96;
    else
      v17 = 0;
    if (sub_1C60C9624(v15, v17, a5))
    {
      v18 = v41;
      if (v41 >= (unint64_t)HIDWORD(v41))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v40, (uint64_t)v42, v41 + 1, 8);
        v18 = v41;
      }
      *((_QWORD *)v40 + v18) = v16;
      LODWORD(v41) = v41 + 1;
    }
    v19 = v12 + 1;
    while (v19 != v13)
    {
      v20 = *v19++;
      v16 = v20;
      if (v20 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v12 = v19 - 1;
        goto LABEL_15;
      }
    }
    v21 = v41;
    if ((_DWORD)v41)
    {
      if (v41 == 1)
      {
        v21 = v14;
      }
      else
      {
        v38 = v14;
        v39 = (uint64_t)a4;
        v23 = 0;
        v24 = 0;
        v25 = 1;
LABEL_34:
        v26 = (uint64_t *)v40;
        v27 = 8 * v21;
        v28 = -1;
        v29 = 1;
        do
        {
          v31 = *v26++;
          v30 = v31;
          v32 = sub_1C60C9708(a3, v31, v25, a5);
          v34 = v28 == -1 || v28 == v32;
          v29 &= v34;
          if (v32 > v23)
          {
            v24 = v30;
            v23 = v32;
          }
          v28 = v32;
          v27 -= 8;
        }
        while (v27);
        if ((v29 & 1) != 0)
        {
          while (++v25 != 5)
          {
            v21 = v41;
            if ((_DWORD)v41)
              goto LABEL_34;
          }
        }
        v35 = sub_1C477672C(v39, v24);
        v36 = *(_QWORD *)(v39 + 8);
        if (v36 == *(_QWORD *)v39)
          v37 = (unsigned int *)(v39 + 20);
        else
          v37 = (unsigned int *)(v39 + 16);
        if (v35 != (_QWORD *)(v36 + 8 * *v37))
        {
          *v35 = -2;
          ++*(_DWORD *)(v39 + 24);
        }
        v21 = v38;
      }
    }
  }
  if (v40 != v42)
    free(v40);
  return v21;
}

BOOL sub_1C60C9624(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v7;
  _BOOL8 result;
  uint64_t v9;
  BOOL v10;
  unsigned int v11;
  uint64_t v12;

  v3 = *(unsigned __int8 *)(a1 + 152);
  if (v3 != *(unsigned __int8 *)(a2 + 152))
    return 0;
  if ((v3 & 0xFE) != 0x20)
    return 1;
  v12 = 0;
  v7 = 0;
  if (sub_1C49F21C0(*(_QWORD *)a3, *(_DWORD *)(a3 + 16), a1, &v12))
    v7 = *(_QWORD *)(v12 + 8);
  v12 = 0;
  if ((sub_1C49F21C0(*(_QWORD *)a3, *(_DWORD *)(a3 + 16), a2, &v12) & 1) == 0)
    return 0;
  result = 0;
  if (v7)
  {
    v9 = *(_QWORD *)(v12 + 8);
    if (v9)
      v10 = v7 == v9;
    else
      v10 = 0;
    if (v10)
    {
      v11 = sub_1C4FA892C(v7, a1) + 1;
      return v11 == sub_1C4FA892C(v7, a2);
    }
  }
  return result;
}

BOOL sub_1C60C9708(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;

  v4 = a1 - 96;
  if (!a1)
    v4 = 0;
  if (*(_BYTE *)(a1 + 8) == 1)
    v5 = v4;
  else
    v5 = 0;
  v6 = a2 - 96;
  if (!a2)
    v6 = 0;
  if (*(_BYTE *)(a2 + 8) == 1)
    v7 = v6;
  else
    v7 = 0;
  if (v5)
    v8 = v7 == 0;
  else
    v8 = 1;
  if (v8)
    return 0;
  if (!a3)
    return sub_1C60C9624(v5, v7, a4);
  v11 = *(unsigned int *)(v5 + 56);
  if (!(_DWORD)v11)
    return 0;
  v12 = 0;
  v9 = 0;
  v13 = (a3 - 1);
  do
  {
    v14 = *(unsigned int *)(v7 + 56);
    if ((_DWORD)v14)
    {
      v15 = 0;
      v16 = 8 * v14;
      do
      {
        v9 = sub_1C60C9708(*(_QWORD *)(*(_QWORD *)(v5 + 48) + 8 * v12), *(_QWORD *)(*(_QWORD *)(v7 + 48) + v15), v13, a4)+ v9;
        v15 += 8;
      }
      while (v16 != v15);
    }
    ++v12;
  }
  while (v12 != v11);
  return v9;
}

void llvm::VPlanSlp::reorderMultiNodeOps(llvm::VPlanSlp *this@<X0>, uint64_t a2@<X8>)
{
  llvm::VPlanSlp *v2;
  unint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t **v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  unint64_t v20;
  BOOL v21;
  char *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _BYTE *v29;
  uint64_t Best;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  _DWORD *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  llvm::VPlanSlp *v46;
  void *v47;
  void *v48;
  uint64_t v49;
  _BYTE v50[32];
  _BYTE *v51;
  void *v52;
  uint64_t v53;
  int v54;
  _BYTE v55[32];
  _DWORD *v56;
  uint64_t v57;
  _QWORD v58[4];

  v2 = this;
  v58[2] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a2 = a2 + 16;
  *(_QWORD *)(a2 + 8) = 0x400000000;
  v56 = v58;
  v57 = 0x400000000;
  v4 = *((unsigned int *)this + 14);
  if (v4 < 5)
  {
    v5 = 4;
  }
  else
  {
    sub_1C60CB0A0(a2, v4);
    LODWORD(v4) = *((_DWORD *)v2 + 14);
    v5 = HIDWORD(v57);
  }
  if (v5 < v4)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, (uint64_t)v58, v4, 4);
    LODWORD(v4) = *((_DWORD *)v2 + 14);
  }
  v6 = *((_QWORD *)v2 + 6);
  v45 = (uint64_t *)a2;
  v46 = v2;
  if ((_DWORD)v4)
  {
    v7 = 56 * v4;
    v8 = (uint64_t **)(v6 + 8);
    while (1)
    {
      v9 = **v8;
      v47 = &v49;
      v49 = v9;
      v48 = (void *)0x400000001;
      v51 = *(v8 - 1);
      v52 = &v54;
      v53 = 0x400000000;
      sub_1C49F5C14((uint64_t)&v52, (uint64_t)&v47);
      v10 = *(unsigned int *)(a2 + 8);
      v11 = *(_QWORD *)a2;
      if (v10 >= *(_DWORD *)(a2 + 12))
      {
        v20 = v10 + 1;
        v21 = v11 + 56 * v10 > (unint64_t)&v51;
        if (v11 <= (unint64_t)&v51 && v21)
        {
          v22 = (char *)&v51 - v11;
          sub_1C60CB0A0(a2, v20);
          v11 = *(_QWORD *)a2;
          v12 = &v22[*(_QWORD *)a2];
          goto LABEL_10;
        }
        sub_1C60CB0A0(a2, v20);
        v11 = *(_QWORD *)a2;
      }
      v12 = (char *)&v51;
LABEL_10:
      v13 = (_QWORD *)(v11 + 56 * *(unsigned int *)(a2 + 8));
      *v13 = *(_QWORD *)v12;
      v13[2] = 0x400000000;
      v13[1] = v13 + 3;
      v14 = (uint64_t)(v13 + 1);
      if (*((_DWORD *)v12 + 4))
        sub_1C614D378(v14, (uint64_t)(v12 + 8));
      ++*(_DWORD *)(a2 + 8);
      if (v52 != &v54)
        free(v52);
      if (v47 != &v49)
        free(v47);
      v15 = **v8;
      if (v15)
        v16 = v15 - 96;
      else
        v16 = 0;
      v17 = *(unsigned __int8 *)(v16 + 152);
      v18 = v57;
      if (v17 == 32)
        v19 = 1;
      else
        v19 = 2;
      if (v57 >= (unint64_t)HIDWORD(v57))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v56, (uint64_t)v58, v57 + 1, 4);
        v18 = v57;
      }
      v56[v18] = v19;
      LODWORD(v57) = v57 + 1;
      v8 += 7;
      v7 -= 56;
      if (!v7)
      {
        v6 = *((_QWORD *)v2 + 6);
        break;
      }
    }
  }
  v44 = *(unsigned int *)(v6 + 16);
  if (v44 >= 2)
  {
    v23 = 1;
    while (1)
    {
      v51 = v55;
      v52 = v55;
      v53 = 4;
      v54 = 0;
      v24 = *((_DWORD *)v2 + 14);
      if (v24)
      {
        v25 = *((_QWORD *)v2 + 6);
        v26 = v25 + 56 * v24;
        v27 = v25 + 8;
        do
        {
          v28 = v27 - 8;
          v47 = *(void **)(v27 - 8);
          v48 = v50;
          v49 = 0x400000000;
          v29 = v50;
          if (*(_DWORD *)(v27 + 8))
          {
            sub_1C49F5C14((uint64_t)&v48, v27);
            v29 = v48;
          }
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v51, *(_QWORD *)&v29[8 * v23]);
          Best = (uint64_t)v48;
          if (v48 != v50)
            free(v48);
          v27 += 56;
        }
        while (v28 + 56 != v26);
        v31 = *((unsigned int *)v2 + 14);
        if ((_DWORD)v31)
          break;
      }
LABEL_49:
      if (v52 != v51)
        free(v52);
      if (++v23 == v44)
        goto LABEL_52;
    }
    v32 = 0;
    v33 = 0;
    v34 = 0;
    v35 = 56 * v31;
    while (1)
    {
      v36 = v56[v32];
      if (v36)
        break;
LABEL_45:
      ++v34;
      v33 += 56;
      ++v32;
      if (v35 == v33)
        goto LABEL_49;
    }
    Best = llvm::VPlanSlp::getBest(Best, v36, *(_QWORD *)(*(_QWORD *)(*v45 + v33 + 8) + 8 * (v23 - 1)), &v51, *((_QWORD *)v2 + 3));
    v38 = v37;
    v39 = *v45;
    v40 = *v45 + v33;
    v41 = (_QWORD *)(v40 + 8);
    if (v37)
    {
      v42 = (_DWORD *)(v39 + 56 * v34 + 16);
      v43 = *(unsigned int *)(v40 + 16);
      if (v43 < *(unsigned int *)(v40 + 20))
      {
LABEL_44:
        *(_QWORD *)(*v41 + 8 * v43) = v38;
        ++*v42;
        v2 = v46;
        goto LABEL_45;
      }
    }
    else
    {
      *((_BYTE *)v2 + 40) = 0;
      v43 = *(unsigned int *)(v40 + 16);
      v42 = (_DWORD *)(v40 + 16);
      if (v43 < *(unsigned int *)(v40 + 20))
        goto LABEL_44;
    }
    Best = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v41, v39 + v33 + 24, v43 + 1, 8);
    v43 = *v42;
    goto LABEL_44;
  }
LABEL_52:
  if (v56 != (_DWORD *)v58)
    free(v56);
}

llvm *llvm::VPlanSlp::dumpBundle(llvm *a1, _QWORD *a2, uint64_t a3)
{
  llvm *v5;
  uint64_t v6;
  llvm *result;
  _BYTE *v8;
  uint64_t i;
  uint64_t v10;
  unint64_t v11;
  llvm::Value *v12;
  uint64_t v13;
  const char *v14;
  size_t v15;
  llvm *v16;
  uint64_t v17;

  v5 = llvm::dbgs(a1);
  v6 = *((_QWORD *)v5 + 4);
  if ((unint64_t)(*((_QWORD *)v5 + 3) - v6) <= 5)
  {
    v5 = llvm::raw_ostream::write(v5, " Ops: ", 6uLL);
    if (!a3)
      goto LABEL_3;
    goto LABEL_6;
  }
  *(_WORD *)(v6 + 4) = 8250;
  *(_DWORD *)v6 = 1936740128;
  *((_QWORD *)v5 + 4) += 6;
  if (a3)
  {
LABEL_6:
    for (i = 8 * a3; i; i -= 8)
    {
      if (!*a2)
        goto LABEL_11;
      v10 = *(_QWORD *)(*a2 - 80);
      v11 = v10 & 0xFFFFFFFFFFFFFFF8;
      if ((v10 & 4) != 0)
        v11 = **(_QWORD **)v11;
      v12 = *(llvm::Value **)(v11 + 40);
      if (v12)
      {
        v16 = llvm::dbgs(v5);
        llvm::Value::print(v12, v16, 0);
        v17 = *((_QWORD *)v16 + 4);
        if ((unint64_t)(*((_QWORD *)v16 + 3) - v17) > 2)
        {
          *(_BYTE *)(v17 + 2) = 32;
          *(_WORD *)v17 = 31776;
          *((_QWORD *)v16 + 4) += 3;
          goto LABEL_16;
        }
        v5 = v16;
        v14 = " | ";
        v15 = 3;
      }
      else
      {
LABEL_11:
        v5 = llvm::dbgs(v5);
        v13 = *((_QWORD *)v5 + 4);
        if ((unint64_t)(*((_QWORD *)v5 + 3) - v13) > 0xA)
        {
          *(_DWORD *)(v13 + 7) = 545005682;
          *(_QWORD *)v13 = *(_QWORD *)" nullptr | ";
          *((_QWORD *)v5 + 4) += 11;
          goto LABEL_16;
        }
        v14 = " nullptr | ";
        v15 = 11;
      }
      v5 = llvm::raw_ostream::write(v5, v14, v15);
LABEL_16:
      ++a2;
    }
  }
LABEL_3:
  result = llvm::dbgs(v5);
  v8 = (_BYTE *)*((_QWORD *)result + 4);
  if (*((_BYTE **)result + 3) == v8)
    return llvm::raw_ostream::write(result, "\n", 1uLL);
  *v8 = 10;
  ++*((_QWORD *)result + 4);
  return result;
}

uint64_t llvm::VPlanSlp::buildGraph(uint64_t a1, _BYTE *a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  unsigned int v14;
  _QWORD *v15;
  int v16;
  char *v17;
  char *v18;
  void **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t *v38;
  uint64_t v39;
  int v40;
  char *v41;
  int v42;
  uint64_t *v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  void *v49;
  char *v50;
  char *v51;
  uint64_t v52;
  llvm::VPValue *v53;
  unint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  char *v58;
  unsigned int v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t *v72;
  uint64_t v73;
  unsigned __int8 *v74;
  uint64_t v76;
  void *v77;
  _QWORD *v78;
  unsigned __int8 *v79;
  unsigned __int8 *v80;
  unint64_t v81;
  void *v82;
  uint64_t v83;
  _BYTE v84[224];
  _QWORD *v85;
  uint64_t v86;
  _QWORD v87[6];

  v87[4] = *MEMORY[0x1E0C80C00];
  v82 = v84;
  v83 = 0x400000000;
  sub_1C618A450((unsigned int *)&v82, a2, &a2[8 * a3]);
  v85 = 0;
  if ((sub_1C60CA828(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), (uint64_t)&v82, &v85) & 1) != 0)
    v6 = v85;
  else
    v6 = (_QWORD *)(*(_QWORD *)a1 + 56 * *(unsigned int *)(a1 + 16));
  if (v82 != v84)
    free(v82);
  if (v6 != (_QWORD *)(*(_QWORD *)a1 + 56 * *(unsigned int *)(a1 + 16)))
    return v6[6];
  if ((llvm::VPlanSlp::areVectorizable(a1, a2, a3) & 1) == 0)
  {
    v7 = 0;
    *(_BYTE *)(a1 + 40) = 0;
    return v7;
  }
  if (*(_QWORD *)a2)
    v8 = *(_QWORD *)a2 - 96;
  else
    v8 = 0;
  v9 = *(unsigned __int8 *)(v8 + 152);
  v10 = 8 * a3;
  if (a3)
  {
    v11 = 8 * a3;
    v12 = a2;
    while (1)
    {
      v13 = *v12 ? *v12 - 96 : 0;
      if (v9 != *(unsigned __int8 *)(v13 + 152))
        break;
      ++v12;
      v11 -= 8;
      if (!v11)
        goto LABEL_19;
    }
    v14 = 0;
  }
  else
  {
LABEL_19:
    v14 = v9;
  }
  v15 = v87;
  v85 = v87;
  v86 = 0x400000000;
  v78 = v87;
  if (v9 <= 0x1E && ((1 << v9) & 0x70066000) != 0)
  {
    v16 = *(unsigned __int8 *)(a1 + 288);
    *(_BYTE *)(a1 + 288) = 1;
    sub_1C60CA598(&v82, a2, a3);
    if ((_DWORD)v83)
    {
      v17 = (char *)v82;
      v18 = (char *)v82 + 48 * v83;
      v19 = (void **)(a1 + 48);
      v77 = (void *)(a1 + 64);
      while (1)
      {
        v20 = *((unsigned int *)v17 + 2);
        v21 = **(_QWORD **)v17;
        v22 = v21 ? v21 - 96 : 0;
        v23 = *(unsigned __int8 *)(v22 + 152);
        if ((_DWORD)v20)
          break;
LABEL_36:
        if (*(_QWORD *)a2)
          v27 = *(_QWORD *)a2 - 96;
        else
          v27 = 0;
        v28 = *(unsigned __int8 *)(v27 + 152);
        if (a3)
        {
          v29 = 8 * a3;
          v30 = a2;
          while (1)
          {
            v31 = *v30 ? *v30 - 96 : 0;
            if (v28 != *(unsigned __int8 *)(v31 + 152))
              break;
            ++v30;
            v29 -= 8;
            if (!v29)
              goto LABEL_46;
          }
LABEL_55:
          v35 = operator new();
          v80 = 0;
          sub_1C63D68EC(v35, 0, 0, 0, &v80);
          if (v80)
            llvm::MetadataTracking::untrack((uint64_t)&v80, v80);
          v36 = v86;
          if (v86 >= (unint64_t)HIDWORD(v86))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v85, (uint64_t)v78, v86 + 1, 8);
            v36 = v86;
          }
          v85[v36] = v35 + 96;
          LODWORD(v86) = v86 + 1;
          v37 = *(_DWORD *)(a1 + 56);
          if (v37 >= *(_DWORD *)(a1 + 60))
          {
            v81 = 0;
            v41 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1 + 48, 0, 56, &v81);
            v42 = *(_DWORD *)(a1 + 56);
            v76 = (uint64_t)v41;
            v43 = (uint64_t *)&v41[56 * v42];
            *v43 = v35;
            v43[2] = 0x400000000;
            v43[1] = (uint64_t)(v43 + 3);
            v44 = (uint64_t)(v43 + 1);
            if (*((_DWORD *)v17 + 2))
              sub_1C49F5C14(v44, (uint64_t)v17);
            sub_1C60CB10C((uint64_t *)(a1 + 48), v76);
            v45 = v81;
            if (*v19 != v77)
              free(*v19);
            *(_QWORD *)(a1 + 48) = v76;
            v40 = *(_DWORD *)(a1 + 56) + 1;
            *(_DWORD *)(a1 + 60) = v45;
          }
          else
          {
            v38 = (uint64_t *)((char *)*v19 + 56 * v37);
            *v38 = v35;
            v38[2] = 0x400000000;
            v38[1] = (uint64_t)(v38 + 3);
            v39 = (uint64_t)(v38 + 1);
            if (*((_DWORD *)v17 + 2))
              sub_1C49F5C14(v39, (uint64_t)v17);
            v40 = *(_DWORD *)(a1 + 56) + 1;
          }
          *(_DWORD *)(a1 + 56) = v40;
          goto LABEL_53;
        }
LABEL_46:
        if (v23 != v28)
          goto LABEL_55;
        v32 = llvm::VPlanSlp::buildGraph(a1, *(_QWORD *)v17, v20);
        if (v32)
          v33 = v32 + 96;
        else
          v33 = 0;
        v34 = v86;
        if (v86 >= (unint64_t)HIDWORD(v86))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v85, (uint64_t)v78, v86 + 1, 8);
          v34 = v86;
        }
        v85[v34] = v33;
        LODWORD(v86) = v86 + 1;
LABEL_53:
        v17 += 48;
        if (v17 == v18)
          goto LABEL_69;
      }
      v24 = 8 * v20;
      v25 = *(uint64_t **)v17;
      while (1)
      {
        v26 = *v25 ? *v25 - 96 : 0;
        if (v23 != *(unsigned __int8 *)(v26 + 152))
          goto LABEL_55;
        ++v25;
        v24 -= 8;
        if (!v24)
          goto LABEL_36;
      }
    }
LABEL_69:
    sub_1C618F3AC((char **)&v82);
    if (!v16)
    {
      *(_BYTE *)(a1 + 288) = 0;
      llvm::VPlanSlp::reorderMultiNodeOps((llvm::VPlanSlp *)a1, (uint64_t)&v82);
      v46 = *(unsigned int *)(a1 + 56);
      if ((_DWORD)v46)
      {
        v47 = *(_QWORD *)(a1 + 48);
        v48 = 56 * v46;
        do
        {
          v49 = *(void **)(v47 + v48 - 48);
          if ((void *)(v47 + v48 - 32) != v49)
            free(v49);
          v48 -= 56;
        }
        while (v48);
      }
      *(_DWORD *)(a1 + 56) = 0;
      v50 = (char *)v82;
      if ((_DWORD)v83)
      {
        v51 = (char *)v82 + 56 * v83;
        do
        {
          v52 = llvm::VPlanSlp::buildGraph(a1, *((_QWORD *)v50 + 1), *((unsigned int *)v50 + 4));
          if (v52)
            v53 = (llvm::VPValue *)(v52 + 96);
          else
            v53 = 0;
          llvm::VPValue::replaceAllUsesWith(*(_QWORD *)v50 + 96, v53);
          if ((_DWORD)v86)
          {
            v54 = 0;
            v55 = 8 * v86;
            do
            {
              if (*(_QWORD *)v50)
                v56 = *(_QWORD *)v50 + 96;
              else
                v56 = 0;
              if (v85[v54 / 8] == v56)
                v85[v54 / 8] = v53;
              v54 += 8;
            }
            while (v55 != v54);
          }
          if (*(_QWORD *)v50)
            (*(void (**)(_QWORD))(**(_QWORD **)v50 + 8))(*(_QWORD *)v50);
          *(_QWORD *)v50 = v52;
          v50 += 56;
        }
        while (v50 != v51);
        v50 = (char *)v82;
        if ((_DWORD)v83)
        {
          v57 = 56 * v83;
          do
          {
            v58 = *(char **)&v50[v57 - 48];
            if (&v50[v57 - 32] != v58)
              free(v58);
            v57 -= 56;
          }
          while (v57);
          v50 = (char *)v82;
        }
      }
      if (v50 != v84)
        free(v50);
    }
    goto LABEL_118;
  }
  if (v14 != 32)
  {
    sub_1C60CA598(&v82, a2, a3);
    if ((_DWORD)v83)
    {
      v63 = (char *)v82;
      v64 = (char *)v82 + 48 * v83;
      do
      {
        v65 = llvm::VPlanSlp::buildGraph(a1, *(_QWORD *)v63, *((unsigned int *)v63 + 2));
        if (v65)
          v66 = v65 + 96;
        else
          v66 = 0;
        v67 = v86;
        if (v86 >= (unint64_t)HIDWORD(v86))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v85, (uint64_t)v87, v86 + 1, 8);
          v67 = v86;
        }
        v85[v67] = v66;
        LODWORD(v86) = v86 + 1;
        v63 += 48;
      }
      while (v63 != v64);
    }
    sub_1C618F3AC((char **)&v82);
    goto LABEL_118;
  }
  if (a3)
  {
    v59 = 0;
    v60 = a2;
    do
    {
      if (*v60)
        v61 = *v60 - 96;
      else
        v61 = 0;
      v62 = **(_QWORD **)(v61 + 48);
      if (v59 >= HIDWORD(v86))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v85, (uint64_t)v78, v59 + 1, 8);
        v59 = v86;
      }
      v85[v59] = v62;
      v59 = v86 + 1;
      LODWORD(v86) = v86 + 1;
      ++v60;
      v10 -= 8;
    }
    while (v10);
LABEL_118:
    if (v14 == 32)
    {
      LOBYTE(v14) = 72;
      v15 = v78;
    }
    else
    {
      v15 = v78;
      if (v14 == 33)
        LOBYTE(v14) = 73;
    }
    goto LABEL_122;
  }
  LOBYTE(v14) = 72;
LABEL_122:
  if (*(_BYTE *)(a1 + 40))
  {
    if (*(_QWORD *)a2)
      v68 = *(_QWORD *)a2 - 96;
    else
      v68 = 0;
    v69 = *(_QWORD *)(v68 + 16);
    v70 = v69 & 0xFFFFFFFFFFFFFFF8;
    if ((v69 & 4) != 0)
      v70 = **(_QWORD **)v70;
    v71 = *(_QWORD *)(v70 + 40);
    v7 = operator new();
    v72 = v85;
    v73 = v86;
    v74 = *(unsigned __int8 **)(v71 + 48);
    v79 = v74;
    if (v74)
      llvm::MetadataTracking::track((uint64_t)&v79, v74, 2);
    sub_1C60892B0(v7, v14, v72, v73, &v79);
    if (v79)
      llvm::MetadataTracking::untrack((uint64_t)&v79, v79);
    *(_QWORD *)(v7 + 136) = v71;
    llvm::VPlanSlp::addCombined(a1, a2, a3, v7);
  }
  else
  {
    v7 = 0;
    *(_BYTE *)(a1 + 40) = 0;
  }
  if (v85 != v15)
    free(v85);
  return v7;
}

void sub_1C60CA598(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  unsigned int i;
  void *v9[2];
  _QWORD v10[5];

  v10[4] = *MEMORY[0x1E0C80C00];
  *a1 = a1 + 2;
  a1[1] = 0x400000000;
  if (*a2)
    v6 = *a2 - 96;
  else
    v6 = 0;
  if (*(_BYTE *)(v6 + 152) == 33)
  {
    sub_1C60CA76C(v9, a2, a3, 0);
    sub_1C60CA6BC((uint64_t)a1, (unint64_t)v9);
    if (v9[0] != v10)
      free(v9[0]);
  }
  else
  {
    v7 = *(_DWORD *)(v6 + 56);
    if (v7)
    {
      for (i = 0; i != v7; ++i)
      {
        sub_1C60CA76C(v9, a2, a3, i);
        sub_1C60CA6BC((uint64_t)a1, (unint64_t)v9);
        if (v9[0] != v10)
          free(v9[0]);
      }
    }
  }
}

_QWORD *sub_1C60CA6BC(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *result;
  unint64_t v7;
  unint64_t v8;
  unint64_t v10;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v7 = v4 + 1;
    v8 = v5 + 48 * v4;
    if (v5 <= a2 && v8 > a2)
    {
      v10 = a2 - v5;
      sub_1C50AFBD0(a1, v7);
      v5 = *(_QWORD *)a1;
      a2 = *(_QWORD *)a1 + v10;
    }
    else
    {
      sub_1C50AFBD0(a1, v7);
      v5 = *(_QWORD *)a1;
    }
  }
  result = (_QWORD *)(v5 + 48 * *(unsigned int *)(a1 + 8));
  *result = result + 2;
  result[1] = 0x400000000;
  if (*(_DWORD *)(a2 + 8))
    result = (_QWORD *)sub_1C614D378((uint64_t)result, a2);
  ++*(_DWORD *)(a1 + 8);
  return result;
}

_QWORD *sub_1C60CA76C(_QWORD *result, _QWORD *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v4 = (uint64_t)(result + 2);
  *result = result + 2;
  result[1] = 0x400000000;
  if (a3)
  {
    v6 = (uint64_t)result;
    v7 = 0;
    v8 = 8 * a3;
    v9 = a4;
    do
    {
      if (*a2)
        v10 = *a2 - 96;
      else
        v10 = 0;
      v11 = *(_QWORD *)(*(_QWORD *)(v10 + 48) + 8 * v9);
      if (v7 >= *(_DWORD *)(v6 + 12))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod(v6, v4, v7 + 1, 8);
        v7 = *(_DWORD *)(v6 + 8);
      }
      *(_QWORD *)(*(_QWORD *)v6 + 8 * v7) = v11;
      v7 = *(_DWORD *)(v6 + 8) + 1;
      *(_DWORD *)(v6 + 8) = v7;
      ++a2;
      v8 -= 8;
    }
    while (v8);
  }
  return result;
}

uint64_t sub_1C60CA828(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  _QWORD *v7;
  uint64_t v8;
  unsigned __int8 v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  int v76;
  _QWORD *v77;
  int i;
  uint64_t v79;
  int v80;
  BOOL v81;
  unsigned int v82;
  _QWORD *v84;
  int v85;
  unint64_t v86;
  uint64_t __n;
  _QWORD *v88;
  uint64_t v90[4];
  void *__s2;
  uint64_t v92;
  _QWORD v93[6];

  v93[4] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    __s2 = v93;
    v93[0] = -1;
    v92 = 0x400000001;
    v90[0] = -2;
    v7 = *(_QWORD **)a3;
    v8 = *(unsigned int *)(a3 + 8);
    v9 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
    if ((v9 & 1) == 0)
    {
      v84 = *(_QWORD **)a3;
      v85 = __cxa_guard_acquire(&qword_1ED7EAC88);
      v7 = v84;
      if (v85)
      {
        v86 = llvm::hashing::detail::fixed_seed_override;
        if (!llvm::hashing::detail::fixed_seed_override)
          v86 = 0xFF51AFD7ED558CCDLL;
        qword_1ED7EAC80 = v86;
        __cxa_guard_release(&qword_1ED7EAC88);
        v7 = v84;
      }
    }
    v10 = 8 * v8;
    if (v8 > 8)
    {
      v13 = 0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69 * (qword_1ED7EAC80 ^ 0xB492B66FBE98F273)) ^ ((0x9DDFEA08EB382D69
                                                                                 * (qword_1ED7EAC80 ^ 0xB492B66FBE98F273)) >> 47) ^ 0xB492B66FBE98F273);
      v14 = __ROR8__(qword_1ED7EAC80 ^ 0xB492B66FBE98F273, 49);
      v15 = qword_1ED7EAC80 ^ ((unint64_t)qword_1ED7EAC80 >> 47);
      v16 = qword_1ED7EAC80 ^ (((0x9DDFEA08EB382D69 * (v15 ^ (0xB492B66FBE98F273 * qword_1ED7EAC80))) ^ qword_1ED7EAC80) >> 47) ^ (0x9DDFEA08EB382D69 * (v15 ^ (0xB492B66FBE98F273 * qword_1ED7EAC80)));
      v17 = v7[6];
      v18 = v7[7];
      v19 = v7[1];
      v20 = v14 + qword_1ED7EAC80 + v19;
      v21 = v7[5];
      v22 = v21
          + v14
          - 0x4B6D499041670D8DLL * __ROR8__(v17 + qword_1ED7EAC80 - 0x4B6D499041670D8DLL * qword_1ED7EAC80, 42);
      v23 = *v7 - 0x6D8ED9027DD26057 * qword_1ED7EAC80;
      v25 = v7[2];
      v24 = v7[3];
      v26 = v23 + v19 + v25;
      v27 = 0x9DDFEA08EB382D69 * ((0x9DDFEA08EB382D69 * v16) ^ ((0x9DDFEA08EB382D69 * v16) >> 47));
      v28 = (0xB492B66FBE98F273 * __ROR8__(v20, 37)) ^ v27;
      v29 = __ROR8__(v26, 44) + v23 + __ROR8__(v28 + v15 + v23 + v24, 21);
      v30 = __ROR8__(v15 - 0x622015F714C7D297 * (v13 ^ (v13 >> 47)), 33);
      v31 = v10 & 0x7FFFFFFC0;
      v32 = 0xB492B66FBE98F273 * v30;
      v33 = v26 + v24;
      v34 = v27 + v7[4] - 0x4B6D499041670D8DLL * v30;
      v35 = v21 + v17 + v34;
      v36 = __ROR8__(v35, 44) + v34 + __ROR8__(v22 + v25 + v18 + v34, 21);
      v37 = v35 + v18;
      v38 = v31 - 64;
      if (v31 == 64)
      {
        v39 = v28;
      }
      else
      {
        v40 = v7 + 15;
        do
        {
          v41 = *(v40 - 6);
          v42 = __ROR8__(v22 + v32 + v33 + v41, 37);
          v44 = *(v40 - 2);
          v43 = *(v40 - 1);
          v22 = v44 + v33 - 0x4B6D499041670D8DLL * __ROR8__(v29 + v22 + v43, 42);
          v45 = v37 + v28;
          v46 = *(v40 - 7) - 0x4B6D499041670D8DLL * v29;
          v47 = *(v40 - 4);
          v48 = *(v40 - 5);
          v49 = v46 + v41 + v48;
          v39 = (0xB492B66FBE98F273 * v42) ^ v36;
          v32 = 0xB492B66FBE98F273 * __ROR8__(v45, 33);
          v29 = __ROR8__(v49, 44) + v46 + __ROR8__(v39 + v37 + v46 + v47, 21);
          v33 = v49 + v47;
          v50 = v32 + v36 + *(v40 - 3);
          v51 = *v40;
          v40 += 8;
          v52 = __ROR8__(v22 + v48 + v50 + v51, 21);
          v53 = v44 + v43 + v50;
          v36 = __ROR8__(v53, 44) + v50 + v52;
          v37 = v53 + v51;
          v28 = v39;
          v38 -= 64;
        }
        while (v38);
      }
      if ((v8 & 7) != 0)
      {
        v54 = &v7[v8];
        v55 = *(v54 - 7);
        v56 = *(v54 - 2);
        v57 = *(v54 - 1);
        v58 = v39 + v37;
        v59 = (0xB492B66FBE98F273 * __ROR8__(v22 + v33 + v32 + v55, 37)) ^ v36;
        v61 = *(v54 - 4);
        v60 = *(v54 - 3);
        v22 = v60 + v33 - 0x4B6D499041670D8DLL * __ROR8__(v22 + v29 + v56, 42);
        v62 = v59 + v37;
        v63 = *(v54 - 8) - 0x4B6D499041670D8DLL * v29;
        v66 = v54 - 6;
        v65 = *(v54 - 6);
        v64 = v66[1];
        v67 = v63 + v55 + v65;
        v32 = 0xB492B66FBE98F273 * __ROR8__(v58, 33);
        v29 = __ROR8__(v67, 44) + v63 + __ROR8__(v62 + v63 + v64, 21);
        v33 = v67 + v64;
        v68 = v32 + v36 + v61;
        v69 = v60 + v56 + v68;
        v36 = __ROR8__(v69, 44) + v68 + __ROR8__(v22 + v65 + v68 + v57, 21);
        v37 = v69 + v57;
        v39 = v59;
      }
      v70 = 0x9DDFEA08EB382D69
          * (v36 ^ ((0x9DDFEA08EB382D69 * (v29 ^ v36)) >> 47) ^ (0x9DDFEA08EB382D69 * (v29 ^ v36)));
      v71 = v32 - 0x5B6A4C820B386C68 * v8 - 0x622015F714C7D297 * (v70 ^ (v70 >> 47));
      v72 = 0x9DDFEA08EB382D69
          * ((v39
            - 0x4B6D499041670D8DLL * (v22 ^ (v22 >> 47))
            - 0x622015F714C7D297
            * ((0x9DDFEA08EB382D69
              * (v37 ^ ((0x9DDFEA08EB382D69 * (v33 ^ v37)) >> 47) ^ (0x9DDFEA08EB382D69 * (v33 ^ v37)))) ^ ((0x9DDFEA08EB382D69 * (v37 ^ ((0x9DDFEA08EB382D69 * (v33 ^ v37)) >> 47) ^ (0x9DDFEA08EB382D69 * (v33 ^ v37)))) >> 47))) ^ v71);
      v11 = 0x9DDFEA08EB382D69
          * ((0x9DDFEA08EB382D69 * (v71 ^ (v72 >> 47) ^ v72)) ^ ((0x9DDFEA08EB382D69 * (v71 ^ (v72 >> 47) ^ v72)) >> 47));
    }
    else
    {
      LODWORD(v11) = sub_1C49CE808(v7, v10, qword_1ED7EAC80);
    }
    v73 = 0;
    v74 = (a2 - 1) & v11;
    v75 = *(unsigned int *)(a3 + 8);
    v88 = *(_QWORD **)a3;
    v76 = v92;
    v77 = __s2;
    __n = 8 * v92;
    for (i = 1; ; ++i)
    {
      v79 = a1 + 56 * v74;
      v80 = *(_DWORD *)(v79 + 8);
      if ((_DWORD)v75 == v80 && !memcmp(v88, *(const void **)v79, 8 * v75))
      {
        v12 = 1;
        goto LABEL_27;
      }
      if (v80 == v76 && !memcmp(*(const void **)v79, v77, __n))
        break;
      v81 = v80 == 1 && memcmp(*(const void **)v79, v90, 8uLL) == 0;
      if (v81 && v73 == 0)
        v73 = a1 + 56 * v74;
      v82 = v74 + i;
      v74 = v82 & (a2 - 1);
    }
    v12 = 0;
    if (v73)
      v79 = v73;
LABEL_27:
    *a4 = v79;
    if (v77 != v93)
      free(v77);
  }
  else
  {
    v12 = 0;
    *a4 = 0;
  }
  return v12;
}

void sub_1C60CADA8(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  _QWORD v17[4];
  void *__s2;
  uint64_t v19;
  _QWORD v20[5];

  v20[4] = *MEMORY[0x1E0C80C00];
  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  *(_QWORD *)a1 = operator new(56 * v8, (std::align_val_t)8uLL);
  if (v4)
  {
    sub_1C60CAFD4(a1);
    __s2 = v20;
    v20[0] = -1;
    v19 = 0x400000001;
    v15 = v17;
    v17[0] = -2;
    v16 = 0x400000001;
    if ((_DWORD)v3)
    {
      v9 = 56 * v3;
      v10 = v4;
      do
      {
        v11 = *(unsigned int *)(v10 + 8);
        if ((_DWORD)v11 != (_DWORD)v19 || (v12 = *(void **)v10, memcmp(*(const void **)v10, __s2, 8 * v11)))
        {
          if ((_DWORD)v11 != (_DWORD)v16 || (v12 = *(void **)v10, memcmp(*(const void **)v10, v15, 8 * v11)))
          {
            v14 = 0;
            sub_1C60CA828(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v10, &v14);
            v13 = v14;
            sub_1C614D378(v14, v10);
            *(_QWORD *)(v13 + 48) = *(_QWORD *)(v10 + 48);
            ++*(_DWORD *)(a1 + 8);
            v12 = *(void **)v10;
          }
        }
        if ((void *)(v10 + 16) != v12)
          free(v12);
        v10 += 56;
        v9 -= 56;
      }
      while (v9);
      if (v15 != v17)
        free(v15);
    }
    if (__s2 != v20)
      free(__s2);
    JUMPOUT(0x1CAA32FB4);
  }
  sub_1C60CAFD4(a1);
}

void sub_1C60CAFD4(uint64_t a1)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;
  void *v4;
  uint64_t v5;
  _QWORD v6[5];

  v6[4] = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 8) = 0;
  v4 = v6;
  v6[0] = -1;
  v5 = 0x400000001;
  v1 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v1)
  {
    v2 = *(_QWORD **)a1;
    v3 = 56 * v1;
    do
    {
      *v2 = v2 + 2;
      v2[1] = 0x400000000;
      if ((_DWORD)v5)
        v2 = (_QWORD *)sub_1C49F5C14((uint64_t)v2, (uint64_t)&v4);
      v2 += 7;
      v3 -= 56;
    }
    while (v3);
    if (v4 != v6)
      free(v4);
  }
}

void sub_1C60CB0A0(uint64_t a1, unint64_t a2)
{
  void *v3;
  int v4;
  unint64_t v5;

  v5 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 56, &v5);
  sub_1C60CB10C((uint64_t *)a1, (uint64_t)v3);
  v4 = v5;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v4;
}

void sub_1C60CB10C(uint64_t *a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    v4 = *a1 + 56 * v2;
    v5 = a2 + 24;
    v6 = *a1 + 8;
    do
    {
      v7 = v6 - 8;
      *(_QWORD *)(v5 - 24) = *(_QWORD *)(v6 - 8);
      *(_QWORD *)(v5 - 16) = v5;
      *(_QWORD *)(v5 - 8) = 0x400000000;
      if (*(_DWORD *)(v6 + 8))
        sub_1C614D378(v5 - 16, v6);
      v5 += 56;
      v6 += 56;
    }
    while (v7 + 56 != v4);
    v8 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v8)
    {
      v9 = *a1;
      v10 = 56 * v8;
      do
      {
        v11 = *(void **)(v9 + v10 - 48);
        if ((void *)(v9 + v10 - 32) != v11)
          free(v11);
        v10 -= 56;
      }
      while (v10);
    }
  }
}

void llvm::VPlanTransforms::VPInstructionsToVPRecipes(const llvm::Loop *a1, uint64_t *a2, uint64_t (*a3)(uint64_t, void (**)(llvm::VPValue *__hidden this)), uint64_t a4, _QWORD *a5, uint64_t a6)
{
  uint64_t *v9;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unsigned int *v23;
  void (**v24)(llvm::VPValue *__hidden);
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void (**v35)(llvm::VPValue *__hidden);
  llvm::ScalarEvolution *v36;
  uint64_t VPValueForSCEVExpr;
  uint64_t v38;
  _QWORD *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  uint64_t v49;
  uint64_t v50;
  _QWORD *v51;
  void (**v52)(llvm::VPValue *__hidden);
  uint64_t v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  llvm::VPValue *v61;
  int v62;
  uint64_t *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t **v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  unint64_t v70;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  uint64_t v74;
  uint64_t v75;
  int v76;
  unsigned int v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  uint64_t v84;
  _BOOL4 isLoopInvariant;
  int v86;
  uint64_t v87;
  uint64_t v88;
  const llvm::SCEV *SCEVIter;
  int LoopDisposition;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t (*v97)(uint64_t, void (**)(llvm::VPValue *__hidden));
  llvm::vputils **v98;
  llvm::VPValue *v99;
  uint64_t v100;
  char *v101;
  char *v102;
  uint64_t v103;
  char *v104;
  char *v105;
  uint64_t v106;
  _QWORD v107[2];
  _QWORD v108[10];
  _QWORD v109[10];
  _QWORD v110[10];
  _QWORD v111[10];
  void (**v112)(llvm::VPValue *__hidden);
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  _QWORD v116[8];

  v9 = a2;
  v116[6] = *MEMORY[0x1E0C80C00];
  v112 = *(void (***)(llvm::VPValue *__hidden))(*(_QWORD *)*a2 + 200);
  v105 = 0;
  v106 = 0;
  v104 = 0;
  sub_1C63E6C88(&v104, (uint64_t *)&v112);
  v11 = v105;
  v102 = v104;
  if (v105 == v104)
    goto LABEL_109;
  v97 = a3;
  v98 = (llvm::vputils **)v9;
  v95 = a5;
  do
  {
    v13 = *((_QWORD *)v11 - 1);
    v11 -= 8;
    v12 = v13;
    if (*(_DWORD *)(v13 + 56) && *(_DWORD *)(v12 + 80))
    {
      if (*(_BYTE *)(v12 + 8) == 1)
      {
        do
        {
          v12 = *(_QWORD *)(v12 + 200);
          if (v12)
            v14 = *(_BYTE *)(v12 + 8) == 1;
          else
            v14 = 0;
        }
        while (v14);
      }
      v15 = v12 + 200;
      v16 = *(_QWORD *)(v12 + 208);
      if (v16 != v12 + 200)
      {
        v100 = v12 + 200;
        v101 = v11;
        do
        {
          if (v16)
            v17 = v16 - 24;
          else
            v17 = 0;
          v18 = *(_QWORD *)(v17 + 16);
          v19 = v18 & 0xFFFFFFFFFFFFFFF8;
          if ((v18 & 4) != 0)
            v19 = **(_QWORD **)v19;
          v103 = *(_QWORD *)(v16 + 8);
          v20 = *(_QWORD *)(v19 + 40);
          v21 = sub_1C477672C((uint64_t)a5, v20);
          v22 = a5[1];
          if (v22 == *a5)
            v23 = (unsigned int *)a5 + 5;
          else
            v23 = (unsigned int *)(a5 + 2);
          if (v21 != (_QWORD *)(v22 + 8 * *v23))
          {
            v112 = &off_1E81ADA28;
            LOBYTE(v113) = 0;
            v114 = v116;
            v115 = 0x100000000;
            v116[1] = 0;
            v116[2] = 0;
            llvm::VPValue::replaceAllUsesWith(v19, (llvm::VPValue *)&v112);
            v28 = *(_QWORD *)(v17 + 24);
            v27 = *(_QWORD **)(v17 + 32);
            *v27 = v28;
            *(_QWORD *)(v28 + 8) = v27;
            *(_QWORD *)(v17 + 24) = 0;
            *(_QWORD *)(v17 + 32) = 0;
            (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
            llvm::VPValue::~VPValue((llvm::VPValue *)&v112);
            goto LABEL_68;
          }
          v99 = (llvm::VPValue *)v19;
          if (v16 && *(_BYTE *)(v17 + 8) == 16)
          {
            v24 = *(void (***)(llvm::VPValue *__hidden))(v17 + 136);
            v25 = v97(a4, v24);
            if (!v25)
            {
              v26 = *v9;
              v112 = v24;
              sub_1C61B6040((uint64_t *)(v26 + 184), &v112)[1] = v17 + 96;
              v11 = v101;
              goto LABEL_68;
            }
            v34 = v25;
            v35 = (void (**)(llvm::VPValue *__hidden))sub_1C63D5810(*v9, *(_QWORD *)(v25 + 16));
            VPValueForSCEVExpr = llvm::vputils::getOrCreateVPValueForSCEVExpr(*v98, *(llvm::VPlan **)(v34 + 32), (const llvm::SCEV *)a6, v36);
            v30 = operator new();
            v112 = v35;
            v113 = VPValueForSCEVExpr;
            v38 = sub_1C6089380(v30, 17, (uint64_t *)&v112, 2);
            *(_QWORD *)v38 = &off_1E81AD278;
            *(_QWORD *)(v38 + 40) = &unk_1E81AD2B8;
            *(_QWORD *)(v38 + 96) = &off_1E81ADA28;
            v39 = (_QWORD *)(v38 + 96);
            *(_BYTE *)(v38 + 104) = 0;
            *(_QWORD *)(v38 + 112) = v38 + 128;
            *(_QWORD *)(v38 + 120) = 0x100000000;
            *(_QWORD *)(v30 + 136) = v24;
            *(_QWORD *)(v30 + 144) = v30;
            sub_1C619116C(v38 + 16, v38 + 96);
            *(_QWORD *)v30 = &off_1E81AD278;
            v15 = v100;
            *(_QWORD *)(v30 + 40) = &unk_1E81AD2B8;
            a5 = v95;
            *v39 = &unk_1E81AD2D8;
            v9 = (uint64_t *)v98;
            *(_QWORD *)(v30 + 152) = v24;
            *(_QWORD *)(v30 + 160) = v34;
            *(_WORD *)(v30 + 168) = 256;
          }
          else
          {
            v29 = *(unsigned __int8 *)(v20 + 16);
            if (v20 && v29 == 60)
            {
              v30 = operator new();
              v31 = a4;
              if ((*(_BYTE *)(v20 + 16) & 0xFE) == 0x3C)
                v32 = *(_QWORD *)(v20 - 32);
              else
                v32 = 0;
              v112 = (void (**)(llvm::VPValue *__hidden))sub_1C63D5810(*v9, v32);
              v43 = v30;
              v44 = 1;
LABEL_50:
              sub_1C6089380(v43, 10, (uint64_t *)&v112, v44);
              *(_QWORD *)v30 = &off_1E81AD2F8;
              *(_QWORD *)(v30 + 40) = &unk_1E81AD338;
              *(_QWORD *)(v30 + 96) = &off_1E81ADA28;
              *(_BYTE *)(v30 + 104) = 2;
              *(_QWORD *)(v30 + 112) = v30 + 128;
              *(_QWORD *)(v30 + 120) = 0x100000000;
              *(_QWORD *)(v30 + 136) = v20;
              *(_QWORD *)(v30 + 144) = v30;
              sub_1C619116C(v30 + 16, v30 + 96);
              *(_QWORD *)v30 = &off_1E81AD2F8;
              *(_QWORD *)(v30 + 40) = &unk_1E81AD338;
              v9 = (uint64_t *)v98;
              *(_QWORD *)(v30 + 96) = &unk_1E81AD358;
              *(_QWORD *)(v30 + 152) = v20;
              *(_WORD *)(v30 + 160) = 0;
              a4 = v31;
              v15 = v100;
              goto LABEL_51;
            }
            if (v20 && v29 == 61)
            {
              v30 = operator new();
              v31 = a4;
              if ((*(_BYTE *)(v20 + 16) & 0xFE) == 0x3C)
                v33 = *(_QWORD *)(v20 - 32);
              else
                v33 = 0;
              v52 = (void (**)(llvm::VPValue *__hidden))sub_1C63D5810(*v9, v33);
              v53 = sub_1C63D5810(*v9, *(_QWORD *)(v20 - 64));
              v112 = v52;
              v113 = v53;
              v43 = v30;
              v44 = 2;
              goto LABEL_50;
            }
            if (!v20 || v29 != 62)
            {
              if (v20 && v29 == 84)
              {
                v30 = operator new();
                v45 = *(unsigned __int8 *)(v20 + 16);
                if (v45 == 84)
                {
                  v46 = 0;
                }
                else
                {
                  if (v45 == 39)
                    v46 = (*(_DWORD *)(v20 + 80) + 1);
                  else
                    v46 = 2;
                  v9 = (uint64_t *)v98;
                }
                v47 = *v9;
                v48 = *(_DWORD *)(v20 + 20);
                v49 = v20 - 32 * (v48 & 0x7FFFFFF);
                if (v48 < 0)
                {
                  v94 = *(_QWORD *)(v49 - 8);
                  if ((v94 & 0xFFFFFFFF0) != 0)
                    v50 = (*(_DWORD *)(v49 - 12) - *(_DWORD *)(v49 - v94));
                  else
                    v50 = 0;
                  v9 = (uint64_t *)v98;
                }
                else
                {
                  v50 = 0;
                }
                sub_1C607D890(v47, v49, v20 - 32 * v46 - 32 * v50 - 32, v110);
                sub_1C63E921C(v30, v20, v110);
                v51 = v110;
                goto LABEL_97;
              }
              if (!v20 || v29 != 85)
              {
                v30 = operator new();
                v86 = *(_DWORD *)(v20 + 20);
                if ((v86 & 0x40000000) != 0)
                {
                  v88 = *(_QWORD *)(v20 - 8);
                  v87 = v86 & 0x7FFFFFF;
                }
                else
                {
                  v87 = v86 & 0x7FFFFFF;
                  v88 = v20 - 32 * v87;
                }
                sub_1C607D890(*v9, v88, v88 + 32 * v87, v108);
                sub_1C63E9414(v30, v20, v108);
                v51 = v108;
LABEL_97:
                sub_1C63DB9C0(v51);
                goto LABEL_51;
              }
              v70 = *(_QWORD *)(v20 - 96);
              v71 = *(_QWORD *)(a6 + 104);
              v72 = *(_DWORD *)(a6 + 120);
              if (v72)
              {
                v73 = ((v70 >> 4) ^ (v70 >> 9)) & (v72 - 1);
                v74 = v71 + 48 * v73;
                v75 = *(_QWORD *)(v74 + 24);
                if (v75 != v70)
                {
                  v76 = 1;
                  while (v75 != -4096)
                  {
                    v77 = v73 + v76++;
                    v73 = v77 & (v72 - 1);
                    v74 = v71 + 48 * v73;
                    v75 = *(_QWORD *)(v74 + 24);
                    if (v75 == v70)
                      goto LABEL_88;
                  }
                  goto LABEL_87;
                }
              }
              else
              {
LABEL_87:
                v74 = v71 + 48 * v72;
              }
LABEL_88:
              if (v74 == v71 + 48 * v72 || (SCEVIter = *(const llvm::SCEV **)(v74 + 40)) == 0)
                SCEVIter = (const llvm::SCEV *)llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)a6, v70);
              LoopDisposition = llvm::ScalarEvolution::getLoopDisposition((llvm::ScalarEvolution *)a6, SCEVIter, a1);
              v30 = operator new();
              v91 = *(_DWORD *)(v20 + 20);
              if ((v91 & 0x40000000) != 0)
              {
                v93 = *(_QWORD *)(v20 - 8);
                v92 = v91 & 0x7FFFFFF;
              }
              else
              {
                v92 = v91 & 0x7FFFFFF;
                v93 = v20 - 32 * v92;
              }
              sub_1C607D890(*v9, v93, v93 + 32 * v92, v109);
              sub_1C63E9310(v30, v20, v109, LoopDisposition == 1);
              v51 = v109;
              goto LABEL_97;
            }
            v30 = operator new();
            v40 = *(_DWORD *)(v20 + 20);
            if ((v40 & 0x40000000) != 0)
            {
              v42 = *(_QWORD *)(v20 - 8);
              v41 = v40 & 0x7FFFFFF;
            }
            else
            {
              v41 = v40 & 0x7FFFFFF;
              v42 = v20 - 32 * v41;
            }
            sub_1C607D890(*v9, v42, v42 + 32 * v41, v111);
            sub_1C63DDD68(&v112, v111);
            sub_1C63DDCB4(v30, 9, &v112);
            sub_1C63DB9C0(&v112);
            *(_QWORD *)v30 = &off_1E81AD440;
            *(_QWORD *)(v30 + 40) = &unk_1E81AD480;
            *(_QWORD *)(v30 + 96) = &off_1E81ADA28;
            *(_BYTE *)(v30 + 104) = 8;
            *(_QWORD *)(v30 + 112) = v30 + 128;
            *(_QWORD *)(v30 + 120) = 0x100000000;
            *(_QWORD *)(v30 + 136) = v20;
            *(_QWORD *)(v30 + 144) = v30;
            sub_1C619116C(v30 + 16, v30 + 96);
            *(_QWORD *)v30 = &off_1E81AD440;
            *(_QWORD *)(v30 + 40) = &unk_1E81AD480;
            *(_QWORD *)(v30 + 96) = &unk_1E81AD4A0;
            v78 = *(_DWORD *)(v20 + 20);
            *(_QWORD *)(v30 + 160) = 1;
            v79 = v78 & 0x7FFFFFF;
            v80 = (v78 & 0x7FFFFFFu) - 1;
            if (v80 > 0x39)
            {
              v81 = operator new();
              *(_QWORD *)v81 = v81 + 16;
              *(_QWORD *)(v81 + 8) = 0x600000000;
              sub_1C4765AA4((char *)v81, (unint64_t)(v79 + 62) >> 6, 0);
              *(_DWORD *)(v81 + 64) = v80;
            }
            else
            {
              v81 = (v80 << 58) | 1;
            }
            v15 = v100;
            *(_QWORD *)(v30 + 160) = v81;
            *(_BYTE *)(v30 + 152) = llvm::Loop::isLoopInvariant((uint64_t)a1, *(_QWORD *)(v20 - 32 * (*(_DWORD *)(v20 + 20) & 0x7FFFFFF)));
            v82 = *(_DWORD *)(v20 + 20) & 0x7FFFFFF;
            if (v20 - 32 * v82 + 32 != v20)
            {
              v83 = 0;
              v84 = 32 - 32 * v82;
              do
              {
                isLoopInvariant = llvm::Loop::isLoopInvariant((uint64_t)a1, *(_QWORD *)(v20 + v84));
                v107[0] = v30 + 160;
                v107[1] = v83;
                sub_1C496F7C8((uint64_t)v107, isLoopInvariant);
                ++v83;
                v84 += 32;
              }
              while (v84);
            }
            sub_1C63DB9C0(v111);
            v9 = (uint64_t *)v98;
          }
LABEL_51:
          v55 = (uint64_t *)(v17 + 24);
          v54 = *(_QWORD *)(v17 + 24);
          v56 = *(_QWORD *)(v17 + 88);
          *(_QWORD *)(v30 + 24) = v54;
          v57 = v30 + 24;
          *(_QWORD *)(v57 + 64) = v56;
          *(_QWORD *)(v57 + 8) = v17 + 24;
          *(_QWORD *)(v54 + 8) = v57;
          *(_QWORD *)(v17 + 24) = v57;
          v59 = (uint64_t *)(v57 - 8);
          v58 = *(_QWORD *)(v57 - 8);
          v60 = v57;
          if (v58 < 8)
            goto LABEL_61;
          v61 = (llvm::VPValue *)(v58 & 0xFFFFFFFFFFFFFFF8);
          if ((v58 & 4) == 0 || !v61)
          {
            if ((v58 & 4) != 0)
            {
              v62 = *((_DWORD *)v61 + 2);
LABEL_58:
              v60 = v57;
              if (v62 != 1)
                goto LABEL_61;
              v61 = **(llvm::VPValue ***)v61;
            }
            llvm::VPValue::replaceAllUsesWith((uint64_t)v99, v61);
            v60 = *v55;
            goto LABEL_61;
          }
          v62 = *((_DWORD *)v61 + 2);
          v60 = v57;
          if (v62)
            goto LABEL_58;
LABEL_61:
          v63 = *(uint64_t **)(v17 + 32);
          *v63 = v60;
          *(_QWORD *)(v60 + 8) = v63;
          *v55 = 0;
          *(_QWORD *)(v17 + 32) = 0;
          (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
          v64 = *v9;
          v107[0] = v20;
          v112 = 0;
          if (sub_1C61252B8((uint64_t *)(v64 + 184), v107, &v112))
          {
            *v112 = (void (*)(llvm::VPValue *__hidden))-8192;
            *(int32x2_t *)(v64 + 192) = vadd_s32(*(int32x2_t *)(v64 + 192), (int32x2_t)0x1FFFFFFFFLL);
          }
          v65 = *v59;
          v11 = v101;
          if ((unint64_t)*v59 < 8)
            goto LABEL_68;
          if ((v65 & 4) == 0)
            goto LABEL_67;
          v66 = (uint64_t **)(v65 & 0xFFFFFFFFFFFFFFF8);
          v67 = *(unsigned int *)((v65 & 0xFFFFFFFFFFFFFFF8) + 8);
          if ((_DWORD)v67)
          {
            v59 = *v66;
            v57 = (uint64_t)&(*v66)[v67];
            do
            {
LABEL_67:
              v68 = *v59++;
              v69 = *v9;
              v112 = (void (**)(llvm::VPValue *__hidden))v20;
              sub_1C61B6040((uint64_t *)(v69 + 184), &v112)[1] = v68;
              v11 = v101;
            }
            while (v59 != (uint64_t *)v57);
          }
LABEL_68:
          v16 = v103;
        }
        while (v103 != v15);
      }
    }
  }
  while (v11 != v102);
  v11 = v104;
LABEL_109:
  if (v11)
  {
    v105 = v11;
    operator delete(v11);
  }
}

uint64_t llvm::VPlanTransforms::sinkScalarOperands(void **this, llvm::VPlan *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  char *v20;
  void *v21;
  void (**v22)(llvm::VPValue *__hidden);
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t *v31;
  char v32;
  uint64_t v33;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _BYTE *v42;
  _BYTE *v43;
  char *v44;
  char *v45;
  uint64_t v46;
  int v47;
  unsigned int j;
  uint64_t *v49;
  uint64_t *k;
  uint64_t *v51;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  char *v64;
  void (**v65)(llvm::VPValue *__hidden);
  uint64_t v66[2];
  void *v67[12];
  uint64_t v68;
  uint64_t v69;
  void *v70;
  void *v71[12];
  uint64_t v72;
  uint64_t v73;
  void *v74;
  uint64_t v75;
  int32x2_t v76;
  int v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  void *v81[15];
  void *v82;
  void *v83;
  uint64_t v84;
  uint64_t v85;
  void *v86;
  void *v87[16];
  void *v88[20];

  v88[18] = *(void **)MEMORY[0x1E0C80C00];
  v83 = *this;
  sub_1C63D199C((uint64_t *)&v83, v81);
  v76 = 0;
  v75 = 0;
  v77 = 0;
  v80 = 0;
  v78 = 0;
  v79 = 0;
  sub_1C63D1A20((llvm::SmallPtrSetImplBase *)v81, &v83);
  sub_1C63D9EF0((uint64_t)v71, (llvm::SmallPtrSetImplBase *)&v83);
  sub_1C63D9EF0((uint64_t)v67, (llvm::SmallPtrSetImplBase *)v87);
  while (1)
  {
    if (v73 - v72 != v69 - v68)
      goto LABEL_20;
    if (v72 == v73)
      break;
    v2 = v68 + 16;
    v3 = v72 + 16;
    while (1)
    {
      v4 = v3 - 16;
      if (*(_QWORD *)(v3 - 16) != *(_QWORD *)(v2 - 16))
        break;
      v5 = *(unsigned __int8 *)(v2 + 8);
      if (*(_BYTE *)(v3 + 8))
        v6 = v5 == 0;
      else
        v6 = 1;
      if (v6)
      {
        if ((*(_BYTE *)(v3 + 8) == 0) == (v5 != 0))
          break;
      }
      else if (*(_QWORD *)(v3 - 8) != *(_QWORD *)(v2 - 8) || *(_QWORD *)v3 != *(_QWORD *)v2)
      {
        break;
      }
      v2 += 32;
      v3 += 32;
      if (v4 + 32 == v73)
        goto LABEL_35;
    }
LABEL_20:
    v8 = *(_QWORD *)(v73 - 32);
    v9 = v8 + 200;
    for (i = *(_QWORD *)(v8 + 208); i != v9; i = *(_QWORD *)(i + 8))
    {
      v11 = i - 24;
      if (!i)
        v11 = 0;
      v12 = *(unsigned __int8 *)(v11 + 8);
      if (v12 == 5)
        v13 = v11;
      else
        v13 = 0;
      if (i)
      {
        if (v12 == 5)
        {
          if (*(_BYTE *)(v13 + 153))
          {
            v14 = *(unsigned int *)(v13 + 56);
            if ((_DWORD)v14)
            {
              v15 = *(uint64_t **)(v13 + 48);
              v16 = 8 * v14;
              do
              {
                v17 = *v15++;
                v66[0] = *(_QWORD *)(v13 + 88);
                v66[1] = v17;
                sub_1C4D9539C(&v75, v66);
                v16 -= 8;
              }
              while (v16);
            }
          }
        }
      }
    }
    sub_1C608A1E8(v71);
  }
LABEL_35:
  sub_1C63D9B78(&v70);
  sub_1C63D9B78(v67);
  sub_1C63D9B78(&v74);
  sub_1C63D9B78(v71);
  sub_1C63D9B78(v88);
  sub_1C63D9B78(v87);
  sub_1C63D9B78(&v86);
  sub_1C63D9B78(&v83);
  v18 = v79;
  if (v78 == v79)
  {
    v19 = 0;
  }
  else
  {
    v19 = 0;
    v20 = (char *)&v85;
    v21 = &unk_1E81AD898;
    v22 = &off_1E81ADA28;
    do
    {
      v23 = *(uint64_t **)(v18 - 16);
      v24 = *(_QWORD *)(v18 - 8);
      v25 = v18 - 16;
      v83 = 0;
      if (sub_1C6178C5C(v75, v77, (uint64_t)v23, v24, &v83))
      {
        v26 = v83;
        *(_QWORD *)v83 = -8192;
        v26[1] = -8192;
        v76 = vadd_s32(v76, (int32x2_t)0x1FFFFFFFFLL);
      }
      v79 = v25;
      v27 = *(_QWORD *)(v24 + 48);
      if (v27
        && *(_BYTE *)(v27 + 8) == 5
        && !*(_BYTE *)(v27 + 152)
        && *(uint64_t **)(v27 + 88) != v23
        && (llvm::VPRecipeBase::mayHaveSideEffects((llvm::VPRecipeBase *)v27) & 1) == 0
        && (llvm::VPRecipeBase::mayReadFromMemory((llvm::VPRecipeBase *)v27) & 1) == 0
        && (llvm::VPRecipeBase::mayWriteToMemory((llvm::VPRecipeBase *)v27) & 1) == 0)
      {
        v28 = *(unsigned int *)(v27 + 120);
        if ((_DWORD)v28)
        {
          v29 = v27 + 96;
          v30 = *(uint64_t **)(v27 + 112);
          v31 = &v30[v28];
          v32 = 1;
          while (1)
          {
            v33 = *v30;
            if (!*v30 || *(_DWORD *)(*v30 + 40) != 0)
              break;
            if (*(uint64_t **)(v33 + 48) == v23)
            {
              if (++v30 == v31)
              {
                if ((v32 & 1) != 0)
                  goto LABEL_80;
LABEL_62:
                v64 = v20;
                v65 = v22;
                v61 = *(_QWORD *)(v27 + 136);
                v35 = operator new();
                v36 = *(uint64_t **)(v27 + 48);
                v37 = *(unsigned int *)(v27 + 56);
                *(_QWORD *)(v35 + 24) = 0;
                v62 = v35 + 24;
                *(_QWORD *)(v35 + 32) = 0;
                v63 = v21;
                *(_QWORD *)v35 = v21;
                *(_BYTE *)(v35 + 8) = 5;
                *(_QWORD *)(v35 + 16) = 0;
                *(_QWORD *)(v35 + 40) = &unk_1E81AD718;
                *(_QWORD *)(v35 + 48) = v35 + 64;
                *(_QWORD *)(v35 + 56) = 0x200000000;
                *(_DWORD *)(v35 + 80) = 0;
                if ((_DWORD)v37)
                {
                  v38 = 8 * v37;
                  do
                  {
                    v39 = *v36++;
                    sub_1C63D6200((_DWORD *)(v35 + 40), v39);
                    v38 -= 8;
                  }
                  while (v38);
                }
                *(_QWORD *)(v35 + 88) = 0;
                *(_QWORD *)v35 = &off_1E81AD640;
                *(_QWORD *)(v35 + 40) = &unk_1E81AD680;
                *(_QWORD *)(v35 + 96) = v65;
                v40 = v35 + 96;
                *(_BYTE *)(v35 + 104) = 4;
                *(_QWORD *)(v35 + 112) = v35 + 128;
                *(_QWORD *)(v35 + 120) = 0x100000000;
                *(_QWORD *)(v35 + 136) = v61;
                *(_QWORD *)(v35 + 144) = v35;
                sub_1C619116C(v35 + 16, v35 + 96);
                *(_QWORD *)v35 = &off_1E81AD640;
                *(_QWORD *)(v35 + 40) = &unk_1E81AD680;
                *(_QWORD *)(v35 + 96) = &unk_1E81AD6A0;
                *(_WORD *)(v35 + 152) = 1;
                *(_BYTE *)(v35 + 154) = 0;
                v41 = *(_QWORD *)(v27 + 24);
                *(_QWORD *)(v35 + 88) = *(_QWORD *)(v27 + 88);
                *(_QWORD *)(v35 + 24) = v41;
                *(_QWORD *)(v35 + 32) = v27 + 24;
                *(_QWORD *)(v41 + 8) = v62;
                *(_QWORD *)(v27 + 24) = v62;
                v42 = *(_BYTE **)(v27 + 112);
                v43 = &v42[8 * *(unsigned int *)(v27 + 120)];
                v83 = v20;
                v84 = 0x400000000;
                sub_1C618A450((unsigned int *)&v83, v42, v43);
                v44 = (char *)v83;
                if ((_DWORD)v84)
                {
                  v45 = (char *)v83 + 8 * v84;
                  do
                  {
                    if (*(_QWORD *)v44)
                      v46 = *(_QWORD *)v44 - 40;
                    else
                      v46 = 0;
                    if (*(uint64_t **)(v46 + 88) != v23)
                    {
                      v47 = *(_DWORD *)(v46 + 56);
                      if (v47)
                      {
                        for (j = 0; j != v47; ++j)
                        {
                          if (*(_QWORD *)(*(_QWORD *)(v46 + 48) + 8 * j) == v29)
                          {
                            sub_1C63D6858(v46 + 40, j, v40);
                            v47 = *(_DWORD *)(v46 + 56);
                          }
                        }
                      }
                    }
                    v44 += 8;
                  }
                  while (v44 != v45);
                  v44 = (char *)v83;
                  v20 = v64;
                }
                v21 = v63;
                v22 = v65;
                if (v44 != v20)
                  free(v44);
                goto LABEL_80;
              }
            }
            else
            {
              if (*(_BYTE *)(v33 - 32) != 10 || **(_QWORD **)(v33 + 8) != v29)
                break;
              v32 = 0;
              if (++v30 == v31)
                goto LABEL_62;
            }
          }
        }
        else
        {
LABEL_80:
          v49 = v23 + 25;
          for (k = (uint64_t *)v23[26]; k != v49; k = (uint64_t *)k[1])
          {
            v51 = k - 3;
            if (!k)
              v51 = 0;
            if (*((unsigned __int8 *)v51 + 8) - 13 > 7)
            {
              v49 = k;
              break;
            }
          }
          v52 = *(_QWORD *)(v27 + 24);
          v53 = *(_QWORD **)(v27 + 32);
          v54 = v27 + 24;
          *v53 = v52;
          *(_QWORD *)(v52 + 8) = v53;
          *(_QWORD *)v54 = 0;
          *(_QWORD *)(v54 + 8) = 0;
          *(_QWORD *)(v54 + 64) = v23;
          v55 = *v49;
          *(_QWORD *)v54 = *v49;
          *(_QWORD *)(v54 + 8) = v49;
          *(_QWORD *)(v55 + 8) = v54;
          *v49 = v54;
          v56 = *(unsigned int *)(v54 + 32);
          if ((_DWORD)v56)
          {
            v57 = *(uint64_t **)(v54 + 24);
            v58 = 8 * v56;
            do
            {
              v59 = *v57++;
              v83 = v23;
              v84 = v59;
              sub_1C4D9539C(&v75, (uint64_t *)&v83);
              v58 -= 8;
            }
            while (v58);
          }
          v19 = 1;
        }
      }
      v18 = v79;
    }
    while (v78 != v79);
  }
  sub_1C6176BF8(&v75);
  sub_1C63D9B78(&v82);
  sub_1C63D9B78(v81);
  return v19 & 1;
}

uint64_t getPredicatedMask(uint64_t a1)
{
  uint64_t v1;
  BOOL v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 200);
  if (v1)
    v2 = *(_BYTE *)(v1 + 8) == 0;
  else
    v2 = 0;
  if (!v2)
    return 0;
  v3 = 2;
  v4 = v1 + 200;
  do
  {
    v4 = *(_QWORD *)(v4 + 8);
    --v3;
  }
  while (v4 != v1 + 200);
  if (v3)
    return 0;
  result = 0;
  v6 = *(_QWORD *)(v1 + 208);
  if (v6)
    v7 = v6 - 24;
  else
    v7 = 0;
  if (!*(_BYTE *)(v7 + 8))
    return **(_QWORD **)(v7 + 48);
  return result;
}

uint64_t llvm::VPlanTransforms::mergeReplicateRegions(llvm::VPlanTransforms *this, llvm::VPlan *a2)
{
  void **v3;
  char *v4;
  char *v5;
  void *v6;
  unsigned int v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  unsigned int v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  void *v37;
  uint64_t v38;
  _DWORD **v39;
  uint64_t v40;
  _DWORD *v41;
  char *v42;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  _BYTE *v46;
  _BYTE *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t *v53;
  uint64_t v54;
  BOOL v55;
  uint64_t v56;
  uint64_t i;
  char *v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  unint64_t v62;
  char *v63;
  char *v64;
  uint64_t v65;
  char *v66;
  char *v67;
  uint64_t v68;
  uint64_t *v69;
  char *v70;
  uint64_t *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  void *v75[15];
  void *v76;
  _QWORD v77[2];
  int v78;
  char *v79;
  char *v80;
  char *v81;
  void *v82;
  uint64_t v83;
  char v84;
  void *v85;
  void *v86;
  void *v87;
  void **v88;
  int v89;
  _QWORD v90[10];

  v90[8] = *MEMORY[0x1E0C80C00];
  v77[0] = 0;
  v77[1] = 0;
  v78 = 0;
  v80 = 0;
  v81 = 0;
  v79 = 0;
  v74 = *(_QWORD *)this;
  sub_1C63D199C(&v74, v75);
  sub_1C63E853C(&v82, (llvm::SmallPtrSetImplBase *)v75);
  sub_1C63E9508(&v88, (uint64_t)&v82);
  sub_1C63D9B78(&v87);
  sub_1C63D9B78(&v86);
  sub_1C63D9B78(&v85);
  sub_1C63D9B78(&v82);
  sub_1C63D9B78(&v76);
  sub_1C63D9B78(v75);
  if (!v89)
    goto LABEL_2;
  v3 = v88;
  v4 = (char *)&v88[v89];
  v5 = &v84;
  do
  {
    v6 = *v3;
    v75[0] = *v3;
    if (v78)
    {
      v7 = ((v6 >> 4) ^ (v6 >> 9)) & (v78 - 1);
      v8 = *(void **)(v77[0] + 8 * v7);
      if (v6 == v8)
      {
LABEL_8:
        if (v7 != v78)
          goto LABEL_40;
      }
      else
      {
        v26 = 1;
        while (v8 != (void *)-4096)
        {
          v27 = v7 + v26++;
          v7 = v27 & (v78 - 1);
          v8 = *(void **)(v77[0] + 8 * v7);
          if (v6 == v8)
            goto LABEL_8;
        }
      }
    }
    if (*((_DWORD *)v6 + 20) == 1)
    {
      v9 = **((_QWORD **)v6 + 9);
      if (v9)
      {
        if (!*(_BYTE *)(v9 + 8) && *(_QWORD *)(v9 + 200) == v9 + 200 && *(_DWORD *)(v9 + 80) == 1)
        {
          v10 = **(_QWORD **)(v9 + 72);
          if (v10)
          {
            if (*(_BYTE *)(v10 + 8) == 1)
            {
              v11 = 0;
              v12 = *((_QWORD *)v6 + 25);
              if (v12 && !*(_BYTE *)(v12 + 8))
              {
                v11 = 2;
                v13 = v12 + 200;
                do
                {
                  v13 = *(_QWORD *)(v13 + 8);
                  --v11;
                }
                while (v13 != v12 + 200);
                if (v11)
                {
                  v11 = 0;
                }
                else
                {
                  v14 = *(_QWORD *)(v12 + 208);
                  if (v14)
                    v15 = v14 - 24;
                  else
                    v15 = 0;
                  if (!*(_BYTE *)(v15 + 8))
                    v11 = **(_QWORD **)(v15 + 48);
                }
              }
              v16 = *(_QWORD *)(v10 + 200);
              if (!v16 || *(_BYTE *)(v16 + 8) != 0)
                goto LABEL_35;
              v18 = 2;
              v19 = v16 + 200;
              do
              {
                v19 = *(_QWORD *)(v19 + 8);
                --v18;
              }
              while (v19 != v16 + 200);
              if (!v18)
              {
                v20 = 0;
                v24 = *(_QWORD *)(v16 + 208);
                if (v24)
                  v25 = v24 - 24;
                else
                  v25 = 0;
                if (!*(_BYTE *)(v25 + 8))
                  v20 = **(_QWORD **)(v25 + 48);
              }
              else
              {
LABEL_35:
                v20 = 0;
              }
              if (v11)
              {
                if (v11 == v20)
                {
                  v21 = sub_1C60CC890(v12);
                  v22 = sub_1C60CC890(v16);
                  if (v21)
                  {
                    v23 = v22;
                    if (v22)
                    {
                      v28 = *(uint64_t **)(v21 + 200);
                      if (v28 != (uint64_t *)(v21 + 200))
                      {
                        v29 = (uint64_t *)(v22 + 200);
                        do
                        {
                          v30 = (uint64_t *)(v22 + 200);
                          if (*(uint64_t **)(v22 + 208) != v29)
                          {
                            v30 = *(uint64_t **)(v22 + 208);
                            while (1)
                            {
                              v31 = v30 - 3;
                              if (!v30)
                                v31 = 0;
                              if (*((unsigned __int8 *)v31 + 8) - 13 > 7)
                                break;
                              v30 = (uint64_t *)v30[1];
                              if (v30 == v29)
                              {
                                v30 = (uint64_t *)(v22 + 200);
                                break;
                              }
                            }
                          }
                          v32 = (uint64_t *)*v28;
                          v33 = (uint64_t *)v28[1];
                          *v33 = *v28;
                          v32[1] = (uint64_t)v33;
                          *v28 = 0;
                          v28[1] = 0;
                          v28[8] = v22;
                          v34 = *v30;
                          *v28 = *v30;
                          v28[1] = (uint64_t)v30;
                          *(_QWORD *)(v34 + 8) = v28;
                          *v30 = (uint64_t)v28;
                          v28 = v32;
                        }
                        while (v32 != (uint64_t *)(v21 + 200));
                      }
                      if (*(_DWORD *)(v21 + 80) == 1)
                        v35 = **(_QWORD **)(v21 + 72);
                      else
                        v35 = 0;
                      if (*(_DWORD *)(v22 + 80) == 1)
                        v68 = **(_QWORD **)(v22 + 72);
                      else
                        v68 = 0;
                      v36 = *(uint64_t **)(v35 + 200);
                      v69 = (uint64_t *)(v35 + 200);
                      v70 = v5;
                      if (v36 != (uint64_t *)(v35 + 200))
                      {
                        do
                        {
                          v44 = *(v36 - 1);
                          v45 = v44 & 0xFFFFFFFFFFFFFFF8;
                          if ((v44 & 4) != 0)
                            v45 = **(_QWORD **)v45;
                          v71 = (uint64_t *)*v36;
                          v72 = v36;
                          v73 = *(_QWORD *)v36[3];
                          v46 = *(_BYTE **)(v45 + 16);
                          v47 = &v46[8 * *(unsigned int *)(v45 + 24)];
                          v82 = v5;
                          v83 = 0x600000000;
                          sub_1C618A450((unsigned int *)&v82, v46, v47);
                          if ((_DWORD)v83)
                          {
                            v52 = (uint64_t *)v82;
                            v53 = (uint64_t *)((char *)v82 + 8 * v83);
                            do
                            {
                              v54 = *v52;
                              if (*v52)
                                v55 = *(_DWORD *)(*v52 + 40) == 0;
                              else
                                v55 = 0;
                              if (v55 && *(_QWORD *)(v54 + 48) == v23)
                              {
                                v56 = *(unsigned int *)(v54 + 16);
                                if ((_DWORD)v56)
                                {
                                  for (i = 0; i != v56; ++i)
                                  {
                                    if (v45 == *(_QWORD *)(*(_QWORD *)(v54 + 8) + 8 * i))
                                      sub_1C63D6858(v54, i, v73);
                                  }
                                }
                              }
                              ++v52;
                            }
                            while (v52 != v53);
                          }
                          v48 = *(uint64_t **)(v68 + 208);
                          v49 = *v72;
                          v50 = (uint64_t *)v72[1];
                          *v50 = *v72;
                          *(_QWORD *)(v49 + 8) = v50;
                          *v72 = 0;
                          v72[1] = 0;
                          v72[8] = v68;
                          v51 = *v48;
                          *v72 = *v48;
                          v72[1] = (uint64_t)v48;
                          *(_QWORD *)(v51 + 8) = v72;
                          *v48 = (uint64_t)v72;
                          v5 = v70;
                          if (v82 != v70)
                            free(v82);
                          v36 = v71;
                        }
                        while (v71 != v69);
                      }
                      v37 = v75[0];
                      v38 = *((unsigned int *)v75[0] + 14);
                      if ((_DWORD)v38)
                      {
                        v39 = (_DWORD **)*((_QWORD *)v75[0] + 6);
                        v40 = 8 * v38;
                        do
                        {
                          v41 = *v39++;
                          sub_1C63D62F0((uint64_t)v41, (uint64_t)v37);
                          sub_1C63D64B0(v41, v9);
                          v40 -= 8;
                        }
                        while (v40);
                      }
                      sub_1C63D62F0((uint64_t)v37, v9);
                      sub_1C61B7564((uint64_t)&v82, (uint64_t)v77, (uint64_t *)v75);
                      if (v84)
                      {
                        v42 = v80;
                        if (v80 >= v81)
                        {
                          v58 = v79;
                          v59 = (v80 - v79) >> 3;
                          v60 = v59 + 1;
                          if ((unint64_t)(v59 + 1) >> 61)
                            abort();
                          v61 = v81 - v79;
                          if ((v81 - v79) >> 2 > v60)
                            v60 = v61 >> 2;
                          if ((unint64_t)v61 >= 0x7FFFFFFFFFFFFFF8)
                            v62 = 0x1FFFFFFFFFFFFFFFLL;
                          else
                            v62 = v60;
                          if (v62)
                          {
                            if (v62 >> 61)
                              sub_1C4764EE4();
                            v63 = (char *)operator new(8 * v62);
                          }
                          else
                          {
                            v63 = 0;
                          }
                          v64 = &v63[8 * v59];
                          *(_QWORD *)v64 = v37;
                          v43 = v64 + 8;
                          if (v42 != v58)
                          {
                            do
                            {
                              v65 = *((_QWORD *)v42 - 1);
                              v42 -= 8;
                              *((_QWORD *)v64 - 1) = v65;
                              v64 -= 8;
                            }
                            while (v42 != v58);
                            v42 = v79;
                          }
                          v79 = v64;
                          v81 = &v63[8 * v62];
                          if (v42)
                            operator delete(v42);
                        }
                        else
                        {
                          *(_QWORD *)v80 = v37;
                          v43 = v42 + 8;
                        }
                        v80 = v43;
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_40:
    ++v3;
  }
  while (v3 != (void **)v4);
  v66 = v79;
  v67 = v80;
  while (v66 != v67)
  {
    if (*(_QWORD *)v66)
      (*(void (**)(_QWORD))(**(_QWORD **)v66 + 8))(*(_QWORD *)v66);
    v66 += 8;
  }
LABEL_2:
  if (v88 != v90)
    free(v88);
  sub_1C6176BF8(v77);
  return 0;
}

uint64_t sub_1C60CC890(uint64_t a1)
{
  uint64_t result;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (*(_DWORD *)(a1 + 80) != 2)
    return 0;
  result = 0;
  v3 = *(uint64_t **)(a1 + 72);
  v5 = *v3;
  v4 = v3[1];
  if (*(_BYTE *)(v5 + 8))
    v6 = 0;
  else
    v6 = v5;
  if (*(_BYTE *)(v4 + 8))
    v4 = 0;
  if (v6)
    v7 = v4 == 0;
  else
    v7 = 1;
  if (!v7)
  {
    v8 = *(unsigned int *)(v6 + 80);
    v9 = *(unsigned int *)(v4 + 80);
    if (v9 + v8 == 1)
    {
      if ((_DWORD)v8 == 1)
        v10 = **(_QWORD **)(v6 + 72);
      else
        v10 = 0;
      if (v10 == v4)
        return v5;
      if ((_DWORD)v9 == 1)
        v11 = **(_QWORD **)(v4 + 72);
      else
        v11 = 0;
      if (v11 == v6)
        return v4;
      else
        return 0;
    }
    return 0;
  }
  return result;
}

uint64_t *llvm::VPlanTransforms::removeRedundantInductionCasts(uint64_t *this, llvm::VPlan *a2)
{
  uint64_t v2;
  BOOL v3;
  BOOL v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  llvm::VPValue *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t i;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  uint64_t v28;

  v2 = *this;
  if (*this)
    v3 = *(_BYTE *)(*this + 8) == 1;
  else
    v3 = 0;
  if (!v3)
  {
    if (*(_DWORD *)(v2 + 80) != 1)
    {
      v2 = 0;
      goto LABEL_13;
    }
    v2 = **(_QWORD **)(v2 + 72);
    if (*(_BYTE *)(v2 + 8) != 1)
      goto LABEL_13;
  }
  do
  {
    v2 = *(_QWORD *)(v2 + 200);
    if (v2)
      v4 = *(_BYTE *)(v2 + 8) == 1;
    else
      v4 = 0;
  }
  while (v4);
LABEL_13:
  v5 = v2 + 200;
  v6 = *(_QWORD *)(v2 + 208);
  if (v6 != v2 + 200)
  {
    v7 = *(_QWORD *)(v2 + 208);
    while (1)
    {
      v8 = v7 - 24;
      if (!v7)
        v8 = 0;
      if (*(unsigned __int8 *)(v8 + 8) - 13 > 7)
        break;
      v7 = *(_QWORD *)(v7 + 8);
      if (v7 == v5)
      {
        v7 = v5;
        goto LABEL_20;
      }
    }
    while (1)
    {
LABEL_20:
      if (v6 == v7)
        return this;
      v9 = v6 - 24;
      if (!v6)
        v9 = 0;
      v10 = *(unsigned __int8 *)(v9 + 8);
      if (v10 != 17)
        v9 = 0;
      if (v6 && v10 == 17)
      {
        v11 = *(_QWORD *)(v9 + 16);
        v12 = v11 & 0xFFFFFFFFFFFFFFF8;
        if ((v11 & 4) != 0)
          v12 = **(_QWORD **)v12;
        v13 = *(_QWORD *)(v12 + 40);
        if (!v13 || *(_BYTE *)(v13 + 16) != 66)
          break;
      }
LABEL_31:
      v6 = *(_QWORD *)(v6 + 8);
    }
    v14 = *(_QWORD *)(v9 + 160);
    v15 = (llvm::VPValue *)(v9 + 96);
    v16 = *(unsigned int *)(v14 + 64);
    v17 = v9 + 96;
    if (!(_DWORD)v16)
      goto LABEL_51;
    v18 = *(_QWORD *)(v14 + 56);
    v19 = v18 + 8 * v16;
    v17 = (unint64_t)v15;
LABEL_34:
    v21 = *(_QWORD *)(v19 - 8);
    v19 -= 8;
    v20 = v21;
    v22 = *(_QWORD **)(v17 + 16);
    for (i = 8 * *(unsigned int *)(v17 + 24); ; i -= 8)
    {
      v24 = *v22 - 40;
      if (!*v22)
        v24 = 0;
      v25 = *(_QWORD *)(v24 + 16);
      if (v25 < 8)
        goto LABEL_47;
      v26 = v25 & 0xFFFFFFFFFFFFFFF8;
      if ((v25 & 4) != 0)
      {
        if (v26)
          break;
      }
      if ((v25 & 4) != 0)
      {
        v27 = *(_DWORD *)(v26 + 8);
LABEL_44:
        if (v27 != 1)
          goto LABEL_47;
        v26 = **(_QWORD **)v26;
      }
      if (*(_QWORD *)(v26 + 40) == v20)
      {
        v28 = *(_QWORD *)(*v22 - 24);
        v17 = v28 & 0xFFFFFFFFFFFFFFF8;
        if ((v28 & 4) != 0)
          v17 = **(_QWORD **)v17;
        if (v19 == v18)
        {
LABEL_51:
          this = (uint64_t *)llvm::VPValue::replaceAllUsesWith(v17, v15);
          goto LABEL_31;
        }
        goto LABEL_34;
      }
LABEL_47:
      ++v22;
    }
    v27 = *(_DWORD *)(v26 + 8);
    if (!v27)
      goto LABEL_47;
    goto LABEL_44;
  }
  return this;
}

uint64_t llvm::VPlanTransforms::removeRedundantCanonicalIVs(llvm::VPlanTransforms *this, llvm::VPlan *a2)
{
  uint64_t result;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;

  result = sub_1C607CC58((uint64_t *)this);
  v4 = *(unsigned int *)(result + 120);
  if (!(_DWORD)v4)
    return result;
  v5 = *(uint64_t **)(result + 112);
  v6 = 8 * v4;
  while (1)
  {
    v7 = *v5;
    if (!*(_DWORD *)(*v5 + 40) && *(_BYTE *)(v7 - 32) == 8)
      break;
    ++v5;
    v6 -= 8;
    if (!v6)
      return result;
  }
  v8 = *(_QWORD *)this;
  if (*(_QWORD *)this)
    v9 = *(_BYTE *)(*(_QWORD *)this + 8) == 1;
  else
    v9 = 0;
  if (!v9)
  {
    if (*(_DWORD *)(v8 + 80) != 1)
    {
      v8 = 0;
      goto LABEL_19;
    }
    v8 = **(_QWORD **)(v8 + 72);
    if (*(_BYTE *)(v8 + 8) != 1)
      goto LABEL_19;
  }
  do
  {
    v8 = *(_QWORD *)(v8 + 200);
    if (v8)
      v10 = *(_BYTE *)(v8 + 8) == 1;
    else
      v10 = 0;
  }
  while (v10);
LABEL_19:
  v11 = v8 + 200;
  v12 = *(_QWORD *)(v8 + 208);
  if (v12 != v8 + 200)
  {
    v13 = *(_QWORD *)(v8 + 208);
    while (1)
    {
      v14 = v13 - 24;
      if (!v13)
        v14 = 0;
      if (*(unsigned __int8 *)(v14 + 8) - 13 > 7)
        break;
      v13 = *(_QWORD *)(v13 + 8);
      if (v13 == v11)
      {
        v13 = v11;
        break;
      }
    }
    while (v12 != v13)
    {
      v15 = v12 - 24;
      if (!v12)
        v15 = 0;
      v16 = *(unsigned __int8 *)(v15 + 8);
      if (v16 == 17)
        v17 = v15;
      else
        v17 = 0;
      if (v12)
      {
        if (v16 == 17)
        {
          result = llvm::VPWidenIntOrFpInductionRecipe::isCanonical((llvm::VPWidenIntOrFpInductionRecipe *)v17);
          if ((_DWORD)result)
          {
            v18 = *(_QWORD *)(v17 + 16);
            v19 = v18 & 0xFFFFFFFFFFFFFFF8;
            if ((v18 & 4) != 0)
              v19 = **(_QWORD **)v19;
            v20 = *(_QWORD *)(v19 + 40);
            if (!v20 || *(_BYTE *)(v20 + 16) != 66)
              v20 = *(_QWORD *)(v17 + 152);
            if (*(_QWORD *)v20 == **(_QWORD **)(**(_QWORD **)(*(_QWORD *)(**(_QWORD **)(v7 + 8) + 48) + 48) + 40))
            {
              if (*(_BYTE *)(v17 + 169) || (v21 = *(unsigned int *)(v7 + 80), !(_DWORD)v21))
              {
LABEL_51:
                llvm::VPValue::replaceAllUsesWith(v7 + 56, (llvm::VPValue *)(v17 + 96));
                v26 = *(_QWORD *)(v7 - 16);
                v25 = *(_QWORD **)(v7 - 8);
                *v25 = v26;
                *(_QWORD *)(v26 + 8) = v25;
                *(_QWORD *)(v7 - 16) = 0;
                *(_QWORD *)(v7 - 8) = 0;
                return (*(uint64_t (**)(uint64_t))(*(_QWORD *)(v7 - 40) + 8))(v7 - 40);
              }
              v22 = *(_QWORD **)(v7 + 72);
              v23 = 8 * v21;
              while (1)
              {
                v24 = *v22 ? *v22 - 40 : 0;
                result = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v24 + 32))(v24, v7 + 56);
                if ((result & 1) == 0)
                  break;
                ++v22;
                v23 -= 8;
                if (!v23)
                  goto LABEL_51;
              }
            }
          }
        }
      }
      v12 = *(_QWORD *)(v12 + 8);
    }
  }
  return result;
}

uint64_t llvm::VPlanTransforms::removeDeadRecipes(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  BOOL v4;
  BOOL v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  unint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  int v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;

  v3 = *(_QWORD *)result;
  if (*(_QWORD *)result)
    v4 = *(_BYTE *)(*(_QWORD *)result + 8) == 1;
  else
    v4 = 0;
  if (!v4)
  {
    if (*(_DWORD *)(v3 + 80) != 1)
    {
      v3 = 0;
      goto LABEL_13;
    }
    v3 = **(_QWORD **)(v3 + 72);
    if (*(_BYTE *)(v3 + 8) != 1)
      goto LABEL_13;
  }
  do
  {
    v3 = *(_QWORD *)(v3 + 200);
    if (v3)
      v5 = *(_BYTE *)(v3 + 8) == 1;
    else
      v5 = 0;
  }
  while (v5);
LABEL_13:
  v8 = *(_QWORD **)(v3 + 200);
  v6 = (_QWORD *)(v3 + 200);
  v7 = v8;
  if (v8 != v6)
  {
    do
    {
      v9 = (_QWORD *)*v7;
      result = llvm::VPRecipeBase::mayHaveSideEffects((llvm::VPRecipeBase *)(v7 - 3));
      if ((result & 1) != 0)
        goto LABEL_33;
      v11 = v7 - 1;
      v10 = *(v7 - 1);
      if (v10 >= 8)
      {
        v12 = v7;
        if ((v10 & 4) == 0)
          goto LABEL_19;
        v13 = *(unsigned int *)((v10 & 0xFFFFFFFFFFFFFFF8) + 8);
        if ((_DWORD)v13)
        {
          v11 = *(_QWORD **)(v10 & 0xFFFFFFFFFFFFFFF8);
          v12 = &v11[v13];
LABEL_19:
          while (!*(_DWORD *)(*v11 + 24))
          {
            if (++v11 == v12)
              goto LABEL_21;
          }
          goto LABEL_33;
        }
      }
LABEL_21:
      v14 = *((unsigned __int8 *)v7 - 16);
      if (v14 == 6)
      {
LABEL_32:
        v19 = *v7;
        v18 = (_QWORD *)v7[1];
        *v18 = *v7;
        *(_QWORD *)(v19 + 8) = v18;
        *v7 = 0;
        v7[1] = 0;
        result = (*(uint64_t (**)(_QWORD *))(*(v7 - 3) + 8))(v7 - 3);
        goto LABEL_33;
      }
      if (v14 == 17)
      {
        v15 = v10 & 0xFFFFFFFFFFFFFFF8;
        v16 = v10 & 0xFFFFFFFFFFFFFFF8;
        if ((v10 & 4) != 0)
          v16 = **(_QWORD **)v15;
        if (*(_BYTE *)(*(_QWORD *)(v16 + 40) + 16) != 66)
          goto LABEL_32;
        if ((v10 & 4) == 0)
        {
LABEL_27:
          v17 = *(_QWORD *)(v15 + 40);
          if (!v17)
            goto LABEL_32;
          goto LABEL_31;
        }
      }
      else
      {
        v15 = v10 & 0xFFFFFFFFFFFFFFF8;
        if ((v10 & 4) == 0)
          goto LABEL_27;
      }
      v17 = *(_QWORD *)(**(_QWORD **)v15 + 40);
      if (!v17)
        goto LABEL_32;
LABEL_31:
      result = sub_1C60CD188(v17, a2);
      if ((result & 1) == 0)
        goto LABEL_32;
LABEL_33:
      v7 = v9;
    }
    while (v9 != v6);
  }
  return result;
}

uint64_t sub_1C60CCEC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v6;
  const void *v7;
  const void *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  void *v13;
  const void *v14;
  _BYTE *v15;
  int v16;
  int v17;
  void *v18;
  const void *v19;
  const void *v20;
  int v21;
  unsigned int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t i;
  uint64_t v29;
  int v30;
  BOOL v31;
  uint64_t v34;
  uint64_t v35;
  _BYTE *v36;
  _BYTE *v37;
  uint64_t v38;
  int v39;
  _BYTE v40[64];
  __int128 v41;
  uint64_t v42;

  v6 = v40;
  v36 = v40;
  v7 = *(const void **)(a2 + 8);
  if (v7 == *(const void **)a2)
  {
    v37 = v40;
    v8 = v7;
  }
  else
  {
    v34 = *(unsigned int *)(a2 + 16);
    v6 = malloc_type_malloc(8 * v34, 0x4065EBACuLL);
    if (!v6)
    {
      if ((_DWORD)v34)
        goto LABEL_50;
      v6 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v6)
        goto LABEL_50;
    }
    v37 = v6;
    v8 = *(const void **)a2;
    v7 = *(const void **)(a2 + 8);
  }
  v10 = *(_DWORD *)(a2 + 16);
  v9 = *(_DWORD *)(a2 + 20);
  LODWORD(v38) = v10;
  if (v7 == v8)
    v11 = v9;
  else
    v11 = v10;
  if (v11)
  {
    memmove(v6, v7, 8 * v11);
    v9 = *(_DWORD *)(a2 + 20);
  }
  v12 = *(_DWORD *)(a2 + 24);
  HIDWORD(v38) = v9;
  v39 = v12;
  v42 = 0;
  v41 = 0uLL;
  sub_1C60874BC((char *)&v41, *(_QWORD *)(a2 + 96), *(_QWORD *)(a2 + 104), (uint64_t)(*(_QWORD *)(a2 + 104) - *(_QWORD *)(a2 + 96)) >> 5);
  v13 = (void *)(a1 + 32);
  *(_QWORD *)a1 = a1 + 32;
  v15 = v36;
  v14 = v37;
  if (v37 == v36)
  {
    *(_QWORD *)(a1 + 8) = v13;
    v16 = HIDWORD(v38);
    if (HIDWORD(v38))
      memmove(v13, v14, 8 * HIDWORD(v38));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v37;
    v37 = v15;
    v16 = HIDWORD(v38);
  }
  v17 = v39;
  *(_DWORD *)(a1 + 16) = v38;
  *(_DWORD *)(a1 + 20) = v16;
  *(_DWORD *)(a1 + 24) = v17;
  v38 = 8;
  v39 = 0;
  *(_OWORD *)(a1 + 96) = v41;
  *(_QWORD *)(a1 + 112) = v42;
  v42 = 0;
  v41 = 0uLL;
  sub_1C63D9B78((void **)&v36);
  v18 = (void *)(a1 + 160);
  *(_QWORD *)(a1 + 128) = a1 + 160;
  v19 = *(const void **)(a3 + 8);
  if (v19 != *(const void **)a3)
  {
    v35 = *(unsigned int *)(a3 + 16);
    v18 = malloc_type_malloc(8 * v35, 0x4065EBACuLL);
    if (v18 || !(_DWORD)v35 && (v18 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
    {
      *(_QWORD *)(a1 + 136) = v18;
      v19 = *(const void **)a3;
      goto LABEL_13;
    }
LABEL_50:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  *(_QWORD *)(a1 + 136) = v18;
LABEL_13:
  *(_DWORD *)(a1 + 144) = *(_DWORD *)(a3 + 16);
  v20 = *(const void **)(a3 + 8);
  v21 = *(_DWORD *)(a3 + 20);
  if (v20 == v19)
    v22 = *(_DWORD *)(a3 + 20);
  else
    v22 = *(_DWORD *)(a3 + 16);
  if (v22)
  {
    memmove(v18, v20, 8 * v22);
    v21 = *(_DWORD *)(a3 + 20);
  }
  v23 = *(_DWORD *)(a3 + 24);
  *(_QWORD *)(a1 + 224) = 0;
  *(_DWORD *)(a1 + 148) = v21;
  *(_DWORD *)(a1 + 152) = v23;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  sub_1C60874BC((char *)(a1 + 224), *(_QWORD *)(a3 + 96), *(_QWORD *)(a3 + 104), (uint64_t)(*(_QWORD *)(a3 + 104) - *(_QWORD *)(a3 + 96)) >> 5);
  while (1)
  {
    v25 = *(_QWORD *)(a1 + 96);
    v24 = *(_QWORD *)(a1 + 104);
    v26 = *(_QWORD *)(a1 + 224);
    if (v24 - v25 == *(_QWORD *)(a1 + 232) - v26)
    {
      if (v25 == v24)
        return a1;
      v27 = v26 + 16;
      for (i = v25 + 16; ; i += 32)
      {
        v29 = i - 16;
        if (*(_QWORD *)(i - 16) != *(_QWORD *)(v27 - 16))
          break;
        v30 = *(unsigned __int8 *)(v27 + 8);
        if (*(_BYTE *)(i + 8))
          v31 = v30 == 0;
        else
          v31 = 1;
        if (v31)
        {
          if ((*(_BYTE *)(i + 8) == 0) == (v30 != 0))
            break;
        }
        else if (*(_QWORD *)(i - 8) != *(_QWORD *)(v27 - 8) || *(_QWORD *)i != *(_QWORD *)v27)
        {
          break;
        }
        v27 += 32;
        if (v29 + 32 == v24)
          return a1;
      }
    }
    if (*(_BYTE *)(*(_QWORD *)(v24 - 32) + 8) == 1)
      return a1;
    sub_1C6087824((void **)a1);
  }
}

uint64_t sub_1C60CD188(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unsigned int *v8;

  v2 = *(_QWORD *)(a1 + 8);
  if (!v2)
    return 0;
  v4 = a2 + 56;
  while (1)
  {
    v5 = *(_QWORD *)(v2 + 24);
    v6 = sub_1C477672C(v4, *(_QWORD *)(v5 + 40));
    v7 = *(_QWORD *)(a2 + 64);
    v8 = (unsigned int *)(v7 == *(_QWORD *)(a2 + 56) ? a2 + 76 : a2 + 72);
    if (v6 == (_QWORD *)(v7 + 8 * *v8)
      || *(_BYTE *)(v5 + 16) == 83 && (*(_DWORD *)(v5 + 20) & 0x7FFFFFF) == 1 && (sub_1C60CD188(v5, a2) & 1) != 0)
    {
      break;
    }
    v2 = *(_QWORD *)(v2 + 8);
    if (!v2)
      return 0;
  }
  return 1;
}

uint64_t sub_1C60CD22C(llvm::SmallPtrSetImplBase *a1, llvm::SmallPtrSetImplBase *a2)
{
  uint64_t i;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  BOOL v8;
  void *v11[12];
  uint64_t v12;
  uint64_t v13;
  void *v14;
  void *v15[12];
  uint64_t v16;
  uint64_t v17;
  void *v18;

  sub_1C63D9EF0((uint64_t)v15, a1);
  sub_1C63D9EF0((uint64_t)v11, a2);
  for (i = 0; ; ++i)
  {
    if (v17 - v16 != v13 - v12)
      goto LABEL_20;
    if (v16 == v17)
      break;
    v4 = v12 + 16;
    v5 = v16 + 16;
    while (1)
    {
      v6 = v5 - 16;
      if (*(_QWORD *)(v5 - 16) != *(_QWORD *)(v4 - 16))
        break;
      v7 = *(unsigned __int8 *)(v4 + 8);
      if (*(_BYTE *)(v5 + 8))
        v8 = v7 == 0;
      else
        v8 = 1;
      if (v8)
      {
        if ((*(_BYTE *)(v5 + 8) == 0) == (v7 != 0))
          break;
      }
      else if (*(_QWORD *)(v5 - 8) != *(_QWORD *)(v4 - 8) || *(_QWORD *)v5 != *(_QWORD *)v4)
      {
        break;
      }
      v4 += 32;
      v5 += 32;
      if (v6 + 32 == v17)
        goto LABEL_21;
    }
LABEL_20:
    sub_1C60CD340(v15);
  }
LABEL_21:
  sub_1C63D9B78(&v14);
  sub_1C63D9B78(v11);
  sub_1C63D9B78(&v18);
  sub_1C63D9B78(v15);
  return i;
}

void **sub_1C60CD340(void **a1)
{
  void **i;
  _BYTE *v2;
  _BYTE *v3;
  _BYTE *v4;
  _BYTE *v5;
  _BYTE *j;
  _BYTE *v7;
  int v8;
  BOOL v9;

  for (i = a1; ; a1 = i)
  {
    sub_1C6087824(a1);
    v3 = i[12];
    v2 = i[13];
    v4 = i[28];
    if (v2 - v3 == (_BYTE *)i[29] - v4)
    {
      if (v3 == v2)
        return i;
      v5 = v4 + 16;
      for (j = v3 + 16; ; j += 32)
      {
        v7 = j - 16;
        if (*((_QWORD *)j - 2) != *((_QWORD *)v5 - 2))
          break;
        v8 = v5[8];
        if (j[8])
          v9 = v8 == 0;
        else
          v9 = 1;
        if (v9)
        {
          if ((j[8] == 0) == (v8 != 0))
            break;
        }
        else if (*((_QWORD *)j - 1) != *((_QWORD *)v5 - 1) || *(_QWORD *)j != *(_QWORD *)v5)
        {
          break;
        }
        v5 += 32;
        if (v7 + 32 == v2)
          return i;
      }
    }
    if (*(_BYTE *)(*((_QWORD *)v2 - 4) + 8) == 1)
      break;
  }
  return i;
}

void **sub_1C60CD414(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  BOOL v9;
  void *v12[12];
  uint64_t v13;
  uint64_t v14;
  void *v15;
  void *v16[12];
  uint64_t v17;
  uint64_t v18;
  void *v19;
  void *v20[16];
  void *v21[19];

  sub_1C63D9C68(v16, a1);
  sub_1C63D9C68(v12, a2);
  while (1)
  {
    if (v18 - v17 != v14 - v13)
      goto LABEL_20;
    if (v17 == v18)
      break;
    v5 = v13 + 16;
    v6 = v17 + 16;
    while (1)
    {
      v7 = v6 - 16;
      if (*(_QWORD *)(v6 - 16) != *(_QWORD *)(v5 - 16))
        break;
      v8 = *(unsigned __int8 *)(v5 + 8);
      if (*(_BYTE *)(v6 + 8))
        v9 = v8 == 0;
      else
        v9 = 1;
      if (v9)
      {
        if ((*(_BYTE *)(v6 + 8) == 0) == (v8 != 0))
          break;
      }
      else if (*(_QWORD *)(v6 - 8) != *(_QWORD *)(v5 - 8) || *(_QWORD *)v6 != *(_QWORD *)v5)
      {
        break;
      }
      v5 += 32;
      v6 += 32;
      if (v7 + 32 == v18)
        goto LABEL_21;
    }
LABEL_20:
    *a3++ = *(_QWORD *)(v18 - 32);
    sub_1C60CD340(v16);
  }
LABEL_21:
  sub_1C63D9C68(v20, (uint64_t)v16);
  v21[18] = a3;
  sub_1C63D9B78(&v15);
  sub_1C63D9B78(v12);
  sub_1C63D9B78(&v19);
  sub_1C63D9B78(v16);
  sub_1C63D9B78(v21);
  return sub_1C63D9B78(v20);
}

void sub_1C60CD554(uint64_t a1)
{
  _BYTE *v2;
  void *v3;
  void *v4;
  unsigned int v5;
  unsigned int v6;
  _BYTE *v7;
  void *v8;
  void *v9;
  unsigned int v10;
  unsigned int v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  BOOL v16;
  _BYTE *v17;
  void *v18;
  void *v19;
  unsigned int v20;
  unsigned int v21;
  _DWORD *v22;
  void *v23;
  void *v24;
  unsigned int v25;
  unsigned int v26;
  char *v27;
  char *v28;
  char *v29;
  int v30;
  BOOL v31;
  uint64_t v32;
  BOOL v33;
  unsigned int v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  char *v38;
  char *v39;
  uint64_t v40;
  _OWORD v41[4];
  uint64_t v42;
  void *v43;
  void *v44;
  uint64_t v45;
  void *v46;
  void *v47;
  void *v48;
  void *v49;
  _BYTE *v50;
  _BYTE *v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  _BYTE v55[64];
  char *v56;
  char *v57;
  uint64_t v58;
  _BYTE *v59;
  _BYTE *v60;
  unsigned int v61;
  unsigned int v62;
  int v63;
  _BYTE v64[64];
  void *v65;
  char *v66;
  uint64_t v67;
  _DWORD *v68;
  _DWORD *v69;
  uint64_t v70;
  _DWORD v71[16];
  uint64_t v72;
  void *__p;
  _BYTE *v74;
  uint64_t v75;
  _BYTE *v76;
  void *v77;
  unsigned int v78;
  unsigned int v79;
  int v80;
  _BYTE v81[64];
  void *v82;
  char *v83;
  uint64_t v84;
  void *v85;
  void *__src;
  unsigned int v87;
  unsigned int v88;
  int v89;
  void *v90;
  _BYTE *v91;
  void *v92;
  void *v93;
  unsigned int v94;
  unsigned int v95;
  int v96;
  void *v97;
  _BYTE *v98;

  sub_1C61D9E2C((uint64_t)&v76, *(_QWORD *)(a1 + 200));
  __p = 0;
  v72 = 0;
  memset(v71, 0, sizeof(v71));
  v68 = &v71[2];
  v69 = &v71[2];
  v70 = 8;
  v75 = 0;
  v74 = 0;
  sub_1C61AE008((uint64_t)&v76, (uint64_t)&v68, &v85);
  if (__p)
  {
    v74 = __p;
    operator delete(__p);
  }
  if (v69 != v68)
    free(v69);
  if (v82)
  {
    v83 = (char *)v82;
    operator delete(v82);
  }
  if (v77 != v76)
    free(v77);
  v2 = v64;
  v59 = v64;
  v3 = __src;
  if (__src == v85)
  {
    v60 = v64;
    v4 = __src;
  }
  else
  {
    v34 = v87;
    v2 = malloc_type_malloc(8 * v87, 0x4065EBACuLL);
    if (!v2)
    {
      if (v34)
        goto LABEL_135;
      v2 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v2)
        goto LABEL_135;
    }
    v60 = v2;
    v4 = v85;
    v3 = __src;
  }
  v5 = v88;
  v61 = v87;
  if (v3 == v4)
    v6 = v88;
  else
    v6 = v87;
  if (v6)
  {
    memmove(v2, v3, 8 * v6);
    v5 = v88;
  }
  v62 = v5;
  v63 = v89;
  v66 = 0;
  v67 = 0;
  v65 = 0;
  sub_1C4D6CDA0(&v65, v90, v91, 0xAAAAAAAAAAAAAAABLL * ((v91 - (_BYTE *)v90) >> 3));
  v7 = v55;
  v50 = v55;
  v8 = v93;
  if (v93 == v92)
  {
    v51 = v55;
    v9 = v93;
  }
  else
  {
    v35 = v94;
    v7 = malloc_type_malloc(8 * v94, 0x4065EBACuLL);
    if (!v7)
    {
      if (v35)
        goto LABEL_135;
      v7 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v7)
        goto LABEL_135;
    }
    v51 = v7;
    v9 = v92;
    v8 = v93;
  }
  v10 = v95;
  v52 = v94;
  if (v8 == v9)
    v11 = v95;
  else
    v11 = v94;
  if (v11)
  {
    memmove(v7, v8, 8 * v11);
    v10 = v95;
  }
  v53 = v10;
  v54 = v96;
  v57 = 0;
  v58 = 0;
  v56 = 0;
  sub_1C4D6CDA0(&v56, v97, v98, 0xAAAAAAAAAAAAAAABLL * ((v98 - (_BYTE *)v97) >> 3));
  while (1)
  {
    if (v66 - (_BYTE *)v65 != v57 - v56)
      goto LABEL_38;
    if (v65 == v66)
      break;
    v12 = v56 + 8;
    v13 = (char *)v65 + 8;
    while (1)
    {
      v14 = v13 - 8;
      if (*((_QWORD *)v13 - 1) != *((_QWORD *)v12 - 1))
        break;
      v15 = v12[8];
      if (v13[8])
        v16 = v15 == 0;
      else
        v16 = 1;
      if (v16)
      {
        if ((v13[8] == 0) == (v15 != 0))
          break;
      }
      else if (*(_QWORD *)v13 != *(_QWORD *)v12)
      {
        break;
      }
      v12 += 24;
      v13 += 24;
      if (v14 + 24 == v66)
        goto LABEL_39;
    }
LABEL_38:
    sub_1C63DD89C((char *)&v59);
  }
LABEL_39:
  if (v56)
  {
    v57 = v56;
    operator delete(v56);
  }
  if (v51 != v50)
    free(v51);
  if (v65)
  {
    v66 = (char *)v65;
    operator delete(v65);
  }
  if (v60 != v59)
    free(v60);
  if (v97)
  {
    v98 = v97;
    operator delete(v97);
  }
  if (v93 != v92)
    free(v93);
  if (v90)
  {
    v91 = v90;
    operator delete(v90);
  }
  if (__src != v85)
    free(__src);
  sub_1C61D9E2C((uint64_t)&v46, *(_QWORD *)(a1 + 200));
  v42 = 0;
  v43 = 0;
  memset(v41, 0, sizeof(v41));
  v38 = (char *)v41 + 8;
  v39 = (char *)v41 + 8;
  v40 = 8;
  v44 = 0;
  v45 = 0;
  sub_1C61AE008((uint64_t)&v46, (uint64_t)&v38, &v85);
  if (v43)
  {
    v44 = v43;
    operator delete(v43);
  }
  if (v39 != v38)
    free(v39);
  if (v48)
  {
    v49 = v48;
    operator delete(v48);
  }
  if (v47 != v46)
    free(v47);
  v17 = v81;
  v76 = v81;
  v18 = __src;
  if (__src == v85)
  {
    v77 = v81;
    v19 = __src;
    goto LABEL_65;
  }
  v36 = v87;
  v17 = malloc_type_malloc(8 * v87, 0x4065EBACuLL);
  if (!v17 && (v36 || (v17 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
LABEL_135:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  v77 = v17;
  v19 = v85;
  v18 = __src;
LABEL_65:
  v20 = v88;
  v78 = v87;
  if (v18 == v19)
    v21 = v88;
  else
    v21 = v87;
  if (v21)
  {
    memmove(v17, v18, 8 * v21);
    v20 = v88;
  }
  v79 = v20;
  v80 = v89;
  v84 = 0;
  v82 = 0;
  v83 = 0;
  sub_1C4D6CDA0(&v82, v90, v91, 0xAAAAAAAAAAAAAAABLL * ((v91 - (_BYTE *)v90) >> 3));
  v22 = &v71[2];
  v68 = &v71[2];
  v23 = v93;
  if (v93 == v92)
  {
    v69 = &v71[2];
    v24 = v93;
  }
  else
  {
    v37 = v94;
    v22 = malloc_type_malloc(8 * v94, 0x4065EBACuLL);
    if (!v22)
    {
      if (v37)
        goto LABEL_135;
      v22 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v22)
        goto LABEL_135;
    }
    v69 = v22;
    v24 = v92;
    v23 = v93;
  }
  v25 = v95;
  LODWORD(v70) = v94;
  if (v23 == v24)
    v26 = v95;
  else
    v26 = v94;
  if (v26)
  {
    memmove(v22, v23, 8 * v26);
    v25 = v95;
  }
  HIDWORD(v70) = v25;
  v71[0] = v96;
  v75 = 0;
  __p = 0;
  v74 = 0;
  sub_1C4D6CDA0(&__p, v97, v98, 0xAAAAAAAAAAAAAAABLL * ((v98 - (_BYTE *)v97) >> 3));
  while (2)
  {
    if (v83 - (_BYTE *)v82 != v74 - (_BYTE *)__p)
    {
LABEL_92:
      v32 = *((_QWORD *)v83 - 3);
      if (v32)
        v33 = *(_BYTE *)(v32 + 8) == 1;
      else
        v33 = 0;
      if (v33)
        sub_1C60CD554();
      sub_1C63DD89C((char *)&v76);
      continue;
    }
    break;
  }
  if (v82 != v83)
  {
    v27 = (char *)__p + 8;
    v28 = (char *)v82 + 8;
    do
    {
      v29 = v28 - 8;
      if (*((_QWORD *)v28 - 1) != *((_QWORD *)v27 - 1))
        goto LABEL_92;
      v30 = v27[8];
      if (v28[8])
        v31 = v30 == 0;
      else
        v31 = 1;
      if (v31)
      {
        if ((v28[8] == 0) == (v30 != 0))
          goto LABEL_92;
      }
      else if (*(_QWORD *)v28 != *(_QWORD *)v27)
      {
        goto LABEL_92;
      }
      v27 += 24;
      v28 += 24;
    }
    while (v29 + 24 != v83);
  }
  if (__p)
  {
    v74 = __p;
    operator delete(__p);
  }
  if (v69 != v68)
    free(v69);
  if (v82)
  {
    v83 = (char *)v82;
    operator delete(v82);
  }
  if (v77 != v76)
    free(v77);
  if (v97)
  {
    v98 = v97;
    operator delete(v97);
  }
  if (v93 != v92)
    free(v93);
  if (v90)
  {
    v91 = v90;
    operator delete(v90);
  }
  if (__src != v85)
    free(__src);
}

uint64_t llvm::VPlanVerifier::verifyPlanIsValid(llvm::VPlanVerifier *this, const llvm::VPlan *a2)
{
  _BYTE *v2;
  void *v3;
  void *v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  char *v8;
  char *i;
  _BYTE *v10;
  void *v11;
  void *v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  char *v16;
  char *j;
  _BYTE *v18;
  unsigned int v19;
  unsigned int v20;
  int v21;
  uint64_t v22;
  void *v23;
  _BYTE *v24;
  _BYTE *v25;
  unsigned int v26;
  unsigned int v27;
  int v28;
  void *v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  __int128 v33;
  void *v34;
  int v35;
  uint64_t v36;
  int v37;
  int v38;
  unsigned int v39;
  char *v40;
  char *k;
  char *v42;
  char *m;
  char *v44;
  char *n;
  _BYTE *v46;
  void *v47;
  void *v48;
  int v49;
  unsigned int v50;
  _BYTE *v51;
  void *v52;
  void *v53;
  int v54;
  unsigned int v55;
  _BYTE *v56;
  void *v57;
  void *v58;
  unsigned int v59;
  unsigned int v60;
  _BYTE *v61;
  void *v62;
  void *v63;
  int v64;
  unsigned int v65;
  _BYTE *v66;
  unsigned int v67;
  int v68;
  __int128 v69;
  void *v70;
  _BYTE *v71;
  unsigned int v72;
  _BYTE *v73;
  _BYTE *v74;
  unsigned int v75;
  _BYTE *v76;
  _BYTE *v77;
  void *v78;
  _BYTE *v79;
  unsigned int v80;
  _BYTE *v81;
  _BYTE *v82;
  _BYTE *v83;
  _BYTE *v84;
  _BYTE *v85;
  unsigned int v86;
  int v87;
  void *v88;
  void *v89;
  _BYTE *v90;
  _BYTE *v91;
  void *v92;
  unsigned int v93;
  void *v94;
  uint64_t v95;
  int v96;
  char *v97;
  char *ii;
  char *v99;
  char *jj;
  _BYTE *v101;
  uint64_t kk;
  char *v103;
  char *mm;
  char *v105;
  char *nn;
  char *v107;
  char *i1;
  char *v109;
  char *i2;
  _BYTE *v111;
  void *v112;
  void *v113;
  int v114;
  unsigned int v115;
  _BYTE *v116;
  void *v117;
  void *v118;
  int v119;
  unsigned int v120;
  _BYTE *v121;
  unsigned int v122;
  unsigned int v123;
  int v124;
  void *v125;
  _BYTE *v126;
  unsigned int v127;
  char *v128;
  void *v129;
  _BYTE *v130;
  void *v131;
  void *v132;
  int v133;
  unsigned int v134;
  _BYTE *v135;
  void *v136;
  void *v137;
  int v138;
  unsigned int v139;
  _BYTE *v140;
  unsigned int v141;
  unsigned int v142;
  void *v143;
  uint64_t v144;
  void *v145;
  _BYTE *v146;
  unsigned int v147;
  _BYTE *v148;
  unsigned int v149;
  void *v150;
  void *v151;
  _BYTE *v152;
  _BYTE *v153;
  _BYTE *v154;
  _BYTE *v155;
  _BYTE *v156;
  unsigned int v157;
  _BYTE *v158;
  void *v159;
  unsigned int v160;
  _BYTE *v161;
  unsigned int v162;
  void *v163;
  _BYTE *v164;
  unsigned int v165;
  _BYTE *v166;
  void *v167;
  unsigned int v168;
  _BYTE *v169;
  _BYTE *v170;
  unsigned int v171;
  _BYTE *v172;
  _BYTE *v173;
  _BYTE *v174;
  _BYTE *v175;
  unsigned int v176;
  unsigned int v177;
  _BYTE *v178;
  _BYTE *v179;
  void *v180;
  _BYTE *v181;
  _BYTE *v182;
  uint64_t v183;
  _BYTE *v184;
  char *v185;
  char *i3;
  char *v187;
  char *i4;
  char *v189;
  char *i5;
  char *v191;
  char *i6;
  char *v193;
  char *i7;
  _BYTE *v195;
  uint64_t i8;
  _BYTE *v197;
  uint64_t i9;
  _BYTE *v199;
  uint64_t i10;
  char *v201;
  char *i11;
  char *v203;
  char *i12;
  _BYTE *v205;
  uint64_t i13;
  _BYTE *v207;
  const void *v208;
  void *v209;
  int v210;
  unsigned int v211;
  _BYTE *v212;
  void *v213;
  void *v214;
  int v215;
  unsigned int v216;
  _BYTE *v217;
  void *v218;
  void *v219;
  int v220;
  unsigned int v221;
  _BYTE *v222;
  void *v223;
  void *v224;
  unsigned int v225;
  unsigned int v226;
  llvm *v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  uint64_t v232;
  int v233;
  BOOL v234;
  uint64_t v236;
  _QWORD *v237;
  _QWORD *i55;
  _QWORD *v239;
  unsigned __int8 *v240;
  char *v241;
  uint64_t v242;
  uint64_t v243;
  int v244;
  BOOL v245;
  char *v247;
  char *i14;
  char *v249;
  char *i15;
  _BYTE *v251;
  uint64_t i16;
  char *v253;
  char *i17;
  _BYTE *v255;
  uint64_t i18;
  _BYTE *v257;
  uint64_t i19;
  _BYTE *v259;
  uint64_t i20;
  char *v261;
  char *i21;
  llvm *v263;
  uint64_t v264;
  uint64_t v265;
  llvm::raw_ostream *v266;
  void *v267;
  llvm::raw_ostream *v268;
  _WORD *v269;
  llvm *v270;
  llvm::raw_ostream *v271;
  uint64_t v272;
  llvm::VPDef *v273;
  char *v274;
  char *i56;
  char *v276;
  char *i57;
  _BYTE *v278;
  uint64_t i58;
  char *v280;
  char *i59;
  _BYTE *v282;
  uint64_t i60;
  _BYTE *v284;
  uint64_t i61;
  _BYTE *v286;
  uint64_t i62;
  char *v288;
  char *i63;
  uint64_t v290;
  BOOL v291;
  llvm::raw_ostream *v292;
  void *v293;
  const char *v294;
  size_t v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  _BYTE *v300;
  const void *v301;
  void *v302;
  unsigned int v303;
  unsigned int v304;
  int v305;
  char *v306;
  char *i22;
  void *v308;
  void *v309;
  void *v310;
  void *v311;
  uint64_t v312;
  _BYTE *v313;
  uint64_t i64;
  _BYTE *v315;
  uint64_t i65;
  unsigned int v318;
  unsigned int v319;
  unsigned int v320;
  unsigned int v321;
  unsigned int v322;
  unsigned int v323;
  unsigned int v324;
  unsigned int v325;
  unsigned int v326;
  unsigned int v327;
  unsigned int v328;
  unsigned int v329;
  unsigned int v330;
  unsigned int v331;
  _BYTE *v332;
  const void *v333;
  void *v334;
  unsigned int v335;
  unsigned int v336;
  int v337;
  char *v338;
  char *i23;
  _BYTE *v340;
  unsigned int v341;
  unsigned int v342;
  int v343;
  uint64_t v344;
  void *v345;
  _BYTE *v346;
  _BYTE *v347;
  unsigned int v348;
  unsigned int v349;
  int v350;
  void *v351;
  uint64_t v352;
  unsigned int v353;
  int v354;
  __int128 v355;
  void *v356;
  int v357;
  uint64_t v358;
  int v359;
  int v360;
  unsigned int v361;
  char *v362;
  char *i24;
  char *v364;
  char *i25;
  char *v366;
  char *i26;
  _BYTE *v368;
  void *v369;
  void *v370;
  int v371;
  unsigned int v372;
  _BYTE *v373;
  void *v374;
  void *v375;
  int v376;
  unsigned int v377;
  _BYTE *v378;
  void *v379;
  void *v380;
  int v381;
  unsigned int v382;
  _BYTE *v383;
  void *v384;
  void *v385;
  int v386;
  unsigned int v387;
  _BYTE *v388;
  uint64_t v389;
  void *v390;
  _BYTE *v391;
  unsigned int v392;
  _BYTE *v393;
  _BYTE *v394;
  unsigned int v395;
  _BYTE *v396;
  _BYTE *v397;
  unsigned int v398;
  int v399;
  void *v400;
  uint64_t v401;
  void *v402;
  _BYTE *v403;
  unsigned int v404;
  _BYTE *v405;
  int v406;
  _BYTE *v407;
  uint64_t v408;
  void *v409;
  _BYTE *v410;
  _BYTE *v411;
  uint64_t v412;
  void *v413;
  int v414;
  unsigned int v415;
  _BYTE *v416;
  _BYTE *v417;
  char *v418;
  char *i27;
  char *v420;
  char *i28;
  char *v422;
  char *i29;
  char *v424;
  char *i30;
  char *v426;
  char *i31;
  char *v428;
  char *i32;
  char *v430;
  char *i33;
  _BYTE *v432;
  void *v433;
  void *v434;
  int v435;
  unsigned int v436;
  _BYTE *v437;
  void *v438;
  void *v439;
  int v440;
  unsigned int v441;
  _BYTE *v442;
  unsigned int v443;
  unsigned int v444;
  int v445;
  void *v446;
  _BYTE *v447;
  unsigned int v448;
  uint64_t v449;
  void *v450;
  _BYTE *v451;
  void *v452;
  void *v453;
  int v454;
  unsigned int v455;
  _BYTE *v456;
  void *v457;
  void *v458;
  int v459;
  unsigned int v460;
  _BYTE *v461;
  unsigned int v462;
  unsigned int v463;
  int v464;
  void *v465;
  _BYTE *v466;
  unsigned int v467;
  _BYTE *v468;
  void *v469;
  void *v470;
  _BYTE *v471;
  _BYTE *v472;
  _BYTE *v473;
  _BYTE *v474;
  _BYTE *v475;
  unsigned int v476;
  _BYTE *v477;
  _BYTE *v478;
  void *v479;
  _BYTE *v480;
  unsigned int v481;
  _BYTE *v482;
  _BYTE *v483;
  unsigned int v484;
  unsigned int v485;
  _BYTE *v486;
  _BYTE *v487;
  _BYTE *v488;
  _BYTE *v489;
  unsigned int v490;
  _BYTE *v491;
  _BYTE *v492;
  _BYTE *v493;
  _BYTE *v494;
  _BYTE *v495;
  unsigned int v496;
  _BYTE *v497;
  void *v498;
  char *v499;
  char *i34;
  char *v501;
  char *i35;
  char *v503;
  char *i36;
  char *v505;
  char *i37;
  char *v507;
  char *i38;
  _BYTE *v509;
  uint64_t i39;
  _BYTE *v511;
  uint64_t i40;
  _BYTE *v513;
  uint64_t i41;
  char *v515;
  char *i42;
  char *v517;
  char *i43;
  _BYTE *v519;
  uint64_t i44;
  _BYTE *v521;
  uint64_t i45;
  _BYTE *v523;
  uint64_t i46;
  _BYTE *v525;
  const void *v526;
  void *v527;
  int v528;
  unsigned int v529;
  _BYTE *v530;
  void *v531;
  void *v532;
  int v533;
  unsigned int v534;
  _BYTE *v535;
  void *v536;
  void *v537;
  int v538;
  unsigned int v539;
  _BYTE *v540;
  void *v541;
  void *v542;
  unsigned int v543;
  unsigned int v544;
  llvm *v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  uint64_t v549;
  uint64_t v550;
  int v551;
  BOOL v552;
  uint64_t v554;
  char *v555;
  uint64_t v556;
  uint64_t v557;
  int v558;
  BOOL v559;
  llvm::raw_ostream *v561;
  void *v562;
  const char *v563;
  size_t v564;
  void *v565;
  char *v566;
  char *i47;
  char *v568;
  char *i48;
  _BYTE *v570;
  uint64_t i49;
  char *v572;
  char *i50;
  _BYTE *v574;
  uint64_t i51;
  _BYTE *v576;
  uint64_t i52;
  _BYTE *v578;
  uint64_t i53;
  char *v580;
  char *i54;
  unsigned int v582;
  unsigned int v583;
  unsigned int v584;
  unsigned int v585;
  unsigned int v586;
  unsigned int v587;
  unsigned int v588;
  unsigned int v589;
  unsigned int v590;
  unsigned int v591;
  unsigned int v592;
  unsigned int v593;
  unsigned int v594;
  unsigned int v595;
  uint64_t v596;
  uint64_t v598;
  uint64_t v599;
  void *v600;
  void *v601;
  void *v602;
  void *v603;
  _BYTE *v604;
  int v605;
  int v606;
  void *v607;
  unsigned int v608;
  void *v609;
  unsigned int v610;
  uint64_t v611;
  void *v612;
  uint64_t v613;
  void *v614;
  void *v615;
  uint64_t v616;
  void *v617;
  uint64_t v618;
  int v619;
  uint64_t v620;
  int v621;
  uint64_t v622;
  int v623;
  unsigned int v624;
  int v625;
  unsigned int v626;
  unsigned int v627;
  int v628;
  void *v629;
  unsigned int v630;
  void *v631;
  unsigned int v632;
  _BYTE *v633;
  void *v634;
  unsigned int v635;
  void *v636;
  _BYTE *v637;
  _BYTE *v638;
  _BYTE *v639;
  int v640;
  uint64_t v641;
  unsigned int v642;
  unsigned int v643;
  void *v644;
  void *v645;
  unsigned int v646;
  uint64_t v647;
  void *v648;
  _BYTE *v649;
  _BYTE *v650;
  void *v651;
  int v652;
  uint64_t v653;
  int v654;
  unsigned int v655;
  unsigned int v656;
  unsigned int v657;
  void *v658;
  unsigned int v659;
  void *v660;
  unsigned int v661;
  void *v662;
  void *__dst;
  void *__dsta;
  void *__dstb;
  void *__dstc;
  _BYTE *__dstd;
  unsigned int v668;
  int v669;
  int v670;
  void *v671;
  unsigned int v672;
  uint64_t v673;
  int v674;
  void *v675;
  void *v676;
  unsigned int v677;
  unsigned int v678;
  uint64_t v679;
  void *v680;
  int v681;
  unsigned int v682;
  int v683;
  _BYTE *v684;
  void *v685;
  void *v686;
  void *v687;
  _BYTE *v688;
  _BYTE *v689;
  void *v690;
  unsigned int v691;
  unsigned int v692;
  int v693;
  int v694;
  unsigned int v695;
  int v696;
  void *v697;
  void *v698;
  void *v699;
  unsigned int v700;
  void *v701;
  void *v702;
  _BYTE *v703;
  _BYTE *v704;
  uint64_t v705;
  void *v706;
  _BYTE *v707;
  unsigned int v708;
  uint64_t v709;
  void *v710;
  _BYTE *v711;
  _BYTE *v712;
  unsigned int v713;
  unsigned int v714;
  int v715;
  _BYTE v716[49];
  void *v717;
  _BYTE *v718;
  uint64_t v719;
  void *v720;
  void *v721;
  unsigned int v722;
  unsigned int v723;
  int v724;
  void *v725;
  _BYTE *v726;
  _BYTE *v727;
  _BYTE *v728;
  unsigned int v729;
  int v730;
  int v731;
  _BYTE v732[64];
  __int128 v733;
  void *v734;
  _BYTE *v735;
  void *v736;
  unsigned int v737;
  int v738;
  int v739;
  _BYTE v740[64];
  void *v741;
  _BYTE *v742;
  void *v743;
  _BYTE *v744;
  void *v745;
  unsigned int v746;
  int v747;
  int v748;
  _BYTE v749[64];
  void *v750;
  _BYTE *v751;
  void *v752;
  _BYTE *v753;
  void *v754;
  unsigned int v755;
  unsigned int v756;
  int v757;
  _BYTE v758[64];
  void *v759;
  _BYTE *v760;
  void *v761;
  void *v762;
  void *__src;
  unsigned int v764;
  unsigned int v765;
  int v766;
  void *v767;
  _BYTE *v768;
  void *v769;
  void *v770;
  unsigned int v771;
  unsigned int v772;
  int v773;
  void *v774;
  _BYTE *v775;
  _BYTE *v776;
  void *v777;
  unsigned int v778;
  int v779;
  int v780;
  _BYTE v781[64];
  __int128 __p;
  void *v783;
  _BYTE *v784;
  void *v785;
  unsigned int v786;
  int v787;
  int v788;
  _BYTE v789[64];
  void *v790;
  _BYTE *v791;
  void *v792;
  _BYTE *v793;
  void *v794;
  unsigned int v795;
  int v796;
  int v797;
  _BYTE v798[64];
  void *v799;
  _BYTE *v800;
  void *v801;
  _BYTE *v802;
  void *v803;
  unsigned int v804;
  int v805;
  int v806;
  _BYTE v807[64];
  void *v808;
  _BYTE *v809;
  void *v810;
  _BYTE *v811;
  void *v812;
  unsigned int v813;
  int v814;
  int v815;
  _BYTE v816[64];
  void *v817;
  _BYTE *v818;
  void *v819;
  _BYTE *v820;
  void *v821;
  unsigned int v822;
  int v823;
  int v824;
  _BYTE v825[64];
  __int128 v826;
  void *v827;
  _BYTE *v828;
  void *v829;
  unsigned int v830;
  int v831;
  int v832;
  _BYTE v833[64];
  void *v834;
  char *v835;
  uint64_t v836;
  _BYTE *v837;
  void *v838;
  uint64_t v839;
  int v840;
  _BYTE v841[64];
  __int128 v842;
  void *v843;
  _BYTE *v844;
  void *v845;
  uint64_t v846;
  int v847;
  _BYTE v848[64];
  void *v849;
  _BYTE *v850;
  void *v851;
  _BYTE *v852;
  void *v853;
  unint64_t v854;
  int v855;
  _BYTE v856[64];
  __int128 v857;
  void *v858;
  _BYTE *v859;
  void *v860;
  unint64_t v861;
  int v862;
  _BYTE v863[64];
  void *v864;
  uint64_t v865;
  void *v866;
  _BYTE *v867;
  void *v868;
  uint64_t v869;
  int v870;
  _BYTE v871[64];
  __int128 v872;
  void *v873;
  _BYTE *v874;
  void *v875;
  uint64_t v876;
  int v877;
  _BYTE v878[64];
  void *v879;
  char *v880;
  void *v881;
  _BYTE *v882;
  void *v883;
  unint64_t v884;
  int v885;
  _BYTE v886[64];
  __int128 v887;
  void *v888;
  _BYTE *v889;
  void *v890;
  unint64_t v891;
  int v892;
  _BYTE v893[64];
  void *v894;
  char *v895;
  void *v896;
  _BYTE *v897;
  void *v898;
  unint64_t v899;
  int v900;
  _BYTE v901[64];
  __int128 v902;
  void *v903;
  _BYTE *v904;
  void *v905;
  unint64_t v906;
  int v907;
  _BYTE v908[64];
  void *v909;
  uint64_t v910;
  void *v911;
  _BYTE *v912;
  void *v913;
  unint64_t v914;
  int v915;
  _BYTE v916[64];
  __int128 v917;
  void *v918;
  _BYTE *v919;
  void *v920;
  int v921;
  unsigned int v922;
  int v923;
  _BYTE v924[64];
  void *v925;
  char *v926;
  void *v927;

  sub_1C60D30F8((uint64_t)&v762, *(_QWORD *)this);
  v2 = v856;
  v852 = v856;
  v3 = __src;
  if (__src == v762)
  {
    v853 = v856;
    v4 = __src;
  }
  else
  {
    v318 = v764;
    v2 = malloc_type_malloc(8 * v764, 0x4065EBACuLL);
    if (!v2)
    {
      if (v318)
        goto LABEL_1468;
      v2 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v2)
        goto LABEL_1468;
    }
    v853 = v2;
    v4 = v762;
    v3 = __src;
  }
  v5 = v765;
  LODWORD(v854) = v764;
  if (v3 == v4)
    v6 = v765;
  else
    v6 = v764;
  if (v6)
  {
    memmove(v2, v3, 8 * v6);
    v5 = v765;
  }
  HIDWORD(v854) = v5;
  v855 = v766;
  v858 = 0;
  v857 = 0uLL;
  sub_1C60874BC((char *)&v857, (uint64_t)v767, (uint64_t)v768, (v768 - (_BYTE *)v767) >> 5);
  v776 = v781;
  if (v853 == v852)
  {
    v777 = v781;
    v7 = HIDWORD(v854);
    if (HIDWORD(v854))
      memmove(v781, v853, 8 * HIDWORD(v854));
  }
  else
  {
    v777 = v853;
    v853 = v852;
    v7 = HIDWORD(v854);
  }
  v778 = v854;
  v779 = v7;
  v780 = v855;
  v854 = 8;
  v855 = 0;
  __p = v857;
  v783 = v858;
  v858 = 0;
  v857 = 0uLL;
  sub_1C60D3308((uint64_t)&v897, (uint64_t)&v776);
  v8 = (char *)__p;
  if ((_QWORD)__p)
  {
    for (i = (char *)*((_QWORD *)&__p + 1); i != v8; i -= 32)
    {
      if (*(i - 8))
        *(i - 8) = 0;
    }
    *((_QWORD *)&__p + 1) = v8;
    operator delete(v8);
  }
  if (v777 != v776)
    free(v777);
  v10 = v871;
  v867 = v871;
  v11 = v770;
  if (v770 == v769)
  {
    v868 = v871;
    v12 = v770;
  }
  else
  {
    v319 = v771;
    v10 = malloc_type_malloc(8 * v771, 0x4065EBACuLL);
    if (!v10)
    {
      if (v319)
        goto LABEL_1468;
      v10 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v10)
        goto LABEL_1468;
    }
    v868 = v10;
    v12 = v769;
    v11 = v770;
  }
  v13 = v772;
  LODWORD(v869) = v771;
  if (v11 == v12)
    v14 = v772;
  else
    v14 = v771;
  if (v14)
  {
    memmove(v10, v11, 8 * v14);
    v13 = v772;
  }
  HIDWORD(v869) = v13;
  v870 = v773;
  v873 = 0;
  v872 = 0uLL;
  sub_1C60874BC((char *)&v872, (uint64_t)v774, (uint64_t)v775, (v775 - (_BYTE *)v774) >> 5);
  v776 = v781;
  if (v868 == v867)
  {
    v777 = v781;
    v15 = HIDWORD(v869);
    if (HIDWORD(v869))
      memmove(v781, v868, 8 * HIDWORD(v869));
  }
  else
  {
    v777 = v868;
    v868 = v867;
    v15 = HIDWORD(v869);
  }
  v778 = v869;
  v779 = v15;
  v780 = v870;
  v869 = 8;
  v870 = 0;
  __p = v872;
  v783 = v873;
  v873 = 0;
  v872 = 0uLL;
  sub_1C60D3308((uint64_t)&v882, (uint64_t)&v776);
  v16 = (char *)__p;
  if ((_QWORD)__p)
  {
    for (j = (char *)*((_QWORD *)&__p + 1); j != v16; j -= 32)
    {
      if (*(j - 8))
        *(j - 8) = 0;
    }
    *((_QWORD *)&__p + 1) = v16;
    operator delete(v16);
  }
  if (v777 != v776)
    free(v777);
  v776 = v781;
  v18 = v898;
  if (v898 == v897)
  {
    v777 = v781;
    v19 = HIDWORD(v899);
    if (HIDWORD(v899))
      memmove(v781, v898, 8 * HIDWORD(v899));
    v18 = v781;
  }
  else
  {
    v777 = v898;
    v898 = v897;
    v19 = HIDWORD(v899);
  }
  v20 = v899;
  v21 = v900;
  v778 = v899;
  v779 = v19;
  v780 = v900;
  v899 = 8;
  v900 = 0;
  v22 = *((_QWORD *)&v902 + 1);
  v698 = (void *)v902;
  __p = v902;
  v23 = v903;
  v783 = v903;
  v903 = 0;
  v902 = 0uLL;
  v912 = v916;
  v24 = v883;
  v25 = v882;
  v704 = v882;
  if (v883 == v882)
  {
    v913 = v916;
    v26 = HIDWORD(v884);
    if (HIDWORD(v884))
    {
      v27 = v20;
      v28 = v21;
      v29 = v23;
      v30 = v22;
      memmove(v916, v883, 8 * HIDWORD(v884));
      v22 = v30;
      v23 = v29;
      v21 = v28;
      v20 = v27;
    }
    v25 = v24;
    v24 = v916;
  }
  else
  {
    v883 = v882;
    v26 = HIDWORD(v884);
  }
  v31 = v884;
  v32 = v885;
  v884 = 8;
  v885 = 0;
  v33 = v887;
  v917 = v887;
  v34 = v888;
  v918 = v888;
  v888 = 0;
  v887 = 0uLL;
  v811 = v816;
  if (v18 == v781)
  {
    v812 = v816;
    if (v19)
    {
      v692 = v20;
      v35 = v21;
      v676 = v23;
      v684 = v25;
      v36 = v22;
      v37 = v32;
      v668 = v31;
      memcpy(v816, v781, 8 * v19);
      v31 = v668;
      v32 = v37;
      v22 = v36;
      v23 = v676;
      v25 = v684;
      v21 = v35;
      v20 = v692;
    }
  }
  else
  {
    v812 = v18;
  }
  v813 = v20;
  v814 = v19;
  v815 = v21;
  v817 = v698;
  v818 = (_BYTE *)v22;
  v819 = v23;
  v820 = v825;
  if (v24 == v916)
  {
    v821 = v825;
    if (v26)
    {
      v38 = v32;
      v39 = v31;
      memcpy(v825, v916, 8 * v26);
      v31 = v39;
      v32 = v38;
    }
  }
  else
  {
    v821 = v24;
  }
  v822 = v31;
  v823 = v26;
  v824 = v32;
  v826 = v33;
  v827 = v34;
  if (v25 != v704)
    free(v25);
  v40 = (char *)v872;
  if ((_QWORD)v872)
  {
    for (k = (char *)*((_QWORD *)&v872 + 1); k != v40; k -= 32)
    {
      if (*(k - 8))
        *(k - 8) = 0;
    }
    *((_QWORD *)&v872 + 1) = v40;
    operator delete(v40);
  }
  if (v868 != v867)
    free(v868);
  v42 = (char *)v902;
  if ((_QWORD)v902)
  {
    for (m = (char *)*((_QWORD *)&v902 + 1); m != v42; m -= 32)
    {
      if (*(m - 8))
        *(m - 8) = 0;
    }
    *((_QWORD *)&v902 + 1) = v42;
    operator delete(v42);
  }
  if (v898 != v897)
    free(v898);
  v44 = (char *)v857;
  if ((_QWORD)v857)
  {
    for (n = (char *)*((_QWORD *)&v857 + 1); n != v44; n -= 32)
    {
      if (*(n - 8))
        *(n - 8) = 0;
    }
    *((_QWORD *)&v857 + 1) = v44;
    operator delete(v44);
  }
  if (v853 != v852)
    free(v853);
  v46 = v871;
  v867 = v871;
  v47 = v812;
  if (v812 == v811)
  {
    v868 = v871;
    v48 = v812;
  }
  else
  {
    v320 = v813;
    v46 = malloc_type_malloc(8 * v813, 0x4065EBACuLL);
    if (!v46)
    {
      if (v320)
        goto LABEL_1468;
      v46 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v46)
        goto LABEL_1468;
    }
    v868 = v46;
    v48 = v811;
    v47 = v812;
  }
  v49 = v814;
  LODWORD(v869) = v813;
  if (v47 == v48)
    v50 = v814;
  else
    v50 = v813;
  if (v50)
  {
    memmove(v46, v47, 8 * v50);
    v49 = v814;
  }
  HIDWORD(v869) = v49;
  v870 = v815;
  v873 = 0;
  v872 = 0uLL;
  sub_1C60874BC((char *)&v872, (uint64_t)v817, (uint64_t)v818, (v818 - (_BYTE *)v817) >> 5);
  v51 = v841;
  v837 = v841;
  v52 = v821;
  if (v821 == v820)
  {
    v838 = v841;
    v53 = v821;
  }
  else
  {
    v321 = v822;
    v51 = malloc_type_malloc(8 * v822, 0x4065EBACuLL);
    if (!v51)
    {
      if (v321)
        goto LABEL_1468;
      v51 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v51)
        goto LABEL_1468;
    }
    v838 = v51;
    v53 = v820;
    v52 = v821;
  }
  v54 = v823;
  LODWORD(v839) = v822;
  if (v52 == v53)
    v55 = v823;
  else
    v55 = v822;
  if (v55)
  {
    memmove(v51, v52, 8 * v55);
    v54 = v823;
  }
  HIDWORD(v839) = v54;
  v840 = v824;
  v843 = 0;
  v842 = 0uLL;
  sub_1C60874BC((char *)&v842, v826, *((uint64_t *)&v826 + 1), (uint64_t)(*((_QWORD *)&v826 + 1) - v826) >> 5);
  sub_1C60D3408((uint64_t)&v882, (uint64_t)&v867, (uint64_t)&v837);
  v56 = v716;
  v711 = v716;
  v57 = v821;
  if (v821 == v820)
  {
    v712 = v716;
    v58 = v821;
  }
  else
  {
    v322 = v822;
    v56 = malloc_type_malloc(8 * v822, 0x4065EBACuLL);
    if (!v56)
    {
      if (v322)
        goto LABEL_1468;
      v56 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v56)
        goto LABEL_1468;
    }
    v712 = v56;
    v58 = v820;
    v57 = v821;
  }
  v59 = v823;
  v713 = v822;
  if (v57 == v58)
    v60 = v823;
  else
    v60 = v822;
  if (v60)
  {
    memmove(v56, v57, 8 * v60);
    v59 = v823;
  }
  v714 = v59;
  v715 = v824;
  v718 = 0;
  v719 = 0;
  v717 = 0;
  sub_1C60874BC((char *)&v717, v826, *((uint64_t *)&v826 + 1), (uint64_t)(*((_QWORD *)&v826 + 1) - v826) >> 5);
  v61 = v833;
  v828 = v833;
  v62 = v821;
  if (v821 == v820)
  {
    v829 = v833;
    v63 = v821;
  }
  else
  {
    v323 = v822;
    v61 = malloc_type_malloc(8 * v822, 0x4065EBACuLL);
    if (!v61)
    {
      if (v323)
        goto LABEL_1468;
      v61 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v61)
        goto LABEL_1468;
    }
    v829 = v61;
    v63 = v820;
    v62 = v821;
  }
  v64 = v823;
  v830 = v822;
  if (v62 == v63)
    v65 = v823;
  else
    v65 = v822;
  if (v65)
  {
    memmove(v61, v62, 8 * v65);
    v64 = v823;
  }
  v831 = v64;
  v832 = v824;
  v836 = 0;
  v834 = 0;
  v835 = 0;
  sub_1C60874BC((char *)&v834, v826, *((uint64_t *)&v826 + 1), (uint64_t)(*((_QWORD *)&v826 + 1) - v826) >> 5);
  sub_1C60D3408((uint64_t)&v852, (uint64_t)&v711, (uint64_t)&v828);
  v912 = v916;
  v66 = v883;
  if (v883 == v882)
  {
    v913 = v916;
    v67 = HIDWORD(v884);
    if (HIDWORD(v884))
      memmove(v916, v883, 8 * HIDWORD(v884));
    v66 = v916;
  }
  else
  {
    v913 = v883;
    v883 = v882;
    v67 = HIDWORD(v884);
  }
  v68 = v885;
  v646 = v884;
  v914 = __PAIR64__(v67, v884);
  v915 = v885;
  v884 = 8;
  v885 = 0;
  v69 = v887;
  v917 = v887;
  v70 = v888;
  v888 = 0;
  v887 = 0uLL;
  v918 = v70;
  v919 = v924;
  v71 = v890;
  if (v890 == v889)
  {
    v920 = v924;
    v72 = HIDWORD(v891);
    if (HIDWORD(v891))
    {
      v73 = v66;
      memmove(v924, v890, 8 * HIDWORD(v891));
      v66 = v73;
    }
    v71 = v924;
  }
  else
  {
    v920 = v890;
    v890 = v889;
    v72 = HIDWORD(v891);
  }
  v677 = v891;
  v921 = v891;
  v922 = v72;
  v669 = v892;
  v923 = v892;
  v891 = 8;
  v892 = 0;
  v653 = (uint64_t)v895;
  v658 = v894;
  v925 = v894;
  v926 = v895;
  __dst = v896;
  v927 = v896;
  v896 = 0;
  v894 = 0;
  v895 = 0;
  v897 = v901;
  v74 = v853;
  v685 = v70;
  if (v853 == v852)
  {
    v898 = v901;
    v75 = HIDWORD(v854);
    if (HIDWORD(v854))
    {
      v76 = v66;
      v77 = v71;
      memmove(v901, v853, 8 * HIDWORD(v854));
      v71 = v77;
      v66 = v76;
    }
    v74 = v901;
  }
  else
  {
    v898 = v853;
    v853 = v852;
    v75 = HIDWORD(v854);
  }
  v899 = __PAIR64__(v75, v854);
  v900 = v855;
  v854 = 8;
  v855 = 0;
  v902 = v857;
  v78 = v858;
  v858 = 0;
  v857 = 0uLL;
  v903 = v78;
  v904 = v908;
  v79 = v860;
  v650 = v859;
  v642 = v899;
  v640 = v900;
  v633 = (_BYTE *)*((_QWORD *)&v902 + 1);
  v636 = (void *)v902;
  v629 = v78;
  if (v860 == v859)
  {
    v905 = v908;
    v80 = HIDWORD(v861);
    if (HIDWORD(v861))
    {
      v623 = v68;
      v81 = v66;
      v82 = v71;
      v83 = v74;
      memmove(v908, v860, 8 * HIDWORD(v861));
      v74 = v83;
      v71 = v82;
      v66 = v81;
      v68 = v623;
    }
    v604 = v79;
    v79 = v908;
  }
  else
  {
    v905 = v860;
    v860 = v859;
    v604 = v859;
    v80 = HIDWORD(v861);
  }
  v624 = v861;
  v906 = __PAIR64__(v80, v861);
  v619 = v862;
  v907 = v862;
  v861 = 8;
  v862 = 0;
  v611 = v865;
  v615 = v864;
  v909 = v864;
  v910 = v865;
  v607 = v866;
  v911 = v866;
  v866 = 0;
  v864 = 0;
  v865 = 0;
  v776 = v781;
  if (v66 == v916)
  {
    v777 = v781;
    if (v67)
    {
      v84 = v71;
      v85 = v74;
      memcpy(v781, v916, 8 * v67);
      v74 = v85;
      v71 = v84;
    }
  }
  else
  {
    v777 = v66;
  }
  v778 = v646;
  v779 = v67;
  v780 = v68;
  __p = v69;
  v783 = v685;
  v784 = v789;
  if (v71 == v924)
  {
    v785 = v789;
    v86 = v677;
    v87 = v669;
    v89 = v658;
    v88 = __dst;
    if (v72)
    {
      v90 = v74;
      memcpy(v789, v924, 8 * v72);
      v74 = v90;
    }
  }
  else
  {
    v785 = v71;
    v86 = v677;
    v87 = v669;
    v89 = v658;
    v88 = __dst;
  }
  v786 = v86;
  v787 = v72;
  v788 = v87;
  v790 = v89;
  v791 = (_BYTE *)v653;
  v792 = v88;
  v793 = v798;
  if (v74 == v901)
  {
    v794 = v798;
    v91 = v604;
    v92 = v607;
    v93 = v624;
    v95 = v611;
    v94 = v615;
    if (v75)
      memcpy(v798, v901, 8 * v75);
  }
  else
  {
    v794 = v74;
    v91 = v604;
    v92 = v607;
    v93 = v624;
    v95 = v611;
    v94 = v615;
  }
  v795 = v642;
  v796 = v75;
  v797 = v640;
  v799 = v636;
  v800 = v633;
  v801 = v629;
  v802 = v807;
  if (v79 == v908)
  {
    v803 = v807;
    v96 = v619;
    if (v80)
      memcpy(v807, v908, 8 * v80);
  }
  else
  {
    v803 = v79;
    v96 = v619;
  }
  v804 = v93;
  v805 = v80;
  v806 = v96;
  v808 = v94;
  v809 = (_BYTE *)v95;
  v810 = v92;
  if (v91 != v650)
  {
    free(v91);
    v97 = (char *)v857;
    if ((_QWORD)v857)
    {
      for (ii = (char *)*((_QWORD *)&v857 + 1); ii != v97; ii -= 32)
      {
        if (*(ii - 8))
          *(ii - 8) = 0;
      }
      *((_QWORD *)&v857 + 1) = v97;
      operator delete(v97);
    }
  }
  if (v853 != v852)
    free(v853);
  v99 = (char *)v834;
  if (v834)
  {
    for (jj = v835; jj != v99; jj -= 32)
    {
      if (*(jj - 8))
        *(jj - 8) = 0;
    }
    v835 = v99;
    operator delete(v99);
  }
  if (v829 != v828)
    free(v829);
  v101 = v717;
  if (v717)
  {
    for (kk = (uint64_t)v718; (_BYTE *)kk != v101; kk -= 32)
    {
      if (*(_BYTE *)(kk - 8))
        *(_BYTE *)(kk - 8) = 0;
    }
    v718 = v101;
    operator delete(v101);
  }
  if (v712 != v711)
    free(v712);
  v103 = (char *)v894;
  if (v894)
  {
    for (mm = v895; mm != v103; mm -= 32)
    {
      if (*(mm - 8))
        *(mm - 8) = 0;
    }
    v895 = v103;
    operator delete(v103);
  }
  if (v890 != v889)
    free(v890);
  v105 = (char *)v887;
  if ((_QWORD)v887)
  {
    for (nn = (char *)*((_QWORD *)&v887 + 1); nn != v105; nn -= 32)
    {
      if (*(nn - 8))
        *(nn - 8) = 0;
    }
    *((_QWORD *)&v887 + 1) = v105;
    operator delete(v105);
  }
  if (v883 != v882)
    free(v883);
  v107 = (char *)v842;
  if ((_QWORD)v842)
  {
    for (i1 = (char *)*((_QWORD *)&v842 + 1); i1 != v107; i1 -= 32)
    {
      if (*(i1 - 8))
        *(i1 - 8) = 0;
    }
    *((_QWORD *)&v842 + 1) = v107;
    operator delete(v107);
  }
  if (v838 != v837)
    free(v838);
  v109 = (char *)v872;
  if ((_QWORD)v872)
  {
    for (i2 = (char *)*((_QWORD *)&v872 + 1); i2 != v109; i2 -= 32)
    {
      if (*(i2 - 8))
        *(i2 - 8) = 0;
    }
    *((_QWORD *)&v872 + 1) = v109;
    operator delete(v109);
  }
  if (v868 != v867)
    free(v868);
  v111 = v871;
  v867 = v871;
  v112 = v777;
  if (v777 == v776)
  {
    v868 = v871;
    v113 = v777;
  }
  else
  {
    v324 = v778;
    v111 = malloc_type_malloc(8 * v778, 0x4065EBACuLL);
    if (!v111)
    {
      if (v324)
        goto LABEL_1468;
      v111 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v111)
        goto LABEL_1468;
    }
    v868 = v111;
    v113 = v776;
    v112 = v777;
  }
  v114 = v779;
  LODWORD(v869) = v778;
  if (v112 == v113)
    v115 = v779;
  else
    v115 = v778;
  if (v115)
  {
    memmove(v111, v112, 8 * v115);
    v114 = v779;
  }
  HIDWORD(v869) = v114;
  v870 = v780;
  v873 = 0;
  v872 = 0uLL;
  sub_1C60874BC((char *)&v872, __p, *((uint64_t *)&__p + 1), (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 5);
  v116 = v878;
  v874 = v878;
  v117 = v785;
  if (v785 == v784)
  {
    v875 = v878;
    v118 = v785;
  }
  else
  {
    v325 = v786;
    v116 = malloc_type_malloc(8 * v786, 0x4065EBACuLL);
    if (!v116)
    {
      if (v325)
        goto LABEL_1468;
      v116 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v116)
        goto LABEL_1468;
    }
    v875 = v116;
    v118 = v784;
    v117 = v785;
  }
  v119 = v787;
  LODWORD(v876) = v786;
  if (v117 == v118)
    v120 = v787;
  else
    v120 = v786;
  if (v120)
  {
    memmove(v116, v117, 8 * v120);
    v119 = v787;
  }
  HIDWORD(v876) = v119;
  v877 = v788;
  v881 = 0;
  v879 = 0;
  v880 = 0;
  sub_1C60874BC((char *)&v879, (uint64_t)v790, (uint64_t)v791, (v791 - (_BYTE *)v790) >> 5);
  v897 = v901;
  v121 = v868;
  if (v868 == v867)
  {
    v898 = v901;
    v122 = HIDWORD(v869);
    if (HIDWORD(v869))
      memmove(v901, v868, 8 * HIDWORD(v869));
    v121 = v901;
  }
  else
  {
    v898 = v868;
    v868 = v867;
    v122 = HIDWORD(v869);
  }
  v123 = v869;
  v124 = v870;
  v899 = __PAIR64__(v122, v869);
  v900 = v870;
  v869 = 8;
  v870 = 0;
  v705 = *((_QWORD *)&v872 + 1);
  __dsta = (void *)v872;
  v902 = v872;
  v125 = v873;
  v873 = 0;
  v872 = 0uLL;
  v699 = v125;
  v903 = v125;
  v904 = v908;
  v126 = v875;
  v678 = v123;
  v670 = v124;
  if (v875 == v874)
  {
    v905 = v908;
    v127 = HIDWORD(v876);
    if (HIDWORD(v876))
      memmove(v908, v875, 8 * HIDWORD(v876));
    v126 = v908;
  }
  else
  {
    v905 = v875;
    v875 = v874;
    v127 = HIDWORD(v876);
  }
  v659 = v876;
  v906 = __PAIR64__(v127, v876);
  v693 = v877;
  v907 = v877;
  v876 = 8;
  v877 = 0;
  v128 = v880;
  v686 = v879;
  v909 = v879;
  v910 = (uint64_t)v880;
  v129 = v881;
  v880 = 0;
  v881 = 0;
  v879 = 0;
  v911 = v129;
  if (v121 == v901)
  {
    if (v122)
      memcpy(v916, v901, 8 * v122);
    v121 = v916;
  }
  *(_QWORD *)&v917 = __dsta;
  *((_QWORD *)&v917 + 1) = v705;
  v918 = v699;
  v919 = v924;
  if (v126 == v908)
  {
    v920 = v924;
    if (v127)
      memcpy(v924, v908, 8 * v127);
    v126 = v924;
  }
  else
  {
    v920 = v126;
  }
  v921 = v659;
  v922 = v127;
  v923 = v693;
  v925 = v686;
  v926 = v128;
  v927 = v129;
  v882 = v886;
  if (v121 == v916)
  {
    v883 = v886;
    if (v122)
      memcpy(v886, v916, 8 * v122);
  }
  else
  {
    v883 = v121;
  }
  v884 = __PAIR64__(v122, v678);
  v885 = v670;
  *(_QWORD *)&v887 = __dsta;
  *((_QWORD *)&v887 + 1) = v705;
  v888 = v699;
  v889 = v893;
  if (v126 == v924)
  {
    v890 = v893;
    if (v127)
      memcpy(v893, v924, 8 * v127);
  }
  else
  {
    v890 = v126;
  }
  v891 = __PAIR64__(v127, v659);
  v892 = v693;
  v894 = v686;
  v895 = v128;
  v896 = v129;
  v130 = v841;
  v837 = v841;
  v131 = v794;
  if (v794 == v793)
  {
    v838 = v841;
    v132 = v794;
  }
  else
  {
    v326 = v795;
    v130 = malloc_type_malloc(8 * v795, 0x4065EBACuLL);
    if (!v130)
    {
      if (v326)
        goto LABEL_1468;
      v130 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v130)
        goto LABEL_1468;
    }
    v838 = v130;
    v132 = v793;
    v131 = v794;
  }
  LODWORD(v839) = v795;
  v133 = v796;
  if (v131 == v132)
    v134 = v796;
  else
    v134 = v795;
  if (v134)
  {
    memmove(v130, v131, 8 * v134);
    v133 = v796;
  }
  HIDWORD(v839) = v133;
  v840 = v797;
  v843 = 0;
  v842 = 0uLL;
  sub_1C60874BC((char *)&v842, (uint64_t)v799, (uint64_t)v800, (v800 - (_BYTE *)v799) >> 5);
  v135 = v848;
  v844 = v848;
  v136 = v803;
  if (v803 == v802)
  {
    v845 = v848;
    v137 = v803;
  }
  else
  {
    v327 = v804;
    v135 = malloc_type_malloc(8 * v804, 0x4065EBACuLL);
    if (!v135)
    {
      if (v327)
        goto LABEL_1468;
      v135 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v135)
        goto LABEL_1468;
    }
    v845 = v135;
    v137 = v802;
    v136 = v803;
  }
  LODWORD(v846) = v804;
  v138 = v805;
  if (v136 == v137)
    v139 = v805;
  else
    v139 = v804;
  if (v139)
  {
    memmove(v135, v136, 8 * v139);
    v138 = v805;
  }
  HIDWORD(v846) = v138;
  v847 = v806;
  v851 = 0;
  v849 = 0;
  v850 = 0;
  sub_1C60874BC((char *)&v849, (uint64_t)v808, (uint64_t)v809, (v809 - (_BYTE *)v808) >> 5);
  v897 = v901;
  v140 = v838;
  if (v838 == v837)
  {
    v898 = v901;
    v141 = HIDWORD(v839);
    if (HIDWORD(v839))
      memmove(v901, v838, 8 * HIDWORD(v839));
    v140 = v901;
  }
  else
  {
    v898 = v838;
    v838 = v837;
    v141 = HIDWORD(v839);
  }
  v142 = v839;
  v899 = __PAIR64__(v141, v839);
  v654 = v840;
  v900 = v840;
  v839 = 8;
  v840 = 0;
  v144 = *((_QWORD *)&v842 + 1);
  v143 = (void *)v842;
  v902 = v842;
  v145 = v843;
  v843 = 0;
  v842 = 0uLL;
  v706 = v145;
  v903 = v145;
  v904 = v908;
  v146 = v845;
  v637 = v844;
  if (v845 == v844)
  {
    v905 = v908;
    v147 = HIDWORD(v846);
    if (HIDWORD(v846))
    {
      v148 = v140;
      v149 = v142;
      v150 = v845;
      memmove(v908, v845, 8 * HIDWORD(v846));
      v140 = v148;
      v634 = v150;
      v142 = v149;
    }
    else
    {
      v634 = v845;
    }
    v146 = v908;
  }
  else
  {
    v905 = v845;
    v845 = v844;
    v634 = v844;
    v147 = HIDWORD(v846);
  }
  v700 = v846;
  v906 = __PAIR64__(v147, v846);
  v694 = v847;
  v907 = v847;
  v846 = 8;
  v847 = 0;
  v679 = (uint64_t)v850;
  v687 = v849;
  v909 = v849;
  v910 = (uint64_t)v850;
  v151 = v851;
  v850 = 0;
  v851 = 0;
  v849 = 0;
  v671 = v151;
  v911 = v151;
  if (v140 == v901)
  {
    if (v141)
    {
      v152 = v146;
      memcpy(v916, v901, 8 * v141);
      v146 = v152;
    }
    v140 = v916;
  }
  *(_QWORD *)&v917 = v143;
  *((_QWORD *)&v917 + 1) = v144;
  v918 = v706;
  v919 = v924;
  if (v146 == v908)
  {
    v920 = v924;
    if (v147)
    {
      v153 = v140;
      memcpy(v924, v908, 8 * v147);
      v140 = v153;
    }
    v146 = v924;
  }
  else
  {
    v920 = v146;
  }
  v921 = v700;
  v922 = v147;
  v923 = v694;
  v925 = v687;
  v926 = (char *)v679;
  v927 = v671;
  v852 = v856;
  if (v140 == v916)
  {
    v853 = v856;
    v140 = v856;
    if (v141)
    {
      v154 = v146;
      memcpy(v856, v916, 8 * v141);
      v146 = v154;
      v140 = v856;
    }
  }
  else
  {
    v853 = v140;
  }
  v854 = __PAIR64__(v141, v142);
  v855 = v654;
  *(_QWORD *)&v857 = v143;
  *((_QWORD *)&v857 + 1) = v144;
  v858 = v706;
  v859 = v863;
  v647 = v144;
  if (v146 == v924)
  {
    v860 = v863;
    v146 = v863;
    if (v147)
    {
      v155 = v140;
      memcpy(v863, v924, 8 * v147);
      v140 = v155;
      v146 = v863;
    }
  }
  else
  {
    v860 = v146;
  }
  v861 = __PAIR64__(v147, v700);
  v862 = v694;
  v864 = v687;
  v865 = v679;
  v866 = v671;
  v912 = v916;
  v156 = v883;
  if (v883 == v882)
  {
    v913 = v916;
    v157 = HIDWORD(v884);
    if (HIDWORD(v884))
    {
      v158 = v140;
      v159 = v143;
      v160 = v142;
      v161 = v146;
      v162 = HIDWORD(v884);
      memmove(v916, v883, 8 * HIDWORD(v884));
      v157 = v162;
      v146 = v161;
      v142 = v160;
      v143 = v159;
      v140 = v158;
    }
    v156 = v916;
  }
  else
  {
    v913 = v883;
    v883 = v882;
    v157 = HIDWORD(v884);
  }
  v630 = v884;
  v914 = __PAIR64__(v157, v884);
  v643 = v157;
  v625 = v885;
  v915 = v885;
  v884 = 8;
  v885 = 0;
  v616 = *((_QWORD *)&v887 + 1);
  v620 = v887;
  v917 = v887;
  v163 = v888;
  v888 = 0;
  v887 = 0uLL;
  v612 = v163;
  v918 = v163;
  v919 = v924;
  v164 = v890;
  if (v890 == v889)
  {
    v920 = v924;
    v165 = HIDWORD(v891);
    if (HIDWORD(v891))
    {
      v166 = v140;
      v167 = v143;
      v168 = v142;
      v169 = v146;
      v170 = v156;
      memmove(v924, v890, 8 * HIDWORD(v891));
      v156 = v170;
      v146 = v169;
      v142 = v168;
      v143 = v167;
      v140 = v166;
    }
    v164 = v924;
  }
  else
  {
    v920 = v890;
    v890 = v889;
    v165 = HIDWORD(v891);
  }
  v608 = v891;
  v921 = v891;
  v922 = v165;
  v605 = v892;
  v923 = v892;
  v891 = 8;
  v892 = 0;
  v598 = (uint64_t)v895;
  v600 = v894;
  v925 = v894;
  v926 = v895;
  v602 = v896;
  v927 = v896;
  v895 = 0;
  v896 = 0;
  v894 = 0;
  v897 = v901;
  v651 = v143;
  if (v140 == v856)
  {
    v898 = v901;
    v171 = v142;
    if (v141)
    {
      v172 = v146;
      v173 = v156;
      memcpy(v901, v856, 8 * v141);
      v156 = v173;
      v146 = v172;
    }
    v140 = v901;
  }
  else
  {
    v171 = v142;
    v898 = v140;
    v853 = v856;
  }
  v899 = __PAIR64__(v141, v171);
  v900 = v654;
  v854 = 8;
  v855 = 0;
  *(_QWORD *)&v902 = v651;
  *((_QWORD *)&v902 + 1) = v647;
  v858 = 0;
  v857 = 0uLL;
  v903 = v706;
  v904 = v908;
  if (v146 == v863)
  {
    v905 = v908;
    if (v147)
    {
      v174 = v140;
      v175 = v156;
      memcpy(v908, v863, 8 * v147);
      v156 = v175;
      v140 = v174;
    }
    v146 = v908;
  }
  else
  {
    v905 = v146;
    v860 = v863;
  }
  v906 = __PAIR64__(v147, v700);
  v907 = v694;
  v861 = 8;
  v862 = 0;
  v909 = v687;
  v910 = v679;
  v911 = v671;
  v865 = 0;
  v866 = 0;
  v864 = 0;
  v727 = v732;
  if (v156 == v916)
  {
    v728 = v732;
    v176 = v141;
    v177 = v643;
    if (v643)
    {
      v178 = v140;
      v179 = v146;
      memcpy(v732, v916, 8 * v643);
      v177 = v643;
      v146 = v179;
      v140 = v178;
    }
  }
  else
  {
    v728 = v156;
    v176 = v141;
    v177 = v643;
  }
  v729 = v630;
  v730 = v177;
  v731 = v625;
  *(_QWORD *)&v733 = v620;
  *((_QWORD *)&v733 + 1) = v616;
  v734 = v612;
  v735 = v740;
  if (v164 == v924)
  {
    v736 = v740;
    v180 = v637;
    if (v165)
    {
      v181 = v140;
      v182 = v146;
      memcpy(v740, v924, 8 * v165);
      v146 = v182;
      v140 = v181;
    }
  }
  else
  {
    v736 = v164;
    v180 = v637;
  }
  v737 = v608;
  v738 = v165;
  v739 = v605;
  v741 = v600;
  v742 = (_BYTE *)v598;
  v743 = v602;
  v744 = v749;
  if (v140 == v901)
  {
    v745 = v749;
    v183 = v647;
    if (v176)
    {
      v184 = v146;
      memcpy(v749, v901, 8 * v176);
      v146 = v184;
    }
  }
  else
  {
    v745 = v140;
    v183 = v647;
  }
  v746 = v171;
  v747 = v176;
  v748 = v654;
  v750 = v651;
  v751 = (_BYTE *)v183;
  v752 = v706;
  v753 = v758;
  if (v146 == v908)
  {
    v754 = v758;
    if (v147)
      memcpy(v758, v908, 8 * v147);
  }
  else
  {
    v754 = v146;
  }
  v755 = v700;
  v756 = v147;
  v757 = v694;
  v759 = v687;
  v760 = (_BYTE *)v679;
  v761 = v671;
  if (v634 != v180)
  {
    free(v634);
    v185 = (char *)v842;
    if ((_QWORD)v842)
    {
      for (i3 = (char *)*((_QWORD *)&v842 + 1); i3 != v185; i3 -= 32)
      {
        if (*(i3 - 8))
          *(i3 - 8) = 0;
      }
      *((_QWORD *)&v842 + 1) = v185;
      operator delete(v185);
    }
  }
  if (v838 != v837)
    free(v838);
  v187 = (char *)v894;
  if (v894)
  {
    for (i4 = v895; i4 != v187; i4 -= 32)
    {
      if (*(i4 - 8))
        *(i4 - 8) = 0;
    }
    v895 = v187;
    operator delete(v187);
  }
  if (v890 != v889)
    free(v890);
  v189 = (char *)v887;
  if ((_QWORD)v887)
  {
    for (i5 = (char *)*((_QWORD *)&v887 + 1); i5 != v189; i5 -= 32)
    {
      if (*(i5 - 8))
        *(i5 - 8) = 0;
    }
    *((_QWORD *)&v887 + 1) = v189;
    operator delete(v189);
  }
  if (v883 != v882)
    free(v883);
  v191 = (char *)v879;
  if (v879)
  {
    for (i6 = v880; i6 != v191; i6 -= 32)
    {
      if (*(i6 - 8))
        *(i6 - 8) = 0;
    }
    v880 = v191;
    operator delete(v191);
  }
  if (v875 != v874)
    free(v875);
  v193 = (char *)v872;
  if ((_QWORD)v872)
  {
    for (i7 = (char *)*((_QWORD *)&v872 + 1); i7 != v193; i7 -= 32)
    {
      if (*(i7 - 8))
        *(i7 - 8) = 0;
    }
    *((_QWORD *)&v872 + 1) = v193;
    operator delete(v193);
  }
  if (v868 != v867)
    free(v868);
  v195 = v808;
  if (v808)
  {
    for (i8 = (uint64_t)v809; (_BYTE *)i8 != v195; i8 -= 32)
    {
      if (*(_BYTE *)(i8 - 8))
        *(_BYTE *)(i8 - 8) = 0;
    }
    v809 = v195;
    operator delete(v195);
  }
  if (v803 != v802)
    free(v803);
  v197 = v799;
  if (v799)
  {
    for (i9 = (uint64_t)v800; (_BYTE *)i9 != v197; i9 -= 32)
    {
      if (*(_BYTE *)(i9 - 8))
        *(_BYTE *)(i9 - 8) = 0;
    }
    v800 = v197;
    operator delete(v197);
  }
  if (v794 != v793)
    free(v794);
  v199 = v790;
  if (v790)
  {
    for (i10 = (uint64_t)v791; (_BYTE *)i10 != v199; i10 -= 32)
    {
      if (*(_BYTE *)(i10 - 8))
        *(_BYTE *)(i10 - 8) = 0;
    }
    v791 = v199;
    operator delete(v199);
  }
  if (v785 != v784)
    free(v785);
  v201 = (char *)__p;
  if ((_QWORD)__p)
  {
    for (i11 = (char *)*((_QWORD *)&__p + 1); i11 != v201; i11 -= 32)
    {
      if (*(i11 - 8))
        *(i11 - 8) = 0;
    }
    *((_QWORD *)&__p + 1) = v201;
    operator delete(v201);
  }
  if (v777 != v776)
    free(v777);
  v203 = (char *)v826;
  if ((_QWORD)v826)
  {
    for (i12 = (char *)*((_QWORD *)&v826 + 1); i12 != v203; i12 -= 32)
    {
      if (*(i12 - 8))
        *(i12 - 8) = 0;
    }
    *((_QWORD *)&v826 + 1) = v203;
    operator delete(v203);
  }
  if (v821 != v820)
    free(v821);
  v205 = v817;
  if (v817)
  {
    for (i13 = (uint64_t)v818; (_BYTE *)i13 != v205; i13 -= 32)
    {
      if (*(_BYTE *)(i13 - 8))
        *(_BYTE *)(i13 - 8) = 0;
    }
    v818 = v205;
    operator delete(v205);
  }
  if (v812 != v811)
    free(v812);
  v207 = v781;
  v776 = v781;
  v208 = v728;
  if (v728 == v727)
  {
    v777 = v781;
    v209 = v728;
  }
  else
  {
    v328 = v729;
    v207 = malloc_type_malloc(8 * v729, 0x4065EBACuLL);
    if (!v207)
    {
      if (v328)
        goto LABEL_1468;
      v207 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v207)
        goto LABEL_1468;
    }
    v777 = v207;
    v209 = v727;
    v208 = v728;
  }
  v210 = v730;
  v778 = v729;
  if (v208 == v209)
    v211 = v730;
  else
    v211 = v729;
  if (v211)
  {
    memmove(v207, v208, 8 * v211);
    v210 = v730;
  }
  v779 = v210;
  v780 = v731;
  v783 = 0;
  __p = 0uLL;
  sub_1C60874BC((char *)&__p, v733, *((uint64_t *)&v733 + 1), (uint64_t)(*((_QWORD *)&v733 + 1) - v733) >> 5);
  v212 = v789;
  v784 = v789;
  v213 = v736;
  if (v736 == v735)
  {
    v785 = v789;
    v214 = v736;
  }
  else
  {
    v329 = v737;
    v212 = malloc_type_malloc(8 * v737, 0x4065EBACuLL);
    if (!v212)
    {
      if (v329)
        goto LABEL_1468;
      v212 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v212)
        goto LABEL_1468;
    }
    v785 = v212;
    v214 = v735;
    v213 = v736;
  }
  v215 = v738;
  v786 = v737;
  if (v213 == v214)
    v216 = v738;
  else
    v216 = v737;
  if (v216)
  {
    memmove(v212, v213, 8 * v216);
    v215 = v738;
  }
  v787 = v215;
  v788 = v739;
  v792 = 0;
  v790 = 0;
  v791 = 0;
  sub_1C60874BC((char *)&v790, (uint64_t)v741, (uint64_t)v742, (v742 - (_BYTE *)v741) >> 5);
  v217 = v916;
  v912 = v916;
  v218 = v745;
  if (v745 == v744)
  {
    v913 = v916;
    v219 = v745;
  }
  else
  {
    v330 = v746;
    v217 = malloc_type_malloc(8 * v746, 0x4065EBACuLL);
    if (!v217)
    {
      if (v330)
        goto LABEL_1468;
      v217 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v217)
        goto LABEL_1468;
    }
    v913 = v217;
    v219 = v744;
    v218 = v745;
  }
  LODWORD(v914) = v746;
  v220 = v747;
  if (v218 == v219)
    v221 = v747;
  else
    v221 = v746;
  if (v221)
  {
    memmove(v217, v218, 8 * v221);
    v220 = v747;
  }
  HIDWORD(v914) = v220;
  v915 = v748;
  v918 = 0;
  v917 = 0uLL;
  sub_1C60874BC((char *)&v917, (uint64_t)v750, (uint64_t)v751, (v751 - (_BYTE *)v750) >> 5);
  v222 = v924;
  v919 = v924;
  v223 = v754;
  if (v754 == v753)
  {
    v920 = v924;
    v224 = v754;
  }
  else
  {
    v331 = v755;
    v222 = malloc_type_malloc(8 * v755, 0x4065EBACuLL);
    if (!v222)
    {
      if (v331)
        goto LABEL_1468;
      v222 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v222)
        goto LABEL_1468;
    }
    v920 = v222;
    v224 = v753;
    v223 = v754;
  }
  v921 = v755;
  v225 = v756;
  if (v223 == v224)
    v226 = v756;
  else
    v226 = v755;
  if (v226)
  {
    memmove(v222, v223, 8 * v226);
    v225 = v756;
  }
  v922 = v225;
  v923 = v757;
  v927 = 0;
  v925 = 0;
  v926 = 0;
  v227 = (llvm *)sub_1C60874BC((char *)&v925, (uint64_t)v759, (uint64_t)v760, (v760 - (_BYTE *)v759) >> 5);
  v228 = *((_QWORD *)&__p + 1);
  v229 = __p;
  while (1)
  {
LABEL_432:
    if (v228 - v229 == *((_QWORD *)&v917 + 1) - (_QWORD)v917)
    {
      if (v229 != v228)
      {
        v230 = v917 + 16;
        v231 = v229 + 16;
        do
        {
          v232 = v231 - 16;
          if (*(_QWORD *)(v231 - 16) != *(_QWORD *)(v230 - 16))
            goto LABEL_450;
          v233 = *(unsigned __int8 *)(v230 + 8);
          if (*(_BYTE *)(v231 + 8))
            v234 = v233 == 0;
          else
            v234 = 1;
          if (v234)
          {
            if ((*(_BYTE *)(v231 + 8) == 0) == (v233 != 0))
              goto LABEL_450;
          }
          else if (*(_QWORD *)(v231 - 8) != *(_QWORD *)(v230 - 8) || *(_QWORD *)v231 != *(_QWORD *)v230)
          {
            goto LABEL_450;
          }
          v230 += 32;
          v231 += 32;
        }
        while (v232 + 32 != v228);
      }
      v247 = (char *)v925;
      if (v925)
      {
        for (i14 = v926; i14 != v247; i14 -= 32)
        {
          if (*(i14 - 8))
            *(i14 - 8) = 0;
        }
        v926 = v247;
        operator delete(v247);
      }
      if (v920 != v919)
        free(v920);
      v249 = (char *)v917;
      if ((_QWORD)v917)
      {
        for (i15 = (char *)*((_QWORD *)&v917 + 1); i15 != v249; i15 -= 32)
        {
          if (*(i15 - 8))
            *(i15 - 8) = 0;
        }
        *((_QWORD *)&v917 + 1) = v249;
        operator delete(v249);
      }
      if (v913 != v912)
        free(v913);
      v251 = v790;
      if (v790)
      {
        for (i16 = (uint64_t)v791; (_BYTE *)i16 != v251; i16 -= 32)
        {
          if (*(_BYTE *)(i16 - 8))
            *(_BYTE *)(i16 - 8) = 0;
        }
        v791 = v251;
        operator delete(v251);
      }
      if (v785 != v784)
        free(v785);
      v253 = (char *)__p;
      if ((_QWORD)__p)
      {
        for (i17 = (char *)*((_QWORD *)&__p + 1); i17 != v253; i17 -= 32)
        {
          if (*(i17 - 8))
            *(i17 - 8) = 0;
        }
        *((_QWORD *)&__p + 1) = v253;
        operator delete(v253);
      }
      if (v777 != v776)
        free(v777);
      v255 = v759;
      if (v759)
      {
        for (i18 = (uint64_t)v760; (_BYTE *)i18 != v255; i18 -= 32)
        {
          if (*(_BYTE *)(i18 - 8))
            *(_BYTE *)(i18 - 8) = 0;
        }
        v760 = v255;
        operator delete(v255);
      }
      if (v754 != v753)
        free(v754);
      v257 = v750;
      if (v750)
      {
        for (i19 = (uint64_t)v751; (_BYTE *)i19 != v257; i19 -= 32)
        {
          if (*(_BYTE *)(i19 - 8))
            *(_BYTE *)(i19 - 8) = 0;
        }
        v751 = v257;
        operator delete(v257);
      }
      if (v745 != v744)
        free(v745);
      v259 = v741;
      if (v741)
      {
        for (i20 = (uint64_t)v742; (_BYTE *)i20 != v259; i20 -= 32)
        {
          if (*(_BYTE *)(i20 - 8))
            *(_BYTE *)(i20 - 8) = 0;
        }
        v742 = v259;
        operator delete(v259);
      }
      if (v736 != v735)
        free(v736);
      v261 = (char *)v733;
      if ((_QWORD)v733)
      {
        for (i21 = (char *)*((_QWORD *)&v733 + 1); i21 != v261; i21 -= 32)
        {
          if (*(i21 - 8))
            *(i21 - 8) = 0;
        }
        *((_QWORD *)&v733 + 1) = v261;
        operator delete(v261);
      }
      v263 = (llvm *)v728;
      if (v728 != v727)
        free(v728);
      v264 = *(_QWORD *)this;
      if (!*(_QWORD *)this || (v265 = *(_QWORD *)this, *(_BYTE *)(v264 + 8) != 1))
      {
        if (*(_DWORD *)(v264 + 80) == 1)
          v265 = **(_QWORD **)(v264 + 72);
        else
          v265 = 0;
      }
      v290 = *(_QWORD *)(v265 + 200);
      if (v290)
        v291 = *(_BYTE *)(v290 + 8) == 0;
      else
        v291 = 0;
      if (!v291)
      {
        v292 = (llvm::raw_ostream *)llvm::errs(v263);
        v293 = (void *)*((_QWORD *)v292 + 4);
        if (*((_QWORD *)v292 + 3) - (_QWORD)v293 <= 0x27uLL)
        {
          v294 = "VPlan entry block is not a VPBasicBlock\n";
          v295 = 40;
LABEL_680:
          llvm::raw_ostream::write(v292, v294, v295);
          goto LABEL_681;
        }
        v312 = 0;
        qmemcpy(v293, "VPlan entry block is not a VPBasicBlock\n", 40);
        v389 = *((_QWORD *)v292 + 4) + 40;
        goto LABEL_1321;
      }
      v296 = *(_QWORD *)(v290 + 208);
      if (v296)
        v297 = v296 - 24;
      else
        v297 = 0;
      if (*(_BYTE *)(v297 + 8) != 14)
      {
        v292 = (llvm::raw_ostream *)llvm::errs(v263);
        v308 = (void *)*((_QWORD *)v292 + 4);
        if (*((_QWORD *)v292 + 3) - (_QWORD)v308 <= 0x45uLL)
        {
          v294 = "VPlan vector loop header does not start with a VPCanonicalIVPHIRecipe\n";
          v295 = 70;
          goto LABEL_680;
        }
        v312 = 0;
        qmemcpy(v308, "VPlan vector loop header does not start with a VPCanonicalIVPHIRecipe\n", 70);
        v389 = *((_QWORD *)v292 + 4) + 70;
LABEL_1321:
        *((_QWORD *)v292 + 4) = v389;
        goto LABEL_682;
      }
      v298 = *(_QWORD *)(v265 + 208);
      if (!v298 || *(_BYTE *)(v298 + 8))
      {
        v292 = (llvm::raw_ostream *)llvm::errs(v263);
        v309 = (void *)*((_QWORD *)v292 + 4);
        if (*((_QWORD *)v292 + 3) - (_QWORD)v309 <= 0x26uLL)
        {
          v294 = "VPlan exit block is not a VPBasicBlock\n";
          v295 = 39;
          goto LABEL_680;
        }
        v312 = 0;
        qmemcpy(v309, "VPlan exit block is not a VPBasicBlock\n", 39);
        v389 = *((_QWORD *)v292 + 4) + 39;
        goto LABEL_1321;
      }
      v299 = *(_QWORD *)(v298 + 200);
      if (v299 == v298 + 200)
      {
        v292 = (llvm::raw_ostream *)llvm::errs(v263);
        v311 = (void *)*((_QWORD *)v292 + 4);
        if (*((_QWORD *)v292 + 3) - (_QWORD)v311 <= 0x4DuLL)
        {
          v294 = "VPlan vector loop exit must end with BranchOnCount VPInstruction but is empty\n";
          v295 = 78;
          goto LABEL_680;
        }
        v312 = 0;
        qmemcpy(v311, "VPlan vector loop exit must end with BranchOnCount VPInstruction but is empty\n", 78);
        v389 = *((_QWORD *)v292 + 4) + 78;
        goto LABEL_1321;
      }
      if (!v299 || *(_BYTE *)(v299 - 16) != 2 || *(_BYTE *)(v299 + 128) != 77)
      {
        v292 = (llvm::raw_ostream *)llvm::errs(v263);
        v310 = (void *)*((_QWORD *)v292 + 4);
        if (*((_QWORD *)v292 + 3) - (_QWORD)v310 <= 0x40uLL)
        {
          v294 = "VPlan vector loop exit must end with BranchOnCount VPInstruction\n";
          v295 = 65;
          goto LABEL_680;
        }
        v312 = 0;
        qmemcpy(v310, "VPlan vector loop exit must end with BranchOnCount VPInstruction\n", 65);
        v389 = *((_QWORD *)v292 + 4) + 65;
        goto LABEL_1321;
      }
      sub_1C60D30F8((uint64_t)&v711, v264);
      v300 = v886;
      v882 = v886;
      v301 = v712;
      if (v712 == v711)
      {
        v883 = v886;
        v302 = v712;
      }
      else
      {
        v582 = v713;
        v300 = malloc_type_malloc(8 * v713, 0x4065EBACuLL);
        if (!v300)
        {
          if (v582)
            goto LABEL_1468;
          v300 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
          if (!v300)
            goto LABEL_1468;
        }
        v883 = v300;
        v302 = v711;
        v301 = v712;
      }
      v303 = v714;
      LODWORD(v884) = v713;
      if (v301 == v302)
        v304 = v714;
      else
        v304 = v713;
      if (v304)
      {
        memmove(v300, v301, 8 * v304);
        v303 = v714;
      }
      HIDWORD(v884) = v303;
      v885 = v715;
      v888 = 0;
      v887 = 0uLL;
      sub_1C60874BC((char *)&v887, (uint64_t)v717, (uint64_t)v718, (v718 - (_BYTE *)v717) >> 5);
      v727 = v732;
      if (v883 == v882)
      {
        v728 = v732;
        v305 = HIDWORD(v884);
        if (HIDWORD(v884))
          memmove(v732, v883, 8 * HIDWORD(v884));
      }
      else
      {
        v728 = v883;
        v883 = v882;
        v305 = HIDWORD(v884);
      }
      v729 = v884;
      v730 = v305;
      v731 = v885;
      v884 = 8;
      v885 = 0;
      v733 = v887;
      v734 = v888;
      v888 = 0;
      v887 = 0uLL;
      sub_1C60D3308((uint64_t)&v912, (uint64_t)&v727);
      v306 = (char *)v733;
      if ((_QWORD)v733)
      {
        for (i22 = (char *)*((_QWORD *)&v733 + 1); i22 != v306; i22 -= 32)
        {
          if (*(i22 - 8))
            *(i22 - 8) = 0;
        }
        *((_QWORD *)&v733 + 1) = v306;
        operator delete(v306);
      }
      if (v728 != v727)
        free(v728);
      v332 = v856;
      v852 = v856;
      v333 = v721;
      if (v721 == v720)
      {
        v853 = v856;
        v334 = v721;
      }
      else
      {
        v583 = v722;
        v332 = malloc_type_malloc(8 * v722, 0x4065EBACuLL);
        if (!v332)
        {
          if (v583)
            goto LABEL_1468;
          v332 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
          if (!v332)
            goto LABEL_1468;
        }
        v853 = v332;
        v334 = v720;
        v333 = v721;
      }
      v335 = v723;
      LODWORD(v854) = v722;
      if (v333 == v334)
        v336 = v723;
      else
        v336 = v722;
      if (v336)
      {
        memmove(v332, v333, 8 * v336);
        v335 = v723;
      }
      HIDWORD(v854) = v335;
      v855 = v724;
      v858 = 0;
      v857 = 0uLL;
      sub_1C60874BC((char *)&v857, (uint64_t)v725, (uint64_t)v726, (v726 - (_BYTE *)v725) >> 5);
      v727 = v732;
      if (v853 == v852)
      {
        v728 = v732;
        v337 = HIDWORD(v854);
        if (HIDWORD(v854))
          memmove(v732, v853, 8 * HIDWORD(v854));
      }
      else
      {
        v728 = v853;
        v853 = v852;
        v337 = HIDWORD(v854);
      }
      v729 = v854;
      v730 = v337;
      v731 = v855;
      v854 = 8;
      v855 = 0;
      v733 = v857;
      v734 = v858;
      v858 = 0;
      v857 = 0uLL;
      sub_1C60D3308((uint64_t)&v897, (uint64_t)&v727);
      v338 = (char *)v733;
      if ((_QWORD)v733)
      {
        for (i23 = (char *)*((_QWORD *)&v733 + 1); i23 != v338; i23 -= 32)
        {
          if (*(i23 - 8))
            *(i23 - 8) = 0;
        }
        *((_QWORD *)&v733 + 1) = v338;
        operator delete(v338);
      }
      if (v728 != v727)
        free(v728);
      v727 = v732;
      v340 = v913;
      if (v913 == v912)
      {
        v728 = v732;
        v341 = HIDWORD(v914);
        if (HIDWORD(v914))
          memmove(v732, v913, 8 * HIDWORD(v914));
        v340 = v732;
      }
      else
      {
        v728 = v913;
        v913 = v912;
        v341 = HIDWORD(v914);
      }
      v342 = v914;
      v343 = v915;
      v729 = v914;
      v730 = v341;
      v731 = v915;
      v914 = 8;
      v915 = 0;
      v344 = *((_QWORD *)&v917 + 1);
      v701 = (void *)v917;
      v733 = v917;
      v345 = v918;
      v734 = v918;
      v918 = 0;
      v917 = 0uLL;
      v776 = v781;
      v346 = v898;
      v347 = v897;
      v707 = v897;
      if (v898 == v897)
      {
        v777 = v781;
        v348 = HIDWORD(v899);
        if (HIDWORD(v899))
        {
          v349 = v342;
          v350 = v343;
          v351 = v345;
          v352 = v344;
          memmove(v781, v898, 8 * HIDWORD(v899));
          v344 = v352;
          v345 = v351;
          v343 = v350;
          v342 = v349;
        }
        v347 = v346;
        v346 = v781;
      }
      else
      {
        v898 = v897;
        v348 = HIDWORD(v899);
      }
      v353 = v899;
      v354 = v900;
      v899 = 8;
      v900 = 0;
      v355 = v902;
      __p = v902;
      v356 = v903;
      v783 = v903;
      v903 = 0;
      v902 = 0uLL;
      v811 = v816;
      if (v340 == v732)
      {
        v812 = v816;
        if (v341)
        {
          v695 = v342;
          v357 = v343;
          v680 = v345;
          v688 = v347;
          v358 = v344;
          v359 = v354;
          v672 = v353;
          memcpy(v816, v732, 8 * v341);
          v353 = v672;
          v354 = v359;
          v344 = v358;
          v345 = v680;
          v347 = v688;
          v343 = v357;
          v342 = v695;
        }
      }
      else
      {
        v812 = v340;
      }
      v813 = v342;
      v814 = v341;
      v815 = v343;
      v817 = v701;
      v818 = (_BYTE *)v344;
      v819 = v345;
      v820 = v825;
      if (v346 == v781)
      {
        v821 = v825;
        if (v348)
        {
          v360 = v354;
          v361 = v353;
          memcpy(v825, v781, 8 * v348);
          v353 = v361;
          v354 = v360;
        }
      }
      else
      {
        v821 = v346;
      }
      v822 = v353;
      v823 = v348;
      v824 = v354;
      v826 = v355;
      v827 = v356;
      if (v347 != v707)
        free(v347);
      v362 = (char *)v857;
      if ((_QWORD)v857)
      {
        for (i24 = (char *)*((_QWORD *)&v857 + 1); i24 != v362; i24 -= 32)
        {
          if (*(i24 - 8))
            *(i24 - 8) = 0;
        }
        *((_QWORD *)&v857 + 1) = v362;
        operator delete(v362);
      }
      if (v853 != v852)
        free(v853);
      v364 = (char *)v917;
      if ((_QWORD)v917)
      {
        for (i25 = (char *)*((_QWORD *)&v917 + 1); i25 != v364; i25 -= 32)
        {
          if (*(i25 - 8))
            *(i25 - 8) = 0;
        }
        *((_QWORD *)&v917 + 1) = v364;
        operator delete(v364);
      }
      if (v913 != v912)
        free(v913);
      v366 = (char *)v887;
      if ((_QWORD)v887)
      {
        for (i26 = (char *)*((_QWORD *)&v887 + 1); i26 != v366; i26 -= 32)
        {
          if (*(i26 - 8))
            *(i26 - 8) = 0;
        }
        *((_QWORD *)&v887 + 1) = v366;
        operator delete(v366);
      }
      if (v883 != v882)
        free(v883);
      v368 = v856;
      v852 = v856;
      v369 = v812;
      if (v812 == v811)
      {
        v853 = v856;
        v370 = v812;
      }
      else
      {
        v584 = v813;
        v368 = malloc_type_malloc(8 * v813, 0x4065EBACuLL);
        if (!v368)
        {
          if (v584)
            goto LABEL_1468;
          v368 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
          if (!v368)
            goto LABEL_1468;
        }
        v853 = v368;
        v370 = v811;
        v369 = v812;
      }
      v371 = v814;
      LODWORD(v854) = v813;
      if (v369 == v370)
        v372 = v814;
      else
        v372 = v813;
      if (v372)
      {
        memmove(v368, v369, 8 * v372);
        v371 = v814;
      }
      HIDWORD(v854) = v371;
      v855 = v815;
      v858 = 0;
      v857 = 0uLL;
      sub_1C60874BC((char *)&v857, (uint64_t)v817, (uint64_t)v818, (v818 - (_BYTE *)v817) >> 5);
      v373 = v871;
      v867 = v871;
      v374 = v821;
      if (v821 == v820)
      {
        v868 = v871;
        v375 = v821;
      }
      else
      {
        v585 = v822;
        v373 = malloc_type_malloc(8 * v822, 0x4065EBACuLL);
        if (!v373)
        {
          if (v585)
            goto LABEL_1468;
          v373 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
          if (!v373)
            goto LABEL_1468;
        }
        v868 = v373;
        v375 = v820;
        v374 = v821;
      }
      v376 = v823;
      LODWORD(v869) = v822;
      if (v374 == v375)
        v377 = v823;
      else
        v377 = v822;
      if (v377)
      {
        memmove(v373, v374, 8 * v377);
        v376 = v823;
      }
      HIDWORD(v869) = v376;
      v870 = v824;
      v873 = 0;
      v872 = 0uLL;
      sub_1C60874BC((char *)&v872, v826, *((uint64_t *)&v826 + 1), (uint64_t)(*((_QWORD *)&v826 + 1) - v826) >> 5);
      sub_1C60D38AC((uint64_t)&v897, (uint64_t)&v852, (uint64_t)&v867);
      v378 = v841;
      v837 = v841;
      v379 = v821;
      if (v821 == v820)
      {
        v838 = v841;
        v380 = v821;
      }
      else
      {
        v586 = v822;
        v378 = malloc_type_malloc(8 * v822, 0x4065EBACuLL);
        if (!v378)
        {
          if (v586)
            goto LABEL_1468;
          v378 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
          if (!v378)
            goto LABEL_1468;
        }
        v838 = v378;
        v380 = v820;
        v379 = v821;
      }
      v381 = v823;
      LODWORD(v839) = v822;
      if (v379 == v380)
        v382 = v823;
      else
        v382 = v822;
      if (v382)
      {
        memmove(v378, v379, 8 * v382);
        v381 = v823;
      }
      HIDWORD(v839) = v381;
      v840 = v824;
      v843 = 0;
      v842 = 0uLL;
      sub_1C60874BC((char *)&v842, v826, *((uint64_t *)&v826 + 1), (uint64_t)(*((_QWORD *)&v826 + 1) - v826) >> 5);
      v383 = v833;
      v828 = v833;
      v384 = v821;
      if (v821 == v820)
      {
        v829 = v833;
        v385 = v821;
      }
      else
      {
        v587 = v822;
        v383 = malloc_type_malloc(8 * v822, 0x4065EBACuLL);
        if (!v383)
        {
          if (v587)
            goto LABEL_1468;
          v383 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
          if (!v383)
            goto LABEL_1468;
        }
        v829 = v383;
        v385 = v820;
        v384 = v821;
      }
      v386 = v823;
      v830 = v822;
      if (v384 == v385)
        v387 = v823;
      else
        v387 = v822;
      if (v387)
      {
        memmove(v383, v384, 8 * v387);
        v386 = v823;
      }
      v831 = v386;
      v832 = v824;
      v836 = 0;
      v834 = 0;
      v835 = 0;
      sub_1C60874BC((char *)&v834, v826, *((uint64_t *)&v826 + 1), (uint64_t)(*((_QWORD *)&v826 + 1) - v826) >> 5);
      sub_1C60D38AC((uint64_t)&v882, (uint64_t)&v837, (uint64_t)&v828);
      v727 = v732;
      v388 = v898;
      if (v898 == v897)
      {
        v728 = v732;
        v708 = HIDWORD(v899);
        if (HIDWORD(v899))
          memmove(v732, v898, 8 * HIDWORD(v899));
        else
          v708 = 0;
        v388 = v732;
      }
      else
      {
        v728 = v898;
        v898 = v897;
        v708 = HIDWORD(v899);
      }
      v635 = v899;
      v729 = v899;
      v730 = v708;
      v681 = v900;
      v731 = v900;
      v899 = 8;
      v900 = 0;
      __dstb = (void *)*((_QWORD *)&v902 + 1);
      v673 = v902;
      v733 = v902;
      v390 = v903;
      v903 = 0;
      v902 = 0uLL;
      v660 = v390;
      v734 = v390;
      v735 = v740;
      v391 = v905;
      if (v905 == v904)
      {
        v736 = v740;
        v392 = HIDWORD(v906);
        if (HIDWORD(v906))
        {
          v393 = v388;
          memmove(v740, v905, 8 * HIDWORD(v906));
          v388 = v393;
        }
        v391 = v740;
      }
      else
      {
        v736 = v905;
        v905 = v904;
        v392 = HIDWORD(v906);
      }
      v655 = v906;
      v737 = v906;
      v738 = v392;
      v652 = v907;
      v739 = v907;
      v906 = 8;
      v907 = 0;
      v641 = v910;
      v644 = v909;
      v741 = v909;
      v742 = (_BYTE *)v910;
      v648 = v911;
      v743 = v911;
      v911 = 0;
      v909 = 0;
      v910 = 0;
      v912 = v916;
      v394 = v883;
      if (v883 == v882)
      {
        v913 = v916;
        v395 = HIDWORD(v884);
        if (HIDWORD(v884))
        {
          v396 = v388;
          v397 = v391;
          memmove(v916, v883, 8 * HIDWORD(v884));
          v391 = v397;
          v388 = v396;
        }
        v394 = v916;
      }
      else
      {
        v913 = v883;
        v883 = v882;
        v395 = HIDWORD(v884);
      }
      v398 = v884;
      v399 = v885;
      v914 = __PAIR64__(v395, v884);
      v915 = v885;
      v884 = 8;
      v885 = 0;
      v401 = *((_QWORD *)&v887 + 1);
      v400 = (void *)v887;
      v917 = v887;
      v402 = v888;
      v888 = 0;
      v887 = 0uLL;
      v631 = v402;
      v918 = v402;
      v919 = v924;
      v403 = v890;
      v638 = v889;
      if (v890 == v889)
      {
        v920 = v924;
        v404 = HIDWORD(v891);
        if (HIDWORD(v891))
        {
          v626 = v392;
          v405 = v388;
          v406 = v399;
          v407 = v391;
          v408 = v401;
          v409 = v400;
          v410 = v394;
          memmove(v924, v890, 8 * HIDWORD(v891));
          v394 = v410;
          v400 = v409;
          v401 = v408;
          v391 = v407;
          v399 = v406;
          v388 = v405;
          v392 = v626;
        }
        v689 = v403;
        v403 = v924;
      }
      else
      {
        v920 = v890;
        v890 = v889;
        v689 = v889;
        v404 = HIDWORD(v891);
      }
      v627 = v891;
      v921 = v891;
      v922 = v404;
      v621 = v892;
      v923 = v892;
      v891 = 8;
      v892 = 0;
      v613 = (uint64_t)v895;
      v617 = v894;
      v925 = v894;
      v926 = v895;
      v609 = v896;
      v927 = v896;
      v896 = 0;
      v894 = 0;
      v895 = 0;
      v776 = v781;
      if (v388 == v732)
      {
        v777 = v781;
        if (v708)
        {
          v411 = v391;
          v412 = v401;
          v413 = v400;
          v414 = v399;
          v415 = v398;
          v416 = v394;
          memcpy(v781, v732, 8 * v708);
          v394 = v416;
          v398 = v415;
          v399 = v414;
          v400 = v413;
          v401 = v412;
          v391 = v411;
        }
      }
      else
      {
        v777 = v388;
      }
      v778 = v635;
      v779 = v708;
      v780 = v681;
      *(_QWORD *)&__p = v673;
      *((_QWORD *)&__p + 1) = __dstb;
      v783 = v660;
      v784 = v789;
      if (v391 == v740)
      {
        v785 = v789;
        if (v392)
        {
          v417 = v394;
          memcpy(v789, v740, 8 * v392);
          v394 = v417;
        }
      }
      else
      {
        v785 = v391;
      }
      v786 = v655;
      v787 = v392;
      v788 = v652;
      v790 = v644;
      v791 = (_BYTE *)v641;
      v792 = v648;
      v793 = v798;
      if (v394 == v916)
      {
        v794 = v798;
        if (v395)
          memcpy(v798, v916, 8 * v395);
      }
      else
      {
        v794 = v394;
      }
      v795 = v398;
      v796 = v395;
      v797 = v399;
      v799 = v400;
      v800 = (_BYTE *)v401;
      v801 = v631;
      v802 = v807;
      if (v403 == v924)
      {
        v803 = v807;
        if (v404)
          memcpy(v807, v924, 8 * v404);
      }
      else
      {
        v803 = v403;
      }
      v804 = v627;
      v805 = v404;
      v806 = v621;
      v808 = v617;
      v809 = (_BYTE *)v613;
      v810 = v609;
      if (v689 != v638)
      {
        free(v689);
        v418 = (char *)v887;
        if ((_QWORD)v887)
        {
          for (i27 = (char *)*((_QWORD *)&v887 + 1); i27 != v418; i27 -= 32)
          {
            if (*(i27 - 8))
              *(i27 - 8) = 0;
          }
          *((_QWORD *)&v887 + 1) = v418;
          operator delete(v418);
        }
      }
      if (v883 != v882)
        free(v883);
      v420 = (char *)v834;
      if (v834)
      {
        for (i28 = v835; i28 != v420; i28 -= 32)
        {
          if (*(i28 - 8))
            *(i28 - 8) = 0;
        }
        v835 = v420;
        operator delete(v420);
      }
      if (v829 != v828)
        free(v829);
      v422 = (char *)v842;
      if ((_QWORD)v842)
      {
        for (i29 = (char *)*((_QWORD *)&v842 + 1); i29 != v422; i29 -= 32)
        {
          if (*(i29 - 8))
            *(i29 - 8) = 0;
        }
        *((_QWORD *)&v842 + 1) = v422;
        operator delete(v422);
      }
      if (v838 != v837)
        free(v838);
      v424 = (char *)v909;
      if (v909)
      {
        for (i30 = (char *)v910; i30 != v424; i30 -= 32)
        {
          if (*(i30 - 8))
            *(i30 - 8) = 0;
        }
        v910 = (uint64_t)v424;
        operator delete(v424);
      }
      if (v905 != v904)
        free(v905);
      v426 = (char *)v902;
      if ((_QWORD)v902)
      {
        for (i31 = (char *)*((_QWORD *)&v902 + 1); i31 != v426; i31 -= 32)
        {
          if (*(i31 - 8))
            *(i31 - 8) = 0;
        }
        *((_QWORD *)&v902 + 1) = v426;
        operator delete(v426);
      }
      if (v898 != v897)
        free(v898);
      v428 = (char *)v872;
      if ((_QWORD)v872)
      {
        for (i32 = (char *)*((_QWORD *)&v872 + 1); i32 != v428; i32 -= 32)
        {
          if (*(i32 - 8))
            *(i32 - 8) = 0;
        }
        *((_QWORD *)&v872 + 1) = v428;
        operator delete(v428);
      }
      if (v868 != v867)
        free(v868);
      v430 = (char *)v857;
      if ((_QWORD)v857)
      {
        for (i33 = (char *)*((_QWORD *)&v857 + 1); i33 != v430; i33 -= 32)
        {
          if (*(i33 - 8))
            *(i33 - 8) = 0;
        }
        *((_QWORD *)&v857 + 1) = v430;
        operator delete(v430);
      }
      if (v853 != v852)
        free(v853);
      v432 = v871;
      v867 = v871;
      v433 = v777;
      if (v777 == v776)
      {
        v868 = v871;
        v434 = v777;
      }
      else
      {
        v588 = v778;
        v432 = malloc_type_malloc(8 * v778, 0x4065EBACuLL);
        if (!v432)
        {
          if (v588)
            goto LABEL_1468;
          v432 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
          if (!v432)
            goto LABEL_1468;
        }
        v868 = v432;
        v434 = v776;
        v433 = v777;
      }
      v435 = v779;
      LODWORD(v869) = v778;
      if (v433 == v434)
        v436 = v779;
      else
        v436 = v778;
      if (v436)
      {
        memmove(v432, v433, 8 * v436);
        v435 = v779;
      }
      HIDWORD(v869) = v435;
      v870 = v780;
      v873 = 0;
      v872 = 0uLL;
      sub_1C60874BC((char *)&v872, __p, *((uint64_t *)&__p + 1), (uint64_t)(*((_QWORD *)&__p + 1) - __p) >> 5);
      v437 = v878;
      v874 = v878;
      v438 = v785;
      if (v785 == v784)
      {
        v875 = v878;
        v439 = v785;
      }
      else
      {
        v589 = v786;
        v437 = malloc_type_malloc(8 * v786, 0x4065EBACuLL);
        if (!v437)
        {
          if (v589)
            goto LABEL_1468;
          v437 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
          if (!v437)
            goto LABEL_1468;
        }
        v875 = v437;
        v439 = v784;
        v438 = v785;
      }
      v440 = v787;
      LODWORD(v876) = v786;
      if (v438 == v439)
        v441 = v787;
      else
        v441 = v786;
      if (v441)
      {
        memmove(v437, v438, 8 * v441);
        v440 = v787;
      }
      HIDWORD(v876) = v440;
      v877 = v788;
      v881 = 0;
      v879 = 0;
      v880 = 0;
      sub_1C60874BC((char *)&v879, (uint64_t)v790, (uint64_t)v791, (v791 - (_BYTE *)v790) >> 5);
      v912 = v916;
      v442 = v868;
      if (v868 == v867)
      {
        v913 = v916;
        v443 = HIDWORD(v869);
        if (HIDWORD(v869))
          memmove(v916, v868, 8 * HIDWORD(v869));
        v442 = v916;
      }
      else
      {
        v913 = v868;
        v868 = v867;
        v443 = HIDWORD(v869);
      }
      v444 = v869;
      v445 = v870;
      v914 = __PAIR64__(v443, v869);
      v915 = v870;
      v869 = 8;
      v870 = 0;
      v702 = (void *)*((_QWORD *)&v872 + 1);
      v709 = v872;
      v917 = v872;
      v446 = v873;
      v873 = 0;
      v872 = 0uLL;
      v918 = v446;
      v919 = v924;
      v447 = v875;
      v682 = v444;
      v674 = v445;
      __dstc = v446;
      if (v875 == v874)
      {
        v920 = v924;
        v448 = HIDWORD(v876);
        if (HIDWORD(v876))
          memmove(v924, v875, 8 * HIDWORD(v876));
        v447 = v924;
      }
      else
      {
        v920 = v875;
        v875 = v874;
        v448 = HIDWORD(v876);
      }
      v661 = v876;
      v921 = v876;
      v922 = v448;
      v696 = v877;
      v923 = v877;
      v876 = 8;
      v877 = 0;
      v449 = (uint64_t)v880;
      v690 = v879;
      v925 = v879;
      v926 = v880;
      v450 = v881;
      v880 = 0;
      v881 = 0;
      v879 = 0;
      v927 = v450;
      if (v442 == v916)
      {
        if (v443)
          memcpy(v732, v916, 8 * v443);
        v442 = v732;
      }
      *(_QWORD *)&v733 = v709;
      *((_QWORD *)&v733 + 1) = v702;
      v734 = __dstc;
      v735 = v740;
      if (v447 == v924)
      {
        v736 = v740;
        if (v448)
          memcpy(v740, v924, 8 * v448);
        v447 = v740;
      }
      else
      {
        v736 = v447;
      }
      v737 = v661;
      v738 = v448;
      v739 = v696;
      v741 = v690;
      v742 = (_BYTE *)v449;
      v743 = v450;
      v882 = v886;
      if (v442 == v732)
      {
        v883 = v886;
        if (v443)
          memcpy(v886, v732, 8 * v443);
      }
      else
      {
        v883 = v442;
      }
      v884 = __PAIR64__(v443, v682);
      v885 = v674;
      *(_QWORD *)&v887 = v709;
      *((_QWORD *)&v887 + 1) = v702;
      v888 = __dstc;
      v889 = v893;
      if (v447 == v740)
      {
        v890 = v893;
        if (v448)
          memcpy(v893, v740, 8 * v448);
      }
      else
      {
        v890 = v447;
      }
      v891 = __PAIR64__(v448, v661);
      v892 = v696;
      v894 = v690;
      v895 = (char *)v449;
      v896 = v450;
      v451 = v841;
      v837 = v841;
      v452 = v794;
      if (v794 == v793)
      {
        v838 = v841;
        v453 = v794;
      }
      else
      {
        v590 = v795;
        v451 = malloc_type_malloc(8 * v795, 0x4065EBACuLL);
        if (!v451)
        {
          if (v590)
            goto LABEL_1468;
          v451 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
          if (!v451)
            goto LABEL_1468;
        }
        v838 = v451;
        v453 = v793;
        v452 = v794;
      }
      LODWORD(v839) = v795;
      v454 = v796;
      if (v452 == v453)
        v455 = v796;
      else
        v455 = v795;
      if (v455)
      {
        memmove(v451, v452, 8 * v455);
        v454 = v796;
      }
      HIDWORD(v839) = v454;
      v840 = v797;
      v843 = 0;
      v842 = 0uLL;
      sub_1C60874BC((char *)&v842, (uint64_t)v799, (uint64_t)v800, (v800 - (_BYTE *)v799) >> 5);
      v456 = v848;
      v844 = v848;
      v457 = v803;
      if (v803 == v802)
      {
        v845 = v848;
        v458 = v803;
      }
      else
      {
        v591 = v804;
        v456 = malloc_type_malloc(8 * v804, 0x4065EBACuLL);
        if (!v456)
        {
          if (v591)
            goto LABEL_1468;
          v456 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
          if (!v456)
            goto LABEL_1468;
        }
        v845 = v456;
        v458 = v802;
        v457 = v803;
      }
      LODWORD(v846) = v804;
      v459 = v805;
      if (v457 == v458)
        v460 = v805;
      else
        v460 = v804;
      if (v460)
      {
        memmove(v456, v457, 8 * v460);
        v459 = v805;
      }
      HIDWORD(v846) = v459;
      v847 = v806;
      v851 = 0;
      v849 = 0;
      v850 = 0;
      sub_1C60874BC((char *)&v849, (uint64_t)v808, (uint64_t)v809, (v809 - (_BYTE *)v808) >> 5);
      v912 = v916;
      v461 = v838;
      if (v838 == v837)
      {
        v913 = v916;
        v462 = HIDWORD(v839);
        if (HIDWORD(v839))
          memmove(v916, v838, 8 * HIDWORD(v839));
        v461 = v916;
      }
      else
      {
        v913 = v838;
        v838 = v837;
        v462 = HIDWORD(v839);
      }
      v463 = v839;
      v464 = v840;
      v914 = __PAIR64__(v462, v839);
      v915 = v840;
      v839 = 8;
      v840 = 0;
      v703 = (_BYTE *)*((_QWORD *)&v842 + 1);
      v710 = (void *)v842;
      v917 = v842;
      v465 = v843;
      v843 = 0;
      v842 = 0uLL;
      v697 = v465;
      v918 = v465;
      v919 = v924;
      v466 = v845;
      v649 = v844;
      if (v845 == v844)
      {
        v920 = v924;
        v467 = HIDWORD(v846);
        if (HIDWORD(v846))
        {
          v468 = v461;
          v469 = v845;
          memmove(v924, v845, 8 * HIDWORD(v846));
          v461 = v468;
          v645 = v469;
        }
        else
        {
          v645 = v845;
        }
        v466 = v924;
      }
      else
      {
        v920 = v845;
        v845 = v844;
        v645 = v844;
        v467 = HIDWORD(v846);
      }
      v691 = v846;
      v921 = v846;
      v922 = v467;
      v683 = v847;
      v923 = v847;
      v846 = 8;
      v847 = 0;
      __dstd = v850;
      v675 = v849;
      v925 = v849;
      v926 = v850;
      v470 = v851;
      v850 = 0;
      v851 = 0;
      v849 = 0;
      v662 = v470;
      v927 = v470;
      if (v461 == v916)
      {
        if (v462)
        {
          v471 = v466;
          memcpy(v732, v916, 8 * v462);
          v466 = v471;
        }
        v461 = v732;
      }
      *(_QWORD *)&v733 = v710;
      *((_QWORD *)&v733 + 1) = v703;
      v734 = v697;
      v735 = v740;
      if (v466 == v924)
      {
        v736 = v740;
        if (v467)
        {
          v472 = v461;
          memcpy(v740, v924, 8 * v467);
          v461 = v472;
        }
        v466 = v740;
      }
      else
      {
        v736 = v466;
      }
      v737 = v691;
      v738 = v467;
      v739 = v683;
      v741 = v675;
      v742 = __dstd;
      v743 = v662;
      v852 = v856;
      if (v461 == v732)
      {
        v853 = v856;
        v461 = v856;
        if (v462)
        {
          v473 = v466;
          memcpy(v856, v732, 8 * v462);
          v466 = v473;
          v461 = v856;
        }
      }
      else
      {
        v853 = v461;
      }
      v854 = __PAIR64__(v462, v463);
      v855 = v464;
      *(_QWORD *)&v857 = v710;
      *((_QWORD *)&v857 + 1) = v703;
      v858 = v697;
      v859 = v863;
      v656 = v462;
      if (v466 == v740)
      {
        v860 = v863;
        v466 = v863;
        if (v467)
        {
          v474 = v461;
          memcpy(v863, v740, 8 * v467);
          v461 = v474;
          v466 = v863;
        }
      }
      else
      {
        v860 = v466;
      }
      v861 = __PAIR64__(v467, v691);
      v862 = v683;
      v864 = v675;
      v865 = (uint64_t)__dstd;
      v866 = v662;
      v912 = v916;
      v475 = v883;
      if (v883 == v882)
      {
        v913 = v916;
        v476 = HIDWORD(v884);
        if (HIDWORD(v884))
        {
          v477 = v461;
          v478 = v466;
          memmove(v916, v883, 8 * HIDWORD(v884));
          v466 = v478;
          v461 = v477;
        }
        v475 = v916;
      }
      else
      {
        v913 = v883;
        v883 = v882;
        v476 = HIDWORD(v884);
      }
      v632 = v884;
      v914 = __PAIR64__(v476, v884);
      v628 = v885;
      v915 = v885;
      v884 = 8;
      v885 = 0;
      v618 = *((_QWORD *)&v887 + 1);
      v622 = v887;
      v917 = v887;
      v479 = v888;
      v888 = 0;
      v887 = 0uLL;
      v614 = v479;
      v918 = v479;
      v919 = v924;
      v480 = v890;
      v639 = v475;
      if (v890 == v889)
      {
        v920 = v924;
        v481 = HIDWORD(v891);
        if (HIDWORD(v891))
        {
          v482 = v461;
          v483 = v466;
          memmove(v924, v890, 8 * HIDWORD(v891));
          v466 = v483;
          v461 = v482;
        }
        v480 = v924;
      }
      else
      {
        v920 = v890;
        v890 = v889;
        v481 = HIDWORD(v891);
      }
      v484 = v463;
      v610 = v891;
      v921 = v891;
      v922 = v481;
      v606 = v892;
      v923 = v892;
      v891 = 8;
      v892 = 0;
      v599 = (uint64_t)v895;
      v601 = v894;
      v925 = v894;
      v926 = v895;
      v603 = v896;
      v927 = v896;
      v895 = 0;
      v896 = 0;
      v894 = 0;
      v897 = v901;
      if (v461 == v856)
      {
        v898 = v901;
        v485 = v656;
        if (v656)
        {
          v486 = v466;
          v487 = v480;
          memcpy(v901, v856, 8 * v656);
          v480 = v487;
          v466 = v486;
        }
        v461 = v901;
      }
      else
      {
        v898 = v461;
        v853 = v856;
        v485 = v656;
      }
      v899 = __PAIR64__(v485, v484);
      v657 = v485;
      v900 = v464;
      v854 = 8;
      v855 = 0;
      *(_QWORD *)&v902 = v710;
      *((_QWORD *)&v902 + 1) = v703;
      v858 = 0;
      v857 = 0uLL;
      v903 = v697;
      v904 = v908;
      if (v466 == v863)
      {
        v905 = v908;
        if (v467)
        {
          v488 = v461;
          v489 = v480;
          memcpy(v908, v863, 8 * v467);
          v480 = v489;
          v461 = v488;
        }
        v466 = v908;
      }
      else
      {
        v905 = v466;
        v860 = v863;
      }
      v490 = v484;
      v906 = __PAIR64__(v467, v691);
      v907 = v683;
      v861 = 8;
      v862 = 0;
      v909 = v675;
      v910 = (uint64_t)__dstd;
      v911 = v662;
      v865 = 0;
      v866 = 0;
      v864 = 0;
      v727 = v732;
      if (v639 == v916)
      {
        v728 = v732;
        if (v476)
        {
          v491 = v461;
          v492 = v466;
          v493 = v480;
          memcpy(v732, v916, 8 * v476);
          v480 = v493;
          v490 = v484;
          v466 = v492;
          v461 = v491;
        }
      }
      else
      {
        v728 = v639;
      }
      v729 = v632;
      v730 = v476;
      v731 = v628;
      *(_QWORD *)&v733 = v622;
      *((_QWORD *)&v733 + 1) = v618;
      v734 = v614;
      v735 = v740;
      if (v480 == v924)
      {
        v736 = v740;
        if (v481)
        {
          v494 = v461;
          v495 = v466;
          memcpy(v740, v924, 8 * v481);
          v466 = v495;
          v461 = v494;
        }
      }
      else
      {
        v736 = v480;
      }
      v737 = v610;
      v738 = v481;
      v739 = v606;
      v741 = v601;
      v742 = (_BYTE *)v599;
      v743 = v603;
      v744 = v749;
      if (v461 == v901)
      {
        v745 = v749;
        v496 = v657;
        if (v657)
        {
          v497 = v466;
          memcpy(v749, v901, 8 * v657);
          v466 = v497;
        }
      }
      else
      {
        v745 = v461;
        v496 = v657;
      }
      v746 = v490;
      v747 = v496;
      v748 = v464;
      v750 = v710;
      v751 = v703;
      v752 = v697;
      v753 = v758;
      if (v466 == v908)
      {
        v754 = v758;
        v498 = v649;
        if (v467)
          memcpy(v758, v908, 8 * v467);
      }
      else
      {
        v754 = v466;
        v498 = v649;
      }
      v755 = v691;
      v756 = v467;
      v757 = v683;
      v759 = v675;
      v760 = __dstd;
      v761 = v662;
      if (v645 != v498)
      {
        free(v645);
        v499 = (char *)v842;
        if ((_QWORD)v842)
        {
          for (i34 = (char *)*((_QWORD *)&v842 + 1); i34 != v499; i34 -= 32)
          {
            if (*(i34 - 8))
              *(i34 - 8) = 0;
          }
          *((_QWORD *)&v842 + 1) = v499;
          operator delete(v499);
        }
      }
      if (v838 != v837)
        free(v838);
      v501 = (char *)v894;
      if (v894)
      {
        for (i35 = v895; i35 != v501; i35 -= 32)
        {
          if (*(i35 - 8))
            *(i35 - 8) = 0;
        }
        v895 = v501;
        operator delete(v501);
      }
      if (v890 != v889)
        free(v890);
      v503 = (char *)v887;
      if ((_QWORD)v887)
      {
        for (i36 = (char *)*((_QWORD *)&v887 + 1); i36 != v503; i36 -= 32)
        {
          if (*(i36 - 8))
            *(i36 - 8) = 0;
        }
        *((_QWORD *)&v887 + 1) = v503;
        operator delete(v503);
      }
      if (v883 != v882)
        free(v883);
      v505 = (char *)v879;
      if (v879)
      {
        for (i37 = v880; i37 != v505; i37 -= 32)
        {
          if (*(i37 - 8))
            *(i37 - 8) = 0;
        }
        v880 = v505;
        operator delete(v505);
      }
      if (v875 != v874)
        free(v875);
      v507 = (char *)v872;
      if ((_QWORD)v872)
      {
        for (i38 = (char *)*((_QWORD *)&v872 + 1); i38 != v507; i38 -= 32)
        {
          if (*(i38 - 8))
            *(i38 - 8) = 0;
        }
        *((_QWORD *)&v872 + 1) = v507;
        operator delete(v507);
      }
      if (v868 != v867)
        free(v868);
      v509 = v808;
      if (v808)
      {
        for (i39 = (uint64_t)v809; (_BYTE *)i39 != v509; i39 -= 32)
        {
          if (*(_BYTE *)(i39 - 8))
            *(_BYTE *)(i39 - 8) = 0;
        }
        v809 = v509;
        operator delete(v509);
      }
      if (v803 != v802)
        free(v803);
      v511 = v799;
      if (v799)
      {
        for (i40 = (uint64_t)v800; (_BYTE *)i40 != v511; i40 -= 32)
        {
          if (*(_BYTE *)(i40 - 8))
            *(_BYTE *)(i40 - 8) = 0;
        }
        v800 = v511;
        operator delete(v511);
      }
      if (v794 != v793)
        free(v794);
      v513 = v790;
      if (v790)
      {
        for (i41 = (uint64_t)v791; (_BYTE *)i41 != v513; i41 -= 32)
        {
          if (*(_BYTE *)(i41 - 8))
            *(_BYTE *)(i41 - 8) = 0;
        }
        v791 = v513;
        operator delete(v513);
      }
      if (v785 != v784)
        free(v785);
      v515 = (char *)__p;
      if ((_QWORD)__p)
      {
        for (i42 = (char *)*((_QWORD *)&__p + 1); i42 != v515; i42 -= 32)
        {
          if (*(i42 - 8))
            *(i42 - 8) = 0;
        }
        *((_QWORD *)&__p + 1) = v515;
        operator delete(v515);
      }
      if (v777 != v776)
        free(v777);
      v517 = (char *)v826;
      if ((_QWORD)v826)
      {
        for (i43 = (char *)*((_QWORD *)&v826 + 1); i43 != v517; i43 -= 32)
        {
          if (*(i43 - 8))
            *(i43 - 8) = 0;
        }
        *((_QWORD *)&v826 + 1) = v517;
        operator delete(v517);
      }
      if (v821 != v820)
        free(v821);
      v519 = v817;
      if (v817)
      {
        for (i44 = (uint64_t)v818; (_BYTE *)i44 != v519; i44 -= 32)
        {
          if (*(_BYTE *)(i44 - 8))
            *(_BYTE *)(i44 - 8) = 0;
        }
        v818 = v519;
        operator delete(v519);
      }
      if (v812 != v811)
        free(v812);
      v521 = v725;
      if (v725)
      {
        for (i45 = (uint64_t)v726; (_BYTE *)i45 != v521; i45 -= 32)
        {
          if (*(_BYTE *)(i45 - 8))
            *(_BYTE *)(i45 - 8) = 0;
        }
        v726 = v521;
        operator delete(v521);
      }
      if (v721 != v720)
        free(v721);
      v523 = v717;
      if (v717)
      {
        for (i46 = (uint64_t)v718; (_BYTE *)i46 != v523; i46 -= 32)
        {
          if (*(_BYTE *)(i46 - 8))
            *(_BYTE *)(i46 - 8) = 0;
        }
        v718 = v523;
        operator delete(v523);
      }
      if (v712 != v711)
        free(v712);
      v525 = v781;
      v776 = v781;
      v526 = v728;
      if (v728 == v727)
      {
        v777 = v781;
        v527 = v728;
      }
      else
      {
        v592 = v729;
        v525 = malloc_type_malloc(8 * v729, 0x4065EBACuLL);
        if (!v525)
        {
          if (v592)
            goto LABEL_1468;
          v525 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
          if (!v525)
            goto LABEL_1468;
        }
        v777 = v525;
        v527 = v727;
        v526 = v728;
      }
      v528 = v730;
      v778 = v729;
      if (v526 == v527)
        v529 = v730;
      else
        v529 = v729;
      if (v529)
      {
        memmove(v525, v526, 8 * v529);
        v528 = v730;
      }
      v779 = v528;
      v780 = v731;
      v783 = 0;
      __p = 0uLL;
      sub_1C60874BC((char *)&__p, v733, *((uint64_t *)&v733 + 1), (uint64_t)(*((_QWORD *)&v733 + 1) - v733) >> 5);
      v530 = v789;
      v784 = v789;
      v531 = v736;
      if (v736 == v735)
      {
        v785 = v789;
        v532 = v736;
      }
      else
      {
        v593 = v737;
        v530 = malloc_type_malloc(8 * v737, 0x4065EBACuLL);
        if (!v530)
        {
          if (v593)
            goto LABEL_1468;
          v530 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
          if (!v530)
            goto LABEL_1468;
        }
        v785 = v530;
        v532 = v735;
        v531 = v736;
      }
      v533 = v738;
      v786 = v737;
      if (v531 == v532)
        v534 = v738;
      else
        v534 = v737;
      if (v534)
      {
        memmove(v530, v531, 8 * v534);
        v533 = v738;
      }
      v787 = v533;
      v788 = v739;
      v792 = 0;
      v790 = 0;
      v791 = 0;
      sub_1C60874BC((char *)&v790, (uint64_t)v741, (uint64_t)v742, (v742 - (_BYTE *)v741) >> 5);
      v535 = v916;
      v912 = v916;
      v536 = v745;
      if (v745 == v744)
      {
        v913 = v916;
        v537 = v745;
      }
      else
      {
        v594 = v746;
        v535 = malloc_type_malloc(8 * v746, 0x4065EBACuLL);
        if (!v535)
        {
          if (v594)
            goto LABEL_1468;
          v535 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
          if (!v535)
            goto LABEL_1468;
        }
        v913 = v535;
        v537 = v744;
        v536 = v745;
      }
      LODWORD(v914) = v746;
      v538 = v747;
      if (v536 == v537)
        v539 = v747;
      else
        v539 = v746;
      if (v539)
      {
        memmove(v535, v536, 8 * v539);
        v538 = v747;
      }
      HIDWORD(v914) = v538;
      v915 = v748;
      v918 = 0;
      v917 = 0uLL;
      sub_1C60874BC((char *)&v917, (uint64_t)v750, (uint64_t)v751, (v751 - (_BYTE *)v750) >> 5);
      v540 = v924;
      v919 = v924;
      v541 = v754;
      if (v754 == v753)
      {
        v920 = v924;
        v542 = v754;
LABEL_1193:
        v921 = v755;
        v543 = v756;
        if (v541 == v542)
          v544 = v756;
        else
          v544 = v755;
        if (v544)
        {
          memmove(v540, v541, 8 * v544);
          v543 = v756;
        }
        v922 = v543;
        v923 = v757;
        v927 = 0;
        v925 = 0;
        v926 = 0;
        v545 = (llvm *)sub_1C60874BC((char *)&v925, (uint64_t)v759, (uint64_t)v760, (v760 - (_BYTE *)v759) >> 5);
        v546 = *((_QWORD *)&__p + 1);
        v547 = __p;
        while (1)
        {
LABEL_1199:
          if (v546 - v547 == *((_QWORD *)&v917 + 1) - (_QWORD)v917)
          {
            if (v547 == v546)
            {
LABEL_1239:
              v312 = 1;
              goto LABEL_1247;
            }
            v548 = v917 + 16;
            v549 = v547 + 16;
            while (1)
            {
              v550 = v549 - 16;
              if (*(_QWORD *)(v549 - 16) != *(_QWORD *)(v548 - 16))
                break;
              v551 = *(unsigned __int8 *)(v548 + 8);
              if (*(_BYTE *)(v549 + 8))
                v552 = v551 == 0;
              else
                v552 = 1;
              if (v552)
              {
                if ((*(_BYTE *)(v549 + 8) == 0) == (v551 != 0))
                  break;
              }
              else if (*(_QWORD *)(v549 - 8) != *(_QWORD *)(v548 - 8) || *(_QWORD *)v549 != *(_QWORD *)v548)
              {
                break;
              }
              v548 += 32;
              v549 += 32;
              if (v550 + 32 == v546)
                goto LABEL_1239;
            }
          }
          v554 = *(_QWORD *)(v546 - 32);
          if (*(_DWORD *)(*(_QWORD *)(v554 + 200) + 56))
            break;
          if (*(_DWORD *)(*(_QWORD *)(v554 + 208) + 80))
          {
            v561 = (llvm::raw_ostream *)llvm::errs(v545);
            v565 = (void *)*((_QWORD *)v561 + 4);
            if (*((_QWORD *)v561 + 3) - (_QWORD)v565 <= 0x20uLL)
            {
              v563 = "region exit block has successors\n";
              v564 = 33;
LABEL_1246:
              llvm::raw_ostream::write(v561, v563, v564);
              v312 = 0;
LABEL_1247:
              v566 = (char *)v925;
              if (v925)
              {
                for (i47 = v926; i47 != v566; i47 -= 32)
                {
                  if (*(i47 - 8))
                    *(i47 - 8) = 0;
                }
                v926 = v566;
                operator delete(v566);
              }
              if (v920 != v919)
                free(v920);
              v568 = (char *)v917;
              if ((_QWORD)v917)
              {
                for (i48 = (char *)*((_QWORD *)&v917 + 1); i48 != v568; i48 -= 32)
                {
                  if (*(i48 - 8))
                    *(i48 - 8) = 0;
                }
                *((_QWORD *)&v917 + 1) = v568;
                operator delete(v568);
              }
              if (v913 != v912)
                free(v913);
              v570 = v790;
              if (v790)
              {
                for (i49 = (uint64_t)v791; (_BYTE *)i49 != v570; i49 -= 32)
                {
                  if (*(_BYTE *)(i49 - 8))
                    *(_BYTE *)(i49 - 8) = 0;
                }
                v791 = v570;
                operator delete(v570);
              }
              if (v785 != v784)
                free(v785);
              v572 = (char *)__p;
              if ((_QWORD)__p)
              {
                for (i50 = (char *)*((_QWORD *)&__p + 1); i50 != v572; i50 -= 32)
                {
                  if (*(i50 - 8))
                    *(i50 - 8) = 0;
                }
                *((_QWORD *)&__p + 1) = v572;
                operator delete(v572);
              }
              if (v777 != v776)
                free(v777);
              v574 = v759;
              if (v759)
              {
                for (i51 = (uint64_t)v760; (_BYTE *)i51 != v574; i51 -= 32)
                {
                  if (*(_BYTE *)(i51 - 8))
                    *(_BYTE *)(i51 - 8) = 0;
                }
                v760 = v574;
                operator delete(v574);
              }
              if (v754 != v753)
                free(v754);
              v576 = v750;
              if (v750)
              {
                for (i52 = (uint64_t)v751; (_BYTE *)i52 != v576; i52 -= 32)
                {
                  if (*(_BYTE *)(i52 - 8))
                    *(_BYTE *)(i52 - 8) = 0;
                }
                v751 = v576;
                operator delete(v576);
              }
              if (v745 != v744)
                free(v745);
              v578 = v741;
              if (v741)
              {
                for (i53 = (uint64_t)v742; (_BYTE *)i53 != v578; i53 -= 32)
                {
                  if (*(_BYTE *)(i53 - 8))
                    *(_BYTE *)(i53 - 8) = 0;
                }
                v742 = v578;
                operator delete(v578);
              }
              if (v736 != v735)
                free(v736);
              v580 = (char *)v733;
              if ((_QWORD)v733)
              {
                for (i54 = (char *)*((_QWORD *)&v733 + 1); i54 != v580; i54 -= 32)
                {
                  if (*(i54 - 8))
                    *(i54 - 8) = 0;
                }
                *((_QWORD *)&v733 + 1) = v580;
                operator delete(v580);
              }
              if (v728 != v727)
                free(v728);
              goto LABEL_682;
            }
            v312 = 0;
            qmemcpy(v565, "region exit block has successors\n", 33);
            v596 = *((_QWORD *)v561 + 4) + 33;
LABEL_1384:
            *((_QWORD *)v561 + 4) = v596;
            goto LABEL_1247;
          }
          do
          {
            v545 = (llvm *)sub_1C6087824((void **)&v776);
            v546 = *((_QWORD *)&__p + 1);
            v547 = __p;
            if (*((_QWORD *)&__p + 1) - (_QWORD)__p == v791 - (_BYTE *)v790)
            {
              if ((_QWORD)__p == *((_QWORD *)&__p + 1))
                goto LABEL_1199;
              v555 = (char *)v790 + 16;
              v556 = __p + 16;
              while (1)
              {
                v557 = v556 - 16;
                if (*(_QWORD *)(v556 - 16) != *((_QWORD *)v555 - 2))
                  break;
                v558 = v555[8];
                if (*(_BYTE *)(v556 + 8))
                  v559 = v558 == 0;
                else
                  v559 = 1;
                if (v559)
                {
                  if ((*(_BYTE *)(v556 + 8) == 0) == (v558 != 0))
                    break;
                }
                else if (*(_QWORD *)(v556 - 8) != *((_QWORD *)v555 - 1) || *(_QWORD *)v556 != *(_QWORD *)v555)
                {
                  break;
                }
                v555 += 32;
                v556 += 32;
                if (v557 + 32 == *((_QWORD *)&__p + 1))
                  goto LABEL_1199;
              }
            }
          }
          while (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)&__p + 1) - 32) + 8) != 1);
        }
        v561 = (llvm::raw_ostream *)llvm::errs(v545);
        v562 = (void *)*((_QWORD *)v561 + 4);
        if (*((_QWORD *)v561 + 3) - (_QWORD)v562 <= 0x23uLL)
        {
          v563 = "region entry block has predecessors\n";
          v564 = 36;
          goto LABEL_1246;
        }
        v312 = 0;
        qmemcpy(v562, "region entry block has predecessors\n", 36);
        v596 = *((_QWORD *)v561 + 4) + 36;
        goto LABEL_1384;
      }
      v595 = v755;
      v540 = malloc_type_malloc(8 * v755, 0x4065EBACuLL);
      if (v540 || !v595 && (v540 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
      {
        v920 = v540;
        v542 = v753;
        v541 = v754;
        goto LABEL_1193;
      }
LABEL_1468:
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
LABEL_450:
    v236 = *(_QWORD *)(v228 - 32);
    v237 = (_QWORD *)(v236 + 200);
    for (i55 = *(_QWORD **)(v236 + 208); ; i55 = (_QWORD *)i55[1])
    {
      if (i55 == v237)
        goto LABEL_462;
      v239 = i55 - 3;
      if (!i55)
        v239 = 0;
      if (*((unsigned __int8 *)v239 + 8) - 13 > 7)
        break;
    }
LABEL_461:
    if (i55 != v237)
      break;
    do
    {
LABEL_462:
      v227 = (llvm *)sub_1C6087824((void **)&v776);
      v228 = *((_QWORD *)&__p + 1);
      v229 = __p;
      if (*((_QWORD *)&__p + 1) - (_QWORD)__p == v791 - (_BYTE *)v790)
      {
        if ((_QWORD)__p == *((_QWORD *)&__p + 1))
          goto LABEL_432;
        v241 = (char *)v790 + 16;
        v242 = __p + 16;
        while (1)
        {
          v243 = v242 - 16;
          if (*(_QWORD *)(v242 - 16) != *((_QWORD *)v241 - 2))
            break;
          v244 = v241[8];
          if (*(_BYTE *)(v242 + 8))
            v245 = v244 == 0;
          else
            v245 = 1;
          if (v245)
          {
            if ((*(_BYTE *)(v242 + 8) == 0) == (v244 != 0))
              break;
          }
          else if (*(_QWORD *)(v242 - 8) != *((_QWORD *)v241 - 1) || *(_QWORD *)v242 != *(_QWORD *)v241)
          {
            break;
          }
          v241 += 32;
          v242 += 32;
          if (v243 + 32 == *((_QWORD *)&__p + 1))
            goto LABEL_432;
        }
      }
    }
    while (*(_BYTE *)(*(_QWORD *)(*((_QWORD *)&__p + 1) - 32) + 8));
  }
  if (i55)
    v240 = (unsigned __int8 *)(i55 - 3);
  else
    v240 = 0;
  if (v240[8] - 21 < 0xFFFFFFF9)
  {
    i55 = (_QWORD *)i55[1];
    goto LABEL_461;
  }
  v266 = (llvm::raw_ostream *)llvm::errs(v227);
  v267 = (void *)*((_QWORD *)v266 + 4);
  if (*((_QWORD *)v266 + 3) - (_QWORD)v267 > 0x29uLL)
  {
    qmemcpy(v267, "Found phi-like recipe after non-phi recipe", 42);
    *((_QWORD *)v266 + 4) += 42;
  }
  else
  {
    v266 = llvm::raw_ostream::write(v266, "Found phi-like recipe after non-phi recipe", 0x2AuLL);
  }
  v268 = (llvm::raw_ostream *)llvm::errs(v266);
  v269 = (_WORD *)*((_QWORD *)v268 + 4);
  if (*((_QWORD *)v268 + 3) - (_QWORD)v269 > 1uLL)
  {
    *v269 = 8250;
    *((_QWORD *)v268 + 4) += 2;
  }
  else
  {
    llvm::raw_ostream::write(v268, ": ", 2uLL);
  }
  v270 = (llvm *)llvm::VPDef::dump((llvm::VPDef *)v240);
  v271 = (llvm::raw_ostream *)llvm::errs(v270);
  v272 = *((_QWORD *)v271 + 4);
  if ((unint64_t)(*((_QWORD *)v271 + 3) - v272) > 5)
  {
    *(_WORD *)(v272 + 4) = 2674;
    *(_DWORD *)v272 = 1702127201;
    *((_QWORD *)v271 + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(v271, "after\n", 6uLL);
  }
  if (*i55)
    v273 = (llvm::VPDef *)(*i55 - 24);
  else
    v273 = 0;
  llvm::VPDef::dump(v273);
  v274 = (char *)v925;
  if (v925)
  {
    for (i56 = v926; i56 != v274; i56 -= 32)
    {
      if (*(i56 - 8))
        *(i56 - 8) = 0;
    }
    v926 = v274;
    operator delete(v274);
  }
  if (v920 != v919)
    free(v920);
  v276 = (char *)v917;
  if ((_QWORD)v917)
  {
    for (i57 = (char *)*((_QWORD *)&v917 + 1); i57 != v276; i57 -= 32)
    {
      if (*(i57 - 8))
        *(i57 - 8) = 0;
    }
    *((_QWORD *)&v917 + 1) = v276;
    operator delete(v276);
  }
  if (v913 != v912)
    free(v913);
  v278 = v790;
  if (v790)
  {
    for (i58 = (uint64_t)v791; (_BYTE *)i58 != v278; i58 -= 32)
    {
      if (*(_BYTE *)(i58 - 8))
        *(_BYTE *)(i58 - 8) = 0;
    }
    v791 = v278;
    operator delete(v278);
  }
  if (v785 != v784)
    free(v785);
  v280 = (char *)__p;
  if ((_QWORD)__p)
  {
    for (i59 = (char *)*((_QWORD *)&__p + 1); i59 != v280; i59 -= 32)
    {
      if (*(i59 - 8))
        *(i59 - 8) = 0;
    }
    *((_QWORD *)&__p + 1) = v280;
    operator delete(v280);
  }
  if (v777 != v776)
    free(v777);
  v282 = v759;
  if (v759)
  {
    for (i60 = (uint64_t)v760; (_BYTE *)i60 != v282; i60 -= 32)
    {
      if (*(_BYTE *)(i60 - 8))
        *(_BYTE *)(i60 - 8) = 0;
    }
    v760 = v282;
    operator delete(v282);
  }
  if (v754 != v753)
    free(v754);
  v284 = v750;
  if (v750)
  {
    for (i61 = (uint64_t)v751; (_BYTE *)i61 != v284; i61 -= 32)
    {
      if (*(_BYTE *)(i61 - 8))
        *(_BYTE *)(i61 - 8) = 0;
    }
    v751 = v284;
    operator delete(v284);
  }
  if (v745 != v744)
    free(v745);
  v286 = v741;
  if (v741)
  {
    for (i62 = (uint64_t)v742; (_BYTE *)i62 != v286; i62 -= 32)
    {
      if (*(_BYTE *)(i62 - 8))
        *(_BYTE *)(i62 - 8) = 0;
    }
    v742 = v286;
    operator delete(v286);
  }
  if (v736 != v735)
    free(v736);
  v288 = (char *)v733;
  if ((_QWORD)v733)
  {
    for (i63 = (char *)*((_QWORD *)&v733 + 1); i63 != v288; i63 -= 32)
    {
      if (*(i63 - 8))
        *(i63 - 8) = 0;
    }
    *((_QWORD *)&v733 + 1) = v288;
    operator delete(v288);
  }
  if (v728 != v727)
    free(v728);
LABEL_681:
  v312 = 0;
LABEL_682:
  v313 = v774;
  if (v774)
  {
    for (i64 = (uint64_t)v775; (_BYTE *)i64 != v313; i64 -= 32)
    {
      if (*(_BYTE *)(i64 - 8))
        *(_BYTE *)(i64 - 8) = 0;
    }
    v775 = v313;
    operator delete(v313);
  }
  if (v770 != v769)
    free(v770);
  v315 = v767;
  if (v767)
  {
    for (i65 = (uint64_t)v768; (_BYTE *)i65 != v315; i65 -= 32)
    {
      if (*(_BYTE *)(i65 - 8))
        *(_BYTE *)(i65 - 8) = 0;
    }
    v768 = v315;
    operator delete(v315);
  }
  if (__src != v762)
    free(__src);
  return v312;
}

void sub_1C60D30F8(uint64_t a1, uint64_t a2)
{
  _BYTE *v4;
  char *v5;
  _BYTE *v6;
  _QWORD *v7;
  unsigned int v8;
  char *v9;
  _BYTE *v10;
  _BYTE *v11;
  int v12;
  int v13;
  void *v14;
  unint64_t v15;
  void *v16;
  char *v17;
  _BYTE *v18;
  _BYTE *v19;
  _BYTE *v20;
  _BYTE *v21;
  uint64_t v22;
  int v23;
  _BYTE v24[64];
  void *v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  int v30;
  unsigned int v31;
  int v32;
  _QWORD v33[12];

  v20 = v24;
  v21 = v24;
  v22 = 8;
  v23 = 0;
  v26 = 0;
  v27 = 0;
  v25 = 0;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v20, a2);
  v28 = (_QWORD *)a2;
  LOBYTE(v29) = 0;
  LOBYTE(v32) = 0;
  v4 = v26;
  if ((unint64_t)v26 >= v27)
  {
    v5 = sub_1C60879F8(&v25, (uint64_t)&v28);
  }
  else
  {
    *v26 = a2;
    v4[8] = 0;
    v5 = v4 + 32;
    v4[24] = 0;
  }
  v26 = v5;
  v28 = v33;
  v6 = v20;
  v7 = v21;
  if (v21 == v20)
  {
    v29 = v33;
    v8 = HIDWORD(v22);
    if (HIDWORD(v22))
    {
      v9 = v5;
      v10 = v20;
      memmove(v33, v21, 8 * HIDWORD(v22));
      v6 = v10;
      v5 = v9;
    }
    v11 = v7;
    v7 = v33;
  }
  else
  {
    v29 = v21;
    v21 = v20;
    v11 = v20;
    v8 = HIDWORD(v22);
  }
  v12 = v22;
  v13 = v23;
  v30 = v22;
  v31 = v8;
  v32 = v23;
  v22 = 8;
  v23 = 0;
  v14 = v25;
  v15 = v27;
  v33[8] = v25;
  v33[9] = v5;
  v33[10] = v27;
  v26 = 0;
  v27 = 0;
  v25 = 0;
  v16 = (void *)(a1 + 32);
  *(_QWORD *)a1 = a1 + 32;
  if (v7 == v33)
  {
    *(_QWORD *)(a1 + 8) = v16;
    if (v8)
    {
      v17 = v5;
      v18 = v6;
      v19 = v11;
      memcpy(v16, v33, 8 * v8);
      v11 = v19;
      v6 = v18;
      v5 = v17;
    }
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v7;
  }
  *(_DWORD *)(a1 + 16) = v12;
  *(_DWORD *)(a1 + 20) = v8;
  *(_DWORD *)(a1 + 24) = v13;
  *(_QWORD *)(a1 + 96) = v14;
  *(_QWORD *)(a1 + 104) = v5;
  *(_QWORD *)(a1 + 112) = v15;
  *(_QWORD *)(a1 + 120) = a1 + 152;
  *(_QWORD *)(a1 + 128) = a1 + 152;
  *(_QWORD *)(a1 + 136) = 8;
  *(_DWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  if (v11 != v6)
    free(v11);
}

uint64_t sub_1C60D3308(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  _QWORD v13[11];

  v4 = *(_QWORD **)(a2 + 8);
  if (v4 == *(_QWORD **)a2)
  {
    v5 = *(unsigned int *)(a2 + 20);
    if ((_DWORD)v5)
      memmove(v13, v4, 8 * v5);
    v4 = v13;
  }
  else
  {
    *(_QWORD *)(a2 + 8) = *(_QWORD *)a2;
    LODWORD(v5) = *(_DWORD *)(a2 + 20);
  }
  v6 = *(_DWORD *)(a2 + 16);
  v7 = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 16) = 8;
  *(_DWORD *)(a2 + 24) = 0;
  v8 = *(_QWORD *)(a2 + 96);
  v9 = *(_QWORD *)(a2 + 104);
  v13[8] = v8;
  v13[9] = v9;
  v10 = *(_QWORD *)(a2 + 112);
  v13[10] = v10;
  v11 = (void *)(a1 + 32);
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 96) = 0;
  *(_QWORD *)a1 = a1 + 32;
  if (v4 == v13)
  {
    *(_QWORD *)(a1 + 8) = v11;
    if ((_DWORD)v5)
      memcpy(v11, v13, 8 * v5);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v4;
  }
  *(_DWORD *)(a1 + 16) = v6;
  *(_DWORD *)(a1 + 20) = v5;
  *(_DWORD *)(a1 + 24) = v7;
  *(_QWORD *)(a1 + 96) = v8;
  *(_QWORD *)(a1 + 104) = v9;
  *(_QWORD *)(a1 + 112) = v10;
  return a1;
}

uint64_t sub_1C60D3408(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v6;
  const void *v7;
  const void *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  _BYTE *v13;
  const void *v14;
  const void *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  _BYTE *v19;
  const void *v20;
  void *v21;
  unsigned int v22;
  unsigned int v23;
  void *v24;
  _BYTE *v25;
  _BYTE *v26;
  int v27;
  int v28;
  void *v29;
  _BYTE *v30;
  _BYTE *v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  BOOL v41;
  _BYTE *v43;
  uint64_t i;
  _BYTE *v45;
  uint64_t j;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  _BYTE *v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  _BYTE v55[64];
  void *__p;
  _BYTE *v57;
  uint64_t v58;
  _BYTE *v59;
  _BYTE *v60;
  unsigned int v61;
  unsigned int v62;
  int v63;
  _BYTE v64[64];
  void *v65;
  _BYTE *v66;
  uint64_t v67;
  _BYTE *v68;
  _BYTE *v69;
  uint64_t v70;
  int v71;
  _BYTE v72[64];
  __int128 v73;
  uint64_t v74;

  v6 = v64;
  v59 = v64;
  v7 = *(const void **)(a2 + 8);
  if (v7 == *(const void **)a2)
  {
    v60 = v64;
    v8 = v7;
  }
  else
  {
    v48 = *(unsigned int *)(a2 + 16);
    v6 = malloc_type_malloc(8 * v48, 0x4065EBACuLL);
    if (!v6)
    {
      if ((_DWORD)v48)
        goto LABEL_94;
      v6 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v6)
        goto LABEL_94;
    }
    v60 = v6;
    v8 = *(const void **)a2;
    v7 = *(const void **)(a2 + 8);
  }
  v10 = *(_DWORD *)(a2 + 16);
  v9 = *(_DWORD *)(a2 + 20);
  v61 = v10;
  if (v7 == v8)
    v11 = v9;
  else
    v11 = v10;
  if (v11)
  {
    memmove(v6, v7, 8 * v11);
    v9 = *(_DWORD *)(a2 + 20);
  }
  v12 = *(_DWORD *)(a2 + 24);
  v62 = v9;
  v63 = v12;
  v66 = 0;
  v67 = 0;
  v65 = 0;
  sub_1C60874BC((char *)&v65, *(_QWORD *)(a2 + 96), *(_QWORD *)(a2 + 104), (uint64_t)(*(_QWORD *)(a2 + 104) - *(_QWORD *)(a2 + 96)) >> 5);
  v13 = v55;
  v14 = *(const void **)(a3 + 8);
  if (v14 == *(const void **)a3)
  {
    v51 = v55;
    v15 = v14;
  }
  else
  {
    v49 = *(unsigned int *)(a3 + 16);
    v13 = malloc_type_malloc(8 * v49, 0x4065EBACuLL);
    if (!v13)
    {
      if ((_DWORD)v49)
        goto LABEL_94;
      v13 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v13)
        goto LABEL_94;
    }
    v51 = v13;
    v15 = *(const void **)a3;
    v14 = *(const void **)(a3 + 8);
  }
  v17 = *(_DWORD *)(a3 + 16);
  v16 = *(_DWORD *)(a3 + 20);
  v52 = v17;
  if (v14 == v15)
    v18 = v16;
  else
    v18 = v17;
  if (v18)
  {
    memmove(v13, v14, 8 * v18);
    v16 = *(_DWORD *)(a3 + 20);
  }
  v53 = v16;
  v54 = *(_DWORD *)(a3 + 24);
  v57 = 0;
  v58 = 0;
  __p = 0;
  sub_1C60874BC((char *)&__p, *(_QWORD *)(a3 + 96), *(_QWORD *)(a3 + 104), (uint64_t)(*(_QWORD *)(a3 + 104) - *(_QWORD *)(a3 + 96)) >> 5);
  v19 = v72;
  v68 = v72;
  v20 = v60;
  if (v60 == v59)
  {
    v69 = v72;
    v21 = v60;
  }
  else
  {
    v50 = v61;
    v19 = malloc_type_malloc(8 * v61, 0x4065EBACuLL);
    if (!v19)
    {
      if (v50)
        goto LABEL_94;
      v19 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v19)
        goto LABEL_94;
    }
    v69 = v19;
    v21 = v59;
    v20 = v60;
  }
  v22 = v62;
  LODWORD(v70) = v61;
  if (v20 == v21)
    v23 = v62;
  else
    v23 = v61;
  if (v23)
  {
    memmove(v19, v20, 8 * v23);
    v22 = v62;
  }
  HIDWORD(v70) = v22;
  v71 = v63;
  v74 = 0;
  v73 = 0uLL;
  sub_1C60874BC((char *)&v73, (uint64_t)v65, (uint64_t)v66, (v66 - (_BYTE *)v65) >> 5);
  v24 = (void *)(a1 + 32);
  *(_QWORD *)a1 = a1 + 32;
  v26 = v68;
  v25 = v69;
  if (v69 == v68)
  {
    *(_QWORD *)(a1 + 8) = v24;
    v27 = HIDWORD(v70);
    if (HIDWORD(v70))
      memmove(v24, v25, 8 * HIDWORD(v70));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v69;
    v69 = v26;
    v25 = v26;
    v27 = HIDWORD(v70);
  }
  v28 = v71;
  *(_DWORD *)(a1 + 16) = v70;
  *(_DWORD *)(a1 + 20) = v27;
  *(_DWORD *)(a1 + 24) = v28;
  v70 = 8;
  v71 = 0;
  *(_OWORD *)(a1 + 96) = v73;
  *(_QWORD *)(a1 + 112) = v74;
  v74 = 0;
  v73 = 0uLL;
  if (v25 != v26)
    free(v25);
  v29 = (void *)(a1 + 160);
  *(_QWORD *)(a1 + 128) = a1 + 160;
  v30 = v51;
  if (v51 != v55)
  {
    v29 = malloc_type_malloc(8 * v52, 0x4065EBACuLL);
    if (v29 || !v52 && (v29 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
    {
      *(_QWORD *)(a1 + 136) = v29;
      v31 = v55;
      v30 = v51;
      goto LABEL_29;
    }
LABEL_94:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  *(_QWORD *)(a1 + 136) = v29;
  v31 = v51;
LABEL_29:
  v32 = v53;
  *(_DWORD *)(a1 + 144) = v52;
  if (v30 == v31)
    v33 = v53;
  else
    v33 = v52;
  if (v33)
  {
    memmove(v29, v30, 8 * v33);
    v32 = v53;
  }
  *(_QWORD *)(a1 + 224) = 0;
  *(_DWORD *)(a1 + 148) = v32;
  *(_DWORD *)(a1 + 152) = v54;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  sub_1C60874BC((char *)(a1 + 224), (uint64_t)__p, (uint64_t)v57, (v57 - (_BYTE *)__p) >> 5);
  while (1)
  {
    v35 = *(_QWORD *)(a1 + 96);
    v34 = *(_QWORD *)(a1 + 104);
    v36 = *(_QWORD *)(a1 + 224);
    if (v34 - v35 == *(_QWORD *)(a1 + 232) - v36)
    {
      if (v35 == v34)
        break;
      v37 = v36 + 16;
      v38 = v35 + 16;
      while (1)
      {
        v39 = v38 - 16;
        if (*(_QWORD *)(v38 - 16) != *(_QWORD *)(v37 - 16))
          break;
        v40 = *(unsigned __int8 *)(v37 + 8);
        if (*(_BYTE *)(v38 + 8))
          v41 = v40 == 0;
        else
          v41 = 1;
        if (v41)
        {
          if ((*(_BYTE *)(v38 + 8) == 0) == (v40 != 0))
            break;
        }
        else if (*(_QWORD *)(v38 - 8) != *(_QWORD *)(v37 - 8) || *(_QWORD *)v38 != *(_QWORD *)v37)
        {
          break;
        }
        v37 += 32;
        v38 += 32;
        if (v39 + 32 == v34)
          goto LABEL_55;
      }
    }
    if (!*(_BYTE *)(*(_QWORD *)(v34 - 32) + 8))
      break;
    sub_1C6087824((void **)a1);
  }
LABEL_55:
  v43 = __p;
  if (__p)
  {
    for (i = (uint64_t)v57; (_BYTE *)i != v43; i -= 32)
    {
      if (*(_BYTE *)(i - 8))
        *(_BYTE *)(i - 8) = 0;
    }
    v57 = v43;
    operator delete(v43);
  }
  if (v51 != v55)
    free(v51);
  v45 = v65;
  if (v65)
  {
    for (j = (uint64_t)v66; (_BYTE *)j != v45; j -= 32)
    {
      if (*(_BYTE *)(j - 8))
        *(_BYTE *)(j - 8) = 0;
    }
    v66 = v45;
    operator delete(v45);
  }
  if (v60 != v59)
    free(v60);
  return a1;
}

uint64_t sub_1C60D38AC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v6;
  const void *v7;
  const void *v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  int v12;
  _BYTE *v13;
  const void *v14;
  const void *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  _BYTE *v19;
  const void *v20;
  void *v21;
  unsigned int v22;
  unsigned int v23;
  void *v24;
  _BYTE *v25;
  _BYTE *v26;
  int v27;
  int v28;
  void *v29;
  _BYTE *v30;
  _BYTE *v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  BOOL v41;
  _BYTE *v43;
  uint64_t i;
  _BYTE *v45;
  uint64_t j;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  _BYTE *v51;
  unsigned int v52;
  unsigned int v53;
  int v54;
  _BYTE v55[64];
  void *__p;
  _BYTE *v57;
  uint64_t v58;
  _BYTE *v59;
  _BYTE *v60;
  unsigned int v61;
  unsigned int v62;
  int v63;
  _BYTE v64[64];
  void *v65;
  _BYTE *v66;
  uint64_t v67;
  _BYTE *v68;
  _BYTE *v69;
  uint64_t v70;
  int v71;
  _BYTE v72[64];
  __int128 v73;
  uint64_t v74;

  v6 = v64;
  v59 = v64;
  v7 = *(const void **)(a2 + 8);
  if (v7 == *(const void **)a2)
  {
    v60 = v64;
    v8 = v7;
  }
  else
  {
    v48 = *(unsigned int *)(a2 + 16);
    v6 = malloc_type_malloc(8 * v48, 0x4065EBACuLL);
    if (!v6)
    {
      if ((_DWORD)v48)
        goto LABEL_94;
      v6 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v6)
        goto LABEL_94;
    }
    v60 = v6;
    v8 = *(const void **)a2;
    v7 = *(const void **)(a2 + 8);
  }
  v10 = *(_DWORD *)(a2 + 16);
  v9 = *(_DWORD *)(a2 + 20);
  v61 = v10;
  if (v7 == v8)
    v11 = v9;
  else
    v11 = v10;
  if (v11)
  {
    memmove(v6, v7, 8 * v11);
    v9 = *(_DWORD *)(a2 + 20);
  }
  v12 = *(_DWORD *)(a2 + 24);
  v62 = v9;
  v63 = v12;
  v66 = 0;
  v67 = 0;
  v65 = 0;
  sub_1C60874BC((char *)&v65, *(_QWORD *)(a2 + 96), *(_QWORD *)(a2 + 104), (uint64_t)(*(_QWORD *)(a2 + 104) - *(_QWORD *)(a2 + 96)) >> 5);
  v13 = v55;
  v14 = *(const void **)(a3 + 8);
  if (v14 == *(const void **)a3)
  {
    v51 = v55;
    v15 = v14;
  }
  else
  {
    v49 = *(unsigned int *)(a3 + 16);
    v13 = malloc_type_malloc(8 * v49, 0x4065EBACuLL);
    if (!v13)
    {
      if ((_DWORD)v49)
        goto LABEL_94;
      v13 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v13)
        goto LABEL_94;
    }
    v51 = v13;
    v15 = *(const void **)a3;
    v14 = *(const void **)(a3 + 8);
  }
  v17 = *(_DWORD *)(a3 + 16);
  v16 = *(_DWORD *)(a3 + 20);
  v52 = v17;
  if (v14 == v15)
    v18 = v16;
  else
    v18 = v17;
  if (v18)
  {
    memmove(v13, v14, 8 * v18);
    v16 = *(_DWORD *)(a3 + 20);
  }
  v53 = v16;
  v54 = *(_DWORD *)(a3 + 24);
  v57 = 0;
  v58 = 0;
  __p = 0;
  sub_1C60874BC((char *)&__p, *(_QWORD *)(a3 + 96), *(_QWORD *)(a3 + 104), (uint64_t)(*(_QWORD *)(a3 + 104) - *(_QWORD *)(a3 + 96)) >> 5);
  v19 = v72;
  v68 = v72;
  v20 = v60;
  if (v60 == v59)
  {
    v69 = v72;
    v21 = v60;
  }
  else
  {
    v50 = v61;
    v19 = malloc_type_malloc(8 * v61, 0x4065EBACuLL);
    if (!v19)
    {
      if (v50)
        goto LABEL_94;
      v19 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v19)
        goto LABEL_94;
    }
    v69 = v19;
    v21 = v59;
    v20 = v60;
  }
  v22 = v62;
  LODWORD(v70) = v61;
  if (v20 == v21)
    v23 = v62;
  else
    v23 = v61;
  if (v23)
  {
    memmove(v19, v20, 8 * v23);
    v22 = v62;
  }
  HIDWORD(v70) = v22;
  v71 = v63;
  v74 = 0;
  v73 = 0uLL;
  sub_1C60874BC((char *)&v73, (uint64_t)v65, (uint64_t)v66, (v66 - (_BYTE *)v65) >> 5);
  v24 = (void *)(a1 + 32);
  *(_QWORD *)a1 = a1 + 32;
  v26 = v68;
  v25 = v69;
  if (v69 == v68)
  {
    *(_QWORD *)(a1 + 8) = v24;
    v27 = HIDWORD(v70);
    if (HIDWORD(v70))
      memmove(v24, v25, 8 * HIDWORD(v70));
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v69;
    v69 = v26;
    v25 = v26;
    v27 = HIDWORD(v70);
  }
  v28 = v71;
  *(_DWORD *)(a1 + 16) = v70;
  *(_DWORD *)(a1 + 20) = v27;
  *(_DWORD *)(a1 + 24) = v28;
  v70 = 8;
  v71 = 0;
  *(_OWORD *)(a1 + 96) = v73;
  *(_QWORD *)(a1 + 112) = v74;
  v74 = 0;
  v73 = 0uLL;
  if (v25 != v26)
    free(v25);
  v29 = (void *)(a1 + 160);
  *(_QWORD *)(a1 + 128) = a1 + 160;
  v30 = v51;
  if (v51 != v55)
  {
    v29 = malloc_type_malloc(8 * v52, 0x4065EBACuLL);
    if (v29 || !v52 && (v29 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) != 0)
    {
      *(_QWORD *)(a1 + 136) = v29;
      v31 = v55;
      v30 = v51;
      goto LABEL_29;
    }
LABEL_94:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
  *(_QWORD *)(a1 + 136) = v29;
  v31 = v51;
LABEL_29:
  v32 = v53;
  *(_DWORD *)(a1 + 144) = v52;
  if (v30 == v31)
    v33 = v53;
  else
    v33 = v52;
  if (v33)
  {
    memmove(v29, v30, 8 * v33);
    v32 = v53;
  }
  *(_QWORD *)(a1 + 224) = 0;
  *(_DWORD *)(a1 + 148) = v32;
  *(_DWORD *)(a1 + 152) = v54;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  sub_1C60874BC((char *)(a1 + 224), (uint64_t)__p, (uint64_t)v57, (v57 - (_BYTE *)__p) >> 5);
  while (1)
  {
    v35 = *(_QWORD *)(a1 + 96);
    v34 = *(_QWORD *)(a1 + 104);
    v36 = *(_QWORD *)(a1 + 224);
    if (v34 - v35 == *(_QWORD *)(a1 + 232) - v36)
    {
      if (v35 == v34)
        break;
      v37 = v36 + 16;
      v38 = v35 + 16;
      while (1)
      {
        v39 = v38 - 16;
        if (*(_QWORD *)(v38 - 16) != *(_QWORD *)(v37 - 16))
          break;
        v40 = *(unsigned __int8 *)(v37 + 8);
        if (*(_BYTE *)(v38 + 8))
          v41 = v40 == 0;
        else
          v41 = 1;
        if (v41)
        {
          if ((*(_BYTE *)(v38 + 8) == 0) == (v40 != 0))
            break;
        }
        else if (*(_QWORD *)(v38 - 8) != *(_QWORD *)(v37 - 8) || *(_QWORD *)v38 != *(_QWORD *)v37)
        {
          break;
        }
        v37 += 32;
        v38 += 32;
        if (v39 + 32 == v34)
          goto LABEL_55;
      }
    }
    if (*(_BYTE *)(*(_QWORD *)(v34 - 32) + 8) == 1)
      break;
    sub_1C6087824((void **)a1);
  }
LABEL_55:
  v43 = __p;
  if (__p)
  {
    for (i = (uint64_t)v57; (_BYTE *)i != v43; i -= 32)
    {
      if (*(_BYTE *)(i - 8))
        *(_BYTE *)(i - 8) = 0;
    }
    v57 = v43;
    operator delete(v43);
  }
  if (v51 != v55)
    free(v51);
  v45 = v65;
  if (v65)
  {
    for (j = (uint64_t)v66; (_BYTE *)j != v45; j -= 32)
    {
      if (*(_BYTE *)(j - 8))
        *(_BYTE *)(j - 8) = 0;
    }
    v66 = v45;
    operator delete(v45);
  }
  if (v60 != v59)
    free(v60);
  return a1;
}

uint64_t sub_1C60D3D54()
{
  __n128 v1;
  int v2;
  char v3;
  char *v4;

  v3 = 0;
  v4 = &v3;
  v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Verify VPlan H-CFG.";
  v1.n128_u64[1] = 19;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED82C238, "vplan-verify-hcfg", &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED82C238, &dword_1C475E000);
}

std::string *llvm::AsmLexer::ReturnError@<X0>(std::string *__str@<X2>, std::string *a2@<X0>, std::string::size_type a3@<X1>, uint64_t a4@<X8>)
{
  std::string *result;
  std::string::size_type v8;

  a2[2].__r_.__value_.__r.__words[2] = a3;
  result = std::string::operator=(a2 + 3, __str);
  v8 = a2[6].__r_.__value_.__r.__words[0] - a3;
  *(_DWORD *)a4 = 1;
  *(_QWORD *)(a4 + 8) = a3;
  *(_QWORD *)(a4 + 16) = v8;
  *(_DWORD *)(a4 + 32) = 64;
  *(_QWORD *)(a4 + 24) = 0;
  return result;
}

uint64_t llvm::AsmLexer::getNextChar(llvm::AsmLexer *this)
{
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)*((_QWORD *)this + 18);
  if (v1 == (unsigned __int8 *)(*((_QWORD *)this + 19) + *((_QWORD *)this + 20)))
    return 0xFFFFFFFFLL;
  *((_QWORD *)this + 18) = v1 + 1;
  return *v1;
}

uint64_t llvm::AsmLexer::peekNextChar(llvm::AsmLexer *this)
{
  unsigned __int8 *v1;

  v1 = (unsigned __int8 *)*((_QWORD *)this + 18);
  if (v1 == (unsigned __int8 *)(*((_QWORD *)this + 19) + *((_QWORD *)this + 20)))
    return 0xFFFFFFFFLL;
  else
    return *v1;
}

void llvm::AsmLexer::LexFloatLiteral(std::string *this@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 *data;
  int v5;
  unsigned __int8 *v6;
  int v7;
  std::string::size_type v8;
  unsigned __int8 *v9;
  int v10;
  unsigned __int8 *v11;
  int v12;
  unsigned __int8 *v13;
  std::string __str;

  data = (unsigned __int8 *)this[6].__r_.__value_.__l.__data_;
  v5 = *data;
  if ((v5 - 48) <= 9)
  {
    v6 = data + 1;
    do
    {
      this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)v6;
      v7 = *v6++;
      v5 = v7;
    }
    while ((v7 - 48) < 0xA);
    data = v6 - 1;
  }
  if (v5 > 68)
  {
    if (v5 == 69 || v5 == 101)
    {
      v9 = data + 1;
      this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(data + 1);
      v10 = data[1];
      if (v10 == 45 || v10 == 43)
      {
        v9 = data + 2;
        this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(data + 2);
        v10 = data[2];
      }
      data = v9;
      if ((v10 - 48) <= 9)
      {
        v11 = v9 + 1;
        do
        {
          this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)v11;
          v12 = *v11++;
        }
        while ((v12 - 48) < 0xA);
        data = v11 - 1;
      }
    }
    goto LABEL_19;
  }
  if (v5 != 43 && v5 != 45)
  {
LABEL_19:
    v13 = (unsigned __int8 *)this[4].__r_.__value_.__l.__data_;
    *(_DWORD *)a2 = 6;
    *(_QWORD *)(a2 + 8) = v13;
    *(_QWORD *)(a2 + 16) = data - v13;
    *(_DWORD *)(a2 + 32) = 64;
    *(_QWORD *)(a2 + 24) = 0;
    return;
  }
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
  *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_1C640C6B0;
  strcpy(__str.__r_.__value_.__l.__data_, "invalid sign in float literal");
  this[2].__r_.__value_.__r.__words[2] = (std::string::size_type)data;
  std::string::operator=(this + 3, &__str);
  v8 = this[6].__r_.__value_.__r.__words[0] - (_QWORD)data;
  *(_DWORD *)a2 = 1;
  *(_QWORD *)(a2 + 8) = data;
  *(_QWORD *)(a2 + 16) = v8;
  *(_DWORD *)(a2 + 32) = 64;
  *(_QWORD *)(a2 + 24) = 0;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void llvm::AsmLexer::LexHexFloatLiteral(std::string *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  unsigned __int8 *data;
  int v6;
  uint64_t v7;
  unsigned __int8 *v8;
  std::string::pointer v9;
  unsigned __int8 *v10;
  int v11;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned int v14;
  std::string::pointer v15;
  std::string::size_type v16;
  std::string __str;

  data = (unsigned __int8 *)this[6].__r_.__value_.__l.__data_;
  v6 = *data;
  if (v6 == 46)
  {
    v7 = 0;
    do
    {
      v8 = &data[v7 + 1];
      this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
      v6 = *v8;
      ++v7;
    }
    while (word_1C85F7092[*v8] != -1);
    data += v7;
    if (v7 != 1)
      goto LABEL_7;
  }
  if (a2)
  {
    v9 = this[4].__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x58uLL);
    *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_1C8677FC0;
    strcpy(__str.__r_.__value_.__l.__data_, "invalid hexadecimal floating-point constant: expected at least one significand digit");
  }
  else
  {
LABEL_7:
    if ((v6 | 0x20) == 0x70)
    {
      v10 = data + 1;
      this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(data + 1);
      v11 = data[1];
      if (v11 == 45 || v11 == 43)
      {
        v10 = data + 2;
        this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(data + 2);
        v11 = data[2];
      }
      if ((v11 - 48) <= 9)
      {
        v12 = 0;
        v13 = v10 + 1;
        do
        {
          this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)&v13[v12];
          v14 = v13[v12++] - 48;
        }
        while (v14 < 0xA);
        if (v12)
        {
          v15 = this[4].__r_.__value_.__l.__data_;
          *(_DWORD *)a3 = 6;
          *(_QWORD *)(a3 + 8) = v15;
          *(_QWORD *)(a3 + 16) = v10 - (unsigned __int8 *)v15 + v12;
          *(_DWORD *)(a3 + 32) = 64;
          *(_QWORD *)(a3 + 24) = 0;
          return;
        }
      }
      v9 = this[4].__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x58uLL);
      *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_1C8663CF0;
      strcpy(__str.__r_.__value_.__l.__data_, "invalid hexadecimal floating-point constant: expected at least one exponent digit");
    }
    else
    {
      v9 = this[4].__r_.__value_.__l.__data_;
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x48uLL);
      *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_1C8663CE0;
      strcpy(__str.__r_.__value_.__l.__data_, "invalid hexadecimal floating-point constant: expected exponent part 'p'");
    }
  }
  this[2].__r_.__value_.__r.__words[2] = (std::string::size_type)v9;
  std::string::operator=(this + 3, &__str);
  v16 = this[6].__r_.__value_.__r.__words[0] - (_QWORD)v9;
  *(_DWORD *)a3 = 1;
  *(_QWORD *)(a3 + 8) = v9;
  *(_QWORD *)(a3 + 16) = v16;
  *(_DWORD *)(a3 + 32) = 64;
  *(_QWORD *)(a3 + 24) = 0;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
}

void llvm::AsmLexer::LexIdentifier(std::string *this@<X0>, uint64_t a2@<X8>)
{
  std::string::pointer data;
  unsigned __int8 *v3;
  int v4;
  int v5;
  int v7;
  int v8;
  uint64_t i;
  int v10;
  BOOL v13;
  _BOOL4 v14;
  BOOL v15;
  std::string::pointer v16;
  _BOOL4 v18;
  BOOL v19;

  data = this[6].__r_.__value_.__l.__data_;
  if (*(data - 1) != 46 || *data - 48 > 9)
    goto LABEL_12;
  v3 = (unsigned __int8 *)(data + 1);
  do
  {
    this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)v3;
    v5 = *v3++;
    v4 = v5;
  }
  while ((v5 - 48) < 0xA);
  data = (std::string::pointer)(v3 - 1);
  if ((v4 & 0xFFFFFFDF) - 65 >= 0x1A)
  {
    if ((v4 - 36) <= 0x3B && ((1 << (v4 - 36)) & 0x800000008000401) != 0)
      goto LABEL_12;
    v18 = v4 == 35 && this[4].__r_.__value_.__s.__data_[10] != 0;
    if (this[4].__r_.__value_.__s.__data_[9])
      v19 = v4 == 64;
    else
      v19 = 0;
    if (!v19 && !v18)
      goto LABEL_7;
  }
  if ((v4 | 0x20) == 0x65)
  {
LABEL_7:
    llvm::AsmLexer::LexFloatLiteral(this, a2);
    return;
  }
LABEL_12:
  v7 = this[4].__r_.__value_.__s.__data_[9];
  v8 = this[4].__r_.__value_.__s.__data_[10];
  for (i = -(uint64_t)data; ; --i)
  {
    v10 = *data;
    if ((v10 - 48) >= 0xA
      && (v10 & 0xFFFFFFDF) - 65 >= 0x1A
      && ((v10 - 36) > 0x3B || ((1 << (v10 - 36)) & 0x800000008000401) == 0))
    {
      v13 = v8 && v10 == 35;
      v14 = v13;
      v15 = v10 != 64 || v7 == 0;
      if (v15 && !v14)
        break;
    }
    this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)++data;
  }
  v16 = this[4].__r_.__value_.__l.__data_;
  if (data == v16 + 1 && *v16 == 46)
  {
    *(_DWORD *)a2 = 24;
    *(_QWORD *)(a2 + 8) = v16;
    *(_DWORD *)(a2 + 32) = 64;
    *(_OWORD *)(a2 + 16) = xmmword_1C64169E0;
  }
  else
  {
    *(_DWORD *)a2 = 2;
    *(_QWORD *)(a2 + 8) = v16;
    *(_QWORD *)(a2 + 16) = -i - (_QWORD)v16;
    *(_DWORD *)(a2 + 32) = 64;
    *(_QWORD *)(a2 + 24) = 0;
  }
}

void llvm::AsmLexer::LexSlash(std::string *this@<X0>, uint64_t a2@<X8>)
{
  std::string::pointer v4;
  int v5;
  std::string::pointer data;
  char *v7;
  uint64_t v8;
  char *v9;
  std::string::pointer v10;
  std::string::size_type v11;
  std::string::size_type size;
  uint64_t v13;
  uint64_t v14;
  std::string::pointer v15;
  std::string __p;

  if (!*(_BYTE *)(this[5].__r_.__value_.__r.__words[2] + 65))
  {
LABEL_4:
    this[7].__r_.__value_.__s.__data_[1] = 0;
    data = this[4].__r_.__value_.__l.__data_;
    *(_DWORD *)a2 = 15;
    *(_QWORD *)(a2 + 8) = data;
    *(_DWORD *)(a2 + 32) = 64;
    *(_OWORD *)(a2 + 16) = xmmword_1C64169E0;
    return;
  }
  v4 = this[6].__r_.__value_.__l.__data_;
  v5 = *v4;
  if (v5 != 42)
  {
    if (v5 == 47)
    {
      this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(v4 + 1);
      llvm::AsmLexer::LexLineComment((llvm::AsmLexer *)this, a2);
      return;
    }
    goto LABEL_4;
  }
  this[7].__r_.__value_.__s.__data_[1] = 0;
  this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(v4 + 1);
  v7 = (char *)(this[6].__r_.__value_.__l.__size_ + this[6].__r_.__value_.__r.__words[2]);
  if (v4 + 1 == v7)
  {
LABEL_10:
    v10 = this[4].__r_.__value_.__l.__data_;
    *((_BYTE *)&__p.__r_.__value_.__s + 23) = 20;
    strcpy((char *)&__p, "unterminated comment");
    this[2].__r_.__value_.__r.__words[2] = (std::string::size_type)v10;
    std::string::operator=(this + 3, &__p);
    v11 = this[6].__r_.__value_.__r.__words[0] - (_QWORD)v10;
    *(_DWORD *)a2 = 1;
    *(_QWORD *)(a2 + 8) = v10;
    *(_QWORD *)(a2 + 16) = v11;
    *(_DWORD *)(a2 + 32) = 64;
    *(_QWORD *)(a2 + 24) = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
  }
  else
  {
    v8 = 0;
    while (1)
    {
      v9 = &v4[v8 + 2];
      this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)v9;
      if (__PAIR64__(*v9, v4[v8 + 1]) == 0x2F0000002ALL)
        break;
      if (&v4[++v8 + 1] == v7)
        goto LABEL_10;
    }
    size = this[5].__r_.__value_.__l.__size_;
    if (size)
    {
      (*(void (**)(std::string::size_type, std::string::pointer, std::string::pointer))(*(_QWORD *)size + 16))(size, v4 + 1, v4 + 1);
      v13 = (uint64_t)this[6].__r_.__value_.__l.__data_;
    }
    else
    {
      v13 = (uint64_t)&v4[v8 + 2];
    }
    v14 = v13 + 1;
    this[6].__r_.__value_.__r.__words[0] = v14;
    v15 = this[4].__r_.__value_.__l.__data_;
    *(_DWORD *)a2 = 7;
    *(_QWORD *)(a2 + 8) = v15;
    *(_QWORD *)(a2 + 16) = v14 - (_QWORD)v15;
    *(_DWORD *)(a2 + 32) = 64;
    *(_QWORD *)(a2 + 24) = 0;
  }
}

void llvm::AsmLexer::LexDigit(llvm::AsmLexer *this@<X0>, uint64_t a2@<X8>)
{
  int v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  std::string *v11;
  std::string::size_type v12;
  std::string *v13;
  std::string::size_type v14;
  uint64_t v15;
  unsigned __int8 *v16;
  int v17;
  unsigned __int8 *v18;
  int v19;
  std::string::size_type v20;
  int v21;
  uint64_t v22;
  int v23;
  int v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  uint64_t v27;
  unsigned __int8 *v28;
  int v29;
  unsigned int v30;
  uint64_t v31;
  std::string *v32;
  std::string::size_type v33;
  std::string *v34;
  std::string::size_type v35;
  unsigned __int8 *v36;
  char *v37;
  char v38;
  std::string::size_type v39;
  int AsInteger;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  uint64_t v44;
  std::string::size_type v45;
  unsigned __int8 *v46;
  int v47;
  int v48;
  unsigned __int8 *v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  unsigned __int8 *v53;
  uint64_t v54;
  std::string::size_type v55;
  unint64_t v56;
  std::string::size_type v57;
  uint64_t v58;
  std::string *v59;
  std::string::size_type v60;
  std::string *v61;
  std::string::size_type v62;
  uint64_t v63;
  unsigned __int8 *v64;
  int v65;
  void *v66;
  uint64_t v67;
  uint64_t v68;
  BOOL v69;
  int v70;
  unsigned __int8 *v71;
  char *v72;
  char v73;
  uint64_t v74;
  unint64_t v75;
  uint64_t v76;
  unsigned __int8 *v77;
  unsigned __int8 *i;
  unsigned __int8 v79;
  _BOOL4 v80;
  unsigned int v81;
  uint64_t v82;
  unsigned __int8 *v83;
  std::string *v84;
  std::string::size_type v85;
  std::string *v86;
  std::string::size_type v87;
  unsigned __int8 *v88;
  int v89;
  uint64_t v90;
  std::string::size_type v91;
  uint64_t v92;
  unsigned __int8 *v93;
  int v94;
  unsigned __int8 *v95;
  unsigned __int8 *v96;
  int v97;
  std::string::size_type v98;
  uint64_t v99;
  std::string v100;
  std::string v101;
  std::string __str;
  std::string::size_type v103;
  unsigned __int8 *v104;

  v4 = *((unsigned __int8 *)this + 109);
  if (!*((_BYTE *)this + 109))
  {
LABEL_9:
    v16 = (unsigned __int8 *)*((_QWORD *)this + 18);
    if (*((_BYTE *)this + 111))
    {
      v17 = *(v16 - 1);
      if (v17 == 37)
      {
        if ((*v16 & 0xFE) == 0x30)
        {
          v37 = (char *)(v16 + 1);
          do
          {
            *((_QWORD *)this + 18) = v37;
            v38 = *v37++;
          }
          while ((v38 & 0xFE) == 0x30);
        }
        LODWORD(v101.__r_.__value_.__r.__words[1]) = 128;
        llvm::APInt::initSlowCase((llvm::APInt *)&v101, 0, 0);
        v39 = *((_QWORD *)this + 18) - (_QWORD)v16;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
        __str.__r_.__value_.__l.__size_ = v39;
        AsInteger = llvm::StringRef::getAsInteger((llvm::StringRef *)&__str, 2u, (llvm::APInt *)&v101);
        v22 = *((_QWORD *)this + 12);
        if (AsInteger)
        {
          *((_BYTE *)&__str.__r_.__value_.__s + 23) = 21;
          strcpy((char *)&__str, "invalid binary number");
          goto LABEL_60;
        }
LABEL_63:
        v42 = *((_QWORD *)this + 18) - v22;
        v43 = (void *)a2;
        v44 = v22;
        goto LABEL_64;
      }
      if (v17 == 36)
      {
        if (word_1C85F7092[*v16] != -1)
        {
          v18 = v16 + 1;
          do
          {
            *((_QWORD *)this + 18) = v18;
            v19 = *v18++;
          }
          while (word_1C85F7092[v19] != -1);
        }
        LODWORD(v101.__r_.__value_.__r.__words[1]) = 128;
        llvm::APInt::initSlowCase((llvm::APInt *)&v101, 0, 0);
        v20 = *((_QWORD *)this + 18) - (_QWORD)v16;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v16;
        __str.__r_.__value_.__l.__size_ = v20;
        v21 = llvm::StringRef::getAsInteger((llvm::StringRef *)&__str, 0x10u, (llvm::APInt *)&v101);
        v22 = *((_QWORD *)this + 12);
        if (v21)
          goto LABEL_16;
        goto LABEL_63;
      }
    }
    v23 = *((unsigned __int8 *)this + 120);
    if (*((_BYTE *)this + 120) || *(v16 - 1) != 48 || (v24 = *v16, v24 == 46))
    {
      v25 = 0;
      while (1)
      {
        if ((*v16 - 48) >= 0xAu)
        {
          if (!v25)
            v25 = v16;
          if (!v4)
            goto LABEL_45;
          if (word_1C85F7092[*v16] == -1)
            break;
        }
        ++v16;
      }
      if ((*v16 & 0xDF) == 0x48)
      {
        *((_QWORD *)this + 18) = v16;
        v30 = 16;
        goto LABEL_47;
      }
LABEL_45:
      *((_QWORD *)this + 18) = v25;
      if (!v23)
      {
        v48 = *v25;
        if (v48 == 101 || v48 == 69)
          goto LABEL_87;
        if (v48 == 46)
        {
          v49 = v25 + 1;
          goto LABEL_86;
        }
      }
      v30 = 10;
      v16 = v25;
LABEL_47:
      v103 = *((_QWORD *)this + 12);
      v104 = &v16[-v103];
      LODWORD(v99) = 128;
      llvm::APInt::initSlowCase((llvm::APInt *)&v98, 0, 1);
      if (llvm::StringRef::getAsInteger((llvm::StringRef *)&v103, v30, (llvm::APInt *)&v98))
      {
        v31 = *((_QWORD *)this + 12);
        sub_1C60D53D8((char *)&v100, v30);
        v32 = std::string::insert(&v100, 0, "invalid ");
        v33 = v32->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v101.__r_.__value_.__l.__data_ = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
        v101.__r_.__value_.__r.__words[2] = v33;
        v32->__r_.__value_.__l.__size_ = 0;
        v32->__r_.__value_.__r.__words[2] = 0;
        v32->__r_.__value_.__r.__words[0] = 0;
        v34 = std::string::append(&v101, " number");
        v35 = v34->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
        __str.__r_.__value_.__r.__words[2] = v35;
        v34->__r_.__value_.__l.__size_ = 0;
        v34->__r_.__value_.__r.__words[2] = 0;
        v34->__r_.__value_.__r.__words[0] = 0;
        *((_QWORD *)this + 8) = v31;
        std::string::operator=((std::string *)this + 3, &__str);
        v15 = *((_QWORD *)this + 18) - v31;
        *(_DWORD *)a2 = 1;
        *(_QWORD *)(a2 + 8) = v31;
        goto LABEL_49;
      }
      if (!*((_BYTE *)this + 120))
      {
        v46 = (unsigned __int8 *)*((_QWORD *)this + 18);
        v47 = *v46;
        if (v47 == 85)
        {
          *((_QWORD *)this + 18) = v46 + 1;
          v47 = *++v46;
        }
        if (v47 == 76)
        {
          *((_QWORD *)this + 18) = v46 + 1;
          if (v46[1] == 76)
            *((_QWORD *)this + 18) = v46 + 2;
        }
      }
      goto LABEL_74;
    }
    if (v4)
    {
      if ((v24 | 0x20) == 0x78)
      {
LABEL_102:
        v52 = 0;
        do
        {
          v53 = &v16[v52 + 1];
          *((_QWORD *)this + 18) = v53;
          v54 = *v53;
          ++v52;
        }
        while (word_1C85F7092[v54] != -1);
        if ((_DWORD)v54 == 46 || (_DWORD)v54 == 112 || (_DWORD)v54 == 80)
        {
          llvm::AsmLexer::LexHexFloatLiteral((std::string *)this, v52 == 1, a2);
          return;
        }
        if (v52 == 1)
        {
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
          *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_1C64638E0;
          strcpy(__str.__r_.__value_.__l.__data_, "invalid hexadecimal number");
          *((_QWORD *)this + 8) = v16 - 1;
          std::string::operator=((std::string *)this + 3, &__str);
          v82 = *((_QWORD *)this + 18) - (_QWORD)v16 + 1;
          *(_DWORD *)a2 = 1;
          *(_QWORD *)(a2 + 8) = v16 - 1;
          goto LABEL_199;
        }
        LODWORD(v101.__r_.__value_.__r.__words[1]) = 128;
        llvm::APInt::initSlowCase((llvm::APInt *)&v101, 0, 0);
        v91 = *((_QWORD *)this + 18) - *((_QWORD *)this + 12);
        __str.__r_.__value_.__r.__words[0] = *((_QWORD *)this + 12);
        __str.__r_.__value_.__l.__size_ = v91;
        if (llvm::StringRef::getAsInteger((llvm::StringRef *)&__str, 0, (llvm::APInt *)&v101))
        {
          v22 = *((_QWORD *)this + 12);
LABEL_16:
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
          *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_1C64638E0;
          strcpy(__str.__r_.__value_.__l.__data_, "invalid hexadecimal number");
LABEL_60:
          *((_QWORD *)this + 8) = v22;
          std::string::operator=((std::string *)this + 3, &__str);
          v41 = *((_QWORD *)this + 18) - v22;
          *(_DWORD *)a2 = 1;
          goto LABEL_61;
        }
        v93 = (unsigned __int8 *)*((_QWORD *)this + 18);
        if (*((_BYTE *)this + 109))
        {
          v94 = *v93;
          if ((v94 | 0x20) != 0x68)
          {
LABEL_205:
            if (v94 == 85)
            {
              *((_QWORD *)this + 18) = v93 + 1;
              v94 = *++v93;
            }
            if (v94 == 76)
            {
              v95 = v93 + 1;
              *((_QWORD *)this + 18) = v93 + 1;
              if (v93[1] == 76)
              {
                v95 = v93 + 2;
                *((_QWORD *)this + 18) = v93 + 2;
              }
            }
            else
            {
              v95 = v93;
            }
            v44 = *((_QWORD *)this + 12);
            v42 = (uint64_t)&v95[-v44];
            v43 = (void *)a2;
            goto LABEL_64;
          }
          *((_QWORD *)this + 18) = ++v93;
        }
        v94 = *v93;
        goto LABEL_205;
      }
      goto LABEL_172;
    }
    if (*v16 > 0x61u)
    {
      if (v24 == 120)
        goto LABEL_102;
      if (v24 != 98)
      {
LABEL_172:
        LODWORD(v104) = 128;
        llvm::APInt::initSlowCase((llvm::APInt *)&v103, 0, 1);
        v77 = 0;
        for (i = (unsigned __int8 *)*((_QWORD *)this + 18); ; ++i)
        {
          v79 = *i;
          if ((*i - 48) >= 0xAu)
          {
            if (!v77)
              v77 = i;
            if (!*((_BYTE *)this + 109))
            {
              v80 = 0;
              v81 = 8;
              goto LABEL_185;
            }
            if (word_1C85F7092[*i] == -1)
              break;
          }
        }
        v80 = (v79 & 0xDF) == 72;
        if ((v79 & 0xDF) == 0x48)
        {
          v77 = i;
          v81 = 16;
        }
        else
        {
          v81 = 8;
        }
LABEL_185:
        *((_QWORD *)this + 18) = v77;
        v83 = &v77[-*((_QWORD *)this + 12)];
        v98 = *((_QWORD *)this + 12);
        v99 = (uint64_t)v83;
        if (llvm::StringRef::getAsInteger((llvm::StringRef *)&v98, v81, (llvm::APInt *)&v103))
        {
          v58 = *((_QWORD *)this + 12);
          sub_1C60D53D8((char *)&v100, v81);
          v84 = std::string::insert(&v100, 0, "invalid ");
          v85 = v84->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v101.__r_.__value_.__l.__data_ = *(_OWORD *)&v84->__r_.__value_.__l.__data_;
          v101.__r_.__value_.__r.__words[2] = v85;
          v84->__r_.__value_.__l.__size_ = 0;
          v84->__r_.__value_.__r.__words[2] = 0;
          v84->__r_.__value_.__r.__words[0] = 0;
          v86 = std::string::append(&v101, " number");
          v87 = v86->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
          __str.__r_.__value_.__r.__words[2] = v87;
          v86->__r_.__value_.__l.__size_ = 0;
          v86->__r_.__value_.__r.__words[2] = 0;
          v86->__r_.__value_.__r.__words[0] = 0;
          *((_QWORD *)this + 8) = v58;
          std::string::operator=((std::string *)this + 3, &__str);
          v63 = *((_QWORD *)this + 18) - v58;
          *(_DWORD *)a2 = 1;
          goto LABEL_129;
        }
        v88 = (unsigned __int8 *)*((_QWORD *)this + 18);
        if (v80)
          *((_QWORD *)this + 18) = ++v88;
        v89 = *v88;
        if (v89 == 85)
        {
          *((_QWORD *)this + 18) = v88 + 1;
          v89 = *++v88;
        }
        if (v89 == 76)
        {
          *((_QWORD *)this + 18) = v88 + 1;
          if (v88[1] == 76)
            *((_QWORD *)this + 18) = v88 + 2;
        }
        v67 = v98;
        v68 = v99;
        v66 = (void *)a2;
        goto LABEL_141;
      }
    }
    else if (v24 != 66)
    {
      if (v24 == 88)
        goto LABEL_102;
      goto LABEL_172;
    }
    *((_QWORD *)this + 18) = v16 + 1;
    v70 = v16[1];
    if ((v70 - 48) > 9)
    {
      *((_QWORD *)this + 18) = v16;
      v90 = *((_QWORD *)this + 12);
      *(_DWORD *)a2 = 4;
      *(_QWORD *)(a2 + 8) = v90;
      *(_QWORD *)(a2 + 16) = &v16[-v90];
LABEL_99:
      *(_DWORD *)(a2 + 32) = 64;
      *(_QWORD *)(a2 + 24) = 0;
      return;
    }
    if ((v70 & 0xFE) == 0x30)
    {
      v71 = v16 + 1;
      v72 = (char *)(v16 + 2);
      do
      {
        *((_QWORD *)this + 18) = v72;
        v73 = *v72++;
        ++v71;
      }
      while ((v73 & 0xFE) == 0x30);
      v74 = *((_QWORD *)this + 12);
      v75 = (unint64_t)&v71[-v74];
      LODWORD(v101.__r_.__value_.__r.__words[1]) = 128;
      llvm::APInt::initSlowCase((llvm::APInt *)&v101, 0, 1);
      v76 = 2;
      if (v75 < 2)
        v76 = v75;
      __str.__r_.__value_.__r.__words[0] = v74 + v76;
      __str.__r_.__value_.__l.__size_ = v75 - v76;
      if (llvm::StringRef::getAsInteger((llvm::StringRef *)&__str, 2u, (llvm::APInt *)&v101))
      {
        v22 = *((_QWORD *)this + 12);
        *((_BYTE *)&__str.__r_.__value_.__s + 23) = 21;
        strcpy((char *)&__str, "invalid binary number");
        *((_QWORD *)this + 8) = v22;
        std::string::operator=((std::string *)this + 3, &__str);
        v41 = *((_QWORD *)this + 18) - v22;
        *(_DWORD *)a2 = 1;
LABEL_61:
        *(_QWORD *)(a2 + 8) = v22;
        *(_QWORD *)(a2 + 16) = v41;
        *(_DWORD *)(a2 + 32) = 64;
        *(_QWORD *)(a2 + 24) = 0;
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str.__r_.__value_.__l.__data_);
LABEL_65:
        if (LODWORD(v101.__r_.__value_.__r.__words[1]) >= 0x41)
        {
          v45 = v101.__r_.__value_.__r.__words[0];
          if (v101.__r_.__value_.__r.__words[0])
            goto LABEL_77;
        }
        return;
      }
      v96 = (unsigned __int8 *)*((_QWORD *)this + 18);
      v97 = *v96;
      if (v97 == 85)
      {
        *((_QWORD *)this + 18) = v96 + 1;
        v97 = *++v96;
      }
      if (v97 == 76)
      {
        *((_QWORD *)this + 18) = v96 + 1;
        if (v96[1] == 76)
          *((_QWORD *)this + 18) = v96 + 2;
      }
      v43 = (void *)a2;
      v44 = v74;
      v42 = v75;
LABEL_64:
      sub_1C60D5504(v43, v44, v42, (llvm::APInt *)&v101);
      goto LABEL_65;
    }
    v92 = *((_QWORD *)this + 12);
    *((_BYTE *)&__str.__r_.__value_.__s + 23) = 21;
    strcpy((char *)&__str, "invalid binary number");
    *((_QWORD *)this + 8) = v92;
    std::string::operator=((std::string *)this + 3, &__str);
    v82 = *((_QWORD *)this + 18) - v92;
    *(_DWORD *)a2 = 1;
    *(_QWORD *)(a2 + 8) = v92;
LABEL_199:
    *(_QWORD *)(a2 + 16) = v82;
    *(_QWORD *)(a2 + 24) = 0;
    *(_DWORD *)(a2 + 32) = 64;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    return;
  }
  v5 = (unsigned __int8 *)*((_QWORD *)this + 18);
  v6 = v5 - 1;
  if (((char)*(v5 - 1) & 0x80000000) == 0 && (*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * *(v5 - 1) + 60) & 0x400) != 0)
  {
    if ((*(v5 - 1) & 0xFE) == 0x30)
      v26 = 0;
    else
      v26 = v5 - 1;
    if (*(v5 - 1) - 58 >= 0xFFFFFFF6)
      v6 = 0;
    v27 = *v5;
    if (word_1C85F7092[v27] != -1)
    {
      v28 = v5 + 1;
      while (1)
      {
        if (((char)v27 - 50) < 8)
          goto LABEL_35;
        if (((char)v27 - 48) >= 2)
          break;
LABEL_37:
        *((_QWORD *)this + 18) = v28;
        v29 = *v28++;
        LODWORD(v27) = v29;
        if (word_1C85F7092[v29] == -1)
        {
          v36 = v28 - 1;
          goto LABEL_84;
        }
      }
      if (!v6)
        v6 = v28 - 1;
LABEL_35:
      if (!v26)
        v26 = v28 - 1;
      goto LABEL_37;
    }
    v36 = (unsigned __int8 *)*((_QWORD *)this + 18);
LABEL_84:
    if ((_DWORD)v27 == 46)
    {
      v49 = v36 + 1;
LABEL_86:
      *((_QWORD *)this + 18) = v49;
LABEL_87:
      llvm::AsmLexer::LexFloatLiteral((std::string *)this, a2);
      return;
    }
    if (*((_BYTE *)this + 108))
    {
      v50 = 16;
      if ((int)v27 <= 103)
      {
        switch((int)v27)
        {
          case 'O':
          case 'Q':
            goto LABEL_123;
          case 'P':
          case 'S':
          case 'U':
          case 'V':
          case 'W':
          case 'X':
            goto LABEL_148;
          case 'R':
            goto LABEL_98;
          case 'T':
            goto LABEL_112;
          case 'Y':
            goto LABEL_113;
          default:
            if ((_DWORD)v27 != 72)
              goto LABEL_148;
            goto LABEL_124;
        }
      }
      switch((int)v27)
      {
        case 'o':
        case 'q':
          goto LABEL_123;
        case 'p':
        case 's':
        case 'u':
        case 'v':
        case 'w':
        case 'x':
          goto LABEL_148;
        case 'r':
LABEL_98:
          *((_QWORD *)this + 18) = v36 + 1;
          v51 = *((_QWORD *)this + 12);
          *(_DWORD *)a2 = 6;
          *(_QWORD *)(a2 + 8) = v51;
          *(_QWORD *)(a2 + 16) = &v36[-v51 + 1];
          goto LABEL_99;
        case 't':
          goto LABEL_112;
        case 'y':
          goto LABEL_113;
        default:
          if ((_DWORD)v27 != 104)
            goto LABEL_148;
          goto LABEL_124;
      }
    }
    v50 = 16;
    if ((int)v27 > 103)
    {
      if ((int)v27 <= 112)
      {
        if ((_DWORD)v27 == 104)
          goto LABEL_124;
        if ((_DWORD)v27 != 111)
          goto LABEL_148;
      }
      else if ((_DWORD)v27 != 113)
      {
        if ((_DWORD)v27 == 121)
        {
LABEL_113:
          v50 = 2;
          goto LABEL_124;
        }
        if ((_DWORD)v27 != 116)
          goto LABEL_148;
LABEL_112:
        v50 = 10;
LABEL_124:
        *((_QWORD *)this + 18) = ++v36;
        goto LABEL_125;
      }
    }
    else if ((int)v27 <= 80)
    {
      if ((_DWORD)v27 == 72)
        goto LABEL_124;
      if ((_DWORD)v27 != 79)
      {
LABEL_148:
        if (v6)
          v69 = v6 + 1 == v36;
        else
          v69 = 0;
        if (v69 && *((_DWORD *)this + 29) <= 0xDu && (*v6 | 0x20) == 0x64)
        {
          v50 = 10;
        }
        else
        {
          if (!v26 || v26 + 1 != v36 || *((_DWORD *)this + 29) > 0xBu || (*v26 | 0x20) != 0x62)
          {
            *((_QWORD *)this + 18) = v5;
            goto LABEL_4;
          }
          v50 = 2;
        }
LABEL_125:
        v55 = *((_QWORD *)this + 12);
        v56 = (unint64_t)&v36[-v55];
        LODWORD(v104) = 128;
        llvm::APInt::initSlowCase((llvm::APInt *)&v103, 0, 1);
        v57 = v56 - 1;
        if (v56 < v56 - 1)
          v57 = v56;
        __str.__r_.__value_.__r.__words[0] = v55;
        __str.__r_.__value_.__l.__size_ = v57;
        if (llvm::StringRef::getAsInteger((llvm::StringRef *)&__str, v50, (llvm::APInt *)&v103))
        {
          v58 = *((_QWORD *)this + 12);
          sub_1C60D53D8((char *)&v100, v50);
          v59 = std::string::insert(&v100, 0, "invalid ");
          v60 = v59->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v101.__r_.__value_.__l.__data_ = *(_OWORD *)&v59->__r_.__value_.__l.__data_;
          v101.__r_.__value_.__r.__words[2] = v60;
          v59->__r_.__value_.__l.__size_ = 0;
          v59->__r_.__value_.__r.__words[2] = 0;
          v59->__r_.__value_.__r.__words[0] = 0;
          v61 = std::string::append(&v101, " number");
          v62 = v61->__r_.__value_.__r.__words[2];
          *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)&v61->__r_.__value_.__l.__data_;
          __str.__r_.__value_.__r.__words[2] = v62;
          v61->__r_.__value_.__l.__size_ = 0;
          v61->__r_.__value_.__r.__words[2] = 0;
          v61->__r_.__value_.__r.__words[0] = 0;
          *((_QWORD *)this + 8) = v58;
          std::string::operator=((std::string *)this + 3, &__str);
          v63 = *((_QWORD *)this + 18) - v58;
          *(_DWORD *)a2 = 1;
LABEL_129:
          *(_QWORD *)(a2 + 8) = v58;
          *(_QWORD *)(a2 + 16) = v63;
          *(_DWORD *)(a2 + 32) = 64;
          *(_QWORD *)(a2 + 24) = 0;
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v101.__r_.__value_.__l.__data_);
          if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
            operator delete(v100.__r_.__value_.__l.__data_);
LABEL_142:
          if (v104 >= 0x41)
          {
            v45 = v103;
            if (v103)
              goto LABEL_77;
          }
          return;
        }
        v64 = (unsigned __int8 *)*((_QWORD *)this + 18);
        v65 = *v64;
        if (v65 == 85)
        {
          *((_QWORD *)this + 18) = v64 + 1;
          v65 = *++v64;
        }
        if (v65 == 76)
        {
          *((_QWORD *)this + 18) = v64 + 1;
          if (v64[1] == 76)
            *((_QWORD *)this + 18) = v64 + 2;
        }
        v66 = (void *)a2;
        v67 = v55;
        v68 = v56;
LABEL_141:
        sub_1C60D5504(v66, v67, v68, (llvm::APInt *)&v103);
        goto LABEL_142;
      }
    }
    else if ((_DWORD)v27 != 81)
    {
      if ((_DWORD)v27 != 84)
      {
        if ((_DWORD)v27 != 89)
          goto LABEL_148;
        goto LABEL_113;
      }
      goto LABEL_112;
    }
LABEL_123:
    v50 = 8;
    goto LABEL_124;
  }
LABEL_4:
  if (!*((_BYTE *)this + 112))
    goto LABEL_9;
  v7 = v5 - 1;
  v8 = v5 - 1;
  do
  {
    v9 = *++v7;
    ++v8;
  }
  while ((unsigned __int16)word_1C85F7092[v9] < 0x10u);
  *((_QWORD *)this + 18) = v7;
  v103 = *((_QWORD *)this + 12);
  v104 = &v8[-v103];
  LODWORD(v99) = 128;
  llvm::APInt::initSlowCase((llvm::APInt *)&v98, 0, 1);
  if (!llvm::StringRef::getAsInteger((llvm::StringRef *)&v103, *((_DWORD *)this + 29), (llvm::APInt *)&v98))
  {
LABEL_74:
    sub_1C60D5504((void *)a2, v103, (uint64_t)v104, (llvm::APInt *)&v98);
    goto LABEL_75;
  }
  v10 = *((_QWORD *)this + 12);
  sub_1C60D53D8((char *)&v100, *((_DWORD *)this + 29));
  v11 = std::string::insert(&v100, 0, "invalid ");
  v12 = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v101.__r_.__value_.__l.__data_ = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v101.__r_.__value_.__r.__words[2] = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  v13 = std::string::append(&v101, " number");
  v14 = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  __str.__r_.__value_.__r.__words[2] = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  *((_QWORD *)this + 8) = v10;
  std::string::operator=((std::string *)this + 3, &__str);
  v15 = *((_QWORD *)this + 18) - v10;
  *(_DWORD *)a2 = 1;
  *(_QWORD *)(a2 + 8) = v10;
LABEL_49:
  *(_QWORD *)(a2 + 16) = v15;
  *(_QWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = 64;
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v101.__r_.__value_.__l.__data_);
  if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v100.__r_.__value_.__l.__data_);
LABEL_75:
  if (v99 >= 0x41)
  {
    v45 = v98;
    if (v98)
LABEL_77:
      MEMORY[0x1CAA32F9C](v45, 0x1000C8000313F17);
  }
}

void sub_1C60D53D8(char *a1, unsigned int __val)
{
  unint64_t v3;
  std::string *v4;
  std::string v5;

  HIDWORD(v3) = __val;
  LODWORD(v3) = __val - 2;
  switch((v3 >> 1))
  {
    case 0u:
      a1[23] = 6;
      strcpy(a1, "binary");
      break;
    case 3u:
      a1[23] = 5;
      strcpy(a1, "octal");
      break;
    case 4u:
      a1[23] = 7;
      strcpy(a1, "decimal");
      break;
    case 7u:
      a1[23] = 11;
      strcpy(a1, "hexadecimal");
      break;
    default:
      std::to_string(&v5, __val);
      v4 = std::string::insert(&v5, 0, "base-");
      *(std::string *)a1 = *v4;
      v4->__r_.__value_.__r.__words[0] = 0;
      v4->__r_.__value_.__l.__size_ = 0;
      v4->__r_.__value_.__r.__words[2] = 0;
      if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v5.__r_.__value_.__l.__data_);
      break;
  }
}

void *sub_1C60D5504(void *result, uint64_t a2, uint64_t a3, llvm::APInt *this)
{
  uint64_t v7;
  uint64_t v8;
  void *v9;
  int v10;
  unsigned int v11;

  v7 = (uint64_t)result;
  v8 = *((unsigned int *)this + 2);
  if (v8 >= 0x41)
  {
    v11 = v8 - llvm::APInt::countLeadingZerosSlowCase(this);
    v9 = (void *)operator new[]();
    result = memcpy(v9, *(const void **)this, ((unint64_t)(v8 + 63) >> 3) & 0x3FFFFFF8);
    if (v11 < 0x41)
      v10 = 4;
    else
      v10 = 5;
  }
  else
  {
    v9 = *(void **)this;
    v10 = 4;
  }
  *(_DWORD *)v7 = v10;
  *(_QWORD *)(v7 + 8) = a2;
  *(_QWORD *)(v7 + 16) = a3;
  *(_DWORD *)(v7 + 32) = v8;
  *(_QWORD *)(v7 + 24) = v9;
  return result;
}

void llvm::AsmLexer::LexSingleQuote(std::string *this@<X0>, uint64_t a2@<X8>)
{
  std::string::pointer data;
  std::string::pointer v5;
  int v6;
  std::string::pointer v7;
  std::string::size_type v8;
  std::string::pointer v9;
  uint64_t v10;
  unsigned __int8 *v11;
  _BYTE *v12;
  std::string::pointer v13;
  uint64_t v14;
  uint64_t v15;
  std::string::pointer v16;
  char *v17;
  const char *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::string __str;

  data = this[6].__r_.__value_.__l.__data_;
  v5 = (std::string::pointer)(this[6].__r_.__value_.__l.__size_ + this[6].__r_.__value_.__r.__words[2]);
  if (data == v5)
  {
    v6 = -1;
  }
  else
  {
    this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(data + 1);
    v6 = *data++;
  }
  if (this[5].__r_.__value_.__s.__data_[1])
  {
    v7 = this[4].__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
    *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_1C85FC090;
    strcpy(__str.__r_.__value_.__l.__data_, "invalid usage of character literals");
    goto LABEL_6;
  }
  if (!this[4].__r_.__value_.__s.__data_[14])
  {
    if (v6 != -1)
    {
      if (v6 != 92)
        goto LABEL_22;
      if (data != v5)
      {
        this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)++data;
LABEL_22:
        if (data != v5)
        {
          v12 = data + 1;
          this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(data + 1);
          if (*data == 39)
          {
            v13 = this[4].__r_.__value_.__l.__data_;
            v14 = v12 - v13;
            if ((unint64_t)(v12 - v13) >= 2 && *(_WORD *)v13 == 23591)
            {
              v19 = v13[2];
              v20 = v13[2];
              v21 = 10;
              v22 = 13;
              v23 = 9;
              if (v19 != 116)
                v23 = v13[2];
              if (v19 != 114)
                v22 = v23;
              if (v19 != 110)
                v21 = v22;
              if (v19 == 102)
                v20 = 12;
              if (v19 == 98)
                v20 = 8;
              if (v19 == 39)
                v20 = v13[2];
              if (v19 <= 109)
                v15 = v20;
              else
                v15 = v21;
            }
            else
            {
              v15 = v13[1];
            }
            *(_DWORD *)a2 = 4;
            *(_QWORD *)(a2 + 8) = v13;
            *(_QWORD *)(a2 + 16) = v14;
            *(_DWORD *)(a2 + 32) = 64;
            *(_QWORD *)(a2 + 24) = v15;
            return;
          }
        }
        v7 = this[4].__r_.__value_.__l.__data_;
        v17 = (char *)operator new(0x20uLL);
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
        *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_1C640C680;
        v18 = "single quote way too long";
        goto LABEL_33;
      }
    }
    v7 = this[4].__r_.__value_.__l.__data_;
    v17 = (char *)operator new(0x20uLL);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v17;
    *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_1C640C680;
    v18 = "unterminated single quote";
LABEL_33:
    *(_OWORD *)v17 = *(_OWORD *)v18;
    *(_OWORD *)(v17 + 9) = *(_OWORD *)(v18 + 9);
    v17[25] = 0;
LABEL_6:
    this[2].__r_.__value_.__r.__words[2] = (std::string::size_type)v7;
    std::string::operator=(this + 3, &__str);
    v8 = this[6].__r_.__value_.__r.__words[0] - (_QWORD)v7;
    *(_DWORD *)a2 = 1;
    *(_QWORD *)(a2 + 8) = v7;
    *(_QWORD *)(a2 + 16) = v8;
    *(_DWORD *)(a2 + 32) = 64;
    *(_QWORD *)(a2 + 24) = 0;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
    return;
  }
  while (1)
  {
    while (1)
    {
      v9 = data;
      if (v6 == 39)
        break;
      if (v6 == -1)
      {
        v7 = this[4].__r_.__value_.__l.__data_;
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
        *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_1C6613080;
        strcpy(__str.__r_.__value_.__l.__data_, "unterminated string constant");
        goto LABEL_6;
      }
      v6 = -1;
      data = v5;
      if (v9 != v5)
      {
        v10 = 1;
        v11 = (unsigned __int8 *)v9;
        goto LABEL_17;
      }
    }
    if (data == v5)
      goto LABEL_29;
    if (*data != 39)
      break;
    v11 = (unsigned __int8 *)(data + 1);
    this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(data + 1);
    v6 = -1;
    data = v5;
    if (v9 + 1 != v5)
    {
      v10 = 2;
LABEL_17:
      data = &v9[v10];
      this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)data;
      v6 = *v11;
    }
  }
  v5 = data;
LABEL_29:
  v16 = this[4].__r_.__value_.__l.__data_;
  *(_DWORD *)a2 = 3;
  *(_QWORD *)(a2 + 8) = v16;
  *(_QWORD *)(a2 + 16) = v5 - v16;
  *(_DWORD *)(a2 + 32) = 64;
  *(_QWORD *)(a2 + 24) = 0;
}

void llvm::AsmLexer::LexQuote(std::string *this@<X0>, uint64_t a2@<X8>)
{
  std::string::pointer data;
  std::string::pointer v5;
  int v6;
  std::string::pointer v7;
  std::string::pointer v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  std::string::pointer v12;
  std::string::size_type v13;
  std::string::pointer v14;
  std::string __str;

  data = this[6].__r_.__value_.__l.__data_;
  v5 = (std::string::pointer)(this[6].__r_.__value_.__l.__size_ + this[6].__r_.__value_.__r.__words[2]);
  if (data == v5)
  {
    v6 = -1;
  }
  else
  {
    this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(data + 1);
    v6 = *data++;
  }
  if (this[5].__r_.__value_.__s.__data_[1])
  {
    v7 = this[4].__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x28uLL);
    *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_1C85F4380;
    strcpy(__str.__r_.__value_.__l.__data_, "invalid usage of string literals");
    goto LABEL_26;
  }
  if (!this[4].__r_.__value_.__s.__data_[14])
  {
    while (1)
    {
      switch(v6)
      {
        case 92:
          if (data == v5)
            goto LABEL_25;
          v11 = (unsigned __int8 *)(data + 1);
          this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(data + 1);
          break;
        case -1:
LABEL_25:
          v7 = this[4].__r_.__value_.__l.__data_;
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
          *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_1C6613080;
          strcpy(__str.__r_.__value_.__l.__data_, "unterminated string constant");
LABEL_26:
          this[2].__r_.__value_.__r.__words[2] = (std::string::size_type)v7;
          std::string::operator=(this + 3, &__str);
          v13 = this[6].__r_.__value_.__r.__words[0] - (_QWORD)v7;
          *(_DWORD *)a2 = 1;
          *(_QWORD *)(a2 + 8) = v7;
          *(_QWORD *)(a2 + 16) = v13;
          *(_DWORD *)(a2 + 32) = 64;
          *(_QWORD *)(a2 + 24) = 0;
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          return;
        case 34:
          v12 = this[4].__r_.__value_.__l.__data_;
          *(_DWORD *)a2 = 3;
          *(_QWORD *)(a2 + 8) = v12;
          *(_QWORD *)(a2 + 16) = data - v12;
          goto LABEL_30;
        default:
          v11 = (unsigned __int8 *)data;
          break;
      }
      v6 = -1;
      data = v5;
      if (v11 != (unsigned __int8 *)v5)
      {
        data = (std::string::pointer)(v11 + 1);
        this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(v11 + 1);
        v6 = *v11;
      }
    }
  }
  while (1)
  {
    while (1)
    {
      v8 = data;
      if (v6 == 34)
        break;
      if (v6 == -1)
        goto LABEL_25;
      v6 = -1;
      data = v5;
      if (v8 != v5)
      {
        v9 = 1;
        v10 = (unsigned __int8 *)v8;
        goto LABEL_15;
      }
    }
    if (data == v5)
      goto LABEL_29;
    if (*data != 34)
      break;
    v10 = (unsigned __int8 *)(data + 1);
    this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(data + 1);
    v6 = -1;
    data = v5;
    if (v8 + 1 != v5)
    {
      v9 = 2;
LABEL_15:
      data = &v8[v9];
      this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)data;
      v6 = *v10;
    }
  }
  v5 = data;
LABEL_29:
  v14 = this[4].__r_.__value_.__l.__data_;
  *(_DWORD *)a2 = 3;
  *(_QWORD *)(a2 + 8) = v14;
  *(_QWORD *)(a2 + 16) = v5 - v14;
LABEL_30:
  *(_DWORD *)(a2 + 32) = 64;
  *(_QWORD *)(a2 + 24) = 0;
}

BOOL llvm::AsmLexer::isAtStatementSeparator(llvm::AsmLexer *this, const char *a2)
{
  const char *v3;
  size_t v4;

  v3 = *(const char **)(*((_QWORD *)this + 17) + 40);
  v4 = strlen(v3);
  return strncmp(a2, v3, v4) == 0;
}

uint64_t llvm::AsmLexer::LexUntilEndOfLine(llvm::AsmLexer *this)
{
  uint64_t v2;
  uint64_t result;
  int v4;
  BOOL v5;

  v2 = 0;
  result = *((_QWORD *)this + 18);
  *((_QWORD *)this + 12) = result;
  while (1)
  {
    v4 = *(unsigned __int8 *)(result + v2);
    v5 = v4 == 10 || v4 == 13;
    if (v5 || result + v2 == *((_QWORD *)this + 19) + *((_QWORD *)this + 20))
      break;
    *((_QWORD *)this + 18) = result + v2++ + 1;
  }
  return result;
}

uint64_t llvm::AsmLexer::peekTokens(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v7;
  uint64_t v8;
  char v9;
  char v10;
  std::string *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  char v20;
  char v21;
  char v22;
  __int128 v23;
  uint64_t v24;
  void *__src;
  unsigned int v26;
  std::string __str;

  v7 = *(_QWORD *)(a1 + 96);
  v8 = *(_QWORD *)(a1 + 144);
  v9 = *(_BYTE *)(a1 + 168);
  v20 = *(_BYTE *)(a1 + 104);
  v21 = *(_BYTE *)(a1 + 169);
  *(_BYTE *)(a1 + 104) = a4;
  v10 = *(_BYTE *)(a1 + 170);
  *(_BYTE *)(a1 + 170) = 1;
  v11 = (std::string *)(a1 + 72);
  if (*(char *)(a1 + 95) < 0)
  {
    sub_1C47EBC30(&__str, *(void **)(a1 + 72), *(_QWORD *)(a1 + 80));
  }
  else
  {
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
    __str.__r_.__value_.__r.__words[2] = *(_QWORD *)(a1 + 88);
  }
  v12 = *(_QWORD *)(a1 + 64);
  v22 = v10;
  if (a3)
  {
    v13 = 0;
    v14 = a2 + 24;
    do
    {
      (**(void (***)(__int128 *__return_ptr, uint64_t))a1)(&v23, a1);
      v15 = v23;
      *(_QWORD *)(v14 - 8) = v24;
      *(_OWORD *)(v14 - 24) = v15;
      v16 = v26;
      if (*(_DWORD *)(v14 + 8) > 0x40u || v26 > 0x40)
      {
        if ((void **)v14 != &__src)
        {
          llvm::APInt::reallocate(v14, v26);
          v18 = *(unsigned int *)(v14 + 8);
          if (v18 <= 0x40)
            *(_QWORD *)v14 = __src;
          else
            memcpy(*(void **)v14, __src, ((unint64_t)(v18 + 63) >> 3) & 0x3FFFFFF8);
          v16 = v26;
        }
        v17 = v23;
        if (v16 >= 0x41 && __src)
          MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
        if (!v17)
          goto LABEL_22;
      }
      else
      {
        *(_QWORD *)v14 = __src;
        *(_DWORD *)(v14 + 8) = v16;
        if (!(_DWORD)v23)
          goto LABEL_22;
      }
      ++v13;
      v14 += 40;
    }
    while (a3 != v13);
    v13 = a3;
  }
  else
  {
    v13 = 0;
  }
LABEL_22:
  *(_QWORD *)(a1 + 64) = v12;
  std::string::operator=(v11, &__str);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__str.__r_.__value_.__l.__data_);
  *(_BYTE *)(a1 + 170) = v22;
  *(_BYTE *)(a1 + 104) = v20;
  *(_BYTE *)(a1 + 169) = v21;
  *(_BYTE *)(a1 + 168) = v9;
  *(_QWORD *)(a1 + 144) = v8;
  *(_QWORD *)(a1 + 96) = v7;
  return v13;
}

void llvm::AsmLexer::LexToken(std::string *this@<X0>, uint64_t a2@<X8>)
{
  std::string::size_type size;
  const char *data;
  unsigned int v6;
  uint64_t j;
  char *v8;
  uint64_t v9;
  BOOL v10;
  BOOL v11;
  uint64_t v12;
  std::string::pointer v13;
  int v14;
  BOOL v15;
  int v16;
  uint64_t v17;
  uint64_t k;
  uint64_t v19;
  std::string::size_type v20;
  const char *v21;
  size_t v22;
  std::string::value_type v23;
  size_t v24;
  int v25;
  int v26;
  unsigned __int8 *v27;
  int64_t i;
  int v29;
  int v31;
  std::string::pointer v32;
  std::string::pointer v33;
  int v34;
  std::string::pointer v35;
  size_t v36;
  char v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  _BOOL4 v42;
  char v43;
  _BOOL4 v44;
  std::string::pointer v45;
  std::string::pointer v46;
  std::string::pointer v47;
  int v48;
  std::string::pointer v49;
  std::string::pointer v50;
  int v51;
  std::string::pointer v52;
  std::string::pointer v53;
  std::string::size_type v54;
  __int128 v55;
  BOOL v57;
  char v60;
  char v63;
  char v68;
  uint64_t v72;
  unint64_t v74;
  std::string __str;
  _DWORD v76[10];
  uint64_t v77;

  v77 = *MEMORY[0x1E0C80C00];
  data = this[6].__r_.__value_.__l.__data_;
  size = this[6].__r_.__value_.__l.__size_;
  this[4].__r_.__value_.__r.__words[0] = (std::string::size_type)data;
  if (data == (const char *)(size + this[6].__r_.__value_.__r.__words[2]))
  {
    v6 = -1;
    goto LABEL_36;
  }
  this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(data + 1);
  v6 = *(unsigned __int8 *)data;
  if (this[7].__r_.__value_.__s.__data_[2] || v6 != 35)
  {
LABEL_36:
    if (llvm::AsmLexer::isAtStartOfComment((llvm::AsmLexer *)this, data))
    {
      llvm::AsmLexer::LexLineComment((llvm::AsmLexer *)this, a2);
      return;
    }
    v20 = this[5].__r_.__value_.__r.__words[2];
    v21 = *(const char **)(v20 + 40);
    v22 = strlen(v21);
    if (!strncmp(data, v21, v22))
    {
      this[6].__r_.__value_.__r.__words[0] = v22 + this[6].__r_.__value_.__r.__words[0] - 1;
      LOWORD(this[7].__r_.__value_.__l.__data_) = 257;
      v24 = strlen(v21);
      *(_DWORD *)a2 = 9;
      *(_QWORD *)(a2 + 8) = data;
      *(_QWORD *)(a2 + 16) = v24;
      goto LABEL_42;
    }
    if (v6 != -1)
    {
      v23 = this[7].__r_.__value_.__s.__data_[1];
      LOWORD(this[7].__r_.__value_.__l.__data_) = 0;
      switch(v6)
      {
        case 0u:
        case 9u:
        case 0x20u:
          this[7].__r_.__value_.__s.__data_[1] = v23;
          v27 = (unsigned __int8 *)this[6].__r_.__value_.__l.__data_;
          for (i = v27 - (unsigned __int8 *)data; ; ++i)
          {
            v29 = *v27++;
            if (v29 != 32 && v29 != 9)
              break;
            this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
          }
          if (!this[4].__r_.__value_.__s.__data_[8])
          {
            *(_DWORD *)a2 = 11;
            goto LABEL_72;
          }
          (*(void (**)(std::string *))this->__r_.__value_.__l.__data_)(this);
          return;
        case 1u:
        case 2u:
        case 3u:
        case 4u:
        case 5u:
        case 6u:
        case 7u:
        case 8u:
        case 0xBu:
        case 0xCu:
        case 0xEu:
        case 0xFu:
        case 0x10u:
        case 0x11u:
        case 0x12u:
        case 0x13u:
        case 0x14u:
        case 0x15u:
        case 0x16u:
        case 0x17u:
        case 0x18u:
        case 0x19u:
        case 0x1Au:
        case 0x1Bu:
        case 0x1Cu:
        case 0x1Du:
        case 0x1Eu:
        case 0x1Fu:
        case 0x2Eu:
        case 0x3Bu:
        case 0x3Fu:
        case 0x41u:
        case 0x42u:
        case 0x43u:
        case 0x44u:
        case 0x45u:
        case 0x46u:
        case 0x47u:
        case 0x48u:
        case 0x49u:
        case 0x4Au:
        case 0x4Bu:
        case 0x4Cu:
        case 0x4Du:
        case 0x4Eu:
        case 0x4Fu:
        case 0x50u:
        case 0x51u:
        case 0x52u:
        case 0x53u:
        case 0x54u:
        case 0x55u:
        case 0x56u:
        case 0x57u:
        case 0x58u:
        case 0x59u:
        case 0x5Au:
LABEL_64:
          if (v6 <= 0x7F)
            v31 = *(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v6 + 60) & 0x100;
          else
            v31 = __maskrune(v6, 0x100uLL);
          if (v31 || v6 == 46 || v6 == 95 || *(_BYTE *)(this[5].__r_.__value_.__r.__words[2] + 181) && v6 == 63)
            goto LABEL_126;
          v53 = this[4].__r_.__value_.__l.__data_;
          __str.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
          *(_OWORD *)&__str.__r_.__value_.__r.__words[1] = xmmword_1C64638E0;
          strcpy(__str.__r_.__value_.__l.__data_, "invalid character in input");
          this[2].__r_.__value_.__r.__words[2] = (std::string::size_type)v53;
          std::string::operator=(this + 3, &__str);
          v54 = this[6].__r_.__value_.__r.__words[0] - (_QWORD)v53;
          *(_DWORD *)a2 = 1;
          *(_QWORD *)(a2 + 8) = v53;
          *(_QWORD *)(a2 + 16) = v54;
          *(_DWORD *)(a2 + 32) = 64;
          *(_QWORD *)(a2 + 24) = 0;
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str.__r_.__value_.__l.__data_);
          return;
        case 0xAu:
          LOWORD(this[7].__r_.__value_.__l.__data_) = 257;
          v26 = 9;
          goto LABEL_267;
        case 0xDu:
          LOWORD(this[7].__r_.__value_.__l.__data_) = 257;
          v32 = this[6].__r_.__value_.__l.__data_;
          if (v32 != (std::string::pointer)(this[6].__r_.__value_.__l.__size_ + this[6].__r_.__value_.__r.__words[2])
            && *v32 == 10)
          {
            this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)++v32;
          }
          *(_DWORD *)a2 = 9;
          i = v32 - data;
LABEL_72:
          *(_QWORD *)(a2 + 8) = data;
          *(_QWORD *)(a2 + 16) = i;
          goto LABEL_42;
        case 0x21u:
          v33 = this[6].__r_.__value_.__l.__data_;
          if (*v33 == 61)
          {
            this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(v33 + 1);
            v34 = 35;
            goto LABEL_142;
          }
          v26 = 34;
          goto LABEL_267;
        case 0x22u:
          llvm::AsmLexer::LexQuote(this, a2);
          return;
        case 0x23u:
          if (*(_BYTE *)(v20 + 184))
            goto LABEL_126;
          v26 = 37;
          goto LABEL_267;
        case 0x24u:
          if (this[4].__r_.__value_.__s.__data_[15]
            && word_1C85F7092[*(unsigned __int8 *)this[6].__r_.__value_.__l.__data_] != -1)
          {
            goto LABEL_40;
          }
          if (*(_BYTE *)(v20 + 182))
            goto LABEL_126;
          v26 = 26;
          goto LABEL_267;
        case 0x25u:
          if (this[4].__r_.__value_.__s.__data_[15] && (*this[6].__r_.__value_.__l.__data_ & 0xFE) == 0x30)
            goto LABEL_40;
          if (!*(_BYTE *)(v20 + 474))
            goto LABEL_266;
          v35 = this[6].__r_.__value_.__l.__data_;
          if (v35)
          {
            v36 = strlen(this[6].__r_.__value_.__l.__data_);
            if (v36 >= 6)
            {
              if (*(_DWORD *)v35 != 1819042147 || *((_WORD *)v35 + 2) != 13873)
              {
                if (v36 < 7)
                {
                  v38 = 0;
                  v39 = 0;
                  v40 = 0;
                  v41 = 0;
                  v42 = 0;
                  v43 = 1;
                  v36 = 6;
                  v44 = 1;
                  goto LABEL_170;
                }
                if (*(_DWORD *)v35 == 1819042147 && *(_DWORD *)(v35 + 3) == 1768447852)
                {
                  v72 = 0x800000000;
                  v40 = 48;
                  goto LABEL_265;
                }
                v44 = 0;
                v38 = 0;
                v41 = 0;
                v39 = 0;
                v40 = 0;
LABEL_147:
                v42 = v41 != 0;
                if (!v44 && !v41 && *(_DWORD *)v35 == 1819042147 && *(_DWORD *)(v35 + 3) == 1869373292)
                {
                  v72 = 0x800000000;
                  v40 = 49;
                  goto LABEL_265;
                }
                v57 = v36 < 9;
                if (v36 >= 9 && !v41)
                {
                  if (*(_QWORD *)v35 == 0x685F6C6572707464 && v35[8] == 105)
                  {
                    v72 = 0xA00000000;
                    v40 = 50;
                    goto LABEL_265;
                  }
                  v57 = 0;
                }
                if (!v41 && !v57 && *(_QWORD *)v35 == 0x6C5F6C6572707464 && v35[8] == 111)
                {
                  v72 = 0xA00000000;
                  v40 = 51;
                  goto LABEL_265;
                }
                v43 = 1;
                if (v36 >= 8 && !v41)
                {
                  if (*(_QWORD *)v35 == 0x707369645F746F67)
                  {
                    v72 = 0x900000000;
                    v40 = 53;
                    goto LABEL_265;
                  }
                  v43 = 0;
                  v41 = 0;
                  v42 = 0;
                }
LABEL_170:
                v60 = v38 | v42;
                if ((v60 & 1) == 0)
                {
                  if (*(_DWORD *)v35 == 1601466215 && *((_WORD *)v35 + 2) == 26984)
                  {
                    v72 = 0x700000000;
                    v40 = 54;
                    goto LABEL_265;
                  }
                  if (*(_DWORD *)v35 == 1601466215 && *((_WORD *)v35 + 2) == 28524)
                  {
                    v72 = 0x700000000;
                    v40 = 55;
                    goto LABEL_265;
                  }
                }
                if ((v43 & 1) == 0)
                {
                  switch(*(_QWORD *)v35)
                  {
                    case 0x7473666F5F746F67:
                      v72 = 0x900000000;
                      v40 = 56;
                      goto LABEL_265;
                    case 0x656761705F746F67:
                      v72 = 0x900000000;
                      v40 = 57;
                      goto LABEL_265;
                    case 0x6C65727074746F67:
                      v72 = 0x900000000;
                      v40 = 58;
                      goto LABEL_265;
                  }
                }
                v63 = v36 < 3 || v42;
                if ((v63 & 1) == 0 && *(_WORD *)v35 == 28519 && v35[2] == 116)
                {
                  v72 = 0x400000000;
                  v40 = 52;
                  goto LABEL_265;
                }
                if ((v60 & 1) == 0)
                {
                  if (*(_DWORD *)v35 == 1918857319 && *((_WORD *)v35 + 2) == 27749)
                  {
                    v72 = 0x700000000;
                    v40 = 59;
                    goto LABEL_265;
                  }
                  if (*(_DWORD *)v35 == 1751607656 && *((_WORD *)v35 + 2) == 29285)
                  {
                    v72 = 0x700000000;
                    v40 = 61;
                    goto LABEL_265;
                  }
                }
                if (!v44 && !v42 && *(_DWORD *)v35 == 1751607656 && *(_DWORD *)(v35 + 3) == 1953719656)
                {
                  v72 = 0x800000000;
                  v40 = 62;
                  goto LABEL_265;
                }
                v68 = v36 < 2 || v42;
                if ((v68 & 1) == 0)
                {
                  if (*(_WORD *)v35 == 26984)
                  {
                    v72 = 0x300000000;
                    v40 = 60;
                    goto LABEL_265;
                  }
                  if (*(_WORD *)v35 == 28524)
                  {
                    v72 = 0x300000000;
                    v40 = 63;
                    goto LABEL_265;
                  }
                }
                if ((v63 & 1) == 0 && *(_WORD *)v35 == 25966 && v35[2] == 103)
                {
                  v72 = 0x400000000;
                  v40 = 64;
                  goto LABEL_265;
                }
                if ((v43 & 1) == 0)
                {
                  if (*(_QWORD *)v35 == 0x69685F6C65726370)
                  {
                    v72 = 0x900000000;
                    v40 = 65;
                    goto LABEL_265;
                  }
                  if (*(_QWORD *)v35 == 0x6F6C5F6C65726370)
                  {
                    v72 = 0x900000000;
                    v40 = 66;
                    goto LABEL_265;
                  }
                }
                if (v36 < 5)
                  LOBYTE(v42) = 1;
                if (!v42 && *(_DWORD *)v35 == 1735617652 && v35[4] == 100)
                {
                  v72 = 0x600000000;
                  v40 = 67;
                  goto LABEL_265;
                }
                if ((v60 & 1) == 0 && *(_DWORD *)v35 == 1819503732 && *((_WORD *)v35 + 2) == 28004)
                {
                  v72 = 0x700000000;
                  v40 = 68;
                  goto LABEL_265;
                }
                if ((v43 & 1) != 0)
                {
                  if (v41)
                  {
                    v72 = v39 & 0x700000000;
LABEL_265:
                    v74 = v40 | v72;
                    if ((_DWORD)v74 == 36)
                      goto LABEL_266;
                    this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)&v35[HIDWORD(v74) - 1];
                    *(_DWORD *)a2 = v74;
                    *(_QWORD *)(a2 + 8) = data;
                    *(_QWORD *)(a2 + 16) = HIDWORD(v74);
LABEL_42:
                    *(_DWORD *)(a2 + 32) = 64;
                    *(_QWORD *)(a2 + 24) = 0;
                    return;
                  }
                }
                else
                {
                  if (*(_QWORD *)v35 == 0x69685F6C65727074)
                  {
                    v72 = 0x900000000;
                    v40 = 69;
                    goto LABEL_265;
                  }
                  if (*(_QWORD *)v35 == 0x6F6C5F6C65727074)
                  {
                    v72 = 0x900000000;
                    v40 = 70;
                    goto LABEL_265;
                  }
                }
LABEL_266:
                v26 = 36;
                goto LABEL_267;
              }
              v38 = 0;
              v39 = 0x700000000;
              v41 = 1;
              v40 = 47;
LABEL_146:
              v44 = v36 < 7;
              goto LABEL_147;
            }
          }
          else
          {
            v36 = 0;
          }
          v41 = 0;
          v39 = 0;
          v40 = 0;
          v38 = 1;
          goto LABEL_146;
        case 0x26u:
          v45 = this[6].__r_.__value_.__l.__data_;
          if (*v45 == 38)
          {
            this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(v45 + 1);
            v34 = 33;
            goto LABEL_142;
          }
          v26 = 32;
          goto LABEL_267;
        case 0x27u:
          llvm::AsmLexer::LexSingleQuote(this, a2);
          return;
        case 0x28u:
          v26 = 17;
          goto LABEL_267;
        case 0x29u:
          v26 = 18;
          goto LABEL_267;
        case 0x2Au:
          v26 = 23;
          goto LABEL_267;
        case 0x2Bu:
          v26 = 12;
          goto LABEL_267;
        case 0x2Cu:
          v26 = 25;
          goto LABEL_267;
        case 0x2Du:
          v46 = this[6].__r_.__value_.__l.__data_;
          if (*v46 == 62)
          {
            this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(v46 + 1);
            v34 = 46;
            goto LABEL_142;
          }
          v26 = 13;
          goto LABEL_267;
        case 0x2Fu:
          this[7].__r_.__value_.__s.__data_[1] = v23;
          llvm::AsmLexer::LexSlash(this, a2);
          return;
        case 0x30u:
        case 0x31u:
        case 0x32u:
        case 0x33u:
        case 0x34u:
        case 0x35u:
        case 0x36u:
        case 0x37u:
        case 0x38u:
        case 0x39u:
LABEL_40:
          llvm::AsmLexer::LexDigit((llvm::AsmLexer *)this, a2);
          return;
        case 0x3Au:
          v26 = 10;
          goto LABEL_267;
        case 0x3Cu:
          v47 = this[6].__r_.__value_.__l.__data_;
          v48 = *v47;
          switch(v48)
          {
            case '>':
              this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(v47 + 1);
              v34 = 41;
              goto LABEL_142;
            case '=':
              this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(v47 + 1);
              v34 = 39;
              goto LABEL_142;
            case '<':
              this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(v47 + 1);
              v34 = 40;
              goto LABEL_142;
          }
          v26 = 38;
          goto LABEL_267;
        case 0x3Du:
          v49 = this[6].__r_.__value_.__l.__data_;
          if (*v49 == 61)
          {
            this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(v49 + 1);
            v34 = 28;
            goto LABEL_142;
          }
          v26 = 27;
          goto LABEL_267;
        case 0x3Eu:
          v50 = this[6].__r_.__value_.__l.__data_;
          v51 = *v50;
          if (v51 == 61)
          {
            this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(v50 + 1);
            v34 = 43;
          }
          else
          {
            if (v51 != 62)
            {
              v26 = 42;
              goto LABEL_267;
            }
            this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(v50 + 1);
            v34 = 44;
          }
LABEL_142:
          *(_DWORD *)a2 = v34;
          *(_QWORD *)(a2 + 8) = data;
          *(_DWORD *)(a2 + 32) = 64;
          v55 = xmmword_1C64169D0;
          goto LABEL_268;
        case 0x40u:
          if (*(_BYTE *)(v20 + 183))
          {
LABEL_126:
            llvm::AsmLexer::LexIdentifier(this, a2);
          }
          else
          {
            v26 = 45;
LABEL_267:
            *(_DWORD *)a2 = v26;
            *(_QWORD *)(a2 + 8) = data;
            *(_DWORD *)(a2 + 32) = 64;
            v55 = xmmword_1C64169E0;
LABEL_268:
            *(_OWORD *)(a2 + 16) = v55;
          }
          return;
        case 0x5Bu:
          v26 = 19;
          goto LABEL_267;
        case 0x5Cu:
          v26 = 16;
          goto LABEL_267;
        case 0x5Du:
          v26 = 20;
          goto LABEL_267;
        case 0x5Eu:
          v26 = 31;
          goto LABEL_267;
        default:
          switch(v6)
          {
            case '{':
              v26 = 21;
              goto LABEL_267;
            case '|':
              v52 = this[6].__r_.__value_.__l.__data_;
              if (*v52 == 124)
              {
                this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)(v52 + 1);
                v34 = 30;
                goto LABEL_142;
              }
              v26 = 29;
              break;
            case '}':
              v26 = 22;
              goto LABEL_267;
            case '~':
              v26 = 14;
              goto LABEL_267;
            default:
              goto LABEL_64;
          }
          goto LABEL_267;
      }
    }
    v25 = this[7].__r_.__value_.__s.__data_[3];
    if (this[7].__r_.__value_.__s.__data_[1])
    {
      LOWORD(this[7].__r_.__value_.__l.__data_) = 0;
      if (!v25)
      {
LABEL_50:
        *(_DWORD *)a2 = 0;
        goto LABEL_51;
      }
      LOBYTE(v25) = 1;
    }
    else if (this[7].__r_.__value_.__s.__data_[3])
    {
      LOWORD(this[7].__r_.__value_.__l.__data_) = 257;
      *(_DWORD *)a2 = 9;
LABEL_51:
      *(_DWORD *)(a2 + 32) = 64;
      *(_QWORD *)(a2 + 16) = 0;
      *(_QWORD *)(a2 + 24) = 0;
      *(_QWORD *)(a2 + 8) = data;
      return;
    }
    this[7].__r_.__value_.__s.__data_[0] = v25;
    this[7].__r_.__value_.__s.__data_[1] = v25;
    goto LABEL_50;
  }
  if (!this[7].__r_.__value_.__s.__data_[1])
  {
    v6 = 35;
    goto LABEL_36;
  }
  for (j = 0; j != 80; j += 40)
  {
    v8 = (char *)&__str + j;
    *((_QWORD *)v8 + 1) = 0;
    *((_QWORD *)v8 + 2) = 0;
    *((_DWORD *)v8 + 8) = 1;
    *((_QWORD *)v8 + 3) = 0;
  }
  v9 = (*(uint64_t (**)(std::string *, std::string *, uint64_t, uint64_t))(this->__r_.__value_.__r.__words[0]
                                                                                 + 32))(this, &__str, 2, 1);
  if (this[7].__r_.__value_.__s.__data_[0])
    v10 = v9 == 2;
  else
    v10 = 0;
  v11 = v10 && LODWORD(__str.__r_.__value_.__l.__data_) == 4;
  if (v11 && v76[0] == 3)
  {
    v12 = 0;
    v13 = this[4].__r_.__value_.__l.__data_;
    while (1)
    {
      this[6].__r_.__value_.__r.__words[0] = (std::string::size_type)&v13[v12];
      v14 = v13[v12];
      v15 = v14 == 10 || v14 == 13;
      if (v15
        || &v13[v12] == (std::string::pointer)(this[6].__r_.__value_.__l.__size_ + this[6].__r_.__value_.__r.__words[2]))
      {
        break;
      }
      ++v12;
    }
    v17 = this->__r_.__value_.__l.__size_;
    this[4].__r_.__value_.__s.__data_[11] = 0;
    sub_1C4CD9B2C((uint64_t)&this->__r_.__value_.__l.__size_, v17, (unint64_t)v76);
    this[4].__r_.__value_.__s.__data_[11] = 0;
    sub_1C4CD9B2C((uint64_t)&this->__r_.__value_.__l.__size_, this->__r_.__value_.__l.__size_, (unint64_t)&__str);
    v16 = 0;
    *(_DWORD *)a2 = 8;
    *(_QWORD *)(a2 + 8) = v13;
    *(_QWORD *)(a2 + 16) = v12;
    *(_DWORD *)(a2 + 32) = 64;
    *(_QWORD *)(a2 + 24) = 0;
  }
  else if (*(_BYTE *)(this[5].__r_.__value_.__r.__words[2] + 65))
  {
    llvm::AsmLexer::LexLineComment((llvm::AsmLexer *)this, a2);
    v16 = 0;
  }
  else
  {
    v16 = 1;
  }
  for (k = 0; k != -20; k -= 10)
  {
    if (v76[k + 8] >= 0x41u)
    {
      v19 = *(_QWORD *)&v76[k + 6];
      if (v19)
        MEMORY[0x1CAA32F9C](v19, 0x1000C8000313F17);
    }
  }
  if (v16)
  {
    data = this[4].__r_.__value_.__l.__data_;
    goto LABEL_36;
  }
}

uint64_t llvm::MCParserUtils::parseAssignmentExpression(const char *a1, uint64_t a2, int a3, llvm::MCAsmParser *a4, unint64_t *a5, uint64_t *a6)
{
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  llvm::MCContext *v15;
  uint64_t v16;
  int v17;
  unint64_t Symbol;
  unint64_t v19;
  int v20;
  int v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  const char *v26;
  int v27;
  _QWORD v28[4];
  __int16 v29;
  const char *v30;
  uint64_t v31;
  const char *v32;
  __int16 v33;

  v12 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a4 + 40))(a4) + 8) + 8);
  v30 = 0;
  if ((*(unsigned int (**)(llvm::MCAsmParser *, uint64_t *, const char **))(*(_QWORD *)a4 + 232))(a4, a6, &v30))
  {
    v30 = "missing expression";
    v33 = 259;
    v13 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a4 + 40))(a4);
    llvm::MCAsmParser::Error((uint64_t)a4, *(_QWORD *)(v13 + 96), (uint64_t)&v30, 0, 0);
    return 1;
  }
  if (llvm::MCAsmParser::parseEOL(a4))
    return 1;
  v15 = (llvm::MCContext *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a4 + 48))(a4);
  v33 = 261;
  v30 = a1;
  v31 = a2;
  v16 = llvm::MCContext::lookupSymbol(v15, &v30);
  *a5 = v16;
  if (!v16)
  {
    if (a2 == 1 && *a1 == 46)
    {
      v23 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a4 + 56))(a4);
      (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v23 + 648))(v23, *a6, 0, v12);
      return 0;
    }
    v24 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a4 + 48))(a4);
    v33 = 261;
    v30 = a1;
    v31 = a2;
    Symbol = llvm::MCContext::getOrCreateSymbol(v24, (uint64_t)&v30);
    *a5 = Symbol;
    goto LABEL_30;
  }
  sub_1C60D6D1C(v16, *a6);
  if (v17)
  {
    v29 = 1283;
    v26 = "Recursive use of '";
    goto LABEL_38;
  }
  Symbol = *a5;
  v19 = *(_QWORD *)*a5 & 0xFFFFFFFFFFFFFFF8;
  if (!v19 && (*(_DWORD *)(Symbol + 8) & 0x1C00) == 0x800)
  {
    llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(Symbol + 24));
    *(_QWORD *)Symbol = *(_QWORD *)Symbol & 7 | v19;
    Symbol = *a5;
  }
  v20 = *(_DWORD *)(Symbol + 8);
  v21 = v20 & 0x1C00;
  if (v19 || (v20 & 4) != 0 || v21 == 2048)
  {
    if (v21 == 2048)
    {
      if ((v20 & 4) == 0 && (a3 & 1) != 0)
        goto LABEL_30;
      v22 = *(_QWORD *)Symbol & 0xFFFFFFFFFFFFFFF8;
      if (!v22)
      {
        *(_DWORD *)(Symbol + 8) = v20 | 4;
        llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(Symbol + 24));
        *(_QWORD *)Symbol = *(_QWORD *)Symbol & 7 | v22;
        Symbol = *a5;
        v20 = *(_DWORD *)(*a5 + 8);
      }
    }
    else
    {
      v22 = *(_QWORD *)Symbol & 0xFFFFFFFFFFFFFFF8;
    }
    v25 = v20 & 0x1C00;
    if (v22)
    {
      if (v25 != 2048 || (a3 & 1) == 0)
      {
        v29 = 1283;
        v26 = "redefinition of '";
LABEL_38:
        v28[0] = v26;
        v28[2] = a1;
        v28[3] = a2;
        v30 = (const char *)v28;
        v32 = "'";
        v33 = 770;
        return llvm::MCAsmParser::Error((uint64_t)a4, v12, (uint64_t)&v30, 0, 0);
      }
    }
    else if (v25 != 2048)
    {
      v29 = 1283;
      v26 = "invalid assignment to '";
      goto LABEL_38;
    }
    *(_DWORD *)(Symbol + 8) = v20 | 4;
    if (**(_BYTE **)(Symbol + 24) != 1)
    {
      v29 = 1283;
      v26 = "invalid reassignment of non-absolute variable '";
      goto LABEL_38;
    }
    Symbol = *a5;
  }
LABEL_30:
  result = 0;
  if (a3)
    v27 = 2;
  else
    v27 = 0;
  *(_DWORD *)(Symbol + 8) = *(_DWORD *)(Symbol + 8) & 0xFFFFFFFD | v27;
  return result;
}

void sub_1C60D6D1C(uint64_t a1, uint64_t a2)
{
  __asm { BR              X9 }
}

uint64_t sub_1C60D6D54()
{
  uint64_t v0;
  uint64_t v1;

  if ((((uint64_t (*)(uint64_t, _QWORD))sub_1C60D6D1C)(v0, *(_QWORD *)(v1 + 16)) & 1) == 0)
    JUMPOUT(0x1C60D6D3CLL);
  return 1;
}

uint64_t llvm::createMCAsmParser(llvm *this, llvm::SourceMgr *a2, llvm::MCContext *a3, llvm::MCStreamer *a4, const llvm::MCAsmInfo *a5)
{
  unsigned int v5;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  v5 = a5;
  if (*((_DWORD *)a2 + 12) == 36 && *((_DWORD *)a2 + 15) == 16)
  {
    v13 = operator new();
    result = sub_1C60D6E9C(v13, (uint64_t)this, a2, (uint64_t)a3, a4, v5);
    *(_QWORD *)result = &off_1E81ADE70;
    *(_QWORD *)(result + 872) = result + 40;
    *(_QWORD *)(result + 880) = a3;
    *(_BYTE *)(result + 144) = 0;
    *(_BYTE *)(result + 146) = 1;
    *(_WORD *)(result + 160) = 257;
  }
  else
  {
    v11 = operator new();
    return sub_1C60D6E9C(v11, (uint64_t)this, a2, (uint64_t)a3, a4, v5);
  }
  return result;
}

uint64_t sub_1C60D6E9C(uint64_t a1, uint64_t a2, _DWORD *a3, uint64_t a4, const llvm::MCAsmInfo *a5, unsigned int a6)
{
  _BYTE *v12;
  llvm *v13;
  _OWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *DarwinAsmParser;
  uint64_t v21;
  _QWORD *ELFAsmParser;
  _QWORD *v23;
  uint64_t v24;

  *(_WORD *)(a1 + 32) = 0;
  v12 = (_BYTE *)(a1 + 32);
  *(_QWORD *)(a1 + 16) = a1 + 32;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)a1 = &off_1E81ADFA0;
  *(_QWORD *)(a1 + 8) = 0;
  v13 = llvm::AsmLexer::AsmLexer((llvm::AsmLexer *)(a1 + 40), a5);
  *(_QWORD *)(a1 + 216) = a3;
  *(_QWORD *)(a1 + 224) = a4;
  *(_QWORD *)(a1 + 232) = a5;
  *(_QWORD *)(a1 + 240) = a2;
  v14 = (_OWORD *)(a1 + 264);
  if (a6 <= 1)
    v15 = 1;
  else
    v15 = a6;
  *v14 = 0u;
  *(_DWORD *)(a1 + 280) = v15;
  *(_DWORD *)(a1 + 284) = 0;
  *(_WORD *)(a1 + 288) = 0;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 324) = 0u;
  *(_DWORD *)(a1 + 340) = 24;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 400) = 0u;
  *(_QWORD *)(a1 + 416) = 0;
  *(_BYTE *)(a1 + 424) |= 1u;
  *(_DWORD *)(a1 + 464) = 0;
  *(_OWORD *)(a1 + 432) = 0u;
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_QWORD *)(a1 + 488) = a1 + 504;
  *(_QWORD *)(a1 + 496) = 0x400000000;
  *(_QWORD *)(a1 + 728) = a1 + 744;
  *(_QWORD *)(a1 + 736) = 0x200000000;
  *(_OWORD *)(a1 + 784) = 0u;
  *(_QWORD *)(a1 + 776) = a1 + 784;
  *(_DWORD *)(a1 + 800) = -1;
  *(_OWORD *)(a1 + 804) = 0u;
  *(_QWORD *)(a1 + 820) = 0;
  *(_DWORD *)(a1 + 828) = 16;
  *(_QWORD *)(a1 + 856) = 0x1000000000;
  *(_OWORD *)(a1 + 840) = 0u;
  *v12 = 0;
  *(_OWORD *)(a1 + 248) = *(_OWORD *)(a2 + 48);
  *(_QWORD *)(a2 + 48) = sub_1C60DC908;
  *(_QWORD *)(a2 + 56) = a1;
  v16 = *(_QWORD *)(*(_QWORD *)a2 + 24 * (v15 - 1));
  v17 = *(_QWORD *)(v16 + 8);
  v18 = *(_QWORD *)(v16 + 16) - v17;
  *(_QWORD *)(a1 + 192) = v17;
  *(_QWORD *)(a1 + 200) = v18;
  *(_QWORD *)(a1 + 184) = v17;
  *(_QWORD *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 211) = 1;
  *(_QWORD *)(a4 + 256) = a1 + 272;
  switch(*a3)
  {
    case 0:
      DarwinAsmParser = llvm::createDarwinAsmParser(v13);
      v21 = *(_QWORD *)v14;
      *(_QWORD *)v14 = DarwinAsmParser;
      if (v21)
        (*(void (**)(uint64_t))(*(_QWORD *)v21 + 8))(v21);
      *(_BYTE *)(a1 + 804) = 1;
      break;
    case 1:
      ELFAsmParser = (_QWORD *)llvm::createELFAsmParser(v13);
      goto LABEL_15;
    case 2:
      ELFAsmParser = llvm::createGOFFAsmParser(v13);
      goto LABEL_15;
    case 3:
      ELFAsmParser = llvm::createCOFFAsmParser(v13);
      goto LABEL_15;
    case 4:
      llvm::report_fatal_error((llvm *)"Need to implement createSPIRVAsmParser for SPIRV format.", (const char *)1);
    case 5:
      ELFAsmParser = (_QWORD *)llvm::createWasmAsmParser(v13);
      goto LABEL_15;
    case 6:
      ELFAsmParser = llvm::createXCOFFAsmParser(v13);
LABEL_15:
      v23 = ELFAsmParser;
      v24 = *(_QWORD *)v14;
      *(_QWORD *)v14 = v23;
      if (v24)
        (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
      break;
    default:
      break;
  }
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 264) + 16))(*(_QWORD *)(a1 + 264), a1);
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".set", 4uLL) = 1;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".equ", 4uLL) = 2;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".equiv", 6uLL) = 3;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".ascii", 6uLL) = 4;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".asciz", 6uLL) = 5;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".string", 7uLL) = 6;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".byte", 5uLL) = 7;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".short", 6uLL) = 8;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".value", 6uLL) = 10;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".2byte", 6uLL) = 11;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".long", 5uLL) = 12;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".int", 4uLL) = 13;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".4byte", 6uLL) = 14;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".quad", 5uLL) = 15;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".8byte", 6uLL) = 16;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".octa", 5uLL) = 17;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".single", 7uLL) = 41;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".float", 6uLL) = 42;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".double", 7uLL) = 43;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".align", 6uLL) = 44;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".align32", 8uLL) = 45;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".balign", 7uLL) = 46;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".balignw", 8uLL) = 47;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".balignl", 8uLL) = 48;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".p2align", 8uLL) = 49;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".p2alignw", 9uLL) = 50;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".p2alignl", 9uLL) = 51;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".org", 4uLL) = 52;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".fill", 5uLL) = 53;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".zero", 5uLL) = 58;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".extern", 7uLL) = 59;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".globl", 6uLL) = 60;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".global", 7uLL) = 61;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".lazy_reference", 0xFuLL) = 62;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".no_dead_strip", 0xEuLL) = 63;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".symbol_resolver", 0x10uLL) = 64;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".private_extern", 0xFuLL) = 65;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".reference", 0xAuLL) = 66;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".weak_definition", 0x10uLL) = 67;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".weak_reference", 0xFuLL) = 68;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".weak_def_can_be_hidden", 0x17uLL) = 69;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".cold", 5uLL) = 70;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".comm", 5uLL) = 71;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".common", 7uLL) = 72;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".lcomm", 6uLL) = 73;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".abort", 6uLL) = 74;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".include", 8uLL) = 75;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".incbin", 7uLL) = 76;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".code16", 7uLL) = 77;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".code16gcc", 0xAuLL) = 78;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".rept", 5uLL) = 79;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".rep", 4uLL) = 79;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".irp", 4uLL) = 80;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".irpc", 5uLL) = 81;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".endr", 5uLL) = 54;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".bundle_align_mode", 0x12uLL) = 55;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".bundle_lock", 0xCuLL) = 56;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".bundle_unlock", 0xEuLL) = 57;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".if", 3uLL) = 82;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".ifeq", 5uLL) = 83;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".ifge", 5uLL) = 84;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".ifgt", 5uLL) = 85;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".ifle", 5uLL) = 86;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".iflt", 5uLL) = 87;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".ifne", 5uLL) = 88;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".ifb", 4uLL) = 89;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".ifnb", 5uLL) = 90;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".ifc", 4uLL) = 91;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".ifeqs", 6uLL) = 92;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".ifnc", 5uLL) = 93;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".ifnes", 6uLL) = 94;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".ifdef", 6uLL) = 95;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".ifndef", 7uLL) = 96;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".ifnotdef", 9uLL) = 97;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".elseif", 7uLL) = 98;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".else", 5uLL) = 99;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".end", 4uLL) = 163;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".endif", 6uLL) = 100;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".skip", 5uLL) = 102;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".space", 6uLL) = 101;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".file", 5uLL) = 103;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".line", 5uLL) = 104;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".loc", 4uLL) = 105;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".stabs", 6uLL) = 106;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".cv_file", 8uLL) = 107;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".cv_func_id", 0xBuLL) = 108;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".cv_loc", 7uLL) = 110;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".cv_linetable", 0xDuLL) = 111;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".cv_inline_linetable", 0x14uLL) = 112;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".cv_inline_site_id", 0x12uLL) = 109;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".cv_def_range", 0xDuLL) = 113;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".cv_string", 0xAuLL) = 115;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".cv_stringtable", 0xFuLL) = 114;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".cv_filechecksums", 0x11uLL) = 116;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".cv_filechecksumoffset", 0x16uLL) = 117;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".cv_fpo_data", 0xCuLL) = 118;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".sleb128", 8uLL) = 151;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".uleb128", 8uLL) = 152;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".cfi_sections", 0xDuLL) = 119;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".cfi_startproc", 0xEuLL) = 120;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".cfi_endproc", 0xCuLL) = 121;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".cfi_def_cfa", 0xCuLL) = 122;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".cfi_def_cfa_offset", 0x13uLL) = 123;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".cfi_adjust_cfa_offset", 0x16uLL) = 124;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".cfi_def_cfa_register", 0x15uLL) = 125;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".cfi_llvm_def_aspace_cfa", 0x18uLL) = 126;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".cfi_offset", 0xBuLL) = 127;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".cfi_rel_offset", 0xFuLL) = 128;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".cfi_personality", 0x10uLL) = 129;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".cfi_lsda", 9uLL) = 130;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".cfi_remember_state", 0x13uLL) = 131;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".cfi_restore_state", 0x12uLL) = 132;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".cfi_same_value", 0xFuLL) = 133;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".cfi_restore", 0xCuLL) = 134;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".cfi_escape", 0xBuLL) = 135;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".cfi_return_column", 0x12uLL) = 136;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".cfi_signal_frame", 0x11uLL) = 137;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".cfi_undefined", 0xEuLL) = 138;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".cfi_register", 0xDuLL) = 139;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".cfi_window_save", 0x10uLL) = 140;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".cfi_b_key_frame", 0x10uLL) = 141;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".macros_on", 0xAuLL) = 142;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".macros_off", 0xBuLL) = 143;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".macro", 6uLL) = 146;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".exitm", 6uLL) = 147;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".endm", 5uLL) = 148;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".endmacro", 9uLL) = 149;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".purgem", 7uLL) = 150;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".err", 4uLL) = 153;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".error", 6uLL) = 154;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".warning", 8uLL) = 155;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".altmacro", 9uLL) = 144;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".noaltmacro", 0xBuLL) = 145;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".reloc", 6uLL) = 9;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".dc", 3uLL) = 18;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".dc.a", 5uLL) = 19;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".dc.b", 5uLL) = 20;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".dc.d", 5uLL) = 21;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".dc.l", 5uLL) = 22;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".dc.s", 5uLL) = 23;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".dc.w", 5uLL) = 24;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".dc.x", 5uLL) = 25;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".dcb", 4uLL) = 26;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".dcb.b", 6uLL) = 27;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".dcb.d", 6uLL) = 28;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".dcb.l", 6uLL) = 29;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".dcb.s", 6uLL) = 30;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".dcb.w", 6uLL) = 31;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".dcb.x", 6uLL) = 32;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".ds", 3uLL) = 33;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".ds.b", 5uLL) = 34;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".ds.d", 5uLL) = 35;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".ds.l", 5uLL) = 36;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".ds.p", 5uLL) = 37;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".ds.s", 5uLL) = 38;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".ds.w", 5uLL) = 39;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".ds.x", 5uLL) = 40;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".print", 6uLL) = 156;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".addrsig", 8uLL) = 157;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".addrsig_sym", 0xCuLL) = 158;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".pseudoprobe", 0xCuLL) = 159;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".lto_discard", 0xCuLL) = 160;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".lto_set_conditional", 0x14uLL) = 161;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 808), ".flatbuffer_inj", 0xFuLL) = 162;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 840), "reg", 3uLL) = 1;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 840), "frame_ptr_rel", 0xDuLL) = 2;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 840), "subfield_reg", 0xCuLL) = 3;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 840), "reg_rel", 7uLL) = 4;
  *(_DWORD *)(a1 + 428) = 0;
  return a1;
}

uint64_t sub_1C60D832C(uint64_t a1)
{
  return a1 + 40;
}

uint64_t sub_1C60D8334(uint64_t a1)
{
  *(_BYTE *)(*(_QWORD *)(a1 + 872) + 104) = 1;
  return sub_1C60E4AA4(a1);
}

void sub_1C60D8344(uint64_t a1)
{
  *(_BYTE *)(*(_QWORD *)(a1 + 872) + 104) = 1;
  sub_1C60E4AA4(a1);
  JUMPOUT(0x1CAA32FC0);
}

size_t **sub_1C60D8374(uint64_t a1, unsigned __int8 *a2, size_t a3, size_t a4, size_t a5)
{
  size_t **result;
  size_t *v8;

  result = sub_1C63EA4F0(a1 + 320, a2, a3);
  v8 = *result;
  v8[1] = a4;
  v8[2] = a5;
  return result;
}

void sub_1C60D83A4(uint64_t a1, char *a2, unint64_t a3, char *a4, unint64_t a5)
{
  llvm::StringMapImpl *v7;
  unsigned __int8 *v8;
  size_t v9;
  int v10;
  unsigned __int8 *v11;
  size_t v12;
  void *__p[2];
  char v14;
  void *v15[2];
  char v16;

  v7 = (llvm::StringMapImpl *)(a1 + 808);
  sub_1C5E3DEA4(v15, a4, (uint64_t (*)(_QWORD))sub_1C5E3C6A8, &a4[a5], (uint64_t)sub_1C5E3C6A8, a5);
  if (v16 >= 0)
    v8 = (unsigned __int8 *)v15;
  else
    v8 = (unsigned __int8 *)v15[0];
  if (v16 >= 0)
    v9 = v16 & 0x7F;
  else
    v9 = (size_t)v15[1];
  v10 = *(_DWORD *)sub_1C60E48A8(v7, v8, v9);
  sub_1C5E3DEA4(__p, a2, (uint64_t (*)(_QWORD))sub_1C5E3C6A8, &a2[a3], (uint64_t)sub_1C5E3C6A8, a3);
  if (v14 >= 0)
    v11 = (unsigned __int8 *)__p;
  else
    v11 = (unsigned __int8 *)__p[0];
  if (v14 >= 0)
    v12 = v14 & 0x7F;
  else
    v12 = (size_t)__p[1];
  *(_DWORD *)sub_1C60E48A8(v7, v11, v12) = v10;
  if (v14 < 0)
    operator delete(__p[0]);
  if (v16 < 0)
    operator delete(v15[0]);
}

uint64_t sub_1C60D849C(uint64_t a1)
{
  return *(_QWORD *)(a1 + 240);
}

uint64_t sub_1C60D84A4(uint64_t a1)
{
  return *(_QWORD *)(a1 + 216);
}

uint64_t sub_1C60D84AC(uint64_t a1)
{
  return *(_QWORD *)(a1 + 224);
}

uint64_t sub_1C60D84B4(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned int *)(a1 + 800);
  if ((_DWORD)result == -1)
    return *(unsigned int *)(*(_QWORD *)(a1 + 232) + 176);
  return result;
}

uint64_t sub_1C60D84D4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 800) = a2;
  return result;
}

BOOL sub_1C60D84DC(uint64_t a1, char a2, char a3)
{
  unint64_t v5;
  int v6;
  char v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t TempSymbol;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *i;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t v48;
  __int128 v49;
  __int128 v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _BOOL8 v54;
  _QWORD v57[2];
  unint64_t v58;
  uint64_t v59;
  __int16 v60;
  void *v61;
  uint64_t v62;
  _QWORD v63[2];
  __int16 v64;
  int v65;
  char v66;
  void **v67;
  void *v68[2];
  _QWORD v69[66];

  v69[64] = *MEMORY[0x1E0C80C00];
  *(_DWORD *)(a1 + 736) = 0;
  v5 = a1 + 784;
  sub_1C47655E8(a1 + 776, *(_QWORD **)(a1 + 784));
  *(_QWORD *)(a1 + 776) = v5;
  *(_QWORD *)(a1 + 792) = 0;
  *(_QWORD *)(a1 + 784) = 0;
  if ((a2 & 1) == 0)
    (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 224) + 176))(*(_QWORD *)(a1 + 224), 0, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 240));
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
  *(_BYTE *)(a1 + 32) = 0;
  v6 = *(_DWORD *)(a1 + 284);
  v7 = *(_BYTE *)(a1 + 289);
  v68[0] = v69;
  v68[1] = (void *)0x400000000;
  if (*(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) + 1513))
  {
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
    v9 = *(unsigned int *)(v8 + 120);
    if ((_DWORD)v9)
      v5 = *(_QWORD *)(*(_QWORD *)(v8 + 112) + 32 * v9 - 32);
    else
      v5 = 0;
    if (!*(_QWORD *)(v5 + 8))
    {
      v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
      v61 = "tmp";
      v64 = 259;
      TempSymbol = llvm::MCContext::createTempSymbol(v10, (uint64_t)&v61, 1);
      v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
      (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v12 + 192))(v12, TempSymbol, 0);
      *(_QWORD *)(v5 + 8) = TempSymbol;
    }
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
    v61 = (void *)v5;
    sub_1C542EB4C((_QWORD *)(v13 + 1520), &v61);
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8));
  while (**(_DWORD **)(a1 + 48))
  {
    v61 = v63;
    v62 = 0x800000000;
    v65 = -1;
    v66 = 0;
    v67 = v68;
    if ((*(unsigned int (**)(uint64_t, void **, _QWORD))(*(_QWORD *)a1 + 280))(a1, &v61, 0))
    {
      if (!*(_DWORD *)(a1 + 24) && **(_DWORD **)(a1 + 48) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
      sub_1C63EA5EC(a1);
      if (!*(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 107))
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 224))(a1);
    }
    else
    {
      sub_1C63EA5EC(a1);
    }
    v14 = v61;
    if ((_DWORD)v62)
    {
      v5 = 8 * v62;
      v15 = (char *)v61 - 8;
      do
      {
        v16 = *(_QWORD *)&v15[v5];
        *(_QWORD *)&v15[v5] = 0;
        if (v16)
          (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
        v5 -= 8;
      }
      while (v5);
      v14 = v61;
    }
    if (v14 != v63)
      free(v14);
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 200))(*(_QWORD *)(a1 + 8));
  sub_1C63EA5EC(a1);
  v17 = *(_QWORD *)(a1 + 8);
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 176))(v17, v18);
  if (*(_DWORD *)(a1 + 284) != v6 || *(_BYTE *)(a1 + 289) != (v7 & 1))
  {
    v19 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8) + 8);
    v61 = "unmatched .ifs or .elses";
    v64 = 259;
    (*(void (**)(uint64_t, uint64_t, void **, _QWORD, _QWORD))(*(_QWORD *)a1 + 176))(a1, v19, &v61, 0, 0);
  }
  v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  if (*(_QWORD *)(v20 + 1488))
  {
    v21 = *(_QWORD *)(v20 + 1472);
    v22 = *(unsigned int *)(v21 + 144);
    if ((_DWORD)v22)
    {
      v23 = 0;
      v24 = 72 * v22;
      v25 = (char *)(*(_QWORD *)(v21 + 136) + 23);
      do
      {
        if (*v25 < 0)
          v26 = *(_QWORD *)(v25 - 15);
        else
          v26 = *v25;
        if (v26)
          v27 = 1;
        else
          v27 = v23 == 0;
        if (!v27)
        {
          v28 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8) + 8);
          v5 = v5 & 0xFFFFFFFF00000000 | v23;
          v57[0] = "unassigned file number: ";
          v58 = v5;
          v60 = 2051;
          v61 = v57;
          v63[0] = " for .file directives";
          v64 = 770;
          (*(void (**)(uint64_t, uint64_t, void **, _QWORD, _QWORD))(*(_QWORD *)a1 + 176))(a1, v28, &v61, 0, 0);
        }
        ++v23;
        v25 += 72;
        v24 -= 72;
      }
      while (v24);
    }
  }
  if ((a3 & 1) == 0)
  {
    if (*(_BYTE *)(*(_QWORD *)(a1 + 232) + 18))
    {
      v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
      v30 = *(unsigned int *)(v29 + 1064);
      if ((_DWORD)v30)
      {
        for (i = *(uint64_t **)(v29 + 1056); !*i || *i == -8; ++i)
          ;
      }
      else
      {
        i = *(uint64_t **)(v29 + 1056);
      }
      v33 = *(_QWORD *)(v29 + 1056) + 8 * v30;
      if (i != (uint64_t *)v33)
      {
        v34 = *i;
        do
        {
          v35 = *(_QWORD *)(v34 + 8);
          if ((*(_DWORD *)(v35 + 8) & 1) != 0 && (*(_DWORD *)(v35 + 8) & 0x1C00) != 0x800 && *(_QWORD *)v35 <= 7uLL)
          {
            v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
            if ((*(_BYTE *)v35 & 4) != 0)
            {
              v39 = *(uint64_t **)(v35 - 8);
              v40 = *v39;
              v37 = v39 + 2;
              v38 = v40;
            }
            else
            {
              v37 = 0;
              v38 = 0;
            }
            v41 = *(_QWORD *)(*(_QWORD *)(v36 + 8) + 8);
            v60 = 1283;
            v57[0] = "assembler local symbol '";
            v58 = (unint64_t)v37;
            v59 = v38;
            v61 = v57;
            v63[0] = "' not defined";
            v64 = 770;
            (*(void (**)(uint64_t, uint64_t, void **, _QWORD, _QWORD))(*(_QWORD *)a1 + 176))(a1, v41, &v61, 0, 0);
          }
          do
          {
            v42 = i[1];
            ++i;
            v34 = v42;
            if (v42)
              v43 = v34 == -8;
            else
              v43 = 1;
          }
          while (v43);
        }
        while (i != (uint64_t *)v33);
      }
    }
    v44 = *(unsigned int *)(a1 + 496);
    if ((_DWORD)v44)
    {
      v45 = *(uint64_t **)(a1 + 488);
      v46 = 56 * v44;
      do
      {
        v47 = v45[6];
        v48 = *(_QWORD *)v47 & 0xFFFFFFFFFFFFFFF8;
        if (!v48 && (*(_DWORD *)(v47 + 8) & 0x1C00) == 0x800)
        {
          *(_DWORD *)(v47 + 8) |= 4u;
          llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v47 + 24));
          *(_QWORD *)v47 = *(_QWORD *)v47 & 7 | v48;
        }
        if (!v48)
        {
          v49 = *(_OWORD *)(v45 + 1);
          v50 = *(_OWORD *)(v45 + 3);
          *(_DWORD *)(a1 + 464) = *((_DWORD *)v45 + 10);
          *(_OWORD *)(a1 + 432) = v49;
          *(_OWORD *)(a1 + 448) = v50;
          v51 = *v45;
          v61 = "directional label undefined";
          v64 = 259;
          (*(void (**)(uint64_t, uint64_t, void **, _QWORD, _QWORD))(*(_QWORD *)a1 + 176))(a1, v51, &v61, 0, 0);
        }
        v45 += 7;
        v46 -= 56;
      }
      while (v46);
    }
    if (*(_BYTE *)(a1 + 32))
      goto LABEL_81;
    v52 = *(_QWORD **)(a1 + 224);
    v53 = v52[2];
    if (v53)
    {
      (*(void (**)(_QWORD))(*(_QWORD *)v53 + 72))(v52[2]);
      v52 = *(_QWORD **)(a1 + 224);
    }
    llvm::MCStreamer::Finish(v52, *(_QWORD *)(a1 + 136));
  }
  if (*(_BYTE *)(a1 + 32))
  {
LABEL_81:
    v54 = 1;
    goto LABEL_83;
  }
  v54 = *(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) + 1960) != 0;
LABEL_83:
  if (v68[0] != v69)
    free(v68[0]);
  return v54;
}

uint64_t sub_1C60D8B78(uint64_t result, char a2)
{
  *(_BYTE *)(result + 805) = a2;
  *(_BYTE *)(result + 149) = a2;
  return result;
}

uint64_t sub_1C60D8B84(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 805);
}

BOOL sub_1C60D8B8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD v4[2];

  v4[0] = a2;
  v4[1] = a3;
  return sub_1C63EA758(a1 + 728, (uint64_t)v4);
}

uint64_t sub_1C60D8BB4(uint64_t a1, std::string *a2, _DWORD *a3, _DWORD *a4, unsigned int *a5, _QWORD *a6, _QWORD *a7, uint64_t *a8, uint64_t a9, uint64_t a10)
{
  int v11;
  unsigned __int16 *v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  char v29;
  BOOL v30;
  const char *v31;
  unint64_t v32;
  unint64_t v33;
  int v34;
  const char *v35;
  uint64_t v36;
  char v37;
  char v38;
  uint64_t v39;
  char v40;
  uint64_t v41;
  unint64_t v42;
  char *v43;
  __int128 v44;
  int v45;
  uint64_t v46;
  char v47;
  uint64_t v48;
  size_t v49;
  char **p_dst;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  __int128 v56;
  std::string *v57;
  uint64_t v58;
  std::string::size_type v59;
  uint64_t v60;
  unsigned int v61;
  _BYTE *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  int v66;
  int v67;
  char *v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  std::string *v74;
  uint64_t v75;
  _BYTE *v76;
  _BYTE *v77;
  int v78;
  unsigned int v79;
  char *v80;
  int v81;
  uint64_t v82;
  unint64_t v83;
  _DWORD *v84;
  uint64_t v85;
  _BYTE *v86;
  _DWORD *v87;
  const char *v88;
  size_t v89;
  unsigned int v90;
  _WORD *v91;
  uint64_t v92;
  unsigned int v93;
  _WORD *v94;
  uint64_t v95;
  _QWORD *v96;
  uint64_t v97;
  const void *v98;
  size_t v99;
  char *v100;
  unint64_t v101;
  const void *v102;
  unint64_t v103;
  char *v104;
  _BYTE *v105;
  _BYTE *v106;
  uint64_t v107;
  size_t v108;
  _WORD *v109;
  const char *v110;
  const void *v111;
  unint64_t v112;
  _DWORD *v113;
  _WORD *v114;
  size_t v115;
  const void *v116;
  char *v117;
  char *v118;
  _DWORD *v119;
  char *v120;
  uint64_t v121;
  const char *v122;
  uint64_t v123;
  size_t v124;
  _QWORD *v125;
  _QWORD *v126;
  _WORD *v127;
  _BYTE *v128;
  int v129;
  const char *v130;
  const char *v131;
  const char *v132;
  uint64_t v133;
  unint64_t v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  unint64_t v139;
  char v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  int v144;
  char v145;
  uint64_t v146;
  uint64_t *v150;
  _QWORD *v151;
  unsigned int v154;
  const char *__src;
  uint64_t v157;
  unsigned int v158;
  _BYTE *v159;
  char *__dst;
  unint64_t v162;
  const char *v163;
  unint64_t v164;
  __int16 v165;
  void *__p[2];
  char v167;
  void *v168;
  __int128 v169;
  uint64_t v170;
  void *v171;
  __int128 v172;
  uint64_t v173;
  std::string v174;
  _BYTE *v175;
  void *v176;
  char v177;
  uint64_t v178;
  int v179;
  std::string *__str;
  unsigned int v181;
  char v182;
  void **v183;
  void *v184;
  size_t v185;
  _BYTE v186[512];
  void *__base;
  size_t __nel;
  _BYTE v189[16];
  char *v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  _QWORD *v196;
  uint64_t v197;
  _BYTE v198[32];
  _QWORD *v199;
  uint64_t v200;
  _QWORD v201[6];

  v201[4] = *MEMORY[0x1E0C80C00];
  v199 = v201;
  v200 = 0x400000000;
  v196 = v198;
  v197 = 0x400000000;
  v171 = &v173;
  v172 = xmmword_1C6612EF0;
  v168 = &v170;
  v169 = xmmword_1C6612EF0;
  v193 = (char *)&v195;
  v194 = 0x400000000;
  v190 = (char *)&v192;
  v191 = 0x400000000;
  __base = v189;
  __nel = 0x400000000;
  v184 = v186;
  v185 = 0x400000000;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
  if (**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8))
  {
    v154 = 0;
    while (1)
    {
      if ((**(_DWORD **)(a1 + 48) - 21) <= 1)
      {
        v174.__r_.__value_.__r.__words[0] = *(_QWORD *)(a1 + 136);
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
        if (**(_DWORD **)(a1 + 48) == 9)
          (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
        LODWORD(__p[0]) = 9;
        __dst = (char *)(*(_QWORD *)(a1 + 136) - v174.__r_.__value_.__r.__words[0]);
        sub_1C63EA1BC((uint64_t)&v184, (int *)__p, (uint64_t *)&v174, (uint64_t *)&__dst);
        goto LABEL_81;
      }
      v174.__r_.__value_.__r.__words[0] = (std::string::size_type)&v174.__r_.__value_.__r.__words[2];
      v174.__r_.__value_.__l.__size_ = 0x800000000;
      v181 = -1;
      v182 = 0;
      v183 = &v184;
      if (((*(uint64_t (**)(uint64_t, std::string *, uint64_t))(*(_QWORD *)a1 + 280))(a1, &v174, a10) & 1) != 0
        || v182)
      {
        sub_1C63EA5EC(a1);
        v14 = 1;
        goto LABEL_72;
      }
      if (v181 == -1)
      {
        v14 = 2;
        goto LABEL_72;
      }
      v11 = v174.__r_.__value_.__r.__words[1];
      v157 = *a8;
      v158 = v181;
      if (LODWORD(v174.__r_.__value_.__r.__words[1]) != 1)
        break;
LABEL_11:
      v12 = *(unsigned __int16 **)(v157 + 48 * v158 + 32);
      if (v12)
      {
        v13 = -1;
        do
          ++v13;
        while (v12[v13]);
      }
      else
      {
        v13 = 0;
      }
      sub_1C60EB54C((unsigned int *)&__base, (uint64_t)__base + 4 * __nel, v12, &v12[v13]);
      v14 = 0;
LABEL_72:
      v57 = (std::string *)v174.__r_.__value_.__r.__words[0];
      if (LODWORD(v174.__r_.__value_.__r.__words[1]))
      {
        v58 = 8 * LODWORD(v174.__r_.__value_.__r.__words[1]);
        v59 = v174.__r_.__value_.__r.__words[0] - 8;
        do
        {
          v60 = *(_QWORD *)(v59 + v58);
          *(_QWORD *)(v59 + v58) = 0;
          if (v60)
            (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
          v58 -= 8;
        }
        while (v58);
        v57 = (std::string *)v174.__r_.__value_.__r.__words[0];
      }
      if (v57 != (std::string *)&v174.__r_.__value_.__r.__words[2])
        free(v57);
      if ((v14 | 2) != 2)
      {
        v133 = 1;
        goto LABEL_306;
      }
LABEL_81:
      if (!**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8))
        goto LABEL_85;
    }
    v15 = *a8 + 48 * v181;
    v159 = (_BYTE *)(v15 + 4);
    v150 = (uint64_t *)(v15 + 8);
    v151 = (_QWORD *)(v15 + 40);
    v16 = 2;
    v17 = 1;
    while (1)
    {
      v18 = *(_DWORD **)(v174.__r_.__value_.__r.__words[0] + 8 * v17);
      if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v18 + 48))(v18))
      {
        if (((*(uint64_t (**)(_DWORD *))(*(_QWORD *)v18 + 96))(v18) & 1) == 0)
        {
          v19 = *(_QWORD *)(a1 + 8);
          v20 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v18 + 56))(v18);
          if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 80))(v19, v20) & 1) == 0)
          {
            if (*v159 && v18[2] < *v159)
            {
              v26 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v18 + 56))(v18);
              v27 = __nel;
              if (__nel >= (unint64_t)HIDWORD(__nel))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__base, (uint64_t)v189, __nel + 1, 4);
                v27 = __nel;
              }
              *((_DWORD *)__base + v27) = v26;
              LODWORD(__nel) = __nel + 1;
            }
            goto LABEL_22;
          }
        }
      }
      v21 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v18 + 16))(v18);
      if (v22)
      {
        v23 = v21;
        v24 = v22;
        v25 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v18 + 24))(v18);
        if (v25)
          break;
      }
LABEL_22:
      ++v17;
      v16 += 6;
      if (v11 == (_DWORD)v17)
        goto LABEL_11;
    }
    v28 = v25;
    v29 = *((_BYTE *)v18 + 39);
    v30 = v29 < 0;
    if (v29 >= 0)
      v31 = (const char *)(v18 + 4);
    else
      v31 = (const char *)*((_QWORD *)v18 + 2);
    __src = v31;
    v32 = v29 & 0x7F;
    if (v30)
      v33 = *((_QWORD *)v18 + 3);
    else
      v33 = v32;
    if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v18 + 40))(v18))
    {
      v34 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v18 + 104))(v18);
      v35 = "i";
      if (v34)
        v35 = "r";
      __src = v35;
      v33 = 1;
    }
    if (v17 == 1)
    {
      v36 = *v150;
      v37 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v18 + 72))(v18);
      if ((v36 & 0x100000) != 0)
      {
        v38 = v37;
        v39 = v197;
        if (v197 >= (unint64_t)HIDWORD(v197))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v196, (uint64_t)v198, v197 + 1, 8);
          v39 = v197;
        }
        v196[v39] = v28;
        LODWORD(v197) = v197 + 1;
        v40 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v18 + 96))(v18);
        v41 = v169;
        if ((unint64_t)(v169 + 1) > *((_QWORD *)&v169 + 1))
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v168, &v170, v169 + 1, 1);
          v41 = v169;
        }
        *((_BYTE *)v168 + v41) = v40;
        *(_QWORD *)&v169 = v169 + 1;
        v165 = 1283;
        __dst = "=";
        v163 = __src;
        v164 = v33;
        llvm::Twine::str((llvm::Twine *)&__dst, __p);
        v42 = sub_1C4E01890((uint64_t)&v190, (unint64_t)__p, 1);
        v43 = &v190[24 * v191];
        v44 = *(_OWORD *)v42;
        *((_QWORD *)v43 + 2) = *(_QWORD *)(v42 + 16);
        *(_OWORD *)v43 = v44;
        *(_QWORD *)(v42 + 8) = 0;
        *(_QWORD *)(v42 + 16) = 0;
        *(_QWORD *)v42 = 0;
        LODWORD(v191) = v191 + 1;
        if (v167 < 0)
          operator delete(__p[0]);
        ++v154;
        v45 = 5;
LABEL_69:
        sub_1C63EA7AC((uint64_t)&v184, v45, v23, v24, 0, v38);
        goto LABEL_22;
      }
    }
    else
    {
      v37 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v18 + 72))(v18);
    }
    v38 = v37;
    v46 = v200;
    if (v200 >= (unint64_t)HIDWORD(v200))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, (uint64_t)v201, v200 + 1, 8);
      v46 = v200;
    }
    v199[v46] = v28;
    LODWORD(v200) = v200 + 1;
    v47 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v18 + 96))(v18);
    v48 = v172;
    if ((unint64_t)(v172 + 1) > *((_QWORD *)&v172 + 1))
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v171, &v173, v172 + 1, 1);
      v48 = v172;
    }
    *((_BYTE *)v171 + v48) = v47;
    *(_QWORD *)&v172 = v172 + 1;
    if (!__src)
    {
      __dst = 0;
      v162 = 0;
      v163 = 0;
LABEL_64:
      v54 = sub_1C4E01890((uint64_t)&v193, (unint64_t)&__dst, 1);
      v55 = &v193[24 * v194];
      v56 = *(_OWORD *)v54;
      *((_QWORD *)v55 + 2) = *(_QWORD *)(v54 + 16);
      *(_OWORD *)v55 = v56;
      *(_QWORD *)(v54 + 8) = 0;
      *(_QWORD *)(v54 + 16) = 0;
      *(_QWORD *)v54 = 0;
      LODWORD(v194) = v194 + 1;
      if (SHIBYTE(v163) < 0)
        operator delete(__dst);
      if ((*(_BYTE *)(*v151 + v16) & 8) != 0)
        v45 = 3;
      else
        v45 = 4;
      goto LABEL_69;
    }
    v49 = v33;
    if (v33 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (v33 >= 0x17)
    {
      v51 = (v33 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v33 | 7) != 0x17)
        v51 = v33 | 7;
      v52 = v51 + 1;
      p_dst = (char **)operator new(v51 + 1);
      v53 = v52 | 0x8000000000000000;
      v49 = v33;
      v162 = v33;
      v163 = (const char *)v53;
      __dst = (char *)p_dst;
    }
    else
    {
      HIBYTE(v163) = v33;
      p_dst = &__dst;
      if (!v33)
        goto LABEL_63;
    }
    memmove(p_dst, __src, v49);
LABEL_63:
    *((_BYTE *)p_dst + v49) = 0;
    goto LABEL_64;
  }
  v154 = 0;
LABEL_85:
  *a3 = v197;
  *a4 = v200;
  v61 = __nel;
  if (__nel >= 2)
  {
    qsort(__base, __nel, 4uLL, (int (__cdecl *)(const void *, const void *))sub_1C4AB967C);
    v61 = __nel;
  }
  v62 = __base;
  v63 = (char *)__base + 4 * v61;
  if (v61)
  {
    v64 = (char *)__base - 4;
    v65 = 4 * v61 - 4;
    while (v65)
    {
      v66 = *((_DWORD *)v64 + 1);
      v67 = *((_DWORD *)v64 + 2);
      v64 += 4;
      v65 -= 4;
      if (v66 == v67)
        goto LABEL_93;
    }
  }
  else
  {
    v64 = (char *)__base;
LABEL_93:
    if (v64 != v63)
    {
      v68 = v64 + 8;
      if (v64 + 8 != v63)
      {
        v69 = *(_DWORD *)v64;
        do
        {
          v70 = v69;
          v69 = *(_DWORD *)v68;
          if (v70 != *(_DWORD *)v68)
          {
            *((_DWORD *)v64 + 1) = v69;
            v64 += 4;
          }
          v68 += 4;
        }
        while (v68 != v63);
      }
      v63 = v64 + 4;
    }
  }
  LODWORD(__nel) = (unint64_t)(v63 - v62) >> 2;
  memset(&v174, 0, sizeof(v174));
  sub_1C60EB3D4((uint64_t)a7, __nel, &v174);
  if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v174.__r_.__value_.__l.__data_);
  if ((_DWORD)__nel)
  {
    v71 = 0;
    v72 = 0;
    v73 = 24 * __nel;
    do
    {
      v74 = (std::string *)(*a7 + v72);
      LODWORD(v174.__r_.__value_.__r.__words[1]) = 0;
      v177 = 0;
      v178 = 0;
      v174.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E81A7208;
      __str = v74;
      v179 = 0;
      v175 = 0;
      v176 = 0;
      v174.__r_.__value_.__r.__words[2] = 0;
      (*(void (**)(uint64_t, std::string *, _QWORD))(*(_QWORD *)a9 + 40))(a9, &v174, *(unsigned int *)((char *)__base + v71));
      v174.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E81A6E70;
      if (v179 == 1 && v174.__r_.__value_.__r.__words[2])
        MEMORY[0x1CAA32F9C](v174.__r_.__value_.__r.__words[2], 0x1000C8077774924);
      v72 += 24;
      v71 += 4;
    }
    while (v73 != v72);
  }
  if (*a3 | *a4)
  {
    v135 = (*a4 + *a3);
    sub_1C63EA94C(a5, v135);
    sub_1C60EB78C((uint64_t)a6, v135);
    LODWORD(v136) = *a3;
    if (*a3)
    {
      v137 = 0;
      v138 = 0;
      v139 = 0;
      do
      {
        v140 = *((_BYTE *)v168 + v139);
        v141 = *(_QWORD *)a5 + v137;
        *(_QWORD *)v141 = v196[v139];
        *(_BYTE *)(v141 + 8) = v140;
        std::string::operator=((std::string *)(*a6 + v138), (const std::string *)&v190[v138]);
        ++v139;
        v136 = *a3;
        v138 += 24;
        v137 += 16;
      }
      while (v139 < v136);
    }
    if (*a4)
    {
      v142 = 0;
      v143 = 0;
      v144 = v136;
      do
      {
        v145 = *((_BYTE *)v171 + v143);
        v146 = *(_QWORD *)a5 + 16 * (v144 + v143);
        *(_QWORD *)v146 = v199[v143];
        *(_BYTE *)(v146 + 8) = v145;
        std::string::operator=((std::string *)(*a6 + 24 * (v144 + v143++)), (const std::string *)&v193[v142]);
        v142 += 24;
      }
      while (v143 < *a4);
    }
  }
  __dst = 0;
  v162 = 0;
  v163 = 0;
  LODWORD(v174.__r_.__value_.__r.__words[1]) = 0;
  v177 = 0;
  v178 = 0;
  v174.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E81A7208;
  __str = (std::string *)&__dst;
  v179 = 0;
  v175 = 0;
  v176 = 0;
  v174.__r_.__value_.__r.__words[2] = 0;
  v75 = ***(_QWORD ***)(a1 + 240);
  v76 = *(_BYTE **)(v75 + 8);
  v77 = *(_BYTE **)(v75 + 16);
  v78 = v185;
  if (v185 >= 2)
  {
    qsort(v184, v185, 0x80uLL, (int (__cdecl *)(const void *, const void *))sub_1C60EB4FC);
    v78 = v185;
  }
  if (v78)
  {
    v79 = 0;
    v80 = (char *)v184;
    while (v80[20])
    {
LABEL_256:
      v80 += 128;
      if (v80 == (char *)v184 + 128 * (unint64_t)v185)
        goto LABEL_298;
    }
    v81 = *(_DWORD *)v80;
    v82 = *((_QWORD *)v80 + 1);
    v83 = (v82 - (_DWORD)v76);
    if ((_DWORD)v82 != (_DWORD)v76)
    {
      if (v83 <= v175 - (_BYTE *)v176)
      {
        memcpy(v176, v76, (v82 - (_DWORD)v76));
        v176 = (char *)v176 + v83;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)&v174, v76, (v82 - (_DWORD)v76));
      }
    }
    switch(v81)
    {
      case 0:
        v84 = v176;
        if ((unint64_t)(v175 - (_BYTE *)v176) > 5)
        {
          *((_WORD *)v176 + 2) = 28263;
          *v84 = 1768710446;
          v176 = (char *)v176 + 6;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v174, ".align", 6uLL);
        }
        if (*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) + 152) + 339))
          goto LABEL_254;
        v85 = *((_QWORD *)v80 + 3);
        v86 = v176;
        if (v176 >= v175)
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v174, 32);
        }
        else
        {
          v176 = (char *)v176 + 1;
          *v86 = 32;
        }
        sub_1C5E21910((llvm::raw_ostream *)&v174, v85, 0, 0, 0);
        v92 = 3;
        if (v85 >= 7)
          v92 = 4;
        if (v85 < 4)
          v92 = 2;
        goto LABEL_255;
      case 1:
        v87 = v176;
        if ((unint64_t)(v175 - (_BYTE *)v176) <= 4)
        {
          v88 = ".even";
          goto LABEL_129;
        }
        v92 = 0;
        *((_BYTE *)v176 + 4) = 110;
        v129 = 1702257966;
        goto LABEL_271;
      case 2:
        v87 = v176;
        if ((unint64_t)(v175 - (_BYTE *)v176) <= 4)
        {
          v88 = ".byte";
LABEL_129:
          v89 = 5;
          goto LABEL_253;
        }
        v92 = 0;
        *((_BYTE *)v176 + 4) = 101;
        v129 = 1954112046;
LABEL_271:
        *v87 = v129;
        v104 = (char *)v176 + 5;
        goto LABEL_165;
      case 3:
        goto LABEL_131;
      case 4:
        if (!v80[120])
        {
          v105 = v176;
          if (v176 >= v175)
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&v174, 36);
          }
          else
          {
            v176 = (char *)v176 + 1;
            *v105 = 36;
          }
          v90 = v154 + 1;
          sub_1C5E21910((llvm::raw_ostream *)&v174, v154, 0, 0, 0);
          goto LABEL_135;
        }
LABEL_131:
        if ((unint64_t)(v175 - (_BYTE *)v176) > 1)
        {
          *(_WORD *)v176 = 31524;
          v176 = (char *)v176 + 2;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v174, "${", 2uLL);
        }
        v90 = v154 + 1;
        sub_1C5E21910((llvm::raw_ostream *)&v174, v154, 0, 0, 0);
        v91 = v176;
        if ((unint64_t)(v175 - (_BYTE *)v176) <= 2)
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v174, ":P}", 3uLL);
LABEL_135:
          v92 = 0;
          goto LABEL_136;
        }
        v92 = 0;
        *((_BYTE *)v176 + 2) = 125;
        *v91 = 20538;
        v176 = (char *)v176 + 3;
LABEL_136:
        v154 = v90;
        goto LABEL_255;
      case 5:
        if (!v80[120])
        {
          v106 = v176;
          if (v176 >= v175)
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&v174, 36);
          }
          else
          {
            v176 = (char *)v176 + 1;
            *v106 = 36;
          }
          v93 = v79 + 1;
          sub_1C5E21910((llvm::raw_ostream *)&v174, v79, 0, 0, 0);
          goto LABEL_240;
        }
        if ((unint64_t)(v175 - (_BYTE *)v176) > 1)
        {
          *(_WORD *)v176 = 31524;
          v176 = (char *)v176 + 2;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v174, "${", 2uLL);
        }
        v93 = v79 + 1;
        sub_1C5E21910((llvm::raw_ostream *)&v174, v79, 0, 0, 0);
        v94 = v176;
        if ((unint64_t)(v175 - (_BYTE *)v176) <= 2)
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v174, ":P}", 3uLL);
LABEL_240:
          v92 = 0;
          goto LABEL_241;
        }
        v92 = 0;
        *((_BYTE *)v176 + 2) = 125;
        *v94 = 20538;
        v176 = (char *)v176 + 3;
LABEL_241:
        v79 = v93;
        goto LABEL_255;
      case 6:
        v92 = 0;
        v95 = *((_QWORD *)v80 + 3);
        if (v95 > 63)
        {
          if (v95 <= 127)
          {
            if (v95 == 64)
            {
              v96 = v176;
              if ((unint64_t)(v175 - (_BYTE *)v176) <= 9)
              {
                v88 = "qword ptr ";
                goto LABEL_244;
              }
              v92 = 0;
              *((_WORD *)v176 + 4) = 8306;
              v130 = "qword ptr ";
            }
            else
            {
              if (v95 != 80)
                goto LABEL_255;
              v96 = v176;
              if ((unint64_t)(v175 - (_BYTE *)v176) <= 9)
              {
                v88 = "xword ptr ";
LABEL_244:
                v89 = 10;
                goto LABEL_253;
              }
              v92 = 0;
              *((_WORD *)v176 + 4) = 8306;
              v130 = "xword ptr ";
            }
LABEL_290:
            *v96 = *(_QWORD *)v130;
            v104 = (char *)v176 + 10;
            goto LABEL_165;
          }
          if (v95 == 128)
          {
            v125 = v176;
            if ((unint64_t)(v175 - (_BYTE *)v176) <= 0xB)
            {
              v88 = "xmmword ptr ";
              goto LABEL_252;
            }
            v92 = 0;
            *((_DWORD *)v176 + 2) = 544371824;
            v131 = "xmmword ptr ";
          }
          else
          {
            if (v95 != 256)
              goto LABEL_255;
            v125 = v176;
            if ((unint64_t)(v175 - (_BYTE *)v176) <= 0xB)
            {
              v88 = "ymmword ptr ";
LABEL_252:
              v89 = 12;
LABEL_253:
              llvm::raw_ostream::write((llvm::raw_ostream *)&v174, v88, v89);
LABEL_254:
              v92 = 0;
              goto LABEL_255;
            }
            v92 = 0;
            *((_DWORD *)v176 + 2) = 544371824;
            v131 = "ymmword ptr ";
          }
          *v125 = *(_QWORD *)v131;
          v104 = (char *)v176 + 12;
          goto LABEL_165;
        }
        switch(v95)
        {
          case 8:
            v126 = v176;
            if ((unint64_t)(v175 - (_BYTE *)v176) <= 8)
            {
              v88 = "byte ptr ";
LABEL_249:
              v89 = 9;
              goto LABEL_253;
            }
            v92 = 0;
            *((_BYTE *)v176 + 8) = 32;
            v132 = "byte ptr ";
            break;
          case 16:
            v126 = v176;
            if ((unint64_t)(v175 - (_BYTE *)v176) <= 8)
            {
              v88 = "word ptr ";
              goto LABEL_249;
            }
            v92 = 0;
            *((_BYTE *)v176 + 8) = 32;
            v132 = "word ptr ";
            break;
          case 32:
            v96 = v176;
            if ((unint64_t)(v175 - (_BYTE *)v176) <= 9)
            {
              v88 = "dword ptr ";
              goto LABEL_244;
            }
            v92 = 0;
            *((_WORD *)v176 + 4) = 8306;
            v130 = "dword ptr ";
            goto LABEL_290;
          default:
            goto LABEL_255;
        }
        *v126 = *(_QWORD *)v132;
        v104 = (char *)v176 + 9;
        goto LABEL_165;
      case 7:
        v97 = *(_QWORD *)(*(_QWORD *)(a1 + 216) + 152);
        v98 = *(const void **)(v97 + 104);
        v99 = *(_QWORD *)(v97 + 112);
        v100 = (char *)v176;
        if (v99 <= v175 - (_BYTE *)v176)
        {
          if (v99)
          {
            memcpy(v176, v98, v99);
            v100 = (char *)v176 + v99;
            v176 = (char *)v176 + v99;
          }
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v174, (const char *)v98, v99);
          v100 = (char *)v176;
        }
        v88 = (const char *)*((_QWORD *)v80 + 4);
        v103 = *((_QWORD *)v80 + 5);
        if (v103 > v175 - v100)
        {
          v89 = *((_QWORD *)v80 + 5);
          goto LABEL_253;
        }
        if (!v103)
          goto LABEL_254;
        memcpy(v100, v88, *((_QWORD *)v80 + 5));
        v92 = 0;
        v104 = (char *)v176 + v103;
        goto LABEL_165;
      case 8:
        if ((unint64_t)(v175 - (_BYTE *)v176) <= 1)
        {
          v88 = "\n\t";
          v89 = 2;
          goto LABEL_253;
        }
        v92 = 0;
        *(_WORD *)v176 = 2314;
        v104 = (char *)v176 + 2;
        goto LABEL_165;
      case 9:
        v76 = (_BYTE *)(v82 + *((unsigned int *)v80 + 4));
        goto LABEL_256;
      case 10:
        if (v80[48])
        {
          if (v175 == v176)
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&v174, "[", 1uLL);
          }
          else
          {
            *(_BYTE *)v176 = 91;
            v176 = (char *)v176 + 1;
          }
        }
        v101 = *((_QWORD *)v80 + 9);
        if (v101)
        {
          v102 = (const void *)*((_QWORD *)v80 + 8);
          if (v101 <= v175 - (_BYTE *)v176)
          {
            memcpy(v176, v102, *((_QWORD *)v80 + 9));
            v176 = (char *)v176 + v101;
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&v174, (const char *)v102, *((_QWORD *)v80 + 9));
          }
        }
        if (*((_QWORD *)v80 + 11))
        {
          v107 = *((_QWORD *)v80 + 9);
          if (v107)
            v108 = 3;
          else
            v108 = 0;
          v109 = v176;
          if (v108 <= v175 - (_BYTE *)v176)
          {
            if (v107)
            {
              *((_BYTE *)v176 + 2) = 32;
              *v109 = 11040;
              v109 = (char *)v176 + 3;
              v176 = (char *)v176 + 3;
            }
          }
          else
          {
            if (v107)
              v110 = " + ";
            else
              v110 = "";
            llvm::raw_ostream::write((llvm::raw_ostream *)&v174, v110, v108);
            v109 = v176;
          }
          v111 = (const void *)*((_QWORD *)v80 + 10);
          v112 = *((_QWORD *)v80 + 11);
          if (v112 <= v175 - (_BYTE *)v109)
          {
            if (v112)
            {
              memcpy(v109, v111, *((_QWORD *)v80 + 11));
              v176 = (char *)v176 + v112;
            }
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&v174, (const char *)v111, *((_QWORD *)v80 + 11));
          }
        }
        if (*((_DWORD *)v80 + 28) >= 2u)
        {
          v113 = v176;
          if ((unint64_t)(v175 - (_BYTE *)v176) > 4)
          {
            *((_BYTE *)v176 + 4) = 36;
            *v113 = 606087712;
            v176 = (char *)v176 + 5;
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&v174, " * $$", 5uLL);
          }
          sub_1C5E21910((llvm::raw_ostream *)&v174, *((unsigned int *)v80 + 28), 0, 0, 0);
        }
        if (!*((_QWORD *)v80 + 13))
          goto LABEL_210;
        if (*((_QWORD *)v80 + 9) || *((_QWORD *)v80 + 11))
        {
          v114 = v176;
          if ((unint64_t)(v175 - (_BYTE *)v176) > 2)
          {
            *((_BYTE *)v176 + 2) = 32;
            *v114 = 11040;
            v176 = (char *)v176 + 3;
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&v174, " + ", 3uLL);
          }
        }
        v116 = (const void *)*((_QWORD *)v80 + 12);
        v115 = *((_QWORD *)v80 + 13);
        v117 = (char *)v184 + 128 * (unint64_t)v185;
        if (v80 == v117)
          goto LABEL_204;
        v118 = v80;
        do
        {
          if (*((const void **)v118 + 1) == v116
            && v115 == *((_DWORD *)v118 + 4)
            && (*(_DWORD *)v118 - 3) < 2)
          {
            if (*(_DWORD *)v118 == 3)
            {
              if ((unint64_t)(v175 - (_BYTE *)v176) > 1)
              {
                *(_WORD *)v176 = 31524;
                v176 = (char *)v176 + 2;
              }
              else
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)&v174, "${", 2uLL);
              }
              sub_1C5E21910((llvm::raw_ostream *)&v174, v154, 0, 0, 0);
              v127 = v176;
              if ((unint64_t)(v175 - (_BYTE *)v176) > 2)
              {
                *((_BYTE *)v176 + 2) = 125;
                *v127 = 20538;
                v176 = (char *)v176 + 3;
              }
              else
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)&v174, ":P}", 3uLL);
              }
              ++v154;
              v118[20] = 1;
            }
            else
            {
              v128 = v176;
              if (v176 >= v175)
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)&v174, 36);
              }
              else
              {
                v176 = (char *)v176 + 1;
                *v128 = 36;
              }
              sub_1C5E21910((llvm::raw_ostream *)&v174, v154, 0, 0, 0);
              v118[20] = 1;
              ++v154;
            }
            goto LABEL_210;
          }
          v118 += 128;
        }
        while (v118 != v117);
LABEL_204:
        v119 = v176;
        if ((unint64_t)(v175 - (_BYTE *)v176) > 6)
        {
          *(_DWORD *)((char *)v176 + 3) = 544499059;
          *v119 = 1936090735;
          v120 = (char *)v176 + 7;
          v176 = (char *)v176 + 7;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v174, "offset ", 7uLL);
          v120 = (char *)v176;
        }
        if (v115 <= v175 - v120)
        {
          if (v115)
          {
            memcpy(v120, v116, v115);
            v176 = (char *)v176 + v115;
          }
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v174, (const char *)v116, v115);
        }
LABEL_210:
        v121 = *((_QWORD *)v80 + 9);
        if (!*((_QWORD *)v80 + 7))
        {
          if (v121)
            goto LABEL_223;
          if (*((_QWORD *)v80 + 11))
            goto LABEL_223;
          v123 = *((_QWORD *)v80 + 13);
          if (v123)
            goto LABEL_223;
          goto LABEL_214;
        }
        v122 = " + $$";
        if (!v121 && !*((_QWORD *)v80 + 11))
        {
          v123 = *((_QWORD *)v80 + 13);
LABEL_214:
          if (v123)
            v122 = " + $$";
          else
            v122 = "$$";
        }
        v124 = strlen(v122);
        if (v124 <= v175 - (_BYTE *)v176)
        {
          if (v124)
          {
            memcpy(v176, v122, v124);
            v176 = (char *)v176 + v124;
          }
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v174, v122, v124);
        }
        llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v174, *((_QWORD *)v80 + 7));
LABEL_223:
        if (!v80[48])
          goto LABEL_254;
        if (v175 != v176)
        {
          v92 = 0;
          *(_BYTE *)v176 = 93;
          v104 = (char *)v176 + 1;
LABEL_165:
          v176 = v104;
LABEL_255:
          v76 = (_BYTE *)(v82 + *((unsigned int *)v80 + 4) + v92);
          goto LABEL_256;
        }
        v88 = "]";
        v89 = 1;
        goto LABEL_253;
      default:
        goto LABEL_254;
    }
  }
LABEL_298:
  if (v76 != v77)
  {
    if (v77 - v76 <= (unint64_t)(v175 - (_BYTE *)v176))
    {
      memcpy(v176, v76, v77 - v76);
      v176 = (char *)v176 + v77 - v76;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v174, v76, v77 - v76);
    }
  }
  std::string::operator=(a2, __str);
  v174.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E81A6E70;
  if (v179 == 1 && v174.__r_.__value_.__r.__words[2])
    MEMORY[0x1CAA32F9C](v174.__r_.__value_.__r.__words[2], 0x1000C8077774924);
  if (SHIBYTE(v163) < 0)
    operator delete(__dst);
  v133 = 0;
LABEL_306:
  if (v184 != v186)
    free(v184);
  if (__base != v189)
    free(__base);
  sub_1C4E01820(&v190);
  sub_1C4E01820(&v193);
  if (v168 != &v170)
    free(v168);
  if (v171 != &v173)
    free(v171);
  if (v196 != (_QWORD *)v198)
    free(v196);
  if (v199 != v201)
    free(v199);
  return v133;
}

uint64_t sub_1C60DA3AC(uint64_t a1, char *a2, llvm::Twine *a3, unint64_t a4, unint64_t a5)
{
  unint64_t v11[2];

  sub_1C63EA5EC(a1);
  v11[0] = a4;
  v11[1] = a5;
  llvm::SourceMgr::PrintMessage(*(llvm **)(a1 + 240), a2, 3, a3, v11, 1, 0, 0, 1u);
  return sub_1C60EB860(a1);
}

uint64_t sub_1C60DA42C(uint64_t a1, char *a2, llvm::Twine *a3, uint64_t a4, uint64_t a5)
{
  char v10;
  char v12;
  unint64_t v13[2];
  void *v14;
  char v15;
  void *v16;
  char v17;
  void *v18;
  char v19;
  void *__p;
  char v21;
  _BYTE v22[24];
  void **v23;

  sub_1C4843224((uint64_t)v13, (uint64_t *)(*(_QWORD *)(a1 + 8) + 80));
  v10 = v13[0];
  v23 = (void **)v22;
  sub_1C4765410(&v23);
  if (v21 < 0)
    operator delete(__p);
  if (v19 < 0)
    operator delete(v18);
  if (v17 < 0)
    operator delete(v16);
  if (v15 < 0)
    operator delete(v14);
  if ((v10 & 8) == 0)
  {
    sub_1C4843224((uint64_t)v13, (uint64_t *)(*(_QWORD *)(a1 + 8) + 80));
    v12 = v13[0];
    v23 = (void **)v22;
    sub_1C4765410(&v23);
    if (v21 < 0)
      operator delete(__p);
    if (v19 < 0)
      operator delete(v18);
    if (v17 < 0)
      operator delete(v16);
    if (v15 < 0)
      operator delete(v14);
    if ((v12 & 4) != 0)
      return llvm::MCAsmParser::Error(a1, (uint64_t)a2, (uint64_t)a3, a4, a5);
    v13[0] = a4;
    v13[1] = a5;
    llvm::SourceMgr::PrintMessage(*(llvm **)(a1 + 240), a2, 1, a3, v13, 1, 0, 0, 1u);
    sub_1C60EB860(a1);
  }
  return 0;
}

uint64_t sub_1C60DA5AC(uint64_t a1, char *a2, llvm::Twine *a3, unint64_t a4, unint64_t a5)
{
  unint64_t v7[2];

  *(_BYTE *)(a1 + 32) = 1;
  v7[0] = a4;
  v7[1] = a5;
  llvm::SourceMgr::PrintMessage(*(llvm **)(a1 + 240), a2, 0, a3, v7, 1, 0, 0, 1u);
  sub_1C60EB860(a1);
  return 1;
}

uint64_t sub_1C60DA610(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int BufferContainingLoc;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int16 v22;

  v2 = a1 + 40;
  if (**(_DWORD **)(a1 + 48) == 1)
  {
    v15 = *(_QWORD *)(a1 + 104);
    v22 = 260;
    v20 = a1 + 112;
    llvm::MCAsmParser::Error(a1, v15, (uint64_t)&v20, 0, 0);
  }
  if (**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8) == 9
    && *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8) + 16)
    && **(_BYTE **)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8) + 8) != 10
    && **(_BYTE **)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8) + 8) != 13
    && *(_BYTE *)(*(_QWORD *)(a1 + 232) + 466))
  {
    v3 = *(_QWORD *)(a1 + 224);
    v4 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8);
    v6 = *(_QWORD *)(v4 + 8);
    v5 = *(_QWORD *)(v4 + 16);
    v22 = 261;
    v20 = v6;
    v21 = v5;
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v3 + 136))(v3, &v20);
  }
  while (1)
  {
    result = sub_1C60E57B0(v2);
    if (*(_DWORD *)result != 7)
      break;
    if (*(_BYTE *)(*(_QWORD *)(a1 + 232) + 466))
    {
      v8 = *(_QWORD *)(a1 + 224);
      v9 = *(_QWORD *)(result + 8);
      v10 = *(_QWORD *)(result + 16);
      v22 = 261;
      v20 = v9;
      v21 = v10;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v8 + 136))(v8, &v20);
    }
  }
  if (!*(_DWORD *)result)
  {
    v11 = *(uint64_t **)(a1 + 240);
    v12 = *v11;
    v13 = *v11 + 24 * (*(_DWORD *)(a1 + 280) - 1);
    v14 = *(_QWORD *)(v13 + 16);
    if (v14)
    {
      BufferContainingLoc = llvm::SourceMgr::FindBufferContainingLoc(*(uint64_t **)(a1 + 240), *(_QWORD *)(v13 + 16));
      *(_DWORD *)(a1 + 280) = BufferContainingLoc;
      v17 = *(_QWORD *)(v12 + 24 * (BufferContainingLoc - 1));
      v18 = *(_QWORD *)(v17 + 8);
      v19 = *(_QWORD *)(v17 + 16) - v18;
      *(_QWORD *)(a1 + 192) = v18;
      *(_QWORD *)(a1 + 200) = v19;
      *(_QWORD *)(a1 + 184) = v14;
      *(_QWORD *)(a1 + 136) = 0;
      *(_BYTE *)(a1 + 211) = 1;
      return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
    }
  }
  return result;
}

uint64_t sub_1C60DA80C(_DWORD **a1, _QWORD *a2)
{
  int v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v4 = *a1[6];
  if ((v4 - 2) < 2)
  {
    v7 = *(_QWORD *)((*((uint64_t (**)(_DWORD **))*a1 + 5))(a1) + 8);
    if (*(_DWORD *)v7 == 2)
    {
      v8 = *(_QWORD *)(v7 + 8);
      v9 = *(_QWORD *)(v7 + 16);
    }
    else
    {
      v8 = *(_QWORD *)(v7 + 8);
      v11 = *(_QWORD *)(v7 + 16);
      v12 = v11 - 1;
      v13 = v11 != 0;
      if (v11)
        ++v8;
      if (v13 > v12)
        v12 = v11 != 0;
      if (v11 < v12)
        v12 = v11;
      v9 = v12 - v13;
    }
    *a2 = v8;
    a2[1] = v9;
    (*((void (**)(_DWORD **))*a1 + 23))(a1);
    return 0;
  }
  else if (v4 == 45 || v4 == 26)
  {
    v6 = *(_QWORD *)((*((uint64_t (**)(_DWORD **))*a1 + 5))(a1) + 96);
    v17 = 0;
    v18 = 0;
    v10 = 1;
    v20 = 1;
    v19 = 0;
    llvm::AsmLexer::peekTokens((uint64_t)(a1 + 5), (uint64_t)&v16, 1, 0);
    if (v16 == 4 || v16 == 2)
    {
      if (v6 + 1 == v17)
      {
        sub_1C60E57B0((uint64_t)(a1 + 5));
        v14 = *(_QWORD *)(*(_QWORD *)((*((uint64_t (**)(_DWORD **))*a1 + 5))(a1) + 8) + 16) + 1;
        *a2 = v6;
        a2[1] = v14;
        (*((void (**)(_DWORD **))*a1 + 23))(a1);
        v10 = 0;
      }
      else
      {
        v10 = 1;
      }
    }
    if (v20 >= 0x41 && v19)
      MEMORY[0x1CAA32F9C](v19, 0x1000C8000313F17);
  }
  else
  {
    return 1;
  }
  return v10;
}

uint64_t sub_1C60DA9D0(_DWORD **a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;

  v2 = (uint64_t)(a1 + 5);
  v3 = *(_QWORD *)(*(_QWORD *)((*((uint64_t (**)(_DWORD **))*a1 + 5))(a1) + 8) + 8);
  while (1)
  {
    v4 = *a1[6];
    if (!v4 || v4 == 9)
      break;
    sub_1C60E57B0(v2);
  }
  (*((void (**)(_DWORD **))*a1 + 5))(a1);
  return v3;
}

uint64_t sub_1C60DAA4C(uint64_t a1, std::string *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unint64_t v15;
  int v16;
  unsigned int v17;
  int v18;
  int v19;
  uint64_t v21;
  const char *v22;
  const char *v23;
  __int16 v24;

  v4 = **(_DWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8);
  v23 = "expected string";
  v24 = 259;
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (v4 != 3)
  {
    v21 = *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8);
    goto LABEL_50;
  }
  MEMORY[0x1CAA32ABC](a2, "");
  v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v7 = *(_QWORD *)(*(_QWORD *)(v6 + 8) + 16);
  v8 = v7 != 0;
  if (v7)
    v9 = *(_QWORD *)(*(_QWORD *)(v6 + 8) + 8) + 1;
  else
    v9 = *(_QWORD *)(*(_QWORD *)(v6 + 8) + 8);
  if (v8 <= v7 - 1)
    v10 = v7 - 1;
  else
    v10 = v7 != 0;
  if (v7 < v10)
    v10 = *(_QWORD *)(*(_QWORD *)(v6 + 8) + 16);
  v11 = v10 - v8;
  if ((_DWORD)v10 == (_DWORD)v8)
  {
LABEL_45:
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
    return 0;
  }
  v12 = 0;
  while (1)
  {
    v13 = *(unsigned __int8 *)(v9 + v12);
    if (v13 != 92)
      goto LABEL_44;
    v14 = v12 + 1;
    if (v12 + 1 == (_DWORD)v11)
    {
      v22 = "unexpected backslash at end of string";
      goto LABEL_49;
    }
    v13 = *(unsigned __int8 *)(v9 + v14);
    if ((v13 | 0x20) == 0x78)
    {
      v15 = v12 + 2;
      if (v11 <= v15 || (v16 = (unsigned __int16)word_1C85F7092[*(unsigned __int8 *)(v9 + v15)], v16 == 0xFFFF))
      {
        v22 = "invalid hexadecimal escape sequence";
        goto LABEL_49;
      }
      LOBYTE(v13) = 0;
      do
      {
        v12 = v15;
        LOBYTE(v13) = v16 + 16 * v13;
        v15 = (v15 + 1);
        if (v11 <= v15)
          break;
        v16 = (unsigned __int16)word_1C85F7092[*(unsigned __int8 *)(v9 + v15)];
      }
      while (v16 != 0xFFFF);
      goto LABEL_44;
    }
    if ((v13 & 0xF8) != 0x30)
      break;
    v13 -= 48;
    v17 = v12 + 2;
    if (v12 + 2 == (_DWORD)v11)
      goto LABEL_43;
    v18 = *(unsigned __int8 *)(v9 + v17);
    if ((v18 & 0xF8) != 0x30)
      goto LABEL_43;
    v13 = v18 + 8 * v13 - 48;
    v12 += 3;
    if (v12 == (_DWORD)v11)
    {
      v14 = v17;
LABEL_43:
      v12 = v14;
      goto LABEL_44;
    }
    v19 = *(unsigned __int8 *)(v9 + v12);
    v14 = v17;
    if ((v19 & 0xF8) != 0x30)
      goto LABEL_43;
    v13 = v19 + 8 * v13 - 48;
    if (v13 > 0xFF)
    {
      v22 = "invalid octal escape sequence (out of range)";
      goto LABEL_49;
    }
LABEL_44:
    std::string::push_back(a2, v13);
    if (++v12 == (_DWORD)v11)
      goto LABEL_45;
  }
  if ((char)v13 <= 101)
  {
    if ((char)v13 != 34 && (char)v13 != 92)
    {
      if ((char)v13 != 98)
        goto LABEL_51;
      LOBYTE(v13) = 8;
    }
    goto LABEL_43;
  }
  if ((char)v13 <= 113)
  {
    if ((char)v13 == 102)
    {
      LOBYTE(v13) = 12;
    }
    else
    {
      if ((char)v13 != 110)
        goto LABEL_51;
      LOBYTE(v13) = 10;
    }
    goto LABEL_43;
  }
  if ((char)v13 == 114)
  {
    LOBYTE(v13) = 13;
    goto LABEL_43;
  }
  if ((char)v13 == 116)
  {
    LOBYTE(v13) = 9;
    goto LABEL_43;
  }
LABEL_51:
  v22 = "invalid escape sequence (unrecognized character)";
LABEL_49:
  v23 = v22;
  v24 = 259;
  v21 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 96);
LABEL_50:
  llvm::MCAsmParser::Error(a1, v21, (uint64_t)&v23, 0, 0);
  return 1;
}

BOOL sub_1C60DAD20(int *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::string v12;

  v4 = 0;
  v5 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(int *))(*(_QWORD *)a1 + 40))(a1) + 8) + 8);
  while (1)
  {
    v6 = *(unsigned __int8 *)(v5 + v4);
    if (v6 > 0x3E)
      goto LABEL_6;
    if (v6 == 33)
    {
      ++v4;
      goto LABEL_6;
    }
    if (((1 << v6) & 0x4000000000002401) != 0)
      break;
LABEL_6:
    ++v4;
  }
  if ((_DWORD)v6 == 62)
  {
    sub_1C60E8154((uint64_t)a1, v5 + v4 + 1, a1[70]);
    (*(void (**)(int *))(*(_QWORD *)a1 + 184))(a1);
    memset(&v12, 0, sizeof(v12));
    v7 = v4 - 1;
    if (v4 != 1)
    {
      v8 = 0;
      v9 = v5 + 1;
      do
      {
        if (*(_BYTE *)(v9 + v8) == 33)
          v10 = v8 + 1;
        else
          v10 = v8;
        std::string::push_back(&v12, *(_BYTE *)(v9 + v10));
        v8 = v10 + 1;
      }
      while (v10 + 1 < v7);
    }
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    *(std::string *)a2 = v12;
  }
  return (_DWORD)v6 != 62;
}

uint64_t sub_1C60DAE3C(uint64_t result)
{
  uint64_t v1;
  uint64_t i;
  int v3;

  v1 = result;
  for (i = result + 40; ; result = sub_1C60E57B0(i))
  {
    v3 = **(_DWORD **)(v1 + 48);
    if (!v3)
      break;
    if (v3 == 9)
      return sub_1C60E57B0(i);
  }
  return result;
}

uint64_t sub_1C60DAE8C(_DWORD **a1, unint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  unint64_t v9;
  char *v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  __int16 v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t v30;
  const char *v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  const char *v36;
  uint64_t v37;
  unint64_t v38;
  __int16 v39;
  _QWORD v40[4];
  __int16 v41;

  *a2 = 0;
  v6 = 1;
  if (((*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1[1] + 24))(a1[1]) & 1) != 0
    || (sub_1C60EB8F0((uint64_t)a1, 1u, a2, a3) & 1) != 0)
  {
    return v6;
  }
  if (*a1[6] == 45)
  {
    (*((void (**)(_DWORD **))*a1 + 23))(a1);
    if (*a1[6] == 2)
    {
      v7 = *(_QWORD *)((*((uint64_t (**)(_DWORD **))*a1 + 5))(a1) + 8);
      if (*(_DWORD *)v7 == 2)
      {
        v8 = *(char **)(v7 + 8);
        v9 = *(_QWORD *)(v7 + 16);
      }
      else
      {
        v12 = v7 + 8;
        v10 = *(char **)(v7 + 8);
        v11 = *(_QWORD *)(v12 + 8);
        v13 = v11 != 0;
        if (v11)
          v8 = v10 + 1;
        else
          v8 = v10;
        if (v13 <= v11 - 1)
          v14 = v11 - 1;
        else
          v14 = v11 != 0;
        if (v11 < v14)
          v14 = v11;
        v9 = v14 - v13;
      }
      if (llvm::MCSymbolRefExpr::getVariantKindForName(v8, v9) == 1)
      {
        v22 = *(_QWORD *)((*((uint64_t (**)(_DWORD **))*a1 + 5))(a1) + 8);
        if (*(_DWORD *)v22 == 2)
        {
          v23 = *(_QWORD *)(v22 + 8);
          v24 = *(_QWORD *)(v22 + 16);
        }
        else
        {
          v23 = *(_QWORD *)(v22 + 8);
          v28 = *(_QWORD *)(v22 + 16);
          v29 = v28 - 1;
          v30 = v28 != 0;
          if (v28)
            ++v23;
          if (v30 > v29)
            v29 = v28 != 0;
          if (v28 < v29)
            v29 = v28;
          v24 = v29 - v30;
        }
        v39 = 1283;
        v36 = "invalid variant '";
        v37 = v23;
        v38 = v24;
        v31 = "'";
      }
      else
      {
        v15 = sub_1C60EBA48((uint64_t)a1, *a2);
        if (v15)
        {
          *a2 = v15;
          (*((void (**)(_DWORD **))*a1 + 23))(a1);
          goto LABEL_19;
        }
        v25 = *(_QWORD *)((*((uint64_t (**)(_DWORD **))*a1 + 5))(a1) + 8);
        if (*(_DWORD *)v25 == 2)
        {
          v26 = *(_QWORD *)(v25 + 8);
          v27 = *(_QWORD *)(v25 + 16);
        }
        else
        {
          v26 = *(_QWORD *)(v25 + 8);
          v32 = *(_QWORD *)(v25 + 16);
          v33 = v32 - 1;
          v34 = v32 != 0;
          if (v32)
            ++v26;
          if (v34 > v33)
            v33 = v32 != 0;
          if (v32 < v33)
            v33 = v32;
          v27 = v33 - v34;
        }
        v39 = 1283;
        v36 = "invalid modifier '";
        v37 = v26;
        v38 = v27;
        v31 = "' (no symbols present)";
      }
      v40[0] = &v36;
      v40[2] = v31;
      v21 = 770;
    }
    else
    {
      v40[0] = "unexpected symbol modifier following '@'";
      v21 = 259;
    }
    v41 = v21;
    v35 = (*((uint64_t (**)(_DWORD **))*a1 + 5))(a1);
    llvm::MCAsmParser::Error((uint64_t)a1, *(_QWORD *)(v35 + 96), (uint64_t)v40, 0, 0);
    return v6;
  }
LABEL_19:
  v40[0] = 0;
  llvm::MCExpr::evaluateAsAbsolute(*a2, v40);
  if (v16)
  {
    v17 = v40[0];
    v18 = (*((uint64_t (**)(_DWORD **))*a1 + 6))(a1);
    v19 = sub_1C484358C(v18 + 192, 24, 3);
    *(_BYTE *)v19 = 1;
    *(_DWORD *)(v19 + 1) = *(unsigned __int8 *)(v19 + 4) << 24;
    *(_QWORD *)(v19 + 8) = 0;
    *(_QWORD *)(v19 + 16) = v17;
    *a2 = v19;
  }
  return 0;
}

uint64_t sub_1C60DB144(uint64_t a1, _QWORD *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t TempSymbol;
  uint64_t v15;
  unint64_t v16;
  int v17;
  size_t v18;
  unint64_t v19;
  char *v20;
  unsigned __int8 *p_p;
  size_t v22;
  uint64_t v23;
  int VariantKindForName;
  uint64_t v25;
  uint64_t v26;
  int v27;
  size_t v28;
  unsigned __int8 *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  _QWORD *v36;
  const char *v37;
  __int16 v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  int v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  int v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t v58;
  unint64_t v59;
  uint64_t v60;
  unint64_t v61;
  unsigned __int8 *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  unint64_t v78;
  unint64_t v79;
  int v80;
  unint64_t Symbol;
  uint64_t v82;
  uint64_t v83;
  int v84;
  unsigned __int8 *v85;
  int v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  const char *v90;
  uint64_t v91;
  __int16 v92;
  uint64_t v93;
  unint64_t DirectionalLocalSymbol;
  uint64_t v95;
  unint64_t v96;
  int v97;
  unint64_t v98;
  __int128 v99;
  uint64_t v100;
  const char **v101;
  unint64_t v102;
  uint64_t v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  unint64_t v108;
  BOOL v109;
  char *v110;
  uint64_t *v111;
  int v112;
  uint64_t v113;
  char *v114;
  _QWORD *v115;
  void *__p;
  unint64_t v117;
  char *v118;
  unint64_t v119;
  __int16 v120;
  unsigned __int8 *v121;
  unint64_t v122;
  const char *v123;
  __int128 v124;
  __int128 v125;
  uint64_t v126;
  unint64_t v127;
  uint64_t v128;

  v128 = *MEMORY[0x1E0C80C00];
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v9 = **(unsigned int **)(a1 + 48);
  v10 = *(_QWORD *)(v8 + 96);
  v11 = 1;
  switch((int)v9)
  {
    case 1:
      return v11;
    case 2:
    case 3:
    case 23:
    case 26:
    case 45:
      v121 = 0;
      v122 = 0;
      if ((*(unsigned int (**)(uint64_t, unsigned __int8 **))(*(_QWORD *)a1 + 192))(a1, &v121)
        && (**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8) == 26
         || **(_DWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8) == 23))
      {
        if (**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8) == 26
          && *(_BYTE *)(*(_QWORD *)(a1 + 232) + 32)
          || **(_DWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8) == 23
          && *(_BYTE *)(*(_QWORD *)(a1 + 232) + 34))
        {
          (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
          v13 = *(_QWORD *)(a1 + 216);
          v123 = "tmp";
          WORD4(v125) = 259;
          TempSymbol = llvm::MCContext::createTempSymbol(v13, (uint64_t)&v123, 1);
          (*(void (**)(_QWORD, unint64_t, _QWORD))(**(_QWORD **)(a1 + 224) + 192))(*(_QWORD *)(a1 + 224), TempSymbol, 0);
          v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
          v16 = sub_1C484358C(v15 + 192, 24, 3);
          v11 = 0;
          v17 = *(unsigned __int8 *)(*(_QWORD *)(v15 + 152) + 18) << 16;
          *(_BYTE *)v16 = 2;
          *(_DWORD *)(v16 + 1) = v17 | (*(unsigned __int8 *)(v16 + 4) << 24);
          *(_QWORD *)(v16 + 8) = 0;
          *(_QWORD *)(v16 + 16) = TempSymbol;
          *a2 = v16;
          *a3 = v10;
          return v11;
        }
        v123 = "invalid token in expression";
        WORD4(v125) = 259;
        v91 = a1;
        v89 = v10;
        return llvm::MCAsmParser::Error(v91, v89, (uint64_t)&v123, 0, 0);
      }
      v115 = a2;
      if (*(_BYTE *)(*(_QWORD *)(a1 + 232) + 429))
      {
        if (**(_DWORD **)(a1 + 48) != 17)
          goto LABEL_15;
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
        __p = 0;
        v117 = 0;
        (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 192))(a1, &__p);
        v123 = "expected ')'";
        WORD4(v125) = 259;
        if (llvm::MCAsmParser::parseToken((llvm::MCAsmParser *)a1, 18, (llvm::Twine *)&v123))
          return v11;
      }
      else
      {
        if ((_DWORD)v9 != 3)
        {
          LOBYTE(v123) = 64;
          v78 = llvm::StringRef::find((uint64_t *)&v121, (char *)&v123, 1uLL, 0);
          if (v78 == -1)
          {
            v19 = 0;
            v20 = 0;
            p_p = v121;
            v18 = v122;
          }
          else
          {
            p_p = v121;
            if (v122 >= v78)
              v18 = v78;
            else
              v18 = v122;
            if (v122 >= v78 + 1)
              v79 = v78 + 1;
            else
              v79 = v122;
            v20 = (char *)&v121[v79];
            v19 = v122 - v79;
          }
          goto LABEL_16;
        }
        if (**(_DWORD **)(a1 + 48) != 45)
        {
LABEL_15:
          v18 = 0;
          v19 = 0;
          v20 = 0;
          p_p = 0;
LABEL_16:
          v22 = v122;
          goto LABEL_17;
        }
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
        v41 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 96);
        __p = 0;
        v117 = 0;
        if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)a1 + 192))(a1, &__p))
        {
          v123 = "expected symbol variant after '@'";
          WORD4(v125) = 259;
          v91 = a1;
          v89 = v41;
          return llvm::MCAsmParser::Error(v91, v89, (uint64_t)&v123, 0, 0);
        }
      }
      p_p = v121;
      v22 = v122;
      v20 = (char *)__p;
      v19 = v117;
      v18 = v122;
LABEL_17:
      v23 = (uint64_t)v121;
      *a3 = (uint64_t)&v121[v22];
      if (!v22)
      {
        v89 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 96);
        v90 = "expected a symbol reference";
        goto LABEL_122;
      }
      if (!v19)
        goto LABEL_22;
      VariantKindForName = llvm::MCSymbolRefExpr::getVariantKindForName(v20, v19);
      if (VariantKindForName != 1)
        goto LABEL_23;
      v25 = *(_QWORD *)(a1 + 232);
      if (*(_BYTE *)(v25 + 180) && !*(_BYTE *)(v25 + 429))
      {
LABEL_22:
        VariantKindForName = 0;
        v18 = v22;
        p_p = (unsigned __int8 *)v23;
LABEL_23:
        v112 = VariantKindForName;
        v111 = a3;
        v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
        v113 = *(unsigned int *)(v26 + 1152);
        if (!(_DWORD)v113)
          goto LABEL_100;
        v27 = 0;
        if (v18)
        {
          v28 = v18;
          v29 = p_p;
          do
          {
            v30 = *v29++;
            v27 = 33 * v27 + v30;
            --v28;
          }
          while (v28);
        }
        v31 = *(_QWORD *)(v26 + 1144);
        v32 = *(unsigned int *)(v26 + 1164);
        v33 = 1;
        v34 = v27;
        while (1)
        {
          v35 = v34 & (v113 - 1);
          v36 = *(_QWORD **)(v31 + 8 * v35);
          if (v36 != (_QWORD *)-8)
          {
            if (!v36)
              goto LABEL_100;
            if (*(_DWORD *)(v31 + 8 * v113 + 8 + 4 * v35) == v27
              && v18 == *v36
              && (!v18 || !memcmp(p_p, (char *)v36 + v32, v18)))
            {
              break;
            }
          }
          v34 = v33 + v35;
          ++v33;
        }
        if ((_DWORD)v35 == -1
          || (int)v35 == v113
          || (Symbol = *(_QWORD *)(*(_QWORD *)(v31 + 8 * (int)v35) + 8)) == 0)
        {
LABEL_100:
          v82 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
          v83 = *(_QWORD *)(a1 + 232);
          v84 = *(unsigned __int8 *)(v83 + 80);
          if (*(_BYTE *)(v83 + 80))
          {
            sub_1C5E3DEA4(&__p, (char *)p_p, (uint64_t (*)(_QWORD))sub_1C6392230, (char *)&p_p[v18], (uint64_t)sub_1C6392230, v18);
            if (SHIBYTE(v118) >= 0)
              p_p = (unsigned __int8 *)&__p;
            else
              p_p = (unsigned __int8 *)__p;
            if (SHIBYTE(v118) >= 0)
              v18 = HIBYTE(v118) & 0x7F;
            else
              v18 = v117;
          }
          WORD4(v125) = 261;
          v123 = (const char *)p_p;
          *(_QWORD *)&v124 = v18;
          Symbol = llvm::MCContext::getOrCreateSymbol(v82, (uint64_t)&v123);
          if (v84 && SHIBYTE(v118) < 0)
            operator delete(__p);
        }
        if ((*(_DWORD *)(Symbol + 8) & 0x1C00) == 0x800)
        {
          v85 = *(unsigned __int8 **)(Symbol + 24);
          v86 = *v85;
          if (v86 == 4)
          {
            if (((*(uint64_t (**)(unsigned __int8 *))(*((_QWORD *)v85 - 1) + 48))(v85 - 8) & 1) != 0)
            {
              if (!v112)
              {
                v85 = *(unsigned __int8 **)(Symbol + 24);
LABEL_117:
                v11 = 0;
LABEL_119:
                *v115 = v85;
                return v11;
              }
              v89 = *v111;
              v90 = "unexpected modifier on variable reference";
LABEL_122:
              v123 = v90;
              WORD4(v125) = 259;
              v91 = a1;
              return llvm::MCAsmParser::Error(v91, v89, (uint64_t)&v123, 0, 0);
            }
          }
          else if (!v112 && v86 == 1)
          {
            goto LABEL_117;
          }
        }
        v87 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
        v85 = (unsigned __int8 *)sub_1C484358C(v87 + 192, 24, 3);
        v11 = 0;
        v88 = v112 | (*(unsigned __int8 *)(*(_QWORD *)(v87 + 152) + 18) << 16);
        *v85 = 2;
        *(_DWORD *)(v85 + 1) = v88 | (v85[4] << 24);
        *((_QWORD *)v85 + 1) = v10;
        *((_QWORD *)v85 + 2) = Symbol;
        goto LABEL_119;
      }
      v120 = 1283;
      __p = "invalid variant '";
      v118 = v20;
      v119 = v19;
      v123 = (const char *)&__p;
      *((_QWORD *)&v124 + 1) = "'";
      v92 = 770;
LABEL_127:
      WORD4(v125) = v92;
      v91 = a1;
      v89 = (uint64_t)v20;
      return llvm::MCAsmParser::Error(v91, v89, (uint64_t)&v123, 0, 0);
    case 4:
      v20 = *(char **)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8) + 8);
      v53 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8);
      v56 = *(uint64_t **)(v53 + 24);
      v54 = (uint64_t *)(v53 + 24);
      v55 = v56;
      if (*((_DWORD *)v54 + 2) >= 0x41u)
        v54 = v55;
      v57 = *v54;
      v58 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
      v59 = sub_1C484358C(v58 + 192, 24, 3);
      *(_BYTE *)v59 = 1;
      *(_DWORD *)(v59 + 1) = *(unsigned __int8 *)(v59 + 4) << 24;
      *(_QWORD *)(v59 + 8) = 0;
      *(_QWORD *)(v59 + 16) = v57;
      *a2 = v59;
      *a3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16);
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
      if (**(_DWORD **)(a1 + 48) != 2)
        return 0;
      v60 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8);
      v62 = *(unsigned __int8 **)(v60 + 8);
      v61 = *(_QWORD *)(v60 + 16);
      v121 = v62;
      v122 = v61;
      LOBYTE(v123) = 64;
      v63 = llvm::StringRef::find((uint64_t *)&v121, (char *)&v123, 1uLL, 0);
      if (v63 == -1
        || (v61 >= v63 + 1 ? (v64 = v63 + 1) : (v64 = v61), v61 >= v63 ? (v65 = v63) : (v65 = v61), v61 <= v63))
      {
        LODWORD(v11) = 0;
      }
      else
      {
        v114 = v20;
        v66 = v61 - v64;
        v67 = (char *)&v62[v64];
        v11 = llvm::MCSymbolRefExpr::getVariantKindForName((char *)&v62[v64], v61 - v64);
        if ((_DWORD)v11 == 1)
        {
          v120 = 1283;
          __p = "invalid variant '";
          v118 = v67;
          v119 = v66;
          v123 = (const char *)&__p;
          *((_QWORD *)&v124 + 1) = "'";
          v38 = 770;
          goto LABEL_37;
        }
        v61 = v65;
        v20 = v114;
      }
      if (v61 != 1)
        return 0;
      v80 = *v62;
      if ((v80 | 4) != 0x66)
        return 0;
      DirectionalLocalSymbol = llvm::MCContext::getDirectionalLocalSymbol(*(llvm::MCContext **)(a1 + 216), v57, v80 == 98);
      v95 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
      v96 = sub_1C484358C(v95 + 192, 24, 3);
      v97 = v11 | (*(unsigned __int8 *)(*(_QWORD *)(v95 + 152) + 18) << 16);
      *(_BYTE *)v96 = 2;
      *(_DWORD *)(v96 + 1) = v97 | (*(unsigned __int8 *)(v96 + 4) << 24);
      *(_QWORD *)(v96 + 8) = 0;
      *(_QWORD *)(v96 + 16) = DirectionalLocalSymbol;
      *a2 = v96;
      if (*v62 == 98)
      {
        v98 = *(_QWORD *)DirectionalLocalSymbol & 0xFFFFFFFFFFFFFFF8;
        if (!v98 && (*(_DWORD *)(DirectionalLocalSymbol + 8) & 0x1C00) == 0x800)
        {
          *(_DWORD *)(DirectionalLocalSymbol + 8) |= 4u;
          llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(DirectionalLocalSymbol + 24));
          *(_QWORD *)DirectionalLocalSymbol = *(_QWORD *)DirectionalLocalSymbol & 7 | v98;
        }
        if (!v98)
        {
          v123 = "directional label undefined";
          v92 = 259;
          goto LABEL_127;
        }
      }
      v123 = v20;
      v99 = *(_OWORD *)(a1 + 448);
      v124 = *(_OWORD *)(a1 + 432);
      v125 = v99;
      v126 = *(_QWORD *)(a1 + 464);
      v127 = DirectionalLocalSymbol;
      v100 = *(unsigned int *)(a1 + 496);
      v101 = &v123;
      v102 = *(_QWORD *)(a1 + 488);
      if (v100 >= *(_DWORD *)(a1 + 500))
      {
        v107 = a1 + 488;
        v108 = v100 + 1;
        v109 = v102 + 56 * v100 > (unint64_t)&v123;
        if (v102 <= (unint64_t)&v123 && v109)
        {
          v110 = (char *)&v123 - v102;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v107, a1 + 504, v108, 56);
          v102 = *(_QWORD *)(a1 + 488);
          v101 = (const char **)&v110[v102];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v107, a1 + 504, v108, 56);
          v102 = *(_QWORD *)(a1 + 488);
          v101 = &v123;
        }
      }
      v103 = v102 + 56 * *(unsigned int *)(a1 + 496);
      v104 = *(_OWORD *)v101;
      v105 = *((_OWORD *)v101 + 1);
      v106 = *((_OWORD *)v101 + 2);
      *(_QWORD *)(v103 + 48) = v101[6];
      *(_OWORD *)(v103 + 16) = v105;
      *(_OWORD *)(v103 + 32) = v106;
      *(_OWORD *)v103 = v104;
      ++*(_DWORD *)(a1 + 496);
      goto LABEL_51;
    case 5:
      v37 = "literal value out of range for directive";
      goto LABEL_36;
    case 6:
      v69 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
      llvm::APFloat::APFloat((uint64_t)&v123, &unk_1C866F198, *(unsigned __int8 **)(*(_QWORD *)(v69 + 8) + 8), *(_QWORD *)(*(_QWORD *)(v69 + 8) + 16));
      if ((_UNKNOWN *)v124 == &unk_1C866F1C0)
        llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)&v124, (unsigned int *)&__p);
      else
        llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)&v124, (unsigned int *)&__p);
      if (v117 >= 0x41)
        v70 = (uint64_t *)__p;
      else
        v70 = (uint64_t *)&__p;
      v71 = *v70;
      if (v117 >= 0x41 && __p)
        MEMORY[0x1CAA32F9C]();
      v72 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
      v73 = sub_1C484358C(v72 + 192, 24, 3);
      *(_BYTE *)v73 = 1;
      *(_DWORD *)(v73 + 1) = *(unsigned __int8 *)(v73 + 4) << 24;
      *(_QWORD *)(v73 + 8) = 0;
      *(_QWORD *)(v73 + 16) = v71;
      *a2 = v73;
      *a3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16);
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
      if ((_UNKNOWN *)v124 == &unk_1C866F1C0)
      {
        sub_1C4773C74((uint64_t *)&v124 + 1);
      }
      else if ((*(_DWORD *)(v124 + 8) - 64) <= 0xFFFFFF7F && *((_QWORD *)&v124 + 1))
      {
        MEMORY[0x1CAA32F9C](*((_QWORD *)&v124 + 1), 0x1000C8000313F17);
      }
      return 0;
    case 12:
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
      if (((*(uint64_t (**)(uint64_t, _QWORD *, uint64_t *, uint64_t))(*(_QWORD *)a1 + 240))(a1, a2, a3, a4) & 1) != 0)
        return v11;
      v44 = *a2;
      v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
      v46 = sub_1C484358C(v45 + 192, 24, 3);
      v11 = 0;
      *(_BYTE *)v46 = 3;
      v47 = (*(unsigned __int8 *)(v46 + 4) << 24) | 3;
      goto LABEL_84;
    case 13:
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
      if (((*(uint64_t (**)(uint64_t, _QWORD *, uint64_t *, uint64_t))(*(_QWORD *)a1 + 240))(a1, a2, a3, a4) & 1) != 0)
        return v11;
      v74 = *a2;
      v75 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
      v76 = sub_1C484358C(v75 + 192, 24, 3);
      *(_BYTE *)v76 = 3;
      *(_DWORD *)(v76 + 1) = (*(unsigned __int8 *)(v76 + 4) << 24) | 1;
      *(_QWORD *)(v76 + 8) = v10;
      *(_QWORD *)(v76 + 16) = v74;
      *a2 = v76;
      return 0;
    case 14:
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
      if (((*(uint64_t (**)(uint64_t, _QWORD *, uint64_t *, uint64_t))(*(_QWORD *)a1 + 240))(a1, a2, a3, a4) & 1) != 0)
        return v11;
      v44 = *a2;
      v77 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
      v46 = sub_1C484358C(v77 + 192, 24, 3);
      v11 = 0;
      *(_BYTE *)v46 = 3;
      v47 = (*(unsigned __int8 *)(v46 + 4) << 24) | 2;
      goto LABEL_84;
    case 17:
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
      return sub_1C60EBE58((llvm::MCAsmParser *)a1, (uint64_t)a2, a3);
    case 19:
      if (!*(_BYTE *)(*(_QWORD *)(a1 + 264) + 16))
      {
        v37 = "brackets expression not supported on this target";
        goto LABEL_36;
      }
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
      v123 = 0;
      if (((*(uint64_t (**)(uint64_t, _QWORD *, const char **))(*(_QWORD *)a1 + 232))(a1, a2, &v123) & 1) != 0)
        return v11;
      v42 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
      *a3 = *(_QWORD *)(*(_QWORD *)(v42 + 8) + 8) + *(_QWORD *)(*(_QWORD *)(v42 + 8) + 16);
      v123 = "expected ']' in brackets expression";
      WORD4(v125) = 259;
      return llvm::MCAsmParser::parseToken((llvm::MCAsmParser *)a1, 20, (llvm::Twine *)&v123);
    case 24:
      if (!*(_BYTE *)(*(_QWORD *)(a1 + 232) + 33))
      {
        v37 = "cannot use . as current PC";
        goto LABEL_36;
      }
      v48 = *(_QWORD *)(a1 + 216);
      v123 = "tmp";
      WORD4(v125) = 259;
      v49 = llvm::MCContext::createTempSymbol(v48, (uint64_t)&v123, 1);
      (*(void (**)(_QWORD, unint64_t, _QWORD))(**(_QWORD **)(a1 + 224) + 192))(*(_QWORD *)(a1 + 224), v49, 0);
      v50 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
      v51 = sub_1C484358C(v50 + 192, 24, 3);
      v52 = *(unsigned __int8 *)(*(_QWORD *)(v50 + 152) + 18) << 16;
      *(_BYTE *)v51 = 2;
      *(_DWORD *)(v51 + 1) = v52 | (*(unsigned __int8 *)(v51 + 4) << 24);
      *(_QWORD *)(v51 + 8) = 0;
      *(_QWORD *)(v51 + 16) = v49;
      *a2 = v51;
LABEL_51:
      *a3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16);
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
      return 0;
    case 34:
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
      if (((*(uint64_t (**)(uint64_t, _QWORD *, uint64_t *, uint64_t))(*(_QWORD *)a1 + 240))(a1, a2, a3, a4) & 1) != 0)
        return v11;
      v44 = *a2;
      v68 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
      v46 = sub_1C484358C(v68 + 192, 24, 3);
      v11 = 0;
      *(_BYTE *)v46 = 3;
      v47 = *(unsigned __int8 *)(v46 + 4) << 24;
LABEL_84:
      *(_DWORD *)(v46 + 1) = v47;
      *(_QWORD *)(v46 + 8) = v10;
      *(_QWORD *)(v46 + 16) = v44;
      *a2 = v46;
      return v11;
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
      if (**(_DWORD **)(a1 + 48) == 17)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
        if (((*(uint64_t (**)(uint64_t, _QWORD *, uint64_t *))(*(_QWORD *)a1 + 232))(a1, a2, a3) & 1) == 0)
        {
          v123 = "expected ')'";
          WORD4(v125) = 259;
          if (!llvm::MCAsmParser::parseToken((llvm::MCAsmParser *)a1, 18, (llvm::Twine *)&v123))
          {
            v40 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8), *a2, v9, *(_QWORD *)(a1 + 216));
            *a2 = v40;
            return v40 == 0;
          }
        }
      }
      else
      {
        v37 = "expected '(' after operator";
LABEL_36:
        v123 = v37;
        v38 = 259;
LABEL_37:
        WORD4(v125) = v38;
        v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
        llvm::MCAsmParser::Error(a1, *(_QWORD *)(v39 + 96), (uint64_t)&v123, 0, 0);
      }
      return v11;
    default:
      v123 = "unknown token in expression";
      WORD4(v125) = 259;
      v93 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
      llvm::MCAsmParser::Error(a1, *(_QWORD *)(v93 + 96), (uint64_t)&v123, 0, 0);
      return 1;
  }
}

uint64_t sub_1C60DC0E0(llvm::MCAsmParser *a1, unint64_t *a2, _QWORD *a3)
{
  *a2 = 0;
  if (sub_1C60EBE58(a1, (uint64_t)a2, a3))
    return 1;
  else
    return sub_1C60EB8F0((uint64_t)a1, 1u, a2, (uint64_t)a3);
}

uint64_t sub_1C60DC13C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  _QWORD v10[4];
  __int16 v11;
  uint64_t v12;

  v12 = 0;
  v4 = a1[17];
  v10[0] = 0;
  if (((*(uint64_t (**)(_QWORD *, uint64_t *, _QWORD *))(*a1 + 232))(a1, &v12, v10) & 1) != 0)
    return 1;
  v6 = v12;
  v7 = (*(uint64_t (**)(_QWORD *))(*a1 + 56))(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 72))(v7);
  llvm::MCExpr::evaluateAsAbsolute(v6, a2);
  v9 = v8;
  result = 0;
  if ((v9 & 1) == 0)
  {
    v10[0] = "expected absolute expression";
    v11 = 259;
    return llvm::MCAsmParser::Error((uint64_t)a1, v4, (uint64_t)v10, 0, 0);
  }
  return result;
}

uint64_t sub_1C60DC210(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  const char *v6;
  __int16 v7;

  if (*(_BYTE *)(a1 + 805))
    return 0;
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  v3 = *(unsigned int *)(v2 + 120);
  if ((_DWORD)v3)
  {
    if (*(_QWORD *)(*(_QWORD *)(v2 + 112) + 32 * v3 - 32))
      return 0;
  }
  (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 224) + 176))(*(_QWORD *)(a1 + 224), 0, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 240));
  v5 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8) + 8);
  v6 = "expected section directive before assembly directive";
  v7 = 259;
  return llvm::MCAsmParser::Error(a1, v5, (uint64_t)&v6, 0, 0);
}

uint64_t sub_1C60DC2C4(llvm::MCAsmParser *a1, int a2, unint64_t *a3, _QWORD *a4)
{
  _BOOL8 v8;
  uint64_t v9;
  const char *v11;
  __int16 v12;

  if (sub_1C60EBE58(a1, (uint64_t)a3, a4))
    return 1;
  if (!a2)
    return 0;
  v8 = 1;
  while ((sub_1C60EB8F0((uint64_t)a1, 1u, a3, (uint64_t)a4) & 1) == 0)
  {
    v8 = --a2 != 0;
    if (!a2)
      break;
    v9 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1);
    *a4 = *(_QWORD *)(*(_QWORD *)(v9 + 8) + 8) + *(_QWORD *)(*(_QWORD *)(v9 + 8) + 16);
    v11 = "expected ')'";
    v12 = 259;
    if (llvm::MCAsmParser::parseToken(a1, 18, (llvm::Twine *)&v11))
      break;
  }
  return v8;
}

uint64_t sub_1C60DC3BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  void **v20;
  unint64_t v21;
  _BYTE *Symbol;
  const char *v23;
  uint64_t *v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  char *v31;
  unint64_t v32;
  void *v33;
  void *__p[2];
  char v35;
  char *v36;
  unint64_t v37;
  __int16 v38;
  char *v39;
  unint64_t v40;
  char *v41;
  __int128 v42;
  uint64_t v43;
  void *v44;
  unsigned int v45;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v5 = *(_QWORD *)(a1 + 872);
  v6 = **(_DWORD **)(v5 + 8);
  if (v6 == 9)
  {
    if (*(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8) + 16)
      && **(_BYTE **)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8) + 8) != 13
      && **(_BYTE **)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8) + 8) != 10)
    {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  v7 = **(_DWORD **)(v4 + 8);
  while (v6 == 11)
  {
    sub_1C60E57B0(v5);
    v5 = *(_QWORD *)(a1 + 872);
    v6 = **(_DWORD **)(v5 + 8);
  }
  if (v6 == 9
    && (**(_BYTE **)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8) + 8) == 10
     || **(_BYTE **)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8) + 8) == 13))
  {
LABEL_12:
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 880) + 152))(*(_QWORD *)(a1 + 880));
LABEL_13:
    sub_1C60DA610(a1);
    return 0;
  }
  if (v7 != 11)
  {
    v10 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8);
    v11 = *(_OWORD *)v10;
    v43 = *(_QWORD *)(v10 + 16);
    v42 = v11;
    v12 = *(unsigned int *)(v10 + 32);
    v45 = v12;
    if (v12 > 0x40)
    {
      v13 = ((unint64_t)(v12 + 63) >> 3) & 0x3FFFFFF8;
      v44 = (void *)operator new[]();
      memcpy(v44, *(const void **)(v10 + 24), v13);
    }
    else
    {
      v44 = *(void **)(v10 + 24);
    }
    v14 = *((_QWORD *)&v42 + 1);
    v40 = 0;
    v41 = (char *)*((_QWORD *)&v42 + 1);
    v39 = 0;
    if (sub_1C60DA80C((_DWORD **)a1, &v39))
    {
      v23 = "The HLASM Label has to be an Identifier";
    }
    else
    {
      if (!(*(unsigned int (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 136))(*(_QWORD *)(a1 + 8), &v42)|| (sub_1C60DC210(a1) & 1) != 0)
      {
        v15 = 1;
        goto LABEL_42;
      }
      while (1)
      {
        v16 = *(_QWORD *)(a1 + 872);
        if (**(_DWORD **)(v16 + 8) != 11)
          break;
        sub_1C60E57B0(v16);
      }
      if (**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8) != 9)
      {
        v17 = *(_QWORD *)(a1 + 216);
        v18 = *(_QWORD *)(v17 + 152);
        v19 = *(unsigned __int8 *)(v18 + 80);
        if (*(_BYTE *)(v18 + 80))
        {
          sub_1C5E3DEA4(__p, v39, (uint64_t (*)(_QWORD))sub_1C6392230, &v39[v40], (uint64_t)sub_1C6392230, v40);
          v20 = (void **)__p[0];
          if (v35 >= 0)
            v20 = __p;
          v21 = v35 & 0x7F;
          if (v35 < 0)
            v21 = (unint64_t)__p[1];
        }
        else
        {
          v20 = (void **)v39;
          v21 = v40;
        }
        v38 = 261;
        v36 = (char *)v20;
        v37 = v21;
        Symbol = (_BYTE *)llvm::MCContext::getOrCreateSymbol(v17, (uint64_t)&v36);
        if (v19 && v35 < 0)
          operator delete(__p[0]);
        (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(a1 + 8) + 160))(*(_QWORD *)(a1 + 8), Symbol);
        (*(void (**)(_QWORD, _BYTE *, uint64_t))(**(_QWORD **)(a1 + 880) + 192))(*(_QWORD *)(a1 + 880), Symbol, v14);
        if (sub_1C60E584C((_QWORD *)a1))
          llvm::MCGenDwarfLabelEntry::Make(Symbol, *(_QWORD *)(a1 + 224), *(uint64_t **)(a1 + 240), &v41);
        (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(a1 + 8) + 168))(*(_QWORD *)(a1 + 8), Symbol);
        v15 = 0;
LABEL_42:
        if (v45 >= 0x41 && v44)
          MEMORY[0x1CAA32F9C](v44, 0x1000C8000313F17);
        if (v15)
        {
          sub_1C60DAE3C(a1);
          return 1;
        }
        goto LABEL_47;
      }
      v23 = "Cannot have just a label for an HLASM inline asm statement";
    }
    v36 = (char *)v23;
    v38 = 259;
    v15 = llvm::MCAsmParser::Error(a1, v14, (uint64_t)&v36, 0, 0);
    goto LABEL_42;
  }
LABEL_47:
  v24 = *(uint64_t **)(*(_QWORD *)(a1 + 872) + 8);
  v26 = *v24;
  v25 = (char *)v24[1];
  v27 = v24[2];
  v28 = *((unsigned int *)v24 + 8);
  if (v28 > 0x40)
  {
    v29 = (void *)operator new[]();
    memcpy(v29, (const void *)v24[3], ((unint64_t)(v28 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v29 = (void *)v24[3];
  }
  v36 = 0;
  v37 = 0;
  if ((sub_1C60DA80C((_DWORD **)a1, &v36) & 1) != 0)
  {
    *(_QWORD *)&v42 = "unexpected token at start of statement";
    LOWORD(v45) = 259;
    v8 = llvm::MCAsmParser::Error(a1, (uint64_t)v25, (uint64_t)&v42, 0, 0);
    if (v28 < 0x41)
      return v8;
    goto LABEL_59;
  }
  while (1)
  {
    v30 = *(_QWORD *)(a1 + 872);
    if (**(_DWORD **)(v30 + 8) != 11)
      break;
    sub_1C60E57B0(v30);
  }
  v31 = v36;
  v32 = v37;
  *(_QWORD *)&v42 = v26;
  *((_QWORD *)&v42 + 1) = v25;
  v43 = v27;
  v45 = v28;
  if (v28 > 0x40)
  {
    v33 = (void *)operator new[]();
    memcpy(v33, v29, ((unint64_t)(v28 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v33 = v29;
  }
  v44 = v33;
  v8 = sub_1C60E6C08(a1, a2, v31, v32, &v42, v25);
  if (v28 > 0x40)
  {
    if (v33)
      MEMORY[0x1CAA32F9C](v33, 0x1000C8000313F17);
LABEL_59:
    if (v29)
      MEMORY[0x1CAA32F9C](v29, 0x1000C8000313F17);
  }
  return v8;
}

void sub_1C60DC908(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *v4;
  llvm::raw_ostream *v5;
  char *v6;
  unsigned int BufferContainingLoc;
  int v8;
  BOOL v9;
  void (*v10)(uint64_t, _QWORD);
  size_t v11;
  const void *v12;
  void **p_dst;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  int LineAndColumn;
  int v18;
  void **v19;
  size_t v20;
  char v21;
  BOOL v22;
  void *v23;
  size_t v24;
  char v25;
  BOOL v26;
  void *v27;
  size_t v28;
  void (*v29)(uint64_t, _QWORD);
  _QWORD *v30;
  void **__dst;
  size_t v32;
  int64_t v33;
  _BYTE v34[16];
  void *v35;
  char v36;
  void *v37;
  char v38;
  void *v39;
  char v40;
  void *__p;
  void *v42;
  char *v43[23];

  v43[22] = *(char **)MEMORY[0x1E0C80C00];
  v4 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
  v5 = *(llvm::raw_ostream **)a1;
  v6 = *(char **)(a1 + 8);
  BufferContainingLoc = llvm::SourceMgr::FindBufferContainingLoc(*(uint64_t **)a1, (unint64_t)v6);
  v8 = llvm::SourceMgr::FindBufferContainingLoc(*(uint64_t **)(a2 + 240), *(_QWORD *)(a2 + 456));
  if (*(_QWORD *)(a2 + 248))
    v9 = 0;
  else
    v9 = BufferContainingLoc >= 2;
  if (v9)
    llvm::SourceMgr::PrintIncludeStack(v5, *(char **)(*(_QWORD *)v5 + 24 * (BufferContainingLoc - 1) + 16), v4);
  if (!*(_QWORD *)(a2 + 448) || BufferContainingLoc != v8)
  {
    v10 = *(void (**)(uint64_t, _QWORD))(a2 + 248);
    if (v10)
    {
      v10(a1, *(_QWORD *)(a2 + 256));
    }
    else
    {
      v14 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
      llvm::MCContext::diagnose(v14, a1);
    }
    return;
  }
  v11 = *(_QWORD *)(a2 + 440);
  if (v11 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v12 = *(const void **)(a2 + 432);
  if (v11 >= 0x17)
  {
    v15 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v15 = v11 | 7;
    v16 = v15 + 1;
    p_dst = (void **)operator new(v15 + 1);
    v32 = v11;
    v33 = v16 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v33) = *(_QWORD *)(a2 + 440);
    p_dst = (void **)&__dst;
    if (!v11)
      goto LABEL_19;
  }
  memmove(p_dst, v12, v11);
LABEL_19:
  *((_BYTE *)p_dst + v11) = 0;
  LineAndColumn = llvm::SourceMgr::getLineAndColumn((uint64_t *)v5, v6, BufferContainingLoc);
  v18 = ~llvm::SourceMgr::getLineAndColumn(*(uint64_t **)(a2 + 240), *(char **)(a2 + 456), BufferContainingLoc)+ LineAndColumn+ *(_DWORD *)(a2 + 448);
  if (v33 >= 0)
    v19 = (void **)&__dst;
  else
    v19 = __dst;
  if (v33 >= 0)
    v20 = HIBYTE(v33) & 0x7F;
  else
    v20 = v32;
  v21 = *(_BYTE *)(a1 + 79);
  v22 = v21 < 0;
  if (v21 >= 0)
    v23 = (void *)(a1 + 56);
  else
    v23 = *(void **)(a1 + 56);
  v24 = v21 & 0x7F;
  if (v22)
    v24 = *(_QWORD *)(a1 + 64);
  v25 = *(_BYTE *)(a1 + 103);
  v26 = v25 < 0;
  if (v25 >= 0)
    v27 = (void *)(a1 + 80);
  else
    v27 = *(void **)(a1 + 80);
  v28 = v25 & 0x7F;
  if (v26)
    v28 = *(_QWORD *)(a1 + 88);
  llvm::SMDiagnostic::SMDiagnostic((uint64_t)v34, *(_QWORD *)a1, *(_QWORD *)(a1 + 8), v19, v20, v18, *(_DWORD *)(a1 + 44), *(_DWORD *)(a1 + 48), v23, v24, v27, v28, *(const void **)(a1 + 104), (uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 3, 0, 0);
  v29 = *(void (**)(uint64_t, _QWORD))(a2 + 248);
  if (v29)
  {
    v29(a1, *(_QWORD *)(a2 + 256));
  }
  else
  {
    v30 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
    llvm::MCContext::diagnose(v30, (uint64_t)v34);
  }
  sub_1C4FAD100(v43);
  if (__p)
  {
    v42 = __p;
    operator delete(__p);
  }
  if (v40 < 0)
    operator delete(v39);
  if (v38 < 0)
    operator delete(v37);
  if (v36 < 0)
    operator delete(v35);
  if (SHIBYTE(v33) < 0)
    operator delete(__dst);
}

void sub_1C60DCC4C(uint64_t a1)
{
  sub_1C60E4AA4(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C60DCC70(_QWORD **a1, uint64_t a2, uint64_t a3)
{
  int8x8_t v3;
  char *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v12;
  size_t v13;
  uint64_t v14;
  int v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  std::string *v23;
  size_t size;
  uint64_t v25;
  int v26;
  size_t v27;
  std::string *v28;
  int v29;
  _QWORD *v30;
  int v31;
  int v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  _QWORD *v36;
  llvm::MCAsmParser *v37;
  std::string::size_type v38;
  _QWORD *v39;
  unint64_t v40;
  char *v41;
  _WORD *v42;
  int v43;
  size_t v44;
  uint64_t v45;
  unint64_t Symbol;
  _BYTE *v47;
  std::string::size_type v48;
  std::string::size_type v49;
  std::string::size_type v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  void (*v54)(uint64_t, _BYTE *);
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  char *v59;
  llvm::MCAsmParser *v60;
  int v61;
  uint64_t v62;
  size_t v63;
  uint64_t v64;
  uint64_t v65;
  const void *v66;
  int v67;
  size_t v68;
  unsigned __int8 *v69;
  int v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  int v75;
  uint64_t v76;
  _QWORD *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  llvm::MCAsmParser *v81;
  uint64_t v82;
  uint64_t v83;
  BOOL v84;
  char *v88;
  unint64_t v89;
  uint8x8_t v90;
  uint64_t v91;
  char *v92;
  int v93;
  __int16 v94;
  std::string::size_type v95;
  uint64_t v96;
  llvm::MCAsmParser *v97;
  char v98;
  uint64_t v99;
  int v100;
  uint64_t *v101;
  char v102;
  int v103;
  int v104;
  size_t v105;
  uint64_t v106;
  int v107;
  size_t v108;
  unsigned __int8 *v109;
  int v110;
  uint64_t v111;
  int v112;
  int v113;
  uint64_t v114;
  _QWORD *v115;
  uint64_t v118;
  char *v119;
  unint64_t v120;
  unsigned int v121;
  void *v122;
  size_t v123;
  void *v124;
  char *v125;
  uint64_t v126;
  _QWORD *v127;
  char *v128;
  char *v129;
  size_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  uint64_t v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  BOOL v141;
  const char *v142;
  uint64_t v143;
  size_t v144;
  uint64_t v145;
  std::string::size_type v146;
  uint64_t v147;
  const char *v148;
  std::string::size_type v149;
  uint64_t v150;
  uint64_t v151;
  llvm::MCAsmParser *v152;
  unsigned int v153;
  _QWORD *v154;
  _QWORD *v155;
  uint64_t v156;
  const char *v157;
  _QWORD *v158;
  const void *v159;
  size_t v160;
  char *v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  unint64_t v165;
  uint64_t *v166;
  _QWORD *v167;
  const char *v168;
  llvm::MCAsmParser *v170;
  uint64_t v171;
  uint64_t v172;
  unsigned int v173;
  llvm::MCAsmParser *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t (*v178)(void);
  const char *v179;
  llvm::MCAsmParser *v180;
  int v181;
  _QWORD *v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  unint64_t v186;
  char *v187;
  llvm::MCAsmParser *v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  _QWORD *v193;
  uint64_t v194;
  void (*v195)(void);
  llvm::CodeViewContext *v196;
  std::string *v197;
  size_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t v201;
  __int128 v202;
  uint64_t v203;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  char *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  const char *v216;
  char *v217;
  size_t v218;
  uint64_t v219;
  std::string *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  llvm::MCAsmParser *v224;
  int v225;
  llvm::MCAsmParser *v226;
  _BOOL4 v227;
  uint64_t v228;
  llvm::MCAsmParser *v229;
  uint64_t v230;
  uint64_t v231;
  int v232;
  std::string::size_type v233;
  const void *v234;
  uint64_t v235;
  void *v236;
  _BYTE *v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  std::string *v241;
  char *v242;
  uint64_t v243;
  std::string *v244;
  char *v245;
  int v247;
  uint64_t v248;
  std::string *v249;
  char *v250;
  const std::string::value_type *v251;
  std::string::size_type v252;
  uint64_t v253;
  const char *v254;
  uint64_t v255;
  int *v256;
  unint64_t v257;
  llvm::MCAsmParser *v258;
  uint64_t v259;
  int v260;
  uint64_t v261;
  void *v262;
  uint64_t v263;
  void *v264;
  uint64_t v265;
  char *v266;
  uint64_t v267;
  int v268;
  uint64_t v269;
  int v270;
  unint64_t v271;
  uint64_t v272;
  unint64_t v273;
  unint64_t v274;
  uint64_t v275;
  unint64_t v276;
  uint64_t v277;
  unint64_t v278;
  char *v279;
  int v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  char *v284;
  uint64_t v285;
  char v286;
  uint64_t v287;
  char *v288;
  uint64_t v289;
  uint64_t v290;
  char v291;
  uint64_t v292;
  uint64_t v293;
  llvm::MCAsmParser *v294;
  uint64_t v295;
  int v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  unsigned int v304;
  llvm::MCAsmParser *v305;
  unsigned int (*v306)(uint64_t);
  uint64_t v307;
  uint64_t v308;
  int v309;
  int v310;
  llvm::MCAsmParser *v311;
  uint64_t v312;
  unint64_t v313;
  uint64_t v314;
  unint64_t v315;
  uint64_t v316;
  uint64_t v317;
  char *v318;
  int v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  char *v326;
  uint64_t v327;
  uint64_t v328;
  char *v329;
  uint64_t v330;
  uint64_t v331;
  const char *v332;
  std::string::size_type v333;
  _BYTE *v334;
  char v335;
  uint64_t *v336;
  uint64_t v337;
  uint64_t v338;
  int v339;
  char *v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  std::string *v345;
  std::string::size_type v346;
  uint64_t v347;
  int v348;
  uint64_t v349;
  int *v350;
  unint64_t v351;
  uint64_t v352;
  unint64_t v353;
  unint64_t v354;
  unint64_t v355;
  int v356;
  int v357;
  BOOL v358;
  uint64_t v359;
  uint64_t *v360;
  unint64_t v361;
  unint64_t v362;
  unint64_t v363;
  unint64_t v364;
  uint64_t v365;
  int v366;
  BOOL v367;
  uint64_t v368;
  int *v369;
  unint64_t v370;
  unint64_t v371;
  unint64_t v372;
  unint64_t v373;
  int v374;
  int v375;
  int v377;
  uint64_t v378;
  int v379;
  __int16 v380;
  unint64_t v381;
  unint64_t v382;
  unint64_t v383;
  int v384;
  int v385;
  _BOOL4 v387;
  uint64_t v388;
  uint64_t *v389;
  unint64_t v390;
  uint64_t v391;
  uint64_t v392;
  size_t v393;
  const void *v394;
  int v395;
  size_t v396;
  unsigned __int8 *v397;
  int v398;
  uint64_t v399;
  uint64_t v400;
  int v401;
  int v402;
  uint64_t v403;
  _QWORD *v404;
  __int16 v405;
  uint64_t v406;
  void *v407;
  size_t v408;
  int v409;
  BOOL v411;
  BOOL v413;
  const char *v414;
  std::string::size_type v415;
  unint64_t v416;
  unint64_t v417;
  unint64_t v418;
  uint64_t v419;
  int v420;
  _BOOL4 v422;
  uint64_t v423;
  unsigned int *v424;
  unsigned int *v425;
  unsigned int *v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  BOOL v430;
  char v431;
  std::string::size_type v432;
  std::string::size_type v433;
  std::string *v434;
  size_t v435;
  BOOL v436;
  _BYTE *v437;
  const unsigned __int8 *v438;
  uint64_t v439;
  uint64_t v440;
  BOOL v441;
  char v442;
  std::string::size_type v443;
  std::string::size_type v444;
  std::string *v445;
  size_t v446;
  BOOL v447;
  _BYTE *v448;
  char *v449;
  int *v450;
  int v451;
  unint64_t v452;
  _BYTE *v453;
  uint64_t v454;
  void *v455;
  uint64_t v456;
  uint64_t v457;
  char v458;
  uint64_t v459;
  uint64_t v460;
  unint64_t *v461;
  unint64_t *v462;
  char *v463;
  uint64_t v464;
  llvm::MCAsmParser *v465;
  uint64_t v466;
  unint64_t v467;
  uint64_t v468;
  unint64_t v469;
  unint64_t v470;
  uint64_t v471;
  unint64_t v472;
  unint64_t v473;
  char *v474;
  unint64_t *v475;
  char *v476;
  unint64_t *v477;
  uint64_t v478;
  llvm::MCStreamer *v479;
  uint64_t CurrentDwarfFrameInfo;
  uint64_t v481;
  char *v482;
  int v483;
  uint64_t v484;
  uint64_t v485;
  std::string *v486;
  uint64_t v487;
  char v488;
  char v489;
  uint64_t v490;
  char *v491;
  int v492;
  uint64_t v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  __int16 v498;
  uint64_t v499;
  uint64_t v500;
  uint64_t v501;
  int *v502;
  uint64_t v503;
  int v504;
  char v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  _BOOL4 v510;
  char v511;
  std::string::size_type v512;
  std::string::size_type v513;
  std::string *v514;
  size_t v515;
  _BOOL4 v516;
  const char *v517;
  void *v518;
  unsigned int v519;
  size_t v520;
  _BYTE *v521;
  uint64_t v522;
  uint64_t v523;
  uint64_t v524;
  size_t *v525;
  size_t v526;
  char *v527;
  llvm::MCAsmParser *v528;
  uint64_t v529;
  std::string *v530;
  uint64_t v531;
  uint64_t v532;
  const char *v533;
  int v534;
  uint64_t v535;
  int v536;
  int v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  std::string *v541;
  std::string::size_type v542;
  BOOL v543;
  uint64_t v544;
  size_t v545;
  _BYTE *v546;
  uint64_t v547;
  int v548;
  uint64_t v549;
  int v550;
  unint64_t v551;
  uint64_t v552;
  uint64_t v553;
  int v554;
  uint64_t v556;
  _QWORD *v557;
  unint64_t v558;
  unint64_t v559;
  uint64_t v560;
  uint64_t **v561;
  BOOL isValidDwarfFileNumber;
  uint64_t v563;
  uint64_t *v564;
  uint64_t *v565;
  uint64_t *v566;
  uint64_t v567;
  void *v568;
  _BOOL8 v569;
  uint64_t v571;
  size_t v572;
  uint64_t v573;
  const void *v574;
  int v575;
  size_t v576;
  unsigned __int8 *v577;
  int v578;
  uint64_t v579;
  uint64_t v580;
  int v581;
  int v582;
  uint64_t v583;
  _QWORD *v584;
  const char *v585;
  uint64_t v586;
  std::string *v587;
  BOOL v589;
  uint64_t v591;
  std::string *v592;
  uint64_t v593;
  uint64_t v594;
  size_t *v595;
  size_t v596;
  size_t v597;
  unint64_t v598;
  std::string::size_type v599;
  std::string::size_type v600;
  char v601;
  int v602;
  std::string *v603;
  unint64_t v604;
  unint64_t v605;
  std::string *v606;
  std::string *v607;
  int v608;
  std::string *v609;
  unint64_t v610;
  std::string::value_type *v611;
  int v612;
  int v613;
  unsigned int v615;
  void *v616;
  void *v617;
  std::string *v618;
  size_t v619;
  std::string::size_type v620;
  uint64_t v621;
  _BYTE *v622;
  uint64_t v623;
  uint64_t v624;
  std::string *v625;
  std::string::size_type v626;
  _BYTE *v627;
  void *v628;
  size_t *v629;
  size_t v630;
  int8x8_t v631;
  char v632;
  char v633;
  uint64_t v634;
  char *v635;
  uint64x2_t v636;
  uint64x2_t v637;
  int16x8_t v638;
  __int8 v639;
  char v640;
  int v641;
  uint64_t v642;
  int v645;
  uint64_t v646;
  uint64_t v647;
  unint64_t v648;
  unint64_t v649;
  uint64_t v650;
  char *v651;
  size_t v652;
  uint64_t v653;
  unint64_t v654;
  unint64_t v655;
  unint64_t v656;
  uint64_t v657;
  int v658;
  uint64_t v659;
  size_t v660;
  int v661;
  uint64_t v662;
  unsigned __int8 *v663;
  int v664;
  uint64_t v665;
  int v666;
  int v667;
  uint64_t v668;
  _QWORD *v669;
  uint64_t v670;
  unsigned int v671;
  char *v672;
  char *v673;
  std::string *v674;
  size_t v675;
  char v676;
  uint64_t v677;
  char *v678;
  size_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t v683;
  char v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  uint64_t v688;
  unint64_t v689;
  unint64_t v690;
  unint64_t v691;
  unint64_t v692;
  _QWORD *v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  _BOOL4 v702;
  int v703;
  int v704;
  uint64_t v705;
  std::string::size_type v706;
  uint64_t v707;
  llvm::MCAsmParser *v708;
  uint64_t v709;
  unint64_t v710;
  uint64_t v711;
  unint64_t v712;
  uint64_t v713;
  size_t v714;
  uint64_t v715;
  BOOL v716;
  uint64_t v717;
  llvm::raw_ostream *v718;
  llvm::raw_ostream *v719;
  unint64_t v720;
  unint64_t v721;
  const void *v722;
  unint64_t v723;
  _BYTE *v724;
  uint64_t v725;
  unint64_t v726;
  unint64_t v727;
  unint64_t v728;
  uint64_t v729;
  unint64_t v730;
  unint64_t v731;
  unint64_t v732;
  unint64_t v733;
  uint64_t v734;
  unint64_t v735;
  _QWORD *v736;
  char *v737;
  char *v738;
  size_t v739;
  uint64_t v740;
  unint64_t v741;
  uint64_t v742;
  uint64_t v743;
  unint64_t v744;
  uint64_t v745;
  char *v746;
  size_t v747;
  uint64_t v748;
  uint64_t v749;
  std::string *v750;
  uint64_t v751;
  void *v752;
  char *v753;
  int v754;
  uint64_t v755;
  uint64_t v756;
  std::string::size_type v757;
  std::string::size_type v758;
  uint64_t v759;
  char v760;
  uint64_t v761;
  int v762;
  void (*v763)(void);
  int v764;
  std::string *v765;
  std::string::size_type v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t v769;
  char *v770;
  __int128 v771;
  uint64_t v772;
  std::string::size_type v773;
  uint64_t v774;
  uint64_t v775;
  int8x8_t v776;
  uint64_t v777;
  void *v778;
  size_t v779;
  uint64_t v780;
  uint64_t v781;
  size_t *v782;
  void *__p;
  void *__pa;
  _BYTE *__pb;
  void *__pc;
  unint64_t __pd;
  int v788;
  unsigned int v789[2];
  _WORD *v790;
  unsigned int v791;
  char *v792;
  unsigned int v793[2];
  const void *v794;
  llvm::MCAsmParser *v795;
  __int128 v796;
  uint64_t v797;
  void *v798;
  unsigned int v799;
  __int128 v800;
  uint64_t v801;
  void *v802;
  unsigned int v803;
  size_t __n[2];
  char *v805;
  __int128 v806;
  uint64_t v807;
  void *__src;
  unsigned int v809;
  size_t v810[2];
  _QWORD v811[5];
  char *v812;
  _BYTE v813[7];
  uint64_t v814;
  __int128 v815;
  const char *v816;
  __int16 v817;
  __int128 v818;
  char *v819;
  char *v820;
  __int128 v821;
  __int16 v822;
  std::string v823;
  __int16 v824;
  _BYTE v825[32];
  __int128 v826;
  unint64_t v827;
  uint64_t v828;
  std::string *v829;
  uint64_t v830;
  int v831;
  uint64_t v832;
  uint64_t v833;
  uint64_t v834;
  __int16 v835;
  int v836;
  uint64_t v837;
  uint64_t v838;
  _QWORD v839[2];
  __int128 v840;
  __int128 v841;
  __int128 v842;
  int v843;
  uint64_t v844;
  uint64_t v845;
  _QWORD v846[2];
  __int128 v847;
  __int128 v848;
  __int128 v849;
  __int128 v850;
  uint64_t v851;
  char v852[23];
  char v853[3];
  __int16 v854;
  int v855;
  uint64_t v856;
  uint64_t v857;
  uint64_t v858;
  uint64_t v859;
  __int16 v860;
  uint64_t v861;
  int8x8_t v862;
  uint64_t v863;
  _BYTE v864[32];
  __int128 *v865;
  uint64_t v866[2];
  unint64_t v867;
  size_t v868[2];
  std::string __dst[2];
  uint64_t v870;
  _QWORD v871[2];
  void *v872;
  char v873;
  char v874;
  uint64_t v875;
  uint64_t v876;
  uint64_t v877;
  void *v878;
  uint64_t v879;

  v879 = *MEMORY[0x1E0C80C00];
  v7 = (char *)(a1 + 6);
  while (1)
  {
    v8 = **(_DWORD **)v7;
    if (v8 != 11)
      break;
    ((void (*)(_QWORD **))(*a1)[23])(a1);
  }
  if (v8 == 9)
  {
    if (!*(_QWORD *)(*(_QWORD *)(((uint64_t (*)(_QWORD **))(*a1)[5])(a1) + 8) + 16)
      || **(_BYTE **)(*(_QWORD *)(((uint64_t (*)(_QWORD **))(*a1)[5])(a1) + 8) + 8) == 13
      || **(_BYTE **)(*(_QWORD *)(((uint64_t (*)(_QWORD **))(*a1)[5])(a1) + 8) + 8) == 10)
    {
      (*(void (**)(_QWORD *))(*a1[28] + 152))(a1[28]);
    }
    ((void (*)(_QWORD **))(*a1)[23])(a1);
    return 0;
  }
  v10 = *(_QWORD *)(((uint64_t (*)(_QWORD **))(*a1)[5])(a1) + 8);
  v11 = *(_OWORD *)v10;
  v807 = *(_QWORD *)(v10 + 16);
  v806 = v11;
  v12 = *(unsigned int *)(v10 + 32);
  v809 = v12;
  if (v12 > 0x40)
  {
    v13 = ((unint64_t)(v12 + 63) >> 3) & 0x3FFFFFF8;
    __src = (void *)operator new[]();
    memcpy(__src, *(const void **)(v10 + 24), v13);
  }
  else
  {
    __src = *(void **)(v10 + 24);
  }
  v14 = *((_QWORD *)&v806 + 1);
  v805 = (char *)*((_QWORD *)&v806 + 1);
  __n[0] = 0;
  __n[1] = 0;
  a1[34] = (_QWORD *)*((_QWORD *)&v806 + 1);
  v15 = *(_DWORD *)a1[6];
  switch(v15)
  {
    case 21:
      v777 = a3;
      v780 = a2;
      ((void (*)(_QWORD **))(*a1)[23])(a1);
      v16 = "{";
      goto LABEL_31;
    case 22:
      v777 = a3;
      v780 = a2;
      ((void (*)(_QWORD **))(*a1)[23])(a1);
      v16 = "}";
      goto LABEL_31;
    case 23:
      if (!(*(unsigned int (**)(_QWORD *))(*a1[1] + 144))(a1[1]))
        goto LABEL_26;
      v777 = a3;
      v780 = a2;
      ((void (*)(_QWORD **))(*a1)[23])(a1);
      v16 = "*";
LABEL_31:
      __n[0] = (size_t)v16;
      v774 = -1;
      v22 = 1;
      goto LABEL_32;
    case 24:
      v777 = a3;
      v780 = a2;
      ((void (*)(_QWORD **))(*a1)[23])(a1);
      v16 = ".";
      goto LABEL_31;
    default:
      if (v15 == 4)
      {
        v17 = *(_QWORD *)(((uint64_t (*)(_QWORD **))(*a1)[5])(a1) + 8);
        v20 = *(_QWORD *)(v17 + 24);
        v18 = v17 + 24;
        v19 = v20;
        if (*(_DWORD *)(v18 + 8) >= 0x41u)
          v18 = v19;
        v777 = a3;
        v780 = a2;
        v774 = *(_QWORD *)v18;
        if ((*(_QWORD *)v18 & 0x8000000000000000) != 0)
        {
          if (*((_BYTE *)a1 + 289))
          {
            v22 = 0;
            v16 = "";
            __n[0] = (size_t)"";
            goto LABEL_32;
          }
        }
        else
        {
          v21 = *(_QWORD *)(((uint64_t (*)(_QWORD **))(*a1)[5])(a1) + 8);
          v16 = *(char **)(v21 + 8);
          v22 = *(_QWORD *)(v21 + 16);
          __n[0] = (size_t)v16;
          __n[1] = v22;
          ((void (*)(_QWORD **))(*a1)[23])(a1);
          if (*(_DWORD *)a1[6] == 10 || *((_BYTE *)a1 + 289))
            goto LABEL_33;
        }
        ((void (*)(_QWORD **))(*a1)[23])(a1);
        __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"unexpected token at start of statement";
        LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 259;
        v126 = (uint64_t)a1;
        v125 = (char *)v14;
LABEL_286:
        v62 = llvm::MCAsmParser::Error(v126, (uint64_t)v125, (uint64_t)__dst, 0, 0);
        goto LABEL_287;
      }
      if (v15 == 8)
      {
        sub_1C60E4DB0((uint64_t)a1, v14, a1[44] == a1[45]);
        goto LABEL_156;
      }
LABEL_26:
      v777 = a3;
      v780 = a2;
      if ((((uint64_t (*)(_QWORD **, size_t *))(*a1)[24])(a1, __n) & 1) != 0)
      {
        if (*((_BYTE *)a1 + 289))
        {
          v22 = 0;
          v16 = "";
          __n[0] = (size_t)"";
          v774 = -1;
LABEL_32:
          __n[1] = v22;
          goto LABEL_33;
        }
        ((void (*)(_QWORD **))(*a1)[23])(a1);
        v125 = v805;
        __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"unexpected token at start of statement";
        LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 259;
        v126 = (uint64_t)a1;
        goto LABEL_286;
      }
      v774 = -1;
      v16 = (char *)__n[0];
      v22 = __n[1];
LABEL_33:
      sub_1C5E3DEA4(__dst, v16, (uint64_t (*)(_QWORD))sub_1C5E3C6A8, &v16[v22], (uint64_t)sub_1C5E3C6A8, v22);
      __p = (void *)__dst[0].__r_.__value_.__r.__words[0];
      if ((__dst[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v23 = __dst;
      else
        v23 = (std::string *)__dst[0].__r_.__value_.__r.__words[0];
      if ((__dst[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = *((_BYTE *)&__dst[0].__r_.__value_.__s + 23) & 0x7F;
      else
        size = __dst[0].__r_.__value_.__l.__size_;
      v25 = *((unsigned int *)a1 + 204);
      v795 = (llvm::MCAsmParser *)a1;
      v772 = (uint64_t)(a1 + 5);
      v788 = SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]);
      if ((_DWORD)v25)
      {
        v26 = 0;
        if (size)
        {
          v27 = size;
          v28 = v23;
          do
          {
            v29 = v28->__r_.__value_.__s.__data_[0];
            v28 = (std::string *)((char *)v28 + 1);
            v26 = 33 * v26 + v29;
            --v27;
          }
          while (v27);
        }
        v30 = a1[101];
        v31 = 1;
        v32 = v26;
        while (1)
        {
          v33 = v32 & (v25 - 1);
          v34 = (_QWORD *)v30[v33];
          if (v34 != (_QWORD *)-8)
          {
            if (!v34)
            {
              v35 = v25;
              goto LABEL_52;
            }
            if (*((_DWORD *)&v30[v25 + 1] + v33) == v26
              && size == *v34
              && (!size || !memcmp(v23, (char *)v34 + *((unsigned int *)v795 + 207), size)))
            {
              break;
            }
          }
          v32 = v31 + v33;
          ++v31;
        }
        v35 = (int)v33;
        if ((_DWORD)v33 == -1)
          v35 = v25;
      }
      else
      {
        v35 = 0;
        v30 = a1[101];
      }
LABEL_52:
      v36 = &v30[v35];
      v37 = v795;
      if (v788 < 0)
      {
        operator delete(__p);
        v30 = (_QWORD *)*((_QWORD *)v795 + 101);
        LODWORD(v25) = *((_DWORD *)v795 + 204);
      }
      if (v36 != &v30[v25])
      {
        v38 = *(unsigned int *)(*v36 + 8);
        switch((int)v38)
        {
          case 'R':
          case 'S':
          case 'T':
          case 'U':
          case 'V':
          case 'W':
          case 'X':
            v39 = (_QWORD *)((char *)v795 + 284);
            v41 = (char *)*((_QWORD *)v795 + 38);
            v40 = *((_QWORD *)v795 + 39);
            if ((unint64_t)v41 >= v40)
            {
              v7 = (char *)*((_QWORD *)v795 + 37);
              v55 = (v41 - v7) >> 3;
              v56 = v55 + 1;
              if ((unint64_t)(v55 + 1) >> 61)
                goto LABEL_1425;
              v57 = v40 - (_QWORD)v7;
              if (v57 >> 2 > v56)
                v56 = v57 >> 2;
              if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFF8)
                v58 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v58 = v56;
              if (v58)
              {
                if (v58 >> 61)
                  goto LABEL_1454;
                v59 = (char *)operator new(8 * v58);
              }
              else
              {
                v59 = 0;
              }
              v92 = &v59[8 * v55];
              *(_QWORD *)v92 = *v39;
              v42 = v92 + 8;
              if (v41 == v7)
              {
                v37 = v795;
              }
              else
              {
                v37 = v795;
                do
                {
                  v93 = *((_DWORD *)v41 - 2);
                  v41 -= 8;
                  v94 = *((_WORD *)v41 + 2);
                  *((_DWORD *)v92 - 2) = v93;
                  v92 -= 8;
                  *((_WORD *)v92 + 2) = v94;
                }
                while (v41 != v7);
                v41 = (char *)*((_QWORD *)v795 + 37);
              }
              *((_QWORD *)v37 + 37) = v92;
              *((_QWORD *)v37 + 38) = v42;
              *((_QWORD *)v37 + 39) = &v59[8 * v58];
              if (v41)
                operator delete(v41);
            }
            else
            {
              *(_QWORD *)v41 = *v39;
              v42 = v41 + 8;
            }
            *((_QWORD *)v37 + 38) = v42;
            *((_DWORD *)v37 + 71) = 1;
            if (*((_BYTE *)v37 + 289))
              goto LABEL_155;
            __dst[0].__r_.__value_.__r.__words[0] = 0;
            if (((*(uint64_t (**)(llvm::MCAsmParser *, std::string *))(*(_QWORD *)v37 + 256))(v37, __dst) & 1) == 0
              && !llvm::MCAsmParser::parseEOL(v37))
            {
              switch((int)v38)
              {
                case 'R':
                case 'X':
                  goto LABEL_256;
                case 'S':
                  v95 = __dst[0].__r_.__value_.__r.__words[0] == 0;
                  goto LABEL_255;
                case 'T':
                  v149 = ~__dst[0].__r_.__value_.__r.__words[0];
                  goto LABEL_253;
                case 'U':
                  v95 = (int64_t)__dst[0].__r_.__value_.__r.__words[0] > 0;
                  goto LABEL_255;
                case 'V':
                  v95 = (int64_t)__dst[0].__r_.__value_.__r.__words[0] < 1;
                  goto LABEL_255;
                case 'W':
                  v149 = __dst[0].__r_.__value_.__r.__words[0];
LABEL_253:
                  v95 = v149 >> 63;
LABEL_255:
                  __dst[0].__r_.__value_.__r.__words[0] = v95;
                  goto LABEL_256;
                default:
                  goto LABEL_59;
              }
            }
            break;
          case 'Y':
            v101 = (uint64_t *)v795;
            v102 = 1;
            goto LABEL_176;
          case 'Z':
            v101 = (uint64_t *)v795;
            v102 = 0;
LABEL_176:
            v62 = sub_1C60E4E8C(v101, v102);
            goto LABEL_287;
          case '[':
            v97 = v795;
            v98 = 1;
            goto LABEL_169;
          case '\\':
            v99 = (uint64_t)v795;
            v100 = 1;
            goto LABEL_174;
          case ']':
            v97 = v795;
            v98 = 0;
LABEL_169:
            v62 = sub_1C60E4FF8(v97, v98);
            goto LABEL_287;
          case '^':
            v99 = (uint64_t)v795;
            v100 = 0;
LABEL_174:
            v62 = sub_1C60E5264(v99, v100);
            goto LABEL_287;
          case '_':
            v60 = v795;
            v61 = 1;
            goto LABEL_172;
          case 'a':
            v60 = v795;
            v61 = 0;
LABEL_172:
            v62 = sub_1C60E552C(v60, v61);
            goto LABEL_287;
          case 'b':
            if ((*((_DWORD *)v795 + 71) - 1) >= 2)
            {
              v125 = v805;
              v142 = "Encountered a .elseif that doesn't follow an .if or  an .elseif";
              goto LABEL_244;
            }
            *((_DWORD *)v795 + 71) = 2;
            v96 = *((_QWORD *)v795 + 38);
            if (*((_QWORD *)v795 + 37) != v96 && *(_BYTE *)(v96 - 3) || *((_BYTE *)v795 + 288))
            {
              *((_BYTE *)v795 + 289) = 1;
              goto LABEL_155;
            }
            __dst[0].__r_.__value_.__r.__words[0] = 0;
            if (((*(uint64_t (**)(llvm::MCAsmParser *, std::string *))(*(_QWORD *)v795 + 256))(v795, __dst) & 1) != 0
              || llvm::MCAsmParser::parseEOL(v795))
            {
              goto LABEL_222;
            }
LABEL_256:
            v9 = 0;
            v141 = __dst[0].__r_.__value_.__r.__words[0] == 0;
            *((_BYTE *)v37 + 288) = __dst[0].__r_.__value_.__r.__words[0] != 0;
            goto LABEL_257;
          case 'c':
            v136 = v805;
            if (llvm::MCAsmParser::parseEOL(v795))
              goto LABEL_222;
            if ((*((_DWORD *)v795 + 71) - 1) >= 2)
            {
              v157 = "Encountered a .else that doesn't follow  an .if or an .elseif";
              goto LABEL_284;
            }
            *((_DWORD *)v795 + 71) = 3;
            v140 = *((_QWORD *)v795 + 38);
            if (*((_QWORD *)v795 + 37) != v140 && *(_BYTE *)(v140 - 3) || *((_BYTE *)v795 + 288))
            {
              v9 = 0;
              v141 = 1;
LABEL_257:
              *((_BYTE *)v37 + 289) = v141;
            }
            else
            {
              v9 = 0;
              *((_BYTE *)v795 + 289) = 0;
            }
            goto LABEL_288;
          case 'd':
            v136 = v805;
            if (llvm::MCAsmParser::parseEOL(v795))
              goto LABEL_222;
            if (*((_DWORD *)v795 + 71))
            {
              v137 = *((_QWORD *)v795 + 38);
              if (*((_QWORD *)v795 + 37) != v137)
              {
                v9 = 0;
                v139 = *(_DWORD *)(v137 - 8);
                v138 = v137 - 8;
                *((_WORD *)v795 + 144) = *(_WORD *)(v138 + 4);
                *((_DWORD *)v795 + 71) = v139;
                *((_QWORD *)v795 + 38) = v138;
                goto LABEL_288;
              }
            }
            v157 = "Encountered a .endif that doesn't follow an .if or .else";
LABEL_284:
            __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v157;
            LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 259;
            v126 = (uint64_t)v795;
            goto LABEL_285;
          default:
            goto LABEL_59;
        }
        goto LABEL_222;
      }
      v38 = 0;
LABEL_59:
      if (*((_BYTE *)v37 + 289))
      {
LABEL_155:
        (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v37 + 224))(v37);
        goto LABEL_156;
      }
      v43 = **(_DWORD **)v7;
      if (v43 == 27)
      {
        if ((*(unsigned int (**)(_QWORD))(**((_QWORD **)v37 + 1) + 128))(*((_QWORD *)v37 + 1)))
        {
          (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v37 + 184))(v37);
          v62 = sub_1C60E5A64(v37, (const char *)__n[0], __n[1], 2u);
LABEL_287:
          v9 = v62;
          goto LABEL_288;
        }
      }
      else if (v43 == 10
             && (*(unsigned int (**)(_QWORD, __int128 *))(**((_QWORD **)v37 + 1) + 136))(*((_QWORD *)v37 + 1), &v806))
      {
        if (((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v37 + 264))(v37) & 1) != 0)
          goto LABEL_222;
        (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v37 + 184))(v37);
        v44 = __n[1];
        if (__n[1] != 1 || *(_BYTE *)__n[0] != 46)
        {
          if (v774 == -1)
          {
            if (v777 && *((_BYTE *)v37 + 805))
            {
              v144 = __n[0];
              v145 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v37 + 32))(v37);
              __dst[0].__r_.__value_.__r.__words[0] = (*(uint64_t (**)(uint64_t, size_t, size_t, uint64_t, char *, uint64_t))(*(_QWORD *)v777 + 24))(v777, v144, v44, v145, v805, 1);
              __dst[0].__r_.__value_.__l.__size_ = v146;
              v147 = *(_QWORD *)(v780 + 88);
              LODWORD(v810[0]) = 7;
              *(_QWORD *)v825 = __n[1];
              sub_1C63E9A98(v147, (int *)v810, (uint64_t *)&v805, (uint64_t *)v825, (__int128 *)__dst);
              *(_OWORD *)__n = *(_OWORD *)&__dst[0].__r_.__value_.__l.__data_;
            }
            v45 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v37 + 48))(v37);
            LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 261;
            *(_OWORD *)&__dst[0].__r_.__value_.__l.__data_ = *(_OWORD *)__n;
            Symbol = llvm::MCContext::getOrCreateSymbol(v45, (uint64_t)__dst);
          }
          else
          {
            Symbol = llvm::MCContext::createDirectionalLocalSymbol(*((llvm::MCContext **)v37 + 27), v774);
          }
          v47 = (_BYTE *)Symbol;
          if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v37 + 40))(v37) + 8) == 37)
          {
            v48 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v37 + 200))(v37);
            v50 = v49;
            sub_1C60E57B0(v772);
            LODWORD(__dst[0].__r_.__value_.__l.__data_) = 9;
            __dst[0].__r_.__value_.__l.__size_ = v48;
            __dst[0].__r_.__value_.__r.__words[2] = v50;
            LODWORD(__dst[1].__r_.__value_.__r.__words[1]) = 64;
            __dst[1].__r_.__value_.__r.__words[0] = 0;
            *((_BYTE *)v37 + 147) = 0;
            sub_1C4CD9B2C((uint64_t)v7, *((_QWORD *)v37 + 6), (unint64_t)__dst);
            if (LODWORD(__dst[1].__r_.__value_.__r.__words[1]) >= 0x41)
            {
              if (__dst[1].__r_.__value_.__r.__words[0])
                MEMORY[0x1CAA32F9C](__dst[1].__r_.__value_.__r.__words[0], 0x1000C8000313F17);
            }
          }
          if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v37 + 40))(v37) + 8) == 9)
            (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v37 + 184))(v37);
          if (((*(uint64_t (**)(llvm::MCAsmParser *, size_t, size_t))(*(_QWORD *)v37 + 104))(v37, __n[0], __n[1]) & 1) == 0)
          {
            (*(void (**)(_QWORD, _BYTE *))(**((_QWORD **)v37 + 1) + 160))(*((_QWORD *)v37 + 1), v47);
            if (!*(_BYTE *)(*((_QWORD *)v37 + 1) + 64))
              (*(void (**)(_QWORD, _BYTE *, char *))(**((_QWORD **)v37 + 28) + 192))(*((_QWORD *)v37 + 28), v47, v805);
            if (sub_1C60E584C(v37))
            {
              v51 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v37 + 56))(v37);
              v52 = (uint64_t *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v37 + 32))(v37);
              llvm::MCGenDwarfLabelEntry::Make(v47, v51, v52, &v805);
            }
            v53 = *((_QWORD *)v37 + 1);
            v54 = *(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v53 + 168);
LABEL_83:
            v54(v53, v47);
          }
          goto LABEL_156;
        }
        v125 = v805;
        v142 = "invalid use of pseudo-symbol '.' as a label";
LABEL_244:
        __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v142;
        LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 259;
        v126 = (uint64_t)v37;
        goto LABEL_286;
      }
      if ((*((_BYTE *)v37 + 424) & 1) != 0)
      {
        v64 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v37 + 48))(v37);
        v63 = __n[1];
        v65 = *(unsigned int *)(v64 + 1976);
        if ((_DWORD)v65)
        {
          v66 = (const void *)__n[0];
          v67 = 0;
          if (__n[1])
          {
            v68 = __n[1];
            v69 = (unsigned __int8 *)__n[0];
            do
            {
              v70 = *v69++;
              v67 = 33 * v67 + v70;
              --v68;
            }
            while (v68);
          }
          v71 = v65 - 1;
          v72 = *(_QWORD *)(v64 + 1968);
          v73 = v72 + 8 * v65 + 8;
          __pa = (void *)*(unsigned int *)(v64 + 1976);
          *(_QWORD *)v789 = *(unsigned int *)(v64 + 1988);
          v74 = 1;
          v75 = v67;
          while (1)
          {
            v76 = v75 & v71;
            v77 = *(_QWORD **)(v72 + 8 * v76);
            if (v77 != (_QWORD *)-8)
            {
              if (!v77)
              {
                v37 = v795;
                goto LABEL_117;
              }
              if (*(_DWORD *)(v73 + 4 * v76) == v67
                && v63 == *v77
                && (!v63 || !memcmp(v66, (char *)v77 + *(_QWORD *)v789, v63)))
              {
                break;
              }
            }
            v75 = v74 + v76;
            ++v74;
          }
          v37 = v795;
          if ((_DWORD)v76 != -1 && (void *)(int)v76 != __pa)
          {
            if (dword_1ED838D28 != (uint64_t)(*((_QWORD *)v795 + 45) - *((_QWORD *)v795 + 44)) >> 3)
            {
              v127 = *(_QWORD **)(v72 + 8 * (int)v76);
              v128 = v805;
              memset(&v823, 0, sizeof(v823));
              v9 = 1;
              if ((sub_1C60E72B0(v795, v127 + 1, (uint64_t *)&v823) & 1) != 0)
                goto LABEL_232;
              __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst[1];
              *(_OWORD *)&__dst[0].__r_.__value_.__r.__words[1] = xmmword_1C64638F0;
              v129 = (char *)v127[3];
              v130 = v127[4];
              *(_DWORD *)&v825[8] = 0;
              BYTE8(v826) = 0;
              v827 = 0;
              *(_QWORD *)v825 = &off_1E81A7280;
              v829 = __dst;
              LODWORD(v828) = 0;
              *(_QWORD *)&v826 = 0;
              *(_OWORD *)&v825[16] = 0uLL;
              v131 = v127[5];
              v132 = 0xAAAAAAAAAAAAAAABLL * ((v127[6] - v131) >> 4);
              v133 = v823.__r_.__value_.__r.__words[0];
              v134 = 0xAAAAAAAAAAAAAAABLL
                   * ((uint64_t)(v823.__r_.__value_.__l.__size_ - v823.__r_.__value_.__r.__words[0]) >> 3);
              v135 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795);
              v9 = sub_1C60E7AE8((uint64_t)v795, (llvm::raw_ostream *)v825, v129, v130, v131, v132, v133, v134, 1, *(_QWORD *)(*(_QWORD *)(v135 + 8) + 8));
              if ((v9 & 1) != 0)
                goto LABEL_229;
              v158 = (_QWORD *)v826;
              if (*(_QWORD *)&v825[24] - (_QWORD)v826 > 9uLL)
              {
                *(_WORD *)(v826 + 8) = 2671;
                *v158 = *(_QWORD *)".endmacro\n";
                *(_QWORD *)&v826 = v826 + 10;
              }
              else
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)v825, ".endmacro\n", 0xAuLL);
              }
              v159 = (const void *)v829->__r_.__value_.__r.__words[0];
              v160 = v829->__r_.__value_.__l.__size_;
              v810[0] = (size_t)"<instantiation>";
              LOWORD(v811[2]) = 259;
              sub_1C5E1F4D0(v159, v160, (uint64_t)v810, (uint64_t)v864);
              if ((v864[16] & 1) != 0)
                v161 = 0;
              else
                v161 = *(char **)v864;
              v162 = operator new();
              *(_QWORD *)v162 = v128;
              *(_DWORD *)(v162 + 8) = *((_DWORD *)v795 + 70);
              v163 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795);
              v164 = (uint64_t)(*((_QWORD *)v795 + 38) - *((_QWORD *)v795 + 37)) >> 3;
              *(_QWORD *)(v162 + 16) = *(_QWORD *)(*(_QWORD *)(v163 + 8) + 8);
              *(_QWORD *)(v162 + 24) = v164;
              v166 = (uint64_t *)*((_QWORD *)v795 + 45);
              v165 = *((_QWORD *)v795 + 46);
              if ((unint64_t)v166 < v165)
              {
                *v166 = v162;
                v167 = v166 + 1;
LABEL_670:
                *((_QWORD *)v795 + 45) = v167;
                ++*((_DWORD *)v795 + 107);
                v338 = *((_QWORD *)v795 + 30);
                v819 = v161;
                v339 = sub_1C6175188(v338, (uint64_t *)&v819, 0);
                *((_DWORD *)v795 + 70) = v339;
                v340 = v819;
                v819 = 0;
                if (v340)
                {
                  (*(void (**)(char *))(*(_QWORD *)v340 + 8))(v340);
                  v339 = *((_DWORD *)v795 + 70);
                }
                v341 = *(_QWORD *)(**((_QWORD **)v795 + 30) + 24 * (v339 - 1));
                v342 = *(_QWORD *)(v341 + 8);
                v343 = *(_QWORD *)(v341 + 16) - v342;
                *((_QWORD *)v795 + 24) = v342;
                *((_QWORD *)v795 + 25) = v343;
                *((_QWORD *)v795 + 23) = v342;
                *((_QWORD *)v795 + 17) = 0;
                *((_BYTE *)v795 + 211) = 1;
                (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 184))(v795);
LABEL_229:
                *(_QWORD *)v825 = off_1E81A6E70;
                if ((_DWORD)v828 == 1 && *(_QWORD *)&v825[16])
                  MEMORY[0x1CAA32F9C](*(_QWORD *)&v825[16], 0x1000C8077774924);
                if ((std::string *)__dst[0].__r_.__value_.__l.__data_ != &__dst[1])
                  free(__dst[0].__r_.__value_.__l.__data_);
LABEL_232:
                __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&v823;
                sub_1C60E8D20((void ***)__dst);
                goto LABEL_288;
              }
              v182 = (_QWORD *)*((_QWORD *)v795 + 44);
              v183 = v166 - v182;
              v184 = v183 + 1;
              if ((unint64_t)(v183 + 1) >> 61)
                goto LABEL_1425;
              v185 = v165 - (_QWORD)v182;
              if (v185 >> 2 > v184)
                v184 = v185 >> 2;
              if ((unint64_t)v185 >= 0x7FFFFFFFFFFFFFF8)
                v186 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v186 = v184;
              if (!v186)
              {
                v187 = 0;
LABEL_665:
                v336 = (uint64_t *)&v187[8 * v183];
                *v336 = v162;
                v167 = v336 + 1;
                if (v166 != v182)
                {
                  do
                  {
                    v337 = *--v166;
                    *--v336 = v337;
                  }
                  while (v166 != v182);
                  v166 = (uint64_t *)*((_QWORD *)v795 + 44);
                }
                *((_QWORD *)v795 + 44) = v336;
                *((_QWORD *)v795 + 45) = v167;
                *((_QWORD *)v795 + 46) = &v187[8 * v186];
                if (v166)
                  operator delete(v166);
                goto LABEL_670;
              }
              if (!(v186 >> 61))
              {
                v187 = (char *)operator new(8 * v186);
                goto LABEL_665;
              }
LABEL_1454:
              sub_1C4764EE4();
            }
            sub_1C4D82D08((uint64_t)__dst);
            sub_1C4D7C62C(__dst, (uint64_t)"macros cannot be nested more than ", 34);
            v154 = (_QWORD *)std::ostream::operator<<();
            v155 = sub_1C4D7C62C(v154, (uint64_t)" levels deep.", 13);
            sub_1C4D7C62C(v155, (uint64_t)" Use -asm-macro-max-nesting-depth to increase this limit.", 57);
            std::stringbuf::str();
            LOWORD(v826) = 260;
            *(_QWORD *)v825 = v810;
            v156 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795);
            llvm::MCAsmParser::Error((uint64_t)v795, *(_QWORD *)(v156 + 96), (uint64_t)v825, 0, 0);
            if (SHIBYTE(v811[0]) < 0)
              operator delete((void *)v810[0]);
            __dst[0].__r_.__value_.__r.__words[0] = *MEMORY[0x1E0DE4F60];
            *(std::string::size_type *)((char *)__dst[0].__r_.__value_.__r.__words
                                      + *(_QWORD *)(__dst[0].__r_.__value_.__r.__words[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F60] + 24);
            __dst[0].__r_.__value_.__l.__size_ = MEMORY[0x1E0DE4FB8] + 16;
            if (v874 < 0)
              operator delete(v872);
            std::streambuf::~streambuf();
            std::ostream::~ostream();
            MEMORY[0x1CAA32F18](&v875);
LABEL_222:
            v9 = 1;
            goto LABEL_288;
          }
        }
      }
      else
      {
        v63 = __n[1];
      }
LABEL_117:
      if (v63 < 2 || *(_BYTE *)__n[0] != 46)
      {
        if (!*((_BYTE *)v37 + 805))
          goto LABEL_212;
        switch(v63)
        {
          case 4uLL:
            if (*(_DWORD *)__n[0] == 1852143205 || *(_DWORD *)__n[0] == 1313166917)
            {
              v143 = *(_QWORD *)(v780 + 88);
              LODWORD(__dst[0].__r_.__value_.__l.__data_) = 1;
              *(_DWORD *)v825 = 4;
              sub_1C63E9B1C(v143, (int *)__dst, (uint64_t *)&v805, (int *)v825);
            }
            break;
          case 6uLL:
            if (*(_DWORD *)__n[0] == 1835360095 && *(_WORD *)(__n[0] + 4) == 29801)
              goto LABEL_206;
            if (*(_DWORD *)__n[0] == 1296392031 && *(_WORD *)(__n[0] + 4) == 21577)
              goto LABEL_206;
            break;
          case 5uLL:
            v84 = *(_DWORD *)__n[0] == 1768777055 && *(_BYTE *)(__n[0] + 4) == 116;
            if (!v84 && (*(_DWORD *)__n[0] != 1229800799 || *(_BYTE *)(__n[0] + 4) != 84))
            {
              if ((*(_DWORD *)__n[0] != 1734962273 || *(_BYTE *)(__n[0] + 4) != 110)
                && (*(_DWORD *)__n[0] != 1195985985 || *(_BYTE *)(__n[0] + 4) != 78))
              {
                break;
              }
              *(_QWORD *)v825 = v805;
              v810[0] = 0;
              v88 = *(char **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v37 + 40))(v37) + 96);
              __dst[0].__r_.__value_.__r.__words[0] = 0;
              if (((*(uint64_t (**)(llvm::MCAsmParser *, size_t *, std::string *))(*(_QWORD *)v37 + 232))(v37, v810, __dst) & 1) != 0)goto LABEL_222;
              if (*(_BYTE *)v810[0] == 1)
              {
                v89 = *(_QWORD *)(v810[0] + 16);
                v90 = (uint8x8_t)vcnt_s8((int8x8_t)v89);
                v90.i16[0] = vaddlv_u8(v90);
                if (v90.u32[0] == 1)
                {
                  v91 = *(_QWORD *)(v780 + 88);
                  LODWORD(__dst[0].__r_.__value_.__l.__data_) = 0;
                  *(_DWORD *)v864 = 5;
                  LODWORD(v823.__r_.__value_.__l.__data_) = 63 - __clz(v89);
                  sub_1C63EA2F4(v91, (int *)__dst, (uint64_t *)v825, (int *)v864, (unsigned int *)&v823);
                  goto LABEL_156;
                }
                v168 = "literal value not a power of two greater then zero";
              }
              else
              {
                v168 = "unexpected expression in align";
              }
              __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v168;
              LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 259;
              v126 = (uint64_t)v795;
              goto LABEL_268;
            }
LABEL_206:
            *(_QWORD *)v825 = v805;
            v810[0] = v63;
            *(_QWORD *)v864 = 0;
            v88 = *(char **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v37 + 40))(v37) + 96);
            __dst[0].__r_.__value_.__r.__words[0] = 0;
            if (((*(uint64_t (**)(llvm::MCAsmParser *, _BYTE *, std::string *))(*(_QWORD *)v37 + 232))(v37, v864, __dst) & 1) != 0)goto LABEL_222;
            if (**(_BYTE **)v864 == 1)
            {
              if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v864 + 16) + 128) < 0x180)
              {
                v118 = *(_QWORD *)(v780 + 88);
                LODWORD(__dst[0].__r_.__value_.__l.__data_) = 2;
                sub_1C63EA1BC(v118, (int *)__dst, (uint64_t *)v825, (uint64_t *)v810);
                goto LABEL_156;
              }
              v148 = "literal value out of range for directive";
            }
            else
            {
              v148 = "unexpected expression in _emit";
            }
            __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v148;
            LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 259;
            v126 = (uint64_t)v37;
LABEL_268:
            v125 = v88;
            goto LABEL_286;
          default:
            break;
        }
LABEL_212:
        if (((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v37 + 264))(v37) & 1) == 0)
        {
          v119 = (char *)__n[0];
          v120 = __n[1];
          v796 = v806;
          v797 = v807;
          v121 = v809;
          v799 = v809;
          if (v809 > 0x40)
          {
            v123 = (((unint64_t)v809 + 63) >> 3) & 0x3FFFFFF8;
            v122 = (void *)operator new[]();
            memcpy(v122, __src, v123);
          }
          else
          {
            v122 = __src;
          }
          v798 = v122;
          v9 = sub_1C60E6C08((uint64_t)v795, v780, v119, v120, &v796, v805);
          if (v121 >= 0x41 && v122)
          {
            v124 = v122;
LABEL_219:
            MEMORY[0x1CAA32F9C](v124, 0x1000C8000313F17);
          }
          goto LABEL_288;
        }
        goto LABEL_222;
      }
      v78 = *((_QWORD *)v37 + 1);
      v79 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v37 + 56))(v37);
      (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v78 + 176))(v78, v79);
      v80 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v37 + 40))(v37);
      v81 = v37;
      v82 = *(_QWORD *)(*(_QWORD *)(v80 + 8) + 8);
      v83 = *((_QWORD *)v81 + 1);
      v801 = v807;
      v800 = v806;
      v803 = v809;
      if (v809 > 0x40)
      {
        v802 = (void *)operator new[]();
        memcpy(v802, __src, (((unint64_t)v803 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        v802 = __src;
      }
      v103 = (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)v83 + 64))(v83, &v800);
      if (v803 >= 0x41 && v802)
        MEMORY[0x1CAA32F9C](v802, 0x1000C8000313F17);
      v104 = *((_DWORD *)v795 + 6);
      v9 = v104 != 0;
      if (v104 || ((v103 ^ 1) & 1) != 0)
        goto LABEL_288;
      if (*(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795) + 8)
                     + 8) != v82)
        goto LABEL_222;
      if (*(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795) + 8)
                     + 8) != v82)
        goto LABEL_156;
      v105 = __n[1];
      v790 = (_WORD *)__n[0];
      v106 = *((unsigned int *)v795 + 82);
      if ((_DWORD)v106)
      {
        v107 = 0;
        if (__n[1])
        {
          v108 = __n[1];
          v109 = (unsigned __int8 *)__n[0];
          do
          {
            v110 = *v109++;
            v107 = 33 * v107 + v110;
            --v108;
          }
          while (v108);
        }
        v111 = *((_QWORD *)v795 + 40);
        v112 = 1;
        v113 = v107;
        while (1)
        {
          v114 = v113 & (v106 - 1);
          v115 = *(_QWORD **)(v111 + 8 * v114);
          if (v115 != (_QWORD *)-8)
          {
            if (!v115)
              goto LABEL_263;
            if (*(_DWORD *)(v111 + 8 * v106 + 8 + 4 * v114) == v107
              && v105 == *v115
              && (!v105 || !memcmp(v790, (char *)v115 + *((unsigned int *)v795 + 85), v105)))
            {
              break;
            }
          }
          v113 = v112 + v114;
          ++v112;
        }
        if ((_DWORD)v114 != -1 && (int)v114 != v106)
        {
          v150 = *(_QWORD *)(v111 + 8 * (int)v114);
          v151 = *(_QWORD *)(v150 + 8);
          if (v151)
          {
            v62 = (*(uint64_t (**)(uint64_t, _WORD *, size_t, char *))(v150 + 16))(v151, v790, v105, v805);
            goto LABEL_287;
          }
        }
      }
LABEL_263:
      switch((int)v38)
      {
        case 1:
        case 2:
          v152 = v795;
          v153 = 0;
          goto LABEL_506;
        case 3:
          v152 = v795;
          v153 = 1;
          goto LABEL_506;
        case 4:
          v825[0] = 0;
          goto LABEL_964;
        case 5:
        case 6:
          v825[0] = 1;
LABEL_964:
          v305 = v795;
          __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v795;
          __dst[0].__r_.__value_.__l.__size_ = (std::string::size_type)v825;
          v306 = (unsigned int (*)(uint64_t))sub_1C60E8D90;
          goto LABEL_978;
        case 7:
        case 20:
          v379 = 1;
          goto LABEL_808;
        case 8:
        case 10:
        case 11:
        case 18:
        case 24:
          v379 = 2;
          goto LABEL_808;
        case 9:
          v266 = v805;
          v810[0] = 0;
          *(_QWORD *)v864 = 0;
          v267 = *(_QWORD *)(*((_QWORD *)v795 + 6) + 8);
          __dst[0].__r_.__value_.__r.__words[0] = 0;
          if (((*(uint64_t (**)(llvm::MCAsmParser *, size_t *, std::string *))(*(_QWORD *)v795 + 232))(v795, v810, __dst) & 1) != 0)goto LABEL_222;
          __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"expected comma";
          LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 259;
          if (llvm::MCAsmParser::parseToken(v795, 25, (llvm::Twine *)__dst))
            goto LABEL_222;
          v268 = **(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795) + 8);
          __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"expected relocation name";
          LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 259;
          v269 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795);
          if (v268 != 2)
            goto LABEL_992;
          v270 = **(_DWORD **)v7;
          v272 = *(_QWORD *)(*(_QWORD *)v7 + 8);
          v271 = *(_QWORD *)(*(_QWORD *)v7 + 16);
          v273 = v271 - 1;
          v274 = v271 != 0;
          if (v271)
            v275 = v272 + 1;
          else
            v275 = *(_QWORD *)(*(_QWORD *)v7 + 8);
          if (v274 > v273)
            v273 = v271 != 0;
          if (v271 < v273)
            v273 = *(_QWORD *)(*(_QWORD *)v7 + 16);
          v276 = v273 - v274;
          if (v270 == 2)
            v277 = *(_QWORD *)(*(_QWORD *)v7 + 8);
          else
            v277 = v275;
          if (v270 == 2)
            v278 = v271;
          else
            v278 = v276;
          (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 184))(v795);
          if (**((_DWORD **)v795 + 6) != 25)
            goto LABEL_536;
          (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 184))(v795);
          v279 = (char *)*((_QWORD *)v795 + 17);
          __dst[0].__r_.__value_.__r.__words[0] = 0;
          if (((*(uint64_t (**)(llvm::MCAsmParser *, _BYTE *, std::string *))(*(_QWORD *)v795 + 232))(v795, v864, __dst) & 1) != 0)goto LABEL_222;
          memset(v825, 0, 28);
          llvm::MCExpr::evaluateAsRelocatableImpl(*(uint64_t *)v864);
          if (!v280)
          {
            __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"expression must be relocatable";
            LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 259;
            v126 = (uint64_t)v795;
            v125 = v279;
            goto LABEL_286;
          }
LABEL_536:
          if (llvm::MCAsmParser::parseEOL(v795))
            goto LABEL_222;
          v281 = *(_QWORD *)(*((_QWORD *)v795 + 1) + 240);
          v282 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 56))(v795);
          (*(void (**)(std::string *__return_ptr, uint64_t, size_t, uint64_t, unint64_t, _QWORD, char *, uint64_t))(*(_QWORD *)v282 + 1160))(__dst, v282, v810[0], v277, v278, *(_QWORD *)v864, v266, v281);
          if (!__dst[1].__r_.__value_.__s.__data_[8])
            goto LABEL_156;
          if (__dst[0].__r_.__value_.__s.__data_[0])
            v283 = v272;
          else
            v283 = v267;
          LOWORD(v826) = 260;
          *(_QWORD *)v825 = &__dst[0].__r_.__value_.__l.__size_;
          v9 = llvm::MCAsmParser::Error((uint64_t)v795, v283, (uint64_t)v825, 0, 0);
          if (__dst[1].__r_.__value_.__s.__data_[8] && __dst[1].__r_.__value_.__s.__data_[7] < 0)
          {
            v262 = (void *)__dst[0].__r_.__value_.__l.__size_;
            goto LABEL_691;
          }
          goto LABEL_288;
        case 12:
        case 13:
        case 14:
        case 22:
          v379 = 4;
          goto LABEL_808;
        case 15:
        case 16:
          v379 = 8;
LABEL_808:
          *(_DWORD *)v825 = v379;
          v305 = v795;
          __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v795;
          __dst[0].__r_.__value_.__l.__size_ = (std::string::size_type)v825;
          v306 = (unsigned int (*)(uint64_t))sub_1C60E8EB0;
          goto LABEL_978;
        case 17:
          v305 = v795;
          __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v795;
          v306 = (unsigned int (*)(uint64_t))sub_1C60E9010;
          goto LABEL_978;
        case 19:
          *(_DWORD *)v825 = *(_DWORD *)(*(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 48))(v795)
                                                  + 152)
                                      + 8);
          __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v795;
          __dst[0].__r_.__value_.__l.__size_ = (std::string::size_type)v825;
          v306 = (unsigned int (*)(uint64_t))sub_1C60E8EB0;
          v305 = v795;
          goto LABEL_978;
        case 21:
        case 43:
          v407 = &unk_1C866F198;
          goto LABEL_806;
        case 23:
        case 41:
        case 42:
          v407 = &unk_1C866F184;
LABEL_806:
          v305 = v795;
          __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v795;
          __dst[0].__r_.__value_.__l.__size_ = (std::string::size_type)v407;
          v306 = (unsigned int (*)(uint64_t))sub_1C60E93F0;
          goto LABEL_978;
        case 25:
        case 32:
        case 77:
        case 78:
          __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v790;
          __dst[0].__r_.__value_.__l.__size_ = v105;
          __dst[0].__r_.__value_.__r.__words[2] = (std::string::size_type)" not currently supported for this target";
          v380 = 773;
          goto LABEL_1050;
        case 26:
        case 31:
          v175 = (uint64_t)v790;
          v174 = v795;
          v176 = v105;
          v177 = 2;
          goto LABEL_511;
        case 27:
          v175 = (uint64_t)v790;
          v174 = v795;
          v176 = v105;
          v177 = 1;
          goto LABEL_511;
        case 28:
          v264 = &unk_1C866F198;
          goto LABEL_516;
        case 29:
          v175 = (uint64_t)v790;
          v174 = v795;
          v176 = v105;
          v177 = 4;
LABEL_511:
          v62 = sub_1C60E670C(v174, v175, v176, v177);
          goto LABEL_287;
        case 30:
          v264 = &unk_1C866F184;
LABEL_516:
          v62 = sub_1C60E6938(v795, (uint64_t)v790, v105, v264);
          goto LABEL_287;
        case 33:
        case 39:
          v171 = (uint64_t)v790;
          v170 = v795;
          v172 = v105;
          v173 = 2;
          goto LABEL_545;
        case 34:
          v171 = (uint64_t)v790;
          v170 = v795;
          v172 = v105;
          v173 = 1;
          goto LABEL_545;
        case 35:
          v171 = (uint64_t)v790;
          v170 = v795;
          v172 = v105;
          v173 = 8;
          goto LABEL_545;
        case 36:
        case 38:
          v171 = (uint64_t)v790;
          v170 = v795;
          v172 = v105;
          v173 = 4;
          goto LABEL_545;
        case 37:
        case 40:
          v171 = (uint64_t)v790;
          v170 = v795;
          v172 = v105;
          v173 = 12;
LABEL_545:
          v62 = sub_1C60E6AF0(v170, v171, v172, v173);
          goto LABEL_287;
        case 44:
          v227 = *(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 48))(v795)
                                      + 152)
                          + 339) == 0;
          v226 = v795;
          goto LABEL_502;
        case 45:
          v227 = *(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 48))(v795)
                                      + 152)
                          + 339) == 0;
          v226 = v795;
          goto LABEL_553;
        case 46:
          v226 = v795;
          v227 = 0;
          goto LABEL_502;
        case 47:
          v226 = v795;
          v227 = 0;
          goto LABEL_508;
        case 48:
          v226 = v795;
          v227 = 0;
          goto LABEL_553;
        case 49:
          v226 = v795;
          v227 = 1;
LABEL_502:
          v263 = 1;
          goto LABEL_554;
        case 50:
          v226 = v795;
          v227 = 1;
LABEL_508:
          v263 = 2;
          goto LABEL_554;
        case 51:
          v226 = v795;
          v227 = 1;
LABEL_553:
          v263 = 4;
LABEL_554:
          v62 = sub_1C60E5C90(v226, v227, v263);
          goto LABEL_287;
        case 52:
          v301 = *((_QWORD *)v795 + 17);
          if (((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 264))(v795) & 1) != 0)
            goto LABEL_222;
          *(_QWORD *)v825 = 0;
          __dst[0].__r_.__value_.__r.__words[0] = 0;
          if (((*(uint64_t (**)(llvm::MCAsmParser *, _BYTE *, std::string *))(*(_QWORD *)v795 + 232))(v795, v825, __dst) & 1) != 0)goto LABEL_222;
          __dst[0].__r_.__value_.__r.__words[0] = 0;
          if (llvm::MCAsmParser::parseOptionalToken(v795, 25)
            && ((*(uint64_t (**)(llvm::MCAsmParser *, std::string *))(*(_QWORD *)v795 + 256))(v795, __dst) & 1) != 0)
          {
            goto LABEL_222;
          }
          if (llvm::MCAsmParser::parseEOL(v795))
            goto LABEL_222;
          v302 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 56))(v795);
          (*(void (**)(uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v302 + 648))(v302, *(_QWORD *)v825, __dst[0].__r_.__value_.__s.__data_[0], v301);
          goto LABEL_156;
        case 53:
          v221 = *((_QWORD *)v795 + 17);
          if (((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 264))(v795) & 1) != 0)
            goto LABEL_222;
          *(_QWORD *)v825 = 0;
          __dst[0].__r_.__value_.__r.__words[0] = 0;
          if (((*(uint64_t (**)(llvm::MCAsmParser *, _BYTE *, std::string *))(*(_QWORD *)v795 + 232))(v795, v825, __dst) & 1) != 0)goto LABEL_222;
          v810[0] = 1;
          *(_QWORD *)v864 = 0;
          if (llvm::MCAsmParser::parseOptionalToken(v795, 25))
          {
            v222 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795)
                                         + 8)
                             + 8);
            if (((*(uint64_t (**)(llvm::MCAsmParser *, size_t *))(*(_QWORD *)v795 + 256))(v795, v810) & 1) != 0)
              goto LABEL_222;
            if (llvm::MCAsmParser::parseOptionalToken(v795, 25))
            {
              v223 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795)
                                           + 8)
                               + 8);
              if (((*(uint64_t (**)(llvm::MCAsmParser *, _BYTE *))(*(_QWORD *)v795 + 256))(v795, v864) & 1) != 0)
                goto LABEL_222;
            }
            else
            {
              v223 = 0;
            }
          }
          else
          {
            v223 = 0;
            v222 = 0;
          }
          if (llvm::MCAsmParser::parseEOL(v795))
            goto LABEL_222;
          v714 = v810[0];
          if ((v810[0] & 0x8000000000000000) != 0)
          {
            __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"'.fill' directive with negative size has no effect";
            LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 259;
            (*(void (**)(llvm::MCAsmParser *, uint64_t, std::string *, _QWORD, _QWORD))(*(_QWORD *)v795 + 168))(v795, v222, __dst, 0, 0);
          }
          else
          {
            if (v810[0] >= 9)
            {
              __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"'.fill' directive with size greater than 8"
                                                                              " has been truncated to 8";
              LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 259;
              (*(void (**)(llvm::MCAsmParser *, uint64_t, std::string *, _QWORD, _QWORD))(*(_QWORD *)v795
                                                                                                  + 168))(v795, v222, __dst, 0, 0);
              v714 = 8;
              v810[0] = 8;
            }
            if (v714 >= 5 && *(_DWORD *)&v864[4])
            {
              __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"'.fill' directive pattern has been truncated to 32-bits";
              LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 259;
              (*(void (**)(llvm::MCAsmParser *, uint64_t, std::string *, _QWORD, _QWORD))(*(_QWORD *)v795
                                                                                                  + 168))(v795, v223, __dst, 0, 0);
            }
            v715 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 56))(v795);
            (*(void (**)(uint64_t, _QWORD, size_t, _QWORD, uint64_t))(*(_QWORD *)v715 + 616))(v715, *(_QWORD *)v825, v810[0], *(_QWORD *)v864, v221);
          }
          goto LABEL_156;
        case 54:
          if (*((_QWORD *)v795 + 44) != *((_QWORD *)v795 + 45))
            goto LABEL_421;
          v216 = "unmatched '.endr' directive";
          goto LABEL_1049;
        case 55:
          v287 = *(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795) + 96);
          if (((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 264))(v795) & 1) != 0)
            goto LABEL_222;
          *(_QWORD *)v825 = 0;
          if (((*(uint64_t (**)(llvm::MCAsmParser *, _BYTE *))(*(_QWORD *)v795 + 256))(v795, v825) & 1) != 0
            || llvm::MCAsmParser::parseEOL(v795))
          {
            goto LABEL_222;
          }
          __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"invalid bundle alignment size (expected between 0 and 30)";
          LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 259;
          if (*(_QWORD *)v825 >= 0x1FuLL)
            goto LABEL_1443;
          v195 = *(void (**)(void))(*(_QWORD *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 56))(v795)
                                  + 1200);
          goto LABEL_574;
        case 56:
          if (((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 264))(v795) & 1) != 0)
            goto LABEL_222;
          v810[0] = 0;
          v810[1] = 0;
          v287 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795)
                                       + 8)
                           + 8);
          if (llvm::MCAsmParser::parseOptionalToken(v795, 9))
            goto LABEL_557;
          v704 = (*(uint64_t (**)(llvm::MCAsmParser *, size_t *))(*(_QWORD *)v795 + 192))(v795, v810);
          __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"invalid option for '.bundle_lock' directive";
          LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 259;
          if (!v704)
          {
            if (v810[1] == 12)
            {
              v716 = *(_QWORD *)v810[0] == 0x6F745F6E67696C61 && *(_DWORD *)(v810[0] + 8) == 1684956511;
              *(_QWORD *)v825 = "invalid option for '.bundle_lock' directive";
              LOWORD(v826) = 259;
              if (v716)
              {
                if (!llvm::MCAsmParser::parseEOL(v795))
                {
LABEL_557:
                  v195 = *(void (**)(void))(*(_QWORD *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 56))(v795)
                                          + 1208);
                  goto LABEL_574;
                }
                goto LABEL_222;
              }
            }
            else
            {
              *(_QWORD *)v825 = "invalid option for '.bundle_lock' directive";
              LOWORD(v826) = 259;
            }
LABEL_608:
            v220 = (std::string *)v825;
            goto LABEL_1310;
          }
LABEL_1443:
          v220 = __dst;
LABEL_1310:
          v459 = (uint64_t)v795;
          v460 = v287;
          goto LABEL_1052;
        case 57:
          if (((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 264))(v795) & 1) != 0
            || llvm::MCAsmParser::parseEOL(v795))
          {
            goto LABEL_222;
          }
          v299 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 56))(v795);
          (*(void (**)(uint64_t))(*(_QWORD *)v299 + 1216))(v299);
          goto LABEL_156;
        case 58:
          if (((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 264))(v795) & 1) != 0)
            goto LABEL_222;
          *(_QWORD *)v825 = 0;
          __dst[0].__r_.__value_.__r.__words[0] = 0;
          if (((*(uint64_t (**)(llvm::MCAsmParser *, _BYTE *, std::string *))(*(_QWORD *)v795 + 232))(v795, v825, __dst) & 1) != 0)goto LABEL_222;
          __dst[0].__r_.__value_.__r.__words[0] = 0;
          if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795) + 8) != 25)
            goto LABEL_572;
          (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 184))(v795);
          v178 = *(uint64_t (**)(void))(*(_QWORD *)v795 + 256);
          goto LABEL_571;
        case 59:
          goto LABEL_649;
        case 60:
        case 61:
          v409 = 9;
          goto LABEL_977;
        case 62:
          v409 = 15;
          goto LABEL_977;
        case 63:
          v409 = 17;
          goto LABEL_977;
        case 64:
          v409 = 18;
          goto LABEL_977;
        case 65:
          v409 = 20;
          goto LABEL_977;
        case 66:
          v409 = 22;
          goto LABEL_977;
        case 67:
          v409 = 24;
          goto LABEL_977;
        case 68:
          v409 = 25;
          goto LABEL_977;
        case 69:
          v409 = 26;
          goto LABEL_977;
        case 70:
          v409 = 1;
LABEL_977:
          *(_DWORD *)v825 = v409;
          v305 = v795;
          __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v795;
          __dst[0].__r_.__value_.__l.__size_ = (std::string::size_type)v825;
          v306 = (unsigned int (*)(uint64_t))sub_1C60E9900;
          goto LABEL_978;
        case 71:
        case 72:
          v180 = v795;
          v181 = 0;
          goto LABEL_566;
        case 73:
          v180 = v795;
          v181 = 1;
LABEL_566:
          v62 = sub_1C60E6090(v180, v181);
          goto LABEL_287;
        case 74:
          v136 = *(char **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795) + 96);
          v495 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 200))(v795);
          v497 = v496;
          if (llvm::MCAsmParser::parseEOL(v795))
            goto LABEL_222;
          if (!v497)
          {
            v254 = ".abort detected. Assembly stopping.";
            goto LABEL_983;
          }
          LOWORD(v826) = 1283;
          *(_QWORD *)v825 = ".abort '";
          *(_QWORD *)&v825[16] = v495;
          *(_QWORD *)&v825[24] = v497;
          __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v825;
          __dst[0].__r_.__value_.__r.__words[2] = (std::string::size_type)"' detected. Assembly stopping.";
          v498 = 770;
          goto LABEL_1466;
        case 75:
          memset(&v823, 0, sizeof(v823));
          v258 = v795;
          v259 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795)
                                       + 8)
                           + 8);
          v260 = **(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v258 + 40))(v258) + 8);
          __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"expected string in '.include' directive";
          LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 259;
          v261 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v258 + 40))(v258);
          if (v260 == 3)
          {
            if (((*(uint64_t (**)(llvm::MCAsmParser *, std::string *))(*(_QWORD *)v795 + 208))(v795, &v823) & 1) != 0)
            {
LABEL_497:
              v9 = 1;
              goto LABEL_498;
            }
            v534 = **(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795) + 8);
            *(_QWORD *)v825 = "unexpected token in '.include' directive";
            LOWORD(v826) = 259;
            v535 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795);
            if (v534 == 9)
            {
              memset(v864, 0, 24);
              v536 = llvm::SourceMgr::AddIncludeFile(*((_QWORD **)v795 + 30), (uint64_t)&v823, *((_QWORD *)v795 + 17), (std::string *)v864);
              v537 = v536;
              v9 = v536 == 0;
              if (v536)
              {
                *((_DWORD *)v795 + 70) = v536;
                v538 = *(_QWORD *)(**((_QWORD **)v795 + 30) + 24 * (v536 - 1));
                v539 = *(_QWORD *)(v538 + 8);
                v540 = *(_QWORD *)(v538 + 16) - v539;
                *((_QWORD *)v795 + 24) = v539;
                *((_QWORD *)v795 + 25) = v540;
                *((_QWORD *)v795 + 23) = v539;
                *((_QWORD *)v795 + 17) = 0;
                *((_BYTE *)v795 + 211) = 1;
              }
              if ((v864[23] & 0x80000000) != 0)
                operator delete(*(void **)v864);
              std::operator+<char>();
              v541 = std::string::append((std::string *)&v819, "'");
              v542 = v541->__r_.__value_.__r.__words[2];
              *(_OWORD *)v864 = *(_OWORD *)&v541->__r_.__value_.__l.__data_;
              *(_QWORD *)&v864[16] = v542;
              v541->__r_.__value_.__l.__size_ = 0;
              v541->__r_.__value_.__r.__words[2] = 0;
              v541->__r_.__value_.__r.__words[0] = 0;
              LOWORD(v811[2]) = 260;
              v810[0] = (size_t)v864;
              if (!v537)
                llvm::MCAsmParser::Error((uint64_t)v795, v259, (uint64_t)v810, 0, 0);
              if ((v864[23] & 0x80000000) != 0)
                operator delete(*(void **)v864);
              if (SBYTE7(v821) < 0)
                operator delete(v819);
LABEL_498:
              if ((SHIBYTE(v823.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                goto LABEL_288;
              v262 = (void *)v823.__r_.__value_.__r.__words[0];
              goto LABEL_691;
            }
            v529 = *(_QWORD *)(*(_QWORD *)(v535 + 8) + 8);
            v530 = (std::string *)v825;
          }
          else
          {
            v529 = *(_QWORD *)(*(_QWORD *)(v261 + 8) + 8);
            v530 = __dst;
          }
          llvm::MCAsmParser::Error((uint64_t)v795, v529, (uint64_t)v530, 0, 0);
          goto LABEL_497;
        case 76:
          v810[0] = 0;
          v810[1] = 0;
          v811[0] = 0;
          v294 = v795;
          v295 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795)
                                       + 8)
                           + 8);
          v296 = **(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v294 + 40))(v294) + 8);
          __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"expected string in '.incbin' directive";
          LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 259;
          v297 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v294 + 40))(v294);
          if (v296 != 3)
          {
            v531 = *(_QWORD *)(*(_QWORD *)(v297 + 8) + 8);
            v532 = (uint64_t)v795;
LABEL_1055:
            llvm::MCAsmParser::Error(v532, v531, (uint64_t)__dst, 0, 0);
            goto LABEL_675;
          }
          if (((*(uint64_t (**)(llvm::MCAsmParser *, size_t *))(*(_QWORD *)v795 + 208))(v795, v810) & 1) != 0)
            goto LABEL_675;
          v823.__r_.__value_.__r.__words[0] = 0;
          v819 = 0;
          if (llvm::MCAsmParser::parseOptionalToken(v795, 25))
          {
            if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795) + 8) == 25)
            {
              v298 = 0;
            }
            else
            {
              v298 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795)
                                           + 8)
                               + 8);
              if (((*(uint64_t (**)(llvm::MCAsmParser *, std::string *))(*(_QWORD *)v795 + 256))(v795, &v823) & 1) != 0)goto LABEL_675;
            }
            if (llvm::MCAsmParser::parseOptionalToken(v795, 25))
            {
              v705 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795)
                                           + 8)
                               + 8);
              __dst[0].__r_.__value_.__r.__words[0] = 0;
              if (((*(uint64_t (**)(llvm::MCAsmParser *, char **, std::string *))(*(_QWORD *)v795 + 232))(v795, &v819, __dst) & 1) != 0)goto LABEL_675;
              goto LABEL_1447;
            }
          }
          else
          {
            v298 = 0;
          }
          v705 = 0;
LABEL_1447:
          if (!llvm::MCAsmParser::parseEOL(v795))
          {
            v706 = v823.__r_.__value_.__r.__words[0];
            __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"skip is negative";
            LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 259;
            if ((v823.__r_.__value_.__r.__words[0] & 0x8000000000000000) != 0)
            {
              v532 = (uint64_t)v795;
              v531 = v298;
              goto LABEL_1055;
            }
            v753 = v819;
            memset(v825, 0, 24);
            v754 = llvm::SourceMgr::AddIncludeFile(*((_QWORD **)v795 + 30), (uint64_t)v810, *((_QWORD *)v795 + 17), (std::string *)v825);
            if (v754)
            {
              v755 = *(_QWORD *)(**((_QWORD **)v795 + 30) + 24 * (v754 - 1));
              v756 = *(_QWORD *)(v755 + 8);
              v757 = *(_QWORD *)(v755 + 16) - v756;
              if (v757 < v706)
                v706 = v757;
              v758 = v757 - v706;
              if (!v753)
                goto LABEL_1552;
              *(_QWORD *)v864 = 0;
              v759 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 56))(v795);
              (*(void (**)(uint64_t))(*(_QWORD *)v759 + 72))(v759);
              llvm::MCExpr::evaluateAsAbsolute((uint64_t)v753, v864);
              if ((v760 & 1) != 0)
              {
                if ((*(_QWORD *)v864 & 0x8000000000000000) == 0)
                {
                  if (v758 >= *(_QWORD *)v864)
                    v758 = *(_QWORD *)v864;
LABEL_1552:
                  v761 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 56))(v795);
                  (*(void (**)(uint64_t, std::string::size_type, std::string::size_type))(*(_QWORD *)v761
                                                                                                  + 488))(v761, v756 + v706, v758);
                  v762 = 0;
                  goto LABEL_1572;
                }
                __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"negative count has no effect";
                LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 259;
                v764 = (*(uint64_t (**)(llvm::MCAsmParser *, uint64_t, std::string *, _QWORD, _QWORD))(*(_QWORD *)v795 + 168))(v795, v705, __dst, 0, 0);
              }
              else
              {
                __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"expected absolute expression";
                LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 259;
                v764 = llvm::MCAsmParser::Error((uint64_t)v795, v705, (uint64_t)__dst, 0, 0);
              }
              v762 = v764;
            }
            else
            {
              v762 = 1;
            }
LABEL_1572:
            if ((v825[23] & 0x80000000) != 0)
              operator delete(*(void **)v825);
            if (v762)
            {
              std::operator+<char>();
              v765 = std::string::append((std::string *)v864, "'");
              v766 = v765->__r_.__value_.__r.__words[2];
              *(_OWORD *)v825 = *(_OWORD *)&v765->__r_.__value_.__l.__data_;
              *(_QWORD *)&v825[16] = v766;
              v765->__r_.__value_.__l.__size_ = 0;
              v765->__r_.__value_.__r.__words[2] = 0;
              v765->__r_.__value_.__r.__words[0] = 0;
              LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 260;
              __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v825;
              v9 = llvm::MCAsmParser::Error((uint64_t)v795, v295, (uint64_t)__dst, 0, 0);
              if ((v825[23] & 0x80000000) != 0)
              {
                v752 = *(void **)v825;
LABEL_1543:
                operator delete(v752);
              }
              goto LABEL_696;
            }
            v9 = 0;
LABEL_676:
            if ((SHIBYTE(v811[0]) & 0x80000000) == 0)
              goto LABEL_288;
            v262 = (void *)v810[0];
LABEL_691:
            operator delete(v262);
            goto LABEL_288;
          }
LABEL_675:
          v9 = 1;
          goto LABEL_676;
        case 79:
          v288 = v805;
          v810[0] = 0;
          v217 = *(char **)(*(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795)
                                      + 8)
                          + 8);
          __dst[0].__r_.__value_.__r.__words[0] = 0;
          if (((*(uint64_t (**)(llvm::MCAsmParser *, size_t *, std::string *))(*(_QWORD *)v795 + 232))(v795, v810, __dst) & 1) != 0)goto LABEL_222;
          *(_QWORD *)v864 = 0;
          v289 = v810[0];
          v290 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 56))(v795);
          (*(void (**)(uint64_t))(*(_QWORD *)v290 + 72))(v290);
          llvm::MCExpr::evaluateAsAbsolute(v289, v864);
          if ((v291 & 1) == 0)
          {
            LOWORD(v826) = 1283;
            *(_QWORD *)v825 = "unexpected token in '";
            v126 = (uint64_t)v795;
            *(_QWORD *)&v825[16] = v790;
            *(_QWORD *)&v825[24] = v105;
            __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v825;
            __dst[0].__r_.__value_.__r.__words[2] = (std::string::size_type)"' directive";
            LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 770;
            v125 = v217;
            goto LABEL_286;
          }
          v292 = *(_QWORD *)v864;
          __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"Count is negative";
          LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 259;
          if ((*(_QWORD *)v864 & 0x8000000000000000) != 0)
          {
            v220 = __dst;
            goto LABEL_1314;
          }
          if (llvm::MCAsmParser::parseEOL(v795))
            goto LABEL_222;
          v648 = sub_1C60E9A28((uint64_t)v795, (uint64_t)v288);
          if (!v648)
            goto LABEL_222;
          v649 = v648;
          __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst[1];
          *(_OWORD *)&__dst[0].__r_.__value_.__r.__words[1] = xmmword_1C64638F0;
          *(_DWORD *)&v825[8] = 0;
          BYTE8(v826) = 0;
          v827 = 0;
          *(_QWORD *)v825 = &off_1E81A7280;
          v829 = __dst;
          LODWORD(v828) = 0;
          *(_QWORD *)&v826 = 0;
          *(_OWORD *)&v825[16] = 0uLL;
          v650 = v292 + 1;
          while (1)
          {
            v9 = --v650 != 0;
            if (!v650)
              break;
            v651 = *(char **)(v649 + 16);
            v652 = *(_QWORD *)(v649 + 24);
            v653 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795);
            if ((sub_1C60E7AE8((uint64_t)v795, (llvm::raw_ostream *)v825, v651, v652, 0, 0, 0, 0, 0, *(_QWORD *)(*(_QWORD *)(v653 + 8) + 8)) & 1) != 0)goto LABEL_1461;
          }
          sub_1C60E9F80((uint64_t)v795, (uint64_t)v288, (llvm::raw_ostream *)v825);
LABEL_1461:
          *(_QWORD *)v825 = off_1E81A6E70;
          if ((_DWORD)v828 == 1 && *(_QWORD *)&v825[16])
            MEMORY[0x1CAA32F9C](*(_QWORD *)&v825[16], 0x1000C8077774924);
          v568 = (void *)__dst[0].__r_.__value_.__r.__words[0];
          if ((std::string *)__dst[0].__r_.__value_.__l.__data_ == &__dst[1])
            goto LABEL_288;
          goto LABEL_1134;
        case 80:
          v491 = v805;
          *(_OWORD *)v810 = 0u;
          memset(v811, 0, 26);
          memset(v864, 0, 24);
          v492 = (*(uint64_t (**)(llvm::MCAsmParser *, size_t *))(*(_QWORD *)v795 + 192))(v795, v810);
          *(_QWORD *)v825 = "expected identifier in '.irp' directive";
          LOWORD(v826) = 259;
          v493 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795);
          if (v492)
          {
            llvm::MCAsmParser::Error((uint64_t)v795, *(_QWORD *)(*(_QWORD *)(v493 + 8) + 8), (uint64_t)v825, 0, 0);
LABEL_1191:
            v9 = 1;
            goto LABEL_1192;
          }
          __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"expected comma";
          LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 259;
          if (llvm::MCAsmParser::parseToken(v795, 25, (llvm::Twine *)__dst))
            goto LABEL_1191;
          if ((sub_1C60E72B0(v795, 0, (uint64_t *)v864) & 1) != 0)
            goto LABEL_1191;
          if (llvm::MCAsmParser::parseEOL(v795))
            goto LABEL_1191;
          v741 = sub_1C60E9A28((uint64_t)v795, (uint64_t)v491);
          if (!v741)
            goto LABEL_1191;
          __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst[1];
          *(_OWORD *)&__dst[0].__r_.__value_.__r.__words[1] = xmmword_1C64638F0;
          *(_DWORD *)&v825[8] = 0;
          BYTE8(v826) = 0;
          v827 = 0;
          *(_QWORD *)v825 = &off_1E81A7280;
          v829 = __dst;
          LODWORD(v828) = 0;
          *(_QWORD *)&v826 = 0;
          *(_OWORD *)&v825[16] = 0uLL;
          v743 = *(_QWORD *)&v864[8];
          v742 = *(_QWORD *)v864;
          if (*(_QWORD *)v864 == *(_QWORD *)&v864[8])
          {
LABEL_1521:
            sub_1C60E9F80((uint64_t)v795, (uint64_t)v491, (llvm::raw_ostream *)v825);
            v9 = 0;
          }
          else
          {
            v744 = v741;
            v9 = 1;
            v745 = *(_QWORD *)v864;
            while (1)
            {
              v746 = *(char **)(v744 + 16);
              v747 = *(_QWORD *)(v744 + 24);
              v748 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795);
              if ((sub_1C60E7AE8((uint64_t)v795, (llvm::raw_ostream *)v825, v746, v747, (uint64_t)v810, 1, v742, 1uLL, 1, *(_QWORD *)(*(_QWORD *)(v748 + 8) + 8)) & 1) != 0)break;
              v745 += 24;
              v742 += 24;
              if (v745 == v743)
                goto LABEL_1521;
            }
          }
          *(_QWORD *)v825 = off_1E81A6E70;
          if ((_DWORD)v828 == 1 && *(_QWORD *)&v825[16])
            MEMORY[0x1CAA32F9C](*(_QWORD *)&v825[16], 0x1000C8077774924);
          if ((std::string *)__dst[0].__r_.__value_.__l.__data_ != &__dst[1])
            free(__dst[0].__r_.__value_.__l.__data_);
LABEL_1192:
          v587 = (std::string *)v864;
          goto LABEL_1193;
        case 81:
          v482 = v805;
          *(_OWORD *)v810 = 0u;
          memset(v811, 0, 26);
          memset(&v823, 0, sizeof(v823));
          v483 = (*(uint64_t (**)(llvm::MCAsmParser *, size_t *))(*(_QWORD *)v795 + 192))(v795, v810);
          *(_QWORD *)v825 = "expected identifier in '.irpc' directive";
          LOWORD(v826) = 259;
          v484 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795);
          if (v483)
          {
            v485 = *(_QWORD *)(*(_QWORD *)(v484 + 8) + 8);
            v486 = (std::string *)v825;
            v487 = (uint64_t)v795;
          }
          else
          {
            __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"expected comma";
            LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 259;
            if (llvm::MCAsmParser::parseToken(v795, 25, (llvm::Twine *)__dst)
              || (sub_1C60E72B0(v795, 0, (uint64_t *)&v823) & 1) != 0)
            {
              goto LABEL_1167;
            }
            if (v823.__r_.__value_.__l.__size_ - v823.__r_.__value_.__r.__words[0] == 24
              && *(_QWORD *)(v823.__r_.__value_.__r.__words[0] + 8) - *(_QWORD *)v823.__r_.__value_.__l.__data_ == 40)
            {
              if (!llvm::MCAsmParser::parseEOL(v795))
              {
                v726 = sub_1C60E9A28((uint64_t)v795, (uint64_t)v482);
                if (v726)
                {
                  v727 = v726;
                  v728 = 0;
                  __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst[1];
                  *(_OWORD *)&__dst[0].__r_.__value_.__r.__words[1] = xmmword_1C64638F0;
                  *(_DWORD *)&v825[8] = 0;
                  BYTE8(v826) = 0;
                  v827 = 0;
                  *(_QWORD *)v825 = &off_1E81A7280;
                  v829 = __dst;
                  LODWORD(v828) = 0;
                  *(_QWORD *)&v826 = 0;
                  *(_OWORD *)&v825[16] = 0uLL;
                  v729 = *(_QWORD *)(*(_QWORD *)v823.__r_.__value_.__l.__data_ + 8);
                  v730 = *(_QWORD *)(*(_QWORD *)v823.__r_.__value_.__l.__data_ + 16);
                  while (1)
                  {
                    v9 = v730 != v728;
                    if (v730 == v728)
                      break;
                    v731 = v728 + 1;
                    if (v730 >= v728)
                      v732 = v728;
                    else
                      v732 = v730;
                    if (v732 <= v731)
                      v733 = v728 + 1;
                    else
                      v733 = v732;
                    if (v730 < v733)
                      v733 = v730;
                    v734 = v729 + v732;
                    v735 = v733 - v732;
                    v865 = &v821;
                    v736 = operator new(0x28uLL);
                    *(_DWORD *)v736 = 2;
                    v736[1] = v734;
                    v736[2] = v735;
                    *((_DWORD *)v736 + 8) = 64;
                    v736[3] = 0;
                    v737 = (char *)(v736 + 5);
                    v819 = (char *)v736;
                    v820 = (char *)(v736 + 5);
                    *(_QWORD *)&v821 = v736 + 5;
                    memset(v864, 0, sizeof(v864));
                    sub_1C63E9D68((uint64_t)v864);
                    v820 = v737;
                    v738 = *(char **)(v727 + 16);
                    v739 = *(_QWORD *)(v727 + 24);
                    v740 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795);
                    LOBYTE(v738) = sub_1C60E7AE8((uint64_t)v795, (llvm::raw_ostream *)v825, v738, v739, (uint64_t)v810, 1, (uint64_t)&v819, 1uLL, 1, *(_QWORD *)(*(_QWORD *)(v740 + 8) + 8));
                    *(_QWORD *)v864 = &v819;
                    sub_1C5934A7C((void ***)v864);
                    v728 = v731;
                    if ((v738 & 1) != 0)
                      goto LABEL_1560;
                  }
                  sub_1C60E9F80((uint64_t)v795, (uint64_t)v482, (llvm::raw_ostream *)v825);
LABEL_1560:
                  *(_QWORD *)v825 = off_1E81A6E70;
                  if ((_DWORD)v828 == 1 && *(_QWORD *)&v825[16])
                    MEMORY[0x1CAA32F9C](*(_QWORD *)&v825[16], 0x1000C8077774924);
                  if ((std::string *)__dst[0].__r_.__value_.__l.__data_ != &__dst[1])
                    free(__dst[0].__r_.__value_.__l.__data_);
                }
                else
                {
                  v9 = 1;
                }
LABEL_1168:
                v587 = &v823;
LABEL_1193:
                __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v587;
                sub_1C60E8D20((void ***)__dst);
                __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v811;
                sub_1C5934A7C((void ***)__dst);
                goto LABEL_288;
              }
LABEL_1167:
              v9 = 1;
              goto LABEL_1168;
            }
            __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"unexpected token in '.irpc' directive";
            LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 259;
            v485 = *(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795) + 96);
            v486 = __dst;
            v487 = (uint64_t)v795;
          }
          llvm::MCAsmParser::Error(v487, v485, (uint64_t)v486, 0, 0);
          goto LABEL_1167;
        case 101:
        case 102:
          if (((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 264))(v795) & 1) != 0)
            goto LABEL_222;
          *(_QWORD *)v825 = 0;
          __dst[0].__r_.__value_.__r.__words[0] = 0;
          if (((*(uint64_t (**)(llvm::MCAsmParser *, _BYTE *, std::string *))(*(_QWORD *)v795 + 232))(v795, v825, __dst) & 1) != 0)goto LABEL_222;
          __dst[0].__r_.__value_.__r.__words[0] = 0;
          if (llvm::MCAsmParser::parseOptionalToken(v795, 25))
          {
            v178 = *(uint64_t (**)(void))(*(_QWORD *)v795 + 256);
LABEL_571:
            if ((v178() & 1) != 0)
              goto LABEL_222;
          }
LABEL_572:
          if (llvm::MCAsmParser::parseEOL(v795))
            goto LABEL_222;
          v195 = *(void (**)(void))(*(_QWORD *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 56))(v795)
                                  + 608);
          goto LABEL_574;
        case 103:
          v210 = v805;
          if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795) + 8) == 4)
          {
            v211 = *(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795) + 8);
            v214 = *(_QWORD *)(v211 + 24);
            v212 = v211 + 24;
            v213 = v214;
            if (*(_DWORD *)(v212 + 8) >= 0x41u)
              v212 = v213;
            v215 = *(_QWORD *)v212;
            (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 184))(v795);
            if (v215 < 0)
            {
              v216 = "negative file number";
              goto LABEL_1049;
            }
          }
          else
          {
            v215 = -1;
          }
          v810[0] = 0;
          v810[1] = 0;
          v811[0] = 0;
          if (((*(uint64_t (**)(llvm::MCAsmParser *, size_t *))(*(_QWORD *)v795 + 208))(v795, v810) & 1) != 0)
            goto LABEL_675;
          memset(v864, 0, 24);
          if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795) + 8) == 3)
          {
            __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"explicit path specified, but no file number";
            LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 259;
            v347 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795);
            if (v215 == -1)
            {
              llvm::MCAsmParser::Error((uint64_t)v795, *(_QWORD *)(*(_QWORD *)(v347 + 8) + 8), (uint64_t)__dst, 0, 0);
              goto LABEL_695;
            }
            if (((*(uint64_t (**)(llvm::MCAsmParser *, _BYTE *))(*(_QWORD *)v795 + 208))(v795, v864) & 1) != 0)
            {
LABEL_695:
              v9 = 1;
              goto LABEL_696;
            }
            v627 = *(_BYTE **)v864;
            if (v864[23] >= 0)
              v627 = v864;
            v628 = (void *)(v864[23] & 0x7F);
            if (v864[23] < 0)
              v628 = *(void **)&v864[8];
            __pc = v628;
            *(_QWORD *)v793 = v627;
            v629 = v810;
            if (v811[0] < 0)
              v629 = (size_t *)v810[0];
            v630 = HIBYTE(v811[0]) & 0x7F;
            if (v811[0] < 0)
              v630 = v810[1];
            v779 = v630;
            v782 = v629;
          }
          else
          {
            v779 = 0;
            v782 = 0;
            v595 = v810;
            if (v811[0] < 0)
              v595 = (size_t *)v810[0];
            v596 = HIBYTE(v811[0]) & 0x7F;
            if (v811[0] < 0)
              v596 = v810[1];
            __pc = (void *)v596;
            *(_QWORD *)v793 = v595;
          }
          *(_QWORD *)&v818 = 0;
          v814 = 0;
          memset(&v823, 0, sizeof(v823));
          if (llvm::MCAsmParser::parseOptionalToken(v795, 9))
          {
            if (v215 == -1)
            {
              if (*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 48))(v795)
                                        + 152)
                            + 364))
              {
                v670 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 56))(v795);
                (*(void (**)(uint64_t, unsigned int *, void *))(*(_QWORD *)v670 + 656))(v670, *(unsigned int **)v793, __pc);
              }
            }
            else
            {
              v632 = 0;
              v633 = 0;
LABEL_1279:
              v634 = *((_QWORD *)v795 + 27);
              if (*(_BYTE *)(v634 + 1513))
              {
                *(_DWORD *)v825 = 0;
                __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v825;
                v635 = sub_1C592911C((uint64_t **)(v634 + 1472), (unsigned int *)v825, (uint64_t)&std::piecewise_construct, __dst);
                sub_1C60EA614((uint64_t)(v635 + 40));
                v634 = *((_QWORD *)v795 + 27);
                *(_BYTE *)(v634 + 1513) = 0;
              }
              if ((v632 & 1) != 0)
              {
                v636 = (uint64x2_t)vdupq_lane_s64(v818, 0);
                v637 = (uint64x2_t)vdupq_lane_s64(v814, 0);
                *(int8x8_t *)v636.i8 = vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v636, (uint64x2_t)xmmword_1C86782F0), (int32x4_t)vshlq_u64(v636, (uint64x2_t)xmmword_1C86782E0)), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v636, (uint64x2_t)xmmword_1C8678310), (int32x4_t)vshlq_u64(v636, (uint64x2_t)xmmword_1C8678300))));
                v638 = vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v637, (uint64x2_t)xmmword_1C86782F0), (int32x4_t)vshlq_u64(v637, (uint64x2_t)xmmword_1C86782E0)), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v637, (uint64x2_t)xmmword_1C8678310), (int32x4_t)vshlq_u64(v637, (uint64x2_t)xmmword_1C8678300)));
                v3 = vmovn_s16(v638);
                v639 = v636.i8[0];
                v776 = vext_s8(*(int8x8_t *)v636.i8, *(int8x8_t *)v638.i8, 1uLL);
                v640 = 1;
              }
              else
              {
                v640 = 0;
                v639 = 0;
                v776 = v631;
              }
              if ((v633 & 1) != 0)
              {
                if ((v823.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v671 = *((_BYTE *)&v823.__r_.__value_.__s + 23) & 0x7F;
                else
                  v671 = v823.__r_.__value_.__r.__words[1];
                v672 = (char *)sub_1C484358C(v634 + 192, v671, 3);
                v673 = v672;
                if ((v823.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v674 = &v823;
                else
                  v674 = (std::string *)v823.__r_.__value_.__r.__words[0];
                if ((v823.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v675 = *((_BYTE *)&v823.__r_.__value_.__s + 23) & 0x7F;
                else
                  v675 = v823.__r_.__value_.__l.__size_;
                memcpy(v672, v674, v675);
                if ((v823.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v38 = *((_BYTE *)&v823.__r_.__value_.__s + 23) & 0x7F;
                else
                  v38 = v823.__r_.__value_.__l.__size_;
                v676 = 1;
              }
              else
              {
                v676 = 0;
                v673 = 0;
              }
              if (v215)
              {
                v677 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 56))(v795);
                LOBYTE(v861) = v639;
                HIBYTE(v861) = v776.i8[6];
                *(_WORD *)((char *)&v861 + 5) = v776.i16[2];
                *(_DWORD *)((char *)&v861 + 1) = v776.i32[0];
                v862 = v3;
                LOBYTE(v863) = v640;
                *(_QWORD *)&v815 = v673;
                *((_QWORD *)&v815 + 1) = v38;
                LOBYTE(v816) = v676;
                *(_DWORD *)((char *)&v816 + 1) = *(_DWORD *)v813;
                HIDWORD(v816) = *(_DWORD *)&v813[3];
                (*(void (**)(size_t *__return_ptr, uint64_t, uint64_t, size_t *, size_t, unsigned int *, void *, uint64_t *, __int128 *, _DWORD))(*(_QWORD *)v677 + 680))(v868, v677, v215, v782, v779, *(unsigned int **)v793, __pc, &v861, &v815, 0);
                if ((v868[1] & 1) != 0)
                {
                  v678 = (char *)v868[0];
                  v868[0] = 0;
                  v812 = v678;
                  sub_1C61D2548(&v812, (std::string *)v825);
                  LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 260;
                  __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v825;
                  v9 = llvm::MCAsmParser::Error((uint64_t)v795, (uint64_t)v210, (uint64_t)__dst, 0, 0);
                  if ((v825[23] & 0x80000000) != 0)
                    operator delete(*(void **)v825);
                  if (v812)
                    (*(void (**)(char *))(*(_QWORD *)v812 + 8))(v812);
                  if ((v868[1] & 1) != 0)
                  {
                    v679 = v868[0];
                    v868[0] = 0;
                    if (v679)
                      (*(void (**)(size_t))(*(_QWORD *)v679 + 8))(v679);
                  }
                  goto LABEL_1541;
                }
              }
              else
              {
                v685 = *((_QWORD *)v795 + 27);
                if (*(unsigned __int16 *)(v685 + 1624) <= 4u)
                  *(_WORD *)(v685 + 1624) = 5;
                v686 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 56))(v795);
                LOBYTE(v866[0]) = v639;
                HIBYTE(v866[0]) = v776.i8[6];
                *(_WORD *)((char *)v866 + 5) = v776.i16[2];
                *(_DWORD *)((char *)v866 + 1) = v776.i32[0];
                v866[1] = (uint64_t)v3;
                LOBYTE(v867) = v640;
                v819 = v673;
                v820 = (char *)v38;
                LOBYTE(v821) = v676;
                *(_DWORD *)((char *)&v821 + 1) = *(_DWORD *)v813;
                DWORD1(v821) = *(_DWORD *)&v813[3];
                (*(void (**)(uint64_t, size_t *, size_t, unsigned int *, void *, uint64_t *, char **, _QWORD))(*(_QWORD *)v686 + 688))(v686, v782, v779, *(unsigned int **)v793, __pc, v866, &v819, 0);
              }
              if (!*((_BYTE *)v795 + 806))
              {
                v693 = (_QWORD *)(*((_QWORD *)v795 + 27) + 1480);
                do
                {
                  v694 = (uint64_t)v693;
                  v693 = (_QWORD *)*v693;
                }
                while (v693);
                if (v694 == *((_QWORD *)v795 + 27) + 1480 || *(_DWORD *)(v694 + 32))
                  v694 = *((_QWORD *)v795 + 27) + 1480;
                if (*(_DWORD *)(v694 + 144) && *(unsigned __int8 *)(v694 + 497) != *(unsigned __int8 *)(v694 + 498))
                {
                  *((_BYTE *)v795 + 806) = 1;
                  __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"inconsistent use of MD5 checksums";
                  LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 259;
                  v9 = (*(uint64_t (**)(llvm::MCAsmParser *, char *, std::string *, _QWORD, _QWORD))(*(_QWORD *)v795 + 168))(v795, v210, __dst, 0, 0);
                  goto LABEL_1541;
                }
              }
            }
            v9 = 0;
            goto LABEL_1541;
          }
          v632 = 0;
          v633 = 0;
          while (1)
          {
            v868[1] = 0;
            v868[0] = 0;
            v38 = (std::string::size_type)v795;
            v641 = **(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795) + 8);
            __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"unexpected token in '.file' directive";
            LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 259;
            v642 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v38 + 40))(v38);
            if (v641 != 2)
            {
LABEL_1536:
              v749 = *(_QWORD *)(*(_QWORD *)(v642 + 8) + 8);
              v750 = __dst;
LABEL_1537:
              v751 = (uint64_t)v795;
              goto LABEL_1539;
            }
            if (((*(uint64_t (**)(llvm::MCAsmParser *, size_t *))(*(_QWORD *)v795 + 192))(v795, v868) & 1) != 0)
              goto LABEL_1540;
            if (v868[1] == 6)
            {
              if (*(_DWORD *)v868[0] != 1920298867 || *(_WORD *)(v868[0] + 4) != 25955)
              {
LABEL_1538:
                __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"unexpected token in '.file' directive";
                LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 259;
                v749 = *(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795) + 96);
                v750 = __dst;
                v751 = (uint64_t)v795;
LABEL_1539:
                llvm::MCAsmParser::Error(v751, v749, (uint64_t)v750, 0, 0);
LABEL_1540:
                v9 = 1;
LABEL_1541:
                if (SHIBYTE(v823.__r_.__value_.__r.__words[2]) < 0)
                {
                  v752 = (void *)v823.__r_.__value_.__r.__words[0];
                  goto LABEL_1543;
                }
LABEL_696:
                if ((v864[23] & 0x80000000) != 0)
                  operator delete(*(void **)v864);
                goto LABEL_676;
              }
              __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"source specified, but no file number";
              LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 259;
              v642 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795);
              if (v215 == -1)
                goto LABEL_1536;
              v38 = (std::string::size_type)v795;
              v645 = **(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795) + 8);
              *(_QWORD *)v825 = "unexpected token in '.file' directive";
              LOWORD(v826) = 259;
              v646 = (*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v38 + 40))(v38);
              if (v645 != 3)
              {
                v749 = *(_QWORD *)(*(_QWORD *)(v646 + 8) + 8);
                v750 = (std::string *)v825;
                goto LABEL_1537;
              }
              if (((*(uint64_t (**)(llvm::MCAsmParser *, std::string *))(*(_QWORD *)v795 + 208))(v795, &v823) & 1) != 0)goto LABEL_1540;
              v633 = 1;
            }
            else
            {
              if (v868[1] != 3)
                goto LABEL_1538;
              if (*(_WORD *)v868[0] != 25709 || *(_BYTE *)(v868[0] + 2) != 53)
                goto LABEL_1538;
              __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"MD5 checksum specified, but no file number";
              LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 259;
              v642 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795);
              if (v215 == -1)
                goto LABEL_1536;
              if ((sub_1C60E90F0((uint64_t)v795, (char **)&v818, &v814) & 1) != 0)
                goto LABEL_1540;
              v632 = 1;
            }
            if (llvm::MCAsmParser::parseOptionalToken(v795, 9))
              goto LABEL_1279;
          }
        case 104:
          if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795) + 8) == 4)
          {
            __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"unexpected token in '.line' directive";
            LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 259;
            if (llvm::MCAsmParser::parseIntToken(v795, (uint64_t *)v825, (const llvm::Twine *)__dst))
              goto LABEL_222;
          }
          v62 = llvm::MCAsmParser::parseEOL(v795);
          goto LABEL_287;
        case 105:
          *(_QWORD *)v864 = 0;
          v287 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795)
                                       + 8)
                           + 8);
          __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"unexpected token in '.loc' directive";
          LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 259;
          if (llvm::MCAsmParser::parseIntToken(v795, (uint64_t *)v864, (const llvm::Twine *)__dst))
            goto LABEL_222;
          v303 = *(_QWORD *)v864;
          if (*(uint64_t *)v864 <= 0)
          {
            v304 = *(unsigned __int16 *)(*((_QWORD *)v795 + 27) + 1624);
            *(_QWORD *)v825 = "file number less than one in '.loc' directive";
            LOWORD(v826) = 259;
            if (v304 <= 4)
              goto LABEL_608;
          }
          v561 = (uint64_t **)(*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 48))(v795);
          isValidDwarfFileNumber = llvm::MCContext::isValidDwarfFileNumber(v561, v303, 0);
          v810[0] = (size_t)"unassigned file number in '.loc' directive";
          LOWORD(v811[2]) = 259;
          if (!isValidDwarfFileNumber)
            goto LABEL_1309;
          if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795) + 8) == 4)
          {
            v563 = *(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795) + 8);
            v566 = *(uint64_t **)(v563 + 24);
            v564 = (uint64_t *)(v563 + 24);
            v565 = v566;
            if (*((_DWORD *)v564 + 2) >= 0x41u)
              v564 = v565;
            v567 = *v564;
            if (*v564 < 0)
            {
              v216 = "line number less than zero in '.loc' directive";
              goto LABEL_1049;
            }
            (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 184))(v795);
          }
          else
          {
            v567 = 0;
          }
          if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795) + 8) != 4)
            goto LABEL_1427;
          v695 = *(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795) + 8);
          v698 = *(_QWORD *)(v695 + 24);
          v696 = v695 + 24;
          v697 = v698;
          if (*(_DWORD *)(v696 + 8) >= 0x41u)
            v696 = v697;
          if ((*(_QWORD *)v696 & 0x8000000000000000) != 0)
          {
            v216 = "column position less than zero in '.loc' directive";
            goto LABEL_1049;
          }
          (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 184))(v795);
LABEL_1427:
          LODWORD(v810[0]) = *(_BYTE *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 48))(v795)
                                      + 1506) & 1;
          LODWORD(v823.__r_.__value_.__l.__data_) = 0;
          *(_QWORD *)v825 = 0;
          __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v795;
          __dst[0].__r_.__value_.__l.__size_ = (std::string::size_type)v810;
          __dst[0].__r_.__value_.__r.__words[2] = (std::string::size_type)&v823;
          __dst[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v825;
          v9 = llvm::MCAsmParser::parseMany(v795, (unsigned int (*)(uint64_t))sub_1C60EA6CC, (uint64_t)__dst, 0);
          if ((v9 & 1) == 0)
          {
            v700 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 56))(v795);
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v700 + 704))(v700, v303, v567);
          }
          goto LABEL_288;
        case 106:
          v216 = "unsupported directive '.stabs'";
          goto LABEL_1049;
        case 107:
          v317 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795)
                                       + 8)
                           + 8);
          v819 = 0;
          memset(v864, 0, 24);
          memset(&v823, 0, sizeof(v823));
          *(_QWORD *)&v815 = 0;
          __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"expected file number in '.cv_file' directive";
          LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 259;
          if (llvm::MCAsmParser::parseIntToken(v795, (uint64_t *)&v819, (const llvm::Twine *)__dst))
            goto LABEL_627;
          v318 = v819;
          *(_QWORD *)v825 = "file number less than one";
          LOWORD(v826) = 259;
          if ((uint64_t)v819 <= 0)
          {
            v592 = (std::string *)v825;
            v593 = (uint64_t)v795;
            v594 = v317;
          }
          else
          {
            v319 = **(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795) + 8);
            v810[0] = (size_t)"unexpected token in '.cv_file' directive";
            LOWORD(v811[2]) = 259;
            v320 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795);
            if (v319 == 3)
            {
              if (((*(uint64_t (**)(llvm::MCAsmParser *, _BYTE *))(*(_QWORD *)v795 + 208))(v795, v864) & 1) != 0)
              {
LABEL_627:
                v9 = 1;
                goto LABEL_628;
              }
              if (llvm::MCAsmParser::parseOptionalToken(v795, 9))
              {
                v599 = 0;
                v600 = 0;
                v601 = 0;
                goto LABEL_1217;
              }
              v658 = **(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795) + 8);
              __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"unexpected token in '.cv_file' directive";
              LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 259;
              v659 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795);
              if (v658 == 3)
              {
                if (((*(uint64_t (**)(llvm::MCAsmParser *, std::string *))(*(_QWORD *)v795 + 208))(v795, &v823) & 1) != 0)goto LABEL_627;
                *(_QWORD *)v825 = "expected checksum kind in '.cv_file' directive";
                LOWORD(v826) = 259;
                if (llvm::MCAsmParser::parseIntToken(v795, (uint64_t *)&v815, (const llvm::Twine *)v825))
                  goto LABEL_627;
                v810[0] = (size_t)"unexpected token in '.cv_file' directive";
                LOWORD(v811[2]) = 259;
                if (llvm::MCAsmParser::parseEOL(v795, (const llvm::Twine *)v810))
                  goto LABEL_627;
                v601 = HIBYTE(v823.__r_.__value_.__r.__words[2]);
                v599 = v823.__r_.__value_.__l.__size_;
                v600 = v823.__r_.__value_.__r.__words[0];
LABEL_1217:
                v602 = v601;
                if (v601 >= 0)
                  v603 = &v823;
                else
                  v603 = (std::string *)v600;
                v604 = v601 & 0x7F;
                if (v602 >= 0)
                  v605 = v604;
                else
                  v605 = v599;
                memset(__dst, 0, 24);
                if (v605)
                {
                  std::string::resize(__dst, (v605 + 1) >> 1, 0);
                  v606 = (std::string *)__dst[0].__r_.__value_.__r.__words[0];
                  if ((__dst[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v607 = __dst;
                  else
                    v607 = (std::string *)__dst[0].__r_.__value_.__r.__words[0];
                  if ((v605 & 1) != 0)
                  {
                    v608 = (unsigned __int16)word_1C85F7092[v603->__r_.__value_.__s.__data_[0]];
                    if (v608 == 0xFFFF)
                      goto LABEL_1241;
                    if ((__dst[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v606 = __dst;
                    v607->__r_.__value_.__s.__data_[0] = v608;
                    v607 = (std::string *)((char *)&v606->__r_.__value_.__l.__data_ + 1);
                    v609 = &v823;
                    if (v602 < 0)
                      v609 = (std::string *)v600;
                    v603 = (std::string *)((char *)&v609->__r_.__value_.__l.__data_ + 1);
                    --v605;
                  }
                  if (v605 >= 2)
                  {
                    v610 = v605 >> 1;
                    v611 = &v603->__r_.__value_.__s.__data_[1];
                    do
                    {
                      v612 = (unsigned __int16)word_1C85F7092[*(v611 - 1)];
                      v613 = (unsigned __int16)word_1C85F7092[*v611];
                      if (v612 == 0xFFFF || v613 == 0xFFFF)
                        break;
                      v611 += 2;
                      v607->__r_.__value_.__s.__data_[0] = v613 | (16 * v612);
                      v607 = (std::string *)((char *)v607 + 1);
                      --v610;
                    }
                    while (v610);
                  }
                }
LABEL_1241:
                if (SHIBYTE(v823.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v823.__r_.__value_.__l.__data_);
                v823 = __dst[0];
                if ((__dst[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v615 = *((_BYTE *)&__dst[0].__r_.__value_.__s + 23) & 0x7F;
                else
                  v615 = __dst[0].__r_.__value_.__r.__words[1];
                v616 = (void *)sub_1C484358C(*((_QWORD *)v795 + 27) + 192, v615, 0);
                v617 = v616;
                if ((v823.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v618 = &v823;
                else
                  v618 = (std::string *)v823.__r_.__value_.__r.__words[0];
                if ((v823.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v619 = *((_BYTE *)&v823.__r_.__value_.__s + 23) & 0x7F;
                else
                  v619 = v823.__r_.__value_.__l.__size_;
                memcpy(v616, v618, v619);
                if ((v823.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v620 = *((_BYTE *)&v823.__r_.__value_.__s + 23) & 0x7F;
                else
                  v620 = v823.__r_.__value_.__l.__size_;
                v621 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 56))(v795);
                if (v864[23] >= 0)
                  v622 = v864;
                else
                  v622 = *(_BYTE **)v864;
                if (v864[23] >= 0)
                  v623 = v864[23] & 0x7F;
                else
                  v623 = *(_QWORD *)&v864[8];
                if (((*(uint64_t (**)(uint64_t, char *, _BYTE *, uint64_t, void *, std::string::size_type, _QWORD))(*(_QWORD *)v621 + 712))(v621, v318, v622, v623, v617, v620, v815) & 1) != 0)
                {
                  v9 = 0;
                }
                else
                {
                  __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"file number already allocated";
                  LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 259;
                  v9 = llvm::MCAsmParser::Error((uint64_t)v795, v317, (uint64_t)__dst, 0, 0);
                }
LABEL_628:
                if (SHIBYTE(v823.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(v823.__r_.__value_.__l.__data_);
                if ((v864[23] & 0x80000000) == 0)
                  goto LABEL_288;
                v262 = *(void **)v864;
                goto LABEL_691;
              }
              v594 = *(_QWORD *)(*(_QWORD *)(v659 + 8) + 8);
              v592 = __dst;
            }
            else
            {
              v594 = *(_QWORD *)(*(_QWORD *)(v320 + 8) + 8);
              v592 = (std::string *)v810;
            }
            v593 = (uint64_t)v795;
          }
          llvm::MCAsmParser::Error(v593, v594, (uint64_t)v592, 0, 0);
          goto LABEL_627;
        case 108:
          v136 = *(char **)(*(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795)
                                      + 8)
                          + 8);
          *(_QWORD *)v825 = 0;
          if ((sub_1C60EAA40(v795, (uint64_t *)v825, (uint64_t)".cv_func_id", 11) & 1) != 0)
            goto LABEL_222;
          __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"unexpected token in '.cv_func_id' directive";
          LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 259;
          if (llvm::MCAsmParser::parseEOL(v795, (const llvm::Twine *)__dst))
            goto LABEL_222;
          v253 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 56))(v795);
          if (((*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v253 + 720))(v253, *(unsigned int *)v825) & 1) == 0)
            goto LABEL_490;
          goto LABEL_156;
        case 109:
          v136 = *(char **)(*(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795)
                                      + 8)
                          + 8);
          *(_QWORD *)v825 = 0;
          v810[0] = 0;
          *(_QWORD *)v864 = 0;
          v823.__r_.__value_.__r.__words[0] = 0;
          if ((sub_1C60EAA40(v795, (uint64_t *)v825, (uint64_t)".cv_inline_site_id", 18) & 1) != 0)
            goto LABEL_222;
          if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795) + 8) != 2)
            goto LABEL_1057;
          v255 = *(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795) + 8);
          if (*(_DWORD *)v255 == 2)
          {
            v256 = *(int **)(v255 + 8);
            v257 = *(_QWORD *)(v255 + 16);
          }
          else
          {
            v256 = *(int **)(v255 + 8);
            v381 = *(_QWORD *)(v255 + 16);
            v382 = v381 - 1;
            v383 = v381 != 0;
            if (v381)
              v256 = (int *)((char *)v256 + 1);
            if (v383 > v382)
              v382 = v381 != 0;
            if (v381 < v382)
              v382 = v381;
            v257 = v382 - v383;
          }
          if (v257 == 6)
          {
            v384 = *v256;
            v385 = *((unsigned __int16 *)v256 + 2);
            v387 = v384 != 1752459639 || v385 != 28265;
            __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"expected 'within' identifier in '.cv_inline_"
                                                                            "site_id' directive";
            LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 259;
            v269 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795);
            if (v387)
            {
LABEL_992:
              v460 = *(_QWORD *)(*(_QWORD *)(v269 + 8) + 8);
              v220 = __dst;
              v459 = (uint64_t)v795;
LABEL_1052:
              llvm::MCAsmParser::Error(v459, v460, (uint64_t)v220, 0, 0);
              goto LABEL_222;
            }
            (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 184))(v795);
            if ((sub_1C60EAA40(v795, (uint64_t *)v810, (uint64_t)".cv_inline_site_id", 18) & 1) != 0)
              goto LABEL_222;
            if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795) + 8) == 2)
            {
              v388 = *(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795) + 8);
              if (*(_DWORD *)v388 == 2)
              {
                v389 = *(uint64_t **)(v388 + 8);
                v390 = *(_QWORD *)(v388 + 16);
              }
              else
              {
                v389 = *(uint64_t **)(v388 + 8);
                v416 = *(_QWORD *)(v388 + 16);
                v417 = v416 - 1;
                v418 = v416 != 0;
                if (v416)
                  v389 = (uint64_t *)((char *)v389 + 1);
                if (v418 > v417)
                  v417 = v416 != 0;
                if (v416 < v417)
                  v417 = v416;
                v390 = v417 - v418;
              }
              if (v390 == 10)
              {
                v419 = *v389;
                v420 = *((unsigned __int16 *)v389 + 4);
                v422 = v419 != 0x5F64656E696C6E69 || v420 != 29793;
                __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"expected 'inlined_at' identifier in '.cv"
                                                                                "_inline_site_id' directive";
                LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 259;
                v269 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795);
                if (!v422)
                {
                  (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 184))(v795);
                  if ((sub_1C60EAB28((llvm::MCContext **)v795, (uint64_t *)v864, (uint64_t)".cv_inline_site_id", 18) & 1) != 0)
                    goto LABEL_222;
                  __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"expected line number after 'inlined_at'";
                  LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 259;
                  if (llvm::MCAsmParser::parseIntToken(v795, (uint64_t *)&v823, (const llvm::Twine *)__dst))
                    goto LABEL_222;
                  if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795) + 8) == 4)
                  {
                    v423 = *(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795)
                                     + 8);
                    v426 = *(unsigned int **)(v423 + 24);
                    v424 = (unsigned int *)(v423 + 24);
                    v425 = v426;
                    if (v424[2] >= 0x41)
                      v424 = v425;
                    v427 = *v424;
                    (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 184))(v795);
                  }
                  else
                  {
                    v427 = 0;
                  }
                  __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"unexpected token in '.cv_inline_site_id' directive";
                  LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 259;
                  if (llvm::MCAsmParser::parseEOL(v795, (const llvm::Twine *)__dst))
                    goto LABEL_222;
                  v707 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 56))(v795);
                  if (((*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, char *))(*(_QWORD *)v707 + 728))(v707, *(unsigned int *)v825, LODWORD(v810[0]), *(unsigned int *)v864, LODWORD(v823.__r_.__value_.__l.__data_), v427, v136) & 1) != 0)goto LABEL_156;
LABEL_490:
                  v254 = "function id already allocated";
LABEL_983:
                  __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v254;
                  v498 = 259;
LABEL_1466:
                  LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = v498;
                  v126 = (uint64_t)v795;
LABEL_285:
                  v125 = v136;
                  goto LABEL_286;
                }
                goto LABEL_992;
              }
            }
            v533 = "expected 'inlined_at' identifier in '.cv_inline_site_id' directive";
          }
          else
          {
LABEL_1057:
            v533 = "expected 'within' identifier in '.cv_inline_site_id' directive";
          }
          __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v533;
          LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 259;
          v528 = v795;
          v460 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795)
                                       + 8)
                           + 8);
          goto LABEL_1051;
        case 110:
          (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795);
          *(_QWORD *)v825 = 0;
          v810[0] = 0;
          if ((sub_1C60EAA40(v795, (uint64_t *)v825, (uint64_t)".cv_loc", 7) & 1) != 0
            || (sub_1C60EAB28((llvm::MCContext **)v795, (uint64_t *)v810, (uint64_t)".cv_loc", 7) & 1) != 0)
          {
            goto LABEL_222;
          }
          if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795) + 8) != 4)
            goto LABEL_1378;
          v322 = *(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795) + 8);
          v325 = *(_QWORD *)(v322 + 24);
          v323 = v322 + 24;
          v324 = v325;
          if (*(_DWORD *)(v323 + 8) >= 0x41u)
            v323 = v324;
          if ((*(_QWORD *)v323 & 0x8000000000000000) != 0)
          {
            v216 = "line number less than zero in '.cv_loc' directive";
            goto LABEL_1049;
          }
          (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 184))(v795);
LABEL_1378:
          if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795) + 8) != 4)
            goto LABEL_1420;
          v680 = *(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795) + 8);
          v683 = *(_QWORD *)(v680 + 24);
          v681 = v680 + 24;
          v682 = v683;
          if (*(_DWORD *)(v681 + 8) >= 0x41u)
            v681 = v682;
          if ((*(_QWORD *)v681 & 0x8000000000000000) != 0)
          {
            v216 = "column position less than zero in '.cv_loc' directive";
            goto LABEL_1049;
          }
          (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 184))(v795);
LABEL_1420:
          v823.__r_.__value_.__s.__data_[0] = 0;
          *(_QWORD *)v864 = 0;
          __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v795;
          __dst[0].__r_.__value_.__l.__size_ = (std::string::size_type)&v823;
          __dst[0].__r_.__value_.__r.__words[2] = (std::string::size_type)v864;
          v9 = llvm::MCAsmParser::parseMany(v795, (unsigned int (*)(uint64_t))sub_1C60EAC9C, (uint64_t)__dst, 0);
          if ((v9 & 1) == 0)
          {
            v699 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 56))(v795);
            (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v699 + 736))(v699, *(unsigned int *)v825, LODWORD(v810[0]));
          }
          goto LABEL_288;
        case 111:
          v819 = 0;
          *(_OWORD *)v864 = 0uLL;
          *(_OWORD *)&v823.__r_.__value_.__l.__data_ = 0uLL;
          (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795);
          if ((sub_1C60EAA40(v795, (uint64_t *)&v819, (uint64_t)".cv_linetable", 13) & 1) != 0)
            goto LABEL_222;
          __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"expected comma";
          LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 259;
          if (llvm::MCAsmParser::parseToken(v795, 25, (llvm::Twine *)__dst))
            goto LABEL_222;
          v287 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795)
                                       + 8)
                           + 8);
          v309 = (*(uint64_t (**)(llvm::MCAsmParser *, _BYTE *))(*(_QWORD *)v795 + 192))(v795, v864);
          *(_QWORD *)v825 = "expected identifier in directive";
          LOWORD(v826) = 259;
          if (v309)
            goto LABEL_608;
          __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"expected comma";
          LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 259;
          if (llvm::MCAsmParser::parseToken(v795, 25, (llvm::Twine *)__dst))
            goto LABEL_222;
          v287 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795)
                                       + 8)
                           + 8);
          v310 = (*(uint64_t (**)(llvm::MCAsmParser *, std::string *))(*(_QWORD *)v795 + 192))(v795, &v823);
          v810[0] = (size_t)"expected identifier in directive";
          LOWORD(v811[2]) = 259;
          if (!v310)
          {
            v311 = v795;
            v312 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 48))(v795);
            LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 261;
            *(_OWORD *)&__dst[0].__r_.__value_.__l.__data_ = *(_OWORD *)v864;
            v313 = llvm::MCContext::getOrCreateSymbol(v312, (uint64_t)__dst);
            v314 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v311 + 48))(v311);
            LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 261;
            *(_OWORD *)&__dst[0].__r_.__value_.__l.__data_ = *(_OWORD *)&v823.__r_.__value_.__l.__data_;
            v315 = llvm::MCContext::getOrCreateSymbol(v314, (uint64_t)__dst);
            v316 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v311 + 56))(v311);
            (*(void (**)(uint64_t, _QWORD, unint64_t, unint64_t))(*(_QWORD *)v316 + 744))(v316, v819, v313, v315);
            goto LABEL_156;
          }
LABEL_1309:
          v220 = (std::string *)v810;
          goto LABEL_1310;
        case 112:
          v861 = 0;
          v868[0] = 0;
          *(_QWORD *)&v818 = 0;
          v815 = 0uLL;
          v866[1] = 0;
          v866[0] = 0;
          (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795);
          if ((sub_1C60EAA40(v795, &v861, (uint64_t)".cv_inline_linetable", 20) & 1) != 0)
            goto LABEL_222;
          v217 = *(char **)(*(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795)
                                      + 8)
                          + 8);
          __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"expected SourceField in '.cv_inline_linetable' directive";
          LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 259;
          if (llvm::MCAsmParser::parseIntToken(v795, (uint64_t *)v868, (const llvm::Twine *)__dst))
            goto LABEL_222;
          v218 = v868[0];
          *(_QWORD *)v825 = "File id less than zero in '.cv_inline_linetable' directive";
          LOWORD(v826) = 259;
          if ((uint64_t)v868[0] < 1)
          {
            v220 = (std::string *)v825;
          }
          else
          {
            v217 = *(char **)(*(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795)
                                        + 8)
                            + 8);
            v810[0] = (size_t)"expected SourceLineNum in '.cv_inline_linetable' directive";
            LOWORD(v811[2]) = 259;
            if (llvm::MCAsmParser::parseIntToken(v795, (uint64_t *)&v818, (const llvm::Twine *)v810))
              goto LABEL_222;
            v219 = v818;
            *(_QWORD *)v864 = "Line number less than zero in '.cv_inline_linetable' directive";
            LOWORD(v865) = 259;
            if ((v818 & 0x8000000000000000) != 0)
            {
              v220 = (std::string *)v864;
            }
            else
            {
              v217 = *(char **)(*(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795)
                                          + 8)
                              + 8);
              v684 = (*(uint64_t (**)(llvm::MCAsmParser *, __int128 *))(*(_QWORD *)v795 + 192))(v795, &v815);
              v823.__r_.__value_.__r.__words[0] = (std::string::size_type)"expected identifier in directive";
              v824 = 259;
              if ((v684 & 1) != 0)
              {
                v220 = &v823;
              }
              else
              {
                v217 = *(char **)(*(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795)
                                            + 8)
                                + 8);
                v703 = (*(uint64_t (**)(llvm::MCAsmParser *, uint64_t *))(*(_QWORD *)v795 + 192))(v795, v866);
                v819 = "expected identifier in directive";
                v822 = 259;
                if (!v703)
                {
                  __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"Expected End of Statement";
                  LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 259;
                  if (!llvm::MCAsmParser::parseEOL(v795, (const llvm::Twine *)__dst))
                  {
                    v708 = v795;
                    v709 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 48))(v795);
                    LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 261;
                    *(_OWORD *)&__dst[0].__r_.__value_.__l.__data_ = v815;
                    v710 = llvm::MCContext::getOrCreateSymbol(v709, (uint64_t)__dst);
                    v711 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v708 + 48))(v708);
                    LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 261;
                    *(_OWORD *)&__dst[0].__r_.__value_.__l.__data_ = *(_OWORD *)v866;
                    v712 = llvm::MCContext::getOrCreateSymbol(v711, (uint64_t)__dst);
                    v713 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v708 + 56))(v708);
                    (*(void (**)(uint64_t, _QWORD, size_t, uint64_t, unint64_t, unint64_t))(*(_QWORD *)v713 + 752))(v713, v861, v218, v219, v710, v712);
                    goto LABEL_156;
                  }
                  goto LABEL_222;
                }
                v220 = (std::string *)&v819;
              }
            }
          }
LABEL_1314:
          v459 = (uint64_t)v795;
          v460 = (uint64_t)v217;
          goto LABEL_1052;
        case 113:
          if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795) + 8) == 2)
          {
            v461 = 0;
            v462 = 0;
            v463 = 0;
            do
            {
              v464 = *(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795) + 96);
              *(_OWORD *)v825 = 0uLL;
              if ((*(unsigned int (**)(llvm::MCAsmParser *, _BYTE *))(*(_QWORD *)v795 + 192))(v795, v825))
                goto LABEL_1311;
              v465 = v795;
              v466 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 48))(v795);
              LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 261;
              *(_OWORD *)&__dst[0].__r_.__value_.__l.__data_ = *(_OWORD *)v825;
              v467 = llvm::MCContext::getOrCreateSymbol(v466, (uint64_t)__dst);
              v464 = *(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v465 + 40))(v465) + 96);
              v810[0] = 0;
              v810[1] = 0;
              if ((*(unsigned int (**)(llvm::MCAsmParser *, size_t *))(*(_QWORD *)v465 + 192))(v465, v810))
              {
LABEL_1311:
                v585 = "expected identifier in directive";
                goto LABEL_1557;
              }
              v468 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 48))(v795);
              LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 261;
              *(_OWORD *)&__dst[0].__r_.__value_.__l.__data_ = *(_OWORD *)v810;
              v469 = llvm::MCContext::getOrCreateSymbol(v468, (uint64_t)__dst);
              v470 = v469;
              if (v462 >= v461)
              {
                v471 = ((char *)v462 - v463) >> 4;
                v472 = v471 + 1;
                if ((unint64_t)(v471 + 1) >> 60)
                  goto LABEL_1425;
                if (((char *)v461 - v463) >> 3 > v472)
                  v472 = ((char *)v461 - v463) >> 3;
                if ((unint64_t)((char *)v461 - v463) >= 0x7FFFFFFFFFFFFFF0)
                  v473 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v473 = v472;
                if (v473)
                {
                  if (v473 >> 60)
                    goto LABEL_1454;
                  v474 = (char *)operator new(16 * v473);
                }
                else
                {
                  v474 = 0;
                }
                v475 = (unint64_t *)&v474[16 * v471];
                *v475 = v467;
                v475[1] = v470;
                if (v462 == (unint64_t *)v463)
                {
                  v477 = v462;
                  v463 = &v474[16 * v471];
                }
                else
                {
                  v476 = &v474[16 * v471];
                  do
                  {
                    *((_OWORD *)v476 - 1) = *((_OWORD *)v462 - 1);
                    v476 -= 16;
                    v462 -= 2;
                  }
                  while (v462 != (unint64_t *)v463);
                  v477 = (unint64_t *)v463;
                  v463 = v476;
                }
                v461 = (unint64_t *)&v474[16 * v473];
                v462 = v475 + 2;
                if (v477)
                  operator delete(v477);
              }
              else
              {
                *v462 = v467;
                v462[1] = v469;
                v462 += 2;
              }
            }
            while (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795) + 8) == 2);
          }
          else
          {
            v463 = 0;
            v464 = 0;
          }
          *(_OWORD *)v825 = 0uLL;
          __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"expected comma before def_range type in .cv_de"
                                                                          "f_range directive";
          LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 259;
          if (llvm::MCAsmParser::parseToken(v795, 25, (llvm::Twine *)__dst)
            || ((*(uint64_t (**)(llvm::MCAsmParser *, _BYTE *))(*(_QWORD *)v795 + 192))(v795, v825) & 1) != 0)
          {
            v585 = "expected def_range type in directive";
          }
          else
          {
            __pd = *((unsigned int *)v795 + 212);
            if ((_DWORD)__pd)
            {
              v660 = *(_QWORD *)&v825[8];
              v794 = *(const void **)v825;
              v661 = 0;
              if (*(_QWORD *)&v825[8])
              {
                v662 = *(_QWORD *)&v825[8];
                v663 = *(unsigned __int8 **)v825;
                do
                {
                  v664 = *v663++;
                  v661 = 33 * v661 + v664;
                  --v662;
                }
                while (v662);
              }
              v665 = *((_QWORD *)v795 + 105);
              v666 = 1;
              v667 = v661;
              while (1)
              {
                v668 = v667 & (__pd - 1);
                v669 = *(_QWORD **)(v665 + 8 * v668);
                if (v669 != (_QWORD *)-8)
                {
                  if (!v669)
                    goto LABEL_1556;
                  if (*(_DWORD *)(v665 + 8 * __pd + 8 + 4 * v668) == v661
                    && v660 == *v669
                    && (!v660 || !memcmp(v794, (char *)v669 + *((unsigned int *)v795 + 215), v660)))
                  {
                    break;
                  }
                }
                v667 = v666 + v668;
                ++v666;
              }
              if ((_DWORD)v668 != -1 && (int)v668 != __pd)
              {
                switch(*(_DWORD *)(*(_QWORD *)(v665 + 8 * (int)v668) + 8))
                {
                  case 1:
                    v810[0] = 0;
                    __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"expected comma before register numbe"
                                                                                    "r in .cv_def_range directive";
                    LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 259;
                    if (llvm::MCAsmParser::parseToken(v795, 25, (llvm::Twine *)__dst)
                      || ((*(uint64_t (**)(llvm::MCAsmParser *, size_t *))(*(_QWORD *)v795 + 256))(v795, v810) & 1) != 0)
                    {
                      goto LABEL_1585;
                    }
                    v763 = *(void (**)(void))(*(_QWORD *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 56))(v795)
                                            + 784);
                    goto LABEL_1581;
                  case 2:
                    v810[0] = 0;
                    __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"expected comma before offset in .cv_"
                                                                                    "def_range directive";
                    LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 259;
                    if (llvm::MCAsmParser::parseToken(v795, 25, (llvm::Twine *)__dst)
                      || ((*(uint64_t (**)(llvm::MCAsmParser *, size_t *))(*(_QWORD *)v795 + 256))(v795, v810) & 1) != 0)
                    {
                      goto LABEL_1600;
                    }
                    v763 = *(void (**)(void))(*(_QWORD *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 56))(v795)
                                            + 792);
                    goto LABEL_1581;
                  case 3:
                    v810[0] = 0;
                    *(_QWORD *)v864 = 0;
                    __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"expected comma before register numbe"
                                                                                    "r in .cv_def_range directive";
                    LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 259;
                    if (llvm::MCAsmParser::parseToken(v795, 25, (llvm::Twine *)__dst)
                      || ((*(uint64_t (**)(llvm::MCAsmParser *, size_t *))(*(_QWORD *)v795 + 256))(v795, v810) & 1) != 0)
                    {
LABEL_1585:
                      v585 = "expected register number";
                      goto LABEL_1557;
                    }
                    __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"expected comma before offset in .cv_"
                                                                                    "def_range directive";
                    LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 259;
                    if (!llvm::MCAsmParser::parseToken(v795, 25, (llvm::Twine *)__dst)
                      && ((*(uint64_t (**)(llvm::MCAsmParser *, _BYTE *))(*(_QWORD *)v795 + 256))(v795, v864) & 1) == 0)
                    {
                      v763 = *(void (**)(void))(*(_QWORD *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 56))(v795)
                                              + 776);
                      goto LABEL_1581;
                    }
LABEL_1600:
                    v585 = "expected offset value";
                    goto LABEL_1557;
                  case 4:
                    v810[0] = 0;
                    *(_QWORD *)v864 = 0;
                    v823.__r_.__value_.__r.__words[0] = 0;
                    __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"expected comma before register numbe"
                                                                                    "r in .cv_def_range directive";
                    LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 259;
                    if (llvm::MCAsmParser::parseToken(v795, 25, (llvm::Twine *)__dst)
                      || ((*(uint64_t (**)(llvm::MCAsmParser *, size_t *))(*(_QWORD *)v795 + 256))(v795, v810) & 1) != 0)
                    {
                      v585 = "expected register value";
                      goto LABEL_1557;
                    }
                    __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"expected comma before flag value in "
                                                                                    ".cv_def_range directive";
                    LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 259;
                    if (llvm::MCAsmParser::parseToken(v795, 25, (llvm::Twine *)__dst)
                      || ((*(uint64_t (**)(llvm::MCAsmParser *, _BYTE *))(*(_QWORD *)v795 + 256))(v795, v864) & 1) != 0)
                    {
                      v585 = "expected flag value";
                      goto LABEL_1557;
                    }
                    __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"expected comma before base pointer o"
                                                                                    "ffset in .cv_def_range directive";
                    LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 259;
                    if (llvm::MCAsmParser::parseToken(v795, 25, (llvm::Twine *)__dst)
                      || ((*(uint64_t (**)(llvm::MCAsmParser *, std::string *))(*(_QWORD *)v795 + 256))(v795, &v823) & 1) != 0)
                    {
                      v585 = "expected base pointer offset value";
                      goto LABEL_1557;
                    }
                    v763 = *(void (**)(void))(*(_QWORD *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 56))(v795)
                                            + 768);
LABEL_1581:
                    v763();
                    v9 = 1;
                    if (!v463)
                      goto LABEL_288;
                    goto LABEL_1558;
                  default:
                    break;
                }
              }
            }
LABEL_1556:
            v585 = "unexpected def_range type in .cv_def_range directive";
          }
LABEL_1557:
          __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v585;
          LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 259;
          v9 = llvm::MCAsmParser::Error((uint64_t)v795, v464, (uint64_t)__dst, 0, 0);
          if (!v463)
            goto LABEL_288;
LABEL_1558:
          v262 = v463;
          goto LABEL_691;
        case 114:
          v228 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 56))(v795);
          (*(void (**)(uint64_t))(*(_QWORD *)v228 + 800))(v228);
          goto LABEL_156;
        case 115:
          memset(__dst, 0, 24);
          if (((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 264))(v795) & 1) != 0
            || ((*(uint64_t (**)(llvm::MCAsmParser *, std::string *))(*(_QWORD *)v795 + 208))(v795, __dst) & 1) != 0)
          {
            goto LABEL_651;
          }
          llvm::MCContext::getCVContext(*((llvm::MCContext **)v795 + 27));
          if ((__dst[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v197 = __dst;
          else
            v197 = (std::string *)__dst[0].__r_.__value_.__r.__words[0];
          if ((__dst[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v198 = *((_BYTE *)&__dst[0].__r_.__value_.__s + 23) & 0x7F;
          else
            v198 = __dst[0].__r_.__value_.__l.__size_;
          llvm::CodeViewContext::addToStringTable(v196, (unsigned __int8 *)v197, v198, (uint64_t)v825);
          v199 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 56))(v795);
          (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v199 + 512))(v199, *(unsigned int *)&v825[16], 4);
          goto LABEL_688;
        case 116:
          v307 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 56))(v795);
          (*(void (**)(uint64_t))(*(_QWORD *)v307 + 808))(v307);
          goto LABEL_156;
        case 117:
          *(_QWORD *)v825 = 0;
          __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"expected identifier in directive";
          LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 259;
          if (llvm::MCAsmParser::parseIntToken(v795, (uint64_t *)v825, (const llvm::Twine *)__dst))
            goto LABEL_222;
          __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"Expected End of Statement";
          LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 259;
          if (llvm::MCAsmParser::parseEOL(v795, (const llvm::Twine *)__dst))
            goto LABEL_222;
          v195 = *(void (**)(void))(*(_QWORD *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 56))(v795)
                                  + 816);
          goto LABEL_574;
        case 118:
          (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795);
          *(_OWORD *)v825 = 0uLL;
          if ((*(unsigned int (**)(llvm::MCAsmParser *, _BYTE *))(*(_QWORD *)v795 + 192))(v795, v825))
          {
            v216 = "expected symbol name";
            goto LABEL_1049;
          }
          if (llvm::MCAsmParser::parseEOL(v795))
            goto LABEL_222;
          v586 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 48))(v795);
          LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 261;
          *(_OWORD *)&__dst[0].__r_.__value_.__l.__data_ = *(_OWORD *)v825;
          llvm::MCContext::getOrCreateSymbol(v586, (uint64_t)__dst);
          v195 = *(void (**)(void))(*(_QWORD *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 56))(v795)
                                  + 824);
LABEL_574:
          v195();
          goto LABEL_156;
        case 119:
          *(_OWORD *)v825 = 0uLL;
          v488 = 0;
          v489 = 0;
          if (llvm::MCAsmParser::parseOptionalToken(v795, 9))
            goto LABEL_968;
          while (2)
          {
            if ((*(unsigned int (**)(llvm::MCAsmParser *, _BYTE *))(*(_QWORD *)v795 + 192))(v795, v825))
            {
              v216 = "expected .eh_frame or .debug_frame";
              goto LABEL_1049;
            }
            if (*(_QWORD *)&v825[8] == 12)
            {
              v589 = **(_QWORD **)v825 == 0x665F67756265642ELL && *(_DWORD *)(*(_QWORD *)v825 + 8) == 1701667186;
            }
            else
            {
              if (*(_QWORD *)&v825[8] == 9
                && **(_QWORD **)v825 == 0x6D6172665F68652ELL
                && *(_BYTE *)(*(_QWORD *)v825 + 8) == 101)
              {
                v489 = 1;
                goto LABEL_1186;
              }
              v589 = 0;
            }
            v488 |= v589;
LABEL_1186:
            if (!llvm::MCAsmParser::parseOptionalToken(v795, 9))
            {
              __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"expected comma";
              LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 259;
              v9 = 1;
              if (llvm::MCAsmParser::parseToken(v795, 25, (llvm::Twine *)__dst))
                goto LABEL_288;
              continue;
            }
            break;
          }
LABEL_968:
          v490 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 56))(v795);
          (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v490 + 856))(v490, v489 & 1, v488 & 1);
          goto LABEL_156;
        case 120:
          *(_OWORD *)v825 = 0uLL;
          if (llvm::MCAsmParser::parseOptionalToken(v795, 9))
            goto LABEL_941;
          if (((*(uint64_t (**)(llvm::MCAsmParser *, _BYTE *))(*(_QWORD *)v795 + 192))(v795, v825) & 1) != 0
            || *(_QWORD *)&v825[8] != 6)
          {
            __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"unexpected token";
            LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 259;
            v269 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795);
            goto LABEL_992;
          }
          v702 = **(_DWORD **)v825 != 1886218611 || *(_WORD *)(*(_QWORD *)v825 + 4) != 25964;
          __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"unexpected token";
          LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 259;
          v269 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795);
          if (v702)
            goto LABEL_992;
          if (!llvm::MCAsmParser::parseEOL(v795))
          {
LABEL_941:
            v478 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 56))(v795);
            llvm::MCStreamer::emitCFIStartProc(v478, *(_QWORD *)&v825[8] != 0, *((_QWORD *)v795 + 17));
            goto LABEL_156;
          }
          goto LABEL_222;
        case 121:
          if (llvm::MCAsmParser::parseEOL(v795))
            goto LABEL_222;
          v479 = (llvm::MCStreamer *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 56))(v795);
          CurrentDwarfFrameInfo = llvm::MCStreamer::getCurrentDwarfFrameInfo(v479);
          if (CurrentDwarfFrameInfo)
            (*(void (**)(llvm::MCStreamer *, uint64_t))(*(_QWORD *)v479 + 8))(v479, CurrentDwarfFrameInfo);
          goto LABEL_156;
        case 122:
          *(_QWORD *)v825 = 0;
          v810[0] = 0;
          if ((sub_1C60EAE68((_QWORD **)v795, v825, (uint64_t)v805) & 1) != 0)
            goto LABEL_222;
          __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"expected comma";
          LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 259;
          if (llvm::MCAsmParser::parseToken(v795, 25, (llvm::Twine *)__dst)
            || ((*(uint64_t (**)(llvm::MCAsmParser *, size_t *))(*(_QWORD *)v795 + 256))(v795, v810) & 1) != 0
            || llvm::MCAsmParser::parseEOL(v795))
          {
            goto LABEL_222;
          }
          v195 = *(void (**)(void))(*(_QWORD *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 56))(v795)
                                  + 864);
          goto LABEL_574;
        case 123:
          __dst[0].__r_.__value_.__r.__words[0] = 0;
          if (((*(uint64_t (**)(llvm::MCAsmParser *, std::string *))(*(_QWORD *)v795 + 256))(v795, __dst) & 1) != 0
            || llvm::MCAsmParser::parseEOL(v795))
          {
            goto LABEL_222;
          }
          v293 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 56))(v795);
          (*(void (**)(uint64_t, std::string::size_type))(*(_QWORD *)v293 + 872))(v293, __dst[0].__r_.__value_.__r.__words[0]);
          goto LABEL_156;
        case 124:
          __dst[0].__r_.__value_.__r.__words[0] = 0;
          if (((*(uint64_t (**)(llvm::MCAsmParser *, std::string *))(*(_QWORD *)v795 + 256))(v795, __dst) & 1) != 0
            || llvm::MCAsmParser::parseEOL(v795))
          {
            goto LABEL_222;
          }
          v321 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 56))(v795);
          (*(void (**)(uint64_t, std::string::size_type))(*(_QWORD *)v321 + 960))(v321, __dst[0].__r_.__value_.__r.__words[0]);
          goto LABEL_156;
        case 125:
          __dst[0].__r_.__value_.__r.__words[0] = 0;
          if ((sub_1C60EAE68((_QWORD **)v795, __dst, (uint64_t)v805) & 1) != 0 || llvm::MCAsmParser::parseEOL(v795))
            goto LABEL_222;
          v300 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 56))(v795);
          (*(void (**)(uint64_t, std::string::size_type))(*(_QWORD *)v300 + 880))(v300, __dst[0].__r_.__value_.__r.__words[0]);
          goto LABEL_156;
        case 126:
          *(_QWORD *)v825 = 0;
          v810[0] = 0;
          *(_QWORD *)v864 = 0;
          if ((sub_1C60EAE68((_QWORD **)v795, v825, (uint64_t)v805) & 1) != 0)
            goto LABEL_222;
          __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"expected comma";
          LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 259;
          if (llvm::MCAsmParser::parseToken(v795, 25, (llvm::Twine *)__dst))
            goto LABEL_222;
          if (((*(uint64_t (**)(llvm::MCAsmParser *, size_t *))(*(_QWORD *)v795 + 256))(v795, v810) & 1) != 0)
            goto LABEL_222;
          __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"expected comma";
          LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 259;
          if (llvm::MCAsmParser::parseToken(v795, 25, (llvm::Twine *)__dst)
            || ((*(uint64_t (**)(llvm::MCAsmParser *, _BYTE *))(*(_QWORD *)v795 + 256))(v795, v864) & 1) != 0
            || llvm::MCAsmParser::parseEOL(v795))
          {
            goto LABEL_222;
          }
          v195 = *(void (**)(void))(*(_QWORD *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 56))(v795)
                                  + 888);
          goto LABEL_574;
        case 127:
          *(_QWORD *)v825 = 0;
          v810[0] = 0;
          if ((sub_1C60EAE68((_QWORD **)v795, v825, (uint64_t)v805) & 1) != 0)
            goto LABEL_222;
          __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"expected comma";
          LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 259;
          if (llvm::MCAsmParser::parseToken(v795, 25, (llvm::Twine *)__dst)
            || ((*(uint64_t (**)(llvm::MCAsmParser *, size_t *))(*(_QWORD *)v795 + 256))(v795, v810) & 1) != 0
            || llvm::MCAsmParser::parseEOL(v795))
          {
            goto LABEL_222;
          }
          v195 = *(void (**)(void))(*(_QWORD *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 56))(v795)
                                  + 896);
          goto LABEL_574;
        case 128:
          *(_QWORD *)v825 = 0;
          v810[0] = 0;
          if ((sub_1C60EAE68((_QWORD **)v795, v825, (uint64_t)v805) & 1) != 0)
            goto LABEL_222;
          __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"expected comma";
          LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 259;
          if (llvm::MCAsmParser::parseToken(v795, 25, (llvm::Twine *)__dst)
            || ((*(uint64_t (**)(llvm::MCAsmParser *, size_t *))(*(_QWORD *)v795 + 256))(v795, v810) & 1) != 0
            || llvm::MCAsmParser::parseEOL(v795))
          {
            goto LABEL_222;
          }
          v195 = *(void (**)(void))(*(_QWORD *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 56))(v795)
                                  + 952);
          goto LABEL_574;
        case 129:
          v224 = v795;
          v225 = 1;
          goto LABEL_582;
        case 130:
          v224 = v795;
          v225 = 0;
LABEL_582:
          v62 = sub_1C60E63D4(v224, v225);
          goto LABEL_287;
        case 131:
          if (llvm::MCAsmParser::parseEOL(v795))
            goto LABEL_222;
          v506 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 56))(v795);
          (*(void (**)(uint64_t))(*(_QWORD *)v506 + 920))(v506);
          goto LABEL_156;
        case 132:
          if (llvm::MCAsmParser::parseEOL(v795))
            goto LABEL_222;
          v494 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 56))(v795);
          (*(void (**)(uint64_t))(*(_QWORD *)v494 + 928))(v494);
          goto LABEL_156;
        case 133:
          __dst[0].__r_.__value_.__r.__words[0] = 0;
          if ((sub_1C60EAE68((_QWORD **)v795, __dst, (uint64_t)v805) & 1) != 0 || llvm::MCAsmParser::parseEOL(v795))
            goto LABEL_222;
          v308 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 56))(v795);
          (*(void (**)(uint64_t, std::string::size_type))(*(_QWORD *)v308 + 936))(v308, __dst[0].__r_.__value_.__r.__words[0]);
          goto LABEL_156;
        case 134:
          __dst[0].__r_.__value_.__r.__words[0] = 0;
          if ((sub_1C60EAE68((_QWORD **)v795, __dst, (uint64_t)v805) & 1) != 0 || llvm::MCAsmParser::parseEOL(v795))
            goto LABEL_222;
          v328 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 56))(v795);
          (*(void (**)(uint64_t, std::string::size_type))(*(_QWORD *)v328 + 944))(v328, __dst[0].__r_.__value_.__r.__words[0]);
          goto LABEL_156;
        case 135:
          memset(__dst, 0, 24);
          *(_QWORD *)v825 = 0;
          if (((*(uint64_t (**)(llvm::MCAsmParser *, _BYTE *))(*(_QWORD *)v795 + 256))(v795, v825) & 1) != 0)
            goto LABEL_651;
          std::string::push_back(__dst, v825[0]);
          if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795) + 8) != 25)
            goto LABEL_681;
          do
          {
            (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 184))(v795);
            if (((*(uint64_t (**)(llvm::MCAsmParser *, _BYTE *))(*(_QWORD *)v795 + 256))(v795, v825) & 1) != 0)
            {
LABEL_651:
              v9 = 1;
              goto LABEL_689;
            }
            std::string::push_back(__dst, v825[0]);
          }
          while (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795) + 8) == 25);
LABEL_681:
          v344 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 56))(v795);
          if ((__dst[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v345 = __dst;
          else
            v345 = (std::string *)__dst[0].__r_.__value_.__r.__words[0];
          if ((__dst[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v346 = *((_BYTE *)&__dst[0].__r_.__value_.__s + 23) & 0x7F;
          else
            v346 = __dst[0].__r_.__value_.__l.__size_;
          (*(void (**)(uint64_t, std::string *, std::string::size_type))(*(_QWORD *)v344 + 968))(v344, v345, v346);
LABEL_688:
          v9 = 0;
LABEL_689:
          if ((SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
            goto LABEL_288;
          v262 = (void *)__dst[0].__r_.__value_.__r.__words[0];
          goto LABEL_691;
        case 136:
          __dst[0].__r_.__value_.__r.__words[0] = 0;
          if ((sub_1C60EAE68((_QWORD **)v795, __dst, (uint64_t)v805) & 1) != 0 || llvm::MCAsmParser::parseEOL(v795))
            goto LABEL_222;
          v194 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 56))(v795);
          (*(void (**)(uint64_t, std::string::size_type))(*(_QWORD *)v194 + 976))(v194, __dst[0].__r_.__value_.__r.__words[0]);
          goto LABEL_156;
        case 137:
          if (llvm::MCAsmParser::parseEOL(v795))
            goto LABEL_222;
          v456 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 56))(v795);
          (*(void (**)(uint64_t))(*(_QWORD *)v456 + 992))(v456);
          goto LABEL_156;
        case 138:
          __dst[0].__r_.__value_.__r.__words[0] = 0;
          if ((sub_1C60EAE68((_QWORD **)v795, __dst, (uint64_t)v805) & 1) != 0 || llvm::MCAsmParser::parseEOL(v795))
            goto LABEL_222;
          v265 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 56))(v795);
          (*(void (**)(uint64_t, std::string::size_type))(*(_QWORD *)v265 + 1000))(v265, __dst[0].__r_.__value_.__r.__words[0]);
          goto LABEL_156;
        case 139:
          v329 = v805;
          *(_QWORD *)v825 = 0;
          v810[0] = 0;
          if ((sub_1C60EAE68((_QWORD **)v795, v825, (uint64_t)v805) & 1) != 0)
            goto LABEL_222;
          __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"expected comma";
          LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 259;
          if (llvm::MCAsmParser::parseToken(v795, 25, (llvm::Twine *)__dst)
            || (sub_1C60EAE68((_QWORD **)v795, v810, (uint64_t)v329) & 1) != 0
            || llvm::MCAsmParser::parseEOL(v795))
          {
            goto LABEL_222;
          }
          v195 = *(void (**)(void))(*(_QWORD *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 56))(v795)
                                  + 1008);
          goto LABEL_574;
        case 140:
          if (llvm::MCAsmParser::parseEOL(v795))
            goto LABEL_222;
          v481 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 56))(v795);
          (*(void (**)(uint64_t))(*(_QWORD *)v481 + 1016))(v481);
          goto LABEL_156;
        case 142:
        case 143:
          if (llvm::MCAsmParser::parseEOL(v795))
            goto LABEL_222;
          v411 = v105 == 10 && *(_QWORD *)v790 == 0x5F736F7263616D2ELL && v790[4] == 28271;
          v9 = 0;
          *((_BYTE *)v795 + 424) = *((_BYTE *)v795 + 424) & 0xFE | v411;
          goto LABEL_288;
        case 144:
        case 145:
          if (llvm::MCAsmParser::parseEOL(v795))
            goto LABEL_222;
          v413 = v105 == 9 && *(_QWORD *)v790 == 0x7263616D746C612ELL && *((_BYTE *)v790 + 8) == 111;
          v9 = 0;
          *((_BYTE *)v795 + 807) = v413;
          goto LABEL_288;
        case 146:
          v770 = v805;
          v868[1] = 0;
          v868[0] = 0;
          if ((*(unsigned int (**)(llvm::MCAsmParser *, size_t *))(*(_QWORD *)v795 + 192))(v795, v868))
          {
            v216 = "expected identifier in '.macro' directive";
            goto LABEL_1049;
          }
          if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795) + 8) == 25)
            (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 184))(v795);
          v866[1] = 0;
          v866[0] = 0;
          v867 = 0;
          if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795) + 8) == 9)
            goto LABEL_391;
          do
          {
            if (v866[0] != v866[1] && *(_BYTE *)(v866[1] - 7))
            {
              v687 = *((_QWORD *)v795 + 17);
              LOWORD(v811[2]) = 1283;
              v810[0] = (size_t)"vararg parameter '";
              v811[0] = *(_QWORD *)(v866[1] - 48);
              v811[1] = *(_QWORD *)(v866[1] - 40);
              __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v810;
              __dst[0].__r_.__value_.__r.__words[2] = (std::string::size_type)"' should be the last parameter";
              LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 770;
              v9 = llvm::MCAsmParser::Error((uint64_t)v795, v687, (uint64_t)__dst, 0, 0);
              goto LABEL_1124;
            }
            memset(__dst, 0, 42);
            if ((*(unsigned int (**)(llvm::MCAsmParser *, std::string *))(*(_QWORD *)v795 + 192))(v795, __dst))
            {
              v810[0] = (size_t)"expected identifier in '.macro' directive";
              v405 = 259;
              goto LABEL_795;
            }
            v200 = v866[0];
            v201 = v866[1];
            if (v866[0] != v866[1])
            {
              v202 = *(_OWORD *)&__dst[0].__r_.__value_.__l.__data_;
              while (*(_QWORD *)(v200 + 8) != *((_QWORD *)&v202 + 1)
                   || *((_QWORD *)&v202 + 1) && memcmp(*(const void **)v200, (const void *)v202, *((size_t *)&v202 + 1)))
              {
                v200 += 48;
                if (v200 == v201)
                  goto LABEL_365;
              }
              v822 = 1283;
              v819 = "macro '";
              v821 = *(_OWORD *)v868;
              v823.__r_.__value_.__r.__words[0] = (std::string::size_type)&v819;
              v823.__r_.__value_.__r.__words[2] = (std::string::size_type)"' has multiple parameters named '";
              v405 = 770;
              v824 = 770;
              *(_QWORD *)v864 = &v823;
              *(_OWORD *)&v864[16] = v202;
              LOWORD(v865) = 1282;
              v810[0] = (size_t)v864;
              v810[1] = *((_QWORD *)&v202 + 1);
              v811[0] = "'";
LABEL_795:
              LOWORD(v811[2]) = v405;
              v406 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795);
              llvm::MCAsmParser::Error((uint64_t)v795, *(_QWORD *)(v406 + 96), (uint64_t)v810, 0, 0);
LABEL_796:
              v9 = 1;
LABEL_797:
              v810[0] = (size_t)&__dst[0].__r_.__value_.__r.__words[2];
              sub_1C5934A7C((void ***)v810);
              goto LABEL_1124;
            }
LABEL_365:
            if (**(_DWORD **)v7 == 10)
            {
              (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 184))(v795);
              v818 = 0uLL;
              v203 = *((_QWORD *)v795 + 17);
              if ((*(unsigned int (**)(llvm::MCAsmParser *, __int128 *))(*(_QWORD *)v795 + 192))(v795, &v818))
              {
                v822 = 1283;
                v819 = "missing parameter qualifier for '";
                v821 = *(_OWORD *)&__dst[0].__r_.__value_.__l.__data_;
                v823.__r_.__value_.__r.__words[0] = (std::string::size_type)&v819;
                v823.__r_.__value_.__r.__words[2] = (std::string::size_type)"' in macro '";
                v824 = 770;
                *(_QWORD *)v864 = &v823;
                *(_OWORD *)&v864[16] = *(_OWORD *)v868;
                LOWORD(v865) = 1282;
                v810[0] = (size_t)v864;
                v811[0] = "'";
                LOWORD(v811[2]) = 770;
              }
              else
              {
                if (*((_QWORD *)&v818 + 1) != 6)
                {
                  if (*((_QWORD *)&v818 + 1) != 3)
                    goto LABEL_1376;
                  if (*(_WORD *)v818 != 25970 || *(_BYTE *)(v818 + 2) != 113)
                    goto LABEL_1376;
                  __dst[1].__r_.__value_.__s.__data_[16] = 1;
                  goto LABEL_381;
                }
                if (*(_DWORD *)v818 == 1634886006 && *(_WORD *)(v818 + 4) == 26482)
                {
                  __dst[1].__r_.__value_.__s.__data_[17] = 1;
                  goto LABEL_381;
                }
LABEL_1376:
                v817 = 773;
                v815 = v818;
                v816 = " is not a valid parameter qualifier for '";
                v819 = (char *)&v815;
                v821 = *(_OWORD *)&__dst[0].__r_.__value_.__l.__data_;
                v822 = 1282;
                v823.__r_.__value_.__r.__words[0] = (std::string::size_type)&v819;
                v823.__r_.__value_.__r.__words[2] = (std::string::size_type)"' in macro '";
                v824 = 770;
                *(_QWORD *)v864 = &v823;
                *(_OWORD *)&v864[16] = *(_OWORD *)v868;
                LOWORD(v865) = 1282;
                v810[0] = (size_t)v864;
                v811[0] = "'";
                LOWORD(v811[2]) = 770;
              }
              v9 = llvm::MCAsmParser::Error((uint64_t)v795, v203, (uint64_t)v810, 0, 0);
              goto LABEL_797;
            }
LABEL_381:
            if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795) + 8) == 27)
            {
              (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 184))(v795);
              v206 = *((_QWORD *)v795 + 17);
              if ((sub_1C60E81D4((uint64_t)v795, (uint64_t)&__dst[0].__r_.__value_.__r.__words[2], 0) & 1) != 0)
                goto LABEL_796;
              if (__dst[1].__r_.__value_.__s.__data_[16])
              {
                v822 = 1283;
                v819 = "pointless default value for required parameter '";
                v821 = *(_OWORD *)&__dst[0].__r_.__value_.__l.__data_;
                v823.__r_.__value_.__r.__words[0] = (std::string::size_type)&v819;
                v823.__r_.__value_.__r.__words[2] = (std::string::size_type)"' in macro '";
                v824 = 770;
                *(_QWORD *)v864 = &v823;
                *(_OWORD *)&v864[16] = *(_OWORD *)v868;
                LOWORD(v865) = 1282;
                v810[0] = (size_t)v864;
                v811[0] = "'";
                LOWORD(v811[2]) = 770;
                (*(void (**)(llvm::MCAsmParser *, uint64_t, size_t *, _QWORD, _QWORD))(*(_QWORD *)v795 + 168))(v795, v206, v810, 0, 0);
              }
            }
            v207 = v866[1];
            if (v866[1] >= v867)
            {
              v208 = sub_1C60EAFC0(v866, (uint64_t)__dst);
            }
            else
            {
              *(_OWORD *)v866[1] = *(_OWORD *)&__dst[0].__r_.__value_.__l.__data_;
              *(_QWORD *)(v207 + 24) = 0;
              *(_QWORD *)(v207 + 32) = 0;
              *(_QWORD *)(v207 + 16) = 0;
              *(_OWORD *)(v207 + 16) = *(_OWORD *)&__dst[0].__r_.__value_.__r.__words[2];
              *(_QWORD *)(v207 + 32) = __dst[1].__r_.__value_.__l.__size_;
              memset(&__dst[0].__r_.__value_.__r.__words[2], 0, sizeof(std::string));
              *(_WORD *)(v207 + 40) = __dst[1].__r_.__value_.__r.__words[2];
              v208 = v207 + 48;
            }
            v866[1] = v208;
            if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795) + 8) == 25)
              (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 184))(v795);
            v810[0] = (size_t)&__dst[0].__r_.__value_.__r.__words[2];
            sub_1C5934A7C((void ***)v810);
          }
          while (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795) + 8) != 9);
LABEL_391:
          sub_1C60E57B0(v772);
          v810[1] = 0;
          v811[0] = 0;
          LODWORD(v811[2]) = 1;
          v811[1] = 0;
          v209 = *(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795) + 8);
          v781 = *(unsigned int *)(v209 + 32);
          __pb = *(_BYTE **)(v209 + 8);
          if (v781 > 0x40)
          {
            v778 = (void *)operator new[]();
            memcpy(v778, *(const void **)(v209 + 24), ((unint64_t)(v781 + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            v778 = *(void **)(v209 + 24);
          }
          v348 = 0;
          while (2)
          {
            while (**(_DWORD **)v7 == 1)
              sub_1C60E57B0(v772);
            if (!**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795) + 8))
            {
              __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"no matching '.endmacro' in definition";
              LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 259;
              v9 = llvm::MCAsmParser::Error((uint64_t)v795, (uint64_t)v770, (uint64_t)__dst, 0, 0);
              v775 = 0;
              v791 = 1;
              goto LABEL_1118;
            }
            if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795) + 8) != 2)
            {
              if (**(_DWORD **)v7 == 8)
              {
                v352 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795);
                sub_1C60E4DB0((uint64_t)v795, *(_QWORD *)(v352 + 96), 1);
              }
              goto LABEL_754;
            }
            v349 = *(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795) + 8);
            if (*(_DWORD *)v349 == 2)
            {
              v350 = *(int **)(v349 + 8);
              v351 = *(_QWORD *)(v349 + 16);
            }
            else
            {
              v350 = *(int **)(v349 + 8);
              v353 = *(_QWORD *)(v349 + 16);
              v354 = v353 - 1;
              v355 = v353 != 0;
              if (v353)
                v350 = (int *)((char *)v350 + 1);
              if (v355 > v354)
                v354 = v353 != 0;
              if (v353 < v354)
                v354 = v353;
              v351 = v354 - v355;
            }
            if (v351 != 5
              || ((v356 = *v350, v357 = *((unsigned __int8 *)v350 + 4), v356 == 1684956462)
                ? (v358 = v357 == 109)
                : (v358 = 0),
                  !v358))
            {
              v359 = *(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795) + 8);
              if (*(_DWORD *)v359 == 2)
              {
                v360 = *(uint64_t **)(v359 + 8);
                v361 = *(_QWORD *)(v359 + 16);
              }
              else
              {
                v360 = *(uint64_t **)(v359 + 8);
                v362 = *(_QWORD *)(v359 + 16);
                v363 = v362 - 1;
                v364 = v362 != 0;
                if (v362)
                  v360 = (uint64_t *)((char *)v360 + 1);
                if (v364 > v363)
                  v363 = v362 != 0;
                if (v362 < v363)
                  v363 = v362;
                v361 = v363 - v364;
              }
              if (v361 != 9
                || ((v365 = *v360, v366 = *((unsigned __int8 *)v360 + 8), v365 == 0x7263616D646E652ELL)
                  ? (v367 = v366 == 111)
                  : (v367 = 0),
                    !v367))
              {
                v368 = *(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795) + 8);
                if (*(_DWORD *)v368 == 2)
                {
                  v369 = *(int **)(v368 + 8);
                  v370 = *(_QWORD *)(v368 + 16);
                }
                else
                {
                  v369 = *(int **)(v368 + 8);
                  v371 = *(_QWORD *)(v368 + 16);
                  v372 = v371 - 1;
                  v373 = v371 != 0;
                  if (v371)
                    v369 = (int *)((char *)v369 + 1);
                  if (v373 > v372)
                    v372 = v371 != 0;
                  if (v371 < v372)
                    v372 = v371;
                  v370 = v372 - v373;
                }
                if (v370 == 6)
                {
                  v374 = *v369;
                  v375 = *((unsigned __int16 *)v369 + 2);
                  v377 = v374 == 1667329326 && v375 == 28530;
                }
                else
                {
                  v377 = 0;
                }
                v348 += v377;
                goto LABEL_754;
              }
            }
            if (v348)
            {
              --v348;
LABEL_754:
              (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 224))(v795);
              continue;
            }
            break;
          }
          v378 = *(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795) + 8);
          *(_OWORD *)v810 = *(_OWORD *)v378;
          v811[0] = *(_QWORD *)(v378 + 16);
          v791 = *(_DWORD *)(v378 + 32);
          if (v791 > 0x40)
          {
            llvm::APInt::reallocate((uint64_t)&v811[1], v791);
            v791 = v811[2];
            if (LODWORD(v811[2]) <= 0x40)
            {
              v775 = *(_QWORD *)(v378 + 24);
              v811[1] = v775;
            }
            else
            {
              v775 = v811[1];
              memcpy((void *)v811[1], *(const void **)(v378 + 24), (((unint64_t)LODWORD(v811[2]) + 63) >> 3) & 0x3FFFFFF8);
            }
          }
          else
          {
            v775 = *(_QWORD *)(v378 + 24);
            v811[1] = v775;
            LODWORD(v811[2]) = v791;
          }
          sub_1C60E57B0(v772);
          if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795) + 8) == 9)
          {
            v391 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 48))(v795);
            v392 = *(unsigned int *)(v391 + 1976);
            if (!(_DWORD)v392)
              goto LABEL_1071;
            v393 = v868[1];
            v394 = (const void *)v868[0];
            v395 = 0;
            if (v868[1])
            {
              v396 = v868[1];
              v397 = (unsigned __int8 *)v868[0];
              do
              {
                v398 = *v397++;
                v395 = 33 * v395 + v398;
                --v396;
              }
              while (v396);
            }
            v399 = *(_QWORD *)(v391 + 1968);
            v400 = *(unsigned int *)(v391 + 1988);
            v401 = 1;
            v402 = v395;
            while (1)
            {
              v403 = v402 & (v392 - 1);
              v404 = *(_QWORD **)(v399 + 8 * v403);
              if (v404 != (_QWORD *)-8)
              {
                if (!v404)
                  goto LABEL_1071;
                if (*(_DWORD *)(v399 + 8 * v392 + 8 + 4 * v403) == v395
                  && v393 == *v404
                  && (!v393 || !memcmp(v394, (char *)v404 + v400, v393)))
                {
                  break;
                }
              }
              v402 = v401 + v403;
              ++v401;
            }
            if ((_DWORD)v403 == -1 || (int)v403 == v392)
            {
LABEL_1071:
              v773 = v810[1] - (_QWORD)__pb;
              if (-1431655765 * ((v866[1] - v866[0]) >> 4))
                v543 = v810[1] == (_QWORD)__pb;
              else
                v543 = 1;
              if (!v543)
              {
                v768 = -1431655765 * ((v866[1] - v866[0]) >> 4);
                v769 = 0;
                v767 = v866[0] + 8;
                v544 = MEMORY[0x1E0C80978];
                v545 = v810[1] - (_QWORD)__pb;
                v546 = __pb;
                do
                {
                  v547 = 1;
                  while (1)
                  {
                    v548 = v546[v547 - 1];
                    if (v545 != v547 && v548 == 92)
                      break;
                    if (v545 != v547 && v548 == 36)
                    {
                      v549 = v546[v547];
                      if ((_DWORD)v549 == 36 || (_DWORD)v549 == 110 || (*(_DWORD *)(v544 + 4 * v549 + 60) & 0x400) != 0)
                      {
                        v84 = (_DWORD)v549 == 36;
                        v550 = HIDWORD(v769);
                        if (!v84)
                          v550 = 1;
                        HIDWORD(v769) = v550;
                        v551 = v547 + 1;
                        goto LABEL_1110;
                      }
                    }
                    if (++v547 - v545 == 1)
                      goto LABEL_1114;
                  }
                  LODWORD(v552) = v547;
                  do
                  {
                    v553 = v546[v552];
                    if ((char)v546[v552] < 0)
                      v554 = __maskrune(v546[v552], 0x500uLL);
                    else
                      v554 = *(_DWORD *)(v544 + 4 * v553 + 60) & 0x500;
                    v551 = v552;
                    if (!v554
                      && ((v553 - 36) > 0x3B
                       || ((1 << (v553 - 36)) & 0x800000000000401) == 0))
                    {
                      break;
                    }
                    v552 = (v552 + 1);
                  }
                  while (v545 != v552);
                  v557 = (_QWORD *)v767;
                  v556 = v768;
                  while (v547 - v551 + *v557
                       || v547 != v551 && memcmp((const void *)*(v557 - 1), &v546[v547], v551 - v547))
                  {
                    v557 += 6;
                    if (!--v556)
                      goto LABEL_1107;
                  }
                  if ((_DWORD)v556)
                  {
                    LOBYTE(v769) = 1;
                    goto LABEL_1110;
                  }
LABEL_1107:
                  if (v546[v547] == 40 && v546[v547 + 1] == 41)
                    v551 = v547 + 2;
LABEL_1110:
                  if (v545 >= v551)
                    v558 = v551;
                  else
                    v558 = v545;
                  v546 += v558;
                  v545 -= v558;
                }
                while (v545);
LABEL_1114:
                if ((v769 & 1) == 0 && (v769 & 0x100000000) != 0)
                {
                  __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"macro defined with named parameters wh"
                                                                                  "ich are not used in macro body, possib"
                                                                                  "le positional parameter found in body "
                                                                                  "which will have no effect";
                  LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 259;
                  (*(void (**)(llvm::MCAsmParser *, char *, std::string *, _QWORD, _QWORD))(*(_QWORD *)v795 + 168))(v795, v770, __dst, 0, 0);
                }
              }
              v559 = v867;
              v771 = *(_OWORD *)v866;
              v867 = 0;
              v866[1] = 0;
              v866[0] = 0;
              *(_OWORD *)&__dst[0].__r_.__value_.__l.__data_ = *(_OWORD *)v868;
              __dst[0].__r_.__value_.__r.__words[2] = (std::string::size_type)__pb;
              __dst[1].__r_.__value_.__r.__words[0] = v773;
              v863 = 0;
              v861 = 0;
              v862 = 0;
              v873 = 0;
              *(_QWORD *)v864 = &v861;
              sub_1C5934A04((void ***)v864);
              v560 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 48))(v795);
              *(_OWORD *)v825 = *(_OWORD *)&__dst[0].__r_.__value_.__l.__data_;
              *(_OWORD *)&v825[16] = *(_OWORD *)&__dst[0].__r_.__value_.__r.__words[2];
              v826 = v771;
              *(_OWORD *)&__dst[1].__r_.__value_.__r.__words[1] = 0uLL;
              v827 = v559;
              v828 = 0;
              v830 = 0;
              v829 = 0;
              v870 = 0;
              v871[0] = 0;
              v872 = 0;
              v871[1] = 0;
              LOBYTE(v831) = 0;
              sub_1C60EAF2C(v560, (unsigned __int8 *)v868[0], v868[1], (uint64_t)v825);
              *(_QWORD *)v864 = &v828;
              sub_1C4765410((void ***)v864);
              *(_QWORD *)v864 = &v826;
              sub_1C5934A04((void ***)v864);
              *(_QWORD *)v864 = v871;
              sub_1C4765410((void ***)v864);
              *(_QWORD *)v864 = &__dst[1].__r_.__value_.__l.__size_;
              sub_1C5934A04((void ***)v864);
              v9 = 0;
            }
            else
            {
              LOWORD(v865) = 1283;
              *(_QWORD *)v864 = "macro '";
              *(_QWORD *)&v864[16] = v394;
              *(_QWORD *)&v864[24] = v393;
              __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v864;
              __dst[0].__r_.__value_.__r.__words[2] = (std::string::size_type)"' is already defined";
              LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 770;
              v9 = llvm::MCAsmParser::Error((uint64_t)v795, (uint64_t)v770, (uint64_t)__dst, 0, 0);
            }
          }
          else
          {
            if (LODWORD(v810[0]) == 2)
            {
              v597 = v810[1];
              v598 = v811[0];
            }
            else
            {
              v597 = v810[1];
              v654 = v811[0];
              v655 = v811[0] - 1;
              v656 = v811[0] != 0;
              if (v811[0])
                v597 = v810[1] + 1;
              if (v656 > v655)
                v655 = v811[0] != 0;
              if (v811[0] >= v655)
                v654 = v655;
              v598 = v654 - v656;
            }
            LOWORD(v865) = 1283;
            *(_QWORD *)v864 = "unexpected token in '";
            *(_QWORD *)&v864[16] = v597;
            *(_QWORD *)&v864[24] = v598;
            __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v864;
            __dst[0].__r_.__value_.__r.__words[2] = (std::string::size_type)"' directive";
            LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 770;
            v657 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795);
            llvm::MCAsmParser::Error((uint64_t)v795, *(_QWORD *)(v657 + 96), (uint64_t)__dst, 0, 0);
            v9 = 1;
          }
LABEL_1118:
          if (v781 >= 0x41 && v778)
            MEMORY[0x1CAA32F9C](v778, 0x1000C8000313F17);
          if (v791 >= 0x41 && v775)
            MEMORY[0x1CAA32F9C](v775, 0x1000C8000313F17);
LABEL_1124:
          __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v866;
          sub_1C5934A04((void ***)__dst);
LABEL_288:
          if (v809 >= 0x41 && __src)
            MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
          return v9;
        case 147:
          if (llvm::MCAsmParser::parseEOL(v795))
            goto LABEL_222;
          v499 = *((_QWORD *)v795 + 45);
          if (*((_QWORD *)v795 + 44) == v499)
            goto LABEL_302;
          v501 = *((_QWORD *)v795 + 37);
          v500 = *((_QWORD *)v795 + 38);
          if (*(_QWORD *)(*(_QWORD *)(v499 - 8) + 24) != (v500 - v501) >> 3)
          {
            v502 = (int *)(v500 - 8);
            v503 = (uint64_t)v502 - v501;
            do
            {
              v504 = *v502;
              *((_WORD *)v795 + 144) = *((_WORD *)v502 + 2);
              *((_DWORD *)v795 + 71) = v504;
              *((_QWORD *)v795 + 38) = v502;
              v84 = *(_QWORD *)(*(_QWORD *)(v499 - 8) + 24) == v503 >> 3;
              v503 -= 8;
              v502 -= 2;
            }
            while (!v84);
          }
          goto LABEL_421;
        case 148:
        case 149:
          if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795) + 8) == 9)
          {
            if (*((_QWORD *)v795 + 44) != *((_QWORD *)v795 + 45))
            {
LABEL_421:
              sub_1C60EA518(v795);
              goto LABEL_156;
            }
LABEL_302:
            LOWORD(v826) = 1283;
            *(_QWORD *)v825 = "unexpected '";
            *(_QWORD *)&v825[16] = v790;
            *(_QWORD *)&v825[24] = v105;
            v179 = "' in file, no current macro definition";
          }
          else
          {
            LOWORD(v826) = 1283;
            *(_QWORD *)v825 = "unexpected token in '";
            *(_QWORD *)&v825[16] = v790;
            *(_QWORD *)&v825[24] = v105;
            v179 = "' directive";
          }
          __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v825;
          __dst[0].__r_.__value_.__r.__words[2] = (std::string::size_type)v179;
          v380 = 770;
          goto LABEL_1050;
        case 150:
          v792 = v805;
          v810[0] = 0;
          v810[1] = 0;
          v457 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795)
                                       + 8)
                           + 8);
          v458 = (*(uint64_t (**)(llvm::MCAsmParser *, size_t *))(*(_QWORD *)v795 + 192))(v795, v810);
          __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"expected identifier in '.purgem' directive";
          LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 259;
          if ((v458 & 1) != 0)
          {
            v220 = __dst;
            v459 = (uint64_t)v795;
            v460 = v457;
            goto LABEL_1052;
          }
          if (llvm::MCAsmParser::parseEOL(v795))
            goto LABEL_222;
          v571 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 48))(v795);
          v572 = v810[1];
          v573 = *(unsigned int *)(v571 + 1976);
          if ((_DWORD)v573)
          {
            v574 = (const void *)v810[0];
            v575 = 0;
            if (v810[1])
            {
              v576 = v810[1];
              v577 = (unsigned __int8 *)v810[0];
              do
              {
                v578 = *v577++;
                v575 = 33 * v575 + v578;
                --v576;
              }
              while (v576);
            }
            v579 = *(_QWORD *)(v571 + 1968);
            v580 = *(unsigned int *)(v571 + 1988);
            v581 = 1;
            v582 = v575;
            while (1)
            {
              v583 = v582 & (v573 - 1);
              v584 = *(_QWORD **)(v579 + 8 * v583);
              if (v584 != (_QWORD *)-8)
              {
                if (!v584)
                  goto LABEL_1599;
                if (*(_DWORD *)(v579 + 8 * v573 + 8 + 4 * v583) == v575
                  && v572 == *v584
                  && (!v572 || !memcmp(v574, (char *)v584 + v580, v572)))
                {
                  break;
                }
              }
              v582 = v581 + v583;
              ++v581;
            }
            if ((_DWORD)v583 != -1 && (int)v583 != v573)
            {
              v717 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 48))(v795);
              sub_1C60EB0F0(v717 + 1968, (unsigned __int8 *)v810[0], v810[1]);
              goto LABEL_156;
            }
          }
          else
          {
            v574 = (const void *)v810[0];
          }
LABEL_1599:
          LOWORD(v826) = 1283;
          *(_QWORD *)v825 = "macro '";
          *(_QWORD *)&v825[16] = v574;
          *(_QWORD *)&v825[24] = v572;
          __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v825;
          __dst[0].__r_.__value_.__r.__words[2] = (std::string::size_type)"' is not defined";
          LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 770;
          v125 = v792;
          v126 = (uint64_t)v795;
          goto LABEL_286;
        case 151:
          v9 = 1;
          v825[0] = 1;
          if (((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 264))(v795) & 1) == 0)
            goto LABEL_610;
          goto LABEL_288;
        case 152:
          v825[0] = 0;
          if (((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 264))(v795) & 1) != 0)
            goto LABEL_222;
LABEL_610:
          v305 = v795;
          __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v795;
          __dst[0].__r_.__value_.__l.__size_ = (std::string::size_type)v825;
          v306 = (unsigned int (*)(uint64_t))sub_1C60EA584;
          goto LABEL_978;
        case 153:
          v284 = v805;
          v285 = (uint64_t)v795;
          v286 = 0;
          goto LABEL_622;
        case 154:
          v284 = v805;
          v285 = (uint64_t)v795;
          v286 = 1;
LABEL_622:
          v62 = sub_1C60E65BC(v285, (uint64_t)v284, v286);
          goto LABEL_287;
        case 155:
          v326 = v805;
          v327 = *((_QWORD *)v795 + 38);
          if (*((_QWORD *)v795 + 37) != v327 && *(_BYTE *)(v327 - 3))
          {
LABEL_649:
            (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 224))(v795);
            goto LABEL_156;
          }
          if (llvm::MCAsmParser::parseOptionalToken(v795, 9))
          {
            v414 = ".warning directive invoked in source file";
            v415 = 41;
          }
          else
          {
            if (**(_DWORD **)v7 != 3)
            {
              v216 = ".warning argument must be a string";
LABEL_1049:
              __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v216;
              v380 = 259;
LABEL_1050:
              LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = v380;
              v528 = v795;
              v460 = *(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795) + 96);
LABEL_1051:
              v220 = __dst;
              v459 = (uint64_t)v528;
              goto LABEL_1052;
            }
            v688 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795);
            v689 = *(_QWORD *)(*(_QWORD *)(v688 + 8) + 16);
            v690 = v689 != 0;
            if (v689)
              v414 = (const char *)(*(_QWORD *)(*(_QWORD *)(v688 + 8) + 8) + 1);
            else
              v414 = *(const char **)(*(_QWORD *)(v688 + 8) + 8);
            if (v690 <= v689 - 1)
              v691 = v689 - 1;
            else
              v691 = v689 != 0;
            if (v689 >= v691)
              v692 = v691;
            else
              v692 = *(_QWORD *)(*(_QWORD *)(v688 + 8) + 16);
            (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 184))(v795);
            if (llvm::MCAsmParser::parseEOL(v795))
              goto LABEL_222;
            v415 = v692 - v690;
          }
          LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 261;
          __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v414;
          __dst[0].__r_.__value_.__l.__size_ = v415;
          v62 = (*(uint64_t (**)(llvm::MCAsmParser *, char *, std::string *, _QWORD, _QWORD))(*(_QWORD *)v795 + 168))(v795, v326, __dst, 0, 0);
          goto LABEL_287;
        case 156:
          v449 = v805;
          v450 = *(int **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795) + 8);
          v451 = *v450;
          v453 = (_BYTE *)*((_QWORD *)v450 + 1);
          v452 = *((_QWORD *)v450 + 2);
          v454 = v450[8];
          if (v454 > 0x40)
          {
            v455 = (void *)operator new[]();
            memcpy(v455, *((const void **)v450 + 3), ((unint64_t)(v454 + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            v455 = (void *)*((_QWORD *)v450 + 3);
          }
          (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 184))(v795);
          if (v451 == 3 && *v453 == 34)
          {
            v569 = llvm::MCAsmParser::parseEOL(v795);
            if (v569)
            {
              v9 = 1;
            }
            else
            {
              v718 = (llvm::raw_ostream *)llvm::outs((llvm *)v569);
              v719 = v718;
              v720 = v452 - 1;
              v721 = v452 != 0;
              if (v452)
                v722 = v453 + 1;
              else
                v722 = v453;
              if (v721 > v720)
                v720 = v452 != 0;
              if (v452 < v720)
                v720 = v452;
              v723 = v720 - v721;
              v725 = *((_QWORD *)v718 + 3);
              v724 = (_BYTE *)*((_QWORD *)v718 + 4);
              if (v720 - v721 <= v725 - (uint64_t)v724)
              {
                if (v720 != v721)
                {
                  memcpy(v724, v722, v720 - v721);
                  v724 = (_BYTE *)(*((_QWORD *)v719 + 4) + v723);
                  *((_QWORD *)v719 + 4) = v724;
                }
              }
              else
              {
                llvm::raw_ostream::write(v719, (const char *)v722, v720 - v721);
                v724 = (_BYTE *)*((_QWORD *)v719 + 4);
              }
              if ((unint64_t)v724 >= *((_QWORD *)v719 + 3))
              {
                llvm::raw_ostream::write(v719, 10);
                v9 = 0;
              }
              else
              {
                v9 = 0;
                *((_QWORD *)v719 + 4) = v724 + 1;
                *v724 = 10;
              }
            }
          }
          else
          {
            __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"expected double quoted string after .print";
            LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 259;
            v9 = llvm::MCAsmParser::Error((uint64_t)v795, (uint64_t)v449, (uint64_t)__dst, 0, 0);
          }
          if (v454 < 0x41 || v455 == 0)
            goto LABEL_288;
          v124 = v455;
          goto LABEL_219;
        case 157:
          if (llvm::MCAsmParser::parseEOL(v795))
            goto LABEL_222;
          v507 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 56))(v795);
          (*(void (**)(uint64_t))(*(_QWORD *)v507 + 1168))(v507);
          goto LABEL_156;
        case 158:
          *(_OWORD *)v825 = 0uLL;
          v505 = (*(uint64_t (**)(llvm::MCAsmParser *, _BYTE *))(*(_QWORD *)v795 + 192))(v795, v825);
          __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"expected identifier";
          LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 259;
          v269 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795);
          if ((v505 & 1) != 0)
            goto LABEL_992;
          if (llvm::MCAsmParser::parseEOL(v795))
            goto LABEL_222;
          v591 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 48))(v795);
          LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 261;
          *(_OWORD *)&__dst[0].__r_.__value_.__l.__data_ = *(_OWORD *)v825;
          v47 = (_BYTE *)llvm::MCContext::getOrCreateSymbol(v591, (uint64_t)__dst);
          v53 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 56))(v795);
          v54 = *(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v53 + 1176);
          goto LABEL_83;
        case 159:
          v810[0] = 0;
          *(_QWORD *)v864 = 0;
          v823.__r_.__value_.__r.__words[0] = 0;
          v819 = 0;
          if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795) + 8) == 4)
          {
            __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"unexpected token in '.pseudoprobe' directive";
            LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 259;
            if (llvm::MCAsmParser::parseIntToken(v795, (uint64_t *)v810, (const llvm::Twine *)__dst))
              goto LABEL_222;
          }
          if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795) + 8) == 4)
          {
            __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"unexpected token in '.pseudoprobe' directive";
            LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 259;
            if (llvm::MCAsmParser::parseIntToken(v795, (uint64_t *)v864, (const llvm::Twine *)__dst))
              goto LABEL_222;
          }
          if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795) + 8) == 4)
          {
            __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"unexpected token in '.pseudoprobe' directive";
            LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 259;
            if (llvm::MCAsmParser::parseIntToken(v795, (uint64_t *)&v823, (const llvm::Twine *)__dst))
              goto LABEL_222;
          }
          if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795) + 8) == 4)
          {
            __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"unexpected token in '.pseudoprobe' directive";
            LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 259;
            if (llvm::MCAsmParser::parseIntToken(v795, (uint64_t *)&v819, (const llvm::Twine *)__dst))
              goto LABEL_222;
          }
          __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst[0].__r_.__value_.__r.__words[2];
          __dst[0].__r_.__value_.__l.__size_ = 0x800000000;
          v188 = v795;
          if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795) + 8) != 45)
            goto LABEL_1131;
          do
          {
            (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v188 + 184))(v188);
            *(_QWORD *)&v815 = 0;
            if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v188 + 40))(v188) + 8) == 4)
            {
              *(_QWORD *)v825 = "unexpected token in '.pseudoprobe' directive";
              LOWORD(v826) = 259;
              if (llvm::MCAsmParser::parseIntToken(v188, (uint64_t *)&v815, (const llvm::Twine *)v825))
                goto LABEL_1132;
            }
            if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v188 + 40))(v188) + 8) == 10)
              (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v188 + 184))(v188);
            v866[0] = 0;
            v189 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v188 + 40))(v188);
            v190 = 0;
            if (**(_DWORD **)(v189 + 8) == 4)
            {
              *(_QWORD *)v825 = "unexpected token in '.pseudoprobe' directive";
              LOWORD(v826) = 259;
              if (llvm::MCAsmParser::parseIntToken(v795, v866, (const llvm::Twine *)v825))
                goto LABEL_1132;
              v190 = LODWORD(v866[0]);
            }
            v191 = v815;
            v192 = LODWORD(__dst[0].__r_.__value_.__r.__words[1]);
            if (LODWORD(__dst[0].__r_.__value_.__r.__words[1]) >= (unint64_t)HIDWORD(__dst[0].__r_.__value_.__r.__words[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)__dst, (uint64_t)&__dst[0].__r_.__value_.__r.__words[2], LODWORD(__dst[0].__r_.__value_.__r.__words[1]) + 1, 16);
              v192 = LODWORD(__dst[0].__r_.__value_.__r.__words[1]);
            }
            v193 = (_QWORD *)(__dst[0].__r_.__value_.__r.__words[0] + 16 * v192);
            *v193 = v191;
            v193[1] = v190;
            ++LODWORD(__dst[0].__r_.__value_.__r.__words[1]);
            v188 = v795;
          }
          while (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 40))(v795) + 8) == 45);
LABEL_1131:
          if (llvm::MCAsmParser::parseEOL(v188))
          {
LABEL_1132:
            v9 = 1;
          }
          else
          {
            v647 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 56))(v795);
            (*(void (**)(uint64_t, size_t, _QWORD, std::string::size_type, char *, std::string *))(*(_QWORD *)v647 + 1192))(v647, v810[0], *(_QWORD *)v864, v823.__r_.__value_.__r.__words[0], v819, __dst);
            v9 = 0;
          }
          v568 = (void *)__dst[0].__r_.__value_.__r.__words[0];
          if ((std::string::size_type *)__dst[0].__r_.__value_.__l.__data_ != &__dst[0].__r_.__value_.__r.__words[2])
LABEL_1134:
            free(v568);
          goto LABEL_288;
        case 160:
          __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v795;
          *((_DWORD *)v795 + 184) = 0;
          sub_1C47655E8((uint64_t)v795 + 776, *((_QWORD **)v795 + 98));
          *((_QWORD *)v795 + 97) = (char *)v795 + 784;
          *((_QWORD *)v795 + 99) = 0;
          v306 = (unsigned int (*)(uint64_t))sub_1C60EB33C;
          *((_QWORD *)v795 + 98) = 0;
          v305 = v795;
LABEL_978:
          v62 = llvm::MCAsmParser::parseMany(v305, v306, (uint64_t)__dst, 1);
          goto LABEL_287;
        case 161:
          v152 = v795;
          v153 = 3;
LABEL_506:
          v62 = sub_1C60E5BC4(v152, v153);
          goto LABEL_287;
        case 162:
          v229 = v795;
          (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 184))(v795);
          memset(v864, 0, 24);
          break;
        case 163:
          if (llvm::MCAsmParser::parseEOL(v795))
            goto LABEL_222;
          if (!**(_DWORD **)v7)
            goto LABEL_156;
          do
          {
            sub_1C60E57B0(v772);
            v9 = 0;
          }
          while (**(_DWORD **)v7);
          goto LABEL_288;
        default:
          v125 = v805;
          __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"unknown directive";
          LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 259;
          v126 = (uint64_t)v795;
          goto LABEL_286;
      }
      while (1)
      {
        v230 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v229 + 184))(v229);
        v231 = v230;
        v232 = *(_DWORD *)v230;
        v234 = *(const void **)(v230 + 8);
        v233 = *(_QWORD *)(v230 + 16);
        v235 = *(unsigned int *)(v230 + 32);
        if (v235 > 0x40)
        {
          v236 = (void *)operator new[]();
          memcpy(v236, *(const void **)(v231 + 24), ((unint64_t)(v235 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          v236 = *(void **)(v230 + 24);
        }
        if (v232)
          break;
        __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"flatbuffer injection directive in use, but didn'"
                                                                        "t find flatbuffer injection data.\n";
        LOWORD(__dst[1].__r_.__value_.__r.__words[1]) = 259;
        v229 = v795;
        llvm::MCAsmParser::Error((uint64_t)v795, (uint64_t)v234, (uint64_t)__dst, 0, 0);
        v247 = 1;
LABEL_479:
        if (v235 >= 0x41 && v236)
          MEMORY[0x1CAA32F9C](v236, 0x1000C8000313F17);
        if (v247)
        {
          if (v247 != 3)
            goto LABEL_1045;
          v330 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 56))(v795);
          v331 = *(_QWORD *)(*(_QWORD *)(v330 + 112) + 32 * *(unsigned int *)(v330 + 120) - 32);
          v332 = (const char *)(v331 + 224);
          if (*(_BYTE *)(v331 + 239))
          {
            v333 = 16;
            *((_BYTE *)&__dst[0].__r_.__value_.__s + 23) = 16;
            v334 = __dst;
            v335 = 1;
            goto LABEL_856;
          }
          v408 = strlen(v332);
          if (v408 <= 0x7FFFFFFFFFFFFFF7)
          {
            v333 = v408;
            if (v408 >= 0x17)
            {
              v428 = (v408 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v408 | 7) != 0x17)
                v428 = v408 | 7;
              v429 = v428 + 1;
              v334 = operator new(v428 + 1);
              v335 = 0;
              __dst[0].__r_.__value_.__r.__words[2] = v429 | 0x8000000000000000;
              __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v334;
              __dst[0].__r_.__value_.__l.__size_ = v333;
            }
            else
            {
              *((_BYTE *)&__dst[0].__r_.__value_.__s + 23) = v408;
              v334 = __dst;
              v335 = 1;
              if (!v408)
              {
LABEL_857:
                v430 = 0;
                v334[v333] = 0;
                v431 = HIBYTE(__dst[0].__r_.__value_.__r.__words[2]);
                if ((__dst[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                  v432 = *((_BYTE *)&__dst[0].__r_.__value_.__s + 23) & 0x7F;
                else
                  v432 = __dst[0].__r_.__value_.__l.__size_;
                if (v432 == 16)
                {
                  if ((__dst[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v433 = HIBYTE(__dst[0].__r_.__value_.__r.__words[2]);
                  else
                    v433 = __dst[0].__r_.__value_.__l.__size_;
                  if ((__dst[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                    v434 = __dst;
                  else
                    v434 = (std::string *)__dst[0].__r_.__value_.__r.__words[0];
                  if (v433 >= 0x10)
                    v435 = 16;
                  else
                    v435 = v433;
                  v436 = memcmp(v434, "__GPU_METADATA_2", v435) == 0;
                  v430 = v433 == 16 && v436;
                  if (v431 < 0)
                  {
LABEL_874:
                    operator delete(__dst[0].__r_.__value_.__l.__data_);
                    if (!v430)
                      goto LABEL_875;
LABEL_880:
                    v438 = (const unsigned __int8 *)&unk_1C8659E10;
LABEL_1023:
                    *(_DWORD *)&v825[3] = 0x10000;
                    *(_DWORD *)v825 = 256;
                    *(_QWORD *)&v825[8] = 0x100010100000002;
                    v825[16] = 1;
                    *(_QWORD *)&v825[17] = 0;
                    v825[25] = 0;
                    HIBYTE(v827) = 15;
                    strcpy((char *)&v826, "std::unique_ptr");
                    v834 = 0;
                    v832 = 0;
                    v833 = 0;
                    v830 = 0;
                    v831 = 0;
                    v828 = 0;
                    v829 = 0;
                    v835 = 84;
                    v836 = 257;
                    v839[0] = 0;
                    *(_QWORD *)((char *)v839 + 5) = 0;
                    v837 = 0;
                    v838 = 0;
                    v840 = 0u;
                    v841 = 0u;
                    v842 = 0u;
                    v843 = 1;
                    v846[0] = 0;
                    *(_DWORD *)((char *)v846 + 7) = 0;
                    v844 = 0;
                    v845 = 0;
                    v847 = 0u;
                    v848 = 0u;
                    v849 = 0u;
                    v850 = 0u;
                    v851 = 0;
                    strcpy(v853, "\n");
                    strcpy(v852, "_generated");
                    v857 = 0;
                    v853[2] = 0;
                    v854 = 0;
                    v855 = 0;
                    v856 = 0;
                    v858 = 1;
                    v859 = 0;
                    v860 = 257;
                    sub_1C55878F0((uint64_t)__dst, (__int128 *)v825);
                    flatbuffers::Parser::Deserialize((flatbuffers::Parser *)__dst, v438);
                    if (v864[23] >= 0)
                      v517 = v864;
                    else
                      v517 = *(const char **)v864;
                    if ((flatbuffers::Parser::Parse((flatbuffers::Parser *)__dst, v517, 0, 0) & 1) != 0)
                    {
                      v518 = v878;
                      v519 = v877 - (_DWORD)v878 + v876;
                      v520 = v519;
                      if (v519 >= 0x17uLL)
                      {
                        v522 = (v519 & 0xFFFFFFF8) + 8;
                        if ((v520 | 7) == 0x17)
                          v523 = v522;
                        else
                          v523 = v520 | 7;
                        v521 = operator new(v523 + 1);
                        v810[1] = v520;
                        v811[0] = v523 - 0x7FFFFFFFFFFFFFFFLL;
                        v810[0] = (size_t)v521;
                      }
                      else
                      {
                        HIBYTE(v811[0]) = v519;
                        v521 = v810;
                        if (!((_DWORD)v877 - (_DWORD)v878 + (_DWORD)v876))
                        {
LABEL_1035:
                          v521[v520] = 0;
                          v524 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795 + 56))(v795);
                          if (v811[0] >= 0)
                            v525 = v810;
                          else
                            v525 = (size_t *)v810[0];
                          if (v811[0] >= 0)
                            v526 = HIBYTE(v811[0]) & 0x7F;
                          else
                            v526 = v810[1];
                          (*(void (**)(uint64_t, size_t *, size_t))(*(_QWORD *)v524 + 488))(v524, v525, v526);
                          if (SHIBYTE(v811[0]) < 0)
                          {
                            v527 = (char *)v810[0];
                            goto LABEL_1043;
                          }
                          goto LABEL_1044;
                        }
                      }
                      memmove(v521, v518, v520);
                      goto LABEL_1035;
                    }
                    v624 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v795
                                                                                                  + 40))(v795)
                                                 + 8)
                                     + 8);
                    std::operator+<char>();
                    v625 = std::string::append((std::string *)&v819, "\n");
                    v626 = v625->__r_.__value_.__r.__words[2];
                    *(_OWORD *)&v823.__r_.__value_.__l.__data_ = *(_OWORD *)&v625->__r_.__value_.__l.__data_;
                    v823.__r_.__value_.__r.__words[2] = v626;
                    v625->__r_.__value_.__l.__size_ = 0;
                    v625->__r_.__value_.__r.__words[2] = 0;
                    v625->__r_.__value_.__r.__words[0] = 0;
                    LOWORD(v811[2]) = 260;
                    v810[0] = (size_t)&v823;
                    llvm::MCAsmParser::Error((uint64_t)v795, v624, (uint64_t)v810, 0, 0);
                    if (SHIBYTE(v823.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v823.__r_.__value_.__l.__data_);
                    if (SBYTE7(v821) < 0)
                    {
                      v527 = v819;
LABEL_1043:
                      operator delete(v527);
                    }
LABEL_1044:
                    sub_1C47650F0((uint64_t)__dst);
                    sub_1C47652C8((uint64_t)v825);
LABEL_1045:
                    if ((v864[23] & 0x80000000) != 0)
                      operator delete(*(void **)v864);
LABEL_156:
                    v9 = 0;
                    goto LABEL_288;
                  }
                }
                else if ((*((_BYTE *)&__dst[0].__r_.__value_.__s + 23) & 0x80) != 0)
                {
                  goto LABEL_874;
                }
                if (v430)
                  goto LABEL_880;
LABEL_875:
                if ((v335 & 1) != 0)
                {
                  *((_BYTE *)&__dst[0].__r_.__value_.__s + 23) = v333;
                  v437 = __dst;
                  if (!v333)
                  {
LABEL_885:
                    v441 = 0;
                    v437[v333] = 0;
                    v442 = HIBYTE(__dst[0].__r_.__value_.__r.__words[2]);
                    if ((__dst[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                      v443 = *((_BYTE *)&__dst[0].__r_.__value_.__s + 23) & 0x7F;
                    else
                      v443 = __dst[0].__r_.__value_.__l.__size_;
                    if (v443 == 14)
                    {
                      if ((__dst[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v444 = HIBYTE(__dst[0].__r_.__value_.__r.__words[2]);
                      else
                        v444 = __dst[0].__r_.__value_.__l.__size_;
                      if ((__dst[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v445 = __dst;
                      else
                        v445 = (std::string *)__dst[0].__r_.__value_.__r.__words[0];
                      if (v444 >= 0xE)
                        v446 = 14;
                      else
                        v446 = v444;
                      v447 = memcmp(v445, "__GPU_METADATA", v446) == 0;
                      v441 = v444 == 14 && v447;
                      if (v442 < 0)
                      {
LABEL_902:
                        operator delete(__dst[0].__r_.__value_.__l.__data_);
                        if (!v441)
                          goto LABEL_903;
LABEL_908:
                        v438 = (const unsigned __int8 *)&unk_1C86554F8;
                        goto LABEL_1023;
                      }
                    }
                    else if ((*((_BYTE *)&__dst[0].__r_.__value_.__s + 23) & 0x80) != 0)
                    {
                      goto LABEL_902;
                    }
                    if (v441)
                      goto LABEL_908;
LABEL_903:
                    if ((v335 & 1) != 0)
                    {
                      *((_BYTE *)&__dst[0].__r_.__value_.__s + 23) = v333;
                      v448 = __dst;
                      if (!v333)
                      {
LABEL_1001:
                        v510 = 0;
                        v448[v333] = 0;
                        v511 = HIBYTE(__dst[0].__r_.__value_.__r.__words[2]);
                        if ((__dst[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                          v512 = *((_BYTE *)&__dst[0].__r_.__value_.__s + 23) & 0x7F;
                        else
                          v512 = __dst[0].__r_.__value_.__l.__size_;
                        if (v512 == 15)
                        {
                          if ((__dst[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                            v513 = HIBYTE(__dst[0].__r_.__value_.__r.__words[2]);
                          else
                            v513 = __dst[0].__r_.__value_.__l.__size_;
                          if ((__dst[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                            v514 = __dst;
                          else
                            v514 = (std::string *)__dst[0].__r_.__value_.__r.__words[0];
                          if (v513 >= 0xF)
                            v515 = 15;
                          else
                            v515 = v513;
                          v516 = memcmp(v514, "__GPU_VIDMALIST", v515) == 0;
                          v510 = v513 == 15 && v516;
                          if (v511 < 0)
                            goto LABEL_1018;
LABEL_1021:
                          if (!v510)
                            goto LABEL_1045;
                        }
                        else
                        {
                          if ((*((_BYTE *)&__dst[0].__r_.__value_.__s + 23) & 0x80) == 0)
                            goto LABEL_1021;
LABEL_1018:
                          operator delete(__dst[0].__r_.__value_.__l.__data_);
                          if (!v510)
                            goto LABEL_1045;
                        }
                        v438 = (const unsigned __int8 *)&unk_1C865EF48;
                        goto LABEL_1023;
                      }
                    }
                    else
                    {
                      v508 = (v333 & 0xFFFFFFFFFFFFFFF8) + 8;
                      if ((v333 | 7) != 0x17)
                        v508 = v333 | 7;
                      v509 = v508 + 1;
                      v448 = operator new(v508 + 1);
                      __dst[0].__r_.__value_.__r.__words[2] = v509 | 0x8000000000000000;
                      __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v448;
                      __dst[0].__r_.__value_.__l.__size_ = v333;
                    }
                    memmove(v448, v332, v333);
                    goto LABEL_1001;
                  }
                }
                else
                {
                  v439 = (v333 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v333 | 7) != 0x17)
                    v439 = v333 | 7;
                  v440 = v439 + 1;
                  v437 = operator new(v439 + 1);
                  __dst[0].__r_.__value_.__r.__words[2] = v440 | 0x8000000000000000;
                  __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v437;
                  __dst[0].__r_.__value_.__l.__size_ = v333;
                }
                memmove(v437, v332, v333);
                goto LABEL_885;
              }
            }
LABEL_856:
            memmove(v334, v332, v333);
            goto LABEL_857;
          }
LABEL_1425:
          abort();
        }
      }
      if (v233 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_1425;
      if (v233 >= 0x17)
      {
        v238 = (v233 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v233 | 7) != 0x17)
          v238 = v233 | 7;
        v239 = v238 + 1;
        v237 = operator new(v238 + 1);
        __dst[0].__r_.__value_.__r.__words[2] = v239 | 0x8000000000000000;
        __dst[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v237;
        __dst[0].__r_.__value_.__l.__size_ = v233;
      }
      else
      {
        *((_BYTE *)&__dst[0].__r_.__value_.__s + 23) = v233;
        v237 = __dst;
        if (!v233)
        {
LABEL_441:
          v237[v233] = 0;
          if ((__dst[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v240 = HIBYTE(__dst[0].__r_.__value_.__r.__words[2]);
          else
            v240 = __dst[0].__r_.__value_.__l.__size_;
          if ((__dst[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v241 = __dst;
          else
            v241 = (std::string *)__dst[0].__r_.__value_.__r.__words[0];
          v242 = (char *)v241 + v240;
          if (v240 < 15)
            goto LABEL_459;
          v243 = v240;
          v244 = v241;
          while (1)
          {
            v245 = (char *)memchr(v244, 46, v243 - 14);
            if (!v245)
              goto LABEL_459;
            if (*(_QWORD *)v245 == 0x66756274616C662ELL && *(_QWORD *)(v245 + 7) == 0x646E655F72656666)
              break;
            v244 = (std::string *)(v245 + 1);
            v243 = v242 - (char *)v244;
            if (v242 - (char *)v244 < 15)
              goto LABEL_459;
          }
          if (v245 == v242 || v245 - (char *)v241 == -1)
          {
LABEL_459:
            if (v240 < 2)
              goto LABEL_475;
            v248 = v240;
            v249 = v241;
            while (1)
            {
              v250 = (char *)memchr(v249, 47, v248 - 1);
              if (!v250)
                goto LABEL_475;
              if (*(_WORD *)v250 == 12079)
                break;
              v249 = (std::string *)(v250 + 1);
              v248 = v242 - (char *)v249;
              if (v242 - (char *)v249 < 2)
                goto LABEL_475;
            }
            if (v250 == v242 || v250 - (char *)v241 == -1)
            {
LABEL_475:
              std::string::append((std::string *)v864, (const std::string::value_type *)v241, v240);
            }
            else
            {
              std::string::basic_string((std::string *)v825, __dst, v250 - (char *)v241 + 2, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)v810);
              if (v825[23] >= 0)
                v251 = v825;
              else
                v251 = *(const std::string::value_type **)v825;
              if (v825[23] >= 0)
                v252 = v825[23] & 0x7F;
              else
                v252 = *(_QWORD *)&v825[8];
              std::string::append((std::string *)v864, v251, v252);
              if ((v825[23] & 0x80000000) != 0)
                operator delete(*(void **)v825);
            }
            v247 = 0;
          }
          else
          {
            v247 = 3;
          }
          v229 = v795;
          if (SHIBYTE(__dst[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(__dst[0].__r_.__value_.__l.__data_);
          goto LABEL_479;
        }
      }
      memmove(v237, v234, v233);
      goto LABEL_441;
  }
}

_QWORD *sub_1C60E48A8(llvm::StringMapImpl *a1, unsigned __int8 *a2, size_t __n)
{
  unsigned int v5;
  int v6;
  size_t v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  _QWORD **i;
  _QWORD *v25;

  v5 = *((_DWORD *)a1 + 2);
  if (!v5)
  {
    *((_DWORD *)a1 + 3) = 0;
    *((_DWORD *)a1 + 4) = 0;
    v25 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!v25)
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    v25[16] = 2;
    *(_QWORD *)a1 = v25;
    v5 = 16;
    *((_DWORD *)a1 + 2) = 16;
  }
  v6 = 0;
  if (__n)
  {
    v7 = __n;
    v8 = a2;
    do
    {
      v9 = *v8++;
      v6 = 33 * v6 + v9;
      --v7;
    }
    while (v7);
  }
  v10 = *(_QWORD *)a1;
  v11 = v5 - 1;
  v12 = *(_QWORD *)a1 + 8 * v5 + 8;
  v13 = -1;
  v14 = 1;
  v15 = v6;
  while (1)
  {
    v16 = v15 & v11;
    v17 = *(_QWORD **)(v10 + 8 * v16);
    if (!v17)
      break;
    if (v17 == (_QWORD *)-8)
    {
      if (v13 == -1)
        v13 = v15 & v11;
    }
    else if (*(_DWORD *)(v12 + 4 * v16) == v6
           && __n == *v17
           && (!__n || !memcmp(a2, (char *)v17 + *((unsigned int *)a1 + 5), __n)))
    {
      goto LABEL_20;
    }
    v15 = v14 + v16;
    ++v14;
  }
  v18 = v13;
  if (v13 == -1)
  {
    v18 = v16;
    v16 = v16;
  }
  else
  {
    v16 = v13;
  }
  *(_DWORD *)(v12 + 4 * v18) = v6;
  v17 = *(_QWORD **)(v10 + 8 * v16);
LABEL_20:
  if (v17 == (_QWORD *)-8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v17)
  {
    return v17 + 1;
  }
  v19 = (char *)operator new(__n + 17, (std::align_val_t)8uLL);
  v20 = v19;
  v21 = v19 + 16;
  if (__n)
    memcpy(v19 + 16, a2, __n);
  v21[__n] = 0;
  *(_QWORD *)v20 = __n;
  *((_DWORD *)v20 + 2) = 0;
  *(_QWORD *)(v10 + 8 * v16) = v20;
  ++*((_DWORD *)a1 + 3);
  for (i = (_QWORD **)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1, v16)); ; ++i)
  {
    v17 = *i;
    if (*i && v17 + 1 != 0)
      break;
  }
  return v17 + 1;
}

uint64_t sub_1C60E4AA4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;

  *(_QWORD *)a1 = &off_1E81ADFA0;
  *(_QWORD *)(*(_QWORD *)(a1 + 224) + 256) = 0;
  *(_OWORD *)(*(_QWORD *)(a1 + 240) + 48) = *(_OWORD *)(a1 + 248);
  if (*(_DWORD *)(a1 + 852))
  {
    v2 = *(unsigned int *)(a1 + 848);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(_QWORD *)(*(_QWORD *)(a1 + 840) + v3);
        if (v5 != -8 && v5 != 0)
          MEMORY[0x1CAA32FB4]();
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)(a1 + 840));
  if (*(_DWORD *)(a1 + 820))
  {
    v7 = *(unsigned int *)(a1 + 816);
    if ((_DWORD)v7)
    {
      v8 = 0;
      v9 = 8 * v7;
      do
      {
        v10 = *(_QWORD *)(*(_QWORD *)(a1 + 808) + v8);
        if (v10 != -8 && v10 != 0)
          MEMORY[0x1CAA32FB4]();
        v8 += 8;
      }
      while (v9 != v8);
    }
  }
  free(*(void **)(a1 + 808));
  sub_1C47655E8(a1 + 776, *(_QWORD **)(a1 + 784));
  v12 = *(void **)(a1 + 728);
  if (v12 != (void *)(a1 + 744))
    free(v12);
  v13 = *(void **)(a1 + 488);
  if (v13 != (void *)(a1 + 504))
    free(v13);
  sub_1C60E4C18(a1 + 376);
  v14 = *(void **)(a1 + 352);
  if (v14)
  {
    *(_QWORD *)(a1 + 360) = v14;
    operator delete(v14);
  }
  sub_1C61A8A20(a1 + 320);
  v15 = *(void **)(a1 + 296);
  if (v15)
  {
    *(_QWORD *)(a1 + 304) = v15;
    operator delete(v15);
  }
  v16 = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 264) = 0;
  if (v16)
    (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  llvm::MCAsmLexer::~MCAsmLexer((llvm::MCAsmLexer *)(a1 + 40));
  *(_QWORD *)a1 = off_1E81AE1D0;
  sub_1C63EB414((char **)(a1 + 16));
  return a1;
}

uint64_t sub_1C60E4C18(uint64_t a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  void **v17;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v4 = (_QWORD *)(a1 + 40);
    v3 = *(void ***)(a1 + 8);
  }
  else
  {
    v4 = (_QWORD *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 32);
    v6 = &v2[v5 / 0x2E];
    v7 = (unint64_t)*v6 + 88 * (v5 % 0x2E);
    v8 = (unint64_t)v2[(*(_QWORD *)(a1 + 40) + v5) / 0x2E] + 88 * ((*(_QWORD *)(a1 + 40) + v5) % 0x2E);
    if (v7 != v8)
    {
      do
      {
        v17 = (void **)(v7 + 56);
        sub_1C4765410(&v17);
        v17 = (void **)(v7 + 32);
        sub_1C5934A04(&v17);
        v7 += 88;
        if (v7 - (_QWORD)*v6 == 4048)
        {
          v9 = (unint64_t)v6[1];
          ++v6;
          v7 = v9;
        }
      }
      while (v7 != v8);
      v2 = *(void ***)(a1 + 8);
      v3 = *(void ***)(a1 + 16);
    }
  }
  *v4 = 0;
  v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v11 = v10 >> 3;
  if (v11 == 1)
  {
    v12 = 23;
    goto LABEL_14;
  }
  if (v11 == 2)
  {
    v12 = 46;
LABEL_14:
    *(_QWORD *)(a1 + 32) = v12;
  }
  if (v2 != v3)
  {
    do
    {
      v13 = *v2++;
      operator delete(v13);
    }
    while (v2 != v3);
    v15 = *(_QWORD *)(a1 + 8);
    v14 = *(_QWORD *)(a1 + 16);
    if (v14 != v15)
      *(_QWORD *)(a1 + 16) = v14 + ((v15 - v14 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

uint64_t sub_1C60E4DB0(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t result;
  unint64_t v15;
  uint64_t v16;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
  v6 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8);
  v9 = *(uint64_t **)(v6 + 24);
  v7 = (uint64_t *)(v6 + 24);
  v8 = v9;
  if (*((_DWORD *)v7 + 2) >= 0x41u)
    v7 = v8;
  v10 = *v7;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
  v11 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8);
  v12 = *(_QWORD *)(v11 + 8);
  v13 = *(_QWORD *)(v11 + 16);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
  if (a3)
  {
    v15 = v13 - 2;
    if (v13)
      v16 = v12 + 1;
    else
      v16 = v12;
    if (v13 - (unint64_t)(v13 != 0) < v15)
      v15 = v13 - (v13 != 0);
    *(_QWORD *)(a1 + 432) = v16;
    *(_QWORD *)(a1 + 440) = v15;
    *(_QWORD *)(a1 + 448) = v10;
    *(_QWORD *)(a1 + 456) = a2;
    *(_DWORD *)(a1 + 464) = *(_DWORD *)(a1 + 280);
    if (!*(_QWORD *)(a1 + 480))
    {
      *(_QWORD *)(a1 + 472) = v16;
      *(_QWORD *)(a1 + 480) = v15;
    }
  }
  return result;
}

uint64_t sub_1C60E4E8C(uint64_t *a1, char a2)
{
  _QWORD *v4;
  unint64_t v5;
  char *v6;
  _WORD *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  int v15;
  __int16 v16;
  uint64_t v17;
  uint64_t result;
  uint64_t v19;
  uint64_t v20;
  char v21;

  v4 = (uint64_t *)((char *)a1 + 284);
  v6 = (char *)a1[38];
  v5 = a1[39];
  if ((unint64_t)v6 >= v5)
  {
    v8 = (char *)a1[37];
    v9 = (v6 - v8) >> 3;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61)
      abort();
    v11 = v5 - (_QWORD)v8;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        sub_1C4764EE4();
      v13 = (char *)operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    *(_QWORD *)v14 = *v4;
    v7 = v14 + 8;
    if (v6 != v8)
    {
      do
      {
        v15 = *((_DWORD *)v6 - 2);
        v6 -= 8;
        v16 = *((_WORD *)v6 + 2);
        *((_DWORD *)v14 - 2) = v15;
        v14 -= 8;
        *((_WORD *)v14 + 2) = v16;
      }
      while (v6 != v8);
      v6 = (char *)a1[37];
    }
    a1[37] = (uint64_t)v14;
    a1[38] = (uint64_t)v7;
    a1[39] = (uint64_t)&v13[8 * v12];
    if (v6)
      operator delete(v6);
  }
  else
  {
    *(_QWORD *)v6 = *v4;
    v7 = v6 + 8;
  }
  a1[38] = (uint64_t)v7;
  *((_DWORD *)a1 + 71) = 1;
  v17 = *a1;
  if (*((_BYTE *)a1 + 289))
  {
    (*(void (**)(uint64_t *))(v17 + 224))(a1);
    return 0;
  }
  else
  {
    (*(void (**)(uint64_t *))(v17 + 200))(a1);
    v20 = v19;
    if (llvm::MCAsmParser::parseEOL((llvm::MCAsmParser *)a1))
    {
      return 1;
    }
    else
    {
      result = 0;
      v21 = (v20 == 0) ^ a2;
      *((_BYTE *)a1 + 288) = v21 ^ 1;
      *((_BYTE *)a1 + 289) = v21;
    }
  }
  return result;
}

uint64_t sub_1C60E4FF8(_BYTE *a1, char a2)
{
  _QWORD *v4;
  unint64_t v5;
  char *v6;
  _WORD *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  int v15;
  __int16 v16;
  uint64_t result;
  uint64_t v18;
  unsigned int v19;
  BOOL v20;
  int v21;
  uint64_t v23;
  uint64_t v25;
  const void *v26;
  size_t v27;
  size_t v28;
  const void *v29;
  uint64_t v30;
  BOOL v31;
  char v32;
  uint64_t v33[2];
  uint64_t v34[4];
  __int16 v35;

  v4 = a1 + 284;
  v6 = (char *)*((_QWORD *)a1 + 38);
  v5 = *((_QWORD *)a1 + 39);
  if ((unint64_t)v6 >= v5)
  {
    v8 = (char *)*((_QWORD *)a1 + 37);
    v9 = (v6 - v8) >> 3;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61)
      abort();
    v11 = v5 - (_QWORD)v8;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        sub_1C4764EE4();
      v13 = (char *)operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    *(_QWORD *)v14 = *v4;
    v7 = v14 + 8;
    if (v6 != v8)
    {
      do
      {
        v15 = *((_DWORD *)v6 - 2);
        v6 -= 8;
        v16 = *((_WORD *)v6 + 2);
        *((_DWORD *)v14 - 2) = v15;
        v14 -= 8;
        *((_WORD *)v14 + 2) = v16;
      }
      while (v6 != v8);
      v6 = (char *)*((_QWORD *)a1 + 37);
    }
    *((_QWORD *)a1 + 37) = v14;
    *((_QWORD *)a1 + 38) = v7;
    *((_QWORD *)a1 + 39) = &v13[8 * v12];
    if (v6)
      operator delete(v6);
  }
  else
  {
    *(_QWORD *)v6 = *v4;
    v7 = v6 + 8;
  }
  *((_QWORD *)a1 + 38) = v7;
  *((_DWORD *)a1 + 71) = 1;
  if (a1[289])
  {
    (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 224))(a1);
    return 0;
  }
  else
  {
    v18 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 40))(a1) + 8) + 8);
    while (1)
    {
      v19 = **((_DWORD **)a1 + 6);
      v20 = v19 > 0x19;
      v21 = (1 << v19) & 0x2000201;
      if (!v20 && v21 != 0)
        break;
      sub_1C60E57B0((uint64_t)(a1 + 40));
    }
    v23 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 40))(a1) + 8) + 8) - v18;
    v33[0] = v18;
    v33[1] = v23;
    v34[0] = (uint64_t)"expected comma";
    v35 = 259;
    if (llvm::MCAsmParser::parseToken((llvm::MCAsmParser *)a1, 25, (llvm::Twine *)v34))
      return 1;
    v34[0] = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 200))(a1);
    v34[1] = v25;
    if (llvm::MCAsmParser::parseEOL((llvm::MCAsmParser *)a1))
    {
      return 1;
    }
    else
    {
      v26 = (const void *)sub_1C534E9D8(v33, " \t\n\v\f\r", 6);
      v28 = v27;
      v29 = (const void *)sub_1C534E9D8(v34, " \t\n\v\f\r", 6);
      if (v28 == v30)
      {
        if (v28)
          v31 = memcmp(v26, v29, v28) == 0;
        else
          v31 = 1;
      }
      else
      {
        v31 = 0;
      }
      result = 0;
      v32 = v31 ^ a2;
      a1[288] = v32 ^ 1;
      a1[289] = v32;
    }
  }
  return result;
}

uint64_t sub_1C60E5264(uint64_t a1, int a2)
{
  unint64_t v2;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  const void *v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  const void *v13;
  unint64_t v14;
  unint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  char *v18;
  _WORD *v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  char v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  int v28;
  __int16 v29;
  BOOL v30;
  uint64_t result;
  char v32;
  const char *v33;
  uint64_t v34;
  unint64_t v35;
  const void *v36;
  const void *v37;
  const char *v38;
  __int16 v39;

  LODWORD(v2) = a2;
  if (**(_DWORD **)(a1 + 48) != 3)
    goto LABEL_48;
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v5 = *(_QWORD *)(*(_QWORD *)(v4 + 8) + 16);
  v6 = v5 != 0;
  if (v5)
    v7 = (const void *)(*(_QWORD *)(*(_QWORD *)(v4 + 8) + 8) + 1);
  else
    v7 = *(const void **)(*(_QWORD *)(v4 + 8) + 8);
  if (v6 <= v5 - 1)
    v8 = v5 - 1;
  else
    v8 = v5 != 0;
  if (v5 >= v8)
    v9 = v8;
  else
    v9 = *(_QWORD *)(*(_QWORD *)(v4 + 8) + 16);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
  if (**(_DWORD **)(a1 + 48) != 25)
  {
    if ((_DWORD)v2)
      v33 = "expected comma after first string for '.ifeqs' directive";
    else
      v33 = "expected comma after first string for '.ifnes' directive";
    goto LABEL_54;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
  if (**(_DWORD **)(a1 + 48) != 3)
  {
LABEL_48:
    if ((_DWORD)v2)
      v33 = "expected string parameter for '.ifeqs' directive";
    else
      v33 = "expected string parameter for '.ifnes' directive";
LABEL_54:
    v38 = v33;
    v39 = 259;
    v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    llvm::MCAsmParser::Error(a1, *(_QWORD *)(v34 + 96), (uint64_t)&v38, 0, 0);
    return 1;
  }
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v11 = *(_QWORD *)(*(_QWORD *)(v10 + 8) + 16);
  v12 = v11 != 0;
  if (v11)
    v13 = (const void *)(*(_QWORD *)(*(_QWORD *)(v10 + 8) + 8) + 1);
  else
    v13 = *(const void **)(*(_QWORD *)(v10 + 8) + 8);
  if (v12 <= v11 - 1)
    v14 = v11 - 1;
  else
    v14 = v11 != 0;
  if (v11 >= v14)
    v15 = v14;
  else
    v15 = *(_QWORD *)(*(_QWORD *)(v10 + 8) + 16);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
  v16 = (_QWORD *)(a1 + 284);
  v18 = *(char **)(a1 + 304);
  v17 = *(_QWORD *)(a1 + 312);
  if ((unint64_t)v18 >= v17)
  {
    v36 = v7;
    v37 = v13;
    v35 = v9;
    v20 = *(char **)(a1 + 296);
    v21 = (v18 - v20) >> 3;
    v22 = v21 + 1;
    if ((unint64_t)(v21 + 1) >> 61)
      abort();
    v23 = v2;
    v24 = v17 - (_QWORD)v20;
    if (v24 >> 2 > v22)
      v22 = v24 >> 2;
    if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF8)
      v2 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v2 = v22;
    if (v2)
    {
      if (v2 >> 61)
        sub_1C4764EE4();
      v25 = (char *)operator new(8 * v2);
    }
    else
    {
      v25 = 0;
    }
    v26 = &v25[8 * v21];
    v27 = &v25[8 * v2];
    *(_QWORD *)v26 = *v16;
    v19 = v26 + 8;
    LOBYTE(v2) = v23;
    if (v18 == v20)
    {
      v7 = v36;
    }
    else
    {
      v7 = v36;
      do
      {
        v28 = *((_DWORD *)v18 - 2);
        v18 -= 8;
        v29 = *((_WORD *)v18 + 2);
        *((_DWORD *)v26 - 2) = v28;
        v26 -= 8;
        *((_WORD *)v26 + 2) = v29;
      }
      while (v18 != v20);
      v18 = *(char **)(a1 + 296);
    }
    v9 = v35;
    *(_QWORD *)(a1 + 296) = v26;
    *(_QWORD *)(a1 + 304) = v19;
    *(_QWORD *)(a1 + 312) = v27;
    v13 = v37;
    if (v18)
      operator delete(v18);
  }
  else
  {
    *(_QWORD *)v18 = *v16;
    v19 = v18 + 8;
  }
  *(_QWORD *)(a1 + 304) = v19;
  *(_DWORD *)(a1 + 284) = 1;
  v30 = v9 - v6 == v15 - v12 && (v15 == v12 || memcmp(v7, v13, v9 - v6) == 0);
  result = 0;
  v32 = v30 ^ v2;
  *(_BYTE *)(a1 + 288) = v32 ^ 1;
  *(_BYTE *)(a1 + 289) = v32;
  return result;
}

uint64_t sub_1C60E552C(_BYTE *a1, int a2)
{
  _QWORD *v4;
  unint64_t v5;
  char *v6;
  _WORD *v7;
  char *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  int v15;
  __int16 v16;
  uint64_t v17;
  uint64_t result;
  char v19;
  uint64_t v20;
  llvm::MCContext *v21;
  unint64_t *v22;
  unint64_t *v23;
  unint64_t v24;
  BOOL v25;
  unint64_t v26;
  const char *v27[4];
  __int16 v28;
  const char *v29;
  const char *v30;

  v4 = a1 + 284;
  v29 = 0;
  v30 = 0;
  v6 = (char *)*((_QWORD *)a1 + 38);
  v5 = *((_QWORD *)a1 + 39);
  if ((unint64_t)v6 >= v5)
  {
    v8 = (char *)*((_QWORD *)a1 + 37);
    v9 = (v6 - v8) >> 3;
    v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 61)
      abort();
    v11 = v5 - (_QWORD)v8;
    if (v11 >> 2 > v10)
      v10 = v11 >> 2;
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF8)
      v12 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v12 = v10;
    if (v12)
    {
      if (v12 >> 61)
        sub_1C4764EE4();
      v13 = (char *)operator new(8 * v12);
    }
    else
    {
      v13 = 0;
    }
    v14 = &v13[8 * v9];
    *(_QWORD *)v14 = *v4;
    v7 = v14 + 8;
    if (v6 != v8)
    {
      do
      {
        v15 = *((_DWORD *)v6 - 2);
        v6 -= 8;
        v16 = *((_WORD *)v6 + 2);
        *((_DWORD *)v14 - 2) = v15;
        v14 -= 8;
        *((_WORD *)v14 + 2) = v16;
      }
      while (v6 != v8);
      v6 = (char *)*((_QWORD *)a1 + 37);
    }
    *((_QWORD *)a1 + 37) = v14;
    *((_QWORD *)a1 + 38) = v7;
    *((_QWORD *)a1 + 39) = &v13[8 * v12];
    if (v6)
      operator delete(v6);
  }
  else
  {
    *(_QWORD *)v6 = *v4;
    v7 = v6 + 8;
  }
  *((_QWORD *)a1 + 38) = v7;
  *((_DWORD *)a1 + 71) = 1;
  v17 = *(_QWORD *)a1;
  if (a1[289])
  {
    (*(void (**)(_BYTE *))(v17 + 224))(a1);
    return 0;
  }
  v19 = (*(uint64_t (**)(_BYTE *, const char **))(v17 + 192))(a1, &v29);
  v27[0] = "expected identifier after '.ifdef'";
  v28 = 259;
  v20 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 40))(a1);
  if ((v19 & 1) != 0)
  {
    llvm::MCAsmParser::Error((uint64_t)a1, *(_QWORD *)(*(_QWORD *)(v20 + 8) + 8), (uint64_t)v27, 0, 0);
    return 1;
  }
  if (llvm::MCAsmParser::parseEOL((llvm::MCAsmParser *)a1))
    return 1;
  v21 = (llvm::MCContext *)(*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 48))(a1);
  v28 = 261;
  v27[0] = v29;
  v27[1] = v30;
  v22 = (unint64_t *)llvm::MCContext::lookupSymbol(v21, v27);
  v23 = v22;
  if (a2)
  {
    if (v22)
    {
      v24 = *v22 & 0xFFFFFFFFFFFFFFF8;
      if ((*v23 & 0xFFFFFFFFFFFFFFF8) == 0 && (v23[1] & 0x1C00) == 0x800)
      {
        llvm::MCExpr::findAssociatedFragment((llvm::MCExpr *)v23[3]);
        *v23 = *v23 & 7 | v24;
      }
      v25 = v24 != 0;
    }
    else
    {
      v25 = 0;
    }
  }
  else if (v22)
  {
    v26 = *v22 & 0xFFFFFFFFFFFFFFF8;
    if ((*v23 & 0xFFFFFFFFFFFFFFF8) == 0 && (v23[1] & 0x1C00) == 0x800)
    {
      llvm::MCExpr::findAssociatedFragment((llvm::MCExpr *)v23[3]);
      *v23 = *v23 & 7 | v26;
    }
    v25 = v26 == 0;
  }
  else
  {
    v25 = 1;
  }
  a1[288] = v25;
  result = 0;
  a1[289] = !v25;
  return result;
}

uint64_t sub_1C60E57B0(uint64_t a1)
{
  _DWORD *v2;
  _DWORD *v3;
  _QWORD v5[3];
  uint64_t v6;
  unsigned int v7;

  v3 = (_DWORD *)(a1 + 8);
  v2 = *(_DWORD **)(a1 + 8);
  *(_BYTE *)(a1 + 107) = *v2 == 9;
  sub_1C60E7188(a1 + 8, (uint64_t)v2);
  if (!v3[2])
  {
    (**(void (***)(_QWORD *__return_ptr, uint64_t))a1)(v5, a1);
    sub_1C4CD9B2C((uint64_t)v3, *(_QWORD *)(a1 + 8), (unint64_t)v5);
    if (v7 >= 0x41)
    {
      if (v6)
        MEMORY[0x1CAA32F9C](v6, 0x1000C8000313F17);
    }
  }
  return *(_QWORD *)v3;
}

BOOL sub_1C60E584C(_QWORD *a1)
{
  uint64_t v2;
  int v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  size_t v8;
  void *v9;
  size_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  BOOL v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v25;
  uint64_t v26;
  __int128 v27;
  char v28;
  _QWORD v29[3];

  v29[2] = *MEMORY[0x1E0C80C00];
  v2 = (*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1);
  v3 = *(unsigned __int8 *)(v2 + 1513);
  if (*(_BYTE *)(v2 + 1513) && !*(_DWORD *)((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) + 1516))
  {
    if (a1[60])
    {
      v5 = (*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1);
      v6 = (*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1);
      v7 = *(void **)(v6 + 1272);
      v8 = *(_QWORD *)(v6 + 1280);
      v9 = (void *)a1[59];
      v10 = a1[60];
      LODWORD(v27) = 0;
      v25.n128_u64[0] = (unint64_t)&v27;
      v11 = sub_1C592911C((uint64_t **)(v5 + 1472), (unsigned int *)&v27, (uint64_t)&std::piecewise_construct, &v25);
      LOBYTE(v27) = 0;
      v28 = 0;
      v25.n128_u8[0] = 0;
      LOBYTE(v26) = 0;
      v4 = sub_1C59292C4((uint64_t)(v11 + 40), v7, v8, v9, v10, &v27, &v25);
    }
    v12 = (*(uint64_t (**)(_QWORD *, __n128))(*a1 + 48))(a1, v4);
    LODWORD(v27) = 0;
    v25.n128_u64[0] = (unint64_t)&v27;
    v13 = sub_1C592911C((uint64_t **)(v12 + 1472), (unsigned int *)&v27, (uint64_t)&std::piecewise_construct, &v25);
    v14 = (*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1);
    v15 = (*(uint64_t (**)(_QWORD *))(*a1 + 56))(a1);
    v16 = (*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1);
    v17 = *(_QWORD *)(v16 + 1272);
    v18 = *(_QWORD *)(v16 + 1280);
    v19 = v13[447];
    v20 = v19 < 0;
    if (v19 >= 0)
      v21 = v13 + 424;
    else
      v21 = (char *)*((_QWORD *)v13 + 53);
    v22 = v19 & 0x7F;
    if (v20)
      v23 = *((_QWORD *)v13 + 54);
    else
      v23 = v22;
    v27 = *(_OWORD *)(v13 + 452);
    v28 = v13[468];
    v25 = *(__n128 *)(v13 + 472);
    v26 = *((_QWORD *)v13 + 61);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t, char *, uint64_t, __int128 *, __n128 *, _DWORD))(*(_QWORD *)v15 + 680))(v29, v15, 0, v17, v18, v21, v23, &v27, &v25, 0);
    *(_DWORD *)(v14 + 1516) = v29[0];
  }
  return v3 != 0;
}

uint64_t sub_1C60E5A64(llvm::MCAsmParser *a1, const char *a2, uint64_t a3, unsigned int a4)
{
  uint64_t v8;
  unint64_t v10;
  void (*v11)(void);
  const char *v12;
  __int16 v13;
  _BYTE *v14;
  unint64_t v15;

  v14 = 0;
  v15 = 0;
  v8 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1) + 8) + 8);
  if ((llvm::MCParserUtils::parseAssignmentExpression(a2, a3, (a4 & 0xFFFFFFFD) == 0, a1, &v15, (uint64_t *)&v14) & 1) != 0)
    return 1;
  v10 = v15;
  if (!v15
    || ((*(uint64_t (**)(llvm::MCAsmParser *, const char *, uint64_t))(*(_QWORD *)a1 + 104))(a1, a2, a3) & 1) != 0)
  {
    return 0;
  }
  if (a4 < 2)
  {
    (*(void (**)(_QWORD *, unint64_t, _BYTE *))(**((_QWORD **)a1 + 28) + 280))(*((_QWORD **)a1 + 28), v10, v14);
    (*(void (**)(_QWORD *, unint64_t, uint64_t))(**((_QWORD **)a1 + 28) + 304))(*((_QWORD **)a1 + 28), v10, 17);
  }
  else
  {
    if (a4 == 3)
    {
      if (*v14 != 2)
      {
        v12 = "expected identifier";
        v13 = 259;
        return llvm::MCAsmParser::Error((uint64_t)a1, v8, (uint64_t)&v12, 0, 0);
      }
      v11 = *(void (**)(void))(**((_QWORD **)a1 + 28) + 288);
      goto LABEL_12;
    }
    if (a4 == 2)
    {
      v11 = *(void (**)(void))(**((_QWORD **)a1 + 28) + 280);
LABEL_12:
      v11();
    }
  }
  return 0;
}

uint64_t sub_1C60E5BC4(llvm::MCAsmParser *a1, unsigned int a2)
{
  int v4;
  uint64_t v5;
  const char *v7;
  __int16 v8;
  const char *v9;
  uint64_t v10;
  const char *v11;
  __int16 v12;

  v9 = 0;
  v10 = 0;
  v4 = (*(uint64_t (**)(llvm::MCAsmParser *, const char **))(*(_QWORD *)a1 + 192))(a1, &v9);
  v7 = "expected identifier";
  v8 = 259;
  v5 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1);
  if (v4)
  {
    llvm::MCAsmParser::Error((uint64_t)a1, *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8), (uint64_t)&v7, 0, 0);
    return 1;
  }
  v11 = "expected comma";
  v12 = 259;
  if (llvm::MCAsmParser::parseToken(a1, 25, (llvm::Twine *)&v11))
    return 1;
  return sub_1C60E5A64(a1, v9, v10, a2);
}

BOOL sub_1C60E5C90(llvm::MCAsmParser *a1, int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  int v9;
  uint64_t v10;
  int8x8_t v11;
  uint8x8_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  char v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int v22;
  _QWORD v23[4];
  __int16 v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v6 = *(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1) + 96);
  v25 = 0;
  v26 = 0;
  if (((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 264))(a1) & 1) != 0)
    return 1;
  v27 = 0;
  if ((_DWORD)a3 == 1
    && a2
    && **(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1) + 8) == 9)
  {
    v23[0] = "p2align directive with no operand(s) is ignored";
    v24 = 259;
    (*(void (**)(llvm::MCAsmParser *, uint64_t, _QWORD *, _QWORD, _QWORD))(*(_QWORD *)a1 + 168))(a1, v6, v23, 0, 0);
    return llvm::MCAsmParser::parseEOL(a1);
  }
  if (((*(uint64_t (**)(llvm::MCAsmParser *, uint64_t *))(*(_QWORD *)a1 + 256))(a1, &v27) & 1) != 0)
    return 1;
  if (llvm::MCAsmParser::parseOptionalToken(a1, 25))
  {
    if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1) + 8) == 25)
    {
      v9 = 0;
    }
    else
    {
      v7 = 1;
      if (((*(uint64_t (**)(llvm::MCAsmParser *, uint64_t *))(*(_QWORD *)a1 + 256))(a1, &v26) & 1) != 0)
        return v7;
      v9 = 1;
    }
    if (llvm::MCAsmParser::parseOptionalToken(a1, 25))
    {
      v10 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1) + 8)
                      + 8);
      if (((*(uint64_t (**)(llvm::MCAsmParser *, uint64_t *))(*(_QWORD *)a1 + 256))(a1, &v25) & 1) != 0)
        return 1;
    }
    else
    {
      v10 = 0;
    }
  }
  else
  {
    v10 = 0;
    v9 = 0;
  }
  if (!llvm::MCAsmParser::parseEOL(a1))
  {
    v11 = (int8x8_t)v27;
    if (a2)
    {
      if (v27 >= 32)
      {
        v23[0] = "invalid alignment value";
        v24 = 259;
        v7 = llvm::MCAsmParser::Error((uint64_t)a1, v6, (uint64_t)v23, 0, 0);
        v11.i8[0] = 31;
      }
      else
      {
        v7 = 0;
      }
      v27 = 1 << v11.i8[0];
      if (!v10)
        goto LABEL_34;
    }
    else
    {
      if (!v27)
      {
        v11 = (int8x8_t)1;
        v27 = 1;
      }
      v12 = (uint8x8_t)vcnt_s8(v11);
      v12.i16[0] = vaddlv_u8(v12);
      if (v12.u32[0] == 1)
      {
        v7 = 0;
      }
      else
      {
        v23[0] = "alignment must be a power of 2";
        v24 = 259;
        v7 = llvm::MCAsmParser::Error((uint64_t)a1, v6, (uint64_t)v23, 0, 0);
        v11 = (int8x8_t)v27;
      }
      if (HIDWORD(*(_QWORD *)&v11))
      {
        v23[0] = "alignment must be smaller than 2**32";
        v24 = 259;
        v7 = v7 | llvm::MCAsmParser::Error((uint64_t)a1, v6, (uint64_t)v23, 0, 0);
        if (!v10)
          goto LABEL_34;
      }
      else if (!v10)
      {
        goto LABEL_34;
      }
    }
    v13 = v25;
    if (v25 <= 0)
    {
      v23[0] = "alignment directive can never be satisfied in this many bytes, ignoring maximum bytes expression";
      v24 = 259;
      v22 = llvm::MCAsmParser::Error((uint64_t)a1, v10, (uint64_t)v23, 0, 0);
      v13 = 0;
      v7 = v7 | v22;
      v25 = 0;
    }
    if (v13 >= v27)
    {
      v23[0] = "maximum bytes expression exceeds alignment and has no effect";
      v24 = 259;
      (*(void (**)(llvm::MCAsmParser *, uint64_t, _QWORD *, _QWORD, _QWORD))(*(_QWORD *)a1 + 168))(a1, v10, v23, 0, 0);
      v25 = 0;
    }
LABEL_34:
    v14 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 56))(a1);
    v15 = *(_QWORD *)(*(_QWORD *)(v14 + 112) + 32 * *(unsigned int *)(v14 + 120) - 32);
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
    if (v9)
    {
      if ((_DWORD)a3 == 1 && v26 == *(_DWORD *)(*((_QWORD *)a1 + 22) + 340))
        v18 = v16;
      else
        v18 = 0;
      if ((v18 & 1) != 0)
      {
LABEL_42:
        v19 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 56))(a1);
        (*(void (**)(uint64_t, _QWORD, _QWORD, _QWORD))(*(_QWORD *)v19 + 640))(v19, v27, *(_QWORD *)(*((_QWORD *)a1 + 1) + 240), v25);
        return v7;
      }
    }
    else
    {
      if ((_DWORD)a3 == 1)
        v20 = v16;
      else
        v20 = 0;
      if (v20 == 1)
        goto LABEL_42;
    }
    v21 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 56))(a1);
    (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, _QWORD))(*(_QWORD *)v21 + 632))(v21, v27, v26, a3, v25);
    return v7;
  }
  return 1;
}

uint64_t sub_1C60E6090(llvm::MCAsmParser *a1, int a2)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t Symbol;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint8x8_t v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  void (*v20)(void);
  int8x8_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD v25[4];
  __int16 v26;

  if (((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 264))(a1) & 1) != 0)
    return 1;
  v5 = *(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1) + 96);
  v23 = 0;
  v24 = 0;
  if ((*(unsigned int (**)(llvm::MCAsmParser *, uint64_t *))(*(_QWORD *)a1 + 192))(a1, &v23))
  {
    v25[0] = "expected identifier in directive";
    v26 = 259;
    v6 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1);
    llvm::MCAsmParser::Error((uint64_t)a1, *(_QWORD *)(v6 + 96), (uint64_t)v25, 0, 0);
    return 1;
  }
  v7 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 48))(a1);
  v26 = 261;
  v25[0] = v23;
  v25[1] = v24;
  Symbol = llvm::MCContext::getOrCreateSymbol(v7, (uint64_t)v25);
  v25[0] = "expected comma";
  v26 = 259;
  if (llvm::MCAsmParser::parseToken(a1, 25, (llvm::Twine *)v25))
    return 1;
  v22 = 0;
  v9 = *(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1) + 96);
  if (((*(uint64_t (**)(llvm::MCAsmParser *, uint64_t *))(*(_QWORD *)a1 + 256))(a1, &v22) & 1) != 0)
    return 1;
  v21 = 0;
  if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1) + 8) == 25)
  {
    (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 184))(a1);
    v10 = *(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1) + 96);
    if (((*(uint64_t (**)(llvm::MCAsmParser *, int8x8_t *))(*(_QWORD *)a1 + 256))(a1, &v21) & 1) != 0)
      return 1;
    v11 = *((_QWORD *)a1 + 22);
    v12 = *(_DWORD *)(v11 + 356);
    if (a2 && !v12)
    {
      v13 = "alignment not supported on this target";
LABEL_12:
      v25[0] = v13;
      v26 = 259;
      v14 = (uint64_t)a1;
      v15 = v10;
      return llvm::MCAsmParser::Error(v14, v15, (uint64_t)v25, 0, 0);
    }
    if ((a2 & 1) != 0)
    {
      if (v12 != 1)
        goto LABEL_20;
    }
    else if (!*(_BYTE *)(v11 + 354))
    {
      goto LABEL_20;
    }
    v16 = (uint8x8_t)vcnt_s8(v21);
    v16.i16[0] = vaddlv_u8(v16);
    if (v16.u32[0] != 1)
    {
      v13 = "alignment must be a power of 2";
      goto LABEL_12;
    }
    v21 = (int8x8_t)(63 - __clz(*(_QWORD *)&v21));
  }
LABEL_20:
  if (llvm::MCAsmParser::parseEOL(a1))
    return 1;
  if (v22 < 0)
  {
    v25[0] = "size must be non-negative";
    v26 = 259;
    v14 = (uint64_t)a1;
    v15 = v9;
    return llvm::MCAsmParser::Error(v14, v15, (uint64_t)v25, 0, 0);
  }
  v17 = *(_DWORD *)(Symbol + 8);
  if ((v17 & 2) != 0)
  {
    if ((*(_DWORD *)(Symbol + 8) & 0x1C00) == 0x800)
    {
      *(_QWORD *)(Symbol + 24) = 0;
      v17 &= 0xFFFFE3FF;
    }
    v18 = 0;
    *(_QWORD *)Symbol &= 7uLL;
    v17 &= ~2u;
    *(_DWORD *)(Symbol + 8) = v17;
  }
  else
  {
    v18 = *(_QWORD *)Symbol & 0xFFFFFFFFFFFFFFF8;
    if (v18)
      goto LABEL_30;
  }
  if ((v17 & 0x1C00) == 0x800)
  {
    *(_DWORD *)(Symbol + 8) = v17 | 4;
    llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(Symbol + 24));
    *(_QWORD *)Symbol = *(_QWORD *)Symbol & 7 | v18;
  }
LABEL_30:
  if (v18)
  {
    v25[0] = "invalid symbol redefinition";
    v26 = 259;
    v14 = (uint64_t)a1;
    v15 = v5;
    return llvm::MCAsmParser::Error(v14, v15, (uint64_t)v25, 0, 0);
  }
  v19 = *(_QWORD *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 56))(a1);
  if (a2)
    v20 = *(void (**)(void))(v19 + 464);
  else
    v20 = *(void (**)(void))(v19 + 456);
  v20();
  return 0;
}

uint64_t sub_1C60E63D4(llvm::MCAsmParser *a1, int a2)
{
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  const char **v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(void);
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  _QWORD v22[4];
  __int16 v23;

  v21 = 0;
  if (((*(uint64_t (**)(llvm::MCAsmParser *, unint64_t *))(*(_QWORD *)a1 + 256))(a1, &v21) & 1) != 0)
    return 1;
  if (v21 != 255)
  {
    v19 = 0;
    v20 = 0;
    if (v21 > 0xFF
      || (v21 & 0xD) != 0 && ((v21 & 0xF) <= 0xC ? (v5 = ((1 << (v21 & 0xF)) & 0x1D18) == 0) : (v5 = 1), v5))
    {
      v17 = "unsupported encoding.";
      v18 = 259;
      v7 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1);
    }
    else
    {
      v6 = v21 & 0x60;
      v17 = "unsupported encoding.";
      v18 = 259;
      v7 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1);
      if (!v6)
      {
        v22[0] = "expected comma";
        v23 = 259;
        if (!llvm::MCAsmParser::parseToken(a1, 25, (llvm::Twine *)v22))
        {
          v8 = (*(uint64_t (**)(llvm::MCAsmParser *, uint64_t *))(*(_QWORD *)a1 + 192))(a1, &v19);
          v15 = "expected identifier in directive";
          v16 = 259;
          v9 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1);
          if (v8)
          {
            v10 = *(_QWORD *)(*(_QWORD *)(v9 + 8) + 8);
            v11 = &v15;
LABEL_17:
            llvm::MCAsmParser::Error((uint64_t)a1, v10, (uint64_t)v11, 0, 0);
            return 1;
          }
          if (!llvm::MCAsmParser::parseEOL(a1))
          {
            v12 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 48))(a1);
            v23 = 261;
            v22[0] = v19;
            v22[1] = v20;
            llvm::MCContext::getOrCreateSymbol(v12, (uint64_t)v22);
            v13 = *(_QWORD *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 56))(a1);
            if (a2)
              v14 = *(void (**)(void))(v13 + 904);
            else
              v14 = *(void (**)(void))(v13 + 912);
            v14();
            return 0;
          }
        }
        return 1;
      }
    }
    v10 = *(_QWORD *)(*(_QWORD *)(v7 + 8) + 8);
    v11 = &v17;
    goto LABEL_17;
  }
  return 0;
}

uint64_t sub_1C60E65BC(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5;
  int v7;
  const char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  _QWORD v15[4];
  __int16 v16;

  v5 = *(_QWORD *)(a1 + 304);
  if (*(_QWORD *)(a1 + 296) == v5 || !*(_BYTE *)(v5 - 3))
  {
    if ((a3 & 1) != 0)
    {
      v7 = **(_DWORD **)(a1 + 48);
      if (v7 == 3)
      {
        v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
        v11 = *(_QWORD *)(*(_QWORD *)(v10 + 8) + 16);
        v12 = v11 != 0;
        if (v11)
          v8 = (const char *)(*(_QWORD *)(*(_QWORD *)(v10 + 8) + 8) + 1);
        else
          v8 = *(const char **)(*(_QWORD *)(v10 + 8) + 8);
        if (v12 <= v11 - 1)
          v13 = v11 - 1;
        else
          v13 = v11 != 0;
        if (v11 < v13)
          v13 = *(_QWORD *)(*(_QWORD *)(v10 + 8) + 16);
        v9 = v13 - v12;
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
      }
      else
      {
        if (v7 != 9)
        {
          v15[0] = ".error argument must be a string";
          v16 = 259;
          v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
          llvm::MCAsmParser::Error(a1, *(_QWORD *)(v14 + 96), (uint64_t)v15, 0, 0);
          return 1;
        }
        v8 = ".error directive invoked in source file";
        v9 = 39;
      }
      v16 = 261;
      v15[0] = v8;
      v15[1] = v9;
    }
    else
    {
      v15[0] = ".err encountered";
      v16 = 259;
    }
    return llvm::MCAsmParser::Error(a1, a2, (uint64_t)v15, 0, 0);
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 224))(a1);
  return 0;
}

uint64_t sub_1C60E670C(llvm::MCAsmParser *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v10;
  int64_t v11;
  uint64_t v12;
  uint64_t j;
  uint64_t v14;
  uint64_t i;
  uint64_t v16;
  _QWORD v17[4];
  __int16 v18;
  uint64_t v19;
  _QWORD v20[4];
  __int16 v21;

  v8 = *((_QWORD *)a1 + 17);
  if (((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 264))(a1) & 1) != 0)
    return 1;
  v19 = 0;
  if (((*(uint64_t (**)(llvm::MCAsmParser *, uint64_t *))(*(_QWORD *)a1 + 256))(a1, &v19) & 1) != 0)
    return 1;
  if (v19 < 0)
  {
    v17[0] = "'";
    v17[2] = a2;
    v17[3] = a3;
    v18 = 1283;
    v20[0] = v17;
    v20[2] = "' directive with negative repeat count has no effect";
    v21 = 770;
    (*(void (**)(llvm::MCAsmParser *, uint64_t, _QWORD *, _QWORD, _QWORD))(*(_QWORD *)a1 + 168))(a1, v8, v20, 0, 0);
    return 0;
  }
  v20[0] = "expected comma";
  v21 = 259;
  if (llvm::MCAsmParser::parseToken(a1, 25, (llvm::Twine *)v20))
    return 1;
  v17[0] = 0;
  v10 = *(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1) + 96);
  v20[0] = 0;
  if (((*(uint64_t (**)(llvm::MCAsmParser *, _QWORD *, _QWORD *))(*(_QWORD *)a1 + 232))(a1, v17, v20) & 1) != 0)
    return 1;
  if (*(_BYTE *)v17[0] != 1)
  {
    for (i = v19; i; --i)
    {
      v16 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 56))(a1);
      (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v16 + 504))(v16, v17[0], a4, v10);
    }
    return llvm::MCAsmParser::parseEOL(a1);
  }
  v11 = *(_QWORD *)(v17[0] + 16);
  if (0xFFFFFFFFFFFFFFFFLL >> (-8 * a4) >= v11
    || (v12 = -1 << (8 * a4 - 1), v12 <= v11) && v11 <= ~v12)
  {
    for (j = v19; j; --j)
    {
      v14 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 56))(a1);
      (*(void (**)(uint64_t, int64_t, uint64_t))(*(_QWORD *)v14 + 512))(v14, v11, a4);
    }
    return llvm::MCAsmParser::parseEOL(a1);
  }
  v20[0] = "literal value out of range for directive";
  v21 = 259;
  return llvm::MCAsmParser::Error((uint64_t)a1, v10, (uint64_t)v20, 0, 0);
}

uint64_t sub_1C60E6938(llvm::MCAsmParser *a1, uint64_t a2, uint64_t a3, void *a4)
{
  _DWORD *v8;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  _QWORD v14[4];
  __int16 v15;
  uint64_t v16;
  uint64_t **v17;
  unsigned int v18;
  const char *v19;
  __int16 v20;

  v8 = (_DWORD *)*((_QWORD *)a1 + 17);
  if (((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 264))(a1) & 1) != 0)
    return 1;
  v16 = 0;
  if (((*(uint64_t (**)(llvm::MCAsmParser *, uint64_t *))(*(_QWORD *)a1 + 256))(a1, &v16) & 1) != 0)
    return 1;
  if (v16 < 0)
  {
    v14[0] = "'";
    v14[2] = a2;
    v14[3] = a3;
    v15 = 1283;
    v17 = (uint64_t **)v14;
    v19 = "' directive with negative repeat count has no effect";
    v20 = 770;
    (*(void (**)(llvm::MCAsmParser *, _DWORD *, uint64_t ***, _QWORD, _QWORD))(*(_QWORD *)a1 + 168))(a1, v8, &v17, 0, 0);
    return 0;
  }
  else
  {
    v17 = (uint64_t **)"expected comma";
    v20 = 259;
    v9 = 1;
    if (!llvm::MCAsmParser::parseToken(a1, 25, (llvm::Twine *)&v17))
    {
      v18 = 1;
      v17 = 0;
      if ((sub_1C60E94C0((_DWORD **)a1, a4, (uint64_t)&v17) & 1) == 0 && !llvm::MCAsmParser::parseEOL(a1))
      {
        v11 = v16;
        if (v16)
        {
          do
          {
            v12 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 56))(a1);
            v13 = sub_1C47EE5B8(&v17, 0xFFFFFFFFFFFFFFFFLL);
            (*(void (**)(uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v12 + 512))(v12, v13, v18 >> 3);
            v9 = 0;
            --v11;
          }
          while (v11);
        }
        else
        {
          v9 = 0;
        }
      }
      if (v18 >= 0x41 && v17)
        MEMORY[0x1CAA32F9C](v17, 0x1000C8000313F17);
    }
  }
  return v9;
}

uint64_t sub_1C60E6AF0(llvm::MCAsmParser *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  llvm::MCStreamer *v11;
  _QWORD v12[4];
  __int16 v13;
  _QWORD v14[4];
  __int16 v15;
  uint64_t v16;

  v8 = *((_QWORD *)a1 + 17);
  if (((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 264))(a1) & 1) != 0)
    return 1;
  v16 = 0;
  if (((*(uint64_t (**)(llvm::MCAsmParser *, uint64_t *))(*(_QWORD *)a1 + 256))(a1, &v16) & 1) != 0
    || llvm::MCAsmParser::parseEOL(a1))
  {
    return 1;
  }
  v10 = v16;
  if (v16 < 0)
  {
    v12[0] = "'";
    v12[2] = a2;
    v12[3] = a3;
    v13 = 1283;
    v14[0] = v12;
    v14[2] = "' directive with negative repeat count has no effect";
    v15 = 770;
    (*(void (**)(llvm::MCAsmParser *, uint64_t, _QWORD *, _QWORD, _QWORD))(*(_QWORD *)a1 + 168))(a1, v8, v14, 0, 0);
    return 0;
  }
  if (!v16)
    return 0;
  do
  {
    v11 = (llvm::MCStreamer *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 56))(a1);
    llvm::MCStreamer::emitFill(v11, a4, 0);
    result = 0;
    --v10;
  }
  while (v10);
  return result;
}

uint64_t sub_1C60E6C08(uint64_t a1, uint64_t a2, char *a3, unint64_t a4, __int128 *a5, char *a6)
{
  void **v10;
  uint64_t v11;
  void *v12;
  char v13;
  char v14;
  uint64_t v15;
  void *v17;
  void *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  int v24;
  uint64_t *v25;
  int v26;
  char *v27;
  uint64_t v28;
  unint64_t LineAndColumn;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  __int128 v36;
  uint64_t v37;
  void *v38;
  unsigned int v39;
  uint64_t v40;
  void *__p[2];
  char v42;
  unint64_t v43[2];
  _QWORD v44[4];
  __int16 v45;
  uint64_t (**v46)();
  int v47;
  uint64_t v48;
  char *v49;
  char *v50;
  char v51;
  uint64_t v52;
  int v53;
  void **v54;
  void *v55;
  __int128 v56;
  _QWORD v57[33];

  v57[32] = *MEMORY[0x1E0C80C00];
  v10 = __p;
  sub_1C5E3DEA4(__p, a3, (uint64_t (*)(_QWORD))sub_1C5E3C6A8, &a3[a4], (uint64_t)sub_1C5E3C6A8, a4);
  v40 = *(_QWORD *)(a2 + 88);
  v11 = *(_QWORD *)(a1 + 8);
  if (v42 >= 0)
  {
    v12 = (void *)(v42 & 0x7F);
  }
  else
  {
    v10 = (void **)__p[0];
    v12 = __p[1];
  }
  v36 = *a5;
  v37 = *((_QWORD *)a5 + 2);
  v39 = *((_DWORD *)a5 + 8);
  if (v39 > 0x40)
  {
    v38 = (void *)operator new[]();
    memcpy(v38, *((const void **)a5 + 3), (((unint64_t)v39 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v38 = (void *)*((_QWORD *)a5 + 3);
  }
  v13 = (*(uint64_t (**)(uint64_t, uint64_t *, void **, void *, __int128 *, uint64_t))(*(_QWORD *)v11 + 56))(v11, &v40, v10, v12, &v36, a2);
  if (v39 >= 0x41 && v38)
    MEMORY[0x1CAA32F9C](v38, 0x1000C8000313F17);
  *(_BYTE *)(a2 + 84) = v13;
  if (*(_BYTE *)(a1 + 33))
  {
    v55 = v57;
    v56 = xmmword_1C64638F0;
    v47 = 0;
    v51 = 0;
    v52 = 0;
    v46 = &off_1E81A7280;
    v54 = &v55;
    v53 = 0;
    v49 = 0;
    v50 = 0;
    v48 = 0;
    llvm::raw_ostream::write((llvm::raw_ostream *)&v46, "parsed instruction: [", 0x15uLL);
    if (*(_DWORD *)(a2 + 8))
    {
      v23 = 0;
      v24 = 0;
      do
      {
        if (v24)
        {
          if ((unint64_t)(v49 - v50) > 1)
          {
            *(_WORD *)v50 = 8236;
            v50 += 2;
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&v46, ", ", 2uLL);
          }
        }
        (*(void (**)(_QWORD, uint64_t (***)()))(**(_QWORD **)(*(_QWORD *)a2 + 8 * v23) + 120))(*(_QWORD *)(*(_QWORD *)a2 + 8 * v23), &v46);
        v23 = (v24 + 1);
        v24 = v23;
      }
      while ((_DWORD)v23 != *(_DWORD *)(a2 + 8));
    }
    if (v49 == v50)
      llvm::raw_ostream::write((llvm::raw_ostream *)&v46, "]", 1uLL);
    else
      *v50++ = 93;
    v18 = *v54;
    v17 = v54[1];
    v45 = 261;
    v44[0] = v18;
    v44[1] = v17;
    v43[0] = 0;
    v43[1] = 0;
    llvm::SourceMgr::PrintMessage(*(llvm **)(a1 + 240), a6, 3, (llvm::Twine *)v44, v43, 1, 0, 0, 1u);
    v46 = (uint64_t (**)())off_1E81A6E70;
    if (v53 == 1 && v48)
      MEMORY[0x1CAA32F9C](v48, 0x1000C8077774924);
    if (v55 != v57)
      free(v55);
  }
  if (*(_DWORD *)(a1 + 24))
    v14 = 1;
  else
    v14 = v13;
  if ((v14 & 1) != 0)
  {
    v15 = 1;
  }
  else
  {
    if (sub_1C60E584C((_QWORD *)a1))
    {
      v19 = (uint64_t *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) + 1520);
      v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
      v21 = *(unsigned int *)(v20 + 120);
      v22 = (_DWORD)v21 ? *(void **)(*(_QWORD *)(v20 + 112) + 32 * v21 - 32) : 0;
      v55 = v22;
      v46 = 0;
      if (sub_1C614F7B0(v19, &v55, &v46))
      {
        v25 = *(uint64_t **)(a1 + 352);
        if (v25 == *(uint64_t **)(a1 + 360))
        {
          v26 = *(_DWORD *)(a1 + 280);
          v27 = a6;
        }
        else
        {
          v28 = *v25;
          v27 = *(char **)v28;
          v26 = *(_DWORD *)(v28 + 8);
        }
        LineAndColumn = llvm::SourceMgr::getLineAndColumn(*(uint64_t **)(a1 + 240), v27, v26);
        if (*(_QWORD *)(a1 + 440))
        {
          v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
          v33 = *(_QWORD *)(a1 + 432);
          v34 = *(_QWORD *)(a1 + 440);
          LOBYTE(v46) = 0;
          LOBYTE(v48) = 0;
          LOBYTE(v55) = 0;
          BYTE8(v56) = 0;
          (*(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, uint64_t (***)(), void **, _DWORD))(*(_QWORD *)v32 + 680))(v44, v32, 0, 0, 0, v33, v34, &v46, &v55, 0);
          v35 = v44[0];
          *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) + 1516) = v35;
          LineAndColumn = ~llvm::SourceMgr::getLineAndColumn(*(uint64_t **)(a1 + 240), *(char **)(a1 + 456), *(_DWORD *)(a1 + 464))+ *(_DWORD *)(a1 + 448)+ LineAndColumn;
        }
        v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
        v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
        (*(void (**)(uint64_t, _QWORD, unint64_t, _QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v30 + 704))(v30, *(unsigned int *)(v31 + 1516), LineAndColumn, 0, 1, 0, 0);
      }
    }
    v55 = 0;
    v15 = (*(uint64_t (**)(_QWORD, char *, uint64_t, uint64_t, _QWORD, void **, _QWORD))(**(_QWORD **)(a1 + 8)
                                                                                               + 72))(*(_QWORD *)(a1 + 8), a6, a2 + 80, a2, *(_QWORD *)(a1 + 224), &v55, *(unsigned __int8 *)(*(_QWORD *)(a1 + 8) + 64));
  }
  if (v42 < 0)
    operator delete(__p[0]);
  return v15;
}

unint64_t sub_1C60E7114(uint64_t a1, unint64_t a2, uint64_t a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  unint64_t v9;

  v3 = a2;
  v4 = *(unsigned int *)(a1 + 8);
  v5 = v4 + a3;
  if (v5 > *(unsigned int *)(a1 + 12))
  {
    v7 = *(_QWORD *)a1 + (v4 << 7);
    if (*(_QWORD *)a1 <= a2 && v7 > a2)
    {
      v9 = a2 - *(_QWORD *)a1;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v5, 128);
      return *(_QWORD *)a1 + v9;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v5, 128);
    }
  }
  return v3;
}

uint64_t sub_1C60E7188(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;

  sub_1C60E7214((__int128 *)(a2 + 40), (__int128 *)(*(_QWORD *)a1 + 40 * *(unsigned int *)(a1 + 8)), a2);
  v4 = *(_DWORD *)(a1 + 8) - 1;
  *(_DWORD *)(a1 + 8) = v4;
  if (*(_DWORD *)(*(_QWORD *)a1 + 40 * v4 + 32) >= 0x41u)
  {
    v5 = *(_QWORD *)(*(_QWORD *)a1 + 40 * v4 + 24);
    if (v5)
      MEMORY[0x1CAA32F9C](v5, 0x1000C8000313F17);
  }
  return a2;
}

__int128 *sub_1C60E7214(__int128 *a1, __int128 *a2, uint64_t a3)
{
  __int128 *v4;
  __int128 v6;
  uint64_t v7;

  v4 = a1;
  if (a1 != a2)
  {
    do
    {
      v6 = *v4;
      *(_QWORD *)(a3 + 16) = *((_QWORD *)v4 + 2);
      *(_OWORD *)a3 = v6;
      if (*(_DWORD *)(a3 + 32) >= 0x41u)
      {
        v7 = *(_QWORD *)(a3 + 24);
        if (v7)
          MEMORY[0x1CAA32F9C](v7, 0x1000C8000313F17);
      }
      *(_QWORD *)(a3 + 24) = *((_QWORD *)v4 + 3);
      *(_DWORD *)(a3 + 32) = *((_DWORD *)v4 + 8);
      *((_DWORD *)v4 + 8) = 0;
      a3 += 40;
      v4 = (__int128 *)((char *)v4 + 40);
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t sub_1C60E72B0(_QWORD *a1, _QWORD *a2, uint64_t *a3)
{
  _QWORD *v3;
  unint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  _BYTE *v9;
  int v10;
  int v11;
  int v12;
  _BYTE *v13;
  unsigned int v14;
  BOOL v15;
  size_t v17;
  uint64_t v18;
  unint64_t v19;
  _QWORD *v20;
  const void *v21;
  _QWORD *v22;
  uint64_t v23;
  char **v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  _BYTE *v29;
  char *v30;
  __int128 v31;
  unsigned int v32;
  char *v33;
  void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  const void **v51;
  uint64_t v52;
  uint64_t v53;
  const char *v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  uint64_t v59;
  _BOOL4 v60;
  char v62;
  _QWORD v63[2];
  const void *v64;
  size_t v65;
  __int16 v66;
  _QWORD v67[2];
  const char *v68;
  __int16 v69;
  _QWORD v70[2];
  uint64_t v71;
  uint64_t v72;
  __int16 v73;
  _BYTE *v74;
  __int128 v75;
  const char *v76;
  void *__src;
  unsigned int v78;
  __int128 v79;
  char *v80[5];
  _QWORD *v81;
  uint64_t v82;
  _QWORD v83[7];

  v3 = a2;
  v83[4] = *MEMORY[0x1E0C80C00];
  if (a2)
    v5 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a2[5] - a2[4]) >> 4);
  else
    v5 = 0;
  v81 = v83;
  v82 = 0x400000000;
  v6 = v5;
  sub_1C63E9C5C(a3, v5);
  sub_1C63E9CF0((uint64_t)&v81, v5);
  if ((_DWORD)v5)
    v60 = *(_BYTE *)(v3[5] - 7) != 0;
  else
    v60 = 0;
  v62 = 0;
  v7 = 0;
  v8 = v5 - 1;
  while (1)
  {
    v9 = (_BYTE *)a1[17];
    v79 = 0u;
    memset(v80, 0, 26);
    if (*(_DWORD *)a1[6] == 2)
    {
      *((_QWORD *)&v75 + 1) = 0;
      v76 = 0;
      v78 = 1;
      __src = 0;
      (*(void (**)(_QWORD *, __int128 *, uint64_t, uint64_t))(a1[5] + 32))(a1 + 5, &v75, 1, 1);
      v10 = v75;
      if (v78 >= 0x41 && __src)
        MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
      if (v10 == 27)
      {
        if ((*(unsigned int (**)(_QWORD *, __int128 *))(*a1 + 192))(a1, &v79))
        {
          v54 = "invalid argument identifier for formal argument";
          goto LABEL_99;
        }
        if (*(_DWORD *)a1[6] != 27)
        {
          *(_QWORD *)&v75 = "expected '=' after formal parameter identifier";
          LOWORD(v78) = 259;
          v57 = (*(uint64_t (**)(_QWORD *))(*a1 + 40))(a1);
          llvm::MCAsmParser::Error((uint64_t)a1, *(_QWORD *)(v57 + 96), (uint64_t)&v75, 0, 0);
LABEL_93:
          v56 = 1;
          goto LABEL_94;
        }
        (*(void (**)(_QWORD *))(*a1 + 184))(a1);
        v62 = 1;
      }
    }
    v11 = v7 == v8 && v60;
    if ((v62 & 1) != 0 && !*((_QWORD *)&v79 + 1))
    {
      v54 = "cannot mix positional and keyword arguments";
      goto LABEL_99;
    }
    v59 = (uint64_t)v9;
    v9 = (_BYTE *)a1[17];
    v74 = 0;
    if (!*((_BYTE *)a1 + 807))
      goto LABEL_38;
    v12 = *(_DWORD *)a1[6];
    if (v12 != 36)
    {
      v13 = v9;
      if (v12 == 38)
      {
        while (1)
        {
          v14 = *v13;
          if (v14 <= 0x20)
          {
            if (*v13)
              v15 = v14 == 10;
            else
              v15 = 1;
            if (v15 || v14 == 13)
              break;
          }
          else if (v14 == 33)
          {
            ++v13;
          }
          else if (v14 == 62)
          {
            v29 = v13 + 1;
            v74 = v13 + 1;
            sub_1C60E8154((uint64_t)a1, (unint64_t)(v13 + 1), *((_DWORD *)a1 + 70));
            (*(void (**)(_QWORD *))(*a1 + 184))(a1);
            LODWORD(v75) = 3;
            *((_QWORD *)&v75 + 1) = v9;
            v76 = (const char *)(v29 - v9);
            v78 = 64;
            __src = 0;
            goto LABEL_65;
          }
          ++v13;
        }
      }
LABEL_38:
      if ((sub_1C60E81D4((uint64_t)a1, (uint64_t)v80, v11) & 1) != 0)
        goto LABEL_93;
      goto LABEL_39;
    }
    v70[0] = 0;
    v67[0] = 0;
    (*(void (**)(_QWORD *))(*a1 + 184))(a1);
    if (((*(uint64_t (**)(_QWORD *, _QWORD *, _BYTE **))(*a1 + 232))(a1, v70, &v74) & 1) != 0)
      goto LABEL_88;
    v26 = v70[0];
    v27 = (*(uint64_t (**)(_QWORD *))(*a1 + 56))(a1);
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 72))(v27);
    llvm::MCExpr::evaluateAsAbsolute(v26, v67);
    if ((v28 & 1) == 0)
    {
      v54 = "expected absolute expression";
LABEL_99:
      *(_QWORD *)&v75 = v54;
      LOWORD(v78) = 259;
      v37 = (uint64_t)a1;
      v38 = (uint64_t)v9;
LABEL_75:
      v56 = llvm::MCAsmParser::Error(v37, v38, (uint64_t)&v75, 0, 0);
      goto LABEL_94;
    }
    LODWORD(v75) = 4;
    *((_QWORD *)&v75 + 1) = v9;
    v76 = (const char *)(v74 - v9);
    v78 = 64;
    __src = (void *)v67[0];
LABEL_65:
    v30 = v80[1];
    if (v80[1] >= v80[2])
    {
      v33 = sub_1C60E87E0(v80, (uint64_t)&v75);
    }
    else
    {
      v31 = v75;
      *((_QWORD *)v80[1] + 2) = v76;
      *(_OWORD *)v30 = v31;
      v32 = v78;
      *((_DWORD *)v30 + 8) = v78;
      if (v32 > 0x40)
      {
        v34 = (void *)operator new[]();
        *((_QWORD *)v30 + 3) = v34;
        memcpy(v34, __src, (((unint64_t)*((unsigned int *)v30 + 8) + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        *((_QWORD *)v30 + 3) = __src;
      }
      v33 = v30 + 40;
    }
    v80[1] = v33;
    if (v78 >= 0x41 && __src)
      MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
LABEL_39:
    v17 = *((_QWORD *)&v79 + 1);
    LODWORD(v18) = v7;
    if (*((_QWORD *)&v79 + 1))
    {
      if (!(_DWORD)v5)
      {
        v21 = (const void *)v79;
LABEL_74:
        v66 = 1283;
        v63[0] = "parameter named '";
        v64 = v21;
        v65 = v17;
        v67[0] = v63;
        v68 = "' does not exist for macro '";
        v69 = 770;
        v36 = *v3;
        v35 = v3[1];
        v70[0] = v67;
        v71 = v36;
        v72 = v35;
        v73 = 1282;
        *(_QWORD *)&v75 = v70;
        v76 = "'";
        LOWORD(v78) = 770;
        v37 = (uint64_t)a1;
        v38 = v59;
        goto LABEL_75;
      }
      v19 = v5;
      v18 = 0;
      v20 = v3;
      v21 = (const void *)v79;
      v22 = (_QWORD *)(v3[4] + 8);
      while (*v22 != v17 || memcmp((const void *)*(v22 - 1), v21, v17))
      {
        ++v18;
        v22 += 6;
        if (v6 == v18)
        {
          v3 = v20;
          goto LABEL_74;
        }
      }
      v3 = v20;
      v5 = v19;
    }
    if (v80[0] != v80[1])
    {
      v23 = *a3;
      if (0xAAAAAAAAAAAAAAABLL * ((a3[1] - *a3) >> 3) <= v18)
      {
        sub_1C63E9C5C(a3, (v18 + 1));
        v23 = *a3;
      }
      v24 = (char **)(v23 + 24 * v18);
      if (v24 != v80)
        sub_1C60E898C((uint64_t)v24, (uint64_t)v80[0], (uint64_t)v80[1], 0xCCCCCCCCCCCCCCCDLL * ((v80[1] - v80[0]) >> 3));
      if (v82 <= v18)
        sub_1C63E9CF0((uint64_t)&v81, (v18 + 1));
      v81[v18] = a1[17];
    }
    v25 = *(_DWORD *)a1[6];
    if (v25 == 25)
    {
      (*(void (**)(_QWORD *))(*a1 + 184))(a1);
      goto LABEL_59;
    }
    if (v25 == 9)
      break;
LABEL_59:
    *(_QWORD *)&v75 = v80;
    sub_1C5934A7C((void ***)&v75);
    if (v8 < ++v7)
    {
      *(_QWORD *)&v79 = "too many positional arguments";
      LOWORD(v80[2]) = 259;
      v55 = (*(uint64_t (**)(_QWORD *))(*a1 + 40))(a1);
      llvm::MCAsmParser::Error((uint64_t)a1, *(_QWORD *)(v55 + 96), (uint64_t)&v79, 0, 0);
      v56 = 1;
      goto LABEL_95;
    }
  }
  if ((_DWORD)v5)
  {
    v39 = v3;
    v40 = 0;
    v41 = 0;
    v42 = 0;
    v56 = 0;
    v43 = 48 * v6;
    do
    {
      if (*(_QWORD *)(*a3 + v41) == *(_QWORD *)(*a3 + v41 + 8))
      {
        v44 = v39[4];
        if (*(_BYTE *)(v44 + v42 + 40))
        {
          v50 = v81[v40];
          if (!v50)
            v50 = a1[17];
          v51 = (const void **)(v44 + v42);
          v66 = 1283;
          v63[0] = "missing value for required parameter '";
          v64 = *v51;
          v65 = (size_t)v51[1];
          v67[0] = v63;
          v68 = "' in macro '";
          v69 = 770;
          v53 = *v39;
          v52 = v39[1];
          v70[0] = v67;
          v71 = v53;
          v72 = v52;
          v73 = 1282;
          *(_QWORD *)&v75 = v70;
          v76 = "'";
          LOWORD(v78) = 770;
          llvm::MCAsmParser::Error((uint64_t)a1, v50, (uint64_t)&v75, 0, 0);
          v44 = v39[4];
          v56 = 1;
        }
        v45 = v44 + v42;
        v46 = *(_QWORD *)(v45 + 16);
        v47 = *(_QWORD *)(v45 + 24);
        v48 = v45 + 16;
        if (v46 != v47)
        {
          v49 = *a3 + v41;
          if (v48 != v49)
            sub_1C60E898C(v49, v46, v47, 0xCCCCCCCCCCCCCCCDLL * ((v47 - v46) >> 3));
        }
      }
      v42 += 48;
      v41 += 24;
      ++v40;
    }
    while (v43 != v42);
  }
  else
  {
LABEL_88:
    v56 = 0;
  }
LABEL_94:
  *(_QWORD *)&v75 = v80;
  sub_1C5934A7C((void ***)&v75);
LABEL_95:
  if (v81 != v83)
    free(v81);
  return v56 & 1;
}

uint64_t sub_1C60E7AE8(uint64_t a1, llvm::raw_ostream *this, char *a3, size_t a4, uint64_t a5, uint64_t a6, uint64_t a7, unint64_t a8, char a9, uint64_t a10)
{
  int v10;
  size_t v11;
  uint64_t v14;
  BOOL v15;
  size_t v17;
  BOOL v18;
  char v19;
  size_t v20;
  int v21;
  BOOL v22;
  char v23;
  uint64_t v24;
  BOOL v25;
  size_t v26;
  void *v27;
  size_t v28;
  int v29;
  _BYTE *v30;
  size_t v31;
  int v32;
  uint64_t v33;
  unint64_t v35;
  unint64_t v36;
  llvm::raw_ostream *v37;
  uint64_t v38;
  _QWORD *v39;
  unint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  const void *v44;
  unint64_t v45;
  void *v46;
  _BYTE *v47;
  int v48;
  int **v49;
  int *v50;
  int *v51;
  unsigned __int8 *v52;
  int v53;
  int v54;
  unint64_t *v55;
  unint64_t v56;
  unint64_t v57;
  unint64_t v58;
  unsigned __int8 *v59;
  unint64_t v60;
  std::string::size_type size;
  std::string::size_type v62;
  char v63;
  size_t v64;
  void *v65;
  unint64_t v66;
  unint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  BOOL v71;
  std::string *v72;
  size_t v73;
  size_t v74;
  void *v75;
  size_t v76;
  int v78;
  _BOOL4 v79;
  _QWORD *v80;
  int v84;
  uint64_t v85;
  std::string v86;
  __int16 v87;

  v10 = a6;
  v11 = a4;
  v14 = a1;
  if ((_DWORD)a6)
    v79 = *(_BYTE *)(a5 + 48 * a6 - 7) != 0;
  else
    v79 = 0;
  if (*(_BYTE *)(a1 + 804))
    v15 = (_DWORD)a6 == 0;
  else
    v15 = 0;
  v85 = a6;
  if (!v15 && a6 != a8)
  {
    v86.__r_.__value_.__r.__words[0] = (std::string::size_type)"Wrong number of arguments";
    v87 = 259;
    return llvm::MCAsmParser::Error(a1, a10, (uint64_t)&v86, 0, 0);
  }
  if (!a4)
    return 0;
  v78 = a6 - 1;
  v80 = (_QWORD *)(a5 + 8);
  v84 = a6;
  do
  {
    v17 = 0;
    if (v10)
      v18 = 1;
    else
      v18 = *(_BYTE *)(v14 + 804) == 0;
    v19 = v18;
    v20 = v11 - 1;
    while (1)
    {
      v21 = a3[v17];
      if ((v19 & 1) != 0)
        break;
      v22 = v21 != 36 || v20 == v17;
      v23 = v22;
      if (v22)
      {
        if (v20 == v17)
        {
          v17 = v11;
          goto LABEL_47;
        }
      }
      else
      {
        v24 = a3[v17 + 1];
        if ((_DWORD)v24 == 36 || (_DWORD)v24 == 110 || (*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v24 + 60) & 0x400) != 0)
          goto LABEL_47;
      }
LABEL_38:
      ++v17;
    }
    if (v20 != v17 && v21 != 92)
      goto LABEL_38;
    v25 = v20 != v17 && v21 == 92;
    v23 = !v25;
    if (!v25)
      v17 = v11;
LABEL_47:
    if (v11 >= v17)
      v26 = v17;
    else
      v26 = v11;
    v27 = (void *)*((_QWORD *)this + 4);
    if (v26 <= *((_QWORD *)this + 3) - (_QWORD)v27)
    {
      if (v26)
      {
        memcpy(v27, a3, v26);
        *((_QWORD *)this + 4) += v26;
      }
    }
    else
    {
      llvm::raw_ostream::write(this, a3, v26);
    }
    if ((v23 & 1) != 0)
      return 0;
    v28 = v17 + 1;
    if (v10 || !*(_BYTE *)(v14 + 804))
    {
      if (!a9 || (v31 = (v17 + 2), v11 == v31) || a3[v28] != 64)
      {
        v32 = v17 + 2;
        do
        {
          v31 = (v32 - 1);
          v33 = a3[v31];
          if (a3[v31] < 0)
          {
            if (__maskrune(a3[v31], 0x500uLL))
              goto LABEL_73;
          }
          else if ((*(_DWORD *)(MEMORY[0x1E0C80978] + 4 * v33 + 60) & 0x500) != 0)
          {
            goto LABEL_73;
          }
          if ((v33 - 36) > 0x3B || ((1 << (v33 - 36)) & 0x800000000000401) == 0)
            break;
LABEL_73:
          v15 = v11 == v32++;
        }
        while (!v15);
      }
      v35 = v31 - v28;
      if (v31 - v28 == 1 && a3[v17 + 1] == 64)
      {
        v36 = *(unsigned int *)(v14 + 428);
        v37 = this;
LABEL_86:
        sub_1C5E21910(v37, v36, 0, 0, 0);
        goto LABEL_164;
      }
      if (v84)
      {
        v38 = 0;
        v39 = v80;
        while (*v39 != v35 || v31 != v28 && memcmp((const void *)*(v39 - 1), &a3[v17 + 1], v31 - v28))
        {
          v39 += 6;
          if (v85 == ++v38)
            goto LABEL_97;
        }
      }
      else
      {
        LODWORD(v38) = 0;
      }
      if ((_DWORD)v38 == v84)
      {
LABEL_97:
        v14 = a1;
        if (a3[v28] == 40 && a3[v17 + 2] == 41)
        {
          v28 = v17 + 3;
          goto LABEL_165;
        }
        v47 = (_BYTE *)*((_QWORD *)this + 4);
        if ((unint64_t)v47 >= *((_QWORD *)this + 3))
        {
          llvm::raw_ostream::write(this, 92);
        }
        else
        {
          *((_QWORD *)this + 4) = v47 + 1;
          *v47 = 92;
        }
        v75 = (void *)*((_QWORD *)this + 4);
        if (v35 <= *((_QWORD *)this + 3) - (_QWORD)v75)
        {
          if (v31 == v28)
            goto LABEL_165;
          memcpy(v75, &a3[v17 + 1], v31 - v28);
          *((_QWORD *)this + 4) += v35;
        }
        else
        {
          llvm::raw_ostream::write(this, &a3[v17 + 1], v31 - v28);
        }
        goto LABEL_162;
      }
      v48 = (_DWORD)v38 == v78 && v79;
      v49 = (int **)(a7 + 24 * v38);
      v50 = *v49;
      v51 = v49[1];
      v14 = a1;
      if (*v49 == v51)
      {
LABEL_162:
        v28 = v31;
        goto LABEL_165;
      }
      while (1)
      {
        if (*(_BYTE *)(v14 + 807))
        {
          v52 = (unsigned __int8 *)*((_QWORD *)v50 + 1);
          v53 = *v52;
          v54 = *v50;
          if (v53 == 37)
          {
            if (v54 == 4)
            {
              v55 = (unint64_t *)(v50 + 6);
              if (v50[8] >= 0x41)
                v55 = (unint64_t *)*v55;
              llvm::raw_ostream::operator<<(this, *v55);
              goto LABEL_141;
            }
          }
          else if (v53 == 60)
          {
            if (v54 == 3)
            {
              v56 = *((_QWORD *)v50 + 2);
              v57 = v56 - 1;
              v58 = v56 != 0;
              if (v56)
                v59 = v52 + 1;
              else
                v59 = (unsigned __int8 *)*((_QWORD *)v50 + 1);
              if (v58 > v57)
                v57 = v56 != 0;
              if (v56 >= v57)
                v56 = v57;
              memset(&v86, 0, sizeof(v86));
              v60 = v56 - v58;
              if (v56 == v58)
              {
                size = 0;
                v62 = 0;
                v63 = 0;
              }
              else
              {
                v69 = 0;
                do
                {
                  if (v59[v69] == 33)
                    v70 = v69 + 1;
                  else
                    v70 = v69;
                  std::string::push_back(&v86, v59[v70]);
                  v69 = v70 + 1;
                }
                while (v70 + 1 < v60);
                v63 = HIBYTE(v86.__r_.__value_.__r.__words[2]);
                size = v86.__r_.__value_.__l.__size_;
                v62 = v86.__r_.__value_.__r.__words[0];
              }
              v71 = v63 < 0;
              if (v63 >= 0)
                v72 = &v86;
              else
                v72 = (std::string *)v62;
              v73 = v63 & 0x7F;
              if (v71)
                v74 = size;
              else
                v74 = v73;
              llvm::raw_ostream::write(this, (const char *)v72, v74);
              v14 = a1;
              if (SHIBYTE(v86.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v86.__r_.__value_.__l.__data_);
              goto LABEL_141;
            }
LABEL_126:
            v64 = *((_QWORD *)v50 + 2);
            v65 = (void *)*((_QWORD *)this + 4);
            if (v64 <= *((_QWORD *)this + 3) - (_QWORD)v65)
            {
              if (!v64)
                goto LABEL_141;
LABEL_140:
              memcpy(v65, v52, v64);
              *((_QWORD *)this + 4) += v64;
              goto LABEL_141;
            }
LABEL_138:
            llvm::raw_ostream::write(this, (const char *)v52, v64);
            goto LABEL_141;
          }
        }
        else
        {
          v54 = *v50;
        }
        if (((v54 == 3) & ~v48) == 0)
        {
          v52 = (unsigned __int8 *)*((_QWORD *)v50 + 1);
          goto LABEL_126;
        }
        v66 = *((_QWORD *)v50 + 2);
        v67 = v66 != 0;
        if (v66)
          v52 = (unsigned __int8 *)(*((_QWORD *)v50 + 1) + 1);
        else
          v52 = (unsigned __int8 *)*((_QWORD *)v50 + 1);
        if (v67 <= v66 - 1)
          v68 = v66 - 1;
        else
          v68 = v66 != 0;
        if (v66 >= v68)
          v66 = v68;
        v64 = v66 - v67;
        v65 = (void *)*((_QWORD *)this + 4);
        if (v66 - v67 > *((_QWORD *)this + 3) - (_QWORD)v65)
          goto LABEL_138;
        if (v66 != v67)
          goto LABEL_140;
LABEL_141:
        v50 += 10;
        if (v50 == v51)
          goto LABEL_162;
      }
    }
    v29 = a3[v28];
    if (v29 == 110)
    {
      v37 = this;
      v36 = a8;
      goto LABEL_86;
    }
    if (v29 == 36)
    {
      v30 = (_BYTE *)*((_QWORD *)this + 4);
      if ((unint64_t)v30 >= *((_QWORD *)this + 3))
      {
        llvm::raw_ostream::write(this, 36);
      }
      else
      {
        *((_QWORD *)this + 4) = v30 + 1;
        *v30 = 36;
      }
    }
    else
    {
      v40 = (v29 - 48);
      if (v40 < a8)
      {
        v41 = (uint64_t *)(a7 + 24 * v40);
        v42 = *v41;
        v43 = v41[1];
        while (v42 != v43)
        {
          v44 = *(const void **)(v42 + 8);
          v45 = *(_QWORD *)(v42 + 16);
          v46 = (void *)*((_QWORD *)this + 4);
          if (v45 <= *((_QWORD *)this + 3) - (_QWORD)v46)
          {
            if (v45)
            {
              memcpy(v46, v44, *(_QWORD *)(v42 + 16));
              *((_QWORD *)this + 4) += v45;
            }
          }
          else
          {
            llvm::raw_ostream::write(this, (const char *)v44, *(_QWORD *)(v42 + 16));
          }
          v42 += 40;
        }
      }
    }
LABEL_164:
    v28 = v17 + 2;
LABEL_165:
    if (v11 >= v28)
      v76 = v28;
    else
      v76 = v11;
    a3 += v76;
    v11 -= v76;
    v10 = v84;
  }
  while (v11);
  return 0;
}

uint64_t sub_1C60E8154(uint64_t result, unint64_t a2, int a3)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v4 = result;
  v5 = *(_QWORD **)(result + 240);
  if (!a3)
  {
    result = llvm::SourceMgr::FindBufferContainingLoc(*(uint64_t **)(result + 240), a2);
    a3 = result;
  }
  v6 = *(_QWORD *)(*v5 + 24 * (a3 - 1));
  *(_DWORD *)(v4 + 280) = a3;
  v7 = *(_QWORD *)(v6 + 8);
  v8 = *(_QWORD *)(v6 + 16) - v7;
  *(_QWORD *)(v4 + 192) = v7;
  *(_QWORD *)(v4 + 200) = v8;
  if (a2)
    v9 = a2;
  else
    v9 = v7;
  *(_QWORD *)(v4 + 184) = v9;
  *(_QWORD *)(v4 + 136) = 0;
  *(_BYTE *)(v4 + 211) = 1;
  return result;
}

uint64_t sub_1C60E81D4(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result;
  int v6;
  int v7;
  int v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  __int128 v14;
  unsigned int v15;
  char *v16;
  void *v17;
  int v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  unint64_t v24;
  __int128 v25;
  unsigned int v26;
  char *v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  const char *v36;
  uint64_t v37;
  char *v38;
  unint64_t v39;
  unint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  char *v44;
  uint64_t v45;
  char *v46;
  __int128 v47;
  _QWORD v48[4];
  uint64_t v49;

  if (a3)
  {
    if (**(_DWORD **)(a1 + 48) == 9)
      return 0;
    v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 200))(a1);
    v31 = v29;
    v32 = v30;
    v33 = *(_QWORD *)(a2 + 16);
    v34 = *(_QWORD *)(a2 + 8);
    if (v34 >= v33)
    {
      v38 = *(char **)a2;
      v39 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v34 - *(_QWORD *)a2) >> 3);
      v40 = v39 + 1;
      if (v39 + 1 > 0x666666666666666)
        abort();
      if (0x999999999999999ALL * ((uint64_t)(v33 - (_QWORD)v38) >> 3) > v40)
        v40 = 0x999999999999999ALL * ((uint64_t)(v33 - (_QWORD)v38) >> 3);
      if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v33 - (_QWORD)v38) >> 3) >= 0x333333333333333)
        v41 = 0x666666666666666;
      else
        v41 = v40;
      v49 = a2 + 16;
      if (v41 > 0x666666666666666)
        sub_1C4764EE4();
      v42 = (char *)operator new(40 * v41);
      v43 = &v42[40 * v39];
      *(_DWORD *)v43 = 3;
      *((_QWORD *)v43 + 1) = v31;
      *((_QWORD *)v43 + 2) = v32;
      *((_DWORD *)v43 + 8) = 64;
      *((_QWORD *)v43 + 3) = 0;
      v44 = v43;
      if ((char *)v34 != v38)
      {
        v45 = 0;
        do
        {
          v46 = &v43[v45];
          v47 = *(_OWORD *)(v34 + v45 - 40);
          *((_QWORD *)v46 - 3) = *(_QWORD *)(v34 + v45 - 24);
          *(_OWORD *)(v46 - 40) = v47;
          *((_DWORD *)v46 - 2) = *(_DWORD *)(v34 + v45 - 8);
          *((_QWORD *)v46 - 2) = *(_QWORD *)(v34 + v45 - 16);
          *(_DWORD *)(v34 + v45 - 8) = 0;
          v45 -= 40;
        }
        while ((char *)(v34 + v45) != v38);
        v44 = &v43[v45];
      }
      v35 = v43 + 40;
      *(_QWORD *)a2 = v44;
      *(_QWORD *)(a2 + 8) = v43 + 40;
      *(_QWORD *)(a2 + 16) = &v42[40 * v41];
      v48[2] = v34;
      v48[3] = v33;
      v48[0] = v38;
      v48[1] = v38;
      sub_1C63E9D68((uint64_t)v48);
    }
    else
    {
      *(_DWORD *)v34 = 3;
      *(_QWORD *)(v34 + 8) = v29;
      *(_QWORD *)(v34 + 16) = v30;
      *(_DWORD *)(v34 + 32) = 64;
      v35 = (char *)(v34 + 40);
      *(_QWORD *)(v34 + 24) = 0;
    }
    result = 0;
    *(_QWORD *)(a2 + 8) = v35;
    return result;
  }
  v6 = 0;
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a1 + 804);
  while (1)
  {
    while (1)
    {
      v7 = **(_DWORD **)(a1 + 48);
      if (v7 == 27 || v7 == 0)
      {
        v36 = "unexpected token in macro instantiation";
        goto LABEL_54;
      }
      if (v6)
        break;
      if (v7 == 25)
        goto LABEL_50;
      if (v7 == 11)
        sub_1C60E57B0(a1 + 40);
      if (*(_BYTE *)(a1 + 804)
        || ((v19 = **(_DWORD **)(a1 + 48), v20 = v19 > 0x2C, v21 = (1 << v19) & 0x1FCFF980F000, !v20)
          ? (v22 = v21 == 0)
          : (v22 = 1),
            v22))
      {
        if (v7 == 11)
          goto LABEL_50;
        v7 = **(_DWORD **)(a1 + 48);
        break;
      }
      v23 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8);
      v24 = *(_QWORD *)(a2 + 8);
      if (v24 >= *(_QWORD *)(a2 + 16))
      {
        v27 = sub_1C60E87E0((char **)a2, v23);
      }
      else
      {
        v25 = *(_OWORD *)v23;
        *(_QWORD *)(v24 + 16) = *(_QWORD *)(v23 + 16);
        *(_OWORD *)v24 = v25;
        v26 = *(_DWORD *)(v23 + 32);
        *(_DWORD *)(v24 + 32) = v26;
        if (v26 > 0x40)
        {
          v28 = (void *)operator new[]();
          *(_QWORD *)(v24 + 24) = v28;
          memcpy(v28, *(const void **)(v23 + 24), (((unint64_t)*(unsigned int *)(v24 + 32) + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          *(_QWORD *)(v24 + 24) = *(_QWORD *)(v23 + 24);
        }
        v27 = (char *)(v24 + 40);
      }
      *(_QWORD *)(a2 + 8) = v27;
      sub_1C60E57B0(a1 + 40);
      v6 = 0;
      v18 = 0;
      if (**(_DWORD **)(a1 + 48) == 11)
        goto LABEL_33;
    }
    if (v7 == 17)
    {
      v11 = 1;
      goto LABEL_26;
    }
    if (v7 == 9)
      break;
    v10 = v7 == 18 && v6 != 0;
    v11 = v10 << 31 >> 31;
LABEL_26:
    v12 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8);
    v13 = *(_QWORD *)(a2 + 8);
    if (v13 >= *(_QWORD *)(a2 + 16))
    {
      v16 = sub_1C60E87E0((char **)a2, v12);
    }
    else
    {
      v14 = *(_OWORD *)v12;
      *(_QWORD *)(v13 + 16) = *(_QWORD *)(v12 + 16);
      *(_OWORD *)v13 = v14;
      v15 = *(_DWORD *)(v12 + 32);
      *(_DWORD *)(v13 + 32) = v15;
      if (v15 > 0x40)
      {
        v17 = (void *)operator new[]();
        *(_QWORD *)(v13 + 24) = v17;
        memcpy(v17, *(const void **)(v12 + 24), (((unint64_t)*(unsigned int *)(v13 + 32) + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        *(_QWORD *)(v13 + 24) = *(_QWORD *)(v12 + 24);
      }
      v16 = (char *)(v13 + 40);
    }
    v18 = v11 + v6;
    *(_QWORD *)(a2 + 8) = v16;
LABEL_33:
    sub_1C60E57B0(a1 + 40);
    v6 = v18;
  }
  if (!v6)
  {
LABEL_50:
    result = 0;
    goto LABEL_51;
  }
  v36 = "unbalanced parentheses in macro argument";
LABEL_54:
  v48[0] = v36;
  LOWORD(v49) = 259;
  v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  llvm::MCAsmParser::Error(a1, *(_QWORD *)(v37 + 96), (uint64_t)v48, 0, 0);
  result = 1;
LABEL_51:
  *(_BYTE *)(a1 + 144) = 1;
  return result;
}

void sub_1C60E861C(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  void **v5;
  void **v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  size_t v12;
  char *v13;
  char *v14;
  size_t v15;
  char *v16;
  char *v17;
  __int128 v18;
  void **v19;
  void **v20;

  v5 = *(void ***)(a1 + 8);
  v4 = *(_QWORD *)(a1 + 16);
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v5) >> 3) >= a2)
  {
    if (a2)
    {
      v12 = 24 * ((24 * a2 - 24) / 0x18) + 24;
      bzero(*(void **)(a1 + 8), v12);
      v5 = (void **)((char *)v5 + v12);
    }
    *(_QWORD *)(a1 + 8) = v5;
  }
  else
  {
    v6 = *(void ***)a1;
    v7 = (uint64_t)v5 - *(_QWORD *)a1;
    v8 = 0xAAAAAAAAAAAAAAABLL * (v7 >> 3) + a2;
    if (v8 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - (uint64_t)v6) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL)
        sub_1C4764EE4();
      v11 = (char *)operator new(24 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[8 * (v7 >> 3)];
    v14 = &v11[24 * v10];
    v15 = 24 * ((24 * a2 - 24) / 0x18) + 24;
    bzero(v13, v15);
    v16 = &v11[v7 + v15];
    if (v5 == v6)
    {
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
    }
    else
    {
      do
      {
        v17 = v13;
        *((_QWORD *)v13 - 2) = 0;
        *((_QWORD *)v13 - 1) = 0;
        v18 = *(_OWORD *)(v5 - 3);
        v5 -= 3;
        *(_OWORD *)(v13 - 24) = v18;
        v13 -= 24;
        *((_QWORD *)v17 - 1) = v5[2];
        *v5 = 0;
        v5[1] = 0;
        v5[2] = 0;
      }
      while (v5 != v6);
      v5 = *(void ***)a1;
      v19 = *(void ***)(a1 + 8);
      *(_QWORD *)a1 = v13;
      *(_QWORD *)(a1 + 8) = v16;
      *(_QWORD *)(a1 + 16) = v14;
      while (v19 != v5)
      {
        v19 -= 3;
        v20 = v19;
        sub_1C5934A7C(&v20);
      }
    }
    if (v5)
      operator delete(v5);
  }
}

char *sub_1C60E87E0(char **a1, uint64_t a2)
{
  char *v2;
  char *v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v7;
  char *v9;
  char *v10;
  _QWORD *v11;
  uint64_t v12;
  size_t v13;
  void *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  __int128 v18;
  char *v19;
  _QWORD v21[5];

  v3 = *a1;
  v2 = a1[1];
  v4 = 0xCCCCCCCCCCCCCCCDLL * ((v2 - *a1) >> 3);
  v5 = v4 + 1;
  if (v4 + 1 > 0x666666666666666)
    abort();
  if (0x999999999999999ALL * ((a1[2] - v3) >> 3) > v5)
    v5 = 0x999999999999999ALL * ((a1[2] - v3) >> 3);
  if (0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v3) >> 3) >= 0x333333333333333)
    v7 = 0x666666666666666;
  else
    v7 = v5;
  v21[4] = a1 + 2;
  if (v7 > 0x666666666666666)
    sub_1C4764EE4();
  v9 = (char *)operator new(40 * v7);
  v10 = &v9[40 * v4];
  *(_OWORD *)v10 = *(_OWORD *)a2;
  *((_QWORD *)v10 + 2) = *(_QWORD *)(a2 + 16);
  v11 = v10 + 24;
  v12 = *(unsigned int *)(a2 + 32);
  *((_DWORD *)v10 + 8) = v12;
  if (v12 > 0x40)
  {
    v13 = ((unint64_t)(v12 + 63) >> 3) & 0x3FFFFFF8;
    v14 = (void *)operator new[]();
    *v11 = v14;
    memcpy(v14, *(const void **)(a2 + 24), v13);
    v3 = *a1;
    v2 = a1[1];
  }
  else
  {
    *v11 = *(_QWORD *)(a2 + 24);
  }
  v15 = v10;
  if (v2 != v3)
  {
    v16 = 0;
    do
    {
      v17 = &v10[v16];
      v18 = *(_OWORD *)&v2[v16 - 40];
      *((_QWORD *)v17 - 3) = *(_QWORD *)&v2[v16 - 24];
      *(_OWORD *)(v17 - 40) = v18;
      *((_DWORD *)v17 - 2) = *(_DWORD *)&v2[v16 - 8];
      *((_QWORD *)v17 - 2) = *(_QWORD *)&v2[v16 - 16];
      *(_DWORD *)&v2[v16 - 8] = 0;
      v16 -= 40;
    }
    while (&v2[v16] != v3);
    v15 = &v10[v16];
  }
  *a1 = v15;
  a1[1] = v10 + 40;
  v19 = a1[2];
  a1[2] = &v9[40 * v7];
  v21[2] = v2;
  v21[3] = v19;
  v21[0] = v3;
  v21[1] = v3;
  sub_1C63E9D68((uint64_t)v21);
  return v10 + 40;
}

uint64_t sub_1C60E898C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  void *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t result;
  uint64_t v12;
  uint64_t v13;
  unsigned int *v14;
  __int128 v15;
  unsigned int v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  void *v28;
  uint64_t v29;

  v8 = *(void **)a1;
  if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) < a4)
  {
    sub_1C63E9DE0((void **)a1);
    if (a4 > 0x666666666666666)
      goto LABEL_30;
    v22 = 0x999999999999999ALL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3);
    if (v22 <= a4)
      v22 = a4;
    v23 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 16) - *(_QWORD *)a1) >> 3) >= 0x333333333333333
        ? 0x666666666666666
        : v22;
    if (v23 > 0x666666666666666)
LABEL_30:
      abort();
    v24 = 5 * v23;
    result = (uint64_t)operator new(40 * v23);
    v25 = result;
    *(_QWORD *)a1 = result;
    *(_QWORD *)(a1 + 8) = result;
    *(_QWORD *)(a1 + 16) = result + 8 * v24;
    if (a2 != a3)
    {
      v26 = a2 + 24;
      do
      {
        *(_OWORD *)v25 = *(_OWORD *)(v26 - 24);
        *(_QWORD *)(v25 + 16) = *(_QWORD *)(v26 - 8);
        v27 = *(_DWORD *)(v26 + 8);
        *(_DWORD *)(v25 + 32) = v27;
        if (v27 > 0x40)
        {
          v28 = (void *)operator new[]();
          *(_QWORD *)(v25 + 24) = v28;
          result = (uint64_t)memcpy(v28, *(const void **)v26, (((unint64_t)*(unsigned int *)(v25 + 32) + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          *(_QWORD *)(v25 + 24) = *(_QWORD *)v26;
        }
        v29 = v26 - 24;
        v25 += 40;
        v26 += 40;
      }
      while (v29 + 40 != a3);
    }
    *(_QWORD *)(a1 + 8) = v25;
  }
  else
  {
    v9 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v8) >> 3);
    if (v9 >= a4)
    {
      result = sub_1C60E8C1C(a2, a3, (uint64_t)v8);
      v20 = v19;
      v21 = *(_QWORD *)(a1 + 8);
      if (v21 != v19)
      {
        do
        {
          if (*(_DWORD *)(v21 - 8) >= 0x41u)
          {
            result = *(_QWORD *)(v21 - 16);
            if (result)
              result = MEMORY[0x1CAA32F9C](result, 0x1000C8000313F17);
          }
          v21 -= 40;
        }
        while (v21 != v20);
      }
      *(_QWORD *)(a1 + 8) = v20;
    }
    else
    {
      v10 = a2 + 8 * ((uint64_t)(*(_QWORD *)(a1 + 8) - (_QWORD)v8) >> 3);
      result = sub_1C60E8C1C(a2, v10, (uint64_t)v8);
      v12 = *(_QWORD *)(a1 + 8);
      if (v10 != a3)
      {
        v13 = a2 + 40 * v9 + 24;
        v14 = (unsigned int *)(v12 + 32);
        do
        {
          v15 = *(_OWORD *)(v13 - 24);
          *((_QWORD *)v14 - 2) = *(_QWORD *)(v13 - 8);
          *((_OWORD *)v14 - 2) = v15;
          v16 = *(_DWORD *)(v13 + 8);
          *v14 = v16;
          if (v16 > 0x40)
          {
            v17 = (void *)operator new[]();
            *((_QWORD *)v14 - 1) = v17;
            result = (uint64_t)memcpy(v17, *(const void **)v13, (((unint64_t)*v14 + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            *((_QWORD *)v14 - 1) = *(_QWORD *)v13;
          }
          v18 = v13 - 24;
          v13 += 40;
          v12 += 40;
          v14 += 10;
        }
        while (v18 + 40 != a3);
      }
      *(_QWORD *)(a1 + 8) = v12;
    }
  }
  return result;
}

uint64_t sub_1C60E8C1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  void **v10;
  uint64_t v11;

  if (a1 == a2)
    return a1;
  v5 = a2;
  v6 = 0;
  do
  {
    v7 = a3 + v6;
    v8 = a1 + v6;
    v9 = *(_OWORD *)(a1 + v6);
    *(_QWORD *)(v7 + 16) = *(_QWORD *)(a1 + v6 + 16);
    *(_OWORD *)v7 = v9;
    if (*(_DWORD *)(a3 + v6 + 32) > 0x40u || *(_DWORD *)(v8 + 32) > 0x40u)
    {
      if (v8 != v7)
      {
        v10 = (void **)(v7 + 24);
        llvm::APInt::reallocate(v7 + 24, *(_DWORD *)(a1 + v6 + 32));
        v11 = *(unsigned int *)(v7 + 32);
        if (v11 <= 0x40)
          *v10 = *(void **)(v8 + 24);
        else
          memcpy(*v10, *(const void **)(v8 + 24), ((unint64_t)(v11 + 63) >> 3) & 0x3FFFFFF8);
      }
    }
    else
    {
      *(_QWORD *)(v7 + 24) = *(_QWORD *)(v8 + 24);
      *(_DWORD *)(v7 + 32) = *(_DWORD *)(v8 + 32);
    }
    v6 += 40;
  }
  while (a1 + v6 != v5);
  return v5;
}

void sub_1C60E8D20(void ***a1)
{
  void **v1;
  void **v2;
  void **v4;
  void *v5;
  void **v6;

  v1 = *a1;
  v2 = (void **)**a1;
  if (v2)
  {
    v4 = (void **)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v4 -= 3;
        v6 = v4;
        sub_1C5934A7C(&v6);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1C60E8D90(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *p_p;
  uint64_t v6;
  uint64_t v7;
  void *__p;
  uint64_t v10;
  uint64_t v11;

  v2 = *a1;
  __p = 0;
  v10 = 0;
  v11 = 0;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 264))(v2) & 1) == 0)
  {
    while (((*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v2 + 208))(v2, &__p) & 1) == 0)
    {
      v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 56))(v2);
      if (v11 >= 0)
        p_p = &__p;
      else
        p_p = __p;
      if (v11 >= 0)
        v6 = HIBYTE(v11) & 0x7F;
      else
        v6 = v10;
      (*(void (**)(uint64_t, void *, uint64_t))(*(_QWORD *)v4 + 488))(v4, p_p, v6);
      if (*(_BYTE *)a1[1])
        goto LABEL_13;
      if (**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2) + 8) != 3)
      {
        if (*(_BYTE *)a1[1])
        {
LABEL_13:
          v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 56))(v2);
          (*(void (**)(uint64_t, void *, uint64_t))(*(_QWORD *)v7 + 488))(v7, &unk_1C86782D1, 1);
        }
        v3 = 0;
        goto LABEL_15;
      }
    }
  }
  v3 = 1;
LABEL_15:
  if (SHIBYTE(v11) < 0)
    operator delete(__p);
  return v3;
}

uint64_t sub_1C60E8EB0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int64_t v5;
  unsigned int v6;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[4];
  __int16 v13;
  uint64_t v14;

  v2 = *(_QWORD *)a1;
  v14 = 0;
  v3 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2) + 96);
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 264))(v2) & 1) != 0)
    return 1;
  v12[0] = 0;
  if (((*(uint64_t (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v2 + 232))(v2, &v14, v12) & 1) != 0)
    return 1;
  if (*(_BYTE *)v14 == 1)
  {
    v5 = *(_QWORD *)(v14 + 16);
    v6 = 8 * **(_DWORD **)(a1 + 8);
    if (v6 <= 0x3F && 0xFFFFFFFFFFFFFFFFLL >> (-8 * **(_BYTE **)(a1 + 8)) < v5)
    {
      v8 = -1 << (v6 - 1);
      if (v8 > v5 || v5 > ~v8)
      {
        v12[0] = "out of range literal value";
        v13 = 259;
        return llvm::MCAsmParser::Error(v2, v3, (uint64_t)v12, 0, 0);
      }
    }
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 56))(v2);
    (*(void (**)(uint64_t, int64_t, _QWORD))(*(_QWORD *)v10 + 512))(v10, v5, **(unsigned int **)(a1 + 8));
  }
  else
  {
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 56))(v2);
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v11 + 504))(v11, v14, **(unsigned int **)(a1 + 8), v3);
  }
  return 0;
}

uint64_t sub_1C60E9010(_QWORD *a1)
{
  _QWORD *v1;
  uint64_t v2;
  int v3;
  void (*v4)(void);
  uint64_t v5;
  char *v6;
  char *v8;
  char *v9;

  v1 = (_QWORD *)*a1;
  if (((*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 264))(*a1) & 1) != 0)
    return 1;
  v8 = 0;
  v9 = 0;
  v2 = sub_1C60E90F0((uint64_t)v1, &v9, &v8);
  if ((v2 & 1) == 0)
  {
    v3 = *(unsigned __int8 *)(v1[29] + 16);
    v4 = *(void (**)(void))(*(_QWORD *)(*(uint64_t (**)(_QWORD *))(*v1 + 56))(v1) + 512);
    v4();
    v5 = (*(uint64_t (**)(_QWORD *))(*v1 + 56))(v1);
    if (v3)
      v6 = v9;
    else
      v6 = v8;
    (*(void (**)(uint64_t, char *, uint64_t))(*(_QWORD *)v5 + 512))(v5, v6, 8);
  }
  return v2;
}

uint64_t sub_1C60E90F0(uint64_t a1, char **a2, _QWORD *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  int v11;
  int64_t v12;
  unint64_t v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  char *v18;
  BOOL v19;
  char **v20;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  char *v25;
  _QWORD *v26;
  unint64_t v27;
  _QWORD *v28;
  unsigned int v29;
  char *v30;
  unsigned int v31;
  __int16 v32;

  if (**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8) != 4
    && **(_DWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8) != 5)
  {
    v30 = "unknown token in expression";
    v32 = 259;
    v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    llvm::MCAsmParser::Error(a1, *(_QWORD *)(v22 + 96), (uint64_t)&v30, 0, 0);
    return 1;
  }
  v6 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8) + 8);
  v7 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8);
  v8 = *(unsigned int *)(v7 + 32);
  v29 = v8;
  if (v8 > 0x40)
  {
    v10 = (_QWORD *)operator new[]();
    memcpy(v10, *(const void **)(v7 + 24), ((unint64_t)(v8 + 63) >> 3) & 0x3FFFFFF8);
    v9 = v10;
  }
  else
  {
    v9 = *(_QWORD **)(v7 + 24);
    v10 = &v28;
  }
  v28 = v9;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
  if (v8 >= 0x41)
  {
    v11 = 0;
    v12 = (unint64_t)(v8 + 63) >> 6;
    do
    {
      if (v12-- < 1)
        break;
      v14 = v9[v12];
      v11 += __clz(v14);
    }
    while (!v14);
    v15 = v8 | 0xFFFFFFC0;
    if ((v8 & 0x3F) == 0)
      v15 = 0;
    v16 = v8 - v11 - v15;
    if (v16 >= 0x81)
    {
      v30 = "out of range literal value";
      v32 = 259;
      v17 = llvm::MCAsmParser::Error(a1, v6, (uint64_t)&v30, 0, 0);
      goto LABEL_25;
    }
    if (v16 >= 0x41)
    {
      llvm::APInt::getHiBits((llvm::APInt *)&v28, v8 - 64, (uint64_t)&v30);
      v18 = v30;
      v19 = v31 >= 0x41;
      if (v31 >= 0x41)
        v20 = (char **)v30;
      else
        v20 = &v30;
      *a2 = *v20;
      if (v19 && v18)
        MEMORY[0x1CAA32F9C](v18, 0x1000C8000313F17);
      v31 = v29;
      if (v29 < 0x41 || (llvm::APInt::initSlowCase((llvm::APInt *)&v30, 0, 0), v23 = v31, v31 <= 0x40))
      {
        *a3 = v28;
      }
      else
      {
        v24 = 0;
        v25 = v30;
        *(_QWORD *)v30 = -1;
        v26 = v28;
        v27 = ((unint64_t)(v23 + 63) >> 3) & 0x3FFFFFF8;
        do
        {
          *(_QWORD *)&v25[v24] &= v26[v24 / 8];
          v24 += 8;
        }
        while (v27 != v24);
        *a3 = *(_QWORD *)v25;
        MEMORY[0x1CAA32F9C]();
      }
      v17 = 0;
      LODWORD(v8) = v29;
      goto LABEL_25;
    }
  }
  v17 = 0;
  *a2 = 0;
  *a3 = *v10;
LABEL_25:
  if (v8 >= 0x41 && v28)
    MEMORY[0x1CAA32F9C](v28, 0x1000C8000313F17);
  return v17;
}

uint64_t sub_1C60E93F0(uint64_t a1)
{
  _DWORD **v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t **v7;
  unsigned int v8;

  v2 = *(_DWORD ***)a1;
  v3 = 1;
  v8 = 1;
  v7 = 0;
  if (((*((uint64_t (**)(_DWORD **))*v2 + 33))(v2) & 1) == 0
    && (sub_1C60E94C0(v2, *(void **)(a1 + 8), (uint64_t)&v7) & 1) == 0)
  {
    v4 = (*((uint64_t (**)(_DWORD **))*v2 + 7))(v2);
    v5 = sub_1C47EE5B8(&v7, 0xFFFFFFFFFFFFFFFFLL);
    (*(void (**)(uint64_t, uint64_t *, _QWORD))(*(_QWORD *)v4 + 512))(v4, v5, v8 >> 3);
    v3 = 0;
  }
  if (v8 >= 0x41 && v7)
    MEMORY[0x1CAA32F9C](v7, 0x1000C8000313F17);
  return v3;
}

uint64_t sub_1C60E94C0(_DWORD **a1, void *a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  unsigned __int8 *v8;
  unsigned __int8 *v9;
  _DWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t (**v14)(_DWORD **);
  uint64_t v15;
  unsigned __int8 *v16[2];
  char *v17;
  char *v18;
  char v19[8];
  uint64_t v20;
  uint64_t v21;
  char v22;
  char *v23;
  _DWORD *v24;
  uint64_t v25;
  __int16 v26;
  uint64_t v27;

  v27 = *MEMORY[0x1E0C80C00];
  v6 = **(_DWORD **)((*((uint64_t (**)(_DWORD **))*a1 + 5))(a1) + 8);
  if (v6 == 13 || **(_DWORD **)((*((uint64_t (**)(_DWORD **))*a1 + 5))(a1) + 8) == 12)
    sub_1C60E57B0((uint64_t)(a1 + 5));
  switch(*a1[6])
  {
    case 1:
      v26 = 260;
      v14 = (uint64_t (**)(_DWORD **))*a1;
      v23 = (char *)(a1 + 14);
      v15 = v14[5](a1);
      goto LABEL_34;
    case 2:
    case 4:
    case 6:
      sub_1C4DF9184(&v20, a2);
      v7 = *(_QWORD *)((*((uint64_t (**)(_DWORD **))*a1 + 5))(a1) + 8);
      v8 = *(unsigned __int8 **)(v7 + 8);
      v9 = *(unsigned __int8 **)(v7 + 16);
      v16[0] = v8;
      v16[1] = v9;
      if (**(_DWORD **)((*((uint64_t (**)(_DWORD **))*a1 + 5))(a1) + 8) != 2)
      {
        llvm::APFloat::convertFromString((uint64_t)v19, v8, (unint64_t)v9, 1, (uint64_t)&v23);
        if ((v24 & 1) == 0 || !v23)
          goto LABEL_20;
        v17 = v23;
        sub_1C4D62BD4(&v17, &v18);
        if (v17)
          (*(void (**)(char *))(*(_QWORD *)v17 + 8))(v17);
        goto LABEL_15;
      }
      if (!llvm::StringRef::compare_insensitive(v16, "infinity", 8uLL)
        || !llvm::StringRef::compare_insensitive(v16, "inf", 3uLL))
      {
        if (a2 == &unk_1C866F1C0)
          llvm::detail::DoubleAPFloat::DoubleAPFloat(&v24, (uint64_t)&unk_1C866F1C0);
        else
          llvm::detail::IEEEFloat::IEEEFloat(&v24, (uint64_t)a2);
        sub_1C47A8F34((uint64_t)&v23, 0);
        sub_1C48552C0((uint64_t)&v20, (uint64_t)&v24);
        v10 = v24;
        if (v24 == (_DWORD *)&unk_1C866F1C0)
          goto LABEL_43;
LABEL_19:
        if ((v10[2] - 64) <= 0xFFFFFF7F && v25)
          MEMORY[0x1CAA32F9C](v25, 0x1000C8000313F17);
        goto LABEL_20;
      }
      if (llvm::StringRef::compare_insensitive(v16, "nan", 3uLL))
      {
LABEL_15:
        v23 = "invalid floating point literal";
        v26 = 259;
        v11 = (*((uint64_t (**)(_DWORD **))*a1 + 5))(a1);
        llvm::MCAsmParser::Error((uint64_t)a1, *(_QWORD *)(v11 + 96), (uint64_t)&v23, 0, 0);
        v12 = 1;
        goto LABEL_29;
      }
      sub_1C5378B58((uint64_t)a2, 0, -1, (uint64_t)&v23);
      sub_1C48552C0((uint64_t)&v20, (uint64_t)&v24);
      v10 = v24;
      if (v24 != (_DWORD *)&unk_1C866F1C0)
        goto LABEL_19;
LABEL_43:
      sub_1C4773C74(&v25);
LABEL_20:
      if (v6 == 13)
      {
        if ((_UNKNOWN *)v20 == &unk_1C866F1C0)
          llvm::detail::DoubleAPFloat::changeSign((llvm::detail::DoubleAPFloat *)&v20);
        else
          v22 ^= 8u;
      }
      (*((void (**)(_DWORD **))*a1 + 23))(a1);
      if ((_UNKNOWN *)v20 == &unk_1C866F1C0)
        llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)&v20, (unsigned int *)&v23);
      else
        llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)&v20, (unsigned int *)&v23);
      if (*(_DWORD *)(a3 + 8) >= 0x41u && *(_QWORD *)a3)
        MEMORY[0x1CAA32F9C](*(_QWORD *)a3, 0x1000C8000313F17);
      v12 = 0;
      *(_QWORD *)a3 = v23;
      *(_DWORD *)(a3 + 8) = (_DWORD)v24;
LABEL_29:
      if ((_UNKNOWN *)v20 == &unk_1C866F1C0)
      {
        sub_1C4773C74(&v21);
      }
      else if ((*(_DWORD *)(v20 + 8) - 64) <= 0xFFFFFF7F && v21)
      {
        MEMORY[0x1CAA32F9C](v21, 0x1000C8000313F17);
      }
      return v12;
    default:
      v23 = "unexpected token in directive";
      v26 = 259;
      v15 = (*((uint64_t (**)(_DWORD **))*a1 + 5))(a1);
LABEL_34:
      llvm::MCAsmParser::Error((uint64_t)a1, *(_QWORD *)(v15 + 96), (uint64_t)&v23, 0, 0);
      return 1;
  }
}

uint64_t sub_1C60E9900(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t Symbol;
  unint64_t v6;
  uint64_t v7;
  const char *v9;
  _QWORD v10[4];
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(_QWORD *)a1;
  v12 = 0;
  v13 = 0;
  v3 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2) + 8) + 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 192))(v2, &v12))
  {
    v9 = "expected identifier";
    goto LABEL_10;
  }
  if (((*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v2 + 104))(v2, v12, v13) & 1) == 0)
  {
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
    v11 = 261;
    v10[0] = v12;
    v10[1] = v13;
    Symbol = llvm::MCContext::getOrCreateSymbol(v4, (uint64_t)v10);
    if ((*(_BYTE *)(Symbol + 8) & 1) != 0)
    {
      v9 = "non-local symbol required";
    }
    else
    {
      v6 = Symbol;
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 56))(v2);
      if (((*(uint64_t (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v7 + 304))(v7, v6, **(unsigned int **)(a1 + 8)) & 1) != 0)return 0;
      v9 = "unable to emit symbol attribute";
    }
LABEL_10:
    v10[0] = v9;
    v11 = 259;
    return llvm::MCAsmParser::Error(v2, v3, (uint64_t)v10, 0, 0);
  }
  return 0;
}

unint64_t sub_1C60E9A28(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  void *v6;
  int v7;
  uint64_t v8;
  _DWORD *v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  int *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  int v21;
  uint64_t v23;
  _DWORD *v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  int v35;
  int v36;
  uint64_t v38;
  int *v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unint64_t v43;
  int v44;
  int v45;
  void *v47;
  unint64_t v48;
  unsigned int v49;
  __int128 *v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  uint64_t v58;
  __int16 v59;
  __int128 v60;
  uint64_t v61;
  void *__dst;
  unsigned int v63;
  void **v64;

  *((_QWORD *)&v60 + 1) = 0;
  v61 = 0;
  v63 = 1;
  __dst = 0;
  v4 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8);
  v5 = *(unsigned int *)(v4 + 32);
  v54 = *(_QWORD *)(v4 + 8);
  if (v5 > 0x40)
  {
    v6 = (void *)operator new[]();
    memcpy(v6, *(const void **)(v4 + 24), ((unint64_t)(v5 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v6 = *(void **)(v4 + 24);
  }
  if (!**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8))
  {
LABEL_78:
    *(_QWORD *)&v57 = "no matching '.endr' in definition";
    v59 = 259;
    (*(void (**)(uint64_t, uint64_t, __int128 *, _QWORD, _QWORD))(*(_QWORD *)a1 + 176))(a1, a2, &v57, 0, 0);
    v47 = 0;
    v48 = 0;
    v49 = 1;
    goto LABEL_79;
  }
  v7 = 0;
  while (1)
  {
    if (**(_DWORD **)(a1 + 48) == 2)
    {
      v8 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8);
      if (*(_DWORD *)v8 == 2)
      {
        v9 = *(_DWORD **)(v8 + 8);
        v10 = *(_QWORD *)(v8 + 16);
      }
      else
      {
        v9 = *(_DWORD **)(v8 + 8);
        v11 = *(_QWORD *)(v8 + 16);
        v12 = v11 - 1;
        v13 = v11 != 0;
        if (v11)
          v9 = (_DWORD *)((char *)v9 + 1);
        if (v13 > v12)
          v12 = v11 != 0;
        if (v11 < v12)
          v12 = v11;
        v10 = v12 - v13;
      }
      if (v10 == 4 && *v9 == 1885696558)
        goto LABEL_58;
      v14 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8);
      if (*(_DWORD *)v14 == 2)
      {
        v15 = *(int **)(v14 + 8);
        v16 = *(_QWORD *)(v14 + 16);
      }
      else
      {
        v15 = *(int **)(v14 + 8);
        v17 = *(_QWORD *)(v14 + 16);
        v18 = v17 - 1;
        v19 = v17 != 0;
        if (v17)
          v15 = (int *)((char *)v15 + 1);
        if (v19 > v18)
          v18 = v17 != 0;
        if (v17 < v18)
          v18 = v17;
        v16 = v18 - v19;
      }
      if (v16 == 5)
      {
        v20 = *v15;
        v21 = *((unsigned __int8 *)v15 + 4);
        if (v20 == 1885696558 && v21 == 116)
          goto LABEL_58;
      }
      v23 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8);
      if (*(_DWORD *)v23 == 2)
      {
        v24 = *(_DWORD **)(v23 + 8);
        v25 = *(_QWORD *)(v23 + 16);
      }
      else
      {
        v24 = *(_DWORD **)(v23 + 8);
        v26 = *(_QWORD *)(v23 + 16);
        v27 = v26 - 1;
        v28 = v26 != 0;
        if (v26)
          v24 = (_DWORD *)((char *)v24 + 1);
        if (v28 > v27)
          v27 = v26 != 0;
        if (v26 < v27)
          v27 = v26;
        v25 = v27 - v28;
      }
      if (v25 == 4 && *v24 == 1886546222)
        goto LABEL_58;
      v29 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8);
      if (*(_DWORD *)v29 == 2)
      {
        v30 = *(int **)(v29 + 8);
        v31 = *(_QWORD *)(v29 + 16);
      }
      else
      {
        v30 = *(int **)(v29 + 8);
        v32 = *(_QWORD *)(v29 + 16);
        v33 = v32 - 1;
        v34 = v32 != 0;
        if (v32)
          v30 = (int *)((char *)v30 + 1);
        if (v34 > v33)
          v33 = v32 != 0;
        if (v32 < v33)
          v33 = v32;
        v31 = v33 - v34;
      }
      if (v31 == 5)
      {
        v35 = *v30;
        v36 = *((unsigned __int8 *)v30 + 4);
        if (v35 == 1886546222 && v36 == 99)
LABEL_58:
          ++v7;
      }
    }
    if (**(_DWORD **)(a1 + 48) != 2)
      goto LABEL_77;
    v38 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8);
    if (*(_DWORD *)v38 == 2)
    {
      v39 = *(int **)(v38 + 8);
      v40 = *(_QWORD *)(v38 + 16);
    }
    else
    {
      v39 = *(int **)(v38 + 8);
      v41 = *(_QWORD *)(v38 + 16);
      v42 = v41 - 1;
      v43 = v41 != 0;
      if (v41)
        v39 = (int *)((char *)v39 + 1);
      if (v43 > v42)
        v42 = v41 != 0;
      if (v41 < v42)
        v42 = v41;
      v40 = v42 - v43;
    }
    if (v40 != 5)
      goto LABEL_77;
    v44 = *v39;
    v45 = *((unsigned __int8 *)v39 + 4);
    if (v44 != 1684956462 || v45 != 114)
      goto LABEL_77;
    if (!v7)
      break;
    --v7;
LABEL_77:
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 224))(a1);
    if (!**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8))
      goto LABEL_78;
  }
  v51 = *(__int128 **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8);
  v60 = *v51;
  v61 = *((_QWORD *)v51 + 2);
  v49 = *((_DWORD *)v51 + 8);
  if (v49 > 0x40)
  {
    llvm::APInt::reallocate((uint64_t)&__dst, *((_DWORD *)v51 + 8));
    v49 = v63;
    if (v63 <= 0x40)
    {
      v47 = (void *)*((_QWORD *)v51 + 3);
      __dst = v47;
    }
    else
    {
      v47 = __dst;
      memcpy(__dst, *((const void **)v51 + 3), (((unint64_t)v63 + 63) >> 3) & 0x3FFFFFF8);
    }
  }
  else
  {
    v47 = (void *)*((_QWORD *)v51 + 3);
    __dst = v47;
    v63 = v49;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
  if (**(_DWORD **)(a1 + 48) == 9)
  {
    *(_QWORD *)&v56 = v54;
    *((_QWORD *)&v56 + 1) = *((_QWORD *)&v60 + 1) - v54;
    v55 = 0uLL;
    v57 = 0uLL;
    v58 = 0;
    sub_1C63E9E64((_QWORD *)(a1 + 376), &v55, &v56, &v57);
    v64 = (void **)&v57;
    sub_1C5934A04(&v64);
    v53 = *(_QWORD *)(a1 + 416) + *(_QWORD *)(a1 + 408) - 1;
    v48 = *(_QWORD *)(*(_QWORD *)(a1 + 384) + 8 * (v53 / 0x2E)) + 88 * (v53 % 0x2E);
  }
  else
  {
    v52 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8) + 8);
    *(_QWORD *)&v57 = "unexpected token in '.endr' directive";
    v59 = 259;
    (*(void (**)(uint64_t, uint64_t, __int128 *, _QWORD, _QWORD))(*(_QWORD *)a1 + 176))(a1, v52, &v57, 0, 0);
    v48 = 0;
  }
LABEL_79:
  if (v5 >= 0x41 && v6)
    MEMORY[0x1CAA32F9C](v6, 0x1000C8000313F17);
  if (v49 >= 0x41 && v47)
    MEMORY[0x1CAA32F9C](v47, 0x1000C8000313F17);
  return v48;
}

uint64_t sub_1C60E9F80(uint64_t a1, uint64_t a2, llvm::raw_ostream *this)
{
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v32;
  const char *v33;
  __int16 v34;
  uint64_t v35;
  char v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  v6 = *((_QWORD *)this + 4);
  if ((unint64_t)(*((_QWORD *)this + 3) - v6) > 5)
  {
    *(_WORD *)(v6 + 4) = 2674;
    *(_DWORD *)v6 = 1684956462;
    *((_QWORD *)this + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(this, ".endr\n", 6uLL);
  }
  v7 = *((_QWORD *)this + 8);
  v8 = *(const void **)v7;
  v9 = *(_QWORD *)(v7 + 8);
  v33 = "<instantiation>";
  v34 = 259;
  sub_1C5E1F4D0(v8, v9, (uint64_t)&v33, (uint64_t)&v35);
  if ((v36 & 1) != 0)
    v10 = 0;
  else
    v10 = v35;
  v11 = operator new();
  *(_QWORD *)v11 = a2;
  *(_DWORD *)(v11 + 8) = *(_DWORD *)(a1 + 280);
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v13 = (uint64_t)(*(_QWORD *)(a1 + 304) - *(_QWORD *)(a1 + 296)) >> 3;
  *(_QWORD *)(v11 + 16) = *(_QWORD *)(*(_QWORD *)(v12 + 8) + 8);
  *(_QWORD *)(v11 + 24) = v13;
  v15 = *(uint64_t **)(a1 + 360);
  v14 = *(_QWORD *)(a1 + 368);
  if ((unint64_t)v15 >= v14)
  {
    v17 = *(_QWORD **)(a1 + 352);
    v18 = v15 - v17;
    v19 = v18 + 1;
    if ((unint64_t)(v18 + 1) >> 61)
      abort();
    v20 = v14 - (_QWORD)v17;
    if (v20 >> 2 > v19)
      v19 = v20 >> 2;
    if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
      v21 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v21 = v19;
    if (v21)
    {
      if (v21 >> 61)
        sub_1C4764EE4();
      v22 = (char *)operator new(8 * v21);
    }
    else
    {
      v22 = 0;
    }
    v23 = (uint64_t *)&v22[8 * v18];
    *v23 = v11;
    v16 = v23 + 1;
    if (v15 != v17)
    {
      do
      {
        v24 = *--v15;
        *--v23 = v24;
      }
      while (v15 != v17);
      v15 = *(uint64_t **)(a1 + 352);
    }
    *(_QWORD *)(a1 + 352) = v23;
    *(_QWORD *)(a1 + 360) = v16;
    *(_QWORD *)(a1 + 368) = &v22[8 * v21];
    if (v15)
      operator delete(v15);
  }
  else
  {
    *v15 = v11;
    v16 = v15 + 1;
  }
  *(_QWORD *)(a1 + 360) = v16;
  v25 = *(_QWORD *)(a1 + 240);
  v32 = v10;
  v26 = sub_1C6175188(v25, &v32, 0);
  *(_DWORD *)(a1 + 280) = v26;
  v27 = v32;
  v32 = 0;
  if (v27)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
    v26 = *(_DWORD *)(a1 + 280);
  }
  v28 = *(_QWORD *)(**(_QWORD **)(a1 + 240) + 24 * (v26 - 1));
  v29 = *(_QWORD *)(v28 + 8);
  v30 = *(_QWORD *)(v28 + 16) - v29;
  *(_QWORD *)(a1 + 192) = v29;
  *(_QWORD *)(a1 + 200) = v30;
  *(_QWORD *)(a1 + 184) = v29;
  *(_QWORD *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 211) = 1;
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
}

void sub_1C60EA1F4(uint64_t a1)
{
  unint64_t v2;
  BOOL v3;
  unint64_t v4;
  _QWORD *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  size_t v17;
  unint64_t v18;
  char *v19;
  char *v20;
  char *v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  void *v45;
  __int128 v46;
  __int128 v47;
  uint64_t v48;

  v2 = *(_QWORD *)(a1 + 32);
  v3 = v2 >= 0x2E;
  v4 = v2 - 46;
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v4;
    v5 = *(_QWORD **)(a1 + 8);
    v6 = *(char **)(a1 + 16);
    v9 = *v5;
    v7 = (char *)(v5 + 1);
    v8 = v9;
    *(_QWORD *)(a1 + 8) = v7;
    if (v6 != *(char **)(a1 + 24))
    {
LABEL_20:
      *(_QWORD *)v6 = v8;
      *(_QWORD *)(a1 + 16) += 8;
      return;
    }
    v10 = *(char **)a1;
    v11 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      if (v6 == v10)
        v18 = 1;
      else
        v18 = (v6 - v10) >> 2;
      if (!(v18 >> 61))
      {
        v19 = (char *)operator new(8 * v18);
        v20 = &v19[8 * (v18 >> 2)];
        v21 = &v19[8 * v18];
        v23 = v6 - v7;
        v22 = v6 == v7;
        v6 = v20;
        if (!v22)
        {
          v6 = &v20[v23 & 0xFFFFFFFFFFFFFFF8];
          v24 = 8 * (v23 >> 3);
          v25 = &v19[8 * (v18 >> 2)];
          do
          {
            v26 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v25 = v26;
            v25 += 8;
            v24 -= 8;
          }
          while (v24);
        }
        goto LABEL_18;
      }
LABEL_47:
      sub_1C4764EE4();
    }
LABEL_5:
    v12 = v11 >> 3;
    if (v12 >= -1)
      v13 = v12 + 1;
    else
      v13 = v12 + 2;
    v14 = -(v13 >> 1);
    v15 = v13 >> 1;
    v16 = &v7[-8 * v15];
    v17 = v6 - v7;
    if (v17)
    {
      memmove(&v7[-8 * v15], v7, v17);
      v7 = *(char **)(a1 + 8);
    }
    v6 = &v16[v17];
    *(_QWORD *)(a1 + 8) = &v7[8 * v14];
    *(_QWORD *)(a1 + 16) = v6;
    goto LABEL_20;
  }
  v27 = *(_QWORD *)(a1 + 16);
  v28 = v27 - *(_QWORD *)(a1 + 8);
  v29 = *(_QWORD *)(a1 + 24);
  v30 = v29 - *(_QWORD *)a1;
  if (v28 < v30)
  {
    if (v29 != v27)
    {
      *(_QWORD *)&v46 = operator new(0xFD0uLL);
      sub_1C61351F0(a1, &v46);
      return;
    }
    *(_QWORD *)&v46 = operator new(0xFD0uLL);
    sub_1C6135314((void **)a1, &v46);
    v31 = *(_QWORD **)(a1 + 8);
    v6 = *(char **)(a1 + 16);
    v32 = *v31;
    v7 = (char *)(v31 + 1);
    v8 = v32;
    *(_QWORD *)(a1 + 8) = v7;
    if (v6 != *(char **)(a1 + 24))
      goto LABEL_20;
    v10 = *(char **)a1;
    v11 = (uint64_t)&v7[-*(_QWORD *)a1];
    if ((unint64_t)v7 <= *(_QWORD *)a1)
    {
      if (v6 == v10)
        v33 = 1;
      else
        v33 = (v6 - v10) >> 2;
      if (!(v33 >> 61))
      {
        v19 = (char *)operator new(8 * v33);
        v20 = &v19[8 * (v33 >> 2)];
        v21 = &v19[8 * v33];
        v34 = v6 - v7;
        v22 = v6 == v7;
        v6 = v20;
        if (!v22)
        {
          v6 = &v20[v34 & 0xFFFFFFFFFFFFFFF8];
          v35 = 8 * (v34 >> 3);
          v36 = &v19[8 * (v33 >> 2)];
          do
          {
            v37 = *(_QWORD *)v7;
            v7 += 8;
            *(_QWORD *)v36 = v37;
            v36 += 8;
            v35 -= 8;
          }
          while (v35);
        }
LABEL_18:
        *(_QWORD *)a1 = v19;
        *(_QWORD *)(a1 + 8) = v20;
        *(_QWORD *)(a1 + 16) = v6;
        *(_QWORD *)(a1 + 24) = v21;
        if (v10)
        {
          operator delete(v10);
          v6 = *(char **)(a1 + 16);
        }
        goto LABEL_20;
      }
      goto LABEL_47;
    }
    goto LABEL_5;
  }
  if (v29 == *(_QWORD *)a1)
    v38 = 1;
  else
    v38 = v30 >> 2;
  v48 = a1 + 24;
  if (v38 >> 61)
    goto LABEL_47;
  *(_QWORD *)&v46 = operator new(8 * v38);
  *((_QWORD *)&v46 + 1) = v46 + v28;
  *(_QWORD *)&v47 = v46 + v28;
  *((_QWORD *)&v47 + 1) = v46 + 8 * v38;
  v45 = operator new(0xFD0uLL);
  sub_1C61351F0((uint64_t)&v46, &v45);
  v39 = *(char **)(a1 + 16);
  if (v39 == *(char **)(a1 + 8))
  {
    v40 = *(char **)(a1 + 16);
  }
  else
  {
    do
    {
      v39 -= 8;
      sub_1C6135314((void **)&v46, v39);
    }
    while (v39 != *(char **)(a1 + 8));
    v40 = *(char **)(a1 + 16);
  }
  v41 = *(char **)a1;
  v42 = v46;
  v43 = v47;
  *(_QWORD *)&v46 = *(_QWORD *)a1;
  *((_QWORD *)&v46 + 1) = v39;
  v44 = *(_QWORD *)(a1 + 24);
  *(_OWORD *)a1 = v42;
  *(_OWORD *)(a1 + 16) = v43;
  *(_QWORD *)&v47 = v40;
  *((_QWORD *)&v47 + 1) = v44;
  if (v40 != v39)
    *(_QWORD *)&v47 = &v40[(v39 - v40 + 7) & 0xFFFFFFFFFFFFFFF8];
  if (v41)
    operator delete(v41);
}

__n128 sub_1C60EA4BC(uint64_t a1, uint64_t a2, __int128 *a3, __int128 *a4, __int128 *a5)
{
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  __int128 v8;
  __n128 result;
  _QWORD v10[3];
  void **v11;

  v5 = *((_QWORD *)a5 + 2);
  v6 = *a5;
  v7 = *a3;
  v8 = *a4;
  *(_QWORD *)a5 = 0;
  *((_QWORD *)a5 + 1) = 0;
  *((_QWORD *)a5 + 2) = 0;
  *(_OWORD *)a2 = v7;
  *(_OWORD *)(a2 + 16) = v8;
  *(_OWORD *)(a2 + 32) = v6;
  memset(v10, 0, sizeof(v10));
  *(_QWORD *)(a2 + 48) = v5;
  *(_QWORD *)(a2 + 56) = 0;
  *(_QWORD *)(a2 + 64) = 0;
  *(_QWORD *)(a2 + 72) = 0;
  *(_BYTE *)(a2 + 80) = 0;
  v11 = (void **)v10;
  sub_1C5934A04(&v11);
  return result;
}

uint64_t sub_1C60EA518(_QWORD *a1)
{
  uint64_t v2;
  uint64_t result;

  sub_1C60E8154((uint64_t)a1, *(_QWORD *)(*(_QWORD *)(a1[45] - 8) + 16), *(_DWORD *)(*(_QWORD *)(a1[45] - 8) + 8));
  (*(void (**)(_QWORD *))(*a1 + 184))(a1);
  v2 = a1[45];
  result = *(_QWORD *)(v2 - 8);
  if (result)
  {
    result = MEMORY[0x1CAA32FC0](result, 0x1050C4073F788CFLL);
    v2 = a1[45];
  }
  a1[45] = v2 - 8;
  return result;
}

uint64_t sub_1C60EA584(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v8;
  uint64_t v9;

  v2 = *a1;
  v8 = 0;
  v9 = 0;
  v3 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t *))(*(_QWORD *)v2 + 232))(v2, &v8, &v9);
  if ((v3 & 1) == 0)
  {
    v4 = *(unsigned __int8 *)a1[1];
    v5 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 56))(v2);
    v6 = 552;
    if (!v4)
      v6 = 544;
    (*(void (**)(_QWORD *, uint64_t))(*v5 + v6))(v5, v8);
  }
  return v3;
}

void sub_1C60EA614(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v2 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v2)
  {
    v3 = *(_QWORD *)(a1 + 8);
    v4 = 24 * v2;
    do
    {
      if (*(char *)(v3 + v4 - 1) < 0)
        operator delete(*(void **)(v3 + v4 - 24));
      v4 -= 24;
    }
    while (v4);
  }
  *(_DWORD *)(a1 + 16) = 0;
  v5 = *(unsigned int *)(a1 + 104);
  if ((_DWORD)v5)
  {
    v6 = *(_QWORD *)(a1 + 96);
    v7 = 72 * v5;
    do
    {
      if (*(char *)(v6 + v7 - 49) < 0)
        operator delete(*(void **)(v6 + v7 - 72));
      v7 -= 72;
    }
    while (v7);
  }
  *(_DWORD *)(a1 + 104) = 0;
  if (*(char *)(a1 + 407) < 0)
  {
    **(_BYTE **)(a1 + 384) = 0;
    *(_QWORD *)(a1 + 392) = 0;
  }
  else
  {
    *(_BYTE *)(a1 + 384) = 0;
    *(_BYTE *)(a1 + 407) = 0;
  }
  *(_BYTE *)(a1 + 458) = 0;
  *(_WORD *)(a1 + 456) = 256;
}

uint64_t sub_1C60EA6CC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  int v7;
  unsigned int *v8;
  unsigned int v9;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[4];
  __int16 v19;
  uint64_t v20;
  uint64_t v21;

  v2 = *(_QWORD *)a1;
  v20 = 0;
  v21 = 0;
  v3 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2) + 8) + 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 192))(v2, &v20))
  {
    v18[0] = "unexpected token in '.loc' directive";
    v19 = 259;
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    llvm::MCAsmParser::Error(v2, *(_QWORD *)(v16 + 96), (uint64_t)v18, 0, 0);
    return 1;
  }
  switch(v21)
  {
    case 3:
      if (*(_WORD *)v20 != 29545 || *(_BYTE *)(v20 + 2) != 97)
        goto LABEL_49;
      v3 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2) + 8) + 8);
      v17 = 0;
      v18[0] = 0;
      if (((*(uint64_t (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v2 + 232))(v2, &v17, v18) & 1) != 0)
        return 1;
      if (*(_BYTE *)v17 == 1)
      {
        v5 = *(_DWORD *)(v17 + 16);
        if ((v5 & 0x80000000) == 0)
        {
          **(_DWORD **)(a1 + 16) = v5;
          return 0;
        }
        v15 = "isa number less than zero";
      }
      else
      {
        v15 = "isa number not a constant value";
      }
      goto LABEL_50;
    case 7:
      if (*(_DWORD *)v20 != 1935635305 || *(_DWORD *)(v20 + 3) != 1953330291)
        goto LABEL_49;
      v3 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2) + 8) + 8);
      v17 = 0;
      v18[0] = 0;
      if (((*(uint64_t (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v2 + 232))(v2, &v17, v18) & 1) != 0)
        return 1;
      if (*(_BYTE *)v17 != 1)
      {
        v15 = "is_stmt value not the constant value of 0 or 1";
        goto LABEL_50;
      }
      v7 = *(_DWORD *)(v17 + 16);
      if (v7 != 1)
      {
        if (!v7)
        {
          v8 = *(unsigned int **)(a1 + 8);
          v9 = *v8 & 0xFFFFFFFE;
          goto LABEL_47;
        }
        v15 = "is_stmt value not 0 or 1";
LABEL_50:
        v18[0] = v15;
        v19 = 259;
        return llvm::MCAsmParser::Error(v2, v3, (uint64_t)v18, 0, 0);
      }
      v8 = *(unsigned int **)(a1 + 8);
      v9 = *v8 | 1;
LABEL_47:
      *v8 = v9;
      return 0;
    case 11:
      if (*(_QWORD *)v20 != 0x6C625F6369736162 || *(_QWORD *)(v20 + 3) != 0x6B636F6C625F6369)
        goto LABEL_49;
      v8 = *(unsigned int **)(a1 + 8);
      v9 = *v8 | 2;
      goto LABEL_47;
    case 12:
      if (*(_QWORD *)v20 != 0x6575676F6C6F7270 || *(_DWORD *)(v20 + 8) != 1684956511)
        goto LABEL_49;
      v8 = *(unsigned int **)(a1 + 8);
      v9 = *v8 | 4;
      goto LABEL_47;
    case 13:
      if (*(_QWORD *)v20 != 0x696D697263736964 || *(_QWORD *)(v20 + 5) != 0x726F74616E696D69)
        goto LABEL_49;
      return ((*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 256))(v2, *(_QWORD *)(a1 + 24)) & 1) != 0;
    case 14:
      if (*(_QWORD *)v20 != 0x6575676F6C697065 || *(_QWORD *)(v20 + 6) != 0x6E696765625F6575)
        goto LABEL_49;
      v8 = *(unsigned int **)(a1 + 8);
      v9 = *v8 | 8;
      goto LABEL_47;
    default:
LABEL_49:
      v15 = "unknown sub-directive in '.loc' directive";
      goto LABEL_50;
  }
}

uint64_t sub_1C60EAA40(llvm::MCAsmParser *a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unint64_t v10;
  const char *v11;
  __int16 v12;
  _QWORD v13[4];
  __int16 v14;
  _QWORD v15[4];
  __int16 v16;

  v8 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1) + 8) + 8);
  v14 = 1283;
  v13[0] = "expected function id in '";
  v13[2] = a3;
  v13[3] = a4;
  v15[0] = v13;
  v15[2] = "' directive";
  v16 = 770;
  if (llvm::MCAsmParser::parseIntToken(a1, a2, (const llvm::Twine *)v15))
    return 1;
  v10 = *a2;
  v11 = "expected function id within range [0, UINT_MAX)";
  v12 = 259;
  if (v10 >= 0xFFFFFFFF)
  {
    llvm::MCAsmParser::Error((uint64_t)a1, v8, (uint64_t)&v11, 0, 0);
    return 1;
  }
  return 0;
}

uint64_t sub_1C60EAB28(llvm::MCContext **a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  _BOOL4 v14;
  _QWORD v15[4];
  __int16 v16;
  _QWORD v17[4];
  __int16 v18;
  _QWORD v19[4];
  __int16 v20;
  _QWORD v21[4];
  __int16 v22;
  _QWORD v23[4];
  __int16 v24;
  _QWORD v25[4];
  __int16 v26;

  v8 = *(_QWORD *)(*(_QWORD *)((*((uint64_t (**)(llvm::MCContext **))*a1 + 5))(a1) + 8) + 8);
  v24 = 1283;
  v23[0] = "expected integer in '";
  v23[2] = a3;
  v23[3] = a4;
  v25[0] = v23;
  v25[2] = "' directive";
  v26 = 770;
  if (!llvm::MCAsmParser::parseIntToken((llvm::MCAsmParser *)a1, a2, (const llvm::Twine *)v25))
  {
    v10 = *a2;
    v20 = 1283;
    v19[0] = "file number less than one in '";
    v19[2] = a3;
    v19[3] = a4;
    v21[0] = v19;
    v21[2] = "' directive";
    v22 = 770;
    if (v10 >= 1)
    {
      llvm::MCContext::getCVContext(a1[27]);
      v13 = (*(_DWORD *)a2 - 1);
      v14 = *(_DWORD *)(v12 + 56) <= v13
         || *(unsigned __int8 *)(*(_QWORD *)(v12 + 48) + 32 * v13 + 4) == 0;
      v16 = 1283;
      v15[0] = "unassigned file number in '";
      v15[2] = a3;
      v15[3] = a4;
      v17[0] = v15;
      v17[2] = "' directive";
      v18 = 770;
      if (!v14)
        return 0;
      v11 = v17;
    }
    else
    {
      v11 = v21;
    }
    llvm::MCAsmParser::Error((uint64_t)a1, v8, (uint64_t)v11, 0, 0);
  }
  return 1;
}

uint64_t sub_1C60EAC9C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  unint64_t *v7;
  unint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[4];
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(_QWORD *)a1;
  v14 = 0;
  v15 = 0;
  v3 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2) + 8) + 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 192))(v2, &v14))
  {
    v12[0] = "unexpected token in '.cv_loc' directive";
    v13 = 259;
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    llvm::MCAsmParser::Error(v2, *(_QWORD *)(v10 + 96), (uint64_t)v12, 0, 0);
    return 1;
  }
  if (v15 != 7)
  {
    if (v15 == 12 && *(_QWORD *)v14 == 0x6575676F6C6F7270 && *(_DWORD *)(v14 + 8) == 1684956511)
    {
      result = 0;
      **(_BYTE **)(a1 + 8) = 1;
      return result;
    }
    goto LABEL_19;
  }
  if (*(_DWORD *)v14 == 1935635305 && *(_DWORD *)(v14 + 3) == 1953330291)
  {
    v3 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2) + 8) + 8);
    v11 = 0;
    v12[0] = 0;
    if (((*(uint64_t (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v2 + 232))(v2, &v11, v12) & 1) == 0)
    {
      v7 = *(unint64_t **)(a1 + 16);
      *v7 = -1;
      if (*(_BYTE *)v11 == 1)
      {
        v8 = *(_QWORD *)(v11 + 16);
        *v7 = v8;
        if (v8 < 2)
          return 0;
      }
      v9 = "is_stmt value not 0 or 1";
      goto LABEL_23;
    }
    return 1;
  }
LABEL_19:
  v9 = "unknown sub-directive in '.cv_loc' directive";
LABEL_23:
  v12[0] = v9;
  v13 = 259;
  return llvm::MCAsmParser::Error(v2, v3, (uint64_t)v12, 0, 0);
}

uint64_t sub_1C60EAE68(_QWORD **a1, _QWORD *a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v6;
  int DwarfRegNum;
  unsigned int v8;
  uint64_t v9;

  v9 = a3;
  v8 = 0;
  if (**(_DWORD **)(((uint64_t (*)(_QWORD **))(*a1)[5])(a1) + 8) == 4)
    return ((uint64_t (*)(_QWORD **, _QWORD *))(*a1)[32])(a1, a2);
  if (((*(uint64_t (**)(_QWORD *, unsigned int *, uint64_t *, uint64_t *))(*a1[1] + 32))(a1[1], &v8, &v9, &v9) & 1) != 0)return 1;
  v6 = ((uint64_t (*)(_QWORD **))(*a1)[6])(a1);
  DwarfRegNum = llvm::MCRegisterInfo::getDwarfRegNum(*(_QWORD *)(v6 + 160), v8, 1);
  result = 0;
  *a2 = DwarfRegNum;
  return result;
}

void sub_1C60EAF2C(uint64_t a1, unsigned __int8 *a2, size_t a3, uint64_t a4)
{
  __int128 v4;
  _OWORD v5[2];
  __int128 v6;
  uint64_t v7;
  __int128 v8;
  uint64_t v9;
  char v10;
  void **v11;

  v4 = *(_OWORD *)(a4 + 16);
  v5[0] = *(_OWORD *)a4;
  v5[1] = v4;
  v6 = *(_OWORD *)(a4 + 32);
  v7 = *(_QWORD *)(a4 + 48);
  *(_QWORD *)(a4 + 32) = 0;
  *(_QWORD *)(a4 + 40) = 0;
  v8 = *(_OWORD *)(a4 + 56);
  v9 = *(_QWORD *)(a4 + 72);
  *(_QWORD *)(a4 + 48) = 0;
  *(_QWORD *)(a4 + 56) = 0;
  *(_QWORD *)(a4 + 64) = 0;
  *(_QWORD *)(a4 + 72) = 0;
  v10 = *(_BYTE *)(a4 + 80);
  sub_1C63EA03C(a1 + 1968, a2, a3, (uint64_t)v5);
  v11 = (void **)&v8;
  sub_1C4765410(&v11);
  v11 = (void **)&v6;
  sub_1C5934A04(&v11);
}

uint64_t sub_1C60EAFC0(uint64_t *a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  char *v9;
  __int128 v10;
  uint64_t v11;
  char *v12;
  char *v13;
  void *__p;
  char *v16;
  char *v17;
  char *v18;
  uint64_t *v19;
  void **v20;

  v2 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 4);
  v3 = v2 + 1;
  if (v2 + 1 > 0x555555555555555)
    abort();
  if (0x5555555555555556 * ((a1[2] - *a1) >> 4) > v3)
    v3 = 0x5555555555555556 * ((a1[2] - *a1) >> 4);
  if (0xAAAAAAAAAAAAAAABLL * ((a1[2] - *a1) >> 4) >= 0x2AAAAAAAAAAAAAALL)
    v5 = 0x555555555555555;
  else
    v5 = v3;
  v19 = a1 + 2;
  if (v5 > 0x555555555555555)
    sub_1C4764EE4();
  v7 = 3 * v5;
  v8 = (char *)operator new(48 * v5);
  v9 = &v8[48 * v2];
  __p = v8;
  v16 = v9;
  v10 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)v9 = *(_OWORD *)a2;
  *((_OWORD *)v9 + 1) = v10;
  *((_QWORD *)v9 + 4) = *(_QWORD *)(a2 + 32);
  *(_QWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 32) = 0;
  *((_WORD *)v9 + 20) = *(_WORD *)(a2 + 40);
  v17 = v9 + 48;
  v18 = &v8[16 * v7];
  sub_1C63E9FA0(a1, &__p);
  v11 = a1[1];
  v12 = v16;
  while (1)
  {
    v13 = v17;
    if (v17 == v12)
      break;
    v17 -= 48;
    v20 = (void **)(v13 - 32);
    sub_1C5934A7C(&v20);
  }
  if (__p)
    operator delete(__p);
  return v11;
}

uint64_t sub_1C60EB0F0(uint64_t a1, unsigned __int8 *__s1, size_t __n)
{
  uint64_t v3;
  int v7;
  size_t v8;
  unsigned __int8 *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;

  v3 = *(unsigned int *)(a1 + 8);
  if (!(_DWORD)v3)
    return 0;
  v7 = 0;
  if (__n)
  {
    v8 = __n;
    v9 = __s1;
    do
    {
      v10 = *v9++;
      v7 = 33 * v7 + v10;
      --v8;
    }
    while (v8);
  }
  v11 = *(_QWORD *)a1;
  v12 = *(_QWORD *)a1 + 8 * v3 + 8;
  v13 = 1;
  v14 = v7;
  while (1)
  {
    v15 = v14 & (v3 - 1);
    v16 = *(_QWORD **)(v11 + 8 * v15);
    if (v16 != (_QWORD *)-8)
    {
      if (!v16)
        return 0;
      if (*(_DWORD *)(v12 + 4 * v15) == v7
        && __n == *v16
        && (!__n || !memcmp(__s1, (char *)v16 + *(unsigned int *)(a1 + 20), __n)))
      {
        break;
      }
    }
    v14 = v13 + v15;
    ++v13;
  }
  if ((_DWORD)v15 == -1 || (int)v15 == v3)
    return 0;
  sub_1C60EB1F8((uint64_t *)a1, (uint64_t *)(v11 + 8 * (int)v15));
  return 1;
}

uint64_t sub_1C60EB1F8(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  size_t v5;
  int v6;
  size_t v7;
  unsigned __int8 *v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  void **v19;

  v2 = *a2;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = *((unsigned int *)a1 + 5);
    v5 = *(_QWORD *)v2;
    if (*(_QWORD *)v2)
    {
      v6 = 0;
      v7 = *(_QWORD *)v2;
      v8 = (unsigned __int8 *)(v2 + v4);
      do
      {
        v9 = *v8++;
        v6 = 33 * v6 + v9;
        --v7;
      }
      while (v7);
    }
    else
    {
      v6 = 0;
    }
    v10 = v3 - 1;
    v11 = *a1;
    v12 = *a1 + 8 * v3 + 8;
    v13 = 1;
    v14 = v6;
    while (1)
    {
      v15 = v14 & v10;
      v16 = *(_QWORD **)(v11 + 8 * v15);
      if (v16 != (_QWORD *)-8)
      {
        if (!v16)
          goto LABEL_14;
        if (*(_DWORD *)(v12 + 4 * v15) == v6
          && v5 == *v16
          && (!v5 || !memcmp((const void *)(v2 + v4), (char *)v16 + v4, v5)))
        {
          break;
        }
      }
      v14 = v13 + v15;
      ++v13;
    }
    *(_QWORD *)(v11 + 8 * (int)v15) = -8;
    *(uint64_t *)((char *)a1 + 12) = (uint64_t)vadd_s32(*(int32x2_t *)((char *)a1 + 12), (int32x2_t)0x1FFFFFFFFLL);
  }
LABEL_14:
  v19 = (void **)(v2 + 64);
  sub_1C4765410(&v19);
  v19 = (void **)(v2 + 40);
  sub_1C5934A04(&v19);
  return MEMORY[0x1CAA32FB4](v2, 8);
}

uint64_t sub_1C60EB33C(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  const char *v4;
  __int16 v5;
  __int128 v6;

  v1 = *a1;
  v6 = 0uLL;
  v2 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 40))(v1) + 8) + 8);
  if ((*(unsigned int (**)(uint64_t, __int128 *))(*(_QWORD *)v1 + 192))(v1, &v6))
  {
    v4 = "expected identifier";
    v5 = 259;
    return llvm::MCAsmParser::Error(v1, v2, (uint64_t)&v4, 0, 0);
  }
  else
  {
    sub_1C58EAB2C(v1 + 728, &v6);
    return 0;
  }
}

void sub_1C60EB3D4(uint64_t a1, unint64_t a2, std::string *__str)
{
  unint64_t v6;
  unint64_t v7;
  std::string *v8;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int v17;

  if (*(unsigned int *)(a1 + 12) >= a2)
  {
    v6 = *(unsigned int *)(a1 + 8);
    if (v6 >= a2)
      v7 = a2;
    else
      v7 = *(unsigned int *)(a1 + 8);
    if (v7)
    {
      v8 = *(std::string **)a1;
      do
      {
        std::string::operator=(v8++, __str);
        --v7;
      }
      while (v7);
      v6 = *(unsigned int *)(a1 + 8);
    }
    v9 = v6 - a2;
    if (v6 >= a2)
    {
      if (v6 > a2)
      {
        v13 = 3 * v6;
        v14 = *(_QWORD *)a1 + 24 * v6 - 1;
        v15 = 24 * a2 - 8 * v13;
        v16 = (char *)v14;
        do
        {
          v17 = *v16;
          v16 -= 24;
          if (v17 < 0)
            operator delete(*(void **)(v14 - 23));
          v14 = (uint64_t)v16;
          v15 += 24;
        }
        while (v15);
      }
    }
    else
    {
      v10 = *(_QWORD *)a1 + 24 * v6;
      do
      {
        if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
        {
          sub_1C47EBC30((_BYTE *)v10, __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
        }
        else
        {
          v11 = *(_OWORD *)&__str->__r_.__value_.__l.__data_;
          *(_QWORD *)(v10 + 16) = *((_QWORD *)&__str->__r_.__value_.__l + 2);
          *(_OWORD *)v10 = v11;
        }
        v10 += 24;
      }
      while (!__CFADD__(v9++, 1));
    }
    *(_DWORD *)(a1 + 8) = a2;
  }
  else
  {
    sub_1C60EB6A8(a1, a2, (__int128 *)__str);
  }
}

uint64_t sub_1C60EB4FC(unsigned int *a1, unsigned int *a2)
{
  unint64_t v2;
  unint64_t v3;

  v2 = *((_QWORD *)a1 + 1);
  v3 = *((_QWORD *)a2 + 1);
  if (v2 < v3)
    return 0xFFFFFFFFLL;
  if (v3 < v2)
    return 1;
  if (byte_1C86782D3[*a1] > byte_1C86782D3[*a2])
    return 0xFFFFFFFFLL;
  return 1;
}

uint64_t sub_1C60EB54C(unsigned int *a1, uint64_t a2, unsigned __int16 *a3, unsigned __int16 *a4)
{
  unsigned __int16 *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  _BYTE *v11;
  char *v12;
  unint64_t v13;
  unsigned int v14;
  _DWORD *v15;
  int v16;
  int v17;
  _DWORD *v19;
  int v20;

  v5 = a3;
  v7 = *(_QWORD *)a1;
  v8 = (a2 - *(_QWORD *)a1) >> 2;
  v9 = a1[2];
  if (*(_QWORD *)a1 + 4 * v9 == a2)
  {
    sub_1C63EA8C8(a1, a3, a4);
    return *(_QWORD *)a1 + 4 * v8;
  }
  else
  {
    v10 = a4 - a3;
    if (v9 + v10 > a1[3])
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, (uint64_t)(a1 + 4), v9 + v10, 4);
      v7 = *(_QWORD *)a1;
      v9 = a1[2];
    }
    v11 = (_BYTE *)(v7 + 4 * v8);
    v12 = (char *)(v7 + 4 * v9);
    v13 = (v12 - v11) >> 2;
    if (v13 >= v10)
    {
      sub_1C617D750(a1, &v12[-4 * v10], (char *)(v7 + 4 * v9));
      if (&v12[-4 * v10] != v11)
        memmove(&v11[4 * v10], v11, &v12[-4 * v10] - v11);
      if (v5 != a4)
      {
        v19 = v11;
        do
        {
          v20 = *v5++;
          *v19++ = v20;
        }
        while (v5 != a4);
      }
    }
    else
    {
      v14 = v9 + ((unint64_t)((char *)a4 - (char *)v5) >> 1);
      a1[2] = v14;
      if (v8 != v9)
      {
        memcpy((void *)(v7 + 4 * v14 - 4 * v13), v11, v12 - v11);
        v15 = v11;
        do
        {
          v16 = *v5++;
          *v15++ = v16;
          --v13;
        }
        while (v13);
      }
      while (v5 != a4)
      {
        v17 = *v5++;
        *(_DWORD *)v12 = v17;
        v12 += 4;
      }
    }
  }
  return (uint64_t)v11;
}

void sub_1C60EB6A8(uint64_t a1, unint64_t a2, __int128 *a3)
{
  char *v6;
  void *v7;
  char *v8;
  unint64_t v9;
  __int128 v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  unint64_t v15;

  v15 = 0;
  v6 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 24, &v15);
  v7 = v6;
  if (a2)
  {
    v8 = v6;
    v9 = a2;
    do
    {
      if (*((char *)a3 + 23) < 0)
      {
        sub_1C47EBC30(v8, *(void **)a3, *((_QWORD *)a3 + 1));
      }
      else
      {
        v10 = *a3;
        *((_QWORD *)v8 + 2) = *((_QWORD *)a3 + 2);
        *(_OWORD *)v8 = v10;
      }
      v8 += 24;
      --v9;
    }
    while (v9);
  }
  v11 = *(char **)a1;
  v12 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v12)
  {
    v13 = 24 * v12;
    do
    {
      if (v11[v13 - 1] < 0)
        operator delete(*(void **)&v11[v13 - 24]);
      v13 -= 24;
    }
    while (v13);
    v11 = *(char **)a1;
  }
  v14 = v15;
  if (v11 != (char *)(a1 + 16))
    free(v11);
  *(_QWORD *)a1 = v7;
  *(_DWORD *)(a1 + 8) = a2;
  *(_DWORD *)(a1 + 12) = v14;
}

void sub_1C60EB78C(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char *v8;
  int v9;

  v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    if (v2 <= a2)
    {
      if (*(unsigned int *)(a1 + 12) < a2)
      {
        sub_1C618A5D0(a1, a2);
        v2 = *(unsigned int *)(a1 + 8);
      }
      if (a2 != v2)
        bzero((void *)(*(_QWORD *)a1 + 24 * v2), 24 * ((24 * (a2 - v2) - 24) / 0x18) + 24);
    }
    else
    {
      v5 = 3 * v2;
      v6 = *(_QWORD *)a1 + 24 * v2 - 1;
      v7 = 24 * a2 - 8 * v5;
      v8 = (char *)v6;
      do
      {
        v9 = *v8;
        v8 -= 24;
        if (v9 < 0)
          operator delete(*(void **)(v6 - 23));
        v6 = (uint64_t)v8;
        v7 += 24;
      }
      while (v7);
    }
    *(_DWORD *)(a1 + 8) = a2;
  }
}

uint64_t sub_1C60EB860(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char **v4;
  char *v5;
  const char *v6;
  __int16 v7;
  unint64_t v8[2];

  v2 = *(_QWORD *)(result + 352);
  v1 = *(_QWORD *)(result + 360);
  if (v1 != v2)
  {
    v3 = result;
    do
    {
      v4 = *(char ***)(v1 - 8);
      v1 -= 8;
      v5 = *v4;
      v6 = "while in macro instantiation";
      v7 = 259;
      v8[0] = 0;
      v8[1] = 0;
      result = llvm::SourceMgr::PrintMessage(*(llvm **)(v3 + 240), v5, 3, (llvm::Twine *)&v6, v8, 1, 0, 0, 1u);
    }
    while (v1 != v2);
  }
  return result;
}

uint64_t sub_1C60EB8F0(uint64_t a1, unsigned int a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  int v17;
  uint64_t v18;
  int v19;

  v8 = *(_QWORD *)(a1 + 136);
  v19 = 0;
  v9 = sub_1C60EBC98(*(_QWORD *)(a1 + 232), *(_BYTE *)(a1 + 804), **(_DWORD **)(a1 + 48), &v19);
  if (v9 < a2)
    return 0;
  v10 = v9;
  while (1)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
    v18 = 0;
    if ((*(unsigned int (**)(_QWORD, uint64_t *, uint64_t))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), &v18, a4)|| v10 < sub_1C60EBC98(*(_QWORD *)(a1 + 232), *(_BYTE *)(a1 + 804), **(_DWORD **)(a1 + 48), &v17)&& sub_1C60EB8F0(a1, v10 + 1, &v18, a4))
    {
      break;
    }
    v11 = v19;
    v12 = *a3;
    v13 = v18;
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
    v15 = sub_1C484358C(v14 + 192, 32, 3);
    *(_BYTE *)v15 = 0;
    *(_DWORD *)(v15 + 1) = v11 & 0xFFFFFF | (*(unsigned __int8 *)(v15 + 4) << 24);
    *(_QWORD *)(v15 + 8) = v8;
    *(_QWORD *)(v15 + 16) = v12;
    *(_QWORD *)(v15 + 24) = v13;
    *a3 = v15;
    v19 = 0;
    v10 = sub_1C60EBC98(*(_QWORD *)(a1 + 232), *(_BYTE *)(a1 + 804), **(_DWORD **)(a1 + 48), &v19);
    if (v10 < a2)
      return 0;
  }
  return 1;
}

uint64_t sub_1C60EBA48(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 152))(*(_QWORD *)(a1 + 8));
  if (!result)
    __asm { BR              X10 }
  return result;
}

void sub_1C60EBAB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  unint64_t v7;

  v2 = sub_1C60EBA48(v0, *(_QWORD *)(v1 + 16));
  v3 = sub_1C60EBA48(v0, *(_QWORD *)(v1 + 24));
  if (v2 | v3)
  {
    v4 = v3;
    if (!v2)
      v2 = *(_QWORD *)(v1 + 16);
    if (!v3)
      v4 = *(_QWORD *)(v1 + 24);
    v5 = *(_DWORD *)(v1 + 1);
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v0 + 48))(v0);
    v7 = sub_1C484358C(v6 + 192, 32, 3);
    *(_BYTE *)v7 = 0;
    *(_DWORD *)(v7 + 1) = v5 & 0xFFFFFF | (*(unsigned __int8 *)(v7 + 4) << 24);
    *(_QWORD *)(v7 + 8) = 0;
    *(_QWORD *)(v7 + 16) = v2;
    *(_QWORD *)(v7 + 24) = v4;
  }
  JUMPOUT(0x1C60EBA80);
}

uint64_t sub_1C60EBC98(uint64_t a1, char a2, int a3, int *a4)
{
  int v4;
  uint64_t result;
  uint64_t v6;
  int v7;

  v4 = *(unsigned __int8 *)(a1 + 472);
  if (a2)
  {
    result = 0;
    v6 = 1;
    v7 = 6;
    switch(a3)
    {
      case 12:
        v7 = 0;
        v6 = 5;
        goto LABEL_44;
      case 13:
        v6 = 5;
        goto LABEL_25;
      case 15:
        goto LABEL_6;
      case 23:
        goto LABEL_7;
      case 28:
        goto LABEL_8;
      case 29:
        v6 = 2;
        goto LABEL_27;
      case 30:
        goto LABEL_29;
      case 31:
        v6 = 2;
        goto LABEL_31;
      case 32:
        v6 = 2;
        goto LABEL_33;
      case 33:
        goto LABEL_44;
      case 35:
      case 41:
        goto LABEL_5;
      case 36:
        goto LABEL_9;
      case 38:
        goto LABEL_10;
      case 39:
        goto LABEL_11;
      case 40:
        v6 = 4;
        goto LABEL_38;
      case 42:
        goto LABEL_12;
      case 43:
        goto LABEL_13;
      case 44:
        if (v4)
          v7 = 17;
        else
          v7 = 16;
        goto LABEL_23;
      default:
        return result;
    }
  }
  else
  {
    result = 0;
    v6 = 2;
    v7 = 6;
    switch(a3)
    {
      case 12:
        v7 = 0;
LABEL_23:
        v6 = 4;
        goto LABEL_44;
      case 13:
        v6 = 4;
LABEL_25:
        v7 = 18;
        goto LABEL_44;
      case 15:
LABEL_6:
        v6 = 6;
        v7 = 2;
        goto LABEL_44;
      case 23:
LABEL_7:
        v6 = 6;
        v7 = 11;
        goto LABEL_44;
      case 28:
LABEL_8:
        v7 = 3;
        v6 = 3;
        goto LABEL_44;
      case 29:
        v6 = 5;
LABEL_27:
        v7 = 13;
        goto LABEL_44;
      case 30:
        v6 = 1;
LABEL_29:
        v7 = 7;
        goto LABEL_44;
      case 31:
        v6 = 5;
LABEL_31:
        v7 = 19;
        goto LABEL_44;
      case 32:
        v6 = 5;
LABEL_33:
        v7 = 1;
        goto LABEL_44;
      case 33:
        goto LABEL_44;
      case 34:
        if (*(_QWORD *)(a1 + 56) == 1 && **(_BYTE **)(a1 + 48) == 64)
        {
          result = 0;
        }
        else
        {
          v6 = 5;
          v7 = 14;
LABEL_44:
          *a4 = v7;
          result = v6;
        }
        break;
      case 35:
      case 41:
LABEL_5:
        v6 = 3;
        v7 = 12;
        goto LABEL_44;
      case 36:
LABEL_9:
        v6 = 6;
        v7 = 10;
        goto LABEL_44;
      case 38:
LABEL_10:
        v6 = 3;
        v7 = 8;
        goto LABEL_44;
      case 39:
LABEL_11:
        v6 = 3;
        v7 = 9;
        goto LABEL_44;
      case 40:
        v6 = 6;
LABEL_38:
        v7 = 15;
        goto LABEL_44;
      case 42:
LABEL_12:
        v6 = 3;
        v7 = 4;
        goto LABEL_44;
      case 43:
LABEL_13:
        v6 = 3;
        v7 = 5;
        goto LABEL_44;
      case 44:
        if (v4)
          v7 = 17;
        else
          v7 = 16;
        v6 = 6;
        goto LABEL_44;
      default:
        return result;
    }
  }
  return result;
}

BOOL sub_1C60EBE58(llvm::MCAsmParser *a1, uint64_t a2, _QWORD *a3)
{
  _QWORD v6[4];
  __int16 v7;

  v6[0] = 0;
  if (((*(uint64_t (**)(llvm::MCAsmParser *, uint64_t, _QWORD *))(*(_QWORD *)a1 + 232))(a1, a2, v6) & 1) != 0)
    return 1;
  *a3 = *(_QWORD *)(*((_QWORD *)a1 + 6) + 8) + *(_QWORD *)(*((_QWORD *)a1 + 6) + 16);
  v6[0] = "expected ')'";
  v7 = 259;
  return llvm::MCAsmParser::parseToken(a1, 18, (llvm::Twine *)v6);
}

void sub_1C60EBED8()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C60EBEEC(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 8) = a2;
  (*(void (**)(uint64_t, const char *, uint64_t, uint64_t, BOOL (*)(uint64_t)))(*(_QWORD *)a2 + 16))(a2, ".text", 5, a1, sub_1C60EC2F4);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, BOOL (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                               + 16))(*(_QWORD *)(a1 + 8), ".data", 5, a1, sub_1C60EC464);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, BOOL (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                               + 16))(*(_QWORD *)(a1 + 8), ".bss", 4, a1, sub_1C60EC490);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                                  + 16))(*(_QWORD *)(a1 + 8), ".section", 8, a1, sub_1C60EC4BC);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                                  + 16))(*(_QWORD *)(a1 + 8), ".def", 4, a1, sub_1C60ECCAC);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                                  + 16))(*(_QWORD *)(a1 + 8), ".scl", 4, a1, sub_1C60ECD9C);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                                  + 16))(*(_QWORD *)(a1 + 8), ".type", 5, a1, sub_1C60ECE7C);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                                  + 16))(*(_QWORD *)(a1 + 8), ".endef", 6, a1, sub_1C60ECF5C);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                                  + 16))(*(_QWORD *)(a1 + 8), ".secrel32", 9, a1, sub_1C60ECFA8);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                                  + 16))(*(_QWORD *)(a1 + 8), ".symidx", 7, a1, sub_1C60ED14C);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                                  + 16))(*(_QWORD *)(a1 + 8), ".safeseh", 8, a1, sub_1C60ED260);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                                  + 16))(*(_QWORD *)(a1 + 8), ".secidx", 7, a1, sub_1C60ED374);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t)))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), ".linkonce", 9, a1, sub_1C60ED488);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                                  + 16))(*(_QWORD *)(a1 + 8), ".rva", 4, a1, sub_1C60ED60C);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t)))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), ".weak", 5, a1, sub_1C60ED800);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)()))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), ".cg_profile", 11, a1, llvm::MCAsmParserExtension::ParseDirectiveCGProfile);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t)))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), ".seh_proc", 9, a1, sub_1C60ED9DC);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t)))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), ".seh_endproc", 12, a1, sub_1C60EDAF8);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t)))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), ".seh_endfunclet", 15, a1, sub_1C60EDB4C);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t)))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), ".seh_startchained", 17, a1, sub_1C60EDBA0);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t)))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), ".seh_endchained", 15, a1, sub_1C60EDBF4);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t)))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), ".seh_handler", 12, a1, sub_1C60EDC48);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                                  + 16))(*(_QWORD *)(a1 + 8), ".seh_handlerdata", 16, a1, sub_1C60EDF7C);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t)))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), ".seh_stackalloc", 15, a1, sub_1C60EDFCC);
  return (*(uint64_t (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t)))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), ".seh_endprologue", 16, a1, sub_1C60EE0B4);
}

BOOL sub_1C60EC2F4(uint64_t a1)
{
  return sub_1C60EC320(a1, ".text", 5uLL, 1610612768, 2, "", 0, 0);
}

BOOL sub_1C60EC320(uint64_t a1, const void *a2, size_t a3, int a4, int a5, _QWORD *a6, void *a7, unsigned int a8)
{
  int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t COFFSection;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  __int16 v24;

  v16 = **(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8);
  if (v16 == 9)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v17 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    v18 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    COFFSection = llvm::MCContext::getCOFFSection(v18, a2, a3, a4, a5, a6, a7, a8, 0xFFFFFFFF, 0);
    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v17 + 168))(v17, COFFSection, 0);
  }
  else
  {
    v23 = "unexpected token in section switching directive";
    v24 = 259;
    v21 = *(_QWORD *)(a1 + 8);
    v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v21 + 40))(v21);
    llvm::MCAsmParser::Error(v21, *(_QWORD *)(v22 + 96), (uint64_t)&v23, 0, 0);
  }
  return v16 != 9;
}

BOOL sub_1C60EC464(uint64_t a1)
{
  return sub_1C60EC320(a1, ".data", 5uLL, -1073741760, 19, "", 0, 0);
}

BOOL sub_1C60EC490(uint64_t a1)
{
  return sub_1C60EC320(a1, ".bss", 4uLL, -1073741696, 15, "", 0, 0);
}

uint64_t sub_1C60EC4BC(uint64_t a1)
{
  uint64_t v2;
  unsigned __int16 *v3;
  size_t v4;
  unsigned __int16 *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char v18;
  unsigned int v19;
  _BYTE *v20;
  int v21;
  int v22;
  unsigned int v23;
  int v24;
  int v25;
  int v26;
  unsigned int v27;
  BOOL v28;
  unsigned int v29;
  int v30;
  int v31;
  int v32;
  const char *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  void *v39;
  unsigned __int8 v40;
  const char *v41;
  __int16 v42;

  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 2
    && **(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 3)
  {
    goto LABEL_87;
  }
  v2 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8);
  if (*(_DWORD *)v2 == 2)
  {
    v3 = *(unsigned __int16 **)(v2 + 8);
    v4 = *(_QWORD *)(v2 + 16);
  }
  else
  {
    v7 = v2 + 8;
    v5 = *(unsigned __int16 **)(v2 + 8);
    v6 = *(_QWORD *)(v7 + 8);
    v8 = v6 != 0;
    if (v6)
      v3 = (unsigned __int16 *)((char *)v5 + 1);
    else
      v3 = v5;
    if (v8 <= v6 - 1)
      v9 = v6 - 1;
    else
      v9 = v6 != 0;
    if (v6 < v9)
      v9 = v6;
    v4 = v9 - v8;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 25)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 3)
    {
      v35 = "expected string in directive";
      goto LABEL_94;
    }
    v11 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8);
    v13 = *(_QWORD *)(v11 + 8);
    v12 = *(_QWORD *)(v11 + 16);
    v14 = v12 - 1;
    v15 = v12 != 0;
    if (v15 > v12 - 1)
      v14 = v12 != 0;
    if (v12 >= v14)
      v16 = v14;
    else
      v16 = v12;
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v17 = v16 - v15;
    if (v16 != v15)
    {
      v18 = 0;
      v19 = 0;
      v20 = (_BYTE *)(v13 + v15);
      v10 = 6;
      do
      {
        v21 = (char)*v20;
        if (v21 <= 99)
        {
          if (v21 == 68)
          {
            v19 |= 0x100u;
          }
          else if (v21 != 97)
          {
            if (v21 != 98)
            {
LABEL_93:
              v35 = "unknown flag";
              goto LABEL_94;
            }
            if ((v19 & 8) != 0)
            {
LABEL_92:
              v35 = "conflicting section flags 'b' and 'd'.";
              goto LABEL_94;
            }
            v19 = v19 & 0xFFFFFFFA | 1;
          }
        }
        else
        {
          switch(*v20)
          {
            case 'n':
              v19 = v19 & 0xFFFFFFDB | 0x20;
              break;
            case 'o':
            case 'p':
            case 'q':
            case 't':
            case 'u':
            case 'v':
              goto LABEL_93;
            case 'r':
              v18 = 0;
              if ((v19 & 2) != 0)
                v22 = 128;
              else
                v22 = 136;
              v19 |= (v22 | (v19 >> 3) & 4) ^ 4;
              break;
            case 's':
              v23 = v19 & 0xFFFFFF67;
              if ((v19 & 0x20) != 0)
                v24 = 24;
              else
                v24 = 28;
              v19 = v24 | v23;
              break;
            case 'w':
              v19 &= ~0x80u;
              v18 = 1;
              break;
            case 'x':
              if ((v19 & 0x20) != 0)
                v25 = 2;
              else
                v25 = 6;
              v19 |= v25;
              if ((v18 & 1) == 0)
                v19 |= 0x80u;
              break;
            case 'y':
              v19 |= 0xC0u;
              break;
            default:
              if (v21 != 100)
                goto LABEL_93;
              if ((v19 & 1) != 0)
                goto LABEL_92;
              v19 = v19 & 0xFFFFFF7F | ~(v19 >> 3) & 4 | 8;
              break;
          }
        }
        ++v20;
        --v17;
      }
      while (v17);
      if (v19)
        goto LABEL_53;
    }
    v19 = 8;
LABEL_53:
    if ((v19 & 5) == 1)
      v26 = ((int)(v19 << 30) >> 31) & 0x20000020 | (((v19 >> 3) & 1) << 6) | 0x80;
    else
      v26 = ((int)(v19 << 30) >> 31) & 0x20000020 | (((v19 >> 3) & 1) << 6);
    v27 = v26 & 0xFFFFF7FF | (((v19 >> 5) & 1) << 11);
    if ((v19 & 0x100) != 0 || v4 >= 6 && (*(_DWORD *)v3 == 1650811950 ? (v28 = v3[2] == 26485) : (v28 = 0), v28))
      v27 |= 0x2000000u;
    v29 = v27 | (v19 << 24) & 0xD0000000 ^ 0xC0000000;
  }
  else
  {
    v29 = -1073741760;
  }
  v40 = 0;
  v38 = 0;
  v39 = 0;
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), v10)+ 8) == 25)
  {
    v40 = 2;
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 2)
    {
      v35 = "expected comdat type such as 'discard' or 'largest' after protection bits";
      goto LABEL_94;
    }
    if ((sub_1C60EC9B4(a1, &v40) & 1) != 0)
      return 1;
    if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 25)
    {
      v35 = "expected comma in directive";
      goto LABEL_94;
    }
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    if (!(*(unsigned int (**)(_QWORD, _QWORD **))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v38))
    {
      v29 |= 0x1000u;
      goto LABEL_72;
    }
LABEL_87:
    v35 = "expected identifier in directive";
LABEL_94:
    v41 = v35;
    v42 = 259;
    v36 = *(_QWORD *)(a1 + 8);
    v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v36 + 40))(v36);
    llvm::MCAsmParser::Error(v36, *(_QWORD *)(v37 + 96), (uint64_t)&v41, 0, 0);
    return 1;
  }
LABEL_72:
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 9)
  {
    v35 = "unexpected token in directive";
    goto LABEL_94;
  }
  if (v29 >> 30 == 1)
    v30 = 4;
  else
    v30 = 19;
  if ((v29 & 0x20000000) != 0)
    v31 = 2;
  else
    v31 = v30;
  if ((v31 & 0xFFFFFFFE) == 2)
  {
    v32 = *(_DWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8)) + 48);
    if (v32 == 39 || v32 == 1)
      v29 |= 0x20000u;
  }
  sub_1C60EC320(a1, v3, v4, v29, v31, v38, v39, v40);
  return 0;
}

uint64_t sub_1C60EC9B4(uint64_t a1, _BYTE *a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  BOOL v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  unint64_t v14;
  BOOL v15;
  _BOOL4 v16;
  int v17;
  int v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  char v24;
  uint64_t result;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[4];
  __int16 v29;
  _QWORD v30[4];
  __int16 v31;

  v4 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8);
  if (*(_DWORD *)v4 == 2)
  {
    v5 = *(_QWORD *)(v4 + 8);
    v6 = *(_QWORD *)(v4 + 16);
  }
  else
  {
    v5 = *(_QWORD *)(v4 + 8);
    v7 = *(_QWORD *)(v4 + 16);
    v8 = v7 - 1;
    v9 = v7 != 0;
    if (v7)
      ++v5;
    if (v9 > v8)
      v8 = v7 != 0;
    if (v7 < v8)
      v8 = v7;
    v6 = v8 - v9;
  }
  switch(v6)
  {
    case 6uLL:
      v10 = (*(_DWORD *)v5 ^ 0x6577656E | *(unsigned __int16 *)(v5 + 4) ^ 0x7473) == 0;
      v11 = v10;
      LOBYTE(v12) = 7;
      goto LABEL_17;
    case 7uLL:
      v13 = *(_DWORD *)v5 ^ 0x63736964 | *(_DWORD *)(v5 + 3) ^ 0x64726163;
      v11 = v13 == 0;
      if (v13)
        LOBYTE(v12) = 0;
      else
        LOBYTE(v12) = 2;
      if (v13)
      {
        v10 = (*(_DWORD *)v5 ^ 0x6772616C | *(_DWORD *)(v5 + 3) ^ 0x74736567) == 0;
        v11 = v10;
        LOBYTE(v12) = 6;
LABEL_17:
        if (!v10)
          LOBYTE(v12) = 0;
      }
      goto LABEL_47;
    case 8uLL:
      v14 = bswap64(*(_QWORD *)v5);
      v15 = v14 >= 0x6F6E655F6F6E6C79;
      v16 = v14 > 0x6F6E655F6F6E6C79;
      v17 = !v15;
      v18 = v16 - v17;
      v12 = 257;
      goto LABEL_44;
    case 9uLL:
      v19 = bswap64(*(_QWORD *)v5);
      if (v19 == 0x73616D655F73697ALL)
      {
        v18 = *(unsigned __int8 *)(v5 + 8) - 101;
      }
      else if (v19 < 0x73616D655F73697ALL)
      {
        v18 = -1;
      }
      else
      {
        v18 = 1;
      }
      v12 = 259;
      goto LABEL_44;
    case 0xBuLL:
      v20 = 0x6173736F63696174;
      v21 = bswap64(*(_QWORD *)v5);
      if (v21 == 0x6173736F63696174
        && (v20 = 0x6F63696174697665, v21 = bswap64(*(_QWORD *)(v5 + 3)), v21 == 0x6F63696174697665))
      {
        v18 = 0;
      }
      else if (v21 < v20)
      {
        v18 = -1;
      }
      else
      {
        v18 = 1;
      }
      v12 = 261;
      goto LABEL_44;
    case 0xDuLL:
      v22 = 0x73616D655F636F6ELL;
      v23 = bswap64(*(_QWORD *)v5);
      if (v23 == 0x73616D655F636F6ELL
        && (v22 = 0x636F6E74656E7473, v23 = bswap64(*(_QWORD *)(v5 + 5)), v23 == 0x636F6E74656E7473))
      {
        v18 = 0;
      }
      else if (v23 < v22)
      {
        v18 = -1;
      }
      else
      {
        v18 = 1;
      }
      v12 = 260;
LABEL_44:
      if (v18)
        v12 = 0;
      v11 = v12 >> 8;
LABEL_47:
      if (v11)
        v24 = v12;
      else
        v24 = 0;
      *a2 = v24;
      if (!v24)
        goto LABEL_53;
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
      result = 0;
      break;
    default:
      *a2 = 0;
LABEL_53:
      v29 = 1283;
      v28[0] = "unrecognized COMDAT type '";
      v28[2] = v5;
      v28[3] = v6;
      v30[0] = v28;
      v30[2] = "'";
      v31 = 770;
      v26 = *(_QWORD *)(a1 + 8);
      v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 40))(v26);
      llvm::MCAsmParser::Error(v26, *(_QWORD *)(v27 + 96), (uint64_t)v30, 0, 0);
      result = 1;
      break;
  }
  return result;
}

uint64_t sub_1C60ECCAC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t Symbol;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[4];
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v11 = 0;
  v12 = 0;
  v2 = (*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v11);
  if ((_DWORD)v2)
  {
    v9[0] = "expected identifier in directive";
    v10 = 259;
    v7 = *(_QWORD *)(a1 + 8);
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
    llvm::MCAsmParser::Error(v7, *(_QWORD *)(v8 + 96), (uint64_t)v9, 0, 0);
  }
  else
  {
    v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    v10 = 261;
    v9[0] = v11;
    v9[1] = v12;
    Symbol = llvm::MCContext::getOrCreateSymbol(v3, (uint64_t)v9);
    v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v5 + 320))(v5, Symbol);
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  }
  return v2;
}

uint64_t sub_1C60ECD9C(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  __int16 v7;
  uint64_t v8;

  v8 = 0;
  if (((*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 256))(*(_QWORD *)(a1 + 8), &v8) & 1) != 0)
    return 1;
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 9)
  {
    v6 = "unexpected token in directive";
    v7 = 259;
    v4 = *(_QWORD *)(a1 + 8);
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    llvm::MCAsmParser::Error(v4, *(_QWORD *)(v5 + 96), (uint64_t)&v6, 0, 0);
    return 1;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 328))(v3, v8);
  return 0;
}

uint64_t sub_1C60ECE7C(uint64_t a1)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  __int16 v7;
  uint64_t v8;

  v8 = 0;
  if (((*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 256))(*(_QWORD *)(a1 + 8), &v8) & 1) != 0)
    return 1;
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 9)
  {
    v6 = "unexpected token in directive";
    v7 = 259;
    v4 = *(_QWORD *)(a1 + 8);
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    llvm::MCAsmParser::Error(v4, *(_QWORD *)(v5 + 96), (uint64_t)&v6, 0, 0);
    return 1;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v3 + 336))(v3, v8);
  return 0;
}

uint64_t sub_1C60ECF5C(uint64_t a1)
{
  uint64_t v2;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  (*(void (**)(uint64_t))(*(_QWORD *)v2 + 344))(v2);
  return 0;
}

uint64_t sub_1C60ECFA8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t Symbol;
  uint64_t v5;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD v11[4];
  __int16 v12;
  uint64_t v13;
  uint64_t v14;

  v13 = 0;
  v14 = 0;
  if ((*(unsigned int (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v13))
  {
    v7 = "expected identifier in directive";
LABEL_9:
    v11[0] = v7;
    v12 = 259;
    v8 = *(_QWORD *)(a1 + 8);
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
    llvm::MCAsmParser::Error(v8, *(_QWORD *)(v9 + 96), (uint64_t)v11, 0, 0);
    return 1;
  }
  v10 = 0;
  v2 = 0;
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 12)
  {
    v2 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 96);
    if (((*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 256))(*(_QWORD *)(a1 + 8), &v10) & 1) != 0)
      return 1;
  }
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 9)
  {
    v7 = "unexpected token in directive";
    goto LABEL_9;
  }
  if (HIDWORD(v10))
  {
    v11[0] = "invalid '.secrel32' directive offset, can't be less than zero or greater than std::numeric_limits<uint32_t>::max()";
    v12 = 259;
    return llvm::MCAsmParser::Error(*(_QWORD *)(a1 + 8), v2, (uint64_t)v11, 0, 0);
  }
  else
  {
    v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    v12 = 261;
    v11[0] = v13;
    v11[1] = v14;
    Symbol = llvm::MCContext::getOrCreateSymbol(v3, (uint64_t)v11);
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v5 + 376))(v5, Symbol, v10);
    return 0;
  }
}

uint64_t sub_1C60ED14C(uint64_t a1)
{
  uint64_t v2;
  unint64_t Symbol;
  uint64_t v4;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[4];
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v11 = 0;
  v12 = 0;
  if ((*(unsigned int (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v11))
  {
    v6 = "expected identifier in directive";
LABEL_7:
    v9[0] = v6;
    v10 = 259;
    v7 = *(_QWORD *)(a1 + 8);
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
    llvm::MCAsmParser::Error(v7, *(_QWORD *)(v8 + 96), (uint64_t)v9, 0, 0);
    return 1;
  }
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 9)
  {
    v6 = "unexpected token in directive";
    goto LABEL_7;
  }
  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
  v10 = 261;
  v9[0] = v11;
  v9[1] = v12;
  Symbol = llvm::MCContext::getOrCreateSymbol(v2, (uint64_t)v9);
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v4 + 360))(v4, Symbol);
  return 0;
}

uint64_t sub_1C60ED260(uint64_t a1)
{
  uint64_t v2;
  unint64_t Symbol;
  uint64_t v4;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[4];
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v11 = 0;
  v12 = 0;
  if ((*(unsigned int (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v11))
  {
    v6 = "expected identifier in directive";
LABEL_7:
    v9[0] = v6;
    v10 = 259;
    v7 = *(_QWORD *)(a1 + 8);
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
    llvm::MCAsmParser::Error(v7, *(_QWORD *)(v8 + 96), (uint64_t)v9, 0, 0);
    return 1;
  }
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 9)
  {
    v6 = "unexpected token in directive";
    goto LABEL_7;
  }
  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
  v10 = 261;
  v9[0] = v11;
  v9[1] = v12;
  Symbol = llvm::MCContext::getOrCreateSymbol(v2, (uint64_t)v9);
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v4 + 352))(v4, Symbol);
  return 0;
}

uint64_t sub_1C60ED374(uint64_t a1)
{
  uint64_t v2;
  unint64_t Symbol;
  uint64_t v4;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[4];
  __int16 v10;
  uint64_t v11;
  uint64_t v12;

  v11 = 0;
  v12 = 0;
  if ((*(unsigned int (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v11))
  {
    v6 = "expected identifier in directive";
LABEL_7:
    v9[0] = v6;
    v10 = 259;
    v7 = *(_QWORD *)(a1 + 8);
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
    llvm::MCAsmParser::Error(v7, *(_QWORD *)(v8 + 96), (uint64_t)v9, 0, 0);
    return 1;
  }
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 9)
  {
    v6 = "unexpected token in directive";
    goto LABEL_7;
  }
  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
  v10 = 261;
  v9[0] = v11;
  v9[1] = v12;
  Symbol = llvm::MCContext::getOrCreateSymbol(v2, (uint64_t)v9);
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v4 + 368))(v4, Symbol);
  return 0;
}

uint64_t sub_1C60ED488(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  __int128 v15;
  __int16 v16;
  _QWORD v17[4];
  __int16 v18;
  unsigned __int8 v19;

  v19 = 2;
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 2
    && (sub_1C60EC9B4(a1, &v19) & 1) != 0)
  {
    return 1;
  }
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  v8 = *(unsigned int *)(v7 + 120);
  if ((_DWORD)v8)
    v9 = *(_QWORD *)(*(_QWORD *)(v7 + 112) + 32 * v8 - 32);
  else
    v9 = 0;
  if (v19 == 5)
  {
    v17[0] = "cannot make section associative with .linkonce";
    v11 = 259;
LABEL_14:
    v18 = v11;
    return llvm::MCAsmParser::Error(*(_QWORD *)(a1 + 8), a4, (uint64_t)v17, 0, 0);
  }
  v10 = *(_DWORD *)(v9 + 224);
  if ((v10 & 0x1000) != 0)
  {
    v14 = "section '";
    v15 = *(_OWORD *)(v9 + 200);
    v16 = 1283;
    v17[0] = &v14;
    v17[2] = "' is already linkonce";
    v11 = 770;
    goto LABEL_14;
  }
  *(_DWORD *)(v9 + 240) = v19;
  *(_DWORD *)(v9 + 224) = v10 | 0x1000;
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 9)
  {
    v17[0] = "unexpected token in directive";
    v18 = 259;
    v12 = *(_QWORD *)(a1 + 8);
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
    llvm::MCAsmParser::Error(v12, *(_QWORD *)(v13 + 96), (uint64_t)v17, 0, 0);
    return 1;
  }
  return 0;
}

uint64_t sub_1C60ED60C(uint64_t a1)
{
  uint64_t result;
  const char *v3;
  __int16 v4;
  uint64_t v5;

  v5 = a1;
  result = llvm::MCAsmParser::parseMany(*(llvm::MCAsmParser **)(a1 + 8), (unsigned int (*)(uint64_t))sub_1C60ED674, (uint64_t)&v5, 1);
  if ((_DWORD)result)
  {
    v3 = " in directive";
    v4 = 259;
    return llvm::MCAsmParser::addErrorSuffix(*(llvm::MCAsmParser **)(a1 + 8), (const llvm::Twine *)&v3);
  }
  return result;
}

uint64_t sub_1C60ED674(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v4;
  unint64_t Symbol;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[4];
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v1 = *a1;
  v12 = 0;
  v13 = 0;
  if ((*(unsigned int (**)(_QWORD, uint64_t *))(**(_QWORD **)(v1 + 8) + 192))(*(_QWORD *)(v1 + 8), &v12))
  {
    v10[0] = "expected identifier in directive";
    v11 = 259;
    v7 = *(_QWORD *)(v1 + 8);
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
    llvm::MCAsmParser::Error(v7, *(_QWORD *)(v8 + 96), (uint64_t)v10, 0, 0);
    return 1;
  }
  v9 = 0;
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 8) + 40))(*(_QWORD *)(v1 + 8)) + 8) != 12
    && **(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 8) + 40))(*(_QWORD *)(v1 + 8)) + 8) != 13)
  {
    goto LABEL_7;
  }
  v2 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 8) + 40))(*(_QWORD *)(v1 + 8)) + 96);
  if (((*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(v1 + 8) + 256))(*(_QWORD *)(v1 + 8), &v9) & 1) != 0)
    return 1;
  if (v9 != (int)v9)
  {
    v10[0] = "invalid '.rva' directive offset, can't be less than -2147483648 or greater than 2147483647";
    v11 = 259;
    return llvm::MCAsmParser::Error(*(_QWORD *)(v1 + 8), v2, (uint64_t)v10, 0, 0);
  }
  else
  {
LABEL_7:
    v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 8) + 48))(*(_QWORD *)(v1 + 8));
    v11 = 261;
    v10[0] = v12;
    v10[1] = v13;
    Symbol = llvm::MCContext::getOrCreateSymbol(v4, (uint64_t)v10);
    v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v1 + 8) + 56))(*(_QWORD *)(v1 + 8));
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v6 + 384))(v6, Symbol, v9);
    return 0;
  }
}

uint64_t sub_1C60ED800(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v7;
  unint64_t Symbol;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[4];
  __int16 v14;
  uint64_t v15;
  uint64_t i;

  if (a3 == 5)
  {
    v4 = 0x100000017;
    if (*(_DWORD *)a2 ^ 0x6165772E | *(unsigned __int8 *)(a2 + 4) ^ 0x6B)
      v4 = 0;
  }
  else
  {
    v4 = 0;
  }
  if (v4 <= 0x100000000)
    v5 = 0x100000000;
  else
    v5 = v4;
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
  {
LABEL_10:
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    return 0;
  }
  v15 = 0;
  for (i = 0;
        ((*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v15) & 1) == 0;
        i = 0)
  {
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    v14 = 261;
    v13[0] = v15;
    v13[1] = i;
    Symbol = llvm::MCContext::getOrCreateSymbol(v7, (uint64_t)v13);
    v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v9 + 304))(v9, Symbol, v5);
    if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
      goto LABEL_10;
    if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 25)
    {
      v10 = "unexpected token in directive";
      goto LABEL_18;
    }
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v15 = 0;
  }
  v10 = "expected identifier in directive";
LABEL_18:
  v13[0] = v10;
  v14 = 259;
  v11 = *(_QWORD *)(a1 + 8);
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
  llvm::MCAsmParser::Error(v11, *(_QWORD *)(v12 + 96), (uint64_t)v13, 0, 0);
  return 1;
}

uint64_t sub_1C60ED9DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unint64_t Symbol;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[4];
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v14 = 0;
  v15 = 0;
  if (((*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v14) & 1) != 0)
    return 1;
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 9)
  {
    v12[0] = "unexpected token in directive";
    v13 = 259;
    v10 = *(_QWORD *)(a1 + 8);
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
    llvm::MCAsmParser::Error(v10, *(_QWORD *)(v11 + 96), (uint64_t)v12, 0, 0);
    return 1;
  }
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
  v13 = 261;
  v12[0] = v14;
  v12[1] = v15;
  Symbol = llvm::MCContext::getOrCreateSymbol(v7, (uint64_t)v12);
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v9 + 1032))(v9, Symbol, a4);
  return 0;
}

uint64_t sub_1C60EDAF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 1040))(v6, a4);
  return 0;
}

uint64_t sub_1C60EDB4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 1048))(v6, a4);
  return 0;
}

uint64_t sub_1C60EDBA0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 1056))(v6, a4);
  return 0;
}

uint64_t sub_1C60EDBF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 1064))(v6, a4);
  return 0;
}

uint64_t sub_1C60EDC48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unint64_t Symbol;
  uint64_t v9;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  _QWORD v14[4];
  __int16 v15;
  uint64_t v16;
  uint64_t v17;

  v16 = 0;
  v17 = 0;
  if (((*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v16) & 1) != 0)
    return 1;
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 25)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v13 = 0;
    if ((sub_1C60EDE04(a1, (_BYTE *)&v13 + 1, &v13) & 1) != 0)
      return 1;
    if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 25)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
      if ((sub_1C60EDE04(a1, (_BYTE *)&v13 + 1, &v13) & 1) != 0)
        return 1;
    }
    if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
    {
      v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
      v15 = 261;
      v14[0] = v16;
      v14[1] = v17;
      Symbol = llvm::MCContext::getOrCreateSymbol(v7, (uint64_t)v14);
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
      v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
      (*(void (**)(uint64_t, unint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v9 + 1128))(v9, Symbol, HIBYTE(v13), v13, a4);
      return 0;
    }
    v10 = "unexpected token in directive";
  }
  else
  {
    v10 = "you must specify one or both of @unwind or @except";
  }
  v14[0] = v10;
  v15 = 259;
  v11 = *(_QWORD *)(a1 + 8);
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
  llvm::MCAsmParser::Error(v11, *(_QWORD *)(v12 + 96), (uint64_t)v14, 0, 0);
  return 1;
}

uint64_t sub_1C60EDE04(uint64_t a1, _BYTE *a2, _BYTE *a3)
{
  uint64_t v6;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[4];
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v14 = 0;
  v15 = 0;
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 45)
  {
    v6 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 96);
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    if (!(*(unsigned int (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v14)
      && v15 == 6)
    {
      if (*(_DWORD *)v14 == 1769434741 && *(_WORD *)(v14 + 4) == 25710)
      {
        result = 0;
        *a2 = 1;
        return result;
      }
      if (*(_DWORD *)v14 == 1701017701 && *(_WORD *)(v14 + 4) == 29808)
      {
        result = 0;
        *a3 = 1;
        return result;
      }
    }
    v12[0] = "expected @unwind or @except";
    v13 = 259;
    return llvm::MCAsmParser::Error(*(_QWORD *)(a1 + 8), v6, (uint64_t)v12, 0, 0);
  }
  else
  {
    v12[0] = "a handler attribute must begin with '@'";
    v13 = 259;
    v10 = *(_QWORD *)(a1 + 8);
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
    llvm::MCAsmParser::Error(v10, *(_QWORD *)(v11 + 96), (uint64_t)v12, 0, 0);
    return 1;
  }
}

uint64_t sub_1C60EDF7C(uint64_t a1)
{
  uint64_t v2;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 1136))(v2, 0);
  return 0;
}

uint64_t sub_1C60EDFCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  __int16 v11;
  uint64_t v12;

  v12 = 0;
  if (((*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 256))(*(_QWORD *)(a1 + 8), &v12) & 1) != 0)
    return 1;
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 9)
  {
    v10 = "unexpected token in directive";
    v11 = 259;
    v8 = *(_QWORD *)(a1 + 8);
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
    llvm::MCAsmParser::Error(v8, *(_QWORD *)(v9 + 96), (uint64_t)&v10, 0, 0);
    return 1;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v7 + 1088))(v7, v12, a4);
  return 0;
}

uint64_t sub_1C60EE0B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 1120))(v6, a4);
  return 0;
}

uint64_t llvm::createCOFFMasmParser(llvm *this)
{
  uint64_t result;

  result = operator new();
  *(_BYTE *)(result + 16) = 0;
  *(_QWORD *)result = &off_1E81AE0F8;
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)(result + 32) = 0;
  return result;
}

void sub_1C60EE148()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C60EE15C(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 8) = a2;
  (*(void (**)(uint64_t, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t)))(*(_QWORD *)a2 + 16))(a2, ".allocstack", 11, a1, sub_1C60EE708);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t)))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), ".endprolog", 10, a1, sub_1C60EE7DC);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                                  + 16))(*(_QWORD *)(a1 + 8), ".cref", 5, a1, sub_1C60EE81C);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                                  + 16))(*(_QWORD *)(a1 + 8), ".list", 5, a1, sub_1C60EE81C);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                                  + 16))(*(_QWORD *)(a1 + 8), ".listall", 8, a1, sub_1C60EE81C);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                                  + 16))(*(_QWORD *)(a1 + 8), ".listif", 7, a1, sub_1C60EE81C);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                                  + 16))(*(_QWORD *)(a1 + 8), ".listmacro", 10, a1, sub_1C60EE81C);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                                  + 16))(*(_QWORD *)(a1 + 8), ".listmacroall", 13, a1, sub_1C60EE81C);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                                  + 16))(*(_QWORD *)(a1 + 8), ".nocref", 7, a1, sub_1C60EE81C);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                                  + 16))(*(_QWORD *)(a1 + 8), ".nolist", 7, a1, sub_1C60EE81C);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                                  + 16))(*(_QWORD *)(a1 + 8), ".nolistif", 9, a1, sub_1C60EE81C);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                                  + 16))(*(_QWORD *)(a1 + 8), ".nolistmacro", 12, a1, sub_1C60EE81C);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                                  + 16))(*(_QWORD *)(a1 + 8), "page", 4, a1, sub_1C60EE81C);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                                  + 16))(*(_QWORD *)(a1 + 8), "subtitle", 8, a1, sub_1C60EE81C);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                                  + 16))(*(_QWORD *)(a1 + 8), ".tfcond", 7, a1, sub_1C60EE81C);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                                  + 16))(*(_QWORD *)(a1 + 8), "title", 5, a1, sub_1C60EE81C);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t)))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), "alias", 5, a1, sub_1C60EE874);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                                  + 16))(*(_QWORD *)(a1 + 8), "includelib", 10, a1, sub_1C60EEAA0);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t)))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), "endp", 4, a1, sub_1C60EEC18);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t)))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), "proc", 4, a1, sub_1C60EED78);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                                  + 16))(*(_QWORD *)(a1 + 8), ".386", 4, a1, sub_1C60EE81C);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                                  + 16))(*(_QWORD *)(a1 + 8), ".386p", 5, a1, sub_1C60EE81C);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                                  + 16))(*(_QWORD *)(a1 + 8), ".387", 4, a1, sub_1C60EE81C);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                                  + 16))(*(_QWORD *)(a1 + 8), ".486", 4, a1, sub_1C60EE81C);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                                  + 16))(*(_QWORD *)(a1 + 8), ".486p", 5, a1, sub_1C60EE81C);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                                  + 16))(*(_QWORD *)(a1 + 8), ".586", 4, a1, sub_1C60EE81C);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                                  + 16))(*(_QWORD *)(a1 + 8), ".586p", 5, a1, sub_1C60EE81C);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                                  + 16))(*(_QWORD *)(a1 + 8), ".686", 4, a1, sub_1C60EE81C);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                                  + 16))(*(_QWORD *)(a1 + 8), ".686p", 5, a1, sub_1C60EE81C);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                                  + 16))(*(_QWORD *)(a1 + 8), ".k3d", 4, a1, sub_1C60EE81C);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                                  + 16))(*(_QWORD *)(a1 + 8), ".mmx", 4, a1, sub_1C60EE81C);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                                  + 16))(*(_QWORD *)(a1 + 8), ".xmm", 4, a1, sub_1C60EE81C);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                                  + 16))(*(_QWORD *)(a1 + 8), "ends", 4, a1, sub_1C60EEFFC);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                                  + 16))(*(_QWORD *)(a1 + 8), "segment", 7, a1, sub_1C60EF090);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                                  + 16))(*(_QWORD *)(a1 + 8), ".code", 5, a1, sub_1C60EF304);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                                  + 16))(*(_QWORD *)(a1 + 8), ".data", 5, a1, sub_1C60EF434);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                                  + 16))(*(_QWORD *)(a1 + 8), ".data?", 6, a1, sub_1C60EF450);
  return (*(uint64_t (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t)))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), ".model", 6, a1, sub_1C60EE81C);
}

uint64_t sub_1C60EE708(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  const char *v9;
  const char *v10;
  __int16 v11;
  uint64_t v12;

  v12 = 0;
  v6 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8))
                             + 8)
                 + 8);
  if ((*(unsigned int (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 256))(*(_QWORD *)(a1 + 8), &v12))
  {
    v9 = "expected integer size";
LABEL_7:
    v10 = v9;
    v11 = 259;
    return llvm::MCAsmParser::Error(*(_QWORD *)(a1 + 8), v6, (uint64_t)&v10, 0, 0);
  }
  if ((v12 & 7) != 0)
  {
    v9 = "stack size must be a multiple of 8";
    goto LABEL_7;
  }
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v7 + 1088))(v7, v12, a4);
  return 0;
}

uint64_t sub_1C60EE7DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5;

  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 1120))(v5, a4);
  return 0;
}

uint64_t sub_1C60EE81C(uint64_t a1)
{
  uint64_t i;

  for (i = *(_QWORD *)(a1 + 8);
        **(_DWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)i + 40))(i) + 8) != 9;
        i = *(_QWORD *)(a1 + 8))
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  }
  return 0;
}

uint64_t sub_1C60EE874(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  llvm::MCAsmParser *v10;
  uint64_t v11;
  unint64_t Symbol;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  _QWORD v17[4];
  __int16 v18;
  _QWORD v19[4];
  __int16 v20;
  void *__p[2];
  uint64_t v22;
  void *v23[2];
  uint64_t v24;

  v23[0] = 0;
  v23[1] = 0;
  v24 = 0;
  __p[0] = 0;
  __p[1] = 0;
  v22 = 0;
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 38
    || (*(unsigned int (**)(_QWORD, void **))(**(_QWORD **)(a1 + 8) + 216))(*(_QWORD *)(a1 + 8), v23))
  {
    v6 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8))
                               + 8)
                   + 8);
    v7 = "expected <aliasName>";
LABEL_4:
    v19[0] = v7;
    v20 = 259;
    v8 = llvm::MCAsmParser::Error(*(_QWORD *)(a1 + 8), v6, (uint64_t)v19, 0, 0);
LABEL_5:
    v9 = v8;
    goto LABEL_10;
  }
  v10 = *(llvm::MCAsmParser **)(a1 + 8);
  v19[0] = "unexpected token";
  v20 = 259;
  if (llvm::MCAsmParser::parseToken(v10, 27, (llvm::Twine *)v19))
  {
    v18 = 1283;
    v17[0] = " in ";
    v17[2] = a2;
    v17[3] = a3;
    v19[0] = v17;
    v19[2] = " directive";
    v20 = 770;
    v8 = llvm::MCAsmParser::addErrorSuffix(*(llvm::MCAsmParser **)(a1 + 8), (const llvm::Twine *)v19);
    goto LABEL_5;
  }
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 38
    || (*(unsigned int (**)(_QWORD, void **))(**(_QWORD **)(a1 + 8) + 216))(*(_QWORD *)(a1 + 8), __p))
  {
    v6 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8))
                               + 8)
                   + 8);
    v7 = "expected <actualName>";
    goto LABEL_4;
  }
  v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
  v20 = 260;
  v19[0] = v23;
  Symbol = llvm::MCContext::getOrCreateSymbol(v11, (uint64_t)v19);
  v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
  v20 = 260;
  v19[0] = __p;
  v14 = llvm::MCContext::getOrCreateSymbol(v13, (uint64_t)v19);
  v15 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  (*(void (**)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)v15 + 296))(v15, Symbol, v14);
  v9 = 0;
LABEL_10:
  if (SHIBYTE(v22) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v24) < 0)
    operator delete(v23[0]);
  return v9;
}

uint64_t sub_1C60EEAA0(uint64_t a1)
{
  uint64_t v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t COFFSection;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v14 = 0;
  v15 = 0;
  if ((*(unsigned int (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v14))
  {
    v12 = "expected identifier in includelib directive";
    v13 = 259;
    return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)&v12, 0, 0);
  }
  else
  {
    v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    v4 = sub_1C62B9A74(v3);
    v5 = (*(uint64_t (**)(_QWORD, __n128))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8), v4);
    v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    COFFSection = llvm::MCContext::getCOFFSection(v6, ".drectve", 8uLL, 655360, 19, "", 0, 0, 0xFFFFFFFF, 0);
    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v5 + 168))(v5, COFFSection, 0);
    v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    (*(void (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)v8 + 488))(v8, "/DEFAULTLIB:", 12);
    v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v9 + 488))(v9, v14, v15);
    v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    (*(void (**)(uint64_t, const char *, uint64_t))(*(_QWORD *)v10 + 488))(v10, " ", 1);
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    sub_1C593C604(v11);
    return 0;
  }
}

uint64_t sub_1C60EEC18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  const void *v8;
  uint64_t v9;
  uint64_t result;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[4];
  __int16 v15;
  _QWORD v16[4];
  __int16 v17;
  const void *v18;
  uint64_t v19;

  v18 = 0;
  v19 = 0;
  v6 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8))
                             + 8)
                 + 8);
  if ((*(unsigned int (**)(_QWORD, const void **))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v18))
  {
    v16[0] = "expected identifier for procedure end";
    v11 = 259;
LABEL_12:
    v17 = v11;
    v12 = *(_QWORD *)(a1 + 8);
    v13 = v6;
    return llvm::MCAsmParser::Error(v12, v13, (uint64_t)v16, 0, 0);
  }
  v7 = *(_QWORD *)(a1 + 32);
  if (!v7)
  {
    v16[0] = "endp outside of procedure block";
    v17 = 259;
    v12 = *(_QWORD *)(a1 + 8);
    v13 = a4;
    return llvm::MCAsmParser::Error(v12, v13, (uint64_t)v16, 0, 0);
  }
  if (v7 != v19)
  {
    v8 = *(const void **)(a1 + 24);
    goto LABEL_11;
  }
  v8 = *(const void **)(a1 + 24);
  if (memcmp(v8, v18, *(_QWORD *)(a1 + 32)))
  {
LABEL_11:
    v15 = 1283;
    v14[0] = "endp does not match current procedure '";
    v14[2] = v8;
    v14[3] = v7;
    v16[0] = v14;
    v16[2] = "'";
    v11 = 770;
    goto LABEL_12;
  }
  if (*(_BYTE *)(a1 + 40))
  {
    v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 1040))(v9, a4);
  }
  result = 0;
  *(_QWORD *)(a1 + 24) = "";
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 40) = 0;
  return result;
}

uint64_t sub_1C60EED78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t Symbol;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  uint64_t result;
  uint64_t v20;
  unsigned __int8 *v21[2];
  _OWORD v22[2];
  __int16 v23;
  __int128 v24;

  v24 = 0uLL;
  if ((*(unsigned int (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v24))
  {
    *(_QWORD *)&v22[0] = "expected identifier for procedure";
    v23 = 259;
    v10 = *(_QWORD *)(a1 + 8);
    v11 = a4;
    return llvm::MCAsmParser::Error(v10, v11, (uint64_t)v22, 0, 0);
  }
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 2)
  {
    v6 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8);
    v7 = *(unsigned __int8 **)(v6 + 16);
    v21[0] = *(unsigned __int8 **)(v6 + 8);
    v21[1] = v7;
    v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
    if (v7 == (unsigned __int8 *)4)
    {
      if (!llvm::StringRef::compare_insensitive(v21, "near", 4uLL))
      {
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
      }
    }
    else if (v7 == (unsigned __int8 *)3)
    {
      v9 = *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8);
      if (!llvm::StringRef::compare_insensitive(v21, "far", 3uLL))
      {
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
        *(_QWORD *)&v22[0] = "far procedure definitions not yet supported";
        v23 = 259;
        v10 = *(_QWORD *)(a1 + 8);
        v11 = v9;
        return llvm::MCAsmParser::Error(v10, v11, (uint64_t)v22, 0, 0);
      }
    }
  }
  v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
  v23 = 261;
  v22[0] = v24;
  Symbol = llvm::MCContext::getOrCreateSymbol(v12, (uint64_t)v22);
  *(_DWORD *)(Symbol + 8) |= 0x10u;
  *(_WORD *)(Symbol + 32) = 32;
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 2
    && (v14 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8),
        v16 = *(_QWORD *)(v14 + 8),
        v15 = *(_QWORD *)(v14 + 16),
        *(_QWORD *)&v22[0] = v16,
        *((_QWORD *)&v22[0] + 1) = v15,
        v15 == 5)
    && !llvm::StringRef::compare_insensitive((unsigned __int8 **)v22, "frame", 5uLL))
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v20 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v20 + 1032))(v20, Symbol, a4);
    v17 = 1;
  }
  else
  {
    v17 = 0;
  }
  v18 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v18 + 192))(v18, Symbol, a4);
  result = 0;
  *(_OWORD *)(a1 + 24) = v24;
  *(_BYTE *)(a1 + 40) = v17;
  return result;
}

uint64_t sub_1C60EEFFC(uint64_t a1)
{
  const char *v3;
  __int16 v4;

  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 2)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    return 0;
  }
  else
  {
    v3 = "expected identifier in directive";
    v4 = 259;
    return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)&v3, 0, 0);
  }
}

uint64_t sub_1C60EF090(uint64_t a1)
{
  uint64_t v2;
  const char *v3;
  size_t v4;
  const char *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unsigned int v10;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t COFFSection;
  _QWORD v18[4];
  __int16 v19;
  void *v20;
  __int128 v21;
  _WORD v22[124];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 2)
  {
    v2 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8);
    if (*(_DWORD *)v2 == 2)
    {
      v3 = *(const char **)(v2 + 8);
      v4 = *(_QWORD *)(v2 + 16);
    }
    else
    {
      v7 = v2 + 8;
      v5 = *(const char **)(v2 + 8);
      v6 = *(_QWORD *)(v7 + 8);
      v8 = v6 != 0;
      if (v6)
        v3 = v5 + 1;
      else
        v3 = v5;
      if (v8 <= v6 - 1)
        v9 = v6 - 1;
      else
        v9 = v6 != 0;
      if (v6 < v9)
        v9 = v6;
      v4 = v9 - v8;
    }
    v10 = -1073741760;
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v20 = v22;
    v21 = xmmword_1C8678340;
    if (v4 == 5)
    {
      if (*(_DWORD *)v3 ^ 0x5845545F | *((unsigned __int8 *)v3 + 4) ^ 0x54)
        v10 = -1073741760;
      else
        v10 = 1610612768;
      if (!(*(_DWORD *)v3 ^ 0x5845545F | *((unsigned __int8 *)v3 + 4) ^ 0x54))
        v3 = ".text";
    }
    else if (v4 >= 6 && *(_DWORD *)v3 == 1480938591 && *((_WORD *)v3 + 2) == 9300)
    {
      v10 = 1610612768;
      v19 = 1283;
      v18[0] = ".text$";
      v18[2] = v3 + 6;
      v18[3] = v4 - 6;
      llvm::Twine::toVector((uint64_t)v18, (uint64_t)&v20);
      v3 = (const char *)v20;
      v4 = v21;
    }
    v12 = 19;
    if (v10 >> 30 == 1)
      v12 = 4;
    if ((v10 & 0x20000000) != 0)
      v13 = 2;
    else
      v13 = v12;
    v14 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    v15 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    COFFSection = llvm::MCContext::getCOFFSection(v15, v3, v4, v10, v13, "", 0, 0, 0xFFFFFFFF, 0);
    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v14 + 168))(v14, COFFSection, 0);
    if (v20 != v22)
      free(v20);
    return 0;
  }
  else
  {
    v20 = "expected identifier in directive";
    v22[4] = 259;
    return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)&v20, 0, 0);
  }
}

uint64_t sub_1C60EF304(uint64_t a1)
{
  return sub_1C60EF320(a1, ".text", 5uLL, 1610612768, 2);
}

uint64_t sub_1C60EF320(uint64_t a1, const void *a2, size_t a3, int a4, int a5)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t COFFSection;
  const char *v14;
  __int16 v15;

  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    COFFSection = llvm::MCContext::getCOFFSection(v11, a2, a3, a4, a5, "", 0, 0, 0xFFFFFFFF, 0);
    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v10 + 168))(v10, COFFSection, 0);
    return 0;
  }
  else
  {
    v14 = "unexpected token in section switching directive";
    v15 = 259;
    return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)&v14, 0, 0);
  }
}

uint64_t sub_1C60EF434(uint64_t a1)
{
  return sub_1C60EF320(a1, ".data", 5uLL, -1073741760, 19);
}

uint64_t sub_1C60EF450(uint64_t a1)
{
  return sub_1C60EF320(a1, ".bss", 4uLL, -1073741696, 15);
}

void sub_1C60EF470()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C60EF484(uint64_t result, uint64_t a2)
{
  *(_QWORD *)(result + 8) = a2;
  return result;
}

uint64_t getOSTypeFromPlatform(int a1)
{
  return dword_1C8678360[a1 - 1];
}

void sub_1C60EF4A4()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C60EF4B8(uint64_t a1, uint64_t a2)
{
  uint64_t result;

  *(_QWORD *)(a1 + 8) = a2;
  (*(void (**)(uint64_t, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t)))(*(_QWORD *)a2 + 16))(a2, ".alt_entry", 10, a1, sub_1C60F0070);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                                  + 16))(*(_QWORD *)(a1 + 8), ".desc", 5, a1, sub_1C60F01BC);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t)))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), ".indirect_symbol", 16, a1, sub_1C60F0320);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                                  + 16))(*(_QWORD *)(a1 + 8), ".lsym", 5, a1, sub_1C60F04D8);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, BOOL (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                               + 16))(*(_QWORD *)(a1 + 8), ".subsections_via_symbols", 24, a1, sub_1C60F0620);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t)))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), ".dump", 5, a1, sub_1C60F06E0);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t)))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), ".load", 5, a1, sub_1C60F06E0);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)()))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), ".section", 8, a1, sub_1C60F0838);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                                  + 16))(*(_QWORD *)(a1 + 8), ".pushsection", 12, a1, sub_1C60F0F70);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, BOOL (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                               + 16))(*(_QWORD *)(a1 + 8), ".popsection", 11, a1, sub_1C60F0FC8);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                                  + 16))(*(_QWORD *)(a1 + 8), ".previous", 9, a1, sub_1C60F1050);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t, char *)))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), ".secure_log_unique", 18, a1, sub_1C60F1118);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, BOOL (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                               + 16))(*(_QWORD *)(a1 + 8), ".secure_log_reset", 17, a1, sub_1C60F1524);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                                  + 16))(*(_QWORD *)(a1 + 8), ".tbss", 5, a1, sub_1C60F15D8);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                                  + 16))(*(_QWORD *)(a1 + 8), ".zerofill", 9, a1, sub_1C60F1904);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                                  + 16))(*(_QWORD *)(a1 + 8), ".data_region", 12, a1, sub_1C60F1D60);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, BOOL (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                               + 16))(*(_QWORD *)(a1 + 8), ".end_data_region", 16, a1, sub_1C60F1F20);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, BOOL (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                               + 16))(*(_QWORD *)(a1 + 8), ".bss", 4, a1, sub_1C60F1FE0);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, BOOL (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                               + 16))(*(_QWORD *)(a1 + 8), ".const", 6, a1, sub_1C60F2180);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, BOOL (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                               + 16))(*(_QWORD *)(a1 + 8), ".const_data", 11, a1, sub_1C60F21A8);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, BOOL (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                               + 16))(*(_QWORD *)(a1 + 8), ".constructor", 12, a1, sub_1C60F21D0);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, BOOL (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                               + 16))(*(_QWORD *)(a1 + 8), ".cstring", 8, a1, sub_1C60F21F8);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, BOOL (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                               + 16))(*(_QWORD *)(a1 + 8), ".data", 5, a1, sub_1C60F2220);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, BOOL (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                               + 16))(*(_QWORD *)(a1 + 8), ".destructor", 11, a1, sub_1C60F2248);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, BOOL (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                               + 16))(*(_QWORD *)(a1 + 8), ".dyld", 5, a1, sub_1C60F2270);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, BOOL (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                               + 16))(*(_QWORD *)(a1 + 8), ".fvmlib_init0", 13, a1, sub_1C60F2298);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, BOOL (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                               + 16))(*(_QWORD *)(a1 + 8), ".fvmlib_init1", 13, a1, sub_1C60F22C0);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, BOOL (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                               + 16))(*(_QWORD *)(a1 + 8), ".lazy_symbol_pointer", 20, a1, sub_1C60F22E8);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t)))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), ".linker_option", 14, a1, sub_1C60F2310);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t)))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), ".dyld_lib", 9, a1, sub_1C60F2570);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, BOOL (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                               + 16))(*(_QWORD *)(a1 + 8), ".literal16", 10, a1, sub_1C60F271C);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, BOOL (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                               + 16))(*(_QWORD *)(a1 + 8), ".literal4", 9, a1, sub_1C60F2744);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, BOOL (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                               + 16))(*(_QWORD *)(a1 + 8), ".literal8", 9, a1, sub_1C60F276C);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, BOOL (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                               + 16))(*(_QWORD *)(a1 + 8), ".mod_init_func", 14, a1, sub_1C60F2794);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, BOOL (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                               + 16))(*(_QWORD *)(a1 + 8), ".mod_term_func", 14, a1, sub_1C60F27BC);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, BOOL (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                               + 16))(*(_QWORD *)(a1 + 8), ".non_lazy_symbol_pointer", 24, a1, sub_1C60F27E4);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, BOOL (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                               + 16))(*(_QWORD *)(a1 + 8), ".thread_local_variable_pointer", 30, a1, sub_1C60F280C);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, BOOL (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                               + 16))(*(_QWORD *)(a1 + 8), ".objc_cat_cls_meth", 18, a1, sub_1C60F2834);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, BOOL (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                               + 16))(*(_QWORD *)(a1 + 8), ".objc_cat_inst_meth", 19, a1, sub_1C60F285C);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, BOOL (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                               + 16))(*(_QWORD *)(a1 + 8), ".objc_category", 14, a1, sub_1C60F2884);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, BOOL (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                               + 16))(*(_QWORD *)(a1 + 8), ".objc_class", 11, a1, sub_1C60F28AC);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, BOOL (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                               + 16))(*(_QWORD *)(a1 + 8), ".objc_class_names", 17, a1, sub_1C60F28D4);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, BOOL (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                               + 16))(*(_QWORD *)(a1 + 8), ".objc_class_vars", 16, a1, sub_1C60F28FC);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, BOOL (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                               + 16))(*(_QWORD *)(a1 + 8), ".objc_cls_meth", 14, a1, sub_1C60F2924);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, BOOL (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                               + 16))(*(_QWORD *)(a1 + 8), ".objc_cls_refs", 14, a1, sub_1C60F294C);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, BOOL (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                               + 16))(*(_QWORD *)(a1 + 8), ".objc_inst_meth", 15, a1, sub_1C60F2978);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, BOOL (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                               + 16))(*(_QWORD *)(a1 + 8), ".objc_instance_vars", 19, a1, sub_1C60F29A0);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, BOOL (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                               + 16))(*(_QWORD *)(a1 + 8), ".objc_message_refs", 18, a1, sub_1C60F29C8);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, BOOL (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                               + 16))(*(_QWORD *)(a1 + 8), ".objc_meta_class", 16, a1, sub_1C60F29F4);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, BOOL (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                               + 16))(*(_QWORD *)(a1 + 8), ".objc_meth_var_names", 20, a1, sub_1C60F2A1C);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, BOOL (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                               + 16))(*(_QWORD *)(a1 + 8), ".objc_meth_var_types", 20, a1, sub_1C60F2A44);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, BOOL (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                               + 16))(*(_QWORD *)(a1 + 8), ".objc_module_info", 17, a1, sub_1C60F2A6C);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, BOOL (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                               + 16))(*(_QWORD *)(a1 + 8), ".objc_protocol", 14, a1, sub_1C60F2A94);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, BOOL (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                               + 16))(*(_QWORD *)(a1 + 8), ".objc_selector_strs", 19, a1, sub_1C60F2ABC);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, BOOL (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                               + 16))(*(_QWORD *)(a1 + 8), ".objc_string_object", 19, a1, sub_1C60F2AE4);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, BOOL (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                               + 16))(*(_QWORD *)(a1 + 8), ".objc_symbols", 13, a1, sub_1C60F2B0C);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, BOOL (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                               + 16))(*(_QWORD *)(a1 + 8), ".picsymbol_stub", 15, a1, sub_1C60F2B34);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, BOOL (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                               + 16))(*(_QWORD *)(a1 + 8), ".static_const", 13, a1, sub_1C60F2B60);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, BOOL (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                               + 16))(*(_QWORD *)(a1 + 8), ".static_data", 12, a1, sub_1C60F2B88);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, BOOL (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                               + 16))(*(_QWORD *)(a1 + 8), ".symbol_stub", 12, a1, sub_1C60F2BB0);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, BOOL (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                               + 16))(*(_QWORD *)(a1 + 8), ".tdata", 6, a1, sub_1C60F2BDC);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, BOOL (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                               + 16))(*(_QWORD *)(a1 + 8), ".text", 5, a1, sub_1C60F2C04);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, BOOL (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                               + 16))(*(_QWORD *)(a1 + 8), ".thread_init_func", 17, a1, sub_1C60F2C2C);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, BOOL (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                               + 16))(*(_QWORD *)(a1 + 8), ".tlv", 4, a1, sub_1C60F2C54);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                                  + 16))(*(_QWORD *)(a1 + 8), ".ident", 6, a1, sub_1C60F2C7C);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t, _QWORD *, uint64_t, uint64_t)))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), ".bridgeos_version_min", 21, a1, sub_1C60F2CA0);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t, _QWORD *, uint64_t, uint64_t)))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), ".watchos_version_min", 20, a1, sub_1C60F3684);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t, _QWORD *, uint64_t, uint64_t)))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), ".tvos_version_min", 17, a1, sub_1C60F382C);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t, _QWORD *, uint64_t, uint64_t)))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), ".ios_version_min", 16, a1, sub_1C60F3834);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t, _QWORD *, uint64_t, uint64_t)))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), ".macosx_version_min", 19, a1, sub_1C60F383C);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t, _QWORD *, uint64_t, uint64_t)))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), ".build_version", 14, a1, sub_1C60F3844);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                                  + 16))(*(_QWORD *)(a1 + 8), ".ptrauth_abi_version", 20, a1, sub_1C60F3D88);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                                  + 16))(*(_QWORD *)(a1 + 8), ".ptrauth_kernel_abi_version", 27, a1, sub_1C60F3EA4);
  result = (*(uint64_t (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)()))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), ".cg_profile", 11, a1, llvm::MCAsmParserExtension::ParseDirectiveCGProfile);
  *(_QWORD *)(a1 + 24) = 0;
  return result;
}

uint64_t sub_1C60F0070(uint64_t a1)
{
  uint64_t v2;
  unint64_t Symbol;
  unint64_t v4;
  uint64_t v5;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[4];
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v12 = 0;
  v13 = 0;
  if ((*(unsigned int (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v12))
  {
    v7 = "expected identifier in directive";
LABEL_12:
    v10[0] = v7;
    v11 = 259;
    v8 = *(_QWORD *)(a1 + 8);
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 40))(v8);
    llvm::MCAsmParser::Error(v8, *(_QWORD *)(v9 + 96), (uint64_t)v10, 0, 0);
    return 1;
  }
  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
  v11 = 261;
  v10[0] = v12;
  v10[1] = v13;
  Symbol = llvm::MCContext::getOrCreateSymbol(v2, (uint64_t)v10);
  v4 = *(_QWORD *)Symbol & 0xFFFFFFFFFFFFFFF8;
  if (!v4 && (*(_DWORD *)(Symbol + 8) & 0x1C00) == 0x800)
  {
    *(_DWORD *)(Symbol + 8) |= 4u;
    llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(Symbol + 24));
    *(_QWORD *)Symbol = *(_QWORD *)Symbol & 7 | v4;
  }
  if (v4)
  {
    v7 = ".alt_entry must preceed symbol definition";
    goto LABEL_12;
  }
  v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  if (((*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v5 + 304))(v5, Symbol, 19) & 1) == 0)
  {
    v7 = "unable to emit symbol attribute";
    goto LABEL_12;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  return 0;
}

uint64_t sub_1C60F01BC(uint64_t a1)
{
  uint64_t v2;
  unint64_t Symbol;
  uint64_t v4;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[4];
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v12 = 0;
  v13 = 0;
  if ((*(unsigned int (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v12))
  {
    v6 = "expected identifier in directive";
    goto LABEL_8;
  }
  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
  v11 = 261;
  v10[0] = v12;
  v10[1] = v13;
  Symbol = llvm::MCContext::getOrCreateSymbol(v2, (uint64_t)v10);
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 25)
  {
LABEL_6:
    v6 = "unexpected token in '.desc' directive";
LABEL_8:
    v10[0] = v6;
    v11 = 259;
    v7 = *(_QWORD *)(a1 + 8);
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
    llvm::MCAsmParser::Error(v7, *(_QWORD *)(v8 + 96), (uint64_t)v10, 0, 0);
    return 1;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  v9 = 0;
  if (((*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 256))(*(_QWORD *)(a1 + 8), &v9) & 1) == 0)
  {
    if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
      v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
      (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v4 + 312))(v4, Symbol, v9);
      return 0;
    }
    goto LABEL_6;
  }
  return 1;
}

uint64_t sub_1C60F0320(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  int v7;
  uint64_t v9;
  unint64_t Symbol;
  unint64_t v11;
  uint64_t v12;
  const char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[4];
  __int16 v20;

  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  v7 = *(unsigned __int8 *)(*(_QWORD *)(*(_QWORD *)(v6 + 112) + 32 * *(unsigned int *)(v6 + 120) - 32) + 240);
  if ((v7 - 6) >= 3 && v7 != 20)
  {
    v19[0] = "indirect symbol not in a symbol pointer or stub section";
    v20 = 259;
    return llvm::MCAsmParser::Error(*(_QWORD *)(a1 + 8), a4, (uint64_t)v19, 0, 0);
  }
  v17 = 0;
  v18 = 0;
  if ((*(unsigned int (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v17))
  {
    v13 = "expected identifier in .indirect_symbol directive";
LABEL_15:
    v19[0] = v13;
    v20 = 259;
    goto LABEL_16;
  }
  v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
  v20 = 261;
  v19[0] = v17;
  v19[1] = v18;
  Symbol = llvm::MCContext::getOrCreateSymbol(v9, (uint64_t)v19);
  if ((*(_BYTE *)(Symbol + 8) & 1) != 0)
  {
    v13 = "non-local symbol required in directive";
    goto LABEL_15;
  }
  v11 = Symbol;
  v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  if (((*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v12 + 304))(v12, v11, 13) & 1) != 0)
  {
    if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
      return 0;
    }
    v13 = "unexpected token in '.indirect_symbol' directive";
    goto LABEL_15;
  }
  v20 = 1283;
  v19[0] = "unable to emit indirect symbol attribute for: ";
  v19[2] = v17;
  v19[3] = v18;
LABEL_16:
  v14 = *(_QWORD *)(a1 + 8);
  v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14);
  llvm::MCAsmParser::Error(v14, *(_QWORD *)(v15 + 96), (uint64_t)v19, 0, 0);
  return 1;
}

uint64_t sub_1C60F04D8(uint64_t a1)
{
  uint64_t v2;
  const char *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[4];
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  v10 = 0;
  v11 = 0;
  if ((*(unsigned int (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v10))
  {
    v4 = "expected identifier in directive";
LABEL_9:
    v8[0] = v4;
    v9 = 259;
    v5 = *(_QWORD *)(a1 + 8);
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    llvm::MCAsmParser::Error(v5, *(_QWORD *)(v6 + 96), (uint64_t)v8, 0, 0);
    return 1;
  }
  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
  v9 = 261;
  v8[0] = v10;
  v8[1] = v11;
  llvm::MCContext::getOrCreateSymbol(v2, (uint64_t)v8);
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 25)
  {
LABEL_8:
    v4 = "unexpected token in '.lsym' directive";
    goto LABEL_9;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  v7 = 0;
  v8[0] = 0;
  if (((*(uint64_t (**)(_QWORD, uint64_t *, _QWORD *))(**(_QWORD **)(a1 + 8) + 232))(*(_QWORD *)(a1 + 8), &v7, v8) & 1) == 0)
  {
    if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
      v4 = "directive '.lsym' is unsupported";
      goto LABEL_9;
    }
    goto LABEL_8;
  }
  return 1;
}

BOOL sub_1C60F0620(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  __int16 v8;

  v2 = **(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8);
  if (v2 == 9)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 208))(v3, 1);
  }
  else
  {
    v7 = "unexpected token in '.subsections_via_symbols' directive";
    v8 = 259;
    v5 = *(_QWORD *)(a1 + 8);
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    llvm::MCAsmParser::Error(v5, *(_QWORD *)(v6 + 96), (uint64_t)&v7, 0, 0);
  }
  return v2 != 9;
}

uint64_t sub_1C60F06E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BOOL4 v7;
  const char *v8;
  const char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[4];
  __int16 v14;

  v7 = a3 == 5 && *(_DWORD *)a2 == 1836409902 && *(_BYTE *)(a2 + 4) == 112;
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 3)
  {
    v10 = "expected string in '.dump' or '.load' directive";
LABEL_18:
    v13[0] = v10;
    v14 = 259;
    v11 = *(_QWORD *)(a1 + 8);
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
    llvm::MCAsmParser::Error(v11, *(_QWORD *)(v12 + 96), (uint64_t)v13, 0, 0);
    return 1;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 9)
  {
    v10 = "unexpected token in '.dump' or '.load' directive";
    goto LABEL_18;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  if (v7)
    v8 = "ignoring directive .dump for now";
  else
    v8 = "ignoring directive .load for now";
  v13[0] = v8;
  v14 = 259;
  return (*(uint64_t (**)(_QWORD, uint64_t, _QWORD *, _QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 168))(*(_QWORD *)(a1 + 8), a4, v13, 0, 0);
}

uint64_t sub_1C60F083C(uint64_t a1)
{
  char *v2;
  std::string::size_type v3;
  const void *v4;
  std::string *p_dst;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  std::string::size_type v13;
  std::string::size_type size;
  std::string *v15;
  std::string::size_type v16;
  unint64_t v17;
  BOOL v19;
  std::string *v20;
  _BYTE *v21;
  char v22;
  void **v23;
  std::string::size_type v24;
  std::string *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  const char *v33;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE *v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  _BYTE *v48;
  uint64_t v49;
  char *v50;
  char *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  size_t MachOSection;
  _QWORD v59[2];
  uint64_t v60;
  uint64_t v61;
  __int16 v62;
  std::string v63;
  __int16 v64;
  void *__p[2];
  uint64_t v66;
  __int128 v67;
  uint64_t v68;
  char *v69;
  char v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  std::string __dst;
  const void *v78;
  unint64_t v79;

  v2 = *(char **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 96);
  v78 = 0;
  v79 = 0;
  if ((*(unsigned int (**)(_QWORD, const void **))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v78))
  {
    __p[0] = "expected identifier after '.section' directive";
    WORD4(v67) = 259;
    return llvm::MCAsmParser::Error(*(_QWORD *)(a1 + 8), (uint64_t)v2, (uint64_t)__p, 0, 0);
  }
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 25)
  {
    __p[0] = "unexpected token in '.section' directive";
    WORD4(v67) = 259;
    v40 = *(_QWORD *)(a1 + 8);
    v41 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v40 + 40))(v40);
    llvm::MCAsmParser::Error(v40, *(_QWORD *)(v41 + 96), (uint64_t)__p, 0, 0);
    return 1;
  }
  v3 = v79;
  if (v79 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v4 = v78;
  if (v79 >= 0x17)
  {
    v6 = (v79 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v79 | 7) != 0x17)
      v6 = v79 | 7;
    v7 = v6 + 1;
    p_dst = (std::string *)operator new(v6 + 1);
    __dst.__r_.__value_.__l.__size_ = v3;
    __dst.__r_.__value_.__r.__words[2] = v7 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_10;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v79;
  p_dst = &__dst;
  if (v79)
LABEL_10:
    memmove(p_dst, v4, v3);
  p_dst->__r_.__value_.__s.__data_[v3] = 0;
  std::string::append(&__dst, ",");
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
  v9 = (char *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 24))(v8);
  v11 = v9;
  v12 = v10;
  LOBYTE(v13) = *((_BYTE *)&__dst.__r_.__value_.__s + 23);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!v10)
      goto LABEL_37;
    size = __dst.__r_.__value_.__l.__size_;
    v16 = (__dst.__r_.__value_.__r.__words[2] & 0x7FFFFFFFFFFFFFFFLL) - 1;
    v15 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    v13 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  }
  else
  {
    if (!v10)
      goto LABEL_37;
    size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    v15 = &__dst;
    v16 = 22;
  }
  v17 = v12;
  if (v15 <= (std::string *)v9 && (char *)&v15->__r_.__value_.__l.__data_ + size + 1 > v9)
  {
    sub_1C4E61270(__p, v9, &v9[v12], v12);
    if (v66 >= 0)
      v23 = __p;
    else
      v23 = (void **)__p[0];
    if (v66 >= 0)
      v24 = HIBYTE(v66) & 0x7F;
    else
      v24 = (std::string::size_type)__p[1];
    std::string::append(&__dst, (const std::string::value_type *)v23, v24);
    if (SHIBYTE(v66) < 0)
      operator delete(__p[0]);
  }
  else
  {
    if (v16 - size < v12)
    {
      std::string::__grow_by(&__dst, v16, size + v12 - v16, size, size, 0, 0);
      __dst.__r_.__value_.__l.__size_ = size;
      LOBYTE(v13) = *((_BYTE *)&__dst.__r_.__value_.__s + 23);
    }
    v19 = (v13 & 0x80u) != 0;
    v20 = &__dst;
    if (v19)
      v20 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    v21 = (char *)v20 + size;
    do
    {
      v22 = *v11++;
      *v21++ = v22;
      --v12;
    }
    while (v12);
    *v21 = 0;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      __dst.__r_.__value_.__l.__size_ = size + v17;
    else
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = (size + v17) & 0x7F;
  }
LABEL_37:
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v25 = &__dst;
    else
      v25 = (std::string *)__dst.__r_.__value_.__r.__words[0];
    v75 = 0;
    v76 = 0;
    v73 = 0;
    v74 = 0;
    v72 = 0;
    v71 = 0;
    v70 = 0;
    if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v26 = *((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x7F;
    else
      v26 = __dst.__r_.__value_.__l.__size_;
    llvm::MCSectionMachO::ParseSectionSpecifier((uint64_t)v25, v26, &v75, &v73, &v71, &v70, &v72, v59);
    if (v59[0])
    {
      v69 = (char *)v59[0];
      v59[0] = 0;
      sub_1C61D2548(&v69, &v63);
      WORD4(v67) = 260;
      __p[0] = &v63;
      v39 = llvm::MCAsmParser::Error(*(_QWORD *)(a1 + 8), (uint64_t)v2, (uint64_t)__p, 0, 0);
      if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v63.__r_.__value_.__l.__data_);
      if (v69)
        (*(void (**)(char *))(*(_QWORD *)v69 + 8))(v69);
      if (v59[0])
        (*(void (**)(_QWORD))(*(_QWORD *)v59[0] + 8))(v59[0]);
      goto LABEL_90;
    }
    v27 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    v28 = v27;
    if (*(char *)(v27 + 47) < 0)
    {
      sub_1C47EBC30(__p, *(void **)(v27 + 24), *(_QWORD *)(v27 + 32));
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)(v27 + 24);
      v66 = *(_QWORD *)(v27 + 40);
    }
    v67 = *(_OWORD *)(v28 + 48);
    v68 = *(_QWORD *)(v28 + 64);
    if ((v67 & 0xFFFFFFFD) == 0x15)
      goto LABEL_82;
    v29 = v73;
    v30 = v74;
    if (v74 == 12)
    {
      if (*(_QWORD *)v73 != 0x5F74736E6F635F5FLL || *(_DWORD *)(v73 + 8) != 1818324835)
        goto LABEL_82;
      v35 = (unint64_t)"__const" & 0xFF;
      v36 = (unint64_t)"__const" & 0xFFFFFFFFFFFFFF00;
      v37 = 7;
      if (v2)
        goto LABEL_73;
    }
    else
    {
      if (v74 != 13)
        goto LABEL_82;
      if (*(_QWORD *)v73 == 0x6F63747865745F5FLL && *(_QWORD *)(v73 + 5) == 0x746E5F6C616F6374)
      {
        v33 = "__text";
      }
      else
      {
        if (*(_QWORD *)v73 != 0x6F63617461645F5FLL || *(_QWORD *)(v73 + 5) != 0x746E5F6C616F6361)
          goto LABEL_82;
        v33 = "__data";
      }
      v35 = v33;
      v36 = (unint64_t)v33 & 0xFFFFFFFFFFFFFF00;
      v37 = 6;
      if (v2)
      {
LABEL_73:
        v38 = strlen(v2);
        if (v38)
        {
          v44 = memchr(v2, 44, v38);
          if (v44)
          {
            v45 = v44 - v2;
            goto LABEL_77;
          }
        }
LABEL_76:
        v45 = -1;
LABEL_77:
        v46 = v35 | v36;
        v47 = v45 + 1;
        if (v38 > v45 + 1 && (v48 = memchr(&v2[v47], 44, v38 - (v45 + 1))) != 0)
          v49 = v48 - v2;
        else
          v49 = -1;
        v50 = &v2[v47];
        v51 = &v2[v49];
        v52 = *(_QWORD *)(a1 + 8);
        v62 = 1283;
        v59[0] = "section \"";
        v60 = v29;
        v61 = v30;
        v63.__r_.__value_.__r.__words[0] = (std::string::size_type)v59;
        v63.__r_.__value_.__r.__words[2] = (std::string::size_type)"\" is deprecated";
        v64 = 770;
        (*(void (**)(uint64_t, char *, std::string *, char *, char *))(*(_QWORD *)v52 + 168))(v52, v2, &v63, v50, &v2[v49]);
        v53 = *(_QWORD *)(a1 + 8);
        v62 = 1283;
        v59[0] = "change section name to \"";
        v60 = v46;
        v61 = v37;
        v63.__r_.__value_.__r.__words[0] = (std::string::size_type)v59;
        v63.__r_.__value_.__r.__words[2] = (std::string::size_type)"\"";
        v64 = 770;
        (*(void (**)(uint64_t, char *, std::string *, char *, char *))(*(_QWORD *)v53 + 160))(v53, v2, &v63, v50, v51);
LABEL_82:
        if (v76 == 6)
        {
          if (*(_DWORD *)v75 ^ 0x45545F5F | *(unsigned __int16 *)(v75 + 4) ^ 0x5458)
            v54 = 19;
          else
            v54 = 2;
        }
        else
        {
          v54 = 19;
        }
        v55 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
        v56 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
        MachOSection = llvm::MCContext::getMachOSection(v56, v75, v76, v73, v74, v71, v72, v54, 0);
        (*(void (**)(uint64_t, size_t, _QWORD))(*(_QWORD *)v55 + 168))(v55, MachOSection, 0);
        if (SHIBYTE(v66) < 0)
          operator delete(__p[0]);
        v39 = 0;
        goto LABEL_90;
      }
    }
    v38 = 0;
    goto LABEL_76;
  }
  __p[0] = "unexpected token in '.section' directive";
  WORD4(v67) = 259;
  v42 = *(_QWORD *)(a1 + 8);
  v43 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v42 + 40))(v42);
  llvm::MCAsmParser::Error(v42, *(_QWORD *)(v43 + 96), (uint64_t)__p, 0, 0);
  v39 = 1;
LABEL_90:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  return v39;
}

uint64_t sub_1C60F0F70(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  sub_1C62B9A74(v2);
  v3 = sub_1C60F083C(a1);
  if ((_DWORD)v3)
  {
    v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    sub_1C593C604(v4);
  }
  return v3;
}

BOOL sub_1C60F0FC8(uint64_t a1)
{
  uint64_t v2;
  _BOOL4 v3;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  __int16 v8;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  v3 = sub_1C593C604(v2);
  if (!v3)
  {
    v7 = ".popsection without corresponding .pushsection";
    v8 = 259;
    v5 = *(_QWORD *)(a1 + 8);
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    llvm::MCAsmParser::Error(v5, *(_QWORD *)(v6 + 96), (uint64_t)&v7, 0, 0);
  }
  return !v3;
}

uint64_t sub_1C60F1050(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  __int16 v12;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  v3 = *(unsigned int *)(v2 + 120);
  if ((_DWORD)v3 && (v4 = *(_QWORD *)(v2 + 112) + 32 * v3, (v5 = *(_QWORD *)(v4 - 16)) != 0))
  {
    v6 = *(_QWORD *)(v4 - 8);
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 168))(v7, v5, v6);
    return 0;
  }
  else
  {
    v11 = ".previous without corresponding .section";
    v12 = 259;
    v9 = *(_QWORD *)(a1 + 8);
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
    llvm::MCAsmParser::Error(v9, *(_QWORD *)(v10 + 96), (uint64_t)&v11, 0, 0);
    return 1;
  }
}

uint64_t sub_1C60F1118(uint64_t a1, uint64_t a2, uint64_t a3, char *a4)
{
  uint64_t v6;
  size_t v7;
  size_t v8;
  uint64_t v9;
  char v10;
  int v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  llvm::raw_ostream *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  int BufferContainingLoc;
  uint64_t v25;
  size_t v26;
  const void *v27;
  size_t v28;
  _BYTE *v29;
  uint64_t *v30;
  unsigned int LineAndColumn;
  llvm::raw_ostream *v32;
  _BYTE *v33;
  uint64_t v34;
  size_t v35;
  uint64_t v36;
  std::string v37;
  _QWORD v38[4];
  __int16 v39;
  _QWORD v40[4];
  __int16 v41;
  _QWORD v42[4];
  __int16 v43;
  std::error_code v44;
  _QWORD v45[4];
  __int16 v46;

  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 200))(*(_QWORD *)(a1 + 8));
  v8 = v7;
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 9)
  {
    v45[0] = "unexpected token in '.secure_log_unique' directive";
    v46 = 259;
    v16 = *(_QWORD *)(a1 + 8);
    v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v16 + 40))(v16);
    llvm::MCAsmParser::Error(v16, *(_QWORD *)(v17 + 96), (uint64_t)v45, 0, 0);
    return 1;
  }
  if (*(_BYTE *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8)) + 1264))
  {
    v15 = ".secure_log_unique specified multiple times";
    goto LABEL_13;
  }
  v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
  v10 = *(_BYTE *)(v9 + 1255);
  v11 = v10;
  if (v10 >= 0)
    v12 = (_BYTE *)(v9 + 1232);
  else
    v12 = *(_BYTE **)(v9 + 1232);
  v13 = v10 & 0x7F;
  if (v11 >= 0)
    v14 = v13;
  else
    v14 = *(_QWORD *)(v9 + 1240);
  if (!v14)
  {
    v15 = ".secure_log_unique used but AS_SECURE_LOG_FILE environment variable unset.";
LABEL_13:
    v45[0] = v15;
    v46 = 259;
    return llvm::MCAsmParser::Error(*(_QWORD *)(a1 + 8), (uint64_t)a4, (uint64_t)v45, 0, 0);
  }
  v20 = *(llvm::raw_ostream **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8))
                              + 1256);
  if (v20)
    goto LABEL_19;
  v44.__val_ = 0;
  v44.__cat_ = std::system_category();
  v20 = (llvm::raw_ostream *)operator new();
  llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)v20, v12, v14, (uint64_t)&v44, 7);
  if (!v44.__val_)
  {
    v21 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    v22 = *(_QWORD *)(v21 + 1256);
    *(_QWORD *)(v21 + 1256) = v20;
    if (v22)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
LABEL_19:
    v23 = (uint64_t *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
    BufferContainingLoc = llvm::SourceMgr::FindBufferContainingLoc(v23, (unint64_t)a4);
    v25 = *(_QWORD *)(*(_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8))
                    + 24 * (BufferContainingLoc - 1));
    v27 = (const void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v25 + 16))(v25);
    v28 = v26;
    v29 = (_BYTE *)*((_QWORD *)v20 + 4);
    if (v26 <= *((_QWORD *)v20 + 3) - (_QWORD)v29)
    {
      if (v26)
      {
        memcpy(v29, v27, v26);
        v29 = (_BYTE *)(*((_QWORD *)v20 + 4) + v28);
        *((_QWORD *)v20 + 4) = v29;
      }
    }
    else
    {
      llvm::raw_ostream::write(v20, (const char *)v27, v26);
      v29 = (_BYTE *)*((_QWORD *)v20 + 4);
    }
    if (*((_BYTE **)v20 + 3) == v29)
    {
      llvm::raw_ostream::write(v20, ":", 1uLL);
    }
    else
    {
      *v29 = 58;
      ++*((_QWORD *)v20 + 4);
    }
    v30 = (uint64_t *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8));
    LineAndColumn = llvm::SourceMgr::getLineAndColumn(v30, a4, BufferContainingLoc);
    v32 = sub_1C5E21910(v20, LineAndColumn, 0, 0, 0);
    v33 = (_BYTE *)*((_QWORD *)v20 + 4);
    if (*((_BYTE **)v20 + 3) == v33)
    {
      v32 = llvm::raw_ostream::write(v20, ":", 1uLL);
    }
    else
    {
      *v33 = 58;
      ++*((_QWORD *)v20 + 4);
    }
    llvm::Twine::printOneChild((uint64_t)v32, v20, v6, v8, 5);
    llvm::Twine::printOneChild(v34, v20, (uint64_t)"\n", v35, 3);
    v36 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    v18 = 0;
    *(_BYTE *)(v36 + 1264) = 1;
    return v18;
  }
  v38[0] = "can't open secure log file: ";
  v38[2] = v12;
  v38[3] = v14;
  v39 = 1283;
  v40[0] = v38;
  v40[2] = " (";
  v41 = 770;
  std::error_code::message(&v37, &v44);
  v42[0] = v40;
  v42[2] = &v37;
  v43 = 1026;
  v45[0] = v42;
  v45[2] = ")";
  v46 = 770;
  v18 = llvm::MCAsmParser::Error(*(_QWORD *)(a1 + 8), (uint64_t)a4, (uint64_t)v45, 0, 0);
  if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v37.__r_.__value_.__l.__data_);
  (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v20 + 8))(v20);
  return v18;
}

BOOL sub_1C60F1524(uint64_t a1)
{
  int v2;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  __int16 v7;

  v2 = **(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8);
  if (v2 == 9)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    *(_BYTE *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8)) + 1264) = 0;
  }
  else
  {
    v6 = "unexpected token in '.secure_log_reset' directive";
    v7 = 259;
    v4 = *(_QWORD *)(a1 + 8);
    v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 40))(v4);
    llvm::MCAsmParser::Error(v4, *(_QWORD *)(v5 + 96), (uint64_t)&v6, 0, 0);
  }
  return v2 != 9;
}

uint64_t sub_1C60F15D8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t Symbol;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t MachOSection;
  const char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[4];
  __int16 v20;
  uint64_t v21;
  uint64_t v22;

  v2 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 96);
  v21 = 0;
  v22 = 0;
  if ((*(unsigned int (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v21))
  {
    v12 = "expected identifier in directive";
LABEL_15:
    v19[0] = v12;
    v20 = 259;
    v13 = *(_QWORD *)(a1 + 8);
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
    llvm::MCAsmParser::Error(v13, *(_QWORD *)(v14 + 96), (uint64_t)v19, 0, 0);
    return 1;
  }
  v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
  v20 = 261;
  v19[0] = v21;
  v19[1] = v22;
  Symbol = llvm::MCContext::getOrCreateSymbol(v3, (uint64_t)v19);
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 25)
  {
    v12 = "unexpected token in directive";
    goto LABEL_15;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  v18 = 0;
  v5 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 96);
  if (((*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 256))(*(_QWORD *)(a1 + 8), &v18) & 1) != 0)
    return 1;
  v17 = 0;
  v6 = 0;
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 25)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v6 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 96);
    if (((*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 256))(*(_QWORD *)(a1 + 8), &v17) & 1) != 0)
      return 1;
  }
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 9)
  {
    v12 = "unexpected token in '.tbss' directive";
    goto LABEL_15;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  if (v18 < 0)
  {
    v19[0] = "invalid '.tbss' directive size, can't be less thanzero";
    v20 = 259;
    v15 = *(_QWORD *)(a1 + 8);
    v16 = v5;
  }
  else if (v17 < 0)
  {
    v19[0] = "invalid '.tbss' alignment, can't be lessthan zero";
    v20 = 259;
    v15 = *(_QWORD *)(a1 + 8);
    v16 = v6;
  }
  else
  {
    v7 = *(_QWORD *)Symbol & 0xFFFFFFFFFFFFFFF8;
    if (!v7 && (*(_DWORD *)(Symbol + 8) & 0x1C00) == 0x800)
    {
      *(_DWORD *)(Symbol + 8) |= 4u;
      llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(Symbol + 24));
      *(_QWORD *)Symbol = *(_QWORD *)Symbol & 7 | v7;
    }
    if (!v7)
    {
      v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
      v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
      MachOSection = llvm::MCContext::getMachOSection(v9, (uint64_t)"__DATA", 6uLL, (uint64_t)"__thread_bss", 12, 18, 0, 12, 0);
      (*(void (**)(uint64_t, size_t, unint64_t, uint64_t, _QWORD))(*(_QWORD *)v8 + 480))(v8, MachOSection, Symbol, v18, (1 << v17));
      return 0;
    }
    v19[0] = "invalid symbol redefinition";
    v20 = 259;
    v15 = *(_QWORD *)(a1 + 8);
    v16 = v2;
  }
  return llvm::MCAsmParser::Error(v15, v16, (uint64_t)v19, 0, 0);
}

uint64_t sub_1C60F1904(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  size_t MachOSection;
  uint64_t v9;
  uint64_t v10;
  unint64_t Symbol;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  size_t v17;
  const char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD v29[4];
  __int16 v30;
  uint64_t v31;
  unint64_t v32;

  v31 = 0;
  v32 = 0;
  if ((*(unsigned int (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v31))
  {
    v18 = "expected segment name after '.zerofill' directive";
    goto LABEL_24;
  }
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 25)
    goto LABEL_19;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  v27 = 0;
  v28 = 0;
  v2 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 96);
  if ((*(unsigned int (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v27))
  {
    v18 = "expected section name after comma in '.zerofill' directive";
    goto LABEL_24;
  }
  v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
  v4 = **(_QWORD **)(a1 + 8);
  if (**(_DWORD **)(v3 + 8) == 9)
  {
    v5 = (*(uint64_t (**)(void))(v4 + 56))();
    v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    MachOSection = llvm::MCContext::getMachOSection(v6, v31, v32, v27, v28, 1, 0, 15, 0);
    (*(void (**)(uint64_t, size_t, _QWORD, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v5 + 472))(v5, MachOSection, 0, 0, 0, v2);
    return 0;
  }
  if (**(_DWORD **)((*(uint64_t (**)(void))(v4 + 40))() + 8) != 25)
    goto LABEL_19;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  v9 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 96);
  v25 = 0;
  v26 = 0;
  if ((*(unsigned int (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v25))
  {
    v18 = "expected identifier in directive";
    goto LABEL_24;
  }
  v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
  v30 = 261;
  v29[0] = v25;
  v29[1] = v26;
  Symbol = llvm::MCContext::getOrCreateSymbol(v10, (uint64_t)v29);
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 25)
  {
LABEL_19:
    v18 = "unexpected token in directive";
LABEL_24:
    v29[0] = v18;
    v30 = 259;
    v19 = *(_QWORD *)(a1 + 8);
    v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 40))(v19);
    llvm::MCAsmParser::Error(v19, *(_QWORD *)(v20 + 96), (uint64_t)v29, 0, 0);
    return 1;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  v24 = 0;
  v12 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 96);
  if (((*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 256))(*(_QWORD *)(a1 + 8), &v24) & 1) != 0)
    return 1;
  v23 = 0;
  v13 = 0;
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 25)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v13 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 96);
    if (((*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 256))(*(_QWORD *)(a1 + 8), &v23) & 1) != 0)
      return 1;
  }
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 9)
  {
    v18 = "unexpected token in '.zerofill' directive";
    goto LABEL_24;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  if (v24 < 0)
  {
    v29[0] = "invalid '.zerofill' directive size, can't be less than zero";
    v30 = 259;
    v21 = *(_QWORD *)(a1 + 8);
    v22 = v12;
  }
  else if (v23 < 0)
  {
    v29[0] = "invalid '.zerofill' directive alignment, can't be less than zero";
    v30 = 259;
    v21 = *(_QWORD *)(a1 + 8);
    v22 = v13;
  }
  else
  {
    v14 = *(_QWORD *)Symbol & 0xFFFFFFFFFFFFFFF8;
    if (!v14 && (*(_DWORD *)(Symbol + 8) & 0x1C00) == 0x800)
    {
      *(_DWORD *)(Symbol + 8) |= 4u;
      llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(Symbol + 24));
      *(_QWORD *)Symbol = *(_QWORD *)Symbol & 7 | v14;
    }
    if (!v14)
    {
      v15 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
      v16 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
      v17 = llvm::MCContext::getMachOSection(v16, v31, v32, v27, v28, 1, 0, 15, 0);
      (*(void (**)(uint64_t, size_t, unint64_t, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v15 + 472))(v15, v17, Symbol, v24, (1 << v23), v2);
      return 0;
    }
    v29[0] = "invalid symbol redefinition";
    v30 = 259;
    v21 = *(_QWORD *)(a1 + 8);
    v22 = v9;
  }
  return llvm::MCAsmParser::Error(v21, v22, (uint64_t)v29, 0, 0);
}

uint64_t sub_1C60F1D60(uint64_t a1)
{
  void (*v2)(void);
  uint64_t v3;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[4];
  __int16 v9;
  uint64_t v10;
  uint64_t v11;

  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v2 = *(void (**)(void))(*(_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8))
                          + 232);
LABEL_15:
    v2();
    return 0;
  }
  v10 = 0;
  v11 = 0;
  v3 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8))
                             + 8)
                 + 8);
  if (!(*(unsigned int (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v10))
  {
    if (v11 == 4)
    {
      if (*(_DWORD *)v10 != 909210730 && *(_DWORD *)v10 != 842232938)
      {
LABEL_16:
        v8[0] = "unknown region type in '.data_region' directive";
        v9 = 259;
        return llvm::MCAsmParser::Error(*(_QWORD *)(a1 + 8), v3, (uint64_t)v8, 0, 0);
      }
    }
    else
    {
      if (v11 != 3)
        goto LABEL_16;
      if (*(_WORD *)v10 != 29802 || *(_BYTE *)(v10 + 2) != 56)
        goto LABEL_16;
    }
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v2 = *(void (**)(void))(*(_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8))
                          + 232);
    goto LABEL_15;
  }
  v8[0] = "expected region type after '.data_region' directive";
  v9 = 259;
  v6 = *(_QWORD *)(a1 + 8);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
  llvm::MCAsmParser::Error(v6, *(_QWORD *)(v7 + 96), (uint64_t)v8, 0, 0);
  return 1;
}

BOOL sub_1C60F1F20(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  __int16 v8;

  v2 = **(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8);
  if (v2 == 9)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v3 + 232))(v3, 4);
  }
  else
  {
    v7 = "unexpected token in '.end_data_region' directive";
    v8 = 259;
    v5 = *(_QWORD *)(a1 + 8);
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    llvm::MCAsmParser::Error(v5, *(_QWORD *)(v6 + 96), (uint64_t)&v7, 0, 0);
  }
  return v2 != 9;
}

BOOL sub_1C60F1FE0(uint64_t a1)
{
  return sub_1C60F2008(a1, (uint64_t)"__DATA", 6uLL, (uint64_t)"__bss", 5, 0, 0, 0);
}

BOOL sub_1C60F2008(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, int a6, uint64_t a7, int a8)
{
  int v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  size_t MachOSection;
  uint64_t v21;
  uint64_t v23;
  uint64_t v24;
  const char *v25;
  __int16 v26;

  v16 = **(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8);
  if (v16 == 9)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v17 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    v18 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    if (a6 < 0)
      v19 = 2;
    else
      v19 = 19;
    MachOSection = llvm::MCContext::getMachOSection(v18, a2, a3, a4, a5, a6, a8, v19, 0);
    (*(void (**)(uint64_t, size_t, _QWORD))(*(_QWORD *)v17 + 168))(v17, MachOSection, 0);
    if ((_DWORD)a7)
    {
      v21 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
      (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v21 + 632))(v21, a7, 0, 1, 0);
    }
  }
  else
  {
    v25 = "unexpected token in section switching directive";
    v26 = 259;
    v23 = *(_QWORD *)(a1 + 8);
    v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v23 + 40))(v23);
    llvm::MCAsmParser::Error(v23, *(_QWORD *)(v24 + 96), (uint64_t)&v25, 0, 0);
  }
  return v16 != 9;
}

BOOL sub_1C60F2180(uint64_t a1)
{
  return sub_1C60F2008(a1, (uint64_t)"__TEXT", 6uLL, (uint64_t)"__const", 7, 0, 0, 0);
}

BOOL sub_1C60F21A8(uint64_t a1)
{
  return sub_1C60F2008(a1, (uint64_t)"__DATA", 6uLL, (uint64_t)"__const", 7, 0, 0, 0);
}

BOOL sub_1C60F21D0(uint64_t a1)
{
  return sub_1C60F2008(a1, (uint64_t)"__TEXT", 6uLL, (uint64_t)"__constructor", 13, 0, 0, 0);
}

BOOL sub_1C60F21F8(uint64_t a1)
{
  return sub_1C60F2008(a1, (uint64_t)"__TEXT", 6uLL, (uint64_t)"__cstring", 9, 2, 0, 0);
}

BOOL sub_1C60F2220(uint64_t a1)
{
  return sub_1C60F2008(a1, (uint64_t)"__DATA", 6uLL, (uint64_t)"__data", 6, 0, 0, 0);
}

BOOL sub_1C60F2248(uint64_t a1)
{
  return sub_1C60F2008(a1, (uint64_t)"__TEXT", 6uLL, (uint64_t)"__destructor", 12, 0, 0, 0);
}

BOOL sub_1C60F2270(uint64_t a1)
{
  return sub_1C60F2008(a1, (uint64_t)"__DATA", 6uLL, (uint64_t)"__dyld", 6, 0, 0, 0);
}

BOOL sub_1C60F2298(uint64_t a1)
{
  return sub_1C60F2008(a1, (uint64_t)"__TEXT", 6uLL, (uint64_t)"__fvmlib_init0", 14, 0, 0, 0);
}

BOOL sub_1C60F22C0(uint64_t a1)
{
  return sub_1C60F2008(a1, (uint64_t)"__TEXT", 6uLL, (uint64_t)"__fvmlib_init1", 14, 0, 0, 0);
}

BOOL sub_1C60F22E8(uint64_t a1)
{
  return sub_1C60F2008(a1, (uint64_t)"__DATA", 6uLL, (uint64_t)"__la_symbol_ptr", 15, 7, 4, 0);
}

uint64_t sub_1C60F2310(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *__p[2];
  uint64_t v15;
  _QWORD v16[2];
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  _QWORD v20[2];
  const char *v21;
  __int16 v22;
  char *v23;
  uint64_t v24;
  _QWORD v25[13];

  v25[12] = *MEMORY[0x1E0C80C00];
  v23 = (char *)v25;
  v24 = 0x400000000;
  do
  {
    while (1)
    {
      if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 3)
      {
        v16[0] = "expected string in '";
        v17 = a2;
        v18 = a3;
        v19 = 1283;
        v20[0] = v16;
        v21 = "' directive";
        v22 = 770;
        v11 = *(_QWORD *)(a1 + 8);
        v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
        llvm::MCAsmParser::Error(v11, *(_QWORD *)(v12 + 96), (uint64_t)v20, 0, 0);
        goto LABEL_18;
      }
      __p[0] = 0;
      __p[1] = 0;
      v15 = 0;
      if (((*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)(a1 + 8) + 208))(*(_QWORD *)(a1 + 8), __p) & 1) != 0)
        goto LABEL_4;
      sub_1C505C3A0((uint64_t)&v23, (unint64_t)__p);
      if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
      {
        v6 = 3;
      }
      else
      {
        if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 25)
        {
          v16[0] = "unexpected token in '";
          v17 = a2;
          v18 = a3;
          v19 = 1283;
          v20[0] = v16;
          v21 = "' directive";
          v22 = 770;
          v7 = *(_QWORD *)(a1 + 8);
          v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
          llvm::MCAsmParser::Error(v7, *(_QWORD *)(v8 + 96), (uint64_t)v20, 0, 0);
LABEL_4:
          v6 = 1;
          goto LABEL_9;
        }
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
        v6 = 0;
      }
LABEL_9:
      if (SHIBYTE(v15) < 0)
        break;
      if (v6)
        goto LABEL_15;
    }
    operator delete(__p[0]);
  }
  while (!v6);
LABEL_15:
  if (v6 == 3)
  {
    v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    (*(void (**)(uint64_t, char *, _QWORD))(*(_QWORD *)v9 + 216))(v9, v23, v24);
    v10 = 0;
    goto LABEL_19;
  }
LABEL_18:
  v10 = 1;
LABEL_19:
  sub_1C4E01820(&v23);
  return v10;
}

uint64_t sub_1C60F2570(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  void *p_p;
  uint64_t v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void *__p;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  _QWORD v20[4];
  __int16 v21;

  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 3)
  {
    __p = "expected string in '";
    v17 = a2;
    v18 = a3;
    v19 = 1283;
    v20[0] = &__p;
    v20[2] = "' directive";
    v21 = 770;
    v11 = *(_QWORD *)(a1 + 8);
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 40))(v11);
    llvm::MCAsmParser::Error(v11, *(_QWORD *)(v12 + 96), (uint64_t)v20, 0, 0);
    return 1;
  }
  __p = 0;
  v16 = 0;
  v17 = 0;
  if (((*(uint64_t (**)(_QWORD, void **))(**(_QWORD **)(a1 + 8) + 208))(*(_QWORD *)(a1 + 8), &__p) & 1) == 0)
  {
    if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
      v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
      if (v17 >= 0)
        p_p = &__p;
      else
        p_p = __p;
      if (v17 >= 0)
        v9 = HIBYTE(v17) & 0x7F;
      else
        v9 = v16;
      (*(void (**)(uint64_t, void *, uint64_t))(*(_QWORD *)v7 + 224))(v7, p_p, v9);
      v6 = 0;
      goto LABEL_12;
    }
    v20[0] = "unexpected token in '.dyld_lib' directive";
    v21 = 259;
    v13 = *(_QWORD *)(a1 + 8);
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
    llvm::MCAsmParser::Error(v13, *(_QWORD *)(v14 + 96), (uint64_t)v20, 0, 0);
  }
  v6 = 1;
LABEL_12:
  if (SHIBYTE(v17) < 0)
    operator delete(__p);
  return v6;
}

BOOL sub_1C60F271C(uint64_t a1)
{
  return sub_1C60F2008(a1, (uint64_t)"__TEXT", 6uLL, (uint64_t)"__literal16", 11, 14, 16, 0);
}

BOOL sub_1C60F2744(uint64_t a1)
{
  return sub_1C60F2008(a1, (uint64_t)"__TEXT", 6uLL, (uint64_t)"__literal4", 10, 3, 4, 0);
}

BOOL sub_1C60F276C(uint64_t a1)
{
  return sub_1C60F2008(a1, (uint64_t)"__TEXT", 6uLL, (uint64_t)"__literal8", 10, 4, 8, 0);
}

BOOL sub_1C60F2794(uint64_t a1)
{
  return sub_1C60F2008(a1, (uint64_t)"__DATA", 6uLL, (uint64_t)"__mod_init_func", 15, 9, 4, 0);
}

BOOL sub_1C60F27BC(uint64_t a1)
{
  return sub_1C60F2008(a1, (uint64_t)"__DATA", 6uLL, (uint64_t)"__mod_term_func", 15, 10, 4, 0);
}

BOOL sub_1C60F27E4(uint64_t a1)
{
  return sub_1C60F2008(a1, (uint64_t)"__DATA", 6uLL, (uint64_t)"__nl_symbol_ptr", 15, 6, 4, 0);
}

BOOL sub_1C60F280C(uint64_t a1)
{
  return sub_1C60F2008(a1, (uint64_t)"__DATA", 6uLL, (uint64_t)"__thread_ptr", 12, 20, 4, 0);
}

BOOL sub_1C60F2834(uint64_t a1)
{
  return sub_1C60F2008(a1, (uint64_t)"__OBJC", 6uLL, (uint64_t)"__cat_cls_meth", 14, 0x10000000, 0, 0);
}

BOOL sub_1C60F285C(uint64_t a1)
{
  return sub_1C60F2008(a1, (uint64_t)"__OBJC", 6uLL, (uint64_t)"__cat_inst_meth", 15, 0x10000000, 0, 0);
}

BOOL sub_1C60F2884(uint64_t a1)
{
  return sub_1C60F2008(a1, (uint64_t)"__OBJC", 6uLL, (uint64_t)"__category", 10, 0x10000000, 0, 0);
}

BOOL sub_1C60F28AC(uint64_t a1)
{
  return sub_1C60F2008(a1, (uint64_t)"__OBJC", 6uLL, (uint64_t)"__class", 7, 0x10000000, 0, 0);
}

BOOL sub_1C60F28D4(uint64_t a1)
{
  return sub_1C60F2008(a1, (uint64_t)"__TEXT", 6uLL, (uint64_t)"__cstring", 9, 2, 0, 0);
}

BOOL sub_1C60F28FC(uint64_t a1)
{
  return sub_1C60F2008(a1, (uint64_t)"__OBJC", 6uLL, (uint64_t)"__class_vars", 12, 0x10000000, 0, 0);
}

BOOL sub_1C60F2924(uint64_t a1)
{
  return sub_1C60F2008(a1, (uint64_t)"__OBJC", 6uLL, (uint64_t)"__cls_meth", 10, 0x10000000, 0, 0);
}

BOOL sub_1C60F294C(uint64_t a1)
{
  return sub_1C60F2008(a1, (uint64_t)"__OBJC", 6uLL, (uint64_t)"__cls_refs", 10, 268435461, 4, 0);
}

BOOL sub_1C60F2978(uint64_t a1)
{
  return sub_1C60F2008(a1, (uint64_t)"__OBJC", 6uLL, (uint64_t)"__inst_meth", 11, 0x10000000, 0, 0);
}

BOOL sub_1C60F29A0(uint64_t a1)
{
  return sub_1C60F2008(a1, (uint64_t)"__OBJC", 6uLL, (uint64_t)"__instance_vars", 15, 0x10000000, 0, 0);
}

BOOL sub_1C60F29C8(uint64_t a1)
{
  return sub_1C60F2008(a1, (uint64_t)"__OBJC", 6uLL, (uint64_t)"__message_refs", 14, 268435461, 4, 0);
}

BOOL sub_1C60F29F4(uint64_t a1)
{
  return sub_1C60F2008(a1, (uint64_t)"__OBJC", 6uLL, (uint64_t)"__meta_class", 12, 0x10000000, 0, 0);
}

BOOL sub_1C60F2A1C(uint64_t a1)
{
  return sub_1C60F2008(a1, (uint64_t)"__TEXT", 6uLL, (uint64_t)"__cstring", 9, 2, 0, 0);
}

BOOL sub_1C60F2A44(uint64_t a1)
{
  return sub_1C60F2008(a1, (uint64_t)"__TEXT", 6uLL, (uint64_t)"__cstring", 9, 2, 0, 0);
}

BOOL sub_1C60F2A6C(uint64_t a1)
{
  return sub_1C60F2008(a1, (uint64_t)"__OBJC", 6uLL, (uint64_t)"__module_info", 13, 0x10000000, 0, 0);
}

BOOL sub_1C60F2A94(uint64_t a1)
{
  return sub_1C60F2008(a1, (uint64_t)"__OBJC", 6uLL, (uint64_t)"__protocol", 10, 0x10000000, 0, 0);
}

BOOL sub_1C60F2ABC(uint64_t a1)
{
  return sub_1C60F2008(a1, (uint64_t)"__OBJC", 6uLL, (uint64_t)"__selector_strs", 15, 2, 0, 0);
}

BOOL sub_1C60F2AE4(uint64_t a1)
{
  return sub_1C60F2008(a1, (uint64_t)"__OBJC", 6uLL, (uint64_t)"__string_object", 15, 0x10000000, 0, 0);
}

BOOL sub_1C60F2B0C(uint64_t a1)
{
  return sub_1C60F2008(a1, (uint64_t)"__OBJC", 6uLL, (uint64_t)"__symbols", 9, 0x10000000, 0, 0);
}

BOOL sub_1C60F2B34(uint64_t a1)
{
  return sub_1C60F2008(a1, (uint64_t)"__TEXT", 6uLL, (uint64_t)"__picsymbol_stub", 16, -2147483640, 0, 26);
}

BOOL sub_1C60F2B60(uint64_t a1)
{
  return sub_1C60F2008(a1, (uint64_t)"__TEXT", 6uLL, (uint64_t)"__static_const", 14, 0, 0, 0);
}

BOOL sub_1C60F2B88(uint64_t a1)
{
  return sub_1C60F2008(a1, (uint64_t)"__DATA", 6uLL, (uint64_t)"__static_data", 13, 0, 0, 0);
}

BOOL sub_1C60F2BB0(uint64_t a1)
{
  return sub_1C60F2008(a1, (uint64_t)"__TEXT", 6uLL, (uint64_t)"__symbol_stub", 13, -2147483640, 0, 16);
}

BOOL sub_1C60F2BDC(uint64_t a1)
{
  return sub_1C60F2008(a1, (uint64_t)"__DATA", 6uLL, (uint64_t)"__thread_data", 13, 17, 0, 0);
}

BOOL sub_1C60F2C04(uint64_t a1)
{
  return sub_1C60F2008(a1, (uint64_t)"__TEXT", 6uLL, (uint64_t)"__text", 6, 0x80000000, 0, 0);
}

BOOL sub_1C60F2C2C(uint64_t a1)
{
  return sub_1C60F2008(a1, (uint64_t)"__DATA", 6uLL, (uint64_t)"__thread_init", 13, 21, 0, 0);
}

BOOL sub_1C60F2C54(uint64_t a1)
{
  return sub_1C60F2008(a1, (uint64_t)"__DATA", 6uLL, (uint64_t)"__thread_vars", 13, 19, 0, 0);
}

uint64_t sub_1C60F2C7C(uint64_t a1)
{
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 224))(*(_QWORD *)(a1 + 8));
  return 0;
}

uint64_t sub_1C60F2CA0(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;

  v20 = 0;
  v19 = 0;
  if ((sub_1C60F2DE8(a1, (_DWORD *)&v20 + 1, &v20, &v19) & 1) != 0)
    return 1;
  v17 = 0;
  v18 = 0;
  v9 = 0;
  v10 = 0;
  v11 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8);
  if (*(_DWORD *)v11 == 2)
  {
    if (*(_QWORD *)(v11 + 16) == 11
      && ((v12 = *(uint64_t **)(v11 + 8), v13 = *v12, v14 = *(uint64_t *)((char *)v12 + 3), v13 == 0x737265765F6B6473)
        ? (v15 = v14 == 0x6E6F69737265765FLL)
        : (v15 = 0),
          v15))
    {
      if ((sub_1C60F2F44(a1, &v17) & 1) != 0)
        return 1;
      v10 = v17;
      v9 = v18;
    }
    else
    {
      v9 = 0;
      v10 = 0;
    }
  }
  sub_1C60F3014(a1, a2, a3, 0, 0, a4, 30);
  v16 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, unint64_t, uint64_t))(*(_QWORD *)v16 + 248))(v16, 5, HIDWORD(v20), v20, v19, v10, v9);
  return 0;
}

uint64_t sub_1C60F2DE8(uint64_t a1, _DWORD *a2, _DWORD *a3, _DWORD *a4)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  const char *v15;
  __int16 v16;

  if ((sub_1C60F319C(a1, a2, a3, "OS") & 1) != 0)
    return 1;
  *a4 = 0;
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
  result = 0;
  if (**(_DWORD **)(v7 + 8) != 9)
  {
    v8 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8);
    if (*(_DWORD *)v8 == 2
      && *(_QWORD *)(v8 + 16) == 11
      && ((v9 = *(uint64_t **)(v8 + 8), v10 = *v9, v11 = *(uint64_t *)((char *)v9 + 3), v10 == 0x737265765F6B6473)
        ? (v12 = v11 == 0x6E6F69737265765FLL)
        : (v12 = 0),
          v12))
    {
      return 0;
    }
    else
    {
      if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 25)
      {
        v15 = "invalid OS update specifier, comma expected";
        v16 = 259;
        v13 = *(_QWORD *)(a1 + 8);
        v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 40))(v13);
        llvm::MCAsmParser::Error(v13, *(_QWORD *)(v14 + 96), (uint64_t)&v15, 0, 0);
        return 1;
      }
      return sub_1C60F34D4(a1, a4, "OS update");
    }
  }
  return result;
}

uint64_t sub_1C60F2F44(uint64_t a1, unint64_t *a2)
{
  uint64_t result;
  unint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  v8 = 0;
  if ((sub_1C60F319C(a1, (_DWORD *)&v8 + 1, &v8, "SDK") & 1) != 0)
    return 1;
  v5 = HIDWORD(v8) | ((unint64_t)v8 << 32);
  *a2 = v5 | 0x8000000000000000;
  a2[1] = 0;
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 25)
    return 0;
  v7 = 0;
  if ((sub_1C60F34D4(a1, &v7, "SDK subminor") & 1) != 0)
    return 1;
  result = 0;
  v6 = v7 | 0x80000000;
  *a2 = v5 | 0x8000000000000000;
  a2[1] = v6;
  return result;
}

uint64_t sub_1C60F3014(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  uint64_t result;
  llvm::Triple *v15;
  char v16;
  uint64_t OSName;
  uint64_t v18;
  uint64_t v19;
  _QWORD v20[4];
  __int16 v21;
  _QWORD *v22;
  uint64_t v23;
  _QWORD *v24;
  __int16 v25;
  _QWORD v26[4];
  char v27;
  char v28;
  _QWORD v29[4];
  __int16 v30;

  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
  if (*(_DWORD *)(result + 60) != a7)
  {
    v15 = (llvm::Triple *)(result + 24);
    if (a5)
    {
      v20[0] = 32;
      v20[2] = a4;
      v20[3] = a5;
      v21 = 1287;
      v22 = a2;
      v23 = a3;
      v24 = v20;
      v16 = 2;
      a2 = &v22;
      v25 = 517;
    }
    else
    {
      v21 = 257;
      v22 = a2;
      v23 = a3;
      v25 = 261;
      v16 = 5;
    }
    v26[0] = a2;
    v26[1] = a3;
    v26[2] = " used while targeting ";
    v27 = v16;
    v28 = 3;
    OSName = llvm::Triple::getOSName(v15);
    v29[0] = v26;
    v29[2] = OSName;
    v29[3] = v18;
    v30 = 1282;
    result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD *, _QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 168))(*(_QWORD *)(a1 + 8), a6, v29, 0, 0);
  }
  if (*(_QWORD *)(a1 + 24))
  {
    v29[0] = "overriding previous version directive";
    v30 = 259;
    (*(void (**)(_QWORD, uint64_t, _QWORD *, _QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 168))(*(_QWORD *)(a1 + 8), a6, v29, 0, 0);
    v19 = *(_QWORD *)(a1 + 24);
    v29[0] = "previous definition is here";
    v30 = 259;
    result = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD *, _QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 160))(*(_QWORD *)(a1 + 8), v19, v29, 0, 0);
  }
  *(_QWORD *)(a1 + 24) = a6;
  return result;
}

uint64_t sub_1C60F319C(uint64_t a1, _DWORD *a2, _DWORD *a3, const char *a4)
{
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  int v15;
  const char *v16;
  char v17;
  int v18;
  char v19;
  __int16 v20;
  int v21;
  int v22;
  BOOL v23;
  const char *v24;
  const char *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[2];
  const char *v29;
  __int16 v30;
  const char *v31;
  const char *v32;
  __int16 v33;

  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 4)
  {
    v8 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8);
    v9 = (_QWORD *)(v8 + 24);
    if (*(_DWORD *)(v8 + 32) >= 0x41u)
      v9 = (_QWORD *)*v9;
    v10 = (_QWORD *)*v9;
    if ((unint64_t)(v10 - 0x2000) <= 0xFFFFFFFFFFFF0000)
    {
      v18 = *(unsigned __int8 *)a4;
      if (*a4)
      {
        v28[0] = "invalid ";
        v29 = a4;
        v30 = 771;
        v19 = 2;
      }
      else
      {
        v28[0] = "invalid ";
        v30 = 259;
        v19 = 3;
      }
      v23 = v18 == 0;
      v24 = (const char *)v28;
      if (v23)
        v24 = "invalid ";
      v25 = " major version number";
    }
    else
    {
      *a2 = (_DWORD)v10;
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
      if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 25)
      {
        if (*a4)
        {
          v31 = a4;
          v32 = " minor version number required, comma expected";
          v20 = 771;
        }
        else
        {
          v31 = " minor version number required, comma expected";
          v20 = 259;
        }
        v33 = v20;
        goto LABEL_41;
      }
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
      if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 4)
      {
        v11 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8);
        v12 = (unint64_t *)(v11 + 24);
        if (*(_DWORD *)(v11 + 32) >= 0x41u)
          v12 = (unint64_t *)*v12;
        v13 = *v12;
        if (v13 < 0x100)
        {
          *a3 = v13;
          (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
          return 0;
        }
        v22 = *(unsigned __int8 *)a4;
        if (*a4)
        {
          v28[0] = "invalid ";
          v29 = a4;
          v30 = 771;
          v19 = 2;
        }
        else
        {
          v28[0] = "invalid ";
          v30 = 259;
          v19 = 3;
        }
        v23 = v22 == 0;
        v24 = (const char *)v28;
        if (v23)
          v24 = "invalid ";
        v25 = " minor version number";
      }
      else
      {
        v21 = *(unsigned __int8 *)a4;
        if (*a4)
        {
          v28[0] = "invalid ";
          v29 = a4;
          v30 = 771;
          v19 = 2;
        }
        else
        {
          v28[0] = "invalid ";
          v30 = 259;
          v19 = 3;
        }
        v23 = v21 == 0;
        v24 = (const char *)v28;
        if (v23)
          v24 = "invalid ";
        v25 = " minor version number, integer expected";
      }
    }
    v31 = v24;
    v32 = v25;
    LOBYTE(v33) = v19;
  }
  else
  {
    v15 = *(unsigned __int8 *)a4;
    v16 = "invalid ";
    if (*a4)
    {
      v28[0] = "invalid ";
      v29 = a4;
      v30 = 771;
      v17 = 2;
    }
    else
    {
      v28[0] = "invalid ";
      v30 = 259;
      v17 = 3;
    }
    if (v15)
      v16 = (const char *)v28;
    v31 = v16;
    v32 = " major version number, integer expected";
    LOBYTE(v33) = v17;
  }
  HIBYTE(v33) = 3;
LABEL_41:
  v26 = *(_QWORD *)(a1 + 8);
  v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v26 + 40))(v26);
  llvm::MCAsmParser::Error(v26, *(_QWORD *)(v27 + 96), (uint64_t)&v31, 0, 0);
  return 1;
}

uint64_t sub_1C60F34D4(uint64_t a1, _DWORD *a2, _BYTE *a3)
{
  uint64_t v6;
  unint64_t *v7;
  unint64_t v8;
  int v10;
  const char *v11;
  char v12;
  int v13;
  char v14;
  BOOL v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[2];
  _BYTE *v20;
  __int16 v21;
  const char *v22;
  const char *v23;
  char v24;
  char v25;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 4)
  {
    v10 = *a3;
    v11 = "invalid ";
    if (*a3)
    {
      v19[0] = "invalid ";
      v20 = a3;
      v21 = 771;
      v12 = 2;
    }
    else
    {
      v19[0] = "invalid ";
      v21 = 259;
      v12 = 3;
    }
    if (v10)
      v11 = (const char *)v19;
    v22 = v11;
    v23 = " version number, integer expected";
    v24 = v12;
    goto LABEL_19;
  }
  v6 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8);
  v7 = (unint64_t *)(v6 + 24);
  if (*(_DWORD *)(v6 + 32) >= 0x41u)
    v7 = (unint64_t *)*v7;
  v8 = *v7;
  if (v8 >= 0x100)
  {
    v13 = *a3;
    if (*a3)
    {
      v19[0] = "invalid ";
      v20 = a3;
      v21 = 771;
      v14 = 2;
    }
    else
    {
      v19[0] = "invalid ";
      v21 = 259;
      v14 = 3;
    }
    v15 = v13 == 0;
    v16 = (const char *)v19;
    if (v15)
      v16 = "invalid ";
    v22 = v16;
    v23 = " version number";
    v24 = v14;
LABEL_19:
    v25 = 3;
    v17 = *(_QWORD *)(a1 + 8);
    v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17);
    llvm::MCAsmParser::Error(v17, *(_QWORD *)(v18 + 96), (uint64_t)&v22, 0, 0);
    return 1;
  }
  *a2 = v8;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  return 0;
}

uint64_t sub_1C60F3684(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_1C60F368C(a1, a2, a3, a4, 3);
}

uint64_t sub_1C60F368C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  BOOL v14;
  uint64_t v16;
  _QWORD v17[4];
  __int16 v18;
  _QWORD v19[4];
  __int16 v20;
  unint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;

  v24 = 0;
  v23 = 0;
  if ((sub_1C60F2DE8(a1, (_DWORD *)&v24 + 1, &v24, &v23) & 1) != 0)
    return 1;
  v21 = 0;
  v22 = 0;
  v10 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8);
  if (*(_DWORD *)v10 == 2 && *(_QWORD *)(v10 + 16) == 11)
  {
    v11 = *(uint64_t **)(v10 + 8);
    v12 = *v11;
    v13 = *(uint64_t *)((char *)v11 + 3);
    v14 = v12 == 0x737265765F6B6473 && v13 == 0x6E6F69737265765FLL;
    if (v14 && (sub_1C60F2F44(a1, &v21) & 1) != 0)
      return 1;
  }
  v19[0] = "unexpected token";
  v20 = 259;
  if (llvm::MCAsmParser::parseEOL(*(llvm::MCAsmParser **)(a1 + 8), (const llvm::Twine *)v19))
  {
    v17[0] = " in '";
    v17[2] = a2;
    v17[3] = a3;
    v18 = 1283;
    v19[0] = v17;
    v19[2] = "' directive";
    v20 = 770;
    return llvm::MCAsmParser::addErrorSuffix(*(llvm::MCAsmParser **)(a1 + 8), (const llvm::Twine *)v19);
  }
  else
  {
    sub_1C60F3014(a1, a2, a3, 0, 0, a4, dword_1C86783A0[(int)a5]);
    v16 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, unint64_t, uint64_t))(*(_QWORD *)v16 + 240))(v16, a5, HIDWORD(v24), v24, v23, v21, v22);
    return 0;
  }
}

uint64_t sub_1C60F382C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_1C60F368C(a1, a2, a3, a4, 2);
}

uint64_t sub_1C60F3834(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_1C60F368C(a1, a2, a3, a4, 0);
}

uint64_t sub_1C60F383C(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  return sub_1C60F368C(a1, a2, a3, a4, 1);
}

uint64_t sub_1C60F3844(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  int v11;
  uint64_t v12;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  const char *v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  _QWORD v33[4];
  __int16 v34;
  unsigned __int16 *v35;
  uint64_t v36;

  v35 = 0;
  v36 = 0;
  v8 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8))
                             + 8)
                 + 8);
  if ((*(unsigned int (**)(_QWORD, unsigned __int16 **))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v35))
  {
    v26 = "platform name expected";
LABEL_70:
    v33[0] = v26;
    v34 = 259;
    v27 = *(_QWORD *)(a1 + 8);
    v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v27 + 40))(v27);
    llvm::MCAsmParser::Error(v27, *(_QWORD *)(v28 + 96), (uint64_t)v33, 0, 0);
    return 1;
  }
  v9 = 0;
  switch(v36)
  {
    case 3:
      if (*v35 ^ 0x6F69 | *((unsigned __int8 *)v35 + 2) ^ 0x73)
        v9 = 0;
      else
        v9 = 0x100000002;
      break;
    case 4:
      if (*(_DWORD *)v35 == 1936684660)
      {
        v9 = 0x100000003;
      }
      else
      {
        if (*(_DWORD *)v35 != 1936683640)
          goto LABEL_52;
        v9 = 0x10000000BLL;
      }
      break;
    case 5:
      if (*(_DWORD *)v35 != 1868783981 || *((_BYTE *)v35 + 4) != 115)
      {
        v11 = *(_DWORD *)v35 ^ 0x6F706573 | *((unsigned __int8 *)v35 + 4) ^ 0x73;
        v12 = 0x10000000ELL;
        goto LABEL_15;
      }
      v9 = 0x100000001;
      break;
    case 7:
      v11 = *(_DWORD *)v35 ^ 0x63746177 | *(_DWORD *)((char *)v35 + 3) ^ 0x736F6863;
      v12 = 0x100000004;
LABEL_15:
      if (v11)
        v9 = 0;
      else
        v9 = v12;
      break;
    case 8:
      if (*(_QWORD *)v35 != 0x736F656764697262)
        goto LABEL_52;
      v9 = 0x100000005;
      break;
    case 9:
      if (*(_QWORD *)v35 != 0x696B726576697264 || *((_BYTE *)v35 + 8) != 116)
        goto LABEL_52;
      v9 = 0x10000000ALL;
      break;
    case 11:
      if (*(_QWORD *)v35 == 0x6C6174614363616DLL && *(_QWORD *)((char *)v35 + 3) == 0x7473796C61746143)
      {
        v9 = 0x100000006;
      }
      else
      {
        if (*(_QWORD *)v35 != 0x616C756D69737278 || *(_QWORD *)((char *)v35 + 3) != 0x726F74616C756D69)
          goto LABEL_52;
        v9 = 0x10000000CLL;
      }
      break;
    case 12:
      if (*(_QWORD *)v35 != 0x6C756D6973736F69 || *((_DWORD *)v35 + 2) != 1919906913)
        goto LABEL_52;
      v9 = 0x100000007;
      break;
    case 13:
      if (*(_QWORD *)v35 != 0x756D6973736F7674 || *(_QWORD *)((char *)v35 + 5) != 0x726F74616C756D69)
        goto LABEL_52;
      v9 = 0x100000008;
      break;
    case 16:
      if (*(_QWORD *)v35 == 0x73736F6863746177 && *((_QWORD *)v35 + 1) == 0x726F74616C756D69)
        v9 = 0x100000009;
      else
LABEL_52:
        v9 = 0;
      break;
    default:
      break;
  }
  if ((v9 & 0x300000000) == 0 || !(_DWORD)v9)
  {
    v33[0] = "unknown platform name";
    v34 = 259;
    return llvm::MCAsmParser::Error(*(_QWORD *)(a1 + 8), v8, (uint64_t)v33, 0, 0);
  }
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 25)
  {
    v26 = "version number required, comma expected";
    goto LABEL_70;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  v32 = 0;
  v31 = 0;
  if ((sub_1C60F2DE8(a1, (_DWORD *)&v32 + 1, &v32, &v31) & 1) != 0)
    return 1;
  v29 = 0;
  v30 = 0;
  v19 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8);
  if (*(_DWORD *)v19 == 2 && *(_QWORD *)(v19 + 16) == 11)
  {
    v20 = *(uint64_t **)(v19 + 8);
    v21 = *v20;
    v22 = *(uint64_t *)((char *)v20 + 3);
    v23 = v21 == 0x737265765F6B6473 && v22 == 0x6E6F69737265765FLL;
    if (v23 && (sub_1C60F2F44(a1, &v29) & 1) != 0)
      return 1;
  }
  v33[0] = "unexpected token";
  v34 = 259;
  if (llvm::MCAsmParser::parseEOL(*(llvm::MCAsmParser **)(a1 + 8), (const llvm::Twine *)v33))
  {
    v33[0] = " in '.build_version' directive";
    v34 = 259;
    return llvm::MCAsmParser::addErrorSuffix(*(llvm::MCAsmParser **)(a1 + 8), (const llvm::Twine *)v33);
  }
  else
  {
    sub_1C60F3014(a1, a2, a3, (uint64_t)v35, v36, a4, dword_1C8678360[(int)v9 - 1]);
    v24 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD, _QWORD, unint64_t, uint64_t))(*(_QWORD *)v24 + 248))(v24, v9, HIDWORD(v32), v32, v31, v29, v30);
    return 0;
  }
}

uint64_t sub_1C60F3D88(uint64_t a1)
{
  llvm::MCAsmParser *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[4];
  __int16 v9;
  uint64_t v10;

  v10 = 0;
  v2 = *(llvm::MCAsmParser **)(a1 + 8);
  v8[0] = "expected integer version in '.ptrauth_abi_version' directive";
  v9 = 259;
  if (llvm::MCAsmParser::parseIntToken(v2, &v10, (const llvm::Twine *)v8))
    return 1;
  v4 = v10;
  if ((unint64_t)v10 >= 0x40)
  {
    v8[0] = "invalid ptrauth ABI version number";
    v9 = 259;
    v5 = *(_QWORD *)(a1 + 8);
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    llvm::MCAsmParser::Error(v5, *(_QWORD *)(v6 + 96), (uint64_t)v8, 0, 0);
    return 1;
  }
  v8[0] = "unexpected token";
  v9 = 259;
  if (llvm::MCAsmParser::parseEOL(*(llvm::MCAsmParser **)(a1 + 8), (const llvm::Twine *)v8))
  {
    v8[0] = " in '.ptrauth_abi_version' directive";
    v9 = 259;
    return llvm::MCAsmParser::addErrorSuffix(*(llvm::MCAsmParser **)(a1 + 8), (const llvm::Twine *)v8);
  }
  else
  {
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v7 + 264))(v7, v4, 0);
    return 0;
  }
}

uint64_t sub_1C60F3EA4(uint64_t a1)
{
  llvm::MCAsmParser *v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[4];
  __int16 v9;
  uint64_t v10;

  v10 = 0;
  v2 = *(llvm::MCAsmParser **)(a1 + 8);
  v8[0] = "expected integer version in '.ptrauth_kernel_abi_version' directive";
  v9 = 259;
  if (llvm::MCAsmParser::parseIntToken(v2, &v10, (const llvm::Twine *)v8))
    return 1;
  v4 = v10;
  if ((unint64_t)v10 >= 0x40)
  {
    v8[0] = "invalid ptrauth kernel ABI version number";
    v9 = 259;
    v5 = *(_QWORD *)(a1 + 8);
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    llvm::MCAsmParser::Error(v5, *(_QWORD *)(v6 + 96), (uint64_t)v8, 0, 0);
    return 1;
  }
  v8[0] = "unexpected token";
  v9 = 259;
  if (llvm::MCAsmParser::parseEOL(*(llvm::MCAsmParser **)(a1 + 8), (const llvm::Twine *)v8))
  {
    v8[0] = " in '.ptrauth_kernel_abi_version' directive";
    v9 = 259;
    return llvm::MCAsmParser::addErrorSuffix(*(llvm::MCAsmParser **)(a1 + 8), (const llvm::Twine *)v8);
  }
  else
  {
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 264))(v7, v4, 1);
    return 0;
  }
}

void sub_1C60F3FC8()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C60F3FDC(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a1 + 8) = a2;
  (*(void (**)(uint64_t, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t)))(*(_QWORD *)a2 + 16))(a2, ".data", 5, a1, sub_1C60F4400);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                                  + 16))(*(_QWORD *)(a1 + 8), ".text", 5, a1, sub_1C60F4530);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                                  + 16))(*(_QWORD *)(a1 + 8), ".bss", 4, a1, sub_1C60F4548);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                                  + 16))(*(_QWORD *)(a1 + 8), ".rodata", 7, a1, sub_1C60F4560);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                                  + 16))(*(_QWORD *)(a1 + 8), ".tdata", 6, a1, sub_1C60F4578);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                                  + 16))(*(_QWORD *)(a1 + 8), ".tbss", 5, a1, sub_1C60F4590);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                                  + 16))(*(_QWORD *)(a1 + 8), ".data.rel", 9, a1, sub_1C60F45A8);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                                  + 16))(*(_QWORD *)(a1 + 8), ".data.rel.ro", 12, a1, sub_1C60F45C0);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                                  + 16))(*(_QWORD *)(a1 + 8), ".eh_frame", 9, a1, sub_1C60F45D8);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, BOOL (*)(uint64_t, uint64_t, uint64_t, uint64_t)))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), ".section", 8, a1, sub_1C60F45F0);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, BOOL (*)(uint64_t, uint64_t, uint64_t, uint64_t)))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), ".pushsection", 12, a1, sub_1C60F62F8);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, BOOL (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                               + 16))(*(_QWORD *)(a1 + 8), ".popsection", 11, a1, sub_1C60F635C);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                                  + 16))(*(_QWORD *)(a1 + 8), ".size", 5, a1, sub_1C60F63E4);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                                  + 16))(*(_QWORD *)(a1 + 8), ".previous", 9, a1, sub_1C60F654C);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                                  + 16))(*(_QWORD *)(a1 + 8), ".type", 5, a1, sub_1C60F6614);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                                  + 16))(*(_QWORD *)(a1 + 8), ".ident", 6, a1, sub_1C60F6BB0);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                                  + 16))(*(_QWORD *)(a1 + 8), ".symver", 7, a1, sub_1C60F6CF8);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, BOOL (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                               + 16))(*(_QWORD *)(a1 + 8), ".version", 8, a1, sub_1C60F6F48);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                                  + 16))(*(_QWORD *)(a1 + 8), ".weakref", 8, a1, sub_1C60F71C4);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t)))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), ".weak", 5, a1, sub_1C60F7370);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t)))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), ".local", 6, a1, sub_1C60F7370);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t)))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), ".protected", 10, a1, sub_1C60F7370);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t)))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), ".internal", 9, a1, sub_1C60F7370);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t, uint64_t, uint64_t)))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), ".hidden", 7, a1, sub_1C60F7370);
  (*(void (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)(uint64_t)))(**(_QWORD **)(a1 + 8)
                                                                                                  + 16))(*(_QWORD *)(a1 + 8), ".subsection", 11, a1, sub_1C60F7678);
  return (*(uint64_t (**)(_QWORD, const char *, uint64_t, uint64_t, uint64_t (*)()))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8), ".cg_profile", 11, a1, llvm::MCAsmParserExtension::ParseDirectiveCGProfile);
}

uint64_t sub_1C60F4400(uint64_t a1)
{
  return sub_1C60F4418(a1, (uint64_t)".data", 5, 1, 3);
}

uint64_t sub_1C60F4418(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5)
{
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  unint64_t ELFSection;
  _QWORD v15[4];
  __int16 v16;
  uint64_t v17;
  unsigned __int8 v18[32];
  __int16 v19;

  v17 = 0;
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 9)
  {
    v10 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)v18 = 0;
    if (((*(uint64_t (**)(uint64_t, uint64_t *, unsigned __int8 *))(*(_QWORD *)v10 + 232))(v10, &v17, v18) & 1) != 0)
      return 1;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
  v16 = 261;
  v15[0] = a2;
  v15[1] = a3;
  v19 = 257;
  ELFSection = llvm::MCContext::getELFSection(v13, (llvm::Twine *)v15, a4, a5, 0, v18, 0, -1, 0);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v12 + 168))(v12, ELFSection, v17);
  return 0;
}

uint64_t sub_1C60F4530(uint64_t a1)
{
  return sub_1C60F4418(a1, (uint64_t)".text", 5, 1, 6);
}

uint64_t sub_1C60F4548(uint64_t a1)
{
  return sub_1C60F4418(a1, (uint64_t)".bss", 4, 8, 3);
}

uint64_t sub_1C60F4560(uint64_t a1)
{
  return sub_1C60F4418(a1, (uint64_t)".rodata", 7, 1, 2);
}

uint64_t sub_1C60F4578(uint64_t a1)
{
  return sub_1C60F4418(a1, (uint64_t)".tdata", 6, 1, 1027);
}

uint64_t sub_1C60F4590(uint64_t a1)
{
  return sub_1C60F4418(a1, (uint64_t)".tbss", 5, 8, 1027);
}

uint64_t sub_1C60F45A8(uint64_t a1)
{
  return sub_1C60F4418(a1, (uint64_t)".data.rel", 9, 1, 3);
}

uint64_t sub_1C60F45C0(uint64_t a1)
{
  return sub_1C60F4418(a1, (uint64_t)".data.rel.ro", 12, 1, 3);
}

uint64_t sub_1C60F45D8(uint64_t a1)
{
  return sub_1C60F4418(a1, (uint64_t)".eh_frame", 9, 1, 3);
}

BOOL sub_1C60F45F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1C60F45FC(a1, 0, a4);
}

BOOL sub_1C60F45FC(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  int v21;
  BOOL v22;
  int v23;
  BOOL v24;
  int v27;
  int v29;
  uint64_t v30;
  int *v31;
  int v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unsigned int v36;
  int v37;
  int *v38;
  int v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  unsigned int v43;
  _DWORD *v44;
  BOOL v48;
  BOOL v49;
  BOOL v50;
  BOOL v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unint64_t v59;
  _BYTE *v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t v65;
  unint64_t v66;
  unsigned __int8 *v67;
  int v68;
  int v69;
  unsigned int v70;
  unint64_t v71;
  int v72;
  uint64_t v73;
  unsigned __int16 *v74;
  unint64_t v75;
  unint64_t v76;
  unint64_t v77;
  unint64_t v78;
  int v80;
  int v81;
  int v83;
  int v84;
  int v85;
  uint64_t v87;
  int v88;
  unint64_t v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  uint64_t v95;
  unsigned int v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v100;
  BOOL v101;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  const char *v107;
  int v108;
  BOOL v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  BOOL v118;
  int v125;
  unsigned int v134;
  uint64_t v135;
  unint64_t v136;
  unsigned __int8 *v137;
  int v138;
  int v139;
  unsigned int v140;
  int v141;
  BOOL v142;
  BOOL v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  _BYTE *v148;
  _QWORD *v149;
  uint64_t v150;
  uint64_t *v151;
  uint64_t v152;
  uint64_t v153;
  unint64_t ELFSection;
  uint64_t v155;
  int v156;
  int v157;
  BOOL v158;
  int v159;
  int v161;
  uint64_t v162;
  uint64_t v163;
  unint64_t v164;
  uint64_t v165;
  uint64_t v166;
  _BOOL8 result;
  uint64_t v168;
  unint64_t TempSymbol;
  uint64_t v170;
  unint64_t v171;
  char *v172;
  char *v173;
  BOOL v174;
  char v175;
  char v176;
  __int128 *v177;
  llvm::MCContext *v178;
  uint64_t v179;
  uint64_t v180;
  unint64_t v181;
  unint64_t v182;
  __int128 *v183;
  uint64_t v184;
  int v185;
  uint64_t v186;
  void *__p[2];
  char v188;
  int v189;
  __int16 v190;
  __int128 v191;
  _QWORD v192[2];
  uint64_t v193;
  unint64_t v194;
  __int16 v195;
  __int128 v196;
  const char *v197;
  __int16 v198;
  unint64_t v199;
  uint64_t v200;
  __int128 v201;
  uint64_t v202;
  __int128 v203;
  __int128 v204;
  __int128 v205;
  __int16 v206;
  int v207;
  __int16 v208;
  uint64_t v209;

  v209 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 96);
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
  v8 = *(_DWORD **)(a1 + 8);
  v186 = a3;
  if (**(_DWORD **)(v7 + 8) != 3)
  {
    if (!v8[6])
    {
      v11 = *(_QWORD *)((*(uint64_t (**)(_DWORD *))(*(_QWORD *)v8 + 40))(v8) + 96);
      if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 25)
      {
        if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
        {
          v6 = 0;
          v12 = 0;
        }
        else
        {
          v12 = 0;
          do
          {
            v29 = **(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8))
                              + 8);
            v30 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
            if (v29 == 3)
            {
              v31 = *(int **)(v30 + 8);
              v32 = *v31;
              v33 = *((_QWORD *)v31 + 2);
              if (v32 != 2)
              {
                v34 = v33 - 1;
                v35 = v33 != 0;
                if (v35 > v33 - 1)
                  v34 = v33 != 0;
                if (v33 >= v34)
                  LODWORD(v33) = v34;
                LODWORD(v33) = v33 - v35;
              }
              v36 = v33 + 2;
            }
            else
            {
              v37 = **(_DWORD **)(v30 + 8);
              v38 = *(int **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8);
              if (v37 == 2)
              {
                v39 = *v38;
                v40 = *((_QWORD *)v38 + 2);
                v41 = v40 - 1;
                v42 = v40 != 0;
                if (v42 > v40 - 1)
                  v41 = v40 != 0;
                if (v40 < v41)
                  LODWORD(v41) = v40;
                v43 = v41 - v42;
                if (v39 == 2)
                  v36 = v40;
                else
                  v36 = v43;
              }
              else
              {
                v36 = v38[4];
              }
            }
            (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
            v12 += v36;
            if (v11 + v36 != *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8))
                                                    + 8)
                                        + 8))
              break;
            v44 = *(_DWORD **)(a1 + 8);
            if (v44[6])
              break;
            v11 = *(_QWORD *)((*(uint64_t (**)(_DWORD *))(*(_QWORD *)v44 + 40))(v44) + 96);
            if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8))
                             + 8) == 25)
              break;
          }
          while (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8))
                              + 8) != 9);
        }
        if (v12)
        {
          v10 = v12;
          goto LABEL_20;
        }
      }
      v8 = *(_DWORD **)(a1 + 8);
    }
    *(_QWORD *)&v204 = "expected identifier in directive";
    v206 = 259;
    v53 = *(_QWORD *)((*(uint64_t (**)(_DWORD *))(*(_QWORD *)v8 + 40))(v8) + 96);
    v54 = (uint64_t)v8;
LABEL_551:
    llvm::MCAsmParser::Error(v54, v53, (uint64_t)&v204, 0, 0);
    return 1;
  }
  v9 = *(_QWORD *)((*(uint64_t (**)(_DWORD *))(*(_QWORD *)v8 + 40))(v8) + 8);
  if (*(_DWORD *)v9 == 2)
  {
    v6 = *(_QWORD *)(v9 + 8);
    v10 = *(_QWORD *)(v9 + 16);
  }
  else
  {
    v15 = v9 + 8;
    v13 = *(_QWORD *)(v9 + 8);
    v14 = *(_QWORD *)(v15 + 8);
    v16 = v14 != 0;
    if (v14)
      v6 = v13 + 1;
    else
      v6 = v13;
    if (v16 <= v14 - 1)
      v17 = v14 - 1;
    else
      v17 = v14 != 0;
    if (v14 < v17)
      v17 = v14;
    v10 = v17 - v16;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
LABEL_20:
  v203 = 0uLL;
  v202 = 0;
  v201 = 0uLL;
  v199 = -1;
  v200 = 0;
  if (v10 >= 7)
  {
    v24 = *(_DWORD *)v6 == 1685025326 && *(_DWORD *)(v6 + 3) == 1635017060;
    if (!v24 || v10 >= 8 && *(_BYTE *)(v6 + 7) != 46)
    {
      if (v10 != 8)
        goto LABEL_56;
      if (*(_QWORD *)v6 != 0x31617461646F722ELL)
      {
        if (*(_DWORD *)v6 != 2019914798 || *(_BYTE *)(v6 + 4) != 116)
        {
          if (*(_DWORD *)v6 != 1952539694 || *(_BYTE *)(v6 + 4) != 97)
          {
LABEL_96:
            if (*(_DWORD *)v6 != 1936941614 || *(_BYTE *)(v6 + 4) != 46)
            {
              if (v10 < 0xB)
              {
                if (v10 < 6)
                {
                  if (*(_DWORD *)v6 != 1935832110 || *(_BYTE *)(v6 + 4) != 115)
                    goto LABEL_132;
                  goto LABEL_142;
                }
LABEL_122:
                v51 = *(_DWORD *)v6 == 1633973294 && *(_WORD *)(v6 + 4) == 24948;
                if (!v51 || v10 >= 7 && *(_BYTE *)(v6 + 6) != 46)
                {
                  v52 = *(_DWORD *)v6 == 1935832110 && *(_BYTE *)(v6 + 4) == 115;
                  if (!v52 || *(_BYTE *)(v6 + 5) != 46)
                    goto LABEL_132;
                }
LABEL_142:
                v27 = 1027;
                goto LABEL_149;
              }
              v48 = *(_QWORD *)v6 == 0x72615F74696E692ELL && *(_QWORD *)(v6 + 3) == 0x79617272615F7469;
              if (!v48 || v10 >= 0xC && *(_BYTE *)(v6 + 11) != 46)
              {
                v49 = *(_QWORD *)v6 == 0x72615F696E69662ELL && *(_QWORD *)(v6 + 3) == 0x79617272615F696ELL;
                if (!v49 || v10 >= 0xC && *(_BYTE *)(v6 + 11) != 46)
                {
                  if (v10 < 0xE)
                    goto LABEL_122;
                  v50 = *(_QWORD *)v6 == 0x74696E696572702ELL && *(_QWORD *)(v6 + 6) == 0x79617272615F7469;
                  if (!v50 || v10 >= 0xF && *(_BYTE *)(v6 + 14) != 46)
                    goto LABEL_122;
                }
              }
            }
            goto LABEL_148;
          }
          goto LABEL_133;
        }
LABEL_61:
        if (*(_BYTE *)(v6 + 5) == 46)
          goto LABEL_62;
LABEL_86:
        if (*(_DWORD *)v6 != 1952539694 || *(_BYTE *)(v6 + 4) != 97)
        {
LABEL_90:
          if (v10 != 6)
            goto LABEL_96;
          v21 = *(unsigned __int16 *)(v6 + 4);
          v22 = *(_DWORD *)v6 == 1952539694;
          v23 = 12641;
LABEL_92:
          if (!v22 || v21 != v23)
            goto LABEL_96;
LABEL_148:
          v27 = 3;
          goto LABEL_149;
        }
LABEL_133:
        if (*(_BYTE *)(v6 + 5) == 46)
          goto LABEL_148;
        goto LABEL_90;
      }
    }
    v27 = 2;
    goto LABEL_149;
  }
  if (v10 == 5)
  {
    if ((*(_DWORD *)v6 != 1852401198 || *(_BYTE *)(v6 + 4) != 105)
      && (*(_DWORD *)v6 != 1768843566 || *(_BYTE *)(v6 + 4) != 116)
      && (*(_DWORD *)v6 != 2019914798 || *(_BYTE *)(v6 + 4) != 116))
    {
      v21 = *(unsigned __int8 *)(v6 + 4);
      v22 = *(_DWORD *)v6 == 1952539694;
      v23 = 97;
      goto LABEL_92;
    }
LABEL_62:
    v27 = 6;
    goto LABEL_149;
  }
  if (v10 >= 5)
  {
LABEL_56:
    if (*(_DWORD *)v6 != 2019914798 || *(_BYTE *)(v6 + 4) != 116)
      goto LABEL_86;
    goto LABEL_61;
  }
  if (v10 != 4)
  {
LABEL_132:
    v27 = 0;
    goto LABEL_149;
  }
  if (*(_DWORD *)v6 == 1936941614)
    v27 = 3;
  else
    v27 = 0;
LABEL_149:
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 25)
    goto LABEL_235;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  if (a2
    && **(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 3)
  {
    v95 = *(_QWORD *)(a1 + 8);
    *(_QWORD *)&v204 = 0;
    if (((*(uint64_t (**)(uint64_t, uint64_t *, __int128 *))(*(_QWORD *)v95 + 232))(v95, &v200, &v204) & 1) != 0)
      return 1;
    if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 25)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
      goto LABEL_152;
    }
LABEL_235:
    LOBYTE(v96) = 0;
    v97 = 0;
    v91 = 0;
    v72 = 0;
    goto LABEL_236;
  }
LABEL_152:
  v55 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
  v56 = **(_QWORD **)(a1 + 8);
  v185 = v27;
  if (**(_DWORD **)(v55 + 8) != 3)
  {
    if (!*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(void))(v56 + 48))() + 152) + 336)
      || **(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 37)
    {
      v107 = "expected string in directive";
      goto LABEL_550;
    }
    if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 37)
    {
      v72 = 0;
      v91 = 0;
      goto LABEL_226;
    }
    v72 = 0;
    while (1)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
      if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 2)
        break;
      v73 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8);
      if (*(_DWORD *)v73 == 2)
      {
        v74 = *(unsigned __int16 **)(v73 + 8);
        v75 = *(_QWORD *)(v73 + 16);
      }
      else
      {
        v74 = *(unsigned __int16 **)(v73 + 8);
        v76 = *(_QWORD *)(v73 + 16);
        v77 = v76 - 1;
        v78 = v76 != 0;
        if (v76)
          v74 = (unsigned __int16 *)((char *)v74 + 1);
        if (v78 > v77)
          v77 = v76 != 0;
        if (v76 < v77)
          v77 = v76;
        v75 = v77 - v78;
      }
      switch(v75)
      {
        case 3uLL:
          v84 = *v74;
          v85 = *((unsigned __int8 *)v74 + 2);
          if (v84 != 27764 || v85 != 115)
            goto LABEL_423;
          v83 = 1024;
          break;
        case 9uLL:
          v87 = *(_QWORD *)v74;
          v88 = *((unsigned __int8 *)v74 + 8);
          if (v87 != 0x74736E6963657865 || v88 != 114)
            goto LABEL_423;
          v83 = 4;
          break;
        case 5uLL:
          if (*(_DWORD *)v74 == 1869376609 && *((_BYTE *)v74 + 4) == 99)
          {
            v83 = 2;
          }
          else
          {
            v80 = *(_DWORD *)v74;
            v81 = *((unsigned __int8 *)v74 + 4);
            if (v80 != 1953067639 || v81 != 101)
              goto LABEL_423;
            v83 = 1;
          }
          break;
        default:
          goto LABEL_423;
      }
      v72 |= v83;
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
      if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 25)
      {
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
        if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 37)
          continue;
      }
      goto LABEL_222;
    }
LABEL_423:
    v107 = "unknown flag";
    goto LABEL_550;
  }
  v57 = (*(uint64_t (**)(void))(v56 + 40))();
  v58 = *(_QWORD *)(*(_QWORD *)(v57 + 8) + 16);
  v59 = v58 != 0;
  if (v58)
    v60 = (_BYTE *)(*(_QWORD *)(*(_QWORD *)(v57 + 8) + 8) + 1);
  else
    v60 = *(_BYTE **)(*(_QWORD *)(v57 + 8) + 8);
  if (v59 <= v58 - 1)
    v61 = v58 - 1;
  else
    v61 = v58 != 0;
  if (v58 >= v61)
    v62 = v61;
  else
    v62 = *(_QWORD *)(*(_QWORD *)(v57 + 8) + 16);
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  v63 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
  *(_QWORD *)&v204 = v60;
  *((_QWORD *)&v204 + 1) = v62 - v59;
  v64 = sub_1C5E3D4C0((uint64_t)&v204);
  v65 = *((_QWORD *)&v204 + 1);
  if (*((_QWORD *)&v204 + 1))
  {
    v66 = 0;
    v67 = (unsigned __int8 *)v204;
    while (1)
    {
      v68 = *v67;
      if ((v68 - 48) >= 0xA)
      {
        if ((v68 - 97) >= 0x1A)
        {
          if ((v68 - 65) > 0x19)
            break;
          v69 = -55;
        }
        else
        {
          v69 = -87;
        }
      }
      else
      {
        v69 = -48;
      }
      v70 = v69 + v68;
      if (v70 >= v64)
        break;
      v71 = v66 * v64 + v70;
      if (v71 / v64 < v66)
        break;
      ++v67;
      v66 = v71;
      if (!--v65)
      {
        if (v71 >= 0x100000000)
          v72 = 0;
        else
          v72 = v71;
        if (!HIDWORD(v71))
          goto LABEL_222;
        goto LABEL_221;
      }
    }
  }
  v72 = 0;
LABEL_221:
  v90 = v62 - v59;
  if (v62 != v59)
  {
    v91 = 0;
    while (2)
    {
      v108 = (char)*v60;
      if (v108 > 96)
      {
        switch(*v60)
        {
          case 'o':
            v72 |= 0x80u;
            goto LABEL_302;
          case 'p':
          case 'q':
          case 'r':
          case 't':
          case 'u':
          case 'v':
            goto LABEL_423;
          case 's':
LABEL_291:
            v72 |= 0x10000000u;
            goto LABEL_302;
          case 'w':
            v72 |= 1u;
            goto LABEL_302;
          case 'x':
            v72 |= 4u;
            goto LABEL_302;
          case 'y':
LABEL_292:
            v72 |= 0x20000000u;
            goto LABEL_302;
          default:
            switch(*v60)
            {
              case 'a':
                v72 |= 2u;
                goto LABEL_302;
              case 'c':
                goto LABEL_292;
              case 'd':
                goto LABEL_291;
              case 'e':
                v72 |= 0x80000000;
                goto LABEL_302;
              default:
                goto LABEL_423;
            }
        }
      }
      switch(*v60)
      {
        case 'M':
          v72 |= 0x10u;
          goto LABEL_302;
        case 'N':
        case 'O':
        case 'P':
        case 'Q':
          goto LABEL_423;
        case 'R':
          if (*(_DWORD *)(v63 + 60) == 14)
            v72 |= 0x100000u;
          else
            v72 |= 0x200000u;
          goto LABEL_302;
        case 'S':
          v72 |= 0x20u;
          goto LABEL_302;
        case 'T':
          v72 |= 0x400u;
          goto LABEL_302;
        default:
          if (v108 == 63)
          {
            v91 = 1;
          }
          else
          {
            if (v108 != 71)
              goto LABEL_423;
            v72 |= 0x200u;
          }
LABEL_302:
          ++v60;
          if (!--v90)
            goto LABEL_223;
          continue;
      }
    }
  }
LABEL_222:
  v91 = 0;
LABEL_223:
  if (v72 == -1)
    goto LABEL_423;
  if ((v72 & 0x200) != 0 && v91)
  {
    v107 = "Section cannot specifiy a group name while also acting as a member of the last group";
    goto LABEL_550;
  }
LABEL_226:
  v92 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
  if (**(_DWORD **)(v92 + 8) == 25)
  {
    v93 = v92;
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v94 = **(_DWORD **)(v93 + 8);
    if (v94 == 3)
      goto LABEL_563;
    if (v94 != 36 && v94 != 45)
    {
      if (*(_BYTE *)(v93 + 105))
        v107 = "expected '@<type>', '%<type>' or \"<type>\"";
      else
        v107 = "expected '%<type>' or \"<type>\"";
      goto LABEL_550;
    }
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    if (**(_DWORD **)(v93 + 8) != 4)
    {
LABEL_563:
      if ((*(unsigned int (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v203))
      {
        goto LABEL_491;
      }
    }
    else
    {
      v203 = *(_OWORD *)(*(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8))
                                   + 8)
                       + 8);
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    }
  }
  v103 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
  if (*((_QWORD *)&v203 + 1))
  {
    if ((v72 & 0x10) != 0)
    {
      if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 25)
      {
        v107 = "expected the entry size";
        goto LABEL_550;
      }
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
      if (((*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 256))(*(_QWORD *)(a1 + 8), &v202) & 1) != 0)
        return 1;
      if (v202 <= 0)
      {
        v107 = "entry size must be positive";
        goto LABEL_550;
      }
    }
    if ((v72 & 0x200) != 0)
    {
      v104 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
      if (**(_DWORD **)(v104 + 8) != 25)
      {
        v107 = "expected group name";
        goto LABEL_550;
      }
      v105 = v104;
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
      v106 = **(_QWORD **)(a1 + 8);
      if (**(_DWORD **)(v105 + 8) == 4)
      {
        v201 = *(_OWORD *)(*(_QWORD *)((*(uint64_t (**)(void))(v106 + 40))() + 8) + 8);
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
      }
      else if ((*(unsigned int (**)(void))(v106 + 192))())
      {
        v107 = "invalid group name";
        goto LABEL_550;
      }
      if (**(_DWORD **)(v105 + 8) == 25)
      {
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
        v196 = 0uLL;
        if (((*(uint64_t (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v196) & 1) != 0)
        {
          v107 = "invalid linkage";
          goto LABEL_550;
        }
        if (*((_QWORD *)&v196 + 1) != 6
          || (*(_DWORD *)v196 == 1684893539 ? (v109 = *(unsigned __int16 *)(v196 + 4) == 29793) : (v109 = 0), !v109))
        {
          v107 = "Linkage must be 'comdat'";
          goto LABEL_550;
        }
        LOBYTE(v96) = 1;
        if ((v72 & 0x80) == 0)
          goto LABEL_321;
        goto LABEL_316;
      }
    }
  }
  else
  {
    if ((v72 & 0x10) != 0)
    {
      v107 = "Mergeable section must specify the type";
      goto LABEL_550;
    }
    if ((v72 & 0x200) != 0)
    {
      v107 = "Group section must specify the type";
      goto LABEL_550;
    }
    if (**(_DWORD **)(v103 + 8) != 9)
      goto LABEL_277;
  }
  LOBYTE(v96) = 0;
  if ((v72 & 0x80) == 0)
  {
LABEL_321:
    v97 = 0;
    goto LABEL_322;
  }
LABEL_316:
  v110 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
  if (**(_DWORD **)(v110 + 8) != 25)
  {
    v107 = "expected linked-to symbol";
    goto LABEL_550;
  }
  v111 = v110;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  v196 = 0uLL;
  v112 = *(_QWORD *)(v111 + 96);
  v113 = (*(uint64_t (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v196);
  v114 = **(_QWORD **)(a1 + 8);
  if (v113)
  {
    v115 = *(_QWORD *)((*(uint64_t (**)(void))(v114 + 40))() + 8);
    if (*(_QWORD *)(v115 + 16) != 1 || **(_BYTE **)(v115 + 8) != 48)
    {
      v107 = "invalid linked-to symbol";
      goto LABEL_550;
    }
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    goto LABEL_321;
  }
  v178 = (llvm::MCContext *)(*(uint64_t (**)(void))(v114 + 48))();
  v206 = 261;
  v204 = v196;
  v179 = llvm::MCContext::lookupSymbol(v178, (const char **)&v204);
  if (v179 && (v97 = v179, (*(_DWORD *)(v179 + 8) & 0x1C0) == 0x80))
  {
    v180 = *(_QWORD *)v179;
    v181 = *(_QWORD *)v179 & 0xFFFFFFFFFFFFFFF8;
    if ((*(_QWORD *)v97 & 0xFFFFFFFFFFFFFFF8) == 0 && (*(_DWORD *)(v97 + 8) & 0x1C00) == 0x800)
    {
      *(_DWORD *)(v97 + 8) |= 4u;
      llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v97 + 24));
      v180 = *(_QWORD *)v97 & 7 | v181;
      *(_QWORD *)v97 = v180;
    }
    if (v181)
    {
      v182 = v180 & 0xFFFFFFFFFFFFFFF8;
      if ((v180 & 0xFFFFFFFFFFFFFFF8) == 0 && (*(_DWORD *)(v97 + 8) & 0x1C00) == 0x800)
      {
        *(_DWORD *)(v97 + 8) |= 4u;
        llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v97 + 24));
        *(_QWORD *)v97 = *(_QWORD *)v97 & 7 | v182;
      }
      if ((_UNKNOWN *)v182 != llvm::MCSymbol::AbsolutePseudoFragment)
        goto LABEL_322;
    }
  }
  else
  {
    v97 = 0;
  }
  v206 = 1283;
  *(_QWORD *)&v204 = "linked-to symbol is not in a section: ";
  v205 = v196;
  if ((llvm::MCAsmParser::Error(*(_QWORD *)(a1 + 8), v112, (uint64_t)&v204, 0, 0) & 1) != 0)
    return 1;
LABEL_322:
  v27 = v72 | v185;
  v116 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8));
  if (**(_DWORD **)(v116 + 8) != 25)
    goto LABEL_236;
  v117 = v116;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  v196 = 0uLL;
  if ((*(unsigned int (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v196))
  {
LABEL_491:
    v107 = "expected identifier in directive";
    goto LABEL_550;
  }
  if (*((_QWORD *)&v196 + 1) != 6
    || (*(_DWORD *)v196 == 1902734965 ? (v118 = *(unsigned __int16 *)(v196 + 4) == 25973) : (v118 = 0), !v118))
  {
    v107 = "expected 'unique'";
    goto LABEL_550;
  }
  if (**(_DWORD **)(v117 + 8) != 25)
  {
    v107 = "expected commma";
    goto LABEL_550;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  if (!(*(unsigned int (**)(_QWORD, unint64_t *))(**(_QWORD **)(a1 + 8) + 256))(*(_QWORD *)(a1 + 8), &v199))
  {
    if ((v199 & 0x8000000000000000) != 0)
    {
      v107 = "unique id must be positive";
      goto LABEL_550;
    }
    if (v199 > 0xFFFFFFFE)
    {
      v107 = "unique id is too large";
      goto LABEL_550;
    }
LABEL_236:
    if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
      if (*((_QWORD *)&v203 + 1))
      {
        switch(*((_QWORD *)&v203 + 1))
        {
          case 4:
            if (*(_DWORD *)v203 == 1702129518)
              goto LABEL_279;
            goto LABEL_407;
          case 6:
            if (*(_DWORD *)v203 == 1768058734 && *(_WORD *)(v203 + 4) == 29556)
              goto LABEL_421;
            if (*(_DWORD *)v203 != 1769434741 || *(_WORD *)(v203 + 4) != 25710)
              goto LABEL_407;
            LODWORD(v98) = 1879048193;
            goto LABEL_442;
          case 8:
            if (*(_QWORD *)v203 == 0x73746962676F7270)
              goto LABEL_441;
            goto LABEL_407;
          case 0xALL:
            if (*(_QWORD *)v203 == 0x7272615F74696E69 && *(_WORD *)(v203 + 8) == 31073)
              goto LABEL_490;
            if (*(_QWORD *)v203 == 0x7272615F696E6966 && *(_WORD *)(v203 + 8) == 31073)
              goto LABEL_507;
            goto LABEL_407;
          case 0xBLL:
            if (*(_QWORD *)v203 != 0x72646F5F6D766C6CLL || *(_QWORD *)(v203 + 3) != 0x62617472646F5F6DLL)
              goto LABEL_407;
            LODWORD(v98) = 1879002112;
            goto LABEL_442;
          case 0xCLL:
            if (*(_QWORD *)v203 != 0x6D79735F6D766C6CLL || *(_DWORD *)(v203 + 8) != 1953653104)
              goto LABEL_407;
            v125 = 5;
            goto LABEL_399;
          case 0xDLL:
            if (*(_QWORD *)v203 == 0x5F74696E69657270 && *(_QWORD *)(v203 + 5) == 0x79617272615F7469)
              goto LABEL_383;
            goto LABEL_407;
          case 0x10:
            if (*(_QWORD *)v203 != 0x5F62625F6D766C6CLL || *(_QWORD *)(v203 + 8) != 0x70616D5F72646461)
              goto LABEL_407;
            LODWORD(v98) = 1879002120;
            goto LABEL_442;
          case 0x13:
            if (*(_QWORD *)v203 != 0x6E696C5F6D766C6CLL
              || *(_QWORD *)(v203 + 8) != 0x6974706F5F72656BLL
              || *(_QWORD *)(v203 + 11) != 0x736E6F6974706F5FLL)
            {
              goto LABEL_407;
            }
            LODWORD(v98) = 1879002113;
            goto LABEL_442;
          case 0x17:
            if (*(_QWORD *)v203 != 0x6C61635F6D766C6CLL
              || *(_QWORD *)(v203 + 8) != 0x5F68706172675F6CLL
              || *(_QWORD *)(v203 + 15) != 0x656C69666F72705FLL)
            {
              goto LABEL_407;
            }
            v125 = 9;
LABEL_399:
            LODWORD(v98) = v125 | 0x6FFF4C00;
            goto LABEL_442;
          case 0x18:
            if (*(_QWORD *)v203 != 0x7065645F6D766C6CLL
              || *(_QWORD *)(v203 + 8) != 0x6C5F746E65646E65
              || *(_QWORD *)(v203 + 16) != 0x7365697261726269)
            {
              goto LABEL_407;
            }
            LODWORD(v98) = 1879002116;
            goto LABEL_442;
          default:
LABEL_407:
            v204 = v203;
            v134 = sub_1C5E3D4C0((uint64_t)&v204);
            v135 = *((_QWORD *)&v204 + 1);
            if (!*((_QWORD *)&v204 + 1))
              goto LABEL_420;
            v136 = 0;
            v137 = (unsigned __int8 *)v204;
            break;
        }
        while (1)
        {
          v138 = *v137;
          if ((v138 - 48) >= 0xA)
          {
            if ((v138 - 97) >= 0x1A)
            {
              if ((v138 - 65) > 0x19)
                break;
              v139 = -55;
            }
            else
            {
              v139 = -87;
            }
          }
          else
          {
            v139 = -48;
          }
          v140 = v139 + v138;
          if (v140 >= v134)
            break;
          v98 = v136 * v134 + v140;
          if (v98 / v134 < v136)
            break;
          ++v137;
          v136 = v136 * v134 + v140;
          if (!--v135)
          {
            if (!HIDWORD(v98))
              goto LABEL_442;
            break;
          }
        }
LABEL_420:
        v107 = "unknown section type";
        goto LABEL_550;
      }
      if (v10 >= 5)
      {
        if (*(_DWORD *)v6 == 1953459758 && *(_BYTE *)(v6 + 4) == 101)
        {
LABEL_279:
          LODWORD(v98) = 7;
          goto LABEL_442;
        }
        v100 = v10;
        if (v10 >= 0xB)
        {
          v101 = *(_QWORD *)v6 == 0x72615F74696E692ELL && *(_QWORD *)(v6 + 3) == 0x79617272615F7469;
          if (v101 && (v10 < 0xC || *(_BYTE *)(v6 + 11) == 46))
          {
LABEL_490:
            LODWORD(v98) = 14;
            goto LABEL_442;
          }
          v100 = 11;
        }
        if (*(_DWORD *)v6 == 1936941614 && *(_BYTE *)(v6 + 4) == 46)
        {
LABEL_421:
          LODWORD(v98) = 8;
          goto LABEL_442;
        }
        if (*(_DWORD *)v6 == 1935832110 && *(_BYTE *)(v6 + 4) == 115)
        {
          LODWORD(v98) = 8;
          if (v10 < 6
            || ((v141 = *(unsigned __int8 *)(v6 + 5), v141 != 46) ? (LODWORD(v98) = 1) : (LODWORD(v98) = 8),
                v10 < 0xB || v141 == 46))
          {
LABEL_442:
            if (v91)
            {
              v144 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
              v145 = *(unsigned int *)(v144 + 120);
              if ((_DWORD)v145)
              {
                v146 = *(_QWORD *)(*(_QWORD *)(v144 + 112) + 32 * v145 - 32);
                if (v146)
                {
                  v147 = *(_QWORD *)(v146 + 240);
                  v148 = (_BYTE *)(v147 & 0xFFFFFFFFFFFFFFF8);
                  if ((v147 & 0xFFFFFFFFFFFFFFF8) != 0)
                  {
                    if ((*v148 & 4) != 0)
                    {
                      v151 = (uint64_t *)*((_QWORD *)v148 - 1);
                      v152 = *v151;
                      v149 = v151 + 2;
                      v150 = v152;
                    }
                    else
                    {
                      v149 = 0;
                      v150 = 0;
                    }
                    *(_QWORD *)&v201 = v149;
                    *((_QWORD *)&v201 + 1) = v150;
                    v96 = (v147 >> 2) & 1;
                    v27 |= 0x200u;
                  }
                }
              }
            }
            v153 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
            v206 = 261;
            *(_QWORD *)&v204 = v6;
            *((_QWORD *)&v204 + 1) = v10;
            v198 = 261;
            v196 = v201;
            ELFSection = llvm::MCContext::getELFSection(v153, (llvm::Twine *)&v204, v98, v27, v202, (unsigned __int8 *)&v196, v96, v199, (_BYTE *)v97);
            v155 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
            (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v155 + 168))(v155, ELFSection, v200);
            if (!*((_QWORD *)&v203 + 1) || *(_DWORD *)(ELFSection + 224) == (_DWORD)v98)
            {
LABEL_466:
              v162 = v202;
              v163 = *((_QWORD *)&v203 + 1);
              if (!v72 && !v202 && !*((_QWORD *)&v203 + 1))
              {
                v162 = 0;
                goto LABEL_472;
              }
              v164 = *(unsigned int *)(ELFSection + 228);
              if ((_DWORD)v164 == v27)
              {
                if (!v72)
                  goto LABEL_472;
              }
              else
              {
                v195 = 1283;
                v192[0] = "changed section flags for ";
                v193 = v6;
                v194 = v10;
                *(_QWORD *)&v196 = v192;
                v197 = ", expected: 0x";
                v198 = 770;
                if ((_DWORD)v164)
                {
                  v173 = (char *)&v205 + 1;
                  do
                  {
                    *--v173 = a0123456789abcd_6[v164 & 0xF];
                    v174 = v164 > 0xF;
                    v164 >>= 4;
                  }
                  while (v174);
                }
                else
                {
                  v173 = (char *)&v205;
                  LOBYTE(v205) = 48;
                }
                sub_1C4E61270(__p, v173, (char *)&v205 + 1, (char *)&v205 + 1 - v173);
                v176 = v198;
                if (v198 == 1)
                {
                  *(_QWORD *)&v204 = __p;
                  v205 = v191;
                  v206 = 260;
                  v207 = v189;
                  v208 = v190;
                }
                else if ((_BYTE)v198)
                {
                  if (HIBYTE(v198) != 1)
                    v176 = 2;
                  v183 = &v196;
                  if (HIBYTE(v198) == 1)
                    v183 = (__int128 *)v196;
                  *(_QWORD *)&v204 = v183;
                  *((_QWORD *)&v204 + 1) = *((_QWORD *)&v196 + 1);
                  *(_QWORD *)&v205 = __p;
                  LOBYTE(v206) = v176;
                  HIBYTE(v206) = 4;
                }
                else
                {
                  v206 = 256;
                }
                llvm::MCAsmParser::Error(*(_QWORD *)(a1 + 8), v186, (uint64_t)&v204, 0, 0);
                if (v188 < 0)
                  operator delete(__p[0]);
                v162 = v202;
                v163 = *((_QWORD *)&v203 + 1);
                if (!v72)
                {
LABEL_472:
                  if (!v162 && !v163)
                    goto LABEL_476;
                }
              }
              v165 = *(unsigned int *)(ELFSection + 236);
              if (v162 != v165)
              {
                v195 = 1283;
                v192[0] = "changed section entsize for ";
                v193 = v6;
                v194 = v10;
                *(_QWORD *)&v196 = v192;
                v197 = ", expected: ";
                v198 = 770;
                *(_QWORD *)&v204 = &v196;
                *(_QWORD *)&v205 = v165;
                v206 = 2050;
                llvm::MCAsmParser::Error(*(_QWORD *)(a1 + 8), v186, (uint64_t)&v204, 0, 0);
              }
LABEL_476:
              if (*(_BYTE *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8))
                            + 1513)
                && (~*(_DWORD *)(ELFSection + 228) & 6) == 0)
              {
                v166 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
                *(_QWORD *)&v204 = ELFSection;
                result = sub_1C542EB4C((_QWORD *)(v166 + 1520), &v204);
                if (!result)
                  return result;
                if (*(unsigned __int16 *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8))
                                         + 1624) <= 2u)
                {
                  *(_QWORD *)&v204 = "DWARF2 only supports one section per compilation unit";
                  v206 = 259;
                  (*(void (**)(_QWORD, uint64_t, __int128 *, _QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 168))(*(_QWORD *)(a1 + 8), v186, &v204, 0, 0);
                }
                if (!*(_QWORD *)(ELFSection + 8))
                {
                  v168 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
                  *(_QWORD *)&v204 = "tmp";
                  v206 = 259;
                  TempSymbol = llvm::MCContext::createTempSymbol(v168, (uint64_t)&v204, 1);
                  v170 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
                  (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v170 + 192))(v170, TempSymbol, 0);
                  result = 0;
                  *(_QWORD *)(ELFSection + 8) = TempSymbol;
                  return result;
                }
              }
              return 0;
            }
            v156 = *(_DWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8))
                             + 48);
            if (v156 == 42)
            {
              if (v10 == 9)
              {
                v157 = *(unsigned __int8 *)(v6 + 8);
                v158 = *(_QWORD *)v6 == 0x6D6172665F68652ELL;
                v159 = 101;
                goto LABEL_458;
              }
            }
            else if (v10 >= 7 && (v156 & 0xFFFFFFFC) == 0x10)
            {
              v157 = *(_DWORD *)(v6 + 3);
              v158 = *(_DWORD *)v6 == 1650811950;
              v159 = 1600615778;
LABEL_458:
              v161 = !v158 || v157 != v159;
              if ((_DWORD)v98 == 1 && !v161)
                goto LABEL_466;
            }
            v195 = 1283;
            v192[0] = "changed section type for ";
            v193 = v6;
            v194 = v10;
            *(_QWORD *)&v196 = v192;
            v197 = ", expected: 0x";
            v198 = 770;
            v171 = *(unsigned int *)(ELFSection + 224);
            if ((_DWORD)v171)
            {
              v172 = (char *)&v205 + 1;
              do
              {
                *--v172 = a0123456789abcd_6[v171 & 0xF];
                v174 = v171 > 0xF;
                v171 >>= 4;
              }
              while (v174);
            }
            else
            {
              v172 = (char *)&v205;
              LOBYTE(v205) = 48;
            }
            sub_1C4E61270(__p, v172, (char *)&v205 + 1, (char *)&v205 + 1 - v172);
            v175 = v198;
            if (v198 == 1)
            {
              *(_QWORD *)&v204 = __p;
              v205 = v191;
              v206 = 260;
              v207 = v189;
              v208 = v190;
            }
            else if ((_BYTE)v198)
            {
              if (HIBYTE(v198) != 1)
                v175 = 2;
              v177 = &v196;
              if (HIBYTE(v198) == 1)
                v177 = (__int128 *)v196;
              *(_QWORD *)&v204 = v177;
              *((_QWORD *)&v204 + 1) = *((_QWORD *)&v196 + 1);
              *(_QWORD *)&v205 = __p;
              LOBYTE(v206) = v175;
              HIBYTE(v206) = 4;
            }
            else
            {
              v206 = 256;
            }
            llvm::MCAsmParser::Error(*(_QWORD *)(a1 + 8), v186, (uint64_t)&v204, 0, 0);
            if (v188 < 0)
              operator delete(__p[0]);
            goto LABEL_466;
          }
        }
        else if (v10 < 0xB)
        {
          goto LABEL_441;
        }
        v142 = *(_QWORD *)v6 == 0x72615F696E69662ELL && *(_QWORD *)(v6 + 3) == 0x79617272615F696ELL;
        if (v142 && (v10 < 0xC || *(_BYTE *)(v6 + v100) == 46))
        {
LABEL_507:
          LODWORD(v98) = 15;
          goto LABEL_442;
        }
        if (v10 >= 0xE)
        {
          v143 = *(_QWORD *)v6 == 0x74696E696572702ELL && *(_QWORD *)(v6 + 6) == 0x79617272615F7469;
          if (v143 && (v10 < 0xF || *(_BYTE *)(v6 + 14) == 46))
          {
LABEL_383:
            LODWORD(v98) = 16;
            goto LABEL_442;
          }
        }
      }
      else if (v10 == 4)
      {
        if (*(_DWORD *)v6 == 1936941614)
          LODWORD(v98) = 8;
        else
          LODWORD(v98) = 1;
        goto LABEL_442;
      }
LABEL_441:
      LODWORD(v98) = 1;
      goto LABEL_442;
    }
LABEL_277:
    v107 = "unexpected token in directive";
LABEL_550:
    *(_QWORD *)&v204 = v107;
    v206 = 259;
    v184 = *(_QWORD *)(a1 + 8);
    v53 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v184 + 40))(v184) + 96);
    v54 = v184;
    goto LABEL_551;
  }
  return 1;
}

BOOL sub_1C60F62F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  _BOOL8 v7;
  uint64_t v8;

  v6 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  sub_1C62B9A74(v6);
  v7 = sub_1C60F45FC(a1, 1, a4);
  if (v7)
  {
    v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    sub_1C593C604(v8);
  }
  return v7;
}

BOOL sub_1C60F635C(uint64_t a1)
{
  uint64_t v2;
  _BOOL4 v3;
  uint64_t v5;
  uint64_t v6;
  const char *v7;
  __int16 v8;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  v3 = sub_1C593C604(v2);
  if (!v3)
  {
    v7 = ".popsection without corresponding .pushsection";
    v8 = 259;
    v5 = *(_QWORD *)(a1 + 8);
    v6 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 40))(v5);
    llvm::MCAsmParser::Error(v5, *(_QWORD *)(v6 + 96), (uint64_t)&v7, 0, 0);
  }
  return !v3;
}

uint64_t sub_1C60F63E4(uint64_t a1)
{
  uint64_t v2;
  unint64_t Symbol;
  uint64_t v4;
  const char *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD v10[4];
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v12 = 0;
  v13 = 0;
  if ((*(unsigned int (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v12))
  {
    v6 = "expected identifier in directive";
    goto LABEL_8;
  }
  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
  v11 = 261;
  v10[0] = v12;
  v10[1] = v13;
  Symbol = llvm::MCContext::getOrCreateSymbol(v2, (uint64_t)v10);
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 25)
  {
LABEL_6:
    v6 = "unexpected token in directive";
LABEL_8:
    v10[0] = v6;
    v11 = 259;
    v7 = *(_QWORD *)(a1 + 8);
    v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 40))(v7);
    llvm::MCAsmParser::Error(v7, *(_QWORD *)(v8 + 96), (uint64_t)v10, 0, 0);
    return 1;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  v9 = 0;
  v10[0] = 0;
  if (((*(uint64_t (**)(_QWORD, uint64_t *, _QWORD *))(**(_QWORD **)(a1 + 8) + 232))(*(_QWORD *)(a1 + 8), &v9, v10) & 1) == 0)
  {
    if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
      v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
      (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v4 + 424))(v4, Symbol, v9);
      return 0;
    }
    goto LABEL_6;
  }
  return 1;
}

uint64_t sub_1C60F654C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  const char *v11;
  __int16 v12;

  v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  v3 = *(unsigned int *)(v2 + 120);
  if ((_DWORD)v3 && (v4 = *(_QWORD *)(v2 + 112) + 32 * v3, (v5 = *(_QWORD *)(v4 - 16)) != 0))
  {
    v6 = *(_QWORD *)(v4 - 8);
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7 + 168))(v7, v5, v6);
    return 0;
  }
  else
  {
    v11 = ".previous without corresponding .section";
    v12 = 259;
    v9 = *(_QWORD *)(a1 + 8);
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9);
    llvm::MCAsmParser::Error(v9, *(_QWORD *)(v10 + 96), (uint64_t)&v11, 0, 0);
    return 1;
  }
}

uint64_t sub_1C60F6614(uint64_t a1)
{
  uint64_t v2;
  unint64_t Symbol;
  uint64_t v4;
  unint64_t v7;
  uint64_t v13;
  BOOL v14;
  uint64_t v15;
  const char *v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD v26[4];
  __int16 v27;
  uint64_t v28;
  uint64_t v29;

  v28 = 0;
  v29 = 0;
  if ((*(unsigned int (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v28))
  {
    v19 = "expected identifier in directive";
  }
  else
  {
    v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    v27 = 261;
    v26[0] = v28;
    v26[1] = v29;
    Symbol = llvm::MCContext::getOrCreateSymbol(v2, (uint64_t)v26);
    if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 25)
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 2
      && **(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 37
      && **(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 36
      && **(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 3)
    {
      if (!*(_BYTE *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 105))
      {
        v19 = "expected STT_<TYPE_IN_UPPER_CASE>, '#<type>', '%<type>' or \"<type>\"";
        goto LABEL_85;
      }
      if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 45)
      {
        v19 = "expected STT_<TYPE_IN_UPPER_CASE>, '#<type>', '@<type>', '%<type>' or \"<type>\"";
        goto LABEL_85;
      }
    }
    if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 3
      && **(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 2)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    }
    v4 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 96);
    v24 = 0;
    v25 = 0;
    if ((*(unsigned int (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v24))
    {
      v19 = "expected symbol type in directive";
    }
    else
    {
      switch(v25)
      {
        case 6:
          if (*(_DWORD *)v24 == 1701470831 && *(_WORD *)(v24 + 4) == 29795)
            goto LABEL_73;
          if (*(_DWORD *)v24 == 1835888483 && *(_WORD *)(v24 + 4) == 28271)
            goto LABEL_76;
          if (*(_DWORD *)v24 ^ 0x79746F6E | *(unsigned __int16 *)(v24 + 4) ^ 0x6570)
            v7 = 0;
          else
            v7 = 0x100000007;
          goto LABEL_78;
        case 7:
          if (*(_DWORD *)v24 != 1599362131 || *(_DWORD *)(v24 + 3) != 1397511263)
            goto LABEL_83;
          v7 = 0x100000005;
          goto LABEL_78;
        case 8:
          v7 = 0x100000002;
          if (*(_QWORD *)v24 != 0x434E55465F545453 && *(_QWORD *)v24 != 0x6E6F6974636E7566)
            goto LABEL_83;
          goto LABEL_78;
        case 10:
          if (*(_QWORD *)v24 == 0x454A424F5F545453 && *(_WORD *)(v24 + 8) == 21571)
          {
LABEL_73:
            v7 = 0x100000004;
          }
          else if (*(_QWORD *)v24 == 0x656A626F5F736C74 && *(_WORD *)(v24 + 8) == 29795)
          {
            v7 = 0x100000005;
          }
          else if (*(_QWORD *)v24 == 0x4D4D4F435F545453 && *(_WORD *)(v24 + 8) == 20047)
          {
LABEL_76:
            v7 = 0x100000006;
          }
          else
          {
            if (*(_QWORD *)v24 != 0x59544F4E5F545453 || *(_WORD *)(v24 + 8) != 17744)
              goto LABEL_83;
            v7 = 0x100000007;
          }
LABEL_78:
          if (!HIDWORD(v7) || !(_DWORD)v7)
          {
LABEL_83:
            v26[0] = "unsupported attribute in '.type' directive";
            v27 = 259;
            return llvm::MCAsmParser::Error(*(_QWORD *)(a1 + 8), v4, (uint64_t)v26, 0, 0);
          }
          if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
          {
            (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
            v20 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
            (*(void (**)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)v20 + 304))(v20, Symbol, v7);
            return 0;
          }
          v19 = "unexpected token in '.type' directive";
          break;
        case 13:
          v13 = *(_QWORD *)(v24 + 5);
          v14 = *(_QWORD *)v24 == 0x5F554E475F545453;
          v15 = 0x434E5546495F554ELL;
          goto LABEL_67;
        case 17:
          if (*(_QWORD *)v24 != 0x71696E755F756E67
            || *(_QWORD *)(v24 + 8) != 0x63656A626F5F6575
            || *(_BYTE *)(v24 + 16) != 116)
          {
            goto LABEL_83;
          }
          v7 = 0x100000008;
          goto LABEL_78;
        case 21:
          v13 = *(_QWORD *)(v24 + 13);
          v14 = *(_QWORD *)v24 == 0x69646E695F756E67 && *(_QWORD *)(v24 + 8) == 0x6E75665F74636572;
          v15 = 0x6E6F6974636E7566;
LABEL_67:
          if (!v14 || v13 != v15)
            goto LABEL_83;
          v7 = 0x100000003;
          goto LABEL_78;
        default:
          goto LABEL_83;
      }
    }
  }
LABEL_85:
  v26[0] = v19;
  v27 = 259;
  v22 = *(_QWORD *)(a1 + 8);
  v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 40))(v22);
  llvm::MCAsmParser::Error(v22, *(_QWORD *)(v23 + 96), (uint64_t)v26, 0, 0);
  return 1;
}

uint64_t sub_1C60F6BB0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  __int16 v15;

  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 3)
    goto LABEL_16;
  v2 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8);
  if (*(_DWORD *)v2 == 2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    v4 = *(_QWORD *)(v2 + 16);
  }
  else
  {
    v7 = v2 + 8;
    v5 = *(_QWORD *)(v2 + 8);
    v6 = *(_QWORD *)(v7 + 8);
    v8 = v6 != 0;
    v3 = v6 ? v5 + 1 : v5;
    v9 = v8 <= v6 - 1 ? v6 - 1 : v6 != 0;
    if (v6 < v9)
      v9 = v6;
    v4 = v9 - v8;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v10 + 672))(v10, v3, v4);
    return 0;
  }
  else
  {
LABEL_16:
    v14 = "unexpected token in '.ident' directive";
    v15 = 259;
    v12 = *(_QWORD *)(a1 + 8);
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
    llvm::MCAsmParser::Error(v12, *(_QWORD *)(v13 + 96), (uint64_t)&v14, 0, 0);
    return 1;
  }
}

uint64_t sub_1C60F6CF8(uint64_t a1)
{
  char v2;
  const char *v3;
  _BYTE *v4;
  _BYTE *v5;
  _BOOL8 v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t Symbol;
  uint64_t v12;
  uint64_t v13;
  _QWORD v14[4];
  __int16 v15;
  uint64_t v16;
  uint64_t v17;
  void *__s;
  size_t __n;
  uint64_t v20;
  uint64_t v21;

  v20 = 0;
  v21 = 0;
  __s = 0;
  __n = 0;
  v16 = 0;
  v17 = 0;
  if ((*(unsigned int (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v20))
    goto LABEL_4;
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 25)
  {
    v3 = "expected a comma";
    goto LABEL_20;
  }
  v2 = *(_BYTE *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 105);
  *(_BYTE *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 105) = 1;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  *(_BYTE *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 105) = v2;
  if ((*(unsigned int (**)(_QWORD, void **))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &__s))
  {
LABEL_4:
    v3 = "expected identifier in directive";
  }
  else
  {
    if (__n)
    {
      v4 = __s;
      v5 = memchr(__s, 64, __n);
      if (v5)
      {
        if (v5 - v4 != -1)
        {
          v6 = llvm::StringRef::find((uint64_t *)&__s, "@@@", 3uLL, 0) == -1;
          if (llvm::MCAsmParser::parseOptionalToken(*(llvm::MCAsmParser **)(a1 + 8), 25))
          {
            if (((*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v16) & 1) != 0|| v17 != 6|| (*(_DWORD *)v16 == 1869440370 ? (v7 = *(unsigned __int16 *)(v16 + 4) == 25974) : (v7 = 0), !v7))
            {
              v3 = "expected 'remove'";
              goto LABEL_20;
            }
            v6 = 0;
          }
          llvm::MCAsmParser::parseOptionalToken(*(llvm::MCAsmParser **)(a1 + 8), 9);
          v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
          v9 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
          v15 = 261;
          v14[0] = v20;
          v14[1] = v21;
          Symbol = llvm::MCContext::getOrCreateSymbol(v9, (uint64_t)v14);
          (*(void (**)(uint64_t, unint64_t, void *, size_t, _BOOL8))(*(_QWORD *)v8 + 432))(v8, Symbol, __s, __n, v6);
          return 0;
        }
      }
    }
    v3 = "expected a '@' in the name";
  }
LABEL_20:
  v14[0] = v3;
  v15 = 259;
  v12 = *(_QWORD *)(a1 + 8);
  v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
  llvm::MCAsmParser::Error(v12, *(_QWORD *)(v13 + 96), (uint64_t)v14, 0, 0);
  return 1;
}

BOOL sub_1C60F6F48(uint64_t a1)
{
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t ELFSection;
  uint64_t v15;
  __n128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const char *v26;
  __int16 v27;
  unsigned __int8 v28[32];
  __int16 v29;

  v2 = **(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8);
  if (v2 == 3)
  {
    v5 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8);
    if (*(_DWORD *)v5 == 2)
    {
      v6 = *(_QWORD *)(v5 + 8);
      v7 = *(_QWORD *)(v5 + 16);
    }
    else
    {
      v10 = v5 + 8;
      v8 = *(_QWORD *)(v5 + 8);
      v9 = *(_QWORD *)(v10 + 8);
      v11 = v9 != 0;
      if (v9)
        v6 = v8 + 1;
      else
        v6 = v8;
      if (v11 <= v9 - 1)
        v12 = v9 - 1;
      else
        v12 = v9 != 0;
      if (v9 < v12)
        v12 = v9;
      v7 = v12 - v11;
    }
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    v26 = ".note";
    v27 = 259;
    v29 = 257;
    ELFSection = llvm::MCContext::getELFSection(v13, (llvm::Twine *)&v26, 7, 0, 0, v28, 0, -1, 0);
    v15 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    v16 = sub_1C62B9A74(v15);
    v17 = (*(uint64_t (**)(_QWORD, __n128))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8), v16);
    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v17 + 168))(v17, ELFSection, 0);
    v18 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v18 + 512))(v18, v7 + 1, 4);
    v19 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v19 + 512))(v19, 0, 4);
    v20 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v20 + 512))(v20, 1, 4);
    v21 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v21 + 488))(v21, v6, v7);
    v22 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v22 + 512))(v22, 0, 1);
    v23 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v23 + 632))(v23, 4, 0, 1, 0);
    v24 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    sub_1C593C604(v24);
  }
  else
  {
    *(_QWORD *)v28 = "unexpected token in '.version' directive";
    v29 = 259;
    v3 = *(_QWORD *)(a1 + 8);
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3);
    llvm::MCAsmParser::Error(v3, *(_QWORD *)(v4 + 96), (uint64_t)v28, 0, 0);
  }
  return v2 != 3;
}

uint64_t sub_1C60F71C4(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t Symbol;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  __int16 v18;
  const char *v19;
  uint64_t v20;

  v19 = 0;
  v20 = 0;
  if ((*(unsigned int (**)(_QWORD, const char **))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v19))
  {
    v9 = "expected identifier in directive";
LABEL_8:
    v16 = v9;
    v18 = 259;
    v10 = *(_QWORD *)(a1 + 8);
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
    llvm::MCAsmParser::Error(v10, *(_QWORD *)(v11 + 96), (uint64_t)&v16, 0, 0);
    return 1;
  }
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 25)
  {
    v9 = "expected a comma";
    goto LABEL_8;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  v14 = 0;
  v15 = 0;
  v2 = (*(uint64_t (**)(_QWORD, const char **))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v14);
  if ((_DWORD)v2)
  {
    v16 = "expected identifier in directive";
    v18 = 259;
    v12 = *(_QWORD *)(a1 + 8);
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
    llvm::MCAsmParser::Error(v12, *(_QWORD *)(v13 + 96), (uint64_t)&v16, 0, 0);
  }
  else
  {
    v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    v18 = 261;
    v16 = v19;
    v17 = v20;
    Symbol = llvm::MCContext::getOrCreateSymbol(v3, (uint64_t)&v16);
    v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    v18 = 261;
    v16 = v14;
    v17 = v15;
    v6 = llvm::MCContext::getOrCreateSymbol(v5, (uint64_t)&v16);
    v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    (*(void (**)(uint64_t, unint64_t, unint64_t))(*(_QWORD *)v7 + 296))(v7, Symbol, v6);
  }
  return v2;
}

uint64_t sub_1C60F7370(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t Symbol;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD v19[4];
  __int16 v20;
  uint64_t v21;
  uint64_t v22;

  v4 = 0;
  switch(a3)
  {
    case 5:
      v5 = *(_DWORD *)a2 ^ 0x6165772E | *(unsigned __int8 *)(a2 + 4) ^ 0x6B;
      v6 = 0x100000017;
      goto LABEL_4;
    case 6:
      v5 = *(_DWORD *)a2 ^ 0x636F6C2E | *(unsigned __int16 *)(a2 + 4) ^ 0x6C61;
      v6 = 0x100000010;
LABEL_4:
      v7 = v5 == 0;
      goto LABEL_11;
    case 7:
      v4 = 0x10000000CLL;
      if (*(_DWORD *)a2 ^ 0x6469682E | *(_DWORD *)(a2 + 3) ^ 0x6E656464)
        v4 = 0;
      break;
    case 9:
      v8 = *(_QWORD *)a2 ^ 0x616E7265746E692ELL | *(unsigned __int8 *)(a2 + 8) ^ 0x6CLL;
      v6 = 0x10000000ELL;
      goto LABEL_10;
    case 10:
      v8 = *(_QWORD *)a2 ^ 0x746365746F72702ELL | *(unsigned __int16 *)(a2 + 8) ^ 0x6465;
      v6 = 0x100000015;
LABEL_10:
      v7 = v8 == 0;
LABEL_11:
      if (v7)
        v4 = v6;
      else
        v4 = 0;
      break;
    default:
      break;
  }
  if (v4 <= 0x100000000)
    v9 = 0x100000000;
  else
    v9 = v4;
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
  {
LABEL_18:
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    return 0;
  }
  v21 = 0;
  v22 = 0;
  if (((*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v21) & 1) != 0)
  {
LABEL_28:
    v16 = "expected identifier in directive";
    goto LABEL_29;
  }
  while (1)
  {
    v11 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 8) + 104))(*(_QWORD *)(a1 + 8), v21, v22);
    v12 = **(_QWORD **)(a1 + 8);
    if (v11)
    {
      if (**(_DWORD **)((*(uint64_t (**)(void))(v12 + 40))() + 8) == 9)
        goto LABEL_18;
      goto LABEL_27;
    }
    v13 = (*(uint64_t (**)(void))(v12 + 48))();
    v20 = 261;
    v19[0] = v21;
    v19[1] = v22;
    Symbol = llvm::MCContext::getOrCreateSymbol(v13, (uint64_t)v19);
    v15 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v15 + 304))(v15, Symbol, v9);
    if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
      goto LABEL_18;
    if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 25)
      break;
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
LABEL_27:
    v21 = 0;
    v22 = 0;
    if (((*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v21) & 1) != 0)
      goto LABEL_28;
  }
  v16 = "unexpected token in directive";
LABEL_29:
  v19[0] = v16;
  v20 = 259;
  v17 = *(_QWORD *)(a1 + 8);
  v18 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17);
  llvm::MCAsmParser::Error(v17, *(_QWORD *)(v18 + 96), (uint64_t)v19, 0, 0);
  return 1;
}

uint64_t sub_1C60F7678(uint64_t a1)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[4];
  __int16 v9;
  uint64_t v10;

  v10 = 0;
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 9)
  {
    v2 = *(_QWORD *)(a1 + 8);
    v8[0] = 0;
    if (((*(uint64_t (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v2 + 232))(v2, &v10, v8) & 1) != 0)
      return 1;
  }
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 9)
  {
    v8[0] = "unexpected token in directive";
    v9 = 259;
    v6 = *(_QWORD *)(a1 + 8);
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
    llvm::MCAsmParser::Error(v6, *(_QWORD *)(v7 + 96), (uint64_t)v8, 0, 0);
    return 1;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  v5 = *(unsigned int *)(v4 + 120);
  if ((_DWORD)v5)
    (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v4 + 168))(v4, *(_QWORD *)(*(_QWORD *)(v4 + 112) + 32 * v5 - 32), v10);
  return 0;
}

llvm::MCAsmLexer *llvm::MCAsmLexer::MCAsmLexer(llvm::MCAsmLexer *this)
{
  __int128 v3;
  int v4;

  *(_QWORD *)this = &unk_1E81AE198;
  *((_QWORD *)this + 1) = (char *)this + 24;
  *((_QWORD *)this + 2) = 0x100000000;
  *((_OWORD *)this + 4) = 0u;
  *((_OWORD *)this + 5) = 0u;
  *((_QWORD *)this + 12) = 0;
  *((_BYTE *)this + 104) = 1;
  *((_WORD *)this + 53) = 256;
  *((_DWORD *)this + 27) = 0;
  *((_BYTE *)this + 112) = 0;
  *((_DWORD *)this + 29) = 10;
  *((_WORD *)this + 60) = 0;
  *((_QWORD *)this + 16) = 0;
  v4 = 11;
  v3 = 0uLL;
  sub_1C63EAABC((uint64_t)this + 8, &v4, &v3);
  return this;
}

void llvm::MCAsmLexer::~MCAsmLexer(llvm::MCAsmLexer *this)
{
  *(_QWORD *)this = &unk_1E81AE198;
  if (*((char *)this + 95) < 0)
    operator delete(*((void **)this + 9));
  sub_1C63EAB28((char **)this + 1);
}

uint64_t llvm::AsmToken::getLocRange(llvm::AsmToken *this)
{
  return *((_QWORD *)this + 1);
}

llvm::raw_ostream *llvm::AsmToken::dump(llvm::AsmToken *this, llvm::raw_ostream *a2)
{
  uint64_t v4;
  const char *v5;
  uint64_t v6;
  uint64_t v7;
  const char *v8;
  llvm::raw_ostream *v9;
  size_t v10;
  _QWORD *v11;
  uint64_t v12;
  int *v13;
  _QWORD *v14;
  int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  llvm::raw_ostream *v21;
  size_t v22;
  _QWORD *v23;
  _OWORD *v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  llvm::raw_ostream *v28;
  void *v29;
  unint64_t v30;
  _WORD *v31;
  uint64_t v32;
  llvm::raw_ostream *result;
  _WORD *v34;
  __int16 v35;
  int v36;
  int v37;
  const char *v38;
  int v39;
  char v40;
  const char *v41;
  unsigned __int16 v42;
  int v43;
  int v44;
  const char *v45;
  uint64_t v46;
  uint64_t v47;
  const char *v48;
  const char *v49;
  const char *v50;
  __int16 v51;
  const char *v52;
  unsigned __int16 v53;
  unsigned __int16 v54;

  switch(*(_DWORD *)this)
  {
    case 0:
      v4 = *((_QWORD *)a2 + 4);
      if ((unint64_t)(*((_QWORD *)a2 + 3) - v4) <= 2)
      {
        v5 = "Eof";
        goto LABEL_122;
      }
      *(_BYTE *)(v4 + 2) = 102;
      v35 = 28485;
      goto LABEL_232;
    case 1:
      v6 = *((_QWORD *)a2 + 4);
      if ((unint64_t)(*((_QWORD *)a2 + 3) - v6) <= 4)
      {
        v5 = "error";
        goto LABEL_103;
      }
      *(_BYTE *)(v6 + 4) = 114;
      v36 = 1869771365;
      goto LABEL_220;
    case 2:
      v7 = *((_QWORD *)a2 + 4);
      if ((unint64_t)(*((_QWORD *)a2 + 3) - v7) <= 0xB)
      {
        v8 = "identifier: ";
        v9 = a2;
        v10 = 12;
        goto LABEL_86;
      }
      *(_DWORD *)(v7 + 8) = 540701285;
      *(_QWORD *)v7 = *(_QWORD *)"identifier: ";
      v29 = (void *)(*((_QWORD *)a2 + 4) + 12);
      goto LABEL_211;
    case 3:
      v11 = (_QWORD *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v11 <= 7uLL)
      {
        v8 = "string: ";
        v9 = a2;
        v10 = 8;
        goto LABEL_86;
      }
      *v11 = 0x203A676E69727473;
      v29 = (void *)(*((_QWORD *)a2 + 4) + 8);
      goto LABEL_211;
    case 4:
      v12 = *((_QWORD *)a2 + 4);
      if ((unint64_t)(*((_QWORD *)a2 + 3) - v12) <= 4)
      {
        v8 = "int: ";
        v9 = a2;
        v10 = 5;
        goto LABEL_86;
      }
      *(_BYTE *)(v12 + 4) = 32;
      *(_DWORD *)v12 = 980708969;
      v29 = (void *)(*((_QWORD *)a2 + 4) + 5);
      goto LABEL_211;
    case 5:
      v17 = *((_QWORD *)a2 + 4);
      if ((unint64_t)(*((_QWORD *)a2 + 3) - v17) <= 5)
      {
        v5 = "BigNum";
        goto LABEL_112;
      }
      *(_WORD *)(v17 + 4) = 28021;
      v43 = 1315400002;
      goto LABEL_226;
    case 6:
      v27 = *((_QWORD *)a2 + 4);
      if ((unint64_t)(*((_QWORD *)a2 + 3) - v27) > 5)
      {
        *(_WORD *)(v27 + 4) = 8250;
        *(_DWORD *)v27 = 1818322290;
        v29 = (void *)(*((_QWORD *)a2 + 4) + 6);
LABEL_211:
        *((_QWORD *)a2 + 4) = v29;
        v28 = a2;
      }
      else
      {
        v8 = "real: ";
        v9 = a2;
        v10 = 6;
LABEL_86:
        v28 = llvm::raw_ostream::write(v9, v8, v10);
        v29 = (void *)*((_QWORD *)v28 + 4);
      }
      v5 = (const char *)*((_QWORD *)this + 1);
      v30 = *((_QWORD *)this + 2);
      if (v30 > *((_QWORD *)v28 + 3) - (_QWORD)v29)
      {
        v21 = v28;
        v22 = *((_QWORD *)this + 2);
        goto LABEL_162;
      }
      if (v30)
      {
        memcpy(v29, v5, *((_QWORD *)this + 2));
        *((_QWORD *)v28 + 4) += v30;
      }
      goto LABEL_163;
    case 7:
      v13 = (int *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v13 <= 6uLL)
      {
        v5 = "Comment";
        goto LABEL_131;
      }
      *(int *)((char *)v13 + 3) = 1953391981;
      v37 = 1835888451;
      goto LABEL_238;
    case 8:
      v23 = (_QWORD *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v23 <= 0xCuLL)
      {
        v5 = "HashDirective";
        goto LABEL_161;
      }
      v48 = "HashDirective";
      goto LABEL_256;
    case 9:
      v14 = (_QWORD *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v14 <= 0xDuLL)
      {
        v5 = "EndOfStatement";
        goto LABEL_155;
      }
      v38 = "EndOfStatement";
      goto LABEL_252;
    case 0xA:
      v6 = *((_QWORD *)a2 + 4);
      if ((unint64_t)(*((_QWORD *)a2 + 3) - v6) <= 4)
      {
        v5 = "Colon";
        goto LABEL_103;
      }
      *(_BYTE *)(v6 + 4) = 110;
      v36 = 1869377347;
      goto LABEL_220;
    case 0xB:
      v6 = *((_QWORD *)a2 + 4);
      if ((unint64_t)(*((_QWORD *)a2 + 3) - v6) <= 4)
      {
        v5 = "Space";
        goto LABEL_103;
      }
      *(_BYTE *)(v6 + 4) = 101;
      v36 = 1667330131;
      goto LABEL_220;
    case 0xC:
      v15 = (int *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v15 <= 3uLL)
      {
        v5 = "Plus";
        goto LABEL_125;
      }
      v39 = 1937075280;
      goto LABEL_234;
    case 0xD:
      v6 = *((_QWORD *)a2 + 4);
      if ((unint64_t)(*((_QWORD *)a2 + 3) - v6) <= 4)
      {
        v5 = "Minus";
        goto LABEL_103;
      }
      *(_BYTE *)(v6 + 4) = 115;
      v36 = 1970170189;
      goto LABEL_220;
    case 0xE:
      v6 = *((_QWORD *)a2 + 4);
      if ((unint64_t)(*((_QWORD *)a2 + 3) - v6) <= 4)
      {
        v5 = "Tilde";
        goto LABEL_103;
      }
      *(_BYTE *)(v6 + 4) = 101;
      v36 = 1684826452;
      goto LABEL_220;
    case 0xF:
      v6 = *((_QWORD *)a2 + 4);
      if ((unint64_t)(*((_QWORD *)a2 + 3) - v6) <= 4)
      {
        v5 = "Slash";
        goto LABEL_103;
      }
      *(_BYTE *)(v6 + 4) = 104;
      v36 = 1935764563;
      goto LABEL_220;
    case 0x10:
      v16 = *((_QWORD *)a2 + 4);
      if ((unint64_t)(*((_QWORD *)a2 + 3) - v16) <= 8)
      {
        v5 = "BackSlash";
        goto LABEL_128;
      }
      v40 = 104;
      v41 = "BackSlash";
      goto LABEL_236;
    case 0x11:
      v17 = *((_QWORD *)a2 + 4);
      if ((unint64_t)(*((_QWORD *)a2 + 3) - v17) <= 5)
      {
        v5 = "LParen";
        goto LABEL_112;
      }
      *(_WORD *)(v17 + 4) = 28261;
      v42 = 20556;
      goto LABEL_216;
    case 0x12:
      v17 = *((_QWORD *)a2 + 4);
      if ((unint64_t)(*((_QWORD *)a2 + 3) - v17) <= 5)
      {
        v5 = "RParen";
        goto LABEL_112;
      }
      *(_WORD *)(v17 + 4) = 28261;
      v42 = 20562;
LABEL_216:
      v43 = v42 | 0x72610000;
      goto LABEL_226;
    case 0x13:
      v6 = *((_QWORD *)a2 + 4);
      if ((unint64_t)(*((_QWORD *)a2 + 3) - v6) <= 4)
      {
        v5 = "LBrac";
        goto LABEL_103;
      }
      *(_BYTE *)(v6 + 4) = 99;
      v53 = 16972;
      goto LABEL_219;
    case 0x14:
      v6 = *((_QWORD *)a2 + 4);
      if ((unint64_t)(*((_QWORD *)a2 + 3) - v6) <= 4)
      {
        v5 = "RBrac";
        goto LABEL_103;
      }
      *(_BYTE *)(v6 + 4) = 99;
      v53 = 16978;
LABEL_219:
      v36 = v53 | 0x61720000;
      goto LABEL_220;
    case 0x15:
      v17 = *((_QWORD *)a2 + 4);
      if ((unint64_t)(*((_QWORD *)a2 + 3) - v17) <= 5)
      {
        v5 = "LCurly";
        goto LABEL_112;
      }
      *(_WORD *)(v17 + 4) = 31084;
      v54 = 17228;
      goto LABEL_223;
    case 0x16:
      v17 = *((_QWORD *)a2 + 4);
      if ((unint64_t)(*((_QWORD *)a2 + 3) - v17) <= 5)
      {
        v5 = "RCurly";
        goto LABEL_112;
      }
      *(_WORD *)(v17 + 4) = 31084;
      v54 = 17234;
LABEL_223:
      v43 = v54 | 0x72750000;
      goto LABEL_226;
    case 0x17:
      v15 = (int *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v15 <= 3uLL)
      {
        v5 = "Star";
        goto LABEL_125;
      }
      v39 = 1918989395;
      goto LABEL_234;
    case 0x18:
      v4 = *((_QWORD *)a2 + 4);
      if ((unint64_t)(*((_QWORD *)a2 + 3) - v4) <= 2)
      {
        v5 = "Dot";
        goto LABEL_122;
      }
      *(_BYTE *)(v4 + 2) = 116;
      v35 = 28484;
      goto LABEL_232;
    case 0x19:
      v6 = *((_QWORD *)a2 + 4);
      if ((unint64_t)(*((_QWORD *)a2 + 3) - v6) <= 4)
      {
        v5 = "Comma";
        goto LABEL_103;
      }
      *(_BYTE *)(v6 + 4) = 97;
      v36 = 1835888451;
      goto LABEL_220;
    case 0x1A:
      v17 = *((_QWORD *)a2 + 4);
      if ((unint64_t)(*((_QWORD *)a2 + 3) - v17) <= 5)
      {
        v5 = "Dollar";
        goto LABEL_112;
      }
      *(_WORD *)(v17 + 4) = 29281;
      v43 = 1819045700;
      goto LABEL_226;
    case 0x1B:
      v6 = *((_QWORD *)a2 + 4);
      if ((unint64_t)(*((_QWORD *)a2 + 3) - v6) <= 4)
      {
        v5 = "Equal";
        goto LABEL_103;
      }
      *(_BYTE *)(v6 + 4) = 108;
      v36 = 1635086661;
      goto LABEL_220;
    case 0x1C:
      v26 = *((_QWORD *)a2 + 4);
      if ((unint64_t)(*((_QWORD *)a2 + 3) - v26) <= 9)
      {
        v5 = "EqualEqual";
        goto LABEL_142;
      }
      v51 = 27745;
      v52 = "EqualEqual";
      goto LABEL_245;
    case 0x1D:
      v15 = (int *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v15 <= 3uLL)
      {
        v5 = "Pipe";
        goto LABEL_125;
      }
      v39 = 1701865808;
      goto LABEL_234;
    case 0x1E:
      v19 = (uint64_t *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v19 <= 7uLL)
      {
        v5 = "PipePipe";
        goto LABEL_119;
      }
      v46 = 0x6570695065706950;
      goto LABEL_230;
    case 0x1F:
      v6 = *((_QWORD *)a2 + 4);
      if ((unint64_t)(*((_QWORD *)a2 + 3) - v6) <= 4)
      {
        v5 = "Caret";
LABEL_103:
        v21 = a2;
        v22 = 5;
        goto LABEL_162;
      }
      *(_BYTE *)(v6 + 4) = 116;
      v36 = 1701994819;
LABEL_220:
      *(_DWORD *)v6 = v36;
      v47 = *((_QWORD *)a2 + 4) + 5;
      goto LABEL_257;
    case 0x20:
      v4 = *((_QWORD *)a2 + 4);
      if ((unint64_t)(*((_QWORD *)a2 + 3) - v4) <= 2)
      {
        v5 = "Amp";
LABEL_122:
        v21 = a2;
        v22 = 3;
        goto LABEL_162;
      }
      *(_BYTE *)(v4 + 2) = 112;
      v35 = 27969;
LABEL_232:
      *(_WORD *)v4 = v35;
      v47 = *((_QWORD *)a2 + 4) + 3;
      goto LABEL_257;
    case 0x21:
      v17 = *((_QWORD *)a2 + 4);
      if ((unint64_t)(*((_QWORD *)a2 + 3) - v17) <= 5)
      {
        v5 = "AmpAmp";
LABEL_112:
        v21 = a2;
        v22 = 6;
        goto LABEL_162;
      }
      *(_WORD *)(v17 + 4) = 28781;
      v43 = 1097887041;
LABEL_226:
      *(_DWORD *)v17 = v43;
      v47 = *((_QWORD *)a2 + 4) + 6;
      goto LABEL_257;
    case 0x22:
      v13 = (int *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v13 <= 6uLL)
      {
        v5 = "Exclaim";
        goto LABEL_131;
      }
      *(int *)((char *)v13 + 3) = 1835622764;
      v37 = 1818458181;
      goto LABEL_238;
    case 0x23:
      v18 = *((_QWORD *)a2 + 4);
      if ((unint64_t)(*((_QWORD *)a2 + 3) - v18) <= 0xB)
      {
        v5 = "ExclaimEqual";
        goto LABEL_136;
      }
      v44 = 1818326385;
      v45 = "ExclaimEqual";
      goto LABEL_241;
    case 0x24:
      v13 = (int *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v13 <= 6uLL)
      {
        v5 = "Percent";
        goto LABEL_131;
      }
      *(int *)((char *)v13 + 3) = 1953391971;
      v37 = 1668441424;
      goto LABEL_238;
    case 0x25:
      v15 = (int *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v15 <= 3uLL)
      {
        v5 = "Hash";
        goto LABEL_125;
      }
      v39 = 1752392008;
      goto LABEL_234;
    case 0x26:
      v15 = (int *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v15 <= 3uLL)
      {
        v5 = "Less";
LABEL_125:
        v21 = a2;
        v22 = 4;
        goto LABEL_162;
      }
      v39 = 1936942412;
LABEL_234:
      *v15 = v39;
      v47 = *((_QWORD *)a2 + 4) + 4;
      goto LABEL_257;
    case 0x27:
      v16 = *((_QWORD *)a2 + 4);
      if ((unint64_t)(*((_QWORD *)a2 + 3) - v16) <= 8)
      {
        v5 = "LessEqual";
        goto LABEL_128;
      }
      v40 = 108;
      v41 = "LessEqual";
      goto LABEL_236;
    case 0x28:
      v19 = (uint64_t *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v19 <= 7uLL)
      {
        v5 = "LessLess";
LABEL_119:
        v21 = a2;
        v22 = 8;
        goto LABEL_162;
      }
      v46 = 0x7373654C7373654CLL;
LABEL_230:
      *v19 = v46;
      v47 = *((_QWORD *)a2 + 4) + 8;
      goto LABEL_257;
    case 0x29:
      v20 = *((_QWORD *)a2 + 4);
      if ((unint64_t)(*((_QWORD *)a2 + 3) - v20) <= 0xA)
      {
        v5 = "LessGreater";
        v21 = a2;
        v22 = 11;
        goto LABEL_162;
      }
      *(_DWORD *)(v20 + 7) = 1919251553;
      *(_QWORD *)v20 = *(_QWORD *)"LessGreater";
      v47 = *((_QWORD *)a2 + 4) + 11;
      goto LABEL_257;
    case 0x2A:
      v13 = (int *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v13 <= 6uLL)
      {
        v5 = "Greater";
LABEL_131:
        v21 = a2;
        v22 = 7;
        goto LABEL_162;
      }
      *(int *)((char *)v13 + 3) = 1919251553;
      v37 = 1634038343;
LABEL_238:
      *v13 = v37;
      v47 = *((_QWORD *)a2 + 4) + 7;
      goto LABEL_257;
    case 0x2B:
      v18 = *((_QWORD *)a2 + 4);
      if ((unint64_t)(*((_QWORD *)a2 + 3) - v18) <= 0xB)
      {
        v5 = "GreaterEqual";
        goto LABEL_136;
      }
      v44 = 1818326385;
      v45 = "GreaterEqual";
      goto LABEL_241;
    case 0x2C:
      v14 = (_QWORD *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v14 <= 0xDuLL)
      {
        v5 = "GreaterGreater";
        goto LABEL_155;
      }
      v38 = "GreaterGreater";
      goto LABEL_252;
    case 0x2D:
      v31 = (_WORD *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v31 <= 1uLL)
      {
        v5 = "At";
        v21 = a2;
        v22 = 2;
        goto LABEL_162;
      }
      *v31 = 29761;
      v47 = *((_QWORD *)a2 + 4) + 2;
      goto LABEL_257;
    case 0x2E:
      v18 = *((_QWORD *)a2 + 4);
      if ((unint64_t)(*((_QWORD *)a2 + 3) - v18) <= 0xB)
      {
        v5 = "MinusGreater";
        goto LABEL_136;
      }
      v44 = 1919251553;
      v45 = "MinusGreater";
      goto LABEL_241;
    case 0x2F:
      v23 = (_QWORD *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v23 <= 0xCuLL)
      {
        v5 = "PercentCall16";
        goto LABEL_161;
      }
      v48 = "PercentCall16";
      goto LABEL_256;
    case 0x30:
      v14 = (_QWORD *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v14 <= 0xDuLL)
      {
        v5 = "PercentCall_Hi";
        goto LABEL_155;
      }
      v38 = "PercentCall_Hi";
      goto LABEL_252;
    case 0x31:
      v14 = (_QWORD *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v14 <= 0xDuLL)
      {
        v5 = "PercentCall_Lo";
        goto LABEL_155;
      }
      v38 = "PercentCall_Lo";
      goto LABEL_252;
    case 0x32:
      v24 = (_OWORD *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v24 <= 0xFuLL)
      {
        v5 = "PercentDtprel_Hi";
        goto LABEL_139;
      }
      v49 = "PercentDtprel_Hi";
      goto LABEL_243;
    case 0x33:
      v24 = (_OWORD *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v24 <= 0xFuLL)
      {
        v5 = "PercentDtprel_Lo";
LABEL_139:
        v21 = a2;
        v22 = 16;
        goto LABEL_162;
      }
      v49 = "PercentDtprel_Lo";
LABEL_243:
      *v24 = *(_OWORD *)v49;
      v47 = *((_QWORD *)a2 + 4) + 16;
      goto LABEL_257;
    case 0x34:
      v26 = *((_QWORD *)a2 + 4);
      if ((unint64_t)(*((_QWORD *)a2 + 3) - v26) <= 9)
      {
        v5 = "PercentGot";
        goto LABEL_142;
      }
      v51 = 29807;
      v52 = "PercentGot";
      goto LABEL_245;
    case 0x35:
      v25 = (_QWORD *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v25 <= 0xEuLL)
      {
        v5 = "PercentGot_Disp";
        goto LABEL_158;
      }
      v50 = "PercentGot_Disp";
      goto LABEL_254;
    case 0x36:
      v23 = (_QWORD *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v23 <= 0xCuLL)
      {
        v5 = "PercentGot_Hi";
        goto LABEL_161;
      }
      v48 = "PercentGot_Hi";
      goto LABEL_256;
    case 0x37:
      v23 = (_QWORD *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v23 <= 0xCuLL)
      {
        v5 = "PercentGot_Lo";
        goto LABEL_161;
      }
      v48 = "PercentGot_Lo";
      goto LABEL_256;
    case 0x38:
      v25 = (_QWORD *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v25 <= 0xEuLL)
      {
        v5 = "PercentGot_Ofst";
        goto LABEL_158;
      }
      v50 = "PercentGot_Ofst";
      goto LABEL_254;
    case 0x39:
      v25 = (_QWORD *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v25 <= 0xEuLL)
      {
        v5 = "PercentGot_Page";
        goto LABEL_158;
      }
      v50 = "PercentGot_Page";
      goto LABEL_254;
    case 0x3A:
      v25 = (_QWORD *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v25 <= 0xEuLL)
      {
        v5 = "PercentGottprel";
        goto LABEL_158;
      }
      v50 = "PercentGottprel";
      goto LABEL_254;
    case 0x3B:
      v23 = (_QWORD *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v23 <= 0xCuLL)
      {
        v5 = "PercentGp_Rel";
        goto LABEL_161;
      }
      v48 = "PercentGp_Rel";
      goto LABEL_256;
    case 0x3C:
      v16 = *((_QWORD *)a2 + 4);
      if ((unint64_t)(*((_QWORD *)a2 + 3) - v16) <= 8)
      {
        v5 = "PercentHi";
        goto LABEL_128;
      }
      v40 = 105;
      v41 = "PercentHi";
      goto LABEL_236;
    case 0x3D:
      v23 = (_QWORD *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v23 <= 0xCuLL)
      {
        v5 = "PercentHigher";
        goto LABEL_161;
      }
      v48 = "PercentHigher";
      goto LABEL_256;
    case 0x3E:
      v14 = (_QWORD *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v14 <= 0xDuLL)
      {
        v5 = "PercentHighest";
LABEL_155:
        v21 = a2;
        v22 = 14;
        goto LABEL_162;
      }
      v38 = "PercentHighest";
LABEL_252:
      *v14 = *(_QWORD *)v38;
      *(_QWORD *)((char *)v14 + 6) = *(_QWORD *)(v38 + 6);
      v47 = *((_QWORD *)a2 + 4) + 14;
      goto LABEL_257;
    case 0x3F:
      v16 = *((_QWORD *)a2 + 4);
      if ((unint64_t)(*((_QWORD *)a2 + 3) - v16) <= 8)
      {
        v5 = "PercentLo";
LABEL_128:
        v21 = a2;
        v22 = 9;
        goto LABEL_162;
      }
      v40 = 111;
      v41 = "PercentLo";
LABEL_236:
      *(_BYTE *)(v16 + 8) = v40;
      *(_QWORD *)v16 = *(_QWORD *)v41;
      v47 = *((_QWORD *)a2 + 4) + 9;
      goto LABEL_257;
    case 0x40:
      v26 = *((_QWORD *)a2 + 4);
      if ((unint64_t)(*((_QWORD *)a2 + 3) - v26) <= 9)
      {
        v5 = "PercentNeg";
LABEL_142:
        v21 = a2;
        v22 = 10;
        goto LABEL_162;
      }
      v51 = 26469;
      v52 = "PercentNeg";
LABEL_245:
      *(_WORD *)(v26 + 8) = v51;
      *(_QWORD *)v26 = *(_QWORD *)v52;
      v47 = *((_QWORD *)a2 + 4) + 10;
      goto LABEL_257;
    case 0x41:
      v25 = (_QWORD *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v25 <= 0xEuLL)
      {
        v5 = "PercentPcrel_Hi";
        goto LABEL_158;
      }
      v50 = "PercentPcrel_Hi";
      goto LABEL_254;
    case 0x42:
      v25 = (_QWORD *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v25 <= 0xEuLL)
      {
        v5 = "PercentPcrel_Lo";
        goto LABEL_158;
      }
      v50 = "PercentPcrel_Lo";
      goto LABEL_254;
    case 0x43:
      v18 = *((_QWORD *)a2 + 4);
      if ((unint64_t)(*((_QWORD *)a2 + 3) - v18) <= 0xB)
      {
        v5 = "PercentTlsgd";
LABEL_136:
        v21 = a2;
        v22 = 12;
        goto LABEL_162;
      }
      v44 = 1684501356;
      v45 = "PercentTlsgd";
LABEL_241:
      *(_DWORD *)(v18 + 8) = v44;
      *(_QWORD *)v18 = *(_QWORD *)v45;
      v47 = *((_QWORD *)a2 + 4) + 12;
      goto LABEL_257;
    case 0x44:
      v23 = (_QWORD *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v23 <= 0xCuLL)
      {
        v5 = "PercentTlsldm";
LABEL_161:
        v21 = a2;
        v22 = 13;
        goto LABEL_162;
      }
      v48 = "PercentTlsldm";
LABEL_256:
      *v23 = *(_QWORD *)v48;
      *(_QWORD *)((char *)v23 + 5) = *(_QWORD *)(v48 + 5);
      v47 = *((_QWORD *)a2 + 4) + 13;
      goto LABEL_257;
    case 0x45:
      v25 = (_QWORD *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v25 <= 0xEuLL)
      {
        v5 = "PercentTprel_Hi";
        goto LABEL_158;
      }
      v50 = "PercentTprel_Hi";
      goto LABEL_254;
    case 0x46:
      v25 = (_QWORD *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v25 > 0xEuLL)
      {
        v50 = "PercentTprel_Lo";
LABEL_254:
        *v25 = *(_QWORD *)v50;
        *(_QWORD *)((char *)v25 + 7) = *(_QWORD *)(v50 + 7);
        v47 = *((_QWORD *)a2 + 4) + 15;
LABEL_257:
        *((_QWORD *)a2 + 4) = v47;
      }
      else
      {
        v5 = "PercentTprel_Lo";
LABEL_158:
        v21 = a2;
        v22 = 15;
LABEL_162:
        llvm::raw_ostream::write(v21, v5, v22);
      }
LABEL_163:
      v32 = *((_QWORD *)a2 + 4);
      if ((unint64_t)(*((_QWORD *)a2 + 3) - v32) > 2)
      {
        *(_BYTE *)(v32 + 2) = 34;
        *(_WORD *)v32 = 10272;
        *((_QWORD *)a2 + 4) += 3;
      }
      else
      {
        llvm::raw_ostream::write(a2, " (\"", 3uLL);
      }
      result = llvm::raw_ostream::write_escaped(a2, *((char **)this + 1), *((_QWORD *)this + 2), 0);
      v34 = (_WORD *)*((_QWORD *)a2 + 4);
      if (*((_QWORD *)a2 + 3) - (_QWORD)v34 <= 1uLL)
        return llvm::raw_ostream::write(a2, "\")", 2uLL);
      *v34 = 10530;
      *((_QWORD *)a2 + 4) += 2;
      return result;
    default:
      goto LABEL_163;
  }
}

BOOL llvm::MCAsmParser::parseIntToken(llvm::MCAsmParser *this, uint64_t *a2, const llvm::Twine *a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;

  v6 = **(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)this + 40))(this) + 8);
  v7 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)this + 40))(this);
  if (v6 == 4)
  {
    v8 = *(_QWORD *)(v7 + 8);
    v9 = (_QWORD *)(v8 + 24);
    if (*(_DWORD *)(v8 + 32) >= 0x41u)
      v9 = (_QWORD *)*v9;
    *a2 = *v9;
    (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)this + 184))(this);
  }
  else
  {
    llvm::MCAsmParser::Error((uint64_t)this, *(_QWORD *)(v7 + 96), (uint64_t)a3, 0, 0);
  }
  return v6 != 4;
}

uint64_t llvm::MCAsmParser::parseGNUAttribute(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  _DWORD *v7;
  _QWORD **v8;
  _QWORD *v9;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v7 = *(_DWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8);
  if (*v7 != 4)
    return 0;
  v8 = (_QWORD **)(v7 + 6);
  v9 = v7 + 6;
  if (v7[8] >= 0x41u)
    v9 = *v8;
  *a3 = *v9;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
  if (*v7 != 4)
    return 0;
  if (v7[8] >= 0x41u)
    v8 = (_QWORD **)*v8;
  *a4 = *v8;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
  return 1;
}

unint64_t sub_1C60F8954(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;

  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v5 = v3 + 1;
    v6 = *(_QWORD *)a1 + 112 * v3;
    if (*(_QWORD *)a1 <= a2 && v6 > a2)
    {
      v8 = a2 - *(_QWORD *)a1;
      sub_1C63EB488(a1, v5);
      return *(_QWORD *)a1 + v8;
    }
    else
    {
      sub_1C63EB488(a1, v5);
    }
  }
  return a2;
}

uint64_t sub_1C60F89BC()
{
  __int128 v1;
  int v2;
  int v3;
  int *v4;

  v4 = &v3;
  v2 = 1;
  v3 = 20;
  *(_QWORD *)&v1 = "The maximum nesting depth allowed for assembly macros.";
  *((_QWORD *)&v1 + 1) = 54;
  sub_1C4DB1928((uint64_t)&AsmMacroMaxNestingDepth, "asm-macro-max-nesting-depth", &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &AsmMacroMaxNestingDepth, &dword_1C475E000);
}

uint64_t llvm::MCAsmParserExtension::MCAsmParserExtension(uint64_t this)
{
  *(_QWORD *)this = &off_1E81AE390;
  *(_BYTE *)(this + 16) = 0;
  return this;
}

{
  *(_QWORD *)this = &off_1E81AE390;
  *(_BYTE *)(this + 16) = 0;
  return this;
}

uint64_t llvm::MCTargetAsmParser::copySTI(llvm::MCTargetAsmParser *this)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t result;

  v2 = (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 48))(*((_QWORD *)this + 1));
  v3 = *((_QWORD *)this + 30);
  v4 = sub_1C484358C(v2 + 1848, 256, 3);
  result = sub_1C5934710(v4, v3);
  *((_QWORD *)this + 30) = result;
  return result;
}

uint64_t sub_1C60F8A9C(uint64_t a1)
{
  void **v3;

  v3 = (void **)(a1 + 136);
  sub_1C4765410(&v3);
  if (*(char *)(a1 + 111) < 0)
    operator delete(*(void **)(a1 + 88));
  if (*(char *)(a1 + 87) < 0)
    operator delete(*(void **)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
    operator delete(*(void **)(a1 + 40));
  if (*(char *)(a1 + 39) < 0)
    operator delete(*(void **)(a1 + 16));
  return a1;
}

uint64_t llvm::createMCMasmParser(llvm *this, llvm::SourceMgr *a2, llvm::MCContext *a3, llvm::MCStreamer *a4, const llvm::MCAsmInfo *a5, tm *a6)
{
  unsigned int v6;
  uint64_t v12;
  __int128 v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;

  v6 = a6;
  v12 = operator new();
  v21 = *(_OWORD *)a5;
  v22 = *((_OWORD *)a5 + 1);
  v13 = *((_OWORD *)a5 + 2);
  v24 = *((_QWORD *)a5 + 6);
  *(_WORD *)(v12 + 32) = 0;
  v23 = v13;
  *(_QWORD *)v12 = &off_1E81AE498;
  *(_QWORD *)(v12 + 8) = 0;
  *(_QWORD *)(v12 + 16) = v12 + 32;
  *(_QWORD *)(v12 + 24) = 0;
  llvm::AsmLexer::AsmLexer((llvm::AsmLexer *)(v12 + 40), a4);
  *(_QWORD *)(v12 + 216) = a2;
  *(_QWORD *)(v12 + 224) = a3;
  *(_QWORD *)(v12 + 232) = a4;
  *(_QWORD *)(v12 + 240) = this;
  *(_QWORD *)(v12 + 264) = 0;
  if (v6 <= 1)
    v14 = 1;
  else
    v14 = v6;
  *(_DWORD *)(v12 + 272) = v14;
  *(_OWORD *)(v12 + 280) = v21;
  *(_OWORD *)(v12 + 296) = v22;
  *(_OWORD *)(v12 + 312) = v23;
  *(_QWORD *)(v12 + 328) = v24;
  *(_QWORD *)(v12 + 336) = v12 + 352;
  *(_QWORD *)(v12 + 344) = 0x600000000;
  *(_DWORD *)(v12 + 400) = 0;
  *(_DWORD *)(v12 + 408) = 0;
  *(_WORD *)(v12 + 412) = 0;
  *(_OWORD *)(v12 + 444) = 0u;
  *(_OWORD *)(v12 + 416) = 0u;
  *(_OWORD *)(v12 + 432) = 0u;
  *(_DWORD *)(v12 + 460) = 24;
  *(_OWORD *)(v12 + 472) = 0u;
  *(_QWORD *)(v12 + 488) = 0x3800000000;
  *(_QWORD *)(v12 + 504) = v12 + 520;
  *(_QWORD *)(v12 + 512) = 0x100000000;
  *(_OWORD *)(v12 + 616) = 0u;
  *(_QWORD *)(v12 + 632) = 0x6800000000;
  *(_OWORD *)(v12 + 648) = 0u;
  *(_QWORD *)(v12 + 664) = 0x2800000000;
  *(_OWORD *)(v12 + 680) = 0u;
  *(_OWORD *)(v12 + 696) = 0u;
  *(_OWORD *)(v12 + 712) = 0u;
  *(_OWORD *)(v12 + 728) = 0u;
  *(_QWORD *)(v12 + 744) = 0;
  *(_DWORD *)(v12 + 792) = 0;
  *(_OWORD *)(v12 + 760) = 0u;
  *(_OWORD *)(v12 + 776) = 0u;
  *(_OWORD *)(v12 + 800) = 0u;
  *(_QWORD *)(v12 + 816) = v12 + 832;
  *(_QWORD *)(v12 + 824) = 0x400000000;
  *(_DWORD *)(v12 + 1056) = 1;
  *(_WORD *)(v12 + 1060) = 0;
  *(_BYTE *)(v12 + 1062) = 0;
  *(_DWORD *)(v12 + 1064) = 0;
  *(_WORD *)(v12 + 1068) = 0;
  *(_OWORD *)(v12 + 1072) = 0u;
  *(_QWORD *)(v12 + 1088) = 0x1000000000;
  *(_OWORD *)(v12 + 1104) = 0u;
  *(_QWORD *)(v12 + 1120) = 0x1000000000;
  *(_OWORD *)(v12 + 1136) = 0u;
  *(_QWORD *)(v12 + 1152) = 0x1000000000;
  *(_BYTE *)(v12 + 32) = 0;
  *(_OWORD *)(v12 + 248) = *((_OWORD *)this + 3);
  *((_QWORD *)this + 6) = sub_1C60F974C;
  *((_QWORD *)this + 7) = v12;
  v15 = *(_QWORD *)(*(_QWORD *)this + 24 * (v14 - 1));
  v16 = *(_QWORD *)(v15 + 8);
  v17 = *(_QWORD *)(v15 + 16) - v16;
  *(_QWORD *)(v12 + 192) = v16;
  *(_QWORD *)(v12 + 200) = v17;
  *(_QWORD *)(v12 + 184) = v16;
  *(_QWORD *)(v12 + 136) = 0;
  *(_BYTE *)(v12 + 211) = 1;
  sub_1C630145C((_DWORD *)(v12 + 336), 1);
  if (*(_DWORD *)a2 != 3)
    llvm::report_fatal_error((llvm *)"llvm-ml currently supports only COFF output.", (const char *)1);
  v18 = operator new();
  *(_BYTE *)(v18 + 16) = 0;
  *(_QWORD *)v18 = &off_1E81AE0F8;
  *(_QWORD *)(v18 + 24) = 0;
  *(_QWORD *)(v18 + 32) = 0;
  v19 = *(_QWORD *)(v12 + 264);
  *(_QWORD *)(v12 + 264) = v18;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1072), "=", 1uLL) = 2;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1072), "equ", 3uLL) = 3;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1072), "textequ", 7uLL) = 4;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1072), "byte", 4uLL) = 8;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1072), "sbyte", 5uLL) = 9;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1072), "word", 4uLL) = 10;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1072), "sword", 5uLL) = 11;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1072), "dword", 5uLL) = 12;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1072), "sdword", 6uLL) = 13;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1072), "fword", 5uLL) = 14;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1072), "qword", 5uLL) = 15;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1072), "sqword", 6uLL) = 16;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1072), "real4", 5uLL) = 22;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1072), "real8", 5uLL) = 23;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1072), "real10", 6uLL) = 24;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1072), "align", 5uLL) = 25;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1072), "even", 4uLL) = 26;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1072), "org", 3uLL) = 27;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1072), "extern", 6uLL) = 29;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1072), "public", 6uLL) = 30;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1072), "comment", 7uLL) = 32;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1072), "include", 7uLL) = 33;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1072), "repeat", 6uLL) = 34;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1072), "rept", 4uLL) = 34;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1072), "while", 5uLL) = 35;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1072), "for", 3uLL) = 36;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1072), "irp", 3uLL) = 36;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1072), "forc", 4uLL) = 37;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1072), "irpc", 4uLL) = 37;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1072), "if", 2uLL) = 38;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1072), "ife", 3uLL) = 39;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1072), "ifb", 3uLL) = 40;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1072), "ifnb", 4uLL) = 41;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1072), "ifdef", 5uLL) = 42;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1072), "ifndef", 6uLL) = 43;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1072), "ifdif", 5uLL) = 44;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1072), "ifdifi", 6uLL) = 45;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1072), "ifidn", 5uLL) = 46;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1072), "ifidni", 6uLL) = 47;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1072), "elseif", 6uLL) = 48;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1072), "elseifdef", 9uLL) = 52;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1072), "elseifndef", 0xAuLL) = 53;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1072), "elseifdif", 9uLL) = 54;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1072), "elseifidn", 9uLL) = 56;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1072), "else", 4uLL) = 58;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1072), "end", 3uLL) = 117;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1072), "endif", 5uLL) = 59;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1072), "macro", 5uLL) = 98;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1072), "exitm", 5uLL) = 99;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1072), "endm", 4uLL) = 100;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1072), "purge", 5uLL) = 101;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1072), ".err", 4uLL) = 102;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1072), ".errb", 5uLL) = 103;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1072), ".errnb", 6uLL) = 104;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1072), ".errdef", 7uLL) = 105;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1072), ".errndef", 8uLL) = 106;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1072), ".errdif", 7uLL) = 107;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1072), ".errdifi", 8uLL) = 108;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1072), ".erridn", 7uLL) = 109;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1072), ".erridni", 8uLL) = 110;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1072), ".erre", 5uLL) = 111;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1072), ".errnz", 6uLL) = 112;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1072), ".pushframe", 0xAuLL) = 118;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1072), ".pushreg", 8uLL) = 119;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1072), ".savereg", 8uLL) = 120;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1072), ".savexmm128", 0xBuLL) = 121;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1072), ".setframe", 9uLL) = 122;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1072), ".radix", 6uLL) = 123;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1072), "db", 2uLL) = 17;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1072), "dd", 2uLL) = 18;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1072), "df", 2uLL) = 19;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1072), "dq", 2uLL) = 20;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1072), "dw", 2uLL) = 21;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1072), "echo", 4uLL) = 113;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1072), "struc", 5uLL) = 114;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1072), "struct", 6uLL) = 114;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1072), "union", 5uLL) = 115;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1072), "ends", 4uLL) = 116;
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(v12 + 264) + 16))(*(_QWORD *)(v12 + 264), v12);
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1104), "reg", 3uLL) = 1;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1104), "frame_ptr_rel", 0xDuLL) = 2;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1104), "subfield_reg", 0xCuLL) = 3;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1104), "reg_rel", 7uLL) = 4;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1136), "@version", 8uLL) = 3;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1136), "@line", 5uLL) = 6;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1136), "@date", 5uLL) = 1;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1136), "@time", 5uLL) = 2;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1136), "@filecur", 8uLL) = 4;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1136), "@filename", 9uLL) = 5;
  *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(v12 + 1136), "@curseg", 7uLL) = 7;
  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 48))(v12);
  *(_DWORD *)(v12 + 752) = 0;
  return v12;
}

void sub_1C60F974C(uint64_t a1, uint64_t a2)
{
  llvm::raw_ostream *v4;
  llvm::raw_ostream *v5;
  char *v6;
  unsigned int BufferContainingLoc;
  int v8;
  BOOL v9;
  void (*v10)(uint64_t, _QWORD);
  size_t v11;
  const void *v12;
  void **p_dst;
  uint64_t v14;
  uint64_t v15;
  int LineAndColumn;
  int v17;
  void **v18;
  size_t v19;
  char v20;
  BOOL v21;
  void *v22;
  size_t v23;
  char v24;
  BOOL v25;
  void *v26;
  size_t v27;
  void (*v28)(_BYTE *, _QWORD);
  void **__dst;
  size_t v30;
  int64_t v31;
  _BYTE v32[16];
  void *v33;
  char v34;
  void *v35;
  char v36;
  void *v37;
  char v38;
  void *__p;
  void *v40;
  char *v41[24];

  v41[22] = *(char **)MEMORY[0x1E0C80C00];
  v4 = (llvm::raw_ostream *)llvm::errs((llvm *)a1);
  v5 = *(llvm::raw_ostream **)a1;
  v6 = *(char **)(a1 + 8);
  BufferContainingLoc = llvm::SourceMgr::FindBufferContainingLoc(*(uint64_t **)a1, (unint64_t)v6);
  v8 = llvm::SourceMgr::FindBufferContainingLoc(*(uint64_t **)(a2 + 240), *(_QWORD *)(a2 + 784));
  if (*(_QWORD *)(a2 + 248))
    v9 = 0;
  else
    v9 = BufferContainingLoc >= 2;
  if (v9)
    llvm::SourceMgr::PrintIncludeStack(v5, *(char **)(*(_QWORD *)v5 + 24 * (BufferContainingLoc - 1) + 16), v4);
  if (!*(_QWORD *)(a2 + 776) || v5 != *(llvm::raw_ostream **)(a2 + 240) || BufferContainingLoc != v8)
  {
    v10 = *(void (**)(uint64_t, _QWORD))(a2 + 248);
    if (v10)
      v10(a1, *(_QWORD *)(a2 + 256));
    else
      llvm::SMDiagnostic::print((llvm::SMDiagnostic *)a1, 0, v4, 1, 1);
    return;
  }
  v11 = *(_QWORD *)(a2 + 768);
  if (v11 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v12 = *(const void **)(a2 + 760);
  if (v11 >= 0x17)
  {
    v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v14 = v11 | 7;
    v15 = v14 + 1;
    p_dst = (void **)operator new(v14 + 1);
    v30 = v11;
    v31 = v15 | 0x8000000000000000;
    __dst = p_dst;
  }
  else
  {
    HIBYTE(v31) = *(_QWORD *)(a2 + 768);
    p_dst = (void **)&__dst;
    if (!v11)
      goto LABEL_20;
  }
  memmove(p_dst, v12, v11);
LABEL_20:
  *((_BYTE *)p_dst + v11) = 0;
  LineAndColumn = llvm::SourceMgr::getLineAndColumn((uint64_t *)v5, v6, BufferContainingLoc);
  v17 = ~llvm::SourceMgr::getLineAndColumn(*(uint64_t **)(a2 + 240), *(char **)(a2 + 784), BufferContainingLoc)+ LineAndColumn+ *(_DWORD *)(a2 + 776);
  if (v31 >= 0)
    v18 = (void **)&__dst;
  else
    v18 = __dst;
  if (v31 >= 0)
    v19 = HIBYTE(v31) & 0x7F;
  else
    v19 = v30;
  v20 = *(_BYTE *)(a1 + 79);
  v21 = v20 < 0;
  if (v20 >= 0)
    v22 = (void *)(a1 + 56);
  else
    v22 = *(void **)(a1 + 56);
  v23 = v20 & 0x7F;
  if (v21)
    v23 = *(_QWORD *)(a1 + 64);
  v24 = *(_BYTE *)(a1 + 103);
  v25 = v24 < 0;
  if (v24 >= 0)
    v26 = (void *)(a1 + 80);
  else
    v26 = *(void **)(a1 + 80);
  v27 = v24 & 0x7F;
  if (v25)
    v27 = *(_QWORD *)(a1 + 88);
  llvm::SMDiagnostic::SMDiagnostic((uint64_t)v32, *(_QWORD *)a1, *(_QWORD *)(a1 + 8), v18, v19, v17, *(_DWORD *)(a1 + 44), *(_DWORD *)(a1 + 48), v22, v23, v26, v27, *(const void **)(a1 + 104), (uint64_t)(*(_QWORD *)(a1 + 112) - *(_QWORD *)(a1 + 104)) >> 3, 0, 0);
  v28 = *(void (**)(_BYTE *, _QWORD))(a2 + 248);
  if (v28)
    v28(v32, *(_QWORD *)(a2 + 256));
  else
    llvm::SMDiagnostic::print((llvm::SMDiagnostic *)v32, 0, v4, 1, 1);
  sub_1C4FAD100(v41);
  if (__p)
  {
    v40 = __p;
    operator delete(__p);
  }
  if (v38 < 0)
    operator delete(v37);
  if (v36 < 0)
    operator delete(v35);
  if (v34 < 0)
    operator delete(v33);
  if (SHIBYTE(v31) < 0)
    operator delete(__dst);
}

uint64_t sub_1C60F9A98(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  void *v37;
  void *v38;
  uint64_t v39;

  *(_QWORD *)a1 = &off_1E81AE498;
  *(_OWORD *)(*(_QWORD *)(a1 + 240) + 48) = *(_OWORD *)(a1 + 248);
  if (*(_DWORD *)(a1 + 1148))
  {
    v2 = *(unsigned int *)(a1 + 1144);
    if ((_DWORD)v2)
    {
      v3 = 0;
      v4 = 8 * v2;
      do
      {
        v5 = *(_QWORD *)(*(_QWORD *)(a1 + 1136) + v3);
        if (v5 != -8 && v5 != 0)
          MEMORY[0x1CAA32FB4]();
        v3 += 8;
      }
      while (v4 != v3);
    }
  }
  free(*(void **)(a1 + 1136));
  if (*(_DWORD *)(a1 + 1116))
  {
    v7 = *(unsigned int *)(a1 + 1112);
    if ((_DWORD)v7)
    {
      v8 = 0;
      v9 = 8 * v7;
      do
      {
        v10 = *(_QWORD *)(*(_QWORD *)(a1 + 1104) + v8);
        if (v10 != -8 && v10 != 0)
          MEMORY[0x1CAA32FB4]();
        v8 += 8;
      }
      while (v9 != v8);
    }
  }
  free(*(void **)(a1 + 1104));
  if (*(_DWORD *)(a1 + 1084))
  {
    v12 = *(unsigned int *)(a1 + 1080);
    if ((_DWORD)v12)
    {
      v13 = 0;
      v14 = 8 * v12;
      do
      {
        v15 = *(_QWORD *)(*(_QWORD *)(a1 + 1072) + v13);
        if (v15 != -8 && v15 != 0)
          MEMORY[0x1CAA32FB4]();
        v13 += 8;
      }
      while (v14 != v13);
    }
  }
  free(*(void **)(a1 + 1072));
  v17 = *(void **)(a1 + 816);
  if (v17 != (void *)(a1 + 832))
    free(v17);
  sub_1C60E4C18(a1 + 704);
  v18 = *(void **)(a1 + 680);
  if (v18)
  {
    *(_QWORD *)(a1 + 688) = v18;
    operator delete(v18);
  }
  if (*(_DWORD *)(a1 + 660))
  {
    v19 = *(unsigned int *)(a1 + 656);
    if ((_DWORD)v19)
    {
      v20 = 0;
      v21 = 8 * v19;
      do
      {
        v22 = *(_QWORD *)(*(_QWORD *)(a1 + 648) + v20);
        if (v22 != -8 && v22 != 0)
          MEMORY[0x1CAA32FB4]();
        v20 += 8;
      }
      while (v21 != v20);
    }
  }
  free(*(void **)(a1 + 648));
  if (*(_DWORD *)(a1 + 628))
  {
    v24 = *(unsigned int *)(a1 + 624);
    if ((_DWORD)v24)
    {
      v25 = 0;
      v26 = 8 * v24;
      do
      {
        v27 = *(_QWORD *)(*(_QWORD *)(a1 + 616) + v25);
        if (v27 != -8 && v27 != 0)
        {
          sub_1C61DF2A0(v27 + 72);
          sub_1C60FE9CC((void **)(v27 + 48));
          MEMORY[0x1CAA32FB4](v27, 8);
        }
        v25 += 8;
      }
      while (v26 != v25);
    }
  }
  free(*(void **)(a1 + 616));
  v29 = *(char **)(a1 + 504);
  v30 = *(unsigned int *)(a1 + 512);
  if ((_DWORD)v30)
  {
    v31 = 96 * v30;
    do
    {
      sub_1C61DF2A0((uint64_t)&v29[v31 - 32]);
      sub_1C60FE9CC((void **)&v29[v31 - 56]);
      v31 -= 96;
    }
    while (v31);
    v29 = *(char **)(a1 + 504);
  }
  if (v29 != (char *)(a1 + 520))
    free(v29);
  if (*(_DWORD *)(a1 + 484))
  {
    v32 = *(unsigned int *)(a1 + 480);
    if ((_DWORD)v32)
    {
      v33 = 0;
      v34 = 8 * v32;
      do
      {
        v35 = *(_QWORD *)(*(_QWORD *)(a1 + 472) + v33);
        if (v35 != -8 && v35 != 0)
        {
          if (*(char *)(v35 + 55) < 0)
            operator delete(*(void **)(v35 + 32));
          MEMORY[0x1CAA32FB4](v35, 8);
        }
        v33 += 8;
      }
      while (v34 != v33);
    }
  }
  free(*(void **)(a1 + 472));
  sub_1C61A8A20(a1 + 440);
  v37 = *(void **)(a1 + 416);
  if (v37)
  {
    *(_QWORD *)(a1 + 424) = v37;
    operator delete(v37);
  }
  v38 = *(void **)(a1 + 336);
  if (v38 != (void *)(a1 + 352))
    free(v38);
  v39 = *(_QWORD *)(a1 + 264);
  *(_QWORD *)(a1 + 264) = 0;
  if (v39)
    (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
  llvm::MCAsmLexer::~MCAsmLexer((llvm::MCAsmLexer *)(a1 + 40));
  *(_QWORD *)a1 = off_1E81AE1D0;
  sub_1C63EB414((char **)(a1 + 16));
  return a1;
}

void sub_1C60F9D88(uint64_t a1)
{
  sub_1C60F9A98(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t *sub_1C60F9DAC(unsigned int *a1, unsigned __int8 *a2, size_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *result;
  uint64_t v11;
  uint64_t v12;
  int v13;
  size_t v14;
  unsigned __int8 *v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  _QWORD *v21;

  result = (uint64_t *)sub_1C63EA4F0((uint64_t)(a1 + 110), a2, a3);
  v11 = *result;
  *(_QWORD *)(v11 + 8) = a4;
  *(_QWORD *)(v11 + 16) = a5;
  v12 = a1[270];
  if (!(_DWORD)v12)
    goto LABEL_15;
  v13 = 0;
  if (a3)
  {
    v14 = a3;
    v15 = a2;
    do
    {
      v16 = *v15++;
      v13 = 33 * v13 + v16;
      --v14;
    }
    while (v14);
  }
  v17 = *((_QWORD *)a1 + 134);
  v18 = 1;
  v19 = v13;
  while (1)
  {
    v20 = v19 & (v12 - 1);
    v21 = *(_QWORD **)(v17 + 8 * v20);
    if (v21 != (_QWORD *)-8)
    {
      if (!v21)
        goto LABEL_15;
      if (*(_DWORD *)(v17 + 8 * v12 + 8 + 4 * v20) == v13 && a3 == *v21)
      {
        if (!a3)
          break;
        result = (uint64_t *)memcmp(a2, (char *)v21 + a1[273], a3);
        if (!(_DWORD)result)
          break;
      }
    }
    v19 = v18 + v20;
    ++v18;
  }
  if ((_DWORD)v20 == -1 || (int)v20 == v12)
  {
LABEL_15:
    result = sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 268), a2, a3);
    *(_DWORD *)result = 1;
  }
  return result;
}

_QWORD *sub_1C60F9ECC(uint64_t a1, unsigned __int8 *a2, size_t a3, unsigned __int8 *a4, size_t __n)
{
  llvm::StringMapImpl *v7;
  int v8;
  _QWORD *result;

  v7 = (llvm::StringMapImpl *)(a1 + 1072);
  v8 = *(_DWORD *)sub_1C60E48A8((llvm::StringMapImpl *)(a1 + 1072), a4, __n);
  result = sub_1C60E48A8(v7, a2, a3);
  *(_DWORD *)result = v8;
  return result;
}

uint64_t sub_1C60F9F20(uint64_t a1)
{
  return *(_QWORD *)(a1 + 240);
}

uint64_t sub_1C60F9F28(uint64_t a1)
{
  return a1 + 40;
}

uint64_t sub_1C60F9F30(uint64_t a1)
{
  return *(_QWORD *)(a1 + 216);
}

uint64_t sub_1C60F9F38(uint64_t a1)
{
  return *(_QWORD *)(a1 + 224);
}

uint64_t sub_1C60F9F40(uint64_t a1)
{
  uint64_t result;

  result = *(unsigned int *)(a1 + 1056);
  if ((_DWORD)result == -1)
    return *(unsigned int *)(*(_QWORD *)(a1 + 232) + 176);
  return result;
}

uint64_t sub_1C60F9F60(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1056) = a2;
  return result;
}

BOOL sub_1C60F9F68(uint64_t a1, char a2, char a3)
{
  unint64_t v3;
  int v5;
  char v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t TempSymbol;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *i;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  _BOOL8 v48;
  _QWORD v51[2];
  unint64_t v52;
  uint64_t v53;
  __int16 v54;
  char *v55[2];
  const char *v56;
  __int16 v57;
  int v58;
  char v59;
  void *__p;
  char v61;
  char v62;
  void **v63;
  void *v64[2];
  _QWORD v65[66];

  v65[64] = *MEMORY[0x1E0C80C00];
  if ((a2 & 1) == 0)
    (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 224) + 176))(*(_QWORD *)(a1 + 224), 0, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 240));
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
  *(_BYTE *)(a1 + 32) = 0;
  v5 = *(_DWORD *)(a1 + 408);
  v6 = *(_BYTE *)(a1 + 413);
  v64[0] = v65;
  v64[1] = (void *)0x400000000;
  if (*(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) + 1513))
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
    v8 = *(unsigned int *)(v7 + 120);
    if ((_DWORD)v8)
      v3 = *(_QWORD *)(*(_QWORD *)(v7 + 112) + 32 * v8 - 32);
    else
      v3 = 0;
    if (!*(_QWORD *)(v3 + 8))
    {
      v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
      v55[0] = "tmp";
      v57 = 259;
      TempSymbol = llvm::MCContext::createTempSymbol(v9, (uint64_t)v55, 1);
      v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
      (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v11 + 192))(v11, TempSymbol, 0);
      *(_QWORD *)(v3 + 8) = TempSymbol;
    }
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
    v55[0] = (char *)v3;
    sub_1C542EB4C((_QWORD *)(v12 + 1520), v55);
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8));
  while (1)
  {
    if (**(_DWORD **)(a1 + 48))
      goto LABEL_14;
    if (!*(_QWORD *)(**(_QWORD **)(a1 + 240) + 24 * (*(_DWORD *)(a1 + 272) - 1) + 16))
      break;
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
LABEL_14:
    v55[0] = (char *)&v56;
    v55[1] = (char *)0x800000000;
    v58 = -1;
    v59 = 0;
    LOBYTE(__p) = 0;
    v62 = 0;
    v63 = v64;
    if (sub_1C60FEB44((int **)a1, (uint64_t)v55, 0))
    {
      if (!*(_DWORD *)(a1 + 24) && **(_DWORD **)(a1 + 48) == 1)
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
      sub_1C63EA5EC(a1);
      if (!*(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 107))
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 224))(a1);
    }
    else
    {
      sub_1C63EA5EC(a1);
    }
    if (v62)
    {
      if (v61 < 0)
        operator delete(__p);
      v62 = 0;
    }
    sub_1C51E463C(v55);
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 200))(*(_QWORD *)(a1 + 8));
  sub_1C63EA5EC(a1);
  v13 = *(_QWORD *)(a1 + 8);
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 176))(v13, v14);
  if (*(_DWORD *)(a1 + 408) != v5 || *(_BYTE *)(a1 + 413) != (v6 & 1))
  {
    v15 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8) + 8);
    v55[0] = "unmatched .ifs or .elses";
    v57 = 259;
    (*(void (**)(uint64_t, uint64_t, char **, _QWORD, _QWORD))(*(_QWORD *)a1 + 176))(a1, v15, v55, 0, 0);
  }
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
  if (*(_QWORD *)(v16 + 1488))
  {
    v17 = *(_QWORD *)(v16 + 1472);
    v18 = *(unsigned int *)(v17 + 144);
    if ((_DWORD)v18)
    {
      v19 = 0;
      v20 = 72 * v18;
      v21 = (char *)(*(_QWORD *)(v17 + 136) + 23);
      do
      {
        if (*v21 < 0)
          v22 = *(_QWORD *)(v21 - 15);
        else
          v22 = *v21;
        if (v22)
          v23 = 1;
        else
          v23 = v19 == 0;
        if (!v23)
        {
          v24 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8) + 8);
          v3 = v3 & 0xFFFFFFFF00000000 | v19;
          v51[0] = "unassigned file number: ";
          v52 = v3;
          v54 = 2051;
          v55[0] = (char *)v51;
          v56 = " for .file directives";
          v57 = 770;
          (*(void (**)(uint64_t, uint64_t, char **, _QWORD, _QWORD))(*(_QWORD *)a1 + 176))(a1, v24, v55, 0, 0);
        }
        ++v19;
        v21 += 72;
        v20 -= 72;
      }
      while (v20);
    }
  }
  if ((a3 & 1) != 0)
  {
LABEL_77:
    if (*(_BYTE *)(a1 + 32))
      goto LABEL_78;
    v48 = *(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) + 1960) != 0;
  }
  else
  {
    if (*(_BYTE *)(*(_QWORD *)(a1 + 232) + 18))
    {
      v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
      v26 = *(unsigned int *)(v25 + 1064);
      if ((_DWORD)v26)
      {
        for (i = *(uint64_t **)(v25 + 1056); !*i || *i == -8; ++i)
          ;
      }
      else
      {
        i = *(uint64_t **)(v25 + 1056);
      }
      v29 = *(_QWORD *)(v25 + 1056) + 8 * v26;
      if (i != (uint64_t *)v29)
      {
        v30 = *i;
        do
        {
          v31 = *(_QWORD *)(v30 + 8);
          if ((*(_DWORD *)(v31 + 8) & 1) != 0 && (*(_DWORD *)(v31 + 8) & 0x1C00) != 0x800 && *(_QWORD *)v31 <= 7uLL)
          {
            v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
            if ((*(_BYTE *)v31 & 4) != 0)
            {
              v35 = *(uint64_t **)(v31 - 8);
              v36 = *v35;
              v33 = v35 + 2;
              v34 = v36;
            }
            else
            {
              v33 = 0;
              v34 = 0;
            }
            v37 = *(_QWORD *)(*(_QWORD *)(v32 + 8) + 8);
            v54 = 1283;
            v51[0] = "assembler local symbol '";
            v52 = (unint64_t)v33;
            v53 = v34;
            v55[0] = (char *)v51;
            v56 = "' not defined";
            v57 = 770;
            (*(void (**)(uint64_t, uint64_t, char **, _QWORD, _QWORD))(*(_QWORD *)a1 + 176))(a1, v37, v55, 0, 0);
          }
          do
          {
            v38 = i[1];
            ++i;
            v30 = v38;
            if (v38)
              v39 = v30 == -8;
            else
              v39 = 1;
          }
          while (v39);
        }
        while (i != (uint64_t *)v29);
      }
    }
    v40 = *(unsigned int *)(a1 + 824);
    if ((_DWORD)v40)
    {
      v41 = *(uint64_t **)(a1 + 816);
      v42 = 56 * v40;
      do
      {
        v43 = v41[6];
        v44 = *(_QWORD *)v43 & 0xFFFFFFFFFFFFFFF8;
        if (!v44 && (*(_DWORD *)(v43 + 8) & 0x1C00) == 0x800)
        {
          *(_DWORD *)(v43 + 8) |= 4u;
          llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v43 + 24));
          *(_QWORD *)v43 = *(_QWORD *)v43 & 7 | v44;
        }
        if (!v44)
        {
          v45 = *(_OWORD *)(v41 + 1);
          v46 = *(_OWORD *)(v41 + 3);
          *(_DWORD *)(a1 + 792) = *((_DWORD *)v41 + 10);
          *(_OWORD *)(a1 + 760) = v45;
          *(_OWORD *)(a1 + 776) = v46;
          v47 = *v41;
          v55[0] = "directional label undefined";
          v57 = 259;
          (*(void (**)(uint64_t, uint64_t, char **, _QWORD, _QWORD))(*(_QWORD *)a1 + 176))(a1, v47, v55, 0, 0);
        }
        v41 += 7;
        v42 -= 56;
      }
      while (v42);
    }
    if (!*(_BYTE *)(a1 + 32))
    {
      llvm::MCStreamer::Finish(*(_QWORD **)(a1 + 224), *(_QWORD *)(a1 + 136));
      goto LABEL_77;
    }
LABEL_78:
    v48 = 1;
  }
  if (v64[0] != v65)
    free(v64[0]);
  return v48;
}

uint64_t sub_1C60FA5C8(uint64_t result, char a2)
{
  *(_BYTE *)(result + 1061) = a2;
  *(_BYTE *)(result + 149) = a2;
  return result;
}

uint64_t sub_1C60FA5D4(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 1061);
}

uint64_t sub_1C60FA5DC()
{
  return 1;
}

uint64_t sub_1C60FA5E4(uint64_t a1, char *a2, unint64_t a3, const void *a4, size_t a5)
{
  llvm::StringMapImpl *v10;
  unsigned __int8 *v11;
  size_t v12;
  _QWORD *v13;
  int v14;
  uint64_t result;
  void *v16;
  uint64_t v17;
  uint64_t v18;
  void **v19;
  _QWORD v20[4];
  __int16 v21;
  void *__p[2];
  const char *v23;
  __int16 v24;

  v10 = (llvm::StringMapImpl *)(a1 + 472);
  sub_1C5E3DEA4(__p, a2, (uint64_t (*)(_QWORD))sub_1C5E3C6A8, &a2[a3], (uint64_t)sub_1C5E3C6A8, a3);
  if (SHIBYTE(v23) >= 0)
    v11 = (unsigned __int8 *)__p;
  else
    v11 = (unsigned __int8 *)__p[0];
  if (SHIBYTE(v23) >= 0)
    v12 = HIBYTE(v23) & 0x7F;
  else
    v12 = (size_t)__p[1];
  v13 = sub_1C6116114(v10, v11, v12);
  if (SHIBYTE(v23) < 0)
    operator delete(__p[0]);
  if (v13[1])
  {
    v14 = *((_DWORD *)v13 + 4);
    if (!v14)
    {
      __p[0] = "invalid variable redefinition";
      v24 = 259;
      return llvm::MCAsmParser::Error(a1, 0, (uint64_t)__p, 0, 0);
    }
    if (v14 == 1)
    {
      v21 = 1283;
      v20[0] = "redefining '";
      v20[2] = a2;
      v20[3] = a3;
      __p[0] = v20;
      v23 = "', already defined on the command line";
      v24 = 770;
      if (((*(uint64_t (**)(uint64_t, _QWORD, void **, _QWORD, _QWORD))(*(_QWORD *)a1 + 168))(a1, 0, __p, 0, 0) & 1) != 0)return 1;
    }
  }
  else
  {
    *v13 = a2;
    v13[1] = a3;
  }
  *((_DWORD *)v13 + 4) = 1;
  *((_BYTE *)v13 + 20) = 1;
  if (a4)
  {
    if (a5 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (a5 >= 0x17)
    {
      v17 = (a5 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a5 | 7) != 0x17)
        v17 = a5 | 7;
      v18 = v17 + 1;
      v16 = operator new(v17 + 1);
      __p[1] = (void *)a5;
      v23 = (const char *)(v18 | 0x8000000000000000);
      __p[0] = v16;
    }
    else
    {
      HIBYTE(v23) = a5;
      v16 = __p;
      if (!a5)
        goto LABEL_25;
    }
    memmove(v16, a4, a5);
LABEL_25:
    *((_BYTE *)v16 + a5) = 0;
    goto LABEL_26;
  }
  __p[0] = 0;
  __p[1] = 0;
  v23 = 0;
LABEL_26:
  v19 = (void **)(v13 + 3);
  if (*((char *)v13 + 47) < 0)
    operator delete(*v19);
  result = 0;
  *(_OWORD *)v19 = *(_OWORD *)__p;
  v13[5] = v23;
  return result;
}

uint64_t sub_1C60FA7E8(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v17[2];
  char v18;

  v17[0] = a2;
  v17[1] = a3;
  v18 = 46;
  v8 = llvm::StringRef::find(v17, &v18, 1uLL, 0);
  if (a3 >= v8)
    v9 = v8;
  else
    v9 = a3;
  if (a3 >= v8 + 1)
    v10 = v8 + 1;
  else
    v10 = a3;
  v11 = a2 + v10;
  v12 = a3 - v10;
  if (v8 == -1)
    v13 = 0;
  else
    v13 = v12;
  if (v8 == -1)
    v14 = 0;
  else
    v14 = v11;
  if (v8 == -1)
    v15 = a3;
  else
    v15 = v9;
  return (*(uint64_t (**)(uint64_t, uint64_t, unint64_t, unint64_t, unint64_t, uint64_t))(*(_QWORD *)a1 + 136))(a1, a2, v15, v14, v13, a4);
}

uint64_t sub_1C60FA884(uint64_t a1, char *__s, size_t a3, char *a4, unint64_t a5, uint64_t a6)
{
  unint64_t v6;
  char *v7;
  _BYTE *v9;
  void **v10;
  size_t v11;
  uint64_t v12;
  int v13;
  size_t v14;
  void **v15;
  int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  int v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v25;
  void **v26;
  size_t v27;
  uint64_t v28;
  int v29;
  size_t v30;
  void **v31;
  int v32;
  uint64_t v33;
  int v34;
  int v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  void **v42;
  size_t v43;
  uint64_t v44;
  int v45;
  size_t v46;
  void **v47;
  int v48;
  uint64_t v49;
  int v50;
  int v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  void *__p;
  uint64_t v56;
  int v60;
  void *v61;
  char *v62;
  int v63;
  void *v64;
  char *v65;
  uint64_t v66;
  void *v67;
  size_t v68;
  char v69;
  char *v70;
  unint64_t v71;
  uint64_t v72;
  int v73;
  int v74;

  if (!a3)
    return 1;
  v6 = a3;
  v7 = __s;
  v71 = 0;
  v72 = 0;
  v70 = 0;
  v74 = 0;
  v73 = 0;
  v9 = memchr(__s, 46, a3);
  if (v9
    && v9 - v7 != -1
    && ((*(uint64_t (**)(uint64_t, char *, unint64_t, char **))(*(_QWORD *)a1 + 128))(a1, v7, v6, &v70) & 1) == 0)
  {
    v7 = v70;
    v6 = v71;
  }
  sub_1C5E3DEA4(&v67, v7, (uint64_t (*)(_QWORD))sub_1C5E3C6A8, &v7[v6], (uint64_t)sub_1C5E3C6A8, v6);
  __p = v67;
  if (v69 >= 0)
    v10 = &v67;
  else
    v10 = (void **)v67;
  if (v69 >= 0)
    v11 = v69 & 0x7F;
  else
    v11 = v68;
  v12 = *(unsigned int *)(a1 + 624);
  v62 = &v7[v6];
  v65 = v7;
  v60 = v69;
  if ((_DWORD)v12)
  {
    v13 = 0;
    if (v11)
    {
      v14 = v11;
      v15 = v10;
      do
      {
        v16 = *(unsigned __int8 *)v15;
        v15 = (void **)((char *)v15 + 1);
        v13 = 33 * v13 + v16;
        --v14;
      }
      while (v14);
    }
    v17 = v12 - 1;
    v18 = *(_QWORD *)(a1 + 616);
    v56 = *(unsigned int *)(a1 + 624);
    v19 = v18 + 8 * v12 + 8;
    v20 = 1;
    v21 = v13;
    while (1)
    {
      v22 = v21 & v17;
      v23 = *(_QWORD **)(v18 + 8 * v22);
      if (v23 != (_QWORD *)-8)
      {
        if (!v23)
          goto LABEL_28;
        if (*(_DWORD *)(v19 + 4 * v22) == v13
          && v11 == *v23
          && (!v11 || !memcmp(v10, (char *)v23 + *(unsigned int *)(a1 + 636), v11)))
        {
          break;
        }
      }
      v21 = v20 + v22;
      ++v20;
    }
    v25 = v56;
    if ((_DWORD)v22 != -1)
      v25 = (int)v22;
    v56 = v25;
  }
  else
  {
    v56 = 0;
    v18 = *(_QWORD *)(a1 + 616);
  }
LABEL_28:
  if (v60 < 0)
    operator delete(__p);
  v26 = &v67;
  sub_1C5E3DEA4(&v67, v65, (uint64_t (*)(_QWORD))sub_1C5E3C6A8, v62, (uint64_t)sub_1C5E3C6A8, v6);
  if (v69 >= 0)
  {
    v27 = v69 & 0x7F;
  }
  else
  {
    v26 = (void **)v67;
    v27 = v68;
  }
  v28 = *(unsigned int *)(a1 + 656);
  v66 = a1;
  v61 = v67;
  v63 = v69;
  if ((_DWORD)v28)
  {
    v29 = 0;
    if (v27)
    {
      v30 = v27;
      v31 = v26;
      do
      {
        v32 = *(unsigned __int8 *)v31;
        v31 = (void **)((char *)v31 + 1);
        v29 = 33 * v29 + v32;
        --v30;
      }
      while (v30);
    }
    v33 = *(_QWORD *)(a1 + 648);
    v34 = 1;
    v35 = v29;
    while (1)
    {
      v36 = v35 & (v28 - 1);
      v37 = *(_QWORD **)(v33 + 8 * v36);
      if (v37 != (_QWORD *)-8)
      {
        if (!v37)
        {
          v38 = v28;
          goto LABEL_46;
        }
        if (*(_DWORD *)(v33 + 8 * v28 + 8 + 4 * v36) == v29
          && v27 == *v37
          && (!v27 || !memcmp(v26, (char *)v37 + *(unsigned int *)(v66 + 668), v27)))
        {
          break;
        }
      }
      v35 = v34 + v36;
      ++v34;
    }
    v38 = (int)v36;
    if ((_DWORD)v36 == -1)
      v38 = v28;
  }
  else
  {
    v38 = 0;
    v33 = *(_QWORD *)(a1 + 648);
  }
LABEL_46:
  v39 = v33 + 8 * v38;
  v40 = v66;
  if (v63 < 0)
  {
    operator delete(v61);
    v33 = *(_QWORD *)(v66 + 648);
    LODWORD(v28) = *(_DWORD *)(v66 + 656);
  }
  if (v39 == v33 + 8 * v28)
  {
    v54 = (_QWORD *)(v18 + 8 * v56);
  }
  else
  {
    sub_1C5E3DEA4(&v67, *(char **)(*(_QWORD *)v39 + 8), (uint64_t (*)(_QWORD))sub_1C5E3C6A8, (char *)(*(_QWORD *)(*(_QWORD *)v39 + 8) + *(_QWORD *)(*(_QWORD *)v39 + 16)), (uint64_t)sub_1C5E3C6A8, *(_QWORD *)(*(_QWORD *)v39 + 16));
    v41 = v69;
    if (v69 >= 0)
      v42 = &v67;
    else
      v42 = (void **)v67;
    if (v69 >= 0)
      v43 = v69 & 0x7F;
    else
      v43 = v68;
    v44 = *(unsigned int *)(v66 + 624);
    v64 = v67;
    if ((_DWORD)v44)
    {
      v45 = 0;
      if (v43)
      {
        v46 = v43;
        v47 = v42;
        do
        {
          v48 = *(unsigned __int8 *)v47;
          v47 = (void **)((char *)v47 + 1);
          v45 = 33 * v45 + v48;
          --v46;
        }
        while (v46);
      }
      v49 = *(_QWORD *)(v66 + 616);
      v50 = 1;
      v51 = v45;
      while (1)
      {
        v52 = v51 & (v44 - 1);
        v53 = *(_QWORD **)(v49 + 8 * v52);
        if (v53 != (_QWORD *)-8)
        {
          if (!v53)
            goto LABEL_73;
          if (*(_DWORD *)(v49 + 8 * v44 + 8 + 4 * v52) == v45
            && v43 == *v53
            && (!v43 || !memcmp(v42, (char *)v53 + *(unsigned int *)(v66 + 636), v43)))
          {
            break;
          }
        }
        v51 = v50 + v52;
        ++v50;
      }
      if ((_DWORD)v52 != -1)
        v44 = (int)v52;
    }
    else
    {
      v44 = 0;
      v49 = *(_QWORD *)(v66 + 616);
    }
LABEL_73:
    v54 = (_QWORD *)(v49 + 8 * v44);
    v40 = v66;
    if (v41 < 0)
      operator delete(v64);
  }
  if (v54 == (_QWORD *)(*(_QWORD *)(v40 + 616) + 8 * *(unsigned int *)(v40 + 624)))
    return 1;
  else
    return sub_1C61165C4(v40, *v54 + 8, a4, a5, a6);
}

uint64_t sub_1C60FACCC(uint64_t a1, unsigned __int8 *a2, unint64_t a3, uint64_t a4)
{
  int v8;
  unsigned __int8 **v9;
  size_t v10;
  uint64_t v11;
  int v12;
  size_t v13;
  unsigned __int8 **v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t result;
  unsigned __int8 *__p;
  unsigned __int8 *v26;
  int v27;
  unsigned __int8 *v28;
  size_t v29;
  uint64_t v30;

  v28 = a2;
  v29 = a3;
  v30 = 0;
  sub_1C61169EC((uint64_t)&v28, "byte", 4uLL, "db", 2uLL, "sbyte", 5uLL, 1);
  sub_1C61169EC((uint64_t)&v28, "word", 4uLL, "dw", 2uLL, "sword", 5uLL, 2);
  sub_1C61169EC((uint64_t)&v28, "dword", 5uLL, "dd", 2uLL, "sdword", 6uLL, 4);
  sub_1C6116A70((uint64_t)&v28, "fword", 5uLL, "df", 2uLL, 6);
  sub_1C61169EC((uint64_t)&v28, "qword", 5uLL, "dq", 2uLL, "sqword", 6uLL, 8);
  if (BYTE4(v30) || v29 != 5)
  {
    if (BYTE4(v30) || v29 != 6)
    {
      v8 = v30;
      if (!BYTE4(v30))
        goto LABEL_15;
    }
    else
    {
      if (llvm::StringRef::compare_insensitive(&v28, "real10", 6uLL))
        goto LABEL_15;
      v8 = 10;
    }
  }
  else if (llvm::StringRef::compare_insensitive(&v28, "real4", 5uLL))
  {
    if (llvm::StringRef::compare_insensitive(&v28, "real8", 5uLL))
      goto LABEL_15;
    v8 = 8;
  }
  else
  {
    v8 = 4;
  }
  if (v8)
  {
    *(_QWORD *)a4 = a2;
    *(_QWORD *)(a4 + 8) = a3;
LABEL_38:
    result = 0;
    *(_DWORD *)(a4 + 20) = v8;
    *(_DWORD *)(a4 + 24) = 1;
    *(_DWORD *)(a4 + 16) = v8;
    return result;
  }
LABEL_15:
  sub_1C5E3DEA4(&v28, (char *)a2, (uint64_t (*)(_QWORD))sub_1C5E3C6A8, (char *)&a2[a3], (uint64_t)sub_1C5E3C6A8, a3);
  if (v30 >= 0)
    v9 = &v28;
  else
    v9 = (unsigned __int8 **)v28;
  if (v30 >= 0)
    v10 = HIBYTE(v30) & 0x7F;
  else
    v10 = v29;
  v11 = *(unsigned int *)(a1 + 624);
  __p = v28;
  v26 = a2;
  v27 = SHIBYTE(v30);
  if ((_DWORD)v11)
  {
    v12 = 0;
    if (v10)
    {
      v13 = v10;
      v14 = v9;
      do
      {
        v15 = *(unsigned __int8 *)v14;
        v14 = (unsigned __int8 **)((char *)v14 + 1);
        v12 = 33 * v12 + v15;
        --v13;
      }
      while (v13);
    }
    v16 = *(_QWORD *)(a1 + 616);
    v17 = 1;
    v18 = v12;
    while (1)
    {
      v19 = v18 & (v11 - 1);
      v20 = *(_QWORD **)(v16 + 8 * v19);
      if (v20 != (_QWORD *)-8)
      {
        if (!v20)
        {
          v21 = v11;
          goto LABEL_34;
        }
        if (*(_DWORD *)(v16 + 8 * v11 + 8 + 4 * v19) == v12
          && v10 == *v20
          && (!v10 || !memcmp(v9, (char *)v20 + *(unsigned int *)(a1 + 636), v10)))
        {
          break;
        }
      }
      v18 = v17 + v19;
      ++v17;
    }
    v21 = (int)v19;
    if ((_DWORD)v19 == -1)
      v21 = v11;
  }
  else
  {
    v21 = 0;
    v16 = *(_QWORD *)(a1 + 616);
  }
LABEL_34:
  v22 = (uint64_t *)(v16 + 8 * v21);
  if (v27 < 0)
  {
    operator delete(__p);
    v16 = *(_QWORD *)(a1 + 616);
    LODWORD(v11) = *(_DWORD *)(a1 + 624);
  }
  if (v22 != (uint64_t *)(v16 + 8 * v11))
  {
    v23 = *v22;
    *(_QWORD *)a4 = v26;
    *(_QWORD *)(a4 + 8) = a3;
    v8 = *(_DWORD *)(v23 + 40);
    goto LABEL_38;
  }
  return 1;
}

uint64_t sub_1C60FB014(uint64_t a1, std::string *a2, _DWORD *a3, _DWORD *a4, unsigned int *a5, _QWORD *a6, _QWORD *a7, uint64_t *a8, uint64_t a9, uint64_t a10)
{
  int v11;
  unsigned __int16 *v12;
  unsigned int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _DWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  char v27;
  int v28;
  const char *v29;
  size_t v30;
  size_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  char **p_dst;
  int v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  __int128 v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  unint64_t v47;
  char *v48;
  __int128 v49;
  unsigned int v50;
  _BYTE *v51;
  char *v52;
  char *v53;
  uint64_t v54;
  int v55;
  int v56;
  char *v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  std::string *v63;
  uint64_t v64;
  _BYTE *v65;
  _BYTE *v66;
  int v67;
  unsigned int v68;
  char *v69;
  int v70;
  uint64_t v71;
  unint64_t v72;
  _DWORD *v73;
  uint64_t v74;
  _BYTE *v75;
  _DWORD *v76;
  const char *v77;
  size_t v78;
  unsigned int v79;
  _WORD *v80;
  _BYTE *v81;
  _BYTE *v82;
  uint64_t v83;
  uint64_t v84;
  _QWORD *v85;
  uint64_t v86;
  const void *v87;
  size_t v88;
  char *v89;
  unint64_t v90;
  const void *v91;
  unint64_t v92;
  char *v93;
  uint64_t v94;
  size_t v95;
  _WORD *v96;
  const char *v97;
  const void *v98;
  unint64_t v99;
  _DWORD *v100;
  _WORD *v101;
  size_t v102;
  const void *v103;
  char *v104;
  char *v105;
  _DWORD *v106;
  char *v107;
  uint64_t v108;
  const char *v109;
  uint64_t v110;
  size_t v111;
  _QWORD *v112;
  _QWORD *v113;
  _WORD *v114;
  _BYTE *v115;
  int v116;
  const char *v117;
  const char *v118;
  const char *v119;
  uint64_t v120;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  unint64_t v126;
  char v127;
  uint64_t v128;
  uint64_t v129;
  unint64_t v130;
  int v131;
  char v132;
  uint64_t v133;
  uint64_t v140;
  unsigned int v141;
  _BYTE *v142;
  uint64_t v143;
  unsigned int v144;
  _QWORD *v145;
  char *__dst;
  size_t v148;
  unint64_t v149;
  size_t v150;
  __int16 v151;
  void *__p[2];
  char v153;
  void *v154;
  __int128 v155;
  uint64_t v156;
  void *v157;
  __int128 v158;
  uint64_t v159;
  std::string v160;
  _BYTE *v161;
  void *v162;
  char v163;
  uint64_t v164;
  int v165;
  std::string *__str;
  unsigned int v167;
  char v168;
  void *v169;
  char v170;
  char v171;
  void **v172;
  void *v173;
  size_t v174;
  _BYTE v175[512];
  void *__base;
  size_t __nel;
  _BYTE v178[16];
  char *v179;
  uint64_t v180;
  uint64_t v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  _QWORD *v185;
  uint64_t v186;
  _BYTE v187[32];
  _QWORD *v188;
  uint64_t v189;
  _QWORD v190[6];

  v190[4] = *MEMORY[0x1E0C80C00];
  v188 = v190;
  v189 = 0x400000000;
  v185 = v187;
  v186 = 0x400000000;
  v157 = &v159;
  v158 = xmmword_1C6612EF0;
  v154 = &v156;
  v155 = xmmword_1C6612EF0;
  v182 = (char *)&v184;
  v183 = 0x400000000;
  v179 = (char *)&v181;
  v180 = 0x400000000;
  __base = v178;
  __nel = 0x400000000;
  v173 = v175;
  v174 = 0x400000000;
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
  if (**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8))
  {
    v144 = 0;
    while (1)
    {
      if ((**(_DWORD **)(a1 + 48) - 21) <= 1)
      {
        v160.__r_.__value_.__r.__words[0] = *(_QWORD *)(a1 + 136);
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
        if (**(_DWORD **)(a1 + 48) == 9)
          (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
        LODWORD(__p[0]) = 9;
        __dst = (char *)(*(_QWORD *)(a1 + 136) - v160.__r_.__value_.__r.__words[0]);
        sub_1C63EA1BC((uint64_t)&v173, (int *)__p, (uint64_t *)&v160, (uint64_t *)&__dst);
        goto LABEL_77;
      }
      v160.__r_.__value_.__r.__words[0] = (std::string::size_type)&v160.__r_.__value_.__r.__words[2];
      v160.__r_.__value_.__l.__size_ = 0x800000000;
      v167 = -1;
      v168 = 0;
      LOBYTE(v169) = 0;
      v171 = 0;
      v172 = &v173;
      if ((sub_1C60FEB44((int **)a1, (uint64_t)&v160, a10) & 1) != 0 || v168)
      {
        sub_1C63EA5EC(a1);
        v14 = 1;
        goto LABEL_72;
      }
      if (v167 == -1)
      {
        v14 = 2;
        goto LABEL_72;
      }
      v11 = v160.__r_.__value_.__r.__words[1];
      v140 = *a8;
      v141 = v167;
      if (LODWORD(v160.__r_.__value_.__r.__words[1]) != 1)
        break;
LABEL_11:
      v12 = *(unsigned __int16 **)(v140 + 48 * v141 + 32);
      if (v12)
      {
        v13 = -1;
        do
          ++v13;
        while (v12[v13]);
      }
      else
      {
        v13 = 0;
      }
      sub_1C60EB54C((unsigned int *)&__base, (uint64_t)__base + 4 * __nel, v12, &v12[v13]);
      v14 = 0;
LABEL_72:
      if (v171)
      {
        if (v170 < 0)
          operator delete(v169);
        v171 = 0;
      }
      sub_1C51E463C(&v160.__r_.__value_.__l.__data_);
      if ((v14 | 2) != 2)
      {
        v120 = 1;
        goto LABEL_292;
      }
LABEL_77:
      if (!**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8))
        goto LABEL_81;
    }
    v15 = *a8 + 48 * v167;
    v142 = (_BYTE *)(v15 + 4);
    v143 = v15 + 8;
    v145 = (_QWORD *)(v15 + 40);
    v16 = 2;
    v17 = 1;
    while (1)
    {
      v18 = *(_DWORD **)(v160.__r_.__value_.__r.__words[0] + 8 * v17);
      if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v18 + 48))(v18))
      {
        if (((*(uint64_t (**)(_DWORD *))(*(_QWORD *)v18 + 96))(v18) & 1) == 0)
        {
          v19 = *(_QWORD *)(a1 + 8);
          v20 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v18 + 56))(v18);
          if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 80))(v19, v20) & 1) == 0)
          {
            if (*v142 && v18[2] < *v142)
            {
              v36 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v18 + 56))(v18);
              v37 = __nel;
              if (__nel >= (unint64_t)HIDWORD(__nel))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__base, (uint64_t)v178, __nel + 1, 4);
                v37 = __nel;
              }
              *((_DWORD *)__base + v37) = v36;
              LODWORD(__nel) = __nel + 1;
            }
            goto LABEL_68;
          }
        }
      }
      v21 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v18 + 16))(v18);
      if (v22)
      {
        v23 = v21;
        v24 = v22;
        v25 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v18 + 24))(v18);
        if (v25)
          break;
      }
LABEL_68:
      ++v17;
      v16 += 6;
      if (v11 == (_DWORD)v17)
        goto LABEL_11;
    }
    v26 = v25;
    v27 = *((_BYTE *)v18 + 39);
    v28 = v27;
    if (v27 >= 0)
      v29 = (const char *)(v18 + 4);
    else
      v29 = (const char *)*((_QWORD *)v18 + 2);
    v30 = v27 & 0x7F;
    if (v28 >= 0)
      v31 = v30;
    else
      v31 = *((_QWORD *)v18 + 3);
    if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v18 + 40))(v18))
    {
      if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)v18 + 104))(v18))
        v29 = "r";
      else
        v29 = "i";
      v31 = 1;
    }
    if (v17 == 1 && (*(_BYTE *)(v143 + 2) & 0x10) != 0)
    {
      v38 = v186;
      if (v186 >= (unint64_t)HIDWORD(v186))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v185, (uint64_t)v187, v186 + 1, 8);
        v38 = v186;
      }
      v185[v38] = v26;
      LODWORD(v186) = v186 + 1;
      v39 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v18 + 96))(v18);
      v40 = v155;
      if ((unint64_t)(v155 + 1) > *((_QWORD *)&v155 + 1))
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v154, &v156, v155 + 1, 1);
        v40 = v155;
      }
      *((_BYTE *)v154 + v40) = v39;
      *(_QWORD *)&v155 = v155 + 1;
      v151 = 1283;
      __dst = "=";
      v149 = (unint64_t)v29;
      v150 = v31;
      llvm::Twine::str((llvm::Twine *)&__dst, __p);
      v41 = sub_1C4E01890((uint64_t)&v179, (unint64_t)__p, 1);
      v42 = &v179[24 * v180];
      v43 = *(_OWORD *)v41;
      *((_QWORD *)v42 + 2) = *(_QWORD *)(v41 + 16);
      *(_OWORD *)v42 = v43;
      *(_QWORD *)(v41 + 8) = 0;
      *(_QWORD *)(v41 + 16) = 0;
      *(_QWORD *)v41 = 0;
      LODWORD(v180) = v180 + 1;
      if (v153 < 0)
        operator delete(__p[0]);
      ++v144;
      v44 = 5;
      goto LABEL_67;
    }
    v32 = v189;
    if (v189 >= (unint64_t)HIDWORD(v189))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v188, (uint64_t)v190, v189 + 1, 8);
      v32 = v189;
    }
    v188[v32] = v26;
    LODWORD(v189) = v189 + 1;
    v33 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v18 + 96))(v18);
    v34 = v158;
    if ((unint64_t)(v158 + 1) > *((_QWORD *)&v158 + 1))
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v157, &v159, v158 + 1, 1);
      v34 = v158;
    }
    *((_BYTE *)v157 + v34) = v33;
    *(_QWORD *)&v158 = v158 + 1;
    if (!v29)
    {
      __dst = 0;
      v148 = 0;
      v149 = 0;
LABEL_62:
      v47 = sub_1C4E01890((uint64_t)&v182, (unint64_t)&__dst, 1);
      v48 = &v182[24 * v183];
      v49 = *(_OWORD *)v47;
      *((_QWORD *)v48 + 2) = *(_QWORD *)(v47 + 16);
      *(_OWORD *)v48 = v49;
      *(_QWORD *)(v47 + 8) = 0;
      *(_QWORD *)(v47 + 16) = 0;
      *(_QWORD *)v47 = 0;
      LODWORD(v183) = v183 + 1;
      if (SHIBYTE(v149) < 0)
        operator delete(__dst);
      if ((*(_BYTE *)(*v145 + v16) & 8) != 0)
        v44 = 3;
      else
        v44 = 4;
LABEL_67:
      sub_1C6116AF4((unint64_t)&v173, v44, v23, v24);
      goto LABEL_68;
    }
    if (v31 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (v31 >= 0x17)
    {
      v45 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v31 | 7) != 0x17)
        v45 = v31 | 7;
      v46 = v45 + 1;
      p_dst = (char **)operator new(v45 + 1);
      v148 = v31;
      v149 = v46 | 0x8000000000000000;
      __dst = (char *)p_dst;
    }
    else
    {
      HIBYTE(v149) = v31;
      p_dst = &__dst;
      if (!v31)
        goto LABEL_61;
    }
    memmove(p_dst, v29, v31);
LABEL_61:
    *((_BYTE *)p_dst + v31) = 0;
    goto LABEL_62;
  }
  v144 = 0;
LABEL_81:
  *a3 = v186;
  *a4 = v189;
  v50 = __nel;
  if (__nel >= 2)
  {
    qsort(__base, __nel, 4uLL, (int (__cdecl *)(const void *, const void *))sub_1C4AB967C);
    v50 = __nel;
  }
  v51 = __base;
  v52 = (char *)__base + 4 * v50;
  if (v50)
  {
    v53 = (char *)__base - 4;
    v54 = 4 * v50 - 4;
    while (v54)
    {
      v55 = *((_DWORD *)v53 + 1);
      v56 = *((_DWORD *)v53 + 2);
      v53 += 4;
      v54 -= 4;
      if (v55 == v56)
        goto LABEL_89;
    }
  }
  else
  {
    v53 = (char *)__base;
LABEL_89:
    if (v53 != v52)
    {
      v57 = v53 + 8;
      if (v53 + 8 != v52)
      {
        v58 = *(_DWORD *)v53;
        do
        {
          v59 = v58;
          v58 = *(_DWORD *)v57;
          if (v59 != *(_DWORD *)v57)
          {
            *((_DWORD *)v53 + 1) = v58;
            v53 += 4;
          }
          v57 += 4;
        }
        while (v57 != v52);
      }
      v52 = v53 + 4;
    }
  }
  LODWORD(__nel) = (unint64_t)(v52 - v51) >> 2;
  memset(&v160, 0, sizeof(v160));
  sub_1C60EB3D4((uint64_t)a7, __nel, &v160);
  if (SHIBYTE(v160.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v160.__r_.__value_.__l.__data_);
  if ((_DWORD)__nel)
  {
    v60 = 0;
    v61 = 0;
    v62 = 24 * __nel;
    do
    {
      v63 = (std::string *)(*a7 + v61);
      LODWORD(v160.__r_.__value_.__r.__words[1]) = 0;
      v163 = 0;
      v164 = 0;
      v160.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E81A7208;
      __str = v63;
      v165 = 0;
      v161 = 0;
      v162 = 0;
      v160.__r_.__value_.__r.__words[2] = 0;
      (*(void (**)(uint64_t, std::string *, _QWORD))(*(_QWORD *)a9 + 40))(a9, &v160, *(unsigned int *)((char *)__base + v60));
      v160.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E81A6E70;
      if (v165 == 1 && v160.__r_.__value_.__r.__words[2])
        MEMORY[0x1CAA32F9C](v160.__r_.__value_.__r.__words[2], 0x1000C8077774924);
      v61 += 24;
      v60 += 4;
    }
    while (v62 != v61);
  }
  if (*a3 | *a4)
  {
    v122 = (*a4 + *a3);
    sub_1C63EA94C(a5, v122);
    sub_1C60EB78C((uint64_t)a6, v122);
    LODWORD(v123) = *a3;
    if (*a3)
    {
      v124 = 0;
      v125 = 0;
      v126 = 0;
      do
      {
        v127 = *((_BYTE *)v154 + v126);
        v128 = *(_QWORD *)a5 + v124;
        *(_QWORD *)v128 = v185[v126];
        *(_BYTE *)(v128 + 8) = v127;
        std::string::operator=((std::string *)(*a6 + v125), (const std::string *)&v179[v125]);
        ++v126;
        v123 = *a3;
        v125 += 24;
        v124 += 16;
      }
      while (v126 < v123);
    }
    if (*a4)
    {
      v129 = 0;
      v130 = 0;
      v131 = v123;
      do
      {
        v132 = *((_BYTE *)v157 + v130);
        v133 = *(_QWORD *)a5 + 16 * (v131 + v130);
        *(_QWORD *)v133 = v188[v130];
        *(_BYTE *)(v133 + 8) = v132;
        std::string::operator=((std::string *)(*a6 + 24 * (v131 + v130++)), (const std::string *)&v182[v129]);
        v129 += 24;
      }
      while (v130 < *a4);
    }
  }
  __dst = 0;
  v148 = 0;
  v149 = 0;
  LODWORD(v160.__r_.__value_.__r.__words[1]) = 0;
  v163 = 0;
  v164 = 0;
  v160.__r_.__value_.__r.__words[0] = (std::string::size_type)&unk_1E81A7208;
  __str = (std::string *)&__dst;
  v165 = 0;
  v161 = 0;
  v162 = 0;
  v160.__r_.__value_.__r.__words[2] = 0;
  v64 = ***(_QWORD ***)(a1 + 240);
  v65 = *(_BYTE **)(v64 + 8);
  v66 = *(_BYTE **)(v64 + 16);
  v67 = v174;
  if (v174 >= 2)
  {
    qsort(v173, v174, 0x80uLL, (int (__cdecl *)(const void *, const void *))sub_1C6116BF0);
    v67 = v174;
  }
  if (v67)
  {
    v68 = 0;
    v69 = (char *)v173;
    while (v69[20])
    {
LABEL_244:
      v69 += 128;
      if (v69 == (char *)v173 + 128 * (unint64_t)v174)
        goto LABEL_284;
    }
    v70 = *(_DWORD *)v69;
    v71 = *((_QWORD *)v69 + 1);
    v72 = (v71 - (_DWORD)v65);
    if ((_DWORD)v71 != (_DWORD)v65)
    {
      if (v72 <= v161 - (_BYTE *)v162)
      {
        memcpy(v162, v65, (v71 - (_DWORD)v65));
        v162 = (char *)v162 + v72;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)&v160, v65, (v71 - (_DWORD)v65));
      }
    }
    switch(v70)
    {
      case 0:
        v73 = v162;
        if ((unint64_t)(v161 - (_BYTE *)v162) > 5)
        {
          *((_WORD *)v162 + 2) = 28263;
          *v73 = 1768710446;
          v162 = (char *)v162 + 6;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v160, ".align", 6uLL);
        }
        if (*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1) + 152) + 339))
          goto LABEL_242;
        v74 = *((_QWORD *)v69 + 3);
        v75 = v162;
        if (v162 >= v161)
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v160, 32);
        }
        else
        {
          v162 = (char *)v162 + 1;
          *v75 = 32;
        }
        sub_1C5E21910((llvm::raw_ostream *)&v160, v74, 0, 0, 0);
        v83 = 3;
        if (v74 >= 7)
          v83 = 4;
        if (v74 < 4)
          v83 = 2;
        goto LABEL_243;
      case 1:
        v76 = v162;
        if ((unint64_t)(v161 - (_BYTE *)v162) <= 4)
        {
          v77 = ".even";
          goto LABEL_125;
        }
        v83 = 0;
        *((_BYTE *)v162 + 4) = 110;
        v116 = 1702257966;
        goto LABEL_257;
      case 2:
        v76 = v162;
        if ((unint64_t)(v161 - (_BYTE *)v162) <= 4)
        {
          v77 = ".byte";
LABEL_125:
          v78 = 5;
          goto LABEL_241;
        }
        v83 = 0;
        *((_BYTE *)v162 + 4) = 101;
        v116 = 1954112046;
LABEL_257:
        *v76 = v116;
        v93 = (char *)v162 + 5;
        goto LABEL_163;
      case 3:
        if ((unint64_t)(v161 - (_BYTE *)v162) > 1)
        {
          *(_WORD *)v162 = 31524;
          v162 = (char *)v162 + 2;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v160, "${", 2uLL);
        }
        v79 = v144 + 1;
        sub_1C5E21910((llvm::raw_ostream *)&v160, v144, 0, 0, 0);
        v80 = v162;
        if ((unint64_t)(v161 - (_BYTE *)v162) > 2)
        {
          v83 = 0;
          *((_BYTE *)v162 + 2) = 125;
          *v80 = 20538;
          v162 = (char *)v162 + 3;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v160, ":P}", 3uLL);
LABEL_153:
          v83 = 0;
        }
        v144 = v79;
        goto LABEL_243;
      case 4:
        v81 = v162;
        if (v162 >= v161)
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v160, 36);
        }
        else
        {
          v162 = (char *)v162 + 1;
          *v81 = 36;
        }
        v79 = v144 + 1;
        sub_1C5E21910((llvm::raw_ostream *)&v160, v144, 0, 0, 0);
        goto LABEL_153;
      case 5:
        v82 = v162;
        if (v162 >= v161)
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v160, 36);
        }
        else
        {
          v162 = (char *)v162 + 1;
          *v82 = 36;
        }
        sub_1C5E21910((llvm::raw_ostream *)&v160, v68, 0, 0, 0);
        v83 = 0;
        ++v68;
        goto LABEL_243;
      case 6:
        v83 = 0;
        v84 = *((_QWORD *)v69 + 3);
        if (v84 > 63)
        {
          if (v84 <= 127)
          {
            if (v84 == 64)
            {
              v85 = v162;
              if ((unint64_t)(v161 - (_BYTE *)v162) <= 9)
              {
                v77 = "qword ptr ";
                goto LABEL_232;
              }
              v83 = 0;
              *((_WORD *)v162 + 4) = 8306;
              v117 = "qword ptr ";
            }
            else
            {
              if (v84 != 80)
                goto LABEL_243;
              v85 = v162;
              if ((unint64_t)(v161 - (_BYTE *)v162) <= 9)
              {
                v77 = "xword ptr ";
LABEL_232:
                v78 = 10;
                goto LABEL_241;
              }
              v83 = 0;
              *((_WORD *)v162 + 4) = 8306;
              v117 = "xword ptr ";
            }
LABEL_276:
            *v85 = *(_QWORD *)v117;
            v93 = (char *)v162 + 10;
            goto LABEL_163;
          }
          if (v84 == 128)
          {
            v112 = v162;
            if ((unint64_t)(v161 - (_BYTE *)v162) <= 0xB)
            {
              v77 = "xmmword ptr ";
              goto LABEL_240;
            }
            v83 = 0;
            *((_DWORD *)v162 + 2) = 544371824;
            v118 = "xmmword ptr ";
          }
          else
          {
            if (v84 != 256)
              goto LABEL_243;
            v112 = v162;
            if ((unint64_t)(v161 - (_BYTE *)v162) <= 0xB)
            {
              v77 = "ymmword ptr ";
LABEL_240:
              v78 = 12;
LABEL_241:
              llvm::raw_ostream::write((llvm::raw_ostream *)&v160, v77, v78);
LABEL_242:
              v83 = 0;
              goto LABEL_243;
            }
            v83 = 0;
            *((_DWORD *)v162 + 2) = 544371824;
            v118 = "ymmword ptr ";
          }
          *v112 = *(_QWORD *)v118;
          v93 = (char *)v162 + 12;
          goto LABEL_163;
        }
        switch(v84)
        {
          case 8:
            v113 = v162;
            if ((unint64_t)(v161 - (_BYTE *)v162) <= 8)
            {
              v77 = "byte ptr ";
LABEL_237:
              v78 = 9;
              goto LABEL_241;
            }
            v83 = 0;
            *((_BYTE *)v162 + 8) = 32;
            v119 = "byte ptr ";
            break;
          case 16:
            v113 = v162;
            if ((unint64_t)(v161 - (_BYTE *)v162) <= 8)
            {
              v77 = "word ptr ";
              goto LABEL_237;
            }
            v83 = 0;
            *((_BYTE *)v162 + 8) = 32;
            v119 = "word ptr ";
            break;
          case 32:
            v85 = v162;
            if ((unint64_t)(v161 - (_BYTE *)v162) <= 9)
            {
              v77 = "dword ptr ";
              goto LABEL_232;
            }
            v83 = 0;
            *((_WORD *)v162 + 4) = 8306;
            v117 = "dword ptr ";
            goto LABEL_276;
          default:
            goto LABEL_243;
        }
        *v113 = *(_QWORD *)v119;
        v93 = (char *)v162 + 9;
        goto LABEL_163;
      case 7:
        v86 = *(_QWORD *)(*(_QWORD *)(a1 + 216) + 152);
        v87 = *(const void **)(v86 + 104);
        v88 = *(_QWORD *)(v86 + 112);
        v89 = (char *)v162;
        if (v88 <= v161 - (_BYTE *)v162)
        {
          if (v88)
          {
            memcpy(v162, v87, v88);
            v89 = (char *)v162 + v88;
            v162 = (char *)v162 + v88;
          }
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v160, (const char *)v87, v88);
          v89 = (char *)v162;
        }
        v77 = (const char *)*((_QWORD *)v69 + 4);
        v92 = *((_QWORD *)v69 + 5);
        if (v92 > v161 - v89)
        {
          v78 = *((_QWORD *)v69 + 5);
          goto LABEL_241;
        }
        if (!v92)
          goto LABEL_242;
        memcpy(v89, v77, *((_QWORD *)v69 + 5));
        v83 = 0;
        v93 = (char *)v162 + v92;
        goto LABEL_163;
      case 8:
        if ((unint64_t)(v161 - (_BYTE *)v162) <= 1)
        {
          v77 = "\n\t";
          v78 = 2;
          goto LABEL_241;
        }
        v83 = 0;
        *(_WORD *)v162 = 2314;
        v93 = (char *)v162 + 2;
        goto LABEL_163;
      case 9:
        v65 = (_BYTE *)(v71 + *((unsigned int *)v69 + 4));
        goto LABEL_244;
      case 10:
        if (v69[48])
        {
          if (v161 == v162)
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&v160, "[", 1uLL);
          }
          else
          {
            *(_BYTE *)v162 = 91;
            v162 = (char *)v162 + 1;
          }
        }
        v90 = *((_QWORD *)v69 + 9);
        if (v90)
        {
          v91 = (const void *)*((_QWORD *)v69 + 8);
          if (v90 <= v161 - (_BYTE *)v162)
          {
            memcpy(v162, v91, *((_QWORD *)v69 + 9));
            v162 = (char *)v162 + v90;
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&v160, (const char *)v91, *((_QWORD *)v69 + 9));
          }
        }
        if (*((_QWORD *)v69 + 11))
        {
          v94 = *((_QWORD *)v69 + 9);
          if (v94)
            v95 = 3;
          else
            v95 = 0;
          v96 = v162;
          if (v95 <= v161 - (_BYTE *)v162)
          {
            if (v94)
            {
              *((_BYTE *)v162 + 2) = 32;
              *v96 = 11040;
              v96 = (char *)v162 + 3;
              v162 = (char *)v162 + 3;
            }
          }
          else
          {
            if (v94)
              v97 = " + ";
            else
              v97 = "";
            llvm::raw_ostream::write((llvm::raw_ostream *)&v160, v97, v95);
            v96 = v162;
          }
          v98 = (const void *)*((_QWORD *)v69 + 10);
          v99 = *((_QWORD *)v69 + 11);
          if (v99 <= v161 - (_BYTE *)v96)
          {
            if (v99)
            {
              memcpy(v96, v98, *((_QWORD *)v69 + 11));
              v162 = (char *)v162 + v99;
            }
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&v160, (const char *)v98, *((_QWORD *)v69 + 11));
          }
        }
        if (*((_DWORD *)v69 + 28) >= 2u)
        {
          v100 = v162;
          if ((unint64_t)(v161 - (_BYTE *)v162) > 4)
          {
            *((_BYTE *)v162 + 4) = 36;
            *v100 = 606087712;
            v162 = (char *)v162 + 5;
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&v160, " * $$", 5uLL);
          }
          sub_1C5E21910((llvm::raw_ostream *)&v160, *((unsigned int *)v69 + 28), 0, 0, 0);
        }
        if (!*((_QWORD *)v69 + 13))
          goto LABEL_204;
        if (*((_QWORD *)v69 + 9) || *((_QWORD *)v69 + 11))
        {
          v101 = v162;
          if ((unint64_t)(v161 - (_BYTE *)v162) > 2)
          {
            *((_BYTE *)v162 + 2) = 32;
            *v101 = 11040;
            v162 = (char *)v162 + 3;
          }
          else
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)&v160, " + ", 3uLL);
          }
        }
        v103 = (const void *)*((_QWORD *)v69 + 12);
        v102 = *((_QWORD *)v69 + 13);
        v104 = (char *)v173 + 128 * (unint64_t)v174;
        if (v69 == v104)
          goto LABEL_198;
        v105 = v69;
        do
        {
          if (*((const void **)v105 + 1) == v103
            && v102 == *((_DWORD *)v105 + 4)
            && (*(_DWORD *)v105 - 3) < 2)
          {
            if (*(_DWORD *)v105 == 3)
            {
              if ((unint64_t)(v161 - (_BYTE *)v162) > 1)
              {
                *(_WORD *)v162 = 31524;
                v162 = (char *)v162 + 2;
              }
              else
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)&v160, "${", 2uLL);
              }
              sub_1C5E21910((llvm::raw_ostream *)&v160, v144, 0, 0, 0);
              v114 = v162;
              if ((unint64_t)(v161 - (_BYTE *)v162) > 2)
              {
                *((_BYTE *)v162 + 2) = 125;
                *v114 = 20538;
                v162 = (char *)v162 + 3;
              }
              else
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)&v160, ":P}", 3uLL);
              }
              ++v144;
              v105[20] = 1;
            }
            else
            {
              v115 = v162;
              if (v162 >= v161)
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)&v160, 36);
              }
              else
              {
                v162 = (char *)v162 + 1;
                *v115 = 36;
              }
              sub_1C5E21910((llvm::raw_ostream *)&v160, v144, 0, 0, 0);
              v105[20] = 1;
              ++v144;
            }
            goto LABEL_204;
          }
          v105 += 128;
        }
        while (v105 != v104);
LABEL_198:
        v106 = v162;
        if ((unint64_t)(v161 - (_BYTE *)v162) > 6)
        {
          *(_DWORD *)((char *)v162 + 3) = 544499059;
          *v106 = 1936090735;
          v107 = (char *)v162 + 7;
          v162 = (char *)v162 + 7;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v160, "offset ", 7uLL);
          v107 = (char *)v162;
        }
        if (v102 <= v161 - v107)
        {
          if (v102)
          {
            memcpy(v107, v103, v102);
            v162 = (char *)v162 + v102;
          }
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v160, (const char *)v103, v102);
        }
LABEL_204:
        v108 = *((_QWORD *)v69 + 9);
        if (!*((_QWORD *)v69 + 7))
        {
          if (v108)
            goto LABEL_217;
          if (*((_QWORD *)v69 + 11))
            goto LABEL_217;
          v110 = *((_QWORD *)v69 + 13);
          if (v110)
            goto LABEL_217;
          goto LABEL_208;
        }
        v109 = " + $$";
        if (!v108 && !*((_QWORD *)v69 + 11))
        {
          v110 = *((_QWORD *)v69 + 13);
LABEL_208:
          if (v110)
            v109 = " + $$";
          else
            v109 = "$$";
        }
        v111 = strlen(v109);
        if (v111 <= v161 - (_BYTE *)v162)
        {
          if (v111)
          {
            memcpy(v162, v109, v111);
            v162 = (char *)v162 + v111;
          }
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v160, v109, v111);
        }
        llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v160, *((_QWORD *)v69 + 7));
LABEL_217:
        if (!v69[48])
          goto LABEL_242;
        if (v161 != v162)
        {
          v83 = 0;
          *(_BYTE *)v162 = 93;
          v93 = (char *)v162 + 1;
LABEL_163:
          v162 = v93;
LABEL_243:
          v65 = (_BYTE *)(v71 + *((unsigned int *)v69 + 4) + v83);
          goto LABEL_244;
        }
        v77 = "]";
        v78 = 1;
        goto LABEL_241;
      default:
        goto LABEL_242;
    }
  }
LABEL_284:
  if (v65 != v66)
  {
    if (v66 - v65 <= (unint64_t)(v161 - (_BYTE *)v162))
    {
      memcpy(v162, v65, v66 - v65);
      v162 = (char *)v162 + v66 - v65;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v160, v65, v66 - v65);
    }
  }
  std::string::operator=(a2, __str);
  v160.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E81A6E70;
  if (v165 == 1 && v160.__r_.__value_.__r.__words[2])
    MEMORY[0x1CAA32F9C](v160.__r_.__value_.__r.__words[2], 0x1000C8077774924);
  if (SHIBYTE(v149) < 0)
    operator delete(__dst);
  v120 = 0;
LABEL_292:
  if (v173 != v175)
    free(v173);
  if (__base != v178)
    free(__base);
  sub_1C4E01820(&v179);
  sub_1C4E01820(&v182);
  if (v154 != &v156)
    free(v154);
  if (v157 != &v159)
    free(v157);
  if (v185 != (_QWORD *)v187)
    free(v185);
  if (v188 != v190)
    free(v188);
  return v120;
}

uint64_t sub_1C60FC6E4(uint64_t a1, char *a2, llvm::Twine *a3, unint64_t a4, unint64_t a5)
{
  unint64_t v11[2];

  sub_1C63EA5EC(a1);
  v11[0] = a4;
  v11[1] = a5;
  llvm::SourceMgr::PrintMessage(*(llvm **)(a1 + 240), a2, 3, a3, v11, 1, 0, 0, 1u);
  return sub_1C6116C40(a1);
}

uint64_t sub_1C60FC764(uint64_t a1, char *a2, llvm::Twine *a3, uint64_t a4, uint64_t a5)
{
  char v10;
  char v12;
  unint64_t v13[2];
  void *v14;
  char v15;
  void *v16;
  char v17;
  void *v18;
  char v19;
  void *__p;
  char v21;
  _BYTE v22[24];
  void **v23;

  sub_1C4843224((uint64_t)v13, (uint64_t *)(*(_QWORD *)(a1 + 8) + 80));
  v10 = v13[0];
  v23 = (void **)v22;
  sub_1C4765410(&v23);
  if (v21 < 0)
    operator delete(__p);
  if (v19 < 0)
    operator delete(v18);
  if (v17 < 0)
    operator delete(v16);
  if (v15 < 0)
    operator delete(v14);
  if ((v10 & 8) == 0)
  {
    sub_1C4843224((uint64_t)v13, (uint64_t *)(*(_QWORD *)(a1 + 8) + 80));
    v12 = v13[0];
    v23 = (void **)v22;
    sub_1C4765410(&v23);
    if (v21 < 0)
      operator delete(__p);
    if (v19 < 0)
      operator delete(v18);
    if (v17 < 0)
      operator delete(v16);
    if (v15 < 0)
      operator delete(v14);
    if ((v12 & 4) != 0)
      return llvm::MCAsmParser::Error(a1, (uint64_t)a2, (uint64_t)a3, a4, a5);
    v13[0] = a4;
    v13[1] = a5;
    llvm::SourceMgr::PrintMessage(*(llvm **)(a1 + 240), a2, 1, a3, v13, 1, 0, 0, 1u);
    sub_1C6116C40(a1);
  }
  return 0;
}

uint64_t sub_1C60FC8E4(uint64_t a1, char *a2, llvm::Twine *a3, unint64_t a4, unint64_t a5)
{
  unint64_t v7[2];

  *(_BYTE *)(a1 + 32) = 1;
  v7[0] = a4;
  v7[1] = a5;
  llvm::SourceMgr::PrintMessage(*(llvm **)(a1 + 240), a2, 0, a3, v7, 1, 0, 0, 1u);
  sub_1C6116C40(a1);
  return 1;
}

uint64_t sub_1C60FC948(uint64_t a1)
{
  return sub_1C610DB3C(a1, 0);
}

uint64_t sub_1C60FC950(_DWORD **a1, unsigned __int8 **a2)
{
  return sub_1C6108828(a1, a2, 0);
}

uint64_t sub_1C60FC958(_DWORD **a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;

  v2 = (uint64_t)(a1 + 5);
  v3 = *(_QWORD *)(*(_QWORD *)((*((uint64_t (**)(_DWORD **))*a1 + 5))(a1) + 8) + 8);
  while (1)
  {
    v4 = *a1[6];
    if (!v4 || v4 == 9)
      break;
    sub_1C60E57B0(v2);
  }
  (*((void (**)(_DWORD **))*a1 + 5))(a1);
  return v3;
}

uint64_t sub_1C60FC9D4(uint64_t a1, std::string *a2)
{
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t i;
  uint64_t v16;
  _QWORD v17[4];
  __int16 v18;

  v4 = **(_DWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8);
  v17[0] = "expected string";
  v18 = 259;
  v5 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  if (v4 != 3)
  {
    llvm::MCAsmParser::Error(a1, *(_QWORD *)(*(_QWORD *)(v5 + 8) + 8), (uint64_t)v17, 0, 0);
    return 1;
  }
  MEMORY[0x1CAA32ABC](a2, "");
  v6 = **(unsigned __int8 **)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8) + 8);
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v8 = *(_QWORD *)(*(_QWORD *)(v7 + 8) + 16);
  v9 = v8 != 0;
  if (v8)
    v10 = *(_QWORD *)(*(_QWORD *)(v7 + 8) + 8) + 1;
  else
    v10 = *(_QWORD *)(*(_QWORD *)(v7 + 8) + 8);
  if (v9 <= v8 - 1)
    v11 = v8 - 1;
  else
    v11 = v8 != 0;
  if (v8 >= v11)
    v12 = v11;
  else
    v12 = *(_QWORD *)(*(_QWORD *)(v7 + 8) + 16);
  std::string::reserve(a2, v12 - v9);
  v13 = v12 - v9;
  if (v13)
  {
    for (i = 0; i != v13; ++i)
    {
      std::string::push_back(a2, *(_BYTE *)(v10 + i));
      if (*(unsigned __int8 *)(v10 + i) == v6)
      {
        if (i + 1 == v13)
        {
          v16 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8) + 8);
          v17[0] = "missing quotation mark in string";
          v18 = 259;
          return llvm::MCAsmParser::Error(a1, v16, (uint64_t)v17, 0, 0);
        }
        if (*(unsigned __int8 *)(v10 + i + 1) == v6)
          ++i;
      }
    }
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
  return 0;
}

BOOL sub_1C60FCB7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  std::string v12;

  v4 = 0;
  v5 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8) + 8);
  while (1)
  {
    v6 = *(unsigned __int8 *)(v5 + v4);
    if (v6 > 0x3E)
      goto LABEL_6;
    if (v6 == 33)
    {
      ++v4;
      goto LABEL_6;
    }
    if (((1 << v6) & 0x4000000000002401) != 0)
      break;
LABEL_6:
    ++v4;
  }
  if ((_DWORD)v6 == 62)
  {
    sub_1C610EBE4(a1, v5 + v4 + 1, *(_DWORD *)(a1 + 272), (*(_QWORD *)(*(_QWORD *)(a1 + 336) + 8 * ((*(_DWORD *)(a1 + 400) - 1) >> 6)) >> (*(_BYTE *)(a1 + 400) - 1)) & 1);
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
    memset(&v12, 0, sizeof(v12));
    v7 = v4 - 1;
    if (v4 != 1)
    {
      v8 = 0;
      v9 = v5 + 1;
      do
      {
        if (*(_BYTE *)(v9 + v8) == 33)
          v10 = v8 + 1;
        else
          v10 = v8;
        std::string::push_back(&v12, *(_BYTE *)(v9 + v10));
        v8 = v10 + 1;
      }
      while (v10 + 1 < v7);
    }
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    *(std::string *)a2 = v12;
  }
  return (_DWORD)v6 != 62;
}

uint64_t sub_1C60FCCB4(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t *v3;
  uint64_t v4;
  int v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  int v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  int BufferContainingLoc;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  v1 = result;
  v2 = result + 40;
  v3 = (uint64_t *)(result + 336);
  v4 = result + 352;
  while (1)
  {
    v5 = **(_DWORD **)(v1 + 48);
    if (v5)
      break;
    v6 = *(_QWORD *)(**(_QWORD **)(v1 + 240) + 24 * (*(_DWORD *)(v1 + 272) - 1) + 16);
    if (!v6)
      return result;
    v7 = *(_DWORD *)(v1 + 400);
    v8 = *(unsigned int *)(v1 + 344);
    if ((v7 & 0x3F) != 0)
    {
      v21 = *(_QWORD *)(v1 + 336) + 8 * v8;
      *(_QWORD *)(v21 - 8) &= ~(-1 << (v7 & 0x3F));
    }
    v9 = v8;
    v10 = v7 - 1;
    *(_DWORD *)(v1 + 400) = v7 - 1;
    v11 = v7 + 62;
    if ((_DWORD)v8 != v11 >> 6)
    {
      v12 = v11 >> 6;
      if (v8 > v12)
      {
        *(_DWORD *)(v1 + 344) = v12;
        v9 = v11 >> 6;
      }
      else
      {
        v13 = v8;
        if (v12 > *(_DWORD *)(v1 + 348))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v3, v4, v12, 8);
          v13 = *(unsigned int *)(v1 + 344);
          v9 = *(_DWORD *)(v1 + 344);
        }
        if (v12 != v8)
          bzero((void *)(*v3 + 8 * v13), 8 * (v12 - v8));
        v9 += v12 - v8;
        *(_DWORD *)(v1 + 344) = v9;
        v10 = *(_DWORD *)(v1 + 400);
      }
    }
    v14 = *v3;
    if ((v10 & 0x3F) != 0)
      *(_QWORD *)(v14 + 8 * v9 - 8) &= ~(-1 << (v10 & 0x3F));
    v15 = *(_QWORD *)(v14 + 8 * ((v10 - 1) >> 6)) >> (v10 - 1);
    v16 = *(uint64_t **)(v1 + 240);
    BufferContainingLoc = llvm::SourceMgr::FindBufferContainingLoc(v16, v6);
    *(_DWORD *)(v1 + 272) = BufferContainingLoc;
    v18 = *(_QWORD *)(*v16 + 24 * (BufferContainingLoc - 1));
    v19 = *(_QWORD *)(v18 + 8);
    v20 = *(_QWORD *)(v18 + 16) - v19;
    *(_QWORD *)(v1 + 192) = v19;
    *(_QWORD *)(v1 + 200) = v20;
    *(_QWORD *)(v1 + 184) = v6;
    *(_QWORD *)(v1 + 136) = 0;
    *(_BYTE *)(v1 + 211) = v15 & 1;
LABEL_18:
    result = sub_1C60E57B0(v2);
  }
  if (v5 != 9)
    goto LABEL_18;
  return sub_1C60E57B0(v2);
}

uint64_t sub_1C60FCE8C(_QWORD **a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;

  *a2 = 0;
  v6 = 1;
  if (((*(uint64_t (**)(_QWORD *))(*a1[1] + 24))(a1[1]) & 1) == 0
    && !sub_1C6116CD4((uint64_t)a1, 1u, (unint64_t *)a2, a3))
  {
    v12 = 0;
    llvm::MCExpr::evaluateAsAbsolute(*a2, &v12);
    if (v7)
    {
      v8 = v12;
      v9 = ((uint64_t (*)(_QWORD **))(*a1)[6])(a1);
      v10 = sub_1C484358C(v9 + 192, 24, 3);
      *(_BYTE *)v10 = 1;
      *(_DWORD *)(v10 + 1) = *(unsigned __int8 *)(v10 + 4) << 24;
      *(_QWORD *)(v10 + 8) = 0;
      *(_QWORD *)(v10 + 16) = v8;
      *a2 = v10;
    }
    return 0;
  }
  return v6;
}

uint64_t sub_1C60FCF60(uint64_t a1, unint64_t *a2, uint64_t *a3, _OWORD *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  unint64_t TempSymbol;
  uint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  const char *v19;
  __int16 v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unint64_t v25;
  int v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  int v31;
  uint64_t v32;
  void *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t *v37;
  uint64_t v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  unint64_t v42;
  _BYTE *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t *v47;
  unint64_t v48;
  _BYTE *v49;
  unint64_t v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  void **v56;
  unint64_t i;
  unsigned int v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v63;
  void **v64;
  void *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v68;
  int v69;
  unint64_t DirectionalLocalSymbol;
  uint64_t v71;
  unint64_t v72;
  int v73;
  unint64_t v74;
  uint64_t v75;
  __int128 v76;
  uint64_t v77;
  unint64_t v78;
  _BYTE *v79;
  unint64_t v80;
  __int128 v81;
  __int128 v82;
  __int128 v83;
  unint64_t v84;
  unint64_t v85;
  uint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  int VariantKindForName;
  uint64_t v92;
  int v93;
  unint64_t v94;
  char *v95;
  unint64_t v96;
  unint64_t v97;
  unint64_t v98;
  unint64_t v99;
  uint64_t v100;
  unint64_t v101;
  unint64_t v102;
  unint64_t v103;
  uint64_t v104;
  unint64_t v105;
  void **v106;
  size_t v107;
  uint64_t v108;
  int v109;
  size_t v110;
  void **v111;
  int v112;
  unsigned int v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  int v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  BOOL v122;
  uint64_t v123;
  uint64_t v124;
  unint64_t v125;
  uint64_t v126;
  void **v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  unint64_t v132;
  char *v133;
  int v134;
  uint64_t v135;
  uint64_t v136;
  int v137;
  int v138;
  uint64_t v139;
  _QWORD *v140;
  unint64_t Symbol;
  void **v142;
  size_t v143;
  uint64_t v144;
  int v145;
  size_t v146;
  void **v147;
  int v148;
  uint64_t v149;
  int v150;
  int v151;
  uint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  void **v157;
  size_t v158;
  uint64_t v159;
  int v160;
  size_t v161;
  void **v162;
  int v163;
  uint64_t v164;
  int v165;
  int v166;
  uint64_t v167;
  _QWORD *v168;
  uint64_t v169;
  uint64_t v170;
  void *v171;
  char *v172;
  uint64_t v173;
  unsigned __int8 *v174;
  int v175;
  uint64_t LineAndColumn;
  uint64_t v177;
  unint64_t v178;
  uint64_t v179;
  unint64_t v180;
  int v181;
  uint64_t v182;
  uint64_t v183;
  unint64_t v184;
  uint64_t v185;
  unint64_t v186;
  _OWORD *v187;
  void **v188;
  size_t v189;
  uint64_t v190;
  int v191;
  size_t v192;
  void **v193;
  int v194;
  uint64_t v195;
  int v196;
  int v197;
  uint64_t v198;
  _QWORD *v199;
  uint64_t v200;
  uint64_t v201;
  __int128 v202;
  uint64_t v203;
  __int16 v204;
  uint64_t *v205;
  int v206;
  char *v207;
  uint64_t v208;
  uint64_t v209;
  unint64_t v210;
  BOOL v211;
  _BYTE *v212;
  uint64_t *v213;
  void *v214;
  char *v215;
  void *v216;
  char *v217;
  void *v218;
  _OWORD *v219;
  int v220;
  int v221;
  int v222;
  int v223;
  unint64_t *v224;
  void *v225;
  void *v226;
  void *v227;
  void *__s1;
  char *__s1a;
  char *__s1b;
  int __s1c;
  void *__p[2];
  _BYTE *v233;
  unint64_t v234;
  __int16 v235;
  __int128 v236;
  __int128 v237;
  __int128 v238;
  __int128 v239;
  _BYTE v240[40];
  uint64_t v241;
  unint64_t v242;
  uint64_t v243;

  v243 = *MEMORY[0x1E0C80C00];
  v8 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  v9 = **(unsigned int **)(a1 + 48);
  v10 = *(_QWORD *)(v8 + 96);
  v11 = 1;
  switch((int)v9)
  {
    case 1:
      return v11;
    case 2:
    case 26:
    case 45:
      v239 = 0uLL;
      if ((*(unsigned int (**)(uint64_t, __int128 *))(*(_QWORD *)a1 + 192))(a1, &v239)
        && **(_DWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8) == 26)
      {
        if (*(_BYTE *)(*(_QWORD *)(a1 + 176) + 32))
        {
          (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
          v13 = *(_QWORD *)(a1 + 216);
          *(_QWORD *)v240 = "tmp";
          *(_WORD *)&v240[32] = 259;
          TempSymbol = llvm::MCContext::createTempSymbol(v13, (uint64_t)v240, 1);
          (*(void (**)(_QWORD, unint64_t, _QWORD))(**(_QWORD **)(a1 + 224) + 192))(*(_QWORD *)(a1 + 224), TempSymbol, 0);
          v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
          v16 = sub_1C484358C(v15 + 192, 24, 3);
          v11 = 0;
          v17 = *(unsigned __int8 *)(*(_QWORD *)(v15 + 152) + 18) << 16;
          *(_BYTE *)v16 = 2;
          *(_DWORD *)(v16 + 1) = v17 | (*(unsigned __int8 *)(v16 + 4) << 24);
          *(_QWORD *)(v16 + 8) = 0;
          *(_QWORD *)(v16 + 16) = TempSymbol;
          *a2 = v16;
          *a3 = v10;
          return v11;
        }
        *(_QWORD *)v240 = "invalid token in expression";
        *(_WORD *)&v240[32] = 259;
        v127 = (void **)v240;
        v128 = a1;
        v126 = v10;
        return llvm::MCAsmParser::Error(v128, v126, (uint64_t)v127, 0, 0);
      }
      v18 = *((_QWORD *)&v239 + 1);
      if (*((_QWORD *)&v239 + 1) == 3
        && !llvm::StringRef::compare_insensitive((unsigned __int8 **)&v239, "not", 3uLL))
      {
LABEL_22:
        if (((*(uint64_t (**)(uint64_t, unint64_t *, uint64_t *, _QWORD))(*(_QWORD *)a1 + 240))(a1, a2, a3, 0) & 1) == 0)
        {
          v23 = *a2;
          v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
          v25 = sub_1C484358C(v24 + 192, 24, 3);
          v11 = 0;
          *(_BYTE *)v25 = 3;
          v26 = (*(unsigned __int8 *)(v25 + 4) << 24) | 2;
LABEL_45:
          *(_DWORD *)(v25 + 1) = v26;
          *(_QWORD *)(v25 + 8) = v10;
          *(_QWORD *)(v25 + 16) = v23;
          *a2 = v25;
        }
        return v11;
      }
      v237 = 0u;
      v238 = 0u;
      if (*(_BYTE *)(*(_QWORD *)(a1 + 232) + 429))
      {
        if (**(_DWORD **)(a1 + 48) != 17)
          goto LABEL_94;
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
        __p[0] = 0;
        __p[1] = 0;
        (*(void (**)(uint64_t, void **))(*(_QWORD *)a1 + 192))(a1, __p);
        *(_QWORD *)v240 = "unexpected token in variant, expected ')'";
        *(_WORD *)&v240[32] = 259;
        if (llvm::MCAsmParser::parseToken((llvm::MCAsmParser *)a1, 18, (llvm::Twine *)v240))
          return v11;
LABEL_75:
        v237 = v239;
        v238 = *(_OWORD *)__p;
        goto LABEL_94;
      }
      if ((_DWORD)v9 == 3)
      {
        if (**(_DWORD **)(a1 + 48) != 45)
          goto LABEL_94;
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
        v68 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 96);
        __p[0] = 0;
        __p[1] = 0;
        if ((*(unsigned int (**)(uint64_t, void **))(*(_QWORD *)a1 + 192))(a1, __p))
        {
          *(_QWORD *)v240 = "expected symbol variant after '@'";
          v204 = 259;
          goto LABEL_256;
        }
        goto LABEL_75;
      }
      v240[0] = 64;
      v84 = llvm::StringRef::find((uint64_t *)&v239, v240, 1uLL, 0);
      if (v84 == -1)
      {
        v88 = 0;
        v89 = 0;
        v86 = v239;
      }
      else
      {
        if (v18 >= v84)
          v85 = v84;
        else
          v85 = v18;
        v86 = v239;
        if (v18 >= v84 + 1)
          v87 = v84 + 1;
        else
          v87 = v18;
        v88 = v239 + v87;
        v89 = v18 - v87;
        v18 = v85;
      }
      *(_QWORD *)&v237 = v86;
      *((_QWORD *)&v237 + 1) = v18;
      *(_QWORD *)&v238 = v88;
      *((_QWORD *)&v238 + 1) = v89;
LABEL_94:
      *a3 = v239 + *((_QWORD *)&v239 + 1);
      v236 = v239;
      if (!*((_QWORD *)&v239 + 1))
      {
        v126 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 96);
        *(_QWORD *)v240 = "expected a symbol reference";
        *(_WORD *)&v240[32] = 259;
        v127 = (void **)v240;
        goto LABEL_143;
      }
      v90 = *((_QWORD *)&v238 + 1);
      if (!*((_QWORD *)&v238 + 1))
        goto LABEL_99;
      v68 = v238;
      VariantKindForName = llvm::MCSymbolRefExpr::getVariantKindForName((char *)v238, *((unint64_t *)&v238 + 1));
      if (VariantKindForName == 1)
      {
        v92 = *(_QWORD *)(a1 + 232);
        if (*(_BYTE *)(v92 + 180) && !*(_BYTE *)(v92 + 429))
        {
LABEL_99:
          v93 = 0;
          goto LABEL_101;
        }
        v235 = 1283;
        __p[0] = "invalid variant '";
        v233 = (_BYTE *)v68;
        v234 = v90;
        *(_QWORD *)v240 = __p;
        *(_QWORD *)&v240[16] = "'";
        v204 = 770;
LABEL_256:
        *(_WORD *)&v240[32] = v204;
        v127 = (void **)v240;
        v128 = a1;
        v126 = v68;
        return llvm::MCAsmParser::Error(v128, v126, (uint64_t)v127, 0, 0);
      }
      v93 = VariantKindForName;
      v236 = v237;
LABEL_101:
      v224 = a2;
      memset(v240, 0, 28);
      *(_DWORD *)&v240[32] = 0;
      LOBYTE(__p[0]) = 46;
      v94 = llvm::StringRef::find((uint64_t *)&v236, (char *)__p, 1uLL, 0);
      v219 = a4;
      v213 = a3;
      v215 = (char *)v10;
      v220 = v93;
      if (v94 == -1)
      {
        v96 = *((_QWORD *)&v236 + 1);
        v95 = (char *)v236;
        v237 = v236;
        v238 = 0uLL;
      }
      else
      {
        v96 = *((_QWORD *)&v236 + 1);
        v95 = (char *)v236;
        if (*((_QWORD *)&v236 + 1) >= v94)
          v97 = v94;
        else
          v97 = *((_QWORD *)&v236 + 1);
        if (*((_QWORD *)&v236 + 1) >= v94 + 1)
          v98 = v94 + 1;
        else
          v98 = *((_QWORD *)&v236 + 1);
        v99 = *((_QWORD *)&v236 + 1) - v98;
        v100 = v236 + v98;
        *(_QWORD *)&v237 = v236;
        *((_QWORD *)&v237 + 1) = v97;
        *(_QWORD *)&v238 = v236 + v98;
        *((_QWORD *)&v238 + 1) = *((_QWORD *)&v236 + 1) - v98;
        if (*((_QWORD *)&v236 + 1) > v94 + 1)
        {
          v236 = v237;
          v96 = *((_QWORD *)&v237 + 1);
          v95 = (char *)v237;
          if ((*(unsigned int (**)(uint64_t, _QWORD, _QWORD, uint64_t, unint64_t, _BYTE *))(*(_QWORD *)a1 + 136))(a1, v237, *((_QWORD *)&v237 + 1), v100, v99, v240))
          {
            LOBYTE(__p[0]) = 46;
            v101 = llvm::StringRef::find((uint64_t *)&v238, (char *)__p, 1uLL, 0);
            if (v101 == -1)
            {
              v104 = 0;
              v105 = 0;
            }
            else
            {
              if (v99 >= v101)
                v102 = v101;
              else
                v102 = v99;
              if (v99 >= v101 + 1)
                v103 = v101 + 1;
              else
                v103 = v99;
              v104 = v100 + v103;
              v105 = v99 - v103;
              v99 = v102;
            }
            (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t, unint64_t, _BYTE *))(*(_QWORD *)a1 + 136))(a1, v100, v99, v104, v105, v240);
          }
          else
          {
            sub_1C5E3DEA4(__p, v95, (uint64_t (*)(_QWORD))sub_1C5E3C6A8, &v95[v96], (uint64_t)sub_1C5E3C6A8, v96);
            v216 = __p[0];
            if (SHIBYTE(v233) >= 0)
              v106 = __p;
            else
              v106 = (void **)__p[0];
            if (SHIBYTE(v233) >= 0)
              v107 = HIBYTE(v233) & 0x7F;
            else
              v107 = (size_t)__p[1];
            v108 = *(unsigned int *)(a1 + 624);
            v225 = (void *)v96;
            __s1a = v95;
            v221 = SHIBYTE(v233);
            if ((_DWORD)v108)
            {
              v109 = 0;
              if (v107)
              {
                v110 = v107;
                v111 = v106;
                do
                {
                  v112 = *(unsigned __int8 *)v111;
                  v111 = (void **)((char *)v111 + 1);
                  v109 = 33 * v109 + v112;
                  --v110;
                }
                while (v110);
              }
              v113 = v108 - 1;
              v114 = *(_QWORD *)(a1 + 616);
              v115 = *(unsigned int *)(a1 + 624);
              v116 = v114 + 8 * v108 + 8;
              v117 = 1;
              v118 = v109;
              while (1)
              {
                v119 = v118 & v113;
                v120 = *(_QWORD **)(v114 + 8 * v119);
                if (v120 != (_QWORD *)-8)
                {
                  if (!v120)
                  {
                    v121 = v115;
                    goto LABEL_138;
                  }
                  if (*(_DWORD *)(v116 + 4 * v119) == v109
                    && v107 == *v120
                    && (!v107 || !memcmp(v106, (char *)v120 + *(unsigned int *)(a1 + 636), v107)))
                  {
                    break;
                  }
                }
                v118 = v117 + v119;
                ++v117;
              }
              if ((_DWORD)v119 == -1)
                v121 = v115;
              else
                v121 = (int)v119;
            }
            else
            {
              v115 = 0;
              v121 = 0;
            }
LABEL_138:
            v95 = __s1a;
            if (v221 < 0)
              operator delete(v216);
            v122 = v121 == v115;
            v96 = (unint64_t)v225;
            if (!v122)
            {
              v123 = *(unsigned int *)&v240[32];
              v124 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
              v125 = sub_1C484358C(v124 + 192, 24, 3);
              v11 = 0;
              *(_BYTE *)v125 = 1;
              *(_DWORD *)(v125 + 1) = *(unsigned __int8 *)(v125 + 4) << 24;
              *(_QWORD *)(v125 + 8) = 0;
              *(_QWORD *)(v125 + 16) = v123;
              *v224 = v125;
              return v11;
            }
          }
        }
      }
      __s1b = v95;
      v129 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
      v130 = *(unsigned int *)(v129 + 1152);
      if (!(_DWORD)v130)
        goto LABEL_161;
      v131 = 0;
      if (v96)
      {
        v132 = v96;
        v133 = v95;
        do
        {
          v134 = *v133++;
          v131 = 33 * v131 + v134;
          --v132;
        }
        while (v132);
      }
      v135 = *(_QWORD *)(v129 + 1144);
      v136 = *(unsigned int *)(v129 + 1164);
      v137 = 1;
      v138 = v131;
      while (1)
      {
        v139 = v138 & (v130 - 1);
        v140 = *(_QWORD **)(v135 + 8 * v139);
        if (v140 != (_QWORD *)-8)
        {
          if (!v140)
            goto LABEL_161;
          if (*(_DWORD *)(v135 + 8 * v130 + 8 + 4 * v139) == v131
            && v96 == *v140
            && (!v96 || !memcmp(__s1b, (char *)v140 + v136, v96)))
          {
            break;
          }
        }
        v138 = v137 + v139;
        ++v137;
      }
      if ((_DWORD)v139 == -1
        || (int)v139 == v130
        || (Symbol = *(_QWORD *)(*(_QWORD *)(v135 + 8 * (int)v139) + 8)) == 0)
      {
LABEL_161:
        sub_1C5E3DEA4(__p, __s1b, (uint64_t (*)(_QWORD))sub_1C5E3C6A8, &__s1b[v96], (uint64_t)sub_1C5E3C6A8, v96);
        if (SHIBYTE(v233) >= 0)
          v142 = __p;
        else
          v142 = (void **)__p[0];
        if (SHIBYTE(v233) >= 0)
          v143 = HIBYTE(v233) & 0x7F;
        else
          v143 = (size_t)__p[1];
        v144 = *(unsigned int *)(a1 + 1144);
        v226 = (void *)v96;
        v217 = &__s1b[v96];
        v214 = __p[0];
        v222 = SHIBYTE(v233);
        if ((_DWORD)v144)
        {
          v145 = 0;
          if (v143)
          {
            v146 = v143;
            v147 = v142;
            do
            {
              v148 = *(unsigned __int8 *)v147;
              v147 = (void **)((char *)v147 + 1);
              v145 = 33 * v145 + v148;
              --v146;
            }
            while (v146);
          }
          v149 = *(_QWORD *)(a1 + 1136);
          v150 = 1;
          v151 = v145;
          while (1)
          {
            v152 = v151 & (v144 - 1);
            v153 = *(_QWORD **)(v149 + 8 * v152);
            if (v153 != (_QWORD *)-8)
            {
              if (!v153)
              {
                v154 = v144;
                goto LABEL_180;
              }
              if (*(_DWORD *)(v149 + 8 * v144 + 8 + 4 * v152) == v145
                && v143 == *v153
                && (!v143 || !memcmp(v142, (char *)v153 + *(unsigned int *)(a1 + 1156), v143)))
              {
                break;
              }
            }
            v151 = v150 + v152;
            ++v150;
          }
          v154 = (int)v152;
          if ((_DWORD)v152 == -1)
            v154 = v144;
        }
        else
        {
          v154 = 0;
          v149 = *(_QWORD *)(a1 + 1136);
        }
LABEL_180:
        v155 = v149 + 8 * v154;
        if (v222 < 0)
        {
          operator delete(v214);
          v149 = *(_QWORD *)(a1 + 1136);
          LODWORD(v144) = *(_DWORD *)(a1 + 1144);
        }
        if (v155 == v149 + 8 * v144)
          goto LABEL_185;
        v156 = *(_DWORD *)(*(_QWORD *)v155 + 8);
        if (v156 == 3)
        {
          LineAndColumn = 1427;
        }
        else
        {
          if (v156 != 6)
          {
LABEL_185:
            sub_1C5E3DEA4(__p, __s1b, (uint64_t (*)(_QWORD))sub_1C5E3C6A8, v217, (uint64_t)sub_1C5E3C6A8, (unint64_t)v226);
            if (SHIBYTE(v233) >= 0)
              v157 = __p;
            else
              v157 = (void **)__p[0];
            if (SHIBYTE(v233) >= 0)
              v158 = HIBYTE(v233) & 0x7F;
            else
              v158 = (size_t)__p[1];
            v159 = *(unsigned int *)(a1 + 480);
            v218 = __p[0];
            v223 = SHIBYTE(v233);
            if ((_DWORD)v159)
            {
              v160 = 0;
              if (v158)
              {
                v161 = v158;
                v162 = v157;
                do
                {
                  v163 = *(unsigned __int8 *)v162;
                  v162 = (void **)((char *)v162 + 1);
                  v160 = 33 * v160 + v163;
                  --v161;
                }
                while (v161);
              }
              v164 = *(_QWORD *)(a1 + 472);
              v165 = 1;
              v166 = v160;
              while (1)
              {
                v167 = v166 & (v159 - 1);
                v168 = *(_QWORD **)(v164 + 8 * v167);
                if (v168 != (_QWORD *)-8)
                {
                  if (!v168)
                  {
                    v169 = v159;
                    goto LABEL_204;
                  }
                  if (*(_DWORD *)(v164 + 8 * v159 + 8 + 4 * v167) == v160
                    && v158 == *v168
                    && (!v158 || !memcmp(v157, (char *)v168 + *(unsigned int *)(a1 + 492), v158)))
                  {
                    break;
                  }
                }
                v166 = v165 + v167;
                ++v165;
              }
              v169 = (int)v167;
              if ((_DWORD)v167 == -1)
                v169 = v159;
            }
            else
            {
              v169 = 0;
              v164 = *(_QWORD *)(a1 + 472);
            }
LABEL_204:
            v170 = v164 + 8 * v169;
            v171 = v226;
            v172 = __s1b;
            if (v223 < 0)
            {
              operator delete(v218);
              v164 = *(_QWORD *)(a1 + 472);
              LODWORD(v159) = *(_DWORD *)(a1 + 480);
            }
            if (v170 != v164 + 8 * v159)
            {
              v236 = *(_OWORD *)(*(_QWORD *)v170 + 8);
              v171 = (void *)*((_QWORD *)&v236 + 1);
              v172 = (char *)v236;
            }
            v173 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
            v235 = 261;
            __p[0] = v172;
            __p[1] = v171;
            Symbol = llvm::MCContext::getOrCreateSymbol(v173, (uint64_t)__p);
            goto LABEL_209;
          }
          v205 = *(uint64_t **)(a1 + 680);
          if (v205 == *(uint64_t **)(a1 + 688))
          {
            v206 = *(_DWORD *)(a1 + 272);
            v207 = v215;
          }
          else
          {
            v208 = *v205;
            v207 = *(char **)v208;
            v206 = *(_DWORD *)(v208 + 8);
          }
          LineAndColumn = llvm::SourceMgr::getLineAndColumn(*(uint64_t **)(a1 + 240), v207, v206);
        }
        v177 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
        v178 = sub_1C484358C(v177 + 192, 24, 3);
        v11 = 0;
        *(_BYTE *)v178 = 1;
        *(_DWORD *)(v178 + 1) = *(unsigned __int8 *)(v178 + 4) << 24;
        *(_QWORD *)(v178 + 8) = 0;
        *(_QWORD *)(v178 + 16) = LineAndColumn;
        *v224 = v178;
        return v11;
      }
LABEL_209:
      if ((*(_DWORD *)(Symbol + 8) & 0x1C00) == 0x800)
      {
        v174 = *(unsigned __int8 **)(Symbol + 24);
        v175 = *v174;
        if (v175 == 4)
        {
          if (((*(uint64_t (**)(unsigned __int8 *))(*((_QWORD *)v174 - 1) + 48))(v174 - 8) & 1) != 0)
          {
            if (!v220)
            {
              v174 = *(unsigned __int8 **)(Symbol + 24);
LABEL_218:
              v11 = 0;
              *v224 = (unint64_t)v174;
              return v11;
            }
            v126 = *v213;
            __p[0] = "unexpected modifier on variable reference";
            v235 = 259;
            v127 = __p;
LABEL_143:
            v128 = a1;
            return llvm::MCAsmParser::Error(v128, v126, (uint64_t)v127, 0, 0);
          }
        }
        else if (!v220 && v175 == 1)
        {
          goto LABEL_218;
        }
      }
      v179 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
      v180 = sub_1C484358C(v179 + 192, 24, 3);
      v181 = v220 | (*(unsigned __int8 *)(*(_QWORD *)(v179 + 152) + 18) << 16);
      *(_BYTE *)v180 = 2;
      *(_DWORD *)(v180 + 1) = v181 | (*(unsigned __int8 *)(v180 + 4) << 24);
      *(_QWORD *)(v180 + 8) = v215;
      *(_QWORD *)(v180 + 16) = Symbol;
      v182 = *(unsigned int *)&v240[32];
      if (*(_DWORD *)&v240[32])
      {
        v183 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
        v184 = sub_1C484358C(v183 + 192, 24, 3);
        *(_BYTE *)v184 = 1;
        *(_DWORD *)(v184 + 1) = *(unsigned __int8 *)(v184 + 4) << 24;
        *(_QWORD *)(v184 + 8) = 0;
        *(_QWORD *)(v184 + 16) = v182;
        v185 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
        v186 = sub_1C484358C(v185 + 192, 32, 3);
        *(_BYTE *)v186 = 0;
        *(_DWORD *)(v186 + 1) = *(unsigned __int8 *)(v186 + 4) << 24;
        *(_QWORD *)(v186 + 8) = 0;
        *(_QWORD *)(v186 + 16) = v180;
        *(_QWORD *)(v186 + 24) = v184;
        v180 = v186;
      }
      *v224 = v180;
      v187 = v219;
      if (!v219)
        return 0;
      if (!*(_QWORD *)&v240[8])
      {
        sub_1C5E3DEA4(__p, (char *)v239, (uint64_t (*)(_QWORD))sub_1C5E3C6A8, (char *)(v239 + *((_QWORD *)&v239 + 1)), (uint64_t)sub_1C5E3C6A8, *((unint64_t *)&v239 + 1));
        __s1c = SHIBYTE(v233);
        v227 = __p[0];
        if (SHIBYTE(v233) >= 0)
          v188 = __p;
        else
          v188 = (void **)__p[0];
        if (SHIBYTE(v233) >= 0)
          v189 = HIBYTE(v233) & 0x7F;
        else
          v189 = (size_t)__p[1];
        v190 = *(unsigned int *)(a1 + 656);
        if ((_DWORD)v190)
        {
          v191 = 0;
          if (v189)
          {
            v192 = v189;
            v193 = v188;
            do
            {
              v194 = *(unsigned __int8 *)v193;
              v193 = (void **)((char *)v193 + 1);
              v191 = 33 * v191 + v194;
              --v192;
            }
            while (v192);
          }
          v195 = *(_QWORD *)(a1 + 648);
          v196 = 1;
          v197 = v191;
          while (1)
          {
            v198 = v197 & (v190 - 1);
            v199 = *(_QWORD **)(v195 + 8 * v198);
            if (v199 != (_QWORD *)-8)
            {
              if (!v199)
              {
                v200 = v190;
                goto LABEL_242;
              }
              if (*(_DWORD *)(v195 + 8 * v190 + 8 + 4 * v198) == v191
                && v189 == *v199
                && (!v189 || !memcmp(v188, (char *)v199 + *(unsigned int *)(a1 + 668), v189)))
              {
                break;
              }
            }
            v197 = v196 + v198;
            ++v196;
          }
          v200 = (int)v198;
          if ((_DWORD)v198 == -1)
            v200 = v190;
        }
        else
        {
          v200 = 0;
          v195 = *(_QWORD *)(a1 + 648);
        }
LABEL_242:
        v201 = v195 + 8 * v200;
        v187 = v219;
        if (__s1c < 0)
        {
          operator delete(v227);
          v195 = *(_QWORD *)(a1 + 648);
          LODWORD(v190) = *(_DWORD *)(a1 + 656);
        }
        if (v201 != v195 + 8 * v190)
        {
          v202 = *(_OWORD *)(*(_QWORD *)v201 + 8);
          *(_OWORD *)&v240[12] = *(_OWORD *)(*(_QWORD *)v201 + 20);
          *(_OWORD *)v240 = v202;
        }
      }
      v11 = 0;
      *v187 = *(_OWORD *)v240;
      *(_OWORD *)((char *)v187 + 12) = *(_OWORD *)&v240[12];
      return v11;
    case 3:
      v54 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8) + 8);
      __p[0] = 0;
      __p[1] = 0;
      v233 = 0;
      if (((*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a1 + 208))(a1, __p) & 1) == 0)
      {
        v55 = HIBYTE(v233) & 0x7F;
        if (SHIBYTE(v233) < 0)
          v55 = (unint64_t)__p[1];
        if (v55 >= 9)
        {
          *(_QWORD *)v240 = "literal value out of range";
          *(_WORD *)&v240[32] = 259;
          v11 = llvm::MCAsmParser::Error(a1, v54, (uint64_t)v240, 0, 0);
        }
        else
        {
          v56 = __p;
          if (SHIBYTE(v233) < 0)
            v56 = (void **)__p[0];
          for (i = 0; v55; --v55)
          {
            v58 = *(unsigned __int8 *)v56;
            v56 = (void **)((char *)v56 + 1);
            i = v58 | (i << 8);
          }
          v59 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
          v60 = sub_1C484358C(v59 + 192, 24, 3);
          v11 = 0;
          *(_BYTE *)v60 = 1;
          *(_DWORD *)(v60 + 1) = *(unsigned __int8 *)(v60 + 4) << 24;
          *(_QWORD *)(v60 + 8) = 0;
          *(_QWORD *)(v60 + 16) = i;
          *a2 = v60;
        }
      }
      if (SHIBYTE(v233) < 0)
        operator delete(__p[0]);
      return v11;
    case 4:
      v33 = *(void **)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8) + 8);
      v34 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8);
      v37 = *(uint64_t **)(v34 + 24);
      v35 = (uint64_t *)(v34 + 24);
      v36 = v37;
      if (*((_DWORD *)v35 + 2) >= 0x41u)
        v35 = v36;
      v38 = *v35;
      v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
      v40 = sub_1C484358C(v39 + 192, 24, 3);
      *(_BYTE *)v40 = 1;
      *(_DWORD *)(v40 + 1) = *(unsigned __int8 *)(v40 + 4) << 24;
      *(_QWORD *)(v40 + 8) = 0;
      *(_QWORD *)(v40 + 16) = v38;
      *a2 = v40;
      *a3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16);
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
      if (**(_DWORD **)(a1 + 48) != 2)
        return 0;
      v41 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8);
      v43 = *(_BYTE **)(v41 + 8);
      v42 = *(_QWORD *)(v41 + 16);
      *(_QWORD *)&v237 = v43;
      *((_QWORD *)&v237 + 1) = v42;
      v240[0] = 64;
      v44 = llvm::StringRef::find((uint64_t *)&v237, v240, 1uLL, 0);
      if (v44 == -1
        || (v42 >= v44 + 1 ? (v45 = v44 + 1) : (v45 = v42), v42 >= v44 ? (v46 = v44) : (v46 = v42), v42 <= v44))
      {
        LODWORD(v11) = 0;
      }
      else
      {
        __s1 = v33;
        v47 = a3;
        v48 = v42 - v45;
        v49 = &v43[v45];
        v11 = llvm::MCSymbolRefExpr::getVariantKindForName(&v43[v45], v42 - v45);
        if ((_DWORD)v11 == 1)
        {
          v235 = 1283;
          __p[0] = "invalid variant '";
          v233 = v49;
          v234 = v48;
          *(_QWORD *)v240 = __p;
          *(_QWORD *)&v240[16] = "'";
          v20 = 770;
          goto LABEL_17;
        }
        v42 = v46;
        a3 = v47;
        v33 = __s1;
      }
      if (v42 != 1)
        return 0;
      v69 = *v43;
      if ((v69 | 4) != 0x66)
        return 0;
      DirectionalLocalSymbol = llvm::MCContext::getDirectionalLocalSymbol(*(llvm::MCContext **)(a1 + 216), v38, v69 == 98);
      v71 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
      v72 = sub_1C484358C(v71 + 192, 24, 3);
      v73 = v11 | (*(unsigned __int8 *)(*(_QWORD *)(v71 + 152) + 18) << 16);
      *(_BYTE *)v72 = 2;
      *(_DWORD *)(v72 + 1) = v73 | (*(unsigned __int8 *)(v72 + 4) << 24);
      *(_QWORD *)(v72 + 8) = 0;
      *(_QWORD *)(v72 + 16) = DirectionalLocalSymbol;
      *a2 = v72;
      if (*v43 == 98)
      {
        v74 = *(_QWORD *)DirectionalLocalSymbol & 0xFFFFFFFFFFFFFFF8;
        if (!v74 && (*(_DWORD *)(DirectionalLocalSymbol + 8) & 0x1C00) == 0x800)
        {
          *(_DWORD *)(DirectionalLocalSymbol + 8) |= 4u;
          llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(DirectionalLocalSymbol + 24));
          *(_QWORD *)DirectionalLocalSymbol = *(_QWORD *)DirectionalLocalSymbol & 7 | v74;
        }
        if (!v74)
        {
          *(_QWORD *)v240 = "directional label undefined";
          *(_WORD *)&v240[32] = 259;
          v127 = (void **)v240;
          v128 = a1;
          v126 = (uint64_t)v33;
          return llvm::MCAsmParser::Error(v128, v126, (uint64_t)v127, 0, 0);
        }
      }
      *(_QWORD *)v240 = v33;
      v75 = *(_QWORD *)(a1 + 792);
      v76 = *(_OWORD *)(a1 + 776);
      *(_OWORD *)&v240[8] = *(_OWORD *)(a1 + 760);
      *(_OWORD *)&v240[24] = v76;
      v241 = v75;
      v242 = DirectionalLocalSymbol;
      v77 = *(unsigned int *)(a1 + 824);
      v78 = *(_QWORD *)(a1 + 816);
      v79 = v240;
      if (v77 >= *(_DWORD *)(a1 + 828))
      {
        v209 = a1 + 816;
        v210 = v77 + 1;
        v211 = v78 + 56 * v77 > (unint64_t)v240;
        if (v78 <= (unint64_t)v240 && v211)
        {
          v212 = &v240[-v78];
          llvm::SmallVectorBase<unsigned int>::grow_pod(v209, a1 + 832, v210, 56);
          v78 = *(_QWORD *)(a1 + 816);
          v79 = &v212[v78];
        }
        else
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v209, a1 + 832, v210, 56);
          v78 = *(_QWORD *)(a1 + 816);
          v79 = v240;
        }
      }
      v80 = v78 + 56 * *(unsigned int *)(a1 + 824);
      v81 = *(_OWORD *)v79;
      v82 = *((_OWORD *)v79 + 1);
      v83 = *((_OWORD *)v79 + 2);
      *(_QWORD *)(v80 + 48) = *((_QWORD *)v79 + 6);
      *(_OWORD *)(v80 + 16) = v82;
      *(_OWORD *)(v80 + 32) = v83;
      *(_OWORD *)v80 = v81;
      ++*(_DWORD *)(a1 + 824);
LABEL_25:
      *a3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16);
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
      return 0;
    case 5:
      v19 = "literal value out of range for directive";
      goto LABEL_16;
    case 6:
      v63 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
      llvm::APFloat::APFloat((uint64_t)v240, &unk_1C866F198, *(unsigned __int8 **)(*(_QWORD *)(v63 + 8) + 8), *(_QWORD *)(*(_QWORD *)(v63 + 8) + 16));
      if (*(_UNKNOWN **)&v240[8] == &unk_1C866F1C0)
        llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)&v240[8], (unsigned int *)__p);
      else
        llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)&v240[8], (unsigned int *)__p);
      if (LODWORD(__p[1]) >= 0x41)
        v64 = (void **)__p[0];
      else
        v64 = __p;
      v65 = *v64;
      if (LODWORD(__p[1]) >= 0x41 && __p[0])
        MEMORY[0x1CAA32F9C]();
      v66 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
      v67 = sub_1C484358C(v66 + 192, 24, 3);
      *(_BYTE *)v67 = 1;
      *(_DWORD *)(v67 + 1) = *(unsigned __int8 *)(v67 + 4) << 24;
      *(_QWORD *)(v67 + 8) = 0;
      *(_QWORD *)(v67 + 16) = v65;
      *a2 = v67;
      *a3 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8) + *(_QWORD *)(*(_QWORD *)(a1 + 48) + 16);
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
      if (*(_UNKNOWN **)&v240[8] == &unk_1C866F1C0)
      {
        sub_1C4773C74((uint64_t *)&v240[16]);
      }
      else if ((*(_DWORD *)(*(_QWORD *)&v240[8] + 8) - 64) <= 0xFFFFFF7F && *(_QWORD *)&v240[16])
      {
        MEMORY[0x1CAA32F9C](*(_QWORD *)&v240[16], 0x1000C8000313F17);
      }
      return 0;
    case 12:
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
      if (((*(uint64_t (**)(uint64_t, unint64_t *, uint64_t *, _QWORD))(*(_QWORD *)a1 + 240))(a1, a2, a3, 0) & 1) != 0)return v11;
      v23 = *a2;
      v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
      v25 = sub_1C484358C(v32 + 192, 24, 3);
      v11 = 0;
      *(_BYTE *)v25 = 3;
      v26 = (*(unsigned __int8 *)(v25 + 4) << 24) | 3;
      goto LABEL_45;
    case 13:
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
      if (((*(uint64_t (**)(uint64_t, unint64_t *, uint64_t *, _QWORD))(*(_QWORD *)a1 + 240))(a1, a2, a3, 0) & 1) != 0)return v11;
      v50 = *a2;
      v51 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
      v52 = sub_1C484358C(v51 + 192, 24, 3);
      *(_BYTE *)v52 = 3;
      *(_DWORD *)(v52 + 1) = (*(unsigned __int8 *)(v52 + 4) << 24) | 1;
      *(_QWORD *)(v52 + 8) = v10;
      *(_QWORD *)(v52 + 16) = v50;
      *a2 = v52;
      return 0;
    case 14:
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
      goto LABEL_22;
    case 17:
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
      return sub_1C60EBE58((llvm::MCAsmParser *)a1, (uint64_t)a2, a3);
    case 19:
      if (!*(_BYTE *)(*(_QWORD *)(a1 + 264) + 16))
      {
        v19 = "brackets expression not supported on this target";
        goto LABEL_16;
      }
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
      *(_QWORD *)v240 = 0;
      if (((*(uint64_t (**)(uint64_t, unint64_t *, _BYTE *))(*(_QWORD *)a1 + 232))(a1, a2, v240) & 1) != 0)
        return v11;
      v61 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
      *a3 = *(_QWORD *)(*(_QWORD *)(v61 + 8) + 8) + *(_QWORD *)(*(_QWORD *)(v61 + 8) + 16);
      *(_QWORD *)v240 = "expected ']' in brackets expression";
      *(_WORD *)&v240[32] = 259;
      return llvm::MCAsmParser::parseToken((llvm::MCAsmParser *)a1, 20, (llvm::Twine *)v240);
    case 24:
      v27 = *(_QWORD *)(a1 + 216);
      *(_QWORD *)v240 = "tmp";
      *(_WORD *)&v240[32] = 259;
      v28 = llvm::MCContext::createTempSymbol(v27, (uint64_t)v240, 1);
      (*(void (**)(_QWORD, unint64_t, _QWORD))(**(_QWORD **)(a1 + 224) + 192))(*(_QWORD *)(a1 + 224), v28, 0);
      v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
      v30 = sub_1C484358C(v29 + 192, 24, 3);
      v31 = *(unsigned __int8 *)(*(_QWORD *)(v29 + 152) + 18) << 16;
      *(_BYTE *)v30 = 2;
      *(_DWORD *)(v30 + 1) = v31 | (*(unsigned __int8 *)(v30 + 4) << 24);
      *(_QWORD *)(v30 + 8) = 0;
      *(_QWORD *)(v30 + 16) = v28;
      *a2 = v30;
      goto LABEL_25;
    case 34:
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
      if (((*(uint64_t (**)(uint64_t, unint64_t *, uint64_t *, _QWORD))(*(_QWORD *)a1 + 240))(a1, a2, a3, 0) & 1) != 0)return v11;
      v23 = *a2;
      v53 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
      v25 = sub_1C484358C(v53 + 192, 24, 3);
      v11 = 0;
      *(_BYTE *)v25 = 3;
      v26 = *(unsigned __int8 *)(v25 + 4) << 24;
      goto LABEL_45;
    case 47:
    case 48:
    case 49:
    case 50:
    case 51:
    case 52:
    case 53:
    case 54:
    case 55:
    case 56:
    case 57:
    case 58:
    case 59:
    case 60:
    case 61:
    case 62:
    case 63:
    case 64:
    case 65:
    case 66:
    case 67:
    case 68:
    case 69:
    case 70:
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
      if (**(_DWORD **)(a1 + 48) == 17)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
        if (((*(uint64_t (**)(uint64_t, unint64_t *, uint64_t *))(*(_QWORD *)a1 + 232))(a1, a2, a3) & 1) == 0)
        {
          *(_QWORD *)v240 = "expected ')'";
          *(_WORD *)&v240[32] = 259;
          if (!llvm::MCAsmParser::parseToken((llvm::MCAsmParser *)a1, 18, (llvm::Twine *)v240))
          {
            v22 = (*(uint64_t (**)(_QWORD, unint64_t, uint64_t, _QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8), *a2, v9, *(_QWORD *)(a1 + 216));
            *a2 = v22;
            return v22 == 0;
          }
        }
      }
      else
      {
        v19 = "expected '(' after operator";
LABEL_16:
        *(_QWORD *)v240 = v19;
        v20 = 259;
LABEL_17:
        *(_WORD *)&v240[32] = v20;
        v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
        llvm::MCAsmParser::Error(a1, *(_QWORD *)(v21 + 96), (uint64_t)v240, 0, 0);
      }
      return v11;
    default:
      *(_QWORD *)v240 = "unknown token in expression";
      *(_WORD *)&v240[32] = 259;
      v203 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
      llvm::MCAsmParser::Error(a1, *(_QWORD *)(v203 + 96), (uint64_t)v240, 0, 0);
      return 1;
  }
}

BOOL sub_1C60FE6F0(llvm::MCAsmParser *a1, unint64_t *a2, _QWORD *a3)
{
  *a2 = 0;
  return sub_1C60EBE58(a1, (uint64_t)a2, a3) || sub_1C6116CD4((uint64_t)a1, 1u, a2, (uint64_t)a3);
}

uint64_t sub_1C60FE74C(_QWORD *a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  _QWORD v10[4];
  __int16 v11;
  uint64_t v12;

  v12 = 0;
  v4 = a1[17];
  v10[0] = 0;
  if (((*(uint64_t (**)(_QWORD *, uint64_t *, _QWORD *))(*a1 + 232))(a1, &v12, v10) & 1) != 0)
    return 1;
  v6 = v12;
  v7 = (*(uint64_t (**)(_QWORD *))(*a1 + 56))(a1);
  (*(void (**)(uint64_t))(*(_QWORD *)v7 + 72))(v7);
  llvm::MCExpr::evaluateAsAbsolute(v6, a2);
  v9 = v8;
  result = 0;
  if ((v9 & 1) == 0)
  {
    v10[0] = "expected absolute expression";
    v11 = 259;
    return llvm::MCAsmParser::Error((uint64_t)a1, v4, (uint64_t)v10, 0, 0);
  }
  return result;
}

uint64_t sub_1C60FE820(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  const char *v6;
  __int16 v7;

  if (*(_BYTE *)(a1 + 1061))
    return 0;
  v2 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
  v3 = *(unsigned int *)(v2 + 120);
  if ((_DWORD)v3)
  {
    if (*(_QWORD *)(*(_QWORD *)(v2 + 112) + 32 * v3 - 32))
      return 0;
  }
  (*(void (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 224) + 176))(*(_QWORD *)(a1 + 224), 0, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 240));
  v5 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8) + 8);
  v6 = "expected section directive before assembly directive";
  v7 = 259;
  return llvm::MCAsmParser::Error(a1, v5, (uint64_t)&v6, 0, 0);
}

uint64_t sub_1C60FE8D4(llvm::MCAsmParser *a1, int a2, unint64_t *a3, _QWORD *a4)
{
  _BOOL8 v8;
  uint64_t v9;
  const char *v11;
  __int16 v12;

  if (sub_1C60EBE58(a1, (uint64_t)a3, a4))
    return 1;
  if (!a2)
    return 0;
  v8 = 1;
  while (!sub_1C6116CD4((uint64_t)a1, 1u, a3, (uint64_t)a4))
  {
    v8 = --a2 != 0;
    if (!a2)
      break;
    v9 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1);
    *a4 = *(_QWORD *)(*(_QWORD *)(v9 + 8) + 8) + *(_QWORD *)(*(_QWORD *)(v9 + 8) + 16);
    v11 = "expected ')'";
    v12 = 259;
    if (llvm::MCAsmParser::parseToken(a1, 18, (llvm::Twine *)&v11))
      break;
  }
  return v8;
}

void **sub_1C60FE9CC(void **a1)
{
  void ***v2;
  void ***v3;
  void *v4;
  void ***v5;

  v2 = (void ***)*a1;
  if (*a1)
  {
    v3 = (void ***)a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      do
      {
        v5 = v3 - 18;
        sub_1C60FEA30(v3 - 16);
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

void ***sub_1C60FEA30(void ***a1)
{
  int v2;
  int *v3;

  v2 = *(_DWORD *)a1;
  if (*(_DWORD *)a1 == 2)
  {
    sub_1C61DF2A0((uint64_t)(a1 + 12));
    sub_1C60FE9CC(a1 + 9);
    sub_1C60FEAA8(a1 + 1);
  }
  else if (v2 == 1)
  {
    sub_1C618E390((char **)a1 + 1);
  }
  else if (!v2)
  {
    v3 = (int *)a1[1];
    if (v3 != (int *)(a1 + 3))
      free(v3);
  }
  return a1;
}

void ***sub_1C60FEAA8(void ***a1)
{
  void **v2;
  void **v3;
  void **v4;
  void **v5;
  void *v6;
  void *v7;
  uint64_t v8;
  void *v9;

  v2 = *a1;
  if (*a1)
  {
    v3 = a1[1];
    v4 = *a1;
    if (v3 != v2)
    {
      v5 = a1[1];
      do
      {
        v7 = *(v5 - 3);
        v5 -= 3;
        v6 = v7;
        if (v7)
        {
          v8 = (uint64_t)*(v3 - 2);
          v9 = v6;
          if ((void *)v8 != v6)
          {
            do
              v8 = sub_1C60FEA30(v8 - 128);
            while ((void *)v8 != v6);
            v9 = *v5;
          }
          *(v3 - 2) = v6;
          operator delete(v9);
        }
        v3 = v5;
      }
      while (v5 != v2);
      v4 = *a1;
    }
    a1[1] = v2;
    operator delete(v4);
  }
  return a1;
}

unint64_t sub_1C60FEB44(int **a1, uint64_t a2, uint64_t a3)
{
  int8x8_t v3;
  llvm::MCAsmParser *v6;
  int **v7;
  int v8;
  unint64_t v9;
  _QWORD **v10;
  __int128 *v11;
  __int128 v12;
  uint64_t v13;
  int v14;
  const char *v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unsigned __int8 *v33;
  size_t v34;
  uint64_t v35;
  int v36;
  size_t v37;
  unsigned __int8 *v38;
  int v39;
  _QWORD *v40;
  int v41;
  int v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  int v47;
  unint64_t v48;
  char *v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _BYTE *Symbol;
  _BYTE *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  int v60;
  unsigned __int8 *v61;
  size_t v62;
  uint64_t v63;
  int v64;
  size_t v65;
  unsigned __int8 *v66;
  int v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  int v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t *v74;
  char v75;
  uint64_t v76;
  uint64_t *v77;
  BOOL v78;
  uint64_t v79;
  uint64_t v80;
  unsigned __int8 *v81;
  size_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  BOOL v86;
  std::string::size_type v87;
  unsigned int v88;
  _QWORD *i;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  unint64_t v94;
  llvm::MCAsmParser *v95;
  _BYTE *v96;
  uint64_t v97;
  unint64_t v98;
  uint64_t v99;
  unint64_t v100;
  char *v101;
  char *v102;
  llvm::MCAsmParser *v103;
  int v104;
  uint64_t v105;
  int v106;
  char *v107;
  llvm::MCAsmParser *v108;
  char v109;
  int v110;
  llvm::MCAsmParser *v111;
  char v112;
  char *v113;
  llvm::MCAsmParser *v114;
  int v115;
  llvm::MCAsmParser *v116;
  char v117;
  int v118;
  int v120;
  unsigned __int8 *v121;
  size_t v122;
  uint64_t v123;
  int v124;
  size_t v125;
  unsigned __int8 *v126;
  int v127;
  _QWORD *v128;
  int v129;
  int v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  _QWORD *v134;
  llvm::MCAsmParser *v135;
  llvm::MCAsmParser *v136;
  BOOL v137;
  BOOL v138;
  BOOL v139;
  char *v140;
  char *v141;
  int v142;
  __int16 v143;
  char *v144;
  const char *v145;
  uint64_t v146;
  _QWORD *v147;
  _QWORD *v148;
  _QWORD *v149;
  _QWORD *v150;
  _QWORD *v151;
  char v152;
  _QWORD *v153;
  uint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  std::string::size_type v157;
  uint64_t v158;
  uint64_t v159;
  std::string *v160;
  void **p_data;
  _QWORD *v162;
  BOOL v163;
  uint64_t v164;
  uint64_t *j;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  BOOL v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  char v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  _QWORD *v178;
  std::string::size_type v179;
  uint64_t v180;
  uint64_t v181;
  std::string *v182;
  void **v183;
  _QWORD *v184;
  _QWORD *v185;
  uint64_t v186;
  unint64_t v187;
  unint64_t v188;
  uint64_t v189;
  std::string *v190;
  std::string::size_type size;
  uint64_t v192;
  uint64_t v193;
  unint64_t v194;
  __int128 v195;
  char v196;
  uint64_t v197;
  unint64_t v198;
  char *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  char v203;
  int v204;
  unsigned __int8 *v205;
  size_t v206;
  uint64_t v207;
  int v208;
  size_t v209;
  unsigned __int8 *v210;
  int v211;
  uint64_t v212;
  int v213;
  int v214;
  uint64_t v215;
  const void *v216;
  size_t v217;
  uint64_t v218;
  uint64_t v219;
  int v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  int v225;
  int v226;
  uint64_t v227;
  _QWORD *v228;
  unsigned int v229;
  unint64_t v230;
  uint64_t v231;
  int v232;
  int v233;
  char *v234;
  uint64_t v235;
  char v236;
  uint64_t v237;
  uint64_t v238;
  int v239;
  int v240;
  unsigned __int8 *v241;
  size_t v242;
  uint64_t v243;
  int v244;
  size_t v245;
  unsigned __int8 *v246;
  int v247;
  _QWORD *v248;
  int v249;
  int v250;
  uint64_t v251;
  _QWORD *v252;
  uint64_t (*v253)(_QWORD *, _QWORD, _QWORD, char *);
  uint64_t v254;
  uint64_t v255;
  _QWORD *v256;
  int v257;
  int v258;
  uint64_t v259;
  uint64_t v260;
  llvm::MCAsmParser *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t (*v269)(unint64_t, char *, unint64_t, char *);
  int v270;
  unsigned __int8 *v271;
  size_t v272;
  uint64_t v273;
  int v274;
  size_t v275;
  unsigned __int8 *v276;
  int v277;
  uint64_t v278;
  int v279;
  int v280;
  _QWORD *v281;
  uint64_t v282;
  uint64_t v283;
  llvm::MCAsmParser *v284;
  char *v285;
  int v286;
  unsigned __int8 *v287;
  size_t v288;
  uint64_t v289;
  int v290;
  size_t v291;
  unsigned __int8 *v292;
  int v293;
  uint64_t v294;
  int v295;
  int v296;
  uint64_t v297;
  _QWORD *v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  unsigned __int8 *v302;
  size_t v303;
  std::string *v304;
  llvm::MCAsmParser *v305;
  _BYTE *v306;
  int v307;
  _BYTE *v308;
  uint64_t v309;
  uint64_t v310;
  char v311;
  uint64_t v312;
  std::string::size_type v313;
  unint64_t v314;
  unint64_t v315;
  uint64_t v316;
  int v317;
  const char *v318;
  char *v319;
  unint64_t v320;
  unsigned int *v321;
  llvm::MCAsmParser *v322;
  uint64_t v323;
  uint64_t v324;
  unsigned int v325;
  llvm::MCAsmParser *v326;
  __int128 v327;
  uint64_t v328;
  uint64_t v329;
  unint64_t v330;
  unint64_t v331;
  char v332;
  std::string *data;
  std::string::size_type v334;
  int v335;
  uint64_t v336;
  uint64_t v337;
  char *v338;
  unint64_t v339;
  llvm::MCAsmParser *v340;
  uint64_t v341;
  uint64_t v342;
  uint64_t v343;
  int v344;
  unsigned __int8 *v345;
  size_t v346;
  uint64_t v347;
  int v348;
  size_t v349;
  unsigned __int8 *v350;
  int v351;
  uint64_t v352;
  int v353;
  int v354;
  uint64_t v355;
  _QWORD *v356;
  uint64_t v357;
  uint64_t *v358;
  llvm::MCAsmParser *v359;
  uint64_t v360;
  __int128 v361;
  uint64_t v366;
  unint64_t v367;
  uint8x8_t v368;
  uint64_t v369;
  uint64_t v370;
  unint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  int v375;
  int v376;
  int v377;
  unsigned __int8 *v378;
  size_t v379;
  uint64_t v380;
  BOOL v381;
  uint64_t v383;
  uint64_t v384;
  _BYTE *v385;
  uint64_t v386;
  char v387;
  char v388;
  uint64_t v389;
  uint64_t v390;
  unint64_t v391;
  unsigned __int8 *v392;
  uint64_t v393;
  uint64_t v394;
  uint64_t v395;
  std::string::size_type v396;
  _BYTE *v397;
  unsigned int v398;
  uint64_t v399;
  uint64_t v400;
  void **v401;
  unint64_t v402;
  unint64_t v403;
  unint64_t v404;
  uint64_t v405;
  char v406;
  int v407;
  uint64_t v408;
  uint64_t v409;
  unint64_t v410;
  unint64_t v411;
  unint64_t v412;
  unint64_t v413;
  uint64_t v414;
  uint64_t v415;
  unint64_t v416;
  unint64_t v417;
  unint64_t v418;
  unint64_t v419;
  BOOL v420;
  uint64_t v421;
  uint64_t v422;
  unsigned __int8 *v423;
  size_t v424;
  int v425;
  size_t v426;
  unsigned __int8 *v427;
  int v428;
  uint64_t v429;
  uint64_t v430;
  int v431;
  int v432;
  uint64_t v433;
  _QWORD *v434;
  __int16 v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  llvm::MCAsmParser *v439;
  char v440;
  std::string::size_type v441;
  std::string::size_type v442;
  __int128 v443;
  int *v444;
  int v445;
  uint64_t v446;
  uint64_t v447;
  void *v448;
  uint64_t v449;
  const std::string::value_type *v450;
  std::string::size_type v451;
  char v452;
  uint64_t v453;
  std::string::size_type v454;
  std::string::size_type v455;
  const void **v456;
  std::string *v457;
  char *v458;
  llvm::MCAsmParser *v459;
  int v460;
  char *v461;
  uint64_t v462;
  void (*v463)(void);
  char *v464;
  llvm::MCAsmParser *v465;
  int v466;
  uint64_t v467;
  const llvm::Twine *v468;
  uint64_t v469;
  uint64_t v470;
  unsigned int *v471;
  llvm::MCAsmParser *v472;
  unsigned int v473;
  uint64_t v474;
  unint64_t v475;
  llvm::MCAsmParser *v476;
  char *v477;
  llvm::MCAsmParser *v478;
  char *v479;
  uint8x8_t v480;
  char *v481;
  std::string::size_type v482;
  std::string::size_type v483;
  char *v484;
  uint64_t v485;
  uint64_t v486;
  char v487;
  char *v488;
  std::string *v489;
  uint64_t v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  const char *v494;
  uint64_t v495;
  uint64_t v497;
  char *v498;
  void (*v499)(void);
  char *v500;
  uint64_t v501;
  unint64_t v502;
  _QWORD *v503;
  uint64_t v504;
  uint64_t v505;
  char v506;
  unsigned __int8 *v507;
  unint64_t v508;
  uint64_t v509;
  llvm::MCAsmParser *v510;
  int v511;
  uint64_t v512;
  int *v513;
  unint64_t v514;
  char *v515;
  uint64_t v516;
  uint64_t v517;
  uint64_t v518;
  uint64_t v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t v522;
  const char *v523;
  llvm::MCStreamer *v524;
  uint64_t CurrentDwarfFrameInfo;
  uint64_t v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  char v530;
  uint64_t v531;
  unsigned __int8 *v532;
  size_t v533;
  uint64_t v534;
  int v535;
  size_t v536;
  unsigned __int8 *v537;
  int v538;
  uint64_t v539;
  uint64_t v540;
  int v541;
  int v542;
  uint64_t v543;
  _QWORD *v544;
  _BOOL4 v546;
  uint64_t v547;
  unsigned __int8 *v548;
  size_t v549;
  uint64_t v550;
  std::string::size_type v551;
  int v552;
  uint64_t v553;
  char *v554;
  unsigned int v555;
  uint64_t v556;
  uint64_t v557;
  uint64_t v558;
  char v559;
  uint64_t v560;
  char *v561;
  uint64_t v562;
  int v563;
  uint64_t v564;
  uint64_t v565;
  unsigned int v566;
  uint64_t v567;
  int v568;
  uint64_t v569;
  uint64_t v570;
  int v571;
  uint64_t v572;
  _BYTE *v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  unint64_t v577;
  unsigned __int8 *v578;
  uint64_t v579;
  int v580;
  int v581;
  unsigned int v582;
  unint64_t v583;
  char *v584;
  llvm::MCAsmParser *v585;
  int v586;
  uint64_t v587;
  uint64_t v588;
  void **v589;
  unsigned int v590;
  _OWORD *v591;
  uint64_t v592;
  __int128 v593;
  _OWORD *v594;
  unint64_t v595;
  unint64_t v596;
  unint64_t v597;
  char *v598;
  char *v599;
  int64x2_t v600;
  char *v601;
  __int128 v602;
  char *v603;
  uint64_t *v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  int v609;
  uint64_t v610;
  uint8x8_t v611;
  uint64_t v612;
  const char *v613;
  uint64_t v614;
  uint64_t v615;
  std::string *v616;
  std::string::size_type v617;
  char v618;
  uint64_t v619;
  int v620;
  uint64_t v621;
  uint64_t v622;
  _BYTE *v623;
  uint64_t v624;
  uint64_t v625;
  void *v626;
  char ***v627;
  int *v628;
  char **v629;
  const char *v630;
  __int128 v631;
  __int128 v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  int *v636;
  uint64_t v637;
  int v638;
  std::string::size_type v641;
  std::string::size_type v642;
  unint64_t v643;
  unint64_t v644;
  unint64_t v645;
  int v646;
  int v647;
  _BOOL4 v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t *v652;
  unint64_t v653;
  BOOL v654;
  unsigned int v655;
  uint64_t v656;
  int v657;
  std::string::size_type v658;
  std::string::size_type v659;
  std::string::size_type v660;
  uint64_t v661;
  uint64_t v663;
  uint64_t v664;
  __int128 v665;
  int v667;
  uint64_t v668;
  char v669;
  char *v670;
  char *v671;
  uint64_t v672;
  unint64_t v673;
  unint64_t v674;
  unint64_t v675;
  uint64_t v676;
  int v677;
  _BOOL4 v679;
  uint64_t v680;
  unsigned int *v681;
  unsigned int *v682;
  unsigned int *v683;
  uint64_t v684;
  uint64_t v685;
  uint64_t v686;
  uint64_t v687;
  unint64_t v688;
  uint64_t v689;
  void *v690;
  uint64_t v691;
  uint64_t v692;
  _BYTE *v693;
  char *v694;
  uint64_t v695;
  uint64_t v696;
  int v697;
  uint64_t v698;
  unint64_t *v699;
  unint64_t *v700;
  char *v701;
  uint64_t v702;
  llvm::MCAsmParser *v703;
  uint64_t v704;
  unint64_t v705;
  uint64_t v706;
  unint64_t v707;
  unint64_t v708;
  uint64_t v709;
  unint64_t v710;
  unint64_t v711;
  char *v712;
  unint64_t *v713;
  char *v714;
  unint64_t *v715;
  uint64_t v716;
  char v717;
  size_t v718;
  char *v719;
  unint64_t v720;
  llvm *v721;
  llvm::raw_ostream *v722;
  const char *v723;
  size_t v724;
  llvm *v725;
  uint64_t v726;
  _BYTE *v727;
  const char *v728;
  char *v729;
  uint64_t v730;
  uint64_t v731;
  char v732;
  uint64_t v733;
  __int16 v734;
  const char *v735;
  const char *v736;
  __int16 v737;
  std::string *v738;
  std::string::size_type v739;
  uint64_t **v740;
  BOOL isValidDwarfFileNumber;
  uint64_t v742;
  uint64_t *v743;
  uint64_t *v744;
  uint64_t *v745;
  uint64_t v746;
  int v747;
  uint64_t v748;
  int v749;
  int v750;
  std::string *v751;
  std::string::size_type v752;
  const char *v753;
  uint64_t v754;
  unsigned __int8 *v755;
  char *v756;
  uint64_t v757;
  size_t v758;
  const char *v759;
  int v760;
  void *v761;
  std::string::size_type v762;
  _BYTE *v763;
  uint64_t v764;
  int8x8_t v765;
  uint8x8_t v766;
  std::string *v767;
  uint64_t v768;
  uint64_t v769;
  llvm::MCAsmParser *v770;
  std::string *v771;
  std::string::size_type v772;
  void *v773;
  void **v774;
  char v775;
  int v776;
  void **v777;
  unint64_t v778;
  unint64_t v779;
  _BYTE *v780;
  _BYTE *v781;
  int v782;
  void **v783;
  unint64_t v784;
  unsigned __int8 *v785;
  int v786;
  int v787;
  unsigned int v789;
  void *v790;
  void *v791;
  void **v792;
  size_t v793;
  void *v794;
  uint64_t v795;
  _BYTE *v796;
  uint64_t v797;
  std::string *v798;
  void *v799;
  std::string *v800;
  std::string::size_type v801;
  int8x8_t v802;
  unint64_t v803;
  unint64_t v804;
  char v805;
  char v806;
  uint64_t v807;
  char *v808;
  uint64x2_t v809;
  uint64x2_t v810;
  __int8 v811;
  char v812;
  int v813;
  uint64_t v814;
  uint64_t v816;
  uint64_t v817;
  uint64_t v818;
  int v820;
  unint64_t *v821;
  int v822;
  int64_t v823;
  BOOL v824;
  unint64_t v825;
  int v826;
  unsigned int v827;
  char v828;
  unint64_t *v829;
  uint64_t v830;
  unint64_t v831;
  unint64_t *v832;
  uint64_t v833;
  unint64_t v834;
  unint64_t LineAndColumn;
  uint64_t v836;
  uint64_t v837;
  uint64_t v838;
  unint64_t v839;
  uint64_t v840;
  unint64_t v841;
  unint64_t v842;
  void **v843;
  uint64_t v844;
  unsigned int v845;
  char *v846;
  char *v847;
  BOOL v848;
  char *v849;
  int v850;
  char *v851;
  int v852;
  llvm::MCAsmParser *v853;
  llvm::CodeViewContext *v854;
  unsigned __int8 *v855;
  size_t v856;
  uint64_t v857;
  unint64_t v858;
  unint64_t v859;
  uint64_t *v860;
  char *v861;
  unsigned __int8 *v862;
  unint64_t v863;
  uint64_t v864;
  int v865;
  unint64_t v866;
  int v867;
  uint64_t v868;
  size_t v869;
  int v870;
  uint64_t v871;
  unsigned __int8 *v872;
  int v873;
  uint64_t v874;
  int v875;
  int v876;
  uint64_t v877;
  _QWORD *v878;
  uint64_t v879;
  uint64_t v880;
  unsigned int v881;
  void *v882;
  std::string::size_type v883;
  void **v884;
  size_t v885;
  std::string::value_type v886;
  uint64_t v887;
  char *v888;
  uint64_t v889;
  uint64_t v890;
  uint64_t v891;
  uint64_t v892;
  uint64_t v893;
  llvm::raw_ostream *v894;
  _BYTE *v895;
  char v896;
  llvm::MCAsmParser *v897;
  uint64_t v898;
  uint64_t v899;
  uint64_t v900;
  uint64_t v901;
  uint64_t v902;
  uint64_t v903;
  uint64_t v904;
  _BOOL4 v906;
  uint64_t v907;
  int v908;
  uint64_t v909;
  _QWORD *v910;
  uint64_t v911;
  const char *v912;
  uint64_t v913;
  uint64_t v914;
  uint64_t v915;
  int v916;
  uint64_t v917;
  uint64_t v918;
  const char *v919;
  uint64_t v920;
  std::string::size_type v921;
  std::string::size_type v922;
  unint64_t v923;
  unint64_t v924;
  std::string::size_type v925;
  std::string *v926;
  std::string::size_type v927;
  uint64_t *v928;
  std::string::size_type v929;
  std::string::size_type v930;
  std::string::size_type v931;
  char *v932;
  std::string::size_type v933;
  _QWORD *v934;
  void *v935;
  unsigned __int8 *v936;
  unint64_t v937;
  uint64_t v938;
  llvm::MCAsmParser *v939;
  uint64_t v940;
  unint64_t v941;
  uint64_t v942;
  unint64_t v943;
  uint64_t v944;
  int v945;
  llvm::MCAsmParser *v946;
  uint64_t v947;
  unint64_t v948;
  uint64_t v949;
  unint64_t v950;
  uint64_t v951;
  std::string *v952;
  std::string::size_type v953;
  unint64_t v954;
  _QWORD *k;
  std::string::size_type v956;
  std::string::size_type v957;
  unint64_t v958;
  unint64_t v959;
  unint64_t v960;
  unint64_t v961;
  uint64_t v962;
  char *v963;
  char *v964;
  std::string::size_type v965;
  _QWORD *v966;
  __int128 v967;
  std::string *v968;
  std::string::size_type v969;
  uint64_t v970;
  uint64_t v971;
  uint64_t v972;
  uint64_t v973;
  uint64_t v974;
  uint64_t v975;
  std::string::size_type v976;
  std::string *v977;
  unsigned int v978;
  uint64_t v979;
  char v981;
  BOOL v983;
  unint64_t v984;
  uint64_t v985;
  uint64_t v986;
  std::string *v987;
  size_t v988;
  uint64_t v989;
  _BYTE *v990;
  uint64_t v991;
  char *v992;
  char *v993;
  int v994;
  int v995;
  char *v996;
  char *v997;
  int v998;
  char *v999;
  int v1000;
  char *v1001;
  unint64_t v1002;
  uint64_t v1003;
  unint64_t v1004;
  uint64_t *v1005;
  std::string::size_type v1006;
  unsigned __int8 *v1007;
  unint64_t v1008;
  uint64_t v1009;
  uint64_t v1010;
  void (*v1011)(void);
  void *v1012;
  int v1013;
  __int128 v1014;
  uint64_t v1015;
  void *v1016;
  char *v1017;
  char *v1018;
  void *v1019[2];
  char *v1020;
  void *v1021;
  void *v1022;
  void *v1023;
  int v1024;
  void *v1025;
  char *v1026;
  std::string::pointer v1027;
  void *v1028;
  void *v1029;
  unsigned int v1030;
  void *v1031;
  uint64_t v1032;
  uint64_t v1033;
  int v1034;
  uint64_t v1035;
  int8x8_t v1036;
  uint64_t v1037;
  int v1038;
  uint64_t v1039;
  unint64_t v1040;
  int v1041;
  std::string::size_type v1042;
  uint64_t v1043;
  _QWORD **v1044;
  char *v1045;
  uint64_t v1046;
  char *v1047;
  std::string *v1048;
  void *__p;
  int __pa;
  void *__pb;
  char *__pc;
  void *__pd;
  void *__pe;
  unint64_t __pf;
  int **__s1;
  int **__s1a;
  void *__s1b[2];
  unint64_t __s1c;
  void *__s1d;
  unsigned int __s1e;
  int __s1f;
  std::string *__s1g;
  const void *__s1h;
  std::string *__s1i;
  std::string::size_type __s1j;
  llvm::MCAsmParser *v1067;
  llvm::MCAsmParser *v1068;
  __int128 v1069;
  uint64_t v1070;
  void *v1071;
  unsigned int v1072;
  std::string v1073;
  uint64_t v1074;
  unsigned int v1075;
  __int128 v1076;
  uint64_t v1077;
  void *v1078;
  unsigned int v1079;
  __int128 v1080;
  char *v1081;
  char *v1082;
  uint64_t v1083;
  uint64_t v1084;
  std::string v1085;
  __int16 v1086;
  void *v1087[2];
  __int128 v1088;
  __int16 v1089;
  _BYTE v1090[32];
  __int128 *v1091;
  __int128 v1092;
  uint64_t v1093;
  void *__src;
  unsigned int v1095;
  std::string __str[2];
  uint64_t v1097;
  int v1098;
  _BYTE *v1099;
  _BYTE __dst[48];
  uint64_t v1101;
  _QWORD v1102[3];
  char v1103;
  uint64_t v1104;
  unint64_t v1105;
  _BYTE v1106[32];
  __int128 v1107;
  unint64_t v1108;
  __int128 v1109;
  uint64_t v1110;
  char v1111;
  std::string *v1112;
  std::string *v1113;
  unint64_t v1114;
  __int128 v1115;
  unint64_t v1116;
  uint64_t v1117;

  v6 = (llvm::MCAsmParser *)a1;
  v1117 = *MEMORY[0x1E0C80C00];
  v7 = a1 + 6;
  while (1)
  {
    v8 = **v7;
    if (v8 != 11)
      break;
    (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v6 + 184))(v6);
  }
  if (v8 == 9)
  {
    if (!*(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v6 + 40))(v6) + 8) + 16)
      || **(_BYTE **)(*(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v6 + 40))(v6) + 8) + 8) == 13
      || **(_BYTE **)(*(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v6 + 40))(v6) + 8) + 8) == 10)
    {
      (*(void (**)(_QWORD *))(**((_QWORD **)v6 + 28) + 152))(*((_QWORD **)v6 + 28));
    }
    (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v6 + 184))(v6);
    LOBYTE(v9) = 0;
    return v9 & 1;
  }
  v10 = (_QWORD **)((char *)v6 + 40);
  if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v6 + 40))(v6) + 8) == 36)
  {
    (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v6 + 40))(v6);
    v1087[0] = "unexpected token";
    v1089 = 259;
    if (llvm::MCAsmParser::parseToken(v6, 36, (llvm::Twine *)v1087))
      goto LABEL_337;
    v1039 = a3;
    sub_1C6109CB4(&v1073, (uint64_t)v6);
    v1068 = *(llvm::MCAsmParser **)(*(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v6 + 40))(v6)
                                              + 8)
                                  + 8);
    v1115 = 0uLL;
    v1116 = 0;
    v1112 = 0;
    v1113 = 0;
    v1114 = 0;
    *(_OWORD *)&v1085.__r_.__value_.__l.__data_ = 0uLL;
    v1085.__r_.__value_.__r.__words[2] = 0x2000000000;
    v76 = *((unsigned int *)v6 + 286);
    __s1a = v7;
    v77 = (uint64_t *)*((_QWORD *)v6 + 142);
    if ((_DWORD)v76)
    {
      while (1)
      {
        v78 = !*v77 || *v77 == -8;
        if (!v78)
          break;
        ++v77;
      }
    }
    v1044 = (_QWORD **)((char *)v6 + 40);
    v79 = *((_QWORD *)v6 + 142) + 8 * v76;
    v1033 = a2;
    if (v77 == (uint64_t *)v79)
    {
      v87 = 0;
      v88 = 0;
      i = 0;
    }
    else
    {
      v80 = *v77;
      do
      {
        sub_1C610CE6C((uint64_t)__dst, (uint64_t)v6, *(_DWORD *)(v80 + 8));
        if (__dst[24])
        {
          sub_1C5E3DEA4(v1106, (char *)(v80 + 16), (uint64_t (*)(_QWORD))sub_1C5E3C6A8, (char *)(v80 + 16 + *(_QWORD *)v80), (uint64_t)sub_1C5E3C6A8, *(_QWORD *)v80);
          if (v1106[23] >= 0)
            v81 = v1106;
          else
            v81 = *(unsigned __int8 **)v1106;
          if (v1106[23] >= 0)
            v82 = v1106[23] & 0x7F;
          else
            v82 = *(_QWORD *)&v1106[8];
          v83 = sub_1C5426790((llvm::StringMapImpl *)&v1085, v81, v82);
          v84 = *v83 + 8;
          if (*(char *)(*v83 + 31) < 0)
            operator delete(*(void **)v84);
          *(_QWORD *)(v84 + 16) = *(_QWORD *)&__dst[16];
          *(_OWORD *)v84 = *(_OWORD *)__dst;
          __dst[23] = 0;
          __dst[0] = 0;
          if ((v1106[23] & 0x80000000) != 0)
            operator delete(*(void **)v1106);
        }
        do
        {
          v85 = v77[1];
          ++v77;
          v80 = v85;
          if (v85)
            v86 = v80 == -8;
          else
            v86 = 1;
        }
        while (v86);
      }
      while (v77 != (uint64_t *)v79);
      v87 = v1085.__r_.__value_.__r.__words[0];
      v88 = v1085.__r_.__value_.__r.__words[1];
      if (LODWORD(v1085.__r_.__value_.__r.__words[1]))
      {
        for (i = (_QWORD *)v1085.__r_.__value_.__r.__words[0]; !*i || *i == -8; ++i)
          ;
      }
      else
      {
        i = (_QWORD *)v1085.__r_.__value_.__r.__words[0];
      }
    }
    v147 = (_QWORD *)(v87 + 8 * v88);
    if (i != v147)
    {
      v148 = (_QWORD *)*i;
      do
      {
        memset(__dst, 0, 42);
        memset(__str, 0, 24);
        *(_QWORD *)&__dst[8] = *v148;
        __dst[40] = 1;
        v151 = (_QWORD *)v148[1];
        v149 = v148 + 1;
        v150 = v151;
        *(_QWORD *)__dst = v149 + 3;
        v152 = *((_BYTE *)v149 + 23);
        if (v152 >= 0)
          v153 = v149;
        else
          v153 = v150;
        v154 = v149[1];
        if (v152 >= 0)
          v155 = v152 & 0x7F;
        else
          v155 = v154;
        *(_QWORD *)&v1107 = (char *)&__str[0].__r_.__value_.__l + 16;
        v156 = operator new(0x28uLL);
        *(_DWORD *)v156 = 3;
        v156[1] = v153;
        v156[2] = v155;
        *((_DWORD *)v156 + 8) = 64;
        v156[3] = 0;
        v157 = (std::string::size_type)(v156 + 5);
        __str[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v156;
        __str[0].__r_.__value_.__l.__size_ = (std::string::size_type)(v156 + 5);
        __str[0].__r_.__value_.__r.__words[2] = (std::string::size_type)(v156 + 5);
        memset(v1106, 0, sizeof(v1106));
        sub_1C63E9D68((uint64_t)v1106);
        __str[0].__r_.__value_.__l.__size_ = v157;
        v158 = *((_QWORD *)&v1115 + 1);
        if (*((_QWORD *)&v1115 + 1) >= v1116)
        {
          v159 = sub_1C60EAFC0((uint64_t *)&v1115, (uint64_t)__dst);
        }
        else
        {
          **((_OWORD **)&v1115 + 1) = *(_OWORD *)__dst;
          *(_QWORD *)(v158 + 24) = 0;
          *(_QWORD *)(v158 + 32) = 0;
          *(_QWORD *)(v158 + 16) = 0;
          *(_OWORD *)(v158 + 16) = *(_OWORD *)&__dst[16];
          *(_QWORD *)(v158 + 32) = *(_QWORD *)&__dst[32];
          memset(&__dst[16], 0, 24);
          *(_WORD *)(v158 + 40) = *(_WORD *)&__dst[40];
          v159 = v158 + 48;
        }
        *((_QWORD *)&v1115 + 1) = v159;
        v160 = v1113;
        if ((unint64_t)v1113 >= v1114)
        {
          p_data = sub_1C610D870((void ***)&v1112, (uint64_t)__str);
        }
        else
        {
          v1113->__r_.__value_.__r.__words[0] = 0;
          v160->__r_.__value_.__l.__size_ = 0;
          v160->__r_.__value_.__r.__words[2] = 0;
          *v160 = __str[0];
          p_data = (void **)&v160[1].__r_.__value_.__l.__data_;
          memset(__str, 0, 24);
        }
        v1113 = (std::string *)p_data;
        *(_QWORD *)v1106 = __str;
        sub_1C5934A7C((void ***)v1106);
        *(_QWORD *)v1106 = &__dst[16];
        sub_1C5934A7C((void ***)v1106);
        do
        {
          v162 = (_QWORD *)i[1];
          ++i;
          v148 = v162;
          if (v162)
            v163 = v148 + 1 == 0;
          else
            v163 = 1;
        }
        while (v163);
      }
      while (i != v147);
    }
    v164 = *((unsigned int *)v6 + 120);
    if ((_DWORD)v164)
    {
      for (j = (uint64_t *)*((_QWORD *)v6 + 59); !*j || *j == -8; ++j)
        ;
    }
    else
    {
      j = (uint64_t *)*((_QWORD *)v6 + 59);
    }
    v167 = *((_QWORD *)v6 + 59) + 8 * v164;
    if (j != (uint64_t *)v167)
    {
      v168 = *j;
      do
      {
        if (*(_BYTE *)(v168 + 28))
        {
          memset(__dst, 0, 42);
          memset(__str, 0, 24);
          *(_OWORD *)__dst = *(_OWORD *)(v168 + 8);
          __dst[40] = 1;
          v173 = *(_QWORD *)(v168 + 32);
          v171 = v168 + 32;
          v172 = v173;
          v174 = *(_BYTE *)(v171 + 23);
          if (v174 >= 0)
            v175 = v171;
          else
            v175 = v172;
          v176 = *(_QWORD *)(v171 + 8);
          if (v174 >= 0)
            v177 = v174 & 0x7F;
          else
            v177 = v176;
          *(_QWORD *)&v1107 = (char *)&__str[0].__r_.__value_.__l + 16;
          v178 = operator new(0x28uLL);
          *(_DWORD *)v178 = 3;
          v178[1] = v175;
          v178[2] = v177;
          *((_DWORD *)v178 + 8) = 64;
          v178[3] = 0;
          v179 = (std::string::size_type)(v178 + 5);
          __str[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v178;
          __str[0].__r_.__value_.__l.__size_ = (std::string::size_type)(v178 + 5);
          __str[0].__r_.__value_.__r.__words[2] = (std::string::size_type)(v178 + 5);
          memset(v1106, 0, sizeof(v1106));
          sub_1C63E9D68((uint64_t)v1106);
          __str[0].__r_.__value_.__l.__size_ = v179;
          v180 = *((_QWORD *)&v1115 + 1);
          if (*((_QWORD *)&v1115 + 1) >= v1116)
          {
            v181 = sub_1C60EAFC0((uint64_t *)&v1115, (uint64_t)__dst);
          }
          else
          {
            **((_OWORD **)&v1115 + 1) = *(_OWORD *)__dst;
            *(_QWORD *)(v180 + 24) = 0;
            *(_QWORD *)(v180 + 32) = 0;
            *(_QWORD *)(v180 + 16) = 0;
            *(_OWORD *)(v180 + 16) = *(_OWORD *)&__dst[16];
            *(_QWORD *)(v180 + 32) = *(_QWORD *)&__dst[32];
            memset(&__dst[16], 0, 24);
            *(_WORD *)(v180 + 40) = *(_WORD *)&__dst[40];
            v181 = v180 + 48;
          }
          *((_QWORD *)&v1115 + 1) = v181;
          v182 = v1113;
          if ((unint64_t)v1113 >= v1114)
          {
            v183 = sub_1C610D870((void ***)&v1112, (uint64_t)__str);
          }
          else
          {
            v1113->__r_.__value_.__r.__words[0] = 0;
            v182->__r_.__value_.__l.__size_ = 0;
            v182->__r_.__value_.__r.__words[2] = 0;
            *v182 = __str[0];
            v183 = (void **)&v182[1].__r_.__value_.__l.__data_;
            memset(__str, 0, 24);
          }
          v1113 = (std::string *)v183;
          *(_QWORD *)v1106 = __str;
          sub_1C5934A7C((void ***)v1106);
          *(_QWORD *)v1106 = &__dst[16];
          sub_1C5934A7C((void ***)v1106);
        }
        do
        {
          v169 = j[1];
          ++j;
          v168 = v169;
          if (v169)
            v170 = v168 == -8;
          else
            v170 = 1;
        }
        while (v170);
      }
      while (j != (uint64_t *)v167);
    }
    v184 = (_QWORD *)*((_QWORD *)v6 + 90);
    v185 = (_QWORD *)*((_QWORD *)v6 + 89);
    v186 = 46 * (v184 - v185) - 1;
    if (v184 == v185)
      v186 = 0;
    if (v186 == *((_QWORD *)v6 + 93) + *((_QWORD *)v6 + 92))
    {
      sub_1C60EA1F4((uint64_t)v6 + 704);
      v185 = (_QWORD *)*((_QWORD *)v6 + 89);
      v184 = (_QWORD *)*((_QWORD *)v6 + 90);
    }
    if (v184 == v185)
    {
      v188 = 0;
    }
    else
    {
      v187 = *((_QWORD *)v6 + 92) + *((_QWORD *)v6 + 93);
      v188 = v185[v187 / 0x2E] + 88 * (v187 % 0x2E);
    }
    v189 = (uint64_t)v6;
    if ((v1073.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v190 = &v1073;
    else
      v190 = (std::string *)v1073.__r_.__value_.__r.__words[0];
    if ((v1073.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&v1073.__r_.__value_.__s + 23) & 0x7F;
    else
      size = v1073.__r_.__value_.__l.__size_;
    memset(__dst, 0, 24);
    sub_1C610D9A8((int64_t)__dst, v1115, *((uint64_t *)&v1115 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v1115 + 1) - v1115) >> 4));
    *(_QWORD *)v188 = 0;
    *(_QWORD *)(v188 + 8) = 0;
    *(_QWORD *)(v188 + 16) = v190;
    *(_QWORD *)(v188 + 24) = size;
    *(_OWORD *)(v188 + 32) = *(_OWORD *)__dst;
    v192 = *(_QWORD *)&__dst[16];
    memset(__dst, 0, 24);
    *(_QWORD *)(v188 + 48) = v192;
    *(_QWORD *)(v188 + 56) = 0;
    *(_QWORD *)(v188 + 64) = 0;
    *(_QWORD *)(v188 + 72) = 0;
    *(_BYTE *)(v188 + 80) = 0;
    *(_QWORD *)v1106 = __dst;
    sub_1C5934A04((void ***)v1106);
    v193 = *(_QWORD *)(v189 + 744);
    *(_QWORD *)(v189 + 744) = v193 + 1;
    v194 = *(_QWORD *)(*(_QWORD *)(v189 + 712) + 8 * ((v193 + *(_QWORD *)(v189 + 736)) / 0x2EuLL))
         + 88 * ((v193 + *(_QWORD *)(v189 + 736)) % 0x2EuLL);
    v195 = *(_OWORD *)(v194 + 16);
    *(_OWORD *)v1106 = *(_OWORD *)v194;
    *(_OWORD *)&v1106[16] = v195;
    v1108 = 0;
    v1107 = 0uLL;
    sub_1C610D9A8((int64_t)&v1107, *(_QWORD *)(v194 + 32), *(_QWORD *)(v194 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v194 + 40) - *(_QWORD *)(v194 + 32)) >> 4));
    v1109 = 0uLL;
    v1110 = 0;
    sub_1C484333C(&v1109, *(_QWORD *)(v194 + 56), *(_QWORD *)(v194 + 64), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v194 + 64) - *(_QWORD *)(v194 + 56)) >> 3));
    v1111 = *(_BYTE *)(v194 + 80);
    *(_QWORD *)__dst = &__dst[24];
    *(_OWORD *)&__dst[8] = xmmword_1C8667FC0;
    LODWORD(__str[0].__r_.__value_.__r.__words[1]) = 0;
    v1097 = 0;
    __str[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&off_1E81A7280;
    v1099 = __dst;
    v1098 = 0;
    memset(&__str[0].__r_.__value_.__r.__words[2], 0, 25);
    v196 = sub_1C610D108(v189, (llvm::raw_ostream *)__str, *(unsigned __int8 **)&v1106[16], *(unint64_t *)&v1106[24], v1107, -1431655765 * ((uint64_t)(*((_QWORD *)&v1107 + 1) - v1107) >> 4), (uint64_t)v1112, 0xAAAAAAAAAAAAAAABLL * (((char *)v1113 - (char *)v1112) >> 3), (uint64_t *)&v1109, (uint64_t)v1068);
    v6 = (llvm::MCAsmParser *)v189;
    if ((v196 & 1) == 0)
    {
      v216 = *(const void **)v1099;
      v217 = *((_QWORD *)v1099 + 1);
      *(_QWORD *)v1090 = "<expansion>";
      LOWORD(v1091) = 259;
      sub_1C5E1F4D0(v216, v217, (uint64_t)v1090, (uint64_t)&v1092);
      if ((v1093 & 1) != 0)
        v218 = 0;
      else
        v218 = v1092;
      v219 = *(_QWORD *)(v189 + 240);
      *(_QWORD *)v1090 = v218;
      v220 = sub_1C6175188(v219, (uint64_t *)v1090, (uint64_t)v1068);
      *(_DWORD *)(v189 + 272) = v220;
      v221 = *(_QWORD *)v1090;
      *(_QWORD *)v1090 = 0;
      if (v221)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v221 + 8))(v221);
        v220 = *(_DWORD *)(v189 + 272);
      }
      v222 = *(_QWORD *)(**(_QWORD **)(v189 + 240) + 24 * (v220 - 1));
      v223 = *(_QWORD *)(v222 + 8);
      v224 = *(_QWORD *)(v222 + 16) - v223;
      *(_QWORD *)(v189 + 192) = v223;
      *(_QWORD *)(v189 + 200) = v224;
      *(_QWORD *)(v189 + 184) = v223;
      *(_QWORD *)(v189 + 136) = 0;
      *(_BYTE *)(v189 + 211) = 1;
      v225 = *(_DWORD *)(v189 + 400);
      v226 = v225 + 1;
      v227 = *(unsigned int *)(v189 + 344);
      if ((v225 + 1) <= (_DWORD)v227 << 6)
      {
        *(_DWORD *)(v189 + 400) = v226;
      }
      else
      {
        v228 = (_QWORD *)(v189 + 336);
        if ((v225 & 0x3F) != 0)
          *(_QWORD *)(*v228 + 8 * v227 - 8) &= ~(-1 << (v225 & 0x3F));
        *(_DWORD *)(v189 + 400) = v226;
        v229 = v225 + 64;
        if ((_DWORD)v227 != v229 >> 6)
        {
          v230 = v229 >> 6;
          if (v227 > v230)
          {
            *(_DWORD *)(v189 + 344) = v230;
            LODWORD(v227) = v229 >> 6;
          }
          else
          {
            v231 = v227;
            v232 = v227;
            if (v230 > *(_DWORD *)(v189 + 348))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(v189 + 336, v189 + 352, v230, 8);
              v231 = *(unsigned int *)(v189 + 344);
              v232 = *(_DWORD *)(v189 + 344);
            }
            if (v230 != v227)
              bzero((void *)(*v228 + 8 * v231), 8 * (v230 - v227));
            LODWORD(v227) = v232 + v230 - v227;
            *(_DWORD *)(v189 + 344) = v227;
            v226 = *(_DWORD *)(v189 + 400);
          }
        }
        v233 = v226 & 0x3F;
        if (v233)
          *(_QWORD *)(*v228 + 8 * v227 - 8) &= ~(-1 << v233);
      }
      (*(void (**)(uint64_t))(*(_QWORD *)v189 + 184))(v189);
    }
    __str[0].__r_.__value_.__r.__words[0] = (std::string::size_type)off_1E81A6E70;
    a3 = v1039;
    if (v1098 == 1 && __str[0].__r_.__value_.__r.__words[2])
      MEMORY[0x1CAA32F9C](__str[0].__r_.__value_.__r.__words[2], 0x1000C8077774924);
    if (*(_BYTE **)__dst != &__dst[24])
      free(*(void **)__dst);
    *(_QWORD *)__dst = &v1109;
    sub_1C4765410((void ***)__dst);
    *(_QWORD *)__dst = &v1107;
    sub_1C5934A04((void ***)__dst);
    sub_1C58F7164((uint64_t)&v1085);
    *(_QWORD *)__dst = &v1112;
    sub_1C60E8D20((void ***)__dst);
    *(_QWORD *)__dst = &v1115;
    sub_1C5934A04((void ***)__dst);
    v7 = __s1a;
    if (SHIBYTE(v1073.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v1073.__r_.__value_.__l.__data_);
    a2 = v1033;
    v10 = v1044;
    if ((v196 & 1) != 0)
    {
LABEL_337:
      LOBYTE(v9) = 1;
      return v9 & 1;
    }
  }
  v11 = *(__int128 **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v6 + 40))(v6) + 8);
  v12 = *v11;
  v1093 = *((_QWORD *)v11 + 2);
  v1092 = v12;
  v1095 = *((_DWORD *)v11 + 8);
  if (v1095 > 0x40)
  {
    __src = (void *)operator new[]();
    memcpy(__src, *((const void **)v11 + 3), (((unint64_t)v1095 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    __src = (void *)*((_QWORD *)v11 + 3);
  }
  v13 = *((_QWORD *)&v1092 + 1);
  v1081 = (char *)*((_QWORD *)&v1092 + 1);
  v1080 = 0uLL;
  v14 = **v7;
  v1067 = v6;
  switch(v14)
  {
    case 21:
      (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v6 + 184))(v6);
      v15 = "{";
      goto LABEL_37;
    case 22:
      (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v6 + 184))(v6);
      v15 = "}";
      goto LABEL_37;
    case 23:
      if (((*(uint64_t (**)(_QWORD *))(**((_QWORD **)v6 + 1) + 144))(*((_QWORD **)v6 + 1)) & 1) != 0)
      {
        (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v6 + 184))(v6);
        v15 = "*";
LABEL_37:
        *(_QWORD *)&v1080 = v15;
        v30 = -1;
        v31 = 1;
        goto LABEL_38;
      }
      v14 = **v7;
      goto LABEL_123;
    case 24:
      (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v6 + 184))(v6);
      v15 = ".";
      goto LABEL_37;
    default:
      if (v14 != 4)
      {
        if (v14 == 8)
        {
          (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v6 + 184))(v6);
          v16 = *(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v6 + 40))(v6) + 8);
          v19 = *(uint64_t **)(v16 + 24);
          v17 = (uint64_t *)(v16 + 24);
          v18 = v19;
          if (*((_DWORD *)v17 + 2) >= 0x41u)
            v17 = v18;
          v20 = *v17;
          (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v6 + 184))(v6);
          v21 = *(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v6 + 40))(v6) + 8);
          v22 = *(_QWORD *)(v21 + 8);
          v23 = *(_QWORD *)(v21 + 16);
          (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 184))(v1067);
          v24 = v23 - 2;
          if (v23)
            v25 = v22 + 1;
          else
            v25 = v22;
          if (v23 - (unint64_t)(v23 != 0) < v24)
            v24 = v23 - (v23 != 0);
          *((_QWORD *)v1067 + 98) = v13;
          *((_QWORD *)v1067 + 95) = v25;
          *((_QWORD *)v1067 + 96) = v24;
          *((_QWORD *)v1067 + 97) = v20;
          *((_DWORD *)v1067 + 198) = *((_DWORD *)v1067 + 68);
          if (!*((_QWORD *)v1067 + 101))
          {
            LOBYTE(v9) = 0;
            *((_QWORD *)v1067 + 100) = v25;
            *((_QWORD *)v1067 + 101) = v24;
            goto LABEL_215;
          }
          goto LABEL_67;
        }
LABEL_123:
        if (v14 == 6)
        {
          v1080 = *(_OWORD *)(*(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v6 + 40))(v6) + 8)
                            + 8);
          (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v6 + 184))(v6);
          if (!*((_QWORD *)&v1080 + 1) || *(_BYTE *)v1080 != 46)
            goto LABEL_262;
LABEL_130:
          v30 = -1;
          goto LABEL_39;
        }
        if (!sub_1C6108828((_DWORD **)v6, (unsigned __int8 **)&v1080, 1))
          goto LABEL_130;
        if (*((_BYTE *)v6 + 413))
        {
          v31 = 0;
          *(_QWORD *)&v1080 = "";
          v30 = -1;
LABEL_38:
          *((_QWORD *)&v1080 + 1) = v31;
          goto LABEL_39;
        }
        goto LABEL_261;
      }
      v26 = *(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v6 + 40))(v6) + 8);
      v29 = *(_QWORD *)(v26 + 24);
      v27 = v26 + 24;
      v28 = v29;
      if (*(_DWORD *)(v27 + 8) >= 0x41u)
        v27 = v28;
      v30 = *(_QWORD *)v27;
      if ((*(_QWORD *)v27 & 0x8000000000000000) != 0)
      {
        if (*((_BYTE *)v6 + 413))
        {
          v31 = 0;
          *(_QWORD *)&v1080 = "";
          goto LABEL_38;
        }
LABEL_261:
        (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v6 + 184))(v6);
LABEL_262:
        v144 = v1081;
        v145 = "unexpected token at start of statement";
LABEL_263:
        *(_QWORD *)__dst = v145;
        *(_WORD *)&__dst[32] = 259;
        v146 = (uint64_t)v6;
LABEL_264:
        v75 = llvm::MCAsmParser::Error(v146, (uint64_t)v144, (uint64_t)__dst, 0, 0);
        goto LABEL_214;
      }
      v1080 = *(_OWORD *)(*(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v6 + 40))(v6) + 8)
                        + 8);
      (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v6 + 184))(v6);
      if (**((_DWORD **)v6 + 6) != 10 && !*((_BYTE *)v6 + 413))
        goto LABEL_261;
LABEL_39:
      v1037 = a3;
      v1043 = (uint64_t)v10;
      sub_1C5E3DEA4(__dst, (char *)v1080, (uint64_t (*)(_QWORD))sub_1C5E3C6A8, (char *)(v1080 + *((_QWORD *)&v1080 + 1)), (uint64_t)sub_1C5E3C6A8, *((unint64_t *)&v1080 + 1));
      v32 = __dst[23];
      if (__dst[23] >= 0)
        v33 = __dst;
      else
        v33 = *(unsigned __int8 **)__dst;
      if (__dst[23] >= 0)
        v34 = __dst[23] & 0x7F;
      else
        v34 = *(_QWORD *)&__dst[8];
      v35 = *((unsigned int *)v6 + 270);
      v1028 = (void *)v30;
      v1032 = a2;
      __p = *(void **)__dst;
      __s1 = v7;
      if ((_DWORD)v35)
      {
        v36 = 0;
        if (v34)
        {
          v37 = v34;
          v38 = v33;
          do
          {
            v39 = *v38++;
            v36 = 33 * v36 + v39;
            --v37;
          }
          while (v37);
        }
        v40 = (_QWORD *)*((_QWORD *)v6 + 134);
        v41 = 1;
        v42 = v36;
        while (1)
        {
          v43 = v42 & (v35 - 1);
          v44 = (_QWORD *)v40[v43];
          if (v44 != (_QWORD *)-8)
          {
            if (!v44)
            {
              v45 = v35;
              goto LABEL_58;
            }
            if (*((_DWORD *)&v40[v35 + 1] + v43) == v36
              && v34 == *v44
              && (!v34 || !memcmp(v33, (char *)v44 + *((unsigned int *)v1067 + 273), v34)))
            {
              break;
            }
          }
          v42 = v41 + v43;
          ++v41;
        }
        v45 = (int)v43;
        if ((_DWORD)v43 == -1)
          v45 = v35;
      }
      else
      {
        v45 = 0;
        v40 = (_QWORD *)*((_QWORD *)v6 + 134);
      }
LABEL_58:
      v46 = &v40[v45];
      v6 = v1067;
      if (v32 < 0)
      {
        operator delete(__p);
        v40 = (_QWORD *)*((_QWORD *)v1067 + 134);
        LODWORD(v35) = *((_DWORD *)v1067 + 270);
      }
      if (v46 != &v40[v35])
      {
        v47 = *(_DWORD *)(*v46 + 8);
        switch(v47)
        {
          case '&':
          case '\'':
            v49 = (char *)*((_QWORD *)v1067 + 53);
            v48 = *((_QWORD *)v1067 + 54);
            if ((unint64_t)v49 < v48)
            {
              *(_QWORD *)v49 = *((_QWORD *)v1067 + 51);
              v50 = v49 + 8;
              goto LABEL_258;
            }
            v96 = (_BYTE *)*((_QWORD *)v1067 + 52);
            v97 = (v49 - v96) >> 3;
            v98 = v97 + 1;
            if (!((unint64_t)(v97 + 1) >> 61))
            {
              v99 = v48 - (_QWORD)v96;
              if (v99 >> 2 > v98)
                v98 = v99 >> 2;
              if ((unint64_t)v99 >= 0x7FFFFFFFFFFFFFF8)
                v100 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v100 = v98;
              if (v100)
              {
                if (v100 >> 61)
LABEL_1878:
                  sub_1C4764EE4();
                v101 = (char *)operator new(8 * v100);
              }
              else
              {
                v101 = 0;
              }
              v140 = &v101[8 * v97];
              v141 = &v101[8 * v100];
              v6 = v1067;
              *(_QWORD *)v140 = *((_QWORD *)v1067 + 51);
              v50 = v140 + 8;
              if (v49 != v96)
              {
                do
                {
                  v142 = *((_DWORD *)v49 - 2);
                  v49 -= 8;
                  v143 = *((_WORD *)v49 + 2);
                  *((_DWORD *)v140 - 2) = v142;
                  v140 -= 8;
                  *((_WORD *)v140 + 2) = v143;
                }
                while (v49 != v96);
                v49 = (char *)*((_QWORD *)v1067 + 52);
              }
              *((_QWORD *)v1067 + 52) = v140;
              *((_QWORD *)v1067 + 53) = v50;
              *((_QWORD *)v1067 + 54) = v141;
              if (v49)
                operator delete(v49);
LABEL_258:
              *((_QWORD *)v6 + 53) = v50;
              *((_DWORD *)v6 + 102) = 1;
              if (!*((_BYTE *)v6 + 413))
              {
                *(_QWORD *)v1106 = 0;
                if (((*(uint64_t (**)(llvm::MCAsmParser *, _BYTE *))(*(_QWORD *)v6 + 256))(v6, v1106) & 1) == 0)
                {
                  *(_QWORD *)__dst = "unexpected token in '.if' directive";
                  *(_WORD *)&__dst[32] = 259;
                  if (!llvm::MCAsmParser::parseEOL(v6, (const llvm::Twine *)__dst))
                  {
                    LOBYTE(v9) = 0;
                    v137 = *(_QWORD *)v1106 == 0;
                    v138 = *(_QWORD *)v1106 != 0;
                    v139 = v47 == 38;
LABEL_399:
                    if (v139)
                      v137 = v138;
                    *((_BYTE *)v6 + 412) = v137;
                    v236 = !v137;
LABEL_402:
                    *((_BYTE *)v6 + 413) = v236;
                    goto LABEL_215;
                  }
                }
LABEL_260:
                LOBYTE(v9) = 1;
                goto LABEL_215;
              }
              goto LABEL_66;
            }
            break;
          case '(':
            v116 = v1067;
            v117 = 1;
            goto LABEL_206;
          case ')':
            v116 = v1067;
            v117 = 0;
LABEL_206:
            v75 = sub_1C6108A0C(v116, v117);
            goto LABEL_214;
          case '*':
            v111 = v1067;
            v112 = 1;
            goto LABEL_201;
          case '+':
            v111 = v1067;
            v112 = 0;
LABEL_201:
            v75 = sub_1C6108C04(v111, v112);
            goto LABEL_214;
          case ',':
            v105 = (uint64_t)v1067;
            v106 = 0;
            goto LABEL_198;
          case '-':
            v105 = (uint64_t)v1067;
            v106 = 0;
            goto LABEL_192;
          case '.':
            v105 = (uint64_t)v1067;
            v106 = 1;
LABEL_198:
            v110 = 0;
            goto LABEL_199;
          case '/':
            v105 = (uint64_t)v1067;
            v106 = 1;
LABEL_192:
            v110 = 1;
LABEL_199:
            v75 = sub_1C61090F8(v105, v106, v110);
            goto LABEL_214;
          case '0':
          case '1':
            if ((*((_DWORD *)v1067 + 102) - 1) >= 2)
            {
              v144 = v1081;
              v145 = "Encountered a .elseif that doesn't follow an .if or  an .elseif";
              goto LABEL_263;
            }
            *((_DWORD *)v1067 + 102) = 2;
            v91 = *((_QWORD *)v1067 + 53);
            if (*((_QWORD *)v1067 + 52) != v91 && *(_BYTE *)(v91 - 3) || *((_BYTE *)v1067 + 412))
            {
              *((_BYTE *)v1067 + 413) = 1;
              goto LABEL_66;
            }
            *(_QWORD *)v1106 = 0;
            if (((*(uint64_t (**)(llvm::MCAsmParser *, _BYTE *))(*(_QWORD *)v1067 + 256))(v1067, v1106) & 1) == 0)
            {
              *(_QWORD *)__dst = "unexpected token in '.elseif' directive";
              *(_WORD *)&__dst[32] = 259;
              if (!llvm::MCAsmParser::parseEOL(v1067, (const llvm::Twine *)__dst))
              {
                LOBYTE(v9) = 0;
                v137 = *(_QWORD *)v1106 == 0;
                v138 = *(_QWORD *)v1106 != 0;
                v139 = v47 == 48;
                goto LABEL_399;
              }
            }
            goto LABEL_260;
          case '2':
            v102 = v1081;
            v103 = v1067;
            v104 = 1;
            goto LABEL_194;
          case '3':
            v102 = v1081;
            v103 = v1067;
            v104 = 0;
LABEL_194:
            v75 = sub_1C6109418(v103, (uint64_t)v102, v104);
            goto LABEL_214;
          case '4':
            v107 = v1081;
            v108 = v1067;
            v109 = 1;
            goto LABEL_208;
          case '5':
            v107 = v1081;
            v108 = v1067;
            v109 = 0;
LABEL_208:
            v75 = sub_1C610959C(v108, (uint64_t)v107, v109);
            goto LABEL_214;
          case '6':
            v113 = v1081;
            v114 = v1067;
            v115 = 0;
            goto LABEL_212;
          case '7':
            v113 = v1081;
            v114 = v1067;
            v115 = 0;
            goto LABEL_210;
          case '8':
            v113 = v1081;
            v114 = v1067;
            v115 = 1;
LABEL_212:
            v118 = 0;
            goto LABEL_213;
          case '9':
            v113 = v1081;
            v114 = v1067;
            v115 = 1;
LABEL_210:
            v118 = 1;
LABEL_213:
            v75 = sub_1C61099EC(v114, (uint64_t)v113, v115, v118);
            goto LABEL_214;
          case ':':
            v234 = v1081;
            *(_QWORD *)__dst = "unexpected token in 'else' directive";
            *(_WORD *)&__dst[32] = 259;
            if (llvm::MCAsmParser::parseEOL(v1067, (const llvm::Twine *)__dst))
              goto LABEL_260;
            if ((*((_DWORD *)v1067 + 102) - 1) >= 2)
            {
              v318 = "Encountered an else that doesn't follow an if or an elseif";
              goto LABEL_580;
            }
            *((_DWORD *)v1067 + 102) = 3;
            v235 = *((_QWORD *)v1067 + 53);
            if (*((_QWORD *)v1067 + 52) != v235 && *(_BYTE *)(v235 - 3) || *((_BYTE *)v1067 + 412))
            {
              LOBYTE(v9) = 0;
              v236 = 1;
              goto LABEL_402;
            }
            LOBYTE(v9) = 0;
            *((_BYTE *)v1067 + 413) = 0;
            goto LABEL_215;
          case ';':
            v234 = v1081;
            *(_QWORD *)__dst = "unexpected token in '.endif' directive";
            *(_WORD *)&__dst[32] = 259;
            if (llvm::MCAsmParser::parseEOL(v1067, (const llvm::Twine *)__dst))
              goto LABEL_260;
            if (*((_DWORD *)v1067 + 102))
            {
              v237 = *((_QWORD *)v1067 + 53);
              if (*((_QWORD *)v1067 + 52) != v237)
              {
                LOBYTE(v9) = 0;
                v239 = *(_DWORD *)(v237 - 8);
                v238 = v237 - 8;
                *((_WORD *)v1067 + 206) = *(_WORD *)(v238 + 4);
                *((_DWORD *)v1067 + 102) = v239;
                *((_QWORD *)v1067 + 53) = v238;
                goto LABEL_215;
              }
            }
            v318 = "Encountered a .endif that doesn't follow an .if or .else";
LABEL_580:
            *(_QWORD *)__dst = v318;
            *(_WORD *)&__dst[32] = 259;
            v146 = (uint64_t)v1067;
            goto LABEL_581;
          default:
            goto LABEL_65;
        }
LABEL_1877:
        abort();
      }
      v47 = 0;
LABEL_65:
      if (*((_BYTE *)v1067 + 413))
      {
LABEL_66:
        (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v6 + 224))(v6);
        goto LABEL_67;
      }
      if (**v7 == 10
        && (*(unsigned int (**)(_QWORD, __int128 *))(**((_QWORD **)v1067 + 1) + 136))(*((_QWORD *)v1067 + 1), &v1092))
      {
        if (((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 264))(v1067) & 1) != 0)
          goto LABEL_260;
        (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 184))(v1067);
        v51 = *((_QWORD *)&v1080 + 1);
        if (*((_QWORD *)&v1080 + 1) != 1 || *(_BYTE *)v1080 != 46)
        {
          if (v1028 == (void *)-1)
          {
            v52 = v1043;
            if (v1037 && *((_BYTE *)v1067 + 1061))
            {
              v263 = v1080;
              v264 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 32))(v1067);
              v265 = v263;
              v7 = __s1;
              *(_QWORD *)__dst = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, char *, uint64_t))(*(_QWORD *)v1037 + 24))(v1037, v265, v51, v264, v1081, 1);
              *(_QWORD *)&__dst[8] = v266;
              v267 = *(_QWORD *)(v1032 + 120);
              LODWORD(__str[0].__r_.__value_.__l.__data_) = 7;
              *(_QWORD *)v1106 = *((_QWORD *)&v1080 + 1);
              sub_1C63E9A98(v267, (int *)__str, (uint64_t *)&v1081, (uint64_t *)v1106, (__int128 *)__dst);
              v1080 = *(_OWORD *)__dst;
            }
            v53 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 48))(v1067);
            *(_WORD *)&__dst[32] = 261;
            *(_OWORD *)__dst = v1080;
            Symbol = (_BYTE *)llvm::MCContext::getOrCreateSymbol(v53, (uint64_t)__dst);
          }
          else
          {
            Symbol = (_BYTE *)llvm::MCContext::createDirectionalLocalSymbol(*((llvm::MCContext **)v1067 + 27), v1028);
            v52 = v1043;
          }
          if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067) + 8) == 37)
          {
            sub_1C6109CB4((std::string *)v1106, (uint64_t)v1067);
            sub_1C60E57B0(v52);
            v55 = *(_BYTE **)v1106;
            if (v1106[23] >= 0)
              v55 = v1106;
            v56 = v1106[23] & 0x7F;
            if (v1106[23] < 0)
              v56 = *(_QWORD *)&v1106[8];
            *(_DWORD *)__dst = 9;
            *(_QWORD *)&__dst[8] = v55;
            *(_OWORD *)&__dst[16] = v56;
            *(_DWORD *)&__dst[32] = 64;
            *((_BYTE *)v1067 + 147) = 0;
            sub_1C4CD9B2C((uint64_t)v7, *((_QWORD *)v1067 + 6), (unint64_t)__dst);
            if (*(_DWORD *)&__dst[32] >= 0x41u && *(_QWORD *)&__dst[24])
              MEMORY[0x1CAA32F9C](*(_QWORD *)&__dst[24], 0x1000C8000313F17);
            if ((v1106[23] & 0x80000000) != 0)
              operator delete(*(void **)v1106);
          }
          if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067) + 8) == 9)
            (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 184))(v1067);
          (*(void (**)(_QWORD, _BYTE *))(**((_QWORD **)v1067 + 1) + 160))(*((_QWORD *)v1067 + 1), Symbol);
          if (!*(_BYTE *)(*((_QWORD *)v1067 + 1) + 64))
            (*(void (**)(_QWORD, _BYTE *, char *))(**((_QWORD **)v1067 + 28) + 192))(*((_QWORD *)v1067 + 28), Symbol, v1081);
          if (sub_1C6109E38(v1067))
          {
            v57 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 56))(v1067);
            v58 = (uint64_t *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 32))(v1067);
            llvm::MCGenDwarfLabelEntry::Make(Symbol, v57, v58, &v1081);
          }
          (*(void (**)(_QWORD, _BYTE *))(**((_QWORD **)v1067 + 1) + 168))(*((_QWORD *)v1067 + 1), Symbol);
          goto LABEL_67;
        }
        v144 = v1081;
        v145 = "invalid use of pseudo-symbol '.' as a label";
        goto LABEL_263;
      }
      v59 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 48))(v1067);
      sub_1C5E3DEA4(__dst, (char *)v1080, (uint64_t (*)(_QWORD))sub_1C5E3C6A8, (char *)(v1080 + *((_QWORD *)&v1080 + 1)), (uint64_t)sub_1C5E3C6A8, *((unint64_t *)&v1080 + 1));
      v60 = __dst[23];
      if (__dst[23] >= 0)
        v61 = __dst;
      else
        v61 = *(unsigned __int8 **)__dst;
      if (__dst[23] >= 0)
        v62 = __dst[23] & 0x7F;
      else
        v62 = *(_QWORD *)&__dst[8];
      v63 = *(unsigned int *)(v59 + 1976);
      __pa = v47;
      v1029 = *(void **)__dst;
      if (!(_DWORD)v63)
      {
        v74 = 0;
        goto LABEL_118;
      }
      v1038 = __dst[23];
      v64 = 0;
      if (v62)
      {
        v65 = v62;
        v66 = v61;
        do
        {
          v67 = *v66++;
          v64 = 33 * v64 + v67;
          --v65;
        }
        while (v65);
      }
      v68 = *(_QWORD *)(v59 + 1968);
      v69 = *(unsigned int *)(v59 + 1988);
      v70 = 1;
      v71 = v64;
      while (1)
      {
        v72 = v71 & (v63 - 1);
        v73 = *(_QWORD **)(v68 + 8 * v72);
        if (v73 == (_QWORD *)-8)
          goto LABEL_112;
        if (!v73)
        {
          v74 = 0;
          v6 = v1067;
          v47 = __pa;
LABEL_117:
          v60 = v1038;
          goto LABEL_118;
        }
        if (*(_DWORD *)(v68 + 8 * v63 + 8 + 4 * v72) == v64
          && v62 == *v73
          && (!v62 || !memcmp(v61, (char *)v73 + v69, v62)))
        {
          break;
        }
LABEL_112:
        v71 = v70 + v72;
        ++v70;
      }
      v74 = 0;
      v6 = v1067;
      v47 = __pa;
      if ((_DWORD)v72 == -1)
        goto LABEL_117;
      v60 = v1038;
      if ((int)v72 != v63)
        v74 = (uint64_t *)(*(_QWORD *)(v68 + 8 * (int)v72) + 8);
LABEL_118:
      if (v60 < 0)
        operator delete(v1029);
      if (v74)
      {
        v75 = sub_1C610A054((uint64_t)v6, v74, (uint64_t)v1081, 9);
LABEL_214:
        LOBYTE(v9) = v75;
        goto LABEL_215;
      }
      if (!v47)
      {
        sub_1C5E3DEA4(__dst, (char *)v1080, (uint64_t (*)(_QWORD))sub_1C5E3C6A8, (char *)(v1080 + *((_QWORD *)&v1080 + 1)), (uint64_t)sub_1C5E3C6A8, *((unint64_t *)&v1080 + 1));
        v120 = __dst[23];
        __pb = *(void **)__dst;
        if (__dst[23] >= 0)
          v121 = __dst;
        else
          v121 = *(unsigned __int8 **)__dst;
        if (__dst[23] >= 0)
          v122 = __dst[23] & 0x7F;
        else
          v122 = *(_QWORD *)&__dst[8];
        v123 = *((unsigned int *)v6 + 156);
        if ((_DWORD)v123)
        {
          v124 = 0;
          if (v122)
          {
            v125 = v122;
            v126 = v121;
            do
            {
              v127 = *v126++;
              v124 = 33 * v124 + v127;
              --v125;
            }
            while (v125);
          }
          v128 = (_QWORD *)*((_QWORD *)v6 + 77);
          v129 = 1;
          v130 = v124;
          while (1)
          {
            v131 = v130 & (v123 - 1);
            v132 = (_QWORD *)v128[v131];
            if (v132 != (_QWORD *)-8)
            {
              if (!v132)
              {
                v133 = v123;
                goto LABEL_238;
              }
              if (*((_DWORD *)&v128[v123 + 1] + v131) == v124
                && v122 == *v132
                && (!v122 || !memcmp(v121, (char *)v132 + *((unsigned int *)v1067 + 159), v122)))
              {
                break;
              }
            }
            v130 = v129 + v131;
            ++v129;
          }
          v133 = (int)v131;
          if ((_DWORD)v131 == -1)
            v133 = v123;
        }
        else
        {
          v133 = 0;
          v128 = (_QWORD *)*((_QWORD *)v6 + 77);
        }
LABEL_238:
        v134 = &v128[v133];
        v135 = v1067;
        if (v120 < 0)
        {
          operator delete(__pb);
          v128 = (_QWORD *)*((_QWORD *)v1067 + 77);
          LODWORD(v123) = *((_DWORD *)v1067 + 156);
        }
        if (v134 != &v128[v123])
        {
          if (*((_DWORD *)v1067 + 128))
          {
            *(_OWORD *)__s1b = v1080;
            if (!sub_1C6113938((uint64_t)v1067, "", 0, *v134 + 8))
              goto LABEL_67;
            *(_QWORD *)v1106 = " in '";
            *(_OWORD *)&v1106[16] = *(_OWORD *)__s1b;
            LOWORD(v1107) = 1283;
            *(_QWORD *)__dst = v1106;
            *(_QWORD *)&__dst[16] = "' directive";
            *(_WORD *)&__dst[32] = 770;
            v136 = v1067;
LABEL_244:
            v75 = llvm::MCAsmParser::addErrorSuffix(v136, (const llvm::Twine *)__dst);
            goto LABEL_214;
          }
          if ((sub_1C6113804(v1067, (uint64_t *)(*v134 + 8), 0) & 1) != 0)
            goto LABEL_260;
LABEL_67:
          LOBYTE(v9) = 0;
          goto LABEL_215;
        }
        v197 = *(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067) + 8);
        v199 = *(char **)(v197 + 8);
        v198 = *(_QWORD *)(v197 + 16);
        v200 = *(unsigned int *)(v197 + 32);
        if (v200 > 0x40)
        {
          v1023 = (void *)operator new[]();
          memcpy(v1023, *(const void **)(v197 + 24), ((unint64_t)(v200 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          v1023 = *(void **)(v197 + 24);
        }
        v1104 = (uint64_t)v199;
        v1105 = v198;
        sub_1C610C428((uint64_t)&v1073, (uint64_t)v1067, 1);
        v201 = *((_QWORD *)v1067 + 1);
        v202 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 56))(v1067);
        (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v201 + 176))(v201, v202);
        v1030 = v200;
        if (v198 == 4
          && !llvm::StringRef::compare_insensitive((unsigned __int8 **)&v1104, "ends", 4uLL)
          && *((_DWORD *)v1067 + 128) == 1)
        {
          goto LABEL_347;
        }
        v1020 = &v199[v198];
        sub_1C5E3DEA4(__dst, v199, (uint64_t (*)(_QWORD))sub_1C5E3C6A8, &v199[v198], (uint64_t)sub_1C5E3C6A8, v198);
        v204 = __dst[23];
        if (__dst[23] >= 0)
          v205 = __dst;
        else
          v205 = *(unsigned __int8 **)__dst;
        if (__dst[23] >= 0)
          v206 = __dst[23] & 0x7F;
        else
          v206 = *(_QWORD *)&__dst[8];
        v207 = *((unsigned int *)v1067 + 112);
        v1040 = v198;
        __pc = v199;
        v1016 = *(void **)__dst;
        if ((_DWORD)v207)
        {
          v1024 = __dst[23];
          v208 = 0;
          if (v206)
          {
            v209 = v206;
            v210 = v205;
            do
            {
              v211 = *v210++;
              v208 = 33 * v208 + v211;
              --v209;
            }
            while (v209);
          }
          v212 = *((_QWORD *)v1067 + 55);
          v213 = 1;
          v214 = v208;
          while (1)
          {
            v215 = v214 & (v207 - 1);
            v9 = *(_QWORD *)(v212 + 8 * v215);
            if (v9 != -8)
            {
              if (!v9)
                goto LABEL_455;
              if (*(_DWORD *)(v212 + 8 * v207 + 8 + 4 * v215) == v208
                && v206 == *(_QWORD *)v9
                && (!v206 || !memcmp(v205, (const void *)(v9 + *((unsigned int *)v1067 + 115)), v206)))
              {
                break;
              }
            }
            v214 = v213 + v215;
            ++v213;
          }
          if ((_DWORD)v215 == -1)
          {
            v9 = 0;
LABEL_455:
            v269 = 0;
            v135 = v1067;
            v199 = __pc;
            v204 = v1024;
          }
          else
          {
            v135 = v1067;
            v204 = v1024;
            if ((int)v215 == v207)
            {
              v9 = 0;
              v269 = 0;
            }
            else
            {
              v299 = *(_QWORD *)(v212 + 8 * (int)v215);
              v9 = *(_QWORD *)(v299 + 8);
              v269 = *(uint64_t (**)(unint64_t, char *, unint64_t, char *))(v299 + 16);
            }
            v199 = __pc;
          }
        }
        else
        {
          v9 = 0;
          v269 = 0;
        }
        if (v204 < 0)
          operator delete(v1016);
        if (v9)
        {
          (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v135 + 184))(v135);
          *((_BYTE *)v135 + 147) = 0;
          sub_1C4CD9B2C((uint64_t)__s1, *((_QWORD *)v135 + 6), (unint64_t)&v1092);
          v203 = v269(v9, v199, v198, v199);
          goto LABEL_460;
        }
        sub_1C5E3DEA4(__dst, v199, (uint64_t (*)(_QWORD))sub_1C5E3C6A8, v1020, (uint64_t)sub_1C5E3C6A8, v198);
        v270 = __dst[23];
        if (__dst[23] >= 0)
          v271 = __dst;
        else
          v271 = *(unsigned __int8 **)__dst;
        if (__dst[23] >= 0)
          v272 = __dst[23] & 0x7F;
        else
          v272 = *(_QWORD *)&__dst[8];
        v273 = *((unsigned int *)v135 + 270);
        v1025 = *(void **)__dst;
        if ((_DWORD)v273)
        {
          v274 = 0;
          if (v272)
          {
            v275 = v272;
            v276 = v271;
            do
            {
              v277 = *v276++;
              v274 = 33 * v274 + v277;
              --v275;
            }
            while (v275);
          }
          v278 = *((_QWORD *)v135 + 134);
          v279 = 1;
          v280 = v274;
          while (1)
          {
            v9 = v280 & (v273 - 1);
            v281 = *(_QWORD **)(v278 + 8 * v9);
            if (v281 != (_QWORD *)-8)
            {
              if (!v281)
              {
                v282 = v273;
                goto LABEL_486;
              }
              if (*(_DWORD *)(v278 + 8 * v273 + 8 + 4 * v9) == v274
                && v272 == *v281
                && (!v272 || !memcmp(v271, (char *)v281 + *((unsigned int *)v1067 + 273), v272)))
              {
                break;
              }
            }
            v280 = v279 + v9;
            ++v279;
          }
          v282 = (int)v9;
          if ((_DWORD)v9 == -1)
            v282 = v273;
        }
        else
        {
          v282 = 0;
          v278 = *((_QWORD *)v135 + 134);
        }
LABEL_486:
        v283 = v278 + 8 * v282;
        v284 = v1067;
        v285 = __pc;
        if (v270 < 0)
        {
          operator delete(v1025);
          v278 = *((_QWORD *)v1067 + 134);
          LODWORD(v273) = *((_DWORD *)v1067 + 270);
        }
        if (v283 == v278 + 8 * v273)
          goto LABEL_608;
        v286 = *(_DWORD *)(*(_QWORD *)v283 + 8);
        if (v286 <= 97)
        {
          switch(v286)
          {
            case 2:
            case 3:
            case 4:
              (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 184))(v1067);
              v1017 = v1081;
              v1045 = (char *)v1080;
              v1026 = (char *)(v1080 + *((_QWORD *)&v1080 + 1));
              __s1c = *((_QWORD *)&v1080 + 1);
              sub_1C5E3DEA4(__dst, (char *)v1080, (uint64_t (*)(_QWORD))sub_1C5E3C6A8, (char *)(v1080 + *((_QWORD *)&v1080 + 1)), (uint64_t)sub_1C5E3C6A8, *((unint64_t *)&v1080 + 1));
              v1034 = __dst[23];
              v1021 = *(void **)__dst;
              if (__dst[23] >= 0)
                v287 = __dst;
              else
                v287 = *(unsigned __int8 **)__dst;
              if (__dst[23] >= 0)
                v288 = __dst[23] & 0x7F;
              else
                v288 = *(_QWORD *)&__dst[8];
              v289 = *((unsigned int *)v1067 + 286);
              if ((_DWORD)v289)
              {
                v290 = 0;
                if (v288)
                {
                  v291 = v288;
                  v292 = v287;
                  do
                  {
                    v293 = *v292++;
                    v290 = 33 * v290 + v293;
                    --v291;
                  }
                  while (v291);
                }
                LODWORD(v9) = v289 - 1;
                v294 = *((_QWORD *)v1067 + 142);
                v295 = 1;
                v296 = v290;
                while (1)
                {
                  v297 = v296 & v9;
                  v298 = *(_QWORD **)(v294 + 8 * v297);
                  if (v298 != (_QWORD *)-8)
                  {
                    if (!v298)
                    {
                      v300 = v289;
                      goto LABEL_516;
                    }
                    if (*(_DWORD *)(v294 + 8 * v289 + 8 + 4 * v297) == v290
                      && v288 == *v298
                      && (!v288 || !memcmp(v287, (char *)v298 + *((unsigned int *)v1067 + 289), v288)))
                    {
                      break;
                    }
                  }
                  v296 = v295 + v297;
                  ++v295;
                }
                v300 = (int)v297;
                if ((_DWORD)v297 == -1)
                  v300 = v289;
              }
              else
              {
                v300 = 0;
                v294 = *((_QWORD *)v1067 + 142);
              }
LABEL_516:
              v301 = v294 + 8 * v300;
              if (v1034 < 0)
              {
                operator delete(v1021);
                v294 = *((_QWORD *)v1067 + 142);
                LODWORD(v289) = *((_DWORD *)v1067 + 286);
              }
              if (v301 != v294 + 8 * v289)
              {
                *(_QWORD *)__dst = "cannot redefine a built-in symbol";
                *(_WORD *)&__dst[32] = 259;
                v337 = (uint64_t)v1067;
                v336 = (uint64_t)v1017;
                goto LABEL_1421;
              }
              sub_1C5E3DEA4(__dst, v1045, (uint64_t (*)(_QWORD))sub_1C5E3C6A8, v1026, (uint64_t)sub_1C5E3C6A8, __s1c);
              if (__dst[23] >= 0)
                v302 = __dst;
              else
                v302 = *(unsigned __int8 **)__dst;
              if (__dst[23] >= 0)
                v303 = __dst[23] & 0x7F;
              else
                v303 = *(_QWORD *)&__dst[8];
              v304 = (std::string *)sub_1C6116114((llvm::MCAsmParser *)((char *)v1067 + 472), v302, v303);
              if ((__dst[23] & 0x80000000) != 0)
                operator delete(*(void **)__dst);
              if (!v304->__r_.__value_.__l.__size_)
              {
                v304->__r_.__value_.__r.__words[0] = (std::string::size_type)v1045;
                v304->__r_.__value_.__l.__size_ = __s1c;
              }
              v305 = v1067;
              v306 = (_BYTE *)*((_QWORD *)v1067 + 17);
              if ((v286 - 3) > 1)
                goto LABEL_537;
              memset(__str, 0, 24);
              memset(v1090, 0, 24);
              v307 = sub_1C610ED00(v1067, (uint64_t)v1090);
              if ((v307 & 1) != 0)
                goto LABEL_531;
              if (v1090[23] >= 0)
                v450 = v1090;
              else
                v450 = *(const std::string::value_type **)v1090;
              if (v1090[23] >= 0)
                v451 = v1090[23] & 0x7F;
              else
                v451 = *(_QWORD *)&v1090[8];
              std::string::append(__str, v450, v451);
              v1087[0] = v1067;
              v1087[1] = v1090;
              *(_QWORD *)&v1088 = __str;
              if (llvm::MCAsmParser::parseOptionalToken(v1067, 25)
                && llvm::MCAsmParser::parseMany(v1067, (unsigned int (*)(uint64_t))sub_1C6116320, (uint64_t)v1087, 1))
              {
                *(_QWORD *)v1106 = " in '";
                *(_QWORD *)&v1106[16] = __pc;
                *(_QWORD *)&v1106[24] = v1040;
                LOWORD(v1107) = 1283;
                *(_QWORD *)__dst = v1106;
                *(_QWORD *)&__dst[16] = "' directive";
                *(_WORD *)&__dst[32] = 770;
                v669 = llvm::MCAsmParser::addErrorSuffix(v1067, (const llvm::Twine *)__dst);
                goto LABEL_1273;
              }
              if (!v304->__r_.__value_.__s.__data_[20])
                goto LABEL_1270;
              v452 = HIBYTE(v304[1].__r_.__value_.__r.__words[2]);
              v453 = v452 & 0x7F;
              if (v452 >= 0)
                v454 = v452 & 0x7F;
              else
                v454 = v304[1].__r_.__value_.__l.__size_;
              v455 = *((_BYTE *)&__str[0].__r_.__value_.__s + 23) & 0x7F;
              if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                v455 = __str[0].__r_.__value_.__l.__size_;
              if (v454 != v455)
                goto LABEL_1270;
              v456 = (const void **)&v304[1].__r_.__value_.__l.__data_;
              if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v457 = __str;
              else
                v457 = (std::string *)__str[0].__r_.__value_.__r.__words[0];
              if ((*((_BYTE *)&v304[1].__r_.__value_.__s + 23) & 0x80) != 0)
              {
                if (!memcmp(*v456, v457, v304[1].__r_.__value_.__l.__size_))
                  goto LABEL_1276;
              }
              else
              {
                if ((v452 & 0x7F) == 0)
                  goto LABEL_1276;
                while (*(unsigned __int8 *)v456 == v457->__r_.__value_.__s.__data_[0])
                {
                  v456 = (const void **)((char *)v456 + 1);
                  v457 = (std::string *)((char *)v457 + 1);
                  if (!--v453)
                    goto LABEL_1276;
                }
              }
LABEL_1270:
              v667 = v304->__r_.__value_.__r.__words[2];
              if (v667 == 1)
              {
                LOWORD(v1107) = 1283;
                *(_QWORD *)v1106 = "redefining '";
                *(_QWORD *)&v1106[16] = v1045;
                *(_QWORD *)&v1106[24] = __s1c;
                *(_QWORD *)__dst = v1106;
                *(_QWORD *)&__dst[16] = "', already defined on the command line";
                *(_WORD *)&__dst[32] = 770;
                if (((*(uint64_t (**)(llvm::MCAsmParser *, char *, _BYTE *, _QWORD, _QWORD))(*(_QWORD *)v1067 + 168))(v1067, v1017, __dst, 0, 0) & 1) != 0)
                {
                  LOBYTE(v9) = 1;
                  goto LABEL_531;
                }
              }
              else if (!v667)
              {
                v668 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067)
                                             + 8)
                                 + 8);
                *(_QWORD *)__dst = "invalid variable redefinition";
                *(_WORD *)&__dst[32] = 259;
                v669 = llvm::MCAsmParser::Error((uint64_t)v1067, v668, (uint64_t)__dst, 0, 0);
LABEL_1273:
                LOBYTE(v9) = v669;
                goto LABEL_531;
              }
LABEL_1276:
              v304->__r_.__value_.__s.__data_[20] = 1;
              std::string::operator=(v304 + 1, __str);
              LOBYTE(v9) = 0;
              LODWORD(v304->__r_.__value_.__r.__words[2]) = 2;
LABEL_531:
              if ((v1090[23] & 0x80000000) != 0)
                operator delete(*(void **)v1090);
              if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str[0].__r_.__value_.__l.__data_);
              if (!v307)
                goto LABEL_461;
              v305 = v1067;
              if (v286 == 4)
              {
                *(_QWORD *)v1106 = "expected <text> in '";
                *(_QWORD *)&v1106[16] = __pc;
                *(_QWORD *)&v1106[24] = v1040;
                LOWORD(v1107) = 1283;
                *(_QWORD *)__dst = v1106;
                *(_QWORD *)&__dst[16] = "' directive";
                *(_WORD *)&__dst[32] = 770;
                v619 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067);
                llvm::MCAsmParser::Error((uint64_t)v1067, *(_QWORD *)(v619 + 96), (uint64_t)__dst, 0, 0);
                goto LABEL_686;
              }
LABEL_537:
              __str[0].__r_.__value_.__r.__words[0] = 0;
              *(_QWORD *)v1090 = 0;
              if (!(*(unsigned int (**)(llvm::MCAsmParser *, std::string *, _BYTE *))(*(_QWORD *)v305 + 232))(v305, __str, v1090))
              {
                v308 = *(_BYTE **)v1090;
                v1087[0] = 0;
                v309 = __str[0].__r_.__value_.__r.__words[0];
                v310 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 56))(v1067);
                (*(void (**)(uint64_t))(*(_QWORD *)v310 + 72))(v310);
                llvm::MCExpr::evaluateAsAbsolute(v309, v1087);
                if ((v311 & 1) != 0)
                {
                  v312 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 48))(v1067);
                  *(_WORD *)&__dst[32] = 261;
                  v313 = v304->__r_.__value_.__l.__size_;
                  *(_QWORD *)__dst = v304->__r_.__value_.__r.__words[0];
                  *(_QWORD *)&__dst[8] = v313;
                  v314 = llvm::MCContext::getOrCreateSymbol(v312, (uint64_t)__dst);
                  v315 = v314;
                  if ((*(_DWORD *)(v314 + 8) & 0x1C00) == 0x800)
                  {
                    v316 = *(_QWORD *)(v314 + 24);
                    if (v316)
                    {
                      if (!v304->__r_.__value_.__s.__data_[20]
                        && *(_BYTE *)v316 == 1
                        && *(void **)(v316 + 16) == v1087[0])
                      {
                        goto LABEL_737;
                      }
                    }
                  }
                  v317 = v304->__r_.__value_.__r.__words[2];
                  if (v317 != 1)
                  {
                    if (!v317)
                      goto LABEL_594;
LABEL_737:
                    v304->__r_.__value_.__s.__data_[20] = 0;
                    if (SHIBYTE(v304[1].__r_.__value_.__r.__words[2]) < 0)
                    {
                      *v304[1].__r_.__value_.__l.__data_ = 0;
                      v304[1].__r_.__value_.__l.__size_ = 0;
                    }
                    else
                    {
                      v304[1].__r_.__value_.__s.__data_[0] = 0;
                      *((_BYTE *)&v304[1].__r_.__value_.__s + 23) = 0;
                    }
                    LOBYTE(v9) = 0;
                    LODWORD(v304->__r_.__value_.__r.__words[2]) = 2 * (v286 == 2);
                    v398 = *(_DWORD *)(v315 + 8) & 0xFFFFE3ED | (2 * (v286 == 2));
                    *(_QWORD *)(v315 + 24) = __str[0].__r_.__value_.__r.__words[0];
                    *(_QWORD *)v315 &= 7uLL;
                    *(_DWORD *)(v315 + 8) = v398 | 0x800;
                    goto LABEL_461;
                  }
                  LOWORD(v1107) = 1283;
                  *(_QWORD *)v1106 = "redefining '";
                  *(_QWORD *)&v1106[16] = v1045;
                  *(_QWORD *)&v1106[24] = __s1c;
                  *(_QWORD *)__dst = v1106;
                  *(_QWORD *)&__dst[16] = "', already defined on the command line";
                  *(_WORD *)&__dst[32] = 770;
                  if (((*(uint64_t (**)(llvm::MCAsmParser *, char *, _BYTE *, _QWORD, _QWORD))(*(_QWORD *)v1067 + 168))(v1067, v1017, __dst, 0, 0) & 1) == 0)goto LABEL_737;
LABEL_686:
                  LOBYTE(v9) = 1;
                  goto LABEL_461;
                }
                if (v286 == 2)
                {
                  *(_QWORD *)__dst = "expected absolute expression; not all symbols have known values";
                  *(_WORD *)&__dst[32] = 259;
                  v614 = *(_QWORD *)v1090;
                  v337 = (uint64_t)v1067;
                  v336 = (uint64_t)v306;
                  v615 = (uint64_t)v306;
LABEL_1422:
                  v203 = llvm::MCAsmParser::Error(v337, v336, (uint64_t)__dst, v615, v614);
                  goto LABEL_460;
                }
                v331 = v308 - v306;
                if (!v304->__r_.__value_.__s.__data_[20])
                  goto LABEL_592;
                v332 = HIBYTE(v304[1].__r_.__value_.__r.__words[2]);
                if (v332 >= 0)
                  data = v304 + 1;
                else
                  data = (std::string *)v304[1].__r_.__value_.__l.__data_;
                v334 = v304[1].__r_.__value_.__l.__size_;
                if (v332 >= 0)
                  v334 = v332 & 0x7F;
                if (v334 != v331 || v306 != v308 && memcmp(data, v306, v308 - v306))
                {
LABEL_592:
                  v335 = v304->__r_.__value_.__r.__words[2];
                  if (v335 == 1)
                  {
                    LOWORD(v1107) = 1283;
                    *(_QWORD *)v1106 = "redefining '";
                    *(_QWORD *)&v1106[16] = v1045;
                    *(_QWORD *)&v1106[24] = __s1c;
                    *(_QWORD *)__dst = v1106;
                    *(_QWORD *)&__dst[16] = "', already defined on the command line";
                    *(_WORD *)&__dst[32] = 770;
                    if (((*(uint64_t (**)(llvm::MCAsmParser *, char *, _BYTE *, _QWORD, _QWORD))(*(_QWORD *)v1067 + 168))(v1067, v1017, __dst, 0, 0) & 1) != 0)goto LABEL_686;
                  }
                  else if (!v335)
                  {
LABEL_594:
                    v336 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067
                                                                                                  + 40))(v1067)
                                                 + 8)
                                     + 8);
                    *(_QWORD *)__dst = "invalid variable redefinition";
                    *(_WORD *)&__dst[32] = 259;
                    v337 = (uint64_t)v1067;
LABEL_1421:
                    v615 = 0;
                    v614 = 0;
                    goto LABEL_1422;
                  }
                }
                v304->__r_.__value_.__s.__data_[20] = 1;
                if (!v306)
                {
                  memset(__dst, 0, 24);
LABEL_760:
                  v401 = (void **)&v304[1].__r_.__value_.__l.__data_;
                  if (SHIBYTE(v304[1].__r_.__value_.__r.__words[2]) < 0)
                    operator delete(*v401);
                  LOBYTE(v9) = 0;
                  *(_OWORD *)v401 = *(_OWORD *)__dst;
                  v304[1].__r_.__value_.__r.__words[2] = *(_QWORD *)&__dst[16];
                  LODWORD(v304->__r_.__value_.__r.__words[2]) = 2;
                  goto LABEL_461;
                }
                if (v331 >= 0x7FFFFFFFFFFFFFF8)
                  goto LABEL_1877;
                if (v331 >= 0x17)
                {
                  v399 = (v331 & 0xFFFFFFFFFFFFFFF8) + 8;
                  if ((v331 | 7) != 0x17)
                    v399 = v331 | 7;
                  v400 = v399 + 1;
                  v397 = operator new(v399 + 1);
                  *(_QWORD *)&__dst[16] = v400 | 0x8000000000000000;
                  *(_QWORD *)__dst = v397;
                  *(_QWORD *)&__dst[8] = v308 - v306;
                }
                else
                {
                  __dst[23] = (_BYTE)v308 - (_BYTE)v306;
                  v397 = __dst;
                  if (v306 == v308)
                    goto LABEL_759;
                }
                memmove(v397, v306, v308 - v306);
LABEL_759:
                v397[v331] = 0;
                goto LABEL_760;
              }
LABEL_852:
              *(_QWORD *)v1106 = " in '";
              *(_QWORD *)&v1106[16] = __pc;
              *(_QWORD *)&v1106[24] = v1040;
              LOWORD(v1107) = 1283;
              *(_QWORD *)__dst = v1106;
              *(_QWORD *)&__dst[16] = "' directive";
              *(_WORD *)&__dst[32] = 770;
              v203 = llvm::MCAsmParser::addErrorSuffix(v1067, (const llvm::Twine *)__dst);
              goto LABEL_460;
            case 8:
              if (LODWORD(v1073.__r_.__value_.__l.__data_) == 2
                && (*(_OWORD *)__dst = *(_OWORD *)&v1073.__r_.__value_.__r.__words[1],
                    v1073.__r_.__value_.__r.__words[2] == 3))
              {
                v284 = v1067;
                v285 = __pc;
                if (!llvm::StringRef::compare_insensitive((unsigned __int8 **)__dst, "ptr", 3uLL))
                  goto LABEL_608;
              }
              else
              {
                v284 = v1067;
                v285 = __pc;
              }
LABEL_601:
              (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v284 + 184))(v284);
              v339 = *((_QWORD *)&v1080 + 1);
              v338 = (char *)v1080;
              v340 = v284;
              v341 = (uint64_t)v285;
              v342 = v1040;
              v343 = 1;
              goto LABEL_606;
            case 9:
            case 17:
              goto LABEL_601;
            case 10:
              if (LODWORD(v1073.__r_.__value_.__l.__data_) == 2
                && (*(_OWORD *)__dst = *(_OWORD *)&v1073.__r_.__value_.__r.__words[1],
                    v1073.__r_.__value_.__r.__words[2] == 3))
              {
                v284 = v1067;
                v285 = __pc;
                if (!llvm::StringRef::compare_insensitive((unsigned __int8 **)__dst, "ptr", 3uLL))
                  goto LABEL_608;
              }
              else
              {
                v284 = v1067;
                v285 = __pc;
              }
LABEL_599:
              (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v284 + 184))(v284);
              v339 = *((_QWORD *)&v1080 + 1);
              v338 = (char *)v1080;
              v340 = v284;
              v341 = (uint64_t)v285;
              v342 = v1040;
              v343 = 2;
              goto LABEL_606;
            case 11:
            case 21:
              goto LABEL_599;
            case 12:
              if (LODWORD(v1073.__r_.__value_.__l.__data_) == 2
                && (*(_OWORD *)__dst = *(_OWORD *)&v1073.__r_.__value_.__r.__words[1],
                    v1073.__r_.__value_.__r.__words[2] == 3))
              {
                v284 = v1067;
                v285 = __pc;
                if (!llvm::StringRef::compare_insensitive((unsigned __int8 **)__dst, "ptr", 3uLL))
                  goto LABEL_608;
              }
              else
              {
                v284 = v1067;
                v285 = __pc;
              }
LABEL_603:
              (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v284 + 184))(v284);
              v339 = *((_QWORD *)&v1080 + 1);
              v338 = (char *)v1080;
              v340 = v284;
              v341 = (uint64_t)v285;
              v342 = v1040;
              v343 = 4;
              goto LABEL_606;
            case 13:
            case 18:
              goto LABEL_603;
            case 14:
              if (LODWORD(v1073.__r_.__value_.__l.__data_) == 2
                && (*(_OWORD *)__dst = *(_OWORD *)&v1073.__r_.__value_.__r.__words[1],
                    v1073.__r_.__value_.__r.__words[2] == 3))
              {
                v284 = v1067;
                v285 = __pc;
                if (!llvm::StringRef::compare_insensitive((unsigned __int8 **)__dst, "ptr", 3uLL))
                  goto LABEL_608;
              }
              else
              {
                v284 = v1067;
                v285 = __pc;
              }
LABEL_597:
              (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v284 + 184))(v284);
              v339 = *((_QWORD *)&v1080 + 1);
              v338 = (char *)v1080;
              v340 = v284;
              v341 = (uint64_t)v285;
              v342 = v1040;
              v343 = 6;
              goto LABEL_606;
            case 15:
              if (LODWORD(v1073.__r_.__value_.__l.__data_) == 2
                && (*(_OWORD *)__dst = *(_OWORD *)&v1073.__r_.__value_.__r.__words[1],
                    v1073.__r_.__value_.__r.__words[2] == 3))
              {
                v284 = v1067;
                v285 = __pc;
                if (!llvm::StringRef::compare_insensitive((unsigned __int8 **)__dst, "ptr", 3uLL))
                  goto LABEL_608;
              }
              else
              {
                v284 = v1067;
                v285 = __pc;
              }
LABEL_605:
              (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v284 + 184))(v284);
              v339 = *((_QWORD *)&v1080 + 1);
              v338 = (char *)v1080;
              v340 = v284;
              v341 = (uint64_t)v285;
              v342 = v1040;
              v343 = 8;
LABEL_606:
              v203 = sub_1C610CB30(v340, v341, v342, v343, v338, v339);
              goto LABEL_460;
            case 16:
            case 20:
              goto LABEL_605;
            case 19:
              goto LABEL_597;
            case 22:
              (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 184))(v1067);
              v320 = *((_QWORD *)&v1080 + 1);
              v319 = (char *)v1080;
              v321 = (unsigned int *)&unk_1C866F184;
              v322 = v1067;
              v323 = (uint64_t)__pc;
              v324 = v1040;
              v325 = 4;
              goto LABEL_566;
            case 23:
              (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 184))(v1067);
              v320 = *((_QWORD *)&v1080 + 1);
              v319 = (char *)v1080;
              v321 = (unsigned int *)&unk_1C866F198;
              v322 = v1067;
              v323 = (uint64_t)__pc;
              v324 = v1040;
              v325 = 8;
              goto LABEL_566;
            case 24:
              (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 184))(v1067);
              v320 = *((_QWORD *)&v1080 + 1);
              v319 = (char *)v1080;
              v321 = (unsigned int *)&unk_1C866F1FC;
              v322 = v1067;
              v323 = (uint64_t)__pc;
              v324 = v1040;
              v325 = 10;
LABEL_566:
              v203 = sub_1C610CCC8(v322, v323, v324, v321, v325, v319, v320);
              goto LABEL_460;
            default:
              goto LABEL_608;
          }
        }
        if (v286 == 98)
        {
          v326 = v1067;
          (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 184))(v1067);
          v327 = v1080;
          v1018 = v1081;
          v1115 = 0uLL;
          v1116 = 0;
          if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v326 + 40))(v326) + 8) == 9)
          {
LABEL_576:
            sub_1C60E57B0(v1043);
            memset(v1090, 0, 24);
            if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v326 + 40))(v326) + 8) == 2)
            {
              v328 = *(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067) + 8);
              if (*(_DWORD *)v328 == 2)
              {
                v329 = *(_QWORD *)(v328 + 8);
                v330 = *(_QWORD *)(v328 + 16);
              }
              else
              {
                v329 = *(_QWORD *)(v328 + 8);
                v402 = *(_QWORD *)(v328 + 16);
                v403 = v402 - 1;
                v404 = v402 != 0;
                if (v402)
                  ++v329;
                if (v404 > v403)
                  v403 = v402 != 0;
                if (v402 < v403)
                  v403 = v402;
                v330 = v403 - v404;
              }
              *(_QWORD *)__dst = v329;
              *(_QWORD *)&__dst[8] = v330;
              if (v330 == 5
                && !llvm::StringRef::compare_insensitive((unsigned __int8 **)__dst, "local", 5uLL))
              {
                (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 184))(v1067);
                *(_OWORD *)&__str[0].__r_.__value_.__l.__data_ = 0uLL;
                if (((*(uint64_t (**)(llvm::MCAsmParser *, std::string *))(*(_QWORD *)v1067 + 192))(v1067, __str) & 1) != 0)
                {
LABEL_1128:
                  LOBYTE(v9) = 1;
                  goto LABEL_1938;
                }
                while (1)
                {
                  sub_1C5E3DEA4(v1106, __str[0].__r_.__value_.__l.__data_, (uint64_t (*)(_QWORD))sub_1C5E3C6A8, (char *)(__str[0].__r_.__value_.__r.__words[0] + __str[0].__r_.__value_.__l.__size_), (uint64_t)sub_1C5E3C6A8, __str[0].__r_.__value_.__l.__size_);
                  v592 = *(_QWORD *)&v1090[16];
                  v591 = *(_OWORD **)&v1090[8];
                  if (*(_QWORD *)&v1090[8] >= *(_QWORD *)&v1090[16])
                  {
                    v594 = *(_OWORD **)v1090;
                    v595 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v1090[8] - *(_QWORD *)v1090) >> 3);
                    v596 = v595 + 1;
                    if (v595 + 1 > 0xAAAAAAAAAAAAAAALL)
                      goto LABEL_1877;
                    if (0x5555555555555556 * ((uint64_t)(*(_QWORD *)&v1090[16] - *(_QWORD *)v1090) >> 3) > v596)
                      v596 = 0x5555555555555556 * ((uint64_t)(*(_QWORD *)&v1090[16] - *(_QWORD *)v1090) >> 3);
                    v597 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)&v1090[16] - *(_QWORD *)v1090) >> 3) >= 0x555555555555555
                         ? 0xAAAAAAAAAAAAAAALL
                         : v596;
                    *(_QWORD *)&__dst[32] = &v1090[16];
                    if (v597)
                    {
                      if (v597 > 0xAAAAAAAAAAAAAAALL)
                        goto LABEL_1878;
                      v598 = (char *)operator new(24 * v597);
                    }
                    else
                    {
                      v598 = 0;
                    }
                    v599 = &v598[24 * v595];
                    *(_OWORD *)v599 = *(_OWORD *)v1106;
                    *((_QWORD *)v599 + 2) = *(_QWORD *)&v1106[16];
                    memset(v1106, 0, 24);
                    if (v591 == v594)
                    {
                      v600 = vdupq_n_s64((unint64_t)v591);
                      v601 = &v598[24 * v595];
                    }
                    else
                    {
                      v601 = &v598[24 * v595];
                      do
                      {
                        v602 = *(_OWORD *)((char *)v591 - 24);
                        *((_QWORD *)v601 - 1) = *((_QWORD *)v591 - 1);
                        *(_OWORD *)(v601 - 24) = v602;
                        v601 -= 24;
                        *((_QWORD *)v591 - 2) = 0;
                        *((_QWORD *)v591 - 1) = 0;
                        *((_QWORD *)v591 - 3) = 0;
                        v591 = (_OWORD *)((char *)v591 - 24);
                      }
                      while (v591 != v594);
                      v600 = *(int64x2_t *)v1090;
                      v592 = *(_QWORD *)&v1090[16];
                    }
                    v603 = v599 + 24;
                    *(_QWORD *)v1090 = v601;
                    *(_QWORD *)&v1090[8] = v599 + 24;
                    *(int64x2_t *)&__dst[8] = v600;
                    *(_QWORD *)&v1090[16] = &v598[24 * v597];
                    *(_QWORD *)&__dst[24] = v592;
                    *(_QWORD *)__dst = v600.i64[0];
                    sub_1C4D868F0((uint64_t)__dst);
                    *(_QWORD *)&v1090[8] = v603;
                    if ((v1106[23] & 0x80000000) != 0)
                      operator delete(*(void **)v1106);
                  }
                  else
                  {
                    v593 = *(_OWORD *)v1106;
                    *(_QWORD *)(*(_QWORD *)&v1090[8] + 16) = *(_QWORD *)&v1106[16];
                    *v591 = v593;
                    *(_QWORD *)&v1090[8] = (char *)v591 + 24;
                  }
                  if (!llvm::MCAsmParser::parseOptionalToken(v1067, 25))
                    break;
                  llvm::MCAsmParser::parseOptionalToken(v1067, 9);
                  if (((*(uint64_t (**)(llvm::MCAsmParser *, std::string *))(*(_QWORD *)v1067 + 192))(v1067, __str) & 1) != 0)goto LABEL_1128;
                }
              }
            }
            memset(&__str[0].__r_.__value_.__r.__words[1], 0, sizeof(std::string));
            LODWORD(__str[1].__r_.__value_.__r.__words[1]) = 1;
            v405 = *(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067) + 8);
            v1015 = *(_QWORD *)(v405 + 8);
            v1035 = *(unsigned int *)(v405 + 32);
            if (v1035 > 0x40)
            {
              v1022 = (void *)operator new[]();
              memcpy(v1022, *(const void **)(v405 + 24), ((unint64_t)(v1035 + 63) >> 3) & 0x3FFFFFF8);
            }
            else
            {
              v1022 = *(void **)(v405 + 24);
            }
            v406 = 0;
            v407 = 0;
            while (1)
            {
              while (**__s1 == 1)
                sub_1C60E57B0(v1043);
              if (!**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067) + 8))
              {
                *(_QWORD *)__dst = "no matching 'endm' in definition";
                *(_WORD *)&__dst[32] = 259;
                LOBYTE(v9) = llvm::MCAsmParser::Error((uint64_t)v1067, (uint64_t)v1018, (uint64_t)__dst, 0, 0);
                v1027 = 0;
                __s1e = 1;
                goto LABEL_1932;
              }
              if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067) + 8) == 2)
              {
                v408 = *(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067) + 8);
                if (*(_DWORD *)v408 == 2)
                {
                  v409 = *(_QWORD *)(v408 + 8);
                  v410 = *(_QWORD *)(v408 + 16);
                }
                else
                {
                  v409 = *(_QWORD *)(v408 + 8);
                  v411 = *(_QWORD *)(v408 + 16);
                  v412 = v411 - 1;
                  v413 = v411 != 0;
                  if (v411)
                    ++v409;
                  if (v413 > v412)
                    v412 = v411 != 0;
                  if (v411 < v412)
                    v412 = v411;
                  v410 = v412 - v413;
                }
                *(_QWORD *)__dst = v409;
                *(_QWORD *)&__dst[8] = v410;
                if (v410 == 4
                  && !llvm::StringRef::compare_insensitive((unsigned __int8 **)__dst, "endm", 4uLL))
                {
                  if (!v407)
                  {
                    v421 = *(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067)
                                     + 8);
                    __str[0] = *(std::string *)v421;
                    __s1e = *(_DWORD *)(v421 + 32);
                    if (__s1e > 0x40)
                    {
                      llvm::APInt::reallocate((uint64_t)&__str[1], __s1e);
                      __s1e = __str[1].__r_.__value_.__r.__words[1];
                      if (LODWORD(__str[1].__r_.__value_.__r.__words[1]) <= 0x40)
                      {
                        v1027 = *(std::string::pointer *)(v421 + 24);
                        __str[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v1027;
                      }
                      else
                      {
                        v1027 = __str[1].__r_.__value_.__l.__data_;
                        memcpy(__str[1].__r_.__value_.__l.__data_, *(const void **)(v421 + 24), (((unint64_t)LODWORD(__str[1].__r_.__value_.__r.__words[1]) + 63) >> 3) & 0x3FFFFFF8);
                      }
                    }
                    else
                    {
                      v1027 = *(std::string::pointer *)(v421 + 24);
                      __str[1].__r_.__value_.__r.__words[0] = (std::string::size_type)v1027;
                      LODWORD(__str[1].__r_.__value_.__r.__words[1]) = __s1e;
                    }
                    sub_1C60E57B0(v1043);
                    if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067)
                                     + 8) == 9)
                    {
                      v422 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 48))(v1067);
                      sub_1C5E3DEA4(__dst, (char *)v327, (uint64_t (*)(_QWORD))sub_1C5E3C6A8, (char *)(v327 + *((_QWORD *)&v327 + 1)), (uint64_t)sub_1C5E3C6A8, *((unint64_t *)&v327 + 1));
                      v1013 = __dst[23];
                      v1012 = *(void **)__dst;
                      if (__dst[23] >= 0)
                        v423 = __dst;
                      else
                        v423 = *(unsigned __int8 **)__dst;
                      if (__dst[23] >= 0)
                        v424 = __dst[23] & 0x7F;
                      else
                        v424 = *(_QWORD *)&__dst[8];
                      v1046 = *(unsigned int *)(v422 + 1976);
                      if ((_DWORD)v1046)
                      {
                        v425 = 0;
                        if (v424)
                        {
                          v426 = v424;
                          v427 = v423;
                          do
                          {
                            v428 = *v427++;
                            v425 = 33 * v425 + v428;
                            --v426;
                          }
                          while (v426);
                        }
                        v429 = *(_QWORD *)(v422 + 1968);
                        v430 = *(unsigned int *)(v422 + 1988);
                        v431 = 1;
                        v432 = v425;
                        while (1)
                        {
                          v433 = v432 & (v1046 - 1);
                          v434 = *(_QWORD **)(v429 + 8 * v433);
                          if (v434 != (_QWORD *)-8)
                          {
                            if (!v434)
                              goto LABEL_1913;
                            if (*(_DWORD *)(v429 + 8 * v1046 + 8 + 4 * v433) == v425
                              && v424 == *v434
                              && (!v424 || !memcmp(v423, (char *)v434 + v430, v424)))
                            {
                              break;
                            }
                          }
                          v432 = v431 + v433;
                          ++v431;
                        }
                      }
                      else
                      {
                        v1046 = 0;
LABEL_1913:
                        LODWORD(v433) = -1;
                      }
                      v983 = (_DWORD)v433 == -1 || v1046 == (int)v433;
                      if (v1013 < 0)
                        operator delete(v1012);
                      if (v983)
                      {
                        v984 = v1116;
                        *(_OWORD *)v1019 = v1115;
                        v1116 = 0;
                        v1115 = 0uLL;
                        v985 = *(_QWORD *)&v1090[16];
                        v1014 = *(_OWORD *)v1090;
                        memset(v1090, 0, 24);
                        *(_OWORD *)__dst = v327;
                        *(_QWORD *)&__dst[16] = v1015;
                        *(_QWORD *)&__dst[24] = __str[0].__r_.__value_.__l.__size_ - v1015;
                        v1087[0] = 0;
                        v1087[1] = 0;
                        *(_QWORD *)&v1088 = 0;
                        memset(&v1085, 0, sizeof(v1085));
                        v1103 = v406 & 1;
                        v1112 = &v1085;
                        sub_1C4765410((void ***)&v1112);
                        v1112 = (std::string *)v1087;
                        sub_1C5934A04((void ***)&v1112);
                        v986 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 48))(v1067);
                        sub_1C5E3DEA4(&v1112, (char *)v327, (uint64_t (*)(_QWORD))sub_1C5E3C6A8, (char *)(v327 + *((_QWORD *)&v327 + 1)), (uint64_t)sub_1C5E3C6A8, *((unint64_t *)&v327 + 1));
                        if ((v1114 & 0x8000000000000000) == 0)
                          v987 = (std::string *)&v1112;
                        else
                          v987 = v1112;
                        if ((v1114 & 0x8000000000000000) == 0)
                          v988 = HIBYTE(v1114) & 0x7F;
                        else
                          v988 = (size_t)v1113;
                        *(_OWORD *)v1106 = *(_OWORD *)__dst;
                        *(_OWORD *)&v1106[16] = *(_OWORD *)&__dst[16];
                        v1107 = *(_OWORD *)v1019;
                        *(_QWORD *)&__dst[40] = 0;
                        *(_QWORD *)&__dst[32] = 0;
                        memset(v1102, 0, sizeof(v1102));
                        v1101 = 0;
                        v1109 = v1014;
                        v1108 = v984;
                        v1110 = v985;
                        v1111 = v406 & 1;
                        sub_1C60EAF2C(v986, (unsigned __int8 *)v987, v988, (uint64_t)v1106);
                        v1083 = (uint64_t)&v1109;
                        sub_1C4765410((void ***)&v1083);
                        v1083 = (uint64_t)&v1107;
                        sub_1C5934A04((void ***)&v1083);
                        if (SHIBYTE(v1114) < 0)
                          operator delete(v1112);
                        v1112 = (std::string *)v1102;
                        sub_1C4765410((void ***)&v1112);
                        v1112 = (std::string *)&__dst[32];
                        sub_1C5934A04((void ***)&v1112);
                        LOBYTE(v9) = 0;
                      }
                      else
                      {
                        LOWORD(v1107) = 1283;
                        *(_QWORD *)v1106 = "macro '";
                        *(_OWORD *)&v1106[16] = v327;
                        *(_QWORD *)__dst = v1106;
                        *(_QWORD *)&__dst[16] = "' is already defined";
                        *(_WORD *)&__dst[32] = 770;
                        LOBYTE(v9) = llvm::MCAsmParser::Error((uint64_t)v1067, (uint64_t)v1018, (uint64_t)__dst, 0, 0);
                      }
                    }
                    else
                    {
                      if (LODWORD(__str[0].__r_.__value_.__l.__data_) == 2)
                      {
                        v642 = __str[0].__r_.__value_.__r.__words[2];
                        v641 = __str[0].__r_.__value_.__l.__size_;
                      }
                      else
                      {
                        v658 = __str[0].__r_.__value_.__r.__words[2];
                        v641 = __str[0].__r_.__value_.__l.__size_;
                        v659 = __str[0].__r_.__value_.__r.__words[2] - 1;
                        v660 = __str[0].__r_.__value_.__r.__words[2] != 0;
                        if (__str[0].__r_.__value_.__r.__words[2])
                          v641 = __str[0].__r_.__value_.__l.__size_ + 1;
                        if (v660 > v659)
                          v659 = __str[0].__r_.__value_.__r.__words[2] != 0;
                        if (__str[0].__r_.__value_.__r.__words[2] >= v659)
                          v658 = v659;
                        v642 = v658 - v660;
                      }
                      LOWORD(v1107) = 1283;
                      *(_QWORD *)v1106 = "unexpected token in '";
                      *(_QWORD *)&v1106[16] = v641;
                      *(_QWORD *)&v1106[24] = v642;
                      *(_QWORD *)__dst = v1106;
                      *(_QWORD *)&__dst[16] = "' directive";
                      *(_WORD *)&__dst[32] = 770;
                      v661 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067);
                      llvm::MCAsmParser::Error((uint64_t)v1067, *(_QWORD *)(v661 + 96), (uint64_t)__dst, 0, 0);
                      LOBYTE(v9) = 1;
                    }
LABEL_1932:
                    if (v1035 >= 0x41 && v1022)
                      MEMORY[0x1CAA32F9C](v1022, 0x1000C8000313F17);
                    if (__s1e >= 0x41 && v1027)
                      MEMORY[0x1CAA32F9C](v1027, 0x1000C8000313F17);
LABEL_1938:
                    *(_QWORD *)__dst = v1090;
                    sub_1C4765410((void ***)__dst);
LABEL_1939:
                    *(_QWORD *)__dst = &v1115;
                    sub_1C5934A04((void ***)__dst);
LABEL_461:
                    if (v1075 >= 0x41 && v1074)
                      MEMORY[0x1CAA32F9C](v1074, 0x1000C8000313F17);
                    if (v1030 >= 0x41 && v1023)
                      MEMORY[0x1CAA32F9C](v1023, 0x1000C8000313F17);
                    goto LABEL_215;
                  }
                  --v407;
                }
                else
                {
                  v414 = *(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067)
                                   + 8);
                  if (*(_DWORD *)v414 == 2)
                  {
                    v415 = *(_QWORD *)(v414 + 8);
                    v416 = *(_QWORD *)(v414 + 16);
                  }
                  else
                  {
                    v415 = *(_QWORD *)(v414 + 8);
                    v417 = *(_QWORD *)(v414 + 16);
                    v418 = v417 - 1;
                    v419 = v417 != 0;
                    if (v417)
                      ++v415;
                    if (v419 > v418)
                      v418 = v417 != 0;
                    if (v417 < v418)
                      v418 = v417;
                    v416 = v418 - v419;
                  }
                  *(_QWORD *)__dst = v415;
                  *(_QWORD *)&__dst[8] = v416;
                  if (v416 == 5
                    && !llvm::StringRef::compare_insensitive((unsigned __int8 **)__dst, "exitm", 5uLL))
                  {
                    if (v407)
                    {
                      v420 = 0;
                    }
                    else
                    {
                      sub_1C610C428((uint64_t)__dst, (uint64_t)v1067, 1);
                      v420 = *(_DWORD *)__dst != 9;
                      if (*(_DWORD *)&__dst[32] >= 0x41u && *(_QWORD *)&__dst[24])
                        MEMORY[0x1CAA32F9C](*(_QWORD *)&__dst[24], 0x1000C8000313F17);
                    }
                    v406 |= v420;
                  }
                  else
                  {
                    v407 += sub_1C6112CA8((uint64_t)v1067);
                  }
                }
              }
              (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 224))(v1067);
            }
          }
          while (1)
          {
            if ((_QWORD)v1115 != *((_QWORD *)&v1115 + 1) && *(_BYTE *)(*((_QWORD *)&v1115 + 1) - 7))
            {
              v664 = *((_QWORD *)v326 + 17);
              LOWORD(v1107) = 1283;
              *(_QWORD *)v1106 = "Vararg parameter '";
              *(_OWORD *)&v1106[16] = *(_OWORD *)(*((_QWORD *)&v1115 + 1) - 48);
              *(_QWORD *)__dst = v1106;
              *(_QWORD *)&__dst[16] = "' should be last in the list of parameters";
              *(_WORD *)&__dst[32] = 770;
              LOBYTE(v9) = llvm::MCAsmParser::Error((uint64_t)v326, v664, (uint64_t)__dst, 0, 0);
              goto LABEL_1939;
            }
            memset(__dst, 0, 42);
            if ((*(unsigned int (**)(llvm::MCAsmParser *, _BYTE *))(*(_QWORD *)v326 + 192))(v326, __dst))
              break;
            v389 = *((_QWORD *)&v1115 + 1);
            v390 = v1115;
            if ((_QWORD)v1115 != *((_QWORD *)&v1115 + 1))
            {
              v391 = *(_QWORD *)&__dst[8];
              v392 = *(unsigned __int8 **)__dst;
              while (*(_QWORD *)(v390 + 8) != v391
                   || llvm::StringRef::compare_insensitive((unsigned __int8 **)v390, v392, v391))
              {
                v390 += 48;
                if (v390 == v389)
                  goto LABEL_717;
              }
              v1089 = 1283;
              v1087[0] = "macro '";
              v1088 = v327;
              *(_QWORD *)v1090 = v1087;
              *(_QWORD *)&v1090[16] = "' has multiple parameters named '";
              v435 = 770;
              LOWORD(v1091) = 770;
              __str[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v1090;
              __str[0].__r_.__value_.__r.__words[2] = (std::string::size_type)v392;
              __str[1].__r_.__value_.__r.__words[0] = v391;
              LOWORD(__str[1].__r_.__value_.__r.__words[1]) = 1282;
              *(_QWORD *)v1106 = __str;
              *(_QWORD *)&v1106[16] = "'";
LABEL_837:
              LOWORD(v1107) = v435;
              v436 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v326 + 40))(v326);
              llvm::MCAsmParser::Error((uint64_t)v326, *(_QWORD *)(v436 + 96), (uint64_t)v1106, 0, 0);
LABEL_838:
              LOBYTE(v9) = 1;
              goto LABEL_839;
            }
LABEL_717:
            if (**__s1 == 10)
            {
              (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v326 + 184))(v326);
              if (llvm::MCAsmParser::parseOptionalToken(v326, 27))
              {
                v326 = v1067;
                if ((sub_1C610F540((uint64_t)v1067, 0, (uint64_t)&__dst[16], 9) & 1) != 0)
                  goto LABEL_838;
              }
              else
              {
                v1112 = 0;
                v1113 = 0;
                v395 = *((_QWORD *)v1067 + 17);
                if ((*(unsigned int (**)(llvm::MCAsmParser *, std::string **))(*(_QWORD *)v1067 + 192))(v1067, &v1112))
                {
                  v1089 = 1283;
                  v1087[0] = "missing parameter qualifier for '";
                  v1088 = *(_OWORD *)__dst;
                  *(_QWORD *)v1090 = v1087;
                  *(_QWORD *)&v1090[16] = "' in macro '";
                  LOWORD(v1091) = 770;
                  __str[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v1090;
                  *(_OWORD *)&__str[0].__r_.__value_.__r.__words[2] = v327;
                  LOWORD(__str[1].__r_.__value_.__r.__words[1]) = 1282;
                  *(_QWORD *)v1106 = __str;
                  *(_QWORD *)&v1106[16] = "'";
                  LOWORD(v1107) = 770;
LABEL_1751:
                  LOBYTE(v9) = llvm::MCAsmParser::Error((uint64_t)v1067, v395, (uint64_t)v1106, 0, 0);
LABEL_839:
                  *(_QWORD *)v1106 = &__dst[16];
                  sub_1C5934A7C((void ***)v1106);
                  goto LABEL_1939;
                }
                v396 = (std::string::size_type)v1113;
                if (v1113 == (std::string *)6)
                {
                  if (llvm::StringRef::compare_insensitive((unsigned __int8 **)&v1112, "vararg", 6uLL))
                    goto LABEL_1712;
                  __dst[41] = 1;
                }
                else
                {
                  if (v1113 != (std::string *)3
                    || llvm::StringRef::compare_insensitive((unsigned __int8 **)&v1112, "req", 3uLL))
                  {
LABEL_1712:
                    v1086 = 773;
                    v1085.__r_.__value_.__r.__words[0] = (std::string::size_type)v1112;
                    v1085.__r_.__value_.__l.__size_ = v396;
                    v1085.__r_.__value_.__r.__words[2] = (std::string::size_type)" is not a valid parameter qualifier for '";
                    v1087[0] = &v1085;
                    v1088 = *(_OWORD *)__dst;
                    v1089 = 1282;
                    *(_QWORD *)v1090 = v1087;
                    *(_QWORD *)&v1090[16] = "' in macro '";
                    LOWORD(v1091) = 770;
                    __str[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v1090;
                    *(_OWORD *)&__str[0].__r_.__value_.__r.__words[2] = v327;
                    LOWORD(__str[1].__r_.__value_.__r.__words[1]) = 1282;
                    *(_QWORD *)v1106 = __str;
                    *(_QWORD *)&v1106[16] = "'";
                    LOWORD(v1107) = 770;
                    goto LABEL_1751;
                  }
                  __dst[40] = 1;
                }
                v326 = v1067;
              }
            }
            v393 = *((_QWORD *)&v1115 + 1);
            if (*((_QWORD *)&v1115 + 1) >= v1116)
            {
              v394 = sub_1C60EAFC0((uint64_t *)&v1115, (uint64_t)__dst);
            }
            else
            {
              **((_OWORD **)&v1115 + 1) = *(_OWORD *)__dst;
              *(_QWORD *)(v393 + 24) = 0;
              *(_QWORD *)(v393 + 32) = 0;
              *(_QWORD *)(v393 + 16) = 0;
              *(_OWORD *)(v393 + 16) = *(_OWORD *)&__dst[16];
              *(_QWORD *)(v393 + 32) = *(_QWORD *)&__dst[32];
              memset(&__dst[16], 0, 24);
              *(_WORD *)(v393 + 40) = *(_WORD *)&__dst[40];
              v394 = v393 + 48;
            }
            *((_QWORD *)&v1115 + 1) = v394;
            if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v326 + 40))(v326) + 8) == 25)
              (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v326 + 184))(v326);
            *(_QWORD *)v1106 = &__dst[16];
            sub_1C5934A7C((void ***)v1106);
            if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v326 + 40))(v326) + 8) == 9)
              goto LABEL_576;
          }
          *(_QWORD *)v1106 = "expected identifier in 'macro' directive";
          v435 = 259;
          goto LABEL_837;
        }
        if (v286 == 116)
        {
LABEL_347:
          (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 184))(v1067);
          v203 = sub_1C610C724((uint64_t)v1067, (unsigned __int8 *)v1080, *((unint64_t *)&v1080 + 1), (uint64_t)v1081);
LABEL_460:
          LOBYTE(v9) = v203;
          goto LABEL_461;
        }
        v284 = v1067;
        v285 = __pc;
        if ((v286 - 114) >= 2)
        {
LABEL_608:
          sub_1C5E3DEA4(__dst, v285, (uint64_t (*)(_QWORD))sub_1C5E3C6A8, v1020, (uint64_t)sub_1C5E3C6A8, v1040);
          v344 = __dst[23];
          __s1d = *(void **)__dst;
          if (__dst[23] >= 0)
            v345 = __dst;
          else
            v345 = *(unsigned __int8 **)__dst;
          if (__dst[23] >= 0)
            v346 = __dst[23] & 0x7F;
          else
            v346 = *(_QWORD *)&__dst[8];
          v347 = *((unsigned int *)v284 + 156);
          if ((_DWORD)v347)
          {
            v348 = 0;
            if (v346)
            {
              v349 = v346;
              v350 = v345;
              do
              {
                v351 = *v350++;
                v348 = 33 * v348 + v351;
                --v349;
              }
              while (v349);
            }
            v352 = *((_QWORD *)v284 + 77);
            v353 = 1;
            v354 = v348;
            while (1)
            {
              v355 = v354 & (v347 - 1);
              v356 = *(_QWORD **)(v352 + 8 * v355);
              if (v356 != (_QWORD *)-8)
              {
                if (!v356)
                {
                  v357 = v347;
                  goto LABEL_627;
                }
                if (*(_DWORD *)(v352 + 8 * v347 + 8 + 4 * v355) == v348
                  && v346 == *v356
                  && (!v346 || !memcmp(v345, (char *)v356 + *((unsigned int *)v1067 + 159), v346)))
                {
                  break;
                }
              }
              v354 = v353 + v355;
              ++v353;
            }
            v357 = (int)v355;
            if ((_DWORD)v355 == -1)
              v357 = v347;
          }
          else
          {
            v357 = 0;
            v352 = *((_QWORD *)v284 + 77);
          }
LABEL_627:
          v358 = (uint64_t *)(v352 + 8 * v357);
          v359 = v1067;
          if (v344 < 0)
          {
            operator delete(__s1d);
            v352 = *((_QWORD *)v1067 + 77);
            LODWORD(v347) = *((_DWORD *)v1067 + 156);
          }
          if (v358 != (uint64_t *)(v352 + 8 * v347))
          {
            (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 184))(v1067);
            v360 = *v358;
            v361 = v1080;
            if (*((_DWORD *)v1067 + 128))
            {
              if (sub_1C6113938((uint64_t)v1067, (char *)v1080, *((unint64_t *)&v1080 + 1), v360 + 8))goto LABEL_852;
            }
            else
            {
              v370 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 48))(v1067);
              *(_WORD *)&__dst[32] = 261;
              *(_OWORD *)__dst = v361;
              v371 = llvm::MCContext::getOrCreateSymbol(v370, (uint64_t)__dst);
              v372 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 56))(v1067);
              (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v372 + 192))(v372, v371, 0);
              *(_DWORD *)v1106 = 0;
              if (sub_1C6113804(v1067, (uint64_t *)(v360 + 8), v1106))
                goto LABEL_686;
              v373 = *(_QWORD *)(v360 + 8);
              v374 = *(_QWORD *)(v360 + 16);
              v375 = *(_DWORD *)(v360 + 40);
              v376 = *(_DWORD *)v1106;
              v377 = *(_DWORD *)v1106 * v375;
              sub_1C5E3DEA4(__dst, (char *)v361, (uint64_t (*)(_QWORD))sub_1C5E3C6A8, (char *)(v361 + *((_QWORD *)&v361 + 1)), (uint64_t)sub_1C5E3C6A8, *((unint64_t *)&v361 + 1));
              if (__dst[23] >= 0)
                v378 = __dst;
              else
                v378 = *(unsigned __int8 **)__dst;
              if (__dst[23] >= 0)
                v379 = __dst[23] & 0x7F;
              else
                v379 = *(_QWORD *)&__dst[8];
              v380 = *sub_1C61163C8((llvm::MCAsmParser *)((char *)v1067 + 648), v378, v379);
              *(_QWORD *)(v380 + 8) = v373;
              *(_QWORD *)(v380 + 16) = v374;
              *(_DWORD *)(v380 + 24) = v377;
              *(_DWORD *)(v380 + 28) = v375;
              *(_DWORD *)(v380 + 32) = v376;
              if ((__dst[23] & 0x80000000) != 0)
                operator delete(*(void **)__dst);
            }
LABEL_632:
            LOBYTE(v9) = 0;
            goto LABEL_461;
          }
          if (*((_BYTE *)v1067 + 1061))
          {
            if (*((_QWORD *)&v1080 + 1) == 4)
            {
              v359 = v1067;
              if (*(_DWORD *)v1080 == 1852143205 || *(_DWORD *)v1080 == 1313166917)
              {
                v449 = *(_QWORD *)(v1032 + 120);
                *(_DWORD *)__dst = 1;
                *(_DWORD *)v1106 = 4;
                sub_1C63E9B1C(v449, (int *)__dst, (uint64_t *)&v1081, (int *)v1106);
              }
            }
            else
            {
              if (*((_QWORD *)&v1080 + 1) != 6)
              {
                v359 = v1067;
                if (*((_QWORD *)&v1080 + 1) != 5)
                  goto LABEL_685;
                if ((*(_DWORD *)v1080 != 1768777055 || *(_BYTE *)(v1080 + 4) != 116)
                  && (*(_DWORD *)v1080 != 1229800799 || *(_BYTE *)(v1080 + 4) != 84))
                {
                  if ((*(_DWORD *)v1080 != 1734962273 || *(_BYTE *)(v1080 + 4) != 110)
                    && (*(_DWORD *)v1080 != 1195985985 || *(_BYTE *)(v1080 + 4) != 78))
                  {
                    goto LABEL_685;
                  }
                  *(_QWORD *)v1106 = v1081;
                  __str[0].__r_.__value_.__r.__words[0] = 0;
                  v366 = *(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067)
                                   + 96);
                  *(_QWORD *)__dst = 0;
                  if (((*(uint64_t (**)(llvm::MCAsmParser *, std::string *, _BYTE *))(*(_QWORD *)v1067 + 232))(v1067, __str, __dst) & 1) != 0)goto LABEL_686;
                  if (*__str[0].__r_.__value_.__l.__data_ == 1)
                  {
                    v367 = *(_QWORD *)(__str[0].__r_.__value_.__r.__words[0] + 16);
                    v368 = (uint8x8_t)vcnt_s8((int8x8_t)v367);
                    v368.i16[0] = vaddlv_u8(v368);
                    if (v368.u32[0] == 1)
                    {
                      v369 = *(_QWORD *)(v1032 + 120);
                      *(_DWORD *)__dst = 0;
                      *(_DWORD *)v1090 = 5;
                      LODWORD(v1087[0]) = 63 - __clz(v367);
                      sub_1C63EA2F4(v369, (int *)__dst, (uint64_t *)v1106, (int *)v1090, (unsigned int *)v1087);
                      goto LABEL_632;
                    }
                    v630 = "literal value not a power of two greater then zero";
                  }
                  else
                  {
                    v630 = "unexpected expression in align";
                  }
LABEL_1420:
                  *(_QWORD *)__dst = v630;
                  *(_WORD *)&__dst[32] = 259;
                  v337 = (uint64_t)v1067;
                  v336 = v366;
                  goto LABEL_1421;
                }
LABEL_679:
                *(_QWORD *)v1106 = v1081;
                __str[0].__r_.__value_.__r.__words[0] = *((_QWORD *)&v1080 + 1);
                *(_QWORD *)v1090 = 0;
                v366 = *(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v359 + 40))(v359) + 96);
                *(_QWORD *)__dst = 0;
                if (((*(uint64_t (**)(llvm::MCAsmParser *, _BYTE *, _BYTE *))(*(_QWORD *)v359 + 232))(v359, v1090, __dst) & 1) != 0)goto LABEL_686;
                if (**(_BYTE **)v1090 == 1)
                {
                  if ((unint64_t)(*(_QWORD *)(*(_QWORD *)v1090 + 16) + 128) < 0x180)
                  {
                    v383 = *(_QWORD *)(v1032 + 120);
                    *(_DWORD *)__dst = 2;
                    sub_1C63EA1BC(v383, (int *)__dst, (uint64_t *)v1106, (uint64_t *)__str);
                    goto LABEL_632;
                  }
                  v630 = "literal value out of range for directive";
                }
                else
                {
                  v630 = "unexpected expression in _emit";
                }
                goto LABEL_1420;
              }
              v381 = *(_DWORD *)v1080 == 1835360095 && *(_WORD *)(v1080 + 4) == 29801;
              v359 = v1067;
              if (v381)
                goto LABEL_679;
              if (*(_DWORD *)v1080 == 1296392031 && *(_WORD *)(v1080 + 4) == 21577)
                goto LABEL_679;
            }
          }
LABEL_685:
          if (((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v359 + 264))(v359) & 1) == 0)
          {
            sub_1C5E3DEA4(v1090, (char *)v1080, (uint64_t (*)(_QWORD))sub_1C5E3C6A8, (char *)(v1080 + *((_QWORD *)&v1080 + 1)), (uint64_t)sub_1C5E3C6A8, *((unint64_t *)&v1080 + 1));
            v1085.__r_.__value_.__r.__words[0] = *(_QWORD *)(v1032 + 120);
            v384 = *((_QWORD *)v359 + 1);
            if (v1090[23] >= 0)
              v385 = v1090;
            else
              v385 = *(_BYTE **)v1090;
            if (v1090[23] >= 0)
              v386 = v1090[23] & 0x7F;
            else
              v386 = *(_QWORD *)&v1090[8];
            v1069 = v1092;
            v1070 = v1093;
            v1072 = v1095;
            if (v1095 > 0x40)
            {
              v1071 = (void *)operator new[]();
              memcpy(v1071, __src, (((unint64_t)v1072 + 63) >> 3) & 0x3FFFFFF8);
            }
            else
            {
              v1071 = __src;
            }
            v387 = (*(uint64_t (**)(uint64_t, std::string *, _BYTE *, uint64_t, __int128 *, uint64_t))(*(_QWORD *)v384 + 56))(v384, &v1085, v385, v386, &v1069, v1032);
            if (v1072 >= 0x41 && v1071)
              MEMORY[0x1CAA32F9C](v1071, 0x1000C8000313F17);
            *(_BYTE *)(v1032 + 84) = v387;
            if (*((_BYTE *)v1067 + 33))
            {
              *(_QWORD *)__dst = &__dst[24];
              *(_OWORD *)&__dst[8] = xmmword_1C64638F0;
              *(_DWORD *)&v1106[8] = 0;
              BYTE8(v1107) = 0;
              v1108 = 0;
              *(_QWORD *)v1106 = &off_1E81A7280;
              *((_QWORD *)&v1109 + 1) = __dst;
              LODWORD(v1109) = 0;
              *(_QWORD *)&v1107 = 0;
              *(_OWORD *)&v1106[16] = 0uLL;
              llvm::raw_ostream::write((llvm::raw_ostream *)v1106, "parsed instruction: [", 0x15uLL);
              if (*(_DWORD *)(v1032 + 8))
              {
                v608 = 0;
                v609 = 0;
                do
                {
                  if (v609)
                  {
                    if (*(_QWORD *)&v1106[24] - (_QWORD)v1107 > 1uLL)
                    {
                      *(_WORD *)v1107 = 8236;
                      *(_QWORD *)&v1107 = v1107 + 2;
                    }
                    else
                    {
                      llvm::raw_ostream::write((llvm::raw_ostream *)v1106, ", ", 2uLL);
                    }
                  }
                  (*(void (**)(_QWORD, _BYTE *))(**(_QWORD **)(*(_QWORD *)v1032 + 8 * v608) + 120))(*(_QWORD *)(*(_QWORD *)v1032 + 8 * v608), v1106);
                  v608 = (v609 + 1);
                  v609 = v608;
                }
                while ((_DWORD)v608 != *(_DWORD *)(v1032 + 8));
              }
              if (*(_QWORD *)&v1106[24] == (_QWORD)v1107)
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)v1106, "]", 1uLL);
              }
              else
              {
                *(_BYTE *)v1107 = 93;
                *(_QWORD *)&v1107 = v1107 + 1;
              }
              v442 = **((_QWORD **)&v1109 + 1);
              v441 = *(_QWORD *)(*((_QWORD *)&v1109 + 1) + 8);
              LOWORD(__str[1].__r_.__value_.__r.__words[1]) = 261;
              __str[0].__r_.__value_.__r.__words[0] = v442;
              __str[0].__r_.__value_.__l.__size_ = v441;
              v1087[0] = 0;
              v1087[1] = 0;
              llvm::SourceMgr::PrintMessage(*((llvm **)v1067 + 30), v1081, 3, (llvm::Twine *)__str, (unint64_t *)v1087, 1, 0, 0, 1u);
              *(_QWORD *)v1106 = off_1E81A6E70;
              if ((_DWORD)v1109 == 1 && *(_QWORD *)&v1106[16])
                MEMORY[0x1CAA32F9C](*(_QWORD *)&v1106[16], 0x1000C8077774924);
              if (*(_BYTE **)__dst != &__dst[24])
                free(*(void **)__dst);
            }
            if (*((_DWORD *)v1067 + 6))
              v388 = 1;
            else
              v388 = v387;
            if ((v388 & 1) != 0)
            {
              LOBYTE(v9) = 1;
            }
            else
            {
              if (sub_1C6109E38(v1067))
              {
                v604 = (uint64_t *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 48))(v1067)
                                 + 1520);
                v605 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 56))(v1067);
                v606 = *(unsigned int *)(v605 + 120);
                v607 = (_DWORD)v606 ? *(_QWORD *)(*(_QWORD *)(v605 + 112) + 32 * v606 - 32) : 0;
                *(_QWORD *)__dst = v607;
                *(_QWORD *)v1106 = 0;
                if (sub_1C614F7B0(v604, __dst, v1106))
                {
                  v627 = (char ***)*((_QWORD *)v1067 + 85);
                  if (v627 == *((char ****)v1067 + 86))
                  {
                    v628 = (int *)((char *)v1067 + 272);
                    v629 = &v1081;
                  }
                  else
                  {
                    v629 = *v627;
                    v628 = (int *)(*v627 + 1);
                  }
                  LineAndColumn = llvm::SourceMgr::getLineAndColumn(*((uint64_t **)v1067 + 30), *v629, *v628);
                  if (*((_QWORD *)v1067 + 96))
                  {
                    v913 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 56))(v1067);
                    v914 = *((_QWORD *)v1067 + 95);
                    v915 = *((_QWORD *)v1067 + 96);
                    v1106[0] = 0;
                    v1106[16] = 0;
                    __dst[0] = 0;
                    __dst[16] = 0;
                    (*(void (**)(std::string *__return_ptr, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, uint64_t, _BYTE *, _BYTE *, _DWORD))(*(_QWORD *)v913 + 680))(__str, v913, 0, 0, 0, v914, v915, v1106, __dst, 0);
                    v916 = (int)__str[0].__r_.__value_.__l.__data_;
                    *(_DWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 48))(v1067) + 1516) = v916;
                    LineAndColumn = ~llvm::SourceMgr::getLineAndColumn(*((uint64_t **)v1067 + 30), *((char **)v1067 + 98), *((_DWORD *)v1067 + 198))+ *((_DWORD *)v1067 + 194)+ LineAndColumn;
                  }
                  v836 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 56))(v1067);
                  v837 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 48))(v1067);
                  (*(void (**)(uint64_t, _QWORD, unint64_t, _QWORD, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v836 + 704))(v836, *(unsigned int *)(v837 + 1516), LineAndColumn, 0, 1, 0, 0);
                }
              }
              *(_QWORD *)__dst = 0;
              LOBYTE(v9) = (*(uint64_t (**)(_QWORD, char *, uint64_t, uint64_t, _QWORD, _BYTE *, _QWORD))(**((_QWORD **)v1067 + 1) + 72))(*((_QWORD *)v1067 + 1), v1081, v1032 + 80, v1032, *((_QWORD *)v1067 + 28), __dst, *(unsigned __int8 *)(*((_QWORD *)v1067 + 1) + 64));
            }
            if ((v1090[23] & 0x80000000) != 0)
              operator delete(*(void **)v1090);
            goto LABEL_461;
          }
          goto LABEL_686;
        }
        (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 184))(v1067);
        v443 = v1080;
        v444 = *(int **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067) + 8);
        v445 = *v444;
        v446 = *((_QWORD *)v444 + 1);
        v447 = v444[8];
        if (v447 > 0x40)
        {
          v448 = (void *)operator new[]();
          memcpy(v448, *((const void **)v444 + 3), ((unint64_t)(v447 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          v448 = (void *)*((_QWORD *)v444 + 3);
        }
        v610 = 1;
        *(_QWORD *)v1090 = 1;
        if ((v445 | 0x10) != 0x19)
        {
          if (((*(uint64_t (**)(llvm::MCAsmParser *, _BYTE *))(*(_QWORD *)v1067 + 256))(v1067, v1090) & 1) != 0)
          {
            v613 = " in alignment value for '";
            goto LABEL_1151;
          }
          v610 = *(_QWORD *)v1090;
        }
        v611 = (uint8x8_t)vcnt_s8((int8x8_t)v610);
        v611.i16[0] = vaddlv_u8(v611);
        if (v611.u32[0] != 1)
        {
          std::to_string(__str, v610);
          v616 = std::string::insert(__str, 0, "alignment must be a power of two; was ");
          v617 = v616->__r_.__value_.__r.__words[2];
          *(_OWORD *)v1106 = *(_OWORD *)&v616->__r_.__value_.__l.__data_;
          *(_QWORD *)&v1106[16] = v617;
          v616->__r_.__value_.__l.__size_ = 0;
          v616->__r_.__value_.__r.__words[2] = 0;
          v616->__r_.__value_.__r.__words[0] = 0;
          *(_WORD *)&__dst[32] = 260;
          *(_QWORD *)__dst = v1106;
          LOBYTE(v9) = llvm::MCAsmParser::Error((uint64_t)v1067, v446, (uint64_t)__dst, 0, 0);
          if ((v1106[23] & 0x80000000) != 0)
            operator delete(*(void **)v1106);
          if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
            operator delete(__str[0].__r_.__value_.__l.__data_);
          goto LABEL_1264;
        }
        *(_OWORD *)&__str[0].__r_.__value_.__l.__data_ = 0uLL;
        if (llvm::MCAsmParser::parseOptionalToken(v1067, 25))
        {
          v612 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067)
                                       + 8)
                           + 8);
          if ((*(unsigned int (**)(llvm::MCAsmParser *, std::string *))(*(_QWORD *)v1067 + 192))(v1067, __str))
          {
LABEL_1143:
            v613 = " in '";
LABEL_1151:
            *(_QWORD *)v1106 = v613;
            *(_QWORD *)&v1106[16] = __pc;
            *(_QWORD *)&v1106[24] = v1040;
            LOWORD(v1107) = 1283;
            *(_QWORD *)__dst = v1106;
            *(_QWORD *)&__dst[16] = "' directive";
            *(_WORD *)&__dst[32] = 770;
            v618 = llvm::MCAsmParser::addErrorSuffix(v1067, (const llvm::Twine *)__dst);
LABEL_1263:
            LOBYTE(v9) = v618;
LABEL_1264:
            if (v447 >= 0x41 && v448 != 0)
              MEMORY[0x1CAA32F9C](v448, 0x1000C8000313F17);
            goto LABEL_461;
          }
          if (__str[0].__r_.__value_.__l.__size_ != 9
            || llvm::StringRef::compare_insensitive((unsigned __int8 **)__str, "nonunique", 9uLL))
          {
            *(_QWORD *)v1106 = "Unrecognized qualifier for '";
            *(_QWORD *)&v1106[16] = __pc;
            *(_QWORD *)&v1106[24] = v1040;
            LOWORD(v1107) = 1283;
            *(_QWORD *)__dst = v1106;
            *(_QWORD *)&__dst[16] = "' directive; expected none or NONUNIQUE";
            *(_WORD *)&__dst[32] = 770;
            v618 = llvm::MCAsmParser::Error((uint64_t)v1067, v612, (uint64_t)__dst, 0, 0);
            goto LABEL_1263;
          }
        }
        *(_QWORD *)__dst = "unexpected token";
        *(_WORD *)&__dst[32] = 259;
        if (!llvm::MCAsmParser::parseEOL(v1067, (const llvm::Twine *)__dst))
        {
          v654 = v286 == 115;
          v655 = *((_DWORD *)v1067 + 128);
          if (v655 >= *((_DWORD *)v1067 + 129))
          {
            *(_QWORD *)__dst = 0;
            v992 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)v1067 + 504, 0, 96, (unint64_t *)__dst);
            v993 = &v992[96 * *((unsigned int *)v1067 + 128)];
            v994 = *(_DWORD *)v1090;
            *(_OWORD *)v993 = v443;
            v993[16] = v654;
            v993[17] = 1;
            *((_DWORD *)v993 + 5) = v994;
            *((_QWORD *)v993 + 3) = 0;
            *((_DWORD *)v993 + 8) = 0;
            *(_OWORD *)(v993 + 68) = 0u;
            *(_OWORD *)(v993 + 56) = 0u;
            *(_OWORD *)(v993 + 40) = 0u;
            *((_DWORD *)v993 + 21) = 16;
            sub_1C6112648((void **)v1067 + 63, (uint64_t)v992);
            v995 = *(_DWORD *)__dst;
            v996 = (char *)*((_QWORD *)v1067 + 63);
            if (v996 != (char *)v1067 + 520)
              free(v996);
            LOBYTE(v9) = 0;
            *((_QWORD *)v1067 + 63) = v992;
            *((_DWORD *)v1067 + 129) = v995;
            ++*((_DWORD *)v1067 + 128);
          }
          else
          {
            LOBYTE(v9) = 0;
            v656 = *((_QWORD *)v1067 + 63) + 96 * v655;
            v657 = *(_DWORD *)v1090;
            *(_OWORD *)v656 = v443;
            *(_BYTE *)(v656 + 16) = v654;
            *(_BYTE *)(v656 + 17) = 1;
            *(_DWORD *)(v656 + 20) = v657;
            *(_QWORD *)(v656 + 24) = 0;
            *(_DWORD *)(v656 + 32) = 0;
            *(_OWORD *)(v656 + 40) = 0u;
            *(_OWORD *)(v656 + 56) = 0u;
            *(_OWORD *)(v656 + 68) = 0u;
            *(_DWORD *)(v656 + 84) = 16;
            *((_DWORD *)v1067 + 128) = v655 + 1;
          }
          goto LABEL_1264;
        }
        goto LABEL_1143;
      }
      v92 = (_QWORD *)*((_QWORD *)v6 + 1);
      v93 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v6 + 56))(v6);
      (*(void (**)(_QWORD *, uint64_t))(*v92 + 176))(v92, v93);
      v94 = *((_QWORD *)&v1080 + 1);
      if (*((_QWORD *)&v1080 + 1) == 4
        && !llvm::StringRef::compare_insensitive((unsigned __int8 **)&v1080, "ends", 4uLL))
      {
        if (*((_DWORD *)v6 + 128) < 2u)
        {
          v94 = 4;
        }
        else
        {
          if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v6 + 40))(v6) + 8) == 9)
          {
            v95 = v6;
LABEL_178:
            v75 = sub_1C610AC98(v95);
            goto LABEL_214;
          }
          v94 = *((_QWORD *)&v1080 + 1);
        }
      }
      sub_1C5E3DEA4(__dst, (char *)v1080, (uint64_t (*)(_QWORD))sub_1C5E3C6A8, (char *)(v1080 + v94), (uint64_t)sub_1C5E3C6A8, v94);
      v240 = __dst[23];
      v1031 = *(void **)__dst;
      if (__dst[23] >= 0)
        v241 = __dst;
      else
        v241 = *(unsigned __int8 **)__dst;
      if (__dst[23] >= 0)
        v242 = __dst[23] & 0x7F;
      else
        v242 = *(_QWORD *)&__dst[8];
      v243 = *((unsigned int *)v6 + 112);
      if ((_DWORD)v243)
      {
        v1041 = __dst[23];
        v244 = 0;
        if (v242)
        {
          v245 = v242;
          v246 = v241;
          do
          {
            v247 = *v246++;
            v244 = 33 * v244 + v247;
            --v245;
          }
          while (v245);
        }
        v248 = (_QWORD *)*((_QWORD *)v6 + 55);
        v249 = 1;
        v250 = v244;
        while (1)
        {
          v251 = v250 & (v243 - 1);
          v252 = (_QWORD *)v248[v251];
          if (v252 != (_QWORD *)-8)
          {
            if (!v252)
              goto LABEL_430;
            if (*((_DWORD *)&v248[v243 + 1] + v251) == v244
              && v242 == *v252
              && (!v242 || !memcmp(v241, (char *)v252 + *((unsigned int *)v1067 + 115), v242)))
            {
              break;
            }
          }
          v250 = v249 + v251;
          ++v249;
        }
        if ((_DWORD)v251 == -1)
        {
          v252 = 0;
LABEL_430:
          v253 = 0;
          v6 = v1067;
          if ((v1041 & 0x80000000) == 0)
            goto LABEL_432;
          goto LABEL_431;
        }
        v6 = v1067;
        v240 = v1041;
        if ((int)v251 == v243)
          goto LABEL_424;
        v268 = v248[(int)v251];
        v252 = *(_QWORD **)(v268 + 8);
        v253 = *(uint64_t (**)(_QWORD *, _QWORD, _QWORD, char *))(v268 + 16);
        if ((v1041 & 0x80000000) == 0)
          goto LABEL_432;
LABEL_431:
        operator delete(v1031);
      }
      else
      {
LABEL_424:
        v252 = 0;
        v253 = 0;
        if (v240 < 0)
          goto LABEL_431;
      }
LABEL_432:
      if (v252)
      {
        v75 = v253(v252, v1080, *((_QWORD *)&v1080 + 1), v1081);
        goto LABEL_214;
      }
      v254 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v6 + 40))(v6);
      if ((_DWORD)v1092 != 2)
      {
        LOBYTE(v9) = *((_DWORD *)v6 + 6) != 0;
        goto LABEL_215;
      }
      v255 = *(_QWORD *)(*(_QWORD *)(v254 + 8) + 8);
      v256 = (_QWORD *)*((_QWORD *)v6 + 1);
      v1076 = v1092;
      v1077 = v1093;
      v1079 = v1095;
      if (v1095 > 0x40)
      {
        v1078 = (void *)operator new[]();
        memcpy(v1078, __src, (((unint64_t)v1079 + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        v1078 = __src;
      }
      v257 = (*(uint64_t (**)(_QWORD *, __int128 *))(*v256 + 64))(v256, &v1076);
      if (v1079 >= 0x41 && v1078)
        MEMORY[0x1CAA32F9C](v1078, 0x1000C8000313F17);
      v258 = *((_DWORD *)v6 + 6);
      LOBYTE(v9) = v258 != 0;
      if (!v258 && ((v257 ^ 1) & 1) == 0)
      {
        if (*(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067)
                                   + 8)
                       + 8) != v255)
          goto LABEL_260;
        if (*(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067)
                                   + 8)
                       + 8) == v255)
        {
          switch(__pa)
          {
            case 5:
              v438 = *((_QWORD *)&v1080 + 1);
              v437 = v1080;
              v439 = v1067;
              v440 = 0;
              goto LABEL_956;
            case 6:
            case 7:
              v438 = *((_QWORD *)&v1080 + 1);
              v437 = v1080;
              v439 = v1067;
              v440 = 1;
LABEL_956:
              v75 = sub_1C610B33C(v439, v437, v438, v440);
              goto LABEL_214;
            case 8:
            case 9:
            case 17:
              v260 = *((_QWORD *)&v1080 + 1);
              v259 = v1080;
              v261 = v1067;
              v262 = 1;
              goto LABEL_842;
            case 10:
            case 11:
            case 21:
              v260 = *((_QWORD *)&v1080 + 1);
              v259 = v1080;
              v261 = v1067;
              v262 = 2;
              goto LABEL_842;
            case 12:
            case 13:
            case 18:
              v260 = *((_QWORD *)&v1080 + 1);
              v259 = v1080;
              v261 = v1067;
              v262 = 4;
              goto LABEL_842;
            case 14:
            case 19:
              v260 = *((_QWORD *)&v1080 + 1);
              v259 = v1080;
              v261 = v1067;
              v262 = 6;
              goto LABEL_842;
            case 15:
            case 16:
            case 20:
              v260 = *((_QWORD *)&v1080 + 1);
              v259 = v1080;
              v261 = v1067;
              v262 = 8;
LABEL_842:
              v75 = sub_1C610B3D8(v261, v259, v260, v262);
              goto LABEL_214;
            case 22:
              v470 = *((_QWORD *)&v1080 + 1);
              v469 = v1080;
              v471 = (unsigned int *)&unk_1C866F184;
              v472 = v1067;
              v473 = 4;
              goto LABEL_936;
            case 23:
              v470 = *((_QWORD *)&v1080 + 1);
              v469 = v1080;
              v471 = (unsigned int *)&unk_1C866F198;
              v472 = v1067;
              v473 = 8;
              goto LABEL_936;
            case 24:
              v470 = *((_QWORD *)&v1080 + 1);
              v469 = v1080;
              v471 = (unsigned int *)&unk_1C866F1FC;
              v472 = v1067;
              v473 = 10;
LABEL_936:
              v75 = sub_1C610B488(v472, v469, v470, v471, v473);
              goto LABEL_214;
            case 25:
              v467 = *(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067) + 96);
              *(_QWORD *)v1090 = 0;
              if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067) + 8) == 9)
              {
                *(_QWORD *)__dst = "align directive with no operand is ignored";
                *(_WORD *)&__dst[32] = 259;
                if (!(*(unsigned int (**)(llvm::MCAsmParser *, uint64_t, _BYTE *, _QWORD, _QWORD))(*(_QWORD *)v1067 + 168))(v1067, v467, __dst, 0, 0))goto LABEL_67;
                *(_QWORD *)v1106 = "unexpected token";
                LOWORD(v1107) = 259;
                v468 = (const llvm::Twine *)v1106;
LABEL_950:
                v75 = llvm::MCAsmParser::parseEOL(v1067, v468);
                goto LABEL_214;
              }
              if (((*(uint64_t (**)(llvm::MCAsmParser *, _BYTE *))(*(_QWORD *)v1067 + 256))(v1067, v1090) & 1) != 0
                || (*(_QWORD *)__dst = "unexpected token",
                    *(_WORD *)&__dst[32] = 259,
                    llvm::MCAsmParser::parseEOL(v1067, (const llvm::Twine *)__dst)))
              {
                v728 = " in align directive";
                goto LABEL_1398;
              }
              v765 = *(int8x8_t *)v1090;
              if (!*(_QWORD *)v1090)
              {
                v765 = (int8x8_t)1;
                *(_QWORD *)v1090 = 1;
              }
              v766 = (uint8x8_t)vcnt_s8(v765);
              v766.i16[0] = vaddlv_u8(v766);
              if (v766.u32[0] == 1)
              {
                LOBYTE(v9) = 0;
              }
              else
              {
                std::to_string(__str, *(_QWORD *)&v765);
                v952 = std::string::insert(__str, 0, "alignment must be a power of 2; was ");
                v953 = v952->__r_.__value_.__r.__words[2];
                *(_OWORD *)v1106 = *(_OWORD *)&v952->__r_.__value_.__l.__data_;
                *(_QWORD *)&v1106[16] = v953;
                v952->__r_.__value_.__l.__size_ = 0;
                v952->__r_.__value_.__r.__words[2] = 0;
                v952->__r_.__value_.__r.__words[0] = 0;
                *(_WORD *)&__dst[32] = 260;
                *(_QWORD *)__dst = v1106;
                LOBYTE(v9) = llvm::MCAsmParser::Error((uint64_t)v1067, v467, (uint64_t)__dst, 0, 0);
                if ((v1106[23] & 0x80000000) != 0)
                  operator delete(*(void **)v1106);
                if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__str[0].__r_.__value_.__l.__data_);
                v765 = *(int8x8_t *)v1090;
              }
              if (sub_1C6112704((uint64_t)v1067, *(_QWORD *)&v765))
              {
                *(_QWORD *)__dst = " in align directive";
                *(_WORD *)&__dst[32] = 259;
                LOBYTE(v9) = v9 | llvm::MCAsmParser::addErrorSuffix(v1067, (const llvm::Twine *)__dst);
              }
              goto LABEL_215;
            case 26:
              *(_QWORD *)__dst = "unexpected token";
              *(_WORD *)&__dst[32] = 259;
              if (!llvm::MCAsmParser::parseEOL(v1067, (const llvm::Twine *)__dst)
                && (sub_1C6112704((uint64_t)v1067, 2uLL) & 1) == 0)
              {
                goto LABEL_67;
              }
              v728 = " in even directive";
              goto LABEL_1398;
            case 27:
              v234 = (char *)*((_QWORD *)v1067 + 17);
              if (((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 264))(v1067) & 1) != 0)
                goto LABEL_260;
              *(_QWORD *)v1090 = 0;
              *(_QWORD *)__dst = 0;
              if (((*(uint64_t (**)(llvm::MCAsmParser *, _BYTE *, _BYTE *))(*(_QWORD *)v1067 + 232))(v1067, v1090, __dst) & 1) != 0)goto LABEL_260;
              *(_QWORD *)__dst = "unexpected token";
              *(_WORD *)&__dst[32] = 259;
              if (llvm::MCAsmParser::parseEOL(v1067, (const llvm::Twine *)__dst))
              {
                v919 = " in 'org' directive";
                goto LABEL_1843;
              }
              v555 = *((_DWORD *)v1067 + 128);
              if (!v555)
              {
                if (!(*(unsigned int (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 264))(v1067))
                {
                  v879 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 56))(v1067);
                  (*(void (**)(uint64_t, _QWORD, _QWORD, char *))(*(_QWORD *)v879 + 648))(v879, *(_QWORD *)v1090, 0, v234);
                  goto LABEL_67;
                }
                v728 = " in 'org' directive";
                goto LABEL_1398;
              }
              v556 = *((_QWORD *)v1067 + 63);
              v1087[0] = 0;
              v557 = *(_QWORD *)v1090;
              v558 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 56))(v1067);
              (*(void (**)(uint64_t))(*(_QWORD *)v558 + 72))(v558);
              llvm::MCExpr::evaluateAsAbsolute(v557, v1087);
              if ((v559 & 1) == 0)
              {
                v523 = "expected absolute expression in 'org' directive";
                goto LABEL_1883;
              }
              if (((unint64_t)v1087[0] & 0x8000000000000000) == 0)
              {
                LOBYTE(v9) = 0;
                v560 = v556 + 96 * v555;
                *(_DWORD *)(v560 - 68) = v1087[0];
                *(_BYTE *)(v560 - 79) = 0;
                goto LABEL_215;
              }
              std::to_string(__str, (uint64_t)v1087[0]);
              v968 = std::string::insert(__str, 0, "expected non-negative value in struct's 'org' directive; was ");
              v969 = v968->__r_.__value_.__r.__words[2];
              *(_OWORD *)v1106 = *(_OWORD *)&v968->__r_.__value_.__l.__data_;
              *(_QWORD *)&v1106[16] = v969;
              v968->__r_.__value_.__l.__size_ = 0;
              v968->__r_.__value_.__r.__words[2] = 0;
              v968->__r_.__value_.__r.__words[0] = 0;
              *(_WORD *)&__dst[32] = 260;
              *(_QWORD *)__dst = v1106;
              LOBYTE(v9) = llvm::MCAsmParser::Error((uint64_t)v1067, (uint64_t)v234, (uint64_t)__dst, 0, 0);
              if ((v1106[23] & 0x80000000) != 0)
              {
                v626 = *(void **)v1106;
                goto LABEL_1175;
              }
              goto LABEL_1176;
            case 29:
              goto LABEL_880;
            case 30:
              LODWORD(__str[0].__r_.__value_.__l.__data_) = 9;
              *(_QWORD *)v1106 = v1067;
              *(_QWORD *)&v1106[8] = __str;
              if (!llvm::MCAsmParser::parseMany(v1067, (unsigned int (*)(uint64_t))sub_1C6112800, (uint64_t)v1106, 1))goto LABEL_67;
              v728 = " in directive";
              goto LABEL_1398;
            case 31:
              if (((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 264))(v1067) & 1) != 0)
                goto LABEL_260;
              v234 = *(char **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067) + 96);
              *(_QWORD *)v1106 = 0;
              *(_QWORD *)&v1106[8] = 0;
              if ((*(unsigned int (**)(llvm::MCAsmParser *, _BYTE *))(*(_QWORD *)v1067 + 192))(v1067, v1106))
              {
                v494 = "expected identifier in directive";
                goto LABEL_1493;
              }
              v474 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 48))(v1067);
              *(_WORD *)&__dst[32] = 261;
              *(_QWORD *)__dst = *(_QWORD *)v1106;
              *(_QWORD *)&__dst[8] = *(_QWORD *)&v1106[8];
              v475 = llvm::MCContext::getOrCreateSymbol(v474, (uint64_t)__dst);
              if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067) + 8) != 25)
              {
                v494 = "unexpected token in directive";
                goto LABEL_1493;
              }
              v476 = v1067;
              (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 184))(v1067);
              __str[0].__r_.__value_.__r.__words[0] = 0;
              v477 = *(char **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v476 + 40))(v476) + 96);
              if (((*(uint64_t (**)(llvm::MCAsmParser *, std::string *))(*(_QWORD *)v476 + 256))(v476, __str) & 1) != 0)goto LABEL_260;
              *(_QWORD *)v1090 = 0;
              if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067) + 8) == 25)
              {
                v478 = v1067;
                (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 184))(v1067);
                v479 = *(char **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v478 + 40))(v478) + 96);
                if (((*(uint64_t (**)(llvm::MCAsmParser *, _BYTE *))(*(_QWORD *)v478 + 256))(v478, v1090) & 1) != 0)
                  goto LABEL_260;
                if (*(_BYTE *)(*((_QWORD *)v1067 + 22) + 354))
                {
                  v480 = (uint8x8_t)vcnt_s8(*(int8x8_t *)v1090);
                  v480.i16[0] = vaddlv_u8(v480);
                  if (v480.u32[0] != 1)
                  {
                    v912 = "alignment must be a power of 2";
                    goto LABEL_1802;
                  }
                  *(_QWORD *)v1090 = 63 - __clz(*(unint64_t *)v1090);
                }
              }
              else
              {
                v479 = 0;
              }
              *(_QWORD *)__dst = "unexpected token in '.comm' or '.lcomm' directive";
              *(_WORD *)&__dst[32] = 259;
              if (llvm::MCAsmParser::parseEOL(v1067, (const llvm::Twine *)__dst))
                goto LABEL_260;
              if ((__str[0].__r_.__value_.__r.__words[0] & 0x8000000000000000) != 0)
              {
                *(_QWORD *)__dst = "invalid '.comm' or '.lcomm' directive size, can't be less than zero";
                *(_WORD *)&__dst[32] = 259;
                v146 = (uint64_t)v1067;
                v144 = v477;
                goto LABEL_264;
              }
              if ((*(_QWORD *)v1090 & 0x8000000000000000) == 0)
              {
                v865 = *(_DWORD *)(v475 + 8);
                if ((v865 & 2) != 0)
                {
                  if ((*(_DWORD *)(v475 + 8) & 0x1C00) == 0x800)
                  {
                    *(_QWORD *)(v475 + 24) = 0;
                    v865 &= 0xFFFFE3FF;
                  }
                  v866 = 0;
                  *(_QWORD *)v475 &= 7uLL;
                  v865 &= ~2u;
                  *(_DWORD *)(v475 + 8) = v865;
                }
                else
                {
                  v866 = *(_QWORD *)v475 & 0xFFFFFFFFFFFFFFF8;
                  if (v866)
                    goto LABEL_1769;
                }
                if ((v865 & 0x1C00) == 0x800)
                {
                  *(_DWORD *)(v475 + 8) = v865 | 4;
                  llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v475 + 24));
                  *(_QWORD *)v475 = *(_QWORD *)v475 & 7 | v970;
                  if (!v970)
                    goto LABEL_1770;
                  goto LABEL_1882;
                }
LABEL_1769:
                if (!v866)
                {
LABEL_1770:
                  v903 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 56))(v1067);
                  (*(void (**)(uint64_t, unint64_t, std::string::size_type, _QWORD))(*(_QWORD *)v903 + 456))(v903, v475, __str[0].__r_.__value_.__r.__words[0], (1 << v1090[0]));
                  goto LABEL_67;
                }
LABEL_1882:
                v523 = "invalid symbol redefinition";
LABEL_1883:
                *(_QWORD *)__dst = v523;
                *(_WORD *)&__dst[32] = 259;
                v146 = (uint64_t)v1067;
LABEL_581:
                v144 = v234;
                goto LABEL_264;
              }
              v912 = "invalid '.comm' or '.lcomm' directive alignment, can't be less than zero";
LABEL_1802:
              *(_QWORD *)__dst = v912;
              *(_WORD *)&__dst[32] = 259;
              v146 = (uint64_t)v1067;
              v144 = v479;
              goto LABEL_264;
            case 32:
              v461 = v1081;
              sub_1C6109CB4((std::string *)v1106, (uint64_t)v1067);
              v718 = v1106[23];
              if (v1106[23] >= 0)
                v719 = v1106;
              else
                v719 = *(char **)v1106;
              if (v1106[23] < 0)
                v718 = *(_QWORD *)&v1106[8];
              if (!v718)
              {
                v720 = -1;
                goto LABEL_1458;
              }
              v755 = (unsigned __int8 *)&v719[v718];
              v756 = v719;
LABEL_1450:
              v757 = 0;
              while (*v756 != asc_1C878225F[v757])
              {
                if (++v757 == 7)
                {
                  if (++v756 != (char *)v755)
                    goto LABEL_1450;
                  v756 = &v719[v718];
                  break;
                }
              }
              if (v756 == (char *)v755)
                v720 = -1;
              else
                v720 = v756 - v719;
LABEL_1458:
              if (v718 >= v720)
                v758 = v720;
              else
                v758 = v718;
              if (v758)
              {
                while (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067)
                                    + 8))
                {
                  (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 184))(v1067);
                  sub_1C6109CB4((std::string *)__dst, (uint64_t)v1067);
                  v760 = __dst[23];
                  v761 = *(void **)__dst;
                  v762 = *(_QWORD *)&__dst[8];
                  if (__dst[23] >= 0)
                    v763 = __dst;
                  else
                    v763 = *(_BYTE **)__dst;
                  if (__dst[23] >= 0)
                    v762 = __dst[23];
                  __str[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v763;
                  __str[0].__r_.__value_.__l.__size_ = v762;
                  v764 = llvm::StringRef::find((uint64_t *)__str, v719, v758, 0);
                  if (v760 < 0)
                    operator delete(v761);
                  if (v764 != -1)
                  {
                    *(_QWORD *)__dst = "unexpected token in 'comment' directive";
                    *(_WORD *)&__dst[32] = 259;
                    v717 = llvm::MCAsmParser::parseEOL(v1067, (const llvm::Twine *)__dst);
                    goto LABEL_1640;
                  }
                }
                v759 = "unmatched delimiter in 'comment' directive";
              }
              else
              {
                v759 = "no delimiter in 'comment' directive";
              }
              *(_QWORD *)__dst = v759;
              *(_WORD *)&__dst[32] = 259;
              goto LABEL_1638;
            case 33:
              v1087[0] = 0;
              v1087[1] = 0;
              *(_QWORD *)&v1088 = 0;
              v689 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067)
                                           + 8)
                               + 8);
              if ((*(unsigned int (**)(llvm::MCAsmParser *, void **))(*(_QWORD *)v1067 + 216))(v1067, v1087))
              {
                sub_1C6109CB4((std::string *)__dst, (uint64_t)v1067);
                if (SBYTE7(v1088) < 0)
                  operator delete(v1087[0]);
                *(_OWORD *)v1087 = *(_OWORD *)__dst;
                *(_QWORD *)&v1088 = *(_QWORD *)&__dst[16];
              }
              if ((SBYTE7(v1088) & 0x80u) == 0)
                v690 = (void *)(BYTE7(v1088) & 0x7F);
              else
                v690 = v1087[1];
              *(_QWORD *)__dst = "missing filename in 'include' directive";
              *(_WORD *)&__dst[32] = 259;
              v691 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067);
              if (v690)
              {
                v747 = **(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067)
                                   + 8);
                *(_QWORD *)v1106 = "unexpected token in 'include' directive";
                LOWORD(v1107) = 259;
                v748 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067);
                if (v747 == 9)
                {
                  memset(v1090, 0, 24);
                  v749 = llvm::SourceMgr::AddIncludeFile(*((_QWORD **)v1067 + 30), (uint64_t)v1087, *((_QWORD *)v1067 + 17), (std::string *)v1090);
                  v750 = v749;
                  LOBYTE(v9) = v749 == 0;
                  if (v749)
                  {
                    *((_DWORD *)v1067 + 68) = v749;
                    v971 = *(_QWORD *)(**((_QWORD **)v1067 + 30) + 24 * (v749 - 1));
                    v972 = *(_QWORD *)(v971 + 8);
                    v973 = *(_QWORD *)(v971 + 16) - v972;
                    *((_QWORD *)v1067 + 24) = v972;
                    *((_QWORD *)v1067 + 25) = v973;
                    *((_QWORD *)v1067 + 23) = v972;
                    *((_QWORD *)v1067 + 17) = 0;
                    *((_BYTE *)v1067 + 211) = 1;
                    sub_1C630145C((_DWORD *)v1067 + 84, 1);
                  }
                  if ((v1090[23] & 0x80000000) != 0)
                    operator delete(*(void **)v1090);
                  std::operator+<char>();
                  v751 = std::string::append(&v1085, "'");
                  v752 = v751->__r_.__value_.__r.__words[2];
                  *(_OWORD *)v1090 = *(_OWORD *)&v751->__r_.__value_.__l.__data_;
                  *(_QWORD *)&v1090[16] = v752;
                  v751->__r_.__value_.__l.__size_ = 0;
                  v751->__r_.__value_.__r.__words[2] = 0;
                  v751->__r_.__value_.__r.__words[0] = 0;
                  LOWORD(__str[1].__r_.__value_.__r.__words[1]) = 260;
                  __str[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v1090;
                  if (!v750)
                    llvm::MCAsmParser::Error((uint64_t)v1067, v689, (uint64_t)__str, 0, 0);
                  if ((v1090[23] & 0x80000000) != 0)
                    operator delete(*(void **)v1090);
                  if (SHIBYTE(v1085.__r_.__value_.__r.__words[2]) < 0)
                    operator delete(v1085.__r_.__value_.__l.__data_);
LABEL_1665:
                  if ((SBYTE7(v1088) & 0x80000000) == 0)
                    goto LABEL_215;
                  v554 = (char *)v1087[0];
                  goto LABEL_1643;
                }
                v692 = *(_QWORD *)(*(_QWORD *)(v748 + 8) + 8);
                v693 = v1106;
              }
              else
              {
                v692 = *(_QWORD *)(*(_QWORD *)(v691 + 8) + 8);
                v693 = __dst;
              }
              llvm::MCAsmParser::Error((uint64_t)v1067, v692, (uint64_t)v693, 0, 0);
              LOBYTE(v9) = 1;
              goto LABEL_1665;
            case 34:
              v482 = *((_QWORD *)&v1080 + 1);
              v481 = v1081;
              v483 = v1080;
              *(_QWORD *)v1090 = 0;
              v484 = *(char **)(*(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067)
                                          + 8)
                              + 8);
              *(_QWORD *)__dst = 0;
              if (((*(uint64_t (**)(llvm::MCAsmParser *, _BYTE *, _BYTE *))(*(_QWORD *)v1067 + 232))(v1067, v1090, __dst) & 1) != 0)goto LABEL_260;
              v1087[0] = 0;
              v485 = *(_QWORD *)v1090;
              v486 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 56))(v1067);
              (*(void (**)(uint64_t))(*(_QWORD *)v486 + 72))(v486);
              llvm::MCExpr::evaluateAsAbsolute(v485, v1087);
              if ((v487 & 1) == 0)
              {
                LOWORD(v1107) = 1283;
                *(_QWORD *)v1106 = "unexpected token in '";
                *(_QWORD *)&v1106[16] = v483;
                *(_QWORD *)&v1106[24] = v482;
                goto LABEL_1491;
              }
              v488 = (char *)v1087[0];
              *(_QWORD *)__dst = "Count is negative";
              *(_WORD *)&__dst[32] = 259;
              if (((unint64_t)v1087[0] & 0x8000000000000000) != 0)
              {
                v489 = (std::string *)__dst;
                goto LABEL_1632;
              }
              LOWORD(__str[1].__r_.__value_.__r.__words[1]) = 1283;
              __str[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"unexpected token in '";
              __str[0].__r_.__value_.__r.__words[2] = v483;
              __str[1].__r_.__value_.__r.__words[0] = v482;
              *(_QWORD *)v1106 = __str;
              *(_QWORD *)&v1106[16] = "' directive";
              LOWORD(v1107) = 770;
              if (llvm::MCAsmParser::parseEOL(v1067, (const llvm::Twine *)v1106))
                goto LABEL_260;
              v858 = sub_1C6112910((uint64_t)v1067, (uint64_t)v481);
              if (!v858)
                goto LABEL_260;
              v859 = v858;
              *(_QWORD *)__dst = &__dst[24];
              *(_OWORD *)&__dst[8] = xmmword_1C64638F0;
              *(_DWORD *)&v1106[8] = 0;
              BYTE8(v1107) = 0;
              v1108 = 0;
              *(_QWORD *)v1106 = &off_1E81A7280;
              *((_QWORD *)&v1109 + 1) = __dst;
              LODWORD(v1109) = 0;
              *(_QWORD *)&v1107 = 0;
              *(_OWORD *)&v1106[16] = 0uLL;
              v860 = (uint64_t *)(v858 + 56);
              v861 = v488 + 1;
              while (1)
              {
                LOBYTE(v9) = --v861 != 0;
                if (!v861)
                  break;
                v862 = *(unsigned __int8 **)(v859 + 16);
                v863 = *(_QWORD *)(v859 + 24);
                v864 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067);
                if ((sub_1C610D108((uint64_t)v1067, (llvm::raw_ostream *)v1106, v862, v863, 0, 0, 0, 0, v860, *(_QWORD *)(*(_QWORD *)(v864 + 8) + 8)) & 1) != 0)goto LABEL_1304;
              }
              v918 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067);
              sub_1C6112ED8((uint64_t)v1067, (uint64_t)v481, *(_QWORD *)(*(_QWORD *)(v918 + 8) + 8), (llvm::raw_ostream *)v1106);
LABEL_1304:
              *(_QWORD *)v1106 = off_1E81A6E70;
              if ((_DWORD)v1109 == 1 && *(_QWORD *)&v1106[16])
                MEMORY[0x1CAA32F9C](*(_QWORD *)&v1106[16], 0x1000C8077774924);
              if (*(_BYTE **)__dst != &__dst[24])
                free(*(void **)__dst);
              goto LABEL_215;
            case 35:
              v500 = v1081;
              *(_QWORD *)v1090 = 0;
              v501 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067)
                                           + 8)
                               + 8);
              *(_QWORD *)__dst = 0;
              if (((*(uint64_t (**)(llvm::MCAsmParser *, _BYTE *, _BYTE *))(*(_QWORD *)v1067 + 232))(v1067, v1090, __dst) & 1) != 0)goto LABEL_260;
              v502 = sub_1C6112910((uint64_t)v1067, (uint64_t)v500);
              if (!v502)
                goto LABEL_260;
              v503 = (_QWORD *)v502;
              *(_QWORD *)__dst = &__dst[24];
              *(_OWORD *)&__dst[8] = xmmword_1C64638F0;
              *(_DWORD *)&v1106[8] = 0;
              BYTE8(v1107) = 0;
              v1108 = 0;
              *(_QWORD *)v1106 = &off_1E81A7280;
              *((_QWORD *)&v1109 + 1) = __dst;
              LODWORD(v1109) = 0;
              *(_QWORD *)&v1107 = 0;
              *(_OWORD *)&v1106[16] = 0uLL;
              v1087[0] = 0;
              v504 = *(_QWORD *)v1090;
              v505 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 56))(v1067);
              (*(void (**)(uint64_t))(*(_QWORD *)v505 + 72))(v505);
              llvm::MCExpr::evaluateAsAbsolute(v504, v1087);
              if ((v506 & 1) != 0)
              {
                if (v1087[0])
                {
                  v507 = (unsigned __int8 *)v503[2];
                  v508 = v503[3];
                  v509 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067);
                  if ((sub_1C610D108((uint64_t)v1067, (llvm::raw_ostream *)v1106, v507, v508, 0, 0, 0, 0, v503 + 7, *(_QWORD *)(*(_QWORD *)(v509 + 8) + 8)) & 1) != 0)
                  {
                    LOBYTE(v9) = 1;
                    goto LABEL_1304;
                  }
                  sub_1C6112ED8((uint64_t)v1067, (uint64_t)v500, (uint64_t)v500, (llvm::raw_ostream *)v1106);
                }
                LOBYTE(v9) = 0;
              }
              else
              {
                __str[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"expected absolute expression in 'while' directive";
                LOWORD(__str[1].__r_.__value_.__r.__words[1]) = 259;
                LOBYTE(v9) = llvm::MCAsmParser::Error((uint64_t)v1067, v501, (uint64_t)__str, 0, 0);
              }
              goto LABEL_1304;
            case 36:
              v695 = *((_QWORD *)&v1080 + 1);
              v694 = v1081;
              v696 = v1080;
              memset(__str, 0, 42);
              memset(&v1073, 0, sizeof(v1073));
              v697 = (*(uint64_t (**)(llvm::MCAsmParser *, std::string *))(*(_QWORD *)v1067 + 192))(v1067, __str);
              LOWORD(v1107) = 1283;
              *(_QWORD *)v1106 = "expected identifier in '";
              *(_QWORD *)&v1106[16] = v696;
              *(_QWORD *)&v1106[24] = v695;
              *(_QWORD *)__dst = v1106;
              *(_QWORD *)&__dst[16] = "' directive";
              *(_WORD *)&__dst[32] = 770;
              v698 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067);
              if (v697)
              {
                llvm::MCAsmParser::Error((uint64_t)v1067, *(_QWORD *)(*(_QWORD *)(v698 + 8) + 8), (uint64_t)__dst, 0, 0);
                goto LABEL_1440;
              }
              if (!llvm::MCAsmParser::parseOptionalToken(v1067, 10))
                goto LABEL_1439;
              if (llvm::MCAsmParser::parseOptionalToken(v1067, 27))
              {
                if ((sub_1C610F540((uint64_t)v1067, 0, (uint64_t)&__str[0].__r_.__value_.__r.__words[2], 9) & 1) != 0)
                  goto LABEL_1440;
LABEL_1439:
                LOWORD(v1107) = 1283;
                *(_QWORD *)v1106 = "expected comma in '";
                *(_QWORD *)&v1106[16] = v696;
                *(_QWORD *)&v1106[24] = v695;
                *(_QWORD *)__dst = v1106;
                *(_QWORD *)&__dst[16] = "' directive";
                *(_WORD *)&__dst[32] = 770;
                if (llvm::MCAsmParser::parseToken(v1067, 25, (llvm::Twine *)__dst))
                  goto LABEL_1440;
                v1089 = 1283;
                v1087[0] = "values in '";
                *(_QWORD *)&v1088 = v696;
                *((_QWORD *)&v1088 + 1) = v695;
                *(_QWORD *)v1090 = v1087;
                *(_QWORD *)&v1090[16] = "' directive must be enclosed in angle brackets";
                LOWORD(v1091) = 770;
                if (llvm::MCAsmParser::parseToken(v1067, 38, (llvm::Twine *)v1090))
                  goto LABEL_1440;
                v954 = 0;
                for (k = 0; ; k = (_QWORD *)v1073.__r_.__value_.__l.__size_)
                {
                  if ((unint64_t)k >= v954)
                  {
                    v957 = v1073.__r_.__value_.__r.__words[0];
                    v958 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)((uint64_t)k - v1073.__r_.__value_.__r.__words[0]) >> 3);
                    v959 = v958 + 1;
                    if (v958 + 1 > 0xAAAAAAAAAAAAAAALL)
                      goto LABEL_1877;
                    v960 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v954 - v1073.__r_.__value_.__r.__words[0]) >> 3);
                    if (2 * v960 > v959)
                      v959 = 2 * v960;
                    if (v960 >= 0x555555555555555)
                      v961 = 0xAAAAAAAAAAAAAAALL;
                    else
                      v961 = v959;
                    if (v961 > 0xAAAAAAAAAAAAAAALL)
                      goto LABEL_1878;
                    v962 = 3 * v961;
                    v963 = (char *)operator new(24 * v961);
                    v964 = &v963[24 * v958];
                    *((_QWORD *)v964 + 1) = 0;
                    *((_QWORD *)v964 + 2) = 0;
                    v965 = (std::string::size_type)&v963[8 * v962];
                    v956 = (std::string::size_type)(v964 + 24);
                    *(_QWORD *)v964 = 0;
                    if (k == (_QWORD *)v957)
                    {
                      v1073.__r_.__value_.__r.__words[0] = (std::string::size_type)&v963[24 * v958];
                      v1073.__r_.__value_.__l.__size_ = (std::string::size_type)(v964 + 24);
                      v1073.__r_.__value_.__r.__words[2] = v965;
                    }
                    else
                    {
                      v966 = k;
                      do
                      {
                        v967 = *(_OWORD *)(v966 - 3);
                        v966 -= 3;
                        *(_OWORD *)(v964 - 24) = v967;
                        v964 -= 24;
                        *((_QWORD *)v964 + 2) = v966[2];
                        *v966 = 0;
                        v966[1] = 0;
                        v966[2] = 0;
                      }
                      while (v966 != (_QWORD *)v957);
                      v1073.__r_.__value_.__r.__words[0] = (std::string::size_type)v964;
                      v1073.__r_.__value_.__l.__size_ = v956;
                      v1073.__r_.__value_.__r.__words[2] = v965;
                      do
                      {
                        k -= 3;
                        *(_QWORD *)__dst = k;
                        sub_1C5934A7C((void ***)__dst);
                      }
                      while (k != (_QWORD *)v957);
                      k = (_QWORD *)v957;
                    }
                    if (k)
                      operator delete(k);
                  }
                  else
                  {
                    v956 = (std::string::size_type)(k + 3);
                    *k = 0;
                    k[1] = 0;
                    k[2] = 0;
                  }
                  v1073.__r_.__value_.__l.__size_ = v956;
                  if (sub_1C610F540((uint64_t)v1067, (uint64_t *)__str, v956 - 24, 42))
                    break;
                  if (!llvm::MCAsmParser::parseOptionalToken(v1067, 25))
                  {
                    LOWORD(v1107) = 1283;
                    *(_QWORD *)v1106 = "values in '";
                    *(_QWORD *)&v1106[16] = v696;
                    *(_QWORD *)&v1106[24] = v695;
                    *(_QWORD *)__dst = v1106;
                    *(_QWORD *)&__dst[16] = "' directive must be enclosed in angle brackets";
                    *(_WORD *)&__dst[32] = 770;
                    if (!llvm::MCAsmParser::parseToken(v1067, 42, (llvm::Twine *)__dst))
                    {
                      *(_QWORD *)v1090 = "expected End of Statement";
                      LOWORD(v1091) = 259;
                      if (!llvm::MCAsmParser::parseEOL(v1067, (const llvm::Twine *)v1090))
                      {
                        v1002 = sub_1C6112910((uint64_t)v1067, (uint64_t)v694);
                        if (v1002)
                        {
                          *(_QWORD *)__dst = &__dst[24];
                          *(_OWORD *)&__dst[8] = xmmword_1C64638F0;
                          *(_DWORD *)&v1106[8] = 0;
                          BYTE8(v1107) = 0;
                          v1108 = 0;
                          *(_QWORD *)v1106 = &off_1E81A7280;
                          *((_QWORD *)&v1109 + 1) = __dst;
                          LODWORD(v1109) = 0;
                          *(_QWORD *)&v1107 = 0;
                          *(_OWORD *)&v1106[16] = 0uLL;
                          __s1j = v1073.__r_.__value_.__l.__size_;
                          v1003 = v1073.__r_.__value_.__r.__words[0];
                          if (v1073.__r_.__value_.__r.__words[0] == v1073.__r_.__value_.__l.__size_)
                          {
LABEL_1971:
                            v1010 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067);
                            sub_1C6112ED8((uint64_t)v1067, (uint64_t)v694, *(_QWORD *)(*(_QWORD *)(v1010 + 8) + 8), (llvm::raw_ostream *)v1106);
                            LOBYTE(v9) = 0;
                          }
                          else
                          {
                            v1004 = v1002;
                            v1005 = (uint64_t *)(v1002 + 56);
                            v1006 = v1073.__r_.__value_.__r.__words[0];
                            while (1)
                            {
                              v1007 = *(unsigned __int8 **)(v1004 + 16);
                              v1008 = *(_QWORD *)(v1004 + 24);
                              v1009 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067);
                              LOBYTE(v9) = 1;
                              if ((sub_1C610D108((uint64_t)v1067, (llvm::raw_ostream *)v1106, v1007, v1008, (uint64_t)__str, 1u, v1003, 1, v1005, *(_QWORD *)(*(_QWORD *)(v1009 + 8) + 8)) & 1) != 0)break;
                              v1006 += 24;
                              v1003 += 24;
                              if (v1006 == __s1j)
                                goto LABEL_1971;
                            }
                          }
                          *(_QWORD *)v1106 = off_1E81A6E70;
                          if ((_DWORD)v1109 == 1 && *(_QWORD *)&v1106[16])
                            MEMORY[0x1CAA32F9C](*(_QWORD *)&v1106[16], 0x1000C8077774924);
                          if (*(_BYTE **)__dst != &__dst[24])
                            free(*(void **)__dst);
LABEL_1441:
                          *(_QWORD *)__dst = &v1073;
                          sub_1C60E8D20((void ***)__dst);
                          *(_QWORD *)__dst = (char *)&__str[0].__r_.__value_.__l + 16;
LABEL_1478:
                          sub_1C5934A7C((void ***)__dst);
                          goto LABEL_215;
                        }
                      }
                    }
LABEL_1440:
                    LOBYTE(v9) = 1;
                    goto LABEL_1441;
                  }
                  llvm::MCAsmParser::parseOptionalToken(v1067, 9);
                  v954 = v1073.__r_.__value_.__r.__words[2];
                }
                LOWORD(v1107) = 1283;
                *(_QWORD *)v1106 = " in arguments for '";
                *(_QWORD *)&v1106[16] = v696;
                *(_QWORD *)&v1106[24] = v695;
                *(_QWORD *)__dst = v1106;
                *(_QWORD *)&__dst[16] = "' directive";
                *(_WORD *)&__dst[32] = 770;
                v981 = llvm::MCAsmParser::addErrorSuffix(v1067, (const llvm::Twine *)__dst);
LABEL_1911:
                LOBYTE(v9) = v981;
                goto LABEL_1441;
              }
              v1115 = 0uLL;
              v974 = *((_QWORD *)v1067 + 17);
              if ((*(unsigned int (**)(llvm::MCAsmParser *, __int128 *))(*(_QWORD *)v1067 + 192))(v1067, &v1115))
              {
                v1089 = 1283;
                v1087[0] = "missing parameter qualifier for '";
                v1088 = *(_OWORD *)&__str[0].__r_.__value_.__l.__data_;
                *(_QWORD *)v1090 = v1087;
                *(_QWORD *)&v1090[16] = "' in '";
                LOWORD(v1091) = 770;
                *(_QWORD *)v1106 = v1090;
                *(_QWORD *)&v1106[16] = v696;
                *(_QWORD *)&v1106[24] = v695;
                LOWORD(v1107) = 1282;
                *(_QWORD *)__dst = v1106;
                *(_QWORD *)&__dst[16] = "' directive";
                *(_WORD *)&__dst[32] = 770;
              }
              else
              {
                v976 = *((_QWORD *)&v1115 + 1);
                if (*((_QWORD *)&v1115 + 1) == 3
                  && !llvm::StringRef::compare_insensitive((unsigned __int8 **)&v1115, "req", 3uLL))
                {
                  __str[1].__r_.__value_.__s.__data_[16] = 1;
                  goto LABEL_1439;
                }
                v1086 = 773;
                v1085.__r_.__value_.__r.__words[0] = v1115;
                v1085.__r_.__value_.__l.__size_ = v976;
                v1085.__r_.__value_.__r.__words[2] = (std::string::size_type)" is not a valid parameter qualifier for '";
                v1087[0] = &v1085;
                v1088 = *(_OWORD *)&__str[0].__r_.__value_.__l.__data_;
                v1089 = 1282;
                *(_QWORD *)v1090 = v1087;
                *(_QWORD *)&v1090[16] = "' in '";
                LOWORD(v1091) = 770;
                *(_QWORD *)v1106 = v1090;
                *(_QWORD *)&v1106[16] = v696;
                *(_QWORD *)&v1106[24] = v695;
                LOWORD(v1107) = 1282;
                *(_QWORD *)__dst = v1106;
                *(_QWORD *)&__dst[16] = "' directive";
                *(_WORD *)&__dst[32] = 770;
              }
              v981 = llvm::MCAsmParser::Error((uint64_t)v1067, v974, (uint64_t)__dst, 0, 0);
              goto LABEL_1911;
            case 37:
              v730 = *((_QWORD *)&v1080 + 1);
              v729 = v1081;
              v731 = v1080;
              memset(__str, 0, 42);
              memset(&v1085, 0, sizeof(v1085));
              v732 = (*(uint64_t (**)(llvm::MCAsmParser *, std::string *))(*(_QWORD *)v1067 + 192))(v1067, __str);
              LOWORD(v1107) = 1283;
              *(_QWORD *)v1106 = "expected identifier in '";
              *(_QWORD *)&v1106[16] = v731;
              *(_QWORD *)&v1106[24] = v730;
              *(_QWORD *)__dst = v1106;
              *(_QWORD *)&__dst[16] = "' directive";
              *(_WORD *)&__dst[32] = 770;
              v733 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067);
              if ((v732 & 1) != 0)
              {
                llvm::MCAsmParser::Error((uint64_t)v1067, *(_QWORD *)(*(_QWORD *)(v733 + 8) + 8), (uint64_t)__dst, 0, 0);
              }
              else
              {
                v1089 = 1283;
                v1087[0] = "expected comma in '";
                *(_QWORD *)&v1088 = v731;
                *((_QWORD *)&v1088 + 1) = v730;
                *(_QWORD *)v1090 = v1087;
                *(_QWORD *)&v1090[16] = "' directive";
                LOWORD(v1091) = 770;
                if (!llvm::MCAsmParser::parseToken(v1067, 25, (llvm::Twine *)v1090))
                {
                  if ((*(unsigned int (**)(llvm::MCAsmParser *, std::string *))(*(_QWORD *)v1067 + 216))(v1067, &v1085))
                  {
                    sub_1C6109CB4((std::string *)__dst, (uint64_t)v1067);
                    if (SHIBYTE(v1085.__r_.__value_.__r.__words[2]) < 0)
                      operator delete(v1085.__r_.__value_.__l.__data_);
                    v1085 = *(std::string *)__dst;
                    if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067)
                                     + 8) == 9)
                    {
                      v920 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067);
                      std::string::append(&v1085, *(const std::string::value_type **)(*(_QWORD *)(v920 + 8) + 8), *(_QWORD *)(*(_QWORD *)(v920 + 8) + 16));
                    }
                    v921 = *((_BYTE *)&v1085.__r_.__value_.__s + 23) & 0x7F;
                    v922 = 0;
                    if ((v1085.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                      v921 = v1085.__r_.__value_.__l.__size_;
                    if (v921)
                    {
                      v977 = &v1085;
                      if ((v1085.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                        v977 = (std::string *)v1085.__r_.__value_.__r.__words[0];
                      do
                      {
                        v978 = v977->__r_.__value_.__s.__data_[v922];
                        v824 = v978 > 0x20;
                        v979 = (1 << v978) & 0x100003E00;
                        if (!v824 && v979 != 0)
                          goto LABEL_1820;
                        ++v922;
                      }
                      while (v921 != v922);
                      v922 = v921;
                    }
LABEL_1820:
                    std::string::resize(&v1085, v922, 0);
                  }
                  *(_QWORD *)__dst = "expected end of statement";
                  *(_WORD *)&__dst[32] = 259;
                  if (!llvm::MCAsmParser::parseEOL(v1067, (const llvm::Twine *)__dst))
                  {
                    v923 = sub_1C6112910((uint64_t)v1067, (uint64_t)v729);
                    if (v923)
                    {
                      v924 = v923;
                      v925 = 0;
                      *(_QWORD *)__dst = &__dst[24];
                      *(_OWORD *)&__dst[8] = xmmword_1C64638F0;
                      *(_DWORD *)&v1106[8] = 0;
                      BYTE8(v1107) = 0;
                      v1108 = 0;
                      *(_QWORD *)v1106 = &off_1E81A7280;
                      *((_QWORD *)&v1109 + 1) = __dst;
                      LODWORD(v1109) = 0;
                      *(_QWORD *)&v1106[24] = 0;
                      *(_QWORD *)&v1107 = 0;
                      v926 = &v1085;
                      if ((v1085.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                        v926 = (std::string *)v1085.__r_.__value_.__r.__words[0];
                      __s1i = v926;
                      if ((v1085.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                        v927 = *((_BYTE *)&v1085.__r_.__value_.__s + 23) & 0x7F;
                      else
                        v927 = v1085.__r_.__value_.__l.__size_;
                      v928 = (uint64_t *)(v923 + 56);
                      *(_QWORD *)&v1106[16] = 0;
                      while (1)
                      {
                        LOBYTE(v9) = v927 != v925;
                        if (v927 == v925)
                          break;
                        v929 = v925 + 1;
                        if (v927 >= v925)
                          v930 = v925;
                        else
                          v930 = v927;
                        if (v930 <= v929)
                          v931 = v925 + 1;
                        else
                          v931 = v930;
                        if (v927 < v931)
                          v931 = v927;
                        v932 = (char *)__s1i + v930;
                        v933 = v931 - v930;
                        v1091 = &v1088;
                        v934 = operator new(0x28uLL);
                        *(_DWORD *)v934 = 2;
                        v934[1] = v932;
                        v934[2] = v933;
                        *((_DWORD *)v934 + 8) = 64;
                        v934[3] = 0;
                        v935 = v934 + 5;
                        v1087[0] = v934;
                        v1087[1] = v934 + 5;
                        *(_QWORD *)&v1088 = v934 + 5;
                        memset(v1090, 0, sizeof(v1090));
                        sub_1C63E9D68((uint64_t)v1090);
                        v1087[1] = v935;
                        v936 = *(unsigned __int8 **)(v924 + 16);
                        v937 = *(_QWORD *)(v924 + 24);
                        v938 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067);
                        LOBYTE(v936) = sub_1C610D108((uint64_t)v1067, (llvm::raw_ostream *)v1106, v936, v937, (uint64_t)__str, 1u, (uint64_t)v1087, 1, v928, *(_QWORD *)(*(_QWORD *)(v938 + 8) + 8));
                        *(_QWORD *)v1090 = v1087;
                        sub_1C5934A7C((void ***)v1090);
                        v925 = v929;
                        if ((v936 & 1) != 0)
                          goto LABEL_1892;
                      }
                      v975 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067);
                      sub_1C6112ED8((uint64_t)v1067, (uint64_t)v729, *(_QWORD *)(*(_QWORD *)(v975 + 8) + 8), (llvm::raw_ostream *)v1106);
LABEL_1892:
                      *(_QWORD *)v1106 = off_1E81A6E70;
                      if ((_DWORD)v1109 == 1 && *(_QWORD *)&v1106[16])
                        MEMORY[0x1CAA32F9C](*(_QWORD *)&v1106[16], 0x1000C8077774924);
                      if (*(_BYTE **)__dst != &__dst[24])
                        free(*(void **)__dst);
LABEL_1475:
                      if (SHIBYTE(v1085.__r_.__value_.__r.__words[2]) < 0)
                        operator delete(v1085.__r_.__value_.__l.__data_);
                      *(_QWORD *)__dst = (char *)&__str[0].__r_.__value_.__l + 16;
                      goto LABEL_1478;
                    }
                  }
                }
              }
              LOBYTE(v9) = 1;
              goto LABEL_1475;
            case 60:
              v515 = v1081;
              if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067) + 8) == 4)
              {
                v516 = *(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067) + 8);
                v519 = *(_QWORD *)(v516 + 24);
                v517 = v516 + 24;
                v518 = v519;
                if (*(_DWORD *)(v517 + 8) >= 0x41u)
                  v517 = v518;
                v520 = *(_QWORD *)v517;
                (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 184))(v1067);
                if (v520 < 0)
                {
                  v494 = "negative file number";
                  goto LABEL_1493;
                }
              }
              else
              {
                v520 = -1;
              }
              memset(__str, 0, 24);
              v620 = **(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067) + 8);
              *(_QWORD *)__dst = "unexpected token in '.file' directive";
              *(_WORD *)&__dst[32] = 259;
              v621 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067);
              if (v620 != 3)
              {
                llvm::MCAsmParser::Error((uint64_t)v1067, *(_QWORD *)(*(_QWORD *)(v621 + 8) + 8), (uint64_t)__dst, 0, 0);
                goto LABEL_1156;
              }
              if (((*(uint64_t (**)(llvm::MCAsmParser *, std::string *))(*(_QWORD *)v1067 + 208))(v1067, __str) & 1) != 0)
              {
LABEL_1156:
                LOBYTE(v9) = 1;
                goto LABEL_1176;
              }
              memset(v1090, 0, 24);
              if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067) + 8) == 3)
              {
                *(_QWORD *)__dst = "explicit path specified, but no file number";
                *(_WORD *)&__dst[32] = 259;
                v625 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067);
                if (v520 == -1)
                {
                  llvm::MCAsmParser::Error((uint64_t)v1067, *(_QWORD *)(*(_QWORD *)(v625 + 8) + 8), (uint64_t)__dst, 0, 0);
                  goto LABEL_1172;
                }
                if (((*(uint64_t (**)(llvm::MCAsmParser *, _BYTE *))(*(_QWORD *)v1067 + 208))(v1067, v1090) & 1) != 0)
                {
LABEL_1172:
                  LOBYTE(v9) = 1;
                  goto LABEL_1173;
                }
                v798 = *(std::string **)v1090;
                if (v1090[23] >= 0)
                  v798 = (std::string *)v1090;
                v799 = (void *)(v1090[23] & 0x7F);
                if (v1090[23] < 0)
                  v799 = *(void **)&v1090[8];
                __pe = v799;
                __s1g = v798;
                v800 = __str;
                if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v800 = (std::string *)__str[0].__r_.__value_.__r.__words[0];
                v801 = *((_BYTE *)&__str[0].__r_.__value_.__s + 23) & 0x7F;
                if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v801 = __str[0].__r_.__value_.__l.__size_;
                v1042 = v801;
                v1048 = v800;
              }
              else
              {
                v1042 = 0;
                v1048 = 0;
                v771 = __str;
                if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v771 = (std::string *)__str[0].__r_.__value_.__r.__words[0];
                v772 = *((_BYTE *)&__str[0].__r_.__value_.__s + 23) & 0x7F;
                if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
                  v772 = __str[0].__r_.__value_.__l.__size_;
                __pe = (void *)v772;
                __s1g = v771;
              }
              v1087[0] = 0;
              v1087[1] = 0;
              *(_QWORD *)&v1088 = 0;
              if (llvm::MCAsmParser::parseOptionalToken(v1067, 9))
              {
                v803 = 0;
                v804 = 0;
                v805 = 0;
                v806 = 0;
LABEL_1567:
                if (v520 == -1)
                {
                  if (*(_BYTE *)(*(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 48))(v1067)
                                            + 152)
                                + 364))
                  {
                    v880 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 56))(v1067);
                    (*(void (**)(uint64_t, std::string *, void *))(*(_QWORD *)v880 + 656))(v880, __s1g, __pe);
                  }
                }
                else
                {
                  v807 = *((_QWORD *)v1067 + 27);
                  if (*(_BYTE *)(v807 + 1513))
                  {
                    *(_DWORD *)v1106 = 0;
                    *(_QWORD *)__dst = v1106;
                    v808 = sub_1C592911C((uint64_t **)(v807 + 1472), (unsigned int *)v1106, (uint64_t)&std::piecewise_construct, (_DWORD **)__dst);
                    sub_1C60EA614((uint64_t)(v808 + 40));
                    v807 = *((_QWORD *)v1067 + 27);
                    *(_BYTE *)(v807 + 1513) = 0;
                  }
                  if ((v806 & 1) != 0)
                  {
                    v809 = (uint64x2_t)vdupq_n_s64(v804);
                    v810 = (uint64x2_t)vdupq_n_s64(v803);
                    *(int8x8_t *)v809.i8 = vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v809, (uint64x2_t)xmmword_1C86782F0), (int32x4_t)vshlq_u64(v809, (uint64x2_t)xmmword_1C86782E0)), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v809, (uint64x2_t)xmmword_1C8678310), (int32x4_t)vshlq_u64(v809, (uint64x2_t)xmmword_1C8678300))));
                    v3 = vmovn_s16(vuzp1q_s16((int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v810, (uint64x2_t)xmmword_1C86782F0), (int32x4_t)vshlq_u64(v810, (uint64x2_t)xmmword_1C86782E0)), (int16x8_t)vuzp1q_s32((int32x4_t)vshlq_u64(v810, (uint64x2_t)xmmword_1C8678310), (int32x4_t)vshlq_u64(v810, (uint64x2_t)xmmword_1C8678300))));
                    v811 = v809.i8[0];
                    v1036 = vext_s8(*(int8x8_t *)v809.i8, *(int8x8_t *)v809.i8, 1uLL);
                    v812 = 1;
                  }
                  else
                  {
                    v812 = 0;
                    v811 = 0;
                    v1036 = v802;
                  }
                  if ((v805 & 1) != 0)
                  {
                    if ((SBYTE7(v1088) & 0x80u) == 0)
                      v881 = BYTE7(v1088) & 0x7F;
                    else
                      v881 = v1087[1];
                    v882 = (void *)sub_1C484358C(v807 + 192, v881, 3);
                    v883 = (std::string::size_type)v882;
                    if ((SBYTE7(v1088) & 0x80u) == 0)
                      v884 = v1087;
                    else
                      v884 = (void **)v1087[0];
                    if ((SBYTE7(v1088) & 0x80u) == 0)
                      v885 = BYTE7(v1088) & 0x7F;
                    else
                      v885 = (size_t)v1087[1];
                    memcpy(v882, v884, v885);
                    if ((SBYTE7(v1088) & 0x80u) == 0)
                      v804 = BYTE7(v1088) & 0x7F;
                    else
                      v804 = (unint64_t)v1087[1];
                    v886 = 1;
                  }
                  else
                  {
                    v886 = 0;
                    v883 = 0;
                  }
                  if (v520)
                  {
                    v887 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 56))(v1067);
                    LOBYTE(v1112) = v811;
                    HIBYTE(v1112) = v1036.i8[6];
                    *(_WORD *)((char *)&v1112 + 5) = v1036.i16[2];
                    *(_DWORD *)((char *)&v1112 + 1) = v1036.i32[0];
                    v1113 = (std::string *)v3;
                    LOBYTE(v1114) = v812;
                    v1073.__r_.__value_.__r.__words[0] = v883;
                    v1073.__r_.__value_.__l.__size_ = v804;
                    v1073.__r_.__value_.__s.__data_[16] = v886;
                    *(_DWORD *)((char *)&v1073.__r_.__value_.__r.__words[2] + 1) = v1083;
                    HIDWORD(v1073.__r_.__value_.__r.__words[2]) = *(_DWORD *)((char *)&v1083 + 3);
                    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, std::string *, std::string::size_type, std::string *, void *, std::string **, std::string *, _DWORD))(*(_QWORD *)v887 + 680))(&v1104, v887, v520, v1048, v1042, __s1g, __pe, &v1112, &v1073, 0);
                    if ((v1105 & 1) != 0)
                    {
                      v888 = (char *)v1104;
                      v1104 = 0;
                      v1082 = v888;
                      sub_1C61D2548(&v1082, (std::string *)v1106);
                      *(_WORD *)&__dst[32] = 260;
                      *(_QWORD *)__dst = v1106;
                      LOBYTE(v9) = llvm::MCAsmParser::Error((uint64_t)v1067, (uint64_t)v515, (uint64_t)__dst, 0, 0);
                      if ((v1106[23] & 0x80000000) != 0)
                        operator delete(*(void **)v1106);
                      if (v1082)
                        (*(void (**)(char *))(*(_QWORD *)v1082 + 8))(v1082);
                      if ((v1105 & 1) != 0)
                      {
                        v889 = v1104;
                        v1104 = 0;
                        if (v889)
                          (*(void (**)(uint64_t))(*(_QWORD *)v889 + 8))(v889);
                      }
                      goto LABEL_1951;
                    }
                  }
                  else
                  {
                    if (*(unsigned __int16 *)(*((_QWORD *)v1067 + 27) + 1624) <= 4u)
                    {
                      *(_QWORD *)__dst = "file 0 not supported prior to DWARF-5";
                      *(_WORD *)&__dst[32] = 259;
                      v897 = v1067;
LABEL_1800:
                      LOBYTE(v9) = (*(uint64_t (**)(llvm::MCAsmParser *, char *, _BYTE *, _QWORD, _QWORD))(*(_QWORD *)v897 + 168))(v897, v515, __dst, 0, 0);
                      goto LABEL_1951;
                    }
                    v909 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 56))(v1067);
                    LOBYTE(v1115) = v811;
                    BYTE7(v1115) = v1036.i8[6];
                    *(_WORD *)((char *)&v1115 + 5) = v1036.i16[2];
                    *(_DWORD *)((char *)&v1115 + 1) = v1036.i32[0];
                    *((int8x8_t *)&v1115 + 1) = v3;
                    LOBYTE(v1116) = v812;
                    v1085.__r_.__value_.__r.__words[0] = v883;
                    v1085.__r_.__value_.__l.__size_ = v804;
                    v1085.__r_.__value_.__s.__data_[16] = v886;
                    *(_DWORD *)((char *)&v1085.__r_.__value_.__r.__words[2] + 1) = v1083;
                    HIDWORD(v1085.__r_.__value_.__r.__words[2]) = *(_DWORD *)((char *)&v1083 + 3);
                    (*(void (**)(uint64_t, std::string *, std::string::size_type, std::string *, void *, __int128 *, std::string *, _QWORD))(*(_QWORD *)v909 + 688))(v909, v1048, v1042, __s1g, __pe, &v1115, &v1085, 0);
                  }
                  if (!*((_BYTE *)v1067 + 1062))
                  {
                    v910 = (_QWORD *)(*((_QWORD *)v1067 + 27) + 1480);
                    do
                    {
                      v911 = (uint64_t)v910;
                      v910 = (_QWORD *)*v910;
                    }
                    while (v910);
                    if (v911 == *((_QWORD *)v1067 + 27) + 1480 || *(_DWORD *)(v911 + 32))
                      v911 = *((_QWORD *)v1067 + 27) + 1480;
                    if (*(_DWORD *)(v911 + 144) && *(unsigned __int8 *)(v911 + 497) != *(unsigned __int8 *)(v911 + 498))
                    {
                      v897 = v1067;
                      *((_BYTE *)v1067 + 1062) = 1;
                      *(_QWORD *)__dst = "inconsistent use of MD5 checksums";
                      *(_WORD *)&__dst[32] = 259;
                      goto LABEL_1800;
                    }
                  }
                }
                LOBYTE(v9) = 0;
                goto LABEL_1951;
              }
              v806 = 0;
              v805 = 0;
              v804 = 0;
              v803 = 0;
              while (1)
              {
                v1083 = 0;
                v1084 = 0;
                v813 = **(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067)
                                   + 8);
                *(_QWORD *)__dst = "unexpected token in '.file' directive";
                *(_WORD *)&__dst[32] = 259;
                v814 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067);
                if (v813 != 2)
                {
LABEL_1941:
                  v989 = *(_QWORD *)(*(_QWORD *)(v814 + 8) + 8);
                  v990 = __dst;
                  goto LABEL_1948;
                }
                if (((*(uint64_t (**)(llvm::MCAsmParser *, uint64_t *))(*(_QWORD *)v1067 + 192))(v1067, &v1083) & 1) != 0)goto LABEL_1950;
                if (v1084 != 6)
                  break;
                if (*(_DWORD *)v1083 != 1920298867 || *(_WORD *)(v1083 + 4) != 25955)
                {
LABEL_1942:
                  *(_QWORD *)__dst = "unexpected token in '.file' directive";
                  goto LABEL_1943;
                }
                *(_QWORD *)__dst = "source specified, but no file number";
                *(_WORD *)&__dst[32] = 259;
                v814 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067);
                if (v520 == -1)
                  goto LABEL_1941;
                v820 = **(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067)
                                   + 8);
                *(_QWORD *)v1106 = "unexpected token in '.file' directive";
                LOWORD(v1107) = 259;
                v816 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067);
                if (v820 != 3)
                {
LABEL_1947:
                  v989 = *(_QWORD *)(*(_QWORD *)(v816 + 8) + 8);
                  v990 = v1106;
LABEL_1948:
                  v991 = (uint64_t)v1067;
LABEL_1949:
                  llvm::MCAsmParser::Error(v991, v989, (uint64_t)v990, 0, 0);
LABEL_1950:
                  LOBYTE(v9) = 1;
LABEL_1951:
                  if (SBYTE7(v1088) < 0)
                    operator delete(v1087[0]);
LABEL_1173:
                  if ((v1090[23] & 0x80000000) != 0)
                  {
                    v626 = *(void **)v1090;
LABEL_1175:
                    operator delete(v626);
                  }
LABEL_1176:
                  if ((SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
                    goto LABEL_215;
                  v554 = (char *)__str[0].__r_.__value_.__r.__words[0];
LABEL_1643:
                  operator delete(v554);
                  goto LABEL_215;
                }
                if (((*(uint64_t (**)(llvm::MCAsmParser *, void **))(*(_QWORD *)v1067 + 208))(v1067, v1087) & 1) != 0)
                  goto LABEL_1950;
                v805 = 1;
LABEL_1620:
                if (llvm::MCAsmParser::parseOptionalToken(v1067, 9))
                  goto LABEL_1567;
              }
              if (v1084 != 3)
                goto LABEL_1942;
              if (*(_WORD *)v1083 != 25709 || *(_BYTE *)(v1083 + 2) != 53)
                goto LABEL_1942;
              *(_QWORD *)v1106 = "MD5 checksum specified, but no file number";
              LOWORD(v1107) = 259;
              v816 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067);
              if (v520 == -1)
                goto LABEL_1947;
              if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067) + 8) != 4
                && **(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067) + 8) != 5)
              {
                *(_QWORD *)__dst = "unknown token in expression";
LABEL_1943:
                *(_WORD *)&__dst[32] = 259;
                v989 = *(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067) + 96);
                v990 = __dst;
                v991 = (uint64_t)v1067;
                goto LABEL_1949;
              }
              v817 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067)
                                           + 8)
                               + 8);
              v818 = *(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067) + 8);
              LODWORD(v1105) = *(_DWORD *)(v818 + 32);
              if (v1105 > 0x40)
              {
                v1104 = operator new[]();
                memcpy((void *)v1104, *(const void **)(v818 + 24), (((unint64_t)v1105 + 63) >> 3) & 0x3FFFFFF8);
              }
              else
              {
                v1104 = *(_QWORD *)(v818 + 24);
              }
              (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 184))(v1067);
              if (v1105 >= 0x41)
              {
                v822 = 0;
                v821 = (unint64_t *)v1104;
                v823 = ((unint64_t)v1105 + 63) >> 6;
                do
                {
                  v824 = v823-- < 1;
                  if (v824)
                    break;
                  v825 = *(_QWORD *)(v1104 + 8 * v823);
                  v822 += __clz(v825);
                }
                while (!v825);
                v826 = v1105 | 0xFFFFFFC0;
                if ((v1105 & 0x3F) == 0)
                  v826 = 0;
                v827 = v1105 - v822 - v826;
                if (v827 >= 0x81)
                {
                  *(_QWORD *)__dst = "out of range literal value";
                  *(_WORD *)&__dst[32] = 259;
                  v828 = llvm::MCAsmParser::Error((uint64_t)v1067, v817, (uint64_t)__dst, 0, 0);
LABEL_1615:
                  if (v1105 >= 0x41 && v1104)
                    MEMORY[0x1CAA32F9C](v1104, 0x1000C8000313F17);
                  if ((v828 & 1) != 0)
                    goto LABEL_1950;
                  v806 = 1;
                  goto LABEL_1620;
                }
                if (v827 >= 0x41)
                {
                  llvm::APInt::getHiBits((llvm::APInt *)&v1104, v1105 - 64, (uint64_t)__dst);
                  v829 = (unint64_t *)__dst;
                  if (*(_DWORD *)&__dst[8] >= 0x41u)
                    v829 = *(unint64_t **)__dst;
                  v804 = *v829;
                  if (*(_DWORD *)&__dst[8] >= 0x41u && *(_QWORD *)__dst)
                    MEMORY[0x1CAA32F9C]();
                  *(_DWORD *)&__dst[8] = v1105;
                  if (v1105 < 0x41
                    || (llvm::APInt::initSlowCase((llvm::APInt *)__dst, 0, 0),
                        v830 = *(unsigned int *)&__dst[8],
                        *(_DWORD *)&__dst[8] <= 0x40u))
                  {
                    v803 = v1104;
                  }
                  else
                  {
                    v831 = 0;
                    v832 = *(unint64_t **)__dst;
                    **(_QWORD **)__dst = -1;
                    v833 = v1104;
                    v834 = ((unint64_t)(v830 + 63) >> 3) & 0x3FFFFFF8;
                    do
                    {
                      v832[v831 / 8] &= *(_QWORD *)(v833 + v831);
                      v831 += 8;
                    }
                    while (v834 != v831);
                    v803 = *v832;
                    MEMORY[0x1CAA32F9C]();
                  }
                  v828 = 0;
                  goto LABEL_1615;
                }
              }
              else
              {
                v821 = (unint64_t *)&v1104;
              }
              v804 = 0;
              v828 = 0;
              v803 = *v821;
              goto LABEL_1615;
            case 61:
              if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067) + 8) == 4)
              {
                *(_QWORD *)__dst = "unexpected token in '.line' directive";
                *(_WORD *)&__dst[32] = 259;
                if (llvm::MCAsmParser::parseIntToken(v1067, (uint64_t *)v1106, (const llvm::Twine *)__dst))
                  goto LABEL_260;
              }
              *(_QWORD *)__dst = "unexpected token in '.line' directive";
              *(_WORD *)&__dst[32] = 259;
              v468 = (const llvm::Twine *)__dst;
              goto LABEL_950;
            case 62:
              *(_QWORD *)v1090 = 0;
              v484 = *(char **)(*(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067)
                                          + 8)
                              + 8);
              *(_QWORD *)__dst = "unexpected token in '.loc' directive";
              *(_WORD *)&__dst[32] = 259;
              if (llvm::MCAsmParser::parseIntToken(v1067, (uint64_t *)v1090, (const llvm::Twine *)__dst))
                goto LABEL_260;
              v565 = *(_QWORD *)v1090;
              if (*(uint64_t *)v1090 <= 0)
              {
                v566 = *(unsigned __int16 *)(*((_QWORD *)v1067 + 27) + 1624);
                *(_QWORD *)v1106 = "file number less than one in '.loc' directive";
                LOWORD(v1107) = 259;
                if (v566 <= 4)
                {
                  v489 = (std::string *)v1106;
LABEL_1632:
                  v569 = (uint64_t)v1067;
                  v570 = (uint64_t)v484;
                  goto LABEL_1496;
                }
              }
              v740 = (uint64_t **)(*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 48))(v1067);
              isValidDwarfFileNumber = llvm::MCContext::isValidDwarfFileNumber(v740, v565, 0);
              __str[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"unassigned file number in '.loc' directive";
              LOWORD(__str[1].__r_.__value_.__r.__words[1]) = 259;
              if (!isValidDwarfFileNumber)
              {
                v489 = __str;
                goto LABEL_1632;
              }
              if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067) + 8) == 4)
              {
                v742 = *(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067) + 8);
                v745 = *(uint64_t **)(v742 + 24);
                v743 = (uint64_t *)(v742 + 24);
                v744 = v745;
                if (*((_DWORD *)v743 + 2) >= 0x41u)
                  v743 = v744;
                v746 = *v743;
                if (*v743 < 0)
                {
                  v494 = "line number less than zero in '.loc' directive";
                  goto LABEL_1493;
                }
                (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 184))(v1067);
              }
              else
              {
                v746 = 0;
              }
              if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067) + 8) != 4)
                goto LABEL_1772;
              v899 = *(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067) + 8);
              v902 = *(_QWORD *)(v899 + 24);
              v900 = v899 + 24;
              v901 = v902;
              if (*(_DWORD *)(v900 + 8) >= 0x41u)
                v900 = v901;
              if ((*(_QWORD *)v900 & 0x8000000000000000) == 0)
              {
                (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 184))(v1067);
LABEL_1772:
                LODWORD(__str[0].__r_.__value_.__l.__data_) = *(_BYTE *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 48))(v1067)
                                                                       + 1506) & 1;
                LODWORD(v1087[0]) = 0;
                *(_QWORD *)v1106 = 0;
                *(_QWORD *)__dst = v1067;
                *(_QWORD *)&__dst[8] = __str;
                *(_QWORD *)&__dst[16] = v1087;
                *(_QWORD *)&__dst[24] = v1106;
                LOBYTE(v9) = llvm::MCAsmParser::parseMany(v1067, (unsigned int (*)(uint64_t))sub_1C611314C, (uint64_t)__dst, 0);
                if ((v9 & 1) == 0)
                {
                  v904 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 56))(v1067);
                  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v904 + 704))(v904, v565, v746);
                }
                goto LABEL_215;
              }
              v494 = "column position less than zero in '.loc' directive";
LABEL_1493:
              *(_QWORD *)__dst = v494;
              v737 = 259;
LABEL_1494:
              *(_WORD *)&__dst[32] = v737;
              v770 = v1067;
              v570 = *(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067) + 96);
              goto LABEL_1495;
            case 63:
              *(_QWORD *)__dst = "unsupported directive '.stabs'";
              *(_WORD *)&__dst[32] = 259;
              v570 = *(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067) + 96);
              v489 = (std::string *)__dst;
              v569 = (uint64_t)v1067;
              goto LABEL_1496;
            case 64:
              v550 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067)
                                           + 8)
                               + 8);
              v1085.__r_.__value_.__r.__words[0] = 0;
              memset(v1090, 0, 24);
              v1087[0] = 0;
              v1087[1] = 0;
              *(_QWORD *)&v1088 = 0;
              v1073.__r_.__value_.__r.__words[0] = 0;
              *(_QWORD *)__dst = "expected file number in '.cv_file' directive";
              *(_WORD *)&__dst[32] = 259;
              if (llvm::MCAsmParser::parseIntToken(v1067, (uint64_t *)&v1085, (const llvm::Twine *)__dst))
                goto LABEL_1019;
              v551 = v1085.__r_.__value_.__r.__words[0];
              *(_QWORD *)v1106 = "file number less than one";
              LOWORD(v1107) = 259;
              if ((uint64_t)v1085.__r_.__value_.__l.__data_ <= 0)
              {
                v767 = (std::string *)v1106;
                v768 = (uint64_t)v1067;
                v769 = v550;
              }
              else
              {
                v552 = **(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067)
                                   + 8);
                __str[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"unexpected token in '.cv_file' directive";
                LOWORD(__str[1].__r_.__value_.__r.__words[1]) = 259;
                v553 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067);
                if (v552 == 3)
                {
                  if (((*(uint64_t (**)(llvm::MCAsmParser *, _BYTE *))(*(_QWORD *)v1067 + 208))(v1067, v1090) & 1) != 0)
                  {
LABEL_1019:
                    LOBYTE(v9) = 1;
                    goto LABEL_1020;
                  }
                  if (llvm::MCAsmParser::parseOptionalToken(v1067, 9))
                  {
                    v773 = 0;
                    v774 = 0;
                    v775 = 0;
                    goto LABEL_1507;
                  }
                  v867 = **(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067)
                                     + 8);
                  *(_QWORD *)__dst = "unexpected token in '.cv_file' directive";
                  *(_WORD *)&__dst[32] = 259;
                  v868 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067);
                  if (v867 == 3)
                  {
                    if (((*(uint64_t (**)(llvm::MCAsmParser *, void **))(*(_QWORD *)v1067 + 208))(v1067, v1087) & 1) != 0)goto LABEL_1019;
                    *(_QWORD *)v1106 = "expected checksum kind in '.cv_file' directive";
                    LOWORD(v1107) = 259;
                    if (llvm::MCAsmParser::parseIntToken(v1067, (uint64_t *)&v1073, (const llvm::Twine *)v1106))
                      goto LABEL_1019;
                    __str[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"unexpected token in '.cv_file' directive";
                    LOWORD(__str[1].__r_.__value_.__r.__words[1]) = 259;
                    if (llvm::MCAsmParser::parseEOL(v1067, (const llvm::Twine *)__str))
                      goto LABEL_1019;
                    v775 = BYTE7(v1088);
                    v774 = (void **)v1087[0];
                    v773 = v1087[1];
LABEL_1507:
                    v776 = v775;
                    if (v775 >= 0)
                      v777 = v1087;
                    else
                      v777 = v774;
                    v778 = v775 & 0x7F;
                    if (v776 >= 0)
                      v779 = v778;
                    else
                      v779 = (unint64_t)v773;
                    memset(__dst, 0, 24);
                    if (v779)
                    {
                      std::string::resize((std::string *)__dst, (v779 + 1) >> 1, 0);
                      v780 = *(_BYTE **)__dst;
                      if (__dst[23] >= 0)
                        v781 = __dst;
                      else
                        v781 = *(_BYTE **)__dst;
                      if ((v779 & 1) != 0)
                      {
                        v782 = (unsigned __int16)word_1C85F7092[*(unsigned __int8 *)v777];
                        if (v782 == 0xFFFF)
                          goto LABEL_1531;
                        if (__dst[23] >= 0)
                          v780 = __dst;
                        *v781 = v782;
                        v781 = v780 + 1;
                        v783 = v1087;
                        if (v776 < 0)
                          v783 = v774;
                        v777 = (void **)((char *)v783 + 1);
                        --v779;
                      }
                      if (v779 >= 2)
                      {
                        v784 = v779 >> 1;
                        v785 = (unsigned __int8 *)v777 + 1;
                        do
                        {
                          v786 = (unsigned __int16)word_1C85F7092[*(v785 - 1)];
                          v787 = (unsigned __int16)word_1C85F7092[*v785];
                          if (v786 == 0xFFFF || v787 == 0xFFFF)
                            break;
                          v785 += 2;
                          *v781++ = v787 | (16 * v786);
                          --v784;
                        }
                        while (v784);
                      }
                    }
LABEL_1531:
                    if (SBYTE7(v1088) < 0)
                      operator delete(v1087[0]);
                    *(_QWORD *)&v1088 = *(_QWORD *)&__dst[16];
                    *(_OWORD *)v1087 = *(_OWORD *)__dst;
                    if (__dst[23] >= 0)
                      v789 = __dst[23] & 0x7F;
                    else
                      v789 = *(_DWORD *)&__dst[8];
                    v790 = (void *)sub_1C484358C(*((_QWORD *)v1067 + 27) + 192, v789, 0);
                    v791 = v790;
                    if ((SBYTE7(v1088) & 0x80u) == 0)
                      v792 = v1087;
                    else
                      v792 = (void **)v1087[0];
                    if ((SBYTE7(v1088) & 0x80u) == 0)
                      v793 = BYTE7(v1088) & 0x7F;
                    else
                      v793 = (size_t)v1087[1];
                    memcpy(v790, v792, v793);
                    if ((SBYTE7(v1088) & 0x80u) == 0)
                      v794 = (void *)(BYTE7(v1088) & 0x7F);
                    else
                      v794 = v1087[1];
                    v795 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 56))(v1067);
                    if (v1090[23] >= 0)
                      v796 = v1090;
                    else
                      v796 = *(_BYTE **)v1090;
                    if (v1090[23] >= 0)
                      v797 = v1090[23] & 0x7F;
                    else
                      v797 = *(_QWORD *)&v1090[8];
                    if (((*(uint64_t (**)(uint64_t, std::string::size_type, _BYTE *, uint64_t, void *, void *, _QWORD))(*(_QWORD *)v795 + 712))(v795, v551, v796, v797, v791, v794, v1073.__r_.__value_.__s.__data_[0]) & 1) != 0)
                    {
                      LOBYTE(v9) = 0;
                    }
                    else
                    {
                      *(_QWORD *)__dst = "file number already allocated";
                      *(_WORD *)&__dst[32] = 259;
                      LOBYTE(v9) = llvm::MCAsmParser::Error((uint64_t)v1067, v550, (uint64_t)__dst, 0, 0);
                    }
LABEL_1020:
                    if (SBYTE7(v1088) < 0)
                      operator delete(v1087[0]);
                    if ((v1090[23] & 0x80000000) == 0)
                      goto LABEL_215;
                    v554 = *(char **)v1090;
                    goto LABEL_1643;
                  }
                  v769 = *(_QWORD *)(*(_QWORD *)(v868 + 8) + 8);
                  v767 = (std::string *)__dst;
                }
                else
                {
                  v769 = *(_QWORD *)(*(_QWORD *)(v553 + 8) + 8);
                  v767 = __str;
                }
                v768 = (uint64_t)v1067;
              }
              llvm::MCAsmParser::Error(v768, v769, (uint64_t)v767, 0, 0);
              goto LABEL_1019;
            case 65:
              v234 = *(char **)(*(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067)
                                          + 8)
                              + 8);
              *(_QWORD *)v1106 = 0;
              if ((sub_1C60EAA40(v1067, (uint64_t *)v1106, (uint64_t)".cv_func_id", 11) & 1) != 0)
                goto LABEL_260;
              *(_QWORD *)__dst = "unexpected token in '.cv_func_id' directive";
              *(_WORD *)&__dst[32] = 259;
              if (llvm::MCAsmParser::parseEOL(v1067, (const llvm::Twine *)__dst))
                goto LABEL_260;
              v522 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 56))(v1067);
              if (((*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v522 + 720))(v522, *(unsigned int *)v1106) & 1) == 0)
                goto LABEL_954;
              goto LABEL_67;
            case 66:
              v234 = *(char **)(*(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067)
                                          + 8)
                              + 8);
              *(_QWORD *)v1106 = 0;
              __str[0].__r_.__value_.__r.__words[0] = 0;
              *(_QWORD *)v1090 = 0;
              v1087[0] = 0;
              if ((sub_1C60EAA40(v1067, (uint64_t *)v1106, (uint64_t)".cv_inline_site_id", 18) & 1) != 0)
                goto LABEL_260;
              if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067) + 8) != 2)
                goto LABEL_1403;
              v512 = *(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067) + 8);
              if (*(_DWORD *)v512 == 2)
              {
                v513 = *(int **)(v512 + 8);
                v514 = *(_QWORD *)(v512 + 16);
              }
              else
              {
                v513 = *(int **)(v512 + 8);
                v643 = *(_QWORD *)(v512 + 16);
                v644 = v643 - 1;
                v645 = v643 != 0;
                if (v643)
                  v513 = (int *)((char *)v513 + 1);
                if (v645 > v644)
                  v644 = v643 != 0;
                if (v643 < v644)
                  v644 = v643;
                v514 = v644 - v645;
              }
              if (v514 == 6)
              {
                v646 = *v513;
                v647 = *((unsigned __int16 *)v513 + 2);
                v649 = v646 != 1752459639 || v647 != 28265;
                *(_QWORD *)__dst = "expected 'within' identifier in '.cv_inline_site_id' directive";
                *(_WORD *)&__dst[32] = 259;
                v650 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067);
                if (v649)
                  goto LABEL_1423;
                (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 184))(v1067);
                if ((sub_1C60EAA40(v1067, (uint64_t *)__str, (uint64_t)".cv_inline_site_id", 18) & 1) != 0)
                  goto LABEL_260;
                if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067) + 8) == 2)
                {
                  v651 = *(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067)
                                   + 8);
                  if (*(_DWORD *)v651 == 2)
                  {
                    v652 = *(uint64_t **)(v651 + 8);
                    v653 = *(_QWORD *)(v651 + 16);
                  }
                  else
                  {
                    v652 = *(uint64_t **)(v651 + 8);
                    v673 = *(_QWORD *)(v651 + 16);
                    v674 = v673 - 1;
                    v675 = v673 != 0;
                    if (v673)
                      v652 = (uint64_t *)((char *)v652 + 1);
                    if (v675 > v674)
                      v674 = v673 != 0;
                    if (v673 < v674)
                      v674 = v673;
                    v653 = v674 - v675;
                  }
                  if (v653 == 10)
                  {
                    v676 = *v652;
                    v677 = *((unsigned __int16 *)v652 + 4);
                    v679 = v676 != 0x5F64656E696C6E69 || v677 != 29793;
                    *(_QWORD *)__dst = "expected 'inlined_at' identifier in '.cv_inline_site_id' directive";
                    *(_WORD *)&__dst[32] = 259;
                    v650 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067);
                    if (!v679)
                    {
                      (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 184))(v1067);
                      if ((sub_1C60EAB28((llvm::MCContext **)v1067, (uint64_t *)v1090, (uint64_t)".cv_inline_site_id", 18) & 1) != 0)goto LABEL_260;
                      *(_QWORD *)__dst = "expected line number after 'inlined_at'";
                      *(_WORD *)&__dst[32] = 259;
                      if (llvm::MCAsmParser::parseIntToken(v1067, (uint64_t *)v1087, (const llvm::Twine *)__dst))
                        goto LABEL_260;
                      if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067)
                                       + 8) == 4)
                      {
                        v680 = *(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067)
                                         + 8);
                        v683 = *(unsigned int **)(v680 + 24);
                        v681 = (unsigned int *)(v680 + 24);
                        v682 = v683;
                        if (v681[2] >= 0x41)
                          v681 = v682;
                        v684 = *v681;
                        (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 184))(v1067);
                      }
                      else
                      {
                        v684 = 0;
                      }
                      *(_QWORD *)__dst = "unexpected token in '.cv_inline_site_id' directive";
                      *(_WORD *)&__dst[32] = 259;
                      if (llvm::MCAsmParser::parseEOL(v1067, (const llvm::Twine *)__dst))
                        goto LABEL_260;
                      v917 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 56))(v1067);
                      if (((*(uint64_t (**)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, uint64_t, char *))(*(_QWORD *)v917 + 728))(v917, *(unsigned int *)v1106, LODWORD(__str[0].__r_.__value_.__l.__data_), *(unsigned int *)v1090, LODWORD(v1087[0]), v684, v234) & 1) == 0)
                      {
LABEL_954:
                        v523 = "function id already allocated";
                        goto LABEL_1883;
                      }
                      goto LABEL_67;
                    }
LABEL_1423:
                    v570 = *(_QWORD *)(*(_QWORD *)(v650 + 8) + 8);
                    v489 = (std::string *)__dst;
                    v569 = (uint64_t)v1067;
                    goto LABEL_1496;
                  }
                }
                v736 = "expected 'inlined_at' identifier in '.cv_inline_site_id' directive";
              }
              else
              {
LABEL_1403:
                v736 = "expected 'within' identifier in '.cv_inline_site_id' directive";
              }
              *(_QWORD *)__dst = v736;
              *(_WORD *)&__dst[32] = 259;
              v770 = v1067;
              v570 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067)
                                           + 8)
                               + 8);
LABEL_1495:
              v489 = (std::string *)__dst;
              v569 = (uint64_t)v770;
LABEL_1496:
              llvm::MCAsmParser::Error(v569, v570, (uint64_t)v489, 0, 0);
              goto LABEL_260;
            case 67:
              (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067);
              *(_QWORD *)v1106 = 0;
              __str[0].__r_.__value_.__r.__words[0] = 0;
              if ((sub_1C60EAA40(v1067, (uint64_t *)v1106, (uint64_t)".cv_loc", 7) & 1) != 0
                || (sub_1C60EAB28((llvm::MCContext **)v1067, (uint64_t *)__str, (uint64_t)".cv_loc", 7) & 1) != 0)
              {
                goto LABEL_260;
              }
              if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067) + 8) != 4)
                goto LABEL_1740;
              v490 = *(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067) + 8);
              v493 = *(_QWORD *)(v490 + 24);
              v491 = v490 + 24;
              v492 = v493;
              if (*(_DWORD *)(v491 + 8) >= 0x41u)
                v491 = v492;
              if ((*(_QWORD *)v491 & 0x8000000000000000) != 0)
              {
                v494 = "line number less than zero in '.cv_loc' directive";
                goto LABEL_1493;
              }
              (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 184))(v1067);
LABEL_1740:
              if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067) + 8) != 4)
                goto LABEL_1756;
              v890 = *(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067) + 8);
              v893 = *(_QWORD *)(v890 + 24);
              v891 = v890 + 24;
              v892 = v893;
              if (*(_DWORD *)(v891 + 8) >= 0x41u)
                v891 = v892;
              if ((*(_QWORD *)v891 & 0x8000000000000000) != 0)
              {
                v494 = "column position less than zero in '.cv_loc' directive";
                goto LABEL_1493;
              }
              (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 184))(v1067);
LABEL_1756:
              LOBYTE(v1087[0]) = 0;
              *(_QWORD *)v1090 = 0;
              *(_QWORD *)__dst = v1067;
              *(_QWORD *)&__dst[8] = v1087;
              *(_QWORD *)&__dst[16] = v1090;
              LOBYTE(v9) = llvm::MCAsmParser::parseMany(v1067, (unsigned int (*)(uint64_t))sub_1C61134C0, (uint64_t)__dst, 0);
              if ((v9 & 1) == 0)
              {
                v898 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 56))(v1067);
                (*(void (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)v898 + 736))(v898, *(unsigned int *)v1106, LODWORD(__str[0].__r_.__value_.__l.__data_));
              }
              goto LABEL_215;
            case 68:
              v1073.__r_.__value_.__r.__words[0] = 0;
              v1087[0] = 0;
              v1087[1] = 0;
              *(_OWORD *)&v1085.__r_.__value_.__l.__data_ = 0uLL;
              (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067);
              if ((sub_1C60EAA40(v1067, (uint64_t *)&v1073, (uint64_t)".cv_linetable", 13) & 1) != 0)
                goto LABEL_260;
              *(_QWORD *)__dst = "unexpected token in '.cv_linetable' directive";
              *(_WORD *)&__dst[32] = 259;
              if (llvm::MCAsmParser::parseToken(v1067, 25, (llvm::Twine *)__dst))
                goto LABEL_260;
              v567 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067)
                                           + 8)
                               + 8);
              v568 = (*(uint64_t (**)(llvm::MCAsmParser *, void **))(*(_QWORD *)v1067 + 192))(v1067, v1087);
              *(_QWORD *)v1106 = "expected identifier in directive";
              LOWORD(v1107) = 259;
              if (v568)
              {
                v489 = (std::string *)v1106;
              }
              else
              {
                __str[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"unexpected token in '.cv_linetable' directive";
                LOWORD(__str[1].__r_.__value_.__r.__words[1]) = 259;
                if (llvm::MCAsmParser::parseToken(v1067, 25, (llvm::Twine *)__str))
                  goto LABEL_260;
                v567 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067)
                                             + 8)
                                 + 8);
                v945 = (*(uint64_t (**)(llvm::MCAsmParser *, std::string *))(*(_QWORD *)v1067 + 192))(v1067, &v1085);
                *(_QWORD *)v1090 = "expected identifier in directive";
                LOWORD(v1091) = 259;
                if (!v945)
                {
                  v946 = v1067;
                  v947 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 48))(v1067);
                  *(_WORD *)&__dst[32] = 261;
                  *(void **)__dst = v1087[0];
                  *(void **)&__dst[8] = v1087[1];
                  v948 = llvm::MCContext::getOrCreateSymbol(v947, (uint64_t)__dst);
                  v949 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v946 + 48))(v946);
                  *(_WORD *)&__dst[32] = 261;
                  *(_OWORD *)__dst = *(_OWORD *)&v1085.__r_.__value_.__l.__data_;
                  v950 = llvm::MCContext::getOrCreateSymbol(v949, (uint64_t)__dst);
                  v951 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v946 + 56))(v946);
                  (*(void (**)(uint64_t, _QWORD, unint64_t, unint64_t))(*(_QWORD *)v951 + 744))(v951, LODWORD(v1073.__r_.__value_.__l.__data_), v948, v950);
                  goto LABEL_67;
                }
                v489 = (std::string *)v1090;
              }
              v569 = (uint64_t)v1067;
              v570 = v567;
              goto LABEL_1496;
            case 69:
              v1112 = 0;
              v1104 = 0;
              v1083 = 0;
              *(_OWORD *)&v1073.__r_.__value_.__l.__data_ = 0uLL;
              v1115 = 0uLL;
              (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067);
              if ((sub_1C60EAA40(v1067, (uint64_t *)&v1112, (uint64_t)".cv_inline_linetable", 20) & 1) != 0)
                goto LABEL_260;
              v526 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067)
                                           + 8)
                               + 8);
              *(_QWORD *)__dst = "expected SourceField in '.cv_inline_linetable' directive";
              *(_WORD *)&__dst[32] = 259;
              if (llvm::MCAsmParser::parseIntToken(v1067, &v1104, (const llvm::Twine *)__dst))
                goto LABEL_260;
              v527 = v1104;
              *(_QWORD *)v1106 = "File id less than zero in '.cv_inline_linetable' directive";
              LOWORD(v1107) = 259;
              if (v1104 < 1)
              {
                v489 = (std::string *)v1106;
                goto LABEL_1682;
              }
              v526 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067)
                                           + 8)
                               + 8);
              __str[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"expected SourceLineNum in '.cv_inline_line"
                                                                              "table' directive";
              LOWORD(__str[1].__r_.__value_.__r.__words[1]) = 259;
              if (llvm::MCAsmParser::parseIntToken(v1067, &v1083, (const llvm::Twine *)__str))
                goto LABEL_260;
              v528 = v1083;
              *(_QWORD *)v1090 = "Line number less than zero in '.cv_inline_linetable' directive";
              LOWORD(v1091) = 259;
              if (v1083 < 0)
              {
                v489 = (std::string *)v1090;
LABEL_1682:
                v569 = (uint64_t)v1067;
                v570 = v526;
                goto LABEL_1496;
              }
              v526 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067)
                                           + 8)
                               + 8);
              v896 = (*(uint64_t (**)(llvm::MCAsmParser *, std::string *))(*(_QWORD *)v1067 + 192))(v1067, &v1073);
              v1087[0] = "expected identifier in directive";
              v1089 = 259;
              if ((v896 & 1) != 0)
              {
                v489 = (std::string *)v1087;
                goto LABEL_1682;
              }
              v526 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067)
                                           + 8)
                               + 8);
              v908 = (*(uint64_t (**)(llvm::MCAsmParser *, __int128 *))(*(_QWORD *)v1067 + 192))(v1067, &v1115);
              v1085.__r_.__value_.__r.__words[0] = (std::string::size_type)"expected identifier in directive";
              v1086 = 259;
              if (v908)
              {
                v489 = &v1085;
                goto LABEL_1682;
              }
              *(_QWORD *)__dst = "Expected End of Statement";
              *(_WORD *)&__dst[32] = 259;
              if (llvm::MCAsmParser::parseEOL(v1067, (const llvm::Twine *)__dst))
                goto LABEL_260;
              v939 = v1067;
              v940 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 48))(v1067);
              *(_WORD *)&__dst[32] = 261;
              *(_OWORD *)__dst = *(_OWORD *)&v1073.__r_.__value_.__l.__data_;
              v941 = llvm::MCContext::getOrCreateSymbol(v940, (uint64_t)__dst);
              v942 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v939 + 48))(v939);
              *(_WORD *)&__dst[32] = 261;
              *(_OWORD *)__dst = v1115;
              v943 = llvm::MCContext::getOrCreateSymbol(v942, (uint64_t)__dst);
              v944 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v939 + 56))(v939);
              (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t, unint64_t, unint64_t))(*(_QWORD *)v944 + 752))(v944, v1112, v527, v528, v941, v943);
              goto LABEL_67;
            case 70:
              if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067) + 8) == 2)
              {
                v699 = 0;
                v700 = 0;
                v701 = 0;
                while (1)
                {
                  v702 = *(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067)
                                   + 96);
                  *(_QWORD *)v1106 = 0;
                  *(_QWORD *)&v1106[8] = 0;
                  if ((*(unsigned int (**)(llvm::MCAsmParser *, _BYTE *))(*(_QWORD *)v1067 + 192))(v1067, v1106))
                  {
                    break;
                  }
                  v703 = v1067;
                  v704 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 48))(v1067);
                  *(_WORD *)&__dst[32] = 261;
                  *(_QWORD *)__dst = *(_QWORD *)v1106;
                  *(_QWORD *)&__dst[8] = *(_QWORD *)&v1106[8];
                  v705 = llvm::MCContext::getOrCreateSymbol(v704, (uint64_t)__dst);
                  v702 = *(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v703 + 40))(v703) + 96);
                  *(_OWORD *)&__str[0].__r_.__value_.__l.__data_ = 0uLL;
                  if ((*(unsigned int (**)(llvm::MCAsmParser *, std::string *))(*(_QWORD *)v703 + 192))(v703, __str))
                  {
                    break;
                  }
                  v706 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 48))(v1067);
                  *(_WORD *)&__dst[32] = 261;
                  *(_OWORD *)__dst = *(_OWORD *)&__str[0].__r_.__value_.__l.__data_;
                  v707 = llvm::MCContext::getOrCreateSymbol(v706, (uint64_t)__dst);
                  v708 = v707;
                  if (v700 >= v699)
                  {
                    v709 = ((char *)v700 - v701) >> 4;
                    v710 = v709 + 1;
                    if ((unint64_t)(v709 + 1) >> 60)
                      goto LABEL_1877;
                    if (((char *)v699 - v701) >> 3 > v710)
                      v710 = ((char *)v699 - v701) >> 3;
                    if ((unint64_t)((char *)v699 - v701) >= 0x7FFFFFFFFFFFFFF0)
                      v711 = 0xFFFFFFFFFFFFFFFLL;
                    else
                      v711 = v710;
                    if (v711)
                    {
                      if (v711 >> 60)
                        goto LABEL_1878;
                      v712 = (char *)operator new(16 * v711);
                    }
                    else
                    {
                      v712 = 0;
                    }
                    v713 = (unint64_t *)&v712[16 * v709];
                    *v713 = v705;
                    v713[1] = v708;
                    if (v700 == (unint64_t *)v701)
                    {
                      v715 = v700;
                      v701 = &v712[16 * v709];
                    }
                    else
                    {
                      v714 = &v712[16 * v709];
                      do
                      {
                        *((_OWORD *)v714 - 1) = *((_OWORD *)v700 - 1);
                        v714 -= 16;
                        v700 -= 2;
                      }
                      while (v700 != (unint64_t *)v701);
                      v715 = (unint64_t *)v701;
                      v701 = v714;
                    }
                    v699 = (unint64_t *)&v712[16 * v711];
                    v700 = v713 + 2;
                    if (v715)
                      operator delete(v715);
                  }
                  else
                  {
                    *v700 = v705;
                    v700[1] = v707;
                    v700 += 2;
                  }
                  if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067)
                                   + 8) != 2)
                    goto LABEL_1443;
                }
                v753 = "expected identifier in directive";
              }
              else
              {
                v701 = 0;
                v702 = 0;
LABEL_1443:
                *(_QWORD *)v1106 = 0;
                *(_QWORD *)&v1106[8] = 0;
                *(_QWORD *)__dst = "expected comma before def_range type in .cv_def_range directive";
                *(_WORD *)&__dst[32] = 259;
                if (llvm::MCAsmParser::parseToken(v1067, 25, (llvm::Twine *)__dst)
                  || ((*(uint64_t (**)(llvm::MCAsmParser *, _BYTE *))(*(_QWORD *)v1067 + 192))(v1067, v1106) & 1) != 0)
                {
                  v753 = "expected def_range type in directive";
                }
                else
                {
                  __pf = *((unsigned int *)v1067 + 278);
                  if ((_DWORD)__pf)
                  {
                    v869 = *(_QWORD *)&v1106[8];
                    __s1h = *(const void **)v1106;
                    v870 = 0;
                    if (*(_QWORD *)&v1106[8])
                    {
                      v871 = *(_QWORD *)&v1106[8];
                      v872 = *(unsigned __int8 **)v1106;
                      do
                      {
                        v873 = *v872++;
                        v870 = 33 * v870 + v873;
                        --v871;
                      }
                      while (v871);
                    }
                    v874 = *((_QWORD *)v1067 + 138);
                    v875 = 1;
                    v876 = v870;
                    while (1)
                    {
                      v877 = v876 & (__pf - 1);
                      v878 = *(_QWORD **)(v874 + 8 * v877);
                      if (v878 != (_QWORD *)-8)
                      {
                        if (!v878)
                          goto LABEL_1955;
                        if (*(_DWORD *)(v874 + 8 * __pf + 8 + 4 * v877) == v870
                          && v869 == *v878
                          && (!v869 || !memcmp(__s1h, (char *)v878 + *((unsigned int *)v1067 + 281), v869)))
                        {
                          break;
                        }
                      }
                      v876 = v875 + v877;
                      ++v875;
                    }
                    if ((_DWORD)v877 != -1 && (int)v877 != __pf)
                    {
                      switch(*(_DWORD *)(*(_QWORD *)(v874 + 8 * (int)v877) + 8))
                      {
                        case 1:
                          __str[0].__r_.__value_.__r.__words[0] = 0;
                          *(_QWORD *)__dst = "expected comma before register number in .cv_def_range directive";
                          *(_WORD *)&__dst[32] = 259;
                          if (llvm::MCAsmParser::parseToken(v1067, 25, (llvm::Twine *)__dst)
                            || ((*(uint64_t (**)(llvm::MCAsmParser *, std::string *))(*(_QWORD *)v1067 + 256))(v1067, __str) & 1) != 0)
                          {
                            goto LABEL_1986;
                          }
                          v1011 = *(void (**)(void))(*(_QWORD *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 56))(v1067)
                                                   + 784);
                          goto LABEL_1982;
                        case 2:
                          __str[0].__r_.__value_.__r.__words[0] = 0;
                          *(_QWORD *)__dst = "expected comma before offset in .cv_def_range directive";
                          *(_WORD *)&__dst[32] = 259;
                          if (llvm::MCAsmParser::parseToken(v1067, 25, (llvm::Twine *)__dst)
                            || ((*(uint64_t (**)(llvm::MCAsmParser *, std::string *))(*(_QWORD *)v1067 + 256))(v1067, __str) & 1) != 0)
                          {
                            goto LABEL_1996;
                          }
                          v1011 = *(void (**)(void))(*(_QWORD *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 56))(v1067)
                                                   + 792);
                          goto LABEL_1982;
                        case 3:
                          __str[0].__r_.__value_.__r.__words[0] = 0;
                          *(_QWORD *)v1090 = 0;
                          *(_QWORD *)__dst = "expected comma before register number in .cv_def_range directive";
                          *(_WORD *)&__dst[32] = 259;
                          if (llvm::MCAsmParser::parseToken(v1067, 25, (llvm::Twine *)__dst)
                            || ((*(uint64_t (**)(llvm::MCAsmParser *, std::string *))(*(_QWORD *)v1067 + 256))(v1067, __str) & 1) != 0)
                          {
LABEL_1986:
                            v753 = "expected register number";
                            goto LABEL_1956;
                          }
                          *(_QWORD *)__dst = "expected comma before offset in .cv_def_range directive";
                          *(_WORD *)&__dst[32] = 259;
                          if (!llvm::MCAsmParser::parseToken(v1067, 25, (llvm::Twine *)__dst)
                            && ((*(uint64_t (**)(llvm::MCAsmParser *, _BYTE *))(*(_QWORD *)v1067 + 256))(v1067, v1090) & 1) == 0)
                          {
                            v1011 = *(void (**)(void))(*(_QWORD *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 56))(v1067)
                                                     + 776);
                            goto LABEL_1982;
                          }
LABEL_1996:
                          v753 = "expected offset value";
                          goto LABEL_1956;
                        case 4:
                          __str[0].__r_.__value_.__r.__words[0] = 0;
                          *(_QWORD *)v1090 = 0;
                          v1087[0] = 0;
                          *(_QWORD *)__dst = "expected comma before register number in .cv_def_range directive";
                          *(_WORD *)&__dst[32] = 259;
                          if (llvm::MCAsmParser::parseToken(v1067, 25, (llvm::Twine *)__dst)
                            || ((*(uint64_t (**)(llvm::MCAsmParser *, std::string *))(*(_QWORD *)v1067 + 256))(v1067, __str) & 1) != 0)
                          {
                            v753 = "expected register value";
                            goto LABEL_1956;
                          }
                          *(_QWORD *)__dst = "expected comma before flag value in .cv_def_range directive";
                          *(_WORD *)&__dst[32] = 259;
                          if (llvm::MCAsmParser::parseToken(v1067, 25, (llvm::Twine *)__dst)
                            || ((*(uint64_t (**)(llvm::MCAsmParser *, _BYTE *))(*(_QWORD *)v1067 + 256))(v1067, v1090) & 1) != 0)
                          {
                            v753 = "expected flag value";
                            goto LABEL_1956;
                          }
                          *(_QWORD *)__dst = "expected comma before base pointer offset in .cv_def_range directive";
                          *(_WORD *)&__dst[32] = 259;
                          if (llvm::MCAsmParser::parseToken(v1067, 25, (llvm::Twine *)__dst)
                            || ((*(uint64_t (**)(llvm::MCAsmParser *, void **))(*(_QWORD *)v1067 + 256))(v1067, v1087) & 1) != 0)
                          {
                            v753 = "expected base pointer offset value";
                            goto LABEL_1956;
                          }
                          v1011 = *(void (**)(void))(*(_QWORD *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 56))(v1067)
                                                   + 768);
LABEL_1982:
                          v1011();
                          LOBYTE(v9) = 1;
                          if (!v701)
                            goto LABEL_215;
                          goto LABEL_1957;
                        default:
                          break;
                      }
                    }
                  }
LABEL_1955:
                  v753 = "unexpected def_range type in .cv_def_range directive";
                }
              }
LABEL_1956:
              *(_QWORD *)__dst = v753;
              *(_WORD *)&__dst[32] = 259;
              LOBYTE(v9) = llvm::MCAsmParser::Error((uint64_t)v1067, v702, (uint64_t)__dst, 0, 0);
              if (!v701)
                goto LABEL_215;
LABEL_1957:
              v554 = v701;
              goto LABEL_1643;
            case 71:
              v564 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 56))(v1067);
              (*(void (**)(uint64_t))(*(_QWORD *)v564 + 800))(v564);
              goto LABEL_67;
            case 72:
              memset(v1106, 0, 24);
              if (((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 264))(v1067) & 1) != 0
                || (*(unsigned int (**)(llvm::MCAsmParser *, _BYTE *))(*(_QWORD *)v1067 + 208))(v1067, v1106))
              {
                *(_QWORD *)__dst = " in '.cv_string' directive";
                *(_WORD *)&__dst[32] = 259;
                v717 = llvm::MCAsmParser::addErrorSuffix(v1067, (const llvm::Twine *)__dst);
                goto LABEL_1640;
              }
              llvm::MCContext::getCVContext(*((llvm::MCContext **)v1067 + 27));
              if (v1106[23] >= 0)
                v855 = v1106;
              else
                v855 = *(unsigned __int8 **)v1106;
              if (v1106[23] >= 0)
                v856 = v1106[23] & 0x7F;
              else
                v856 = *(_QWORD *)&v1106[8];
              llvm::CodeViewContext::addToStringTable(v854, v855, v856, (uint64_t)__dst);
              v857 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 56))(v1067);
              (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v857 + 512))(v857, *(unsigned int *)&__dst[16], 4);
              LOBYTE(v9) = 0;
              goto LABEL_1641;
            case 73:
              v529 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 56))(v1067);
              (*(void (**)(uint64_t))(*(_QWORD *)v529 + 808))(v529);
              goto LABEL_67;
            case 74:
              *(_QWORD *)v1106 = 0;
              *(_QWORD *)__dst = "expected identifier in directive";
              *(_WORD *)&__dst[32] = 259;
              if (llvm::MCAsmParser::parseIntToken(v1067, (uint64_t *)v1106, (const llvm::Twine *)__dst))
                goto LABEL_260;
              *(_QWORD *)__dst = "Expected End of Statement";
              *(_WORD *)&__dst[32] = 259;
              if (llvm::MCAsmParser::parseEOL(v1067, (const llvm::Twine *)__dst))
                goto LABEL_260;
              v572 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 56))(v1067);
              (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v572 + 816))(v572, *(unsigned int *)v1106);
              goto LABEL_67;
            case 75:
              (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067);
              *(_QWORD *)v1106 = 0;
              *(_QWORD *)&v1106[8] = 0;
              if ((*(unsigned int (**)(llvm::MCAsmParser *, _BYTE *))(*(_QWORD *)v1067 + 192))(v1067, v1106))
              {
                v494 = "expected symbol name";
                goto LABEL_1493;
              }
              *(_QWORD *)__dst = "unexpected tokens";
              *(_WORD *)&__dst[32] = 259;
              if (!llvm::MCAsmParser::parseEOL(v1067, (const llvm::Twine *)__dst))
              {
                v754 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 48))(v1067);
                *(_WORD *)&__dst[32] = 261;
                *(_QWORD *)__dst = *(_QWORD *)v1106;
                *(_QWORD *)&__dst[8] = *(_QWORD *)&v1106[8];
                llvm::MCContext::getOrCreateSymbol(v754, (uint64_t)__dst);
                v499 = *(void (**)(void))(*(_QWORD *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 56))(v1067)
                                        + 824);
LABEL_1448:
                v499();
                goto LABEL_67;
              }
              v919 = " in '.cv_fpo_data' directive";
LABEL_1843:
              *(_QWORD *)__dst = v919;
              *(_WORD *)&__dst[32] = 259;
              goto LABEL_1400;
            case 76:
              *(_QWORD *)v1106 = 0;
              *(_QWORD *)&v1106[8] = 0;
              if ((*(unsigned int (**)(llvm::MCAsmParser *, _BYTE *))(*(_QWORD *)v1067 + 192))(v1067, v1106))
              {
                goto LABEL_1307;
              }
              if (*(_QWORD *)&v1106[8] == 12)
              {
                v497 = 0;
                v495 = **(_QWORD **)v1106 == 0x665F67756265642ELL && *(_DWORD *)(*(_QWORD *)v1106 + 8) == 1701667186;
              }
              else if (*(_QWORD *)&v1106[8] == 9)
              {
                v495 = 0;
                v497 = **(_QWORD **)v1106 == 0x6D6172665F68652ELL && *(_BYTE *)(*(_QWORD *)v1106 + 8) == 101;
              }
              else
              {
                v497 = 0;
                v495 = 0;
              }
              if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067) + 8) != 25)
                goto LABEL_1258;
              (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 184))(v1067);
              if ((*(unsigned int (**)(llvm::MCAsmParser *, _BYTE *))(*(_QWORD *)v1067 + 192))(v1067, v1106))
              {
LABEL_1307:
                v494 = "Expected an identifier";
                goto LABEL_1493;
              }
              if (*(_QWORD *)&v1106[8] == 12)
              {
                if (**(_QWORD **)v1106 == 0x665F67756265642ELL && *(_DWORD *)(*(_QWORD *)v1106 + 8) == 1701667186)
                  v495 = 1;
                else
                  v495 = v495;
              }
              else if (*(_QWORD *)&v1106[8] == 9)
              {
                if (**(_QWORD **)v1106 == 0x6D6172665F68652ELL && *(_BYTE *)(*(_QWORD *)v1106 + 8) == 101)
                  v497 = 1;
                else
                  v497 = v497;
              }
LABEL_1258:
              v663 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 56))(v1067);
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v663 + 856))(v663, v497, v495);
              goto LABEL_67;
            case 77:
              *(_OWORD *)&__str[0].__r_.__value_.__l.__data_ = 0uLL;
              if (llvm::MCAsmParser::parseOptionalToken(v1067, 9))
                goto LABEL_1354;
              if (((*(uint64_t (**)(llvm::MCAsmParser *, std::string *))(*(_QWORD *)v1067 + 192))(v1067, __str) & 1) != 0|| __str[0].__r_.__value_.__l.__size_ != 6)
              {
                *(_QWORD *)__dst = "unexpected token";
                *(_WORD *)&__dst[32] = 259;
                v907 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067);
              }
              else
              {
                v906 = *(_DWORD *)__str[0].__r_.__value_.__l.__data_ != 1886218611
                    || *(_WORD *)(__str[0].__r_.__value_.__r.__words[0] + 4) != 25964;
                *(_QWORD *)__dst = "unexpected token";
                *(_WORD *)&__dst[32] = 259;
                v907 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067);
                if (!v906)
                {
                  *(_QWORD *)v1106 = "unexpected token";
                  LOWORD(v1107) = 259;
                  if (!llvm::MCAsmParser::parseEOL(v1067, (const llvm::Twine *)v1106))
                  {
LABEL_1354:
                    v716 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 56))(v1067);
                    llvm::MCStreamer::emitCFIStartProc(v716, __str[0].__r_.__value_.__l.__size_ != 0, *((_QWORD *)v1067 + 17));
                    goto LABEL_67;
                  }
LABEL_1811:
                  v728 = " in '.cfi_startproc' directive";
LABEL_1398:
                  *(_QWORD *)__dst = v728;
                  v734 = 259;
LABEL_1399:
                  *(_WORD *)&__dst[32] = v734;
LABEL_1400:
                  v136 = v1067;
                  goto LABEL_244;
                }
              }
              llvm::MCAsmParser::Error((uint64_t)v1067, *(_QWORD *)(*(_QWORD *)(v907 + 8) + 8), (uint64_t)__dst, 0, 0);
              goto LABEL_1811;
            case 78:
              v524 = (llvm::MCStreamer *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 56))(v1067);
              CurrentDwarfFrameInfo = llvm::MCStreamer::getCurrentDwarfFrameInfo(v524);
              if (CurrentDwarfFrameInfo)
                (*(void (**)(llvm::MCStreamer *, uint64_t))(*(_QWORD *)v524 + 8))(v524, CurrentDwarfFrameInfo);
              goto LABEL_67;
            case 79:
              *(_QWORD *)v1106 = 0;
              __str[0].__r_.__value_.__r.__words[0] = 0;
              if ((sub_1C60EAE68((_QWORD **)v1067, v1106, (uint64_t)v1081) & 1) != 0)
                goto LABEL_260;
              *(_QWORD *)__dst = "unexpected token in directive";
              *(_WORD *)&__dst[32] = 259;
              if (llvm::MCAsmParser::parseToken(v1067, 25, (llvm::Twine *)__dst)
                || ((*(uint64_t (**)(llvm::MCAsmParser *, std::string *))(*(_QWORD *)v1067 + 256))(v1067, __str) & 1) != 0)
              {
                goto LABEL_260;
              }
              v499 = *(void (**)(void))(*(_QWORD *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067
                                                                                                  + 56))(v1067)
                                      + 864);
              goto LABEL_1448;
            case 80:
              *(_QWORD *)__dst = 0;
              LOBYTE(v9) = (*(uint64_t (**)(llvm::MCAsmParser *, _BYTE *))(*(_QWORD *)v1067 + 256))(v1067, __dst);
              if ((v9 & 1) != 0)
                goto LABEL_215;
              v463 = *(void (**)(void))(*(_QWORD *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067
                                                                                                  + 56))(v1067)
                                      + 872);
              goto LABEL_1091;
            case 81:
              *(_QWORD *)__dst = 0;
              LOBYTE(v9) = (*(uint64_t (**)(llvm::MCAsmParser *, _BYTE *))(*(_QWORD *)v1067 + 256))(v1067, __dst);
              if ((v9 & 1) != 0)
                goto LABEL_215;
              v463 = *(void (**)(void))(*(_QWORD *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067
                                                                                                  + 56))(v1067)
                                      + 960);
              goto LABEL_1091;
            case 82:
              *(_QWORD *)__dst = 0;
              LOBYTE(v9) = sub_1C60EAE68((_QWORD **)v1067, __dst, (uint64_t)v1081);
              if ((v9 & 1) != 0)
                goto LABEL_215;
              v463 = *(void (**)(void))(*(_QWORD *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067
                                                                                                  + 56))(v1067)
                                      + 880);
              goto LABEL_1091;
            case 83:
              *(_QWORD *)v1106 = 0;
              __str[0].__r_.__value_.__r.__words[0] = 0;
              if ((sub_1C60EAE68((_QWORD **)v1067, v1106, (uint64_t)v1081) & 1) != 0)
                goto LABEL_260;
              *(_QWORD *)__dst = "unexpected token in directive";
              *(_WORD *)&__dst[32] = 259;
              if (llvm::MCAsmParser::parseToken(v1067, 25, (llvm::Twine *)__dst)
                || ((*(uint64_t (**)(llvm::MCAsmParser *, std::string *))(*(_QWORD *)v1067 + 256))(v1067, __str) & 1) != 0)
              {
                goto LABEL_260;
              }
              v499 = *(void (**)(void))(*(_QWORD *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067
                                                                                                  + 56))(v1067)
                                      + 896);
              goto LABEL_1448;
            case 84:
              *(_QWORD *)v1106 = 0;
              __str[0].__r_.__value_.__r.__words[0] = 0;
              if ((sub_1C60EAE68((_QWORD **)v1067, v1106, (uint64_t)v1081) & 1) != 0)
                goto LABEL_260;
              *(_QWORD *)__dst = "unexpected token in directive";
              *(_WORD *)&__dst[32] = 259;
              if (llvm::MCAsmParser::parseToken(v1067, 25, (llvm::Twine *)__dst)
                || ((*(uint64_t (**)(llvm::MCAsmParser *, std::string *))(*(_QWORD *)v1067 + 256))(v1067, __str) & 1) != 0)
              {
                goto LABEL_260;
              }
              v499 = *(void (**)(void))(*(_QWORD *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067
                                                                                                  + 56))(v1067)
                                      + 952);
              goto LABEL_1448;
            case 85:
              v510 = v1067;
              v511 = 1;
              goto LABEL_1088;
            case 86:
              v510 = v1067;
              v511 = 0;
LABEL_1088:
              v75 = sub_1C610B534(v510, v511);
              goto LABEL_214;
            case 87:
              v588 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 56))(v1067);
              (*(void (**)(uint64_t))(*(_QWORD *)v588 + 920))(v588);
              goto LABEL_67;
            case 88:
              v587 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 56))(v1067);
              (*(void (**)(uint64_t))(*(_QWORD *)v587 + 928))(v587);
              goto LABEL_67;
            case 89:
              *(_QWORD *)__dst = 0;
              LOBYTE(v9) = sub_1C60EAE68((_QWORD **)v1067, __dst, (uint64_t)v1081);
              if ((v9 & 1) != 0)
                goto LABEL_215;
              v463 = *(void (**)(void))(*(_QWORD *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067
                                                                                                  + 56))(v1067)
                                      + 936);
              goto LABEL_1091;
            case 90:
              *(_QWORD *)__dst = 0;
              LOBYTE(v9) = sub_1C60EAE68((_QWORD **)v1067, __dst, (uint64_t)v1081);
              if ((v9 & 1) != 0)
                goto LABEL_215;
              v463 = *(void (**)(void))(*(_QWORD *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067
                                                                                                  + 56))(v1067)
                                      + 944);
              goto LABEL_1091;
            case 91:
              memset(__dst, 0, 24);
              *(_QWORD *)v1106 = 0;
              if (((*(uint64_t (**)(llvm::MCAsmParser *, _BYTE *))(*(_QWORD *)v1067 + 256))(v1067, v1106) & 1) != 0)
                goto LABEL_960;
              std::string::push_back((std::string *)__dst, v1106[0]);
              if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067) + 8) != 25)
                goto LABEL_1160;
              while (1)
              {
                (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 184))(v1067);
                if (((*(uint64_t (**)(llvm::MCAsmParser *, _BYTE *))(*(_QWORD *)v1067 + 256))(v1067, v1106) & 1) != 0)
                  break;
                std::string::push_back((std::string *)__dst, v1106[0]);
                if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067) + 8) != 25)
                {
LABEL_1160:
                  v622 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 56))(v1067);
                  if (__dst[23] >= 0)
                    v623 = __dst;
                  else
                    v623 = *(_BYTE **)__dst;
                  if (__dst[23] >= 0)
                    v624 = __dst[23] & 0x7F;
                  else
                    v624 = *(_QWORD *)&__dst[8];
                  (*(void (**)(uint64_t, _BYTE *, uint64_t))(*(_QWORD *)v622 + 968))(v622, v623, v624);
                  LOBYTE(v9) = 0;
                  goto LABEL_1167;
                }
              }
LABEL_960:
              LOBYTE(v9) = 1;
LABEL_1167:
              if ((__dst[23] & 0x80000000) == 0)
                goto LABEL_215;
              v554 = *(char **)__dst;
              goto LABEL_1643;
            case 92:
              *(_QWORD *)__dst = 0;
              LOBYTE(v9) = sub_1C60EAE68((_QWORD **)v1067, __dst, (uint64_t)v1081);
              if ((v9 & 1) != 0)
                goto LABEL_215;
              v463 = *(void (**)(void))(*(_QWORD *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067
                                                                                                  + 56))(v1067)
                                      + 976);
              goto LABEL_1091;
            case 93:
              *(_QWORD *)__dst = "unexpected token in '.cfi_signal_frame'";
              *(_WORD *)&__dst[32] = 259;
              if (llvm::MCAsmParser::parseEOL(v1067, (const llvm::Twine *)__dst))
                goto LABEL_260;
              v685 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 56))(v1067);
              (*(void (**)(uint64_t))(*(_QWORD *)v685 + 992))(v685);
              goto LABEL_67;
            case 94:
              *(_QWORD *)__dst = 0;
              LOBYTE(v9) = sub_1C60EAE68((_QWORD **)v1067, __dst, (uint64_t)v1081);
              if ((v9 & 1) != 0)
                goto LABEL_215;
              v463 = *(void (**)(void))(*(_QWORD *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067
                                                                                                  + 56))(v1067)
                                      + 1000);
LABEL_1091:
              v463();
              goto LABEL_215;
            case 95:
              v498 = v1081;
              *(_QWORD *)v1106 = 0;
              __str[0].__r_.__value_.__r.__words[0] = 0;
              if ((sub_1C60EAE68((_QWORD **)v1067, v1106, (uint64_t)v1081) & 1) != 0)
                goto LABEL_260;
              *(_QWORD *)__dst = "unexpected token in directive";
              *(_WORD *)&__dst[32] = 259;
              if (llvm::MCAsmParser::parseToken(v1067, 25, (llvm::Twine *)__dst)
                || (sub_1C60EAE68((_QWORD **)v1067, __str, (uint64_t)v498) & 1) != 0)
              {
                goto LABEL_260;
              }
              v499 = *(void (**)(void))(*(_QWORD *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067
                                                                                                  + 56))(v1067)
                                      + 1008);
              goto LABEL_1448;
            case 96:
              v521 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 56))(v1067);
              (*(void (**)(uint64_t))(*(_QWORD *)v521 + 1016))(v521);
              goto LABEL_67;
            case 99:
              v589 = (void **)(v1032 + 88);
              if (*(_BYTE *)(v1032 + 112))
              {
                if (*(char *)(v1032 + 111) < 0)
                  operator delete(*v589);
                *(_QWORD *)(v1032 + 88) = 0;
                *(_BYTE *)(v1032 + 111) = 0;
              }
              else
              {
                *(_QWORD *)(v1032 + 88) = 0;
                *(_WORD *)(v1032 + 111) = 256;
              }
              v632 = v1080;
              v484 = *(char **)(*(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067)
                                          + 8)
                              + 8);
              if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067) + 8) != 9
                && sub_1C610ED00(v1067, (uint64_t)v589))
              {
                LOWORD(v1107) = 1283;
                *(_QWORD *)v1106 = "unable to parse text item in '";
                *(_OWORD *)&v1106[16] = v632;
LABEL_1491:
                *(_QWORD *)__dst = v1106;
                *(_QWORD *)&__dst[16] = "' directive";
                *(_WORD *)&__dst[32] = 770;
                v146 = (uint64_t)v1067;
                v144 = v484;
                goto LABEL_264;
              }
              (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 224))(v1067);
              v633 = *((_QWORD *)v1067 + 86);
              if (*((_QWORD *)v1067 + 85) == v633)
              {
                LOWORD(v1107) = 1283;
                *(_QWORD *)v1106 = "unexpected '";
                *(_OWORD *)&v1106[16] = v632;
                goto LABEL_1406;
              }
              v635 = *((_QWORD *)v1067 + 52);
              v634 = *((_QWORD *)v1067 + 53);
              if (*(_QWORD *)(*(_QWORD *)(v633 - 8) + 24) != (v634 - v635) >> 3)
              {
                v636 = (int *)(v634 - 8);
                v637 = (uint64_t)v636 - v635;
                do
                {
                  v638 = *v636;
                  *((_WORD *)v1067 + 206) = *((_WORD *)v636 + 2);
                  *((_DWORD *)v1067 + 102) = v638;
                  *((_QWORD *)v1067 + 53) = v636;
                  v78 = *(_QWORD *)(*(_QWORD *)(v633 - 8) + 24) == v637 >> 3;
                  v637 -= 8;
                  v636 -= 2;
                }
                while (!v78);
              }
              goto LABEL_1195;
            case 100:
              if (*(_BYTE *)(v1032 + 112))
              {
                if (*(char *)(v1032 + 111) < 0)
                  operator delete(*(void **)(v1032 + 88));
                *(_QWORD *)(v1032 + 88) = 0;
                *(_BYTE *)(v1032 + 111) = 0;
              }
              else
              {
                *(_QWORD *)(v1032 + 88) = 0;
                *(_WORD *)(v1032 + 111) = 256;
              }
              v631 = v1080;
              if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067) + 8) != 9)
              {
                LOWORD(v1107) = 1283;
                *(_QWORD *)v1106 = "unexpected token in '";
                *(_OWORD *)&v1106[16] = v631;
                goto LABEL_1402;
              }
              if (*((_QWORD *)v1067 + 85) != *((_QWORD *)v1067 + 86))
              {
LABEL_1195:
                sub_1C611368C((uint64_t)v1067);
                goto LABEL_67;
              }
              LOWORD(v1107) = 1283;
              *(_QWORD *)v1106 = "unexpected '";
              *(_OWORD *)&v1106[16] = v631;
LABEL_1406:
              v735 = "' in file, no current macro definition";
              goto LABEL_1407;
            case 101:
              *(_OWORD *)&__str[0].__r_.__value_.__l.__data_ = 0uLL;
              v1047 = *(char **)(*(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067)
                                           + 8)
                               + 8);
              v530 = (*(uint64_t (**)(llvm::MCAsmParser *, std::string *))(*(_QWORD *)v1067 + 192))(v1067, __str);
              while (2)
              {
                *(_QWORD *)__dst = "expected identifier in 'purge' directive";
                *(_WORD *)&__dst[32] = 259;
                if ((v530 & 1) != 0)
                {
                  v489 = (std::string *)__dst;
                  v569 = (uint64_t)v1067;
                  v570 = (uint64_t)v1047;
                  goto LABEL_1496;
                }
                v531 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 48))(v1067);
                sub_1C5E3DEA4(__dst, __str[0].__r_.__value_.__l.__data_, (uint64_t (*)(_QWORD))sub_1C5E3C6A8, (char *)(__str[0].__r_.__value_.__r.__words[0] + __str[0].__r_.__value_.__l.__size_), (uint64_t)sub_1C5E3C6A8, __str[0].__r_.__value_.__l.__size_);
                __s1f = __dst[23];
                __pd = *(void **)__dst;
                if (__dst[23] >= 0)
                  v532 = __dst;
                else
                  v532 = *(unsigned __int8 **)__dst;
                if (__dst[23] >= 0)
                  v533 = __dst[23] & 0x7F;
                else
                  v533 = *(_QWORD *)&__dst[8];
                v534 = *(unsigned int *)(v531 + 1976);
                if (!(_DWORD)v534)
                {
                  v534 = 0;
LABEL_991:
                  LODWORD(v543) = -1;
                  goto LABEL_992;
                }
                v535 = 0;
                if (v533)
                {
                  v536 = v533;
                  v537 = v532;
                  do
                  {
                    v538 = *v537++;
                    v535 = 33 * v535 + v538;
                    --v536;
                  }
                  while (v536);
                }
                v539 = *(_QWORD *)(v531 + 1968);
                v540 = *(unsigned int *)(v531 + 1988);
                v541 = 1;
                v542 = v535;
                while (1)
                {
                  v543 = v542 & (v534 - 1);
                  v544 = *(_QWORD **)(v539 + 8 * v543);
                  if (v544 != (_QWORD *)-8)
                  {
                    if (!v544)
                      goto LABEL_991;
                    if (*(_DWORD *)(v539 + 8 * v534 + 8 + 4 * v543) == v535
                      && v533 == *v544
                      && (!v533 || !memcmp(v532, (char *)v544 + v540, v533)))
                    {
                      break;
                    }
                  }
                  v542 = v541 + v543;
                  ++v541;
                }
LABEL_992:
                v546 = (_DWORD)v543 == -1 || v534 == (int)v543;
                if (__s1f < 0)
                  operator delete(__pd);
                if (!v546)
                {
                  v547 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 48))(v1067);
                  sub_1C5E3DEA4(__dst, __str[0].__r_.__value_.__l.__data_, (uint64_t (*)(_QWORD))sub_1C5E3C6A8, (char *)(__str[0].__r_.__value_.__r.__words[0] + __str[0].__r_.__value_.__l.__size_), (uint64_t)sub_1C5E3C6A8, __str[0].__r_.__value_.__l.__size_);
                  if (__dst[23] >= 0)
                    v548 = __dst;
                  else
                    v548 = *(unsigned __int8 **)__dst;
                  if (__dst[23] >= 0)
                    v549 = __dst[23] & 0x7F;
                  else
                    v549 = *(_QWORD *)&__dst[8];
                  sub_1C60EB0F0(v547 + 1968, v548, v549);
                  if ((__dst[23] & 0x80000000) != 0)
                    operator delete(*(void **)__dst);
                  if (llvm::MCAsmParser::parseOptionalToken(v1067, 25))
                  {
                    llvm::MCAsmParser::parseOptionalToken(v1067, 9);
                    v1047 = *(char **)(*(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067
                                                                                                  + 40))(v1067)
                                                 + 8)
                                     + 8);
                    v530 = (*(uint64_t (**)(llvm::MCAsmParser *, std::string *))(*(_QWORD *)v1067 + 192))(v1067, __str);
                    continue;
                  }
                  goto LABEL_67;
                }
                break;
              }
              LOWORD(v1107) = 1283;
              *(_QWORD *)v1106 = "macro '";
              *(_OWORD *)&v1106[16] = *(_OWORD *)&__str[0].__r_.__value_.__l.__data_;
              *(_QWORD *)__dst = v1106;
              *(_QWORD *)&__dst[16] = "' is not defined";
              *(_WORD *)&__dst[32] = 770;
              v146 = (uint64_t)v1067;
              v144 = v1047;
              goto LABEL_264;
            case 102:
              v461 = v1081;
              v462 = *((_QWORD *)v1067 + 53);
              if (*((_QWORD *)v1067 + 52) != v462 && *(_BYTE *)(v462 - 3))
              {
LABEL_880:
                (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 224))(v1067);
                goto LABEL_67;
              }
              v670 = (char *)operator new(0x28uLL);
              *(_QWORD *)v1106 = v670;
              *(_OWORD *)&v1106[8] = xmmword_1C86784B0;
              strcpy(v670, ".err directive invoked in source file");
              if (**__s1 != 9)
              {
                v671 = v670;
                sub_1C6109CB4((std::string *)__dst, (uint64_t)v1067);
                operator delete(v671);
                *(_OWORD *)v1106 = *(_OWORD *)__dst;
                *(_QWORD *)&v1106[16] = *(_QWORD *)&__dst[16];
              }
              (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 184))(v1067);
              *(_WORD *)&__dst[32] = 260;
              *(_QWORD *)__dst = v1106;
              v672 = (uint64_t)v1067;
              goto LABEL_1639;
            case 103:
              v584 = v1081;
              v585 = v1067;
              v586 = 1;
              goto LABEL_1080;
            case 104:
              v584 = v1081;
              v585 = v1067;
              v586 = 0;
LABEL_1080:
              v75 = sub_1C610B710(v585, (uint64_t)v584, v586);
              goto LABEL_214;
            case 105:
              v464 = v1081;
              v465 = v1067;
              v466 = 1;
              goto LABEL_1099;
            case 106:
              v464 = v1081;
              v465 = v1067;
              v466 = 0;
LABEL_1099:
              v75 = sub_1C610B920(v465, (uint64_t)v464, v466);
              goto LABEL_214;
            case 107:
              v561 = v1081;
              v562 = (uint64_t)v1067;
              v563 = 0;
              goto LABEL_1082;
            case 108:
              v561 = v1081;
              v562 = (uint64_t)v1067;
              v563 = 0;
              goto LABEL_1048;
            case 109:
              v561 = v1081;
              v562 = (uint64_t)v1067;
              v563 = 1;
LABEL_1082:
              v571 = 0;
              goto LABEL_1083;
            case 110:
              v561 = v1081;
              v562 = (uint64_t)v1067;
              v563 = 1;
LABEL_1048:
              v571 = 1;
LABEL_1083:
              v75 = sub_1C610BE04(v562, (uint64_t)v561, v563, v571);
              goto LABEL_214;
            case 111:
              v458 = v1081;
              v459 = v1067;
              v460 = 1;
              goto LABEL_1086;
            case 112:
              v458 = v1081;
              v459 = v1067;
              v460 = 0;
LABEL_1086:
              v75 = sub_1C610C258(v459, (uint64_t)v458, v460);
              goto LABEL_214;
            case 113:
              sub_1C6109CB4((std::string *)__dst, (uint64_t)v1067);
              v722 = (llvm::raw_ostream *)llvm::outs(v721);
              if (__dst[23] >= 0)
                v723 = __dst;
              else
                v723 = *(const char **)__dst;
              if (__dst[23] >= 0)
                v724 = __dst[23] & 0x7F;
              else
                v724 = *(_QWORD *)&__dst[8];
              v725 = llvm::raw_ostream::write(v722, v723, v724);
              v726 = __dst[23] & 0x7F;
              if (__dst[23] < 0)
                v726 = *(_QWORD *)&__dst[8];
              if (!v726 || (__dst[23] >= 0 ? (v727 = __dst) : (v727 = *(_BYTE **)__dst), v727[v726 - 1] != 10))
              {
                v894 = (llvm::raw_ostream *)llvm::outs(v725);
                v895 = (_BYTE *)*((_QWORD *)v894 + 4);
                if ((unint64_t)v895 >= *((_QWORD *)v894 + 3))
                {
                  llvm::raw_ostream::write(v894, 10);
                }
                else
                {
                  *((_QWORD *)v894 + 4) = v895 + 1;
                  *v895 = 10;
                }
              }
              if ((__dst[23] & 0x80000000) != 0)
                operator delete(*(void **)__dst);
              goto LABEL_67;
            case 114:
            case 115:
              v665 = v1080;
              if (!*((_DWORD *)v1067 + 128))
              {
                *(_QWORD *)v1106 = "missing name in top-level '";
                *(_OWORD *)&v1106[16] = v1080;
                LOWORD(v1107) = 1283;
LABEL_1402:
                v735 = "' directive";
LABEL_1407:
                *(_QWORD *)__dst = v1106;
                *(_QWORD *)&__dst[16] = v735;
                v737 = 770;
                goto LABEL_1494;
              }
              if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067) + 8) == 2)
              {
                v686 = *(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067) + 8);
                if (*(_DWORD *)v686 == 2)
                {
                  v687 = *(_QWORD *)(v686 + 8);
                  v688 = *(_QWORD *)(v686 + 16);
                }
                else
                {
                  v840 = v686 + 8;
                  v838 = *(_QWORD *)(v686 + 8);
                  v839 = *(_QWORD *)(v840 + 8);
                  v841 = v839 != 0;
                  if (v839)
                    v687 = v838 + 1;
                  else
                    v687 = v838;
                  if (v841 <= v839 - 1)
                    v842 = v839 - 1;
                  else
                    v842 = v839 != 0;
                  if (v839 < v842)
                    v842 = v839;
                  v688 = v842 - v841;
                }
                *(_QWORD *)__dst = "unexpected token";
                *(_WORD *)&__dst[32] = 259;
                llvm::MCAsmParser::parseToken(v1067, 2, (llvm::Twine *)__dst);
              }
              else
              {
                v687 = 0;
                v688 = 0;
              }
              *(_QWORD *)__dst = "unexpected token";
              *(_WORD *)&__dst[32] = 259;
              if (llvm::MCAsmParser::parseEOL(v1067, (const llvm::Twine *)__dst))
              {
                *(_QWORD *)v1106 = " in '";
                *(_OWORD *)&v1106[16] = v665;
                LOWORD(v1107) = 1283;
                *(_QWORD *)__dst = v1106;
                *(_QWORD *)&__dst[16] = "' directive";
                v734 = 770;
                goto LABEL_1399;
              }
              v843 = (void **)((char *)v1067 + 504);
              v844 = *((unsigned int *)v1067 + 128);
              v845 = *((_DWORD *)v1067 + 129);
              if (v844 >= v845)
              {
                *(_QWORD *)__dst = 0;
                v846 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)v1067 + 504, v844 + 1, 96, (unint64_t *)__dst);
                sub_1C6112648(v843, (uint64_t)v846);
                v845 = *(_DWORD *)__dst;
                v847 = (char *)*((_QWORD *)v1067 + 63);
                if (v847 != (char *)v1067 + 520)
                  free(v847);
                *((_QWORD *)v1067 + 63) = v846;
                *((_DWORD *)v1067 + 129) = v845;
                LODWORD(v844) = *((_DWORD *)v1067 + 128);
              }
              else
              {
                v846 = (char *)*v843;
              }
              v848 = __pa == 115;
              v849 = &v846[96 * v844];
              if (v844 >= v845)
              {
                *(_QWORD *)__dst = 0;
                v997 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)v843, 0, 96, (unint64_t *)__dst);
                v998 = *((_DWORD *)v849 - 19);
                v999 = &v997[96 * *((unsigned int *)v1067 + 128)];
                *(_QWORD *)v999 = v687;
                *((_QWORD *)v999 + 1) = v688;
                v999[16] = v848;
                v999[17] = 1;
                *((_DWORD *)v999 + 5) = v998;
                *((_QWORD *)v999 + 3) = 0;
                *((_DWORD *)v999 + 8) = 0;
                *(_OWORD *)(v999 + 68) = 0u;
                *(_OWORD *)(v999 + 56) = 0u;
                *(_OWORD *)(v999 + 40) = 0u;
                *((_DWORD *)v999 + 21) = 16;
                sub_1C6112648(v843, (uint64_t)v997);
                v1000 = *(_DWORD *)__dst;
                v1001 = (char *)*((_QWORD *)v1067 + 63);
                if (v1001 != (char *)v1067 + 520)
                  free(v1001);
                LOBYTE(v9) = 0;
                v853 = v1067;
                *((_QWORD *)v1067 + 63) = v997;
                *((_DWORD *)v1067 + 129) = v1000;
                v852 = *((_DWORD *)v1067 + 128) + 1;
              }
              else
              {
                LOBYTE(v9) = 0;
                v850 = *((_DWORD *)v849 - 19);
                *(_QWORD *)v849 = v687;
                *((_QWORD *)v849 + 1) = v688;
                v851 = &v846[96 * v844];
                v851[16] = v848;
                v851[17] = 1;
                *((_DWORD *)v851 + 5) = v850;
                *((_QWORD *)v851 + 3) = 0;
                *((_DWORD *)v851 + 8) = 0;
                *(_OWORD *)(v851 + 40) = 0u;
                *(_OWORD *)(v851 + 56) = 0u;
                *(_OWORD *)(v851 + 68) = 0u;
                *((_DWORD *)v851 + 21) = 16;
                v852 = v844 + 1;
                v853 = v1067;
              }
              *((_DWORD *)v853 + 128) = v852;
              goto LABEL_215;
            case 116:
              v95 = v1067;
              goto LABEL_178;
            case 117:
              *(_QWORD *)__dst = "unexpected token in 'end' directive";
              *(_WORD *)&__dst[32] = 259;
              if (llvm::MCAsmParser::parseEOL(v1067, (const llvm::Twine *)__dst))
                goto LABEL_260;
              if (!**__s1)
                goto LABEL_67;
              do
              {
                sub_1C60E57B0(v1043);
                LOBYTE(v9) = 0;
              }
              while (**__s1);
              goto LABEL_215;
            case 123:
              v461 = *(char **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067) + 96);
              sub_1C6109CB4((std::string *)v1106, (uint64_t)v1067);
              v573 = *(_BYTE **)v1106;
              if (v1106[23] >= 0)
                v573 = v1106;
              v574 = v1106[23] & 0x7F;
              if (v1106[23] < 0)
                v574 = *(_QWORD *)&v1106[8];
              *(_QWORD *)__dst = v573;
              *(_QWORD *)&__dst[8] = v574;
              v575 = sub_1C534E9D8((uint64_t *)__dst, " \t\n\v\f\r", 6);
              if (!v576)
                goto LABEL_1251;
              v577 = 0;
              v578 = (unsigned __int8 *)v575;
              v579 = v576;
              do
              {
                v580 = *v578;
                if ((v580 - 48) >= 0xA)
                {
                  if ((v580 - 97) >= 0x1A)
                  {
                    if ((v580 - 65) > 0x19)
                      goto LABEL_1251;
                    v581 = -55;
                  }
                  else
                  {
                    v581 = -87;
                  }
                }
                else
                {
                  v581 = -48;
                }
                v582 = v581 + v580;
                if (v582 > 9)
                  goto LABEL_1251;
                v583 = 10 * v577 + v582;
                if (v577 > v583 / 0xA)
                  goto LABEL_1251;
                ++v578;
                v577 = v583;
                --v579;
              }
              while (v579);
              if (v583 >= 0x100000000)
                v590 = 0;
              else
                v590 = v583;
              if (HIDWORD(v583))
              {
LABEL_1251:
                *(_WORD *)&__dst[32] = 1283;
                *(_QWORD *)__dst = "radix must be a decimal number in the range 2 to 16; was ";
                *(_QWORD *)&__dst[16] = v575;
                *(_QWORD *)&__dst[24] = v576;
LABEL_1638:
                v672 = (uint64_t)v1067;
LABEL_1639:
                v717 = llvm::MCAsmParser::Error(v672, (uint64_t)v461, (uint64_t)__dst, 0, 0);
LABEL_1640:
                LOBYTE(v9) = v717;
              }
              else if (v590 - 17 <= 0xFFFFFFF0)
              {
                std::to_string((std::string *)v1090, v590);
                v738 = std::string::insert((std::string *)v1090, 0, "radix must be in the range 2 to 16; was ");
                v739 = v738->__r_.__value_.__r.__words[2];
                *(_OWORD *)&__str[0].__r_.__value_.__l.__data_ = *(_OWORD *)&v738->__r_.__value_.__l.__data_;
                __str[0].__r_.__value_.__r.__words[2] = v739;
                v738->__r_.__value_.__l.__size_ = 0;
                v738->__r_.__value_.__r.__words[2] = 0;
                v738->__r_.__value_.__r.__words[0] = 0;
                *(_WORD *)&__dst[32] = 260;
                *(_QWORD *)__dst = __str;
                LOBYTE(v9) = llvm::MCAsmParser::Error((uint64_t)v1067, (uint64_t)v461, (uint64_t)__dst, 0, 0);
                if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__str[0].__r_.__value_.__l.__data_);
                if ((v1090[23] & 0x80000000) != 0)
                  operator delete(*(void **)v1090);
              }
              else
              {
                LOBYTE(v9) = 0;
                *(_DWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v1067 + 40))(v1067) + 116) = v590;
              }
LABEL_1641:
              if ((v1106[23] & 0x80000000) == 0)
                goto LABEL_215;
              v554 = *(char **)v1106;
              goto LABEL_1643;
            default:
              v144 = v1081;
              *(_QWORD *)__dst = "unknown directive";
              *(_WORD *)&__dst[32] = 259;
              v146 = (uint64_t)v1067;
              goto LABEL_264;
          }
        }
        goto LABEL_67;
      }
LABEL_215:
      if (v1095 >= 0x41 && __src)
        MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
      return v9 & 1;
  }
}

uint64_t sub_1C6108828(_DWORD **a1, unsigned __int8 **a2, int a3)
{
  int v5;
  unsigned __int8 *v7;
  BOOL v8;
  int *v9;
  int v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  int v22;
  BOOL v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  __int16 v27;
  uint64_t v28;
  unsigned int v29;

  v5 = *a1[6];
  if ((v5 - 2) < 2)
  {
    v15 = *(_QWORD *)((*((uint64_t (**)(_DWORD **))*a1 + 5))(a1) + 8);
    if (*(_DWORD *)v15 == 2)
    {
      v16 = *(unsigned __int8 **)(v15 + 8);
      v17 = *(unsigned __int8 **)(v15 + 16);
    }
    else
    {
      v16 = *(unsigned __int8 **)(v15 + 8);
      v19 = *(_QWORD *)(v15 + 16);
      v20 = v19 - 1;
      v21 = v19 != 0;
      if (v19)
        ++v16;
      if (v21 > v20)
        v20 = v19 != 0;
      if (v19 < v20)
        v20 = v19;
      v17 = (unsigned __int8 *)(v20 - v21);
    }
    *a2 = v16;
    a2[1] = v17;
    if (a3 == 1)
    {
      v25 = v16;
      v26 = v17;
      v27 = 0;
      if (v17 == (unsigned __int8 *)4 && !llvm::StringRef::compare_insensitive(&v25, "echo", 4uLL))
        v27 = 257;
      sub_1C63EBA34((uint64_t)&v25);
      if (HIBYTE(v27))
        v24 = v27 == 0;
      else
        v24 = 1;
      v22 = !v24;
    }
    else
    {
      v22 = 0;
    }
    sub_1C610DB3C((uint64_t)a1, v22);
    return 0;
  }
  else if (v5 == 45 || v5 == 26)
  {
    v7 = *(unsigned __int8 **)((*((uint64_t (**)(_DWORD **))*a1 + 5))(a1) + 96);
    sub_1C610C428((uint64_t)&v25, (uint64_t)a1, 0);
    v8 = (_DWORD)v25 == 2 && v7 + 1 == v26;
    v18 = !v8;
    if (v8)
    {
      sub_1C60E57B0((uint64_t)(a1 + 5));
      v9 = *(int **)((*((uint64_t (**)(_DWORD **))*a1 + 5))(a1) + 8);
      v10 = *v9;
      v11 = *((_QWORD *)v9 + 2);
      if (v10 != 2)
      {
        v12 = v11 - 1;
        v13 = v11 != 0;
        if (v13 > v11 - 1)
          v12 = v11 != 0;
        if (v11 >= v12)
          v11 = v12;
        v11 -= v13;
      }
      *a2 = v7;
      a2[1] = (unsigned __int8 *)(v11 + 1);
      (*((void (**)(_DWORD **))*a1 + 23))(a1);
    }
    if (v29 >= 0x41 && v28)
      MEMORY[0x1CAA32F9C](v28, 0x1000C8000313F17);
  }
  else
  {
    return 1;
  }
  return v18;
}

BOOL sub_1C6108A0C(_BYTE *a1, char a2)
{
  unint64_t v4;
  char *v5;
  _WORD *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  int v14;
  __int16 v15;
  uint64_t v17;
  int v18;
  uint64_t v19;
  char v20;
  _QWORD v21[4];
  __int16 v22;
  void *__p;
  uint64_t v24;
  uint64_t v25;

  v5 = (char *)*((_QWORD *)a1 + 53);
  v4 = *((_QWORD *)a1 + 54);
  if ((unint64_t)v5 >= v4)
  {
    v7 = (char *)*((_QWORD *)a1 + 52);
    v8 = (v5 - v7) >> 3;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61)
      abort();
    v10 = v4 - (_QWORD)v7;
    if (v10 >> 2 > v9)
      v9 = v10 >> 2;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >> 61)
        sub_1C4764EE4();
      v12 = (char *)operator new(8 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[8 * v8];
    *(_QWORD *)v13 = *((_QWORD *)a1 + 51);
    v6 = v13 + 8;
    if (v5 != v7)
    {
      do
      {
        v14 = *((_DWORD *)v5 - 2);
        v5 -= 8;
        v15 = *((_WORD *)v5 + 2);
        *((_DWORD *)v13 - 2) = v14;
        v13 -= 8;
        *((_WORD *)v13 + 2) = v15;
      }
      while (v5 != v7);
      v5 = (char *)*((_QWORD *)a1 + 52);
    }
    *((_QWORD *)a1 + 52) = v13;
    *((_QWORD *)a1 + 53) = v6;
    *((_QWORD *)a1 + 54) = &v12[8 * v11];
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v5 = *((_QWORD *)a1 + 51);
    v6 = v5 + 8;
  }
  *((_QWORD *)a1 + 53) = v6;
  *((_DWORD *)a1 + 102) = 1;
  if (a1[413])
  {
    (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 224))(a1);
    return 0;
  }
  __p = 0;
  v24 = 0;
  v25 = 0;
  if (sub_1C610ED00((llvm::MCAsmParser *)a1, (uint64_t)&__p))
  {
    v21[0] = "expected text item parameter for 'ifb' directive";
    v22 = 259;
    v17 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 40))(a1);
    llvm::MCAsmParser::Error((uint64_t)a1, *(_QWORD *)(v17 + 96), (uint64_t)v21, 0, 0);
LABEL_25:
    v18 = 0;
    goto LABEL_29;
  }
  v21[0] = "unexpected token in 'ifb' directive";
  v22 = 259;
  if (llvm::MCAsmParser::parseEOL((llvm::MCAsmParser *)a1, (const llvm::Twine *)v21))
    goto LABEL_25;
  v19 = HIBYTE(v25) & 0x7F;
  if (v25 < 0)
    v19 = v24;
  v20 = (v19 == 0) ^ a2;
  a1[412] = v20 ^ 1;
  a1[413] = v20;
  v18 = 1;
LABEL_29:
  if (SHIBYTE(v25) < 0)
    operator delete(__p);
  return !v18;
}

uint64_t sub_1C6108C04(llvm::MCAsmParser *a1, char a2)
{
  unint64_t v4;
  char *v5;
  _WORD *v6;
  char *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  int v14;
  __int16 v15;
  uint64_t result;
  BOOL v17;
  char v18;
  char v19;
  uint64_t v20;
  void ***v21;
  size_t v22;
  uint64_t v23;
  int v24;
  size_t v25;
  void ***v26;
  int v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t v36;
  const char **v37;
  size_t v38;
  uint64_t v39;
  int v40;
  size_t v41;
  const char **v42;
  int v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  llvm::MCContext *v53;
  uint64_t v54;
  unint64_t v55;
  void **__p;
  void **__pa;
  uint64_t v58;
  uint64_t v59;
  int v60;
  int v61;
  void *v62[2];
  char v63;
  __int16 v64;
  void **v65;
  size_t v66;
  char v67;
  __int16 v68;
  char *v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;

  v5 = (char *)*((_QWORD *)a1 + 53);
  v4 = *((_QWORD *)a1 + 54);
  if ((unint64_t)v5 >= v4)
  {
    v7 = (char *)*((_QWORD *)a1 + 52);
    v8 = (v5 - v7) >> 3;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61)
      abort();
    v10 = v4 - (_QWORD)v7;
    if (v10 >> 2 > v9)
      v9 = v10 >> 2;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >> 61)
        sub_1C4764EE4();
      v12 = (char *)operator new(8 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[8 * v8];
    *(_QWORD *)v13 = *((_QWORD *)a1 + 51);
    v6 = v13 + 8;
    if (v5 != v7)
    {
      do
      {
        v14 = *((_DWORD *)v5 - 2);
        v5 -= 8;
        v15 = *((_WORD *)v5 + 2);
        *((_DWORD *)v13 - 2) = v14;
        v13 -= 8;
        *((_WORD *)v13 + 2) = v15;
      }
      while (v5 != v7);
      v5 = (char *)*((_QWORD *)a1 + 52);
    }
    *((_QWORD *)a1 + 52) = v13;
    *((_QWORD *)a1 + 53) = v6;
    *((_QWORD *)a1 + 54) = &v12[8 * v11];
    if (v5)
      operator delete(v5);
  }
  else
  {
    *(_QWORD *)v5 = *((_QWORD *)a1 + 51);
    v6 = v5 + 8;
  }
  *((_QWORD *)a1 + 53) = v6;
  *((_DWORD *)a1 + 102) = 1;
  if (*((_BYTE *)a1 + 413))
  {
    (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 224))(a1);
    return 0;
  }
  v73 = 0;
  v71 = 0;
  v72 = 0;
  if (!(*(unsigned int (**)(_QWORD, int *, uint64_t *, uint64_t *))(**((_QWORD **)a1 + 1) + 40))(*((_QWORD *)a1 + 1), &v73, &v72, &v71))goto LABEL_21;
  v69 = 0;
  v70 = 0;
  v19 = (*(uint64_t (**)(llvm::MCAsmParser *, char **))(*(_QWORD *)a1 + 192))(a1, &v69);
  v65 = (void **)"expected identifier after 'ifdef'";
  v68 = 259;
  v20 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1);
  if ((v19 & 1) != 0)
  {
    llvm::MCAsmParser::Error((uint64_t)a1, *(_QWORD *)(*(_QWORD *)(v20 + 8) + 8), (uint64_t)&v65, 0, 0);
  }
  else
  {
    v62[0] = "unexpected token in 'ifdef'";
    v64 = 259;
    if (!llvm::MCAsmParser::parseEOL(a1, (const llvm::Twine *)v62))
    {
      sub_1C5E3DEA4(&v65, v69, (uint64_t (*)(_QWORD))sub_1C5E3C6A8, &v69[v70], (uint64_t)sub_1C5E3C6A8, v70);
      __p = v65;
      if (v67 >= 0)
        v21 = &v65;
      else
        v21 = (void ***)v65;
      if (v67 >= 0)
        v22 = v67 & 0x7F;
      else
        v22 = v66;
      v23 = *((unsigned int *)a1 + 286);
      v60 = v67;
      if ((_DWORD)v23)
      {
        v24 = 0;
        if (v22)
        {
          v25 = v22;
          v26 = v21;
          do
          {
            v27 = *(unsigned __int8 *)v26;
            v26 = (void ***)((char *)v26 + 1);
            v24 = 33 * v24 + v27;
            --v25;
          }
          while (v25);
        }
        v28 = v23 - 1;
        v29 = *((_QWORD *)a1 + 142);
        v58 = *((unsigned int *)a1 + 286);
        v30 = v29 + 8 * v23 + 8;
        v31 = 1;
        v32 = v24;
        while (1)
        {
          v33 = v32 & v28;
          v34 = *(_QWORD **)(v29 + 8 * v33);
          if (v34 != (_QWORD *)-8)
          {
            if (!v34)
            {
              v35 = v58;
              v36 = v58;
              goto LABEL_46;
            }
            if (*(_DWORD *)(v30 + 4 * v33) == v24
              && v22 == *v34
              && (!v22 || !memcmp(v21, (char *)v34 + *((unsigned int *)a1 + 289), v22)))
            {
              break;
            }
          }
          v32 = v31 + v33;
          ++v31;
        }
        v35 = v58;
        if ((_DWORD)v33 == -1)
          v36 = v58;
        else
          v36 = (int)v33;
      }
      else
      {
        v35 = 0;
        v36 = 0;
      }
LABEL_46:
      if (v60 < 0)
        operator delete(__p);
      if (v36 == v35)
      {
        sub_1C5E3DEA4(&v65, v69, (uint64_t (*)(_QWORD))sub_1C5E3C6A8, &v69[v70], (uint64_t)sub_1C5E3C6A8, v70);
        __pa = v65;
        v37 = v67 >= 0 ? (const char **)&v65 : (const char **)v65;
        v38 = v67 >= 0 ? v67 & 0x7F : v66;
        v39 = *((unsigned int *)a1 + 120);
        v61 = v67;
        if ((_DWORD)v39)
        {
          v40 = 0;
          if (v38)
          {
            v41 = v38;
            v42 = v37;
            do
            {
              v43 = *(unsigned __int8 *)v42;
              v42 = (const char **)((char *)v42 + 1);
              v40 = 33 * v40 + v43;
              --v41;
            }
            while (v41);
          }
          v44 = v39 - 1;
          v45 = *((_QWORD *)a1 + 59);
          v59 = *((unsigned int *)a1 + 120);
          v46 = v45 + 8 * v39 + 8;
          v47 = 1;
          v48 = v40;
          while (1)
          {
            v49 = v48 & v44;
            v50 = *(_QWORD **)(v45 + 8 * v49);
            if (v50 != (_QWORD *)-8)
            {
              if (!v50)
              {
                v51 = v59;
                v52 = v59;
                goto LABEL_68;
              }
              if (*(_DWORD *)(v46 + 4 * v49) == v40
                && v38 == *v50
                && (!v38 || !memcmp(v37, (char *)v50 + *((unsigned int *)a1 + 123), v38)))
              {
                break;
              }
            }
            v48 = v47 + v49;
            ++v47;
          }
          v51 = v59;
          v52 = (_DWORD)v49 == -1 ? v59 : (int)v49;
        }
        else
        {
          v51 = 0;
          v52 = 0;
        }
LABEL_68:
        if (v61 < 0)
          operator delete(__pa);
        if (v52 == v51)
        {
          v53 = (llvm::MCContext *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 48))(a1);
          sub_1C5E3DEA4(v62, v69, (uint64_t (*)(_QWORD))sub_1C5E3C6A8, &v69[v70], (uint64_t)sub_1C5E3C6A8, v70);
          v68 = 260;
          v65 = v62;
          v54 = llvm::MCContext::lookupSymbol(v53, (const char **)&v65);
          if (v63 < 0)
            operator delete(v62[0]);
          if (v54)
          {
            v55 = *(_QWORD *)v54 & 0xFFFFFFFFFFFFFFF8;
            if (!v55 && (*(_DWORD *)(v54 + 8) & 0x1C00) == 0x800)
            {
              llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v54 + 24));
              *(_QWORD *)v54 = *(_QWORD *)v54 & 7 | v55;
            }
            v17 = v55 != 0;
          }
          else
          {
            v17 = 0;
          }
          goto LABEL_22;
        }
      }
LABEL_21:
      v17 = 1;
LABEL_22:
      result = 0;
      v18 = v17 ^ a2;
      *((_BYTE *)a1 + 412) = v18 ^ 1;
      *((_BYTE *)a1 + 413) = v18;
      return result;
    }
  }
  return 1;
}

uint64_t sub_1C61090F8(uint64_t a1, int a2, int a3)
{
  unint64_t v6;
  char *v7;
  _WORD *v8;
  char *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  char *v14;
  char *v15;
  int v16;
  __int16 v17;
  unsigned __int8 *p_s1;
  unint64_t v19;
  uint64_t v20;
  unsigned __int8 *p_p;
  BOOL v22;
  size_t v23;
  uint64_t v24;
  unsigned __int8 *v25;
  uint64_t v26;
  void **v27;
  int v28;
  int v29;
  int v30;
  int v31;
  BOOL v33;
  BOOL v34;
  char v35;
  const char *v36;
  char v37;
  uint64_t v38;
  uint64_t v40;
  unsigned __int8 *v41[4];
  __int16 v42;
  void *__p;
  uint64_t v44;
  uint64_t v45;
  void *__s1;
  size_t __n;
  uint64_t v48;

  __s1 = 0;
  __n = 0;
  v48 = 0;
  __p = 0;
  v44 = 0;
  v45 = 0;
  if (sub_1C610ED00((llvm::MCAsmParser *)a1, (uint64_t)&__s1))
    goto LABEL_54;
  if (**(_DWORD **)(a1 + 48) != 25)
  {
    if (a2)
      v36 = "expected comma after first string for 'ifidn' directive";
    else
      v36 = "expected comma after first string for 'ifdif' directive";
    goto LABEL_69;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
  if (sub_1C610ED00((llvm::MCAsmParser *)a1, (uint64_t)&__p))
  {
LABEL_54:
    if (a2)
      v36 = "expected text item parameter for 'ifidn' directive";
    else
      v36 = "expected text item parameter for 'ifdif' directive";
LABEL_69:
    v41[0] = (unsigned __int8 *)v36;
    v42 = 259;
    v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    llvm::MCAsmParser::Error(a1, *(_QWORD *)(v40 + 96), (uint64_t)v41, 0, 0);
    v38 = 1;
    goto LABEL_63;
  }
  v7 = *(char **)(a1 + 424);
  v6 = *(_QWORD *)(a1 + 432);
  if ((unint64_t)v7 >= v6)
  {
    v9 = *(char **)(a1 + 416);
    v10 = (v7 - v9) >> 3;
    v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 61)
      abort();
    v12 = v6 - (_QWORD)v9;
    if (v12 >> 2 > v11)
      v11 = v12 >> 2;
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8)
      v13 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v13 = v11;
    if (v13)
    {
      if (v13 >> 61)
        sub_1C4764EE4();
      v14 = (char *)operator new(8 * v13);
    }
    else
    {
      v14 = 0;
    }
    v15 = &v14[8 * v10];
    *(_QWORD *)v15 = *(_QWORD *)(a1 + 408);
    v8 = v15 + 8;
    if (v7 != v9)
    {
      do
      {
        v16 = *((_DWORD *)v7 - 2);
        v7 -= 8;
        v17 = *((_WORD *)v7 + 2);
        *((_DWORD *)v15 - 2) = v16;
        v15 -= 8;
        *((_WORD *)v15 + 2) = v17;
      }
      while (v7 != v9);
      v7 = *(char **)(a1 + 416);
    }
    *(_QWORD *)(a1 + 416) = v15;
    *(_QWORD *)(a1 + 424) = v8;
    *(_QWORD *)(a1 + 432) = &v14[8 * v13];
    if (v7)
      operator delete(v7);
  }
  else
  {
    *(_QWORD *)v7 = *(_QWORD *)(a1 + 408);
    v8 = v7 + 8;
  }
  *(_QWORD *)(a1 + 424) = v8;
  *(_DWORD *)(a1 + 408) = 1;
  if (a3)
  {
    p_s1 = (unsigned __int8 *)&__s1;
    if (v48 >= 0)
    {
      v19 = HIBYTE(v48) & 0x7F;
    }
    else
    {
      p_s1 = (unsigned __int8 *)__s1;
      v19 = __n;
    }
    v41[0] = p_s1;
    v41[1] = (unsigned __int8 *)v19;
    v20 = HIBYTE(v45) & 0x7F;
    if (v45 < 0)
      v20 = v44;
    if (v19 == v20)
    {
      if (v45 >= 0)
        p_p = (unsigned __int8 *)&__p;
      else
        p_p = (unsigned __int8 *)__p;
      v22 = llvm::StringRef::compare_insensitive(v41, p_p, v19) == 0;
    }
    else
    {
      v22 = 0;
    }
    v35 = v22 ^ a2;
  }
  else
  {
    if (v48 >= 0)
      v23 = HIBYTE(v48) & 0x7F;
    else
      v23 = __n;
    v24 = HIBYTE(v45) & 0x7F;
    if (v45 < 0)
      v24 = v44;
    if (v23 == v24)
    {
      if (v45 >= 0)
        v25 = (unsigned __int8 *)&__p;
      else
        v25 = (unsigned __int8 *)__p;
      if (v48 < 0)
      {
        v34 = memcmp(__s1, v25, __n) == 0;
      }
      else if ((v48 & 0x7F00000000000000) != 0)
      {
        v26 = (HIBYTE(v48) & 0x7F) - 1;
        v27 = &__s1;
        do
        {
          v29 = *(unsigned __int8 *)v27;
          v27 = (void **)((char *)v27 + 1);
          v28 = v29;
          v31 = *v25++;
          v30 = v31;
          v33 = v26-- != 0;
          v34 = v28 == v30;
        }
        while (v34 && v33);
      }
      else
      {
        v34 = 1;
      }
    }
    else
    {
      v34 = 0;
    }
    v35 = v34 ^ a2;
  }
  v37 = v35 ^ 1;
  *(_BYTE *)(a1 + 412) = v37;
  v38 = 0;
  *(_BYTE *)(a1 + 413) = v37 ^ 1;
LABEL_63:
  if (SHIBYTE(v45) < 0)
    operator delete(__p);
  if (SHIBYTE(v48) < 0)
    operator delete(__s1);
  return v38;
}

uint64_t sub_1C6109418(_BYTE *a1, uint64_t a2, int a3)
{
  uint64_t v5;
  const char *v7;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  void *__p;
  uint64_t v13;
  uint64_t v14;
  _QWORD v15[4];
  __int16 v16;

  if ((*((_DWORD *)a1 + 102) - 1) >= 2)
  {
    v15[0] = "Encountered an elseif that doesn't follow an if or an elseif";
    v16 = 259;
    return llvm::MCAsmParser::Error((uint64_t)a1, a2, (uint64_t)v15, 0, 0);
  }
  *((_DWORD *)a1 + 102) = 2;
  v5 = *((_QWORD *)a1 + 53);
  if (*((_QWORD *)a1 + 52) != v5 && *(_BYTE *)(v5 - 3) || a1[412])
  {
    a1[413] = 1;
    (*(void (**)(_BYTE *))(*(_QWORD *)a1 + 224))(a1);
    return 0;
  }
  __p = 0;
  v13 = 0;
  v14 = 0;
  if (sub_1C610ED00((llvm::MCAsmParser *)a1, (uint64_t)&__p))
  {
    if (a3)
      v7 = "expected text item parameter for 'elseifb' directive";
    else
      v7 = "expected text item parameter for 'elseifnb' directive";
    v15[0] = v7;
    v16 = 259;
    v11 = (*(uint64_t (**)(_BYTE *))(*(_QWORD *)a1 + 40))(a1);
    llvm::MCAsmParser::Error((uint64_t)a1, *(_QWORD *)(v11 + 96), (uint64_t)v15, 0, 0);
    goto LABEL_18;
  }
  v15[0] = "unexpected token in 'elseifb' directive";
  v16 = 259;
  if (llvm::MCAsmParser::parseEOL((llvm::MCAsmParser *)a1, (const llvm::Twine *)v15))
  {
LABEL_18:
    v10 = 0;
    goto LABEL_19;
  }
  v8 = HIBYTE(v14) & 0x7F;
  if (v14 < 0)
    v8 = v13;
  v9 = (v8 == 0) ^ a3;
  a1[412] = v9 ^ 1;
  a1[413] = v9;
  v10 = 1;
LABEL_19:
  if (SHIBYTE(v14) < 0)
    operator delete(__p);
  return !v10;
}

uint64_t sub_1C610959C(_DWORD *a1, uint64_t a2, char a3)
{
  uint64_t v5;
  uint64_t result;
  BOOL v7;
  char v8;
  char v9;
  uint64_t v10;
  const char **v11;
  size_t v12;
  uint64_t v13;
  int v14;
  size_t v15;
  const char **v16;
  int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  const char **v27;
  size_t v28;
  uint64_t v29;
  int v30;
  size_t v31;
  const char **v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  llvm::MCContext *v43;
  unint64_t *v44;
  unint64_t *v45;
  unint64_t v46;
  char *__p;
  char *__pa;
  uint64_t v49;
  uint64_t v50;
  int v51;
  int v52;
  const char *v53;
  __int16 v54;
  char *v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  char *v60;
  unint64_t v61;
  char v62;
  __int16 v63;

  if ((a1[102] - 1) >= 2)
  {
    v60 = "Encountered an elseif that doesn't follow an if or an elseif";
    v63 = 259;
    return llvm::MCAsmParser::Error((uint64_t)a1, a2, (uint64_t)&v60, 0, 0);
  }
  else
  {
    a1[102] = 2;
    v5 = *((_QWORD *)a1 + 53);
    if (*((_QWORD *)a1 + 52) != v5 && *(_BYTE *)(v5 - 3) || *((_BYTE *)a1 + 412))
    {
      *((_BYTE *)a1 + 413) = 1;
      (*(void (**)(_DWORD *))(*(_QWORD *)a1 + 224))(a1);
      return 0;
    }
    v59 = 0;
    v57 = 0;
    v58 = 0;
    if (!(*(unsigned int (**)(_QWORD, int *, uint64_t *, uint64_t *))(**((_QWORD **)a1 + 1) + 40))(*((_QWORD *)a1 + 1), &v59, &v58, &v57))goto LABEL_7;
    v55 = 0;
    v56 = 0;
    v9 = (*(uint64_t (**)(_DWORD *, char **))(*(_QWORD *)a1 + 192))(a1, &v55);
    v60 = "expected identifier after 'elseifdef'";
    v63 = 259;
    v10 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 40))(a1);
    if ((v9 & 1) != 0)
    {
      llvm::MCAsmParser::Error((uint64_t)a1, *(_QWORD *)(*(_QWORD *)(v10 + 8) + 8), (uint64_t)&v60, 0, 0);
    }
    else
    {
      v53 = "unexpected token in 'elseifdef'";
      v54 = 259;
      if (!llvm::MCAsmParser::parseEOL((llvm::MCAsmParser *)a1, (const llvm::Twine *)&v53))
      {
        sub_1C5E3DEA4(&v60, v55, (uint64_t (*)(_QWORD))sub_1C5E3C6A8, &v55[v56], (uint64_t)sub_1C5E3C6A8, v56);
        __p = v60;
        if (v62 >= 0)
          v11 = (const char **)&v60;
        else
          v11 = (const char **)v60;
        if (v62 >= 0)
          v12 = v62 & 0x7F;
        else
          v12 = v61;
        v13 = a1[286];
        v51 = v62;
        if ((_DWORD)v13)
        {
          v14 = 0;
          if (v12)
          {
            v15 = v12;
            v16 = v11;
            do
            {
              v17 = *(unsigned __int8 *)v16;
              v16 = (const char **)((char *)v16 + 1);
              v14 = 33 * v14 + v17;
              --v15;
            }
            while (v15);
          }
          v18 = v13 - 1;
          v19 = *((_QWORD *)a1 + 142);
          v49 = a1[286];
          v20 = v19 + 8 * v13 + 8;
          v21 = 1;
          v22 = v14;
          while (1)
          {
            v23 = v22 & v18;
            v24 = *(_QWORD **)(v19 + 8 * v23);
            if (v24 != (_QWORD *)-8)
            {
              if (!v24)
              {
                v25 = v49;
                v26 = v49;
                goto LABEL_33;
              }
              if (*(_DWORD *)(v20 + 4 * v23) == v14
                && v12 == *v24
                && (!v12 || !memcmp(v11, (char *)v24 + a1[289], v12)))
              {
                break;
              }
            }
            v22 = v21 + v23;
            ++v21;
          }
          v25 = v49;
          if ((_DWORD)v23 == -1)
            v26 = v49;
          else
            v26 = (int)v23;
        }
        else
        {
          v25 = 0;
          v26 = 0;
        }
LABEL_33:
        if (v51 < 0)
          operator delete(__p);
        if (v26 == v25)
        {
          sub_1C5E3DEA4(&v60, v55, (uint64_t (*)(_QWORD))sub_1C5E3C6A8, &v55[v56], (uint64_t)sub_1C5E3C6A8, v56);
          __pa = v60;
          v27 = v62 >= 0 ? (const char **)&v60 : (const char **)v60;
          v28 = v62 >= 0 ? v62 & 0x7F : v61;
          v29 = a1[120];
          v52 = v62;
          if ((_DWORD)v29)
          {
            v30 = 0;
            if (v28)
            {
              v31 = v28;
              v32 = v27;
              do
              {
                v33 = *(unsigned __int8 *)v32;
                v32 = (const char **)((char *)v32 + 1);
                v30 = 33 * v30 + v33;
                --v31;
              }
              while (v31);
            }
            v34 = v29 - 1;
            v35 = *((_QWORD *)a1 + 59);
            v50 = a1[120];
            v36 = v35 + 8 * v29 + 8;
            v37 = 1;
            v38 = v30;
            while (1)
            {
              v39 = v38 & v34;
              v40 = *(_QWORD **)(v35 + 8 * v39);
              if (v40 != (_QWORD *)-8)
              {
                if (!v40)
                {
                  v41 = v50;
                  v42 = v50;
                  goto LABEL_55;
                }
                if (*(_DWORD *)(v36 + 4 * v39) == v30
                  && v28 == *v40
                  && (!v28 || !memcmp(v27, (char *)v40 + a1[123], v28)))
                {
                  break;
                }
              }
              v38 = v37 + v39;
              ++v37;
            }
            v41 = v50;
            v42 = (_DWORD)v39 == -1 ? v50 : (int)v39;
          }
          else
          {
            v41 = 0;
            v42 = 0;
          }
LABEL_55:
          if (v52 < 0)
            operator delete(__pa);
          if (v42 == v41)
          {
            v43 = (llvm::MCContext *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 48))(a1);
            v63 = 261;
            v60 = v55;
            v61 = v56;
            v44 = (unint64_t *)llvm::MCContext::lookupSymbol(v43, (const char **)&v60);
            if (v44)
            {
              v45 = v44;
              v46 = *v44 & 0xFFFFFFFFFFFFFFF8;
              if (!v46 && (v45[1] & 0x1C00) == 0x800)
              {
                llvm::MCExpr::findAssociatedFragment((llvm::MCExpr *)v45[3]);
                *v45 = *v45 & 7 | v46;
              }
              v7 = v46 != 0;
            }
            else
            {
              v7 = 0;
            }
            goto LABEL_8;
          }
        }
LABEL_7:
        v7 = 1;
LABEL_8:
        result = 0;
        v8 = v7 ^ a3;
        *((_BYTE *)a1 + 412) = v8 ^ 1;
        *((_BYTE *)a1 + 413) = v8;
        return result;
      }
    }
    return 1;
  }
}

uint64_t sub_1C61099EC(llvm::MCAsmParser *a1, uint64_t a2, int a3, int a4)
{
  uint64_t v7;
  unsigned __int8 *p_s1;
  unint64_t v10;
  uint64_t v11;
  unsigned __int8 *p_p;
  BOOL v13;
  size_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  void **v18;
  int v19;
  int v20;
  int v21;
  int v22;
  BOOL v24;
  BOOL v25;
  char v26;
  const char *v27;
  char v28;
  int v29;
  uint64_t v30;
  void *__p;
  uint64_t v32;
  uint64_t v33;
  void *__s1;
  size_t __n;
  uint64_t v36;
  unsigned __int8 *v37[4];
  __int16 v38;

  if ((*((_DWORD *)a1 + 102) - 1) >= 2)
  {
    v37[0] = "Encountered an elseif that doesn't follow an if or an elseif";
    v38 = 259;
    return llvm::MCAsmParser::Error((uint64_t)a1, a2, (uint64_t)v37, 0, 0);
  }
  *((_DWORD *)a1 + 102) = 2;
  v7 = *((_QWORD *)a1 + 53);
  if (*((_QWORD *)a1 + 52) != v7 && *(_BYTE *)(v7 - 3) || *((_BYTE *)a1 + 412))
  {
    *((_BYTE *)a1 + 413) = 1;
    (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 224))(a1);
    return 0;
  }
  __s1 = 0;
  __n = 0;
  v36 = 0;
  __p = 0;
  v32 = 0;
  v33 = 0;
  if (!sub_1C610ED00(a1, (uint64_t)&__s1))
  {
    if (**((_DWORD **)a1 + 6) != 25)
    {
      if (a3)
        v27 = "expected comma after first string for 'elseifidn' directive";
      else
        v27 = "expected comma after first string for 'elseifdif' directive";
      goto LABEL_60;
    }
    (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 184))(a1);
    if (!sub_1C610ED00(a1, (uint64_t)&__p))
    {
      if (a4)
      {
        p_s1 = (unsigned __int8 *)&__s1;
        if (v36 >= 0)
        {
          v10 = HIBYTE(v36) & 0x7F;
        }
        else
        {
          p_s1 = (unsigned __int8 *)__s1;
          v10 = __n;
        }
        v37[0] = p_s1;
        v37[1] = (unsigned __int8 *)v10;
        v11 = HIBYTE(v33) & 0x7F;
        if (v33 < 0)
          v11 = v32;
        if (v10 == v11)
        {
          if (v33 >= 0)
            p_p = (unsigned __int8 *)&__p;
          else
            p_p = (unsigned __int8 *)__p;
          v13 = llvm::StringRef::compare_insensitive(v37, p_p, v10) == 0;
        }
        else
        {
          v13 = 0;
        }
        v26 = v13 ^ a3;
      }
      else
      {
        if (v36 >= 0)
          v14 = HIBYTE(v36) & 0x7F;
        else
          v14 = __n;
        v15 = HIBYTE(v33) & 0x7F;
        if (v33 < 0)
          v15 = v32;
        if (v14 == v15)
        {
          if (v33 >= 0)
            v16 = (unsigned __int8 *)&__p;
          else
            v16 = (unsigned __int8 *)__p;
          if (v36 < 0)
          {
            v25 = memcmp(__s1, v16, __n) == 0;
          }
          else if ((v36 & 0x7F00000000000000) != 0)
          {
            v17 = (HIBYTE(v36) & 0x7F) - 1;
            v18 = &__s1;
            do
            {
              v20 = *(unsigned __int8 *)v18;
              v18 = (void **)((char *)v18 + 1);
              v19 = v20;
              v22 = *v16++;
              v21 = v22;
              v24 = v17-- != 0;
              v25 = v19 == v21;
            }
            while (v25 && v24);
          }
          else
          {
            v25 = 1;
          }
        }
        else
        {
          v25 = 0;
        }
        v26 = v25 ^ a3;
      }
      v28 = v26 ^ 1;
      *((_BYTE *)a1 + 412) = v28;
      *((_BYTE *)a1 + 413) = v28 ^ 1;
      v29 = 1;
      goto LABEL_53;
    }
  }
  if (a3)
    v27 = "expected text item parameter for 'elseifidn' directive";
  else
    v27 = "expected text item parameter for 'elseifdif' directive";
LABEL_60:
  v37[0] = (unsigned __int8 *)v27;
  v38 = 259;
  v30 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1);
  llvm::MCAsmParser::Error((uint64_t)a1, *(_QWORD *)(v30 + 96), (uint64_t)v37, 0, 0);
  v29 = 0;
LABEL_53:
  if (SHIBYTE(v33) < 0)
    operator delete(__p);
  if (SHIBYTE(v36) < 0)
    operator delete(__s1);
  return !v29;
}

void sub_1C6109CB4(std::string *a1, uint64_t a2)
{
  const void **v3;
  const void **v4;
  const void *v5;
  size_t v6;
  void *p_p;
  std::string::size_type v8;
  void **v9;
  char v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  void **v14;
  std::string::size_type v15;
  std::string::size_type v16;
  void *__p;
  size_t v18;
  unint64_t v19;
  void *v20;
  unsigned int v21;
  _QWORD v22[3];

  v22[2] = *MEMORY[0x1E0C80C00];
  sub_1C610F250((uint64_t)&v20, a2, 9);
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  v3 = (const void **)v20;
  if (!v21)
    goto LABEL_24;
  v4 = (const void **)((char *)v20 + 16 * v21);
  do
  {
    v5 = *v3;
    if (!*v3)
    {
      v8 = 0;
      v9 = 0;
      v10 = 0;
      __p = 0;
      v18 = 0;
      v19 = 0;
      goto LABEL_14;
    }
    v6 = (size_t)v3[1];
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (v6 >= 0x17)
    {
      v11 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v11 = v6 | 7;
      v12 = v11 + 1;
      p_p = operator new(v11 + 1);
      v18 = v6;
      v19 = v12 | 0x8000000000000000;
      __p = p_p;
    }
    else
    {
      HIBYTE(v19) = v3[1];
      p_p = &__p;
      if (!v6)
        goto LABEL_13;
    }
    memmove(p_p, v5, v6);
LABEL_13:
    *((_BYTE *)p_p + v6) = 0;
    v10 = HIBYTE(v19);
    v9 = (void **)__p;
    v8 = v18;
LABEL_14:
    v13 = v10;
    if (v10 >= 0)
      v14 = &__p;
    else
      v14 = v9;
    v15 = v10 & 0x7F;
    if (v13 >= 0)
      v16 = v15;
    else
      v16 = v8;
    std::string::append(a1, (const std::string::value_type *)v14, v16);
    if (SHIBYTE(v19) < 0)
      operator delete(__p);
    v3 += 2;
  }
  while (v3 != v4);
  v3 = (const void **)v20;
LABEL_24:
  if (v3 != v22)
    free(v3);
}

BOOL sub_1C6109E38(_QWORD *a1)
{
  uint64_t v2;
  int v3;
  __n128 v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  size_t v8;
  void *v9;
  size_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char v19;
  BOOL v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  __n128 v25;
  uint64_t v26;
  __int128 v27;
  char v28;
  _QWORD v29[3];

  v29[2] = *MEMORY[0x1E0C80C00];
  v2 = (*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1);
  v3 = *(unsigned __int8 *)(v2 + 1513);
  if (*(_BYTE *)(v2 + 1513) && !*(_DWORD *)((*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1) + 1516))
  {
    if (a1[101])
    {
      v5 = (*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1);
      v6 = (*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1);
      v7 = *(void **)(v6 + 1272);
      v8 = *(_QWORD *)(v6 + 1280);
      v9 = (void *)a1[100];
      v10 = a1[101];
      LODWORD(v27) = 0;
      v25.n128_u64[0] = (unint64_t)&v27;
      v11 = sub_1C592911C((uint64_t **)(v5 + 1472), (unsigned int *)&v27, (uint64_t)&std::piecewise_construct, &v25);
      LOBYTE(v27) = 0;
      v28 = 0;
      v25.n128_u8[0] = 0;
      LOBYTE(v26) = 0;
      v4 = sub_1C59292C4((uint64_t)(v11 + 40), v7, v8, v9, v10, &v27, &v25);
    }
    v12 = (*(uint64_t (**)(_QWORD *, __n128))(*a1 + 48))(a1, v4);
    LODWORD(v27) = 0;
    v25.n128_u64[0] = (unint64_t)&v27;
    v13 = sub_1C592911C((uint64_t **)(v12 + 1472), (unsigned int *)&v27, (uint64_t)&std::piecewise_construct, &v25);
    v14 = (*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1);
    v15 = (*(uint64_t (**)(_QWORD *))(*a1 + 56))(a1);
    v16 = (*(uint64_t (**)(_QWORD *))(*a1 + 48))(a1);
    v17 = *(_QWORD *)(v16 + 1272);
    v18 = *(_QWORD *)(v16 + 1280);
    v19 = v13[447];
    v20 = v19 < 0;
    if (v19 >= 0)
      v21 = v13 + 424;
    else
      v21 = (char *)*((_QWORD *)v13 + 53);
    v22 = v19 & 0x7F;
    if (v20)
      v23 = *((_QWORD *)v13 + 54);
    else
      v23 = v22;
    v27 = *(_OWORD *)(v13 + 452);
    v28 = v13[468];
    v25 = *(__n128 *)(v13 + 472);
    v26 = *((_QWORD *)v13 + 61);
    (*(void (**)(_QWORD *__return_ptr, uint64_t, _QWORD, uint64_t, uint64_t, char *, uint64_t, __int128 *, __n128 *, _DWORD))(*(_QWORD *)v15 + 680))(v29, v15, 0, v17, v18, v21, v23, &v27, &v25, 0);
    *(_DWORD *)(v14 + 1516) = v29[0];
  }
  return v3 != 0;
}

uint64_t sub_1C610A054(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;
  int v11;
  uint64_t v12;
  int v13;
  size_t v14;
  uint64_t v15;
  const void *v16;
  _QWORD *v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  __int128 v24;
  unsigned int v25;
  char *v26;
  void *v27;
  uint64_t v28;
  _OWORD *v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  const void **v40;
  uint64_t v41;
  uint64_t v42;
  const char *v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int8 *v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _DWORD *v56;
  void *v57;
  size_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  unint64_t v64;
  _QWORD *v65;
  _QWORD *v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  unint64_t v70;
  char *v71;
  uint64_t *v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  char v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v85;
  uint64_t v87;
  size_t __n[2];
  _OWORD v89[2];
  uint64_t v90;
  int v91;
  void **v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  _QWORD v97[2];
  const void *v98;
  size_t v99;
  __int16 v100;
  _QWORD v101[2];
  const char *v102;
  __int16 v103;
  __int128 __p;
  const char *v105;
  void *__src;
  unsigned int v107;
  void *v108;
  __int128 v109;
  _BYTE v110[48];
  void *v111;
  char v112;
  uint64_t v113;
  _QWORD v114[2];
  uint64_t v115;
  uint64_t v116;
  __int16 v117;
  uint64_t v118;

  v118 = *MEMORY[0x1E0C80C00];
  if (dword_1ED838D28 == (uint64_t)(*(_QWORD *)(a1 + 688) - *(_QWORD *)(a1 + 680)) >> 3)
  {
    sub_1C4D82D08((uint64_t)&v108);
    sub_1C4D7C62C(&v108, (uint64_t)"macros cannot be nested more than ", 34);
    v5 = (_QWORD *)std::ostream::operator<<();
    v6 = sub_1C4D7C62C(v5, (uint64_t)" levels deep.", 13);
    sub_1C4D7C62C(v6, (uint64_t)" Use -asm-macro-max-nesting-depth to increase this limit.", 57);
    std::stringbuf::str();
    LOWORD(v89[1]) = 260;
    __n[0] = (size_t)&__p;
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    llvm::MCAsmParser::Error(a1, *(_QWORD *)(v7 + 96), (uint64_t)__n, 0, 0);
    if (SHIBYTE(v105) < 0)
      operator delete((void *)__p);
    v108 = (void *)*MEMORY[0x1E0DE4F60];
    *(void **)((char *)&v108 + *((_QWORD *)v108 - 3)) = *(void **)(MEMORY[0x1E0DE4F60] + 24);
    *(_QWORD *)&v109 = MEMORY[0x1E0DE4FB8] + 16;
    if (v112 < 0)
      operator delete(v111);
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    MEMORY[0x1CAA32F18](&v113);
    return 1;
  }
  LODWORD(v10) = 0;
  v93 = 0;
  v94 = 0;
  v95 = 0;
  if (a2)
    v10 = 0xAAAAAAAAAAAAAAABLL * ((a2[5] - a2[4]) >> 4);
  v108 = (char *)&v109 + 8;
  *(_QWORD *)&v109 = 0x400000000;
  sub_1C63E9C5C(&v93, v10);
  sub_1C63E9CF0((uint64_t)&v108, v10);
  v11 = 0;
  v85 = 0;
  while (1)
  {
    v12 = *(_QWORD *)(a1 + 136);
    *(_OWORD *)__n = 0u;
    memset(v89, 0, 26);
    if (**(_DWORD **)(a1 + 48) == 2)
    {
      sub_1C610C428((uint64_t)&__p, a1, 1);
      v13 = __p;
      if (v107 >= 0x41 && __src)
        MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
      if (v13 == 27)
      {
        if ((*(unsigned int (**)(uint64_t, size_t *))(*(_QWORD *)a1 + 192))(a1, __n))
        {
          v43 = "invalid argument identifier for formal argument";
          goto LABEL_115;
        }
        if (**(_DWORD **)(a1 + 48) != 27)
        {
          *(_QWORD *)&__p = "expected '=' after formal parameter identifier";
          LOWORD(v107) = 259;
          v83 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
          llvm::MCAsmParser::Error(a1, *(_QWORD *)(v83 + 96), (uint64_t)&__p, 0, 0);
          v45 = 1;
          goto LABEL_75;
        }
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
        v85 = 1;
      }
    }
    v14 = __n[1];
    if ((v85 & 1) != 0 && !__n[1])
    {
      v43 = "cannot mix positional and keyword arguments";
LABEL_115:
      *(_QWORD *)&__p = v43;
      LOWORD(v107) = 259;
      v45 = llvm::MCAsmParser::Error(a1, v12, (uint64_t)&__p, 0, 0);
      goto LABEL_75;
    }
    LODWORD(v15) = v11;
    if (__n[1])
    {
      if (!(_DWORD)v10)
      {
        v16 = (const void *)__n[0];
LABEL_74:
        v100 = 1283;
        v97[0] = "parameter named '";
        v98 = v16;
        v99 = v14;
        v101[0] = v97;
        v102 = "' does not exist for macro '";
        v103 = 770;
        v47 = *a2;
        v46 = a2[1];
        v114[0] = v101;
        v115 = v47;
        v116 = v46;
        v117 = 1282;
        *(_QWORD *)&__p = v114;
        v105 = "'";
        LOWORD(v107) = 770;
        v45 = llvm::MCAsmParser::Error(a1, v12, (uint64_t)&__p, 0, 0);
        goto LABEL_75;
      }
      v15 = 0;
      v16 = (const void *)__n[0];
      v17 = (_QWORD *)(a2[4] + 8);
      while (*v17 != v14 || memcmp((const void *)*(v17 - 1), v16, v14))
      {
        ++v15;
        v17 += 6;
        if (v10 == v15)
          goto LABEL_74;
      }
    }
    v18 = 0;
    if (a2 && v15 < v10)
      v18 = (uint64_t *)(a2[4] + 48 * v15);
    v19 = *(_QWORD *)(a1 + 136);
    v96 = 0;
    if (**(_DWORD **)(a1 + 48) == 36)
    {
      v114[0] = 0;
      v101[0] = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)a1 + 184))(a1, v18);
      if (((*(uint64_t (**)(uint64_t, _QWORD *, uint64_t *))(*(_QWORD *)a1 + 232))(a1, v114, &v96) & 1) != 0)
        goto LABEL_69;
      v20 = v114[0];
      v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
      (*(void (**)(uint64_t))(*(_QWORD *)v21 + 72))(v21);
      llvm::MCExpr::evaluateAsAbsolute(v20, v101);
      if ((v22 & 1) == 0)
      {
        *(_QWORD *)&__p = "expected absolute expression";
        LOWORD(v107) = 259;
        v80 = llvm::MCAsmParser::Error(a1, v19, (uint64_t)&__p, 0, 0);
LABEL_113:
        v45 = v80;
        goto LABEL_75;
      }
      LODWORD(__p) = 4;
      *((_QWORD *)&__p + 1) = v19;
      v105 = (const char *)(v96 - v19);
      v107 = 64;
      __src = (void *)v101[0];
      v23 = *((_QWORD *)&v89[0] + 1);
      if (*((_QWORD *)&v89[0] + 1) >= *(_QWORD *)&v89[1])
      {
        v26 = sub_1C60E87E0((char **)v89, (uint64_t)&__p);
      }
      else
      {
        v24 = __p;
        *(_QWORD *)(*((_QWORD *)&v89[0] + 1) + 16) = v105;
        *(_OWORD *)v23 = v24;
        v25 = v107;
        *(_DWORD *)(v23 + 32) = v107;
        if (v25 > 0x40)
        {
          v27 = (void *)operator new[]();
          *(_QWORD *)(v23 + 24) = v27;
          memcpy(v27, __src, (((unint64_t)*(unsigned int *)(v23 + 32) + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          *(_QWORD *)(v23 + 24) = __src;
        }
        v26 = (char *)(v23 + 40);
      }
      *((_QWORD *)&v89[0] + 1) = v26;
      if (v107 >= 0x41 && __src)
        MEMORY[0x1CAA32F9C](__src, 0x1000C8000313F17);
    }
    else if (sub_1C610F540(a1, v18, (uint64_t)v89, a4))
    {
      if (!a2)
      {
        v45 = 1;
        goto LABEL_75;
      }
      v117 = 1283;
      v81 = *a2;
      v82 = a2[1];
      v114[0] = " in '";
      v115 = v81;
      v116 = v82;
      *(_QWORD *)&__p = v114;
      v105 = "' macro";
      LOWORD(v107) = 770;
      v80 = llvm::MCAsmParser::addErrorSuffix((llvm::MCAsmParser *)a1, (const llvm::Twine *)&__p);
      goto LABEL_113;
    }
    if (*(_QWORD *)&v89[0] != *((_QWORD *)&v89[0] + 1))
    {
      v28 = v93;
      if (0xAAAAAAAAAAAAAAABLL * ((v94 - v93) >> 3) <= v15)
      {
        sub_1C63E9C5C(&v93, (v15 + 1));
        v28 = v93;
      }
      v29 = (_OWORD *)(v28 + 24 * v15);
      if (v29 != v89)
        sub_1C60E898C((uint64_t)v29, *(uint64_t *)&v89[0], *((uint64_t *)&v89[0] + 1), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((_QWORD *)&v89[0] + 1) - *(_QWORD *)&v89[0]) >> 3));
      if (v109 <= v15)
        sub_1C63E9CF0((uint64_t)&v108, (v15 + 1));
      *((_QWORD *)v108 + v15) = *(_QWORD *)(a1 + 136);
    }
    v30 = **(_DWORD **)(a1 + 48);
    if (v30 == a4)
      break;
    if (v30 == 25)
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
    *(_QWORD *)&__p = v89;
    sub_1C5934A7C((void ***)&__p);
    if ((int)v10 - 1 < ++v11)
    {
      __n[0] = (size_t)"too many positional arguments";
      LOWORD(v89[1]) = 259;
      v44 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
      llvm::MCAsmParser::Error(a1, *(_QWORD *)(v44 + 96), (uint64_t)__n, 0, 0);
      v45 = 1;
      goto LABEL_76;
    }
  }
  if (!(_DWORD)v10)
  {
LABEL_69:
    v45 = 0;
    goto LABEL_75;
  }
  v31 = 0;
  v32 = 0;
  v33 = 0;
  v45 = 0;
  do
  {
    if (*(_QWORD *)(v93 + v32) == *(_QWORD *)(v93 + v32 + 8))
    {
      v34 = a2[4];
      if (*(_BYTE *)(v34 + v33 + 40))
      {
        v39 = *(_QWORD *)((char *)v108 + v31);
        if (!v39)
          v39 = *(_QWORD *)(a1 + 136);
        v40 = (const void **)(v34 + v33);
        v100 = 1283;
        v97[0] = "missing value for required parameter '";
        v98 = *v40;
        v99 = (size_t)v40[1];
        v101[0] = v97;
        v102 = "' in macro '";
        v103 = 770;
        v42 = *a2;
        v41 = a2[1];
        v114[0] = v101;
        v115 = v42;
        v116 = v41;
        v117 = 1282;
        *(_QWORD *)&__p = v114;
        v105 = "'";
        LOWORD(v107) = 770;
        llvm::MCAsmParser::Error(a1, v39, (uint64_t)&__p, 0, 0);
        v34 = a2[4];
        v45 = 1;
      }
      v35 = v34 + v33;
      v36 = *(_QWORD *)(v35 + 16);
      v37 = *(_QWORD *)(v35 + 24);
      v38 = v35 + 16;
      if (v36 != v37 && v38 != v93 + v32)
        sub_1C60E898C(v93 + v32, v36, v37, 0xCCCCCCCCCCCCCCCDLL * ((v37 - v36) >> 3));
    }
    v33 += 48;
    v32 += 24;
    v31 += 8;
  }
  while (48 * v10 != v33);
LABEL_75:
  *(_QWORD *)&__p = v89;
  sub_1C5934A7C((void ***)&__p);
LABEL_76:
  if (v108 != (char *)&v109 + 8)
    free(v108);
  if ((v45 & 1) != 0)
  {
    v8 = 1;
  }
  else
  {
    v108 = v110;
    v109 = xmmword_1C64638F0;
    v48 = (unsigned __int8 *)a2[2];
    v49 = a2[3];
    LODWORD(__n[1]) = 0;
    v90 = 0;
    __n[0] = (size_t)&off_1E81A7280;
    v92 = &v108;
    v91 = 0;
    memset(v89, 0, 25);
    v50 = a2[4];
    v51 = 0xAAAAAAAAAAAAAAABLL * ((a2[5] - v50) >> 4);
    v52 = v93;
    v53 = 0xAAAAAAAAAAAAAAABLL * ((v94 - v93) >> 3);
    v54 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
    v8 = sub_1C610D108(a1, (llvm::raw_ostream *)__n, v48, v49, v50, v51, v52, v53, a2 + 7, *(_QWORD *)(*(_QWORD *)(v54 + 8) + 8));
    if ((v8 & 1) == 0)
    {
      v56 = *(_DWORD **)&v89[1];
      if (*((_QWORD *)&v89[0] + 1) - *(_QWORD *)&v89[1] > 4uLL)
      {
        *(_BYTE *)(*(_QWORD *)&v89[1] + 4) = 10;
        *v56 = 1835298405;
        *(_QWORD *)&v89[1] += 5;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)__n, "endm\n", 5uLL);
      }
      v57 = *v92;
      v58 = (size_t)v92[1];
      *(_QWORD *)&__p = "<instantiation>";
      LOWORD(v107) = 259;
      sub_1C5E1F4D0(v57, v58, (uint64_t)&__p, (uint64_t)v114);
      if ((v115 & 1) != 0)
        v59 = 0;
      else
        v59 = v114[0];
      v60 = operator new();
      *(_QWORD *)v60 = a3;
      *(_DWORD *)(v60 + 8) = *(_DWORD *)(a1 + 272);
      v61 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
      v62 = (uint64_t)(*(_QWORD *)(a1 + 424) - *(_QWORD *)(a1 + 416)) >> 3;
      *(_QWORD *)(v60 + 16) = *(_QWORD *)(*(_QWORD *)(v61 + 8) + 8);
      *(_QWORD *)(v60 + 24) = v62;
      v63 = *(uint64_t **)(a1 + 688);
      v64 = *(_QWORD *)(a1 + 696);
      if ((unint64_t)v63 >= v64)
      {
        v66 = *(_QWORD **)(a1 + 680);
        v67 = v63 - v66;
        v68 = v67 + 1;
        if ((unint64_t)(v67 + 1) >> 61)
          abort();
        v69 = v64 - (_QWORD)v66;
        if (v69 >> 2 > v68)
          v68 = v69 >> 2;
        if ((unint64_t)v69 >= 0x7FFFFFFFFFFFFFF8)
          v70 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v70 = v68;
        if (v70)
        {
          if (v70 >> 61)
            sub_1C4764EE4();
          v71 = (char *)operator new(8 * v70);
        }
        else
        {
          v71 = 0;
        }
        v72 = (uint64_t *)&v71[8 * v67];
        *v72 = v60;
        v65 = v72 + 1;
        if (v63 != v66)
        {
          do
          {
            v73 = *--v63;
            *--v72 = v73;
          }
          while (v63 != v66);
          v63 = *(uint64_t **)(a1 + 680);
        }
        *(_QWORD *)(a1 + 680) = v72;
        *(_QWORD *)(a1 + 688) = v65;
        *(_QWORD *)(a1 + 696) = &v71[8 * v70];
        if (v63)
          operator delete(v63);
      }
      else
      {
        *v63 = v60;
        v65 = v63 + 1;
      }
      *(_QWORD *)(a1 + 688) = v65;
      ++*(_DWORD *)(a1 + 752);
      v74 = *(_QWORD *)(a1 + 240);
      v87 = v59;
      v75 = sub_1C6175188(v74, &v87, 0);
      *(_DWORD *)(a1 + 272) = v75;
      v76 = v87;
      v87 = 0;
      if (v76)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v76 + 8))(v76);
        v75 = *(_DWORD *)(a1 + 272);
      }
      v77 = *(_QWORD *)(**(_QWORD **)(a1 + 240) + 24 * (v75 - 1));
      v78 = *(_QWORD *)(v77 + 8);
      v79 = *(_QWORD *)(v77 + 16) - v78;
      *(_QWORD *)(a1 + 192) = v78;
      *(_QWORD *)(a1 + 200) = v79;
      *(_QWORD *)(a1 + 184) = v78;
      *(_QWORD *)(a1 + 136) = 0;
      *(_BYTE *)(a1 + 211) = 1;
      sub_1C630145C((_DWORD *)(a1 + 336), 1);
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
    }
    __n[0] = (size_t)off_1E81A6E70;
    if (v91 == 1 && *(_QWORD *)&v89[0])
      MEMORY[0x1CAA32F9C](*(_QWORD *)&v89[0], 0x1000C8077774924);
    if (v108 != v110)
      free(v108);
  }
  v108 = &v93;
  sub_1C60E8D20((void ***)&v108);
  return v8;
}

uint64_t sub_1C610AC98(llvm::MCAsmParser *a1)
{
  int v2;
  const char *v3;
  uint64_t v4;
  uint64_t v6;
  unsigned int *v7;
  unsigned int *v8;
  void ***v9;
  unsigned int v10;
  unsigned int v11;
  int *v12;
  int *v13;
  uint64_t ***v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  int ***v18;
  char *v19;
  uint64_t v20;
  void ***v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  char *v26;
  uint64_t v27;
  uint64_t **v28;
  uint64_t v29;
  void ***v30;
  uint64_t v31;
  uint64_t **v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t **v37;
  void ***v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  char *v42;
  void ***v43;
  char *v44;
  uint64_t v45;
  char *v46;
  void ***v47;
  BOOL v48;
  uint64_t v49;
  void ***v50;
  uint64_t **v51;
  void ***v52;
  unint64_t v53;
  int *v54;
  uint64_t v55;
  int *v56;
  int *v57;
  uint64_t *i;
  uint64_t *v60;
  uint64_t v61;
  size_t v62;
  uint64_t v63;
  BOOL v64;
  int v65;
  unsigned int v67;
  unsigned int v68;
  unint64_t v69;
  _DWORD *v70;
  _DWORD *j;
  unsigned int v72;
  unsigned int v73;
  char *v74;
  void ***v75;
  void *v76;
  void ***v77;
  uint64_t **v78;
  uint64_t v79;
  int ***v80;
  char *v81;
  __int128 v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  void *__p;
  char *v87;
  uint64_t *v88;
  int v89;

  v2 = *((_DWORD *)a1 + 128);
  if (v2 == 1)
  {
    v3 = "missing name in top-level ENDS directive";
    goto LABEL_5;
  }
  if (!v2)
  {
    v3 = "ENDS directive without matching STRUC/STRUCT/UNION";
LABEL_5:
    *(_QWORD *)&v82 = v3;
    LOWORD(v85) = 259;
    v4 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1);
    llvm::MCAsmParser::Error((uint64_t)a1, *(_QWORD *)(v4 + 96), (uint64_t)&v82, 0, 0);
    return 1;
  }
  *(_QWORD *)&v82 = "unexpected token";
  LOWORD(v85) = 259;
  if (llvm::MCAsmParser::parseEOL(a1, (const llvm::Twine *)&v82))
  {
    *(_QWORD *)&v82 = " in nested ENDS directive";
    LOWORD(v85) = 259;
    return llvm::MCAsmParser::addErrorSuffix(a1, (const llvm::Twine *)&v82);
  }
  sub_1C610FC98((uint64_t)&v82, (uint64_t)a1 + 504);
  v85 = (v85 + (unint64_t)v83 - 1) / v83 * v83;
  v6 = *((_QWORD *)a1 + 63) + 96 * *((unsigned int *)a1 + 128);
  if (!*((_QWORD *)&v82 + 1))
  {
    v15 = *(_QWORD *)(v6 - 56);
    v16 = *(_QWORD *)(v6 - 48);
    v17 = (uint64_t)(v16 - v15) / 144;
    v18 = (int ***)__p;
    v19 = v87;
    if (v87 - (_BYTE *)__p >= 1)
    {
      v20 = (v87 - (_BYTE *)__p) / 144;
      v21 = (void ***)(v15 + 144 * v17);
      v22 = *(_QWORD *)(v6 - 40);
      if ((uint64_t)(0x8E38E38E38E38E39 * ((uint64_t)(v22 - v16) >> 4)) >= v20)
      {
        v27 = 0x8E38E38E38E38E39 * ((uint64_t)(v16 - (_QWORD)v21) >> 4);
        if (v27 >= v20)
        {
          v32 = (uint64_t **)((char *)__p + 144 * v20);
          v30 = *(void ****)(v6 - 48);
          v27 = (v87 - (_BYTE *)__p) / 144;
        }
        else
        {
          v28 = (uint64_t **)((char *)__p + 16 * ((uint64_t)(v16 - (_QWORD)v21) >> 4));
          v78 = v28;
          if (v28 == (uint64_t **)v87)
          {
            v30 = *(void ****)(v6 - 48);
          }
          else
          {
            v29 = v16 + 16;
            v30 = *(void ****)(v6 - 48);
            do
            {
              *(_OWORD *)(v29 - 16) = *(_OWORD *)v28;
              v31 = sub_1C61104FC(v29, v28 + 2);
              v28 += 18;
              v30 += 18;
              v29 = v31 + 144;
            }
            while (v28 != (uint64_t **)v19);
          }
          *(_QWORD *)(v6 - 48) = v30;
          v32 = v78;
        }
        v48 = v27 < 1;
        v17 = (uint64_t)(v16 - v15) / 144;
        if (!v48)
        {
          v80 = (int ***)v32;
          v49 = 9 * v20;
          v50 = &v21[18 * v20];
          v51 = (uint64_t **)&v30[-2 * v49];
          v52 = v30;
          if ((unint64_t)v51 < v16)
          {
            v52 = v30;
            do
            {
              *(_OWORD *)v52 = *(_OWORD *)v51;
              sub_1C61104FC((uint64_t)(v52 + 2), v51 + 2);
              v51 += 18;
              v52 += 18;
            }
            while ((unint64_t)v51 < v16);
          }
          *(_QWORD *)(v6 - 48) = v52;
          if (v30 != v50)
          {
            v53 = 0x8E38E38E38E38E39 * (((char *)v30 - (char *)v50) >> 4);
            v54 = (int *)(v30 - 18);
            v55 = 18 * v53;
            do
            {
              *(_OWORD *)v54 = *(_OWORD *)&v21[v55 - 18];
              sub_1C61109F8(v54 + 4, (int ***)&v21[v55 - 16]);
              v54 -= 36;
              v55 -= 18;
            }
            while (v55 * 8);
          }
          v17 = (uint64_t)(v16 - v15) / 144;
          if (v18 != v80)
          {
            v56 = (int *)(v15 + 144 * ((uint64_t)(v16 - v15) / 144) + 16);
            do
            {
              *((_OWORD *)v56 - 1) = *(_OWORD *)v18;
              v57 = sub_1C61109F8(v56, v18 + 2);
              v18 += 18;
              v56 = v57 + 36;
            }
            while (v18 != v80);
          }
        }
      }
      else
      {
        v23 = v20 + v17;
        if ((unint64_t)(v20 + v17) > 0x1C71C71C71C71C7)
          abort();
        v24 = 0x8E38E38E38E38E39 * ((v22 - v15) >> 4);
        if (2 * v24 > v23)
          v23 = 2 * v24;
        if (v24 >= 0xE38E38E38E38E3)
          v25 = 0x1C71C71C71C71C7;
        else
          v25 = v23;
        if (v25)
        {
          if (v25 > 0x1C71C71C71C71C7)
            sub_1C4764EE4();
          v26 = (char *)operator new(144 * v25);
        }
        else
        {
          v26 = 0;
        }
        v33 = v17;
        v34 = &v26[144 * v17];
        v81 = &v34[144 * v20];
        v35 = 144 * v20;
        v36 = (uint64_t)(v34 + 16);
        v37 = (uint64_t **)(v18 + 2);
        do
        {
          *(_OWORD *)(v36 - 16) = *((_OWORD *)v37 - 1);
          v36 = sub_1C61104FC(v36, v37) + 144;
          v37 += 18;
          v35 -= 144;
        }
        while (v35);
        v38 = *(void ****)(v6 - 56);
        if (v21 != v38)
        {
          v79 = v6;
          v39 = 144 * v33;
          v40 = v26;
          v41 = v15;
          do
          {
            *(_OWORD *)&v40[v39 - 144] = *(_OWORD *)(v41 + v39 - 144);
            sub_1C61104FC((uint64_t)&v40[v39 - 128], (uint64_t **)(v41 + v39 - 128));
            v41 -= 144;
            v40 -= 144;
          }
          while ((void ***)(v41 + v39) != v38);
          v34 = &v40[144 * v33];
          v6 = v79;
        }
        v42 = &v26[144 * v25];
        v43 = *(void ****)(v6 - 48);
        v44 = v81;
        if (v21 != v43)
        {
          v45 = 144 * v33;
          v46 = &v26[144 * v20];
          do
          {
            *(_OWORD *)&v46[144 * v33] = *(_OWORD *)(v15 + 144 * v33);
            sub_1C61104FC((uint64_t)&v46[v45 + 16], (uint64_t **)(v15 + v45 + 16));
            v15 += 144;
            v46 += 144;
          }
          while ((void ***)(v15 + v45) != v43);
          v21 = *(void ****)(v6 - 48);
          v44 = &v46[144 * v33];
        }
        v47 = *(void ****)(v6 - 56);
        *(_QWORD *)(v6 - 56) = v34;
        *(_QWORD *)(v6 - 48) = v44;
        for (*(_QWORD *)(v6 - 40) = v42; v21 != v47; v21 -= 18)
          sub_1C60FEA30(v21 - 16);
        v17 = v33;
        if (v47)
          operator delete(v47);
      }
    }
    if (v89)
    {
      for (i = v88; !*i || *i == -8; ++i)
        ;
    }
    else
    {
      i = v88;
    }
    v60 = &v88[v89];
    if (i != v60)
    {
      v61 = *i;
      do
      {
        v62 = *(_QWORD *)(v61 + 8) + v17;
        (*sub_1C6241FF4(v6 - 32, (unsigned __int8 *)(v61 + 16), *(_QWORD *)v61))[1] = v62;
        do
        {
          v63 = i[1];
          ++i;
          v61 = v63;
          if (v63)
            v64 = v61 == -8;
          else
            v64 = 1;
        }
        while (v64);
      }
      while (i != v60);
    }
    v65 = *(unsigned __int8 *)(v6 - 80);
    if (__p != v87 && v65 == 0)
    {
      v68 = *(_DWORD *)(v6 - 76);
      if (v84 >= v68)
        v69 = v68;
      else
        v69 = v84;
      v65 = (*(unsigned int *)(v6 - 68) + v69 - 1) / v69 * v69;
    }
    else if (*(_BYTE *)(v6 - 80))
    {
      v67 = *(_DWORD *)(v6 - 64);
      if (v67 <= v85)
        v67 = v85;
      *(_DWORD *)(v6 - 64) = v67;
      goto LABEL_96;
    }
    v70 = *(_DWORD **)(v6 - 48);
    for (j = (_DWORD *)(*(_QWORD *)(v6 - 56) + 144 * v17); j != v70; j += 36)
      *j += v65;
    v72 = v85 + v65;
    v73 = *(_DWORD *)(v6 - 64);
    if (v73 <= v72)
      v73 = v72;
    *(_DWORD *)(v6 - 68) = v72;
    *(_DWORD *)(v6 - 64) = v73;
    goto LABEL_96;
  }
  v7 = sub_1C610FD14(v6 - 96, (char *)v82, *((unint64_t *)&v82 + 1), 2, v84);
  v8 = v7;
  v9 = (void ***)(v7 + 6);
  v10 = v85;
  v7[2] = 1;
  v7[3] = v10;
  v7[1] = v10;
  v11 = *v7 + v10;
  if (!*(_BYTE *)(v6 - 80))
    *(_DWORD *)(v6 - 68) = v11;
  if (*(_DWORD *)(v6 - 64) > v11)
    v11 = *(_DWORD *)(v6 - 64);
  *(_DWORD *)(v6 - 64) = v11;
  sub_1C610FF8C((uint64_t)(v7 + 12), &v82);
  sub_1C6110250(v9);
  v12 = (int *)__p;
  v13 = (int *)v87;
  if (__p != v87)
  {
    v14 = (uint64_t ***)(*((_QWORD *)v8 + 4) - 24);
    do
    {
      sub_1C61103D8(v14, v12 + 4);
      v12 += 36;
    }
    while (v12 != v13);
  }
LABEL_96:
  sub_1C61DF2A0((uint64_t)&v88);
  v74 = (char *)__p;
  if (__p)
  {
    v75 = (void ***)v87;
    v76 = __p;
    if (v87 != __p)
    {
      do
      {
        v77 = v75 - 18;
        sub_1C60FEA30(v75 - 16);
        v75 = v77;
      }
      while (v77 != (void ***)v74);
      v76 = __p;
    }
    v87 = v74;
    operator delete(v76);
  }
  return 0;
}

uint64_t sub_1C610B33C(llvm::MCAsmParser *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t result;
  _QWORD v8[4];
  __int16 v9;
  _QWORD v10[4];
  __int16 v11;
  _QWORD v12[2];
  char v13;

  v13 = a4;
  v12[0] = a1;
  v12[1] = &v13;
  result = llvm::MCAsmParser::parseMany(a1, (unsigned int (*)(uint64_t))sub_1C61110AC, (uint64_t)v12, 1);
  if ((_DWORD)result)
  {
    v8[0] = " in '";
    v8[2] = a2;
    v8[3] = a3;
    v9 = 1283;
    v10[0] = v8;
    v10[2] = "' directive";
    v11 = 770;
    return llvm::MCAsmParser::addErrorSuffix(a1, (const llvm::Twine *)v10);
  }
  return result;
}

uint64_t sub_1C610B3D8(llvm::MCAsmParser *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t result;
  _QWORD v8[4];
  __int16 v9;
  _QWORD v10[4];
  __int16 v11;

  if (*((_DWORD *)a1 + 128))
  {
    sub_1C6111298((uint64_t)a1, "", 0, a4);
    return 0;
  }
  else
  {
    result = sub_1C61111A0(a1, a4, 0);
    if ((_DWORD)result)
    {
      v8[0] = " in '";
      v8[2] = a2;
      v8[3] = a3;
      v9 = 1283;
      v10[0] = v8;
      v10[2] = "' directive";
      v11 = 770;
      return llvm::MCAsmParser::addErrorSuffix(a1, (const llvm::Twine *)v10);
    }
  }
  return result;
}

uint64_t sub_1C610B488(llvm::MCAsmParser *a1, uint64_t a2, uint64_t a3, unsigned int *a4, unsigned int a5)
{
  uint64_t result;
  _QWORD v9[4];
  __int16 v10;
  _QWORD v11[4];
  __int16 v12;

  if (*((_DWORD *)a1 + 128))
  {
    result = sub_1C6111B38((uint64_t)a1, "", 0, a4, a5);
    if (!(_DWORD)result)
      return result;
LABEL_5:
    v9[0] = " in '";
    v9[2] = a2;
    v9[3] = a3;
    v10 = 1283;
    v11[0] = v9;
    v11[2] = "' directive";
    v12 = 770;
    return llvm::MCAsmParser::addErrorSuffix(a1, (const llvm::Twine *)v11);
  }
  result = sub_1C61119A8(a1, a4, 0);
  if ((_DWORD)result)
    goto LABEL_5;
  return result;
}

uint64_t sub_1C610B534(llvm::MCAsmParser *a1, int a2)
{
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void (*v12)(void);
  uint64_t v13;
  const char **v14;
  const char *v15;
  __int16 v16;
  const char *v17;
  __int16 v18;
  _QWORD v19[4];
  __int16 v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;

  v23 = 0;
  if (((*(uint64_t (**)(llvm::MCAsmParser *, unint64_t *))(*(_QWORD *)a1 + 256))(a1, &v23) & 1) != 0)
    return 1;
  if (v23 != 255)
  {
    v21 = 0;
    v22 = 0;
    if (v23 > 0xFF
      || (v23 & 0xD) != 0 && ((v23 & 0xF) <= 0xC ? (v5 = ((1 << (v23 & 0xF)) & 0x1D18) == 0) : (v5 = 1), v5))
    {
      v19[0] = "unsupported encoding.";
      v20 = 259;
      v7 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1);
    }
    else
    {
      v6 = v23 & 0x60;
      v19[0] = "unsupported encoding.";
      v20 = 259;
      v7 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1);
      if (!v6)
      {
        v17 = "unexpected token in directive";
        v18 = 259;
        if (llvm::MCAsmParser::parseToken(a1, 25, (llvm::Twine *)&v17))
          return 1;
        v8 = (*(uint64_t (**)(llvm::MCAsmParser *, uint64_t *))(*(_QWORD *)a1 + 192))(a1, &v21);
        v15 = "expected identifier in directive";
        v16 = 259;
        v9 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1);
        if (!v8)
        {
          v10 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 48))(a1);
          v20 = 261;
          v19[0] = v21;
          v19[1] = v22;
          llvm::MCContext::getOrCreateSymbol(v10, (uint64_t)v19);
          v11 = *(_QWORD *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 56))(a1);
          if (a2)
            v12 = *(void (**)(void))(v11 + 904);
          else
            v12 = *(void (**)(void))(v11 + 912);
          v12();
          return 0;
        }
        v13 = *(_QWORD *)(*(_QWORD *)(v9 + 8) + 8);
        v14 = &v15;
LABEL_18:
        llvm::MCAsmParser::Error((uint64_t)a1, v13, (uint64_t)v14, 0, 0);
        return 1;
      }
    }
    v13 = *(_QWORD *)(*(_QWORD *)(v7 + 8) + 8);
    v14 = (const char **)v19;
    goto LABEL_18;
  }
  return 0;
}

uint64_t sub_1C610B710(llvm::MCAsmParser *a1, uint64_t a2, int a3)
{
  _DWORD *v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  std::string __p;
  std::string v15;
  __int16 v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;

  v6 = (_DWORD *)*((_QWORD *)a1 + 53);
  if (*((_DWORD **)a1 + 52) != v6 && *((_BYTE *)v6 - 3))
  {
    (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 224))(a1);
    return 0;
  }
  v17 = 0;
  v18 = 0;
  v19 = 0;
  if (!sub_1C610ED00(a1, (uint64_t)&v17))
  {
    v8 = (char *)operator new(0x28uLL);
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_1C86784C0;
    strcpy(v8, ".errb directive invoked in source file");
    if (**((_DWORD **)a1 + 6) != 9)
    {
      v12 = v8;
      v15.__r_.__value_.__r.__words[0] = (std::string::size_type)"unexpected token";
      v16 = 259;
      if (llvm::MCAsmParser::parseToken(a1, 25, (llvm::Twine *)&v15))
      {
        v15.__r_.__value_.__r.__words[0] = (std::string::size_type)" in '.errb' directive";
        v16 = 259;
        v13 = llvm::MCAsmParser::addErrorSuffix(a1, (const llvm::Twine *)&v15);
        goto LABEL_19;
      }
      sub_1C6109CB4(&v15, (uint64_t)a1);
      operator delete(v12);
      __p = v15;
    }
    (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 184))(a1);
    v9 = HIBYTE(v19) & 0x7F;
    if (v19 < 0)
      v9 = v18;
    if ((((v9 == 0) ^ a3) & 1) != 0)
    {
      v7 = 0;
      goto LABEL_10;
    }
    v16 = 260;
    v15.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
    v13 = llvm::MCAsmParser::Error((uint64_t)a1, a2, (uint64_t)&v15, 0, 0);
LABEL_19:
    v7 = v13;
LABEL_10:
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    goto LABEL_12;
  }
  v11 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1) + 8) + 8);
  v15.__r_.__value_.__r.__words[0] = (std::string::size_type)"missing text item in '.errb' directive";
  v16 = 259;
  v7 = llvm::MCAsmParser::Error((uint64_t)a1, v11, (uint64_t)&v15, 0, 0);
LABEL_12:
  if (SHIBYTE(v19) < 0)
    operator delete(v17);
  return v7;
}

uint64_t sub_1C610B920(llvm::MCAsmParser *a1, uint64_t a2, int a3)
{
  _DWORD *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  std::string *v9;
  size_t size;
  uint64_t v11;
  int v12;
  size_t v13;
  std::string *v14;
  int v15;
  _DWORD *v16;
  int v17;
  int v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  std::string *v22;
  size_t v23;
  uint64_t v24;
  int v25;
  size_t v26;
  std::string *v27;
  int v28;
  _DWORD *v29;
  int v30;
  int v31;
  uint64_t v32;
  _QWORD *v33;
  int v34;
  uint64_t v35;
  char *v36;
  char *v38;
  uint64_t v39;
  llvm::MCContext *v40;
  unint64_t *v41;
  unint64_t *v42;
  unint64_t v43;
  void *__p;
  void *__pa;
  int v47;
  int v48;
  std::string v49;
  std::string v50;
  __int16 v51;
  uint64_t v52;
  uint64_t v53;
  int v54;

  v5 = (_DWORD *)*((_QWORD *)a1 + 53);
  if (*((_DWORD **)a1 + 52) != v5 && *((_BYTE *)v5 - 3))
  {
    (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 224))(a1);
    return 0;
  }
  v54 = 0;
  v53 = 0;
  v52 = 0;
  if ((*(unsigned int (**)(_DWORD *, int *, uint64_t *, uint64_t *))(**((_QWORD **)a1 + 1) + 40))(*((_DWORD **)a1 + 1), &v54, &v53, &v52))
  {
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = 0uLL;
    v7 = (*(uint64_t (**)(llvm::MCAsmParser *, std::string *))(*(_QWORD *)a1 + 192))(a1, &v49);
    v50.__r_.__value_.__r.__words[0] = (std::string::size_type)"expected identifier after '.errdef'";
    v51 = 259;
    v8 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1);
    if ((v7 & 1) != 0)
    {
      llvm::MCAsmParser::Error((uint64_t)a1, *(_QWORD *)(*(_QWORD *)(v8 + 8) + 8), (uint64_t)&v50, 0, 0);
      return 1;
    }
    sub_1C5E3DEA4(&v50, v49.__r_.__value_.__l.__data_, (uint64_t (*)(_QWORD))sub_1C5E3C6A8, (char *)(v49.__r_.__value_.__r.__words[0] + v49.__r_.__value_.__l.__size_), (uint64_t)sub_1C5E3C6A8, v49.__r_.__value_.__l.__size_);
    __p = (void *)v50.__r_.__value_.__r.__words[0];
    if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v9 = &v50;
    else
      v9 = (std::string *)v50.__r_.__value_.__r.__words[0];
    if ((v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&v50.__r_.__value_.__s + 23) & 0x7F;
    else
      size = v50.__r_.__value_.__l.__size_;
    v11 = *((unsigned int *)a1 + 286);
    v47 = SHIBYTE(v50.__r_.__value_.__r.__words[2]);
    if ((_DWORD)v11)
    {
      v12 = 0;
      if (size)
      {
        v13 = size;
        v14 = v9;
        do
        {
          v15 = v14->__r_.__value_.__s.__data_[0];
          v14 = (std::string *)((char *)v14 + 1);
          v12 = 33 * v12 + v15;
          --v13;
        }
        while (v13);
      }
      v16 = (_DWORD *)*((_QWORD *)a1 + 142);
      v17 = 1;
      v18 = v12;
      while (1)
      {
        v19 = v18 & (v11 - 1);
        v20 = *(_QWORD **)&v16[2 * v19];
        if (v20 != (_QWORD *)-8)
        {
          if (!v20)
          {
            v21 = v11;
            goto LABEL_25;
          }
          if (v16[2 * v11 + 2 + v19] == v12
            && size == *v20
            && (!size || !memcmp(v9, (char *)v20 + *((unsigned int *)a1 + 289), size)))
          {
            break;
          }
        }
        v18 = v17 + v19;
        ++v17;
      }
      if ((_DWORD)v19 == -1)
        v21 = v11;
      else
        v21 = (int)v19;
    }
    else
    {
      v11 = 0;
      v21 = 0;
    }
LABEL_25:
    if (v47 < 0)
      operator delete(__p);
    if (v21 != v11)
      goto LABEL_51;
    sub_1C5E3DEA4(&v50, v49.__r_.__value_.__l.__data_, (uint64_t (*)(_QWORD))sub_1C5E3C6A8, (char *)(v49.__r_.__value_.__r.__words[0] + v49.__r_.__value_.__l.__size_), (uint64_t)sub_1C5E3C6A8, v49.__r_.__value_.__l.__size_);
    __pa = (void *)v50.__r_.__value_.__r.__words[0];
    v22 = (v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v50
        : (std::string *)v50.__r_.__value_.__r.__words[0];
    v23 = (v50.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? *((_BYTE *)&v50.__r_.__value_.__s + 23) & 0x7F
        : v50.__r_.__value_.__l.__size_;
    v24 = *((unsigned int *)a1 + 120);
    v48 = SHIBYTE(v50.__r_.__value_.__r.__words[2]);
    if ((_DWORD)v24)
    {
      v25 = 0;
      if (v23)
      {
        v26 = v23;
        v27 = v22;
        do
        {
          v28 = v27->__r_.__value_.__s.__data_[0];
          v27 = (std::string *)((char *)v27 + 1);
          v25 = 33 * v25 + v28;
          --v26;
        }
        while (v26);
      }
      v29 = (_DWORD *)*((_QWORD *)a1 + 59);
      v30 = 1;
      v31 = v25;
      while (1)
      {
        v32 = v31 & (v24 - 1);
        v33 = *(_QWORD **)&v29[2 * v32];
        if (v33 != (_QWORD *)-8)
        {
          if (!v33)
          {
            v35 = v24;
            goto LABEL_48;
          }
          if (v29[2 * v24 + 2 + v32] == v25
            && v23 == *v33
            && (!v23 || !memcmp(v22, (char *)v33 + *((unsigned int *)a1 + 123), v23)))
          {
            break;
          }
        }
        v31 = v30 + v32;
        ++v30;
      }
      v35 = (_DWORD)v32 == -1 ? v24 : (int)v32;
    }
    else
    {
      v24 = 0;
      v35 = 0;
    }
LABEL_48:
    if (v48 < 0)
      operator delete(__pa);
    if (v35 == v24)
    {
      v40 = (llvm::MCContext *)(*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 48))(a1);
      v51 = 261;
      *(_OWORD *)&v50.__r_.__value_.__l.__data_ = *(_OWORD *)&v49.__r_.__value_.__l.__data_;
      v41 = (unint64_t *)llvm::MCContext::lookupSymbol(v40, (const char **)&v50.__r_.__value_.__l.__data_);
      if (v41)
      {
        v42 = v41;
        v43 = *v41 & 0xFFFFFFFFFFFFFFF8;
        if (!v43 && (v42[1] & 0x1C00) == 0x800)
        {
          llvm::MCExpr::findAssociatedFragment((llvm::MCExpr *)v42[3]);
          *v42 = *v42 & 7 | v43;
        }
        v34 = v43 != 0;
      }
      else
      {
        v34 = 0;
      }
    }
    else
    {
LABEL_51:
      v34 = 1;
    }
  }
  else
  {
    v34 = 1;
  }
  v36 = (char *)operator new(0x30uLL);
  v49.__r_.__value_.__r.__words[0] = (std::string::size_type)v36;
  *(_OWORD *)&v49.__r_.__value_.__r.__words[1] = xmmword_1C64632C0;
  strcpy(v36, ".errdef directive invoked in source file");
  if (**((_DWORD **)a1 + 6) != 9)
  {
    v38 = v36;
    v50.__r_.__value_.__r.__words[0] = (std::string::size_type)"unexpected token";
    v51 = 259;
    if (llvm::MCAsmParser::parseToken(a1, 25, (llvm::Twine *)&v50))
    {
      v50.__r_.__value_.__r.__words[0] = (std::string::size_type)" in '.errdef' directive";
      v51 = 259;
      v39 = llvm::MCAsmParser::addErrorSuffix(a1, (const llvm::Twine *)&v50);
      goto LABEL_64;
    }
    sub_1C6109CB4(&v50, (uint64_t)a1);
    operator delete(v38);
    v49 = v50;
  }
  (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 184))(a1);
  if (v34 != a3)
  {
    v6 = 0;
    goto LABEL_55;
  }
  v51 = 260;
  v50.__r_.__value_.__r.__words[0] = (std::string::size_type)&v49;
  v39 = llvm::MCAsmParser::Error((uint64_t)a1, a2, (uint64_t)&v50, 0, 0);
LABEL_64:
  v6 = v39;
LABEL_55:
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v49.__r_.__value_.__l.__data_);
  return v6;
}

uint64_t sub_1C610BE04(uint64_t a1, uint64_t a2, int a3, int a4)
{
  uint64_t v8;
  uint64_t v9;
  const char *v10;
  char v11;
  size_t v12;
  void *p_s1;
  size_t v14;
  std::string::size_type v15;
  int v16;
  uint64_t v17;
  unsigned __int8 *v18;
  BOOL v19;
  size_t v20;
  unsigned __int8 *v21;
  size_t v22;
  void **v23;
  int v24;
  int v25;
  int v26;
  int v27;
  BOOL v29;
  BOOL v30;
  char v31;
  unsigned __int8 *v32;
  const char *v33;
  size_t v34;
  unsigned __int8 *v35;
  void **v36;
  uint64_t v37;
  uint64_t v38;
  std::string __p;
  std::string v41;
  __int16 v42;
  void *v43;
  uint64_t v44;
  uint64_t v45;
  void *__s1;
  size_t __n;
  uint64_t v48;

  v8 = *(_QWORD *)(a1 + 424);
  if (*(_QWORD *)(a1 + 416) != v8 && *(_BYTE *)(v8 - 3))
  {
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 224))(a1);
    return 0;
  }
  __s1 = 0;
  __n = 0;
  v48 = 0;
  v43 = 0;
  v44 = 0;
  v45 = 0;
  if (!sub_1C610ED00((llvm::MCAsmParser *)a1, (uint64_t)&__s1))
  {
    if (**(_DWORD **)(a1 + 48) != 25)
    {
      if (a3)
        v33 = "expected comma after first string for '.erridn' directive";
      else
        v33 = "expected comma after first string for '.errdif' directive";
      goto LABEL_90;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
    if (!sub_1C610ED00((llvm::MCAsmParser *)a1, (uint64_t)&v43))
    {
      memset(&__p, 0, sizeof(__p));
      if (a3)
        v10 = ".erridn directive invoked in source file";
      else
        v10 = ".errdif directive invoked in source file";
      MEMORY[0x1CAA32ABC](&__p, v10);
      if (**(_DWORD **)(a1 + 48) != 9)
      {
        v41.__r_.__value_.__r.__words[0] = (std::string::size_type)"unexpected token";
        v42 = 259;
        if (llvm::MCAsmParser::parseToken((llvm::MCAsmParser *)a1, 25, (llvm::Twine *)&v41))
        {
          v41.__r_.__value_.__r.__words[0] = (std::string::size_type)" in '.erridn' directive";
          v42 = 259;
          v37 = llvm::MCAsmParser::addErrorSuffix((llvm::MCAsmParser *)a1, (const llvm::Twine *)&v41);
          goto LABEL_82;
        }
        sub_1C6109CB4(&v41, a1);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        __p = v41;
      }
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
      if (a4)
      {
        v11 = HIBYTE(v48);
        v12 = __n;
        if (v48 >= 0)
          p_s1 = &__s1;
        else
          p_s1 = __s1;
        v14 = HIBYTE(v48) & 0x7F;
        if (v48 >= 0)
          v15 = HIBYTE(v48) & 0x7F;
        else
          v15 = __n;
        v41.__r_.__value_.__r.__words[0] = (std::string::size_type)p_s1;
        v41.__r_.__value_.__l.__size_ = v15;
        v16 = SHIBYTE(v45);
        if (v45 >= 0)
          v17 = HIBYTE(v45) & 0x7F;
        else
          v17 = v44;
        if (v15 == v17)
        {
          if (v45 >= 0)
            v18 = (unsigned __int8 *)&v43;
          else
            v18 = (unsigned __int8 *)v43;
          v19 = llvm::StringRef::compare_insensitive((unsigned __int8 **)&v41, v18, v15) == 0;
        }
        else
        {
          v19 = 0;
        }
        v31 = v19 ^ a3;
        *(_BYTE *)(a1 + 412) = v31 ^ 1;
        *(_BYTE *)(a1 + 413) = v31;
        v41.__r_.__value_.__r.__words[0] = (std::string::size_type)p_s1;
        v41.__r_.__value_.__l.__size_ = v15;
        if (v15 == v17)
        {
          if (v16 >= 0)
            v32 = (unsigned __int8 *)&v43;
          else
            v32 = (unsigned __int8 *)v43;
          if ((llvm::StringRef::compare_insensitive((unsigned __int8 **)&v41, v32, v15) == 0) == a3)
            goto LABEL_81;
        }
        else if ((a3 & 1) == 0)
        {
          goto LABEL_81;
        }
      }
      else
      {
        v11 = HIBYTE(v48);
        v14 = HIBYTE(v48) & 0x7F;
        v12 = __n;
        if (v48 >= 0)
          v20 = HIBYTE(v48) & 0x7F;
        else
          v20 = __n;
        v16 = SHIBYTE(v45);
        if (v45 >= 0)
          v17 = HIBYTE(v45) & 0x7F;
        else
          v17 = v44;
        if (v20 == v17)
        {
          if (v45 >= 0)
            v21 = (unsigned __int8 *)&v43;
          else
            v21 = (unsigned __int8 *)v43;
          if (v48 < 0)
          {
            v30 = memcmp(__s1, v21, __n) == 0;
          }
          else if ((v48 & 0x7F00000000000000) != 0)
          {
            v22 = v14 - 1;
            v23 = &__s1;
            do
            {
              v25 = *(unsigned __int8 *)v23;
              v23 = (void **)((char *)v23 + 1);
              v24 = v25;
              v27 = *v21++;
              v26 = v27;
              v29 = v22-- != 0;
              v30 = v24 == v26;
            }
            while (v30 && v29);
          }
          else
          {
            v30 = 1;
          }
        }
        else
        {
          v30 = 0;
        }
        *(_BYTE *)(a1 + 412) = v30 ^ a3 ^ 1;
        *(_BYTE *)(a1 + 413) = v30 ^ a3;
      }
      if (v11 >= 0)
        v34 = v14;
      else
        v34 = v12;
      if (v34 == v17)
      {
        if (v16 >= 0)
          v35 = (unsigned __int8 *)&v43;
        else
          v35 = (unsigned __int8 *)v43;
        if (v11 < 0)
        {
          if ((((memcmp(__s1, v35, v12) == 0) ^ a3) & 1) != 0)
            goto LABEL_84;
          goto LABEL_81;
        }
        if (!(_DWORD)v14)
        {
LABEL_80:
          if ((a3 & 1) == 0)
          {
LABEL_84:
            v9 = 0;
LABEL_85:
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__p.__r_.__value_.__l.__data_);
            goto LABEL_91;
          }
LABEL_81:
          v42 = 260;
          v41.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
          v37 = llvm::MCAsmParser::Error(a1, a2, (uint64_t)&v41, 0, 0);
LABEL_82:
          v9 = v37;
          goto LABEL_85;
        }
        v36 = &__s1;
        while (*(unsigned __int8 *)v36 == *v35)
        {
          v36 = (void **)((char *)v36 + 1);
          ++v35;
          if (!--v14)
            goto LABEL_80;
        }
      }
      if ((a3 & 1) != 0)
        goto LABEL_84;
      goto LABEL_81;
    }
  }
  if (a3)
    v33 = "expected string parameter for '.erridn' directive";
  else
    v33 = "expected string parameter for '.errdif' directive";
LABEL_90:
  v41.__r_.__value_.__r.__words[0] = (std::string::size_type)v33;
  v42 = 259;
  v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  llvm::MCAsmParser::Error(a1, *(_QWORD *)(v38 + 96), (uint64_t)&v41, 0, 0);
  v9 = 1;
LABEL_91:
  if (SHIBYTE(v45) < 0)
    operator delete(v43);
  if (SHIBYTE(v48) < 0)
    operator delete(__s1);
  return v9;
}

uint64_t sub_1C610C258(llvm::MCAsmParser *a1, uint64_t a2, int a3)
{
  _DWORD *v6;
  uint64_t v7;
  char *v8;
  char *v10;
  uint64_t v11;
  std::string __p;
  std::string v13;
  __int16 v14;
  uint64_t v15;

  v6 = (_DWORD *)*((_QWORD *)a1 + 53);
  if (*((_DWORD **)a1 + 52) != v6 && *((_BYTE *)v6 - 3))
  {
    (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 224))(a1);
    return 0;
  }
  v15 = 0;
  if ((*(unsigned int (**)(llvm::MCAsmParser *, uint64_t *))(*(_QWORD *)a1 + 256))(a1, &v15))
  {
    v13.__r_.__value_.__r.__words[0] = (std::string::size_type)" in '.erre' directive";
    v14 = 259;
    return llvm::MCAsmParser::addErrorSuffix(a1, (const llvm::Twine *)&v13);
  }
  v8 = (char *)operator new(0x28uLL);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
  *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = xmmword_1C86784C0;
  strcpy(v8, ".erre directive invoked in source file");
  if (**((_DWORD **)a1 + 6) != 9)
  {
    v10 = v8;
    v13.__r_.__value_.__r.__words[0] = (std::string::size_type)"unexpected token";
    v14 = 259;
    if (llvm::MCAsmParser::parseToken(a1, 25, (llvm::Twine *)&v13))
    {
      v13.__r_.__value_.__r.__words[0] = (std::string::size_type)" in '.erre' directive";
      v14 = 259;
      v11 = llvm::MCAsmParser::addErrorSuffix(a1, (const llvm::Twine *)&v13);
      goto LABEL_15;
    }
    sub_1C6109CB4(&v13, (uint64_t)a1);
    operator delete(v10);
    __p = v13;
  }
  (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 184))(a1);
  if ((v15 != 0) == a3)
  {
    v7 = 0;
    goto LABEL_8;
  }
  v14 = 260;
  v13.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
  v11 = llvm::MCAsmParser::Error((uint64_t)a1, a2, (uint64_t)&v13, 0, 0);
LABEL_15:
  v7 = v11;
LABEL_8:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  return v7;
}

void sub_1C610C428(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  _QWORD *v11;
  unsigned int v12;
  unint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t *v21;
  unsigned int v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  int BufferContainingLoc;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;

  *((_QWORD *)&v34 + 1) = 0;
  v35 = 0;
  v37 = 1;
  v36 = 0;
  if (llvm::AsmLexer::peekTokens(a2 + 40, (uint64_t)&v34, 1, a3))
  {
LABEL_14:
    *(_OWORD *)a1 = v34;
    *(_DWORD *)(a1 + 32) = v37;
    v16 = v36;
    *(_QWORD *)(a1 + 16) = v35;
    *(_QWORD *)(a1 + 24) = v16;
    return;
  }
  v6 = *(_QWORD *)(**(_QWORD **)(a2 + 240) + 24 * (*(_DWORD *)(a2 + 272) - 1) + 16);
  if (!v6)
  {
    v7 = *(_DWORD *)(a2 + 400);
    v8 = v7 - 1;
    v9 = *(unsigned int *)(a2 + 344);
    if ((v7 & 0x3F) != 0)
    {
      v32 = *(_QWORD *)(a2 + 336) + 8 * v9;
      *(_QWORD *)(v32 - 8) &= ~(-1 << (v7 & 0x3F));
    }
    v10 = v9;
    v11 = (_QWORD *)(a2 + 336);
    *(_DWORD *)(a2 + 400) = v8;
    v12 = v7 + 62;
    if ((_DWORD)v9 != v12 >> 6)
    {
      v13 = v12 >> 6;
      if (v9 > v13)
      {
        *(_DWORD *)(a2 + 344) = v13;
        v10 = v12 >> 6;
      }
      else
      {
        v14 = v9;
        if (v13 > *(_DWORD *)(a2 + 348))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 336, a2 + 352, v13, 8);
          v14 = *(unsigned int *)(a2 + 344);
          v10 = *(_DWORD *)(a2 + 344);
        }
        if (v13 != v9)
          bzero((void *)(*v11 + 8 * v14), 8 * (v13 - v9));
        v10 += v13 - v9;
        *(_DWORD *)(a2 + 344) = v10;
        v8 = *(_DWORD *)(a2 + 400);
      }
    }
    v15 = v8 & 0x3F;
    if (v15)
      *(_QWORD *)(*v11 + 8 * v10 - 8) &= ~(-1 << v15);
    goto LABEL_14;
  }
  v17 = *(_DWORD *)(a2 + 400);
  v18 = v17 - 1;
  v19 = *(unsigned int *)(a2 + 344);
  if ((v17 & 0x3F) != 0)
  {
    v33 = *(_QWORD *)(a2 + 336) + 8 * v19;
    *(_QWORD *)(v33 - 8) &= ~(-1 << (v17 & 0x3F));
  }
  v20 = v19;
  v21 = (uint64_t *)(a2 + 336);
  *(_DWORD *)(a2 + 400) = v18;
  v22 = v17 + 62;
  if ((_DWORD)v19 != v22 >> 6)
  {
    v23 = v22 >> 6;
    if (v19 > v23)
    {
      *(_DWORD *)(a2 + 344) = v23;
      v20 = v22 >> 6;
    }
    else
    {
      v24 = v19;
      if (v23 > *(_DWORD *)(a2 + 348))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 336, a2 + 352, v23, 8);
        v24 = *(unsigned int *)(a2 + 344);
        v20 = *(_DWORD *)(a2 + 344);
      }
      if (v23 != v19)
        bzero((void *)(*v21 + 8 * v24), 8 * (v23 - v19));
      v20 += v23 - v19;
      *(_DWORD *)(a2 + 344) = v20;
      v18 = *(_DWORD *)(a2 + 400);
    }
  }
  v25 = *v21;
  if ((v18 & 0x3F) != 0)
    *(_QWORD *)(v25 + 8 * v20 - 8) &= ~(-1 << (v18 & 0x3F));
  v26 = *(_QWORD *)(v25 + 8 * ((v18 - 1) >> 6)) >> (v18 - 1);
  v27 = *(uint64_t **)(a2 + 240);
  BufferContainingLoc = llvm::SourceMgr::FindBufferContainingLoc(v27, v6);
  *(_DWORD *)(a2 + 272) = BufferContainingLoc;
  v29 = *(_QWORD *)(*v27 + 24 * (BufferContainingLoc - 1));
  v30 = *(_QWORD *)(v29 + 8);
  v31 = *(_QWORD *)(v29 + 16) - v30;
  *(_QWORD *)(a2 + 192) = v30;
  *(_QWORD *)(a2 + 200) = v31;
  *(_QWORD *)(a2 + 184) = v6;
  *(_QWORD *)(a2 + 136) = 0;
  *(_BYTE *)(a2 + 211) = v26 & 1;
  sub_1C610C428(a1, a2, a3);
  if (v37 >= 0x41 && v36)
    MEMORY[0x1CAA32F9C](v36, 0x1000C8000313F17);
}

uint64_t sub_1C610C724(uint64_t a1, unsigned __int8 *a2, unint64_t a3, uint64_t a4)
{
  int v6;
  const char *v7;
  uint64_t v10;
  unint64_t v11;
  void **v12;
  size_t v13;
  unsigned int v14;
  int v15;
  size_t v16;
  void **v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  int v22;
  int v23;
  int v24;
  uint64_t v25;
  _QWORD *v26;
  __int16 v27;
  uint64_t v28;
  uint64_t v30;
  char *v31;
  char *v32;
  char *v33;
  _QWORD **i;
  void ***v36;
  void ***v37;
  void *v38;
  void ***v39;
  _QWORD *v40;
  void **__s1;
  __int128 v42;
  const char *v43;
  unsigned int v44;
  unsigned int v45;
  void *v46;
  void ***v47;
  uint64_t v48;
  void *__p[2];
  unsigned __int8 *v50;
  uint64_t v51;
  __int16 v52;

  v6 = *(_DWORD *)(a1 + 512);
  if (v6 != 1)
  {
    if (v6)
      v7 = "unexpected name in nested ENDS directive";
    else
      v7 = "ENDS directive without matching STRUC/STRUCT/UNION";
    *(_QWORD *)&v42 = v7;
    v27 = 259;
    goto LABEL_30;
  }
  v10 = *(_QWORD *)(a1 + 504);
  if (llvm::StringRef::compare_insensitive((unsigned __int8 **)v10, a2, a3))
  {
    v52 = 1283;
    __p[0] = "mismatched name in ENDS directive; expected '";
    v50 = *(unsigned __int8 **)v10;
    v51 = *(_QWORD *)(v10 + 8);
    *(_QWORD *)&v42 = __p;
    v43 = "'";
    v27 = 770;
LABEL_30:
    LOWORD(v45) = v27;
    return llvm::MCAsmParser::Error(a1, a4, (uint64_t)&v42, 0, 0);
  }
  sub_1C610FC98((uint64_t)&v42, a1 + 504);
  if (v44 >= HIDWORD(v43))
    v11 = HIDWORD(v43);
  else
    v11 = v44;
  v45 = (v45 + v11 - 1) / v11 * v11;
  sub_1C5E3DEA4(__p, (char *)a2, (uint64_t (*)(_QWORD))sub_1C5E3C6A8, (char *)&a2[a3], (uint64_t)sub_1C5E3C6A8, a3);
  v12 = (void **)__p[0];
  if (SHIBYTE(v50) >= 0)
    v12 = __p;
  __s1 = v12;
  if (SHIBYTE(v50) >= 0)
    v13 = HIBYTE(v50) & 0x7F;
  else
    v13 = (size_t)__p[1];
  v14 = *(_DWORD *)(a1 + 624);
  if (!v14)
  {
    *(_QWORD *)(a1 + 628) = 0;
    v40 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!v40)
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    v40[16] = 2;
    *(_QWORD *)(a1 + 616) = v40;
    v14 = 16;
    *(_DWORD *)(a1 + 624) = 16;
  }
  v15 = 0;
  if (v13)
  {
    v16 = v13;
    v17 = __s1;
    do
    {
      v18 = *(unsigned __int8 *)v17;
      v17 = (void **)((char *)v17 + 1);
      v15 = 33 * v15 + v18;
      --v16;
    }
    while (v16);
  }
  v19 = *(_QWORD *)(a1 + 616);
  v20 = v14 - 1;
  v21 = v19 + 8 * v14 + 8;
  v22 = -1;
  v23 = 1;
  v24 = v15;
  while (1)
  {
    v25 = v24 & v20;
    v26 = *(_QWORD **)(v19 + 8 * v25);
    if (!v26)
      break;
    if (v26 == (_QWORD *)-8)
    {
      if (v22 == -1)
        v22 = v24 & v20;
    }
    else if (*(_DWORD *)(v21 + 4 * v25) == v15
           && v13 == *v26
           && (!v13 || !memcmp(__s1, (char *)v26 + *(unsigned int *)(a1 + 636), v13)))
    {
      goto LABEL_37;
    }
    v24 = v23 + v25;
    ++v23;
  }
  v30 = v22;
  if (v22 == -1)
  {
    v30 = v25;
    v25 = v25;
  }
  else
  {
    v25 = v22;
  }
  *(_DWORD *)(v21 + 4 * v30) = v15;
  v26 = *(_QWORD **)(v19 + 8 * v25);
LABEL_37:
  if (v26 == (_QWORD *)-8)
  {
    --*(_DWORD *)(a1 + 632);
    goto LABEL_41;
  }
  if (!v26)
  {
LABEL_41:
    v31 = (char *)operator new(v13 + 105, (std::align_val_t)8uLL);
    v32 = v31;
    v33 = v31 + 104;
    if (v13)
      memcpy(v31 + 104, __s1, v13);
    v33[v13] = 0;
    *(_QWORD *)v32 = v13;
    *(_OWORD *)(v32 + 24) = 0u;
    *(_OWORD *)(v32 + 40) = 0u;
    *(_OWORD *)(v32 + 56) = 0u;
    *(_OWORD *)(v32 + 72) = 0u;
    *(_OWORD *)(v32 + 88) = 0u;
    *(_OWORD *)(v32 + 8) = 0u;
    v32[25] = 1;
    *(_QWORD *)(v32 + 28) = 0;
    *(_QWORD *)(v32 + 36) = 0;
    *((_OWORD *)v32 + 3) = 0u;
    *((_OWORD *)v32 + 4) = 0u;
    *(_OWORD *)(v32 + 76) = 0u;
    *((_DWORD *)v32 + 23) = 16;
    *(_QWORD *)(v19 + 8 * v25) = v32;
    ++*(_DWORD *)(a1 + 628);
    for (i = (_QWORD **)(*(_QWORD *)(a1 + 616)
                        + 8 * llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)(a1 + 616), v25));
          ;
          ++i)
    {
      v26 = *i;
      if (*i && v26 + 1 != 0)
        break;
    }
  }
  sub_1C610FF8C((uint64_t)(v26 + 1), &v42);
  if (SHIBYTE(v50) < 0)
    operator delete(__p[0]);
  __p[0] = "unexpected token";
  v52 = 259;
  if (llvm::MCAsmParser::parseEOL((llvm::MCAsmParser *)a1, (const llvm::Twine *)__p))
  {
    __p[0] = " in ENDS directive";
    v52 = 259;
    v28 = llvm::MCAsmParser::addErrorSuffix((llvm::MCAsmParser *)a1, (const llvm::Twine *)__p);
  }
  else
  {
    v28 = 0;
  }
  sub_1C61DF2A0((uint64_t)&v48);
  v36 = (void ***)v46;
  if (v46)
  {
    v37 = v47;
    v38 = v46;
    if (v47 != v46)
    {
      do
      {
        v39 = v37 - 18;
        sub_1C60FEA30(v37 - 16);
        v37 = v39;
      }
      while (v39 != v36);
      v38 = v46;
    }
    v47 = v36;
    operator delete(v38);
  }
  return v28;
}

uint64_t sub_1C610CB30(_DWORD *a1, uint64_t a2, uint64_t a3, uint64_t a4, char *a5, unint64_t a6)
{
  uint64_t v12;
  unint64_t Symbol;
  uint64_t v14;
  int v15;
  int v16;
  llvm::StringMapImpl *v17;
  unsigned __int8 *p_p;
  size_t v19;
  uint64_t v20;
  _QWORD v22[4];
  __int16 v23;
  int v24;
  void *__p;
  size_t v26;
  const char *v27;
  __int16 v28;

  if (a1[128])
  {
    sub_1C6111298((uint64_t)a1, a5, a6, a4);
  }
  else
  {
    v12 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 48))(a1);
    v28 = 261;
    __p = a5;
    v26 = a6;
    Symbol = llvm::MCContext::getOrCreateSymbol(v12, (uint64_t)&__p);
    v14 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 56))(a1);
    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v14 + 192))(v14, Symbol, 0);
    v24 = 0;
    if (sub_1C61111A0((llvm::MCAsmParser *)a1, a4, &v24))
    {
      v22[0] = " in '";
      v22[2] = a2;
      v22[3] = a3;
      v23 = 1283;
      __p = v22;
      v27 = "' directive";
      v28 = 770;
      return llvm::MCAsmParser::addErrorSuffix((llvm::MCAsmParser *)a1, (const llvm::Twine *)&__p);
    }
    v15 = v24;
    v16 = v24 * a4;
    v17 = (llvm::StringMapImpl *)(a1 + 162);
    sub_1C5E3DEA4(&__p, a5, (uint64_t (*)(_QWORD))sub_1C5E3C6A8, &a5[a6], (uint64_t)sub_1C5E3C6A8, a6);
    if (SHIBYTE(v27) >= 0)
      p_p = (unsigned __int8 *)&__p;
    else
      p_p = (unsigned __int8 *)__p;
    if (SHIBYTE(v27) >= 0)
      v19 = HIBYTE(v27) & 0x7F;
    else
      v19 = v26;
    v20 = *sub_1C61163C8(v17, p_p, v19);
    *(_QWORD *)(v20 + 8) = a2;
    *(_QWORD *)(v20 + 16) = a3;
    *(_DWORD *)(v20 + 24) = v16;
    *(_DWORD *)(v20 + 28) = a4;
    *(_DWORD *)(v20 + 32) = v15;
    if (SHIBYTE(v27) < 0)
      operator delete(__p);
  }
  return 0;
}

uint64_t sub_1C610CCC8(_DWORD *a1, uint64_t a2, uint64_t a3, unsigned int *a4, unsigned int a5, char *a6, unint64_t a7)
{
  uint64_t result;
  uint64_t v15;
  unint64_t Symbol;
  uint64_t v17;
  int v18;
  int v19;
  llvm::StringMapImpl *v20;
  unsigned __int8 *p_p;
  size_t v22;
  uint64_t v23;
  _QWORD v24[4];
  __int16 v25;
  int v26;
  void *__p;
  size_t v28;
  const char *v29;
  __int16 v30;

  if (a1[128])
  {
    result = sub_1C6111B38((uint64_t)a1, a6, a7, a4, a5);
    if ((_DWORD)result)
      goto LABEL_15;
  }
  else
  {
    v15 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 48))(a1);
    v30 = 261;
    __p = a6;
    v28 = a7;
    Symbol = llvm::MCContext::getOrCreateSymbol(v15, (uint64_t)&__p);
    v17 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 56))(a1);
    (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v17 + 192))(v17, Symbol, 0);
    v26 = 0;
    if (sub_1C61119A8((llvm::MCAsmParser *)a1, a4, &v26))
    {
LABEL_15:
      v25 = 1283;
      v24[0] = " in '";
      v24[2] = a2;
      v24[3] = a3;
      __p = v24;
      v29 = "' directive";
      v30 = 770;
      return llvm::MCAsmParser::addErrorSuffix((llvm::MCAsmParser *)a1, (const llvm::Twine *)&__p);
    }
    v18 = v26;
    v19 = v26 * a5;
    v20 = (llvm::StringMapImpl *)(a1 + 162);
    sub_1C5E3DEA4(&__p, a6, (uint64_t (*)(_QWORD))sub_1C5E3C6A8, &a6[a7], (uint64_t)sub_1C5E3C6A8, a7);
    if (SHIBYTE(v29) >= 0)
      p_p = (unsigned __int8 *)&__p;
    else
      p_p = (unsigned __int8 *)__p;
    if (SHIBYTE(v29) >= 0)
      v22 = HIBYTE(v29) & 0x7F;
    else
      v22 = v28;
    v23 = *sub_1C61163C8(v20, p_p, v22);
    *(_QWORD *)(v23 + 8) = a2;
    *(_QWORD *)(v23 + 16) = a3;
    *(_DWORD *)(v23 + 24) = v19;
    *(_DWORD *)(v23 + 28) = a5;
    *(_DWORD *)(v23 + 32) = v18;
    if (SHIBYTE(v29) < 0)
      operator delete(__p);
    return 0;
  }
  return result;
}

double sub_1C610CE6C(uint64_t a1, uint64_t a2, int a3)
{
  const tm *v4;
  const char *v5;
  size_t v6;
  size_t v7;
  __int128 *v8;
  double result;
  _QWORD *v10;
  _DWORD *v11;
  uint64_t v12;
  uint64_t v13;
  char *v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const void *v18;
  size_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  __int128 *v25;
  uint64_t v26;
  uint64_t v27;
  __int128 v28;
  unint64_t v29;
  char __src[9];
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  switch(a3)
  {
    case 1:
      v4 = (const tm *)(a2 + 280);
      v5 = "%D";
      goto LABEL_4;
    case 2:
      v4 = (const tm *)(a2 + 280);
      v5 = "%T";
LABEL_4:
      v6 = strftime(__src, 9uLL, v5, v4);
      if (v6 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_35;
      v7 = v6;
      if (v6 >= 0x17)
      {
        v20 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v6 | 7) != 0x17)
          v20 = v6 | 7;
        v21 = v20 + 1;
        v8 = (__int128 *)operator new(v20 + 1);
        *((_QWORD *)&v28 + 1) = v7;
        v29 = v21 | 0x8000000000000000;
        *(_QWORD *)&v28 = v8;
      }
      else
      {
        HIBYTE(v29) = v6;
        v8 = &v28;
        if (!v6)
          goto LABEL_19;
      }
      memcpy(v8, __src, v7);
LABEL_19:
      *((_BYTE *)v8 + v7) = 0;
      goto LABEL_33;
    case 4:
      v10 = *(_QWORD **)(a2 + 680);
      if (v10 == *(_QWORD **)(a2 + 688))
        v11 = (_DWORD *)(a2 + 272);
      else
        v11 = (_DWORD *)(*v10 + 8);
      v22 = *(_QWORD *)(**(_QWORD **)(a2 + 240) + 24 * (*v11 - 1));
      v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v22 + 16))(v22);
      if (!v23)
        goto LABEL_27;
      v19 = v24;
      if (v24 > 0x7FFFFFFFFFFFFFF7)
        goto LABEL_35;
      v18 = (const void *)v23;
      goto LABEL_24;
    case 5:
      v12 = (*(uint64_t (**)(_QWORD))(****(_QWORD ****)(a2 + 240) + 16))(***(_QWORD ***)(a2 + 240));
      v14 = (char *)llvm::sys::path::stem(v12, v13, 0);
      sub_1C5E3DEA4(&v28, v14, (uint64_t (*)(_QWORD))sub_1C6392230, &v14[v15], (uint64_t)sub_1C6392230, v15);
      goto LABEL_33;
    case 7:
      v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
      v17 = *(_QWORD *)(*(_QWORD *)(v16 + 112) + 32 * *(unsigned int *)(v16 + 120) - 32);
      v18 = *(const void **)(v17 + 200);
      if (!v18)
      {
LABEL_27:
        v28 = 0uLL;
        v29 = 0;
        goto LABEL_33;
      }
      v19 = *(_QWORD *)(v17 + 208);
      if (v19 > 0x7FFFFFFFFFFFFFF7)
LABEL_35:
        abort();
LABEL_24:
      if (v19 >= 0x17)
      {
        v26 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v19 | 7) != 0x17)
          v26 = v19 | 7;
        v27 = v26 + 1;
        v25 = (__int128 *)operator new(v26 + 1);
        *((_QWORD *)&v28 + 1) = v19;
        v29 = v27 | 0x8000000000000000;
        *(_QWORD *)&v28 = v25;
      }
      else
      {
        HIBYTE(v29) = v19;
        v25 = &v28;
        if (!v19)
          goto LABEL_32;
      }
      memmove(v25, v18, v19);
LABEL_32:
      *((_BYTE *)v25 + v19) = 0;
LABEL_33:
      result = *(double *)&v28;
      *(_OWORD *)a1 = v28;
      *(_QWORD *)(a1 + 16) = v29;
      *(_BYTE *)(a1 + 24) = 1;
      return result;
    default:
      result = 0.0;
      *(_OWORD *)a1 = 0u;
      *(_OWORD *)(a1 + 16) = 0u;
      return result;
  }
}

uint64_t sub_1C610D108(uint64_t a1, llvm::raw_ostream *a2, unsigned __int8 *a3, unint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t *a9, uint64_t a10)
{
  uint64_t v13;
  uint64_t v14;
  char v15;
  BOOL v16;
  unsigned __int8 *v17;
  size_t v18;
  size_t v19;
  uint64_t v20;
  __int128 v21;
  llvm::raw_ostream *v22;
  int v23;
  int v24;
  unint64_t v25;
  unint64_t v26;
  int v27;
  BOOL v28;
  BOOL v29;
  size_t v30;
  size_t v31;
  void *v32;
  int v33;
  unint64_t v34;
  size_t v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  unsigned int v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unsigned __int8 *v46;
  uint64_t v47;
  _BYTE *v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  _BYTE *v52;
  unint64_t *v53;
  unint64_t v54;
  void *v55;
  unint64_t v56;
  unsigned __int8 *v57;
  size_t v58;
  int v59;
  size_t v60;
  int v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  uint64_t v67;
  _QWORD *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  const char *v74;
  uint64_t v75;
  size_t v76;
  llvm::raw_ostream *v77;
  void *v78;
  unint64_t v79;
  uint64_t v85;
  size_t __n;
  uint64_t v87;
  int v88;
  int v89;
  unint64_t v90;
  uint64_t v91;
  const void *v92;
  __int128 __p;
  std::string::size_type v94;
  _QWORD v95[2];
  int v96;
  __int16 v97;
  char v98;
  void *v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  char v104;
  uint64_t v105;
  int v106;
  std::string *v107;
  std::string v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;

  v87 = a6;
  if (a6 != a8)
  {
    v99 = "Wrong number of arguments";
    LOWORD(v103) = 259;
    return llvm::MCAsmParser::Error(a1, a10, (uint64_t)&v99, 0, 0);
  }
  v109 = 0;
  v110 = 0;
  v111 = 0x2000000000;
  memset(&v108, 0, sizeof(v108));
  std::string::reserve(&v108, 6uLL);
  v13 = *a9;
  if (*a9 != a9[1])
  {
    v14 = a9[1];
    do
    {
      v15 = *(_BYTE *)(v13 + 23);
      v16 = v15 < 0;
      if (v15 >= 0)
        v17 = (unsigned __int8 *)v13;
      else
        v17 = *(unsigned __int8 **)v13;
      v18 = v15 & 0x7F;
      if (v16)
        v19 = *(_QWORD *)(v13 + 8);
      else
        v19 = v18;
      LODWORD(v100) = 0;
      v104 = 0;
      v105 = 0;
      v99 = &unk_1E81A7208;
      v107 = &v108;
      v106 = 0;
      v102 = 0;
      v103 = 0;
      v101 = 0;
      llvm::raw_ostream::write((llvm::raw_ostream *)&v99, "??", 2uLL);
      v20 = *(unsigned __int16 *)(a1 + 1068);
      *(_WORD *)(a1 + 1068) = v20 + 1;
      v95[0] = v20;
      v95[1] = 0;
      v96 = 4;
      v97 = 257;
      v98 = 0;
      llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v99, (uint64_t)v95);
      if (SHIBYTE(v107->__r_.__value_.__r.__words[2]) < 0)
      {
        sub_1C47EBC30(&__p, v107->__r_.__value_.__l.__data_, v107->__r_.__value_.__l.__size_);
      }
      else
      {
        v21 = *(_OWORD *)&v107->__r_.__value_.__l.__data_;
        v94 = v107->__r_.__value_.__r.__words[2];
        __p = v21;
      }
      sub_1C5A7C154((llvm::StringMapImpl *)&v109, v17, v19, (uint64_t)&__p);
      if (SHIBYTE(v94) < 0)
        operator delete((void *)__p);
      if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
      {
        *v108.__r_.__value_.__l.__data_ = 0;
        v108.__r_.__value_.__l.__size_ = 0;
      }
      else
      {
        v108.__r_.__value_.__s.__data_[0] = 0;
        *((_BYTE *)&v108.__r_.__value_.__s + 23) = 0;
      }
      v99 = off_1E81A6E70;
      if (v106 == 1 && v101)
        MEMORY[0x1CAA32F9C](v101, 0x1000C8077774924);
      v13 += 24;
    }
    while (v13 != v14);
  }
  v22 = a2;
  if (!a4)
    goto LABEL_153;
  v23 = 0;
  v24 = 0;
  do
  {
    v25 = 0;
    v26 = a4;
    while (1)
    {
      v27 = a3[v25];
      if (v27 == 38)
        break;
      v28 = (v27 - 48) >= 0xA && (v27 & 0xFFFFFFDF) - 65 >= 0x1A;
      if (!v28
        || ((v27 - 36) <= 0x3B
          ? (v29 = ((1 << (v27 - 36)) & 0x800000018000001) == 0)
          : (v29 = 1),
            !v29))
      {
        if (!v23)
          break;
        if (v26 == a4)
          v26 = v25;
LABEL_39:
        if (v27 == v24)
        {
          if (v25 + 1 == a4 || a3[v25 + 1] != v24)
            v23 = 0;
          else
            ++v25;
        }
        goto LABEL_44;
      }
      v26 = a4;
      if (v23)
        goto LABEL_39;
      if (v27 == 39 || v27 == 34)
      {
        v23 = 1;
        v26 = a4;
        v24 = a3[v25];
      }
      else
      {
        v23 = 0;
        v26 = a4;
      }
LABEL_44:
      if (++v25 == a4)
      {
        v25 = a4;
        break;
      }
    }
    if (v26 == a4)
      v30 = v25;
    else
      v30 = v26;
    if (a4 >= v30)
      v31 = v30;
    else
      v31 = a4;
    v32 = (void *)*((_QWORD *)v22 + 4);
    if (v31 <= *((_QWORD *)v22 + 3) - (_QWORD)v32)
    {
      if (v31)
      {
        memcpy(v32, a3, v31);
        *((_QWORD *)v22 + 4) += v31;
      }
    }
    else
    {
      llvm::raw_ostream::write(v22, (const char *)a3, v31);
    }
    if (v30 == a4)
      break;
    v88 = v23;
    v33 = a3[v30];
    if (v33 == 38)
      v34 = (v30 + 1);
    else
      v34 = v30;
    if (v33 == 38)
      v35 = v30 + 1;
    else
      v35 = v30;
    v90 = v35;
    if (a4 <= v34)
    {
      v37 = a8;
    }
    else
    {
      v36 = (v33 == 38) + (_DWORD)v30 + 1;
      v37 = a8;
      do
      {
        v38 = a3[v34];
        if ((v38 - 48) >= 0xA && (v38 & 0xFFFFFFDF) - 65 >= 0x1A)
        {
          v40 = v38 - 36;
          v16 = v40 > 0x3B;
          v41 = (1 << v40) & 0x800000018000001;
          if (v16 || v41 == 0)
            break;
        }
        v34 = v36;
        v16 = a4 > v36++;
      }
      while (v16);
    }
    v89 = v24;
    __n = v34 - v90;
    sub_1C5E3DEA4(&v99, (char *)&a3[v90], (uint64_t (*)(_QWORD))sub_1C5E3C6A8, (char *)&a3[v34], (uint64_t)sub_1C5E3C6A8, v34 - v90);
    v43 = v87;
    if (v87)
    {
      v44 = 0;
      if (v101 >= 0)
        v45 = HIBYTE(v101) & 0x7F;
      else
        v45 = v100;
      if (v101 >= 0)
        v46 = (unsigned __int8 *)&v99;
      else
        v46 = (unsigned __int8 *)v99;
      v47 = a5;
      while (*(_QWORD *)(v47 + 8) != v45
           || llvm::StringRef::compare_insensitive((unsigned __int8 **)v47, v46, v45))
      {
        ++v44;
        v47 += 48;
        if (v37 == v44)
          goto LABEL_96;
      }
      v43 = v44;
    }
    if (v43 == v87)
    {
LABEL_96:
      if (v33 == 38)
      {
        v48 = (_BYTE *)*((_QWORD *)v22 + 4);
        if ((unint64_t)v48 >= *((_QWORD *)v22 + 3))
        {
          llvm::raw_ostream::write(v22, 38);
        }
        else
        {
          *((_QWORD *)v22 + 4) = v48 + 1;
          *v48 = 38;
        }
      }
      v57 = (unsigned __int8 *)v99;
      if (v101 >= 0)
        v57 = (unsigned __int8 *)&v99;
      v92 = v57;
      v58 = v101 >= 0 ? HIBYTE(v101) & 0x7F : v100;
      v85 = v110;
      if (!(_DWORD)v110)
        goto LABEL_159;
      v59 = 0;
      if (v58)
      {
        v60 = v58;
        do
        {
          v61 = *v57++;
          v59 = 33 * v59 + v61;
          --v60;
        }
        while (v60);
      }
      v62 = v110 - 1;
      v63 = v109;
      v64 = v109 + 8 * v110 + 8;
      v91 = HIDWORD(v111);
      v65 = 1;
      v66 = v59;
      while (1)
      {
        v67 = v66 & v62;
        v68 = *(_QWORD **)(v63 + 8 * v67);
        if (v68 != (_QWORD *)-8)
        {
          if (!v68)
            goto LABEL_142;
          if (*(_DWORD *)(v64 + 4 * v67) == v59 && v58 == *v68 && (!v58 || !memcmp(v92, (char *)v68 + v91, v58)))
            break;
        }
        v66 = v65 + v67;
        ++v65;
      }
      if ((_DWORD)v67 == -1 || (int)v67 == v85)
      {
LABEL_159:
      {
LABEL_142:
        v22 = a2;
        v78 = (void *)*((_QWORD *)a2 + 4);
        if (__n > *((_QWORD *)a2 + 3) - (_QWORD)v78)
        {
          v77 = a2;
          v74 = (const char *)&a3[v90];
          v76 = v34 - v90;
          goto LABEL_144;
        }
      }
        v56 = v90;
        v23 = v88;
        v24 = v89;
        if (v34 != v90)
        {
          memcpy(v78, &a3[v90], __n);
          *((_QWORD *)a2 + 4) += __n;
          v56 = v34;
        }
      }
      else
      {
        v69 = *(_QWORD *)(v63 + 8 * (int)v67);
        v72 = *(_QWORD *)(v69 + 8);
        v70 = v69 + 8;
        v71 = v72;
        v73 = *(_BYTE *)(v70 + 23);
        v74 = (const char *)(v73 >= 0 ? v70 : v71);
        v75 = *(_QWORD *)(v70 + 8);
        v76 = v73 >= 0 ? v73 & 0x7F : v75;
        v22 = a2;
        v77 = a2;
LABEL_144:
        llvm::raw_ostream::write(v77, v74, v76);
        v56 = v34;
        v23 = v88;
        v24 = v89;
      }
    }
    else
    {
      v49 = (uint64_t *)(a7 + 24 * v43);
      v50 = *v49;
      v51 = v49[1];
      v23 = v88;
      v24 = v89;
      if (*v49 != v51)
      {
        do
        {
          v52 = *(_BYTE **)(v50 + 8);
          if (*v52 == 37 && *(_DWORD *)v50 == 4)
          {
            v53 = (unint64_t *)(v50 + 24);
            if (*(_DWORD *)(v50 + 32) >= 0x41u)
              v53 = (unint64_t *)*v53;
            llvm::raw_ostream::operator<<(v22, *v53);
          }
          else
          {
            v54 = *(_QWORD *)(v50 + 16);
            v55 = (void *)*((_QWORD *)v22 + 4);
            if (v54 <= *((_QWORD *)v22 + 3) - (_QWORD)v55)
            {
              if (v54)
              {
                memcpy(v55, v52, *(_QWORD *)(v50 + 16));
                *((_QWORD *)v22 + 4) += v54;
              }
            }
            else
            {
              llvm::raw_ostream::write(v22, v52, *(_QWORD *)(v50 + 16));
            }
          }
          v50 += 40;
        }
        while (v50 != v51);
      }
      if (v34 >= a4)
        v56 = v34;
      else
        v56 = a3[v34] == 38 ? v34 + 1 : v34;
    }
    if (a4 >= v56)
      v79 = v56;
    else
      v79 = a4;
    if (SHIBYTE(v101) < 0)
      operator delete(v99);
    a3 += v79;
    a4 -= v79;
  }
  while (a4);
LABEL_153:
  if (SHIBYTE(v108.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v108.__r_.__value_.__l.__data_);
  sub_1C58F7164((uint64_t)&v109);
  return 0;
}

void **sub_1C610D870(void ***a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  unint64_t v5;
  uint64_t v7;
  char *v8;
  char *v9;
  void **v10;
  void **v11;
  void **v12;
  void **v13;
  __int128 v14;
  void **v15;
  void **v17;

  v2 = 0xAAAAAAAAAAAAAAABLL * (a1[1] - *a1);
  v3 = v2 + 1;
  if (v2 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  if (0x5555555555555556 * (a1[2] - *a1) > v3)
    v3 = 0x5555555555555556 * (a1[2] - *a1);
  if (0xAAAAAAAAAAAAAAABLL * (a1[2] - *a1) >= 0x555555555555555)
    v5 = 0xAAAAAAAAAAAAAAALL;
  else
    v5 = v3;
  if (v5 > 0xAAAAAAAAAAAAAAALL)
    sub_1C4764EE4();
  v7 = 3 * v5;
  v8 = (char *)operator new(24 * v5);
  v9 = &v8[24 * v2];
  v10 = (void **)&v8[8 * v7];
  *(_OWORD *)v9 = *(_OWORD *)a2;
  *((_QWORD *)v9 + 2) = *(_QWORD *)(a2 + 16);
  v11 = (void **)(v9 + 24);
  *(_QWORD *)a2 = 0;
  *(_QWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = 0;
  v12 = *a1;
  v13 = a1[1];
  if (v13 == *a1)
  {
    *a1 = (void **)v9;
    a1[1] = v11;
    a1[2] = v10;
  }
  else
  {
    do
    {
      v14 = *(_OWORD *)(v13 - 3);
      v13 -= 3;
      *(_OWORD *)(v9 - 24) = v14;
      v9 -= 24;
      *((_QWORD *)v9 + 2) = v13[2];
      *v13 = 0;
      v13[1] = 0;
      v13[2] = 0;
    }
    while (v13 != v12);
    v13 = *a1;
    v15 = a1[1];
    *a1 = (void **)v9;
    a1[1] = v11;
    a1[2] = v10;
    while (v15 != v13)
    {
      v15 -= 3;
      v17 = v15;
      sub_1C5934A7C(&v17);
    }
  }
  if (v13)
    operator delete(v13);
  return v11;
}

int64_t sub_1C610D9A8(int64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v6;
  uint64_t v7;
  int64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  int64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  unsigned int v17;
  void *v18;
  _QWORD *v19;

  if (a4)
  {
    if (a4 >= 0x555555555555556)
LABEL_15:
      abort();
    v6 = (_QWORD *)result;
    v7 = 3 * a4;
    result = (int64_t)operator new(48 * a4);
    v8 = result;
    *v6 = result;
    v6[1] = result;
    v19 = v6;
    for (v6[2] = result + 16 * v7; a2 != a3; v8 += 48)
    {
      *(_OWORD *)v8 = *(_OWORD *)a2;
      *(_QWORD *)(v8 + 24) = 0;
      *(_QWORD *)(v8 + 32) = 0;
      *(_QWORD *)(v8 + 16) = 0;
      v9 = *(_QWORD *)(a2 + 16);
      v10 = *(_QWORD *)(a2 + 24);
      result = v10 - v9;
      if (v10 != v9)
      {
        v11 = 0xCCCCCCCCCCCCCCCDLL * (result >> 3);
        if (v11 >= 0x666666666666667)
          goto LABEL_15;
        result = (int64_t)operator new(result);
        v12 = result;
        v13 = 0;
        *(_QWORD *)(v8 + 16) = result;
        *(_QWORD *)(v8 + 24) = result;
        *(_QWORD *)(v8 + 32) = result + 40 * v11;
        do
        {
          v14 = v9 + v13;
          v15 = v12 + v13;
          v16 = *(_OWORD *)(v9 + v13);
          *(_QWORD *)(v15 + 16) = *(_QWORD *)(v9 + v13 + 16);
          *(_OWORD *)v15 = v16;
          v17 = *(_DWORD *)(v9 + v13 + 32);
          *(_DWORD *)(v15 + 32) = v17;
          if (v17 > 0x40)
          {
            v18 = (void *)operator new[]();
            *(_QWORD *)(v15 + 24) = v18;
            result = (int64_t)memcpy(v18, *(const void **)(v14 + 24), (((unint64_t)*(unsigned int *)(v15 + 32) + 63) >> 3) & 0x3FFFFFF8);
          }
          else
          {
            *(_QWORD *)(v15 + 24) = *(_QWORD *)(v14 + 24);
          }
          v13 += 40;
        }
        while (v14 + 40 != v10);
        *(_QWORD *)(v8 + 24) = v12 + v13;
      }
      *(_WORD *)(v8 + 40) = *(_WORD *)(a2 + 40);
      a2 += 48;
    }
    v19[1] = v8;
  }
  return result;
}

uint64_t sub_1C610DB3C(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void (*v9)(uint64_t, void **);
  uint64_t v10;
  _DWORD *v11;
  uint64_t v12;
  int v13;
  std::string *v14;
  char *v15;
  unint64_t v16;
  char v17;
  int *v18;
  char *v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  int *v23;
  unint64_t v24;
  unint64_t v25;
  uint64_t v26;
  char v27;
  void **v28;
  size_t v29;
  unsigned __int8 *v30;
  size_t v31;
  size_t v32;
  uint64_t v33;
  int v34;
  size_t v35;
  unsigned __int8 *v36;
  int v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  int v45;
  void **v46;
  size_t v47;
  uint64_t v48;
  int v49;
  size_t v50;
  void **v51;
  int v52;
  uint64_t v53;
  int v54;
  int v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  int v59;
  size_t v60;
  void **v61;
  int v62;
  uint64_t v63;
  int v64;
  int v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  _BOOL4 v69;
  int v70;
  std::string *p_dst;
  size_t size;
  void *v73;
  uint64_t v74;
  int v75;
  void *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  int v81;
  uint64_t v82;
  unsigned int v83;
  unint64_t v84;
  uint64_t v85;
  int v86;
  int v87;
  int v88;
  unint64_t v89;
  uint64_t v90;
  unint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t v94;
  uint64_t v95;
  unint64_t v96;
  std::string::size_type v97;
  BOOL v98;
  void **v99;
  size_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  int v108;
  int v109;
  uint64_t v110;
  unsigned int v111;
  unint64_t v112;
  uint64_t v113;
  int v114;
  int v115;
  uint64_t v116;
  void *v117;
  uint64_t v118;
  int v119;
  unint64_t v120;
  int v121;
  int v122;
  uint64_t v123;
  unsigned int v124;
  _QWORD *v125;
  unsigned int v126;
  unint64_t v127;
  uint64_t v128;
  int v129;
  uint64_t v131;
  int v132;
  int v133;
  uint64_t v134;
  unsigned int v135;
  uint64_t v136;
  uint64_t *v137;
  unsigned int v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t *v143;
  int BufferContainingLoc;
  uint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  _DWORD **v152;
  uint64_t v153;
  _DWORD *v154;
  int *v155;
  int v156;
  uint64_t v157;
  size_t v158;
  size_t v159;
  void **v160;
  char v161;
  void *v162;
  size_t v163;
  char v164;
  uint64_t v165;
  void *v166[2];
  uint64_t v167;
  std::string __dst;
  uint64_t v169;
  __int16 v170;
  int v171;
  char v172;
  __int128 v173;
  uint64_t v174;
  char v175;
  void **p_p;
  void *__p;
  __int128 v178;
  uint64_t v179;
  unsigned int v180;
  __int128 v181;
  char v182;
  uint64_t v183;

  v3 = a1;
  v183 = *MEMORY[0x1E0C80C00];
  v152 = (_DWORD **)(a1 + 48);
  v4 = a1 + 40;
  if (**(_DWORD **)(a1 + 48) == 1)
  {
    v131 = *(_QWORD *)(a1 + 104);
    LOWORD(v180) = 260;
    __p = (void *)(a1 + 112);
    llvm::MCAsmParser::Error(a1, v131, (uint64_t)&__p, 0, 0);
  }
  v157 = v3;
  if (**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3) + 8) == 9
    && *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3) + 8) + 16)
    && **(_BYTE **)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3) + 8) + 8) != 10
    && **(_BYTE **)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3) + 8) + 8) != 13
    && *(_BYTE *)(*(_QWORD *)(v3 + 232) + 466))
  {
    v5 = *(_QWORD *)(v3 + 224);
    v6 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v157 + 40))(v157) + 8);
    v8 = *(void **)(v6 + 8);
    v7 = *(_QWORD *)(v6 + 16);
    LOWORD(v180) = 261;
    __p = v8;
    *(_QWORD *)&v178 = v7;
    v9 = *(void (**)(uint64_t, void **))(*(_QWORD *)v5 + 136);
    v10 = v5;
    v3 = v157;
    v9(v10, &__p);
  }
  v11 = (_DWORD *)sub_1C60E57B0(v4);
  v12 = (uint64_t)v11;
  v13 = *v11;
  if (a2 || v13 != 2)
    goto LABEL_217;
  v156 = *(unsigned __int8 *)(v3 + 147);
  v150 = v3 + 352;
  v151 = (_QWORD *)(v3 + 336);
  v153 = v4;
  v154 = v11;
  while (!v156)
  {
LABEL_25:
    v18 = *(int **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 40))(v3) + 8);
    v155 = v18;
    if (*v18 == 2)
    {
      v19 = (char *)*((_QWORD *)v18 + 1);
      v20 = *((_QWORD *)v18 + 2);
    }
    else
    {
      v23 = v18 + 2;
      v22 = (char *)*((_QWORD *)v18 + 1);
      v21 = *((_QWORD *)v23 + 1);
      v24 = v21 != 0;
      if (v21)
        v19 = v22 + 1;
      else
        v19 = v22;
      if (v24 <= v21 - 1)
        v25 = v21 - 1;
      else
        v25 = v21 != 0;
      if (v21 >= v25)
        v21 = v25;
      v20 = v21 - v24;
    }
    sub_1C5E3DEA4(&v162, v19, (uint64_t (*)(_QWORD))sub_1C5E3C6A8, &v19[v20], (uint64_t)sub_1C5E3C6A8, v20);
    v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 48))(v3);
    v27 = v164;
    v28 = (void **)v162;
    v29 = v163;
    if (v164 >= 0)
      v30 = (unsigned __int8 *)&v162;
    else
      v30 = (unsigned __int8 *)v162;
    v31 = v164 & 0x7F;
    if (v164 >= 0)
      v32 = v164 & 0x7F;
    else
      v32 = v163;
    v33 = *(unsigned int *)(v26 + 1976);
    if ((_DWORD)v33)
    {
      v160 = (void **)v162;
      v161 = v164;
      v158 = v164 & 0x7F;
      v159 = v163;
      v34 = 0;
      if (v32)
      {
        v35 = v32;
        v36 = v30;
        do
        {
          v37 = *v36++;
          v34 = 33 * v34 + v37;
          --v35;
        }
        while (v35);
      }
      v38 = *(_QWORD *)(v26 + 1968);
      v39 = *(unsigned int *)(v26 + 1988);
      v40 = 1;
      v41 = v34;
      while (1)
      {
        v42 = v41 & (v33 - 1);
        v43 = *(_QWORD **)(v38 + 8 * v42);
        if (v43 != (_QWORD *)-8)
        {
          if (!v43)
            goto LABEL_62;
          if (*(_DWORD *)(v38 + 8 * v33 + 8 + 4 * v42) == v34
            && v32 == *v43
            && (!v32 || !memcmp(v30, (char *)v43 + v39, v32)))
          {
            break;
          }
        }
        v41 = v40 + v42;
        ++v40;
      }
      if ((_DWORD)v42 == -1 || (int)v42 == v33)
      {
LABEL_62:
        v3 = v157;
        v31 = v158;
        v28 = v160;
        v27 = v161;
        v29 = v159;
        goto LABEL_63;
      }
      v44 = *(_QWORD *)(v38 + 8 * (int)v42);
      v3 = v157;
      v31 = v158;
      v28 = v160;
      v27 = v161;
      v29 = v159;
      if (*(_BYTE *)(v44 + 88))
      {
        sub_1C610C428((uint64_t)&__p, v157, 1);
        v45 = (int)__p;
        if (v180 >= 0x41 && v179)
          MEMORY[0x1CAA32F9C](v179, 0x1000C8000313F17);
        if (v45 == 17)
        {
          v88 = *v155;
          v90 = *((_QWORD *)v155 + 1);
          v89 = *((_QWORD *)v155 + 2);
          v91 = v89 - 1;
          v92 = v89 != 0;
          if (v89)
            v93 = v90 + 1;
          else
            v93 = *((_QWORD *)v155 + 1);
          if (v92 > v91)
            v91 = v89 != 0;
          if (v89 < v91)
            v91 = *((_QWORD *)v155 + 2);
          v94 = v91 - v92;
          if (v88 == 2)
            v95 = *((_QWORD *)v155 + 1);
          else
            v95 = v93;
          if (v88 == 2)
            v96 = *((_QWORD *)v155 + 2);
          else
            v96 = v94;
          v4 = v153;
          sub_1C60E57B0(v153);
          if (!*(_BYTE *)(v44 + 88))
          {
            __p = "cannot invoke macro procedure as function";
            LOWORD(v180) = 259;
            v12 = (uint64_t)v154;
            if ((llvm::MCAsmParser::Error(v157, v90, (uint64_t)&__p, 0, 0) & 1) == 0)
              goto LABEL_160;
            goto LABEL_156;
          }
          v170 = 1283;
          v97 = *(_QWORD *)(v44 + 8);
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)"invoking macro function '";
          __dst.__r_.__value_.__r.__words[2] = v97;
          v169 = *(_QWORD *)(v44 + 16);
          __p = &__dst;
          *((_QWORD *)&v178 + 1) = "' requires arguments in parentheses";
          LOWORD(v180) = 770;
          v12 = (uint64_t)v154;
          if (llvm::MCAsmParser::parseToken((llvm::MCAsmParser *)v157, 17, (llvm::Twine *)&__p)
            || (sub_1C610A054(v157, (uint64_t *)(v44 + 8), v90, 18) & 1) != 0)
          {
LABEL_156:
            LODWORD(__p) = 1;
            *(_QWORD *)&v178 = v95;
            *((_QWORD *)&v178 + 1) = v96;
            v180 = 64;
            v179 = 0;
            *(_BYTE *)(v3 + 147) = 0;
            sub_1C4CD9B2C((uint64_t)v152, *(_QWORD *)(v3 + 48), (unint64_t)&__p);
            if (v180 >= 0x41 && v179)
              MEMORY[0x1CAA32F9C](v179, 0x1000C8000313F17);
            sub_1C60E57B0(v4);
            goto LABEL_160;
          }
          v166[0] = 0;
          v166[1] = 0;
          v167 = 0;
          __p = (char *)&v178 + 8;
          *(_QWORD *)&v178 = 0x400000000;
          if (!**v152)
            goto LABEL_182;
          while (1)
          {
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst.__r_.__value_.__r.__words[2];
            __dst.__r_.__value_.__l.__size_ = 0x800000000;
            v171 = -1;
            v172 = 0;
            LOBYTE(v173) = 0;
            v175 = 0;
            p_p = &__p;
            if ((sub_1C60FEB44(v157, &__dst, 0) & 1) != 0)
            {
              if (!*(_DWORD *)(v157 + 24) && **v152 == 1)
                (*(void (**)(uint64_t))(*(_QWORD *)v157 + 184))(v157);
              sub_1C63EA5EC(v157);
              if (!*(_BYTE *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v157 + 40))(v157) + 107))
                (*(void (**)(uint64_t))(*(_QWORD *)v157 + 224))(v157);
            }
            else
            {
              if (v175)
              {
                if (SHIBYTE(v167) < 0)
                {
                  operator delete(v166[0]);
                  *(_OWORD *)v166 = v173;
                  v167 = v174;
                  HIBYTE(v174) = 0;
                  LOBYTE(v173) = 0;
                  if (!v175)
                  {
LABEL_181:
                    sub_1C51E463C(&__dst.__r_.__value_.__l.__data_);
                    v3 = v157;
LABEL_182:
                    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)"expected ')'";
                    v170 = 259;
                    v98 = llvm::MCAsmParser::parseToken((llvm::MCAsmParser *)v3, 18, (llvm::Twine *)&__dst);
                    if (!v98)
                    {
                      if (v167 >= 0)
                        v99 = v166;
                      else
                        v99 = (void **)v166[0];
                      if (v167 >= 0)
                        v100 = HIBYTE(v167) & 0x7F;
                      else
                        v100 = (size_t)v166[1];
                      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)"<macro-value>";
                      v170 = 259;
                      sub_1C5E1F4D0(v99, v100, (uint64_t)&__dst, (uint64_t)&v181);
                      if ((v182 & 1) != 0)
                        v101 = 0;
                      else
                        v101 = v181;
                      v102 = *(_QWORD *)(v157 + 240);
                      v165 = v101;
                      v103 = sub_1C6175188(v102, &v165, *(_QWORD *)(v157 + 136));
                      *(_DWORD *)(v157 + 272) = v103;
                      v104 = v165;
                      v165 = 0;
                      if (v104)
                      {
                        (*(void (**)(uint64_t))(*(_QWORD *)v104 + 8))(v104);
                        v103 = *(_DWORD *)(v157 + 272);
                      }
                      v105 = *(_QWORD *)(**(_QWORD **)(v157 + 240) + 24 * (v103 - 1));
                      v106 = *(_QWORD *)(v105 + 8);
                      v107 = *(_QWORD *)(v105 + 16) - v106;
                      *(_QWORD *)(v157 + 192) = v106;
                      *(_QWORD *)(v157 + 200) = v107;
                      *(_QWORD *)(v157 + 184) = v106;
                      *(_QWORD *)(v157 + 136) = 0;
                      *(_BYTE *)(v157 + 211) = 0;
                      v108 = *(_DWORD *)(v157 + 400);
                      v109 = v108 + 1;
                      v110 = *(unsigned int *)(v157 + 344);
                      if ((v108 + 1) <= (_DWORD)v110 << 6)
                      {
                        *(_DWORD *)(v157 + 400) = v109;
                      }
                      else
                      {
                        if ((v108 & 0x3F) != 0)
                          *(_QWORD *)(*v151 + 8 * v110 - 8) &= ~(-1 << (v108 & 0x3F));
                        *(_DWORD *)(v157 + 400) = v109;
                        v111 = v108 + 64;
                        if ((_DWORD)v110 != v111 >> 6)
                        {
                          v112 = v111 >> 6;
                          if (v110 > v112)
                          {
                            *(_DWORD *)(v157 + 344) = v112;
                            LODWORD(v110) = v111 >> 6;
                          }
                          else
                          {
                            v113 = v110;
                            v114 = v110;
                            if (v112 > *(_DWORD *)(v157 + 348))
                            {
                              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v151, v150, v112, 8);
                              v113 = *(unsigned int *)(v157 + 344);
                              v114 = *(_DWORD *)(v157 + 344);
                            }
                            if (v112 != v110)
                              bzero((void *)(*v151 + 8 * v113), 8 * (v112 - v110));
                            LODWORD(v110) = v114 + v112 - v110;
                            *(_DWORD *)(v157 + 344) = v110;
                            v109 = *(_DWORD *)(v157 + 400);
                          }
                        }
                        v115 = v109 & 0x3F;
                        if (v115)
                          *(_QWORD *)(*v151 + 8 * v110 - 8) &= ~(-1 << v115);
                      }
                      (*(void (**)(uint64_t))(*(_QWORD *)v157 + 184))(v157);
                    }
                    if (__p != (char *)&v178 + 8)
                      free(__p);
                    if (SHIBYTE(v167) < 0)
                      operator delete(v166[0]);
                    v3 = v157;
                    v4 = v153;
                    v12 = (uint64_t)v154;
                    if (!v98)
                    {
LABEL_160:
                      v69 = 0;
                      goto LABEL_104;
                    }
                    goto LABEL_156;
                  }
                }
                else
                {
                  *(_OWORD *)v166 = v173;
                  v167 = v174;
                  HIBYTE(v174) = 0;
                  LOBYTE(v173) = 0;
                }
                v175 = 0;
                goto LABEL_181;
              }
              sub_1C63EA5EC(v157);
            }
            if (v175)
            {
              if (SHIBYTE(v174) < 0)
                operator delete((void *)v173);
              v175 = 0;
            }
            sub_1C51E463C(&__dst.__r_.__value_.__l.__data_);
            if (!**v152)
              goto LABEL_182;
          }
        }
        v27 = v164;
        v28 = (void **)v162;
        v29 = v163;
        v31 = v164 & 0x7F;
      }
    }
LABEL_63:
    __dst.__r_.__value_.__s.__data_[0] = 0;
    LOBYTE(v169) = 0;
    if (v27 >= 0)
      v46 = &v162;
    else
      v46 = v28;
    if (v27 >= 0)
      v47 = v31;
    else
      v47 = v29;
    v48 = *(unsigned int *)(v3 + 1144);
    if (!(_DWORD)v48)
      goto LABEL_83;
    v49 = 0;
    if (v47)
    {
      v50 = v47;
      v51 = v46;
      do
      {
        v52 = *(unsigned __int8 *)v51;
        v51 = (void **)((char *)v51 + 1);
        v49 = 33 * v49 + v52;
        --v50;
      }
      while (v50);
    }
    v53 = *(_QWORD *)(v3 + 1136);
    v54 = 1;
    v55 = v49;
    while (1)
    {
      v56 = v55 & (v48 - 1);
      v57 = *(_QWORD **)(v53 + 8 * v56);
      if (v57 != (_QWORD *)-8)
      {
        if (!v57)
          goto LABEL_83;
        if (*(_DWORD *)(v53 + 8 * v48 + 8 + 4 * v56) == v49
          && v47 == *v57
          && (!v47 || !memcmp(v46, (char *)v57 + *(unsigned int *)(v3 + 1156), v47)))
        {
          break;
        }
      }
      v55 = v54 + v56;
      ++v54;
    }
    if ((_DWORD)v56 == -1 || (int)v56 == v48)
    {
LABEL_83:
      v58 = *(unsigned int *)(v3 + 480);
      if ((_DWORD)v58)
      {
        v59 = 0;
        if (v47)
        {
          v60 = v47;
          v61 = v46;
          do
          {
            v62 = *(unsigned __int8 *)v61;
            v61 = (void **)((char *)v61 + 1);
            v59 = 33 * v59 + v62;
            --v60;
          }
          while (v60);
        }
        v63 = *(_QWORD *)(v3 + 472);
        v64 = 1;
        v65 = v59;
        while (1)
        {
          v66 = v65 & (v58 - 1);
          v67 = *(_QWORD **)(v63 + 8 * v66);
          if (v67 != (_QWORD *)-8)
          {
            if (!v67)
              goto LABEL_103;
            if (*(_DWORD *)(v63 + 8 * v58 + 8 + 4 * v66) == v59
              && v47 == *v67
              && (!v47 || !memcmp(v46, (char *)v67 + *(unsigned int *)(v3 + 492), v47)))
            {
              break;
            }
          }
          v65 = v64 + v66;
          ++v64;
        }
        if ((_DWORD)v66 != -1 && (int)v66 != v58)
        {
          v68 = *(_QWORD *)(v63 + 8 * (int)v66);
          if (*(_BYTE *)(v68 + 28))
            sub_1C5909D34(&__dst, (const std::string *)(v68 + 32));
        }
      }
    }
    else
    {
      sub_1C610CE6C((uint64_t)&__p, v3, *(_DWORD *)(*(_QWORD *)(v53 + 8 * (int)v56) + 8));
      sub_1C610EC64((uint64_t)&__dst, (__int128 *)&__p);
      if ((_BYTE)v179 && SHIBYTE(v178) < 0)
        operator delete(__p);
    }
LABEL_103:
    v69 = (_BYTE)v169 == 0;
    v4 = v153;
    v12 = (uint64_t)v154;
    if ((_BYTE)v169)
    {
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        p_dst = &__dst;
      else
        p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
      if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = *((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x7F;
      else
        size = __dst.__r_.__value_.__l.__size_;
      __p = "<instantiation>";
      LOWORD(v180) = 259;
      sub_1C5E1F4D0(p_dst, size, (uint64_t)&__p, (uint64_t)&v181);
      if ((v182 & 1) != 0)
        v73 = 0;
      else
        v73 = (void *)v181;
      v74 = *(_QWORD *)(v3 + 240);
      __p = v73;
      v75 = sub_1C6175188(v74, (uint64_t *)&__p, *((_QWORD *)v155 + 1) + *((_QWORD *)v155 + 2));
      *(_DWORD *)(v3 + 272) = v75;
      v76 = __p;
      __p = 0;
      if (v76)
      {
        (*(void (**)(void *))(*(_QWORD *)v76 + 8))(v76);
        v75 = *(_DWORD *)(v3 + 272);
      }
      v77 = *(_QWORD *)(**(_QWORD **)(v3 + 240) + 24 * (v75 - 1));
      v78 = *(_QWORD *)(v77 + 8);
      v79 = *(_QWORD *)(v77 + 16) - v78;
      *(_QWORD *)(v3 + 192) = v78;
      *(_QWORD *)(v3 + 200) = v79;
      *(_QWORD *)(v3 + 184) = v78;
      *(_QWORD *)(v3 + 136) = 0;
      *(_BYTE *)(v3 + 211) = 0;
      v80 = *(_DWORD *)(v3 + 400);
      v81 = v80 + 1;
      v82 = *(unsigned int *)(v3 + 344);
      if ((v80 + 1) <= (_DWORD)v82 << 6)
      {
        *(_DWORD *)(v3 + 400) = v81;
      }
      else
      {
        if ((v80 & 0x3F) != 0)
          *(_QWORD *)(*v151 + 8 * v82 - 8) &= ~(-1 << (v80 & 0x3F));
        *(_DWORD *)(v3 + 400) = v81;
        v83 = v80 + 64;
        if ((_DWORD)v82 != v83 >> 6)
        {
          v84 = v83 >> 6;
          if (v82 > v84)
          {
            *(_DWORD *)(v3 + 344) = v84;
            LODWORD(v82) = v83 >> 6;
          }
          else
          {
            v85 = v82;
            v86 = v82;
            if (v84 > *(_DWORD *)(v3 + 348))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v151, v150, v84, 8);
              v85 = *(unsigned int *)(v3 + 344);
              v86 = *(_DWORD *)(v3 + 344);
            }
            if (v84 != v82)
              bzero((void *)(*v151 + 8 * v85), 8 * (v84 - v82));
            LODWORD(v82) = v86 + v84 - v82;
            *(_DWORD *)(v3 + 344) = v82;
            v81 = *(_DWORD *)(v3 + 400);
          }
        }
        v87 = v81 & 0x3F;
        if (v87)
          *(_QWORD *)(*v151 + 8 * v82 - 8) &= ~(-1 << v87);
      }
      sub_1C60E57B0(v153);
      if ((_BYTE)v169 && SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
    }
LABEL_104:
    if (v164 < 0)
      operator delete(v162);
    v13 = *(_DWORD *)v12;
    v70 = *(_DWORD *)v12 != 2 || v69;
    if (v70 == 1)
      goto LABEL_217;
  }
  v178 = 0uLL;
  v180 = 1;
  v179 = 0;
  if (!llvm::AsmLexer::peekTokens(v4, (uint64_t)&__p, 1, 1) || (_DWORD)__p != 2)
    goto LABEL_20;
  *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v178;
  if (*((_QWORD *)&v178 + 1) == 3)
  {
    v14 = &__dst;
    v15 = "equ";
    v16 = 3;
  }
  else
  {
    v181 = v178;
    if (*((_QWORD *)&v178 + 1) != 7)
      goto LABEL_20;
    v14 = (std::string *)&v181;
    v15 = "textequ";
    v16 = 7;
  }
  if (!llvm::StringRef::compare_insensitive((unsigned __int8 **)v14, (unsigned __int8 *)v15, v16))
  {
    v17 = 0;
    goto LABEL_21;
  }
LABEL_20:
  v17 = 1;
LABEL_21:
  if (v180 >= 0x41 && v179)
    MEMORY[0x1CAA32F9C](v179, 0x1000C8000313F17);
  if ((v17 & 1) != 0)
    goto LABEL_25;
  v13 = *(_DWORD *)v12;
LABEL_217:
  if (v13 == 7)
  {
    do
    {
      if (*(_BYTE *)(*(_QWORD *)(v3 + 232) + 466))
      {
        v116 = *(_QWORD *)(v3 + 224);
        v117 = *(void **)(v12 + 8);
        v118 = *(_QWORD *)(v12 + 16);
        LOWORD(v180) = 261;
        __p = v117;
        *(_QWORD *)&v178 = v118;
        (*(void (**)(uint64_t, void **))(*(_QWORD *)v116 + 136))(v116, &__p);
      }
      v12 = sub_1C60E57B0(v4);
      v13 = *(_DWORD *)v12;
    }
    while (*(_DWORD *)v12 == 7);
  }
  while (1)
  {
    if (v13 != 16)
    {
      if (v13)
        return v12;
      goto LABEL_231;
    }
    sub_1C610C428((uint64_t)&__p, v3, 1);
    v119 = (int)__p;
    if (v180 >= 0x41 && v179)
      MEMORY[0x1CAA32F9C](v179, 0x1000C8000313F17);
    if (v119 != 9)
      break;
    sub_1C60E57B0(v4);
    v12 = sub_1C60E57B0(v4);
    v13 = *(_DWORD *)v12;
  }
  if (*(_DWORD *)v12)
    return v12;
LABEL_231:
  v120 = *(_QWORD *)(**(_QWORD **)(v3 + 240) + 24 * (*(_DWORD *)(v3 + 272) - 1) + 16);
  if (v120)
  {
    v132 = *(_DWORD *)(v3 + 400);
    v133 = v132 - 1;
    v134 = *(unsigned int *)(v3 + 344);
    if ((v132 & 0x3F) != 0)
    {
      v149 = *(_QWORD *)(v3 + 336) + 8 * v134;
      *(_QWORD *)(v149 - 8) &= ~(-1 << (v132 & 0x3F));
    }
    v135 = v134;
    v136 = v3;
    v137 = (uint64_t *)(v3 + 336);
    *(_DWORD *)(v136 + 400) = v133;
    v138 = v132 + 62;
    if ((_DWORD)v134 != v138 >> 6)
    {
      v139 = v138 >> 6;
      if (v134 > v139)
      {
        *(_DWORD *)(v157 + 344) = v139;
        v135 = v138 >> 6;
      }
      else
      {
        v140 = v134;
        if (v139 > *(_DWORD *)(v157 + 348))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v137, v157 + 352, v139, 8);
          v140 = *(unsigned int *)(v157 + 344);
          v135 = *(_DWORD *)(v157 + 344);
        }
        if (v139 != v134)
          bzero((void *)(*v137 + 8 * v140), 8 * (v139 - v134));
        v135 += v139 - v134;
        *(_DWORD *)(v157 + 344) = v135;
        v133 = *(_DWORD *)(v157 + 400);
      }
    }
    v141 = *v137;
    if ((v133 & 0x3F) != 0)
      *(_QWORD *)(v141 + 8 * v135 - 8) &= ~(-1 << (v133 & 0x3F));
    v142 = *(_QWORD *)(v141 + 8 * ((v133 - 1) >> 6)) >> (v133 - 1);
    v143 = *(uint64_t **)(v157 + 240);
    BufferContainingLoc = llvm::SourceMgr::FindBufferContainingLoc(v143, v120);
    *(_DWORD *)(v157 + 272) = BufferContainingLoc;
    v145 = *(_QWORD *)(*v143 + 24 * (BufferContainingLoc - 1));
    v146 = *(_QWORD *)(v145 + 8);
    v147 = *(_QWORD *)(v145 + 16) - v146;
    *(_QWORD *)(v157 + 192) = v146;
    *(_QWORD *)(v157 + 200) = v147;
    *(_QWORD *)(v157 + 184) = v120;
    *(_QWORD *)(v157 + 136) = 0;
    *(_BYTE *)(v157 + 211) = v142 & 1;
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v157 + 184))(v157);
  }
  else
  {
    v121 = *(_DWORD *)(v3 + 400);
    v122 = v121 - 1;
    v123 = *(unsigned int *)(v3 + 344);
    if ((v121 & 0x3F) != 0)
    {
      v148 = *(_QWORD *)(v3 + 336) + 8 * v123;
      *(_QWORD *)(v148 - 8) &= ~(-1 << (v121 & 0x3F));
    }
    v124 = v123;
    v125 = (_QWORD *)(v3 + 336);
    *(_DWORD *)(v3 + 400) = v122;
    v126 = v121 + 62;
    if ((_DWORD)v123 != v126 >> 6)
    {
      v127 = v126 >> 6;
      if (v123 > v127)
      {
        *(_DWORD *)(v3 + 344) = v127;
        v124 = v126 >> 6;
      }
      else
      {
        v128 = v123;
        if (v127 > *(_DWORD *)(v3 + 348))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v3 + 336, v3 + 352, v127, 8);
          v128 = *(unsigned int *)(v3 + 344);
          v124 = *(_DWORD *)(v3 + 344);
        }
        if (v127 != v123)
          bzero((void *)(*v125 + 8 * v128), 8 * (v127 - v123));
        v124 += v127 - v123;
        *(_DWORD *)(v3 + 344) = v124;
        v122 = *(_DWORD *)(v3 + 400);
      }
    }
    v129 = v122 & 0x3F;
    if (v129)
      *(_QWORD *)(*v125 + 8 * v124 - 8) &= ~(-1 << v129);
  }
  return v12;
}

uint64_t sub_1C610EBE4(uint64_t result, unint64_t a2, int a3, char a4)
{
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;

  v6 = result;
  v7 = *(_QWORD **)(result + 240);
  if (!a3)
  {
    result = llvm::SourceMgr::FindBufferContainingLoc(*(uint64_t **)(result + 240), a2);
    a3 = result;
  }
  *(_DWORD *)(v6 + 272) = a3;
  v8 = *(_QWORD *)(*v7 + 24 * (a3 - 1));
  v9 = *(_QWORD *)(v8 + 8);
  v10 = *(_QWORD *)(v8 + 16) - v9;
  *(_QWORD *)(v6 + 192) = v9;
  *(_QWORD *)(v6 + 200) = v10;
  if (a2)
    v11 = a2;
  else
    v11 = v9;
  *(_QWORD *)(v6 + 184) = v11;
  *(_QWORD *)(v6 + 136) = 0;
  *(_BYTE *)(v6 + 211) = a4;
  return result;
}

uint64_t sub_1C610EC64(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;

  if (*((_BYTE *)a2 + 24))
  {
    if (*(_BYTE *)(a1 + 24))
    {
      if (*(char *)(a1 + 23) < 0)
        operator delete(*(void **)a1);
      v4 = *a2;
      *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)a1 = v4;
      *((_BYTE *)a2 + 23) = 0;
      *(_BYTE *)a2 = 0;
    }
    else
    {
      v5 = *a2;
      *(_QWORD *)(a1 + 16) = *((_QWORD *)a2 + 2);
      *(_OWORD *)a1 = v5;
      *((_QWORD *)a2 + 1) = 0;
      *((_QWORD *)a2 + 2) = 0;
      *(_QWORD *)a2 = 0;
      *(_BYTE *)(a1 + 24) = 1;
    }
  }
  else if (*(_BYTE *)(a1 + 24))
  {
    if (*(char *)(a1 + 23) < 0)
      operator delete(*(void **)a1);
    *(_BYTE *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_1C610ED00(llvm::MCAsmParser *a1, uint64_t a2)
{
  int v4;
  uint64_t result;
  const void *v6;
  std::string::size_type v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  unint64_t v12;
  int v13;
  std::string *p_dst;
  size_t size;
  uint64_t v16;
  int v17;
  size_t v18;
  std::string *v19;
  int v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  __n128 v29;
  std::string *v30;
  std::string *v31;
  size_t v32;
  uint64_t v33;
  int v34;
  size_t v35;
  std::string *v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  BOOL v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  std::string *v51;
  char v52;
  void *__p;
  void *__pa;
  int v55;
  int v56;
  uint64_t __val[2];
  std::string __dst;
  uint64_t v59;
  unsigned int v60;

  v4 = **(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1) + 8);
  if ((v4 - 38) < 4)
    return (*(uint64_t (**)(llvm::MCAsmParser *, uint64_t))(*(_QWORD *)a1 + 216))(a1, a2);
  if (v4 == 2)
  {
    __val[0] = 0;
    __val[1] = 0;
    (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1);
    if (((*(uint64_t (**)(llvm::MCAsmParser *, uint64_t *))(*(_QWORD *)a1 + 192))(a1, __val) & 1) != 0)
      return 1;
    v6 = (const void *)__val[0];
    if (!__val[0])
    {
      memset(&__dst, 0, sizeof(__dst));
LABEL_23:
      if (*(char *)(a2 + 23) < 0)
        operator delete(*(void **)a2);
      v52 = 0;
      *(std::string *)a2 = __dst;
      v51 = (std::string *)a2;
      v11 = (char *)__val[0];
      v12 = __val[1];
      while (1)
      {
        sub_1C5E3DEA4(&__dst, v11, (uint64_t (*)(_QWORD))sub_1C5E3C6A8, &v11[v12], (uint64_t)sub_1C5E3C6A8, v12);
        v13 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
        __p = (void *)__dst.__r_.__value_.__r.__words[0];
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          p_dst = &__dst;
        else
          p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          size = *((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x7F;
        else
          size = __dst.__r_.__value_.__l.__size_;
        v16 = *((unsigned int *)a1 + 286);
        if ((_DWORD)v16)
        {
          v55 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
          v17 = 0;
          if (size)
          {
            v18 = size;
            v19 = p_dst;
            do
            {
              v20 = v19->__r_.__value_.__s.__data_[0];
              v19 = (std::string *)((char *)v19 + 1);
              v17 = 33 * v17 + v20;
              --v18;
            }
            while (v18);
          }
          v21 = *((_QWORD *)a1 + 142);
          v22 = 1;
          v23 = v17;
          while (1)
          {
            v24 = v23 & (v16 - 1);
            v25 = *(_QWORD **)(v21 + 8 * v24);
            if (v25 != (_QWORD *)-8)
            {
              if (!v25)
              {
                v26 = v16;
                goto LABEL_45;
              }
              if (*(_DWORD *)(v21 + 8 * v16 + 8 + 4 * v24) == v17
                && size == *v25
                && (!size || !memcmp(p_dst, (char *)v25 + *((unsigned int *)a1 + 289), size)))
              {
                break;
              }
            }
            v23 = v22 + v24;
            ++v22;
          }
          if ((_DWORD)v24 == -1)
            v26 = v16;
          else
            v26 = (int)v24;
LABEL_45:
          v13 = v55;
        }
        else
        {
          v26 = 0;
          v21 = *((_QWORD *)a1 + 142);
        }
        v27 = v21;
        if (v13 < 0)
        {
          operator delete(__p);
          v27 = *((_QWORD *)a1 + 142);
          LODWORD(v16) = *((_DWORD *)a1 + 286);
        }
        v28 = v21 + 8 * v26;
        if (v28 == v27 + 8 * v16)
        {
          sub_1C5E3DEA4(&__dst, (char *)__val[0], (uint64_t (*)(_QWORD))sub_1C5E3C6A8, (char *)(__val[0] + __val[1]), (uint64_t)sub_1C5E3C6A8, __val[1]);
          v56 = SHIBYTE(__dst.__r_.__value_.__r.__words[2]);
          __pa = (void *)__dst.__r_.__value_.__r.__words[0];
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v31 = &__dst;
          else
            v31 = (std::string *)__dst.__r_.__value_.__r.__words[0];
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v32 = *((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x7F;
          else
            v32 = __dst.__r_.__value_.__l.__size_;
          v33 = *((unsigned int *)a1 + 120);
          if ((_DWORD)v33)
          {
            v34 = 0;
            if (v32)
            {
              v35 = v32;
              v36 = v31;
              do
              {
                v37 = v36->__r_.__value_.__s.__data_[0];
                v36 = (std::string *)((char *)v36 + 1);
                v34 = 33 * v34 + v37;
                --v35;
              }
              while (v35);
            }
            v38 = *((_QWORD *)a1 + 59);
            v39 = 1;
            v40 = v34;
            while (1)
            {
              v41 = v40 & (v33 - 1);
              v42 = *(_QWORD **)(v38 + 8 * v41);
              if (v42 != (_QWORD *)-8)
              {
                if (!v42)
                {
                  v43 = v33;
                  goto LABEL_72;
                }
                if (*(_DWORD *)(v38 + 8 * v33 + 8 + 4 * v41) == v34
                  && v32 == *v42
                  && (!v32 || !memcmp(v31, (char *)v42 + *((unsigned int *)a1 + 123), v32)))
                {
                  break;
                }
              }
              v40 = v39 + v41;
              ++v39;
            }
            if ((_DWORD)v41 == -1)
              v43 = v33;
            else
              v43 = (int)v41;
          }
          else
          {
            v43 = 0;
            v38 = *((_QWORD *)a1 + 59);
          }
LABEL_72:
          v44 = v38;
          if (v56 < 0)
          {
            operator delete(__pa);
            v44 = *((_QWORD *)a1 + 59);
            LODWORD(v33) = *((_DWORD *)a1 + 120);
          }
          v45 = v38 + 8 * v43;
          if (v45 == v44 + 8 * v33 || !*(_BYTE *)(*(_QWORD *)v45 + 28))
          {
LABEL_92:
            if ((v52 & 1) != 0)
              return 0;
            v49 = (*(uint64_t (**)(llvm::MCAsmParser *, __n128))(*(_QWORD *)a1 + 40))(a1, v29);
            LODWORD(__dst.__r_.__value_.__l.__data_) = 2;
            *(_OWORD *)&__dst.__r_.__value_.__r.__words[1] = *(_OWORD *)__val;
            v60 = 64;
            v59 = 0;
            v50 = *(_QWORD *)(v49 + 8);
            v49 += 8;
            *(_BYTE *)(v49 + 99) = 0;
            sub_1C4CD9B2C(v49, v50, (unint64_t)&__dst);
            if (v60 >= 0x41 && v59)
              MEMORY[0x1CAA32F9C](v59, 0x1000C8000313F17);
            return 1;
          }
          v30 = v51;
          std::string::operator=(v51, (const std::string *)(*(_QWORD *)v45 + 32));
        }
        else
        {
          v29.n128_f64[0] = sub_1C610CE6C((uint64_t)&__dst, (uint64_t)a1, *(_DWORD *)(*(_QWORD *)v28 + 8));
          if (!(_BYTE)v59)
            goto LABEL_92;
          v30 = v51;
          if (SHIBYTE(v51->__r_.__value_.__r.__words[2]) < 0)
            operator delete(v51->__r_.__value_.__l.__data_);
          *v51 = __dst;
        }
        v46 = HIBYTE(v30->__r_.__value_.__r.__words[2]);
        v47 = v46 < 0;
        if (v46 >= 0)
          v11 = (char *)v30;
        else
          v11 = (char *)v30->__r_.__value_.__r.__words[0];
        v48 = v46 & 0x7F;
        if (v47)
          v12 = v30->__r_.__value_.__l.__size_;
        else
          v12 = v48;
        __val[0] = (uint64_t)v11;
        __val[1] = v12;
        v52 = 1;
      }
    }
    v7 = __val[1];
    if (__val[1] >= 0x7FFFFFFFFFFFFFF8uLL)
      abort();
    if (__val[1] >= 0x17uLL)
    {
      v9 = (__val[1] & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((__val[1] | 7) != 0x17)
        v9 = __val[1] | 7;
      v10 = v9 + 1;
      v8 = operator new(v9 + 1);
      __dst.__r_.__value_.__l.__size_ = v7;
      __dst.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v8;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = __val[1];
      v8 = &__dst;
      if (!__val[1])
        goto LABEL_22;
    }
    memmove(v8, v6, v7);
LABEL_22:
    *((_BYTE *)v8 + v7) = 0;
    goto LABEL_23;
  }
  if (v4 != 36)
    return 1;
  __val[0] = 0;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)"unexpected token";
  LOWORD(v60) = 259;
  if (llvm::MCAsmParser::parseToken(a1, 36, (llvm::Twine *)&__dst)
    || ((*(uint64_t (**)(llvm::MCAsmParser *, uint64_t *))(*(_QWORD *)a1 + 256))(a1, __val) & 1) != 0)
  {
    return 1;
  }
  std::to_string(&__dst, __val[0]);
  if (*(char *)(a2 + 23) < 0)
    operator delete(*(void **)a2);
  result = 0;
  *(std::string *)a2 = __dst;
  return result;
}

unsigned int *sub_1C610F250(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t *v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  unsigned int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  int BufferContainingLoc;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x100000000;
  v6 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2) + 8) + 8);
  v7 = **(_DWORD **)(a2 + 48);
  if (v7 != a3)
  {
    v10 = (uint64_t *)(a2 + 336);
    do
    {
      if (v7)
      {
        sub_1C60E57B0(a2 + 40);
      }
      else
      {
        v11 = *(_QWORD *)(**(_QWORD **)(a2 + 240) + 24 * (*(_DWORD *)(a2 + 272) - 1) + 16);
        if (!v11)
          break;
        v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
        sub_1C610F4C8((unsigned int *)a1, v6, *(_QWORD *)(*(_QWORD *)(v12 + 8) + 8) - v6);
        v13 = *(_DWORD *)(a2 + 400);
        v14 = *(unsigned int *)(a2 + 344);
        if ((v13 & 0x3F) != 0)
        {
          v27 = *(_QWORD *)(a2 + 336) + 8 * v14;
          *(_QWORD *)(v27 - 8) &= ~(-1 << (v13 & 0x3F));
        }
        v15 = v14;
        v16 = v13 - 1;
        *(_DWORD *)(a2 + 400) = v13 - 1;
        v17 = v13 + 62;
        if ((_DWORD)v14 != v17 >> 6)
        {
          v18 = v17 >> 6;
          if (v14 > v18)
          {
            *(_DWORD *)(a2 + 344) = v18;
            v15 = v17 >> 6;
          }
          else
          {
            v19 = v14;
            if (v18 > *(_DWORD *)(a2 + 348))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 336, a2 + 352, v18, 8);
              v19 = *(unsigned int *)(a2 + 344);
              v15 = *(_DWORD *)(a2 + 344);
            }
            if (v18 != v14)
              bzero((void *)(*v10 + 8 * v19), 8 * (v18 - v14));
            v15 += v18 - v14;
            *(_DWORD *)(a2 + 344) = v15;
            v16 = *(_DWORD *)(a2 + 400);
          }
        }
        v20 = *v10;
        if ((v16 & 0x3F) != 0)
          *(_QWORD *)(v20 + 8 * v15 - 8) &= ~(-1 << (v16 & 0x3F));
        v21 = *(_QWORD *)(v20 + 8 * ((v16 - 1) >> 6)) >> (v16 - 1);
        v22 = *(uint64_t **)(a2 + 240);
        BufferContainingLoc = llvm::SourceMgr::FindBufferContainingLoc(v22, v11);
        *(_DWORD *)(a2 + 272) = BufferContainingLoc;
        v24 = *(_QWORD *)(*v22 + 24 * (BufferContainingLoc - 1));
        v25 = *(_QWORD *)(v24 + 8);
        v26 = *(_QWORD *)(v24 + 16) - v25;
        *(_QWORD *)(a2 + 192) = v25;
        *(_QWORD *)(a2 + 200) = v26;
        *(_QWORD *)(a2 + 184) = v11;
        *(_QWORD *)(a2 + 136) = 0;
        *(_BYTE *)(a2 + 211) = v21 & 1;
        sub_1C60E57B0(a2 + 40);
        v6 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2) + 8) + 8);
      }
      v7 = **(_DWORD **)(a2 + 48);
    }
    while (v7 != a3);
  }
  v8 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2) + 8) + 8) - v6;
  return sub_1C610F4C8((unsigned int *)a1, v6, v8);
}

unsigned int *sub_1C610F4C8(unsigned int *result, uint64_t a2, uint64_t a3)
{
  unsigned int *v5;
  uint64_t v6;
  _QWORD *v7;

  v5 = result;
  v6 = result[2];
  if (v6 >= result[3])
  {
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v6 + 1, 16);
    v6 = *(_QWORD *)v5 + 16 * v5[2];
    *(_QWORD *)v6 = a2;
    *(_QWORD *)(v6 + 8) = a3;
    LODWORD(v6) = v5[2];
  }
  else
  {
    v7 = (_QWORD *)(*(_QWORD *)result + 16 * v6);
    *v7 = a2;
    v7[1] = a3;
  }
  v5[2] = v6 + 1;
  return result;
}

uint64_t sub_1C610F540(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  char *v8;
  uint64_t *v9;
  char *v10;
  char *v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  char *v22;
  __int128 v23;
  char *v24;
  int v25;
  _BYTE *i;
  unsigned int v27;
  BOOL v28;
  int v30;
  unsigned int v31;
  BOOL v32;
  int v35;
  int v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  __int128 v40;
  unsigned int v41;
  char *v42;
  void *v43;
  int v44;
  uint64_t v45;
  unint64_t v46;
  __int128 v47;
  unsigned int v48;
  char *v49;
  void *v50;
  uint64_t result;
  uint64_t v52;
  _BYTE *v53;
  unint64_t v54;
  unint64_t v55;
  char *v56;
  const char *v57;
  __int16 v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  char *v66;
  char *v67;
  char *v68;
  uint64_t v69;
  char *v70;
  __int128 v71;
  unint64_t v72;
  void **v73;
  char *v74;
  const char *v75;
  unint64_t v76;
  uint64_t v77;
  void *v78;
  unsigned int v79;
  _QWORD v80[2];
  __int16 v81;
  uint64_t v82;

  v82 = *MEMORY[0x1E0C80C00];
  if (a2 && *((_BYTE *)a2 + 41))
  {
    if (**(_DWORD **)(a1 + 48) != a4)
    {
      sub_1C610F250((uint64_t)&v78, a1, a4);
      v8 = (char *)v78;
      if (v79)
      {
        v9 = (uint64_t *)(a3 + 16);
        v10 = *(char **)(a3 + 8);
        v11 = (char *)v78 + 16 * v79;
        do
        {
          v13 = *(_QWORD *)v8;
          v12 = *((_QWORD *)v8 + 1);
          v14 = *v9;
          if ((unint64_t)v10 >= *v9)
          {
            v15 = *(char **)a3;
            v16 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v10[-*(_QWORD *)a3] >> 3);
            v17 = v16 + 1;
            if (v16 + 1 > 0x666666666666666)
              goto LABEL_112;
            if (0x999999999999999ALL * ((uint64_t)(v14 - (_QWORD)v15) >> 3) > v17)
              v17 = 0x999999999999999ALL * ((uint64_t)(v14 - (_QWORD)v15) >> 3);
            if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v14 - (_QWORD)v15) >> 3) >= 0x333333333333333)
              v17 = 0x666666666666666;
            v77 = a3 + 16;
            if (v17 > 0x666666666666666)
              goto LABEL_113;
            v72 = v17;
            v18 = (char *)operator new(40 * v17);
            v19 = &v18[40 * v16];
            *(_DWORD *)v19 = 3;
            *((_QWORD *)v19 + 1) = v13;
            *((_QWORD *)v19 + 2) = v12;
            *((_DWORD *)v19 + 8) = 64;
            *((_QWORD *)v19 + 3) = 0;
            v20 = v19;
            if (v10 != v15)
            {
              v21 = 0;
              do
              {
                v22 = &v19[v21];
                v23 = *(_OWORD *)&v10[v21 - 40];
                *((_QWORD *)v22 - 3) = *(_QWORD *)&v10[v21 - 24];
                *(_OWORD *)(v22 - 40) = v23;
                *((_DWORD *)v22 - 2) = *(_DWORD *)&v10[v21 - 8];
                *((_QWORD *)v22 - 2) = *(_QWORD *)&v10[v21 - 16];
                *(_DWORD *)&v10[v21 - 8] = 0;
                v21 -= 40;
              }
              while (&v10[v21] != v15);
              v20 = &v19[v21];
            }
            v24 = v19 + 40;
            *(_QWORD *)a3 = v20;
            *(_QWORD *)(a3 + 8) = v19 + 40;
            *(_QWORD *)(a3 + 16) = &v18[40 * v72];
            v75 = v10;
            v76 = v14;
            v73 = (void **)v15;
            v74 = v15;
            sub_1C63E9D68((uint64_t)&v73);
            v10 = v24;
          }
          else
          {
            *(_DWORD *)v10 = 3;
            *((_QWORD *)v10 + 1) = v13;
            *((_QWORD *)v10 + 2) = v12;
            *((_DWORD *)v10 + 8) = 64;
            *((_QWORD *)v10 + 3) = 0;
            v10 += 40;
          }
          *(_QWORD *)(a3 + 8) = v10;
          v8 += 16;
        }
        while (v8 != v11);
        v8 = (char *)v78;
      }
      if (v8 != (char *)v80)
        free(v8);
    }
    return 0;
  }
  v25 = **(_DWORD **)(a1 + 48);
  if (v25 == 38)
  {
    for (i = *(_BYTE **)(a1 + 136); ; ++i)
    {
      v27 = *i;
      if (v27 <= 0x20)
      {
        if (*i)
          v28 = v27 == 10;
        else
          v28 = 1;
        if (v28 || v27 == 13)
          break;
      }
      else if (v27 == 33)
      {
        ++i;
      }
      else if (v27 == 62)
      {
        v52 = *(_QWORD *)(a1 + 136) + 1;
        sub_1C610EBE4(a1, (unint64_t)(i + 1), *(_DWORD *)(a1 + 272), (*(_QWORD *)(*(_QWORD *)(a1 + 336) + 8 * ((*(_DWORD *)(a1 + 400) - 1) >> 6)) >> (*(_BYTE *)(a1 + 400) - 1)) & 1);
        (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
        v53 = &i[-v52];
        v54 = *(_QWORD *)(a3 + 16);
        v55 = *(_QWORD *)(a3 + 8);
        if (v55 >= v54)
        {
          v62 = *(char **)a3;
          v63 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v55 - *(_QWORD *)a3) >> 3);
          v64 = v63 + 1;
          if (v63 + 1 > 0x666666666666666)
LABEL_112:
            abort();
          if (0x999999999999999ALL * ((uint64_t)(v54 - (_QWORD)v62) >> 3) > v64)
            v64 = 0x999999999999999ALL * ((uint64_t)(v54 - (_QWORD)v62) >> 3);
          if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v54 - (_QWORD)v62) >> 3) >= 0x333333333333333)
            v65 = 0x666666666666666;
          else
            v65 = v64;
          v77 = a3 + 16;
          if (v65 > 0x666666666666666)
LABEL_113:
            sub_1C4764EE4();
          v66 = (char *)operator new(40 * v65);
          v67 = &v66[40 * v63];
          *(_DWORD *)v67 = 3;
          *((_QWORD *)v67 + 1) = v52;
          *((_QWORD *)v67 + 2) = v53;
          *((_DWORD *)v67 + 8) = 64;
          *((_QWORD *)v67 + 3) = 0;
          v68 = v67;
          if ((char *)v55 != v62)
          {
            v69 = 0;
            do
            {
              v70 = &v67[v69];
              v71 = *(_OWORD *)(v55 + v69 - 40);
              *((_QWORD *)v70 - 3) = *(_QWORD *)(v55 + v69 - 24);
              *(_OWORD *)(v70 - 40) = v71;
              *((_DWORD *)v70 - 2) = *(_DWORD *)(v55 + v69 - 8);
              *((_QWORD *)v70 - 2) = *(_QWORD *)(v55 + v69 - 16);
              *(_DWORD *)(v55 + v69 - 8) = 0;
              v69 -= 40;
            }
            while ((char *)(v55 + v69) != v62);
            v68 = &v67[v69];
          }
          v56 = v67 + 40;
          *(_QWORD *)a3 = v68;
          *(_QWORD *)(a3 + 8) = v67 + 40;
          *(_QWORD *)(a3 + 16) = &v66[40 * v65];
          v75 = (const char *)v55;
          v76 = v54;
          v73 = (void **)v62;
          v74 = v62;
          sub_1C63E9D68((uint64_t)&v73);
        }
        else
        {
          *(_DWORD *)v55 = 3;
          *(_QWORD *)(v55 + 8) = v52;
          *(_QWORD *)(v55 + 16) = v53;
          *(_DWORD *)(v55 + 32) = 64;
          v56 = (char *)(v55 + 40);
          *(_QWORD *)(v55 + 24) = 0;
        }
        result = 0;
        *(_QWORD *)(a3 + 8) = v56;
        return result;
      }
    }
  }
  v30 = 0;
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a1 + 1060);
  while (1)
  {
    if (v25 == 27 || !v25)
    {
      v57 = "unexpected token";
      goto LABEL_96;
    }
    if (v30)
    {
      if (a4 != 18 && v25 == a4)
      {
        v57 = "unbalanced parentheses in argument";
LABEL_96:
        v73 = (void **)v57;
        v58 = 259;
LABEL_97:
        LOWORD(v77) = v58;
        v59 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
        llvm::MCAsmParser::Error(a1, *(_QWORD *)(v59 + 96), (uint64_t)&v73, 0, 0);
        result = 1;
        goto LABEL_98;
      }
      goto LABEL_58;
    }
    if (v25 == 25)
      goto LABEL_83;
    if (v25 == 11)
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
    if (*(_BYTE *)(a1 + 1060))
      break;
    v31 = **(_DWORD **)(a1 + 48);
    v32 = v31 > 0x2C || ((1 << v31) & 0x1FCFF980F000) == 0;
    if (v32 || v31 == a4)
      break;
    v45 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8);
    v46 = *(_QWORD *)(a3 + 8);
    if (v46 >= *(_QWORD *)(a3 + 16))
    {
      v49 = sub_1C60E87E0((char **)a3, v45);
    }
    else
    {
      v47 = *(_OWORD *)v45;
      *(_QWORD *)(v46 + 16) = *(_QWORD *)(v45 + 16);
      *(_OWORD *)v46 = v47;
      v48 = *(_DWORD *)(v45 + 32);
      *(_DWORD *)(v46 + 32) = v48;
      if (v48 > 0x40)
      {
        v50 = (void *)operator new[]();
        *(_QWORD *)(v46 + 24) = v50;
        memcpy(v50, *(const void **)(v45 + 24), (((unint64_t)*(unsigned int *)(v46 + 32) + 63) >> 3) & 0x3FFFFFF8);
      }
      else
      {
        *(_QWORD *)(v46 + 24) = *(_QWORD *)(v45 + 24);
      }
      v49 = (char *)(v46 + 40);
    }
    *(_QWORD *)(a3 + 8) = v49;
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
    v30 = 0;
    v44 = 0;
    v25 = **(_DWORD **)(a1 + 48);
    if (v25 == 11)
    {
LABEL_74:
      (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
      v25 = **(_DWORD **)(a1 + 48);
      v30 = v44;
    }
  }
  if (v25 != 11)
  {
    v25 = **(_DWORD **)(a1 + 48);
    if (v25 != a4)
    {
LABEL_58:
      v35 = v25 == 18 && v30 != 0;
      v36 = v35 << 31 >> 31;
      if (v25 == 17)
        v37 = 1;
      else
        v37 = v36;
      v38 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8);
      v39 = *(_QWORD *)(a3 + 8);
      if (v39 >= *(_QWORD *)(a3 + 16))
      {
        v42 = sub_1C60E87E0((char **)a3, v38);
      }
      else
      {
        v40 = *(_OWORD *)v38;
        *(_QWORD *)(v39 + 16) = *(_QWORD *)(v38 + 16);
        *(_OWORD *)v39 = v40;
        v41 = *(_DWORD *)(v38 + 32);
        *(_DWORD *)(v39 + 32) = v41;
        if (v41 > 0x40)
        {
          v43 = (void *)operator new[]();
          *(_QWORD *)(v39 + 24) = v43;
          memcpy(v43, *(const void **)(v38 + 24), (((unint64_t)*(unsigned int *)(v39 + 32) + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          *(_QWORD *)(v39 + 24) = *(_QWORD *)(v38 + 24);
        }
        v42 = (char *)(v39 + 40);
      }
      v44 = v37 + v30;
      *(_QWORD *)(a3 + 8) = v42;
      goto LABEL_74;
    }
  }
LABEL_83:
  result = 0;
  if (!a2 || *(_QWORD *)a3 != *(_QWORD *)(a3 + 8))
    goto LABEL_98;
  if (*((_BYTE *)a2 + 40))
  {
    v81 = 1283;
    v60 = *a2;
    v61 = a2[1];
    v78 = "missing value for required parameter '";
    v80[0] = v60;
    v80[1] = v61;
    v73 = &v78;
    v75 = "'";
    v58 = 770;
    goto LABEL_97;
  }
  if (a2 + 2 != (uint64_t *)a3)
    sub_1C60E898C(a3, a2[2], a2[3], 0xCCCCCCCCCCCCCCCDLL * ((a2[3] - a2[2]) >> 3));
  result = 0;
LABEL_98:
  *(_BYTE *)(a1 + 144) = 1;
  return result;
}

void **sub_1C610FC98(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  __int128 v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_DWORD *)(a2 + 8);
  v3 = *(_QWORD *)a2 + 96 * v2;
  v4 = *(_OWORD *)(v3 - 80);
  *(_OWORD *)a1 = *(_OWORD *)(v3 - 96);
  *(_OWORD *)(a1 + 16) = v4;
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(v3 - 64);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(v3 - 56);
  *(_QWORD *)(v3 - 56) = 0;
  *(_QWORD *)(v3 - 48) = 0;
  v5 = *(_QWORD *)(v3 - 32);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(v3 - 40);
  *(_QWORD *)(a1 + 64) = v5;
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(v3 - 24);
  --v2;
  *(_QWORD *)(v3 - 40) = 0;
  *(_QWORD *)(v3 - 32) = 0;
  *(_QWORD *)(v3 - 24) = 0;
  *(_DWORD *)(v3 - 16) = 0;
  *(_DWORD *)(a2 + 8) = v2;
  v6 = *(_QWORD *)a2 + 96 * v2;
  sub_1C61DF2A0(v6 + 64);
  return sub_1C60FE9CC((void **)(v6 + 40));
}

unsigned int *sub_1C610FD14(uint64_t a1, char *a2, unint64_t a3, int a4, unsigned int a5)
{
  unint64_t v8;
  char *v9;
  _QWORD *v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  uint64_t v18;
  void ***v19;
  char *v20;
  unsigned int *v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int v27;
  unint64_t v29;
  unsigned __int8 *v30;
  void *v31;
  void *__p[2];
  char v33;

  if (a3)
  {
    v29 = 0x8E38E38E38E38E39 * ((uint64_t)(*(_QWORD *)(a1 + 48) - *(_QWORD *)(a1 + 40)) >> 4);
    sub_1C5E3DEA4(__p, a2, (uint64_t (*)(_QWORD))sub_1C5E3C6A8, &a2[a3], (uint64_t)sub_1C5E3C6A8, a3);
    v30 = v33 >= 0 ? (unsigned __int8 *)__p : (unsigned __int8 *)__p[0];
    v31 = v33 >= 0 ? (void *)(v33 & 0x7F) : __p[1];
    (*sub_1C6241FF4(a1 + 64, v30, (size_t)v31))[1] = v29;
    if (v33 < 0)
      operator delete(__p[0]);
  }
  v9 = *(char **)(a1 + 48);
  v8 = *(_QWORD *)(a1 + 56);
  if ((unint64_t)v9 < v8)
  {
    *(_QWORD *)v9 = 0;
    *((_QWORD *)v9 + 1) = 0;
    sub_1C6111028((uint64_t)(v9 + 16), a4);
    v10 = v9 + 144;
    goto LABEL_20;
  }
  v11 = *(char **)(a1 + 40);
  v12 = 0x8E38E38E38E38E39 * ((v9 - v11) >> 4) + 1;
  if (v12 > 0x1C71C71C71C71C7)
    abort();
  v13 = 0x8E38E38E38E38E39 * ((uint64_t)(v8 - (_QWORD)v11) >> 4);
  if (2 * v13 > v12)
    v12 = 2 * v13;
  if (v13 >= 0xE38E38E38E38E3)
    v14 = 0x1C71C71C71C71C7;
  else
    v14 = v12;
  if (v14)
  {
    if (v14 > 0x1C71C71C71C71C7)
      sub_1C4764EE4();
    v15 = (char *)operator new(144 * v14);
  }
  else
  {
    v15 = 0;
  }
  v16 = &v15[16 * ((v9 - v11) >> 4)];
  v17 = &v15[144 * v14];
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 1) = 0;
  sub_1C6111028((uint64_t)(v16 + 16), a4);
  v10 = v16 + 144;
  if (v9 == v11)
  {
    *(_QWORD *)(a1 + 40) = v16;
    *(_QWORD *)(a1 + 48) = v10;
    *(_QWORD *)(a1 + 56) = v17;
    if (v9)
LABEL_19:
      operator delete(v9);
  }
  else
  {
    do
    {
      *((_OWORD *)v16 - 9) = *((_OWORD *)v9 - 9);
      v18 = (uint64_t)(v16 - 128);
      v16 -= 144;
      sub_1C61104FC(v18, (uint64_t **)v9 - 16);
      v9 -= 144;
    }
    while (v9 != v11);
    v9 = *(char **)(a1 + 40);
    v19 = *(void ****)(a1 + 48);
    *(_QWORD *)(a1 + 40) = v16;
    *(_QWORD *)(a1 + 48) = v10;
    *(_QWORD *)(a1 + 56) = v17;
    if (v19 != (void ***)v9)
    {
      do
      {
        v20 = (char *)(v19 - 18);
        sub_1C60FEA30(v19 - 16);
        v19 = (void ***)v20;
      }
      while (v20 != v9);
    }
    if (v9)
      goto LABEL_19;
  }
LABEL_20:
  v21 = (unsigned int *)(a1 + 28);
  v22 = *(unsigned int *)(a1 + 28);
  *(_QWORD *)(a1 + 48) = v10;
  LODWORD(v23) = *(_DWORD *)(a1 + 20);
  if (v23 >= a5)
    v23 = a5;
  else
    v23 = v23;
  v24 = (v22 + v23 - 1) / v23 * v23;
  *((_DWORD *)v10 - 36) = v24;
  v25 = (unsigned int *)(v10 - 18);
  if (!*(_BYTE *)(a1 + 16))
  {
    if (*v21 >= v24)
      v26 = (unsigned int *)(a1 + 28);
    else
      v26 = v25;
    *v21 = *v26;
  }
  v27 = *(_DWORD *)(a1 + 24);
  if (v27 <= a5)
    v27 = a5;
  *(_DWORD *)(a1 + 24) = v27;
  return v25;
}

uint64_t sub_1C610FF8C(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  void ***v10;
  void **v11;
  void ***v12;
  void *v13;
  void ***v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  void ***v19;
  uint64_t v20;
  int *v21;
  uint64_t v22;
  int ***v23;
  void ***v24;
  uint64_t v25;
  uint64_t v26;
  int *v27;
  int *v28;
  void ***v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  int v35;

  v4 = *a2;
  v5 = a2[1];
  *(_DWORD *)(a1 + 32) = *((_DWORD *)a2 + 8);
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  if ((__int128 *)a1 != a2)
  {
    v7 = *((_QWORD *)a2 + 5);
    v6 = *((_QWORD *)a2 + 6);
    v8 = 0x8E38E38E38E38E39 * ((v6 - v7) >> 4);
    v9 = *(_QWORD *)(a1 + 56);
    v10 = *(void ****)(a1 + 40);
    if (0x8E38E38E38E38E39 * ((v9 - (uint64_t)v10) >> 4) < v8)
    {
      if (v10)
      {
        v11 = (void **)(a1 + 40);
        v12 = *(void ****)(a1 + 48);
        v13 = *(void **)(a1 + 40);
        if (v12 != v10)
        {
          do
          {
            v14 = v12 - 18;
            sub_1C60FEA30(v12 - 16);
            v12 = v14;
          }
          while (v14 != v10);
          v13 = *v11;
        }
        *(_QWORD *)(a1 + 48) = v10;
        operator delete(v13);
        v9 = 0;
        *v11 = 0;
        *(_QWORD *)(a1 + 48) = 0;
        *(_QWORD *)(a1 + 56) = 0;
      }
      if (v8 > 0x1C71C71C71C71C7)
        goto LABEL_35;
      v15 = 0x8E38E38E38E38E39 * (v9 >> 4);
      v16 = 2 * v15;
      if (2 * v15 <= v8)
        v16 = 0x8E38E38E38E38E39 * ((v6 - v7) >> 4);
      v17 = v15 >= 0xE38E38E38E38E3 ? 0x1C71C71C71C71C7 : v16;
      if (v17 > 0x1C71C71C71C71C7)
LABEL_35:
        abort();
      v18 = 9 * v17;
      v10 = (void ***)operator new(144 * v17);
      *(_QWORD *)(a1 + 40) = v10;
      *(_QWORD *)(a1 + 48) = v10;
      *(_QWORD *)(a1 + 56) = &v10[2 * v18];
      while (v7 != v6)
      {
        *(_OWORD *)v10 = *(_OWORD *)v7;
        sub_1C611076C((uint64_t)(v10 + 2), (int *)(v7 + 16));
        v7 += 144;
        v10 += 18;
      }
LABEL_33:
      *(_QWORD *)(a1 + 48) = v10;
      goto LABEL_34;
    }
    v19 = *(void ****)(a1 + 48);
    if (0x8E38E38E38E38E39 * (((char *)v19 - (char *)v10) >> 4) >= v8)
    {
      if (v7 != v6)
      {
        v27 = (int *)(v10 + 2);
        do
        {
          *((_OWORD *)v27 - 1) = *(_OWORD *)v7;
          v28 = sub_1C61109F8(v27, (int ***)(v7 + 16));
          v7 += 144;
          v10 += 18;
          v27 = v28 + 36;
        }
        while (v7 != v6);
        v19 = *(void ****)(a1 + 48);
      }
      if (v19 != v10)
      {
        do
        {
          v29 = v19 - 18;
          sub_1C60FEA30(v19 - 16);
          v19 = v29;
        }
        while (v29 != v10);
      }
      goto LABEL_33;
    }
    v20 = v7 + 16 * (((char *)v19 - (char *)v10) >> 4);
    if (v19 != v10)
    {
      v21 = (int *)(v10 + 2);
      v22 = 16 * (((char *)v19 - (char *)v10) >> 4);
      v23 = (int ***)(v7 + 16);
      do
      {
        *((_OWORD *)v21 - 1) = *((_OWORD *)v23 - 1);
        v21 = sub_1C61109F8(v21, v23) + 36;
        v23 += 18;
        v22 -= 144;
      }
      while (v22);
      v10 = *(void ****)(a1 + 48);
    }
    v24 = v10;
    if (v20 != v6)
    {
      v25 = (uint64_t)(v10 + 2);
      v24 = v10;
      do
      {
        *(_OWORD *)(v25 - 16) = *(_OWORD *)v20;
        v26 = sub_1C611076C(v25, (int *)(v20 + 16));
        v20 += 144;
        v24 += 18;
        v25 = v26 + 144;
      }
      while (v20 != v6);
    }
    *(_QWORD *)(a1 + 48) = v24;
  }
LABEL_34:
  sub_1C61108DC(&v33, (uint64_t)(a2 + 4));
  v30 = *(_QWORD *)(a1 + 64);
  *(_QWORD *)(a1 + 64) = v33;
  v33 = v30;
  v31 = *(_QWORD *)(a1 + 72);
  *(_QWORD *)(a1 + 72) = v34;
  v34 = v31;
  LODWORD(v30) = *(_DWORD *)(a1 + 80);
  *(_DWORD *)(a1 + 80) = v35;
  v35 = v30;
  sub_1C61DF2A0((uint64_t)&v33);
  return a1;
}

void sub_1C6110250(void ***a1)
{
  unint64_t v2;
  void **v3;
  void **v4;
  void **v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  char *v10;
  char *v11;
  void **v12;
  char *v13;
  __int128 v14;
  void **v15;
  void **v16;
  void ***v17;
  void ***v18;
  void ***v19;
  void *v20;

  v3 = a1[1];
  v2 = (unint64_t)a1[2];
  if ((unint64_t)v3 < v2)
  {
    v4 = v3 + 3;
    *v3 = 0;
    v3[1] = 0;
    v3[2] = 0;
    goto LABEL_25;
  }
  v5 = *a1;
  v6 = 0xAAAAAAAAAAAAAAABLL * (v3 - *a1);
  v7 = v6 + 1;
  if (v6 + 1 > 0xAAAAAAAAAAAAAAALL)
    abort();
  v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2 - (_QWORD)v5) >> 3);
  if (2 * v8 > v7)
    v7 = 2 * v8;
  if (v8 >= 0x555555555555555)
    v9 = 0xAAAAAAAAAAAAAAALL;
  else
    v9 = v7;
  if (v9)
  {
    if (v9 > 0xAAAAAAAAAAAAAAALL)
      sub_1C4764EE4();
    v10 = (char *)operator new(24 * v9);
  }
  else
  {
    v10 = 0;
  }
  v11 = &v10[24 * v6];
  v12 = (void **)&v10[24 * v9];
  v4 = (void **)(v11 + 24);
  *(_QWORD *)v11 = 0;
  *((_QWORD *)v11 + 1) = 0;
  *((_QWORD *)v11 + 2) = 0;
  if (v3 == v5)
  {
    *a1 = (void **)v11;
    a1[1] = v4;
    a1[2] = v12;
    if (!v3)
      goto LABEL_25;
    goto LABEL_24;
  }
  do
  {
    v13 = v11;
    *((_QWORD *)v11 - 2) = 0;
    *((_QWORD *)v11 - 1) = 0;
    v14 = *(_OWORD *)(v3 - 3);
    v3 -= 3;
    *(_OWORD *)(v11 - 24) = v14;
    v11 -= 24;
    *((_QWORD *)v13 - 1) = v3[2];
    *v3 = 0;
    v3[1] = 0;
    v3[2] = 0;
  }
  while (v3 != v5);
  v3 = *a1;
  v15 = a1[1];
  *a1 = (void **)v11;
  a1[1] = v4;
  a1[2] = v12;
  if (v15 != v3)
  {
    v16 = v15;
    do
    {
      v18 = (void ***)*(v16 - 3);
      v16 -= 3;
      v17 = v18;
      if (v18)
      {
        v19 = (void ***)*(v15 - 2);
        v20 = v17;
        if (v19 != v17)
        {
          do
            v19 = sub_1C60FEA30(v19 - 16);
          while (v19 != v17);
          v20 = *v16;
        }
        *(v15 - 2) = v17;
        operator delete(v20);
      }
      v15 = v16;
    }
    while (v16 != v3);
  }
  if (v3)
LABEL_24:
    operator delete(v3);
LABEL_25:
  a1[1] = v4;
}

void sub_1C61103D8(uint64_t ***a1, int *a2)
{
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  uint64_t **v12;
  uint64_t v13;
  uint64_t **v14;
  uint64_t **v15;
  void ***v16;

  v4 = (unint64_t)a1[1];
  v5 = (unint64_t)a1[2];
  if (v4 >= v5)
  {
    v7 = (uint64_t)(v4 - (_QWORD)*a1) >> 7;
    if ((unint64_t)(v7 + 1) >> 57)
      abort();
    v8 = v5 - (_QWORD)*a1;
    v9 = v8 >> 6;
    if (v8 >> 6 <= (unint64_t)(v7 + 1))
      v9 = v7 + 1;
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFF80)
      v10 = 0x1FFFFFFFFFFFFFFLL;
    else
      v10 = v9;
    if (v10)
    {
      if (v10 >> 57)
        sub_1C4764EE4();
      v11 = (char *)operator new(v10 << 7);
    }
    else
    {
      v11 = 0;
    }
    v12 = (uint64_t **)&v11[128 * v10];
    v13 = sub_1C611076C((uint64_t)&v11[128 * v7], a2);
    v6 = v13 + 128;
    v15 = *a1;
    v14 = a1[1];
    if (v14 == *a1)
    {
      *a1 = (uint64_t **)v13;
      a1[1] = (uint64_t **)v6;
      a1[2] = v12;
    }
    else
    {
      do
      {
        v14 -= 16;
        v13 = sub_1C61104FC(v13 - 128, v14);
      }
      while (v14 != v15);
      v14 = *a1;
      v16 = (void ***)a1[1];
      *a1 = (uint64_t **)v13;
      a1[1] = (uint64_t **)v6;
      a1[2] = v12;
      while (v16 != (void ***)v14)
      {
        v16 -= 16;
        sub_1C60FEA30(v16);
      }
    }
    if (v14)
      operator delete(v14);
  }
  else
  {
    v6 = sub_1C611076C(v4, a2) + 128;
  }
  a1[1] = (uint64_t **)v6;
}

uint64_t sub_1C61104FC(uint64_t a1, uint64_t **a2)
{
  int v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t *v8;
  uint64_t *v9;
  int64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *(_DWORD *)a2;
  *(_DWORD *)a1 = *(_DWORD *)a2;
  switch(v4)
  {
    case 2:
      sub_1C611066C((_QWORD *)(a1 + 8), a2 + 1);
      v6 = *((_OWORD *)a2 + 2);
      v7 = *((_OWORD *)a2 + 3);
      *(_DWORD *)(a1 + 64) = *((_DWORD *)a2 + 16);
      *(_OWORD *)(a1 + 32) = v6;
      *(_OWORD *)(a1 + 48) = v7;
      *(_QWORD *)(a1 + 80) = 0;
      *(_QWORD *)(a1 + 88) = 0;
      *(_QWORD *)(a1 + 72) = 0;
      v8 = a2[9];
      v9 = a2[10];
      v10 = (char *)v9 - (char *)v8;
      if (v9 != v8)
      {
        v11 = 0x8E38E38E38E38E39 * (v10 >> 4);
        if (v11 >= 0x1C71C71C71C71C8)
          abort();
        v12 = (char *)operator new(v10);
        v13 = 0;
        *(_QWORD *)(a1 + 72) = v12;
        *(_QWORD *)(a1 + 80) = v12;
        *(_QWORD *)(a1 + 88) = &v12[144 * v11];
        do
        {
          *(_OWORD *)&v12[v13 * 8] = *(_OWORD *)&v8[v13];
          sub_1C611076C((uint64_t)&v12[v13 * 8 + 16], (int *)&v8[v13 + 2]);
          v13 += 18;
        }
        while (&v8[v13] != v9);
        *(_QWORD *)(a1 + 80) = &v12[v13 * 8];
      }
      sub_1C61108DC((_QWORD *)(a1 + 96), (uint64_t)(a2 + 12));
      break;
    case 1:
      *(_QWORD *)(a1 + 8) = a1 + 24;
      v14 = a1 + 8;
      *(_QWORD *)(a1 + 16) = 0x100000000;
      if (*((_DWORD *)a2 + 4))
        sub_1C56AA42C(v14, (uint64_t)(a2 + 1));
      break;
    case 0:
      *(_QWORD *)(a1 + 8) = a1 + 24;
      v5 = a1 + 8;
      *(_QWORD *)(a1 + 16) = 0x100000000;
      if (*((_DWORD *)a2 + 4))
        sub_1C49F5C14(v5, (uint64_t)(a2 + 1));
      break;
  }
  return a1;
}

_QWORD *sub_1C611066C(_QWORD *a1, uint64_t **a2)
{
  uint64_t *v3;
  uint64_t *v4;
  int64_t v5;
  unint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  v3 = *a2;
  v4 = a2[1];
  v5 = (char *)v4 - (char *)*a2;
  if (v4 != *a2)
  {
    v6 = 0xAAAAAAAAAAAAAAABLL * (v5 >> 3);
    if (v6 >= 0xAAAAAAAAAAAAAABLL)
LABEL_12:
      abort();
    v7 = operator new(v5);
    *a1 = v7;
    a1[1] = v7;
    a1[2] = &v7[3 * v6];
    do
    {
      *v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
      v8 = *v3;
      v9 = v3[1];
      v10 = v9 - *v3;
      if (v9 != *v3)
      {
        if (v10 < 0)
          goto LABEL_12;
        v11 = v10 >> 7;
        v12 = (char *)operator new(v10);
        v13 = 0;
        *v7 = v12;
        v7[1] = v12;
        v7[2] = &v12[128 * v11];
        do
        {
          sub_1C611076C((uint64_t)&v12[v13], (int *)(v8 + v13));
          v13 += 128;
        }
        while (v8 + v13 != v9);
        v7[1] = &v12[v13];
      }
      v3 += 3;
      v7 += 3;
    }
    while (v3 != v4);
    a1[1] = v7;
  }
  return a1;
}

uint64_t sub_1C611076C(uint64_t a1, int *a2)
{
  int v4;
  uint64_t v5;
  __int128 v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;

  v4 = *a2;
  *(_DWORD *)a1 = *a2;
  switch(v4)
  {
    case 2:
      sub_1C611066C(a1 + 8, a2 + 2);
      v6 = *((_OWORD *)a2 + 2);
      v7 = *((_OWORD *)a2 + 3);
      *(_DWORD *)(a1 + 64) = a2[16];
      *(_OWORD *)(a1 + 32) = v6;
      *(_OWORD *)(a1 + 48) = v7;
      *(_QWORD *)(a1 + 80) = 0;
      *(_QWORD *)(a1 + 88) = 0;
      *(_QWORD *)(a1 + 72) = 0;
      v8 = *((_QWORD *)a2 + 9);
      v9 = *((_QWORD *)a2 + 10);
      v10 = v9 - v8;
      if (v9 != v8)
      {
        v11 = 0x8E38E38E38E38E39 * (v10 >> 4);
        if (v11 >= 0x1C71C71C71C71C8)
          abort();
        v12 = (char *)operator new(v10);
        v13 = 0;
        *(_QWORD *)(a1 + 72) = v12;
        *(_QWORD *)(a1 + 80) = v12;
        *(_QWORD *)(a1 + 88) = &v12[144 * v11];
        do
        {
          *(_OWORD *)&v12[v13] = *(_OWORD *)(v8 + v13);
          sub_1C611076C(&v12[v13 + 16], v8 + v13 + 16);
          v13 += 144;
        }
        while (v8 + v13 != v9);
        *(_QWORD *)(a1 + 80) = &v12[v13];
      }
      sub_1C61108DC((_QWORD *)(a1 + 96), (uint64_t)(a2 + 24));
      break;
    case 1:
      *(_QWORD *)(a1 + 8) = a1 + 24;
      v14 = a1 + 8;
      *(_QWORD *)(a1 + 16) = 0x100000000;
      if (a2[4])
        sub_1C56AA42C(v14, (uint64_t)(a2 + 2));
      break;
    case 0:
      *(_QWORD *)(a1 + 8) = a1 + 24;
      v5 = a1 + 8;
      *(_QWORD *)(a1 + 16) = 0x100000000;
      if (a2[4])
        sub_1C49F5C14(v5, (uint64_t)(a2 + 2));
      break;
  }
  return a1;
}

_QWORD *sub_1C61108DC(_QWORD *a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  char *v8;
  _QWORD *v9;
  uint64_t v10;
  size_t *v11;
  BOOL v12;
  size_t v13;
  _QWORD *v14;
  size_t *v15;
  char *v16;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0x1000000000;
  if (*(_DWORD *)(a2 + 12))
  {
    v4 = *(_DWORD *)(a2 + 8);
    if (v4)
      v5 = v4;
    else
      v5 = 16;
    *((_DWORD *)a1 + 4) = 0;
    v6 = (char *)sub_1C5074000((v5 + 1), 0xCuLL);
    v7 = 0;
    v8 = &v6[8 * v5];
    *(_QWORD *)v8 = 2;
    v9 = v8 + 8;
    *a1 = v6;
    *((_DWORD *)a1 + 2) = v5;
    v10 = *(_QWORD *)a2 + 8 * v5 + 8;
    *(_QWORD *)((char *)a1 + 12) = *(_QWORD *)(a2 + 12);
    do
    {
      v11 = *(size_t **)(*(_QWORD *)a2 + 8 * v7);
      if (v11)
        v12 = v11 + 1 == 0;
      else
        v12 = 1;
      if (v12)
      {
        *(_QWORD *)(*a1 + 8 * v7) = v11;
      }
      else
      {
        v13 = *v11;
        v14 = operator new(*v11 + 17, (std::align_val_t)8uLL);
        v15 = v14;
        v16 = (char *)(v14 + 2);
        if (v13)
          memcpy(v14 + 2, v11 + 2, v13);
        v16[v13] = 0;
        *v15 = v13;
        v15[1] = v11[1];
        *(_QWORD *)(*a1 + 8 * v7) = v15;
        *((_DWORD *)v9 + v7) = *(_DWORD *)(v10 + 4 * v7);
      }
      ++v7;
    }
    while (v5 != v7);
  }
  return a1;
}

int *sub_1C61109F8(int *a1, int ***a2)
{
  int v4;
  int v5;
  int *v6;

  v4 = *a1;
  v5 = *(_DWORD *)a2;
  if (*a1 == *(_DWORD *)a2)
  {
    v5 = *a1;
    goto LABEL_11;
  }
  if (v4 == 2)
  {
    sub_1C61DF2A0((uint64_t)(a1 + 24));
    sub_1C60FE9CC((void **)a1 + 9);
    sub_1C60FEAA8((void ***)a1 + 1);
  }
  else if (v4 == 1)
  {
    sub_1C618E390((char **)a1 + 1);
  }
  else
  {
    if (v4)
      goto LABEL_11;
    v6 = (int *)*((_QWORD *)a1 + 1);
    if (v6 != a1 + 6)
      free(v6);
  }
  v5 = *(_DWORD *)a2;
LABEL_11:
  *a1 = v5;
  switch(v5)
  {
    case 2:
      if (a1 != (int *)a2)
        sub_1C6110AEC((uint64_t)(a1 + 2), a2[1], a2[2]);
      sub_1C610FF8C(a1 + 8, a2 + 4);
      break;
    case 1:
      sub_1C56AA42C((uint64_t)(a1 + 2), (uint64_t)(a2 + 1));
      break;
    case 0:
      sub_1C49F5C14((uint64_t)(a1 + 2), (uint64_t)(a2 + 1));
      break;
  }
  return a1;
}

void sub_1C6110AEC(uint64_t a1, int **a2, int **a3)
{
  int **v4;
  unint64_t v6;
  uint64_t v7;
  void **v8;
  void **v9;
  void **v10;
  void **v11;
  void ***v12;
  void ***v13;
  void ***v14;
  void *v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  _QWORD *v20;
  int *v21;
  int *v22;
  int64_t v23;
  uint64_t v24;
  char *v25;
  uint64_t v26;
  void **v27;
  int **v28;
  uint64_t v29;
  void **v30;
  int *v31;
  int *v32;
  int64_t v33;
  uint64_t v34;
  char *v35;
  uint64_t v36;
  void **v37;
  void **v38;
  void ***v39;
  void ***v40;
  void ***v41;
  void *v42;

  v4 = a2;
  v6 = 0xAAAAAAAAAAAAAAABLL * (a3 - a2);
  v7 = *(_QWORD *)(a1 + 16);
  v8 = *(void ***)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v7 - *(_QWORD *)a1) >> 3) >= v6)
  {
    v27 = *(void ***)(a1 + 8);
    if (0xAAAAAAAAAAAAAAABLL * (v27 - v8) >= v6)
    {
      if (a2 == a3)
      {
        v37 = *(void ***)a1;
      }
      else
      {
        v37 = *(void ***)a1;
        do
        {
          if (v4 != (int **)v8)
            sub_1C6110E30(v8, *v4, v4[1], ((char *)v4[1] - (char *)*v4) >> 7);
          v4 += 3;
          v8 += 3;
          v37 += 3;
        }
        while (v4 != a3);
        v27 = *(void ***)(a1 + 8);
      }
      if (v27 != v37)
      {
        v38 = v27;
        do
        {
          v40 = (void ***)*(v38 - 3);
          v38 -= 3;
          v39 = v40;
          if (v40)
          {
            v41 = (void ***)*(v27 - 2);
            v42 = v39;
            if (v41 != v39)
            {
              do
                v41 = sub_1C60FEA30(v41 - 16);
              while (v41 != v39);
              v42 = *v38;
            }
            *(v27 - 2) = v39;
            operator delete(v42);
          }
          v27 = v38;
        }
        while (v38 != v37);
      }
      *(_QWORD *)(a1 + 8) = v37;
    }
    else
    {
      v28 = &a2[v27 - v8];
      if (v27 != v8)
      {
        v29 = 8 * (v27 - v8);
        do
        {
          if (v4 != (int **)v8)
            sub_1C6110E30(v8, *v4, v4[1], ((char *)v4[1] - (char *)*v4) >> 7);
          v4 += 3;
          v8 += 3;
          v29 -= 24;
        }
        while (v29);
        v8 = *(void ***)(a1 + 8);
      }
      v30 = v8;
      if (v28 != a3)
      {
        v30 = v8;
        do
        {
          *v30 = 0;
          v30[1] = 0;
          v30[2] = 0;
          v31 = *v28;
          v32 = v28[1];
          v33 = (char *)v32 - (char *)*v28;
          if (v32 != *v28)
          {
            if (v33 < 0)
              goto LABEL_61;
            v34 = v33 >> 7;
            v35 = (char *)operator new(v33);
            v36 = 0;
            *v30 = v35;
            v30[1] = v35;
            v30[2] = &v35[128 * v34];
            do
            {
              sub_1C611076C((uint64_t)&v35[v36 * 4], &v31[v36]);
              v36 += 32;
            }
            while (&v31[v36] != v32);
            v30[1] = &v35[v36 * 4];
          }
          v28 += 3;
          v30 += 3;
        }
        while (v28 != a3);
      }
      *(_QWORD *)(a1 + 8) = v30;
    }
  }
  else
  {
    if (v8)
    {
      v9 = *(void ***)(a1 + 8);
      v10 = *(void ***)a1;
      if (v9 != v8)
      {
        v11 = *(void ***)(a1 + 8);
        do
        {
          v13 = (void ***)*(v11 - 3);
          v11 -= 3;
          v12 = v13;
          if (v13)
          {
            v14 = (void ***)*(v9 - 2);
            v15 = v12;
            if (v14 != v12)
            {
              do
                v14 = sub_1C60FEA30(v14 - 16);
              while (v14 != v12);
              v15 = *v11;
            }
            *(v9 - 2) = v12;
            operator delete(v15);
          }
          v9 = v11;
        }
        while (v11 != v8);
        v10 = *(void ***)a1;
      }
      *(_QWORD *)(a1 + 8) = v8;
      operator delete(v10);
      v7 = 0;
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_QWORD *)(a1 + 16) = 0;
    }
    if (v6 > 0xAAAAAAAAAAAAAAALL)
      goto LABEL_61;
    v16 = 0xAAAAAAAAAAAAAAABLL * (v7 >> 3);
    v17 = 2 * v16;
    if (2 * v16 <= v6)
      v17 = v6;
    v18 = v16 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v17;
    if (v18 > 0xAAAAAAAAAAAAAAALL)
LABEL_61:
      abort();
    v19 = 3 * v18;
    v20 = operator new(24 * v18);
    *(_QWORD *)a1 = v20;
    *(_QWORD *)(a1 + 8) = v20;
    *(_QWORD *)(a1 + 16) = &v20[v19];
    while (v4 != a3)
    {
      *v20 = 0;
      v20[1] = 0;
      v20[2] = 0;
      v21 = *v4;
      v22 = v4[1];
      v23 = (char *)v22 - (char *)*v4;
      if (v22 != *v4)
      {
        if (v23 < 0)
          goto LABEL_61;
        v24 = v23 >> 7;
        v25 = (char *)operator new(v23);
        v26 = 0;
        *v20 = v25;
        v20[1] = v25;
        v20[2] = &v25[128 * v24];
        do
        {
          sub_1C611076C((uint64_t)&v25[v26 * 4], &v21[v26]);
          v26 += 32;
        }
        while (&v21[v26] != v22);
        v20[1] = &v25[v26 * 4];
      }
      v4 += 3;
      v20 += 3;
    }
    *(_QWORD *)(a1 + 8) = v20;
  }
}

void ***sub_1C6110E30(void **a1, int *a2, int *a3, unint64_t a4)
{
  int *v6;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  void ***result;
  uint64_t v13;
  unint64_t v14;
  int *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;

  v6 = a2;
  v8 = (char *)*a1;
  if (a4 <= ((_BYTE *)a1[2] - (_BYTE *)*a1) >> 7)
  {
    result = (void ***)a1[1];
    v14 = ((char *)result - v8) >> 7;
    if (v14 >= a4)
    {
      if (a2 == a3)
      {
        v19 = v8;
      }
      else
      {
        v19 = v8;
        do
        {
          sub_1C61109F8(v8, v6);
          v6 += 32;
          v8 += 128;
          v19 += 128;
        }
        while (v6 != a3);
        result = (void ***)a1[1];
      }
      while (result != (void ***)v19)
        result = sub_1C60FEA30(result - 16);
      a1[1] = v19;
    }
    else
    {
      v15 = &a2[32 * v14];
      if (result != (void ***)v8)
      {
        v16 = v14 << 7;
        do
        {
          result = (void ***)sub_1C61109F8(v8, v6);
          v6 += 32;
          v8 += 128;
          v16 -= 128;
        }
        while (v16);
        v8 = (char *)a1[1];
      }
      v17 = v8;
      if (v15 != a3)
      {
        v17 = v8;
        result = (void ***)v8;
        do
        {
          v18 = sub_1C611076C((uint64_t)result, v15);
          v15 += 32;
          result = (void ***)(v18 + 128);
          v17 += 128;
        }
        while (v15 != a3);
      }
      a1[1] = v17;
    }
  }
  else
  {
    sub_1C6110FCC(a1);
    if (a4 >> 57)
      goto LABEL_30;
    v9 = (_BYTE *)a1[2] - (_BYTE *)*a1;
    v10 = v9 >> 6;
    if (v9 >> 6 <= a4)
      v10 = a4;
    v11 = (unint64_t)v9 >= 0x7FFFFFFFFFFFFF80 ? 0x1FFFFFFFFFFFFFFLL : v10;
    if (v11 >> 57)
LABEL_30:
      abort();
    result = (void ***)operator new(v11 << 7);
    *a1 = result;
    a1[1] = result;
    a1[2] = &result[16 * v11];
    while (v6 != a3)
    {
      v13 = sub_1C611076C((uint64_t)result, v6);
      v6 += 32;
      result = (void ***)(v13 + 128);
    }
    a1[1] = result;
  }
  return result;
}

void sub_1C6110FCC(void **a1)
{
  void ***v1;
  void ***v3;
  void *v4;

  v1 = (void ***)*a1;
  if (*a1)
  {
    v3 = (void ***)a1[1];
    v4 = v1;
    if (v3 != v1)
    {
      do
        v3 = sub_1C60FEA30(v3 - 16);
      while (v3 != v1);
      v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

double sub_1C6111028(uint64_t a1, int a2)
{
  uint64_t v2;
  double result;

  *(_DWORD *)a1 = a2;
  switch(a2)
  {
    case 2:
      result = 0.0;
      *(_OWORD *)(a1 + 40) = 0u;
      *(_OWORD *)(a1 + 56) = 0u;
      *(_OWORD *)(a1 + 104) = 0u;
      *(_OWORD *)(a1 + 88) = 0u;
      *(_QWORD *)(a1 + 120) = 0;
      *(_OWORD *)(a1 + 24) = 0u;
      *(_OWORD *)(a1 + 8) = 0u;
      *(_BYTE *)(a1 + 49) = 1;
      *(_QWORD *)(a1 + 52) = 0;
      *(_QWORD *)(a1 + 60) = 0;
      *(_OWORD *)(a1 + 72) = 0u;
      *(_OWORD *)(a1 + 100) = 0u;
      *(_DWORD *)(a1 + 116) = 16;
      break;
    case 1:
      *(_QWORD *)(a1 + 24) = 0;
      *(_QWORD *)(a1 + 32) = 0;
      v2 = a1 + 24;
      goto LABEL_8;
    case 0:
      *(_QWORD *)(a1 + 24) = 0;
      v2 = a1 + 24;
LABEL_8:
      *(_QWORD *)(v2 - 16) = v2;
      *(_QWORD *)&result = 0x100000000;
      *(_QWORD *)(v2 - 8) = 0x100000000;
      break;
  }
  return result;
}

uint64_t sub_1C61110AC(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  void *p_p;
  uint64_t v6;
  uint64_t v7;
  void *__p;
  uint64_t v10;
  uint64_t v11;

  v2 = *a1;
  __p = 0;
  v10 = 0;
  v11 = 0;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 264))(v2) & 1) != 0
    || ((*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v2 + 208))(v2, &__p) & 1) != 0)
  {
    v3 = 1;
  }
  else
  {
    v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 56))(v2);
    if (v11 >= 0)
      p_p = &__p;
    else
      p_p = __p;
    if (v11 >= 0)
      v6 = HIBYTE(v11) & 0x7F;
    else
      v6 = v10;
    (*(void (**)(uint64_t, void *, uint64_t))(*(_QWORD *)v4 + 488))(v4, p_p, v6);
    if (*(_BYTE *)a1[1])
    {
      v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 56))(v2);
      (*(void (**)(uint64_t, void *, uint64_t))(*(_QWORD *)v7 + 488))(v7, &unk_1C86786F9, 1);
    }
    v3 = 0;
  }
  if (SHIBYTE(v11) < 0)
    operator delete(__p);
  return v3;
}

uint64_t sub_1C61111A0(llvm::MCAsmParser *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v6;
  unsigned __int8 **v7;
  uint64_t v8;
  unsigned __int8 *v9;
  void *v11;
  uint64_t v12;
  _QWORD v13[2];

  v13[1] = *MEMORY[0x1E0C80C00];
  v11 = v13;
  v12 = 0x100000000;
  v6 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 264))(a1);
  if ((v6 & 1) == 0)
  {
    sub_1C6111330(a1, a2, (uint64_t)&v11, 9);
    if ((_DWORD)v12)
    {
      v7 = (unsigned __int8 **)v11;
      v8 = 8 * v12;
      do
      {
        v9 = *v7++;
        sub_1C61113E4((uint64_t)a1, v9, a2);
        v8 -= 8;
      }
      while (v8);
    }
    if (a3)
      *a3 = v12;
  }
  if (v11 != v13)
    free(v11);
  return v6;
}

uint64_t sub_1C6111298(uint64_t a1, char *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int *v7;
  uint64_t result;
  unsigned int v9;
  int v10;
  unsigned int v11;

  v6 = *(_QWORD *)(a1 + 504) + 96 * *(unsigned int *)(a1 + 512);
  v7 = sub_1C610FD14(v6 - 96, a2, a3, 0, a4);
  v7[3] = a4;
  result = sub_1C6111330((llvm::MCAsmParser *)a1, a4, (uint64_t)(v7 + 6), 9);
  v9 = v7[8];
  v10 = v9 * v7[3];
  v7[1] = v10;
  v7[2] = v9;
  v11 = *v7 + v10;
  if (!*(_BYTE *)(v6 - 80))
    *(_DWORD *)(v6 - 68) = v11;
  if (*(_DWORD *)(v6 - 64) > v11)
    v11 = *(_DWORD *)(v6 - 64);
  *(_DWORD *)(v6 - 64) = v11;
  return result;
}

uint64_t sub_1C6111330(llvm::MCAsmParser *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t (*i)(void);
  uint64_t result;

  for (i = *(uint64_t (**)(void))(*(_QWORD *)a1 + 40); ; i = *(uint64_t (**)(void))(*(_QWORD *)a1 + 40))
  {
    result = i();
    if (**(_DWORD **)(result + 8) == a4)
      break;
    if (a4 == 42)
    {
      result = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1);
      if (**(_DWORD **)(result + 8) == 44)
        break;
    }
    sub_1C6111528(a1, a2, a3, 0);
    result = llvm::MCAsmParser::parseOptionalToken(a1, 25);
    if (!(_DWORD)result)
      break;
    llvm::MCAsmParser::parseOptionalToken(a1, 9);
  }
  return result;
}

uint64_t sub_1C61113E4(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  int v5;
  int64_t v6;
  uint64_t v7;
  void (*v8)(void);
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  const char *v14;
  __int16 v15;

  v5 = *a2;
  if (v5 == 2)
  {
    v9 = (_BYTE *)*((_QWORD *)a2 + 2);
    if ((*v9 & 4) != 0)
    {
      v10 = *((_QWORD *)v9 - 1);
      if (*(_QWORD *)v10 == 1 && *(_BYTE *)(v10 + 16) == 63)
        goto LABEL_7;
    }
LABEL_11:
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
    (*(void (**)(uint64_t, unsigned __int8 *, uint64_t, _QWORD))(*(_QWORD *)v11 + 504))(v11, a2, a3, *((_QWORD *)a2 + 1));
    return 0;
  }
  if (v5 != 1)
    goto LABEL_11;
  v6 = *((_QWORD *)a2 + 2);
  if ((8 * a3) > 0x3F
    || 0xFFFFFFFFFFFFFFFFLL >> (-8 * a3) >= v6
    || (v7 = -1 << (8 * a3 - 1), v7 <= v6) && v6 <= ~v7)
  {
LABEL_7:
    v8 = *(void (**)(void))(*(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1) + 512);
    v8();
    return 0;
  }
  v13 = *((_QWORD *)a2 + 1);
  v14 = "out of range literal value";
  v15 = 259;
  return llvm::MCAsmParser::Error(a1, v13, (uint64_t)&v14, 0, 0);
}

uint64_t sub_1C6111528(llvm::MCAsmParser *a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  char v8;
  char v9;
  unint64_t v10;
  unsigned __int8 *p_p;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  void *v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char v32;
  unsigned int v33;
  void *v34;
  uint64_t v35;
  unint64_t v36;
  const char *v37;
  __int16 v38;
  uint64_t v39;
  void *__p;
  unint64_t v41;
  uint64_t v42;
  __int16 v43;
  void *__src;
  uint64_t v45;
  _QWORD v46[2];

  v46[1] = *MEMORY[0x1E0C80C00];
  if ((_DWORD)a2 == 1
    && **(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1) + 8) == 3)
  {
    __p = 0;
    v41 = 0;
    v42 = 0;
    v8 = (*(uint64_t (**)(llvm::MCAsmParser *, void **))(*(_QWORD *)a1 + 208))(a1, &__p);
    if ((v8 & 1) == 0)
    {
      v9 = HIBYTE(v42);
      v10 = v41;
      if (v42 >= 0)
        p_p = (unsigned __int8 *)&__p;
      else
        p_p = (unsigned __int8 *)__p;
      v12 = HIBYTE(v42) & 0x7F;
      if (v42 >= 0)
        v13 = HIBYTE(v42) & 0x7F;
      else
        v13 = v41;
      if (v13)
      {
        do
        {
          v14 = *p_p;
          v15 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 48))(a1);
          v16 = sub_1C484358C(v15 + 192, 24, 3);
          *(_BYTE *)v16 = 1;
          *(_DWORD *)(v16 + 1) = *(unsigned __int8 *)(v16 + 4) << 24;
          *(_QWORD *)(v16 + 8) = 0;
          *(_QWORD *)(v16 + 16) = v14;
          v17 = *(unsigned int *)(a3 + 8);
          if (v17 >= *(unsigned int *)(a3 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v17 + 1, 8);
            v17 = *(unsigned int *)(a3 + 8);
          }
          *(_QWORD *)(*(_QWORD *)a3 + 8 * v17) = v16;
          ++*(_DWORD *)(a3 + 8);
          ++p_p;
          --v13;
        }
        while (v13);
        v9 = HIBYTE(v42);
        v10 = v41;
        v12 = HIBYTE(v42) & 0x7F;
      }
      if (v9 >= 0)
        v23 = v12;
      else
        v23 = v10;
      v24 = a4 - v23;
      if (a4 > v23)
      {
        do
        {
          v25 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 48))(a1);
          v26 = sub_1C484358C(v25 + 192, 24, 3);
          *(_BYTE *)v26 = 1;
          *(_DWORD *)(v26 + 1) = *(unsigned __int8 *)(v26 + 4) << 24;
          *(_QWORD *)(v26 + 8) = 0;
          *(_QWORD *)(v26 + 16) = 32;
          v27 = *(unsigned int *)(a3 + 8);
          if (v27 >= *(unsigned int *)(a3 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v27 + 1, 8);
            v27 = *(unsigned int *)(a3 + 8);
          }
          *(_QWORD *)(*(_QWORD *)a3 + 8 * v27) = v26;
          ++*(_DWORD *)(a3 + 8);
          --v24;
        }
        while (v24);
      }
    }
    if (SHIBYTE(v42) < 0)
    {
      operator delete(__p);
      if ((v8 & 1) != 0)
        return 1;
    }
    else if ((v8 & 1) != 0)
    {
      return 1;
    }
    return 0;
  }
  v39 = 0;
  __p = 0;
  if (((*(uint64_t (**)(llvm::MCAsmParser *, uint64_t *, void **))(*(_QWORD *)a1 + 232))(a1, &v39, &__p) & 1) != 0)
    return 1;
  if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1) + 8) != 2
    || (v18 = *(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1) + 8),
        v20 = *(void **)(v18 + 8),
        v19 = *(_QWORD *)(v18 + 16),
        __p = v20,
        v41 = v19,
        v19 != 3)
    || llvm::StringRef::compare_insensitive((unsigned __int8 **)&__p, "dup", 3uLL))
  {
    v21 = v39;
    v22 = *(unsigned int *)(a3 + 8);
    if (v22 >= *(_DWORD *)(a3 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v22 + 1, 8);
      LODWORD(v22) = *(_DWORD *)(a3 + 8);
    }
    *(_QWORD *)(*(_QWORD *)a3 + 8 * v22) = v21;
    ++*(_DWORD *)(a3 + 8);
    return 0;
  }
  (*(void (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 184))(a1);
  if (*(_BYTE *)v39 == 1)
  {
    v29 = *(_QWORD *)(v39 + 16);
    if ((v29 & 0x8000000000000000) == 0)
    {
      __src = v46;
      v45 = 0x100000000;
      v37 = "parentheses required for 'dup' contents";
      v38 = 259;
      if (llvm::MCAsmParser::parseToken(a1, 17, (llvm::Twine *)&v37)
        || (sub_1C6111330(a1, a2, &__src, 9),
            __p = "expected ')'",
            v43 = 259,
            llvm::MCAsmParser::parseToken(a1, 18, (llvm::Twine *)&__p)))
      {
        v32 = 0;
      }
      else if (v29)
      {
        v33 = *(_DWORD *)(a3 + 8);
        do
        {
          v34 = __src;
          v35 = v45;
          v36 = v45 + (unint64_t)v33;
          if (v36 > *(unsigned int *)(a3 + 12))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a3, a3 + 16, v36, 8);
            v33 = *(_DWORD *)(a3 + 8);
          }
          if ((_DWORD)v35)
          {
            memcpy((void *)(*(_QWORD *)a3 + 8 * v33), v34, 8 * v35);
            v33 = *(_DWORD *)(a3 + 8);
          }
          v33 += v35;
          *(_DWORD *)(a3 + 8) = v33;
          v32 = 1;
          --v29;
        }
        while (v29);
      }
      else
      {
        v32 = 1;
      }
      if (__src != v46)
        free(__src);
      return (v32 & 1) == 0;
    }
    v30 = *(_QWORD *)(v39 + 8);
    v31 = "cannot repeat value a negative number of times";
  }
  else
  {
    v30 = *(_QWORD *)(v39 + 8);
    v31 = "cannot repeat value a non-constant number of times";
  }
  __p = v31;
  v43 = 259;
  return llvm::MCAsmParser::Error((uint64_t)a1, v30, (uint64_t)&__p, 0, 0);
}

uint64_t sub_1C61119A8(llvm::MCAsmParser *a1, unsigned int *a2, _DWORD *a3)
{
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  void *v11;
  unsigned int v12;
  char *v13;
  uint64_t v14;
  _QWORD v15[3];

  v15[2] = *MEMORY[0x1E0C80C00];
  if (((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 264))(a1) & 1) != 0)
    return 1;
  v13 = (char *)v15;
  v14 = 0x100000000;
  v6 = sub_1C6111BE0(a1, a2, (uint64_t)&v13, 9);
  if ((v6 & 1) == 0)
  {
    if ((_DWORD)v14)
    {
      v7 = v13;
      v8 = 16 * v14;
      do
      {
        v9 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 56))(a1);
        v12 = *((_DWORD *)v7 + 2);
        if (v12 > 0x40)
        {
          v11 = (void *)operator new[]();
          memcpy(v11, *(const void **)v7, (((unint64_t)v12 + 63) >> 3) & 0x3FFFFFF8);
        }
        else
        {
          v11 = *(void **)v7;
        }
        (*(void (**)(uint64_t, void **))(*(_QWORD *)v9 + 520))(v9, &v11);
        if (v12 >= 0x41 && v11)
          MEMORY[0x1CAA32F9C](v11, 0x1000C8000313F17);
        v7 += 16;
        v8 -= 16;
      }
      while (v8);
    }
    if (a3)
      *a3 = v14;
  }
  sub_1C618E390(&v13);
  return v6;
}

uint64_t sub_1C6111B38(uint64_t a1, char *a2, unint64_t a3, unsigned int *a4, unsigned int a5)
{
  uint64_t v7;
  unsigned int *v8;
  uint64_t result;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;

  v7 = *(_QWORD *)(a1 + 504) + 96 * *(unsigned int *)(a1 + 512);
  v8 = sub_1C610FD14(v7 - 96, a2, a3, 1, a5);
  v8[1] = 0;
  result = sub_1C6111BE0((llvm::MCAsmParser *)a1, a4, (uint64_t)(v8 + 6), 9);
  if ((result & 1) == 0)
  {
    v10 = v8[8];
    v11 = *(_DWORD *)(*((_QWORD *)v8 + 3) + 16 * v10 - 8) >> 3;
    v8[2] = v10;
    v8[3] = v11;
    v12 = v11 * v10;
    v8[1] = v12;
    v13 = *v8 + v12;
    if (!*(_BYTE *)(v7 - 80))
      *(_DWORD *)(v7 - 68) = v13;
    if (*(_DWORD *)(v7 - 64) > v13)
      v13 = *(_DWORD *)(v7 - 64);
    *(_DWORD *)(v7 - 64) = v13;
  }
  return result;
}

uint64_t sub_1C6111BE0(llvm::MCAsmParser *a1, unsigned int *a2, uint64_t a3, int a4)
{
  uint64_t v4;
  uint64_t v9;
  char v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  const char *v14;
  uint64_t v15;
  unsigned int v16;
  char *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int *v21;
  uint64_t v22;
  unsigned int v23;
  void *v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  const char *v30;
  __int16 v31;
  uint64_t v32;
  int v33;
  unsigned __int8 *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  const char *v38;
  uint64_t v39;
  __int16 v40;
  char *v41;
  uint64_t v42;
  _QWORD v43[4];

  v43[2] = *MEMORY[0x1E0C80C00];
  while (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1) + 8) != a4
       || a4 == 42
       && **(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1) + 8) != 44)
  {
    sub_1C610C428((uint64_t)&v33, (uint64_t)a1, 1);
    if (v33 == 2
      && (v38 = (const char *)v34, v39 = v35, v35 == 3)
      && !llvm::StringRef::compare_insensitive((unsigned __int8 **)&v38, "dup", 3uLL))
    {
      v32 = 0;
      v38 = 0;
      if (((*(uint64_t (**)(llvm::MCAsmParser *, uint64_t *, const char **))(*(_QWORD *)a1 + 232))(a1, &v32, &v38) & 1) != 0|| (v38 = "unexpected token", v40 = 259, llvm::MCAsmParser::parseToken(a1, 2, (llvm::Twine *)&v38)))
      {
        v4 = 1;
LABEL_22:
        v11 = 1;
        goto LABEL_15;
      }
      if (*(_BYTE *)v32 != 1)
      {
        v13 = *(_QWORD *)(v32 + 8);
        v14 = "cannot repeat value a non-constant number of times";
        goto LABEL_32;
      }
      v12 = *(_QWORD *)(v32 + 16);
      if (v12 < 0)
      {
        v13 = *(_QWORD *)(v32 + 8);
        v14 = "cannot repeat value a negative number of times";
LABEL_32:
        v38 = v14;
        v40 = 259;
        v4 = llvm::MCAsmParser::Error((uint64_t)a1, v13, (uint64_t)&v38, 0, 0);
        goto LABEL_22;
      }
      v41 = (char *)v43;
      v42 = 0x100000000;
      v30 = "parentheses required for 'dup' contents";
      v31 = 259;
      if (!llvm::MCAsmParser::parseToken(a1, 17, (llvm::Twine *)&v30) && (sub_1C6111BE0(a1, a2, &v41, 9) & 1) == 0)
      {
        v26 = v12;
        v38 = "expected ')'";
        v40 = 259;
        if (!llvm::MCAsmParser::parseToken(a1, 18, (llvm::Twine *)&v38))
        {
          if (v12)
          {
            v15 = 0;
            v16 = *(_DWORD *)(a3 + 8);
            do
            {
              v17 = v41;
              v18 = v42;
              v19 = v42 + (unint64_t)v16;
              v28 = v42;
              if (v19 <= *(unsigned int *)(a3 + 12))
              {
                v20 = v16;
              }
              else
              {
                sub_1C4DF5FEC(a3, v19);
                v18 = v28;
                v20 = *(unsigned int *)(a3 + 8);
                v16 = *(_DWORD *)(a3 + 8);
              }
              if ((_DWORD)v18)
              {
                v27 = v15;
                v21 = (unsigned int *)(*(_QWORD *)a3 + 16 * v20 + 8);
                v22 = 16 * v18;
                do
                {
                  v23 = *((_DWORD *)v17 + 2);
                  *v21 = v23;
                  if (v23 > 0x40)
                  {
                    v29 = v22;
                    v24 = (void *)operator new[]();
                    *((_QWORD *)v21 - 1) = v24;
                    memcpy(v24, *(const void **)v17, (((unint64_t)*v21 + 63) >> 3) & 0x3FFFFFF8);
                    LODWORD(v18) = v28;
                    v22 = v29;
                  }
                  else
                  {
                    *((_QWORD *)v21 - 1) = *(_QWORD *)v17;
                  }
                  v17 += 16;
                  v21 += 4;
                  v22 -= 16;
                }
                while (v22);
                v16 = *(_DWORD *)(a3 + 8);
                v15 = v27;
              }
              v16 += v18;
              *(_DWORD *)(a3 + 8) = v16;
              ++v15;
            }
            while (v15 != v26);
          }
          sub_1C618E390(&v41);
          goto LABEL_24;
        }
      }
      sub_1C618E390(&v41);
      v11 = 1;
      v4 = 1;
    }
    else
    {
      v9 = 1;
      LODWORD(v39) = 1;
      v38 = 0;
      v10 = sub_1C6112008((_DWORD **)a1, a2, (uint64_t)&v38);
      if ((v10 & 1) == 0)
      {
        sub_1C5398B48(a3, (unint64_t)&v38);
        v9 = v4;
      }
      if (v39 >= 0x41 && v38)
        MEMORY[0x1CAA32F9C](v38, 0x1000C8000313F17);
      if ((v10 & 1) == 0)
      {
        v4 = v9;
LABEL_24:
        if (llvm::MCAsmParser::parseOptionalToken(a1, 25))
        {
          llvm::MCAsmParser::parseOptionalToken(a1, 9);
          v11 = 0;
        }
        else
        {
          v11 = 3;
        }
        goto LABEL_15;
      }
      v11 = 1;
      v4 = v9;
    }
LABEL_15:
    if (v37 >= 0x41 && v36)
      MEMORY[0x1CAA32F9C](v36, 0x1000C8000313F17);
    if (v11)
    {
      if (v11 != 3)
        return v4 & 1;
      break;
    }
  }
  LOBYTE(v4) = 0;
  return v4 & 1;
}

uint64_t sub_1C6112008(_DWORD **a1, unsigned int *a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  unsigned __int8 *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v19;
  uint64_t (**v20)(_DWORD **);
  uint64_t v21;
  _QWORD *v22;
  unsigned __int8 *v23[2];
  char *v24;
  char *v25;
  _BYTE v26[8];
  uint64_t v27;
  uint64_t v28;
  char v29;
  char *v30;
  uint64_t v31;
  _QWORD *v32;
  int v33;
  char v34;
  __int16 v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v6 = **(_DWORD **)((*((uint64_t (**)(_DWORD **))*a1 + 5))(a1) + 8);
  v7 = (*((uint64_t (**)(_DWORD **))*a1 + 5))(a1);
  if (v6 != 13)
  {
    if (**(_DWORD **)(v7 + 8) != 12)
    {
      v8 = 0;
      goto LABEL_6;
    }
    v7 = (*((uint64_t (**)(_DWORD **))*a1 + 5))(a1);
  }
  v8 = *(_QWORD *)(v7 + 96);
  sub_1C60E57B0((uint64_t)(a1 + 5));
LABEL_6:
  switch(*a1[6])
  {
    case 1:
      v35 = 260;
      v20 = (uint64_t (**)(_DWORD **))*a1;
      v30 = (char *)(a1 + 14);
      v21 = v20[5](a1);
      goto LABEL_60;
    case 2:
    case 4:
    case 6:
      sub_1C4DF9184(&v27, a2);
      v9 = *(_QWORD *)((*((uint64_t (**)(_DWORD **))*a1 + 5))(a1) + 8);
      v10 = *(unsigned __int8 **)(v9 + 8);
      v11 = *(unsigned __int8 **)(v9 + 16);
      v23[0] = v10;
      v23[1] = v11;
      if (**(_DWORD **)((*((uint64_t (**)(_DWORD **))*a1 + 5))(a1) + 8) == 2)
      {
        if (v11 == (unsigned __int8 *)1)
        {
          if (!llvm::StringRef::compare_insensitive(v23, "?", 1uLL))
          {
            if (a2 == (unsigned int *)&unk_1C866F1C0)
              llvm::detail::DoubleAPFloat::DoubleAPFloat(&v31, (uint64_t)&unk_1C866F1C0);
            else
              llvm::detail::IEEEFloat::IEEEFloat(&v31, (uint64_t)a2);
            if ((_UNKNOWN *)v31 == &unk_1C866F1C0)
            {
              llvm::detail::DoubleAPFloat::makeZero((llvm::detail::DoubleAPFloat *)&v31, 0);
            }
            else
            {
              v34 = v34 & 0xF0 | 3;
              v33 = *(_DWORD *)(v31 + 4) - 1;
              v16 = *(_DWORD *)(v31 + 8);
              if ((v16 - 64) < 0xFFFFFF80)
              {
                v22 = v32;
                *v32 = 0;
                bzero(v22 + 1, 8 * (((v16 + 64) >> 6) - 2) + 8);
              }
              else
              {
                v32 = 0;
              }
            }
            sub_1C48552C0((uint64_t)&v27, (uint64_t)&v31);
            v17 = v31;
            if ((_UNKNOWN *)v31 != &unk_1C866F1C0)
            {
LABEL_43:
              if ((*(_DWORD *)(v17 + 8) - 64) <= 0xFFFFFF7F && v32)
                MEMORY[0x1CAA32F9C](v32, 0x1000C8000313F17);
              goto LABEL_44;
            }
LABEL_69:
            sub_1C4773C74((uint64_t *)&v32);
LABEL_44:
            if (v6 == 13)
            {
              if ((_UNKNOWN *)v27 == &unk_1C866F1C0)
                llvm::detail::DoubleAPFloat::changeSign((llvm::detail::DoubleAPFloat *)&v27);
              else
                v29 ^= 8u;
            }
            (*((void (**)(_DWORD **))*a1 + 23))(a1);
            if ((_UNKNOWN *)v27 == &unk_1C866F1C0)
              llvm::detail::DoubleAPFloat::bitcastToAPInt((llvm::detail::DoubleAPFloat *)&v27, (unsigned int *)&v30);
            else
              llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)&v27, (unsigned int *)&v30);
            if (*(_DWORD *)(a3 + 8) >= 0x41u && *(_QWORD *)a3)
              MEMORY[0x1CAA32F9C](*(_QWORD *)a3, 0x1000C8000313F17);
            v15 = 0;
            *(_QWORD *)a3 = v30;
            *(_DWORD *)(a3 + 8) = v31;
            goto LABEL_53;
          }
        }
        else
        {
          if (v11 != (unsigned __int8 *)3)
          {
            if (v11 != (unsigned __int8 *)8
              || llvm::StringRef::compare_insensitive(v23, "infinity", 8uLL))
            {
              goto LABEL_57;
            }
LABEL_40:
            if (a2 == (unsigned int *)&unk_1C866F1C0)
              llvm::detail::DoubleAPFloat::DoubleAPFloat(&v31, (uint64_t)&unk_1C866F1C0);
            else
              llvm::detail::IEEEFloat::IEEEFloat(&v31, (uint64_t)a2);
            sub_1C47A8F34((uint64_t)&v30, 0);
            sub_1C48552C0((uint64_t)&v27, (uint64_t)&v31);
            v17 = v31;
            if ((_UNKNOWN *)v31 != &unk_1C866F1C0)
              goto LABEL_43;
            goto LABEL_69;
          }
          if (!llvm::StringRef::compare_insensitive(v23, "inf", 3uLL))
            goto LABEL_40;
          if (!llvm::StringRef::compare_insensitive(v23, "nan", 3uLL))
          {
            sub_1C5378B58((uint64_t)a2, 0, -1, (uint64_t)&v30);
            sub_1C48552C0((uint64_t)&v27, (uint64_t)&v31);
            v17 = v31;
            if ((_UNKNOWN *)v31 != &unk_1C866F1C0)
              goto LABEL_43;
            goto LABEL_69;
          }
        }
LABEL_57:
        v30 = "invalid floating point literal";
        v35 = 259;
        v19 = (*((uint64_t (**)(_DWORD **))*a1 + 5))(a1);
        llvm::MCAsmParser::Error((uint64_t)a1, *(_QWORD *)(v19 + 96), (uint64_t)&v30, 0, 0);
        v15 = 1;
        goto LABEL_53;
      }
      if (!v11 || (v11[(_QWORD)v10 - 1] | 0x20) != 0x72)
      {
        llvm::APFloat::convertFromString((uint64_t)v26, v10, (unint64_t)v11, 1, (uint64_t)&v30);
        if ((v31 & 1) != 0 && v30)
        {
          v24 = v30;
          sub_1C4D62BD4(&v24, &v25);
          if (v24)
            (*(void (**)(char *))(*(_QWORD *)v24 + 8))(v24);
          goto LABEL_57;
        }
        goto LABEL_44;
      }
      if (v11 >= v11 - 1)
        v12 = (uint64_t)(v11 - 1);
      else
        v12 = (uint64_t)v11;
      v13 = a2[3];
      if (v13 != 4 * v12)
        goto LABEL_57;
      (*((void (**)(_DWORD **))*a1 + 23))(a1);
      LODWORD(v31) = v13;
      llvm::APInt::fromString((uint64_t)&v30, v14, (char *)v10, v12, 0x10u);
      if (*(_DWORD *)(a3 + 8) >= 0x41u && *(_QWORD *)a3)
        MEMORY[0x1CAA32F9C](*(_QWORD *)a3, 0x1000C8000313F17);
      *(_QWORD *)a3 = v30;
      *(_DWORD *)(a3 + 8) = v31;
      if (v8)
      {
        v30 = "MASM-style hex floats ignore explicit sign";
        v35 = 259;
        v15 = (*((uint64_t (**)(_DWORD **, uint64_t, char **, _QWORD, _QWORD))*a1 + 21))(a1, v8, &v30, 0, 0);
      }
      else
      {
        v15 = 0;
      }
LABEL_53:
      if ((_UNKNOWN *)v27 == &unk_1C866F1C0)
      {
        sub_1C4773C74(&v28);
      }
      else if ((*(_DWORD *)(v27 + 8) - 64) <= 0xFFFFFF7F && v28)
      {
        MEMORY[0x1CAA32F9C](v28, 0x1000C8000313F17);
      }
      return v15;
    default:
      v30 = "unexpected token in directive";
      v35 = 259;
      v21 = (*((uint64_t (**)(_DWORD **))*a1 + 5))(a1);
LABEL_60:
      llvm::MCAsmParser::Error((uint64_t)a1, *(_QWORD *)(v21 + 96), (uint64_t)&v30, 0, 0);
      return 1;
  }
}

void **sub_1C6112648(void **result, uint64_t a2)
{
  unsigned int v2;
  _OWORD *v3;
  uint64_t v4;
  __int128 v5;
  __int128 v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;

  v2 = *((_DWORD *)result + 2);
  if (v2)
  {
    v3 = *result;
    v4 = (uint64_t)*result + 96 * v2;
    do
    {
      v5 = *v3;
      v6 = v3[1];
      *(_DWORD *)(a2 + 32) = *((_DWORD *)v3 + 8);
      *(_OWORD *)a2 = v5;
      *(_OWORD *)(a2 + 16) = v6;
      *(_QWORD *)(a2 + 48) = 0;
      *(_QWORD *)(a2 + 56) = 0;
      *(_QWORD *)(a2 + 40) = 0;
      *(_OWORD *)(a2 + 40) = *(_OWORD *)((char *)v3 + 40);
      *(_QWORD *)(a2 + 56) = *((_QWORD *)v3 + 7);
      *((_QWORD *)v3 + 6) = 0;
      *((_QWORD *)v3 + 7) = 0;
      *((_QWORD *)v3 + 5) = 0;
      *(_QWORD *)(a2 + 64) = *((_QWORD *)v3 + 8);
      *(_OWORD *)(a2 + 72) = *(_OWORD *)((char *)v3 + 72);
      *((_QWORD *)v3 + 8) = 0;
      *((_QWORD *)v3 + 9) = 0;
      *((_DWORD *)v3 + 20) = 0;
      v3 += 6;
      a2 += 96;
    }
    while (v3 != (_OWORD *)v4);
    v7 = *((unsigned int *)result + 2);
    if ((_DWORD)v7)
    {
      v8 = (char *)*result;
      v9 = 96 * v7;
      do
      {
        sub_1C61DF2A0((uint64_t)&v8[v9 - 32]);
        result = sub_1C60FE9CC((void **)&v8[v9 - 56]);
        v9 -= 96;
      }
      while (v9);
    }
  }
  return result;
}

uint64_t sub_1C6112704(uint64_t a1, unint64_t a2)
{
  unsigned int v4;
  uint64_t result;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;

  v4 = *(_DWORD *)(a1 + 512);
  if (v4)
  {
    result = 0;
    v6 = *(_QWORD *)(a1 + 504) + 96 * v4;
    *(_DWORD *)(v6 - 68) = (a2 + *(unsigned int *)(v6 - 68) - 1) / a2 * a2;
  }
  else if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 264))(a1) & 1) != 0)
  {
    return 1;
  }
  else
  {
    v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
    v8 = *(_QWORD *)(*(_QWORD *)(v7 + 112) + 32 * *(unsigned int *)(v7 + 120) - 32);
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
    if (v9)
      (*(void (**)(uint64_t, unint64_t, _QWORD, _QWORD))(*(_QWORD *)v10 + 640))(v10, a2, *(_QWORD *)(*(_QWORD *)(a1 + 8) + 240), 0);
    else
      (*(void (**)(uint64_t, unint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v10 + 632))(v10, a2, 0, 1, 0);
    return 0;
  }
  return result;
}

uint64_t sub_1C6112800(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unint64_t Symbol;
  unint64_t v6;
  uint64_t v7;
  const char *v9;
  _QWORD v10[4];
  __int16 v11;
  uint64_t v12;
  uint64_t v13;

  v2 = *(_QWORD *)a1;
  v12 = 0;
  v13 = 0;
  v3 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2) + 8) + 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 192))(v2, &v12))
  {
    v9 = "expected identifier";
LABEL_9:
    v10[0] = v9;
    v11 = 259;
    return llvm::MCAsmParser::Error(v2, v3, (uint64_t)v10, 0, 0);
  }
  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 48))(v2);
  v11 = 261;
  v10[0] = v12;
  v10[1] = v13;
  Symbol = llvm::MCContext::getOrCreateSymbol(v4, (uint64_t)v10);
  if ((*(_BYTE *)(Symbol + 8) & 1) != 0)
  {
    v9 = "non-local symbol required";
    goto LABEL_9;
  }
  v6 = Symbol;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 56))(v2);
  if (((*(uint64_t (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v7 + 304))(v7, v6, **(unsigned int **)(a1 + 8)) & 1) == 0)
  {
    v9 = "unable to emit symbol attribute";
    goto LABEL_9;
  }
  return 0;
}

unint64_t sub_1C6112910(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  void *v15;
  unint64_t v16;
  unsigned int v17;
  __int128 *v19;
  uint64_t v20;
  unint64_t v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  __int16 v26;
  __int128 v27;
  uint64_t v28;
  void *__dst;
  unsigned int v30;
  void **v31;

  *((_QWORD *)&v27 + 1) = 0;
  v28 = 0;
  v30 = 1;
  __dst = 0;
  v4 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8);
  v5 = *(_QWORD *)(v4 + 8);
  v6 = *(unsigned int *)(v4 + 32);
  if (v6 > 0x40)
  {
    v7 = (void *)operator new[]();
    memcpy(v7, *(const void **)(v4 + 24), ((unint64_t)(v6 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v7 = *(void **)(v4 + 24);
  }
  if (!**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8))
  {
LABEL_21:
    *(_QWORD *)&v24 = "no matching 'endm' in definition";
    v26 = 259;
    (*(void (**)(uint64_t, uint64_t, __int128 *, _QWORD, _QWORD))(*(_QWORD *)a1 + 176))(a1, a2, &v24, 0, 0);
    v15 = 0;
    v16 = 0;
    v17 = 1;
    goto LABEL_22;
  }
  v8 = 0;
  while (1)
  {
    v8 += sub_1C6112CA8(a1);
    if (**(_DWORD **)(a1 + 48) != 2)
      goto LABEL_20;
    v9 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8);
    if (*(_DWORD *)v9 == 2)
    {
      v10 = *(_QWORD *)(v9 + 8);
      v11 = *(_QWORD *)(v9 + 16);
    }
    else
    {
      v10 = *(_QWORD *)(v9 + 8);
      v12 = *(_QWORD *)(v9 + 16);
      v13 = v12 - 1;
      v14 = v12 != 0;
      if (v12)
        ++v10;
      if (v14 > v13)
        v13 = v12 != 0;
      if (v12 < v13)
        v13 = v12;
      v11 = v13 - v14;
    }
    *(_QWORD *)&v24 = v10;
    *((_QWORD *)&v24 + 1) = v11;
    if (v11 != 4 || llvm::StringRef::compare_insensitive((unsigned __int8 **)&v24, "endm", 4uLL))
      goto LABEL_20;
    if (!v8)
      break;
    --v8;
LABEL_20:
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 224))(a1);
    if (!**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8))
      goto LABEL_21;
  }
  v19 = *(__int128 **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8);
  v27 = *v19;
  v28 = *((_QWORD *)v19 + 2);
  v17 = *((_DWORD *)v19 + 8);
  if (v17 > 0x40)
  {
    llvm::APInt::reallocate((uint64_t)&__dst, *((_DWORD *)v19 + 8));
    v17 = v30;
    if (v30 <= 0x40)
    {
      v15 = (void *)*((_QWORD *)v19 + 3);
      __dst = v15;
    }
    else
    {
      v15 = __dst;
      memcpy(__dst, *((const void **)v19 + 3), (((unint64_t)v30 + 63) >> 3) & 0x3FFFFFF8);
    }
  }
  else
  {
    v15 = (void *)*((_QWORD *)v19 + 3);
    __dst = v15;
    v30 = v17;
  }
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
  if (**(_DWORD **)(a1 + 48) == 9)
  {
    *(_QWORD *)&v23 = v5;
    *((_QWORD *)&v23 + 1) = *((_QWORD *)&v27 + 1) - v5;
    v22 = 0uLL;
    v24 = 0uLL;
    v25 = 0;
    sub_1C63E9E64((_QWORD *)(a1 + 704), &v22, &v23, &v24);
    v31 = (void **)&v24;
    sub_1C5934A04(&v31);
    v21 = *(_QWORD *)(a1 + 744) + *(_QWORD *)(a1 + 736) - 1;
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 712) + 8 * (v21 / 0x2E)) + 88 * (v21 % 0x2E);
  }
  else
  {
    v20 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8) + 8);
    *(_QWORD *)&v24 = "unexpected token in 'endm' directive";
    v26 = 259;
    (*(void (**)(uint64_t, uint64_t, __int128 *, _QWORD, _QWORD))(*(_QWORD *)a1 + 176))(a1, v20, &v24, 0, 0);
    v16 = 0;
  }
LABEL_22:
  if (v6 >= 0x41 && v7)
    MEMORY[0x1CAA32F9C](v7, 0x1000C8000313F17);
  if (v17 >= 0x41 && v15)
    MEMORY[0x1CAA32F9C](v15, 0x1000C8000313F17);
  return v16;
}

uint64_t sub_1C6112CA8(uint64_t a1)
{
  unsigned __int8 *v2;
  unsigned __int8 *v3;
  _BOOL8 v4;
  unsigned __int8 *v5;
  unsigned __int8 *v6;
  unint64_t v7;
  uint64_t v9;
  unsigned __int8 *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  int v15;
  unsigned __int8 *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unsigned int v19;
  unsigned __int8 *v20[2];
  unsigned __int8 *v21;
  unint64_t v22;
  __int16 v23;
  uint64_t v24;
  unsigned int v25;

  if (**(_DWORD **)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8) != 2)
    goto LABEL_2;
  v9 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 8);
  if (*(_DWORD *)v9 == 2)
  {
    v10 = *(unsigned __int8 **)(v9 + 8);
    v11 = *(_QWORD *)(v9 + 16);
  }
  else
  {
    v10 = *(unsigned __int8 **)(v9 + 8);
    v12 = *(_QWORD *)(v9 + 16);
    v13 = v12 - 1;
    v14 = v12 != 0;
    if (v12)
      ++v10;
    if (v14 > v13)
      v13 = v12 != 0;
    if (v12 < v13)
      v13 = v12;
    v11 = v13 - v14;
  }
  v21 = v10;
  v22 = v11;
  v23 = 0;
  sub_1C63EBAF4((uint64_t)&v21, "repeat", 6uLL, "rept", 4uLL);
  if (!HIBYTE(v23) && v22 == 5 && !llvm::StringRef::compare_insensitive(&v21, "while", 5uLL))
    v23 = 257;
  sub_1C63EBAF4((uint64_t)&v21, "for", 3uLL, "irp", 3uLL);
  sub_1C63EBAF4((uint64_t)&v21, "forc", 4uLL, "irpc", 4uLL);
  if (HIBYTE(v23))
  {
    if ((_BYTE)v23)
      return 1;
  }
LABEL_2:
  sub_1C610C428((uint64_t)&v21, a1, 1);
  if ((_DWORD)v21 == 2)
  {
    sub_1C610C428((uint64_t)&v15, a1, 1);
    if (v15 == 2)
    {
      v2 = v16;
      v3 = v17;
    }
    else
    {
      v2 = v16;
      v5 = v17;
      v6 = v17 - 1;
      v7 = v17 != 0;
      if (v17)
        v2 = v16 + 1;
      if (v7 > (unint64_t)v6)
        v6 = (unsigned __int8 *)(v17 != 0);
      if (v17 >= v6)
        v5 = v6;
      v3 = &v5[-v7];
    }
    v20[0] = v2;
    v20[1] = v3;
    v4 = v3 == (unsigned __int8 *)5 && llvm::StringRef::compare_insensitive(v20, "macro", 5uLL) == 0;
    if (v19 >= 0x41 && v18)
      MEMORY[0x1CAA32F9C](v18, 0x1000C8000313F17);
  }
  else
  {
    v4 = 0;
  }
  if (v25 >= 0x41 && v24)
    MEMORY[0x1CAA32F9C](v24, 0x1000C8000313F17);
  return v4;
}

uint64_t sub_1C6112ED8(uint64_t a1, uint64_t a2, uint64_t a3, llvm::raw_ostream *this)
{
  uint64_t v8;
  uint64_t v9;
  const void *v10;
  size_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v34;
  const char *v35;
  __int16 v36;
  uint64_t v37;
  char v38;
  uint64_t v39;

  v39 = *MEMORY[0x1E0C80C00];
  v8 = *((_QWORD *)this + 4);
  if ((unint64_t)(*((_QWORD *)this + 3) - v8) > 4)
  {
    *(_BYTE *)(v8 + 4) = 10;
    *(_DWORD *)v8 = 1835298405;
    *((_QWORD *)this + 4) += 5;
  }
  else
  {
    llvm::raw_ostream::write(this, "endm\n", 5uLL);
  }
  v9 = *((_QWORD *)this + 8);
  v10 = *(const void **)v9;
  v11 = *(_QWORD *)(v9 + 8);
  v35 = "<instantiation>";
  v36 = 259;
  sub_1C5E1F4D0(v10, v11, (uint64_t)&v35, (uint64_t)&v37);
  if ((v38 & 1) != 0)
    v12 = 0;
  else
    v12 = v37;
  v13 = operator new();
  v14 = v13;
  *(_QWORD *)v13 = a2;
  *(_DWORD *)(v13 + 8) = *(_DWORD *)(a1 + 272);
  v15 = (uint64_t)(*(_QWORD *)(a1 + 424) - *(_QWORD *)(a1 + 416)) >> 3;
  *(_QWORD *)(v13 + 16) = a3;
  *(_QWORD *)(v13 + 24) = v15;
  v16 = *(uint64_t **)(a1 + 688);
  v17 = *(_QWORD *)(a1 + 696);
  if ((unint64_t)v16 >= v17)
  {
    v19 = *(_QWORD **)(a1 + 680);
    v20 = v16 - v19;
    v21 = v20 + 1;
    if ((unint64_t)(v20 + 1) >> 61)
      abort();
    v22 = v17 - (_QWORD)v19;
    if (v22 >> 2 > v21)
      v21 = v22 >> 2;
    if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
      v23 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v23 = v21;
    if (v23)
    {
      if (v23 >> 61)
        sub_1C4764EE4();
      v24 = (char *)operator new(8 * v23);
    }
    else
    {
      v24 = 0;
    }
    v25 = (uint64_t *)&v24[8 * v20];
    *v25 = v14;
    v18 = v25 + 1;
    if (v16 != v19)
    {
      do
      {
        v26 = *--v16;
        *--v25 = v26;
      }
      while (v16 != v19);
      v16 = *(uint64_t **)(a1 + 680);
    }
    *(_QWORD *)(a1 + 680) = v25;
    *(_QWORD *)(a1 + 688) = v18;
    *(_QWORD *)(a1 + 696) = &v24[8 * v23];
    if (v16)
      operator delete(v16);
  }
  else
  {
    *v16 = v13;
    v18 = v16 + 1;
  }
  *(_QWORD *)(a1 + 688) = v18;
  v27 = *(_QWORD *)(a1 + 240);
  v34 = v12;
  v28 = sub_1C6175188(v27, &v34, 0);
  *(_DWORD *)(a1 + 272) = v28;
  v29 = v34;
  v34 = 0;
  if (v29)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v29 + 8))(v29);
    v28 = *(_DWORD *)(a1 + 272);
  }
  v30 = *(_QWORD *)(**(_QWORD **)(a1 + 240) + 24 * (v28 - 1));
  v31 = *(_QWORD *)(v30 + 8);
  v32 = *(_QWORD *)(v30 + 16) - v31;
  *(_QWORD *)(a1 + 192) = v31;
  *(_QWORD *)(a1 + 200) = v32;
  *(_QWORD *)(a1 + 184) = v31;
  *(_QWORD *)(a1 + 136) = 0;
  *(_BYTE *)(a1 + 211) = 1;
  sub_1C630145C((_DWORD *)(a1 + 336), 1);
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
}

uint64_t sub_1C611314C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v5;
  int v7;
  unsigned int *v8;
  unsigned int v9;
  const char *v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[4];
  __int16 v19;
  uint64_t v20;
  uint64_t v21;

  v2 = *(_QWORD *)a1;
  v20 = 0;
  v21 = 0;
  v3 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2) + 8) + 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 192))(v2, &v20))
  {
    v18[0] = "unexpected token in '.loc' directive";
    v19 = 259;
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    llvm::MCAsmParser::Error(v2, *(_QWORD *)(v16 + 96), (uint64_t)v18, 0, 0);
    return 1;
  }
  switch(v21)
  {
    case 3:
      if (*(_WORD *)v20 != 29545 || *(_BYTE *)(v20 + 2) != 97)
        goto LABEL_49;
      v3 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2) + 8) + 8);
      v17 = 0;
      v18[0] = 0;
      if (((*(uint64_t (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v2 + 232))(v2, &v17, v18) & 1) != 0)
        return 1;
      if (*(_BYTE *)v17 == 1)
      {
        v5 = *(_DWORD *)(v17 + 16);
        if ((v5 & 0x80000000) == 0)
        {
          **(_DWORD **)(a1 + 16) = v5;
          return 0;
        }
        v15 = "isa number less than zero";
      }
      else
      {
        v15 = "isa number not a constant value";
      }
      goto LABEL_50;
    case 7:
      if (*(_DWORD *)v20 != 1935635305 || *(_DWORD *)(v20 + 3) != 1953330291)
        goto LABEL_49;
      v3 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2) + 8) + 8);
      v17 = 0;
      v18[0] = 0;
      if (((*(uint64_t (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v2 + 232))(v2, &v17, v18) & 1) != 0)
        return 1;
      if (*(_BYTE *)v17 != 1)
      {
        v15 = "is_stmt value not the constant value of 0 or 1";
        goto LABEL_50;
      }
      v7 = *(_DWORD *)(v17 + 16);
      if (v7 != 1)
      {
        if (!v7)
        {
          v8 = *(unsigned int **)(a1 + 8);
          v9 = *v8 & 0xFFFFFFFE;
          goto LABEL_47;
        }
        v15 = "is_stmt value not 0 or 1";
LABEL_50:
        v18[0] = v15;
        v19 = 259;
        return llvm::MCAsmParser::Error(v2, v3, (uint64_t)v18, 0, 0);
      }
      v8 = *(unsigned int **)(a1 + 8);
      v9 = *v8 | 1;
LABEL_47:
      *v8 = v9;
      return 0;
    case 11:
      if (*(_QWORD *)v20 != 0x6C625F6369736162 || *(_QWORD *)(v20 + 3) != 0x6B636F6C625F6369)
        goto LABEL_49;
      v8 = *(unsigned int **)(a1 + 8);
      v9 = *v8 | 2;
      goto LABEL_47;
    case 12:
      if (*(_QWORD *)v20 != 0x6575676F6C6F7270 || *(_DWORD *)(v20 + 8) != 1684956511)
        goto LABEL_49;
      v8 = *(unsigned int **)(a1 + 8);
      v9 = *v8 | 4;
      goto LABEL_47;
    case 13:
      if (*(_QWORD *)v20 != 0x696D697263736964 || *(_QWORD *)(v20 + 5) != 0x726F74616E696D69)
        goto LABEL_49;
      return ((*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v2 + 256))(v2, *(_QWORD *)(a1 + 24)) & 1) != 0;
    case 14:
      if (*(_QWORD *)v20 != 0x6575676F6C697065 || *(_QWORD *)(v20 + 6) != 0x6E696765625F6575)
        goto LABEL_49;
      v8 = *(unsigned int **)(a1 + 8);
      v9 = *v8 | 8;
      goto LABEL_47;
    default:
LABEL_49:
      v15 = "unknown sub-directive in '.loc' directive";
      goto LABEL_50;
  }
}

uint64_t sub_1C61134C0(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t result;
  unint64_t *v7;
  unint64_t v8;
  const char *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[4];
  __int16 v13;
  uint64_t v14;
  uint64_t v15;

  v2 = *(_QWORD *)a1;
  v14 = 0;
  v15 = 0;
  v3 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2) + 8) + 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t *))(*(_QWORD *)v2 + 192))(v2, &v14))
  {
    v12[0] = "unexpected token in '.cv_loc' directive";
    v13 = 259;
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2);
    llvm::MCAsmParser::Error(v2, *(_QWORD *)(v10 + 96), (uint64_t)v12, 0, 0);
    return 1;
  }
  if (v15 != 7)
  {
    if (v15 == 12 && *(_QWORD *)v14 == 0x6575676F6C6F7270 && *(_DWORD *)(v14 + 8) == 1684956511)
    {
      result = 0;
      **(_BYTE **)(a1 + 8) = 1;
      return result;
    }
    goto LABEL_19;
  }
  if (*(_DWORD *)v14 == 1935635305 && *(_DWORD *)(v14 + 3) == 1953330291)
  {
    v3 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v2 + 40))(v2) + 8) + 8);
    v11 = 0;
    v12[0] = 0;
    if (((*(uint64_t (**)(uint64_t, uint64_t *, _QWORD *))(*(_QWORD *)v2 + 232))(v2, &v11, v12) & 1) == 0)
    {
      v7 = *(unint64_t **)(a1 + 16);
      *v7 = -1;
      if (*(_BYTE *)v11 == 1)
      {
        v8 = *(_QWORD *)(v11 + 16);
        *v7 = v8;
        if (v8 < 2)
          return 0;
      }
      v9 = "is_stmt value not 0 or 1";
      goto LABEL_23;
    }
    return 1;
  }
LABEL_19:
  v9 = "unknown sub-directive in '.cv_loc' directive";
LABEL_23:
  v12[0] = v9;
  v13 = 259;
  return llvm::MCAsmParser::Error(v2, v3, (uint64_t)v12, 0, 0);
}

uint64_t sub_1C611368C(uint64_t a1)
{
  int v2;
  int v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t *v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t result;
  uint64_t v13;

  v2 = *(_DWORD *)(a1 + 400);
  v3 = v2 - 1;
  v4 = *(unsigned int *)(a1 + 344);
  if ((v2 & 0x3F) != 0)
  {
    v13 = *(_QWORD *)(a1 + 336) + 8 * v4;
    *(_QWORD *)(v13 - 8) &= ~(-1 << (v2 & 0x3F));
  }
  v5 = v4;
  v6 = (uint64_t *)(a1 + 336);
  *(_DWORD *)(a1 + 400) = v3;
  v7 = v2 + 62;
  if ((_DWORD)v4 != v7 >> 6)
  {
    v8 = v7 >> 6;
    if (v4 > v8)
    {
      *(_DWORD *)(a1 + 344) = v8;
      v5 = v7 >> 6;
    }
    else
    {
      v9 = v4;
      if (v8 > *(_DWORD *)(a1 + 348))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 336, a1 + 352, v8, 8);
        v9 = *(unsigned int *)(a1 + 344);
        v5 = *(_DWORD *)(a1 + 344);
      }
      if (v8 != v4)
        bzero((void *)(*v6 + 8 * v9), 8 * (v8 - v4));
      v5 += v8 - v4;
      *(_DWORD *)(a1 + 344) = v5;
      v3 = *(_DWORD *)(a1 + 400);
    }
  }
  v10 = *v6;
  if ((v3 & 0x3F) != 0)
    *(_QWORD *)(v10 + 8 * v5 - 8) &= ~(-1 << (v3 & 0x3F));
  sub_1C610EBE4(a1, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 688) - 8) + 16), *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 688) - 8) + 8), (*(_QWORD *)(v10 + 8 * ((v3 - 1) >> 6)) >> (v3 - 1)) & 1);
  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
  v11 = *(_QWORD *)(a1 + 688);
  result = *(_QWORD *)(v11 - 8);
  if (result)
  {
    result = MEMORY[0x1CAA32FC0](result, 0x1050C4073F788CFLL);
    v11 = *(_QWORD *)(a1 + 688);
  }
  *(_QWORD *)(a1 + 688) = v11 - 8;
  return result;
}

uint64_t sub_1C6113804(llvm::MCAsmParser *a1, uint64_t *a2, _DWORD *a3)
{
  char v6;
  uint64_t *v7;
  uint64_t v8;
  uint64_t *v9;
  void **v10;
  void *v11;
  void **v12;
  void ***v13;
  void ***v14;
  void ***v15;
  void *v16;
  void *__p;
  uint64_t *v19;
  uint64_t v20;

  __p = 0;
  v19 = 0;
  v20 = 0;
  v6 = sub_1C6113A04(a1, a2, &__p, 9);
  v7 = (uint64_t *)__p;
  if ((v6 & 1) != 0)
  {
    v8 = 1;
    if (!__p)
      return v8;
    goto LABEL_11;
  }
  v9 = v19;
  if (__p == v19)
  {
LABEL_8:
    v8 = 0;
    if (a3)
      *a3 = -1431655765 * ((unint64_t)((char *)v19 - (char *)v7) >> 3);
    if (!v7)
      return v8;
LABEL_11:
    v10 = (void **)v19;
    v11 = v7;
    if (v19 != v7)
    {
      v12 = (void **)v19;
      do
      {
        v14 = (void ***)*(v12 - 3);
        v12 -= 3;
        v13 = v14;
        if (v14)
        {
          v15 = (void ***)*(v10 - 2);
          v16 = v13;
          if (v15 != v13)
          {
            do
              v15 = sub_1C60FEA30(v15 - 16);
            while (v15 != v13);
            v16 = *v12;
          }
          *(v10 - 2) = v13;
          operator delete(v16);
        }
        v10 = v12;
      }
      while (v12 != (void **)v7);
      v11 = __p;
    }
    v19 = v7;
    operator delete(v11);
    return v8;
  }
  while ((sub_1C61140F0((uint64_t)a1, a2, v7) & 1) == 0)
  {
    v7 += 3;
    if (v7 == v9)
    {
      v7 = (uint64_t *)__p;
      goto LABEL_8;
    }
  }
  v8 = 1;
  v7 = (uint64_t *)__p;
  if (__p)
    goto LABEL_11;
  return v8;
}

uint64_t sub_1C6113938(uint64_t a1, char *a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6;
  unsigned int *v7;
  uint64_t result;
  unsigned int v9;
  int v10;
  unsigned int v11;

  v6 = *(_QWORD *)(a1 + 504) + 96 * *(unsigned int *)(a1 + 512);
  v7 = sub_1C610FD14(v6 - 96, a2, a3, 2, *(_DWORD *)(a4 + 24));
  sub_1C610FF8C((uint64_t)(v7 + 12), (__int128 *)a4);
  v7[3] = *(_DWORD *)(a4 + 32);
  result = sub_1C6113A04((llvm::MCAsmParser *)a1, (_QWORD *)a4, (_QWORD *)v7 + 3, 9);
  if ((result & 1) == 0)
  {
    v9 = -1431655765 * ((*((_QWORD *)v7 + 4) - *((_QWORD *)v7 + 3)) >> 3);
    v10 = v7[3] * v9;
    v7[1] = v10;
    v7[2] = v9;
    v11 = v10 + *v7;
    if (!*(_BYTE *)(v6 - 80))
      *(_DWORD *)(v6 - 68) = v11;
    if (*(_DWORD *)(v6 - 64) > v11)
      v11 = *(_DWORD *)(v6 - 64);
    *(_DWORD *)(v6 - 64) = v11;
  }
  return result;
}

uint64_t sub_1C6113A04(llvm::MCAsmParser *a1, _QWORD *a2, _QWORD *a3, int a4)
{
  char v4;
  int v9;
  uint64_t v10;
  uint64_t v11;
  const char *v12;
  char v13;
  void **v14;
  void **v15;
  void *v16;
  void **v17;
  void ***v18;
  void ***v19;
  void ***v20;
  void *v21;
  uint64_t i;
  void **v23;
  int64_t v24;
  unint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unsigned __int8 *v29;
  void **v30;
  _QWORD *v31;
  char *v32;
  char *v33;
  int64_t v34;
  char *v35;
  uint64_t v36;
  unsigned __int8 *v37;
  int **v38;
  int *v39;
  int *v40;
  int64_t v41;
  char *v42;
  uint64_t v43;
  void **v44;
  void **v45;
  void **v46;
  void ***v47;
  void ***v48;
  void ***v49;
  void *v50;
  void **v51;
  int **j;
  int **v53;
  unint64_t v55;
  uint64_t v56;
  int64_t v57;
  uint64_t v58;
  void **v59;
  uint64_t v60;
  char v61;
  void **v62;
  void **v63;
  void **v64;
  unsigned __int8 *v65;
  void **v66;
  int **v67;
  uint64_t v68;
  void **v69;
  int **v70;
  int **v71;
  _QWORD *v72;
  const char *v73;
  __int16 v74;
  void *__p;
  void **v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  unsigned __int8 *v80;
  unsigned __int8 *v81;
  uint64_t v82;
  unsigned int v83;
  char *v84;
  unsigned __int8 *v85;
  void **v86;
  unsigned __int8 *v87;
  _QWORD *v88;

  v72 = a3 + 2;
  while (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1) + 8) != a4
       || a4 == 42
       && **(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1) + 8) != 44)
  {
    sub_1C610C428((uint64_t)&v79, (uint64_t)a1, 1);
    if (v79 == 2)
    {
      v84 = (char *)v80;
      v85 = v81;
      if (v81 == (unsigned __int8 *)3
        && !llvm::StringRef::compare_insensitive((unsigned __int8 **)&v84, "dup", 3uLL))
      {
        v78 = 0;
        v84 = 0;
        if (((*(uint64_t (**)(llvm::MCAsmParser *, uint64_t *, char **))(*(_QWORD *)a1 + 232))(a1, &v78, &v84) & 1) != 0|| (v84 = "unexpected token", LOWORD(v88) = 259, llvm::MCAsmParser::parseToken(a1, 2, (llvm::Twine *)&v84)))
        {
          v4 = 1;
        }
        else if (*(_BYTE *)v78 == 1)
        {
          v10 = *(_QWORD *)(v78 + 16);
          if (v10 < 0)
          {
            v11 = *(_QWORD *)(v78 + 8);
            v12 = "cannot repeat value a negative number of times";
            goto LABEL_23;
          }
          __p = 0;
          v76 = 0;
          v77 = 0;
          v73 = "parentheses required for 'dup' contents";
          v74 = 259;
          if (llvm::MCAsmParser::parseToken(a1, 17, (llvm::Twine *)&v73) || (sub_1C6113A04(a1, a2, &__p, 9) & 1) != 0)
          {
            v13 = 0;
            v4 = 1;
          }
          else
          {
            v56 = v10;
            v84 = "expected ')'";
            LOWORD(v88) = 259;
            if (llvm::MCAsmParser::parseToken(a1, 18, (llvm::Twine *)&v84))
            {
              v13 = 0;
              v4 = 1;
            }
            else if (v10)
            {
              for (i = 0; i != v10; ++i)
              {
                v64 = v76;
                if ((char *)v76 - (_BYTE *)__p >= 1)
                {
                  v23 = (void **)a3[1];
                  v24 = 0xAAAAAAAAAAAAAAABLL * (((char *)v76 - (_BYTE *)__p) >> 3);
                  v70 = (int **)__p;
                  v58 = i;
                  v59 = v23;
                  if ((uint64_t)(0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v72 - (_QWORD)v23) >> 3)) >= v24)
                  {
                    v55 = 0xAAAAAAAAAAAAAAABLL * (((char *)v76 - (_BYTE *)__p) >> 3);
                    v57 = 0;
                    if (v24 <= 0)
                    {
                      v67 = (int **)((char *)__p + 8 * (((char *)v76 - (_BYTE *)__p) >> 3));
                      v57 = 0xAAAAAAAAAAAAAAABLL * (((char *)v76 - (_BYTE *)__p) >> 3);
                    }
                    else
                    {
                      v67 = (int **)__p;
                      if (__p == v76)
                      {
                        v31 = (_QWORD *)a3[1];
                      }
                      else
                      {
                        v30 = (void **)__p;
                        v31 = (_QWORD *)a3[1];
                        do
                        {
                          *v31 = 0;
                          v31[1] = 0;
                          v31[2] = 0;
                          v33 = (char *)*v30;
                          v32 = (char *)v30[1];
                          v34 = v32 - (_BYTE *)*v30;
                          if (v32 != *v30)
                          {
                            v62 = v30;
                            if (v34 < 0)
                              goto LABEL_103;
                            v60 = v34 >> 7;
                            v35 = (char *)operator new(v34);
                            v36 = 0;
                            *v31 = v35;
                            v31[1] = v35;
                            v31[2] = &v35[128 * v60];
                            do
                            {
                              sub_1C611076C((uint64_t)&v35[v36], (int *)&v33[v36]);
                              v36 += 128;
                            }
                            while (&v33[v36] != v32);
                            v31[1] = &v35[v36];
                            v30 = v62;
                          }
                          v30 += 3;
                          v31 += 3;
                        }
                        while (v30 != v64);
                      }
                      a3[1] = v31;
                    }
                    v10 = v56;
                    i = v58;
                    v51 = v59;
                    if (v57 >= 1)
                    {
                      sub_1C6115A2C((uint64_t)a3, (uint64_t)v59, (unint64_t)v59, (uint64_t)&v59[3 * v55]);
                      for (j = v70; j != v67; j += 3)
                      {
                        if (j != (int **)v51)
                        {
                          v53 = j;
                          sub_1C6110E30(v51, *j, j[1], ((char *)j[1] - (char *)*j) >> 7);
                          j = v53;
                        }
                        v51 += 3;
                      }
                    }
                  }
                  else
                  {
                    v25 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v23 - *a3) >> 3);
                    v26 = v25 - 0x5555555555555555 * (((char *)v76 - (_BYTE *)__p) >> 3);
                    if (v26 > 0xAAAAAAAAAAAAAAALL)
LABEL_103:
                      abort();
                    v27 = 0xAAAAAAAAAAAAAAABLL * (((char *)v76 - (_BYTE *)__p) >> 3);
                    if (0x5555555555555556 * ((uint64_t)(*v72 - *a3) >> 3) > v26)
                      v26 = 0x5555555555555556 * ((uint64_t)(*v72 - *a3) >> 3);
                    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*v72 - *a3) >> 3) >= 0x555555555555555)
                      v28 = 0xAAAAAAAAAAAAAAALL;
                    else
                      v28 = v26;
                    v88 = v72;
                    if (v28)
                    {
                      if (v28 > 0xAAAAAAAAAAAAAAALL)
                        sub_1C4764EE4();
                      v29 = (unsigned __int8 *)operator new(24 * v28);
                    }
                    else
                    {
                      v29 = 0;
                    }
                    v37 = &v29[24 * v25];
                    v84 = (char *)v29;
                    v85 = v37;
                    v87 = &v29[24 * v28];
                    v65 = &v37[24 * v27];
                    v38 = v70;
                    do
                    {
                      *(_QWORD *)v37 = 0;
                      *((_QWORD *)v37 + 1) = 0;
                      *((_QWORD *)v37 + 2) = 0;
                      v40 = *v38;
                      v39 = v38[1];
                      v41 = (char *)v39 - (char *)*v38;
                      if (v39 != *v38)
                      {
                        v71 = v38;
                        if (v41 < 0)
                          goto LABEL_103;
                        v68 = v41 >> 7;
                        v42 = (char *)operator new(v41);
                        v43 = 0;
                        *(_QWORD *)v37 = v42;
                        *((_QWORD *)v37 + 1) = v42;
                        *((_QWORD *)v37 + 2) = &v42[128 * v68];
                        do
                        {
                          sub_1C611076C((uint64_t)&v42[v43 * 4], &v40[v43]);
                          v43 += 32;
                        }
                        while (&v40[v43] != v39);
                        *((_QWORD *)v37 + 1) = &v42[v43 * 4];
                        v38 = v71;
                      }
                      v37 += 24;
                      v38 += 3;
                    }
                    while (v37 != v65);
                    v86 = (void **)v65;
                    sub_1C6115B04(a3, &v84, v59);
                    v44 = (void **)v85;
                    v45 = v86;
                    if (v86 != (void **)v85)
                    {
                      v46 = v86;
                      do
                      {
                        v48 = (void ***)*(v46 - 3);
                        v46 -= 3;
                        v47 = v48;
                        v86 = v46;
                        if (v48)
                        {
                          v49 = (void ***)*(v45 - 2);
                          if (v49 == v47)
                          {
                            v50 = v47;
                          }
                          else
                          {
                            do
                              v49 = sub_1C60FEA30(v49 - 16);
                            while (v49 != v47);
                            v50 = *v46;
                            v46 = v86;
                          }
                          *(v45 - 2) = v47;
                          operator delete(v50);
                        }
                        v45 = v46;
                      }
                      while (v46 != v44);
                    }
                    if (v84)
                      operator delete(v84);
                    v10 = v56;
                    i = v58;
                  }
                }
              }
              v13 = 1;
            }
            else
            {
              v13 = 1;
            }
          }
          v14 = (void **)__p;
          if (__p)
          {
            v15 = v76;
            v16 = __p;
            if (v76 != __p)
            {
              v61 = v13;
              v17 = v76;
              v63 = (void **)__p;
              do
              {
                v19 = (void ***)*(v17 - 3);
                v17 -= 3;
                v18 = v19;
                if (v19)
                {
                  v69 = v17;
                  v20 = (void ***)*(v15 - 2);
                  v21 = v18;
                  if (v20 != v18)
                  {
                    v66 = v15;
                    do
                      v20 = sub_1C60FEA30(v20 - 16);
                    while (v20 != v18);
                    v15 = v66;
                    v21 = *v69;
                  }
                  *(v15 - 2) = v18;
                  operator delete(v21);
                  v14 = v63;
                  v17 = v69;
                }
                v15 = v17;
              }
              while (v17 != v14);
              v16 = __p;
              v13 = v61;
            }
            v76 = v14;
            operator delete(v16);
          }
          if ((v13 & 1) != 0)
          {
LABEL_40:
            if (llvm::MCAsmParser::parseOptionalToken(a1, 25))
            {
              llvm::MCAsmParser::parseOptionalToken(a1, 9);
              v9 = 0;
            }
            else
            {
              v9 = 3;
            }
            goto LABEL_10;
          }
        }
        else
        {
          v11 = *(_QWORD *)(v78 + 8);
          v12 = "cannot repeat value a non-constant number of times";
LABEL_23:
          v84 = (char *)v12;
          LOWORD(v88) = 259;
          v4 = llvm::MCAsmParser::Error((uint64_t)a1, v11, (uint64_t)&v84, 0, 0);
        }
        v9 = 1;
        goto LABEL_10;
      }
    }
    sub_1C6110250((void ***)a3);
    if ((sub_1C61143D8(a1, a2, (uint64_t ***)(a3[1] - 24)) & 1) == 0)
      goto LABEL_40;
    v9 = 1;
    v4 = 1;
LABEL_10:
    if (v83 >= 0x41 && v82)
      MEMORY[0x1CAA32F9C](v82, 0x1000C8000313F17);
    if (v9)
    {
      if (v9 != 3)
        return v4 & 1;
      break;
    }
  }
  v4 = 0;
  return v4 & 1;
}

uint64_t sub_1C61140F0(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int *v10;
  llvm::MCStreamer *v11;
  int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  llvm::MCStreamer *v16;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t *v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  unsigned int *v28;
  unsigned int *v29;
  uint64_t v30;
  uint64_t v31;
  llvm::MCStreamer *v32;
  uint64_t v33;
  unsigned __int8 **v34;
  uint64_t v35;
  llvm::MCStreamer *v36;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  _QWORD v42[4];
  __int16 v43;
  _QWORD v44[4];
  __int16 v45;

  if (!*((_BYTE *)a2 + 17))
  {
    v38 = *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 96);
    v43 = 1283;
    v39 = *a2;
    v40 = a2[1];
    v42[0] = "cannot initialize a value of type '";
    v42[2] = v39;
    v42[3] = v40;
    v44[0] = v42;
    v44[2] = "'; 'org' was used in the type's declaration";
    v45 = 770;
    return llvm::MCAsmParser::Error(a1, v38, (uint64_t)v44, 0, 0);
  }
  v6 = *a3;
  v7 = a3[1];
  if (*a3 == v7)
  {
    v9 = 0;
    v14 = *a3;
  }
  else
  {
    v8 = 0;
    v9 = 0;
    do
    {
      v10 = (unsigned int *)(a2[5] + v8);
      v11 = (llvm::MCStreamer *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
      llvm::MCStreamer::emitZeros(v11, *v10 - v9);
      v12 = *v10;
      v13 = v10[1];
      if ((sub_1C6115EBC(a1, (uint64_t)v10, v6) & 1) != 0)
        return 1;
      v9 = v13 + v12;
      v6 += 128;
      v8 += 144;
    }
    while (v6 != v7);
    v6 = *a3;
    v14 = a3[1];
  }
  v15 = (unsigned int *)(a2[5] + 144 * ((v14 - v6) >> 7));
  if (v15 == (unsigned int *)a2[6])
  {
LABEL_31:
    if (v9 != *((_DWORD *)a2 + 8))
    {
      v36 = (llvm::MCStreamer *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
      llvm::MCStreamer::emitZeros(v36, *((unsigned int *)a2 + 8) - v9);
    }
    return 0;
  }
  while (1)
  {
    v16 = (llvm::MCStreamer *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
    llvm::MCStreamer::emitZeros(v16, *v15 - v9);
    v17 = v15[1];
    v41 = *v15;
    v18 = v15[4];
    if (v18 == 2)
    {
      v26 = (_QWORD *)*((_QWORD *)v15 + 3);
      v27 = (_QWORD *)*((_QWORD *)v15 + 4);
      while (v26 != v27)
      {
        v28 = (unsigned int *)*((_QWORD *)v15 + 11);
        v29 = (unsigned int *)*((_QWORD *)v15 + 12);
        if (v28 != v29)
        {
          v30 = 0;
          v31 = 0;
          do
          {
            v32 = (llvm::MCStreamer *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
            llvm::MCStreamer::emitZeros(v32, *v28 - v31);
            v31 = v28[1] + *v28;
            sub_1C6115EBC(a1, (uint64_t)v28, *v26 + v30);
            v30 += 128;
            v28 += 36;
          }
          while (v28 != v29);
        }
        v26 += 3;
      }
      goto LABEL_30;
    }
    if (v18 != 1)
      break;
    v19 = v15[8];
    if ((_DWORD)v19)
    {
      v20 = (uint64_t *)*((_QWORD *)v15 + 3);
      v21 = 16 * v19;
      while (1)
      {
        v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
        v23 = *((_DWORD *)v20 + 2);
        v24 = v20;
        if (v23 < 0x41)
          goto LABEL_17;
        if (v23 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v20) <= 0x40)
          break;
        v25 = -1;
LABEL_18:
        (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v22 + 512))(v22, v25, v23 >> 3);
        v20 += 2;
        v21 -= 16;
        if (!v21)
          goto LABEL_30;
      }
      v24 = (uint64_t *)*v20;
LABEL_17:
      v25 = *v24;
      goto LABEL_18;
    }
LABEL_30:
    v9 = v17 + v41;
    v15 += 36;
    if (v15 == (unsigned int *)a2[6])
      goto LABEL_31;
  }
  v33 = v15[8];
  if (!(_DWORD)v33)
    goto LABEL_30;
  v34 = (unsigned __int8 **)*((_QWORD *)v15 + 3);
  v35 = 8 * v33;
  while ((sub_1C61113E4(a1, *v34, v15[3]) & 1) == 0)
  {
    ++v34;
    v35 -= 8;
    if (!v35)
      goto LABEL_30;
  }
  return 1;
}

uint64_t sub_1C61143D8(llvm::MCAsmParser *a1, _QWORD *a2, uint64_t ***a3)
{
  llvm::MCAsmParser *v5;
  int *v6;
  int v7;
  _BYTE *v8;
  uint64_t v9;
  unint64_t v10;
  void *v11;
  _BOOL4 v12;
  int v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _BOOL4 v17;
  uint64_t v18;
  int *v19;
  unint64_t v20;
  uint64_t **v21;
  __n128 v22;
  uint64_t **v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t **v29;
  uint64_t v30;
  uint64_t **v31;
  void ***v32;
  int *v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int *v36;
  unsigned int v37;
  unsigned int *v38;
  char v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  unsigned int *v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int *v46;
  int v47;
  unsigned int v48;
  uint64_t v49;
  BOOL v50;
  char v51;
  BOOL v52;
  uint64_t v53;
  unsigned int v54;
  const void *v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  unsigned int v59;
  std::string::size_type v60;
  unint64_t v61;
  unint64_t v62;
  char *v63;
  int **v64;
  int64_t v65;
  void **v66;
  unint64_t v67;
  unint64_t v68;
  char *v69;
  int64_t v70;
  int **v71;
  int **v72;
  _QWORD *v73;
  int *v74;
  int *v75;
  int64_t v76;
  _QWORD *v77;
  char *v78;
  uint64_t v79;
  char *v80;
  uint64_t v81;
  char *v82;
  char *v83;
  int *v84;
  int *v85;
  int64_t v86;
  uint64_t v87;
  char *v88;
  uint64_t v89;
  void **v90;
  void **v91;
  void **v92;
  void ***v93;
  void ***v94;
  void ***v95;
  void *v96;
  std::string *v97;
  std::string::size_type v98;
  std::string *v99;
  std::string::size_type v100;
  std::string *v101;
  std::string::size_type v102;
  std::string *v103;
  std::string::size_type v104;
  __int128 v105;
  __int128 v106;
  uint64_t v107;
  uint64_t v108;
  int64_t v109;
  unint64_t v110;
  char *v111;
  uint64_t v112;
  char *v113;
  char *v114;
  int64_t v115;
  unint64_t v116;
  char *v117;
  uint64_t v118;
  char *v119;
  char *v120;
  char *v121;
  char *v122;
  char *v123;
  void ***v124;
  void *v125;
  void ***v126;
  std::string::size_type v127;
  std::string::size_type v128;
  void *v129;
  void **v130;
  void ***v131;
  void ***v132;
  void ***v133;
  void *v134;
  uint64_t v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  int v139;
  unsigned int v140;
  uint64_t v141;
  int v142;
  char *v143;
  char v144;
  uint64_t v145;
  unsigned int v146;
  std::string *v147;
  std::string::size_type v148;
  std::string *v149;
  std::string::size_type v150;
  std::string *v151;
  std::string::size_type size;
  std::string *v153;
  std::string::size_type v154;
  int *v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  unint64_t v159;
  uint64_t v160;
  int v161;
  unsigned int *v162;
  uint64_t v163;
  unsigned int v164;
  void *v165;
  uint64_t v166;
  char *v168;
  char *v169;
  std::string *v170;
  std::string::size_type v171;
  std::string *v172;
  std::string::size_type v173;
  std::string *v174;
  std::string::size_type v175;
  std::string *v176;
  std::string::size_type v177;
  char v178;
  int *v179;
  char *v180;
  int v181;
  uint64_t i;
  uint64_t v183;
  BOOL v184;
  uint64_t v186;
  uint64_t v187;
  unint64_t v188;
  std::string::size_type v189;
  int **v190;
  std::string::size_type v191;
  unint64_t v192;
  unsigned int *v193;
  unsigned int *v194;
  uint64_t v195;
  int *v196;
  unint64_t v197;
  void *v198;
  unint64_t v199;
  int v200;
  llvm::MCAsmParser *v201;
  int v202;
  uint64_t ***v203;
  void *v204[2];
  __int128 v205;
  unsigned int v206;
  void *v207;
  char *v208;
  char *v209;
  _QWORD v210[4];
  std::string v211;
  void *__p;
  __int128 v213;
  _BYTE v214[25];
  char v215;
  uint64_t v216;
  uint64_t v217;
  __int128 v218;
  _BYTE v219[28];
  int v220;
  std::string v221;
  std::string v222;
  std::string v223;
  std::string v224;
  __int128 v225;
  __int128 v226;
  unsigned int v227;
  char *v228;
  char *v229;
  char *v230;
  _QWORD v231[6];

  v5 = a1;
  v231[4] = *MEMORY[0x1E0C80C00];
  v6 = *(int **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)a1 + 40))(a1) + 8);
  v7 = *v6;
  v8 = (_BYTE *)*((_QWORD *)v6 + 1);
  v9 = *((_QWORD *)v6 + 2);
  v10 = v6[8];
  if (v10 > 0x40)
  {
    v11 = (void *)operator new[]();
    memcpy(v11, *((const void **)v6 + 3), ((v10 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v11 = (void *)*((_QWORD *)v6 + 3);
  }
  v12 = llvm::MCAsmParser::parseOptionalToken(v5, 21);
  if (v12)
  {
    v13 = 22;
  }
  else
  {
    if (!sub_1C6115BC4((uint64_t *)v5))
    {
      v184 = v7 == 2 && v9 == 1;
      if (!v184 || *v8 != 63)
      {
        __p = "Expected struct initializer";
        *(_WORD *)&v214[8] = 259;
        v183 = llvm::MCAsmParser::Error((uint64_t)v5, (uint64_t)v8, (uint64_t)&__p, 0, 0);
        goto LABEL_264;
      }
      __p = "unexpected token";
      *(_WORD *)&v214[8] = 259;
      v14 = 1;
      if (llvm::MCAsmParser::parseToken(v5, 2, (llvm::Twine *)&__p))
        goto LABEL_278;
      v200 = 0;
      v202 = 0;
LABEL_10:
      v15 = 0;
LABEL_258:
      for (i = a2[5] + 144 * v15; i != a2[6]; i += 144)
        sub_1C61103D8(a3, (int *)(i + 16));
      if ((v14 & 1) != 0)
      {
        v14 = 0;
        goto LABEL_278;
      }
      if (v202)
      {
        __p = "expected '>'";
        *(_WORD *)&v214[8] = 259;
        v183 = sub_1C6115D58((uint64_t *)v5, (llvm::Twine *)&__p);
      }
      else
      {
        __p = "unexpected token";
        *(_WORD *)&v214[8] = 259;
        v183 = llvm::MCAsmParser::parseToken(v5, v200, (llvm::Twine *)&__p);
      }
LABEL_264:
      v14 = v183;
      goto LABEL_278;
    }
    ++*((_DWORD *)v5 + 266);
    v13 = 42;
  }
  v202 = !v12;
  v200 = v13;
  if (**(_DWORD **)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v5 + 40))(v5) + 8) == v13)
  {
    LOBYTE(v14) = 0;
    goto LABEL_10;
  }
  v15 = 0;
  v203 = a3;
  while (1)
  {
    v16 = a2[5];
    if (v15 >= 0x8E38E38E38E38E39 * ((a2[6] - v16) >> 4))
    {
      LOBYTE(v14) = 0;
      goto LABEL_258;
    }
    v198 = v11;
    v199 = v10;
    v10 = v15 + 1;
    v201 = v5;
    v17 = llvm::MCAsmParser::parseOptionalToken(v5, 25);
    v18 = v16 + 144 * v15;
    v19 = (int *)(v18 + 16);
    if (v17)
    {
      sub_1C61103D8(a3, (int *)(v18 + 16));
      v5 = v201;
      goto LABEL_174;
    }
    v21 = a3[1];
    v20 = (unint64_t)a3[2];
    if ((unint64_t)v21 < v20)
    {
      v22.n128_f64[0] = sub_1C6111028((uint64_t)a3[1], *v19);
      v23 = v21 + 16;
      goto LABEL_33;
    }
    v24 = ((char *)v21 - (char *)*a3) >> 7;
    if ((unint64_t)(v24 + 1) >> 57)
      goto LABEL_283;
    v25 = v20 - (_QWORD)*a3;
    v26 = v25 >> 6;
    if (v25 >> 6 <= (unint64_t)(v24 + 1))
      v26 = v24 + 1;
    v27 = (unint64_t)v25 >= 0x7FFFFFFFFFFFFF80 ? 0x1FFFFFFFFFFFFFFLL : v26;
    if (v27)
    {
      if (v27 >> 57)
        goto LABEL_284;
      v28 = (char *)operator new(v27 << 7);
    }
    else
    {
      v28 = 0;
    }
    v29 = (uint64_t **)&v28[128 * v27];
    v22.n128_f64[0] = sub_1C6111028((uint64_t)&v28[128 * v24], *v19);
    v23 = (uint64_t **)(v30 + 128);
    v31 = *v203;
    if (v21 == *v203)
    {
      *v203 = (uint64_t **)v30;
      v203[1] = v23;
      v203[2] = v29;
      a3 = v203;
      if (v21)
        goto LABEL_32;
    }
    else
    {
      do
      {
        v21 -= 16;
        v30 = sub_1C61104FC(v30 - 128, v21);
      }
      while (v21 != v31);
      v21 = *v203;
      v32 = (void ***)v203[1];
      *v203 = (uint64_t **)v30;
      v203[1] = v23;
      v203[2] = v29;
      a3 = v203;
      while (v32 != (void ***)v21)
      {
        v32 -= 16;
        sub_1C60FEA30(v32);
      }
      if (v21)
LABEL_32:
        operator delete(v21);
    }
LABEL_33:
    a3[1] = v23;
    v33 = (int *)(v23 - 16);
    v197 = v15 + 1;
    v196 = v33;
    if (*v19 != 2)
    {
      v40 = (uint64_t)v201;
      if (*v19 == 1)
      {
        v41 = v16 + 144 * v15;
        v42 = *(_DWORD *)(v41 + 12);
        if (v42 == 4)
        {
          v43 = (unsigned int *)&unk_1C866F184;
        }
        else if (v42 == 10)
        {
          v43 = (unsigned int *)&unk_1C866F1FC;
        }
        else
        {
          v43 = (unsigned int *)&unk_1C866F198;
        }
        v138 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *, __n128))(*(_QWORD *)v201 + 40))(v201, v22)+ 8)+ 8);
        *(_QWORD *)&v225 = &v226;
        *((_QWORD *)&v225 + 1) = 0x100000000;
        if (llvm::MCAsmParser::parseOptionalToken(v201, 21))
        {
          if (*(_DWORD *)(v16 + 144 * v15 + 8) != 1)
          {
            if ((sub_1C6111BE0(v201, v43, (uint64_t)&v225, 22) & 1) != 0)
              goto LABEL_275;
            __p = "unexpected token";
            *(_WORD *)&v214[8] = 259;
            if (llvm::MCAsmParser::parseToken(v201, 22, (llvm::Twine *)&__p))
              goto LABEL_275;
LABEL_192:
            v145 = DWORD2(v225);
            v146 = *(_DWORD *)(v16 + 144 * v15 + 8);
            if (DWORD2(v225) <= v146)
            {
              v155 = v33;
              v156 = *(_QWORD *)(v41 + 24) + 16 * DWORD2(v225);
              v157 = *(unsigned int *)(v41 + 32);
              v158 = 16 * v157 - 16 * DWORD2(v225);
              v159 = DWORD2(v225) + (v158 >> 4);
              v160 = DWORD2(v225);
              v161 = DWORD2(v225);
              v10 = v15 + 1;
              if (v159 > HIDWORD(v225))
              {
                sub_1C4DF5FEC((uint64_t)&v225, v159);
                v160 = DWORD2(v225);
                v161 = DWORD2(v225);
              }
              if ((_DWORD)v145 != (_DWORD)v157)
              {
                v162 = (unsigned int *)(v225 + 16 * v160 + 8);
                v163 = 16 * v157 - 16 * v145;
                do
                {
                  v164 = *(_DWORD *)(v156 + 8);
                  *v162 = v164;
                  if (v164 > 0x40)
                  {
                    v165 = (void *)operator new[]();
                    *((_QWORD *)v162 - 1) = v165;
                    memcpy(v165, *(const void **)v156, (((unint64_t)*v162 + 63) >> 3) & 0x3FFFFFF8);
                  }
                  else
                  {
                    *((_QWORD *)v162 - 1) = *(_QWORD *)v156;
                  }
                  v156 += 16;
                  v162 += 4;
                  v163 -= 16;
                }
                while (v163);
                v161 = DWORD2(v225);
              }
              DWORD2(v225) = v161 + ((unint64_t)v158 >> 4);
              LODWORD(__p) = 1;
              *(_QWORD *)&v213 = v214;
              *((_QWORD *)&v213 + 1) = 0x100000000;
              sub_1C56AA42C((uint64_t)&v213, (uint64_t)&v225);
              sub_1C61109F8(v155, (int ***)&__p);
              sub_1C60FEA30((void ***)&__p);
              sub_1C618E390((char **)&v225);
              goto LABEL_172;
            }
            std::to_string(&v222, v146);
            v147 = std::string::insert(&v222, 0, "Initializer too long for field; expected at most ");
            v148 = v147->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v223.__r_.__value_.__l.__data_ = *(_OWORD *)&v147->__r_.__value_.__l.__data_;
            v223.__r_.__value_.__r.__words[2] = v148;
            v147->__r_.__value_.__l.__size_ = 0;
            v147->__r_.__value_.__r.__words[2] = 0;
            v147->__r_.__value_.__r.__words[0] = 0;
            v149 = std::string::append(&v223, " elements, got ");
            v150 = v149->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v224.__r_.__value_.__l.__data_ = *(_OWORD *)&v149->__r_.__value_.__l.__data_;
            v224.__r_.__value_.__r.__words[2] = v150;
            v149->__r_.__value_.__l.__size_ = 0;
            v149->__r_.__value_.__r.__words[2] = 0;
            v149->__r_.__value_.__r.__words[0] = 0;
            std::to_string(&v221, DWORD2(v225));
            if ((v221.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              v151 = &v221;
            else
              v151 = (std::string *)v221.__r_.__value_.__r.__words[0];
            if ((v221.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
              size = *((_BYTE *)&v221.__r_.__value_.__s + 23) & 0x7F;
            else
              size = v221.__r_.__value_.__l.__size_;
            v153 = std::string::append(&v224, (const std::string::value_type *)v151, size);
            v154 = v153->__r_.__value_.__r.__words[2];
            *(_OWORD *)v204 = *(_OWORD *)&v153->__r_.__value_.__l.__data_;
            *(_QWORD *)&v205 = v154;
            v153->__r_.__value_.__l.__size_ = 0;
            v153->__r_.__value_.__r.__words[2] = 0;
            v153->__r_.__value_.__r.__words[0] = 0;
            *(_WORD *)&v214[8] = 260;
            __p = v204;
            v51 = llvm::MCAsmParser::Error(v40, v138, (uint64_t)&__p, 0, 0);
            v10 = v15 + 1;
            if (SBYTE7(v205) < 0)
              operator delete(v204[0]);
            if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v221.__r_.__value_.__l.__data_);
            if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v224.__r_.__value_.__l.__data_);
            if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v223.__r_.__value_.__l.__data_);
            if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
              operator delete(v222.__r_.__value_.__l.__data_);
            sub_1C618E390((char **)&v225);
            goto LABEL_210;
          }
        }
        else
        {
          v139 = sub_1C6115BC4((uint64_t *)v201);
          v140 = *(_DWORD *)(v16 + 144 * v15 + 8);
          if (!v139)
          {
            if (v140 <= 1)
            {
              v195 = v138;
              if (DWORD2(v225) >= HIDWORD(v225))
              {
                v179 = v33;
                __p = 0;
                v143 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&v225, 0, 16, (unint64_t *)&__p);
                v180 = &v143[16 * DWORD2(v225)];
                *((_DWORD *)v180 + 2) = 1;
                *(_QWORD *)v180 = 0;
                sub_1C4DF605C((uint64_t)&v225, (uint64_t)v143);
                v181 = (int)__p;
                if ((__int128 *)v225 != &v226)
                  free((void *)v225);
                *(_QWORD *)&v225 = v143;
                v142 = ++DWORD2(v225);
                HIDWORD(v225) = v181;
                a3 = v203;
                v33 = v179;
              }
              else
              {
                v141 = v225 + 16 * DWORD2(v225);
                *(_DWORD *)(v141 + 8) = 1;
                *(_QWORD *)v141 = 0;
                v142 = ++DWORD2(v225);
                v143 = (char *)v225;
              }
              v40 = (uint64_t)v201;
              v144 = sub_1C6112008((_DWORD **)v201, v43, (uint64_t)&v143[16 * v142 - 16]);
              v138 = v195;
              if ((v144 & 1) != 0)
              {
LABEL_275:
                sub_1C618E390((char **)&v225);
LABEL_276:
                v14 = 1;
                goto LABEL_277;
              }
              goto LABEL_192;
            }
            v168 = "Cannot initialize array field with scalar value";
LABEL_251:
            __p = v168;
            *(_WORD *)&v214[8] = 259;
            v178 = llvm::MCAsmParser::Error((uint64_t)v201, v138, (uint64_t)&__p, 0, 0);
            sub_1C618E390((char **)&v225);
            v10 = v15 + 1;
            if ((v178 & 1) != 0)
              goto LABEL_276;
            goto LABEL_172;
          }
          if (v140 != 1)
          {
            if ((sub_1C6111BE0(v201, v43, (uint64_t)&v225, 42) & 1) != 0)
              goto LABEL_275;
            __p = "expected '>'";
            *(_WORD *)&v214[8] = 259;
            if ((sub_1C6115D58((uint64_t *)v201, (llvm::Twine *)&__p) & 1) != 0)
              goto LABEL_275;
            goto LABEL_192;
          }
        }
        v168 = "Cannot initialize scalar field with array value";
        goto LABEL_251;
      }
      v44 = v16 + 144 * v15;
      v45 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *, __n128))(*(_QWORD *)v201 + 40))(v201, v22)+ 8)+ 8);
      *(_QWORD *)&v225 = &v226;
      *((_QWORD *)&v225 + 1) = 0x100000000;
      v46 = (unsigned int *)(v44 + 12);
      if (llvm::MCAsmParser::parseOptionalToken(v201, 21))
      {
        v166 = *v46;
        if (*(_DWORD *)(v16 + 144 * v15 + 8) != 1 || v166 < 2)
        {
          sub_1C6111330(v201, v166, (uint64_t)&v225, 22);
          __p = "unexpected token";
          *(_WORD *)&v214[8] = 259;
          v10 = v15 + 1;
          if (llvm::MCAsmParser::parseToken(v201, 22, (llvm::Twine *)&__p))
            goto LABEL_52;
          goto LABEL_62;
        }
        __p = "Cannot initialize scalar field with array value";
        *(_WORD *)&v214[8] = 259;
        v51 = llvm::MCAsmParser::Error((uint64_t)v201, v45, (uint64_t)&__p, 0, 0);
        v10 = v15 + 1;
      }
      else
      {
        v47 = sub_1C6115BC4((uint64_t *)v201);
        v48 = *(_DWORD *)(v16 + 144 * v15 + 8);
        v49 = *v46;
        if (v47)
        {
          v50 = v48 == 1 && v49 >= 2;
          v10 = v15 + 1;
          if (!v50)
          {
            sub_1C6111330(v201, v49, (uint64_t)&v225, 42);
            __p = "expected '>'";
            *(_WORD *)&v214[8] = 259;
            if ((sub_1C6115D58((uint64_t *)v201, (llvm::Twine *)&__p) & 1) != 0)
            {
LABEL_52:
              v51 = 1;
              goto LABEL_68;
            }
LABEL_62:
            v53 = DWORD2(v225);
            v54 = *(_DWORD *)(v16 + 144 * v15 + 8);
            if (DWORD2(v225) > v54)
            {
              std::to_string(&v222, v54);
              v170 = std::string::insert(&v222, 0, "Initializer too long for field; expected at most ");
              v171 = v170->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v223.__r_.__value_.__l.__data_ = *(_OWORD *)&v170->__r_.__value_.__l.__data_;
              v223.__r_.__value_.__r.__words[2] = v171;
              v170->__r_.__value_.__l.__size_ = 0;
              v170->__r_.__value_.__r.__words[2] = 0;
              v170->__r_.__value_.__r.__words[0] = 0;
              v172 = std::string::append(&v223, " elements, got ");
              v173 = v172->__r_.__value_.__r.__words[2];
              *(_OWORD *)&v224.__r_.__value_.__l.__data_ = *(_OWORD *)&v172->__r_.__value_.__l.__data_;
              v224.__r_.__value_.__r.__words[2] = v173;
              v172->__r_.__value_.__l.__size_ = 0;
              v172->__r_.__value_.__r.__words[2] = 0;
              v172->__r_.__value_.__r.__words[0] = 0;
              std::to_string(&v221, DWORD2(v225));
              if ((v221.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v174 = &v221;
              else
                v174 = (std::string *)v221.__r_.__value_.__r.__words[0];
              if ((v221.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
                v175 = *((_BYTE *)&v221.__r_.__value_.__s + 23) & 0x7F;
              else
                v175 = v221.__r_.__value_.__l.__size_;
              v176 = std::string::append(&v224, (const std::string::value_type *)v174, v175);
              v177 = v176->__r_.__value_.__r.__words[2];
              *(_OWORD *)v204 = *(_OWORD *)&v176->__r_.__value_.__l.__data_;
              *(_QWORD *)&v205 = v177;
              v176->__r_.__value_.__l.__size_ = 0;
              v176->__r_.__value_.__r.__words[2] = 0;
              v176->__r_.__value_.__r.__words[0] = 0;
              *(_WORD *)&v214[8] = 260;
              __p = v204;
              v51 = llvm::MCAsmParser::Error((uint64_t)v201, v45, (uint64_t)&__p, 0, 0);
              if (SBYTE7(v205) < 0)
                operator delete(v204[0]);
              if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v221.__r_.__value_.__l.__data_);
              if (SHIBYTE(v224.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v224.__r_.__value_.__l.__data_);
              if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v223.__r_.__value_.__l.__data_);
              if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
                operator delete(v222.__r_.__value_.__l.__data_);
            }
            else
            {
              v55 = (const void *)(*(_QWORD *)(v44 + 24) + 8 * DWORD2(v225));
              v56 = *(unsigned int *)(v44 + 32);
              v57 = 8 * v56 - 8 * DWORD2(v225);
              v58 = DWORD2(v225) + (v57 >> 3);
              v59 = DWORD2(v225);
              if (v58 > HIDWORD(v225))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v225, (uint64_t)&v226, v58, 8);
                v59 = DWORD2(v225);
              }
              if ((_DWORD)v53 != (_DWORD)v56)
              {
                memcpy((void *)(v225 + 8 * v59), v55, 8 * v56 - 8 * v53);
                v59 = DWORD2(v225);
              }
              DWORD2(v225) = v59 + ((unint64_t)v57 >> 3);
              LODWORD(__p) = 0;
              *(_QWORD *)&v213 = v214;
              *((_QWORD *)&v213 + 1) = 0x100000000;
              sub_1C49F5C14((uint64_t)&v213, (uint64_t)&v225);
              sub_1C61109F8(v196, (int ***)&__p);
              sub_1C60FEA30((void ***)&__p);
              v51 = 0;
            }
            goto LABEL_68;
          }
          v169 = "Cannot initialize scalar field with array value";
        }
        else
        {
          v52 = v48 >= 2 && v49 >= 2;
          v10 = v15 + 1;
          if (!v52)
          {
            if ((sub_1C6111528(v201, v49, (uint64_t)&v225, v48) & 1) != 0)
              goto LABEL_52;
            goto LABEL_62;
          }
          v169 = "Cannot initialize array field with scalar value";
        }
        __p = v169;
        *(_WORD *)&v214[8] = 259;
        v51 = llvm::MCAsmParser::Error((uint64_t)v201, v45, (uint64_t)&__p, 0, 0);
      }
LABEL_68:
      if ((__int128 *)v225 != &v226)
        free((void *)v225);
LABEL_210:
      if ((v51 & 1) != 0)
        goto LABEL_276;
      goto LABEL_172;
    }
    v34 = v16 + 144 * v15;
    v35 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *, __n128))(*(_QWORD *)v201 + 40))(v201, v22)+ 8)+ 8);
    memset(&v224, 0, sizeof(v224));
    v37 = *(_DWORD *)(v34 + 8);
    v36 = (unsigned int *)(v34 + 8);
    v38 = v36 + 4;
    if (v37 >= 2)
    {
      if (!llvm::MCAsmParser::parseOptionalToken(v201, 21))
      {
        if (sub_1C6115BC4((uint64_t *)v201))
        {
          if ((sub_1C6113A04(v201, v36 + 10, &v224, 42) & 1) == 0)
          {
            __p = "expected '>'";
            *(_WORD *)&v214[8] = 259;
            if ((sub_1C6115D58((uint64_t *)v201, (llvm::Twine *)&__p) & 1) == 0)
              goto LABEL_73;
          }
LABEL_36:
          v39 = 1;
        }
        else
        {
          __p = "Cannot initialize array field with scalar value";
          *(_WORD *)&v214[8] = 259;
          v39 = llvm::MCAsmParser::Error((uint64_t)v201, v35, (uint64_t)&__p, 0, 0);
        }
        v10 = v197;
        goto LABEL_160;
      }
      if ((sub_1C6113A04(v201, v36 + 10, &v224, 22) & 1) != 0)
        goto LABEL_36;
      __p = "unexpected token";
      *(_WORD *)&v214[8] = 259;
      if (llvm::MCAsmParser::parseToken(v201, 22, (llvm::Twine *)&__p))
        goto LABEL_36;
    }
    else
    {
      sub_1C6110250((void ***)&v224);
      if ((sub_1C61143D8(v201, v36 + 10, v224.__r_.__value_.__l.__size_ - 24) & 1) != 0)
        goto LABEL_36;
    }
LABEL_73:
    v60 = v224.__r_.__value_.__l.__size_;
    v61 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v224.__r_.__value_.__l.__size_ - v224.__r_.__value_.__r.__words[0]) >> 3);
    v62 = *v36;
    if (v61 > v62)
    {
      std::to_string(&v221, v62);
      v97 = std::string::insert(&v221, 0, "Initializer too long for field; expected at most ");
      v98 = v97->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v222.__r_.__value_.__l.__data_ = *(_OWORD *)&v97->__r_.__value_.__l.__data_;
      v222.__r_.__value_.__r.__words[2] = v98;
      v97->__r_.__value_.__l.__size_ = 0;
      v97->__r_.__value_.__r.__words[2] = 0;
      v97->__r_.__value_.__r.__words[0] = 0;
      v99 = std::string::append(&v222, " elements, got ");
      v100 = v99->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v223.__r_.__value_.__l.__data_ = *(_OWORD *)&v99->__r_.__value_.__l.__data_;
      v223.__r_.__value_.__r.__words[2] = v100;
      v99->__r_.__value_.__l.__size_ = 0;
      v99->__r_.__value_.__r.__words[2] = 0;
      v99->__r_.__value_.__r.__words[0] = 0;
      std::to_string(&v211, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v224.__r_.__value_.__l.__size_ - v224.__r_.__value_.__r.__words[0]) >> 3));
      if ((v211.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v101 = &v211;
      else
        v101 = (std::string *)v211.__r_.__value_.__r.__words[0];
      if ((v211.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v102 = *((_BYTE *)&v211.__r_.__value_.__s + 23) & 0x7F;
      else
        v102 = v211.__r_.__value_.__l.__size_;
      v103 = std::string::append(&v223, (const std::string::value_type *)v101, v102);
      v104 = v103->__r_.__value_.__r.__words[2];
      v225 = *(_OWORD *)&v103->__r_.__value_.__l.__data_;
      *(_QWORD *)&v226 = v104;
      v103->__r_.__value_.__l.__size_ = 0;
      v103->__r_.__value_.__r.__words[2] = 0;
      v103->__r_.__value_.__r.__words[0] = 0;
      *(_WORD *)&v214[8] = 260;
      __p = &v225;
      v39 = llvm::MCAsmParser::Error((uint64_t)v201, v35, (uint64_t)&__p, 0, 0);
      if (SBYTE7(v226) < 0)
        operator delete((void *)v225);
      v10 = v197;
      if (SHIBYTE(v211.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v211.__r_.__value_.__l.__data_);
      if (SHIBYTE(v223.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v223.__r_.__value_.__l.__data_);
      if (SHIBYTE(v222.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v222.__r_.__value_.__l.__data_);
      if (SHIBYTE(v221.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v221.__r_.__value_.__l.__data_);
    }
    else
    {
      v63 = (char *)*((_QWORD *)v36 + 3);
      v64 = (int **)(*(_QWORD *)v38
                   + 8 * ((uint64_t)(v224.__r_.__value_.__l.__size_ - v224.__r_.__value_.__r.__words[0]) >> 3));
      if (v63 - (char *)v64 >= 1)
      {
        v65 = 0xAAAAAAAAAAAAAAABLL * ((v63 - (char *)v64) >> 3);
        v66 = (void **)(v224.__r_.__value_.__r.__words[0]
                      + 8 * ((uint64_t)(v224.__r_.__value_.__l.__size_ - v224.__r_.__value_.__r.__words[0]) >> 3));
        if ((uint64_t)(0xAAAAAAAAAAAAAAABLL
                     * ((uint64_t)(v224.__r_.__value_.__r.__words[2] - v224.__r_.__value_.__l.__size_) >> 3)) >= v65)
        {
          v70 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v224.__r_.__value_.__l.__size_ - (_QWORD)v66) >> 3);
          if (v70 >= v65)
          {
            v71 = &v64[(v63 - (char *)v64) >> 3];
            v70 = 0xAAAAAAAAAAAAAAABLL * ((v63 - (char *)v64) >> 3);
          }
          else
          {
            v192 = 0xAAAAAAAAAAAAAAABLL * ((v63 - (char *)v64) >> 3);
            v71 = &v64[(uint64_t)(v224.__r_.__value_.__l.__size_ - (_QWORD)v66) >> 3];
            if (v71 == (int **)v63)
            {
              v73 = (_QWORD *)v224.__r_.__value_.__l.__size_;
            }
            else
            {
              v188 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v224.__r_.__value_.__l.__size_ - (_QWORD)v66) >> 3);
              v189 = v224.__r_.__value_.__r.__words[0]
                   + 8 * ((uint64_t)(v224.__r_.__value_.__l.__size_ - v224.__r_.__value_.__r.__words[0]) >> 3);
              v194 = v38;
              v190 = &v64[(uint64_t)(v224.__r_.__value_.__l.__size_ - (_QWORD)v66) >> 3];
              v191 = v224.__r_.__value_.__l.__size_;
              v72 = v190;
              v73 = (_QWORD *)v224.__r_.__value_.__l.__size_;
              do
              {
                *v73 = 0;
                v73[1] = 0;
                v73[2] = 0;
                v74 = *v72;
                v75 = v72[1];
                v76 = (char *)v75 - (char *)*v72;
                if (v75 != *v72)
                {
                  if (v76 < 0)
                    goto LABEL_283;
                  v77 = a2;
                  v78 = v63;
                  v79 = v76 >> 7;
                  v80 = (char *)operator new(v76);
                  v81 = 0;
                  *v73 = v80;
                  v73[1] = v80;
                  v73[2] = &v80[128 * v79];
                  do
                  {
                    sub_1C611076C((uint64_t)&v80[v81 * 4], &v74[v81]);
                    v81 += 32;
                  }
                  while (&v74[v81] != v75);
                  v73[1] = &v80[v81 * 4];
                  v63 = v78;
                  a2 = v77;
                }
                v72 += 3;
                v73 += 3;
              }
              while (v72 != (int **)v63);
              a3 = v203;
              v38 = v194;
              v71 = v190;
              v60 = v191;
              v70 = v188;
              v66 = (void **)v189;
            }
            v224.__r_.__value_.__l.__size_ = (std::string::size_type)v73;
            v65 = v192;
          }
          if (v70 >= 1)
          {
            sub_1C6115A2C((uint64_t)&v224, (uint64_t)v66, v60, (uint64_t)&v66[3 * v65]);
            while (v64 != v71)
            {
              if (v64 != (int **)v66)
                sub_1C6110E30(v66, *v64, v64[1], ((char *)v64[1] - (char *)*v64) >> 7);
              v64 += 3;
              v66 += 3;
            }
          }
        }
        else
        {
          if ((unint64_t)(v65
                                - 0x5555555555555555
                                * ((uint64_t)(v224.__r_.__value_.__l.__size_ - v224.__r_.__value_.__r.__words[0]) >> 3)) > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_283;
          v67 = 0x5555555555555556
              * ((uint64_t)(v224.__r_.__value_.__r.__words[2] - v224.__r_.__value_.__r.__words[0]) >> 3);
          if (v67 <= v65
                    - 0x5555555555555555
                    * ((uint64_t)(v224.__r_.__value_.__l.__size_ - v224.__r_.__value_.__r.__words[0]) >> 3))
            v67 = v65
                - 0x5555555555555555
                * ((uint64_t)(v224.__r_.__value_.__l.__size_ - v224.__r_.__value_.__r.__words[0]) >> 3);
          if (0xAAAAAAAAAAAAAAABLL
             * ((uint64_t)(v224.__r_.__value_.__r.__words[2] - v224.__r_.__value_.__r.__words[0]) >> 3) >= 0x555555555555555)
            v68 = 0xAAAAAAAAAAAAAAALL;
          else
            v68 = v67;
          *(_QWORD *)&v214[8] = (char *)&v224.__r_.__value_.__l + 16;
          v193 = v36 + 4;
          if (v68)
          {
            if (v68 > 0xAAAAAAAAAAAAAAALL)
LABEL_284:
              sub_1C4764EE4();
            v69 = (char *)operator new(24 * v68);
          }
          else
          {
            v69 = 0;
          }
          v82 = &v69[24 * v61];
          __p = v69;
          *(_QWORD *)&v213 = v82;
          *(_QWORD *)v214 = &v69[24 * v68];
          v83 = &v82[24 * v65];
          do
          {
            *(_QWORD *)v82 = 0;
            *((_QWORD *)v82 + 1) = 0;
            *((_QWORD *)v82 + 2) = 0;
            v84 = *v64;
            v85 = v64[1];
            v86 = (char *)v85 - (char *)*v64;
            if (v85 != *v64)
            {
              if (v86 < 0)
                goto LABEL_283;
              v87 = v86 >> 7;
              v88 = (char *)operator new(v86);
              v89 = 0;
              *(_QWORD *)v82 = v88;
              *((_QWORD *)v82 + 1) = v88;
              *((_QWORD *)v82 + 2) = &v88[128 * v87];
              do
              {
                sub_1C611076C((uint64_t)&v88[v89 * 4], &v84[v89]);
                v89 += 32;
              }
              while (&v84[v89] != v85);
              *((_QWORD *)v82 + 1) = &v88[v89 * 4];
              a3 = v203;
            }
            v82 += 24;
            v64 += 3;
          }
          while (v82 != v83);
          *((_QWORD *)&v213 + 1) = v83;
          sub_1C6115B04(&v224, &__p, v66);
          v91 = (void **)*((_QWORD *)&v213 + 1);
          v90 = (void **)v213;
          v38 = v193;
          if (*((_QWORD *)&v213 + 1) != (_QWORD)v213)
          {
            v92 = (void **)*((_QWORD *)&v213 + 1);
            do
            {
              v94 = (void ***)*(v92 - 3);
              v92 -= 3;
              v93 = v94;
              *((_QWORD *)&v213 + 1) = v92;
              if (v94)
              {
                v95 = (void ***)*(v91 - 2);
                if (v95 == v93)
                {
                  v96 = v93;
                }
                else
                {
                  do
                    v95 = sub_1C60FEA30(v95 - 16);
                  while (v95 != v93);
                  v96 = *v92;
                  v92 = (void **)*((_QWORD *)&v213 + 1);
                }
                *(v91 - 2) = v93;
                operator delete(v96);
              }
              v91 = v92;
            }
            while (v92 != v90);
          }
          if (__p)
            operator delete(__p);
        }
      }
      v105 = *(_OWORD *)(v38 + 6);
      v106 = *(_OWORD *)(v38 + 10);
      v206 = v38[14];
      *(_OWORD *)v204 = v105;
      v205 = v106;
      v208 = 0;
      v209 = 0;
      v207 = 0;
      v107 = *((_QWORD *)v38 + 8);
      v108 = *((_QWORD *)v38 + 9);
      v109 = v108 - v107;
      if (v108 != v107)
      {
        v110 = 0x8E38E38E38E38E39 * (v109 >> 4);
        if (v110 > 0x1C71C71C71C71C7)
          goto LABEL_283;
        v111 = (char *)operator new(v109);
        v112 = 0;
        v207 = v111;
        v208 = v111;
        v209 = &v111[144 * v110];
        do
        {
          *(_OWORD *)&v111[v112] = *(_OWORD *)(v107 + v112);
          sub_1C611076C((uint64_t)&v111[v112 + 16], (int *)(v107 + v112 + 16));
          v112 += 144;
        }
        while (v107 + v112 != v108);
        v208 = &v111[v112];
      }
      sub_1C61108DC(v210, (uint64_t)(v38 + 22));
      LODWORD(__p) = 2;
      v225 = *(_OWORD *)v204;
      v226 = v205;
      v227 = v206;
      v229 = 0;
      v230 = 0;
      v228 = 0;
      v113 = (char *)v207;
      v114 = v208;
      v115 = v208 - (_BYTE *)v207;
      if (v208 != v207)
      {
        v116 = 0x8E38E38E38E38E39 * (v115 >> 4);
        if (v116 > 0x1C71C71C71C71C7)
LABEL_283:
          abort();
        v117 = (char *)operator new(v115);
        v118 = 0;
        v228 = v117;
        v229 = v117;
        v230 = &v117[144 * v116];
        do
        {
          *(_OWORD *)&v117[v118] = *(_OWORD *)&v113[v118];
          sub_1C611076C((uint64_t)&v117[v118 + 16], (int *)&v113[v118 + 16]);
          v118 += 144;
        }
        while (&v113[v118] != v114);
        v229 = &v117[v118];
      }
      sub_1C61108DC(v231, (uint64_t)v210);
      v213 = 0u;
      memset(v214, 0, sizeof(v214));
      v215 = 1;
      v216 = 0;
      v217 = 0;
      v218 = 0u;
      memset(v219, 0, sizeof(v219));
      v220 = 16;
      sub_1C6110AEC((uint64_t)&v213, (int **)v224.__r_.__value_.__l.__data_, (int **)v224.__r_.__value_.__l.__size_);
      sub_1C610FF8C((uint64_t)&v214[8], &v225);
      sub_1C61DF2A0((uint64_t)v231);
      v119 = v228;
      if (v228)
      {
        v120 = v229;
        v121 = v228;
        if (v229 != v228)
        {
          do
          {
            v122 = v120 - 144;
            sub_1C60FEA30((void ***)v120 - 16);
            v120 = v122;
          }
          while (v122 != v119);
          v121 = v228;
        }
        v229 = v119;
        operator delete(v121);
      }
      sub_1C61109F8(v196, (int ***)&__p);
      sub_1C60FEA30((void ***)&__p);
      sub_1C61DF2A0((uint64_t)v210);
      v123 = (char *)v207;
      v10 = v197;
      if (v207)
      {
        v124 = (void ***)v208;
        v125 = v207;
        if (v208 != v207)
        {
          do
          {
            v126 = v124 - 18;
            sub_1C60FEA30(v124 - 16);
            v124 = v126;
          }
          while (v126 != (void ***)v123);
          v125 = v207;
        }
        v208 = v123;
        operator delete(v125);
      }
      v39 = 0;
    }
LABEL_160:
    v127 = v224.__r_.__value_.__r.__words[0];
    if (v224.__r_.__value_.__r.__words[0])
    {
      v128 = v224.__r_.__value_.__l.__size_;
      v129 = (void *)v224.__r_.__value_.__r.__words[0];
      if (v224.__r_.__value_.__l.__size_ != v224.__r_.__value_.__r.__words[0])
      {
        v130 = (void **)v224.__r_.__value_.__l.__size_;
        do
        {
          v132 = (void ***)*(v130 - 3);
          v130 -= 3;
          v131 = v132;
          if (v132)
          {
            v133 = *(void ****)(v128 - 16);
            v134 = v131;
            if (v133 != v131)
            {
              do
                v133 = sub_1C60FEA30(v133 - 16);
              while (v133 != v131);
              v134 = *v130;
            }
            *(_QWORD *)(v128 - 16) = v131;
            operator delete(v134);
          }
          v128 = (std::string::size_type)v130;
        }
        while (v130 != (void **)v127);
        v129 = (void *)v224.__r_.__value_.__r.__words[0];
      }
      v224.__r_.__value_.__l.__size_ = v127;
      operator delete(v129);
    }
    if ((v39 & 1) != 0)
      goto LABEL_276;
LABEL_172:
    v5 = v201;
    v135 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v201 + 40))(v201) + 8)
                     + 8);
    if (!llvm::MCAsmParser::parseOptionalToken(v201, 25))
    {
      LOBYTE(v14) = 0;
      v15 = v10;
      v11 = v198;
      LODWORD(v10) = v199;
      goto LABEL_258;
    }
    v13 = v200;
    if (v10 == 0x8E38E38E38E38E39 * ((uint64_t)(a2[6] - a2[5]) >> 4))
      break;
LABEL_174:
    llvm::MCAsmParser::parseOptionalToken(v5, 9);
    v136 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v5 + 40))(v5);
    v15 = v10;
    v137 = v10;
    v11 = v198;
    v10 = v199;
    if (**(_DWORD **)(v136 + 8) == v13)
    {
      LOBYTE(v14) = 0;
      v15 = v137;
      goto LABEL_258;
    }
  }
  LOWORD(v227) = 1283;
  v186 = *a2;
  v187 = a2[1];
  *(_QWORD *)&v225 = "'";
  *(_QWORD *)&v226 = v186;
  *((_QWORD *)&v226 + 1) = v187;
  __p = &v225;
  *((_QWORD *)&v213 + 1) = "' initializer initializes too many fields";
  *(_WORD *)&v214[8] = 770;
  v14 = llvm::MCAsmParser::Error((uint64_t)v201, v135, (uint64_t)&__p, 0, 0);
LABEL_277:
  v11 = v198;
  LODWORD(v10) = v199;
LABEL_278:
  if (v10 >= 0x41 && v11)
    MEMORY[0x1CAA32F9C](v11, 0x1000C8000313F17);
  return v14;
}

__n128 sub_1C6115A2C(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v4;
  unint64_t v5;
  __n128 *v6;
  __n128 *v7;
  __n128 result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v4 = *(_QWORD *)(a1 + 8);
  v5 = a2 + v4 - a4;
  if (v5 >= a3)
  {
    v7 = *(__n128 **)(a1 + 8);
  }
  else
  {
    v6 = (__n128 *)(a2 + v4 - a4);
    v7 = *(__n128 **)(a1 + 8);
    do
    {
      v7->n128_u64[0] = 0;
      v7->n128_u64[1] = 0;
      v7[1].n128_u64[0] = 0;
      result = *v6;
      *v7 = *v6;
      v7[1].n128_u64[0] = v6[1].n128_u64[0];
      v7 = (__n128 *)((char *)v7 + 24);
      v6->n128_u64[0] = 0;
      v6->n128_u64[1] = 0;
      v6[1].n128_u64[0] = 0;
      v6 = (__n128 *)((char *)v6 + 24);
    }
    while ((unint64_t)v6 < a3);
  }
  *(_QWORD *)(a1 + 8) = v7;
  if (v4 != a4)
  {
    v9 = 0;
    v10 = -8 * ((v4 - a4) >> 3);
    do
    {
      v11 = v5 + v9;
      v12 = v4 + v9;
      sub_1C6110FCC((void **)(v4 + v9 - 24));
      result = *(__n128 *)(v5 + v9 - 24);
      *(__n128 *)(v12 - 24) = result;
      *(_QWORD *)(v12 - 8) = *(_QWORD *)(v5 + v9 - 8);
      *(_QWORD *)(v11 - 24) = 0;
      *(_QWORD *)(v11 - 16) = 0;
      *(_QWORD *)(v11 - 8) = 0;
      v9 -= 24;
    }
    while (v10 != v9);
  }
  return result;
}

_QWORD *sub_1C6115B04(_QWORD *result, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  _QWORD *v4;
  _QWORD *v5;
  __int128 v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v3 = a2[1];
  v4 = (_QWORD *)*result;
  if ((_QWORD *)*result != a3)
  {
    v5 = a3;
    do
    {
      *(_QWORD *)(v3 - 24) = 0;
      *(_QWORD *)(v3 - 16) = 0;
      v3 -= 24;
      *(_QWORD *)(v3 + 16) = 0;
      v6 = *(_OWORD *)(v5 - 3);
      v5 -= 3;
      *(_OWORD *)v3 = v6;
      *(_QWORD *)(v3 + 16) = v5[2];
      *v5 = 0;
      v5[1] = 0;
      v5[2] = 0;
    }
    while (v5 != v4);
  }
  a2[1] = v3;
  v7 = (_QWORD *)result[1];
  v8 = (_QWORD *)a2[2];
  if (v7 != a3)
  {
    do
    {
      *v8 = 0;
      v8[1] = 0;
      v8[2] = 0;
      *(_OWORD *)v8 = *(_OWORD *)a3;
      v8[2] = a3[2];
      v8 += 3;
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      a3 += 3;
    }
    while (a3 != v7);
    v3 = a2[1];
  }
  a2[2] = v8;
  v9 = (_QWORD *)*result;
  *result = v3;
  a2[1] = v9;
  v10 = result[1];
  result[1] = a2[2];
  a2[2] = v10;
  v11 = result[2];
  result[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1C6115BC4(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;
  BOOL v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;

  v2 = *(_QWORD *)((*(uint64_t (**)(uint64_t *))(*a1 + 40))(a1) + 8);
  v3 = *(_QWORD *)(v2 + 8);
  v4 = *(_QWORD *)(v2 + 16);
  v5 = *(unsigned int *)(v2 + 32);
  if (v5 > 0x40)
  {
    v6 = (void *)operator new[]();
    memcpy(v6, *(const void **)(v2 + 24), ((unint64_t)(v5 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v6 = *(void **)(v2 + 24);
  }
  if (llvm::MCAsmParser::parseOptionalToken((llvm::MCAsmParser *)a1, 40))
  {
    ++*((_DWORD *)a1 + 266);
    v7 = v4 == 0;
    v8 = 38;
    goto LABEL_6;
  }
  if (llvm::MCAsmParser::parseOptionalToken((llvm::MCAsmParser *)a1, 41))
  {
    ++*((_DWORD *)a1 + 266);
    v7 = v4 == 0;
    v8 = 42;
LABEL_6:
    v16 = v8;
    v9 = !v7;
    if (v7)
      v10 = v3;
    else
      v10 = v3 + 1;
    v17 = v10;
    v18 = v4 - v9;
    v20 = 64;
    v19 = 0;
    v12 = a1[6];
    v11 = (uint64_t)(a1 + 6);
    *(_BYTE *)(v11 + 99) = 0;
    sub_1C4CD9B2C(v11, v12, (unint64_t)&v16);
    if (v20 >= 0x41 && v19)
      MEMORY[0x1CAA32F9C](v19, 0x1000C8000313F17);
    goto LABEL_15;
  }
  if (llvm::MCAsmParser::parseOptionalToken((llvm::MCAsmParser *)a1, 38))
  {
    ++*((_DWORD *)a1 + 266);
LABEL_15:
    v13 = 1;
    goto LABEL_16;
  }
  v13 = 0;
LABEL_16:
  if (v5 >= 0x41 && v6 != 0)
    MEMORY[0x1CAA32F9C](v6, 0x1000C8000313F17);
  return v13;
}

uint64_t sub_1C6115D58(uint64_t *a1, llvm::Twine *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;

  v4 = *(_QWORD *)((*(uint64_t (**)(uint64_t *))(*a1 + 40))(a1) + 8);
  v5 = *(_QWORD *)(v4 + 8);
  v6 = *(_QWORD *)(v4 + 16);
  v7 = *(unsigned int *)(v4 + 32);
  if (v7 > 0x40)
  {
    v8 = (void *)operator new[]();
    memcpy(v8, *(const void **)(v4 + 24), ((unint64_t)(v7 + 63) >> 3) & 0x3FFFFFF8);
  }
  else
  {
    v8 = *(void **)(v4 + 24);
  }
  if (llvm::MCAsmParser::parseOptionalToken((llvm::MCAsmParser *)a1, 44))
  {
    v14 = 42;
    if (v6)
      v9 = v5 + 1;
    else
      v9 = v5;
    v15 = v9;
    v16 = v6 - (v6 != 0);
    v18 = 64;
    v17 = 0;
    v10 = a1[6];
    *((_BYTE *)a1 + 147) = 0;
    sub_1C4CD9B2C((uint64_t)(a1 + 6), v10, (unint64_t)&v14);
    if (v18 >= 0x41 && v17)
      MEMORY[0x1CAA32F9C](v17, 0x1000C8000313F17);
    goto LABEL_11;
  }
  if (!llvm::MCAsmParser::parseToken((llvm::MCAsmParser *)a1, 42, a2))
  {
LABEL_11:
    v11 = 0;
    --*((_DWORD *)a1 + 266);
    goto LABEL_12;
  }
  v11 = 1;
LABEL_12:
  if (v7 >= 0x41 && v8 != 0)
    MEMORY[0x1CAA32F9C](v8, 0x1000C8000313F17);
  return v11;
}

uint64_t sub_1C6115EBC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 **v23;
  uint64_t v24;
  unsigned __int8 **v25;
  uint64_t result;
  uint64_t v27;

  v6 = *(_DWORD *)(a2 + 16);
  if (v6 != 2)
  {
    if (v6 == 1)
    {
      v7 = *(unsigned int *)(a3 + 16);
      if (!(_DWORD)v7)
        goto LABEL_12;
      v8 = *(uint64_t **)(a3 + 8);
      v9 = 16 * v7;
      while (1)
      {
        v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
        v11 = *((_DWORD *)v8 + 2);
        v12 = v8;
        if (v11 < 0x41)
          goto LABEL_9;
        if (v11 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v8) <= 0x40)
          break;
        v13 = -1;
LABEL_10:
        (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v10 + 512))(v10, v13, v11 >> 3);
        v8 += 2;
        v9 -= 16;
        if (!v9)
        {
          LODWORD(v7) = *(_DWORD *)(a3 + 16);
LABEL_12:
          if ((_DWORD)v7 != *(_DWORD *)(a2 + 32))
          {
            v14 = (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * v7);
            while (1)
            {
              v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 56))(a1);
              v16 = *((_DWORD *)v14 + 2);
              v17 = v14;
              if (v16 < 0x41)
                goto LABEL_18;
              if (v16 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)v14) <= 0x40)
                break;
              v18 = -1;
LABEL_19:
              (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v15 + 512))(v15, v18, v16 >> 3);
              v14 += 2;
              if (v14 == (uint64_t *)(*(_QWORD *)(a2 + 24) + 16 * *(unsigned int *)(a2 + 32)))
                return 0;
            }
            v17 = (uint64_t *)*v14;
LABEL_18:
            v18 = *v17;
            goto LABEL_19;
          }
          return 0;
        }
      }
      v12 = (uint64_t *)*v8;
LABEL_9:
      v13 = *v12;
      goto LABEL_10;
    }
    v22 = *(unsigned int *)(a3 + 16);
    if (!(_DWORD)v22)
    {
LABEL_30:
      if ((_DWORD)v22 == *(_DWORD *)(a2 + 32))
        return 0;
      v25 = (unsigned __int8 **)(*(_QWORD *)(a2 + 24) + 8 * v22);
      do
      {
        result = sub_1C61113E4(a1, *v25, *(unsigned int *)(a2 + 12));
        if ((result & 1) != 0)
          break;
        ++v25;
      }
      while (v25 != (unsigned __int8 **)(*(_QWORD *)(a2 + 24) + 8 * *(unsigned int *)(a2 + 32)));
      return result;
    }
    v23 = *(unsigned __int8 ***)(a3 + 8);
    v24 = 8 * v22;
    while ((sub_1C61113E4(a1, *v23, *(unsigned int *)(a2 + 12)) & 1) == 0)
    {
      ++v23;
      v24 -= 8;
      if (!v24)
      {
        LODWORD(v22) = *(_DWORD *)(a3 + 16);
        goto LABEL_30;
      }
    }
    return 1;
  }
  v19 = *(_QWORD *)(a3 + 8);
  v20 = *(_QWORD *)(a3 + 16);
  if (v19 != v20)
  {
    while ((sub_1C61140F0(a1, a2 + 48, v19) & 1) == 0)
    {
      v19 += 24;
      if (v19 == v20)
      {
        v19 = *(_QWORD *)(a3 + 8);
        v21 = *(_QWORD *)(a3 + 16);
        goto LABEL_37;
      }
    }
    return 1;
  }
  v21 = *(_QWORD *)(a3 + 8);
LABEL_37:
  v27 = *(_QWORD *)(a2 + 24) + v21 - v19;
  if (v27 == *(_QWORD *)(a2 + 32))
    return 0;
  do
  {
    result = sub_1C61140F0(a1, a2 + 48, v27);
    if ((result & 1) != 0)
      break;
    v27 += 24;
  }
  while (v27 != *(_QWORD *)(a2 + 32));
  return result;
}

_QWORD *sub_1C6116114(llvm::StringMapImpl *a1, unsigned __int8 *a2, size_t __n)
{
  unsigned int v5;
  int v6;
  size_t v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *v19;
  _QWORD *v20;
  char *v21;
  _QWORD **i;
  _QWORD *v25;

  v5 = *((_DWORD *)a1 + 2);
  if (!v5)
  {
    *((_DWORD *)a1 + 3) = 0;
    *((_DWORD *)a1 + 4) = 0;
    v25 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!v25)
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    v25[16] = 2;
    *(_QWORD *)a1 = v25;
    v5 = 16;
    *((_DWORD *)a1 + 2) = 16;
  }
  v6 = 0;
  if (__n)
  {
    v7 = __n;
    v8 = a2;
    do
    {
      v9 = *v8++;
      v6 = 33 * v6 + v9;
      --v7;
    }
    while (v7);
  }
  v10 = *(_QWORD *)a1;
  v11 = v5 - 1;
  v12 = *(_QWORD *)a1 + 8 * v5 + 8;
  v13 = -1;
  v14 = 1;
  v15 = v6;
  while (1)
  {
    v16 = v15 & v11;
    v17 = *(_QWORD **)(v10 + 8 * v16);
    if (!v17)
      break;
    if (v17 == (_QWORD *)-8)
    {
      if (v13 == -1)
        v13 = v15 & v11;
    }
    else if (*(_DWORD *)(v12 + 4 * v16) == v6
           && __n == *v17
           && (!__n || !memcmp(a2, (char *)v17 + *((unsigned int *)a1 + 5), __n)))
    {
      goto LABEL_20;
    }
    v15 = v14 + v16;
    ++v14;
  }
  v18 = v13;
  if (v13 == -1)
  {
    v18 = v16;
    v16 = v16;
  }
  else
  {
    v16 = v13;
  }
  *(_DWORD *)(v12 + 4 * v18) = v6;
  v17 = *(_QWORD **)(v10 + 8 * v16);
LABEL_20:
  if (v17 == (_QWORD *)-8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v17)
  {
    return v17 + 1;
  }
  v19 = operator new(__n + 57, (std::align_val_t)8uLL);
  v20 = v19;
  v21 = (char *)(v19 + 7);
  if (__n)
    memcpy(v19 + 7, a2, __n);
  v21[__n] = 0;
  v20[2] = 0;
  v20[3] = 0;
  *v20 = __n;
  v20[1] = 0;
  *((_DWORD *)v20 + 6) = 2;
  v20[5] = 0;
  v20[6] = 0;
  v20[4] = 0;
  *(_QWORD *)(v10 + 8 * v16) = v20;
  ++*((_DWORD *)a1 + 3);
  for (i = (_QWORD **)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1, v16)); ; ++i)
  {
    v17 = *i;
    if (*i && v17 + 1 != 0)
      break;
  }
  return v17 + 1;
}

uint64_t sub_1C6116320(uint64_t a1)
{
  llvm::MCAsmParser *v2;
  uint64_t v3;
  uint64_t v4;
  char v5;
  const std::string::value_type *v6;
  std::string::size_type v7;
  uint64_t v9;
  const char *v10;
  __int16 v11;

  v2 = *(llvm::MCAsmParser **)a1;
  v3 = sub_1C610ED00(*(llvm::MCAsmParser **)a1, *(_QWORD *)(a1 + 8));
  if ((_DWORD)v3)
  {
    v10 = "expected text item";
    v11 = 259;
    v9 = (*(uint64_t (**)(llvm::MCAsmParser *))(*(_QWORD *)v2 + 40))(v2);
    llvm::MCAsmParser::Error((uint64_t)v2, *(_QWORD *)(v9 + 96), (uint64_t)&v10, 0, 0);
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    v5 = *(_BYTE *)(v4 + 23);
    if (v5 >= 0)
      v6 = *(const std::string::value_type **)(a1 + 8);
    else
      v6 = *(const std::string::value_type **)v4;
    if (v5 >= 0)
      v7 = v5 & 0x7F;
    else
      v7 = *(_QWORD *)(v4 + 8);
    std::string::append(*(std::string **)(a1 + 16), v6, v7);
  }
  return v3;
}

_QWORD *sub_1C61163C8(llvm::StringMapImpl *a1, unsigned __int8 *a2, size_t __n)
{
  unsigned int v5;
  int v6;
  size_t v7;
  unsigned __int8 *v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  _QWORD *i;
  char *v21;
  char *v22;
  char *v23;
  _QWORD *v25;

  v5 = *((_DWORD *)a1 + 2);
  if (!v5)
  {
    *((_DWORD *)a1 + 3) = 0;
    *((_DWORD *)a1 + 4) = 0;
    v25 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
    if (!v25)
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    v25[16] = 2;
    *(_QWORD *)a1 = v25;
    v5 = 16;
    *((_DWORD *)a1 + 2) = 16;
  }
  v6 = 0;
  if (__n)
  {
    v7 = __n;
    v8 = a2;
    do
    {
      v9 = *v8++;
      v6 = 33 * v6 + v9;
      --v7;
    }
    while (v7);
  }
  v10 = *(_QWORD *)a1;
  v11 = v5 - 1;
  v12 = *(_QWORD *)a1 + 8 * v5 + 8;
  v13 = -1;
  v14 = 1;
  v15 = v6;
  while (1)
  {
    v16 = v15 & v11;
    v17 = *(_QWORD **)(v10 + 8 * v16);
    if (!v17)
      break;
    if (v17 == (_QWORD *)-8)
    {
      if (v13 == -1)
        v13 = v15 & v11;
    }
    else if (*(_DWORD *)(v12 + 4 * v16) == v6
           && __n == *v17
           && (!__n || !memcmp(a2, (char *)v17 + *((unsigned int *)a1 + 5), __n)))
    {
      goto LABEL_20;
    }
    v15 = v14 + v16;
    ++v14;
  }
  v18 = v13;
  if (v13 == -1)
  {
    v18 = v16;
    v16 = v16;
  }
  else
  {
    v16 = v13;
  }
  *(_DWORD *)(v12 + 4 * v18) = v6;
  v17 = *(_QWORD **)(v10 + 8 * v16);
LABEL_20:
  i = (_QWORD *)(v10 + 8 * v16);
  if (v17 == (_QWORD *)-8)
  {
    --*((_DWORD *)a1 + 4);
  }
  else if (v17)
  {
    return i;
  }
  v21 = (char *)operator new(__n + 41, (std::align_val_t)8uLL);
  v22 = v21;
  v23 = v21 + 40;
  if (__n)
    memcpy(v21 + 40, a2, __n);
  v23[__n] = 0;
  *(_QWORD *)v22 = __n;
  *(_OWORD *)(v22 + 8) = 0u;
  *(_OWORD *)(v22 + 24) = 0u;
  *i = v22;
  ++*((_DWORD *)a1 + 3);
  for (i = (_QWORD *)(*(_QWORD *)a1 + 8 * llvm::StringMapImpl::RehashTable(a1, v16));
        !*i || *i == -8;
  return i;
}

uint64_t sub_1C61165C4(uint64_t a1, uint64_t a2, char *a3, unint64_t a4, uint64_t a5)
{
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  unint64_t v12;
  unint64_t v13;
  char *v14;
  unint64_t v15;
  void **v16;
  size_t v17;
  uint64_t v18;
  int v19;
  size_t v20;
  void **v21;
  int v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t result;
  int v31;
  int v32;
  void **v33;
  size_t v34;
  uint64_t v35;
  int v36;
  size_t v37;
  void **v38;
  int v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  int i;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _DWORD *v53;
  int32x2_t *v54;
  void *__p;
  char *v56;
  void *v57;
  unint64_t v58;
  int v59;
  char *v61;
  unint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  size_t v68;
  char v69;
  uint64_t v70[2];

  v70[0] = (uint64_t)a3;
  v70[1] = a4;
  if (!a4)
  {
    result = 0;
    *(_OWORD *)a5 = *(_OWORD *)a2;
    v31 = *(_DWORD *)(a2 + 32);
    *(_DWORD *)(a5 + 16) = v31;
    *(_DWORD *)(a5 + 20) = v31;
    *(_DWORD *)(a5 + 24) = 1;
    return result;
  }
  LOBYTE(v67) = 46;
  v8 = llvm::StringRef::find(v70, (char *)&v67, 1uLL, 0);
  if (a4 >= v8)
    v9 = v8;
  else
    v9 = a4;
  if (a4 >= v8 + 1)
    v10 = v8 + 1;
  else
    v10 = a4;
  v11 = &a3[v10];
  v12 = a4 - v10;
  if (v8 == -1)
    v13 = a4;
  else
    v13 = v9;
  if (v8 == -1)
    v14 = 0;
  else
    v14 = v11;
  v61 = v14;
  if (v8 == -1)
    v15 = 0;
  else
    v15 = v12;
  v56 = &a3[v13];
  v58 = v13;
  sub_1C5E3DEA4(&v67, a3, (uint64_t (*)(_QWORD))sub_1C5E3C6A8, &a3[v13], (uint64_t)sub_1C5E3C6A8, v13);
  __p = v67;
  if (v69 >= 0)
    v16 = &v67;
  else
    v16 = (void **)v67;
  if (v69 >= 0)
    v17 = v69 & 0x7F;
  else
    v17 = v68;
  v18 = *(unsigned int *)(a1 + 624);
  v66 = a1;
  v63 = v15;
  v64 = v69;
  if ((_DWORD)v18)
  {
    v19 = 0;
    if (v17)
    {
      v20 = v17;
      v21 = v16;
      do
      {
        v22 = *(unsigned __int8 *)v21;
        v21 = (void **)((char *)v21 + 1);
        v19 = 33 * v19 + v22;
        --v20;
      }
      while (v20);
    }
    v23 = *(_QWORD *)(a1 + 616);
    v24 = 1;
    v25 = v19;
    while (1)
    {
      v26 = v25 & (v18 - 1);
      v27 = *(_QWORD **)(v23 + 8 * v26);
      if (v27 != (_QWORD *)-8)
      {
        if (!v27)
        {
          v28 = v18;
          goto LABEL_36;
        }
        if (*(_DWORD *)(v23 + 8 * v18 + 8 + 4 * v26) == v19
          && v17 == *v27
          && (!v17 || !memcmp(v16, (char *)v27 + *(unsigned int *)(v66 + 636), v17)))
        {
          break;
        }
      }
      v25 = v24 + v26;
      ++v24;
    }
    v28 = (int)v26;
    if ((_DWORD)v26 == -1)
      v28 = v18;
  }
  else
  {
    v28 = 0;
    v23 = *(_QWORD *)(a1 + 616);
  }
LABEL_36:
  v29 = (_QWORD *)(v23 + 8 * v28);
  if (v64 < 0)
  {
    operator delete(__p);
    v23 = *(_QWORD *)(v66 + 616);
    LODWORD(v18) = *(_DWORD *)(v66 + 624);
  }
  if (v29 != (_QWORD *)(v23 + 8 * v18))
    return sub_1C61165C4(v66, *v29 + 8, v61);
  sub_1C5E3DEA4(&v67, a3, (uint64_t (*)(_QWORD))sub_1C5E3C6A8, v56, (uint64_t)sub_1C5E3C6A8, v58);
  v32 = v69;
  if (v69 >= 0)
    v33 = &v67;
  else
    v33 = (void **)v67;
  if (v69 >= 0)
    v34 = v69 & 0x7F;
  else
    v34 = v68;
  v35 = *(unsigned int *)(a2 + 72);
  v57 = v67;
  if ((_DWORD)v35)
  {
    v59 = v69;
    v36 = 0;
    if (v34)
    {
      v37 = v34;
      v38 = v33;
      do
      {
        v39 = *(unsigned __int8 *)v38;
        v38 = (void **)((char *)v38 + 1);
        v36 = 33 * v36 + v39;
        --v37;
      }
      while (v37);
    }
    v40 = v35 - 1;
    v41 = *(_QWORD *)(a2 + 64);
    v65 = *(unsigned int *)(a2 + 72);
    v42 = v41 + 8 * v35 + 8;
    v43 = *(unsigned int *)(a2 + 84);
    v44 = 1;
    for (i = v36; ; i = v46 + v44++)
    {
      v46 = i & v40;
      v47 = *(_QWORD **)(v41 + 8 * v46);
      if (v47 != (_QWORD *)-8)
      {
        if (!v47)
          goto LABEL_64;
        if (*(_DWORD *)(v42 + 4 * v46) == v36 && v34 == *v47 && (!v34 || !memcmp(v33, (char *)v47 + v43, v34)))
          break;
      }
    }
    if ((_DWORD)v46 != -1)
    {
      v48 = (int)v46;
      v49 = v65;
      v32 = v59;
      goto LABEL_66;
    }
LABEL_64:
    v49 = v65;
    v32 = v59;
  }
  else
  {
    v49 = 0;
    v41 = *(_QWORD *)(a2 + 64);
  }
  v48 = v49;
LABEL_66:
  v50 = v41 + 8 * v48;
  if (v32 < 0)
  {
    operator delete(v57);
    v41 = *(_QWORD *)(a2 + 64);
    v49 = *(unsigned int *)(a2 + 72);
  }
  if (v50 == v41 + 8 * v49)
    return 1;
  v51 = *(_QWORD *)(*(_QWORD *)v50 + 8);
  v52 = *(_QWORD *)(a2 + 40);
  v53 = (_DWORD *)(v52 + 144 * v51);
  if (v63)
  {
    if (*(_DWORD *)(v52 + 144 * v51 + 16) != 2 || (sub_1C61165C4(v66, v52 + 144 * v51 + 48, v61) & 1) != 0)
      return 1;
    result = 0;
    *(_DWORD *)(a5 + 32) += *v53;
  }
  else
  {
    *(_DWORD *)(a5 + 32) += *v53;
    v54 = (int32x2_t *)(v52 + 144 * v51);
    *(_DWORD *)(a5 + 16) = v54->i32[1];
    *(int32x2_t *)(a5 + 20) = vrev64_s32(v54[1]);
    result = 0;
    if (v54[2].i32[0] == 2)
    {
      *(_OWORD *)a5 = *(_OWORD *)(v52 + 144 * v51 + 48);
    }
    else
    {
      *(_QWORD *)a5 = "";
      *(_QWORD *)(a5 + 8) = 0;
    }
  }
  return result;
}

uint64_t sub_1C61169EC(uint64_t a1, unsigned __int8 *a2, unint64_t a3, unsigned __int8 *a4, unint64_t a5, unsigned __int8 *a6, unint64_t a7, int a8)
{
  if (!*(_BYTE *)(a1 + 20)
    && *(_QWORD *)(a1 + 8) == a3
    && !llvm::StringRef::compare_insensitive((unsigned __int8 **)a1, a2, a3))
  {
    *(_DWORD *)(a1 + 16) = a8;
    *(_BYTE *)(a1 + 20) = 1;
  }
  return sub_1C6116A70(a1, a4, a5, a6, a7, a8);
}

uint64_t sub_1C6116A70(uint64_t a1, unsigned __int8 *a2, unint64_t a3, unsigned __int8 *a4, unint64_t a5, int a6)
{
  uint64_t v10;

  if (!*(_BYTE *)(a1 + 20))
  {
    if ((v10 = *(_QWORD *)(a1 + 8), v10 == a3)
      && !llvm::StringRef::compare_insensitive((unsigned __int8 **)a1, a2, a3)
      || v10 == a5 && !llvm::StringRef::compare_insensitive((unsigned __int8 **)a1, a4, a5))
    {
      *(_DWORD *)(a1 + 16) = a6;
      *(_BYTE *)(a1 + 20) = 1;
    }
  }
  return a1;
}

unint64_t sub_1C6116AF4(unint64_t result, int a2, uint64_t a3, int a4)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  __int128 v8;
  __int128 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  int v14;
  uint64_t v15;
  int v16;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  uint64_t v25;
  int v26;
  char v27;

  v4 = result;
  v5 = *(unsigned int *)(result + 8);
  if (v5 >= *(_DWORD *)(result + 12))
  {
    v14 = a2;
    v15 = a3;
    v16 = a4;
    v17 = 0;
    v19 = 0;
    v20 = 0;
    v18 = 0;
    v21 = 0;
    v22 = 0u;
    v23 = 0u;
    v24 = 0u;
    v25 = 0;
    v26 = 1;
    v27 = 0;
    result = sub_1C60E7114(result, (unint64_t)&v14, 1);
    v7 = (_OWORD *)(*(_QWORD *)v4 + ((unint64_t)*(unsigned int *)(v4 + 8) << 7));
    v9 = *(_OWORD *)(result + 32);
    v8 = *(_OWORD *)(result + 48);
    v10 = *(_OWORD *)(result + 16);
    *v7 = *(_OWORD *)result;
    v7[1] = v10;
    v7[2] = v9;
    v7[3] = v8;
    v11 = *(_OWORD *)(result + 112);
    v12 = *(_OWORD *)(result + 64);
    v13 = *(_OWORD *)(result + 80);
    v7[6] = *(_OWORD *)(result + 96);
    v7[7] = v11;
    v7[4] = v12;
    v7[5] = v13;
  }
  else
  {
    v6 = *(_QWORD *)result + (v5 << 7);
    *(_DWORD *)v6 = a2;
    *(_QWORD *)(v6 + 8) = a3;
    *(_DWORD *)(v6 + 16) = a4;
    *(_BYTE *)(v6 + 20) = 0;
    *(_QWORD *)(v6 + 32) = 0;
    *(_QWORD *)(v6 + 40) = 0;
    *(_QWORD *)(v6 + 24) = 0;
    *(_BYTE *)(v6 + 48) = 0;
    *(_OWORD *)(v6 + 56) = 0u;
    *(_OWORD *)(v6 + 72) = 0u;
    *(_OWORD *)(v6 + 88) = 0u;
    *(_QWORD *)(v6 + 104) = 0;
    *(_DWORD *)(v6 + 112) = 1;
    *(_BYTE *)(v6 + 120) = 0;
  }
  ++*(_DWORD *)(v4 + 8);
  return result;
}

uint64_t sub_1C6116BF0(unsigned int *a1, unsigned int *a2)
{
  unint64_t v2;
  unint64_t v3;

  v2 = *((_QWORD *)a1 + 1);
  v3 = *((_QWORD *)a2 + 1);
  if (v2 < v3)
    return 0xFFFFFFFFLL;
  if (v3 < v2)
    return 1;
  if (byte_1C86786FB[*a1] > byte_1C86786FB[*a2])
    return 0xFFFFFFFFLL;
  return 1;
}

uint64_t sub_1C6116C40(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  char **v4;
  char *v5;
  const char *v6;
  __int16 v7;
  unint64_t v8[2];

  v1 = *(_QWORD *)(result + 688);
  v2 = *(_QWORD *)(result + 680);
  if (v1 != v2)
  {
    v3 = result;
    do
    {
      v4 = *(char ***)(v1 - 8);
      v1 -= 8;
      v5 = *v4;
      v6 = "while in macro instantiation";
      v7 = 259;
      v8[0] = 0;
      v8[1] = 0;
      result = llvm::SourceMgr::PrintMessage(*(llvm **)(v3 + 240), v5, 3, (llvm::Twine *)&v6, v8, 1, 0, 0, 1u);
    }
    while (v1 != v2);
  }
  return result;
}

BOOL sub_1C6116CD4(uint64_t a1, unsigned int a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  int v13;
  char *v14;
  unint64_t v15;
  unsigned int v16;
  int v17;
  unint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  unint64_t v21;
  int v23;
  int v24;
  unsigned __int8 *v25[3];

  v8 = *(_QWORD *)(a1 + 136);
  while (1)
  {
    v9 = *(_QWORD *)(a1 + 48);
    v10 = *(_DWORD *)v9;
    if (*(_DWORD *)v9 == 2)
    {
      v12 = *(unsigned __int8 **)(v9 + 8);
      v11 = *(unsigned __int8 **)(v9 + 16);
      v25[0] = v12;
      v25[1] = v11;
      v25[2] = 0;
      if (v11 == (unsigned __int8 *)2)
      {
        if (!llvm::StringRef::compare_insensitive(v25, "or", 2uLL))
        {
          v10 = 29;
          goto LABEL_25;
        }
        if (!llvm::StringRef::compare_insensitive(v25, "eq", 2uLL))
        {
          v10 = 28;
          goto LABEL_25;
        }
        if (!llvm::StringRef::compare_insensitive(v25, "ne", 2uLL))
        {
          v10 = 35;
          goto LABEL_25;
        }
        if (!llvm::StringRef::compare_insensitive(v25, "lt", 2uLL))
        {
          v10 = 38;
          goto LABEL_25;
        }
        if (!llvm::StringRef::compare_insensitive(v25, "le", 2uLL))
        {
          v10 = 39;
          goto LABEL_25;
        }
        if (!llvm::StringRef::compare_insensitive(v25, "gt", 2uLL))
        {
          v10 = 42;
          goto LABEL_25;
        }
        v13 = 43;
        v14 = "ge";
        v15 = 2;
      }
      else
      {
        if (v11 != (unsigned __int8 *)3)
        {
          v10 = 2;
          goto LABEL_25;
        }
        if (!llvm::StringRef::compare_insensitive(v25, "and", 3uLL))
        {
          v10 = 32;
          goto LABEL_25;
        }
        v13 = 34;
        v14 = "not";
        v15 = 3;
      }
      if (llvm::StringRef::compare_insensitive(v25, (unsigned __int8 *)v14, v15))
        v10 = 2;
      else
        v10 = v13;
    }
LABEL_25:
    v24 = 0;
    v16 = sub_1C6116F60(*(_BYTE *)(*(_QWORD *)(a1 + 232) + 472), *(_DWORD *)(a1 + 1064), v10, &v24);
    if (v16 < a2)
      break;
    (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
    v25[0] = 0;
    if ((*(unsigned int (**)(_QWORD, unsigned __int8 **, uint64_t))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), v25, a4)|| v16 < sub_1C6116F60(*(_BYTE *)(*(_QWORD *)(a1 + 232) + 472), *(_DWORD *)(a1 + 1064), **(_DWORD **)(a1 + 48), &v23)&& sub_1C6116CD4(a1, v16 + 1, v25, a4))
    {
      break;
    }
    v17 = v24;
    v18 = *a3;
    v19 = v25[0];
    v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
    v21 = sub_1C484358C(v20 + 192, 32, 3);
    *(_BYTE *)v21 = 0;
    *(_DWORD *)(v21 + 1) = v17 & 0xFFFFFF | (*(unsigned __int8 *)(v21 + 4) << 24);
    *(_QWORD *)(v21 + 8) = v8;
    *(_QWORD *)(v21 + 16) = v18;
    *(_QWORD *)(v21 + 24) = v19;
    *a3 = v21;
  }
  return v16 >= a2;
}

uint64_t sub_1C6116F60(char a1, int a2, int a3, int *a4)
{
  uint64_t result;
  uint64_t v6;
  int v7;

  result = 0;
  v6 = 2;
  v7 = 6;
  switch(a3)
  {
    case 12:
      v7 = 0;
      v6 = 4;
      goto LABEL_25;
    case 13:
      v6 = 4;
      v7 = 18;
      goto LABEL_25;
    case 15:
      v6 = 6;
      v7 = 2;
      goto LABEL_25;
    case 23:
      v6 = 6;
      v7 = 11;
      goto LABEL_25;
    case 28:
      v7 = 3;
      v6 = 3;
      goto LABEL_25;
    case 29:
      v6 = 5;
      v7 = 13;
      goto LABEL_25;
    case 30:
      v6 = 1;
      v7 = 7;
      goto LABEL_25;
    case 31:
      v6 = 5;
      v7 = 19;
      goto LABEL_25;
    case 32:
      v6 = 5;
      v7 = 1;
      goto LABEL_25;
    case 33:
      goto LABEL_25;
    case 35:
    case 41:
      v6 = 3;
      v7 = 12;
      goto LABEL_25;
    case 36:
      v6 = 6;
      v7 = 10;
      goto LABEL_25;
    case 38:
      v6 = 3;
      v7 = 8;
      goto LABEL_25;
    case 39:
      v6 = 3;
      v7 = 9;
      goto LABEL_25;
    case 40:
      v6 = 6;
      v7 = 15;
      goto LABEL_25;
    case 42:
      if (a2)
        return 0;
      v6 = 3;
      v7 = 4;
      goto LABEL_25;
    case 43:
      v6 = 3;
      v7 = 5;
      goto LABEL_25;
    case 44:
      if (a2)
        return 0;
      if (a1)
        v7 = 17;
      else
        v7 = 16;
      v6 = 6;
LABEL_25:
      *a4 = v7;
      return v6;
    default:
      return result;
  }
}

void sub_1C6117084()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C6117098(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;

  a1[3] = a2;
  a1[4] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  v3 = a1[3];
  a1[1] = v3;
  (*(void (**)(uint64_t, const char *, uint64_t, _QWORD *, uint64_t (*)()))(*(_QWORD *)v3 + 16))(v3, ".text", 5, a1, sub_1C6117254);
  (*(void (**)(_QWORD, const char *, uint64_t, _QWORD *, uint64_t (*)(uint64_t)))(*(_QWORD *)a1[1] + 16))(a1[1], ".data", 5, a1, sub_1C611725C);
  (*(void (**)(_QWORD, const char *, uint64_t, _QWORD *, uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t)))(*(_QWORD *)a1[1] + 16))(a1[1], ".section", 8, a1, sub_1C61172B8);
  (*(void (**)(_QWORD, const char *, uint64_t, _QWORD *, uint64_t (*)(uint64_t)))(*(_QWORD *)a1[1] + 16))(a1[1], ".size", 5, a1, sub_1C6117BE0);
  (*(void (**)(_QWORD, const char *, uint64_t, _QWORD *, uint64_t (*)(uint64_t)))(*(_QWORD *)a1[1] + 16))(a1[1], ".type", 5, a1, sub_1C6117CF8);
  (*(void (**)(_QWORD, const char *, uint64_t, _QWORD *, uint64_t (*)(uint64_t)))(*(_QWORD *)a1[1] + 16))(a1[1], ".ident", 6, a1, sub_1C6117F40);
  (*(void (**)(_QWORD, const char *, uint64_t, _QWORD *, uint64_t (*)(uint64_t, uint64_t, uint64_t)))(*(_QWORD *)a1[1] + 16))(a1[1], ".weak", 5, a1, sub_1C611806C);
  (*(void (**)(_QWORD, const char *, uint64_t, _QWORD *, uint64_t (*)(uint64_t, uint64_t, uint64_t)))(*(_QWORD *)a1[1] + 16))(a1[1], ".local", 6, a1, sub_1C611806C);
  (*(void (**)(_QWORD, const char *, uint64_t, _QWORD *, uint64_t (*)(uint64_t, uint64_t, uint64_t)))(*(_QWORD *)a1[1] + 16))(a1[1], ".internal", 9, a1, sub_1C611806C);
  return (*(uint64_t (**)(_QWORD, const char *, uint64_t, _QWORD *, uint64_t (*)(uint64_t, uint64_t, uint64_t)))(*(_QWORD *)a1[1] + 16))(a1[1], ".hidden", 7, a1, sub_1C611806C);
}

uint64_t sub_1C6117254()
{
  return 0;
}

uint64_t sub_1C611725C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;

  v2 = *(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8))
                             + 168)
                 + 32);
  v3 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v3 + 168))(v3, v2, 0);
  return 0;
}

uint64_t sub_1C61172B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  int v7;
  int v8;
  BOOL v10;
  BOOL v11;
  BOOL v12;
  BOOL v13;
  BOOL v14;
  char v15;
  _BOOL4 v16;
  _BOOL4 v17;
  const char *v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  int v30;
  int v31;
  int v32;
  char *v33;
  int v34;
  BOOL v35;
  uint64_t v36;
  int v37;
  unint64_t WasmSection;
  unint64_t v39;
  int v40;
  uint64_t v41;
  const char *v43;
  uint64_t v44;
  char *v45;
  BOOL v46;
  char v47;
  const char *v48;
  void *__p[2];
  char v50;
  int v51;
  __int16 v52;
  __int128 v53;
  _QWORD v54[4];
  __int16 v55;
  __int128 v56;
  const char *v57;
  __int16 v58;
  __int128 v59;
  uint64_t v60;
  unint64_t v61;
  const char *v62;
  uint64_t v63;
  __int128 v64;
  __int16 v65;
  int v66;
  __int16 v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v60 = 0;
  v61 = 0;
  if ((*(unsigned int (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 24) + 192))(*(_QWORD *)(a1 + 24), &v60))
  {
    v20 = "expected identifier in directive";
    goto LABEL_58;
  }
  if ((sub_1C6117AA0(a1, 25, ",") & 1) != 0)
    return 1;
  v6 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (*(_DWORD *)v6 != 3)
  {
    v22 = *(_QWORD *)(a1 + 24);
    v23 = *(_QWORD *)(v6 + 8);
    v24 = *(_QWORD *)(v6 + 16);
    v62 = "expected string in directive, instead got: ";
    v63 = 43;
    *(_QWORD *)&v64 = v23;
    *((_QWORD *)&v64 + 1) = v24;
    v65 = 1285;
    return llvm::MCAsmParser::Error(v22, v23, (uint64_t)&v62, 0, 0);
  }
  if (v61 < 5)
  {
    v7 = 0;
    v8 = 0;
LABEL_17:
    v11 = v61 < 7;
    goto LABEL_18;
  }
  if (*(_DWORD *)v60 == 1952539694 && *(_BYTE *)(v60 + 4) == 97)
  {
    v8 = 19;
    v7 = 1;
    goto LABEL_17;
  }
  if (v61 < 6)
  {
    v10 = *(_DWORD *)v60 == 1935832110 && *(_BYTE *)(v60 + 4) == 115;
    v11 = 1;
    if (!v10)
    {
LABEL_15:
      v7 = 0;
      v8 = 0;
      goto LABEL_18;
    }
LABEL_61:
    v8 = 12;
    goto LABEL_66;
  }
  if (*(_DWORD *)v60 == 1633973294 && *(_WORD *)(v60 + 4) == 24948)
  {
    v8 = 13;
    goto LABEL_66;
  }
  if (*(_DWORD *)v60 == 1935832110 && *(_BYTE *)(v60 + 4) == 115)
    goto LABEL_61;
  if (v61 >= 7)
  {
    if (*(_DWORD *)v60 == 1685025326 && *(_DWORD *)(v60 + 3) == 1635017060)
    {
      v8 = 4;
      goto LABEL_66;
    }
    v11 = 0;
    goto LABEL_15;
  }
  v7 = 0;
  v8 = 0;
  v11 = 1;
LABEL_18:
  if (v61 >= 5 && !v7 && (*(_DWORD *)v60 == 2019914798 ? (v12 = *(_BYTE *)(v60 + 4) == 116) : (v12 = 0), v12))
  {
    v8 = 2;
  }
  else if (v61 >= 0xF
         && !v7
         && (*(_QWORD *)v60 == 0x5F6D6F747375632ELL ? (v13 = *(_QWORD *)(v60 + 7) == 0x6E6F69746365735FLL) : (v13 = 0),
             v13))
  {
    v8 = 0;
  }
  else if (v61 >= 4 && !v7 && *(_DWORD *)v60 == 1936941614)
  {
    v8 = 15;
  }
  else
  {
    if (v61 < 0xB
      || v7
      || (*(_QWORD *)v60 == 0x72615F74696E692ELL ? (v14 = *(_QWORD *)(v60 + 3) == 0x79617272615F7469) : (v14 = 0), !v14))
    {
      if (v7)
        v15 = 1;
      else
        v15 = v11;
      if ((v15 & 1) == 0)
      {
        v16 = *(_DWORD *)(v60 + 3) == 1600615778;
        v17 = *(_DWORD *)v60 == 1650811950;
        LOBYTE(v7) = v17 && v16;
        if (v17 && v16)
          v8 = 0;
      }
      goto LABEL_67;
    }
    v8 = 19;
  }
LABEL_66:
  LOBYTE(v7) = 1;
LABEL_67:
  v25 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8);
  v26 = *(_QWORD *)(v25 + 16);
  v27 = v26 - 1;
  v28 = v26 != 0;
  if (v28 > v26 - 1)
    v27 = v26 != 0;
  if (v26 >= v27)
    v26 = v27;
  v29 = v26 - v28;
  if (!v29)
  {
    v30 = 0;
    v31 = 0;
    v32 = 0;
LABEL_84:
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    if ((sub_1C6117AA0(a1, 25, ",") & 1) != 0 || (sub_1C6117AA0(a1, 45, "@") & 1) != 0)
      return 1;
    v59 = 0uLL;
    if (!v30)
      goto LABEL_99;
    if (**(_DWORD **)(*(_QWORD *)(a1 + 32) + 8) != 25)
    {
      v43 = "expected group name";
      goto LABEL_125;
    }
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    if (**(_DWORD **)(*(_QWORD *)(a1 + 32) + 8) == 4)
    {
      v59 = *(_OWORD *)(*(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8))
                                  + 8)
                      + 8);
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    }
    else if ((*(unsigned int (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 24) + 192))(*(_QWORD *)(a1 + 24), &v59))
    {
      v43 = "invalid group name";
      goto LABEL_125;
    }
    if (**(_DWORD **)(*(_QWORD *)(a1 + 32) + 8) != 25)
      goto LABEL_99;
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v56 = 0uLL;
    if (((*(uint64_t (**)(_QWORD, __int128 *))(**(_QWORD **)(a1 + 24) + 192))(*(_QWORD *)(a1 + 24), &v56) & 1) == 0)
    {
      if (*((_QWORD *)&v56 + 1) != 6
        || (*(_DWORD *)v56 == 1684893539 ? (v35 = *(unsigned __int16 *)(v56 + 4) == 29793) : (v35 = 0), !v35))
      {
        v43 = "Linkage must be 'comdat'";
        goto LABEL_125;
      }
LABEL_99:
      if ((sub_1C6117AA0(a1, 9, "eol") & 1) != 0)
        return 1;
      v36 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
      v65 = 261;
      v62 = (const char *)v60;
      v63 = v61;
      v58 = 261;
      v56 = v59;
      if ((_BYTE)v7)
        v37 = v8;
      else
        v37 = 19;
      WasmSection = llvm::MCContext::getWasmSection(v36, (llvm::Twine *)&v62, v37, v32, (unsigned __int8 *)&v56, -1);
      v39 = *(unsigned int *)(WasmSection + 256);
      if ((_DWORD)v39 != v32)
      {
        v44 = *(_QWORD *)(a1 + 24);
        v55 = 1283;
        v54[0] = "changed section flags for ";
        v54[2] = v60;
        v54[3] = v61;
        *(_QWORD *)&v56 = v54;
        v57 = ", expected: 0x";
        v58 = 770;
        if ((_DWORD)v39)
        {
          v45 = (char *)&v64 + 1;
          do
          {
            *--v45 = a0123456789abcd_6[v39 & 0xF];
            v46 = v39 > 0xF;
            v39 >>= 4;
          }
          while (v46);
        }
        else
        {
          v45 = (char *)&v64;
          LOBYTE(v64) = 48;
        }
        sub_1C4E61270(__p, v45, (char *)&v64 + 1, (char *)&v64 + 1 - v45);
        v47 = v58;
        if (v58 == 1)
        {
          v62 = (const char *)__p;
          v64 = v53;
          v65 = 260;
          v66 = v51;
          v67 = v52;
        }
        else if ((_BYTE)v58)
        {
          if (HIBYTE(v58) != 1)
            v47 = 2;
          v48 = (const char *)&v56;
          if (HIBYTE(v58) == 1)
            v48 = (const char *)v56;
          v62 = v48;
          v63 = *((_QWORD *)&v56 + 1);
          *(_QWORD *)&v64 = __p;
          LOBYTE(v65) = v47;
          HIBYTE(v65) = 4;
        }
        else
        {
          v65 = 256;
        }
        llvm::MCAsmParser::Error(v44, a4, (uint64_t)&v62, 0, 0);
        if (v50 < 0)
          operator delete(__p[0]);
      }
      if (!v31)
      {
LABEL_111:
        v41 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
        (*(void (**)(uint64_t, unint64_t, _QWORD))(*(_QWORD *)v41 + 168))(v41, WasmSection, 0);
        return 0;
      }
      v40 = *(unsigned __int8 *)(WasmSection + 220);
      if ((v40 - 15) < 6 || (v40 & 0xFC) == 4 || (v40 & 0xFC) == 8 || (v40 - 12) < 3)
      {
        *(_BYTE *)(WasmSection + 252) = 1;
        goto LABEL_111;
      }
      v22 = *(_QWORD *)(a1 + 24);
      v62 = "Only data sections can be passive";
      v65 = 259;
      v23 = a4;
      return llvm::MCAsmParser::Error(v22, v23, (uint64_t)&v62, 0, 0);
    }
    v43 = "invalid linkage";
LABEL_125:
    v62 = v43;
    v65 = 259;
    if ((llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)&v62, 0, 0) & 1) != 0)
      return 1;
    goto LABEL_99;
  }
  v32 = 0;
  v31 = 0;
  v30 = 0;
  v33 = (char *)(*(_QWORD *)(v25 + 8) + v28);
  while (1)
  {
    v34 = *v33;
    if (v34 > 83)
      break;
    if (v34 == 71)
    {
      v30 = 1;
    }
    else
    {
      if (v34 != 83)
        goto LABEL_119;
      v32 |= 1u;
    }
LABEL_83:
    ++v33;
    if (!--v29)
      goto LABEL_84;
  }
  if (v34 == 84)
  {
    v32 |= 2u;
    goto LABEL_83;
  }
  if (v34 == 112)
  {
    v31 = 1;
    goto LABEL_83;
  }
LABEL_119:
  v20 = "unknown flag";
LABEL_58:
  v62 = v20;
  v65 = 259;
  return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)&v62, 0, 0);
}

uint64_t sub_1C6117AA0(uint64_t a1, int a2, std::string::value_type *__s)
{
  uint64_t v4;
  std::string *v6;
  std::string::size_type v7;
  std::string *v8;
  std::string::size_type v9;
  void **v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  std::string v16;
  std::string v17;
  void *__p[2];
  uint64_t v19;
  _QWORD v20[4];
  __int16 v21;

  if (**(_DWORD **)(*(_QWORD *)(a1 + 32) + 8) == a2)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    return 0;
  }
  else
  {
    *((_BYTE *)&v16.__r_.__value_.__s + 23) = 9;
    strcpy((char *)&v16, "Expected ");
    v6 = std::string::append(&v16, __s);
    v7 = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v17.__r_.__value_.__l.__data_ = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v17.__r_.__value_.__r.__words[2] = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    v8 = std::string::append(&v17, ", instead got: ");
    v9 = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    v19 = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    v10 = __p;
    if (v19 < 0)
      v10 = (void **)__p[0];
    v11 = (void *)(HIBYTE(v19) & 0x7F);
    if (v19 < 0)
      v11 = __p[1];
    v12 = *(_QWORD *)(a1 + 24);
    v13 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v14 = *(_QWORD *)(v13 + 8);
    v15 = *(_QWORD *)(v13 + 16);
    v20[0] = v10;
    v20[1] = v11;
    v20[2] = v14;
    v20[3] = v15;
    v21 = 1285;
    v4 = llvm::MCAsmParser::Error(v12, v14, (uint64_t)v20, 0, 0);
    if (SHIBYTE(v19) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v17.__r_.__value_.__l.__data_);
    if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v16.__r_.__value_.__l.__data_);
  }
  return v4;
}

uint64_t sub_1C6117BE0(uint64_t a1)
{
  uint64_t v2;
  unint64_t Symbol;
  uint64_t v5;
  uint64_t v6;
  _QWORD v7[4];
  __int16 v8;
  uint64_t v9;
  uint64_t v10;

  v9 = 0;
  v10 = 0;
  if ((*(unsigned int (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 24) + 192))(*(_QWORD *)(a1 + 24), &v9))
  {
    v7[0] = "expected identifier in directive";
    v8 = 259;
    return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)v7, 0, 0);
  }
  else
  {
    v2 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    v8 = 261;
    v7[0] = v9;
    v7[1] = v10;
    Symbol = llvm::MCContext::getOrCreateSymbol(v2, (uint64_t)v7);
    if ((sub_1C6117AA0(a1, 25, ",") & 1) != 0)
      return 1;
    v6 = 0;
    v7[0] = 0;
    if (((*(uint64_t (**)(_QWORD, uint64_t *, _QWORD *))(**(_QWORD **)(a1 + 24) + 232))(*(_QWORD *)(a1 + 24), &v6, v7) & 1) != 0|| (sub_1C6117AA0(a1, 9, "eol") & 1) != 0)
    {
      return 1;
    }
    else
    {
      v5 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
      (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v5 + 424))(v5, Symbol, v6);
      return 0;
    }
  }
}

uint64_t sub_1C6117CF8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  const char *v6;
  unint64_t Symbol;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v14;
  uint64_t v15;
  const char *v16;
  uint64_t v17;
  int v18;
  const char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  __int16 v24;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
  if (*(_DWORD *)v2 == 2)
  {
    v3 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8)) + 8);
    v4 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    v6 = *(const char **)(v4 + 8);
    v5 = *(_QWORD *)(v4 + 16);
    v24 = 261;
    v20 = v6;
    v21 = v5;
    Symbol = llvm::MCContext::getOrCreateSymbol(v3, (uint64_t)&v20);
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
    if (*(_DWORD *)v8 == 25)
    {
      (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
      v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      if (*(_DWORD *)v8 == 45)
      {
        (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
        v8 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
        if (*(_DWORD *)v8 == 2)
        {
          v9 = *(_QWORD *)(v8 + 8);
          v10 = *(_QWORD *)(v8 + 16);
          if (v10 != 6)
          {
            if (v10 == 8 && *(_QWORD *)v9 == 0x6E6F6974636E7566)
            {
              if (!*(_BYTE *)(Symbol + 36))
                *(_BYTE *)(Symbol + 36) = 1;
              *(_DWORD *)(Symbol + 32) = 0;
              v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
              if (*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v11 + 112) + 32 * *(unsigned int *)(v11 + 120) - 32) + 232))
                *(_BYTE *)(Symbol + 42) = 1;
              goto LABEL_26;
            }
            goto LABEL_28;
          }
          if (*(_DWORD *)v9 == 1651469415 && *(_WORD *)(v9 + 4) == 27745)
          {
            v18 = *(unsigned __int8 *)(Symbol + 36);
            *(_DWORD *)(Symbol + 32) = 2;
            if (!v18)
LABEL_25:
              *(_BYTE *)(Symbol + 36) = 1;
          }
          else
          {
            if (*(_DWORD *)v9 != 1701470831 || *(_WORD *)(v9 + 4) != 29795)
            {
LABEL_28:
              v15 = *(_QWORD *)(a1 + 24);
              v16 = "Unknown WASM symbol type: ";
              v17 = 26;
              goto LABEL_29;
            }
            v14 = *(unsigned __int8 *)(Symbol + 36);
            *(_DWORD *)(Symbol + 32) = 1;
            if (!v14)
              goto LABEL_25;
          }
LABEL_26:
          (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
          return sub_1C6117AA0(a1, 9, "EOL");
        }
      }
    }
    v15 = *(_QWORD *)(a1 + 24);
    v9 = *(_QWORD *)(v8 + 8);
    v10 = *(_QWORD *)(v8 + 16);
    v16 = "Expected label,@type declaration, got: ";
    v17 = 39;
  }
  else
  {
    v15 = *(_QWORD *)(a1 + 24);
    v9 = *(_QWORD *)(v2 + 8);
    v10 = *(_QWORD *)(v2 + 16);
    v16 = "Expected label after .type directive, got: ";
    v17 = 43;
  }
LABEL_29:
  v20 = v16;
  v21 = v17;
  v22 = v9;
  v23 = v10;
  v24 = 1285;
  return llvm::MCAsmParser::Error(v15, v9, (uint64_t)&v20, 0, 0);
}

uint64_t sub_1C6117F40(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  const char *v12;
  __int16 v13;

  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 3)
    goto LABEL_16;
  v2 = *(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8);
  if (*(_DWORD *)v2 == 2)
  {
    v3 = *(_QWORD *)(v2 + 8);
    v4 = *(_QWORD *)(v2 + 16);
  }
  else
  {
    v7 = v2 + 8;
    v5 = *(_QWORD *)(v2 + 8);
    v6 = *(_QWORD *)(v7 + 8);
    v8 = v6 != 0;
    v3 = v6 ? v5 + 1 : v5;
    v9 = v8 <= v6 - 1 ? v6 - 1 : v6 != 0;
    if (v6 < v9)
      v9 = v6;
    v4 = v9 - v8;
  }
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
  {
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v10 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    (*(void (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v10 + 672))(v10, v3, v4);
    return 0;
  }
  else
  {
LABEL_16:
    v12 = "unexpected token in '.ident' directive";
    v13 = 259;
    return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)&v12, 0, 0);
  }
}

uint64_t sub_1C611806C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v4;
  int v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v11;
  unint64_t Symbol;
  uint64_t v13;
  const char *v14;
  _QWORD v15[4];
  __int16 v16;
  uint64_t v17;
  uint64_t i;

  v4 = 0;
  switch(a3)
  {
    case 5:
      v5 = *(_DWORD *)a2 ^ 0x6165772E | *(unsigned __int8 *)(a2 + 4) ^ 0x6B;
      v6 = 0x100000017;
      goto LABEL_4;
    case 6:
      v5 = *(_DWORD *)a2 ^ 0x636F6C2E | *(unsigned __int16 *)(a2 + 4) ^ 0x6C61;
      v6 = 0x100000010;
LABEL_4:
      v7 = v5 == 0;
      goto LABEL_11;
    case 7:
      v4 = 0x10000000CLL;
      if (*(_DWORD *)a2 ^ 0x6469682E | *(_DWORD *)(a2 + 3) ^ 0x6E656464)
        v4 = 0;
      break;
    case 9:
      v8 = *(_QWORD *)a2 ^ 0x616E7265746E692ELL | *(unsigned __int8 *)(a2 + 8) ^ 0x6CLL;
      v6 = 0x10000000ELL;
      goto LABEL_10;
    case 10:
      v8 = *(_QWORD *)a2 ^ 0x746365746F72702ELL | *(unsigned __int16 *)(a2 + 8) ^ 0x6465;
      v6 = 0x100000015;
LABEL_10:
      v7 = v8 == 0;
LABEL_11:
      if (v7)
        v4 = v6;
      else
        v4 = 0;
      break;
    default:
      break;
  }
  if (v4 <= 0x100000000)
    v9 = 0x100000000;
  else
    v9 = v4;
  if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
  {
LABEL_18:
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    return 0;
  }
  v17 = 0;
  for (i = 0;
        ((*(uint64_t (**)(_QWORD, uint64_t *))(**(_QWORD **)(a1 + 8) + 192))(*(_QWORD *)(a1 + 8), &v17) & 1) == 0;
        i = 0)
  {
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8));
    v16 = 261;
    v15[0] = v17;
    v15[1] = i;
    Symbol = llvm::MCContext::getOrCreateSymbol(v11, (uint64_t)v15);
    v13 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
    (*(void (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v13 + 304))(v13, Symbol, v9);
    if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) == 9)
      goto LABEL_18;
    if (**(_DWORD **)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8)) + 8) != 25)
    {
      v14 = "unexpected token in directive";
      goto LABEL_26;
    }
    (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8));
    v17 = 0;
  }
  v14 = "expected identifier in directive";
LABEL_26:
  v15[0] = v14;
  v16 = 259;
  return llvm::MCAsmParser::TokError(*(_QWORD *)(a1 + 8), (uint64_t)v15, 0, 0);
}

void sub_1C6118324()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C6118338(_QWORD *a1, uint64_t a2)
{
  uint64_t v3;

  a1[3] = a2;
  a1[4] = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
  v3 = a1[3];
  a1[1] = v3;
  return (*(uint64_t (**)(uint64_t, const char *, uint64_t, _QWORD *, void (*)()))(*(_QWORD *)v3 + 16))(v3, ".csect", 6, a1, sub_1C6118394);
}

void sub_1C6118394()
{
  llvm::report_fatal_error((llvm *)"XCOFFAsmParser directive not yet supported!", (const char *)1);
}

uint64_t sub_1C61183AC@<X0>(_DWORD *a1@<X0>, uint64_t *a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  const llvm::object::ObjectFile *v10;
  void *v11;
  const llvm::object::ObjectFile *v12;
  const llvm::object::ObjectFile *v13;
  uint64_t v14;
  BOOL v15;
  void *v16;
  const llvm::object::ObjectFile *v17;
  int v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  char v26;
  __n128 v27;
  const llvm::object::ObjectFile *v28;
  const llvm::object::ObjectFile *v29;
  unint64_t v30;
  _DWORD *v31;
  _BYTE *v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  BOOL v37;
  unsigned int v38;
  unint64_t v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  unint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  unint64_t Unsigned;
  uint64_t v52;
  unint64_t v53;
  unint64_t *v54;
  _QWORD *v55;
  unint64_t *v56;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  unint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  unint64_t v64;
  __int128 v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v70;
  int v71;
  unsigned __int32 v72;
  unsigned int *v73;
  unsigned int *v74;
  unsigned int *v75;
  unsigned __int8 *v76;
  unint64_t v77;
  uint64_t v78;
  unsigned int v79;
  unint64_t v80;
  unsigned int *v81;
  unint64_t v82;
  unsigned __int8 *v83;
  unint64_t v84;
  char *v85;
  char *v86;
  char *i;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int64x2_t *v92;
  const std::nothrow_t *v93;
  unint64_t v94;
  void *v95;
  BOOL v96;
  void *v97;
  _QWORD *v98;
  _QWORD *v99;
  uint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  uint64_t result;
  uint64_t v108;
  __n128 *v109;
  unsigned int *v110;
  unint64_t v111;
  unint64_t v112;
  __n128 *v113;
  unint64_t *v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  char *v119;
  __n128 *v120;
  __n128 *v121;
  __n128 v122;
  char *v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t v126;
  uint64_t v127;
  int v128;
  unint64_t **v129;
  uint64_t v130;
  _DWORD *v131;
  uint64_t v132;
  void *__p;
  const llvm::object::ObjectFile *v134;
  unint64_t v135;
  unsigned int v136[2];
  char v137;
  uint64_t v138[2];
  __n128 v139;
  unsigned int v140;
  __int128 v141;
  __n128 v142;
  _DWORD *v143;
  uint64_t v144;

  v144 = *MEMORY[0x1E0C80C00];
  v8 = operator new();
  v9 = *a2;
  *a2 = 0;
  *(_QWORD *)v8 = &off_1E81AE610;
  *(_QWORD *)(v8 + 8) = a1;
  *(_QWORD *)(v8 + 16) = v9;
  *(_BYTE *)(v8 + 24) = a3;
  *(_OWORD *)(v8 + 32) = 0u;
  v129 = (unint64_t **)(v8 + 32);
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  v130 = a4;
  v131 = a1;
  if ((*(unsigned int (**)(_DWORD *))(*(_QWORD *)a1 + 376))(a1) != 23
    || ((v11 = (void *)(*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 344))(a1),
         v13 = v12,
         v14 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)a1 + 352))(a1),
         __p = v11,
         v134 = v13,
         v13 == v10)
      ? (v15 = v11 == (void *)v14)
      : (v15 = 0),
        v15))
  {
    v132 = 0;
    v127 = 0;
    goto LABEL_26;
  }
  v16 = (void *)v14;
  v17 = v10;
  v127 = 0;
  v132 = 0;
  while (1)
  {
    (*(void (**)(__n128 *__return_ptr, const llvm::object::ObjectFile *, void *))(*(_QWORD *)v13 + 136))(&v139, v13, v11);
    if ((v140 & 1) != 0)
    {
      v19 = 0;
      v18 = 0;
      v20 = v139.n128_u64[0];
      v139.n128_u64[0] = 0;
      *(_BYTE *)(a4 + 8) |= 1u;
      *(_QWORD *)a4 = v20;
    }
    else if (v139.n128_u64[1] == 4 && *(_DWORD *)v139.n128_u64[0] == 1685090094)
    {
      (*(void (**)(__n128 *__return_ptr, const llvm::object::ObjectFile *, void *))(*(_QWORD *)v13 + 168))(&v142, v13, v11);
      v22 = v142.n128_u64[0];
      if ((v143 & 1) != 0)
      {
        v19 = 0;
        v18 = 0;
        a4 = v130;
        *(_BYTE *)(v130 + 8) |= 1u;
        *(_QWORD *)v130 = v22;
      }
      else
      {
        v23 = v142.n128_u64[1];
        v24 = operator new();
        v25 = (v131[2] > 0x13u) | (0x553FFu >> v131[2]);
        v26 = (*(uint64_t (**)(void))(*(_QWORD *)v131 + 360))();
        *(_QWORD *)v24 = v22;
        *(_QWORD *)(v24 + 8) = v23;
        *(_BYTE *)(v24 + 16) = v25 & 1;
        *(_BYTE *)(v24 + 17) = v26;
        if (v132)
          MEMORY[0x1CAA32FC0](v132, 0x1050C4071034487);
        v127 = (*(uint64_t (**)(const llvm::object::ObjectFile *, void *))(*(_QWORD *)v13 + 144))(v13, v11);
        v19 = 0;
        v18 = 1;
        v132 = v24;
        a4 = v130;
      }
      a1 = v131;
    }
    else
    {
      v18 = 0;
      v19 = 1;
    }
    if ((v140 & 1) != 0)
    {
      v21 = v139.n128_u64[0];
      v139.n128_u64[0] = 0;
      if (v21)
        (*(void (**)(unint64_t))(*(_QWORD *)v21 + 8))(v21);
    }
    if (!v19)
      break;
    (*(void (**)(const llvm::object::ObjectFile *, void **))(*(_QWORD *)v134 + 128))(v134, &__p);
    v11 = __p;
    v13 = v134;
    if (v134 == v17 && __p == v16)
      goto LABEL_26;
  }
  if (v18)
  {
LABEL_26:
    llvm::object::computeSymbolSizes((llvm::object *)a1, v10, (uint64_t **)&__p);
    v28 = (const llvm::object::ObjectFile *)__p;
    v29 = v134;
    if (__p == v134)
    {
LABEL_120:
      if (a1[2] != 9)
        goto LABEL_155;
      v70 = *((_QWORD *)a1 + 19);
      if (v70
        && (v71 = *(_DWORD *)(v70 + 20),
            v142.n128_u64[0] = *((_QWORD *)a1 + 19),
            v142.n128_u32[2] = 0,
            v143 = a1,
            (v128 = v71) != 0))
      {
        v72 = 0;
        v73 = 0;
        v74 = 0;
        v75 = 0;
        v76 = &v139.n128_u8[4];
        v77 = v70;
        while (1)
        {
          v141 = 0uLL;
          v136[0] = 0;
          llvm::object::ExportDirectoryEntryRef::getSymbolName((llvm::object::COFFObjectFile **)&v142, (llvm::StringRef *)&v141, v138);
          v78 = v138[0];
          if (v138[0])
            break;
          llvm::object::ExportDirectoryEntryRef::getExportRVA((llvm::object::COFFObjectFile **)&v142, v136, v138);
          v78 = v138[0];
          if (v138[0])
            break;
          v79 = v136[0];
          *(_OWORD *)v76 = v141;
          if (v74 >= v73)
          {
            v80 = 0xAAAAAAAAAAAAAAABLL * (((char *)v74 - (char *)v75) >> 3) + 1;
            if (v80 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_207;
            v81 = v73;
            v82 = v70;
            v83 = v76;
            if (0x5555555555555556 * (((char *)v81 - (char *)v75) >> 3) > v80)
              v80 = 0x5555555555555556 * (((char *)v81 - (char *)v75) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * (((char *)v81 - (char *)v75) >> 3) >= 0x555555555555555)
              v84 = 0xAAAAAAAAAAAAAAALL;
            else
              v84 = v80;
            if (v84)
            {
              if (v84 > 0xAAAAAAAAAAAAAAALL)
                goto LABEL_208;
              v85 = (char *)operator new(24 * v84);
            }
            else
            {
              v85 = 0;
            }
            v86 = &v85[8 * (((char *)v74 - (char *)v75) >> 3)];
            *(_DWORD *)v86 = v79;
            v27 = v139;
            *(__n128 *)(v86 + 4) = v139;
            *((_DWORD *)v86 + 5) = v140;
            for (i = v86; v74 != v75; v74 -= 6)
            {
              v27 = *(__n128 *)(v74 - 6);
              *((_QWORD *)i - 1) = *((_QWORD *)v74 - 1);
              *(__n128 *)(i - 24) = v27;
              i -= 24;
            }
            v88 = &v85[24 * v84];
            v74 = (unsigned int *)(v86 + 24);
            if (v75)
              operator delete(v75);
            v75 = (unsigned int *)i;
            a1 = v131;
            v76 = v83;
            v70 = v82;
            v73 = (unsigned int *)v88;
          }
          else
          {
            *v74 = v79;
            v27 = v139;
            v74[5] = v140;
            *(__n128 *)(v74 + 1) = v27;
            v74 += 6;
            v72 = v142.n128_u32[2];
            v77 = v142.n128_u64[0];
          }
          v142.n128_u32[2] = ++v72;
          if (v77 == v70 && v72 == v128)
          {
            if (v75 == v74)
            {
              a4 = v130;
            }
            else
            {
              if ((char *)v74 - (char *)v75 >= 48)
                qsort(v75, ((char *)v74 - (char *)v75) / 0x18uLL, 0x18uLL, (int (__cdecl *)(const void *, const void *))sub_1C611A848);
              v89 = *((_QWORD *)a1 + 8);
              if (v89)
              {
                v90 = *(unsigned int *)(v89 + 28);
              }
              else
              {
                v108 = *((_QWORD *)a1 + 9);
                if (v108)
                  v90 = *(_QWORD *)(v108 + 24);
                else
                  v90 = 0;
              }
              v109 = *(__n128 **)(v8 + 40);
              v110 = v75;
              do
              {
                v111 = v90 + *v110;
                v142 = *(__n128 *)(v110 + 2);
                v112 = *(_QWORD *)(v8 + 48);
                if ((unint64_t)v109 >= v112)
                {
                  v114 = *v129;
                  v115 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v109 - (char *)*v129) >> 3);
                  v116 = v115 + 1;
                  if (v115 + 1 > 0x666666666666666)
                    goto LABEL_207;
                  v117 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v112 - (_QWORD)v114) >> 3);
                  if (2 * v117 > v116)
                    v116 = 2 * v117;
                  if (v117 >= 0x333333333333333)
                    v118 = 0x666666666666666;
                  else
                    v118 = v116;
                  if (v118)
                  {
                    if (v118 > 0x666666666666666)
                      goto LABEL_208;
                    v119 = (char *)operator new(40 * v118);
                  }
                  else
                  {
                    v119 = 0;
                  }
                  v120 = (__n128 *)&v119[40 * v115];
                  v120->n128_u64[0] = v111;
                  v120->n128_u64[1] = 0;
                  v27 = v142;
                  v120[1] = v142;
                  v120[2].n128_u32[0] = 0;
                  v121 = v120;
                  if (v109 == (__n128 *)v114)
                  {
                    a4 = v130;
                  }
                  else
                  {
                    a4 = v130;
                    do
                    {
                      v27 = *(__n128 *)((char *)v109 - 40);
                      v122 = *(__n128 *)((char *)v109 - 24);
                      v121[-1].n128_u32[2] = v109[-1].n128_u32[2];
                      *(__n128 *)((char *)v121 - 24) = v122;
                      *(__n128 *)((char *)v121 - 40) = v27;
                      v121 = (__n128 *)((char *)v121 - 40);
                      v109 = (__n128 *)((char *)v109 - 40);
                    }
                    while (v109 != (__n128 *)v114);
                    v109 = (__n128 *)*v129;
                  }
                  v123 = &v119[40 * v118];
                  v113 = (__n128 *)((char *)v120 + 40);
                  *(_QWORD *)(v8 + 32) = v121;
                  *(_QWORD *)(v8 + 40) = (char *)v120 + 40;
                  *(_QWORD *)(v8 + 48) = v123;
                  if (v109)
                    operator delete(v109);
                }
                else
                {
                  v109->n128_u64[0] = v111;
                  v109->n128_u64[1] = 0;
                  v27 = v142;
                  v109[1] = v142;
                  v109[2].n128_u32[0] = 0;
                  v113 = (__n128 *)((char *)v109 + 40);
                  a4 = v130;
                }
                *(_QWORD *)(v8 + 40) = v113;
                v110 += 6;
                v109 = v113;
              }
              while (v110 != v74);
            }
            goto LABEL_151;
          }
        }
        a4 = v130;
        if (v75)
          goto LABEL_152;
      }
      else
      {
        v75 = 0;
LABEL_151:
        v78 = 0;
        v138[0] = 0;
        if (v75)
        {
LABEL_152:
          operator delete(v75);
          v78 = v138[0];
        }
      }
      if (!v78)
        goto LABEL_155;
      *(_BYTE *)(a4 + 8) |= 1u;
      *(_QWORD *)a4 = v78;
LABEL_172:
      if (__p)
      {
        v134 = (const llvm::object::ObjectFile *)__p;
        operator delete(__p);
      }
      goto LABEL_174;
    }
    while (1)
    {
      v31 = (_DWORD *)*((_QWORD *)v28 + 1);
      v30 = *((_QWORD *)v28 + 2);
      (*(void (**)(__n128 *__return_ptr, _DWORD *, _QWORD))(*(_QWORD *)v31 + 72))(&v142, v31, *(_QWORD *)v28);
      v32 = (_BYTE *)v142.n128_u64[0];
      if ((v143 & 1) == 0)
        break;
LABEL_115:
      if (v32)
      {
        *(_BYTE *)(v130 + 8) |= 1u;
        *(_QWORD *)v130 = v32;
        goto LABEL_172;
      }
      v28 = (const llvm::object::ObjectFile *)((char *)v28 + 24);
      if (v28 == v29)
      {
        a4 = v130;
        if (__p == v134)
          goto LABEL_120;
LABEL_155:
        v91 = *(_QWORD *)(v8 + 32);
        v92 = *(int64x2_t **)(v8 + 40);
        if ((uint64_t)v92->i64 - v91 < 5121)
        {
LABEL_159:
          sub_1C6119BA4(v91, v92, 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v92->i64 - v91) >> 3), 0, 0, v27);
        }
        else
        {
          v93 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
          v94 = 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v92->i64 - v91) >> 3);
          while (1)
          {
            v95 = operator new(40 * v94, v93);
            if (v95)
              break;
            v96 = v94 > 1;
            v94 >>= 1;
            if (!v96)
              goto LABEL_159;
          }
          v97 = v95;
          sub_1C6119BA4(v91, v92, 0xCCCCCCCCCCCCCCCDLL * (((uint64_t)v92->i64 - v91) >> 3), (uint64_t)v95, v94, v27);
          operator delete(v97);
        }
        v99 = *(_QWORD **)(v8 + 32);
        v98 = *(_QWORD **)(v8 + 40);
        if (v99 != v98)
        {
          v100 = *(_QWORD *)(v8 + 32);
LABEL_165:
          v101 = v99;
          while (1)
          {
            v102 = v101 + 5;
            if (v101 + 5 == v98)
              break;
            v101 += 5;
            if (*v99 != *v102)
            {
              v103 = *(_OWORD *)(v102 - 5);
              v104 = *(_OWORD *)(v102 - 3);
              *(_DWORD *)(v100 + 32) = *((_DWORD *)v102 - 2);
              *(_OWORD *)v100 = v103;
              *(_OWORD *)(v100 + 16) = v104;
              v100 += 40;
              v99 = v102;
              goto LABEL_165;
            }
          }
          v105 = *(_OWORD *)v101;
          v106 = *((_OWORD *)v101 + 1);
          *(_DWORD *)(v100 + 32) = *((_DWORD *)v101 + 8);
          *(_OWORD *)v100 = v105;
          *(_OWORD *)(v100 + 16) = v106;
          if (v100 + 40 != *(_QWORD *)(v8 + 40))
            *(_QWORD *)(v8 + 40) = v100 + 40;
        }
        *(_BYTE *)(a4 + 8) &= ~1u;
        *(_QWORD *)a4 = v8;
        v8 = 0;
        goto LABEL_172;
      }
    }
    v33 = v142.n128_u64[1];
    if ((v31[2] & 0xFFFFFFFC) == 0xC)
      v34 = HIDWORD(*(_QWORD *)v28);
    else
      v34 = 0;
    (*(void (**)(__n128 *__return_ptr))(**((_QWORD **)v28 + 1) + 120))(&v139);
    if ((v140 & 1) != 0
      || ((v35 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v31 + 352))(v31), v139.n128_u64[1] == v36)
        ? (v37 = v35 == v139.n128_u64[0])
        : (v37 = 0),
          v37))
    {
      if ((v31[2] & 0xFFFFFFFC) == 0xC
        && (*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)v28 + 1) + 456))(*((_QWORD *)v28 + 1), *(_QWORD *)v28) == 4)
      {
        v41 = *(_QWORD **)(v8 + 64);
        v40 = *(_QWORD *)(v8 + 72);
        if ((unint64_t)v41 >= v40)
        {
          v43 = *(_QWORD **)(v8 + 56);
          v44 = 0xAAAAAAAAAAAAAAABLL * (v41 - v43) + 1;
          if (v44 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_207;
          v45 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v40 - (_QWORD)v43) >> 3);
          if (2 * v45 > v44)
            v44 = 2 * v45;
          if (v45 >= 0x555555555555555)
            v46 = 0xAAAAAAAAAAAAAAALL;
          else
            v46 = v44;
          if (v46 > 0xAAAAAAAAAAAAAAALL)
LABEL_208:
            sub_1C4764EE4();
          v47 = 3 * v46;
          v48 = (char *)operator new(24 * v46);
          v49 = &v48[8 * (v41 - v43)];
          *(_DWORD *)v49 = v34;
          *((_QWORD *)v49 + 1) = v32;
          *((_QWORD *)v49 + 2) = v33;
          v50 = v49;
          if (v41 == v43)
          {
            a1 = v131;
          }
          else
          {
            a1 = v131;
            do
            {
              v27 = *(__n128 *)(v41 - 3);
              *((_QWORD *)v50 - 1) = *(v41 - 1);
              *(__n128 *)(v50 - 24) = v27;
              v50 -= 24;
              v41 -= 3;
            }
            while (v41 != v43);
            v41 = v43;
          }
          v42 = v49 + 24;
          *(_QWORD *)(v8 + 56) = v50;
          *(_QWORD *)(v8 + 64) = v49 + 24;
          *(_QWORD *)(v8 + 72) = &v48[8 * v47];
          if (v41)
            operator delete(v41);
        }
        else
        {
          *(_DWORD *)v41 = v34;
          v42 = v41 + 3;
          v41[1] = v32;
          v41[2] = v33;
        }
        v32 = 0;
        *(_QWORD *)(v8 + 64) = v42;
      }
      else
      {
        v32 = 0;
      }
      goto LABEL_109;
    }
    (*(void (**)(__int128 *__return_ptr, _QWORD, _QWORD))(**((_QWORD **)v28 + 1) + 112))(&v141, *((_QWORD *)v28 + 1), *(_QWORD *)v28);
    if ((BYTE8(v141) & 1) != 0)
    {
      v32 = (_BYTE *)v141;
      *(_QWORD *)&v141 = 0;
    }
    else
    {
      if ((v31[2] & 0xFFFFFFFC) == 0xC)
      {
        v38 = (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)v28 + 1) + 456))(*((_QWORD *)v28 + 1), *(_QWORD *)v28);
        if (v38 > 0xA || ((1 << v38) & 0x407) == 0)
          goto LABEL_105;
        (*(void (**)(uint64_t *__return_ptr, _QWORD, _QWORD))(**((_QWORD **)v28 + 1) + 40))(v138, *((_QWORD *)v28 + 1), *(_QWORD *)v28);
        if ((v138[0] & 0x80) != 0)
          goto LABEL_105;
      }
      else if ((_DWORD)v141 != 5 && (_DWORD)v141 != 2)
      {
LABEL_105:
        v32 = 0;
        goto LABEL_106;
      }
      (*(void (**)(unsigned int *__return_ptr, _QWORD, _QWORD))(**((_QWORD **)v28 + 1) + 80))(v136, *((_QWORD *)v28 + 1), *(_QWORD *)v28);
      if ((v137 & 1) == 0)
      {
        if (*(_BYTE *)(v8 + 24))
          Unsigned = (uint64_t)(*(_QWORD *)v136 << 8) >> 8;
        else
          Unsigned = *(_QWORD *)v136;
        if (v132)
        {
          v135 = Unsigned - v127;
          v52 = *(unsigned __int8 *)(v132 + 17);
          if (!__CFADD__(Unsigned - v127, v52) && *(_QWORD *)(v132 + 8) > Unsigned - v127 + v52 - 1)
            Unsigned = llvm::DataExtractor::getUnsigned((_QWORD *)v132, &v135, v52, 0);
        }
        if ((*(_DWORD *)(*(_QWORD *)(v8 + 8) + 8) & 0xFFFFFFFC) == 0x10 && v33 && *v32 == 95)
        {
          ++v32;
          --v33;
        }
        if ((v31[2] & 0xFFFFFFFC) == 0xC
          && (*(unsigned int (**)(_QWORD, _QWORD))(**((_QWORD **)v28 + 1) + 440))(*((_QWORD *)v28 + 1), *(_QWORD *)v28))
        {
          v34 = 0;
        }
        v54 = *(unint64_t **)(v8 + 40);
        v53 = *(_QWORD *)(v8 + 48);
        if ((unint64_t)v54 >= v53)
        {
          v126 = Unsigned;
          v56 = *v129;
          v57 = 0xCCCCCCCCCCCCCCCDLL * (v54 - *v129);
          v58 = v57 + 1;
          if (v57 + 1 > 0x666666666666666)
LABEL_207:
            abort();
          v59 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v53 - (_QWORD)v56) >> 3);
          if (2 * v59 > v58)
            v58 = 2 * v59;
          if (v59 >= 0x333333333333333)
            v60 = 0x666666666666666;
          else
            v60 = v58;
          v125 = v60;
          if (v60)
          {
            v124 = 0xCCCCCCCCCCCCCCCDLL * (v54 - *v129);
            if (v60 > 0x666666666666666)
              goto LABEL_208;
            v61 = (char *)operator new(40 * v60);
            v57 = v124;
          }
          else
          {
            v61 = 0;
          }
          v62 = &v61[40 * v57];
          *(_QWORD *)v62 = v126;
          *((_QWORD *)v62 + 1) = v30;
          *((_QWORD *)v62 + 2) = v32;
          *((_QWORD *)v62 + 3) = v33;
          *((_DWORD *)v62 + 8) = v34;
          v63 = v62;
          if (v54 == v56)
          {
            v64 = v125;
          }
          else
          {
            v64 = v125;
            do
            {
              v27 = *(__n128 *)(v54 - 5);
              v65 = *(_OWORD *)(v54 - 3);
              *((_DWORD *)v63 - 2) = *((_DWORD *)v54 - 2);
              *(_OWORD *)(v63 - 24) = v65;
              *(__n128 *)(v63 - 40) = v27;
              v63 -= 40;
              v54 -= 5;
            }
            while (v54 != v56);
            v54 = *v129;
          }
          v55 = v62 + 40;
          *(_QWORD *)(v8 + 32) = v63;
          *(_QWORD *)(v8 + 40) = v62 + 40;
          *(_QWORD *)(v8 + 48) = &v61[40 * v64];
          if (v54)
            operator delete(v54);
        }
        else
        {
          *v54 = Unsigned;
          v54[1] = v30;
          v54[2] = (unint64_t)v32;
          v54[3] = v33;
          v55 = v54 + 5;
          *((_DWORD *)v54 + 8) = v34;
        }
        *(_QWORD *)(v8 + 40) = v55;
        if ((v137 & 1) != 0)
        {
          v66 = *(_QWORD *)v136;
          *(_QWORD *)v136 = 0;
          if (v66)
            (*(void (**)(unint64_t))(*(_QWORD *)v66 + 8))(v66);
        }
        goto LABEL_105;
      }
      v32 = *(_BYTE **)v136;
    }
LABEL_106:
    if ((BYTE8(v141) & 1) != 0)
    {
      v67 = v141;
      *(_QWORD *)&v141 = 0;
      if (v67)
        (*(void (**)(uint64_t))(*(_QWORD *)v67 + 8))(v67);
    }
LABEL_109:
    if ((v140 & 1) != 0)
    {
      v68 = v139.n128_u64[0];
      v139.n128_u64[0] = 0;
      if (v68)
        (*(void (**)(unint64_t))(*(_QWORD *)v68 + 8))(v68);
    }
    if ((v143 & 1) != 0)
    {
      v69 = v142.n128_u64[0];
      v142.n128_u64[0] = 0;
      if (v69)
        (*(void (**)(unint64_t))(*(_QWORD *)v69 + 8))(v69);
    }
    goto LABEL_115;
  }
LABEL_174:
  result = v132;
  if (v132)
    result = MEMORY[0x1CAA32FC0](v132, 0x1050C4071034487);
  if (v8)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  return result;
}

BOOL sub_1C6119110(uint64_t a1)
{
  uint64_t v1;
  BOOL v2;
  unsigned __int16 *v4;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1)
    v2 = *(_DWORD *)(v1 + 8) == 9;
  else
    v2 = 0;
  if (!v2)
    return 0;
  v4 = *(unsigned __int16 **)(v1 + 48);
  if (!v4)
    v4 = (unsigned __int16 *)(*(_QWORD *)(v1 + 56) + 6);
  return *v4 == 332;
}

uint64_t sub_1C611914C(uint64_t a1)
{
  uint64_t v1;
  BOOL v2;
  uint64_t v4;
  uint64_t v5;

  v1 = *(_QWORD *)(a1 + 8);
  if (v1)
    v2 = *(_DWORD *)(v1 + 8) == 9;
  else
    v2 = 0;
  if (!v2)
    return 0;
  v4 = *(_QWORD *)(v1 + 64);
  if (v4)
    return *(unsigned int *)(v4 + 28);
  v5 = *(_QWORD *)(v1 + 72);
  if (!v5)
    return 0;
  return *(_QWORD *)(v5 + 24);
}

uint64_t sub_1C6119188(_QWORD *a1, unint64_t a2, uint64_t a3, _QWORD *a4, _QWORD *a5, uint64_t a6)
{
  _QWORD *v6;
  uint64_t v7;
  unint64_t v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t *v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  const void *v20;
  size_t v21;
  __int128 *p_dst;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  _DWORD *v27;
  uint64_t v28;
  unint64_t v29;
  _DWORD *v30;
  unint64_t v31;
  unsigned int *v32;
  const void *v33;
  size_t v34;
  __int128 *v35;
  uint64_t v36;
  uint64_t v37;
  __int128 __dst;
  unint64_t v39;

  v6 = (_QWORD *)a1[4];
  v7 = a1[5] - (_QWORD)v6;
  if (!v7)
    return 0;
  v13 = 0xCCCCCCCCCCCCCCCDLL * (v7 >> 3);
  v14 = (_QWORD *)a1[4];
  do
  {
    v15 = v13 >> 1;
    v16 = &v14[5 * (v13 >> 1)];
    v18 = *v16;
    v17 = v16 + 5;
    v13 += ~(v13 >> 1);
    if (v18 > a2)
      v13 = v15;
    else
      v14 = v17;
  }
  while (v13);
  if (v14 == v6)
    return 0;
  v19 = *(v14 - 4);
  if (v19)
  {
    if (*(v14 - 5) + v19 <= a2)
      return 0;
  }
  v20 = (const void *)*(v14 - 3);
  if (!v20)
  {
    __dst = 0uLL;
    v39 = 0;
    goto LABEL_22;
  }
  v21 = *(v14 - 2);
  if (v21 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_48;
  if (v21 >= 0x17)
  {
    v24 = (v21 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v21 | 7) != 0x17)
      v24 = v21 | 7;
    v25 = v24 + 1;
    p_dst = (__int128 *)operator new(v24 + 1);
    *((_QWORD *)&__dst + 1) = v21;
    v39 = v25 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
  }
  else
  {
    HIBYTE(v39) = *(v14 - 2);
    p_dst = &__dst;
    if (!v21)
      goto LABEL_21;
  }
  memmove(p_dst, v20, v21);
LABEL_21:
  *((_BYTE *)p_dst + v21) = 0;
LABEL_22:
  if (*(char *)(a3 + 23) < 0)
    operator delete(*(void **)a3);
  *(_OWORD *)a3 = __dst;
  *(_QWORD *)(a3 + 16) = v39;
  *a4 = *(v14 - 5);
  *a5 = *(v14 - 4);
  v26 = *((_DWORD *)v14 - 2);
  if (!v26)
    return 1;
  v27 = (_DWORD *)a1[7];
  v28 = a1[8] - (_QWORD)v27;
  if (!v28)
    return 1;
  v29 = 0xAAAAAAAAAAAAAAABLL * (v28 >> 3);
  v30 = (_DWORD *)a1[7];
  do
  {
    v31 = v29 >> 1;
    v32 = &v30[6 * (v29 >> 1)];
    if (v26 >= *v32 && (*v32 < v26 || !*(_QWORD *)&v30[6 * v31 + 4]))
    {
      v30 = v32 + 6;
      v31 = v29 + ~v31;
    }
    v29 = v31;
  }
  while (v31);
  if (v30 == v27)
    return 1;
  v33 = (const void *)*((_QWORD *)v30 - 2);
  if (v33)
  {
    v34 = *((_QWORD *)v30 - 1);
    if (v34 <= 0x7FFFFFFFFFFFFFF7)
    {
      if (v34 >= 0x17)
      {
        v36 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v34 | 7) != 0x17)
          v36 = v34 | 7;
        v37 = v36 + 1;
        v35 = (__int128 *)operator new(v36 + 1);
        *((_QWORD *)&__dst + 1) = v34;
        v39 = v37 | 0x8000000000000000;
        *(_QWORD *)&__dst = v35;
      }
      else
      {
        HIBYTE(v39) = *((_QWORD *)v30 - 1);
        v35 = &__dst;
        if (!v34)
          goto LABEL_43;
      }
      memmove(v35, v33, v34);
LABEL_43:
      *((_BYTE *)v35 + v34) = 0;
      goto LABEL_44;
    }
LABEL_48:
    abort();
  }
  __dst = 0uLL;
  v39 = 0;
LABEL_44:
  if (*(char *)(a6 + 23) < 0)
    operator delete(*(void **)a6);
  *(_OWORD *)a6 = __dst;
  *(_QWORD *)(a6 + 16) = v39;
  return 1;
}

void sub_1C6119420(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v11;
  char v12;
  uint64_t v13;
  unint64_t v14;
  const void *v15;
  size_t v16;
  std::string::size_type size;
  uint64_t v18;
  uint64_t v19;
  std::string v20;
  std::string __str;

  if (a3 == -1)
    a3 = sub_1C61195AC(*(_QWORD *)(a1 + 8), a2);
  (*(void (**)(_QWORD, unint64_t, uint64_t, unint64_t))(**(_QWORD **)(a1 + 16) + 32))(*(_QWORD *)(a1 + 16), a2, a3, a4);
  if (HIDWORD(a4) == 2 && a5 && !*(_DWORD *)(*(_QWORD *)(a1 + 16) + 8))
  {
    memset(&__str, 0, sizeof(__str));
    memset(&v20, 0, sizeof(v20));
    v19 = 0;
    if (sub_1C6119188((_QWORD *)a1, a2, (uint64_t)&__str, &v19, &v18, (uint64_t)&v20))
    {
      std::string::operator=((std::string *)(a6 + 24), &__str);
      v11 = v19;
      if (!*(_BYTE *)(a6 + 120))
        *(_BYTE *)(a6 + 120) = 1;
      *(_QWORD *)(a6 + 112) = v11;
      v12 = *(_BYTE *)(a6 + 23);
      if (v12 >= 0)
        v13 = v12 & 0x7F;
      else
        v13 = *(_QWORD *)(a6 + 8);
      if (v13 == 9)
      {
        v14 = v12 >= 0 ? *(unsigned __int8 *)(a6 + 23) : *(_QWORD *)(a6 + 8);
        v15 = v12 >= 0 ? (const void *)a6 : *(const void **)a6;
        v16 = v14 >= 9 ? 9 : v14;
        if (!memcmp(v15, "<invalid>", v16) && v14 == 9)
        {
          size = *((_BYTE *)&v20.__r_.__value_.__s + 23) & 0x7F;
          if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            size = v20.__r_.__value_.__l.__size_;
          if (size)
            std::string::operator=((std::string *)a6, &v20);
        }
      }
    }
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v20.__r_.__value_.__l.__data_);
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__str.__r_.__value_.__l.__data_);
  }
}

uint64_t sub_1C61195AC(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v15;
  uint64_t v16;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 344))(a1);
  v6 = v5;
  v7 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 352))(a1);
  v15 = v4;
  v16 = v6;
  if (v6 == v8 && v4 == v7)
    return -1;
  v10 = v7;
  v11 = v8;
  while (1)
  {
    if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 192))(v6, v4))
    {
      if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 216))(v6, v4) & 1) == 0
        && (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 144))(v6, v4) <= a2)
      {
        v12 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 144))(v6, v4);
        if ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 160))(v6, v4) + v12 > a2)
          break;
      }
    }
    (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v16 + 128))(v16, &v15);
    v4 = v15;
    v6 = v16;
    if (v16 == v11 && v15 == v10)
      return -1;
  }
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 152))(v6, v4);
}

void sub_1C61196E4(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, int a5@<W4>, uint64_t a6@<X8>)
{
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  __int128 v15;
  _BYTE *v16;
  __int128 v17;
  _BYTE *v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  const void *v28;
  size_t v29;
  std::string::size_type size;
  uint64_t v32;
  uint64_t v33;
  std::string v34;
  __int128 __str;
  std::string __str_16;
  char v37[24];
  __int16 v38;
  char v39;
  uint64_t v40;
  int v41;
  char v42;
  char v43;
  int v44;

  if (a3 == -1)
    a3 = sub_1C61195AC(*(_QWORD *)(a1 + 8), a2);
  (*(void (**)(_QWORD, unint64_t, uint64_t, unint64_t))(**(_QWORD **)(a1 + 16) + 48))(*(_QWORD *)(a1 + 16), a2, a3, a4);
  if (!*(_DWORD *)(a6 + 8))
  {
    strcpy(&__str_16.__r_.__value_.__s.__data_[7], "\t<invalid>");
    strcpy((char *)&__str, "<invalid>");
    strcpy(v37, "\t<invalid>");
    v38 = 9;
    v39 = 0;
    v40 = 0;
    v41 = 0;
    v42 = 0;
    v43 = 0;
    v44 = 0;
    v11 = sub_1C548D3D4(a6, (unint64_t)&__str, 1);
    v12 = *(_QWORD *)a6;
    v13 = *(_DWORD *)(a6 + 8);
    v14 = *(_QWORD *)a6 + 136 * v13;
    if (*(char *)(v11 + 23) < 0)
    {
      sub_1C47EBC30((_BYTE *)v14, *(void **)v11, *(_QWORD *)(v11 + 8));
    }
    else
    {
      v15 = *(_OWORD *)v11;
      *(_QWORD *)(v14 + 16) = *(_QWORD *)(v11 + 16);
      *(_OWORD *)v14 = v15;
    }
    v16 = (_BYTE *)(v12 + 136 * v13 + 24);
    if (*(char *)(v11 + 47) < 0)
    {
      sub_1C47EBC30(v16, *(void **)(v11 + 24), *(_QWORD *)(v11 + 32));
    }
    else
    {
      v17 = *(_OWORD *)(v11 + 24);
      *(_QWORD *)(v12 + 136 * v13 + 40) = *(_QWORD *)(v11 + 40);
      *(_OWORD *)v16 = v17;
    }
    v18 = (_BYTE *)(v12 + 136 * v13 + 48);
    if (*(char *)(v11 + 71) < 0)
    {
      sub_1C47EBC30(v18, *(void **)(v11 + 48), *(_QWORD *)(v11 + 56));
    }
    else
    {
      v19 = *(_OWORD *)(v11 + 48);
      *(_QWORD *)(v12 + 136 * v13 + 64) = *(_QWORD *)(v11 + 64);
      *(_OWORD *)v18 = v19;
    }
    v20 = v12 + 136 * v13;
    v21 = *(_OWORD *)(v11 + 72);
    v22 = *(_OWORD *)(v11 + 88);
    v23 = *(_OWORD *)(v11 + 104);
    *(_OWORD *)(v20 + 116) = *(_OWORD *)(v11 + 116);
    *(_OWORD *)(v20 + 104) = v23;
    *(_OWORD *)(v20 + 88) = v22;
    *(_OWORD *)(v20 + 72) = v21;
    ++*(_DWORD *)(a6 + 8);
    if ((char)v38 < 0)
      operator delete(*(void **)&v37[1]);
    if (v37[0] < 0)
      operator delete((void *)__str_16.__r_.__value_.__l.__size_);
    if (__str_16.__r_.__value_.__s.__data_[7] < 0)
      operator delete((void *)__str);
  }
  if (HIDWORD(a4) == 2 && a5 && !*(_DWORD *)(*(_QWORD *)(a1 + 16) + 8))
  {
    __str = 0uLL;
    __str_16.__r_.__value_.__r.__words[0] = 0;
    memset(&v34, 0, sizeof(v34));
    v33 = 0;
    if (sub_1C6119188((_QWORD *)a1, a2, (uint64_t)&__str, &v33, &v32, (uint64_t)&v34))
    {
      v24 = *(_QWORD *)a6 + 136 * (*(_DWORD *)(a6 + 8) - 1);
      std::string::operator=((std::string *)(v24 + 24), (const std::string *)&__str);
      v25 = v33;
      if (!*(_BYTE *)(v24 + 120))
        *(_BYTE *)(v24 + 120) = 1;
      *(_QWORD *)(v24 + 112) = v25;
      v26 = *(unsigned __int8 *)(v24 + 23);
      if ((v26 & 0x80u) == 0)
        v27 = v26 & 0x7F;
      else
        v27 = *(_QWORD *)(v24 + 8);
      if (v27 == 9)
      {
        v28 = (const void *)v24;
        if ((v26 & 0x80) != 0)
        {
          v28 = *(const void **)v24;
          v26 = *(_QWORD *)(v24 + 8);
        }
        if (v26 >= 9)
          v29 = 9;
        else
          v29 = v26;
        if (!memcmp(v28, "<invalid>", v29) && v26 == 9)
        {
          size = *((_BYTE *)&v34.__r_.__value_.__s + 23) & 0x7F;
          if ((v34.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
            size = v34.__r_.__value_.__l.__size_;
          if (size)
            std::string::operator=((std::string *)v24, &v34);
        }
      }
    }
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v34.__r_.__value_.__l.__data_);
    if (__str_16.__r_.__value_.__s.__data_[7] < 0)
      operator delete((void *)__str);
  }
}

void sub_1C6119A00(_QWORD *a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  void *__p[2];
  uint64_t v4;

  *(_BYTE *)(a3 + 23) = 9;
  strcpy((char *)a3, "<invalid>");
  *(_QWORD *)(a3 + 32) = 0;
  *(_QWORD *)(a3 + 24) = 0;
  __p[0] = 0;
  __p[1] = 0;
  v4 = 0;
  sub_1C6119188(a1, a2, a3, (_QWORD *)(a3 + 24), (_QWORD *)(a3 + 32), (uint64_t)__p);
  if (SHIBYTE(v4) < 0)
    operator delete(__p[0]);
}

uint64_t sub_1C6119A74(uint64_t a1, unint64_t a2, uint64_t a3)
{
  if (a3 == -1)
    a3 = sub_1C61195AC(*(_QWORD *)(a1 + 8), a2);
  return (*(uint64_t (**)(_QWORD, unint64_t, uint64_t))(**(_QWORD **)(a1 + 16) + 56))(*(_QWORD *)(a1 + 16), a2, a3);
}

_QWORD *sub_1C6119ACC(_QWORD *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;

  *a1 = &off_1E81AE610;
  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return a1;
}

void sub_1C6119B30(_QWORD *a1)
{
  void *v2;
  void *v3;
  uint64_t v4;

  *a1 = &off_1E81AE610;
  v2 = (void *)a1[7];
  if (v2)
  {
    a1[8] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[4];
  if (v3)
  {
    a1[5] = v3;
    operator delete(v3);
  }
  v4 = a1[2];
  a1[2] = 0;
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C6119BA4(uint64_t a1, int64x2_t *a2, unint64_t a3, uint64_t a4, uint64_t a5, __n128 result)
{
  uint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  BOOL v10;
  _BOOL4 v11;
  uint64_t v12;
  int64x2_t v13;
  __int32 v14;
  __int128 v15;
  unint64_t *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t *v20;
  unint64_t v21;
  unint64_t v22;
  _BOOL4 v23;
  uint64_t v24;
  uint64_t v25;
  __int128 v26;
  unint64_t v27;
  BOOL v28;
  BOOL v29;
  uint64_t v30;
  uint64_t v32;
  unint64_t v33;
  unint64_t *v34;
  unint64_t v35;
  __n128 v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  _BOOL4 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  __int128 v45;
  uint64_t v46;
  uint64_t v47;
  __int128 v48;
  __n128 v49;
  unint64_t v50;

  if (a3 >= 2)
  {
    v7 = a1;
    if (a3 == 2)
    {
      v8 = a2[-3].u64[1];
      v9 = &a2[-3].u64[1];
      v10 = v8 == *(_QWORD *)a1;
      v11 = v8 < *(_QWORD *)a1;
      if (v10)
        v11 = a2[-2].i64[0] < *(_QWORD *)(a1 + 8);
      if (v11)
      {
        v12 = *(_QWORD *)(a1 + 32);
        result = *(__n128 *)a1;
        v13 = *(int64x2_t *)(a1 + 16);
        v14 = a2[-1].i32[2];
        v15 = *(__int128 *)((char *)&a2[-2] + 8);
        *(_OWORD *)a1 = *(_OWORD *)v9;
        *(_OWORD *)(a1 + 16) = v15;
        *(_DWORD *)(a1 + 32) = v14;
        *(__n128 *)v9 = result;
        *(int64x2_t *)((char *)a2 - 24) = v13;
        a2[-1].i32[2] = v12;
      }
    }
    else if ((uint64_t)a3 > 128)
    {
      v32 = a4;
      v33 = a3 >> 1;
      v34 = (unint64_t *)(a1 + 40 * (a3 >> 1));
      v35 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        v36 = sub_1C6119EA0((__int128 *)a1, v34, v35, a4, result);
        v37 = v32 + 40 * v33;
        result.n128_u64[0] = sub_1C6119EA0((__int128 *)(v7 + 40 * (a3 >> 1)), (unint64_t *)a2, a3 - (a3 >> 1), v37, v36).n128_u64[0];
        v38 = v32 + 40 * a3;
        v39 = v37;
        while (v39 != v38)
        {
          v40 = *(_QWORD *)v39 < *(_QWORD *)v32;
          if (*(_QWORD *)v39 == *(_QWORD *)v32)
            v40 = *(_QWORD *)(v39 + 8) < *(_QWORD *)(v32 + 8);
          if (v40)
          {
            result = *(__n128 *)v39;
            v41 = *(_OWORD *)(v39 + 16);
            *(_DWORD *)(v7 + 32) = *(_DWORD *)(v39 + 32);
            *(__n128 *)v7 = result;
            *(_OWORD *)(v7 + 16) = v41;
            v39 += 40;
          }
          else
          {
            result = *(__n128 *)v32;
            v42 = *(_OWORD *)(v32 + 16);
            *(_DWORD *)(v7 + 32) = *(_DWORD *)(v32 + 32);
            *(__n128 *)v7 = result;
            *(_OWORD *)(v7 + 16) = v42;
            v32 += 40;
          }
          v7 += 40;
          if (v32 == v37)
          {
            if (v39 != v38)
            {
              v43 = 0;
              do
              {
                v44 = v7 + v43;
                result = *(__n128 *)(v39 + v43);
                v45 = *(_OWORD *)(v39 + v43 + 16);
                *(_DWORD *)(v44 + 32) = *(_DWORD *)(v39 + v43 + 32);
                *(__n128 *)v44 = result;
                *(_OWORD *)(v44 + 16) = v45;
                v43 += 40;
              }
              while (v39 + v43 != v38);
            }
            return result;
          }
        }
        if (v32 != v37)
        {
          v46 = 0;
          do
          {
            v47 = v7 + v46;
            result = *(__n128 *)(v32 + v46);
            v48 = *(_OWORD *)(v32 + v46 + 16);
            *(_DWORD *)(v47 + 32) = *(_DWORD *)(v32 + v46 + 32);
            *(__n128 *)v47 = result;
            *(_OWORD *)(v47 + 16) = v48;
            v46 += 40;
          }
          while (v32 + v46 != v37);
        }
      }
      else
      {
        sub_1C6119BA4(a1, v34, v35, a4, a5);
        sub_1C6119BA4(v7 + 40 * (a3 >> 1), a2, a3 - (a3 >> 1), v32, a5);
        sub_1C611A18C((int64x2_t *)v7, (int64x2_t *)(v7 + 40 * (a3 >> 1)), a2, a3 >> 1, a3 - (a3 >> 1), (char *)v32, a5);
      }
    }
    else if ((int64x2_t *)a1 != a2)
    {
      v17 = (unint64_t *)(a1 + 40);
      if ((int64x2_t *)(a1 + 40) != a2)
      {
        v18 = 0;
        v19 = (unint64_t *)a1;
        do
        {
          v20 = v17;
          v21 = *v17;
          v22 = v19[6];
          v23 = v21 < *v19;
          if (v21 == *v19)
            v23 = v22 < v19[1];
          if (v23)
          {
            v49 = *(__n128 *)(v19 + 7);
            v50 = v19[9];
            v24 = v18;
            while (1)
            {
              v25 = a1 + v24;
              v26 = *(_OWORD *)(a1 + v24 + 16);
              *(_OWORD *)(v25 + 40) = *(_OWORD *)(a1 + v24);
              *(_OWORD *)(v25 + 56) = v26;
              *(_DWORD *)(v25 + 72) = *(_DWORD *)(a1 + v24 + 32);
              if (!v24)
                break;
              v27 = *(_QWORD *)(v25 - 40);
              v28 = v22 < *(_QWORD *)(v25 - 32);
              v10 = v21 == v27;
              v29 = v21 < v27;
              if (!v10)
                v28 = v29;
              v24 -= 40;
              if (!v28)
              {
                v30 = a1 + v24 + 40;
                goto LABEL_21;
              }
            }
            v30 = a1;
LABEL_21:
            *(_QWORD *)v30 = v21;
            *(_QWORD *)(v30 + 8) = v22;
            result = v49;
            *(__n128 *)(v30 + 16) = v49;
            *(_DWORD *)(v30 + 32) = v50;
          }
          v17 = v20 + 5;
          v18 += 40;
          v19 = v20;
        }
        while (v20 + 5 != (unint64_t *)a2);
      }
    }
  }
  return result;
}

__n128 sub_1C6119EA0(__int128 *a1, unint64_t *a2, unint64_t a3, uint64_t a4, __n128 result)
{
  uint64_t v5;
  unint64_t *v8;
  __int128 v9;
  unint64_t v10;
  __n128 *v11;
  _BOOL4 v12;
  BOOL v13;
  _BOOL4 v14;
  __n128 v15;
  __int128 v16;
  __int128 v17;
  uint64_t v18;
  __int128 v19;
  unint64_t *v20;
  uint64_t v21;
  _OWORD *v22;
  unint64_t *v23;
  _OWORD *v24;
  unint64_t v25;
  _BOOL4 v26;
  __int128 v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  _BOOL4 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  unint64_t *v37;
  unint64_t *v38;
  _BOOL4 v39;
  __int128 v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  uint64_t v45;
  uint64_t v46;
  __int128 v47;

  if (a3)
  {
    v5 = a4;
    v8 = (unint64_t *)a1;
    if (a3 == 2)
    {
      v10 = *(a2 - 5);
      v11 = (__n128 *)(a2 - 5);
      v12 = *(a2 - 4) < *((_QWORD *)a1 + 1);
      v13 = v10 == *(_QWORD *)a1;
      v14 = v10 < *(_QWORD *)a1;
      if (!v13)
        v12 = v14;
      if (v12)
      {
        v15 = *v11;
        v16 = *(_OWORD *)(a2 - 3);
        *(_QWORD *)(a4 + 32) = *(a2 - 1);
        *(__n128 *)a4 = v15;
        *(_OWORD *)(a4 + 16) = v16;
        result = (__n128)*a1;
        v17 = a1[1];
        v18 = *((_QWORD *)a1 + 4);
      }
      else
      {
        v35 = *a1;
        v36 = a1[1];
        *(_QWORD *)(a4 + 32) = *((_QWORD *)a1 + 4);
        *(_OWORD *)a4 = v35;
        *(_OWORD *)(a4 + 16) = v36;
        result = *v11;
        v17 = *(_OWORD *)(a2 - 3);
        v18 = *(a2 - 1);
      }
      *(_QWORD *)(a4 + 72) = v18;
      *(__n128 *)(a4 + 40) = result;
      *(_OWORD *)(a4 + 56) = v17;
    }
    else if (a3 == 1)
    {
      result = (__n128)*a1;
      v9 = a1[1];
      *(_QWORD *)(a4 + 32) = *((_QWORD *)a1 + 4);
      *(__n128 *)a4 = result;
      *(_OWORD *)(a4 + 16) = v9;
    }
    else if ((uint64_t)a3 > 8)
    {
      v37 = (unint64_t *)a1 + 5 * (a3 >> 1);
      sub_1C6119BA4(a1, v37, a3 >> 1, a4, a3 >> 1);
      sub_1C6119BA4(&v8[5 * (a3 >> 1)], a2, a3 - (a3 >> 1), v5 + 40 * (a3 >> 1), a3 - (a3 >> 1));
      v38 = &v8[5 * (a3 >> 1)];
      while (v38 != a2)
      {
        v39 = *v38 < *v8;
        if (*v38 == *v8)
          v39 = v38[1] < v8[1];
        if (v39)
        {
          result = *(__n128 *)v38;
          v40 = *((_OWORD *)v38 + 1);
          *(_QWORD *)(v5 + 32) = v38[4];
          *(__n128 *)v5 = result;
          *(_OWORD *)(v5 + 16) = v40;
          v38 += 5;
        }
        else
        {
          result = *(__n128 *)v8;
          v41 = *((_OWORD *)v8 + 1);
          *(_QWORD *)(v5 + 32) = v8[4];
          *(__n128 *)v5 = result;
          *(_OWORD *)(v5 + 16) = v41;
          v8 += 5;
        }
        v5 += 40;
        if (v8 == v37)
        {
          if (v38 != a2)
          {
            v42 = 0;
            do
            {
              v43 = v5 + v42 * 8;
              result = *(__n128 *)&v38[v42];
              v44 = *(_OWORD *)&v38[v42 + 2];
              *(_QWORD *)(v43 + 32) = v38[v42 + 4];
              *(__n128 *)v43 = result;
              *(_OWORD *)(v43 + 16) = v44;
              v42 += 5;
            }
            while (&v38[v42] != a2);
          }
          return result;
        }
      }
      if (v8 != v37)
      {
        v45 = 0;
        do
        {
          v46 = v5 + v45 * 8;
          result = *(__n128 *)&v8[v45];
          v47 = *(_OWORD *)&v8[v45 + 2];
          *(_QWORD *)(v46 + 32) = v8[v45 + 4];
          *(__n128 *)v46 = result;
          *(_OWORD *)(v46 + 16) = v47;
          v45 += 5;
        }
        while (&v8[v45] != v37);
      }
    }
    else if (a1 != (__int128 *)a2)
    {
      result = (__n128)*a1;
      v19 = a1[1];
      *(_QWORD *)(a4 + 32) = *((_QWORD *)a1 + 4);
      *(__n128 *)a4 = result;
      *(_OWORD *)(a4 + 16) = v19;
      v20 = (unint64_t *)a1 + 5;
      if ((unint64_t *)((char *)a1 + 40) != a2)
      {
        v21 = 0;
        v22 = (_OWORD *)a4;
        do
        {
          v23 = v20;
          v24 = (_OWORD *)((char *)v22 + 40);
          v25 = *v20;
          v13 = v25 == *(_QWORD *)v22;
          v26 = v25 < *(_QWORD *)v22;
          if (v13)
            v26 = v8[6] < *((_QWORD *)v22 + 1);
          if (v26)
          {
            v27 = v22[1];
            *v24 = *v22;
            *(_OWORD *)((char *)v22 + 56) = v27;
            *((_QWORD *)v22 + 9) = *((_QWORD *)v22 + 4);
            v28 = a4;
            if (v22 != (_OWORD *)a4)
            {
              v29 = v21;
              while (1)
              {
                v28 = a4 + v29;
                v30 = *(_QWORD *)(a4 + v29 - 40);
                v13 = *v23 == v30;
                v31 = *v23 < v30;
                if (v13)
                  v31 = v8[6] < *(_QWORD *)(a4 + v29 - 32);
                if (!v31)
                  break;
                v32 = *(_OWORD *)(a4 + v29 - 24);
                *(_OWORD *)v28 = *(_OWORD *)(a4 + v29 - 40);
                *(_OWORD *)(v28 + 16) = v32;
                *(_DWORD *)(v28 + 32) = *(_DWORD *)(a4 + v29 - 8);
                v29 -= 40;
                if (!v29)
                {
                  v28 = a4;
                  break;
                }
              }
            }
            result = *(__n128 *)v23;
            v33 = *((_OWORD *)v23 + 1);
            *(_DWORD *)(v28 + 32) = *((_DWORD *)v23 + 8);
            *(__n128 *)v28 = result;
            *(_OWORD *)(v28 + 16) = v33;
          }
          else
          {
            result = *(__n128 *)v23;
            v34 = *((_OWORD *)v23 + 1);
            *((_QWORD *)v22 + 9) = v23[4];
            *v24 = result;
            *(_OWORD *)((char *)v22 + 56) = v34;
          }
          v20 = v23 + 5;
          v21 += 40;
          v22 = v24;
          v8 = v23;
        }
        while (v23 + 5 != a2);
      }
    }
  }
  return result;
}

int64x2_t *sub_1C611A18C(int64x2_t *result, int64x2_t *a2, int64x2_t *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  int64x2_t *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int64x2_t *v13;
  unint64_t v14;
  BOOL v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int64x2_t *v20;
  unint64_t v21;
  int64x2_t v22;
  int64x2_t *v23;
  unint64_t v24;
  int64x2_t *v25;
  __int8 *v26;
  int64x2_t v27;
  int32x2_t v28;
  __int8 v29;
  int64x2_t *v30;
  uint64_t v31;
  unint64_t v32;
  int64x2_t v33;
  unint64_t v34;
  int64x2_t *v35;
  int64x2_t *v36;
  int64x2_t v37;
  int32x2_t v38;
  __int8 v39;
  int64x2_t *v40;
  unint64_t v41;
  BOOL v42;
  int64x2_t *v43;
  int64x2_t *v44;
  uint64_t v45;
  int64x2_t v46;
  int64x2_t v47;
  __int32 v48;
  int64x2_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char *v57;
  __int128 v58;
  __int128 v59;
  uint64_t v60;
  char *v61;
  char *v62;
  char *v63;
  __int128 v64;
  __int128 v65;
  unint64_t v66;
  BOOL v67;
  char v68;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  int64x2_t *v73;
  int64x2_t *v74;
  uint64_t v75;
  int64x2_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int64x2_t *v80;
  unint64_t v81;
  char *v82;
  __int128 v83;
  __int128 v84;
  char *v85;
  __int8 *v86;
  unint64_t v87;
  unint64_t v88;
  _BOOL4 v89;
  BOOL v90;
  char *v91;
  __int128 v92;
  __int128 v93;
  unint64_t v94;
  char *v95;
  __int128 v96;
  __int128 v97;
  char *v98;
  _BOOL4 v99;
  int64x2_t v100;
  int64x2_t v101;
  int64x2_t v102;
  int64x2_t v103;
  int64x2_t *v104;
  int64x2_t v105;
  int64x2_t v106;
  uint64_t v107;
  char *v108;
  __int128 v109;
  __int128 v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  int64x2_t *v116;
  int64x2_t *v117;
  char *__src;
  int64x2_t v119;
  int64x2_t v120;
  __int128 v121;
  int64x2_t v122;
  int64x2_t v123;
  int64x2_t v124;
  __int128 v125;
  int64x2_t v126;
  uint64_t v127;
  uint64_t v128;
  int v129;
  uint64_t v130;

  if (a5)
  {
    v9 = result;
    while (a4 > a7 && a5 > a7)
    {
      if (!a4)
        return result;
      v10 = 0;
      v11 = a2->i64[0];
      v12 = -a4;
      while (1)
      {
        v13 = (int64x2_t *)((char *)v9 + v10);
        v14 = v9->u64[v10 / 8];
        v42 = v11 == v14;
        v15 = v11 < v14;
        if (v42)
          v15 = a2->i64[1] < (unint64_t)v9->i64[v10 / 8 + 1];
        if (v15)
          break;
        v10 += 40;
        if (__CFADD__(v12++, 1))
          return result;
      }
      v17 = -v12;
      __src = a6;
      if (-v12 >= a5)
      {
        if (v12 == -1)
        {
          v104 = (int64x2_t *)((char *)v9 + v10);
          v130 = v9[2].i64[v10 / 8];
          v122 = *(int64x2_t *)((char *)v9 + v10);
          v126 = *(int64x2_t *)((char *)&v9[1] + v10);
          v105 = *a2;
          v106 = a2[1];
          v104[2].i32[0] = a2[2].i32[0];
          *v104 = v105;
          v104[1] = v106;
          a2[2].i32[0] = v130;
          *a2 = v122;
          a2[1] = v126;
          return result;
        }
        if (v12 > 0)
          v17 = 1 - v12;
        v31 = v17 >> 1;
        v23 = (int64x2_t *)((char *)v9 + 40 * (v17 >> 1) + v10);
        v20 = a3;
        if (a3 != a2)
        {
          v32 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a3 - (char *)a2) >> 3);
          v33 = *v23;
          v20 = a2;
          do
          {
            v34 = v32 >> 1;
            v35 = (int64x2_t *)((char *)v20 + 40 * (v32 >> 1));
            v37 = *v35;
            v36 = (int64x2_t *)((char *)v35 + 40);
            v38 = vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)v33, (uint64x2_t)v37));
            if ((vmovn_s64(vceqq_s64(v37, v33)).u32[0] & 1) != 0)
              v39 = v38.i8[4];
            else
              v39 = v38.i8[0];
            v32 += ~(v32 >> 1);
            if ((v39 & 1) != 0)
              v20 = v36;
            else
              v32 = v34;
          }
          while (v32);
        }
        v19 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v20 - (char *)a2) >> 3);
        v30 = (int64x2_t *)((char *)v9 + 40 * v31 + v10);
      }
      else
      {
        if (a5 >= 0)
          v18 = a5;
        else
          v18 = a5 + 1;
        v19 = v18 >> 1;
        v20 = (int64x2_t *)((char *)a2 + 40 * (v18 >> 1));
        if (v13 == a2)
        {
          v30 = a2;
          v23 = a2;
        }
        else
        {
          v21 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)((char *)a2 - (char *)v9 - v10) >> 3);
          v22 = *v20;
          v23 = (int64x2_t *)((char *)v9 + v10);
          do
          {
            v24 = v21 >> 1;
            v25 = (int64x2_t *)((char *)v23 + 40 * (v21 >> 1));
            v27 = *v25;
            v26 = &v25[2].i8[8];
            v28 = vmovn_s64((int64x2_t)vcgtq_u64((uint64x2_t)v27, (uint64x2_t)v22));
            if ((vmovn_s64(vceqq_s64(v22, v27)).u32[0] & 1) != 0)
              v29 = v28.i8[4];
            else
              v29 = v28.i8[0];
            v21 += ~(v21 >> 1);
            if ((v29 & 1) != 0)
              v21 = v24;
            else
              v23 = (int64x2_t *)v26;
          }
          while (v21);
          v30 = v23;
        }
        v31 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)((char *)v30 - (char *)v9 - v10) >> 3);
      }
      v40 = v20;
      if (v23 != a2)
      {
        v40 = v30;
        if (a2 != v20)
        {
          if (&v23[2].u64[1] == (unint64_t *)a2)
          {
            v127 = v23[2].i64[0];
            v119 = *v23;
            v123 = v23[1];
            v50 = (char *)((char *)v20 - (char *)a2);
            v114 = v19;
            v116 = a3;
            v51 = a7;
            v111 = a5;
            v112 = v31;
            memmove(v23, a2, (char *)v20 - (char *)a2 - 4);
            v31 = v112;
            v19 = v114;
            a5 = v111;
            a7 = v51;
            a3 = v116;
            v40 = (int64x2_t *)&v50[(_QWORD)v23];
            *v40 = v119;
            v40[1] = v123;
            v40[2].i32[0] = v127;
          }
          else if (&a2[2].u64[1] == (unint64_t *)v20)
          {
            v128 = v20[-1].i64[1];
            v120 = *(int64x2_t *)((char *)v20 - 40);
            v124 = *(int64x2_t *)((char *)v20 - 24);
            v40 = (int64x2_t *)((char *)v30 + 40);
            if (&v20[-3].u64[1] != (unint64_t *)v23)
            {
              v115 = v19;
              v117 = a3;
              v52 = a7;
              v53 = a5;
              v113 = v31;
              memmove(&v30[2].u64[1], v23, (char *)&v20[-3].u64[1] - (char *)v30 - 4);
              v40 = (int64x2_t *)((char *)v30 + 40);
              v31 = v113;
              v19 = v115;
              a3 = v117;
              a5 = v53;
              a7 = v52;
            }
            v23[2].i32[0] = v128;
            *v23 = v120;
            v23[1] = v124;
          }
          else
          {
            v41 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a2 - (char *)v30) >> 3);
            if (v41 == 0xCCCCCCCCCCCCCCCDLL * (((char *)v20 - (char *)a2) >> 3))
            {
              v42 = a2 == v20 || v30 == a2;
              if (!v42)
              {
                v43 = (int64x2_t *)((char *)v30 + 40);
                v44 = (int64x2_t *)((char *)a2 + 40);
                do
                {
                  v45 = v43[-1].i64[1];
                  v46 = *(int64x2_t *)((char *)v43 - 40);
                  v47 = *(int64x2_t *)((char *)v43 - 24);
                  v48 = v44[-1].i32[2];
                  v49 = *(int64x2_t *)((char *)v44 - 24);
                  *(int64x2_t *)((char *)v43 - 40) = *(int64x2_t *)((char *)v44 - 40);
                  *(int64x2_t *)((char *)v43 - 24) = v49;
                  v43[-1].i32[2] = v48;
                  *(int64x2_t *)((char *)v44 - 24) = v47;
                  *(int64x2_t *)((char *)v44 - 40) = v46;
                  v44[-1].i32[2] = v45;
                  if (v43 == a2)
                    break;
                  v43 = (int64x2_t *)((char *)v43 + 40);
                  v42 = v44 == v20;
                  v44 = (int64x2_t *)((char *)v44 + 40);
                }
                while (!v42);
              }
              v40 = a2;
            }
            else
            {
              v54 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v20 - (char *)a2) >> 3);
              v55 = 0xCCCCCCCCCCCCCCCDLL * (((char *)a2 - (char *)v30) >> 3);
              do
              {
                v56 = v55;
                v55 = v54;
                v54 = v56 % v54;
              }
              while (v54);
              if (v55)
              {
                v57 = &v30->i8[40 * v55];
                do
                {
                  v58 = *(_OWORD *)(v57 - 40);
                  v59 = *(_OWORD *)(v57 - 24);
                  v60 = *((_QWORD *)v57 - 1);
                  v57 -= 40;
                  v121 = v58;
                  v125 = v59;
                  v129 = v60;
                  v61 = &v57[8 * (((char *)a2 - (char *)v30) >> 3)];
                  v62 = v57;
                  do
                  {
                    v63 = v61;
                    v64 = *(_OWORD *)v61;
                    v65 = *((_OWORD *)v61 + 1);
                    *((_DWORD *)v62 + 8) = *((_DWORD *)v61 + 8);
                    *(_OWORD *)v62 = v64;
                    *((_OWORD *)v62 + 1) = v65;
                    v66 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v20 - v61) >> 3);
                    v61 += 8 * (((char *)a2 - (char *)v30) >> 3);
                    v67 = __OFSUB__(v41, v66);
                    v69 = v41 - v66;
                    v68 = (v69 < 0) ^ v67;
                    v70 = &v30->i8[40 * v69];
                    if (!v68)
                      v61 = v70;
                    v62 = v63;
                  }
                  while (v61 != v57);
                  *((_DWORD *)v63 + 8) = v129;
                  *(_OWORD *)v63 = v121;
                  *((_OWORD *)v63 + 1) = v125;
                }
                while (v57 != (char *)v30);
              }
              v40 = (int64x2_t *)((char *)v30 + 8 * (((char *)v20 - (char *)a2) >> 3));
            }
          }
        }
      }
      a4 = -(v31 + v12);
      v71 = a5 - v19;
      if (v31 + v19 >= a5 - (v31 + v19) - v12)
      {
        v77 = v31;
        v78 = -(v31 + v12);
        a6 = __src;
        v79 = a7;
        v71 = v19;
        v80 = v40;
        result = (int64x2_t *)sub_1C611A18C(v40, v20, a3, v78, a5 - v19, __src);
        a7 = v79;
        v20 = v23;
        a4 = v77;
        a3 = v80;
      }
      else
      {
        v72 = &v9->i8[v10];
        v73 = v30;
        v74 = a3;
        a6 = __src;
        v75 = a7;
        v76 = v40;
        result = (int64x2_t *)sub_1C611A18C(v72, v73, v40, v31, v19, __src);
        a7 = v75;
        a3 = v74;
        v13 = v76;
      }
      a5 = v71;
      v9 = v13;
      a2 = v20;
      if (!v71)
        return result;
    }
    if (a4 <= a5)
    {
      if (v9 != a2)
      {
        v94 = 0;
        do
        {
          v95 = &a6[v94];
          v96 = *(__int128 *)((char *)v9 + v94);
          v97 = *(__int128 *)((char *)&v9[1] + v94);
          *((_QWORD *)v95 + 4) = v9[2].i64[v94 / 8];
          *(_OWORD *)v95 = v96;
          *((_OWORD *)v95 + 1) = v97;
          v94 += 40;
        }
        while (&v9->i8[v94] != (__int8 *)a2);
        if (v94)
        {
          v98 = a6;
          while (a2 != a3)
          {
            v99 = a2->i64[0] < *(_QWORD *)v98;
            if (a2->i64[0] == *(_QWORD *)v98)
              v99 = a2->i64[1] < *((_QWORD *)v98 + 1);
            if (v99)
            {
              v100 = *a2;
              v101 = a2[1];
              v9[2].i32[0] = a2[2].i32[0];
              *v9 = v100;
              v9[1] = v101;
              a2 = (int64x2_t *)((char *)a2 + 40);
            }
            else
            {
              v102 = *(int64x2_t *)v98;
              v103 = *((int64x2_t *)v98 + 1);
              v9[2].i32[0] = *((_DWORD *)v98 + 8);
              *v9 = v102;
              v9[1] = v103;
              v98 += 40;
            }
            v9 = (int64x2_t *)((char *)v9 + 40);
            if (&a6[v94] == v98)
              return result;
          }
          return (int64x2_t *)memmove(v9, v98, a6 - v98 + v94 - 4);
        }
      }
    }
    else if (a2 != a3)
    {
      v81 = 0;
      do
      {
        v82 = &a6[v81];
        v83 = *(__int128 *)((char *)a2 + v81);
        v84 = *(__int128 *)((char *)&a2[1] + v81);
        *((_QWORD *)v82 + 4) = a2[2].i64[v81 / 8];
        *(_OWORD *)v82 = v83;
        *((_OWORD *)v82 + 1) = v84;
        v81 += 40;
      }
      while (&a2->i8[v81] != (__int8 *)a3);
      if (v81)
      {
        v85 = &a6[v81];
        v86 = &a3[-3].i8[8];
        while (a2 != v9)
        {
          v87 = *((_QWORD *)v85 - 5);
          v88 = a2[-3].u64[1];
          v42 = v87 == v88;
          v89 = v87 < v88;
          if (v42)
            v89 = *((_QWORD *)v85 - 4) < a2[-2].i64[0];
          v90 = !v89;
          if (v89)
            v91 = &a2[-3].i8[8];
          else
            v91 = v85 - 40;
          if (v90)
            v85 -= 40;
          else
            a2 = (int64x2_t *)((char *)a2 - 40);
          v92 = *(_OWORD *)v91;
          v93 = *((_OWORD *)v91 + 1);
          *((_DWORD *)v86 + 8) = *((_DWORD *)v91 + 8);
          *(_OWORD *)v86 = v92;
          *((_OWORD *)v86 + 1) = v93;
          v86 -= 40;
          if (v85 == a6)
            return result;
        }
        if (v85 != a6)
        {
          v107 = 0;
          do
          {
            v108 = &v86[v107];
            v109 = *(_OWORD *)&v85[v107 - 40];
            v110 = *(_OWORD *)&v85[v107 - 24];
            *((_DWORD *)v108 + 8) = *(_DWORD *)&v85[v107 - 8];
            *(_OWORD *)v108 = v109;
            *((_OWORD *)v108 + 1) = v110;
            v107 -= 40;
          }
          while (&v85[v107] != a6);
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C611A848(_DWORD *a1, _DWORD *a2)
{
  if (*a1 < *a2)
    return 0xFFFFFFFFLL;
  else
    return *a2 < *a1;
}

uint64_t sub_1C611A864(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E81A0C88;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_1C611A8A4(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E81A0C88;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t *sub_1C611A8F4(uint64_t *a1, uint64_t a2)
{
  uint64_t NamedMetadata;
  _QWORD v6[4];
  __int16 v7;

  v6[0] = "air.visible";
  v7 = 259;
  NamedMetadata = llvm::Module::getNamedMetadata(a2, (uint64_t)v6);
  *a1 = NamedMetadata;
  if (!NamedMetadata)
  {
    v6[0] = "agx.visible";
    v7 = 259;
    *a1 = llvm::Module::getNamedMetadata(a2, (uint64_t)v6);
  }
  return a1;
}

BOOL sub_1C611A970(uint64_t a1, uint64_t a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  if (!*(_QWORD *)a1)
    return 0;
  v2 = *(uint64_t **)(*(_QWORD *)a1 + 48);
  v3 = *((unsigned int *)v2 + 2);
  if ((_DWORD)v3)
  {
    v4 = 0;
    v5 = *v2;
    while (1)
    {
      v6 = *(_QWORD *)(*(_QWORD *)(v5 + 8 * v4) - 8 * *(unsigned int *)(*(_QWORD *)(v5 + 8 * v4) + 8));
      if (v6)
      {
        if (*(_BYTE *)v6 == 1)
        {
          v6 = *(_QWORD *)(v6 + 128);
          if (*(_BYTE *)(v6 + 16))
            v6 = 0;
        }
        else
        {
          v6 = 0;
        }
      }
      if (v6 == a2)
        break;
      if (v3 == ++v4)
      {
        LODWORD(v4) = v3;
        return (_DWORD)v4 != (_DWORD)v3;
      }
    }
  }
  else
  {
    LODWORD(v4) = 0;
  }
  return (_DWORD)v4 != (_DWORD)v3;
}

_QWORD *sub_1C611A9F8()
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &off_1E81AE6B0;
  return result;
}

uint64_t sub_1C611AA2C(uint64_t result)
{
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

void sub_1C611AA44(std::error_category *a1)
{
  std::error_category::~error_category(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C611AA68()
{
  return "llvm.codeview";
}

void sub_1C611AA74(uint64_t a1, int a2)
{
  __asm { BR              X10 }
}

char *sub_1C611AAA0()
{
  uint64_t v0;
  char *result;

  result = (char *)operator new(0x28uLL);
  *(_QWORD *)v0 = result;
  *(_OWORD *)(v0 + 8) = xmmword_1C8662E90;
  strcpy(result, "An unknown CodeView error has occurred.");
  return result;
}

void sub_1C611ABF4(_QWORD *a1@<X0>, unsigned int *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  void *v16;
  _QWORD *v17;
  _QWORD *v18;
  int v19;
  char v20;
  char v21;
  const char *v22;
  uint64_t *v23;
  uint64_t v24;
  _QWORD v25[4];
  __int16 v26;
  _QWORD v27[4];
  char v28;
  char v29;
  void *v30[2];
  char v31;

  v7 = a1[7];
  if (v7)
  {
    v8 = a1[5];
    if (!v8)
    {
      if (!a1[6])
      {
        (*(void (**)(void **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v7 + 48))(v30, v7, *a2);
        v16 = (void *)(v31 & 0x7F);
        if (v31 < 0)
          v16 = v30[1];
        if (!v16)
        {
          v17 = a1;
          v18 = a3;
          goto LABEL_30;
        }
        v19 = *((unsigned __int8 *)a3 + 32);
        if (v19 == 1)
        {
          v22 = ": ";
          v25[0] = ": ";
          v26 = 259;
          v20 = 3;
        }
        else
        {
          if (!*((_BYTE *)a3 + 32))
          {
            v20 = 0;
            v26 = 256;
            v21 = 1;
LABEL_29:
            v28 = v20;
            v29 = v21;
            v18 = v27;
            v17 = a1;
LABEL_30:
            sub_1C63EC294(v17, (uint64_t)v18);
            (*(void (**)(_QWORD, _QWORD, uint64_t))(*(_QWORD *)a1[7] + 8))(a1[7], *a2, 4);
            if (a1[7] && !a1[5] && !a1[6])
              a1[8] += 4;
            if (v31 < 0)
              operator delete(v30[0]);
            goto LABEL_36;
          }
          v23 = (uint64_t *)*a3;
          v24 = a3[1];
          v20 = 2;
          if (*((_BYTE *)a3 + 33) != 1)
          {
            LOBYTE(v19) = 2;
            v23 = a3;
          }
          v25[0] = v23;
          v25[1] = v24;
          v25[2] = ": ";
          LOBYTE(v26) = v19;
          HIBYTE(v26) = 3;
          v22 = (const char *)v25;
        }
        v27[0] = v22;
        v27[2] = v30;
        v21 = 4;
        goto LABEL_29;
      }
      v8 = 0;
    }
LABEL_19:
    LODWORD(v27[0]) = 0;
    sub_1C63EBBEC(v8, (unsigned int *)v27, a4);
    if (*a4)
      return;
    *a2 = v27[0];
    goto LABEL_36;
  }
  v8 = a1[5];
  v9 = a1[6];
  if (v9)
    v10 = v8 == 0;
  else
    v10 = 0;
  if (!v10)
    goto LABEL_19;
  v11 = *a2;
  v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v9 + 24) + 16))(*(_QWORD *)(v9 + 24));
  v13 = bswap32(v11);
  if ((v12 - 1) >= 2)
    v14 = v13;
  else
    v14 = v11;
  LODWORD(v27[0]) = v14;
  llvm::BinaryStreamWriter::writeBytes(v9, (uint64_t)v27, 4, a4);
  if (!*a4)
LABEL_36:
    *a4 = 0;
}

void sub_1C611ADF0(_QWORD *a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t *v10;
  uint64_t *v11;
  unsigned int v12;
  char v13;

  if (a1[7])
  {
    v6 = a1[5];
    if (!v6)
    {
      sub_1C63EC318((uint64_t)a1, a2, a3);
LABEL_16:
      *a4 = 0;
      return;
    }
    goto LABEL_8;
  }
  v6 = a1[5];
  if (a1[6])
    v7 = v6 == 0;
  else
    v7 = 0;
  if (!v7)
  {
LABEL_8:
    v12 = 1;
    v11 = 0;
    v13 = 0;
    sub_1C63EEF2C(v6, (uint64_t *)&v11, a4);
    v8 = *a4;
    v9 = v12;
    if (!*a4)
    {
      v10 = v11;
      if (v12 < 0x41)
        v10 = (uint64_t *)&v11;
      *a2 = *v10;
    }
    if (v9 >= 0x41)
    {
      if (v11)
        MEMORY[0x1CAA32F9C](v11, 0x1000C8000313F17);
    }
    if (!v8)
      goto LABEL_16;
    return;
  }
  sub_1C63EC60C((uint64_t)a1, (unsigned __int16 *)a2, a4);
  if (!*a4)
    goto LABEL_16;
}

void sub_1C611AED4(uint64_t *a1@<X0>, int a2@<W1>, char **a3@<X8>)
{
  uint64_t v6;
  char *v7;
  unsigned int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  char v13;
  unsigned __int8 v14;
  unsigned int v15;
  unsigned int v16;
  uint64_t v17;
  _WORD *v18;
  int v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  char *v29;
  char *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;

  sub_1C63EBF38((uint64_t)(a1 + 20), &v33);
  if (!v33)
  {
    if (*((_BYTE *)a1 + 154))
      *((_BYTE *)a1 + 154) = 0;
    v33 = 0;
  }
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  v6 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v6)
  {
    v7 = (char *)operator new(16 * v6);
    v8 = 0;
    LOBYTE(v9) = 0;
    *a3 = v7;
    a3[1] = v7;
    a3[2] = &v7[16 * v6];
    v10 = *a1;
    v11 = *a1 + 4 * v6;
    v12 = *((_DWORD *)a1 + 34);
    v13 = 1;
    v31 = *a1;
    while (1)
    {
      v14 = v9;
      v15 = v12;
      v16 = *(_DWORD *)(v11 - 4);
      v11 -= 4;
      v12 = v16;
      v9 = a2;
      v17 = v15 - v16;
      v18 = (_WORD *)(a1[6] + v16);
      *v18 = v15 - v16 - 2;
      if ((v13 & 1) == 0)
      {
        v19 = v14 | v8;
        v20 = (uint64_t)v18 + v17 - 8;
        if (v17 <= 8)
          v20 = (uint64_t)v18;
        *(_DWORD *)(v20 + 4) = v19;
      }
      v21 = (unint64_t)a3[2];
      if ((unint64_t)v7 >= v21)
        break;
      *(_QWORD *)v7 = v18;
      *((_QWORD *)v7 + 1) = v17;
      v22 = v7 + 16;
LABEL_30:
      v13 = 0;
      a3[1] = v22;
      a2 = v9 + 1;
      v8 = v9 & 0xFFFFFF00;
      v7 = v22;
      if (v11 == v10)
        goto LABEL_31;
    }
    v23 = *a3;
    v24 = (v7 - *a3) >> 4;
    v25 = v24 + 1;
    if ((unint64_t)(v24 + 1) >> 60)
      abort();
    v26 = v21 - (_QWORD)v23;
    if (v26 >> 3 > v25)
      v25 = v26 >> 3;
    if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF0)
      v27 = 0xFFFFFFFFFFFFFFFLL;
    else
      v27 = v25;
    v32 = v11;
    if (v27)
    {
      if (v27 >> 60)
        sub_1C4764EE4();
      v28 = (char *)operator new(16 * v27);
    }
    else
    {
      v28 = 0;
    }
    v29 = &v28[16 * v24];
    v30 = &v28[16 * v27];
    *(_QWORD *)v29 = v18;
    *((_QWORD *)v29 + 1) = v17;
    v22 = v29 + 16;
    if (v7 == v23)
    {
      *a3 = v29;
      a3[1] = v22;
      a3[2] = v30;
    }
    else
    {
      do
      {
        *((_OWORD *)v29 - 1) = *((_OWORD *)v7 - 1);
        v29 -= 16;
        v7 -= 16;
      }
      while (v7 != v23);
      v7 = *a3;
      *a3 = v29;
      a3[1] = v22;
      a3[2] = v30;
      if (!v7)
        goto LABEL_29;
    }
    operator delete(v7);
LABEL_29:
    v10 = v31;
    v11 = v32;
    goto LABEL_30;
  }
LABEL_31:
  if (*((_BYTE *)a1 + 36))
    *((_BYTE *)a1 + 36) = 0;
}

uint64_t sub_1C611B0C8(uint64_t result)
{
  uint64_t v1;
  int v2;
  unsigned int v3;
  char v4;
  uint64_t v5;
  char v6;

  if ((*(_DWORD *)(result + 56) & 3) != 0)
  {
    v1 = result;
    v2 = 5 - (*(_DWORD *)(result + 56) & 3);
    do
    {
      v3 = v2 - 1;
      v4 = v2 - 17;
      (*(void (**)(_QWORD))(**(_QWORD **)(v1 + 24) + 16))(*(_QWORD *)(v1 + 24));
      v6 = v4;
      result = llvm::BinaryStreamWriter::writeBytes(v1, (uint64_t)&v6, 1, &v5);
      v2 = v3;
    }
    while (v3 > 1);
  }
  return result;
}

void sub_1C611B144()
{
  qword_1ED838D68 = 0xB0C0B0C000001404;
  word_1ED838D72 = 4611;
  qword_1ED838D74 = 0xB0C0B0C000001404;
  word_1ED838D7E = 4614;
}

_QWORD *sub_1C611B17C(_QWORD *a1, _QWORD *a2, int a3)
{
  _QWORD *v4;
  _QWORD *v6;

  *a1 = &off_1E81AE750;
  a1[1] = 0;
  a1[2] = &unk_1E81ABEA0;
  if (a3)
    v4 = a2;
  else
    v4 = a1 + 2;
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  a1[6] = v4;
  if (!a3)
  {
    v6 = operator new(0x10uLL);
    *v6 = a1;
    v6[1] = a2;
    a1[3] = v6;
    a1[4] = v6 + 2;
    a1[5] = v6 + 2;
  }
  return a1;
}

_QWORD *sub_1C611B1EC(_QWORD *a1)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v5;

  a1[2] = &unk_1E81ABEA0;
  v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  v3 = (_QWORD *)a1[1];
  *a1 = &off_1E81AE750;
  a1[1] = 0;
  if (v3)
  {
    v5 = sub_1C63EBCA8(v3);
    MEMORY[0x1CAA32FC0](v5, 0x10F0C406E37C078);
  }
  return a1;
}

uint64_t sub_1C611B25C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;

  *(_QWORD *)a1 = &unk_1E818AD00;
  *(_DWORD *)(a1 + 8) = 1;
  *(_QWORD *)(a1 + 16) = a3;
  *(_QWORD *)(a1 + 24) = a4;
  *(_QWORD *)(a1 + 32) = &unk_1E8185470;
  v8 = a1 + 32;
  llvm::BinaryStreamRef::BinaryStreamRef(a1 + 40, a1);
  *(_QWORD *)(a1 + 88) = 0;
  sub_1C63EE22C(a1 + 96, v8);
  *(_QWORD *)(a1 + 208) = &unk_1E81ABEA0;
  if (a5)
    v9 = a2;
  else
    v9 = a1 + 208;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 240) = v9;
  if (!a5)
  {
    v10 = operator new(0x10uLL);
    *v10 = a1 + 96;
    v10[1] = a2;
    *(_QWORD *)(a1 + 216) = v10;
    *(_QWORD *)(a1 + 224) = v10 + 2;
    *(_QWORD *)(a1 + 232) = v10 + 2;
  }
  return a1;
}

_QWORD *sub_1C611B324(_QWORD *a1)
{
  void *v2;
  std::__shared_weak_count *v3;
  unint64_t *p_shared_owners;
  unint64_t v5;

  a1[26] = &unk_1E81ABEA0;
  v2 = (void *)a1[27];
  if (v2)
  {
    a1[28] = v2;
    operator delete(v2);
  }
  sub_1C63EE43C(a1 + 12);
  a1[4] = &unk_1E8185470;
  v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    p_shared_owners = (unint64_t *)&v3->__shared_owners_;
    do
      v5 = __ldaxr(p_shared_owners);
    while (__stlxr(v5 - 1, p_shared_owners));
    if (!v5)
    {
      ((void (*)(std::__shared_weak_count *))v3->__on_zero_shared)(v3);
      std::__shared_weak_count::__release_weak(v3);
    }
  }
  return a1;
}

void sub_1C611B3B4(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v6 = a2[1] - 4;
  v7 = *a2 + 4;
  v8 = operator new();
  *(_QWORD *)v8 = &unk_1E818AD00;
  *(_DWORD *)(v8 + 8) = 1;
  *(_QWORD *)(v8 + 16) = v7;
  *(_QWORD *)(v8 + 24) = v6;
  *(_QWORD *)(v8 + 32) = &unk_1E8185470;
  llvm::BinaryStreamRef::BinaryStreamRef(v8 + 40, v8);
  *(_QWORD *)(v8 + 88) = 0;
  *(_QWORD *)(v8 + 96) = &off_1E81B1C10;
  *(_BYTE *)(v8 + 104) = 0;
  *(_BYTE *)(v8 + 106) = 0;
  *(_BYTE *)(v8 + 108) = 0;
  *(_BYTE *)(v8 + 110) = 0;
  *(_QWORD *)(v8 + 112) = v8 + 128;
  *(_QWORD *)(v8 + 120) = 0x200000000;
  *(_QWORD *)(v8 + 152) = v8 + 32;
  *(_QWORD *)(v8 + 160) = 0;
  *(_QWORD *)(v8 + 168) = 0;
  *(_QWORD *)(v8 + 176) = 0;
  v9 = *(_QWORD **)(a1 + 8);
  *(_QWORD *)(a1 + 8) = v8;
  if (v9)
  {
    v10 = sub_1C63EBCA8(v9);
    MEMORY[0x1CAA32FC0](v10, 0x10F0C406E37C078);
    v8 = *(_QWORD *)(a1 + 8);
  }
  sub_1C611E0A0(v8 + 96, a2, a3);
}

void sub_1C611B4C0(uint64_t *a1, uint64_t *a2, _QWORD *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  _BYTE v38[48];
  uint64_t v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  if (a3[1] < 4uLL)
    goto LABEL_2;
  v12 = *(unsigned __int16 *)(*a3 + 2);
  if (v12 > 0x1502)
  {
    if (*(unsigned __int16 *)(*a3 + 2) <= 0x151Cu)
    {
      switch(*(_WORD *)(*a3 + 2))
      {
        case 0x1503:
          v13 = *a2;
          *(_WORD *)v38 = 5379;
          *(_QWORD *)&v38[2] = 0;
          memset(&v38[16], 0, 24);
          (*(void (**)(uint64_t, _QWORD *, _BYTE *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v13 + 128))(v13, a3, v38, a4, a5, a6, a7, a8);
          goto LABEL_53;
        case 0x1504:
        case 0x1505:
          goto LABEL_27;
        case 0x1506:
          v22 = *a2;
          *(_WORD *)v38 = 5382;
          *(_QWORD *)&v38[2] = 0;
          memset(&v38[16], 0, 32);
          v39 = 0;
          (*(void (**)(uint64_t, _QWORD *, _BYTE *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v22 + 144))(v22, a3, v38, a4, a5, a6, a7, a8);
          goto LABEL_53;
        case 0x1507:
          v23 = *a2;
          *(_WORD *)v38 = 5383;
          *(_QWORD *)&v38[2] = 0;
          memset(&v38[16], 0, 32);
          LODWORD(v39) = 0;
          (*(void (**)(uint64_t, _QWORD *, _BYTE *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v23 + 152))(v23, a3, v38, a4, a5, a6, a7, a8);
          goto LABEL_53;
        case 0x1508:
          goto LABEL_2;
        case 0x1509:
          v24 = *a2;
          *(_WORD *)v38 = 5385;
          memset(&v38[4], 0, 28);
          (*(void (**)(uint64_t, _QWORD *, _BYTE *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v24 + 336))(v24, a3, v38, a4, a5, a6, a7, a8);
          goto LABEL_53;
        default:
          if (v12 == 5397)
          {
            v31 = *a2;
            *(_WORD *)v38 = 5397;
            *(_QWORD *)&v38[10] = 0;
            *(_QWORD *)&v38[2] = 0;
            memset(&v38[20], 0, 20);
            (*(void (**)(uint64_t, _QWORD *, _BYTE *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v31 + 160))(v31, a3, v38, a4, a5, a6, a7, a8);
            goto LABEL_53;
          }
          if (v12 != 5401)
            goto LABEL_2;
LABEL_27:
          sub_1C611BA88(a1, (uint64_t)a3, *a2);
          break;
      }
      goto LABEL_3;
    }
    switch(*(_WORD *)(*a3 + 2))
    {
      case 0x1601:
        v15 = *a2;
        *(_WORD *)v38 = 5633;
        *(_QWORD *)&v38[2] = 0;
        *(_QWORD *)&v38[16] = 0;
        *(_QWORD *)&v38[24] = 0;
        (*(void (**)(uint64_t, _QWORD *, _BYTE *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v15 + 272))(v15, a3, v38, a4, a5, a6, a7, a8);
        goto LABEL_53;
      case 0x1602:
        v25 = *a2;
        *(_WORD *)v38 = 5634;
        *(_QWORD *)&v38[2] = 0;
        *(_QWORD *)&v38[16] = 0;
        *(_QWORD *)&v38[24] = 0;
        (*(void (**)(uint64_t, _QWORD *, _BYTE *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v25 + 280))(v25, a3, v38, a4, a5, a6, a7, a8);
        goto LABEL_53;
      case 0x1603:
        v26 = *a2;
        *(_WORD *)v38 = 5635;
        *(_QWORD *)&v38[8] = &v38[24];
        *(_QWORD *)&v38[16] = 0x500000000;
        (*(void (**)(uint64_t, _QWORD *, _BYTE *))(*(_QWORD *)v26 + 288))(v26, a3, v38);
        v11 = *a1;
        if (!*a1)
          *a1 = 0;
        if (*(_BYTE **)&v38[8] == &v38[24])
          goto LABEL_4;
        free(*(void **)&v38[8]);
        goto LABEL_3;
      case 0x1604:
        v27 = *a2;
        *(_WORD *)v38 = 5636;
        memset(&v38[8], 0, 24);
        (*(void (**)(uint64_t))(*(_QWORD *)v27 + 296))(v27);
        goto LABEL_59;
      case 0x1605:
        v28 = *a2;
        *(_WORD *)v38 = 5637;
        *(_DWORD *)&v38[2] = 0;
        *(_QWORD *)&v38[8] = 0;
        *(_QWORD *)&v38[16] = 0;
        (*(void (**)(uint64_t, _QWORD *, _BYTE *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v28 + 304))(v28, a3, v38, a4, a5, a6, a7, a8);
        goto LABEL_53;
      case 0x1606:
        v29 = *a2;
        *(_WORD *)v38 = 5638;
        *(_QWORD *)&v38[2] = 0;
        *(_DWORD *)&v38[12] = 0;
        (*(void (**)(uint64_t, _QWORD *, _BYTE *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v29 + 312))(v29, a3, v38, a4, a5, a6, a7, a8);
        goto LABEL_53;
      case 0x1607:
        v30 = *a2;
        *(_WORD *)v38 = 5639;
        *(_QWORD *)&v38[2] = 0;
        *(_DWORD *)&v38[12] = 0;
        *(_WORD *)&v38[16] = 0;
        (*(void (**)(uint64_t, _QWORD *, _BYTE *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v30 + 320))(v30, a3, v38, a4, a5, a6, a7, a8);
        goto LABEL_53;
      default:
        if (v12 != 5405)
          goto LABEL_2;
        v21 = *a2;
        *(_WORD *)v38 = 5405;
        *(_QWORD *)&v38[2] = 0;
        memset(&v38[12], 0, 28);
        (*(void (**)(uint64_t, _QWORD *, _BYTE *))(*(_QWORD *)v21 + 168))(v21, a3, v38);
        v11 = *a1;
        if (!*a1)
          *a1 = 0;
        v18 = *(void **)&v38[16];
        if (!*(_QWORD *)&v38[16])
          goto LABEL_4;
        *(_QWORD *)&v38[24] = *(_QWORD *)&v38[16];
        break;
    }
    goto LABEL_63;
  }
  if (*(unsigned __int16 *)(*a3 + 2) > 0x1000u)
  {
    switch(*(_WORD *)(*a3 + 2))
    {
      case 0x1001:
        v20 = *a2;
        *(_WORD *)v38 = 4097;
        *(_DWORD *)&v38[2] = 0;
        *(_WORD *)&v38[6] = 0;
        (*(void (**)(uint64_t, _QWORD *, _BYTE *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v20 + 80))(v20, a3, v38, a4, a5, a6, a7, a8);
        goto LABEL_53;
      case 0x1002:
        v32 = *a2;
        *(_WORD *)v38 = 4098;
        *(_DWORD *)&v38[2] = 0;
        *(_DWORD *)&v38[8] = 0;
        v38[12] = 0;
        v38[18] = 0;
        (*(void (**)(uint64_t, _QWORD *, _BYTE *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v32 + 72))(v32, a3, v38, a4, a5, a6, a7, a8);
        goto LABEL_53;
      case 0x1003:
      case 0x1004:
      case 0x1005:
      case 0x1006:
      case 0x1007:
        goto LABEL_2;
      case 0x1008:
        v33 = *a2;
        *(_WORD *)v38 = 4104;
        *(_QWORD *)&v38[2] = 0;
        *(_DWORD *)&v38[10] = 0;
        (*(void (**)(uint64_t, _QWORD *, _BYTE *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v33 + 88))(v33, a3, v38, a4, a5, a6, a7, a8);
        goto LABEL_53;
      case 0x1009:
        v34 = *a2;
        *(_WORD *)v38 = 4105;
        *(_DWORD *)&v38[24] = 0;
        memset(&v38[2], 0, 20);
        (*(void (**)(uint64_t, _QWORD *, _BYTE *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v34 + 96))(v34, a3, v38, a4, a5, a6, a7, a8);
        goto LABEL_53;
      default:
        switch(*(_WORD *)(*a3 + 2))
        {
          case 0x1201:
            v16 = *a2;
            *(_WORD *)v38 = 4609;
            memset(&v38[8], 0, 24);
            (*(void (**)(uint64_t))(*(_QWORD *)v16 + 112))(v16);
            break;
          case 0x1203:
            v35 = *a2;
            *(_WORD *)v38 = 4611;
            *(_QWORD *)&v38[8] = 0;
            *(_QWORD *)&v38[16] = 0;
            (*(void (**)(uint64_t, _QWORD *, _BYTE *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v35 + 120))(v35, a3, v38, a4, a5, a6, a7, a8);
            goto LABEL_53;
          case 0x1205:
            v36 = *a2;
            *(_WORD *)v38 = 4613;
            *(_DWORD *)&v38[2] = 0;
            *(_WORD *)&v38[6] = 0;
            (*(void (**)(uint64_t, _QWORD *, _BYTE *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v36 + 184))(v36, a3, v38, a4, a5, a6, a7, a8);
            goto LABEL_53;
          case 0x1206:
            v37 = *a2;
            *(_WORD *)v38 = 4614;
            memset(&v38[8], 0, 24);
            (*(void (**)(uint64_t))(*(_QWORD *)v37 + 328))(v37);
            break;
          default:
            goto LABEL_2;
        }
LABEL_59:
        v11 = *a1;
        if (!*a1)
          *a1 = 0;
        v18 = *(void **)&v38[8];
        if (!*(_QWORD *)&v38[8])
          goto LABEL_4;
        *(_QWORD *)&v38[16] = *(_QWORD *)&v38[8];
        break;
    }
LABEL_63:
    operator delete(v18);
    goto LABEL_3;
  }
  switch(v12)
  {
    case 0xAu:
      v17 = *a2;
      strcpy(v38, "\n");
      memset(&v38[8], 0, 40);
      (*(void (**)(uint64_t, _QWORD *, _BYTE *))(*(_QWORD *)v17 + 176))(v17, a3, v38);
      v11 = *a1;
      if (!*a1)
        *a1 = 0;
      v18 = *(void **)&v38[24];
      if (!*(_QWORD *)&v38[24])
      {
LABEL_4:
        if (v11)
          return;
        goto LABEL_55;
      }
      *(_QWORD *)&v38[32] = *(_QWORD *)&v38[24];
      goto LABEL_63;
    case 0xEu:
      v19 = *a2;
      *(_DWORD *)v38 = 14;
      (*(void (**)(uint64_t, _QWORD *, _BYTE *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v19 + 104))(v19, a3, v38, a4, a5, a6, a7, a8);
      break;
    case 0x14u:
      v14 = *a2;
      *(_WORD *)v38 = 20;
      *(_DWORD *)&v38[4] = 0;
      (*(void (**)(uint64_t, _QWORD *, _BYTE *, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v14 + 344))(v14, a3, v38, a4, a5, a6, a7, a8);
      break;
    default:
LABEL_2:
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)*a2 + 16))(*a2, a3);
LABEL_3:
      v11 = *a1;
      goto LABEL_4;
  }
LABEL_53:
  if (*a1)
    return;
  *a1 = 0;
LABEL_55:
  (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)*a2 + 40))(*a2, a3);
  if (!*a1)
    *a1 = 0;
}

uint64_t sub_1C611BA88(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 136))(a3);
  if (!*a1)
    *a1 = 0;
  return result;
}

_QWORD *sub_1C611BB04@<X0>(_WORD *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  _BYTE v10[32];
  uint64_t v11;

  result = (*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t, _WORD *))(*(_QWORD *)a2 + 56))(a3, a2, a1);
  if (!*a3)
  {
    switch(*a1)
    {
      case 0x150D:
        *(_WORD *)v10 = 5389;
        memset(&v10[2], 0, 30);
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, _WORD *, _BYTE *))(*(_QWORD *)a2 + 232))(a2, a1, v10);
        goto LABEL_27;
      case 0x150E:
        *(_WORD *)v10 = 5390;
        memset(&v10[2], 0, 22);
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, _WORD *, _BYTE *))(*(_QWORD *)a2 + 216))(a2, a1, v10);
        goto LABEL_27;
      case 0x150F:
        *(_WORD *)v10 = 5391;
        memset(&v10[2], 0, 22);
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, _WORD *, _BYTE *))(*(_QWORD *)a2 + 224))(a2, a1, v10);
        goto LABEL_27;
      case 0x1510:
        *(_WORD *)v10 = 5392;
        *(_DWORD *)&v10[2] = 0;
        *(_OWORD *)&v10[8] = 0uLL;
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, _WORD *, _BYTE *))(*(_QWORD *)a2 + 240))(a2, a1, v10);
        goto LABEL_27;
      case 0x1511:
        *(_WORD *)v10 = 5393;
        *(_DWORD *)&v10[2] = 0;
        *(_WORD *)&v10[6] = 0;
        *(_DWORD *)&v10[8] = 0;
        *(_OWORD *)&v10[16] = 0uLL;
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, _WORD *, _BYTE *))(*(_QWORD *)a2 + 248))(a2, a1, v10);
        goto LABEL_27;
      case 0x1512:
      case 0x1513:
      case 0x1514:
      case 0x1515:
      case 0x1516:
      case 0x1517:
      case 0x1518:
      case 0x1519:
LABEL_12:
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, _WORD *))(*(_QWORD *)a2 + 48))(a2, a1);
        goto LABEL_13;
      case 0x151A:
        v7 = 5402;
LABEL_21:
        *(_QWORD *)v10 = v7;
        *(_QWORD *)&v10[8] = 0;
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, _WORD *, _BYTE *))(*(_QWORD *)a2 + 192))(a2, a1, v10);
LABEL_27:
        if (*a3)
          return result;
        *a3 = 0;
LABEL_29:
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, _WORD *))(*(_QWORD *)a2 + 64))(a2, a1);
        if (!*a3)
          *a3 = 0;
        break;
      default:
        switch(*a1)
        {
          case 0x1400:
            v7 = 5120;
            goto LABEL_21;
          case 0x1401:
            v9 = 5121;
            goto LABEL_24;
          case 0x1402:
            v9 = 5122;
LABEL_24:
            *(_DWORD *)&v10[8] = 0;
            *(_QWORD *)v10 = v9;
            *(_OWORD *)&v10[16] = 0uLL;
            result = (_QWORD *)(*(uint64_t (**)(uint64_t, _WORD *, _BYTE *))(*(_QWORD *)a2 + 200))(a2, a1, v10);
            goto LABEL_27;
          case 0x1403:
          case 0x1405:
          case 0x1406:
          case 0x1407:
          case 0x1408:
            goto LABEL_12;
          case 0x1404:
            *(_WORD *)v10 = 5124;
            *(_DWORD *)&v10[2] = 0;
            result = (_QWORD *)(*(uint64_t (**)(uint64_t, _WORD *, _BYTE *))(*(_QWORD *)a2 + 264))(a2, a1, v10);
            goto LABEL_27;
          case 0x1409:
            *(_WORD *)v10 = 5129;
            *(_DWORD *)&v10[2] = 0;
            result = (_QWORD *)(*(uint64_t (**)(uint64_t, _WORD *, _BYTE *))(*(_QWORD *)a2 + 208))(a2, a1, v10);
            goto LABEL_27;
          default:
            if (*a1 != 5378)
              goto LABEL_12;
            *(_DWORD *)v10 = 5378;
            *(_DWORD *)&v10[16] = 1;
            *(_QWORD *)&v10[8] = 0;
            v10[20] = 0;
            *(_QWORD *)&v10[24] = 0;
            v11 = 0;
            result = (_QWORD *)(*(uint64_t (**)(uint64_t, _WORD *, _BYTE *))(*(_QWORD *)a2 + 256))(a2, a1, v10);
            v8 = *a3;
            if (!*a3)
              *a3 = 0;
            if (*(_DWORD *)&v10[16] < 0x41u)
              goto LABEL_14;
            result = *(_QWORD **)&v10[8];
            if (!*(_QWORD *)&v10[8])
              goto LABEL_14;
            result = (_QWORD *)MEMORY[0x1CAA32F9C](*(_QWORD *)&v10[8], 0x1000C8000313F17);
            break;
        }
LABEL_13:
        v8 = *a3;
LABEL_14:
        if (!v8)
          goto LABEL_29;
        return result;
    }
  }
  return result;
}

_QWORD *sub_1C611BD9C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;

  *a1 = &off_1E81B1668;
  v2 = (_QWORD *)a1[14];
  if (v2 != a1 + 16)
    free(v2);
  v3 = (_QWORD *)a1[8];
  if (v3 != a1 + 10)
    free(v3);
  MEMORY[0x1CAA32FB4](a1[5], 1);
  v4 = (void *)a1[2];
  if (v4)
  {
    a1[3] = v4;
    operator delete(v4);
  }
  return a1;
}

uint64_t sub_1C611BE0C(uint64_t a1, const void *a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t result;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  char v15;
  uint64_t v16[2];

  v16[1] = *MEMORY[0x1E0C80C00];
  v6 = a1 + 112;
  v16[0] = sub_1C611DE34((uint64_t)a2, a3, *(_QWORD *)(a1 + 112), *(unsigned int *)(a1 + 120), *(_QWORD *)(a1 + 112), *(unsigned int *)(a1 + 120));
  v13 = *(_DWORD *)(v6 - 40) + 4096;
  sub_1C63EED50(v6 - 72, v16, &v13, (uint64_t)&v14);
  if (v15 || (result = *(unsigned int *)(v14 + 8), result <= 0xFFF))
  {
    v8 = (void *)sub_1C484358C(*(_QWORD *)(a1 + 8), a3, 0);
    memcpy(v8, a2, a3);
    if (a3)
    {
      if (*(_DWORD *)(v14 + 8) <= 0xFFFu)
        *(_DWORD *)(v14 + 8) = *(_DWORD *)(a1 + 72) + 4096;
      v9 = *(unsigned int *)(a1 + 72);
      if (v9 >= *(_DWORD *)(a1 + 76))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 64, a1 + 80, v9 + 1, 16);
        LODWORD(v9) = *(_DWORD *)(a1 + 72);
      }
      v10 = (_QWORD *)(*(_QWORD *)(a1 + 64) + 16 * v9);
      *v10 = v8;
      v10[1] = a3;
      ++*(_DWORD *)(a1 + 72);
      v11 = v16[0];
      v12 = *(unsigned int *)(a1 + 120);
      if (v12 >= *(_DWORD *)(a1 + 124))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v6, a1 + 128, v12 + 1, 8);
        LODWORD(v12) = *(_DWORD *)(a1 + 120);
      }
      *(_QWORD *)(*(_QWORD *)(a1 + 112) + 8 * v12) = v11;
      ++*(_DWORD *)(a1 + 120);
      return *(unsigned int *)(v14 + 8);
    }
    else
    {
      result = 7;
      *(_DWORD *)(v14 + 8) = 7;
    }
  }
  return result;
}

uint64_t sub_1C611BFA8(uint64_t *a1, uint64_t *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t result;
  _QWORD *v11;
  int v12;
  BOOL v13;
  unsigned int v14;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = *a2;
    v6 = v3 - 1;
    v7 = (v3 - 1) & *a2;
    v8 = (_QWORD *)(*a1 + 12 * v7);
    v9 = *v8;
    if (*a2 == *v8)
    {
      result = 1;
    }
    else
    {
      v11 = 0;
      v12 = 1;
      result = 1;
      while (v9 != qword_1EF8F76F8)
      {
        if (v11)
          v13 = 0;
        else
          v13 = v9 == qword_1ED838D98;
        if (v13)
          v11 = v8;
        v14 = v7 + v12++;
        v7 = v14 & v6;
        v8 = (_QWORD *)(v4 + 12 * (v14 & v6));
        v9 = *v8;
        if (v5 == *v8)
          goto LABEL_5;
      }
      result = 0;
      if (v11)
        v8 = v11;
    }
  }
  else
  {
    v8 = 0;
    result = 0;
  }
LABEL_5:
  *a3 = v8;
  return result;
}

_QWORD *sub_1C611C054(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C611C10C(a1, v7);
  v9 = 0;
  sub_1C611BFA8((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != qword_1EF8F76F8)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *sub_1C611C10C(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(12 * v8, (std::align_val_t)1uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C611C1D8(a1, v4, v4 + 12 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = qword_1EF8F76F8;
    v12 = 12 * v10;
    do
    {
      *result = v11;
      result = (_QWORD *)((char *)result + 12);
      v12 -= 12;
    }
    while (v12);
  }
  return result;
}

uint64_t sub_1C611C1D8(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  _QWORD *v12;
  _QWORD *v13;

  v4 = a2;
  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = qword_1EF8F76F8;
  v7 = *(unsigned int *)(result + 16);
  if ((_DWORD)v7)
  {
    v8 = *(uint64_t **)result;
    v9 = 12 * v7;
    do
    {
      *v8 = v6;
      v8 = (uint64_t *)((char *)v8 + 12);
      v9 -= 12;
    }
    while (v9);
    v6 = qword_1EF8F76F8;
  }
  if (a2 != a3)
  {
    v10 = qword_1ED838D98;
    do
    {
      if (*(_QWORD *)v4 != v6 && *(_QWORD *)v4 != v10)
      {
        v13 = 0;
        result = sub_1C611BFA8((uint64_t *)v5, (uint64_t *)v4, &v13);
        v12 = v13;
        *v13 = *(_QWORD *)v4;
        *((_DWORD *)v12 + 2) = *(_DWORD *)(v4 + 8);
        ++*(_DWORD *)(v5 + 8);
      }
      v4 += 12;
    }
    while (v4 != a3);
  }
  return result;
}

_QWORD *sub_1C611C2AC(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E81B16C8;
  v2 = (_QWORD *)a1[3];
  if (v2 != a1 + 6)
    free(v2);
  return a1;
}

void sub_1C611C2EC(_QWORD *a1)
{
  _QWORD *v2;

  *a1 = &off_1E81B16C8;
  v2 = (_QWORD *)a1[3];
  if (v2 != a1 + 6)
    free(v2);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C611C340@<X0>(uint64_t result@<X0>, int a2@<W2>, _QWORD *a3@<X8>)
{
  *(_QWORD *)(result + 32) = 0;
  *(_DWORD *)(result + 16) = a2;
  *a3 = 0;
  return result;
}

void sub_1C611C350(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void sub_1C611C358(uint64_t a1@<X0>, _DWORD *a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t *v6;
  size_t v7;
  const void *v8;
  size_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[4];
  _QWORD v25[2];
  _QWORD v26[2];
  _QWORD v27[2];
  _QWORD v28[2];
  _QWORD v29[2];
  _QWORD v30[2];
  uint64_t v31;
  int v32;
  void *v33;
  __int128 v34;
  _QWORD v35[33];

  v35[32] = *MEMORY[0x1E0C80C00];
  if ((a2[2] & 0xC0) == 0x40)
  {
    v21 = a2[3];
    v29[0] = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), *(unsigned int *)((char *)a2 + 2));
    v29[1] = v22;
    v28[0] = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), v21);
    v28[1] = v23;
    v24[0] = "{0} {1}::*";
    v24[1] = 10;
    v24[2] = v27;
    v24[3] = 2;
    v25[0] = &unk_1E8168E00;
    v25[1] = v29;
    v26[0] = &unk_1E8168E00;
    v26[1] = v28;
    v27[0] = v25;
    v27[1] = v26;
    v33 = v35;
    v34 = xmmword_1C64638F0;
    sub_1C613932C((uint64_t)v30, (uint64_t)&v33);
    sub_1C639D338((uint64_t)v24, (llvm::raw_ostream *)v30);
    v30[0] = off_1E81A6E70;
    if (v32 == 1 && v31)
      MEMORY[0x1CAA32F9C](v31, 0x1000C8077774924);
    sub_1C4FE6ED8(a1 + 24, (uint64_t)&v33);
    if (v33 != v35)
      free(v33);
    goto LABEL_36;
  }
  v6 = (uint64_t *)(a1 + 24);
  v8 = (const void *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), *(unsigned int *)((char *)a2 + 2));
  v9 = v7;
  v10 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(a1 + 40) >= v7 + v10)
  {
    if (!v7)
      goto LABEL_5;
    goto LABEL_4;
  }
  llvm::SmallVectorBase<unsigned long long>::grow_pod(a1 + 24, (void *)(a1 + 48), v7 + v10, 1);
  v10 = *(_QWORD *)(a1 + 32);
  if (v9)
  {
LABEL_4:
    memcpy((void *)(*(_QWORD *)(a1 + 24) + v10), v8, v9);
    v10 = *(_QWORD *)(a1 + 32);
  }
LABEL_5:
  v11 = v10 + v9;
  *(_QWORD *)(a1 + 32) = v11;
  v12 = a2[2];
  v13 = v12 >> 5;
  if (!(v12 >> 5))
  {
    if (*(_QWORD *)(a1 + 40) < (unint64_t)(v11 + 1))
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a1 + 24, (void *)(a1 + 48), v11 + 1, 1);
      v11 = *(_QWORD *)(a1 + 32);
    }
    v14 = *v6;
    v15 = 42;
LABEL_22:
    *(_BYTE *)(v14 + v11) = v15;
    v16 = 1;
    goto LABEL_23;
  }
  if (v13 != 4)
  {
    if (v13 != 1)
    {
      if ((v12 & 0x400) == 0)
        goto LABEL_9;
      goto LABEL_24;
    }
    if (*(_QWORD *)(a1 + 40) < (unint64_t)(v11 + 1))
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a1 + 24, (void *)(a1 + 48), v11 + 1, 1);
      v11 = *(_QWORD *)(a1 + 32);
    }
    v14 = *v6;
    v15 = 38;
    goto LABEL_22;
  }
  if (*(_QWORD *)(a1 + 40) < (unint64_t)(v11 + 2))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod(a1 + 24, (void *)(a1 + 48), v11 + 2, 1);
    v11 = *(_QWORD *)(a1 + 32);
  }
  *(_WORD *)(*v6 + v11) = 9766;
  v16 = 2;
LABEL_23:
  v11 = *(_QWORD *)(a1 + 32) + v16;
  *(_QWORD *)(a1 + 32) = v11;
  v12 = a2[2];
  if ((v12 & 0x400) == 0)
  {
LABEL_9:
    if ((v12 & 0x200) == 0)
      goto LABEL_10;
LABEL_27:
    if (*(_QWORD *)(a1 + 40) < (unint64_t)(v11 + 9))
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a1 + 24, (void *)(a1 + 48), v11 + 9, 1);
      v11 = *(_QWORD *)(a1 + 32);
    }
    v18 = *(_QWORD *)(a1 + 24) + v11;
    *(_QWORD *)v18 = *(_QWORD *)" volatile";
    *(_BYTE *)(v18 + 8) = 101;
    v11 = *(_QWORD *)(a1 + 32) + 9;
    *(_QWORD *)(a1 + 32) = v11;
    v12 = a2[2];
    if ((v12 & 0x800) == 0)
    {
LABEL_11:
      if ((v12 & 0x1000) == 0)
        goto LABEL_36;
      goto LABEL_33;
    }
    goto LABEL_30;
  }
LABEL_24:
  if (*(_QWORD *)(a1 + 40) < (unint64_t)(v11 + 6))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod(a1 + 24, (void *)(a1 + 48), v11 + 6, 1);
    v11 = *(_QWORD *)(a1 + 32);
  }
  v17 = *(_QWORD *)(a1 + 24) + v11;
  *(_WORD *)(v17 + 4) = 29811;
  *(_DWORD *)v17 = 1852793632;
  v11 = *(_QWORD *)(a1 + 32) + 6;
  *(_QWORD *)(a1 + 32) = v11;
  v12 = a2[2];
  if ((v12 & 0x200) != 0)
    goto LABEL_27;
LABEL_10:
  if ((v12 & 0x800) == 0)
    goto LABEL_11;
LABEL_30:
  if (*(_QWORD *)(a1 + 40) < (unint64_t)(v11 + 12))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod(a1 + 24, (void *)(a1 + 48), v11 + 12, 1);
    v11 = *(_QWORD *)(a1 + 32);
  }
  v19 = *(_QWORD *)(a1 + 24) + v11;
  *(_QWORD *)v19 = *(_QWORD *)" __unaligned";
  *(_DWORD *)(v19 + 8) = 1684368999;
  v11 = *(_QWORD *)(a1 + 32) + 12;
  *(_QWORD *)(a1 + 32) = v11;
  if ((a2[2] & 0x1000) != 0)
  {
LABEL_33:
    if (*(_QWORD *)(a1 + 40) < (unint64_t)(v11 + 11))
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a1 + 24, (void *)(a1 + 48), v11 + 11, 1);
      v11 = *(_QWORD *)(a1 + 32);
    }
    v20 = *(_QWORD *)(a1 + 24) + v11;
    *(_QWORD *)v20 = *(_QWORD *)" __restrict";
    *(_DWORD *)(v20 + 7) = 1952672114;
    *(_QWORD *)(a1 + 32) += 11;
  }
LABEL_36:
  *a3 = 0;
}

void *sub_1C611C7AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  __int16 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *result;
  size_t v14;
  const void *v15;
  size_t v16;
  uint64_t v17;

  v6 = *(_WORD *)(a2 + 6);
  if ((v6 & 1) != 0)
  {
    v7 = *(_QWORD *)(a1 + 32);
    if (*(_QWORD *)(a1 + 40) < (unint64_t)(v7 + 6))
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a1 + 24, (void *)(a1 + 48), v7 + 6, 1);
      v7 = *(_QWORD *)(a1 + 32);
    }
    v8 = *(_QWORD *)(a1 + 24) + v7;
    *(_WORD *)(v8 + 4) = 8308;
    *(_DWORD *)v8 = 1936617315;
    *(_QWORD *)(a1 + 32) += 6;
    if ((v6 & 2) == 0)
    {
LABEL_3:
      if ((v6 & 4) == 0)
        goto LABEL_14;
      goto LABEL_11;
    }
  }
  else if ((v6 & 2) == 0)
  {
    goto LABEL_3;
  }
  v9 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(a1 + 40) < (unint64_t)(v9 + 9))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod(a1 + 24, (void *)(a1 + 48), v9 + 9, 1);
    v9 = *(_QWORD *)(a1 + 32);
  }
  v10 = *(_QWORD *)(a1 + 24) + v9;
  *(_QWORD *)v10 = *(_QWORD *)"volatile ";
  *(_BYTE *)(v10 + 8) = 32;
  *(_QWORD *)(a1 + 32) += 9;
  if ((v6 & 4) != 0)
  {
LABEL_11:
    v11 = *(_QWORD *)(a1 + 32);
    if (*(_QWORD *)(a1 + 40) < (unint64_t)(v11 + 12))
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod(a1 + 24, (void *)(a1 + 48), v11 + 12, 1);
      v11 = *(_QWORD *)(a1 + 32);
    }
    v12 = *(_QWORD *)(a1 + 24) + v11;
    *(_QWORD *)v12 = *(_QWORD *)"__unaligned ";
    *(_DWORD *)(v12 + 8) = 543450478;
    *(_QWORD *)(a1 + 32) += 12;
  }
LABEL_14:
  result = (void *)(*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), *(unsigned int *)(a2 + 2));
  v15 = result;
  v16 = v14;
  v17 = *(_QWORD *)(a1 + 32);
  if (*(_QWORD *)(a1 + 40) < v14 + v17)
  {
    result = llvm::SmallVectorBase<unsigned long long>::grow_pod(a1 + 24, (void *)(a1 + 48), v14 + v17, 1);
    v17 = *(_QWORD *)(a1 + 32);
    if (!v16)
      goto LABEL_17;
    goto LABEL_16;
  }
  if (v14)
  {
LABEL_16:
    result = memcpy((void *)(*(_QWORD *)(a1 + 24) + v17), v15, v16);
    v17 = *(_QWORD *)(a1 + 32);
  }
LABEL_17:
  *(_QWORD *)(a1 + 32) = v17 + v16;
  *a3 = 0;
  return result;
}

void sub_1C611C960(uint64_t a1@<X0>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[4];
  _QWORD v9[2];
  _QWORD v10[2];
  _QWORD v11[2];
  _QWORD v12[2];
  _QWORD v13[2];
  _QWORD v14[2];
  uint64_t v15;
  int v16;
  void *v17;
  __int128 v18;
  _QWORD v19[33];

  v19[32] = *MEMORY[0x1E0C80C00];
  v13[0] = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), *(unsigned int *)(a2 + 2));
  v13[1] = v6;
  v12[0] = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), *(unsigned int *)(a2 + 10));
  v12[1] = v7;
  v8[0] = "{0} {1}";
  v8[1] = 7;
  v8[2] = v11;
  v8[3] = 2;
  v9[0] = &unk_1E8168E00;
  v9[1] = v13;
  v10[0] = &unk_1E8168E00;
  v10[1] = v12;
  v11[0] = v9;
  v11[1] = v10;
  v17 = v19;
  v18 = xmmword_1C64638F0;
  sub_1C613932C((uint64_t)v14, (uint64_t)&v17);
  sub_1C639D338((uint64_t)v8, (llvm::raw_ostream *)v14);
  v14[0] = off_1E81A6E70;
  if (v16 == 1 && v15)
    MEMORY[0x1CAA32F9C](v15, 0x1000C8077774924);
  sub_1C4FE6ED8(a1 + 24, (uint64_t)&v17);
  if (v17 != v19)
    free(v17);
  *a3 = 0;
}

void sub_1C611CAC4(uint64_t a1@<X0>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD v9[4];
  _QWORD v10[2];
  _QWORD v11[2];
  _QWORD v12[2];
  _QWORD v13[3];
  _QWORD v14[2];
  _QWORD v15[2];
  _QWORD v16[2];
  _QWORD v17[2];
  uint64_t v18;
  int v19;
  void *v20;
  __int128 v21;
  _QWORD v22[33];

  v22[32] = *MEMORY[0x1E0C80C00];
  v16[0] = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), *(unsigned int *)(a2 + 2));
  v16[1] = v6;
  v15[0] = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), *(unsigned int *)(a2 + 6));
  v15[1] = v7;
  v14[0] = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), *(unsigned int *)(a2 + 18));
  v14[1] = v8;
  v9[0] = "{0} {1}::{2}";
  v9[1] = 12;
  v9[2] = v13;
  v9[3] = 3;
  v10[0] = &unk_1E8168E00;
  v10[1] = v16;
  v11[0] = &unk_1E8168E00;
  v11[1] = v15;
  v12[0] = &unk_1E8168E00;
  v12[1] = v14;
  v13[0] = v10;
  v13[1] = v11;
  v13[2] = v12;
  v20 = v22;
  v21 = xmmword_1C64638F0;
  sub_1C613932C((uint64_t)v17, (uint64_t)&v20);
  sub_1C639D338((uint64_t)v9, (llvm::raw_ostream *)v17);
  v17[0] = off_1E81A6E70;
  if (v19 == 1 && v18)
    MEMORY[0x1CAA32F9C](v18, 0x1000C8077774924);
  sub_1C4FE6ED8(a1 + 24, (uint64_t)&v20);
  if (v20 != v22)
    free(v20);
  *a3 = 0;
}

void sub_1C611CC50(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void sub_1C611CC58(uint64_t a1@<X0>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  unint64_t v3;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  size_t v13;
  const void *v14;
  size_t v15;
  uint64_t v16;
  char *v17;
  BOOL v18;
  std::string *v19;
  std::string::size_type v20;
  std::string *v21;
  int v22;
  void *v23;
  __int128 *v24;
  size_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  std::string v31;
  std::string v32;
  __int128 v33;
  _QWORD v34[2];

  v6 = 0;
  v34[1] = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16) - v7;
  v28 = a1 + 24;
  *(_QWORD *)(a1 + 32) = 0;
  if (!*(_QWORD *)(a1 + 40))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod(v28, (void *)(a1 + 48), 1uLL, 1);
    v6 = *(_QWORD *)(a1 + 32);
  }
  *(_BYTE *)(*(_QWORD *)(a1 + 24) + v6) = 40;
  v9 = *(_QWORD *)(a1 + 32) + 1;
  *(_QWORD *)(a1 + 32) = v9;
  if ((v8 & 0x3FFFFFFFCLL) != 0)
  {
    v29 = a3;
    v10 = 0;
    v30 = v7;
    v27 = (void *)(a1 + 48);
    v11 = (v8 >> 2);
    while (1)
    {
      v12 = *(unsigned int *)(v7 + 4 * v10);
      if (v12 < *(_DWORD *)(a1 + 16))
      {
        v3 = v3 & 0xFFFFFFFF00000000 | v12;
        v14 = (const void *)(*(uint64_t (**)(_QWORD, unint64_t))(**(_QWORD **)(a1 + 8) + 40))(*(_QWORD *)(a1 + 8), v3);
        v15 = v13;
        v16 = *(_QWORD *)(a1 + 32);
        if (*(_QWORD *)(a1 + 40) < v13 + v16)
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod(v28, v27, v13 + v16, 1);
          v16 = *(_QWORD *)(a1 + 32);
          if (v15)
          {
LABEL_8:
            memcpy((void *)(*(_QWORD *)(a1 + 24) + v16), v14, v15);
            v16 = *(_QWORD *)(a1 + 32);
          }
        }
        else if (v13)
        {
          goto LABEL_8;
        }
        *(_QWORD *)(a1 + 32) = v16 + v15;
        goto LABEL_30;
      }
      if ((_DWORD)v12)
      {
        v17 = (char *)v34 + 1;
        do
        {
          *--v17 = a0123456789abcd_6[v12 & 0xF];
          v18 = v12 > 0xF;
          v12 >>= 4;
        }
        while (v18);
      }
      else
      {
        LOBYTE(v34[0]) = 48;
        v17 = (char *)v34;
      }
      sub_1C4E61270(&v31, v17, (char *)v34 + 1, (char *)v34 + 1 - v17);
      v19 = std::string::insert(&v31, 0, "<unknown 0x");
      v20 = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v32.__r_.__value_.__l.__data_ = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v32.__r_.__value_.__r.__words[2] = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      v21 = std::string::append(&v32, ">");
      v34[0] = *((_QWORD *)&v21->__r_.__value_.__l + 2);
      v33 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v21->__r_.__value_.__r.__words[0] = 0;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v22 = SHIBYTE(v34[0]);
      v23 = (void *)v33;
      v24 = v34[0] >= 0 ? &v33 : (__int128 *)v33;
      v25 = v34[0] >= 0 ? HIBYTE(v34[0]) & 0x7F : *((_QWORD *)&v33 + 1);
      v26 = *(_QWORD *)(a1 + 32);
      if (*(_QWORD *)(a1 + 40) < v26 + v25)
        break;
      if (v25)
        goto LABEL_23;
LABEL_24:
      *(_QWORD *)(a1 + 32) = v26 + v25;
      if (v22 < 0)
        operator delete(v23);
      v7 = v30;
      if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v32.__r_.__value_.__l.__data_);
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v31.__r_.__value_.__l.__data_);
LABEL_30:
      ++v10;
      v9 = *(_QWORD *)(a1 + 32);
      if (v10 == v11)
      {
        a3 = v29;
        goto LABEL_39;
      }
      if (*(_QWORD *)(a1 + 40) < (unint64_t)(v9 + 2))
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod(v28, v27, v9 + 2, 1);
        v9 = *(_QWORD *)(a1 + 32);
      }
      *(_WORD *)(*(_QWORD *)(a1 + 24) + v9) = 8236;
      *(_QWORD *)(a1 + 32) += 2;
    }
    llvm::SmallVectorBase<unsigned long long>::grow_pod(v28, v27, v26 + v25, 1);
    v26 = *(_QWORD *)(a1 + 32);
    if (!v25)
      goto LABEL_24;
LABEL_23:
    memcpy((void *)(*(_QWORD *)(a1 + 24) + v26), v24, v25);
    v26 = *(_QWORD *)(a1 + 32);
    goto LABEL_24;
  }
LABEL_39:
  if ((unint64_t)(v9 + 1) > *(_QWORD *)(a1 + 40))
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod(v28, (void *)(a1 + 48), v9 + 1, 1);
    v9 = *(_QWORD *)(a1 + 32);
  }
  *(_BYTE *)(*(_QWORD *)(a1 + 24) + v9) = 41;
  ++*(_QWORD *)(a1 + 32);
  *a3 = 0;
}

_QWORD *sub_1C611CFA8@<X0>(_QWORD *result@<X0>, _QWORD *a2@<X8>)
{
  _QWORD *v2;
  uint64_t v4;
  uint64_t v5;

  v2 = result;
  v4 = 0;
  result[4] = 0;
  if (result[5] <= 0xBuLL)
  {
    result = llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)(result + 3), result + 6, 0xCuLL, 1);
    v4 = v2[4];
  }
  v5 = v2[3] + v4;
  *(_QWORD *)v5 = *(_QWORD *)"<field list>";
  *(_DWORD *)(v5 + 8) = 1047819113;
  v2[4] += 12;
  *a2 = 0;
  return result;
}

_QWORD *sub_1C611D02C@<X0>(_QWORD *result@<X0>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v5;
  unint64_t v6;
  const void *v7;

  v3 = result;
  v5 = 0;
  v7 = *(const void **)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  result[4] = 0;
  if (result[5] < v6)
  {
    result = llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)(result + 3), result + 6, v6, 1);
    v5 = v3[4];
    if (!v6)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (v6)
  {
LABEL_3:
    result = memcpy((void *)(v3[3] + v5), v7, v6);
    v5 = v3[4];
  }
LABEL_4:
  v3[4] = v5 + v6;
  *a3 = 0;
  return result;
}

_QWORD *sub_1C611D0B4@<X0>(_QWORD *result@<X0>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v5;
  unint64_t v6;
  const void *v7;

  v3 = result;
  v5 = 0;
  v7 = *(const void **)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  result[4] = 0;
  if (result[5] < v6)
  {
    result = llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)(result + 3), result + 6, v6, 1);
    v5 = v3[4];
    if (!v6)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (v6)
  {
LABEL_3:
    result = memcpy((void *)(v3[3] + v5), v7, v6);
    v5 = v3[4];
  }
LABEL_4:
  v3[4] = v5 + v6;
  *a3 = 0;
  return result;
}

_QWORD *sub_1C611D13C@<X0>(_QWORD *result@<X0>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v5;
  unint64_t v6;
  const void *v7;

  v3 = result;
  v5 = 0;
  v7 = *(const void **)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  result[4] = 0;
  if (result[5] < v6)
  {
    result = llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)(result + 3), result + 6, v6, 1);
    v5 = v3[4];
    if (!v6)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (v6)
  {
LABEL_3:
    result = memcpy((void *)(v3[3] + v5), v7, v6);
    v5 = v3[4];
  }
LABEL_4:
  v3[4] = v5 + v6;
  *a3 = 0;
  return result;
}

_QWORD *sub_1C611D1C4@<X0>(_QWORD *result@<X0>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v5;
  unint64_t v6;
  const void *v7;

  v3 = result;
  v5 = 0;
  v7 = *(const void **)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  result[4] = 0;
  if (result[5] < v6)
  {
    result = llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)(result + 3), result + 6, v6, 1);
    v5 = v3[4];
    if (!v6)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (v6)
  {
LABEL_3:
    result = memcpy((void *)(v3[3] + v5), v7, v6);
    v5 = v3[4];
  }
LABEL_4:
  v3[4] = v5 + v6;
  *a3 = 0;
  return result;
}

_QWORD *sub_1C611D24C@<X0>(_QWORD *result@<X0>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v5;
  unint64_t v6;
  const void *v7;

  v3 = result;
  v5 = 0;
  v7 = *(const void **)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  result[4] = 0;
  if (result[5] < v6)
  {
    result = llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)(result + 3), result + 6, v6, 1);
    v5 = v3[4];
    if (!v6)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (v6)
  {
LABEL_3:
    result = memcpy((void *)(v3[3] + v5), v7, v6);
    v5 = v3[4];
  }
LABEL_4:
  v3[4] = v5 + v6;
  *a3 = 0;
  return result;
}

_QWORD *sub_1C611D2D4@<X0>(_QWORD *result@<X0>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  const void *v8;

  v3 = result;
  v5 = 0;
  v6 = *(_QWORD *)(a2 + 16);
  v8 = *(const void **)v6;
  v7 = *(_QWORD *)(v6 + 8);
  result[4] = 0;
  if (result[5] < v7)
  {
    result = llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)(result + 3), result + 6, v7, 1);
    v5 = v3[4];
    if (!v7)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (v7)
  {
LABEL_3:
    result = memcpy((void *)(v3[3] + v5), v8, v7);
    v5 = v3[4];
  }
LABEL_4:
  v3[4] = v5 + v7;
  *a3 = 0;
  return result;
}

void sub_1C611D360(uint64_t a1@<X0>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  _QWORD v6[4];
  void *v7;
  int v8;
  void **v9;
  _QWORD v10[2];
  uint64_t v11;
  int v12;
  void *v13;
  __int128 v14;
  _QWORD v15[33];

  v15[32] = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a2 + 16);
  if (!v5)
    LODWORD(v5) = *(_DWORD *)(a2 + 32) - *(_DWORD *)(a2 + 24);
  v6[0] = "<vftable {0} methods>";
  v6[1] = 21;
  v6[2] = &v9;
  v6[3] = 1;
  v7 = &unk_1E816A230;
  v8 = v5;
  v9 = &v7;
  v13 = v15;
  v14 = xmmword_1C64638F0;
  sub_1C613932C((uint64_t)v10, (uint64_t)&v13);
  sub_1C639D338((uint64_t)v6, (llvm::raw_ostream *)v10);
  v10[0] = off_1E81A6E70;
  if (v12 == 1 && v11)
    MEMORY[0x1CAA32F9C](v11, 0x1000C8077774924);
  sub_1C4FE6ED8(a1 + 24, (uint64_t)&v13);
  if (v13 != v15)
    free(v13);
  *a3 = 0;
}

void sub_1C611D49C(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

_QWORD *sub_1C611D4A4@<X0>(_QWORD *result@<X0>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v5;
  unint64_t v6;
  const void *v7;

  v3 = result;
  v5 = 0;
  v7 = *(const void **)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  result[4] = 0;
  if (result[5] < v6)
  {
    result = llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)(result + 3), result + 6, v6, 1);
    v5 = v3[4];
    if (!v6)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (v6)
  {
LABEL_3:
    result = memcpy((void *)(v3[3] + v5), v7, v6);
    v5 = v3[4];
  }
LABEL_4:
  v3[4] = v5 + v6;
  *a3 = 0;
  return result;
}

_QWORD *sub_1C611D52C@<X0>(_QWORD *result@<X0>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v5;
  unint64_t v6;
  const void *v7;

  v3 = result;
  v5 = 0;
  v7 = *(const void **)(a2 + 16);
  v6 = *(_QWORD *)(a2 + 24);
  result[4] = 0;
  if (result[5] < v6)
  {
    result = llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)(result + 3), result + 6, v6, 1);
    v5 = v3[4];
    if (!v6)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (v6)
  {
LABEL_3:
    result = memcpy((void *)(v3[3] + v5), v7, v6);
    v5 = v3[4];
  }
LABEL_4:
  v3[4] = v5 + v6;
  *a3 = 0;
  return result;
}

void sub_1C611D5B4(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

_QWORD *sub_1C611D5BC@<X0>(_QWORD *result@<X0>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  unint64_t v3;
  _QWORD *v4;
  uint64_t v6;
  unsigned int *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t i;
  unsigned int v12;
  size_t v13;
  const void *v14;
  size_t v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;

  v4 = result;
  v6 = 0;
  v7 = *(unsigned int **)(a2 + 8);
  v8 = *(_QWORD *)(a2 + 16) - (_QWORD)v7;
  v9 = (uint64_t)(result + 3);
  result[4] = 0;
  if (!result[5])
  {
    result = llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)(result + 3), result + 6, 1uLL, 1);
    v6 = v4[4];
  }
  *(_BYTE *)(v4[3] + v6) = 34;
  v10 = v4[4] + 1;
  v4[4] = v10;
  if ((v8 & 0x3FFFFFFFCLL) != 0)
  {
    v18 = v4 + 6;
    for (i = (v8 >> 2) - 1; ; --i)
    {
      v12 = *v7++;
      v3 = v3 & 0xFFFFFFFF00000000 | v12;
      result = (_QWORD *)(*(uint64_t (**)(_QWORD, unint64_t))(*(_QWORD *)v4[1] + 40))(v4[1], v3);
      v14 = result;
      v15 = v13;
      v16 = v4[4];
      if (v4[5] >= v13 + v16)
        break;
      result = llvm::SmallVectorBase<unsigned long long>::grow_pod(v9, v18, v13 + v16, 1);
      v16 = v4[4];
      if (v15)
        goto LABEL_7;
LABEL_8:
      v10 = v16 + v15;
      v4[4] = v10;
      if (!i)
        goto LABEL_14;
      if (v4[5] < (unint64_t)(v10 + 3))
      {
        llvm::SmallVectorBase<unsigned long long>::grow_pod(v9, v18, v10 + 3, 1);
        v10 = v4[4];
      }
      v17 = v4[3] + v10;
      *(_BYTE *)(v17 + 2) = 34;
      *(_WORD *)v17 = 8226;
      v4[4] += 3;
    }
    if (!v13)
      goto LABEL_8;
LABEL_7:
    result = memcpy((void *)(v4[3] + v16), v14, v15);
    v16 = v4[4];
    goto LABEL_8;
  }
LABEL_14:
  if ((unint64_t)(v10 + 1) > v4[5])
  {
    result = llvm::SmallVectorBase<unsigned long long>::grow_pod(v9, v4 + 6, v10 + 1, 1);
    v10 = v4[4];
  }
  *(_BYTE *)(v4[3] + v10) = 34;
  ++v4[4];
  *a3 = 0;
  return result;
}

_QWORD *sub_1C611D77C@<X0>(_QWORD *result@<X0>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  _QWORD *v3;
  uint64_t v5;
  unint64_t v6;
  const void *v7;

  v3 = result;
  v5 = 0;
  v7 = *(const void **)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 16);
  result[4] = 0;
  if (result[5] < v6)
  {
    result = llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)(result + 3), result + 6, v6, 1);
    v5 = v3[4];
    if (!v6)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (v6)
  {
LABEL_3:
    result = memcpy((void *)(v3[3] + v5), v7, v6);
    v5 = v3[4];
  }
LABEL_4:
  v3[4] = v5 + v6;
  *a3 = 0;
  return result;
}

void sub_1C611D804(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void sub_1C611D80C(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void sub_1C611D814(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void sub_1C611D81C(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void sub_1C611D824(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

void sub_1C611D82C(uint64_t *a1, unsigned int *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  const char *v8;
  __int16 v9;

  v4 = operator new();
  v5 = *a2;
  if (!atomic_load((unint64_t *)&qword_1EF8F76C8))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)&qword_1EF8F76C8, (void *(*)(void))sub_1C611A9F8, (void (*)(void *))sub_1C611AA2C);
  v7 = qword_1EF8F76C8;
  v8 = "Buffer contains invalid APSInt type";
  v9 = 259;
  *(_QWORD *)v4 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)&v8, (_QWORD *)(v4 + 8));
  *(_QWORD *)(v4 + 32) = v5;
  *(_QWORD *)(v4 + 40) = v7;
  *(_BYTE *)(v4 + 48) = 0;
  *(_QWORD *)v4 = &unk_1E81AE660;
  *a1 = v4;
}

const char *sub_1C611D8FC(int a1)
{
  const char *result;
  uint64_t v2;
  int v3;

  if (!a1)
    return "<no type>";
  if (a1 == 259)
    return "std::nullptr_t";
  v2 = 0;
  v3 = a1;
  result = "<unknown simple type>";
  while (LODWORD((&off_1E81B1828)[v2 + 2]) != v3)
  {
    v2 += 3;
    if (v2 == 123)
      return result;
  }
  return (&off_1E81B1828)[v2];
}

unsigned __int8 *sub_1C611D994(unsigned __int8 *result, uint64_t a2, int a3, _DWORD *a4)
{
  unsigned __int8 *v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  unsigned __int8 *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;
  int v20;
  __int16 v21;
  unsigned int v22;

  v6 = result;
  v7 = 0;
  v8 = 2;
  if (a3 > 5400)
  {
    switch(a3)
    {
      case 5633:
        v8 = 1;
        sub_1C476CB98(a4, 1, 1);
LABEL_64:
        v7 = 0x400000000;
        goto LABEL_70;
      case 5634:
        goto LABEL_70;
      case 5635:
        v8 = *(unsigned __int16 *)result;
        if (!*(_WORD *)result)
          return result;
        v7 = 0x200000001;
        goto LABEL_70;
      case 5636:
        v8 = *(_DWORD *)result;
        if (*(_DWORD *)result)
          goto LABEL_67;
        return result;
      case 5637:
        v7 = 1;
        goto LABEL_69;
      case 5638:
        v8 = 1;
        sub_1C476CB98(a4, 0, 1);
LABEL_67:
        v7 = 0x400000001;
        goto LABEL_70;
      case 5639:
LABEL_52:
        v7 = 0;
LABEL_69:
        v8 = 1;
        goto LABEL_70;
      default:
        if (a3 == 5401)
        {
LABEL_57:
          v7 = 0x400000000;
          v8 = 3;
        }
        else if (a3 != 5405)
        {
          return result;
        }
LABEL_70:
        result = (unsigned __int8 *)sub_1C476CB98(a4, v7, v8);
        break;
    }
  }
  else
  {
    switch(a3)
    {
      case 4609:
        v8 = *(_DWORD *)result;
        if (*(_DWORD *)result)
          goto LABEL_64;
        return result;
      case 4610:
      case 4612:
        return result;
      case 4611:
        if (!a2)
          return result;
        v9 = 0;
        break;
      case 4613:
        goto LABEL_52;
      case 4614:
        if (a2)
        {
          v20 = 0;
          do
          {
            v21 = *(_WORD *)v6;
            result = (unsigned __int8 *)sub_1C476CB98(a4, (unint64_t)(v20 + 4) << 32, 1);
            if ((v21 & 0x14) == 0x10)
              v22 = 12;
            else
              v22 = 8;
            v20 += v22;
            a2 -= v22;
            v6 += v22;
          }
          while (a2);
        }
        return result;
      default:
        switch(a3)
        {
          case 5379:
            goto LABEL_70;
          case 5380:
          case 5381:
            goto LABEL_57;
          case 5382:
            v7 = 0x400000000;
            goto LABEL_69;
          case 5383:
            v7 = 0x400000000;
            v8 = 2;
            goto LABEL_70;
          default:
            switch(a3)
            {
              case 4097:
                goto LABEL_52;
              case 4098:
                v8 = 1;
                result = (unsigned __int8 *)sub_1C476CB98(a4, 0, 1);
                if ((*((_DWORD *)v6 + 1) & 0xC0) == 0x40)
                  goto LABEL_61;
                return result;
              case 4104:
                v8 = 1;
                sub_1C476CB98(a4, 0, 1);
LABEL_61:
                v7 = 0x800000000;
                goto LABEL_70;
              case 4105:
                sub_1C476CB98(a4, 0, 3);
                v7 = 0x1000000000;
                goto LABEL_69;
              default:
                return result;
            }
        }
    }
    while (*(_WORD *)v6 == 5378)
    {
      if (*((__int16 *)v6 + 2) < 0)
        v10 = dword_1C86787A4[*((unsigned __int16 *)v6 + 2) - 0x8000] + 6;
      else
        v10 = 6;
LABEL_19:
      result = (unsigned __int8 *)strlen((const char *)&v6[v10]);
      v12 = v10 + (_DWORD)result + 1;
LABEL_20:
      if (a2 != v12)
      {
        v13 = v12 + v9;
        v14 = &v6[v12];
        v15 = *v14;
        v16 = v15 <= 0xEF ? 0 : v15 & 0xFu;
        v17 = a2 - v12;
        v6 = &v14[v16];
        v9 = v13 + v16;
        a2 = v17 - v16;
        if (v17 != v16)
          continue;
      }
      return result;
    }
    switch(*(_WORD *)v6)
    {
      case 0x1400:
        result = (unsigned __int8 *)sub_1C476CB98(a4, (unint64_t)(v9 + 4) << 32, 1);
        if (*((__int16 *)v6 + 4) < 0)
          v12 = dword_1C86787A4[*((unsigned __int16 *)v6 + 4) - 0x8000] + 10;
        else
          v12 = 10;
        goto LABEL_20;
      case 0x1401:
      case 0x1402:
        result = (unsigned __int8 *)sub_1C476CB98(a4, (unint64_t)(v9 + 4) << 32, 2);
        if (*((__int16 *)v6 + 6) < 0)
          v11 = dword_1C86787A4[*((unsigned __int16 *)v6 + 6) - 0x8000] + 14;
        else
          v11 = 14;
        if (*(__int16 *)&v6[v11] < 0)
          v19 = dword_1C86787A4[*(unsigned __int16 *)&v6[v11] - 0x8000] + 2;
        else
          v19 = 2;
        v12 = v19 + v11;
        goto LABEL_20;
      case 0x1403:
      case 0x1405:
      case 0x1406:
      case 0x1407:
      case 0x1408:
        return result;
      case 0x1404:
      case 0x1409:
        result = (unsigned __int8 *)sub_1C476CB98(a4, (unint64_t)(v9 + 4) << 32, 1);
        v12 = 8;
        goto LABEL_20;
      default:
        switch(*(_WORD *)v6)
        {
          case 0x150D:
            sub_1C476CB98(a4, (unint64_t)(v9 + 4) << 32, 1);
            if (*((__int16 *)v6 + 4) < 0)
              v10 = dword_1C86787A4[*((unsigned __int16 *)v6 + 4) - 0x8000] + 10;
            else
              v10 = 10;
            goto LABEL_19;
          case 0x150E:
          case 0x150F:
          case 0x1510:
            sub_1C476CB98(a4, (unint64_t)(v9 + 4) << 32, 1);
            result = (unsigned __int8 *)strlen((const char *)v6 + 8);
            v12 = (_DWORD)result + 9;
            goto LABEL_20;
          case 0x1511:
            sub_1C476CB98(a4, (unint64_t)(v9 + 4) << 32, 1);
            if ((*((_WORD *)v6 + 1) & 0x14) == 0x10)
              v18 = 12;
            else
              v18 = 8;
            result = (unsigned __int8 *)strlen((const char *)&v6[v18]);
            v12 = (v18 | 1) + (_DWORD)result;
            goto LABEL_20;
          default:
            return result;
        }
    }
  }
  return result;
}

uint64_t sub_1C611DE34(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _DWORD *v14;
  uint64_t v15;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int *v24;
  uint64_t v25;
  unsigned int v26;
  _BYTE *v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t i;
  unint64_t v33;
  _DWORD *v34;
  _DWORD *v35;
  _DWORD v36[16];
  __int128 v37;
  uint64_t v38;
  char v39;
  _DWORD v40[3];
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  _QWORD v44[8];

  v44[6] = *MEMORY[0x1E0C80C00];
  v42 = v44;
  v43 = 0x400000000;
  v11 = a2 - 4;
  v12 = a1 + 4;
  if (a2 >= 4)
    v13 = 4;
  else
    v13 = a2;
  sub_1C611D994((unsigned __int8 *)(a1 + 4), a2 - 4, *(unsigned __int16 *)(a1 + 2), &v42);
  v37 = xmmword_1C85F4BB0;
  v38 = 3285377520;
  v39 = 0;
  llvm::SHA1::update(v36, (_BYTE *)a1, v13);
  v14 = v42;
  if ((_DWORD)v43)
  {
    v35 = v42;
    LODWORD(v15) = 0;
    v16 = (_DWORD *)v42 + 3 * v43;
    v33 = v11;
    v34 = v16;
    do
    {
      llvm::SHA1::update(v36, (_BYTE *)(v12 + v15), (v14[1] - v15));
      v17 = v14[1];
      if (*v14 == 1)
        v18 = a5;
      else
        v18 = a3;
      if (*v14 == 1)
        v19 = a6;
      else
        v19 = a4;
      v20 = v14[2];
      if ((_DWORD)v20)
      {
        v21 = a4;
        v22 = a5;
        v23 = a6;
        v24 = (unsigned int *)(v12 + v17);
        v25 = 4 * v20;
        while (1)
        {
          v26 = *v24;
          v40[0] = v26;
          if (v26 >= 0x1000)
          {
            v29 = (v26 & 0x7FFFFFFF) - 4096;
            if (v19 <= v29 || (v27 = (_BYTE *)(v18 + 8 * v29), !*(_QWORD *)v27))
            {
              v30 = 0;
              v14 = v35;
              goto LABEL_28;
            }
            v28 = 8;
          }
          else
          {
            v27 = v40;
            v28 = 4;
          }
          llvm::SHA1::update(v36, v27, v28);
          ++v24;
          v25 -= 4;
          if (!v25)
          {
            LODWORD(v17) = v14[1];
            LODWORD(v20) = v14[2];
            a6 = v23;
            a5 = v22;
            a4 = v21;
            v16 = v34;
            break;
          }
        }
      }
      v15 = (v17 + 4 * v20);
      v14 += 3;
    }
    while (v14 != v16);
    v14 = v35;
    v11 = v33;
  }
  else
  {
    v15 = 0;
  }
  llvm::SHA1::update(v36, (_BYTE *)(v12 + v15), v11 - v15);
  llvm::SHA1::pad((llvm::SHA1 *)v36);
  for (i = 0; i != 5; ++i)
    v40[i] = bswap32(*(_DWORD *)((char *)&v37 + i * 4));
  v30 = v41;
LABEL_28:
  if (v14 != (_DWORD *)v44)
    free(v14);
  return v30;
}

void sub_1C611E064()
{
  qword_1EF8F76E0 = 0;
  *(_QWORD *)algn_1EF8F76E8 = 0;
  qword_1EF8F76F0 = 0;
  qword_1ED838D88 = 0;
  unk_1ED838D90 = 0;
  qword_1ED838D80 = -1;
  qword_1EF8F76F8 = 0;
  qword_1ED838D98 = 255;
}

void sub_1C611E0A0(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  __int16 v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  char **v14;
  size_t v15;
  void **v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  void *__p;
  char v22;
  _QWORD v23[4];
  __int16 v24;
  void *__dst[2];
  unint64_t v26;
  __int16 v27;
  __int16 v28;

  if (a2[1] >= 4uLL && ((v8 = *(unsigned __int16 *)(*a2 + 2), v8 == 4611) || v8 == 4614))
  {
    v6 = 0;
    v7 = 65024;
  }
  else
  {
    v6 = 0x100000000;
    v7 = 65276;
  }
  v9 = a1 + 16;
  sub_1C63EBEB8(a1 + 16, v7 | v6, a3);
  if (*a3)
    return;
  if (a2[1] >= 4uLL)
    v10 = *(_WORD *)(*a2 + 2);
  else
    v10 = 0;
  if (!*(_BYTE *)(a1 + 10))
    *(_BYTE *)(a1 + 10) = 1;
  *(_WORD *)(a1 + 8) = v10;
  if (!*(_QWORD *)(a1 + 72) || *(_QWORD *)(a1 + 56) || *(_QWORD *)(a1 + 64))
    goto LABEL_15;
  v11 = a2[1];
  if (v11 >= 4)
    v12 = *(unsigned __int16 *)(*a2 + 2);
  else
    v12 = 0;
  v28 = v12;
  v27 = v11 - 2;
  v13 = 0x1FFFFFFFFFFFFCA9uLL;
  while (1)
  {
    v14 = &(&off_1E81B1D70)[v13];
    if (LOWORD((&off_1E81B1D70)[v13 + 859]) == v12)
      break;
    v13 += 5;
    if (!(v13 * 8))
    {
      v15 = 0;
      HIBYTE(v26) = 0;
      v16 = __dst;
      goto LABEL_32;
    }
  }
  v15 = (size_t)v14[856];
  if (v15 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v17 = v14[855];
  if (v15 >= 0x17)
  {
    v18 = (v15 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v15 | 7) != 0x17)
      v18 = v15 | 7;
    v19 = v18 + 1;
    v16 = (void **)operator new(v18 + 1);
    __dst[1] = (void *)v15;
    v26 = v19 | 0x8000000000000000;
    __dst[0] = v16;
    goto LABEL_31;
  }
  HIBYTE(v26) = v14[856];
  v16 = __dst;
  if (v15)
LABEL_31:
    memmove(v16, v17, v15);
LABEL_32:
  *((_BYTE *)v16 + v15) = 0;
  v23[0] = "Record length";
  v24 = 259;
  sub_1C63F132C(v9, &v27, (uint64_t)v23, a3);
  if (*a3)
  {
    v20 = 1;
  }
  else
  {
    std::operator+<char>();
    v24 = 260;
    v23[0] = &__p;
    sub_1C63F14B4(a3, v9, &v28, (uint64_t)v23);
    if (v22 < 0)
      operator delete(__p);
    v20 = *a3 != 0;
  }
  if (SHIBYTE(v26) < 0)
    operator delete(__dst[0]);
  if (!v20)
LABEL_15:
    *a3 = 0;
}

uint64_t sub_1C611E2F8(_QWORD *a1, _QWORD *a2, unsigned int a3)
{
  int v6;
  uint64_t v7;
  unint64_t v8;
  char *v9;
  BOOL v10;
  void **v11;
  char v12;
  char v13;
  char v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  void *__p[2];
  char v20;
  int v21;
  __int16 v22;
  __int128 v23;
  _QWORD v24[4];
  __int16 v25;
  _QWORD v26[4];
  __int16 v27;
  void **v28;
  uint64_t v29;
  __int128 v30;
  __int16 v31;
  int v32;
  __int16 v33;
  _QWORD v34[2];
  _QWORD v35[2];
  char v36;
  char v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  if (!a1[9] || a1[7] || a1[8])
    return (*(uint64_t (**)(_QWORD *, _QWORD *))(*a1 + 24))(a1, a2);
  if (a2[1] >= 4uLL)
    v6 = *(unsigned __int16 *)(*a2 + 2);
  else
    v6 = 0;
  v25 = 1283;
  v24[0] = " ";
  v24[2] = sub_1C611E534(v6);
  v24[3] = v7;
  v26[0] = v24;
  v26[2] = " (0x";
  v27 = 770;
  v8 = a3;
  if (a3)
  {
    v9 = (char *)v35 + 1;
    do
    {
      *--v9 = a0123456789abcd_6[v8 & 0xF];
      v10 = v8 > 0xF;
      v8 >>= 4;
    }
    while (v10);
  }
  else
  {
    v9 = (char *)v35;
    LOBYTE(v35[0]) = 48;
  }
  v11 = __p;
  sub_1C4E61270(__p, v9, (char *)v35 + 1, (char *)v35 + 1 - v9);
  v12 = v27;
  if (v27 == 1)
  {
    v28 = __p;
    v30 = v23;
    v31 = 260;
    v32 = v21;
    v33 = v22;
    v13 = 4;
    v15 = v29;
  }
  else
  {
    if (!(_BYTE)v27)
    {
      v13 = 0;
      v31 = 256;
      v14 = 1;
      goto LABEL_20;
    }
    v16 = (void **)v26[0];
    v13 = 2;
    if (HIBYTE(v27) != 1)
    {
      v12 = 2;
      v16 = (void **)v26;
    }
    v28 = v16;
    v29 = v26[1];
    *(_QWORD *)&v30 = __p;
    LOBYTE(v31) = v12;
    v15 = 4;
    HIBYTE(v31) = 4;
    v11 = (void **)&v28;
  }
  v34[0] = v11;
  v34[1] = v15;
  v35[0] = ")";
  v14 = 3;
LABEL_20:
  v36 = v13;
  v37 = v14;
  v17 = a1[9];
  if (v17 && !a1[7] && !a1[8] && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17))
    (*(void (**)(_QWORD, _QWORD *))(*(_QWORD *)a1[9] + 32))(a1[9], v34);
  if (v20 < 0)
    operator delete(__p[0]);
  return (*(uint64_t (**)(_QWORD *, _QWORD *))(*a1 + 24))(a1, a2);
}

const char *sub_1C611E534(int a1)
{
  const char *result;
  int v2;

  if (a1 <= 5377)
  {
    if (a1 <= 4608)
    {
      if (a1 <= 4096)
      {
        switch(a1)
        {
          case 10:
            return "VFTableShape";
          case 14:
            return "Label";
          case 20:
            return "EndPrecomp";
          default:
            return "UnknownLeaf";
        }
      }
      else
      {
        v2 = a1 - 4097;
        result = "Pointer";
        switch(v2)
        {
          case 0:
            result = "Modifier";
            break;
          case 1:
            return result;
          case 7:
            result = "Procedure";
            break;
          case 8:
            result = "MemberFunction";
            break;
          default:
            return "UnknownLeaf";
        }
      }
    }
    else
    {
      switch(a1)
      {
        case 5120:
          result = "BaseClass";
          break;
        case 5121:
          result = "VirtualBaseClass";
          break;
        case 5122:
          result = "IndirectVirtualBaseClass";
          break;
        case 5123:
        case 5125:
        case 5126:
        case 5127:
        case 5128:
          return "UnknownLeaf";
        case 5124:
          result = "ListContinuation";
          break;
        case 5129:
          result = "VFPtr";
          break;
        default:
          switch(a1)
          {
            case 4609:
              result = "ArgList";
              break;
            case 4611:
              result = "FieldList";
              break;
            case 4613:
              result = "BitField";
              break;
            case 4614:
              result = "MethodOverloadList";
              break;
            default:
              return "UnknownLeaf";
          }
          break;
      }
    }
  }
  else
  {
    switch(a1)
    {
      case 5378:
        result = "Enumerator";
        break;
      case 5379:
        result = "Array";
        break;
      case 5380:
        result = "Class";
        break;
      case 5381:
        result = "Struct";
        break;
      case 5382:
        result = "Union";
        break;
      case 5383:
        result = "Enum";
        break;
      case 5384:
      case 5386:
      case 5387:
      case 5388:
      case 5394:
      case 5395:
      case 5396:
      case 5398:
      case 5399:
      case 5400:
      case 5403:
      case 5404:
        return "UnknownLeaf";
      case 5385:
        result = "Precomp";
        break;
      case 5389:
        result = "DataMember";
        break;
      case 5390:
        result = "StaticDataMember";
        break;
      case 5391:
        result = "OverloadedMethod";
        break;
      case 5392:
        result = "NestedType";
        break;
      case 5393:
        result = "OneMethod";
        break;
      case 5397:
        result = "TypeServer2";
        break;
      case 5401:
        result = "Interface";
        break;
      case 5402:
        result = "BaseInterface";
        break;
      case 5405:
        result = "VFTable";
        break;
      default:
        switch(a1)
        {
          case 5633:
            result = "FuncId";
            break;
          case 5634:
            result = "MemberFuncId";
            break;
          case 5635:
            result = "BuildInfo";
            break;
          case 5636:
            result = "StringList";
            break;
          case 5637:
            result = "StringId";
            break;
          case 5638:
            result = "UdtSourceLine";
            break;
          case 5639:
            result = "UdtModSourceLine";
            break;
          default:
            return "UnknownLeaf";
        }
        break;
    }
  }
  return result;
}

void sub_1C611E84C(uint64_t a1@<X0>, unsigned __int16 *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  __int16 v7;
  const char *v8;
  unint64_t v9;
  const char *v10;
  std::string::size_type v11;
  std::string *p_dst;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char **v16;
  std::string::size_type v17;
  void *v18;
  char *v19;
  std::string *v20;
  std::string::size_type v21;
  std::string *v22;
  std::string::size_type v23;
  void **v24;
  std::string::size_type v25;
  uint64_t v26;
  uint64_t v27;
  void *__p[2];
  uint64_t v29;
  __int16 v30;
  std::string v31;
  std::string v32;
  std::string __dst;

  v6 = a1 + 16;
  sub_1C63EBEB8(a1 + 16, 0x10000FEF4, a3);
  if (*a3)
    return;
  v7 = *a2;
  if (!*(_BYTE *)(a1 + 14))
    *(_BYTE *)(a1 + 14) = 1;
  *(_WORD *)(a1 + 12) = v7;
  if (!*(_QWORD *)(a1 + 72) || *(_QWORD *)(a1 + 56) || *(_QWORD *)(a1 + 64))
    goto LABEL_7;
  v8 = sub_1C611E534(*a2);
  if (v9 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_55;
  v10 = v8;
  v11 = v9;
  if (v9 >= 0x17)
  {
    v13 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v9 | 7) != 0x17)
      v13 = v9 | 7;
    v14 = v13 + 1;
    p_dst = (std::string *)operator new(v13 + 1);
    __dst.__r_.__value_.__l.__size_ = v11;
    __dst.__r_.__value_.__r.__words[2] = v14 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v9;
    p_dst = &__dst;
    if (!v9)
      goto LABEL_17;
  }
  memmove(p_dst, v10, v11);
LABEL_17:
  p_dst->__r_.__value_.__s.__data_[v11] = 0;
  if (!*(_QWORD *)(a1 + 72) || *(_QWORD *)(a1 + 56) || *(_QWORD *)(a1 + 64))
  {
    v17 = 0;
    *((_BYTE *)&v31.__r_.__value_.__s + 23) = 0;
    v18 = &v31;
    goto LABEL_25;
  }
  v15 = 0x1FFFFFFFFFFFFCA9uLL;
  while (1)
  {
    v16 = &(&off_1E81B1D70)[v15];
    if (LOWORD((&off_1E81B1D70)[v15 + 859]) == *a2)
      break;
    v15 += 5;
    if (!(v15 * 8))
      goto LABEL_27;
  }
  v19 = v16[855];
  if (!v19)
  {
LABEL_27:
    memset(&v31, 0, sizeof(v31));
    goto LABEL_28;
  }
  v17 = (std::string::size_type)v16[856];
  if (v17 > 0x7FFFFFFFFFFFFFF7)
LABEL_55:
    abort();
  if (v17 >= 0x17)
  {
    v26 = (v17 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v17 | 7) != 0x17)
      v26 = v17 | 7;
    v27 = v26 + 1;
    v18 = operator new(v26 + 1);
    v31.__r_.__value_.__l.__size_ = v17;
    v31.__r_.__value_.__r.__words[2] = v27 | 0x8000000000000000;
    v31.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
    goto LABEL_54;
  }
  *((_BYTE *)&v31.__r_.__value_.__s + 23) = v16[856];
  v18 = &v31;
  if (v17)
LABEL_54:
    memmove(v18, v19, v17);
LABEL_25:
  *((_BYTE *)v18 + v17) = 0;
LABEL_28:
  v20 = std::string::insert(&v31, 0, "(");
  v21 = v20->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v32.__r_.__value_.__l.__data_ = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
  v32.__r_.__value_.__r.__words[2] = v21;
  v20->__r_.__value_.__l.__size_ = 0;
  v20->__r_.__value_.__r.__words[2] = 0;
  v20->__r_.__value_.__r.__words[0] = 0;
  v22 = std::string::append(&v32, ")");
  v23 = v22->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v22->__r_.__value_.__l.__data_;
  v29 = v23;
  v22->__r_.__value_.__l.__size_ = 0;
  v22->__r_.__value_.__r.__words[2] = 0;
  v22->__r_.__value_.__r.__words[0] = 0;
  if (v29 >= 0)
    v24 = __p;
  else
    v24 = (void **)__p[0];
  if (v29 >= 0)
    v25 = HIBYTE(v29) & 0x7F;
  else
    v25 = (std::string::size_type)__p[1];
  std::string::append(&__dst, (const std::string::value_type *)v24, v25);
  if (SHIBYTE(v29) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v31.__r_.__value_.__l.__data_);
  std::operator+<char>();
  v30 = 260;
  __p[0] = &v32;
  sub_1C63F14B4(a3, v6, a2, (uint64_t)__p);
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v32.__r_.__value_.__l.__data_);
  if (!*a3)
  {
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_7:
    *a3 = 0;
    return;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_1C611EB58(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  _QWORD *v4;
  unsigned int *v5;
  void *__p;
  char v7;
  uint64_t v8[4];
  __int16 v9;
  std::string v10;

  v4 = (_QWORD *)(a1 + 16);
  v5 = (unsigned int *)(a2 + 6);
  sub_1C611EC40((_QWORD *)(a1 + 16), *(_WORD *)(a2 + 6), (unint64_t)&off_1E81B1158, 3, &v10);
  v8[0] = (uint64_t)"ModifiedType";
  v9 = 259;
  sub_1C611ABF4(v4, v5 - 1, v8, a3);
  if (!*a3)
  {
    std::operator+<char>();
    v9 = 260;
    v8[0] = (uint64_t)&__p;
    sub_1C63F16AC((uint64_t)v4, v5, (uint64_t)v8, a3);
    if (v7 < 0)
      operator delete(__p);
    if (!*a3)
      *a3 = 0;
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v10.__r_.__value_.__l.__data_);
}

void sub_1C611EC40(_QWORD *a1@<X0>, __int16 a2@<W1>, unint64_t a3@<X2>, uint64_t a4@<X3>, std::string *a5@<X8>)
{
  std::string *v5;
  BOOL v6;
  unsigned int v10;
  uint64_t v11;
  BOOL v12;
  unint64_t v13;
  char *v14;
  uint64_t v15;
  __int128 v16;
  _QWORD *v17;
  unint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char v22;
  const std::string::value_type *v23;
  const std::string::value_type *v24;
  const void *v25;
  std::string::size_type v26;
  std::string *p_dst;
  uint64_t v28;
  const std::string::value_type *v29;
  const std::string::value_type *v30;
  uint64_t v31;
  unint64_t v32;
  std::string *v33;
  std::string::size_type v34;
  unint64_t v35;
  char *v36;
  BOOL v37;
  void **v38;
  std::string::size_type v39;
  std::string *v40;
  std::string::size_type v41;
  std::string *v42;
  std::string::size_type v43;
  void **v44;
  std::string::size_type v45;
  std::string::size_type size;
  void **v47;
  std::string *v48;
  void **v49;
  std::string::size_type v50;
  std::string *v51;
  void *v52[2];
  char v53;
  std::string __dst;
  std::string v55;
  std::string v56;
  std::string v57;
  void *__p[2];
  _QWORD v59[2];
  void *v60;
  uint64_t v61;
  _QWORD v62[52];

  v5 = a5;
  v62[50] = *MEMORY[0x1E0C80C00];
  if (a1[7])
    v6 = a1[5] == 0;
  else
    v6 = 0;
  if (!v6 || a1[6] != 0)
  {
    *((_BYTE *)&a5->__r_.__value_.__s + 23) = 0;
    a5->__r_.__value_.__s.__data_[0] = 0;
    return;
  }
  v60 = v62;
  v61 = 0xA00000000;
  if (a4)
  {
    v10 = 0;
    v11 = 40 * a4;
    do
    {
      if (*(_WORD *)(a3 + 32))
        v12 = (unsigned __int16)(*(_WORD *)(a3 + 32) & a2) == *(unsigned __int16 *)(a3 + 32);
      else
        v12 = 0;
      if (v12)
      {
        v13 = sub_1C4A0EA78((uint64_t)&v60, a3);
        v14 = (char *)v60 + 40 * v61;
        v15 = *(_QWORD *)(v13 + 32);
        v16 = *(_OWORD *)(v13 + 16);
        *(_OWORD *)v14 = *(_OWORD *)v13;
        *((_OWORD *)v14 + 1) = v16;
        *((_QWORD *)v14 + 4) = v15;
        v10 = v61 + 1;
        LODWORD(v61) = v61 + 1;
      }
      a3 += 40;
      v11 -= 40;
    }
    while (v11);
    v17 = v60;
  }
  else
  {
    v10 = 0;
    v17 = v62;
  }
  v57.__r_.__value_.__r.__words[0] = (std::string::size_type)sub_1C61228DC;
  v18 = 126 - 2 * __clz(v10);
  if (v10)
    v19 = v18;
  else
    v19 = 0;
  sub_1C612293C((uint64_t)v17, (unint64_t)&v17[5 * v10], (uint64_t (**)(__int128 *, __int128 *))&v57, v19, 1);
  memset(&v57, 0, sizeof(v57));
  if (!(_DWORD)v61)
  {
LABEL_83:
    *v5 = v57;
    memset(&v57, 0, sizeof(v57));
    goto LABEL_84;
  }
  v51 = v5;
  v20 = (char *)v60;
  v21 = (char *)v60 + 40 * v61;
  v22 = 1;
  v23 = " (0x";
  v24 = ")";
  do
  {
    if ((v22 & 1) == 0)
      std::string::append(&v57, " | ");
    v25 = *(const void **)v20;
    if (!*(_QWORD *)v20)
    {
      memset(&__dst, 0, sizeof(__dst));
      goto LABEL_38;
    }
    v26 = *((_QWORD *)v20 + 1);
    if (v26 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (v26 >= 0x17)
    {
      v28 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v26 | 7) != 0x17)
        v28 = v26 | 7;
      v29 = v24;
      v30 = v23;
      v31 = v28 + 1;
      p_dst = (std::string *)operator new(v28 + 1);
      v32 = v31 | 0x8000000000000000;
      v23 = v30;
      v24 = v29;
      __dst.__r_.__value_.__l.__size_ = v26;
      __dst.__r_.__value_.__r.__words[2] = v32;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = *((_QWORD *)v20 + 1);
      p_dst = &__dst;
      if (!v26)
        goto LABEL_37;
    }
    memmove(p_dst, v25, v26);
LABEL_37:
    p_dst->__r_.__value_.__s.__data_[v26] = 0;
LABEL_38:
    v33 = std::string::append(&__dst, v23);
    v34 = v33->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v55.__r_.__value_.__l.__data_ = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    v55.__r_.__value_.__r.__words[2] = v34;
    v33->__r_.__value_.__l.__size_ = 0;
    v33->__r_.__value_.__r.__words[2] = 0;
    v33->__r_.__value_.__r.__words[0] = 0;
    v35 = *((unsigned __int16 *)v20 + 16);
    v36 = (char *)v59 + 1;
    if (*((_WORD *)v20 + 16))
    {
      do
      {
        *--v36 = a0123456789abcd_6[v35 & 0xF];
        v37 = v35 > 0xF;
        v35 >>= 4;
      }
      while (v37);
    }
    else
    {
      LOBYTE(v59[0]) = 48;
      v36 = (char *)v59;
    }
    sub_1C4E61270(v52, v36, (char *)v59 + 1, (char *)v59 + 1 - v36);
    if (v53 >= 0)
      v38 = v52;
    else
      v38 = (void **)v52[0];
    if (v53 >= 0)
      v39 = v53 & 0x7F;
    else
      v39 = (std::string::size_type)v52[1];
    v40 = std::string::append(&v55, (const std::string::value_type *)v38, v39);
    v41 = v40->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v56.__r_.__value_.__l.__data_ = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
    v56.__r_.__value_.__r.__words[2] = v41;
    v40->__r_.__value_.__l.__size_ = 0;
    v40->__r_.__value_.__r.__words[2] = 0;
    v40->__r_.__value_.__r.__words[0] = 0;
    v42 = std::string::append(&v56, v24);
    v43 = v42->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
    v59[0] = v43;
    v42->__r_.__value_.__l.__size_ = 0;
    v42->__r_.__value_.__r.__words[2] = 0;
    v42->__r_.__value_.__r.__words[0] = 0;
    if (v59[0] >= 0)
      v44 = __p;
    else
      v44 = (void **)__p[0];
    if (v59[0] >= 0)
      v45 = HIBYTE(v59[0]) & 0x7F;
    else
      v45 = (std::string::size_type)__p[1];
    std::string::append(&v57, (const std::string::value_type *)v44, v45);
    if (SHIBYTE(v59[0]) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v56.__r_.__value_.__l.__data_);
    if (v53 < 0)
      operator delete(v52[0]);
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v55.__r_.__value_.__l.__data_);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    v22 = 0;
    v20 += 40;
  }
  while (v20 != v21);
  if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v57.__r_.__value_.__r.__words[2]);
  else
    size = v57.__r_.__value_.__l.__size_;
  v5 = v51;
  if (!size)
    goto LABEL_83;
  *((_BYTE *)&v51->__r_.__value_.__s + 23) = 3;
  LODWORD(v51->__r_.__value_.__l.__data_) = 2107424;
  sub_1C484371C((uint64_t)__p, size + 2);
  if (v59[0] >= 0)
    v47 = __p;
  else
    v47 = (void **)__p[0];
  if ((v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v48 = &v57;
  else
    v48 = (std::string *)v57.__r_.__value_.__r.__words[0];
  memmove(v47, v48, size);
  strcpy((char *)v47 + size, ")");
  if (v59[0] >= 0)
    v49 = __p;
  else
    v49 = (void **)__p[0];
  if (v59[0] >= 0)
    v50 = HIBYTE(v59[0]) & 0x7F;
  else
    v50 = (std::string::size_type)__p[1];
  std::string::append(v51, (const std::string::value_type *)v49, v50);
  if (SHIBYTE(v59[0]) < 0)
    operator delete(__p[0]);
LABEL_84:
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  if (v60 != v62)
    free(v60);
}

void sub_1C611F0E4(_QWORD *a1@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  char *v6;
  BOOL v7;
  uint64_t v9;
  char **v10;
  size_t v11;
  void **v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17[2];
  char v18;
  uint64_t v19[4];
  __int16 v20;
  void *__p;
  char v22;
  void *__dst[2];
  unint64_t v24;

  v6 = (char *)(a2 + 6);
  if (a1[9])
    v7 = a1[7] == 0;
  else
    v7 = 0;
  if (!v7 || a1[8] != 0)
  {
LABEL_12:
    v11 = 0;
    HIBYTE(v24) = 0;
    v12 = __dst;
    goto LABEL_21;
  }
  v9 = 0;
  while (1)
  {
    v10 = &(&off_1E81B11D0)[v9];
    if (LOBYTE((&off_1E81B11D0)[v9 + 4]) == *(unsigned __int8 *)(a2 + 6))
      break;
    v9 += 5;
    if (v9 == 120)
      goto LABEL_12;
  }
  v11 = (size_t)v10[1];
  if (v11 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v13 = *v10;
  if (v11 >= 0x17)
  {
    v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v11 | 7) != 0x17)
      v14 = v11 | 7;
    v15 = v14 + 1;
    v12 = (void **)operator new(v14 + 1);
    __dst[1] = (void *)v11;
    v24 = v15 | 0x8000000000000000;
    __dst[0] = v12;
    goto LABEL_20;
  }
  HIBYTE(v24) = v10[1];
  v12 = __dst;
  if (v11)
LABEL_20:
    memmove(v12, v13, v11);
LABEL_21:
  v16 = a1 + 2;
  *((_BYTE *)v12 + v11) = 0;
  sub_1C611F36C((uint64_t)&__p, v16, *(_BYTE *)(a2 + 7), (unint64_t)&off_1E81B1590, 3);
  v19[0] = (uint64_t)"ReturnType";
  v20 = 259;
  sub_1C611ABF4(v16, (unsigned int *)(a2 + 2), v19, a3);
  if (!*a3)
  {
    std::operator+<char>();
    v20 = 260;
    v19[0] = (uint64_t)v17;
    sub_1C63F17E0(a3, (uint64_t)v16, v6, (uint64_t)v19);
    if (v18 < 0)
      operator delete(v17[0]);
    if (!*a3)
    {
      std::operator+<char>();
      v20 = 260;
      v19[0] = (uint64_t)v17;
      sub_1C63F17E0(a3, (uint64_t)v16, (char *)(a2 + 7), (uint64_t)v19);
      if (v18 < 0)
        operator delete(v17[0]);
      if (!*a3)
      {
        v19[0] = (uint64_t)"NumParameters";
        v20 = 259;
        sub_1C63F132C((uint64_t)v16, (_WORD *)(a2 + 8), (uint64_t)v19, a3);
        if (!*a3)
        {
          v19[0] = (uint64_t)"ArgListType";
          v20 = 259;
          sub_1C611ABF4(v16, (unsigned int *)(a2 + 10), v19, a3);
          if (!*a3)
            *a3 = 0;
        }
      }
    }
  }
  if (v22 < 0)
    operator delete(__p);
  if (SHIBYTE(v24) < 0)
    operator delete(__dst[0]);
}

void sub_1C611F36C(uint64_t a1, _QWORD *a2, char a3, unint64_t a4, uint64_t a5)
{
  BOOL v5;
  unint64_t v7;
  unsigned int v9;
  uint64_t v10;
  unint64_t v11;
  BOOL v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;
  __int128 v17;
  unint64_t v18;
  char *v19;
  BOOL v20;
  unint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char v27;
  const std::string::value_type *v28;
  const std::string::value_type *v29;
  const void *v30;
  std::string::size_type v31;
  std::string *p_dst;
  uint64_t v33;
  const std::string::value_type *v34;
  const std::string::value_type *v35;
  uint64_t v36;
  unint64_t v37;
  std::string *v38;
  std::string::size_type v39;
  unint64_t v40;
  char *v41;
  void **v42;
  std::string::size_type v43;
  std::string *v44;
  std::string::size_type v45;
  std::string *v46;
  std::string::size_type v47;
  void **v48;
  std::string::size_type v49;
  std::string::size_type size;
  void **v51;
  std::string *v52;
  void **v53;
  std::string::size_type v54;
  void *v56[2];
  char v57;
  std::string __dst;
  std::string v59;
  std::string v60;
  std::string v61;
  void *__p[2];
  _QWORD v63[2];
  void *v64;
  uint64_t v65;
  _QWORD v66[52];

  v66[50] = *MEMORY[0x1E0C80C00];
  if (a2[7])
    v5 = a2[5] == 0;
  else
    v5 = 0;
  if (!v5 || a2[6] != 0)
  {
    *(_BYTE *)(a1 + 23) = 0;
    *(_BYTE *)a1 = 0;
    return;
  }
  v64 = v66;
  v65 = 0xA00000000;
  if (a5)
  {
    v7 = a4;
    v9 = 0;
    v10 = 40 * a5;
    v11 = a4;
    do
    {
      if (*(_BYTE *)(v11 + 32))
        v12 = (*(_BYTE *)(v11 + 32) & a3) == *(unsigned __int8 *)(v11 + 32);
      else
        v12 = 0;
      if (v12)
      {
        v13 = (char *)v64;
        v14 = (char *)v11;
        if (v9 >= HIDWORD(v65))
        {
          v18 = v9 + 1;
          v19 = (char *)v64 + 40 * v9;
          v20 = (unint64_t)v64 <= v11 && (unint64_t)v19 > v11;
          if (v20)
          {
            v21 = v7 - (_QWORD)v64;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, (uint64_t)v66, v18, 40);
            v13 = (char *)v64;
            v14 = (char *)v64 + v21;
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, (uint64_t)v66, v18, 40);
            v13 = (char *)v64;
            v14 = (char *)v11;
          }
        }
        v15 = &v13[40 * v65];
        v16 = *(_OWORD *)v14;
        v17 = *((_OWORD *)v14 + 1);
        *((_QWORD *)v15 + 4) = *((_QWORD *)v14 + 4);
        *(_OWORD *)v15 = v16;
        *((_OWORD *)v15 + 1) = v17;
        v9 = v65 + 1;
        LODWORD(v65) = v65 + 1;
      }
      v11 += 40;
      v7 += 40;
      v10 -= 40;
    }
    while (v10);
    v22 = v64;
  }
  else
  {
    v9 = 0;
    v22 = v66;
  }
  v61.__r_.__value_.__r.__words[0] = (std::string::size_type)sub_1C6123784;
  v23 = 126 - 2 * __clz(v9);
  if (v9)
    v24 = v23;
  else
    v24 = 0;
  sub_1C61237E4((uint64_t)v22, (unint64_t)&v22[5 * v9], (uint64_t (**)(__int128 *, __int128 *))&v61, v24, 1);
  memset(&v61, 0, sizeof(v61));
  if (!(_DWORD)v65)
  {
LABEL_90:
    *(std::string *)a1 = v61;
    memset(&v61, 0, sizeof(v61));
    goto LABEL_91;
  }
  v25 = (char *)v64;
  v26 = (char *)v64 + 40 * v65;
  v27 = 1;
  v28 = " (0x";
  v29 = ")";
  do
  {
    if ((v27 & 1) == 0)
      std::string::append(&v61, " | ");
    v30 = *(const void **)v25;
    if (!*(_QWORD *)v25)
    {
      memset(&__dst, 0, sizeof(__dst));
      goto LABEL_45;
    }
    v31 = *((_QWORD *)v25 + 1);
    if (v31 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (v31 >= 0x17)
    {
      v33 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v31 | 7) != 0x17)
        v33 = v31 | 7;
      v34 = v29;
      v35 = v28;
      v36 = v33 + 1;
      p_dst = (std::string *)operator new(v33 + 1);
      v37 = v36 | 0x8000000000000000;
      v28 = v35;
      v29 = v34;
      __dst.__r_.__value_.__l.__size_ = v31;
      __dst.__r_.__value_.__r.__words[2] = v37;
      __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    }
    else
    {
      *((_BYTE *)&__dst.__r_.__value_.__s + 23) = *((_QWORD *)v25 + 1);
      p_dst = &__dst;
      if (!v31)
        goto LABEL_44;
    }
    memmove(p_dst, v30, v31);
LABEL_44:
    p_dst->__r_.__value_.__s.__data_[v31] = 0;
LABEL_45:
    v38 = std::string::append(&__dst, v28);
    v39 = v38->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v59.__r_.__value_.__l.__data_ = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
    v59.__r_.__value_.__r.__words[2] = v39;
    v38->__r_.__value_.__l.__size_ = 0;
    v38->__r_.__value_.__r.__words[2] = 0;
    v38->__r_.__value_.__r.__words[0] = 0;
    v40 = v25[32];
    v41 = (char *)v63 + 1;
    if (v25[32])
    {
      do
      {
        *--v41 = a0123456789abcd_6[v40 & 0xF];
        v20 = v40 > 0xF;
        v40 >>= 4;
      }
      while (v20);
    }
    else
    {
      LOBYTE(v63[0]) = 48;
      v41 = (char *)v63;
    }
    sub_1C4E61270(v56, v41, (char *)v63 + 1, (char *)v63 + 1 - v41);
    if (v57 >= 0)
      v42 = v56;
    else
      v42 = (void **)v56[0];
    if (v57 >= 0)
      v43 = v57 & 0x7F;
    else
      v43 = (std::string::size_type)v56[1];
    v44 = std::string::append(&v59, (const std::string::value_type *)v42, v43);
    v45 = v44->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v60.__r_.__value_.__l.__data_ = *(_OWORD *)&v44->__r_.__value_.__l.__data_;
    v60.__r_.__value_.__r.__words[2] = v45;
    v44->__r_.__value_.__l.__size_ = 0;
    v44->__r_.__value_.__r.__words[2] = 0;
    v44->__r_.__value_.__r.__words[0] = 0;
    v46 = std::string::append(&v60, v29);
    v47 = v46->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v46->__r_.__value_.__l.__data_;
    v63[0] = v47;
    v46->__r_.__value_.__l.__size_ = 0;
    v46->__r_.__value_.__r.__words[2] = 0;
    v46->__r_.__value_.__r.__words[0] = 0;
    if (v63[0] >= 0)
      v48 = __p;
    else
      v48 = (void **)__p[0];
    if (v63[0] >= 0)
      v49 = HIBYTE(v63[0]) & 0x7F;
    else
      v49 = (std::string::size_type)__p[1];
    std::string::append(&v61, (const std::string::value_type *)v48, v49);
    if (SHIBYTE(v63[0]) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v60.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v60.__r_.__value_.__l.__data_);
    if (v57 < 0)
      operator delete(v56[0]);
    if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v59.__r_.__value_.__l.__data_);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    v27 = 0;
    v25 += 40;
  }
  while (v25 != v26);
  if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = HIBYTE(v61.__r_.__value_.__r.__words[2]);
  else
    size = v61.__r_.__value_.__l.__size_;
  if (!size)
    goto LABEL_90;
  *(_BYTE *)(a1 + 23) = 3;
  *(_DWORD *)a1 = 2107424;
  sub_1C484371C((uint64_t)__p, size + 2);
  if (v63[0] >= 0)
    v51 = __p;
  else
    v51 = (void **)__p[0];
  if ((v61.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v52 = &v61;
  else
    v52 = (std::string *)v61.__r_.__value_.__r.__words[0];
  memmove(v51, v52, size);
  strcpy((char *)v51 + size, ")");
  if (v63[0] >= 0)
    v53 = __p;
  else
    v53 = (void **)__p[0];
  if (v63[0] >= 0)
    v54 = HIBYTE(v63[0]) & 0x7F;
  else
    v54 = (std::string::size_type)__p[1];
  std::string::append((std::string *)a1, (const std::string::value_type *)v53, v54);
  if (SHIBYTE(v63[0]) < 0)
    operator delete(__p[0]);
LABEL_91:
  if (SHIBYTE(v61.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v61.__r_.__value_.__l.__data_);
  if (v64 != v66)
    free(v64);
}

void sub_1C611F87C(_QWORD *a1@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  char *v6;
  BOOL v7;
  uint64_t v9;
  char **v10;
  size_t v11;
  void **v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  void *v17[2];
  char v18;
  uint64_t v19[4];
  __int16 v20;
  void *__p;
  char v22;
  void *__dst[2];
  unint64_t v24;

  v6 = (char *)(a2 + 14);
  if (a1[9])
    v7 = a1[7] == 0;
  else
    v7 = 0;
  if (v7 && a1[8] == 0)
  {
    v9 = 0;
    while (1)
    {
      v10 = &(&off_1E81B11D0)[v9];
      if (LOBYTE((&off_1E81B11D0)[v9 + 4]) == *(unsigned __int8 *)(a2 + 14))
        break;
      v9 += 5;
      if (v9 == 120)
        goto LABEL_12;
    }
    v11 = (size_t)v10[1];
    if (v11 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v13 = *v10;
    if (v11 >= 0x17)
    {
      v14 = (v11 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v11 | 7) != 0x17)
        v14 = v11 | 7;
      v15 = v14 + 1;
      v12 = (void **)operator new(v14 + 1);
      __dst[1] = (void *)v11;
      v24 = v15 | 0x8000000000000000;
      __dst[0] = v12;
    }
    else
    {
      HIBYTE(v24) = v10[1];
      v12 = __dst;
      if (!v11)
        goto LABEL_21;
    }
    memmove(v12, v13, v11);
  }
  else
  {
LABEL_12:
    v11 = 0;
    HIBYTE(v24) = 0;
    v12 = __dst;
  }
LABEL_21:
  v16 = a1 + 2;
  *((_BYTE *)v12 + v11) = 0;
  sub_1C611F36C((uint64_t)&__p, v16, *(_BYTE *)(a2 + 15), (unint64_t)&off_1E81B1590, 3);
  v19[0] = (uint64_t)"ReturnType";
  v20 = 259;
  sub_1C611ABF4(v16, (unsigned int *)(a2 + 2), v19, a3);
  if (!*a3)
  {
    v19[0] = (uint64_t)"ClassType";
    v20 = 259;
    sub_1C611ABF4(v16, (unsigned int *)(a2 + 6), v19, a3);
    if (!*a3)
    {
      v19[0] = (uint64_t)"ThisType";
      v20 = 259;
      sub_1C611ABF4(v16, (unsigned int *)(a2 + 10), v19, a3);
      if (!*a3)
      {
        std::operator+<char>();
        v20 = 260;
        v19[0] = (uint64_t)v17;
        sub_1C63F17E0(a3, (uint64_t)v16, v6, (uint64_t)v19);
        if (v18 < 0)
          operator delete(v17[0]);
        if (!*a3)
        {
          std::operator+<char>();
          v20 = 260;
          v19[0] = (uint64_t)v17;
          sub_1C63F17E0(a3, (uint64_t)v16, (char *)(a2 + 15), (uint64_t)v19);
          if (v18 < 0)
            operator delete(v17[0]);
          if (!*a3)
          {
            v19[0] = (uint64_t)"NumParameters";
            v20 = 259;
            sub_1C63F132C((uint64_t)v16, (_WORD *)(a2 + 16), (uint64_t)v19, a3);
            if (!*a3)
            {
              v19[0] = (uint64_t)"ArgListType";
              v20 = 259;
              sub_1C611ABF4(v16, (unsigned int *)(a2 + 18), v19, a3);
              if (!*a3)
              {
                v19[0] = (uint64_t)"ThisAdjustment";
                v20 = 259;
                sub_1C63F1220((uint64_t)v16, (unsigned int *)(a2 + 24), (uint64_t)v19, a3);
                if (!*a3)
                  *a3 = 0;
              }
            }
          }
        }
      }
    }
  }
  if (v22 < 0)
    operator delete(__p);
  if (SHIBYTE(v24) < 0)
    operator delete(__dst[0]);
}

void sub_1C611FB90(_QWORD *a1@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  char *v7;
  size_t v8;
  char **p_dst;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  const void *p_p;
  size_t v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  size_t v18;
  void *v19;
  const void *v20;
  uint64_t v21;
  uint64_t v22;
  void **v23;
  size_t v24;
  uint64_t v25;
  unint64_t v26;
  char *v27;
  BOOL v28;
  std::string *v29;
  int v30;
  void *v31;
  void **v32;
  size_t v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  int v42;
  _WORD *v43;
  int v44;
  uint64_t v45;
  char *v46;
  size_t v47;
  void *v48;
  const void *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  char *__dst;
  uint64_t v54;
  unint64_t v55;
  __int16 v56;
  std::string v57;
  void *__p;
  size_t v59;
  int64_t v60;
  void *v61[2];
  _QWORD v62[2];
  void *v63;
  __int128 v64;
  _DWORD v65[32];
  uint64_t v66;

  v66 = *MEMORY[0x1E0C80C00];
  v63 = v65;
  qmemcpy(v65, "Attrs: ", 7);
  v64 = xmmword_1C8678830;
  if (!a1[9])
    goto LABEL_104;
  if (a1[7])
    goto LABEL_104;
  v6 = a1[8];
  if (v6)
    goto LABEL_104;
  while (1)
  {
    v7 = (char *)&off_1E81B0D20 + v6;
    if ((*(_DWORD *)(a2 + 8) & 0x1F) == *((_BYTE *)&off_1E81B0D20 + v6 + 32))
      break;
    v6 += 40;
    if (v6 == 520)
    {
      v8 = 0;
      HIBYTE(v55) = 0;
      p_dst = &__dst;
      goto LABEL_15;
    }
  }
  v8 = *((_QWORD *)v7 + 1);
  if (v8 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_141;
  v10 = *(const void **)v7;
  if (v8 >= 0x17)
  {
    v11 = (v8 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v8 | 7) != 0x17)
      v11 = v8 | 7;
    v12 = v11 + 1;
    p_dst = (char **)operator new(v11 + 1);
    v54 = v8;
    v55 = v12 | 0x8000000000000000;
    __dst = (char *)p_dst;
    goto LABEL_14;
  }
  HIBYTE(v55) = *((_QWORD *)v7 + 1);
  p_dst = &__dst;
  if (v8)
LABEL_14:
    memmove(p_dst, v10, v8);
LABEL_15:
  *((_BYTE *)p_dst + v8) = 0;
  std::operator+<char>();
  if (v60 >= 0)
    p_p = &__p;
  else
    p_p = __p;
  if (v60 >= 0)
    v14 = HIBYTE(v60) & 0x7F;
  else
    v14 = v59;
  v15 = v64;
  if (*((_QWORD *)&v64 + 1) >= (unint64_t)v64 + v14)
  {
    if (!v14)
      goto LABEL_24;
    goto LABEL_23;
  }
  llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v63, v65, v64 + v14, 1);
  v15 = v64;
  if (v14)
  {
LABEL_23:
    memcpy((char *)v63 + v15, p_p, v14);
    v15 = v64;
  }
LABEL_24:
  *(_QWORD *)&v64 = v15 + v14;
  if (SHIBYTE(v60) < 0)
    operator delete(__p);
  if (!a1[9] || a1[7] || (v16 = a1[8]) != 0)
  {
LABEL_31:
    v18 = 0;
    HIBYTE(v60) = 0;
    v19 = &__p;
    goto LABEL_40;
  }
  while (1)
  {
    v17 = (char *)&off_1E81B0F28 + v16;
    if (*(_DWORD *)(a2 + 8) >> 5 == *((_BYTE *)&off_1E81B0F28 + v16 + 32))
      break;
    v16 += 40;
    if (v16 == 200)
      goto LABEL_31;
  }
  v18 = *((_QWORD *)v17 + 1);
  if (v18 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_141;
  v20 = *(const void **)v17;
  if (v18 >= 0x17)
  {
    v21 = (v18 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v18 | 7) != 0x17)
      v21 = v18 | 7;
    v22 = v21 + 1;
    v19 = operator new(v21 + 1);
    v59 = v18;
    v60 = v22 | 0x8000000000000000;
    __p = v19;
    goto LABEL_39;
  }
  HIBYTE(v60) = *((_QWORD *)v17 + 1);
  v19 = &__p;
  if (v18)
LABEL_39:
    memmove(v19, v20, v18);
LABEL_40:
  *((_BYTE *)v19 + v18) = 0;
  std::operator+<char>();
  if (v62[0] >= 0)
    v23 = v61;
  else
    v23 = (void **)v61[0];
  if (v62[0] >= 0)
    v24 = HIBYTE(v62[0]) & 0x7F;
  else
    v24 = (size_t)v61[1];
  v25 = v64;
  if (*((_QWORD *)&v64 + 1) >= (unint64_t)v64 + v24)
  {
    if (!v24)
      goto LABEL_49;
    goto LABEL_48;
  }
  llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v63, v65, v64 + v24, 1);
  v25 = v64;
  if (v24)
  {
LABEL_48:
    memcpy((char *)v63 + v25, v23, v24);
    v25 = v64;
  }
LABEL_49:
  *(_QWORD *)&v64 = v25 + v24;
  if (SHIBYTE(v62[0]) < 0)
    operator delete(v61[0]);
  v26 = ((unint64_t)*(unsigned int *)(a2 + 8) >> 13);
  if (((unint64_t)*(unsigned int *)(a2 + 8) >> 13))
  {
    v27 = (char *)v62 + 5;
    do
    {
      *--v27 = (v26 % 0xA) | 0x30;
      v28 = v26 > 9;
      v26 /= 0xAuLL;
    }
    while (v28);
  }
  else
  {
    v27 = (char *)v62 + 4;
    BYTE4(v62[0]) = 48;
  }
  sub_1C4E61270(&v57, v27, (char *)v62 + 5, (char *)v62 + 5 - v27);
  v29 = std::string::insert(&v57, 0, ", SizeOf: ");
  v62[0] = *((_QWORD *)&v29->__r_.__value_.__l + 2);
  *(_OWORD *)v61 = *(_OWORD *)&v29->__r_.__value_.__l.__data_;
  v29->__r_.__value_.__r.__words[0] = 0;
  v29->__r_.__value_.__l.__size_ = 0;
  v29->__r_.__value_.__r.__words[2] = 0;
  v30 = SHIBYTE(v62[0]);
  v31 = v61[0];
  if (v62[0] >= 0)
    v32 = v61;
  else
    v32 = (void **)v61[0];
  if (v62[0] >= 0)
    v33 = HIBYTE(v62[0]) & 0x7F;
  else
    v33 = (size_t)v61[1];
  v34 = v64;
  if (*((_QWORD *)&v64 + 1) >= (unint64_t)v64 + v33)
  {
    if (!v33)
      goto LABEL_65;
    goto LABEL_64;
  }
  llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v63, v65, v64 + v33, 1);
  v34 = v64;
  if (v33)
  {
LABEL_64:
    memcpy((char *)v63 + v34, v32, v33);
    v34 = v64;
  }
LABEL_65:
  *(_QWORD *)&v64 = v34 + v33;
  if (v30 < 0)
    operator delete(v31);
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v57.__r_.__value_.__l.__data_);
  v35 = *(_DWORD *)(a2 + 8);
  v37 = *((_QWORD *)&v64 + 1);
  v36 = v64;
  if ((v35 & 0x100) != 0)
  {
    if (*((_QWORD *)&v64 + 1) < (unint64_t)(v64 + 8))
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v63, v65, v64 + 8, 1);
      v36 = v64;
    }
    *(_QWORD *)((char *)v63 + v36) = 0x74616C467369202CLL;
    v37 = *((_QWORD *)&v64 + 1);
    v36 = v64 + 8;
    *(_QWORD *)&v64 = v64 + 8;
    v35 = *(_DWORD *)(a2 + 8);
    if ((v35 & 0x400) == 0)
    {
LABEL_71:
      if ((v35 & 0x200) == 0)
        goto LABEL_72;
      goto LABEL_83;
    }
  }
  else if ((v35 & 0x400) == 0)
  {
    goto LABEL_71;
  }
  if (v37 < v36 + 9)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v63, v65, v36 + 9, 1);
    v36 = v64;
  }
  v38 = (char *)v63 + v36;
  *(_QWORD *)v38 = *(_QWORD *)", isConst";
  v38[8] = 116;
  v37 = *((_QWORD *)&v64 + 1);
  v36 = v64 + 9;
  *(_QWORD *)&v64 = v64 + 9;
  v35 = *(_DWORD *)(a2 + 8);
  if ((v35 & 0x200) == 0)
  {
LABEL_72:
    if ((v35 & 0x800) == 0)
      goto LABEL_73;
    goto LABEL_86;
  }
LABEL_83:
  if (v37 < v36 + 12)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v63, v65, v36 + 12, 1);
    v36 = v64;
  }
  v39 = (char *)v63 + v36;
  *(_QWORD *)v39 = *(_QWORD *)", isVolatile";
  *((_DWORD *)v39 + 2) = 1701603700;
  v37 = *((_QWORD *)&v64 + 1);
  v36 = v64 + 12;
  *(_QWORD *)&v64 = v64 + 12;
  v35 = *(_DWORD *)(a2 + 8);
  if ((v35 & 0x800) == 0)
  {
LABEL_73:
    if ((v35 & 0x1000) == 0)
      goto LABEL_74;
    goto LABEL_89;
  }
LABEL_86:
  if (v37 < v36 + 13)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v63, v65, v36 + 13, 1);
    v36 = v64;
  }
  qmemcpy((char *)v63 + v36, ", isUnaligned", 13);
  v37 = *((_QWORD *)&v64 + 1);
  v36 = v64 + 13;
  *(_QWORD *)&v64 = v64 + 13;
  v35 = *(_DWORD *)(a2 + 8);
  if ((v35 & 0x1000) == 0)
  {
LABEL_74:
    if ((v35 & 0x100000) == 0)
      goto LABEL_75;
LABEL_92:
    if (v37 < v36 + 12)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v63, v65, v36 + 12, 1);
      v36 = v64;
    }
    v40 = (char *)v63 + v36;
    *(_QWORD *)v40 = *(_QWORD *)", isThisPtr&";
    *((_DWORD *)v40 + 2) = 645035088;
    v37 = *((_QWORD *)&v64 + 1);
    v36 = v64 + 12;
    *(_QWORD *)&v64 = v64 + 12;
    if ((*(_DWORD *)(a2 + 8) & 0x200000) == 0)
      goto LABEL_98;
    goto LABEL_95;
  }
LABEL_89:
  if (v37 < v36 + 14)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v63, v65, v36 + 14, 1);
    v36 = v64;
  }
  qmemcpy((char *)v63 + v36, ", isRestricted", 14);
  v37 = *((_QWORD *)&v64 + 1);
  v36 = v64 + 14;
  *(_QWORD *)&v64 = v64 + 14;
  v35 = *(_DWORD *)(a2 + 8);
  if ((v35 & 0x100000) != 0)
    goto LABEL_92;
LABEL_75:
  if ((v35 & 0x200000) != 0)
  {
LABEL_95:
    if (v37 < v36 + 13)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v63, v65, v36 + 13, 1);
      v36 = v64;
    }
    qmemcpy((char *)v63 + v36, ", isThisPtr&&", 13);
    v37 = *((_QWORD *)&v64 + 1);
    v36 = v64 + 13;
    *(_QWORD *)&v64 = v64 + 13;
  }
LABEL_98:
  if (v37 < v36 + 2)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v63, v65, v36 + 2, 1);
    v36 = v64;
  }
  *(_WORD *)((char *)v63 + v36) = 23840;
  *(_QWORD *)&v64 = v64 + 2;
  if (SHIBYTE(v60) < 0)
    operator delete(__p);
  if (SHIBYTE(v55) < 0)
    operator delete(__dst);
LABEL_104:
  v41 = (uint64_t)(a1 + 2);
  __dst = "PointeeType";
  v56 = 259;
  sub_1C611ABF4(a1 + 2, (unsigned int *)(a2 + 2), (uint64_t *)&__dst, a3);
  if (*a3)
    goto LABEL_105;
  v56 = 261;
  __dst = (char *)v63;
  v54 = v64;
  sub_1C63F1220((uint64_t)(a1 + 2), (unsigned int *)(a2 + 8), (uint64_t)&__dst, a3);
  if (*a3)
    goto LABEL_105;
  if ((*(_DWORD *)(a2 + 8) & 0xC0) != 0x40)
    goto LABEL_140;
  if (a1[7] && !a1[9] && !a1[8])
  {
    *(_WORD *)(a2 + 16) = 0;
    *(_DWORD *)(a2 + 12) = 0;
    *(_BYTE *)(a2 + 18) = 1;
  }
  __dst = "ClassType";
  v56 = 259;
  sub_1C611ABF4(a1 + 2, (unsigned int *)(a2 + 12), (uint64_t *)&__dst, a3);
  if (!*a3)
  {
    v44 = *(unsigned __int16 *)(a2 + 16);
    v43 = (_WORD *)(a2 + 16);
    v42 = v44;
    if (!a1[9] || a1[7] || (v45 = a1[8]) != 0)
    {
LABEL_120:
      v47 = 0;
      HIBYTE(v60) = 0;
      v48 = &__p;
      goto LABEL_135;
    }
    while (1)
    {
      v46 = (char *)&off_1E81B0FF0 + v45;
      if (*(unsigned __int16 *)((char *)&off_1E81B0FF0 + v45 + 32) == v42)
        break;
      v45 += 40;
      if (v45 == 360)
        goto LABEL_120;
    }
    v47 = *((_QWORD *)v46 + 1);
    if (v47 <= 0x7FFFFFFFFFFFFFF7)
    {
      v49 = *(const void **)v46;
      if (v47 >= 0x17)
      {
        v50 = (v47 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v47 | 7) != 0x17)
          v50 = v47 | 7;
        v51 = v50 + 1;
        v48 = operator new(v50 + 1);
        v59 = v47;
        v60 = v51 | 0x8000000000000000;
        __p = v48;
      }
      else
      {
        HIBYTE(v60) = *((_QWORD *)v46 + 1);
        v48 = &__p;
        if (!v47)
        {
LABEL_135:
          *((_BYTE *)v48 + v47) = 0;
          std::operator+<char>();
          v56 = 260;
          __dst = (char *)v61;
          sub_1C63F14B4(a3, v41, v43, (uint64_t)&__dst);
          if (SHIBYTE(v62[0]) < 0)
            operator delete(v61[0]);
          v52 = *a3;
          if (SHIBYTE(v60) < 0)
            operator delete(__p);
          if (!v52)
          {
LABEL_140:
            *a3 = 0;
            goto LABEL_105;
          }
          goto LABEL_105;
        }
      }
      memmove(v48, v49, v47);
      goto LABEL_135;
    }
LABEL_141:
    abort();
  }
LABEL_105:
  if (v63 != v65)
    free(v63);
}

void sub_1C61204F8(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  _QWORD *v5;
  _WORD *v6;
  void *v7;
  char v8;
  uint64_t v9[4];
  __int16 v10;
  std::string __p;

  v5 = (_QWORD *)(a1 + 16);
  v6 = (_WORD *)(a2 + 4);
  sub_1C611EC40((_QWORD *)(a1 + 16), *(_WORD *)(a2 + 4), (unint64_t)&off_1E81B08C0, 12, &__p);
  v9[0] = (uint64_t)"MemberCount";
  v10 = 259;
  sub_1C63F132C((uint64_t)v5, v6 - 1, (uint64_t)v9, a3);
  if (!*a3)
  {
    std::operator+<char>();
    v10 = 260;
    v9[0] = (uint64_t)&v7;
    sub_1C63F16AC((uint64_t)v5, v6, (uint64_t)v9, a3);
    if (v8 < 0)
      operator delete(v7);
    if (!*a3)
    {
      v9[0] = (uint64_t)"FieldList";
      v10 = 259;
      sub_1C611ABF4(v5, (unsigned int *)(a2 + 6), v9, a3);
      if (!*a3)
      {
        v9[0] = (uint64_t)"DerivedFrom";
        v10 = 259;
        sub_1C611ABF4(v5, (unsigned int *)(a2 + 48), v9, a3);
        if (!*a3)
        {
          v9[0] = (uint64_t)"VShape";
          v10 = 259;
          sub_1C611ABF4(v5, (unsigned int *)(a2 + 52), v9, a3);
          if (!*a3)
          {
            v9[0] = (uint64_t)"SizeOf";
            v10 = 259;
            sub_1C611ADF0(v5, (uint64_t *)(a2 + 56), (uint64_t)v9, a3);
            if (!*a3)
            {
              sub_1C61206C4((size_t *)(a2 + 16), (uint64_t)v5, (size_t *)(a2 + 32), (*(unsigned __int16 *)(a2 + 4) >> 9) & 1, a3);
              if (!*a3)
                *a3 = 0;
            }
          }
        }
      }
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1C61206C4(size_t *a1@<X1>, uint64_t a2@<X0>, size_t *a3@<X2>, int a4@<W3>, uint64_t *a5@<X8>)
{
  BOOL v10;
  unsigned int v12;
  uint64_t v13;
  size_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t v17;
  size_t v18;
  void **v19;
  void *v20;
  void *v21;
  uint64_t v22;
  _BOOL4 v23;
  unint64_t v24;
  llvm::StringRef *v25;
  uint64_t *v26;
  uint64_t v27;
  _QWORD v28[2];
  _QWORD v29[2];
  void *__p[2];
  char *v31;
  uint64_t v32;
  __int16 v33;
  void **v34;
  unint64_t v35;
  const char *v36;
  uint64_t v37;
  __int16 v38;
  void *v39;
  uint64_t v40;
  char v41;
  char *v42;
  __int128 v43;
  uint64_t v44;
  __int16 v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  if (*(_QWORD *)(a2 + 48))
    v10 = *(_QWORD *)(a2 + 56) == 0;
  else
    v10 = 0;
  if (!v10 || *(_QWORD *)(a2 + 40) != 0)
  {
    v42 = "Name";
    v45 = 259;
    sub_1C63ECC80((llvm::StringRef *)a1, a2, (uint64_t)&v42, a5);
    if (*a5)
      return;
    if (!a4)
    {
LABEL_41:
      *a5 = 0;
      return;
    }
    v42 = "LinkageName";
    v45 = 259;
LABEL_46:
    v26 = a5;
    v27 = a2;
    v25 = (llvm::StringRef *)a3;
    goto LABEL_40;
  }
  v12 = sub_1C63EBFF8((unsigned int *)a2);
  v13 = v12;
  if (a4)
  {
    v14 = a3[1];
    if (a1[1] + v14 + 2 > v12)
    {
      v42 = (char *)&v44;
      v43 = xmmword_1C677F680;
      sub_1C6122854((int *)*a3, v14, &v42);
      v33 = 1283;
      __p[0] = "??@";
      v31 = v42;
      v32 = v43;
      v34 = __p;
      v36 = "@";
      v38 = 770;
      llvm::Twine::str((llvm::Twine *)&v34, &v39);
      v15 = v41 & 0x7F;
      if (v41 < 0)
        v15 = v40;
      v16 = v13 - v15 - 2;
      if (v16 >= 0x1000)
        v16 = 4096;
      v17 = v16 - 32;
      sub_1C6122854((int *)*a1, a1[1], &v42);
      v18 = a1[1];
      if (v18 >= v17)
        v18 = v17;
      v34 = (void **)*a1;
      v35 = v18;
      v36 = v42;
      v37 = v43;
      v38 = 1285;
      llvm::Twine::str((llvm::Twine *)&v34, __p);
      v19 = (void **)__p[0];
      if (SHIBYTE(v31) >= 0)
        v19 = __p;
      v20 = (void *)(HIBYTE(v31) & 0x7F);
      if (SHIBYTE(v31) < 0)
        v20 = __p[1];
      v29[0] = v19;
      v29[1] = v20;
      v21 = v39;
      if (v41 >= 0)
        v21 = &v39;
      v22 = v41 & 0x7F;
      if (v41 < 0)
        v22 = v40;
      v28[0] = v21;
      v28[1] = v22;
      v38 = 257;
      sub_1C63ECC80((llvm::StringRef *)v29, a2, (uint64_t)&v34, a5);
      if (*a5)
      {
        v23 = 1;
      }
      else
      {
        v38 = 257;
        sub_1C63ECC80((llvm::StringRef *)v28, a2, (uint64_t)&v34, a5);
        v23 = *a5 != 0;
      }
      if (SHIBYTE(v31) < 0)
        operator delete(__p[0]);
      if (v41 < 0)
        operator delete(v39);
      if (v42 != (char *)&v44)
        free(v42);
      if (!v23)
        goto LABEL_41;
      return;
    }
    v45 = 257;
    sub_1C63ECC80((llvm::StringRef *)a1, a2, (uint64_t)&v42, a5);
    if (*a5)
      return;
    v45 = 257;
    goto LABEL_46;
  }
  v24 = a1[1];
  if (v24 >= (unint64_t)v12 - 1)
    v24 = v12 - 1;
  v34 = (void **)*a1;
  v35 = v24;
  v45 = 257;
  v25 = (llvm::StringRef *)&v34;
  v26 = a5;
  v27 = a2;
LABEL_40:
  sub_1C63ECC80(v25, v27, (uint64_t)&v42, v26);
  if (!*a5)
    goto LABEL_41;
}

void sub_1C61209E0(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  _QWORD *v5;
  _WORD *v6;
  void *v7;
  char v8;
  uint64_t v9[4];
  __int16 v10;
  std::string __p;

  v5 = (_QWORD *)(a1 + 16);
  v6 = (_WORD *)(a2 + 4);
  sub_1C611EC40((_QWORD *)(a1 + 16), *(_WORD *)(a2 + 4), (unint64_t)&off_1E81B08C0, 12, &__p);
  v9[0] = (uint64_t)"MemberCount";
  v10 = 259;
  sub_1C63F132C((uint64_t)v5, v6 - 1, (uint64_t)v9, a3);
  if (!*a3)
  {
    std::operator+<char>();
    v10 = 260;
    v9[0] = (uint64_t)&v7;
    sub_1C63F16AC((uint64_t)v5, v6, (uint64_t)v9, a3);
    if (v8 < 0)
      operator delete(v7);
    if (!*a3)
    {
      v9[0] = (uint64_t)"FieldList";
      v10 = 259;
      sub_1C611ABF4(v5, (unsigned int *)(a2 + 6), v9, a3);
      if (!*a3)
      {
        v9[0] = (uint64_t)"SizeOf";
        v10 = 259;
        sub_1C611ADF0(v5, (uint64_t *)(a2 + 48), (uint64_t)v9, a3);
        if (!*a3)
        {
          sub_1C61206C4((size_t *)(a2 + 16), (uint64_t)v5, (size_t *)(a2 + 32), (*(unsigned __int16 *)(a2 + 4) >> 9) & 1, a3);
          if (!*a3)
            *a3 = 0;
        }
      }
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1C6120B54(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  _QWORD *v5;
  _WORD *v6;
  void *v7;
  char v8;
  uint64_t v9[4];
  __int16 v10;
  std::string __p;

  v5 = (_QWORD *)(a1 + 16);
  v6 = (_WORD *)(a2 + 4);
  sub_1C611EC40((_QWORD *)(a1 + 16), *(_WORD *)(a2 + 4), (unint64_t)&off_1E81B08C0, 12, &__p);
  v9[0] = (uint64_t)"NumEnumerators";
  v10 = 259;
  sub_1C63F132C((uint64_t)v5, v6 - 1, (uint64_t)v9, a3);
  if (!*a3)
  {
    std::operator+<char>();
    v10 = 260;
    v9[0] = (uint64_t)&v7;
    sub_1C63F16AC((uint64_t)v5, v6, (uint64_t)v9, a3);
    if (v8 < 0)
      operator delete(v7);
    if (!*a3)
    {
      v9[0] = (uint64_t)"UnderlyingType";
      v10 = 259;
      sub_1C611ABF4(v5, (unsigned int *)(a2 + 48), v9, a3);
      if (!*a3)
      {
        v9[0] = (uint64_t)"FieldListType";
        v10 = 259;
        sub_1C611ABF4(v5, (unsigned int *)(a2 + 6), v9, a3);
        if (!*a3)
        {
          sub_1C61206C4((size_t *)(a2 + 16), (uint64_t)v5, (size_t *)(a2 + 32), (*(unsigned __int16 *)(a2 + 4) >> 9) & 1, a3);
          if (!*a3)
            *a3 = 0;
        }
      }
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
}

void sub_1C6120CC8(_QWORD *a1@<X0>, _QWORD *a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  unsigned int v6;
  char v7;
  unint64_t v8;
  _BYTE *v9;
  _BYTE *v10;
  unint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  unint64_t v14;
  size_t v15;
  char *v16;
  char *v17;
  _BYTE *v18;
  char v19;
  unsigned int v20;
  int v21;
  unint64_t v22;
  _BYTE *v23;
  unint64_t v24;
  _BYTE *v25;
  uint64_t v26;
  unint64_t v27;
  size_t v28;
  char *v29;
  char *v30;
  _BYTE *v31;
  _BYTE *v32;
  char v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unsigned __int8 v38;
  unsigned __int8 v39;
  _QWORD v40[4];
  __int16 v41;
  unsigned __int16 v42;

  v42 = 0;
  v5 = (uint64_t)(a1 + 2);
  if (a1[7] && !a1[9] && !a1[8])
  {
    v41 = 257;
    sub_1C63F132C((uint64_t)(a1 + 2), &v42, (uint64_t)v40, a3);
    if (*a3)
      return;
    if (v42)
    {
      v6 = 0;
      do
      {
        v39 = 0;
        v41 = 257;
        sub_1C63ECECC(v5, (char *)&v39, (uint64_t)v40, a3);
        if (*a3)
          return;
        v7 = v39 & 0xF;
        v9 = (_BYTE *)a2[4];
        v8 = a2[5];
        if ((unint64_t)v9 >= v8)
        {
          v11 = a2[3];
          v12 = &v9[-v11];
          v13 = (uint64_t)&v9[-v11 + 1];
          if (v13 < 0)
            goto LABEL_61;
          v14 = v8 - v11;
          if (2 * v14 > v13)
            v13 = 2 * v14;
          if (v14 >= 0x3FFFFFFFFFFFFFFFLL)
            v15 = 0x7FFFFFFFFFFFFFFFLL;
          else
            v15 = v13;
          if (v15)
            v16 = (char *)operator new(v15);
          else
            v16 = 0;
          v17 = &v12[(_QWORD)v16];
          v12[(_QWORD)v16] = v7;
          v10 = &v12[(_QWORD)v16 + 1];
          if (v9 != (_BYTE *)v11)
          {
            v18 = &v9[~v11];
            do
            {
              v19 = *--v9;
              (v18--)[(_QWORD)v16] = v19;
            }
            while (v9 != (_BYTE *)v11);
            v17 = v16;
          }
          a2[3] = v17;
          a2[4] = v10;
          a2[5] = &v16[v15];
          if (v11)
            operator delete((void *)v11);
        }
        else
        {
          *v9 = v7;
          v10 = v9 + 1;
        }
        a2[4] = v10;
        v20 = v42;
        if (v6 + 1 < v42)
        {
          v21 = v39 >> 4;
          v22 = a2[5];
          if ((unint64_t)v10 >= v22)
          {
            v24 = a2[3];
            v25 = &v10[-v24];
            v26 = (uint64_t)&v10[-v24 + 1];
            if (v26 < 0)
LABEL_61:
              abort();
            v27 = v22 - v24;
            if (2 * v27 > v26)
              v26 = 2 * v27;
            if (v27 >= 0x3FFFFFFFFFFFFFFFLL)
              v28 = 0x7FFFFFFFFFFFFFFFLL;
            else
              v28 = v26;
            if (v28)
              v29 = (char *)operator new(v28);
            else
              v29 = 0;
            v30 = &v25[(_QWORD)v29];
            v31 = &v25[(_QWORD)v29];
            *v31 = v21;
            v23 = v31 + 1;
            if (v10 != (_BYTE *)v24)
            {
              v32 = &v10[~v24];
              do
              {
                v33 = *--v10;
                (v32--)[(_QWORD)v29] = v33;
              }
              while (v10 != (_BYTE *)v24);
              v30 = v29;
            }
            a2[3] = v30;
            a2[4] = v23;
            a2[5] = &v29[v28];
            if (v24)
            {
              operator delete((void *)v24);
              v20 = v42;
            }
          }
          else
          {
            *v10 = v21;
            v23 = v10 + 1;
          }
          a2[4] = v23;
        }
        v6 = (unsigned __int16)(v6 + 2);
      }
      while (v6 < v20);
    }
LABEL_59:
    *a3 = 0;
    return;
  }
  v34 = a2[2];
  if (v34)
    v35 = a2[2];
  else
    v35 = a2[4] - a2[3];
  if (v34)
    v36 = a2[1];
  else
    v36 = a2[3];
  v42 = v35;
  v40[0] = "VFEntryCount";
  v41 = 259;
  sub_1C63F132C((uint64_t)(a1 + 2), &v42, (uint64_t)v40, a3);
  if (*a3)
    return;
  if (!v35)
    goto LABEL_59;
  v37 = 0;
  while (1)
  {
    v38 = 16 * *(_BYTE *)(v36 + v37);
    v39 = v38;
    if (v37 + 1 < v35)
      v39 = *(_BYTE *)(v36 + v37 + 1) | v38;
    v41 = 257;
    sub_1C63ECECC(v5, (char *)&v39, (uint64_t)v40, a3);
    if (*a3)
      break;
    v37 += 2;
    if (v37 >= v35)
      goto LABEL_59;
  }
}

void sub_1C6120FCC(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  _OWORD *v23;
  llvm::StringRef *v24;
  llvm::StringRef *v25;
  _OWORD *__p;
  const char *v27;
  __int16 v28;
  unsigned int v29;
  __int128 v30;
  uint64_t v31[4];
  __int16 v32;

  v6 = (_QWORD *)(a1 + 16);
  v31[0] = (uint64_t)"CompleteClass";
  v32 = 259;
  sub_1C611ABF4((_QWORD *)(a1 + 16), (unsigned int *)(a2 + 2), v31, a3);
  if (*a3)
    return;
  v31[0] = (uint64_t)"OverriddenVFTable";
  v32 = 259;
  sub_1C611ABF4(v6, (unsigned int *)(a2 + 6), v31, a3);
  if (*a3)
    return;
  v31[0] = (uint64_t)"VFPtrOffset";
  v32 = 259;
  sub_1C63F1220((uint64_t)v6, (unsigned int *)(a2 + 12), (uint64_t)v31, a3);
  if (*a3)
    return;
  v29 = 0;
  if (!*(_QWORD *)(a1 + 56) || *(_QWORD *)(a1 + 72) || *(_QWORD *)(a1 + 64))
  {
    v7 = *(_QWORD *)(a2 + 16);
    v8 = *(_QWORD *)(a2 + 24);
    if (v7 != v8)
    {
      v9 = 0;
      do
      {
        v9 += *(_DWORD *)(v7 + 8) + 1;
        v7 += 16;
      }
      while (v7 != v8);
      v29 = v9;
    }
  }
  v32 = 257;
  sub_1C63F1220((uint64_t)v6, &v29, (uint64_t)v31, a3);
  if (*a3)
    return;
  v27 = "VFTableName";
  v28 = 259;
  sub_1C63EC294(v6, (uint64_t)&v27);
  if (*(_QWORD *)(a1 + 72))
  {
    if (!*(_QWORD *)(a1 + 56) && !*(_QWORD *)(a1 + 64))
      goto LABEL_48;
LABEL_19:
    v30 = 0uLL;
    while (1)
    {
      v10 = *(_QWORD *)(a1 + 56);
      if (*(_BYTE *)(v10 + 48))
      {
        v11 = *(_QWORD *)(v10 + 40);
      }
      else
      {
        v12 = *(_QWORD *)(v10 + 24);
        v11 = v12 ? (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12) - *(_QWORD *)(v10 + 32) : 0;
      }
      if (v11 == *(_QWORD *)(v10 + 56)
        || llvm::BinaryStreamReader::peek(*(llvm::BinaryStreamReader **)(a1 + 56)) > 0xEF)
      {
        break;
      }
      v31[0] = (uint64_t)"MethodName";
      v32 = 259;
      sub_1C63ECC80((llvm::StringRef *)&v30, (uint64_t)v6, (uint64_t)v31, a3);
      if (*a3)
        return;
      v13 = *(_QWORD *)(a2 + 32);
      __p = *(_OWORD **)(a2 + 24);
      if ((unint64_t)__p >= v13)
      {
        v15 = *(_OWORD **)(a2 + 16);
        v16 = __p - v15;
        v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 60)
          abort();
        v18 = v13 - (_QWORD)v15;
        if (v18 >> 3 > v17)
          v17 = v18 >> 3;
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0)
          v19 = 0xFFFFFFFFFFFFFFFLL;
        else
          v19 = v17;
        if (v19)
        {
          if (v19 >> 60)
            sub_1C4764EE4();
          v20 = (char *)operator new(16 * v19);
        }
        else
        {
          v20 = 0;
        }
        v21 = &v20[16 * v16];
        *(_OWORD *)v21 = v30;
        if (__p == v15)
        {
          v22 = &v20[16 * v16];
        }
        else
        {
          v22 = &v20[16 * v16];
          v23 = __p;
          do
          {
            *((_OWORD *)v22 - 1) = *(v23 - 1);
            v22 -= 16;
            --v23;
          }
          while (v23 != v15);
          __p = *(_OWORD **)(a2 + 16);
        }
        v14 = v21 + 16;
        *(_QWORD *)(a2 + 16) = v22;
        *(_QWORD *)(a2 + 24) = v21 + 16;
        *(_QWORD *)(a2 + 32) = &v20[16 * v19];
        if (__p)
          operator delete(__p);
      }
      else
      {
        *__p = v30;
        v14 = __p + 1;
      }
      *(_QWORD *)(a2 + 24) = v14;
    }
    goto LABEL_51;
  }
  if (!*(_QWORD *)(a1 + 64) || *(_QWORD *)(a1 + 56))
    goto LABEL_19;
LABEL_48:
  v25 = *(llvm::StringRef **)(a2 + 16);
  v24 = *(llvm::StringRef **)(a2 + 24);
  if (v25 == v24)
  {
LABEL_51:
    *a3 = 0;
    return;
  }
  while (1)
  {
    v31[0] = (uint64_t)"MethodName";
    v32 = 259;
    sub_1C63ECC80(v25, (uint64_t)v6, (uint64_t)v31, a3);
    if (*a3)
      break;
    v25 = (llvm::StringRef *)((char *)v25 + 16);
    if (v25 == v24)
      goto LABEL_51;
  }
}

void sub_1C6121334(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  unsigned int v10;
  int v11;
  unsigned int v12;
  __int16 v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int *v19;
  uint64_t v20;
  int v21;
  unsigned int v22;
  unint64_t v23;
  const char *v24;
  __int16 v25;
  unsigned int v26;
  unsigned __int16 v27;
  uint64_t v28[4];
  __int16 v29;

  v6 = (_QWORD *)(a1 + 16);
  v24 = "NumArgs";
  v25 = 259;
  v27 = 0;
  if (*(_QWORD *)(a1 + 72))
  {
    v7 = *(_QWORD *)(a1 + 56);
    if (v7)
      goto LABEL_28;
    if (*(_QWORD *)(a1 + 64))
    {
      v7 = 0;
      goto LABEL_28;
    }
    v17 = *(unsigned __int16 *)(a2 + 16);
    sub_1C63EC294(v6, (uint64_t)&v24);
    (*(void (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 72) + 8))(*(_QWORD *)(a1 + 72), v17, 2);
    if (*(_QWORD *)(a1 + 72) && !*(_QWORD *)(a1 + 56) && !*(_QWORD *)(a1 + 64))
      *(_QWORD *)(a1 + 80) += 2;
    v18 = *(unsigned int *)(a2 + 16);
    if (!(_DWORD)v18)
      goto LABEL_35;
    v19 = *(unsigned int **)(a2 + 8);
    v20 = 4 * v18;
    while (1)
    {
      v28[0] = (uint64_t)"Argument";
      v29 = 259;
      sub_1C611ABF4(v6, v19, v28, a3);
      if (*a3)
        break;
      ++v19;
      v20 -= 4;
      if (!v20)
        goto LABEL_35;
    }
  }
  else
  {
    v7 = *(_QWORD *)(a1 + 56);
    v8 = *(_QWORD *)(a1 + 64);
    if (v8)
      v9 = v7 == 0;
    else
      v9 = 0;
    if (!v9)
    {
LABEL_28:
      sub_1C62C8034(v7, &v27, a3);
      if (*a3)
        return;
      if (v27)
      {
        v21 = 0;
        do
        {
          v26 = 0;
          v28[0] = (uint64_t)"Argument";
          v29 = 259;
          sub_1C611ABF4(v6, &v26, v28, a3);
          if (*a3)
            return;
          v22 = v26;
          v23 = *(unsigned int *)(a2 + 16);
          if (v23 >= *(unsigned int *)(a2 + 20))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 8, a2 + 24, v23 + 1, 4);
            v23 = *(unsigned int *)(a2 + 16);
          }
          *(_DWORD *)(*(_QWORD *)(a2 + 8) + 4 * v23) = v22;
          ++*(_DWORD *)(a2 + 16);
        }
        while (++v21 < v27);
      }
LABEL_35:
      *a3 = 0;
      return;
    }
    v10 = *(unsigned __int16 *)(a2 + 16);
    v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v8 + 24) + 16))(*(_QWORD *)(v8 + 24));
    v12 = bswap32(v10) >> 16;
    if ((v11 - 1) >= 2)
      v13 = v12;
    else
      v13 = v10;
    LOWORD(v28[0]) = v13;
    llvm::BinaryStreamWriter::writeBytes(v8, (uint64_t)v28, 2, a3);
    if (*a3)
      return;
    v14 = *(unsigned int *)(a2 + 16);
    if (!(_DWORD)v14)
      goto LABEL_35;
    v15 = *(unsigned int **)(a2 + 8);
    v16 = 4 * v14;
    while (1)
    {
      v28[0] = (uint64_t)"Argument";
      v29 = 259;
      sub_1C611ABF4(v6, v15, v28, a3);
      if (*a3)
        break;
      ++v15;
      v16 -= 4;
      if (!v16)
        goto LABEL_35;
    }
  }
}

void sub_1C61215B0(uint64_t a1@<X0>, _QWORD *a2@<X2>, uint64_t *a3@<X8>)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  __int128 v12;
  _OWORD *v13;
  char *v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  char *v19;
  __int128 v20;
  char *v21;
  char *v22;
  __int128 v23;
  uint64_t v24;
  uint64_t v25;
  const char *v26;
  __int16 v27;
  char v28;
  __int128 v29;
  __int128 v30;

  v6 = (_QWORD *)(a1 + 16);
  v28 = 1;
  v26 = "Method";
  v27 = 259;
  sub_1C63EC294((_QWORD *)(a1 + 16), (uint64_t)&v26);
  if (*(_QWORD *)(a1 + 72))
  {
    if (!*(_QWORD *)(a1 + 56) && !*(_QWORD *)(a1 + 64))
      goto LABEL_34;
  }
  else if (*(_QWORD *)(a1 + 64) && !*(_QWORD *)(a1 + 56))
  {
LABEL_34:
    v25 = a2[1];
    v24 = a2[2];
    while (v25 != v24)
    {
      sub_1C61223F4(a3, &v28, v6, v25);
      if (*a3)
        return;
      v25 += 32;
    }
    goto LABEL_38;
  }
  *(_DWORD *)((char *)&v29 + 2) = 0;
  WORD3(v29) = 0;
  DWORD2(v29) = 0;
  v30 = 0uLL;
  while (1)
  {
    v7 = *(_QWORD *)(a1 + 56);
    if (*(_BYTE *)(v7 + 48))
    {
      v8 = *(_QWORD *)(v7 + 40);
    }
    else
    {
      v9 = *(_QWORD *)(v7 + 24);
      v8 = v9 ? (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 40))(v9) - *(_QWORD *)(v7 + 32) : 0;
    }
    if (v8 == *(_QWORD *)(v7 + 56)
      || llvm::BinaryStreamReader::peek(*(llvm::BinaryStreamReader **)(a1 + 56)) > 0xEF)
    {
      break;
    }
    sub_1C61223F4(a3, &v28, v6, (uint64_t)&v29);
    if (*a3)
      return;
    v11 = (char *)a2[2];
    v10 = a2[3];
    if ((unint64_t)v11 >= v10)
    {
      v14 = (char *)a2[1];
      v15 = (v11 - v14) >> 5;
      v16 = v15 + 1;
      if ((unint64_t)(v15 + 1) >> 59)
        abort();
      v17 = v10 - (_QWORD)v14;
      if (v17 >> 4 > v16)
        v16 = v17 >> 4;
      if ((unint64_t)v17 >= 0x7FFFFFFFFFFFFFE0)
        v18 = 0x7FFFFFFFFFFFFFFLL;
      else
        v18 = v16;
      if (v18)
      {
        if (v18 >> 59)
          sub_1C4764EE4();
        v19 = (char *)operator new(32 * v18);
      }
      else
      {
        v19 = 0;
      }
      v20 = v30;
      v21 = &v19[32 * v15];
      *(_OWORD *)v21 = v29;
      *((_OWORD *)v21 + 1) = v20;
      v22 = v21;
      if (v11 != v14)
      {
        do
        {
          v23 = *((_OWORD *)v11 - 1);
          *((_OWORD *)v22 - 2) = *((_OWORD *)v11 - 2);
          *((_OWORD *)v22 - 1) = v23;
          v22 -= 32;
          v11 -= 32;
        }
        while (v11 != v14);
        v11 = (char *)a2[1];
      }
      v13 = v21 + 32;
      a2[1] = v22;
      a2[2] = v21 + 32;
      a2[3] = &v19[32 * v18];
      if (v11)
        operator delete(v11);
    }
    else
    {
      v12 = v30;
      *(_OWORD *)v11 = v29;
      *((_OWORD *)v11 + 1) = v12;
      v13 = v11 + 32;
    }
    a2[2] = v13;
  }
LABEL_38:
  *a3 = 0;
}

void sub_1C61217D8(_QWORD *a1@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  _WORD *v5;
  BOOL v6;
  uint64_t v8;
  char **v9;
  size_t v10;
  void **v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  void *__p;
  char v16;
  void **p_p;
  __int16 v18;
  void *__dst[2];
  unint64_t v20;

  v5 = (_WORD *)(a2 + 2);
  if (a1[9])
    v6 = a1[7] == 0;
  else
    v6 = 0;
  if (!v6 || a1[8] != 0)
  {
LABEL_12:
    v10 = 0;
    HIBYTE(v20) = 0;
    v11 = __dst;
    goto LABEL_21;
  }
  v8 = 0;
  while (1)
  {
    v9 = &(&off_1E81B1608)[v8];
    if (LOWORD((&off_1E81B1608)[v8 + 4]) == *(unsigned __int16 *)(a2 + 2))
      break;
    v8 += 5;
    if (v8 == 10)
      goto LABEL_12;
  }
  v10 = (size_t)v9[1];
  if (v10 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  v12 = *v9;
  if (v10 >= 0x17)
  {
    v13 = (v10 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v10 | 7) != 0x17)
      v13 = v10 | 7;
    v14 = v13 + 1;
    v11 = (void **)operator new(v13 + 1);
    __dst[1] = (void *)v10;
    v20 = v14 | 0x8000000000000000;
    __dst[0] = v11;
    goto LABEL_20;
  }
  HIBYTE(v20) = v9[1];
  v11 = __dst;
  if (v10)
LABEL_20:
    memmove(v11, v12, v10);
LABEL_21:
  *((_BYTE *)v11 + v10) = 0;
  std::operator+<char>();
  v18 = 260;
  p_p = &__p;
  sub_1C63F14B4(a3, (uint64_t)(a1 + 2), v5, (uint64_t)&p_p);
  if (v16 < 0)
    operator delete(__p);
  if (!*a3)
    *a3 = 0;
  if (SHIBYTE(v20) < 0)
    operator delete(__dst[0]);
}

void sub_1C612194C(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  _QWORD *v5;
  _WORD *v6;
  void *__p;
  char v8;
  uint64_t v9[4];
  __int16 v10;
  std::string __dst;

  v5 = (_QWORD *)(a1 + 16);
  v6 = (_WORD *)(a2 + 2);
  sub_1C6121A68(&__dst, (_QWORD *)(a1 + 16), *(_WORD *)(a2 + 2) & 3, 0, 0);
  std::operator+<char>();
  v10 = 260;
  v9[0] = (uint64_t)&__p;
  sub_1C63F132C((uint64_t)v5, v6, (uint64_t)v9, a3);
  if (v8 < 0)
    operator delete(__p);
  if (!*a3)
  {
    v9[0] = (uint64_t)"BaseType";
    v10 = 259;
    sub_1C611ABF4(v5, (unsigned int *)(a2 + 4), v9, a3);
    if (!*a3)
    {
      v9[0] = (uint64_t)"BaseOffset";
      v10 = 259;
      sub_1C611ADF0(v5, (uint64_t *)(a2 + 8), (uint64_t)v9, a3);
      if (!*a3)
        *a3 = 0;
    }
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_1C6121A68(std::string *__dst, _QWORD *a2, int a3, int a4, int a5)
{
  std::string *v5;
  BOOL v6;
  uint64_t v11;
  char **v12;
  size_t v13;
  __int128 *p_dsta;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  size_t v20;
  void *v21;
  const void *v22;
  uint64_t v23;
  uint64_t v24;
  std::string *p_p;
  std::string::size_type size;
  char *v27;
  uint64_t v28;
  BOOL v29;
  unint64_t v30;
  uint64_t v31;
  __int128 v32;
  unint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  char v37;
  const void *v38;
  std::string::size_type v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  std::string *v43;
  std::string::size_type v44;
  unint64_t v45;
  char *v46;
  BOOL v47;
  void **v48;
  std::string::size_type v49;
  std::string *v50;
  std::string::size_type v51;
  std::string *v52;
  std::string::size_type v53;
  void **v54;
  std::string::size_type v55;
  std::string::size_type v56;
  void **v57;
  std::string *v58;
  void **v59;
  std::string::size_type v60;
  const std::string::value_type *v61;
  std::string::size_type v62;
  std::string *v63;
  __int128 __dsta;
  unint64_t v65;
  void *v66[2];
  char v67;
  std::string v68;
  std::string v69;
  std::string v70;
  std::string __p;
  void *v72[2];
  _QWORD v73[2];
  void *v74;
  uint64_t v75;
  _QWORD v76[52];

  v5 = __dst;
  v76[50] = *MEMORY[0x1E0C80C00];
  if (a2[7])
    v6 = a2[5] == 0;
  else
    v6 = 0;
  if (!v6 || a2[6] != 0)
  {
    *((_BYTE *)&__dst->__r_.__value_.__s + 23) = 0;
    __dst->__r_.__value_.__s.__data_[0] = 0;
    return;
  }
  v11 = 0;
  while (1)
  {
    v12 = &(&off_1E81B0AA0)[v11];
    if (LOBYTE((&off_1E81B0AA0)[v11 + 4]) == a3)
      break;
    v11 += 5;
    if (v11 == 20)
    {
      v13 = 0;
      HIBYTE(v65) = 0;
      p_dsta = &__dsta;
      goto LABEL_21;
    }
  }
  v13 = (size_t)v12[1];
  if (v13 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_144;
  v15 = *v12;
  if (v13 >= 0x17)
  {
    v16 = (v13 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v13 | 7) != 0x17)
      v16 = v13 | 7;
    v17 = v16 + 1;
    p_dsta = (__int128 *)operator new(v16 + 1);
    *((_QWORD *)&__dsta + 1) = v13;
    v65 = v17 | 0x8000000000000000;
    *(_QWORD *)&__dsta = p_dsta;
    goto LABEL_20;
  }
  HIBYTE(v65) = v12[1];
  p_dsta = &__dsta;
  if (v13)
LABEL_20:
    memmove(p_dsta, v15, v13);
LABEL_21:
  *((_BYTE *)p_dsta + v13) = 0;
  if (SHIBYTE(v65) < 0)
  {
    sub_1C47EBC30(v5, (void *)__dsta, *((unint64_t *)&__dsta + 1));
    if (!a4)
      goto LABEL_48;
  }
  else
  {
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = __dsta;
    v5->__r_.__value_.__r.__words[2] = v65;
    if (!a4)
      goto LABEL_48;
  }
  if (!a2[7] || a2[5] || (v18 = a2[6]) != 0)
  {
LABEL_30:
    v20 = 0;
    HIBYTE(v76[0]) = 0;
    v21 = &v74;
    goto LABEL_39;
  }
  while (1)
  {
    v19 = (char *)&off_1E81B0C08 + v18;
    if (*(unsigned __int16 *)((char *)&off_1E81B0C08 + v18 + 32) == a4)
      break;
    v18 += 40;
    if (v18 == 280)
      goto LABEL_30;
  }
  v20 = *((_QWORD *)v19 + 1);
  if (v20 > 0x7FFFFFFFFFFFFFF7)
LABEL_144:
    abort();
  v22 = *(const void **)v19;
  if (v20 >= 0x17)
  {
    v23 = (v20 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v20 | 7) != 0x17)
      v23 = v20 | 7;
    v24 = v23 + 1;
    v21 = operator new(v23 + 1);
    v75 = v20;
    v76[0] = v24 | 0x8000000000000000;
    v74 = v21;
    goto LABEL_38;
  }
  HIBYTE(v76[0]) = *((_QWORD *)v19 + 1);
  v21 = &v74;
  if (v20)
LABEL_38:
    memmove(v21, v22, v20);
LABEL_39:
  *((_BYTE *)v21 + v20) = 0;
  std::operator+<char>();
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    p_p = &__p;
  else
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
  else
    size = __p.__r_.__value_.__l.__size_;
  std::string::append(v5, (const std::string::value_type *)p_p, size);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if ((SHIBYTE(v76[0]) & 0x80000000) == 0)
  {
LABEL_48:
    if (!a5)
      goto LABEL_141;
    goto LABEL_49;
  }
  operator delete(v74);
  if (!a5)
    goto LABEL_141;
LABEL_49:
  if (!a2[7] || a2[5] || (v27 = (char *)a2[6]) != 0)
  {
    *((_BYTE *)&v70.__r_.__value_.__s + 23) = 0;
    v70.__r_.__value_.__s.__data_[0] = 0;
    goto LABEL_131;
  }
  v28 = 0;
  v74 = v76;
  v75 = 0xA00000000;
  do
  {
    if (LOWORD((&off_1E81B0B40)[v28 + 4]))
      v29 = (unsigned __int16)(LOWORD((&off_1E81B0B40)[v28 + 4]) & a5) == LOWORD((&off_1E81B0B40)[v28 + 4]);
    else
      v29 = 0;
    if (v29)
    {
      v30 = sub_1C4A0EA78((uint64_t)&v74, (unint64_t)&(&off_1E81B0B40)[v28]);
      v27 = (char *)v74 + 40 * v75;
      v31 = *(_QWORD *)(v30 + 32);
      v32 = *(_OWORD *)(v30 + 16);
      *(_OWORD *)v27 = *(_OWORD *)v30;
      *((_OWORD *)v27 + 1) = v32;
      *((_QWORD *)v27 + 4) = v31;
      LODWORD(v27) = v75 + 1;
      LODWORD(v75) = v75 + 1;
    }
    v28 += 5;
  }
  while (v28 != 25);
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)sub_1C61228DC;
  v33 = 126 - 2 * __clz(v27);
  if ((_DWORD)v27)
    v34 = v33;
  else
    v34 = 0;
  sub_1C612293C((uint64_t)v74, (unint64_t)v74 + 40 * v27, (uint64_t (**)(__int128 *, __int128 *))&__p, v34, 1);
  memset(&__p, 0, sizeof(__p));
  if (!(_DWORD)v75)
  {
LABEL_126:
    v70 = __p;
    memset(&__p, 0, sizeof(__p));
    goto LABEL_127;
  }
  v63 = v5;
  v35 = (char *)v74;
  v36 = (char *)v74 + 40 * v75;
  v37 = 1;
  do
  {
    if ((v37 & 1) == 0)
      std::string::append(&__p, " | ");
    v38 = *(const void **)v35;
    if (!*(_QWORD *)v35)
    {
      memset(&v68, 0, sizeof(v68));
      goto LABEL_78;
    }
    v39 = *((_QWORD *)v35 + 1);
    if (v39 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_144;
    if (v39 >= 0x17)
    {
      v41 = (v39 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v39 | 7) != 0x17)
        v41 = v39 | 7;
      v42 = v41 + 1;
      v40 = operator new(v41 + 1);
      v68.__r_.__value_.__l.__size_ = v39;
      v68.__r_.__value_.__r.__words[2] = v42 | 0x8000000000000000;
      v68.__r_.__value_.__r.__words[0] = (std::string::size_type)v40;
    }
    else
    {
      *((_BYTE *)&v68.__r_.__value_.__s + 23) = *((_QWORD *)v35 + 1);
      v40 = &v68;
      if (!v39)
        goto LABEL_77;
    }
    memmove(v40, v38, v39);
LABEL_77:
    *((_BYTE *)v40 + v39) = 0;
LABEL_78:
    v43 = std::string::append(&v68, " (0x");
    v44 = v43->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v69.__r_.__value_.__l.__data_ = *(_OWORD *)&v43->__r_.__value_.__l.__data_;
    v69.__r_.__value_.__r.__words[2] = v44;
    v43->__r_.__value_.__l.__size_ = 0;
    v43->__r_.__value_.__r.__words[2] = 0;
    v43->__r_.__value_.__r.__words[0] = 0;
    v45 = *((unsigned __int16 *)v35 + 16);
    v46 = (char *)v73 + 1;
    if (*((_WORD *)v35 + 16))
    {
      do
      {
        *--v46 = a0123456789abcd_6[v45 & 0xF];
        v47 = v45 > 0xF;
        v45 >>= 4;
      }
      while (v47);
    }
    else
    {
      LOBYTE(v73[0]) = 48;
      v46 = (char *)v73;
    }
    sub_1C4E61270(v66, v46, (char *)v73 + 1, (char *)v73 + 1 - v46);
    if (v67 >= 0)
      v48 = v66;
    else
      v48 = (void **)v66[0];
    if (v67 >= 0)
      v49 = v67 & 0x7F;
    else
      v49 = (std::string::size_type)v66[1];
    v50 = std::string::append(&v69, (const std::string::value_type *)v48, v49);
    v51 = v50->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v70.__r_.__value_.__l.__data_ = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
    v70.__r_.__value_.__r.__words[2] = v51;
    v50->__r_.__value_.__l.__size_ = 0;
    v50->__r_.__value_.__r.__words[2] = 0;
    v50->__r_.__value_.__r.__words[0] = 0;
    v52 = std::string::append(&v70, ")");
    v53 = v52->__r_.__value_.__r.__words[2];
    *(_OWORD *)v72 = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
    v73[0] = v53;
    v52->__r_.__value_.__l.__size_ = 0;
    v52->__r_.__value_.__r.__words[2] = 0;
    v52->__r_.__value_.__r.__words[0] = 0;
    if (v73[0] >= 0)
      v54 = v72;
    else
      v54 = (void **)v72[0];
    if (v73[0] >= 0)
      v55 = HIBYTE(v73[0]) & 0x7F;
    else
      v55 = (std::string::size_type)v72[1];
    std::string::append(&__p, (const std::string::value_type *)v54, v55);
    if (SHIBYTE(v73[0]) < 0)
      operator delete(v72[0]);
    if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v70.__r_.__value_.__l.__data_);
    if (v67 < 0)
      operator delete(v66[0]);
    if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v69.__r_.__value_.__l.__data_);
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v68.__r_.__value_.__l.__data_);
    v37 = 0;
    v35 += 40;
  }
  while (v35 != v36);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v56 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  else
    v56 = __p.__r_.__value_.__l.__size_;
  v5 = v63;
  if (!v56)
    goto LABEL_126;
  *((_BYTE *)&v70.__r_.__value_.__s + 23) = 3;
  LODWORD(v70.__r_.__value_.__l.__data_) = 2107424;
  sub_1C484371C((uint64_t)v72, v56 + 2);
  if (v73[0] >= 0)
    v57 = v72;
  else
    v57 = (void **)v72[0];
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v58 = &__p;
  else
    v58 = (std::string *)__p.__r_.__value_.__r.__words[0];
  memmove(v57, v58, v56);
  strcpy((char *)v57 + v56, ")");
  if (v73[0] >= 0)
    v59 = v72;
  else
    v59 = (void **)v72[0];
  if (v73[0] >= 0)
    v60 = HIBYTE(v73[0]) & 0x7F;
  else
    v60 = (std::string::size_type)v72[1];
  std::string::append(&v70, (const std::string::value_type *)v59, v60);
  if (SHIBYTE(v73[0]) < 0)
    operator delete(v72[0]);
LABEL_127:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (v74 != v76)
    free(v74);
LABEL_131:
  std::operator+<char>();
  if (v76[0] >= 0)
    v61 = (const std::string::value_type *)&v74;
  else
    v61 = (const std::string::value_type *)v74;
  if (v76[0] >= 0)
    v62 = HIBYTE(v76[0]) & 0x7F;
  else
    v62 = v75;
  std::string::append(v5, v61, v62);
  if (SHIBYTE(v76[0]) < 0)
    operator delete(v74);
  if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v70.__r_.__value_.__l.__data_);
LABEL_141:
  if (SHIBYTE(v65) < 0)
    operator delete((void *)__dsta);
}

void sub_1C6122184(uint64_t a1@<X0>, _WORD *a2@<X2>, uint64_t *a3@<X8>)
{
  _QWORD *v5;
  _WORD *v6;
  void *__p;
  char v8;
  _QWORD v9[4];
  __int16 v10;
  std::string __dst;

  v5 = (_QWORD *)(a1 + 16);
  v6 = a2 + 1;
  sub_1C6121A68(&__dst, (_QWORD *)(a1 + 16), a2[1] & 3, 0, 0);
  std::operator+<char>();
  v10 = 260;
  v9[0] = &__p;
  sub_1C63F132C((uint64_t)v5, v6, (uint64_t)v9, a3);
  if (v8 < 0)
    operator delete(__p);
  if (!*a3)
  {
    v9[0] = "EnumValue";
    v10 = 259;
    sub_1C63ECB14((llvm::APInt *)(a2 + 4), v5, (uint64_t)v9, a3);
    if (!*a3)
    {
      v9[0] = "Name";
      v10 = 259;
      sub_1C63ECC80((llvm::StringRef *)(a2 + 12), (uint64_t)v5, (uint64_t)v9, a3);
      if (!*a3)
        *a3 = 0;
    }
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_1C61222A4(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  _QWORD *v5;
  _WORD *v6;
  void *__p;
  char v8;
  uint64_t v9[4];
  __int16 v10;
  std::string __dst;

  v5 = (_QWORD *)(a1 + 16);
  v6 = (_WORD *)(a2 + 2);
  sub_1C6121A68(&__dst, (_QWORD *)(a1 + 16), *(_WORD *)(a2 + 2) & 3, 0, 0);
  std::operator+<char>();
  v10 = 260;
  v9[0] = (uint64_t)&__p;
  sub_1C63F132C((uint64_t)v5, v6, (uint64_t)v9, a3);
  if (v8 < 0)
    operator delete(__p);
  if (!*a3)
  {
    v9[0] = (uint64_t)"Type";
    v10 = 259;
    sub_1C611ABF4(v5, (unsigned int *)(a2 + 4), v9, a3);
    if (!*a3)
    {
      v9[0] = (uint64_t)"FieldOffset";
      v10 = 259;
      sub_1C611ADF0(v5, (uint64_t *)(a2 + 8), (uint64_t)v9, a3);
      if (!*a3)
      {
        v9[0] = (uint64_t)"Name";
        v10 = 259;
        sub_1C63ECC80((llvm::StringRef *)(a2 + 16), (uint64_t)v5, (uint64_t)v9, a3);
        if (!*a3)
          *a3 = 0;
      }
    }
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_1C61223F4(uint64_t *a1, _BYTE *a2, _QWORD *a3, uint64_t a4)
{
  _WORD *v8;
  void *__p[2];
  char v10;
  uint64_t v11[4];
  __int16 v12;
  std::string __dst;

  v8 = (_WORD *)(a4 + 6);
  sub_1C6121A68(&__dst, a3, *(_WORD *)(a4 + 6) & 3, (*(unsigned __int16 *)(a4 + 6) >> 2) & 7, *(_WORD *)(a4 + 6) & 0xFFE0);
  std::operator+<char>();
  v12 = 260;
  v11[0] = (uint64_t)__p;
  sub_1C63F132C((uint64_t)a3, v8, (uint64_t)v11, a1);
  if (v10 < 0)
    operator delete(__p[0]);
  if (!*a1)
  {
    if (!*a2 || (LOWORD(__p[0]) = 0, v12 = 257, sub_1C63F132C((uint64_t)a3, __p, (uint64_t)v11, a1), !*a1))
    {
      v11[0] = (uint64_t)"Type";
      v12 = 259;
      sub_1C611ABF4(a3, (unsigned int *)(a4 + 2), v11, a1);
      if (!*a1)
      {
        if ((*v8 & 0x14) == 0x10)
        {
          v11[0] = (uint64_t)"VFTableOffset";
          v12 = 259;
          sub_1C63F1220((uint64_t)a3, (unsigned int *)(a4 + 8), (uint64_t)v11, a1);
          if (*a1)
            goto LABEL_13;
        }
        else if (a3[5] && !a3[7] && !a3[6])
        {
          *(_DWORD *)(a4 + 8) = -1;
        }
        if (*a2
          || (v11[0] = (uint64_t)"Name",
              v12 = 259,
              sub_1C63ECC80((llvm::StringRef *)(a4 + 16), (uint64_t)a3, (uint64_t)v11, a1),
              !*a1))
        {
          *a1 = 0;
        }
      }
    }
  }
LABEL_13:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_1C61225C0(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  _QWORD *v5;
  _WORD *v6;
  void *__p;
  char v8;
  uint64_t v9[4];
  __int16 v10;
  std::string __dst;

  v5 = (_QWORD *)(a1 + 16);
  v6 = (_WORD *)(a2 + 2);
  sub_1C6121A68(&__dst, (_QWORD *)(a1 + 16), *(_WORD *)(a2 + 2) & 3, 0, 0);
  std::operator+<char>();
  v10 = 260;
  v9[0] = (uint64_t)&__p;
  sub_1C63F132C((uint64_t)v5, v6, (uint64_t)v9, a3);
  if (v8 < 0)
    operator delete(__p);
  if (!*a3)
  {
    v9[0] = (uint64_t)"Type";
    v10 = 259;
    sub_1C611ABF4(v5, (unsigned int *)(a2 + 4), v9, a3);
    if (!*a3)
    {
      v9[0] = (uint64_t)"Name";
      v10 = 259;
      sub_1C63ECC80((llvm::StringRef *)(a2 + 8), (uint64_t)v5, (uint64_t)v9, a3);
      if (!*a3)
        *a3 = 0;
    }
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

void sub_1C61226E0(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  _QWORD *v5;
  _WORD *v6;
  void *__p;
  char v8;
  uint64_t v9[4];
  __int16 v10;
  std::string __dst;

  v5 = (_QWORD *)(a1 + 16);
  v6 = (_WORD *)(a2 + 2);
  sub_1C6121A68(&__dst, (_QWORD *)(a1 + 16), *(_WORD *)(a2 + 2) & 3, 0, 0);
  std::operator+<char>();
  v10 = 260;
  v9[0] = (uint64_t)&__p;
  sub_1C63F132C((uint64_t)v5, v6, (uint64_t)v9, a3);
  if (v8 < 0)
    operator delete(__p);
  if (!*a3)
  {
    v9[0] = (uint64_t)"BaseType";
    v10 = 259;
    sub_1C611ABF4(v5, (unsigned int *)(a2 + 4), v9, a3);
    if (!*a3)
    {
      v9[0] = (uint64_t)"VBPtrType";
      v10 = 259;
      sub_1C611ABF4(v5, (unsigned int *)(a2 + 8), v9, a3);
      if (!*a3)
      {
        v9[0] = (uint64_t)"VBPtrOffset";
        v10 = 259;
        sub_1C611ADF0(v5, (uint64_t *)(a2 + 16), (uint64_t)v9, a3);
        if (!*a3)
        {
          v9[0] = (uint64_t)"VBTableIndex";
          v10 = 259;
          sub_1C611ADF0(v5, (uint64_t *)(a2 + 24), (uint64_t)v9, a3);
          if (!*a3)
            *a3 = 0;
        }
      }
    }
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
}

_QWORD *sub_1C6122854(int *__src, size_t __n, _QWORD *a3)
{
  int v5[4];
  __int128 v6;
  uint64_t v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v6 = xmmword_1C85F4BB0;
  v7 = 0;
  llvm::MD5::update((int *)&v6, __src, __n);
  llvm::MD5::final((int *)&v6, v5);
  return llvm::MD5::stringifyResult((unsigned __int8 *)v5, a3);
}

BOOL sub_1C61228DC(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  size_t v4;
  int v5;
  int v6;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v3 >= v2)
    v4 = *(_QWORD *)(a1 + 8);
  else
    v4 = *(_QWORD *)(a2 + 8);
  if (v4 && (v5 = memcmp(*(const void **)a1, *(const void **)a2, v4)) != 0)
  {
    v6 = (v5 >> 31) | 1;
  }
  else
  {
    if (v2 < v3)
      v6 = -1;
    else
      v6 = 1;
    if (v2 == v3)
      v6 = 0;
  }
  return v6 == -1;
}

void sub_1C612293C(uint64_t a1, unint64_t a2, uint64_t (**a3)(__int128 *, __int128 *), uint64_t a4, char a5)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  unint64_t v26;
  __int128 *v27;
  unint64_t v28;
  __int128 *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  BOOL v41;
  BOOL v42;
  __int128 v43;
  __int128 v44;
  __int128 *v45;
  int v46;
  unint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 *v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 *v65;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  __int128 *v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  int64_t v79;
  int64_t v80;
  int64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  _OWORD *v94;
  uint64_t v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v121;
  __int128 *v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  __int128 v126;
  char v127;
  __int128 v128;
  __int128 v129;
  __int128 *v130;
  __int128 *v131;
  uint64_t v132;
  _OWORD *v133;
  __int128 v134;
  __int128 v135;
  uint64_t v136;
  __int128 v137;
  __int128 v138;
  uint64_t v139;

uint64_t sub_1C6123248(__int128 *a1, __int128 *a2, __int128 *a3, uint64_t (**a4)(__int128 *, __int128 *))
{
  char v8;
  uint64_t result;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int16 v13;
  __int128 v14;
  uint64_t v15;
  __int128 v16;
  __int128 v17;
  __int16 v18;
  __int128 v19;
  uint64_t v20;
  __int128 v21;
  __int128 v22;
  __int16 v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  __int128 v27;
  __int16 v28;
  __int128 v29;
  __int16 v30;
  __int128 v31;

  v8 = (*a4)(a2, a1);
  result = (*a4)(a3, a2);
  if ((v8 & 1) != 0)
  {
    if ((_DWORD)result)
    {
      v10 = *((_QWORD *)a1 + 4);
      v11 = *a1;
      v12 = a1[1];
      v13 = *((_WORD *)a3 + 16);
      v14 = a3[1];
      *a1 = *a3;
      a1[1] = v14;
      *((_WORD *)a1 + 16) = v13;
    }
    else
    {
      v25 = *((_QWORD *)a1 + 4);
      v26 = *a1;
      v27 = a1[1];
      v28 = *((_WORD *)a2 + 16);
      v29 = a2[1];
      *a1 = *a2;
      a1[1] = v29;
      *((_WORD *)a1 + 16) = v28;
      *a2 = v26;
      a2[1] = v27;
      *((_WORD *)a2 + 16) = v25;
      result = (*a4)(a3, a2);
      if (!(_DWORD)result)
        return result;
      v10 = *((_QWORD *)a2 + 4);
      v11 = *a2;
      v12 = a2[1];
      v30 = *((_WORD *)a3 + 16);
      v31 = a3[1];
      *a2 = *a3;
      a2[1] = v31;
      *((_WORD *)a2 + 16) = v30;
    }
    *a3 = v11;
    a3[1] = v12;
    *((_WORD *)a3 + 16) = v10;
  }
  else if ((_DWORD)result)
  {
    v15 = *((_QWORD *)a2 + 4);
    v16 = *a2;
    v17 = a2[1];
    v18 = *((_WORD *)a3 + 16);
    v19 = a3[1];
    *a2 = *a3;
    a2[1] = v19;
    *((_WORD *)a2 + 16) = v18;
    *a3 = v16;
    a3[1] = v17;
    *((_WORD *)a3 + 16) = v15;
    result = (*a4)(a2, a1);
    if ((_DWORD)result)
    {
      v20 = *((_QWORD *)a1 + 4);
      v21 = *a1;
      v22 = a1[1];
      v23 = *((_WORD *)a2 + 16);
      v24 = a2[1];
      *a1 = *a2;
      a1[1] = v24;
      *((_WORD *)a1 + 16) = v23;
      *a2 = v21;
      a2[1] = v22;
      *((_WORD *)a2 + 16) = v20;
    }
  }
  return result;
}

BOOL sub_1C6123380(uint64_t a1, uint64_t a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  unint64_t v6;
  _BOOL8 result;
  __int128 *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  __int16 v12;
  __int128 v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  v6 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = (__int128 *)(a2 - 40);
      if (!(*a3)((__int128 *)(a2 - 40), (__int128 *)a1))
        return 1;
      v9 = *(_QWORD *)(a1 + 32);
      v10 = *(_OWORD *)a1;
      v11 = *(_OWORD *)(a1 + 16);
      v12 = *(_WORD *)(a2 - 8);
      v13 = *(_OWORD *)(a2 - 24);
      *(_OWORD *)a1 = *v8;
      *(_OWORD *)(a1 + 16) = v13;
      *(_WORD *)(a1 + 32) = v12;
      *v8 = v10;
      *(_OWORD *)(a2 - 24) = v11;
      result = 1;
      *(_WORD *)(a2 - 8) = v9;
      return result;
    case 3uLL:
      sub_1C6123248((__int128 *)a1, (__int128 *)(a1 + 40), (__int128 *)(a2 - 40), a3);
      return 1;
    case 4uLL:
      sub_1C6123574(a1, a1 + 40, a1 + 80, a2 - 40, a3);
      return 1;
    case 5uLL:
      sub_1C612365C(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40, a3);
      return 1;
    default:
      v14 = (__int128 *)(a1 + 80);
      sub_1C6123248((__int128 *)a1, (__int128 *)(a1 + 40), (__int128 *)(a1 + 80), a3);
      v15 = a1 + 120;
      if (a1 + 120 == a2)
        return 1;
      v16 = 0;
      v17 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)((__int128 *)v15, v14))
    {
      v18 = *(_OWORD *)(v15 + 16);
      v24 = *(_OWORD *)v15;
      v25 = v18;
      v26 = *(_QWORD *)(v15 + 32);
      v19 = v16;
      while (1)
      {
        v20 = a1 + v19;
        v21 = *(_OWORD *)(a1 + v19 + 96);
        *(_OWORD *)(v20 + 120) = *(_OWORD *)(a1 + v19 + 80);
        *(_OWORD *)(v20 + 136) = v21;
        *(_WORD *)(v20 + 152) = *(_WORD *)(a1 + v19 + 112);
        if (v19 == -80)
          break;
        v19 -= 40;
        if (((*a3)(&v24, (__int128 *)(v20 + 40)) & 1) == 0)
        {
          v22 = a1 + v19 + 120;
          goto LABEL_12;
        }
      }
      v22 = a1;
LABEL_12:
      v23 = v25;
      *(_OWORD *)v22 = v24;
      *(_OWORD *)(v22 + 16) = v23;
      *(_WORD *)(v22 + 32) = v26;
      if (++v17 == 8)
        return v15 + 40 == a2;
    }
    v14 = (__int128 *)v15;
    v16 += 40;
    v15 += 40;
    if (v15 == a2)
      return 1;
  }
}

__n128 sub_1C6123574(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (**a5)(__int128 *, __int128 *))
{
  __n128 result;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  __int16 v14;
  __int128 v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int16 v19;
  __int128 v20;
  uint64_t v21;
  __int128 v22;
  __int16 v23;
  __int128 v24;

  sub_1C6123248((__int128 *)a1, (__int128 *)a2, (__int128 *)a3, a5);
  if ((*a5)((__int128 *)a4, (__int128 *)a3))
  {
    v11 = *(_QWORD *)(a3 + 32);
    v12 = *(_OWORD *)a3;
    v13 = *(_OWORD *)(a3 + 16);
    v14 = *(_WORD *)(a4 + 32);
    v15 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 16) = v15;
    *(_WORD *)(a3 + 32) = v14;
    *(_OWORD *)a4 = v12;
    *(_OWORD *)(a4 + 16) = v13;
    *(_WORD *)(a4 + 32) = v11;
    if ((*a5)((__int128 *)a3, (__int128 *)a2))
    {
      v16 = *(_QWORD *)(a2 + 32);
      v17 = *(_OWORD *)a2;
      v18 = *(_OWORD *)(a2 + 16);
      v19 = *(_WORD *)(a3 + 32);
      v20 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v20;
      *(_WORD *)(a2 + 32) = v19;
      *(_OWORD *)a3 = v17;
      *(_OWORD *)(a3 + 16) = v18;
      *(_WORD *)(a3 + 32) = v16;
      if ((*a5)((__int128 *)a2, (__int128 *)a1))
      {
        v21 = *(_QWORD *)(a1 + 32);
        result = *(__n128 *)a1;
        v22 = *(_OWORD *)(a1 + 16);
        v23 = *(_WORD *)(a2 + 32);
        v24 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v24;
        *(_WORD *)(a1 + 32) = v23;
        *(__n128 *)a2 = result;
        *(_OWORD *)(a2 + 16) = v22;
        *(_WORD *)(a2 + 32) = v21;
      }
    }
  }
  return result;
}

__n128 sub_1C612365C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t (**a6)(__int128 *, __int128 *))
{
  __n128 v12;
  __n128 result;
  uint64_t v14;
  __int128 v15;
  __int128 v16;
  __int16 v17;
  __int128 v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  __int16 v22;
  __int128 v23;
  uint64_t v24;
  __n128 v25;
  __int128 v26;
  __int16 v27;
  __int128 v28;
  uint64_t v29;
  __int128 v30;
  __int16 v31;
  __int128 v32;

  v12 = sub_1C6123574(a1, a2, a3, a4, a6);
  if (((unsigned int (*)(uint64_t, uint64_t, __n128))*a6)(a5, a4, v12))
  {
    v14 = *(_QWORD *)(a4 + 32);
    v15 = *(_OWORD *)a4;
    v16 = *(_OWORD *)(a4 + 16);
    v17 = *(_WORD *)(a5 + 32);
    v18 = *(_OWORD *)(a5 + 16);
    *(_OWORD *)a4 = *(_OWORD *)a5;
    *(_OWORD *)(a4 + 16) = v18;
    *(_WORD *)(a4 + 32) = v17;
    *(_OWORD *)a5 = v15;
    *(_OWORD *)(a5 + 16) = v16;
    *(_WORD *)(a5 + 32) = v14;
    if ((*a6)((__int128 *)a4, (__int128 *)a3))
    {
      v19 = *(_QWORD *)(a3 + 32);
      v20 = *(_OWORD *)a3;
      v21 = *(_OWORD *)(a3 + 16);
      v22 = *(_WORD *)(a4 + 32);
      v23 = *(_OWORD *)(a4 + 16);
      *(_OWORD *)a3 = *(_OWORD *)a4;
      *(_OWORD *)(a3 + 16) = v23;
      *(_WORD *)(a3 + 32) = v22;
      *(_OWORD *)a4 = v20;
      *(_OWORD *)(a4 + 16) = v21;
      *(_WORD *)(a4 + 32) = v19;
      if ((*a6)((__int128 *)a3, (__int128 *)a2))
      {
        v24 = *(_QWORD *)(a2 + 32);
        v25 = *(__n128 *)a2;
        v26 = *(_OWORD *)(a2 + 16);
        v27 = *(_WORD *)(a3 + 32);
        v28 = *(_OWORD *)(a3 + 16);
        *(_OWORD *)a2 = *(_OWORD *)a3;
        *(_OWORD *)(a2 + 16) = v28;
        *(_WORD *)(a2 + 32) = v27;
        *(__n128 *)a3 = v25;
        *(_OWORD *)(a3 + 16) = v26;
        *(_WORD *)(a3 + 32) = v24;
        if ((*a6)((__int128 *)a2, (__int128 *)a1))
        {
          v29 = *(_QWORD *)(a1 + 32);
          result = *(__n128 *)a1;
          v30 = *(_OWORD *)(a1 + 16);
          v31 = *(_WORD *)(a2 + 32);
          v32 = *(_OWORD *)(a2 + 16);
          *(_OWORD *)a1 = *(_OWORD *)a2;
          *(_OWORD *)(a1 + 16) = v32;
          *(_WORD *)(a1 + 32) = v31;
          *(__n128 *)a2 = result;
          *(_OWORD *)(a2 + 16) = v30;
          *(_WORD *)(a2 + 32) = v29;
        }
      }
    }
  }
  return result;
}

BOOL sub_1C6123784(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  size_t v4;
  int v5;
  int v6;

  v2 = *(_QWORD *)(a1 + 8);
  v3 = *(_QWORD *)(a2 + 8);
  if (v3 >= v2)
    v4 = *(_QWORD *)(a1 + 8);
  else
    v4 = *(_QWORD *)(a2 + 8);
  if (v4 && (v5 = memcmp(*(const void **)a1, *(const void **)a2, v4)) != 0)
  {
    v6 = (v5 >> 31) | 1;
  }
  else
  {
    if (v2 < v3)
      v6 = -1;
    else
      v6 = 1;
    if (v2 == v3)
      v6 = 0;
  }
  return v6 == -1;
}

void sub_1C61237E4(uint64_t a1, unint64_t a2, uint64_t (**a3)(__int128 *, __int128 *), uint64_t a4, char a5)
{
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  uint64_t v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  __int128 v24;
  __int128 v25;
  unint64_t v26;
  __int128 *v27;
  unint64_t v28;
  __int128 *v29;
  __int128 v30;
  __int128 v31;
  __int128 v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  __int128 v37;
  __int128 v38;
  __int128 v39;
  __int128 v40;
  BOOL v41;
  BOOL v42;
  __int128 v43;
  __int128 v44;
  __int128 *v45;
  int v46;
  unint64_t v47;
  __int128 v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 *v54;
  __int128 v55;
  __int128 v56;
  __int128 v57;
  __int128 v58;
  __int128 v59;
  __int128 v60;
  __int128 v61;
  __int128 v62;
  __int128 v63;
  __int128 v64;
  __int128 *v65;
  BOOL v67;
  uint64_t v68;
  uint64_t v69;
  __int128 *v70;
  __int128 v71;
  __int128 v72;
  uint64_t v73;
  uint64_t v74;
  __int128 v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  int64_t v79;
  int64_t v80;
  int64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  __int128 v88;
  __int128 v89;
  uint64_t v90;
  uint64_t v91;
  __int128 v92;
  __int128 v93;
  _OWORD *v94;
  uint64_t v95;
  __int128 v96;
  __int128 v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  __int128 v119;
  uint64_t v121;
  __int128 *v122;
  __int128 v123;
  __int128 v124;
  uint64_t v125;
  __int128 v126;
  char v127;
  __int128 v128;
  __int128 v129;
  __int128 *v130;
  __int128 *v131;
  uint64_t v132;
  _OWORD *v133;
  __int128 v134;
  __int128 v135;
  uint64_t v136;
  __int128 v137;
  __int128 v138;
  uint64_t v139;

BOOL sub_1C61240F0(uint64_t a1, uint64_t a2, uint64_t (**a3)(__int128 *, __int128 *))
{
  unint64_t v6;
  _BOOL8 result;
  __int128 *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  char v12;
  __int128 v13;
  __int128 *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;

  v6 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v6)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = (__int128 *)(a2 - 40);
      if (!(*a3)((__int128 *)(a2 - 40), (__int128 *)a1))
        return 1;
      v9 = *(_QWORD *)(a1 + 32);
      v10 = *(_OWORD *)a1;
      v11 = *(_OWORD *)(a1 + 16);
      v12 = *(_BYTE *)(a2 - 8);
      v13 = *(_OWORD *)(a2 - 24);
      *(_OWORD *)a1 = *v8;
      *(_OWORD *)(a1 + 16) = v13;
      *(_BYTE *)(a1 + 32) = v12;
      *v8 = v10;
      *(_OWORD *)(a2 - 24) = v11;
      result = 1;
      *(_BYTE *)(a2 - 8) = v9;
      return result;
    case 3uLL:
      sub_1C54A113C((__int128 *)a1, (__int128 *)(a1 + 40), (__int128 *)(a2 - 40), a3);
      return 1;
    case 4uLL:
      sub_1C54A1468(a1, a1 + 40, a1 + 80, a2 - 40, a3);
      return 1;
    case 5uLL:
      sub_1C54A1550(a1, a1 + 40, a1 + 80, a1 + 120, a2 - 40, a3);
      return 1;
    default:
      v14 = (__int128 *)(a1 + 80);
      sub_1C54A113C((__int128 *)a1, (__int128 *)(a1 + 40), (__int128 *)(a1 + 80), a3);
      v15 = a1 + 120;
      if (a1 + 120 == a2)
        return 1;
      v16 = 0;
      v17 = 0;
      break;
  }
  while (1)
  {
    if ((*a3)((__int128 *)v15, v14))
    {
      v18 = *(_OWORD *)(v15 + 16);
      v24 = *(_OWORD *)v15;
      v25 = v18;
      v26 = *(_QWORD *)(v15 + 32);
      v19 = v16;
      while (1)
      {
        v20 = a1 + v19;
        v21 = *(_OWORD *)(a1 + v19 + 96);
        *(_OWORD *)(v20 + 120) = *(_OWORD *)(a1 + v19 + 80);
        *(_OWORD *)(v20 + 136) = v21;
        *(_BYTE *)(v20 + 152) = *(_BYTE *)(a1 + v19 + 112);
        if (v19 == -80)
          break;
        v19 -= 40;
        if (((*a3)(&v24, (__int128 *)(v20 + 40)) & 1) == 0)
        {
          v22 = a1 + v19 + 120;
          goto LABEL_12;
        }
      }
      v22 = a1;
LABEL_12:
      v23 = v25;
      *(_OWORD *)v22 = v24;
      *(_OWORD *)(v22 + 16) = v23;
      *(_BYTE *)(v22 + 32) = v26;
      if (++v17 == 8)
        return v15 + 40 == a2;
    }
    v14 = (__int128 *)v15;
    v16 += 40;
    v15 += 40;
    if (v15 == a2)
      return 1;
  }
}

void sub_1C61242E4()
{
  dword_1ED82C2F8 = 7;
}

const char *sub_1C61242F4(uint64_t a1, unsigned int a2)
{
  uint64_t v3;
  const char *result;
  int v5;
  void **v6;
  size_t v7;
  _BYTE *v8;
  _BYTE *v9;
  void **v10;
  _QWORD *v11;
  void *__p[2];
  char v13;

  if ((a2 & 0xFFFFF000) == 0)
    return sub_1C611D8FC(a2);
  v3 = (a2 & 0x7FFFFFFF) - 4096;
  result = *(const char **)(*(_QWORD *)(a1 + 112) + 16 * v3);
  if (!result)
  {
    sub_1C63EEDE4(a1, a2, (uint64_t)__p);
    v5 = v13;
    v6 = (void **)__p[0];
    if (v13 >= 0)
      v7 = v13 & 0x7F;
    else
      v7 = (size_t)__p[1];
    v8 = (_BYTE *)sub_1C484358C(*(_QWORD *)(a1 + 104), v7 + 1, 0);
    v9 = v8;
    if (v7)
    {
      if (v5 >= 0)
        v10 = __p;
      else
        v10 = v6;
      memcpy(v8, v10, v7);
    }
    v9[v7] = 0;
    if (v13 < 0)
      operator delete(__p[0]);
    v11 = (_QWORD *)(*(_QWORD *)(a1 + 112) + 16 * v3);
    *v11 = v9;
    v11[1] = v7;
    return *(const char **)(*(_QWORD *)(a1 + 112) + 16 * v3);
  }
  return result;
}

llvm *sub_1C61243EC(llvm *a1)
{
  llvm *v2;
  llvm *v3;
  llvm *result;
  _BYTE *v5;

  v2 = llvm::dbgs(a1);
  v3 = llvm::LLT::print(a1, v2);
  result = llvm::dbgs(v3);
  v5 = (_BYTE *)*((_QWORD *)result + 4);
  if ((unint64_t)v5 >= *((_QWORD *)result + 3))
    return llvm::raw_ostream::write(result, 10);
  *((_QWORD *)result + 4) = v5 + 1;
  *v5 = 10;
  return result;
}

void LLVMInitializeAGX1AsmPrinter()
{
  qword_1ED82C380 = (uint64_t)sub_1C61249B4;
}

uint64_t sub_1C6124468(uint64_t a1, uint64_t a2)
{
  uint64_t v3;

  v3 = sub_1C5FEB0DC(a1, a2);
  llvm::GPUMetadataEmitter::doInitialization((llvm::GPUMetadataEmitter *)(a1 + 928));
  return v3;
}

uint64_t sub_1C6124498(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;

  v3 = sub_1C5FF1550(a1, a2);
  llvm::GPUMetadataEmitter::doFinalization((llvm::GPUMetadataEmitter *)(a1 + 928));
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  v4 = *(_QWORD *)(a1 + 264);
  *(_DWORD *)(v4 + 144) = 0;
  *(_BYTE *)(v4 + 148) = 0;
  return v3;
}

void sub_1C61244F0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5[2];
  _QWORD v6[2];
  void *v7;
  uint64_t v8;
  _BYTE v9[136];
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v5[0] = *(_QWORD *)(a1 + 264);
  v5[1] = a1;
  v6[0] = 0;
  v6[1] = 0;
  v7 = v9;
  v8 = 0x800000000;
  v9[128] = 0;
  sub_1C4832F00(v5, a2, (uint64_t)v6);
  v3 = *(_QWORD *)(a1 + 272);
  v4 = sub_1C5FEB0D0(a1);
  (*(void (**)(uint64_t, _QWORD *, uint64_t))(*(_QWORD *)v3 + 1184))(v3, v6, v4);
  if (v7 != v9)
    free(v7);
}

uint64_t sub_1C61245B0(uint64_t a1, llvm::MachineFunction *a2)
{
  uint64_t v4;
  _QWORD **v5;
  uint64_t AnalysisIfAvailable;
  const llvm::MachineLoopInfo *v7;

  (*(void (**)(uint64_t))(*(_QWORD *)a1 + 184))(a1);
  sub_1C5FEDEA0(a1);
  v4 = *((_QWORD *)a2 + 7);
  v5 = (_QWORD **)*((_QWORD *)a2 + 43);
  ((void (*)(_QWORD **, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t))(*v5)[1])(v5, 11, *(unsigned int *)(v4 + 48), 1, 0, 1, 3);
  (*(void (**)(_QWORD *, _QWORD, _QWORD))(*v5[1] + 96))(v5[1], *(_QWORD *)a2, *(unsigned int *)(v4 + 48));
  (*(void (**)(_QWORD *, _QWORD, _QWORD))(*v5[1] + 112))(v5[1], *(_QWORD *)a2, 0);
  AnalysisIfAvailable = llvm::AnalysisResolver::getAnalysisIfAvailable(*(llvm::PMDataManager ***)(a1 + 8), &llvm::MachineLoopInfo::ID);
  if (AnalysisIfAvailable)
    v7 = (const llvm::MachineLoopInfo *)(*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)AnalysisIfAvailable
                                                                                   + 96))(AnalysisIfAvailable, &llvm::MachineLoopInfo::ID);
  else
    v7 = 0;
  llvm::GPUMetadataEmitter::runOnMachineFunction((llvm::GPUMetadataEmitter *)(a1 + 928), a2, v7, *(llvm::MCContext **)(a1 + 264), *(llvm::MCStreamer **)(a1 + 272));
  return 0;
}

uint64_t sub_1C6124694(llvm::MCContext **a1, llvm::Module *a2)
{
  return llvm::GPUMetadataEmitter::emitEndOfAsmFile((llvm::GPUMetadataEmitter *)(a1 + 116), a2, a1[33], a1[34]);
}

void sub_1C61246A4(llvm::Pass *a1)
{
  *(_QWORD *)a1 = &off_1E7F93D58;
  sub_1C4765054((uint64_t)a1 + 928);
  sub_1C5FEAEB4(a1);
}

void sub_1C61246D8(llvm::Pass *a1)
{
  *(_QWORD *)a1 = &off_1E7F93D58;
  sub_1C4765054((uint64_t)a1 + 928);
  sub_1C5FEAEB4(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C6124720()
{
  return "AGX1 Assembly Printer";
}

uint64_t sub_1C6124734()
{
  return 0;
}

void sub_1C6124748()
{
  llvm::report_fatal_error((llvm *)"llvm.ptrauth global lowering not implemented", (const char *)1);
}

uint64_t sub_1C6124764(uint64_t a1)
{
  void *v2;
  void *v3;

  sub_1C61247C0(a1 + 96, *(_QWORD **)(a1 + 104));
  sub_1C61247C0(a1 + 64, *(_QWORD **)(a1 + 72));
  v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(_QWORD *)(a1 + 32) = v2;
    operator delete(v2);
  }
  v3 = *(void **)a1;
  if (*(_QWORD *)a1)
  {
    *(_QWORD *)(a1 + 8) = v3;
    operator delete(v3);
  }
  return a1;
}

void sub_1C61247C0(uint64_t a1, _QWORD *a2)
{
  if (a2)
  {
    sub_1C61247C0(a1, *a2);
    sub_1C61247C0(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t sub_1C6124804(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v5;
  uint64_t v6;

  v3 = *(uint64_t **)(a1 + 24);
  v2 = *(uint64_t **)(a1 + 32);
  if (v3 != v2)
  {
    do
    {
      v6 = *v3;
      if (*v3)
      {
        sub_1C61248A8(v6 + 152);
        v5 = sub_1C4765684(v6);
        MEMORY[0x1CAA32FC0](v5, 0x10B2C401A85D49FLL);
        v2 = *(uint64_t **)(a1 + 32);
      }
      ++v3;
    }
    while (v3 != v2);
    v3 = *(uint64_t **)(a1 + 24);
  }
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v3);
  }
  sub_1C47653C0(a1, *(char **)(a1 + 8));
  return a1;
}

uint64_t sub_1C61248A8(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;

  v3 = *(uint64_t **)(a1 + 24);
  v2 = *(uint64_t **)(a1 + 32);
  if (v3 != v2)
  {
    do
    {
      if (*v3)
      {
        v4 = sub_1C4765684(*v3);
        MEMORY[0x1CAA32FC0](v4, 0x10B2C40EE200C30);
        v2 = *(uint64_t **)(a1 + 32);
      }
      ++v3;
    }
    while (v3 != v2);
    v3 = *(uint64_t **)(a1 + 24);
  }
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v3);
  }
  sub_1C47653C0(a1, *(char **)(a1 + 8));
  return a1;
}

uint64_t sub_1C6124924(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;

  v3 = *(uint64_t **)(a1 + 24);
  v2 = *(uint64_t **)(a1 + 32);
  if (v3 != v2)
  {
    do
    {
      v4 = *v3;
      if (*v3)
      {
        sub_1C4765778(v4 + 184);
        v5 = sub_1C4765684(v4);
        MEMORY[0x1CAA32FC0](v5, 0x10B2C409EE52067);
        v2 = *(uint64_t **)(a1 + 32);
      }
      ++v3;
    }
    while (v3 != v2);
    v3 = *(uint64_t **)(a1 + 24);
  }
  if (v3)
  {
    *(_QWORD *)(a1 + 32) = v3;
    operator delete(v3);
  }
  sub_1C47653C0(a1, *(char **)(a1 + 8));
  return a1;
}

uint64_t sub_1C61249B4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = operator new();
  v5 = *a2;
  *a2 = 0;
  v7 = v5;
  sub_1C6124A30(v4, a1, &v7);
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7);
  return v4;
}

uint64_t sub_1C6124A30(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;

  v4 = *a3;
  *a3 = 0;
  v7 = v4;
  sub_1C63BC478(a1, a2, &v7);
  v5 = v7;
  v7 = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 48))(v5);
  *(_QWORD *)a1 = &off_1E7F93D58;
  *(_QWORD *)(a1 + 792) = off_1E7F93F38;
  *(_OWORD *)(a1 + 800) = 0u;
  *(_OWORD *)(a1 + 816) = 0u;
  *(_OWORD *)(a1 + 832) = 0u;
  *(_OWORD *)(a1 + 848) = 0u;
  *(_OWORD *)(a1 + 864) = 0u;
  *(_OWORD *)(a1 + 880) = 0u;
  *(_OWORD *)(a1 + 896) = 0u;
  *(_OWORD *)(a1 + 912) = 0u;
  llvm::GPUMetadataEmitter::GPUMetadataEmitter(a1 + 928, a1 + 792);
  return a1;
}

uint64_t sub_1C6124ABC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 8);
}

uint64_t sub_1C6124AC4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 60);
}

uint64_t sub_1C6124ACC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 72);
}

uint64_t sub_1C6124AD4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 76);
}

uint64_t sub_1C6124ADC()
{
  return 0;
}

uint64_t sub_1C6124AE4()
{
  return 0;
}

uint64_t sub_1C6124AEC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 56);
}

uint64_t sub_1C6124AF4()
{
  return 0;
}

uint64_t sub_1C6124AFC()
{
  return 0;
}

uint64_t sub_1C6124B04()
{
  return 0;
}

uint64_t sub_1C6124B0C()
{
  return 0;
}

uint64_t sub_1C6124B14()
{
  return 0;
}

uint64_t sub_1C6124B1C()
{
  return 0;
}

uint64_t sub_1C6124B24()
{
  return 0;
}

uint64_t sub_1C6124B2C()
{
  return 0;
}

uint64_t sub_1C6124B34()
{
  return 0;
}

uint64_t sub_1C6124B3C()
{
  return 0;
}

uint64_t sub_1C6124B44()
{
  return 0;
}

uint64_t sub_1C6124B4C()
{
  return 0;
}

uint64_t sub_1C6124B54()
{
  return 0;
}

uint64_t sub_1C6124B5C()
{
  return 0;
}

uint64_t sub_1C6124B64()
{
  return 0;
}

uint64_t sub_1C6124B6C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 104);
}

uint64_t sub_1C6124B74(uint64_t a1)
{
  return *(unsigned int *)(a1 + 108);
}

uint64_t sub_1C6124B7C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 44);
}

uint64_t sub_1C6124B84(uint64_t a1)
{
  return *(unsigned int *)(a1 + 24);
}

uint64_t sub_1C6124B8C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 100);
}

uint64_t sub_1C6124B94(uint64_t a1)
{
  return *(unsigned int *)(a1 + 96);
}

uint64_t sub_1C6124B9C(uint64_t a1)
{
  return *(unsigned int *)(a1 + 80);
}

uint64_t sub_1C6124BA4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 72);
}

uint64_t sub_1C6124BAC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 84);
}

uint64_t sub_1C6124BB4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 76);
}

uint64_t sub_1C6124BBC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 60);
}

uint64_t sub_1C6124BC4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 64);
}

uint64_t sub_1C6124BCC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 52);
}

uint64_t sub_1C6124BD4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 28);
}

uint64_t sub_1C6124BDC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 32);
}

uint64_t sub_1C6124BE4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 36);
}

uint64_t sub_1C6124BEC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 40);
}

uint64_t sub_1C6124BF4(uint64_t a1)
{
  return *(unsigned int *)(a1 + 88);
}

uint64_t sub_1C6124BFC(uint64_t a1)
{
  return *(unsigned int *)(a1 + 92);
}

uint64_t sub_1C6124C04()
{
  return 0;
}

uint64_t sub_1C6124C0C()
{
  return 0;
}

uint64_t sub_1C6124C14()
{
  return 0;
}

uint64_t sub_1C6124C1C()
{
  return 0;
}

uint64_t sub_1C6124C24()
{
  return 0;
}

uint64_t sub_1C6124C2C()
{
  return 0;
}

uint64_t sub_1C6124C34()
{
  return 0;
}

uint64_t sub_1C6124C3C()
{
  return 0;
}

uint64_t sub_1C6124C44()
{
  return 0;
}

uint64_t sub_1C6124C4C()
{
  return 0;
}

uint64_t sub_1C6124C54()
{
  return 0;
}

uint64_t sub_1C6124C5C()
{
  return 0;
}

double sub_1C6124C64()
{
  return 0.0;
}

uint64_t sub_1C6124C6C()
{
  return 0;
}

double sub_1C6124C78@<D0>(_QWORD *a1@<X8>)
{
  double result;

  *a1 = a1 + 2;
  *(_QWORD *)&result = 0x800000000;
  a1[1] = 0x800000000;
  return result;
}

void sub_1C6124C90(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t i;
  uint64_t j;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  _QWORD *v7;
  _QWORD *v8;
  unsigned int v9;

  *(_QWORD *)a2 = a2 + 16;
  *(_QWORD *)(a2 + 8) = 0x600000000;
  *(_DWORD *)(a2 + 64) = 0;
  *(_OWORD *)(a2 + 72) = 0u;
  *(_OWORD *)(a2 + 88) = 0u;
  *(_OWORD *)(a2 + 99) = 0u;
  for (i = *(_QWORD *)(a1 + 328); i != a1 + 320; i = *(_QWORD *)(i + 8))
  {
    for (j = *(_QWORD *)(i + 56); j != i + 48; j = *(_QWORD *)(j + 8))
    {
      v4 = **(unsigned __int16 **)(j + 16);
      if (v4 > 0x2EC3)
      {
        switch(**(_WORD **)(j + 16))
        {
          case 0x343E:
          case 0x343F:
            v5 = 2047;
            goto LABEL_26;
          case 0x3440:
          case 0x3441:
            v5 = 0x1FFF;
            goto LABEL_26;
          case 0x3442:
          case 0x3443:
            v5 = 0x7FFF;
            goto LABEL_26;
          case 0x3444:
          case 0x3445:
            v5 = 1;
            goto LABEL_26;
          case 0x3446:
          case 0x3447:
            v5 = 7;
            goto LABEL_26;
          case 0x3448:
          case 0x3449:
            v5 = 31;
            goto LABEL_26;
          case 0x344A:
          case 0x344B:
            v5 = 127;
            goto LABEL_26;
          case 0x344C:
          case 0x344D:
            v5 = 511;
            goto LABEL_26;
          case 0x344E:
          case 0x344F:
            v5 = 3;
            goto LABEL_26;
          case 0x3450:
          case 0x3451:
            v5 = 15;
            goto LABEL_26;
          case 0x3452:
          case 0x3453:
            v5 = 63;
            goto LABEL_26;
          case 0x3454:
          case 0x3455:
            v5 = 255;
            goto LABEL_26;
          case 0x3456:
          case 0x3457:
            v5 = 1023;
            goto LABEL_26;
          case 0x3458:
          case 0x3459:
            v5 = 4095;
            goto LABEL_26;
          case 0x345A:
          case 0x345B:
            v5 = 0x3FFF;
            goto LABEL_26;
          case 0x345C:
          case 0x345D:
            v5 = 0xFFFF;
LABEL_26:
            v7 = (_QWORD *)(a2 + 88);
            v8 = (_QWORD *)(a2 + 96);
            goto LABEL_27;
          default:
            if (v4 - 11972 < 2)
              *(_BYTE *)(a2 + 113) = 1;
            continue;
        }
      }
      v6 = v4 - 11747;
      v5 = 1;
      v7 = (_QWORD *)(a2 + 72);
      v8 = (_QWORD *)(a2 + 80);
      switch(v6)
      {
        case 0u:
        case 1u:
          v5 = 2047;
          goto LABEL_46;
        case 2u:
        case 3u:
          v5 = 0x1FFF;
          goto LABEL_46;
        case 4u:
        case 5u:
          v5 = 0x7FFF;
          goto LABEL_46;
        case 6u:
        case 7u:
          goto LABEL_27;
        case 8u:
        case 9u:
          v5 = 7;
          goto LABEL_46;
        case 0xAu:
        case 0xBu:
          v5 = 31;
          goto LABEL_46;
        case 0xCu:
        case 0xDu:
          v5 = 127;
          goto LABEL_46;
        case 0xEu:
        case 0xFu:
          v5 = 511;
          goto LABEL_46;
        case 0x10u:
        case 0x11u:
          v5 = 3;
          goto LABEL_46;
        case 0x12u:
        case 0x13u:
          v5 = 15;
          goto LABEL_46;
        case 0x14u:
        case 0x15u:
          v5 = 63;
          goto LABEL_46;
        case 0x16u:
        case 0x17u:
          v5 = 255;
          goto LABEL_46;
        case 0x18u:
        case 0x19u:
          v5 = 1023;
          goto LABEL_46;
        case 0x1Au:
        case 0x1Bu:
          v5 = 4095;
          goto LABEL_46;
        case 0x1Cu:
        case 0x1Du:
          v5 = 0x3FFF;
          goto LABEL_46;
        case 0x1Eu:
        case 0x1Fu:
          v5 = 0xFFFF;
LABEL_46:
          v7 = (_QWORD *)(a2 + 72);
          v8 = (_QWORD *)(a2 + 80);
LABEL_27:
          v9 = *(_DWORD *)(*(_QWORD *)(j + 32) + 48);
          if (v9 <= 0x3F)
            *v7 |= v5 << v9;
          if (__clz(v5) + v9 >= 0x41)
            *v8 |= v5 >> -(char)v9;
          break;
        default:
          continue;
      }
    }
  }
}

uint64_t sub_1C6124EF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a2 + 48);
  if (!v2)
  {
    v2 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 8) + 216))(*(_QWORD *)(a2 + 8), a2 + 128, a2);
    *(_QWORD *)(a2 + 48) = v2;
  }
  return *(unsigned int *)(v2 + 16);
}

uint64_t sub_1C6124F38()
{
  return 0;
}

uint64_t sub_1C6124F40()
{
  return 0;
}

uint64_t sub_1C6124F48()
{
  return 0;
}

uint64_t sub_1C6124F50()
{
  return 0;
}

void sub_1C6124F58()
{
  JUMPOUT(0x1CAA32FC0);
}

double sub_1C6124F6C(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  double result;

  v2 = operator new();
  v3 = operator new();
  *(_QWORD *)v3 = &off_1E7F94318;
  *(_QWORD *)(v3 + 8) = 0;
  *(_DWORD *)(v3 + 16) = 0;
  *(_OWORD *)(v3 + 24) = 0u;
  *(_OWORD *)(v3 + 40) = 0u;
  *(_OWORD *)(v3 + 56) = 0u;
  *(_OWORD *)(v3 + 72) = 0u;
  *(_QWORD *)(v3 + 88) = v3 + 104;
  *(_QWORD *)(v3 + 96) = 0x600000000;
  *(_DWORD *)(v3 + 152) = 0;
  *(_OWORD *)(v3 + 160) = 0u;
  *(_OWORD *)(v3 + 176) = 0u;
  *(_OWORD *)(v3 + 192) = 0u;
  *(_OWORD *)(v3 + 208) = 0u;
  *(_DWORD *)(v3 + 224) = 0;
  *(_QWORD *)(v3 + 232) = 0;
  *(_QWORD *)(v3 + 240) = 0;
  *(_QWORD *)(v3 + 248) = 0;
  *(_QWORD *)(v3 + 256) = v3 + 232;
  *(_QWORD *)(v3 + 264) = v3 + 280;
  *(_QWORD *)(v3 + 272) = 0x600000000;
  *(_DWORD *)(v3 + 328) = 0;
  *(_OWORD *)(v3 + 336) = 0u;
  *(_OWORD *)(v3 + 352) = 0u;
  *(_OWORD *)(v3 + 368) = 0u;
  *(_OWORD *)(v3 + 384) = 0u;
  *(_OWORD *)(v3 + 400) = 0u;
  *(_OWORD *)(v3 + 412) = 0u;
  *(_QWORD *)(v3 + 432) = 0;
  *(_QWORD *)(v3 + 440) = 0;
  *(_QWORD *)(v3 + 448) = 0;
  llvm::ScheduleDAGInstrs::ScheduleDAGInstrs((llvm::ScheduleDAGInstrs *)v2, *(const llvm::TargetSubtargetInfo ***)(a1 + 8), *(const llvm::MachineLoopInfo **)(a1 + 16), 0);
  *(_QWORD *)v2 = &off_1E8145ED0;
  *(_OWORD *)(v2 + 2632) = *(_OWORD *)(a1 + 40);
  *(_QWORD *)(v2 + 2648) = v3;
  result = 0.0;
  *(_OWORD *)(v2 + 2656) = 0u;
  *(_OWORD *)(v2 + 2672) = 0u;
  *(_OWORD *)(v2 + 2688) = 0u;
  *(_QWORD *)(v2 + 2704) = 0;
  return result;
}

uint64_t sub_1C6125090()
{
  return 0;
}

_DWORD *sub_1C6125098(_DWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  if (*((_QWORD *)result + 1))
  {
    v1 = result[4];
    if (v1 <= 4 * result[2] || v1 < 0x41)
    {
      if ((_DWORD)v1)
      {
        v2 = *(_QWORD **)result;
        v3 = 16 * v1;
        do
        {
          *v2 = -4096;
          v2 += 2;
          v3 -= 16;
        }
        while (v3);
      }
      *((_QWORD *)result + 1) = 0;
    }
    else
    {
      return sub_1C476B2A4(result);
    }
  }
  return result;
}

void sub_1C61250E8(uint64_t *a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  BOOL v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;

  v3 = a1[1];
  v4 = 0x8E38E38E38E38E39 * ((v3 - *a1) >> 3);
  v5 = a2 >= v4;
  v6 = a2 - v4;
  if (v6 != 0 && v5)
  {
    sub_1C476B33C(a1, v6);
  }
  else if (!v5)
  {
    v7 = *a1 + 72 * a2;
    while (v3 != v7)
    {
      v9 = *(void **)(v3 - 72);
      v3 -= 72;
      v8 = v9;
      if ((void *)(v3 + 16) != v9)
        free(v8);
    }
    a1[1] = v7;
  }
}

uint64_t *sub_1C612517C(uint64_t *result, _QWORD *a2)
{
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v3 = result;
  v5 = *result;
  v4 = result[1];
  v6 = a2[1];
  if (v4 != *result)
  {
    v7 = 0;
    do
    {
      *(_QWORD *)(v6 + v7 - 72) = v6 + v7 - 56;
      result = (uint64_t *)(v6 + v7 - 72);
      v8 = v4 + v7;
      *(_QWORD *)(v6 + v7 - 64) = 0x600000000;
      if (*(_DWORD *)(v4 + v7 - 64))
        result = (uint64_t *)sub_1C476B4F4((uint64_t)result, v8 - 72);
      *(_DWORD *)(v6 + v7 - 8) = *(_DWORD *)(v8 - 8);
      v7 -= 72;
    }
    while (v4 + v7 != v5);
    v6 += v7;
  }
  a2[1] = v6;
  v9 = *v3;
  *v3 = v6;
  a2[1] = v9;
  v10 = v3[1];
  v3[1] = a2[2];
  a2[2] = v10;
  v11 = v3[2];
  v3[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

_QWORD *sub_1C6125254(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C61252B8(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C6125354((uint64_t)a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    *((_DWORD *)v5 + 2) = 0;
  }
  return v5;
}

uint64_t sub_1C61252B8(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v7 = (_QWORD *)(*a1 + 16 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      result = 1;
      while (v8 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v8 == -8192;
        if (v12)
          v10 = v7;
        v13 = v6 + v11++;
        v6 = v13 & v5;
        v7 = (_QWORD *)(v4 + 16 * (v13 & v5));
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_4;
      }
      result = 0;
      if (v10)
        v7 = v10;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_4:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C6125354(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C476B734(a1, v7);
  v9 = 0;
  sub_1C61252B8((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

uint64_t sub_1C6125400(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      result = sub_1C61252B8((uint64_t *)v5, (_QWORD *)a2, &v10);
      v9 = v10;
      *v10 = *(_QWORD *)a2;
      *((_DWORD *)v9 + 2) = *(_DWORD *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 16;
  }
  return result;
}

_QWORD *sub_1C61254B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v6;
  void *v7;
  _QWORD v9[40];

  v6 = a3;
  v9[39] = *MEMORY[0x1E0C80C00];
  llvm::CCState::CCState(v9, a3, 0, a1, a5, a2);
  if (v6 == 105)
    v7 = sub_1C476C900;
  else
    v7 = sub_1C476C794;
  llvm::CCState::AnalyzeReturn((uint64_t)v9, a4, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t, uint64_t))v7);
  return sub_1C476CC0C(v9);
}

_QWORD *sub_1C6125554(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  int v6;
  _QWORD v8[40];

  v6 = a3;
  v8[39] = *MEMORY[0x1E0C80C00];
  llvm::CCState::CCState(v8, a3, 0, a1, a5, a2);
  llvm::CCState::AnalyzeFormalArguments((uint64_t)v8, a4, (uint64_t (*)(uint64_t, _QWORD, _QWORD, _QWORD, _QWORD, unint64_t, uint64_t))off_1E7F943A0[v6 - 102]);
  return sub_1C476CC0C(v8);
}

uint64_t sub_1C61255F0(char a1)
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &unk_1EF8EF6F8;
  *(_DWORD *)(result + 24) = 2;
  *(_QWORD *)result = &off_1E7F943D8;
  *(_BYTE *)(result + 28) = a1;
  return result;
}

uint64_t sub_1C6125648()
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &unk_1EF8EF6F9;
  *(_DWORD *)(result + 24) = 2;
  *(_QWORD *)result = &off_1E7F94478;
  return result;
}

void sub_1C6125690(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED7EAF40);
  if (v1 != -1)
  {
    v4[0] = sub_1C476CF78;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED7EAF40, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C61256F0(uint64_t a1, llvm::LLVMContext *a2, uint64_t *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  llvm::ConstantInt **Int64Ty;
  llvm::LLVMContext *v13;
  llvm::ConstantInt **v14;
  uint64_t result;
  _DWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  _WORD v20[20];
  _QWORD v21[3];

  v21[2] = *MEMORY[0x1E0C80C00];
  Int64Ty = (llvm::ConstantInt **)llvm::Type::getInt64Ty(*(llvm::Type **)(a1 + 64), a2);
  v21[0] = llvm::ConstantInt::get(Int64Ty, a4, 0);
  v14 = (llvm::ConstantInt **)llvm::Type::getInt64Ty(*(llvm::Type **)(a1 + 64), v13);
  v21[1] = llvm::ConstantInt::get(v14, a5, 0);
  result = (*(uint64_t (**)(_QWORD, llvm::LLVMContext *, uint64_t *, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(a1 + 72) + 48))(*(_QWORD *)(a1 + 72), a2, a3, v21, 2, 0);
  if (!result)
  {
    v20[16] = 257;
    v16 = operator new(0xB0uLL);
    v17 = 0;
    v18 = (uint64_t)(v16 + 24);
    v16[29] = v16[29] & 0x38000000 | 3;
    do
    {
      v19 = &v16[v17];
      *v19 = 0;
      v19[1] = 0;
      v19[2] = 0;
      v19[3] = v18;
      v17 += 8;
    }
    while (v17 != 24);
    sub_1C477449C((uint64_t)(v16 + 24), a2, a3, (llvm::Value *)v21, 2, 3, (uint64_t)v20, 0);
    return sub_1C477438C((uint64_t *)a1, v18, a6);
  }
  return result;
}

uint64_t sub_1C6125834(uint64_t result, unsigned int a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;

  v3 = *(_DWORD *)(result + 20);
  if ((v3 & 0x40000000) != 0)
    v4 = *(_QWORD *)(result - 8);
  else
    v4 = result - 32 * (v3 & 0x7FFFFFF);
  v5 = v4 + 32 * a2;
  if (*(_QWORD *)v5)
  {
    **(_QWORD **)(v5 + 16) = *(_QWORD *)(v5 + 8);
    v6 = *(_QWORD *)(v5 + 8);
    if (v6)
      *(_QWORD *)(v6 + 16) = *(_QWORD *)(v5 + 16);
  }
  *(_QWORD *)v5 = a3;
  if (a3)
  {
    v9 = *(_QWORD *)(a3 + 8);
    v7 = (_QWORD *)(a3 + 8);
    v8 = v9;
    v10 = v4 + 32 * a2;
    *(_QWORD *)(v10 + 8) = v9;
    if (v9)
      *(_QWORD *)(v8 + 16) = v10 + 8;
    *(_QWORD *)(v10 + 16) = v7;
    *v7 = v5;
  }
  return result;
}

_QWORD *sub_1C61258A8()
{
  uint64_t v0;
  _QWORD *result;

  v0 = operator new();
  result = (_QWORD *)sub_1C4776848(v0, (uint64_t)&unk_1EF8F6440);
  *result = &off_1E7F94518;
  return result;
}

unsigned int *sub_1C61258E8(unsigned int *result, char *a2, char *a3)
{
  char *v4;
  unsigned int *v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  _OWORD *v9;
  __int128 v10;
  __int128 v11;

  v4 = a2;
  v5 = result;
  v6 = a3 - a2;
  v7 = result[2];
  v8 = v7 + ((a3 - a2) >> 5);
  if (v8 > result[3])
  {
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), v8, 32);
    v7 = v5[2];
  }
  if (v4 != a3)
  {
    v9 = (_OWORD *)(*(_QWORD *)v5 + 32 * v7);
    do
    {
      v10 = *(_OWORD *)v4;
      v11 = *((_OWORD *)v4 + 1);
      v4 += 32;
      *v9 = v10;
      v9[1] = v11;
      v9 += 2;
    }
    while (v4 != a3);
    LODWORD(v7) = v5[2];
  }
  v5[2] = v7 + (v6 >> 5);
  return result;
}

llvm::MachineFunction *sub_1C612596C(uint64_t a1, uint64_t a2, unsigned __int8 **a3, uint64_t a4, int a5)
{
  llvm::MachineFunction *v9;
  unsigned __int8 *v10;
  llvm::MachineInstr *v11;
  unsigned __int8 *v13;
  _DWORD v14[2];
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;

  v9 = *(llvm::MachineFunction **)(a1 + 32);
  v10 = *a3;
  v13 = v10;
  if (v10)
    llvm::MetadataTracking::track((uint64_t)&v13, v10, 2);
  v11 = llvm::MachineFunction::CreateMachineInstr(v9, a4, &v13, 0);
  if (v13)
    llvm::MetadataTracking::untrack((uint64_t)&v13, v13);
  llvm::MachineBasicBlock::insert(a1, a2, (uint64_t)v11);
  v15 = 0;
  v16 = 0;
  v17 = 0;
  v14[0] = 0x1000000;
  v14[1] = a5;
  llvm::MachineInstr::addOperand(v11, v9, (const llvm::MachineOperand *)v14);
  return v9;
}

_UNKNOWN **sub_1C6125A2C()
{
  return &off_1EF8EB060;
}

uint64_t sub_1C6125A38(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  unint64_t v9;
  _WORD *v10;
  unsigned __int16 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  uint64_t v18;
  unsigned __int16 *v19;
  int v20;
  int v21;

  v3 = *(_QWORD *)(a2 + 40);
  v4 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 176))(*(_QWORD *)(a2 + 16));
  v5 = *(_QWORD **)(*(_QWORD *)(a2 + 24) + 160);
  v6 = sub_1C4779DC4(a2);
  v7 = v6;
  v8 = (_QWORD *)(v4 + 8);
  if (!v4)
    v8 = 0;
  v9 = *(unsigned int *)(*v8 + 24 * v6 + 16);
  v10 = (_WORD *)(v8[6] + ((v9 >> 3) & 0x1FFFFFFE));
  v11 = *v10 + (v9 & 0xF) * v6;
  do
  {
    v12 = v5[5];
    v13 = v11;
    v14 = 4 * v11;
    v15 = *(unsigned __int16 *)(v12 + v14);
    if (*(_WORD *)(v12 + v14))
    {
      v16 = *(unsigned __int16 *)(v12 + 4 * v13 + 2);
      do
      {
        v17 = v15;
        v15 = v16;
        v18 = v5[6];
        if (v18)
        {
          v19 = (unsigned __int16 *)(v18 + 2 * *(unsigned int *)(*v5 + 24 * (unsigned __int16)v17 + 8));
          do
          {
            llvm::MachineRegisterInfo::clearKillFlags(v3, (unsigned __int16)v17);
            v20 = *v19++;
            v17 += v20;
          }
          while (v20);
        }
        v16 = 0;
      }
      while ((_WORD)v15);
    }
    v21 = (unsigned __int16)v10[1];
    ++v10;
    v11 = v21 + v13;
  }
  while (v21);
  return v7;
}

uint64_t sub_1C6125B50()
{
  return 0;
}

llvm::MachineFunction **sub_1C6125B58(uint64_t a1, uint64_t a2, _QWORD *a3, int a4, int a5, uint64_t a6, unsigned __int8 **a7, int a8, _QWORD *a9)
{
  uint64_t v16;
  unint64_t *v17;
  uint64_t v18;
  llvm::MachineFunction *v19;
  llvm::MachineInstr *v20;
  llvm::MachineInstr *v21;
  uint64_t v22;
  llvm::MachineInstr *v23;
  llvm::MachineFunction **result;
  llvm::MachineFunction *v25;
  llvm::MachineInstr *v26;
  llvm::MachineInstr *v27;
  unint64_t *v28;
  __int128 v29;
  __int128 v30;

  (*(void (**)(_QWORD *, uint64_t, _QWORD))(*a9 + 264))(a9, a2, 0);
  v16 = a9[1];
  v17 = (unint64_t *)(a2 + 48);
  if (a4)
  {
    v18 = 34656;
    if (a5)
      v18 = 33888;
    v19 = sub_1C477A100(a2, v17, a7, v16 + v18);
    v21 = v20;
    *((_QWORD *)&v29 + 1) = 0;
    v30 = 0uLL;
    LODWORD(v29) = 0x1000000;
    DWORD1(v29) = a8;
    llvm::MachineInstr::addOperand(v20, v19, (const llvm::MachineOperand *)&v29);
    LODWORD(v29) = 1;
    *((_QWORD *)&v29 + 1) = 0;
    *(_QWORD *)&v30 = 0;
    llvm::MachineInstr::addOperand(v21, v19, (const llvm::MachineOperand *)&v29);
    LODWORD(v29) = 1;
    *((_QWORD *)&v29 + 1) = 0;
    *(_QWORD *)&v30 = 0;
    llvm::MachineInstr::addOperand(v21, v19, (const llvm::MachineOperand *)&v29);
    LODWORD(v29) = 1;
    *((_QWORD *)&v29 + 1) = 0;
    *(_QWORD *)&v30 = 1;
    llvm::MachineInstr::addOperand(v21, v19, (const llvm::MachineOperand *)&v29);
    LODWORD(v29) = 1;
  }
  else
  {
    v22 = 34464;
    if (a5)
      v22 = 33696;
    v19 = sub_1C477A100(a2, v17, a7, v16 + v22);
    v21 = v23;
    *((_QWORD *)&v29 + 1) = 0;
    v30 = 0uLL;
    LODWORD(v29) = 0x1000000;
    DWORD1(v29) = a8;
    llvm::MachineInstr::addOperand(v23, v19, (const llvm::MachineOperand *)&v29);
    LODWORD(v29) = 1;
    *((_QWORD *)&v29 + 1) = 0;
    *(_QWORD *)&v30 = 0;
    llvm::MachineInstr::addOperand(v21, v19, (const llvm::MachineOperand *)&v29);
    *((_QWORD *)&v29 + 1) = 0;
    v30 = 0uLL;
    LODWORD(v29) = 0;
    DWORD1(v29) = a8;
    llvm::MachineInstr::addOperand(v21, v19, (const llvm::MachineOperand *)&v29);
    LODWORD(v29) = 1;
    *((_QWORD *)&v29 + 1) = 0;
    *(_QWORD *)&v30 = 0;
    llvm::MachineInstr::addOperand(v21, v19, (const llvm::MachineOperand *)&v29);
    LODWORD(v29) = 1;
    *((_QWORD *)&v29 + 1) = 0;
    *(_QWORD *)&v30 = 1;
    llvm::MachineInstr::addOperand(v21, v19, (const llvm::MachineOperand *)&v29);
    LODWORD(v29) = 1;
  }
  *((_QWORD *)&v29 + 1) = 0;
  *(_QWORD *)&v30 = 2;
  llvm::MachineInstr::addOperand(v21, v19, (const llvm::MachineOperand *)&v29);
  v29 = 0u;
  v30 = 0u;
  llvm::MachineInstr::addOperand(v21, v19, (const llvm::MachineOperand *)&v29);
  v28 = (unint64_t *)a3[7];
  result = (llvm::MachineFunction **)sub_1C4779FA8(a3, a6, &v28);
  if ((_DWORD)result)
  {
    v25 = sub_1C477A100((uint64_t)a3, v28, a7, a9[1] + 19056);
    v27 = v26;
    *((_QWORD *)&v29 + 1) = 0;
    *(_QWORD *)&v30 = a6;
    LODWORD(v29) = 4;
    llvm::MachineInstr::addOperand(v26, v25, (const llvm::MachineOperand *)&v29);
    *(_QWORD *)&v29 = v25;
    *((_QWORD *)&v29 + 1) = v27;
    return sub_1C477A2C4((llvm::MachineFunction **)&v29);
  }
  return result;
}

llvm::MachineFunction **sub_1C6125DB4(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, unsigned __int8 **a5, int a6, _QWORD *a7)
{
  unint64_t *v12;
  llvm::MachineFunction *v13;
  llvm::MachineInstr *v14;
  llvm::MachineInstr *v15;
  llvm::MachineFunction **result;
  llvm::MachineFunction *v17;
  llvm::MachineInstr *v18;
  llvm::MachineInstr *v19;
  unint64_t *v20;
  __int128 v21;
  __int128 v22;

  (*(void (**)(_QWORD *, uint64_t, _QWORD))(*a7 + 264))(a7, a2, 0);
  v12 = (unint64_t *)a3[7];
  v13 = sub_1C477A31C((uint64_t)a3, (uint64_t)v12, a5, a7[1] + 25248);
  v15 = v14;
  *((_QWORD *)&v21 + 1) = 0;
  v22 = 0uLL;
  LODWORD(v21) = 0x1000000;
  DWORD1(v21) = a6;
  llvm::MachineInstr::addOperand(v14, v13, (const llvm::MachineOperand *)&v21);
  LODWORD(v21) = 1;
  *((_QWORD *)&v21 + 1) = 0;
  *(_QWORD *)&v22 = 0;
  llvm::MachineInstr::addOperand(v15, v13, (const llvm::MachineOperand *)&v21);
  *((_QWORD *)&v21 + 1) = 0;
  v22 = 0uLL;
  LODWORD(v21) = 0;
  DWORD1(v21) = a6;
  llvm::MachineInstr::addOperand(v15, v13, (const llvm::MachineOperand *)&v21);
  LODWORD(v21) = 1;
  *((_QWORD *)&v21 + 1) = 0;
  *(_QWORD *)&v22 = 0;
  llvm::MachineInstr::addOperand(v15, v13, (const llvm::MachineOperand *)&v21);
  LODWORD(v21) = 1;
  *((_QWORD *)&v21 + 1) = 0;
  *(_QWORD *)&v22 = 1;
  llvm::MachineInstr::addOperand(v15, v13, (const llvm::MachineOperand *)&v21);
  LODWORD(v21) = 1;
  *((_QWORD *)&v21 + 1) = 0;
  *(_QWORD *)&v22 = 2;
  llvm::MachineInstr::addOperand(v15, v13, (const llvm::MachineOperand *)&v21);
  v21 = 0u;
  v22 = 0u;
  llvm::MachineInstr::addOperand(v15, v13, (const llvm::MachineOperand *)&v21);
  v20 = v12;
  result = (llvm::MachineFunction **)sub_1C4779FA8(a3, a4, &v20);
  if ((_DWORD)result)
  {
    v17 = sub_1C477A100((uint64_t)a3, v20, a5, a7[1] + 19056);
    v19 = v18;
    *((_QWORD *)&v21 + 1) = 0;
    *(_QWORD *)&v22 = a4;
    LODWORD(v21) = 4;
    llvm::MachineInstr::addOperand(v18, v17, (const llvm::MachineOperand *)&v21);
    *(_QWORD *)&v21 = v17;
    *((_QWORD *)&v21 + 1) = v19;
    return sub_1C477A2C4((llvm::MachineFunction **)&v21);
  }
  return result;
}

void sub_1C6125F64(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 **a4, int a5, uint64_t a6)
{
  (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a6 + 264))(a6, a2, 0);
  sub_1C61265C4(a3, 0, a4, a5, a6, 1);
}

void sub_1C6125FC0(uint64_t a1, uint64_t a2, int a3, unsigned __int8 **a4, int a5, _QWORD *a6)
{
  uint64_t v11;
  unint64_t *v12;
  llvm::MachineFunction *v13;
  llvm::MachineInstr *v14;
  llvm::MachineInstr *v15;
  llvm::MachineInstr *v16;
  __int128 v17;
  __int128 v18;

  (*(void (**)(_QWORD *, uint64_t, _QWORD))(*a6 + 264))(a6, a2, 0);
  v11 = a6[1];
  v12 = (unint64_t *)(a2 + 48);
  if (a3)
  {
    v13 = sub_1C477A100(a2, v12, a4, v11 + 35424);
    v15 = v14;
    *((_QWORD *)&v17 + 1) = 0;
    v18 = 0uLL;
    LODWORD(v17) = 0x1000000;
    DWORD1(v17) = a5;
    llvm::MachineInstr::addOperand(v14, v13, (const llvm::MachineOperand *)&v17);
    LODWORD(v17) = 1;
    *((_QWORD *)&v17 + 1) = 0;
    *(_QWORD *)&v18 = 0;
  }
  else
  {
    v13 = sub_1C477A100(a2, v12, a4, v11 + 35232);
    v15 = v16;
    *((_QWORD *)&v17 + 1) = 0;
    v18 = 0uLL;
    LODWORD(v17) = 0x1000000;
    DWORD1(v17) = a5;
    llvm::MachineInstr::addOperand(v16, v13, (const llvm::MachineOperand *)&v17);
    LODWORD(v17) = 1;
    *((_QWORD *)&v17 + 1) = 0;
    *(_QWORD *)&v18 = 0;
    llvm::MachineInstr::addOperand(v15, v13, (const llvm::MachineOperand *)&v17);
    *((_QWORD *)&v17 + 1) = 0;
    v18 = 0uLL;
    LODWORD(v17) = 0;
    DWORD1(v17) = a5;
  }
  llvm::MachineInstr::addOperand(v15, v13, (const llvm::MachineOperand *)&v17);
  LODWORD(v17) = 1;
  *((_QWORD *)&v17 + 1) = 0;
  *(_QWORD *)&v18 = 0;
  llvm::MachineInstr::addOperand(v15, v13, (const llvm::MachineOperand *)&v17);
  LODWORD(v17) = 1;
  *((_QWORD *)&v17 + 1) = 0;
  *(_QWORD *)&v18 = 2;
  llvm::MachineInstr::addOperand(v15, v13, (const llvm::MachineOperand *)&v17);
  LODWORD(v17) = 1;
  *((_QWORD *)&v17 + 1) = 0;
  *(_QWORD *)&v18 = 2;
  llvm::MachineInstr::addOperand(v15, v13, (const llvm::MachineOperand *)&v17);
  v17 = 0u;
  v18 = 0u;
  llvm::MachineInstr::addOperand(v15, v13, (const llvm::MachineOperand *)&v17);
}

void sub_1C6126194(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, unsigned __int8 **a5, int a6, int a7, int a8, int a9, _QWORD *a10)
{
  uint64_t v17;
  uint64_t v18;
  llvm::MachineFunction *v19;
  llvm::MachineInstr *v20;
  llvm::MachineInstr *v21;
  uint64_t v22;
  llvm::MachineFunction *v23;
  llvm::MachineInstr *v24;
  llvm::MachineInstr *v25;
  llvm::MachineFunction *v26;
  llvm::MachineInstr *v27;
  llvm::MachineInstr *v28;
  llvm::MachineFunction *v29;
  llvm::MachineInstr *v30;
  llvm::MachineInstr *v31;
  uint64_t v32;
  unsigned __int8 **v33;
  int v34;
  uint64_t v35;
  int v36;
  __int128 v37;
  __int128 v38;

  (*(void (**)(_QWORD *, uint64_t, _QWORD))(*a10 + 264))(a10, a2, 0);
  if (a7)
  {
    v17 = a10[1];
    if (a9)
    {
      v22 = 33696;
      if (a8)
        v22 = 34464;
      v23 = sub_1C477A100(a2, (unint64_t *)(a2 + 48), a5, v17 + v22);
      v25 = v24;
      *((_QWORD *)&v37 + 1) = 0;
      v38 = 0uLL;
      LODWORD(v37) = 0x1000000;
      DWORD1(v37) = a6;
      llvm::MachineInstr::addOperand(v24, v23, (const llvm::MachineOperand *)&v37);
      LODWORD(v37) = 1;
      *((_QWORD *)&v37 + 1) = 0;
      *(_QWORD *)&v38 = 0;
      llvm::MachineInstr::addOperand(v25, v23, (const llvm::MachineOperand *)&v37);
      *((_QWORD *)&v37 + 1) = 0;
      v38 = 0uLL;
      LODWORD(v37) = 0;
      DWORD1(v37) = a6;
      llvm::MachineInstr::addOperand(v25, v23, (const llvm::MachineOperand *)&v37);
      LODWORD(v37) = 1;
      *((_QWORD *)&v37 + 1) = 0;
      *(_QWORD *)&v38 = 0;
      llvm::MachineInstr::addOperand(v25, v23, (const llvm::MachineOperand *)&v37);
      LODWORD(v37) = 1;
      *((_QWORD *)&v37 + 1) = 0;
      *(_QWORD *)&v38 = 1;
      llvm::MachineInstr::addOperand(v25, v23, (const llvm::MachineOperand *)&v37);
      LODWORD(v37) = 1;
      *((_QWORD *)&v37 + 1) = 0;
      *(_QWORD *)&v38 = 2;
      llvm::MachineInstr::addOperand(v25, v23, (const llvm::MachineOperand *)&v37);
      v37 = 0u;
      v38 = 0u;
      llvm::MachineInstr::addOperand(v25, v23, (const llvm::MachineOperand *)&v37);
      v26 = sub_1C477A100(a2, (unint64_t *)(a2 + 48), a5, a10[1] + 32352);
      v28 = v27;
      *((_QWORD *)&v37 + 1) = 0;
      v38 = 0uLL;
      LODWORD(v37) = 0x1000000;
      DWORD1(v37) = a6;
      llvm::MachineInstr::addOperand(v27, v26, (const llvm::MachineOperand *)&v37);
      LODWORD(v37) = 1;
      *((_QWORD *)&v37 + 1) = 0;
      *(_QWORD *)&v38 = 0;
      llvm::MachineInstr::addOperand(v28, v26, (const llvm::MachineOperand *)&v37);
      LODWORD(v37) = 1;
      *((_QWORD *)&v37 + 1) = 0;
      *(_QWORD *)&v38 = (a9 + 3);
      llvm::MachineInstr::addOperand(v28, v26, (const llvm::MachineOperand *)&v37);
      LODWORD(v37) = 1;
      *((_QWORD *)&v37 + 1) = 0;
      *(_QWORD *)&v38 = 2;
      llvm::MachineInstr::addOperand(v28, v26, (const llvm::MachineOperand *)&v37);
      LODWORD(v37) = 1;
      *((_QWORD *)&v37 + 1) = 0;
      *(_QWORD *)&v38 = 0;
      llvm::MachineInstr::addOperand(v28, v26, (const llvm::MachineOperand *)&v37);
      v37 = 0u;
      v38 = 0u;
      llvm::MachineInstr::addOperand(v28, v26, (const llvm::MachineOperand *)&v37);
      sub_1C61265C4(a2, 0, a5, a6, (uint64_t)a10, 0);
    }
    else
    {
      v18 = 31392;
      if (a8)
        v18 = 30624;
      v19 = sub_1C477A100(a2, (unint64_t *)(a2 + 48), a5, v17 + v18);
      v21 = v20;
      *((_QWORD *)&v37 + 1) = 0;
      v38 = 0uLL;
      LODWORD(v37) = 0x1000000;
      DWORD1(v37) = a6;
      llvm::MachineInstr::addOperand(v20, v19, (const llvm::MachineOperand *)&v37);
      LODWORD(v37) = 1;
      *((_QWORD *)&v37 + 1) = 0;
      *(_QWORD *)&v38 = 0;
      llvm::MachineInstr::addOperand(v21, v19, (const llvm::MachineOperand *)&v37);
      *((_QWORD *)&v37 + 1) = 0;
      v38 = 0uLL;
      LODWORD(v37) = 0;
      DWORD1(v37) = a6;
      llvm::MachineInstr::addOperand(v21, v19, (const llvm::MachineOperand *)&v37);
      LODWORD(v37) = 1;
      *((_QWORD *)&v37 + 1) = 0;
      *(_QWORD *)&v38 = 0;
      llvm::MachineInstr::addOperand(v21, v19, (const llvm::MachineOperand *)&v37);
      LODWORD(v37) = 1;
      *((_QWORD *)&v37 + 1) = 0;
      *(_QWORD *)&v38 = 2;
      llvm::MachineInstr::addOperand(v21, v19, (const llvm::MachineOperand *)&v37);
      LODWORD(v37) = 1;
      *((_QWORD *)&v37 + 1) = 0;
      *(_QWORD *)&v38 = 2;
      llvm::MachineInstr::addOperand(v21, v19, (const llvm::MachineOperand *)&v37);
      v37 = 0u;
      v38 = 0u;
      llvm::MachineInstr::addOperand(v21, v19, (const llvm::MachineOperand *)&v37);
    }
  }
  v29 = sub_1C477A100(a2, (unint64_t *)(a2 + 48), a5, a10[1] + 18960);
  v31 = v30;
  *((_QWORD *)&v37 + 1) = 0;
  *(_QWORD *)&v38 = a3;
  LODWORD(v37) = 4;
  llvm::MachineInstr::addOperand(v30, v29, (const llvm::MachineOperand *)&v37);
  *(_QWORD *)&v37 = v29;
  *((_QWORD *)&v37 + 1) = v31;
  sub_1C477A2C4((llvm::MachineFunction **)&v37);
  if (a4)
  {
    v32 = a4;
    v33 = a5;
    v34 = a6;
    v35 = (uint64_t)a10;
    v36 = 1;
  }
  else
  {
    v32 = a2;
    v33 = a5;
    v34 = a6;
    v35 = (uint64_t)a10;
    v36 = 0;
  }
  sub_1C61265C4(v32, 1, v33, v34, v35, v36);
}

BOOL sub_1C612655C(uint64_t a1, int a2)
{
  return a2 == 11576;
}

BOOL sub_1C612656C(uint64_t a1, int a2)
{
  return a2 == 11575;
}

uint64_t sub_1C612657C(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 32);
}

BOOL sub_1C6126584(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(*(_QWORD *)(a2 + 32) + 48) != 0;
}

uint64_t sub_1C6126598()
{
  return 0;
}

void sub_1C61265A0(llvm::GPUConditionalizer *a1)
{
  llvm::GPUConditionalizer::~GPUConditionalizer(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C61265C4(uint64_t a1, int a2, unsigned __int8 **a3, int a4, uint64_t a5, int a6)
{
  uint64_t v8;
  llvm::MachineFunction *v9;
  llvm::MachineInstr *v10;
  llvm::MachineInstr *v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;

  if (a6)
    v8 = *(_QWORD *)(a1 + 56);
  else
    v8 = a1 + 48;
  v9 = sub_1C477A31C(a1, v8, a3, *(_QWORD *)(a5 + 8) + 28320);
  v11 = v10;
  *((_QWORD *)&v13 + 1) = 0;
  v14 = 0uLL;
  LODWORD(v13) = 0x1000000;
  DWORD1(v13) = a4;
  llvm::MachineInstr::addOperand(v10, v9, (const llvm::MachineOperand *)&v13);
  LODWORD(v13) = 1;
  *((_QWORD *)&v13 + 1) = 0;
  *(_QWORD *)&v14 = 0;
  llvm::MachineInstr::addOperand(v11, v9, (const llvm::MachineOperand *)&v13);
  *((_QWORD *)&v13 + 1) = 0;
  v14 = 0uLL;
  LODWORD(v13) = 0;
  DWORD1(v13) = a4;
  llvm::MachineInstr::addOperand(v11, v9, (const llvm::MachineOperand *)&v13);
  LODWORD(v13) = 1;
  *((_QWORD *)&v13 + 1) = 0;
  *(_QWORD *)&v14 = 0;
  llvm::MachineInstr::addOperand(v11, v9, (const llvm::MachineOperand *)&v13);
  LODWORD(v13) = 1;
  if (a2)
    v12 = 2;
  else
    v12 = 1;
  *((_QWORD *)&v13 + 1) = 0;
  *(_QWORD *)&v14 = v12;
  llvm::MachineInstr::addOperand(v11, v9, (const llvm::MachineOperand *)&v13);
  LODWORD(v13) = 1;
  *((_QWORD *)&v13 + 1) = 0;
  *(_QWORD *)&v14 = 2;
  llvm::MachineInstr::addOperand(v11, v9, (const llvm::MachineOperand *)&v13);
  v13 = 0u;
  v14 = 0u;
  llvm::MachineInstr::addOperand(v11, v9, (const llvm::MachineOperand *)&v13);
}

_QWORD *sub_1C61266E8()
{
  uint64_t v0;
  _QWORD *result;

  v0 = operator new();
  result = (_QWORD *)sub_1C4776848(v0, (uint64_t)&unk_1EF8EF6FA);
  *result = &off_1E7F94668;
  return result;
}

uint64_t sub_1C6126728(int a1, int a2, int a3, int a4)
{
  unsigned int *v4;
  unsigned int *v5;
  uint64_t result;
  char *v7;

  switch(a1)
  {
    case -1:
      v7 = "Unspecified SampleMode for G4Itr";
      goto LABEL_12;
    case 0:
      v4 = (unsigned int *)&unk_1C640EE58;
      v5 = (unsigned int *)&unk_1C640EE38;
      goto LABEL_6;
    case 1:
      v4 = (unsigned int *)&unk_1C640EE18;
      v5 = (unsigned int *)&unk_1C640EDF8;
      goto LABEL_6;
    case 2:
      v4 = (unsigned int *)&unk_1C640EDD8;
      v5 = (unsigned int *)&unk_1C640EDB8;
LABEL_6:
      if (a3)
        v4 = v5;
      result = v4[2 * (a2 - 1) + a4];
      break;
    case 3:
      v7 = "Flat SampleMode not implemented for G4Itr";
LABEL_12:
      llvm::report_fatal_error((llvm *)v7, (const char *)1);
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t sub_1C61267CC(int a1, int a2, int a3, int a4)
{
  unsigned int *v4;
  unsigned int *v5;
  uint64_t result;
  char *v7;

  switch(a1)
  {
    case -1:
      v7 = "Unspecified SampleMode for G5Itr";
      goto LABEL_12;
    case 0:
      v4 = (unsigned int *)&unk_1C640EF18;
      v5 = (unsigned int *)&unk_1C640EEF8;
      goto LABEL_6;
    case 1:
      v4 = (unsigned int *)&unk_1C640EED8;
      v5 = (unsigned int *)&unk_1C640EEB8;
      goto LABEL_6;
    case 2:
      v4 = (unsigned int *)&unk_1C640EE98;
      v5 = (unsigned int *)&unk_1C640EE78;
LABEL_6:
      if (a3)
        v4 = v5;
      result = v4[2 * (a2 - 1) + a4];
      break;
    case 3:
      v7 = "Flat SampleMode not implemented for G5Itr";
LABEL_12:
      llvm::report_fatal_error((llvm *)v7, (const char *)1);
    default:
      result = 0;
      break;
  }
  return result;
}

uint64_t sub_1C6126870(int a1, int a2, int a3, int a4)
{
  unsigned int *v4;
  unsigned int *v5;
  uint64_t result;
  char *v7;

  switch(a1)
  {
    case -1:
      v7 = "Unspecified SampleMode for G5ItrProj";
      goto LABEL_12;
    case 0:
      v4 = (unsigned int *)&unk_1C640EFD8;
      v5 = (unsigned int *)&unk_1C640EFB8;
      goto LABEL_6;
    case 1:
      v4 = (unsigned int *)&unk_1C640EF98;
      v5 = (unsigned int *)&unk_1C640EF78;
      goto LABEL_6;
    case 2:
      v4 = (unsigned int *)&unk_1C640EF58;
      v5 = (unsigned int *)&unk_1C640EF38;
LABEL_6:
      if (a3)
        v4 = v5;
      result = v4[2 * (a2 - 1) + a4];
      break;
    case 3:
      v7 = "Flat SampleMode not implemented for G5ItrProj";
LABEL_12:
      llvm::report_fatal_error((llvm *)v7, (const char *)1);
    default:
      result = 0;
      break;
  }
  return result;
}

llvm::ConstantFP ***sub_1C6126914(uint64_t a1, uint64_t *a2)
{
  llvm::ConstantFP ***v2;
  const llvm::APFloat *v3;
  _BYTE *v4;
  char v6;
  _BYTE v7[8];
  uint64_t v8[4];

  v2 = (llvm::ConstantFP ***)a2;
  v8[3] = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(*a2 + 8))
  {
    sub_1C47A813C((llvm::detail::DoubleAPFloat *)v8, a2 + 4);
    v6 = 0;
    if (!llvm::APFloat::convert((uint64_t)v7, &unk_1C866F15C, 1, &v6)
      && !v6
      && !sub_1C4773C58((uint64_t)v7))
    {
      if ((_UNKNOWN *)v8[0] == &unk_1C866F1C0)
        v4 = (_BYTE *)v8[1];
      else
        v4 = v7;
      if ((v4[28] & 7) != 0)
        v2 = (llvm::ConstantFP ***)llvm::ConstantFP::get(**v2, (llvm::LLVMContext *)v7, v3);
    }
    sub_1C47A8258(v8);
  }
  return v2;
}

uint64_t sub_1C6126A04(uint64_t a1, unsigned __int8 *a2)
{
  unsigned int v4;
  uint64_t v5;
  unsigned __int8 v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  unsigned __int8 *v11;

  v4 = a2[16];
  if (v4 >= 0x1C)
  {
    if (v4 != 59)
      return sub_1C6128BA8(*(_QWORD *)(a1 + 32), (const llvm::Value *)a2);
    v5 = *(_QWORD *)(a1 + 32) + 176;
    v10 = 0;
    v11 = a2;
    if ((sub_1C47A82D8(v5, &v11, &v10) & 1) == 0)
      return sub_1C6128BA8(*(_QWORD *)(a1 + 32), (const llvm::Value *)a2);
  }
  v6 = sub_1C47A7FD0(*(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 88), *(_QWORD *)a2, (llvm::Type *)1);
  if (!v6)
    return 0;
  v7 = sub_1C632A4D0(a1);
  v8 = sub_1C47A84B0((llvm::DataLayout **)a1, (uint64_t)a2, v6);
  sub_1C5CC1778(a1, v7);
  return v8;
}

uint64_t sub_1C6126ACC(uint64_t a1, int a2, int a3)
{
  _UNKNOWN ***v4;
  _UNKNOWN ***v5;
  uint64_t VirtualRegister;

  v4 = &off_1E7F982A8;
  if (a3)
    v4 = &off_1E7F982F0;
  if (a2)
    v5 = v4;
  else
    v5 = &off_1E7F984F0;
  VirtualRegister = llvm::MachineRegisterInfo::createVirtualRegister(*(_QWORD *)(a1 + 48), (uint64_t)v5, "", 0);
  if ((_DWORD)VirtualRegister)
    sub_1C4787570(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 640), *(unint64_t **)(*(_QWORD *)(a1 + 32) + 648), (unsigned __int8 **)(a1 + 72), *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 480, VirtualRegister);
  return VirtualRegister;
}

uint64_t sub_1C6126B54(uint64_t a1, uint64_t a2)
{
  llvm::LLVMContext *v3;
  uint64_t v4;
  llvm::Type ****v5;
  llvm::EVT **Int64Ty;
  uint64_t v7;
  int v8;
  int v9;
  llvm::MachineFunction *v10;
  llvm::MachineInstr *v11;
  llvm::MachineInstr *v12;
  int v13;
  llvm::MachineFunction *v14;
  llvm::MachineInstr *v15;
  llvm::MachineInstr *v16;
  int VirtualRegister;
  int v19;
  int v20;
  __int128 v21;
  __int128 v22;

  v20 = 0;
  v4 = 0;
  if (sub_1C478687C(a1, a2, &v20))
  {
    v5 = *(llvm::Type *****)(a1 + 32);
    Int64Ty = (llvm::EVT **)llvm::Type::getInt64Ty(***v5, v3);
    v7 = sub_1C632B874((uint64_t)v5, Int64Ty, 0);
    v4 = v7;
    if ((_DWORD)v7)
    {
      if (*(_BYTE *)(*(_QWORD *)(a1 + 256) + 280))
      {
        v8 = v7 + 1;
        v9 = v7;
      }
      else
      {
        VirtualRegister = llvm::MachineRegisterInfo::createVirtualRegister(*(_QWORD *)(a1 + 48), (uint64_t)&off_1E7F98468, "", 0);
        if (!VirtualRegister)
          return 0;
        v8 = VirtualRegister;
        v19 = llvm::MachineRegisterInfo::createVirtualRegister(*(_QWORD *)(a1 + 48), (uint64_t)&off_1E7F98468, "", 0);
        if (!v19)
          return 0;
        v9 = v19;
      }
      sub_1C4787570(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 640), *(unint64_t **)(*(_QWORD *)(a1 + 32) + 648), (unsigned __int8 **)(a1 + 72), *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 480, v8);
      v10 = sub_1C4787570(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 640), *(unint64_t **)(*(_QWORD *)(a1 + 32) + 648), (unsigned __int8 **)(a1 + 72), *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 69360, v9);
      v12 = v11;
      LODWORD(v21) = 1;
      *((_QWORD *)&v21 + 1) = 0;
      *(_QWORD *)&v22 = 0;
      llvm::MachineInstr::addOperand(v11, v10, (const llvm::MachineOperand *)&v21);
      v13 = v20;
      LODWORD(v21) = 5;
      *((_QWORD *)&v21 + 1) = 0;
      LODWORD(v22) = v20;
      llvm::MachineInstr::addOperand(v12, v10, (const llvm::MachineOperand *)&v21);
      LODWORD(v21) = 5;
      *((_QWORD *)&v21 + 1) = 0;
      LODWORD(v22) = v13;
      llvm::MachineInstr::addOperand(v12, v10, (const llvm::MachineOperand *)&v21);
      LODWORD(v21) = 5;
      *((_QWORD *)&v21 + 1) = 0;
      LODWORD(v22) = v13;
      llvm::MachineInstr::addOperand(v12, v10, (const llvm::MachineOperand *)&v21);
      v21 = 0u;
      v22 = 0u;
      llvm::MachineInstr::addOperand(v12, v10, (const llvm::MachineOperand *)&v21);
      LODWORD(v21) = 1;
      *((_QWORD *)&v21 + 1) = 0;
      *(_QWORD *)&v22 = 0;
      llvm::MachineInstr::addOperand(v12, v10, (const llvm::MachineOperand *)&v21);
      v21 = 0u;
      v22 = 0u;
      llvm::MachineInstr::addOperand(v12, v10, (const llvm::MachineOperand *)&v21);
      if (v9 != (_DWORD)v4)
      {
        v14 = sub_1C4787570(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 640), *(unint64_t **)(*(_QWORD *)(a1 + 32) + 648), (unsigned __int8 **)(a1 + 72), *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 864, v4);
        v16 = v15;
        *((_QWORD *)&v21 + 1) = 0;
        v22 = 0uLL;
        LODWORD(v21) = 0;
        DWORD1(v21) = v9;
        llvm::MachineInstr::addOperand(v15, v14, (const llvm::MachineOperand *)&v21);
        LODWORD(v21) = 1;
        *((_QWORD *)&v21 + 1) = 0;
        *(_QWORD *)&v22 = 33;
        llvm::MachineInstr::addOperand(v16, v14, (const llvm::MachineOperand *)&v21);
        *((_QWORD *)&v21 + 1) = 0;
        v22 = 0uLL;
        LODWORD(v21) = 0;
        DWORD1(v21) = v8;
        llvm::MachineInstr::addOperand(v16, v14, (const llvm::MachineOperand *)&v21);
        LODWORD(v21) = 1;
        *((_QWORD *)&v21 + 1) = 0;
        *(_QWORD *)&v22 = 34;
        llvm::MachineInstr::addOperand(v16, v14, (const llvm::MachineOperand *)&v21);
      }
    }
  }
  return v4;
}

uint64_t sub_1C6126E00(_QWORD ****a1, llvm::LLVMContext *a2, unsigned __int8 a3, int a4, uint64_t a5)
{
  llvm::Type *v7;
  llvm::ConstantInt *Int64Ty;
  llvm::Value **v10;

  if (a4 != 11 || a2 - 3 > 3 || a3 - 3 > 3)
    return 0;
  v7 = (llvm::Type *)***a1[4];
  if (a3 == 5)
  {
    Int64Ty = (llvm::ConstantInt *)(*(_QWORD *)v7 + 1960);
  }
  else if (a3 == 6)
  {
    Int64Ty = (llvm::ConstantInt *)llvm::Type::getInt64Ty(v7, a2);
  }
  else
  {
    Int64Ty = (llvm::ConstantInt *)(*(_QWORD *)v7 + 1936);
  }
  v10 = llvm::ConstantInt::get(Int64Ty, a5, 0);
  return ((uint64_t (*)(_QWORD ****, llvm::Value **))(*a1)[13])(a1, v10);
}

uint64_t sub_1C6126EA8(_QWORD *a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  unsigned int v6;
  int v7;
  int v8;
  int v9;
  int v11;
  _QWORD *v12;
  uint64_t v13;

  v13 = 0;
  if (sub_1C4786904((uint64_t)a1, *(_QWORD *)a2, (int *)&v13 + 1))
  {
    if (sub_1C4786904((uint64_t)a1, *(_QWORD *)a3, (int *)&v13))
    {
      v6 = HIDWORD(v13);
      if (HIDWORD(v13) == (_DWORD)v13)
      {
        v7 = sub_1C47A836C((uint64_t)a1, a2);
        if (v7)
        {
          v8 = v7;
          if (a3[16] - 11 < 2)
          {
            v9 = 0;
            return sub_1C4789F18(a1, v8, v9, v6);
          }
          v11 = sub_1C47A836C((uint64_t)a1, a3);
          if (v11)
          {
            v9 = v11;
            v12 = (_QWORD *)a1[6];
            if ((_UNKNOWN ***)(*(_QWORD *)(v12[3] + 16 * (v9 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8) == &off_1E7F98468)
              sub_1C51A3F30(v12, v9, (uint64_t)&off_1E7F98468, (uint64_t)&off_1E7F984F0, 0);
            return sub_1C4789F18(a1, v8, v9, v6);
          }
        }
      }
    }
  }
  return 0;
}

uint64_t sub_1C6126FBC(uint64_t a1, int a2)
{
  _QWORD *v2;
  _UNKNOWN ***v3;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD **)(a1 + 48);
  v3 = (_UNKNOWN ***)(*(_QWORD *)(v2[3] + 16 * (a2 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
  if (v3 == &off_1E7F982A8 || v3 == &off_1E7F982F0)
    return 0;
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v2 + 16) + 176))(*(_QWORD *)(*v2 + 16));
  v8 = a2;
  v9 = 16 * (a2 & 0x7FFFFFFF);
  v10 = 1;
  v11 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v7 + 200))(v7, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 24) + v9) & 0xFFFFFFFFFFFFFFF8, 1);
  sub_1C51A3F30(*(_QWORD **)(a1 + 48), v8, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 24) + v9) & 0xFFFFFFFFFFFFFFF8, v11, 0);
  return v10;
}

uint64_t sub_1C6127088(uint64_t a1, int a2)
{
  _QWORD *v2;
  _UNKNOWN ***v3;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v2 = *(_QWORD **)(a1 + 48);
  v3 = (_UNKNOWN ***)(*(_QWORD *)(v2[3] + 16 * (a2 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
  if (v3 == &off_1E7F98468 || v3 == &off_1E7F984F0)
    return 0;
  v7 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v2 + 16) + 176))(*(_QWORD *)(*v2 + 16));
  v8 = a2;
  v9 = 16 * (a2 & 0x7FFFFFFF);
  v10 = 33;
  v11 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v7 + 200))(v7, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 24) + v9) & 0xFFFFFFFFFFFFFFF8, 33);
  sub_1C51A3F30(*(_QWORD **)(a1 + 48), v8, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 24) + v9) & 0xFFFFFFFFFFFFFFF8, v11, 0);
  return v10;
}

uint64_t sub_1C6127154(uint64_t a1, int a2, unsigned int a3, unsigned int a4, int *a5, _DWORD *a6)
{
  _QWORD *v12;
  unint64_t v13;
  uint64_t result;
  unsigned int v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v12 = *(_QWORD **)(a1 + 48);
  v13 = *(_QWORD *)(v12[3] + 16 * (*a5 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*v12 + 16) + 176))(*(_QWORD *)(*v12 + 16));
  v15 = *(_DWORD *)(*(_QWORD *)(result + 264)
                  + 24
                  * (*(unsigned __int16 *)(*(_QWORD *)v13 + 24)
                   + *(_DWORD *)(result + 272)
                   * ((*(_QWORD *)(result + 248) - *(_QWORD *)(result + 240)) >> 3)));
  if (v15 == a3)
  {
    *a5 += a4;
    *a6 = 0;
  }
  else
  {
    *a5 += a4 * a3 / v15;
    if (a3 == 16)
      v16 = 1;
    else
      v16 = 33;
    if (v15 != a3 * a2)
      a4 %= v15 / a3;
    v17 = a4 + v16;
    *a6 = v17;
    v18 = *a5;
    v19 = *(_QWORD *)(**(_QWORD **)(a1 + 48) + 16);
    v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v19 + 176))(v19);
    v21 = 16 * (v18 & 0x7FFFFFFF);
    v22 = (*(uint64_t (**)(uint64_t, unint64_t, uint64_t))(*(_QWORD *)v20 + 200))(v20, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 24) + v21) & 0xFFFFFFFFFFFFFFF8, v17);
    return sub_1C51A3F30(*(_QWORD **)(a1 + 48), v18, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 24) + v21) & 0xFFFFFFFFFFFFFFF8, v22, 0);
  }
  return result;
}

uint64_t sub_1C61272C8(uint64_t *a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  int v6;
  llvm::LLVMContext *v7;
  uint64_t v8;
  int v10;
  llvm::ConstantFP **HalfTy;
  uint64_t v12;
  uint64_t v13;
  const llvm::APFloat *v14;
  llvm::APFloatBase *v15;
  llvm::Type *v16;
  llvm::Type **v17;
  _BYTE v18[8];
  uint64_t v19[4];

  v19[3] = *MEMORY[0x1E0C80C00];
  v4 = *(_DWORD *)(a2 + 20);
  if ((v4 & 0x40000000) != 0)
    v5 = *(_QWORD *)(a2 - 8);
  else
    v5 = a2 - 32 * (v4 & 0x7FFFFFF);
  if ((*(unsigned __int8 *)(**(_QWORD **)v5 + 8) | 2) != 2)
    return 0;
  v6 = sub_1C5CC1648(a1, a2);
  if (!v6)
    return 0;
  v10 = v6;
  HalfTy = (llvm::ConstantFP **)llvm::Type::getHalfTy(**(llvm::Type ***)a2, v7);
  v12 = *(_QWORD *)(a2 - 64);
  v13 = *(_QWORD *)(a2 - 32);
  sub_1C47A8E34(v19, (uint64_t)&unk_1C866F15C);
  sub_1C6128DCC((uint64_t)v18, 0);
  v15 = llvm::ConstantFP::get(**(llvm::ConstantFP ***)a2, (llvm::LLVMContext *)v18, v14);
  v17 = (llvm::Type **)llvm::ConstantFP::get(HalfTy, v16, 0.0);
  v8 = sub_1C47B6BD4((uint64_t)a1, v17, a2, v12, v13, (uint64_t)v15, (uint64_t)v17, v10);
  sub_1C47A8258(v19);
  return v8;
}

BOOL sub_1C6127418(uint64_t *a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  llvm::Type *v9;
  llvm::ConstantInt *v11;
  uint64_t v12;
  llvm::Value **v13;
  uint64_t *v14;

  v4 = *(_DWORD *)(a2 + 20);
  if ((v4 & 0x40000000) != 0)
    v5 = *(_QWORD *)(a2 - 8);
  else
    v5 = a2 - 32 * (v4 & 0x7FFFFFF);
  if (*(_BYTE *)(**(_QWORD **)v5 + 8) != 13)
    return 0;
  v6 = sub_1C5CC1648(a1, a2);
  if (!v6)
    return 0;
  v7 = v6;
  v8 = *(_QWORD *)(a2 - 64);
  v9 = *(llvm::Type **)v8;
  if ((*(_DWORD *)(*(_QWORD *)v8 + 8) & 0xFE) == 0x12)
    v9 = (llvm::Type *)**((_QWORD **)v9 + 2);
  if (llvm::Type::getPrimitiveSizeInBits(v9) > 0x20)
    return 0;
  v11 = (llvm::ConstantInt *)(***(_QWORD ***)a2 + 1936);
  v12 = *(_QWORD *)(a2 - 32);
  v13 = llvm::ConstantInt::get(v11, 1, 0);
  v14 = (uint64_t *)llvm::ConstantInt::get(v11, 0, 0);
  return sub_1C47B891C((uint64_t)a1, v14, a2, v8, v12, (uint64_t)v13, (uint64_t)v14, v7);
}

uint64_t sub_1C6127534(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v5;
  _UNKNOWN ***v6;
  unsigned int v7;
  uint64_t VirtualRegister;
  llvm::MachineFunction *v9;
  llvm::MachineInstr *v10;
  llvm::MachineInstr *v11;
  llvm::MachineFunction *v13[2];
  __int128 v14;
  __int128 v15;

  if (a3 > 0x10)
  {
    if (a3 != 32)
      return 0;
    v6 = &off_1E7F98468;
    v7 = 4802;
    v5 = 0xFFFFFFFFLL;
  }
  else
  {
    if (a3 == 16)
      v5 = 0x10000FFFFLL;
    else
      v5 = 0x1000000FFLL;
    v6 = &off_1E7F982A8;
    v7 = 4942;
  }
  VirtualRegister = llvm::MachineRegisterInfo::createVirtualRegister(*(_QWORD *)(a1 + 48), (uint64_t)v6, "", 0);
  if ((_DWORD)VirtualRegister)
  {
    v9 = sub_1C4787570(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 640), *(unint64_t **)(*(_QWORD *)(a1 + 32) + 648), (unsigned __int8 **)(a1 + 72), *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 48 * v7, VirtualRegister);
    v11 = v10;
    LODWORD(v14) = 1;
    *((_QWORD *)&v14 + 1) = 0;
    *(_QWORD *)&v15 = 0;
    llvm::MachineInstr::addOperand(v10, v9, (const llvm::MachineOperand *)&v14);
    *((_QWORD *)&v14 + 1) = 0;
    v15 = 0uLL;
    LODWORD(v14) = 0;
    DWORD1(v14) = a2;
    llvm::MachineInstr::addOperand(v11, v9, (const llvm::MachineOperand *)&v14);
    LODWORD(v14) = 1;
    *((_QWORD *)&v14 + 1) = 0;
    *(_QWORD *)&v15 = 0;
    llvm::MachineInstr::addOperand(v11, v9, (const llvm::MachineOperand *)&v14);
    LODWORD(v14) = 1;
    *((_QWORD *)&v14 + 1) = 0;
    *(_QWORD *)&v15 = 0x100000001;
    llvm::MachineInstr::addOperand(v11, v9, (const llvm::MachineOperand *)&v14);
    v13[0] = v9;
    v13[1] = v11;
    LODWORD(v14) = 1;
    *((_QWORD *)&v14 + 1) = 0;
    *(_QWORD *)&v15 = v5;
    llvm::MachineInstr::addOperand(v11, v9, (const llvm::MachineOperand *)&v14);
    v14 = 0u;
    v15 = 0u;
    llvm::MachineInstr::addOperand(v11, v9, (const llvm::MachineOperand *)&v14);
    sub_1C477A2C4(v13);
  }
  return VirtualRegister;
}

uint64_t sub_1C61276B0(uint64_t a1, int a2, int a3)
{
  uint64_t v6;
  int v7;
  _UNKNOWN ***v8;
  unsigned int v9;
  unsigned int v10;
  int VirtualRegister;
  int v12;
  uint64_t v13;
  llvm::MachineFunction *v14;
  llvm::MachineInstr *v15;
  llvm::MachineInstr *v16;
  llvm::MachineFunction *v17;
  llvm::MachineInstr *v18;
  llvm::MachineInstr *v19;
  llvm::MachineFunction *v21;
  llvm::MachineInstr *v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;

  v6 = 0x100000008;
  v7 = sub_1C6126FBC(a1, a2);
  if (a3 == 16)
  {
    v8 = &off_1E7F982A8;
    v9 = 12435;
    v10 = 12977;
  }
  else
  {
    if (a3 != 32)
      return 0;
    v6 = 0x100000018;
    v8 = &off_1E7F98468;
    v9 = 12379;
    v10 = 12961;
  }
  VirtualRegister = llvm::MachineRegisterInfo::createVirtualRegister(*(_QWORD *)(a1 + 48), (uint64_t)v8, "", 0);
  if (!VirtualRegister)
    return 0;
  v12 = VirtualRegister;
  v13 = llvm::MachineRegisterInfo::createVirtualRegister(*(_QWORD *)(a1 + 48), (uint64_t)v8, "", 0);
  if ((_DWORD)v13)
  {
    v14 = sub_1C4787570(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 640), *(unint64_t **)(*(_QWORD *)(a1 + 32) + 648), (unsigned __int8 **)(a1 + 72), *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 48 * v9, v12);
    v16 = v15;
    v21 = v14;
    v22 = v15;
    v23 = 1;
    v25 = 0;
    v26 = 0;
    llvm::MachineInstr::addOperand(v15, v14, (const llvm::MachineOperand *)&v23);
    v23 = 1;
    v25 = 0;
    v26 = 0x100000000;
    llvm::MachineInstr::addOperand(v16, v14, (const llvm::MachineOperand *)&v23);
    v25 = 0;
    v26 = 0;
    v27 = 0;
    v23 = v7 << 8;
    v24 = a2;
    llvm::MachineInstr::addOperand(v16, v14, (const llvm::MachineOperand *)&v23);
    v23 = 1;
    v25 = 0;
    v26 = 0;
    llvm::MachineInstr::addOperand(v16, v14, (const llvm::MachineOperand *)&v23);
    v23 = 1;
    v25 = 0;
    v26 = v6;
    llvm::MachineInstr::addOperand(v16, v14, (const llvm::MachineOperand *)&v23);
    v23 = 1;
    v25 = 0;
    v26 = 0;
    llvm::MachineInstr::addOperand(v16, v14, (const llvm::MachineOperand *)&v23);
    sub_1C477A2C4(&v21);
    v17 = sub_1C4787570(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 640), *(unint64_t **)(*(_QWORD *)(a1 + 32) + 648), (unsigned __int8 **)(a1 + 72), *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 48 * v10, v13);
    v19 = v18;
    v21 = v17;
    v22 = v18;
    v23 = 1;
    v25 = 0;
    v26 = 0;
    llvm::MachineInstr::addOperand(v18, v17, (const llvm::MachineOperand *)&v23);
    v25 = 0;
    v26 = 0;
    v23 = 0;
    v24 = v12;
    v27 = 0;
    llvm::MachineInstr::addOperand(v19, v17, (const llvm::MachineOperand *)&v23);
    v23 = 1;
    v25 = 0;
    v26 = 0;
    llvm::MachineInstr::addOperand(v19, v17, (const llvm::MachineOperand *)&v23);
    v23 = 1;
    v25 = 0;
    v26 = v6;
    llvm::MachineInstr::addOperand(v19, v17, (const llvm::MachineOperand *)&v23);
    sub_1C477A2C4(&v21);
  }
  return v13;
}

uint64_t sub_1C6127918(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  int v3;
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  BOOL v8;
  int v9;
  unsigned int v10;

  v3 = *(_DWORD *)(a2 + 20);
  if ((v3 & 0x40000000) != 0)
    v4 = *(_QWORD *)(a2 - 8);
  else
    v4 = a2 - 32 * (v3 & 0x7FFFFFF);
  if ((*(unsigned __int8 *)(**(_QWORD **)v4 + 8) | 2) == 2)
  {
    v5 = *(unsigned __int8 *)(a2 + 16);
    v6 = *(_DWORD *)(*(_QWORD *)a2 + 8);
    v7 = *(_DWORD *)(*(_QWORD *)a2 + 8) >> 8;
    if (v6 == 13 && v7 == 32)
    {
      v8 = v5 == 70;
      v9 = 8;
      goto LABEL_8;
    }
    if (v6 == 13 && v7 == 16)
    {
      v8 = v5 == 70;
      v9 = 4;
LABEL_8:
      if (v8)
        v10 = v9 + 1;
      else
        v10 = v9;
      return sub_1C4793754(a1, a2, a3, v10, 0, 0);
    }
    if (v6 == 13 && v7 == 8)
    {
      v10 = v5 == 70;
      return sub_1C4793754(a1, a2, a3, v10, 0, 0);
    }
  }
  return 0;
}

uint64_t sub_1C61279C0(uint64_t a1, int a2, int a3)
{
  uint64_t v5;
  llvm::MachineFunction *v8;
  llvm::MachineInstr *v9;
  uint64_t v10;
  int VirtualRegister;
  int v13;
  llvm::MachineFunction *v14;
  llvm::MachineInstr *v15;
  llvm::MachineInstr *v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;

  v5 = *(_QWORD *)(a1 + 48);
  if ((_UNKNOWN ***)(*(_QWORD *)(*(_QWORD *)(v5 + 24) + 16 * (a3 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8) == &off_1E7F98AB8)
  {
    VirtualRegister = llvm::MachineRegisterInfo::createVirtualRegister(v5, (uint64_t)&off_1E7F98AB8, "", 0);
    if (VirtualRegister)
    {
      v13 = VirtualRegister;
      sub_1C4787570(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 640), *(unint64_t **)(*(_QWORD *)(a1 + 32) + 648), (unsigned __int8 **)(a1 + 72), *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 480, VirtualRegister);
      v14 = sub_1C4787570(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 640), *(unint64_t **)(*(_QWORD *)(a1 + 32) + 648), (unsigned __int8 **)(a1 + 72), *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 432, a3);
      v16 = v15;
      v20 = 0;
      v21 = 0;
      v18 = 0;
      v19 = v13;
      v22 = 0;
      llvm::MachineInstr::addOperand(v15, v14, (const llvm::MachineOperand *)&v18);
      v17 = sub_1C6127088(a1, a2);
      v20 = 0;
      v21 = 0;
      v22 = 0;
      v18 = v17 << 8;
      v19 = a2;
      llvm::MachineInstr::addOperand(v16, v14, (const llvm::MachineOperand *)&v18);
      v10 = 1;
      v18 = 1;
      v20 = 0;
      v21 = 33;
      llvm::MachineInstr::addOperand(v16, v14, (const llvm::MachineOperand *)&v18);
    }
    else
    {
      return 0;
    }
  }
  else
  {
    v8 = sub_1C4787570(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 640), *(unint64_t **)(*(_QWORD *)(a1 + 32) + 648), (unsigned __int8 **)(a1 + 72), *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 912, a3);
    v20 = 0;
    v21 = 0;
    v18 = 0;
    v19 = a2;
    v22 = 0;
    llvm::MachineInstr::addOperand(v9, v8, (const llvm::MachineOperand *)&v18);
    sub_1C4787570(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 640), *(unint64_t **)(*(_QWORD *)(a1 + 32) + 648), (unsigned __int8 **)(a1 + 72), *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 480, a3 + 1);
    return 1;
  }
  return v10;
}

uint64_t sub_1C6127B84(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;

  v4 = sub_1C47A836C(a1, (unsigned __int8 *)a2);
  if (!v4)
    return 0;
  v7 = **(_QWORD **)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
  v8 = *(_DWORD *)(v7 + 8);
  if ((v8 & 0xFE) == 0x12)
    v8 = *(_DWORD *)(**(_QWORD **)(v7 + 16) + 8);
  v9 = v8 >> 8;
  if (v9)
  {
    if (v9 == 64)
      return sub_1C479783C(a1, a2, v4, 0, 0, 0);
    return 0;
  }
  return sub_1C4799A28(a1, a2, v4, v5, v6);
}

uint64_t sub_1C6127C28(uint64_t a1, uint64_t a2)
{
  uint64_t VirtualRegister;
  uint64_t v5;
  int v6;
  int v7;
  llvm::MachineFunction *v8;
  llvm::MachineInstr *v9;
  llvm::MachineInstr *v10;
  llvm::MachineFunction *v11;
  llvm::MachineInstr *v12;
  llvm::MachineInstr *v13;
  __int128 v15;
  __int128 v16;

  if (*(_BYTE *)(*(_QWORD *)(a1 + 256) + 280))
  {
    VirtualRegister = llvm::MachineRegisterInfo::createVirtualRegister(*(_QWORD *)(a1 + 48), (uint64_t)&off_1E7F98800, "", 0);
    if ((_DWORD)VirtualRegister
      && (v5 = VirtualRegister,
          (v6 = llvm::MachineRegisterInfo::createVirtualRegister(*(_QWORD *)(a1 + 48), (uint64_t)&off_1E7F982A8, "", 0)) != 0))
    {
      v7 = v6;
      v8 = sub_1C4787570(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 640), *(unint64_t **)(*(_QWORD *)(a1 + 32) + 648), (unsigned __int8 **)(a1 + 72), *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 48720, v6);
      v10 = v9;
      LODWORD(v15) = 1;
      *((_QWORD *)&v15 + 1) = 0;
      *(_QWORD *)&v16 = 0;
      llvm::MachineInstr::addOperand(v9, v8, (const llvm::MachineOperand *)&v15);
      LODWORD(v15) = 1;
      *((_QWORD *)&v15 + 1) = 0;
      *(_QWORD *)&v16 = 0;
      llvm::MachineInstr::addOperand(v10, v8, (const llvm::MachineOperand *)&v15);
      LODWORD(v15) = 1;
      *((_QWORD *)&v15 + 1) = 0;
      *(_QWORD *)&v16 = 0;
      llvm::MachineInstr::addOperand(v10, v8, (const llvm::MachineOperand *)&v15);
      LODWORD(v15) = 1;
      *((_QWORD *)&v15 + 1) = 0;
      *(_QWORD *)&v16 = 0;
      llvm::MachineInstr::addOperand(v10, v8, (const llvm::MachineOperand *)&v15);
      LODWORD(v15) = 1;
      *((_QWORD *)&v15 + 1) = 0;
      *(_QWORD *)&v16 = 0;
      llvm::MachineInstr::addOperand(v10, v8, (const llvm::MachineOperand *)&v15);
      v15 = 0u;
      v16 = 0u;
      llvm::MachineInstr::addOperand(v10, v8, (const llvm::MachineOperand *)&v15);
      LODWORD(v15) = 1;
      *((_QWORD *)&v15 + 1) = 0;
      *(_QWORD *)&v16 = 0;
      llvm::MachineInstr::addOperand(v10, v8, (const llvm::MachineOperand *)&v15);
      v15 = 0u;
      v16 = 0u;
      llvm::MachineInstr::addOperand(v10, v8, (const llvm::MachineOperand *)&v15);
      v11 = sub_1C4787570(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 640), *(unint64_t **)(*(_QWORD *)(a1 + 32) + 648), (unsigned __int8 **)(a1 + 72), *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 864, v5);
      v13 = v12;
      *((_QWORD *)&v15 + 1) = 0;
      v16 = 0uLL;
      LODWORD(v15) = 0;
      DWORD1(v15) = a2;
      llvm::MachineInstr::addOperand(v12, v11, (const llvm::MachineOperand *)&v15);
      LODWORD(v15) = 1;
      *((_QWORD *)&v15 + 1) = 0;
      *(_QWORD *)&v16 = 33;
      llvm::MachineInstr::addOperand(v13, v11, (const llvm::MachineOperand *)&v15);
      *((_QWORD *)&v15 + 1) = 0;
      v16 = 0uLL;
      LODWORD(v15) = 0;
      DWORD1(v15) = v7;
      llvm::MachineInstr::addOperand(v13, v11, (const llvm::MachineOperand *)&v15);
      LODWORD(v15) = 1;
      *((_QWORD *)&v15 + 1) = 0;
      *(_QWORD *)&v16 = 3;
      llvm::MachineInstr::addOperand(v13, v11, (const llvm::MachineOperand *)&v15);
      return v5;
    }
    else
    {
      return 0;
    }
  }
  return a2;
}

uint64_t sub_1C6127E60(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;

  if (!*(_BYTE *)(a1[32] + 280))
    return 0;
  v2 = **(_QWORD **)(a2 - 32);
  v3 = *(_DWORD *)(v2 + 8);
  if ((v3 & 0xFE) == 0x12)
    v3 = *(_DWORD *)(**(_QWORD **)(v2 + 16) + 8);
  v4 = v3 >> 8;
  if (v4 - 1 < 2)
    return sub_1C479AAC0(a1, a2);
  if (v4 != 64)
  {
    if (!v4)
      return sub_1C479B900(a1, a2);
    return 0;
  }
  return sub_1C479C924((uint64_t)a1, a2);
}

uint64_t sub_1C6127EC0(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned int v4;

  if (!*(_BYTE *)(a1[32] + 281))
    return 0;
  v2 = **(_QWORD **)(a2 - 32);
  v3 = *(_DWORD *)(v2 + 8);
  if ((v3 & 0xFE) == 0x12)
    v3 = *(_DWORD *)(**(_QWORD **)(v2 + 16) + 8);
  v4 = v3 >> 8;
  if (v4 != 64)
  {
    if (!v4)
      return sub_1C479B900(a1, a2);
    return 0;
  }
  return sub_1C479C924((uint64_t)a1, a2);
}

uint64_t sub_1C6127F10(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;

  v2 = a1[32];
  if (*(_BYTE *)(v2 + 280))
    return sub_1C6127E60(a1, a2);
  if (*(_BYTE *)(v2 + 281))
    return sub_1C6127EC0(a1, a2);
  return 0;
}

uint64_t sub_1C6127F34(uint64_t a1, unsigned __int8 *a2)
{
  llvm::Type *v4;
  llvm::Type *v5;
  unsigned int PrimitiveSizeInBits;
  int v7;
  unsigned __int8 *v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  _UNKNOWN ***v14;
  unsigned int v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  llvm::MachineFunction *v22;
  llvm::MachineInstr *v23;
  _UNKNOWN ***v25;
  int VirtualRegister;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  int v31;
  llvm::MachineInstr *v32;
  llvm::MachineFunction *v33;
  _UNKNOWN ***v34;
  _BOOL4 v36;
  int v37;
  uint64_t v38;
  uint64_t *v39[5];
  _QWORD v40[2];
  _QWORD v41[2];
  int v42;
  int v43;
  unsigned int v44;
  unsigned __int8 *v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;

  v45 = a2;
  v4 = *(llvm::Type **)a2;
  v5 = *(llvm::Type **)a2;
  if ((*(_DWORD *)(*(_QWORD *)a2 + 8) & 0xFE) == 0x12)
    v5 = (llvm::Type *)**((_QWORD **)v4 + 2);
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(v5);
  v44 = PrimitiveSizeInBits;
  v7 = *((_DWORD *)a2 + 5);
  if ((v7 & 0x40000000) != 0)
    v8 = (unsigned __int8 *)*((_QWORD *)a2 - 1);
  else
    v8 = &a2[-32 * (v7 & 0x7FFFFFF)];
  v9 = *((unsigned int *)v4 + 8);
  v10 = **(_QWORD **)v8;
  v43 = *(_DWORD *)(v10 + 32);
  if ((*(_DWORD *)(v10 + 8) & 0xFE) == 0x12)
    v10 = **(_QWORD **)(v10 + 16);
  if (PrimitiveSizeInBits == llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v10)
    && (PrimitiveSizeInBits == 32 || PrimitiveSizeInBits == 16))
  {
    v11 = sub_1C47A836C(a1, a2);
    if (v11)
    {
      v12 = v11;
      v13 = *(_QWORD *)(a1 + 48);
      v14 = (_UNKNOWN ***)(*(_QWORD *)(*(_QWORD *)(v13 + 24) + 16 * (v12 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
      if (v14 == &off_1E7F982F0 || v14 == &off_1E7F982A8)
        v16 = 16;
      else
        v16 = 32;
      v41[0] = 0;
      v41[1] = 0;
      v42 = 0;
      v40[0] = v41;
      v40[1] = a1;
      v39[0] = (uint64_t *)&v45;
      v39[1] = (uint64_t *)&v43;
      v39[2] = v40;
      v39[3] = (uint64_t *)a1;
      v39[4] = (uint64_t *)&v44;
      if (v16 / PrimitiveSizeInBits == 2)
      {
        if ((_DWORD)v9)
        {
          v17 = 0;
          v18 = 1;
          do
          {
            v19 = sub_1C6126ACC(a1, 0, 0);
            v20 = sub_1C479F454(v39, (_QWORD *)a1, v19, v17, 1u);
            v21 = sub_1C479F454(v39, (_QWORD *)a1, v20, v17 + 1, 2u);
            v22 = sub_1C4787570(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 640), *(unint64_t **)(*(_QWORD *)(a1 + 32) + 648), (unsigned __int8 **)(a1 + 72), *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 912, v12 + (v17 >> 1));
            v48 = 0;
            v46 = 0;
            v47 = v21;
            v49 = 0;
            v50 = 0;
            llvm::MachineInstr::addOperand(v23, v22, (const llvm::MachineOperand *)&v46);
            v17 += 2;
          }
          while (v17 < v9);
        }
        else
        {
          v18 = 1;
        }
        goto LABEL_27;
      }
      if (PrimitiveSizeInBits >= 0x20)
      {
        v25 = off_1E7F94CC8[(PrimitiveSizeInBits >> 5) + 1];
        VirtualRegister = llvm::MachineRegisterInfo::createVirtualRegister(v13, (uint64_t)v25, "", 0);
        if (VirtualRegister)
        {
          v27 = VirtualRegister;
          if (v9 < 2)
          {
LABEL_33:
            v37 = v27;
            if (!(_DWORD)v9)
            {
LABEL_50:
              v18 = sub_1C4789F18((_QWORD *)a1, v12, v37, v44 * v9);
              goto LABEL_27;
            }
            v29 = 0;
            v30 = 0;
            while (1)
            {
              v38 = 0;
              if (!sub_1C479F740(v39, v29, (int *)&v38 + 1, &v38))
                break;
              v31 = HIDWORD(v38);
              if (!(HIDWORD(v38) | v30))
              {
                v34 = (_UNKNOWN ***)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 48) + 24) + 16 * (v12 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
                v36 = v34 == &off_1E7F982A8 || v34 == &off_1E7F982F0;
                v30 = sub_1C6126ACC(a1, v36, 1);
              }
              v33 = sub_1C4787570(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 640), *(unint64_t **)(*(_QWORD *)(a1 + 32) + 648), (unsigned __int8 **)(a1 + 72), *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 912, v37 + (int)v29);
              v48 = 0;
              if (v31)
              {
                v49 = 0;
                v50 = 0;
                v46 = (v38 & 0xFFF) << 8;
                v47 = v31;
              }
              else
              {
                v46 = 0;
                v47 = v30;
                v49 = 0;
                v50 = 0;
              }
              llvm::MachineInstr::addOperand(v32, v33, (const llvm::MachineOperand *)&v46);
              if (v9 == ++v29)
                goto LABEL_50;
            }
          }
          else
          {
            v28 = v9 - 1;
            while (llvm::MachineRegisterInfo::createVirtualRegister(*(_QWORD *)(a1 + 48), (uint64_t)v25, "", 0))
            {
              if (!--v28)
                goto LABEL_33;
            }
          }
        }
      }
      v18 = 0;
LABEL_27:
      MEMORY[0x1CAA32FB4](v41[0], 8);
      return v18;
    }
  }
  return 0;
}

void sub_1C6128304(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  llvm::MachineFunction *v7;
  llvm::MachineInstr *v8;
  llvm::MachineInstr *v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  int v13;
  unsigned __int8 **v14;
  int v15;
  _DWORD *v16;
  int v17;
  _DWORD *v18;
  int v19;
  llvm::MachineFunction *v20;
  llvm::MachineInstr *v21;
  int v22;
  void *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD v29[14];

  v29[12] = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a1 + 272);
  v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 592))(v4, 103);
  if (v5 || (v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v4 + 592))(v4, 104)) != 0)
  {
    v6 = 583152;
    if ((*(_WORD *)(v5 + 18) & 0x3FF0) == 0x680)
      v6 = 583248;
    v7 = sub_1C477A100(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 640), *(unint64_t **)(*(_QWORD *)(a1 + 32) + 648), (unsigned __int8 **)(a1 + 72), *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + v6);
    v9 = v8;
    v24 = 0;
    v25 = v5;
    LODWORD(v26) = 0;
    v23 = (void *)10;
    llvm::MachineInstr::addOperand(v8, v7, (const llvm::MachineOperand *)&v23);
    if ((*(_DWORD *)(a2 + 20) & 0x7FFFFFF) != 0)
    {
      v27 = v29;
      v28 = 0x800000000;
      v10 = **(_QWORD **)(a1 + 32);
      v11 = (*(unsigned __int16 *)(v10 + 18) >> 4) & 0x3FF;
      v23 = &v25;
      v24 = 0x800000000;
      llvm::GetReturnInfo(v11, **(_QWORD ***)(*(_QWORD *)(v10 + 24) + 16), *(_QWORD *)(v10 + 112), (uint64_t)&v23, *(unsigned __int8 **)(a1 + 104), *(llvm::DataLayout **)(a1 + 88));
      sub_1C61254B4(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), **(_QWORD **)a2, 105, (uint64_t)&v23, (uint64_t)&v27);
      if (v23 != &v25)
        free(v23);
      v12 = sub_1C476C6C0((unsigned int *)&v27);
      (*(void (**)(_QWORD, _QWORD, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t))(**(_QWORD **)(a1 + 272) + 8))(*(_QWORD *)(a1 + 272), 0, 4 * v12, 1, 0, 1, 1);
      LODWORD(v23) = 1;
      v24 = 0;
      v25 = v12;
      llvm::MachineInstr::addOperand(v9, v7, (const llvm::MachineOperand *)&v23);
      v13 = *(_DWORD *)(a2 + 20);
      if ((v13 & 0x40000000) != 0)
        v14 = *(unsigned __int8 ***)(a2 - 8);
      else
        v14 = (unsigned __int8 **)(a2 - 32 * (v13 & 0x7FFFFFF));
      v15 = sub_1C47A836C(a1, *v14);
      v16 = v27;
      if ((_DWORD)v28)
      {
        v17 = v15;
        v18 = (_DWORD *)v27 + 3 * v28;
        do
        {
          v19 = *v16 + v17;
          v20 = sub_1C612596C(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 640), (uint64_t)v9, (unsigned __int8 **)(a1 + 72), *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 912, v16[1]);
          v24 = 0;
          LODWORD(v23) = 0;
          HIDWORD(v23) = v19;
          v25 = 0;
          v26 = 0;
          llvm::MachineInstr::addOperand(v21, v20, (const llvm::MachineOperand *)&v23);
          v22 = v16[1];
          v24 = 0;
          v25 = 0;
          v26 = 0;
          LODWORD(v23) = 0x2000000;
          HIDWORD(v23) = v22;
          llvm::MachineInstr::addOperand(v9, v7, (const llvm::MachineOperand *)&v23);
          v16 += 3;
        }
        while (v16 != v18);
        v16 = v27;
      }
      if (v16 != (_DWORD *)v29)
        free(v16);
    }
    else
    {
      LODWORD(v23) = 1;
      v24 = 0;
      v25 = 0;
      llvm::MachineInstr::addOperand(v9, v7, (const llvm::MachineOperand *)&v23);
    }
  }
  else
  {
    sub_1C477A100(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 640), *(unint64_t **)(*(_QWORD *)(a1 + 32) + 648), (unsigned __int8 **)(a1 + 72), *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 582960);
  }
}

void sub_1C612865C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(a1 + 32);
  if (((1 << ((*(unsigned __int16 *)(*(_QWORD *)v2 + 18) >> 4) - 100)) & 0xDB) != 0)
  {
    sub_1C477A100(*(_QWORD *)(v2 + 640), *(unint64_t **)(v2 + 648), (unsigned __int8 **)(a1 + 72), *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 582960);
  }
  else if (((*(unsigned __int16 *)(*(_QWORD *)v2 + 18) >> 4) & 0x3FF) == 0x66)
  {
    sub_1C477A100(*(_QWORD *)(v2 + 640), *(unint64_t **)(v2 + 648), (unsigned __int8 **)(a1 + 72), *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 644352);
  }
  else
  {
    sub_1C6128304(a1, a2);
  }
}

uint64_t sub_1C61286D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = operator new();
  return sub_1C6129314(v4, a1, a2);
}

uint64_t sub_1C6128714(uint64_t a1, llvm::Function *this, int a3)
{
  uint64_t **v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned __int8 v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  int v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t *v17;
  unsigned int v18;
  unsigned int v19;
  unsigned __int8 v20;
  uint64_t v21;
  unsigned int v22;
  int v23;
  int v24;
  unsigned int v25;
  BOOL v26;
  int v27;
  int VirtualRegister;
  llvm::MachineFunction *v29;
  llvm::MachineInstr *v30;
  uint64_t v31;
  uint64_t v32;
  int v34;
  _DWORD v36[2];
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;

  if ((*((_WORD *)this + 9) & 1) == 0)
  {
    v5 = (uint64_t **)((char *)this + 88);
    v6 = (uint64_t *)*((_QWORD *)this + 11);
LABEL_3:
    v7 = v6;
    goto LABEL_4;
  }
  llvm::Function::BuildLazyArguments(this);
  v5 = (uint64_t **)((char *)this + 88);
  v6 = (uint64_t *)*((_QWORD *)this + 11);
  if ((*((_WORD *)this + 9) & 1) == 0)
    goto LABEL_3;
  llvm::Function::BuildLazyArguments(this);
  v7 = (uint64_t *)*((_QWORD *)this + 11);
LABEL_4:
  v8 = &v7[5 * *((_QWORD *)this + 12)];
  if (v6 == v8)
  {
LABEL_10:
    if (a3 == 771)
      v13 = 1539;
    else
      v13 = 1027;
    v34 = v13;
    if (a3 == 771)
      v14 = 1795;
    else
      v14 = 1283;
    if ((*((_WORD *)this + 9) & 1) != 0)
    {
      llvm::Function::BuildLazyArguments(this);
      v15 = (uint64_t *)*((_QWORD *)this + 11);
      if ((*((_WORD *)this + 9) & 1) != 0)
      {
        llvm::Function::BuildLazyArguments(this);
        v16 = (uint64_t *)*((_QWORD *)this + 11);
        goto LABEL_19;
      }
    }
    else
    {
      v15 = *v5;
    }
    v16 = v15;
LABEL_19:
    v17 = &v16[5 * *((_QWORD *)this + 12)];
    if (v15 == v17)
    {
      v18 = 0;
    }
    else
    {
      v18 = 0;
      v19 = -1;
      do
      {
        v20 = sub_1C47A7FD0(*(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 88), *v15, 0);
        v21 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 104) + 424))(*(_QWORD *)(a1 + 104), v20, 0);
        if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 112) + 264)
                        + 24
                        * (*(unsigned __int16 *)(*(_QWORD *)v21 + 24)
                         + *(_DWORD *)(*(_QWORD *)(a1 + 112) + 272)
                         * ((*(_QWORD *)(*(_QWORD *)(a1 + 112) + 248)
                                         - *(_QWORD *)(*(_QWORD *)(a1 + 112) + 240)) >> 3))
                        + 4) & 0xFFFFFFF8) == 0x20)
        {
          v22 = a3 + ((v18 + 1) >> 1);
          if ((v18 & 1) != 0)
            v19 = v18;
          v18 += (v18 & 1) + 2;
        }
        else
        {
          v23 = v34;
          if ((v18 & 1) != 0)
            v24 = v34;
          else
            v24 = v14;
          v22 = v24 + (v18 >> 1);
          if ((v19 & 1) == 0)
            v23 = v14;
          v25 = v23 + (v19 >> 1);
          v26 = v19 == -1;
          if (v19 == -1)
            ++v18;
          v19 = -1;
          if (!v26)
            v22 = v25;
        }
        v27 = llvm::MachineFunction::addLiveIn(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 8), v22, v21);
        VirtualRegister = llvm::MachineRegisterInfo::createVirtualRegister(*(_QWORD *)(a1 + 48), v21, (unsigned __int8 *)&unk_1C8767743, 0);
        v29 = sub_1C4787570(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 640), *(unint64_t **)(*(_QWORD *)(a1 + 32) + 648), (unsigned __int8 **)(a1 + 72), *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 912, VirtualRegister);
        v37 = 0;
        v38 = 0;
        v39 = 0;
        v36[0] = 0x4000000;
        v36[1] = v27;
        llvm::MachineInstr::addOperand(v30, v29, (const llvm::MachineOperand *)v36);
        sub_1C632A598(a1, (uint64_t)v15, VirtualRegister, 1);
        v15 += 5;
      }
      while (v15 != v17);
    }
    if (a3 == 771)
    {
      v31 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 8);
      v32 = *(_QWORD *)(v31 + 48);
      if (!v32)
      {
        v32 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(v31 + 8) + 216))(*(_QWORD *)(v31 + 8), v31 + 128, v31);
        *(_QWORD *)(v31 + 48) = v32;
      }
      *(_DWORD *)(v32 + 16) = (((v18 + 1) >> 1) + 7) & 0xFFFFFFF8;
    }
    return 1;
  }
  while (1)
  {
    v9 = *(_QWORD *)(a1 + 104);
    v10 = sub_1C47A7FD0(v9, *(_QWORD *)(a1 + 88), *v6, 0);
    if (!v10)
      return 0;
    if (!*(_QWORD *)(v9 + 8 * v10 + 96))
      return 0;
    v11 = sub_1C47A7FD0(*(_QWORD *)(a1 + 104), *(_QWORD *)(a1 + 88), *v6, 0);
    if (!v11)
      return 0;
    v12 = *(_QWORD *)(a1 + 112);
    if ((((*(_DWORD *)(*(_QWORD *)(v12 + 264)
                      + 24
                      * (*(unsigned __int16 *)(*(_QWORD *)(*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 104) + 424))(*(_QWORD *)(a1 + 104), v11, 0)+ 24)+ *(_DWORD *)(v12 + 272) * ((*(_QWORD *)(v12 + 248) - *(_QWORD *)(v12 + 240)) >> 3))) >> 3)- 2) & 0xFFFFFFFD) != 0)return 0;
    v6 += 5;
    if (v6 == v8)
      goto LABEL_10;
  }
}

uint64_t sub_1C6128A94(uint64_t a1)
{
  _BYTE *v1;
  unsigned __int16 *v2;
  unsigned int v4;
  int v5;
  int v6;

  v1 = *(_BYTE **)(a1 + 32);
  if (!v1[48])
    return 0;
  v2 = *(unsigned __int16 **)v1;
  if (*(_DWORD *)(*(_QWORD *)(*(_QWORD *)v1 + 24) + 8) > 0xFFu)
    return 0;
  v4 = ((v2[9] >> 4) & 0x3FF) - 100;
  if (v4 > 7)
    return 0;
  v5 = 1 << v4;
  if ((v5 & 0xA3) != 0)
    return 1;
  if ((v5 & 0x18) != 0)
    v6 = 3;
  else
    v6 = 771;
  return sub_1C6128714(a1, (llvm::Function *)v2, v6);
}

_QWORD *sub_1C6128B04(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E7F94C48;
  v2 = (void *)a1[21];
  if (v2 != (void *)a1[20])
    free(v2);
  return sub_1C632B674(a1);
}

void sub_1C6128B44(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E7F94C48;
  v2 = (void *)a1[21];
  if (v2 != (void *)a1[20])
    free(v2);
  sub_1C632B674(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C6128B98()
{
  return 0;
}

uint64_t sub_1C6128BA0()
{
  return 0;
}

uint64_t sub_1C6128BA8(uint64_t a1, const llvm::Value *a2)
{
  uint64_t result;
  _QWORD *v4;
  const llvm::Value *v5;

  v5 = a2;
  if (*(_BYTE *)(*(_QWORD *)a2 + 8) == 12)
    return 0;
  v4 = sub_1C6128C08((uint64_t *)(a1 + 80), &v5);
  result = sub_1C632BA34(a1, v5);
  *((_DWORD *)v4 + 2) = result;
  return result;
}

_QWORD *sub_1C6128C08(uint64_t *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C61252B8(a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C6128C6C((uint64_t)a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    *((_DWORD *)v5 + 2) = 0;
  }
  return v5;
}

_QWORD *sub_1C6128C6C(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C47A8B04(a1, v7);
  v9 = 0;
  sub_1C61252B8((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

uint64_t sub_1C6128D18(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10 = 0;
      result = sub_1C61252B8((uint64_t *)v5, (_QWORD *)a2, &v10);
      v9 = v10;
      *v10 = *(_QWORD *)a2;
      *((_DWORD *)v9 + 2) = *(_DWORD *)(a2 + 8);
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 16;
  }
  return result;
}

void sub_1C6128DCC(uint64_t a1, char a2)
{
  llvm::detail::DoubleAPFloat *v2;
  void *v3;

  v3 = *(void **)(a1 + 8);
  v2 = (llvm::detail::DoubleAPFloat *)(a1 + 8);
  if (v3 == &unk_1C866F1C0)
    llvm::detail::DoubleAPFloat::makeSmallest(v2, a2);
  else
    llvm::detail::IEEEFloat::makeSmallest(v2, a2);
}

void sub_1C6128DE8()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C6128DFC(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_1C6128E04(uint64_t a1, uint64_t a2)
{
  return sub_1C5CC1648(*(uint64_t **)(a1 + 56), a2);
}

uint64_t sub_1C6128E0C(uint64_t a1, uint64_t a2)
{
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 352))(*(_QWORD *)(a1 + 8)))
    return sub_1C6129044(*(_QWORD *)(a1 + 56), a2);
  else
    return a2;
}

uint64_t sub_1C6128E58(uint64_t a1, int a2)
{
  return sub_1C6129180(*(_QWORD *)(a1 + 56), a2);
}

uint64_t sub_1C6128E60(uint64_t a1, uint64_t a2, uint64_t a3, int *a4)
{
  uint64_t v4;
  int VirtualRegister;

  v4 = *(_QWORD *)(a1 + 56);
  if (*(_BYTE *)(*(_QWORD *)(v4 + 256) + 280))
    return 0;
  VirtualRegister = llvm::MachineRegisterInfo::createVirtualRegister(*(_QWORD *)(v4 + 48), (uint64_t)&off_1E7F99028, "", 0);
  *a4 = VirtualRegister;
  return sub_1C478C684(*(_QWORD **)(a1 + 56), a2, *(_DWORD *)(a3 + 44), VirtualRegister);
}

uint64_t sub_1C6128EE4(uint64_t a1, uint64_t a2, uint64_t a3, int *a4, int *a5)
{
  uint64_t v5;
  int VirtualRegister;

  v5 = *(_QWORD *)(a1 + 56);
  if (*(_BYTE *)(*(_QWORD *)(v5 + 256) + 280))
    return 0;
  *a4 = llvm::MachineRegisterInfo::createVirtualRegister(*(_QWORD *)(v5 + 48), (uint64_t)&off_1E7F99028, "", 0);
  VirtualRegister = llvm::MachineRegisterInfo::createVirtualRegister(*(_QWORD *)(*(_QWORD *)(a1 + 56) + 48), (uint64_t)&off_1E7F99598, "", 0);
  *a5 = VirtualRegister;
  return sub_1C478B6C4(*(_QWORD **)(a1 + 56), a2, a3, *a4, VirtualRegister);
}

uint64_t sub_1C6128FA0(uint64_t a1, unsigned __int8 *a2)
{
  return sub_1C47A836C(*(_QWORD *)(a1 + 56), a2);
}

uint64_t sub_1C6128FA8(uint64_t a1, int a2, int a3)
{
  if (a2)
    return (a3 + 1);
  else
    return (a3 + 33);
}

uint64_t sub_1C6128FB8(uint64_t a1, int a2)
{
  return sub_1C6126ACC(*(_QWORD *)(a1 + 56), a2, 1);
}

llvm::MachineFunction **sub_1C6128FC4(uint64_t a1, llvm::MachineFunction **a2)
{
  return sub_1C477A2C4(a2);
}

_UNKNOWN ***sub_1C6128FCC(uint64_t a1, unint64_t a2)
{
  uint64_t v2;

  v2 = (a2 >> 3) + 0xFFFFFFFF;
  if (a2 >= 0x20)
    v2 = (a2 >> 5) + 1;
  if (a2 != 8 && a2 != 16)
  {
    if (a2 == 48)
      return &off_1E7F987B8;
    if ((a2 & 0x1F) != 0)
      return 0;
  }
  if (v2 > 0x11uLL)
    return 0;
  if (v2 == 1)
    return &off_1E7F982F0;
  return off_1E7F94CC8[v2];
}

uint64_t sub_1C6129044(uint64_t a1, int a2)
{
  uint64_t VirtualRegister;
  llvm::MachineFunction *v5;
  llvm::MachineFunction *v6;
  llvm::MachineInstr *v7;
  llvm::MachineFunction *v9[2];
  _DWORD v10[2];
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;

  VirtualRegister = llvm::MachineRegisterInfo::createVirtualRegister(*(_QWORD *)(a1 + 48), (uint64_t)&off_1E7F984F0, "", 0);
  if ((_DWORD)VirtualRegister)
  {
    v5 = sub_1C4787570(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 640), *(unint64_t **)(*(_QWORD *)(a1 + 32) + 648), (unsigned __int8 **)(a1 + 72), *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + 594192, VirtualRegister);
    v7 = v6;
    v9[0] = v5;
    v9[1] = v6;
    v10[0] = 1;
    v11 = 0;
    v12 = 0;
    llvm::MachineInstr::addOperand(v6, v5, (const llvm::MachineOperand *)v10);
    v10[0] = 1;
    v11 = 0;
    v12 = 0;
    llvm::MachineInstr::addOperand(v7, v5, (const llvm::MachineOperand *)v10);
    v11 = 0;
    v12 = 0;
    v10[0] = 0;
    v10[1] = a2;
    v13 = 0;
    llvm::MachineInstr::addOperand(v7, v5, (const llvm::MachineOperand *)v10);
    v10[0] = 1;
    v11 = 0;
    v12 = 0;
    llvm::MachineInstr::addOperand(v7, v5, (const llvm::MachineOperand *)v10);
    v10[0] = 1;
    v11 = 0;
    v12 = 0x100000010;
    llvm::MachineInstr::addOperand(v7, v5, (const llvm::MachineOperand *)v10);
    v10[0] = 1;
    v11 = 0;
    v12 = 0;
    llvm::MachineInstr::addOperand(v7, v5, (const llvm::MachineOperand *)v10);
    sub_1C477A2C4(v9);
  }
  return VirtualRegister;
}

uint64_t sub_1C6129180(uint64_t a1, int a2)
{
  uint64_t VirtualRegister;
  uint64_t v5;
  llvm::MachineFunction *v6;
  llvm::MachineFunction *v7;
  llvm::MachineInstr *v8;
  llvm::MachineFunction *v10[2];
  _DWORD v11[2];
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  VirtualRegister = llvm::MachineRegisterInfo::createVirtualRegister(*(_QWORD *)(a1 + 48), (uint64_t)&off_1E7F984F0, "", 0);
  if ((_DWORD)VirtualRegister)
  {
    v5 = 136560;
    if (!*(_BYTE *)(*(_QWORD *)(a1 + 256) + 281))
      v5 = 132960;
    v6 = sub_1C4787570(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 640), *(unint64_t **)(*(_QWORD *)(a1 + 32) + 648), (unsigned __int8 **)(a1 + 72), *(_QWORD *)(*(_QWORD *)(a1 + 96) + 8) + v5, VirtualRegister);
    v8 = v7;
    v10[0] = v6;
    v10[1] = v7;
    v11[0] = 1;
    v12 = 0;
    v13 = 0;
    llvm::MachineInstr::addOperand(v7, v6, (const llvm::MachineOperand *)v11);
    v12 = 0;
    v13 = 0;
    v11[0] = 0;
    v11[1] = a2;
    v14 = 0;
    llvm::MachineInstr::addOperand(v8, v6, (const llvm::MachineOperand *)v11);
    v11[0] = 1;
    v12 = 0;
    v13 = 0;
    llvm::MachineInstr::addOperand(v8, v6, (const llvm::MachineOperand *)v11);
    v11[0] = 1;
    v12 = 0;
    v13 = 0x100000000;
    llvm::MachineInstr::addOperand(v8, v6, (const llvm::MachineOperand *)v11);
    sub_1C477A2C4(v10);
  }
  return VirtualRegister;
}

uint64_t sub_1C61292A4(_BYTE *a1, uint64_t a2, char *a3)
{
  unsigned int v3;
  int v4;
  unsigned int v5;
  unsigned int v7;

  if (a1[307])
  {
    v3 = 1;
  }
  else if (a1[308])
  {
    v3 = 2;
  }
  else if (a1[309])
  {
    v3 = 3;
  }
  else
  {
    v3 = 0;
  }
  v7 = 0;
  v4 = sub_1C4785D88((int)a1, a2, a3, &v7);
  v5 = v7;
  if (!v4)
    v5 = -1;
  if (v5 == -1)
    return v3;
  else
    return v5;
}

uint64_t sub_1C6129314(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v5 = sub_1C632B59C(a1, a2, a3, 1);
  *(_QWORD *)v5 = &off_1E7F94C48;
  *(_QWORD *)(v5 + 160) = v5 + 192;
  *(_QWORD *)(v5 + 168) = v5 + 192;
  *(_QWORD *)(v5 + 176) = 8;
  *(_DWORD *)(v5 + 184) = 0;
  v6 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(v5 + 80) + 16))(*(_QWORD *)(v5 + 80), **(_QWORD **)(a2 + 8));
  v7 = ***(_QWORD ***)a2;
  *(_QWORD *)(a1 + 256) = v6;
  *(_QWORD *)(a1 + 264) = v7;
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 344);
  *(_BYTE *)(a1 + 280) = 0;
  return a1;
}

void sub_1C612939C(_WORD *a1, __n128 *a2, int **a3)
{
  sub_1C47AD050((uint64_t)&qword_1ED7EAF50, 0, 0);
  dword_1ED7EAFD0 = 0;
  qword_1ED7EAFD8 = (uint64_t)&off_1E7F952A8;
  *(_QWORD *)&dword_1ED7EAFE0 = 0;
  qword_1ED7EAF50 = (uint64_t)&unk_1E819E3B0;
  qword_1ED7EAFE8 = (uint64_t)&unk_1E819E2C0;
  qword_1ED7EAFF0 = (uint64_t)&off_1E7F95260;
  qword_1ED7EB008 = (uint64_t)&qword_1ED7EAFF0;
  sub_1C47AD138(a1, a2, a3);
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED7EAF50);
}

BOOL sub_1C6129440(uint64_t a1, uint64_t a2)
{
  return *(_BYTE *)(a2 + 12) && *(_BYTE *)(a1 + 12) && *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8);
}

void sub_1C6129470()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C6129484()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E7F95260;
  return result;
}

void sub_1C61294AC(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E7F95260;
}

_QWORD *sub_1C61294C8(_DWORD *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C47AD1C0((uint64_t)a1, a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C47AD254(a1, (uint64_t)a2, a2, v7);
    *v5 = *a2;
    v5[1] = 0;
  }
  return v5;
}

uint64_t sub_1C6129524(uint64_t result, uint64_t *a2, uint64_t *a3, _BYTE *a4, uint64_t a5, char a6)
{
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;

  v11 = result;
  LOBYTE(result) = 0;
  do
  {
    if ((a6 & 1) != 0)
    {
      v12 = *a3;
      if (*(_BYTE *)(v11 + 280) && *(_BYTE *)(v12 + 16) == 73 && (sub_1C47AD730(v11, *a3, result & 1) & 1) != 0)
      {
        LOBYTE(result) = 0;
        goto LABEL_9;
      }
    }
    else
    {
      v12 = *a3;
    }
    result = 1;
    if (*(_BYTE *)(v12 + 16) != 74)
      return result;
LABEL_9:
    *a4 = result;
    v13 = *(_DWORD *)(v12 + 20);
    if ((v13 & 0x40000000) != 0)
      v14 = *(uint64_t **)(v12 - 8);
    else
      v14 = (uint64_t *)(v12 - 32 * (v13 & 0x7FFFFFF));
    v15 = *v14;
    *a2 = v15;
    if (*(unsigned __int8 *)(v15 + 16) <= 0x1Bu)
      v15 = 0;
    *a3 = v15;
  }
  while (v15 && *(_QWORD *)(v15 + 40) == a5);
  return 0;
}

uint64_t sub_1C6129604(uint64_t *a1, uint64_t a2, int a3)
{
  int v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned int v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  const llvm::APInt *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  const llvm::APInt *v27;
  uint64_t v28;
  int v29;
  uint64_t *v30;

  v6 = *(_DWORD *)(a2 + 20);
  if ((v6 & 0x40000000) != 0)
    v7 = *(uint64_t **)(a2 - 8);
  else
    v7 = (uint64_t *)(a2 - 32 * (v6 & 0x7FFFFFF));
  v8 = *v7;
  v9 = *(unsigned __int8 *)(v8 + 16);
  if (v8)
    v10 = v9 >= 0x1C;
  else
    v10 = 0;
  if (!v10 || *(_QWORD *)(v8 + 40) == *(_QWORD *)(a2 + 40))
  {
    if (v9 <= 0x1B)
      v11 = 0;
    else
      v11 = v8;
  }
  else
  {
    v11 = 0;
  }
  if ((v6 & 0x40000000) != 0)
    v12 = *(_QWORD *)(a2 - 8);
  else
    v12 = a2 - 32 * (v6 & 0x7FFFFFF);
  v13 = *(_QWORD *)(v12 + 32);
  v14 = *(unsigned __int8 *)(v13 + 16);
  if (v13)
    v15 = v14 >= 0x1C;
  else
    v15 = 0;
  if (!v15 || *(_QWORD *)(v13 + 40) == *(_QWORD *)(a2 + 40))
  {
    if (v14 <= 0x1B)
      v16 = 0;
    else
      v16 = v13;
  }
  else
  {
    v16 = 0;
  }
  v17 = *(unsigned __int8 *)(a2 + 16);
  if (v11
    && *(_BYTE *)(v11 + 16) == 45
    && ((v18 = *(_QWORD *)(v11 + 8)) != 0 && !*(_QWORD *)(v18 + 8) || (sub_1C47AF384((_DWORD *)v11) & 1) == 0))
  {
    v19 = *(_DWORD *)(v11 + 20);
    v20 = (v19 & 0x40000000) != 0 ? *(_QWORD *)(v11 - 8) : v11 - 32 * (v19 & 0x7FFFFFF);
    v21 = *(const llvm::APInt **)v20;
    v22 = *(_QWORD *)(v20 + 32);
    v23 = (v6 & 0x40000000) != 0 ? *(_QWORD *)(a2 - 8) : a2 - 32 * (v6 & 0x7FFFFFF);
    if ((sub_1C47AF418(a1, (uint64_t *)a2, v21, v22, *(_QWORD *)(v23 + 32), a3) & 1) != 0)
      return 1;
  }
  if (v16
    && *(_BYTE *)(v16 + 16) == 45
    && v17 != 43
    && ((v24 = *(_QWORD *)(v16 + 8)) != 0 && !*(_QWORD *)(v24 + 8) || (sub_1C47AF384((_DWORD *)v16) & 1) == 0)
    && ((v25 = *(_DWORD *)(v16 + 20), (v25 & 0x40000000) != 0)
      ? (v26 = *(_QWORD *)(v16 - 8))
      : (v26 = v16 - 32 * (v25 & 0x7FFFFFF)),
        (v27 = *(const llvm::APInt **)v26,
         v28 = *(_QWORD *)(v26 + 32),
         v29 = *(_DWORD *)(a2 + 20),
         (v29 & 0x40000000) != 0)
      ? (v30 = *(uint64_t **)(a2 - 8))
      : (v30 = (uint64_t *)(a2 - 32 * (v29 & 0x7FFFFFF))),
        (sub_1C47AF418(a1, (uint64_t *)a2, v27, v28, *v30, a3) & 1) != 0))
  {
    return 1;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1C61297E0(_QWORD *a1, uint64_t *a2, int a3, int a4, unsigned int a5)
{
  uint64_t result;
  int v11;
  uint64_t *v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  uint64_t *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;

  if (*(_BYTE *)(*a2 + 8))
    return 0;
  v11 = *((_DWORD *)a2 + 5);
  if ((v11 & 0x40000000) != 0)
    v12 = (uint64_t *)*(a2 - 1);
  else
    v12 = &a2[-4 * (v11 & 0x7FFFFFF)];
  v13 = *v12;
  v14 = *(unsigned __int8 *)(*v12 + 16);
  if (v13)
    v15 = v14 >= 0x1C;
  else
    v15 = 0;
  if (v15 && *(_QWORD *)(v13 + 40) != a2[5])
    v13 = 0;
  if ((v11 & 0x40000000) != 0)
    v16 = (uint64_t *)*(a2 - 1);
  else
    v16 = &a2[-4 * (v11 & 0x7FFFFFF)];
  v17 = v16[4];
  if (v17)
    v18 = *(unsigned __int8 *)(v17 + 16) >= 0x1Cu;
  else
    v18 = 0;
  if (v18 && *(_QWORD *)(v17 + 40) != a2[5])
    v17 = 0;
  if (v13)
  {
    if (*(unsigned __int8 *)(v13 + 16) <= 0x1Bu)
      v19 = 0;
    else
      v19 = v13;
  }
  else
  {
    v19 = 0;
  }
  if (v17)
  {
    if (*(unsigned __int8 *)(v17 + 16) <= 0x1Bu)
      v20 = 0;
    else
      v20 = v17;
  }
  else
  {
    v20 = 0;
  }
  if (v19)
  {
    if (*(_BYTE *)(v19 + 16) == 42)
    {
      v21 = *(_QWORD *)(v19 + 8);
      if (v21)
      {
        if (v17 && !*(_QWORD *)(v21 + 8) && *(_BYTE *)(v17 + 16) == 17 && sub_1C4772AFC(v17, 0.5))
        {
          if (a3)
          {
            v22 = *(_DWORD *)(v19 + 20);
            if ((v22 & 0x40000000) != 0)
              v23 = *(uint64_t **)(v19 - 8);
            else
              v23 = (uint64_t *)(v19 - 32 * (v22 & 0x7FFFFFF));
            return sub_1C47B2774(a1, a2, *v23, v17, v23[4], 0, a3, 443, 0, a4, a5);
          }
          return 1;
        }
      }
    }
  }
  if (!v20)
    return 0;
  if (*(_BYTE *)(v20 + 16) != 42)
    return 0;
  v24 = *(_QWORD *)(v20 + 8);
  if (!v24)
    return 0;
  result = 0;
  if (!v13 || *(_QWORD *)(v24 + 8))
    return result;
  if (*(_BYTE *)(v13 + 16) != 17)
    return 0;
  result = sub_1C4772AFC(v13, 0.5);
  if ((_DWORD)result)
  {
    if (a3)
    {
      v25 = *(_DWORD *)(v20 + 20);
      if ((v25 & 0x40000000) != 0)
        v23 = *(uint64_t **)(v20 - 8);
      else
        v23 = (uint64_t *)(v20 - 32 * (v25 & 0x7FFFFFF));
      v17 = v13;
      return sub_1C47B2774(a1, a2, *v23, v17, v23[4], 0, a3, 443, 0, a4, a5);
    }
    return 1;
  }
  return result;
}

uint64_t sub_1C61299EC(_QWORD *a1, uint64_t *a2, int a3, int a4, unsigned int a5)
{
  uint64_t v5;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  BOOL v15;
  uint64_t *v16;
  uint64_t v17;
  BOOL v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  char v22;
  uint64_t v23;
  int v24;
  uint64_t v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  uint64_t v31;
  char v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  char v36;
  uint64_t v37;
  uint64_t v38;
  char *v40;
  char *v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  char v47[8];
  uint64_t v48[3];
  char v49[8];
  uint64_t v50[3];
  char v51[8];
  void *v52[4];

  v52[3] = *(void **)MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(*a2 + 8))
    return 0;
  v12 = *((_DWORD *)a2 + 5);
  if ((v12 & 0x40000000) != 0)
    v13 = (uint64_t *)*(a2 - 1);
  else
    v13 = &a2[-4 * (v12 & 0x7FFFFFF)];
  v14 = *v13;
  if (v14)
    v15 = *(unsigned __int8 *)(v14 + 16) >= 0x1Cu;
  else
    v15 = 0;
  if (v15 && *(_QWORD *)(v14 + 40) != a2[5])
    v14 = 0;
  if ((v12 & 0x40000000) != 0)
    v16 = (uint64_t *)*(a2 - 1);
  else
    v16 = &a2[-4 * (v12 & 0x7FFFFFF)];
  v17 = v16[4];
  if (v17)
    v18 = *(unsigned __int8 *)(v17 + 16) >= 0x1Cu;
  else
    v18 = 0;
  if (v18 && *(_QWORD *)(v17 + 40) != a2[5])
    v17 = 0;
  if (v14)
    v19 = *(unsigned __int8 *)(v14 + 16) <= 0x1Bu ? 0 : v14;
  else
    v19 = 0;
  if (!v17)
    return 0;
  v5 = 0;
  v20 = *(unsigned __int8 *)(v17 + 16);
  if (v20 <= 0x1B)
    v21 = 0;
  else
    v21 = v17;
  if (!v19 || v20 < 0x1C)
    return v5;
  if (*(_BYTE *)(v19 + 16) != 46 || *(_BYTE *)(v21 + 16) != 46)
    return 0;
  v22 = 0;
  v23 = 0;
  v24 = *(_DWORD *)(v19 + 20);
  v25 = v19 - 32 * (v24 & 0x7FFFFFF);
  while (1)
  {
    v26 = v22;
    v27 = v19 - 32 * (v24 & 0x7FFFFFF);
    if ((v24 & 0x40000000) != 0)
      v27 = *(_QWORD *)(v19 - 8);
    v28 = *(_QWORD *)(v27 + 32 * v23);
    if (v28 && *(_BYTE *)(v28 + 16) == 17)
      break;
    v22 = 1;
    v23 = 1;
    if ((v26 & 1) != 0)
    {
      v28 = 0;
      v30 = 0;
      goto LABEL_49;
    }
  }
  v31 = v23 ^ 1;
  if ((v24 & 0x40000000) != 0)
    v25 = *(_QWORD *)(v19 - 8);
  v30 = *(_QWORD *)(v25 + 32 * v31);
LABEL_49:
  v32 = 0;
  v33 = 0;
  v34 = *(_DWORD *)(v21 + 20);
  v35 = v21 - 32 * (v34 & 0x7FFFFFF);
  while (1)
  {
    v36 = v32;
    v37 = v21 - 32 * (v34 & 0x7FFFFFF);
    if ((v34 & 0x40000000) != 0)
      v37 = *(_QWORD *)(v21 - 8);
    v38 = *(_QWORD *)(v37 + 32 * v33);
    if (v38 && *(_BYTE *)(v38 + 16) == 17)
      break;
    v5 = 0;
    v32 = 1;
    v33 = 1;
    if ((v36 & 1) != 0)
      return v5;
  }
  if ((v34 & 0x40000000) != 0)
    v35 = *(_QWORD *)(v21 - 8);
  if (!v28)
    return 0;
  v44 = *(_QWORD *)(v35 + 32 * (v33 ^ 1));
  v45 = v30;
  sub_1C47A813C((llvm::detail::DoubleAPFloat *)v52, (uint64_t *)(v28 + 32));
  sub_1C47A813C((llvm::detail::DoubleAPFloat *)v50, (uint64_t *)(v38 + 32));
  if (v52[0] == &unk_1C866F1C0)
    v40 = (char *)v52[1];
  else
    v40 = v51;
  if ((v40[28] & 8) != 0
    || ((_UNKNOWN *)v50[0] != &unk_1C866F1C0 ? (v41 = v49) : (v41 = (char *)v50[1]),
        (v41[28] & 8) != 0 || (sub_1C47B4138((uint64_t)v51, (uint64_t)v49, 1), v42)))
  {
    v5 = 0;
  }
  else
  {
    sub_1C47BC1BC((uint64_t)v47, 1.0);
    llvm::APFloat::convert((uint64_t)v47, v52[0], 1, &v46);
    sub_1C47B415C((uint64_t)v51, (uint64_t)v47);
    if (v43 == 1)
    {
      if (a3)
        v5 = sub_1C47B2774(a1, a2, v45, v38, v44, 0, a3, 443, 0, a4, a5);
      else
        v5 = 1;
    }
    else
    {
      v5 = 0;
    }
    sub_1C47A8258(v48);
  }
  sub_1C47A8258(v50);
  sub_1C47A8258((uint64_t *)v52);
  return v5;
}

uint64_t sub_1C6129D28(uint64_t a1, int *a2, llvm::ConstantInt ****a3, llvm::ConstantInt ****a4, llvm::ConstantInt ****a5, llvm::ConstantInt ****a6, _BYTE *a7, _BYTE *a8, _BYTE *a9, char a10)
{
  uint64_t result;
  int v19;
  BOOL v20;
  BOOL v21;
  int v22;
  llvm::ConstantInt ***v23;
  llvm::ConstantInt ***v24;

  *a8 = 0;
  *a7 = 1;
  if (*(_BYTE *)(a1 + 280))
  {
    *a7 = 0;
    result = *a2;
    if ((result - 8) <= 7)
    {
      *a2 = result - 8;
      result = (result - 8);
    }
  }
  else
  {
    result = *a2;
    if ((result - 9) <= 5)
    {
      result = llvm::CmpInst::getInversePredicate(result);
      *a2 = result;
      if (a10)
      {
        *a8 ^= 1u;
      }
      else
      {
        v23 = *a5;
        *a5 = *a6;
        *a6 = v23;
      }
    }
  }
  v19 = *(unsigned __int8 *)(*(_QWORD *)(a1 + 256) + 281);
  if (v19)
    v20 = *a9 == 0;
  else
    v20 = 0;
  if (v20)
    goto LABEL_24;
  if (*a7)
  {
    sub_1C47B6078(a2, a3, a4, *a5, *a6, 0);
    result = *a2;
  }
  if (result > 6 || ((1 << result) & 0x68) == 0)
    goto LABEL_24;
  if (v19)
    v21 = *a7 == 0;
  else
    v21 = 1;
  if (!v21)
  {
    *a9 = 0;
LABEL_24:
    *a7 = 0;
    return result;
  }
  switch((_DWORD)result)
  {
    case 3:
      v22 = 4;
      goto LABEL_28;
    case 6:
      v22 = 1;
      goto LABEL_28;
    case 5:
      v22 = 2;
LABEL_28:
      *a2 = v22;
      break;
  }
  v24 = *a5;
  *a5 = *a6;
  *a6 = v24;
  *a8 ^= 1u;
  return result;
}

uint64_t sub_1C6129EBC(char a1, int *a2, llvm::ConstantInt ****a3, llvm::ConstantInt ****a4, llvm::ConstantInt ****a5, llvm::ConstantInt ****a6, int a7)
{
  int InversePredicate;
  uint64_t result;
  int v16;

  InversePredicate = llvm::CmpInst::getInversePredicate(*a2);
  v16 = InversePredicate;
  switch(InversePredicate)
  {
    case 8:
      InversePredicate = 0;
      v16 = 0;
      break;
    case 9:
      InversePredicate = 1;
      goto LABEL_10;
    case 10:
      InversePredicate = 2;
      goto LABEL_10;
    case 11:
      InversePredicate = 3;
      goto LABEL_10;
    case 12:
      InversePredicate = 4;
      goto LABEL_10;
    case 13:
      InversePredicate = 5;
      goto LABEL_10;
    case 14:
      InversePredicate = 6;
      goto LABEL_10;
    case 15:
      InversePredicate = 7;
LABEL_10:
      v16 = InversePredicate;
      break;
    default:
      break;
  }
  if (a7)
  {
    InversePredicate = llvm::CmpInst::getSwappedPredicate(InversePredicate);
    v16 = InversePredicate;
  }
  if (a1)
    goto LABEL_14;
  result = sub_1C47B6078(&v16, a3, a4, *a5, *a6, a7);
  if ((_DWORD)result)
  {
    InversePredicate = v16;
LABEL_14:
    *a2 = InversePredicate;
    return 1;
  }
  return result;
}

uint64_t sub_1C6129FC8(uint64_t a1, _BYTE *a2, _BYTE *a3, _BYTE *a4, _BYTE *a5, int a6)
{
  int v11;
  int v12;
  int v13;
  int v14;

  if (a2[16] >= 0x15u)
    v11 = sub_1C47ADDC8(a1, a2, a6, 0, 0);
  else
    v11 = 1;
  if (a3[16] >= 0x15u)
    v12 = sub_1C47ADDC8(a1, a3, a6, 0, 0);
  else
    v12 = 1;
  if (a4[16] >= 0x15u)
    v13 = sub_1C47ADDC8(a1, a4, a6, 0, 0);
  else
    v13 = 1;
  if (a5[16] >= 0x15u)
    v14 = sub_1C47ADDC8(a1, a5, a6, 0, 0);
  else
    v14 = 1;
  return (v12 + v11 + v13 + v14);
}

BOOL sub_1C612A0C8(uint64_t a1)
{
  llvm::detail::DoubleAPFloat *v1;
  void *v2;

  v2 = *(void **)(a1 + 8);
  v1 = (llvm::detail::DoubleAPFloat *)(a1 + 8);
  if (v2 == &unk_1C866F1C0)
    return llvm::detail::DoubleAPFloat::isSmallest(v1);
  else
    return llvm::detail::IEEEFloat::isSmallest(v1);
}

uint64_t sub_1C612A0E4(uint64_t a1, uint64_t a2)
{
  llvm::detail::DoubleAPFloat *v2;
  void *v3;

  v3 = *(void **)(a1 + 8);
  v2 = (llvm::detail::DoubleAPFloat *)(a1 + 8);
  if (v3 == &unk_1C866F1C0)
    return llvm::detail::DoubleAPFloat::next(v2, a2);
  else
    return llvm::detail::IEEEFloat::next(v2, a2);
}

uint64_t (***sub_1C612A104())()
{
  return &off_1EF8EB068;
}

uint64_t sub_1C612A110()
{
  return 0;
}

uint64_t sub_1C612A118(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = sub_1C47BEBC8(a2);
  return sub_1C47BEABC(a2, v3);
}

uint64_t sub_1C612A144(uint64_t a1, uint64_t a2)
{
  unint64_t v3;

  v3 = sub_1C47BEBC8(a2) >> 32;
  return sub_1C47BEABC(a2, v3);
}

uint64_t sub_1C612A170()
{
  return 1;
}

llvm::MachineFunction **sub_1C612A178(uint64_t a1, llvm::MachineBasicBlock *a2, int a3, uint64_t a4)
{
  unint64_t *FirstTerminator;
  llvm::MachineFunction *v8;
  llvm::MachineInstr *v9;
  llvm::MachineInstr *v10;
  llvm::MachineFunction **result;
  unsigned __int8 *v12;
  __int128 v13;
  __int128 v14;

  llvm::MachineBasicBlock::findDebugLoc((uint64_t)a2, (uint64_t)a2 + 48, &v12);
  FirstTerminator = (unint64_t *)llvm::MachineBasicBlock::getFirstTerminator(a2);
  v8 = sub_1C4787570((uint64_t)a2, FirstTerminator, &v12, *(_QWORD *)(a4 + 8) + 48720, a3);
  v10 = v9;
  LODWORD(v13) = 1;
  *((_QWORD *)&v13 + 1) = 0;
  *(_QWORD *)&v14 = 0;
  llvm::MachineInstr::addOperand(v9, v8, (const llvm::MachineOperand *)&v13);
  LODWORD(v13) = 1;
  *((_QWORD *)&v13 + 1) = 0;
  *(_QWORD *)&v14 = 0;
  llvm::MachineInstr::addOperand(v10, v8, (const llvm::MachineOperand *)&v13);
  LODWORD(v13) = 1;
  *((_QWORD *)&v13 + 1) = 0;
  *(_QWORD *)&v14 = 0;
  llvm::MachineInstr::addOperand(v10, v8, (const llvm::MachineOperand *)&v13);
  LODWORD(v13) = 1;
  *((_QWORD *)&v13 + 1) = 0;
  *(_QWORD *)&v14 = 0;
  llvm::MachineInstr::addOperand(v10, v8, (const llvm::MachineOperand *)&v13);
  LODWORD(v13) = 1;
  *((_QWORD *)&v13 + 1) = 0;
  *(_QWORD *)&v14 = 0;
  llvm::MachineInstr::addOperand(v10, v8, (const llvm::MachineOperand *)&v13);
  v13 = 0u;
  v14 = 0u;
  llvm::MachineInstr::addOperand(v10, v8, (const llvm::MachineOperand *)&v13);
  *(_QWORD *)&v13 = v8;
  *((_QWORD *)&v13 + 1) = v10;
  result = sub_1C477A2C4((llvm::MachineFunction **)&v13);
  if (v12)
    return (llvm::MachineFunction **)llvm::MetadataTracking::untrack((uint64_t)&v12, v12);
  return result;
}

uint64_t sub_1C612A29C(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)(a2 + 32);
}

llvm::MachineFunction **sub_1C612A2A4(uint64_t a1, llvm::MachineBasicBlock *a2, int a3, llvm::TargetInstrInfo *a4)
{
  unint64_t FirstTerminator;
  llvm::MachineFunction *v8;
  llvm::MachineInstr *v9;
  llvm::MachineInstr *v10;
  llvm::MachineFunction **result;
  unsigned __int8 *v12;
  __int128 v13;
  __int128 v14;

  llvm::MachineBasicBlock::findDebugLoc((uint64_t)a2, (uint64_t)a2 + 48, &v12);
  FirstTerminator = llvm::MachineBasicBlock::getFirstTerminator(a2);
  if (sub_1C47BEE4C((uint64_t)a2, a4))
  {
    FirstTerminator = *(_QWORD *)FirstTerminator & 0xFFFFFFFFFFFFFFF8;
    if (!FirstTerminator || (*(_BYTE *)FirstTerminator & 4) == 0)
    {
      while ((*(_WORD *)(FirstTerminator + 44) & 4) != 0)
        FirstTerminator = *(_QWORD *)FirstTerminator & 0xFFFFFFFFFFFFFFF8;
    }
  }
  v8 = sub_1C4787570((uint64_t)a2, (unint64_t *)FirstTerminator, &v12, *((_QWORD *)a4 + 1) + 48720, a3);
  v10 = v9;
  LODWORD(v13) = 1;
  *((_QWORD *)&v13 + 1) = 0;
  *(_QWORD *)&v14 = 0;
  llvm::MachineInstr::addOperand(v9, v8, (const llvm::MachineOperand *)&v13);
  LODWORD(v13) = 1;
  *((_QWORD *)&v13 + 1) = 0;
  *(_QWORD *)&v14 = 0;
  llvm::MachineInstr::addOperand(v10, v8, (const llvm::MachineOperand *)&v13);
  LODWORD(v13) = 1;
  *((_QWORD *)&v13 + 1) = 0;
  *(_QWORD *)&v14 = 0;
  llvm::MachineInstr::addOperand(v10, v8, (const llvm::MachineOperand *)&v13);
  LODWORD(v13) = 1;
  *((_QWORD *)&v13 + 1) = 0;
  *(_QWORD *)&v14 = 0;
  llvm::MachineInstr::addOperand(v10, v8, (const llvm::MachineOperand *)&v13);
  LODWORD(v13) = 1;
  *((_QWORD *)&v13 + 1) = 0;
  *(_QWORD *)&v14 = 0;
  llvm::MachineInstr::addOperand(v10, v8, (const llvm::MachineOperand *)&v13);
  v13 = 0u;
  v14 = 0u;
  llvm::MachineInstr::addOperand(v10, v8, (const llvm::MachineOperand *)&v13);
  *(_QWORD *)&v13 = v8;
  *((_QWORD *)&v13 + 1) = v10;
  result = sub_1C477A2C4((llvm::MachineFunction **)&v13);
  if (v12)
    return (llvm::MachineFunction **)llvm::MetadataTracking::untrack((uint64_t)&v12, v12);
  return result;
}

uint64_t sub_1C612A404@<X0>(uint64_t result@<X0>, _QWORD *a2@<X1>, llvm::TargetInstrInfo *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  char v12;
  char v13;
  int v14;
  unint64_t v15;
  uint64_t v17;
  uint64_t v18;

  if (((a2[12] - a2[11]) & 0x7FFFFFFF8) == 0 || a2 + 6 == (_QWORD *)a2[7])
    goto LABEL_23;
  v7 = result;
  v8 = a2[6] & 0xFFFFFFFFFFFFFFF8;
  if (!v8 || (*(_BYTE *)v8 & 4) == 0)
  {
    while ((*(_WORD *)(v8 + 44) & 4) != 0)
      v8 = *(_QWORD *)v8 & 0xFFFFFFFFFFFFFFF8;
  }
  result = sub_1C47BEF78(v8);
  if ((_DWORD)result)
  {
    while (v8 != a2[7])
    {
      v8 = *(_QWORD *)v8 & 0xFFFFFFFFFFFFFFF8;
      if (!v8 || (*(_BYTE *)v8 & 4) == 0)
      {
        while ((*(_WORD *)(v8 + 44) & 4) != 0)
          v8 = *(_QWORD *)v8 & 0xFFFFFFFFFFFFFFF8;
      }
      result = sub_1C47BEF78(v8);
      if ((result & 1) == 0)
        goto LABEL_16;
    }
    goto LABEL_23;
  }
LABEL_16:
  if ((**(_WORD **)(v8 + 16) & 0xFFFE) == 0x182)
  {
    v9 = 0;
    v10 = 0;
    v11 = 0;
    v12 = 0;
    v13 = 1;
    goto LABEL_24;
  }
  result = llvm::TargetInstrInfo::isUnpredicatedTerminator(a3, (const llvm::MachineInstr *)v8);
  if (!(_DWORD)result)
  {
LABEL_23:
    v9 = 0;
    v10 = 0;
    v13 = 0;
    v11 = 0;
    v12 = 0;
    goto LABEL_24;
  }
  v14 = **(unsigned __int16 **)(v8 + 16);
  if (v8 == a2[7])
    goto LABEL_39;
  v15 = *(_QWORD *)v8 & 0xFFFFFFFFFFFFFFF8;
  if (!v15 || (*(_BYTE *)v15 & 4) == 0)
  {
    while ((*(_WORD *)(v15 + 44) & 4) != 0)
      v15 = *(_QWORD *)v15 & 0xFFFFFFFFFFFFFFF8;
  }
  result = llvm::TargetInstrInfo::isUnpredicatedTerminator(a3, (const llvm::MachineInstr *)v15);
  if ((result & 1) == 0)
  {
LABEL_39:
    if (v14 == 11576)
    {
      result = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v7 + 40))(v7, v8);
      v10 = 0;
      v13 = 0;
      v12 = 0;
      v9 = *(_QWORD *)(result + 16);
      v11 = *(_QWORD *)(*(_QWORD *)(v8 + 32) + 48) != 0;
      goto LABEL_24;
    }
    if (v14 == 11575)
    {
      result = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v7 + 40))(v7, v8);
      v10 = 0;
      v13 = 0;
      v11 = 0;
      v12 = 0;
      v9 = *(_QWORD *)(result + 16);
      goto LABEL_24;
    }
LABEL_42:
    v9 = 0;
    v10 = 0;
    v13 = 0;
    v11 = 0;
    v12 = 1;
    goto LABEL_24;
  }
  if (**(_WORD **)(v15 + 16) != 11576 || v14 != 11575)
    goto LABEL_42;
  v17 = *(_QWORD *)((*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v7 + 40))(v7, v15) + 16);
  v18 = *(_QWORD *)(*(_QWORD *)(v15 + 32) + 48);
  result = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v7 + 40))(v7, v8);
  v13 = 0;
  v11 = 0;
  v12 = 0;
  v10 = *(_QWORD *)(result + 16);
  if (v18)
    v9 = *(_QWORD *)(result + 16);
  else
    v9 = v17;
  if (v18)
    v10 = v17;
LABEL_24:
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v10;
  *(_BYTE *)(a4 + 16) = v13;
  *(_BYTE *)(a4 + 17) = v11;
  *(_BYTE *)(a4 + 18) = v12;
  return result;
}

void sub_1C612A680(int a1, llvm::MachineBasicBlock *this, unsigned int a3, int a4, uint64_t a5)
{
  uint64_t v9;
  unint64_t *FirstTerminator;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  llvm::MachineFunction *v14;
  llvm::MachineInstr *v15;
  llvm::MachineInstr *v16;
  uint64_t v17;
  llvm::MachineInstr *v18;
  unsigned __int8 *v19;
  __int128 v20;
  __int128 v21;

  v9 = *(_QWORD *)(*((_QWORD *)this + 4) + 40);
  FirstTerminator = (unint64_t *)llvm::MachineBasicBlock::getFirstTerminator(this);
  llvm::MachineBasicBlock::findDebugLoc((uint64_t)this, (uint64_t)FirstTerminator, &v19);
  if (sub_1C47BEFBC(v9, a3))
  {
    if ((a3 & 0x80000000) != 0)
      v11 = (uint64_t *)(*(_QWORD *)(v9 + 24) + 16 * (a3 & 0x7FFFFFFF) + 8);
    else
      v11 = (uint64_t *)(*(_QWORD *)(v9 + 272) + 8 * a3);
    v12 = *v11;
    if ((*(_BYTE *)(v12 + 3) & 1) == 0)
    {
      v12 = *(_QWORD *)(v12 + 24);
      if ((*(_BYTE *)(v12 + 3) & 1) == 0)
        v12 = 0;
    }
    llvm::MachineInstr::eraseFromParent(*(llvm::MachineInstr **)(v12 + 8));
    v13 = 34656;
    if (a4)
      v13 = 33888;
    v14 = sub_1C477A100((uint64_t)this, FirstTerminator, &v19, *(_QWORD *)(a5 + 8) + v13);
    v16 = v15;
    *((_QWORD *)&v20 + 1) = 0;
    v21 = 0uLL;
    LODWORD(v20) = 0x1000000;
    DWORD1(v20) = a3;
    llvm::MachineInstr::addOperand(v15, v14, (const llvm::MachineOperand *)&v20);
    LODWORD(v20) = 1;
    *((_QWORD *)&v20 + 1) = 0;
    *(_QWORD *)&v21 = 0;
    llvm::MachineInstr::addOperand(v16, v14, (const llvm::MachineOperand *)&v20);
    LODWORD(v20) = 1;
    *((_QWORD *)&v20 + 1) = 0;
    *(_QWORD *)&v21 = 0;
    llvm::MachineInstr::addOperand(v16, v14, (const llvm::MachineOperand *)&v20);
    LODWORD(v20) = 1;
    *((_QWORD *)&v20 + 1) = 0;
    *(_QWORD *)&v21 = 1;
    llvm::MachineInstr::addOperand(v16, v14, (const llvm::MachineOperand *)&v20);
    LODWORD(v20) = 1;
  }
  else
  {
    v17 = 34464;
    if (a4)
      v17 = 33696;
    v14 = sub_1C477A100((uint64_t)this, FirstTerminator, &v19, *(_QWORD *)(a5 + 8) + v17);
    v16 = v18;
    *((_QWORD *)&v20 + 1) = 0;
    v21 = 0uLL;
    LODWORD(v20) = 0x1000000;
    DWORD1(v20) = a3;
    llvm::MachineInstr::addOperand(v18, v14, (const llvm::MachineOperand *)&v20);
    LODWORD(v20) = 1;
    *((_QWORD *)&v20 + 1) = 0;
    *(_QWORD *)&v21 = 0;
    llvm::MachineInstr::addOperand(v16, v14, (const llvm::MachineOperand *)&v20);
    *((_QWORD *)&v20 + 1) = 0;
    v21 = 0uLL;
    LODWORD(v20) = 0;
    DWORD1(v20) = a3;
    llvm::MachineInstr::addOperand(v16, v14, (const llvm::MachineOperand *)&v20);
    LODWORD(v20) = 1;
    *((_QWORD *)&v20 + 1) = 0;
    *(_QWORD *)&v21 = 0;
    llvm::MachineInstr::addOperand(v16, v14, (const llvm::MachineOperand *)&v20);
    LODWORD(v20) = 1;
    *((_QWORD *)&v20 + 1) = 0;
    *(_QWORD *)&v21 = 1;
    llvm::MachineInstr::addOperand(v16, v14, (const llvm::MachineOperand *)&v20);
    LODWORD(v20) = 1;
  }
  *((_QWORD *)&v20 + 1) = 0;
  *(_QWORD *)&v21 = 2;
  llvm::MachineInstr::addOperand(v16, v14, (const llvm::MachineOperand *)&v20);
  v20 = 0u;
  v21 = 0u;
  llvm::MachineInstr::addOperand(v16, v14, (const llvm::MachineOperand *)&v20);
  if (v19)
    llvm::MetadataTracking::untrack((uint64_t)&v19, v19);
}

void sub_1C612A8DC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v7;
  llvm::MachineFunction *v8;
  llvm::MachineInstr *v9;
  llvm::MachineInstr *v10;
  unsigned __int8 *v11;
  __int128 v12;
  __int128 v13;

  v7 = *(_QWORD *)(a2 + 56);
  llvm::MachineBasicBlock::findDebugLoc(a2, v7, &v11);
  v8 = sub_1C477A31C(a2, v7, &v11, *(_QWORD *)(a4 + 8) + 25248);
  v10 = v9;
  *((_QWORD *)&v12 + 1) = 0;
  v13 = 0uLL;
  LODWORD(v12) = 0x1000000;
  DWORD1(v12) = a3;
  llvm::MachineInstr::addOperand(v9, v8, (const llvm::MachineOperand *)&v12);
  LODWORD(v12) = 1;
  *((_QWORD *)&v12 + 1) = 0;
  *(_QWORD *)&v13 = 0;
  llvm::MachineInstr::addOperand(v10, v8, (const llvm::MachineOperand *)&v12);
  *((_QWORD *)&v12 + 1) = 0;
  v13 = 0uLL;
  LODWORD(v12) = 0;
  DWORD1(v12) = a3;
  llvm::MachineInstr::addOperand(v10, v8, (const llvm::MachineOperand *)&v12);
  LODWORD(v12) = 1;
  *((_QWORD *)&v12 + 1) = 0;
  *(_QWORD *)&v13 = 0;
  llvm::MachineInstr::addOperand(v10, v8, (const llvm::MachineOperand *)&v12);
  LODWORD(v12) = 1;
  *((_QWORD *)&v12 + 1) = 0;
  *(_QWORD *)&v13 = 1;
  llvm::MachineInstr::addOperand(v10, v8, (const llvm::MachineOperand *)&v12);
  LODWORD(v12) = 1;
  *((_QWORD *)&v12 + 1) = 0;
  *(_QWORD *)&v13 = 2;
  llvm::MachineInstr::addOperand(v10, v8, (const llvm::MachineOperand *)&v12);
  v12 = 0u;
  v13 = 0u;
  llvm::MachineInstr::addOperand(v10, v8, (const llvm::MachineOperand *)&v12);
  if (v11)
    llvm::MetadataTracking::untrack((uint64_t)&v11, v11);
}

void sub_1C612AA14(uint64_t a1, uint64_t *a2, unsigned int a3, int a4, uint64_t a5, int a6)
{
  unsigned int v11;
  unsigned __int8 *v12;

  llvm::MachineBasicBlock::findDebugLoc((uint64_t)a2, a2[7], &v12);
  if (a3 >= 2)
  {
    v11 = a3 >> 1;
    do
    {
      sub_1C47BF0D0((llvm::MachineBasicBlock *)a2, 0, &v12, a4, a5, a6, 2);
      --v11;
    }
    while (v11);
  }
  if ((a3 & 1) != 0)
    sub_1C47BF0D0((llvm::MachineBasicBlock *)a2, 0, &v12, a4, a5, a6, 1);
  if (v12)
    llvm::MetadataTracking::untrack((uint64_t)&v12, v12);
}

void sub_1C612AAD0(int a1, llvm::MachineBasicBlock *this, int a3, int a4, uint64_t a5)
{
  uint64_t FirstInstrTerminator;
  unsigned __int8 *v10;

  if (a4)
    FirstInstrTerminator = *((_QWORD *)this + 7);
  else
    FirstInstrTerminator = llvm::MachineBasicBlock::getFirstInstrTerminator(this);
  llvm::MachineBasicBlock::findDebugLoc((uint64_t)this, FirstInstrTerminator, &v10);
  sub_1C47BF0D0(this, 1, &v10, a3, a5, a4, -1);
  if (v10)
    llvm::MetadataTracking::untrack((uint64_t)&v10, v10);
}

void sub_1C612AB5C(int a1, llvm::MachineBasicBlock *this, unsigned int a3, int a4, uint64_t a5)
{
  uint64_t v9;
  unint64_t *FirstTerminator;
  llvm::MachineFunction *v11;
  llvm::MachineInstr *v12;
  llvm::MachineInstr *v13;
  uint64_t *v14;
  uint64_t v15;
  llvm::MachineInstr *v16;
  llvm::MachineFunction *v17;
  llvm::MachineInstr *v18;
  llvm::MachineInstr *v19;
  unsigned __int8 *v20;
  __int128 v21;
  __int128 v22;

  v9 = *(_QWORD *)(*((_QWORD *)this + 4) + 40);
  FirstTerminator = (unint64_t *)llvm::MachineBasicBlock::getFirstTerminator(this);
  llvm::MachineBasicBlock::findDebugLoc((uint64_t)this, (uint64_t)FirstTerminator, &v20);
  if (a4 || !sub_1C47BEFBC(v9, a3))
  {
    v11 = sub_1C477A100((uint64_t)this, FirstTerminator, &v20, *(_QWORD *)(a5 + 8) + 35232);
    v13 = v12;
    *((_QWORD *)&v21 + 1) = 0;
    v22 = 0uLL;
    LODWORD(v21) = 0x1000000;
    DWORD1(v21) = a3;
    llvm::MachineInstr::addOperand(v12, v11, (const llvm::MachineOperand *)&v21);
    LODWORD(v21) = 1;
    *((_QWORD *)&v21 + 1) = 0;
    *(_QWORD *)&v22 = 0;
    llvm::MachineInstr::addOperand(v13, v11, (const llvm::MachineOperand *)&v21);
    *((_QWORD *)&v21 + 1) = 0;
    v22 = 0uLL;
    LODWORD(v21) = 0;
    DWORD1(v21) = a3;
    llvm::MachineInstr::addOperand(v13, v11, (const llvm::MachineOperand *)&v21);
    LODWORD(v21) = 1;
    *((_QWORD *)&v21 + 1) = 0;
    *(_QWORD *)&v22 = 0;
    llvm::MachineInstr::addOperand(v13, v11, (const llvm::MachineOperand *)&v21);
    LODWORD(v21) = 1;
    *((_QWORD *)&v21 + 1) = 0;
    *(_QWORD *)&v22 = 2;
    llvm::MachineInstr::addOperand(v13, v11, (const llvm::MachineOperand *)&v21);
    LODWORD(v21) = 1;
    *((_QWORD *)&v21 + 1) = 0;
    *(_QWORD *)&v22 = 2;
    llvm::MachineInstr::addOperand(v13, v11, (const llvm::MachineOperand *)&v21);
    v21 = 0u;
    v22 = 0u;
    llvm::MachineInstr::addOperand(v13, v11, (const llvm::MachineOperand *)&v21);
  }
  else
  {
    if ((a3 & 0x80000000) != 0)
      v14 = (uint64_t *)(*(_QWORD *)(v9 + 24) + 16 * (a3 & 0x7FFFFFFF) + 8);
    else
      v14 = (uint64_t *)(*(_QWORD *)(v9 + 272) + 8 * a3);
    v15 = *v14;
    if ((*(_BYTE *)(v15 + 3) & 1) == 0)
    {
      v15 = *(_QWORD *)(v15 + 24);
      if ((*(_BYTE *)(v15 + 3) & 1) == 0)
        v15 = 0;
    }
    v16 = *(llvm::MachineInstr **)(v15 + 8);
    v17 = sub_1C477A100((uint64_t)this, FirstTerminator, &v20, *(_QWORD *)(a5 + 8) + 35424);
    v19 = v18;
    *((_QWORD *)&v21 + 1) = 0;
    v22 = 0uLL;
    LODWORD(v21) = 0x1000000;
    DWORD1(v21) = a3;
    llvm::MachineInstr::addOperand(v18, v17, (const llvm::MachineOperand *)&v21);
    LODWORD(v21) = 1;
    *((_QWORD *)&v21 + 1) = 0;
    *(_QWORD *)&v22 = 0;
    llvm::MachineInstr::addOperand(v19, v17, (const llvm::MachineOperand *)&v21);
    LODWORD(v21) = 1;
    *((_QWORD *)&v21 + 1) = 0;
    *(_QWORD *)&v22 = 0;
    llvm::MachineInstr::addOperand(v19, v17, (const llvm::MachineOperand *)&v21);
    LODWORD(v21) = 1;
    *((_QWORD *)&v21 + 1) = 0;
    *(_QWORD *)&v22 = 2;
    llvm::MachineInstr::addOperand(v19, v17, (const llvm::MachineOperand *)&v21);
    LODWORD(v21) = 1;
    *((_QWORD *)&v21 + 1) = 0;
    *(_QWORD *)&v22 = 2;
    llvm::MachineInstr::addOperand(v19, v17, (const llvm::MachineOperand *)&v21);
    v21 = 0u;
    v22 = 0u;
    llvm::MachineInstr::addOperand(v19, v17, (const llvm::MachineOperand *)&v21);
    llvm::MachineInstr::eraseFromParent(v16);
  }
  if (v20)
    llvm::MetadataTracking::untrack((uint64_t)&v20, v20);
}

uint64_t sub_1C612ADD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1);
  *(_QWORD *)(result + 16) = a3;
  return result;
}

uint64_t sub_1C612AE04(uint64_t a1)
{
  return *(_QWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 40))(a1) + 16);
}

void sub_1C612AE24(int a1, llvm::MachineBasicBlock *a2, int a3, int a4, unsigned int a5, unsigned int a6, llvm::TargetInstrInfo *this)
{
  unint64_t v12;
  unint64_t *FirstTerminator;
  llvm::MachineFunction *v14;
  llvm::MachineInstr *v15;
  llvm::MachineInstr *v16;
  llvm::MachineFunction *v17;
  llvm::MachineInstr *v18;
  llvm::MachineInstr *v19;
  llvm::MachineFunction *v20;
  llvm::MachineInstr *v21;
  llvm::MachineInstr *v22;
  unsigned __int8 *v23;
  __int128 v24;
  __int128 v25;

  v12 = sub_1C47BEE4C((uint64_t)a2, this);
  FirstTerminator = (unint64_t *)llvm::MachineBasicBlock::getFirstTerminator(a2);
  llvm::MachineBasicBlock::findDebugLoc((uint64_t)a2, (uint64_t)FirstTerminator, &v23);
  if (v12)
  {
    v14 = sub_1C4787570((uint64_t)a2, FirstTerminator, &v23, *((_QWORD *)this + 1) + 48720, a4);
    v16 = v15;
    LODWORD(v24) = 1;
    *((_QWORD *)&v24 + 1) = 0;
    *(_QWORD *)&v25 = 0;
    llvm::MachineInstr::addOperand(v15, v14, (const llvm::MachineOperand *)&v24);
    LODWORD(v24) = 1;
    *((_QWORD *)&v24 + 1) = 0;
    *(_QWORD *)&v25 = 0;
    llvm::MachineInstr::addOperand(v16, v14, (const llvm::MachineOperand *)&v24);
    LODWORD(v24) = 1;
    *((_QWORD *)&v24 + 1) = 0;
    *(_QWORD *)&v25 = 0;
    llvm::MachineInstr::addOperand(v16, v14, (const llvm::MachineOperand *)&v24);
    LODWORD(v24) = 1;
    *((_QWORD *)&v24 + 1) = 0;
    *(_QWORD *)&v25 = a5;
    llvm::MachineInstr::addOperand(v16, v14, (const llvm::MachineOperand *)&v24);
    LODWORD(v24) = 1;
    *((_QWORD *)&v24 + 1) = 0;
    *(_QWORD *)&v25 = a5;
    llvm::MachineInstr::addOperand(v16, v14, (const llvm::MachineOperand *)&v24);
    v24 = 0u;
    v25 = 0u;
    llvm::MachineInstr::addOperand(v16, v14, (const llvm::MachineOperand *)&v24);
    LODWORD(v24) = 1;
    *((_QWORD *)&v24 + 1) = 0;
    *(_QWORD *)&v25 = 1;
    llvm::MachineInstr::addOperand(v16, v14, (const llvm::MachineOperand *)&v24);
    v25 = 0uLL;
    v24 = 0x200000000uLL;
    llvm::MachineInstr::addOperand(v16, v14, (const llvm::MachineOperand *)&v24);
    v17 = sub_1C4787570((uint64_t)a2, FirstTerminator, &v23, *((_QWORD *)this + 1) + 48720, a4);
    v19 = v18;
    LODWORD(v24) = 1;
    *((_QWORD *)&v24 + 1) = 0;
    *(_QWORD *)&v25 = 0;
    llvm::MachineInstr::addOperand(v18, v17, (const llvm::MachineOperand *)&v24);
    LODWORD(v24) = 1;
    *((_QWORD *)&v24 + 1) = 0;
    *(_QWORD *)&v25 = 0;
    llvm::MachineInstr::addOperand(v19, v17, (const llvm::MachineOperand *)&v24);
    LODWORD(v24) = 1;
    *((_QWORD *)&v24 + 1) = 0;
    *(_QWORD *)&v25 = 0;
    llvm::MachineInstr::addOperand(v19, v17, (const llvm::MachineOperand *)&v24);
    LODWORD(v24) = 1;
    *((_QWORD *)&v24 + 1) = 0;
    *(_QWORD *)&v25 = a6;
    llvm::MachineInstr::addOperand(v19, v17, (const llvm::MachineOperand *)&v24);
    LODWORD(v24) = 1;
    *((_QWORD *)&v24 + 1) = 0;
    *(_QWORD *)&v25 = a6;
    llvm::MachineInstr::addOperand(v19, v17, (const llvm::MachineOperand *)&v24);
    v24 = 0u;
    v25 = 0u;
    llvm::MachineInstr::addOperand(v19, v17, (const llvm::MachineOperand *)&v24);
    LODWORD(v24) = 1;
    *((_QWORD *)&v24 + 1) = 0;
    *(_QWORD *)&v25 = 3;
    llvm::MachineInstr::addOperand(v19, v17, (const llvm::MachineOperand *)&v24);
    v25 = 0uLL;
    v24 = 0x200000000uLL;
    llvm::MachineInstr::addOperand(v19, v17, (const llvm::MachineOperand *)&v24);
  }
  else
  {
    v20 = sub_1C4787570((uint64_t)a2, FirstTerminator, &v23, *((_QWORD *)this + 1) + 48720, a4);
    v22 = v21;
    LODWORD(v24) = 1;
    *((_QWORD *)&v24 + 1) = 0;
    *(_QWORD *)&v25 = 0;
    llvm::MachineInstr::addOperand(v21, v20, (const llvm::MachineOperand *)&v24);
    LODWORD(v24) = 1;
    *((_QWORD *)&v24 + 1) = 0;
    *(_QWORD *)&v25 = 0;
    llvm::MachineInstr::addOperand(v22, v20, (const llvm::MachineOperand *)&v24);
    LODWORD(v24) = 1;
    *((_QWORD *)&v24 + 1) = 0;
    *(_QWORD *)&v25 = 0;
    llvm::MachineInstr::addOperand(v22, v20, (const llvm::MachineOperand *)&v24);
    LODWORD(v24) = 1;
    *((_QWORD *)&v24 + 1) = 0;
    *(_QWORD *)&v25 = a5;
    llvm::MachineInstr::addOperand(v22, v20, (const llvm::MachineOperand *)&v24);
    LODWORD(v24) = 1;
    *((_QWORD *)&v24 + 1) = 0;
    *(_QWORD *)&v25 = a5;
    llvm::MachineInstr::addOperand(v22, v20, (const llvm::MachineOperand *)&v24);
    v24 = 0u;
    v25 = 0u;
    llvm::MachineInstr::addOperand(v22, v20, (const llvm::MachineOperand *)&v24);
    *(_QWORD *)&v24 = v20;
    *((_QWORD *)&v24 + 1) = v22;
    sub_1C477A2C4((llvm::MachineFunction **)&v24);
  }
  if (v23)
    llvm::MetadataTracking::untrack((uint64_t)&v23, v23);
}

void sub_1C612B180(uint64_t a1, uint64_t a2, int a3, int a4, unsigned int a5, int a6, uint64_t a7)
{
  uint64_t v13;
  unint64_t *v14;
  unsigned int v15;
  llvm::MachineFunction *v16;
  llvm::MachineInstr *v17;
  llvm::MachineInstr *v18;
  uint64_t v19;
  llvm::MachineFunction *v20;
  llvm::MachineInstr *v21;
  llvm::MachineInstr *v22;
  unsigned __int8 *v23;
  __int128 v24;
  __int128 v25;

  v13 = *(_QWORD *)(*(_QWORD *)(a2 + 32) + 16);
  v14 = *(unint64_t **)(a2 + 56);
  llvm::MachineBasicBlock::findDebugLoc(a2, (uint64_t)v14, &v23);
  v15 = sub_1C612CF5C(17, *(unsigned __int8 *)(v13 + 280), 0, 1, 1, 1);
  v16 = sub_1C477A100(a2, v14, &v23, *(_QWORD *)(a7 + 8) + 48 * v15);
  v18 = v17;
  LODWORD(v24) = 1;
  *((_QWORD *)&v24 + 1) = 0;
  *(_QWORD *)&v25 = 0;
  llvm::MachineInstr::addOperand(v17, v16, (const llvm::MachineOperand *)&v24);
  *((_QWORD *)&v24 + 1) = 0;
  v25 = 0uLL;
  LODWORD(v24) = 0;
  DWORD1(v24) = a4;
  llvm::MachineInstr::addOperand(v18, v16, (const llvm::MachineOperand *)&v24);
  LODWORD(v24) = 1;
  *((_QWORD *)&v24 + 1) = 0;
  *(_QWORD *)&v25 = 0;
  llvm::MachineInstr::addOperand(v18, v16, (const llvm::MachineOperand *)&v24);
  LODWORD(v24) = 1;
  *((_QWORD *)&v24 + 1) = 0;
  *(_QWORD *)&v25 = a5;
  llvm::MachineInstr::addOperand(v18, v16, (const llvm::MachineOperand *)&v24);
  v25 = 0uLL;
  v24 = 0x201000000uLL;
  llvm::MachineInstr::addOperand(v18, v16, (const llvm::MachineOperand *)&v24);
  LODWORD(v24) = 1;
  *((_QWORD *)&v24 + 1) = 0;
  *(_QWORD *)&v25 = 2;
  llvm::MachineInstr::addOperand(v18, v16, (const llvm::MachineOperand *)&v24);
  v24 = 0u;
  v25 = 0u;
  llvm::MachineInstr::addOperand(v18, v16, (const llvm::MachineOperand *)&v24);
  v19 = 34464;
  if (a6)
    v19 = 24480;
  v20 = sub_1C477A100(a2, v14, &v23, *(_QWORD *)(a7 + 8) + v19);
  v22 = v21;
  *((_QWORD *)&v24 + 1) = 0;
  v25 = 0uLL;
  LODWORD(v24) = 0x1000000;
  DWORD1(v24) = a3;
  llvm::MachineInstr::addOperand(v21, v20, (const llvm::MachineOperand *)&v24);
  LODWORD(v24) = 1;
  *((_QWORD *)&v24 + 1) = 0;
  *(_QWORD *)&v25 = 0;
  llvm::MachineInstr::addOperand(v22, v20, (const llvm::MachineOperand *)&v24);
  *((_QWORD *)&v24 + 1) = 0;
  v25 = 0uLL;
  LODWORD(v24) = 0;
  DWORD1(v24) = a3;
  llvm::MachineInstr::addOperand(v22, v20, (const llvm::MachineOperand *)&v24);
  LODWORD(v24) = 1;
  *((_QWORD *)&v24 + 1) = 0;
  *(_QWORD *)&v25 = 0;
  llvm::MachineInstr::addOperand(v22, v20, (const llvm::MachineOperand *)&v24);
  LODWORD(v24) = 1;
  *((_QWORD *)&v24 + 1) = 0;
  *(_QWORD *)&v25 = 1;
  llvm::MachineInstr::addOperand(v22, v20, (const llvm::MachineOperand *)&v24);
  LODWORD(v24) = 1;
  *((_QWORD *)&v24 + 1) = 0;
  *(_QWORD *)&v25 = 2;
  llvm::MachineInstr::addOperand(v22, v20, (const llvm::MachineOperand *)&v24);
  v24 = 0u;
  v25 = 0u;
  llvm::MachineInstr::addOperand(v22, v20, (const llvm::MachineOperand *)&v24);
  if (v23)
    llvm::MetadataTracking::untrack((uint64_t)&v23, v23);
}

void sub_1C612B3EC()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C612B408()
{
  return 0;
}

uint64_t sub_1C612B410()
{
  return 0;
}

uint64_t sub_1C612B418()
{
  return 0;
}

void sub_1C612B424(llvm::TargetFrameLowering *a1)
{
  llvm::TargetFrameLowering::~TargetFrameLowering(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C612B448()
{
  return 1;
}

uint64_t sub_1C612B450()
{
  return 0;
}

uint64_t sub_1C612B458(uint64_t a1, _DWORD *a2)
{
  *a2 = 0;
  return 0;
}

uint64_t sub_1C612B470()
{
  return 0;
}

uint64_t sub_1C612B480(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 232))(a1);
}

uint64_t sub_1C612B48C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4;

  v4 = 0;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(*(_QWORD *)a1 + 232))(a1, a2, a3, &v4);
}

void sub_1C612B4B8()
{
  llvm::report_fatal_error((llvm *)"WinEH not implemented for this target", (const char *)1);
}

uint64_t sub_1C612B4D4()
{
  return 1;
}

uint64_t sub_1C612B4DC()
{
  return 1;
}

uint64_t sub_1C612B4E4()
{
  return 0;
}

BOOL sub_1C612B4EC(uint64_t a1, int a2)
{
  return !a2 || a2 == 255;
}

uint64_t sub_1C612B500(int a1, int a2)
{
  __int16 v2;
  __int16 *v3;

  v2 = -1;
  switch(a1)
  {
    case 11351:
    case 11352:
    case 11353:
    case 11354:
    case 11355:
    case 11356:
    case 11357:
    case 11358:
    case 11359:
    case 11360:
    case 11361:
    case 11362:
    case 11363:
    case 11364:
    case 11365:
    case 11366:
    case 11367:
    case 11368:
    case 11369:
    case 11370:
    case 11371:
    case 11372:
    case 11373:
    case 11374:
    case 11375:
    case 11376:
    case 11377:
    case 11378:
    case 11379:
    case 11380:
    case 11381:
    case 11382:
    case 11383:
    case 11384:
    case 11385:
    case 11386:
    case 11387:
    case 11388:
    case 11389:
    case 11390:
    case 11391:
    case 11392:
    case 11393:
    case 11394:
    case 11395:
    case 11396:
    case 11397:
    case 11398:
    case 11399:
    case 11400:
    case 11401:
    case 11402:
    case 11403:
    case 11404:
    case 11405:
    case 11406:
    case 11407:
    case 11408:
    case 11409:
    case 11410:
    case 11411:
    case 11412:
    case 11413:
    case 11414:
    case 11415:
    case 11416:
    case 11417:
    case 11418:
    case 11419:
    case 11420:
    case 11421:
    case 11422:
    case 11423:
    case 11424:
    case 11425:
    case 11426:
    case 11427:
    case 11428:
    case 11429:
    case 11430:
    case 11431:
    case 11432:
    case 11433:
    case 11434:
    case 11435:
    case 11436:
    case 11437:
    case 11438:
    case 11439:
    case 11440:
    case 11441:
    case 11442:
    case 11443:
    case 11444:
    case 11445:
    case 11446:
    case 11447:
    case 11448:
    case 11449:
    case 11450:
    case 11451:
    case 11452:
    case 11453:
    case 11454:
    case 11455:
    case 11456:
    case 11457:
    case 11458:
    case 11459:
    case 11460:
    case 11461:
    case 11462:
      goto LABEL_9;
    case 11463:
    case 11464:
    case 11465:
    case 11466:
    case 11467:
    case 11468:
    case 11469:
    case 11470:
    case 11471:
    case 11472:
    case 11473:
    case 11474:
    case 11475:
    case 11476:
    case 11477:
    case 11478:
    case 11479:
    case 11480:
    case 11481:
    case 11482:
    case 11483:
    case 11484:
    case 11485:
    case 11486:
    case 11487:
    case 11488:
    case 11489:
    case 11490:
    case 11491:
    case 11492:
    case 11493:
    case 11494:
    case 11495:
    case 11496:
    case 11497:
    case 11498:
    case 11499:
    case 11500:
    case 11501:
    case 11502:
    case 11503:
    case 11504:
    case 11505:
    case 11506:
    case 11507:
    case 11508:
    case 11509:
    case 11510:
    case 11511:
    case 11512:
    case 11513:
    case 11514:
    case 11515:
    case 11516:
    case 11517:
    case 11518:
    case 11519:
    case 11520:
    case 11521:
    case 11522:
    case 11523:
    case 11524:
    case 11525:
    case 11526:
    case 11527:
    case 11528:
    case 11529:
    case 11530:
    case 11531:
    case 11532:
    case 11533:
    case 11534:
    case 11535:
    case 11536:
    case 11537:
    case 11538:
    case 11539:
    case 11540:
    case 11541:
    case 11542:
    case 11543:
    case 11544:
    case 11545:
    case 11546:
    case 11547:
    case 11548:
    case 11549:
    case 11550:
    case 11551:
    case 11552:
    case 11553:
    case 11554:
    case 11555:
    case 11556:
    case 11557:
    case 11558:
    case 11559:
    case 11560:
    case 11561:
    case 11562:
    case 11563:
    case 11564:
    case 11565:
    case 11566:
    case 11567:
    case 11568:
    case 11569:
    case 11570:
    case 11571:
    case 11572:
    case 11573:
    case 11574:
      goto LABEL_14;
    case 11575:
    case 11576:
    case 11577:
    case 11578:
    case 11579:
    case 11580:
    case 11581:
    case 11582:
    case 11583:
    case 11584:
    case 11585:
    case 11586:
    case 11587:
    case 11588:
    case 11589:
    case 11590:
    case 11591:
    case 11592:
    case 11593:
    case 11594:
    case 11595:
    case 11596:
    case 11597:
    case 11598:
    case 11599:
    case 11600:
    case 11601:
    case 11602:
    case 11603:
    case 11604:
    case 11605:
    case 11606:
    case 11607:
    case 11608:
    case 11609:
    case 11610:
    case 11611:
    case 11612:
    case 11613:
    case 11614:
    case 11615:
    case 11616:
    case 11617:
    case 11618:
    case 11619:
    case 11620:
    case 11621:
    case 11622:
    case 11623:
    case 11624:
    case 11625:
    case 11626:
    case 11627:
    case 11628:
    case 11629:
    case 11630:
    case 11631:
    case 11632:
    case 11633:
    case 11634:
    case 11635:
    case 11636:
    case 11637:
    case 11638:
    case 11639:
    case 11640:
    case 11641:
    case 11642:
    case 11643:
    case 11644:
    case 11645:
    case 11646:
    case 11647:
    case 11648:
    case 11649:
    case 11650:
    case 11651:
    case 11652:
    case 11653:
    case 11654:
    case 11655:
    case 11656:
    case 11657:
    case 11658:
    case 11659:
    case 11660:
    case 11661:
    case 11662:
    case 11663:
    case 11664:
    case 11665:
    case 11666:
    case 11667:
    case 11668:
    case 11669:
    case 11670:
    case 11671:
    case 11672:
    case 11673:
    case 11674:
    case 11675:
    case 11676:
    case 11677:
    case 11678:
    case 11679:
    case 11680:
    case 11681:
    case 11682:
    case 11683:
    case 11684:
    case 11685:
    case 11686:
    case 11687:
    case 11688:
    case 11689:
    case 11690:
    case 11691:
    case 11692:
    case 11693:
    case 11694:
    case 11695:
    case 11696:
    case 11697:
    case 11698:
    case 11699:
    case 11700:
    case 11701:
    case 11702:
    case 11703:
    case 11704:
    case 11705:
    case 11706:
    case 11707:
    case 11708:
    case 11709:
    case 11710:
    case 11711:
    case 11712:
    case 11713:
    case 11714:
    case 11715:
    case 11716:
    case 11717:
    case 11718:
    case 11719:
    case 11720:
    case 11721:
    case 11722:
    case 11723:
    case 11724:
    case 11725:
    case 11726:
    case 11727:
    case 11728:
    case 11729:
    case 11730:
    case 11731:
    case 11732:
    case 11733:
    case 11734:
    case 11735:
    case 11736:
    case 11737:
    case 11738:
    case 11739:
    case 11740:
    case 11741:
    case 11742:
    case 11743:
    case 11744:
    case 11745:
    case 11746:
    case 11747:
    case 11748:
    case 11749:
    case 11750:
    case 11751:
    case 11752:
    case 11753:
    case 11754:
    case 11755:
    case 11756:
    case 11757:
    case 11758:
    case 11759:
    case 11760:
    case 11761:
    case 11762:
    case 11763:
    case 11764:
    case 11765:
    case 11766:
    case 11767:
    case 11768:
    case 11769:
    case 11770:
    case 11771:
    case 11772:
    case 11773:
    case 11774:
    case 11775:
    case 11776:
    case 11777:
    case 11778:
    case 11779:
    case 11780:
    case 11781:
    case 11782:
    case 11783:
    case 11784:
    case 11785:
    case 11786:
    case 11787:
    case 11788:
    case 11789:
    case 11790:
    case 11791:
    case 11792:
    case 11793:
    case 11794:
    case 11795:
    case 11796:
    case 11797:
    case 11798:
    case 11799:
    case 11800:
    case 11801:
    case 11802:
    case 11803:
    case 11804:
    case 11805:
    case 11806:
    case 11807:
    case 11808:
    case 11809:
    case 11810:
    case 11811:
    case 11812:
    case 11813:
    case 11814:
    case 11815:
    case 11816:
    case 11817:
    case 11818:
    case 11819:
    case 11820:
    case 11821:
    case 11822:
    case 11823:
    case 11824:
    case 11825:
    case 11826:
    case 11827:
    case 11828:
    case 11829:
    case 11830:
    case 11831:
    case 11832:
    case 11833:
    case 11834:
    case 11835:
    case 11836:
    case 11837:
    case 11838:
    case 11839:
    case 11840:
    case 11841:
    case 11842:
    case 11843:
    case 11844:
    case 11845:
    case 11846:
    case 11847:
    case 11848:
    case 11849:
    case 11850:
    case 11851:
    case 11852:
    case 11853:
    case 11854:
    case 11855:
    case 11856:
    case 11857:
    case 11858:
    case 11859:
    case 11860:
    case 11861:
    case 11862:
    case 11863:
    case 11864:
    case 11865:
    case 11866:
    case 11867:
    case 11868:
    case 11869:
    case 11870:
    case 11871:
    case 11872:
    case 11873:
    case 11874:
    case 11875:
    case 11876:
    case 11877:
    case 11878:
    case 11879:
    case 11880:
    case 11881:
    case 11882:
    case 11883:
    case 11884:
    case 11885:
    case 11886:
    case 11887:
    case 11888:
    case 11889:
    case 11890:
    case 11891:
    case 11892:
    case 11893:
    case 11894:
    case 11895:
    case 11896:
    case 11897:
    case 11898:
    case 11899:
    case 11900:
    case 11901:
    case 11902:
    case 11903:
    case 11904:
    case 11905:
    case 11906:
    case 11907:
    case 11908:
    case 11909:
    case 11910:
    case 11911:
    case 11912:
    case 11913:
    case 11914:
    case 11915:
    case 11916:
    case 11917:
    case 11918:
    case 11919:
    case 11920:
    case 11921:
    case 11922:
    case 11923:
    case 11924:
    case 11925:
    case 11926:
    case 11927:
    case 11928:
    case 11929:
    case 11930:
    case 11931:
    case 11932:
    case 11933:
    case 11934:
    case 11935:
    case 11936:
    case 11937:
    case 11938:
    case 11939:
    case 11940:
    case 11941:
    case 11942:
    case 11943:
    case 11944:
    case 11945:
    case 11946:
    case 11947:
    case 11948:
    case 11949:
    case 11950:
    case 11951:
    case 11952:
    case 11953:
    case 11954:
    case 11955:
    case 11956:
    case 11957:
    case 11958:
    case 11959:
    case 11960:
    case 11961:
    case 11962:
    case 11963:
    case 11964:
    case 11965:
    case 11966:
    case 11967:
    case 11968:
    case 11969:
    case 11970:
    case 11971:
    case 11972:
    case 11973:
    case 11974:
    case 11975:
    case 11976:
    case 11977:
    case 11978:
    case 11979:
    case 11980:
    case 11981:
    case 11982:
    case 11983:
    case 11984:
    case 11985:
    case 11986:
    case 11987:
    case 11988:
    case 11989:
    case 11990:
    case 11991:
    case 11992:
    case 11993:
    case 11994:
    case 11995:
    case 11996:
    case 11997:
    case 11998:
    case 11999:
    case 12000:
    case 12001:
    case 12002:
    case 12003:
    case 12004:
    case 12005:
    case 12006:
    case 12007:
    case 12008:
    case 12009:
    case 12010:
    case 12011:
    case 12012:
    case 12013:
    case 12014:
    case 12015:
    case 12016:
    case 12017:
    case 12018:
    case 12019:
    case 12020:
    case 12021:
    case 12022:
    case 12023:
    case 12024:
    case 12025:
    case 12026:
    case 12027:
    case 12028:
    case 12029:
    case 12030:
    case 12031:
    case 12032:
    case 12033:
    case 12034:
    case 12035:
    case 12036:
    case 12037:
    case 12038:
    case 12039:
    case 12040:
    case 12041:
    case 12042:
    case 12043:
    case 12044:
    case 12045:
    case 12046:
    case 12047:
    case 12048:
    case 12049:
    case 12050:
    case 12051:
    case 12052:
    case 12053:
    case 12054:
    case 12055:
    case 12056:
    case 12057:
    case 12058:
    case 12059:
    case 12060:
    case 12061:
    case 12062:
    case 12063:
    case 12064:
    case 12065:
    case 12066:
    case 12067:
    case 12068:
    case 12069:
    case 12070:
    case 12071:
    case 12072:
    case 12073:
    case 12074:
    case 12075:
    case 12076:
    case 12077:
    case 12078:
    case 12079:
    case 12080:
    case 12081:
    case 12082:
    case 12083:
    case 12084:
    case 12085:
    case 12086:
    case 12087:
    case 12088:
    case 12089:
    case 12090:
    case 12091:
    case 12092:
    case 12093:
    case 12094:
    case 12095:
    case 12096:
    case 12097:
    case 12098:
    case 12099:
    case 12100:
    case 12101:
    case 12102:
    case 12103:
    case 12104:
    case 12105:
    case 12106:
    case 12107:
    case 12108:
    case 12109:
    case 12110:
    case 12111:
    case 12112:
    case 12113:
    case 12114:
    case 12115:
    case 12116:
    case 12117:
    case 12118:
    case 12119:
    case 12120:
    case 12121:
    case 12122:
    case 12123:
    case 12124:
    case 12125:
    case 12126:
    case 12127:
    case 12128:
    case 12129:
    case 12130:
    case 12131:
    case 12132:
    case 12133:
    case 12134:
    case 12135:
    case 12136:
    case 12137:
    case 12138:
    case 12139:
    case 12140:
    case 12141:
    case 12142:
    case 12143:
    case 12144:
    case 12145:
    case 12146:
    case 12147:
    case 12148:
    case 12149:
    case 12150:
    case 12151:
    case 12152:
    case 12153:
    case 12154:
    case 12155:
    case 12156:
    case 12157:
    case 12158:
    case 12159:
    case 12160:
    case 12161:
    case 12162:
    case 12163:
    case 12164:
    case 12165:
    case 12166:
    case 12167:
    case 12168:
    case 12169:
    case 12170:
    case 12171:
    case 12172:
    case 12173:
    case 12174:
    case 12175:
    case 12176:
    case 12177:
    case 12178:
    case 12179:
    case 12180:
    case 12181:
    case 12182:
    case 12183:
    case 12184:
    case 12185:
    case 12186:
    case 12187:
    case 12188:
    case 12189:
    case 12190:
    case 12191:
    case 12192:
    case 12193:
    case 12194:
    case 12195:
    case 12196:
    case 12197:
    case 12198:
    case 12199:
    case 12200:
    case 12201:
    case 12202:
    case 12203:
    case 12204:
    case 12205:
    case 12206:
    case 12207:
    case 12208:
    case 12209:
    case 12210:
    case 12211:
    case 12212:
    case 12213:
    case 12214:
    case 12215:
    case 12216:
    case 12217:
    case 12218:
    case 12219:
    case 12220:
    case 12221:
    case 12222:
    case 12223:
    case 12224:
    case 12225:
    case 12226:
    case 12227:
    case 12228:
    case 12229:
    case 12230:
    case 12231:
    case 12232:
    case 12233:
    case 12234:
    case 12235:
    case 12236:
    case 12237:
    case 12238:
    case 12239:
    case 12240:
    case 12241:
    case 12242:
    case 12243:
    case 12244:
    case 12245:
    case 12246:
    case 12247:
    case 12248:
    case 12249:
    case 12250:
    case 12251:
    case 12252:
    case 12253:
    case 12254:
    case 12255:
    case 12256:
    case 12257:
    case 12258:
    case 12259:
    case 12260:
    case 12261:
    case 12262:
    case 12263:
    case 12264:
    case 12265:
    case 12266:
    case 12267:
    case 12268:
    case 12269:
    case 12270:
    case 12271:
    case 12272:
    case 12273:
    case 12274:
    case 12275:
    case 12276:
    case 12277:
    case 12278:
    case 12279:
    case 12280:
    case 12281:
    case 12282:
    case 12283:
    case 12284:
    case 12285:
    case 12286:
    case 12287:
    case 12288:
    case 12289:
    case 12290:
    case 12291:
    case 12292:
    case 12293:
    case 12294:
    case 12295:
    case 12296:
    case 12297:
    case 12298:
    case 12299:
    case 12300:
    case 12301:
    case 12302:
    case 12303:
    case 12304:
    case 12305:
    case 12306:
    case 12307:
    case 12308:
    case 12309:
    case 12310:
    case 12311:
    case 12312:
    case 12313:
    case 12314:
    case 12315:
    case 12316:
    case 12317:
    case 12318:
    case 12319:
    case 12320:
    case 12321:
    case 12322:
    case 12323:
    case 12324:
    case 12325:
    case 12326:
    case 12327:
    case 12328:
    case 12329:
    case 12330:
    case 12331:
    case 12332:
    case 12333:
    case 12334:
    case 12335:
    case 12336:
    case 12337:
    case 12338:
    case 12339:
    case 12340:
    case 12341:
    case 12342:
    case 12343:
    case 12344:
    case 12345:
    case 12346:
    case 12347:
    case 12348:
    case 12349:
    case 12350:
    case 12351:
    case 12352:
    case 12353:
    case 12354:
    case 12355:
    case 12356:
    case 12357:
    case 12358:
    case 12359:
    case 12360:
    case 12361:
    case 12362:
    case 12363:
    case 12364:
    case 12365:
    case 12366:
    case 12367:
    case 12368:
    case 12369:
    case 12370:
    case 12371:
    case 12372:
    case 12373:
    case 12374:
    case 12375:
    case 12376:
    case 12377:
    case 12378:
    case 12379:
    case 12380:
    case 12381:
    case 12382:
    case 12383:
    case 12384:
    case 12385:
    case 12386:
    case 12387:
    case 12388:
    case 12389:
    case 12390:
    case 12391:
    case 12392:
    case 12393:
    case 12394:
    case 12395:
    case 12396:
    case 12397:
    case 12398:
    case 12399:
    case 12400:
    case 12401:
    case 12402:
    case 12403:
    case 12404:
    case 12405:
    case 12406:
    case 12407:
    case 12408:
    case 12409:
    case 12410:
    case 12411:
    case 12412:
    case 12413:
    case 12414:
    case 12415:
    case 12416:
    case 12417:
    case 12418:
    case 12419:
    case 12420:
    case 12421:
    case 12422:
    case 12423:
    case 12424:
    case 12425:
    case 12426:
    case 12427:
    case 12428:
    case 12429:
    case 12430:
    case 12431:
    case 12432:
    case 12433:
    case 12434:
    case 12435:
    case 12436:
    case 12437:
    case 12438:
    case 12439:
    case 12488:
    case 12490:
    case 12492:
    case 12494:
    case 12536:
    case 12538:
    case 12580:
    case 12582:
    case 12624:
    case 12626:
    case 12668:
    case 12670:
    case 12672:
    case 12674:
    case 12676:
    case 12678:
    case 12680:
    case 12682:
    case 12684:
    case 12686:
    case 12688:
    case 12690:
    case 12732:
    case 12734:
    case 12776:
    case 12778:
    case 12820:
    case 12822:
    case 12864:
    case 12866:
    case 12868:
    case 12870:
    case 12872:
    case 12874:
    case 12876:
    case 12878:
    case 12880:
    case 12882:
      return v2;
    case 12440:
    case 12443:
    case 12446:
    case 12449:
    case 12452:
    case 12455:
    case 12458:
    case 12461:
    case 12464:
    case 12467:
    case 12470:
    case 12473:
    case 12476:
    case 12479:
    case 12482:
    case 12485:
      v3 = (__int16 *)&algn_1C64106DE[2 * a2 + 462];
      return *v3;
    case 12441:
    case 12442:
    case 12444:
    case 12445:
    case 12447:
    case 12448:
    case 12450:
    case 12451:
    case 12453:
    case 12454:
    case 12456:
    case 12457:
    case 12459:
    case 12460:
    case 12462:
    case 12463:
    case 12465:
    case 12466:
    case 12468:
    case 12469:
    case 12471:
    case 12472:
    case 12474:
    case 12475:
    case 12477:
    case 12478:
    case 12480:
    case 12481:
    case 12483:
    case 12484:
    case 12486:
    case 12487:
      v3 = (__int16 *)&algn_1C64106DE[2 * a2 + 528];
      return *v3;
    case 12489:
    case 12491:
    case 12493:
    case 12495:
    case 12537:
    case 12539:
    case 12581:
    case 12583:
    case 12625:
    case 12627:
    case 12669:
    case 12671:
    case 12673:
    case 12675:
    case 12677:
    case 12679:
    case 12681:
    case 12683:
    case 12685:
    case 12687:
    case 12689:
    case 12691:
    case 12733:
    case 12735:
    case 12777:
    case 12779:
    case 12821:
    case 12823:
    case 12865:
    case 12867:
    case 12873:
    case 12875:
    case 12877:
    case 12879:
    case 12881:
    case 12883:
      v3 = (__int16 *)&algn_1C64106DE[2 * a2 + 330];
      return *v3;
    case 12496:
    case 12506:
    case 12516:
    case 12526:
    case 12540:
    case 12550:
    case 12560:
    case 12570:
    case 12584:
    case 12594:
    case 12604:
    case 12614:
    case 12628:
    case 12638:
    case 12648:
    case 12658:
    case 12692:
    case 12702:
    case 12712:
    case 12722:
    case 12736:
    case 12746:
    case 12756:
    case 12766:
    case 12780:
    case 12790:
    case 12800:
    case 12810:
    case 12824:
    case 12834:
    case 12844:
    case 12854:
      v3 = (__int16 *)&algn_1C64106DE[2 * a2 + 66];
      return *v3;
    case 12497:
    case 12499:
    case 12502:
    case 12504:
    case 12507:
    case 12509:
    case 12512:
    case 12514:
    case 12517:
    case 12519:
    case 12522:
    case 12524:
    case 12527:
    case 12529:
    case 12532:
    case 12534:
    case 12541:
    case 12543:
    case 12546:
    case 12548:
    case 12551:
    case 12553:
    case 12556:
    case 12558:
    case 12561:
    case 12563:
    case 12566:
    case 12568:
    case 12571:
    case 12573:
    case 12576:
    case 12578:
    case 12585:
    case 12587:
    case 12590:
    case 12592:
    case 12595:
    case 12597:
    case 12600:
    case 12602:
    case 12605:
    case 12607:
    case 12610:
    case 12612:
    case 12615:
    case 12617:
    case 12620:
    case 12622:
    case 12629:
    case 12631:
    case 12634:
    case 12636:
    case 12639:
    case 12641:
    case 12644:
    case 12646:
    case 12649:
    case 12651:
    case 12654:
    case 12656:
    case 12659:
    case 12661:
    case 12664:
    case 12666:
    case 12693:
    case 12695:
    case 12698:
    case 12700:
    case 12703:
    case 12705:
    case 12708:
    case 12710:
    case 12713:
    case 12715:
    case 12718:
    case 12720:
    case 12723:
    case 12725:
    case 12728:
    case 12730:
    case 12737:
    case 12739:
    case 12742:
    case 12744:
    case 12747:
    case 12749:
    case 12752:
    case 12754:
    case 12757:
    case 12759:
    case 12762:
    case 12764:
    case 12767:
    case 12769:
    case 12772:
    case 12774:
    case 12781:
    case 12783:
    case 12786:
    case 12788:
    case 12791:
    case 12793:
    case 12796:
    case 12798:
    case 12801:
    case 12803:
    case 12806:
    case 12808:
    case 12811:
    case 12813:
    case 12816:
    case 12818:
    case 12825:
    case 12827:
    case 12830:
    case 12832:
    case 12835:
    case 12837:
    case 12840:
    case 12842:
    case 12845:
    case 12847:
    case 12850:
    case 12852:
    case 12855:
    case 12857:
    case 12860:
    case 12862:
      v3 = (__int16 *)&algn_1C64106DE[2 * a2 + 132];
      return *v3;
    case 12498:
    case 12500:
    case 12503:
    case 12505:
    case 12508:
    case 12510:
    case 12513:
    case 12515:
    case 12518:
    case 12520:
    case 12523:
    case 12525:
    case 12528:
    case 12530:
    case 12533:
    case 12535:
    case 12542:
    case 12544:
    case 12547:
    case 12549:
    case 12552:
    case 12554:
    case 12557:
    case 12559:
    case 12562:
    case 12564:
    case 12567:
    case 12569:
    case 12572:
    case 12574:
    case 12577:
    case 12579:
    case 12586:
    case 12588:
    case 12591:
    case 12593:
    case 12596:
    case 12598:
    case 12601:
    case 12603:
    case 12606:
    case 12608:
    case 12611:
    case 12613:
    case 12616:
    case 12618:
    case 12621:
    case 12623:
    case 12630:
    case 12632:
    case 12635:
    case 12637:
    case 12640:
    case 12642:
    case 12645:
    case 12647:
    case 12650:
    case 12652:
    case 12655:
    case 12657:
    case 12660:
    case 12662:
    case 12665:
    case 12667:
    case 12694:
    case 12696:
    case 12699:
    case 12701:
    case 12704:
    case 12706:
    case 12709:
    case 12711:
    case 12714:
    case 12716:
    case 12719:
    case 12721:
    case 12724:
    case 12726:
    case 12729:
    case 12731:
    case 12738:
    case 12740:
    case 12743:
    case 12745:
    case 12748:
    case 12750:
    case 12753:
    case 12755:
    case 12758:
    case 12760:
    case 12763:
    case 12765:
    case 12768:
    case 12770:
    case 12773:
    case 12775:
    case 12782:
    case 12784:
    case 12787:
    case 12789:
    case 12792:
    case 12794:
    case 12797:
    case 12799:
    case 12802:
    case 12804:
    case 12807:
    case 12809:
    case 12812:
    case 12814:
    case 12817:
    case 12819:
    case 12826:
    case 12828:
    case 12831:
    case 12833:
    case 12836:
    case 12838:
    case 12841:
    case 12843:
    case 12846:
    case 12848:
    case 12851:
    case 12853:
    case 12856:
    case 12858:
    case 12861:
    case 12863:
      v3 = (__int16 *)&algn_1C64106DE[2 * a2 + 264];
      return *v3;
    case 12501:
    case 12511:
    case 12521:
    case 12531:
    case 12545:
    case 12555:
    case 12565:
    case 12575:
    case 12589:
    case 12599:
    case 12609:
    case 12619:
    case 12633:
    case 12643:
    case 12653:
    case 12663:
    case 12697:
    case 12707:
    case 12717:
    case 12727:
    case 12741:
    case 12751:
    case 12761:
    case 12771:
    case 12785:
    case 12795:
    case 12805:
    case 12815:
    case 12829:
    case 12839:
    case 12849:
    case 12859:
      v3 = (__int16 *)&algn_1C64106DE[2 * a2 + 198];
      return *v3;
    case 12869:
    case 12871:
      v3 = (__int16 *)&algn_1C64106DE[2 * a2 + 594];
      return *v3;
    default:
      if ((a1 - 10409) < 0xE)
      {
LABEL_9:
        v3 = (__int16 *)&algn_1C64106DE[2 * a2 + 396];
        return *v3;
      }
      if ((a1 - 10407) <= 1)
      {
LABEL_14:
        v3 = (__int16 *)&algn_1C64106DE[2 * a2];
        return *v3;
      }
      return v2;
  }
}

