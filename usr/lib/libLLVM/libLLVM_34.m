uint64_t sub_1C55C39E0(llvm::BasicBlock *a1)
{
  uint64_t result;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;

  result = llvm::BasicBlock::getSinglePredecessor(a1);
  if (result)
  {
    v2 = *(_QWORD *)(result + 40);
    if (v2 == result + 40)
    {
      v4 = 0;
    }
    else
    {
      if (v2)
        v3 = v2 - 24;
      else
        v3 = 0;
      if (*(unsigned __int8 *)(v3 + 16) - 29 >= 0xB)
        v4 = 0;
      else
        v4 = v3;
    }
    v5 = *(unsigned __int8 *)(v4 + 16);
    if (v5 != 30)
      __asm { BR              X12 }
    if ((*(_DWORD *)(v4 + 20) & 0x7FFFFFF) == 3)
      v6 = 2;
    else
      v6 = 1;
    return v6 == 1;
  }
  return result;
}

void sub_1C55C3A70()
{
  JUMPOUT(0x1C55C3A40);
}

void sub_1C55C3A80()
{
  JUMPOUT(0x1C55C3A40);
}

void sub_1C55C3A90()
{
  JUMPOUT(0x1C55C3A40);
}

void sub_1C55C3A98()
{
  JUMPOUT(0x1C55C3A40);
}

void sub_1C55C3AA4()
{
  JUMPOUT(0x1C55C3A40);
}

void sub_1C55C3AAC()
{
  JUMPOUT(0x1C55C3A40);
}

uint64_t sub_1C55C3AB8(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  _BOOL4 v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unint64_t v45;
  _QWORD *v47;
  _QWORD *v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  uint64_t v76;
  _BYTE v77[32];
  void *v78;
  uint64_t v79;
  _QWORD v80[5];

  v80[4] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(a1 + 40);
  if (v2 == a1 + 40)
  {
    v3 = 0;
  }
  else
  {
    if (v2)
      v3 = v2 - 24;
    else
      v3 = 0;
    if (*(unsigned __int8 *)(v3 + 16) - 29 >= 0xB)
      v3 = 0;
  }
  if (*(_BYTE *)(v3 + 16) != 30)
    v3 = 0;
  v4 = *(_QWORD *)(v3 - 32);
  v5 = v4 + 40;
  v6 = *(_QWORD *)(v4 + 48);
  if (v6 == v5)
    return 0;
  v7 = 0;
  while (1)
  {
    v8 = v6 ? v6 - 24 : 0;
    v9 = *(unsigned __int8 *)(v8 + 16);
    v10 = v9 == 83;
    v11 = v9 == 83 ? v8 : 0;
    if (!v6 || !v10)
      break;
    v12 = *(_DWORD *)(v11 + 20);
    v13 = v12 & 0x7FFFFFF;
    if ((v12 & 0x7FFFFFF) != 0)
    {
      v14 = 0;
      while (1)
      {
        v15 = v11 - 32 * v13;
        if ((v12 & 0x40000000) != 0)
          v15 = *(_QWORD *)(v11 - 8);
        if (*(_QWORD *)(v15 + 32 * *(unsigned int *)(v11 + 60) + 8 * v14) == a1)
          break;
        if (v13 == ++v14)
          goto LABEL_28;
      }
    }
    else
    {
LABEL_28:
      LODWORD(v14) = -1;
    }
    if ((v12 & 0x40000000) != 0)
      v16 = *(_QWORD *)(v11 - 8);
    else
      v16 = v11 - 32 * v13;
    if (*(unsigned __int8 *)(*(_QWORD *)(v16 + 32 * ((_DWORD)v14 == 0)) + 16) - 11 >= 2)
    {
      if (v7)
        return 0;
    }
    else
    {
      v8 = v7;
    }
    v6 = *(_QWORD *)(v6 + 8);
    v7 = v8;
    if (v6 == v5)
    {
      if (!v8)
        return 0;
      goto LABEL_39;
    }
  }
  v8 = v7;
  if (!v7)
    return 0;
LABEL_39:
  v17 = *(_QWORD *)(v8 + 8);
  if (!v17)
    return 0;
  if (*(_QWORD *)(v17 + 8))
    return 0;
  v18 = *(_QWORD *)(v17 + 24);
  if (*(_BYTE *)(v18 + 16) != 84)
    return 0;
  v20 = v18 - 32;
  v19 = *(_QWORD *)(v18 - 32);
  if (!v19)
    return 0;
  if (*(_BYTE *)(v19 + 16))
    return 0;
  if (*(_QWORD *)(v19 + 24) != *(_QWORD *)(v18 + 72))
    return 0;
  if ((*(_BYTE *)(v19 + 33) & 0x20) == 0)
    return 0;
  v23 = *(_DWORD *)(v19 + 36);
  if ((v23 - 1992) >= 2 && v23 != 2470 && v23 != 1838)
    return 0;
  v24 = *(_DWORD *)(v8 + 20);
  v25 = v24 & 0x7FFFFFF;
  if ((v24 & 0x7FFFFFF) != 0)
  {
    v26 = 0;
    while (1)
    {
      v27 = v8 - 32 * v25;
      if ((v24 & 0x40000000) != 0)
        v27 = *(_QWORD *)(v8 - 8);
      if (*(_QWORD *)(v27 + 32 * *(unsigned int *)(v8 + 60) + 8 * v26) == a1)
        break;
      if (v25 == ++v26)
        goto LABEL_57;
    }
  }
  else
  {
LABEL_57:
    LODWORD(v26) = -1;
  }
  v28 = v25;
  if ((v24 & 0x40000000) != 0)
    v29 = *(_QWORD *)(v8 - 8);
  else
    v29 = v8 - 32 * v25;
  v30 = v26 == 0;
  if ((_DWORD)v25)
  {
    v31 = 0;
    while (1)
    {
      v32 = v8 - 32 * v28;
      if ((v24 & 0x40000000) != 0)
        v32 = *(_QWORD *)(v8 - 8);
      if (*(_QWORD *)(v32 + 32 * *(unsigned int *)(v8 + 60) + 8 * v31) == a1)
        break;
      if (v28 == ++v31)
        goto LABEL_67;
    }
  }
  else
  {
LABEL_67:
    LODWORD(v31) = -1;
  }
  if ((v24 & 0x40000000) != 0)
    v33 = *(_QWORD *)(v8 - 8);
  else
    v33 = v8 - 32 * v28;
  v34 = *(_QWORD *)(v29 + 32 * v30);
  v35 = *(_QWORD *)(v33 + 32 * v31);
  v78 = v80;
  v79 = 0x400000000;
  v75 = v77;
  v76 = 0x400000000;
  v36 = *(_DWORD *)(v18 + 20);
  if (v36 < 0 && (v59 = v18 - 32 * (v36 & 0x7FFFFFF), v60 = *(_QWORD *)(v59 - 8), (v60 & 0xFFFFFFFF0) != 0))
  {
    v38 = -(uint64_t)(v36 & 0x7FFFFFF);
    v37 = (*(_DWORD *)(v59 - 12) - *(_DWORD *)(v59 - v60));
  }
  else
  {
    v37 = 0;
    v38 = -(uint64_t)(v36 & 0x7FFFFFF);
  }
  v39 = -32 - 32 * v37 - 32 * v38;
  if ((v39 & 0x1FFFFFFFE0) != 0)
  {
    v40 = -(uint64_t)(v39 >> 5);
    v41 = v18;
    do
    {
      v42 = *(_QWORD *)(v41 - 32 * (*(_DWORD *)(v18 + 20) & 0x7FFFFFF));
      v43 = v79;
      if (v42 == v8)
      {
        if (v79 >= (unint64_t)HIDWORD(v79))
        {
          v71 = v41;
          v74 = v18;
          v65 = v40;
          v68 = v35;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v78, (uint64_t)v80, v79 + 1, 8);
          v35 = v68;
          v41 = v71;
          v40 = v65;
          v18 = v74;
          v43 = v79;
        }
        *((_QWORD *)v78 + v43) = v34;
        LODWORD(v79) = v79 + 1;
        v44 = v76;
        v45 = HIDWORD(v76);
        v42 = v35;
      }
      else
      {
        if (v79 >= (unint64_t)HIDWORD(v79))
        {
          v70 = v41;
          v73 = v18;
          v64 = v40;
          v67 = v35;
          v62 = *(_QWORD *)(v41 - 32 * (*(_DWORD *)(v18 + 20) & 0x7FFFFFF));
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v78, (uint64_t)v80, v79 + 1, 8);
          v42 = v62;
          v40 = v64;
          v35 = v67;
          v41 = v70;
          v18 = v73;
          v43 = v79;
        }
        *((_QWORD *)v78 + v43) = v42;
        LODWORD(v79) = v79 + 1;
        v44 = v76;
        v45 = HIDWORD(v76);
      }
      if (v44 >= v45)
      {
        v61 = v42;
        v63 = v40;
        v66 = v35;
        v69 = v41;
        v72 = v18;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v75, (uint64_t)v77, v44 + 1, 8);
        v42 = v61;
        v40 = v63;
        v35 = v66;
        v41 = v69;
        v18 = v72;
        v44 = v76;
      }
      *((_QWORD *)v75 + v44) = v42;
      LODWORD(v76) = v76 + 1;
      v41 += 32;
    }
    while (!__CFADD__(v40++, 1));
    v47 = v78;
    v48 = v75;
    v23 = *(_DWORD *)(*(_QWORD *)v20 + 36);
  }
  else
  {
    v48 = v77;
    v47 = v80;
  }
  if (v23 != 2470)
  {
    if (v23 == 1993)
    {
      v21 = 0;
      v51 = v47[1];
      if (*(_BYTE *)(*v47 + 16) == 16)
        v52 = *v47;
      else
        v52 = 0;
      v53 = *v48;
      v54 = v48[1];
      if (*(_BYTE *)(*v48 + 16) != 16)
        v53 = 0;
      if (*(_BYTE *)(v54 + 16) != 16)
        v54 = 0;
      if (!v51 || *(_BYTE *)(v51 + 16) != 16)
        goto LABEL_116;
      v55 = (_QWORD *)(v51 + 24);
      if (*(_DWORD *)(v51 + 32) >= 0x41u)
        v55 = (_QWORD *)*v55;
      v21 = 0;
      if (*v55 || !v52)
        goto LABEL_116;
      v56 = (_QWORD *)(v52 + 24);
      if (*(_DWORD *)(v52 + 32) >= 0x41u)
        v56 = (_QWORD *)*v56;
      if (!*v56)
      {
        v21 = 0;
        if (!v54 || !v53)
          goto LABEL_116;
        v57 = (_QWORD *)(v54 + 24);
        if (*(_DWORD *)(v54 + 32) >= 0x41u)
          v57 = (_QWORD *)*v57;
        if (*v57)
          goto LABEL_98;
        v58 = (_QWORD *)(v53 + 24);
        if (*(_DWORD *)(v53 + 32) >= 0x41u)
          v58 = (_QWORD *)*v58;
        if (*v58)
          goto LABEL_98;
      }
    }
    else if (v23 == 1992)
    {
      goto LABEL_90;
    }
LABEL_115:
    v21 = 0;
    goto LABEL_116;
  }
LABEL_90:
  v21 = 0;
  v49 = *v47;
  if (!*v47 || *(_BYTE *)(v49 + 16) != 16)
    goto LABEL_116;
  v50 = (_QWORD *)(v49 + 24);
  if (*(_DWORD *)(v49 + 32) >= 0x41u)
    v50 = (_QWORD *)*v50;
  v21 = 0;
  if (*v50 || *(_BYTE *)(*v48 + 16) != 16)
    goto LABEL_116;
  if (v23 == 2470 && !sub_1C5E9D8F8(v18))
    goto LABEL_115;
LABEL_98:
  v21 = 1;
LABEL_116:
  if (v48 != (_QWORD *)v77)
  {
    free(v48);
    v47 = v78;
  }
  if (v47 != v80)
    free(v47);
  return v21;
}

void sub_1C55C40B0(_QWORD *a1, llvm::BasicBlock *a2, int a3)
{
  llvm::BasicBlock *SinglePredecessor;
  _QWORD *v7;
  unsigned __int8 *v8;
  llvm::Instruction *v9;
  uint64_t *Successor;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  llvm::Value *v18;
  _QWORD *v19;
  uint64_t v20;
  char *v21;
  char *v22;
  unsigned __int8 **v23;
  int v24;
  unsigned __int8 *v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  char *v28;
  char *v29;
  llvm::Value *v30;
  _QWORD *v31;
  uint64_t v32;
  char *v33;
  char *v34;
  unsigned __int8 **v35;
  int v36;
  unsigned __int8 *v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD **v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  BOOL v51;
  uint64_t v53;
  uint64_t v54;
  llvm::Type *v55;
  llvm::DSOLocalEquivalent **v56;
  uint64_t v57;
  uint64_t v58;
  llvm::Type *v59;
  llvm::DSOLocalEquivalent **v60;
  _BYTE v61[32];
  __int16 v62;
  unsigned __int8 *v63;
  void *v64;
  unsigned int v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  _QWORD v72[10];

  v72[8] = *MEMORY[0x1E0C80C00];
  SinglePredecessor = (llvm::BasicBlock *)llvm::BasicBlock::getSinglePredecessor((llvm::BasicBlock *)a1);
  v7 = (_QWORD *)a1[5];
  if (v7 == a1 + 5)
  {
    v9 = 0;
  }
  else
  {
    if (v7)
      v8 = (unsigned __int8 *)(v7 - 3);
    else
      v8 = 0;
    if (v8[16] - 29 >= 0xB)
      v9 = 0;
    else
      v9 = (llvm::Instruction *)v8;
  }
  Successor = (uint64_t *)llvm::Instruction::getSuccessor(v9, 0);
  v11 = Successor;
  v12 = (_QWORD *)*((_QWORD *)SinglePredecessor + 5);
  if (v12 == (_QWORD *)((char *)SinglePredecessor + 40))
  {
    v13 = 0;
  }
  else
  {
    if (v12)
      v13 = (uint64_t)(v12 - 3);
    else
      v13 = 0;
    if (*(unsigned __int8 *)(v13 + 16) - 29 >= 0xB)
      v13 = 0;
  }
  if (*(_BYTE *)(v13 + 16) == 30)
    v14 = v13;
  else
    v14 = 0;
  v70 = v72;
  v71 = 0x800000000;
  sub_1C55C46D8(Successor, (uint64_t)&v70);
  v15 = *(_QWORD *)(v14 - 96);
  if (!a2)
  {
    sub_1C55C4780((uint64_t)SinglePredecessor, a1, v15, (uint64_t)v70, v71, a3 ^ 1);
    sub_1C4773D54((uint64_t)&v64, v14, 0, 0, 0);
    llvm::BasicBlock::removePredecessor((llvm::BasicBlock *)a1, SinglePredecessor, 0);
    v28 = (char *)operator new(0x60uLL);
    v29 = v28;
    *((_DWORD *)v28 + 13) = *((_DWORD *)v28 + 13) & 0x38000000 | 1;
    *(_QWORD *)v28 = 0;
    *((_QWORD *)v28 + 2) = 0;
    *((_QWORD *)v28 + 1) = 0;
    *((_QWORD *)v28 + 4) = **(_QWORD **)*v11 + 1576;
    v30 = (llvm::Value *)(v28 + 32);
    *((_QWORD *)v28 + 3) = v28 + 32;
    *((_QWORD *)v28 + 5) = 0;
    v28[48] = 30;
    v28[49] = 0;
    *((_WORD *)v28 + 25) = 0;
    *((_DWORD *)v28 + 13) = 1;
    *(_OWORD *)(v28 + 56) = 0u;
    *(_OWORD *)(v28 + 72) = 0u;
    *((_DWORD *)v28 + 22) = 0;
    *(_QWORD *)v28 = v11;
    v31 = v11 + 1;
    v32 = v11[1];
    *((_QWORD *)v28 + 1) = v32;
    if (v32)
      *(_QWORD *)(v32 + 16) = v28 + 8;
    *((_QWORD *)v28 + 2) = v31;
    *v31 = v28;
    v62 = 257;
    (*(void (**)(uint64_t, llvm::Value *, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)v69 + 16))(v69, v30, v61, v67, v68);
    if (!v65)
      goto LABEL_55;
    v33 = (char *)v64;
    v34 = (char *)v64 + 16 * v65;
    v35 = (unsigned __int8 **)(v29 + 80);
    while (1)
    {
      v36 = *(_DWORD *)v33;
      v37 = (unsigned __int8 *)*((_QWORD *)v33 + 1);
      if (v37)
      {
        if (!v36)
        {
          v63 = (unsigned __int8 *)*((_QWORD *)v33 + 1);
          llvm::MetadataTracking::track((uint64_t)&v63, v37, 2);
          v38 = *v35;
          if (!*v35)
          {
LABEL_53:
            v39 = v63;
            *v35 = v63;
            if (v39)
              llvm::MetadataTracking::retrack((uint64_t)&v63, v39, (uint64_t)(v29 + 80));
            goto LABEL_50;
          }
LABEL_47:
          llvm::MetadataTracking::untrack((uint64_t)(v29 + 80), v38);
          goto LABEL_53;
        }
      }
      else
      {
        v38 = *v35;
        if (!*v35 && (v29[55] & 0x20) == 0)
          goto LABEL_50;
        if (!v36)
        {
          v63 = 0;
          if (!v38)
            goto LABEL_53;
          goto LABEL_47;
        }
      }
      llvm::Value::setMetadata(v30, *(_DWORD *)v33, (llvm::MDNode *)v37);
LABEL_50:
      v33 += 16;
      if (v33 == v34)
        goto LABEL_55;
    }
  }
  sub_1C55C4780((uint64_t)a1, a2, v15, (uint64_t)v70, v71, a3);
  sub_1C4773D54((uint64_t)&v64, v14, 0, 0, 0);
  llvm::BasicBlock::removePredecessor(a2, SinglePredecessor, 0);
  v16 = (char *)operator new(0x60uLL);
  v17 = v16;
  *((_DWORD *)v16 + 13) = *((_DWORD *)v16 + 13) & 0x38000000 | 1;
  *(_QWORD *)v16 = 0;
  *((_QWORD *)v16 + 2) = 0;
  *((_QWORD *)v16 + 1) = 0;
  *((_QWORD *)v16 + 4) = **(_QWORD **)*a1 + 1576;
  v18 = (llvm::Value *)(v16 + 32);
  *((_QWORD *)v16 + 3) = v16 + 32;
  *((_QWORD *)v16 + 5) = 0;
  v16[48] = 30;
  v16[49] = 0;
  *((_WORD *)v16 + 25) = 0;
  *((_DWORD *)v16 + 13) = 1;
  *((_DWORD *)v16 + 22) = 0;
  *(_OWORD *)(v16 + 72) = 0u;
  *(_OWORD *)(v16 + 56) = 0u;
  v19 = a1 + 1;
  v20 = a1[1];
  *(_QWORD *)v16 = a1;
  *((_QWORD *)v16 + 1) = v20;
  if (v20)
    *(_QWORD *)(v20 + 16) = v16 + 8;
  *((_QWORD *)v16 + 2) = v19;
  *v19 = v16;
  v62 = 257;
  (*(void (**)(uint64_t, llvm::Value *, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)v69 + 16))(v69, v18, v61, v67, v68);
  if (v65)
  {
    v21 = (char *)v64;
    v22 = (char *)v64 + 16 * v65;
    v23 = (unsigned __int8 **)(v17 + 80);
    do
    {
      v24 = *(_DWORD *)v21;
      v25 = (unsigned __int8 *)*((_QWORD *)v21 + 1);
      if (v25)
      {
        if (!v24)
        {
          v63 = (unsigned __int8 *)*((_QWORD *)v21 + 1);
          llvm::MetadataTracking::track((uint64_t)&v63, v25, 2);
          v26 = *v23;
          if (!*v23)
          {
LABEL_36:
            v27 = v63;
            *v23 = v63;
            if (v27)
              llvm::MetadataTracking::retrack((uint64_t)&v63, v27, (uint64_t)(v17 + 80));
            goto LABEL_33;
          }
LABEL_30:
          llvm::MetadataTracking::untrack((uint64_t)(v17 + 80), v26);
          goto LABEL_36;
        }
      }
      else
      {
        v26 = *v23;
        if (!*v23 && (v17[55] & 0x20) == 0)
          goto LABEL_33;
        if (!v24)
        {
          v63 = 0;
          if (!v26)
            goto LABEL_36;
          goto LABEL_30;
        }
      }
      llvm::Value::setMetadata(v18, *(_DWORD *)v21, (llvm::MDNode *)v25);
LABEL_33:
      v21 += 16;
    }
    while (v21 != v22);
  }
LABEL_55:
  v40 = *(_DWORD *)(v14 + 20);
  if ((v40 & 0x40000000) != 0)
  {
    v42 = *(_QWORD *)(v14 - 8);
    v41 = v40 & 0x7FFFFFF;
    if (!v41)
      goto LABEL_62;
  }
  else
  {
    v41 = v40 & 0x7FFFFFF;
    v42 = v14 - 32 * v41;
    if (!v41)
      goto LABEL_62;
  }
  v43 = 32 * v41;
  v44 = (_QWORD **)(v42 + 16);
  do
  {
    if (*(v44 - 2))
    {
      **v44 = *(v44 - 1);
      v45 = (uint64_t)*(v44 - 1);
      if (v45)
        *(_QWORD *)(v45 + 16) = *v44;
    }
    *(v44 - 2) = 0;
    v44 += 4;
    v43 -= 32;
  }
  while (v43);
LABEL_62:
  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v14 + 40) + 40, (uint64_t ***)v14);
  v46 = *(_QWORD *)(v14 + 24);
  v47 = *(_QWORD **)(v14 + 32);
  *v47 = v46;
  *(_QWORD *)(v46 + 8) = v47;
  *(_QWORD *)(v14 + 24) = 0;
  *(_QWORD *)(v14 + 32) = 0;
  llvm::Value::deleteValue((llvm::Value *)v14);
  if (a2)
  {
    v48 = *((_QWORD *)a2 + 1);
    if (v48)
    {
      while (1)
      {
        v49 = *(_QWORD *)(v48 + 24);
        v50 = *(unsigned __int8 *)(v49 + 16);
        v51 = v49 && v50 >= 0x1C;
        if (v51 && v50 - 29 < 0xB)
          break;
        v48 = *(_QWORD *)(v48 + 8);
        if (!v48)
          goto LABEL_73;
      }
    }
    else
    {
LABEL_73:
      llvm::DeleteDeadBlock(a2, 0, 0);
    }
  }
  if (sub_1C55C39E0((llvm::BasicBlock *)a1))
    sub_1C55C4E98(a1);
  llvm::SimplifyInstructionsInBlock(a1, 0, v53, v54, v55, v56);
  if (sub_1C55C39E0((llvm::BasicBlock *)v11))
    sub_1C55C4E98(v11);
  llvm::SimplifyInstructionsInBlock(v11, 0, v57, v58, v59, v60);
  if (v64 != &v66)
    free(v64);
  if (v70 != v72)
    free(v70);
}

uint64_t sub_1C55C4634(uint64_t a1, uint64_t a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v6;
  _QWORD *v7;
  unint64_t v8;
  unsigned __int8 *v9;

  v3 = a2 + 40;
  v4 = *(_QWORD *)(a2 + 48);
  if (v4 == a2 + 40)
    return 0;
  v6 = 0;
  v7 = (_QWORD *)(a1 + 48);
  v8 = a3;
  do
  {
    v9 = v4 ? (unsigned __int8 *)(v4 - 24) : 0;
    if (v9[16] - 29 < 0xB)
      break;
    v6 += sub_1C5EA44DC((llvm::Instruction *)v9, *(_QWORD *)(a1 + 40), v7, 0);
    if (v6 >= v8)
      return 0xFFFFFFFFLL;
    v4 = *(_QWORD *)(v4 + 8);
  }
  while (v4 != v3);
  return v6;
}

_QWORD *sub_1C55C46D8(_QWORD *result, uint64_t a2)
{
  char *v2;
  char *v3;
  uint64_t v5;
  char *v6;
  unint64_t v7;

  v2 = (char *)(result + 5);
  v3 = (char *)result[6];
  if (v3 != (char *)(result + 5))
  {
    v5 = a2 + 16;
    do
    {
      if (v3)
        v6 = v3 - 24;
      else
        v6 = 0;
      if (!v3 || v6[16] != 83)
        break;
      v3 = (char *)*((_QWORD *)v3 + 1);
      v7 = *(unsigned int *)(a2 + 8);
      if (v7 >= *(unsigned int *)(a2 + 12))
      {
        result = llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v5, v7 + 1, 8);
        v7 = *(unsigned int *)(a2 + 8);
      }
      *(_QWORD *)(*(_QWORD *)a2 + 8 * v7) = v6;
      ++*(_DWORD *)(a2 + 8);
    }
    while (v3 != v2);
  }
  return result;
}

void sub_1C55C4780(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, unint64_t a5, int a6)
{
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  int v15;
  llvm::Value **v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t *v19;
  int v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  llvm::ValueSymbolTable *v29;
  llvm::ValueSymbolTable *v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t *v51;
  uint64_t *v52;
  uint64_t v53;
  llvm::Value *Select;
  int v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  llvm::Value *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  llvm::Value **v76;
  llvm::Value *v77;
  int v78;
  int v79;
  uint64_t v80;
  size_t *v81;
  size_t v82;
  unsigned __int8 *v83;
  int v84;
  int v85;
  _QWORD *v86;
  llvm::ValueSymbolTable *v87;
  uint64_t v88;
  int v89;
  llvm::ValueSymbolTable *v90;
  unsigned __int8 *__s1;
  uint64_t *v92;
  uint64_t v93;
  llvm::Value *v94;
  unsigned int v95;
  uint64_t v96;
  size_t __n;
  int v98;
  uint64_t v99;
  int v100;
  char v101[32];
  __int16 v102;
  void *v103[2];
  _QWORD v104[17];

  v104[15] = *MEMORY[0x1E0C80C00];
  v12 = (uint64_t *)a2[6];
  v13 = v12 - 3;
  if (v12)
    v14 = v12 - 3;
  else
    v14 = 0;
  if (v12 && *((_BYTE *)v14 + 16) == 83)
  {
    do
    {
      v15 = *((_DWORD *)v13 + 5);
      if ((v15 & 0x40000000) != 0)
        v16 = (llvm::Value **)*(v13 - 1);
      else
        v16 = (llvm::Value **)&v13[-4 * (v15 & 0x7FFFFFF)];
      llvm::Value::doRAUW((llvm::ValueAsMetadata *)v13, *v16, (llvm::Value *)1);
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(v13[5] + 40, (uint64_t ***)v13);
      v17 = v13[3];
      v18 = (_QWORD *)v13[4];
      *v18 = v17;
      *(_QWORD *)(v17 + 8) = v18;
      v13[3] = 0;
      v13[4] = 0;
      llvm::Value::deleteValue((llvm::Value *)v13);
      v12 = (uint64_t *)a2[6];
      v19 = v12 - 3;
      if (!v12)
        v19 = 0;
      v20 = *((unsigned __int8 *)v19 + 16);
      if (v20 == 83)
        v13 = v19;
      else
        v13 = 0;
    }
    while (v12 && v20 == 83);
  }
  v22 = (_QWORD *)(a1 + 40);
  v21 = *(_QWORD **)(a1 + 40);
  if (v21 == (_QWORD *)(a1 + 40))
  {
    v23 = 0;
  }
  else
  {
    v23 = v21 - 3;
    if (!v21)
      v23 = 0;
    if (*((unsigned __int8 *)v23 + 16) - 29 >= 0xB)
      v23 = 0;
  }
  v24 = (_QWORD *)a2[5];
  if (v24 == a2 + 5)
  {
    v25 = 0;
  }
  else
  {
    if (v24)
      v25 = v24 - 3;
    else
      v25 = 0;
    if (*((unsigned __int8 *)v25 + 16) - 29 >= 0xB)
      v25 = 0;
  }
  v26 = v25 + 3;
  if (v12 != v25 + 3 && v23 != v25)
  {
    v27 = v23 + 3;
    *(_WORD *)(a1 + 18) &= ~0x8000u;
    if ((_QWORD *)a1 == a2)
    {
LABEL_43:
      v33 = *v26;
      v34 = *v12;
      *(_QWORD *)(v34 + 8) = v26;
      *v26 = v34;
      v35 = *v27;
      *(_QWORD *)(v33 + 8) = v27;
      *v12 = v35;
      *(_QWORD *)(v35 + 8) = v12;
      *v27 = v33;
      v21 = (_QWORD *)*v22;
      goto LABEL_44;
    }
    v28 = *(_QWORD *)(a1 + 56);
    if (v28)
      v29 = *(llvm::ValueSymbolTable **)(v28 + 104);
    else
      v29 = 0;
    v30 = (llvm::ValueSymbolTable *)a2[7];
    if (v30)
      v30 = (llvm::ValueSymbolTable *)*((_QWORD *)v30 + 13);
    if (v29 == v30)
    {
      v31 = v12;
      do
      {
        v32 = v31 - 3;
        if (!v31)
          v32 = 0;
        v32[5] = a1;
        v31 = (uint64_t *)v31[1];
      }
      while (v31 != v26);
      goto LABEL_43;
    }
    v90 = v30;
    v87 = v29;
    v92 = v12;
    while (1)
    {
      v71 = (llvm::Value *)(v92 - 3);
      if (!v92)
        v71 = 0;
      v94 = v71;
      v89 = *((_DWORD *)v71 + 5) & 0x10000000;
      if (v90)
      {
        if (v89)
          break;
      }
LABEL_141:
      *((_QWORD *)v94 + 5) = a1;
      if (v87 && v89)
        llvm::ValueSymbolTable::reinsertValue(v87, v94);
      v92 = (uint64_t *)v92[1];
      if (v92 == v26)
        goto LABEL_43;
    }
    v72 = ***(_QWORD ***)v71;
    v73 = *(_QWORD *)(v72 + 152);
    v74 = *(unsigned int *)(v72 + 168);
    if ((_DWORD)v74)
    {
      LODWORD(v75) = (v74 - 1) & ((v94 >> 4) ^ (v94 >> 9));
      v76 = (llvm::Value **)(v73 + 16 * v75);
      v77 = *v76;
      if (*v76 == v94)
        goto LABEL_128;
      v78 = 1;
      while (v77 != (llvm::Value *)-4096)
      {
        v79 = v75 + v78++;
        v75 = v79 & (v74 - 1);
        v77 = *(llvm::Value **)(v73 + 16 * v75);
        if (v77 == v94)
        {
          v76 = (llvm::Value **)(v73 + 16 * v75);
          goto LABEL_128;
        }
      }
    }
    v76 = (llvm::Value **)(v73 + 16 * v74);
LABEL_128:
    v80 = *((unsigned int *)v90 + 2);
    if ((_DWORD)v80)
    {
      v81 = (size_t *)v76[1];
      v88 = *((unsigned int *)v90 + 5);
      __s1 = (unsigned __int8 *)v81 + v88;
      __n = *v81;
      if (*v81)
      {
        v100 = 0;
        v82 = *v81;
        v83 = __s1;
        do
        {
          v84 = *v83++;
          v100 = 33 * v100 + v84;
          --v82;
        }
        while (v82);
      }
      else
      {
        v100 = 0;
      }
      v95 = v80 - 1;
      v96 = *(_QWORD *)v90;
      v93 = *(_QWORD *)v90 + 8 * v80 + 8;
      v98 = 1;
      v85 = v100;
      while (1)
      {
        v99 = v85 & v95;
        v86 = *(_QWORD **)(v96 + 8 * v99);
        if (v86 != (_QWORD *)-8)
        {
          if (!v86)
            goto LABEL_141;
          if (*(_DWORD *)(v93 + 4 * v99) == v100 && __n == *v86 && (!__n || !memcmp(__s1, (char *)v86 + v88, __n)))
            break;
        }
        v85 = v98 + v99;
        ++v98;
      }
      *(_QWORD *)(v96 + 8 * (int)v99) = -8;
      *(int32x2_t *)((char *)v90 + 12) = vadd_s32(*(int32x2_t *)((char *)v90 + 12), (int32x2_t)0x1FFFFFFFFLL);
    }
    goto LABEL_141;
  }
LABEL_44:
  if (v21 == v22)
  {
    v37 = 0;
  }
  else
  {
    if (v21)
      v36 = (uint64_t)(v21 - 3);
    else
      v36 = 0;
    if (*(unsigned __int8 *)(v36 + 16) - 29 >= 0xB)
      v37 = 0;
    else
      v37 = v36;
  }
  sub_1C4773D54((uint64_t)v103, v37, 0, 0, 0);
  if (a5)
  {
    v38 = 0;
    v39 = 0;
    while (1)
    {
      v40 = *(_QWORD *)(a4 + 8 * v38);
      v41 = *(_DWORD *)(v40 + 20);
      v42 = v41 & 0x7FFFFFF;
      if ((v41 & 0x7FFFFFF) != 0)
      {
        v43 = 0;
        v44 = 32 * *(unsigned int *)(v40 + 60);
        while (1)
        {
          v45 = v40 - 32 * v42;
          if ((v41 & 0x40000000) != 0)
            v45 = *(_QWORD *)(v40 - 8);
          if (*(_QWORD *)(v45 + v44 + 8 * v43) == a1)
            break;
          if (v42 == ++v43)
          {
            v43 = 0xFFFFFFFFLL;
            goto LABEL_63;
          }
        }
        v43 = v43;
LABEL_63:
        v46 = 0;
        while (1)
        {
          v47 = v40 - 32 * v42;
          if ((v41 & 0x40000000) != 0)
            v47 = *(_QWORD *)(v40 - 8);
          if (*(_QWORD **)(v47 + v44 + 8 * v46) == a2)
            break;
          if (v42 == ++v46)
            goto LABEL_68;
        }
        v48 = v46;
      }
      else
      {
        v43 = 0xFFFFFFFFLL;
LABEL_68:
        v48 = 0xFFFFFFFFLL;
      }
      if (((v48 | v43) & 0x80000000) != 0)
        goto LABEL_111;
      if ((v41 & 0x40000000) != 0)
        v49 = *(_QWORD *)(v40 - 8);
      else
        v49 = v40 - 32 * v42;
      v50 = *(uint64_t **)(v49 + 32 * v43);
      v51 = *(uint64_t **)(v49 + 32 * v48);
      if (a6)
        v52 = v51;
      else
        v52 = v50;
      if (a6)
        v53 = (uint64_t)v50;
      else
        v53 = (uint64_t)v51;
      v102 = 257;
      Select = llvm::IRBuilderBase::CreateSelect((uint64_t *)v103, a3, v52, v53, (uint64_t)v101, 0);
      v55 = *(_DWORD *)(v40 + 20);
      v56 = v55 & 0x7FFFFFF;
      if ((v55 & 0x7FFFFFF) == 0)
        goto LABEL_96;
      if ((_DWORD)v56 != 2)
        break;
      llvm::Value::doRAUW((llvm::ValueAsMetadata *)v40, Select, (llvm::Value *)1);
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v40 + 40) + 40, (uint64_t ***)v40);
      v57 = *(_QWORD *)(v40 + 24);
      v58 = *(_QWORD **)(v40 + 32);
      *v58 = v57;
      *(_QWORD *)(v57 + 8) = v58;
      *(_QWORD *)(v40 + 24) = 0;
      *(_QWORD *)(v40 + 32) = 0;
      llvm::Value::deleteValue((llvm::Value *)v40);
LABEL_111:
      v38 = ++v39;
      if (a5 <= v39)
        goto LABEL_112;
    }
    v59 = v55 & 0x7FFFFFF;
    v60 = 32 * *(unsigned int *)(v40 + 60);
    while (1)
    {
      v61 = v40 - 32 * v56;
      if ((v55 & 0x40000000) != 0)
        v61 = *(_QWORD *)(v40 - 8);
      if (*(_QWORD *)(v61 + v60) == a1)
        break;
      v60 += 8;
      if (!--v59)
        goto LABEL_96;
    }
    v62 = 0;
    while (1)
    {
      v63 = v40 - 32 * v56;
      if ((v55 & 0x40000000) != 0)
        v63 = *(_QWORD *)(v40 - 8);
      if (*(_QWORD *)(v63 + 32 * *(unsigned int *)(v40 + 60) + 8 * v62) == a1)
        break;
      if (v56 == ++v62)
      {
        LODWORD(v62) = -1;
        break;
      }
    }
    llvm::PHINode::removeIncomingValue((llvm::PHINode *)v40, v62, 1);
LABEL_96:
    sub_1C477667C((llvm::PHINode *)v40, (uint64_t)Select, a1);
    v64 = *(_DWORD *)(v40 + 20);
    v65 = v64 & 0x7FFFFFF;
    if ((v64 & 0x7FFFFFF) != 0)
    {
      v66 = v64 & 0x7FFFFFF;
      v67 = 32 * *(unsigned int *)(v40 + 60);
      while (1)
      {
        v68 = v40 - 32 * v65;
        if ((v64 & 0x40000000) != 0)
          v68 = *(_QWORD *)(v40 - 8);
        if (*(_QWORD **)(v68 + v67) == a2)
          break;
        v67 += 8;
        if (!--v66)
          goto LABEL_110;
      }
      v69 = 0;
      while (1)
      {
        v70 = v40 - 32 * v65;
        if ((v64 & 0x40000000) != 0)
          v70 = *(_QWORD *)(v40 - 8);
        if (*(_QWORD **)(v70 + 32 * *(unsigned int *)(v40 + 60) + 8 * v69) == a2)
          break;
        if (v65 == ++v69)
        {
          LODWORD(v69) = -1;
          break;
        }
      }
      llvm::PHINode::removeIncomingValue((llvm::PHINode *)v40, v69, 1);
    }
LABEL_110:
    sub_1C477667C((llvm::PHINode *)v40, (uint64_t)Select, (uint64_t)a2);
    goto LABEL_111;
  }
LABEL_112:
  if (v103[0] != v104)
    free(v103[0]);
}

void sub_1C55C4E98(uint64_t *a1)
{
  uint64_t UniquePredecessor;
  llvm::DomTreeUpdater *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;

  UniquePredecessor = llvm::BasicBlock::getUniquePredecessor((llvm::BasicBlock *)a1);
  v4 = a1[7];
  v5 = *(_QWORD *)(v4 + 80);
  if (v5)
    v6 = v5 - 24;
  else
    v6 = 0;
  if (UniquePredecessor == v6)
    sub_1C4FCEAA0(*(_QWORD *)(UniquePredecessor + 56) + 72, (uint64_t *)(UniquePredecessor + 24), v4 + 72, a1 + 3);
  llvm::MergeBasicBlockIntoOnlyPred((unint64_t)a1, 0, v3);
}

uint64_t sub_1C55C4EF8()
{
  int v1;
  int v2;
  int *v3;

  v3 = &v2;
  v1 = 1;
  v2 = 32;
  sub_1C627D5FC(&v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED831878, &dword_1C475E000);
  v1 = 1;
  v2 = 4;
  v3 = &v2;
  sub_1C627D6CC(&v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED831938, &dword_1C475E000);
  v1 = 1;
  v2 = 8;
  v3 = &v2;
  sub_1C627D79C(&v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED807478, &dword_1C475E000);
  v1 = 1;
  v2 = -1;
  v3 = &v2;
  sub_1C62168E4((uint64_t)&unk_1ED807538, "flatten-cutoff", &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED807538, &dword_1C475E000);
}

uint64_t sub_1C55C5000(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeFunctionGroupInfoWrapperPassPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "float atomics emulation";
  *(_QWORD *)(v2 + 8) = 23;
  *(_QWORD *)(v2 + 16) = "float-atomics-emulation";
  *(_QWORD *)(v2 + 24) = 23;
  *(_QWORD *)(v2 + 32) = &unk_1ED8075F8;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C55C5158;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C55C5090(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED8075F8;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E8170A48;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED807600);
  if (v3 != -1)
  {
    v7[0] = sub_1C55C5000;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED807600, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C55C5158()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C55C5090(v0);
}

void sub_1C55C5184(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C55C51A8()
{
  return "SW emulation of float atomics";
}

void *sub_1C55C51B8(uint64_t a1, uint64_t a2)
{
  sub_1C4771E64(a2, a2 + 112, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
  return sub_1C4771E64(a2, a2, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
}

BOOL sub_1C55C51F8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  _BYTE *v12;
  _QWORD *v13;
  uint64_t ***v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t ****v20;
  uint64_t ***v21;
  int v22;
  int v23;
  uint64_t ***v24;
  uint64_t **v25;
  char *v26;
  uint64_t **v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t ****v34;
  uint64_t ***v35;
  int v36;
  int v37;
  uint64_t ***v38;
  uint64_t **v39;
  char *v40;
  uint64_t **v41;
  _QWORD *v42;
  uint64_t **v43;
  uint64_t **v44;
  _QWORD *v45;
  unsigned int v46;
  _QWORD **v47;
  uint64_t v48;
  uint64_t *v49;
  uint64_t *v50;
  uint64_t ***v51;
  uint64_t v52;
  uint64_t v53;
  unsigned __int8 *v54;
  unsigned int v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int8 *v58;
  char v59;
  char v60;
  char *v61;
  char *v62;
  _QWORD *v63;
  uint64_t v64;
  char *v65;
  char *v66;
  uint64_t *v67;
  llvm::Value *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  unsigned __int8 *v72;
  uint64_t *v73;
  uint64_t v74;
  unsigned __int8 *v75;
  const char **v76;
  const char **v77;
  unsigned __int8 **v78;
  int v79;
  unsigned __int8 *v80;
  unsigned __int8 *v81;
  unsigned __int8 *v82;
  uint64_t *v83;
  uint64_t *v84;
  unsigned __int8 *v85;
  llvm::Value *v86;
  _DWORD *v87;
  _DWORD *v88;
  uint64_t v89;
  llvm::Value *v90;
  _QWORD *v91;
  char *v92;
  char *v93;
  unsigned __int8 **v94;
  int v95;
  unsigned __int8 *v96;
  unsigned __int8 *v97;
  unsigned __int8 *v98;
  uint64_t v99;
  _QWORD *v100;
  const char **v101;
  const char **v102;
  unsigned __int8 **v103;
  int v104;
  unsigned __int8 *v105;
  unsigned __int8 *v106;
  unsigned __int8 *v107;
  unsigned __int8 **v109;
  unsigned __int8 **v110;
  unsigned __int8 **v111;
  const char **v112;
  const char **v113;
  const char **v114;
  char *v115;
  _BOOL4 v116;
  uint64_t v117;
  __int16 v118;
  llvm::BasicBlock *v119;
  _BYTE *v120;
  llvm::Value *v121;
  llvm::Value *v122;
  uint64_t ***v123;
  _QWORD v124[4];
  __int16 v125;
  unsigned __int8 *v126;
  void *v127;
  uint64_t v128;
  _BYTE v129[128];
  void *v130;
  uint64_t v131;
  _BYTE v132[16];
  __int16 v133;
  uint64_t **v134;
  _QWORD **v135;
  uint64_t v136;
  void **v137;
  void **v138;
  uint64_t v139;
  int v140;
  __int16 v141;
  char v142;
  uint64_t v143;
  uint64_t v144;
  void *v145;
  void *v146;
  const char **v147;
  uint64_t **v148;
  const char *v149;
  __int16 v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;

  v154 = *MEMORY[0x1E0C80C00];
  v127 = v129;
  v128 = 0x1000000000;
  v2 = a2 + 72;
  v3 = *(_QWORD *)(a2 + 80);
  if (v3 == a2 + 72)
  {
    return 0;
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = v3 - 24;
      if (!v3)
        v5 = 0;
      v6 = v5 + 40;
      v7 = *(_QWORD *)(v5 + 48);
      while (v7 != v6)
      {
        v8 = v7;
        v7 = *(_QWORD *)(v7 + 8);
        v9 = v8 - 24;
        if (!v8)
          v9 = 0;
        v10 = *(unsigned __int8 *)(v9 + 16);
        if (v10 == 65)
          v11 = v9;
        else
          v11 = 0;
        if (v8 && v10 == 65 && (*(_WORD *)(v11 + 18) >> 4) - 11 <= 1)
        {
          if (v4 >= HIDWORD(v128))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v127, (uint64_t)v129, v4 + 1, 8);
            v4 = v128;
          }
          *((_QWORD *)v127 + v4) = v11;
          v4 = v128 + 1;
          LODWORD(v128) = v128 + 1;
        }
      }
      v3 = *(_QWORD *)(v3 + 8);
    }
    while (v3 != v2);
    v12 = v127;
    v116 = v4 != 0;
    if (v4)
    {
      v115 = (char *)v127 + 8 * v4;
      while (1)
      {
        v13 = *(_QWORD **)v12;
        v14 = *(uint64_t ****)(*(_QWORD *)v12 + 40);
        v15 = v14 >> 4;
        v120 = v12;
        if ((*((_BYTE *)v14 + 23) & 0x10) != 0)
          break;
        v25 = 0;
        v26 = &byte_1C871356D;
LABEL_30:
        v118 = *((_WORD *)v13 + 9);
        v28 = *(_QWORD *)**v14[7];
        v150 = 773;
        v147 = (const char **)v26;
        v148 = (uint64_t)v25;
        v149 = ".post.atomic.emu";
        v29 = llvm::BasicBlock::splitBasicBlock((uint64_t *)v14, v13 + 3, (uint64_t)&v147, 0);
        if ((*((_BYTE *)v14 + 23) & 0x10) != 0)
        {
          v30 = ***v14;
          v31 = *(_QWORD *)(v30 + 152);
          v32 = *(unsigned int *)(v30 + 168);
          if (!(_DWORD)v32)
            goto LABEL_37;
          LODWORD(v33) = (v32 - 1) & (v15 ^ (v14 >> 9));
          v34 = (uint64_t ****)(v31 + 16 * v33);
          v35 = *v34;
          if (*v34 != v14)
          {
            v36 = 1;
            while (v35 != (uint64_t ***)-4096)
            {
              v37 = v33 + v36++;
              v33 = v37 & (v32 - 1);
              v35 = *(uint64_t ****)(v31 + 16 * v33);
              if (v35 == v14)
              {
                v34 = (uint64_t ****)(v31 + 16 * v33);
                goto LABEL_38;
              }
            }
LABEL_37:
            v34 = (uint64_t ****)(v31 + 16 * v32);
          }
LABEL_38:
          v38 = v34[1];
          v41 = *v38;
          v40 = (char *)(v38 + 2);
          v39 = v41;
          goto LABEL_39;
        }
        v39 = 0;
        v40 = &byte_1C871356D;
LABEL_39:
        v42 = *(_QWORD **)*v13;
        v150 = 773;
        v147 = (const char **)v40;
        v148 = (uint64_t)v39;
        v149 = ".atomic.emu";
        v43 = v14[7];
        v44 = (uint64_t **)operator new();
        *v44 = (uint64_t *)(*v42 + 1600);
        v44[1] = 0;
        v45 = v44 + 1;
        v46 = *((_DWORD *)v44 + 5) & 0xC0000000;
        v44[3] = 0;
        v47 = v44 + 3;
        *((_DWORD *)v44 + 4) = 22;
        *((_DWORD *)v44 + 5) = v46;
        v44[4] = 0;
        v44[5] = (uint64_t *)(v44 + 5);
        v44[6] = (uint64_t *)(v44 + 5);
        v44[7] = 0;
        if (v43)
        {
          v48 = (uint64_t)(v43 + 9);
          if (v29)
            v49 = (uint64_t *)(v29 + 24);
          else
            v49 = (uint64_t *)(v43 + 9);
          llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v48, v44);
          v50 = (uint64_t *)*v49;
          v44[3] = (uint64_t *)*v49;
          v44[4] = v49;
          v50[1] = (uint64_t)v47;
          *v49 = (uint64_t)v47;
        }
        llvm::Value::setName((uint64_t ***)v44, (uint64_t)&v147);
        v51 = (uint64_t ***)v14[5];
        if (v51 == v14 + 5)
        {
          v52 = 0;
        }
        else
        {
          if (v51)
            v53 = (uint64_t)(v51 - 3);
          else
            v53 = 0;
          if (*(unsigned __int8 *)(v53 + 16) - 29 >= 0xB)
            v52 = 0;
          else
            v52 = v53;
        }
        v119 = (llvm::BasicBlock *)v29;
        sub_1C4773D54((uint64_t)&v147, v52, 0, 0, 0);
        v54 = (unsigned __int8 *)*(v13 - 8);
        v55 = *(_DWORD *)(*(_QWORD *)v54 + 8);
        if ((v55 & 0xFE) == 0x12)
          v55 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v54 + 16) + 8);
        v117 = v28;
        v56 = v28 + 1960;
        v57 = llvm::PointerType::get((llvm::PointerType *)(v28 + 1960), (llvm::Type *)(v55 >> 8));
        v133 = 257;
        v58 = sub_1C4773E38((uint64_t *)&v147, 49, v54, v57, (uint64_t)&v130);
        v125 = 257;
        llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v151 + 56) + 40) + 272, v28 + 1960);
        v60 = v59;
        v61 = (char *)operator new(0x60uLL);
        v62 = v61;
        *((_QWORD *)v61 + 2) = 0;
        *((_QWORD *)v61 + 3) = v61 + 32;
        v121 = (llvm::Value *)v58;
        v123 = (uint64_t ***)(v61 + 32);
        v133 = 257;
        *((_QWORD *)v61 + 4) = v56;
        *((_QWORD *)v61 + 5) = 0;
        *((_WORD *)v61 + 24) = 60;
        *((_DWORD *)v61 + 13) = 1;
        *(_OWORD *)(v61 + 56) = 0u;
        *(_OWORD *)(v61 + 72) = 0u;
        *((_DWORD *)v61 + 22) = 0;
        *(_QWORD *)v61 = v58;
        *((_QWORD *)v61 + 1) = 0;
        if (v58)
        {
          v63 = v58 + 8;
          v64 = *((_QWORD *)v58 + 1);
          *((_QWORD *)v61 + 1) = v64;
          if (v64)
            *(_QWORD *)(v64 + 16) = v61 + 8;
          *((_QWORD *)v61 + 2) = v63;
          *v63 = v61;
        }
        *((_WORD *)v61 + 25) = 2 * (v60 & 0x3F);
        v61[92] = 1;
        llvm::Value::setName(v123, (uint64_t)&v130);
        (*(void (**)(uint64_t, uint64_t ***, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)v153 + 16))(v153, v123, v124, v151, v152);
        if ((_DWORD)v148)
        {
          v101 = v147;
          v102 = &v147[2 * v148];
          v103 = (unsigned __int8 **)(v62 + 80);
          do
          {
            v104 = *(_DWORD *)v101;
            v105 = (unsigned __int8 *)v101[1];
            if (v105)
            {
              if (!v104)
              {
                v126 = (unsigned __int8 *)v101[1];
                v110 = v103;
                v113 = v102;
                llvm::MetadataTracking::track((uint64_t)&v126, v105, 2);
                v103 = v110;
                v102 = v113;
                v106 = *v110;
                goto LABEL_114;
              }
            }
            else
            {
              v106 = *v103;
              if (!*v103 && (v62[55] & 0x20) == 0)
                goto LABEL_111;
              if (!v104)
              {
                v126 = 0;
LABEL_114:
                if (v106)
                {
                  v111 = v103;
                  v114 = v102;
                  llvm::MetadataTracking::untrack((uint64_t)v103, v106);
                  v103 = v111;
                  v102 = v114;
                }
                v107 = v126;
                *v103 = v126;
                if (!v107)
                  goto LABEL_111;
                v109 = v103;
                v112 = v102;
                llvm::MetadataTracking::retrack((uint64_t)&v126, v107, (uint64_t)v103);
                goto LABEL_110;
              }
            }
            v109 = v103;
            v112 = v102;
            llvm::Value::setMetadata((llvm::Value *)v123, *(_DWORD *)v101, (llvm::MDNode *)v105);
LABEL_110:
            v103 = v109;
            v102 = v112;
LABEL_111:
            v101 += 2;
          }
          while (v101 != v102);
        }
        v65 = (char *)operator new(0x60uLL);
        v66 = v65;
        *((_DWORD *)v65 + 13) = *((_DWORD *)v65 + 13) & 0x38000000 | 1;
        *(_QWORD *)v65 = 0;
        *((_QWORD *)v65 + 2) = 0;
        *((_QWORD *)v65 + 1) = 0;
        v67 = v44[1];
        *((_QWORD *)v65 + 4) = *(_QWORD *)**v44 + 1576;
        v68 = (llvm::Value *)(v65 + 32);
        *((_QWORD *)v65 + 3) = v65 + 32;
        *((_QWORD *)v65 + 5) = 0;
        v65[48] = 30;
        v65[49] = 0;
        *((_WORD *)v65 + 25) = 0;
        *((_DWORD *)v65 + 13) = 1;
        *((_DWORD *)v65 + 22) = 0;
        *(_OWORD *)(v65 + 72) = 0u;
        *(_OWORD *)(v65 + 56) = 0u;
        *(_QWORD *)v65 = v44;
        *((_QWORD *)v65 + 1) = v67;
        if (v67)
          v67[2] = (uint64_t)(v65 + 8);
        *((_QWORD *)v65 + 2) = v45;
        *v45 = v65;
        v133 = 257;
        (*(void (**)(uint64_t, llvm::Value *, void **, uint64_t, uint64_t))(*(_QWORD *)v153 + 16))(v153, v68, &v130, v151, v152);
        if ((_DWORD)v148)
        {
          v76 = v147;
          v77 = &v147[2 * v148];
          v78 = (unsigned __int8 **)(v66 + 80);
          do
          {
            v79 = *(_DWORD *)v76;
            v80 = (unsigned __int8 *)v76[1];
            if (v80)
            {
              if (!v79)
              {
                v124[0] = v76[1];
                llvm::MetadataTracking::track((uint64_t)v124, v80, 2);
                v81 = *v78;
                if (!*v78)
                {
LABEL_76:
                  v82 = (unsigned __int8 *)v124[0];
                  *v78 = (unsigned __int8 *)v124[0];
                  if (v82)
                    llvm::MetadataTracking::retrack((uint64_t)v124, v82, (uint64_t)(v66 + 80));
                  goto LABEL_73;
                }
LABEL_70:
                llvm::MetadataTracking::untrack((uint64_t)(v66 + 80), v81);
                goto LABEL_76;
              }
            }
            else
            {
              v81 = *v78;
              if (!*v78 && (v66[55] & 0x20) == 0)
                goto LABEL_73;
              if (!v79)
              {
                v124[0] = 0;
                if (!v81)
                  goto LABEL_76;
                goto LABEL_70;
              }
            }
            llvm::Value::setMetadata(v68, *(_DWORD *)v76, (llvm::MDNode *)v80);
LABEL_73:
            v76 += 2;
          }
          while (v76 != v77);
        }
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v52 + 40) + 40, (uint64_t ***)v52);
        v69 = *(_QWORD *)(v52 + 24);
        v70 = *(_QWORD **)(v52 + 32);
        *v70 = v69;
        *(_QWORD *)(v69 + 8) = v70;
        *(_QWORD *)(v52 + 24) = 0;
        *(_QWORD *)(v52 + 32) = 0;
        llvm::Value::deleteValue((llvm::Value *)v52);
        v71 = **v44;
        v130 = v132;
        v131 = 0x200000000;
        v136 = v71;
        v137 = &v145;
        v138 = &v146;
        v139 = 0;
        v140 = 0;
        v141 = 512;
        v142 = 7;
        v143 = 0;
        v144 = 0;
        v145 = &unk_1E8167888;
        v146 = &unk_1E8167A08;
        v134 = v44;
        v135 = v44 + 5;
        v125 = 257;
        v72 = (unsigned __int8 *)sub_1C4867E94((uint64_t)&v130, v56, 2, (uint64_t)v124);
        v125 = 257;
        v73 = (uint64_t *)sub_1C4773E38((uint64_t *)&v130, 49, v72, v117 + 1672, (uint64_t)v124);
        v74 = *(v13 - 4);
        v125 = 257;
        if ((v118 & 0xF0) == 0xB0)
          v75 = (unsigned __int8 *)sub_1C534554C((uint64_t)&v130, v73, v74, (uint64_t)v124, 0);
        else
          v75 = (unsigned __int8 *)sub_1C477265C((uint64_t)&v130, v73, v74, (uint64_t)v124, 0);
        v125 = 257;
        v83 = (uint64_t *)sub_1C4773E38((uint64_t *)&v130, 49, v75, v56, (uint64_t)v124);
        v84 = (uint64_t *)sub_1C61D75CC((uint64_t *)&v130, (uint64_t)v121, (uint64_t ***)v72, v83, HIBYTE(*((_WORD *)v13 + 9)) & 0x3F | 0x100u, (*((_WORD *)v13 + 9) >> 1) & 7, *((_DWORD *)&unk_1C865F6F0 + (((unint64_t)*((unsigned __int16 *)v13 + 9) >> 1) & 7)- 2), 1);
        LODWORD(v126) = 0;
        v125 = 257;
        v85 = (unsigned __int8 *)sub_1C506DBC4((uint64_t)&v130, v84, (unsigned int *)&v126, 1, (uint64_t)v124);
        LODWORD(v126) = 1;
        v125 = 257;
        v86 = (llvm::Value *)sub_1C506DBC4((uint64_t)&v130, v84, (unsigned int *)&v126, 1, (uint64_t)v124);
        v125 = 257;
        v122 = (llvm::Value *)sub_1C4773E38((uint64_t *)&v130, 49, v85, v117 + 1672, (uint64_t)v124);
        v87 = operator new(0xA0uLL);
        v88 = v87;
        v89 = 0;
        v90 = (llvm::Value *)(v87 + 24);
        v87[29] = v87[29] & 0x38000000 | 3;
        do
        {
          v91 = &v87[v89];
          *v91 = 0;
          v91[1] = 0;
          v91[2] = 0;
          v91[3] = v90;
          v89 += 8;
        }
        while (v89 != 24);
        llvm::BranchInst::BranchInst((llvm::BranchInst *)(v87 + 24), v119, (llvm::BasicBlock *)v44, v86, 0);
        v125 = 257;
        (*((void (**)(void **, llvm::Value *, _QWORD *, uint64_t **, _QWORD **))*v138 + 2))(v138, v90, v124, v134, v135);
        if ((_DWORD)v131)
        {
          v92 = (char *)v130;
          v93 = (char *)v130 + 16 * v131;
          v94 = (unsigned __int8 **)(v88 + 36);
          do
          {
            v95 = *(_DWORD *)v92;
            v96 = (unsigned __int8 *)*((_QWORD *)v92 + 1);
            if (v96)
            {
              if (!v95)
              {
                v126 = (unsigned __int8 *)*((_QWORD *)v92 + 1);
                llvm::MetadataTracking::track((uint64_t)&v126, v96, 2);
                v97 = *v94;
                if (!*v94)
                {
LABEL_94:
                  v98 = v126;
                  *v94 = v126;
                  if (v98)
                    llvm::MetadataTracking::retrack((uint64_t)&v126, v98, (uint64_t)(v88 + 36));
                  goto LABEL_91;
                }
LABEL_88:
                llvm::MetadataTracking::untrack((uint64_t)(v88 + 36), v97);
                goto LABEL_94;
              }
            }
            else
            {
              v97 = *v94;
              if (!*v94 && (*((_BYTE *)v88 + 119) & 0x20) == 0)
                goto LABEL_91;
              if (!v95)
              {
                v126 = 0;
                if (!v97)
                  goto LABEL_94;
                goto LABEL_88;
              }
            }
            llvm::Value::setMetadata(v90, *(_DWORD *)v92, (llvm::MDNode *)v96);
LABEL_91:
            v92 += 16;
          }
          while (v92 != v93);
        }
        sub_1C477667C((llvm::PHINode *)v72, (uint64_t)v85, (uint64_t)v44);
        sub_1C477667C((llvm::PHINode *)v72, (uint64_t)v123, (uint64_t)v14);
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v13, v122, (llvm::Value *)1);
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(v13[5] + 40, (uint64_t ***)v13);
        v99 = v13[3];
        v100 = (_QWORD *)v13[4];
        *v100 = v99;
        *(_QWORD *)(v99 + 8) = v100;
        v13[3] = 0;
        v13[4] = 0;
        llvm::Value::deleteValue((llvm::Value *)v13);
        if (v130 != v132)
          free(v130);
        if (v147 != &v149)
          free(v147);
        v12 = v120 + 8;
        if (v120 + 8 == v115)
        {
          v12 = v127;
          goto LABEL_120;
        }
      }
      v16 = ***v14;
      v17 = *(_QWORD *)(v16 + 152);
      v18 = *(unsigned int *)(v16 + 168);
      if ((_DWORD)v18)
      {
        LODWORD(v19) = (v18 - 1) & (v15 ^ (v14 >> 9));
        v20 = (uint64_t ****)(v17 + 16 * v19);
        v21 = *v20;
        if (*v20 == v14)
        {
LABEL_29:
          v24 = v20[1];
          v27 = *v24;
          v26 = (char *)(v24 + 2);
          v25 = v27;
          goto LABEL_30;
        }
        v22 = 1;
        while (v21 != (uint64_t ***)-4096)
        {
          v23 = v19 + v22++;
          v19 = v23 & (v18 - 1);
          v21 = *(uint64_t ****)(v17 + 16 * v19);
          if (v21 == v14)
          {
            v20 = (uint64_t ****)(v17 + 16 * v19);
            goto LABEL_29;
          }
        }
      }
      v20 = (uint64_t ****)(v17 + 16 * v18);
      goto LABEL_29;
    }
LABEL_120:
    if (v12 != v129)
      free(v12);
  }
  return v116;
}

uint64_t sub_1C55C5CE4(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "fma-contraction";
  *(_QWORD *)(v2 + 8) = 15;
  *(_QWORD *)(v2 + 16) = "fma";
  *(_QWORD *)(v2 + 24) = 3;
  *(_QWORD *)(v2 + 32) = &unk_1ED807608;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C55C5E3C;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C55C5D74(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED807608;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E8170AE8;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED807610);
  if (v3 != -1)
  {
    v7[0] = sub_1C55C5CE4;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED807610, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C55C5E3C()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C55C5D74(v0);
}

void sub_1C55C5E68(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C55C5E8C(uint64_t a1, uint64_t a2)
{
  return sub_1C4771E64(a2, a2, (uint64_t)llvm::TargetLibraryInfoWrapperPass::ID);
}

uint64_t sub_1C55C5E9C(uint64_t a1, uint64_t a2)
{
  char **v3;
  char *v4;
  uint64_t v5;
  void **v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int8 *v16;
  unsigned int v17;
  BOOL v18;
  uint64_t v19;
  unsigned int v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  char v24;
  int v25;
  int v26;
  uint64_t **v27;
  uint64_t *v28;
  unsigned int v29;
  uint64_t *v30;
  unsigned __int8 *v31;
  char v32;
  unsigned int v33;
  char v34;
  uint64_t *v35;
  char v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t **v40;
  uint64_t *v41;
  int v42;
  int v43;
  int v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  BOOL v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  unsigned __int8 *v56;
  uint64_t v57;
  unsigned int v58;
  unsigned __int8 **v59;
  unsigned __int8 *v60;
  unsigned __int8 **v61;
  int v62;
  BOOL v63;
  unsigned int v64;
  unsigned __int8 **v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t v68;
  llvm::Value *v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v73;
  char v75;
  uint64_t v76;
  int v77;
  char v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int v82;
  BOOL v83;
  uint64_t v84;
  uint64_t v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  unsigned int v91;
  unsigned int v92;
  BOOL v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  int v100;
  int v101;
  uint64_t v102;
  _QWORD *v103;
  unint64_t v104;
  unint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  _QWORD *v108;
  void *v110;
  void **v111;
  int v112;
  uint64_t v113;
  uint64_t *v114;
  int v115;
  int v116;
  int v117;
  uint64_t v118;
  uint64_t v119;
  char v120[32];
  __int16 v121;
  uint64_t v122;
  void *__src;
  uint64_t v124;
  void *v125[2];
  _BYTE v126[32];
  uint64_t v127;
  unsigned __int8 *v128;
  uint64_t v129;
  void **v130;
  void **v131;
  uint64_t v132;
  int v133;
  __int16 v134;
  char v135;
  uint64_t v136;
  uint64_t v137;
  void *v138;
  void *v139;
  _QWORD *v140;
  uint64_t v141;
  unsigned int v142;
  void *v143;
  uint64_t v144;
  _BYTE v145[64];
  void *v146;
  uint64_t v147;
  _BYTE v148[64];
  unsigned __int8 *v149;
  uint64_t v150;
  unsigned __int8 *v151;
  void **v152;
  uint64_t v153;
  int v154;
  uint64_t v155;
  uint64_t v156;
  int v157;
  uint64_t v158;

  v158 = *MEMORY[0x1E0C80C00];
  v3 = **(char ****)(a1 + 8);
  do
  {
    v4 = *v3;
    v3 += 2;
  }
  while (v4 != llvm::TargetLibraryInfoWrapperPass::ID);
  v5 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v3 - 1) + 96))(*(v3 - 1), llvm::TargetLibraryInfoWrapperPass::ID);
  v149 = 0;
  v150 = 0;
  LODWORD(v151) = 0;
  v152 = 0;
  v153 = 0;
  v154 = 0;
  v155 = 0;
  v156 = 0;
  v157 = 0;
  llvm::TargetLibraryAnalysis::run(v5 + 32, a2, (uint64_t)&v122);
  *(_QWORD *)(v5 + 240) = v122;
  if (*(_BYTE *)(v5 + 320))
  {
    if ((uint64_t *)(v5 + 240) == &v122)
    {
LABEL_16:
      *(_DWORD *)(v5 + 312) = v127;
      goto LABEL_17;
    }
    v6 = (void **)(v5 + 248);
    v7 = v124;
    v8 = *(unsigned int *)(v5 + 256);
    if (v8 >= v124)
    {
      if ((_DWORD)v124)
        memmove(*v6, __src, 8 * v124);
      goto LABEL_15;
    }
    if (*(_DWORD *)(v5 + 260) < v124)
    {
      *(_DWORD *)(v5 + 256) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5 + 248, v5 + 264, v7, 8);
    }
    else if ((_DWORD)v8)
    {
      memmove(*v6, __src, 8 * v8);
      goto LABEL_13;
    }
    v8 = 0;
LABEL_13:
    if (v8 != v124)
      memcpy((char *)*v6 + 8 * v8, (char *)__src + 8 * v8, 8 * v124 - 8 * v8);
LABEL_15:
    *(_DWORD *)(v5 + 256) = v7;
    goto LABEL_16;
  }
  v110 = (void *)(v5 + 264);
  *(_QWORD *)(v5 + 248) = v5 + 264;
  v111 = (void **)(v5 + 248);
  *(_QWORD *)(v5 + 256) = 0x600000000;
  v112 = v124;
  if ((_DWORD)v124 && v111 != &__src)
  {
    if (v124 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v5 + 248, v5 + 264, v124, 8);
      v113 = v124;
      if (!(_DWORD)v124)
      {
LABEL_238:
        *(_DWORD *)(v5 + 256) = v112;
        goto LABEL_239;
      }
      v110 = *v111;
    }
    else
    {
      v113 = v124;
    }
    memcpy(v110, __src, 8 * v113);
    goto LABEL_238;
  }
LABEL_239:
  *(_DWORD *)(v5 + 312) = v127;
  *(_BYTE *)(v5 + 320) = 1;
LABEL_17:
  if (__src != v125)
    free(__src);
  MEMORY[0x1CAA32FB4](v155, 8);
  sub_1C4D8B440((uint64_t *)&v152);
  sub_1C4D8B52C((uint64_t *)&v149);
  v122 = a2;
  __src = (void *)(v5 + 240);
  v124 = 0;
  v9 = **(_QWORD **)a2;
  v125[0] = v126;
  v125[1] = (void *)0x200000000;
  v129 = v9;
  v130 = &v138;
  v131 = &v139;
  v132 = 0;
  v133 = 0;
  v134 = 512;
  v135 = 7;
  v127 = 0;
  v128 = 0;
  v136 = 0;
  v137 = 0;
  v138 = &unk_1E8167888;
  v139 = &unk_1E8167A08;
  v142 = 0;
  v140 = 0;
  v141 = 0;
  v10 = *(_QWORD *)(a2 + 80);
  v118 = a2 + 72;
  if (v10 != a2 + 72)
  {
    v11 = 0;
    while (1)
    {
      v119 = v10;
      if (v10)
        v12 = v10 - 24;
      else
        v12 = 0;
      v124 = v12;
      if (v141)
      {
        if (v142 > 4 * (int)v141 && v142 >= 0x41)
        {
          v100 = 1 << (33 - __clz(v141 - 1));
          if (v100 <= 64)
            v100 = 64;
          if ((_DWORD)v141)
            v101 = v100;
          else
            v101 = 0;
          if (v101 == v142)
          {
            v141 = 0;
            v102 = 16 * v142;
            v103 = v140;
            do
            {
              *v103 = -4096;
              v103 += 2;
              v102 -= 16;
            }
            while (v102);
          }
          else
          {
            MEMORY[0x1CAA32FB4](v140, 8);
            if (v101)
            {
              v104 = (4 * v101 / 3u + 1) | ((unint64_t)(4 * v101 / 3u + 1) >> 1);
              v105 = v104 | (v104 >> 2) | ((v104 | (v104 >> 2)) >> 4);
              v142 = (((v105 | (v105 >> 8)) >> 16) | v105 | (v105 >> 8)) + 1;
              v106 = operator new(16 * v142, (std::align_val_t)8uLL);
              v140 = v106;
              v141 = 0;
              if (v142)
              {
                v107 = 16 * v142;
                do
                {
                  *v106 = -4096;
                  v106 += 2;
                  v107 -= 16;
                }
                while (v107);
              }
            }
            else
            {
              v140 = 0;
              v141 = 0;
              v142 = 0;
            }
          }
        }
        else
        {
          if (v142)
          {
            v98 = v140;
            v99 = 16 * v142;
            do
            {
              *v98 = -4096;
              v98 += 2;
              v99 -= 16;
            }
            while (v99);
          }
          v141 = 0;
        }
      }
      v13 = v12 + 40;
      v14 = *(_QWORD *)(v12 + 48);
      if (v14 == v12 + 40)
        goto LABEL_204;
      do
      {
        v15 = *(_QWORD *)(v14 + 8);
        if (v14)
          v16 = (unsigned __int8 *)(v14 - 24);
        else
          v16 = 0;
        v17 = v16[16];
        v18 = v17 > 0x2E;
        v19 = (1 << v17) & 0x540000000000;
        if (v18 || v19 == 0)
          goto LABEL_42;
        v21 = dword_1ED80760C++;
        if (v21 >= dword_1ED807698 || (~v16[17] & 0x42) != 0)
          goto LABEL_40;
        v127 = *((_QWORD *)v16 + 5);
        v128 = v16 + 24;
        v22 = (unsigned __int8 *)*((_QWORD *)v16 + 6);
        v149 = v22;
        if (v22)
        {
          llvm::MetadataTracking::track((uint64_t)&v149, v22, 2);
          v23 = v149;
        }
        else
        {
          v23 = 0;
        }
        sub_1C4774EF4((uint64_t)v125, 0, (uint64_t)v23);
        if (v149)
          llvm::MetadataTracking::untrack((uint64_t)&v149, v149);
        if ((*(_BYTE *)(*(_QWORD *)v16 + 8) & 0xFD) != 0)
          goto LABEL_40;
        v25 = v16[16];
        if (v25 != 44 && v25 != 42)
          goto LABEL_40;
        v26 = *((_DWORD *)v16 + 5);
        if ((v26 & 0x40000000) != 0)
          v27 = (uint64_t **)*((_QWORD *)v16 - 1);
        else
          v27 = (uint64_t **)&v16[-32 * (v26 & 0x7FFFFFF)];
        v28 = *v27;
        v29 = *((unsigned __int8 *)*v27 + 16);
        if (*v27 && v29 == 46)
          goto LABEL_51;
        v30 = v27[4];
        if (v30 && *((_BYTE *)v30 + 16) == 46)
        {
          if (v29 < 0x1C)
            goto LABEL_56;
LABEL_51:
          if (v28[5] == v124)
          {
LABEL_56:
            if ((v26 & 0x40000000) != 0)
              v31 = (unsigned __int8 *)*((_QWORD *)v16 - 1);
            else
              v31 = &v16[-32 * (v26 & 0x7FFFFFF)];
            v55 = *((_QWORD *)v31 + 4);
            if (!v55 || *(unsigned __int8 *)(v55 + 16) < 0x1Cu || *(_QWORD *)(v55 + 40) == v124)
            {
              v56 = (v26 & 0x40000000) != 0 ? (unsigned __int8 *)*((_QWORD *)v16 - 1) : &v16[-32 * (v26 & 0x7FFFFFF)];
              if (!*(_QWORD *)v56
                || *(_BYTE *)(*(_QWORD *)v56 + 16) != 46
                || (v57 = *((_QWORD *)v56 + 4)) == 0
                || *(_BYTE *)(v57 + 16) != 46)
              {
                v149 = v16;
                if (v142)
                {
                  v58 = (v142 - 1) & ((v16 >> 4) ^ (v16 >> 9));
                  v59 = (unsigned __int8 **)&v140[2 * v58];
                  v60 = *v59;
                  if (*v59 != v16)
                  {
                    v61 = 0;
                    v62 = 1;
                    while (v60 != (unsigned __int8 *)-4096)
                    {
                      if (v61)
                        v63 = 0;
                      else
                        v63 = v60 == (unsigned __int8 *)-8192;
                      if (v63)
                        v61 = v59;
                      v64 = v58 + v62++;
                      v58 = v64 & (v142 - 1);
                      v59 = (unsigned __int8 **)&v140[2 * v58];
                      v60 = *v59;
                      if (*v59 == v16)
                        goto LABEL_123;
                    }
                    if (v61)
                      v65 = v61;
                    else
                      v65 = v59;
LABEL_122:
                    v59 = (unsigned __int8 **)sub_1C55C6CF0((uint64_t)&v140, (uint64_t)&v149, (uint64_t *)&v149, v65);
                    *v59 = v149;
                    *((_BYTE *)v59 + 8) = 0;
                  }
LABEL_123:
                  v24 = 0;
                  *((_BYTE *)v59 + 8) = 1;
                  goto LABEL_41;
                }
                v65 = 0;
                goto LABEL_122;
              }
            }
          }
LABEL_40:
          v24 = 0;
          goto LABEL_41;
        }
        v32 = 0;
        v33 = v142 - 1;
        v34 = 1;
        while (1)
        {
          v35 = v28;
          v28 = v30;
          v36 = v34;
          if (!v35)
            goto LABEL_62;
          v37 = *((unsigned __int8 *)v35 + 16);
          if (v37 < 0x1C)
            goto LABEL_62;
          if (v35[5] != v124)
            goto LABEL_62;
          v38 = v35[1];
          if (!v38 || *(_QWORD *)(v38 + 8) || v37 != 44 && v37 != 42)
            goto LABEL_62;
          if (!v142)
            goto LABEL_75;
          LODWORD(v39) = v33 & ((v35 >> 4) ^ (v35 >> 9));
          v40 = (uint64_t **)&v140[2 * v39];
          v41 = *v40;
          if (*v40 != v35)
            break;
LABEL_74:
          if (v40 == &v140[2 * v142])
            goto LABEL_75;
LABEL_62:
          v34 = 0;
          v32 = 1;
          v30 = v35;
          if ((v36 & 1) == 0)
            goto LABEL_138;
        }
        v42 = 1;
        while (v41 != (uint64_t *)-4096)
        {
          v43 = v39 + v42++;
          v39 = v43 & v33;
          v41 = (uint64_t *)v140[2 * v39];
          if (v41 == v35)
          {
            v40 = (uint64_t **)&v140[2 * v39];
            goto LABEL_74;
          }
        }
LABEL_75:
        if ((~*((unsigned __int8 *)v35 + 17) & 0x42) != 0)
          goto LABEL_62;
        v44 = *((_DWORD *)v35 + 5);
        v45 = (v44 & 0x40000000) != 0 ? (uint64_t *)*(v35 - 1) : &v35[-4 * (v44 & 0x7FFFFFF)];
        v46 = *v45;
        if (!*v45)
          goto LABEL_62;
        if (*(_BYTE *)(v46 + 16) != 46)
          goto LABEL_62;
        v47 = v45[4];
        if (!v47)
          goto LABEL_62;
        if (*(_BYTE *)(v47 + 16) != 46)
          goto LABEL_62;
        if ((~*(unsigned __int8 *)(v46 + 17) & 0x42) != 0)
          goto LABEL_62;
        if ((~*(unsigned __int8 *)(v47 + 17) & 0x42) != 0)
          goto LABEL_62;
        v48 = *(_QWORD *)(v46 + 8);
        if (!v48)
          goto LABEL_62;
        if (*(_QWORD *)(v48 + 8))
          goto LABEL_62;
        v49 = *(_QWORD *)(v47 + 8);
        if (!v49 || *(_QWORD *)(v49 + 8) || *(_QWORD *)(v46 + 40) != v124 || *(_QWORD *)(v47 + 40) != v124)
          goto LABEL_62;
        v114 = (uint64_t *)v46;
        if (v25 == 42)
        {
          v50 = v37 != 42;
          v51 = (uint64_t *)v47;
          goto LABEL_94;
        }
        if ((v32 & 1) == 0)
        {
          if (v37 == 42)
          {
            LOWORD(v153) = 257;
            v52 = sub_1C477265C((uint64_t)v125, (uint64_t *)v47, (uint64_t)v28, (uint64_t)&v149, 0);
            sub_1C55C6FA8(v52, (uint64_t)v16);
            LOWORD(v153) = 257;
            v66 = v114;
            goto LABEL_131;
          }
          LOWORD(v153) = 257;
          v47 = sub_1C534554C((uint64_t)v125, (uint64_t *)v47, (uint64_t)v28, (uint64_t)&v149, 0);
          sub_1C55C6FA8(v47, (uint64_t)v16);
          LOWORD(v153) = 257;
          v53 = v114;
          goto LABEL_134;
        }
        if (v37 != 44)
        {
          LOWORD(v153) = 257;
          v68 = sub_1C477265C((uint64_t)v125, v28, v46, (uint64_t)&v149, 0);
          sub_1C55C6FA8(v68, (uint64_t)v16);
          LOWORD(v153) = 257;
          v53 = (uint64_t *)v68;
LABEL_134:
          v54 = v47;
LABEL_135:
          v67 = sub_1C477265C((uint64_t)v125, v53, v54, (uint64_t)&v149, 0);
          goto LABEL_136;
        }
        v50 = 1;
        v51 = (uint64_t *)v46;
        v114 = (uint64_t *)v47;
LABEL_94:
        LOWORD(v153) = 257;
        v52 = sub_1C534554C((uint64_t)v125, v114, (uint64_t)v28, (uint64_t)&v149, 0);
        sub_1C55C6FA8(v52, (uint64_t)v16);
        if (v50)
        {
          LOWORD(v153) = 257;
          v53 = (uint64_t *)v52;
          v54 = (uint64_t)v51;
          goto LABEL_135;
        }
        LOWORD(v153) = 257;
        v66 = v51;
LABEL_131:
        v67 = sub_1C534554C((uint64_t)v125, v66, v52, (uint64_t)&v149, 0);
LABEL_136:
        v69 = (llvm::Value *)v67;
        sub_1C55C6FA8(v67, (uint64_t)v16);
        if (v69)
          goto LABEL_198;
        v25 = v16[16];
LABEL_138:
        if (v25 != 42)
          goto LABEL_40;
        v70 = 0;
        v149 = (unsigned __int8 *)&v151;
        HIDWORD(v150) = 8;
        v146 = v148;
        v147 = 0x800000000;
        v143 = v145;
        v144 = 0x800000000;
        v71 = 1;
        v151 = v16;
        do
        {
          v72 = *(_QWORD *)&v149[8 * v71 - 8];
          LODWORD(v150) = v71 - 1;
          v73 = *(_QWORD *)(v72 + 8);
          if (v73)
            LODWORD(v73) = *(_QWORD *)(v73 + 8) == 0;
          if ((unsigned __int8 *)v72 != v16 && (_DWORD)v73 == 0)
          {
            v89 = v147;
            if (v147 >= (unint64_t)HIDWORD(v147))
            {
              v90 = v70;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v146, (uint64_t)v148, v147 + 1, 8);
              v70 = v90;
              v89 = v147;
            }
            *((_QWORD *)v146 + v89) = v72;
            LODWORD(v147) = v147 + 1;
          }
          else
          {
            v75 = 0;
            v76 = 0;
            v77 = 0;
            do
            {
              v78 = v75;
              v79 = *(_DWORD *)(v72 + 20);
              if ((v79 & 0x40000000) != 0)
                v80 = *(_QWORD *)(v72 - 8);
              else
                v80 = v72 - 32 * (v79 & 0x7FFFFFF);
              v81 = *(_QWORD *)(v80 + 32 * v76);
              v82 = *(unsigned __int8 *)(v81 + 16);
              if (v81)
                v83 = v82 >= 0x1C;
              else
                v83 = 0;
              if (v83
                && (v84 = *(_QWORD *)(v81 + 8)) != 0
                && !*(_QWORD *)(v84 + 8)
                && (v82 | 4) == 0x2E
                && *(_QWORD *)(v81 + 40) == v124)
              {
                v86 = *(_BYTE *)(v81 + 17) & 0x42;
                if (v82 == 42)
                {
                  if (v86 == 66)
                  {
                    v87 = v150;
                    if (v150 >= (unint64_t)HIDWORD(v150))
                    {
                      v116 = v70;
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v149, (uint64_t)&v151, v150 + 1, 8);
                      LODWORD(v70) = v116;
                      v87 = v150;
                    }
                    *(_QWORD *)&v149[8 * v87] = v81;
                    LODWORD(v150) = v150 + 1;
                  }
                }
                else if (v82 == 46 && v86 == 66)
                {
                  v88 = v144;
                  if (v144 >= (unint64_t)HIDWORD(v144))
                  {
                    v117 = v70;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v143, (uint64_t)v145, v144 + 1, 8);
                    LODWORD(v70) = v117;
                    v88 = v144;
                  }
                  *((_QWORD *)v143 + v88) = v81;
                  LODWORD(v144) = v144 + 1;
                  ++v77;
                }
              }
              else
              {
                v85 = v147;
                if (v147 >= (unint64_t)HIDWORD(v147))
                {
                  v115 = v70;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v146, (uint64_t)v148, v147 + 1, 8);
                  LODWORD(v70) = v115;
                  v85 = v147;
                }
                *((_QWORD *)v146 + v85) = v81;
                LODWORD(v147) = v147 + 1;
              }
              v75 = 1;
              v76 = 1;
            }
            while ((v78 & 1) == 0);
            v70 = v70 | (v77 == 2);
          }
          v71 = v150;
        }
        while ((_DWORD)v150);
        if ((v70 & 1) != 0)
        {
          v91 = v147;
          v92 = v144;
          if ((int)v147 - 1 >= v144)
          {
            v69 = 0;
          }
          else
          {
            v93 = 0;
            do
            {
              v94 = *((_QWORD *)v146 + v91 - 1);
              LODWORD(v147) = v91 - 1;
              if (v93)
              {
                v95 = (uint64_t *)*((_QWORD *)v146 + v91 - 2);
                LODWORD(v147) = v91 - 2;
              }
              else
              {
                v95 = (uint64_t *)*((_QWORD *)v143 + v92 - 1);
                LODWORD(v144) = v92 - 1;
              }
              v121 = 257;
              v96 = sub_1C534554C((uint64_t)v125, v95, v94, (uint64_t)v120, 0);
              sub_1C55C6FA8(v96, (uint64_t)v16);
              v97 = v147;
              if (v147 >= (unint64_t)HIDWORD(v147))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v146, (uint64_t)v148, v147 + 1, 8);
                v97 = v147;
              }
              *((_QWORD *)v146 + v97) = v96;
              LODWORD(v147) = v147 + 1;
              v91 = v147;
              v92 = v144;
              v93 = (_DWORD)v144 == 0;
            }
            while (v147 > 1 || (_DWORD)v144);
            v69 = *(llvm::Value **)v146;
          }
        }
        else
        {
          v69 = 0;
        }
        if (v143 != v145)
          free(v143);
        if (v146 != v148)
          free(v146);
        if (v149 != (unsigned __int8 *)&v151)
          free(v149);
        if (!v69)
        {
          v24 = 0;
          goto LABEL_41;
        }
LABEL_198:
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v16, v69, (llvm::Value *)1);
        v152 = 0;
        llvm::RecursivelyDeleteTriviallyDeadInstructions((uint64_t)v16, (uint64_t *)__src, 0, &v149);
        if (v152 == (void **)&v149)
        {
          (*((void (**)(unsigned __int8 **))v149 + 4))(&v149);
          v24 = 1;
        }
        else
        {
          if (v152)
            (*((void (**)(void))*v152 + 5))();
          v24 = 1;
        }
LABEL_41:
        v11 |= v24;
LABEL_42:
        v14 = v15;
      }
      while (v15 != v13);
LABEL_204:
      v10 = *(_QWORD *)(v119 + 8);
      if (v10 == v118)
      {
        v108 = v140;
        goto LABEL_228;
      }
    }
  }
  v108 = 0;
  v11 = 0;
LABEL_228:
  MEMORY[0x1CAA32FB4](v108, 8);
  if (v125[0] != v126)
    free(v125[0]);
  return v11 & 1;
}

_QWORD *sub_1C55C6CF0(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v10;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  _QWORD *v17;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    {
      sub_1C55C6E20(a1, v7);
      v17 = 0;
      sub_1C4926528(a1, a3, &v17);
      a4 = v17;
    }
LABEL_4:
    v8 = *a4;
    goto LABEL_5;
  }
  sub_1C55C6E20(a1, 2 * v7);
  v8 = *a3;
  v10 = *(_DWORD *)(a1 + 16) - 1;
  v11 = ((*a3 >> 4) ^ (*a3 >> 9)) & v10;
  a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v11);
  v12 = *a4;
  if (*a3 != *a4)
  {
    v13 = 0;
    v14 = 1;
    while (v12 != -4096)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v12 == -8192;
      if (v15)
        v13 = a4;
      v16 = v11 + v14++;
      v11 = v16 & v10;
      a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v11);
      v12 = *a4;
      if (v8 == *a4)
        goto LABEL_5;
    }
    if (v13)
      a4 = v13;
    goto LABEL_4;
  }
LABEL_5:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *sub_1C55C6E20(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C55C6ED8(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C55C6ED8(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  BOOL v14;
  unsigned int v15;

  *(_QWORD *)(result + 8) = 0;
  v3 = *(unsigned int *)(result + 16);
  if ((_DWORD)v3)
  {
    v4 = *(_QWORD **)result;
    v5 = 16 * v3;
    do
    {
      *v4 = -4096;
      v4 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  if (a2 != a3)
  {
    v6 = 0;
    v7 = v3 - 1;
    do
    {
      v8 = *a2;
      if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v9 = ((v8 >> 4) ^ (v8 >> 9)) & v7;
        v10 = *(_QWORD *)result + 16 * v9;
        v11 = *(_QWORD *)v10;
        if (v8 != *(_QWORD *)v10)
        {
          v12 = 0;
          v13 = 1;
          while (v11 != -4096)
          {
            if (v12)
              v14 = 0;
            else
              v14 = v11 == -8192;
            if (v14)
              v12 = v10;
            v15 = v9 + v13++;
            v9 = v15 & v7;
            v10 = *(_QWORD *)result + 16 * (v15 & v7);
            v11 = *(_QWORD *)v10;
            if (v8 == *(_QWORD *)v10)
              goto LABEL_19;
          }
          if (v12)
            v10 = v12;
        }
LABEL_19:
        *(_QWORD *)v10 = v8;
        *(_BYTE *)(v10 + 8) = *((_BYTE *)a2 + 8);
        *(_DWORD *)(result + 8) = ++v6;
      }
      a2 += 2;
    }
    while (a2 != a3);
  }
  return result;
}

uint64_t sub_1C55C6FA8(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  unsigned __int8 *v4;
  unsigned __int8 **v5;
  unsigned __int8 *v6;
  unsigned __int8 *v7;

  if (result)
  {
    v2 = result;
    v3 = *(unsigned __int8 *)(result + 16);
    if (v3 >= 0x1C)
    {
      if (v3 - 41 <= 0x11)
        *(_BYTE *)(result + 17) |= *(_BYTE *)(a2 + 17) & 0xFE;
      v4 = *(unsigned __int8 **)(a2 + 48);
      v7 = v4;
      if (v4)
        result = llvm::MetadataTracking::track((uint64_t)&v7, v4, 2);
      v5 = (unsigned __int8 **)(v2 + 48);
      if (&v7 == v5)
      {
        if (v7)
          return llvm::MetadataTracking::untrack((uint64_t)&v7, v7);
      }
      else
      {
        if (*v5)
          result = llvm::MetadataTracking::untrack((uint64_t)v5, *v5);
        v6 = v7;
        *v5 = v7;
        if (v6)
          return llvm::MetadataTracking::retrack((uint64_t)&v7, v6, (uint64_t)v5);
      }
    }
  }
  return result;
}

__n128 sub_1C55C7064(_WORD *a1, __n128 *a2, int **a3)
{
  __n128 result;
  int *v7;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED807618, "max-fma-contraction", 0x13uLL);
  word_1ED807622 = (32 * (*a1 & 3)) | word_1ED807622 & 0xFF9F;
  result = *a2;
  xmmword_1ED807638 = (__int128)*a2;
  v7 = *a3;
  dword_1ED807698 = **a3;
  byte_1ED8076AC = 1;
  dword_1ED8076A8 = *v7;
  return result;
}

uint64_t sub_1C55C70E8()
{
  int v1;
  int *v2;
  __n128 v3;
  int v4;

  v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Limit the fma-contraction pass";
  v3.n128_u64[1] = 30;
  v1 = -1;
  v2 = &v1;
  sub_1C627D984(&v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED807618, &dword_1C475E000);
}

void sub_1C55C7154(uint64_t a1)
{
  unint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD v4[2];

  v2 = a1;
  v1 = atomic_load(&qword_1ED8077A0);
  if (v1 != -1)
  {
    v4[0] = sub_1C55C71B8;
    v4[1] = &v2;
    v3 = v4;
    std::__call_once(&qword_1ED8077A0, &v3, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C55C71B8(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeLoopInfoWrapperPassPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Fixup CFG to nest basic blocks";
  *(_QWORD *)(v2 + 8) = 30;
  *(_QWORD *)(v2 + 16) = "cfg-nest";
  *(_QWORD *)(v2 + 24) = 8;
  *(_QWORD *)(v2 + 32) = &unk_1ED807798;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C55C7370;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C55C724C(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v5;
  unint64_t v7;
  _QWORD *v8;
  _QWORD v9[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED807798;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E8170B88;
  v3 = *(_QWORD *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(_QWORD *)(a1 + 80) = a1 + 56;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1 + 56);
    }
    else
    {
      *(_QWORD *)(a1 + 80) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v3 + 16))(v3);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 80) = 0;
  }
  *(_QWORD *)(a1 + 88) = a1 + 104;
  *(_QWORD *)(a1 + 96) = 0x1000000000;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v7 = qword_1ED830BC0[0];
  v5 = atomic_load(&qword_1ED8077A0);
  if (v5 != -1)
  {
    v9[0] = sub_1C55C71B8;
    v9[1] = &v7;
    v8 = v9;
    std::__call_once(&qword_1ED8077A0, &v8, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C55C7370()
{
  uint64_t v0;
  void (**v1)(void);
  _QWORD v3[3];
  _QWORD *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = operator new();
  v4 = 0;
  sub_1C55C724C(v0, (uint64_t)v3);
  if (v4 == v3)
  {
    v1 = (void (**)(void))(v3[0] + 32);
    goto LABEL_5;
  }
  if (v4)
  {
    v1 = (void (**)(void))(*v4 + 40);
LABEL_5:
    (*v1)();
  }
  return v0;
}

void sub_1C55C741C(llvm::Pass *this)
{
  char *v2;
  unsigned int v3;
  uint64_t v4;
  char *v5;
  llvm::Pass *v6;
  uint64_t v7;

  *(_QWORD *)this = &off_1E8170B88;
  v2 = (char *)*((_QWORD *)this + 11);
  v3 = *((_DWORD *)this + 24);
  if (v3)
  {
    v4 = 88 * v3;
    do
    {
      v5 = *(char **)&v2[v4 - 48];
      if (&v2[v4 - 32] != v5)
        free(v5);
      v4 -= 88;
    }
    while (v4);
    v2 = (char *)*((_QWORD *)this + 11);
  }
  if (v2 != (char *)this + 104)
    free(v2);
  v6 = (llvm::Pass *)*((_QWORD *)this + 10);
  if (v6 == (llvm::Pass *)((char *)this + 56))
  {
    v7 = 4;
    v6 = (llvm::Pass *)((char *)this + 56);
    goto LABEL_13;
  }
  if (v6)
  {
    v7 = 5;
LABEL_13:
    (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
  }
  llvm::Pass::~Pass(this);
}

void sub_1C55C74CC(llvm::Pass *this)
{
  char *v2;
  unsigned int v3;
  uint64_t v4;
  char *v5;
  llvm::Pass *v6;
  uint64_t v7;

  *(_QWORD *)this = &off_1E8170B88;
  v2 = (char *)*((_QWORD *)this + 11);
  v3 = *((_DWORD *)this + 24);
  if (v3)
  {
    v4 = 88 * v3;
    do
    {
      v5 = *(char **)&v2[v4 - 48];
      if (&v2[v4 - 32] != v5)
        free(v5);
      v4 -= 88;
    }
    while (v4);
    v2 = (char *)*((_QWORD *)this + 11);
  }
  if (v2 != (char *)this + 104)
    free(v2);
  v6 = (llvm::Pass *)*((_QWORD *)this + 10);
  if (v6 == (llvm::Pass *)((char *)this + 56))
  {
    v7 = 4;
    v6 = (llvm::Pass *)((char *)this + 56);
  }
  else
  {
    if (!v6)
    {
LABEL_14:
      llvm::Pass::~Pass(this);
      JUMPOUT(0x1CAA32FC0);
    }
    v7 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v6 + 8 * v7))();
  goto LABEL_14;
}

void *sub_1C55C7590(uint64_t a1, uint64_t a2)
{
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::AAResultsWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  return sub_1C4771E64(a2, a2, (uint64_t)llvm::LoopInfoWrapperPass::ID);
}

uint64_t sub_1C55C75E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  void **v13;
  void *v14;
  void **v15;
  void *v16;
  char **v17;
  char *v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  void **v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  unsigned int v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t v33;
  _QWORD *v34;
  _QWORD *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  _QWORD *v40;
  uint64_t v41;
  _QWORD *v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t LoopLatch;
  llvm::BasicBlock *v49;
  llvm::LLVMContext *v50;
  uint64_t *v51;
  BOOL v52;
  int v53;
  uint64_t *v54;
  uint64_t *i;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  _QWORD *v61;
  unsigned int v62;
  uint64_t v63;
  llvm::ReturnInst *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  llvm::BasicBlock **v69;
  llvm::BasicBlock *v70;
  int v71;
  int v72;
  llvm::BasicBlock *v73;
  uint64_t v74;
  char *v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  _QWORD *v79;
  uint64_t *v80;
  uint64_t v81;
  const llvm::APInt *v82;
  llvm::BasicBlock *v83;
  unsigned __int8 *v84;
  llvm::ValueAsMetadata *v85;
  uint64_t v86;
  llvm::Value *v87;
  _DWORD *v88;
  uint64_t v89;
  llvm::Value *v90;
  _QWORD *v91;
  uint64_t v92;
  _QWORD *v93;
  _DWORD *v94;
  llvm::Type *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unsigned int v100;
  BOOL v101;
  uint64_t v102;
  llvm::UndefValue **v104;
  llvm::UndefValue *v105;
  uint64_t v106;
  uint64_t LoopPredecessor;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t UniqueExitBlock;
  uint64_t v112;
  unsigned int v113;
  _QWORD *v114;
  _QWORD *v115;
  uint64_t v116;
  __int128 v117;
  uint64_t v118;
  int v119;
  uint64_t j;
  uint64_t *v121;
  uint64_t v122;
  uint64_t *v123;
  char *v124;
  char *v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  char *v135;
  char *v136;
  uint64_t v137;
  _QWORD *v138;
  unsigned int v139;
  int v140;
  uint64_t v141;
  unsigned int v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  char *v149;
  uint64_t v150;
  unint64_t v151;
  llvm::ConstantInt *v152;
  uint64_t ***v153;
  uint64_t *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t ****v159;
  uint64_t ***v160;
  int v161;
  int v162;
  uint64_t ***v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  unsigned int v169;
  _QWORD *v170;
  uint64_t *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t ****v177;
  uint64_t ***v178;
  int v179;
  int v180;
  uint64_t ***v181;
  uint64_t v182;
  char *v183;
  uint64_t v184;
  uint64_t k;
  uint64_t m;
  uint64_t v187;
  llvm::PHINode **v188;
  uint64_t v189;
  llvm::PHINode *v190;
  llvm::PHINode **v191;
  llvm::PHINode **v192;
  uint64_t v193;
  int *v194;
  llvm::Type *v195;
  int *v196;
  llvm::Type *v197;
  uint64_t v198;
  uint64_t v199;
  int *v200;
  llvm::PHINode *v201;
  llvm::UndefValue *v202;
  int *v203;
  int *v204;
  _QWORD *v205;
  unsigned int v206;
  int *v207;
  uint64_t v208;
  int *v209;
  int *v210;
  llvm::PHINode *v211;
  int *v212;
  uint64_t v213;
  llvm::PHINode *v214;
  uint64_t v215;
  uint64_t v216;
  llvm::BasicBlock *v217;
  llvm::BasicBlock *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t ****v223;
  uint64_t ***v224;
  int v225;
  int v226;
  uint64_t ***v227;
  uint64_t **v228;
  char *v229;
  uint64_t **v230;
  uint64_t v231;
  unsigned int v232;
  uint64_t v233;
  _QWORD *v234;
  llvm::Value **v235;
  llvm::Value *v236;
  llvm::BasicBlock *v237;
  _DWORD *v238;
  uint64_t v239;
  llvm::BranchInst *v240;
  _QWORD *v241;
  llvm::BasicBlock *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t kk;
  uint64_t v246;
  int v247;
  int v248;
  uint64_t v249;
  _QWORD *mm;
  _QWORD *v251;
  int v252;
  int v253;
  _QWORD *v254;
  llvm::PHINode **v255;
  llvm::PHINode **n;
  uint64_t v257;
  uint64_t ii;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  int v262;
  uint64_t v263;
  uint64_t *v264;
  int v265;
  uint64_t v266;
  uint64_t v267;
  unsigned int v268;
  uint64_t v269;
  uint64_t v270;
  int v271;
  int v272;
  _QWORD *jj;
  uint64_t *v274;
  int v275;
  uint64_t v276;
  uint64_t v277;
  unsigned int v278;
  uint64_t v279;
  uint64_t v280;
  int v281;
  int v282;
  _QWORD *v283;
  uint64_t **v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t *v289;
  uint64_t v290;
  int v291;
  int v292;
  _QWORD *v293;
  char *v294;
  size_t v295;
  size_t v296;
  llvm::PHINode *v297;
  int v298;
  int v299;
  unsigned int v300;
  _QWORD *v301;
  uint64_t v302;
  _QWORD *v303;
  int v304;
  BOOL v305;
  unsigned int v306;
  _QWORD *v307;
  llvm::Use *v308;
  llvm::Use *v309;
  uint64_t v310;
  BOOL v311;
  uint64_t *v312;
  int v313;
  uint64_t v314;
  uint64_t v315;
  unsigned int v316;
  uint64_t v317;
  uint64_t v318;
  int v319;
  int v320;
  _QWORD *v321;
  char *v322;
  uint64_t v323;
  uint64_t *v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  llvm::PHINode *v332;
  int v333;
  uint64_t v334;
  uint64_t v335;
  _DWORD *v336;
  _DWORD *v337;
  uint64_t *v338;
  int v339;
  uint64_t v340;
  uint64_t v341;
  unsigned int v342;
  uint64_t v343;
  uint64_t v344;
  int v345;
  int v346;
  uint64_t v347;
  llvm::PHINode *v348;
  int v349;
  char *v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t ****v355;
  uint64_t ***v356;
  int v357;
  int v358;
  _QWORD *v359;
  uint64_t ***v360;
  uint64_t **v361;
  char *v362;
  uint64_t **v363;
  uint64_t v364;
  unsigned int v365;
  _QWORD *v366;
  unsigned int v367;
  _QWORD *v368;
  llvm::Value *v369;
  char *v370;
  uint64_t v371;
  _QWORD *v372;
  _QWORD *v373;
  llvm::PHINode *v374;
  uint64_t v375;
  char *v376;
  int v377;
  char *v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  llvm::ValueSymbolTable *v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  int v386;
  int v387;
  unsigned int v388;
  uint64_t v389;
  const llvm::APInt *v390;
  llvm::Value **IntegerValue;
  unsigned int v392;
  uint64_t v393;
  uint64_t v394;
  void *v395;
  uint64_t *v396;
  uint64_t *v397;
  uint64_t *v398;
  unsigned int v399;
  unsigned int v400;
  char *v401;
  llvm::BasicBlock *v402;
  llvm::Constant ***v403;
  uint64_t *v404;
  uint64_t ***v405;
  char *v406;
  uint64_t v407;
  uint64_t v408;
  llvm::BasicBlock *v409;
  llvm::BasicBlock *v410;
  __int128 v411;
  __int128 v412;
  __int128 v413;
  __int128 v414;
  __int128 v415;
  __int128 v416;
  llvm::PHINode *v417;
  uint64_t v418;
  llvm::PHINode *v419;
  uint64_t v420;
  void *v421;
  uint64_t v422;
  _BYTE v423[512];
  _QWORD v424[129];
  void *v425;
  uint64_t v426;
  _QWORD v427[2];
  __int16 v428;
  char *v429;
  uint64_t v430;
  uint64_t v431;
  uint64_t v432[129];
  uint64_t v433;
  _QWORD *v434;
  unsigned int v435;
  _QWORD *v436;
  uint64_t v437;
  _BYTE v438[32];
  _QWORD *v439;
  uint64_t v440;
  _BYTE v441[32];
  uint64_t v442;
  _QWORD *v443;
  unsigned int v444;
  char *v445;
  uint64_t v446;
  _QWORD v447[19];

  v4 = MEMORY[0x1E0C80A78](a1, a2, a3, a4);
  v447[16] = *MEMORY[0x1E0C80C00];
  if (byte_1ED807758)
    return 0;
  v7 = v5;
  v8 = v4;
  v9 = *(_QWORD *)(v4 + 80);
  if (v9)
  {
    if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 48))(v9, v5) & 1) != 0)
      return 0;
  }
  v10 = (uint64_t *)(v7 + 72);
  v11 = 2;
  v12 = (uint64_t *)(v7 + 72);
  do
  {
    v12 = (uint64_t *)v12[1];
    --v11;
  }
  while (v12 != v10);
  if (!v11)
    return 0;
  v13 = **(void ****)(v8 + 8);
  do
  {
    v14 = *v13;
    v13 += 2;
  }
  while (v14 != &llvm::AAResultsWrapperPass::ID);
  *(_QWORD *)(v8 + 48) = *(_QWORD *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v13 - 1) + 96))(*(v13 - 1), &llvm::AAResultsWrapperPass::ID)+ 32);
  v15 = **(void ****)(v8 + 8);
  do
  {
    v16 = *v15;
    v15 += 2;
  }
  while (v16 != &llvm::DominatorTreeWrapperPass::ID);
  *(_QWORD *)(v8 + 40) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v15 - 1) + 96))(*(v15 - 1), &llvm::DominatorTreeWrapperPass::ID)+ 32;
  v17 = **(char ****)(v8 + 8);
  do
  {
    v18 = *v17;
    v17 += 2;
  }
  while (v18 != llvm::LoopInfoWrapperPass::ID);
  *(_QWORD *)(v8 + 32) = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v17 - 1) + 96))(*(v17 - 1), llvm::LoopInfoWrapperPass::ID)+ 32;
  v19 = -1;
  v20 = 88;
  v21 = (uint64_t *)(v7 + 72);
  do
  {
    v21 = (uint64_t *)v21[1];
    v20 -= 88;
    ++v19;
  }
  while (v21 != v10);
  v22 = (uint64_t *)(v8 + 88);
  v23 = *(unsigned int *)(v8 + 96);
  if (v23 != v19)
  {
    v24 = v7;
    if (v19 >= v23)
    {
      if (v19 > *(unsigned int *)(v8 + 100))
      {
        sub_1C55CC868(v8 + 88, v19);
        v23 = *(unsigned int *)(v8 + 96);
      }
      if (v23 != v19)
      {
        v27 = *v22 - v20;
        v28 = *v22 + 88 * v23;
        do
        {
          *(_QWORD *)v28 = 0;
          *(_QWORD *)(v28 + 8) = -1;
          *(_BYTE *)(v28 + 16) = 0;
          *(_QWORD *)(v28 + 24) = 0;
          *(_DWORD *)(v28 + 32) = -1;
          *(_BYTE *)(v28 + 36) = 0;
          *(_QWORD *)(v28 + 40) = v28 + 56;
          *(_QWORD *)(v28 + 48) = 0x200000000;
          v28 += 88;
        }
        while (v27 != v28);
      }
    }
    else
    {
      v25 = (void **)(*v22 + 88 * v23 - 48);
      v26 = -88 * v23 - v20;
      do
      {
        if (v25 + 2 != *v25)
          free(*v25);
        v25 -= 11;
        v26 += 88;
      }
      while (v26);
    }
    *(_DWORD *)(v8 + 96) = v19;
    v7 = v24;
  }
  v29 = *(uint64_t **)(v7 + 80);
  if (v29 != v10)
  {
    v30 = 0;
    v31 = *v22;
    do
    {
      v32 = v29 - 3;
      if (!v29)
        v32 = 0;
      *(_QWORD *)(v31 + 88 * v30++) = v32;
      v29 = (uint64_t *)v29[1];
    }
    while (v29 != v10);
  }
  v412 = 0u;
  v413 = 0u;
  v411 = 0u;
  v33 = *(_QWORD *)(v8 + 32);
  v34 = *(_QWORD **)(v33 + 24);
  v35 = *(_QWORD **)(v33 + 32);
  if (v34 != v35)
  {
    do
      sub_1C4EB7C64(&v411, v34++);
    while (v34 != v35);
    v36 = *((_QWORD *)&v413 + 1);
    if (*((_QWORD *)&v413 + 1))
    {
      v407 = v7;
      v408 = v8;
      while (1)
      {
        v37 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v411 + 1)
                                    + (((unint64_t)(v36 + v413 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                        + 8 * ((v36 + v413 - 1) & 0x1FF));
        v38 = *(_QWORD *)(v8 + 88);
        v39 = *(_DWORD *)(v8 + 96);
        if (v39)
        {
          v40 = (_QWORD *)(v38 + 88 * v39);
          v41 = 88 * v39;
          v42 = *(_QWORD **)(v8 + 88);
          while (*v42 != **(_QWORD **)(v37 + 32))
          {
            v42 += 11;
            v41 -= 88;
            if (!v41)
            {
              v42 = v40;
              break;
            }
          }
        }
        else
        {
          v42 = *(_QWORD **)(v8 + 88);
        }
        v43 = -1171354717 * (((unint64_t)v42 - v38) >> 3);
        v44 = v38 + 88 * v43;
        v46 = *(_QWORD *)(v44 + 24);
        v45 = (uint64_t *)(v44 + 24);
        if (v46)
          break;
        *v45 = v37;
        *(_DWORD *)(v38 + 88 * v43 + 32) = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getNumBackEdges(v37);
        v60 = *(_QWORD **)(v37 + 8);
        v61 = *(_QWORD **)(v37 + 16);
        if (v60 == v61)
          break;
        do
          sub_1C4EB7C64(&v411, v60++);
        while (v60 != v61);
LABEL_136:
        v36 = *((_QWORD *)&v413 + 1);
        if (!*((_QWORD *)&v413 + 1))
          goto LABEL_490;
      }
      v445 = (char *)v447;
      v446 = 0x800000000;
      llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitEdges(v37, (uint64_t)&v445);
      v47 = v446;
      if ((_DWORD)v446 == 1)
      {
LABEL_114:
        if (v445 != (char *)v447)
          free(v445);
        LoopPredecessor = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor(v37);
        if (!LoopPredecessor)
          goto LABEL_123;
        v109 = *(_QWORD *)(LoopPredecessor + 40);
        result = LoopPredecessor + 40;
        v108 = v109;
        if (v109 == result)
          goto LABEL_123;
        if (v108)
          v110 = v108 - 24;
        else
          v110 = 0;
        if (*(_BYTE *)(v110 + 16) != 30)
        {
          switch(*(_BYTE *)(v110 + 16))
          {
            case 0x1E:
              __break(1u);
              return result;
            case 0x1F:
              v119 = (*(_DWORD *)(v110 + 20) >> 1) & 0x3FFFFFF;
              goto LABEL_140;
            case 0x20:
              v119 = (*(_DWORD *)(v110 + 20) & 0x7FFFFFF) - 1;
              goto LABEL_140;
            case 0x27:
              v119 = *(_DWORD *)(v110 + 80) + 1;
LABEL_140:
              if (v119 == 1)
                goto LABEL_124;
              goto LABEL_123;
            default:
              goto LABEL_123;
          }
        }
        if ((*(_DWORD *)(v110 + 20) & 0x7FFFFFF) == 3)
LABEL_123:
          llvm::InsertPreheaderForLoop((llvm *)v37, *(llvm::Loop **)(v8 + 40), *(llvm::DominatorTree **)(v8 + 32), 0, 0);
LABEL_124:
        UniqueExitBlock = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getUniqueExitBlock((_QWORD *)v37);
        if (UniqueExitBlock)
        {
          v112 = *(_QWORD *)(v8 + 88);
          v113 = *(_DWORD *)(v8 + 96);
          if (v113)
          {
            v114 = (_QWORD *)(v112 + 88 * v113);
            v115 = *(_QWORD **)(v8 + 88);
            v116 = 88 * v113;
            while (*v115 != UniqueExitBlock)
            {
              v115 += 11;
              v116 -= 88;
              if (!v116)
              {
                v115 = v114;
                break;
              }
            }
          }
          else
          {
            v115 = *(_QWORD **)(v8 + 88);
          }
          sub_1C55C968C((uint64_t *)v8, -1171354717 * (((unint64_t)v115 - v112) >> 3), 0, 1);
        }
        sub_1C55C98E8(v8, v7, v37);
        v117 = v413;
        --*((_QWORD *)&v413 + 1);
        v118 = (((_QWORD)v412 - *((_QWORD *)&v411 + 1)) << 6) - 1;
        if ((_QWORD)v412 == *((_QWORD *)&v411 + 1))
          v118 = 0;
        if ((unint64_t)(v118 - (*((_QWORD *)&v117 + 1) + v117) + 1) >= 0x400)
        {
          operator delete(*(void **)(v412 - 8));
          *(_QWORD *)&v412 = v412 - 8;
        }
        goto LABEL_136;
      }
      if (!(_DWORD)v446)
      {
        LoopLatch = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch(v37);
        v49 = **(llvm::BasicBlock ***)(v37 + 32);
        v50 = **(llvm::LLVMContext ***)v49;
        v409 = (llvm::BasicBlock *)LoopLatch;
        v51 = *(uint64_t **)(LoopLatch + 32);
        v52 = v51 == v10 || v51 == 0;
        v53 = v52;
        if (v52)
          v54 = 0;
        else
          v54 = v51 - 3;
        for (i = *(uint64_t **)(v7 + 80); i != v10; i = (uint64_t *)i[1])
        {
          v56 = (uint64_t)(i - 3);
          if (i)
            v57 = i - 3;
          else
            v57 = 0;
          v58 = v57[5];
          if (v58)
            v59 = v58 - 24;
          else
            v59 = 0;
          if (*(unsigned __int8 *)(v59 + 16) - 29 >= 0xB)
            v59 = 0;
          if (*(_BYTE *)(v59 + 16) == 29)
            goto LABEL_72;
        }
        v425 = "Exit";
        v428 = 259;
        v56 = operator new();
        *(_QWORD *)v56 = *(_QWORD *)v50 + 1600;
        *(_QWORD *)(v56 + 8) = 0;
        v62 = *(_DWORD *)(v56 + 20) & 0xC0000000;
        *(_DWORD *)(v56 + 16) = 22;
        *(_DWORD *)(v56 + 20) = v62;
        *(_QWORD *)(v56 + 24) = 0;
        *(_QWORD *)(v56 + 32) = 0;
        *(_QWORD *)(v56 + 40) = v56 + 40;
        *(_QWORD *)(v56 + 48) = v56 + 40;
        *(_QWORD *)(v56 + 56) = 0;
        llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)v10, (_QWORD *)v56);
        v63 = *v10;
        *(_QWORD *)(v56 + 32) = v10;
        *(_QWORD *)(v56 + 24) = v63;
        *(_QWORD *)(v63 + 8) = v56 + 24;
        *v10 = v56 + 24;
        llvm::Value::setName((uint64_t ***)v56, (uint64_t)&v425);
        v64 = (llvm::ReturnInst *)operator new(0x40uLL);
        *((_DWORD *)v64 + 5) &= 0x38000000u;
        llvm::ReturnInst::ReturnInst(v64, v50, 0, (llvm::BasicBlock *)v56);
        *(_QWORD *)sub_1C55CCA98(v408) = v56;
LABEL_72:
        if ((*((_BYTE *)v49 + 23) & 0x10) == 0)
        {
          v74 = 0;
          v75 = &byte_1C871356D;
          goto LABEL_81;
        }
        v65 = ***(_QWORD ***)v49;
        v66 = *(_QWORD *)(v65 + 152);
        v67 = *(unsigned int *)(v65 + 168);
        if ((_DWORD)v67)
        {
          LODWORD(v68) = (v67 - 1) & ((v49 >> 4) ^ (v49 >> 9));
          v69 = (llvm::BasicBlock **)(v66 + 16 * v68);
          v70 = *v69;
          if (*v69 == v49)
          {
LABEL_80:
            v73 = v69[1];
            v76 = *(_QWORD *)v73;
            v75 = (char *)v73 + 16;
            v74 = v76;
LABEL_81:
            v428 = 773;
            v425 = v75;
            v426 = v74;
            v427[0] = "Exit";
            v77 = operator new();
            *(_QWORD *)v77 = *(_QWORD *)v50 + 1600;
            *(_QWORD *)(v77 + 8) = 0;
            v78 = *(_DWORD *)(v77 + 20) & 0xC0000000;
            *(_DWORD *)(v77 + 16) = 22;
            *(_DWORD *)(v77 + 20) = v78;
            *(_QWORD *)(v77 + 24) = 0;
            v79 = (_QWORD *)(v77 + 24);
            *(_QWORD *)(v77 + 32) = 0;
            *(_QWORD *)(v77 + 40) = v77 + 40;
            *(_QWORD *)(v77 + 48) = v77 + 40;
            *(_QWORD *)(v77 + 56) = 0;
            if (v53)
              v80 = v10;
            else
              v80 = v54 + 3;
            llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)v10, (_QWORD *)v77);
            v81 = *v80;
            *(_QWORD *)(v77 + 32) = v80;
            *v79 = v81;
            *(_QWORD *)(v81 + 8) = v79;
            *v80 = (uint64_t)v79;
            llvm::Value::setName((uint64_t ***)v77, (uint64_t)&v425);
            v8 = v408;
            *(_QWORD *)sub_1C55CCA98(v408) = v77;
            v83 = (llvm::BasicBlock *)*((_QWORD *)v409 + 5);
            if (v83 == (llvm::BasicBlock *)((char *)v409 + 40))
            {
              v85 = 0;
            }
            else
            {
              if (v83)
                v84 = (unsigned __int8 *)v83 - 24;
              else
                v84 = 0;
              if (v84[16] - 29 >= 0xB)
                v85 = 0;
              else
                v85 = (llvm::ValueAsMetadata *)v84;
            }
            v86 = *(_QWORD *)v50;
            v87 = *(llvm::Value **)(*(_QWORD *)v50 + 1568);
            if (!v87)
            {
              v152 = *(llvm::ConstantInt **)(v86 + 1888);
              LODWORD(v426) = *(_DWORD *)(v86 + 1896) >> 8;
              if (v426 > 0x40)
                llvm::APInt::initSlowCase((llvm::APInt *)&v425, 0, 0);
              else
                v425 = 0;
              v87 = llvm::ConstantInt::get(v152, (llvm::LLVMContext *)&v425, v82);
              if (v426 >= 0x41 && v425)
                MEMORY[0x1CAA32F9C](v425, 0x1000C8000313F17);
              *(_QWORD *)(v86 + 1568) = v87;
            }
            v88 = operator new(0xA0uLL);
            v89 = 0;
            v90 = (llvm::Value *)(v88 + 24);
            v88[29] = v88[29] & 0x38000000 | 3;
            do
            {
              v91 = &v88[v89];
              *v91 = 0;
              v91[1] = 0;
              v91[2] = 0;
              v91[3] = v90;
              v89 += 8;
            }
            while (v89 != 24);
            llvm::BranchInst::BranchInst((llvm::BranchInst *)(v88 + 24), (llvm::BasicBlock *)v77, v49, v87, v409);
            llvm::Value::doRAUW(v85, v90, (llvm::Value *)1);
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v85 + 5) + 40, (uint64_t ***)v85);
            v92 = *((_QWORD *)v85 + 3);
            v93 = (_QWORD *)*((_QWORD *)v85 + 4);
            *v93 = v92;
            *(_QWORD *)(v92 + 8) = v93;
            *((_QWORD *)v85 + 3) = 0;
            *((_QWORD *)v85 + 4) = 0;
            llvm::Value::deleteValue(v85);
            v94 = operator new(0x60uLL);
            v94[13] = v94[13] & 0x38000000 | 1;
            *(_QWORD *)v94 = 0;
            *((_QWORD *)v94 + 1) = 0;
            *((_QWORD *)v94 + 2) = 0;
            *((_QWORD *)v94 + 3) = v94 + 8;
            llvm::BranchInst::BranchInst((llvm::BranchInst *)(v94 + 8), (llvm::BasicBlock *)v56, (llvm::BasicBlock *)v77);
            v96 = v56 + 40;
            v97 = *(_QWORD *)(v56 + 48);
            v52 = v97 == v56 + 40;
            v7 = v407;
            if (!v52)
            {
              v98 = v97;
              while (1)
              {
                v99 = v98 - 24;
                if (!v98)
                  v99 = 0;
                if (*(_BYTE *)(v99 + 16) != 83)
                  break;
                v98 = *(_QWORD *)(v98 + 8);
                if (v98 == v96)
                {
                  v98 = v96;
                  goto LABEL_111;
                }
              }
              v100 = *(unsigned __int8 *)(v98 - 8) - 38;
              v101 = v100 > 0x38;
              v102 = (1 << v100) & 0x100060000000001;
              if (!v101 && v102 != 0)
                v98 = *(_QWORD *)(v98 + 8);
LABEL_111:
              while (v97 != v98)
              {
                if (v97)
                  v104 = (llvm::UndefValue **)(v97 - 24);
                else
                  v104 = 0;
                v105 = llvm::UndefValue::get(*v104, v95);
                sub_1C477667C((llvm::PHINode *)v104, (uint64_t)v105, v77);
                v97 = *(_QWORD *)(v97 + 8);
              }
            }
            v106 = *(_QWORD *)(v408 + 40);
            if (v106)
            {
              *(_QWORD *)(v106 + 56) = v407;
              sub_1C53BA620(v106, 0);
            }
            goto LABEL_114;
          }
          v71 = 1;
          while (v70 != (llvm::BasicBlock *)-4096)
          {
            v72 = v68 + v71++;
            v68 = v72 & (v67 - 1);
            v70 = *(llvm::BasicBlock **)(v66 + 16 * v68);
            if (v70 == v49)
            {
              v69 = (llvm::BasicBlock **)(v66 + 16 * v68);
              goto LABEL_80;
            }
          }
        }
        v69 = (llvm::BasicBlock **)(v66 + 16 * v67);
        goto LABEL_80;
      }
      v442 = 1;
      for (j = 8; j != 72; j += 16)
        *(uint64_t *)((char *)&v442 + j) = -4096;
      v439 = v441;
      v440 = 0x400000000;
      v436 = v438;
      v437 = 0x400000000;
      v121 = *(uint64_t **)(v8 + 32);
      v122 = 8;
      v425 = (void *)1;
      do
      {
        *(void **)((char *)&v425 + v122) = (void *)-4096;
        v122 += 16;
      }
      while (v122 != 72);
      v429 = (char *)&v431;
      v430 = 0x400000000;
      v123 = (uint64_t *)v37;
      if (v37)
      {
        do
        {
          v433 = *v123;
          sub_1C627BEC4((uint64_t)&v425, &v433);
          v123 = (uint64_t *)*v123;
        }
        while (v123);
        v47 = v446;
      }
      if (!v47)
      {
LABEL_150:
        if ((_DWORD)v430)
        {
          v124 = v429;
          v125 = &v429[56 * v430];
          do
          {
            v126 = *((unsigned int *)v124 + 4);
            if ((_DWORD)v126)
            {
              v127 = (uint64_t *)*((_QWORD *)v124 + 1);
              v128 = 8 * v126;
              do
              {
                v433 = 0;
                v433 = *v127;
                v129 = v440;
                *((_DWORD *)sub_1C627C418(&v442, &v433) + 2) = v129;
                v130 = v433;
                v131 = v440;
                if (v440 >= (unint64_t)HIDWORD(v440))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v439, (uint64_t)v441, v440 + 1, 8);
                  v131 = v440;
                }
                v439[v131] = v130;
                LODWORD(v440) = v440 + 1;
                v132 = *(_QWORD *)v124;
                v133 = v437;
                if (v437 >= (unint64_t)HIDWORD(v437))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v436, (uint64_t)v438, v437 + 1, 8);
                  v133 = v437;
                }
                v436[v133] = v132;
                LODWORD(v437) = v437 + 1;
                ++v127;
                v128 -= 8;
              }
              while (v128);
            }
            v124 += 56;
          }
          while (v124 != v125);
        }
        sub_1C627C47C(&v429);
        if ((v425 & 1) == 0)
          MEMORY[0x1CAA32FB4](v426, 8);
        v7 = v407;
        if ((v442 & 0xFFFFFFFE) == 2)
        {
LABEL_163:
          v134 = *(_QWORD *)(v8 + 40);
          if (v134)
          {
            *(_QWORD *)(v134 + 56) = v7;
            sub_1C53BA620(v134, 0);
          }
          if (v436 != (_QWORD *)v438)
            free(v436);
          if (v439 != (_QWORD *)v441)
            free(v439);
          if ((v442 & 1) == 0)
            MEMORY[0x1CAA32FB4](v443, 8);
          goto LABEL_114;
        }
        v153 = **(uint64_t *****)(v37 + 32);
        v154 = **v153;
        v155 = *v154;
        v405 = v153;
        v400 = v153 >> 4;
        if ((*((_BYTE *)v153 + 23) & 0x10) == 0)
        {
          v164 = 0;
          v165 = &byte_1C871356D;
LABEL_206:
          v167 = *((_QWORD *)v445 + 1);
          v428 = 773;
          v425 = v165;
          v426 = v164;
          v427[0] = "Exit";
          v168 = operator new();
          v398 = v154;
          *(_QWORD *)v168 = *v154 + 1600;
          *(_QWORD *)(v168 + 8) = 0;
          v169 = *(_DWORD *)(v168 + 20) & 0xC0000000;
          *(_DWORD *)(v168 + 16) = 22;
          *(_DWORD *)(v168 + 20) = v169;
          *(_QWORD *)(v168 + 24) = 0;
          v170 = (_QWORD *)(v168 + 24);
          *(_QWORD *)(v168 + 32) = 0;
          *(_QWORD *)(v168 + 40) = v168 + 40;
          *(_QWORD *)(v168 + 48) = v168 + 40;
          *(_QWORD *)(v168 + 56) = 0;
          if (v167)
            v171 = (uint64_t *)(v167 + 24);
          else
            v171 = v10;
          llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)v10, (_QWORD *)v168);
          v172 = *v171;
          *(_QWORD *)(v168 + 32) = v171;
          *v170 = v172;
          *(_QWORD *)(v172 + 8) = v170;
          v397 = v171;
          *v171 = (uint64_t)v170;
          llvm::Value::setName((uint64_t ***)v168, (uint64_t)&v425);
          v402 = (llvm::BasicBlock *)v168;
          *(_QWORD *)sub_1C55CCA98(v8) = v168;
          if (*v436)
            llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::addBasicBlockToLoop((_QWORD *)*v436, v168, *(_QWORD *)(v8 + 32));
          if ((*((_BYTE *)v405 + 23) & 0x10) == 0)
          {
            v182 = 0;
            v183 = &byte_1C871356D;
LABEL_220:
            v428 = 773;
            v425 = v183;
            v426 = v182;
            v427[0] = "ExitPhi";
            v403 = (llvm::Constant ***)(v155 + 1960);
            v406 = sub_1C50B1024(v155 + 1960, v442 >> 1, (uint64_t)&v425, v168);
            v433 = 1;
            for (k = 8; k != 1032; k += 16)
              *(uint64_t *)((char *)&v433 + k) = -4096;
            v432[0] = 1;
            for (m = 1; m != 129; m += 2)
              v432[m] = -4096;
            v425 = v427;
            v426 = 0x4000000000;
            v187 = 1;
            v424[0] = 1;
            do
            {
              v424[v187] = -4096;
              v187 += 2;
            }
            while (v187 != 129);
            v421 = v423;
            v422 = 0x4000000000;
            if (!(_DWORD)v446)
              goto LABEL_230;
            v188 = (llvm::PHINode **)v445;
            v189 = 16 * v446;
            do
            {
              v190 = *v188;
              v188 += 2;
              v419 = v190;
              v420 = 0;
              sub_1C627C4F0((uint64_t)v432, &v419, &v420, (uint64_t)&v414);
              v189 -= 16;
            }
            while (v189);
            if (!(_DWORD)v446)
              goto LABEL_230;
            v324 = (uint64_t *)v445;
            v401 = &v445[16 * v446];
            v396 = (uint64_t *)(v406 + 24);
            while (1)
            {
              v418 = 0;
              v325 = *v324;
              v326 = v324[1];
              v404 = v324;
              v418 = *v324;
              v327 = *(_QWORD *)(v326 + 48);
              v328 = v327;
              if (v327 == v326 + 40)
              {
LABEL_403:
                v329 = 0;
              }
              else
              {
                while (1)
                {
                  v329 = v328 - 24;
                  v330 = v328 ? v328 - 24 : 0;
                  if (*(_BYTE *)(v330 + 16) != 83)
                    break;
                  v328 = *(_QWORD *)(v328 + 8);
                  if (v328 == v326 + 40)
                    goto LABEL_403;
                }
              }
              if (v329)
                v331 = v329 + 24;
              else
                v331 = 0;
              if (v327 == v331)
                goto LABEL_461;
              do
              {
                v332 = (llvm::PHINode *)(v327 - 24);
                if (!v327)
                  v332 = 0;
                v417 = v332;
                v333 = *((_DWORD *)v332 + 5);
                v334 = v333 & 0x7FFFFFF;
                if ((v333 & 0x7FFFFFF) != 0)
                {
                  v335 = 0;
                  while (1)
                  {
                    v336 = (_DWORD *)((char *)v332 - 32 * v334);
                    if ((v333 & 0x40000000) != 0)
                      v336 = (_DWORD *)*((_QWORD *)v332 - 1);
                    if (*(_QWORD *)&v336[8 * *((unsigned int *)v332 + 15) + 2 * v335] == v418)
                      break;
                    if (v334 == ++v335)
                      goto LABEL_416;
                  }
                }
                else
                {
LABEL_416:
                  LODWORD(v335) = -1;
                }
                if ((v333 & 0x40000000) != 0)
                  v337 = (_DWORD *)*((_QWORD *)v332 - 1);
                else
                  v337 = (_DWORD *)((char *)v332 - 32 * v334);
                v338 = *(uint64_t **)(v8 + 32);
                v339 = *((_DWORD *)v338 + 4);
                if (v339)
                {
                  v340 = *(_QWORD *)&v337[8 * *((unsigned int *)v332 + 15) + 2 * v335];
                  v341 = *v338;
                  v342 = v339 - 1;
                  v343 = ((v340 >> 4) ^ (v340 >> 9)) & (v339 - 1);
                  v344 = *(_QWORD *)(v341 + 16 * v343);
                  if (v340 == v344)
                  {
LABEL_425:
                    v347 = *(_QWORD *)(v341 + 16 * v343 + 8);
                    goto LABEL_427;
                  }
                  v345 = 1;
                  while (v344 != -4096)
                  {
                    v346 = v343 + v345++;
                    v343 = v346 & v342;
                    v344 = *(_QWORD *)(v341 + 16 * v343);
                    if (v340 == v344)
                      goto LABEL_425;
                  }
                }
                v347 = 0;
LABEL_427:
                if (v347 != v37)
                  goto LABEL_428;
                *(_QWORD *)&v414 = v332;
                v419 = 0;
                if ((sub_1C627C5B4((uint64_t)&v433, &v414, &v419) & 1) == 0)
                {
                  v419 = 0;
                  if ((*((_BYTE *)v405 + 23) & 0x10) != 0)
                  {
                    v351 = ***v405;
                    v352 = *(_QWORD *)(v351 + 152);
                    v353 = *(unsigned int *)(v351 + 168);
                    if (!(_DWORD)v353)
                      goto LABEL_442;
                    LODWORD(v354) = (v353 - 1) & (v400 ^ (v405 >> 9));
                    v355 = (uint64_t ****)(v352 + 16 * v354);
                    v356 = *v355;
                    if (*v355 != v405)
                    {
                      v357 = 1;
                      while (v356 != (uint64_t ***)-4096)
                      {
                        v358 = v354 + v357++;
                        v354 = v358 & (v353 - 1);
                        v356 = *(uint64_t ****)(v352 + 16 * v354);
                        if (v356 == v405)
                        {
                          v355 = (uint64_t ****)(v352 + 16 * v354);
                          goto LABEL_443;
                        }
                      }
LABEL_442:
                      v355 = (uint64_t ****)(v352 + 16 * v353);
                    }
LABEL_443:
                    v360 = v355[1];
                    v363 = *v360;
                    v362 = (char *)(v360 + 2);
                    v361 = v363;
                  }
                  else
                  {
                    v361 = 0;
                    v362 = &byte_1C871356D;
                  }
                  v364 = *(_QWORD *)v417;
                  v365 = v442;
                  LOWORD(v416) = 773;
                  *(_QWORD *)&v414 = v362;
                  *((_QWORD *)&v414 + 1) = v361;
                  *(_QWORD *)&v415 = "pnMove";
                  v366 = operator new(0x48uLL);
                  v367 = v365;
                  v368 = v366;
                  v366[1] = v364;
                  v369 = (llvm::Value *)(v366 + 1);
                  *v366 = 0;
                  v366[2] = 0;
                  v366[3] = 0x4000000000000053;
                  *((_OWORD *)v366 + 2) = 0u;
                  v370 = (char *)(v366 + 4);
                  *((_OWORD *)v366 + 3) = 0u;
                  *((_DWORD *)v366 + 16) = 0;
                  if (v406)
                  {
                    v399 = v367;
                    v379 = *((_QWORD *)v406 + 5);
                    v366[6] = v379;
                    *(_WORD *)(v379 + 18) &= ~0x8000u;
                    if ((*((_BYTE *)v366 + 31) & 0x10) != 0)
                    {
                      v381 = *(_QWORD *)(v379 + 56);
                      if (v381)
                      {
                        v382 = *(llvm::ValueSymbolTable **)(v381 + 104);
                        if (v382)
                          llvm::ValueSymbolTable::reinsertValue(v382, v369);
                      }
                    }
                    v380 = *v396;
                    v368[4] = *v396;
                    v368[5] = v396;
                    *(_QWORD *)(v380 + 8) = v370;
                    *v396 = (uint64_t)v370;
                    v367 = v399;
                  }
                  *((_DWORD *)v368 + 17) = v367 >> 1;
                  llvm::Value::setName((uint64_t ***)v369, (uint64_t)&v414);
                  v371 = *((unsigned int *)v368 + 17);
                  v372 = operator new(40 * v371);
                  *v368 = v372;
                  if ((_DWORD)v371)
                  {
                    v373 = &v372[4 * v371];
                    do
                    {
                      *v372 = 0;
                      v372[1] = 0;
                      v372[2] = 0;
                      v372[3] = v369;
                      v372 += 4;
                    }
                    while (v372 != v373);
                  }
                  v419 = v369;
                  sub_1C627C7EC(&v433, &v417)[1] = v369;
                  v374 = v419;
                  v375 = v422;
                  if (v422 >= (unint64_t)HIDWORD(v422))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v421, (uint64_t)v423, v422 + 1, 8);
                    v375 = v422;
                  }
                  v8 = v408;
                  *((_QWORD *)v421 + v375) = v374;
                  LODWORD(v422) = v422 + 1;
                  sub_1C627BCB0((unsigned int *)&v425, (unint64_t)v432);
                  v376 = (char *)v425 + 1032 * v426 - 1032;
                  sub_1C627C7EC(v424, &v419)[1] = v376;
                  *((_BYTE *)sub_1C627CB58((_DWORD *)v425 + 258 * v426 - 258, &v418) + 8) = 1;
                  v377 = *((_DWORD *)v417 + 5);
                  if ((v377 & 0x40000000) != 0)
                    v378 = (char *)*((_QWORD *)v417 - 1);
                  else
                    v378 = (char *)v417 - 32 * (v377 & 0x7FFFFFF);
                  sub_1C477667C(v419, *(_QWORD *)&v378[32 * v335], v418);
                  goto LABEL_454;
                }
                *(_QWORD *)&v414 = 0;
                v348 = (llvm::PHINode *)sub_1C627C7EC(&v433, &v417)[1];
                *(_QWORD *)&v414 = v348;
                v349 = *((_DWORD *)v417 + 5);
                if ((v349 & 0x40000000) != 0)
                  v350 = (char *)*((_QWORD *)v417 - 1);
                else
                  v350 = (char *)v417 - 32 * (v349 & 0x7FFFFFF);
                sub_1C477667C(v348, *(_QWORD *)&v350[32 * v335], v418);
                v359 = sub_1C627C7EC(v424, &v414);
                *((_BYTE *)sub_1C627CB58((_DWORD *)v359[1], &v418) + 8) = 1;
LABEL_454:
                llvm::PHINode::removeIncomingValue(v417, v335, 0);
LABEL_428:
                v327 = *(_QWORD *)(v327 + 8);
              }
              while (v327 != v331);
              v325 = v418;
LABEL_461:
              v383 = *(_QWORD *)(v325 + 40);
              if (v383 == v325 + 40)
              {
                v384 = 0;
              }
              else
              {
                v385 = v383 - 24;
                if (!v383)
                  v385 = 0;
                if (*(unsigned __int8 *)(v385 + 16) - 29 >= 0xB)
                  v384 = 0;
                else
                  v384 = v385;
              }
              v386 = *(unsigned __int8 *)(v384 + 16);
              if (v386 != 30)
                __asm { BR              X9 }
              if ((*(_DWORD *)(v384 + 20) & 0x7FFFFFF) == 3)
                v387 = 2;
              else
                v387 = 1;
              v388 = 0;
              while (llvm::Instruction::getSuccessor((llvm::Instruction *)v384, v388) != v326)
              {
                if (v387 == ++v388)
                  goto LABEL_477;
              }
              llvm::Instruction::setSuccessor((llvm::Instruction *)v384, v388, v402);
LABEL_477:
              v389 = *(unsigned int *)(sub_1C627BD20((uint64_t)&v442, v326) + 8);
              DWORD2(v414) = 32;
              *(_QWORD *)&v414 = v389;
              IntegerValue = llvm::Constant::getIntegerValue(v403, (llvm::Type *)&v414, v390);
              sub_1C477667C((llvm::PHINode *)v406, (uint64_t)IntegerValue, v418);
              if (DWORD2(v414) >= 0x41 && (_QWORD)v414)
                MEMORY[0x1CAA32F9C](v414, 0x1000C8000313F17);
              v324 = v404 + 2;
              if (v404 + 2 == (uint64_t *)v401)
              {
LABEL_230:
                if ((_DWORD)v422)
                {
                  v191 = (llvm::PHINode **)v421;
                  v192 = (llvm::PHINode **)((char *)v421 + 8 * v422);
                  do
                  {
                    v193 = sub_1C627C7EC(v424, v191)[1];
                    v194 = sub_1C627BD9C((int *)v193);
                    v196 = v194;
                    v197 = v195;
                    v198 = v193 + 8;
                    if ((*(_BYTE *)v193 & 1) != 0)
                    {
                      v199 = 64;
                    }
                    else
                    {
                      v198 = *(_QWORD *)(v193 + 8);
                      v199 = *(unsigned int *)(v193 + 16);
                    }
                    v200 = (int *)(v198 + 16 * v199);
                    if (v200 != v194)
                    {
                      do
                      {
                        if (!*((_BYTE *)v196 + 8))
                        {
                          v201 = *v191;
                          v202 = llvm::UndefValue::get(*(llvm::UndefValue **)*v191, v195);
                          sub_1C477667C(v201, (uint64_t)v202, *(_QWORD *)v196);
                        }
                        while (1)
                        {
                          v196 += 4;
                          if (v196 == (int *)v197)
                            break;
                          if ((*(_QWORD *)v196 | 0x1000) != 0xFFFFFFFFFFFFF000)
                            goto LABEL_242;
                        }
                        v196 = (int *)v197;
LABEL_242:
                        ;
                      }
                      while (v196 != v200);
                    }
                    ++v191;
                  }
                  while (v191 != v192);
                }
                v203 = sub_1C627BD9C((int *)&v433);
                v205 = &v434;
                if ((v433 & 1) == 0)
                  v205 = v434;
                v206 = v435;
                if ((v433 & 1) != 0)
                  v206 = 64;
                v207 = (int *)&v205[2 * v206];
                v208 = (uint64_t)v402;
                if (v207 != v203)
                {
                  v209 = v203;
                  v210 = v204;
                  do
                  {
                    v212 = v209 + 4;
                    v211 = *(llvm::PHINode **)v209;
                    v213 = sub_1C627C7EC(&v433, v209)[1];
                    v214 = v211;
                    v208 = (uint64_t)v402;
                    sub_1C477667C(v214, v213, (uint64_t)v402);
                    if (v212 == v210)
                    {
LABEL_254:
                      v209 = v210;
                    }
                    else
                    {
                      v209 = v212;
                      while ((*(_QWORD *)v209 | 0x1000) == 0xFFFFFFFFFFFFF000)
                      {
                        v209 += 4;
                        if (v209 == v210)
                          goto LABEL_254;
                      }
                    }
                  }
                  while (v209 != v207);
                }
                v410 = (llvm::BasicBlock *)((v442 >> 1) - 1);
                if (v442 >> 1 == 1)
                {
LABEL_300:
                  v255 = *(llvm::PHINode ***)(v37 + 32);
                  for (n = *(llvm::PHINode ***)(v37 + 40); v255 != n; ++v255)
                  {
                    v257 = (uint64_t)*v255 + 40;
                    for (ii = *((_QWORD *)*v255 + 6); ii != v257; ii = *(_QWORD *)(ii + 8))
                    {
                      if (ii)
                        v259 = ii - 24;
                      else
                        v259 = 0;
                      v260 = *(_QWORD *)(v259 + 8);
                      if (v260)
                      {
                        while (1)
                        {
                          v261 = *(_QWORD *)(v260 + 24);
                          if (!v261 || *(_BYTE *)(v261 + 16) != 83)
                            break;
                          v262 = *(_DWORD *)(v261 + 20);
                          if ((v262 & 0x40000000) != 0)
                            v263 = *(_QWORD *)(v261 - 8);
                          else
                            v263 = v261 - 32 * (v262 & 0x7FFFFFF);
                          v274 = *(uint64_t **)(v8 + 32);
                          v275 = *((_DWORD *)v274 + 4);
                          if (v275)
                          {
                            v276 = *(_QWORD *)(v263
                                             + 32 * *(unsigned int *)(v261 + 60)
                                             + 8 * ((unint64_t)(v260 - v263) >> 5));
                            v277 = *v274;
                            v278 = v275 - 1;
                            v279 = ((v276 >> 4) ^ (v276 >> 9)) & (v275 - 1);
                            v280 = *(_QWORD *)(v277 + 16 * v279);
                            if (v276 == v280)
                            {
LABEL_327:
                              v283 = *(_QWORD **)(v277 + 16 * v279 + 8);
                              goto LABEL_329;
                            }
                            v281 = 1;
                            while (v280 != -4096)
                            {
                              v282 = v279 + v281++;
                              v279 = v282 & v278;
                              v280 = *(_QWORD *)(v277 + 16 * v279);
                              if (v276 == v280)
                                goto LABEL_327;
                            }
                          }
                          v283 = 0;
LABEL_329:
                          while (v283 != (_QWORD *)v37)
                          {
                            if (!v283)
                              goto LABEL_334;
                            v283 = (_QWORD *)*v283;
                          }
LABEL_332:
                          v260 = *(_QWORD *)(v260 + 8);
                          if (!v260)
                            goto LABEL_376;
                        }
                        v264 = *(uint64_t **)(v8 + 32);
                        v265 = *((_DWORD *)v264 + 4);
                        if (v265)
                        {
                          v266 = *(_QWORD *)(v261 + 40);
                          v267 = *v264;
                          v268 = v265 - 1;
                          v269 = ((v266 >> 4) ^ (v266 >> 9)) & (v265 - 1);
                          v270 = *(_QWORD *)(v267 + 16 * v269);
                          if (v266 == v270)
                          {
LABEL_316:
                            jj = *(_QWORD **)(v267 + 16 * v269 + 8);
                            goto LABEL_318;
                          }
                          v271 = 1;
                          while (v270 != -4096)
                          {
                            v272 = v269 + v271++;
                            v269 = v272 & v268;
                            v270 = *(_QWORD *)(v267 + 16 * v269);
                            if (v266 == v270)
                              goto LABEL_316;
                          }
                        }
                        for (jj = 0; ; jj = (_QWORD *)*jj)
                        {
LABEL_318:
                          if (jj == (_QWORD *)v37)
                            goto LABEL_332;
                          if (!jj)
                            break;
                        }
LABEL_334:
                        v415 = 0u;
                        v416 = 0u;
                        v414 = 0u;
                        v284 = *(uint64_t ***)v259;
                        if ((*(_BYTE *)(v259 + 23) & 0x10) != 0)
                        {
                          v285 = **v284;
                          v286 = *(_QWORD *)(v285 + 152);
                          v287 = *(unsigned int *)(v285 + 168);
                          if ((_DWORD)v287)
                          {
                            LODWORD(v288) = (v287 - 1) & ((v259 >> 4) ^ (v259 >> 9));
                            v289 = (uint64_t *)(v286 + 16 * v288);
                            v290 = *v289;
                            if (*v289 != v259)
                            {
                              v291 = 1;
                              do
                              {
                                if (v290 == -4096)
                                  goto LABEL_341;
                                v292 = v288 + v291++;
                                v288 = v292 & (v287 - 1);
                                v290 = *(_QWORD *)(v286 + 16 * v288);
                              }
                              while (v290 != v259);
                              v289 = (uint64_t *)(v286 + 16 * v288);
                            }
                          }
                          else
                          {
LABEL_341:
                            v289 = (uint64_t *)(v286 + 16 * v287);
                          }
                          v293 = (_QWORD *)v289[1];
                          v296 = *v293;
                          v294 = (char *)(v293 + 2);
                          v295 = v296;
                        }
                        else
                        {
                          v295 = 0;
                          v294 = &byte_1C871356D;
                        }
                        llvm::SSAUpdater::Initialize((uint64_t)&v414, (uint64_t)v284, v294, v295);
                        v297 = *v255;
                        v419 = *v255;
                        v298 = *(_DWORD *)(v414 + 16);
                        if (!v298)
                        {
                          v307 = 0;
                          goto LABEL_357;
                        }
                        v299 = v298 - 1;
                        v300 = (v298 - 1) & ((v297 >> 4) ^ (v297 >> 9));
                        v301 = (_QWORD *)(*(_QWORD *)v414 + 16 * v300);
                        v302 = *v301;
                        if ((llvm::PHINode *)*v301 != v297)
                        {
                          v303 = 0;
                          v304 = 1;
                          while (v302 != -4096)
                          {
                            if (v303)
                              v305 = 0;
                            else
                              v305 = v302 == -8192;
                            if (v305)
                              v303 = v301;
                            v306 = v300 + v304++;
                            v300 = v306 & v299;
                            v301 = (_QWORD *)(*(_QWORD *)v414 + 16 * (v306 & v299));
                            v302 = *v301;
                            if ((llvm::PHINode *)*v301 == v297)
                              goto LABEL_358;
                          }
                          if (v303)
                            v307 = v303;
                          else
                            v307 = v301;
LABEL_357:
                          v301 = sub_1C4ECCA58(v414, (uint64_t)&v419, (uint64_t *)&v419, v307);
                          *v301 = v419;
                          v301[1] = 0;
                        }
LABEL_358:
                        v301[1] = v259;
                        v308 = *(llvm::Use **)(v259 + 8);
                        while (1)
                        {
                          do
                          {
LABEL_359:
                            if (!v308)
                            {
                              llvm::SSAUpdater::~SSAUpdater((void **)&v414);
                              goto LABEL_376;
                            }
                            v309 = v308;
                            v310 = *((_QWORD *)v308 + 3);
                            v308 = (llvm::Use *)*((_QWORD *)v308 + 1);
                            if (v310)
                              v311 = *(unsigned __int8 *)(v310 + 16) >= 0x1Cu;
                            else
                              v311 = 0;
                          }
                          while (!v311);
                          v312 = *(uint64_t **)(v8 + 32);
                          v313 = *((_DWORD *)v312 + 4);
                          if (!v313)
                            goto LABEL_374;
                          v314 = *(_QWORD *)(v310 + 40);
                          v315 = *v312;
                          v316 = v313 - 1;
                          v317 = ((v314 >> 4) ^ (v314 >> 9)) & (v313 - 1);
                          v318 = *(_QWORD *)(v315 + 16 * v317);
                          if (v314 != v318)
                            break;
LABEL_370:
                          v321 = *(_QWORD **)(v315 + 16 * v317 + 8);
                          if (!v321)
                            goto LABEL_374;
                          while (v321 != (_QWORD *)v37)
                          {
                            if (!v321)
                              goto LABEL_374;
                            v321 = (_QWORD *)*v321;
                          }
                        }
                        v319 = 1;
                        while (v318 != -4096)
                        {
                          v320 = v317 + v319++;
                          v317 = v320 & v316;
                          v318 = *(_QWORD *)(v315 + 16 * v317);
                          if (v314 == v318)
                            goto LABEL_370;
                        }
LABEL_374:
                        llvm::SSAUpdater::RewriteUse((llvm::SSAUpdater *)&v414, v309);
                        goto LABEL_359;
                      }
LABEL_376:
                      ;
                    }
                  }
                  if (v421 != v423)
                    free(v421);
                  v7 = v407;
                  if ((v424[0] & 1) == 0)
                    MEMORY[0x1CAA32FB4](v424[1], 8);
                  v322 = (char *)v425;
                  if ((_DWORD)v426)
                  {
                    v323 = 1032 * v426;
                    do
                    {
                      if ((v322[v323 - 1032] & 1) == 0)
                        MEMORY[0x1CAA32FB4](*(_QWORD *)&v322[v323 - 1024], 8);
                      v323 -= 1032;
                    }
                    while (v323);
                    v322 = (char *)v425;
                  }
                  if (v322 != (char *)v427)
                    free(v322);
                  if ((v432[0] & 1) == 0)
                    MEMORY[0x1CAA32FB4](v432[1], 8);
                  if ((v433 & 1) == 0)
                    MEMORY[0x1CAA32FB4](v434, 8);
                  goto LABEL_163;
                }
                v215 = 0;
                v216 = (v442 >> 1) - 2;
                while (2)
                {
                  v217 = (llvm::BasicBlock *)v208;
                  if (v215 == v216)
                  {
                    v218 = (llvm::BasicBlock *)v439[v216 + 1];
                    goto LABEL_271;
                  }
                  if ((*((_BYTE *)v405 + 23) & 0x10) != 0)
                  {
                    v219 = ***v405;
                    v220 = *(_QWORD *)(v219 + 152);
                    v221 = *(unsigned int *)(v219 + 168);
                    if (!(_DWORD)v221)
                      goto LABEL_267;
                    LODWORD(v222) = (v221 - 1) & (v400 ^ (v405 >> 9));
                    v223 = (uint64_t ****)(v220 + 16 * v222);
                    v224 = *v223;
                    if (*v223 != v405)
                    {
                      v225 = 1;
                      while (v224 != (uint64_t ***)-4096)
                      {
                        v226 = v222 + v225++;
                        v222 = v226 & (v221 - 1);
                        v224 = *(uint64_t ****)(v220 + 16 * v222);
                        if (v224 == v405)
                        {
                          v223 = (uint64_t ****)(v220 + 16 * v222);
                          goto LABEL_268;
                        }
                      }
LABEL_267:
                      v223 = (uint64_t ****)(v220 + 16 * v221);
                    }
LABEL_268:
                    v227 = v223[1];
                    v230 = *v227;
                    v229 = (char *)(v227 + 2);
                    v228 = v230;
                  }
                  else
                  {
                    v228 = 0;
                    v229 = &byte_1C871356D;
                  }
                  LOWORD(v416) = 773;
                  *(_QWORD *)&v414 = v229;
                  *((_QWORD *)&v414 + 1) = v228;
                  *(_QWORD *)&v415 = "IdxExit";
                  v231 = operator new();
                  *(_QWORD *)v231 = *v398 + 1600;
                  *(_QWORD *)(v231 + 8) = 0;
                  v232 = *(_DWORD *)(v231 + 20) & 0xC0000000;
                  *(_DWORD *)(v231 + 16) = 22;
                  *(_DWORD *)(v231 + 20) = v232;
                  *(_QWORD *)(v231 + 24) = 0;
                  *(_QWORD *)(v231 + 32) = 0;
                  *(_QWORD *)(v231 + 40) = v231 + 40;
                  *(_QWORD *)(v231 + 48) = v231 + 40;
                  *(_QWORD *)(v231 + 56) = 0;
                  llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)v10, (_QWORD *)v231);
                  v233 = *v397;
                  *(_QWORD *)(v231 + 32) = v397;
                  *(_QWORD *)(v231 + 24) = v233;
                  *(_QWORD *)(v233 + 8) = v231 + 24;
                  *v397 = v231 + 24;
                  llvm::Value::setName((uint64_t ***)v231, (uint64_t)&v414);
                  *(_QWORD *)sub_1C55CCA98(v8) = v231;
                  v234 = (_QWORD *)v436[v215 + 1];
                  v218 = (llvm::BasicBlock *)v231;
                  if (v234)
                    llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::addBasicBlockToLoop(v234, v231, *(_QWORD *)(v8 + 32));
LABEL_271:
                  v235 = llvm::ConstantInt::get((llvm::ConstantInt *)v403, v215, 0);
                  *(_QWORD *)&v414 = "IdxCmp";
                  LOWORD(v416) = 259;
                  v236 = (llvm::Value *)llvm::CmpInst::Create(53, 32, (_DWORD **)v406, (uint64_t)v235, (uint64_t)&v414, v208);
                  v237 = (llvm::BasicBlock *)v439[v215];
                  v238 = operator new(0xA0uLL);
                  v239 = 0;
                  v240 = (llvm::BranchInst *)(v238 + 24);
                  v238[29] = v238[29] & 0x38000000 | 3;
                  do
                  {
                    v241 = &v238[v239];
                    *v241 = 0;
                    v241[1] = 0;
                    v241[2] = 0;
                    v241[3] = v240;
                    v239 += 8;
                  }
                  while (v239 != 24);
                  v242 = v237;
                  v208 = (uint64_t)v218;
                  llvm::BranchInst::BranchInst(v240, v242, v218, v236, v217);
                  v243 = v439[v215];
                  v244 = v243 + 40;
                  for (kk = *(_QWORD *)(v243 + 48); kk != v244; kk = *(_QWORD *)(kk + 8))
                  {
                    v246 = kk - 24;
                    if (!kk)
                      v246 = 0;
                    v247 = *(unsigned __int8 *)(v246 + 16);
                    if (v247 != 83)
                      v246 = 0;
                    if (!kk || v247 != 83)
                      break;
                    v248 = *(_DWORD *)(v246 + 20);
                    if ((v248 & 0x40000000) != 0)
                      v249 = *(_QWORD *)(v246 - 8);
                    else
                      v249 = v246 - 32 * (v248 & 0x7FFFFFF);
                    *(_QWORD *)(v249 + 32 * *(unsigned int *)(v246 + 60)) = v217;
                  }
                  for (mm = (_QWORD *)*((_QWORD *)v218 + 6); mm != (_QWORD *)((char *)v218 + 40); mm = (_QWORD *)mm[1])
                  {
                    v251 = mm - 3;
                    if (!mm)
                      v251 = 0;
                    v252 = *((unsigned __int8 *)v251 + 16);
                    if (v252 != 83)
                      v251 = 0;
                    if (!mm || v252 != 83)
                      break;
                    v253 = *((_DWORD *)v251 + 5);
                    if ((v253 & 0x40000000) != 0)
                      v254 = (_QWORD *)*(v251 - 1);
                    else
                      v254 = &v251[-4 * (v253 & 0x7FFFFFF)];
                    v254[4 * *((unsigned int *)v251 + 15)] = v217;
                  }
                  if ((llvm::BasicBlock *)++v215 == v410)
                    goto LABEL_300;
                  continue;
                }
              }
            }
          }
          v173 = ***v405;
          v174 = *(_QWORD *)(v173 + 152);
          v175 = *(unsigned int *)(v173 + 168);
          if ((_DWORD)v175)
          {
            LODWORD(v176) = (v175 - 1) & (v400 ^ (v405 >> 9));
            v177 = (uint64_t ****)(v174 + 16 * v176);
            v178 = *v177;
            if (*v177 == v405)
            {
LABEL_219:
              v181 = v177[1];
              v184 = (uint64_t)*v181;
              v183 = (char *)(v181 + 2);
              v182 = v184;
              goto LABEL_220;
            }
            v179 = 1;
            while (v178 != (uint64_t ***)-4096)
            {
              v180 = v176 + v179++;
              v176 = v180 & (v175 - 1);
              v178 = *(uint64_t ****)(v174 + 16 * v176);
              if (v178 == v405)
              {
                v177 = (uint64_t ****)(v174 + 16 * v176);
                goto LABEL_219;
              }
            }
          }
          v177 = (uint64_t ****)(v174 + 16 * v175);
          goto LABEL_219;
        }
        v156 = *(_QWORD *)(v155 + 152);
        v157 = *(unsigned int *)(v155 + 168);
        if ((_DWORD)v157)
        {
          LODWORD(v158) = (v157 - 1) & (v400 ^ (v405 >> 9));
          v159 = (uint64_t ****)(v156 + 16 * v158);
          v160 = *v159;
          if (*v159 == v405)
          {
LABEL_205:
            v163 = v159[1];
            v166 = (uint64_t)*v163;
            v165 = (char *)(v163 + 2);
            v164 = v166;
            goto LABEL_206;
          }
          v161 = 1;
          while (v160 != (uint64_t ***)-4096)
          {
            v162 = v158 + v161++;
            v158 = v162 & (v157 - 1);
            v160 = *(uint64_t ****)(v156 + 16 * v158);
            if (v160 == v405)
            {
              v159 = (uint64_t ****)(v156 + 16 * v158);
              goto LABEL_205;
            }
          }
        }
        v159 = (uint64_t ****)(v156 + 16 * v157);
        goto LABEL_205;
      }
      v135 = v445;
      v136 = &v445[16 * v47];
      while (1)
      {
        v433 = *((_QWORD *)v135 + 1);
        v137 = sub_1C627BD20((uint64_t)&v442, v433);
        v138 = &v443;
        if ((v442 & 1) == 0)
          v138 = v443;
        v139 = v444;
        if ((v442 & 1) != 0)
          v139 = 4;
        if (&v138[2 * v139] != (_QWORD *)v137)
          goto LABEL_190;
        v432[0] = 0;
        v140 = *((_DWORD *)v121 + 4);
        if (!v140)
          goto LABEL_183;
        v141 = *v121;
        v142 = v140 - 1;
        v143 = ((v433 >> 4) ^ (v433 >> 9)) & (v140 - 1);
        v144 = *(_QWORD *)(*v121 + 16 * v143);
        if (v433 != v144)
          break;
LABEL_182:
        v147 = *(_QWORD *)(v141 + 16 * v143 + 8);
LABEL_184:
        v432[0] = v147;
        v148 = sub_1C627BFC8((uint64_t)&v425, v432);
        if ((char *)v148 == &v429[56 * v430])
        {
          do
          {
            v432[0] = *(_QWORD *)v432[0];
            v149 = (char *)sub_1C627BFC8((uint64_t)&v425, v432);
          }
          while (v149 == &v429[56 * v430]);
          v148 = (uint64_t)v149;
        }
        v150 = v433;
        v151 = *(unsigned int *)(v148 + 16);
        if (v151 >= *(unsigned int *)(v148 + 20))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v148 + 8, v148 + 24, v151 + 1, 8);
          v151 = *(unsigned int *)(v148 + 16);
        }
        *(_QWORD *)(*(_QWORD *)(v148 + 8) + 8 * v151) = v150;
        ++*(_DWORD *)(v148 + 16);
        sub_1C627C418(&v442, &v433);
LABEL_190:
        v135 += 16;
        if (v135 == v136)
          goto LABEL_150;
      }
      v145 = 1;
      while (v144 != -4096)
      {
        v146 = v143 + v145++;
        v143 = v146 & v142;
        v144 = *(_QWORD *)(v141 + 16 * v143);
        if (v433 == v144)
          goto LABEL_182;
      }
LABEL_183:
      v147 = 0;
      goto LABEL_184;
    }
  }
LABEL_490:
  sub_1C55C98E8(v8, v7, 0);
  v392 = *(_DWORD *)(v8 + 96);
  if (v392)
  {
    v393 = *(_QWORD *)(v8 + 88);
    v394 = 88 * v392;
    do
    {
      v395 = *(void **)(v393 + v394 - 48);
      if ((void *)(v393 + v394 - 32) != v395)
        free(v395);
      v394 -= 88;
    }
    while (v394);
  }
  *(_DWORD *)(v8 + 96) = 0;
  sub_1C484143C((uint64_t)&v411);
  return 1;
}

uint64_t sub_1C55C968C(uint64_t *a1, unsigned int a2, int a3, int a4)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  BOOL v11;
  int v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  _QWORD *v24;
  uint64_t ***v25;
  uint64_t i;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  uint64_t v31;
  void *v32;
  int v33[2];
  _QWORD v34[3];

  v34[2] = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(a1[11] + 88 * a2);
  v6 = *(_QWORD *)(v5 + 8);
  if (v6)
  {
    while (1)
    {
      v7 = *(_QWORD *)(v6 + 24);
      v8 = *(unsigned __int8 *)(v7 + 16);
      v9 = v7 && v8 >= 0x1C;
      if (v9 && v8 - 29 <= 0xA)
        break;
      v6 = *(_QWORD *)(v6 + 8);
      if (!v6)
        goto LABEL_11;
    }
    v12 = 0;
LABEL_13:
    ++v12;
    while (1)
    {
      v6 = *(_QWORD *)(v6 + 8);
      if (!v6)
        break;
      v13 = *(_QWORD *)(v6 + 24);
      v14 = *(unsigned __int8 *)(v13 + 16);
      if (v13)
        v15 = v14 >= 0x1C;
      else
        v15 = 0;
      if (v15 && v14 - 29 < 0xB)
        goto LABEL_13;
    }
    v11 = (v12 & 0xFFFFFFFE) == 0;
    if (!a3)
      goto LABEL_25;
  }
  else
  {
LABEL_11:
    v11 = 1;
    if (!a3)
      goto LABEL_25;
  }
  if (v11)
    return 0;
LABEL_25:
  v17 = *(_QWORD *)(v5 + 40);
  if (v17 == v5 + 40)
  {
    v19 = 0;
  }
  else
  {
    v18 = v17 - 24;
    if (!v17)
      v18 = 0;
    if (*(unsigned __int8 *)(v18 + 16) - 29 >= 0xB)
      v19 = 0;
    else
      v19 = v18;
  }
  v20 = *(unsigned __int8 *)(v19 + 16);
  if (v20 != 30)
    __asm { BR              X12 }
  if ((*(_DWORD *)(v19 + 20) & 0x7FFFFFF) == 3)
    v21 = 2;
  else
    v21 = 1;
  if (a4 && v21 < 2)
    return 0;
  v24 = (_QWORD *)sub_1C55CCA98((uint64_t)a1);
  v25 = (uint64_t ***)(a1[11] + 88 * a2);
  for (i = (uint64_t)(*v25)[1]; i; i = *(_QWORD *)(i + 8))
  {
    v27 = *(_QWORD *)(i + 24);
    v28 = *(unsigned __int8 *)(v27 + 16);
    if (v27)
      v29 = v28 >= 0x1C;
    else
      v29 = 0;
    if (v29 && v28 - 29 < 0xB)
      break;
  }
  v32 = v34;
  *(_QWORD *)v33 = 0x200000000;
  sub_1C4DBBCC0((unsigned int *)&v32, i, 0);
  v31 = sub_1C5EBE3AC(*v25, (uint64_t *)v32, v33[0], "Split", 0, a1[5], a1[4], 0, 0);
  *v24 = *v25;
  *v25 = (uint64_t **)v31;
  if (v32 != v34)
    free(v32);
  return 1;
}

void sub_1C55C98B8()
{
  JUMPOUT(0x1C55C978CLL);
}

void sub_1C55C98C8()
{
  JUMPOUT(0x1C55C978CLL);
}

void sub_1C55C98D4()
{
  JUMPOUT(0x1C55C978CLL);
}

void sub_1C55C98DC()
{
  JUMPOUT(0x1C55C978CLL);
}

uint64_t sub_1C55C98E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  unsigned __int8 *v34;
  uint64_t v35;
  int v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  uint64_t v50;
  char *v51;
  unint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  const llvm::BasicBlock **v55;
  uint64_t ***v56;
  uint64_t v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t ***v60;
  _QWORD *v61;
  llvm::LLVMContext *v62;
  llvm::LLVMContext *v63;
  const llvm::BasicBlock *v64;
  _QWORD *v65;
  llvm::BasicBlock *v66;
  unint64_t v67;
  uint64_t v68;
  int32x2_t *v69;
  unint64_t v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t *v74;
  uint64_t v75;
  int v76;
  int v77;
  llvm::BasicBlock *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  _QWORD *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  int v92;
  unsigned int i;
  uint64_t result;
  _QWORD *v95;
  _QWORD *v96;
  llvm::Instruction *v97;
  int v98;
  llvm::Instruction *v99;
  uint64_t v100;
  int v101;
  BOOL v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t *v106;
  int v107;
  uint64_t v108;
  unsigned int v109;
  uint64_t v110;
  uint64_t v111;
  int v112;
  int v113;
  _QWORD **v114;
  uint64_t v115;
  uint64_t n;
  uint64_t v117;
  int v118;
  _DWORD *v119;
  uint64_t v120;
  uint64_t v121;
  unint64_t v122;
  uint64_t v123;
  int v124;
  _DWORD *v125;
  const llvm::BasicBlock *v126;
  uint64_t v127;
  BOOL v128;
  _QWORD *v129;
  llvm::LLVMContext *v130;
  llvm::LLVMContext *v131;
  uint64_t v132;
  int v133;
  uint64_t v134;
  uint64_t v135;
  unsigned int v136;
  BOOL v137;
  BOOL v138;
  unint64_t v139;
  uint64_t v140;
  unsigned int v141;
  BOOL v142;
  uint64_t UniqueExitBlock;
  _BYTE *v145;
  unint64_t v146;
  __int128 *v147;
  uint64_t v148;
  uint64_t v149;
  unint64_t v150;
  uint64_t ****v151;
  uint64_t ****v152;
  uint64_t ***v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t ***v156;
  _QWORD *v157;
  unint64_t v158;
  int32x2_t ****v159;
  int32x2_t *v160;
  unint64_t v161;
  uint64_t v162;
  unsigned int v163;
  uint64_t v164;
  int32x2_t *****v165;
  int32x2_t ****v166;
  int v167;
  int v168;
  uint64_t v169;
  unint64_t v170;
  unint64_t *v171;
  uint64_t v172;
  int32x2_t *v173;
  unint64_t v174;
  uint64_t v175;
  unsigned int v176;
  uint64_t v177;
  uint64_t *v178;
  uint64_t v179;
  int v180;
  int v181;
  uint64_t *v182;
  uint64_t *v183;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  _QWORD *v188;
  uint64_t LoopPredecessor;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  int v196;
  int v197;
  _QWORD *v198;
  unint64_t v199;
  int32x2_t ****v200;
  int32x2_t *v201;
  unint64_t v202;
  uint64_t v203;
  unsigned int v204;
  uint64_t v205;
  int32x2_t *****v206;
  int32x2_t ****v207;
  int v208;
  int v209;
  uint64_t v210;
  uint64_t v211;
  int v212;
  uint64_t v213;
  unsigned int v214;
  uint64_t v215;
  uint64_t v216;
  int v217;
  int v218;
  _QWORD *v219;
  uint64_t v220;
  unsigned __int8 *v221;
  llvm::Instruction *v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t *v225;
  int v226;
  uint64_t v227;
  unsigned int v228;
  uint64_t v229;
  uint64_t v230;
  int v231;
  int v232;
  uint64_t v233;
  uint64_t j;
  llvm::PHINode *v235;
  uint64_t v236;
  int v237;
  uint64_t v238;
  uint64_t v239;
  char *v240;
  char *v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  int v246;
  int v247;
  const llvm::BasicBlock *v248;
  const llvm::BasicBlock *v249;
  uint64_t v250;
  uint64_t k;
  uint64_t ***v252;
  _QWORD *v253;
  llvm::LLVMContext *v254;
  llvm::LLVMContext *v255;
  uint64_t v256;
  uint64_t v257;
  uint64_t v258;
  unsigned int v259;
  _QWORD *v260;
  uint64_t v261;
  _QWORD *v262;
  uint64_t v263;
  unsigned int v264;
  uint64_t v265;
  uint64_t *v266;
  uint64_t v267;
  uint64_t *v268;
  uint64_t *v269;
  uint64_t *v270;
  uint64_t v271;
  int v272;
  unsigned int v273;
  uint64_t v274;
  uint64_t v275;
  uint64_t v276;
  int v277;
  int v278;
  uint64_t v279;
  uint64_t v280;
  unsigned int v281;
  _QWORD *v282;
  _QWORD *v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  _QWORD *v287;
  _QWORD *v288;
  unsigned int v289;
  const llvm::BasicBlock **v290;
  const llvm::BasicBlock **v291;
  const llvm::BasicBlock *v292;
  uint64_t v293;
  uint64_t m;
  llvm::Instruction *v295;
  char *v296;
  char *v297;
  uint64_t v298;
  void *v299;
  llvm::MDNode *v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t *v305;
  uint64_t v306;
  int v307;
  int v308;
  _QWORD *v309;
  char *v310;
  size_t v311;
  size_t v312;
  int v313;
  int v314;
  unsigned int v315;
  _QWORD *v316;
  void *v317;
  _QWORD *v318;
  int v319;
  BOOL v320;
  unsigned int v321;
  _QWORD *v322;
  _QWORD *v323;
  unint64_t v324;
  int32x2_t ****v325;
  int32x2_t *v326;
  unint64_t v327;
  uint64_t v328;
  unsigned int v329;
  uint64_t v330;
  int32x2_t *****v331;
  int32x2_t ****v332;
  int v333;
  int v334;
  void *v335;
  uint64_t v336;
  uint64_t v337;
  llvm::LLVMContext *v338;
  llvm::LLVMContext *v339;
  int v340;
  int v341;
  unsigned int v342;
  _QWORD *v343;
  void *v344;
  _QWORD *v345;
  int v346;
  BOOL v347;
  unsigned int v348;
  _QWORD *v349;
  llvm::Use *v350;
  llvm::Use *v351;
  uint64_t v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  int v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t ***v362;
  _QWORD *v363;
  llvm::LLVMContext *v364;
  llvm::LLVMContext *v365;
  int v366;
  uint64_t v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t **v370;
  uint64_t v371;
  uint64_t v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t *v375;
  uint64_t v376;
  int v377;
  int v378;
  _QWORD *v379;
  char *v380;
  size_t v381;
  size_t v382;
  const llvm::BasicBlock *v383;
  int v384;
  int v385;
  unsigned int v386;
  const llvm::BasicBlock **v387;
  const llvm::BasicBlock *v388;
  const llvm::BasicBlock **v389;
  int v390;
  BOOL v391;
  unsigned int v392;
  const llvm::BasicBlock **v393;
  _QWORD *v394;
  uint64_t v395;
  llvm::LLVMContext *v396;
  llvm::LLVMContext *v397;
  int v398;
  int v399;
  unsigned int v400;
  _QWORD *v401;
  _QWORD *v402;
  _QWORD *v403;
  int v404;
  BOOL v405;
  unsigned int v406;
  _QWORD *v407;
  llvm::Use *v408;
  llvm::Use *v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  uint64_t v413;
  uint64_t v414;
  uint64_t v415;
  uint64_t v416;
  __int128 *v417;
  __int128 *v418;
  __int128 *v419;
  uint64_t v420;
  __int128 v421;
  unint64_t v422;
  unsigned int v423;
  uint64_t v424;
  __int128 v425;
  unsigned int v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  uint64_t v430;
  unsigned int v431;
  unsigned int v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  _QWORD *v439;
  _QWORD *v440;
  _QWORD *v441;
  _QWORD *v442;
  unsigned int v443;
  uint64_t v444;
  _QWORD *v446;
  _QWORD *v447;
  int v448;
  _DWORD *v449;
  int v450;
  unsigned int v451;
  uint64_t v452;
  int v453;
  _DWORD *v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  uint64_t v458;
  unsigned int v459;
  uint64_t v460;
  uint64_t v462;
  int v463;
  _DWORD *v464;
  int v465;
  unsigned int v466;
  uint64_t v467;
  int v468;
  _DWORD *v469;
  _QWORD *v470;
  unint64_t v471;
  uint64_t v472;
  uint64_t v473;
  unint64_t v474;
  unint64_t *v475;
  uint64_t v476;
  int32x2_t *v477;
  unint64_t v478;
  uint64_t v479;
  unsigned int v480;
  uint64_t v481;
  uint64_t *v482;
  uint64_t v483;
  int v484;
  int v485;
  unint64_t v487;
  unint64_t *v488;
  uint64_t v489;
  int32x2_t *v490;
  unint64_t v491;
  uint64_t v492;
  unsigned int v493;
  uint64_t v494;
  uint64_t *v495;
  uint64_t v496;
  int v497;
  int v498;
  uint64_t v499;
  unint64_t v500;
  unint64_t *v501;
  uint64_t v502;
  int32x2_t *v503;
  unint64_t v504;
  uint64_t v505;
  unsigned int v506;
  uint64_t v507;
  uint64_t *v508;
  uint64_t v509;
  int v510;
  int v511;
  uint64_t v512;
  unsigned int v513;
  uint64_t v514;
  uint64_t v515;
  uint64_t v516;
  unsigned int v517;
  _QWORD *v518;
  _QWORD *v519;
  uint64_t v520;
  uint64_t v521;
  uint64_t *v522;
  int v523;
  uint64_t v524;
  unsigned int v525;
  uint64_t v526;
  uint64_t v527;
  int v528;
  int v529;
  uint64_t v530;
  unsigned int v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t v534;
  uint64_t *v535;
  int v536;
  uint64_t v537;
  unsigned int v538;
  uint64_t v539;
  uint64_t v540;
  int v541;
  int v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t v545;
  unsigned int v546;
  _QWORD *v547;
  _QWORD *v548;
  uint64_t v549;
  unsigned int v550;
  _BOOL4 v551;
  uint64_t v552;
  unsigned int v553;
  _QWORD *v554;
  _QWORD *v555;
  uint64_t v556;
  int v557;
  uint64_t v558;
  uint64_t v559;
  _BOOL4 v560;
  uint64_t v561;
  uint64_t v562;
  uint64_t v563;
  unint64_t v564;
  _QWORD *v565;
  unsigned int v566;
  uint64_t v567;
  _BOOL4 v568;
  uint64_t v569;
  uint64_t v570;
  unsigned int v571;
  BOOL v572;
  int v574;
  uint64_t v575;
  unsigned int v576;
  BOOL v577;
  unsigned int v579;
  uint64_t v580;
  unint64_t v581;
  uint64_t v582;
  uint64_t v583;
  char v584;
  uint64_t Successor;
  int v586;
  uint64_t v587;
  unsigned int v588;
  uint64_t v589;
  uint64_t v590;
  int v591;
  int v592;
  uint64_t v593;
  uint64_t v594;
  unsigned int v595;
  _QWORD *v596;
  uint64_t v597;
  _QWORD *v598;
  uint64_t v599;
  unint64_t v600;
  unsigned int v602;
  uint64_t *v603;
  unsigned int v604;
  int v605;
  int v606;
  llvm::Instruction *v607;
  llvm::Instruction *v608;
  uint64_t v609;
  uint64_t v610;
  _QWORD *v611;
  unsigned int *v612;
  BOOL v613;
  llvm *v614;
  int v615;
  unsigned int v616;
  int v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t *v620;
  llvm::BasicBlock *v621;
  __int128 v622;
  __int128 v623;
  unsigned int v624;
  _OWORD v625[2];
  unsigned __int128 v626;
  unsigned int v627;
  _QWORD v628[2];
  unsigned int v629;
  uint64_t v630[3];
  char v631;
  void *v632[6];
  __int128 v633;
  __int128 v634;
  __int128 v635;
  uint64_t v636;
  uint64_t v637;
  void *v638;
  uint64_t v639;
  unint64_t *v640;
  int32x2_t ****v641;
  _QWORD *v642;
  char *v643;
  uint64_t v644;
  unint64_t *v645;
  int32x2_t ****v646;
  _QWORD *v647;
  const llvm::BasicBlock *v648;
  uint64_t v649;
  _BYTE v650[128];
  __int128 v651;
  __int128 v652;
  __int128 v653;
  uint64_t v654;

  v654 = *MEMORY[0x1E0C80C00];
  if (!a3)
  {
    v9 = *(_QWORD *)(a2 + 80);
    if (v9)
      v10 = v9 - 24;
    else
      v10 = 0;
LABEL_12:
    v599 = v10;
    goto LABEL_16;
  }
  v5 = *(uint64_t **)(a1 + 32);
  v599 = **(_QWORD **)(a3 + 32);
  v6 = *(_QWORD *)(v599 + 40);
  if (v6 == v599 + 40)
  {
    v8 = 0;
  }
  else
  {
    if (v6)
      v7 = v6 - 24;
    else
      v7 = 0;
    if (*(unsigned __int8 *)(v7 + 16) - 29 >= 0xB)
      v8 = 0;
    else
      v8 = v7;
  }
  v11 = *(unsigned __int8 *)(v8 + 16);
  if (v11 != 30)
    __asm { BR              X10 }
  if ((*(_DWORD *)(v8 + 20) & 0x7FFFFFF) != 3)
  {
    Successor = llvm::Instruction::getSuccessor((llvm::Instruction *)v8, 0);
    v586 = *((_DWORD *)v5 + 4);
    if (v586)
    {
      v587 = *v5;
      v588 = v586 - 1;
      v589 = ((Successor >> 4) ^ (Successor >> 9)) & (v586 - 1);
      v590 = *(_QWORD *)(*v5 + 16 * v589);
      if (Successor != v590)
      {
        v591 = 1;
        while (v590 != -4096)
        {
          v592 = v589 + v591++;
          v589 = v592 & v588;
          v590 = *(_QWORD *)(v587 + 16 * v589);
          if (Successor == v590)
            goto LABEL_808;
        }
        goto LABEL_16;
      }
LABEL_808:
      v593 = *(_QWORD *)(v587 + 16 * v589 + 8);
      if (v593)
      {
        if (**(_QWORD **)(v593 + 32) == Successor)
        {
          v594 = *(_QWORD *)(a1 + 88);
          v595 = *(_DWORD *)(a1 + 96);
          if (v595)
          {
            v596 = (_QWORD *)(v594 + 88 * v595);
            v597 = 88 * v595;
            v598 = *(_QWORD **)(a1 + 88);
            while (*v598 != v599)
            {
              v598 += 11;
              v597 -= 88;
              if (!v597)
              {
                v598 = v596;
                break;
              }
            }
          }
          else
          {
            v598 = *(_QWORD **)(a1 + 88);
          }
          sub_1C55C968C((uint64_t *)a1, -1171354717 * (((unint64_t)v598 - v594) >> 3), 0, 0);
          v10 = **(_QWORD **)(a3 + 32);
          goto LABEL_12;
        }
      }
    }
  }
LABEL_16:
  v12 = *(_QWORD *)(a1 + 88);
  v13 = *(_DWORD *)(a1 + 96);
  if (v13)
  {
    v14 = (_QWORD *)(v12 + 88 * v13);
    v15 = 88 * v13;
    v16 = *(_QWORD **)(a1 + 88);
    while (*v16 != v599)
    {
      v16 += 11;
      v15 -= 88;
      if (!v15)
      {
        v17 = a2;
        v16 = v14;
        goto LABEL_23;
      }
    }
    v17 = a2;
  }
  else
  {
    v17 = a2;
    v16 = *(_QWORD **)(a1 + 88);
  }
LABEL_23:
  v627 = -1171354717 * (((uint64_t)v16 - v12) >> 3);
  v626 = 0u;
  v18 = v627;
  memset(v625, 0, sizeof(v625));
  sub_1C50AE0D4(v625, &v627);
  *(_BYTE *)(v12 + 88 * v18 + 36) = 1;
  v603 = (uint64_t *)(v17 + 72);
  v609 = v17;
  v610 = a1;
  do
  {
LABEL_24:
    v19 = v610;
    do
    {
      while (1)
      {
        while (1)
        {
          v20 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)&v625[0] + 1) + (((unint64_t)v626 >> 7) & 0x1FFFFFFFFFFFFF8))
                          + 4 * (v626 & 0x3FF));
          v21 = *(_QWORD *)(v19 + 88);
          v620 = (uint64_t *)(v21 + 88 * v20);
          v22 = *(_QWORD *)(*v620 + 40);
          v23 = v19;
          if (v22 == *v620 + 40)
          {
            v25 = 0;
          }
          else
          {
            if (v22)
              v24 = v22 - 24;
            else
              v24 = 0;
            if (*(unsigned __int8 *)(v24 + 16) - 29 >= 0xB)
              v25 = 0;
            else
              v25 = v24;
          }
          v26 = *(unsigned __int8 *)(v25 + 16);
          if (v26 != 30)
            __asm { BR              X9 }
          if ((*(_DWORD *)(v25 + 20) & 0x7FFFFFF) == 3)
            v27 = 2;
          else
            v27 = 1;
          v618 = *(_QWORD *)(v19 + 88);
          v28 = v21 + 88 * v20;
          v31 = *(_QWORD *)(v28 + 40);
          v30 = v28 + 40;
          v29 = v31;
          v32 = *(unsigned int *)(v30 + 8);
          v33 = 0;
          if ((_DWORD)v32)
          {
            v34 = (unsigned __int8 *)(v29 + 13);
            v35 = 16 * v32;
            do
            {
              v36 = *v34;
              v34 += 16;
              v33 += v36;
              v35 -= 16;
            }
            while (v35);
          }
          v604 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)&v625[0] + 1)
                                       + (((unint64_t)v626 >> 7) & 0x1FFFFFFFFFFFFF8))
                           + 4 * (v626 & 0x3FF));
          v37 = v32 - v33;
          if (!v37)
          {
            v512 = v27;
            v48 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)&v625[0] + 1)
                                        + (((unint64_t)v626 >> 7) & 0x1FFFFFFFFFFFFF8))
                            + 4 * (v626 & 0x3FF));
            if (!sub_1C55C968C((uint64_t *)v19, v20, 1, 1))
            {
              v584 = 0;
              v583 = v618;
              *(_DWORD *)(v618 + 88 * v604 + 12) = v604;
              v27 = v512;
              goto LABEL_704;
            }
            v599 = *(_QWORD *)(*(_QWORD *)(v19 + 88) + 88 * v604);
            goto LABEL_24;
          }
          if (v37 == 1)
          {
            v48 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)&v625[0] + 1)
                                        + (((unint64_t)v626 >> 7) & 0x1FFFFFFFFFFFFF8))
                            + 4 * (v626 & 0x3FF));
            v583 = *(_QWORD *)(v19 + 88);
            *(_DWORD *)(v618 + 88 * v20 + 12) = *(_DWORD *)(v29 + 8);
            v584 = *(_BYTE *)(v29 + 12);
            goto LABEL_704;
          }
          if ((_DWORD)v32)
          {
            v38 = 0;
            v39 = 16 * v32 - 16;
            v40 = 1;
            v41 = v29 + 16 * v32;
            while (1)
            {
              v42 = v29 + 16;
              if (!*(_BYTE *)(v29 + 13) && v42 != v41)
                break;
LABEL_49:
              ++v38;
              ++v40;
              v39 -= 16;
              v29 += 16;
              if (v42 == v41)
                goto LABEL_59;
            }
            v44 = 0;
            v45 = v40;
            while (*(_BYTE *)(v29 + v44 + 29) || *(_DWORD *)(v29 + 8) != *(_DWORD *)(v29 + v44 + 24))
            {
              ++v45;
              v44 += 16;
              if (v39 == v44)
                goto LABEL_49;
            }
            if (v38 != -1)
              break;
          }
LABEL_59:
          v624 = 0;
          v602 = *(_DWORD *)(v19 + 96);
          v49 = sub_1C55CCA98(v19);
          v50 = *(_QWORD *)(v19 + 88);
          v629 = 128;
          v51 = (char *)operator new(0x2000uLL, (std::align_val_t)8uLL);
          v628[0] = v51;
          v628[1] = 0;
          if (v629)
          {
            v52 = (unint64_t)v629 << 6;
            v53 = v51 + 16;
            do
            {
              *v53 = 0;
              v53[1] = -4096;
              *(v53 - 2) = &unk_1E814DA10;
              *(v53 - 1) = 2;
              v53[2] = 0;
              v53 += 8;
              v52 -= 64;
            }
            while (v52);
          }
          v54 = v50;
          v55 = (const llvm::BasicBlock **)(v50 + 88 * v604);
          LOBYTE(v630[0]) = 0;
          v631 = 0;
          v56 = (uint64_t ***)*v55;
          *(_QWORD *)&v651 = ".duppred";
          LOWORD(v653) = 259;
          v57 = llvm::CloneBasicBlock(v56, (uint64_t)v628, (uint64_t)&v651, 0, 0, 0);
          v58 = (_QWORD *)(v57 + 40);
          v621 = (llvm::BasicBlock *)v57;
          v59 = *(_QWORD **)(v57 + 48);
          if (v59 != (_QWORD *)(v57 + 40))
          {
            do
            {
              if (v59)
                v60 = (uint64_t ***)(v59 - 3);
              else
                v60 = 0;
              v61 = (_QWORD *)operator new();
              *(_DWORD *)v61 = 6;
              v61[1] = 0;
              *((_DWORD *)v61 + 4) = 0;
              v61[5] = v628;
              v61[3] = v61 + 5;
              v61[6] = 0;
              v61[4] = 0x200000001;
              v61[9] = v61 + 11;
              v61[10] = 0x400000000;
              v61[23] = v61 + 25;
              v61[24] = 0x100000000;
              v61[27] = v61 + 29;
              v61[28] = 0x1000000000;
              v648 = (const llvm::BasicBlock *)v61;
              *(_QWORD *)&v651 = v61;
              sub_1C5FD706C((uint64_t)v61, v60);
              sub_1C5FD3718((uint64_t *)&v651, v62);
              llvm::ValueMapper::~ValueMapper((llvm::ValueMapper *)&v648, v63);
              v59 = (_QWORD *)v59[1];
            }
            while (v59 != v58);
          }
          v611 = v58;
          v64 = *v55;
          *((_QWORD *)&v651 + 1) = 2;
          *(_QWORD *)&v652 = 0;
          *((_QWORD *)&v652 + 1) = v64;
          if (v64 != (const llvm::BasicBlock *)-8192 && v64 != (const llvm::BasicBlock *)-4096 && v64)
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)((char *)&v651 + 8));
          *(_QWORD *)&v651 = &unk_1E814DA10;
          *(_QWORD *)&v653 = v628;
          v65 = sub_1C52E2ED8((uint64_t)v628, &v651);
          v66 = v621;
          if (*((_QWORD *)&v652 + 1) != -8192 && *((_QWORD *)&v652 + 1) != -4096 && *((_QWORD *)&v652 + 1))
          {
            v67 = *((_QWORD *)&v651 + 1) & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)(*((_QWORD *)&v651 + 1) & 0xFFFFFFFFFFFFFFF8) = v652;
            if ((_QWORD)v652)
            {
              *(_QWORD *)v652 = *(_QWORD *)v652 & 7 | v67;
            }
            else
            {
              v68 = *((_QWORD *)&v652 + 1);
              v69 = (int32x2_t *)****((_QWORD ****)&v652 + 1);
              v70 = (unint64_t)v69[303];
              if (v70 <= v67)
              {
                v71 = v69[305].u32[0];
                if (v70 + 16 * v71 > v67)
                {
                  v72 = v71 - 1;
                  LODWORD(v73) = v72 & ((DWORD2(v652) >> 4) ^ (DWORD2(v652) >> 9));
                  v74 = (uint64_t *)(v70 + 16 * v73);
                  v75 = *v74;
                  if (*((_QWORD *)&v652 + 1) == *v74)
                  {
LABEL_82:
                    *v74 = -8192;
                    v69[304] = vadd_s32(v69[304], (int32x2_t)0x1FFFFFFFFLL);
                    v68 = *((_QWORD *)&v652 + 1);
                  }
                  else
                  {
                    v76 = 1;
                    while (v75 != -4096)
                    {
                      v77 = v73 + v76++;
                      v73 = v77 & v72;
                      v75 = *(_QWORD *)(v70 + 16 * v73);
                      if (*((_QWORD *)&v652 + 1) == v75)
                      {
                        v74 = (uint64_t *)(v70 + 16 * v73);
                        goto LABEL_82;
                      }
                    }
                  }
                  *(_BYTE *)(v68 + 17) &= ~1u;
                }
              }
            }
          }
          v78 = (llvm::BasicBlock *)v65[7];
          if (v78 != v621)
          {
            if (v78 && v78 != (llvm::BasicBlock *)-8192 && v78 != (llvm::BasicBlock *)-4096)
            {
              v500 = v65[5] & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v500 = v65[6];
              v501 = (unint64_t *)v65[6];
              if (v501)
              {
                *v501 = *v501 & 7 | v500;
              }
              else
              {
                v502 = v65[7];
                v503 = ***(int32x2_t ****)v502;
                v504 = (unint64_t)v503[303];
                if (v504 <= v500)
                {
                  v505 = v503[305].u32[0];
                  if (v504 + 16 * v505 > v500)
                  {
                    v506 = v505 - 1;
                    LODWORD(v507) = v506 & ((v502 >> 4) ^ (v502 >> 9));
                    v508 = (uint64_t *)(v504 + 16 * v507);
                    v509 = *v508;
                    if (v502 == *v508)
                    {
LABEL_690:
                      *v508 = -8192;
                      v503[304] = vadd_s32(v503[304], (int32x2_t)0x1FFFFFFFFLL);
                      v502 = v65[7];
                    }
                    else
                    {
                      v510 = 1;
                      while (v509 != -4096)
                      {
                        v511 = v507 + v510++;
                        v507 = v511 & v506;
                        v509 = *(_QWORD *)(v504 + 16 * v507);
                        if (v502 == v509)
                        {
                          v508 = (uint64_t *)(v504 + 16 * v507);
                          goto LABEL_690;
                        }
                      }
                    }
                    *(_BYTE *)(v502 + 17) &= ~1u;
                  }
                }
              }
            }
            v65[7] = v621;
            if (v621 != (llvm::BasicBlock *)-8192 && v621 != (llvm::BasicBlock *)-4096 && v621)
              llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v65 + 5));
          }
          llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)v603, v621);
          v79 = *v603;
          *((_QWORD *)v621 + 3) = *v603;
          *((_QWORD *)v621 + 4) = v603;
          *(_QWORD *)(v79 + 8) = (char *)v621 + 24;
          *v603 = (uint64_t)v621 + 24;
          if (a3)
            llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::addBasicBlockToLoop((_QWORD *)a3, (uint64_t)v621, *(_QWORD *)(v23 + 32));
          v80 = v54 + 88 * v604;
          v83 = *(_QWORD **)(v80 + 40);
          v82 = v80 + 40;
          v81 = v83;
          v84 = v83[1];
          v619 = *v83;
          v85 = *(unsigned int *)(v82 + 8);
          if ((_DWORD)v85 != 1)
          {
            memmove(v81, v81 + 2, 16 * v85 - 18);
            LODWORD(v85) = *(_DWORD *)(v82 + 8);
          }
          *(_DWORD *)(v82 + 8) = v85 - 1;
          *(_QWORD *)v49 = v621;
          v86 = *(unsigned int *)(v49 + 48);
          if (v86 >= *(unsigned int *)(v49 + 52))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v49 + 40, v49 + 56, v86 + 1, 16);
            v86 = *(unsigned int *)(v49 + 48);
          }
          v87 = (_QWORD *)(*(_QWORD *)(v49 + 40) + 16 * v86);
          *v87 = v619;
          v87[1] = v84;
          ++*(_DWORD *)(v49 + 48);
          v88 = *(_QWORD *)(v619 + 40);
          if (v88 == v619 + 40)
          {
            v90 = 0;
          }
          else
          {
            if (v88)
              v89 = v88 - 24;
            else
              v89 = 0;
            if (*(unsigned __int8 *)(v89 + 16) - 29 >= 0xB)
              v90 = 0;
            else
              v90 = v89;
          }
          v91 = *(unsigned __int8 *)(v90 + 16);
          if (v91 != 30)
            __asm { BR              X9 }
          if ((*(_DWORD *)(v90 + 20) & 0x7FFFFFF) == 3)
            v92 = 2;
          else
            v92 = 1;
          for (i = 0; i != v92; ++i)
          {
            result = llvm::Instruction::getSuccessor((llvm::Instruction *)v90, i);
            if ((const llvm::BasicBlock *)result == *v55)
              result = llvm::Instruction::setSuccessor((llvm::Instruction *)v90, i, v621);
          }
          v95 = v611;
          v96 = (_QWORD *)*v611;
          if ((_QWORD *)*v611 == v611)
            goto LABEL_577;
          if (v96)
            v97 = (llvm::Instruction *)(v96 - 3);
          else
            v97 = 0;
          v98 = *((unsigned __int8 *)v97 + 16);
          if ((v98 - 29) >= 0xB)
            v99 = 0;
          else
            v99 = v97;
          v607 = v99;
          v100 = v609;
          if (v98 != 30)
          {
            v101 = 2;
            switch(*((_BYTE *)v97 + 16))
            {
              case 0x1E:
LABEL_817:
                __break(1u);
                return result;
              case 0x1F:
                v101 = (*((_DWORD *)v97 + 5) >> 1) & 0x3FFFFFF;
                goto LABEL_694;
              case 0x20:
              case 0x26:
                v101 = (*((_DWORD *)v97 + 5) & 0x7FFFFFF) - 1;
                goto LABEL_694;
              case 0x21:
                goto LABEL_124;
              case 0x24:
                v101 = *((_WORD *)v97 + 9) & 1;
                goto LABEL_694;
              case 0x25:
                v101 = 1;
                goto LABEL_124;
              case 0x27:
                v101 = *((_DWORD *)v97 + 20) + 1;
LABEL_694:
                if (!v101)
                  goto LABEL_577;
                goto LABEL_124;
              default:
                goto LABEL_577;
            }
          }
          if ((*((_DWORD *)v97 + 5) & 0x7FFFFFF) == 3)
            v101 = 2;
          else
            v101 = 1;
LABEL_124:
          v102 = 0;
          v103 = 0;
          v605 = v101;
          do
          {
            v613 = v102;
            v616 = v103;
            v104 = llvm::Instruction::getSuccessor(v607, v103);
            v105 = v104;
            v106 = *(uint64_t **)(v23 + 32);
            v107 = *((_DWORD *)v106 + 4);
            if (v107)
            {
              v108 = *v106;
              v109 = v107 - 1;
              v110 = ((v104 >> 4) ^ (v104 >> 9)) & (v107 - 1);
              v111 = *(_QWORD *)(v108 + 16 * v110);
              if (v104 == v111)
              {
LABEL_130:
                v114 = *(_QWORD ***)(v108 + 16 * v110 + 8);
                if (v114 && *v114[4] == v104)
                {
                  UniqueExitBlock = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getUniqueExitBlock(v114);
                  *(_QWORD *)&v651 = &v652;
                  *((_QWORD *)&v651 + 1) = 0x1000000000;
                  v648 = (const llvm::BasicBlock *)v650;
                  v649 = 0x1000000000;
                  v145 = v114[4];
                  v146 = (char *)v114[5] - v145;
                  if ((v146 >> 3) + 1 < 0x11)
                  {
                    v148 = 0;
                    v147 = &v652;
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v651, (uint64_t)&v652, (v146 >> 3) + 1, 8);
                    v147 = (__int128 *)v651;
                    v148 = DWORD2(v651);
                    v145 = v114[4];
                    v146 = (char *)v114[5] - v145;
                  }
                  sub_1C4ECC4B8((unsigned int *)&v651, (uint64_t)v147 + 8 * v148, v145, &v145[v146]);
                  v149 = DWORD2(v651);
                  if (DWORD2(v651) >= (unint64_t)HIDWORD(v651))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v651, (uint64_t)&v652, DWORD2(v651) + 1, 8);
                    v149 = DWORD2(v651);
                  }
                  *(_QWORD *)(v651 + 8 * v149) = UniqueExitBlock;
                  v150 = (DWORD2(v651) + 1);
                  DWORD2(v651) = v150;
                  if (HIDWORD(v649) < v150)
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v648, (uint64_t)v650, v150, 8);
                    LODWORD(v150) = DWORD2(v651);
                  }
                  if ((_DWORD)v150)
                  {
                    v151 = (uint64_t ****)v651;
                    v152 = (uint64_t ****)(v651 + 8 * v150);
                    do
                    {
                      v153 = *v151;
                      v643 = ".duploop";
                      LOWORD(v647) = 259;
                      v154 = llvm::CloneBasicBlock(v153, (uint64_t)v628, (uint64_t)&v643, v100, 0, 0);
                      *(_QWORD *)sub_1C55CCA98(v23) = v154;
                      v155 = v649;
                      if (v649 >= (unint64_t)HIDWORD(v649))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v648, (uint64_t)v650, v649 + 1, 8);
                        v155 = v649;
                      }
                      *((_QWORD *)v648 + v155) = v154;
                      LODWORD(v649) = v649 + 1;
                      v156 = *v151;
                      v644 = 2;
                      v645 = 0;
                      v646 = (int32x2_t ****)v156;
                      if (v156 != (uint64_t ***)-8192 && v156 != (uint64_t ***)-4096 && v156)
                        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v644);
                      v643 = (char *)&unk_1E814DA10;
                      v647 = v628;
                      v157 = sub_1C52E2ED8((uint64_t)v628, &v643);
                      if (v646 != (int32x2_t ****)-8192 && v646 != (int32x2_t ****)-4096 && v646)
                      {
                        v158 = v644 & 0xFFFFFFFFFFFFFFF8;
                        *(_QWORD *)(v644 & 0xFFFFFFFFFFFFFFF8) = v645;
                        if (v645)
                        {
                          *v645 = *v645 & 7 | v158;
                        }
                        else
                        {
                          v159 = v646;
                          v160 = ***v646;
                          v161 = (unint64_t)v160[303];
                          if (v161 <= v158)
                          {
                            v162 = v160[305].u32[0];
                            if (v161 + 16 * v162 > v158)
                            {
                              v163 = v162 - 1;
                              LODWORD(v164) = v163 & ((v646 >> 4) ^ (v646 >> 9));
                              v165 = (int32x2_t *****)(v161 + 16 * v164);
                              v166 = *v165;
                              if (v646 == *v165)
                              {
LABEL_211:
                                *v165 = (int32x2_t ****)-8192;
                                v160[304] = vadd_s32(v160[304], (int32x2_t)0x1FFFFFFFFLL);
                                v159 = v646;
                              }
                              else
                              {
                                v167 = 1;
                                while (v166 != (int32x2_t ****)-4096)
                                {
                                  v168 = v164 + v167++;
                                  v164 = v168 & v163;
                                  v166 = *(int32x2_t *****)(v161 + 16 * v164);
                                  if (v646 == v166)
                                  {
                                    v165 = (int32x2_t *****)(v161 + 16 * v164);
                                    goto LABEL_211;
                                  }
                                }
                              }
                              *((_BYTE *)v159 + 17) &= ~1u;
                            }
                          }
                        }
                      }
                      v169 = v157[7];
                      if (v169 != v154)
                      {
                        if (v169 && v169 != -8192 && v169 != -4096)
                        {
                          v170 = v157[5] & 0xFFFFFFFFFFFFFFF8;
                          *(_QWORD *)v170 = v157[6];
                          v171 = (unint64_t *)v157[6];
                          if (v171)
                          {
                            *v171 = *v171 & 7 | v170;
                          }
                          else
                          {
                            v172 = v157[7];
                            v173 = ***(int32x2_t ****)v172;
                            v174 = (unint64_t)v173[303];
                            if (v174 <= v170)
                            {
                              v175 = v173[305].u32[0];
                              if (v174 + 16 * v175 > v170)
                              {
                                v176 = v175 - 1;
                                LODWORD(v177) = v176 & ((v172 >> 4) ^ (v172 >> 9));
                                v178 = (uint64_t *)(v174 + 16 * v177);
                                v179 = *v178;
                                if (v172 == *v178)
                                {
LABEL_232:
                                  *v178 = -8192;
                                  v173[304] = vadd_s32(v173[304], (int32x2_t)0x1FFFFFFFFLL);
                                  v172 = v157[7];
                                }
                                else
                                {
                                  v180 = 1;
                                  while (v179 != -4096)
                                  {
                                    v181 = v177 + v180++;
                                    v177 = v181 & v176;
                                    v179 = *(_QWORD *)(v174 + 16 * v177);
                                    if (v172 == v179)
                                    {
                                      v178 = (uint64_t *)(v174 + 16 * v177);
                                      goto LABEL_232;
                                    }
                                  }
                                }
                                *(_BYTE *)(v172 + 17) &= ~1u;
                              }
                            }
                          }
                        }
                        v157[7] = v154;
                        if (v154 != -8192 && v154 != -4096 && v154)
                          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v157 + 5));
                      }
                      ++v151;
                    }
                    while (v151 != v152);
                  }
                  v182 = (uint64_t *)(*v114[4] + 24);
                  v183 = (uint64_t *)(*(_QWORD *)v648 + 24);
                  if (v183 != v603 && v182 != v603)
                  {
                    v185 = *v603;
                    v186 = *v183;
                    *(_QWORD *)(v186 + 8) = v603;
                    *v603 = v186;
                    v187 = *v182;
                    *(_QWORD *)(v185 + 8) = v182;
                    *v183 = v187;
                    *(_QWORD *)(v187 + 8) = v183;
                    *v182 = v185;
                  }
                  v636 = 0;
                  v636 = sub_1C55CCBF8(v23, v114, *v114, (uint64_t)v628);
                  v188 = *v114;
                  if (*v114)
                  {
                    LoopPredecessor = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor((uint64_t)v114);
                    if (LoopPredecessor)
                    {
                      v191 = *(_QWORD *)(LoopPredecessor + 40);
                      result = LoopPredecessor + 40;
                      v190 = v191;
                      if (v191 != result)
                      {
                        if (v190)
                          v192 = v190 - 24;
                        else
                          v192 = 0;
                        if (*(_BYTE *)(v192 + 16) != 30)
                        {
                          switch(*(_BYTE *)(v192 + 16))
                          {
                            case 0x1E:
                              goto LABEL_817;
                            case 0x1F:
                              v196 = (*(_DWORD *)(v192 + 20) >> 1) & 0x3FFFFFF;
                              goto LABEL_258;
                            case 0x20:
                              v196 = (*(_DWORD *)(v192 + 20) & 0x7FFFFFF) - 1;
                              goto LABEL_258;
                            case 0x27:
                              v196 = *(_DWORD *)(v192 + 80) + 1;
LABEL_258:
                              if (v196 != 1)
                                goto LABEL_265;
                              goto LABEL_248;
                            default:
                              goto LABEL_265;
                          }
                        }
                        if ((*(_DWORD *)(v192 + 20) & 0x7FFFFFF) != 3)
                        {
LABEL_248:
                          result = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor(v636);
                          if (!result)
                            goto LABEL_255;
                          v193 = *(_QWORD *)(result + 40);
                          if (v193 == result + 40)
                            goto LABEL_255;
                          if (v193)
                            v194 = v193 - 24;
                          else
                            v194 = 0;
                          if (*(_BYTE *)(v194 + 16) != 30)
                          {
                            v195 = 0;
                            switch(*(_BYTE *)(v194 + 16))
                            {
                              case 0x1D:
                              case 0x21:
                              case 0x22:
                              case 0x23:
                              case 0x24:
                              case 0x25:
                              case 0x26:
                                goto LABEL_264;
                              case 0x1E:
                                goto LABEL_817;
                              case 0x1F:
                                v197 = (*(_DWORD *)(v194 + 20) >> 1) & 0x3FFFFFF;
                                goto LABEL_262;
                              case 0x20:
                                v197 = (*(_DWORD *)(v194 + 20) & 0x7FFFFFF) - 1;
                                goto LABEL_262;
                              case 0x27:
                                v197 = *(_DWORD *)(v194 + 80) + 1;
LABEL_262:
                                if (v197 == 1)
                                  goto LABEL_263;
                                goto LABEL_255;
                              default:
                                goto LABEL_255;
                            }
                          }
                          if ((*(_DWORD *)(v194 + 20) & 0x7FFFFFF) == 3)
LABEL_255:
                            v195 = 0;
                          else
LABEL_263:
                            v195 = result;
LABEL_264:
                          llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::addBasicBlockToLoop(v188, v195, *(_QWORD *)(v23 + 32));
                        }
                      }
                    }
                  }
LABEL_265:
                  v644 = 2;
                  v645 = 0;
                  v646 = (int32x2_t ****)UniqueExitBlock;
                  if (UniqueExitBlock != -8192 && UniqueExitBlock != -4096 && UniqueExitBlock)
                    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v644);
                  v643 = (char *)&unk_1E814DA10;
                  v647 = v628;
                  v198 = sub_1C52E2ED8((uint64_t)v628, &v643);
                  if (v646 != (int32x2_t ****)-8192 && v646 != (int32x2_t ****)-4096 && v646)
                  {
                    v199 = v644 & 0xFFFFFFFFFFFFFFF8;
                    *(_QWORD *)(v644 & 0xFFFFFFFFFFFFFFF8) = v645;
                    if (v645)
                    {
                      *v645 = *v645 & 7 | v199;
                    }
                    else
                    {
                      v200 = v646;
                      v201 = ***v646;
                      v202 = (unint64_t)v201[303];
                      if (v202 <= v199)
                      {
                        v203 = v201[305].u32[0];
                        if (v202 + 16 * v203 > v199)
                        {
                          v204 = v203 - 1;
                          LODWORD(v205) = v204 & ((v646 >> 4) ^ (v646 >> 9));
                          v206 = (int32x2_t *****)(v202 + 16 * v205);
                          v207 = *v206;
                          if (v646 == *v206)
                          {
LABEL_280:
                            *v206 = (int32x2_t ****)-8192;
                            v201[304] = vadd_s32(v201[304], (int32x2_t)0x1FFFFFFFFLL);
                            v200 = v646;
                          }
                          else
                          {
                            v208 = 1;
                            while (v207 != (int32x2_t ****)-4096)
                            {
                              v209 = v205 + v208++;
                              v205 = v209 & v204;
                              v207 = *(int32x2_t *****)(v202 + 16 * v205);
                              if (v646 == v207)
                              {
                                v206 = (int32x2_t *****)(v202 + 16 * v205);
                                goto LABEL_280;
                              }
                            }
                          }
                          *((_BYTE *)v200 + 17) &= ~1u;
                        }
                      }
                    }
                  }
                  v210 = v198[7];
                  v211 = *(_QWORD *)(v23 + 32);
                  v212 = *(_DWORD *)(v211 + 16);
                  if (v212)
                  {
                    v213 = *(_QWORD *)v211;
                    v214 = v212 - 1;
                    v215 = (v212 - 1) & ((UniqueExitBlock >> 4) ^ (UniqueExitBlock >> 9));
                    v216 = *(_QWORD *)(*(_QWORD *)v211 + 16 * v215);
                    if (UniqueExitBlock == v216)
                    {
LABEL_288:
                      v219 = *(_QWORD **)(v213 + 16 * v215 + 8);
                      if (v219)
                        llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::addBasicBlockToLoop(v219, v210, v211);
                    }
                    else
                    {
                      v217 = 1;
                      while (v216 != -4096)
                      {
                        v218 = v215 + v217++;
                        v215 = v218 & v214;
                        v216 = *(_QWORD *)(v213 + 16 * v215);
                        if (UniqueExitBlock == v216)
                          goto LABEL_288;
                      }
                    }
                  }
                  v220 = *(_QWORD *)(v210 + 40);
                  if (v220 == v210 + 40)
                  {
                    v222 = 0;
                  }
                  else
                  {
                    if (v220)
                      v221 = (unsigned __int8 *)(v220 - 24);
                    else
                      v221 = 0;
                    if (v221[16] - 29 >= 0xB)
                      v222 = 0;
                    else
                      v222 = (llvm::Instruction *)v221;
                  }
                  v223 = llvm::Instruction::getSuccessor(v222, 0);
                  v224 = v223;
                  v225 = *(uint64_t **)(v23 + 32);
                  v226 = *((_DWORD *)v225 + 4);
                  if (v226)
                  {
                    v227 = *v225;
                    v228 = v226 - 1;
                    v229 = ((v223 >> 4) ^ (v223 >> 9)) & (v226 - 1);
                    v230 = *(_QWORD *)(v227 + 16 * v229);
                    if (v223 != v230)
                    {
                      v231 = 1;
                      while (v230 != -4096)
                      {
                        v232 = v229 + v231++;
                        v229 = v232 & v228;
                        v230 = *(_QWORD *)(v227 + 16 * v229);
                        if (v223 == v230)
                          goto LABEL_303;
                      }
                      goto LABEL_305;
                    }
LABEL_303:
                    v233 = *(_QWORD *)(v227 + 16 * v229 + 8);
                    if (!v233 || **(_QWORD **)(v233 + 32) != v224)
                      goto LABEL_305;
                    v614 = *(llvm **)(v227 + 16 * v229 + 8);
                    v355 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor(v233);
                    if (v355)
                    {
                      v357 = *(_QWORD *)(v355 + 40);
                      result = v355 + 40;
                      v356 = v357;
                      if (v357 != result)
                      {
                        if (v356)
                          v358 = v356 - 24;
                        else
                          v358 = 0;
                        if (*(_BYTE *)(v358 + 16) != 30)
                        {
                          switch(*(_BYTE *)(v358 + 16))
                          {
                            case 0x1E:
                              goto LABEL_817;
                            case 0x1F:
                              v366 = (*(_DWORD *)(v358 + 20) >> 1) & 0x3FFFFFF;
                              goto LABEL_489;
                            case 0x20:
                              v366 = (*(_DWORD *)(v358 + 20) & 0x7FFFFFF) - 1;
                              goto LABEL_489;
                            case 0x27:
                              v366 = *(_DWORD *)(v358 + 80) + 1;
LABEL_489:
                              if (v366 != 1)
                                goto LABEL_306;
                              goto LABEL_305;
                            default:
                              goto LABEL_306;
                          }
                        }
                        if ((*(_DWORD *)(v358 + 20) & 0x7FFFFFF) != 3)
                          goto LABEL_305;
                      }
                    }
                  }
                  else
                  {
LABEL_305:
                    v614 = 0;
                  }
LABEL_306:
                  for (j = *(_QWORD *)(v224 + 48); ; j = *(_QWORD *)(j + 8))
                  {
                    v235 = (llvm::PHINode *)(j - 24);
                    v236 = j ? j - 24 : 0;
                    if (*(_BYTE *)(v236 + 16) != 83)
                      break;
                    v237 = *(_DWORD *)(j - 4);
                    v238 = v237 & 0x7FFFFFF;
                    if ((v237 & 0x7FFFFFF) != 0)
                    {
                      v239 = 0;
                      while (1)
                      {
                        v240 = (char *)v235 - 32 * v238;
                        if ((v237 & 0x40000000) != 0)
                          v240 = *(char **)(j - 32);
                        if (*(_QWORD *)&v240[32 * *(unsigned int *)(j + 36) + 8 * v239] == UniqueExitBlock)
                          break;
                        if (v238 == ++v239)
                          goto LABEL_317;
                      }
                    }
                    else
                    {
LABEL_317:
                      LODWORD(v239) = -1;
                    }
                    if ((v237 & 0x40000000) != 0)
                      v241 = *(char **)(j - 32);
                    else
                      v241 = (char *)v235 - 32 * v238;
                    v242 = *(_QWORD *)&v241[32 * v239];
                    if (v629)
                    {
                      v243 = ((v242 >> 4) ^ (v242 >> 9)) & (v629 - 1);
                      v244 = v628[0] + (v243 << 6);
                      v245 = *(_QWORD *)(v244 + 24);
                      if (v242 == v245)
                      {
LABEL_325:
                        if (v244 != v628[0] + ((unint64_t)v629 << 6))
                          v242 = *(_QWORD *)(v244 + 56);
                      }
                      else
                      {
                        v246 = 1;
                        while (v245 != -4096)
                        {
                          v247 = v243 + v246++;
                          v243 = v247 & (v629 - 1);
                          v244 = v628[0] + (v243 << 6);
                          v245 = *(_QWORD *)(v244 + 24);
                          if (v242 == v245)
                            goto LABEL_325;
                        }
                      }
                    }
                    sub_1C477667C(v235, v242, v210);
                  }
                  if ((_DWORD)v649)
                  {
                    v248 = v648;
                    v249 = (const llvm::BasicBlock *)((char *)v648 + 8 * v649);
                    do
                    {
                      v250 = *(_QWORD *)v248 + 40;
                      for (k = *(_QWORD *)(*(_QWORD *)v248 + 48); k != v250; k = *(_QWORD *)(k + 8))
                      {
                        if (k)
                          v252 = (uint64_t ***)(k - 24);
                        else
                          v252 = 0;
                        v253 = (_QWORD *)operator new();
                        *(_DWORD *)v253 = 3;
                        v253[1] = 0;
                        *((_DWORD *)v253 + 4) = 0;
                        v253[5] = v628;
                        v253[3] = v253 + 5;
                        v253[6] = 0;
                        v253[4] = 0x200000001;
                        v253[9] = v253 + 11;
                        v253[10] = 0x400000000;
                        v253[23] = v253 + 25;
                        v253[24] = 0x100000000;
                        v253[27] = v253 + 29;
                        v253[28] = 0x1000000000;
                        *(_QWORD *)&v633 = v253;
                        v643 = (char *)v253;
                        sub_1C5FD706C((uint64_t)v253, v252);
                        sub_1C5FD3718((uint64_t *)&v643, v254);
                        llvm::ValueMapper::~ValueMapper((llvm::ValueMapper *)&v633, v255);
                      }
                      v248 = (const llvm::BasicBlock *)((char *)v248 + 8);
                    }
                    while (v248 != v249);
                  }
                  v634 = 0u;
                  v635 = 0u;
                  v633 = 0u;
                  sub_1C4EB7C64(&v633, &v636);
                  v256 = *((_QWORD *)&v635 + 1);
                  while (2)
                  {
                    if (v256)
                    {
                      v257 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)&v633 + 1)
                                                   + (((unint64_t)(v256 + v635 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                                       + 8 * ((v256 + v635 - 1) & 0x1FF));
                      v258 = *(_QWORD *)(v23 + 88);
                      v259 = *(_DWORD *)(v23 + 96);
                      if (v259)
                      {
                        v260 = (_QWORD *)(v258 + 88 * v259);
                        v261 = 88 * v259;
                        v262 = *(_QWORD **)(v23 + 88);
                        while (*v262 != **(_QWORD **)(v257 + 32))
                        {
                          v262 += 11;
                          v261 -= 88;
                          if (!v261)
                          {
                            v262 = v260;
                            break;
                          }
                        }
                      }
                      else
                      {
                        v262 = *(_QWORD **)(v23 + 88);
                      }
                      v263 = 0x2E8BA2E8BA2E8BA3 * (((uint64_t)v262 - v258) >> 3);
                      v264 = -1171354717 * (((uint64_t)v262 - v258) >> 3);
                      v265 = v258 + 88 * v264;
                      v267 = *(_QWORD *)(v265 + 24);
                      v266 = (uint64_t *)(v265 + 24);
                      if (!v267)
                      {
                        *v266 = v257;
                        *(_DWORD *)(v258 + 88 * v264 + 32) = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getNumBackEdges(v257);
                        v288 = *(_QWORD **)(v257 + 8);
                        v287 = *(_QWORD **)(v257 + 16);
                        while (v288 != v287)
                          sub_1C4EB7C64(&v633, v288++);
                      }
                      v268 = *(uint64_t **)(v257 + 32);
                      v269 = *(uint64_t **)(v257 + 40);
                      if (v269 == v268)
                      {
LABEL_364:
                        v285 = (((_QWORD)v634 - *((_QWORD *)&v633 + 1)) << 6) - 1;
                        if ((_QWORD)v634 == *((_QWORD *)&v633 + 1))
                          v285 = 0;
                        v286 = *((_QWORD *)&v635 + 1);
                        v256 = --*((_QWORD *)&v635 + 1);
                        if ((unint64_t)(v285 - (v286 + v635) + 1) >= 0x400)
                        {
                          operator delete(*(void **)(v634 - 8));
                          *(_QWORD *)&v634 = v634 - 8;
                          v256 = *((_QWORD *)&v635 + 1);
                        }
                        continue;
                      }
                      v270 = *(uint64_t **)(v23 + 32);
                      v271 = *v270;
                      v272 = *((_DWORD *)v270 + 4);
                      v273 = v272 - 1;
                      while (2)
                      {
                        v274 = *v268;
                        if (v272)
                        {
                          v275 = ((v274 >> 4) ^ (v274 >> 9)) & v273;
                          v276 = *(_QWORD *)(v271 + 16 * v275);
                          if (v274 != v276)
                          {
                            v277 = 1;
                            while (v276 != -4096)
                            {
                              v278 = v275 + v277++;
                              v275 = v278 & v273;
                              v276 = *(_QWORD *)(v271 + 16 * v275);
                              if (v274 == v276)
                                goto LABEL_353;
                            }
                            goto LABEL_354;
                          }
LABEL_353:
                          v279 = *(_QWORD *)(v271 + 16 * v275 + 8);
                        }
                        else
                        {
LABEL_354:
                          v279 = 0;
                        }
                        if (v279 == v257)
                        {
                          v280 = *(_QWORD *)(v23 + 88);
                          v281 = *(_DWORD *)(v23 + 96);
                          if (v281)
                          {
                            v282 = (_QWORD *)(v280 + 88 * v281);
                            v283 = *(_QWORD **)(v23 + 88);
                            v284 = 88 * v281;
                            while (*v283 != v274)
                            {
                              v283 += 11;
                              v284 -= 88;
                              if (!v284)
                              {
                                v283 = v282;
                                break;
                              }
                            }
                          }
                          else
                          {
                            v283 = *(_QWORD **)(v23 + 88);
                          }
                          *(_DWORD *)(v280
                                    + 0xFFFFFFE800000008 * (((unint64_t)v283 - v280) >> 3)
                                    + 12) = v263;
                        }
                        if (++v268 == v269)
                          goto LABEL_364;
                        continue;
                      }
                    }
                    break;
                  }
                  v643 = (char *)&v645;
                  v644 = 0x1000000000;
                  if (!DWORD2(v651))
                    goto LABEL_450;
                  v289 = 0;
                  v290 = (const llvm::BasicBlock **)v651;
                  v291 = (const llvm::BasicBlock **)(v651 + 8 * DWORD2(v651));
                  do
                  {
                    v292 = *v290;
                    v293 = (uint64_t)*v290 + 40;
                    for (m = *((_QWORD *)*v290 + 6); m != v293; m = *(_QWORD *)(m + 8))
                    {
                      if (m)
                        v295 = (llvm::Instruction *)(m - 24);
                      else
                        v295 = 0;
                      if (llvm::Instruction::isUsedOutsideOfBlock(v295, v292))
                      {
                        if (v289 >= HIDWORD(v644))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v643, (uint64_t)&v645, v289 + 1, 8);
                          v289 = v644;
                        }
                        *(_QWORD *)&v643[8 * v289] = v295;
                        v289 = v644 + 1;
                        LODWORD(v644) = v644 + 1;
                      }
                    }
                    ++v290;
                  }
                  while (v290 != v291);
                  if (!v289)
                  {
LABEL_450:
                    v66 = v621;
                    if (v614)
                    {
                      llvm::InsertPreheaderForLoop(v614, *(llvm::Loop **)(v23 + 40), *(llvm::DominatorTree **)(v23 + 32), 0, 0);
                      result = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor((uint64_t)v614);
                      if (!result)
                        goto LABEL_458;
                      v352 = *(_QWORD *)(result + 40);
                      if (v352 == result + 40)
                        goto LABEL_458;
                      if (v352)
                        v353 = v352 - 24;
                      else
                        v353 = 0;
                      if (*(_BYTE *)(v353 + 16) != 30)
                      {
                        v354 = 0;
                        switch(*(_BYTE *)(v353 + 16))
                        {
                          case 0x1D:
                          case 0x21:
                          case 0x22:
                          case 0x23:
                          case 0x24:
                          case 0x25:
                          case 0x26:
                            goto LABEL_471;
                          case 0x1E:
                            goto LABEL_817;
                          case 0x1F:
                            v359 = (*(_DWORD *)(v353 + 20) >> 1) & 0x3FFFFFF;
                            goto LABEL_469;
                          case 0x20:
                            v359 = (*(_DWORD *)(v353 + 20) & 0x7FFFFFF) - 1;
                            goto LABEL_469;
                          case 0x27:
                            v359 = *(_DWORD *)(v353 + 80) + 1;
LABEL_469:
                            if (v359 == 1)
                              goto LABEL_470;
                            goto LABEL_458;
                          default:
                            goto LABEL_458;
                        }
                      }
                      if ((*(_DWORD *)(v353 + 20) & 0x7FFFFFF) == 3)
LABEL_458:
                        v354 = 0;
                      else
LABEL_470:
                        v354 = result;
LABEL_471:
                      *(_QWORD *)sub_1C55CCA98(v23) = v354;
                    }
                    v95 = v611;
                    if (v643 != (char *)&v645)
                      free(v643);
                    sub_1C484143C((uint64_t)&v633);
                    if (v648 != (const llvm::BasicBlock *)v650)
                      free(v648);
                    if ((__int128 *)v651 != &v652)
                      free((void *)v651);
                    v360 = *v611;
                    v100 = v609;
                    if ((_QWORD *)*v611 == v611)
                    {
                      v362 = 0;
                    }
                    else
                    {
                      if (v360)
                        v361 = v360 - 24;
                      else
                        v361 = 0;
                      if (*(unsigned __int8 *)(v361 + 16) - 29 >= 0xB)
                        v362 = 0;
                      else
                        v362 = (uint64_t ***)v361;
                    }
                    v55 = (const llvm::BasicBlock **)(*(_QWORD *)(v23 + 88) + 88 * v604);
                    v363 = (_QWORD *)operator new();
                    *(_DWORD *)v363 = 2;
                    v363[1] = 0;
                    *((_DWORD *)v363 + 4) = 0;
                    v363[5] = v628;
                    v363[3] = v363 + 5;
                    v363[6] = 0;
                    v363[4] = 0x200000001;
                    v363[9] = v363 + 11;
                    v363[10] = 0x400000000;
                    v363[23] = v363 + 25;
                    v363[24] = 0x100000000;
                    v363[27] = v363 + 29;
                    v363[28] = 0x1000000000;
                    v648 = (const llvm::BasicBlock *)v363;
                    *(_QWORD *)&v651 = v363;
                    sub_1C5FD706C((uint64_t)v363, v362);
                    sub_1C5FD3718((uint64_t *)&v651, v364);
                    llvm::ValueMapper::~ValueMapper((llvm::ValueMapper *)&v648, v365);
                    v102 = 1;
                    v133 = v605;
                    goto LABEL_173;
                  }
                  v296 = v643;
                  v297 = &v643[8 * v289];
                  while (2)
                  {
                    v298 = *(_QWORD *)v296;
                    v299 = *(void **)(*(_QWORD *)v296 + 40);
                    memset(v632, 0, sizeof(v632));
                    v300 = *(llvm::MDNode **)v298;
                    if ((*(_BYTE *)(v298 + 23) & 0x10) != 0)
                    {
                      v301 = **(_QWORD **)v300;
                      v302 = *(_QWORD *)(v301 + 152);
                      v303 = *(unsigned int *)(v301 + 168);
                      if (!(_DWORD)v303)
                        goto LABEL_393;
                      LODWORD(v304) = (v303 - 1) & ((v298 >> 4) ^ (v298 >> 9));
                      v305 = (uint64_t *)(v302 + 16 * v304);
                      v306 = *v305;
                      if (*v305 != v298)
                      {
                        v307 = 1;
                        while (v306 != -4096)
                        {
                          v308 = v304 + v307++;
                          v304 = v308 & (v303 - 1);
                          v306 = *(_QWORD *)(v302 + 16 * v304);
                          if (v306 == v298)
                          {
                            v305 = (uint64_t *)(v302 + 16 * v304);
                            goto LABEL_394;
                          }
                        }
LABEL_393:
                        v305 = (uint64_t *)(v302 + 16 * v303);
                      }
LABEL_394:
                      v309 = (_QWORD *)v305[1];
                      v312 = *v309;
                      v310 = (char *)(v309 + 2);
                      v311 = v312;
                    }
                    else
                    {
                      v311 = 0;
                      v310 = &byte_1C871356D;
                    }
                    llvm::SSAUpdater::Initialize((uint64_t)v632, (uint64_t)v300, v310, v311);
                    v638 = v299;
                    v313 = *((_DWORD *)v632[0] + 4);
                    if (!v313)
                    {
                      v322 = 0;
                      goto LABEL_409;
                    }
                    v314 = v313 - 1;
                    v315 = (v313 - 1) & ((v299 >> 4) ^ (v299 >> 9));
                    v316 = (_QWORD *)(*(_QWORD *)v632[0] + 16 * v315);
                    v317 = (void *)*v316;
                    if ((void *)*v316 != v299)
                    {
                      v318 = 0;
                      v319 = 1;
                      while (v317 != (void *)-4096)
                      {
                        if (v318)
                          v320 = 0;
                        else
                          v320 = v317 == (void *)-8192;
                        if (v320)
                          v318 = v316;
                        v321 = v315 + v319++;
                        v315 = v321 & v314;
                        v316 = (_QWORD *)(*(_QWORD *)v632[0] + 16 * (v321 & v314));
                        v317 = (void *)*v316;
                        if ((void *)*v316 == v299)
                          goto LABEL_410;
                      }
                      if (v318)
                        v322 = v318;
                      else
                        v322 = v316;
LABEL_409:
                      v316 = sub_1C4ECCA58((uint64_t)v632[0], (uint64_t)&v638, (uint64_t *)&v638, v322);
                      *v316 = v638;
                      v316[1] = 0;
                    }
LABEL_410:
                    v316[1] = v298;
                    v639 = 2;
                    v640 = 0;
                    v641 = (int32x2_t ****)v299;
                    if (v299 != (void *)-8192 && v299 != (void *)-4096 && v299)
                      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v639);
                    v638 = &unk_1E814DA10;
                    v642 = v628;
                    v323 = sub_1C52E2ED8((uint64_t)v628, &v638);
                    if (v641 != (int32x2_t ****)-8192 && v641 != (int32x2_t ****)-4096 && v641)
                    {
                      v324 = v639 & 0xFFFFFFFFFFFFFFF8;
                      *(_QWORD *)(v639 & 0xFFFFFFFFFFFFFFF8) = v640;
                      if (v640)
                      {
                        *v640 = *v640 & 7 | v324;
                      }
                      else
                      {
                        v325 = v641;
                        v326 = ***v641;
                        v327 = (unint64_t)v326[303];
                        if (v327 <= v324)
                        {
                          v328 = v326[305].u32[0];
                          if (v327 + 16 * v328 > v324)
                          {
                            v329 = v328 - 1;
                            LODWORD(v330) = v329 & ((v641 >> 4) ^ (v641 >> 9));
                            v331 = (int32x2_t *****)(v327 + 16 * v330);
                            v332 = *v331;
                            if (v641 == *v331)
                            {
LABEL_425:
                              *v331 = (int32x2_t ****)-8192;
                              v326[304] = vadd_s32(v326[304], (int32x2_t)0x1FFFFFFFFLL);
                              v325 = v641;
                            }
                            else
                            {
                              v333 = 1;
                              while (v332 != (int32x2_t ****)-4096)
                              {
                                v334 = v330 + v333++;
                                v330 = v334 & v329;
                                v332 = *(int32x2_t *****)(v327 + 16 * v330);
                                if (v641 == v332)
                                {
                                  v331 = (int32x2_t *****)(v327 + 16 * v330);
                                  goto LABEL_425;
                                }
                              }
                            }
                            *((_BYTE *)v325 + 17) &= ~1u;
                          }
                        }
                      }
                    }
                    v335 = (void *)v323[7];
                    v336 = operator new();
                    *(_DWORD *)v336 = 0;
                    *(_QWORD *)(v336 + 8) = 0;
                    *(_DWORD *)(v336 + 16) = 0;
                    *(_QWORD *)(v336 + 40) = v628;
                    *(_QWORD *)(v336 + 24) = v336 + 40;
                    *(_QWORD *)(v336 + 48) = 0;
                    *(_QWORD *)(v336 + 32) = 0x200000001;
                    *(_QWORD *)(v336 + 72) = v336 + 88;
                    *(_QWORD *)(v336 + 80) = 0x400000000;
                    *(_QWORD *)(v336 + 184) = v336 + 200;
                    *(_QWORD *)(v336 + 192) = 0x100000000;
                    *(_QWORD *)(v336 + 216) = v336 + 232;
                    *(_QWORD *)(v336 + 224) = 0x1000000000;
                    v637 = v336;
                    v638 = (void *)v336;
                    v337 = sub_1C5FD3BE0(v336, (llvm::MDNode **)v298);
                    sub_1C5FD3718((uint64_t *)&v638, v338);
                    llvm::ValueMapper::~ValueMapper((llvm::ValueMapper *)&v637, v339);
                    v638 = v335;
                    v340 = *((_DWORD *)v632[0] + 4);
                    if (v340)
                    {
                      v341 = v340 - 1;
                      v342 = (v340 - 1) & ((v335 >> 4) ^ (v335 >> 9));
                      v343 = (_QWORD *)(*(_QWORD *)v632[0] + 16 * v342);
                      v344 = (void *)*v343;
                      if ((void *)*v343 != v335)
                      {
                        v345 = 0;
                        v346 = 1;
                        while (v344 != (void *)-4096)
                        {
                          if (v345)
                            v347 = 0;
                          else
                            v347 = v344 == (void *)-8192;
                          if (v347)
                            v345 = v343;
                          v348 = v342 + v346++;
                          v342 = v348 & v341;
                          v343 = (_QWORD *)(*(_QWORD *)v632[0] + 16 * (v348 & v341));
                          v344 = (void *)*v343;
                          if ((void *)*v343 == v335)
                            goto LABEL_443;
                        }
                        if (v345)
                          v349 = v345;
                        else
                          v349 = v343;
LABEL_442:
                        v343 = sub_1C4ECCA58((uint64_t)v632[0], (uint64_t)&v638, (uint64_t *)&v638, v349);
                        *v343 = v638;
                        v343[1] = 0;
                      }
LABEL_443:
                      v343[1] = v337;
                      v350 = *(llvm::Use **)(v298 + 8);
                      if (v350)
                      {
                        do
                        {
                          v351 = (llvm::Use *)*((_QWORD *)v350 + 1);
                          llvm::SSAUpdater::RewriteUseAfterInsertions((llvm::SSAUpdater *)v632, v350);
                          v350 = v351;
                        }
                        while (v351);
                      }
                      llvm::SSAUpdater::~SSAUpdater(v632);
                      v296 += 8;
                      if (v296 == v297)
                        goto LABEL_450;
                      continue;
                    }
                    break;
                  }
                  v349 = 0;
                  goto LABEL_442;
                }
              }
              else
              {
                v112 = 1;
                while (v111 != -4096)
                {
                  v113 = v110 + v112++;
                  v110 = v113 & v109;
                  v111 = *(_QWORD *)(v108 + 16 * v110);
                  if (v104 == v111)
                    goto LABEL_130;
                }
              }
            }
            v115 = v104 + 40;
            for (n = *(_QWORD *)(v104 + 48); n != v115; n = *(_QWORD *)(n + 8))
            {
              v117 = n - 24;
              if (!n)
                v117 = 0;
              v118 = *(unsigned __int8 *)(v117 + 16);
              v119 = v118 == 83 ? (_DWORD *)v117 : 0;
              if (!n || v118 != 83)
                break;
              v120 = v119[5] & 0x7FFFFFF;
              if ((_DWORD)v120)
              {
                v121 = 0;
                v122 = 0;
                v123 = 8 * v120;
                do
                {
                  v124 = v119[5];
                  if ((v124 & 0x40000000) != 0)
                    v125 = (_DWORD *)*((_QWORD *)v119 - 1);
                  else
                    v125 = &v119[-8 * (v124 & 0x7FFFFFF)];
                  v126 = *(const llvm::BasicBlock **)&v125[8 * v119[15] + v122 / 4];
                  if (v126 == *v55)
                  {
                    v127 = *(_QWORD *)&v125[v121];
                    if (v127)
                      v128 = *(unsigned __int8 *)(v127 + 16) >= 0x1Cu;
                    else
                      v128 = 0;
                    if (v128 && *(const llvm::BasicBlock **)(v127 + 40) == v126)
                    {
                      v129 = (_QWORD *)operator new();
                      *(_DWORD *)v129 = 0;
                      v129[1] = 0;
                      *((_DWORD *)v129 + 4) = 0;
                      v129[5] = v628;
                      v129[3] = v129 + 5;
                      v129[6] = 0;
                      v129[4] = 0x200000001;
                      v129[9] = v129 + 11;
                      v129[10] = 0x400000000;
                      v129[23] = v129 + 25;
                      v129[24] = 0x100000000;
                      v129[27] = v129 + 29;
                      v129[28] = 0x1000000000;
                      v648 = (const llvm::BasicBlock *)v129;
                      *(_QWORD *)&v651 = v129;
                      v127 = sub_1C5FD3BE0((uint64_t)v129, (llvm::MDNode **)v127);
                      sub_1C5FD3718((uint64_t *)&v651, v130);
                      llvm::ValueMapper::~ValueMapper((llvm::ValueMapper *)&v648, v131);
                    }
                    v132 = v127;
                    v66 = v621;
                    sub_1C477667C((llvm::PHINode *)v119, v132, (uint64_t)v621);
                  }
                  v122 += 8;
                  v121 += 8;
                }
                while (v123 != v122);
              }
            }
            v133 = v605;
            if (v613)
            {
              v102 = 1;
              v100 = v609;
              v23 = v610;
              v95 = v611;
            }
            else
            {
              v134 = *(_QWORD *)(v105 + 8);
              v100 = v609;
              if (v134)
              {
                v23 = v610;
                v95 = v611;
                while (1)
                {
                  v135 = *(_QWORD *)(v134 + 24);
                  v136 = *(unsigned __int8 *)(v135 + 16);
                  v137 = v135 && v136 >= 0x1C;
                  v138 = !v137 || v136 - 29 > 0xA;
                  if (!v138)
                    break;
                  v134 = *(_QWORD *)(v134 + 8);
                  if (!v134)
                  {
                    v139 = 0;
                    goto LABEL_172;
                  }
                }
                v139 = 0;
LABEL_175:
                ++v139;
                while (1)
                {
                  v134 = *(_QWORD *)(v134 + 8);
                  if (!v134)
                    break;
                  v140 = *(_QWORD *)(v134 + 24);
                  v141 = *(unsigned __int8 *)(v140 + 16);
                  if (v140)
                    v142 = v141 >= 0x1C;
                  else
                    v142 = 0;
                  if (v142 && v141 - 29 < 0xB)
                    goto LABEL_175;
                }
              }
              else
              {
                v139 = 0;
                v23 = v610;
                v95 = v611;
              }
LABEL_172:
              v102 = v139 < 3;
            }
LABEL_173:
            v103 = v616 + 1;
          }
          while (v133 != v616 + 1);
          if (!v102)
            goto LABEL_577;
          v367 = (uint64_t)*v55 + 40;
          v368 = *((_QWORD *)*v55 + 6);
          if (v368 == v367)
            goto LABEL_576;
          do
          {
            if (v368)
              v369 = v368 - 24;
            else
              v369 = 0;
            if (!llvm::Instruction::isUsedOutsideOfBlock((llvm::Instruction *)v369, *v55))
              goto LABEL_547;
            v652 = 0u;
            v653 = 0u;
            v651 = 0u;
            v370 = *(uint64_t ***)v369;
            if ((*(_BYTE *)(v369 + 23) & 0x10) != 0)
            {
              v371 = **v370;
              v372 = *(_QWORD *)(v371 + 152);
              v373 = *(unsigned int *)(v371 + 168);
              if (!(_DWORD)v373)
                goto LABEL_512;
              LODWORD(v374) = (v373 - 1) & ((v369 >> 4) ^ (v369 >> 9));
              v375 = (uint64_t *)(v372 + 16 * v374);
              v376 = *v375;
              if (*v375 != v369)
              {
                v377 = 1;
                while (v376 != -4096)
                {
                  v378 = v374 + v377++;
                  v374 = v378 & (v373 - 1);
                  v376 = *(_QWORD *)(v372 + 16 * v374);
                  if (v376 == v369)
                  {
                    v375 = (uint64_t *)(v372 + 16 * v374);
                    goto LABEL_513;
                  }
                }
LABEL_512:
                v375 = (uint64_t *)(v372 + 16 * v373);
              }
LABEL_513:
              v379 = (_QWORD *)v375[1];
              v382 = *v379;
              v380 = (char *)(v379 + 2);
              v381 = v382;
              goto LABEL_514;
            }
            v381 = 0;
            v380 = &byte_1C871356D;
LABEL_514:
            llvm::SSAUpdater::Initialize((uint64_t)&v651, (uint64_t)v370, v380, v381);
            v383 = *v55;
            v648 = *v55;
            v384 = *(_DWORD *)(v651 + 16);
            if (v384)
            {
              v385 = v384 - 1;
              v386 = (v384 - 1) & ((v383 >> 4) ^ (v383 >> 9));
              v387 = (const llvm::BasicBlock **)(*(_QWORD *)v651 + 16 * v386);
              v388 = *v387;
              if (*v387 == v383)
                goto LABEL_529;
              v389 = 0;
              v390 = 1;
              while (v388 != (const llvm::BasicBlock *)-4096)
              {
                if (v389)
                  v391 = 0;
                else
                  v391 = v388 == (const llvm::BasicBlock *)-8192;
                if (v391)
                  v389 = v387;
                v392 = v386 + v390++;
                v386 = v392 & v385;
                v387 = (const llvm::BasicBlock **)(*(_QWORD *)v651 + 16 * (v392 & v385));
                v388 = *v387;
                if (*v387 == v383)
                  goto LABEL_529;
              }
              if (v389)
                v393 = v389;
              else
                v393 = v387;
            }
            else
            {
              v393 = 0;
            }
            v387 = (const llvm::BasicBlock **)sub_1C4ECCA58(v651, (uint64_t)&v648, (uint64_t *)&v648, v393);
            *v387 = v648;
            v387[1] = 0;
LABEL_529:
            v387[1] = (const llvm::BasicBlock *)v369;
            v394 = (_QWORD *)operator new();
            *(_DWORD *)v394 = 0;
            v394[1] = 0;
            *((_DWORD *)v394 + 4) = 0;
            v394[5] = v628;
            v394[3] = v394 + 5;
            v394[6] = 0;
            v394[4] = 0x200000001;
            v394[9] = v394 + 11;
            v394[10] = 0x400000000;
            v394[23] = v394 + 25;
            v394[24] = 0x100000000;
            v394[27] = v394 + 29;
            v394[28] = 0x1000000000;
            v643 = (char *)v394;
            v648 = (const llvm::BasicBlock *)v394;
            v395 = sub_1C5FD3BE0((uint64_t)v394, (llvm::MDNode **)v369);
            sub_1C5FD3718((uint64_t *)&v648, v396);
            llvm::ValueMapper::~ValueMapper((llvm::ValueMapper *)&v643, v397);
            v648 = v621;
            v398 = *(_DWORD *)(v651 + 16);
            if (!v398)
            {
              v407 = 0;
LABEL_543:
              v401 = sub_1C4ECCA58(v651, (uint64_t)&v648, (uint64_t *)&v648, v407);
              *v401 = v648;
              v401[1] = 0;
              goto LABEL_544;
            }
            v399 = v398 - 1;
            v400 = (v398 - 1) & ((v621 >> 4) ^ (v621 >> 9));
            v401 = (_QWORD *)(*(_QWORD *)v651 + 16 * v400);
            v402 = (_QWORD *)*v401;
            if ((llvm::BasicBlock *)*v401 != v621)
            {
              v403 = 0;
              v404 = 1;
              while (v402 != (_QWORD *)-4096)
              {
                if (v403)
                  v405 = 0;
                else
                  v405 = v402 == (_QWORD *)-8192;
                if (v405)
                  v403 = v401;
                v406 = v400 + v404++;
                v400 = v406 & v399;
                v401 = (_QWORD *)(*(_QWORD *)v651 + 16 * (v406 & v399));
                v402 = (_QWORD *)*v401;
                if ((llvm::BasicBlock *)*v401 == v621)
                  goto LABEL_544;
              }
              if (v403)
                v407 = v403;
              else
                v407 = v401;
              goto LABEL_543;
            }
LABEL_544:
            v401[1] = v395;
            v408 = *(llvm::Use **)(v369 + 8);
            if (v408)
            {
              do
              {
                v409 = (llvm::Use *)*((_QWORD *)v408 + 1);
                llvm::SSAUpdater::RewriteUseAfterInsertions((llvm::SSAUpdater *)&v651, v408);
                v408 = v409;
              }
              while (v409);
            }
            llvm::SSAUpdater::~SSAUpdater((void **)&v651);
LABEL_547:
            v368 = *(_QWORD *)(v368 + 8);
          }
          while (v368 != v367);
          v95 = v611;
LABEL_576:
          v66 = v621;
LABEL_577:
          v440 = (_QWORD *)*((_QWORD *)v66 + 6);
          if (v440 != v95)
          {
            v441 = (_QWORD *)*((_QWORD *)v66 + 6);
            while (1)
            {
              v442 = v441 - 3;
              if (!v441)
                v442 = 0;
              if (*((_BYTE *)v442 + 16) != 83)
                break;
              v441 = (_QWORD *)v441[1];
              if (v441 == v95)
                goto LABEL_589;
            }
            v443 = *((unsigned __int8 *)v441 - 8) - 38;
            v138 = v443 > 0x38;
            v444 = (1 << v443) & 0x100060000000001;
            if (v138 || v444 == 0)
              v95 = v441;
            else
              v95 = (_QWORD *)v441[1];
          }
LABEL_589:
          v446 = v95;
          while (v440 != v446)
          {
            v447 = v440 - 3;
            if (!v440)
              v447 = 0;
            v448 = *((unsigned __int8 *)v447 + 16);
            if (v448 == 83)
              v449 = v447;
            else
              v449 = 0;
            if (!v440 || v448 != 83)
              break;
            v440 = (_QWORD *)v440[1];
            v450 = v449[5] & 0x7FFFFFF;
            if (v450)
            {
              v451 = 0;
              do
              {
                v452 = v451;
                while (1)
                {
                  v453 = v449[5];
                  v454 = (v453 & 0x40000000) != 0 ? (_DWORD *)*((_QWORD *)v449 - 1) : &v449[-8 * (v453 & 0x7FFFFFF)];
                  if (*(_QWORD *)&v454[8 * v449[15] + 2 * v452] == v619)
                    break;
                  llvm::PHINode::removeIncomingValue((llvm::PHINode *)v449, v452, 1);
                  if ((_DWORD)v452 == --v450)
                    goto LABEL_607;
                }
                v451 = v452 + 1;
              }
              while ((_DWORD)v452 + 1 != v450);
            }
LABEL_607:
            ;
          }
          v455 = (uint64_t)*v55 + 40;
          v456 = *((_QWORD *)*v55 + 6);
          if (v456 != v455)
          {
            v457 = *((_QWORD *)*v55 + 6);
            while (1)
            {
              v458 = v457 - 24;
              if (!v457)
                v458 = 0;
              if (*(_BYTE *)(v458 + 16) != 83)
                break;
              v457 = *(_QWORD *)(v457 + 8);
              if (v457 == v455)
              {
                v457 = (uint64_t)*v55 + 40;
                goto LABEL_620;
              }
            }
            v459 = *(unsigned __int8 *)(v457 - 8) - 38;
            v138 = v459 > 0x38;
            v460 = (1 << v459) & 0x100060000000001;
            if (!v138 && v460 != 0)
              v457 = *(_QWORD *)(v457 + 8);
LABEL_620:
            while (v456 != v457)
            {
              v462 = v456 - 24;
              if (!v456)
                v462 = 0;
              v463 = *(unsigned __int8 *)(v462 + 16);
              v464 = v463 == 83 ? (_DWORD *)v462 : 0;
              if (!v456 || v463 != 83)
                break;
              v456 = *(_QWORD *)(v456 + 8);
              v465 = v464[5] & 0x7FFFFFF;
              if (v465)
              {
                v466 = 0;
                do
                {
                  v467 = v466;
                  while (1)
                  {
                    v468 = v464[5];
                    v469 = (v468 & 0x40000000) != 0 ? (_DWORD *)*((_QWORD *)v464 - 1) : &v464[-8 * (v468 & 0x7FFFFFF)];
                    if (*(_QWORD *)&v469[8 * v464[15] + 2 * v467] != v619)
                      break;
                    llvm::PHINode::removeIncomingValue((llvm::PHINode *)v464, v467, 1);
                    if ((_DWORD)v467 == --v465)
                      goto LABEL_620;
                  }
                  v466 = v467 + 1;
                }
                while ((_DWORD)v467 + 1 != v465);
              }
            }
          }
          if (v631)
          {
            sub_1C4E43068((uint64_t)v630);
            MEMORY[0x1CAA32FB4](v630[0], 8);
            v631 = 0;
          }
          v470 = (_QWORD *)v628[0];
          if (v629)
          {
            v471 = v628[0] + ((unint64_t)v629 << 6);
            do
            {
              v472 = v470[3];
              if ((v472 | 0x1000) != 0xFFFFFFFFFFFFF000)
              {
                v473 = v470[7];
                if (v473)
                {
                  if (v473 != -8192 && v473 != -4096)
                  {
                    v474 = v470[5] & 0xFFFFFFFFFFFFFFF8;
                    *(_QWORD *)v474 = v470[6];
                    v475 = (unint64_t *)v470[6];
                    if (v475)
                    {
                      *v475 = *v475 & 7 | v474;
                    }
                    else
                    {
                      v476 = v470[7];
                      v477 = ***(int32x2_t ****)v476;
                      v478 = (unint64_t)v477[303];
                      if (v478 <= v474)
                      {
                        v479 = v477[305].u32[0];
                        if (v478 + 16 * v479 > v474)
                        {
                          v480 = v479 - 1;
                          LODWORD(v481) = v480 & ((v476 >> 4) ^ (v476 >> 9));
                          v482 = (uint64_t *)(v478 + 16 * v481);
                          v483 = *v482;
                          if (v476 == *v482)
                          {
LABEL_655:
                            *v482 = -8192;
                            v477[304] = vadd_s32(v477[304], (int32x2_t)0x1FFFFFFFFLL);
                            v476 = v470[7];
                          }
                          else
                          {
                            v484 = 1;
                            while (v483 != -4096)
                            {
                              v485 = v481 + v484++;
                              v481 = v485 & v480;
                              v483 = *(_QWORD *)(v478 + 16 * v481);
                              if (v476 == v483)
                              {
                                v482 = (uint64_t *)(v478 + 16 * v481);
                                goto LABEL_655;
                              }
                            }
                          }
                          *(_BYTE *)(v476 + 17) &= ~1u;
                        }
                      }
                    }
                    v472 = v470[3];
                  }
                }
              }
              if (v472 != -4096 && v472 != -8192 && v472 != 0)
              {
                v487 = v470[1] & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)v487 = v470[2];
                v488 = (unint64_t *)v470[2];
                if (v488)
                {
                  *v488 = *v488 & 7 | v487;
                }
                else
                {
                  v489 = v470[3];
                  v490 = ***(int32x2_t ****)v489;
                  v491 = (unint64_t)v490[303];
                  if (v491 <= v487)
                  {
                    v492 = v490[305].u32[0];
                    if (v491 + 16 * v492 > v487)
                    {
                      v493 = v492 - 1;
                      LODWORD(v494) = v493 & ((v489 >> 4) ^ (v489 >> 9));
                      v495 = (uint64_t *)(v491 + 16 * v494);
                      v496 = *v495;
                      if (v489 == *v495)
                      {
LABEL_674:
                        *v495 = -8192;
                        v490[304] = vadd_s32(v490[304], (int32x2_t)0x1FFFFFFFFLL);
                        v489 = v470[3];
                      }
                      else
                      {
                        v497 = 1;
                        while (v496 != -4096)
                        {
                          v498 = v494 + v497++;
                          v494 = v498 & v493;
                          v496 = *(_QWORD *)(v491 + 16 * v494);
                          if (v489 == v496)
                          {
                            v495 = (uint64_t *)(v491 + 16 * v494);
                            goto LABEL_674;
                          }
                        }
                      }
                      *(_BYTE *)(v489 + 17) &= ~1u;
                    }
                  }
                }
              }
              v470 += 8;
            }
            while (v470 != (_QWORD *)v471);
            v470 = (_QWORD *)v628[0];
          }
          MEMORY[0x1CAA32FB4](v470, 8);
          v624 = v602;
          v499 = *(_QWORD *)(v23 + 88);
          sub_1C50AE0D4(v625, &v624);
          *(_BYTE *)(v499 + 88 * v602 + 36) = 1;
          v19 = v23;
        }
        v46 = v38;
        if (v37 == 2)
          break;
        v410 = sub_1C55CCA98(v610);
        v411 = *(_QWORD *)(v610 + 88);
        v412 = v411 + 88 * v604;
        v415 = *(_QWORD *)(v412 + 40);
        v413 = v412 + 40;
        v414 = v415;
        v416 = v415 + 16 * v38;
        v417 = (__int128 *)(v415 + 16 * v45);
        if (*(_BYTE *)(v416 + 12))
          v418 = v417;
        else
          v418 = (__int128 *)v416;
        if (*(_BYTE *)(v416 + 12))
        {
          v419 = (__int128 *)v416;
        }
        else
        {
          v46 = v45;
          v419 = v417;
        }
        v651 = 0uLL;
        v651 = *v419;
        *(_QWORD *)v410 = sub_1C5EBE3AC(*(uint64_t ***)(v411 + 88 * v604), (uint64_t *)&v651, 2, "Join", 0, *(_QWORD *)(v610 + 40), *(_QWORD *)(v610 + 32), 0, 0);
        v420 = *(_QWORD *)(v610 + 88) + 88 * *((unsigned int *)v419 + 2);
        *(_DWORD *)(v410 + 12) = *(_DWORD *)(v420 + 12);
        *(_BYTE *)(v410 + 16) = *(_BYTE *)(v420 + 16);
        v421 = *(_OWORD *)(v414 + 16 * v46);
        v422 = *(unsigned int *)(v410 + 48);
        if (v422 >= *(unsigned int *)(v410 + 52))
        {
          v622 = *(_OWORD *)(v414 + 16 * v46);
          llvm::SmallVectorBase<unsigned int>::grow_pod(v410 + 40, v410 + 56, v422 + 1, 16);
          v421 = v622;
          v422 = *(unsigned int *)(v410 + 48);
        }
        *(_OWORD *)(*(_QWORD *)(v410 + 40) + 16 * v422) = v421;
        v423 = *(_DWORD *)(v410 + 52);
        v424 = (*(_DWORD *)(v410 + 48) + 1);
        *(_DWORD *)(v410 + 48) = v424;
        v425 = *v418;
        if (v424 >= v423)
        {
          v623 = *v418;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v410 + 40, v410 + 56, v424 + 1, 16);
          v425 = v623;
          LODWORD(v424) = *(_DWORD *)(v410 + 48);
        }
        *(_OWORD *)(*(_QWORD *)(v410 + 40) + 16 * v424) = v425;
        ++*(_DWORD *)(v410 + 48);
        *(_DWORD *)(v410 + 8) = 1;
        if (v38 <= v45)
          v426 = v45;
        else
          v426 = v38;
        v427 = *(_QWORD *)v413;
        v428 = *(_QWORD *)v413 + 16 * v426;
        v429 = *(unsigned int *)(v413 + 8);
        v430 = *(_QWORD *)v413 + 16 * v429 - (v428 + 16);
        if (v430)
        {
          memmove((void *)v428, (const void *)(v428 + 16), v430 - 2);
          LODWORD(v429) = *(_DWORD *)(v413 + 8);
          v427 = *(_QWORD *)v413;
        }
        v431 = v429 - 1;
        *(_DWORD *)(v413 + 8) = v431;
        if (v45 >= v38)
          v432 = v38;
        else
          v432 = v45;
        v433 = v427 + 16 * v432;
        v434 = 16 * v431 - (16 * v432 + 16);
        if (v434)
        {
          memmove((void *)v433, (const void *)(v433 + 16), v434 - 2);
          v431 = *(_DWORD *)(v413 + 8);
        }
        v435 = v431 - 1;
        *(_DWORD *)(v413 + 8) = v435;
        v436 = *(_QWORD *)v410;
        v437 = *(unsigned int *)(v410 + 12);
        v438 = *(unsigned __int8 *)(v410 + 16);
        if (v435 >= *(_DWORD *)(v413 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v413, v413 + 16, v435 + 1, 16);
          LODWORD(v435) = *(_DWORD *)(v413 + 8);
        }
        v439 = (_QWORD *)(*(_QWORD *)v413 + 16 * v435);
        *v439 = v436;
        v439[1] = v437 | (v438 << 32);
        ++*(_DWORD *)(v413 + 8);
        v19 = v610;
      }
      v47 = v27;
      v19 = v610;
      v48 = *(_DWORD *)(*(_QWORD *)(*((_QWORD *)&v625[0] + 1) + (((unint64_t)v626 >> 7) & 0x1FFFFFFFFFFFFF8))
                      + 4 * (v626 & 0x3FF));
    }
    while ((sub_1C55C968C((uint64_t *)v610, v20, 1, 1) & 1) != 0);
    v582 = *(_QWORD *)(v610 + 88) + 88 * *(unsigned int *)(*(_QWORD *)v30 + 16 * v46 + 8);
    v583 = v618;
    *(_DWORD *)(v618 + 88 * v604 + 12) = *(_DWORD *)(v582 + 12);
    v584 = *(_BYTE *)(v582 + 16);
    v23 = v610;
    v27 = v47;
LABEL_704:
    *(_BYTE *)(v583 + 88 * v48 + 16) = v584;
    if (v27 < 2)
    {
      v615 = 0;
      goto LABEL_727;
    }
    v513 = 0;
    while (1)
    {
      v514 = v27;
      v515 = llvm::Instruction::getSuccessor((llvm::Instruction *)v25, v513);
      v516 = *(_QWORD *)(v23 + 88);
      v517 = *(_DWORD *)(v23 + 96);
      if (v517)
      {
        v518 = (_QWORD *)(v516 + 88 * v517);
        v519 = *(_QWORD **)(v23 + 88);
        v520 = 88 * v517;
        v521 = a3;
        v27 = v514;
        while (*v519 != v515)
        {
          v519 += 11;
          v520 -= 88;
          if (!v520)
          {
            v519 = v518;
            break;
          }
        }
      }
      else
      {
        v519 = *(_QWORD **)(v23 + 88);
        v521 = a3;
        v27 = v514;
      }
      if (*(_QWORD *)(v516 + 0xFFFFFFE800000008 * (((unint64_t)v519 - v516) >> 3) + 24))
        break;
      if (!v521)
        goto LABEL_722;
      v522 = *(uint64_t **)(v23 + 32);
      v523 = *((_DWORD *)v522 + 4);
      if (v523)
      {
        v524 = *v522;
        v525 = v523 - 1;
        v526 = (v523 - 1) & ((v515 >> 4) ^ (v515 >> 9));
        v527 = *(_QWORD *)(v524 + 16 * v526);
        if (v515 == v527)
        {
LABEL_719:
          v530 = *(_QWORD *)(v524 + 16 * v526 + 8);
          goto LABEL_721;
        }
        v528 = 1;
        while (v527 != -4096)
        {
          v529 = v526 + v528++;
          v526 = v529 & v525;
          v527 = *(_QWORD *)(v524 + 16 * v526);
          if (v515 == v527)
            goto LABEL_719;
        }
      }
      v530 = 0;
LABEL_721:
      if (v530 != v521)
        break;
LABEL_722:
      if (++v513 == (_DWORD)v27)
      {
        v615 = 1;
        goto LABEL_726;
      }
    }
    v615 = 0;
LABEL_726:
    v48 = v604;
LABEL_727:
    v531 = 0;
    v532 = v618 + 88 * v48;
    v612 = (unsigned int *)(v532 + 12);
    v608 = (llvm::Instruction *)(v532 + 16);
    v617 = v27;
    while (2)
    {
      v533 = llvm::Instruction::getSuccessor((llvm::Instruction *)v25, v531);
      if (v533 != v599)
      {
        v534 = v533;
        v535 = *(uint64_t **)(v23 + 32);
        v536 = *((_DWORD *)v535 + 4);
        if (!v536)
          goto LABEL_741;
        v537 = *v535;
        v538 = v536 - 1;
        v539 = (v536 - 1) & ((v533 >> 4) ^ (v533 >> 9));
        v540 = *(_QWORD *)(v537 + 16 * v539);
        if (v533 == v540)
        {
LABEL_734:
          v543 = *(_QWORD *)(v537 + 16 * v539 + 8);
          LODWORD(v651) = -1;
          if (!v543 || **(_QWORD **)(v543 + 32) != v534)
            goto LABEL_742;
          v544 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getUniqueExitBlock((_QWORD *)v543);
          v534 = v544;
          v545 = *(_QWORD *)(v23 + 88);
          v546 = *(_DWORD *)(v23 + 96);
          if (v546)
          {
            v547 = (_QWORD *)(v545 + 88 * v546);
            v548 = *(_QWORD **)(v23 + 88);
            v549 = 88 * v546;
            v550 = v604;
            while (*v548 != v544)
            {
              v548 += 11;
              v549 -= 88;
              if (!v549)
              {
                v548 = v547;
                break;
              }
            }
          }
          else
          {
            v548 = *(_QWORD **)(v23 + 88);
            v550 = v604;
          }
          v551 = 0;
          LODWORD(v651) = -1171354717 * (((uint64_t)v548 - v545) >> 3);
          v558 = v545 + 88 * v651;
          *(_DWORD *)(v558 + 48) = 0;
          v557 = 1;
        }
        else
        {
          v541 = 1;
          while (v540 != -4096)
          {
            v542 = v539 + v541++;
            v539 = v542 & v538;
            v540 = *(_QWORD *)(v537 + 16 * v539);
            if (v533 == v540)
              goto LABEL_734;
          }
LABEL_741:
          v543 = 0;
LABEL_742:
          v551 = v543 != a3;
          v552 = *(_QWORD *)(v610 + 88);
          v553 = *(_DWORD *)(v610 + 96);
          if (v553)
          {
            v554 = (_QWORD *)(v552 + 88 * v553);
            v555 = *(_QWORD **)(v610 + 88);
            v556 = 88 * v553;
            v550 = v604;
            while (*v555 != v534)
            {
              v555 += 11;
              v556 -= 88;
              if (!v556)
              {
                v555 = v554;
                break;
              }
            }
          }
          else
          {
            v555 = *(_QWORD **)(v610 + 88);
            v550 = v604;
          }
          v557 = 0;
          LODWORD(v651) = -1171354717 * (((uint64_t)v555 - v552) >> 3);
          v558 = v552 + 88 * v651;
        }
        if (v615)
          v559 = v550;
        else
          v559 = *v612;
        if (v615)
          v560 = v531 == 0;
        else
          v560 = *(_BYTE *)v608 != 0;
        v561 = *v620;
        if (v560)
          v562 = 0x100000000;
        else
          v562 = 0;
        if (v551)
          v563 = 0x10000000000;
        else
          v563 = 0;
        v564 = *(unsigned int *)(v558 + 48);
        if (v564 >= *(unsigned int *)(v558 + 52))
        {
          v606 = v557;
          llvm::SmallVectorBase<unsigned int>::grow_pod(v558 + 40, v558 + 56, v564 + 1, 16);
          v557 = v606;
          v564 = *(unsigned int *)(v558 + 48);
        }
        v565 = (_QWORD *)(*(_QWORD *)(v558 + 40) + 16 * v564);
        *v565 = v561;
        v565[1] = v563 | v600 & 0xFFFF000000000000 | v559 | v562;
        v600 = v563 | v600 & 0xFFFF000000000000 | v559 | v562;
        v566 = *(_DWORD *)(v558 + 48) + 1;
        *(_DWORD *)(v558 + 48) = v566;
        v567 = *(_QWORD *)(v558 + 24);
        if (v567)
          v567 = *(unsigned int *)(v558 + 32);
        if (v551)
        {
          v568 = 0;
          v23 = v610;
        }
        else
        {
          v569 = *(_QWORD *)(v534 + 8);
          if (v569)
          {
            v23 = v610;
            while (1)
            {
              v570 = *(_QWORD *)(v569 + 24);
              v571 = *(unsigned __int8 *)(v570 + 16);
              v572 = v570 && v571 >= 0x1C;
              if (v572 && v571 - 29 <= 0xA)
                break;
              v569 = *(_QWORD *)(v569 + 8);
              if (!v569)
              {
                v574 = 0;
                goto LABEL_780;
              }
            }
            v574 = 0;
LABEL_785:
            ++v574;
            while (1)
            {
              v569 = *(_QWORD *)(v569 + 8);
              if (!v569)
                break;
              v575 = *(_QWORD *)(v569 + 24);
              v576 = *(unsigned __int8 *)(v575 + 16);
              if (v575)
                v577 = v576 >= 0x1C;
              else
                v577 = 0;
              if (v577 && v576 - 29 < 0xB)
                goto LABEL_785;
            }
          }
          else
          {
            v574 = 0;
            v23 = v610;
          }
LABEL_780:
          v568 = v567 + v566 == v574;
        }
        if (v557 | v568)
        {
          sub_1C50AE0D4(v625, &v651);
          *(_BYTE *)(v558 + 36) = 1;
        }
      }
      if (++v531 != v617)
        continue;
      break;
    }
    v579 = v604;
    *(_DWORD *)(v618 + 88 * v604 + 8) = 1;
    v580 = *((_QWORD *)&v626 + 1) - 1;
    v581 = v626 + 1;
    v626 = __PAIR128__(*((unint64_t *)&v626 + 1), (uint64_t)v626 + 1) + __PAIR128__(-1, 0);
    if (v581 >= 0x800)
    {
      operator delete(**((void ***)&v625[0] + 1));
      v579 = v604;
      *((_QWORD *)&v625[0] + 1) += 8;
      *(_QWORD *)&v626 = v626 - 1024;
      v580 = *((_QWORD *)&v626 + 1);
    }
    *(_BYTE *)(v618 + 88 * v579 + 36) = 0;
  }
  while (v580);
  return sub_1C50ADD7C((uint64_t)v625);
}

void sub_1C55CC840()
{
  JUMPOUT(0x1C55CC73CLL);
}

void sub_1C55CC850()
{
  JUMPOUT(0x1C55CC73CLL);
}

void sub_1C55CC85C()
{
  JUMPOUT(0x1C55CC73CLL);
}

void sub_1C55CC868(uint64_t a1, unint64_t a2)
{
  char *v3;
  char *v4;
  char *v5;
  int v6;
  char *v7;
  _QWORD *v8;
  uint64_t v9;
  __int128 v10;
  __int128 v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  char *v15;
  int v16;
  unint64_t v17;

  v17 = 0;
  v3 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 88, &v17);
  v4 = v3;
  v5 = *(char **)a1;
  v6 = *(_DWORD *)(a1 + 8);
  if (v6)
  {
    v7 = &v5[88 * v6];
    v8 = v3 + 40;
    v9 = (uint64_t)(v5 + 40);
    do
    {
      v10 = *(_OWORD *)(v9 - 40);
      v11 = *(_OWORD *)(v9 - 24);
      *(_QWORD *)((char *)v8 - 11) = *(_QWORD *)(v9 - 11);
      *(_OWORD *)(v8 - 3) = v11;
      *(_OWORD *)(v8 - 5) = v10;
      *v8 = v8 + 2;
      v8[1] = 0x200000000;
      if (*(_DWORD *)(v9 + 8))
        v8 = (_QWORD *)sub_1C55CC978((uint64_t)v8, v9);
      v12 = v9 - 40;
      v8 += 11;
      v9 += 88;
    }
    while ((char *)(v12 + 88) != v7);
    v5 = *(char **)a1;
    v13 = *(_DWORD *)(a1 + 8);
    if (v13)
    {
      v14 = 88 * v13;
      do
      {
        v15 = *(char **)&v5[v14 - 48];
        if (&v5[v14 - 32] != v15)
          free(v15);
        v14 -= 88;
      }
      while (v14);
      v5 = *(char **)a1;
    }
  }
  v16 = v17;
  if (v5 != (char *)(a1 + 16))
    free(v5);
  *(_QWORD *)a1 = v4;
  *(_DWORD *)(a1 + 12) = v16;
}

uint64_t sub_1C55CC978(uint64_t a1, uint64_t a2)
{
  const void *v4;
  const void *v5;
  void *v6;
  _DWORD *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;

  if (a1 != a2)
  {
    v5 = (const void *)(a2 + 16);
    v4 = *(const void **)a2;
    if (v4 != v5)
    {
      v6 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        free(v6);
        v4 = *(const void **)a2;
      }
      *(_QWORD *)a1 = v4;
      v7 = (_DWORD *)(a2 + 8);
      *(_QWORD *)(a1 + 8) = *(_QWORD *)(a2 + 8);
      *(_QWORD *)a2 = v5;
      *(_DWORD *)(a2 + 12) = 0;
      goto LABEL_17;
    }
    v7 = (_DWORD *)(a2 + 8);
    v8 = *(unsigned int *)(a2 + 8);
    v9 = *(unsigned int *)(a1 + 8);
    if (v9 >= v8)
    {
      if ((_DWORD)v8)
        memmove(*(void **)a1, v4, 16 * v8 - 2);
      goto LABEL_16;
    }
    if (*(_DWORD *)(a1 + 12) >= v8)
    {
      if ((_DWORD)v9)
      {
        memmove(*(void **)a1, v4, 16 * v9 - 2);
        goto LABEL_14;
      }
    }
    else
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v8, 16);
    }
    v9 = 0;
LABEL_14:
    v10 = *v7;
    if (v9 != v10)
      memcpy((void *)(*(_QWORD *)a1 + 16 * v9), (const void *)(*(_QWORD *)a2 + 16 * v9), *(_QWORD *)a2 + 16 * v10 - (*(_QWORD *)a2 + 16 * v9));
LABEL_16:
    *(_DWORD *)(a1 + 8) = v8;
LABEL_17:
    *v7 = 0;
  }
  return a1;
}

uint64_t sub_1C55CCA98(uint64_t a1)
{
  unint64_t v2;
  unint64_t *v3;
  char *v4;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v13;
  BOOL v14;
  char *v15;
  _QWORD v16[2];
  char v17;
  uint64_t v18;
  int v19;
  char v20;
  void *v21;
  uint64_t v22;
  _QWORD v23[5];

  v23[4] = *MEMORY[0x1E0C80C00];
  v3 = (unint64_t *)(a1 + 88);
  v2 = *(_QWORD *)(a1 + 88);
  v16[0] = 0;
  v16[1] = -1;
  v17 = 0;
  v18 = 0;
  v19 = -1;
  v20 = 0;
  v4 = (char *)v16;
  v21 = v23;
  v22 = 0x200000000;
  v5 = *(unsigned int *)(a1 + 96);
  if (v5 >= *(_DWORD *)(a1 + 100))
  {
    v13 = v5 + 1;
    v14 = v2 + 88 * v5 > (unint64_t)v16;
    if (v2 <= (unint64_t)v16 && v14)
    {
      v15 = (char *)v16 - v2;
      sub_1C55CC868(a1 + 88, v13);
      v2 = *v3;
      v4 = &v15[*v3];
    }
    else
    {
      sub_1C55CC868(a1 + 88, v13);
      v2 = *v3;
      v4 = (char *)v16;
    }
  }
  v6 = v2 + 88 * *(unsigned int *)(a1 + 96);
  v7 = *(_OWORD *)v4;
  v8 = *((_OWORD *)v4 + 1);
  *(_QWORD *)(v6 + 29) = *(_QWORD *)(v4 + 29);
  *(_OWORD *)v6 = v7;
  *(_OWORD *)(v6 + 16) = v8;
  *(_QWORD *)(v6 + 48) = 0x200000000;
  *(_QWORD *)(v6 + 40) = v6 + 56;
  v9 = v6 + 40;
  if (*((_DWORD *)v4 + 12))
    sub_1C55CC978(v9, (uint64_t)(v4 + 40));
  v10 = *(_DWORD *)(a1 + 96) + 1;
  *(_DWORD *)(a1 + 96) = v10;
  v11 = *(_QWORD *)(a1 + 88);
  if (v21 != v23)
    free(v21);
  return v11 + 88 * v10 - 88;
}

uint64_t sub_1C55CCBF8(uint64_t a1, _QWORD *a2, _QWORD *a3, uint64_t a4)
{
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  unint64_t *v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  _QWORD *v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  unint64_t v27;
  char *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int32x2_t *****v33;
  int32x2_t *****v34;
  uint64_t *v35;
  int32x2_t ****v36;
  int v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t v40;
  int32x2_t ****v41;
  int v42;
  int v43;
  _QWORD *v44;
  _QWORD *v46;
  unint64_t v47;
  int32x2_t ****v48;
  int32x2_t *v49;
  unint64_t v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  int32x2_t *****v54;
  int32x2_t ****v55;
  int v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t *v66;
  uint64_t v67;
  void *v69;
  uint64_t v70;
  unint64_t *v71;
  int32x2_t ****v72;
  uint64_t v73;

  v8 = sub_1C484358C(*(_QWORD *)(a1 + 32) + 48, 152, 3);
  v9 = v8;
  *(_OWORD *)v8 = 0u;
  *(_OWORD *)(v8 + 16) = 0u;
  *(_OWORD *)(v8 + 32) = 0u;
  *(_OWORD *)(v8 + 48) = 0u;
  *(_OWORD *)(v8 + 64) = 0u;
  *(_OWORD *)(v8 + 80) = 0u;
  *(_OWORD *)(v8 + 96) = 0u;
  *(_OWORD *)(v8 + 112) = 0u;
  *(_OWORD *)(v8 + 128) = 0u;
  *(_QWORD *)(v8 + 144) = 0;
  *(_QWORD *)(v8 + 56) = v8 + 88;
  *(_QWORD *)(v8 + 64) = v8 + 88;
  *(_DWORD *)(v8 + 72) = 8;
  if (a3)
  {
    *(_QWORD *)v8 = a3;
    v11 = (unint64_t *)a3[2];
    v10 = a3[3];
    if ((unint64_t)v11 < v10)
    {
      *v11 = v8;
      v12 = v11 + 1;
LABEL_30:
      a3[2] = v12;
      goto LABEL_38;
    }
    v17 = (_QWORD *)a3[1];
    v18 = v11 - v17;
    v19 = v18 + 1;
    if (!((unint64_t)(v18 + 1) >> 61))
    {
      v20 = v10 - (_QWORD)v17;
      if (v20 >> 2 > v19)
        v19 = v20 >> 2;
      if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
        v21 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v21 = v19;
      if (!v21)
      {
        v22 = 0;
        goto LABEL_25;
      }
      if (!(v21 >> 61))
      {
        v22 = (char *)operator new(8 * v21);
LABEL_25:
        v29 = (uint64_t *)&v22[8 * v18];
        *v29 = v9;
        v12 = v29 + 1;
        if (v11 != v17)
        {
          do
          {
            v30 = *--v11;
            *--v29 = v30;
          }
          while (v11 != v17);
          v11 = (unint64_t *)a3[1];
        }
        a3[1] = v29;
        a3[2] = v12;
        a3[3] = &v22[8 * v21];
        if (v11)
          operator delete(v11);
        goto LABEL_30;
      }
LABEL_80:
      sub_1C4764EE4();
    }
LABEL_79:
    abort();
  }
  v13 = *(_QWORD **)(a1 + 32);
  v15 = (unint64_t *)v13[4];
  v14 = v13[5];
  if ((unint64_t)v15 >= v14)
  {
    v23 = (_QWORD *)v13[3];
    v24 = v15 - v23;
    v25 = v24 + 1;
    if ((unint64_t)(v24 + 1) >> 61)
      goto LABEL_79;
    v26 = v14 - (_QWORD)v23;
    if (v26 >> 2 > v25)
      v25 = v26 >> 2;
    if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFF8)
      v27 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v27 = v25;
    if (v27)
    {
      if (v27 >> 61)
        goto LABEL_80;
      v28 = (char *)operator new(8 * v27);
    }
    else
    {
      v28 = 0;
    }
    v31 = (uint64_t *)&v28[8 * v24];
    *v31 = v9;
    v16 = v31 + 1;
    if (v15 != v23)
    {
      do
      {
        v32 = *--v15;
        *--v31 = v32;
      }
      while (v15 != v23);
      v15 = (unint64_t *)v13[3];
    }
    v13[3] = v31;
    v13[4] = v16;
    v13[5] = &v28[8 * v27];
    if (v15)
      operator delete(v15);
  }
  else
  {
    *v15 = v8;
    v16 = v15 + 1;
  }
  v13[4] = v16;
LABEL_38:
  v33 = (int32x2_t *****)a2[4];
  v34 = (int32x2_t *****)a2[5];
  if (v34 != v33)
  {
    while (1)
    {
      v35 = *(uint64_t **)(a1 + 32);
      v36 = *v33;
      v37 = *((_DWORD *)v35 + 4);
      if (!v37)
        goto LABEL_45;
      v38 = *v35;
      v39 = v37 - 1;
      v40 = ((v36 >> 4) ^ (v36 >> 9)) & (v37 - 1);
      v41 = *(int32x2_t *****)(v38 + 16 * v40);
      if (v36 != v41)
        break;
LABEL_44:
      v44 = *(_QWORD **)(v38 + 16 * v40 + 8);
LABEL_46:
      if (v44 == a2)
      {
        v70 = 2;
        v71 = 0;
        v72 = v36;
        if (v36 != (int32x2_t ****)-8192 && v36 != (int32x2_t ****)-4096 && v36 != 0)
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v70);
        v69 = &unk_1E814DA10;
        v73 = a4;
        v46 = sub_1C52E2ED8(a4, &v69);
        if (v72 != (int32x2_t ****)-8192 && v72 != (int32x2_t ****)-4096 && v72)
        {
          v47 = v70 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)(v70 & 0xFFFFFFFFFFFFFFF8) = v71;
          if (v71)
          {
            *v71 = *v71 & 7 | v47;
          }
          else
          {
            v48 = v72;
            v49 = ***v72;
            v50 = (unint64_t)v49[303];
            if (v50 <= v47)
            {
              v51 = v49[305].u32[0];
              if (v50 + 16 * v51 > v47)
              {
                v52 = v51 - 1;
                LODWORD(v53) = v52 & ((v72 >> 4) ^ (v72 >> 9));
                v54 = (int32x2_t *****)(v50 + 16 * v53);
                v55 = *v54;
                if (v72 == *v54)
                {
LABEL_64:
                  *v54 = (int32x2_t ****)-8192;
                  v49[304] = vadd_s32(v49[304], (int32x2_t)0x1FFFFFFFFLL);
                  v48 = v72;
                }
                else
                {
                  v56 = 1;
                  while (v55 != (int32x2_t ****)-4096)
                  {
                    v57 = v53 + v56++;
                    v53 = v57 & v52;
                    v55 = *(int32x2_t *****)(v50 + 16 * v53);
                    if (v72 == v55)
                    {
                      v54 = (int32x2_t *****)(v50 + 16 * v53);
                      goto LABEL_64;
                    }
                  }
                }
                *((_BYTE *)v48 + 17) &= ~1u;
              }
            }
          }
        }
        llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::addBasicBlockToLoop((_QWORD *)v9, v46[7], *(_QWORD *)(a1 + 32));
      }
      if (++v33 == v34)
        goto LABEL_69;
    }
    v42 = 1;
    while (v41 != (int32x2_t ****)-4096)
    {
      v43 = v40 + v42++;
      v40 = v43 & v39;
      v41 = *(int32x2_t *****)(v38 + 16 * v40);
      if (v36 == v41)
        goto LABEL_44;
    }
LABEL_45:
    v44 = 0;
    goto LABEL_46;
  }
LABEL_69:
  v58 = **(_QWORD **)(v9 + 32);
  v59 = *(_QWORD *)(a1 + 88);
  v60 = *(_DWORD *)(a1 + 96);
  if (v60)
  {
    v61 = (_QWORD *)(v59 + 88 * v60);
    v62 = 88 * v60;
    v63 = *(_QWORD **)(a1 + 88);
    while (*v63 != v58)
    {
      v63 += 11;
      v62 -= 88;
      if (!v62)
      {
        v63 = v61;
        break;
      }
    }
  }
  else
  {
    v63 = *(_QWORD **)(a1 + 88);
  }
  v64 = v59 + 0xFFFFFFE800000008 * (((unint64_t)v63 - v59) >> 3);
  *(_QWORD *)v64 = v58;
  *(_QWORD *)(v64 + 24) = v9;
  *(_DWORD *)(v64 + 32) = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getNumBackEdges(v9);
  v66 = (uint64_t *)a2[1];
  v65 = (uint64_t *)a2[2];
  while (v66 != v65)
  {
    v67 = *v66++;
    sub_1C55CCBF8(a1, v67, v9, a4);
  }
  return v9;
}

uint64_t sub_1C55CD07C()
{
  __n128 v1;
  char v2;
  char *v3;
  int v4;

  v4 = 1;
  v2 = 0;
  v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Disable trying to fixup the CFG to nested form.";
  v1.n128_u64[1] = 47;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED8076D8, "disable-cfg-nesting", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED8076D8, &dword_1C475E000);
}

uint64_t sub_1C55CD0FC(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Perform GPU-specific code gen preparation";
  *(_QWORD *)(v2 + 8) = 41;
  *(_QWORD *)(v2 + 16) = "gpu-codegen-prepare";
  *(_QWORD *)(v2 + 24) = 19;
  *(_QWORD *)(v2 + 32) = &unk_1ED8077A8;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C55CD258;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C55CD18C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  _QWORD *v7;
  _QWORD v8[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED8077A8;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E8170C28;
  *(_QWORD *)(a1 + 32) = a2;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v6 = qword_1ED830BC0[0];
  v4 = atomic_load(&qword_1ED8077B0);
  if (v4 != -1)
  {
    v8[0] = sub_1C55CD0FC;
    v8[1] = &v6;
    v7 = v8;
    std::__call_once(&qword_1ED8077B0, &v7, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C55CD258()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C55CD18C(v0, 0);
}

void sub_1C55CD288(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C55CD2AC()
{
  return "GPU-specific code gen preparation";
}

void sub_1C55CD2BC(int a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
}

uint64_t sub_1C55CD2C4(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned __int8 *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  BOOL v12;
  int v13;
  int v14;
  llvm::Instruction *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  BOOL v21;
  unsigned int v23;
  char *v24;
  uint64_t *v25;
  uint64_t v26;
  llvm::Value *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unsigned __int8 *v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t *v42;
  int v43;
  uint64_t v44;
  int v45;
  llvm::Value *v46;
  llvm::Value *v47;
  unsigned int v48;
  llvm::Value *v49;
  unsigned __int8 *v50;
  BOOL v51;
  unsigned __int8 **v52;
  unsigned __int8 *v53;
  uint64_t v54;
  uint64_t v55;
  char *v56;
  uint64_t v57;
  _QWORD *v58;
  char v59;
  int v60;
  uint64_t v61;
  int v62;
  char v63;
  int v64;
  uint64_t v65;
  llvm::ValueSymbolTable *v66;
  char v67;
  char v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t i;
  uint64_t v78;
  int v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  _QWORD **v83;
  llvm::UndefValue **v84;
  llvm::UndefValue *v85;
  llvm::UndefValue ***v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  uint64_t *v90;
  int v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _QWORD *v95;
  char v96;
  uint64_t v98;
  char v99;
  unsigned int v100;
  char v101;
  uint64_t v102;
  std::string __dst;
  unsigned __int8 *v104[4];
  __int16 v105;
  void *v106;
  uint64_t v107;
  _BYTE v108[120];
  uint64_t *v109;
  uint64_t *v110;
  uint64_t v111;
  int v112;
  _QWORD v113[10];

  v113[8] = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a2 + 40);
  if (*(char *)(v3 + 239) < 0)
    sub_1C47EBC30(&__dst, *(void **)(v3 + 216), *(_QWORD *)(v3 + 224));
  else
    __dst = *(std::string *)(v3 + 216);
  if (!std::string::compare(&__dst, 0, 4uLL, "agx1"))
  {
    v100 = 0;
  }
  else
  {
    if (!std::string::compare(&__dst, 0, 4uLL, "agx2"))
    {
      v5 = 1;
    }
    else if (!std::string::compare(&__dst, 0, 4uLL, "agx3"))
    {
      v5 = 2;
    }
    else
    {
      v5 = -27;
    }
    v100 = v5;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v6 = a2 + 72;
  v98 = a2;
  v7 = *(_QWORD *)(a2 + 80);
  v102 = v6;
  if (v7 != v6)
  {
    v8 = 0;
    while (1)
    {
      if (v7)
        v9 = v7 - 24;
      else
        v9 = 0;
      v109 = v113;
      v110 = v113;
      v111 = 8;
      v112 = 0;
      v10 = *(_QWORD *)(v9 + 48);
      if (v10 == v9 + 40)
        goto LABEL_59;
      do
      {
        v11 = (unsigned __int8 *)(v10 - 24);
        v12 = v10 == 0;
        v10 = *(_QWORD *)(v10 + 8);
        if (v12)
          v4 = 0;
        else
          v4 = v11;
        v13 = v4[16];
        if ((v13 - 47) <= 1)
        {
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v109, (uint64_t)v4);
          continue;
        }
        v14 = v13 - 28;
        if (((v13 - 28) & 0xFFFFFFFE) == 0x16)
        {
          v15 = (v13 - 41) >= 0x12 ? 0 : (llvm::Instruction *)v4;
          v16 = *((_QWORD *)v15 - 8);
          v17 = *(_QWORD *)(v16 + 8);
          if (v17)
          {
            v18 = *((_QWORD *)v15 - 4);
            do
            {
              v19 = *(_QWORD *)(v17 + 24);
              v20 = *(unsigned __int8 *)(v19 + 16);
              if (v19)
                v21 = v20 >= 0x1C;
              else
                v21 = 0;
              if (!v21 || v20 - 59 < 0xFFFFFFEE)
                goto LABEL_46;
              v23 = v20 - 28;
              if (v23 == 20)
              {
                if (v14 != 23)
                  goto LABEL_46;
              }
              else if (v14 != 22 || v23 != 19)
              {
                goto LABEL_46;
              }
              if (v16 == *(_QWORD *)(v19 - 64) && v18 == *(_QWORD *)(v19 - 32) && *(_QWORD *)(v19 + 40) == v9)
              {
                v24 = (char *)sub_1C477672C((uint64_t)&v109, *(_QWORD *)(v17 + 24));
                if (v110 == v109)
                  v25 = (uint64_t *)((char *)&v111 + 4);
                else
                  v25 = &v111;
                if (v24 == (char *)&v110[*(unsigned int *)v25])
                  llvm::Instruction::moveBefore((llvm::Instruction *)v19, v15);
                sub_1C4773D54((uint64_t)&v106, (uint64_t)v15, 0, 0, 0);
                v105 = 257;
                v26 = sub_1C4EC4040((uint64_t)&v106, v19, v18, (uint64_t)v104, 0, 0);
                v105 = 257;
                v27 = (llvm::Value *)sub_1C47733F8((uint64_t)&v106, v16, v26, (uint64_t)v104, 0, 0);
                llvm::Value::doRAUW(v15, v27, (llvm::Value *)1);
                llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v15 + 5) + 40, (uint64_t ***)v15);
                v28 = *((_QWORD *)v15 + 3);
                v29 = (_QWORD *)*((_QWORD *)v15 + 4);
                *v29 = v28;
                *(_QWORD *)(v28 + 8) = v29;
                *((_QWORD *)v15 + 3) = 0;
                *((_QWORD *)v15 + 4) = 0;
                llvm::Value::deleteValue(v15);
                if (v106 != v108)
                  free(v106);
                v8 = 1;
                break;
              }
LABEL_46:
              v17 = *(_QWORD *)(v17 + 8);
            }
            while (v17);
          }
        }
      }
      while (v10 != v9 + 40);
      if (v110 != v109)
        free(v110);
LABEL_59:
      v7 = *(_QWORD *)(v7 + 8);
      if (v7 == v102)
      {
        v99 = v8;
        v30 = *(_QWORD *)(v98 + 80);
        v6 = v102;
        goto LABEL_62;
      }
    }
  }
  v99 = 0;
  v30 = v6;
LABEL_62:
  if (v100 <= 2)
  {
    if (v30 != v6)
    {
      v101 = 0;
      while (1)
      {
        v31 = v30 - 24;
        if (!v30)
          v31 = 0;
        v32 = v31 + 40;
        v33 = *(_QWORD *)(v31 + 48);
        while (v33 != v32)
        {
          v34 = v33;
          v33 = *(_QWORD *)(v33 + 8);
          v35 = v34 - 24;
          if (!v34)
            v35 = 0;
          v36 = *(unsigned __int8 *)(v35 + 16) - 59;
          if (v36 >= 0xFFFFFFEE)
            v37 = v35;
          else
            v37 = 0;
          if (v34 && v36 >= 0xFFFFFFEE && *(_BYTE *)(v37 + 16) == 46)
          {
            v38 = *(unsigned __int8 **)(v37 - 64);
            v39 = *(_QWORD *)(v37 - 32);
            v109 = 0;
            v106 = &v109;
            v40 = sub_1C4E787F4((_QWORD **)&v106, v39);
            if (v40)
              v4 = (unsigned __int8 *)v39;
            else
              v4 = v38;
            if (v40)
              v41 = (uint64_t)v38;
            else
              v41 = v39;
            if ((~*(unsigned __int8 *)(v37 + 17) & 0x1C) == 0
              || *(_BYTE *)(v41 + 16) == 17
              && (*(_UNKNOWN **)(v41 + 32) == &unk_1C866F1C0
                ? (v59 = *(_BYTE *)(*(_QWORD *)(v41 + 40) + 28))
                : (v59 = *(_BYTE *)(v41 + 52)),
                  (v59 & 7u) > 1))
            {
              v106 = &v109;
              if (sub_1C4E787F4((_QWORD **)&v106, (uint64_t)v4))
              {
                v42 = v109;
                v43 = *(_DWORD *)(*v109 + 8);
                if ((v43 & 0xFE) == 0x12)
                  v43 = *(_DWORD *)(**(_QWORD **)(*v109 + 16) + 8);
                if (v43 == 269)
                {
                  v44 = v41;
                  v45 = 1;
                  goto LABEL_89;
                }
              }
            }
            v106 = (void *)0x3FF0000000000000;
            v107 = (uint64_t)&v109;
            v60 = *(unsigned __int8 *)(v39 + 16);
            if (v60 == 5)
            {
              if (*(_WORD *)(v39 + 18) == 16
                && sub_1C55CDE08((const llvm::APInt **)&v106, *(llvm::Constant **)(v39 - 32 * (*(_DWORD *)(v39 + 20) & 0x7FFFFFF)))&& (sub_1C55CDF68((_QWORD *)v107, *(_QWORD *)(v39 - 32 * (*(_DWORD *)(v39 + 20) & 0x7FFFFFF) + 32)) & 1) != 0)
              {
LABEL_121:
                v61 = v39;
                v39 = (uint64_t)v38;
                goto LABEL_123;
              }
            }
            else if (v60 == 44
                   && sub_1C4E7BE28((const llvm::APInt **)&v106, *(unsigned __int8 **)(v39 - 64))
                   && sub_1C4E787F4((_QWORD **)&v107, *(_QWORD *)(v39 - 32)))
            {
              goto LABEL_121;
            }
            v61 = (uint64_t)v38;
LABEL_123:
            if ((~*(unsigned __int8 *)(v37 + 17) & 0x1C) == 0
              || *(_BYTE *)(v39 + 16) == 17
              && (*(_UNKNOWN **)(v39 + 32) == &unk_1C866F1C0
                ? (v63 = *(_BYTE *)(*(_QWORD *)(v39 + 40) + 28))
                : (v63 = *(_BYTE *)(v39 + 52)),
                  (v63 & 7u) > 1))
            {
              v106 = (void *)0x3FF0000000000000;
              v107 = (uint64_t)&v109;
              v62 = *(unsigned __int8 *)(v61 + 16);
              if (v62 == 5)
              {
                if (*(_WORD *)(v61 + 18) == 16
                  && sub_1C55CDE08((const llvm::APInt **)&v106, *(llvm::Constant **)(v61 - 32 * (*(_DWORD *)(v61 + 20) & 0x7FFFFFF)))&& sub_1C55CDF68((_QWORD *)v107, *(_QWORD *)(v61 - 32 * (*(_DWORD *)(v61 + 20) & 0x7FFFFFF) + 32)))
                {
                  goto LABEL_135;
                }
              }
              else if (v62 == 44
                     && sub_1C4E7BE28((const llvm::APInt **)&v106, *(unsigned __int8 **)(v61 - 64))
                     && (sub_1C4E787F4((_QWORD **)&v107, *(_QWORD *)(v61 - 32)) & 1) != 0)
              {
LABEL_135:
                v42 = v109;
                v64 = *(_DWORD *)(*v109 + 8);
                if ((v64 & 0xFE) == 0x12)
                  v64 = *(_DWORD *)(**(_QWORD **)(*v109 + 16) + 8);
                if (v64 == 269)
                {
                  v44 = v39;
                  v45 = 0;
LABEL_89:
                  v46 = sub_1C55CDD38((uint64_t)v42, v44, v45);
                  v47 = v46;
                  if (v46)
                  {
                    v48 = *((unsigned __int8 *)v46 + 16);
                    v49 = v48 <= 0x1B ? 0 : v46;
                    if (v46 != (llvm::Value *)v37)
                    {
                      v50 = *(unsigned __int8 **)(v37 + 48);
                      if (v50)
                        v51 = v48 >= 0x1C;
                      else
                        v51 = 0;
                      if (v51)
                      {
                        v104[0] = *(unsigned __int8 **)(v37 + 48);
                        llvm::MetadataTracking::track((uint64_t)v104, v50, 2);
                        v52 = (unsigned __int8 **)((char *)v49 + 48);
                        if (v104 == v52)
                        {
                          if (v104[0])
                            llvm::MetadataTracking::untrack((uint64_t)v104, v104[0]);
                        }
                        else
                        {
                          if (*v52)
                            llvm::MetadataTracking::untrack((uint64_t)v52, *v52);
                          v53 = v104[0];
                          *v52 = v104[0];
                          if (v53)
                          {
                            llvm::MetadataTracking::retrack((uint64_t)v104, v53, (uint64_t)v52);
                            v104[0] = 0;
                          }
                        }
                      }
                      llvm::Value::doRAUW((llvm::ValueAsMetadata *)v37, v47, (llvm::Value *)1);
                      llvm::Value::takeName(v47, (llvm::Value *)v37);
                      if (v48 >= 0x1C)
                      {
                        v54 = *(_QWORD *)(v37 + 40);
                        *((_QWORD *)v47 + 5) = v54;
                        *(_WORD *)(v54 + 18) &= ~0x8000u;
                        if ((*((_BYTE *)v47 + 23) & 0x10) != 0)
                        {
                          v65 = *(_QWORD *)(v54 + 56);
                          if (v65)
                          {
                            v66 = *(llvm::ValueSymbolTable **)(v65 + 104);
                            if (v66)
                              llvm::ValueSymbolTable::reinsertValue(v66, v47);
                          }
                        }
                        v55 = *(_QWORD *)(v37 + 24);
                        *((_QWORD *)v47 + 3) = v55;
                        *((_QWORD *)v47 + 4) = v37 + 24;
                        v56 = (char *)v47 + 24;
                        *(_QWORD *)(v55 + 8) = v56;
                        *(_QWORD *)(v37 + 24) = v56;
                      }
                      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v37 + 40) + 40, (uint64_t ***)v37);
                      v57 = *(_QWORD *)(v37 + 24);
                      v58 = *(_QWORD **)(v37 + 32);
                      *v58 = v57;
                      *(_QWORD *)(v57 + 8) = v58;
                      *(_QWORD *)(v37 + 24) = 0;
                      *(_QWORD *)(v37 + 32) = 0;
                      llvm::Value::deleteValue((llvm::Value *)v37);
                      v101 = 1;
                    }
                  }
                }
              }
            }
          }
        }
        v30 = *(_QWORD *)(v30 + 8);
        v6 = v102;
        if (v30 == v102)
        {
          v30 = *(_QWORD *)(v98 + 80);
          v67 = v101;
          goto LABEL_150;
        }
      }
    }
    v67 = 0;
    v30 = v6;
LABEL_150:
    v99 |= v67;
  }
  if (v30 != v6)
  {
    v68 = 0;
    while (1)
    {
      v69 = v30 - 24;
      if (!v30)
        v69 = 0;
      v106 = v108;
      v107 = 0x500000000;
      v70 = v69 + 40;
      v71 = *(_QWORD *)(v69 + 48);
      if (v71 != v69 + 40)
        break;
LABEL_196:
      v30 = *(_QWORD *)(v30 + 8);
      if (v30 == v6)
        goto LABEL_199;
    }
LABEL_156:
    if (v71)
      v72 = v71 - 24;
    else
      v72 = 0;
    if (*(_BYTE *)(v72 + 16) != 84)
      goto LABEL_189;
    v73 = *(_QWORD *)(v72 - 32);
    if (!v73
      || *(_BYTE *)(v73 + 16)
      || *(_QWORD *)(v73 + 24) != *(_QWORD *)(v72 + 72)
      || (*(_BYTE *)(v73 + 33) & 0x20) == 0
      || *(_DWORD *)(*(_QWORD *)(v71 - 56) + 36) != 1275)
    {
      goto LABEL_189;
    }
    v109 = &v111;
    HIDWORD(v110) = 2;
    v74 = 1;
    v111 = v71 - 24;
    while (1)
    {
      v75 = v109[v74 - 1];
      v76 = v74 - 1;
      LODWORD(v110) = v74 - 1;
      for (i = *(_QWORD *)(v75 + 8); i; i = *(_QWORD *)(i + 8))
      {
        v78 = *(_QWORD *)(i + 24);
        if (v76 >= HIDWORD(v110))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v109, (uint64_t)&v111, v76 + 1, 8);
          v76 = v110;
        }
        v109[v76] = v78;
        v76 = (_DWORD)v110 + 1;
        LODWORD(v110) = (_DWORD)v110 + 1;
      }
      v79 = *(_DWORD *)(v75 + 20);
      if ((v79 & 0x40000000) != 0)
      {
        v81 = *(_QWORD *)(v75 - 8);
        v80 = v79 & 0x7FFFFFF;
        if (v80)
        {
LABEL_174:
          v82 = 32 * v80;
          v83 = (_QWORD **)(v81 + 8);
          do
          {
            v84 = (llvm::UndefValue **)(v83 - 1);
            v85 = llvm::UndefValue::get((llvm::UndefValue *)**(v83 - 1), (llvm::Type *)v4);
            if (*(v83 - 1))
            {
              *v83[1] = *v83;
              if (*v83)
                (*v83)[2] = v83[1];
            }
            *v84 = v85;
            if (v85)
            {
              v88 = (_QWORD *)*((_QWORD *)v85 + 1);
              v86 = (llvm::UndefValue ***)((char *)v85 + 8);
              v87 = v88;
              *v83 = v88;
              if (v88)
                v87[2] = v83;
              v83[1] = v86;
              *v86 = v84;
            }
            v83 += 4;
            v82 -= 32;
          }
          while (v82);
        }
      }
      else
      {
        v80 = v79 & 0x7FFFFFF;
        v81 = v75 - 32 * v80;
        if (v80)
          goto LABEL_174;
      }
      v89 = v107;
      if (v107 >= (unint64_t)HIDWORD(v107))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v106, (uint64_t)v108, v107 + 1, 8);
        v89 = v107;
      }
      *((_QWORD *)v106 + v89) = v75;
      LODWORD(v107) = v107 + 1;
      v74 = v110;
      if (!(_DWORD)v110)
      {
        if (v109 != &v111)
          free(v109);
        v6 = v102;
LABEL_189:
        v71 = *(_QWORD *)(v71 + 8);
        if (v71 == v70)
        {
          v90 = (uint64_t *)v106;
          v91 = v107;
          if ((_DWORD)v107)
          {
            v92 = 8 * v107;
            do
            {
              v93 = *v90++;
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v93 + 40) + 40, (uint64_t ***)v93);
              v94 = *(_QWORD *)(v93 + 24);
              v95 = *(_QWORD **)(v93 + 32);
              *v95 = v94;
              *(_QWORD *)(v94 + 8) = v95;
              *(_QWORD *)(v93 + 24) = 0;
              *(_QWORD *)(v93 + 32) = 0;
              llvm::Value::deleteValue((llvm::Value *)v93);
              v92 -= 8;
            }
            while (v92);
            v91 = v107;
            v90 = (uint64_t *)v106;
          }
          v68 |= v91 != 0;
          if (v90 != (uint64_t *)v108)
            free(v90);
          goto LABEL_196;
        }
        goto LABEL_156;
      }
    }
  }
  v68 = 0;
LABEL_199:
  v96 = v99 | v68;
  if (v100 <= 2)
    v96 |= sub_1C5EA1EE8(v98);
  return v96 & 1;
}

llvm::Value *sub_1C55CDD38(uint64_t a1, uint64_t a2, int a3)
{
  char v6;
  double v7;
  llvm::APFloatBase *v9;
  uint64_t *v10;
  uint64_t v11;
  _BYTE v12[32];
  __int16 v13;

  if (*(_BYTE *)(a2 + 16) == 17
    && (*(_UNKNOWN **)(a2 + 32) == &unk_1C866F1C0
      ? (v6 = *(_BYTE *)(*(_QWORD *)(a2 + 40) + 28))
      : (v6 = *(_BYTE *)(a2 + 52)),
        (v6 & 7) == 3))
  {
    v7 = -0.0;
    if ((v6 & 8) == 0)
      v7 = 0.0;
    return llvm::ConstantFP::get(*(llvm::ConstantFP ***)a2, (llvm::Type *)a2, v7);
  }
  else
  {
    v9 = llvm::ConstantFP::get(*(llvm::ConstantFP ***)a2, (llvm::Type *)a2, 0.0);
    if (a3)
      v10 = (uint64_t *)a2;
    else
      v10 = (uint64_t *)v9;
    if (a3)
      v11 = (uint64_t)v9;
    else
      v11 = a2;
    v13 = 257;
    return sub_1C4FC8748(a1, v10, v11, (uint64_t)v12, 0, 0);
  }
}

llvm::Constant *sub_1C55CDE08(const llvm::APInt **a1, llvm::Constant *this)
{
  llvm::Constant *v2;
  const llvm::APInt *v4;
  llvm::APFloatBase *SplatValue;
  _QWORD v7[2];
  int v8;
  char v9;
  const llvm::APInt *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  char v14;
  uint64_t v15;

  v2 = this;
  v15 = *MEMORY[0x1E0C80C00];
  if (!this || *((_BYTE *)this + 16) != 17)
  {
    if ((*(_DWORD *)(*(_QWORD *)this + 8) & 0xFE) != 0x12)
      return 0;
    SplatValue = llvm::Constant::getSplatValue(this, 0);
    v2 = SplatValue;
    if (!SplatValue)
      return v2;
    if (*((_BYTE *)SplatValue + 16) != 17)
      return 0;
  }
  v4 = *a1;
  LODWORD(v11) = 64;
  v10 = v4;
  llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)v7, &v10);
  v11 = v7[0];
  v12 = v7[1];
  v13 = v8;
  v14 = v9 & 0xF;
  llvm::APFloat::convert((uint64_t)&v10, *((void **)v2 + 4), 1, v7);
  v2 = (llvm::Constant *)sub_1C47ECB98((uint64_t)v2 + 24, (uint64_t)&v10);
  if ((_UNKNOWN *)v11 == &unk_1C866F1C0)
  {
    sub_1C4773C74(&v12);
  }
  else if ((*(_DWORD *)(v11 + 8) - 64) <= 0xFFFFFF7F && v12)
  {
    MEMORY[0x1CAA32F9C](v12, 0x1000C8000313F17);
  }
  return v2;
}

uint64_t sub_1C55CDF68(_QWORD *a1, uint64_t a2)
{
  int v2;
  unsigned int v3;
  unsigned int v4;
  BOOL v6;
  int v7;
  int v8;
  uint64_t *v9;
  uint64_t v10;

  v3 = *(unsigned __int8 *)(a2 + 16);
  v4 = v3 - 28;
  v6 = v3 < 0x1C && v3 != 5 || a2 == 0;
  v7 = v6;
  if (!v6)
  {
    if (v3 <= 0x1B)
      v4 = *(unsigned __int16 *)(a2 + 18);
    if (v4 == 43
      && ((v8 = *(_DWORD *)(a2 + 20), (v8 & 0x40000000) != 0)
        ? (v9 = *(uint64_t **)(a2 - 8))
        : (v9 = (uint64_t *)(a2 - 32 * (v8 & 0x7FFFFFF))),
          (v10 = *v9) != 0))
    {
      *a1 = v10;
      v2 = 1;
    }
    else
    {
      v2 = 0;
    }
  }
  return v2 & (v7 ^ 1u);
}

uint64_t sub_1C55CDFD0(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeFunctionGroupInfoWrapperPassPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Allocate common store registers";
  *(_QWORD *)(v2 + 8) = 31;
  *(_QWORD *)(v2 + 16) = "common-store-alloc";
  *(_QWORD *)(v2 + 24) = 18;
  *(_QWORD *)(v2 + 32) = &unk_1ED8077B8;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C55CE12C;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C55CE064(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED8077B8;
  *(_DWORD *)(a1 + 24) = 4;
  *(_QWORD *)a1 = &off_1E8170CC8;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED8077C0);
  if (v3 != -1)
  {
    v7[0] = sub_1C55CDFD0;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED8077C0, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C55CE12C()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C55CE064(v0);
}

void sub_1C55CE158(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C55CE17C(uint64_t a1, uint64_t a2)
{
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
  return sub_1C4771E64(a2, a2 + 112, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
}

uint64_t sub_1C55CE1B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v4;
  uint64_t i;
  uint64_t v6;
  void **v7;
  void *v8;
  _DWORD **v9;
  int v10;
  uint64_t j;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  BOOL v28;
  uint64_t NamedMetadata;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  int8x16_t *v39;
  char *v40;
  uint64_t v41;
  uint64_t *v42;
  int v43;
  unint64_t v44;
  const std::nothrow_t *v45;
  uint64_t *v46;
  BOOL v47;
  uint64_t *v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  uint64_t v59;
  char *v60;
  uint64_t ***v61;
  char *v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t **v68;
  uint64_t *v69;
  unsigned int v70;
  uint64_t v71;
  unsigned int v72;
  uint64_t k;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  void (**v78)(void);
  uint64_t (**v79)();
  uint64_t *v80;
  uint64_t *v81;
  uint64_t *v82;
  uint64_t v83;
  void **v84;
  uint64_t v85;
  void **v86;
  unsigned int v87;
  void *v88;
  uint64_t **v89;
  uint64_t ***v90;
  uint64_t ***v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  int v95;
  unsigned int v96;
  uint64_t ****v97;
  uint64_t ***v98;
  int v99;
  int v100;
  uint64_t **v101;
  uint64_t v102;
  uint64_t v104;
  uint64_t ****v105;
  int v106;
  BOOL v107;
  unsigned int v108;
  _QWORD *v109;
  char v110;
  _QWORD *v111;
  int v112;
  int v113;
  unsigned int v114;
  uint64_t ****v115;
  uint64_t ***v116;
  uint64_t ****v117;
  int v118;
  BOOL v119;
  unsigned int v120;
  uint64_t ****v121;
  _QWORD *v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t ****v125;
  uint64_t ***v126;
  uint64_t **v129;
  uint64_t v130;
  uint64_t v132;
  uint64_t v133;
  uint64_t **v134;
  int v135;
  uint64_t **v137;
  uint64_t **v138;
  int v139;
  uint64_t **v142;
  uint64_t **v143;
  uint64_t v144;
  uint64_t **v148;
  uint64_t **v149;
  uint64_t **v151;
  int v152;
  uint64_t **v156;
  uint64_t **v157;
  int v158;
  uint64_t **v161;
  uint64_t v162;
  uint64_t **v165;
  uint64_t v166;
  uint64_t v168;
  uint64_t *v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  _QWORD *v173;
  int v174;
  int v175;
  int v176;
  BOOL v177;
  unint64_t *v178;
  unint64_t v179;
  uint64_t *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  int v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t *v190;
  uint64_t v191;
  uint64_t v192;
  uint64_t v193;
  _QWORD *v194;
  _QWORD *v195;
  uint64_t v196;
  unint64_t v197;
  uint64_t *v198;
  uint64_t v199;
  uint64_t *v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t m;
  uint64_t v204;
  char v205;
  uint64_t v206;
  void *v207;
  char *v208;
  void *v209;
  int v210;
  int v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  BOOL v229;
  void **v230;
  _BYTE *v231;
  int v232;
  uint64_t v233;
  int v234;
  uint64_t v235;
  int v236;
  unsigned int v237;
  _QWORD *v238;
  _BYTE *v239;
  uint64_t v240;
  _QWORD *v241;
  int v242;
  BOOL v243;
  unsigned int v244;
  _QWORD *v245;
  void *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  _QWORD *v250;
  void **v251;
  _QWORD *v252;
  uint64_t v253;
  _BYTE *v254;
  int v255;
  uint64_t v256;
  int v257;
  uint64_t v258;
  int v259;
  unsigned int v260;
  _QWORD *v261;
  _BYTE *v262;
  uint64_t v263;
  _QWORD *v264;
  int v265;
  BOOL v266;
  unsigned int v267;
  _QWORD *v268;
  void *v269;
  uint64_t v270;
  void *v271;
  uint64_t v272;
  void *v273;
  uint64_t v274;
  void *v275;
  uint64_t v276;
  void *v277;
  uint64_t v278;
  void *v279;
  void *v280;
  void *v281;
  void *v282;
  void *v283;
  void *v284;
  uint64_t result;
  char *v286;
  unsigned int v287;
  unsigned int v288;
  unint64_t v289;
  uint64_t v290;
  unsigned int v291;
  uint64_t v292;
  unsigned int v293;
  char *v294;
  uint64_t *v295;
  unint64_t v296;
  uint64_t *v297;
  uint64_t v298[2];
  int v299;
  void *__p;
  void *v301;
  uint64_t v302;
  std::string __dst;
  uint64_t *v304;
  uint64_t *v305;
  uint64_t v306;
  int v307;
  uint64_t v308;
  char *v309;
  char *v310;
  uint64_t v311;
  int v312;
  _BYTE v313[64];
  const char *v314;
  __int16 v315;
  uint64_t v316;
  __int16 v317;
  uint64_t v318[4];
  __int16 v319;
  _QWORD v320[49];
  void *v321;
  uint64_t v322;
  _BYTE v323[16];
  __int16 v324;
  void *v325;
  uint64_t v326;
  _QWORD v327[2];
  uint64_t v328;
  uint64_t v329[3];
  uint64_t *v330;
  uint64_t v331;

  v2 = a2;
  v331 = *MEMORY[0x1E0C80C00];
  if (*(char *)(a2 + 239) < 0)
    sub_1C47EBC30(&__dst, *(void **)(a2 + 216), *(_QWORD *)(a2 + 224));
  else
    __dst = *(std::string *)(a2 + 216);
  if (!std::string::compare(&__dst, 0, 4uLL, "agx1"))
  {
    v4 = 27;
  }
  else if (!std::string::compare(&__dst, 0, 4uLL, "agx2"))
  {
    v4 = 28;
  }
  else if (!std::string::compare(&__dst, 0, 4uLL, "agx3"))
  {
    v4 = 29;
  }
  else
  {
    v4 = 0;
  }
  v293 = v4;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (v293 <= 0x1B)
  {
    v286 = "Target triple must be set to agx2/agx3";
    goto LABEL_571;
  }
  for (i = *(_QWORD *)(v2 + 32); i != v2 + 24; i = *(_QWORD *)(i + 8))
  {
    if (i)
      v6 = i - 56;
    else
      v6 = 0;
    sub_1C5EA3C3C(v6);
  }
  v7 = **(void ****)(a1 + 8);
  do
  {
    v8 = *v7;
    v7 += 2;
  }
  while (v8 != &llvm::FunctionGroupInfoWrapperPass::ID);
  v9 = *(_DWORD ***)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v7 - 1) + 96))(*(v7 - 1), &llvm::FunctionGroupInfoWrapperPass::ID)+ 32);
  (*((void (**)(_DWORD **, uint64_t))*v9 + 2))(v9, v2);
  if ((v293 & 0x1E) != 0x1C)
  {
    v286 = "Unsupported architecture";
    goto LABEL_571;
  }
  v10 = *(_DWORD *)((*((uint64_t (**)(_DWORD **))*v9 + 8))(v9) + 12);
  v296 = *(unsigned int *)((*((uint64_t (**)(_DWORD **))*v9 + 8))(v9) + 4);
  v320[0] = 1;
  for (j = 1; j != 49; j += 12)
    v320[j] = -4096;
  if ((v10 - 1) >= 0x105FF)
    v12 = 67072;
  else
    v12 = v10;
  v291 = v12;
  v298[0] = 0;
  v298[1] = 0;
  v299 = 0;
  v301 = 0;
  v302 = 0;
  __p = 0;
  sub_1C5E9D34C(v2, (uint64_t)v298);
  sub_1C5E9D674(v2, (uint64_t)v298, 0);
  v321 = v323;
  v322 = 0x1000000000;
  v309 = v313;
  v310 = v313;
  v311 = 8;
  v312 = 0;
  v13 = *(_QWORD *)(v2 + 16);
  if (v13 != v2 + 8)
  {
    while (1)
    {
      if (v13)
        v14 = v13 - 56;
      else
        v14 = 0;
      v15 = v322;
      if (v322 >= (unint64_t)HIDWORD(v322))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v321, (uint64_t)v323, v322 + 1, 8);
        v15 = v322;
      }
      *((_QWORD *)v321 + v15) = v14;
      LODWORD(v322) = v322 + 1;
      if ((*(_BYTE *)(v14 + 23) & 0x10) == 0)
        goto LABEL_51;
      v16 = ***(_QWORD ***)v14;
      v17 = *(_QWORD *)(v16 + 152);
      v18 = *(unsigned int *)(v16 + 168);
      if (!(_DWORD)v18)
        goto LABEL_40;
      LODWORD(v19) = (v18 - 1) & ((v14 >> 4) ^ (v14 >> 9));
      v20 = (uint64_t *)(v17 + 16 * v19);
      v21 = *v20;
      if (*v20 != v14)
        break;
LABEL_41:
      v24 = v20[1];
      if (*(_QWORD *)v24 >= 0x11uLL)
      {
        v25 = *(_QWORD *)(v24 + 16);
        v26 = *(_QWORD *)(v24 + 24);
        v27 = *(unsigned __int8 *)(v24 + 32);
        v28 = v25 == 0x706D61732E636761 && v26 == 0x706165685F72656CLL;
        if (v28 && v27 == 46)
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v309, v14);
      }
LABEL_51:
      if (v14 == sub_1C5EABB98(v2))
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v309, v14);
      if (v14 == sub_1C5EABC98(v2))
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v309, v14);
      v13 = *(_QWORD *)(v13 + 8);
      if (v13 == v2 + 8)
        goto LABEL_56;
    }
    v22 = 1;
    while (v21 != -4096)
    {
      v23 = v19 + v22++;
      v19 = v23 & (v18 - 1);
      v21 = *(_QWORD *)(v17 + 16 * v19);
      if (v21 == v14)
      {
        v20 = (uint64_t *)(v17 + 16 * v19);
        goto LABEL_41;
      }
    }
LABEL_40:
    v20 = (uint64_t *)(v17 + 16 * v18);
    goto LABEL_41;
  }
LABEL_56:
  v325 = "agx.dylib_bindings";
  LOWORD(v328) = 259;
  NamedMetadata = llvm::Module::getNamedMetadata(v2, (uint64_t)&v325);
  if (NamedMetadata)
  {
    v31 = NamedMetadata;
    v32 = *(unsigned int *)(*(_QWORD *)(NamedMetadata + 48) + 8);
    if ((_DWORD)v32)
    {
      v33 = 0;
      v34 = 8 * v32;
      do
      {
        v35 = *(_QWORD *)(**(_QWORD **)(v31 + 48) + v33);
        v36 = *(_QWORD *)(v35 - 8 * *(unsigned int *)(v35 + 8));
        if (*(_BYTE *)v36 == 1)
        {
          v37 = *(_QWORD *)(v36 + 128);
          if (*(_BYTE *)(v37 + 16) == 3)
            v38 = v37;
          else
            v38 = 0;
        }
        else
        {
          v38 = 0;
        }
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v309, v38);
        v33 += 8;
      }
      while (v34 != v33);
    }
  }
  v292 = v2 + 8;
  v297 = (uint64_t *)v2;
  if ((_DWORD)v322)
  {
    v39 = (int8x16_t *)v321;
    v40 = (char *)v321 + 8 * v322;
    v41 = 8 * v322;
    while ((sub_1C55D0388(*(_QWORD *)(v39->i64[0] + 8)) & 1) != 0)
    {
      v39 = (int8x16_t *)((char *)v39 + 8);
      v41 -= 8;
      if (!v41)
        goto LABEL_84;
    }
    while (1)
    {
      v41 -= 8;
      if (!v41)
        break;
      v42 = (uint64_t *)(v40 - 8);
      v43 = sub_1C55D0388(*(_QWORD *)(*((_QWORD *)v40 - 1) + 8));
      v40 -= 8;
      if (v43)
      {
        if (v41 < 17)
        {
LABEL_80:
          v48 = 0;
          v44 = 0;
        }
        else
        {
          if ((v41 >> 3) + 1 >= 0xFFFFFFFFFFFFFFFLL)
            v44 = 0xFFFFFFFFFFFFFFFLL;
          else
            v44 = (v41 >> 3) + 1;
          v45 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
          while (1)
          {
            v46 = (uint64_t *)operator new(8 * v44, v45);
            if (v46)
              break;
            v47 = v44 > 1;
            v44 >>= 1;
            if (!v47)
              goto LABEL_80;
          }
          v48 = v46;
        }
        sub_1C55D05B8(v39, v42, (v41 >> 3) + 1, v48, v44);
        v2 = (uint64_t)v297;
        if (v48)
          operator delete(v48);
        break;
      }
    }
  }
LABEL_84:
  v325 = "agx.interpolations";
  LOWORD(v328) = 259;
  v49 = llvm::Module::getNamedMetadata(v2, (uint64_t)&v325);
  v50 = v296;
  if (v49)
  {
    v51 = *(uint64_t **)(v49 + 48);
    v52 = *((unsigned int *)v51 + 2);
    if ((_DWORD)v52)
    {
      v53 = *v51;
      while (1)
      {
        v54 = (uint64_t *)(*(_QWORD *)v53 - 8 * *(unsigned int *)(*(_QWORD *)v53 + 8));
        v55 = *v54;
        if (*v54)
        {
          v56 = v54[1];
          if (*(_BYTE *)v56 == 4)
            v56 = *(_QWORD *)(v56 - 8 * *(unsigned int *)(v56 + 8));
          v57 = *(_QWORD *)(v56 + 128);
          v58 = (_QWORD *)(v57 + 24);
          if (*(_DWORD *)(v57 + 32) >= 0x41u)
            v58 = (_QWORD *)*v58;
          if (*v58 == 11)
            break;
        }
        v53 += 8;
        if (!--v52)
          goto LABEL_99;
      }
      if (*(_BYTE *)(*(_QWORD *)(v55 + 128) + 16) == 3)
        v59 = *(_QWORD *)(v55 + 128);
      else
        v59 = 0;
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v309, v59);
    }
  }
LABEL_99:
  if (!(_DWORD)v322)
    goto LABEL_335;
  v60 = (char *)v321;
  v294 = (char *)v321 + 8 * v322;
  do
  {
    v61 = *(uint64_t ****)v60;
    v304 = &v308;
    v305 = &v308;
    v306 = 1;
    v307 = 0;
    v62 = (char *)sub_1C477672C((uint64_t)&v309, (uint64_t)v61);
    if (v310 == v309)
      v63 = (uint64_t *)((char *)&v311 + 4);
    else
      v63 = &v311;
    if (v62 != &v310[8 * *(unsigned int *)v63])
    {
      v64 = (uint64_t *)(*((uint64_t (**)(_DWORD **))*v9 + 6))(v9);
      v65 = (*((uint64_t (**)(_DWORD **))*v9 + 7))(v9);
      if (v64 != (uint64_t *)v65)
      {
        v66 = (uint64_t *)v65;
        do
        {
          v67 = *v64++;
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v304, v67);
        }
        while (v64 != v66);
      }
      goto LABEL_142;
    }
    v329[0] = (uint64_t)&off_1E8170D68;
    v329[1] = (uint64_t)&v304;
    v329[2] = (uint64_t)v9;
    v330 = v329;
    v68 = v61[1];
    if (!v68)
    {
      v79 = &off_1E8170D68;
      goto LABEL_140;
    }
    do
    {
      v69 = v68[3];
      v325 = v327;
      HIDWORD(v326) = 16;
      v327[0] = v69;
      v70 = 1;
      do
      {
        v71 = *((_QWORD *)v325 + --v70);
        LODWORD(v326) = v70;
        v72 = *(unsigned __int8 *)(v71 + 16);
        if (v72 > 0xA || ((1 << v72) & 0x728) == 0)
        {
          if (v72 < 0x1C)
            continue;
          v77 = (*((uint64_t (**)(_DWORD **, _QWORD))*v9 + 3))(v9, *(_QWORD *)(*(_QWORD *)(v71 + 40) + 56));
          if (!v330)
          {
            sub_1C485C2F0();
LABEL_560:
            v286 = "Expect a global variable with an initializer or an external global variable declaration.";
LABEL_571:
            llvm::report_fatal_error((llvm *)v286, (const char *)1);
          }
          (*(void (**)(uint64_t *, uint64_t))(*v330 + 48))(v330, v77);
          v70 = v326;
        }
        else
        {
          for (k = *(_QWORD *)(v71 + 8); k; k = *(_QWORD *)(k + 8))
          {
            v75 = *(_QWORD *)(k + 24);
            if (*(_BYTE *)(v75 + 16) == 84)
            {
              v76 = *(_QWORD *)(v75 - 32);
              if (v76)
              {
                if (!*(_BYTE *)(v76 + 16)
                  && *(_QWORD *)(v76 + 24) == *(_QWORD *)(v75 + 72)
                  && (*(_BYTE *)(v76 + 33) & 0x20) != 0
                  && sub_1C47860D0(*(_DWORD *)(v76 + 36))
                  && !*(_QWORD *)(v75 + 8))
                {
                  continue;
                }
              }
            }
            if (v70 >= HIDWORD(v326))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v325, (uint64_t)v327, v70 + 1, 8);
              v70 = v326;
            }
            *((_QWORD *)v325 + v70) = v75;
            v70 = v326 + 1;
            LODWORD(v326) = v326 + 1;
          }
        }
      }
      while (v70);
      if (v325 != v327)
        free(v325);
      v68 = (uint64_t **)v68[1];
    }
    while (v68);
    if (v330 != v329)
    {
      if (v330)
      {
        v78 = (void (**)(void))(*v330 + 40);
        goto LABEL_141;
      }
      goto LABEL_142;
    }
    v79 = (uint64_t (**)())v329[0];
LABEL_140:
    v78 = (void (**)(void))(v79 + 4);
LABEL_141:
    (*v78)();
LABEL_142:
    v81 = v304;
    v80 = v305;
    v82 = (uint64_t *)((char *)&v306 + 4);
    if (v305 != v304)
      v82 = &v306;
    v83 = *(unsigned int *)v82;
    v84 = (void **)v305;
    v50 = v296;
    if ((_DWORD)v83)
    {
      v85 = 0;
      while ((unint64_t)v305[v85] >= 0xFFFFFFFFFFFFFFFELL)
      {
        if (v83 == ++v85)
          goto LABEL_332;
      }
      v84 = (void **)&v305[v85];
    }
    v86 = (void **)&v305[v83];
    if (v84 == v86)
      goto LABEL_332;
    v87 = (v61 >> 4) ^ (v61 >> 9);
    v88 = *v84;
LABEL_152:
    v89 = *v61;
    if ((*((_BYTE *)v61 + 34) & 0x40) != 0)
    {
      v92 = **v89;
      v325 = v61;
      v93 = *(_DWORD *)(v92 + 2520);
      if (v93)
      {
        v94 = *(_QWORD *)(v92 + 2504);
        v95 = v93 - 1;
        v96 = v95 & v87;
        v97 = (uint64_t ****)(v94 + 24 * (v95 & v87));
        v98 = *v97;
        if (*v97 == v61)
        {
LABEL_156:
          v90 = v97[1];
          v91 = v97[2];
          v89 = *v61;
          goto LABEL_157;
        }
        v105 = 0;
        v106 = 1;
        while (v98 != (uint64_t ***)-4096)
        {
          if (v105)
            v107 = 0;
          else
            v107 = v98 == (uint64_t ***)-8192;
          if (v107)
            v105 = v97;
          v108 = v96 + v106++;
          v96 = v108 & v95;
          v97 = (uint64_t ****)(v94 + 24 * v96);
          v98 = *v97;
          if (*v97 == v61)
            goto LABEL_156;
        }
        if (v105)
          v125 = v105;
        else
          v125 = v97;
      }
      else
      {
        v125 = 0;
      }
      v97 = (uint64_t ****)sub_1C53D65B8(v92 + 2504, (uint64_t)&v325, (uint64_t *)&v325, v125);
      v126 = (uint64_t ***)v325;
      v97[1] = 0;
      v97[2] = 0;
      *v97 = v126;
      goto LABEL_156;
    }
    v90 = 0;
    v91 = 0;
LABEL_157:
    v99 = *((_DWORD *)v89 + 2) >> 8;
    switch(v99)
    {
      case 0:
      case 5:
        goto LABEL_325;
      case 1:
      case 4:
        goto LABEL_572;
      case 2:
        if (*((_BYTE *)v61 + 16))
        {
          if (*((_BYTE *)v61 + 16) != 3 || (*((_DWORD *)v61 + 5) & 0x7FFFFFF) != 0)
            goto LABEL_187;
          v100 = *((_DWORD *)v61 + 8);
        }
        else
        {
          if (v61[9] != (uint64_t **)(v61 + 9))
            goto LABEL_187;
          v100 = *((_DWORD *)v61 + 8);
          if ((v100 & 0x800000) != 0)
            goto LABEL_187;
        }
        if ((v100 & 0xF) != 0 || v91)
          goto LABEL_325;
LABEL_187:
        v325 = v88;
        v109 = sub_1C55D0A50(v320, &v325);
        v110 = *((_BYTE *)v109 + 8);
        v329[0] = (uint64_t)v61;
        v287 = v87;
        if ((v110 & 1) != 0)
        {
          v111 = v109 + 2;
          v112 = 4;
        }
        else
        {
          v112 = *((_DWORD *)v109 + 6);
          if (!v112)
          {
            v121 = 0;
            goto LABEL_202;
          }
          v111 = (_QWORD *)v109[2];
        }
        v113 = v112 - 1;
        v114 = v113 & v87;
        v115 = (uint64_t ****)&v111[v113 & v87];
        v116 = *v115;
        if (v61 == *v115)
          goto LABEL_325;
        v117 = 0;
        v118 = 1;
        while (v116 != (uint64_t ***)-4096)
        {
          if (v117)
            v119 = 0;
          else
            v119 = v116 == (uint64_t ***)-8192;
          if (v119)
            v117 = v115;
          v120 = v114 + v118++;
          v114 = v120 & v113;
          v115 = (uint64_t ****)&v111[v114];
          v116 = *v115;
          if (v61 == *v115)
            goto LABEL_325;
        }
        if (v117)
          v121 = v117;
        else
          v121 = v115;
LABEL_202:
        v122 = sub_1C4E48DF0((uint64_t)(v109 + 1), (uint64_t)v329, v329, v121);
        *v122 = v329[0];
        v123 = v329[0];
        v124 = *((unsigned int *)v109 + 14);
        if (v124 >= *((unsigned int *)v109 + 15))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v109 + 6), (uint64_t)(v109 + 8), v124 + 1, 8);
          v124 = *((unsigned int *)v109 + 14);
        }
        *(_QWORD *)(v109[6] + 8 * v124) = v123;
        ++*((_DWORD *)v109 + 14);
        v87 = v287;
        goto LABEL_325;
      case 3:
        switch((unint64_t)v91)
        {
          case 8uLL:
            if (*v90 != (uint64_t **)0x6C61636F6C5F6C63)
              goto LABEL_245;
            v104 = 12;
            goto LABEL_324;
          case 0xAuLL:
            v134 = (uint64_t)*v90;
            v135 = *((unsigned __int16 *)v90 + 4);
            if (v134 != 0x69727261625F6C63 || v135 != 29285)
              goto LABEL_245;
            v132 = (uint64_t)v88;
            v133 = 20;
            goto LABEL_320;
          case 0xDuLL:
            if (*v90 == (uint64_t **)0x70756F72675F6C63
              && *(uint64_t ***)((char *)v90 + 5) == (uint64_t **)0x785F64695F70756FLL)
            {
              v132 = (uint64_t)v88;
              v133 = 21;
            }
            else if (*v90 == (uint64_t **)0x70756F72675F6C63
                   && *(uint64_t ***)((char *)v90 + 5) == (uint64_t **)0x795F64695F70756FLL)
            {
              v132 = (uint64_t)v88;
              v133 = 22;
            }
            else
            {
              v129 = (uint64_t)*v90;
              v130 = *(uint64_t *)((char *)v90 + 5);
              if (v129 != 0x70756F72675F6C63 || v130 != 0x7A5F64695F70756FLL)
              {
LABEL_245:
                v104 = 9;
                goto LABEL_324;
              }
              v132 = (uint64_t)v88;
              v133 = 23;
            }
LABEL_320:
            llvm::FunctionGroup::setGlobalResource(v132, v133, (uint64_t)v61);
            break;
          case 0x11uLL:
            v137 = (uint64_t)*v90;
            v138 = (uint64_t)v90[1];
            v139 = *((unsigned __int8 *)v90 + 16);
            if (v137 != 0x6C61636F6C5F6C63 || v138 != 0x616E7265746E695FLL || v139 != 108)
              goto LABEL_245;
            v104 = 13;
            goto LABEL_324;
          case 0x13uLL:
            v142 = (uint64_t)*v90;
            v143 = (uint64_t)v90[1];
            v144 = *(uint64_t *)((char *)v90 + 11);
            if (v142 != 0x6C61636F6C5F6C63 || v143 != 0x7268745F7265705FLL || v144 != 0x6461657268745F72)
              goto LABEL_245;
            v104 = 14;
            goto LABEL_324;
          default:
            goto LABEL_245;
        }
        goto LABEL_325;
      default:
        if (v99 == 75)
          goto LABEL_325;
        if (v99 != 64)
        {
LABEL_572:
          v318[0] = (uint64_t)"Global variables in address space ";
          v319 = 259;
          v317 = 264;
          LODWORD(v316) = v99;
          sub_1C6131AAC(v318, &v316, (uint64_t)v329);
          v314 = " are not valid.";
          v315 = 259;
          sub_1C6131AAC(v329, (uint64_t *)&v314, (uint64_t)&v325);
          llvm::report_fatal_error((uint64_t)&v325, 1);
        }
        return result;
    }
    switch((unint64_t)v91)
    {
      case 0xBuLL:
        v101 = (uint64_t)*v90;
        v102 = *(uint64_t *)((char *)v90 + 3);
        if (v101 != 0x74735F6567616D69 || v102 != 0x65746174735F6567)
          goto LABEL_573;
        v104 = 0;
        goto LABEL_324;
      case 0xCuLL:
        v151 = (uint64_t)*v90;
        v152 = *((_DWORD *)v90 + 2);
        if (v151 != 0x635F79726F6D656DLL || v152 != 1701340001)
          goto LABEL_573;
        v104 = 6;
        goto LABEL_324;
      case 0xDuLL:
        v161 = (uint64_t)*v90;
        v162 = *(uint64_t *)((char *)v90 + 5);
        if (v161 != 0x5F72656C706D6173 || v162 != 0x65746174735F7265)
          goto LABEL_573;
        v104 = 1;
        goto LABEL_324;
      case 0xFuLL:
        if (*v90 == (uint64_t **)0x625F726566667562
          && *(uint64_t ***)((char *)v90 + 7) == (uint64_t **)0x73676E69646E6962)
        {
          v104 = 3;
          goto LABEL_324;
        }
        v165 = (uint64_t)*v90;
        v166 = *(uint64_t *)((char *)v90 + 7);
        if (v165 != 0x746E6174736E6F63 || v166 != 0x7265766972645F74)
          goto LABEL_573;
        v325 = v61;
        v168 = sub_1C558B5F8(v298, &v325);
        if (!v168)
        {
          if (!sub_1C5EAC4F8((uint64_t)v61, 1))
            goto LABEL_325;
LABEL_322:
          if (v293 != 29)
          {
            v104 = 2;
            goto LABEL_324;
          }
          goto LABEL_325;
        }
        v169 = (uint64_t *)(v168 - 8 * *(unsigned int *)(v168 + 8));
        v171 = *v169;
        v170 = v169[1];
        v288 = v87;
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v171 + 128) + 24) + 8) != 17)
          goto LABEL_298;
        if (*(_BYTE *)v170 != 1 || (v172 = *(_QWORD *)(v170 + 128), *(_BYTE *)(v172 + 16) != 16))
        {
          v170 = *(_QWORD *)(v170 - 8 * *(unsigned int *)(v170 + 8));
LABEL_298:
          v172 = *(_QWORD *)(v170 + 128);
        }
        v173 = (_QWORD *)(v172 + 24);
        if (*(_DWORD *)(v172 + 32) >= 0x41u)
          v173 = (_QWORD *)*v173;
        v174 = *(_DWORD *)v173;
        v175 = sub_1C5EAC4F8((uint64_t)v61, 1);
        if (v174 == 18)
          v176 = 1;
        else
          v176 = v175;
        if (v176)
          v104 = 2;
        else
          v104 = 4;
        v177 = v176 == 1 && v293 == 29;
        v87 = v288;
        if (v177)
          goto LABEL_325;
        goto LABEL_324;
      case 0x10uLL:
        if (*v90 == (uint64_t **)0x746E6174736E6F63 && v90[1] == (uint64_t **)0x72656C706D61735FLL)
          goto LABEL_322;
        v149 = (uint64_t)*v90;
        v148 = (uint64_t)v90[1];
        if (v149 != 0x695F646165726874 || v148 != 0x746E61697261766ELL)
          goto LABEL_573;
        v104 = 7;
        goto LABEL_324;
      case 0x11uLL:
        if (*v90 == (uint64_t **)0x705F726576697264
          && v90[1] == (uint64_t **)0x726574656D617261
          && *((_BYTE *)v90 + 16) == 115)
        {
          v104 = 5;
        }
        else
        {
          v156 = (uint64_t)*v90;
          v157 = (uint64_t)v90[1];
          v158 = *((unsigned __int8 *)v90 + 16);
          if (v156 != 0x746E6174736E6F63 || v157 != 0x6C61726574696C5FLL || v158 != 115)
          {
LABEL_573:
            v286 = "Unknown section on a global variable";
            goto LABEL_571;
          }
          v104 = 8;
        }
LABEL_324:
        (*(void (**)(void *, uint64_t, uint64_t ***))(*(_QWORD *)v88 + 144))(v88, v104, v61);
LABEL_325:
        v178 = (unint64_t *)(v84 + 1);
        break;
      default:
        goto LABEL_573;
    }
    while (v178 != (unint64_t *)v86)
    {
      v179 = *v178++;
      v88 = (void *)v179;
      if (v179 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v84 = (void **)(v178 - 1);
        goto LABEL_152;
      }
    }
    v81 = v304;
    v80 = v305;
    v50 = v296;
LABEL_332:
    if (v80 != v81)
      free(v80);
    v60 += 8;
    v2 = (uint64_t)v297;
  }
  while (v60 != v294);
LABEL_335:
  if (v310 != v309)
    free(v310);
  if (v321 != v323)
    free(v321);
  v180 = (uint64_t *)(*((uint64_t (**)(_DWORD **))*v9 + 6))(v9);
  v290 = (*((uint64_t (**)(_DWORD **))*v9 + 7))(v9);
  if (v180 == (uint64_t *)v290)
    goto LABEL_556;
  v181 = v2 + 272;
  v289 = v50 >> 2;
  do
  {
    v295 = v180;
    v182 = *v180;
    sub_1C55D1008(0, *v180, v181, 0, 0);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v182 + 440))(v182) > v50)
    {
      v286 = "Ran out of shared registers after textures";
      goto LABEL_571;
    }
    sub_1C55D1008(1, v182, v181, 1, 0);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v182 + 440))(v182) > v50)
    {
      v286 = "Ran out of shared registers after samplers";
      goto LABEL_571;
    }
    if (!llvm::Module::getPICLevel((llvm::Module *)v2))
      sub_1C55D1008(2, v182, v181, 2, 0);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v182 + 440))(v182) > v50)
      goto LABEL_561;
    v183 = sub_1C4FB7E80(*(uint64_t **)(v2 + 112), "agc.dylib_base", 0xEuLL);
    v184 = v183 && *(_BYTE *)(v183 + 16) == 3 && (*(_DWORD *)(v183 + 32) & 0xFu) - 7 > 1;
    v325 = v327;
    v326 = 0x800000000;
    v321 = "agx.dylib_bindings";
    v324 = 259;
    v185 = llvm::Module::getNamedMetadata(v2, (uint64_t)&v321);
    if (((llvm::Module::getPICLevel((llvm::Module *)v2) == 0) & ~v184) == 0 && !v185)
    {
      v286 = "MD node agx.dylib_bindings must exist for dylib or kernel calling dylibs.";
      goto LABEL_571;
    }
    if (v185)
    {
      v186 = *(unsigned int *)(*(_QWORD *)(v185 + 48) + 8);
      if ((_DWORD)v186)
      {
        v187 = 0;
        v188 = 8 * v186;
        do
        {
          v189 = *(_QWORD *)(**(_QWORD **)(v185 + 48) + v187);
          v190 = (uint64_t *)(v189 - 8 * *(unsigned int *)(v189 + 8));
          v191 = *v190;
          if (*v190)
          {
            if (*(_BYTE *)v191 == 1)
            {
              v192 = *(_QWORD *)(v191 + 128);
              if (*(_BYTE *)(v192 + 16) == 3)
              {
                v193 = *(_QWORD *)(v190[1] + 128);
                v194 = (_QWORD *)(v193 + 24);
                if (*(_DWORD *)(v193 + 32) >= 0x41u)
                  v194 = (_QWORD *)*v194;
                v195 = (_QWORD *)*v194;
                v196 = v326;
                v197 = ((_DWORD)v195 + 1);
                if (v197 > v326)
                {
                  if (v197 > HIDWORD(v326))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v325, (uint64_t)v327, ((_DWORD)v195 + 1), 8);
                    v196 = v326;
                  }
                  if (v197 != v196)
                    bzero((char *)v325 + 8 * v196, 8 * (v197 - v196));
                  LODWORD(v326) = (_DWORD)v195 + 1;
                }
                *((_QWORD *)v325 + v195) = v192;
              }
            }
          }
          v187 += 8;
        }
        while (v188 != v187);
      }
    }
    v198 = (uint64_t *)v325;
    if ((_DWORD)v326)
    {
      v199 = 8 * v326;
      LODWORD(v50) = v296;
      v200 = v297;
      v201 = v292;
      do
      {
        v202 = *v198++;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v182 + 504))(v182, v202, v181, 4);
        v199 -= 8;
      }
      while (v199);
      v198 = (uint64_t *)v325;
    }
    else
    {
      LODWORD(v50) = v296;
      v200 = v297;
      v201 = v292;
    }
    if (v198 != v327)
      free(v198);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v182 + 440))(v182) > v50)
    {
      v286 = "Ran out of shared registers after MSAA address";
      goto LABEL_571;
    }
    sub_1C55D1008(3, v182, v181, 4, 0);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v182 + 440))(v182) > v50)
    {
      v286 = "Ran out of shared registers after bindings";
      goto LABEL_571;
    }
    if (v293 == 29)
    {
      for (m = v200[2]; m != v201; m = *(_QWORD *)(m + 8))
      {
        if (m)
          v204 = m - 56;
        else
          v204 = 0;
        if (sub_1C5EAC4F8(v204, 0))
        {
          (**(void (***)(uint64_t, uint64_t, _QWORD, _QWORD, uint64_t))v182)(v182, 3, 0, 0, 1);
          if (!v205)
            (*(void (**)(uint64_t))(*(_QWORD *)v182 + 512))(v182);
          break;
        }
      }
    }
    sub_1C55D1008(4, v182, v181, 3, 0);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v182 + 440))(v182) > v50)
    {
LABEL_561:
      v286 = "Ran out of shared registers after driver constants";
      goto LABEL_571;
    }
    sub_1C55D1008(5, v182, v181, 5, 0);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v182 + 440))(v182) > v50)
    {
      v286 = "Ran out of shared registers after parameters";
      goto LABEL_571;
    }
    v206 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v182 + 176))(v182, 17);
    if (v206)
    {
      if (v206 == 1)
      {
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v182 + 128))(&v325, v182, 17);
        v270 = *(_QWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v325 + 32))(v325);
        v271 = v325;
        v325 = 0;
        if (v271)
          (*(void (**)(void *))(*(_QWORD *)v271 + 8))(v271);
        if (v270)
          goto LABEL_512;
      }
      else
      {
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v182 + 128))(&v325, v182, 17);
        v270 = *(_QWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v325 + 32))(v325);
        v280 = v325;
        v325 = 0;
        if (v280)
          (*(void (**)(void *))(*(_QWORD *)v280 + 8))(v280);
        LODWORD(v50) = v296;
        v200 = v297;
        if (v270)
LABEL_512:
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v182 + 496))(v182, v270, v181, 5);
      }
    }
    sub_1C55D1008(7, v182, v181, 8, 0);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v182 + 440))(v182) > v50)
    {
      v286 = "Ran out of shared registers after invariants";
      goto LABEL_571;
    }
    sub_1C55D1008(6, v182, v181, 7, 0);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v182 + 440))(v182) > v50)
    {
      v286 = "Ran out of shared registers after promoted buffers";
      goto LABEL_571;
    }
    (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v182 + 8))(v182, 19, v289, 1, 0, 0, 5);
    (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v182 + 8))(v182, 20, v289, 1, 0, 0, 5);
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v182 + 128))(&v321, v182, 8);
    (*(void (**)(char **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v182 + 136))(&v309, v182, 8);
    (*(void (**)(void **__return_ptr))(*(_QWORD *)v321 + 16))(&v325);
    v207 = v325;
    if (((*(uint64_t (**)(void *, char *))(*(_QWORD *)v325 + 24))(v325, v309) & 1) == 0)
    {
      do
      {
        v230 = (void **)(*(uint64_t (**)(void *))(*(_QWORD *)v207 + 32))(v207);
        v231 = *v230;
        if (!*v230)
          goto LABEL_445;
        if (v231[16])
        {
          if (v231[16] != 3 || (*((_DWORD *)v231 + 5) & 0x7FFFFFF) != 0)
            goto LABEL_437;
          v232 = *((_DWORD *)v231 + 8);
        }
        else
        {
          if (*((_BYTE **)v231 + 9) != v231 + 72)
            goto LABEL_437;
          v232 = *((_DWORD *)v231 + 8);
          if ((v232 & 0x800000) != 0)
            goto LABEL_437;
        }
        if ((v232 & 0xF) != 0)
          goto LABEL_560;
        if ((v232 & 0x400000) != 0)
        {
          v233 = ***(_QWORD ***)v231;
          v325 = *v230;
          v234 = *(_DWORD *)(v233 + 2520);
          if (v234)
          {
            v235 = *(_QWORD *)(v233 + 2504);
            v236 = v234 - 1;
            v237 = v236 & ((v231 >> 4) ^ (v231 >> 9));
            v238 = (_QWORD *)(v235 + 24 * v237);
            v239 = (_BYTE *)*v238;
            if ((_BYTE *)*v238 == v231)
              goto LABEL_436;
            v241 = 0;
            v242 = 1;
            while (v239 != (_BYTE *)-4096)
            {
              if (v241)
                v243 = 0;
              else
                v243 = v239 == (_BYTE *)-8192;
              if (v243)
                v241 = v238;
              v244 = v237 + v242++;
              v237 = v244 & v236;
              v238 = (_QWORD *)(v235 + 24 * v237);
              v239 = (_BYTE *)*v238;
              if ((_BYTE *)*v238 == v231)
                goto LABEL_436;
            }
            if (v241)
              v245 = v241;
            else
              v245 = v238;
          }
          else
          {
            v245 = 0;
          }
          v238 = sub_1C53D65B8(v233 + 2504, (uint64_t)&v325, (uint64_t *)&v325, v245);
          v246 = v325;
          v238[1] = 0;
          v238[2] = 0;
          *v238 = v246;
LABEL_436:
          if (v238[2])
            goto LABEL_560;
        }
LABEL_437:
        v240 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v182 + 312))(v182);
        (*(void (**)(uint64_t, _BYTE *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v182 + 416))(v182, v231, v240, 0, 9);
        if (v231[16])
        {
          if (v231[16] != 3 || (*((_DWORD *)v231 + 5) & 0x7FFFFFF) != 0)
            goto LABEL_444;
        }
        else if (*((_BYTE **)v231 + 9) != v231 + 72 || (v231[34] & 0x80) != 0)
        {
LABEL_444:
          (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v182 + 544))(v182, *((_QWORD *)v231 - 4), v181);
          goto LABEL_445;
        }
        (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v182 + 552))(v182, v231);
LABEL_445:
        (*(void (**)(void *))(*(_QWORD *)v207 + 40))(v207);
      }
      while (!(*(unsigned int (**)(void *, char *))(*(_QWORD *)v207 + 24))(v207, v309));
    }
    (*(void (**)(void *))(*(_QWORD *)v207 + 8))(v207);
    v208 = v309;
    v309 = 0;
    if (v208)
      (*(void (**)(char *))(*(_QWORD *)v208 + 8))(v208);
    v209 = v321;
    v321 = 0;
    if (v209)
      (*(void (**)(void *))(*(_QWORD *)v209 + 8))(v209);
    v210 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v182 + 440))(v182);
    if (!llvm::Module::getPICLevel((llvm::Module *)v200))
    {
      if (v293 != 29)
        goto LABEL_471;
      v325 = "agx.may_be_called_from_intersection_function";
      LOWORD(v328) = 259;
      v248 = llvm::Module::getNamedMetadata((uint64_t)v200, (uint64_t)&v325);
      if (!v248)
        goto LABEL_471;
      v249 = *(_QWORD *)(*(_QWORD *)(***(_QWORD ***)(v248 + 48)
                                   - 8 * *(unsigned int *)(***(_QWORD ***)(v248 + 48) + 8))
                       + 128);
      v250 = (_QWORD *)(v249 + 24);
      if (*(_DWORD *)(v249 + 32) >= 0x41u)
        v250 = (_QWORD *)*v250;
      if (!*v250)
      {
LABEL_471:
        v329[0] = v182;
        v251 = (void **)sub_1C55D0A50(v320, v329)[6];
        v318[0] = v182;
        v252 = sub_1C55D0A50(v320, v318);
        v253 = v252[6] + 8 * *((unsigned int *)v252 + 14);
        while (v251 != (void **)v253)
        {
          v254 = *v251;
          if (!*v251)
            goto LABEL_493;
          if (v254[16])
          {
            if (v254[16] != 3 || (*((_DWORD *)v254 + 5) & 0x7FFFFFF) != 0)
              goto LABEL_485;
            v255 = *((_DWORD *)v254 + 8);
          }
          else
          {
            if (*((_BYTE **)v254 + 9) != v254 + 72)
              goto LABEL_485;
            v255 = *((_DWORD *)v254 + 8);
            if ((v255 & 0x800000) != 0)
              goto LABEL_485;
          }
          if ((v255 & 0xF) != 0)
            goto LABEL_560;
          if ((v255 & 0x400000) != 0)
          {
            v256 = ***(_QWORD ***)v254;
            v325 = *v251;
            v257 = *(_DWORD *)(v256 + 2520);
            if (v257)
            {
              v258 = *(_QWORD *)(v256 + 2504);
              v259 = v257 - 1;
              v260 = v259 & ((v254 >> 4) ^ (v254 >> 9));
              v261 = (_QWORD *)(v258 + 24 * v260);
              v262 = (_BYTE *)*v261;
              if ((_BYTE *)*v261 == v254)
                goto LABEL_484;
              v264 = 0;
              v265 = 1;
              while (v262 != (_BYTE *)-4096)
              {
                if (v264)
                  v266 = 0;
                else
                  v266 = v262 == (_BYTE *)-8192;
                if (v266)
                  v264 = v261;
                v267 = v260 + v265++;
                v260 = v267 & v259;
                v261 = (_QWORD *)(v258 + 24 * v260);
                v262 = (_BYTE *)*v261;
                if ((_BYTE *)*v261 == v254)
                  goto LABEL_484;
              }
              if (v264)
                v268 = v264;
              else
                v268 = v261;
            }
            else
            {
              v268 = 0;
            }
            v261 = sub_1C53D65B8(v256 + 2504, (uint64_t)&v325, (uint64_t *)&v325, v268);
            v269 = v325;
            v261[1] = 0;
            v261[2] = 0;
            *v261 = v269;
LABEL_484:
            if (v261[2])
              goto LABEL_560;
          }
LABEL_485:
          v263 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v182 + 312))(v182);
          (*(void (**)(uint64_t, _BYTE *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v182 + 416))(v182, v254, v263, 0, 9);
          if (v254[16])
          {
            if (v254[16] == 3 && (*((_DWORD *)v254 + 5) & 0x7FFFFFF) == 0)
              goto LABEL_491;
          }
          else if (*((_BYTE **)v254 + 9) == v254 + 72 && (v254[34] & 0x80) == 0)
          {
LABEL_491:
            (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v182 + 552))(v182, v254);
            goto LABEL_493;
          }
          (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v182 + 544))(v182, *((_QWORD *)v254 - 4), v181);
LABEL_493:
          ++v251;
        }
      }
    }
    v211 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v182 + 440))(v182);
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v182 + 8))(v182, 7, (v211 - v210), 1, 0, 1, 3);
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v182 + 440))(v182) > v50)
    {
      v286 = "Ran out of shared registers after constant literals";
      goto LABEL_571;
    }
    v212 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v182 + 176))(v182, 21);
    if (v212)
    {
      if (v212 == 1)
      {
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v182 + 128))(&v325, v182, 21);
        v272 = *(_QWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v325 + 32))(v325);
        v273 = v325;
        v325 = 0;
        if (v273)
          (*(void (**)(void *))(*(_QWORD *)v273 + 8))(v273);
        if (v272)
          goto LABEL_517;
      }
      else
      {
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v182 + 128))(&v325, v182, 21);
        v272 = *(_QWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v325 + 32))(v325);
        v281 = v325;
        v325 = 0;
        if (v281)
          (*(void (**)(void *))(*(_QWORD *)v281 + 8))(v281);
        LODWORD(v50) = v296;
        v200 = v297;
        if (v272)
LABEL_517:
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v182 + 496))(v182, v272, v181, 11);
      }
    }
    v213 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v182 + 176))(v182, 22);
    if (!v213)
      goto LABEL_399;
    if (v213 == 1)
    {
      (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v182 + 128))(&v325, v182, 22);
      v274 = *(_QWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v325 + 32))(v325);
      v275 = v325;
      v325 = 0;
      if (v275)
        (*(void (**)(void *))(*(_QWORD *)v275 + 8))(v275);
      if (v274)
        goto LABEL_522;
    }
    else
    {
      (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v182 + 128))(&v325, v182, 22);
      v274 = *(_QWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v325 + 32))(v325);
      v282 = v325;
      v325 = 0;
      if (v282)
        (*(void (**)(void *))(*(_QWORD *)v282 + 8))(v282);
      LODWORD(v50) = v296;
      v200 = v297;
      if (v274)
LABEL_522:
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v182 + 496))(v182, v274, v181, 12);
    }
LABEL_399:
    v214 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v182 + 176))(v182, 23);
    if (!v214)
      goto LABEL_400;
    if (v214 == 1)
    {
      (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v182 + 128))(&v325, v182, 23);
      v276 = *(_QWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v325 + 32))(v325);
      v277 = v325;
      v325 = 0;
      if (v277)
        (*(void (**)(void *))(*(_QWORD *)v277 + 8))(v277);
      if (v276)
        goto LABEL_527;
    }
    else
    {
      (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v182 + 128))(&v325, v182, 23);
      v276 = *(_QWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v325 + 32))(v325);
      v283 = v325;
      v325 = 0;
      if (v283)
        (*(void (**)(void *))(*(_QWORD *)v283 + 8))(v283);
      LODWORD(v50) = v296;
      v200 = v297;
      if (v276)
LABEL_527:
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v182 + 496))(v182, v276, v181, 13);
    }
LABEL_400:
    v215 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v182 + 176))(v182, 20);
    if (v215)
    {
      if (v215 == 1)
      {
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v182 + 128))(&v325, v182, 20);
        v278 = *(_QWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v325 + 32))(v325);
        v279 = v325;
        v325 = 0;
        if (v279)
          (*(void (**)(void *))(*(_QWORD *)v279 + 8))(v279);
        if (!v278)
          goto LABEL_401;
      }
      else
      {
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v182 + 128))(&v325, v182, 20);
        v278 = *(_QWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v325 + 32))(v325);
        v284 = v325;
        v325 = 0;
        if (v284)
          (*(void (**)(void *))(*(_QWORD *)v284 + 8))(v284);
        LODWORD(v50) = v296;
        v200 = v297;
        if (!v278)
          goto LABEL_401;
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v182 + 496))(v182, v278, v181, 14);
    }
LABEL_401:
    v325 = "agx.interpolations";
    LOWORD(v328) = 259;
    v216 = llvm::Module::getNamedMetadata((uint64_t)v200, (uint64_t)&v325);
    if (!v216 || (v217 = v216, v218 = *(unsigned int *)(*(_QWORD *)(v216 + 48) + 8), !(_DWORD)v218))
    {
      v221 = 0;
      goto LABEL_462;
    }
    v219 = 0;
    v220 = 0;
    v221 = 0;
    v222 = 8 * v218;
    do
    {
      v223 = *(_QWORD *)(**(_QWORD **)(v217 + 48) + v219);
      v224 = *(_QWORD *)(v223 - 8 * *(unsigned int *)(v223 + 8));
      if (!v224)
        goto LABEL_420;
      v225 = *(_QWORD *)(v224 + 128);
      if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v182 + 184))(v182, 9, v225))
        goto LABEL_420;
      v226 = *(_QWORD *)(v223 - 8 * *(unsigned int *)(v223 + 8) + 8);
      if (*(_BYTE *)v226 == 4)
        v226 = *(_QWORD *)(v226 - 8 * *(unsigned int *)(v226 + 8));
      v227 = *(_QWORD *)(v226 + 128);
      if (*(_DWORD *)(v227 + 32) > 0x40u)
      {
        v228 = **(_QWORD **)(v227 + 24);
        if (!v228)
        {
LABEL_414:
          v221 = v225;
          goto LABEL_415;
        }
      }
      else
      {
        v228 = *(_QWORD *)(v227 + 24);
        if (!v228)
          goto LABEL_414;
      }
      if (v228 == 11)
        v220 = v225;
LABEL_415:
      if (v221)
        v229 = v220 == 0;
      else
        v229 = 1;
      if (!v229)
        goto LABEL_422;
LABEL_420:
      v219 += 8;
    }
    while (v222 != v219);
    if (!v221)
      goto LABEL_423;
LABEL_422:
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v182 + 496))(v182, v221, v181, 15);
    llvm::FunctionGroup::setGlobalResource(v182, 18, v221);
LABEL_423:
    LODWORD(v50) = v296;
    if (v220)
      llvm::FunctionGroup::setGlobalResource(v182, 19, v220);
LABEL_462:
    sub_1C55D1008(9, v182, v181, 16, v221);
    sub_1C55D1008(12, v182, v181, 17, 0);
    sub_1C55D1008(13, v182, v181, 17, 0);
    sub_1C55D1008(14, v182, v181, 17, 0);
    v2 = (uint64_t)v297;
    if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v182 + 448))(v182) > v291)
    {
      v247 = *v297;
      v321 = "Coefficient registers overflow";
      v324 = 259;
      LODWORD(v326) = 0;
      BYTE4(v326) = 0;
      v325 = &off_1E814E960;
      v327[0] = 0;
      v327[1] = &v321;
      v328 = 0;
      llvm::LLVMContext::diagnose(v247, (const llvm::DiagnosticInfo *)&v325);
    }
    v180 = v295 + 1;
  }
  while (v295 + 1 != (uint64_t *)v290);
LABEL_556:
  llvm::GPUFunctionInfoCache::releaseMemory(v9[1]);
  if (__p)
  {
    v301 = __p;
    operator delete(__p);
  }
  MEMORY[0x1CAA32FB4](v298[0], 8);
  sub_1C55D116C((uint64_t)v320);
  return 0;
}

uint64_t sub_1C55D0388(uint64_t a1)
{
  uint64_t v1;
  unsigned int v2;
  _QWORD *v3;
  uint64_t v4;
  int v5;
  BOOL v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  _DWORD v12[26];
  void *v13;
  uint64_t v14;
  _QWORD v15[17];

  v1 = a1;
  v15[16] = *MEMORY[0x1E0C80C00];
  v13 = v15;
  v14 = 0x1000000000;
  if (a1)
  {
    v2 = 0;
    do
    {
      if (v2 >= HIDWORD(v14))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v13, (uint64_t)v15, v2 + 1, 8);
        v2 = v14;
      }
      *((_QWORD *)v13 + v2) = v1;
      v2 = v14 + 1;
      LODWORD(v14) = v14 + 1;
      v1 = *(_QWORD *)(v1 + 8);
    }
    while (v1);
    if (v2)
    {
      do
      {
        while (1)
        {
          v3 = (_QWORD *)*((_QWORD *)v13 + --v2);
          LODWORD(v14) = v2;
          v4 = v3[3];
          v5 = *(unsigned __int8 *)(v4 + 16);
          if (v4)
            v6 = v5 == 5;
          else
            v6 = 0;
          if (v6)
          {
            v7 = *(unsigned __int16 *)(v4 + 18);
            if (v7 != 49 && v7 != 34)
              goto LABEL_28;
            v8 = *(_QWORD *)(v4 + 8);
            if (!v8)
              goto LABEL_28;
            do
            {
              if (v2 >= HIDWORD(v14))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v13, (uint64_t)v15, v2 + 1, 8);
                v2 = v14;
              }
              *((_QWORD *)v13 + v2) = v8;
              v2 = v14 + 1;
              LODWORD(v14) = v14 + 1;
              v8 = *(_QWORD *)(v8 + 8);
            }
            while (v8);
            v5 = *(unsigned __int8 *)(v4 + 16);
          }
          if (v5 == 84)
          {
            v9 = *(_QWORD *)(v4 - 32);
            if (v9)
            {
              if (!*(_BYTE *)(v9 + 16)
                && *(_QWORD *)(v9 + 24) == *(_QWORD *)(v4 + 72)
                && (*(_BYTE *)(v9 + 33) & 0x20) != 0)
              {
                break;
              }
            }
          }
LABEL_28:
          if (!v2)
            goto LABEL_32;
        }
        v10 = *(_DWORD *)(v9 + 36);
        if (!sub_1C47860D0(v10) && (v10 - 1682) > 0x8B)
        {
          v1 = 1;
          if (v10 == 1281 || (v10 - 2177) < 0x80)
            goto LABEL_33;
          goto LABEL_28;
        }
        v1 = 1;
        llvm::SampleInfo::SampleInfo((uint64_t)v12, v10, 1);
        if (*(_QWORD *)(v4 - 32 * (*(_DWORD *)(v4 + 20) & 0x7FFFFFF) + 32 * v12[8]) == *v3)
          goto LABEL_33;
        v2 = v14;
      }
      while ((_DWORD)v14);
    }
LABEL_32:
    v1 = 0;
  }
LABEL_33:
  if (v13 != v15)
    free(v13);
  return v1;
}

uint64_t *sub_1C55D05B8(int8x16_t *a1, uint64_t *a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t *v5;
  int8x16_t *v6;
  uint64_t v8;
  uint64_t v11;
  uint64_t v12;
  char *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  uint64_t *v28;
  uint64_t v29;
  char *v30;
  uint64_t v32;
  uint64_t v33;

  v5 = a2;
  v6 = a1;
  if (a3 == 3)
  {
    if (!sub_1C55D0388(*(_QWORD *)(a1->i64[1] + 8)))
    {
      v16 = v6->i64[1];
      v6->i64[1] = *v5;
      *v5 = v16;
      *v6 = vextq_s8(*v6, *v6, 8uLL);
      return &v6->i64[1];
    }
    v8 = v6->i64[0];
    v6->i64[0] = v6->i64[1];
    v6->i64[1] = v8;
    v6->i64[1] = *v5;
    goto LABEL_6;
  }
  if (a3 == 2)
  {
    v8 = a1->i64[0];
    a1->i64[0] = *a2;
LABEL_6:
    *v5 = v8;
    return v5;
  }
  if (a5 >= a3)
  {
    v17 = &a1->i64[1];
    *a4 = a1->i64[0];
    v18 = a4 + 1;
    if (&a1->u64[1] == (unint64_t *)a2)
    {
      a1->i64[0] = *a2;
    }
    else
    {
      do
      {
        v19 = sub_1C55D0388(*(_QWORD *)(*v17 + 8));
        v20 = *v17;
        if (v19)
        {
          v6->i64[0] = v20;
          v6 = (int8x16_t *)((char *)v6 + 8);
        }
        else
        {
          *v18++ = v20;
        }
        ++v17;
      }
      while (v17 != v5);
      v6->i64[0] = *v5;
      v5 = &v6->i64[1];
      if (v18 <= a4)
        return v5;
    }
    v25 = 0;
    do
    {
      v5[v25] = a4[v25];
      ++v25;
    }
    while (&a4[v25] < v18);
  }
  else
  {
    if (a3 >= 0)
      v11 = a3;
    else
      v11 = a3 + 1;
    v12 = v11 >> 1;
    v13 = &a1->i8[8 * (v11 >> 1)];
    v14 = v13 - 8;
    if ((sub_1C55D0388(*(_QWORD *)(*((_QWORD *)v13 - 1) + 8)) & 1) != 0)
    {
      v15 = v12;
LABEL_25:
      v24 = (uint64_t *)sub_1C55D05B8(v6, v14, v15, a4, a5);
    }
    else
    {
      v21 = 8 - 8 * v12;
      v22 = v12;
      while (v21)
      {
        v15 = v22 - 1;
        v23 = sub_1C55D0388(*(_QWORD *)(v6[-1].i64[v22] + 8));
        v21 += 8;
        v22 = v15;
        if (v23)
        {
          v14 = &v6->i8[-v21];
          goto LABEL_25;
        }
      }
      v24 = (uint64_t *)v6;
    }
    v26 = a3 - v12;
    if (sub_1C55D0388(*(_QWORD *)(v6->i64[v12] + 8)))
    {
      v27 = (char *)(v5 + 1);
      v28 = &v6->i64[v12 + 1];
      while (v28 != v5)
      {
        --v26;
        v29 = *v28++;
        if ((sub_1C55D0388(*(_QWORD *)(v29 + 8)) & 1) == 0)
        {
          v30 = (char *)(v28 - 1);
          goto LABEL_37;
        }
      }
    }
    else
    {
      v30 = v13;
LABEL_37:
      v27 = (char *)sub_1C55D05B8(v30, v5, v26, a4, a5);
    }
    if (v24 == (uint64_t *)v13)
    {
      return (uint64_t *)v27;
    }
    else if (v13 == v27)
    {
      return v24;
    }
    else if (v24 + 1 == (uint64_t *)v13)
    {
      v32 = *v24;
      memmove(v24, v13, v27 - v13);
      v5 = (uint64_t *)((char *)v24 + v27 - v13);
      *v5 = v32;
    }
    else
    {
      if (v13 + 8 != v27)
        return sub_1C4E85DF0(v24, v13, v27);
      v33 = *((_QWORD *)v27 - 1);
      v5 = v24 + 1;
      if (v27 - 8 != (char *)v24)
        memmove(v24 + 1, v24, v27 - 8 - (char *)v24);
      *v24 = v33;
    }
  }
  return v5;
}

void sub_1C55D0898()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C55D08AC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x18uLL);
  *(_QWORD *)v2 = &off_1E8170D68;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_1C55D08E4(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E8170D68;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C55D0904(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;

  sub_1C4774094(*(llvm::SmallPtrSetImplBase **)(a1 + 8), a2);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a2 + 72))(&v12, a2);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)a2 + 80))(&v11, a2);
  v5 = v11;
  v4 = v12;
  if (v12)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v12 + 16))(&v12, v12);
    v6 = v12;
  }
  else
  {
    v6 = 0;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v5 + 16))(&v12, v5);
  v7 = v12;
  while (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 24))(v6, v7) & 1) == 0)
  {
    v8 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    v9 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16), *v8);
    sub_1C4774094(*(llvm::SmallPtrSetImplBase **)(a1 + 8), v9);
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
  }
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  if (v4)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return result;
}

_QWORD *sub_1C55D0A50(_DWORD *a1, _QWORD *a2)
{
  char v4;
  _QWORD *v5;
  int64x2_t v6;
  _QWORD *v8;

  v8 = 0;
  v4 = sub_1C55D0AE8((uint64_t)a1, a2, &v8);
  v5 = v8;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C55D0B9C(a1, (uint64_t)a2, a2, v8);
    *v5 = *a2;
    *((_OWORD *)v5 + 3) = 0u;
    *((_OWORD *)v5 + 5) = 0u;
    *((_OWORD *)v5 + 4) = 0u;
    v5[1] = 1;
    v6 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    *((int64x2_t *)v5 + 1) = v6;
    *((int64x2_t *)v5 + 2) = v6;
    v5[6] = v5 + 8;
    v5[7] = 0x400000000;
  }
  return v5;
}

uint64_t sub_1C55D0AE8(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_10;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  v7 = (_QWORD *)(v3 + 96 * v6);
  v8 = *v7;
  if (*a2 == *v7)
  {
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v9)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v9 = v7;
      v13 = v6 + v10++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 96 * (v13 & v5));
      v8 = *v7;
      if (*a2 == *v7)
        goto LABEL_10;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_10:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C55D0B9C(_DWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v7 = 4;
  else
    v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - a1[1] > v7 >> 3)
  {
    goto LABEL_5;
  }
  sub_1C55D0C5C((uint64_t)a1, v7);
  v9 = 0;
  sub_1C55D0AE8((uint64_t)a1, a3, &v9);
  a4 = v9;
LABEL_5:
  *a1 += 2;
  if (*a4 != -4096)
    --a1[1];
  return a4;
}

void sub_1C55D0C5C(uint64_t a1, unsigned int a2)
{
  unsigned int v2;
  unint64_t v4;
  unint64_t v5;
  int v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  int64x2_t *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  int64x2_t v14;
  _BYTE v15[384];
  uint64_t v16;

  v2 = a2;
  v16 = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v4 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v5 = v4 | (v4 >> 2) | ((v4 | (v4 >> 2)) >> 4);
    v6 = ((v5 | (v5 >> 8)) >> 16) | v5 | (v5 >> 8);
    if ((v6 + 1) > 0x40)
      v2 = v6 + 1;
    else
      v2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v7 = *(_QWORD *)(a1 + 8);
    v8 = *(_DWORD *)(a1 + 16);
    if (v2 > 4)
    {
      *(_QWORD *)(a1 + 8) = operator new(96 * v2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v2;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C55D0EA4(a1, v7, v7 + 96 * v8);
    JUMPOUT(0x1CAA32FB4);
  }
  v9 = 0;
  v10 = (int64x2_t *)v15;
  v14 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    v11 = a1 + v9;
    v12 = *(_QWORD *)(a1 + v9 + 8);
    if ((v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v10->i64[0] = v12;
      v10->i64[1] = 1;
      v10[1] = v14;
      v10[2] = v14;
      sub_1C4E41E00(&v10->u32[2], (unsigned int *)(v11 + 16));
      v10[3].i64[0] = (uint64_t)v10[4].i64;
      v10[3].i64[1] = 0x400000000;
      if (*(_DWORD *)(v11 + 64))
        sub_1C4964480((uint64_t)v10[3].i64, (const void **)(a1 + v9 + 56));
      v13 = *(void **)(a1 + v9 + 56);
      if ((void *)(a1 + v9 + 72) != v13)
        free(v13);
      v10 += 6;
      if ((*(_BYTE *)(v11 + 16) & 1) == 0)
        MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + v9 + 24), 8);
    }
    v9 += 96;
  }
  while (v9 != 384);
  if (v2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    *(_QWORD *)(a1 + 8) = operator new(96 * v2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v2;
  }
  sub_1C55D0EA4(a1, (uint64_t)v15, (uint64_t)v10);
}

void sub_1C55D0EA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  int v6;
  unsigned int v7;
  _QWORD *v8;
  _QWORD *v9;
  int64x2_t *v10;
  uint64_t i64;
  void *v12;
  int64x2_t v13;
  int64x2_t *v14;

  v4 = a2;
  v6 = *(_DWORD *)a1;
  *(_QWORD *)a1 = *(_DWORD *)a1 & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(a1 + 8);
    v9 = (_QWORD *)(a1 + 392);
  }
  else
  {
    v7 = *(_DWORD *)(a1 + 16);
    if (!v7)
      goto LABEL_5;
    v8 = *(_QWORD **)(a1 + 8);
    v9 = &v8[12 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 12;
  }
  while (v8 != v9);
LABEL_5:
  if (a2 != a3)
  {
    v13 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      if ((*(_QWORD *)v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v14 = 0;
        sub_1C55D0AE8(a1, (_QWORD *)v4, &v14);
        v10 = v14;
        v14->i64[0] = *(_QWORD *)v4;
        v10->i64[1] = 1;
        v10[1] = v13;
        v10[2] = v13;
        sub_1C4E41E00(&v10->u32[2], (unsigned int *)(v4 + 8));
        v10[3].i64[0] = (uint64_t)v10[4].i64;
        i64 = (uint64_t)v10[3].i64;
        *(_QWORD *)(i64 + 8) = 0x400000000;
        if (*(_DWORD *)(v4 + 56))
          sub_1C4964480(i64, (const void **)(v4 + 48));
        *(_DWORD *)a1 += 2;
        v12 = *(void **)(v4 + 48);
        if ((void *)(v4 + 64) != v12)
          free(v12);
        if ((*(_BYTE *)(v4 + 8) & 1) == 0)
          MEMORY[0x1CAA32FB4](*(_QWORD *)(v4 + 16), 8);
      }
      v4 += 96;
    }
    while (v4 != a3);
  }
}

uint64_t sub_1C55D1008(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t result;
  uint64_t v16;
  uint64_t v17;

  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(&v17, a2, a1);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(&v16, a2, a1);
  v11 = v16;
  v10 = v17;
  if (v17)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v17 + 16))(&v17, v17);
    v12 = v17;
  }
  else
  {
    v12 = 0;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v11 + 16))(&v17, v11);
  v13 = v17;
  while (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 24))(v12, v13) & 1) == 0)
  {
    v14 = *(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
    if (v14 != a5)
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 496))(a2, v14, a3, a4);
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
  }
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (v10)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  return result;
}

uint64_t sub_1C55D116C(uint64_t a1)
{
  sub_1C55D11A8(a1);
  if ((*(_BYTE *)a1 & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 8), 8);
  return a1;
}

void sub_1C55D11A8(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;

  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v1 = a1 + 8;
    v2 = 4;
  }
  else
  {
    v2 = *(unsigned int *)(a1 + 16);
    if (!(_DWORD)v2)
      return;
    v1 = *(_QWORD *)(a1 + 8);
  }
  v3 = 96 * v2;
  v4 = (_QWORD *)(v1 + 64);
  do
  {
    v5 = *(v4 - 8);
    if (v5 != -4096 && v5 != -8192)
    {
      v6 = (_QWORD *)*(v4 - 2);
      if (v4 != v6)
        free(v6);
      if ((*(_BYTE *)(v4 - 7) & 1) == 0)
        MEMORY[0x1CAA32FB4](*(v4 - 6), 8);
    }
    v4 += 12;
    v3 -= 96;
  }
  while (v3);
}

uint64_t sub_1C55D123C(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeFunctionGroupInfoWrapperPassPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Allocate common store registers";
  *(_QWORD *)(v2 + 8) = 31;
  *(_QWORD *)(v2 + 16) = "common-store-alloc-legacy";
  *(_QWORD *)(v2 + 24) = 25;
  *(_QWORD *)(v2 + 32) = &unk_1ED8077C8;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C55D139C;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C55D12D0(uint64_t a1, char a2)
{
  unint64_t v4;
  unint64_t v6;
  _QWORD *v7;
  _QWORD v8[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED8077C8;
  *(_DWORD *)(a1 + 24) = 4;
  *(_QWORD *)a1 = &off_1E8170DB0;
  *(_BYTE *)(a1 + 28) = a2;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v6 = qword_1ED830BC0[0];
  v4 = atomic_load(&qword_1ED8077D0);
  if (v4 != -1)
  {
    v8[0] = sub_1C55D123C;
    v8[1] = &v6;
    v7 = v8;
    std::__call_once(&qword_1ED8077D0, &v7, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C55D139C()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C55D12D0(v0, 0);
}

void sub_1C55D13CC(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C55D13F0(uint64_t a1, uint64_t a2)
{
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
  return sub_1C4771E64(a2, a2 + 112, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
}

uint64_t sub_1C55D142C(uint64_t a1, uint64_t a2)
{
  int v4;
  void **v5;
  void *v6;
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t i;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  int v24;
  int v25;
  uint64_t *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t j;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  uint64_t *v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t *v59;
  uint64_t *v60;
  uint64_t v61;
  void **v62;
  uint64_t v63;
  void **v64;
  uint64_t v65;
  _QWORD *v66;
  char *v67;
  uint64_t **v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  uint64_t v73;
  int v74;
  unsigned int v75;
  _QWORD *v76;
  uint64_t v77;
  int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v82;
  int v83;
  _QWORD *v84;
  int v85;
  BOOL v86;
  unsigned int v87;
  _QWORD *v88;
  char v89;
  _QWORD *v90;
  int v91;
  int v92;
  unsigned int v93;
  _QWORD *v94;
  uint64_t v95;
  _QWORD *v96;
  int v97;
  BOOL v98;
  unsigned int v99;
  uint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  _QWORD *v103;
  uint64_t v104;
  unint64_t v105;
  uint64_t v108;
  uint64_t v109;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  uint64_t v116;
  uint64_t v117;
  int v118;
  uint64_t v121;
  uint64_t v122;
  uint64_t v124;
  int v125;
  uint64_t v129;
  uint64_t v130;
  int v131;
  uint64_t v134;
  uint64_t v135;
  uint64_t v138;
  uint64_t v139;
  uint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  _QWORD *v146;
  _QWORD *v147;
  char *v148;
  _QWORD *v149;
  int v150;
  int v151;
  BOOL v152;
  unint64_t *v153;
  unint64_t v154;
  uint64_t *v156;
  uint64_t v157;
  llvm::Module *v158;
  unsigned int v159;
  uint64_t *v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  uint64_t v164;
  char *v165;
  uint64_t v166;
  void *v167;
  int v168;
  void **v169;
  _QWORD *v170;
  uint64_t v171;
  _BYTE *v172;
  int v173;
  uint64_t v174;
  int v175;
  uint64_t v176;
  int v177;
  unsigned int v178;
  _QWORD *v179;
  _BYTE *v180;
  uint64_t v181;
  _QWORD *v182;
  int v183;
  BOOL v184;
  unsigned int v185;
  _QWORD *v186;
  char *v187;
  void **v188;
  _BYTE *v189;
  int v190;
  uint64_t v191;
  int v192;
  uint64_t v193;
  int v194;
  unsigned int v195;
  _QWORD *v196;
  _BYTE *v197;
  uint64_t v198;
  _QWORD *v199;
  int v200;
  BOOL v201;
  unsigned int v202;
  _QWORD *v203;
  char *v204;
  int v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t NamedMetadata;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  _QWORD *v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t v224;
  char *v225;
  uint64_t v226;
  char *v227;
  uint64_t v228;
  char *v229;
  uint64_t v230;
  char *v231;
  uint64_t v232;
  char *v233;
  char *v234;
  char *v235;
  char *v236;
  char *v237;
  char *v238;
  char *v239;
  char *v240;
  char *v242;
  unsigned int v243;
  char *v244;
  void **v245;
  unsigned int v246;
  uint64_t *v247;
  unint64_t v248;
  uint64_t v249;
  uint64_t v250[2];
  int v251;
  void *__p;
  void *v253;
  uint64_t v254;
  std::string __dst;
  uint64_t *v256;
  uint64_t *v257;
  uint64_t v258;
  int v259;
  uint64_t v260;
  const char *v261;
  __int16 v262;
  uint64_t v263[4];
  __int16 v264;
  uint64_t v265[4];
  __int16 v266;
  uint64_t v267[5];
  _QWORD v268[49];
  void *v269;
  uint64_t v270;
  _WORD v271[64];
  char *v272;
  unsigned int v273;
  unsigned int v274;
  _QWORD v275[2];
  uint64_t v276;
  uint64_t v277;

  v277 = *MEMORY[0x1E0C80C00];
  if (*(char *)(a2 + 239) < 0)
    sub_1C47EBC30(&__dst, *(void **)(a2 + 216), *(_QWORD *)(a2 + 224));
  else
    __dst = *(std::string *)(a2 + 216);
  v249 = a2;
  if (!std::string::compare(&__dst, 0, 4uLL, "agx1"))
  {
    v4 = 27;
  }
  else if (!std::string::compare(&__dst, 0, 4uLL, "agx2"))
  {
    v4 = 28;
  }
  else if (!std::string::compare(&__dst, 0, 4uLL, "agx3"))
  {
    v4 = 29;
  }
  else
  {
    v4 = 0;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (v4 != 27)
  {
    v242 = "Target triple must be set to agx0/agx1";
LABEL_479:
    llvm::report_fatal_error((llvm *)v242, (const char *)1);
  }
  v5 = **(void ****)(a1 + 8);
  do
  {
    v6 = *v5;
    v5 += 2;
  }
  while (v6 != &llvm::FunctionGroupInfoWrapperPass::ID);
  v7 = *(_QWORD *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v5 - 1) + 96))(*(v5 - 1), &llvm::FunctionGroupInfoWrapperPass::ID)+ 32);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v7 + 16))(v7, v249);
  if (*(_BYTE *)(a1 + 28))
    v8 = 0x4000;
  else
    v8 = 16416;
  v9 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 64))(v7) + 12);
  v248 = *(unsigned int *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 64))(v7) + 4);
  v268[0] = 1;
  for (i = 1; i != 49; i += 12)
    v268[i] = -4096;
  if (v9 >= v8 || v9 == 0)
    v12 = v8;
  else
    v12 = v9;
  v246 = v12;
  v250[0] = 0;
  v250[1] = 0;
  v251 = 0;
  v253 = 0;
  v254 = 0;
  __p = 0;
  sub_1C5E9D34C(v249, (uint64_t)v250);
  sub_1C5E9D674(v249, (uint64_t)v250, 0);
  v269 = v271;
  v270 = 0x1000000000;
  v13 = *(_QWORD *)(v249 + 16);
  if (v13 != v249 + 8)
  {
    v14 = 0;
    do
    {
      if (v13)
        v15 = v13 - 56;
      else
        v15 = 0;
      if (v14 >= HIDWORD(v270))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v269, (uint64_t)v271, v14 + 1, 8);
        v14 = v270;
      }
      *((_QWORD *)v269 + v14) = v15;
      v14 = v270 + 1;
      LODWORD(v270) = v270 + 1;
      v13 = *(_QWORD *)(v13 + 8);
    }
    while (v13 != v249 + 8);
    v16 = (uint64_t *)v269;
    if (v14)
    {
      v244 = (char *)v269 + 8 * v14;
      while (1)
      {
        v247 = v16;
        v17 = *v16;
        v256 = &v260;
        v257 = &v260;
        v258 = 1;
        v259 = 0;
        if ((*(_BYTE *)(v17 + 23) & 0x10) != 0)
        {
          v18 = ***(_QWORD ***)v17;
          v19 = *(_QWORD *)(v18 + 152);
          v20 = *(unsigned int *)(v18 + 168);
          if ((_DWORD)v20)
          {
            LODWORD(v21) = (v20 - 1) & ((v17 >> 4) ^ (v17 >> 9));
            v22 = (uint64_t *)(v19 + 16 * v21);
            v23 = *v22;
            if (*v22 != v17)
            {
              v24 = 1;
              do
              {
                if (v23 == -4096)
                  goto LABEL_43;
                v25 = v21 + v24++;
                v21 = v25 & (v20 - 1);
                v23 = *(_QWORD *)(v19 + 16 * v21);
              }
              while (v23 != v17);
              v22 = (uint64_t *)(v19 + 16 * v21);
            }
          }
          else
          {
LABEL_43:
            v22 = (uint64_t *)(v19 + 16 * v20);
          }
          v26 = (uint64_t *)v22[1];
          v29 = *v26;
          v27 = v26 + 2;
          v28 = v29;
          if (v29 <= 21)
          {
            if (v28 == 14)
            {
              if (*v27 == 0x696C79642E636761 && *(_QWORD *)((char *)v27 + 6) == 0x657361625F62696CLL)
              {
LABEL_114:
                v54 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7);
                v55 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 56))(v7);
                if (v54 != (uint64_t *)v55)
                {
                  v56 = (uint64_t *)v55;
                  do
                  {
                    v57 = *v54++;
                    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v256, v57);
                  }
                  while (v54 != v56);
                }
                goto LABEL_117;
              }
              goto LABEL_64;
            }
            if (v28 == 21)
            {
              v30 = *(_QWORD *)((char *)v27 + 13);
              v31 = *v27 == 0x747865742E636761 && v27[1] == 0x706165685F657275;
              v32 = 0x646165722E706165;
LABEL_60:
              if (v31 && v30 == v32)
                goto LABEL_114;
            }
          }
          else
          {
            if (v28 == 22)
            {
              v30 = *(_QWORD *)((char *)v27 + 14);
              v31 = *v27 == 0x747865742E636761 && v27[1] == 0x706165685F657275;
              v32 = 0x65746972772E7061;
              goto LABEL_60;
            }
            if (v28 == 26)
            {
              if (*v27 == 0x706D61732E636761
                && v27[1] == 0x64726F775F72656CLL
                && v27[2] == 0x657269646E695F73
                && *((_WORD *)v27 + 12) == 29795)
              {
                goto LABEL_114;
              }
            }
            else if (v28 == 38 && !memcmp(v27, "agc.texture_heap.texture_buffer_length", 0x26uLL))
            {
              goto LABEL_114;
            }
          }
        }
LABEL_64:
        v34 = *(_QWORD *)(v17 + 8);
        if (!v34)
          goto LABEL_117;
        do
        {
          v35 = *(_QWORD *)(v34 + 24);
          v272 = (char *)v275;
          v274 = 16;
          v275[0] = v35;
          v36 = 1;
          do
          {
            v37 = *(_QWORD *)&v272[8 * v36-- - 8];
            v273 = v36;
            v38 = *(unsigned __int8 *)(v37 + 16);
            if (v38 > 0xA || ((1 << v38) & 0x728) == 0)
            {
              if (v38 < 0x1C)
                continue;
              v44 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 24))(v7, *(_QWORD *)(*(_QWORD *)(v37 + 40) + 56));
              sub_1C4774094((llvm::SmallPtrSetImplBase *)&v256, v44);
              (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v44 + 72))(v267, v44);
              (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v44 + 80))(v265, v44);
              v45 = v267[0];
              v46 = v265[0];
              if (v267[0])
              {
                (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v267[0] + 16))(v267, v267[0]);
                v47 = v267[0];
              }
              else
              {
                v47 = 0;
              }
              (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v46 + 16))(v267, v46);
              v48 = v267[0];
              while (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v47 + 24))(v47, v48) & 1) == 0)
              {
                v49 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v47 + 32))(v47);
                v50 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 24))(v7, *v49);
                sub_1C4774094((llvm::SmallPtrSetImplBase *)&v256, v50);
                (*(void (**)(uint64_t))(*(_QWORD *)v47 + 40))(v47);
              }
              if (v48)
                (*(void (**)(uint64_t))(*(_QWORD *)v48 + 8))(v48);
              (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
              (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
              if (v45)
                (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
            }
            else
            {
              for (j = *(_QWORD *)(v37 + 8); j; j = *(_QWORD *)(j + 8))
              {
                v41 = *(_QWORD *)(j + 24);
                if (*(_BYTE *)(v41 + 16) != 84
                  || (v42 = *(_QWORD *)(v41 - 32)) == 0
                  || *(_BYTE *)(v42 + 16)
                  || *(_QWORD *)(v42 + 24) != *(_QWORD *)(v41 + 72)
                  || (*(_BYTE *)(v42 + 33) & 0x20) == 0
                  || (v43 = *(_DWORD *)(v42 + 36), (v43 - 1282) >= 0x190)
                  && (v43 - 2824) > 0xB
                  || *(_QWORD *)(v41 + 8))
                {
                  if (v36 >= v274)
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v272, (uint64_t)v275, v36 + 1, 8);
                    v36 = v273;
                  }
                  *(_QWORD *)&v272[8 * v36] = v41;
                  v36 = ++v273;
                }
              }
            }
            v36 = v273;
          }
          while (v36);
          if (v272 != (char *)v275)
            free(v272);
          v34 = *(_QWORD *)(v34 + 8);
        }
        while (v34);
LABEL_117:
        v59 = v256;
        v58 = v257;
        v60 = (uint64_t *)((char *)&v258 + 4);
        if (v257 != v256)
          v60 = &v258;
        v61 = *(unsigned int *)v60;
        v62 = (void **)v257;
        if ((_DWORD)v61)
        {
          v63 = 0;
          while ((unint64_t)v257[v63] >= 0xFFFFFFFFFFFFFFFELL)
          {
            if (v61 == ++v63)
              goto LABEL_288;
          }
          v62 = (void **)&v257[v63];
        }
        v64 = (void **)&v257[v61];
        if (v62 == v64)
          goto LABEL_288;
        v65 = (v17 >> 4) ^ (v17 >> 9);
        v66 = (_QWORD *)(v17 + 72);
        v67 = (char *)*v62;
LABEL_127:
        v68 = *(uint64_t ***)v17;
        if ((*(_BYTE *)(v17 + 34) & 0x40) == 0)
        {
          v69 = 0;
          v70 = 0;
          goto LABEL_132;
        }
        v71 = **v68;
        v272 = (char *)v17;
        v72 = *(_DWORD *)(v71 + 2520);
        if (!v72)
        {
          v147 = 0;
LABEL_259:
          v76 = sub_1C53D65B8(v71 + 2504, (uint64_t)&v272, (uint64_t *)&v272, v147);
          v148 = v272;
          v76[1] = 0;
          v76[2] = 0;
          *v76 = v148;
          goto LABEL_131;
        }
        v73 = *(_QWORD *)(v71 + 2504);
        v74 = v72 - 1;
        v75 = v74 & v65;
        v76 = (_QWORD *)(v73 + 24 * (v74 & v65));
        v77 = *v76;
        if (*v76 != v17)
        {
          v84 = 0;
          v85 = 1;
          while (v77 != -4096)
          {
            if (v84)
              v86 = 0;
            else
              v86 = v77 == -8192;
            if (v86)
              v84 = v76;
            v87 = v75 + v85++;
            v75 = v87 & v74;
            v76 = (_QWORD *)(v73 + 24 * v75);
            v77 = *v76;
            if (*v76 == v17)
              goto LABEL_131;
          }
          if (v84)
            v147 = v84;
          else
            v147 = v76;
          goto LABEL_259;
        }
LABEL_131:
        v69 = (uint64_t *)v76[1];
        v70 = v76[2];
        v68 = *(uint64_t ***)v17;
LABEL_132:
        v78 = *((_DWORD *)v68 + 2) >> 8;
        if (v78 != 2)
        {
          if (v78 == 3)
          {
            switch(v70)
            {
              case 8:
                if (*v69 != 0x6C61636F6C5F6C63)
                  goto LABEL_207;
                v82 = 12;
                goto LABEL_280;
              case 10:
                v113 = *v69;
                v114 = *((unsigned __int16 *)v69 + 4);
                if (v113 != 0x69727261625F6C63 || v114 != 29285)
                  goto LABEL_207;
                v111 = (uint64_t)v67;
                v112 = 20;
                goto LABEL_267;
              case 13:
                if (*v69 == 0x70756F72675F6C63 && *(uint64_t *)((char *)v69 + 5) == 0x785F64695F70756FLL)
                {
                  v111 = (uint64_t)v67;
                  v112 = 21;
                }
                else if (*v69 == 0x70756F72675F6C63 && *(uint64_t *)((char *)v69 + 5) == 0x795F64695F70756FLL)
                {
                  v111 = (uint64_t)v67;
                  v112 = 22;
                }
                else
                {
                  v108 = *v69;
                  v109 = *(uint64_t *)((char *)v69 + 5);
                  if (v108 != 0x70756F72675F6C63 || v109 != 0x7A5F64695F70756FLL)
                  {
LABEL_207:
                    v82 = 9;
                    goto LABEL_280;
                  }
                  v111 = (uint64_t)v67;
                  v112 = 23;
                }
LABEL_267:
                llvm::FunctionGroup::setGlobalResource(v111, v112, v17);
                break;
              case 17:
                v116 = *v69;
                v117 = v69[1];
                v118 = *((unsigned __int8 *)v69 + 16);
                if (v116 != 0x6C61636F6C5F6C63 || v117 != 0x616E7265746E695FLL || v118 != 108)
                  goto LABEL_207;
                v82 = 13;
                goto LABEL_280;
              default:
                goto LABEL_207;
            }
          }
          else
          {
            if (v78 != 64)
            {
              v265[0] = (uint64_t)"Global variables in address space ";
              v266 = 259;
              v264 = 264;
              LODWORD(v263[0]) = v78;
              sub_1C6131AAC(v265, v263, (uint64_t)v267);
              v261 = " are not valid.";
              v262 = 259;
              sub_1C6131AAC(v267, (uint64_t *)&v261, (uint64_t)&v272);
              llvm::report_fatal_error((uint64_t)&v272, 1);
            }
            switch(v70)
            {
              case 11:
                v79 = *v69;
                v80 = *(uint64_t *)((char *)v69 + 3);
                if (v79 != 0x74735F6567616D69 || v80 != 0x65746174735F6567)
                  goto LABEL_480;
                v82 = 0;
                goto LABEL_280;
              case 12:
                v124 = *v69;
                v125 = *((_DWORD *)v69 + 2);
                if (v124 != 0x635F79726F6D656DLL || v125 != 1701340001)
                  goto LABEL_480;
                v82 = 6;
                goto LABEL_280;
              case 13:
                v134 = *v69;
                v135 = *(uint64_t *)((char *)v69 + 5);
                if (v134 != 0x5F72656C706D6173 || v135 != 0x65746174735F7265)
                  goto LABEL_480;
                v82 = 1;
                goto LABEL_280;
              case 15:
                if (*v69 == 0x625F726566667562 && *(uint64_t *)((char *)v69 + 7) == 0x73676E69646E6962)
                {
                  v82 = 3;
                  goto LABEL_280;
                }
                v138 = *v69;
                v139 = *(uint64_t *)((char *)v69 + 7);
                if (v138 != 0x746E6174736E6F63 || v139 != 0x7265766972645F74)
                  goto LABEL_480;
                v272 = (char *)v17;
                v141 = sub_1C558B5F8(v250, &v272);
                if (!v141)
                {
                  if ((sub_1C5EAC4F8(v17, 1) & 1) == 0)
                    goto LABEL_281;
LABEL_278:
                  v82 = 2;
                  goto LABEL_280;
                }
                v142 = (uint64_t *)(v141 - 8 * *(unsigned int *)(v141 + 8));
                v144 = *v142;
                v143 = v142[1];
                v243 = v65;
                if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v144 + 128) + 24) + 8) == 17)
                {
                  if (*(_BYTE *)v143 != 1 || (v145 = *(_QWORD *)(v143 + 128), *(_BYTE *)(v145 + 16) != 16))
                  {
                    v146 = v66;
                    v145 = *(_QWORD *)(*(_QWORD *)(v143 - 8 * *(unsigned int *)(v143 + 8)) + 128);
                    goto LABEL_272;
                  }
                }
                else
                {
                  v145 = *(_QWORD *)(v143 + 128);
                }
                v146 = v66;
LABEL_272:
                v149 = (_QWORD *)(v145 + 24);
                if (*(_DWORD *)(v145 + 32) >= 0x41u)
                  v149 = (_QWORD *)*v149;
                v150 = *(_DWORD *)v149;
                v151 = sub_1C5EAC4F8(v17, 1);
                v152 = v150 != 18 && v151 == 0;
                v66 = v146;
                v65 = v243;
                if (!v152)
                  goto LABEL_278;
                v82 = 4;
                goto LABEL_280;
              case 16:
                v122 = *v69;
                v121 = v69[1];
                if (v122 != 0x695F646165726874 || v121 != 0x746E61697261766ELL)
                  goto LABEL_480;
                v82 = 7;
                goto LABEL_280;
              case 17:
                if (*v69 == 0x705F726576697264 && v69[1] == 0x726574656D617261 && *((_BYTE *)v69 + 16) == 115)
                {
                  v82 = 5;
                }
                else
                {
                  v129 = *v69;
                  v130 = v69[1];
                  v131 = *((unsigned __int8 *)v69 + 16);
                  if (v129 != 0x746E6174736E6F63 || v130 != 0x6C61726574696C5FLL || v131 != 115)
                  {
LABEL_480:
                    v242 = "Unknown section on a global variable";
                    goto LABEL_479;
                  }
                  v82 = 8;
                }
LABEL_280:
                (*(void (**)(char *, uint64_t, uint64_t))(*(_QWORD *)v67 + 144))(v67, v82, v17);
                break;
              default:
                goto LABEL_480;
            }
          }
          goto LABEL_281;
        }
        if (*(_BYTE *)(v17 + 16))
        {
          if (*(_BYTE *)(v17 + 16) == 3 && (*(_DWORD *)(v17 + 20) & 0x7FFFFFF) == 0)
          {
            v83 = *(_DWORD *)(v17 + 32);
            goto LABEL_160;
          }
LABEL_162:
          v272 = v67;
          v88 = sub_1C55D0A50(v268, &v272);
          v89 = *((_BYTE *)v88 + 8);
          v267[0] = v17;
          v245 = v62;
          if ((v89 & 1) != 0)
          {
            v90 = v88 + 2;
            v91 = 4;
            goto LABEL_164;
          }
          v91 = *((_DWORD *)v88 + 6);
          if (!v91)
          {
            v100 = v65;
            v101 = v66;
            v102 = 0;
            goto LABEL_177;
          }
          v90 = (_QWORD *)v88[2];
LABEL_164:
          v92 = v91 - 1;
          v93 = v92 & v65;
          v94 = &v90[v92 & v65];
          v95 = *v94;
          if (v17 != *v94)
          {
            v96 = 0;
            v97 = 1;
            while (v95 != -4096)
            {
              if (v96)
                v98 = 0;
              else
                v98 = v95 == -8192;
              if (v98)
                v96 = v94;
              v99 = v93 + v97++;
              v93 = v99 & v92;
              v94 = &v90[v93];
              v95 = *v94;
              if (v17 == *v94)
                goto LABEL_281;
            }
            v100 = v65;
            v101 = v66;
            if (v96)
              v102 = v96;
            else
              v102 = v94;
LABEL_177:
            v103 = sub_1C4E48DF0((uint64_t)(v88 + 1), (uint64_t)v267, v267, v102);
            *v103 = v267[0];
            v104 = v267[0];
            v105 = *((unsigned int *)v88 + 14);
            if (v105 >= *((unsigned int *)v88 + 15))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v88 + 6), (uint64_t)(v88 + 8), v105 + 1, 8);
              v105 = *((unsigned int *)v88 + 14);
            }
            *(_QWORD *)(v88[6] + 8 * v105) = v104;
            ++*((_DWORD *)v88 + 14);
            v66 = v101;
            v65 = v100;
            v62 = v245;
          }
        }
        else
        {
          if ((_QWORD *)*v66 != v66)
            goto LABEL_162;
          v83 = *(_DWORD *)(v17 + 32);
          if ((v83 & 0x800000) != 0)
            goto LABEL_162;
LABEL_160:
          if ((v83 & 0xF) == 0 && !v70)
            goto LABEL_162;
        }
LABEL_281:
        v153 = (unint64_t *)(v62 + 1);
        while (v153 != (unint64_t *)v64)
        {
          v154 = *v153++;
          v67 = (char *)v154;
          if (v154 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v62 = (void **)(v153 - 1);
            goto LABEL_127;
          }
        }
        v59 = v256;
        v58 = v257;
LABEL_288:
        if (v58 != v59)
          free(v58);
        v16 = v247 + 1;
        if (v247 + 1 == (uint64_t *)v244)
        {
          v16 = (uint64_t *)v269;
          break;
        }
      }
    }
    if (v16 != (uint64_t *)v271)
      free(v16);
  }
  v156 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 48))(v7);
  v157 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 56))(v7);
  v159 = v248;
  v158 = (llvm::Module *)v249;
  if (v156 != (uint64_t *)v157)
  {
    v160 = (uint64_t *)v157;
    v161 = v249 + 272;
    v162 = v248 >> 2;
    do
    {
      v163 = *v156;
      sub_1C55D1008(0, *v156, v161, 0, 0);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v163 + 440))(v163) > v159)
      {
        v242 = "Ran out of shared registers after textures";
        goto LABEL_479;
      }
      sub_1C55D1008(1, v163, v161, 1, 0);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v163 + 440))(v163) > v159)
      {
        v242 = "Ran out of shared registers after samplers";
        goto LABEL_479;
      }
      if (!llvm::Module::getPICLevel(v158))
        sub_1C55D1008(2, v163, v161, 2, 0);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v163 + 440))(v163) > v159
        || (sub_1C55D1008(4, v163, v161, 3, 0),
            (*(unsigned int (**)(uint64_t))(*(_QWORD *)v163 + 440))(v163) > v159))
      {
        v242 = "Ran out of shared registers after driver constants";
        goto LABEL_479;
      }
      sub_1C55D318C((uint64_t **)v158, v163, v159, v161);
      sub_1C55D1008(5, v163, v161, 5, 0);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v163 + 440))(v163) > v159)
      {
        v242 = "Ran out of shared registers after parameters";
        goto LABEL_479;
      }
      v164 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v163 + 176))(v163, 17);
      if (v164)
      {
        if (v164 == 1)
        {
          (*(void (**)(char **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v163 + 128))(&v272, v163, 17);
          v224 = *(_QWORD *)(*(uint64_t (**)(char *))(*(_QWORD *)v272 + 32))(v272);
          v225 = v272;
          v272 = 0;
          if (v225)
            (*(void (**)(char *))(*(_QWORD *)v225 + 8))(v225);
          if (v224)
            goto LABEL_421;
        }
        else
        {
          (*(void (**)(char **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v163 + 128))(&v272, v163, 17);
          v224 = *(_QWORD *)(*(uint64_t (**)(char *))(*(_QWORD *)v272 + 32))(v272);
          v235 = v272;
          v272 = 0;
          if (v235)
            (*(void (**)(char *))(*(_QWORD *)v235 + 8))(v235);
          v159 = v248;
          v158 = (llvm::Module *)v249;
          if (v224)
LABEL_421:
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v163 + 496))(v163, v224, v161, 5);
        }
      }
      sub_1C55D1008(7, v163, v161, 8, 0);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v163 + 440))(v163) > v159)
      {
        v242 = "Ran out of shared registers after invariants";
        goto LABEL_479;
      }
      sub_1C55D1008(6, v163, v161, 7, 0);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v163 + 440))(v163) > v159)
      {
        v242 = "Ran out of shared registers after promoted buffers";
        goto LABEL_479;
      }
      (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v163 + 8))(v163, 19, v162, 1, 0, 0, 5);
      (*(void (**)(uint64_t, uint64_t, unint64_t, uint64_t, _QWORD, _QWORD, uint64_t))(*(_QWORD *)v163 + 8))(v163, 20, v162, 1, 0, 0, 5);
      (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v163 + 128))(&v269, v163, 8);
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v163 + 136))(v267, v163, 8);
      (*(void (**)(char **__return_ptr))(*(_QWORD *)v269 + 16))(&v272);
      v165 = v272;
      if (((*(uint64_t (**)(char *, uint64_t))(*(_QWORD *)v272 + 24))(v272, v267[0]) & 1) == 0)
      {
        do
        {
          v188 = (void **)(*(uint64_t (**)(char *))(*(_QWORD *)v165 + 32))(v165);
          v189 = *v188;
          if (!*v188)
            goto LABEL_375;
          if (v189[16])
          {
            if (v189[16] != 3 || (*((_DWORD *)v189 + 5) & 0x7FFFFFF) != 0)
              goto LABEL_367;
            v190 = *((_DWORD *)v189 + 8);
          }
          else
          {
            if (*((_BYTE **)v189 + 9) != v189 + 72)
              goto LABEL_367;
            v190 = *((_DWORD *)v189 + 8);
            if ((v190 & 0x800000) != 0)
              goto LABEL_367;
          }
          if ((v190 & 0xF) != 0)
            goto LABEL_471;
          if ((v190 & 0x400000) != 0)
          {
            v191 = ***(_QWORD ***)v189;
            v272 = (char *)*v188;
            v192 = *(_DWORD *)(v191 + 2520);
            if (v192)
            {
              v193 = *(_QWORD *)(v191 + 2504);
              v194 = v192 - 1;
              v195 = v194 & ((v189 >> 4) ^ (v189 >> 9));
              v196 = (_QWORD *)(v193 + 24 * v195);
              v197 = (_BYTE *)*v196;
              if ((_BYTE *)*v196 == v189)
                goto LABEL_366;
              v199 = 0;
              v200 = 1;
              while (v197 != (_BYTE *)-4096)
              {
                if (v199)
                  v201 = 0;
                else
                  v201 = v197 == (_BYTE *)-8192;
                if (v201)
                  v199 = v196;
                v202 = v195 + v200++;
                v195 = v202 & v194;
                v196 = (_QWORD *)(v193 + 24 * v195);
                v197 = (_BYTE *)*v196;
                if ((_BYTE *)*v196 == v189)
                  goto LABEL_366;
              }
              if (v199)
                v203 = v199;
              else
                v203 = v196;
            }
            else
            {
              v203 = 0;
            }
            v196 = sub_1C53D65B8(v191 + 2504, (uint64_t)&v272, (uint64_t *)&v272, v203);
            v204 = v272;
            v196[1] = 0;
            v196[2] = 0;
            *v196 = v204;
LABEL_366:
            if (v196[2])
            {
LABEL_471:
              v242 = "Expect a global variable with an initializer or an external global variable declaration.";
              goto LABEL_479;
            }
          }
LABEL_367:
          v198 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v163 + 312))(v163);
          (*(void (**)(uint64_t, _BYTE *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v163 + 416))(v163, v189, v198, 0, 9);
          if (v189[16])
          {
            if (v189[16] != 3 || (*((_DWORD *)v189 + 5) & 0x7FFFFFF) != 0)
              goto LABEL_374;
          }
          else if (*((_BYTE **)v189 + 9) != v189 + 72 || (v189[34] & 0x80) != 0)
          {
LABEL_374:
            (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v163 + 544))(v163, *((_QWORD *)v189 - 4), v161);
            goto LABEL_375;
          }
          (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v163 + 552))(v163, v189);
LABEL_375:
          (*(void (**)(char *))(*(_QWORD *)v165 + 40))(v165);
        }
        while (!(*(unsigned int (**)(char *, uint64_t))(*(_QWORD *)v165 + 24))(v165, v267[0]));
      }
      (*(void (**)(char *))(*(_QWORD *)v165 + 8))(v165);
      v166 = v267[0];
      v267[0] = 0;
      if (v166)
        (*(void (**)(uint64_t))(*(_QWORD *)v166 + 8))(v166);
      v167 = v269;
      v269 = 0;
      if (v167)
        (*(void (**)(void *))(*(_QWORD *)v167 + 8))(v167);
      v168 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v163 + 440))(v163);
      if (!llvm::Module::getPICLevel(v158))
      {
        v265[0] = v163;
        v169 = (void **)sub_1C55D0A50(v268, v265)[6];
        v263[0] = v163;
        v170 = sub_1C55D0A50(v268, v263);
        v171 = v170[6] + 8 * *((unsigned int *)v170 + 14);
        while (1)
        {
          if (v169 == (void **)v171)
          {
            v159 = v248;
            v158 = (llvm::Module *)v249;
            break;
          }
          v172 = *v169;
          if (!*v169)
            goto LABEL_340;
          if (v172[16])
          {
            if (v172[16] != 3 || (*((_DWORD *)v172 + 5) & 0x7FFFFFF) != 0)
              goto LABEL_332;
            v173 = *((_DWORD *)v172 + 8);
          }
          else
          {
            if (*((_BYTE **)v172 + 9) != v172 + 72)
              goto LABEL_332;
            v173 = *((_DWORD *)v172 + 8);
            if ((v173 & 0x800000) != 0)
              goto LABEL_332;
          }
          if ((v173 & 0xF) != 0)
            goto LABEL_471;
          if ((v173 & 0x400000) != 0)
          {
            v174 = ***(_QWORD ***)v172;
            v272 = (char *)*v169;
            v175 = *(_DWORD *)(v174 + 2520);
            if (v175)
            {
              v176 = *(_QWORD *)(v174 + 2504);
              v177 = v175 - 1;
              v178 = v177 & ((v172 >> 4) ^ (v172 >> 9));
              v179 = (_QWORD *)(v176 + 24 * v178);
              v180 = (_BYTE *)*v179;
              if ((_BYTE *)*v179 == v172)
                goto LABEL_331;
              v182 = 0;
              v183 = 1;
              while (v180 != (_BYTE *)-4096)
              {
                if (v182)
                  v184 = 0;
                else
                  v184 = v180 == (_BYTE *)-8192;
                if (v184)
                  v182 = v179;
                v185 = v178 + v183++;
                v178 = v185 & v177;
                v179 = (_QWORD *)(v176 + 24 * v178);
                v180 = (_BYTE *)*v179;
                if ((_BYTE *)*v179 == v172)
                  goto LABEL_331;
              }
              if (v182)
                v186 = v182;
              else
                v186 = v179;
            }
            else
            {
              v186 = 0;
            }
            v179 = sub_1C53D65B8(v174 + 2504, (uint64_t)&v272, (uint64_t *)&v272, v186);
            v187 = v272;
            v179[1] = 0;
            v179[2] = 0;
            *v179 = v187;
LABEL_331:
            if (v179[2])
              goto LABEL_471;
          }
LABEL_332:
          v181 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v163 + 312))(v163);
          (*(void (**)(uint64_t, _BYTE *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v163 + 416))(v163, v172, v181, 0, 9);
          if (v172[16])
          {
            if (v172[16] == 3 && (*((_DWORD *)v172 + 5) & 0x7FFFFFF) == 0)
              goto LABEL_338;
          }
          else if (*((_BYTE **)v172 + 9) == v172 + 72 && (v172[34] & 0x80) == 0)
          {
LABEL_338:
            (*(void (**)(uint64_t, _BYTE *))(*(_QWORD *)v163 + 552))(v163, v172);
            goto LABEL_340;
          }
          (*(void (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)v163 + 544))(v163, *((_QWORD *)v172 - 4), v161);
LABEL_340:
          ++v169;
        }
      }
      v205 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v163 + 440))(v163);
      (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v163 + 8))(v163, 7, (v205 - v168), 1, 0, 1, 3);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v163 + 440))(v163) > v159)
      {
        v242 = "Ran out of shared registers after constant literals";
        goto LABEL_479;
      }
      v206 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v163 + 176))(v163, 21);
      if (v206)
      {
        if (v206 == 1)
        {
          (*(void (**)(char **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v163 + 128))(&v272, v163, 21);
          v226 = *(_QWORD *)(*(uint64_t (**)(char *))(*(_QWORD *)v272 + 32))(v272);
          v227 = v272;
          v272 = 0;
          if (v227)
            (*(void (**)(char *))(*(_QWORD *)v227 + 8))(v227);
          if (v226)
            goto LABEL_426;
        }
        else
        {
          (*(void (**)(char **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v163 + 128))(&v272, v163, 21);
          v226 = *(_QWORD *)(*(uint64_t (**)(char *))(*(_QWORD *)v272 + 32))(v272);
          v236 = v272;
          v272 = 0;
          if (v236)
            (*(void (**)(char *))(*(_QWORD *)v236 + 8))(v236);
          v158 = (llvm::Module *)v249;
          if (v226)
LABEL_426:
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v163 + 496))(v163, v226, v161, 11);
        }
      }
      v207 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v163 + 176))(v163, 22);
      if (!v207)
        goto LABEL_395;
      if (v207 == 1)
      {
        (*(void (**)(char **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v163 + 128))(&v272, v163, 22);
        v228 = *(_QWORD *)(*(uint64_t (**)(char *))(*(_QWORD *)v272 + 32))(v272);
        v229 = v272;
        v272 = 0;
        if (v229)
          (*(void (**)(char *))(*(_QWORD *)v229 + 8))(v229);
        if (v228)
          goto LABEL_431;
      }
      else
      {
        (*(void (**)(char **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v163 + 128))(&v272, v163, 22);
        v228 = *(_QWORD *)(*(uint64_t (**)(char *))(*(_QWORD *)v272 + 32))(v272);
        v237 = v272;
        v272 = 0;
        if (v237)
          (*(void (**)(char *))(*(_QWORD *)v237 + 8))(v237);
        v158 = (llvm::Module *)v249;
        if (v228)
LABEL_431:
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v163 + 496))(v163, v228, v161, 12);
      }
LABEL_395:
      v208 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v163 + 176))(v163, 23);
      if (!v208)
        goto LABEL_396;
      if (v208 == 1)
      {
        (*(void (**)(char **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v163 + 128))(&v272, v163, 23);
        v230 = *(_QWORD *)(*(uint64_t (**)(char *))(*(_QWORD *)v272 + 32))(v272);
        v231 = v272;
        v272 = 0;
        if (v231)
          (*(void (**)(char *))(*(_QWORD *)v231 + 8))(v231);
        if (v230)
          goto LABEL_436;
      }
      else
      {
        (*(void (**)(char **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v163 + 128))(&v272, v163, 23);
        v230 = *(_QWORD *)(*(uint64_t (**)(char *))(*(_QWORD *)v272 + 32))(v272);
        v238 = v272;
        v272 = 0;
        if (v238)
          (*(void (**)(char *))(*(_QWORD *)v238 + 8))(v238);
        v158 = (llvm::Module *)v249;
        if (v230)
LABEL_436:
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v163 + 496))(v163, v230, v161, 13);
      }
LABEL_396:
      v209 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v163 + 176))(v163, 20);
      if (v209)
      {
        if (v209 == 1)
        {
          (*(void (**)(char **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v163 + 128))(&v272, v163, 20);
          v232 = *(_QWORD *)(*(uint64_t (**)(char *))(*(_QWORD *)v272 + 32))(v272);
          v233 = v272;
          v272 = 0;
          if (v233)
            (*(void (**)(char *))(*(_QWORD *)v233 + 8))(v233);
          if (v232)
            goto LABEL_441;
        }
        else
        {
          (*(void (**)(char **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v163 + 128))(&v272, v163, 20);
          v232 = *(_QWORD *)(*(uint64_t (**)(char *))(*(_QWORD *)v272 + 32))(v272);
          v239 = v272;
          v272 = 0;
          if (v239)
            (*(void (**)(char *))(*(_QWORD *)v239 + 8))(v239);
          v158 = (llvm::Module *)v249;
          if (v232)
LABEL_441:
            (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v163 + 496))(v163, v232, v161, 14);
        }
      }
      v272 = "agx.interpolations";
      LOWORD(v276) = 259;
      NamedMetadata = llvm::Module::getNamedMetadata((uint64_t)v158, (uint64_t)&v272);
      if (NamedMetadata)
      {
        v211 = NamedMetadata;
        v212 = *(unsigned int *)(*(_QWORD *)(NamedMetadata + 48) + 8);
        if ((_DWORD)v212)
        {
          v213 = 0;
          v214 = 8 * v212;
          while (1)
          {
            v215 = *(_QWORD *)(**(_QWORD **)(v211 + 48) + v213);
            v216 = *(_QWORD *)(v215 - 8 * *(unsigned int *)(v215 + 8));
            if (v216)
            {
              v217 = *(_QWORD *)(v216 + 128);
              if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v163 + 184))(v163, 9, v217))
              {
                v218 = *(_QWORD *)(v215 - 8 * *(unsigned int *)(v215 + 8) + 8);
                if (*(_BYTE *)v218 == 4)
                  v218 = *(_QWORD *)(v218 - 8 * *(unsigned int *)(v218 + 8));
                v219 = *(_QWORD *)(v218 + 128);
                v220 = (_QWORD *)(v219 + 24);
                if (*(_DWORD *)(v219 + 32) >= 0x41u)
                  v220 = (_QWORD *)*v220;
                if (!*v220)
                  break;
              }
            }
            v213 += 8;
            if (v214 == v213)
              goto LABEL_410;
          }
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v163 + 496))(v163, v217, v161, 15);
          llvm::FunctionGroup::setGlobalResource(v163, 18, v217);
        }
      }
LABEL_410:
      v221 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v163 + 176))(v163, 18);
      if (v221)
      {
        v159 = v248;
        if (v221 == 1)
        {
          (*(void (**)(char **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v163 + 128))(&v272, v163, 18);
          v222 = *(_QWORD *)(*(uint64_t (**)(char *))(*(_QWORD *)v272 + 32))(v272);
          v234 = v272;
          v272 = 0;
          if (v234)
            (*(void (**)(char *))(*(_QWORD *)v234 + 8))(v234);
          v158 = (llvm::Module *)v249;
          goto LABEL_413;
        }
        (*(void (**)(char **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v163 + 128))(&v272, v163, 18);
        v222 = *(_QWORD *)(*(uint64_t (**)(char *))(*(_QWORD *)v272 + 32))(v272);
        v240 = v272;
        v272 = 0;
        if (v240)
          (*(void (**)(char *))(*(_QWORD *)v240 + 8))(v240);
      }
      else
      {
        v222 = 0;
      }
      v159 = v248;
      v158 = (llvm::Module *)v249;
LABEL_413:
      sub_1C55D1008(9, v163, v161, 16, v222);
      sub_1C55D1008(12, v163, v161, 17, 0);
      sub_1C55D1008(13, v163, v161, 17, 0);
      if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v163 + 448))(v163) > v246)
      {
        v223 = *(_QWORD *)v158;
        v269 = "Coefficient registers overflow";
        v271[8] = 259;
        v273 = 0;
        LOBYTE(v274) = 0;
        v272 = (char *)&off_1E814E960;
        v275[0] = 0;
        v275[1] = &v269;
        v276 = 0;
        llvm::LLVMContext::diagnose(v223, (const llvm::DiagnosticInfo *)&v272);
      }
      ++v156;
    }
    while (v156 != v160);
  }
  if (__p)
  {
    v253 = __p;
    operator delete(__p);
  }
  MEMORY[0x1CAA32FB4](v250[0], 8);
  sub_1C55D116C((uint64_t)v268);
  return 0;
}

uint64_t sub_1C55D318C(uint64_t **a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t result;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v22;
  char *v23;
  _QWORD v24[3];

  v8 = sub_1C4FB7E80(a1[14], "agc.dylib_base", 0xEuLL);
  if (!v8 || (v9 = v8, *(_BYTE *)(v8 + 16) != 3) || (*(_DWORD *)(v8 + 32) & 0xFu) - 7 <= 1)
    v9 = 0;
  v10 = sub_1C4FB7E80(a1[14], "agc.texture_heap.read", 0x15uLL);
  if (!v10 || (v11 = v10, *(_BYTE *)(v10 + 16) != 3) || (*(_DWORD *)(v10 + 32) & 0xFu) - 7 <= 1)
    v11 = 0;
  v12 = sub_1C4FB7E80(a1[14], "agc.texture_heap.write", 0x16uLL);
  if (!v12 || (v13 = v12, *(_BYTE *)(v12 + 16) != 3) || (*(_DWORD *)(v12 + 32) & 0xFu) - 7 <= 1)
    v13 = 0;
  v14 = sub_1C4FB7E80(a1[14], "agc.texture_heap.texture_buffer_length", 0x26uLL);
  if (!v14 || (v15 = v14, *(_BYTE *)(v14 + 16) != 3) || (*(_DWORD *)(v14 + 32) & 0xFu) - 7 <= 1)
    v15 = 0;
  if (llvm::Module::getPICLevel((llvm::Module *)a1))
  {
    v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 504))(a2, v9, a4, 4);
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 8))(a2, 5, v16, 1, 0xFFFFFFFFLL, 1, 1);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 504))(a2, v11, a4, 4);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 504))(a2, v13, a4, 4);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 504))(a2, v15, a4, 4);
  }
  else if (v9)
  {
    v18 = 4;
    v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 504))(a2, v9, a4, 4);
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a2 + 8))(a2, 5, v19, 1, 0xFFFFFFFFLL, 1, 1);
    v24[0] = v11;
    v24[1] = v13;
    v24[2] = v15;
    while (1)
    {
      v20 = v18 - 1;
      if (v18 == 1)
        break;
      if (v24[(v18-- - 2)])
      {
        if ((int)v20 >= 1)
        {
          v22 = 0;
          do
            (*(void (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a2 + 504))(a2, v24[v22++], a4, 4);
          while (v20 != v22);
        }
        break;
      }
    }
  }
  if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)a2 + 440))(a2) > a3)
  {
    v23 = "Ran out of shared registers after MSAA address";
    goto LABEL_36;
  }
  sub_1C55D1008(3, a2, a4, 4, 0);
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 440))(a2);
  if (result > a3)
  {
    v23 = "Ran out of shared registers after bindings";
LABEL_36:
    llvm::report_fatal_error((llvm *)v23, (const char *)1);
  }
  return result;
}

llvm *sub_1C55D3498(uint64_t a1)
{
  uint64_t v2;
  llvm *v3;
  llvm::raw_ostream *v4;
  uint64_t v5;
  llvm *v6;
  _WORD *v7;
  uint64_t v8;
  uint64_t v9;
  llvm *v10;
  void *v11;
  llvm *v12;
  uint64_t v13;
  uint64_t v14;
  llvm::raw_ostream *v15;
  llvm::raw_ostream *v16;
  uint64_t v17;
  const char *v18;
  size_t v19;
  _BYTE *v20;
  llvm *v21;
  uint64_t v22;
  int v23;
  llvm *v24;
  llvm *v25;
  _OWORD *v26;
  const char *v27;
  size_t v28;
  _BYTE *v29;
  int v30;
  llvm *result;
  char *v32;
  unint64_t v33;
  const char *v34;
  size_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t *v38;
  uint64_t *v39;
  unint64_t v40;
  const char *v41;
  llvm *v42;
  _DWORD *v43;
  llvm::raw_ostream *v44;
  _WORD *v45;
  llvm::raw_ostream *v46;
  _BYTE *v47;
  llvm *v48;
  void *v49;
  llvm::raw_ostream *v50;
  _WORD *v51;
  llvm *v52;
  _BYTE *v53;
  llvm *v54;
  uint64_t v55;
  llvm *v56;
  _BYTE *v57;
  llvm *v58;
  _DWORD *v59;
  llvm *v60;
  uint64_t v61;
  llvm::raw_ostream *v62;
  uint64_t v63;
  uint64_t v64;
  llvm *v65;
  uint64_t v66;
  _BYTE *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;

  v2 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 - 8 * *(unsigned int *)(*(_QWORD *)a1 + 8)) + 128) + 40);
  v3 = llvm::dbgs((llvm *)a1);
  v4 = v3;
  v5 = *((_QWORD *)v3 + 4);
  if ((unint64_t)(*((_QWORD *)v3 + 3) - v5) > 0x11)
  {
    *(_WORD *)(v5 + 16) = 8306;
    *(_OWORD *)v5 = *(_OWORD *)"  Buffer info for ";
    *((_QWORD *)v3 + 4) += 18;
  }
  else
  {
    v4 = llvm::raw_ostream::write(v3, "  Buffer info for ", 0x12uLL);
  }
  llvm::Value::print(*(llvm::Value **)(*(_QWORD *)(*(_QWORD *)a1 - 8 * *(unsigned int *)(*(_QWORD *)a1 + 8)) + 128), v4, 0);
  v7 = (_WORD *)*((_QWORD *)v4 + 4);
  if (*((_QWORD *)v4 + 3) - (_QWORD)v7 > 1uLL)
  {
    *v7 = 2618;
    *((_QWORD *)v4 + 4) += 2;
  }
  else
  {
    v6 = llvm::raw_ostream::write(v4, ":\n", 2uLL);
  }
  v8 = *(_QWORD *)(a1 + 8);
  v9 = *(unsigned int *)(a1 + 16);
  v10 = llvm::dbgs(v6);
  v11 = (void *)*((_QWORD *)v10 + 4);
  if (*((_QWORD *)v10 + 3) - (_QWORD)v11 > 0xEuLL)
  {
    qmemcpy(v11, "    Intervals:\n", 15);
    *((_QWORD *)v10 + 4) += 15;
    if (!(_DWORD)v9)
      goto LABEL_7;
  }
  else
  {
    v10 = llvm::raw_ostream::write(v10, "    Intervals:\n", 0xFuLL);
    if (!(_DWORD)v9)
      goto LABEL_7;
  }
  v36 = v2 + 272;
  v37 = 32 * v9;
  v38 = (unint64_t *)(v8 + 24);
  do
  {
    if (*v38)
    {
      v39 = (uint64_t *)*(v38 - 3);
      if (v39)
      {
        sub_1C4768AD0(v36, *v39);
        v40 = ((unint64_t)v10 + 7) >> 3;
        if ((_DWORD)v41 == 1)
      }
      else
      {
        v40 = 0;
      }
      v42 = llvm::dbgs(v10);
      v43 = (_DWORD *)*((_QWORD *)v42 + 4);
      if (*((_QWORD *)v42 + 3) - (_QWORD)v43 > 6uLL)
      {
        *(_DWORD *)((char *)v43 + 3) = 1528832032;
        *v43 = 538976288;
        *((_QWORD *)v42 + 4) += 7;
      }
      else
      {
        v42 = llvm::raw_ostream::write(v42, "      [", 7uLL);
      }
      v44 = llvm::raw_ostream::operator<<(v42, *(v38 - 1));
      v45 = (_WORD *)*((_QWORD *)v44 + 4);
      if (*((_QWORD *)v44 + 3) - (_QWORD)v45 > 1uLL)
      {
        *v45 = 8236;
        *((_QWORD *)v44 + 4) += 2;
      }
      else
      {
        v44 = llvm::raw_ostream::write(v44, ", ", 2uLL);
      }
      v46 = llvm::raw_ostream::operator<<(v44, *v38);
      v47 = (_BYTE *)*((_QWORD *)v46 + 4);
      if (*((_BYTE **)v46 + 3) == v47)
      {
        v46 = llvm::raw_ostream::write(v46, ")", 1uLL);
      }
      else
      {
        *v47 = 41;
        ++*((_QWORD *)v46 + 4);
      }
      v48 = llvm::dbgs(v46);
      v49 = (void *)*((_QWORD *)v48 + 4);
      if (*((_QWORD *)v48 + 3) - (_QWORD)v49 > 0xCuLL)
      {
        qmemcpy(v49, ",\taccessing [", 13);
        *((_QWORD *)v48 + 4) += 13;
      }
      else
      {
        v48 = llvm::raw_ostream::write(v48, ",\taccessing [", 0xDuLL);
      }
      v50 = llvm::raw_ostream::operator<<(v48, *(v38 - 2));
      v51 = (_WORD *)*((_QWORD *)v50 + 4);
      if (*((_QWORD *)v50 + 3) - (_QWORD)v51 > 1uLL)
      {
        *v51 = 8236;
        *((_QWORD *)v50 + 4) += 2;
      }
      else
      {
        v50 = llvm::raw_ostream::write(v50, ", ", 2uLL);
      }
      v52 = llvm::dbgs(v50);
      if (v39)
      {
        v52 = sub_1C5E21910(v52, *(v38 - 2) + v40, 0, 0, 0);
      }
      else
      {
        v53 = (_BYTE *)*((_QWORD *)v52 + 4);
        if (*((_BYTE **)v52 + 3) == v53)
        {
          v52 = llvm::raw_ostream::write(v52, "?", 1uLL);
        }
        else
        {
          *v53 = 63;
          ++*((_QWORD *)v52 + 4);
        }
      }
      v54 = llvm::dbgs(v52);
      v55 = *((_QWORD *)v54 + 4);
      if ((unint64_t)(*((_QWORD *)v54 + 3) - v55) > 2)
      {
        *(_BYTE *)(v55 + 2) = 40;
        *(_WORD *)v55 = 2345;
        *((_QWORD *)v54 + 4) += 3;
      }
      else
      {
        v54 = llvm::raw_ostream::write(v54, ")\t(", 3uLL);
      }
      v56 = llvm::dbgs(v54);
      if (v39)
      {
        v56 = sub_1C5E21910(v56, v40, 0, 0, 0);
      }
      else
      {
        v57 = (_BYTE *)*((_QWORD *)v56 + 4);
        if (*((_BYTE **)v56 + 3) == v57)
        {
          v56 = llvm::raw_ostream::write(v56, "?", 1uLL);
        }
        else
        {
          *v57 = 63;
          ++*((_QWORD *)v56 + 4);
        }
      }
      v58 = llvm::dbgs(v56);
      v59 = (_DWORD *)*((_QWORD *)v58 + 4);
      if (*((_QWORD *)v58 + 3) - (_QWORD)v59 > 6uLL)
      {
        *(_DWORD *)((char *)v59 + 3) = 695428468;
        *v59 = 1954112032;
        *((_QWORD *)v58 + 4) += 7;
      }
      else
      {
        v58 = llvm::raw_ostream::write(v58, " bytes)", 7uLL);
      }
      v60 = llvm::dbgs(v58);
      v61 = *((_QWORD *)v60 + 4);
      if ((unint64_t)(*((_QWORD *)v60 + 3) - v61) > 0x10)
      {
        *(_BYTE *)(v61 + 16) = 32;
        *(_OWORD *)v61 = *(_OWORD *)",\tinterval size: ";
        *((_QWORD *)v60 + 4) += 17;
      }
      else
      {
        v60 = llvm::raw_ostream::write(v60, ",\tinterval size: ", 0x11uLL);
      }
      v62 = llvm::raw_ostream::operator<<(v60, *v38 - *(v38 - 1));
      v63 = *((_QWORD *)v62 + 4);
      if ((unint64_t)(*((_QWORD *)v62 + 3) - v63) > 8)
      {
        *(_BYTE *)(v63 + 8) = 9;
        *(_QWORD *)v63 = *(_QWORD *)",\tvalue:\t";
        *((_QWORD *)v62 + 4) += 9;
      }
      else
      {
        v62 = llvm::raw_ostream::write(v62, ",\tvalue:\t", 9uLL);
      }
      v64 = *(v38 - 3);
      v65 = llvm::dbgs(v62);
      if (v64)
      {
        llvm::Value::print((llvm::Value *)*(v38 - 3), v65, 0);
      }
      else
      {
        v66 = *((_QWORD *)v65 + 4);
        if ((unint64_t)(*((_QWORD *)v65 + 3) - v66) > 0x10)
        {
          *(_BYTE *)(v66 + 16) = 41;
          *(_OWORD *)v66 = *(_OWORD *)"nullptr (dynamic)";
          *((_QWORD *)v65 + 4) += 17;
        }
        else
        {
          v65 = llvm::raw_ostream::write(v65, "nullptr (dynamic)", 0x11uLL);
        }
      }
      v10 = llvm::dbgs(v65);
      v67 = (_BYTE *)*((_QWORD *)v10 + 4);
      if (*((_BYTE **)v10 + 3) == v67)
      {
        v10 = llvm::raw_ostream::write(v10, "\n", 1uLL);
      }
      else
      {
        *v67 = 10;
        ++*((_QWORD *)v10 + 4);
      }
    }
    v38 += 4;
    v37 -= 32;
  }
  while (v37);
LABEL_7:
  v12 = llvm::dbgs(v10);
  v13 = *((_QWORD *)v12 + 4);
  if ((unint64_t)(*((_QWORD *)v12 + 3) - v13) > 9)
  {
    *(_WORD *)(v13 + 8) = 8250;
    *(_QWORD *)v13 = *(_QWORD *)"    Type: ";
    *((_QWORD *)v12 + 4) += 10;
  }
  else
  {
    v12 = llvm::raw_ostream::write(v12, "    Type: ", 0xAuLL);
  }
  v14 = *(_QWORD *)(a1 + 1112);
  v15 = llvm::dbgs(v12);
  v16 = v15;
  if (v14)
  {
    v15 = (llvm::raw_ostream *)llvm::Type::print(*(llvm::Type **)(a1 + 1112), v15, 0, 0);
    v20 = (_BYTE *)*((_QWORD *)v16 + 4);
    if (*((_BYTE **)v16 + 3) == v20)
    {
      v18 = "\n";
      v15 = v16;
      v19 = 1;
      goto LABEL_14;
    }
    *v20 = 10;
    v69 = *((_QWORD *)v16 + 4) + 1;
  }
  else
  {
    v17 = *((_QWORD *)v15 + 4);
    if ((unint64_t)(*((_QWORD *)v15 + 3) - v17) <= 9)
    {
      v18 = "(nullptr)\n";
      v19 = 10;
LABEL_14:
      v15 = llvm::raw_ostream::write(v15, v18, v19);
      goto LABEL_15;
    }
    *(_WORD *)(v17 + 8) = 2601;
    *(_QWORD *)v17 = *(_QWORD *)"(nullptr)\n";
    v69 = *((_QWORD *)v15 + 4) + 10;
  }
  *((_QWORD *)v16 + 4) = v69;
LABEL_15:
  v21 = llvm::dbgs(v15);
  v22 = *((_QWORD *)v21 + 4);
  if ((unint64_t)(*((_QWORD *)v21 + 3) - v22) > 9)
  {
    *(_WORD *)(v22 + 8) = 8250;
    *(_QWORD *)v22 = *(_QWORD *)"    Size: ";
    *((_QWORD *)v21 + 4) += 10;
  }
  else
  {
    v21 = llvm::raw_ostream::write(v21, "    Size: ", 0xAuLL);
  }
  v23 = *(_DWORD *)(a1 + 1120);
  v24 = llvm::dbgs(v21);
  v25 = v24;
  if (v23 == -1)
  {
    v26 = (_OWORD *)*((_QWORD *)v24 + 4);
    if (*((_QWORD *)v24 + 3) - (_QWORD)v26 <= 0xFuLL)
    {
      v27 = "(uninitialized)\n";
      v28 = 16;
LABEL_22:
      v24 = llvm::raw_ostream::write(v24, v27, v28);
      goto LABEL_23;
    }
    *v26 = *(_OWORD *)"(uninitialized)\n";
    v70 = *((_QWORD *)v24 + 4) + 16;
  }
  else
  {
    v24 = sub_1C5E21910(v24, *(unsigned int *)(a1 + 1120), 0, 0, 0);
    v29 = (_BYTE *)*((_QWORD *)v25 + 4);
    if (*((_BYTE **)v25 + 3) == v29)
    {
      v27 = "\n";
      v24 = v25;
      v28 = 1;
      goto LABEL_22;
    }
    *v29 = 10;
    v70 = *((_QWORD *)v25 + 4) + 1;
  }
  *((_QWORD *)v25 + 4) = v70;
LABEL_23:
  v30 = *(unsigned __int8 *)(a1 + 1125);
  result = llvm::dbgs(v24);
  v32 = (char *)*((_QWORD *)result + 4);
  v33 = *((_QWORD *)result + 3) - (_QWORD)v32;
  if (v30)
  {
    if (v33 <= 0x14)
    {
      v34 = " (unpromotable uses)\n";
      v35 = 21;
      return llvm::raw_ostream::write(result, v34, v35);
    }
    qmemcpy(v32, " (unpromotable uses)\n", 21);
    v68 = *((_QWORD *)result + 4) + 21;
  }
  else
  {
    if (v33 <= 0x16)
    {
      v34 = " (all promotable uses)\n";
      v35 = 23;
      return llvm::raw_ostream::write(result, v34, v35);
    }
    qmemcpy(v32, " (all promotable uses)\n", 23);
    v68 = *((_QWORD *)result + 4) + 23;
  }
  *((_QWORD *)result + 4) = v68;
  return result;
}

uint64_t sub_1C55D3CBC(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeFunctionGroupInfoWrapperPassPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "GPU DMA Promotion";
  *(_QWORD *)(v2 + 8) = 17;
  *(_QWORD *)(v2 + 16) = "dma-promotion";
  *(_QWORD *)(v2 + 24) = 13;
  *(_QWORD *)(v2 + 32) = &unk_1ED807898;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C55D3E68;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C55D3D50(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5;
  unint64_t v7;
  unint64_t v9;
  _QWORD *v10;
  _QWORD v11[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED807898;
  *(_DWORD *)(a1 + 24) = 4;
  *(_QWORD *)a1 = &off_1E8170E50;
  v5 = *(_QWORD *)(a2 + 24);
  if (v5)
  {
    if (v5 == a2)
    {
      *(_QWORD *)(a1 + 80) = a1 + 56;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1 + 56);
    }
    else
    {
      *(_QWORD *)(a1 + 80) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v5 + 16))(v5);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 80) = 0;
  }
  *(_BYTE *)(a1 + 88) = a3;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v9 = qword_1ED830BC0[0];
  v7 = atomic_load(&qword_1ED8078A0);
  if (v7 != -1)
  {
    v11[0] = sub_1C55D3CBC;
    v11[1] = &v9;
    v10 = v11;
    std::__call_once(&qword_1ED8078A0, &v10, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C55D3E68()
{
  uint64_t v0;
  void (**v1)(void);
  _QWORD v3[3];
  _QWORD *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = operator new();
  v4 = 0;
  sub_1C55D3D50(v0, (uint64_t)v3, 0);
  if (v4 == v3)
  {
    v1 = (void (**)(void))(v3[0] + 32);
    goto LABEL_5;
  }
  if (v4)
  {
    v1 = (void (**)(void))(*v4 + 40);
LABEL_5:
    (*v1)();
  }
  return v0;
}

void sub_1C55D3F18(llvm::Pass *this)
{
  char *v2;
  char *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E8170E50;
  v2 = (char *)this + 56;
  v3 = (char *)*((_QWORD *)this + 10);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  llvm::Pass::~Pass(this);
}

void sub_1C55D3F74(llvm::Pass *this)
{
  char *v2;
  char *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E8170E50;
  v2 = (char *)this + 56;
  v3 = (char *)*((_QWORD *)this + 10);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
    {
LABEL_6:
      llvm::Pass::~Pass(this);
      JUMPOUT(0x1CAA32FC0);
    }
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  goto LABEL_6;
}

void sub_1C55D3FE4(uint64_t a1, llvm::AnalysisUsage *a2)
{
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
  llvm::AnalysisUsage::setPreservesCFG(a2);
}

BOOL sub_1C55D4028(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  void **v6;
  void *v7;
  int v8;
  int v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  int v16;
  llvm::DataLayout *v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t NamedMetadata;
  uint64_t v21;
  _QWORD *v22;
  _BOOL4 v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void **v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  int v40;
  BOOL v41;
  char *v42;
  char v43;
  char v44;
  unsigned int v45;
  unsigned int v46;
  int v47;
  _BOOL4 v48;
  unint64_t v49;
  llvm::Value **NullValue;
  _QWORD *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  BOOL v60;
  _QWORD *v61;
  uint64_t v62;
  char v63;
  uint64_t v64;
  int v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t v69;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  _WORD *v73;
  unsigned int v74;
  uint64_t v75;
  BOOL v76;
  _QWORD *v77;
  _QWORD *v78;
  uint64_t *v79;
  llvm::Type *v80;
  const char *v81;
  uint64_t v82;
  uint64_t v83;
  const char *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  int v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  llvm::Constant *v94;
  uint64_t v95;
  BOOL v96;
  uint64_t v97;
  llvm::Type *v98;
  llvm::UndefValue *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int v104;
  BOOL v105;
  BOOL v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  BOOL v110;
  llvm::Type *v111;
  llvm::UndefValue *v112;
  uint64_t i;
  uint64_t v114;
  int v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  const char *v120;
  uint64_t v121;
  const char *v122;
  unint64_t v123;
  llvm::Type *v124;
  llvm::UndefValue *v125;
  uint64_t v126;
  uint64_t v127;
  const char *v128;
  uint64_t v129;
  const char *v130;
  unint64_t v131;
  uint64_t v132;
  unint64_t v133;
  uint64_t v134;
  llvm::UndefValue *AggregateElement;
  llvm::Type *v136;
  llvm::UndefValue *v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  llvm::Value **v145;
  unsigned int PointerSize;
  uint64_t v147;
  uint64_t j;
  uint64_t v149;
  int v150;
  char *v151;
  uint64_t v152;
  int v153;
  int v154;
  _QWORD *v155;
  _DWORD *v156;
  char *v157;
  uint64_t v158;
  uint64_t *v159;
  uint64_t *v160;
  uint64_t *v161;
  uint64_t v162;
  int v163;
  uint64_t v164;
  int v165;
  unsigned int v166;
  uint64_t **v167;
  uint64_t *v168;
  uint64_t v169;
  llvm::Type *v170;
  uint64_t *v171;
  uint64_t v172;
  int v173;
  uint64_t v174;
  llvm::Value *v175;
  unint64_t v176;
  uint64_t v177;
  int v178;
  _QWORD *v179;
  uint64_t v180;
  uint64_t v181;
  llvm::GetElementPtrInst *v182;
  uint64_t v183;
  uint64_t v184;
  BOOL v185;
  unsigned __int8 *v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  unsigned __int8 ***v190;
  uint64_t v191;
  int v192;
  uint64_t v193;
  unsigned int v194;
  uint64_t v195;
  uint64_t v196;
  unsigned __int8 **v197;
  uint64_t v198;
  unsigned __int8 **v199;
  llvm::PointerType ***v200;
  uint64_t v201;
  llvm::PointerType **v202;
  uint64_t v203;
  unsigned __int8 *v204;
  unsigned __int8 **v205;
  uint64_t v206;
  llvm::PointerType *v207;
  llvm::PointerType *v208;
  llvm::PointerType *v209;
  uint64_t v210;
  uint64_t v211;
  unsigned int v212;
  uint64_t v213;
  int v214;
  uint64_t v215;
  uint64_t v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  _QWORD **v220;
  uint64_t v221;
  uint64_t v222;
  _QWORD *v223;
  void (**v224)(void);
  void **v225;
  void (**v226)(void **);
  char v227;
  int v228;
  uint64_t **v229;
  int v230;
  BOOL v231;
  unsigned int v232;
  uint64_t **v233;
  uint64_t *v234;
  uint64_t v235;
  char v236;
  uint64_t v237;
  uint64_t v238;
  _QWORD *v239;
  uint64_t v240;
  unint64_t v241;
  uint64_t k;
  llvm::PointerType *v243;
  llvm::PointerType *v244;
  char *v245;
  unint64_t v246;
  llvm::ValueAsMetadata *v247;
  llvm::ValueAsMetadata *v248;
  llvm::ValueAsMetadata *v249;
  llvm::ValueAsMetadata *v250;
  uint64_t v251;
  int v252;
  uint64_t v253;
  int v254;
  unsigned int v255;
  llvm::ValueAsMetadata **v256;
  llvm::ValueAsMetadata *v257;
  uint64_t v258;
  llvm::Value *v259;
  uint64_t v260;
  _BOOL4 v261;
  uint64_t v262;
  const llvm::APInt *v263;
  llvm::ConstantInt *v264;
  unsigned int v265;
  char v266;
  llvm::Value *v267;
  llvm::ValueHandleBase *v268;
  const llvm::APInt *v269;
  llvm::ConstantInt *v270;
  llvm::Value *v271;
  llvm::ValueHandleBase *v272;
  const llvm::APInt *v273;
  llvm::ConstantInt *v274;
  unsigned int v275;
  unint64_t v276;
  llvm::Value *v277;
  llvm::ValueHandleBase *v278;
  void *Impl;
  uint64_t *v280;
  uint64_t v281;
  uint64_t v282;
  _QWORD *v283;
  uint64_t *v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t *v287;
  unint64_t *v288;
  uint64_t v289;
  unint64_t *v290;
  unint64_t v291;
  uint64_t *v292;
  uint64_t *v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t *v296;
  unsigned int v297;
  uint64_t v298;
  _QWORD *v299;
  uint64_t v300;
  uint64_t v301;
  unsigned int v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  char v306;
  char v307;
  char *v308;
  char *v309;
  uint64_t *v310;
  uint64_t v311;
  const llvm::APInt *v312;
  uint64_t v313;
  llvm::ConstantInt *v314;
  unsigned int v315;
  unint64_t v316;
  llvm::ValueHandleBase *v317;
  unsigned __int8 *v318;
  llvm::PointerType *v319;
  uint64_t v320;
  unsigned __int8 *v321;
  uint64_t v322;
  char v323;
  char v324;
  char *v325;
  char *v326;
  unsigned __int8 *v327;
  uint64_t v328;
  _QWORD *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t *v332;
  uint64_t v333;
  uint64_t *v334;
  uint64_t v335;
  BOOL v336;
  uint64_t v337;
  uint64_t v338;
  char *v339;
  char *v340;
  unsigned __int8 **v341;
  int v342;
  unsigned __int8 *v343;
  unsigned __int8 *v344;
  char *v345;
  char *v346;
  unsigned __int8 **v347;
  int v348;
  unsigned __int8 *v349;
  unsigned __int8 *v350;
  unsigned __int8 *v351;
  uint64_t *v352;
  uint64_t v353;
  uint64_t v354;
  unint64_t v355;
  char v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t v364;
  _QWORD *v365;
  int v366;
  void (**v367)(void);
  _BOOL4 v368;
  unint64_t v369;
  unsigned int v370;
  unint64_t v371;
  unint64_t v372;
  char *v373;
  int v374;
  uint64_t v375;
  int v376;
  _QWORD *v377;
  uint64_t v378;
  int m;
  uint64_t v380;
  uint64_t v381;
  uint64_t v382;
  void *v383;
  char *v384;
  void **v385;
  char *v386;
  __int128 v387;
  uint64_t v388;
  uint64_t v389;
  unint64_t v390;
  BOOL v391;
  uint64_t *v392;
  uint64_t v393;
  _QWORD *v394;
  uint64_t v395;
  unint64_t v396;
  uint64_t *v397;
  unsigned int v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t *v403;
  unsigned int v404;
  char *v405;
  uint64_t v406;
  unsigned int *v407;
  uint64_t v408;
  uint64_t v409;
  uint64_t *v410;
  _QWORD *v411;
  uint64_t v412;
  unsigned int v413;
  unsigned int v414;
  unint64_t *v415;
  unint64_t v416;
  unint64_t v417;
  uint64_t v418;
  unint64_t v419;
  char v420;
  int64_t v421;
  uint64_t v422;
  uint64_t v423;
  BOOL v424;
  uint64_t v425;
  int v426;
  uint64_t v427;
  uint64_t *v428;
  uint64_t v429;
  uint64_t v430;
  unsigned int *v431;
  uint64_t v432;
  uint64_t v433;
  unint64_t *v434;
  unint64_t *v435;
  llvm::FunctionGroup *v436;
  int v437;
  int v438;
  unint64_t *v439;
  unint64_t v440;
  uint64_t n;
  uint64_t v442;
  uint64_t *v443;
  uint64_t *v444;
  char v445;
  _QWORD *v446;
  int v447;
  uint64_t v448;
  int v449;
  int v450;
  unsigned int v451;
  unint64_t v452;
  unint64_t v453;
  int v454;
  uint64_t *v455;
  uint64_t v456;
  uint64_t *v457;
  uint64_t v458;
  void *v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  unint64_t v463;
  uint64_t v464;
  _QWORD *v465;
  int v466;
  int v467;
  uint64_t v468;
  llvm::UndefValue *ElementPtr;
  int v470;
  _QWORD *v471;
  uint64_t v472;
  uint64_t *v473;
  uint64_t v474;
  uint64_t *v475;
  uint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  uint64_t v481;
  llvm::PointerType *v482;
  llvm::PointerType *v483;
  char *v484;
  unint64_t v485;
  char *v486;
  std::string *v487;
  uint64_t v488;
  llvm::Value *v489;
  uint64_t *v490;
  llvm::Value *v491;
  uint64_t v492;
  llvm::ValueAsMetadata *v493;
  int v494;
  uint64_t v495;
  int v496;
  unsigned int v497;
  uint64_t **v498;
  uint64_t *v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t *v502;
  _QWORD *v503;
  const llvm::APInt *v504;
  uint64_t v505;
  uint64_t v506;
  unsigned __int16 *v507;
  uint64_t v508;
  uint64_t v509;
  unint64_t v511;
  uint64_t v512;
  llvm::ConstantInt *v513;
  unsigned int v514;
  unint64_t v515;
  llvm::Value *v516;
  llvm::ValueHandleBase *v517;
  const llvm::APInt *v518;
  _QWORD *v519;
  uint64_t v520;
  uint64_t v521;
  llvm::ConstantInt *v522;
  unsigned int v523;
  unint64_t v524;
  llvm::Value *v525;
  llvm::ValueHandleBase *v526;
  _QWORD *v527;
  uint64_t v528;
  const llvm::APInt *v529;
  _QWORD *v530;
  uint64_t v531;
  uint64_t v532;
  llvm::ConstantInt *v533;
  unsigned int v534;
  unint64_t v535;
  llvm::Value *v536;
  llvm::ValueHandleBase *v537;
  _QWORD *v538;
  uint64_t v539;
  const llvm::APInt *v540;
  _QWORD *v541;
  uint64_t v542;
  uint64_t v543;
  llvm::ConstantInt *v544;
  unsigned int v545;
  unint64_t v546;
  llvm::Value *v547;
  llvm::ValueHandleBase *v548;
  _QWORD *v549;
  uint64_t v550;
  uint64_t v551;
  uint64_t v552;
  uint64_t v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  llvm::Value **v557;
  uint64_t v558;
  unsigned int *v559;
  uint64_t v560;
  uint64_t v561;
  unint64_t *v562;
  unint64_t *v563;
  unint64_t v564;
  llvm::ValueAsMetadata *v565;
  int v566;
  _QWORD *v567;
  uint64_t v568;
  uint64_t v569;
  unint64_t v570;
  unsigned int v571;
  uint64_t v572;
  unsigned int *v573;
  unsigned int *v574;
  unsigned int v575;
  unint64_t *v577;
  unint64_t v578;
  llvm::Value **v579;
  llvm::Value *v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  unsigned __int8 *v584;
  unsigned __int8 **v585;
  _QWORD *v586;
  uint64_t **v587;
  int v588;
  BOOL v589;
  unsigned int v590;
  uint64_t **v591;
  uint64_t *v592;
  llvm::ConstantPointerNull *v593;
  llvm::PointerType *v594;
  int v595;
  uint64_t v596;
  _QWORD *v597;
  _QWORD *v598;
  unsigned int v599;
  char v600;
  _BOOL4 v601;
  char v602;
  uint64_t *v603;
  _QWORD **v604;
  int v605;
  _QWORD *v606;
  void **v607;
  void **v608;
  unsigned int v609;
  int v610;
  uint64_t v611;
  _QWORD **v612;
  int v613;
  uint64_t *v614;
  uint64_t v615;
  int v616;
  unsigned int v617;
  uint64_t *v618;
  uint64_t v619;
  uint64_t *v620;
  int v621;
  BOOL v622;
  unsigned int v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t *v626;
  int v627;
  uint64_t *v628;
  int v629;
  unsigned int v630;
  uint64_t *v631;
  uint64_t v632;
  uint64_t *v633;
  int v634;
  BOOL v635;
  unsigned int v636;
  uint64_t *v637;
  llvm::UndefValue *v638;
  char v639;
  uint64_t v640;
  unsigned __int8 *v641;
  int v642;
  void *v643;
  _QWORD *v644;
  uint64_t *v645;
  int v646;
  uint64_t v647;
  unsigned int v648;
  uint64_t v649;
  uint64_t v650;
  void **v651;
  unsigned int v652;
  unsigned int v653;
  uint64_t *v654;
  llvm::PointerType *v655;
  llvm::Constant *v656;
  _QWORD *v657;
  llvm::Constant *v658;
  uint64_t v659;
  char v660;
  int v661;
  uint64_t *v662;
  int v663;
  unsigned int v664;
  uint64_t *v665;
  uint64_t v666;
  uint64_t *v667;
  int v668;
  BOOL v669;
  unsigned int v670;
  uint64_t v671;
  int v672;
  uint64_t *v673;
  int v674;
  unsigned int v675;
  uint64_t *v676;
  uint64_t v677;
  uint64_t *v678;
  int v679;
  BOOL v680;
  unsigned int v681;
  uint64_t v682;
  _DWORD *v683;
  uint64_t v684;
  std::string::size_type v685;
  int v686;
  uint64_t *v687;
  int v688;
  unsigned int v689;
  uint64_t *v690;
  uint64_t v691;
  uint64_t *v692;
  int v693;
  BOOL v694;
  unsigned int v695;
  uint64_t *v696;
  uint64_t *v697;
  llvm::PointerType *v698;
  uint64_t **v699;
  uint64_t *v700;
  uint64_t ***v701;
  uint64_t v702;
  uint64_t *v703;
  uint64_t v704;
  uint64_t *v705;
  uint64_t v706;
  int v707;
  uint64_t *v708;
  int v709;
  unsigned int v710;
  uint64_t *v711;
  _QWORD ***v712;
  uint64_t *v713;
  int v714;
  BOOL v715;
  unsigned int v716;
  uint64_t *v717;
  std::string::size_type v718;
  int v719;
  uint64_t *v720;
  int v721;
  unsigned int v722;
  uint64_t *v723;
  uint64_t v724;
  uint64_t *v725;
  int v726;
  BOOL v727;
  unsigned int v728;
  uint64_t *v729;
  uint64_t *v730;
  llvm::GetElementPtrInst *TypeAtIndex;
  unsigned int v732;
  llvm::Value *v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t **v738;
  uint64_t *v739;
  int v740;
  int v741;
  int v742;
  uint64_t *v743;
  int v744;
  unsigned int v745;
  uint64_t *v746;
  _QWORD ***v747;
  uint64_t *v748;
  int v749;
  BOOL v750;
  unsigned int v751;
  uint64_t *v752;
  uint64_t *v753;
  uint64_t v754;
  uint64_t v755;
  uint64_t **v756;
  _QWORD **v757;
  _QWORD **v758;
  int v759;
  uint64_t *v760;
  int v761;
  unsigned int v762;
  uint64_t *v763;
  _QWORD ***v764;
  uint64_t *v765;
  int v766;
  BOOL v767;
  unsigned int v768;
  uint64_t *v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  uint64_t **v775;
  uint64_t *v776;
  int v777;
  int v778;
  uint64_t *v779;
  _QWORD *v780;
  int v781;
  unint64_t *v782;
  unint64_t v783;
  unint64_t v784;
  unint64_t v786;
  uint64_t *v787;
  unint64_t v788;
  uint64_t v789;
  int32x2_t *v790;
  unint64_t v791;
  uint64_t v792;
  unsigned int v793;
  uint64_t v794;
  uint64_t *v795;
  uint64_t v796;
  int v797;
  int v798;
  uint64_t *v799;
  uint64_t *v800;
  uint64_t v801;
  _QWORD **v802;
  uint64_t **v803;
  _QWORD **v804;
  uint64_t *v805;
  std::string::size_type v806;
  char *v807;
  std::string::size_type v808;
  uint64_t v809;
  uint64_t v810;
  BOOL v811;
  _QWORD *v812;
  std::string::size_type v813;
  llvm::Value *v814;
  uint64_t v815;
  int v816;
  _QWORD **v817;
  _QWORD **v818;
  _QWORD **v819;
  llvm::Type **v820;
  uint64_t v821;
  llvm::Type *v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t **v825;
  uint64_t v826;
  uint64_t ***v827;
  uint64_t v828;
  std::string::size_type v829;
  int v830;
  uint64_t *v831;
  int v832;
  unsigned int v833;
  uint64_t *v834;
  _QWORD ***v835;
  uint64_t *v836;
  int v837;
  BOOL v838;
  unsigned int v839;
  uint64_t *v840;
  _QWORD *v841;
  int v842;
  unint64_t *v843;
  unint64_t v844;
  unint64_t v845;
  unint64_t v846;
  uint64_t *v847;
  std::string::size_type v848;
  std::string::size_type v849;
  int32x2_t *v850;
  std::string::size_type v851;
  uint64_t v852;
  unsigned int v853;
  uint64_t v854;
  uint64_t *v855;
  uint64_t v856;
  int v857;
  int v858;
  _QWORD **v859;
  _QWORD *v860;
  uint64_t *v861;
  uint64_t v862;
  char *v863;
  uint64_t v864;
  int v865;
  uint64_t *v866;
  int v867;
  unsigned int v868;
  uint64_t *v869;
  _QWORD ***v870;
  uint64_t *v871;
  int v872;
  BOOL v873;
  unsigned int v874;
  uint64_t *v875;
  _QWORD *v876;
  int v877;
  unint64_t *v878;
  unint64_t v879;
  unint64_t v880;
  unint64_t v881;
  uint64_t *v882;
  unint64_t v883;
  uint64_t v884;
  int32x2_t *v885;
  unint64_t v886;
  uint64_t v887;
  unsigned int v888;
  uint64_t v889;
  uint64_t *v890;
  uint64_t v891;
  int v892;
  int v893;
  _QWORD *v894;
  int v895;
  unint64_t *v896;
  unint64_t v897;
  unint64_t v898;
  unint64_t v899;
  uint64_t *v900;
  unint64_t v901;
  uint64_t v902;
  int32x2_t *v903;
  unint64_t v904;
  uint64_t v905;
  unsigned int v906;
  uint64_t v907;
  uint64_t *v908;
  uint64_t v909;
  int v910;
  int v911;
  _QWORD **v912;
  _QWORD *v913;
  uint64_t v914;
  uint64_t *v915;
  int v916;
  uint64_t *v917;
  int v918;
  unsigned int v919;
  uint64_t *v920;
  uint64_t v921;
  uint64_t *v922;
  int v923;
  BOOL v924;
  unsigned int v925;
  _QWORD *v926;
  llvm::ValueSymbolTable *v927;
  uint64_t v928;
  std::string::size_type v929;
  char v930;
  int v931;
  uint64_t *v932;
  int v933;
  unsigned int v934;
  uint64_t *v935;
  uint64_t v936;
  uint64_t *v937;
  int v938;
  BOOL v939;
  unsigned int v940;
  uint64_t *v941;
  uint64_t v942;
  uint64_t v943;
  uint64_t **v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t v947;
  uint64_t *v948;
  int v949;
  uint64_t *v950;
  int v951;
  unsigned int v952;
  uint64_t *v953;
  uint64_t v954;
  uint64_t *v955;
  int v956;
  BOOL v957;
  unsigned int v958;
  uint64_t *v959;
  uint64_t *v960;
  uint64_t v961;
  int v962;
  uint64_t *v963;
  int v964;
  unsigned int v965;
  uint64_t *v966;
  uint64_t v967;
  uint64_t *v968;
  int v969;
  BOOL v970;
  unsigned int v971;
  uint64_t *v972;
  uint64_t v973;
  uint64_t v974;
  uint64_t **v975;
  uint64_t v976;
  uint64_t v977;
  int v978;
  uint64_t *v979;
  int v980;
  unsigned int v981;
  uint64_t *v982;
  _QWORD *v983;
  uint64_t *v984;
  int v985;
  BOOL v986;
  unsigned int v987;
  uint64_t *v988;
  uint64_t v989;
  unsigned int v990;
  uint64_t v991;
  uint64_t v992;
  uint64_t v993;
  uint64_t v994;
  uint64_t **v995;
  uint64_t *v996;
  int v997;
  int v998;
  uint64_t *v999;
  uint64_t v1000;
  uint64_t v1001;
  uint64_t *v1002;
  uint64_t v1003;
  char *v1004;
  uint64_t v1005;
  llvm::Value *v1006;
  int v1007;
  uint64_t *v1008;
  int v1009;
  unsigned int v1010;
  uint64_t *v1011;
  _QWORD *v1012;
  uint64_t *v1013;
  int v1014;
  BOOL v1015;
  unsigned int v1016;
  uint64_t *v1017;
  _QWORD *v1018;
  int v1019;
  unint64_t *v1020;
  unint64_t v1021;
  unint64_t v1022;
  unint64_t v1023;
  uint64_t *v1024;
  unint64_t v1025;
  uint64_t v1026;
  int32x2_t *v1027;
  unint64_t v1028;
  uint64_t v1029;
  unsigned int v1030;
  uint64_t v1031;
  uint64_t *v1032;
  uint64_t v1033;
  int v1034;
  int v1035;
  std::string::size_type v1036;
  _QWORD *v1037;
  _QWORD *v1038;
  uint64_t v1039;
  unsigned int v1040;
  char *v1041;
  char *v1042;
  uint64_t v1043;
  unint64_t v1044;
  char *v1045;
  uint64_t v1046;
  unint64_t v1047;
  unint64_t *v1048;
  uint64_t v1049;
  int32x2_t *v1050;
  unint64_t v1051;
  uint64_t v1052;
  unsigned int v1053;
  uint64_t v1054;
  uint64_t *v1055;
  uint64_t v1056;
  int v1057;
  int v1058;
  uint64_t v1059;
  void (**v1061)(void);
  unint64_t v1062;
  uint64_t v1063;
  int32x2_t *v1064;
  unint64_t v1065;
  uint64_t v1066;
  unsigned int v1067;
  uint64_t v1068;
  uint64_t *v1069;
  uint64_t v1070;
  int v1071;
  int v1072;
  char *v1073;
  char *v1074;
  uint64_t v1075;
  unint64_t v1076;
  char *v1077;
  uint64_t v1078;
  unint64_t v1079;
  unint64_t *v1080;
  uint64_t v1081;
  int32x2_t *v1082;
  unint64_t v1083;
  uint64_t v1084;
  unsigned int v1085;
  uint64_t v1086;
  uint64_t *v1087;
  uint64_t v1088;
  int v1089;
  int v1090;
  llvm::Value *v1091;
  uint64_t v1092;
  _QWORD *v1093;
  unint64_t v1094;
  uint64_t v1095;
  int32x2_t *v1096;
  unint64_t v1097;
  uint64_t v1098;
  unsigned int v1099;
  uint64_t v1100;
  uint64_t *v1101;
  uint64_t v1102;
  int v1103;
  int v1104;
  uint64_t *v1105;
  uint64_t *v1106;
  uint64_t v1107;
  unint64_t v1109;
  unint64_t *v1110;
  uint64_t v1111;
  int32x2_t *v1112;
  unint64_t v1113;
  uint64_t v1114;
  unsigned int v1115;
  uint64_t v1116;
  uint64_t *v1117;
  uint64_t v1118;
  int v1119;
  int v1120;
  _BYTE *v1121;
  uint64_t v1122;
  char *v1123;
  llvm::ValueAsMetadata **v1125;
  int v1126;
  BOOL v1127;
  unsigned int v1128;
  llvm::ValueAsMetadata **v1129;
  llvm::ValueAsMetadata *v1130;
  uint64_t v1131;
  unint64_t v1132;
  unsigned int v1133;
  uint64_t v1134;
  int v1135;
  _QWORD *v1136;
  int v1137;
  uint64_t v1138;
  char v1139;
  unsigned int v1140;
  char *v1141;
  uint64_t v1142;
  uint64_t v1143;
  uint64_t v1144;
  _BOOL4 v1145;
  uint64_t v1146;
  unsigned int v1147;
  unsigned int v1148;
  unsigned int v1149;
  uint64_t v1150;
  char v1151;
  uint64_t v1152;
  uint64_t v1153;
  int v1154;
  uint64_t inserted;
  uint64_t v1156;
  uint64_t v1157;
  unsigned int v1158;
  unsigned int v1159;
  unint64_t v1160;
  _QWORD *v1161;
  unsigned int v1162;
  uint64_t v1163;
  char v1164;
  llvm::ConstantInt *v1165;
  uint64_t v1166;
  uint64_t v1167;
  uint64_t *v1168;
  uint64_t *v1169;
  uint64_t v1170;
  uint64_t v1171;
  _QWORD *v1172;
  llvm::ConstantInt *v1173;
  _BOOL4 v1174;
  unsigned int v1175;
  uint64_t *v1176;
  _QWORD *v1177;
  uint64_t v1178;
  int v1179;
  uint64_t v1180;
  llvm::GetElementPtrInst *v1181;
  unint64_t v1182;
  int v1183;
  llvm::ValueAsMetadata *v1184;
  llvm::ValueAsMetadata *v1185;
  int v1186;
  llvm::ConstantInt *v1187;
  llvm::ConstantInt *v1188;
  llvm::ConstantInt *v1189;
  void **v1190;
  _QWORD *v1191;
  unint64_t v1192;
  llvm::ValueAsMetadata *v1193;
  uint64_t *v1194;
  unsigned int v1195;
  _QWORD v1196[2];
  unsigned int v1197;
  _QWORD v1198[2];
  int v1199;
  _QWORD v1200[2];
  int v1201;
  std::string __dst;
  uint64_t v1203;
  std::string v1204;
  __int16 v1205;
  void *v1206;
  uint64_t v1207;
  _BYTE v1208[16];
  __int16 v1209;
  _QWORD v1210[3];
  _QWORD *v1211;
  void *v1212;
  void *v1213;
  uint64_t v1214;
  int v1215;
  _WORD v1216[64];
  void *v1217;
  uint64_t v1218;
  _DWORD v1219[4];
  __int16 v1220;
  void *v1221;
  uint64_t v1222;
  int v1223;
  void **v1224;
  __int16 v1225;
  void *v1226;
  void *v1227;
  uint64_t v1228;
  void **v1229;
  _BYTE v1230[240];
  void *v1231[2];
  __int128 v1232;
  __int16 v1233;
  void *v1234;
  void *v1235;
  uint64_t v1236;
  uint64_t v1237;
  __int16 v1238;
  uint64_t v1239;
  uint64_t v1240;
  uint64_t v1241;
  void **v1242;
  void **v1243;
  void *v1244;
  uint64_t v1245;
  _QWORD v1246[2];
  void *v1247;
  void *v1248;
  unsigned __int8 v1249;
  _QWORD v1250[3];
  _QWORD *v1251;
  __int128 v1252;
  __int128 v1253;
  __int16 v1254;
  __int128 v1255;
  uint64_t v1256;
  int v1257;
  _QWORD v1258[8];

  v4 = MEMORY[0x1E0C80A78](a1, a2, a3, a4);
  v1258[5] = *MEMORY[0x1E0C80C00];
  v1163 = v5;
  *(_QWORD *)(v4 + 32) = v5 + 272;
  v6 = **(void ****)(v4 + 8);
  do
  {
    v7 = *v6;
    v6 += 2;
  }
  while (v7 != &llvm::FunctionGroupInfoWrapperPass::ID);
  v1166 = *(_QWORD *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v6 - 1) + 96))(*(v6 - 1), &llvm::FunctionGroupInfoWrapperPass::ID)+ 32);
  if (*(char *)(v1163 + 239) < 0)
    sub_1C47EBC30(&__dst, *(void **)(v1163 + 216), *(_QWORD *)(v1163 + 224));
  else
    __dst = *(std::string *)(v1163 + 216);
  if (!std::string::compare(&__dst, 0, 4uLL, "agx1"))
  {
    v8 = 27;
  }
  else if (!std::string::compare(&__dst, 0, 4uLL, "agx2"))
  {
    v8 = 28;
  }
  else if (!std::string::compare(&__dst, 0, 4uLL, "agx3"))
  {
    v8 = 29;
  }
  else
  {
    v8 = 0;
  }
  *(_DWORD *)(v4 + 40) = v8;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    v8 = *(_DWORD *)(v4 + 40);
  }
  if (v8 == 29)
    v9 = 8;
  else
    v9 = 4;
  *(_DWORD *)(v4 + 44) = 4;
  *(_DWORD *)(v4 + 48) = v9;
  v1132 = *(unsigned int *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1166 + 64))(v1166) + 4);
  v1171 = v4;
  if (byte_1ED807858)
  {
    v1139 = 0;
LABEL_440:
    v236 = 0;
    v10 = (uint64_t *)v1163;
    goto LABEL_441;
  }
  v10 = (uint64_t *)v1163;
  v11 = *(_QWORD *)(v1163 + 32);
  if (v11 == v1163 + 24)
  {
    v1139 = 0;
    v236 = 0;
  }
  else
  {
    v1139 = 0;
    v1192 = (unint64_t)v1208;
    while (1)
    {
      v12 = v11 ? v11 - 56 : 0;
      if (v11 && *(_BYTE *)(v12 + 16) == 3)
      {
        if ((*(_DWORD *)(v12 + 20) & 0x7FFFFFF) == 0)
          goto LABEL_439;
      }
      else if (!*(_BYTE *)(v12 + 16) && *(_QWORD *)(v12 + 72) == v12 + 72 && (*(_BYTE *)(v12 + 34) & 0x80) == 0)
      {
        goto LABEL_439;
      }
      v1134 = v11;
      v13 = *(_QWORD *)(v4 + 80);
      if (v13)
      {
        if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v13 + 48))(v13, v12) & 1) != 0)
          break;
      }
      v14 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v1166 + 24))(v1166, v12);
      v15 = sub_1C5EAC778(v1166, v14, v1163);
      v16 = *(_DWORD *)(v4 + 40);
      v17 = *(llvm::DataLayout **)(v4 + 32);
      v18 = *(_QWORD *)(v4 + 44);
      v1135 = 0;
      if (!llvm::Module::getPICLevel(*(llvm::Module **)(v12 + 40)))
      {
        if (v16 == 29)
        {
          v19 = *(_QWORD *)(v12 + 40);
          v1217 = "agx.may_be_called_from_intersection_function";
          v1220 = 259;
          NamedMetadata = llvm::Module::getNamedMetadata(v19, (uint64_t)&v1217);
          if (NamedMetadata)
          {
            v21 = *(_QWORD *)(*(_QWORD *)(***(_QWORD ***)(NamedMetadata + 48)
                                        - 8 * *(unsigned int *)(***(_QWORD ***)(NamedMetadata + 48) + 8))
                            + 128);
            v22 = (_QWORD *)(v21 + 24);
            if (*(_DWORD *)(v21 + 32) >= 0x41u)
              v22 = (_QWORD *)*v22;
            v23 = *v22 != 0;
          }
          else
          {
            v23 = 0;
          }
          v24 = !v23;
        }
        else
        {
          v24 = 1;
        }
        v1135 = v24;
      }
      v25 = *(_QWORD *)(v12 + 80);
      v1153 = v12 + 72;
      if (v25 != v12 + 72)
      {
        v1162 = v15 & -HIDWORD(v18);
        v26 = 0;
        v1140 = v16 & 0xFFFFFFFE;
        v1149 = v16 - 27;
        v1157 = HIDWORD(v18) - 1;
        v1160 = HIDWORD(v18);
        v1133 = ((4128768 - (__clz(HIDWORD(v18)) << 16)) & 0xFF0000) + 0x10000;
        v1152 = (uint64_t)v17;
        while (1)
        {
          v27 = v26;
          v28 = v25 - 24;
          if (!v25)
            v28 = 0;
          v1217 = v1219;
          v1218 = 0x2000000000;
          v29 = v28 + 40;
          v30 = *(_QWORD *)(v28 + 48);
          if (v30 == v28 + 40)
          {
            v26 = v27;
          }
          else
          {
            v31 = 0;
            do
            {
              v32 = v30 - 24;
              if (!v30)
                v32 = 0;
              if (*(_BYTE *)(v32 + 16) == 59)
                v33 = v32;
              else
                v33 = 0;
              if (v1149 <= 2 && v33)
              {
                if (v31 >= HIDWORD(v1218))
                {
                  v34 = v25;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1217, (uint64_t)v1219, v31 + 1, 8);
                  v25 = v34;
                  v31 = v1218;
                }
                *((_QWORD *)v1217 + v31) = v33;
                v31 = v1218 + 1;
                LODWORD(v1218) = v1218 + 1;
              }
              v30 = *(_QWORD *)(v30 + 8);
            }
            while (v30 != v29);
            v35 = (void **)v1217;
            if (v31)
            {
              v1150 = v25;
              v1190 = (void **)((char *)v1217 + 8 * v31);
              LODWORD(v26) = v27;
              while (1)
              {
                v1234 = *v35;
                v1235 = &v1237;
                v1236 = 0x800000000;
                v1244 = v1246;
                v1245 = 0x1000000000;
                v36 = *((_QWORD *)v1234 + 8);
                if ((llvm::AllocaInst::isArrayAllocation((llvm::AllocaInst *)v1234) & 1) != 0)
                  goto LABEL_72;
                v37 = *(unsigned __int8 *)(v36 + 8);
                if (v37 == 17)
                {
                  v38 = 1;
                  v1180 = 1;
                }
                else
                {
                  if (v37 != 16
                    || *(_DWORD *)(v36 + 12) > 1u
                    || (v36 = **(_QWORD **)(v36 + 16), *(_BYTE *)(v36 + 8) != 17))
                  {
LABEL_72:
                    v47 = 0;
                    v1249 = 0;
                    goto LABEL_73;
                  }
                  v1180 = 2;
                  v38 = 2;
                }
                v1186 = v26;
                sub_1C4768AD0((uint64_t)v17, v36);
                v26 = v39;
                v41 = v40 == 1;
                llvm::DataLayout::getAlignment((uint64_t)v17, v36);
                v44 = v43;
                if (v41)
                v45 = (v1157
                     + (unint64_t)(-(1 << v44) & ((1 << v44)
                                                       - 1
                                                       + ((unint64_t)(v26 + 7) >> 3))))
                    / v1160
                    * v1160;
                v46 = v1162 - v45;
                LODWORD(v26) = v1186;
                if (v1162 < v45)
                  goto LABEL_72;
                v1231[0] = &v1232;
                v1231[1] = (void *)0x1000000000;
                v49 = *(_QWORD *)(v36 + 32);
                NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)(v36 + 24), (llvm::Type *)v42);
                if (v49 != LODWORD(v1231[1]))
                {
                  if (v49 >= LODWORD(v1231[1]))
                    sub_1C4DF60FC((unsigned int *)v1231, v49 - LODWORD(v1231[1]), (uint64_t)NullValue);
                  else
                    LODWORD(v1231[1]) = v49;
                }
                v1226 = &v1228;
                v1227 = (void *)0x800000000;
                v51 = v1234;
                v52 = *((_QWORD *)v1234 + 1);
                if (!v52)
                {
                  v227 = 0;
                  LODWORD(v26) = v1186;
                  goto LABEL_277;
                }
                v1151 = 0;
                v1167 = v38 + 1;
                v1175 = v38 + 2;
                v53 = v38;
                LODWORD(v26) = v1186;
LABEL_85:
                v54 = *(_QWORD *)(v52 + 24);
                v55 = *(unsigned __int8 *)(v54 + 16);
                if (!v54 || v55 != 62)
                  break;
                v56 = *(_DWORD *)(v54 + 20) & 0x7FFFFFF;
                if ((int)v56 - 1 <= v38)
                  goto LABEL_294;
                v57 = v54 - 32 * v56;
                if ((_DWORD)v56 != 1)
                {
                  v58 = 1;
                  while (*(_BYTE *)(*(_QWORD *)(v57 + 32 * v58) + 16) == 16)
                  {
                    if ((_DWORD)v56 == ++v58)
                      goto LABEL_92;
                  }
                  for (i = *(_QWORD *)(v54 + 8); i; i = *(_QWORD *)(i + 8))
                  {
                    v114 = *(_QWORD *)(i + 24);
                    v115 = *(unsigned __int8 *)(v114 + 16);
                    if (v114 && v115 == 77)
                    {
                      while (1)
                      {
                        v114 = *(_QWORD *)(v114 + 8);
                        if (!v114)
                          break;
                        if (*(_BYTE *)(*(_QWORD *)(v114 + 24) + 16) != 60)
                          goto LABEL_294;
                      }
                    }
                    else if (v115 != 60)
                    {
                      goto LABEL_294;
                    }
                  }
                  v116 = v1227;
                  if (v1227 >= (unint64_t)HIDWORD(v1227))
                  {
                    v140 = v52;
                    v141 = v53;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1226, (uint64_t)&v1228, v1227 + 1, 8);
                    v53 = v141;
                    v52 = v140;
                    v116 = v1227;
                  }
                  *((_QWORD *)v1226 + v116) = v54;
                  LODWORD(v1227) = (_DWORD)v1227 + 1;
                  v1151 = 1;
                  goto LABEL_264;
                }
LABEL_92:
                v59 = *(_QWORD *)(v57 + 32 * v53);
                v60 = v59 && *(_BYTE *)(v59 + 16) == 16;
                if (!v60)
                  goto LABEL_294;
                v61 = (_QWORD *)(v59 + 24);
                if (*(_DWORD *)(v59 + 32) >= 0x41u)
                  v61 = (_QWORD *)*v61;
                if (*v61)
                  goto LABEL_294;
                v62 = *(_QWORD *)(v54 + 8);
                if (!v62)
                  goto LABEL_264;
                v26 = 0;
                v63 = 0;
                while (2)
                {
                  v64 = *(_QWORD *)(v62 + 24);
                  v65 = *(unsigned __int8 *)(v64 + 16);
                  if (v65 == 60)
                    goto LABEL_110;
                  if (v65 != 77)
                  {
                    v70 = v65 == 61 && v26 == 0;
                    v26 = *(_QWORD *)(v62 + 24);
                    if (!v70)
                      goto LABEL_296;
                    goto LABEL_121;
                  }
                  v66 = *(_QWORD *)(v64 + 8);
                  if (!v66)
                  {
LABEL_110:
                    v63 = 1;
                    goto LABEL_121;
                  }
                  v67 = 0;
                  v68 = v66;
                  do
                  {
                    ++v67;
                    v68 = *(_QWORD *)(v68 + 8);
                  }
                  while (v68);
                  v69 = v66;
                  while (*(_BYTE *)(*(_QWORD *)(v69 + 24) + 16) == 60)
                  {
                    v69 = *(_QWORD *)(v69 + 8);
                    if (!v69)
                      goto LABEL_110;
                  }
                  if (v67 > 1)
                    goto LABEL_296;
                  v71 = *(_QWORD *)(v66 + 24);
                  if (*(_BYTE *)(v71 + 16) != 61)
                    v71 = 0;
                  if (v71)
                    v26 = v71;
LABEL_121:
                  v62 = *(_QWORD *)(v62 + 8);
                  if (v62)
                    continue;
                  break;
                }
                if ((v63 & 1) != 0)
                {
                  v72 = v1227;
                  if (v1227 >= (unint64_t)HIDWORD(v1227))
                  {
                    v138 = v52;
                    v139 = v53;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1226, (uint64_t)&v1228, v1227 + 1, 8);
                    v53 = v139;
                    v52 = v138;
                    v72 = v1227;
                  }
                  *((_QWORD *)v1226 + v72) = v54;
                  LODWORD(v1227) = (_DWORD)v1227 + 1;
                }
                if (!v26)
                {
LABEL_254:
                  LODWORD(v26) = v1186;
                  goto LABEL_264;
                }
                v73 = *(_WORD **)(v26 - 64);
                if (!v73)
                  goto LABEL_296;
                v74 = *((unsigned __int8 *)v73 + 16);
                if (v74 > 0x14)
                  goto LABEL_296;
                v75 = *(_QWORD *)(v54 - 32 * (*(_DWORD *)(v54 + 20) & 0x7FFFFFF) + 32 * v1167);
                v76 = v75 && *(_BYTE *)(v75 + 16) == 16;
                if (!v76
                  || v74 == 5
                  && (v73[9] != 48 || *(_BYTE *)(*(_QWORD *)&v73[-16 * (*((_DWORD *)v73 + 5) & 0x7FFFFFF)] + 16) != 16))
                {
                  goto LABEL_296;
                }
                v77 = (_QWORD *)(v75 + 24);
                if (*(_DWORD *)(v75 + 32) >= 0x41u)
                  v77 = (_QWORD *)*v77;
                v78 = (_QWORD *)*v77;
                if ((unint64_t)v78 >= *(_QWORD *)(v36 + 32))
                  goto LABEL_296;
                v1142 = v53;
                v1146 = v52;
                v1136 = v78;
                v79 = (uint64_t *)*((_QWORD *)v1231[0] + (_QWORD)v78);
                v1221 = v79;
                v80 = (llvm::Type *)v73;
                if (*(_QWORD *)v73 == *v79)
                  goto LABEL_230;
                sub_1C4768AD0(v1152, *(_QWORD *)v73);
                v83 = v82;
                if ((_DWORD)v81 == 1)
                sub_1C4768AD0(v1152, *v79);
                v86 = v85;
                if ((_DWORD)v84 == 1)
                v73 = v80;
                if (((v83 + 7) & 0xFFFFFFFFFFFFFFF8) > ((v86 + 7) & 0xFFFFFFFFFFFFFFF8)
                  || (*(_DWORD *)(v54 + 20) & 0x7FFFFFFu) - 1 <= v1167)
                {
LABEL_230:
                  v118 = *(_QWORD *)v73;
                  v119 = *v79;
                  if (*(_QWORD *)v73 == *v79 && (*(_DWORD *)(v54 + 20) & 0x7FFFFFF) == v1175)
                  {
LABEL_232:
                    *((_QWORD *)v1231[0] + (_QWORD)v1136) = v73;
                  }
                  else
                  {
                    if (!v118 || (*(_DWORD *)(v118 + 8) & 0xFE) != 0x12)
                      goto LABEL_423;
                    if ((*(_DWORD *)(v54 + 20) & 0x7FFFFFFu) - 1 > v1167)
                    {
                      sub_1C4768AD0(v1152, *(_QWORD *)v73);
                      v1131 = v121;
                      if ((_DWORD)v120 == 1)
                      v123 = sub_1C53E2F94(v1152, *v79);
                      if ((_DWORD)v122 == 1)
                      v73 = v80;
                      if (!(((v1131 + 7) & 0xFFFFFFFFFFFFFFF8) % v123))
                      {
                        if (*(_DWORD *)(v118 + 32))
                        {
                          v133 = 0;
                          v134 = 8 * (_QWORD)v1136;
                          while (1)
                          {
                            v1206 = *(void **)((char *)v1231[0] + 8 * v133 + v134);
                            AggregateElement = llvm::Constant::getAggregateElement((llvm::Constant *)v73, (llvm::Type *)v133);
                            if (!sub_1C55DAB80(v54, AggregateElement, (llvm::UndefValue **)&v1206, v1175, v1152))goto LABEL_423;
                            *(_QWORD *)((char *)v1231[0] + 8 * v133++ + v134) = v1206;
                            v73 = v80;
                            if (v133 >= *(unsigned int *)(v118 + 32))
                              goto LABEL_247;
                          }
                        }
                        goto LABEL_247;
                      }
                      v119 = *v79;
                    }
                    if (*(_QWORD *)(v118 + 24) != v119 || (*(_DWORD *)(v54 + 20) & 0x7FFFFFF) != v1175)
                      goto LABEL_423;
                    if (*(_DWORD *)(v118 + 32))
                    {
                      v124 = 0;
                      do
                      {
                        v125 = llvm::Constant::getAggregateElement((llvm::Constant *)v73, v124);
                        v73 = v80;
                        *((_QWORD *)v1231[0] + (_QWORD)v1136 + (_QWORD)v124) = v125;
                        v124 = (llvm::Type *)((char *)v124 + 1);
                      }
                      while ((unint64_t)v124 < *(unsigned int *)(v118 + 32));
                    }
                  }
LABEL_247:
                  v126 = v1236;
                  if (v1236 >= (unint64_t)HIDWORD(v1236))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1235, (uint64_t)&v1237, v1236 + 1, 8);
                    v126 = v1236;
                  }
                  *((_QWORD *)v1235 + v126) = v26;
                  LODWORD(v1236) = v1236 + 1;
                  LODWORD(v26) = v1186;
                  v53 = v1142;
                  v52 = v1146;
                  goto LABEL_264;
                }
                if (sub_1C55DAB80(v54, v80, (llvm::UndefValue **)&v1221, v1175, v1152))
                {
                  v73 = v1221;
                  goto LABEL_232;
                }
LABEL_423:
                v228 = 0;
LABEL_378:
                LODWORD(v26) = v1186;
LABEL_379:
                if (v1226 != &v1228)
                  free(v1226);
                if (v1231[0] != &v1232)
                  free(v1231[0]);
                v1249 = v228;
                v17 = (llvm::DataLayout *)v1152;
                if (v228)
                {
                  v212 = v1236;
                  if ((_DWORD)v1236)
                  {
                    while (1)
                    {
                      v213 = *((_QWORD *)v1235 + v212 - 1);
                      LODWORD(v1236) = v212 - 1;
                      if (v213)
                      {
                        if (*(_BYTE *)(v213 + 16) == 61)
                          break;
                      }
                      v1229 = 0;
                      llvm::RecursivelyDeleteTriviallyDeadInstructions(v213, 0, 0, &v1226);
                      v225 = v1229;
                      if (v1229 == &v1226)
                      {
                        v226 = (void (**)(void **))((char *)v1226 + 32);
                        v225 = &v1226;
                        LODWORD(v26) = v1186;
LABEL_407:
                        (*v226)(v225);
                        goto LABEL_408;
                      }
                      LODWORD(v26) = v1186;
LABEL_404:
                      if (v225)
                      {
                        v226 = (void (**)(void **))((char *)*v225 + 40);
                        goto LABEL_407;
                      }
LABEL_408:
                      v212 = v1236;
                      if (!(_DWORD)v1236)
                      {
                        v47 = v1249;
                        goto LABEL_73;
                      }
                    }
                    v214 = *(_DWORD *)(v213 + 20);
                    if ((v214 & 0x40000000) != 0)
                    {
                      v216 = *(_QWORD *)(v213 - 8);
                      v215 = v214 & 0x7FFFFFF;
                    }
                    else
                    {
                      v215 = v214 & 0x7FFFFFF;
                      v216 = v213 - 32 * v215;
                    }
                    v217 = *(_QWORD *)(v213 - 64);
                    v218 = *(_QWORD *)(v213 - 32);
                    if (v215)
                    {
                      v219 = 32 * v215;
                      v220 = (_QWORD **)(v216 + 16);
                      do
                      {
                        if (*(v220 - 2))
                        {
                          **v220 = *(v220 - 1);
                          v221 = (uint64_t)*(v220 - 1);
                          if (v221)
                            *(_QWORD *)(v221 + 16) = *v220;
                        }
                        *(v220 - 2) = 0;
                        v220 += 4;
                        v219 -= 32;
                      }
                      while (v219);
                    }
                    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v213 + 40) + 40, (uint64_t ***)v213);
                    v222 = *(_QWORD *)(v213 + 24);
                    v223 = *(_QWORD **)(v213 + 32);
                    *v223 = v222;
                    *(_QWORD *)(v222 + 8) = v223;
                    *(_QWORD *)(v213 + 24) = 0;
                    *(_QWORD *)(v213 + 32) = 0;
                    llvm::Value::deleteValue((llvm::Value *)v213);
                    *((_QWORD *)&v1232 + 1) = 0;
                    llvm::RecursivelyDeleteTriviallyDeadInstructions(v217, 0, 0, v1231);
                    if (*((void ***)&v1232 + 1) == v1231)
                    {
                      v224 = (void (**)(void))((char *)v1231[0] + 32);
                      LODWORD(v26) = v1186;
LABEL_402:
                      (*v224)();
                    }
                    else
                    {
                      LODWORD(v26) = v1186;
                      if (*((_QWORD *)&v1232 + 1))
                      {
                        v224 = (void (**)(void))(**((_QWORD **)&v1232 + 1) + 40);
                        goto LABEL_402;
                      }
                    }
                    v1224 = 0;
                    llvm::RecursivelyDeleteTriviallyDeadInstructions(v218, 0, 0, &v1221);
                    v225 = v1224;
                    if (v1224 == &v1221)
                    {
                      v226 = (void (**)(void **))((char *)v1221 + 32);
                      v225 = &v1221;
                      goto LABEL_407;
                    }
                    goto LABEL_404;
                  }
                  v47 = 1;
                }
                else
                {
                  v47 = 0;
                }
LABEL_73:
                v48 = v47 != 0;
                if (v1244 != v1246)
                  free(v1244);
                if (v1235 != &v1237)
                  free(v1235);
                v26 = v26 | v48;
                if (++v35 == v1190)
                {
                  v35 = (void **)v1217;
                  v25 = v1150;
                  goto LABEL_432;
                }
              }
              if (!v54 || v55 != 77)
              {
                if (v54 && v55 == 61)
                {
                  v1148 = v46;
                  v101 = v53;
                  v102 = v52;
                  v103 = *(_QWORD *)(v54 - 64);
                  v104 = *(unsigned __int8 *)(v103 + 16);
                  if (v103)
                    v105 = v104 == 13;
                  else
                    v105 = 0;
                  if (!v105)
                  {
                    if (v103)
                      v106 = v104 > 0x14;
                    else
                      v106 = 1;
                    if (v106
                      || v104 == 5
                      && (*(_WORD *)(v103 + 18) != 48
                       || *(_BYTE *)(*(_QWORD *)(v103 - 32 * (*(_DWORD *)(v103 + 20) & 0x7FFFFFF)) + 16) != 16))
                    {
                      goto LABEL_424;
                    }
                    v107 = *(uint64_t **)v1231[0];
                    v108 = *(_QWORD *)v103;
                    v109 = **(_QWORD **)v1231[0];
                    if (*(_QWORD *)v103 == v109)
                    {
                      *(_QWORD *)v1231[0] = v103;
                      LODWORD(v26) = v1186;
                    }
                    else
                    {
                      if (v108)
                        v110 = (*(_DWORD *)(v108 + 8) & 0xFE) == 18;
                      else
                        v110 = 0;
                      if (!v110)
                      {
                        if (MEMORY[0x18] != v109)
                          goto LABEL_423;
                        LODWORD(v26) = v1186;
                        if (MEMORY[0x20])
                        {
                          v111 = 0;
                          do
                          {
                            v112 = llvm::Constant::getAggregateElement((llvm::Constant *)v103, v111);
                            *((_QWORD *)v1231[0] + (_QWORD)v111) = v112;
                            v111 = (llvm::Type *)((char *)v111 + 1);
                          }
                          while ((unint64_t)v111 < MEMORY[0x20]);
                        }
                        goto LABEL_261;
                      }
                      v1144 = *(_QWORD *)v103;
                      sub_1C4768AD0(v1152, v108);
                      v1138 = v129;
                      if ((_DWORD)v128 == 1)
                      v131 = sub_1C53E2F94(v1152, *v107);
                      if ((_DWORD)v130 == 1)
                      LODWORD(v26) = v1186;
                      if (!(((v1138 + 7) & 0xFFFFFFFFFFFFFFF8) % v131) && *(_DWORD *)(v1144 + 32))
                      {
                        v136 = 0;
                        while (1)
                        {
                          v1221 = (void *)*((_QWORD *)v1231[0] + (_QWORD)v136);
                          v137 = llvm::Constant::getAggregateElement((llvm::Constant *)v103, v136);
                          if (!sub_1C55DAB80(0, v137, (llvm::UndefValue **)&v1221, 0, v1152))
                            break;
                          *((_QWORD *)v1231[0] + (_QWORD)v136) = v1221;
                          v136 = (llvm::Type *)((char *)v136 + 1);
                          if ((unint64_t)v136 >= *(unsigned int *)(v1144 + 32))
                            goto LABEL_261;
                        }
LABEL_424:
                        v228 = 0;
                        goto LABEL_379;
                      }
                    }
                  }
LABEL_261:
                  v132 = v1236;
                  if (v1236 >= (unint64_t)HIDWORD(v1236))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1235, (uint64_t)&v1237, v1236 + 1, 8);
                    v132 = v1236;
                  }
                  *((_QWORD *)v1235 + v132) = v54;
                  LODWORD(v1236) = v1236 + 1;
                  v52 = v102;
                  v53 = v101;
                  v46 = v1148;
                  goto LABEL_264;
                }
                if (v55 == 84)
                {
                  v117 = *(_QWORD *)(v54 - 32);
                  if (v117)
                  {
                    if (!*(_BYTE *)(v117 + 16)
                      && *(_QWORD *)(v117 + 24) == *(_QWORD *)(v54 + 72)
                      && (*(_BYTE *)(v117 + 33) & 0x20) != 0
                      && (*(_DWORD *)(v117 + 36) - 167) < 2)
                    {
                      goto LABEL_264;
                    }
                  }
                }
LABEL_294:
                v228 = 0;
                goto LABEL_379;
              }
              v87 = *(_QWORD *)(v54 + 8);
              if (!v87)
                goto LABEL_254;
              v88 = 0;
              while (1)
              {
                v89 = *(_QWORD *)(v87 + 24);
                v90 = *(unsigned __int8 *)(v89 + 16);
                if (v89 && v90 == 61)
                {
                  v91 = *(_QWORD *)(v54 + 8);
                  if (v91)
                  {
                    v92 = 0;
                    do
                    {
                      ++v92;
                      v91 = *(_QWORD *)(v91 + 8);
                    }
                    while (v91);
                  }
                  else
                  {
                    v92 = 0;
                  }
                  if (*(unsigned __int8 *)(*(_QWORD *)(v89 - 64) + 16) >= 0x15u)
                    v94 = 0;
                  else
                    v94 = *(llvm::Constant **)(v89 - 64);
                  if (v92 == 1 && v94)
                  {
                    v95 = *(_QWORD *)v94;
                    v96 = *(_QWORD *)v94 && (*(_DWORD *)(*(_QWORD *)v94 + 8) & 0xFE) == 18;
                    if (v96 && *(_QWORD *)(v95 + 24) == **(_QWORD **)v1231[0])
                    {
                      v1137 = v88;
                      v1143 = v53;
                      v1147 = v46;
                      v97 = v52;
                      if (*(_DWORD *)(v95 + 32))
                      {
                        v98 = 0;
                        do
                        {
                          v99 = llvm::Constant::getAggregateElement(v94, v98);
                          *((_QWORD *)v1231[0] + (_QWORD)v98) = v99;
                          v98 = (llvm::Type *)((char *)v98 + 1);
                        }
                        while ((unint64_t)v98 < *(unsigned int *)(v95 + 32));
                      }
                      v100 = v1236;
                      if (v1236 >= (unint64_t)HIDWORD(v1236))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1235, (uint64_t)&v1237, v1236 + 1, 8);
                        v100 = v1236;
                      }
                      v52 = v97;
                      v53 = v1143;
                      v88 = v1137;
                      *((_QWORD *)v1235 + v100) = v89;
                      LODWORD(v1236) = v1236 + 1;
                      v46 = v1147;
                    }
                  }
                }
                else
                {
                  if (v90 != 84)
                  {
                    if (v90 != 60)
                      goto LABEL_296;
                    v87 = *(_QWORD *)(v87 + 8);
                    v88 = 1;
                    if (!v87)
                      goto LABEL_251;
                    continue;
                  }
                  v93 = *(_QWORD *)(v89 - 32);
                  if (!v93
                    || *(_BYTE *)(v93 + 16)
                    || *(_QWORD *)(v93 + 24) != *(_QWORD *)(v89 + 72)
                    || (*(_BYTE *)(v93 + 33) & 0x20) == 0)
                  {
                    goto LABEL_296;
                  }
                  if ((*(_DWORD *)(v93 + 36) - 167) > 1)
                  {
                    v228 = 0;
                    goto LABEL_378;
                  }
                }
                v87 = *(_QWORD *)(v87 + 8);
                if (!v87)
                {
                  if ((v88 & 1) == 0)
                    goto LABEL_254;
LABEL_251:
                  v127 = v1227;
                  if (v1227 >= (unint64_t)HIDWORD(v1227))
                  {
                    v142 = v52;
                    v143 = v53;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1226, (uint64_t)&v1228, v1227 + 1, 8);
                    v53 = v143;
                    v52 = v142;
                    v127 = v1227;
                  }
                  LODWORD(v26) = v1186;
                  *((_QWORD *)v1226 + v127) = v54;
                  LODWORD(v1227) = (_DWORD)v1227 + 1;
LABEL_264:
                  v52 = *(_QWORD *)(v52 + 8);
                  if (!v52)
                  {
                    v51 = v1234;
                    v17 = (llvm::DataLayout *)v1152;
                    v227 = v1151;
LABEL_277:
                    v144 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v1166 + 24))(v1166, *(_QWORD *)(v51[5] + 56));
                    v145 = llvm::ConstantArray::get((llvm::PoisonValue *)v36, (llvm::Type *)v1231[0], LODWORD(v1231[1]));
                    if (v1140 == 28 && (v227 & 1) != 0)
                    {
                      PointerSize = llvm::DataLayout::getPointerSize(v17, 2u);
                      v147 = *(_QWORD *)(*(_QWORD *)(*((_QWORD *)v1234 + 5) + 56) + 40);
                      for (j = *(_QWORD *)(v147 + 16); j != v147 + 8; j = *(_QWORD *)(j + 8))
                      {
                        v149 = j - 56;
                        if (!j)
                          v149 = 0;
                        if ((*(_DWORD *)(*(_QWORD *)v149 + 8) & 0xFFFFFF00) == 0x200
                          && (*(_BYTE *)(v149 + 80) & 2) == 0)
                        {
                          if (j && *(_BYTE *)(v149 + 16) == 3)
                          {
                            if ((*(_DWORD *)(v149 + 20) & 0x7FFFFFF) != 0)
                              goto LABEL_299;
                          }
                          else if (*(_BYTE *)(v149 + 16)
                                 || *(_QWORD *)(v149 + 72) != v149 + 72
                                 || (*(_BYTE *)(v149 + 34) & 0x80) != 0)
                          {
                            goto LABEL_299;
                          }
                        }
                      }
                      if (v1162 < PointerSize)
                      {
                        v228 = 0;
                        goto LABEL_379;
                      }
LABEL_299:
                      v151 = (char *)operator new(0x78uLL);
                      *((_DWORD *)v151 + 13) = *((_DWORD *)v151 + 13) & 0x38000000 | 1;
                      *(_QWORD *)v151 = 0;
                      *((_QWORD *)v151 + 1) = 0;
                      *((_QWORD *)v151 + 2) = 0;
                      *((_QWORD *)v151 + 3) = v151 + 32;
                      v1221 = "promotedConstantAlloca";
                      v1225 = 259;
                      v1168 = (uint64_t *)(v151 + 32);
                      llvm::GlobalVariable::GlobalVariable((uint64_t)(v151 + 32), v147, (llvm::PointerType *)v36, 1, 7, (uint64_t)v145, (uint64_t)&v1221, 0, 0, 0x100000002, 0);
                      if (v1135)
                      {
                        v152 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v144 + 312))(v144);
                        (*(void (**)(uint64_t, uint64_t *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v144 + 416))(v144, v1168, v152, 0, 9);
                        v153 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v144 + 440))(v144);
                        (*(void (**)(uint64_t, _QWORD, llvm::DataLayout *))(*(_QWORD *)v144 + 544))(v144, *(_QWORD *)v151, v17);
                        v154 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v144 + 440))(v144);
                        (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v144 + 8))(v144, 7, (v154 - v153), 1, 0, 1, 3);
                      }
                      *((_DWORD *)v151 + 16) = *((_DWORD *)v151 + 16) & 0xFFC0FFFF | v1133;
LABEL_306:
                      if (!(_DWORD)v1227)
                      {
                        v228 = 1;
                        goto LABEL_379;
                      }
                      v170 = (llvm::Type *)(*(_DWORD *)(*v1168 + 8) >> 8);
                      v171 = (uint64_t *)v1226;
                      v1176 = (uint64_t *)((char *)v1226 + 8 * v1227);
                      while (2)
                      {
                        sub_1C4773D54((uint64_t)&v1221, *v171, 0, 0, 0);
                        v172 = *v171;
                        v173 = *(unsigned __int8 *)(*v171 + 16);
                        if (*v171 && v173 == 62)
                        {
                          v174 = *(_DWORD *)(v172 + 20) & 0x7FFFFFF;
                          v175 = (llvm::Value *)&v1214;
                          v1212 = &v1214;
                          v1213 = (void *)0x100000000;
                          v176 = -(-32 * v174 + 32 * v1180);
                          if (v176 >= 0x21)
                          {
                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1212, (uint64_t)&v1214, (uint64_t)v176 >> 5, 8);
                            v177 = v1213;
                            v175 = (llvm::Value *)v1212;
                            v178 = (int)v1213;
                          }
                          else
                          {
                            v177 = 0;
                            v178 = 0;
                          }
                          if (v172 - 32 * v174 + 32 * v1180 != v172)
                          {
                            v179 = (_QWORD *)((char *)v175 + 8 * v177);
                            v180 = 32 * v1180 - 32 * v174;
                            do
                            {
                              *v179++ = *(_QWORD *)(v172 + v180);
                              v180 += 32;
                            }
                            while (v180);
                            v175 = (llvm::Value *)v1212;
                          }
                          v181 = v178 + (v176 >> 5);
                          LODWORD(v1213) = v178 + (v176 >> 5);
                          v182 = (llvm::GetElementPtrInst *)v1168[3];
                          if ((*(_BYTE *)(v172 + 17) & 2) != 0)
                          {
                            v1209 = 257;
                            v183 = sub_1C53901A0((uint64_t *)&v1221, v182, v1168, v175, v181, (uint64_t)&v1206);
                          }
                          else
                          {
                            v1209 = 257;
                            v183 = sub_1C509D7B0((uint64_t *)&v1221, v182, v1168, v175, v181, (uint64_t)&v1206);
                          }
                          v186 = (unsigned __int8 *)v183;
                          if (v1212 != &v1214)
                            free(v1212);
                          goto LABEL_331;
                        }
                        if (v172 && v173 == 77)
                        {
                          v184 = *(_QWORD *)v172;
                          if (*(_QWORD *)v172)
                            v185 = *(_BYTE *)(*(_QWORD *)v172 + 8) == 15;
                          else
                            v185 = 0;
                          if (!v185 || (v186 = (unsigned __int8 *)v1168, *(_QWORD *)(v184 + 24)))
                          {
                            v187 = llvm::PointerType::get(**(llvm::PointerType ***)(v184 + 16), v170);
                            v1209 = 257;
                            v186 = sub_1C4773E38((uint64_t *)&v1221, 49, (unsigned __int8 *)v1168, v187, (uint64_t)&v1206);
                          }
LABEL_331:
                          v188 = *v171;
                          v189 = *(_QWORD *)(*v171 + 8);
                          if (v189)
                          {
                            v190 = (unsigned __int8 ***)(v186 + 8);
                            do
                            {
                              v191 = *(_QWORD *)(v189 + 24);
                              v192 = *(unsigned __int8 *)(v191 + 16);
                              if (v192 == 77)
                              {
                                v1206 = v1208;
                                v1207 = 0x800000000;
                                v193 = *(_QWORD *)(v191 + 8);
                                if (v193)
                                {
                                  v194 = 0;
                                  do
                                  {
                                    v195 = *(_QWORD *)(v193 + 24);
                                    if (*(_BYTE *)(v195 + 16) == 60)
                                    {
                                      if (v194 >= HIDWORD(v1207))
                                      {
                                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1206, (uint64_t)v1208, v194 + 1, 8);
                                        v194 = v1207;
                                      }
                                      *((_QWORD *)v1206 + v194) = v195;
                                      v194 = v1207 + 1;
                                      LODWORD(v1207) = v1207 + 1;
                                    }
                                    v193 = *(_QWORD *)(v193 + 8);
                                  }
                                  while (v193);
                                  if (v194)
                                  {
                                    v200 = (llvm::PointerType ***)v1206;
                                    v201 = 8 * v194;
                                    do
                                    {
                                      v202 = *v200;
                                      v203 = llvm::PointerType::get(**v200, v170);
                                      v1216[0] = 257;
                                      v204 = sub_1C4773E38((uint64_t *)&v1221, 49, v186, v203, (uint64_t)&v1212);
                                      v205 = (unsigned __int8 **)(v202 - 4);
                                      if (*(v202 - 4))
                                      {
                                        *(_QWORD *)*(v202 - 2) = *(v202 - 3);
                                        v206 = (uint64_t)*(v202 - 3);
                                        if (v206)
                                          *(_QWORD *)(v206 + 16) = *(v202 - 2);
                                      }
                                      *v205 = v204;
                                      if (v204)
                                      {
                                        v209 = (llvm::PointerType *)*((_QWORD *)v204 + 1);
                                        v207 = (llvm::PointerType *)(v204 + 8);
                                        v208 = v209;
                                        *(v202 - 3) = v209;
                                        if (v209)
                                          *((_QWORD *)v208 + 2) = v202 - 3;
                                        *(v202 - 2) = v207;
                                        *(_QWORD *)v207 = v205;
                                      }
                                      ++v200;
                                      v201 -= 8;
                                    }
                                    while (v201);
                                  }
                                }
                                v210 = v1236;
                                if (v1236 >= (unint64_t)HIDWORD(v1236))
                                {
                                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1235, (uint64_t)&v1237, v1236 + 1, 8);
                                  v210 = v1236;
                                }
                                *((_QWORD *)v1235 + v210) = v191;
                                LODWORD(v1236) = v1236 + 1;
                                v189 = *(_QWORD *)(v189 + 8);
                                if (v1206 != v1208)
                                  free(v1206);
                              }
                              else if (v192 == 61)
                              {
                                v189 = *(_QWORD *)(v189 + 8);
                              }
                              else
                              {
                                if (v192 == 60)
                                  v196 = *(_QWORD *)(v189 + 24);
                                else
                                  v196 = 0;
                                v189 = *(_QWORD *)(v189 + 8);
                                v197 = (unsigned __int8 **)(v196 - 32);
                                if (*(_QWORD *)(v196 - 32))
                                {
                                  **(_QWORD **)(v196 - 16) = *(_QWORD *)(v196 - 24);
                                  v198 = *(_QWORD *)(v196 - 24);
                                  if (v198)
                                    *(_QWORD *)(v198 + 16) = *(_QWORD *)(v196 - 16);
                                }
                                *v197 = v186;
                                if (v186)
                                {
                                  v199 = *v190;
                                  *(_QWORD *)(v196 - 24) = *v190;
                                  if (v199)
                                    v199[2] = (unsigned __int8 *)(v196 - 24);
                                  *(_QWORD *)(v196 - 16) = v190;
                                  *v190 = v197;
                                }
                              }
                            }
                            while (v189);
                            v188 = *v171;
                          }
                          v211 = v1236;
                          if (v1236 >= (unint64_t)HIDWORD(v1236))
                          {
                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1235, (uint64_t)&v1237, v1236 + 1, 8);
                            v211 = v1236;
                          }
                          *((_QWORD *)v1235 + v211) = v188;
                          LODWORD(v1236) = v1236 + 1;
                        }
                        if (v1221 != &v1223)
                          free(v1221);
                        if (++v171 == v1176)
                        {
                          v228 = 1;
                          goto LABEL_378;
                        }
                        continue;
                      }
                    }
                    v150 = (**(uint64_t (***)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))v144)(v144, 9, 0, 1, 3);
                    if (*(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1166 + 64))(v1166) + 8) == v150)
                    {
LABEL_296:
                      v228 = 0;
                      goto LABEL_378;
                    }
                    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v144 + 8))(v144, 9, 1, 1, 0, 1, 3);
                    v155 = v1234;
                    v156 = operator new(0x78uLL);
                    v157 = (char *)(v156 + 8);
                    v156[13] = v156[13] & 0x38000000 | 1;
                    *(_QWORD *)v156 = 0;
                    *((_QWORD *)v156 + 1) = 0;
                    *((_QWORD *)v156 + 2) = 0;
                    *((_QWORD *)v156 + 3) = v156 + 8;
                    v158 = *(_QWORD *)(*(_QWORD *)(v155[5] + 56) + 40);
                    v1221 = "promotedConstantAlloca";
                    v1225 = 259;
                    llvm::GlobalVariable::GlobalVariable((uint64_t)(v156 + 8), v158, (llvm::PointerType *)v36, 1, 0, (uint64_t)v145, (uint64_t)&v1221, 0, 0, 0x100000040, 0);
                    v159 = (uint64_t *)llvm::UniqueStringSaver::save(***((_QWORD ***)v156 + 4) + 2136, "constant_literals", 0x11uLL);
                    v161 = v160;
                    v162 = ***((_QWORD ***)v156 + 4);
                    v1221 = v156 + 8;
                    v163 = *(_DWORD *)(v162 + 2520);
                    v1168 = (uint64_t *)(v156 + 8);
                    if (v163)
                    {
                      v164 = *(_QWORD *)(v162 + 2504);
                      v165 = v163 - 1;
                      v166 = v165 & ((v157 >> 4) ^ (v157 >> 9));
                      v167 = (uint64_t **)(v164 + 24 * v166);
                      v168 = *v167;
                      if (*v167 == (uint64_t *)v157)
                      {
                        LODWORD(v26) = v1186;
LABEL_305:
                        v167[1] = v159;
                        v167[2] = v161;
                        v156[16] = v156[16] & 0xFFBFFFFF | ((v161 != 0) << 22);
                        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v144 + 144))(v144, 8, v1168);
                        v169 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v144 + 312))(v144);
                        (*(void (**)(uint64_t, uint64_t *, uint64_t, _QWORD, uint64_t))(*(_QWORD *)v144 + 416))(v144, v1168, v169, 0, 9);
                        (*(void (**)(uint64_t, _QWORD, llvm::DataLayout *))(*(_QWORD *)v144 + 544))(v144, *(_QWORD *)v156, v17);
                        v1162 = v46;
                        goto LABEL_306;
                      }
                      v229 = 0;
                      v230 = 1;
                      LODWORD(v26) = v1186;
                      while (v168 != (uint64_t *)-4096)
                      {
                        if (v229)
                          v231 = 0;
                        else
                          v231 = v168 == (uint64_t *)-8192;
                        if (v231)
                          v229 = v167;
                        v232 = v166 + v230++;
                        v166 = v232 & v165;
                        v167 = (uint64_t **)(v164 + 24 * v166);
                        v168 = *v167;
                        if (*v167 == v1168)
                          goto LABEL_305;
                      }
                      if (v229)
                        v233 = v229;
                      else
                        v233 = v167;
                    }
                    else
                    {
                      v233 = 0;
                      LODWORD(v26) = v1186;
                    }
                    v167 = (uint64_t **)sub_1C53D65B8(v162 + 2504, (uint64_t)&v1221, (uint64_t *)&v1221, v233);
                    v234 = (uint64_t *)v1221;
                    v167[1] = 0;
                    v167[2] = 0;
                    *v167 = v234;
                    goto LABEL_305;
                  }
                  goto LABEL_85;
                }
              }
            }
            v26 = v27;
LABEL_432:
            if (v35 != (void **)v1219)
            {
              v235 = v25;
              free(v35);
              v25 = v235;
            }
            v4 = v1171;
          }
          v25 = *(_QWORD *)(v25 + 8);
          if (v25 == v1153)
            goto LABEL_438;
        }
      }
      LOBYTE(v26) = 0;
LABEL_438:
      v1139 |= v26 & 1;
      v11 = v1134;
LABEL_439:
      v11 = *(_QWORD *)(v11 + 8);
      if (v11 == v1163 + 24)
        goto LABEL_440;
    }
    v236 = 1;
    v10 = (uint64_t *)v1163;
  }
LABEL_441:
  v1156 = *v10;
  inserted = llvm::Module::getOrInsertNamedMetadata((uint64_t)v10, "agx.common_store_dma", 0x14uLL);
  if (*(_DWORD *)(v4 + 40) != 29)
    goto LABEL_446;
  v1217 = "agx.may_be_called_from_intersection_function";
  v1220 = 259;
  v237 = llvm::Module::getNamedMetadata(v1163, (uint64_t)&v1217);
  if (!v237)
    goto LABEL_446;
  v238 = *(_QWORD *)(*(_QWORD *)(***(_QWORD ***)(v237 + 48) - 8 * *(unsigned int *)(***(_QWORD ***)(v237 + 48) + 8))
                   + 128);
  v239 = (_QWORD *)(v238 + 24);
  if (*(_DWORD *)(v238 + 32) >= 0x41u)
    v239 = (_QWORD *)*v239;
  if (!*v239)
  {
LABEL_446:
    v240 = *(_QWORD *)(v4 + 32);
    v241 = *(_QWORD *)(v4 + 44);
    v1221 = &v1223;
    v1222 = 0x300000000;
    v1226 = v1230;
    v1227 = v1230;
    v1228 = 1;
    LODWORD(v1229) = 0;
    v1217 = (void *)1;
    for (k = 8; k != 232; k += 56)
      *(void **)((char *)&v1217 + k) = (void *)-4096;
    LODWORD(v1255) = 0;
    if (!sub_1C5EAD2F0((llvm::Module *)v1163, v1166, (uint64_t)&v1221, (llvm::SmallPtrSetImplBase *)&v1226, (int *)&v1217, &v1255))
    {
LABEL_590:
      sub_1C55DB034((uint64_t)&v1217);
      if (v1227 != v1226)
        free(v1227);
      if (v1221 != &v1223)
        free(v1221);
      goto LABEL_594;
    }
    v1164 = v236;
    v243 = (llvm::PointerType *)(**(_QWORD **)v1163 + 1912);
    v244 = (llvm::PointerType *)llvm::PointerType::get(v243, (llvm::Type *)2);
    v245 = (char *)operator new(0x78uLL);
    *((_DWORD *)v245 + 13) = *((_DWORD *)v245 + 13) & 0x38000000 | 1;
    *(_QWORD *)v245 = 0;
    *((_QWORD *)v245 + 1) = 0;
    *((_QWORD *)v245 + 2) = 0;
    *((_QWORD *)v245 + 3) = v245 + 32;
    v246 = HIDWORD(v241);
    v1234 = "literalsbuffer";
    v1238 = 259;
    v247 = (llvm::ValueAsMetadata *)(v245 + 32);
    llvm::GlobalVariable::GlobalVariable((uint64_t)(v245 + 32), v1163, v244, 1, 0, 0, (uint64_t)&v1234, 0, 0, 0x100000040, 0);
    v248 = (llvm::ValueAsMetadata *)llvm::UniqueStringSaver::save(***((_QWORD ***)v245 + 4) + 2136, "literals_buffer", 0xFuLL);
    v250 = v249;
    v1187 = (llvm::ConstantInt *)v245;
    v251 = ***((_QWORD ***)v245 + 4);
    v1234 = v245 + 32;
    v252 = *(_DWORD *)(v251 + 2520);
    if (v252)
    {
      v253 = *(_QWORD *)(v251 + 2504);
      v254 = v252 - 1;
      v255 = v254 & ((v247 >> 4) ^ (v247 >> 9));
      v256 = (llvm::ValueAsMetadata **)(v253 + 24 * v255);
      v257 = *v256;
      if (*v256 == v247)
      {
LABEL_451:
        v1181 = v243;
        v1184 = (llvm::ValueAsMetadata *)(v245 + 32);
        v256[1] = v248;
        v256[2] = v250;
        *((_DWORD *)v245 + 16) = (((4128768 - (__clz(v246) << 16)) & 0xFF0000) + 0x10000) | ((v250 != 0) << 22) | *((_DWORD *)v245 + 16) & 0xFF80FFFF;
        v1234 = "agx.driver_bindings";
        v1238 = 259;
        v258 = llvm::Module::getNamedMetadata(v1163, (uint64_t)&v1234);
        if (v258)
        {
          v260 = v258;
          v261 = 0;
        }
        else
        {
          v1234 = "agx.compute_driver_bindings";
          v1238 = 259;
          v260 = llvm::Module::getNamedMetadata(v1163, (uint64_t)&v1234);
          v261 = v260 != 0;
        }
        v262 = *(_QWORD *)v1163;
        v1234 = &v1236;
        v1235 = (void *)0x200000000;
        v1241 = v262;
        v1242 = &v1247;
        v1243 = &v1248;
        v1244 = 0;
        LODWORD(v1245) = 0;
        WORD2(v1245) = 512;
        BYTE6(v1245) = 7;
        v1240 = 0;
        v1239 = 0;
        v1246[1] = 0;
        v1246[0] = 0;
        v1247 = &unk_1E8167888;
        v1248 = &unk_1E8167A08;
        if (v260)
        {
          *(_OWORD *)v1231 = 0u;
          v1232 = 0u;
          v1231[0] = llvm::ValueAsMetadata::get(v247, v259);
          v264 = *(llvm::ConstantInt **)(*(_QWORD *)v1241 + 1960);
          v265 = *(_DWORD *)(*(_QWORD *)v1241 + 1968);
          LODWORD(v1207) = v265 >> 8;
          if (v265 >> 8 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v1206, 6, 0);
          }
          else
          {
            if (v265 <= 0xFF)
              v266 = 0;
            else
              v266 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v265);
            v1206 = (void *)(v266 & 6);
          }
          v268 = llvm::ConstantInt::get(v264, (llvm::LLVMContext *)&v1206, v263);
          if (v1207 >= 0x41 && v1206)
            MEMORY[0x1CAA32F9C](v1206, 0x1000C8000313F17);
          v1231[1] = llvm::ValueAsMetadata::get(v268, v267);
          v270 = *(llvm::ConstantInt **)(*(_QWORD *)v1241 + 1960);
          LODWORD(v1207) = *(_DWORD *)(*(_QWORD *)v1241 + 1968) >> 8;
          if (v1207 > 0x40)
            llvm::APInt::initSlowCase((llvm::APInt *)&v1206, 0, 0);
          else
            v1206 = 0;
          v272 = llvm::ConstantInt::get(v270, (llvm::LLVMContext *)&v1206, v269);
          if (v1207 >= 0x41 && v1206)
            MEMORY[0x1CAA32F9C](v1206, 0x1000C8000313F17);
          *(_QWORD *)&v1232 = llvm::ValueAsMetadata::get(v272, v271);
          v274 = *(llvm::ConstantInt **)(*(_QWORD *)v1241 + 1960);
          v275 = *(_DWORD *)(*(_QWORD *)v1241 + 1968);
          LODWORD(v1207) = v275 >> 8;
          if (v275 >> 8 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v1206, v1255, 0);
          }
          else
          {
            if (v275 <= 0xFF)
              LODWORD(v276) = 0;
            else
              v276 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v275);
            v1206 = (void *)(v276 & v1255);
          }
          v278 = llvm::ConstantInt::get(v274, (llvm::LLVMContext *)&v1206, v273);
          if (v1207 >= 0x41 && v1206)
            MEMORY[0x1CAA32F9C](v1206, 0x1000C8000313F17);
          *((_QWORD *)&v1232 + 1) = llvm::ValueAsMetadata::get(v278, v277);
          Impl = (void *)llvm::MDTuple::getImpl(*(uint64_t **)v1163, v1231, 4, 0, 1);
          if (v261)
          {
            v280 = *(uint64_t **)v1163;
            v1206 = Impl;
            Impl = (void *)llvm::MDTuple::getImpl(v280, &v1206, 1, 0, 1);
          }
          v1206 = Impl;
          v281 = *(_QWORD *)(v260 + 48);
          v282 = *(unsigned int *)(v281 + 8);
          if (v282 >= *(_DWORD *)(v281 + 12))
          {
            sub_1C5419FD8(v281, (unsigned __int8 **)&v1206);
          }
          else
          {
            v283 = (_QWORD *)(*(_QWORD *)v281 + 8 * v282);
            *v283 = Impl;
            if (Impl)
            {
              llvm::MetadataTracking::track((uint64_t)v283, (unsigned __int8 *)Impl, 2);
              LODWORD(v282) = *(_DWORD *)(v281 + 8);
            }
            *(_DWORD *)(v281 + 8) = v282 + 1;
          }
        }
        if (v1227 == v1226)
          v284 = (uint64_t *)((char *)&v1228 + 4);
        else
          v284 = &v1228;
        v285 = *(unsigned int *)v284;
        if ((_DWORD)v285)
        {
          v286 = 8 * v285;
          v287 = (uint64_t *)v1227;
          while ((unint64_t)*v287 >= 0xFFFFFFFFFFFFFFFELL)
          {
            ++v287;
            v286 -= 8;
            if (!v286)
              goto LABEL_490;
          }
        }
        else
        {
          v287 = (uint64_t *)v1227;
        }
        v288 = (unint64_t *)((char *)v1227 + 8 * v285);
        if (v287 != (uint64_t *)v288)
        {
          v289 = *v287;
LABEL_486:
          (*(void (**)(uint64_t, llvm::ValueAsMetadata *, uint64_t, uint64_t))(*(_QWORD *)v289 + 496))(v289, v247, v240, 10);
          llvm::FunctionGroup::setGlobalResource(v289, 24, (uint64_t)v247);
          v290 = (unint64_t *)(v287 + 1);
          while (v290 != v288)
          {
            v291 = *v290++;
            v289 = v291;
            if (v291 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              v287 = (uint64_t *)(v290 - 1);
              goto LABEL_486;
            }
          }
        }
LABEL_490:
        if ((_DWORD)v1222)
        {
          v292 = (uint64_t *)v1221;
          v293 = (uint64_t *)((char *)v1221 + 8 * v1222);
          v1177 = v245 + 40;
          v1169 = v293;
          while (1)
          {
            v294 = *v292;
            v295 = sub_1C55DAEFC((uint64_t)&v1217, *v292);
            v296 = &v1218;
            if ((v1217 & 1) == 0)
              v296 = (uint64_t *)v1218;
            v297 = v1219[0];
            if ((v1217 & 1) != 0)
              v297 = 4;
            if (&v296[7 * v297] == (uint64_t *)v295)
              goto LABEL_586;
            v298 = *(unsigned int *)(v295 + 40);
            if ((_DWORD)v298)
              break;
LABEL_576:
            if (v294 && *(_BYTE *)(v294 + 16) == 3)
            {
              if ((*(_DWORD *)(v294 + 20) & 0x7FFFFFF) != 0)
                goto LABEL_583;
            }
            else if (*(_BYTE *)(v294 + 16)
                   || *(_QWORD *)(v294 + 72) != v294 + 72
                   || (*(_BYTE *)(v294 + 34) & 0x80) != 0)
            {
LABEL_583:
              v352 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1166 + 48))(v1166);
              v353 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1166 + 56))(v1166);
              while (v352 != (uint64_t *)v353)
              {
                v354 = *v352++;
                (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v354 + 576))(v354, v294);
              }
              llvm::GlobalVariable::eraseFromParent((llvm::GlobalVariable *)v294);
            }
LABEL_586:
            if (++v292 == v293)
              goto LABEL_587;
          }
          v299 = *(_QWORD **)(v295 + 32);
          v1191 = &v299[v298];
          v1192 &= 0xFFFFFFFF00000000;
          while (1)
          {
            v300 = *v299;
            v301 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v1166 + 24))(v1166, *v299);
            v302 = sub_1C5EAB3E0((llvm::GlobalValue *)v294, 0, v301, 1);
            v303 = *(_QWORD *)(v300 + 80);
            if (v303)
              v304 = v303 - 24;
            else
              v304 = 0;
            sub_1C4D8AE2C((uint64_t)&v1234, v304, *(_QWORD *)(v304 + 48));
            v305 = *((_QWORD *)v1187 + 7);
            v1209 = 257;
            llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v1239 + 56) + 40) + 272, v305);
            v307 = v306;
            v308 = (char *)operator new(0x60uLL);
            v309 = v308;
            v310 = (uint64_t *)(v308 + 32);
            v1233 = 257;
            *((_QWORD *)v308 + 3) = v308 + 32;
            *((_QWORD *)v308 + 4) = v305;
            *((_QWORD *)v308 + 5) = 0;
            *((_WORD *)v308 + 24) = 60;
            *((_DWORD *)v308 + 13) = 1;
            *(_OWORD *)(v308 + 56) = 0u;
            *(_OWORD *)(v308 + 72) = 0u;
            *((_DWORD *)v308 + 22) = 0;
            v311 = *((_QWORD *)v1187 + 5);
            *(_QWORD *)v308 = v1184;
            *((_QWORD *)v308 + 1) = v311;
            if (v311)
              *(_QWORD *)(v311 + 16) = v308 + 8;
            *((_QWORD *)v308 + 2) = v1177;
            *v1177 = v308;
            *((_WORD *)v308 + 25) = 2 * (v307 & 0x3F);
            v308[92] = 1;
            llvm::Value::setName((uint64_t ***)v308 + 4, (uint64_t)v1231);
            (*((void (**)(void **, uint64_t *, void **, uint64_t, uint64_t))*v1243 + 2))(v1243, v310, &v1206, v1239, v1240);
            if ((_DWORD)v1235)
              break;
LABEL_505:
            *(_QWORD *)&v1252 = 0;
            v313 = v302;
            v314 = *(llvm::ConstantInt **)(*(_QWORD *)v1241 + 1960);
            v315 = *(_DWORD *)(*(_QWORD *)v1241 + 1968);
            LODWORD(v1231[1]) = v315 >> 8;
            if (v315 >> 8 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)v1231, v313, 0);
            }
            else
            {
              if (v315 <= 0xFF)
                v316 = 0;
              else
                v316 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v315);
              v1231[0] = (void *)(v316 & v313);
            }
            v4 = v1171;
            v317 = llvm::ConstantInt::get(v314, (llvm::LLVMContext *)v1231, v312);
            if (LODWORD(v1231[1]) >= 0x41 && v1231[0])
              MEMORY[0x1CAA32F9C](v1231[0], 0x1000C8000313F17);
            *(_QWORD *)&v1252 = v317;
            v1233 = 257;
            v318 = (unsigned __int8 *)sub_1C509D7B0((uint64_t *)&v1234, v1181, v310, (llvm::Value *)&v1252, 1, (uint64_t)v1231);
            if (v294 && *(_BYTE *)(v294 + 16) == 3)
            {
              v319 = *(llvm::PointerType **)v294;
              if ((*(_DWORD *)(v294 + 20) & 0x7FFFFFF) != 0)
                goto LABEL_523;
            }
            else
            {
              if (*(_BYTE *)(v294 + 16) || *(_QWORD *)(v294 + 72) != v294 + 72)
              {
                v319 = *(llvm::PointerType **)v294;
LABEL_523:
                v1233 = 257;
                v327 = sub_1C4773E38((uint64_t *)&v1234, 49, v318, (uint64_t)v319, (uint64_t)v1231);
                goto LABEL_524;
              }
              v319 = *(llvm::PointerType **)v294;
              if ((*(_BYTE *)(v294 + 34) & 0x80) != 0)
                goto LABEL_523;
            }
            v320 = llvm::PointerType::get(v319, (llvm::Type *)2);
            v1233 = 257;
            v321 = sub_1C4773E38((uint64_t *)&v1234, 49, v318, v320, (uint64_t)v1231);
            v322 = *(_QWORD *)v294;
            v1209 = 257;
            llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v1239 + 56) + 40) + 272, v322);
            v324 = v323;
            v325 = (char *)operator new(0x60uLL);
            v326 = v325;
            v327 = (unsigned __int8 *)(v325 + 32);
            *((_QWORD *)v325 + 2) = 0;
            *((_QWORD *)v325 + 3) = v325 + 32;
            v1233 = 257;
            *((_QWORD *)v325 + 4) = v322;
            *((_QWORD *)v325 + 5) = 0;
            *((_WORD *)v325 + 24) = 60;
            *((_DWORD *)v325 + 13) = 1;
            *(_OWORD *)(v325 + 56) = 0u;
            *(_OWORD *)(v325 + 72) = 0u;
            *((_DWORD *)v325 + 22) = 0;
            *(_QWORD *)v325 = v321;
            *((_QWORD *)v325 + 1) = 0;
            if (v321)
            {
              v330 = *((_QWORD *)v321 + 1);
              v329 = v321 + 8;
              v328 = v330;
              *((_QWORD *)v325 + 1) = v330;
              if (v330)
                *(_QWORD *)(v328 + 16) = v325 + 8;
              *((_QWORD *)v325 + 2) = v329;
              *v329 = v325;
            }
            *((_WORD *)v325 + 25) = 2 * (v324 & 0x3F);
            v325[92] = 1;
            llvm::Value::setName((uint64_t ***)v325 + 4, (uint64_t)v1231);
            (*((void (**)(void **, unsigned __int8 *, void **, uint64_t, uint64_t))*v1243 + 2))(v1243, v327, &v1206, v1239, v1240);
            if ((_DWORD)v1235)
            {
              v345 = (char *)v1234;
              v346 = (char *)v1234 + 16 * v1235;
              v347 = (unsigned __int8 **)(v326 + 80);
              do
              {
                v348 = *(_DWORD *)v345;
                v349 = (unsigned __int8 *)*((_QWORD *)v345 + 1);
                if (v349)
                {
                  if (!v348)
                  {
                    v1212 = (void *)*((_QWORD *)v345 + 1);
                    llvm::MetadataTracking::track((uint64_t)&v1212, v349, 2);
                    v350 = *v347;
                    goto LABEL_569;
                  }
                }
                else
                {
                  v350 = *v347;
                  if (!*v347 && (v326[55] & 0x20) == 0)
                    goto LABEL_566;
                  if (!v348)
                  {
                    v1212 = 0;
LABEL_569:
                    if (v350)
                      llvm::MetadataTracking::untrack((uint64_t)(v326 + 80), v350);
                    v351 = (unsigned __int8 *)v1212;
                    *v347 = (unsigned __int8 *)v1212;
                    if (v351)
                      llvm::MetadataTracking::retrack((uint64_t)&v1212, v351, (uint64_t)(v326 + 80));
                    goto LABEL_566;
                  }
                }
                llvm::Value::setMetadata((llvm::Value *)v327, *(_DWORD *)v345, (llvm::MDNode *)v349);
LABEL_566:
                v345 += 16;
              }
              while (v345 != v346);
            }
            v4 = v1171;
LABEL_524:
            sub_1C5EA8AA8(v294);
            v331 = *(_QWORD *)(v294 + 8);
            if (v331)
            {
              v332 = (uint64_t *)(v327 + 8);
              do
              {
                v333 = v331;
                v334 = (uint64_t *)(v331 + 8);
                v331 = *(_QWORD *)(v331 + 8);
                v335 = v334[2];
                if (v335)
                  v336 = *(unsigned __int8 *)(v335 + 16) >= 0x1Cu;
                else
                  v336 = 0;
                if (v336 && *(_QWORD *)(*(_QWORD *)(v335 + 40) + 56) == v300)
                {
                  if (*(_QWORD *)v333)
                  {
                    **(_QWORD **)(v333 + 16) = v331;
                    v337 = *(_QWORD *)(v333 + 8);
                    if (v337)
                      *(_QWORD *)(v337 + 16) = *(_QWORD *)(v333 + 16);
                  }
                  *(_QWORD *)v333 = v327;
                  if (v327)
                  {
                    v338 = *v332;
                    *v334 = *v332;
                    if (v338)
                      *(_QWORD *)(v338 + 16) = v334;
                    *(_QWORD *)(v333 + 16) = v332;
                    *v332 = v333;
                  }
                }
              }
              while (v331);
            }
            if (++v299 == v1191)
            {
              v293 = v1169;
              goto LABEL_576;
            }
          }
          v339 = (char *)v1234;
          v340 = (char *)v1234 + 16 * v1235;
          v341 = (unsigned __int8 **)(v309 + 80);
          while (1)
          {
            v342 = *(_DWORD *)v339;
            v312 = (const llvm::APInt *)*((_QWORD *)v339 + 1);
            if (v312)
            {
              if (!v342)
              {
                v1212 = (void *)*((_QWORD *)v339 + 1);
                llvm::MetadataTracking::track((uint64_t)&v1212, (unsigned __int8 *)v312, 2);
                v343 = *v341;
                if (!*v341)
                {
LABEL_554:
                  v344 = (unsigned __int8 *)v1212;
                  *v341 = (unsigned __int8 *)v1212;
                  if (v344)
                    llvm::MetadataTracking::retrack((uint64_t)&v1212, v344, (uint64_t)(v309 + 80));
                  goto LABEL_551;
                }
LABEL_548:
                llvm::MetadataTracking::untrack((uint64_t)(v309 + 80), v343);
                goto LABEL_554;
              }
            }
            else
            {
              v343 = *v341;
              if (!*v341 && (v309[55] & 0x20) == 0)
                goto LABEL_551;
              if (!v342)
              {
                v1212 = 0;
                if (!v343)
                  goto LABEL_554;
                goto LABEL_548;
              }
            }
            llvm::Value::setMetadata((llvm::Value *)v310, *(_DWORD *)v339, v312);
LABEL_551:
            v339 += 16;
            if (v339 == v340)
              goto LABEL_505;
          }
        }
LABEL_587:
        if (v1234 != &v1236)
          free(v1234);
        v236 = v1164;
        goto LABEL_590;
      }
      v1125 = 0;
      v1126 = 1;
      while (v257 != (llvm::ValueAsMetadata *)-4096)
      {
        if (v1125)
          v1127 = 0;
        else
          v1127 = v257 == (llvm::ValueAsMetadata *)-8192;
        if (v1127)
          v1125 = v256;
        v1128 = v255 + v1126++;
        v255 = v1128 & v254;
        v256 = (llvm::ValueAsMetadata **)(v253 + 24 * v255);
        v257 = *v256;
        if (*v256 == v247)
          goto LABEL_451;
      }
      if (v1125)
        v1129 = v1125;
      else
        v1129 = v256;
    }
    else
    {
      v1129 = 0;
    }
    v256 = (llvm::ValueAsMetadata **)sub_1C53D65B8(v251 + 2504, (uint64_t)&v1234, (uint64_t *)&v1234, v1129);
    v1130 = (llvm::ValueAsMetadata *)v1234;
    v256[1] = 0;
    v256[2] = 0;
    *v256 = v1130;
    goto LABEL_451;
  }
LABEL_594:
  sub_1C5EA50FC(v1163);
  if (v236 & 1 | HIWORD(v355) & 1)
  {
    v356 = v1139;
    return v356 != 0;
  }
  v1217 = v1219;
  v1218 = 0x800000000;
  v1212 = v1216;
  v1213 = v1216;
  v1214 = 16;
  v1215 = 0;
  v1234 = "agx.dylib_bindings";
  v1238 = 259;
  v357 = llvm::Module::getNamedMetadata(v1163, (uint64_t)&v1234);
  if (v357)
  {
    v358 = v357;
    v359 = *(unsigned int *)(*(_QWORD *)(v357 + 48) + 8);
    if ((_DWORD)v359)
    {
      v360 = 0;
      v361 = 8 * v359;
      do
      {
        v362 = *(_QWORD *)(**(_QWORD **)(v358 + 48) + v360);
        v363 = *(_QWORD *)(v362 - 8 * *(unsigned int *)(v362 + 8));
        if (v363)
        {
          if (*(_BYTE *)v363 == 1)
          {
            v364 = *(_QWORD *)(v363 + 128);
            if (*(_BYTE *)(v364 + 16) == 3)
              sub_1C4774094((llvm::SmallPtrSetImplBase *)&v1212, v364);
          }
        }
        v360 += 8;
      }
      while (v361 != v360);
    }
  }
  v365 = operator new(0x30uLL);
  *v365 = &off_1E8170EF0;
  v365[1] = &v1217;
  v365[2] = v1163;
  v365[3] = v1166;
  v365[4] = &v1212;
  v365[5] = v4;
  v1211 = v365;
  v366 = sub_1C55A76DC(v1163, (uint64_t)v1210);
  if (v1211 == v1210)
  {
    v367 = (void (**)(void))(v1210[0] + 32);
  }
  else
  {
    if (!v1211)
      goto LABEL_609;
    v367 = (void (**)(void))(*v1211 + 40);
  }
  (*v367)();
LABEL_609:
  if (v366)
  {
    v368 = (*(_DWORD *)(v4 + 40) & 0xFFFFFFFE) != 28;
    v1234 = &v1236;
    v1235 = (void *)0x2000000000;
    v369 = v1218;
    if ((_DWORD)v1218)
    {
      v370 = 0;
      v371 = 0;
      v372 = 32 * v368;
      do
      {
        v373 = (char *)v1217 + 1128 * v371;
        v374 = *((_DWORD *)v373 + 4);
        if (v374 != 1)
        {
          v375 = 0;
          v376 = 0;
          v377 = v373 + 8;
          v378 = *((_QWORD *)v373 + 1);
          for (m = 1; m != v374; ++m)
          {
            v380 = *v377 + v375;
            v381 = *(_QWORD *)(v380 + 48);
            v382 = *(_QWORD *)(v378 + 24);
            v106 = v381 <= v382;
            v383 = (void *)(v381 - v382);
            if (v106)
            {
              v388 = *(_QWORD *)(v380 + 56);
              if (v388 > v382)
                *(_QWORD *)(v378 + 24) = v388;
              *(_QWORD *)(v380 + 56) = 0;
            }
            else if ((unint64_t)v383 <= v372)
            {
              v389 = *v377 + v375;
              *(_QWORD *)(v378 + 24) = *(_QWORD *)(v389 + 56);
              *(_QWORD *)(v389 + 56) = 0;
            }
            else
            {
              v1231[0] = v383;
              v1231[1] = (void *)__PAIR64__(v376, v371);
              LODWORD(v1232) = m;
              v384 = (char *)v1234;
              if (v370 >= HIDWORD(v1235))
              {
                v390 = v370 + 1;
                v391 = (char *)v1234 + 24 * v370 > (char *)v1231;
                if (v1234 <= v1231 && v391)
                {
                  v1193 = (llvm::ValueAsMetadata *)((char *)v1231 - (_BYTE *)v1234);
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1234, (uint64_t)&v1236, v390, 24);
                  v384 = (char *)v1234;
                  v385 = (void **)((char *)v1193 + (_QWORD)v1234);
                }
                else
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1234, (uint64_t)&v1236, v390, 24);
                  v385 = v1231;
                  v384 = (char *)v1234;
                }
              }
              else
              {
                v385 = v1231;
              }
              v378 = v380 + 32;
              v386 = &v384[24 * v1235];
              v387 = *(_OWORD *)v385;
              *((_QWORD *)v386 + 2) = v385[2];
              *(_OWORD *)v386 = v387;
              v370 = (_DWORD)v1235 + 1;
              LODWORD(v1235) = (_DWORD)v1235 + 1;
              v376 = m;
            }
            v375 += 32;
          }
          v369 = v1218;
          v4 = v1171;
        }
        ++v371;
      }
      while (v371 < v369);
      v392 = (uint64_t *)v1234;
      if (v370 >= 0x10)
      {
        sub_1C55DD188((unint64_t)v1234 + 24 * v370, (char *)v1234 + 24 * v370, (uint64_t)v1234, (unint64_t)v1234, 126 - 2 * __clz(v370), 1);
        v393 = v1235;
        v392 = (uint64_t *)v1234;
        if (v1235 >= 0x10)
        {
          v394 = v1217;
          v395 = 24 * ((_DWORD)v1235 - 1);
          do
          {
            v396 = 0;
            v397 = &v392[3 * v393];
            v398 = *((_DWORD *)v397 - 4);
            v399 = *((unsigned int *)v397 - 3);
            v400 = *((unsigned int *)v397 - 2);
            LODWORD(v1235) = --v393;
            v401 = v394[141 * v398 + 1];
            v402 = v401 + 32 * v400;
            *(_QWORD *)(v401 + 32 * v399 + 24) = *(_QWORD *)(v402 + 24);
            *(_QWORD *)(v402 + 24) = 0;
            do
            {
              v403 = &v392[v396 / 8];
              if (LODWORD(v392[v396 / 8 + 1]) == v398 && *((_DWORD *)v403 + 3) == (_DWORD)v400)
                *((_DWORD *)v403 + 3) = v399;
              v396 += 24;
            }
            while (v395 != v396);
            v395 -= 24;
          }
          while (v393 >= 0x10);
        }
      }
      if (v392 != &v1236)
        free(v392);
      if (v1218 >= 2)
      {
        v1234 = (void *)v4;
        sub_1C55DDF84((uint64_t)v1217, (uint64_t *)v1217 + 141 * v1218, (uint64_t)&v1234, 126 - 2 * __clz(v1218), 1);
      }
    }
    v1200[0] = 0;
    v1200[1] = 0;
    v1201 = 0;
    v1206 = v1208;
    v1207 = 0xA00000000;
    v1198[0] = 0;
    v1198[1] = 0;
    v1199 = 0;
    if ((*(_DWORD *)(v4 + 40) & 0xFFFFFFFE) == 0x1C)
      sub_1C5EA6408(v1163, (uint64_t)v1200, (uint64_t)&v1206, (uint64_t)v1198);
    if (!(_DWORD)v1218)
      goto LABEL_1660;
    v404 = 0;
    v405 = (char *)v1217;
    v1141 = (char *)v1217 + 1128 * v1218;
    while (1)
    {
      v1196[0] = 0;
      v1196[1] = 0;
      v1197 = 0;
      sub_1C498C4E4((uint64_t)v1196, (uint64_t)v1200);
      v1161 = *(_QWORD **)(*(_QWORD *)(*(_QWORD *)v405 - 8 * *(unsigned int *)(*(_QWORD *)v405 + 8)) + 128);
      v1234 = &v1236;
      v1235 = (void *)0x2000000000;
      v406 = *((_QWORD *)v405 + 132);
      if (v406 == *((_QWORD *)v405 + 131))
        v407 = (unsigned int *)(v405 + 1068);
      else
        v407 = (unsigned int *)(v405 + 1064);
      v408 = *v407;
      if ((_DWORD)v408)
      {
        v409 = 8 * v408;
        v410 = (uint64_t *)*((_QWORD *)v405 + 132);
        while ((unint64_t)*v410 >= 0xFFFFFFFFFFFFFFFELL)
        {
          ++v410;
          v409 -= 8;
          if (!v409)
            goto LABEL_664;
        }
      }
      else
      {
        v410 = (uint64_t *)*((_QWORD *)v405 + 132);
      }
      v411 = (_QWORD *)(v406 + 8 * v408);
      if (v410 == v411)
      {
LABEL_664:
        v413 = -1;
      }
      else
      {
        v412 = *v410;
        v413 = -1;
LABEL_658:
        v414 = sub_1C5EAC778(v1166, v412, v1163);
        if (v414 < v413)
          v413 = v414;
        v415 = (unint64_t *)(v410 + 1);
        while (v415 != v411)
        {
          v416 = *v415++;
          v412 = v416;
          if (v416 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v410 = (uint64_t *)(v415 - 1);
            goto LABEL_658;
          }
        }
      }
      v417 = *((_QWORD *)v405 + 1);
      v1172 = v405 + 8;
      v418 = *((unsigned int *)v405 + 4);
      if ((_DWORD)v418)
      {
        v419 = 0;
        v420 = 0;
        v421 = v413 & -*(_DWORD *)(v4 + 48);
        v422 = 32 * v418;
        while (1)
        {
          v423 = *(_QWORD *)(v417 + 24);
          if (!v423)
            break;
          LODWORD(v419) = (v419 + *(unsigned int *)(v4 + 48) - 1) / *(unsigned int *)(v4 + 48) * *(_DWORD *)(v4 + 48);
          if (v423 - *(_QWORD *)(v417 + 16) + v419 <= v421)
          {
            sub_1C47E9C18((uint64_t)&v1234, v417);
            v419 = (*(_DWORD *)(v417 + 24) + v419 - *(_DWORD *)(v417 + 16));
LABEL_673:
            v420 = 1;
            goto LABEL_675;
          }
          v420 = 0;
          v419 = v419;
          v405[1125] = 1;
LABEL_675:
          v417 += 32;
          v422 -= 32;
          if (!v422)
            goto LABEL_678;
        }
        if ((v420 & 1) == 0)
        {
          v420 = 0;
          goto LABEL_675;
        }
        sub_1C47E9C18((uint64_t)&v1234, v417);
        goto LABEL_673;
      }
      v419 = 0;
LABEL_678:
      if ((_DWORD)v1235)
        v424 = v419 > v1132;
      else
        v424 = 1;
      if (v424)
      {
        if (v1234 != &v1236)
          free(v1234);
        goto LABEL_1656;
      }
      sub_1C4AC3E94((uint64_t)v1172, (uint64_t)&v1234);
      if (v1234 != &v1236)
        free(v1234);
      v425 = *((unsigned int *)v405 + 4);
      if ((_DWORD)v425)
      {
        v426 = 0;
        v427 = 32 * v425;
        v428 = (uint64_t *)(*((_QWORD *)v405 + 1) + 24);
        do
        {
          v429 = *v428;
          v428 += 4;
          if (v429)
            ++v426;
          v427 -= 32;
        }
        while (v427);
      }
      else
      {
        v426 = 0;
      }
      v430 = *((_QWORD *)v405 + 132);
      if (v430 == *((_QWORD *)v405 + 131))
        v431 = (unsigned int *)(v405 + 1068);
      else
        v431 = (unsigned int *)(v405 + 1064);
      v432 = *v431;
      if ((_DWORD)v432)
      {
        v433 = 8 * v432;
        v434 = (unint64_t *)*((_QWORD *)v405 + 132);
        while (*v434 >= 0xFFFFFFFFFFFFFFFELL)
        {
          ++v434;
          v433 -= 8;
          if (!v433)
            goto LABEL_711;
        }
      }
      else
      {
        v434 = (unint64_t *)*((_QWORD *)v405 + 132);
      }
      v435 = (unint64_t *)(v430 + 8 * v432);
      if (v434 != v435)
      {
        v436 = (llvm::FunctionGroup *)*v434;
        v437 = (**(uint64_t (***)(unint64_t, uint64_t, _QWORD, uint64_t, uint64_t))*v434)(*v434, 9, 0, 1, 3);
        v438 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1166 + 64))(v1166) + 8);
        while (v438 != v437 && llvm::FunctionGroup::calcDMAListSize(v436, 1) + v426 <= 0x20)
        {
          (*(void (**)(llvm::FunctionGroup *, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v436 + 8))(v436, 9, 1, 1, 0, 1, 3);
          v439 = v434 + 1;
          do
          {
            if (v439 == v435)
              goto LABEL_711;
            v440 = *v439++;
            v436 = (llvm::FunctionGroup *)v440;
          }
          while (v440 > 0xFFFFFFFFFFFFFFFDLL);
          v437 = (**(uint64_t (***)(llvm::FunctionGroup *, uint64_t, _QWORD, uint64_t, uint64_t))v436)(v436, 9, 0, 1, 3);
          v438 = *(_DWORD *)((*(uint64_t (**)(uint64_t))(*(_QWORD *)v1166 + 64))(v1166) + 8);
          v434 = v439 - 1;
        }
        goto LABEL_1656;
      }
LABEL_711:
      v1231[0] = (void *)1;
      for (n = 1; n != 65; n += 2)
        v1231[n] = (void *)-4096;
      v442 = *((unsigned int *)v405 + 4);
      if ((_DWORD)v442)
      {
        v443 = (uint64_t *)*((_QWORD *)v405 + 1);
        v444 = &v443[4 * v442];
        while (1)
        {
          v1226 = 0;
          v445 = sub_1C55E05AC((uint64_t)v1231, *v443, &v1226);
          v446 = v1226;
          if ((v445 & 1) == 0)
            break;
LABEL_724:
          v446[1] = v443;
          v443 += 4;
          if (v443 == v444)
            goto LABEL_744;
        }
        v1221 = v1226;
        v447 = (int)v1231[0];
        v448 = v1232;
        v449 = LODWORD(v1231[0]) >> 1;
        v450 = (uint64_t)v1231[0] & 1;
        if (((uint64_t)v1231[0] & 1) != 0)
          v451 = 32;
        else
          v451 = v1232;
        if (4 * v449 + 4 >= 3 * v451)
        {
          v451 *= 2;
        }
        else if (v451 + ~v449 - HIDWORD(v1231[0]) > v451 >> 3)
        {
LABEL_721:
          LODWORD(v1231[0]) = ((v447 & 0xFFFFFFFE) + 2) | v450;
          if (*v446 != -4096)
            --HIDWORD(v1231[0]);
          *v446 = *v443;
          v446[1] = 0;
          goto LABEL_724;
        }
        if (v451 >= 0x21)
        {
          v452 = (v451 - 1) | ((unint64_t)(v451 - 1) >> 1);
          v453 = v452 | (v452 >> 2) | ((v452 | (v452 >> 2)) >> 4);
          v454 = ((v453 | (v453 >> 8)) >> 16) | v453 | (v453 >> 8);
          if ((v454 + 1) > 0x40)
            v451 = v454 + 1;
          else
            v451 = 64;
        }
        if (((uint64_t)v1231[0] & 1) != 0)
        {
          v456 = 0;
          v457 = (uint64_t *)&v1234;
          do
          {
            v458 = (uint64_t)v1231[v456 + 1];
            if ((v458 | 0x1000) != 0xFFFFFFFFFFFFF000)
            {
              v459 = v1231[v456 + 2];
              *v457 = v458;
              v457[1] = (uint64_t)v459;
              v457 += 2;
            }
            v456 += 2;
          }
          while (v456 != 64);
          if (v451 > 0x20)
          {
            LODWORD(v1231[0]) &= ~1u;
            v460 = v451;
            v1231[1] = operator new(16 * v451, (std::align_val_t)8uLL);
            *(_QWORD *)&v1232 = v460;
          }
          sub_1C55E0658((uint64_t)v1231, (uint64_t *)&v1234, v457);
        }
        else
        {
          v455 = (uint64_t *)v1231[1];
          if (v451 > 0x20)
          {
            v461 = v451;
            v1231[1] = operator new(16 * v451, (std::align_val_t)8uLL);
            *(_QWORD *)&v1232 = v461;
          }
          else
          {
            LODWORD(v1231[0]) |= 1u;
          }
          sub_1C55E0658((uint64_t)v1231, v455, &v455[2 * v448]);
          MEMORY[0x1CAA32FB4](v455, 8);
        }
        sub_1C55E05AC((uint64_t)v1231, *v443, &v1221);
        v447 = (int)v1231[0];
        v446 = v1221;
        v450 = (uint64_t)v1231[0] & 1;
        goto LABEL_721;
      }
LABEL_744:
      v1226 = &v1228;
      v1227 = (void *)0x2000000000;
      v462 = 8;
      v1221 = (void *)1;
      do
      {
        *(void **)((char *)&v1221 + v462) = (void *)-4096;
        v462 += 16;
      }
      while (v462 != 520);
      v1234 = &v1236;
      v1235 = (void *)0x2000000000;
      if (v405[1124])
        v1145 = (*(_DWORD *)(v4 + 40) - 30) < 0xFFFFFFFE;
      else
        v1145 = 0;
      v1165 = **(llvm::ConstantInt ***)(*(_QWORD *)(*(_QWORD *)v405 - 8 * *(unsigned int *)(*(_QWORD *)v405 + 8) + 8)
                                      + 128);
      v463 = v1196[0];
      if (!v1197)
        goto LABEL_756;
      v464 = (v1197 - 1) & ((v1161 >> 4) ^ (v1161 >> 9));
      v1182 = v1196[0] + (v464 << 6);
      v465 = *(_QWORD **)v1182;
      if (v1161 != *(_QWORD **)v1182)
        break;
LABEL_757:
      v1185 = (llvm::ValueAsMetadata *)v405;
      v1170 = *((unsigned int *)v405 + 4);
      if ((_DWORD)v1170)
      {
        v468 = 0;
        ElementPtr = 0;
        v470 = v1145;
        if (!v405[1124])
          v470 = 1;
        v1154 = v470;
        while (1)
        {
          v471 = (_QWORD *)(*v1172 + 32 * v468);
          v473 = v471 + 3;
          v472 = v471[3];
          if (v472)
            break;
          *v471 = *(_QWORD *)(*v1172 + 32 * (v468 - 1));
LABEL_888:
          if (++v468 == v1170)
            goto LABEL_907;
        }
        v1178 = *v1172 + 32 * v468;
        v475 = v471 + 2;
        v474 = v471[2];
        v476 = v472 - v474;
        v477 = *(unsigned int *)(v4 + 44);
        v1173 = (llvm::ConstantInt *)v474;
        v478 = v474 % v477;
        v479 = v476 % v477;
        if (v478)
          v480 = v476 % v477;
        else
          v480 = 0;
        v1188 = (llvm::ConstantInt *)v480;
        v481 = v477 - v479;
        if (!v479)
          v481 = 0;
        llvm::ArrayType::get((llvm::ArrayType *)(*(_QWORD *)v1156 + 1912), (llvm::Type *)(v481 + v476));
        v483 = v482;
        v484 = (char *)operator new(0x78uLL);
        *((_DWORD *)v484 + 13) = *((_DWORD *)v484 + 13) & 0x38000000 | 1;
        v1194 = (uint64_t *)(v484 + 32);
        *(_QWORD *)v484 = 0;
        *((_QWORD *)v484 + 1) = 0;
        *((_QWORD *)v484 + 2) = 0;
        *((_QWORD *)v484 + 3) = v484 + 32;
        if (v404)
        {
          v485 = v404;
          v486 = (char *)&v1253 + 5;
          do
          {
            *--v486 = (v485 % 0xA) | 0x30;
            v106 = v485 > 9;
            v485 /= 0xAuLL;
          }
          while (v106);
        }
        else
        {
          BYTE4(v1253) = 48;
          v486 = (char *)&v1253 + 4;
        }
        sub_1C4E61270(&v1204, v486, (char *)&v1253 + 5, (char *)&v1253 + 5 - v486);
        v487 = std::string::insert(&v1204, 0, "memorycache");
        v488 = v487->__r_.__value_.__r.__words[2];
        v1255 = *(_OWORD *)&v487->__r_.__value_.__l.__data_;
        v1256 = v488;
        v487->__r_.__value_.__l.__size_ = 0;
        v487->__r_.__value_.__r.__words[2] = 0;
        v487->__r_.__value_.__r.__words[0] = 0;
        v1254 = 260;
        *(_QWORD *)&v1252 = &v1255;
        llvm::GlobalVariable::GlobalVariable((uint64_t)v1194, v1163, v483, 1, 0, 0, (uint64_t)&v1252, 0, 0, 0x100000040, 0);
        if (SHIBYTE(v1256) < 0)
          operator delete((void *)v1255);
        if (SHIBYTE(v1204.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v1204.__r_.__value_.__l.__data_);
        *((_DWORD *)v484 + 16) = (((2031616 - (__clz(*(_DWORD *)(v4 + 48)) << 16)) & 0xFF0000) + 0x10000) | *((_DWORD *)v484 + 16) & 0xFFC0FFFF;
        v490 = (uint64_t *)llvm::UniqueStringSaver::save(***((_QWORD ***)v484 + 4) + 2136, "memory_cache", 0xCuLL);
        v491 = v489;
        v492 = ***((_QWORD ***)v484 + 4);
        v493 = (llvm::ValueAsMetadata *)(v484 + 32);
        *(_QWORD *)&v1252 = v484 + 32;
        v494 = *(_DWORD *)(v492 + 2520);
        if (v494)
        {
          v495 = *(_QWORD *)(v492 + 2504);
          v496 = v494 - 1;
          v497 = v496 & ((v1194 >> 4) ^ (v1194 >> 9));
          v498 = (uint64_t **)(v495 + 24 * v497);
          v499 = *v498;
          if (*v498 == v1194)
            goto LABEL_779;
          v587 = 0;
          v588 = 1;
          while (v499 != (uint64_t *)-4096)
          {
            if (v587)
              v589 = 0;
            else
              v589 = v499 == (uint64_t *)-8192;
            if (v589)
              v587 = v498;
            v590 = v497 + v588++;
            v497 = v590 & v496;
            v498 = (uint64_t **)(v495 + 24 * v497);
            v499 = *v498;
            if (*v498 == v1194)
              goto LABEL_779;
          }
          if (v587)
            v591 = v587;
          else
            v591 = v498;
        }
        else
        {
          v591 = 0;
        }
        v498 = (uint64_t **)sub_1C53D65B8(v492 + 2504, (uint64_t)&v1252, (uint64_t *)&v1252, v591);
        v592 = (uint64_t *)v1252;
        v498[1] = 0;
        v498[2] = 0;
        *v498 = v592;
        v493 = (llvm::ValueAsMetadata *)(v484 + 32);
LABEL_779:
        v498[1] = v490;
        v498[2] = (uint64_t *)v491;
        *((_DWORD *)v484 + 16) = *((_DWORD *)v484 + 16) & 0xFFBFFFFF | ((v491 != 0) << 22);
        if (v1182 != v1196[0] + ((unint64_t)v1197 << 6) && *(_DWORD *)(v1182 + 40))
        {
          v1158 = v404;
          v500 = *v475;
          v501 = *v473;
          v502 = *(uint64_t **)v1163;
          v503 = llvm::ValueAsMetadata::get(v493, v489);
          *(_QWORD *)&v1252 = &v1253;
          *((_QWORD *)&v1252 + 1) = 0x400000000;
          sub_1C4848C0C((unsigned int *)&v1252, 1uLL, (uint64_t)v503);
          v505 = *(unsigned int *)(v1182 + 40);
          if ((_DWORD)v505)
          {
            v506 = 6 * v505;
            v507 = (unsigned __int16 *)(*(_QWORD *)(v1182 + 32) + 4);
            do
            {
              v508 = *(v507 - 1);
              v509 = *v507 + v508;
              if (v500 < v509 && v501 > v508)
              {
                v511 = *((unsigned __int8 *)v507 - 4);
                *(_QWORD *)&v1255 = &v1256;
                *((_QWORD *)&v1255 + 1) = 0x400000000;
                v512 = (int)((v508 - v500) & ~((v508 - v500) >> 63));
                v513 = *(llvm::ConstantInt **)(*v502 + 1960);
                v514 = *(_DWORD *)(*v502 + 1968);
                LODWORD(v1204.__r_.__value_.__r.__words[1]) = v514 >> 8;
                if (v514 >> 8 > 0x40)
                {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v1204, v512, 0);
                }
                else
                {
                  if (v514 <= 0xFF)
                    v515 = 0;
                  else
                    v515 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v514);
                  v1204.__r_.__value_.__r.__words[0] = v515 & v512;
                }
                v517 = llvm::ConstantInt::get(v513, (llvm::LLVMContext *)&v1204, v504);
                if (LODWORD(v1204.__r_.__value_.__r.__words[1]) >= 0x41 && v1204.__r_.__value_.__r.__words[0])
                  MEMORY[0x1CAA32F9C](v1204.__r_.__value_.__r.__words[0], 0x1000C8000313F17);
                v519 = llvm::ValueAsMetadata::get(v517, v516);
                v520 = DWORD2(v1255);
                if (DWORD2(v1255) >= (unint64_t)HIDWORD(v1255))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1255, (uint64_t)&v1256, DWORD2(v1255) + 1, 8);
                  v520 = DWORD2(v1255);
                }
                *(_QWORD *)(v1255 + 8 * v520) = v519;
                ++DWORD2(v1255);
                v521 = (int)v509 - (int)v500;
                v522 = *(llvm::ConstantInt **)(*v502 + 1960);
                v523 = *(_DWORD *)(*v502 + 1968);
                LODWORD(v1204.__r_.__value_.__r.__words[1]) = v523 >> 8;
                if (v523 >> 8 > 0x40)
                {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v1204, v521, 0);
                }
                else
                {
                  if (v523 <= 0xFF)
                    v524 = 0;
                  else
                    v524 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v523);
                  v1204.__r_.__value_.__r.__words[0] = v524 & v521;
                }
                v526 = llvm::ConstantInt::get(v522, (llvm::LLVMContext *)&v1204, v518);
                if (LODWORD(v1204.__r_.__value_.__r.__words[1]) >= 0x41 && v1204.__r_.__value_.__r.__words[0])
                  MEMORY[0x1CAA32F9C](v1204.__r_.__value_.__r.__words[0], 0x1000C8000313F17);
                v527 = llvm::ValueAsMetadata::get(v526, v525);
                v528 = DWORD2(v1255);
                if (DWORD2(v1255) >= (unint64_t)HIDWORD(v1255))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1255, (uint64_t)&v1256, DWORD2(v1255) + 1, 8);
                  v528 = DWORD2(v1255);
                }
                *(_QWORD *)(v1255 + 8 * v528) = v527;
                ++DWORD2(v1255);
                v530 = llvm::MDString::get(v502, "read_prid", 9uLL);
                v531 = DWORD2(v1255);
                if (DWORD2(v1255) >= (unint64_t)HIDWORD(v1255))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1255, (uint64_t)&v1256, DWORD2(v1255) + 1, 8);
                  v531 = DWORD2(v1255);
                }
                v532 = v511 & 0xF;
                *(_QWORD *)(v1255 + 8 * v531) = v530;
                ++DWORD2(v1255);
                v533 = *(llvm::ConstantInt **)(*v502 + 1960);
                v534 = *(_DWORD *)(*v502 + 1968);
                LODWORD(v1204.__r_.__value_.__r.__words[1]) = v534 >> 8;
                if (v534 >> 8 > 0x40)
                {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v1204, v532, 0);
                }
                else
                {
                  if (v534 <= 0xFF)
                    v535 = 0;
                  else
                    v535 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v534);
                  v1204.__r_.__value_.__r.__words[0] = v535 & v532;
                }
                v537 = llvm::ConstantInt::get(v533, (llvm::LLVMContext *)&v1204, v529);
                if (LODWORD(v1204.__r_.__value_.__r.__words[1]) >= 0x41 && v1204.__r_.__value_.__r.__words[0])
                  MEMORY[0x1CAA32F9C](v1204.__r_.__value_.__r.__words[0], 0x1000C8000313F17);
                v538 = llvm::ValueAsMetadata::get(v537, v536);
                v539 = DWORD2(v1255);
                if (DWORD2(v1255) >= (unint64_t)HIDWORD(v1255))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1255, (uint64_t)&v1256, DWORD2(v1255) + 1, 8);
                  v539 = DWORD2(v1255);
                }
                *(_QWORD *)(v1255 + 8 * v539) = v538;
                ++DWORD2(v1255);
                v541 = llvm::MDString::get(v502, "write_prid", 0xAuLL);
                v542 = DWORD2(v1255);
                if (DWORD2(v1255) >= (unint64_t)HIDWORD(v1255))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1255, (uint64_t)&v1256, DWORD2(v1255) + 1, 8);
                  v542 = DWORD2(v1255);
                }
                v543 = v511 >> 4;
                *(_QWORD *)(v1255 + 8 * v542) = v541;
                ++DWORD2(v1255);
                v544 = *(llvm::ConstantInt **)(*v502 + 1960);
                v545 = *(_DWORD *)(*v502 + 1968);
                LODWORD(v1204.__r_.__value_.__r.__words[1]) = v545 >> 8;
                if (v545 >> 8 > 0x40)
                {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v1204, v543, 0);
                }
                else
                {
                  if (v545 <= 0xFF)
                    v546 = 0;
                  else
                    v546 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v545);
                  v1204.__r_.__value_.__r.__words[0] = v546 & v543;
                }
                v548 = llvm::ConstantInt::get(v544, (llvm::LLVMContext *)&v1204, v540);
                if (LODWORD(v1204.__r_.__value_.__r.__words[1]) >= 0x41 && v1204.__r_.__value_.__r.__words[0])
                  MEMORY[0x1CAA32F9C](v1204.__r_.__value_.__r.__words[0], 0x1000C8000313F17);
                v549 = llvm::ValueAsMetadata::get(v548, v547);
                v550 = DWORD2(v1255);
                if (DWORD2(v1255) >= (unint64_t)HIDWORD(v1255))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1255, (uint64_t)&v1256, DWORD2(v1255) + 1, 8);
                  v550 = DWORD2(v1255);
                }
                *(_QWORD *)(v1255 + 8 * v550) = v549;
                ++DWORD2(v1255);
                v551 = llvm::MDTuple::getImpl(*(uint64_t **)v1163, (_QWORD *)v1255, DWORD2(v1255), 0, 1);
                v552 = DWORD2(v1252);
                if (DWORD2(v1252) >= (unint64_t)HIDWORD(v1252))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1252, (uint64_t)&v1253, DWORD2(v1252) + 1, 8);
                  v552 = DWORD2(v1252);
                }
                *(_QWORD *)(v1252 + 8 * v552) = v551;
                ++DWORD2(v1252);
                if ((uint64_t *)v1255 != &v1256)
                  free((void *)v1255);
              }
              v507 += 3;
              v506 -= 6;
            }
            while (v506);
          }
          v4 = v1171;
          v405 = (char *)v1185;
          v493 = (llvm::ValueAsMetadata *)(v484 + 32);
          if (DWORD2(v1252) > 1)
          {
            v553 = llvm::Module::getOrInsertNamedMetadata(v1163, "agx.prid", 8uLL);
            v554 = llvm::MDTuple::getImpl(*(uint64_t **)v1163, (_QWORD *)v1252, DWORD2(v1252), 0, 1);
            *(_QWORD *)&v1255 = v554;
            v555 = *(_QWORD *)(v553 + 48);
            v556 = *(unsigned int *)(v555 + 8);
            if (v556 >= *(_DWORD *)(v555 + 12))
            {
              sub_1C5419FD8(v555, (unsigned __int8 **)&v1255);
            }
            else
            {
              v489 = (llvm::Value *)v554;
              v557 = (llvm::Value **)(*(_QWORD *)v555 + 8 * v556);
              *v557 = v489;
              if (v489)
              {
                llvm::MetadataTracking::track((uint64_t)v557, (unsigned __int8 *)v489, 2);
                LODWORD(v556) = *(_DWORD *)(v555 + 8);
              }
              *(_DWORD *)(v555 + 8) = v556 + 1;
            }
            v493 = (llvm::ValueAsMetadata *)(v484 + 32);
          }
          v404 = v1158;
          if ((__int128 *)v1252 != &v1253)
          {
            free((void *)v1252);
            v493 = (llvm::ValueAsMetadata *)(v484 + 32);
          }
        }
        v558 = *((_QWORD *)v405 + 132);
        if (v558 == *((_QWORD *)v405 + 131))
          v559 = (unsigned int *)(v405 + 1068);
        else
          v559 = (unsigned int *)(v405 + 1064);
        v560 = *v559;
        if ((_DWORD)v560)
        {
          v561 = 8 * v560;
          v562 = (unint64_t *)*((_QWORD *)v405 + 132);
          while (*v562 >= 0xFFFFFFFFFFFFFFFELL)
          {
            ++v562;
            v561 -= 8;
            if (!v561)
              goto LABEL_880;
          }
        }
        else
        {
          v562 = (unint64_t *)*((_QWORD *)v405 + 132);
        }
        v563 = (unint64_t *)(v558 + 8 * v560);
        if (v562 != v563)
        {
          v564 = *v562;
LABEL_861:
          v565 = v493;
          (*(void (**)(unint64_t, uint64_t))(*(_QWORD *)v564 + 144))(v564, 6);
          (*(void (**)(unint64_t, llvm::ValueAsMetadata *, _QWORD, uint64_t))(*(_QWORD *)v564 + 496))(v564, v565, *(_QWORD *)(v4 + 32), 7);
          v566 = v1154;
          if (v405[1126] | v405[1125])
            v566 = 0;
          if (v566 == 1)
          {
            if (!(*(unsigned int (**)(unint64_t, _QWORD *))(*(_QWORD *)v564 + 408))(v564, v1161))
              goto LABEL_875;
            v567 = (_QWORD *)(*(uint64_t (**)(unint64_t))(*(_QWORD *)v564 + 616))(v564);
            if (*v567 == v567[1]
              || (v568 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v564 + 336))(v564),
                  v569 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v568 + 8))(v568),
                  v570 = (*(uint64_t (**)(unint64_t, _QWORD *))(*(_QWORD *)v564 + 400))(v564, v1161),
                  (*(unsigned int (**)(uint64_t))(*(_QWORD *)v568 + 16))(v568) != (_DWORD)v569)
              || (v571 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v568 + 48))(v568, v569),
                  v572 = (*(uint64_t (**)(unint64_t))(*(_QWORD *)v564 + 616))(v564),
                  v573 = *(unsigned int **)v572,
                  v574 = *(unsigned int **)(v572 + 8),
                  *(unsigned int **)v572 == v574))
            {
LABEL_875:
              (*(void (**)(unint64_t, uint64_t, _QWORD *))(*(_QWORD *)v564 + 152))(v564, 3, v1161);
            }
            else
            {
              v575 = (v571 >> 1) * v570;
              while (*v573 < v575 || *v573 > v575 + (v570 >> 33))
              {
                if (++v573 == v574)
                  goto LABEL_875;
              }
            }
          }
          v577 = v562 + 1;
          v4 = v1171;
          v405 = (char *)v1185;
          v493 = (llvm::ValueAsMetadata *)(v484 + 32);
          while (v577 != v563)
          {
            v578 = *v577++;
            v564 = v578;
            if (v578 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              v562 = v577 - 1;
              goto LABEL_861;
            }
          }
        }
LABEL_880:
        v1253 = 0u;
        v1252 = 0u;
        *(_QWORD *)&v1252 = llvm::ValueAsMetadata::get(v493, v489);
        *((_QWORD *)&v1252 + 1) = *(_QWORD *)(*(_QWORD *)v405 - 8 * *(unsigned int *)(*(_QWORD *)v405 + 8) + 8);
        *(_QWORD *)&v1253 = *(_QWORD *)(*(_QWORD *)v405 - 8 * *(unsigned int *)(*(_QWORD *)v405 + 8) + 16);
        v579 = llvm::ConstantInt::get(v1165, v1173 - v1188, 0);
        *((_QWORD *)&v1253 + 1) = llvm::ValueAsMetadata::get((llvm::ValueAsMetadata *)v579, v580);
        v581 = llvm::MDTuple::getImpl(*(uint64_t **)v1163, &v1252, 4, 0, 1);
        *(_QWORD *)&v1255 = v581;
        v582 = *(_QWORD *)(inserted + 48);
        v583 = *(unsigned int *)(v582 + 8);
        if (v583 >= *(_DWORD *)(v582 + 12))
        {
          sub_1C5419FD8(*(_QWORD *)(inserted + 48), (unsigned __int8 **)&v1255);
          v586 = (_QWORD *)v1178;
        }
        else
        {
          v584 = (unsigned __int8 *)v581;
          v585 = (unsigned __int8 **)(*(_QWORD *)v582 + 8 * v583);
          *v585 = v584;
          v586 = (_QWORD *)v1178;
          if (v584)
          {
            llvm::MetadataTracking::track((uint64_t)v585, v584, 2);
            LODWORD(v583) = *(_DWORD *)(v582 + 8);
          }
          *(_DWORD *)(v582 + 8) = v583 + 1;
        }
        if (v1173 == v1188)
        {
          ElementPtr = (llvm::UndefValue *)(v484 + 32);
        }
        else
        {
          v1255 = 0uLL;
          *(_QWORD *)&v1255 = llvm::ConstantInt::get(v1165, 0, 0);
          *((_QWORD *)&v1255 + 1) = llvm::ConstantInt::get(v1165, v1188 - v1173, 0);
          ElementPtr = (llvm::UndefValue *)llvm::ConstantExpr::getGetElementPtr(*((llvm::GetElementPtrInst **)v484 + 7), v1194, (llvm::Value *)&v1255, 2, 0, 0, 0);
        }
        ++v404;
        *v586 = ElementPtr;
        goto LABEL_888;
      }
      ElementPtr = 0;
LABEL_907:
      if (!v1145)
      {
        v593 = (llvm::ConstantPointerNull *)llvm::PointerType::get(*((llvm::PointerType **)v405 + 139), (llvm::Type *)0x40);
        ElementPtr = (llvm::UndefValue *)llvm::ConstantPointerNull::get(v593, v594);
      }
      sub_1C55E0128(v1161, v1166, (unsigned int *)&v1234, (uint64_t)&v1226, (uint64_t)&v1221, ElementPtr);
      v595 = *(_DWORD *)(v4 + 40);
      v596 = *(_QWORD *)(*(_QWORD *)v405 + 16);
      v597 = (_QWORD *)(v596 & 0xFFFFFFFFFFFFFFF8);
      if ((v596 & 4) != 0)
        v597 = (_QWORD *)*v597;
      v598 = (_QWORD *)*v597;
      v1179 = v405[1124];
      v1183 = v405[1125];
      *(_QWORD *)&v1255 = v1258;
      *((_QWORD *)&v1255 + 1) = v1258;
      v1256 = 4;
      v1257 = 0;
      v599 = v1227;
      v1159 = v404;
      if ((_DWORD)v1227)
      {
        v1189 = (llvm::ConstantInt *)(v598 + 245);
        if (v1179)
          v600 = v1145;
        else
          v600 = 1;
        if (v1183)
          v601 = 0;
        else
          v601 = v1145;
        v1174 = v601;
        if (v1183)
          v602 = 0;
        else
          v602 = v600;
        v1195 = v595 & 0xFFFFFFFE;
        do
        {
          v603 = (uint64_t *)*((_QWORD *)v1226 + v599 - 1);
          LODWORD(v1227) = v599 - 1;
          v604 = (_QWORD **)*v603;
          v605 = *((unsigned __int8 *)v603 + 16);
          if (v605 == 77)
          {
            if (v604[3])
            {
              v624 = llvm::PointerType::get((llvm::PointerType *)*v604[2], (llvm::Type *)0x40);
              if ((v602 & 1) != 0)
              {
                v626 = v603 - 4;
                v625 = *(v603 - 4);
                *(_QWORD *)&v1252 = v625;
                if ((v1221 & 1) != 0)
                {
                  v627 = 32;
                  v628 = &v1222;
                  goto LABEL_944;
                }
                v627 = v1223;
                if (!v1223)
                {
                  v753 = 0;
                  goto LABEL_1118;
                }
                v628 = (uint64_t *)v1222;
LABEL_944:
                v629 = v627 - 1;
                v630 = v629 & ((v625 >> 4) ^ (v625 >> 9));
                v631 = &v628[2 * v630];
                v632 = *v631;
                if (v625 != *v631)
                {
                  v633 = 0;
                  v634 = 1;
                  while (v632 != -4096)
                  {
                    if (v633)
                      v635 = 0;
                    else
                      v635 = v632 == -8192;
                    if (v635)
                      v633 = v631;
                    v636 = v630 + v634++;
                    v630 = v636 & v629;
                    v631 = &v628[2 * v630];
                    v632 = *v631;
                    if (v625 == *v631)
                      goto LABEL_1119;
                  }
                  if (v633)
                    v753 = v633;
                  else
                    v753 = v631;
LABEL_1118:
                  v631 = sub_1C55E07C8((uint64_t)&v1221, (uint64_t)&v1252, &v1252, v753);
                  *v631 = v1252;
                  v631[1] = 0;
                }
LABEL_1119:
                v754 = v631[1];
                if (*v626)
                {
                  *(_QWORD *)*(v603 - 2) = *(v603 - 3);
                  v755 = *(v603 - 3);
                  if (v755)
                    *(_QWORD *)(v755 + 16) = *(v603 - 2);
                }
                *v626 = v754;
                if (v754)
                {
                  v758 = *(_QWORD ***)(v754 + 8);
                  v756 = (uint64_t **)(v754 + 8);
                  v757 = v758;
                  *(v603 - 3) = (uint64_t)v758;
                  if (v758)
                    v757[2] = v603 - 3;
                  *(v603 - 2) = (uint64_t)v756;
                  *v756 = v626;
                }
                *v603 = v624;
                *(_QWORD *)&v1252 = v603;
                if ((v1221 & 1) != 0)
                {
                  v759 = 32;
                  v760 = &v1222;
                  goto LABEL_1128;
                }
                v759 = v1223;
                if (!v1223)
                {
                  v779 = 0;
                  goto LABEL_1152;
                }
                v760 = (uint64_t *)v1222;
LABEL_1128:
                v761 = v759 - 1;
                v762 = v761 & ((v603 >> 4) ^ (v603 >> 9));
                v763 = &v760[2 * v762];
                v764 = (_QWORD ***)*v763;
                if (v603 != (uint64_t *)*v763)
                {
                  v765 = 0;
                  v766 = 1;
                  while (v764 != (_QWORD ***)-4096)
                  {
                    if (v765)
                      v767 = 0;
                    else
                      v767 = v764 == (_QWORD ***)-8192;
                    if (v767)
                      v765 = v763;
                    v768 = v762 + v766++;
                    v762 = v768 & v761;
                    v763 = &v760[2 * v762];
                    v764 = (_QWORD ***)*v763;
                    if (v603 == (uint64_t *)*v763)
                      goto LABEL_1153;
                  }
                  if (v765)
                    v779 = v765;
                  else
                    v779 = v763;
LABEL_1152:
                  v763 = sub_1C55E07C8((uint64_t)&v1221, (uint64_t)&v1252, &v1252, v779);
                  *v763 = v1252;
                  v763[1] = 0;
                }
LABEL_1153:
                v763[1] = (uint64_t)v603;
LABEL_1154:
                v1252 = 4uLL;
                *(_QWORD *)&v1253 = v603;
                if (v603 != (uint64_t *)-8192 && v603 != (uint64_t *)-4096 && v603)
                  llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v1252);
                v780 = (_QWORD *)sub_1C4EE497C((unsigned int *)&v1234, (unint64_t)&v1252, 1);
                v781 = (int)v1235;
                v782 = (unint64_t *)((char *)v1234 + 24 * v1235);
                *v782 = 4;
                v782[1] = 0;
                v783 = (unint64_t)(v782 + 1);
                v784 = v780[2];
                v782[2] = v784;
                if (v784 != -8192 && v784 != -4096 && v784 != 0)
                {
                  v786 = *v780 & 0xFFFFFFFFFFFFFFF8;
                  v782[1] = *(_QWORD *)v786;
                  *(_QWORD *)v786 = v782;
                  *v782 = v786 | 4;
                  v787 = (uint64_t *)v782[1];
                  if (v787)
                    *v787 = *v787 & 7 | v783;
                }
                LODWORD(v1235) = v781 + 1;
                if ((_QWORD)v1253 != -8192 && (_QWORD)v1253 != -4096 && (_QWORD)v1253)
                {
                  v788 = v1252 & 0xFFFFFFFFFFFFFFF8;
                  *(_QWORD *)(v1252 & 0xFFFFFFFFFFFFFFF8) = *((_QWORD *)&v1252 + 1);
                  if (*((_QWORD *)&v1252 + 1))
                  {
                    **((_QWORD **)&v1252 + 1) = **((_QWORD **)&v1252 + 1) & 7 | v788;
                  }
                  else
                  {
                    v789 = v1253;
                    v790 = ***(int32x2_t ****)v1253;
                    v791 = (unint64_t)v790[303];
                    if (v791 <= v788)
                    {
                      v792 = v790[305].u32[0];
                      if (v791 + 16 * v792 > v788)
                      {
                        v793 = v792 - 1;
                        LODWORD(v794) = v793 & ((v1253 >> 4) ^ (v1253 >> 9));
                        v795 = (uint64_t *)(v791 + 16 * v794);
                        v796 = *v795;
                        if ((_QWORD)v1253 == *v795)
                        {
LABEL_1176:
                          *v795 = -8192;
                          v790[304] = vadd_s32(v790[304], (int32x2_t)0x1FFFFFFFFLL);
                          v789 = v1253;
                        }
                        else
                        {
                          v797 = 1;
                          while (v796 != -4096)
                          {
                            v798 = v794 + v797++;
                            v794 = v798 & v793;
                            v796 = *(_QWORD *)(v791 + 16 * v794);
                            if ((_QWORD)v1253 == v796)
                            {
                              v795 = (uint64_t *)(v791 + 16 * v794);
                              goto LABEL_1176;
                            }
                          }
                        }
                        *(_BYTE *)(v789 + 17) &= ~1u;
                      }
                    }
                  }
                }
                v859 = (_QWORD **)v603[1];
                if (!v859)
                  goto LABEL_1460;
                v599 = v1227;
                v405 = (char *)v1185;
                do
                {
                  v860 = v859[3];
                  if (v599 >= HIDWORD(v1227))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1226, (uint64_t)&v1228, v599 + 1, 8);
                    v599 = v1227;
                  }
                  *((_QWORD *)v1226 + v599) = v860;
                  v599 = (_DWORD)v1227 + 1;
                  LODWORD(v1227) = (_DWORD)v1227 + 1;
                  v859 = (_QWORD **)v859[1];
                }
                while (v859);
                continue;
              }
              v683 = operator new(0x60uLL);
              v684 = (uint64_t)(v683 + 8);
              v683[13] = v683[13] & 0x38000000 | 1;
              *(_QWORD *)v683 = 0;
              *((_QWORD *)v683 + 1) = 0;
              *((_QWORD *)v683 + 2) = 0;
              *((_QWORD *)v683 + 3) = v683 + 8;
              v685 = *(v603 - 4);
              v1204.__r_.__value_.__r.__words[0] = v685;
              if ((v1221 & 1) != 0)
              {
                v686 = 32;
                v687 = &v1222;
                goto LABEL_1029;
              }
              v686 = v1223;
              if (!v1223)
              {
                v769 = 0;
                goto LABEL_1141;
              }
              v687 = (uint64_t *)v1222;
LABEL_1029:
              v688 = v686 - 1;
              v689 = v688 & ((v685 >> 4) ^ (v685 >> 9));
              v690 = &v687[2 * v689];
              v691 = *v690;
              if (v685 != *v690)
              {
                v692 = 0;
                v693 = 1;
                while (v691 != -4096)
                {
                  if (v692)
                    v694 = 0;
                  else
                    v694 = v691 == -8192;
                  if (v694)
                    v692 = v690;
                  v695 = v689 + v693++;
                  v689 = v695 & v688;
                  v690 = &v687[2 * v689];
                  v691 = *v690;
                  if (v685 == *v690)
                    goto LABEL_1142;
                }
                if (v692)
                  v769 = v692;
                else
                  v769 = v690;
LABEL_1141:
                v690 = sub_1C55E07C8((uint64_t)&v1221, (uint64_t)&v1204, &v1204, v769);
                *v690 = v1204.__r_.__value_.__r.__words[0];
                v690[1] = 0;
              }
LABEL_1142:
              v770 = v690[1];
              if ((*((_BYTE *)v603 + 23) & 0x10) != 0)
              {
                v771 = **(_QWORD **)*v603;
                v772 = *(_QWORD *)(v771 + 152);
                v773 = *(unsigned int *)(v771 + 168);
                if (!(_DWORD)v773)
                  goto LABEL_1258;
                LODWORD(v774) = (v773 - 1) & ((v603 >> 4) ^ (v603 >> 9));
                v775 = (uint64_t **)(v772 + 16 * v774);
                v776 = *v775;
                if (*v775 != v603)
                {
                  v777 = 1;
                  while (v776 != (uint64_t *)-4096)
                  {
                    v778 = v774 + v777++;
                    v774 = v778 & (v773 - 1);
                    v776 = *(uint64_t **)(v772 + 16 * v774);
                    if (v776 == v603)
                    {
                      v775 = (uint64_t **)(v772 + 16 * v774);
                      goto LABEL_1259;
                    }
                  }
LABEL_1258:
                  v775 = (uint64_t **)(v772 + 16 * v773);
                }
LABEL_1259:
                v861 = v775[1];
                v864 = *v861;
                v863 = (char *)(v861 + 2);
                v862 = v864;
              }
              else
              {
                v862 = 0;
                v863 = &byte_1C871356D;
              }
              v1254 = 261;
              *(_QWORD *)&v1252 = v863;
              *((_QWORD *)&v1252 + 1) = v862;
              llvm::BitCastInst::BitCastInst(v684, v770, v624, (uint64_t)&v1252, (uint64_t)v603);
              *(_QWORD *)&v1252 = v603;
              if ((v1221 & 1) != 0)
              {
                v865 = 32;
                v866 = &v1222;
                goto LABEL_1262;
              }
              v865 = v1223;
              if (v1223)
              {
                v866 = (uint64_t *)v1222;
LABEL_1262:
                v867 = v865 - 1;
                v868 = v867 & ((v603 >> 4) ^ (v603 >> 9));
                v869 = &v866[2 * v868];
                v870 = (_QWORD ***)*v869;
                if (v603 != (uint64_t *)*v869)
                {
                  v871 = 0;
                  v872 = 1;
                  while (v870 != (_QWORD ***)-4096)
                  {
                    if (v871)
                      v873 = 0;
                    else
                      v873 = v870 == (_QWORD ***)-8192;
                    if (v873)
                      v871 = v869;
                    v874 = v868 + v872++;
                    v868 = v874 & v867;
                    v869 = &v866[2 * v868];
                    v870 = (_QWORD ***)*v869;
                    if (v603 == (uint64_t *)*v869)
                      goto LABEL_1276;
                  }
                  if (v871)
                    v875 = v871;
                  else
                    v875 = v869;
LABEL_1275:
                  v869 = sub_1C55E07C8((uint64_t)&v1221, (uint64_t)&v1252, &v1252, v875);
                  *v869 = v1252;
                  v869[1] = 0;
                }
LABEL_1276:
                v869[1] = v684;
                v1252 = 4uLL;
                *(_QWORD *)&v1253 = v684;
                if (v684 != -8192 && v684 != -4096 && v684)
                  llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v1252);
                v876 = (_QWORD *)sub_1C4EE497C((unsigned int *)&v1234, (unint64_t)&v1252, 1);
                v877 = (int)v1235;
                v878 = (unint64_t *)((char *)v1234 + 24 * v1235);
                *v878 = 4;
                v878[1] = 0;
                v879 = (unint64_t)(v878 + 1);
                v880 = v876[2];
                v878[2] = v880;
                if (v880 != -8192 && v880 != -4096)
                {
                  if (v880)
                  {
                    v881 = *v876 & 0xFFFFFFFFFFFFFFF8;
                    v878[1] = *(_QWORD *)v881;
                    *(_QWORD *)v881 = v878;
                    *v878 = v881 | 4;
                    v882 = (uint64_t *)v878[1];
                    if (v882)
                      *v882 = *v882 & 7 | v879;
                  }
                }
                LODWORD(v1235) = v877 + 1;
                if ((_QWORD)v1253 != -8192 && (_QWORD)v1253 != -4096 && (_QWORD)v1253)
                {
                  v883 = v1252 & 0xFFFFFFFFFFFFFFF8;
                  *(_QWORD *)(v1252 & 0xFFFFFFFFFFFFFFF8) = *((_QWORD *)&v1252 + 1);
                  if (*((_QWORD *)&v1252 + 1))
                  {
                    **((_QWORD **)&v1252 + 1) = **((_QWORD **)&v1252 + 1) & 7 | v883;
                  }
                  else
                  {
                    v884 = v1253;
                    v885 = ***(int32x2_t ****)v1253;
                    v886 = (unint64_t)v885[303];
                    if (v886 <= v883)
                    {
                      v887 = v885[305].u32[0];
                      if (v886 + 16 * v887 > v883)
                      {
                        v888 = v887 - 1;
                        LODWORD(v889) = v888 & ((v1253 >> 4) ^ (v1253 >> 9));
                        v890 = (uint64_t *)(v886 + 16 * v889);
                        v891 = *v890;
                        if ((_QWORD)v1253 == *v890)
                        {
LABEL_1296:
                          *v890 = -8192;
                          v885[304] = vadd_s32(v885[304], (int32x2_t)0x1FFFFFFFFLL);
                          v884 = v1253;
                        }
                        else
                        {
                          v892 = 1;
                          while (v891 != -4096)
                          {
                            v893 = v889 + v892++;
                            v889 = v893 & v888;
                            v891 = *(_QWORD *)(v886 + 16 * v889);
                            if ((_QWORD)v1253 == v891)
                            {
                              v890 = (uint64_t *)(v886 + 16 * v889);
                              goto LABEL_1296;
                            }
                          }
                        }
                        *(_BYTE *)(v884 + 17) &= ~1u;
                      }
                    }
                  }
                }
                goto LABEL_1154;
              }
              v875 = 0;
              goto LABEL_1275;
            }
            v659 = *(v603 - 4);
            *(_QWORD *)&v1252 = v659;
            v660 = (char)v1221;
            if ((v1221 & 1) != 0)
            {
              v661 = 32;
              v662 = &v1222;
              goto LABEL_1004;
            }
            v661 = v1223;
            if (!v1223)
            {
              v705 = 0;
              goto LABEL_1055;
            }
            v662 = (uint64_t *)v1222;
LABEL_1004:
            v663 = v661 - 1;
            v664 = v663 & ((v659 >> 4) ^ (v659 >> 9));
            v665 = &v662[2 * v664];
            v666 = *v665;
            if (v659 != *v665)
            {
              v667 = 0;
              v668 = 1;
              while (v666 != -4096)
              {
                if (v667)
                  v669 = 0;
                else
                  v669 = v666 == -8192;
                if (v669)
                  v667 = v665;
                v670 = v664 + v668++;
                v664 = v670 & v663;
                v665 = &v662[2 * v664];
                v666 = *v665;
                if (v659 == *v665)
                  goto LABEL_1056;
              }
              if (v667)
                v705 = v667;
              else
                v705 = v665;
LABEL_1055:
              v665 = sub_1C55E07C8((uint64_t)&v1221, (uint64_t)&v1252, &v1252, v705);
              *v665 = v1252;
              v665[1] = 0;
              v660 = (char)v1221;
            }
LABEL_1056:
            v706 = v665[1];
            v1204.__r_.__value_.__r.__words[0] = (std::string::size_type)v603;
            if ((v660 & 1) != 0)
            {
              v707 = 32;
              v708 = &v1222;
              goto LABEL_1058;
            }
            v707 = v1223;
            if (v1223)
            {
              v708 = (uint64_t *)v1222;
LABEL_1058:
              v709 = v707 - 1;
              v710 = v709 & ((v603 >> 4) ^ (v603 >> 9));
              v711 = &v708[2 * v710];
              v712 = (_QWORD ***)*v711;
              if (v603 != (uint64_t *)*v711)
              {
                v713 = 0;
                v714 = 1;
                while (v712 != (_QWORD ***)-4096)
                {
                  if (v713)
                    v715 = 0;
                  else
                    v715 = v712 == (_QWORD ***)-8192;
                  if (v715)
                    v713 = v711;
                  v716 = v710 + v714++;
                  v710 = v716 & v709;
                  v711 = &v708[2 * v710];
                  v712 = (_QWORD ***)*v711;
                  if (v603 == (uint64_t *)*v711)
                    goto LABEL_1072;
                }
                if (v713)
                  v717 = v713;
                else
                  v717 = v711;
LABEL_1071:
                v711 = sub_1C55E07C8((uint64_t)&v1221, (uint64_t)&v1204, &v1204, v717);
                *v711 = v1204.__r_.__value_.__r.__words[0];
                v711[1] = 0;
              }
LABEL_1072:
              v711[1] = v706;
              goto LABEL_1154;
            }
            v717 = 0;
            goto LABEL_1071;
          }
          if (v605 != 62)
          {
            if (v605 == 60)
            {
              v606 = *v604;
              *(_QWORD *)&v1252 = 0;
              if (sub_1C55E05AC((uint64_t)v1231, (uint64_t)v603, &v1252))
              {
                v607 = (void **)v1252;
                v608 = (void **)v1231[1];
                v609 = v1232;
                v610 = (uint64_t)v1231[0] & 1;
              }
              else
              {
                v610 = (uint64_t)v1231[0] & 1;
                v608 = (void **)v1231[1];
                if (((uint64_t)v1231[0] & 1) != 0)
                  v651 = &v1231[1];
                else
                  v651 = (void **)v1231[1];
                v609 = v1232;
                if (((uint64_t)v1231[0] & 1) != 0)
                  v652 = 32;
                else
                  v652 = v1232;
                v607 = &v651[2 * v652];
              }
              if (v610)
              {
                v608 = &v1231[1];
                v653 = 32;
              }
              else
              {
                v653 = v609;
              }
              if (v607 != &v608[2 * v653])
              {
                v654 = *(uint64_t **)v607[1];
                v655 = (llvm::PointerType *)(*v606 + 1912);
                v656 = (llvm::Constant *)llvm::PointerType::get(v655, (llvm::Type *)0x40);
                if ((llvm::Constant *)*v654 != v656)
                  v654 = (uint64_t *)sub_1C537D3B8((llvm *)0x31, (uint64_t)v654, v656, 0);
                *(_QWORD *)&v1252 = 0;
                *(_QWORD *)&v1252 = llvm::ConstantInt::get(v1189, *((_QWORD *)v607[1] + 1), 0);
                v657 = (_QWORD *)llvm::ConstantExpr::getGetElementPtr(v655, v654, (llvm::Value *)&v1252, 1, 0, 0, 0);
                v658 = (llvm::Constant *)llvm::PointerType::get((llvm::PointerType *)*v603, (llvm::Type *)0x40);
                if ((llvm::Constant *)*v657 != v658)
                  v657 = sub_1C537D3B8((llvm *)0x31, (uint64_t)v657, v658, 0);
                goto LABEL_1183;
              }
              if (!v1174)
                goto LABEL_1460;
              v671 = *(v603 - 4);
              *(_QWORD *)&v1252 = v671;
              if ((v1221 & 1) != 0)
              {
                v672 = 32;
                v673 = &v1222;
                goto LABEL_1017;
              }
              v672 = v1223;
              if (v1223)
              {
                v673 = (uint64_t *)v1222;
LABEL_1017:
                v674 = v672 - 1;
                v675 = v674 & ((v671 >> 4) ^ (v671 >> 9));
                v676 = &v673[2 * v675];
                v677 = *v676;
                if (v671 != *v676)
                {
                  v678 = 0;
                  v679 = 1;
                  while (v677 != -4096)
                  {
                    if (v678)
                      v680 = 0;
                    else
                      v680 = v677 == -8192;
                    if (v680)
                      v678 = v676;
                    v681 = v675 + v679++;
                    v675 = v681 & v674;
                    v676 = &v673[2 * v675];
                    v677 = *v676;
                    if (v671 == *v676)
                      goto LABEL_1182;
                  }
                  if (v678)
                    v799 = v678;
                  else
                    v799 = v676;
LABEL_1181:
                  v676 = sub_1C55E07C8((uint64_t)&v1221, (uint64_t)&v1252, &v1252, v799);
                  *v676 = v1252;
                  v676[1] = 0;
                }
LABEL_1182:
                v657 = (_QWORD *)v676[1];
LABEL_1183:
                v800 = v603 - 4;
                if (*(v603 - 4))
                {
                  *(_QWORD *)*(v603 - 2) = *(v603 - 3);
                  v801 = *(v603 - 3);
                  if (v801)
                    *(_QWORD *)(v801 + 16) = *(v603 - 2);
                }
                *v800 = (uint64_t)v657;
                if (v657)
                {
                  v804 = (_QWORD **)v657[1];
                  v803 = (uint64_t **)(v657 + 1);
                  v802 = v804;
                  *(v603 - 3) = (uint64_t)v804;
                  if (v804)
                    v802[2] = v603 - 3;
                  *(v603 - 2) = (uint64_t)v803;
                  *v803 = v800;
                }
                goto LABEL_1460;
              }
              v799 = 0;
              goto LABEL_1181;
            }
            if (v605 == 85)
              v637 = v603;
            else
              v637 = 0;
            if (v1195 == 28)
              goto LABEL_1460;
            if (!v637)
              goto LABEL_1460;
            v638 = (llvm::UndefValue *)llvm::PointerType::get(**(llvm::PointerType ***)(*v637 + 16), (llvm::Type *)0x40);
            if ((sub_1C627E01C((uint64_t)&v1221, (uint64_t)v637, &v1252) & 1) != 0)
              goto LABEL_1460;
            v639 = 0;
            v640 = 1;
LABEL_961:
            while (2)
            {
              v1204.__r_.__value_.__r.__words[0] = 0;
              v641 = (unsigned __int8 *)v637[4 * v640 - 12];
              v1204.__r_.__value_.__r.__words[0] = (std::string::size_type)v641;
              v642 = v641[16];
              if ((v642 - 11) <= 1)
              {
                v643 = llvm::UndefValue::get(v638, (llvm::Type *)v641);
                goto LABEL_965;
              }
              if (v642 == 19)
              {
                v643 = llvm::ConstantPointerNull::get(v638, (llvm::PointerType *)v641);
LABEL_965:
                sub_1C627E0C8((uint64_t)&v1221, &v1204)[1] = v643;
              }
              else if ((sub_1C627E01C((uint64_t)&v1221, (uint64_t)v641, &v1252) & 1) == 0)
              {
                v644 = sub_1C477672C((uint64_t)&v1255, (uint64_t)v637);
                if (*((_QWORD *)&v1255 + 1) == (_QWORD)v1255)
                  v645 = (uint64_t *)((char *)&v1256 + 4);
                else
                  v645 = &v1256;
                if (v644 == (_QWORD *)(*((_QWORD *)&v1255 + 1) + 8 * *(unsigned int *)v645))
                {
                  if (v1183 && !(_DWORD)v1227)
                    goto LABEL_1460;
                }
                else if (v1183)
                {
                  goto LABEL_1460;
                }
                sub_1C4774094((llvm::SmallPtrSetImplBase *)&v1255, (uint64_t)v637);
                *(_QWORD *)&v1252 = v637;
                sub_1C6193964((uint64_t)&v1226, (uint64_t)v1226, (uint64_t *)&v1252);
                v639 = 1;
                v60 = v640 == 2;
                v640 = 2;
                if (v60)
                  goto LABEL_1460;
                continue;
              }
              break;
            }
            v60 = v640 == 2;
            v640 = 2;
            if (v60)
            {
              if ((v639 & 1) != 0)
                goto LABEL_1460;
              if ((v602 & 1) != 0)
              {
                v915 = v637 - 8;
                v914 = *(v637 - 8);
                *(_QWORD *)&v1252 = v914;
                if ((v1221 & 1) != 0)
                {
                  v916 = 32;
                  v917 = &v1222;
                  goto LABEL_1346;
                }
                v916 = v1223;
                if (!v1223)
                {
                  v941 = 0;
                  goto LABEL_1379;
                }
                v917 = (uint64_t *)v1222;
LABEL_1346:
                v918 = v916 - 1;
                v919 = v918 & ((v914 >> 4) ^ (v914 >> 9));
                v920 = &v917[2 * v919];
                v921 = *v920;
                if (v914 != *v920)
                {
                  v922 = 0;
                  v923 = 1;
                  while (v921 != -4096)
                  {
                    if (v922)
                      v924 = 0;
                    else
                      v924 = v921 == -8192;
                    if (v924)
                      v922 = v920;
                    v925 = v919 + v923++;
                    v919 = v925 & v918;
                    v920 = &v917[2 * v919];
                    v921 = *v920;
                    if (v914 == *v920)
                      goto LABEL_1380;
                  }
                  if (v922)
                    v941 = v922;
                  else
                    v941 = v920;
LABEL_1379:
                  v920 = sub_1C55E07C8((uint64_t)&v1221, (uint64_t)&v1252, &v1252, v941);
                  *v920 = v1252;
                  v920[1] = 0;
                }
LABEL_1380:
                v942 = v920[1];
                if (*v915)
                {
                  *(_QWORD *)*(v637 - 6) = *(v637 - 7);
                  v943 = *(v637 - 7);
                  if (v943)
                    *(_QWORD *)(v943 + 16) = *(v637 - 6);
                }
                *v915 = v942;
                if (v942)
                {
                  v946 = *(_QWORD *)(v942 + 8);
                  v944 = (uint64_t **)(v942 + 8);
                  v945 = v946;
                  *(v637 - 7) = v946;
                  if (v946)
                    *(_QWORD *)(v945 + 16) = v637 - 7;
                  *(v637 - 6) = (uint64_t)v944;
                  *v944 = v915;
                }
                v948 = v637 - 4;
                v947 = *(v637 - 4);
                *(_QWORD *)&v1252 = v947;
                if ((v1221 & 1) != 0)
                {
                  v949 = 32;
                  v950 = &v1222;
                  goto LABEL_1389;
                }
                v949 = v1223;
                if (!v1223)
                {
                  v972 = 0;
                  goto LABEL_1418;
                }
                v950 = (uint64_t *)v1222;
LABEL_1389:
                v951 = v949 - 1;
                v952 = v951 & ((v947 >> 4) ^ (v947 >> 9));
                v953 = &v950[2 * v952];
                v954 = *v953;
                if (v947 != *v953)
                {
                  v955 = 0;
                  v956 = 1;
                  while (v954 != -4096)
                  {
                    if (v955)
                      v957 = 0;
                    else
                      v957 = v954 == -8192;
                    if (v957)
                      v955 = v953;
                    v958 = v952 + v956++;
                    v952 = v958 & v951;
                    v953 = &v950[2 * v952];
                    v954 = *v953;
                    if (v947 == *v953)
                      goto LABEL_1419;
                  }
                  if (v955)
                    v972 = v955;
                  else
                    v972 = v953;
LABEL_1418:
                  v953 = sub_1C55E07C8((uint64_t)&v1221, (uint64_t)&v1252, &v1252, v972);
                  *v953 = v1252;
                  v953[1] = 0;
                }
LABEL_1419:
                v973 = v953[1];
                if (*v948)
                {
                  *(_QWORD *)*(v637 - 2) = *(v637 - 3);
                  v974 = *(v637 - 3);
                  if (v974)
                    *(_QWORD *)(v974 + 16) = *(v637 - 2);
                }
                *v948 = v973;
                if (v973)
                {
                  v977 = *(_QWORD *)(v973 + 8);
                  v975 = (uint64_t **)(v973 + 8);
                  v976 = v977;
                  *(v637 - 3) = v977;
                  if (v977)
                    *(_QWORD *)(v976 + 16) = v637 - 3;
                  *(v637 - 2) = (uint64_t)v975;
                  *v975 = v948;
                }
                *v637 = *(_QWORD *)*(v637 - 8);
                *(_QWORD *)&v1252 = v637;
                if ((v1221 & 1) != 0)
                {
                  v978 = 32;
                  v979 = &v1222;
                  goto LABEL_1428;
                }
                v978 = v1223;
                if (!v1223)
                {
                  v999 = 0;
                  goto LABEL_1452;
                }
                v979 = (uint64_t *)v1222;
LABEL_1428:
                v980 = v978 - 1;
                v981 = v980 & ((v637 >> 4) ^ (v637 >> 9));
                v982 = &v979[2 * v981];
                v983 = (_QWORD *)*v982;
                if (v637 != (uint64_t *)*v982)
                {
                  v984 = 0;
                  v985 = 1;
                  while (v983 != (_QWORD *)-4096)
                  {
                    if (v984)
                      v986 = 0;
                    else
                      v986 = v983 == (_QWORD *)-8192;
                    if (v986)
                      v984 = v982;
                    v987 = v981 + v985++;
                    v981 = v987 & v980;
                    v982 = &v979[2 * v981];
                    v983 = (_QWORD *)*v982;
                    if (v637 == (uint64_t *)*v982)
                      goto LABEL_1453;
                  }
                  if (v984)
                    v999 = v984;
                  else
                    v999 = v982;
LABEL_1452:
                  v982 = sub_1C55E07C8((uint64_t)&v1221, (uint64_t)&v1252, &v1252, v999);
                  *v982 = v1252;
                  v982[1] = 0;
                }
LABEL_1453:
                v982[1] = (uint64_t)v637;
LABEL_1454:
                v1000 = v637[1];
                if (v1000)
                {
                  v599 = v1227;
                  v405 = (char *)v1185;
                  do
                  {
                    v1001 = *(_QWORD *)(v1000 + 24);
                    if (v599 >= HIDWORD(v1227))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1226, (uint64_t)&v1228, v599 + 1, 8);
                      v599 = v1227;
                    }
                    *((_QWORD *)v1226 + v599) = v1001;
                    v599 = (_DWORD)v1227 + 1;
                    LODWORD(v1227) = (_DWORD)v1227 + 1;
                    v1000 = *(_QWORD *)(v1000 + 8);
                  }
                  while (v1000);
                  continue;
                }
LABEL_1460:
                v599 = v1227;
                v405 = (char *)v1185;
                continue;
              }
              v928 = *(v637 - 12);
              v929 = *(v637 - 8);
              v1204.__r_.__value_.__r.__words[0] = v929;
              v930 = (char)v1221;
              if ((v1221 & 1) != 0)
              {
                v931 = 32;
                v932 = &v1222;
                goto LABEL_1366;
              }
              v931 = v1223;
              if (!v1223)
              {
                v959 = 0;
                goto LABEL_1402;
              }
              v932 = (uint64_t *)v1222;
LABEL_1366:
              v933 = v931 - 1;
              v934 = v933 & ((v929 >> 4) ^ (v929 >> 9));
              v935 = &v932[2 * v934];
              v936 = *v935;
              if (v929 != *v935)
              {
                v937 = 0;
                v938 = 1;
                while (v936 != -4096)
                {
                  if (v937)
                    v939 = 0;
                  else
                    v939 = v936 == -8192;
                  if (v939)
                    v937 = v935;
                  v940 = v934 + v938++;
                  v934 = v940 & v933;
                  v935 = &v932[2 * v934];
                  v936 = *v935;
                  if (v929 == *v935)
                    goto LABEL_1403;
                }
                if (v937)
                  v959 = v937;
                else
                  v959 = v935;
LABEL_1402:
                v935 = sub_1C55E07C8((uint64_t)&v1221, (uint64_t)&v1204, &v1204, v959);
                *v935 = v1204.__r_.__value_.__r.__words[0];
                v935[1] = 0;
                v930 = (char)v1221;
              }
LABEL_1403:
              v960 = (uint64_t *)v935[1];
              v961 = *(v637 - 4);
              v1203 = v961;
              if ((v930 & 1) != 0)
              {
                v962 = 32;
                v963 = &v1222;
                goto LABEL_1405;
              }
              v962 = v1223;
              if (!v1223)
              {
                v988 = 0;
                goto LABEL_1441;
              }
              v963 = (uint64_t *)v1222;
LABEL_1405:
              v964 = v962 - 1;
              v965 = v964 & ((v961 >> 4) ^ (v961 >> 9));
              v966 = &v963[2 * v965];
              v967 = *v966;
              if (v961 != *v966)
              {
                v968 = 0;
                v969 = 1;
                while (v967 != -4096)
                {
                  if (v968)
                    v970 = 0;
                  else
                    v970 = v967 == -8192;
                  if (v970)
                    v968 = v966;
                  v971 = v965 + v969++;
                  v965 = v971 & v964;
                  v966 = &v963[2 * v965];
                  v967 = *v966;
                  if (v961 == *v966)
                    goto LABEL_1442;
                }
                if (v968)
                  v988 = v968;
                else
                  v988 = v966;
LABEL_1441:
                v966 = sub_1C55E07C8((uint64_t)&v1221, (uint64_t)&v1203, &v1203, v988);
                *v966 = v1203;
                v966[1] = 0;
              }
LABEL_1442:
              v989 = v966[1];
              v990 = v637 >> 4;
              if ((*((_BYTE *)v637 + 23) & 0x10) != 0)
              {
                v991 = **(_QWORD **)*v637;
                v992 = *(_QWORD *)(v991 + 152);
                v993 = *(unsigned int *)(v991 + 168);
                if (!(_DWORD)v993)
                  goto LABEL_1463;
                LODWORD(v994) = (v993 - 1) & (v990 ^ (v637 >> 9));
                v995 = (uint64_t **)(v992 + 16 * v994);
                v996 = *v995;
                if (*v995 != v637)
                {
                  v997 = 1;
                  while (v996 != (uint64_t *)-4096)
                  {
                    v998 = v994 + v997++;
                    v994 = v998 & (v993 - 1);
                    v996 = *(uint64_t **)(v992 + 16 * v994);
                    if (v996 == v637)
                    {
                      v995 = (uint64_t **)(v992 + 16 * v994);
                      goto LABEL_1464;
                    }
                  }
LABEL_1463:
                  v995 = (uint64_t **)(v992 + 16 * v993);
                }
LABEL_1464:
                v1002 = v995[1];
                v1005 = *v1002;
                v1004 = (char *)(v1002 + 2);
                v1003 = v1005;
              }
              else
              {
                v1003 = 0;
                v1004 = &byte_1C871356D;
              }
              v1254 = 261;
              *(_QWORD *)&v1252 = v1004;
              *((_QWORD *)&v1252 + 1) = v1003;
              v1006 = sub_1C4FC8748(v928, v960, v989, (uint64_t)&v1252, (uint64_t)v637, 0);
              *(_QWORD *)&v1252 = v637;
              if ((v1221 & 1) != 0)
              {
                v1007 = 32;
                v1008 = &v1222;
                goto LABEL_1467;
              }
              v1007 = v1223;
              if (v1223)
              {
                v1008 = (uint64_t *)v1222;
LABEL_1467:
                v1009 = v1007 - 1;
                v1010 = v1009 & (v990 ^ (v637 >> 9));
                v1011 = &v1008[2 * v1010];
                v1012 = (_QWORD *)*v1011;
                if (v637 != (uint64_t *)*v1011)
                {
                  v1013 = 0;
                  v1014 = 1;
                  while (v1012 != (_QWORD *)-4096)
                  {
                    if (v1013)
                      v1015 = 0;
                    else
                      v1015 = v1012 == (_QWORD *)-8192;
                    if (v1015)
                      v1013 = v1011;
                    v1016 = v1010 + v1014++;
                    v1010 = v1016 & v1009;
                    v1011 = &v1008[2 * v1010];
                    v1012 = (_QWORD *)*v1011;
                    if (v637 == (uint64_t *)*v1011)
                      goto LABEL_1481;
                  }
                  if (v1013)
                    v1017 = v1013;
                  else
                    v1017 = v1011;
LABEL_1480:
                  v1011 = sub_1C55E07C8((uint64_t)&v1221, (uint64_t)&v1252, &v1252, v1017);
                  *v1011 = v1252;
                  v1011[1] = 0;
                }
LABEL_1481:
                v1011[1] = (uint64_t)v1006;
                v1252 = 4uLL;
                *(_QWORD *)&v1253 = v1006;
                if (v1006 != (llvm::Value *)-8192 && v1006 != (llvm::Value *)-4096 && v1006)
                  llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v1252);
                v1018 = (_QWORD *)sub_1C4EE497C((unsigned int *)&v1234, (unint64_t)&v1252, 1);
                v1019 = (int)v1235;
                v1020 = (unint64_t *)((char *)v1234 + 24 * v1235);
                *v1020 = 4;
                v1020[1] = 0;
                v1021 = (unint64_t)(v1020 + 1);
                v1022 = v1018[2];
                v1020[2] = v1022;
                if (v1022 != -8192 && v1022 != -4096)
                {
                  if (v1022)
                  {
                    v1023 = *v1018 & 0xFFFFFFFFFFFFFFF8;
                    v1020[1] = *(_QWORD *)v1023;
                    *(_QWORD *)v1023 = v1020;
                    *v1020 = v1023 | 4;
                    v1024 = (uint64_t *)v1020[1];
                    if (v1024)
                      *v1024 = *v1024 & 7 | v1021;
                  }
                }
                LODWORD(v1235) = v1019 + 1;
                if ((_QWORD)v1253 != -8192 && (_QWORD)v1253 != -4096 && (_QWORD)v1253)
                {
                  v1025 = v1252 & 0xFFFFFFFFFFFFFFF8;
                  *(_QWORD *)(v1252 & 0xFFFFFFFFFFFFFFF8) = *((_QWORD *)&v1252 + 1);
                  if (*((_QWORD *)&v1252 + 1))
                  {
                    **((_QWORD **)&v1252 + 1) = **((_QWORD **)&v1252 + 1) & 7 | v1025;
                  }
                  else
                  {
                    v1026 = v1253;
                    v1027 = ***(int32x2_t ****)v1253;
                    v1028 = (unint64_t)v1027[303];
                    if (v1028 <= v1025)
                    {
                      v1029 = v1027[305].u32[0];
                      if (v1028 + 16 * v1029 > v1025)
                      {
                        v1030 = v1029 - 1;
                        LODWORD(v1031) = v1030 & ((v1253 >> 4) ^ (v1253 >> 9));
                        v1032 = (uint64_t *)(v1028 + 16 * v1031);
                        v1033 = *v1032;
                        if ((_QWORD)v1253 == *v1032)
                        {
LABEL_1501:
                          *v1032 = -8192;
                          v1027[304] = vadd_s32(v1027[304], (int32x2_t)0x1FFFFFFFFLL);
                          v1026 = v1253;
                        }
                        else
                        {
                          v1034 = 1;
                          while (v1033 != -4096)
                          {
                            v1035 = v1031 + v1034++;
                            v1031 = v1035 & v1030;
                            v1033 = *(_QWORD *)(v1028 + 16 * v1031);
                            if ((_QWORD)v1253 == v1033)
                            {
                              v1032 = (uint64_t *)(v1028 + 16 * v1031);
                              goto LABEL_1501;
                            }
                          }
                        }
                        *(_BYTE *)(v1026 + 17) &= ~1u;
                      }
                    }
                  }
                }
                goto LABEL_1454;
              }
              v1017 = 0;
              goto LABEL_1480;
            }
            goto LABEL_961;
          }
          if ((v602 & 1) == 0)
          {
            *(_QWORD *)&v1252 = &v1253;
            *((_QWORD *)&v1252 + 1) = 0x800000000;
            v646 = *((_DWORD *)v603 + 5);
            v647 = v646 & 0x7FFFFFF;
            if (&v603[-4 * v647 + 4] == v603)
            {
              v648 = 0;
              v682 = -v647;
            }
            else
            {
              v648 = 0;
              v649 = 32 - 32 * v647;
              do
              {
                v650 = *(uint64_t *)((char *)v603 + v649);
                if (v648 >= HIDWORD(v1252))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1252, (uint64_t)&v1253, v648 + 1, 8);
                  v648 = DWORD2(v1252);
                }
                *(_QWORD *)(v1252 + 8 * v648) = v650;
                v648 = ++DWORD2(v1252);
                v649 += 32;
              }
              while (v649);
              v646 = *((_DWORD *)v603 + 5);
              v682 = -(uint64_t)(v646 & 0x7FFFFFF);
            }
            v718 = v603[4 * v682];
            v1204.__r_.__value_.__r.__words[0] = v718;
            if ((v1221 & 1) != 0)
            {
              v719 = 32;
              v720 = &v1222;
              goto LABEL_1076;
            }
            v719 = v1223;
            if (!v1223)
            {
              v729 = 0;
              goto LABEL_1089;
            }
            v720 = (uint64_t *)v1222;
LABEL_1076:
            v721 = v719 - 1;
            v722 = v721 & ((v718 >> 4) ^ (v718 >> 9));
            v723 = &v720[2 * v722];
            v724 = *v723;
            if (v718 != *v723)
            {
              v725 = 0;
              v726 = 1;
              while (v724 != -4096)
              {
                if (v725)
                  v727 = 0;
                else
                  v727 = v724 == -8192;
                if (v727)
                  v725 = v723;
                v728 = v722 + v726++;
                v722 = v728 & v721;
                v723 = &v720[2 * v722];
                v724 = *v723;
                if (v718 == *v723)
                  goto LABEL_1090;
              }
              if (v725)
                v729 = v725;
              else
                v729 = v723;
LABEL_1089:
              v723 = sub_1C55E07C8((uint64_t)&v1221, (uint64_t)&v1204, &v1204, v729);
              *v723 = v1204.__r_.__value_.__r.__words[0];
              v723[1] = 0;
              v648 = DWORD2(v1252);
              v646 = *((_DWORD *)v603 + 5);
            }
LABEL_1090:
            v730 = (uint64_t *)v723[1];
            TypeAtIndex = (llvm::GetElementPtrInst *)v603[8];
            v732 = v603 >> 4;
            v733 = (llvm::Value *)v1252;
            if ((v646 & 0x10000000) != 0)
            {
              v734 = **(_QWORD **)*v603;
              v735 = *(_QWORD *)(v734 + 152);
              v736 = *(unsigned int *)(v734 + 168);
              if (!(_DWORD)v736)
                goto LABEL_1190;
              LODWORD(v737) = (v736 - 1) & (v732 ^ (v603 >> 9));
              v738 = (uint64_t **)(v735 + 16 * v737);
              v739 = *v738;
              if (*v738 != v603)
              {
                v740 = 1;
                while (v739 != (uint64_t *)-4096)
                {
                  v741 = v737 + v740++;
                  v737 = v741 & (v736 - 1);
                  v739 = *(uint64_t **)(v735 + 16 * v737);
                  if (v739 == v603)
                  {
                    v738 = (uint64_t **)(v735 + 16 * v737);
                    goto LABEL_1191;
                  }
                }
LABEL_1190:
                v738 = (uint64_t **)(v735 + 16 * v736);
              }
LABEL_1191:
              v805 = v738[1];
              v808 = *v805;
              v807 = (char *)(v805 + 2);
              v806 = v808;
            }
            else
            {
              v806 = 0;
              v807 = &byte_1C871356D;
            }
            v809 = v648;
            v1205 = 261;
            v1204.__r_.__value_.__r.__words[0] = (std::string::size_type)v807;
            v1204.__r_.__value_.__l.__size_ = v806;
            v810 = v648 + 1;
            v811 = v648 == -1;
            v812 = operator new(32 * v810 + 80);
            v813 = (std::string::size_type)&v812[4 * v810];
            *(_DWORD *)(v813 + 20) = *(_DWORD *)(v813 + 20) & 0x38000000 | v810 & 0x7FFFFFF;
            if (!v811)
            {
              do
              {
                *v812 = 0;
                v812[1] = 0;
                v812[2] = 0;
                v812[3] = v813;
                v812 += 4;
              }
              while (v812 != (_QWORD *)v813);
            }
            sub_1C4774650(TypeAtIndex, v730, v733, v809);
            *(_QWORD *)v813 = v815;
            *(_QWORD *)(v813 + 8) = 0;
            v816 = *(_DWORD *)(v813 + 20) & 0xC0000000 | v810 & 0x7FFFFFF;
            *(_DWORD *)(v813 + 16) = 62;
            *(_DWORD *)(v813 + 20) = v816;
            *(_OWORD *)(v813 + 24) = 0u;
            v817 = (_QWORD **)(v813 + 24);
            *(_OWORD *)(v813 + 40) = 0u;
            *(_DWORD *)(v813 + 56) = 0;
            v818 = (_QWORD **)v603[5];
            *(_QWORD *)(v813 + 40) = v818;
            *((_WORD *)v818 + 9) &= ~0x8000u;
            if ((*(_BYTE *)(v813 + 23) & 0x10) != 0)
            {
              v926 = v818[7];
              if (v926)
              {
                v927 = (llvm::ValueSymbolTable *)v926[13];
                if (v927)
                  llvm::ValueSymbolTable::reinsertValue(v927, (llvm::Value *)v813);
              }
            }
            v819 = (_QWORD **)v603[3];
            *(_QWORD *)(v813 + 24) = v819;
            *(_QWORD *)(v813 + 32) = v603 + 3;
            v819[1] = v817;
            v603[3] = (uint64_t)v817;
            *(_QWORD *)(v813 + 64) = TypeAtIndex;
            if ((_DWORD)v809)
            {
              v820 = (llvm::Type **)((char *)v733 + 8);
              v821 = 8 * v809 - 8;
              do
              {
                if (!v821)
                  break;
                v822 = *v820++;
                TypeAtIndex = (llvm::GetElementPtrInst *)llvm::GetElementPtrInst::getTypeAtIndex(TypeAtIndex, v822, v814);
                v821 -= 8;
              }
              while (TypeAtIndex);
            }
            *(_QWORD *)(v813 + 72) = TypeAtIndex;
            v823 = *(_DWORD *)(v813 + 20) & 0x7FFFFFF;
            v824 = -v823;
            v825 = (uint64_t **)(v813 - 32 * v823);
            if (*v825)
            {
              v1036 = v813 + 32 * v824;
              v1038 = *(_QWORD **)(v1036 + 16);
              v1037 = (_QWORD *)(v1036 + 16);
              *v1038 = *(v1037 - 1);
              v1039 = *(v1037 - 1);
              if (v1039)
                *(_QWORD *)(v1039 + 16) = *v1037;
            }
            *v825 = v730;
            if (v730)
            {
              v828 = v730[1];
              v827 = (uint64_t ***)(v730 + 1);
              v826 = v828;
              v829 = v813 + 32 * v824;
              *(_QWORD *)(v829 + 8) = v828;
              if (v828)
                *(_QWORD *)(v826 + 16) = v829 + 8;
              *(_QWORD *)(v829 + 16) = v827;
              *v827 = v825;
            }
            sub_1C5382FD4((uint64_t)&v1203, (uint64_t *)v733, (uint64_t *)v733 + v809, v813 - 32 * (*(_DWORD *)(v813 + 20) & 0x7FFFFFF) + 32);
            llvm::Value::setName((uint64_t ***)v813, (uint64_t)&v1204);
            *(_BYTE *)(v813 + 17) = *(_BYTE *)(v813 + 17) & 0xFD | *((_BYTE *)v603 + 17) & 2;
            v1204.__r_.__value_.__r.__words[0] = (std::string::size_type)v603;
            if ((v1221 & 1) != 0)
            {
              v830 = 32;
              v831 = &v1222;
              goto LABEL_1206;
            }
            v830 = v1223;
            if (v1223)
            {
              v831 = (uint64_t *)v1222;
LABEL_1206:
              v832 = v830 - 1;
              v833 = v832 & (v732 ^ (v603 >> 9));
              v834 = &v831[2 * v833];
              v835 = (_QWORD ***)*v834;
              if (v603 == (uint64_t *)*v834)
              {
                v404 = v1159;
              }
              else
              {
                v836 = 0;
                v837 = 1;
                v404 = v1159;
                while (v835 != (_QWORD ***)-4096)
                {
                  if (v836)
                    v838 = 0;
                  else
                    v838 = v835 == (_QWORD ***)-8192;
                  if (v838)
                    v836 = v834;
                  v839 = v833 + v837++;
                  v833 = v839 & v832;
                  v834 = &v831[2 * v833];
                  v835 = (_QWORD ***)*v834;
                  if (v603 == (uint64_t *)*v834)
                    goto LABEL_1221;
                }
                if (v836)
                  v840 = v836;
                else
                  v840 = v834;
LABEL_1219:
                v834 = sub_1C55E07C8((uint64_t)&v1221, (uint64_t)&v1204, &v1204, v840);
                *v834 = v1204.__r_.__value_.__r.__words[0];
                v834[1] = 0;
              }
LABEL_1221:
              v834[1] = v813;
              *(_OWORD *)&v1204.__r_.__value_.__l.__data_ = 4uLL;
              v1204.__r_.__value_.__r.__words[2] = v813;
              if (v813 != -8192 && v813 != -4096 && v813)
                llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v1204);
              v841 = (_QWORD *)sub_1C4EE497C((unsigned int *)&v1234, (unint64_t)&v1204, 1);
              v842 = (int)v1235;
              v843 = (unint64_t *)((char *)v1234 + 24 * v1235);
              *v843 = 4;
              v843[1] = 0;
              v844 = (unint64_t)(v843 + 1);
              v845 = v841[2];
              v843[2] = v845;
              if (v845 != -8192 && v845 != -4096)
              {
                if (v845)
                {
                  v846 = *v841 & 0xFFFFFFFFFFFFFFF8;
                  v843[1] = *(_QWORD *)v846;
                  *(_QWORD *)v846 = v843;
                  *v843 = v846 | 4;
                  v847 = (uint64_t *)v843[1];
                  if (v847)
                    *v847 = *v847 & 7 | v844;
                }
              }
              LODWORD(v1235) = v842 + 1;
              if (v1204.__r_.__value_.__r.__words[2] != -8192
                && v1204.__r_.__value_.__r.__words[2] != -4096
                && v1204.__r_.__value_.__r.__words[2])
              {
                v848 = v1204.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)(v1204.__r_.__value_.__r.__words[0] & 0xFFFFFFFFFFFFFFF8) = v1204.__r_.__value_.__l.__size_;
                if (v1204.__r_.__value_.__l.__size_)
                {
                  *(_QWORD *)v1204.__r_.__value_.__l.__size_ = *(_QWORD *)v1204.__r_.__value_.__l.__size_ & 7 | v848;
                }
                else
                {
                  v849 = v1204.__r_.__value_.__r.__words[2];
                  v850 = ***(int32x2_t ****)v1204.__r_.__value_.__r.__words[2];
                  v851 = (std::string::size_type)v850[303];
                  if (v851 <= v848)
                  {
                    v852 = v850[305].u32[0];
                    if (v851 + 16 * v852 > v848)
                    {
                      v853 = v852 - 1;
                      LODWORD(v854) = v853 & ((LODWORD(v1204.__r_.__value_.__r.__words[2]) >> 4) ^ (LODWORD(v1204.__r_.__value_.__r.__words[2]) >> 9));
                      v855 = (uint64_t *)(v851 + 16 * v854);
                      v856 = *v855;
                      if (v1204.__r_.__value_.__r.__words[2] == *v855)
                      {
LABEL_1241:
                        *v855 = -8192;
                        v850[304] = vadd_s32(v850[304], (int32x2_t)0x1FFFFFFFFLL);
                        v849 = v1204.__r_.__value_.__r.__words[2];
                      }
                      else
                      {
                        v857 = 1;
                        while (v856 != -4096)
                        {
                          v858 = v854 + v857++;
                          v854 = v858 & v853;
                          v856 = *(_QWORD *)(v851 + 16 * v854);
                          if (v1204.__r_.__value_.__r.__words[2] == v856)
                          {
                            v855 = (uint64_t *)(v851 + 16 * v854);
                            goto LABEL_1241;
                          }
                        }
                      }
                      *(_BYTE *)(v849 + 17) &= ~1u;
                    }
                  }
                }
              }
              if ((__int128 *)v1252 != &v1253)
                free((void *)v1252);
              goto LABEL_1313;
            }
            v840 = 0;
            v404 = v1159;
            goto LABEL_1219;
          }
          v611 = *((_DWORD *)v603 + 5) & 0x7FFFFFF;
          v612 = (_QWORD **)v603[-4 * v611];
          *(_QWORD *)&v1252 = v612;
          if ((v1221 & 1) != 0)
          {
            v613 = 32;
            v614 = &v1222;
          }
          else
          {
            v613 = v1223;
            if (!v1223)
            {
              v696 = 0;
LABEL_1042:
              v618 = sub_1C55E07C8((uint64_t)&v1221, (uint64_t)&v1252, &v1252, v696);
              *v618 = v1252;
              v618[1] = 0;
              v615 = -(uint64_t)(*((_DWORD *)v603 + 5) & 0x7FFFFFF);
              goto LABEL_1043;
            }
            v614 = (uint64_t *)v1222;
          }
          v615 = -v611;
          v616 = v613 - 1;
          v617 = v616 & ((v612 >> 4) ^ (v612 >> 9));
          v618 = &v614[2 * v617];
          v619 = *v618;
          if (v612 != (_QWORD **)*v618)
          {
            v620 = 0;
            v621 = 1;
            while (v619 != -4096)
            {
              if (v620)
                v622 = 0;
              else
                v622 = v619 == -8192;
              if (v622)
                v620 = v618;
              v623 = v617 + v621++;
              v617 = v623 & v616;
              v618 = &v614[2 * v617];
              v619 = *v618;
              if (v612 == (_QWORD **)*v618)
                goto LABEL_1043;
            }
            if (v620)
              v696 = v620;
            else
              v696 = v618;
            goto LABEL_1042;
          }
LABEL_1043:
          v697 = (uint64_t *)v618[1];
          v698 = (llvm::PointerType *)*v603;
          v699 = (uint64_t **)&v603[4 * v615];
          if (*v699)
          {
            *v699[2] = (uint64_t)v699[1];
            v700 = v699[1];
            if (v700)
              v700[2] = (uint64_t)v699[2];
          }
          *v699 = v697;
          if (v697)
          {
            v701 = (uint64_t ***)(v697 + 1);
            v702 = v697[1];
            v703 = &v603[4 * v615];
            v703[1] = v702;
            if (v702)
              *(_QWORD *)(v702 + 16) = v703 + 1;
            v703[2] = (uint64_t)v701;
            *v701 = v699;
          }
          if (*((_QWORD *)v698 + 3))
            v704 = llvm::PointerType::get(**((llvm::PointerType ***)v698 + 2), (llvm::Type *)0x40);
          else
            v704 = *v697;
          *v603 = v704;
          *(_QWORD *)&v1252 = v603;
          if ((v1221 & 1) != 0)
          {
            v742 = 32;
            v743 = &v1222;
          }
          else
          {
            v742 = v1223;
            if (!v1223)
            {
              v752 = 0;
LABEL_1113:
              v746 = sub_1C55E07C8((uint64_t)&v1221, (uint64_t)&v1252, &v1252, v752);
              *v746 = v1252;
              v746[1] = 0;
              goto LABEL_1114;
            }
            v743 = (uint64_t *)v1222;
          }
          v744 = v742 - 1;
          v745 = v744 & ((v603 >> 4) ^ (v603 >> 9));
          v746 = &v743[2 * v745];
          v747 = (_QWORD ***)*v746;
          if (v603 != (uint64_t *)*v746)
          {
            v748 = 0;
            v749 = 1;
            while (v747 != (_QWORD ***)-4096)
            {
              if (v748)
                v750 = 0;
              else
                v750 = v747 == (_QWORD ***)-8192;
              if (v750)
                v748 = v746;
              v751 = v745 + v749++;
              v745 = v751 & v744;
              v746 = &v743[2 * v745];
              v747 = (_QWORD ***)*v746;
              if (v603 == (uint64_t *)*v746)
                goto LABEL_1114;
            }
            if (v748)
              v752 = v748;
            else
              v752 = v746;
            goto LABEL_1113;
          }
LABEL_1114:
          v746[1] = (uint64_t)v603;
LABEL_1313:
          v1252 = 4uLL;
          *(_QWORD *)&v1253 = v603;
          if (v603 != (uint64_t *)-8192 && v603 != (uint64_t *)-4096 && v603)
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v1252);
          v894 = (_QWORD *)sub_1C4EE497C((unsigned int *)&v1234, (unint64_t)&v1252, 1);
          v895 = (int)v1235;
          v896 = (unint64_t *)((char *)v1234 + 24 * v1235);
          *v896 = 4;
          v896[1] = 0;
          v897 = (unint64_t)(v896 + 1);
          v898 = v894[2];
          v896[2] = v898;
          if (v898 != -8192 && v898 != -4096)
          {
            if (v898)
            {
              v899 = *v894 & 0xFFFFFFFFFFFFFFF8;
              v896[1] = *(_QWORD *)v899;
              *(_QWORD *)v899 = v896;
              *v896 = v899 | 4;
              v900 = (uint64_t *)v896[1];
              if (v900)
                *v900 = *v900 & 7 | v897;
            }
          }
          LODWORD(v1235) = v895 + 1;
          if ((_QWORD)v1253 != -8192 && (_QWORD)v1253 != -4096 && (_QWORD)v1253)
          {
            v901 = v1252 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)(v1252 & 0xFFFFFFFFFFFFFFF8) = *((_QWORD *)&v1252 + 1);
            if (*((_QWORD *)&v1252 + 1))
            {
              **((_QWORD **)&v1252 + 1) = **((_QWORD **)&v1252 + 1) & 7 | v901;
            }
            else
            {
              v902 = v1253;
              v903 = ***(int32x2_t ****)v1253;
              v904 = (unint64_t)v903[303];
              if (v904 <= v901)
              {
                v905 = v903[305].u32[0];
                if (v904 + 16 * v905 > v901)
                {
                  v906 = v905 - 1;
                  LODWORD(v907) = v906 & ((v1253 >> 4) ^ (v1253 >> 9));
                  v908 = (uint64_t *)(v904 + 16 * v907);
                  v909 = *v908;
                  if ((_QWORD)v1253 == *v908)
                  {
LABEL_1333:
                    *v908 = -8192;
                    v903[304] = vadd_s32(v903[304], (int32x2_t)0x1FFFFFFFFLL);
                    v902 = v1253;
                  }
                  else
                  {
                    v910 = 1;
                    while (v909 != -4096)
                    {
                      v911 = v907 + v910++;
                      v907 = v911 & v906;
                      v909 = *(_QWORD *)(v904 + 16 * v907);
                      if ((_QWORD)v1253 == v909)
                      {
                        v908 = (uint64_t *)(v904 + 16 * v907);
                        goto LABEL_1333;
                      }
                    }
                  }
                  *(_BYTE *)(v902 + 17) &= ~1u;
                }
              }
            }
          }
          v912 = (_QWORD **)v603[1];
          if (!v912)
            goto LABEL_1460;
          v599 = v1227;
          v405 = (char *)v1185;
          do
          {
            v913 = v912[3];
            if (v599 >= HIDWORD(v1227))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1226, (uint64_t)&v1228, v599 + 1, 8);
              v599 = v1227;
            }
            *((_QWORD *)v1226 + v599) = v913;
            v599 = (_DWORD)v1227 + 1;
            LODWORD(v1227) = (_DWORD)v1227 + 1;
            v912 = (_QWORD **)v912[1];
          }
          while (v912);
        }
        while (v599);
      }
      v1040 = v1235;
      if (v1183 | v1179)
      {
        if ((_DWORD)v1235)
        {
          while (1)
          {
            v1041 = (char *)v1234;
            v1042 = (char *)v1234 + 24 * v1040;
            v1252 = 4uLL;
            v1043 = *((_QWORD *)v1042 - 1);
            *(_QWORD *)&v1253 = v1043;
            if (v1043 && v1043 != -8192 && v1043 != -4096)
            {
              v1044 = *((_QWORD *)v1042 - 3) & 0xFFFFFFFFFFFFFFF8;
              *((_QWORD *)&v1252 + 1) = *(_QWORD *)v1044;
              *(_QWORD *)v1044 = &v1252;
              *(_QWORD *)&v1252 = v1044 | 4;
              if (*((_QWORD *)&v1252 + 1))
                **((_QWORD **)&v1252 + 1) = **((_QWORD **)&v1252 + 1) & 7 | ((unint64_t)&v1252 + 8);
              v1040 = v1235;
              v1041 = (char *)v1234;
            }
            LODWORD(v1235) = v1040 - 1;
            v1045 = &v1041[24 * v1040 - 24];
            v1046 = *((_QWORD *)v1045 + 2);
            if (v1046 && v1046 != -8192 && v1046 != -4096)
            {
              v1047 = *(_QWORD *)v1045 & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v1047 = *((_QWORD *)v1045 + 1);
              v1048 = (unint64_t *)*((_QWORD *)v1045 + 1);
              if (v1048)
              {
                *v1048 = *v1048 & 7 | v1047;
              }
              else
              {
                v1049 = *((_QWORD *)v1045 + 2);
                v1050 = ***(int32x2_t ****)v1049;
                v1051 = (unint64_t)v1050[303];
                if (v1051 <= v1047)
                {
                  v1052 = v1050[305].u32[0];
                  if (v1051 + 16 * v1052 > v1047)
                  {
                    v1053 = v1052 - 1;
                    LODWORD(v1054) = v1053 & ((v1049 >> 4) ^ (v1049 >> 9));
                    v1055 = (uint64_t *)(v1051 + 16 * v1054);
                    v1056 = *v1055;
                    if (v1049 == *v1055)
                    {
LABEL_1555:
                      *v1055 = -8192;
                      v1050[304] = vadd_s32(v1050[304], (int32x2_t)0x1FFFFFFFFLL);
                      v1049 = *((_QWORD *)v1045 + 2);
                    }
                    else
                    {
                      v1057 = 1;
                      while (v1056 != -4096)
                      {
                        v1058 = v1054 + v1057++;
                        v1054 = v1058 & v1053;
                        v1056 = *(_QWORD *)(v1051 + 16 * v1054);
                        if (v1049 == v1056)
                        {
                          v1055 = (uint64_t *)(v1051 + 16 * v1054);
                          goto LABEL_1555;
                        }
                      }
                    }
                    *(_BYTE *)(v1049 + 17) &= ~1u;
                  }
                }
              }
            }
            if ((_QWORD)v1253)
            {
              if (*(unsigned __int8 *)(v1253 + 16) <= 0x1Bu)
                v1059 = 0;
              else
                v1059 = v1253;
            }
            else
            {
              v1059 = 0;
            }
            if ((_QWORD)v1253 != -8192 && (_QWORD)v1253 != -4096 && (_QWORD)v1253 != 0)
            {
              v1062 = v1252 & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)(v1252 & 0xFFFFFFFFFFFFFFF8) = *((_QWORD *)&v1252 + 1);
              if (*((_QWORD *)&v1252 + 1))
              {
                **((_QWORD **)&v1252 + 1) = **((_QWORD **)&v1252 + 1) & 7 | v1062;
              }
              else
              {
                v1063 = v1253;
                v1064 = ***(int32x2_t ****)v1253;
                v1065 = (unint64_t)v1064[303];
                if (v1065 <= v1062)
                {
                  v1066 = v1064[305].u32[0];
                  if (v1065 + 16 * v1066 > v1062)
                  {
                    v1067 = v1066 - 1;
                    LODWORD(v1068) = v1067 & ((v1253 >> 4) ^ (v1253 >> 9));
                    v1069 = (uint64_t *)(v1065 + 16 * v1068);
                    v1070 = *v1069;
                    if ((_QWORD)v1253 == *v1069)
                    {
LABEL_1581:
                      *v1069 = -8192;
                      v1064[304] = vadd_s32(v1064[304], (int32x2_t)0x1FFFFFFFFLL);
                      v1063 = v1253;
                    }
                    else
                    {
                      v1071 = 1;
                      while (v1070 != -4096)
                      {
                        v1072 = v1068 + v1071++;
                        v1068 = v1072 & v1067;
                        v1070 = *(_QWORD *)(v1065 + 16 * v1068);
                        if ((_QWORD)v1253 == v1070)
                        {
                          v1069 = (uint64_t *)(v1065 + 16 * v1068);
                          goto LABEL_1581;
                        }
                      }
                    }
                    *(_BYTE *)(v1063 + 17) &= ~1u;
                  }
                }
              }
            }
            if (!v1059)
              goto LABEL_1585;
            v1251 = 0;
            llvm::RecursivelyDeleteTriviallyDeadInstructions(v1059, 0, 0, v1250);
            if (v1251 == v1250)
              break;
            if (v1251)
            {
              v1061 = (void (**)(void))(*v1251 + 40);
LABEL_1584:
              (*v1061)();
            }
LABEL_1585:
            v1040 = v1235;
            if (!(_DWORD)v1235)
              goto LABEL_1624;
          }
          v1061 = (void (**)(void))(v1250[0] + 32);
          goto LABEL_1584;
        }
      }
      else
      {
        for (; (_DWORD)v1235; v1040 = v1235)
        {
          v1073 = (char *)v1234;
          v1074 = (char *)v1234 + 24 * v1040;
          v1252 = 4uLL;
          v1075 = *((_QWORD *)v1074 - 1);
          *(_QWORD *)&v1253 = v1075;
          if (v1075 && v1075 != -8192 && v1075 != -4096)
          {
            v1076 = *((_QWORD *)v1074 - 3) & 0xFFFFFFFFFFFFFFF8;
            *((_QWORD *)&v1252 + 1) = *(_QWORD *)v1076;
            *(_QWORD *)v1076 = &v1252;
            *(_QWORD *)&v1252 = v1076 | 4;
            if (*((_QWORD *)&v1252 + 1))
              **((_QWORD **)&v1252 + 1) = **((_QWORD **)&v1252 + 1) & 7 | ((unint64_t)&v1252 + 8);
            v1040 = v1235;
            v1073 = (char *)v1234;
          }
          LODWORD(v1235) = v1040 - 1;
          v1077 = &v1073[24 * v1040 - 24];
          v1078 = *((_QWORD *)v1077 + 2);
          if (v1078 && v1078 != -8192 && v1078 != -4096)
          {
            v1079 = *(_QWORD *)v1077 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v1079 = *((_QWORD *)v1077 + 1);
            v1080 = (unint64_t *)*((_QWORD *)v1077 + 1);
            if (v1080)
            {
              *v1080 = *v1080 & 7 | v1079;
            }
            else
            {
              v1081 = *((_QWORD *)v1077 + 2);
              v1082 = ***(int32x2_t ****)v1081;
              v1083 = (unint64_t)v1082[303];
              if (v1083 <= v1079)
              {
                v1084 = v1082[305].u32[0];
                if (v1083 + 16 * v1084 > v1079)
                {
                  v1085 = v1084 - 1;
                  LODWORD(v1086) = v1085 & ((v1081 >> 4) ^ (v1081 >> 9));
                  v1087 = (uint64_t *)(v1083 + 16 * v1086);
                  v1088 = *v1087;
                  if (v1081 == *v1087)
                  {
LABEL_1606:
                    *v1087 = -8192;
                    v1082[304] = vadd_s32(v1082[304], (int32x2_t)0x1FFFFFFFFLL);
                    v1081 = *((_QWORD *)v1077 + 2);
                  }
                  else
                  {
                    v1089 = 1;
                    while (v1088 != -4096)
                    {
                      v1090 = v1086 + v1089++;
                      v1086 = v1090 & v1085;
                      v1088 = *(_QWORD *)(v1083 + 16 * v1086);
                      if (v1081 == v1088)
                      {
                        v1087 = (uint64_t *)(v1083 + 16 * v1086);
                        goto LABEL_1606;
                      }
                    }
                  }
                  *(_BYTE *)(v1081 + 17) &= ~1u;
                }
              }
            }
          }
          v1091 = (llvm::Value *)v1253;
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v1253 + 40) + 40, (uint64_t ***)v1253);
          v1092 = *((_QWORD *)v1091 + 3);
          v1093 = (_QWORD *)*((_QWORD *)v1091 + 4);
          *v1093 = v1092;
          *(_QWORD *)(v1092 + 8) = v1093;
          *((_QWORD *)v1091 + 3) = 0;
          *((_QWORD *)v1091 + 4) = 0;
          llvm::Value::deleteValue(v1091);
          if ((_QWORD)v1253 != -8192 && (_QWORD)v1253 != -4096 && (_QWORD)v1253)
          {
            v1094 = v1252 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)(v1252 & 0xFFFFFFFFFFFFFFF8) = *((_QWORD *)&v1252 + 1);
            if (*((_QWORD *)&v1252 + 1))
            {
              **((_QWORD **)&v1252 + 1) = **((_QWORD **)&v1252 + 1) & 7 | v1094;
            }
            else
            {
              v1095 = v1253;
              v1096 = ***(int32x2_t ****)v1253;
              v1097 = (unint64_t)v1096[303];
              if (v1097 <= v1094)
              {
                v1098 = v1096[305].u32[0];
                if (v1097 + 16 * v1098 > v1094)
                {
                  v1099 = v1098 - 1;
                  LODWORD(v1100) = v1099 & ((v1253 >> 4) ^ (v1253 >> 9));
                  v1101 = (uint64_t *)(v1097 + 16 * v1100);
                  v1102 = *v1101;
                  if ((_QWORD)v1253 == *v1101)
                  {
LABEL_1620:
                    *v1101 = -8192;
                    v1096[304] = vadd_s32(v1096[304], (int32x2_t)0x1FFFFFFFFLL);
                    v1095 = v1253;
                  }
                  else
                  {
                    v1103 = 1;
                    while (v1102 != -4096)
                    {
                      v1104 = v1100 + v1103++;
                      v1100 = v1104 & v1099;
                      v1102 = *(_QWORD *)(v1097 + 16 * v1100);
                      if ((_QWORD)v1253 == v1102)
                      {
                        v1101 = (uint64_t *)(v1097 + 16 * v1100);
                        goto LABEL_1620;
                      }
                    }
                  }
                  *(_BYTE *)(v1095 + 17) &= ~1u;
                }
              }
            }
          }
        }
      }
LABEL_1624:
      if (*((_QWORD *)&v1255 + 1) == (_QWORD)v1255)
      {
        v1105 = (uint64_t *)v1234;
        v4 = v1171;
      }
      else
      {
        free(*((void **)&v1255 + 1));
        v1105 = (uint64_t *)v1234;
        v4 = v1171;
        if ((_DWORD)v1235)
        {
          v1106 = (uint64_t *)((char *)v1234 + 24 * v1235);
          do
          {
            v1107 = *(v1106 - 1);
            if (v1107 != -8192 && v1107 != -4096 && v1107 != 0)
            {
              v1109 = *(v1106 - 3) & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v1109 = *(v1106 - 2);
              v1110 = (unint64_t *)*(v1106 - 2);
              if (v1110)
              {
                *v1110 = *v1110 & 7 | v1109;
              }
              else
              {
                v1111 = *(v1106 - 1);
                v1112 = ***(int32x2_t ****)v1111;
                v1113 = (unint64_t)v1112[303];
                if (v1113 <= v1109)
                {
                  v1114 = v1112[305].u32[0];
                  if (v1113 + 16 * v1114 > v1109)
                  {
                    v1115 = v1114 - 1;
                    LODWORD(v1116) = v1115 & ((v1111 >> 4) ^ (v1111 >> 9));
                    v1117 = (uint64_t *)(v1113 + 16 * v1116);
                    v1118 = *v1117;
                    if (v1111 == *v1117)
                    {
LABEL_1643:
                      *v1117 = -8192;
                      v1112[304] = vadd_s32(v1112[304], (int32x2_t)0x1FFFFFFFFLL);
                      v1111 = *(v1106 - 1);
                    }
                    else
                    {
                      v1119 = 1;
                      while (v1118 != -4096)
                      {
                        v1120 = v1116 + v1119++;
                        v1116 = v1120 & v1115;
                        v1118 = *(_QWORD *)(v1113 + 16 * v1116);
                        if (v1111 == v1118)
                        {
                          v1117 = (uint64_t *)(v1113 + 16 * v1116);
                          goto LABEL_1643;
                        }
                      }
                    }
                    *(_BYTE *)(v1111 + 17) &= ~1u;
                  }
                }
              }
            }
            v1106 -= 3;
          }
          while (v1106 != v1105);
          v1105 = (uint64_t *)v1234;
          v4 = v1171;
          v404 = v1159;
          v405 = (char *)v1185;
        }
      }
      if (v1105 != &v1236)
        free(v1105);
      if ((v1221 & 1) == 0)
        MEMORY[0x1CAA32FB4](v1222, 8);
      if (v1226 != &v1228)
        free(v1226);
      if (((uint64_t)v1231[0] & 1) == 0)
        MEMORY[0x1CAA32FB4](v1231[1], 8);
      v1139 = 1;
LABEL_1656:
      sub_1C495C918((uint64_t)v1196);
      MEMORY[0x1CAA32FB4](v1196[0], 8);
      v405 += 1128;
      if (v405 == v1141)
      {
LABEL_1660:
        MEMORY[0x1CAA32FB4](v1198[0], 4);
        v1121 = v1206;
        if ((_DWORD)v1207)
        {
          v1122 = 16 * v1207;
          v1123 = (char *)v1206 - 16;
          v356 = v1139;
          do
          {
            sub_1C4914448((void ***)&v1123[v1122]);
            v1122 -= 16;
          }
          while (v1122);
          v1121 = v1206;
        }
        else
        {
          v356 = v1139;
        }
        if (v1121 != v1208)
          free(v1121);
        sub_1C495C918((uint64_t)v1200);
        MEMORY[0x1CAA32FB4](v1200[0], 8);
        goto LABEL_1669;
      }
    }
    v466 = 1;
    while (v465 != (_QWORD *)-4096)
    {
      v467 = v464 + v466++;
      v464 = v467 & (v1197 - 1);
      v465 = *(_QWORD **)(v1196[0] + ((unint64_t)v464 << 6));
      if (v1161 == v465)
      {
        v463 = v1196[0] + (v464 << 6);
        goto LABEL_756;
      }
    }
    v463 = v1196[0] + ((unint64_t)v1197 << 6);
LABEL_756:
    v1182 = v463;
    goto LABEL_757;
  }
  v356 = v1139;
LABEL_1669:
  if (v1213 != v1212)
    free(v1213);
  sub_1C55DD12C((uint64_t)v1217, (uint64_t)v1217 + 1128 * v1218);
  if (v1217 != v1219)
    free(v1217);
  return v356 != 0;
}

uint64_t sub_1C55DAB80(uint64_t a1, llvm::Type *a2, llvm::UndefValue **a3, unsigned int a4, uint64_t a5)
{
  uint64_t *Cast;
  unsigned int v10;
  BOOL v11;
  BOOL v12;
  llvm::UndefValue *v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  uint64_t v18;
  unsigned int v19;
  unint64_t v20;
  llvm::Value **NullValue;
  uint64_t v22;
  BOOL v23;
  int v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  _BOOL4 v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  int v39;
  int v40;
  int v41;
  uint64_t *v43;
  llvm::ConstantAggregateZero *v44;
  uint64_t *v45;
  void *v46;
  uint64_t v47;
  _QWORD v48[4];

  Cast = (uint64_t *)a2;
  v48[3] = *MEMORY[0x1E0C80C00];
  if (a1)
  {
    v10 = *(_DWORD *)(a1 + 20) & 0x7FFFFFF;
    v11 = v10 > a4 && a4 >= 3;
    v12 = !v11 || v10 - 1 > 4;
    if (v12)
      goto LABEL_64;
  }
  v13 = *a3;
  v14 = *(_QWORD *)*a3;
  if (*(_BYTE *)(v14 + 8) != 16)
    goto LABEL_64;
  v15 = *((unsigned __int8 *)v13 + 16);
  v12 = v15 > 0xD;
  v16 = (1 << v15) & 0x3A00;
  if (v12 || v16 == 0)
    goto LABEL_64;
  v46 = v48;
  v47 = 0x300000000;
  if (*(_DWORD *)(v14 + 12))
  {
    v18 = 0;
    v19 = 0;
    v20 = 0;
    do
    {
      if (*((unsigned __int8 *)v13 + 16) - 11 > 2)
      {
        NullValue = *(llvm::Value ***)((char *)v13 + v18 + -32 * (*((_DWORD *)v13 + 5) & 0x7FFFFFF));
      }
      else
      {
        NullValue = llvm::Constant::getNullValue(*(llvm::Constant **)(*(_QWORD *)(v14 + 16) + 8 * v20), a2);
        v19 = v47;
      }
      if (v19 >= HIDWORD(v47))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v46, (uint64_t)v48, v19 + 1, 8);
        v19 = v47;
      }
      *((_QWORD *)v46 + v19) = NullValue;
      v19 = v47 + 1;
      LODWORD(v47) = v47 + 1;
      ++v20;
      v13 = *a3;
      v14 = *(_QWORD *)*a3;
      v18 += 32;
    }
    while (v20 < *(unsigned int *)(v14 + 12));
  }
  if (a1)
  {
    v22 = *(_QWORD *)(a1 - 32 * (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) + 32 * a4);
    if (v22)
      v23 = *(_BYTE *)(v22 + 16) == 16;
    else
      v23 = 0;
    if (!v23)
    {
      v24 = 1;
      goto LABEL_61;
    }
    v26 = (_QWORD *)(v22 + 24);
    if (*(_DWORD *)(v22 + 32) >= 0x41u)
      v26 = (_QWORD *)*v26;
    v25 = (_QWORD *)*v26;
  }
  else
  {
    v25 = 0;
  }
  v27 = (uint64_t *)*((_QWORD *)v46 + (_QWORD)v25);
  if (*(_BYTE *)(v14 + 8) != 16)
    v14 = 0;
  v44 = (llvm::ConstantAggregateZero *)v14;
  v45 = (uint64_t *)*((_QWORD *)v46 + (_QWORD)v25);
  v28 = *Cast;
  v29 = *v27;
  if (*Cast != *v27)
  {
    sub_1C4768AD0(a5, *Cast);
    v43 = Cast;
    v30 = v25;
    v32 = v31 + 7;
    v34 = v33 != 1;
    sub_1C4768AD0(a5, v29);
    v37 = (v36 + 7) ^ v32;
    v25 = v30;
    Cast = v43;
    if (v37 > 7 || v34 == (v35 == 1))
    {
      LOBYTE(a5) = sub_1C55DAB80(a1, v43, &v45, a4 + 1, a5);
      Cast = v45;
LABEL_59:
      *((_QWORD *)v46 + (_QWORD)v25) = Cast;
      *a3 = llvm::ConstantStruct::get(v44, (llvm::Type *)v46, v47);
      goto LABEL_60;
    }
  }
  if (a1 && (*(_DWORD *)(a1 + 20) & 0x7FFFFFF) - 1 != a4)
    goto LABEL_49;
  if (v28 == v29)
  {
LABEL_58:
    LOBYTE(a5) = 1;
    goto LABEL_59;
  }
  if ((*(_DWORD *)(v28 + 8) & 0xFE) == 0x12 || (*(_DWORD *)(v29 + 8) & 0xFE) == 0x12)
    goto LABEL_49;
  v39 = *(_DWORD *)(v28 + 8);
  v40 = *(_DWORD *)(v29 + 8);
  if (v39 != 15 || v40 != 15)
  {
    if (v39 == 15)
    {
      if (v40 != 13)
        goto LABEL_56;
      v41 = 47;
    }
    else
    {
      if (v39 != 13 || v40 != 15)
        goto LABEL_56;
      v41 = 48;
    }
LABEL_57:
    Cast = (uint64_t *)llvm::ConstantExpr::getCast(v41);
    goto LABEL_58;
  }
  if ((*(_DWORD *)(v29 + 8) ^ *(_DWORD *)(v28 + 8)) < 0x100)
  {
LABEL_56:
    v41 = 49;
    goto LABEL_57;
  }
LABEL_49:
  LOBYTE(a5) = 0;
LABEL_60:
  v24 = 0;
LABEL_61:
  if (v46 != v48)
    free(v46);
  if (v24)
LABEL_64:
    LOBYTE(a5) = 0;
  return a5 & 1;
}

uint64_t sub_1C55DAEFC(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;

  v7 = a2;
  v8 = 0;
  v3 = sub_1C55DAF80(a1, &v7, &v8);
  v4 = a1 + 8;
  if (v3)
    return v8;
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v6 = 4;
  }
  else
  {
    v4 = *(_QWORD *)(a1 + 8);
    v6 = *(_DWORD *)(a1 + 16);
  }
  return v4 + 56 * v6;
}

uint64_t sub_1C55DAF80(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_5;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  v7 = (_QWORD *)(v3 + 56 * v6);
  v8 = *v7;
  if (*a2 == *v7)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 56 * (v13 & v5));
      v8 = *v7;
      if (*a2 == *v7)
        goto LABEL_5;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_5:
  *a3 = v7;
  return result;
}

uint64_t sub_1C55DB034(uint64_t a1)
{
  sub_1C55DB070(a1);
  if ((*(_BYTE *)a1 & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 8), 8);
  return a1;
}

void sub_1C55DB070(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;

  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v1 = a1 + 8;
    v2 = 4;
  }
  else
  {
    v2 = *(unsigned int *)(a1 + 16);
    if (!(_DWORD)v2)
      return;
    v1 = *(_QWORD *)(a1 + 8);
  }
  v3 = (_QWORD *)(v1 + 48);
  v4 = 56 * v2;
  do
  {
    v5 = *(v3 - 6);
    if (v5 != -4096 && v5 != -8192)
    {
      v6 = (_QWORD *)*(v3 - 2);
      if (v3 != v6)
        free(v6);
      if ((*(_BYTE *)(v3 - 5) & 1) == 0)
        MEMORY[0x1CAA32FB4](*(v3 - 4), 8);
    }
    v3 += 7;
    v4 -= 56;
  }
  while (v4);
}

void sub_1C55DB104()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C55DB118(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x30uLL);
  *(_QWORD *)v2 = &off_1E8170EF0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  *((_QWORD *)v2 + 5) = *(_QWORD *)(a1 + 40);
  return result;
}

__n128 sub_1C55DB160(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;

  *(_QWORD *)a2 = &off_1E8170EF0;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  *(_QWORD *)(a2 + 40) = *(_QWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1C55DB190(_QWORD *a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t ***v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  _QWORD *v14;
  _QWORD ***v15;
  uint64_t *v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  uint64_t ****v25;
  uint64_t ***v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t **v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  _QWORD *v35;
  int v36;
  BOOL v37;
  unsigned int v38;
  uint64_t ****v39;
  int v40;
  BOOL v41;
  unsigned int v42;
  unint64_t v43;
  int v44;
  _BYTE *v45;
  _BYTE *v46;
  uint64_t *v47;
  uint64_t v48;
  uint64_t v49;
  unint64_t *v50;
  _QWORD *v51;
  void *v52;
  uint64_t ****v53;
  uint64_t ***v54;
  _BOOL4 v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  unint64_t *v59;
  unint64_t v60;
  unsigned int v61;
  unint64_t v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  unsigned int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t k;
  char *v73;
  uint64_t *v74;
  char *v75;
  uint64_t *v76;
  uint64_t m;
  char v78;
  _QWORD *v79;
  unsigned int v80;
  uint64_t v81;
  unsigned int v82;
  uint64_t v85;
  _QWORD *v86;
  _QWORD *v87;
  uint64_t i;
  uint64_t j;
  uint64_t v91;
  int v92;
  int v93;
  uint64_t v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  const char *v100;
  uint64_t v101;
  uint64_t v102;
  BOOL v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  BOOL v107;
  uint64_t v108;
  int v109;
  uint64_t v110;
  _QWORD *v111;
  _QWORD *v112;
  _QWORD *v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t *v120;
  uint64_t *v121;
  void *v122;
  void **v123;
  _DWORD *v124;
  unint64_t v125;
  unsigned int v127;
  char *v128;
  char *v129;
  void *v130;
  const void *v131;
  const void *v132;
  int v133;
  unsigned int v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  _BOOL4 v139;
  uint64_t v140;
  uint64_t v141;
  unsigned int v142;
  unint64_t v143;
  uint64_t v144;
  unint64_t v145;
  uint64_t *v146;
  void *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  unint64_t v151;
  char *v152;
  uint64_t v153;
  unsigned int v154;
  int v155;
  char *v156;
  void **v157;
  uint64_t *v158;
  void **v159;
  int v160;
  uint64_t v161;
  unint64_t v162;
  uint64_t v163;
  void **v164;
  int v165;
  unsigned int v166;
  int v167;
  llvm::DataLayout *v168;
  uint64_t v169;
  char *v170;
  char *v171;
  uint64_t v172;
  int v173;
  _BYTE v174[64];
  _BYTE *v175;
  _BYTE *v176;
  uint64_t v177;
  int v178;
  _BYTE v179[32];
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  unsigned int v184;
  uint64_t v185;
  void *v186;
  uint64_t v187;
  _BYTE v188[1024];
  _BYTE *v189;
  void *v190;
  uint64_t v191;
  int v192;
  _BYTE v193[32];
  uint64_t **v194;
  int v195;
  __int16 v196;
  char v197;
  void *v198;
  uint64_t v199;
  _QWORD v200[64];
  _BYTE *v201;
  uint64_t v202;
  _BYTE v203[32];
  _QWORD *v204;
  uint64_t v205;
  _QWORD v206[6];

  v206[4] = *MEMORY[0x1E0C80C00];
  v2 = *a2;
  v3 = a1[5];
  v186 = v188;
  v187 = 0x2000000000;
  v189 = v193;
  v190 = v193;
  v191 = 4;
  v192 = 0;
  v194 = 0;
  v195 = -1;
  v196 = 0;
  v197 = 0;
  v4 = *(_QWORD *)(v2 - 8 * *(unsigned int *)(v2 + 8));
  if (!v4)
    goto LABEL_254;
  v6 = a1[3];
  v185 = v2;
  v7 = *(uint64_t ****)(v4 + 128);
  if (((_DWORD)(*v7)[1] & 0xFFFFFF00) != 0x4000 || (*((_BYTE *)v7 + 34) & 0x40) == 0)
    goto LABEL_254;
  v8 = ***v7;
  v198 = *(void **)(v4 + 128);
  v9 = *(_DWORD *)(v8 + 2520);
  v10 = v7 >> 4;
  if (!v9)
  {
    v51 = 0;
LABEL_60:
    v14 = sub_1C53D65B8(v8 + 2504, (uint64_t)&v198, (uint64_t *)&v198, v51);
    v52 = v198;
    v14[1] = 0;
    v14[2] = 0;
    *v14 = v52;
    goto LABEL_6;
  }
  v11 = *(_QWORD *)(v8 + 2504);
  v12 = v9 - 1;
  v13 = v12 & (v10 ^ (v7 >> 9));
  v14 = (_QWORD *)(v11 + 24 * v13);
  v15 = (_QWORD ***)*v14;
  if ((uint64_t ***)*v14 != v7)
  {
    v35 = 0;
    v36 = 1;
    while (v15 != (_QWORD ***)-4096)
    {
      if (v35)
        v37 = 0;
      else
        v37 = v15 == (_QWORD ***)-8192;
      if (v37)
        v35 = v14;
      v38 = v13 + v36++;
      v13 = v38 & v12;
      v14 = (_QWORD *)(v11 + 24 * v13);
      v15 = (_QWORD ***)*v14;
      if ((uint64_t ***)*v14 == v7)
        goto LABEL_6;
    }
    if (v35)
      v51 = v35;
    else
      v51 = v14;
    goto LABEL_60;
  }
LABEL_6:
  if (v14[2] != 15
    || ((v16 = (uint64_t *)v14[1], v17 = *v16, v18 = *(uint64_t *)((char *)v16 + 7), v17 == 0x625F726566667562)
      ? (v19 = v18 == 0x73676E69646E6962)
      : (v19 = 0),
        !v19))
  {
    if ((*((_BYTE *)v7 + 34) & 0x40) == 0)
      goto LABEL_254;
    v20 = ***v7;
    v198 = v7;
    v21 = *(_DWORD *)(v20 + 2520);
    if (v21)
    {
      v22 = *(_QWORD *)(v20 + 2504);
      v23 = v21 - 1;
      v24 = v23 & (v10 ^ (v7 >> 9));
      v25 = (uint64_t ****)(v22 + 24 * v24);
      v26 = *v25;
      if (*v25 == v7)
      {
LABEL_14:
        if (v25[2] != (uint64_t ***)15)
          goto LABEL_254;
        v27 = (uint64_t *)v25[1];
        v28 = *v27;
        v29 = *(uint64_t *)((char *)v27 + 7);
        if (v28 != 0x736C61726574696CLL || v29 != 0x7265666675625F73)
          goto LABEL_254;
        goto LABEL_20;
      }
      v39 = 0;
      v40 = 1;
      while (v26 != (uint64_t ***)-4096)
      {
        if (v39)
          v41 = 0;
        else
          v41 = v26 == (uint64_t ***)-8192;
        if (v41)
          v39 = v25;
        v42 = v24 + v40++;
        v24 = v42 & v23;
        v25 = (uint64_t ****)(v22 + 24 * v24);
        v26 = *v25;
        if (*v25 == v7)
          goto LABEL_14;
      }
      if (v39)
        v53 = v39;
      else
        v53 = v25;
    }
    else
    {
      v53 = 0;
    }
    v25 = (uint64_t ****)sub_1C53D65B8(v20 + 2504, (uint64_t)&v198, (uint64_t *)&v198, v53);
    v54 = (uint64_t ***)v198;
    v25[1] = 0;
    v25[2] = 0;
    *v25 = v54;
    goto LABEL_14;
  }
LABEL_20:
  v31 = v7[3];
  if (*((_BYTE *)v31 + 8) != 15)
    v31 = 0;
  v194 = v31;
  if (!v31 || ((_DWORD)v31[1] & 0xFFFFFF00) != 0x200)
    goto LABEL_254;
  if (*(_DWORD *)(v185 + 8) == 4
    && (v32 = *(_QWORD *)(v185 - 8), *(_BYTE *)v32 == 1)
    && (v33 = *(_QWORD *)(v32 + 128), *(_BYTE *)(v33 + 16) == 16))
  {
    if (*(_DWORD *)(v33 + 32) > 0x40u)
      v34 = **(_QWORD **)(v33 + 24);
    else
      v34 = *(_QWORD *)(v33 + 24);
    if (HIDWORD(v34))
      goto LABEL_254;
  }
  else
  {
    LODWORD(v34) = -1;
  }
  if (!sub_1C55DC174((uint64_t)v7))
    goto LABEL_254;
  v164 = &v186;
  v168 = *(llvm::DataLayout **)(v3 + 32);
  v165 = *(_DWORD *)(v3 + 40);
  v43 = *(_QWORD *)(v3 + 44);
  v167 = *(unsigned __int8 *)(v3 + 88);
  v198 = v200;
  v199 = 0x1000000000;
  v175 = v179;
  v176 = v179;
  v177 = 4;
  v178 = 0;
  v44 = sub_1C55DC224((uint64_t)v7, (uint64_t)&v198, v6, (llvm::SmallPtrSetImplBase *)&v175, (uint64_t)&v185);
  v46 = v175;
  v45 = v176;
  if (!v44)
  {
    v55 = 0;
    goto LABEL_204;
  }
  v47 = (uint64_t *)((char *)&v177 + 4);
  if (v176 != v175)
    v47 = &v177;
  v48 = *(unsigned int *)v47;
  if ((_DWORD)v48)
  {
    v49 = 8 * v48;
    v50 = (unint64_t *)v176;
    while (*v50 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v50;
      v49 -= 8;
      if (!v49)
        goto LABEL_73;
    }
  }
  else
  {
    v50 = (unint64_t *)v176;
  }
  v56 = (unint64_t *)&v176[8 * v48];
  if (v50 != v56)
  {
    v57 = *v50;
LABEL_69:
    v58 = (*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v6 + 24))(v6, v57);
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v189, v58);
    v59 = v50 + 1;
    while (v59 != v56)
    {
      v60 = *v59++;
      v57 = v60;
      if (v60 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v50 = v59 - 1;
        goto LABEL_69;
      }
    }
  }
LABEL_73:
  v170 = v174;
  v171 = v174;
  v172 = 8;
  v173 = 0;
  v61 = v199;
  if (!(_DWORD)v199)
    goto LABEL_201;
  v62 = HIDWORD(v43);
  if (v43 > HIDWORD(v43))
    LODWORD(v62) = v43;
  v163 = -(int)v62;
  v162 = v43 + 0xFFFFFFFF;
  v160 = v34;
  v161 = -(int)v43;
  v166 = v165 & 0xFFFFFFFE;
  do
  {
    v63 = (char *)v198 + 32 * v61;
    v64 = *((_QWORD *)v63 - 4);
    v65 = *((_QWORD *)v63 - 2);
    LODWORD(v199) = v61 - 1;
    v66 = *(unsigned __int8 *)(v64 + 16);
    if (v64 && v66 == 60)
    {
      if ((*(_WORD *)(v64 + 18) & 0x381) != 0)
        goto LABEL_197;
      if (!v167)
        goto LABEL_182;
      v204 = v206;
      v205 = 0x400000000;
      v67 = *(_QWORD *)(v64 + 8);
      if (v67)
      {
        v68 = 0;
        do
        {
          if (v68 >= HIDWORD(v205))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v204, (uint64_t)v206, v68 + 1, 8);
            v68 = v205;
          }
          v204[v68] = v67;
          v68 = v205 + 1;
          LODWORD(v205) = v205 + 1;
          v67 = *(_QWORD *)(v67 + 8);
        }
        while (v67);
      }
      v78 = 0;
      v201 = v203;
      v202 = 0x400000000;
      while (1)
      {
        if (!(_DWORD)v205)
        {
LABEL_176:
          if (v201 != v203)
            free(v201);
          if (v204 != v206)
            free(v204);
          if ((v78 & 1) != 0)
          {
            HIBYTE(v196) = 1;
            goto LABEL_198;
          }
LABEL_182:
          sub_1C4768AD0((uint64_t)v168, *(_QWORD *)v64);
          if ((_DWORD)v100 == 1)
          {
            v104 = v99;
            v99 = v104;
          }
          v101 = ((unint64_t)(v99 + 7) >> 3) + v65;
          if (v101 >= 0)
          {
            if (v165 != 27)
              goto LABEL_194;
            v102 = *(_QWORD *)v64;
            if ((*(_DWORD *)(*(_QWORD *)v64 + 8) & 0xFE) != 0x12)
              goto LABEL_194;
            if (*(_DWORD *)(*(_QWORD *)v64 + 8) == 18
              && *(_DWORD *)(*(_QWORD *)(v102 + 24) + 8) == 2061)
            {
              v103 = *(_DWORD *)(v102 + 32) == 2 && (v65 & 1) == 0;
              if (v103 || (v65 & 3) == 0)
              {
LABEL_194:
                v180 = v64;
                v181 = v65;
                v182 = v65 & v163;
                v183 = v161 & (v162 + v101);
                sub_1C47E9C18((uint64_t)&v186, (unint64_t)&v180);
                goto LABEL_198;
              }
            }
            else if ((v65 & 3) == 0)
            {
              goto LABEL_194;
            }
          }
LABEL_197:
          HIBYTE(v196) = 1;
          goto LABEL_198;
        }
        v79 = (_QWORD *)v204[v205 - 1];
        v80 = v205 - 1;
        LODWORD(v205) = v205 - 1;
        v81 = v79[3];
        v82 = *(unsigned __int8 *)(v81 + 16);
        if (v82 >= 0x1C && v82 - 66 <= 0xC)
          break;
        if (v82 < 0x1C || v82 - 41 > 0x11)
          goto LABEL_153;
        if (v82 != 56)
          goto LABEL_175;
        v85 = *(_QWORD *)(v81 - 32);
        if (*(_BYTE *)(v85 + 16) != 16)
          goto LABEL_175;
        v86 = (_QWORD *)(v85 + 24);
        if (*(_DWORD *)(v85 + 32) >= 0x41u)
          v86 = (_QWORD *)*v86;
        v87 = (_QWORD *)*v86;
        if (*v86 == 0xFFFFFFFFLL || v87 == (_QWORD *)0xFFFF)
        {
          for (i = *(_QWORD *)(v81 + 8); i; i = *(_QWORD *)(i + 8))
          {
            if (v80 >= HIDWORD(v205))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v204, (uint64_t)v206, v80 + 1, 8);
              v80 = v205;
            }
            v204[v80] = i;
            v80 = v205 + 1;
            LODWORD(v205) = v205 + 1;
          }
          v91 = v202;
          if (v202 >= (unint64_t)HIDWORD(v202))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v201, (uint64_t)v203, v202 + 1, 8);
            v91 = v202;
          }
          v93 = 0;
          *(_QWORD *)&v201[8 * v91] = v81;
          LODWORD(v202) = v202 + 1;
          v92 = 2;
        }
        else
        {
          v92 = 0;
          v93 = 1;
        }
        if (v87 != (_QWORD *)0xFFFFFFFFLL && v87 != (_QWORD *)0xFFFF)
        {
LABEL_175:
          v78 = 0;
          goto LABEL_176;
        }
        if (v93)
        {
          v82 = *(unsigned __int8 *)(v81 + 16);
LABEL_153:
          if (v82 == 84)
          {
            v97 = *(_QWORD *)(v81 - 32);
            if (!v97)
              goto LABEL_175;
            if (*(_BYTE *)(v97 + 16))
              goto LABEL_175;
            if (*(_QWORD *)(v97 + 24) != *(_QWORD *)(v81 + 72))
              goto LABEL_175;
            if ((*(_BYTE *)(v97 + 33) & 0x20) == 0)
              goto LABEL_175;
            v98 = *(_DWORD *)(v97 + 36);
            if ((v98 - 1282) >= 0x190
              && (v98 - 2824) >= 0xC
              && (v98 - 1682) > 0x8B)
            {
              goto LABEL_175;
            }
            v78 = 1;
            llvm::SampleInfo::SampleInfo((uint64_t)&v180, v98, 1);
            if (*(_QWORD *)(v81 - 32 * (*(_DWORD *)(v81 + 20) & 0x7FFFFFF) + 32 * v184) != *v79)
              goto LABEL_175;
          }
          else
          {
            if (v82 != 89)
              goto LABEL_175;
            v94 = *(_QWORD *)(v81 + 8);
            if (v94)
            {
              v95 = v205;
              do
              {
                if (v95 >= HIDWORD(v205))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v204, (uint64_t)v206, v95 + 1, 8);
                  v95 = v205;
                }
                v204[v95] = v94;
                v95 = v205 + 1;
                LODWORD(v205) = v205 + 1;
                v94 = *(_QWORD *)(v94 + 8);
              }
              while (v94);
            }
LABEL_160:
            v96 = v202;
            if (v202 >= (unint64_t)HIDWORD(v202))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v201, (uint64_t)v203, v202 + 1, 8);
              v96 = v202;
            }
            *(_QWORD *)&v201[8 * v96] = v81;
            LODWORD(v202) = v202 + 1;
          }
          v92 = 2;
        }
        if (v92 != 2)
          goto LABEL_175;
      }
      for (j = *(_QWORD *)(v81 + 8); j; j = *(_QWORD *)(j + 8))
      {
        if (v80 >= HIDWORD(v205))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v204, (uint64_t)v206, v80 + 1, 8);
          v80 = v205;
        }
        v204[v80] = j;
        v80 = v205 + 1;
        LODWORD(v205) = v205 + 1;
      }
      goto LABEL_160;
    }
    if (v64 && v66 == 62)
    {
      v69 = sub_1C5EA708C(v64, v168);
      if (BYTE4(v69))
        v70 = 0;
      else
        v70 = v65 + (int)v69;
      if ((v69 & 0xFF0000000000) != 0 && BYTE4(v69) == 0)
        goto LABEL_197;
      LOBYTE(v196) = v196 | BYTE4(v69);
      if (v166 == 28)
      {
        if (BYTE4(v69))
          goto LABEL_197;
      }
      for (k = *(_QWORD *)(v64 + 8); k; k = *(_QWORD *)(k + 8))
      {
        v180 = *(_QWORD *)(k + 24);
        v181 = v70;
        v182 = v70;
        v183 = 0;
        sub_1C47E9C18((uint64_t)&v198, (unint64_t)&v180);
      }
    }
    else
    {
      if (v66 != 77)
      {
        if (v66 != 85)
          goto LABEL_197;
        LOBYTE(v196) = 1;
        if (v166 == 28)
          goto LABEL_198;
        v73 = (char *)sub_1C477672C((uint64_t)&v170, v64);
        if (v171 == v170)
          v74 = (uint64_t *)((char *)&v172 + 4);
        else
          v74 = &v172;
        if (v73 == &v171[8 * *(unsigned int *)v74])
        {
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v170, v64);
          goto LABEL_198;
        }
        v75 = (char *)sub_1C477672C((uint64_t)&v170, v64);
        if (v171 == v170)
          v76 = (uint64_t *)((char *)&v172 + 4);
        else
          v76 = &v172;
        if (v75 != &v171[8 * *(unsigned int *)v76])
        {
          *(_QWORD *)v75 = -2;
          ++v173;
        }
      }
      for (m = *(_QWORD *)(v64 + 8); m; m = *(_QWORD *)(m + 8))
      {
        v180 = *(_QWORD *)(m + 24);
        v181 = v65;
        v182 = v65;
        v183 = 0;
        sub_1C47E9C18((uint64_t)&v198, (unint64_t)&v180);
      }
    }
LABEL_198:
    v61 = v199;
  }
  while ((_DWORD)v199);
  LODWORD(v34) = v160;
  if (HIDWORD(v172) != v173)
    HIBYTE(v196) = 1;
LABEL_201:
  v55 = (v187 | v196) != 0;
  if (v171 != v170)
    free(v171);
  v46 = v175;
  v45 = v176;
LABEL_204:
  if (v45 != v46)
    free(v45);
  if (v198 != v200)
    free(v198);
  if (v55)
  {
    if ((_DWORD)v187)
    {
      sub_1C55DC36C((uint64_t)v186, (__int128 *)v186 + 2 * v187, 126 - 2 * __clz(v187), 1);
      v105 = *((_QWORD *)v186 + 2);
      if ((v105 & 0x8000000000000000) == 0)
      {
        v106 = *((_QWORD *)v186 + 4 * v187 - 1);
        v107 = __OFSUB__(v106, v105);
        v108 = v106 - v105;
        if (!((v108 < 0) ^ v107 | (v108 == 0)))
        {
          if ((_BYTE)v196)
          {
            if (v108 > v34)
              goto LABEL_254;
            if ((v165 - 30) >= 0xFFFFFFFE
              || (LODWORD(v187) = 0,
                  v199 = 0,
                  v198 = 0,
                  v200[0] = 0,
                  v200[1] = v34,
                  sub_1C47E9C18((uint64_t)&v186, (unint64_t)&v198),
                  (_BYTE)v196))
            {
              if (*(_DWORD *)(v185 + 8) < 4u)
                goto LABEL_254;
            }
          }
          else if (v106 > v34)
          {
            goto LABEL_254;
          }
          if ((_DWORD)v187)
          {
            v109 = 0;
            v110 = 32 * v187;
            v111 = (char *)v186 + 24;
            do
            {
              if (*v111)
                v109 += *v111 - *((_DWORD *)v111 - 2);
              v111 += 4;
              v110 -= 32;
            }
            while (v110);
          }
          else
          {
            v109 = 0;
          }
          v195 = v109;
          v112 = (_QWORD *)a1[4];
          v113 = sub_1C477672C((uint64_t)v112, *(_QWORD *)(*(_QWORD *)(v185 - 8 * *(unsigned int *)(v185 + 8)) + 128));
          v114 = v112[1];
          v115 = 16;
          if (v114 == *v112)
            v115 = 20;
          if (v113 != (_QWORD *)(v114 + 8 * *(unsigned int *)((char *)v112 + v115)))
            HIBYTE(v196) = 1;
          v116 = &v187;
          v117 = a1[1];
          v118 = *(unsigned int *)(v117 + 8);
          v119 = *(uint64_t **)v117;
          v120 = &v185;
          if (v118 >= *(_DWORD *)(v117 + 12))
          {
            v139 = v119 <= &v185 && &v119[141 * v118] > &v185;
            v140 = -1;
            if (v139)
              v140 = 0x70913F8BCD29C245 * (&v185 - v119);
            v169 = v140;
            v198 = 0;
            v119 = (uint64_t *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(v117, v118 + 1, 1128, (unint64_t *)&v198);
            v141 = *(_QWORD *)v117;
            v142 = *(_DWORD *)(v117 + 8);
            if (v142)
            {
              v143 = 0;
              v144 = 1128 * v142;
              do
              {
                v145 = v141 + v143;
                v146 = &v119[v143 / 8];
                *v146 = *(_QWORD *)(v141 + v143);
                v119[v143 / 8 + 1] = (uint64_t)&v119[v143 / 8 + 3];
                v146[2] = 0x2000000000;
                if (*(_DWORD *)(v141 + v143 + 16))
                  sub_1C4AC3E94((uint64_t)&v119[v143 / 8 + 1], v145 + 8);
                v147 = v146 + 135;
                v146[131] = (uint64_t)(v146 + 135);
                v148 = *(_QWORD *)(v145 + 1056);
                v149 = *(_QWORD *)(v145 + 1048);
                if (v148 == v149)
                {
                  v146[132] = (uint64_t)v147;
                  v150 = *(unsigned int *)(v141 + v143 + 1068);
                  if ((_DWORD)v150)
                    memmove(v147, *(const void **)(v145 + 1056), 8 * v150);
                }
                else
                {
                  v146[132] = v148;
                  *(_QWORD *)(v145 + 1056) = v149;
                }
                v151 = v141 + v143;
                v152 = (char *)&v119[v143 / 8];
                *((_QWORD *)v152 + 133) = *(_QWORD *)(v141 + v143 + 1064);
                *((_DWORD *)v152 + 268) = *(_DWORD *)(v141 + v143 + 1072);
                *(_QWORD *)(v151 + 1064) = 4;
                *(_DWORD *)(v151 + 1072) = 0;
                v153 = *(_QWORD *)(v141 + v143 + 1112);
                *(uint64_t *)((char *)&v119[v143 / 8 + 139] + 7) = *(_QWORD *)(v141 + v143 + 1119);
                *((_QWORD *)v152 + 139) = v153;
                v143 += 1128;
              }
              while (v144 != v143);
              v141 = *(_QWORD *)v117;
              v154 = *(_DWORD *)(v117 + 8);
            }
            else
            {
              v154 = 0;
            }
            sub_1C55DD12C(v141, v141 + 1128 * v154);
            v155 = (int)v198;
            if (*(_QWORD *)v117 != v117 + 16)
              free(*(void **)v117);
            *(_QWORD *)v117 = v119;
            *(_DWORD *)(v117 + 12) = v155;
            v156 = (char *)&v119[141 * v169];
            if (v139)
              v120 = &v119[141 * v169];
            else
              v120 = &v185;
            v157 = (void **)(v156 + 8);
            v158 = (uint64_t *)(v156 + 16);
            if (v139)
              v116 = v158;
            v159 = &v186;
            if (v139)
              v159 = v157;
            v164 = v159;
            LODWORD(v118) = *(_DWORD *)(v117 + 8);
          }
          v121 = &v119[141 * v118];
          *v121 = *v120;
          v122 = v121 + 3;
          v121[1] = (uint64_t)(v121 + 3);
          v123 = (void **)(v121 + 1);
          v19 = v121 == v120;
          v121[2] = 0x2000000000;
          v124 = v121 + 2;
          v125 = *(unsigned int *)v116;
          if (!v19 && (_DWORD)v125 != 0)
          {
            if (v125 < 0x21)
            {
              v127 = *(_DWORD *)v116;
LABEL_244:
              memcpy(v122, *v164, 32 * v127);
            }
            else
            {
              *v124 = 0;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v123, (uint64_t)v122, v125, 32);
              v127 = *(_DWORD *)v116;
              if (*(_DWORD *)v116)
              {
                v122 = *v123;
                goto LABEL_244;
              }
            }
            *v124 = v125;
          }
          v128 = (char *)&v119[141 * v118];
          v129 = v128 + 1048;
          v130 = v128 + 1080;
          *((_QWORD *)v128 + 131) = v128 + 1080;
          v131 = (const void *)v120[132];
          if (v131 == (const void *)v120[131])
          {
            *((_QWORD *)v129 + 1) = v130;
          }
          else
          {
            v137 = *((unsigned int *)v120 + 266);
            v130 = malloc_type_malloc(8 * v137, 0x4065EBACuLL);
            if (!v130 && ((_DWORD)v137 || (v130 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
              llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
            *((_QWORD *)v129 + 1) = v130;
            v131 = (const void *)v120[131];
          }
          *((_DWORD *)v129 + 4) = *((_DWORD *)v120 + 266);
          v132 = (const void *)v120[132];
          v133 = *((_DWORD *)v120 + 267);
          if (v132 == v131)
            v134 = *((_DWORD *)v120 + 267);
          else
            v134 = *((_DWORD *)v120 + 266);
          if (v134)
          {
            memmove(v130, v132, 8 * v134);
            v133 = *((_DWORD *)v120 + 267);
          }
          *((_DWORD *)v129 + 5) = v133;
          *((_DWORD *)v129 + 6) = *((_DWORD *)v120 + 268);
          v135 = &v119[141 * v118 + 139];
          v136 = *(uint64_t *)((char *)v120 + 1119);
          *v135 = v120[139];
          *(uint64_t *)((char *)v135 + 7) = v136;
          ++*(_DWORD *)(v117 + 8);
        }
      }
    }
  }
LABEL_254:
  if (v190 != v189)
    free(v190);
  if (v186 != v188)
    free(v186);
}

uint64_t sub_1C55DC174(uint64_t a1)
{
  uint64_t v1;
  uint64_t *v2;
  int v3;
  uint64_t v4;
  BOOL v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 1;
  while (1)
  {
    v2 = *(uint64_t **)(v1 + 24);
    v3 = *((unsigned __int8 *)v2 + 16);
    if (v3 != 77)
    {
      if (v3 == 60)
        goto LABEL_15;
      if (v3 != 5 || *((_WORD *)v2 + 9) != 49)
        return 0;
    }
    v4 = *v2;
    v5 = *v2 && *(_BYTE *)(*v2 + 8) == 15;
    if (!v5 || *(_QWORD *)(v4 + 24))
      break;
    if ((sub_1C55DC174() & 1) == 0)
      return 0;
LABEL_15:
    v1 = *(_QWORD *)(v1 + 8);
    if (!v1)
      return 1;
  }
  v6 = 0;
  v7 = **(_QWORD **)(v4 + 16);
  if (!v7 || *(_DWORD *)(v7 + 8) != 527)
    return v6;
  if (sub_1C55DC174())
    goto LABEL_15;
  return 0;
}

uint64_t sub_1C55DC224(uint64_t a1, uint64_t a2, uint64_t a3, llvm::SmallPtrSetImplBase *a4, uint64_t a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD v16[4];

  v5 = *(_QWORD *)(a1 + 8);
  v6 = 1;
  if (v5)
  {
    while (1)
    {
      v11 = *(_QWORD *)(v5 + 24);
      v12 = *(unsigned __int8 *)(v11 + 16);
      if (v12 == 77)
        goto LABEL_6;
      if (v12 != 60)
        break;
      if ((*(_WORD *)(v11 + 18) & 0x381) != 0)
        return 0;
      v13 = *(_QWORD *)(*(_QWORD *)(v11 + 40) + 56);
      v14 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 24))(a3, v13);
      if ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 592))(v14, 100) == v13)
      {
        *(_BYTE *)(a5 + 1126) = 1;
      }
      else
      {
        sub_1C4774094(a4, v13);
        while (1)
        {
          v11 = *(_QWORD *)(v11 + 8);
          if (!v11)
            break;
          v16[0] = *(_QWORD *)(v11 + 24);
          memset(&v16[1], 0, 24);
          sub_1C47E9C18(a2, (unint64_t)v16);
        }
      }
LABEL_7:
      v5 = *(_QWORD *)(v5 + 8);
      if (!v5)
        return 1;
    }
    if (v12 != 5 || *(_WORD *)(v11 + 18) != 49)
      return 0;
LABEL_6:
    if ((sub_1C55DC224(*(_QWORD *)(v5 + 24), a2, a3, a4, a5) & 1) == 0)
      return 0;
    goto LABEL_7;
  }
  return v6;
}

void sub_1C55DC36C(uint64_t a1, __int128 *a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  __int128 *v12;
  __int128 v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  BOOL v20;
  BOOL v21;
  unint64_t v22;
  __int128 *v23;
  __int128 *v24;
  uint64_t v25;
  _BOOL4 v26;
  _BOOL4 v27;
  __int128 *v28;
  uint64_t v29;
  BOOL v30;
  BOOL v31;
  __int128 *v32;
  __int128 v33;
  uint64_t v34;
  uint64_t v35;
  BOOL v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  _BOOL4 v40;
  _BOOL4 v41;
  __int128 *v42;
  __int128 v43;
  BOOL v44;
  uint64_t v45;
  BOOL v46;
  unint64_t v47;
  uint64_t v48;
  BOOL v49;
  BOOL v50;
  unint64_t v51;
  uint64_t v52;
  _BOOL4 v53;
  _BOOL4 v54;
  __int128 *v55;
  __int128 *v56;
  uint64_t v57;
  BOOL v58;
  BOOL v59;
  __int128 v60;
  uint64_t v61;
  uint64_t v62;
  _BOOL4 v63;
  _BOOL4 v64;
  uint64_t v65;
  uint64_t v66;
  BOOL v67;
  BOOL v68;
  __int128 *v69;
  __int128 v70;
  uint64_t v71;
  uint64_t v72;
  _BOOL4 v73;
  __int128 v74;
  __int128 *v75;
  __int128 *v76;
  __int128 *v77;
  uint64_t v78;
  uint64_t v79;
  _BOOL4 v80;
  __int128 v81;
  __int128 v82;
  uint64_t v83;
  uint64_t v84;
  _BOOL4 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  _BOOL4 v91;
  __int128 v92;
  __int128 v93;
  __int128 v94;
  uint64_t v95;
  uint64_t v96;
  _BOOL4 v97;
  __int128 v98;
  __int128 *v99;
  BOOL v100;
  char v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _BOOL4 v108;
  _BOOL4 v109;
  uint64_t v110;
  uint64_t v111;
  __int128 v112;
  uint64_t v113;
  BOOL v114;
  BOOL v115;
  uint64_t v116;
  int64_t v117;
  int64_t v118;
  int64_t v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  unint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  BOOL v128;
  unint64_t v129;
  _OWORD *v130;
  __int128 v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  _BOOL4 v137;
  _BOOL4 v138;
  uint64_t v139;
  _OWORD *v140;
  __int128 *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  __int128 v146;
  __int128 v147;
  uint64_t v148;
  unint64_t v149;
  unint64_t v150;
  uint64_t v151;
  uint64_t v152;
  _BOOL4 v153;
  _BOOL4 v154;
  uint64_t v155;
  uint64_t v156;
  __int128 *v157;
  __int128 v158;
  unint64_t v159;
  uint64_t v160;
  BOOL v161;
  BOOL v162;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  _BOOL4 v168;
  _BOOL4 v169;
  uint64_t v170;
  __int128 v171;
  uint64_t v172;
  uint64_t v173;
  BOOL v174;
  BOOL v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;
  __int128 v183;
  __int128 v184;
  __int128 v185;
  __int128 v186;
  __int128 v187;
  __int128 v188;
  __int128 v189;
  __int128 v190;
  __int128 v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;

__int128 *sub_1C55DCCD0(__int128 *result, __int128 *a2, __int128 *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  BOOL v6;
  BOOL v7;
  uint64_t v8;
  _BOOL4 v9;
  _BOOL4 v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  __int128 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  _BOOL4 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  __int128 v23;
  __int128 v24;
  __int128 v25;
  uint64_t v26;
  uint64_t v27;
  _BOOL4 v28;
  __int128 v29;

  v3 = *((_QWORD *)a2 + 2);
  v4 = *((_QWORD *)a2 + 3);
  v5 = *((_QWORD *)result + 2);
  v6 = v3 == v5;
  v7 = v3 < v5;
  if (v6)
    v7 = v4 < *((_QWORD *)result + 3);
  v8 = *((_QWORD *)a3 + 2);
  v9 = *((_QWORD *)a3 + 3) < v4;
  v6 = v8 == v3;
  v10 = v8 < v3;
  if (v6)
    v10 = v9;
  if (v7)
  {
    if (v10)
    {
      v12 = *result;
      v11 = result[1];
      v13 = a3[1];
      *result = *a3;
      result[1] = v13;
LABEL_17:
      *a3 = v12;
      a3[1] = v11;
      return result;
    }
    v24 = *result;
    v23 = result[1];
    v25 = a2[1];
    *result = *a2;
    result[1] = v25;
    *a2 = v24;
    a2[1] = v23;
    v26 = *((_QWORD *)a3 + 2);
    v27 = *((_QWORD *)a2 + 2);
    v6 = v26 == v27;
    v28 = v26 < v27;
    if (v6)
      v28 = *((_QWORD *)a3 + 3) < *((_QWORD *)a2 + 3);
    if (v28)
    {
      v12 = *a2;
      v11 = a2[1];
      v29 = a3[1];
      *a2 = *a3;
      a2[1] = v29;
      goto LABEL_17;
    }
  }
  else if (v10)
  {
    v15 = *a2;
    v14 = a2[1];
    v16 = a3[1];
    *a2 = *a3;
    a2[1] = v16;
    *a3 = v15;
    a3[1] = v14;
    v17 = *((_QWORD *)a2 + 2);
    v18 = *((_QWORD *)result + 2);
    v6 = v17 == v18;
    v19 = v17 < v18;
    if (v6)
      v19 = *((_QWORD *)a2 + 3) < *((_QWORD *)result + 3);
    if (v19)
    {
      v21 = *result;
      v20 = result[1];
      v22 = a2[1];
      *result = *a2;
      result[1] = v22;
      *a2 = v21;
      a2[1] = v20;
    }
  }
  return result;
}

BOOL sub_1C55DCDB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  _BOOL4 v9;
  __int128 v10;
  __int128 v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  _BOOL4 v20;
  uint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  BOOL v25;
  BOOL v26;
  uint64_t v27;
  __int128 *v28;
  __int128 *v29;
  __int128 *v30;
  uint64_t v31;
  uint64_t v32;
  _BOOL4 v33;
  __int128 v34;
  __int128 v35;
  __int128 v36;
  uint64_t v37;
  uint64_t v38;
  _BOOL4 v39;
  __int128 v40;
  __int128 v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;
  _BOOL4 v45;
  __int128 v46;
  __int128 v47;
  __int128 v48;
  uint64_t v49;
  uint64_t v50;
  _BOOL4 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  __int128 v55;

  v4 = (a2 - a1) >> 5;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(_QWORD *)(a2 - 16);
      v7 = *(_QWORD *)(a1 + 16);
      v8 = v6 == v7;
      v9 = v6 < v7;
      if (v8)
        v9 = *(_QWORD *)(a2 - 8) < *(_QWORD *)(a1 + 24);
      if (v9)
      {
        v11 = *(_OWORD *)a1;
        v10 = *(_OWORD *)(a1 + 16);
        v12 = *(_OWORD *)(a2 - 16);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)(a1 + 16) = v12;
        *(_OWORD *)(a2 - 32) = v11;
        *(_OWORD *)(a2 - 16) = v10;
      }
      return result;
    case 3:
      sub_1C55DCCD0((__int128 *)a1, (__int128 *)(a1 + 32), (__int128 *)(a2 - 32));
      return 1;
    case 4:
      sub_1C55DD054(a1, a1 + 32, a1 + 64, a2 - 32);
      return 1;
    case 5:
      v28 = (__int128 *)(a1 + 32);
      v29 = (__int128 *)(a1 + 64);
      v30 = (__int128 *)(a1 + 96);
      sub_1C55DD054(a1, a1 + 32, a1 + 64, a1 + 96);
      v31 = *(_QWORD *)(a2 - 16);
      v32 = *(_QWORD *)(a1 + 112);
      v8 = v31 == v32;
      v33 = v31 < v32;
      if (v8)
        v33 = *(_QWORD *)(a2 - 8) < *(_QWORD *)(a1 + 120);
      if (v33)
      {
        v35 = *v30;
        v34 = *(_OWORD *)(a1 + 112);
        v36 = *(_OWORD *)(a2 - 16);
        *v30 = *(_OWORD *)(a2 - 32);
        *(_OWORD *)(a1 + 112) = v36;
        *(_OWORD *)(a2 - 32) = v35;
        *(_OWORD *)(a2 - 16) = v34;
        v37 = *(_QWORD *)(a1 + 112);
        v38 = *(_QWORD *)(a1 + 80);
        v8 = v37 == v38;
        v39 = v37 < v38;
        if (v8)
          v39 = *(_QWORD *)(a1 + 120) < *(_QWORD *)(a1 + 88);
        if (v39)
        {
          v41 = *v29;
          v40 = *(_OWORD *)(a1 + 80);
          v42 = *(_OWORD *)(a1 + 112);
          *v29 = *v30;
          *(_OWORD *)(a1 + 80) = v42;
          *v30 = v41;
          *(_OWORD *)(a1 + 112) = v40;
          v43 = *(_QWORD *)(a1 + 80);
          v44 = *(_QWORD *)(a1 + 48);
          v8 = v43 == v44;
          v45 = v43 < v44;
          if (v8)
            v45 = *(_QWORD *)(a1 + 88) < *(_QWORD *)(a1 + 56);
          if (v45)
          {
            v47 = *v28;
            v46 = *(_OWORD *)(a1 + 48);
            v48 = *(_OWORD *)(a1 + 80);
            *v28 = *v29;
            *(_OWORD *)(a1 + 48) = v48;
            *v29 = v47;
            *(_OWORD *)(a1 + 80) = v46;
            v49 = *(_QWORD *)(a1 + 48);
            v50 = *(_QWORD *)(a1 + 16);
            v8 = v49 == v50;
            v51 = v49 < v50;
            if (v8)
              v51 = *(_QWORD *)(a1 + 56) < *(_QWORD *)(a1 + 24);
            if (v51)
            {
              v53 = *(_OWORD *)a1;
              v52 = *(_OWORD *)(a1 + 16);
              v54 = *(_OWORD *)(a1 + 48);
              *(_OWORD *)a1 = *v28;
              *(_OWORD *)(a1 + 16) = v54;
              *v28 = v53;
              *(_OWORD *)(a1 + 48) = v52;
            }
          }
        }
      }
      return 1;
    default:
      v13 = a1 + 64;
      sub_1C55DCCD0((__int128 *)a1, (__int128 *)(a1 + 32), (__int128 *)(a1 + 64));
      v14 = a1 + 96;
      if (a1 + 96 == a2)
        return 1;
      v15 = 0;
      v16 = 0;
      break;
  }
  while (1)
  {
    v17 = *(_QWORD *)(v14 + 16);
    v18 = *(_QWORD *)(v14 + 24);
    v19 = *(_QWORD *)(v13 + 16);
    v8 = v17 == v19;
    v20 = v17 < v19;
    if (v8)
      v20 = v18 < *(_QWORD *)(v13 + 24);
    if (v20)
    {
      v55 = *(_OWORD *)v14;
      v21 = v15;
      while (1)
      {
        v22 = a1 + v21;
        v23 = *(_OWORD *)(a1 + v21 + 80);
        *(_OWORD *)(v22 + 96) = *(_OWORD *)(a1 + v21 + 64);
        *(_OWORD *)(v22 + 112) = v23;
        if (v21 == -64)
          break;
        v24 = *(_QWORD *)(v22 + 48);
        v25 = v18 < *(_QWORD *)(v22 + 56);
        v8 = v17 == v24;
        v26 = v17 < v24;
        if (!v8)
          v25 = v26;
        v21 -= 32;
        if (!v25)
        {
          v27 = a1 + v21 + 96;
          goto LABEL_19;
        }
      }
      v27 = a1;
LABEL_19:
      *(_OWORD *)v27 = v55;
      *(_QWORD *)(v27 + 16) = v17;
      *(_QWORD *)(v27 + 24) = v18;
      if (++v16 == 8)
        return v14 + 32 == a2;
    }
    v13 = v14;
    v15 += 32;
    v14 += 32;
    if (v14 == a2)
      return 1;
  }
}

__n128 sub_1C55DD054(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;
  uint64_t v9;
  uint64_t v10;
  BOOL v11;
  _BOOL4 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  _BOOL4 v17;
  __int128 v18;
  __int128 v19;
  uint64_t v20;
  uint64_t v21;
  _BOOL4 v22;
  __int128 v23;
  __int128 v24;

  sub_1C55DCCD0((__int128 *)a1, (__int128 *)a2, (__int128 *)a3);
  v9 = *(_QWORD *)(a4 + 16);
  v10 = *(_QWORD *)(a3 + 16);
  v11 = v9 == v10;
  v12 = v9 < v10;
  if (v11)
    v12 = *(_QWORD *)(a4 + 24) < *(_QWORD *)(a3 + 24);
  if (v12)
  {
    v13 = *(_OWORD *)a3;
    result = *(__n128 *)(a3 + 16);
    v14 = *(_OWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_OWORD *)(a3 + 16) = v14;
    *(_OWORD *)a4 = v13;
    *(__n128 *)(a4 + 16) = result;
    v15 = *(_QWORD *)(a3 + 16);
    v16 = *(_QWORD *)(a2 + 16);
    v11 = v15 == v16;
    v17 = v15 < v16;
    if (v11)
      v17 = *(_QWORD *)(a3 + 24) < *(_QWORD *)(a2 + 24);
    if (v17)
    {
      v18 = *(_OWORD *)a2;
      result = *(__n128 *)(a2 + 16);
      v19 = *(_OWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_OWORD *)(a2 + 16) = v19;
      *(_OWORD *)a3 = v18;
      *(__n128 *)(a3 + 16) = result;
      v20 = *(_QWORD *)(a2 + 16);
      v21 = *(_QWORD *)(a1 + 16);
      v11 = v20 == v21;
      v22 = v20 < v21;
      if (v11)
        v22 = *(_QWORD *)(a2 + 24) < *(_QWORD *)(a1 + 24);
      if (v22)
      {
        v23 = *(_OWORD *)a1;
        result = *(__n128 *)(a1 + 16);
        v24 = *(_OWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_OWORD *)(a1 + 16) = v24;
        *(_OWORD *)a2 = v23;
        *(__n128 *)(a2 + 16) = result;
      }
    }
  }
  return result;
}

void sub_1C55DD12C(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v4;
  void *v5;

  if (a2 != a1)
  {
    v2 = a2;
    do
    {
      v4 = *(void **)(v2 - 72);
      if (v4 != *(void **)(v2 - 80))
        free(v4);
      v5 = *(void **)(v2 - 1120);
      if ((void *)(v2 - 1104) != v5)
        free(v5);
      v2 -= 1128;
    }
    while (v2 != a1);
  }
}

void sub_1C55DD188(unint64_t a1, char *a2, uint64_t a3, unint64_t a4, uint64_t a5, char a6)
{
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  char *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  unint64_t v27;
  __int128 v28;
  unint64_t v29;
  unint64_t v30;
  __int128 v31;
  uint64_t v32;
  unint64_t v33;
  char *v34;
  char *v35;
  unint64_t v36;
  unint64_t v37;
  char *v38;
  __int128 v39;
  unint64_t v40;
  unint64_t v41;
  __int128 v42;
  BOOL v43;
  char *v44;
  unint64_t v45;
  __int128 v46;
  char *v47;
  char *v48;
  char *v49;
  char *v50;
  unint64_t v51;
  __int128 v52;
  char *v53;
  BOOL v55;
  uint64_t v56;
  char *v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  char *v61;
  int64_t v62;
  int64_t v63;
  int64_t v64;
  int64_t v65;
  uint64_t v66;
  uint64_t v67;
  char *v68;
  int64_t v69;
  char *v70;
  unint64_t v71;
  char *v72;
  __int128 v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  __int128 v81;
  char *v82;
  __int128 v83;
  unint64_t v84;
  char *v85;
  unint64_t v86;
  char *v87;
  __int128 v88;
  char *v90;
  char *v91;
  unint64_t v92;
  unint64_t v93;
  char *v94;
  unint64_t v95;
  uint64_t v97;
  __int128 v98;
  __int128 v99;
  __int128 v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;

void sub_1C55DDB10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __int128 *v6;
  unint64_t v7;
  unint64_t v8;
  __int128 *v9;
  unint64_t v10;
  unint64_t v11;
  __int128 *v12;
  unint64_t v13;
  unint64_t v14;
  __int128 v15;
  uint64_t v16;
  int v17;
  __int128 v18;
  uint64_t v19;
  int v20;
  __int128 v21;
  uint64_t v22;
  int v23;
  __int128 v24;
  uint64_t v25;
  int v26;
  int v27;

  v8 = *(_QWORD *)(a4 - 24);
  v6 = (__int128 *)(a4 - 24);
  v7 = v8;
  v11 = *(_QWORD *)(a2 - 24);
  v9 = (__int128 *)(a2 - 24);
  v10 = v11;
  v14 = *(_QWORD *)(a6 - 24);
  v12 = (__int128 *)(a6 - 24);
  v13 = v14;
  if (v7 >= v10)
  {
    if (v13 < v7)
    {
      v18 = *v6;
      v19 = *((_QWORD *)v6 + 2);
      v20 = *((_DWORD *)v12 + 4);
      *v6 = *v12;
      *((_DWORD *)v6 + 4) = v20;
      *((_DWORD *)v12 + 4) = v19;
      *v12 = v18;
      if (*(_QWORD *)v6 < *(_QWORD *)v9)
      {
        v21 = *v9;
        v22 = *((_QWORD *)v9 + 2);
        v23 = *((_DWORD *)v6 + 4);
        *v9 = *v6;
        *((_DWORD *)v9 + 4) = v23;
        *((_DWORD *)v6 + 4) = v22;
        *v6 = v21;
      }
    }
  }
  else
  {
    if (v13 >= v7)
    {
      v24 = *v9;
      v25 = *((_QWORD *)v9 + 2);
      v26 = *((_DWORD *)v6 + 4);
      *v9 = *v6;
      *((_DWORD *)v9 + 4) = v26;
      *((_DWORD *)v6 + 4) = v25;
      *v6 = v24;
      if (*(_QWORD *)v12 >= *(_QWORD *)v6)
        return;
      v15 = *v6;
      v16 = *((_QWORD *)v6 + 2);
      v27 = *((_DWORD *)v12 + 4);
      *v6 = *v12;
      *((_DWORD *)v6 + 4) = v27;
    }
    else
    {
      v15 = *v9;
      v16 = *((_QWORD *)v9 + 2);
      v17 = *((_DWORD *)v12 + 4);
      *v9 = *v12;
      *((_DWORD *)v9 + 4) = v17;
    }
    *((_DWORD *)v12 + 4) = v16;
    *v12 = v15;
  }
}

BOOL sub_1C55DDC00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _BOOL8 result;
  __int128 *v8;
  __int128 v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  __int128 v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  uint64_t v34;
  __int128 v35;
  __int128 v36;

  result = 1;
  switch(0xAAAAAAAAAAAAAAABLL * ((a2 - a4) >> 3))
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v8 = (__int128 *)(a2 - 24);
      if (*(_QWORD *)a4 < *(_QWORD *)(a2 - 24))
      {
        v9 = *v8;
        v10 = *(_QWORD *)(a2 - 8);
        v11 = *(_DWORD *)(a4 + 16);
        *v8 = *(_OWORD *)a4;
        *(_DWORD *)(a2 - 8) = v11;
        *(_DWORD *)(a4 + 16) = v10;
        *(_OWORD *)a4 = v9;
      }
      return result;
    case 3uLL:
      sub_1C55DDB10(a1, a2, a2 - 24, a2 - 24, a3, a4 + 24);
      return 1;
    case 4uLL:
      sub_1C55DDEB8(a1, a2, a2 - 24, a2 - 24, a2 - 48, a2 - 48, a3, a4 + 24);
      return 1;
    case 5uLL:
      v22 = a2 - 24;
      v23 = a2 - 48;
      v24 = a2 - 72;
      sub_1C55DDEB8(a1, a2, a2 - 24, a2 - 24, a2 - 48, a2 - 48, a2 - 72, a2 - 72);
      v26 = *(_QWORD *)(a2 - 96);
      v25 = a2 - 96;
      if (*(_QWORD *)a4 < v26)
      {
        v27 = *(_OWORD *)v25;
        v28 = *(_QWORD *)(v25 + 16);
        v29 = *(_DWORD *)(a4 + 16);
        *(_OWORD *)v25 = *(_OWORD *)a4;
        *(_DWORD *)(v25 + 16) = v29;
        *(_DWORD *)(a4 + 16) = v28;
        *(_OWORD *)a4 = v27;
        if (*(_QWORD *)v25 < *(_QWORD *)v24)
        {
          v30 = *(_QWORD *)(v24 + 16);
          v31 = *(_OWORD *)v24;
          *(_OWORD *)v24 = *(_OWORD *)v25;
          *(_DWORD *)(v24 + 16) = *(_DWORD *)(v25 + 16);
          *(_OWORD *)v25 = v31;
          *(_DWORD *)(v25 + 16) = v30;
          if (*(_QWORD *)v24 < *(_QWORD *)v23)
          {
            v32 = *(_QWORD *)(v23 + 16);
            v33 = *(_OWORD *)v23;
            *(_OWORD *)v23 = *(_OWORD *)v24;
            *(_DWORD *)(v23 + 16) = *(_DWORD *)(v24 + 16);
            *(_OWORD *)v24 = v33;
            *(_DWORD *)(v24 + 16) = v32;
            if (*(_QWORD *)v23 < *(_QWORD *)v22)
            {
              v34 = *(_QWORD *)(v22 + 16);
              v35 = *(_OWORD *)v22;
              *(_OWORD *)v22 = *(_OWORD *)v23;
              *(_DWORD *)(v22 + 16) = *(_DWORD *)(v23 + 16);
              *(_OWORD *)v23 = v35;
              *(_DWORD *)(v23 + 16) = v34;
            }
          }
        }
      }
      return 1;
    default:
      v12 = a2 - 48;
      sub_1C55DDB10(a1, a2, a2 - 24, a2 - 24, a2 - 48, a2 - 48);
      v13 = a2 - 72;
      if (a2 - 72 == a4)
        return 1;
      v14 = 0;
      v15 = 0;
      v16 = a2 - 72;
      break;
  }
  while (1)
  {
    v18 = *(_QWORD *)(v16 - 24);
    v16 -= 24;
    v17 = v18;
    if (v18 < *(_QWORD *)(v12 - 24))
    {
      v36 = *(_OWORD *)(v13 - 16);
      v19 = v14;
      while (1)
      {
        v20 = a2 + v19;
        *(_OWORD *)(v20 - 96) = *(_OWORD *)(a2 + v19 - 72);
        *(_DWORD *)(v20 - 80) = *(_DWORD *)(a2 + v19 - 56);
        if (v19 == 48)
          break;
        v19 += 24;
        if (v17 >= *(_QWORD *)(v20 - 48))
        {
          v21 = a2 + v19 - 72;
          goto LABEL_13;
        }
      }
      v21 = a2;
LABEL_13:
      *(_QWORD *)(v20 - 72) = v17;
      *(_QWORD *)(v21 - 16) = v36;
      *(_DWORD *)(v21 - 8) = DWORD2(v36);
      if (++v15 == 8)
        return v16 == a4;
    }
    v14 -= 24;
    v12 = v13;
    v13 = v16;
    if (v16 == a4)
      return 1;
  }
}

__n128 sub_1C55DDEB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  __n128 result;
  unint64_t v13;
  __n128 *v14;
  unint64_t v15;
  __n128 *v16;
  unint64_t v17;
  unint64_t v18;
  unsigned __int32 v19;
  __n128 *v20;
  unint64_t v21;
  unint64_t v22;
  unsigned __int32 v23;
  __n128 *v24;
  unint64_t v25;
  unint64_t v26;
  unsigned __int32 v27;

  sub_1C55DDB10(a1, a2, a3, a4, a5, a6);
  v15 = *(_QWORD *)(a8 - 24);
  v14 = (__n128 *)(a8 - 24);
  v13 = v15;
  v17 = *(_QWORD *)(a6 - 24);
  v16 = (__n128 *)(a6 - 24);
  if (v13 < v17)
  {
    result = *v16;
    v18 = v16[1].n128_u64[0];
    v19 = v14[1].n128_u32[0];
    *v16 = *v14;
    v16[1].n128_u32[0] = v19;
    v14[1].n128_u32[0] = v18;
    *v14 = result;
    v21 = *(_QWORD *)(a4 - 24);
    v20 = (__n128 *)(a4 - 24);
    if (v16->n128_u64[0] < v21)
    {
      result = *v20;
      v22 = v20[1].n128_u64[0];
      v23 = v16[1].n128_u32[0];
      *v20 = *v16;
      v20[1].n128_u32[0] = v23;
      v16[1].n128_u32[0] = v22;
      *v16 = result;
      v25 = *(_QWORD *)(a2 - 24);
      v24 = (__n128 *)(a2 - 24);
      if (v20->n128_u64[0] < v25)
      {
        result = *v24;
        v26 = v24[1].n128_u64[0];
        v27 = v20[1].n128_u32[0];
        *v24 = *v20;
        v24[1].n128_u32[0] = v27;
        v20[1].n128_u32[0] = v26;
        *v20 = result;
      }
    }
  }
  return result;
}

void sub_1C55DDF84(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, char a5)
{
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned int v21;
  uint64_t *v22;
  char v23;
  BOOL v24;
  unsigned int v25;
  unsigned int v26;

void sub_1C55DE348(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int v19;

  sub_1C55DFCEC(a1, a2, a3, a4, a6);
  v12 = *(_DWORD *)(a5 + 1120);
  v13 = *(_DWORD *)(a4 + 1120);
  if ((*(_DWORD *)(*(_QWORD *)a6 + 40) & 0xFFFFFFFE) == 0x1C)
  {
    if (v12 <= v13)
      return;
  }
  else if (v12 >= v13)
  {
    return;
  }
  sub_1C55DFB24((uint64_t *)a4, (uint64_t *)a5);
  v14 = *(_DWORD *)(a4 + 1120);
  v15 = *(_DWORD *)(a3 + 1120);
  if ((*(_DWORD *)(*(_QWORD *)a6 + 40) & 0xFFFFFFFE) == 0x1C)
  {
    if (v14 <= v15)
      return;
  }
  else if (v14 >= v15)
  {
    return;
  }
  sub_1C55DFB24((uint64_t *)a3, (uint64_t *)a4);
  v16 = *(_DWORD *)(a3 + 1120);
  v17 = *(_DWORD *)(a2 + 1120);
  if ((*(_DWORD *)(*(_QWORD *)a6 + 40) & 0xFFFFFFFE) == 0x1C)
  {
    if (v16 <= v17)
      return;
  }
  else if (v16 >= v17)
  {
    return;
  }
  sub_1C55DFB24((uint64_t *)a2, (uint64_t *)a3);
  v18 = *(_DWORD *)(a2 + 1120);
  v19 = *(_DWORD *)(a1 + 1120);
  if ((*(_DWORD *)(*(_QWORD *)a6 + 40) & 0xFFFFFFFE) == 0x1C)
  {
    if (v18 <= v19)
      return;
LABEL_17:
    sub_1C55DFB24((uint64_t *)a1, (uint64_t *)a2);
    return;
  }
  if (v18 < v19)
    goto LABEL_17;
}

void sub_1C55DE48C(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unsigned int v9;
  unsigned int v10;
  const void *v11;
  const void *v12;
  uint64_t v13;
  uint64_t i;
  char *v15;
  unsigned int v16;
  uint64_t *v17;
  _QWORD *v18;
  uint64_t v19;
  void *v20[2];
  _BYTE v21[1024];
  _BYTE *v22;
  void *v23;
  uint64_t v24;
  int v25;
  _BYTE v26[32];
  _BYTE v27[15];
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  if (a1 == a2)
    return;
  v4 = a1 + 141;
  if (a1 + 141 == a2)
    return;
  v6 = 0;
  v7 = a1;
  v18 = a2;
  do
  {
    v8 = v7;
    v7 = v4;
    v9 = *((_DWORD *)v8 + 562);
    v10 = *((_DWORD *)v8 + 280);
    if ((*(_DWORD *)(*(_QWORD *)a3 + 40) & 0xFFFFFFFE) == 0x1C)
    {
      if (v9 <= v10)
        goto LABEL_29;
    }
    else if (v9 >= v10)
    {
      goto LABEL_29;
    }
    v19 = *v7;
    v20[0] = v21;
    v20[1] = (void *)0x2000000000;
    if (*((_DWORD *)v8 + 286))
      sub_1C4AC3E94((uint64_t)v20, (uint64_t)(v8 + 142));
    v22 = v26;
    v11 = (const void *)v8[273];
    v12 = (const void *)v8[272];
    if (v11 == v12)
    {
      v23 = v26;
      v13 = *((unsigned int *)v8 + 549);
      if ((_DWORD)v13)
        memmove(v26, v11, 8 * v13);
    }
    else
    {
      v23 = (void *)v8[273];
      v8[273] = v12;
    }
    v24 = v8[274];
    v25 = *((_DWORD *)v8 + 550);
    v8[274] = 4;
    *((_DWORD *)v8 + 550) = 0;
    *(_QWORD *)v27 = v8[280];
    *(_QWORD *)&v27[7] = *(_QWORD *)((char *)v8 + 2247);
    for (i = v6; ; i -= 1128)
    {
      v15 = (char *)a1 + i;
      *(_QWORD *)((char *)a1 + i + 1128) = *(_QWORD *)((char *)a1 + i);
      sub_1C4AC3E94((uint64_t)a1 + i + 1136, (uint64_t)a1 + i + 8);
      llvm::SmallPtrSetImplBase::MoveFrom((uint64_t)(v15 + 2176), 4, (double *)v15 + 131);
      *((_QWORD *)v15 + 280) = *((_QWORD *)v15 + 139);
      *(_QWORD *)(v15 + 2247) = *(_QWORD *)(v15 + 1119);
      if (!i)
      {
        v17 = a1;
        goto LABEL_22;
      }
      v16 = *((_DWORD *)v15 - 2);
      if ((*(_DWORD *)(*(_QWORD *)a3 + 40) & 0xFFFFFFFE) != 0x1C)
        break;
      if (*(_DWORD *)&v27[8] <= v16)
        goto LABEL_21;
LABEL_19:
      ;
    }
    if (*(_DWORD *)&v27[8] < v16)
      goto LABEL_19;
LABEL_21:
    v17 = (_QWORD *)((char *)a1 + i);
LABEL_22:
    *v17 = v19;
    sub_1C4AC3E94((uint64_t)a1 + i + 8, (uint64_t)v20);
    if (&v19 != v17)
      llvm::SmallPtrSetImplBase::MoveFrom((uint64_t)(v17 + 131), 4, (double *)&v22);
    *(_QWORD *)((char *)a1 + i + 1112) = *(_QWORD *)v27;
    *(_QWORD *)((char *)a1 + i + 1119) = *(_QWORD *)&v27[7];
    if (v23 != v22)
      free(v23);
    if (v20[0] != v21)
      free(v20[0]);
    a2 = v18;
LABEL_29:
    v4 = v7 + 141;
    v6 += 1128;
  }
  while (v7 + 141 != a2);
}

void sub_1C55DE720(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v6;
  _QWORD *v7;
  unsigned int v8;
  unsigned int v9;
  const void *v10;
  const void *v11;
  uint64_t v12;
  _QWORD *i;
  uint64_t *v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  void *v18[2];
  _BYTE v19[1024];
  _BYTE *v20;
  void *v21;
  uint64_t v22;
  int v23;
  _BYTE v24[32];
  _BYTE v25[15];
  uint64_t v26;

  v26 = *MEMORY[0x1E0C80C00];
  if (a1 == a2)
    return;
  v3 = a1;
  v4 = a1 + 141;
  if (a1 + 141 == a2)
    return;
  v6 = a1 + 280;
  v16 = a2;
  do
  {
    v7 = v3;
    v3 = v4;
    v8 = *((_DWORD *)v7 + 562);
    v9 = *((_DWORD *)v7 + 280);
    if ((*(_DWORD *)(*(_QWORD *)a3 + 40) & 0xFFFFFFFE) == 0x1C)
    {
      if (v8 <= v9)
        goto LABEL_26;
    }
    else if (v8 >= v9)
    {
      goto LABEL_26;
    }
    v17 = *v3;
    v18[0] = v19;
    v18[1] = (void *)0x2000000000;
    if (*((_DWORD *)v7 + 286))
      sub_1C4AC3E94((uint64_t)v18, (uint64_t)(v7 + 142));
    v20 = v24;
    v10 = (const void *)v7[273];
    v11 = (const void *)v7[272];
    if (v10 == v11)
    {
      v21 = v24;
      v12 = *((unsigned int *)v7 + 549);
      if ((_DWORD)v12)
        memmove(v24, v10, 8 * v12);
    }
    else
    {
      v21 = (void *)v7[273];
      v7[273] = v11;
    }
    v22 = v7[274];
    v23 = *((_DWORD *)v7 + 550);
    v7[274] = 4;
    *((_DWORD *)v7 + 550) = 0;
    *(_QWORD *)v25 = v7[280];
    *(_QWORD *)&v25[7] = *(_QWORD *)((char *)v7 + 2247);
    for (i = v6; ; i -= 141)
    {
      v14 = i - 280;
      *(i - 139) = *(i - 280);
      sub_1C4AC3E94((uint64_t)(i - 138), (uint64_t)(i - 279));
      llvm::SmallPtrSetImplBase::MoveFrom((uint64_t)(i - 8), 4, (double *)i - 149);
      *(_QWORD *)((char *)i + 7) = *(_QWORD *)((char *)i - 1121);
      *i = *(i - 141);
      v15 = *((_DWORD *)i - 562);
      if ((*(_DWORD *)(*(_QWORD *)a3 + 40) & 0xFFFFFFFE) != 0x1C)
        break;
      if (*(_DWORD *)&v25[8] <= v15)
        goto LABEL_19;
LABEL_18:
      ;
    }
    if (*(_DWORD *)&v25[8] < v15)
      goto LABEL_18;
LABEL_19:
    *v14 = v17;
    sub_1C4AC3E94((uint64_t)(i - 279), (uint64_t)v18);
    if (v14 != &v17)
      llvm::SmallPtrSetImplBase::MoveFrom((uint64_t)(i - 149), 4, (double *)&v20);
    *(i - 141) = *(_QWORD *)v25;
    *(_QWORD *)((char *)i - 1121) = *(_QWORD *)&v25[7];
    if (v21 != v20)
      free(v21);
    if (v18[0] != v19)
      free(v18[0]);
    a2 = v16;
LABEL_26:
    v4 = v3 + 141;
    v6 += 141;
  }
  while (v3 + 141 != a2);
}

void sub_1C55DE9A8(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4)
{
  uint64_t *v6;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  unsigned int v14;
  unsigned int v15;
  const void *v16;
  const void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unsigned int v24;
  unsigned int v25;
  BOOL v26;
  _BOOL4 v27;
  int v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  unsigned int v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v47;
  uint64_t *v48;
  uint64_t *v49;
  uint64_t v50;
  void *v51[2];
  _BYTE v52[1024];
  _BYTE *v53;
  void *v54;
  int v55;
  int v56;
  int v57;
  _BYTE v58[32];
  _QWORD v59[2];
  uint64_t v60;
  void *v61[2];
  _BYTE v62[1024];
  _BYTE *v63;
  void *v64;
  uint64_t v65;
  int v66;
  _BYTE v67[32];
  _BYTE v68[15];
  uint64_t v69;

  v69 = *MEMORY[0x1E0C80C00];
  if ((uint64_t *)a1 != a2)
  {
    v6 = a2;
    v8 = (uint64_t)a2 - a1;
    v9 = ((uint64_t)a2 - a1) / 1128;
    if ((uint64_t)a2 - a1 >= 1129)
    {
      v10 = (unint64_t)(v9 - 2) >> 1;
      v11 = v10 + 1;
      v12 = (uint64_t *)(a1 + 1128 * v10);
      do
      {
        sub_1C55DFDF0(a1, a4, v9, v12);
        v12 -= 141;
        --v11;
      }
      while (v11);
    }
    if (v6 != a3)
    {
      v13 = v6;
      while (1)
      {
        v14 = *((_DWORD *)v13 + 280);
        v15 = *(_DWORD *)(a1 + 1120);
        if ((*(_DWORD *)(*(_QWORD *)a4 + 40) & 0xFFFFFFFE) == 0x1C)
          break;
        if (v14 < v15)
          goto LABEL_11;
LABEL_12:
        v13 += 141;
        if (v13 == a3)
          goto LABEL_13;
      }
      if (v14 <= v15)
        goto LABEL_12;
LABEL_11:
      sub_1C55DFB24(v13, (uint64_t *)a1);
      sub_1C55DFDF0(a1, a4, v9, (uint64_t *)a1);
      goto LABEL_12;
    }
LABEL_13:
    if (v8 >= 1129)
    {
      do
      {
        v50 = *(_QWORD *)a1;
        v51[0] = v52;
        v51[1] = (void *)0x2000000000;
        if (*(_DWORD *)(a1 + 16))
          sub_1C4AC3E94((uint64_t)v51, a1 + 8);
        v53 = v58;
        v16 = *(const void **)(a1 + 1056);
        v17 = *(const void **)(a1 + 1048);
        v48 = v6;
        if (v16 == v17)
        {
          v54 = v58;
          v18 = *(unsigned int *)(a1 + 1068);
          if ((_DWORD)v18)
            memmove(v58, v16, 8 * v18);
        }
        else
        {
          v54 = *(void **)(a1 + 1056);
          *(_QWORD *)(a1 + 1056) = v17;
          LODWORD(v18) = *(_DWORD *)(a1 + 1068);
        }
        v19 = 0;
        v55 = *(_DWORD *)(a1 + 1064);
        v56 = v18;
        v57 = *(_DWORD *)(a1 + 1072);
        *(_QWORD *)(a1 + 1064) = 4;
        v59[0] = *(_QWORD *)(a1 + 1112);
        *(_QWORD *)((char *)v59 + 7) = *(_QWORD *)(a1 + 1119);
        v20 = (uint64_t *)a1;
        *(_DWORD *)(a1 + 1072) = 0;
        do
        {
          v21 = v19 + 1;
          v22 = &v20[141 * v19 + 141];
          v23 = 2 * v19;
          v19 = (2 * v19) | 1;
          if (v23 + 2 < v9)
          {
            v24 = v20[141 * v21 + 140];
            v25 = *((_DWORD *)v22 + 562);
            v26 = v24 >= v25;
            v27 = v24 > v25;
            v28 = !v26;
            if ((*(_DWORD *)(*(_QWORD *)a4 + 40) & 0xFFFFFFFE) != 0x1C)
              v27 = v28;
            v22 += 141 * v27;
            if (v27)
              v19 = v23 + 2;
          }
          *v20 = *v22;
          sub_1C4AC3E94((uint64_t)(v20 + 1), (uint64_t)(v22 + 1));
          if (v22 != v20)
            llvm::SmallPtrSetImplBase::MoveFrom((uint64_t)(v20 + 131), 4, (double *)v22 + 131);
          v29 = v22 + 139;
          v30 = v22[139];
          *(uint64_t *)((char *)v20 + 1119) = *(uint64_t *)((char *)v22 + 1119);
          v20[139] = v30;
          v20 = v22;
        }
        while (v19 <= (uint64_t)((unint64_t)(v9 - 2) >> 1));
        v6 -= 141;
        if (v22 == v48 - 141)
        {
          *v22 = v50;
          sub_1C4AC3E94((uint64_t)(v22 + 1), (uint64_t)v51);
          if (&v50 != v22)
            llvm::SmallPtrSetImplBase::MoveFrom((uint64_t)(v22 + 131), 4, (double *)&v53);
          v37 = v59[0];
          *(uint64_t *)((char *)v22 + 1119) = *(_QWORD *)((char *)v59 + 7);
          *v29 = v37;
        }
        else
        {
          *v22 = *v6;
          sub_1C4AC3E94((uint64_t)(v22 + 1), (uint64_t)(v48 - 140));
          v47 = (uint64_t)(v48 - 10);
          llvm::SmallPtrSetImplBase::MoveFrom((uint64_t)(v22 + 131), 4, (double *)v48 - 10);
          v32 = *(v48 - 2);
          v31 = v48 - 2;
          *(uint64_t *)((char *)v22 + 1119) = *(uint64_t *)((char *)v48 - 9);
          *v29 = v32;
          *v6 = v50;
          sub_1C4AC3E94((uint64_t)(v48 - 140), (uint64_t)v51);
          v49 = v48 - 141;
          if (&v50 != v6)
            llvm::SmallPtrSetImplBase::MoveFrom(v47, 4, (double *)&v53);
          *v31 = v59[0];
          *(uint64_t *)((char *)v31 + 7) = *(_QWORD *)((char *)v59 + 7);
          v33 = (uint64_t)v22 - a1 + 1128;
          if (v33 >= 1129)
          {
            v34 = (v33 / 0x468uLL - 2) >> 1;
            v35 = *(_DWORD *)(a1 + 1128 * v34 + 1120);
            v36 = *((_DWORD *)v22 + 280);
            if ((*(_DWORD *)(*(_QWORD *)a4 + 40) & 0xFFFFFFFE) == 0x1C)
            {
              if (v35 > v36)
                goto LABEL_42;
            }
            else if (v35 < v36)
            {
LABEL_42:
              v60 = *v22;
              v61[0] = v62;
              v61[1] = (void *)0x2000000000;
              if (*((_DWORD *)v22 + 4))
                sub_1C4AC3E94((uint64_t)v61, (uint64_t)(v22 + 1));
              v63 = v67;
              v38 = v22[131];
              if (v22[132] == v38)
              {
                v64 = v67;
                v39 = *((unsigned int *)v22 + 267);
                if ((_DWORD)v39)
                  memmove(v67, (const void *)v22[132], 8 * v39);
              }
              else
              {
                v64 = (void *)v22[132];
                v22[132] = v38;
              }
              v65 = v22[133];
              v66 = *((_DWORD *)v22 + 268);
              v22[133] = 4;
              *((_DWORD *)v22 + 268) = 0;
              v40 = *v29;
              *(_QWORD *)&v68[7] = *(uint64_t *)((char *)v22 + 1119);
              *(_QWORD *)v68 = v40;
              while (1)
              {
                v41 = v34;
                v42 = (uint64_t *)(a1 + 1128 * v34);
                *v22 = *v42;
                sub_1C4AC3E94((uint64_t)(v22 + 1), (uint64_t)(v42 + 1));
                if (v42 != v22)
                  llvm::SmallPtrSetImplBase::MoveFrom((uint64_t)(v22 + 131), 4, (double *)(a1 + 1128 * v34 + 1048));
                v43 = (uint64_t *)(a1 + 1128 * v34 + 1112);
                v44 = *v43;
                *(uint64_t *)((char *)v22 + 1119) = *(_QWORD *)(a1 + 1128 * v34 + 1119);
                v22[139] = v44;
                if (!v34)
                  break;
                v34 = (v34 - 1) >> 1;
                v45 = *(_DWORD *)(a1 + 1128 * v34 + 1120);
                v22 = v42;
                if ((*(_DWORD *)(*(_QWORD *)a4 + 40) & 0xFFFFFFFE) == 0x1C)
                {
                  if (v45 <= *(_DWORD *)&v68[8])
                    break;
                }
                else if (v45 >= *(_DWORD *)&v68[8])
                {
                  break;
                }
              }
              *v42 = v60;
              sub_1C4AC3E94((uint64_t)(v42 + 1), (uint64_t)v61);
              if (&v60 != v42)
                llvm::SmallPtrSetImplBase::MoveFrom(a1 + 1128 * v41 + 1048, 4, (double *)&v63);
              *v43 = *(_QWORD *)v68;
              *(_QWORD *)(a1 + 1128 * v41 + 1119) = *(_QWORD *)&v68[7];
              if (v64 != v63)
                free(v64);
              v6 = v49;
              if (v61[0] != v62)
                free(v61[0]);
            }
          }
        }
        if (v54 != v53)
          free(v54);
        if (v51[0] != v52)
          free(v51[0]);
      }
      while (v9-- > 2);
    }
  }
}

void sub_1C55DEFE0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t *v15;

  v7 = a1;
  v8 = *(_DWORD *)(a2 + 1120);
  v9 = *(_DWORD *)(a1 + 1120);
  v10 = *(_DWORD *)(a3 + 1120);
  if ((*(_DWORD *)(*(_QWORD *)a4 + 40) & 0xFFFFFFFE) != 0x1C)
  {
    if (v8 < v9)
    {
      if (v10 >= v8)
        goto LABEL_4;
      goto LABEL_18;
    }
    if (v10 >= v8)
      return;
LABEL_13:
    sub_1C55DFB24((uint64_t *)a2, (uint64_t *)a3);
    v13 = *(_DWORD *)(a2 + 1120);
    v14 = *(_DWORD *)(v7 + 1120);
    if ((*(_DWORD *)(*(_QWORD *)a4 + 40) & 0xFFFFFFFE) == 0x1C)
    {
      if (v13 <= v14)
        return;
    }
    else if (v13 >= v14)
    {
      return;
    }
    a1 = v7;
    v15 = (uint64_t *)a2;
    goto LABEL_21;
  }
  if (v8 > v9)
  {
    if (v10 <= v8)
    {
LABEL_4:
      sub_1C55DFB24((uint64_t *)a1, (uint64_t *)a2);
      v11 = *(_DWORD *)(a3 + 1120);
      v12 = *(_DWORD *)(a2 + 1120);
      if ((*(_DWORD *)(*(_QWORD *)a4 + 40) & 0xFFFFFFFE) == 0x1C)
      {
        if (v11 <= v12)
          return;
      }
      else if (v11 >= v12)
      {
        return;
      }
      a1 = a2;
    }
LABEL_18:
    v15 = (uint64_t *)a3;
LABEL_21:
    sub_1C55DFB24((uint64_t *)a1, v15);
    return;
  }
  if (v10 > v8)
    goto LABEL_13;
}

unint64_t sub_1C55DF108(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  const void *v6;
  const void *v7;
  uint64_t v8;
  unsigned int v9;
  unsigned int v10;
  unint64_t i;
  unsigned int v12;
  unint64_t v13;
  unsigned int v14;
  uint64_t *v15;
  unsigned int v16;
  unint64_t v17;
  unsigned int v18;
  uint64_t *v19;
  unsigned int v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  void *v26[2];
  _BYTE v27[1024];
  _BYTE *v28;
  void *v29;
  int v30;
  int v31;
  int v32;
  _BYTE v33[32];
  _BYTE v34[15];
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v25 = *a1;
  v26[0] = v27;
  v26[1] = (void *)0x2000000000;
  if (*((_DWORD *)a1 + 4))
    sub_1C4AC3E94((uint64_t)v26, (uint64_t)(a1 + 1));
  v28 = v33;
  v6 = (const void *)a1[132];
  v7 = (const void *)a1[131];
  if (v6 == v7)
  {
    v29 = v33;
    v8 = *((unsigned int *)a1 + 267);
    if ((_DWORD)v8)
      memmove(v33, v6, 8 * v8);
  }
  else
  {
    v29 = (void *)a1[132];
    a1[132] = (uint64_t)v7;
    LODWORD(v8) = *((_DWORD *)a1 + 267);
  }
  v30 = *((_DWORD *)a1 + 266);
  v31 = v8;
  v32 = *((_DWORD *)a1 + 268);
  a1[133] = 4;
  *((_DWORD *)a1 + 268) = 0;
  *(_QWORD *)&v34[7] = *(uint64_t *)((char *)a1 + 1119);
  *(_QWORD *)v34 = a1[139];
  v9 = *(_DWORD *)(*(_QWORD *)a3 + 40) & 0xFFFFFFFE;
  v10 = *((_DWORD *)a2 - 2);
  if (v9 == 28)
  {
    if (*(_DWORD *)&v34[8] <= v10)
      goto LABEL_8;
LABEL_16:
    v13 = (unint64_t)(a1 + 141);
    do
    {
      while (1)
      {
        i = v13;
        v14 = *(_DWORD *)(v13 + 1120);
        v13 += 1128;
        if (v9 != 28)
          break;
        if (*(_DWORD *)&v34[8] > v14)
          goto LABEL_21;
      }
    }
    while (*(_DWORD *)&v34[8] >= v14);
    goto LABEL_21;
  }
  if (*(_DWORD *)&v34[8] < v10)
    goto LABEL_16;
LABEL_8:
  for (i = (unint64_t)(a1 + 141); i < (unint64_t)a2; i += 1128)
  {
    v12 = *(_DWORD *)(i + 1120);
    if (v9 == 28)
    {
      if (*(_DWORD *)&v34[8] > v12)
        break;
    }
    else if (*(_DWORD *)&v34[8] < v12)
    {
      break;
    }
  }
LABEL_21:
  if (i >= (unint64_t)a2)
    goto LABEL_39;
  v15 = a2 - 142;
  while (v9 == 28)
  {
    if (*(_DWORD *)&v34[8] <= v10)
      goto LABEL_28;
LABEL_27:
    v10 = *(_DWORD *)v15;
    v15 -= 141;
  }
  if (*(_DWORD *)&v34[8] < v10)
    goto LABEL_27;
LABEL_28:
  a2 = v15 + 1;
LABEL_39:
  while (i < (unint64_t)a2)
  {
    sub_1C55DFB24((uint64_t *)i, a2);
    v16 = *(_DWORD *)(*(_QWORD *)a3 + 40) & 0xFFFFFFFE;
    v17 = i + 1128;
    do
    {
      while (1)
      {
        i = v17;
        v18 = *(_DWORD *)(v17 + 1120);
        v17 += 1128;
        if (v16 != 28)
          break;
        if (*(_DWORD *)&v34[8] > v18)
          goto LABEL_34;
      }
    }
    while (*(_DWORD *)&v34[8] >= v18);
LABEL_34:
    v19 = a2 - 141;
    do
    {
      while (1)
      {
        a2 = v19;
        v20 = *((_DWORD *)v19 + 280);
        v19 -= 141;
        if (v16 != 28)
          break;
        if (*(_DWORD *)&v34[8] <= v20)
          goto LABEL_39;
      }
    }
    while (*(_DWORD *)&v34[8] < v20);
  }
  v21 = (uint64_t *)(i - 1128);
  if ((uint64_t *)(i - 1128) != a1)
  {
    *a1 = *v21;
    sub_1C4AC3E94((uint64_t)(a1 + 1), i - 1120);
    llvm::SmallPtrSetImplBase::MoveFrom((uint64_t)(a1 + 131), 4, (double *)(i - 80));
    v22 = *(_QWORD *)(i - 16);
    *(uint64_t *)((char *)a1 + 1119) = *(_QWORD *)(i - 9);
    a1[139] = v22;
  }
  *v21 = v25;
  sub_1C4AC3E94(i - 1120, (uint64_t)v26);
  if (&v25 != v21)
    llvm::SmallPtrSetImplBase::MoveFrom(i - 80, 4, (double *)&v28);
  v23 = *(_QWORD *)v34;
  *(_QWORD *)(i - 9) = *(_QWORD *)&v34[7];
  *(_QWORD *)(i - 16) = v23;
  if (v29 != v28)
    free(v29);
  if (v26[0] != v27)
    free(v26[0]);
  return i;
}

uint64_t *sub_1C55DF420(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  const void *v6;
  const void *v7;
  uint64_t v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t *v13;
  unsigned int v14;
  uint64_t *v15;
  unsigned int v16;
  uint64_t *v19;
  uint64_t *v20;
  unsigned int v21;
  uint64_t *v22;
  unsigned int v23;
  uint64_t *v24;
  unsigned int v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v30;
  void *v31[2];
  _BYTE v32[1024];
  _BYTE *v33;
  void *v34;
  int v35;
  int v36;
  int v37;
  _BYTE v38[32];
  _BYTE v39[15];
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  v30 = *(_QWORD *)a1;
  v31[0] = v32;
  v31[1] = (void *)0x2000000000;
  if (*(_DWORD *)(a1 + 16))
    sub_1C4AC3E94((uint64_t)v31, a1 + 8);
  v33 = v38;
  v6 = *(const void **)(a1 + 1056);
  v7 = *(const void **)(a1 + 1048);
  if (v6 == v7)
  {
    v34 = v38;
    v8 = *(unsigned int *)(a1 + 1068);
    if ((_DWORD)v8)
      memmove(v38, v6, 8 * v8);
  }
  else
  {
    v34 = *(void **)(a1 + 1056);
    *(_QWORD *)(a1 + 1056) = v7;
    LODWORD(v8) = *(_DWORD *)(a1 + 1068);
  }
  v9 = 0;
  v35 = *(_DWORD *)(a1 + 1064);
  v36 = v8;
  v37 = *(_DWORD *)(a1 + 1072);
  *(_QWORD *)(a1 + 1064) = 4;
  *(_DWORD *)(a1 + 1072) = 0;
  *(_QWORD *)&v39[7] = *(_QWORD *)(a1 + 1119);
  *(_QWORD *)v39 = *(_QWORD *)(a1 + 1112);
  v10 = *(_DWORD *)(*(_QWORD *)a3 + 40) & 0xFFFFFFFE;
  while (1)
  {
    v11 = *(_DWORD *)(a1 + v9 + 2248);
    if (v10 != 28)
      break;
    if (v11 <= *(_DWORD *)&v39[8])
      goto LABEL_12;
LABEL_11:
    v9 += 1128;
  }
  if (v11 < *(_DWORD *)&v39[8])
    goto LABEL_11;
LABEL_12:
  v12 = a1 + v9 + 1128;
  if (v9)
  {
    v13 = a2 - 141;
    do
    {
      while (1)
      {
        a2 = v13;
        v14 = *((_DWORD *)v13 + 280);
        v13 -= 141;
        if (v10 != 28)
          break;
        if (v14 > *(_DWORD *)&v39[8])
          goto LABEL_33;
      }
    }
    while (v14 >= *(_DWORD *)&v39[8]);
  }
  else if (v12 < (unint64_t)a2)
  {
    v15 = a2 - 141;
    do
    {
      while (1)
      {
        a2 = v15;
        v16 = *((_DWORD *)v15 + 280);
        v15 -= 141;
        if (v10 != 28)
          break;
        if (v16 > *(_DWORD *)&v39[8] || v12 >= (unint64_t)a2)
          goto LABEL_33;
      }
    }
    while (v16 >= *(_DWORD *)&v39[8] && v12 < (unint64_t)a2);
  }
LABEL_33:
  v19 = (uint64_t *)v12;
  if (v12 < (unint64_t)a2)
  {
    v20 = a2;
    do
    {
      sub_1C55DFB24(v19, v20);
      v21 = *(_DWORD *)(*(_QWORD *)a3 + 40) & 0xFFFFFFFE;
      v22 = v19 + 141;
      do
      {
        while (1)
        {
          v19 = v22;
          v23 = *((_DWORD *)v22 + 280);
          v22 += 141;
          if (v21 != 28)
            break;
          if (v23 <= *(_DWORD *)&v39[8])
            goto LABEL_40;
        }
      }
      while (v23 < *(_DWORD *)&v39[8]);
LABEL_40:
      v24 = v20 - 141;
      do
      {
        while (1)
        {
          v20 = v24;
          v25 = *((_DWORD *)v24 + 280);
          v24 -= 141;
          if (v21 != 28)
            break;
          if (v25 > *(_DWORD *)&v39[8])
            goto LABEL_45;
        }
      }
      while (v25 >= *(_DWORD *)&v39[8]);
LABEL_45:
      ;
    }
    while (v19 < v20);
  }
  v26 = v19 - 141;
  if (v19 - 141 != (uint64_t *)a1)
  {
    *(_QWORD *)a1 = *v26;
    sub_1C4AC3E94(a1 + 8, (uint64_t)(v19 - 140));
    llvm::SmallPtrSetImplBase::MoveFrom(a1 + 1048, 4, (double *)v19 - 10);
    v27 = *(v19 - 2);
    *(_QWORD *)(a1 + 1119) = *(uint64_t *)((char *)v19 - 9);
    *(_QWORD *)(a1 + 1112) = v27;
  }
  *v26 = v30;
  sub_1C4AC3E94((uint64_t)(v19 - 140), (uint64_t)v31);
  if (&v30 != v26)
    llvm::SmallPtrSetImplBase::MoveFrom((uint64_t)(v19 - 10), 4, (double *)&v33);
  v28 = *(_QWORD *)v39;
  *(uint64_t *)((char *)v19 - 9) = *(_QWORD *)&v39[7];
  *(v19 - 2) = v28;
  if (v34 != v33)
    free(v34);
  if (v31[0] != v32)
    free(v31[0]);
  return v19 - 141;
}

BOOL sub_1C55DF748(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  uint64_t v6;
  _BOOL8 result;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  unsigned int v15;
  unsigned int v16;
  const void *v17;
  const void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  unsigned int v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  void *v28[2];
  _BYTE v29[1024];
  _BYTE *v30;
  void *v31;
  int v32;
  int v33;
  int v34;
  _BYTE v35[32];
  _BYTE v36[15];
  uint64_t v37;

  v4 = a2;
  v37 = *MEMORY[0x1E0C80C00];
  v6 = 0x70913F8BCD29C245 * ((a2 - a1) >> 3);
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(_DWORD *)(a2 - 8);
      v9 = *(_DWORD *)(a1 + 1120);
      if ((*(_DWORD *)(*(_QWORD *)a3 + 40) & 0xFFFFFFFE) == 0x1C)
      {
        if (v8 <= v9)
          return result;
LABEL_38:
        sub_1C55DFB24((uint64_t *)a1, (uint64_t *)(a2 - 1128));
        return 1;
      }
      if (v8 < v9)
        goto LABEL_38;
      return result;
    case 3:
      sub_1C55DEFE0(a1, a1 + 1128, a2 - 1128, a3);
      return 1;
    case 4:
      sub_1C55DFCEC(a1, a1 + 1128, a1 + 2256, a2 - 1128, a3);
      return 1;
    case 5:
      sub_1C55DE348(a1, a1 + 1128, a1 + 2256, a1 + 3384, a2 - 1128, a3);
      return 1;
    default:
      v10 = a1 + 2256;
      sub_1C55DEFE0(a1, a1 + 1128, a1 + 2256, a3);
      v11 = a1 + 3384;
      if (a1 + 3384 == v4)
        return 1;
      v12 = 0;
      v13 = 0;
      v14 = 4432;
      v24 = v4;
      while (2)
      {
        v15 = *(_DWORD *)(v11 + 1120);
        v16 = *(_DWORD *)(v10 + 1120);
        if ((*(_DWORD *)(*(_QWORD *)a3 + 40) & 0xFFFFFFFE) == 0x1C)
        {
          if (v15 <= v16)
            goto LABEL_31;
        }
        else if (v15 >= v16)
        {
          goto LABEL_31;
        }
        v25 = v13;
        v27 = *(_QWORD *)v11;
        v28[0] = v29;
        v28[1] = (void *)0x2000000000;
        if (*(_DWORD *)(v11 + 16))
          sub_1C4AC3E94((uint64_t)v28, v11 + 8);
        v30 = v35;
        v17 = *(const void **)(v11 + 1056);
        v18 = *(const void **)(v11 + 1048);
        if (v17 == v18)
        {
          v31 = v35;
          v19 = *(unsigned int *)(v11 + 1068);
          if ((_DWORD)v19)
            memmove(v35, v17, 8 * v19);
        }
        else
        {
          v31 = *(void **)(v11 + 1056);
          *(_QWORD *)(v11 + 1056) = v18;
          LODWORD(v19) = *(_DWORD *)(v11 + 1068);
        }
        v32 = *(_DWORD *)(v11 + 1064);
        v33 = v19;
        v34 = *(_DWORD *)(v11 + 1072);
        *(_QWORD *)(v11 + 1064) = 4;
        *(_DWORD *)(v11 + 1072) = 0;
        *(_QWORD *)v36 = *(_QWORD *)(v11 + 1112);
        *(_QWORD *)&v36[7] = *(_QWORD *)(v11 + 1119);
        v20 = v14;
        v26 = v12;
        while (1)
        {
          v21 = a1 + v12;
          *(_QWORD *)(a1 + v12 + 3384) = *(_QWORD *)(a1 + v12 + 2256);
          sub_1C4AC3E94(a1 + v12 + 3392, a1 + v12 + 2264);
          llvm::SmallPtrSetImplBase::MoveFrom(a1 + v20, 4, (double *)(a1 + v12 + 3304));
          v22 = (_QWORD *)(a1 + v12 + 3368);
          *(_QWORD *)(v21 + 4496) = *(_QWORD *)(v21 + 3368);
          *(_QWORD *)(v21 + 4503) = *(_QWORD *)(v21 + 3375);
          if (v12 == -2256)
            break;
          v23 = *(_DWORD *)(v21 + 2248);
          if ((*(_DWORD *)(*(_QWORD *)a3 + 40) & 0xFFFFFFFE) == 0x1C)
          {
            if (*(_DWORD *)&v36[8] <= v23)
            {
              v10 = a1 + v12 + 2256;
              goto LABEL_24;
            }
          }
          else if (*(_DWORD *)&v36[8] >= v23)
          {
            goto LABEL_24;
          }
          v10 -= 1128;
          v12 -= 1128;
          v20 -= 1128;
        }
        v10 = a1;
LABEL_24:
        *(_QWORD *)v10 = v27;
        sub_1C4AC3E94(a1 + v12 + 2264, (uint64_t)v28);
        v12 = v26;
        if (&v27 != (uint64_t *)v10)
          llvm::SmallPtrSetImplBase::MoveFrom(v10 + 1048, 4, (double *)&v30);
        *v22 = *(_QWORD *)v36;
        *(_QWORD *)((char *)v22 + 7) = *(_QWORD *)&v36[7];
        if (v31 != v30)
          free(v31);
        v4 = v24;
        if (v28[0] != v29)
          free(v28[0]);
        v13 = v25 + 1;
        if (v25 == 7)
          return v11 + 1128 == v24;
LABEL_31:
        v10 = v11;
        v12 += 1128;
        v14 += 1128;
        v11 += 1128;
        if (v11 == v4)
          return 1;
        continue;
      }
  }
}

void sub_1C55DFB24(uint64_t *a1, uint64_t *a2)
{
  const void *v4;
  const void *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  void *v9[2];
  _BYTE v10[1024];
  _BYTE *v11;
  void *v12;
  int v13;
  int v14;
  int v15;
  _BYTE v16[32];
  _QWORD v17[3];

  v17[2] = *MEMORY[0x1E0C80C00];
  v8 = *a1;
  v9[0] = v10;
  v9[1] = (void *)0x2000000000;
  if (*((_DWORD *)a1 + 4))
    sub_1C4AC3E94((uint64_t)v9, (uint64_t)(a1 + 1));
  v11 = v16;
  v4 = (const void *)a1[132];
  v5 = (const void *)a1[131];
  if (v4 == v5)
  {
    v12 = v16;
    v6 = *((unsigned int *)a1 + 267);
    if ((_DWORD)v6)
      memmove(v16, v4, 8 * v6);
  }
  else
  {
    v12 = (void *)a1[132];
    a1[132] = (uint64_t)v5;
    LODWORD(v6) = *((_DWORD *)a1 + 267);
  }
  v13 = *((_DWORD *)a1 + 266);
  v14 = v6;
  v15 = *((_DWORD *)a1 + 268);
  a1[133] = 4;
  *((_DWORD *)a1 + 268) = 0;
  *(_QWORD *)((char *)v17 + 7) = *(uint64_t *)((char *)a1 + 1119);
  v17[0] = a1[139];
  *a1 = *a2;
  sub_1C4AC3E94((uint64_t)(a1 + 1), (uint64_t)(a2 + 1));
  if (a2 != a1)
    llvm::SmallPtrSetImplBase::MoveFrom((uint64_t)(a1 + 131), 4, (double *)a2 + 131);
  v7 = a2[139];
  *(uint64_t *)((char *)a1 + 1119) = *(uint64_t *)((char *)a2 + 1119);
  a1[139] = v7;
  *a2 = v8;
  sub_1C4AC3E94((uint64_t)(a2 + 1), (uint64_t)v9);
  if (&v8 != a2)
    llvm::SmallPtrSetImplBase::MoveFrom((uint64_t)(a2 + 131), 4, (double *)&v11);
  a2[139] = v17[0];
  *(uint64_t *)((char *)a2 + 1119) = *(_QWORD *)((char *)v17 + 7);
  if (v12 != v11)
    free(v12);
  if (v9[0] != v10)
    free(v9[0]);
}

void sub_1C55DFCEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;

  sub_1C55DEFE0(a1, a2, a3, a5);
  v10 = *(_DWORD *)(a4 + 1120);
  v11 = *(_DWORD *)(a3 + 1120);
  if ((*(_DWORD *)(*(_QWORD *)a5 + 40) & 0xFFFFFFFE) == 0x1C)
  {
    if (v10 <= v11)
      return;
  }
  else if (v10 >= v11)
  {
    return;
  }
  sub_1C55DFB24((uint64_t *)a3, (uint64_t *)a4);
  v12 = *(_DWORD *)(a3 + 1120);
  v13 = *(_DWORD *)(a2 + 1120);
  if ((*(_DWORD *)(*(_QWORD *)a5 + 40) & 0xFFFFFFFE) == 0x1C)
  {
    if (v12 <= v13)
      return;
  }
  else if (v12 >= v13)
  {
    return;
  }
  sub_1C55DFB24((uint64_t *)a2, (uint64_t *)a3);
  v14 = *(_DWORD *)(a2 + 1120);
  v15 = *(_DWORD *)(a1 + 1120);
  if ((*(_DWORD *)(*(_QWORD *)a5 + 40) & 0xFFFFFFFE) == 0x1C)
  {
    if (v14 <= v15)
      return;
LABEL_13:
    sub_1C55DFB24((uint64_t *)a1, (uint64_t *)a2);
    return;
  }
  if (v14 < v15)
    goto LABEL_13;
}

void sub_1C55DFDF0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  unint64_t v4;
  uint64_t *v5;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  BOOL v14;
  _BOOL4 v15;
  int v16;
  unsigned int v17;
  unsigned int v18;
  const void *v19;
  const void *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  _BOOL4 v29;
  int v30;
  unsigned int v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35[2];
  _BYTE v36[1024];
  _BYTE *v37;
  void *v38;
  int v39;
  int v40;
  int v41;
  _BYTE v42[32];
  _BYTE v43[15];
  uint64_t v44;

  v44 = *MEMORY[0x1E0C80C00];
  v4 = a3 - 2;
  if (a3 >= 2)
  {
    v5 = a4;
    v33 = v4 >> 1;
    if ((uint64_t)(v4 >> 1) >= 0x70913F8BCD29C245 * (((uint64_t)a4 - a1) >> 3))
    {
      v9 = (0xE1227F179A53848ALL * (((uint64_t)a4 - a1) >> 3)) | 1;
      v10 = a1 + 1128 * v9;
      v11 = *(_DWORD *)(*(_QWORD *)a2 + 40) & 0xFFFFFFFE;
      if ((uint64_t)(0xE1227F179A53848ALL * (((uint64_t)a4 - a1) >> 3) + 2) < a3)
      {
        v12 = *(_DWORD *)(a1 + 1128 * v9 + 1120);
        v13 = *(_DWORD *)(v10 + 2248);
        v14 = v12 >= v13;
        v15 = v12 > v13;
        v16 = !v14;
        if (v11 != 28)
          v15 = v16;
        v10 += 1128 * v15;
        if (v15)
          v9 = 0xE1227F179A53848ALL * (((uint64_t)a4 - a1) >> 3) + 2;
      }
      v17 = *(_DWORD *)(v10 + 1120);
      v18 = *((_DWORD *)a4 + 280);
      if (v11 == 28)
      {
        if (v17 > v18)
          return;
      }
      else if (v17 < v18)
      {
        return;
      }
      v34 = *a4;
      v35[0] = v36;
      v35[1] = (void *)0x2000000000;
      if (*((_DWORD *)a4 + 4))
        sub_1C4AC3E94((uint64_t)v35, (uint64_t)(a4 + 1));
      v37 = v42;
      v19 = (const void *)v5[132];
      v20 = (const void *)v5[131];
      if (v19 == v20)
      {
        v38 = v42;
        v21 = *((unsigned int *)v5 + 267);
        if ((_DWORD)v21)
          memmove(v42, v19, 8 * v21);
      }
      else
      {
        v38 = (void *)v5[132];
        v5[132] = (uint64_t)v20;
        LODWORD(v21) = *((_DWORD *)v5 + 267);
      }
      v39 = *((_DWORD *)v5 + 266);
      v40 = v21;
      v41 = *((_DWORD *)v5 + 268);
      v5[133] = 4;
      *((_DWORD *)v5 + 268) = 0;
      *(_QWORD *)&v43[7] = *(uint64_t *)((char *)v5 + 1119);
      *(_QWORD *)v43 = v5[139];
      while (1)
      {
        v22 = (uint64_t *)v10;
        v23 = v10 + 8;
        *v5 = *(_QWORD *)v10;
        sub_1C4AC3E94((uint64_t)(v5 + 1), v10 + 8);
        if ((uint64_t *)v10 != v5)
          llvm::SmallPtrSetImplBase::MoveFrom((uint64_t)(v5 + 131), 4, (double *)(v10 + 1048));
        v24 = *(_QWORD *)(v10 + 1112);
        *(uint64_t *)((char *)v5 + 1119) = *(_QWORD *)(v10 + 1119);
        v5[139] = v24;
        if (v33 < v9)
          break;
        v25 = (2 * v9) | 1;
        v10 = a1 + 1128 * v25;
        v26 = *(_DWORD *)(*(_QWORD *)a2 + 40) & 0xFFFFFFFE;
        if (2 * v9 + 2 >= a3)
        {
          v9 = (2 * v9) | 1;
        }
        else
        {
          v27 = *(_DWORD *)(a1 + 1128 * v25 + 1120);
          v28 = *(_DWORD *)(v10 + 2248);
          v14 = v27 >= v28;
          v29 = v27 > v28;
          v30 = !v14;
          if (v26 != 28)
            v29 = v30;
          v10 += 1128 * v29;
          if (v29)
            v9 = 2 * v9 + 2;
          else
            v9 = (2 * v9) | 1;
        }
        v31 = *(_DWORD *)(v10 + 1120);
        v5 = v22;
        if (v26 == 28)
        {
          if (v31 > *(_DWORD *)&v43[8])
            break;
        }
        else if (v31 < *(_DWORD *)&v43[8])
        {
          break;
        }
      }
      *v22 = v34;
      sub_1C4AC3E94(v23, (uint64_t)v35);
      if (&v34 != v22)
        llvm::SmallPtrSetImplBase::MoveFrom((uint64_t)(v22 + 131), 4, (double *)&v37);
      v32 = *(_QWORD *)v43;
      *(uint64_t *)((char *)v22 + 1119) = *(_QWORD *)&v43[7];
      v22[139] = v32;
      if (v38 != v37)
        free(v38);
      if (v35[0] != v36)
        free(v35[0]);
    }
  }
}

_QWORD *sub_1C55E0128(_QWORD *result, uint64_t a2, unsigned int *a3, uint64_t a4, uint64_t a5, llvm::UndefValue *a6)
{
  uint64_t v6;
  _WORD *v12;
  int v13;
  _QWORD *v14;
  uint64_t v15;
  _QWORD *v16;
  unsigned int v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t *v22;
  unint64_t v23;
  int32x2_t ****v24;
  int32x2_t *v25;
  unint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  int32x2_t *****v30;
  int32x2_t ****v31;
  int v32;
  int v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  llvm::Constant *v38;
  llvm::UndefValue *v39;
  int v40;
  uint64_t v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  _QWORD *v45;
  int v46;
  BOOL v47;
  unsigned int v48;
  int v49;
  uint64_t v50;
  int v51;
  unsigned int v52;
  _WORD *v53;
  _QWORD *v54;
  int v55;
  BOOL v56;
  unsigned int v57;
  _QWORD *v58;
  _QWORD *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t *v63;
  int32x2_t ****v64;

  v6 = result[1];
  if (v6)
  {
    v60 = a4 + 16;
    v61 = a5 + 8;
    do
    {
      v12 = *(_WORD **)(v6 + 24);
      v13 = *((unsigned __int8 *)v12 + 16);
      if (v13 == 77 || v13 == 5 && v12[9] == 49)
      {
        result = (_QWORD *)sub_1C55E0128(*(_QWORD *)(v6 + 24), a2, a3, a4, a5, a6);
      }
      else
      {
        v14 = *(_QWORD **)(*((_QWORD *)v12 + 5) + 56);
        v15 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)a2 + 24))(a2, v14);
        result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 592))(v15, 100);
        if (result != v14)
        {
          v62 = 4;
          v63 = 0;
          v64 = (int32x2_t ****)v12;
          if (v12 != (_WORD *)-8192 && v12 != (_WORD *)-4096 && v12)
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v62);
          v16 = (_QWORD *)sub_1C4EE497C(a3, (unint64_t)&v62, 1);
          v17 = a3[2];
          v18 = (unint64_t *)(*(_QWORD *)a3 + 24 * v17);
          *v18 = 4;
          v18[1] = 0;
          v19 = (unint64_t)(v18 + 1);
          v20 = v16[2];
          v18[2] = v20;
          if (v20 != -8192 && v20 != -4096)
          {
            if (v20)
            {
              v21 = *v16 & 0xFFFFFFFFFFFFFFF8;
              v18[1] = *(_QWORD *)v21;
              *(_QWORD *)v21 = v18;
              *v18 = v21 | 4;
              v22 = (uint64_t *)v18[1];
              if (v22)
                *v22 = *v22 & 7 | v19;
            }
          }
          a3[2] = v17 + 1;
          if (v64 != (int32x2_t ****)-8192 && v64 != (int32x2_t ****)-4096 && v64)
          {
            v23 = v62 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)(v62 & 0xFFFFFFFFFFFFFFF8) = v63;
            if (v63)
            {
              *v63 = *v63 & 7 | v23;
            }
            else
            {
              v24 = v64;
              v25 = ***v64;
              v26 = (unint64_t)v25[303];
              if (v26 <= v23)
              {
                v27 = v25[305].u32[0];
                if (v26 + 16 * v27 > v23)
                {
                  v28 = v27 - 1;
                  LODWORD(v29) = v28 & ((v64 >> 4) ^ (v64 >> 9));
                  v30 = (int32x2_t *****)(v26 + 16 * v29);
                  v31 = *v30;
                  if (v64 == *v30)
                  {
LABEL_28:
                    *v30 = (int32x2_t ****)-8192;
                    v25[304] = vadd_s32(v25[304], (int32x2_t)0x1FFFFFFFFLL);
                    v24 = v64;
                  }
                  else
                  {
                    v32 = 1;
                    while (v31 != (int32x2_t ****)-4096)
                    {
                      v33 = v29 + v32++;
                      v29 = v33 & v28;
                      v31 = *(int32x2_t *****)(v26 + 16 * v29);
                      if (v64 == v31)
                      {
                        v30 = (int32x2_t *****)(v26 + 16 * v29);
                        goto LABEL_28;
                      }
                    }
                  }
                  *((_BYTE *)v24 + 17) &= ~1u;
                }
              }
            }
          }
          v34 = *((_QWORD *)v12 + 1);
          if (v34)
          {
            v35 = *(_DWORD *)(a4 + 8);
            do
            {
              v36 = *(_QWORD *)(v34 + 24);
              if (v35 >= *(_DWORD *)(a4 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(a4, v60, v35 + 1, 8);
                v35 = *(_DWORD *)(a4 + 8);
              }
              *(_QWORD *)(*(_QWORD *)a4 + 8 * v35) = v36;
              v35 = *(_DWORD *)(a4 + 8) + 1;
              *(_DWORD *)(a4 + 8) = v35;
              v34 = *(_QWORD *)(v34 + 8);
            }
            while (v34);
          }
          v37 = v12 >> 4;
          if (!*(_QWORD *)(*(_QWORD *)v12 + 24))
          {
            v62 = (uint64_t)v12;
            if ((*(_BYTE *)a5 & 1) != 0)
            {
              v49 = 32;
              v50 = v61;
              goto LABEL_53;
            }
            v49 = *(_DWORD *)(a5 + 16);
            if (v49)
            {
              v50 = *(_QWORD *)(a5 + 8);
LABEL_53:
              v51 = v49 - 1;
              v52 = v51 & (v37 ^ (v12 >> 9));
              result = (_QWORD *)(v50 + 16 * v52);
              v53 = (_WORD *)*result;
              if (v12 != (_WORD *)*result)
              {
                v54 = 0;
                v55 = 1;
                while (v53 != (_WORD *)-4096)
                {
                  if (v54)
                    v56 = 0;
                  else
                    v56 = v53 == (_WORD *)-8192;
                  if (v56)
                    v54 = result;
                  v57 = v52 + v55++;
                  v52 = v57 & v51;
                  result = (_QWORD *)(v50 + 16 * v52);
                  v53 = (_WORD *)*result;
                  if (v12 == (_WORD *)*result)
                    goto LABEL_72;
                }
                if (v54)
                  v59 = v54;
                else
                  v59 = result;
LABEL_71:
                result = sub_1C55E07C8(a5, (uint64_t)&v62, &v62, v59);
                *result = v62;
                result[1] = 0;
              }
LABEL_72:
              result[1] = a6;
              goto LABEL_73;
            }
            v59 = 0;
            goto LABEL_71;
          }
          v38 = (llvm::Constant *)llvm::PointerType::get(**(llvm::PointerType ***)(*(_QWORD *)v12 + 16), (llvm::Type *)0x40);
          v39 = a6;
          if (*(llvm::Constant **)a6 != v38)
            v39 = sub_1C537D3B8((llvm *)0x31, (uint64_t)a6, v38, 0);
          v62 = (uint64_t)v12;
          if ((*(_BYTE *)a5 & 1) != 0)
          {
            v40 = 32;
            v41 = v61;
            goto LABEL_41;
          }
          v40 = *(_DWORD *)(a5 + 16);
          if (v40)
          {
            v41 = *(_QWORD *)(a5 + 8);
LABEL_41:
            v42 = v40 - 1;
            v43 = v42 & (v37 ^ (v12 >> 9));
            result = (_QWORD *)(v41 + 16 * v43);
            v44 = *result;
            if (v12 != (_WORD *)*result)
            {
              v45 = 0;
              v46 = 1;
              while (v44 != -4096)
              {
                if (v45)
                  v47 = 0;
                else
                  v47 = v44 == -8192;
                if (v47)
                  v45 = result;
                v48 = v43 + v46++;
                v43 = v48 & v42;
                result = (_QWORD *)(v41 + 16 * v43);
                v44 = *result;
                if (v12 == (_WORD *)*result)
                  goto LABEL_67;
              }
              if (v45)
                v58 = v45;
              else
                v58 = result;
LABEL_66:
              result = sub_1C55E07C8(a5, (uint64_t)&v62, &v62, v58);
              *result = v62;
              result[1] = 0;
            }
LABEL_67:
            result[1] = v39;
            goto LABEL_73;
          }
          v58 = 0;
          goto LABEL_66;
        }
      }
LABEL_73:
      v6 = *(_QWORD *)(v6 + 8);
    }
    while (v6);
  }
  return result;
}

uint64_t sub_1C55E05AC(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 32;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_7;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_7;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_7:
  *a3 = v7;
  return result;
}

uint64_t sub_1C55E0658(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 520);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_10;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[2 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_10:
  while (a2 != a3)
  {
    v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v12 = 0;
      result = sub_1C55E05AC((uint64_t)v5, v10, &v12);
      v11 = v12;
      *v12 = *a2;
      v11[1] = a2[1];
      *v5 += 2;
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_1C55E0718(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 32;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_15;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*a2 == *v7)
  {
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v9)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v9 = v7;
      v13 = v6 + v10++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v13 & v5));
      v8 = *v7;
      if (*a2 == *v7)
        goto LABEL_15;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_15:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C55E07C8(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  _QWORD *v20;

  v6 = *(_DWORD *)a1;
  v7 = *(_DWORD *)a1 >> 1;
  if ((*(_DWORD *)a1 & 1) != 0)
    v8 = 32;
  else
    v8 = *(_DWORD *)(a1 + 16);
  if (4 * v7 + 4 >= 3 * v8)
  {
    sub_1C55E093C(a1, 2 * v8);
    v11 = a1 + 8;
    v6 = *(_DWORD *)a1;
    if ((*(_DWORD *)a1 & 1) != 0)
    {
      v12 = 32;
    }
    else
    {
      v12 = *(_DWORD *)(a1 + 16);
      if (!v12)
      {
        v9 = 0;
        a4 = 0;
        goto LABEL_7;
      }
      v11 = *(_QWORD *)(a1 + 8);
    }
    v9 = *(_DWORD *)a1 & 1;
    v13 = v12 - 1;
    v14 = ((*a3 >> 4) ^ (*a3 >> 9)) & v13;
    a4 = (_QWORD *)(v11 + 16 * v14);
    v15 = *a4;
    if (*a3 != *a4)
    {
      v16 = 0;
      v17 = 1;
      while (v15 != -4096)
      {
        if (v16)
          v18 = 0;
        else
          v18 = v15 == -8192;
        if (v18)
          v16 = a4;
        v19 = v14 + v17++;
        v14 = v19 & v13;
        a4 = (_QWORD *)(v11 + 16 * v14);
        v15 = *a4;
        if (*a3 == *a4)
          goto LABEL_7;
      }
      if (v16)
        a4 = v16;
    }
  }
  else
  {
    if (v8 + ~v7 - *(_DWORD *)(a1 + 4) <= v8 >> 3)
    {
      sub_1C55E093C(a1, v8);
      v20 = 0;
      sub_1C55E0718(a1, a3, &v20);
      a4 = v20;
      v6 = *(_DWORD *)a1;
    }
    v9 = v6 & 1;
  }
LABEL_7:
  *(_DWORD *)a1 = (v6 & 0xFFFFFFFE | v9) + 2;
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 4);
  return a4;
}

int *sub_1C55E093C(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[65];

  v14[64] = *MEMORY[0x1E0C80C00];
  if (a2 >= 0x21)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 0x20)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C55E0AC0((int *)a1, v6, &v6[2 * v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_QWORD *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *v9 = v10;
      v9[1] = *(_QWORD *)(a1 + v8 + 16);
      v9 += 2;
    }
    v8 += 16;
  }
  while (v8 != 512);
  if (a2 > 0x20)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C55E0AC0((int *)a1, v14, v9);
}

int *sub_1C55E0AC0(int *result, uint64_t *a2, uint64_t *a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  int *v9;
  int v10;
  unsigned int v11;
  int *v12;
  uint64_t v13;
  int *v14;
  int v15;
  BOOL v16;
  unsigned int v17;

  v3 = *result;
  *result &= 1u;
  result[1] = 0;
  if ((v3 & 1) != 0)
  {
    v6 = result + 130;
    v5 = result + 2;
  }
  else
  {
    v4 = result[4];
    if (!(_DWORD)v4)
      goto LABEL_5;
    v5 = (_QWORD *)*((_QWORD *)result + 1);
    v6 = &v5[2 * v4];
  }
  do
  {
    *v5 = -4096;
    v5 += 2;
  }
  while (v5 != v6);
LABEL_5:
  while (a2 != a3)
  {
    v7 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      if ((*(_BYTE *)result & 1) != 0)
      {
        v8 = 32;
        v9 = result + 2;
      }
      else
      {
        v9 = (int *)*((_QWORD *)result + 1);
        v8 = result[4];
      }
      v10 = v8 - 1;
      v11 = (v8 - 1) & ((v7 >> 4) ^ (v7 >> 9));
      v12 = &v9[4 * v11];
      v13 = *(_QWORD *)v12;
      if (v7 != *(_QWORD *)v12)
      {
        v14 = 0;
        v15 = 1;
        while (v13 != -4096)
        {
          if (v14)
            v16 = 0;
          else
            v16 = v13 == -8192;
          if (v16)
            v14 = v12;
          v17 = v11 + v15++;
          v11 = v17 & v10;
          v12 = &v9[4 * (v17 & v10)];
          v13 = *(_QWORD *)v12;
          if (v7 == *(_QWORD *)v12)
            goto LABEL_21;
        }
        if (v14)
          v12 = v14;
      }
LABEL_21:
      *(_QWORD *)v12 = v7;
      *((_QWORD *)v12 + 1) = a2[1];
      *result += 2;
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_1C55E0BC8()
{
  __n128 v1;
  int v2;
  char v3;
  char *v4;

  v3 = 0;
  v4 = &v3;
  v2 = 1;
  v1.n128_u64[0] = (unint64_t)"Disable the alloca promoter step";
  v1.n128_u64[1] = 32;
  sub_1C498EDF8((llvm::cl::Option *)&unk_1ED8077D8, "disable-alloca-promoter", &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED8077D8, &dword_1C475E000);
}

uint64_t sub_1C55E0C48(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "GPU PIC Lowering";
  *(_QWORD *)(v2 + 8) = 16;
  *(_QWORD *)(v2 + 16) = "pic-lowering";
  *(_QWORD *)(v2 + 24) = 12;
  *(_QWORD *)(v2 + 32) = &unk_1ED8078A8;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C55E0DC4;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C55E0CD8(uint64_t a1)
{
  uint64_t i;
  unint64_t v4;
  unint64_t v6;
  _QWORD *v7;
  _QWORD v8[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED8078A8;
  *(_DWORD *)(a1 + 24) = 4;
  *(_QWORD *)a1 = off_1E8170F38;
  *(_QWORD *)(a1 + 32) = 1;
  for (i = 40; i != 168; i += 16)
    *(_QWORD *)(a1 + i) = -4096;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v6 = qword_1ED830BC0[0];
  v4 = atomic_load(&qword_1ED8078B0);
  if (v4 != -1)
  {
    v8[0] = sub_1C55E0C48;
    v8[1] = &v6;
    v7 = v8;
    std::__call_once(&qword_1ED8078B0, &v7, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C55E0DC4()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C55E0CD8(v0);
}

void sub_1C55E0DEC(llvm::Pass *this)
{
  *(_QWORD *)this = off_1E8170F38;
  if ((*((_BYTE *)this + 32) & 1) == 0)
    MEMORY[0x1CAA32FB4](*((_QWORD *)this + 5), 8);
  llvm::Pass::~Pass(this);
}

void sub_1C55E0E2C(llvm::Pass *this)
{
  *(_QWORD *)this = off_1E8170F38;
  if ((*((_BYTE *)this + 32) & 1) == 0)
    MEMORY[0x1CAA32FB4](*((_QWORD *)this + 5), 8);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C55E0E80(int a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
}

BOOL sub_1C55E0E88(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t ***v9;
  llvm::MDNode *v10;
  int MDKindID;
  uint64_t i;
  llvm::Module *v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  int v29;
  uint64_t j;
  uint64_t v31;
  uint64_t *v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  llvm::GetElementPtrInst *v35;
  uint64_t v36;
  unsigned __int8 *v37;
  uint64_t ***v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  unsigned __int8 *v44;
  unsigned __int8 *v45;
  unsigned __int8 *v46;
  uint64_t v47;
  unsigned __int8 *v48;
  llvm::GetElementPtrInst *v49;
  uint64_t ***v50;
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  _QWORD *v54;
  _QWORD *k;
  uint64_t v56;
  int v57;
  _QWORD *v58;
  uint64_t ***v59;
  int v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  int v64;
  unsigned int v65;
  uint64_t ****v66;
  uint64_t ***v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  int v72;
  BOOL v73;
  uint64_t Metadata;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  _QWORD *v79;
  int v80;
  uint64_t ****v82;
  int v83;
  BOOL v84;
  unsigned int v85;
  uint64_t ****v86;
  uint64_t ***v87;
  unsigned int v88;
  _DWORD *v89;
  unint64_t v91;
  uint64_t RawDataValues;
  unint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t inserted;
  int v97;
  uint64_t v98;
  uint64_t v99;
  _QWORD *v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  _QWORD *v104;
  unsigned int *v105;
  uint64_t v106;
  unsigned int *v107;
  unint64_t v108;
  size_t v109;
  unsigned __int8 *v110;
  size_t v111;
  size_t v112;
  void *Impl;
  uint64_t v114;
  uint64_t v115;
  unsigned __int8 *v116;
  unsigned __int8 **v117;
  char *v118;
  char v119;
  unsigned int v120;
  uint64_t v121;
  _QWORD *v122;
  llvm::Module *v123;
  uint64_t v124;
  _QWORD v125[2];
  int v126;
  void *__p;
  uint64_t *v128;
  uint64_t v129;
  char v130[32];
  __int16 v131;
  unsigned __int8 *v132[4];
  __int16 v133;
  void *v134[2];
  _BYTE v135[32];
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  void **v139;
  void **v140;
  uint64_t v141;
  int v142;
  __int16 v143;
  char v144;
  uint64_t v145;
  uint64_t v146;
  void *v147;
  void *v148;
  void *v149;
  uint64_t v150;
  _DWORD v151[8];
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  void **v155;
  void **v156;
  uint64_t v157;
  int v158;
  __int16 v159;
  char v160;
  uint64_t v161;
  uint64_t v162;
  void *v163;
  void *v164;
  uint64_t *v165;
  uint64_t v166;
  _QWORD v167[6];

  v167[4] = *MEMORY[0x1E0C80C00];
  v4 = sub_1C4FB7E80(*(uint64_t **)(a2 + 112), "air.dyld_lib_table", 0x12uLL);
  if (!v4 || (v5 = v4, *(_BYTE *)(v4 + 16) != 3))
    v5 = 0;
  v124 = a1;
  v6 = sub_1C4FB7E80(*(uint64_t **)(a2 + 112), "air.dyld_str_table", 0x12uLL);
  if (!v6 || *(_BYTE *)(v6 + 16) != 3)
  {
    if (!v5)
      goto LABEL_5;
LABEL_175:
    v118 = "air.dyld_lib_table and air.dyld_str_table must be present together.";
    goto LABEL_176;
  }
  if (!v5)
    goto LABEL_175;
  RawDataValues = llvm::ConstantDataSequential::getRawDataValues(*(llvm::ConstantDataSequential **)(v6 - 32));
  if (v91 >= v91 - 1)
    v93 = v91 - 1;
  else
    v93 = v91;
  v94 = *(_QWORD *)(v5 - 32);
  v95 = *(uint64_t **)a2;
  inserted = llvm::Module::getOrInsertNamedMetadata(a2, "llvm.dyld.libs", 0xEuLL);
  v97 = *(_DWORD *)(v94 + 20);
  if ((v97 & 0x40000000) != 0)
  {
    v99 = *(_QWORD *)(v94 - 8);
    v98 = v97 & 0x7FFFFFF;
  }
  else
  {
    v98 = v97 & 0x7FFFFFF;
    v99 = v94 - 32 * v98;
  }
  if (v98)
  {
    v103 = 32 * v98;
    do
    {
      v104 = (_QWORD *)(*(_QWORD *)v99 - 32 * (*(_DWORD *)(*(_QWORD *)v99 + 20) & 0x7FFFFFF));
      v105 = (unsigned int *)(*v104 + 24);
      if (*(_DWORD *)(*v104 + 32) >= 0x41u)
        v105 = *(unsigned int **)v105;
      v106 = v104[4];
      v107 = (unsigned int *)(v106 + 24);
      if (*(_DWORD *)(v106 + 32) >= 0x41u)
        v107 = *(unsigned int **)v107;
      v108 = *v105;
      v109 = *v107;
      if (v93 < v108)
        v108 = v93;
      v110 = (unsigned __int8 *)(RawDataValues + v108);
      v111 = v93 - v108;
      if (v111 >= v109)
        v112 = v109;
      else
        v112 = v111;
      v134[0] = llvm::MDString::get(v95, v110, v112);
      Impl = (void *)llvm::MDTuple::getImpl(v95, v134, 1, 0, 1);
      v149 = Impl;
      v114 = *(_QWORD *)(inserted + 48);
      v115 = *(unsigned int *)(v114 + 8);
      if (v115 >= *(_DWORD *)(v114 + 12))
      {
        sub_1C5419FD8(*(_QWORD *)(inserted + 48), (unsigned __int8 **)&v149);
      }
      else
      {
        v116 = (unsigned __int8 *)Impl;
        v117 = (unsigned __int8 **)(*(_QWORD *)v114 + 8 * v115);
        *v117 = v116;
        if (v116)
        {
          llvm::MetadataTracking::track((uint64_t)v117, v116, 2);
          LODWORD(v115) = *(_DWORD *)(v114 + 8);
        }
        *(_DWORD *)(v114 + 8) = v115 + 1;
      }
      v99 += 32;
      v103 -= 32;
    }
    while (v103);
  }
LABEL_5:
  v125[0] = 0;
  v125[1] = 0;
  v126 = 0;
  v128 = 0;
  v129 = 0;
  __p = 0;
  sub_1C5E9D34C(a2, (uint64_t)v125);
  v123 = (llvm::Module *)a2;
  sub_1C5E9D674(a2, (uint64_t)v125, 0);
  v7 = (uint64_t *)__p;
  v8 = v128;
  if (__p != v128)
  {
    do
    {
      v9 = (uint64_t ***)*v7;
      if (!llvm::Value::getMetadata(*v7, "agx.bind", 8uLL))
      {
        v10 = (llvm::MDNode *)v7[1];
        MDKindID = llvm::LLVMContext::getMDKindID(**v9, "agx.bind", 8uLL);
        llvm::Value::addMetadata((llvm::Value *)v9, MDKindID, v10);
      }
      v7 += 2;
    }
    while (v7 != v8);
  }
  v165 = v167;
  v166 = 0x400000000;
  v149 = (void *)1;
  for (i = 8; i != 232; i += 56)
    *(void **)((char *)&v149 + i) = (void *)-4096;
  v13 = v123;
  sub_1C5EAD984((uint64_t)v123, (uint64_t)&v165, &v149);
  v14 = v149;
  v15 = v124;
  if (v149 >= 2)
  {
    v16 = *(_QWORD **)v123;
    v134[0] = v135;
    v134[1] = (void *)0x200000000;
    v138 = v16;
    v139 = &v147;
    v140 = &v148;
    v141 = 0;
    v142 = 0;
    v143 = 512;
    v144 = 7;
    v136 = 0;
    v137 = 0;
    v145 = 0;
    v146 = 0;
    v147 = &unk_1E8167888;
    v148 = &unk_1E8167A08;
    if ((_DWORD)v166)
    {
      v17 = v165;
      v18 = (char *)&v165[v166];
      while (1)
      {
        v19 = *v17;
        v20 = sub_1C55DAEFC((uint64_t)&v149, *v17);
        if ((v149 & 1) != 0)
          v21 = &v150;
        else
          v21 = (uint64_t *)v150;
        v22 = v151[0];
        if ((v149 & 1) != 0)
          v22 = 4;
        if (&v21[7 * v22] == (uint64_t *)v20)
          goto LABEL_20;
        v132[0] = (unsigned __int8 *)v19;
        v23 = sub_1C627E1B0((uint64_t)v125, (uint64_t *)v132);
        v24 = (uint64_t *)(*(_QWORD *)(v23 + 8) - 8 * *(unsigned int *)(*(_QWORD *)(v23 + 8) + 8));
        v26 = *v24;
        v25 = v24[1];
        if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v26 + 128) + 24) + 8) == 17)
        {
          if (*(_BYTE *)v25 == 1)
          {
            v27 = *(_QWORD *)(v25 + 128);
            if (*(_BYTE *)(v27 + 16) == 16)
              goto LABEL_27;
          }
          v25 = *(_QWORD *)(v25 - 8 * *(unsigned int *)(v25 + 8));
        }
        v27 = *(_QWORD *)(v25 + 128);
LABEL_27:
        v28 = (_QWORD *)(v27 + 24);
        if (*(_DWORD *)(v27 + 32) >= 0x41u)
          v28 = (_QWORD *)*v28;
        v29 = *(_DWORD *)v28;
        if (v29 <= 97)
        {
          if (v29 != 43 && v29 != 93)
          {
LABEL_177:
            v118 = "Incorrect binding type";
LABEL_176:
            llvm::report_fatal_error((llvm *)v118, (const char *)1);
          }
        }
        else if (v29 != 98 && v29 != 113)
        {
          if (v29 != 139)
            goto LABEL_177;
          for (j = *(_QWORD *)(v19 + 8); j; v13 = v123)
          {
            v31 = *(_QWORD *)(j + 24);
            j = *(_QWORD *)(j + 8);
            v32 = *(uint64_t **)(v31 - 32 * (*(_DWORD *)(v31 + 20) & 0x7FFFFFF));
            v136 = *(_QWORD *)(v31 + 40);
            v137 = v31 + 24;
            v33 = *(unsigned __int8 **)(v31 + 48);
            v132[0] = v33;
            if (v33)
            {
              llvm::MetadataTracking::track((uint64_t)v132, v33, 2);
              v34 = v132[0];
            }
            else
            {
              v34 = 0;
            }
            sub_1C4774EF4((uint64_t)v134, 0, (uint64_t)v34);
            if (v132[0])
              llvm::MetadataTracking::untrack((uint64_t)v132, v132[0]);
            v35 = (llvm::GetElementPtrInst *)(*v138 + 1912);
            v36 = *v138 + 1960;
            v133 = 257;
            v37 = sub_1C4773E38((uint64_t *)v134, 47, (unsigned __int8 *)v19, v36, (uint64_t)v132);
            v131 = 257;
            v38 = sub_1C4867B70((uint64_t *)v134, v35, v32, (uint64_t)v37, (uint64_t)v130);
            llvm::Value::doRAUW((llvm::ValueAsMetadata *)v31, (llvm::Value *)v38, (llvm::Value *)1);
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v31 + 40) + 40, (uint64_t ***)v31);
            v39 = *(_QWORD *)(v31 + 24);
            v40 = *(_QWORD **)(v31 + 32);
            *v40 = v39;
            *(_QWORD *)(v39 + 8) = v40;
            *(_QWORD *)(v31 + 24) = 0;
            *(_QWORD *)(v31 + 32) = 0;
            llvm::Value::deleteValue((llvm::Value *)v31);
          }
          goto LABEL_20;
        }
        v41 = *(_QWORD *)(v19 + 8);
        while (v41)
        {
          v42 = *(_QWORD *)(v41 + 24);
          v41 = *(_QWORD *)(v41 + 8);
          v43 = *(uint64_t **)(v42 - 32 * (*(_DWORD *)(v42 + 20) & 0x7FFFFFF));
          v136 = *(_QWORD *)(v42 + 40);
          v137 = v42 + 24;
          v44 = *(unsigned __int8 **)(v42 + 48);
          v132[0] = v44;
          if (v44)
          {
            llvm::MetadataTracking::track((uint64_t)v132, v44, 2);
            v45 = v132[0];
          }
          else
          {
            v45 = 0;
          }
          sub_1C4774EF4((uint64_t)v134, 0, (uint64_t)v45);
          if (v132[0])
            llvm::MetadataTracking::untrack((uint64_t)v132, v132[0]);
          if (llvm::Module::getPICLevel(v13))
          {
            v46 = sub_1C55E19FC(v124, v42, v19);
            v47 = *v138 + 1960;
            v133 = 257;
          }
          else
          {
            v47 = *v138 + 1960;
            v133 = 257;
            v46 = (unsigned __int8 *)v19;
          }
          v48 = sub_1C4773E38((uint64_t *)v134, 47, v46, v47, (uint64_t)v132);
          v49 = (llvm::GetElementPtrInst *)(*v138 + 1912);
          v133 = 257;
          v50 = sub_1C4867B70((uint64_t *)v134, v49, v43, (uint64_t)v48, (uint64_t)v132);
          llvm::Value::doRAUW((llvm::ValueAsMetadata *)v42, (llvm::Value *)v50, (llvm::Value *)1);
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v42 + 40) + 40, (uint64_t ***)v42);
          v51 = *(_QWORD *)(v42 + 24);
          v52 = *(_QWORD **)(v42 + 32);
          *v52 = v51;
          *(_QWORD *)(v51 + 8) = v52;
          *(_QWORD *)(v42 + 24) = 0;
          *(_QWORD *)(v42 + 32) = 0;
          llvm::Value::deleteValue((llvm::Value *)v42);
        }
LABEL_20:
        if (++v17 == (uint64_t *)v18)
        {
          v15 = v124;
          if (v134[0] != v135)
            free(v134[0]);
          break;
        }
      }
    }
  }
  sub_1C55DB034((uint64_t)&v149);
  if (v165 != v167)
    free(v165);
  if (llvm::Module::getPICLevel(v13))
  {
    v53 = *(_QWORD *)v13;
    v149 = v151;
    v150 = 0x200000000;
    v154 = v53;
    v155 = &v163;
    v156 = &v164;
    v157 = 0;
    v158 = 0;
    v159 = 512;
    v160 = 7;
    v152 = 0;
    v153 = 0;
    v161 = 0;
    v162 = 0;
    v163 = &unk_1E8167888;
    v164 = &unk_1E8167A08;
    v54 = (_QWORD *)((char *)v13 + 24);
    for (k = (_QWORD *)*((_QWORD *)v13 + 4); k != v54; k = (_QWORD *)k[1])
    {
      if (k)
        v56 = (uint64_t)(k - 7);
      else
        v56 = 0;
      v57 = *(_DWORD *)(v56 + 32);
      if ((v57 & 0xF) == 1)
        goto LABEL_65;
      if (k && *(_BYTE *)(v56 + 16) == 3)
      {
        if ((*(_DWORD *)(v56 + 20) & 0x7FFFFFF) != 0)
          continue;
LABEL_65:
        if ((v57 & 0x2000) == 0)
          sub_1C55E20E8(v124, v56);
        continue;
      }
      if (!*(_BYTE *)(v56 + 16) && (v57 & 0x800000) == 0 && *(_QWORD *)(v56 + 72) == v56 + 72)
        goto LABEL_65;
    }
    v15 = v124;
    v58 = (_QWORD *)*((_QWORD *)v123 + 2);
    if (v58 != (_QWORD *)((char *)v123 + 8))
    {
      while (1)
      {
        if (v58)
          v59 = (uint64_t ***)(v58 - 7);
        else
          v59 = 0;
        v60 = *((_DWORD *)v59 + 8);
        if ((v60 & 0x1C00) != 0)
          goto LABEL_81;
        if (((_DWORD)v59[4] & 0xF) != 1)
        {
          if (v58 && *((_BYTE *)v59 + 16) == 3)
          {
            if ((*((_DWORD *)v59 + 5) & 0x7FFFFFF) != 0)
              goto LABEL_82;
          }
          else if (*((_BYTE *)v59 + 16) || (v60 & 0x800000) != 0 || v59[9] != (uint64_t **)(v59 + 9))
          {
            goto LABEL_82;
          }
        }
        if ((v60 & 0x400000) != 0)
          break;
LABEL_93:
        v72 = *((_DWORD *)*v59 + 2) >> 8;
        if (v72)
          v73 = v72 == 2;
        else
          v73 = 1;
        if (!v73)
        {
          if (v72 != 64)
            goto LABEL_82;
          if (!v58)
            goto LABEL_82;
          if (*((_BYTE *)v59 + 16) != 3)
            goto LABEL_82;
          Metadata = llvm::Value::getMetadata((uint64_t)v59, "agx.bind", 8uLL);
          if (!Metadata)
            goto LABEL_82;
          v75 = (uint64_t *)(Metadata - 8 * *(unsigned int *)(Metadata + 8));
          v77 = *v75;
          v76 = v75[1];
          if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v77 + 128) + 24) + 8) == 17)
          {
            if (*(_BYTE *)v76 != 1 || (v78 = *(_QWORD *)(v76 + 128), *(_BYTE *)(v78 + 16) != 16))
            {
              v76 = *(_QWORD *)(v76 - 8 * *(unsigned int *)(v76 + 8));
              goto LABEL_105;
            }
          }
          else
          {
LABEL_105:
            v78 = *(_QWORD *)(v76 + 128);
          }
          v79 = (_QWORD *)(v78 + 24);
          if (*(_DWORD *)(v78 + 32) >= 0x41u)
            v79 = (_QWORD *)*v79;
          v80 = *(_DWORD *)v79;
          if (v80 != 114 && v80 != 18)
            goto LABEL_82;
        }
LABEL_81:
        sub_1C55E20E8(v124, (uint64_t)v59);
LABEL_82:
        v58 = (_QWORD *)v58[1];
        if (v58 == (_QWORD *)((char *)v123 + 8))
          goto LABEL_135;
      }
      v61 = ***v59;
      v134[0] = v59;
      v62 = *(_DWORD *)(v61 + 2520);
      if (v62)
      {
        v63 = *(_QWORD *)(v61 + 2504);
        v64 = v62 - 1;
        v65 = v64 & ((v59 >> 4) ^ (v59 >> 9));
        v66 = (uint64_t ****)(v63 + 24 * v65);
        v67 = *v66;
        if (*v66 == v59)
        {
LABEL_88:
          if (v66[2] == (uint64_t ***)15)
          {
            v68 = (uint64_t *)v66[1];
            v69 = *v68;
            v70 = *(uint64_t *)((char *)v68 + 7);
            if (v69 == 0x625F6C61626F6C67 && v70 == 0x73676E69646E6962)
              goto LABEL_82;
          }
          goto LABEL_93;
        }
        v82 = 0;
        v83 = 1;
        while (v67 != (uint64_t ***)-4096)
        {
          if (v82)
            v84 = 0;
          else
            v84 = v67 == (uint64_t ***)-8192;
          if (v84)
            v82 = v66;
          v85 = v65 + v83++;
          v65 = v85 & v64;
          v66 = (uint64_t ****)(v63 + 24 * v65);
          v67 = *v66;
          if (*v66 == v59)
            goto LABEL_88;
        }
        if (v82)
          v86 = v82;
        else
          v86 = v66;
      }
      else
      {
        v86 = 0;
      }
      v66 = (uint64_t ****)sub_1C53D65B8(v61 + 2504, (uint64_t)v134, (uint64_t *)v134, v86);
      v87 = (uint64_t ***)v134[0];
      v66[1] = 0;
      v66[2] = 0;
      *v66 = v87;
      goto LABEL_88;
    }
LABEL_135:
    if (v149 != v151)
      free(v149);
  }
  v89 = (_DWORD *)(v15 + 32);
  v88 = *(_DWORD *)(v15 + 32);
  if (v88 > 1 || *(_DWORD *)(v15 + 36))
  {
    if ((v88 & 1) != 0)
    {
      v100 = (_QWORD *)(v15 + 40);
      v101 = (_QWORD *)(v15 + 168);
    }
    else
    {
      v102 = *(unsigned int *)(v15 + 48);
      if (((2 * v88) & 0xFFFFFFFC) < v102 && v102 >= 0x41)
      {
        if (v88 < 2)
        {
          v120 = 0;
        }
        else
        {
          v119 = __clz((v88 >> 1) - 1);
          if ((v119 & 0x3E) == 0x1C)
            v120 = 64;
          else
            v120 = 1 << (33 - v119);
          if (v120 == (_DWORD)v102)
          {
            *(_QWORD *)(v124 + 32) = 0;
            v121 = 16 * v102;
            v122 = *(_QWORD **)(v124 + 40);
            do
            {
              *v122 = -4096;
              v122 += 2;
              v121 -= 16;
            }
            while (v121);
            goto LABEL_139;
          }
        }
        MEMORY[0x1CAA32FB4](*(_QWORD *)(v124 + 40), 8);
        sub_1C483D59C((_QWORD *)(v15 + 32), v120);
        goto LABEL_139;
      }
      if (!(_DWORD)v102)
      {
        v15 = v124;
LABEL_155:
        *(_DWORD *)(v15 + 32) = v102;
        *(_DWORD *)(v15 + 36) = 0;
        goto LABEL_139;
      }
      v15 = v124;
      v100 = *(_QWORD **)(v124 + 40);
      v101 = &v100[2 * v102];
    }
    do
    {
      *v100 = -4096;
      v100 += 2;
    }
    while (v100 != v101);
    LODWORD(v102) = *v89 & 1;
    goto LABEL_155;
  }
LABEL_139:
  if (__p)
  {
    v128 = (uint64_t *)__p;
    operator delete(__p);
  }
  MEMORY[0x1CAA32FB4](v125[0], 8);
  return v14 > 1;
}

unsigned __int8 *sub_1C55E19FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  llvm::Value *v8;
  uint64_t v9;
  uint64_t v10;
  unsigned __int8 *v11;
  unsigned __int8 *v12;
  uint64_t Declaration;
  uint64_t v14;
  llvm::BasicBlock *v15;
  uint64_t **v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  char v21;
  char *v22;
  char *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  uint64_t **v29;
  unsigned __int8 *v30;
  uint64_t v31;
  unsigned __int8 *v32;
  char *v34;
  char *v35;
  unsigned __int8 **v36;
  int v37;
  unsigned __int8 *v38;
  unsigned __int8 *v39;
  unsigned __int8 *v40;
  uint64_t v41;
  unsigned __int8 *v42;
  uint64_t v43[4];
  __int16 v44;
  void *v45;
  unsigned int v46;
  uint64_t v47;
  llvm::BasicBlock *v48;
  char *FirstNonPHIOrDbgOrAlloca;
  uint64_t v50;
  uint64_t v51;
  unsigned __int8 *v52[4];
  __int16 v53;
  uint64_t v54;

  v54 = *MEMORY[0x1E0C80C00];
  v5 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 56);
  v41 = v5;
  v6 = *(_QWORD *)(v5 + 40);
  v7 = (_DWORD *)(a1 + 32);
  v8 = (llvm::Value *)sub_1C55E1DE0((_DWORD *)(a1 + 32), &v41)[1];
  sub_1C4773D54((uint64_t)&v45, a2, 0, 0, 0);
  v9 = sub_1C4FB7E80(*(uint64_t **)(v6 + 112), "agc.get_dylib_base", 0x12uLL);
  v10 = 0;
  if (v9)
  {
    if (*(_BYTE *)(v9 + 16))
      v10 = 0;
    else
      v10 = v9;
  }
  v11 = (unsigned __int8 *)llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)v50 + 1912), (llvm::Type *)(*(_DWORD *)(*(_QWORD *)a3 + 8) >> 8));
  v12 = *(unsigned __int8 **)a3;
  v52[0] = v11;
  v52[1] = v12;
  Declaration = llvm::Intrinsic::getDeclaration((uint64_t *)v6, 1276, (uint64_t *)v52, 2);
  if (v8)
    goto LABEL_16;
  v14 = *(_QWORD *)(v5 + 80);
  if (v14)
    v15 = (llvm::BasicBlock *)(v14 - 24);
  else
    v15 = 0;
  v48 = v15;
  FirstNonPHIOrDbgOrAlloca = llvm::BasicBlock::getFirstNonPHIOrDbgOrAlloca(v15);
  if (v10)
  {
    v16 = *(uint64_t ***)(v10 + 24);
    v53 = 257;
    v8 = (llvm::Value *)sub_1C4774778((uint64_t *)&v45, v16, v10, 0, 0, (uint64_t)v52, 0);
    goto LABEL_13;
  }
  v17 = sub_1C4FB7E80(*(uint64_t **)(v6 + 112), "agc.dylib_base", 0xEuLL);
  if (!v17 || (v18 = v17, *(_BYTE *)(v17 + 16) != 3) || (*(_DWORD *)(v17 + 32) & 0xFu) - 7 <= 1)
    v18 = 0;
  v19 = *(_QWORD *)(v18 + 24);
  v44 = 257;
  llvm::DataLayout::getAlignment(*(_QWORD *)(*((_QWORD *)v48 + 7) + 40) + 272, v19);
  v21 = v20;
  v22 = (char *)operator new(0x60uLL);
  v23 = v22;
  v8 = (llvm::Value *)(v22 + 32);
  *((_QWORD *)v22 + 1) = 0;
  *((_QWORD *)v22 + 2) = 0;
  *((_QWORD *)v22 + 3) = v22 + 32;
  v53 = 257;
  *((_QWORD *)v22 + 4) = v19;
  *((_QWORD *)v22 + 5) = 0;
  *((_WORD *)v22 + 24) = 60;
  *((_DWORD *)v22 + 13) = 1;
  *(_OWORD *)(v22 + 56) = 0u;
  *(_OWORD *)(v22 + 72) = 0u;
  *((_DWORD *)v22 + 22) = 0;
  *(_QWORD *)v22 = v18;
  v26 = *(_QWORD *)(v18 + 8);
  v25 = (_QWORD *)(v18 + 8);
  v24 = v26;
  *((_QWORD *)v22 + 1) = v26;
  if (v26)
    *(_QWORD *)(v24 + 16) = v22 + 8;
  *((_QWORD *)v22 + 2) = v25;
  *v25 = v22;
  *((_WORD *)v22 + 25) = 2 * (v21 & 0x3F);
  v22[92] = 1;
  llvm::Value::setName((uint64_t ***)v22 + 4, (uint64_t)v52);
  (*(void (**)(uint64_t, llvm::Value *, uint64_t *, llvm::BasicBlock *, char *))(*(_QWORD *)v51 + 16))(v51, v8, v43, v48, FirstNonPHIOrDbgOrAlloca);
  if (v46)
  {
    v34 = (char *)v45;
    v35 = (char *)v45 + 16 * v46;
    v36 = (unsigned __int8 **)(v23 + 80);
    do
    {
      v37 = *(_DWORD *)v34;
      v38 = (unsigned __int8 *)*((_QWORD *)v34 + 1);
      if (v38)
      {
        if (!v37)
        {
          v42 = (unsigned __int8 *)*((_QWORD *)v34 + 1);
          llvm::MetadataTracking::track((uint64_t)&v42, v38, 2);
          v39 = *v36;
          goto LABEL_38;
        }
      }
      else
      {
        v39 = *v36;
        if (!*v36 && (v23[55] & 0x20) == 0)
          goto LABEL_35;
        if (!v37)
        {
          v42 = 0;
LABEL_38:
          if (v39)
            llvm::MetadataTracking::untrack((uint64_t)(v23 + 80), v39);
          v40 = v42;
          *v36 = v42;
          if (v40)
            llvm::MetadataTracking::retrack((uint64_t)&v42, v40, (uint64_t)(v23 + 80));
          goto LABEL_35;
        }
      }
      llvm::Value::setMetadata(v8, *(_DWORD *)v34, (llvm::MDNode *)v38);
LABEL_35:
      v34 += 16;
    }
    while (v34 != v35);
  }
LABEL_13:
  sub_1C55E1DE0(v7, &v41)[1] = (uint64_t)v8;
  v27 = *(unsigned __int8 **)(a2 + 48);
  v48 = *(llvm::BasicBlock **)(a2 + 40);
  FirstNonPHIOrDbgOrAlloca = (char *)(a2 + 24);
  v52[0] = v27;
  if (v27)
  {
    llvm::MetadataTracking::track((uint64_t)v52, v27, 2);
    v28 = v52[0];
  }
  else
  {
    v28 = 0;
  }
  sub_1C4774EF4((uint64_t)&v45, 0, (uint64_t)v28);
  if (v52[0])
  {
    llvm::MetadataTracking::untrack((uint64_t)v52, v52[0]);
    if (Declaration)
      goto LABEL_17;
    goto LABEL_23;
  }
LABEL_16:
  if (Declaration)
  {
LABEL_17:
    v29 = *(uint64_t ***)(Declaration + 24);
    goto LABEL_24;
  }
LABEL_23:
  v29 = 0;
LABEL_24:
  v43[0] = (uint64_t)v8;
  v43[1] = a3;
  v53 = 257;
  v30 = (unsigned __int8 *)sub_1C4774778((uint64_t *)&v45, v29, Declaration, v43, 2, (uint64_t)v52, 0);
  v31 = *(_QWORD *)a3;
  v53 = 257;
  v32 = sub_1C4773E38((uint64_t *)&v45, 49, v30, v31, (uint64_t)v52);
  if (v45 != &v47)
    free(v45);
  return v32;
}

uint64_t *sub_1C55E1DE0(_DWORD *a1, uint64_t *a2)
{
  char v4;
  uint64_t *result;
  int v6;
  unsigned int v7;
  uint64_t *v8;

  v8 = 0;
  v4 = sub_1C55E1EC4((uint64_t)a1, *a2, &v8);
  result = v8;
  if ((v4 & 1) != 0)
    return result;
  v6 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v7 = 8;
  else
    v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_11;
  }
  if (v7 + ~v6 - a1[1] <= v7 >> 3)
  {
LABEL_11:
    sub_1C55E1F70((uint64_t)a1, v7);
    v8 = 0;
    sub_1C55E1EC4((uint64_t)a1, *a2, &v8);
    result = v8;
  }
  *a1 += 2;
  if (*result != -4096)
    --a1[1];
  *result = *a2;
  result[1] = 0;
  return result;
}

uint64_t sub_1C55E1EC4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 8;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_5;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_5;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_5:
  *a3 = v7;
  return result;
}

uint64_t sub_1C55E1F70(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[17];

  v14[16] = *MEMORY[0x1E0C80C00];
  if (a2 >= 9)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 8)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C627E228(a1, v6, &v6[2 * v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_QWORD *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *v9 = v10;
      v9[1] = *(_QWORD *)(a1 + v8 + 16);
      v9 += 2;
    }
    v8 += 16;
  }
  while (v8 != 128);
  if (a2 > 8)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C627E228(a1, v14, v9);
}

void sub_1C55E20E8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  BOOL v7;
  uint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  uint64_t v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned __int8 *v23;
  unsigned __int8 *v24;
  char *v25;
  char *v26;
  uint64_t *v27;
  uint64_t v28;
  char *AsInstruction;
  llvm::Value *v30;
  unint64_t v31;
  uint64_t v32;
  unint64_t v33;
  char **v34;
  int v35;
  char *v36;
  char *v37;
  uint64_t v38;
  char *v39;
  char *v40;
  llvm::Type *v41;
  llvm::Type *v42;
  llvm::UndefValue *AggregateElement;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  llvm::ValueSymbolTable *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;
  uint64_t v55;
  uint64_t *v56;
  uint64_t *v57;
  char v60[32];
  __int16 v61;
  int v62;
  void *v63;
  uint64_t v64;
  _BYTE v65[64];
  void *v66[2];
  uint64_t v67;
  void *v68;
  uint64_t v69;
  _QWORD v70[34];

  v70[32] = *MEMORY[0x1E0C80C00];
  v63 = v65;
  v64 = 0x800000000;
  v2 = *(_QWORD *)(a2 + 8);
  if (v2)
  {
    v3 = 0;
    do
    {
      if (v3 >= HIDWORD(v64))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v63, (uint64_t)v65, v3 + 1, 8);
        v3 = v64;
      }
      *((_QWORD *)v63 + v3) = v2;
      v3 = v64 + 1;
      LODWORD(v64) = v64 + 1;
      v2 = *(_QWORD *)(v2 + 8);
    }
    while (v2);
    v4 = (uint64_t *)v63;
    if (v3)
    {
      v56 = (uint64_t *)((char *)v63 + 8 * v3);
      do
      {
        v57 = v4;
        v5 = *v4;
        v6 = *(_QWORD *)(*v4 + 24);
        if (v6)
          v7 = *(unsigned __int8 *)(v6 + 16) >= 0x1Cu;
        else
          v7 = 0;
        if (v7)
        {
          v10 = sub_1C55E19FC(a1, v6, a2);
          if (*(_QWORD *)v5)
          {
            **(_QWORD **)(v5 + 16) = *(_QWORD *)(v5 + 8);
            v11 = *(_QWORD *)(v5 + 8);
            if (v11)
              *(_QWORD *)(v11 + 16) = *(_QWORD *)(v5 + 16);
          }
          *(_QWORD *)v5 = v10;
          v12 = v57;
          if (v10)
          {
            v15 = *((_QWORD *)v10 + 1);
            v13 = (uint64_t *)(v10 + 8);
            v14 = v15;
            *(_QWORD *)(v5 + 8) = v15;
            if (v15)
              *(_QWORD *)(v14 + 16) = v5 + 8;
            *(_QWORD *)(v5 + 16) = v13;
            *v13 = v5;
          }
        }
        else
        {
          v8 = *(_QWORD *)(v6 + 8);
          v68 = v70;
          v69 = 0x1000000000;
          sub_1C55E25D8((unsigned int *)&v68, 1uLL, v5, v8);
          LODWORD(v9) = v69;
          if ((_DWORD)v69)
          {
            do
            {
              v16 = (char *)v68;
              v17 = (char *)v68 + 16 * v9;
              v18 = *(_QWORD *)(*((_QWORD *)v17 - 2) + 24);
              if (v18)
                v19 = *(unsigned __int8 *)(v18 + 16) >= 0x1Cu;
              else
                v19 = 0;
              if (v19)
              {
                v23 = sub_1C55E19FC(a1, *(_QWORD *)(*((_QWORD *)v17 - 2) + 24), a2);
                if ((_DWORD)v69)
                {
                  v24 = v23;
                  v25 = (char *)v68;
                  v26 = (char *)v68 + 16 * v69;
                  v27 = (uint64_t *)(v18 + 24);
                  while (1)
                  {
                    v28 = *(_QWORD *)(*(_QWORD *)v25 + 24);
                    if (v28 == v18)
                      break;
                    if (*(_BYTE *)(v28 + 16) == 5)
                    {
                      AsInstruction = llvm::ConstantExpr::getAsInstruction(*(llvm::ConstantExpr **)(*(_QWORD *)v25 + 24), 0);
                      v30 = (llvm::Value *)AsInstruction;
                      v31 = *(_DWORD *)(v28 + 20) & 0x7FFFFFF;
                      if ((*(_DWORD *)(v28 + 20) & 0x7FFFFFF) != 0)
                      {
                        v32 = 0;
                        v33 = 0;
                        v34 = (char **)(v24 + 8);
                        do
                        {
                          if (*(_QWORD *)(v28 - 32 * v31 + v32) == **(_QWORD **)v25)
                          {
                            v35 = *((_DWORD *)AsInstruction + 5);
                            if ((v35 & 0x40000000) != 0)
                              v36 = (char *)*((_QWORD *)AsInstruction - 1);
                            else
                              v36 = &AsInstruction[-32 * (v35 & 0x7FFFFFF)];
                            v37 = &v36[v32];
                            if (*(_QWORD *)&v36[v32])
                            {
                              **((_QWORD **)v37 + 2) = *((_QWORD *)v37 + 1);
                              v38 = *((_QWORD *)v37 + 1);
                              if (v38)
                                *(_QWORD *)(v38 + 16) = *((_QWORD *)v37 + 2);
                            }
                            *(_QWORD *)v37 = v24;
                            if (v24)
                            {
                              v39 = *v34;
                              v40 = &v36[v32];
                              *((_QWORD *)v40 + 1) = *v34;
                              if (v39)
                                *((_QWORD *)v39 + 2) = v40 + 8;
                              *((_QWORD *)v40 + 2) = v34;
                              *v34 = v37;
                            }
                          }
                          ++v33;
                          v31 = *(_DWORD *)(v28 + 20) & 0x7FFFFFF;
                          v32 += 32;
                        }
                        while (v33 < v31);
                      }
                      v45 = *(_QWORD *)(v18 + 40);
                      *((_QWORD *)AsInstruction + 5) = v45;
                      *(_WORD *)(v45 + 18) &= ~0x8000u;
                      if ((AsInstruction[23] & 0x10) != 0)
                      {
                        v47 = *(_QWORD *)(v45 + 56);
                        if (v47)
                        {
                          v48 = *(llvm::ValueSymbolTable **)(v47 + 104);
                          if (v48)
                            llvm::ValueSymbolTable::reinsertValue(v48, v30);
                        }
                      }
                      v46 = *v27;
                      *((_QWORD *)v30 + 3) = *v27;
                      *((_QWORD *)v30 + 4) = v27;
                      *(_QWORD *)(v46 + 8) = (char *)v30 + 24;
                      *v27 = (uint64_t)v30 + 24;
                    }
                    else
                    {
                      sub_1C4773D54((uint64_t)v66, v18, 0, 0, 0);
                      v30 = llvm::UndefValue::get(*(llvm::UndefValue **)v28, v41);
                      if ((*(_DWORD *)(v28 + 20) & 0x7FFFFFF) != 0)
                      {
                        v42 = 0;
                        do
                        {
                          AggregateElement = llvm::Constant::getAggregateElement((llvm::Constant *)v28, v42);
                          if (AggregateElement == **(llvm::UndefValue ***)v25)
                            v44 = (uint64_t)v24;
                          else
                            v44 = (uint64_t)AggregateElement;
                          v62 = (int)v42;
                          v61 = 257;
                          v30 = (llvm::Value *)sub_1C506D788((uint64_t)v66, (uint64_t)v30, v44, &v62, 1, (uint64_t)v60);
                          v42 = (llvm::Type *)((_DWORD)v42 + 1);
                        }
                        while (v42 < (*(_DWORD *)(v28 + 20) & 0x7FFFFFFu));
                      }
                      if (v66[0] != &v67)
                        free(v66[0]);
                    }
                    v25 += 16;
                    v24 = (unsigned __int8 *)v30;
                    if (v25 == v26)
                      goto LABEL_74;
                  }
                  v51 = *((_QWORD *)v17 - 2);
                  if (*(_QWORD *)v51)
                  {
                    **(_QWORD **)(v51 + 16) = *(_QWORD *)(v51 + 8);
                    v52 = *(_QWORD *)(v51 + 8);
                    if (v52)
                      *(_QWORD *)(v52 + 16) = *(_QWORD *)(v51 + 16);
                  }
                  *(_QWORD *)v51 = v24;
                  if (v24)
                  {
                    v55 = *((_QWORD *)v24 + 1);
                    v54 = v24 + 8;
                    v53 = v55;
                    *(_QWORD *)(v51 + 8) = v55;
                    if (v55)
                      *(_QWORD *)(v53 + 16) = v51 + 8;
                    *(_QWORD *)(v51 + 16) = v54;
                    *v54 = v51;
                  }
                }
LABEL_74:
                LODWORD(v9) = v69 - 1;
              }
              else
              {
                v9 = v9;
                v20 = *((_QWORD *)v17 - 1);
                if (v20)
                {
                  while (1)
                  {
                    v21 = *(_QWORD *)(v20 + 8);
                    v22 = *(_QWORD *)(v20 + 24);
                    if (*(_BYTE *)(v22 + 16) != 3)
                      break;
                    v20 = *(_QWORD *)(v20 + 8);
                    if (!v21)
                    {
                      *((_QWORD *)v17 - 1) = 0;
                      goto LABEL_29;
                    }
                  }
                  *((_QWORD *)v17 - 1) = v21;
                  v49 = *(_QWORD *)(v22 + 8);
                  if (v9 >= HIDWORD(v69))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v68, (uint64_t)v70, v9 + 1, 16);
                    v16 = (char *)v68;
                    v9 = v69;
                  }
                  v50 = &v16[16 * v9];
                  *(_QWORD *)v50 = v20;
                  *((_QWORD *)v50 + 1) = v49;
                  LODWORD(v9) = v69 + 1;
                }
                else
                {
LABEL_29:
                  LODWORD(v9) = v9 - 1;
                }
              }
              LODWORD(v69) = v9;
            }
            while ((_DWORD)v9);
          }
          if (v68 != v70)
            free(v68);
          v12 = v57;
        }
        v4 = v12 + 1;
      }
      while (v4 != v56);
      v4 = (uint64_t *)v63;
    }
    if (v4 != (uint64_t *)v65)
      free(v4);
  }
}

unsigned int *sub_1C55E25D8(unsigned int *result, unint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int *v7;
  _QWORD *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  _QWORD *v12;
  unint64_t v13;
  _QWORD *v14;

  v7 = result;
  if (result[3] >= a2)
  {
    v10 = result[2];
    if (v10 >= a2)
      v11 = a2;
    else
      v11 = result[2];
    if (v11)
    {
      v12 = *(_QWORD **)result;
      do
      {
        *v12 = a3;
        v12[1] = a4;
        v12 += 2;
        --v11;
      }
      while (v11);
    }
    v13 = v10 - a2;
    if (v10 < a2)
    {
      v14 = (_QWORD *)(*(_QWORD *)result + 16 * v10);
      do
      {
        *v14 = a3;
        v14[1] = a4;
        v14 += 2;
      }
      while (!__CFADD__(v13++, 1));
    }
  }
  else
  {
    result[2] = 0;
    result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), a2, 16);
    v8 = *(_QWORD **)v7;
    v9 = a2;
    do
    {
      *v8 = a3;
      v8[1] = a4;
      v8 += 2;
      --v9;
    }
    while (v9);
  }
  v7[2] = a2;
  return result;
}

uint64_t sub_1C55E268C(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "GPU specific noalias metadata placement";
  *(_QWORD *)(v2 + 8) = 39;
  *(_QWORD *)(v2 + 16) = "gpu-noalias-metadata";
  *(_QWORD *)(v2 + 24) = 20;
  *(_QWORD *)(v2 + 32) = &unk_1ED8078B8;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C55E27E4;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C55E271C(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED8078B8;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E8170FD8;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED8078C0);
  if (v3 != -1)
  {
    v7[0] = sub_1C55E268C;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED8078C0, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C55E27E4()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C55E271C(v0);
}

void sub_1C55E2810(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C55E2834(int a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
}

uint64_t sub_1C55E283C(uint64_t a1, uint64_t ***a2)
{
  uint64_t ***v3;
  uint64_t **i;
  uint64_t **v5;
  uint64_t *v6;
  char v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  BOOL v13;
  uint64_t **v14;
  uint64_t **v15;
  uint64_t **v16;
  uint64_t *v17;
  int v18;
  uint64_t v19;
  unsigned __int8 v20;
  unint64_t v21;
  unsigned int v22;
  int j;
  unsigned int v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t **v28;
  llvm::MDNode *v29;
  llvm::MDNode *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  BOOL v36;
  char *v38;
  char *v39;
  llvm::Value *v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  int v44;
  unsigned int v45;
  llvm::Value **v46;
  llvm::Value *v47;
  llvm::Value **v48;
  int v49;
  BOOL v50;
  unsigned int v51;
  uint64_t v52;
  llvm::MDNode **v53;
  uint64_t v54;
  llvm::MDNode *v55;
  uint64_t *v56;
  llvm::MDNode *Impl;
  llvm::MDNode *v58;
  llvm::MDNode *v59;
  llvm::Value **v60;
  uint64_t v61;
  unsigned int v62;
  BOOL v63;
  char *v65;
  uint64_t *v66;
  uint64_t v67;
  uint64_t k;
  uint64_t ***v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  llvm::Value *v74;
  uint64_t v75;
  int v76;
  uint64_t v77;
  int v78;
  unsigned int v79;
  _QWORD *v80;
  _QWORD ***v81;
  _QWORD *v82;
  int v83;
  BOOL v84;
  unsigned int v85;
  uint64_t v86;
  llvm::MDNode **v87;
  uint64_t v88;
  llvm::MDNode *v89;
  uint64_t *v90;
  llvm::MDNode *v91;
  llvm::MDNode *v92;
  llvm::MDNode *v93;
  _QWORD *v94;
  uint64_t v95;
  int v96;
  BOOL v97;
  unsigned int v98;
  uint64_t v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  int v104;
  unsigned int v105;
  _QWORD *v106;
  _QWORD ***v107;
  _QWORD *v108;
  int v109;
  BOOL v110;
  unsigned int v111;
  uint64_t v112;
  llvm::MDNode **v113;
  uint64_t v114;
  llvm::MDNode *v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t ****v120;
  uint64_t ***v121;
  int v122;
  int v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t ***v126;
  unsigned __int8 *v127;
  size_t v128;
  size_t v129;
  llvm::MDNode *v130;
  llvm::MDNode *v131;
  llvm::MDNode *v132;
  char *v133;
  char *v134;
  llvm::Value *v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  int v139;
  unsigned int v140;
  _QWORD *v141;
  _QWORD ***v142;
  _QWORD *v143;
  int v144;
  BOOL v145;
  unsigned int v146;
  uint64_t v147;
  llvm::MDNode **v148;
  uint64_t v149;
  llvm::MDNode *v150;
  uint64_t *v151;
  llvm::MDNode *v152;
  llvm::MDNode *v153;
  llvm::MDNode *v154;
  _QWORD *v155;
  uint64_t v156;
  unint64_t v158;
  char v159;
  int v160;
  uint64_t **v161;
  uint64_t v162;
  uint64_t **v163;
  char *v164;
  char *v165;
  uint64_t v166;
  int v167;
  _BYTE v168[64];
  uint64_t *v169;
  void *v170;
  uint64_t v171;
  _BYTE v172[64];
  uint64_t v173[3];

  v173[1] = *MEMORY[0x1E0C80C00];
  if (((*((unsigned __int16 *)a2 + 9) >> 4) & 0x3FFu) - 100 > 8)
  {
    v7 = 0;
    return v7 & 1;
  }
  v169 = **a2;
  v170 = v172;
  v171 = 0x800000000;
  v164 = v168;
  v165 = v168;
  v166 = 8;
  v167 = 0;
  v3 = a2 + 9;
  for (i = a2[10]; ; i = (uint64_t **)i[1])
  {
    if (i == (uint64_t **)v3)
    {
      v7 = 0;
      goto LABEL_256;
    }
    v5 = i - 3;
    if (!i)
      v5 = 0;
    v6 = v5[6];
    if (v6 != (uint64_t *)(v5 + 5))
      break;
  }
  v8 = 0;
  v9 = 0;
  while (1)
  {
    v10 = v6 ? (uint64_t)(v6 - 3) : 0;
    if (*(_BYTE *)(v10 + 16) == 84
      && (v11 = *(_QWORD *)(v10 - 32)) != 0
      && !*(_BYTE *)(v11 + 16)
      && *(_QWORD *)(v11 + 24) == *(_QWORD *)(v10 + 72)
      && (*(_BYTE *)(v11 + 33) & 0x20) != 0
      && ((v12 = *(_DWORD *)(*(v6 - 7) + 36), v13 = sub_1C47860D0(v12), (v12 - 2022) < 0x40)
       || v13
       || (v12 - 1682) <= 0x8B))
    {
      v8 = 1;
      if ((v9 & 1) != 0)
        goto LABEL_60;
      v9 = 0;
    }
    else
    {
      v9 |= sub_1C55E34D8(v10);
      if ((v8 & v9 & 1) != 0)
        goto LABEL_36;
    }
    v6 = (uint64_t *)v6[1];
    v14 = i - 3;
    if (!i)
      v14 = 0;
    if (v6 == (uint64_t *)(v14 + 5))
      break;
LABEL_29:
    if (i == (uint64_t **)v3)
      goto LABEL_34;
  }
  while (1)
  {
    i = (uint64_t **)i[1];
    if (i == (uint64_t **)v3)
      break;
    v15 = i - 3;
    if (!i)
      v15 = 0;
    v6 = v15[6];
    if (v6 != (uint64_t *)(v15 + 5))
      goto LABEL_29;
  }
LABEL_34:
  if ((v8 & 1) == 0)
  {
    v7 = 0;
    goto LABEL_256;
  }
  if ((v9 & 1) != 0)
  {
LABEL_36:
    v8 = 1;
  }
  else
  {
    v16 = a2[14];
    if (v16)
    {
      if (*((_DWORD *)v16 + 2))
      {
        v17 = v16[5];
        if (v17)
        {
          v18 = *((_DWORD *)v17 + 10);
          if (v18)
          {
            v19 = v17[3];
            v20 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
            if ((v20 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
            {
              v158 = llvm::hashing::detail::fixed_seed_override;
              if (!llvm::hashing::detail::fixed_seed_override)
                v158 = 0xFF51AFD7ED558CCDLL;
              qword_1ED7EAC80 = v158;
              __cxa_guard_release(&qword_1ED7EAC88);
            }
            v21 = 0x9DDFEA08EB382D69
                * ((0x9DDFEA08EB382D69 * (qword_1ED7EAC80 ^ 0xD476A8E9D5DCE4CELL)) ^ ((0x9DDFEA08EB382D69
                                                                                       * (qword_1ED7EAC80 ^ 0xD476A8E9D5DCE4CELL)) >> 47) ^ 0xBA05CD85A5B185BDLL);
            v22 = (-348639895 * ((v21 >> 47) ^ v21)) ^ 0x616F6E73;
            for (j = 1; ; ++j)
            {
              v24 = v22 & (v18 - 1);
              v25 = v19 + 24 * v24;
              v26 = *(_QWORD **)v25;
              if (*(_QWORD *)v25 == -1)
              {
                if ("samplesnoalias" == (char *)-1)
                  goto LABEL_58;
              }
              else if (v26 == (_QWORD *)-2)
              {
                if ("samplesnoalias" == (char *)-2)
                  goto LABEL_58;
              }
              else if (*(_QWORD *)(v25 + 8) == 14
                     && *v26 == 0x6E73656C706D6173
                     && *(_QWORD *)((char *)v26 + 6) == 0x7361696C616F6E73)
              {
LABEL_58:
                v8 = 0;
                goto LABEL_60;
              }
              if (v26 == (_QWORD *)-1)
                break;
              v22 = j + v24;
            }
          }
        }
      }
    }
    v8 = 0;
    a2[14] = (uint64_t **)llvm::AttributeList::addAttributeAtIndex((llvm::AttributeList *)(a2 + 14), **a2, -1, "samplesnoalias", 0xEuLL, 0, 0);
  }
LABEL_60:
  v28 = a2[10];
  if (v28 == (uint64_t **)v3)
  {
    v7 = 0;
    goto LABEL_255;
  }
  v159 = 0;
  v29 = 0;
  v30 = 0;
  v161 = (uint64_t **)v3;
  v160 = v8;
LABEL_62:
  v31 = (uint64_t)(v28 - 3);
  if (!v28)
    v31 = 0;
  v163 = v28;
  if (!v8)
    goto LABEL_121;
  v32 = v31;
  v33 = *(_QWORD *)(v31 + 8);
  if (!v33)
  {
LABEL_75:
    if (v30 && (_DWORD)v171)
    {
      v38 = (char *)v170;
      v39 = (char *)v170 + 8 * v171;
      do
      {
        v40 = *(llvm::Value **)v38;
        if ((*(_BYTE *)(*(_QWORD *)v38 + 23) & 0x20) == 0)
          goto LABEL_94;
        v41 = ***(_QWORD ***)v40;
        v173[0] = *(_QWORD *)v38;
        v42 = *(_DWORD *)(v41 + 2496);
        if (v42)
        {
          v43 = *(_QWORD *)(v41 + 2480);
          v44 = v42 - 1;
          v45 = v44 & ((v40 >> 4) ^ (v40 >> 9));
          v46 = (llvm::Value **)(v43 + 40 * v45);
          v47 = *v46;
          if (*v46 == v40)
            goto LABEL_89;
          v48 = 0;
          v49 = 1;
          while (v47 != (llvm::Value *)-4096)
          {
            if (v48)
              v50 = 0;
            else
              v50 = v47 == (llvm::Value *)-8192;
            if (v50)
              v48 = v46;
            v51 = v45 + v49++;
            v45 = v51 & v44;
            v46 = (llvm::Value **)(v43 + 40 * v45);
            v47 = *v46;
            if (*v46 == v40)
              goto LABEL_89;
          }
          if (v48)
            v60 = v48;
          else
            v60 = v46;
        }
        else
        {
          v60 = 0;
        }
        v46 = (llvm::Value **)sub_1C541AB24(v41 + 2480, (uint64_t)v173, v173, v60);
        v61 = v173[0];
        v46[4] = 0;
        v46[3] = 0;
        *v46 = (llvm::Value *)v61;
        v46[1] = (llvm::Value *)(v46 + 3);
        v46[2] = (llvm::Value *)0x100000000;
LABEL_89:
        v52 = *((unsigned int *)v46 + 4);
        if ((_DWORD)v52)
        {
          v53 = (llvm::MDNode **)((char *)v46[1] + 8);
          v54 = 16 * v52;
          while (*((_DWORD *)v53 - 2) != 8)
          {
            v55 = 0;
            v53 += 2;
            v54 -= 16;
            if (!v54)
              goto LABEL_95;
          }
          v55 = *v53;
          goto LABEL_95;
        }
LABEL_94:
        v55 = 0;
LABEL_95:
        v56 = **a2;
        v173[0] = (uint64_t)v30;
        Impl = (llvm::MDNode *)llvm::MDTuple::getImpl(v56, v173, 1, 0, 1);
        v59 = llvm::MDNode::concatenate(v55, Impl, v58);
        if (v59 || *((_QWORD *)v40 + 6) || (*((_BYTE *)v40 + 23) & 0x20) != 0)
          llvm::Value::setMetadata(v40, 8, v59);
        v38 += 8;
      }
      while (v38 != v39);
    }
    v30 = 0;
    v29 = 0;
    LODWORD(v171) = 0;
    v31 = v32;
LABEL_121:
    v67 = v31 + 40;
    v162 = v31;
    for (k = *(_QWORD *)(v31 + 48); ; k = *(_QWORD *)(k + 8))
    {
      if (k == v67)
      {
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v164, v162);
        v28 = (uint64_t **)v163[1];
        v8 = v160;
        if (v28 == v161)
          goto LABEL_221;
        goto LABEL_62;
      }
      v69 = (uint64_t ***)(k - 24);
      if (k)
        v70 = k - 24;
      else
        v70 = 0;
      if (*(_BYTE *)(v70 + 16) == 84)
      {
        v71 = *(_QWORD *)(v70 - 32);
        if (v71)
        {
          if (!*(_BYTE *)(v71 + 16)
            && *(_QWORD *)(v71 + 24) == *(_QWORD *)(v70 + 72)
            && (*(_BYTE *)(v71 + 33) & 0x20) != 0)
          {
            v96 = *(_DWORD *)(*(_QWORD *)(k - 56) + 36);
            v97 = sub_1C47860D0(v96);
            v98 = v96 - 1682;
            if (v97 || v98 < 0x8C)
            {
              if (v98 < 0x8C)
                goto LABEL_175;
LABEL_171:
              if ((v96 - 2029) <= 0x35
                && ((1 << (v96 + 19)) & 0x21002100210021) != 0)
              {
LABEL_175:
                v100 = v171;
                if (v171 >= (unint64_t)HIDWORD(v171))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v170, (uint64_t)v172, v171 + 1, 8);
                  v100 = v171;
                }
                *((_QWORD *)v170 + v100) = v69;
                LODWORD(v171) = v171 + 1;
LABEL_178:
                v159 = 1;
                continue;
              }
              if ((*(_BYTE *)(k - 1) & 0x20) == 0)
                goto LABEL_195;
              v101 = ***v69;
              v173[0] = k - 24;
              v102 = *(_DWORD *)(v101 + 2496);
              if (!v102)
              {
                v124 = 0;
                goto LABEL_209;
              }
              v103 = *(_QWORD *)(v101 + 2480);
              v104 = v102 - 1;
              v105 = v104 & ((v69 >> 4) ^ (v69 >> 9));
              v106 = (_QWORD *)(v103 + 40 * v105);
              v107 = (_QWORD ***)*v106;
              if ((uint64_t ***)*v106 != v69)
              {
                v108 = 0;
                v109 = 1;
                while (v107 != (_QWORD ***)-4096)
                {
                  if (v108)
                    v110 = 0;
                  else
                    v110 = v107 == (_QWORD ***)-8192;
                  if (v110)
                    v108 = v106;
                  v111 = v105 + v109++;
                  v105 = v111 & v104;
                  v106 = (_QWORD *)(v103 + 40 * v105);
                  v107 = (_QWORD ***)*v106;
                  if ((uint64_t ***)*v106 == v69)
                    goto LABEL_190;
                }
                if (v108)
                  v124 = v108;
                else
                  v124 = v106;
LABEL_209:
                v106 = sub_1C541AB24(v101 + 2480, (uint64_t)v173, v173, v124);
                v125 = v173[0];
                v106[4] = 0;
                v106[3] = 0;
                *v106 = v125;
                v106[1] = v106 + 3;
                v106[2] = 0x100000000;
              }
LABEL_190:
              v112 = *((unsigned int *)v106 + 4);
              if ((_DWORD)v112)
              {
                v113 = (llvm::MDNode **)(v106[1] + 8);
                v114 = 16 * v112;
                while (*((_DWORD *)v113 - 2) != 7)
                {
                  v115 = 0;
                  v113 += 2;
                  v114 -= 16;
                  if (!v114)
                    goto LABEL_196;
                }
                v115 = *v113;
              }
              else
              {
LABEL_195:
                v115 = 0;
              }
LABEL_196:
              v116 = **a2;
              if (!v30)
              {
                if (!v29)
                {
                  if ((*((_BYTE *)a2 + 23) & 0x10) != 0)
                  {
                    v117 = *(_QWORD *)(*v116 + 152);
                    v118 = *(unsigned int *)(*v116 + 168);
                    if (!(_DWORD)v118)
                      goto LABEL_210;
                    LODWORD(v119) = (v118 - 1) & ((a2 >> 4) ^ (a2 >> 9));
                    v120 = (uint64_t ****)(v117 + 16 * v119);
                    v121 = *v120;
                    if (*v120 != a2)
                    {
                      v122 = 1;
                      while (v121 != (uint64_t ***)-4096)
                      {
                        v123 = v119 + v122++;
                        v119 = v123 & (v118 - 1);
                        v121 = *(uint64_t ****)(v117 + 16 * v119);
                        if (v121 == a2)
                        {
                          v120 = (uint64_t ****)(v117 + 16 * v119);
                          goto LABEL_211;
                        }
                      }
LABEL_210:
                      v120 = (uint64_t ****)(v117 + 16 * v118);
                    }
LABEL_211:
                    v126 = v120[1];
                    v129 = (size_t)*v126;
                    v127 = (unsigned __int8 *)(v126 + 2);
                    v128 = v129;
                  }
                  else
                  {
                    v128 = 0;
                    v127 = (unsigned __int8 *)&byte_1C871356D;
                  }
                  v29 = llvm::MDBuilder::createAnonymousAARoot(&v169, v127, v128, 0);
                }
                v30 = llvm::MDBuilder::createAnonymousAARoot(&v169, "Samples", 7uLL, (uint64_t)v29);
              }
              v173[0] = (uint64_t)v30;
              v130 = (llvm::MDNode *)llvm::MDTuple::getImpl(v116, v173, 1, 0, 1);
              v132 = llvm::MDNode::concatenate(v115, v130, v131);
              if (v132 || *(_QWORD *)(k + 24) || (*(_BYTE *)(k - 1) & 0x20) != 0)
                llvm::Value::setMetadata((llvm::Value *)(k - 24), 7, v132);
              goto LABEL_178;
            }
            if ((v96 - 2022) < 0x40)
              goto LABEL_171;
          }
        }
      }
      if (sub_1C55E34D8(v70))
      {
        if (v30 && (_DWORD)v171)
        {
          v72 = (char *)v170;
          v73 = (char *)v170 + 8 * v171;
          while (2)
          {
            v74 = *(llvm::Value **)v72;
            if ((*(_BYTE *)(*(_QWORD *)v72 + 23) & 0x20) == 0)
              goto LABEL_151;
            v75 = ***(_QWORD ***)v74;
            v173[0] = *(_QWORD *)v72;
            v76 = *(_DWORD *)(v75 + 2496);
            if (v76)
            {
              v77 = *(_QWORD *)(v75 + 2480);
              v78 = v76 - 1;
              v79 = v78 & ((v74 >> 4) ^ (v74 >> 9));
              v80 = (_QWORD *)(v77 + 40 * v79);
              v81 = (_QWORD ***)*v80;
              if ((llvm::Value *)*v80 != v74)
              {
                v82 = 0;
                v83 = 1;
                while (v81 != (_QWORD ***)-4096)
                {
                  if (v82)
                    v84 = 0;
                  else
                    v84 = v81 == (_QWORD ***)-8192;
                  if (v84)
                    v82 = v80;
                  v85 = v79 + v83++;
                  v79 = v85 & v78;
                  v80 = (_QWORD *)(v77 + 40 * v79);
                  v81 = (_QWORD ***)*v80;
                  if ((llvm::Value *)*v80 == v74)
                    goto LABEL_146;
                }
                if (v82)
                  v94 = v82;
                else
                  v94 = v80;
LABEL_162:
                v80 = sub_1C541AB24(v75 + 2480, (uint64_t)v173, v173, v94);
                v95 = v173[0];
                v80[4] = 0;
                v80[3] = 0;
                *v80 = v95;
                v80[1] = v80 + 3;
                v80[2] = 0x100000000;
              }
LABEL_146:
              v86 = *((unsigned int *)v80 + 4);
              if ((_DWORD)v86)
              {
                v87 = (llvm::MDNode **)(v80[1] + 8);
                v88 = 16 * v86;
                while (*((_DWORD *)v87 - 2) != 8)
                {
                  v89 = 0;
                  v87 += 2;
                  v88 -= 16;
                  if (!v88)
                    goto LABEL_152;
                }
                v89 = *v87;
                goto LABEL_152;
              }
LABEL_151:
              v89 = 0;
LABEL_152:
              v90 = **a2;
              v173[0] = (uint64_t)v30;
              v91 = (llvm::MDNode *)llvm::MDTuple::getImpl(v90, v173, 1, 0, 1);
              v93 = llvm::MDNode::concatenate(v89, v91, v92);
              if (v93 || *((_QWORD *)v74 + 6) || (*((_BYTE *)v74 + 23) & 0x20) != 0)
                llvm::Value::setMetadata(v74, 8, v93);
              v72 += 8;
              if (v72 == v73)
                goto LABEL_164;
              continue;
            }
            break;
          }
          v94 = 0;
          goto LABEL_162;
        }
LABEL_164:
        v30 = 0;
        v29 = 0;
        LODWORD(v171) = 0;
      }
    }
  }
  while (1)
  {
    v34 = *(_QWORD *)(v33 + 24);
    v35 = *(unsigned __int8 *)(v34 + 16);
    v36 = v34 && v35 >= 0x1C;
    if (v36 && v35 - 29 <= 0xA)
      break;
    v33 = *(_QWORD *)(v33 + 8);
    if (!v33)
      goto LABEL_75;
  }
LABEL_115:
  v65 = (char *)sub_1C477672C((uint64_t)&v164, *(_QWORD *)(v34 + 40));
  if (v165 == v164)
    v66 = (uint64_t *)((char *)&v166 + 4);
  else
    v66 = &v166;
  if (v65 != &v165[8 * *(unsigned int *)v66])
  {
    while (1)
    {
      v33 = *(_QWORD *)(v33 + 8);
      if (!v33)
        goto LABEL_75;
      v34 = *(_QWORD *)(v33 + 24);
      v62 = *(unsigned __int8 *)(v34 + 16);
      if (v34)
        v63 = v62 >= 0x1C;
      else
        v63 = 0;
      if (v63 && v62 - 29 <= 0xA)
        goto LABEL_115;
    }
  }
LABEL_221:
  if (v30 && (_DWORD)v171)
  {
    v133 = (char *)v170;
    v134 = (char *)v170 + 8 * v171;
    while (2)
    {
      v135 = *(llvm::Value **)v133;
      if ((*(_BYTE *)(*(_QWORD *)v133 + 23) & 0x20) == 0)
        goto LABEL_240;
      v136 = ***(_QWORD ***)v135;
      v173[0] = *(_QWORD *)v133;
      v137 = *(_DWORD *)(v136 + 2496);
      if (v137)
      {
        v138 = *(_QWORD *)(v136 + 2480);
        v139 = v137 - 1;
        v140 = v139 & ((v135 >> 4) ^ (v135 >> 9));
        v141 = (_QWORD *)(v138 + 40 * v140);
        v142 = (_QWORD ***)*v141;
        if ((llvm::Value *)*v141 != v135)
        {
          v143 = 0;
          v144 = 1;
          while (v142 != (_QWORD ***)-4096)
          {
            if (v143)
              v145 = 0;
            else
              v145 = v142 == (_QWORD ***)-8192;
            if (v145)
              v143 = v141;
            v146 = v140 + v144++;
            v140 = v146 & v139;
            v141 = (_QWORD *)(v138 + 40 * v140);
            v142 = (_QWORD ***)*v141;
            if ((llvm::Value *)*v141 == v135)
              goto LABEL_235;
          }
          if (v143)
            v155 = v143;
          else
            v155 = v141;
LABEL_251:
          v141 = sub_1C541AB24(v136 + 2480, (uint64_t)v173, v173, v155);
          v156 = v173[0];
          v141[4] = 0;
          v141[3] = 0;
          *v141 = v156;
          v141[1] = v141 + 3;
          v141[2] = 0x100000000;
        }
LABEL_235:
        v147 = *((unsigned int *)v141 + 4);
        if ((_DWORD)v147)
        {
          v148 = (llvm::MDNode **)(v141[1] + 8);
          v149 = 16 * v147;
          while (*((_DWORD *)v148 - 2) != 8)
          {
            v150 = 0;
            v148 += 2;
            v149 -= 16;
            if (!v149)
              goto LABEL_241;
          }
          v150 = *v148;
          goto LABEL_241;
        }
LABEL_240:
        v150 = 0;
LABEL_241:
        v151 = **a2;
        v173[0] = (uint64_t)v30;
        v152 = (llvm::MDNode *)llvm::MDTuple::getImpl(v151, v173, 1, 0, 1);
        v154 = llvm::MDNode::concatenate(v150, v152, v153);
        if (v154 || *((_QWORD *)v135 + 6) || (*((_BYTE *)v135 + 23) & 0x20) != 0)
          llvm::Value::setMetadata(v135, 8, v154);
        v133 += 8;
        if (v133 == v134)
          goto LABEL_254;
        continue;
      }
      break;
    }
    v155 = 0;
    goto LABEL_251;
  }
LABEL_254:
  v7 = v159;
LABEL_255:
  LODWORD(v171) = 0;
LABEL_256:
  if (v165 != v164)
    free(v165);
  if (v170 != v172)
    free(v170);
  return v7 & 1;
}

BOOL sub_1C55E34D8(uint64_t a1)
{
  _BOOL8 result;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int v16;
  BOOL v17;
  int v18;

  result = 0;
  v3 = *(unsigned __int8 *)(a1 + 16);
  v4 = (v3 - 33);
  if (v4 > 0x37)
    return result;
  if (((1 << (v3 - 33)) & 0x8000000000041) != 0)
  {
    v5 = *(_QWORD *)(a1 + 64);
    if (v5 && (*(_BYTE *)(v5 + 17) & 0x30) != 0)
      return 0;
    v6 = *(_DWORD *)(a1 + 20);
    if (v6 < 0 && (v11 = a1 - 32 * (v6 & 0x7FFFFFF), v14 = *(_QWORD *)(v11 - 8), v12 = v11 - 8, (v13 = v14) != 0))
    {
      v15 = -v13;
      while (1)
      {
        v16 = *(_DWORD *)(*(_QWORD *)(v12 + v15) + 8);
        v17 = v16 > 7;
        v18 = (1 << v16) & 0x83;
        if (v17 || v18 == 0)
          break;
        v15 += 16;
        if (!v15)
          goto LABEL_9;
      }
    }
    else
    {
LABEL_9:
      if ((llvm::CallBase::hasFnAttrOnCalledFunction(a1, 45) & 1) != 0
        || (llvm::CallBase::hasFnAttrOnCalledFunction(a1, 44) & 1) != 0)
      {
        return 0;
      }
      v3 = *(unsigned __int8 *)(a1 + 16);
    }
  }
  else
  {
    if (v4 == 27)
      return (*(_WORD *)(a1 + 18) & 0x301) != 0;
    if (((1 << (v3 - 33)) & 0x808001D0000010) == 0)
      return result;
  }
  if (v3 == 61)
    return 0;
  if (v3 != 84)
    return 1;
  v7 = *(_QWORD *)(a1 - 32);
  if (!v7 || *(_BYTE *)(v7 + 16) || *(_QWORD *)(v7 + 24) != *(_QWORD *)(a1 + 72) || (*(_BYTE *)(v7 + 33) & 0x20) == 0)
    return 1;
  result = 0;
  v8 = *(_DWORD *)(v7 + 36);
  if ((v8 - 2630) < 0x20)
    return result;
  if (v8 <= 2446)
  {
    if (v8 == 2144)
      return result;
    v9 = v8 - 1996;
    goto LABEL_27;
  }
  if ((v8 - 2447) > 0x1F || ((1 << (v8 + 113)) & 0xFF000073) == 0)
  {
    v9 = v8 - 2703;
LABEL_27:
    if (v9 < 2)
      return result;
    if ((v8 - 2838) < 3)
      return 0;
    v10 = v8 - 2712;
    if (v10 <= 0x13)
      return (0x3300u >> v10) & 1;
    return 1;
  }
  return result;
}

uint64_t sub_1C55E36A8(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Shrink load and store instructions";
  *(_QWORD *)(v2 + 8) = 34;
  *(_QWORD *)(v2 + 16) = "ls-shrinker";
  *(_QWORD *)(v2 + 24) = 11;
  *(_QWORD *)(v2 + 32) = &unk_1ED8078C8;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C55E3804;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C55E3738(uint64_t a1, char a2)
{
  unint64_t v4;
  unint64_t v6;
  _QWORD *v7;
  _QWORD v8[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED8078C8;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E8171078;
  *(_BYTE *)(a1 + 28) = a2;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v6 = qword_1ED830BC0[0];
  v4 = atomic_load(&qword_1ED8078D0);
  if (v4 != -1)
  {
    v8[0] = sub_1C55E36A8;
    v8[1] = &v6;
    v7 = v8;
    std::__call_once(&qword_1ED8078D0, &v7, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C55E3804()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C55E3738(v0, 0);
}

void sub_1C55E3834(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C55E3858()
{
  return "GPU Load and Store Shrinker";
}

void sub_1C55E3868(int a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
}

uint64_t sub_1C55E3870(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  _WORD *v12;
  llvm::Value *v13;
  unsigned __int8 *v14;
  int v15;
  llvm::Value *v16;
  uint64_t v17;
  _QWORD *v18;
  unsigned int v19;
  int v20;
  uint64_t v21;
  unsigned int PrimitiveSizeInBits;
  unsigned int v23;
  int8x8_t v24;
  int v25;
  unsigned int v26;
  uint8x8_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unsigned int v33;
  uint64_t v34;
  llvm::Value *v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  _WORD *v39;
  _BOOL4 v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  unsigned int v44;
  _BOOL4 v46;
  unint64_t v47;
  int v49;
  BOOL v51;
  BOOL v52;
  llvm::Type *v53;
  llvm::PointerType *v54;
  llvm::PointerType *v55;
  llvm::Constant *v56;
  llvm::Constant *v57;
  llvm::Type *v58;
  int v59;
  int v60;
  const llvm::APInt *v61;
  unint64_t v62;
  _QWORD *ElementPtr;
  unint64_t v64;
  llvm::ConstantInt *v65;
  unsigned int v66;
  unint64_t v67;
  llvm::ValueHandleBase *v68;
  uint64_t v69;
  unsigned __int8 *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  unsigned __int8 **v75;
  unsigned __int8 *v76;
  int v77;
  int v78;
  unsigned __int8 *v79;
  char *v80;
  llvm::Value *v81;
  uint64_t v82;
  BOOL v83;
  _QWORD *v84;
  _QWORD *v85;
  int v86;
  uint64_t v87;
  llvm::Value *v88;
  llvm::Value *v89;
  uint64_t v90;
  unsigned int v91;
  char *v92;
  uint64_t v93;
  uint64_t v94;
  llvm::Type **v95;
  uint64_t v96;
  llvm::Type **v97;
  uint64_t TypeAtIndex;
  uint64_t v99;
  uint64_t v100;
  uint64_t **v101;
  uint64_t v102;
  uint64_t ***v103;
  char *v104;
  uint64_t ***v105;
  _QWORD *v106;
  _QWORD *v107;
  llvm::ConstantInt *v108;
  unsigned int v109;
  unint64_t v110;
  llvm::ValueHandleBase *v111;
  uint64_t v112;
  uint64_t *v113;
  unsigned int v114;
  _QWORD *v115;
  uint64_t v116;
  uint64_t v117;
  _QWORD *v118;
  uint64_t v119;
  unint64_t v120;
  llvm::Value *v121;
  unint64_t v122;
  uint64_t v123;
  uint64_t v124;
  llvm::ValueHandleBase **v125;
  uint64_t v126;
  const llvm::APInt *v127;
  llvm::Type **v128;
  int v129;
  llvm::Type *v130;
  _QWORD *v131;
  unint64_t v132;
  uint64_t v133;
  llvm::ConstantInt *v134;
  unsigned int v135;
  unint64_t v136;
  llvm::ValueHandleBase *v137;
  uint64_t v138;
  uint64_t v139;
  llvm::ValueHandleBase ***v140;
  uint64_t v141;
  _DWORD *v142;
  int v143;
  uint64_t v144;
  llvm::Value *v145;
  llvm::Value *v146;
  llvm::ValueAsMetadata *v147;
  uint64_t v148;
  uint64_t v149;
  llvm::ValueSymbolTable *v150;
  _QWORD *v151;
  int v152;
  _QWORD *v153;
  int v154;
  char *v155;
  _QWORD *v156;
  _QWORD *v157;
  uint64_t v158;
  char *v159;
  char *v160;
  uint64_t v161;
  int v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  _QWORD **v166;
  uint64_t v167;
  uint64_t v168;
  _QWORD *v169;
  char v170;
  uint64_t v172;
  llvm::Value *v173;
  llvm::Value *v174;
  llvm::Value *v175;
  llvm::Value *v176;
  llvm::Constant *v177;
  unsigned __int8 *v178;
  uint64_t *v179;
  unsigned int v180;
  unsigned int v181;
  _QWORD *v182;
  _DWORD *v183;
  uint64_t v184;
  unsigned int v185;
  _WORD *v186;
  unsigned int v187;
  llvm::Constant *v188;
  llvm::Type *v189;
  llvm::Type *v190;
  llvm::Value *v191;
  llvm::Value *v192;
  char v193;
  unint64_t v194;
  llvm::Value *v195;
  __int16 v196;
  std::string __dst;
  char v198;
  void *v199;
  uint64_t v200;
  _WORD v201[24];
  _QWORD *v202;
  void *v203[2];
  uint64_t v204;
  _QWORD *v205;
  char *v206;
  uint64_t v207;
  _QWORD v208[10];

  v208[8] = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a2 + 40);
  if (*(char *)(v4 + 239) < 0)
    sub_1C47EBC30(&__dst, *(void **)(v4 + 216), *(_QWORD *)(v4 + 224));
  else
    __dst = *(std::string *)(v4 + 216);
  if (!std::string::compare(&__dst, 0, 4uLL, "agx1"))
  {
    v5 = 27;
  }
  else if (!std::string::compare(&__dst, 0, 4uLL, "agx2"))
  {
    v5 = 28;
  }
  else if (!std::string::compare(&__dst, 0, 4uLL, "agx3"))
  {
    v5 = 29;
  }
  else
  {
    v5 = 0;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (*(_BYTE *)(a1 + 28) && (_DWORD)v5 == 27)
    sub_1C5EA3C3C(a2);
  v6 = (char *)v208;
  v206 = (char *)v208;
  v207 = 0x800000000;
  v7 = a2 + 72;
  for (i = *(_QWORD *)(a2 + 80); ; i = *(_QWORD *)(i + 8))
  {
    if (i == v7)
    {
      v170 = 0;
      return v170 & 1;
    }
    v9 = i - 24;
    if (!i)
      v9 = 0;
    v10 = *(_QWORD *)(v9 + 48);
    if (v10 != v9 + 40)
      break;
  }
  v193 = 0;
  v11 = (v5 - 29);
  v12 = v201;
  v13 = (llvm::Value *)&v204;
  while (1)
  {
    v14 = (unsigned __int8 *)(v10 - 24);
    if (!v10)
      v14 = 0;
    v15 = v14[16];
    if (v15 == 60)
      v16 = (llvm::Value *)v14;
    else
      v16 = 0;
    if (v10 && v15 == 60 && *((_QWORD *)v16 + 1))
    {
      v18 = (_QWORD *)((char *)v16 - 32);
      v17 = *((_QWORD *)v16 - 4);
      v19 = *(_DWORD *)(*(_QWORD *)v17 + 8);
      if ((v19 & 0xFE) == 0x12)
        v19 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v17 + 16) + 8);
      v20 = v19 >> 8;
      if (*(_BYTE *)(a1 + 28))
        goto LABEL_301;
      if (v20 == 2)
      {
        v34 = v11;
        v35 = v13;
        v36 = a1;
        v37 = v6;
        v38 = v5;
        v39 = v12;
        v40 = sub_1C5E9DE14(v17, 1);
        v20 = 2;
        v18 = (_QWORD *)((char *)v16 - 32);
        v12 = v39;
        v5 = v38;
        v6 = v37;
        a1 = v36;
        v13 = v35;
        v11 = v34;
        if (v40)
        {
LABEL_301:
          v21 = *(_QWORD *)v16;
          if ((*(_DWORD *)(*(_QWORD *)v16 + 8) & 0xFE) == 0x12)
          {
            v187 = v20;
            v182 = v18;
            v186 = v12;
            v185 = v11;
            PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(**(llvm::Type ***)(v21 + 16));
            if (PrimitiveSizeInBits < 0x10)
            {
              v11 = v185;
LABEL_80:
              v12 = v186;
              goto LABEL_53;
            }
            v181 = PrimitiveSizeInBits;
            v23 = sub_1C5EA9C8C((uint64_t)v16);
            v11 = v185;
            if (v185 > 0xFFFFFFFD)
            {
              v25 = 0;
              v26 = v181;
            }
            else
            {
              v25 = 0;
              v26 = v181;
              if (*(_BYTE *)(a1 + 28))
              {
                v24.i32[0] = v181;
                v27 = (uint8x8_t)vcnt_s8(v24);
                v27.i16[0] = vaddlv_u8(v27);
                if (v27.i32[0] <= 1u)
                {
                  v25 = 0;
                  if (v187 != 3 && v187 != 68)
                  {
                    v28 = *((_QWORD *)v16 + 1);
                    if (v28)
                    {
                      v29 = -1;
                      do
                      {
                        v25 = 0;
                        v30 = *(_QWORD *)(v28 + 24);
                        if (!v30 || *(_BYTE *)(v30 + 16) != 89)
                          break;
                        v31 = *(_QWORD *)(v30 - 32);
                        if (*(_BYTE *)(v31 + 16) != 16)
                        {
                          v25 = 0;
                          break;
                        }
                        v32 = (_QWORD *)(v31 + 24);
                        if (*(_DWORD *)(v31 + 32) >= 0x41u)
                          v32 = (_QWORD *)*v32;
                        v33 = *(_DWORD *)v32;
                        if (v29 >= v33)
                          v29 = v33;
                        v28 = *(_QWORD *)(v28 + 8);
                        v25 = v29;
                      }
                      while (v28);
                    }
                    else
                    {
                      v25 = -1;
                    }
                  }
                }
              }
            }
            v191 = v16;
            v43 = *(_DWORD *)(v21 + 32);
            v44 = v23 - v25;
            v46 = v26 != 16 || v23 - v25 + 1 < 5;
            if ((v25 & 1) == 0)
              v46 = 1;
            if (v46)
              v47 = v44 + 1;
            else
              v47 = v44 + 2;
            v184 = v25 - !v46;
            if (v23 > v43 - 1 || v23 - (v25 - !v46) >= v43 - 1)
              goto LABEL_80;
            v49 = v47 * v26;
            if (v47 * v26 < 0x101)
            {
              if ((v49 - 129) > 0x7E)
              {
                v51 = v5 < 0x1C && v49 == 48;
                v52 = (v49 - 65) >= 0x3F || v49 == 96;
                if (!v52 || v51)
                  goto LABEL_80;
              }
              else if (v49 != 160 && v49 != 192 && v49 != 224)
              {
                goto LABEL_80;
              }
            }
            else if (v49 != 384 && v49 != 512)
            {
              goto LABEL_80;
            }
            v178 = (unsigned __int8 *)*((_QWORD *)v191 - 4);
            v180 = v23;
            sub_1C4773D54((uint64_t)v203, (uint64_t)v191, 0, 0, 0);
            if ((*(_DWORD *)(v21 + 8) & 0xFE) == 0x12)
              v21 = **(_QWORD **)(v21 + 16);
            v53 = (llvm::Type *)v187;
            v54 = (llvm::PointerType *)v21;
            if (v180 != (_DWORD)v184)
            {
              llvm::FixedVectorType::get((llvm::FixedVectorType *)v21, (llvm::Type *)v47);
              v53 = (llvm::Type *)v187;
            }
            *(_QWORD *)v191 = v54;
            v55 = v54;
            v56 = (llvm::Constant *)llvm::PointerType::get(v54, v53);
            v57 = v56;
            if (!(_DWORD)v184)
            {
              ElementPtr = v178;
              if (v178[16] <= 0x14u && v178)
              {
                v59 = v184;
                if (*(llvm::Constant **)v178 != v56)
                  ElementPtr = sub_1C537D3B8((llvm *)0x31, (uint64_t)v178, v56, 0);
                v11 = v185;
                v12 = v186;
                goto LABEL_182;
              }
              v201[8] = 257;
              ElementPtr = sub_1C4773E38((uint64_t *)v203, 49, v178, (uint64_t)v56, (uint64_t)&v199);
              v11 = v185;
              v12 = v186;
LABEL_165:
              v107 = v182;
              v59 = v184;
LABEL_183:
              if (*v107)
              {
                **((_QWORD **)v191 - 2) = *((_QWORD *)v191 - 3);
                v116 = *((_QWORD *)v191 - 3);
                if (v116)
                  *(_QWORD *)(v116 + 16) = *((_QWORD *)v191 - 2);
              }
              *v107 = ElementPtr;
              if (ElementPtr)
              {
                v119 = ElementPtr[1];
                v118 = ElementPtr + 1;
                v117 = v119;
                *((_QWORD *)v191 - 3) = v119;
                if (v119)
                  *(_QWORD *)(v117 + 16) = (char *)v191 - 24;
                *((_QWORD *)v191 - 2) = v118;
                *v118 = v107;
              }
              if (v59)
              {
                v120 = v181 << ((v59 & 1) == 0) >> 3;
                v121 = v191;
                v122 = *((unsigned __int16 *)v191 + 9);
                if (1 << (v122 >> 1) < v120)
                  v120 = 1 << (v122 >> 1);
                *((_WORD *)v191 + 9) = v122 & 0xFF81 | (2 * (63 - __clz(v120)));
                if (v180 != v59)
                {
                  v123 = *((_QWORD *)v191 + 1);
                  if (v123)
                  {
                    v192 = v13;
                    while (1)
                    {
                      if (*(_BYTE *)(*(_QWORD *)(v123 + 24) + 16) == 89)
                        v124 = *(_QWORD *)(v123 + 24);
                      else
                        v124 = 0;
                      v125 = (llvm::ValueHandleBase **)(v124 - 32);
                      if (*(_BYTE *)(*(_QWORD *)(v124 - 32) + 16) == 16)
                        v126 = *(_QWORD *)(v124 - 32);
                      else
                        v126 = 0;
                      sub_1C4773D54((uint64_t)&v199, v124, 0, 0, 0);
                      v128 = (llvm::Type **)(v126 + 24);
                      v129 = *(_DWORD *)(v126 + 32);
                      if (v129 >= 0x41)
                        v128 = (llvm::Type **)*v128;
                      v130 = *v128;
                      v131 = v202;
                      LODWORD(v194) = v129;
                      if (v129 <= 63)
                      {
                        if (v129 <= 31)
                        {
                          switch(v129)
                          {
                            case 16:
                              v132 = *v202 + 1936;
                              break;
                            case 8:
                              v132 = *v202 + 1912;
                              break;
                            case 1:
                              v132 = *v202 + 1888;
                              break;
                            default:
LABEL_235:
                              v190 = v130;
                              v142 = sub_1C5270984(*v202 + 2168, &v194);
                              v130 = v190;
                              v183 = v142;
                              v132 = *((_QWORD *)v142 + 1);
                              if (!v132)
                              {
                                v132 = sub_1C484358C(*v131 + 2040, 24, 3);
                                v143 = v194;
                                *(_QWORD *)v132 = v131;
                                *(_QWORD *)(v132 + 16) = 0;
                                v130 = v190;
                                *(_DWORD *)(v132 + 8) = (v143 << 8) | 0xD;
                                *(_DWORD *)(v132 + 12) = 0;
                                *((_QWORD *)v183 + 1) = v132;
                              }
                              break;
                          }
                        }
                        else
                        {
                          if (v129 != 32)
                            goto LABEL_235;
                          v132 = *v202 + 1960;
                        }
                      }
                      else if (v129 == 64)
                      {
                        v132 = *v202 + 1984;
                      }
                      else
                      {
                        if (v129 != 128)
                          goto LABEL_235;
                        v132 = *v202 + 2008;
                      }
                      v133 = (uint64_t)v130 - v184;
                      v134 = *(llvm::ConstantInt **)v132;
                      v135 = *(_DWORD *)(v132 + 8);
                      LODWORD(v195) = v135 >> 8;
                      if (v135 >> 8 > 0x40)
                      {
                        llvm::APInt::initSlowCase((llvm::APInt *)&v194, v133, 0);
                      }
                      else
                      {
                        if (v135 <= 0xFF)
                          v136 = 0;
                        else
                          v136 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v135);
                        v194 = v136 & v133;
                      }
                      v137 = llvm::ConstantInt::get(v134, (llvm::LLVMContext *)&v194, v127);
                      if (v195 >= 0x41 && v194)
                        MEMORY[0x1CAA32F9C](v194, 0x1000C8000313F17);
                      v11 = v185;
                      v12 = v186;
                      if (*v125)
                      {
                        **(_QWORD **)(v124 - 16) = *(_QWORD *)(v124 - 24);
                        v138 = *(_QWORD *)(v124 - 24);
                        if (v138)
                          *(_QWORD *)(v138 + 16) = *(_QWORD *)(v124 - 16);
                      }
                      *v125 = v137;
                      if (v137)
                      {
                        v141 = *((_QWORD *)v137 + 1);
                        v140 = (llvm::ValueHandleBase ***)((char *)v137 + 8);
                        v139 = v141;
                        *(_QWORD *)(v124 - 24) = v141;
                        if (v141)
                          *(_QWORD *)(v139 + 16) = v124 - 24;
                        *(_QWORD *)(v124 - 16) = v140;
                        *v140 = v125;
                      }
                      if (v199 != v186)
                      {
                        free(v199);
                        v12 = v186;
                        v11 = v185;
                      }
                      v123 = *(_QWORD *)(v123 + 8);
                      if (!v123)
                      {
                        v13 = v192;
                        goto LABEL_247;
                      }
                    }
                  }
                  goto LABEL_247;
                }
              }
              else
              {
                v121 = v191;
                if (v180)
                  goto LABEL_247;
              }
              v144 = *((_QWORD *)v121 + 1);
              if (v144)
              {
                v145 = v121;
                v146 = v13;
                do
                {
                  v147 = *(llvm::ValueAsMetadata **)(v144 + 24);
                  llvm::Value::doRAUW(v147, v145, (llvm::Value *)1);
                  v148 = v207;
                  if (v207 >= (unint64_t)HIDWORD(v207))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v206, (uint64_t)v6, v207 + 1, 8);
                    v148 = v207;
                  }
                  *(_QWORD *)&v206[8 * v148] = v147;
                  LODWORD(v207) = v207 + 1;
                  v144 = *(_QWORD *)(v144 + 8);
                }
                while (v144);
                v193 = 1;
                v11 = v185;
                v12 = v186;
                v13 = v146;
              }
LABEL_247:
              if (v203[0] != v13)
              {
                free(v203[0]);
                v12 = v186;
                v11 = v185;
              }
              goto LABEL_53;
            }
            v58 = v55;
            v177 = v57;
            if ((*((_DWORD *)v55 + 2) & 0xFE) == 0x12)
              v58 = (llvm::Type *)**((_QWORD **)v55 + 2);
            v59 = v184;
            v60 = llvm::Type::getPrimitiveSizeInBits(v58);
            v188 = (llvm::Constant *)llvm::PointerType::get((llvm::PointerType *)v21, (llvm::Type *)v187);
            if (v178[16] <= 0x14u && v178)
            {
              v199 = v186;
              v200 = 0x400000000;
              LODWORD(v194) = v60;
              if (v60 <= 63)
              {
                if (v60 <= 31)
                {
                  switch(v60)
                  {
                    case 16:
                      v62 = *v205 + 1936;
                      goto LABEL_168;
                    case 8:
                      v62 = *v205 + 1912;
                      goto LABEL_168;
                    case 1:
                      v62 = *v205 + 1888;
                      goto LABEL_168;
                  }
                }
                else if (v60 == 32)
                {
                  v62 = *v205 + 1960;
                  goto LABEL_168;
                }
              }
              else
              {
                if (v60 == 64)
                {
                  v62 = *v205 + 1984;
LABEL_168:
                  v108 = *(llvm::ConstantInt **)v62;
                  v109 = *(_DWORD *)(v62 + 8);
                  LODWORD(v195) = v109 >> 8;
                  if (v109 >> 8 > 0x40)
                  {
                    llvm::APInt::initSlowCase((llvm::APInt *)&v194, v184, 0);
                  }
                  else
                  {
                    if (v109 <= 0xFF)
                      v110 = 0;
                    else
                      v110 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v109);
                    v194 = v110 & v184;
                  }
                  v111 = llvm::ConstantInt::get(v108, (llvm::LLVMContext *)&v194, v61);
                  if (v195 >= 0x41 && v194)
                    MEMORY[0x1CAA32F9C](v194, 0x1000C8000313F17);
                  v112 = v200;
                  v113 = (uint64_t *)v178;
                  if (v200 >= (unint64_t)HIDWORD(v200))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, (uint64_t)v186, v200 + 1, 8);
                    v113 = (uint64_t *)v178;
                    v112 = v200;
                  }
                  *((_QWORD *)v199 + v112) = v111;
                  v114 = v200 + 1;
                  LODWORD(v200) = v200 + 1;
                  if ((llvm::Constant *)*v113 != v188)
                  {
                    v113 = (uint64_t *)sub_1C537D3B8((llvm *)0x31, (uint64_t)v113, v188, 0);
                    v114 = v200;
                  }
                  ElementPtr = (_QWORD *)llvm::ConstantExpr::getGetElementPtr((llvm::GetElementPtrInst *)v21, v113, (llvm::Value *)v199, v114, 0, 0, 0);
                  if ((llvm::Constant *)*ElementPtr != v177)
                    ElementPtr = sub_1C537D3B8((llvm *)0x31, (uint64_t)ElementPtr, v177, 0);
                  v12 = v186;
                  if (v199 != v186)
                  {
                    v115 = ElementPtr;
                    free(v199);
                    ElementPtr = v115;
                    v12 = v186;
                  }
                  v11 = v185;
LABEL_182:
                  v107 = v182;
                  goto LABEL_183;
                }
                if (v60 == 128)
                {
                  v62 = *v205 + 2008;
                  goto LABEL_168;
                }
              }
              v153 = v205;
              v176 = (llvm::Value *)sub_1C5270984(*v205 + 2168, &v194);
              v62 = *((_QWORD *)v176 + 1);
              if (!v62)
              {
                v62 = sub_1C484358C(*v153 + 2040, 24, 3);
                v154 = v194;
                *(_QWORD *)v62 = v153;
                *(_QWORD *)(v62 + 16) = 0;
                *(_DWORD *)(v62 + 8) = (v154 << 8) | 0xD;
                *(_DWORD *)(v62 + 12) = 0;
                *((_QWORD *)v176 + 1) = v62;
              }
              goto LABEL_168;
            }
            v199 = v186;
            v200 = 0x400000000;
            LODWORD(v194) = v60;
            if (v60 <= 63)
            {
              if (v60 <= 31)
              {
                switch(v60)
                {
                  case 16:
                    v64 = *v205 + 1936;
                    goto LABEL_134;
                  case 8:
                    v64 = *v205 + 1912;
                    goto LABEL_134;
                  case 1:
                    v64 = *v205 + 1888;
                    goto LABEL_134;
                }
              }
              else if (v60 == 32)
              {
                v64 = *v205 + 1960;
                goto LABEL_134;
              }
            }
            else
            {
              if (v60 == 64)
              {
                v64 = *v205 + 1984;
                goto LABEL_134;
              }
              if (v60 == 128)
              {
                v64 = *v205 + 2008;
                goto LABEL_134;
              }
            }
            v151 = v205;
            v175 = (llvm::Value *)sub_1C5270984(*v205 + 2168, &v194);
            v64 = *((_QWORD *)v175 + 1);
            if (!v64)
            {
              v64 = sub_1C484358C(*v151 + 2040, 24, 3);
              v152 = v194;
              *(_QWORD *)v64 = v151;
              *(_QWORD *)(v64 + 16) = 0;
              *(_DWORD *)(v64 + 8) = (v152 << 8) | 0xD;
              *(_DWORD *)(v64 + 12) = 0;
              *((_QWORD *)v175 + 1) = v64;
            }
LABEL_134:
            v65 = *(llvm::ConstantInt **)v64;
            v66 = *(_DWORD *)(v64 + 8);
            LODWORD(v195) = v66 >> 8;
            if (v66 >> 8 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v194, v184, 0);
            }
            else
            {
              if (v66 <= 0xFF)
                v67 = 0;
              else
                v67 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v66);
              v194 = v67 & v184;
            }
            v68 = llvm::ConstantInt::get(v65, (llvm::LLVMContext *)&v194, v61);
            if (v195 >= 0x41 && v194)
              MEMORY[0x1CAA32F9C](v194, 0x1000C8000313F17);
            v69 = v200;
            v70 = v178;
            if (v200 >= (unint64_t)HIDWORD(v200))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, (uint64_t)v186, v200 + 1, 8);
              v70 = v178;
              v69 = v200;
            }
            *((_QWORD *)v199 + v69) = v68;
            LODWORD(v200) = v200 + 1;
            if ((v70[23] & 0x10) == 0)
            {
              v173 = 0;
              v80 = &byte_1C871356D;
              goto LABEL_150;
            }
            v71 = ***(_QWORD ***)v70;
            v72 = *(_QWORD *)(v71 + 152);
            v73 = *(unsigned int *)(v71 + 168);
            if ((_DWORD)v73)
            {
              LODWORD(v74) = (v73 - 1) & ((v70 >> 4) ^ (v70 >> 9));
              v75 = (unsigned __int8 **)(v72 + 16 * v74);
              v76 = *v75;
              if (*v75 == v70)
              {
LABEL_149:
                v79 = v75[1];
                v81 = *(llvm::Value **)v79;
                v80 = (char *)(v79 + 16);
                v173 = v81;
LABEL_150:
                v196 = 257;
                v179 = (uint64_t *)sub_1C4773E38((uint64_t *)v203, 49, v70, (uint64_t)v188, (uint64_t)&v194);
                v189 = (llvm::Type *)v199;
                v196 = 261;
                v194 = (unint64_t)v80;
                v195 = v173;
                v172 = v200;
                v82 = (v200 + 1);
                v83 = (_DWORD)v200 == -1;
                v84 = operator new(32 * v82 + 80);
                v85 = &v84[4 * v82];
                *((_DWORD *)v85 + 5) = *((_DWORD *)v85 + 5) & 0x38000000 | v82 & 0x7FFFFFF;
                if (!v83)
                {
                  do
                  {
                    *v84 = 0;
                    v84[1] = 0;
                    v84[2] = 0;
                    v84[3] = v85;
                    v84 += 4;
                  }
                  while (v84 != v85);
                }
                v86 = v82 & 0x7FFFFFF;
                v174 = (llvm::Value *)v85;
                v87 = v172;
                sub_1C4774650((llvm::GetElementPtrInst *)v21, v179, v189, v172);
                v89 = v174;
                *(_QWORD *)v174 = v90;
                *((_QWORD *)v174 + 1) = 0;
                v91 = *((_DWORD *)v174 + 5) & 0xC0000000 | v86;
                *((_DWORD *)v174 + 4) = 62;
                *((_DWORD *)v174 + 5) = v91;
                *(_OWORD *)((char *)v174 + 24) = 0u;
                v92 = (char *)v174 + 24;
                *(_OWORD *)((char *)v174 + 40) = 0u;
                *((_DWORD *)v174 + 14) = 0;
                v93 = *((_QWORD *)v191 + 5);
                *((_QWORD *)v174 + 5) = v93;
                *(_WORD *)(v93 + 18) &= ~0x8000u;
                if ((*((_BYTE *)v174 + 23) & 0x10) != 0)
                {
                  v149 = *(_QWORD *)(v93 + 56);
                  if (v149)
                  {
                    v150 = *(llvm::ValueSymbolTable **)(v149 + 104);
                    if (v150)
                    {
                      llvm::ValueSymbolTable::reinsertValue(v150, v174);
                      v92 = (char *)v174 + 24;
                      v89 = v174;
                    }
                  }
                }
                v94 = *((_QWORD *)v191 + 3);
                *((_QWORD *)v89 + 3) = v94;
                *((_QWORD *)v89 + 4) = (char *)v191 + 24;
                *(_QWORD *)(v94 + 8) = v92;
                *((_QWORD *)v191 + 3) = v92;
                *((_QWORD *)v89 + 8) = v21;
                if ((_DWORD)v172)
                {
                  v95 = (llvm::Type **)((char *)v189 + 8);
                  v96 = 8 * v172 - 8;
                  do
                  {
                    if (!v96)
                      break;
                    v97 = v95 + 1;
                    TypeAtIndex = llvm::GetElementPtrInst::getTypeAtIndex((llvm::GetElementPtrInst *)v21, *v95, v88);
                    v95 = v97;
                    v87 = v172;
                    v89 = v174;
                    v21 = TypeAtIndex;
                    v96 -= 8;
                  }
                  while (TypeAtIndex);
                }
                *((_QWORD *)v89 + 9) = v21;
                v99 = *((_DWORD *)v89 + 5) & 0x7FFFFFF;
                v100 = -v99;
                v101 = (uint64_t **)((char *)v89 - 32 * v99);
                if (*v101)
                {
                  v155 = (char *)v89 + 32 * v100;
                  v157 = (_QWORD *)*((_QWORD *)v155 + 2);
                  v156 = v155 + 16;
                  *v157 = *(v156 - 1);
                  v158 = *(v156 - 1);
                  if (v158)
                    *(_QWORD *)(v158 + 16) = *v156;
                }
                *v101 = v179;
                if (v179)
                {
                  v103 = (uint64_t ***)(v179 + 1);
                  v102 = v179[1];
                  v104 = (char *)v89 + 32 * v100;
                  *((_QWORD *)v104 + 1) = v102;
                  if (v102)
                    *(_QWORD *)(v102 + 16) = v104 + 8;
                  *((_QWORD *)v104 + 2) = v103;
                  *v103 = v101;
                }
                v105 = (uint64_t ***)v89;
                sub_1C5382FD4((uint64_t)&v198, (uint64_t *)v189, (uint64_t *)v189 + v87, (uint64_t)v89 - 32 * (*((_DWORD *)v89 + 5) & 0x7FFFFFF) + 32);
                llvm::Value::setName(v105, (uint64_t)&v194);
                v196 = 257;
                ElementPtr = sub_1C4773E38((uint64_t *)v203, 49, (unsigned __int8 *)v105, (uint64_t)v177, (uint64_t)&v194);
                v12 = v186;
                if (v199 != v186)
                {
                  v106 = ElementPtr;
                  free(v199);
                  ElementPtr = v106;
                  v12 = v186;
                }
                v11 = v185;
                goto LABEL_165;
              }
              v77 = 1;
              while (v76 != (unsigned __int8 *)-4096)
              {
                v78 = v74 + v77++;
                v74 = v78 & (v73 - 1);
                v76 = *(unsigned __int8 **)(v72 + 16 * v74);
                if (v76 == v70)
                {
                  v75 = (unsigned __int8 **)(v72 + 16 * v74);
                  goto LABEL_149;
                }
              }
            }
            v75 = (unsigned __int8 **)(v72 + 16 * v73);
            goto LABEL_149;
          }
        }
      }
    }
LABEL_53:
    v10 = *(_QWORD *)(v10 + 8);
    v41 = i - 24;
    if (!i)
      v41 = 0;
    if (v10 == v41 + 40)
      break;
LABEL_60:
    if (i == v7)
      goto LABEL_279;
  }
  while (1)
  {
    i = *(_QWORD *)(i + 8);
    if (i == v7)
      break;
    v42 = i - 24;
    if (!i)
      v42 = 0;
    v10 = *(_QWORD *)(v42 + 48);
    if (v10 != v42 + 40)
      goto LABEL_60;
  }
LABEL_279:
  v159 = v206;
  if (!(_DWORD)v207)
    goto LABEL_294;
  v160 = &v206[8 * v207];
  while (2)
  {
    v161 = *(_QWORD *)v159;
    v162 = *(_DWORD *)(*(_QWORD *)v159 + 20);
    if ((v162 & 0x40000000) != 0)
    {
      v164 = *(_QWORD *)(v161 - 8);
      v163 = v162 & 0x7FFFFFF;
      if (v163)
        goto LABEL_283;
    }
    else
    {
      v163 = v162 & 0x7FFFFFF;
      v164 = v161 - 32 * v163;
      if (v163)
      {
LABEL_283:
        v165 = 32 * v163;
        v166 = (_QWORD **)(v164 + 16);
        do
        {
          if (*(v166 - 2))
          {
            **v166 = *(v166 - 1);
            v167 = (uint64_t)*(v166 - 1);
            if (v167)
              *(_QWORD *)(v167 + 16) = *v166;
          }
          *(v166 - 2) = 0;
          v166 += 4;
          v165 -= 32;
        }
        while (v165);
        v161 = *(_QWORD *)v159;
      }
    }
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v161 + 40) + 40, (uint64_t ***)v161);
    v168 = *(_QWORD *)(v161 + 24);
    v169 = *(_QWORD **)(v161 + 32);
    *v169 = v168;
    *(_QWORD *)(v168 + 8) = v169;
    *(_QWORD *)(v161 + 24) = 0;
    *(_QWORD *)(v161 + 32) = 0;
    llvm::Value::deleteValue((llvm::Value *)v161);
    v159 += 8;
    if (v159 != v160)
      continue;
    break;
  }
  v159 = v206;
LABEL_294:
  if (v159 != v6)
    free(v159);
  v170 = v193;
  return v170 & 1;
}

uint64_t sub_1C55E49FC(llvm *a1, llvm::PassRegistry *a2)
{
  uint64_t v3;

  llvm::initializeLazyBFIPassPass(a1, a2);
  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializePostDominatorTreeWrapperPassPass((uint64_t)a1);
  llvm::initializeLoopInfoWrapperPassPass((uint64_t)a1);
  v3 = operator new();
  *(_QWORD *)v3 = "Scalar promotion optimization";
  *(_QWORD *)(v3 + 8) = 29;
  *(_QWORD *)(v3 + 16) = "scalar-promotion";
  *(_QWORD *)(v3 + 24) = 16;
  *(_QWORD *)(v3 + 32) = &unk_1ED8078D8;
  *(_WORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = sub_1C55E4B88;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

uint64_t sub_1C55E4AA8(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED8078D8;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E8171118;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED8078E0);
  if (v3 != -1)
  {
    v7[0] = sub_1C55E49FC;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED8078E0, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  *(_BYTE *)(a1 + 96) = 0;
  return a1;
}

uint64_t sub_1C55E4B88()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C55E4AA8(v0);
}

void sub_1C55E4BB0(llvm::Pass *a1)
{
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  void *v12;
  void *v13;
  void *v14;
  void *v15;

  *(_QWORD *)a1 = &off_1E8171118;
  v2 = *((_QWORD *)a1 + 11);
  *((_QWORD *)a1 + 11) = 0;
  if (!v2)
    goto LABEL_18;
  v3 = *(_QWORD **)(v2 + 1328);
  if (v3 == (_QWORD *)(v2 + 1304))
  {
    v4 = 4;
    v3 = (_QWORD *)(v2 + 1304);
    goto LABEL_6;
  }
  if (v3)
  {
    v4 = 5;
LABEL_6:
    (*(void (**)(void))(*v3 + 8 * v4))();
  }
  v5 = *(void **)(v2 + 1136);
  if (v5 != (void *)(v2 + 1152))
    free(v5);
  v6 = *(void **)(v2 + 984);
  if (v6 != *(void **)(v2 + 976))
    free(v6);
  v7 = *(void **)(v2 + 824);
  if (v7 != *(void **)(v2 + 816))
    free(v7);
  v8 = *(void **)(v2 + 536);
  if (v8 != *(void **)(v2 + 528))
    free(v8);
  if (*(_QWORD *)v2 != v2 + 16)
    free(*(void **)v2);
  MEMORY[0x1CAA32FC0](v2, 0x10E0C40A0334FC4);
LABEL_18:
  v9 = *((_QWORD *)a1 + 10);
  *((_QWORD *)a1 + 10) = 0;
  if (!v9)
    goto LABEL_35;
  v10 = *(_QWORD **)(v9 + 1328);
  if (v10 == (_QWORD *)(v9 + 1304))
  {
    v11 = 4;
    v10 = (_QWORD *)(v9 + 1304);
    goto LABEL_23;
  }
  if (v10)
  {
    v11 = 5;
LABEL_23:
    (*(void (**)(void))(*v10 + 8 * v11))();
  }
  v12 = *(void **)(v9 + 1136);
  if (v12 != (void *)(v9 + 1152))
    free(v12);
  v13 = *(void **)(v9 + 984);
  if (v13 != *(void **)(v9 + 976))
    free(v13);
  v14 = *(void **)(v9 + 824);
  if (v14 != *(void **)(v9 + 816))
    free(v14);
  v15 = *(void **)(v9 + 536);
  if (v15 != *(void **)(v9 + 528))
    free(v15);
  if (*(_QWORD *)v9 != v9 + 16)
    free(*(void **)v9);
  MEMORY[0x1CAA32FC0](v9, 0x10E0C40A0334FC4);
LABEL_35:
  MEMORY[0x1CAA32FB4](*((_QWORD *)a1 + 7), 8);
  sub_1C55E7FDC((uint64_t)a1 + 32);
  llvm::Pass::~Pass(a1);
}

void sub_1C55E4D80(llvm::Pass *a1)
{
  sub_1C55E4BB0(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C55E4DA4()
{
  return "Scalar promotion";
}

void *sub_1C55E4DB4(uint64_t a1, llvm::LazyBlockFrequencyInfoPass *a2)
{
  llvm::AnalysisUsage *v3;

  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::PostDominatorTreeWrapperPass::ID);
  llvm::LazyBlockFrequencyInfoPass::getLazyBFIAnalysisUsage(a2, v3);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
  return sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::LoopInfoWrapperPass::ID);
}

uint64_t sub_1C55E4E34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t ***v6;
  uint64_t v7;
  unsigned int v8;
  char v9;
  uint64_t v10;
  uint64_t NamedMetadata;
  uint64_t **v12;
  uint64_t **v13;
  uint64_t **i;
  uint64_t **v15;
  uint64_t **v16;
  uint64_t ***v17;
  uint64_t **v18;
  uint64_t **j;
  uint64_t ***v20;
  void **v21;
  void *v22;
  uint64_t v23;
  void **v24;
  void *v25;
  uint64_t v26;
  uint64_t k;
  char **v28;
  char *v29;
  llvm::Loop *v30;
  const llvm::DataLayout *v31;
  uint64_t v32;
  uint64_t v33;
  llvm::ScalarEvolution *v34;
  llvm **v35;
  llvm **v36;
  const llvm::DominatorTree *v37;
  llvm *v38;
  uint64_t v39;
  void (**v40)(void);
  uint64_t v41;
  _QWORD *v42;
  uint64_t v43;
  void *v44;
  void *v45;
  void *v46;
  void *v47;
  uint64_t v48;
  void (**v49)(void);
  uint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  void *v53;
  void *v54;
  void *v55;
  void *v56;
  int v57;
  int v58;
  uint64_t v59;
  void **v60;
  void *v61;
  uint64_t v62;
  uint64_t v63;
  int v64;
  BOOL v65;
  uint64_t v66;
  void (**v67)(void);
  uint64_t v68;
  int v69;
  uint64_t **v70;
  unsigned int v71;
  unsigned int v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t **v75;
  uint64_t v76;
  int v77;
  _DWORD *v78;
  unsigned int v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  void *v83;
  void *v84;
  void *v85;
  void *v86;
  int v87;
  unsigned int v88;
  _QWORD *v89;
  _QWORD *v90;
  uint64_t v91;
  void *v92;
  void *v93;
  void *v94;
  void *v95;
  void *v96;
  void *v97;
  int v98;
  unsigned int v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  void *v103;
  void *v104;
  void *v105;
  void *v106;
  void *v107;
  void *v108;
  int v109;
  unsigned int v110;
  _QWORD *v111;
  int v112;
  int v113;
  uint64_t v114;
  uint64_t v115;
  unint64_t v116;
  unint64_t v117;
  _QWORD *v118;
  unsigned int v119;
  uint64_t v120;
  unint64_t v121;
  unint64_t v122;
  _QWORD *v123;
  unsigned int v124;
  uint64_t v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  void *v129;
  void *v130;
  void *v131;
  void *v132;
  uint64_t v133;
  _QWORD *v134;
  uint64_t v135;
  void *v136;
  void *v137;
  void *v138;
  void *v139;
  unsigned int v141;
  uint64_t *v142;
  __int128 v143;
  unsigned int v144;
  unsigned int v145;
  llvm *v146;
  llvm *v147;
  void *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t ****v153;
  uint64_t ***v154;
  int v155;
  int v156;
  uint64_t ***v157;
  int v158;
  _DWORD *v159;
  int v160;
  void *v161;
  unint64_t v162;
  uint64_t v163;
  unsigned int v164;
  uint64_t v165;
  char *v166;
  uint64_t v167;
  uint64_t v168;
  __int128 v169;
  unsigned int v170;
  void **v171;
  char *v172;
  char *v173;
  void *v174;
  void **v175;
  unsigned int v176;
  unint64_t *v177;
  uint64_t *v178;
  uint64_t v179;
  unint64_t *v180;
  uint64_t v181;
  unint64_t v182;
  unint64_t v183;
  unint64_t *m;
  unint64_t *v185;
  unint64_t v186;
  char *v187;
  char *v188;
  unint64_t *v189;
  unint64_t v190;
  unint64_t v191;
  unint64_t v192;
  unint64_t *v193;
  unint64_t v194;
  unint64_t v195;
  unint64_t *v196;
  unint64_t v197;
  unint64_t v198;
  uint64_t v199;
  uint64_t *v200;
  _QWORD *v201;
  uint64_t *v202;
  unint64_t v203;
  unsigned int v204;
  uint64_t v205;
  uint64_t v206;
  int v207;
  char v208;
  char v209;
  const char *v210;
  int v211;
  int v212;
  unint64_t v213;
  unsigned int v214;
  uint64_t v215;
  uint64_t v216;
  int v217;
  uint64_t v218;
  uint64_t v219;
  char *v220;
  char *v221;
  int v222;
  char *v223;
  void *v224;
  const void *v225;
  const void *v226;
  int v227;
  unsigned int v228;
  char *v229;
  _BYTE *v230;
  __int128 v231;
  char *v232;
  char v233;
  uint64_t v234;
  unsigned int v235;
  char *v236;
  _BYTE *v237;
  int v238;
  char *v239;
  void *v240;
  const void *v241;
  const void *v242;
  uint64_t v243;
  char *v244;
  int v245;
  uint64_t v246;
  const llvm::SmallPtrSetImplBase *v247;
  char *v248;
  int v249;
  char *v250;
  char *v251;
  void **v252;
  char *v253;
  _BOOL4 v255;
  const llvm::SmallPtrSetImplBase *v256;
  char *v257;
  uint64_t v258;
  char *v259;
  char *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t v264;
  unint64_t *v265;
  int v266;
  unint64_t *v267;
  uint64_t *v268;
  _QWORD *v269;
  uint64_t *v270;
  unint64_t *v271;
  unint64_t v272;
  unsigned int v273;
  _QWORD *v274;
  int v275;
  int v276;
  uint64_t **v277;
  uint64_t v278;
  unsigned int v279;
  unsigned int v280;
  uint64_t v281;
  char *v282;
  uint64_t *v283;
  _QWORD *v284;
  uint64_t *v285;
  uint64_t v286;
  int v287;
  uint64_t v288;
  const llvm::SmallPtrSetImplBase *v289;
  unint64_t v290;
  uint64_t v291;
  uint64_t v292;
  int v293;
  uint64_t v294;
  uint64_t *v295;
  uint64_t v296;
  uint64_t v297;
  unsigned int v298;
  int v300;
  BOOL v301;
  _QWORD *v302;
  uint64_t *v303;
  int v304;
  _QWORD *v305;
  uint64_t *****v306;
  int v307;
  int v308;
  uint64_t v309;
  llvm::Value **v310;
  llvm::Value *v311;
  int v312;
  char *v313;
  unsigned int v314;
  uint64_t v315;
  _QWORD *v316;
  int v317;
  uint64_t **v318;
  const char *v319;
  uint64_t v320;
  uint64_t v321;
  unint64_t v322;
  const char *v323;
  uint64_t v324;
  uint64_t v325;
  unint64_t v326;
  _QWORD *v327;
  int v328;
  uint64_t v329;
  int v330;
  uint64_t v331;
  BOOL v332;
  int v333;
  uint64_t v334;
  _QWORD *v335;
  uint64_t *v336;
  uint64_t v337;
  _QWORD *v338;
  uint64_t ***v339;
  uint64_t **v340;
  char *v341;
  uint64_t v342;
  void **v343;
  char *v344;
  void *v345;
  uint64_t v346;
  llvm::Value **v347;
  int v348;
  uint64_t v349;
  llvm::Value ***v350;
  uint64_t v351;
  llvm::Value ****v352;
  llvm::Value *v353;
  llvm::Value *v354;
  uint64_t *v355;
  uint64_t v356;
  uint64_t Declaration;
  uint64_t ***v358;
  char *v359;
  uint64_t v360;
  void **v361;
  char *v362;
  void *v363;
  uint64_t v364;
  uint64_t ***v365;
  int v366;
  uint64_t v367;
  _QWORD *v368;
  uint64_t *v369;
  uint64_t ***v370;
  uint64_t **n;
  uint64_t v372;
  _QWORD *v373;
  uint64_t *****v374;
  const llvm::APInt *v375;
  uint64_t **v376;
  llvm::ConstantInt *v377;
  unsigned int v378;
  char v379;
  const llvm::APInt *v380;
  llvm::ValueHandleBase *v381;
  llvm::ConstantInt *v382;
  unsigned int v383;
  unint64_t v384;
  llvm::ValueHandleBase *v385;
  size_t *v386;
  const void *v387;
  size_t v388;
  size_t v389;
  llvm::raw_ostream *v390;
  llvm::DivergenceTracker *v391;
  llvm *v392;
  uint64_t **v393;
  int v394;
  uint64_t **v395;
  uint64_t v396;
  _QWORD *v397;
  uint64_t *v398;
  unsigned int v399;
  void **v400;
  void *v401;
  _WORD *v402;
  void *v403;
  unsigned int v404;
  int v405;
  unsigned int v406;
  int v407;
  unint64_t v408;
  void *v409;
  uint64_t *v410;
  uint64_t *v411;
  int v412;
  uint64_t *v413;
  int v414;
  int v415;
  uint64_t v416;
  uint64_t *v417;
  uint64_t *v418;
  unsigned int v419;
  char v421;
  int v422;
  _BYTE *v423;
  int v424;
  _QWORD *v425;
  uint64_t *v426;
  uint64_t v427;
  char *v428;
  uint64_t v429;
  uint64_t v430;
  char *v431;
  uint64_t v432;
  int v433;
  int v434;
  int v435;
  BOOL v436;
  _QWORD *v437;
  uint64_t *****v438;
  char *v439;
  char *v440;
  uint64_t *v441;
  char *v442;
  int v443;
  int v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t v448;
  llvm::ValueAsMetadata **v449;
  llvm::ValueAsMetadata *v450;
  int v451;
  llvm::ValueAsMetadata *v452;
  unsigned __int8 *v453;
  uint64_t v454;
  _QWORD *v455;
  BOOL v456;
  int v457;
  int v458;
  uint64_t v459;
  _QWORD *v460;
  uint64_t v461;
  uint64_t v462;
  const llvm::DataLayout *v463;
  uint64_t ***v464;
  uint64_t ***v465;
  uint64_t v466;
  uint64_t **v467;
  unsigned int v468;
  unsigned int v469;
  uint64_t v470;
  uint64_t v471;
  int v472;
  uint64_t ***v473;
  uint64_t v474;
  uint64_t ***v475;
  unsigned int v476;
  uint64_t ***v477;
  uint64_t *v478;
  uint64_t v479;
  int v480;
  int v481;
  unsigned int v482;
  unsigned int v483;
  char v484;
  char v485;
  char v486;
  _BYTE *v487;
  _BYTE *v488;
  uint64_t v489;
  int v490;
  _BYTE v491[64];
  uint64_t v492;
  uint64_t v493;
  uint64_t *v494;
  _QWORD v495[2];
  unsigned int v496;
  _QWORD v497[5];
  char v498;
  int v499;
  void **v500;
  void **v501;
  uint64_t v502;
  int v503;
  _BYTE v504[64];
  _QWORD v505[2];
  int v506;
  uint64_t v507;
  _QWORD v508[65];
  llvm::ValueHandleBase *v509;
  void *v510;
  uint64_t v511;
  int v512;
  _BYTE v513[256];
  void *v514;
  uint64_t v515;
  uint64_t v516;
  uint64_t v517[2];
  int v518;
  uint64_t v519;
  uint64_t ***v520;
  char v521;
  int v522;
  uint64_t ***v523;
  _BYTE *v524;
  void *v525;
  uint64_t v526;
  int v527;
  _BYTE v528[256];
  unsigned int v529;
  __int128 v530;
  _QWORD **v531;
  int v532;
  _DWORD v533[3];
  void *v534;
  uint64_t v535;
  int v536;
  _BYTE v537[128];
  _BYTE *v538;
  void *v539;
  uint64_t v540;
  int v541;
  _BYTE v542[128];
  __int128 v543;
  unsigned int v544;
  __int128 v545;
  unsigned int v546;
  __int128 v547;
  int v548;
  _BYTE *v549;
  void *v550;
  uint64_t v551;
  int v552;
  _BYTE v553[256];
  __int128 v554;
  int v555;
  void *v556;
  uint64_t v557;
  uint64_t v558;
  void **v559;
  __int16 v560;
  uint64_t v561[2];
  int v562;
  uint64_t v563;
  uint64_t ***v564;
  char v565;
  int v566;
  __int128 v567;
  int v568;
  void *v569;
  uint64_t v570;
  _DWORD v571[16];
  void *v572[2];
  _DWORD v573[14];
  void **v574;
  void *v575;
  uint64_t v576;
  int v577;
  _WORD v578[32];
  unsigned int v579;
  __int128 __p;
  uint64_t v581;
  char v582;
  void *__src;
  uint64_t v584;
  _QWORD v585[19];

  v4 = MEMORY[0x1E0C80A78](a1, a2, a3, a4);
  v6 = (uint64_t ***)v5;
  v7 = v4;
  v585[17] = *MEMORY[0x1E0C80C00];
  v8 = *(unsigned __int16 *)(v5 + 18);
  v9 = 0;
  switch((v8 >> 4) & 0x3FF)
  {
    case 'd':
      return v9 & 1;
    case 'e':
    case 'j':
    case 'l':
      if (byte_1ED807D28)
        goto LABEL_7;
      v10 = *(_QWORD *)(v5 + 40);
      v556 = "agx.sgpr_emulation";
      v560 = 259;
      NamedMetadata = llvm::Module::getNamedMetadata(v10, (uint64_t)&v556);
      if (!byte_1ED807968 && !NamedMetadata)
      {
LABEL_50:
        v9 = 0;
        return v9 & 1;
      }
      LOWORD(v8) = *((_WORD *)v6 + 9);
LABEL_7:
      if ((v8 & 1) == 0)
      {
        v12 = v6[11];
LABEL_9:
        v13 = v12;
        goto LABEL_10;
      }
      llvm::Function::BuildLazyArguments((llvm::Function *)v6);
      v12 = v6[11];
      if ((*((_WORD *)v6 + 9) & 1) == 0)
        goto LABEL_9;
      llvm::Function::BuildLazyArguments((llvm::Function *)v6);
      v13 = v6[11];
LABEL_10:
      for (i = &v13[5 * (_QWORD)v6[12]]; v12 != i; v12 += 5)
      {
        if ((*((_BYTE *)v12 + 23) & 0x10) == 0)
        {
          v556 = "arg";
          v560 = 259;
          llvm::Value::setName((uint64_t ***)v12, (uint64_t)&v556);
        }
      }
      v15 = (uint64_t **)(v6 + 9);
      v16 = v6[10];
      if (v16 != (uint64_t **)(v6 + 9))
      {
        do
        {
          if (v16)
            v17 = (uint64_t ***)(v16 - 3);
          else
            v17 = 0;
          if ((*((_BYTE *)v17 + 23) & 0x10) == 0)
          {
            v556 = "bb";
            v560 = 259;
            llvm::Value::setName(v17, (uint64_t)&v556);
          }
          v18 = (uint64_t **)(v17 + 5);
          for (j = v17[6]; j != v18; j = (uint64_t **)j[1])
          {
            if (j)
              v20 = (uint64_t ***)(j - 3);
            else
              v20 = 0;
            if ((*((_BYTE *)v20 + 23) & 0x10) == 0 && *((_BYTE *)*v20 + 8) != 7)
            {
              v556 = "tmp";
              v560 = 259;
              llvm::Value::setName(v20, (uint64_t)&v556);
            }
          }
          v16 = (uint64_t **)v16[1];
        }
        while (v16 != v15);
      }
      v21 = **(void ****)(v7 + 8);
      do
      {
        v22 = *v21;
        v21 += 2;
      }
      while (v22 != &llvm::DominatorTreeWrapperPass::ID);
      v23 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v21 - 1) + 96))(*(v21 - 1), &llvm::DominatorTreeWrapperPass::ID);
      v24 = **(void ****)(v7 + 8);
      do
      {
        v25 = *v24;
        v24 += 2;
      }
      while (v25 != &llvm::PostDominatorTreeWrapperPass::ID);
      v26 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v24 - 1) + 96))(*(v24 - 1), &llvm::PostDominatorTreeWrapperPass::ID);
      v508[0] = 1;
      for (k = 1; k != 65; k += 4)
        v508[k] = -4096;
      sub_1C5EA5D84((uint64_t)v6[5], (uint64_t)v508);
      v28 = **(char ****)(v7 + 8);
      do
      {
        v29 = *v28;
        v28 += 2;
      }
      while (v29 != llvm::LoopInfoWrapperPass::ID);
      v30 = (llvm::Loop *)(v23 + 32);
      v31 = (const llvm::DataLayout *)(v6[5] + 34);
      v32 = v26 + 32;
      v33 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v28 - 1) + 96))(*(v28 - 1), llvm::LoopInfoWrapperPass::ID);
      v35 = *(llvm ***)(v33 + 56);
      v36 = *(llvm ***)(v33 + 64);
      if (v35 != v36)
      {
        v37 = (const llvm::DominatorTree *)(v33 + 32);
        do
        {
          v38 = *v35++;
          llvm::formLCSSARecursively(v38, v30, v37, 0, v34);
        }
        while (v35 != v36);
      }
      v487 = v491;
      v488 = v491;
      v489 = 8;
      v490 = 0;
      sub_1C5EA6F60((uint64_t)v6[5], (llvm::SmallPtrSetImplBase *)&v487);
      v39 = operator new();
      v556 = &off_1E8170000;
      v557 = (uint64_t)sub_1C5EACEE8;
      v559 = &v556;
      llvm::DivergenceTracker::DivergenceTracker(v39, (llvm::Function *)v6, (uint64_t)v30, v32, v31, (uint64_t)v508, (uint64_t)&v556, 0, (uint64_t)&v487);
      if (v559 == &v556)
      {
        v40 = (void (**)(void))((char *)v556 + 32);
      }
      else
      {
        if (!v559)
          goto LABEL_46;
        v40 = (void (**)(void))((char *)*v559 + 40);
      }
      (*v40)();
LABEL_46:
      v41 = *(_QWORD *)(v7 + 80);
      *(_QWORD *)(v7 + 80) = v39;
      if (!v41)
        goto LABEL_64;
      v42 = *(_QWORD **)(v41 + 1328);
      if (v42 == (_QWORD *)(v41 + 1304))
      {
        v43 = 4;
        v42 = (_QWORD *)(v41 + 1304);
      }
      else
      {
        if (!v42)
          goto LABEL_53;
        v43 = 5;
      }
      (*(void (**)(void))(*v42 + 8 * v43))();
LABEL_53:
      v44 = *(void **)(v41 + 1136);
      if (v44 != (void *)(v41 + 1152))
        free(v44);
      v45 = *(void **)(v41 + 984);
      if (v45 != *(void **)(v41 + 976))
        free(v45);
      v46 = *(void **)(v41 + 824);
      if (v46 != *(void **)(v41 + 816))
        free(v46);
      v47 = *(void **)(v41 + 536);
      if (v47 != *(void **)(v41 + 528))
        free(v47);
      if (*(_QWORD *)v41 != v41 + 16)
        free(*(void **)v41);
      MEMORY[0x1CAA32FC0](v41, 0x10E0C40A0334FC4);
LABEL_64:
      v48 = operator new();
      v559 = 0;
      llvm::DivergenceTracker::DivergenceTracker(v48, (llvm::Function *)v6, (uint64_t)v30, v32, v31, (uint64_t)v508, (uint64_t)&v556, 0, 0);
      if (v559 == &v556)
      {
        v49 = (void (**)(void))((char *)v556 + 32);
      }
      else
      {
        if (!v559)
          goto LABEL_69;
        v49 = (void (**)(void))((char *)*v559 + 40);
      }
      (*v49)();
LABEL_69:
      v50 = *(_QWORD *)(v7 + 88);
      *(_QWORD *)(v7 + 88) = v48;
      if (!v50)
        goto LABEL_86;
      v51 = *(_QWORD **)(v50 + 1328);
      if (v51 == (_QWORD *)(v50 + 1304))
      {
        v52 = 4;
        v51 = (_QWORD *)(v50 + 1304);
      }
      else
      {
        if (!v51)
          goto LABEL_75;
        v52 = 5;
      }
      (*(void (**)(void))(*v51 + 8 * v52))();
LABEL_75:
      v53 = *(void **)(v50 + 1136);
      if (v53 != (void *)(v50 + 1152))
        free(v53);
      v54 = *(void **)(v50 + 984);
      if (v54 != *(void **)(v50 + 976))
        free(v54);
      v55 = *(void **)(v50 + 824);
      if (v55 != *(void **)(v50 + 816))
        free(v55);
      v56 = *(void **)(v50 + 536);
      if (v56 != *(void **)(v50 + 528))
        free(v56);
      if (*(_QWORD *)v50 != v50 + 16)
        free(*(void **)v50);
      MEMORY[0x1CAA32FC0](v50, 0x10E0C40A0334FC4);
LABEL_86:
      sub_1C55E80B4(v7, v6, (byte_1ED807A28 | byte_1ED807D28) != 0);
      v57 = byte_1ED807D28;
      if (byte_1ED807D28 || !*(_BYTE *)(v7 + 28))
      {
        v9 = 0;
        goto LABEL_88;
      }
      v472 = byte_1ED807D28;
      v59 = (uint64_t)v6[5];
      v60 = **(void ****)(v7 + 8);
      do
      {
        v61 = *v60;
        v60 += 2;
      }
      while (v61 != &llvm::FunctionGroupInfoWrapperPass::ID);
      v62 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v60 - 1) + 96))(*(v60 - 1), &llvm::FunctionGroupInfoWrapperPass::ID);
      v63 = (*(uint64_t (**)(_QWORD, uint64_t ***))(**(_QWORD **)(v62 + 32) + 24))(*(_QWORD *)(v62 + 32), v6);
      v9 = 0;
      v64 = (*((unsigned __int16 *)v6 + 9) >> 4) & 0x3FF;
      if (v64)
        v65 = v64 == 8;
      else
        v65 = 1;
      if (v65)
        goto LABEL_100;
      v57 = v472;
      if (v64 == 255)
        goto LABEL_88;
      v462 = v63;
      v68 = sub_1C5EAC9F4(v59, v63);
      if ((v68 & 0xFF00000000) == 0)
      {
        v9 = 0;
LABEL_100:
        v57 = v472;
        goto LABEL_88;
      }
      v69 = v68;
      if (!byte_1ED807C68)
        goto LABEL_112;
      v146 = llvm::dbgs((llvm *)v68);
      v147 = v146;
      v148 = (void *)*((_QWORD *)v146 + 4);
      if (*((_QWORD *)v146 + 3) - (_QWORD)v148 > 0x20uLL)
      {
        qmemcpy(v148, "Divergence analysis results for: ", 33);
        *((_QWORD *)v146 + 4) += 33;
      }
      else
      {
        llvm::raw_ostream::write(v146, "Divergence analysis results for: ", 0x21uLL);
      }
      if ((*((_BYTE *)v6 + 23) & 0x10) == 0)
        goto LABEL_692;
      v149 = ***v6;
      v150 = *(_QWORD *)(v149 + 152);
      v151 = *(unsigned int *)(v149 + 168);
      if (!(_DWORD)v151)
        goto LABEL_689;
      LODWORD(v152) = (v151 - 1) & ((v6 >> 4) ^ (v6 >> 9));
      v153 = (uint64_t ****)(v150 + 16 * v152);
      v154 = *v153;
      if (*v153 != v6)
      {
        v155 = 1;
        while (v154 != (uint64_t ***)-4096)
        {
          v156 = v152 + v155++;
          v152 = v156 & (v151 - 1);
          v154 = *(uint64_t ****)(v150 + 16 * v152);
          if (v154 == v6)
          {
            v153 = (uint64_t ****)(v150 + 16 * v152);
            goto LABEL_690;
          }
        }
LABEL_689:
        v153 = (uint64_t ****)(v150 + 16 * v151);
      }
LABEL_690:
      v386 = (size_t *)v153[1];
      v389 = *v386;
      v387 = v386 + 2;
      v388 = v389;
      v390 = (llvm::raw_ostream *)*((_QWORD *)v147 + 4);
      if (v389 <= *((_QWORD *)v147 + 3) - (_QWORD)v390)
      {
        if (v388)
        {
          memcpy(v390, v387, v388);
          v390 = (llvm::raw_ostream *)(*((_QWORD *)v147 + 4) + v388);
          *((_QWORD *)v147 + 4) = v390;
        }
      }
      else
      {
        llvm::raw_ostream::write(v147, (const char *)v387, v388);
LABEL_692:
        v390 = (llvm::raw_ostream *)*((_QWORD *)v147 + 4);
      }
      if ((unint64_t)v390 >= *((_QWORD *)v147 + 3))
      {
        v390 = llvm::raw_ostream::write(v147, 10);
      }
      else
      {
        *((_QWORD *)v147 + 4) = (char *)v390 + 1;
        *(_BYTE *)v390 = 10;
      }
      v391 = *(llvm::DivergenceTracker **)(v7 + 80);
      v392 = llvm::dbgs(v390);
      llvm::DivergenceTracker::print(v391, v392);
LABEL_112:
      v463 = v31;
      v464 = v6;
      v70 = v6[10];
      if (v70 == v15)
      {
        v72 = 0;
        v71 = 0;
      }
      else
      {
        v71 = 0;
        v72 = 0;
        v73 = *(_QWORD *)(v7 + 56);
        v74 = *(_DWORD *)(v7 + 72);
        v75 = v6[10];
        do
        {
          if (v75)
            v76 = (uint64_t)(v75 - 3);
          else
            v76 = 0;
          v556 = 0;
          v77 = sub_1C55EDB00(v73, v74, v76, &v556);
          v73 = *(_QWORD *)(v7 + 56);
          v74 = *(_DWORD *)(v7 + 72);
          if (v77)
            v78 = v556;
          else
            v78 = (_DWORD *)(v73 + 88 * v74);
          if (v71 <= v78[5])
            v71 = v78[5];
          v79 = v78[17] + v78[18];
          if (v72 <= v79)
            v72 = v79;
          v75 = (uint64_t **)v75[1];
        }
        while (v75 != v15);
      }
      if (*(_BYTE *)(v7 + 96))
        v141 = 0;
      else
        v141 = v71;
      v9 = 0;
      v6 = v464;
      v57 = v472;
      if (v72 - v141 < 3)
        goto LABEL_88;
      v468 = v141;
      v479 = v59 + 272;
      v142 = &v558;
      v556 = &v558;
      v557 = 0x2000000000;
      v143 = 0uLL;
      v567 = 0u;
      v568 = 0;
      if (v70 == v15)
      {
        v144 = 0;
        v145 = v141;
      }
      else
      {
        v145 = v141;
        do
        {
          if (v70)
            v157 = (uint64_t ***)(v70 - 3);
          else
            v157 = 0;
          v514 = 0;
          v158 = sub_1C55EDB00(*(_QWORD *)(v7 + 56), *(_DWORD *)(v7 + 72), (uint64_t)v157, &v514);
          v159 = v514;
          if (!v158)
            v159 = (_DWORD *)(*(_QWORD *)(v7 + 56) + 88 * *(unsigned int *)(v7 + 72));
          if (v159[18] + v159[17] > v468)
          {
            v514 = 0;
            v160 = sub_1C55EC64C(*(_QWORD *)(v7 + 32), *(_DWORD *)(v7 + 48), (uint64_t)v157, &v514);
            v161 = v514;
            if (!v160)
              v161 = (void *)(*(_QWORD *)(v7 + 32) + 1736 * *(unsigned int *)(v7 + 48));
            sub_1C55ECC9C(v157, &v514, (uint64_t)v161 + 8, v479, *(_QWORD *)(v7 + 80), *(_QWORD *)(v7 + 88), (uint64_t)&v556, v468);
          }
          v70 = (uint64_t **)v70[1];
        }
        while (v70 != v15);
        v142 = (uint64_t *)v556;
        v144 = v557;
        v143 = 0uLL;
      }
      v523 = v464;
      v524 = v528;
      v525 = v528;
      v526 = 32;
      v527 = 0;
      v529 = (v69 + 127) & 0xFFFFFF80;
      v530 = v143;
      v531 = v464[5] + 34;
      *(_QWORD *)&v533[1] = v537;
      v534 = v537;
      v535 = 16;
      v536 = 0;
      v538 = v542;
      v539 = v542;
      v540 = 16;
      v541 = 0;
      v543 = v143;
      v544 = 0;
      v545 = v143;
      v546 = 0;
      v548 = 0;
      v547 = v143;
      v549 = v553;
      v550 = v553;
      v551 = 32;
      v552 = 0;
      v162 = __clz(v144);
      v554 = v143;
      v555 = 0;
      if (v144)
        v163 = 126 - 2 * v162;
      else
        v163 = 0;
      v533[0] = ((v69 + 127) & 0xFFFFFF80) - v69;
      sub_1C55EE9C4((uint64_t)v142, (uint64_t)&v142[27 * v144], v163, 1);
      v164 = 0;
      v165 = 0;
      v514 = &v516;
      v515 = 0x2000000000;
      v509 = (llvm::ValueHandleBase *)v513;
      v510 = v513;
      v511 = 32;
      v512 = 0;
      do
      {
        if (!(_DWORD)v557)
          goto LABEL_466;
        v166 = (char *)v556 + 216 * v557;
        v574 = (void **)v578;
        v167 = *((_QWORD *)v166 - 27);
        if (*((_QWORD *)v166 - 26) == v167)
        {
          v575 = v578;
          v168 = *((unsigned int *)v166 - 49);
          if ((_DWORD)v168)
            memmove(v578, *((const void **)v166 - 26), 8 * v168);
        }
        else
        {
          v575 = (void *)*((_QWORD *)v166 - 26);
          *((_QWORD *)v166 - 26) = v167;
        }
        v576 = *((_QWORD *)v166 - 25);
        v577 = *((_DWORD *)v166 - 48);
        *((_QWORD *)v166 - 25) = 8;
        *((_DWORD *)v166 - 48) = 0;
        v579 = *((_DWORD *)v166 - 30);
        v169 = *((_OWORD *)v166 - 7);
        v581 = *((_QWORD *)v166 - 12);
        __p = v169;
        *((_QWORD *)v166 - 13) = 0;
        *((_QWORD *)v166 - 12) = 0;
        *((_QWORD *)v166 - 14) = 0;
        v582 = *(v166 - 88);
        __src = v585;
        v584 = 0x800000000;
        if (*((_DWORD *)v166 - 18))
          sub_1C614D378((uint64_t)&__src, (uint64_t)(v166 - 80));
        v170 = v557 - 1;
        LODWORD(v557) = v170;
        v171 = (void **)v556;
        v172 = (char *)v556 + 216 * v170;
        v173 = (char *)*((_QWORD *)v172 + 17);
        if (v173 != v172 + 152)
          free(v173);
        if (v172[127] < 0)
          operator delete(v171[27 * v170 + 13]);
        v174 = (void *)*((_QWORD *)v172 + 1);
        if (v174 != *(void **)v172)
          free(v174);
        v175 = (void **)v479;
        if ((_DWORD)v557)
          v176 = *((_DWORD *)v556 + 54 * v557 - 30) - 1;
        else
          v176 = 0;
        if (!v582)
        {
          v582 = 1;
          v177 = (unint64_t *)v575;
          if (v575 == v574)
            v178 = (uint64_t *)((char *)&v576 + 4);
          else
            v178 = &v576;
          v179 = *(unsigned int *)v178;
          v180 = (unint64_t *)((char *)v575 + 8 * v179);
          if ((_DWORD)v179)
          {
            v181 = 8 * v179;
            do
            {
              if (*v177 < 0xFFFFFFFFFFFFFFFELL)
                goto LABEL_317;
              ++v177;
              v181 -= 8;
            }
            while (v181);
            v177 = v180;
          }
LABEL_317:
          v182 = v584;
          v482 = v165;
          if ((_DWORD)v584)
          {
            if (v177 != v180)
            {
              v183 = 0;
              for (m = v177; ; m = v185 - 1)
              {
                ++v183;
                v185 = m + 1;
                do
                {
                  if (v185 == v180)
                    goto LABEL_325;
                  v186 = *v185++;
                }
                while (v186 > 0xFFFFFFFFFFFFFFFDLL);
              }
            }
            v183 = 0;
LABEL_325:
            if (v183 + v584 <= HIDWORD(v584))
            {
              v187 = (char *)__src;
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v585, v183 + v584, 8);
              v187 = (char *)__src;
              v182 = v584;
            }
            v188 = &v187[8 * v182];
            if (v182 >= v183)
            {
              sub_1C6177054((unsigned int *)&__src, &v188[-8 * v183], v188);
              if (&v188[-8 * v183] != v187)
                memmove(&v187[8 * v183], v187, 8 * v182 - 8 * v183);
              v175 = (void **)v479;
              if (v177 != v180)
              {
                v195 = *v177;
                while (1)
                {
                  *(_QWORD *)v187 = v195;
                  v196 = v177 + 1;
                  do
                  {
                    if (v196 == v180)
                      goto LABEL_354;
                    v197 = *v196++;
                    v195 = v197;
                  }
                  while (v197 > 0xFFFFFFFFFFFFFFFDLL);
                  v187 += 8;
                  v177 = v196 - 1;
                }
              }
            }
            else
            {
              LODWORD(v584) = v182 + v183;
              if (v182)
              {
                memcpy(&v187[8 * (v182 + v183) + -8 * v182], v187, 8 * v182);
                v175 = (void **)v479;
                do
                {
                  v190 = *v177;
                  v189 = v177 + 1;
                  *(_QWORD *)v187 = v190;
                  v187 += 8;
                  while (v189 != v180)
                  {
                    v191 = *v189++;
                    if (v191 <= 0xFFFFFFFFFFFFFFFDLL)
                    {
                      v177 = v189 - 1;
                      goto LABEL_336;
                    }
                  }
                  v177 = v180;
LABEL_336:
                  --v182;
                }
                while (v182);
              }
              else
              {
                v175 = (void **)v479;
              }
              if (v177 != v180)
              {
                v192 = *v177;
                while (1)
                {
                  *(_QWORD *)v188 = v192;
                  v193 = v177 + 1;
                  do
                  {
                    if (v193 == v180)
                      goto LABEL_354;
                    v194 = *v193++;
                    v192 = v194;
                  }
                  while (v194 > 0xFFFFFFFFFFFFFFFDLL);
                  v188 += 8;
                  v177 = v193 - 1;
                }
              }
            }
          }
          else
          {
            sub_1C618F808((unsigned int *)&__src, v177, v180, v180);
          }
LABEL_354:
          v500 = &v556;
          v501 = v175;
          v198 = 126 - 2 * __clz(v584);
          if ((_DWORD)v584)
            v199 = v198;
          else
            v199 = 0;
          sub_1C55F342C((uint64_t)__src, (uint64_t **)__src + v584, (uint64_t *)&v500, v199, 1);
          v165 = v482;
          v145 = v468;
          goto LABEL_358;
        }
        while (1)
        {
          do
          {
            while (1)
            {
LABEL_358:
              if (!(_DWORD)v584)
              {
                v217 = 0;
                goto LABEL_399;
              }
              v200 = (uint64_t *)*((_QWORD *)__src + v584 - 1);
              LODWORD(v584) = v584 - 1;
              v201 = sub_1C477672C((uint64_t)&v509, (uint64_t)v200);
              v202 = v510 == v509 ? (uint64_t *)((char *)&v511 + 4) : &v511;
              if (v201 == (_QWORD *)((char *)v510 + 8 * *(unsigned int *)v202))
                break;
              v203 = sub_1C55EE1E4(v200, (uint64_t)v175, *(_QWORD *)(v7 + 80), *(_QWORD *)(v7 + 88));
              v204 = v579 - HIDWORD(v203);
              if ((int)(v579 - v164) < SHIDWORD(v203))
                v204 = 0;
              v579 = v204;
              if (v204 <= v176)
                goto LABEL_378;
            }
          }
          while (!sub_1C627EA80(v200, (uint64_t)v531));
          v205 = v165;
          v206 = *v200;
          v207 = v533[0];
          llvm::DataLayout::getAlignment((uint64_t)v531, *v200);
          v209 = v208;
          sub_1C4768AD0((uint64_t)v531, v206);
          v212 = v211;
          if ((_DWORD)v210 == 1)
          if ((((1 << v209) + v529 + v207 - 1) & -(int)(1 << v209))
             - v529
             + ((v212 + 7) >> 3) > 0x100)
          {
            v217 = 1;
            v165 = v205;
            v145 = v468;
            goto LABEL_399;
          }
          v533[0] = (((1 << v209) + v529 + v207 - 1) & -(int)(1 << v209)) - v529 + ((v212 + 7) >> 3);
          v532 = (((1 << v209) + v529 + v207 - 1) & -(int)(1 << v209)) - v529;
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v509, (uint64_t)v200);
          v213 = sub_1C55EE1E4(v200, v479, *(_QWORD *)(v7 + 80), *(_QWORD *)(v7 + 88));
          v214 = v579 - HIDWORD(v213);
          if ((int)(v579 - v164) < SHIDWORD(v213))
            v214 = 0;
          v579 = v214;
          sub_1C627E574((uint64_t)&v523, (uint64_t)v200);
          v215 = v200[1];
          v145 = v468;
          if (v215)
          {
            do
            {
              v216 = *(_QWORD *)(v215 + 8);
              sub_1C627E758((uint64_t)&v523, (uint64_t **)v215);
              v215 = v216;
            }
            while (v216);
          }
          v204 = v579;
          v165 = 1;
          if (v579 <= v176)
            break;
          v175 = (void **)v479;
        }
LABEL_378:
        if (v204)
        {
          if ((_DWORD)v557)
          {
            v218 = 0;
            while (*(_DWORD *)((char *)v556 + v218 + 96) <= v204)
            {
              v218 += 216;
              if (216 * v557 == v218)
                goto LABEL_383;
            }
            v483 = v165;
            v236 = sub_1C55F8AC8((uint64_t)&v556, (unint64_t)&v574);
            v237 = v556;
            v238 = v557;
            v239 = (char *)v556 + 216 * v557;
            v240 = v239 + 32;
            *(_QWORD *)v239 = v239 + 32;
            v242 = (const void *)*((_QWORD *)v239 - 27);
            v241 = (const void *)*((_QWORD *)v239 - 26);
            if (v241 == v242)
            {
              *((_QWORD *)v239 + 1) = v240;
              v243 = *((unsigned int *)v239 - 49);
              if ((_DWORD)v243)
                memmove(v240, v241, 8 * v243);
            }
            else
            {
              *((_QWORD *)v239 + 1) = v241;
              *((_QWORD *)v239 - 26) = v242;
              LODWORD(v243) = *((_DWORD *)v239 - 49);
            }
            *((_DWORD *)v239 + 4) = *((_DWORD *)v239 - 50);
            *((_DWORD *)v239 + 5) = v243;
            *((_DWORD *)v239 + 6) = *((_DWORD *)v239 - 48);
            *((_QWORD *)v239 - 25) = 8;
            *((_DWORD *)v239 - 48) = 0;
            v244 = &v237[216 * v238];
            v245 = *((_DWORD *)v239 - 30);
            *((_QWORD *)v244 + 17) = v244 + 152;
            v246 = (uint64_t)(v244 + 136);
            *(_DWORD *)(v246 - 40) = v245;
            *(_OWORD *)(v246 - 32) = *((_OWORD *)v239 - 7);
            *(_QWORD *)(v246 - 16) = *((_QWORD *)v239 - 12);
            *((_QWORD *)v239 - 14) = 0;
            *((_QWORD *)v239 - 13) = 0;
            *((_QWORD *)v239 - 12) = 0;
            *(_BYTE *)(v246 - 8) = *(v239 - 88);
            *(_QWORD *)(v246 + 8) = 0x800000000;
            if (*((_DWORD *)v239 - 18))
              sub_1C614D378(v246, (uint64_t)(v239 - 80));
            v247 = (const llvm::SmallPtrSetImplBase *)&v237[v218];
            v248 = (char *)v556;
            v249 = v557;
            v250 = (char *)v556 + 216 * v557 - 216;
            if (&v237[v218] != v250)
            {
              do
              {
                v251 = v250 - 216;
                llvm::SmallPtrSetImplBase::MoveFrom((uint64_t)v250, 8, (double *)v250 - 27);
                *((_DWORD *)v250 + 24) = *((_DWORD *)v250 - 30);
                v252 = (void **)(v250 + 104);
                if (v250[127] < 0)
                  operator delete(*v252);
                *(_OWORD *)v252 = *((_OWORD *)v250 - 7);
                *((_QWORD *)v250 + 15) = *((_QWORD *)v250 - 12);
                *(v250 - 89) = 0;
                *(v250 - 112) = 0;
                v250[128] = *(v250 - 88);
                sub_1C614D378((uint64_t)(v250 + 136), (uint64_t)(v250 - 80));
                v250 -= 216;
              }
              while (v251 != (char *)v247);
              v249 = v557;
              v248 = (char *)v556;
            }
            LODWORD(v557) = v249 + 1;
            v253 = &v248[216 * (v249 + 1)];
            v255 = v236 >= (char *)v247 && v236 < v253;
            v256 = (const llvm::SmallPtrSetImplBase *)&v236[216 * v255];
            if (v247 != v256)
              llvm::SmallPtrSetImplBase::CopyFrom((llvm::SmallPtrSetImplBase *)&v237[v218], v256);
            v257 = &v236[216 * v255];
            *(_DWORD *)&v237[v218 + 96] = *((_DWORD *)v257 + 24);
            std::string::operator=((std::string *)&v237[v218 + 104], (const std::string *)(v257 + 104));
            v237[v218 + 128] = v257[128];
            llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=((uint64_t)&v237[v218 + 136], (uint64_t)(v257 + 136));
            v217 = 0;
            v165 = v483;
          }
          else
          {
LABEL_383:
            v219 = v165;
            v220 = sub_1C55F8AC8((uint64_t)&v556, (unint64_t)&v574);
            v221 = (char *)v556;
            v222 = v557;
            v223 = (char *)v556 + 216 * v557;
            v224 = v223 + 32;
            *(_QWORD *)v223 = v223 + 32;
            v225 = (const void *)*((_QWORD *)v220 + 1);
            if (v225 == *(const void **)v220)
            {
              *((_QWORD *)v223 + 1) = v224;
            }
            else
            {
              v258 = *((unsigned int *)v220 + 4);
              v224 = malloc_type_malloc(8 * v258, 0x4065EBACuLL);
              if (!v224 && ((_DWORD)v258 || (v224 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
LABEL_816:
                llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
              *((_QWORD *)v223 + 1) = v224;
              v225 = *(const void **)v220;
            }
            *((_DWORD *)v223 + 4) = *((_DWORD *)v220 + 4);
            v226 = (const void *)*((_QWORD *)v220 + 1);
            v227 = *((_DWORD *)v220 + 5);
            if (v226 == v225)
              v228 = *((_DWORD *)v220 + 5);
            else
              v228 = *((_DWORD *)v220 + 4);
            if (v228)
            {
              memmove(v224, v226, 8 * v228);
              v227 = *((_DWORD *)v220 + 5);
            }
            *((_DWORD *)v223 + 5) = v227;
            *((_DWORD *)v223 + 6) = *((_DWORD *)v220 + 6);
            v229 = &v221[216 * v222];
            *((_DWORD *)v229 + 24) = *((_DWORD *)v220 + 24);
            v230 = v229 + 104;
            if (v220[127] < 0)
            {
              sub_1C47EBC30(v230, *((void **)v220 + 13), *((_QWORD *)v220 + 14));
            }
            else
            {
              v231 = *(_OWORD *)(v220 + 104);
              *((_QWORD *)v229 + 15) = *((_QWORD *)v220 + 15);
              *(_OWORD *)v230 = v231;
            }
            v232 = &v221[216 * v222];
            v233 = v220[128];
            *((_QWORD *)v232 + 17) = v232 + 152;
            v234 = (uint64_t)(v232 + 136);
            *(_BYTE *)(v234 - 8) = v233;
            *(_QWORD *)(v234 + 8) = 0x800000000;
            if (*((_DWORD *)v220 + 36))
              llvm::DirectedGraph<llvm::DDGNode,llvm::DDGEdge>::operator=(v234, (uint64_t)(v220 + 136));
            v217 = 0;
            LODWORD(v557) = v557 + 1;
            v165 = v219;
          }
          v145 = v468;
        }
        else
        {
          v217 = 0;
        }
LABEL_399:
        v235 = v579;
        if (v164 > v579)
          v235 = v164;
        if (!(_DWORD)v584)
          v164 = v235;
        if (__src != v585)
          free(__src);
        if (SHIBYTE(v581) < 0)
          operator delete((void *)__p);
        if (v575 != v574)
          free(v575);
      }
      while (!v217);
      if (*(_BYTE *)(v7 + 96))
        goto LABEL_595;
      if ((_DWORD)v557)
      {
        v259 = (char *)v556;
        v260 = (char *)v556 + 216 * v557;
        v484 = v165;
        do
        {
          v261 = *((_QWORD *)v259 + 1);
          if (v261 == *(_QWORD *)v259)
            v262 = 20;
          else
            v262 = 16;
          v263 = *(unsigned int *)&v259[v262];
          if ((_DWORD)v263)
          {
            v264 = 8 * v263;
            v265 = (unint64_t *)*((_QWORD *)v259 + 1);
            while (*v265 >= 0xFFFFFFFFFFFFFFFELL)
            {
              ++v265;
              v264 -= 8;
              if (!v264)
              {
                v266 = 0;
                goto LABEL_462;
              }
            }
          }
          else
          {
            v265 = (unint64_t *)*((_QWORD *)v259 + 1);
          }
          v267 = (unint64_t *)(v261 + 8 * v263);
          if (v265 == v267)
          {
            v266 = 0;
            LOBYTE(v165) = v484;
          }
          else
          {
            v266 = 0;
            v268 = (uint64_t *)*v265;
LABEL_451:
            v269 = sub_1C477672C((uint64_t)&v509, (uint64_t)v268);
            if (v510 == v509)
              v270 = (uint64_t *)((char *)&v511 + 4);
            else
              v270 = &v511;
            if (v269 != (_QWORD *)((char *)v510 + 8 * *(unsigned int *)v270))
              v266 += sub_1C55EE1E4(v268, v479, *(_QWORD *)(v7 + 80), *(_QWORD *)(v7 + 88)) >> 32;
            v271 = v265 + 1;
            while (v271 != v267)
            {
              v272 = *v271++;
              v268 = (uint64_t *)v272;
              if (v272 <= 0xFFFFFFFFFFFFFFFDLL)
              {
                v265 = v271 - 1;
                goto LABEL_451;
              }
            }
            LOBYTE(v165) = v484;
          }
LABEL_462:
          if (v164 <= ((*((_DWORD *)v259 + 24) - v266) & ~((*((_DWORD *)v259 + 24) - v266) >> 31)))
            v164 = (*((_DWORD *)v259 + 24) - v266) & ~((*((_DWORD *)v259 + 24) - v266) >> 31);
          v259 += 216;
        }
        while (v259 != v260);
        v145 = v468;
      }
LABEL_466:
      if (*(_BYTE *)(v7 + 96))
        goto LABEL_595;
      v273 = v164 + v145;
      v470 = *(_QWORD *)(v7 + 80);
      v466 = *(_QWORD *)(v7 + 88);
      v505[0] = 0;
      v505[1] = 0;
      v506 = 0;
      v469 = v164 + v145;
      if (v164 + v145 == -1)
      {
        v274 = 0;
        v275 = -1;
      }
      else
      {
        sub_1C55EABB0((unint64_t)&v574, v523);
        v274 = v505;
        sub_1C55EC454((uint64_t)v505, (uint64_t)&v574);
        sub_1C55E7FDC((uint64_t)&v574);
        v275 = v273 - 2;
        if (v273 <= 2)
          v275 = v164 + v145;
      }
      v476 = v275;
      v500 = (void **)v504;
      v501 = (void **)v504;
      v502 = 8;
      v503 = 0;
      v276 = v533[0];
      v572[0] = v573;
      v572[1] = (void *)0x600000000;
      sub_1C4765AA4((char *)v572, (v533[0] + 63) >> 6, 0);
      v573[12] = v276;
      v569 = v571;
      v570 = 0x800000000;
      v574 = (void **)v578;
      v575 = v578;
      v576 = 32;
      v577 = 0;
      v499 = 0;
      v497[0] = &v523;
      v497[1] = &v569;
      v497[2] = v572;
      v497[3] = &v499;
      v497[4] = &v500;
      v498 = 1;
      v277 = v523[10];
      v473 = v523 + 9;
      v485 = v165;
      if (v277 == (uint64_t **)(v523 + 9))
      {
        v278 = 0;
        v279 = v469;
        goto LABEL_586;
      }
      v280 = 0;
      v278 = 0;
      v480 = 0;
      v460 = v274;
      break;
    default:
      if (byte_1ED807D28)
        goto LABEL_7;
      goto LABEL_50;
  }
  do
  {
    if (v277)
      v281 = (uint64_t)(v277 - 3);
    else
      v281 = 0;
    v282 = (char *)sub_1C477672C((uint64_t)&v500, v281);
    if (v501 == v500)
      v283 = (uint64_t *)((char *)&v502 + 4);
    else
      v283 = &v502;
    if (v282 == (char *)&v501[*(unsigned int *)v283])
    {
      v284 = sub_1C477672C((uint64_t)&v533[1], v281);
      v285 = v534 == *(void **)&v533[1] ? (uint64_t *)((char *)&v535 + 4) : &v535;
      if (v284 != (_QWORD *)((char *)v534 + 8 * *(unsigned int *)v285))
      {
        v461 = v281;
        if (v274)
        {
          v495[0] = 0;
          v286 = v281;
          v287 = sub_1C55EC64C(*v274, *((_DWORD *)v274 + 4), v281, v495);
          v288 = v495[0];
          if (!v287)
            v288 = *v274 + 1736 * *((unsigned int *)v274 + 4);
          v289 = (const llvm::SmallPtrSetImplBase *)(v288 + 8);
          sub_1C627EFE4((uint64_t)v495, v461, (_QWORD *)(v288 + 296));
          MEMORY[0x1CAA32FB4](v278, 8);
          v278 = v495[0];
          v280 = v496;
          MEMORY[0x1CAA32FB4](0, 8);
          if (v289 != (const llvm::SmallPtrSetImplBase *)&v574)
            llvm::SmallPtrSetImplBase::CopyFrom((llvm::SmallPtrSetImplBase *)&v574, v289);
          v290 = sub_1C55EDD00((uint64_t)v531, &v574, v470, v466, 0);
          v480 = HIDWORD(v290) + v290;
        }
        else
        {
          v286 = v281;
        }
        v291 = *(_QWORD *)(v286 + 48);
        v493 = v291;
        v494 = 0;
        v492 = v286 + 40;
        if (v291 == v286 + 40)
        {
LABEL_495:
          sub_1C627F23C((uint64_t)v497, &v493, &v492, &v494, v461);
          LOBYTE(v165) = v485;
          v274 = v460;
          goto LABEL_485;
        }
        while (1)
        {
          v493 = *(_QWORD *)(v291 + 8);
          v292 = v291 ? v291 - 24 : 0;
          if (*(_BYTE *)(v292 + 16) != 83)
            break;
LABEL_581:
          v291 = v493;
          if (v493 == v492)
            goto LABEL_495;
        }
        v293 = *(_DWORD *)(v292 + 20);
        if ((v293 & 0x40000000) != 0)
        {
          v295 = *(uint64_t **)(v292 - 8);
          v294 = v293 & 0x7FFFFFF;
          if (!v294)
            goto LABEL_522;
        }
        else
        {
          v294 = v293 & 0x7FFFFFF;
          v295 = (uint64_t *)(v292 - 32 * v294);
          if (!v294)
            goto LABEL_522;
        }
        v296 = 32 * v294;
        do
        {
          v297 = *v295;
          v298 = *(unsigned __int8 *)(*v295 + 16);
          if (v298 >= 0x15 && v298 != 22)
          {
            v495[0] = 0;
            v300 = sub_1C6144BDC(v278, v280, v297, v495);
            v301 = !v300 || v495[0] == v278 + 16 * v280;
            if (!v301 && *(_QWORD *)(v495[0] + 8) == v292)
            {
              v302 = sub_1C477672C((uint64_t)&v574, *v295);
              v303 = v575 == v574 ? (uint64_t *)((char *)&v576 + 4) : &v576;
              if (v302 != (_QWORD *)((char *)v575 + 8 * *(unsigned int *)v303))
              {
                *v302 = -2;
                ++v577;
                v480 -= sub_1C627F18C(&v523, *v295, v470, v466);
              }
            }
          }
          v295 += 4;
          v296 -= 32;
        }
        while (v296);
LABEL_522:
        if (*(_BYTE *)(*(_QWORD *)v292 + 8) == 7)
        {
          v304 = 0;
        }
        else
        {
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v574, v292);
          v330 = sub_1C627F18C(&v523, v292, v470, v466);
          v331 = *(_QWORD *)(v292 + 8);
          v332 = v331 == 0;
          if (v331)
            v333 = v330;
          else
            v333 = 0;
          v480 += v333;
          if (v332)
            v304 = v330;
          else
            v304 = 0;
        }
        if ((_DWORD)v570 && v304 + v480 + v499 > v476)
        {
          sub_1C627F23C((uint64_t)v497, &v493, &v492, &v494, v461);
        }
        else
        {
          v305 = sub_1C477672C((uint64_t)&v524, v292);
          if (v525 == v524)
            v306 = (uint64_t *****)((char *)&v526 + 4);
          else
            v306 = (uint64_t *****)&v526;
          if (v305 != (_QWORD *)((char *)v525 + 8 * *(unsigned int *)v306))
          {
            v307 = *(unsigned __int8 *)(v292 + 16);
            if ((v307 & 0xFE) == 0x3C)
            {
              v308 = *(_DWORD *)(v292 + 20);
              if (v307 == 61)
              {
                if ((v308 & 0x40000000) != 0)
                  v309 = *(_QWORD *)(v292 - 8);
                else
                  v309 = v292 - 32 * (v308 & 0x7FFFFFF);
                v310 = (llvm::Value **)(v309 + 32);
              }
              else if ((v308 & 0x40000000) != 0)
              {
                v310 = *(llvm::Value ***)(v292 - 8);
              }
              else
              {
                v310 = (llvm::Value **)(v292 - 32 * (v308 & 0x7FFFFFF));
              }
              v311 = llvm::Value::stripPointerCasts(*v310);
              if (*((_BYTE *)v311 + 16) == 62)
              {
                v312 = *((_DWORD *)v311 + 5);
                if ((v312 & 0x40000000) != 0)
                  v313 = (char *)*((_QWORD *)v311 - 1);
                else
                  v313 = (char *)v311 - 32 * (v312 & 0x7FFFFFF);
                v315 = *((_QWORD *)v313 + 4);
                v316 = (_QWORD *)(v315 + 24);
                if (*(_DWORD *)(v315 + 32) >= 0x41u)
                  v316 = (_QWORD *)*v316;
                v314 = *(_DWORD *)v316;
              }
              else
              {
                v314 = 0;
              }
              if (*(_BYTE *)(v292 + 16) == 61)
              {
                v494 = (uint64_t *)v292;
                v317 = *(_DWORD *)(v292 + 20);
                if ((v317 & 0x40000000) != 0)
                  v318 = *(uint64_t ***)(v292 - 8);
                else
                  v318 = (uint64_t **)(v292 - 32 * (v317 & 0x7FFFFFF));
                sub_1C4768AD0((uint64_t)v531, **v318);
                v325 = v324;
                if ((_DWORD)v323 == 1)
                v326 = (unint64_t)(v325 + 7) >> 3;
                if ((_DWORD)v326)
                {
                  v327 = v572[0];
                  v328 = v326;
                  do
                  {
                    v327[v314 >> 6] |= 1 << v314;
                    ++v314;
                    --v328;
                  }
                  while (v328);
                }
                v329 = v570;
                if (v570 >= (unint64_t)HIDWORD(v570))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v569, (uint64_t)v571, v570 + 1, 8);
                  v329 = v570;
                }
                *((_QWORD *)v569 + v329) = v292;
                LODWORD(v570) = v570 + 1;
                v499 += (v326 + 1) >> 1;
              }
              else
              {
                sub_1C4768AD0((uint64_t)v531, *(_QWORD *)v292);
                v321 = v320;
                if ((_DWORD)v319 == 1)
                v322 = (unint64_t)(v321 + 7) >> 3;
                if ((_DWORD)v322)
                {
                  while (((*((_QWORD *)v572[0] + (v314 >> 6)) >> v314) & 1) == 0)
                  {
                    ++v314;
                    LODWORD(v322) = v322 - 1;
                    if (!(_DWORD)v322)
                      goto LABEL_581;
                  }
                  v495[0] = v292;
                  v507 = 0;
                  if (sub_1C4E5818C((uint64_t *)&v543, v495, &v507))
                    v334 = v507;
                  else
                    v334 = v543 + 16 * v544;
                  llvm::Value::doRAUW((llvm::ValueAsMetadata *)v292, *(llvm::Value **)(v334 + 8), (llvm::Value *)1);
                  v335 = sub_1C477672C((uint64_t)&v574, v292);
                  if (v575 == v574)
                    v336 = (uint64_t *)((char *)&v576 + 4);
                  else
                    v336 = &v576;
                  if (v335 != (_QWORD *)((char *)v575 + 8 * *(unsigned int *)v336))
                  {
                    *v335 = -2;
                    ++v577;
                  }
                  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v292 + 40) + 40, (uint64_t ***)v292);
                  v337 = *(_QWORD *)(v292 + 24);
                  v338 = *(_QWORD **)(v292 + 32);
                  *v338 = v337;
                  *(_QWORD *)(v337 + 8) = v338;
                  *(_QWORD *)(v292 + 24) = 0;
                  *(_QWORD *)(v292 + 32) = 0;
                  llvm::Value::deleteValue((llvm::Value *)v292);
                }
              }
            }
          }
        }
        goto LABEL_581;
      }
    }
LABEL_485:
    v277 = (uint64_t **)v277[1];
  }
  while (v277 != (uint64_t **)v473);
  if (v575 != v574)
    free(v575);
  v279 = v469;
LABEL_586:
  MEMORY[0x1CAA32FB4](v278, 8);
  if (v569 != v571)
    free(v569);
  if (v572[0] != v573)
    free(v572[0]);
  if (v501 != v500)
    free(v501);
  sub_1C55E7FDC((uint64_t)v505);
  if (!*(_BYTE *)(v7 + 96))
  {
    v474 = *(_QWORD *)(v7 + 80);
    v471 = *(_QWORD *)(v7 + 88);
    sub_1C55EABB0((unint64_t)&v500, v523);
    v339 = v523 + 9;
    v340 = v523[10];
    if (v340 == (uint64_t **)(v523 + 9))
    {
LABEL_594:
      sub_1C55E7FDC((uint64_t)&v500);
      goto LABEL_595;
    }
    v465 = v523 + 9;
    while (1)
    {
      if (v340)
        v393 = v340 - 3;
      else
        v393 = 0;
      v569 = v393;
      v574 = 0;
      v394 = sub_1C61252B8((uint64_t *)&v545, &v569, &v574);
      v395 = v393;
      v396 = (uint64_t)v393;
      if (v394)
      {
        v396 = (uint64_t)v393;
        if (v574 != (void **)(v545 + 16 * v546))
          v396 = (uint64_t)v574[1];
      }
      v397 = sub_1C477672C((uint64_t)&v538, v396);
      if (v539 == v538)
        v398 = (uint64_t *)((char *)&v540 + 4);
      else
        v398 = &v540;
      if (v397 != (_QWORD *)((char *)v539 + 8 * *(unsigned int *)v398))
      {
        v574 = 0;
        v399 = v502;
        if (sub_1C55EC64C((uint64_t)v500, v502, (uint64_t)v393, &v574))
          v400 = v574;
        else
          v400 = &v500[217 * v399];
        v574 = (void **)v578;
        v401 = v400[38];
        if (v401 == v400[37])
        {
          v575 = v578;
          v402 = v578;
          v403 = v401;
        }
        else
        {
          v459 = *((unsigned int *)v400 + 78);
          v402 = malloc_type_malloc(8 * v459, 0x4065EBACuLL);
          if (!v402)
          {
            if ((_DWORD)v459)
              goto LABEL_816;
            v402 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
            if (!v402)
              goto LABEL_816;
          }
          v575 = v402;
          v403 = v400[37];
          v401 = v400[38];
          LOBYTE(v165) = v485;
          v279 = v469;
          v339 = v465;
        }
        v404 = *((_DWORD *)v400 + 78);
        LODWORD(v576) = v404;
        v405 = *((_DWORD *)v400 + 79);
        if (v401 == v403)
          v406 = *((_DWORD *)v400 + 79);
        else
          v406 = v404;
        if (v406)
        {
          memmove(v402, v401, 8 * v406);
          v405 = *((_DWORD *)v400 + 79);
        }
        v407 = *((_DWORD *)v400 + 80);
        HIDWORD(v576) = v405;
        v577 = v407;
        v408 = sub_1C55EDD00((uint64_t)v531, &v574, v474, v471, 0);
        v409 = 0;
        v410 = (uint64_t *)(v395 + 5);
        v411 = v395[5];
        v570 = 0;
        v569 = 0;
        v571[0] = 0;
        v478 = v410;
        if (v411 != v410)
        {
          v467 = v340;
          v481 = 0;
          v412 = HIDWORD(v408) + v408;
          do
          {
            v413 = v411 ? v411 - 3 : 0;
            if (*((_BYTE *)v413 + 16) == 83)
              break;
            if (*(_BYTE *)(*v413 + 8) == 7)
            {
              v414 = 0;
            }
            else
            {
              v439 = (char *)sub_1C477672C((uint64_t)&v574, (uint64_t)v413);
              v440 = v439;
              if (v575 == v574)
                v441 = (uint64_t *)((char *)&v576 + 4);
              else
                v441 = &v576;
              v442 = (char *)v575 + 8 * *(unsigned int *)v441;
              if (v439 != v442)
              {
                *(_QWORD *)v439 = -2;
                ++v577;
              }
              v443 = sub_1C627F18C(&v523, (uint64_t)v413, v474, v471);
              if (v440 == v442)
                v414 = v443;
              else
                v414 = 0;
              if (v440 == v442)
                v444 = 0;
              else
                v444 = v443;
              v412 -= v444;
            }
            v415 = *((_DWORD *)v413 + 5);
            if ((v415 & 0x40000000) != 0)
            {
              v417 = (uint64_t *)*(v413 - 1);
              v416 = v415 & 0x7FFFFFF;
            }
            else
            {
              v416 = v415 & 0x7FFFFFF;
              v417 = &v413[-4 * v416];
            }
            v418 = &v417[4 * v416];
            if (v416)
            {
              while (1)
              {
                v419 = *(unsigned __int8 *)(*v417 + 16);
                if (v419 < 0x15 || v419 == 22)
                  goto LABEL_737;
                sub_1C4774094((llvm::SmallPtrSetImplBase *)&v574, *v417);
                if (!v421)
                  goto LABEL_737;
                v422 = sub_1C627F18C(&v523, *v417, v474, v471);
                v412 += v422;
                v423 = (_BYTE *)*v417;
                if (*(unsigned __int8 *)(*v417 + 16) >= 0x1Cu)
                {
                  v424 = v422;
                  v425 = sub_1C477672C((uint64_t)&v524, *v417);
                  v426 = v525 == v524 ? (uint64_t *)((char *)&v526 + 4) : &v526;
                  if (v425 != (_QWORD *)((char *)v525 + 8 * *(unsigned int *)v426) && v423[16] == 60)
                    break;
                }
LABEL_761:
                v279 = v469;
LABEL_737:
                v417 += 4;
                if (v417 == v418)
                  goto LABEL_762;
              }
              v572[0] = v423;
              v497[0] = 0;
              if (sub_1C4E5818C((uint64_t *)&v543, v572, v497))
                v427 = v497[0];
              else
                v427 = v543 + 16 * v544;
              v428 = (char *)v569;
              if (v571[0])
              {
                v429 = *(_QWORD *)(v427 + 8);
                LODWORD(v430) = ((v429 >> 4) ^ (v429 >> 9)) & (v571[0] - 1);
                v431 = (char *)v569 + 16 * v430;
                v432 = *(_QWORD *)v431;
                if (v429 == *(_QWORD *)v431)
                {
LABEL_750:
                  v428 = (char *)v569 + 16 * v571[0];
LABEL_757:
                  if (v431 == v428)
                    v435 = 0;
                  else
                    v435 = v424;
                  v481 -= v435;
                  goto LABEL_761;
                }
                v433 = 1;
                while (v432 != -4096)
                {
                  v434 = v430 + v433++;
                  v430 = v434 & (v571[0] - 1);
                  v432 = *((_QWORD *)v569 + 2 * v430);
                  if (v429 == v432)
                  {
                    v431 = (char *)v569 + 16 * v430;
                    goto LABEL_750;
                  }
                }
                v428 = (char *)v569 + 16 * v571[0];
              }
              v431 = v428;
              goto LABEL_757;
            }
LABEL_762:
            if ((_DWORD)v570)
              v436 = v481 + v414 + v412 > v279;
            else
              v436 = 0;
            if (v436)
            {
              sub_1C61446F0((unsigned int *)&v569);
              v481 = 0;
              LOBYTE(v165) = v485;
            }
            else
            {
              v437 = sub_1C477672C((uint64_t)&v524, (uint64_t)v413);
              if (v525 == v524)
                v438 = (uint64_t *****)((char *)&v526 + 4);
              else
                v438 = (uint64_t *****)&v526;
              LOBYTE(v165) = v485;
              if (v437 != (_QWORD *)((char *)v525 + 8 * *(unsigned int *)v438) && *((_BYTE *)v413 + 16) == 60)
              {
                v505[0] = 0;
                v572[0] = v413;
                v497[0] = 0;
                if (sub_1C4E5818C((uint64_t *)&v543, v572, v497))
                  v445 = v497[0];
                else
                  v445 = v543 + 16 * v544;
                v446 = *(_QWORD *)(v445 + 8);
                v505[0] = v446;
                if (v571[0])
                {
                  v447 = ((v446 >> 4) ^ (v446 >> 9)) & (v571[0] - 1);
                  v448 = *((_QWORD *)v569 + 2 * v447);
                  if (v446 == v448)
                  {
LABEL_791:
                    if ((_DWORD)v447 != v571[0])
                    {
                      v449 = (llvm::ValueAsMetadata **)((char *)v569 + 16 * v447);
                      llvm::Value::doRAUW(v449[1], (llvm::Value *)v413, (llvm::Value *)1);
                      v450 = v449[1];
                      if (v450)
                      {
                        do
                        {
                          if (*((_QWORD *)v450 + 1))
                            break;
                          v451 = *((_DWORD *)v450 + 5);
                          v452 = (v451 & 0x40000000) != 0
                               ? (llvm::ValueAsMetadata *)*((_QWORD *)v450 - 1)
                               : (llvm::ValueAsMetadata *)((char *)v450 - 32 * (v451 & 0x7FFFFFF));
                          v453 = *(unsigned __int8 **)v452;
                          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v450 + 5) + 40, (uint64_t ***)v450);
                          v454 = *((_QWORD *)v450 + 3);
                          v455 = (_QWORD *)*((_QWORD *)v450 + 4);
                          *v455 = v454;
                          *(_QWORD *)(v454 + 8) = v455;
                          *((_QWORD *)v450 + 3) = 0;
                          *((_QWORD *)v450 + 4) = 0;
                          llvm::Value::deleteValue(v450);
                          v456 = v453[16] < 0x1Cu || v453 == 0;
                          v450 = (llvm::ValueAsMetadata *)v453;
                        }
                        while (!v456);
                      }
                    }
                  }
                  else
                  {
                    v457 = 1;
                    while (v448 != -4096)
                    {
                      v458 = v447 + v457++;
                      v447 = v458 & (v571[0] - 1);
                      v448 = *((_QWORD *)v569 + 2 * v447);
                      if (v446 == v448)
                        goto LABEL_791;
                    }
                  }
                }
                sub_1C627F798((uint64_t *)&v569, v505)[1] = v413;
                v481 += sub_1C627F18C(&v523, (uint64_t)v413, v474, v471);
              }
            }
            v411 = (uint64_t *)*v411;
          }
          while (v411 != v478);
          v409 = v569;
          v339 = v465;
          v340 = v467;
        }
        MEMORY[0x1CAA32FB4](v409, 8);
        if (v575 != v574)
          free(v575);
      }
      v340 = (uint64_t **)v340[1];
      if (v340 == (uint64_t **)v339)
        goto LABEL_594;
    }
  }
LABEL_595:
  (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v462 + 8))(v462, 14, v533[0], 1, 0, 1, 3);
  if (v510 != v509)
    free(v510);
  v341 = (char *)v514;
  if ((_DWORD)v515)
  {
    v342 = 216 * v515;
    do
    {
      v343 = (void **)&v341[v342];
      v344 = *(char **)&v341[v342 - 80];
      if (&v341[v342 - 64] != v344)
        free(v344);
      if (*((char *)v343 - 89) < 0)
        operator delete(*(void **)&v341[v342 - 112]);
      v345 = *(void **)&v341[v342 - 208];
      if (v345 != *(v343 - 27))
        free(v345);
      v342 -= 216;
    }
    while (v342);
    v341 = (char *)v514;
  }
  if (v341 != (char *)&v516)
    free(v341);
  v346 = *((_QWORD *)&v530 + 1);
  if (*((_QWORD *)&v530 + 1))
  {
    v347 = llvm::ConstantInt::get(**((llvm::ConstantInt ***)&v530 + 1), v533[0], 0);
    v348 = *(_DWORD *)(v346 + 20);
    if ((v348 & 0x40000000) != 0)
      v349 = *(_QWORD *)(v346 - 8);
    else
      v349 = v346 - 32 * (v348 & 0x7FFFFFF);
    v350 = (llvm::Value ***)(v349 + 32);
    if (*(_QWORD *)(v349 + 32))
    {
      **(_QWORD **)(v349 + 48) = *(_QWORD *)(v349 + 40);
      v351 = *(_QWORD *)(v349 + 40);
      if (v351)
        *(_QWORD *)(v351 + 16) = *(_QWORD *)(v349 + 48);
    }
    *v350 = v347;
    if (v347)
    {
      v354 = v347[1];
      v352 = (llvm::Value ****)(v347 + 1);
      v353 = v354;
      *(_QWORD *)(v349 + 40) = v354;
      if (v354)
        *((_QWORD *)v353 + 2) = v349 + 40;
      *(_QWORD *)(v349 + 48) = v352;
      *v352 = v350;
    }
  }
  v486 = v165;
  if (HIDWORD(v540) != v541)
  {
    v355 = (uint64_t *)v523[5];
    v356 = *v355;
    Declaration = llvm::Intrinsic::getDeclaration(v355, 2622, 0, 0);
    v358 = (uint64_t ***)v523[10];
    v475 = v523 + 9;
    if (v358 != v523 + 9)
    {
      v364 = Declaration;
      do
      {
        v477 = v358;
        if (v358)
          v365 = v358 - 3;
        else
          v365 = 0;
        v574 = (void **)v365;
        v514 = 0;
        v366 = sub_1C61252B8((uint64_t *)&v545, &v574, &v514);
        v367 = (uint64_t)v365;
        if (v366)
        {
          v367 = (uint64_t)v365;
          if (v514 != (void *)(v545 + 16 * v546))
            v367 = *((_QWORD *)v514 + 1);
        }
        v368 = sub_1C477672C((uint64_t)&v538, v367);
        if (v539 == v538)
          v369 = (uint64_t *)((char *)&v540 + 4);
        else
          v369 = &v540;
        if (v368 != (_QWORD *)((char *)v539 + 8 * *(unsigned int *)v369))
        {
          v370 = v365 + 5;
          for (n = v365[6]; n != (uint64_t **)v370; n = (uint64_t **)n[1])
          {
            if (n)
              v372 = (uint64_t)(n - 3);
            else
              v372 = 0;
            v373 = sub_1C477672C((uint64_t)&v524, v372);
            if (v525 == v524)
              v374 = (uint64_t *****)((char *)&v526 + 4);
            else
              v374 = (uint64_t *****)&v526;
            if (v373 != (_QWORD *)((char *)v525 + 8 * *(unsigned int *)v374) && *(_BYTE *)(v372 + 16) == 60)
            {
              sub_1C4773D54((uint64_t)&v514, v372, 0, 0, 0);
              if (v364)
                v376 = *(uint64_t ***)(v364 + 24);
              else
                v376 = 0;
              v377 = *(llvm::ConstantInt **)(*(_QWORD *)v356 + 1936);
              v378 = *(_DWORD *)(*(_QWORD *)v356 + 1944);
              LODWORD(v575) = v378 >> 8;
              if (v378 >> 8 > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)&v574, 2, 0);
              }
              else
              {
                if (v378 <= 0xFF)
                  v379 = 0;
                else
                  v379 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v378);
                v574 = (void **)(v379 & 2);
              }
              v381 = llvm::ConstantInt::get(v377, (llvm::LLVMContext *)&v574, v375);
              if (v575 >= 0x41 && v574)
                MEMORY[0x1CAA32F9C](v574, 0x1000C8000313F17);
              v509 = v381;
              v382 = *(llvm::ConstantInt **)(*(_QWORD *)v356 + 1936);
              v383 = *(_DWORD *)(*(_QWORD *)v356 + 1944);
              LODWORD(v575) = v383 >> 8;
              if (v383 >> 8 > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)&v574, 1, 0);
              }
              else
              {
                if (v383 <= 0xFF)
                  LOBYTE(v384) = 0;
                else
                  v384 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v383);
                v574 = (void **)(v384 & 1);
              }
              v385 = llvm::ConstantInt::get(v382, (llvm::LLVMContext *)&v574, v380);
              if (v575 >= 0x41 && v574)
                MEMORY[0x1CAA32F9C](v574, 0x1000C8000313F17);
              v510 = v385;
              v578[0] = 257;
              sub_1C4774778((uint64_t *)&v514, v376, v364, (uint64_t *)&v509, 2, (uint64_t)&v574, 0);
              if (v514 != &v516)
                free(v514);
            }
          }
        }
        v358 = (uint64_t ***)v477[1];
      }
      while (v358 != v475);
    }
  }
  sub_1C620115C((uint64_t)&v554);
  MEMORY[0x1CAA32FB4](v554, 8);
  if (v550 != v549)
    free(v550);
  MEMORY[0x1CAA32FB4](v547, 8);
  MEMORY[0x1CAA32FB4](v545, 8);
  MEMORY[0x1CAA32FB4](v543, 8);
  v31 = v463;
  v6 = v464;
  v9 = v486;
  if (v539 != v538)
    free(v539);
  if (v534 != *(void **)&v533[1])
    free(v534);
  if (v525 != v524)
    free(v525);
  MEMORY[0x1CAA32FB4](v567, 8);
  v359 = (char *)v556;
  if ((_DWORD)v557)
  {
    v360 = 216 * v557;
    v57 = v472;
    do
    {
      v361 = (void **)&v359[v360];
      v362 = *(char **)&v359[v360 - 80];
      if (&v359[v360 - 64] != v362)
      {
        free(v362);
        v57 = v472;
      }
      if (*((char *)v361 - 89) < 0)
      {
        operator delete(*(void **)&v359[v360 - 112]);
        v57 = v472;
      }
      v363 = *(void **)&v359[v360 - 208];
      if (v363 != *(v361 - 27))
      {
        free(v363);
        v57 = v472;
      }
      v360 -= 216;
    }
    while (v360);
    v359 = (char *)v556;
  }
  else
  {
    v57 = v472;
  }
  if (v359 != (char *)&v558)
  {
    free(v359);
    goto LABEL_100;
  }
LABEL_88:
  if (v488 != v487)
  {
    v58 = v57;
    free(v488);
    v57 = v58;
  }
  if (v57)
  {
    v9 = 0;
    goto LABEL_256;
  }
  if (byte_1ED807A28 || byte_1ED807AE8 || byte_1ED807BA8)
  {
    v514 = &v516;
    v515 = 0x100000000;
    v522 = 0;
    v517[1] = 0;
    v517[0] = 0;
    v518 = 0;
    v521 = 0;
    v519 = 0;
    v520 = v6;
    sub_1C53BA620((uint64_t)&v514, 0);
    v556 = &v558;
    v557 = 0x400000000;
    v566 = 0;
    v561[1] = 0;
    v561[0] = 0;
    v562 = 0;
    v565 = 0;
    v563 = 0;
    v564 = v6;
    sub_1C53BA93C((uint64_t)&v556, 0);
    v66 = operator new();
    v526 = 0;
    llvm::DivergenceTracker::DivergenceTracker(v66, (llvm::Function *)v6, (uint64_t)&v514, (uint64_t)&v556, v31, (uint64_t)v508, (uint64_t)&v523, 0, 0);
    if ((uint64_t ****)v526 == &v523)
    {
      v67 = (void (**)(void))(v523 + 4);
    }
    else
    {
      if (!v526)
        goto LABEL_128;
      v67 = (void (**)(void))(*(_QWORD *)v526 + 40);
    }
    (*v67)();
LABEL_128:
    v80 = *(_QWORD *)(v7 + 88);
    *(_QWORD *)(v7 + 88) = v66;
    if (!v80)
    {
LABEL_145:
      sub_1C55E80B4(v7, v6, byte_1ED807A28);
      sub_1C4DC4E38(v561);
      if (v556 != &v558)
        free(v556);
      sub_1C4DC4E38(v517);
      if (v514 != &v516)
        free(v514);
      goto LABEL_149;
    }
    v81 = *(_QWORD **)(v80 + 1328);
    if (v81 == (_QWORD *)(v80 + 1304))
    {
      v82 = 4;
      v81 = (_QWORD *)(v80 + 1304);
    }
    else
    {
      if (!v81)
      {
LABEL_134:
        v83 = *(void **)(v80 + 1136);
        if (v83 != (void *)(v80 + 1152))
          free(v83);
        v84 = *(void **)(v80 + 984);
        if (v84 != *(void **)(v80 + 976))
          free(v84);
        v85 = *(void **)(v80 + 824);
        if (v85 != *(void **)(v80 + 816))
          free(v85);
        v86 = *(void **)(v80 + 536);
        if (v86 != *(void **)(v80 + 528))
          free(v86);
        if (*(_QWORD *)v80 != v80 + 16)
          free(*(void **)v80);
        MEMORY[0x1CAA32FC0](v80, 0x10E0C40A0334FC4);
        goto LABEL_145;
      }
      v82 = 5;
    }
    (*(void (**)(void))(*v81 + 8 * v82))();
    goto LABEL_134;
  }
LABEL_149:
  v87 = *(_DWORD *)(v7 + 40);
  if (!v87 && !*(_DWORD *)(v7 + 44))
    goto LABEL_197;
  v88 = *(_DWORD *)(v7 + 48);
  v89 = *(_QWORD **)(v7 + 32);
  if (v88 <= 4 * v87 || v88 < 0x41)
  {
    if (!v88)
    {
LABEL_196:
      *(_QWORD *)(v7 + 40) = 0;
      goto LABEL_197;
    }
    v102 = 1736 * v88;
    while (1)
    {
      if (*v89 == -8192)
        goto LABEL_194;
      if (*v89 != -4096)
        break;
LABEL_195:
      v89 += 217;
      v102 -= 1736;
      if (!v102)
        goto LABEL_196;
    }
    v103 = (void *)v89[182];
    if (v103 != (void *)v89[181])
      free(v103);
    v104 = (void *)v89[146];
    if (v104 != (void *)v89[145])
      free(v104);
    v105 = (void *)v89[110];
    if (v105 != (void *)v89[109])
      free(v105);
    v106 = (void *)v89[74];
    if (v106 != (void *)v89[73])
      free(v106);
    v107 = (void *)v89[38];
    if (v107 != (void *)v89[37])
      free(v107);
    v108 = (void *)v89[2];
    if (v108 != (void *)v89[1])
      free(v108);
LABEL_194:
    *v89 = -4096;
    goto LABEL_195;
  }
  v90 = (_QWORD *)(v7 + 32);
  v91 = 1736 * v88;
  do
  {
    if ((*v89 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v92 = (void *)v89[182];
      if (v92 != (void *)v89[181])
        free(v92);
      v93 = (void *)v89[146];
      if (v93 != (void *)v89[145])
        free(v93);
      v94 = (void *)v89[110];
      if (v94 != (void *)v89[109])
        free(v94);
      v95 = (void *)v89[74];
      if (v95 != (void *)v89[73])
        free(v95);
      v96 = (void *)v89[38];
      if (v96 != (void *)v89[37])
        free(v96);
      v97 = (void *)v89[2];
      if (v97 != (void *)v89[1])
        free(v97);
    }
    v89 += 217;
    v91 -= 1736;
  }
  while (v91);
  v98 = 1 << (33 - __clz(v87 - 1));
  if (v98 <= 64)
    v98 = 64;
  if (v87)
    v99 = v98;
  else
    v99 = 0;
  if (v99 == *(_DWORD *)(v7 + 48))
  {
    *(_QWORD *)(v7 + 40) = 0;
    if (v99)
    {
      v100 = *(_QWORD **)(v7 + 32);
      v101 = 1736 * v99;
      do
      {
        *v100 = -4096;
        v100 += 217;
        v101 -= 1736;
      }
      while (v101);
    }
  }
  else
  {
    MEMORY[0x1CAA32FB4](*v90, 8);
    if (v99)
    {
      v116 = (4 * v99 / 3 + 1) | ((unint64_t)(4 * v99 / 3 + 1) >> 1);
      v117 = v116 | (v116 >> 2) | ((v116 | (v116 >> 2)) >> 4);
      LODWORD(v117) = (((v117 | (v117 >> 8)) >> 16) | v117 | (v117 >> 8)) + 1;
      *(_DWORD *)(v7 + 48) = v117;
      v118 = operator new(1736 * v117, (std::align_val_t)8uLL);
      *(_QWORD *)(v7 + 32) = v118;
      *(_QWORD *)(v7 + 40) = 0;
      v119 = *(_DWORD *)(v7 + 48);
      if (v119)
      {
        v120 = 1736 * v119;
        do
        {
          *v118 = -4096;
          v118 += 217;
          v120 -= 1736;
        }
        while (v120);
      }
    }
    else
    {
      *v90 = 0;
      *(_QWORD *)(v7 + 40) = 0;
      *(_DWORD *)(v7 + 48) = 0;
    }
  }
LABEL_197:
  v109 = *(_DWORD *)(v7 + 64);
  if (v109 || *(_DWORD *)(v7 + 68))
  {
    v110 = *(_DWORD *)(v7 + 72);
    v111 = *(_QWORD **)(v7 + 56);
    if (v110 <= 4 * v109 || v110 < 0x41)
    {
      if (v110)
      {
        v115 = 88 * v110;
        do
        {
          *v111 = -4096;
          v111 += 11;
          v115 -= 88;
        }
        while (v115);
      }
      *(_QWORD *)(v7 + 64) = 0;
    }
    else if (v109)
    {
      v112 = 1 << (33 - __clz(v109 - 1));
      if (v112 <= 64)
        v113 = 64;
      else
        v113 = v112;
      if (v113 == v110)
      {
        *(_QWORD *)(v7 + 64) = 0;
        v114 = 88 * v110;
        do
        {
          *v111 = -4096;
          v111 += 11;
          v114 -= 88;
        }
        while (v114);
      }
      else
      {
        MEMORY[0x1CAA32FB4](v111, 8);
        v121 = (4 * v113 / 3u + 1) | ((unint64_t)(4 * v113 / 3u + 1) >> 1);
        v122 = v121 | (v121 >> 2) | ((v121 | (v121 >> 2)) >> 4);
        LODWORD(v122) = (((v122 | (v122 >> 8)) >> 16) | v122 | (v122 >> 8)) + 1;
        *(_DWORD *)(v7 + 72) = v122;
        v123 = operator new(88 * v122, (std::align_val_t)8uLL);
        *(_QWORD *)(v7 + 56) = v123;
        *(_QWORD *)(v7 + 64) = 0;
        v124 = *(_DWORD *)(v7 + 72);
        if (v124)
        {
          v125 = 88 * v124;
          do
          {
            *v123 = -4096;
            v123 += 11;
            v125 -= 88;
          }
          while (v125);
        }
      }
    }
    else
    {
      MEMORY[0x1CAA32FB4](v111, 8);
      *(_QWORD *)(v7 + 56) = 0;
      *(_QWORD *)(v7 + 64) = 0;
      *(_DWORD *)(v7 + 72) = 0;
    }
  }
  v126 = *(_QWORD *)(v7 + 80);
  *(_QWORD *)(v7 + 80) = 0;
  if (v126)
  {
    v127 = *(_QWORD **)(v126 + 1328);
    if (v127 == (_QWORD *)(v126 + 1304))
    {
      v128 = 4;
      v127 = (_QWORD *)(v126 + 1304);
    }
    else
    {
      if (!v127)
      {
LABEL_228:
        v129 = *(void **)(v126 + 1136);
        if (v129 != (void *)(v126 + 1152))
          free(v129);
        v130 = *(void **)(v126 + 984);
        if (v130 != *(void **)(v126 + 976))
          free(v130);
        v131 = *(void **)(v126 + 824);
        if (v131 != *(void **)(v126 + 816))
          free(v131);
        v132 = *(void **)(v126 + 536);
        if (v132 != *(void **)(v126 + 528))
          free(v132);
        if (*(_QWORD *)v126 != v126 + 16)
          free(*(void **)v126);
        MEMORY[0x1CAA32FC0](v126, 0x10E0C40A0334FC4);
        goto LABEL_239;
      }
      v128 = 5;
    }
    (*(void (**)(void))(*v127 + 8 * v128))();
    goto LABEL_228;
  }
LABEL_239:
  v133 = *(_QWORD *)(v7 + 88);
  *(_QWORD *)(v7 + 88) = 0;
  if (v133)
  {
    v134 = *(_QWORD **)(v133 + 1328);
    if (v134 == (_QWORD *)(v133 + 1304))
    {
      v135 = 4;
      v134 = (_QWORD *)(v133 + 1304);
    }
    else
    {
      if (!v134)
      {
LABEL_245:
        v136 = *(void **)(v133 + 1136);
        if (v136 != (void *)(v133 + 1152))
          free(v136);
        v137 = *(void **)(v133 + 984);
        if (v137 != *(void **)(v133 + 976))
          free(v137);
        v138 = *(void **)(v133 + 824);
        if (v138 != *(void **)(v133 + 816))
          free(v138);
        v139 = *(void **)(v133 + 536);
        if (v139 != *(void **)(v133 + 528))
          free(v139);
        if (*(_QWORD *)v133 != v133 + 16)
          free(*(void **)v133);
        MEMORY[0x1CAA32FC0](v133, 0x10E0C40A0334FC4);
        goto LABEL_256;
      }
      v135 = 5;
    }
    (*(void (**)(void))(*v134 + 8 * v135))();
    goto LABEL_245;
  }
LABEL_256:
  if ((v508[0] & 1) == 0)
    MEMORY[0x1CAA32FB4](v508[1], 8);
  return v9 & 1;
}

uint64_t sub_1C55E7FDC(uint64_t a1)
{
  unsigned int v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  void *v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;

  v2 = *(_DWORD *)(a1 + 16);
  v3 = *(_QWORD **)a1;
  if (v2)
  {
    v4 = 1736 * v2;
    do
    {
      if ((*v3 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v5 = (void *)v3[182];
        if (v5 != (void *)v3[181])
          free(v5);
        v6 = (void *)v3[146];
        if (v6 != (void *)v3[145])
          free(v6);
        v7 = (void *)v3[110];
        if (v7 != (void *)v3[109])
          free(v7);
        v8 = (void *)v3[74];
        if (v8 != (void *)v3[73])
          free(v8);
        v9 = (void *)v3[38];
        if (v9 != (void *)v3[37])
          free(v9);
        v10 = (void *)v3[2];
        if (v10 != (void *)v3[1])
          free(v10);
      }
      v3 += 217;
      v4 -= 1736;
    }
    while (v4);
    v3 = *(_QWORD **)a1;
  }
  MEMORY[0x1CAA32FB4](v3, 8);
  return a1;
}

void sub_1C55E80B4(uint64_t a1, uint64_t ***a2, int a3)
{
  uint64_t v5;
  uint64_t v6;
  char **v7;
  char *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t **v12;
  _QWORD ***v13;
  uint64_t ***v14;
  int v15;
  void *v16;
  uint64_t v17;
  uint64_t ***v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  char *v22;
  uint64_t ***v23;
  __int128 v24;
  char *v25;
  int v26;
  BOOL v27;
  unsigned int v28;
  uint64_t ***v29;
  int v30;
  unsigned int v31;
  uint64_t ***v32;
  char *v33;
  int v34;
  BOOL v35;
  unsigned int v36;
  int v37;
  unsigned int v38;
  uint64_t ***v39;
  int v40;
  BOOL v41;
  unsigned int v42;
  llvm *v43;
  llvm *v44;
  llvm *v45;
  int v46;
  _DWORD *v47;
  void *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t ****v54;
  uint64_t ***v55;
  int v56;
  int v57;
  uint64_t ***v58;
  const char *v59;
  size_t v60;
  size_t v61;
  _DWORD *v62;
  uint64_t **v63;
  unsigned int v64;
  unsigned int v65;
  unsigned int v66;
  unsigned int v67;
  unsigned int v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t **v71;
  unsigned int v72;
  unsigned int *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t BlockFreq;
  uint64_t v77;
  char v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  char v82;
  unint64_t v83;
  unint64_t v84;
  uint64_t v85;
  char v86;
  unint64_t v87;
  unint64_t v88;
  uint64_t v89;
  char v90;
  unint64_t v91;
  unint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  char v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  char v99;
  unint64_t v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t ***v106;
  uint64_t **v107;
  int v108;
  int v109;
  uint64_t **v110;
  const char *v111;
  size_t v112;
  size_t v113;
  _DWORD *v114;
  uint64_t v115;
  _WORD *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t ***v121;
  uint64_t **v122;
  int v123;
  int v124;
  uint64_t **v125;
  const char *v126;
  size_t v127;
  size_t v128;
  _WORD *v129;
  uint64_t v130;
  uint64_t v131;
  _WORD *v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t ***v137;
  uint64_t **v138;
  int v139;
  int v140;
  uint64_t **v141;
  const char *v142;
  size_t v143;
  size_t v144;
  _BYTE *v145;
  uint64_t v146;
  uint64_t v147;
  _WORD *v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t ***v153;
  uint64_t **v154;
  int v155;
  int v156;
  uint64_t **v157;
  const char *v158;
  size_t v159;
  size_t v160;
  _WORD *v161;
  uint64_t v162;
  void *v163;
  _WORD *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t ***v169;
  uint64_t **v170;
  int v171;
  int v172;
  uint64_t **v173;
  const char *v174;
  size_t v175;
  size_t v176;
  _QWORD *v177;
  uint64_t v178;
  _BYTE *v179;
  uint64_t v180;
  _WORD *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t ***v186;
  uint64_t **v187;
  int v188;
  int v189;
  size_t *v190;
  const void *v191;
  size_t v192;
  size_t v193;
  void *v194;
  uint64_t v195;
  void *v196;
  uint64_t v197;
  unsigned int v198;
  unsigned int v199;
  unsigned int v200;
  uint64_t v201;
  _QWORD *v202;
  unint64_t v203;
  unint64_t *v204;
  unint64_t v205;
  uint64_t v206;
  unint64_t v207;
  _BOOL4 v208;
  uint64_t v209;
  unint64_t *v210;
  unint64_t v211;
  unint64_t v212;
  uint64_t v213;
  unint64_t v214;
  _BOOL4 v215;
  uint64_t v216;
  _QWORD *v217;
  unint64_t v218;
  unint64_t *v219;
  unint64_t v220;
  uint64_t v221;
  unint64_t v222;
  _BOOL4 v223;
  uint64_t v224;
  _BOOL8 v225;
  unint64_t v226;
  unint64_t v227;
  unint64_t v228;
  _BOOL4 v229;
  _BOOL4 v230;
  uint64_t v231;
  _QWORD *v232;
  unint64_t v233;
  unint64_t *v234;
  unint64_t v235;
  uint64_t v236;
  unint64_t v237;
  _BOOL4 v238;
  uint64_t v239;
  _QWORD *v240;
  unint64_t v241;
  unint64_t *v242;
  unint64_t v243;
  uint64_t v244;
  unint64_t v245;
  _BOOL4 v246;
  uint64_t ***v247;
  const llvm::Module *v248;
  llvm *ShaderID;
  llvm *v250;
  unsigned int v251;
  void *v252;
  char v253;
  unint64_t v254;
  unsigned int v255;
  unint64_t *v256;
  unint64_t v257;
  void *v258;
  int v259;
  int64_t v260;
  unint64_t v262;
  unsigned int v263;
  void *v264;
  _DWORD *v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t ****v270;
  uint64_t ***v271;
  int v272;
  int v273;
  uint64_t v274;
  uint64_t ***v275;
  const char *v276;
  size_t v277;
  size_t v278;
  _WORD *v279;
  unint64_t v280;
  llvm::raw_ostream *v281;
  int v282;
  uint64_t v283;
  void **v284;
  size_t v285;
  uint64_t v286;
  uint64_t v287;
  _DWORD *v288;
  uint64_t v289;
  uint64_t v290;
  void *v291;
  void *v292;
  void *v293;
  uint64_t v294;
  void *v295;
  void *v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  llvm *v300;
  llvm *v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t ****v309;
  uint64_t ***v310;
  int v311;
  int v312;
  size_t *v313;
  const void *v314;
  size_t v315;
  size_t v316;
  _DWORD *v317;
  uint64_t **i;
  uint64_t ***v319;
  uint64_t v320;
  unsigned int v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t ****v326;
  uint64_t ***v327;
  int v328;
  int v329;
  uint64_t ***v330;
  const char *v331;
  size_t v332;
  size_t v333;
  _BYTE *v334;
  _BYTE *v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t ****v340;
  uint64_t ***v341;
  int v342;
  int v343;
  uint64_t ***v344;
  const char *v345;
  size_t v346;
  size_t v347;
  _WORD *v348;
  _WORD *v349;
  uint64_t v350;
  unint64_t *v351;
  unint64_t v352;
  uint64_t *v353;
  unint64_t v354;
  uint64_t v355;
  unint64_t v356;
  _BOOL4 v357;
  uint64_t v358;
  uint64_t *v359;
  unint64_t v360;
  unint64_t v361;
  uint64_t v362;
  unint64_t v363;
  _BOOL4 v364;
  int v365;
  int v366;
  uint64_t ***v367;
  void *__src;
  uint64_t *v369;
  uint64_t v370;
  uint64_t v371;
  unsigned int v372;
  unsigned int v373;
  unsigned int v374;
  unsigned int v375;
  uint64_t v376;
  unsigned int v377;
  char *v378;
  unsigned int v379;
  void *v380;
  unsigned int v381;
  void *v382;
  unsigned int v383;
  void *__p[2];
  uint64_t v385;
  void *v386[2];
  uint64_t v387;
  char v388;
  _QWORD *v389;
  unsigned int v390;
  void *v391;
  unsigned int v392;
  _QWORD *v393;
  unsigned int v394;
  _QWORD *v395;
  unsigned int v396;
  _QWORD *v397;
  unsigned int v398;
  llvm *v399;
  unsigned int v400;
  char *v401;
  __int128 v402;
  _QWORD v403[8];

  v5 = a1;
  v403[5] = *MEMORY[0x1E0C80C00];
  *(_BYTE *)(a1 + 28) = 1;
  v366 = *(unsigned __int8 *)(a1 + 96);
  sub_1C55EABB0((unint64_t)&v401, a2);
  v6 = v5 + 32;
  sub_1C55EC454(v5 + 32, (uint64_t)&v401);
  sub_1C55E7FDC((uint64_t)&v401);
  v7 = **(char ****)(v5 + 8);
  do
  {
    v8 = *v7;
    v7 += 2;
  }
  while (v8 != llvm::LazyBlockFrequencyInfoPass::ID);
  v9 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v7 - 1) + 96))(*(v7 - 1), llvm::LazyBlockFrequencyInfoPass::ID);
  v369 = (uint64_t *)sub_1C619C0A4(v9 + 32);
  v370 = v5 + 32;
  v10 = *(_QWORD *)(v5 + 80);
  v11 = *(_QWORD *)(v5 + 88);
  v12 = a2[5];
  v13 = a2 + 9;
  v401 = 0;
  *(_QWORD *)&v402 = 0;
  DWORD2(v402) = 0;
  v14 = (uint64_t ***)a2[10];
  v371 = v5;
  v367 = a2;
  if (v14 == a2 + 9)
  {
    v15 = 0;
    v16 = 0;
    v376 = 0;
    goto LABEL_57;
  }
  v17 = (uint64_t)(v12 + 34);
  do
  {
    if (v14)
      v18 = v14 - 3;
    else
      v18 = 0;
    v19 = sub_1C55ECC44(v6, (uint64_t)v18);
    if (DWORD2(v402))
    {
      v20 = DWORD2(v402) - 1;
      v21 = ((v18 >> 4) ^ (v18 >> 9)) & (DWORD2(v402) - 1);
      v22 = &v401[88 * v21];
      v23 = *(uint64_t ****)v22;
      v24 = 0uLL;
      if (v18 == *(uint64_t ****)v22)
        goto LABEL_27;
      v25 = 0;
      v26 = 1;
      while (v23 != (uint64_t ***)-4096)
      {
        if (v25)
          v27 = 0;
        else
          v27 = v23 == (uint64_t ***)-8192;
        if (v27)
          v25 = v22;
        v28 = v21 + v26++;
        v21 = v28 & v20;
        v22 = &v401[88 * (v28 & v20)];
        v23 = *(uint64_t ****)v22;
        if (v18 == *(uint64_t ****)v22)
          goto LABEL_27;
      }
      if (v25)
        v22 = v25;
    }
    else
    {
      v22 = 0;
      v24 = 0uLL;
    }
    if (4 * (int)v402 + 4 >= (3 * DWORD2(v402)))
    {
      sub_1C55EDB98((uint64_t)&v401, 2 * DWORD2(v402));
      v30 = DWORD2(v402) - 1;
      v31 = (DWORD2(v402) - 1) & ((v18 >> 4) ^ (v18 >> 9));
      v22 = &v401[88 * v31];
      v32 = *(uint64_t ****)v22;
      if (v18 == *(uint64_t ****)v22)
        goto LABEL_43;
      v33 = 0;
      v34 = 1;
      while (v32 != (uint64_t ***)-4096)
      {
        if (v33)
          v35 = 0;
        else
          v35 = v32 == (uint64_t ***)-8192;
        if (v35)
          v33 = v22;
        v36 = v31 + v34++;
        v31 = v36 & v30;
        v22 = &v401[88 * (v36 & v30)];
        v32 = *(uint64_t ****)v22;
        if (v18 == *(uint64_t ****)v22)
        {
LABEL_53:
          v29 = v18;
          v6 = v370;
          goto LABEL_44;
        }
      }
LABEL_54:
      if (v33)
        v22 = v33;
      v6 = v370;
      v24 = 0uLL;
      goto LABEL_23;
    }
    if ((DWORD2(v402) + ~(_DWORD)v402 - DWORD1(v402)) <= DWORD2(v402) >> 3)
    {
      sub_1C55EDB98((uint64_t)&v401, SDWORD2(v402));
      v37 = DWORD2(v402) - 1;
      v38 = (DWORD2(v402) - 1) & ((v18 >> 4) ^ (v18 >> 9));
      v22 = &v401[88 * v38];
      v39 = *(uint64_t ****)v22;
      if (v18 == *(uint64_t ****)v22)
      {
LABEL_43:
        v29 = v18;
LABEL_44:
        v24 = 0uLL;
        goto LABEL_24;
      }
      v33 = 0;
      v40 = 1;
      while (v39 != (uint64_t ***)-4096)
      {
        if (v33)
          v41 = 0;
        else
          v41 = v39 == (uint64_t ***)-8192;
        if (v41)
          v33 = v22;
        v42 = v38 + v40++;
        v38 = v42 & v37;
        v22 = &v401[88 * (v42 & v37)];
        v39 = *(uint64_t ****)v22;
        if (v18 == *(uint64_t ****)v22)
          goto LABEL_53;
      }
      goto LABEL_54;
    }
LABEL_23:
    v29 = *(uint64_t ****)v22;
LABEL_24:
    LODWORD(v402) = v402 + 1;
    if (v29 != (uint64_t ***)-4096)
      --DWORD1(v402);
    *(_QWORD *)v22 = v18;
    *(_OWORD *)(v22 + 8) = v24;
    *(_OWORD *)(v22 + 24) = v24;
    *(_OWORD *)(v22 + 40) = v24;
    *(_OWORD *)(v22 + 56) = v24;
    *(_OWORD *)(v22 + 68) = v24;
LABEL_27:
    sub_1C55ECC9C(v18, (_DWORD *)v22 + 2, v19 + 8, v17, v10, v11, 0, 0);
    v14 = (uint64_t ***)v14[1];
  }
  while (v14 != v13);
  v16 = v401;
  v376 = v402;
  v15 = DWORD2(v402);
  v5 = v371;
LABEL_57:
  MEMORY[0x1CAA32FB4](*(_QWORD *)(v5 + 56), 8);
  *(_QWORD *)(v5 + 56) = v16;
  *(_QWORD *)(v5 + 64) = v376;
  *(_DWORD *)(v5 + 72) = v15;
  v43 = (llvm *)MEMORY[0x1CAA32FB4](0, 8);
  v44 = llvm::dbgs(v43);
  v45 = v44;
  if (byte_1ED807BA8)
    v46 = 1;
  else
    v46 = a3;
  v365 = v46;
  if (byte_1ED807BA8)
  {
    v47 = (_DWORD *)*((_QWORD *)v44 + 4);
    if (*((_QWORD *)v44 + 3) - (_QWORD)v47 > 6uLL)
    {
      *(_DWORD *)((char *)v47 + 3) = 540884285;
      *v47 = 1027423498;
      v48 = (void *)(*((_QWORD *)v44 + 4) + 7);
      *((_QWORD *)v44 + 4) = v48;
    }
    else
    {
      llvm::raw_ostream::write(v44, "\n===== ", 7uLL);
      v48 = (void *)*((_QWORD *)v45 + 4);
    }
    if (*((_QWORD *)v45 + 3) - (_QWORD)v48 > 0x15uLL)
    {
      qmemcpy(v48, "New DivergenceAnalysis", 22);
      v49 = *((_QWORD *)v45 + 4) + 22;
      *((_QWORD *)v45 + 4) = v49;
    }
    else
    {
      llvm::raw_ostream::write(v45, "New DivergenceAnalysis", 0x16uLL);
      v49 = *((_QWORD *)v45 + 4);
    }
    if ((unint64_t)(*((_QWORD *)v45 + 3) - v49) > 0x12)
    {
      *(_DWORD *)(v49 + 15) = 544370534;
      *(_OWORD *)v49 = *(_OWORD *)" - RegPressure for ";
      *((_QWORD *)v45 + 4) += 19;
    }
    else
    {
      llvm::raw_ostream::write(v45, " - RegPressure for ", 0x13uLL);
    }
    if ((*((_BYTE *)a2 + 23) & 0x10) != 0)
    {
      v50 = ***a2;
      v51 = *(_QWORD *)(v50 + 152);
      v52 = *(unsigned int *)(v50 + 168);
      if (!(_DWORD)v52)
        goto LABEL_74;
      LODWORD(v53) = (v52 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v54 = (uint64_t ****)(v51 + 16 * v53);
      v55 = *v54;
      if (*v54 != a2)
      {
        v56 = 1;
        while (v55 != (uint64_t ***)-4096)
        {
          v57 = v53 + v56++;
          v53 = v57 & (v52 - 1);
          v55 = *(uint64_t ****)(v51 + 16 * v53);
          if (v55 == a2)
          {
            v54 = (uint64_t ****)(v51 + 16 * v53);
            goto LABEL_75;
          }
        }
LABEL_74:
        v54 = (uint64_t ****)(v51 + 16 * v52);
      }
LABEL_75:
      v58 = v54[1];
      v61 = (size_t)*v58;
      v59 = (const char *)(v58 + 2);
      v60 = v61;
      v62 = (_DWORD *)*((_QWORD *)v45 + 4);
      if (v61 > *((_QWORD *)v45 + 3) - (_QWORD)v62)
      {
        llvm::raw_ostream::write(v45, v59, v60);
        goto LABEL_77;
      }
      if (v60)
      {
        memcpy(v62, v59, v60);
        v62 = (_DWORD *)(*((_QWORD *)v45 + 4) + v60);
        *((_QWORD *)v45 + 4) = v62;
      }
    }
    else
    {
LABEL_77:
      v62 = (_DWORD *)*((_QWORD *)v45 + 4);
    }
    if (*((_QWORD *)v45 + 3) - (_QWORD)v62 > 6uLL)
    {
      *(_DWORD *)((char *)v62 + 3) = 171785533;
      *v62 = 1027423520;
      *((_QWORD *)v45 + 4) += 7;
    }
    else
    {
      llvm::raw_ostream::write(v45, " =====\n", 7uLL);
    }
  }
  v400 = 64;
  v399 = 0;
  v398 = 64;
  v397 = 0;
  v396 = 64;
  v395 = 0;
  v394 = 64;
  v393 = 0;
  v392 = 64;
  v391 = 0;
  v390 = 64;
  v389 = 0;
  v63 = a2[10];
  if (v63 != (uint64_t **)v13)
  {
    v64 = 0;
    v65 = 0;
    v66 = 0;
    v67 = 0;
    v68 = 0;
    while (1)
    {
      v372 = v64;
      v374 = v66;
      v69 = v67;
      v70 = v68;
      if (v63)
        v71 = v63 - 3;
      else
        v71 = 0;
      v401 = 0;
      v72 = v65;
      if (sub_1C55EDB00(*(_QWORD *)(v5 + 56), *(_DWORD *)(v5 + 72), (uint64_t)v71, &v401))
        v73 = (unsigned int *)v401;
      else
        v73 = (unsigned int *)(*(_QWORD *)(v5 + 56) + 88 * *(unsigned int *)(v5 + 72));
      v74 = v73[19];
      v75 = v73[20];
      BlockFreq = llvm::BlockFrequencyInfo::getBlockFreq(v369, (uint64_t)v71);
      v77 = BlockFreq * v74;
      v78 = v394;
      if (v394 >= 0x41)
      {
        v201 = 0;
        v202 = v393;
        v203 = ((unint64_t)v394 + 63) >> 6;
        v204 = v393;
        v205 = v203;
        do
        {
          v206 = *(_QWORD *)v77;
          v77 += 8;
          v207 = v206 + *v204;
          v208 = v207 + 1 <= *v204;
          if (v201)
          {
            ++v207;
            v201 = v208;
          }
          else
          {
            v201 = v207 < *v204;
          }
          *v204++ = v207;
          --v205;
        }
        while (v205);
        v202[(v203 - 1)] &= 0xFFFFFFFFFFFFFFFFLL >> -v78;
      }
      else
      {
        v79 = (unint64_t)v393 + v77;
        if (v394)
          v80 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v394;
        else
          v80 = 0;
        v393 = (_QWORD *)(v80 & v79);
      }
      v81 = BlockFreq * (v74 + 1);
      v82 = v392;
      if (v392 >= 0x41)
      {
        v209 = 0;
        v210 = (unint64_t *)v391;
        v211 = ((unint64_t)v392 + 63) >> 6;
        v212 = v211;
        v65 = v72;
        do
        {
          v213 = *(_QWORD *)v81;
          v81 += 8;
          v214 = v213 + *v210;
          v215 = v214 + 1 <= *v210;
          if (v209)
          {
            ++v214;
            v209 = v215;
          }
          else
          {
            v209 = v214 < *v210;
          }
          *v210++ = v214;
          --v212;
        }
        while (v212);
        *((_QWORD *)v391 + (v211 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -v82;
      }
      else
      {
        v83 = (unint64_t)v391 + v81;
        if (v392)
          v84 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v392;
        else
          v84 = 0;
        v391 = (void *)(v84 & v83);
        v65 = v72;
      }
      v68 = v70;
      v85 = BlockFreq * v75;
      v86 = v390;
      v67 = v69;
      if (v390 >= 0x41)
      {
        v216 = 0;
        v217 = v389;
        v218 = ((unint64_t)v390 + 63) >> 6;
        v219 = v389;
        v220 = v218;
        v6 = v370;
        do
        {
          v221 = *(_QWORD *)v85;
          v85 += 8;
          v222 = v221 + *v219;
          v223 = v222 + 1 <= *v219;
          if (v216)
          {
            ++v222;
            v216 = v223;
          }
          else
          {
            v216 = v222 < *v219;
          }
          *v219++ = v222;
          --v220;
        }
        while (v220);
        v217[(v218 - 1)] &= 0xFFFFFFFFFFFFFFFFLL >> -v86;
      }
      else
      {
        v87 = (unint64_t)v389 + v85;
        if (v390)
          v88 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v390;
        else
          v88 = 0;
        v389 = (_QWORD *)(v88 & v87);
        v6 = v370;
      }
      v89 = BlockFreq * v73[6];
      v90 = v400;
      if (v400 >= 0x41)
      {
        v224 = 0;
        v225 = 0;
        v93 = v399;
        v226 = ((unint64_t)v400 + 63) >> 6;
        do
        {
          v227 = v93[v224];
          v228 = *(_QWORD *)(v89 + v224 * 8) + v227;
          v229 = v228 < v227;
          v230 = v228 + 1 <= v227;
          if (v225)
          {
            ++v228;
            v225 = v230;
          }
          else
          {
            v225 = v229;
          }
          v93[v224++] = v228;
        }
        while (v226 != v224);
        v93[(v226 - 1)] &= 0xFFFFFFFFFFFFFFFFLL >> -v90;
      }
      else
      {
        v91 = (unint64_t)v399 + v89;
        if (v400)
          v92 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v400;
        else
          v92 = 0;
        v93 = (_QWORD *)(v92 & v91);
        v399 = (llvm *)(v92 & v91);
      }
      __src = v93;
      v94 = BlockFreq * v73[11];
      v95 = v398;
      if (v398 >= 0x41)
      {
        v231 = 0;
        v232 = v397;
        v233 = ((unint64_t)v398 + 63) >> 6;
        v234 = v397;
        v235 = v233;
        do
        {
          v236 = *(_QWORD *)v94;
          v94 += 8;
          v237 = v236 + *v234;
          v238 = v237 + 1 <= *v234;
          if (v231)
          {
            ++v237;
            v231 = v238;
          }
          else
          {
            v231 = v237 < *v234;
          }
          *v234++ = v237;
          --v235;
        }
        while (v235);
        v232[(v233 - 1)] &= 0xFFFFFFFFFFFFFFFFLL >> -v95;
      }
      else
      {
        v96 = (unint64_t)v397 + v94;
        if (v398)
          v97 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v398;
        else
          v97 = 0;
        v397 = (_QWORD *)(v97 & v96);
      }
      v98 = BlockFreq * v73[16];
      v99 = v396;
      if (v396 >= 0x41)
      {
        v239 = 0;
        v240 = v395;
        v241 = ((unint64_t)v396 + 63) >> 6;
        v242 = v395;
        v243 = v241;
        do
        {
          v244 = *(_QWORD *)v98;
          v98 += 8;
          v245 = v244 + *v242;
          v246 = v245 + 1 <= *v242;
          if (v239)
          {
            ++v245;
            v239 = v246;
          }
          else
          {
            v239 = v245 < *v242;
          }
          *v242++ = v245;
          --v243;
        }
        while (v243);
        v240[(v241 - 1)] &= 0xFFFFFFFFFFFFFFFFLL >> -v99;
      }
      else
      {
        v100 = (unint64_t)v395 + v98;
        if (v396)
          v101 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v396;
        else
          v101 = 0;
        v395 = (_QWORD *)(v101 & v100);
      }
      if (!byte_1ED807BA8)
        goto LABEL_255;
      v377 = v71 >> 4;
      if ((*((_BYTE *)v71 + 23) & 0x10) == 0)
        goto LABEL_131;
      v102 = *(_QWORD *)**v71;
      v103 = *(_QWORD *)(v102 + 152);
      v104 = *(unsigned int *)(v102 + 168);
      if ((_DWORD)v104)
      {
        LODWORD(v105) = (v104 - 1) & (v377 ^ (v71 >> 9));
        v106 = (uint64_t ***)(v103 + 16 * v105);
        v107 = *v106;
        if (*v106 == v71)
          goto LABEL_129;
        v108 = 1;
        while (v107 != (uint64_t **)-4096)
        {
          v109 = v105 + v108++;
          v105 = v109 & (v104 - 1);
          v107 = *(uint64_t ***)(v103 + 16 * v105);
          if (v107 == v71)
          {
            v106 = (uint64_t ***)(v103 + 16 * v105);
            goto LABEL_129;
          }
        }
      }
      v106 = (uint64_t ***)(v103 + 16 * v104);
LABEL_129:
      v110 = v106[1];
      v113 = (size_t)*v110;
      v111 = (const char *)(v110 + 2);
      v112 = v113;
      v114 = (_DWORD *)*((_QWORD *)v45 + 4);
      if (v113 > *((_QWORD *)v45 + 3) - (_QWORD)v114)
      {
        llvm::raw_ostream::write(v45, v111, v112);
LABEL_131:
        v114 = (_DWORD *)*((_QWORD *)v45 + 4);
        goto LABEL_134;
      }
      if (v112)
      {
        memcpy(v114, v111, v112);
        v114 = (_DWORD *)(*((_QWORD *)v45 + 4) + v112);
        *((_QWORD *)v45 + 4) = v114;
      }
LABEL_134:
      if (*((_QWORD *)v45 + 3) - (_QWORD)v114 > 6uLL)
      {
        *(_DWORD *)((char *)v114 + 3) = 540699489;
        *v114 = 1634037805;
        *((_QWORD *)v45 + 4) += 7;
      }
      else
      {
        llvm::raw_ostream::write(v45, "-peak: ", 7uLL);
      }
      sub_1C5E21910(v45, v73[17], 0, 0, 0);
      v115 = *((_QWORD *)v45 + 4);
      if ((unint64_t)(*((_QWORD *)v45 + 3) - v115) > 9)
      {
        *(_WORD *)(v115 + 8) = 10354;
        *(_QWORD *)v115 = *(_QWORD *)" + scalar(";
        *((_QWORD *)v45 + 4) += 10;
      }
      else
      {
        llvm::raw_ostream::write(v45, " + scalar(", 0xAuLL);
      }
      sub_1C5E21910(v45, v73[18], 0, 0, 0);
      v116 = (_WORD *)*((_QWORD *)v45 + 4);
      if (*((_QWORD *)v45 + 3) - (_QWORD)v116 > 1uLL)
      {
        *v116 = 2601;
        *((_QWORD *)v45 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v45, ")\n", 2uLL);
      }
      if (!byte_1ED807BA8)
        goto LABEL_255;
      if ((*((_BYTE *)v71 + 23) & 0x10) == 0)
        goto LABEL_151;
      v117 = *(_QWORD *)**v71;
      v118 = *(_QWORD *)(v117 + 152);
      v119 = *(unsigned int *)(v117 + 168);
      if ((_DWORD)v119)
      {
        LODWORD(v120) = (v119 - 1) & (v377 ^ (v71 >> 9));
        v121 = (uint64_t ***)(v118 + 16 * v120);
        v122 = *v121;
        if (*v121 == v71)
          goto LABEL_149;
        v123 = 1;
        while (v122 != (uint64_t **)-4096)
        {
          v124 = v120 + v123++;
          v120 = v124 & (v119 - 1);
          v122 = *(uint64_t ***)(v118 + 16 * v120);
          if (v122 == v71)
          {
            v121 = (uint64_t ***)(v118 + 16 * v120);
            goto LABEL_149;
          }
        }
      }
      v121 = (uint64_t ***)(v118 + 16 * v119);
LABEL_149:
      v125 = v121[1];
      v128 = (size_t)*v125;
      v126 = (const char *)(v125 + 2);
      v127 = v128;
      v129 = (_WORD *)*((_QWORD *)v45 + 4);
      if (v128 > *((_QWORD *)v45 + 3) - (_QWORD)v129)
      {
        llvm::raw_ostream::write(v45, v126, v127);
LABEL_151:
        v129 = (_WORD *)*((_QWORD *)v45 + 4);
        goto LABEL_154;
      }
      if (v127)
      {
        memcpy(v129, v126, v127);
        v129 = (_WORD *)(*((_QWORD *)v45 + 4) + v127);
        *((_QWORD *)v45 + 4) = v129;
      }
LABEL_154:
      if (*((_QWORD *)v45 + 3) - (_QWORD)v129 > 5uLL)
      {
        v129[2] = 8250;
        *(_DWORD *)v129 = 2019650861;
        *((_QWORD *)v45 + 4) += 6;
      }
      else
      {
        llvm::raw_ostream::write(v45, "-max: ", 6uLL);
      }
      sub_1C5E21910(v45, v73[5], 0, 0, 0);
      v130 = *((_QWORD *)v45 + 4);
      if ((unint64_t)(*((_QWORD *)v45 + 3) - v130) > 9)
      {
        *(_WORD *)(v130 + 8) = 10354;
        *(_QWORD *)v130 = *(_QWORD *)" | scalar(";
        *((_QWORD *)v45 + 4) += 10;
      }
      else
      {
        llvm::raw_ostream::write(v45, " | scalar(", 0xAuLL);
      }
      sub_1C5E21910(v45, v73[10], 0, 0, 0);
      v131 = *((_QWORD *)v45 + 4);
      if ((unint64_t)(*((_QWORD *)v45 + 3) - v131) > 0xB)
      {
        *(_DWORD *)(v131 + 8) = 678261359;
        *(_QWORD *)v131 = *(_QWORD *)") | uniform(";
        *((_QWORD *)v45 + 4) += 12;
      }
      else
      {
        llvm::raw_ostream::write(v45, ") | uniform(", 0xCuLL);
      }
      sub_1C5E21910(v45, v73[15], 0, 0, 0);
      v132 = (_WORD *)*((_QWORD *)v45 + 4);
      if (*((_QWORD *)v45 + 3) - (_QWORD)v132 > 1uLL)
      {
        *v132 = 2601;
        *((_QWORD *)v45 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v45, ")\n", 2uLL);
      }
      if (!byte_1ED807BA8)
        goto LABEL_255;
      if ((*((_BYTE *)v71 + 23) & 0x10) == 0)
        goto LABEL_173;
      v133 = *(_QWORD *)**v71;
      v134 = *(_QWORD *)(v133 + 152);
      v135 = *(unsigned int *)(v133 + 168);
      if ((_DWORD)v135)
      {
        LODWORD(v136) = (v135 - 1) & (v377 ^ (v71 >> 9));
        v137 = (uint64_t ***)(v134 + 16 * v136);
        v138 = *v137;
        if (*v137 == v71)
          goto LABEL_171;
        v139 = 1;
        while (v138 != (uint64_t **)-4096)
        {
          v140 = v136 + v139++;
          v136 = v140 & (v135 - 1);
          v138 = *(uint64_t ***)(v134 + 16 * v136);
          if (v138 == v71)
          {
            v137 = (uint64_t ***)(v134 + 16 * v136);
            goto LABEL_171;
          }
        }
      }
      v137 = (uint64_t ***)(v134 + 16 * v135);
LABEL_171:
      v141 = v137[1];
      v144 = (size_t)*v141;
      v142 = (const char *)(v141 + 2);
      v143 = v144;
      v145 = (_BYTE *)*((_QWORD *)v45 + 4);
      if (v144 > *((_QWORD *)v45 + 3) - (_QWORD)v145)
      {
        llvm::raw_ostream::write(v45, v142, v143);
LABEL_173:
        v145 = (_BYTE *)*((_QWORD *)v45 + 4);
        goto LABEL_176;
      }
      if (v143)
      {
        memcpy(v145, v142, v143);
        v145 = (_BYTE *)(*((_QWORD *)v45 + 4) + v143);
        *((_QWORD *)v45 + 4) = v145;
      }
LABEL_176:
      if (*((_QWORD *)v45 + 3) - (_QWORD)v145 > 8uLL)
      {
        v145[8] = 32;
        *(_QWORD *)v145 = *(_QWORD *)"-livein: ";
        *((_QWORD *)v45 + 4) += 9;
      }
      else
      {
        llvm::raw_ostream::write(v45, "-livein: ", 9uLL);
      }
      sub_1C5E21910(v45, v73[2], 0, 0, 0);
      v146 = *((_QWORD *)v45 + 4);
      if ((unint64_t)(*((_QWORD *)v45 + 3) - v146) > 9)
      {
        *(_WORD *)(v146 + 8) = 10354;
        *(_QWORD *)v146 = *(_QWORD *)" + scalar(";
        *((_QWORD *)v45 + 4) += 10;
      }
      else
      {
        llvm::raw_ostream::write(v45, " + scalar(", 0xAuLL);
      }
      sub_1C5E21910(v45, v73[7], 0, 0, 0);
      v147 = *((_QWORD *)v45 + 4);
      if ((unint64_t)(*((_QWORD *)v45 + 3) - v147) > 0xB)
      {
        *(_DWORD *)(v147 + 8) = 678261359;
        *(_QWORD *)v147 = *(_QWORD *)") + uniform(";
        *((_QWORD *)v45 + 4) += 12;
      }
      else
      {
        llvm::raw_ostream::write(v45, ") + uniform(", 0xCuLL);
      }
      sub_1C5E21910(v45, v73[12], 0, 0, 0);
      v148 = (_WORD *)*((_QWORD *)v45 + 4);
      if (*((_QWORD *)v45 + 3) - (_QWORD)v148 > 1uLL)
      {
        *v148 = 2601;
        *((_QWORD *)v45 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v45, ")\n", 2uLL);
      }
      if (!byte_1ED807BA8)
        goto LABEL_255;
      if ((*((_BYTE *)v71 + 23) & 0x10) == 0)
        goto LABEL_195;
      v149 = *(_QWORD *)**v71;
      v150 = *(_QWORD *)(v149 + 152);
      v151 = *(unsigned int *)(v149 + 168);
      if ((_DWORD)v151)
      {
        LODWORD(v152) = (v151 - 1) & (v377 ^ (v71 >> 9));
        v153 = (uint64_t ***)(v150 + 16 * v152);
        v154 = *v153;
        if (*v153 == v71)
          goto LABEL_193;
        v155 = 1;
        while (v154 != (uint64_t **)-4096)
        {
          v156 = v152 + v155++;
          v152 = v156 & (v151 - 1);
          v154 = *(uint64_t ***)(v150 + 16 * v152);
          if (v154 == v71)
          {
            v153 = (uint64_t ***)(v150 + 16 * v152);
            goto LABEL_193;
          }
        }
      }
      v153 = (uint64_t ***)(v150 + 16 * v151);
LABEL_193:
      v157 = v153[1];
      v160 = (size_t)*v157;
      v158 = (const char *)(v157 + 2);
      v159 = v160;
      v161 = (_WORD *)*((_QWORD *)v45 + 4);
      if (v160 > *((_QWORD *)v45 + 3) - (_QWORD)v161)
      {
        llvm::raw_ostream::write(v45, v158, v159);
LABEL_195:
        v161 = (_WORD *)*((_QWORD *)v45 + 4);
        goto LABEL_198;
      }
      if (v159)
      {
        memcpy(v161, v158, v159);
        v161 = (_WORD *)(*((_QWORD *)v45 + 4) + v159);
        *((_QWORD *)v45 + 4) = v161;
      }
LABEL_198:
      if (*((_QWORD *)v45 + 3) - (_QWORD)v161 > 9uLL)
      {
        v161[4] = 8250;
        *(_QWORD *)v161 = *(_QWORD *)"-liveout: ";
        *((_QWORD *)v45 + 4) += 10;
      }
      else
      {
        llvm::raw_ostream::write(v45, "-liveout: ", 0xAuLL);
      }
      sub_1C5E21910(v45, v73[3], 0, 0, 0);
      v162 = *((_QWORD *)v45 + 4);
      if ((unint64_t)(*((_QWORD *)v45 + 3) - v162) > 9)
      {
        *(_WORD *)(v162 + 8) = 10354;
        *(_QWORD *)v162 = *(_QWORD *)" + scalar(";
        *((_QWORD *)v45 + 4) += 10;
      }
      else
      {
        llvm::raw_ostream::write(v45, " + scalar(", 0xAuLL);
      }
      sub_1C5E21910(v45, v73[8], 0, 0, 0);
      v163 = (void *)*((_QWORD *)v45 + 4);
      if (*((_QWORD *)v45 + 3) - (_QWORD)v163 > 0xCuLL)
      {
        qmemcpy(v163, ") + uniform (", 13);
        *((_QWORD *)v45 + 4) += 13;
      }
      else
      {
        llvm::raw_ostream::write(v45, ") + uniform (", 0xDuLL);
      }
      sub_1C5E21910(v45, v73[13], 0, 0, 0);
      v164 = (_WORD *)*((_QWORD *)v45 + 4);
      if (*((_QWORD *)v45 + 3) - (_QWORD)v164 > 1uLL)
      {
        *v164 = 2601;
        *((_QWORD *)v45 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v45, ")\n", 2uLL);
      }
      if (!byte_1ED807BA8)
        goto LABEL_255;
      if ((*((_BYTE *)v71 + 23) & 0x10) == 0)
        goto LABEL_217;
      v165 = *(_QWORD *)**v71;
      v166 = *(_QWORD *)(v165 + 152);
      v167 = *(unsigned int *)(v165 + 168);
      if ((_DWORD)v167)
      {
        LODWORD(v168) = (v167 - 1) & (v377 ^ (v71 >> 9));
        v169 = (uint64_t ***)(v166 + 16 * v168);
        v170 = *v169;
        if (*v169 == v71)
          goto LABEL_215;
        v171 = 1;
        while (v170 != (uint64_t **)-4096)
        {
          v172 = v168 + v171++;
          v168 = v172 & (v167 - 1);
          v170 = *(uint64_t ***)(v166 + 16 * v168);
          if (v170 == v71)
          {
            v169 = (uint64_t ***)(v166 + 16 * v168);
            goto LABEL_215;
          }
        }
      }
      v169 = (uint64_t ***)(v166 + 16 * v167);
LABEL_215:
      v173 = v169[1];
      v176 = (size_t)*v173;
      v174 = (const char *)(v173 + 2);
      v175 = v176;
      v177 = (_QWORD *)*((_QWORD *)v45 + 4);
      if (v176 > *((_QWORD *)v45 + 3) - (_QWORD)v177)
      {
        llvm::raw_ostream::write(v45, v174, v175);
LABEL_217:
        v177 = (_QWORD *)*((_QWORD *)v45 + 4);
        goto LABEL_220;
      }
      if (v175)
      {
        memcpy(v177, v174, v175);
        v177 = (_QWORD *)(*((_QWORD *)v45 + 4) + v175);
        *((_QWORD *)v45 + 4) = v177;
      }
LABEL_220:
      if (*((_QWORD *)v45 + 3) - (_QWORD)v177 > 0xAuLL)
      {
        *(_DWORD *)((char *)v177 + 7) = 540702066;
        *v177 = *(_QWORD *)"-livethru: ";
        *((_QWORD *)v45 + 4) += 11;
      }
      else
      {
        llvm::raw_ostream::write(v45, "-livethru: ", 0xBuLL);
      }
      sub_1C5E21910(v45, v73[4], 0, 0, 0);
      v178 = *((_QWORD *)v45 + 4);
      if ((unint64_t)(*((_QWORD *)v45 + 3) - v178) > 9)
      {
        *(_WORD *)(v178 + 8) = 10354;
        *(_QWORD *)v178 = *(_QWORD *)" + scalar(";
        *((_QWORD *)v45 + 4) += 10;
      }
      else
      {
        llvm::raw_ostream::write(v45, " + scalar(", 0xAuLL);
      }
      sub_1C5E21910(v45, v73[9], 0, 0, 0);
      v179 = (_BYTE *)*((_QWORD *)v45 + 4);
      if (*((_BYTE **)v45 + 3) == v179)
      {
        llvm::raw_ostream::write(v45, ")", 1uLL);
        v180 = *((_QWORD *)v45 + 4);
      }
      else
      {
        *v179 = 41;
        v180 = *((_QWORD *)v45 + 4) + 1;
        *((_QWORD *)v45 + 4) = v180;
      }
      if ((unint64_t)(*((_QWORD *)v45 + 3) - v180) > 0xA)
      {
        *(_DWORD *)(v180 + 7) = 678261359;
        *(_QWORD *)v180 = *(_QWORD *)" + uniform(";
        *((_QWORD *)v45 + 4) += 11;
      }
      else
      {
        llvm::raw_ostream::write(v45, " + uniform(", 0xBuLL);
      }
      sub_1C5E21910(v45, v73[14], 0, 0, 0);
      v181 = (_WORD *)*((_QWORD *)v45 + 4);
      if (*((_QWORD *)v45 + 3) - (_QWORD)v181 > 1uLL)
      {
        *v181 = 2601;
        *((_QWORD *)v45 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v45, ")\n", 2uLL);
      }
      if (!byte_1ED807BA8)
        goto LABEL_255;
      if ((*((_BYTE *)v71 + 23) & 0x10) == 0)
        goto LABEL_244;
      v182 = *(_QWORD *)**v71;
      v183 = *(_QWORD *)(v182 + 152);
      v184 = *(unsigned int *)(v182 + 168);
      if (!(_DWORD)v184)
        goto LABEL_241;
      LODWORD(v185) = (v184 - 1) & (v377 ^ (v71 >> 9));
      v186 = (uint64_t ***)(v183 + 16 * v185);
      v187 = *v186;
      if (*v186 != v71)
      {
        v188 = 1;
        while (v187 != (uint64_t **)-4096)
        {
          v189 = v185 + v188++;
          v185 = v189 & (v184 - 1);
          v187 = *(uint64_t ***)(v183 + 16 * v185);
          if (v187 == v71)
          {
            v186 = (uint64_t ***)(v183 + 16 * v185);
            goto LABEL_242;
          }
        }
LABEL_241:
        v186 = (uint64_t ***)(v183 + 16 * v184);
      }
LABEL_242:
      v190 = (size_t *)v186[1];
      v193 = *v190;
      v191 = v190 + 2;
      v192 = v193;
      v194 = (void *)*((_QWORD *)v45 + 4);
      if (v193 <= *((_QWORD *)v45 + 3) - (_QWORD)v194)
      {
        if (v192)
        {
          memcpy(v194, v191, v192);
          v194 = (void *)(*((_QWORD *)v45 + 4) + v192);
          *((_QWORD *)v45 + 4) = v194;
        }
        goto LABEL_247;
      }
      llvm::raw_ostream::write(v45, (const char *)v191, v192);
LABEL_244:
      v194 = (void *)*((_QWORD *)v45 + 4);
LABEL_247:
      if (*((_QWORD *)v45 + 3) - (_QWORD)v194 > 0xDuLL)
      {
        qmemcpy(v194, "-AccPressure: ", 14);
        *((_QWORD *)v45 + 4) += 14;
      }
      else
      {
        llvm::raw_ostream::write(v45, "-AccPressure: ", 0xEuLL);
      }
      sub_1C5E21910(v45, v73[6], 0, 0, 0);
      v195 = *((_QWORD *)v45 + 4);
      if ((unint64_t)(*((_QWORD *)v45 + 3) - v195) > 9)
      {
        *(_WORD *)(v195 + 8) = 10354;
        *(_QWORD *)v195 = *(_QWORD *)" + scalar(";
        *((_QWORD *)v45 + 4) += 10;
      }
      else
      {
        llvm::raw_ostream::write(v45, " + scalar(", 0xAuLL);
      }
      sub_1C5E21910(v45, v73[11], 0, 0, 0);
      v196 = (void *)*((_QWORD *)v45 + 4);
      if (*((_QWORD *)v45 + 3) - (_QWORD)v196 > 0xCuLL)
      {
        qmemcpy(v196, ") + uniform (", 13);
        *((_QWORD *)v45 + 4) += 13;
      }
      else
      {
        llvm::raw_ostream::write(v45, ") + uniform (", 0xDuLL);
      }
      sub_1C5E21910(v45, v73[16], 0, 0, 0);
      v197 = *((_QWORD *)v45 + 4);
      if ((unint64_t)(*((_QWORD *)v45 + 3) - v197) > 2)
      {
        *(_BYTE *)(v197 + 2) = 10;
        *(_WORD *)v197 = 2601;
        *((_QWORD *)v45 + 4) += 3;
      }
      else
      {
        llvm::raw_ostream::write(v45, ")\n\n", 3uLL);
      }
LABEL_255:
      v64 = v372;
      v66 = v374;
      v198 = v65 + v372;
      v199 = v73[17];
      v200 = v73[18];
      if (v65 + v372 < v200 + v199)
        v65 = v73[18];
      if (v198 < v200 + v199)
        v64 = v73[17];
      if (v374 <= v73[5])
        v66 = v73[5];
      if (v67 <= v73[10])
        v67 = v73[10];
      if (v68 <= v73[15])
        v68 = v73[15];
      v63 = (uint64_t **)v63[1];
      v5 = v371;
      if (v63 == (uint64_t **)v13)
        goto LABEL_325;
    }
  }
  __src = 0;
  v68 = 0;
  v67 = 0;
  v66 = 0;
  v65 = 0;
  v64 = 0;
LABEL_325:
  v247 = v367;
  sub_1C5EAC020((uint64_t)v367[5], (uint64_t)v386);
  v373 = v64;
  v375 = v66;
  if (v388)
  {
    if (SHIBYTE(v387) < 0)
    {
      sub_1C47EBC30(__p, v386[0], (unint64_t)v386[1]);
    }
    else
    {
      *(_OWORD *)__p = *(_OWORD *)v386;
      v385 = v387;
    }
  }
  else
  {
    HIBYTE(v385) = 7;
    strcpy((char *)__p, "unknown");
  }
  ShaderID = (llvm *)llvm::AGXIR::getShaderID((llvm::AGXIR *)v367[5], v248);
  if (v365)
  {
    v250 = ShaderID;
    v383 = v400;
    if (v400 > 0x40)
    {
      v382 = (void *)operator new[]();
      memcpy(v382, __src, (((unint64_t)v383 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v382 = __src;
    }
    v381 = v392;
    if (v392 > 0x40)
    {
      v380 = (void *)operator new[]();
      memcpy(v380, v391, (((unint64_t)v381 + 63) >> 3) & 0x3FFFFFF8);
    }
    else
    {
      v380 = v391;
    }
    llvm::APInt::operator-=((uint64_t)&v380, 1uLL);
    v251 = v381;
    v252 = v380;
    v381 = 0;
    v253 = v383;
    if (v383 >= 0x41)
    {
      v350 = 0;
      v351 = (unint64_t *)v382;
      v352 = ((unint64_t)v383 + 63) >> 6;
      v353 = (uint64_t *)v380;
      v354 = v352;
      do
      {
        v355 = *v353++;
        v356 = v355 + *v351;
        v357 = v356 + 1 <= *v351;
        if (v350)
        {
          ++v356;
          v350 = v357;
        }
        else
        {
          v350 = v356 < *v351;
        }
        *v351++ = v356;
        --v354;
      }
      while (v354);
      *((_QWORD *)v382 + (v352 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -v253;
      v247 = v367;
      v6 = v370;
      v5 = v371;
    }
    else
    {
      if (v383)
        v254 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v383;
      else
        v254 = 0;
      v382 = (void *)(v254 & ((unint64_t)v380 + (_QWORD)v382));
    }
    if (v251 >= 0x41 && v252)
      MEMORY[0x1CAA32F9C](v252, 0x1000C8000313F17);
    if (v381 >= 0x41 && v380)
      MEMORY[0x1CAA32F9C](v380, 0x1000C8000313F17);
    v255 = v383;
    v379 = v383;
    if (v383 <= 0x40)
    {
      v256 = (unint64_t *)v382;
      v378 = (char *)v382;
      goto LABEL_350;
    }
    v378 = (char *)operator new[]();
    v256 = (unint64_t *)v382;
    memcpy(v378, v382, (((unint64_t)v379 + 63) >> 3) & 0x3FFFFFF8);
    v255 = v383;
    if (v383 >= 0x41)
    {
      v358 = 0;
      v359 = v397;
      v360 = ((unint64_t)v383 + 63) >> 6;
      v361 = v360;
      do
      {
        v362 = *v359++;
        v363 = v362 + *v256;
        v364 = v363 + 1 <= *v256;
        if (v358)
        {
          ++v363;
          v358 = v364;
        }
        else
        {
          v358 = v363 < *v256;
        }
        *v256++ = v363;
        --v361;
      }
      while (v361);
      *((_QWORD *)v382 + (v360 - 1)) &= 0xFFFFFFFFFFFFFFFFLL >> -(char)v255;
      v247 = v367;
      v6 = v370;
      v5 = v371;
    }
    else
    {
LABEL_350:
      if (v255)
        v257 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v255;
      else
        v257 = 0;
      v382 = (void *)(v257 & ((unint64_t)v397 + (_QWORD)v256));
    }
    v258 = v391;
    if (v392 < 0x41)
    {
LABEL_361:
      if (v258)
        goto LABEL_362;
      v274 = v383;
      if (v383 > 0x40)
      {
        *(_QWORD *)v382 = 0;
        bzero((char *)v382 + 8, (((unint64_t)(v274 + 63) >> 3) - 8) & 0xFFFFFFF8);
      }
      else
      {
        v382 = 0;
      }
      v299 = v379;
      if (v379 > 0x40)
      {
        *(_QWORD *)v378 = 0;
        bzero(v378 + 8, (((unint64_t)(v299 + 63) >> 3) - 8) & 0xFFFFFFF8);
      }
      else
      {
        v378 = 0;
      }
    }
    else
    {
      v259 = 0;
      v260 = ((unint64_t)v392 + 63) >> 6;
      do
      {
        if (v260-- < 1)
          break;
        v262 = *((_QWORD *)v391 + v260);
        v259 += __clz(v262);
      }
      while (!v262);
      v263 = v392 | 0xFFFFFFC0;
      if ((v392 & 0x3F) == 0)
        v263 = 0;
      if (v392 - v259 - v263 <= 0x40)
      {
        v258 = *(void **)v391;
        goto LABEL_361;
      }
LABEL_362:
      llvm::APInt::udiv((llvm::APInt *)&v382, (const llvm::APInt *)&v391, (llvm::APInt *)&v401);
      if (v383 >= 0x41 && v382)
        MEMORY[0x1CAA32F9C](v382, 0x1000C8000313F17);
      v382 = v401;
      v383 = v402;
      llvm::APInt::udiv((llvm::APInt *)&v378, (const llvm::APInt *)&v391, (llvm::APInt *)&v401);
      if (v379 >= 0x41 && v378)
        MEMORY[0x1CAA32F9C](v378, 0x1000C8000313F17);
      v378 = v401;
      v379 = v402;
    }
    v264 = (void *)*((_QWORD *)v45 + 4);
    if (*((_QWORD *)v45 + 3) - (_QWORD)v264 > 0x15uLL)
    {
      qmemcpy(v264, "New DivergenceAnalysis", 22);
      v265 = (_DWORD *)(*((_QWORD *)v45 + 4) + 22);
      *((_QWORD *)v45 + 4) = v265;
    }
    else
    {
      llvm::raw_ostream::write(v45, "New DivergenceAnalysis", 0x16uLL);
      v265 = (_DWORD *)*((_QWORD *)v45 + 4);
    }
    if (*((_QWORD *)v45 + 3) - (_QWORD)v265 > 3uLL)
    {
      *v265 = 656420128;
      *((_QWORD *)v45 + 4) += 4;
    }
    else
    {
      llvm::raw_ostream::write(v45, " - '", 4uLL);
    }
    if ((*((_BYTE *)v247 + 23) & 0x10) != 0)
    {
      v266 = ***v247;
      v267 = *(_QWORD *)(v266 + 152);
      v268 = *(unsigned int *)(v266 + 168);
      if (!(_DWORD)v268)
        goto LABEL_382;
      LODWORD(v269) = (v268 - 1) & ((v247 >> 4) ^ (v247 >> 9));
      v270 = (uint64_t ****)(v267 + 16 * v269);
      v271 = *v270;
      if (*v270 != v247)
      {
        v272 = 1;
        while (v271 != (uint64_t ***)-4096)
        {
          v273 = v269 + v272++;
          v269 = v273 & (v268 - 1);
          v271 = *(uint64_t ****)(v267 + 16 * v269);
          if (v271 == v247)
          {
            v270 = (uint64_t ****)(v267 + 16 * v269);
            goto LABEL_383;
          }
        }
LABEL_382:
        v270 = (uint64_t ****)(v267 + 16 * v268);
      }
LABEL_383:
      v275 = v270[1];
      v278 = (size_t)*v275;
      v276 = (const char *)(v275 + 2);
      v277 = v278;
      v279 = (_WORD *)*((_QWORD *)v45 + 4);
      if (v278 > *((_QWORD *)v45 + 3) - (_QWORD)v279)
      {
        llvm::raw_ostream::write(v45, v276, v277);
        goto LABEL_385;
      }
      if (v277)
      {
        memcpy(v279, v276, v277);
        v279 = (_WORD *)(*((_QWORD *)v45 + 4) + v277);
        *((_QWORD *)v45 + 4) = v279;
      }
    }
    else
    {
LABEL_385:
      v279 = (_WORD *)*((_QWORD *)v45 + 4);
    }
    if (*((_QWORD *)v45 + 3) - (_QWORD)v279 > 5uLL)
    {
      v279[2] = 8250;
      *(_DWORD *)v279 = 1145643047;
      *((_QWORD *)v45 + 4) += 6;
    }
    else
    {
      llvm::raw_ostream::write(v45, "' ID: ", 6uLL);
    }
    if (((unint64_t)v250 & 0xFF00000000) != 0)
      v280 = (int)v250;
    else
      v280 = -1;
    if ((v280 & 0x8000000000000000) != 0)
    {
      v280 = -(uint64_t)v280;
      v281 = v45;
      v282 = 1;
    }
    else
    {
      v281 = v45;
      v282 = 0;
    }
    sub_1C5E21910(v281, v280, 0, 0, v282);
    v283 = *((_QWORD *)v45 + 4);
    if ((unint64_t)(*((_QWORD *)v45 + 3) - v283) > 2)
    {
      *(_BYTE *)(v283 + 2) = 32;
      *(_WORD *)v283 = 11552;
      *((_QWORD *)v45 + 4) += 3;
    }
    else
    {
      llvm::raw_ostream::write(v45, " - ", 3uLL);
    }
    if (v385 >= 0)
      v284 = __p;
    else
      v284 = (void **)__p[0];
    if (v385 >= 0)
      v285 = HIBYTE(v385) & 0x7F;
    else
      v285 = (size_t)__p[1];
    llvm::raw_ostream::write(v45, (const char *)v284, v285);
    v286 = *((_QWORD *)v45 + 4);
    if ((unint64_t)(*((_QWORD *)v45 + 3) - v286) > 0x11)
    {
      *(_WORD *)(v286 + 16) = 8250;
      *(_OWORD *)v286 = *(_OWORD *)" - Peak pressure: ";
      *((_QWORD *)v45 + 4) += 18;
    }
    else
    {
      llvm::raw_ostream::write(v45, " - Peak pressure: ", 0x12uLL);
    }
    sub_1C5E21910(v45, v373, 0, 0, 0);
    v287 = *((_QWORD *)v45 + 4);
    if ((unint64_t)(*((_QWORD *)v45 + 3) - v287) > 9)
    {
      *(_WORD *)(v287 + 8) = 10354;
      *(_QWORD *)v287 = *(_QWORD *)" + scalar(";
      *((_QWORD *)v45 + 4) += 10;
    }
    else
    {
      llvm::raw_ostream::write(v45, " + scalar(", 0xAuLL);
    }
    sub_1C5E21910(v45, v65, 0, 0, 0);
    v288 = (_DWORD *)*((_QWORD *)v45 + 4);
    if (*((_QWORD *)v45 + 3) - (_QWORD)v288 > 3uLL)
    {
      *v288 = 545005609;
      *((_QWORD *)v45 + 4) += 4;
    }
    else
    {
      llvm::raw_ostream::write(v45, ") | ", 4uLL);
    }
    sub_1C5E21910(v45, v375, 0, 0, 0);
    v289 = *((_QWORD *)v45 + 4);
    if ((unint64_t)(*((_QWORD *)v45 + 3) - v289) > 9)
    {
      *(_WORD *)(v289 + 8) = 10354;
      *(_QWORD *)v289 = *(_QWORD *)" | scalar(";
      *((_QWORD *)v45 + 4) += 10;
    }
    else
    {
      llvm::raw_ostream::write(v45, " | scalar(", 0xAuLL);
    }
    sub_1C5E21910(v45, v67, 0, 0, 0);
    v290 = *((_QWORD *)v45 + 4);
    if ((unint64_t)(*((_QWORD *)v45 + 3) - v290) > 0xB)
    {
      *(_DWORD *)(v290 + 8) = 678261359;
      *(_QWORD *)v290 = *(_QWORD *)") | uniform(";
      *((_QWORD *)v45 + 4) += 12;
    }
    else
    {
      llvm::raw_ostream::write(v45, ") | uniform(", 0xCuLL);
    }
    sub_1C5E21910(v45, v68, 0, 0, 0);
    v291 = (void *)*((_QWORD *)v45 + 4);
    if (*((_QWORD *)v45 + 3) - (_QWORD)v291 > 0x14uLL)
    {
      qmemcpy(v291, ") | AccGPR16Pressure(", 21);
      *((_QWORD *)v45 + 4) += 21;
    }
    else
    {
      llvm::raw_ostream::write(v45, ") | AccGPR16Pressure(", 0x15uLL);
    }
    v401 = (char *)v403;
    v402 = xmmword_1C64638D0;
    llvm::APInt::toString((uint64_t)&v399, &v401, 0xAu, 0, 0);
    llvm::raw_ostream::write(v45, v401, v402);
    if (v401 != (char *)v403)
      free(v401);
    v292 = (void *)*((_QWORD *)v45 + 4);
    if (*((_QWORD *)v45 + 3) - (_QWORD)v292 > 0x15uLL)
    {
      qmemcpy(v292, ") | AccScalarPressure(", 22);
      *((_QWORD *)v45 + 4) += 22;
    }
    else
    {
      llvm::raw_ostream::write(v45, ") | AccScalarPressure(", 0x16uLL);
    }
    v401 = (char *)v403;
    v402 = xmmword_1C64638D0;
    llvm::APInt::toString((uint64_t)&v397, &v401, 0xAu, 0, 0);
    llvm::raw_ostream::write(v45, v401, v402);
    if (v401 != (char *)v403)
      free(v401);
    v293 = (void *)*((_QWORD *)v45 + 4);
    if (*((_QWORD *)v45 + 3) - (_QWORD)v293 > 0x16uLL)
    {
      qmemcpy(v293, ") | AccUniformPressure(", 23);
      *((_QWORD *)v45 + 4) += 23;
    }
    else
    {
      llvm::raw_ostream::write(v45, ") | AccUniformPressure(", 0x17uLL);
    }
    v401 = (char *)v403;
    v402 = xmmword_1C64638D0;
    llvm::APInt::toString((uint64_t)&v395, &v401, 0xAu, 0, 0);
    llvm::raw_ostream::write(v45, v401, v402);
    if (v401 != (char *)v403)
      free(v401);
    v294 = *((_QWORD *)v45 + 4);
    if ((unint64_t)(*((_QWORD *)v45 + 3) - v294) > 0x11)
    {
      *(_WORD *)(v294 + 16) = 10353;
      *(_OWORD *)v294 = *(_OWORD *)") | AccInstrsFreq(";
      *((_QWORD *)v45 + 4) += 18;
    }
    else
    {
      llvm::raw_ostream::write(v45, ") | AccInstrsFreq(", 0x12uLL);
    }
    v401 = (char *)v403;
    v402 = xmmword_1C64638D0;
    llvm::APInt::toString((uint64_t)&v393, &v401, 0xAu, 0, 0);
    llvm::raw_ostream::write(v45, v401, v402);
    if (v401 != (char *)v403)
      free(v401);
    v295 = (void *)*((_QWORD *)v45 + 4);
    if (*((_QWORD *)v45 + 3) - (_QWORD)v295 > 0x17uLL)
    {
      qmemcpy(v295, ") | AccScalarInstrsFreq(", 24);
      *((_QWORD *)v45 + 4) += 24;
    }
    else
    {
      llvm::raw_ostream::write(v45, ") | AccScalarInstrsFreq(", 0x18uLL);
    }
    v401 = (char *)v403;
    v402 = xmmword_1C64638D0;
    llvm::APInt::toString((uint64_t)&v389, &v401, 0xAu, 0, 0);
    llvm::raw_ostream::write(v45, v401, v402);
    if (v401 != (char *)v403)
      free(v401);
    v296 = (void *)*((_QWORD *)v45 + 4);
    if (*((_QWORD *)v45 + 3) - (_QWORD)v296 > 0x1AuLL)
    {
      qmemcpy(v296, ") | AvgRegFootPrintWScalar(", 27);
      *((_QWORD *)v45 + 4) += 27;
    }
    else
    {
      llvm::raw_ostream::write(v45, ") | AvgRegFootPrintWScalar(", 0x1BuLL);
    }
    v401 = (char *)v403;
    v402 = xmmword_1C64638D0;
    llvm::APInt::toString((uint64_t)&v382, &v401, 0xAu, 0, 0);
    llvm::raw_ostream::write(v45, v401, v402);
    if (v401 != (char *)v403)
      free(v401);
    v297 = *((_QWORD *)v45 + 4);
    if ((unint64_t)(*((_QWORD *)v45 + 3) - v297) > 0x13)
    {
      *(_DWORD *)(v297 + 16) = 678719081;
      *(_OWORD *)v297 = *(_OWORD *)") | AvgRegFootPrint(";
      *((_QWORD *)v45 + 4) += 20;
    }
    else
    {
      llvm::raw_ostream::write(v45, ") | AvgRegFootPrint(", 0x14uLL);
    }
    v401 = (char *)v403;
    v402 = xmmword_1C64638D0;
    llvm::APInt::toString((uint64_t)&v378, &v401, 0xAu, 0, 0);
    llvm::raw_ostream::write(v45, v401, v402);
    ShaderID = (llvm *)v401;
    if (v401 != (char *)v403)
      free(v401);
    v298 = *((_QWORD *)v45 + 4);
    if ((unint64_t)(*((_QWORD *)v45 + 3) - v298) > 2)
    {
      *(_BYTE *)(v298 + 2) = 10;
      *(_WORD *)v298 = 2601;
      *((_QWORD *)v45 + 4) += 3;
    }
    else
    {
      ShaderID = llvm::raw_ostream::write(v45, ")\n\n", 3uLL);
    }
    if (v379 >= 0x41)
    {
      ShaderID = (llvm *)v378;
      if (v378)
        ShaderID = (llvm *)MEMORY[0x1CAA32F9C](v378, 0x1000C8000313F17);
    }
    if (v383 >= 0x41)
    {
      ShaderID = (llvm *)v382;
      if (v382)
        ShaderID = (llvm *)MEMORY[0x1CAA32F9C](v382, 0x1000C8000313F17);
    }
  }
  if (SHIBYTE(v385) < 0)
    operator delete(__p[0]);
  if (v388 && SHIBYTE(v387) < 0)
    operator delete(v386[0]);
  if (v390 >= 0x41)
  {
    ShaderID = (llvm *)v389;
    if (v389)
      ShaderID = (llvm *)MEMORY[0x1CAA32F9C](v389, 0x1000C8000313F17);
  }
  if (v392 >= 0x41)
  {
    ShaderID = (llvm *)v391;
    if (v391)
      ShaderID = (llvm *)MEMORY[0x1CAA32F9C](v391, 0x1000C8000313F17);
  }
  if (v394 >= 0x41)
  {
    ShaderID = (llvm *)v393;
    if (v393)
      ShaderID = (llvm *)MEMORY[0x1CAA32F9C](v393, 0x1000C8000313F17);
  }
  if (v396 >= 0x41)
  {
    ShaderID = (llvm *)v395;
    if (v395)
      ShaderID = (llvm *)MEMORY[0x1CAA32F9C](v395, 0x1000C8000313F17);
  }
  if (v398 >= 0x41)
  {
    ShaderID = (llvm *)v397;
    if (v397)
      ShaderID = (llvm *)MEMORY[0x1CAA32F9C](v397, 0x1000C8000313F17);
  }
  if (v400 >= 0x41)
  {
    ShaderID = v399;
    if (v399)
      ShaderID = (llvm *)MEMORY[0x1CAA32F9C](v399, 0x1000C8000313F17);
  }
  *(_BYTE *)(v5 + 28) = (v366 | v65) != 0;
  if (byte_1ED807AE8)
  {
    v300 = llvm::dbgs(ShaderID);
    v301 = v300;
    v303 = *(_QWORD *)(v5 + 80);
    v302 = *(_QWORD *)(v5 + 88);
    v304 = *((_QWORD *)v300 + 4);
    if ((unint64_t)(*((_QWORD *)v300 + 3) - v304) > 0x13)
    {
      *(_DWORD *)(v304 + 16) = 544370534;
      *(_OWORD *)v304 = *(_OWORD *)"\n===== Liveness for ";
      *((_QWORD *)v300 + 4) += 20;
    }
    else
    {
      llvm::raw_ostream::write(v300, "\n===== Liveness for ", 0x14uLL);
    }
    if ((*((_BYTE *)v247 + 23) & 0x10) != 0)
    {
      v305 = ***v247;
      v306 = *(_QWORD *)(v305 + 152);
      v307 = *(unsigned int *)(v305 + 168);
      if ((_DWORD)v307)
      {
        LODWORD(v308) = (v307 - 1) & ((v247 >> 4) ^ (v247 >> 9));
        v309 = (uint64_t ****)(v306 + 16 * v308);
        v310 = *v309;
        if (*v309 != v247)
        {
          v311 = 1;
          do
          {
            if (v310 == (uint64_t ***)-4096)
              goto LABEL_491;
            v312 = v308 + v311++;
            v308 = v312 & (v307 - 1);
            v310 = *(uint64_t ****)(v306 + 16 * v308);
          }
          while (v310 != v247);
          v309 = (uint64_t ****)(v306 + 16 * v308);
        }
      }
      else
      {
LABEL_491:
        v309 = (uint64_t ****)(v306 + 16 * v307);
      }
      v313 = (size_t *)v309[1];
      v316 = *v313;
      v314 = v313 + 2;
      v315 = v316;
      v317 = (_DWORD *)*((_QWORD *)v301 + 4);
      if (v316 <= *((_QWORD *)v301 + 3) - (_QWORD)v317)
      {
        if (v315)
        {
          memcpy(v317, v314, v315);
          v317 = (_DWORD *)(*((_QWORD *)v301 + 4) + v315);
          *((_QWORD *)v301 + 4) = v317;
        }
        goto LABEL_497;
      }
      llvm::raw_ostream::write(v301, (const char *)v314, v315);
    }
    v317 = (_DWORD *)*((_QWORD *)v301 + 4);
LABEL_497:
    if (*((_QWORD *)v301 + 3) - (_QWORD)v317 > 6uLL)
    {
      *(_DWORD *)((char *)v317 + 3) = 171785533;
      *v317 = 1027423520;
      *((_QWORD *)v301 + 4) += 7;
    }
    else
    {
      llvm::raw_ostream::write(v301, " =====\n", 7uLL);
    }
    for (i = v247[10]; ; i = (uint64_t **)i[1])
    {
      if (i == (uint64_t **)v13)
        return;
      if (i)
        v319 = (uint64_t ***)(i - 3);
      else
        v319 = 0;
      v320 = sub_1C55ECC44(v6, (uint64_t)v319);
      v321 = v319 >> 4;
      if ((*((_BYTE *)v319 + 23) & 0x10) == 0)
        goto LABEL_514;
      v322 = ***v319;
      v323 = *(_QWORD *)(v322 + 152);
      v324 = *(unsigned int *)(v322 + 168);
      if ((_DWORD)v324)
      {
        LODWORD(v325) = (v324 - 1) & (v321 ^ (v319 >> 9));
        v326 = (uint64_t ****)(v323 + 16 * v325);
        v327 = *v326;
        if (*v326 == v319)
          goto LABEL_512;
        v328 = 1;
        while (v327 != (uint64_t ***)-4096)
        {
          v329 = v325 + v328++;
          v325 = v329 & (v324 - 1);
          v327 = *(uint64_t ****)(v323 + 16 * v325);
          if (v327 == v319)
          {
            v326 = (uint64_t ****)(v323 + 16 * v325);
            goto LABEL_512;
          }
        }
      }
      v326 = (uint64_t ****)(v323 + 16 * v324);
LABEL_512:
      v330 = v326[1];
      v333 = (size_t)*v330;
      v331 = (const char *)(v330 + 2);
      v332 = v333;
      v334 = (_BYTE *)*((_QWORD *)v301 + 4);
      if (v333 > *((_QWORD *)v301 + 3) - (_QWORD)v334)
      {
        llvm::raw_ostream::write(v301, v331, v332);
LABEL_514:
        v334 = (_BYTE *)*((_QWORD *)v301 + 4);
        goto LABEL_517;
      }
      if (v332)
      {
        memcpy(v334, v331, v332);
        v334 = (_BYTE *)(*((_QWORD *)v301 + 4) + v332);
        *((_QWORD *)v301 + 4) = v334;
      }
LABEL_517:
      if (*((_QWORD *)v301 + 3) - (_QWORD)v334 > 8uLL)
      {
        v334[8] = 32;
        *(_QWORD *)v334 = *(_QWORD *)"-livein: ";
        *((_QWORD *)v301 + 4) += 9;
      }
      else
      {
        llvm::raw_ostream::write(v301, "-livein: ", 9uLL);
      }
      sub_1C55EE2F4((char **)v301, (_QWORD *)(v320 + 8), v303, v302, 0);
      v335 = (_BYTE *)*((_QWORD *)v301 + 4);
      if ((unint64_t)v335 >= *((_QWORD *)v301 + 3))
      {
        llvm::raw_ostream::write(v301, 10);
      }
      else
      {
        *((_QWORD *)v301 + 4) = v335 + 1;
        *v335 = 10;
      }
      if ((*((_BYTE *)v319 + 23) & 0x10) == 0)
        goto LABEL_532;
      v336 = ***v319;
      v337 = *(_QWORD *)(v336 + 152);
      v338 = *(unsigned int *)(v336 + 168);
      if ((_DWORD)v338)
      {
        LODWORD(v339) = (v338 - 1) & (v321 ^ (v319 >> 9));
        v340 = (uint64_t ****)(v337 + 16 * v339);
        v341 = *v340;
        if (*v340 == v319)
          goto LABEL_530;
        v342 = 1;
        while (v341 != (uint64_t ***)-4096)
        {
          v343 = v339 + v342++;
          v339 = v343 & (v338 - 1);
          v341 = *(uint64_t ****)(v337 + 16 * v339);
          if (v341 == v319)
          {
            v340 = (uint64_t ****)(v337 + 16 * v339);
            goto LABEL_530;
          }
        }
      }
      v340 = (uint64_t ****)(v337 + 16 * v338);
LABEL_530:
      v344 = v340[1];
      v347 = (size_t)*v344;
      v345 = (const char *)(v344 + 2);
      v346 = v347;
      v348 = (_WORD *)*((_QWORD *)v301 + 4);
      if (v347 > *((_QWORD *)v301 + 3) - (_QWORD)v348)
      {
        llvm::raw_ostream::write(v301, v345, v346);
LABEL_532:
        v348 = (_WORD *)*((_QWORD *)v301 + 4);
        goto LABEL_535;
      }
      if (v346)
      {
        memcpy(v348, v345, v346);
        v348 = (_WORD *)(*((_QWORD *)v301 + 4) + v346);
        *((_QWORD *)v301 + 4) = v348;
      }
LABEL_535:
      if (*((_QWORD *)v301 + 3) - (_QWORD)v348 > 9uLL)
      {
        v348[4] = 8250;
        *(_QWORD *)v348 = *(_QWORD *)"-liveout: ";
        *((_QWORD *)v301 + 4) += 10;
      }
      else
      {
        llvm::raw_ostream::write(v301, "-liveout: ", 0xAuLL);
      }
      sub_1C55EE2F4((char **)v301, (_QWORD *)(v320 + 296), v303, v302, 0);
      v349 = (_WORD *)*((_QWORD *)v301 + 4);
      if (*((_QWORD *)v301 + 3) - (_QWORD)v349 > 1uLL)
      {
        *v349 = 2570;
        *((_QWORD *)v301 + 4) += 2;
      }
      else
      {
        llvm::raw_ostream::write(v301, "\n\n", 2uLL);
      }
    }
  }
}

void sub_1C55EABB0(unint64_t a1, uint64_t ***a2)
{
  uint64_t v3;
  int v4;
  uint64_t ***v5;
  uint64_t **v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  llvm::SmallPtrSetImplBase *v23;
  int v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _BYTE *v32;
  llvm *v33;
  llvm *v34;
  _OWORD *v35;
  _BYTE *v36;
  uint64_t **v37;
  uint64_t v38;
  _BYTE *v39;
  void *v40;
  void *v41;
  unsigned int v42;
  unsigned int v43;
  _BYTE *v44;
  void *v45;
  void *v46;
  int v47;
  unsigned int v48;
  _BYTE *v49;
  _QWORD *v50;
  _QWORD *v51;
  unsigned int v52;
  unsigned int v53;
  _BYTE *v54;
  void *v55;
  void *v56;
  unsigned int v57;
  unsigned int v58;
  int v59;
  _DWORD *v60;
  _DWORD *v61;
  uint64_t v63;
  _QWORD *v64;
  llvm::SmallPtrSetImplBase *v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  int v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  const void **v74;
  const void **v75;
  const void *v76;
  char *v77;
  const void *v78;
  uint64_t v79;
  unsigned int v80;
  unsigned int v81;
  int v82;
  char *v83;
  unsigned int *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t *v87;
  char *v88;
  uint64_t v89;
  char *v90;
  unsigned int *v91;
  unint64_t *v92;
  unint64_t v93;
  char *v94;
  char *v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  unint64_t *v100;
  unint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unsigned int *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t *v107;
  int v108;
  _QWORD *v109;
  uint64_t v110;
  unint64_t *v111;
  unint64_t v112;
  uint64_t v113;
  unsigned int *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t *v117;
  _QWORD *v118;
  uint64_t v119;
  unint64_t *v120;
  unint64_t v121;
  uint64_t v122;
  unsigned int *v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t *v126;
  _QWORD *v127;
  uint64_t v128;
  unint64_t *v129;
  unint64_t v130;
  const void *v131;
  char *v132;
  const void *v133;
  unsigned int v134;
  uint64_t v135;
  unsigned int v136;
  int v137;
  uint64_t v138;
  unsigned int *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t *v142;
  _QWORD *v143;
  uint64_t v144;
  unsigned int *v145;
  unint64_t *v146;
  unint64_t v147;
  uint64_t v148;
  uint64_t *v149;
  char *v150;
  uint64_t v151;
  unint64_t *v152;
  unint64_t v153;
  unint64_t v154;
  int v155;
  unint64_t v156;
  llvm *v158;
  llvm *v159;
  _OWORD *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t ****v165;
  uint64_t ***v166;
  int v167;
  int v168;
  llvm *v169;
  llvm *v170;
  void *v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t *v176;
  uint64_t v177;
  int v178;
  int v179;
  uint64_t v180;
  size_t *v181;
  const void *v182;
  size_t v183;
  size_t v184;
  _WORD *v185;
  uint64_t v186;
  _BYTE *v187;
  size_t *v188;
  const void *v189;
  size_t v190;
  size_t v191;
  _WORD *v192;
  uint64_t v193;
  _BYTE *v194;
  llvm *v195;
  llvm *v196;
  llvm *v197;
  void *v198;
  _BYTE *v199;
  unsigned int v200;
  int v201;
  unsigned int v202;
  unsigned int v203;
  llvm *v204;
  llvm *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t ****v211;
  uint64_t ***v212;
  int v213;
  int v214;
  void *v215;
  void *v216;
  llvm *v217;
  void *v218;
  size_t *v219;
  const void *v220;
  size_t v221;
  size_t v222;
  uint64_t ***v223;
  unint64_t v224;
  uint64_t v225;
  int v226;
  int v227;
  int v228;
  int v229;
  uint64_t ***v230;
  int v231;
  char *v232;
  char *v233;
  unsigned int v234;
  int v235;
  int v236;
  _BYTE v237[256];
  uint64_t v238;
  uint64_t ***v239;
  _BYTE *v240;
  void *v241;
  unsigned int v242;
  unsigned int v243;
  int v244;
  _BYTE v245[64];
  void *v246;
  uint64_t v247;
  _BYTE v248[192];
  __int128 v249;
  unsigned int v250;
  unsigned int v251;
  int v252;
  _BYTE v253[64];
  void *v254;
  uint64_t v255;
  _BYTE v256[192];
  _BYTE *v257;
  void *v258;
  int v259;
  int v260;
  int v261;
  _BYTE v262[64];
  void *v263[2];
  _BYTE v264[192];
  _BYTE *v265;
  void *v266;
  unsigned int v267;
  unsigned int v268;
  int v269;
  _BYTE v270[64];
  void *v271[2];
  _BYTE v272[192];
  _QWORD *v273;
  void *v274;
  unsigned int v275;
  unsigned int v276;
  int v277;
  void *v278;
  int v279;
  uint64_t v280;
  void *v281;
  void *v282;
  unsigned int v283;
  unsigned int v284;
  int v285;
  void *v286;
  int v287;
  uint64_t v288;
  _DWORD *v289;
  void *v290;
  uint64_t v291;
  _DWORD v292[16];
  uint64_t v293;
  void *v294[26];
  void *v295;
  void *__src;
  unsigned int v297;
  unsigned int v298;
  int v299;
  void *v300;
  int v301;
  _QWORD v302[26];

  v3 = a1;
  v302[24] = *MEMORY[0x1E0C80C00];
  v4 = byte_1ED807AE8;
  if (!byte_1ED807AE8)
    goto LABEL_2;
  v204 = llvm::dbgs((llvm *)a1);
  v205 = v204;
  v206 = *((_QWORD *)v204 + 4);
  if ((unint64_t)(*((_QWORD *)v204 + 3) - v206) > 8)
  {
    *(_BYTE *)(v206 + 8) = 32;
    *(_QWORD *)v206 = *(_QWORD *)"Analyze: ";
    *((_QWORD *)v204 + 4) += 9;
  }
  else
  {
    llvm::raw_ostream::write(v204, "Analyze: ", 9uLL);
  }
  if ((*((_BYTE *)a2 + 23) & 0x10) != 0)
  {
    v207 = ***a2;
    v208 = *(_QWORD *)(v207 + 152);
    v209 = *(unsigned int *)(v207 + 168);
    if ((_DWORD)v209)
    {
      LODWORD(v210) = (v209 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v211 = (uint64_t ****)(v208 + 16 * v210);
      v212 = *v211;
      if (*v211 == a2)
        goto LABEL_417;
      v213 = 1;
      while (v212 != (uint64_t ***)-4096)
      {
        v214 = v210 + v213++;
        v210 = v214 & (v209 - 1);
        v212 = *(uint64_t ****)(v208 + 16 * v210);
        if (v212 == a2)
        {
          v211 = (uint64_t ****)(v208 + 16 * v210);
          goto LABEL_417;
        }
      }
    }
    v211 = (uint64_t ****)(v208 + 16 * v209);
LABEL_417:
    v219 = (size_t *)v211[1];
    v222 = *v219;
    v220 = v219 + 2;
    v221 = v222;
    a1 = *((_QWORD *)v205 + 4);
    if (v222 <= *((_QWORD *)v205 + 3) - a1)
    {
      if (v221)
      {
        memcpy((void *)a1, v220, v221);
        a1 = *((_QWORD *)v205 + 4) + v221;
        *((_QWORD *)v205 + 4) = a1;
      }
    }
    else
    {
      llvm::raw_ostream::write(v205, (const char *)v220, v221);
      a1 = *((_QWORD *)v205 + 4);
    }
    goto LABEL_421;
  }
  a1 = *((_QWORD *)v205 + 4);
LABEL_421:
  if (a1 >= *((_QWORD *)v205 + 3))
  {
    a1 = (unint64_t)llvm::raw_ostream::write(v205, 10);
  }
  else
  {
    *((_QWORD *)v205 + 4) = a1 + 1;
    *(_BYTE *)a1 = 10;
  }
  v4 = byte_1ED807AE8;
LABEL_2:
  v5 = (uint64_t ***)a2[9];
  *(_QWORD *)v3 = 0;
  *(_QWORD *)(v3 + 8) = 0;
  *(_DWORD *)(v3 + 16) = 0;
  v230 = a2 + 9;
  if (v5 != a2 + 9)
  {
    if (v4)
    {
      a1 = (unint64_t)llvm::dbgs((llvm *)a1);
      v215 = *(void **)(a1 + 32);
      if (*(_QWORD *)(a1 + 24) - (_QWORD)v215 > 0x1CuLL)
      {
        qmemcpy(v215, "Collect liveness information\n", 29);
        *(_QWORD *)(a1 + 32) += 29;
      }
      else
      {
        a1 = (unint64_t)llvm::raw_ostream::write((llvm::raw_ostream *)a1, "Collect liveness information\n", 0x1DuLL);
      }
    }
    v223 = a2;
    v6 = a2[10];
    if (v6 != (uint64_t **)v230)
    {
      while (1)
      {
        if (v6)
          v7 = (uint64_t)(v6 - 3);
        else
          v7 = 0;
        v295 = (void *)v7;
        v273 = 0;
        a1 = sub_1C55EC64C(*(_QWORD *)v3, *(_DWORD *)(v3 + 16), v7, &v273);
        v8 = v273;
        if ((a1 & 1) == 0)
        {
          v8 = sub_1C55EC6E4(v3, (uint64_t *)&v295, v273);
          *v8 = v7;
          bzero(v8 + 4, 0x6A8uLL);
          v8[1] = v8 + 5;
          v8[2] = v8 + 5;
          v8[3] = 32;
          v8[37] = v8 + 41;
          v8[38] = v8 + 41;
          *((_DWORD *)v8 + 78) = 32;
          v8[73] = v8 + 77;
          v8[74] = v8 + 77;
          *((_DWORD *)v8 + 150) = 32;
          v8[109] = v8 + 113;
          v8[110] = v8 + 113;
          *((_DWORD *)v8 + 222) = 32;
          v8[145] = v8 + 149;
          v8[146] = v8 + 149;
          *((_DWORD *)v8 + 294) = 32;
          v8[181] = v8 + 185;
          v8[182] = v8 + 185;
          *((_DWORD *)v8 + 366) = 32;
        }
        v9 = (_QWORD *)(v7 + 40);
        v10 = *(_QWORD **)(v7 + 40);
        if (v10 != (_QWORD *)(v7 + 40))
        {
          do
          {
            v11 = v10 ? (uint64_t)(v10 - 3) : 0;
            if (*(_BYTE *)(v11 + 16) == 83)
              break;
            sub_1C4774094((llvm::SmallPtrSetImplBase *)(v8 + 73), v11);
            a1 = (unint64_t)sub_1C477672C((uint64_t)(v8 + 109), v11);
            v12 = v8[110];
            v13 = 888;
            if (v12 == v8[109])
              v13 = 892;
            if (a1 != v12 + 8 * *(unsigned int *)((char *)v8 + v13))
            {
              *(_QWORD *)a1 = -2;
              ++*((_DWORD *)v8 + 224);
            }
            v14 = *(_DWORD *)(v11 + 20);
            if ((v14 & 0x40000000) != 0)
            {
              v16 = *(uint64_t **)(v11 - 8);
              v15 = v14 & 0x7FFFFFF;
              if (v15)
              {
LABEL_23:
                v17 = 32 * v15;
                do
                {
                  v18 = *(unsigned __int8 *)(*v16 + 16);
                  if (v18 >= 0x15 && v18 != 22)
                    a1 = (unint64_t)sub_1C4774094((llvm::SmallPtrSetImplBase *)(v8 + 109), *v16);
                  v16 += 4;
                  v17 -= 32;
                }
                while (v17);
              }
            }
            else
            {
              v15 = v14 & 0x7FFFFFF;
              v16 = (uint64_t *)(v11 - 32 * v15);
              if (v15)
                goto LABEL_23;
            }
            v10 = (_QWORD *)*v10;
          }
          while (v10 != v9);
          if ((_QWORD *)*v9 != v9)
          {
            v20 = *(_QWORD *)(v7 + 48);
            v21 = v20 - 24;
            v22 = v20 ? v20 - 24 : 0;
            if (v20 && *(_BYTE *)(v22 + 16) == 83)
              break;
          }
        }
LABEL_51:
        v6 = (uint64_t **)v6[1];
        if (v6 == (uint64_t **)v230)
          goto LABEL_52;
      }
      v23 = (llvm::SmallPtrSetImplBase *)(v8 + 145);
      while (1)
      {
        a1 = (unint64_t)sub_1C4774094(v23, v21);
        v24 = *(_DWORD *)(v21 + 20);
        if ((v24 & 0x40000000) != 0)
        {
          v26 = *(uint64_t **)(v21 - 8);
          v27 = &v26[4 * *(unsigned int *)(v21 + 60)];
          v25 = v24 & 0x7FFFFFF;
          if (v25)
          {
LABEL_42:
            v28 = 32 * v25;
            do
            {
              if (*(unsigned __int8 *)(*v26 + 16) >= 0x15u)
              {
                v29 = sub_1C55EC570(v3, v27);
                a1 = (unint64_t)sub_1C4774094((llvm::SmallPtrSetImplBase *)(v29 + 180), *v26);
              }
              ++v27;
              v26 += 4;
              v28 -= 32;
            }
            while (v28);
          }
        }
        else
        {
          v25 = v24 & 0x7FFFFFF;
          v26 = (uint64_t *)(v21 - 32 * v25);
          v27 = &v26[4 * *(unsigned int *)(v21 + 60)];
          if (v25)
            goto LABEL_42;
        }
        v30 = *(_QWORD *)(v21 + 32);
        v21 = v30 - 24;
        if (v30)
          v31 = v30 - 24;
        else
          v31 = 0;
        if (!v30 || *(_BYTE *)(v31 + 16) != 83)
          goto LABEL_51;
      }
    }
LABEL_52:
    v32 = &unk_1ED807000;
    if (byte_1ED807AE8)
    {
      a1 = (unint64_t)llvm::dbgs((llvm *)a1);
      v216 = *(void **)(a1 + 32);
      if (*(_QWORD *)(a1 + 24) - (_QWORD)v216 > 0x19uLL)
      {
        qmemcpy(v216, "Perform dataflow analysis\n", 26);
        *(_QWORD *)(a1 + 32) += 26;
      }
      else
      {
        a1 = (unint64_t)llvm::raw_ostream::write((llvm::raw_ostream *)a1, "Perform dataflow analysis\n", 0x1AuLL);
      }
    }
    LODWORD(v224) = 0;
LABEL_54:
    v224 = (v224 + 1);
    if (v32[2792])
    {
      v33 = llvm::dbgs((llvm *)a1);
      v34 = v33;
      v35 = (_OWORD *)*((_QWORD *)v33 + 4);
      if (*((_QWORD *)v33 + 3) - (_QWORD)v35 > 0xFuLL)
      {
        *v35 = *(_OWORD *)"Start iteration ";
        *((_QWORD *)v33 + 4) += 16;
      }
      else
      {
        llvm::raw_ostream::write(v33, "Start iteration ", 0x10uLL);
      }
      sub_1C5E21910(v34, v224, 0, 0, 0);
      v36 = (_BYTE *)*((_QWORD *)v34 + 4);
      if (*((_BYTE **)v34 + 3) == v36)
      {
        llvm::raw_ostream::write(v34, "\n", 1uLL);
      }
      else
      {
        *v36 = 10;
        ++*((_QWORD *)v34 + 4);
      }
    }
    v37 = v223[10];
    if (v37)
      v38 = (uint64_t)(v37 - 3);
    else
      v38 = 0;
    sub_1C4DC3AB4((uint64_t)&v295, v38);
    memset(&v294[1], 0, 200);
    v293 = 0;
    memset(v292, 0, sizeof(v292));
    v39 = v270;
    v289 = &v292[2];
    v290 = &v292[2];
    v291 = 8;
    v294[0] = &v294[2];
    HIDWORD(v294[1]) = 8;
    v265 = v270;
    v40 = __src;
    if (__src == v295)
    {
      v266 = v270;
      v41 = __src;
    }
    else
    {
      v200 = v297;
      v39 = malloc_type_malloc(8 * v297, 0x4065EBACuLL);
      if (!v39)
      {
        if (v200 || (v39 = malloc_type_malloc(1uLL, 0x4065EBACuLL), v32 = (_BYTE *)&unk_1ED807000, !v39))
LABEL_398:
          llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
      }
      v266 = v39;
      v41 = v295;
      v40 = __src;
    }
    v42 = v298;
    v267 = v297;
    if (v40 == v41)
      v43 = v298;
    else
      v43 = v297;
    if (v43)
    {
      memmove(v39, v40, 8 * v43);
      v42 = v298;
    }
    v268 = v42;
    v269 = v299;
    v271[0] = v272;
    v271[1] = (void *)0x800000000;
    if (v301)
      sub_1C4DB22B8((uint64_t)v271, (uint64_t *)&v300);
    v44 = v262;
    v257 = v262;
    v45 = v290;
    if (v290 == v289)
    {
      v258 = v262;
      v46 = v290;
    }
    else
    {
      v201 = v291;
      v44 = malloc_type_malloc(8 * v291, 0x4065EBACuLL);
      if (!v44)
      {
        if (v201)
          goto LABEL_398;
        v44 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
        v32 = (_BYTE *)&unk_1ED807000;
        if (!v44)
          goto LABEL_398;
      }
      v258 = v44;
      v46 = v289;
      v45 = v290;
    }
    v47 = HIDWORD(v291);
    v259 = v291;
    if (v45 == v46)
      v48 = HIDWORD(v291);
    else
      v48 = v291;
    if (v48)
    {
      memmove(v44, v45, 8 * v48);
      v47 = HIDWORD(v291);
    }
    v260 = v47;
    v261 = v292[0];
    v263[0] = v264;
    v263[1] = (void *)0x800000000;
    if (LODWORD(v294[1]))
      sub_1C4DB22B8((uint64_t)v263, (uint64_t *)v294);
    sub_1C627E49C((uint64_t)&v273, (uint64_t *)&v265, (uint64_t *)&v257);
    if (v263[0] != v264)
      free(v263[0]);
    if (v258 != v257)
      free(v258);
    if (v271[0] != v272)
      free(v271[0]);
    if (v266 != v265)
      free(v266);
    v49 = v253;
    *(_QWORD *)&v249 = v253;
    v50 = v274;
    if (v274 == v273)
    {
      *((_QWORD *)&v249 + 1) = v253;
      v51 = v274;
    }
    else
    {
      v202 = v275;
      v49 = malloc_type_malloc(8 * v275, 0x4065EBACuLL);
      if (!v49)
      {
        if (v202)
          goto LABEL_398;
        v49 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
        v32 = (_BYTE *)&unk_1ED807000;
        if (!v49)
          goto LABEL_398;
      }
      *((_QWORD *)&v249 + 1) = v49;
      v51 = v273;
      v50 = v274;
    }
    v52 = v276;
    v250 = v275;
    if (v50 == v51)
      v53 = v276;
    else
      v53 = v275;
    if (v53)
    {
      memmove(v49, v50, 8 * v53);
      v52 = v276;
    }
    v251 = v52;
    v252 = v277;
    v254 = v256;
    v255 = 0x800000000;
    if (v279)
      sub_1C4DB22B8((uint64_t)&v254, (uint64_t *)&v278);
    v54 = v245;
    v240 = v245;
    v55 = v282;
    if (v282 == v281)
    {
      v241 = v245;
      v56 = v282;
    }
    else
    {
      v203 = v283;
      v54 = malloc_type_malloc(8 * v283, 0x4065EBACuLL);
      if (!v54)
      {
        if (v203)
          goto LABEL_398;
        v54 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
        v32 = (_BYTE *)&unk_1ED807000;
        if (!v54)
          goto LABEL_398;
      }
      v241 = v54;
      v56 = v281;
      v55 = v282;
    }
    v242 = v283;
    v57 = v284;
    if (v55 == v56)
      v58 = v284;
    else
      v58 = v283;
    if (v58)
    {
      memmove(v54, v55, 8 * v58);
      v57 = v284;
    }
    v243 = v57;
    v244 = v285;
    v246 = v248;
    v247 = 0x800000000;
    if (v287)
      sub_1C4DB22B8((uint64_t)&v246, (uint64_t *)&v286);
    v59 = 0;
    while (1)
    {
      if ((_DWORD)v255 == (_DWORD)v247)
      {
        if (!(_DWORD)v255)
        {
LABEL_344:
          if (v246 != v248)
            free(v246);
          if (v241 != v240)
            free(v241);
          if (v254 != v256)
            free(v254);
          if (*((_QWORD *)&v249 + 1) != (_QWORD)v249)
            free(*((void **)&v249 + 1));
          if (v286 != &v288)
            free(v286);
          if (v282 != v281)
            free(v282);
          if (v278 != &v280)
            free(v278);
          v195 = (llvm *)v274;
          if (v274 != v273)
            free(v274);
          if (v32[2792])
          {
            v196 = llvm::dbgs(v195);
            v197 = v196;
            v198 = (void *)*((_QWORD *)v196 + 4);
            if (*((_QWORD *)v196 + 3) - (_QWORD)v198 > 0xDuLL)
            {
              qmemcpy(v198, "End iteration ", 14);
              *((_QWORD *)v196 + 4) += 14;
            }
            else
            {
              llvm::raw_ostream::write(v196, "End iteration ", 0xEuLL);
            }
            sub_1C5E21910(v197, v224, 0, 0, 0);
            v199 = (_BYTE *)*((_QWORD *)v197 + 4);
            if (*((_BYTE **)v197 + 3) == v199)
            {
              llvm::raw_ostream::write(v197, "\n", 1uLL);
            }
            else
            {
              *v199 = 10;
              ++*((_QWORD *)v197 + 4);
            }
          }
          if (v294[0] != &v294[2])
            free(v294[0]);
          if (v290 != v289)
            free(v290);
          if (v300 != v302)
            free(v300);
          a1 = (unint64_t)__src;
          if (__src != v295)
            free(__src);
          if ((v59 & 1) == 0)
            return;
          goto LABEL_54;
        }
        v60 = v246;
        v61 = v254;
        while (*(_QWORD *)v61 == *(_QWORD *)v60 && v61[4] == v60[4])
        {
          v61 += 6;
          v60 += 6;
          if (v61 == (_DWORD *)((char *)v254 + 24 * v255))
            goto LABEL_344;
        }
      }
      v231 = v59;
      v239 = (uint64_t ***)*((_QWORD *)v254 + 3 * v255 - 3);
      v63 = (uint64_t)v239;
      v64 = sub_1C55EC570(v3, (uint64_t *)&v239);
      v226 = *((_DWORD *)v64 + 6);
      v227 = *((_DWORD *)v64 + 5);
      v65 = (llvm::SmallPtrSetImplBase *)(v64 + 36);
      v228 = *((_DWORD *)v64 + 78);
      v229 = *((_DWORD *)v64 + 77);
      v225 = v63;
      v66 = *(_QWORD *)(v63 + 40);
      if (v66 != v63 + 40)
      {
        if (v66)
          v67 = v66 - 24;
        else
          v67 = 0;
        v68 = *(unsigned __int8 *)(v67 + 16);
        v69 = v68 - 29;
        if (v68 != 30)
        {
          v70 = 2;
          switch(v69)
          {
            case 1:
              __break(1u);
              return;
            case 2:
              v70 = (*(_DWORD *)(v67 + 20) >> 1) & 0x3FFFFFF;
              goto LABEL_301;
            case 3:
            case 9:
              v70 = (*(_DWORD *)(v67 + 20) & 0x7FFFFFF) - 1;
              goto LABEL_301;
            case 4:
              goto LABEL_125;
            case 7:
              v70 = *(_WORD *)(v67 + 18) & 1;
              goto LABEL_301;
            case 8:
              v70 = 1;
              goto LABEL_125;
            case 10:
              v70 = *(_DWORD *)(v67 + 80) + 1;
LABEL_301:
              if (!v70)
                goto LABEL_182;
              goto LABEL_125;
            default:
              goto LABEL_182;
          }
        }
        if ((*(_DWORD *)(v67 + 20) & 0x7FFFFFF) == 3)
          v70 = 2;
        else
          v70 = 1;
LABEL_125:
        v71 = 0;
        v72 = v70;
        do
        {
          v73 = *(unsigned __int8 *)(v67 + 16);
          if (v73 != 30)
            __asm { BR              X9 }
          v238 = *(_QWORD *)(v67 - 32 - 32 * v71);
          v74 = (const void **)sub_1C55EC570(v3, &v238);
          v75 = v74;
          v232 = v237;
          v76 = v74[1];
          if (v76 == *v74)
          {
            v233 = v237;
            v77 = v237;
            v78 = v76;
          }
          else
          {
            v102 = *((unsigned int *)v74 + 4);
            v77 = (char *)malloc_type_malloc(8 * v102, 0x4065EBACuLL);
            if (!v77)
            {
              if ((_DWORD)v102)
                goto LABEL_398;
              v77 = (char *)malloc_type_malloc(1uLL, 0x4065EBACuLL);
              if (!v77)
                goto LABEL_398;
            }
            v233 = v77;
            v78 = *v75;
            v76 = v75[1];
          }
          v80 = *((_DWORD *)v75 + 4);
          LODWORD(v79) = *((_DWORD *)v75 + 5);
          v234 = v80;
          if (v76 == v78)
            v81 = v79;
          else
            v81 = v80;
          if (v81)
          {
            memmove(v77, v76, 8 * v81);
            LODWORD(v79) = *((_DWORD *)v75 + 5);
          }
          v82 = *((_DWORD *)v75 + 6);
          v235 = v79;
          v236 = v82;
          v83 = (char *)v75[145];
          if (v83 == v75[144])
            v84 = (unsigned int *)v75 + 293;
          else
            v84 = (unsigned int *)(v75 + 146);
          v85 = *v84;
          if ((_DWORD)v85)
          {
            v86 = 8 * v85;
            v87 = (uint64_t *)v75[145];
            while ((unint64_t)*v87 >= 0xFFFFFFFFFFFFFFFELL)
            {
              ++v87;
              v86 -= 8;
              if (!v86)
                goto LABEL_155;
            }
          }
          else
          {
            v87 = (uint64_t *)v75[145];
          }
          v88 = &v83[8 * v85];
          if (v87 != (uint64_t *)v88)
          {
            v89 = *v87;
LABEL_145:
            v90 = (char *)sub_1C477672C((uint64_t)&v232, v89);
            if (v233 == v232)
              v91 = (unsigned int *)&v235;
            else
              v91 = &v234;
            if (v90 != &v233[8 * *v91])
            {
              *(_QWORD *)v90 = -2;
              ++v236;
            }
            v92 = (unint64_t *)(v87 + 1);
            while (v92 != (unint64_t *)v88)
            {
              v93 = *v92++;
              v89 = v93;
              if (v93 <= 0xFFFFFFFFFFFFFFFDLL)
              {
                v87 = (uint64_t *)(v92 - 1);
                goto LABEL_145;
              }
            }
            LODWORD(v79) = v235;
          }
LABEL_155:
          v95 = v232;
          v94 = v233;
          if (v233 == v232)
            v79 = v79;
          else
            v79 = v234;
          v96 = (uint64_t *)v233;
          if ((_DWORD)v79)
          {
            v97 = 0;
            while (*(_QWORD *)&v233[v97] >= 0xFFFFFFFFFFFFFFFELL)
            {
              v97 += 8;
              if (8 * v79 == v97)
                goto LABEL_171;
            }
            v96 = (uint64_t *)&v233[v97];
          }
          v98 = (uint64_t *)&v233[8 * v79];
          if (v96 != v98)
          {
            v99 = *v96;
LABEL_166:
            sub_1C4774094(v65, v99);
            v100 = (unint64_t *)(v96 + 1);
            while (v100 != (unint64_t *)v98)
            {
              v101 = *v100++;
              v99 = v101;
              if (v101 <= 0xFFFFFFFFFFFFFFFDLL)
              {
                v96 = (uint64_t *)(v100 - 1);
                goto LABEL_166;
              }
            }
            v95 = v232;
            v94 = v233;
          }
LABEL_171:
          if (v94 != v95)
            free(v94);
          ++v71;
        }
        while (v71 != v72);
      }
LABEL_182:
      v103 = v64[181];
      if (v103 == v64[180])
        v104 = (unsigned int *)v64 + 365;
      else
        v104 = (unsigned int *)(v64 + 182);
      v105 = *v104;
      if ((_DWORD)v105)
      {
        v106 = 8 * v105;
        v107 = (uint64_t *)v64[181];
        v108 = v231;
        while ((unint64_t)*v107 >= 0xFFFFFFFFFFFFFFFELL)
        {
          ++v107;
          v106 -= 8;
          if (!v106)
            goto LABEL_197;
        }
      }
      else
      {
        v107 = (uint64_t *)v64[181];
        v108 = v231;
      }
      v109 = (_QWORD *)(v103 + 8 * v105);
      if (v107 != v109)
      {
        v110 = *v107;
LABEL_193:
        sub_1C4774094(v65, v110);
        v111 = (unint64_t *)(v107 + 1);
        while (v111 != v109)
        {
          v112 = *v111++;
          v110 = v112;
          if (v112 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v107 = (uint64_t *)(v111 - 1);
            goto LABEL_193;
          }
        }
      }
LABEL_197:
      v113 = v64[145];
      if (v113 == v64[144])
        v114 = (unsigned int *)v64 + 293;
      else
        v114 = (unsigned int *)(v64 + 146);
      v115 = *v114;
      if ((_DWORD)v115)
      {
        v116 = 8 * v115;
        v117 = (uint64_t *)v64[145];
        while ((unint64_t)*v117 >= 0xFFFFFFFFFFFFFFFELL)
        {
          ++v117;
          v116 -= 8;
          if (!v116)
            goto LABEL_212;
        }
      }
      else
      {
        v117 = (uint64_t *)v64[145];
      }
      v118 = (_QWORD *)(v113 + 8 * v115);
      if (v117 != v118)
      {
        v119 = *v117;
LABEL_208:
        sub_1C4774094((llvm::SmallPtrSetImplBase *)v64, v119);
        v120 = (unint64_t *)(v117 + 1);
        while (v120 != v118)
        {
          v121 = *v120++;
          v119 = v121;
          if (v121 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v117 = (uint64_t *)(v120 - 1);
            goto LABEL_208;
          }
        }
      }
LABEL_212:
      v122 = v64[109];
      if (v122 == v64[108])
        v123 = (unsigned int *)v64 + 221;
      else
        v123 = (unsigned int *)(v64 + 110);
      v124 = *v123;
      if ((_DWORD)v124)
      {
        v125 = 8 * v124;
        v126 = (uint64_t *)v64[109];
        while ((unint64_t)*v126 >= 0xFFFFFFFFFFFFFFFELL)
        {
          ++v126;
          v125 -= 8;
          if (!v125)
            goto LABEL_227;
        }
      }
      else
      {
        v126 = (uint64_t *)v64[109];
      }
      v127 = (_QWORD *)(v122 + 8 * v124);
      if (v126 != v127)
      {
        v128 = *v126;
LABEL_223:
        sub_1C4774094((llvm::SmallPtrSetImplBase *)v64, v128);
        v129 = (unint64_t *)(v126 + 1);
        while (v129 != v127)
        {
          v130 = *v129++;
          v128 = v130;
          if (v130 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v126 = (uint64_t *)(v129 - 1);
            goto LABEL_223;
          }
        }
      }
LABEL_227:
      v232 = v237;
      v131 = (const void *)v64[37];
      if (v131 == (const void *)v64[36])
      {
        v233 = v237;
        v132 = v237;
        v133 = v131;
      }
      else
      {
        v180 = *((unsigned int *)v64 + 76);
        v132 = (char *)malloc_type_malloc(8 * v180, 0x4065EBACuLL);
        if (!v132)
        {
          if ((_DWORD)v180)
            goto LABEL_398;
          v132 = (char *)malloc_type_malloc(1uLL, 0x4065EBACuLL);
          v108 = v231;
          if (!v132)
            goto LABEL_398;
        }
        v233 = v132;
        v133 = (const void *)v64[36];
        v131 = (const void *)v64[37];
      }
      v134 = *((_DWORD *)v64 + 76);
      v234 = v134;
      LODWORD(v135) = *((_DWORD *)v64 + 77);
      if (v131 == v133)
        v136 = *((_DWORD *)v64 + 77);
      else
        v136 = v134;
      if (v136)
      {
        v132 = (char *)memmove(v132, v131, 8 * v136);
        LODWORD(v135) = *((_DWORD *)v64 + 77);
      }
      v137 = *((_DWORD *)v64 + 78);
      v235 = v135;
      v236 = v137;
      v138 = v64[73];
      if (v138 == v64[72])
        v139 = (unsigned int *)v64 + 149;
      else
        v139 = (unsigned int *)(v64 + 74);
      v140 = *v139;
      if ((_DWORD)v140)
      {
        v141 = 8 * v140;
        v142 = (uint64_t *)v64[73];
        while ((unint64_t)*v142 >= 0xFFFFFFFFFFFFFFFELL)
        {
          ++v142;
          v141 -= 8;
          if (!v141)
            goto LABEL_255;
        }
      }
      else
      {
        v142 = (uint64_t *)v64[73];
      }
      v143 = (_QWORD *)(v138 + 8 * v140);
      if (v142 != v143)
      {
        v144 = *v142;
LABEL_245:
        v132 = (char *)sub_1C477672C((uint64_t)&v232, v144);
        if (v233 == v232)
          v145 = (unsigned int *)&v235;
        else
          v145 = &v234;
        if (v132 != &v233[8 * *v145])
        {
          *(_QWORD *)v132 = -2;
          ++v236;
        }
        v146 = (unint64_t *)(v142 + 1);
        while (v146 != v143)
        {
          v147 = *v146++;
          v144 = v147;
          if (v147 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v142 = (uint64_t *)(v146 - 1);
            goto LABEL_245;
          }
        }
        LODWORD(v135) = v235;
      }
LABEL_255:
      if (v233 == v232)
        v135 = v135;
      else
        v135 = v234;
      if ((_DWORD)v135)
      {
        v148 = 8 * v135;
        v149 = (uint64_t *)v233;
        while ((unint64_t)*v149 >= 0xFFFFFFFFFFFFFFFELL)
        {
          ++v149;
          v148 -= 8;
          if (!v148)
            goto LABEL_270;
        }
      }
      else
      {
        v149 = (uint64_t *)v233;
      }
      v150 = &v233[8 * v135];
      if (v149 != (uint64_t *)v150)
      {
        v151 = *v149;
LABEL_266:
        v132 = (char *)sub_1C4774094((llvm::SmallPtrSetImplBase *)v64, v151);
        v152 = (unint64_t *)(v149 + 1);
        while (v152 != (unint64_t *)v150)
        {
          v153 = *v152++;
          v151 = v153;
          if (v153 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v149 = (uint64_t *)(v152 - 1);
            goto LABEL_266;
          }
        }
      }
LABEL_270:
      v154 = (v227 - v226);
      v155 = v108 | ((_DWORD)v154 != *((_DWORD *)v64 + 5) - *((_DWORD *)v64 + 6));
      v32 = &unk_1ED807000;
      if ((v108 & 1) == (v108 & 1 | ((_DWORD)v154 != *((_DWORD *)v64 + 5) - *((_DWORD *)v64 + 6))))
        goto LABEL_273;
      if (!byte_1ED807AE8)
        goto LABEL_272;
      v169 = llvm::dbgs((llvm *)v132);
      v170 = v169;
      v171 = (void *)*((_QWORD *)v169 + 4);
      if (*((_QWORD *)v169 + 3) - (_QWORD)v171 > 0xEuLL)
      {
        qmemcpy(v171, "Changed livein ", 15);
        *((_QWORD *)v169 + 4) += 15;
      }
      else
      {
        llvm::raw_ostream::write(v169, "Changed livein ", 0xFuLL);
      }
      if ((*(_BYTE *)(v225 + 23) & 0x10) == 0)
        goto LABEL_321;
      v172 = ***(_QWORD ***)v225;
      v173 = *(_QWORD *)(v172 + 152);
      v174 = *(unsigned int *)(v172 + 168);
      if (!(_DWORD)v174)
        goto LABEL_318;
      LODWORD(v175) = (v174 - 1) & ((v225 >> 4) ^ (v225 >> 9));
      v176 = (uint64_t *)(v173 + 16 * v175);
      v177 = *v176;
      if (*v176 != v225)
        break;
LABEL_319:
      v188 = (size_t *)v176[1];
      v191 = *v188;
      v189 = v188 + 2;
      v190 = v191;
      v192 = (_WORD *)*((_QWORD *)v170 + 4);
      if (v191 <= *((_QWORD *)v170 + 3) - (_QWORD)v192)
      {
        if (v190)
        {
          memcpy(v192, v189, v190);
          v192 = (_WORD *)(*((_QWORD *)v170 + 4) + v190);
          *((_QWORD *)v170 + 4) = v192;
        }
        goto LABEL_324;
      }
      llvm::raw_ostream::write(v170, (const char *)v189, v190);
LABEL_321:
      v192 = (_WORD *)*((_QWORD *)v170 + 4);
LABEL_324:
      if (*((_QWORD *)v170 + 3) - (_QWORD)v192 > 5uLL)
      {
        v192[2] = 8250;
        *(_DWORD *)v192 = 1684827936;
        *((_QWORD *)v170 + 4) += 6;
      }
      else
      {
        llvm::raw_ostream::write(v170, " old: ", 6uLL);
      }
      sub_1C5E21910(v170, v154, 0, 0, 0);
      v193 = *((_QWORD *)v170 + 4);
      if ((unint64_t)(*((_QWORD *)v170 + 3) - v193) > 5)
      {
        *(_WORD *)(v193 + 4) = 8250;
        *(_DWORD *)v193 = 2003136032;
        *((_QWORD *)v170 + 4) += 6;
      }
      else
      {
        llvm::raw_ostream::write(v170, " new: ", 6uLL);
      }
      v132 = (char *)sub_1C5E21910(v170, (*((_DWORD *)v64 + 5) - *((_DWORD *)v64 + 6)), 0, 0, 0);
      v194 = (_BYTE *)*((_QWORD *)v170 + 4);
      if ((unint64_t)v194 >= *((_QWORD *)v170 + 3))
      {
        v132 = (char *)llvm::raw_ostream::write(v170, 10);
LABEL_272:
        LOBYTE(v108) = 0;
        goto LABEL_273;
      }
      LOBYTE(v108) = 0;
      *((_QWORD *)v170 + 4) = v194 + 1;
      *v194 = 10;
LABEL_273:
      v156 = (v229 - v228);
      v59 = v155 | ((_DWORD)v156 != *((_DWORD *)v64 + 77) - *((_DWORD *)v64 + 78));
      if ((v108 & 1) == (v59 & 1) || byte_1ED807AE8 == 0)
        goto LABEL_278;
      v158 = llvm::dbgs((llvm *)v132);
      v159 = v158;
      v160 = (_OWORD *)*((_QWORD *)v158 + 4);
      if (*((_QWORD *)v158 + 3) - (_QWORD)v160 > 0xFuLL)
      {
        *v160 = *(_OWORD *)"Changed liveout ";
        *((_QWORD *)v158 + 4) += 16;
      }
      else
      {
        llvm::raw_ostream::write(v158, "Changed liveout ", 0x10uLL);
      }
      if ((*((_BYTE *)v239 + 23) & 0x10) == 0)
        goto LABEL_308;
      v161 = ***v239;
      v162 = *(_QWORD *)(v161 + 152);
      v163 = *(unsigned int *)(v161 + 168);
      if (!(_DWORD)v163)
        goto LABEL_305;
      LODWORD(v164) = (v163 - 1) & ((v239 >> 4) ^ (v239 >> 9));
      v165 = (uint64_t ****)(v162 + 16 * v164);
      v166 = *v165;
      if (*v165 != v239)
      {
        v167 = 1;
        while (v166 != (uint64_t ***)-4096)
        {
          v168 = v164 + v167++;
          v164 = v168 & (v163 - 1);
          v166 = *(uint64_t ****)(v162 + 16 * v164);
          if (v166 == v239)
          {
            v165 = (uint64_t ****)(v162 + 16 * v164);
            goto LABEL_306;
          }
        }
LABEL_305:
        v165 = (uint64_t ****)(v162 + 16 * v163);
      }
LABEL_306:
      v181 = (size_t *)v165[1];
      v184 = *v181;
      v182 = v181 + 2;
      v183 = v184;
      v185 = (_WORD *)*((_QWORD *)v159 + 4);
      if (v184 <= *((_QWORD *)v159 + 3) - (_QWORD)v185)
      {
        if (v183)
        {
          memcpy(v185, v182, v183);
          v185 = (_WORD *)(*((_QWORD *)v159 + 4) + v183);
          *((_QWORD *)v159 + 4) = v185;
        }
        goto LABEL_311;
      }
      llvm::raw_ostream::write(v159, (const char *)v182, v183);
LABEL_308:
      v185 = (_WORD *)*((_QWORD *)v159 + 4);
LABEL_311:
      if (*((_QWORD *)v159 + 3) - (_QWORD)v185 > 5uLL)
      {
        v185[2] = 8250;
        *(_DWORD *)v185 = 1684827936;
        *((_QWORD *)v159 + 4) += 6;
      }
      else
      {
        llvm::raw_ostream::write(v159, " old: ", 6uLL);
      }
      sub_1C5E21910(v159, v156, 0, 0, 0);
      v186 = *((_QWORD *)v159 + 4);
      if ((unint64_t)(*((_QWORD *)v159 + 3) - v186) > 5)
      {
        *(_WORD *)(v186 + 4) = 8250;
        *(_DWORD *)v186 = 2003136032;
        *((_QWORD *)v159 + 4) += 6;
      }
      else
      {
        llvm::raw_ostream::write(v159, " new: ", 6uLL);
      }
      sub_1C5E21910(v159, (*((_DWORD *)v64 + 77) - *((_DWORD *)v64 + 78)), 0, 0, 0);
      v187 = (_BYTE *)*((_QWORD *)v159 + 4);
      if ((unint64_t)v187 >= *((_QWORD *)v159 + 3))
      {
        llvm::raw_ostream::write(v159, 10);
      }
      else
      {
        *((_QWORD *)v159 + 4) = v187 + 1;
        *v187 = 10;
      }
LABEL_278:
      if (v233 != v232)
        free(v233);
      LODWORD(v255) = v255 - 1;
      if ((_DWORD)v255)
        sub_1C4DC35CC(&v249);
    }
    v178 = 1;
    while (v177 != -4096)
    {
      v179 = v175 + v178++;
      v175 = v179 & (v174 - 1);
      v177 = *(_QWORD *)(v173 + 16 * v175);
      if (v177 == v225)
      {
        v176 = (uint64_t *)(v173 + 16 * v175);
        goto LABEL_319;
      }
    }
LABEL_318:
    v176 = (uint64_t *)(v173 + 16 * v174);
    goto LABEL_319;
  }
  if (v4)
  {
    v217 = llvm::dbgs((llvm *)a1);
    v218 = (void *)*((_QWORD *)v217 + 4);
    if (*((_QWORD *)v217 + 3) - (_QWORD)v218 > 0x19uLL)
    {
      qmemcpy(v218, "Empty: nothing to analyze\n", 26);
      *((_QWORD *)v217 + 4) += 26;
    }
    else
    {
      llvm::raw_ostream::write(v217, "Empty: nothing to analyze\n", 0x1AuLL);
    }
  }
}

uint64_t sub_1C55EC454(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  void *v10;
  void *v11;
  void *v12;
  int v13;
  int v14;

  v4 = *(_DWORD *)(a1 + 16);
  v5 = *(_QWORD **)a1;
  if (v4)
  {
    v6 = 1736 * v4;
    do
    {
      if ((*v5 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v7 = (void *)v5[182];
        if (v7 != (void *)v5[181])
          free(v7);
        v8 = (void *)v5[146];
        if (v8 != (void *)v5[145])
          free(v8);
        v9 = (void *)v5[110];
        if (v9 != (void *)v5[109])
          free(v9);
        v10 = (void *)v5[74];
        if (v10 != (void *)v5[73])
          free(v10);
        v11 = (void *)v5[38];
        if (v11 != (void *)v5[37])
          free(v11);
        v12 = (void *)v5[2];
        if (v12 != (void *)v5[1])
          free(v12);
      }
      v5 += 217;
      v6 -= 1736;
    }
    while (v6);
    v5 = *(_QWORD **)a1;
  }
  MEMORY[0x1CAA32FB4](v5, 8);
  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)a1 = *(_QWORD *)a2;
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a1 + 8) = *(_DWORD *)(a2 + 8);
  *(_DWORD *)(a2 + 8) = 0;
  v13 = *(_DWORD *)(a1 + 12);
  *(_DWORD *)(a1 + 12) = *(_DWORD *)(a2 + 12);
  *(_DWORD *)(a2 + 12) = v13;
  v14 = *(_DWORD *)(a1 + 16);
  *(_DWORD *)(a1 + 16) = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(a2 + 16) = v14;
  return a1;
}

_QWORD *sub_1C55EC570(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C55EC64C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C55EC6E4(a1, a2, v7);
    *v5 = *a2;
    bzero(v5 + 4, 0x6A8uLL);
    v5[1] = v5 + 5;
    v5[2] = v5 + 5;
    v5[3] = 32;
    v5[37] = v5 + 41;
    v5[38] = v5 + 41;
    *((_DWORD *)v5 + 78) = 32;
    v5[73] = v5 + 77;
    v5[74] = v5 + 77;
    *((_DWORD *)v5 + 150) = 32;
    v5[109] = v5 + 113;
    v5[110] = v5 + 113;
    *((_DWORD *)v5 + 222) = 32;
    v5[145] = v5 + 149;
    v5[146] = v5 + 149;
    *((_DWORD *)v5 + 294) = 32;
    v5[181] = v5 + 185;
    v5[182] = v5 + 185;
    *((_DWORD *)v5 + 366) = 32;
  }
  return v5 + 1;
}

uint64_t sub_1C55EC64C(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 1736 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 1736 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_5;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

_QWORD *sub_1C55EC6E4(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v8;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C55EC794((uint64_t *)a1, v6);
  v8 = 0;
  sub_1C55EC64C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  a3 = v8;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_QWORD *sub_1C55EC794(uint64_t *a1, int a2)
{
  uint64_t *v2;
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  void *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  void *v43;
  void *v44;
  void *v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  void *v49;
  void *v50;
  void *v51;
  void *v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t *v56;

  v2 = a1;
  v3 = *((_DWORD *)a1 + 4);
  v4 = *a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *((_DWORD *)a1 + 4) = v8;
  result = operator new(1736 * v8, (std::align_val_t)8uLL);
  *v2 = (uint64_t)result;
  if (v4)
  {
    v2[1] = 0;
    v10 = *((_DWORD *)v2 + 4);
    if (v10)
    {
      v11 = 1736 * v10;
      do
      {
        *result = -4096;
        result += 217;
        v11 -= 1736;
      }
      while (v11);
    }
    if (v3)
    {
      v12 = 0;
      v13 = 1736 * v3;
      v55 = v2;
      do
      {
        v14 = *(_QWORD *)(v4 + v12);
        if ((v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v56 = 0;
          sub_1C55EC64C(*v2, *((_DWORD *)v2 + 4), v14, &v56);
          v15 = v56;
          v16 = v4 + v12;
          v17 = v56 + 5;
          *v56 = v14;
          v15[1] = (uint64_t)v17;
          v19 = *(_QWORD *)(v4 + v12 + 8);
          v18 = *(_QWORD *)(v4 + v12 + 16);
          if (v18 == v19)
          {
            v15[2] = (uint64_t)v17;
            v20 = *(unsigned int *)(v16 + 28);
            if ((_DWORD)v20)
              memmove(v17, *(const void **)(v16 + 16), 8 * v20);
          }
          else
          {
            v15[2] = v18;
            *(_QWORD *)(v16 + 16) = v19;
          }
          v21 = v4 + v12;
          v15[3] = *(_QWORD *)(v4 + v12 + 24);
          *((_DWORD *)v15 + 8) = *(_DWORD *)(v4 + v12 + 32);
          *(_QWORD *)(v21 + 24) = 32;
          *(_DWORD *)(v21 + 32) = 0;
          v22 = v15 + 41;
          v15[37] = (uint64_t)(v15 + 41);
          v24 = *(_QWORD *)(v4 + v12 + 296);
          v23 = *(_QWORD *)(v4 + v12 + 304);
          if (v23 == v24)
          {
            v15[38] = (uint64_t)v22;
            v25 = *(unsigned int *)(v21 + 316);
            if ((_DWORD)v25)
              memmove(v22, *(const void **)(v21 + 304), 8 * v25);
          }
          else
          {
            v15[38] = v23;
            *(_QWORD *)(v21 + 304) = v24;
          }
          v26 = v4 + v12;
          v15[39] = *(_QWORD *)(v4 + v12 + 312);
          *((_DWORD *)v15 + 80) = *(_DWORD *)(v4 + v12 + 320);
          *(_QWORD *)(v26 + 312) = 32;
          *(_DWORD *)(v26 + 320) = 0;
          v27 = v15 + 77;
          v15[73] = (uint64_t)(v15 + 77);
          v28 = *(_QWORD *)(v4 + v12 + 592);
          v29 = *(_QWORD *)(v4 + v12 + 584);
          if (v28 == v29)
          {
            v15[74] = (uint64_t)v27;
            v30 = *(unsigned int *)(v26 + 604);
            if ((_DWORD)v30)
              memmove(v27, *(const void **)(v26 + 592), 8 * v30);
          }
          else
          {
            v15[74] = v28;
            *(_QWORD *)(v26 + 592) = v29;
          }
          v31 = v4 + v12;
          v15[75] = *(_QWORD *)(v4 + v12 + 600);
          *((_DWORD *)v15 + 152) = *(_DWORD *)(v4 + v12 + 608);
          *(_QWORD *)(v31 + 600) = 32;
          *(_DWORD *)(v31 + 608) = 0;
          v32 = v15 + 113;
          v15[109] = (uint64_t)(v15 + 113);
          v33 = *(_QWORD *)(v4 + v12 + 880);
          v34 = *(_QWORD *)(v4 + v12 + 872);
          if (v33 == v34)
          {
            v15[110] = (uint64_t)v32;
            v35 = *(unsigned int *)(v31 + 892);
            if ((_DWORD)v35)
              memmove(v32, *(const void **)(v31 + 880), 8 * v35);
          }
          else
          {
            v15[110] = v33;
            *(_QWORD *)(v31 + 880) = v34;
          }
          v36 = v4 + v12;
          v15[111] = *(_QWORD *)(v4 + v12 + 888);
          *((_DWORD *)v15 + 224) = *(_DWORD *)(v4 + v12 + 896);
          *(_QWORD *)(v36 + 888) = 32;
          *(_DWORD *)(v36 + 896) = 0;
          v37 = v15 + 149;
          v15[145] = (uint64_t)(v15 + 149);
          v38 = *(_QWORD *)(v4 + v12 + 1168);
          v39 = *(_QWORD *)(v4 + v12 + 1160);
          v40 = v13;
          if (v38 == v39)
          {
            v15[146] = (uint64_t)v37;
            v41 = *(unsigned int *)(v36 + 1180);
            if ((_DWORD)v41)
              memmove(v37, *(const void **)(v36 + 1168), 8 * v41);
          }
          else
          {
            v15[146] = v38;
            *(_QWORD *)(v36 + 1168) = v39;
          }
          v42 = v4 + v12;
          v15[147] = *(_QWORD *)(v4 + v12 + 1176);
          *((_DWORD *)v15 + 296) = *(_DWORD *)(v4 + v12 + 1184);
          *(_QWORD *)(v42 + 1176) = 32;
          *(_DWORD *)(v42 + 1184) = 0;
          v43 = v15 + 185;
          v15[181] = (uint64_t)(v15 + 185);
          v44 = *(void **)(v4 + v12 + 1456);
          v45 = *(void **)(v4 + v12 + 1448);
          if (v44 == v45)
          {
            v15[182] = (uint64_t)v43;
            v46 = *(unsigned int *)(v42 + 1468);
            v45 = *(void **)(v42 + 1456);
            if ((_DWORD)v46)
            {
              memmove(v43, v45, 8 * v46);
              v45 = *(void **)(v42 + 1456);
              v44 = *(void **)(v42 + 1448);
            }
          }
          else
          {
            v15[182] = (uint64_t)v44;
            *(_QWORD *)(v42 + 1456) = v45;
            v44 = v45;
          }
          v13 = v40;
          v2 = v55;
          v47 = v4 + v12;
          v15[183] = *(_QWORD *)(v4 + v12 + 1464);
          *((_DWORD *)v15 + 368) = *(_DWORD *)(v4 + v12 + 1472);
          *(_QWORD *)(v47 + 1464) = 32;
          *(_DWORD *)(v47 + 1472) = 0;
          ++*((_DWORD *)v55 + 2);
          if (v45 != v44)
            free(v45);
          v48 = *(void **)(v36 + 1168);
          if (v48 != *(void **)(v36 + 1160))
            free(v48);
          v49 = *(void **)(v31 + 880);
          if (v49 != *(void **)(v31 + 872))
            free(v49);
          v50 = *(void **)(v26 + 592);
          if (v50 != *(void **)(v26 + 584))
            free(v50);
          v51 = *(void **)(v21 + 304);
          if (v51 != *(void **)(v21 + 296))
            free(v51);
          v52 = *(void **)(v16 + 16);
          if (v52 != *(void **)(v16 + 8))
            free(v52);
        }
        v12 += 1736;
      }
      while (v13 != v12);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  v2[1] = 0;
  v53 = *((_DWORD *)v2 + 4);
  if (v53)
  {
    v54 = 1736 * v53;
    do
    {
      *result = -4096;
      result += 217;
      v54 -= 1736;
    }
    while (v54);
  }
  return result;
}

uint64_t sub_1C55ECBA0(uint64_t a1, uint64_t *a2)
{
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  v4 = (void *)(a1 + 32);
  *(_QWORD *)a1 = v4;
  v6 = *a2;
  v5 = a2[1];
  if (v5 == *a2)
  {
    *(_QWORD *)(a1 + 8) = v4;
    v7 = *((unsigned int *)a2 + 5);
    if ((_DWORD)v7)
      memmove(v4, (const void *)a2[1], 8 * v7);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = v5;
    a2[1] = v6;
  }
  *(_QWORD *)(a1 + 96) = a1 + 112;
  *(_QWORD *)(a1 + 16) = a2[2];
  *(_DWORD *)(a1 + 24) = *((_DWORD *)a2 + 6);
  a2[2] = 8;
  *((_DWORD *)a2 + 6) = 0;
  *(_QWORD *)(a1 + 104) = 0x800000000;
  if (*((_DWORD *)a2 + 26))
    sub_1C4DB2150(a1 + 96, a2 + 12);
  return a1;
}

uint64_t sub_1C55ECC44(uint64_t a1, uint64_t a2)
{
  uint64_t v4;

  v4 = 0;
  if (sub_1C55EC64C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), a2, &v4))
    return v4;
  else
    return *(_QWORD *)a1 + 1736 * *(unsigned int *)(a1 + 16);
}

void sub_1C55ECC9C(uint64_t ***a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  uint64_t v8;
  uint64_t v9;
  _BYTE *v13;
  const void *v14;
  const void *v15;
  unsigned int v16;
  unsigned int v17;
  unsigned int v18;
  int v19;
  unint64_t v20;
  int v21;
  unint64_t v22;
  int v23;
  char *v24;
  char *v25;
  char *v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  char *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unsigned int *v37;
  char *v38;
  unsigned int *v39;
  unint64_t *v40;
  unint64_t v41;
  unint64_t v42;
  int v43;
  unsigned int v44;
  unsigned int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t ****v50;
  uint64_t ***v51;
  int v52;
  int v53;
  unint64_t *v54;
  std::string::size_type v55;
  const void *v56;
  unint64_t v57;
  std::string *p_dst;
  uint64_t v59;
  uint64_t v60;
  std::string *v61;
  uint64_t v62;
  uint64_t ***v63;
  uint64_t ***v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t *v70;
  uint64_t *v71;
  char v72;
  unsigned int v73;
  uint64_t v75;
  unsigned int *v76;
  int v77;
  uint64_t *v78;
  int v79;
  uint64_t v80;
  uint64_t *v81;
  uint64_t v82;
  unsigned int v83;
  char v85;
  int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t ****v94;
  uint64_t ***v95;
  int v96;
  int v97;
  unint64_t *v98;
  std::string::size_type v99;
  const void *v100;
  unint64_t v101;
  void *v102;
  uint64_t v103;
  uint64_t v104;
  std::string *v105;
  std::string::size_type v106;
  std::string *v107;
  std::string::size_type size;
  std::string *v109;
  llvm *v110;
  llvm *v111;
  _OWORD *v112;
  uint64_t v113;
  llvm *v114;
  _BYTE *v115;
  llvm *v116;
  llvm *v117;
  void *v118;
  uint64_t v119;
  llvm *v120;
  _BYTE *v121;
  char **v122;
  llvm *v123;
  _BYTE *v124;
  char **v125;
  llvm *v126;
  llvm *v127;
  _BYTE *v128;
  int v129;
  BOOL v130;
  unsigned int v131;
  _BYTE *v132;
  uint64_t ***v133;
  uint64_t **v134;
  uint64_t *v135;
  uint64_t v136;
  _QWORD *v137;
  unsigned int *v138;
  unint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  unsigned int v143;
  unsigned int v144;
  uint64_t ***v145;
  uint64_t ***v146;
  int v148;
  std::string v149;
  std::string v150;
  std::string __dst;
  std::string __p;
  _QWORD v153[10];
  _BYTE *v154;
  _BYTE *v155;
  uint64_t v156;
  int v157;
  _BYTE v158[36];
  unsigned int v159;
  unsigned int v160;
  BOOL v161;
  char *v162;
  char *v163;
  unsigned int v164;
  unsigned int v165;
  int v166;
  _BYTE v167[256];
  char *v168;
  void *__src;
  unsigned int v170;
  unsigned int v171;
  int v172;
  _BYTE v173[256];
  _BYTE *v174;
  void *v175;
  uint64_t v176;
  int v177;
  _BYTE v178[260];
  int v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;

  v8 = a6;
  v9 = a5;
  v181 = a6;
  v182 = a5;
  v180 = a7;
  v179 = a8;
  a2[15] = 0;
  a2[16] = 0;
  v174 = v178;
  v175 = v178;
  v176 = 32;
  v177 = 0;
  v13 = v173;
  v168 = v173;
  v14 = *(const void **)(a3 + 296);
  v146 = a1;
  if (v14 == *(const void **)(a3 + 288))
  {
    __src = v173;
    v15 = v14;
  }
  else
  {
    v142 = *(unsigned int *)(a3 + 304);
    v13 = malloc_type_malloc(8 * v142, 0x4065EBACuLL);
    if (!v13)
    {
      if ((_DWORD)v142)
        goto LABEL_229;
      v13 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v13)
        goto LABEL_229;
    }
    __src = v13;
    v15 = *(const void **)(a3 + 288);
    v14 = *(const void **)(a3 + 296);
    a1 = v146;
  }
  v16 = *(_DWORD *)(a3 + 304);
  v170 = v16;
  v17 = *(_DWORD *)(a3 + 308);
  if (v14 == v15)
    v18 = *(_DWORD *)(a3 + 308);
  else
    v18 = v16;
  if (v18)
  {
    memmove(v13, v14, 8 * v18);
    v17 = *(_DWORD *)(a3 + 308);
  }
  v19 = *(_DWORD *)(a3 + 312);
  v171 = v17;
  v172 = v19;
  v20 = sub_1C55EDD00(a4, &v168, v9, v8, (llvm::SmallPtrSetImplBase *)&v174);
  a2[3] = v20;
  a2[8] = HIDWORD(v20);
  a2[13] = v21;
  a2[1] = v20;
  a2[6] = HIDWORD(v20);
  a2[11] = v21;
  v22 = sub_1C55EDD00(a4, (_QWORD *)a3, v9, v8, 0);
  *a2 = v22;
  a2[5] = HIDWORD(v22);
  a2[10] = v23;
  v24 = v167;
  v162 = v167;
  v25 = (char *)__src;
  if (__src == v168)
  {
    v163 = v167;
    v26 = (char *)__src;
    goto LABEL_10;
  }
  v143 = v170;
  v24 = (char *)malloc_type_malloc(8 * v170, 0x4065EBACuLL);
  if (!v24 && (v143 || (v24 = (char *)malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
LABEL_229:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  v163 = v24;
  v25 = v168;
  v26 = (char *)__src;
  a1 = v146;
LABEL_10:
  v27 = v170;
  v28 = v171;
  v164 = v170;
  if (v26 == v25)
    v29 = v171;
  else
    v29 = v170;
  if (v29)
  {
    memmove(v24, v26, 8 * v29);
    v26 = (char *)__src;
    v25 = v168;
    v28 = v171;
    v27 = v170;
  }
  v165 = v28;
  v166 = v172;
  v161 = HIDWORD(v176) != v177;
  if (v26 == v25)
    v30 = v28;
  else
    v30 = v27;
  v31 = (uint64_t *)v26;
  if ((_DWORD)v30)
  {
    v32 = 8 * v30;
    v31 = (uint64_t *)v26;
    while ((unint64_t)*v31 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v31;
      v32 -= 8;
      if (!v32)
        goto LABEL_39;
    }
  }
  v33 = &v26[8 * v30];
  if (v31 != (uint64_t *)v33)
  {
    v34 = *v31;
LABEL_25:
    v35 = sub_1C477672C(a3, v34);
    v36 = *(_QWORD *)(a3 + 8);
    if (v36 == *(_QWORD *)a3)
      v37 = (unsigned int *)(a3 + 20);
    else
      v37 = (unsigned int *)(a3 + 16);
    if (v35 == (_QWORD *)(v36 + 8 * *v37))
    {
      v38 = (char *)sub_1C477672C((uint64_t)&v162, v34);
      v39 = v163 == v162 ? &v165 : &v164;
      if (v38 != &v163[8 * *v39])
      {
        *(_QWORD *)v38 = -2;
        ++v166;
      }
    }
    v40 = (unint64_t *)(v31 + 1);
    while (v40 != (unint64_t *)v33)
    {
      v41 = *v40++;
      v34 = v41;
      if (v41 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v31 = (uint64_t *)(v40 - 1);
        goto LABEL_25;
      }
    }
    v8 = v181;
    v9 = v182;
  }
LABEL_39:
  v42 = sub_1C55EDD00(a4, &v162, v9, v8, 0);
  a2[2] = v42;
  a2[7] = HIDWORD(v42);
  a2[12] = v43;
  a2[4] = 0;
  a2[9] = 0;
  a2[14] = 0;
  a2[17] = 0;
  a2[18] = 0;
  v160 = a2[3];
  v159 = a2[8];
  v44 = a2[13];
  v154 = v158;
  v155 = v158;
  v156 = 4;
  v157 = 0;
  v153[0] = &v180;
  v153[1] = &v160;
  v153[2] = &v159;
  v153[3] = &v179;
  v153[4] = a4;
  v153[5] = &v154;
  v153[6] = &v182;
  v153[7] = &v181;
  v153[8] = &v174;
  v153[9] = &v161;
  v45 = a1 >> 4;
  if ((*((_BYTE *)a1 + 23) & 0x10) == 0)
  {
    v55 = 0;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
    p_dst = &__dst;
    goto LABEL_55;
  }
  v46 = ***a1;
  v47 = *(_QWORD *)(v46 + 152);
  v48 = *(unsigned int *)(v46 + 168);
  if (!(_DWORD)v48)
    goto LABEL_46;
  LODWORD(v49) = (v48 - 1) & (v45 ^ (a1 >> 9));
  v50 = (uint64_t ****)(v47 + 16 * v49);
  v51 = *v50;
  if (*v50 != a1)
  {
    v52 = 1;
    while (v51 != (uint64_t ***)-4096)
    {
      v53 = v49 + v52++;
      v49 = v53 & (v48 - 1);
      v51 = *(uint64_t ****)(v47 + 16 * v49);
      if (v51 == a1)
      {
        v50 = (uint64_t ****)(v47 + 16 * v49);
        goto LABEL_47;
      }
    }
LABEL_46:
    v50 = (uint64_t ****)(v47 + 16 * v48);
  }
LABEL_47:
  v54 = (unint64_t *)v50[1];
  v57 = *v54;
  v56 = v54 + 2;
  v55 = v57;
  if (v57 > 0x7FFFFFFFFFFFFFF7)
LABEL_223:
    abort();
  if (v55 >= 0x17)
  {
    v59 = (v55 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v55 | 7) != 0x17)
      v59 = v55 | 7;
    v60 = v59 + 1;
    p_dst = (std::string *)operator new(v59 + 1);
    __dst.__r_.__value_.__l.__size_ = v55;
    __dst.__r_.__value_.__r.__words[2] = v60 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
  }
  else
  {
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v55;
    p_dst = &__dst;
    if (!v55)
      goto LABEL_55;
  }
  memmove(p_dst, v56, v55);
LABEL_55:
  p_dst->__r_.__value_.__s.__data_[v55] = 0;
  v61 = std::string::append(&__dst, "_liveout");
  __p = *v61;
  v61->__r_.__value_.__r.__words[0] = 0;
  v61->__r_.__value_.__l.__size_ = 0;
  v61->__r_.__value_.__r.__words[2] = 0;
  sub_1C55EDE34((uint64_t)v153, (__int128 *)&__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__p.__r_.__value_.__l.__data_);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v63 = a1 + 5;
  v64 = (uint64_t ***)a1[5];
  if (v64 == a1 + 5)
  {
    v133 = a1 + 5;
    goto LABEL_193;
  }
  v148 = 0;
  v144 = v45 ^ (a1 >> 9);
  v145 = a1 + 5;
  do
  {
    v65 = v64 ? (uint64_t)(v64 - 3) : 0;
    if (*(_BYTE *)(v65 + 16) == 83)
      break;
    if (HIDWORD(v156) != v157)
    {
      v62 = (uint64_t)v155;
      if (v155 == v154)
        goto LABEL_67;
      if (v156 >= 0x21 && 4 * (HIDWORD(v156) - v157) < v156)
      {
        free(v155);
        v129 = 1 << (33 - __clz(HIDWORD(v156) - v157 - 1));
        v130 = (HIDWORD(v156) - v157) > 0x10;
        HIDWORD(v156) = 0;
        v157 = 0;
        if (v130)
          v131 = v129;
        else
          v131 = 32;
        LODWORD(v156) = v131;
        v132 = malloc_type_malloc(8 * v131, 0x4065EBACuLL);
        if (!v132)
          goto LABEL_229;
        v155 = v132;
        v62 = (uint64_t)memset(v132, 255, 8 * v156);
      }
      else
      {
        v62 = (uint64_t)memset(v155, 255, 8 * v156);
LABEL_67:
        HIDWORD(v156) = 0;
        v157 = 0;
      }
      v161 = 1;
    }
    a2[4] += v160;
    a2[9] += v159;
    a2[14] += v44;
    ++a2[17];
    v66 = v181;
    v67 = v182;
    if (*(_BYTE *)(*(_QWORD *)v65 + 8) != 7)
    {
      v62 = sub_1C55EE90C(v65, v182, v181);
      if (v62 < 2)
        goto LABEL_90;
      if ((_DWORD)v62 == 2)
      {
LABEL_89:
        ++a2[18];
        goto LABEL_90;
      }
    }
    v68 = *(_DWORD *)(v65 + 20);
    if ((v68 & 0x40000000) != 0)
    {
      v70 = *(uint64_t **)(v65 - 8);
      v69 = v68 & 0x7FFFFFF;
      if (!v69)
        goto LABEL_90;
    }
    else
    {
      v69 = v68 & 0x7FFFFFF;
      v70 = (uint64_t *)(v65 - 32 * v69);
      if (!v69)
        goto LABEL_90;
    }
    v71 = &v70[4 * v69];
    v72 = 1;
    do
    {
      while (1)
      {
        v62 = *v70;
        v73 = *(unsigned __int8 *)(*v70 + 16);
        if (v73 < 0x15 || v73 == 22)
          break;
        v62 = sub_1C55EE90C(v62, v67, v66);
        if (!(_DWORD)v62)
          goto LABEL_90;
        if ((_DWORD)v62 != 2)
          break;
        v72 = 0;
        v70 += 4;
        if (v70 == v71)
          goto LABEL_89;
      }
      v70 += 4;
    }
    while (v70 != v71);
    if ((v72 & 1) == 0)
      goto LABEL_89;
LABEL_90:
    if (*(_BYTE *)(*(_QWORD *)v65 + 8) == 7)
    {
      v75 = a4;
    }
    else
    {
      v62 = (uint64_t)sub_1C477672C((uint64_t)&v168, v65);
      if (__src == v168)
        v76 = &v171;
      else
        v76 = &v170;
      v75 = a4;
      if ((void *)v62 != (char *)__src + 8 * *v76)
      {
        *(_QWORD *)v62 = -2;
        ++v172;
        v62 = sub_1C55EE1E4((uint64_t *)v65, a4, v182, v181);
        v160 -= v62;
        v159 -= HIDWORD(v62);
        v44 -= v77;
        if (HIDWORD(v62))
        {
          v62 = (uint64_t)sub_1C477672C((uint64_t)&v174, v65);
          if (v175 == v174)
            v78 = (uint64_t *)((char *)&v176 + 4);
          else
            v78 = &v176;
          if ((void *)v62 != (char *)v175 + 8 * *(unsigned int *)v78)
          {
            *(_QWORD *)v62 = -2;
            ++v177;
          }
          v161 = 1;
        }
      }
    }
    v79 = *(_DWORD *)(v65 + 20);
    if ((v79 & 0x40000000) != 0)
    {
      v81 = *(uint64_t **)(v65 - 8);
      v80 = v79 & 0x7FFFFFF;
    }
    else
    {
      v80 = v79 & 0x7FFFFFF;
      v81 = (uint64_t *)(v65 - 32 * v80);
    }
    a1 = v146;
    if (v80)
    {
      v82 = 32 * v80;
      do
      {
        v83 = *(unsigned __int8 *)(*v81 + 16);
        if (v83 >= 0x15 && v83 != 22)
        {
          v62 = (uint64_t)sub_1C4774094((llvm::SmallPtrSetImplBase *)&v168, *v81);
          if (v85)
          {
            v62 = sub_1C55EE1E4((uint64_t *)*v81, v75, v182, v181);
            v160 += v62;
            v159 += HIDWORD(v62);
            v44 += v86;
            if (HIDWORD(v62))
            {
              sub_1C4774094((llvm::SmallPtrSetImplBase *)&v174, *v81);
              v62 = (uint64_t)sub_1C4774094((llvm::SmallPtrSetImplBase *)&v154, *v81);
              v161 = 1;
            }
          }
        }
        v81 += 4;
        v82 -= 32;
      }
      while (v82);
    }
    if ((v160 & 0x80000000) != 0)
    {
      v110 = llvm::dbgs((llvm *)v62);
      v111 = v110;
      v112 = (_OWORD *)*((_QWORD *)v110 + 4);
      if (*((_QWORD *)v110 + 3) - (_QWORD)v112 > 0xFuLL)
      {
        *v112 = *(_OWORD *)"Exceed peak at: ";
        *((_QWORD *)v110 + 4) += 16;
      }
      else
      {
        llvm::raw_ostream::write(v110, "Exceed peak at: ", 0x10uLL);
      }
      llvm::Value::print((llvm::Value *)v65, v111, 0);
      v113 = *((_QWORD *)v111 + 4);
      if ((unint64_t)(*((_QWORD *)v111 + 3) - v113) > 2)
      {
        *(_BYTE *)(v113 + 2) = 32;
        *(_WORD *)v113 = 11552;
        *((_QWORD *)v111 + 4) += 3;
      }
      else
      {
        llvm::raw_ostream::write(v111, " - ", 3uLL);
      }
      v114 = sub_1C5E21910(v111, v160, 0, 0, 0);
      v115 = (_BYTE *)*((_QWORD *)v111 + 4);
      if ((unint64_t)v115 >= *((_QWORD *)v111 + 3))
      {
        v114 = llvm::raw_ostream::write(v111, 10);
      }
      else
      {
        *((_QWORD *)v111 + 4) = v115 + 1;
        *v115 = 10;
      }
      v122 = (char **)llvm::dbgs(v114);
      sub_1C55EE2F4(v122, &v168, v182, v181, v75);
      v62 = (uint64_t)llvm::dbgs(v123);
      v124 = *(_BYTE **)(v62 + 32);
      if ((unint64_t)v124 >= *(_QWORD *)(v62 + 24))
      {
        v62 = (uint64_t)llvm::raw_ostream::write((llvm::raw_ostream *)v62, 10);
      }
      else
      {
        *(_QWORD *)(v62 + 32) = v124 + 1;
        *v124 = 10;
      }
    }
    if ((int)(v159 + v160) < 0)
    {
      v116 = llvm::dbgs((llvm *)v62);
      v117 = v116;
      v118 = (void *)*((_QWORD *)v116 + 4);
      if (*((_QWORD *)v116 + 3) - (_QWORD)v118 > 0x1BuLL)
      {
        qmemcpy(v118, "Exceed peak with scalar at: ", 28);
        *((_QWORD *)v116 + 4) += 28;
      }
      else
      {
        llvm::raw_ostream::write(v116, "Exceed peak with scalar at: ", 0x1CuLL);
      }
      llvm::Value::print((llvm::Value *)v65, v117, 0);
      v119 = *((_QWORD *)v117 + 4);
      if ((unint64_t)(*((_QWORD *)v117 + 3) - v119) > 2)
      {
        *(_BYTE *)(v119 + 2) = 32;
        *(_WORD *)v119 = 11552;
        *((_QWORD *)v117 + 4) += 3;
      }
      else
      {
        llvm::raw_ostream::write(v117, " - ", 3uLL);
      }
      v120 = sub_1C5E21910(v117, v159 + v160, 0, 0, 0);
      v121 = (_BYTE *)*((_QWORD *)v117 + 4);
      if ((unint64_t)v121 >= *((_QWORD *)v117 + 3))
      {
        v120 = llvm::raw_ostream::write(v117, 10);
      }
      else
      {
        *((_QWORD *)v117 + 4) = v121 + 1;
        *v121 = 10;
      }
      v125 = (char **)llvm::dbgs(v120);
      sub_1C55EE2F4(v125, &v168, v182, v181, v75);
      v127 = llvm::dbgs(v126);
      v128 = (_BYTE *)*((_QWORD *)v127 + 4);
      if ((unint64_t)v128 >= *((_QWORD *)v127 + 3))
      {
        llvm::raw_ostream::write(v127, 10);
      }
      else
      {
        *((_QWORD *)v127 + 4) = v128 + 1;
        *v128 = 10;
      }
    }
    v87 = v160;
    v88 = v159;
    if (a2[16] + a2[15] < v159 + v160)
    {
      a2[15] = v160;
      a2[16] = v88;
    }
    if (a2[8] > v88)
      v88 = a2[8];
    a2[8] = v88;
    if (a2[3] > v87)
      v87 = a2[3];
    a2[3] = v87;
    v89 = a2[13];
    if (v89 <= v44)
      v89 = v44;
    a2[13] = v89;
    if ((*((_BYTE *)v146 + 23) & 0x10) == 0)
    {
      v99 = 0;
      *((_BYTE *)&v150.__r_.__value_.__s + 23) = 0;
      v102 = &v150;
      goto LABEL_142;
    }
    v90 = ***v146;
    v91 = *(_QWORD *)(v90 + 152);
    v92 = *(unsigned int *)(v90 + 168);
    if (!(_DWORD)v92)
      goto LABEL_133;
    LODWORD(v93) = (v92 - 1) & v144;
    v94 = (uint64_t ****)(v91 + 16 * v93);
    v95 = *v94;
    if (*v94 != v146)
    {
      v96 = 1;
      while (v95 != (uint64_t ***)-4096)
      {
        v97 = v93 + v96++;
        v93 = v97 & (v92 - 1);
        v95 = *(uint64_t ****)(v91 + 16 * v93);
        if (v95 == v146)
        {
          v94 = (uint64_t ****)(v91 + 16 * v93);
          goto LABEL_134;
        }
      }
LABEL_133:
      v94 = (uint64_t ****)(v91 + 16 * v92);
    }
LABEL_134:
    v98 = (unint64_t *)v94[1];
    v101 = *v98;
    v100 = v98 + 2;
    v99 = v101;
    if (v101 > 0x7FFFFFFFFFFFFFF7)
      goto LABEL_223;
    if (v99 >= 0x17)
    {
      v103 = (v99 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v99 | 7) != 0x17)
        v103 = v99 | 7;
      v104 = v103 + 1;
      v102 = operator new(v103 + 1);
      v150.__r_.__value_.__l.__size_ = v99;
      v150.__r_.__value_.__r.__words[2] = v104 | 0x8000000000000000;
      v150.__r_.__value_.__r.__words[0] = (std::string::size_type)v102;
    }
    else
    {
      *((_BYTE *)&v150.__r_.__value_.__s + 23) = v99;
      v102 = &v150;
      if (!v99)
        goto LABEL_142;
    }
    memmove(v102, v100, v99);
LABEL_142:
    *((_BYTE *)v102 + v99) = 0;
    v105 = std::string::append(&v150, "_rev");
    v106 = v105->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)&v105->__r_.__value_.__l.__data_;
    __dst.__r_.__value_.__r.__words[2] = v106;
    v105->__r_.__value_.__l.__size_ = 0;
    v105->__r_.__value_.__r.__words[2] = 0;
    v105->__r_.__value_.__r.__words[0] = 0;
    std::to_string(&v149, ++v148);
    if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v107 = &v149;
    else
      v107 = (std::string *)v149.__r_.__value_.__r.__words[0];
    if ((v149.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&v149.__r_.__value_.__s + 23) & 0x7F;
    else
      size = v149.__r_.__value_.__l.__size_;
    v109 = std::string::append(&__dst, (const std::string::value_type *)v107, size);
    __p = *v109;
    v109->__r_.__value_.__r.__words[0] = 0;
    v109->__r_.__value_.__l.__size_ = 0;
    v109->__r_.__value_.__r.__words[2] = 0;
    sub_1C55EDE34((uint64_t)v153, (__int128 *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v63 = v145;
    if (SHIBYTE(v149.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v149.__r_.__value_.__l.__data_);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__dst.__r_.__value_.__l.__data_);
    if (SHIBYTE(v150.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v150.__r_.__value_.__l.__data_);
    v64 = (uint64_t ***)*v64;
  }
  while (v64 != v145);
  v133 = (uint64_t ***)*v63;
LABEL_193:
  a2[4] += v160;
  a2[9] += v159;
  a2[14] += v44;
  if (v133 != v63)
  {
    v134 = a1[6];
    v135 = (uint64_t *)(v134 - 3);
    v136 = v134 ? (uint64_t)(v134 - 3) : 0;
    if (v134 && *(_BYTE *)(v136 + 16) == 83)
    {
      do
      {
        v137 = sub_1C477672C((uint64_t)&v168, (uint64_t)v135);
        if (__src == v168)
          v138 = &v171;
        else
          v138 = &v170;
        if (v137 == (_QWORD *)((char *)__src + 8 * *v138))
        {
          v139 = sub_1C55EE1E4(v135, a4, v182, v181);
          v160 += v139;
          v159 += HIDWORD(v139);
        }
        v140 = v135[4];
        v135 = (uint64_t *)(v140 - 24);
        if (v140)
          v141 = v140 - 24;
        else
          v141 = 0;
      }
      while (v140 && *(_BYTE *)(v141 + 16) == 83);
    }
  }
  if (v155 != v154)
    free(v155);
  if (v163 != v162)
    free(v163);
  if (__src != v168)
    free(__src);
  if (v175 != v174)
    free(v175);
}

uint64_t sub_1C55EDB00(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 88 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 88 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_5;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

_QWORD *sub_1C55EDB98(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  unsigned int v10;
  uint64_t v11;
  uint64_t v12;
  _OWORD *v13;
  uint64_t v14;
  uint64_t *v15;
  __int128 v16;
  __int128 v17;
  __int128 v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t *v21;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(88 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(_DWORD *)(a1 + 16);
    if (v10)
    {
      v11 = 88 * v10;
      do
      {
        *result = -4096;
        result += 11;
        v11 -= 88;
      }
      while (v11);
    }
    if (v3)
    {
      v12 = 88 * v3;
      v13 = (_OWORD *)(v4 + 8);
      do
      {
        v14 = *((_QWORD *)v13 - 1);
        if ((v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v21 = 0;
          sub_1C55EDB00(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, &v21);
          v15 = v21;
          *v21 = v14;
          *(_OWORD *)(v15 + 1) = *v13;
          v16 = v13[1];
          v17 = v13[2];
          v18 = v13[3];
          *(_OWORD *)((char *)v15 + 68) = *(_OWORD *)((char *)v13 + 60);
          *(_OWORD *)(v15 + 7) = v18;
          *(_OWORD *)(v15 + 5) = v17;
          *(_OWORD *)(v15 + 3) = v16;
          ++*(_DWORD *)(a1 + 8);
        }
        v13 = (_OWORD *)((char *)v13 + 88);
        v12 -= 88;
      }
      while (v12);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v19 = *(_DWORD *)(a1 + 16);
  if (v19)
  {
    v20 = 88 * v19;
    do
    {
      *result = -4096;
      result += 11;
      v20 -= 88;
    }
    while (v20);
  }
  return result;
}

unint64_t sub_1C55EDD00(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, llvm::SmallPtrSetImplBase *a5)
{
  uint64_t v6;
  unsigned int *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t *i;
  unint64_t *v11;
  int v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  int v18;
  int v19;
  int v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  int v25;
  int v26;

  v6 = a2[1];
  if (v6 == *a2)
    v7 = (unsigned int *)a2 + 5;
  else
    v7 = (unsigned int *)(a2 + 2);
  v8 = *v7;
  if ((_DWORD)v8)
  {
    v9 = 8 * v8;
    for (i = (unint64_t *)a2[1]; *i >= 0xFFFFFFFFFFFFFFFELL; ++i)
    {
      v9 -= 8;
      if (!v9)
        return 0;
    }
  }
  else
  {
    i = (unint64_t *)a2[1];
  }
  v11 = (unint64_t *)(v6 + 8 * v8);
  if (i == v11)
    return 0;
  v25 = 0;
  v26 = 0;
  v12 = 0;
  v13 = (uint64_t *)*i;
LABEL_12:
  v14 = a1;
  v15 = a3;
  v16 = a4;
  v17 = sub_1C55EE1E4(v13, a1, a3, a4);
  v18 = v17;
  v20 = v19;
  v21 = HIDWORD(v17);
  if (a5)
  {
    if (HIDWORD(v17))
      sub_1C4774094(a5, (uint64_t)v13);
  }
  v12 += v20;
  v22 = i + 1;
  a4 = v16;
  a3 = v15;
  a1 = v14;
  while (v22 != v11)
  {
    v23 = *v22++;
    v13 = (uint64_t *)v23;
    if (v23 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      v25 += v21;
      v26 += v18;
      i = v22 - 1;
      goto LABEL_12;
    }
  }
  return (v26 + v18) | ((unint64_t)(v25 + v21) << 32);
}

void sub_1C55EDE34(uint64_t a1, __int128 *a2)
{
  unsigned int v3;
  unsigned int v4;
  int v5;
  unint64_t v7;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  _QWORD *v11;
  unint64_t **v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  _QWORD *v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unsigned int *v23;
  unint64_t *v24;
  unint64_t v25;
  uint64_t v26;
  unsigned int v27;
  unint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t *v32;
  unint64_t *v33;
  _BYTE *v34;
  int v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  _QWORD *v39;
  _BYTE *v40;
  _QWORD *v41;
  int v42;
  BOOL v43;
  unsigned int v44;
  _QWORD *v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  char *v49;
  int v50;
  _BYTE *v51;
  _BYTE *v52;
  uint64_t v53;
  int v54;
  _BYTE v55[32];
  unint64_t v56;

  if (**(_QWORD **)a1)
  {
    v3 = **(_DWORD **)(a1 + 16) + **(_DWORD **)(a1 + 8);
    v4 = **(_DWORD **)(a1 + 24);
    v5 = v3 - v4;
    if (v3 > v4)
    {
      v7 = sub_1C55EDD00(*(_QWORD *)(a1 + 32), *(_QWORD **)(a1 + 40), **(_QWORD **)(a1 + 48), **(_QWORD **)(a1 + 56), 0);
      v8 = *(_QWORD *)(a1 + 64);
      if (*(_DWORD *)(v8 + 20) == *(_DWORD *)(v8 + 24))
        goto LABEL_62;
      v9 = v5 + HIDWORD(v7);
      v10 = **(_QWORD **)a1;
      v11 = *(_QWORD **)(a1 + 40);
      if (**(_BYTE **)(a1 + 72) || (v12 = *(unint64_t ***)(v10 + 6928)) == 0)
      {
        v51 = v55;
        v52 = v55;
        v53 = 4;
        v54 = 0;
        v13 = *(_DWORD *)(v10 + 8);
        if (v13 >= *(_DWORD *)(v10 + 12))
        {
          v48 = v8;
          v56 = 0;
          v49 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(v10, 0, 216, &v56);
          sub_1C55EE66C((llvm::SmallPtrSetImplBase *)&v49[216 * *(unsigned int *)(v10 + 8)], &v51, v9, a2);
          sub_1C55EE794((uint64_t *)v10, (uint64_t)v49);
          v50 = v56;
          if (*(_QWORD *)v10 != v10 + 16)
            free(*(void **)v10);
          *(_QWORD *)v10 = v49;
          ++*(_DWORD *)(v10 + 8);
          *(_DWORD *)(v10 + 12) = v50;
          v8 = v48;
        }
        else
        {
          sub_1C55EE66C((llvm::SmallPtrSetImplBase *)(*(_QWORD *)v10 + 216 * v13), &v51, v9, a2);
          ++*(_DWORD *)(v10 + 8);
        }
        if (v52 != v51)
          free(v52);
        v12 = (unint64_t **)(*(_QWORD *)v10 + 216 * *(unsigned int *)(v10 + 8) - 216);
        *(_QWORD *)(v10 + 6928) = v12;
        v14 = *(_QWORD *)(v8 + 8);
        if (v14 == *(_QWORD *)v8)
          v15 = (unsigned int *)(v8 + 20);
        else
          v15 = (unsigned int *)(v8 + 16);
        v16 = *v15;
        if ((_DWORD)v16)
        {
          v17 = 8 * v16;
          v18 = *(uint64_t **)(v8 + 8);
          while ((unint64_t)*v18 >= 0xFFFFFFFFFFFFFFFELL)
          {
            ++v18;
            v17 -= 8;
            if (!v17)
              goto LABEL_31;
          }
        }
        else
        {
          v18 = *(uint64_t **)(v8 + 8);
        }
        v19 = (_QWORD *)(v14 + 8 * v16);
        if (v18 != v19)
        {
          v20 = *v18;
LABEL_21:
          v21 = sub_1C477672C((uint64_t)v11, v20);
          v22 = v11[1];
          if (v22 == *v11)
            v23 = (unsigned int *)v11 + 5;
          else
            v23 = (unsigned int *)(v11 + 2);
          if (v21 == (_QWORD *)(v22 + 8 * *v23))
            sub_1C4774094(*(llvm::SmallPtrSetImplBase **)(v10 + 6928), v20);
          v24 = (unint64_t *)(v18 + 1);
          while (v24 != v19)
          {
            v25 = *v24++;
            v20 = v25;
            if (v25 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              v18 = (uint64_t *)(v24 - 1);
              goto LABEL_21;
            }
          }
          v12 = *(unint64_t ***)(v10 + 6928);
        }
      }
LABEL_31:
      v26 = *(_QWORD *)v10 + 216 * *(unsigned int *)(v10 + 8);
      v27 = *(_DWORD *)(v26 - 120);
      if (v27 <= v9)
        v27 = v9;
      *(_DWORD *)(v26 - 120) = v27;
      v28 = v12[1];
      v29 = 16;
      if (v28 == *v12)
        v29 = 20;
      v30 = *(unsigned int *)((char *)v12 + v29);
      if ((_DWORD)v30)
      {
        v31 = 8 * v30;
        v32 = v28;
        while (*v32 >= 0xFFFFFFFFFFFFFFFELL)
        {
          ++v32;
          v31 -= 8;
          if (!v31)
            goto LABEL_62;
        }
      }
      else
      {
        v32 = v28;
      }
      v33 = &v28[v30];
      if (v32 == v33)
        goto LABEL_62;
LABEL_42:
      v51 = 0;
      v34 = (_BYTE *)*v32;
      v51 = (_BYTE *)*v32;
      v35 = *(_DWORD *)(v10 + 6952);
      if (v35)
      {
        v36 = *(_QWORD *)(v10 + 6936);
        v37 = v35 - 1;
        v38 = ((v34 >> 4) ^ (v34 >> 9)) & v37;
        v39 = (_QWORD *)(v36 + 16 * v38);
        v40 = (_BYTE *)*v39;
        if (v34 == (_BYTE *)*v39)
          goto LABEL_57;
        v41 = 0;
        v42 = 1;
        while (v40 != (_BYTE *)-4096)
        {
          if (v41)
            v43 = 0;
          else
            v43 = v40 == (_BYTE *)-8192;
          if (v43)
            v41 = v39;
          v44 = v38 + v42++;
          v38 = v44 & v37;
          v39 = (_QWORD *)(v36 + 16 * v38);
          v40 = (_BYTE *)*v39;
          if (v34 == (_BYTE *)*v39)
            goto LABEL_57;
        }
        if (v41)
          v45 = v41;
        else
          v45 = v39;
      }
      else
      {
        v45 = 0;
      }
      v39 = sub_1C504A120(v10 + 6936, (uint64_t)&v51, (uint64_t *)&v51, v45);
      *v39 = v51;
      *((_DWORD *)v39 + 2) = 0;
LABEL_57:
      ++*((_DWORD *)v39 + 2);
      v46 = v32 + 1;
      while (v46 != v33)
      {
        v47 = *v46++;
        if (v47 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v32 = v46 - 1;
          goto LABEL_42;
        }
      }
LABEL_62:
      **(_BYTE **)(a1 + 72) = 0;
    }
  }
}

unint64_t sub_1C55EE1E4(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  unsigned int v9;
  const char *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  unint64_t result;
  int isSizedDerivedType;

  v8 = *a1;
  v9 = *(unsigned __int8 *)(*a1 + 8);
  if (v9 <= 0x11)
  {
    if (((1 << v9) & 0xAC7F) != 0)
    {
LABEL_3:
      sub_1C4768AD0(a2, v8);
      v12 = (unint64_t)(v11 + 7) >> 3;
      if ((_DWORD)v10 == 1)
      v13 = v12 + 1;
      v14 = sub_1C55EE90C((uint64_t)a1, a3, a4);
      switch(v14)
      {
        case 2:
          return v13 >> 1 << 32;
        case 1:
          return 0;
        case 0:
          return (v13 >> 1);
      }
      return 0;
    }
    if (((1 << v9) & 0x30000) != 0)
      goto LABEL_12;
  }
  if ((v9 & 0xFE) == 0x12 || v9 == 21)
  {
LABEL_12:
    isSizedDerivedType = llvm::Type::isSizedDerivedType(*a1, 0);
    result = 0;
    if (!isSizedDerivedType)
      return result;
    v8 = *a1;
    goto LABEL_3;
  }
  return 0;
}

void sub_1C55EE2F4(char **a1, _QWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9;
  unsigned int *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t *i;
  unint64_t *v14;
  BOOL v15;
  int v16;
  uint64_t *v17;
  unint64_t v18;
  int v19;
  char *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t **v26;
  uint64_t *v27;
  int v28;
  int v29;
  size_t *v30;
  const void *v31;
  size_t v32;
  size_t v33;
  char *v34;
  char *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  char v39;
  char *v40;
  char *v41;
  unint64_t *v42;
  unint64_t v43;
  uint64_t v44;
  int v45;

  v9 = a2[1];
  if (v9 == *a2)
    v10 = (unsigned int *)a2 + 5;
  else
    v10 = (unsigned int *)(a2 + 2);
  v11 = *v10;
  if ((_DWORD)v11)
  {
    v12 = 8 * v11;
    for (i = (unint64_t *)a2[1]; *i >= 0xFFFFFFFFFFFFFFFELL; ++i)
    {
      v12 -= 8;
      if (!v12)
        return;
    }
  }
  else
  {
    i = (unint64_t *)a2[1];
  }
  v14 = (unint64_t *)(v9 + 8 * v11);
  if (i != v14)
  {
    if (a4)
      v15 = a5 == 0;
    else
      v15 = 1;
    v16 = !v15;
    v17 = (uint64_t *)*i;
    if (v16)
    {
LABEL_18:
      v18 = sub_1C55EE1E4(v17, a5, a3, a4);
      sub_1C5E21910((llvm::raw_ostream *)a1, (v19 + v18 + HIDWORD(v18)), 0, 0, 0);
      v20 = a1[4];
      if (a1[3] == v20)
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)a1, " ", 1uLL);
      }
      else
      {
        *v20 = 32;
        ++a1[4];
      }
    }
LABEL_20:
    llvm::Type::print((llvm::Type *)*v17, (llvm::raw_ostream *)a1, 0, 0);
    v21 = a1[4];
    if (v21 >= a1[3])
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)a1, 32);
    }
    else
    {
      a1[4] = v21 + 1;
      *v21 = 32;
    }
    if ((*((_BYTE *)v17 + 23) & 0x10) == 0)
    {
      llvm::Value::print((llvm::Value *)v17, (llvm::raw_ostream *)a1, 0);
      goto LABEL_36;
    }
    v22 = **(_QWORD **)*v17;
    v23 = *(_QWORD *)(v22 + 152);
    v24 = *(unsigned int *)(v22 + 168);
    if ((_DWORD)v24)
    {
      LODWORD(v25) = (v24 - 1) & ((v17 >> 4) ^ (v17 >> 9));
      v26 = (uint64_t **)(v23 + 16 * v25);
      v27 = *v26;
      if (*v26 == v17)
        goto LABEL_32;
      v28 = 1;
      while (v27 != (uint64_t *)-4096)
      {
        v29 = v25 + v28++;
        v25 = v29 & (v24 - 1);
        v27 = *(uint64_t **)(v23 + 16 * v25);
        if (v27 == v17)
        {
          v26 = (uint64_t **)(v23 + 16 * v25);
          goto LABEL_32;
        }
      }
    }
    v26 = (uint64_t **)(v23 + 16 * v24);
LABEL_32:
    v30 = (size_t *)v26[1];
    v33 = *v30;
    v31 = v30 + 2;
    v32 = v33;
    v34 = a1[4];
    if (v33 <= a1[3] - v34)
    {
      if (v32)
      {
        memcpy(v34, v31, v32);
        a1[4] += v32;
      }
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)a1, (const char *)v31, v32);
    }
LABEL_36:
    v35 = a1[4];
    if (a1[3] == v35)
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)a1, "(", 1uLL);
      if (!a3)
        goto LABEL_41;
    }
    else
    {
      *v35 = 40;
      ++a1[4];
      if (!a3)
        goto LABEL_41;
    }
    v36 = sub_1C477672C(a3 + 528, (uint64_t)v17);
    v37 = *(_QWORD *)(a3 + 536);
    v38 = 544;
    if (v37 == *(_QWORD *)(a3 + 528))
      v38 = 548;
    if (v36 == (_QWORD *)(v37 + 8 * *(unsigned int *)(a3 + v38)))
    {
      if (*((_BYTE *)v17 + 16) == 60)
      {
        v44 = *(_QWORD *)*(v17 - 4);
        v45 = *(_DWORD *)(v44 + 8);
        if ((v45 & 0xFE) == 0x12)
          v45 = *(_DWORD *)(**(_QWORD **)(v44 + 16) + 8);
        if ((v45 & 0xFFFFFF00) == 0x4000)
          v39 = 117;
        else
          v39 = 49;
      }
      else
      {
        v39 = 49;
      }
LABEL_42:
      v40 = a1[4];
      if (v40 >= a1[3])
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)a1, v39);
      }
      else
      {
        a1[4] = v40 + 1;
        *v40 = v39;
      }
      v41 = a1[4];
      if ((unint64_t)(a1[3] - v41) > 2)
      {
        v41[2] = 32;
        *(_WORD *)v41 = 11305;
        a1[4] += 3;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)a1, "), ", 3uLL);
      }
      v42 = i + 1;
      while (v42 != v14)
      {
        v43 = *v42++;
        v17 = (uint64_t *)v43;
        if (v43 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          i = v42 - 1;
          if (v16)
            goto LABEL_18;
          goto LABEL_20;
        }
      }
      return;
    }
LABEL_41:
    v39 = 48;
    goto LABEL_42;
  }
}

llvm::SmallPtrSetImplBase *sub_1C55EE66C(llvm::SmallPtrSetImplBase *this, _QWORD *a2, int a3, __int128 *a4)
{
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t *v11;
  _QWORD *v12;
  uint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  _BYTE *v16;
  __int128 v17;

  v7 = a2[1];
  if (v7 == *a2)
    v8 = (unsigned int *)a2 + 5;
  else
    v8 = (unsigned int *)(a2 + 2);
  v9 = *v8;
  if ((_DWORD)v9)
  {
    v10 = 8 * v9;
    v11 = (uint64_t *)a2[1];
    while ((unint64_t)*v11 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v11;
      v10 -= 8;
      if (!v10)
      {
        *(_QWORD *)this = (char *)this + 32;
        *((_QWORD *)this + 1) = (char *)this + 32;
        *((_QWORD *)this + 2) = 8;
        *((_DWORD *)this + 6) = 0;
        goto LABEL_16;
      }
    }
  }
  else
  {
    v11 = (uint64_t *)a2[1];
  }
  v12 = (_QWORD *)(v7 + 8 * v9);
  *(_QWORD *)this = (char *)this + 32;
  *((_QWORD *)this + 1) = (char *)this + 32;
  *((_QWORD *)this + 2) = 8;
  *((_DWORD *)this + 6) = 0;
  if (v11 != v12)
  {
    v13 = *v11;
LABEL_12:
    sub_1C4774094(this, v13);
    v14 = (unint64_t *)(v11 + 1);
    while (v14 != v12)
    {
      v15 = *v14++;
      v13 = v15;
      if (v15 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v11 = (uint64_t *)(v14 - 1);
        goto LABEL_12;
      }
    }
  }
LABEL_16:
  *((_DWORD *)this + 24) = a3;
  v16 = (char *)this + 104;
  if (*((char *)a4 + 23) < 0)
  {
    sub_1C47EBC30(v16, *(void **)a4, *((_QWORD *)a4 + 1));
  }
  else
  {
    v17 = *a4;
    *((_QWORD *)this + 15) = *((_QWORD *)a4 + 2);
    *(_OWORD *)v16 = v17;
  }
  *((_BYTE *)this + 128) = 0;
  *((_QWORD *)this + 17) = (char *)this + 152;
  *((_QWORD *)this + 18) = 0x800000000;
  return this;
}

void sub_1C55EE794(uint64_t *a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  __int128 v16;
  char v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  void *v23;
  void *v24;

  v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    v5 = 0;
    v6 = *a1;
    v7 = 216 * v2;
    do
    {
      v8 = a2 + v5;
      v9 = v6 + v5;
      v10 = (void *)(a2 + v5 + 32);
      *(_QWORD *)(a2 + v5) = v10;
      v12 = *(_QWORD *)(v6 + v5);
      v11 = *(_QWORD *)(v6 + v5 + 8);
      if (v11 == v12)
      {
        *(_QWORD *)(v8 + 8) = v10;
        v13 = *(unsigned int *)(v9 + 20);
        if ((_DWORD)v13)
          memmove(v10, *(const void **)(v9 + 8), 8 * v13);
      }
      else
      {
        *(_QWORD *)(v8 + 8) = v11;
        *(_QWORD *)(v9 + 8) = v12;
      }
      v14 = v6 + v5;
      v15 = a2 + v5;
      *(_QWORD *)(v15 + 16) = *(_QWORD *)(v6 + v5 + 16);
      *(_DWORD *)(v15 + 24) = *(_DWORD *)(v6 + v5 + 24);
      *(_QWORD *)(v14 + 16) = 8;
      *(_DWORD *)(v14 + 24) = 0;
      *(_DWORD *)(v15 + 96) = *(_DWORD *)(v6 + v5 + 96);
      v16 = *(_OWORD *)(v6 + v5 + 104);
      *(_QWORD *)(v15 + 120) = *(_QWORD *)(v6 + v5 + 120);
      *(_OWORD *)(v15 + 104) = v16;
      *(_QWORD *)(v14 + 112) = 0;
      *(_QWORD *)(v14 + 120) = 0;
      *(_QWORD *)(v14 + 104) = 0;
      v17 = *(_BYTE *)(v6 + v5 + 128);
      *(_QWORD *)(v15 + 136) = a2 + v5 + 152;
      v18 = a2 + v5 + 136;
      *(_BYTE *)(v18 - 8) = v17;
      *(_QWORD *)(v18 + 8) = 0x800000000;
      if (*(_DWORD *)(v6 + v5 + 144))
        sub_1C614D378(v18, v14 + 136);
      v5 += 216;
    }
    while (v7 != v5);
    v19 = *((_DWORD *)a1 + 2);
    if (v19)
    {
      v20 = *a1;
      v21 = 216 * v19;
      do
      {
        v22 = v20 + v21;
        v23 = *(void **)(v20 + v21 - 80);
        if ((void *)(v20 + v21 - 64) != v23)
          free(v23);
        if (*(char *)(v22 - 89) < 0)
          operator delete(*(void **)(v20 + v21 - 112));
        v24 = *(void **)(v20 + v21 - 208);
        if (v24 != *(void **)(v22 - 216))
          free(v24);
        v21 -= 216;
      }
      while (v21);
    }
  }
}

uint64_t sub_1C55EE90C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;

  if (!a2)
    return 0;
  v6 = sub_1C477672C(a2 + 528, a1);
  v7 = *(_QWORD *)(a2 + 536);
  v8 = 544;
  if (v7 == *(_QWORD *)(a2 + 528))
    v8 = 548;
  if (v6 != (_QWORD *)(v7 + 8 * *(unsigned int *)(a2 + v8)))
    return 0;
  if (a3)
  {
    v10 = sub_1C477672C(a3 + 528, a1);
    v11 = *(_QWORD *)(a3 + 536);
    v12 = 544;
    if (v11 == *(_QWORD *)(a3 + 528))
      v12 = 548;
    if (v10 == (_QWORD *)(v11 + 8 * *(unsigned int *)(a3 + v12)))
      return 1;
  }
  return 2;
}

void sub_1C55EE9C4(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v5;
  double *v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  unsigned int *v16;
  uint64_t v17;
  _BYTE *v18;
  char v19;
  __int128 v20;
  void **v21;
  __int128 v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  char v27;
  int v28;
  const void *v29;
  size_t v30;
  size_t v31;
  int v32;
  size_t v33;
  const void *v34;
  size_t v35;
  int v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  __int128 *v44;
  size_t v45;
  unsigned int v46;
  unsigned int v47;
  int v48;
  size_t v49;
  const void *v50;
  size_t v51;
  int v52;
  BOOL v53;
  unint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t mm;
  unsigned int v58;
  unsigned int v59;
  int v60;
  size_t v61;
  const void *v62;
  size_t v63;
  int v64;
  _BOOL4 v65;
  BOOL v66;
  unsigned int v69;
  unsigned int v70;
  int v71;
  size_t v72;
  const void *v73;
  size_t v74;
  int v75;
  BOOL v76;
  unint64_t v77;
  const void *v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  void **v82;
  __int128 v83;
  void **v84;
  __int128 v85;
  unsigned int v86;
  unsigned int v87;
  __int128 *v88;
  size_t v89;
  unsigned __int8 *v90;
  unsigned int v91;
  unsigned int v92;
  int v93;
  size_t v94;
  char *v95;
  size_t v96;
  int v97;
  BOOL v98;
  unint64_t v99;
  unsigned int v100;
  unsigned int v101;
  int v102;
  size_t v103;
  const void *v104;
  size_t v105;
  int v106;
  BOOL v107;
  __int128 v108;
  void **v109;
  __int128 v110;
  BOOL v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unsigned int v115;
  unsigned int v116;
  unsigned int v117;
  char v118;
  BOOL v119;
  const void *v120;
  size_t v121;
  size_t v122;
  size_t v123;
  __int128 *v124;
  size_t v125;
  int v126;
  BOOL v127;
  size_t v128;
  __int128 *v129;
  _BYTE *m;
  unsigned int v131;
  unsigned int v132;
  int v133;
  _BYTE *v134;
  size_t v135;
  size_t v136;
  int v137;
  BOOL v138;
  unsigned int v139;
  size_t v140;
  __int128 *v141;
  unsigned int v142;
  unsigned int v143;
  char v144;
  const void *v145;
  size_t v146;
  size_t v147;
  int v148;
  BOOL v149;
  unint64_t ii;
  unsigned int v151;
  size_t v152;
  __int128 *v153;
  const void **n;
  unsigned int v155;
  char v156;
  BOOL v157;
  const void *v158;
  size_t v159;
  size_t v160;
  size_t v161;
  int v162;
  BOOL v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  void **v167;
  __int128 v168;
  void **v169;
  __int128 v170;
  unsigned int v171;
  unsigned int v172;
  size_t v173;
  __int128 *v174;
  _BYTE *jj;
  unsigned int v176;
  unsigned int v177;
  int v178;
  _BYTE *v179;
  size_t v180;
  size_t v181;
  int v182;
  BOOL v183;
  unint64_t kk;
  unsigned int v185;
  unsigned int v186;
  char v187;
  int v188;
  const void *v189;
  size_t v190;
  size_t v191;
  size_t v192;
  int v193;
  BOOL v194;
  void **v195;
  __int128 v196;
  void **v197;
  __int128 v198;
  int64_t v199;
  int64_t v200;
  int64_t v201;
  uint64_t v202;
  uint64_t v203;
  unsigned int v204;
  unsigned int v205;
  unsigned int v206;
  unsigned int v207;
  uint64_t v208;
  char v209;
  const void *v210;
  size_t v211;
  int v212;
  const void *v213;
  const void *v214;
  size_t v215;
  size_t v216;
  const void *v217;
  size_t v218;
  int v219;
  _BOOL4 v220;
  uint64_t v221;
  unsigned int v222;
  unsigned int v223;
  unsigned int v224;
  unsigned int v225;
  uint64_t v226;
  char v227;
  int v228;
  _QWORD *v229;
  const void *v230;
  const void *v231;
  const void *v232;
  size_t v233;
  size_t v234;
  size_t v235;
  int v236;
  size_t v237;
  const void *v238;
  size_t v239;
  int v240;
  BOOL v241;
  const void *v242;
  uint64_t v243;
  uint64_t v244;
  uint64_t v245;
  __int128 v246;
  uint64_t v247;
  void **v248;
  __int128 v249;
  uint64_t v250;
  unsigned int v251;
  unsigned int v252;
  unsigned int v253;
  unsigned int v254;
  uint64_t v255;
  char v256;
  const void *v257;
  size_t v258;
  int v259;
  const void *v260;
  const void *v261;
  size_t v262;
  size_t v263;
  const void *v264;
  size_t v265;
  int v266;
  _BOOL4 v267;
  unsigned int v268;
  unsigned int v269;
  __int128 *v270;
  size_t v271;
  int v272;
  size_t v273;
  const void *v274;
  size_t v275;
  int v276;
  BOOL v277;
  void **v278;
  __int128 v279;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  uint64_t v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  unsigned int v289;
  unsigned int v290;
  unsigned int v291;
  unsigned int v292;
  uint64_t v293;
  char v294;
  const void *v295;
  size_t v296;
  int v297;
  const void *v298;
  const void *v299;
  size_t v300;
  size_t v301;
  const void *v302;
  size_t v303;
  int v304;
  _BOOL4 v305;
  void **v306;
  __int128 v307;
  void **v308;
  _QWORD *v309;
  __int128 v310;
  __int128 v311;
  void **v312;
  __int128 v313;
  uint64_t v314;
  unint64_t v315;
  uint64_t v316;
  unsigned int v317;
  unsigned int v318;
  unsigned int v319;
  unsigned int v320;
  unint64_t v321;
  char v322;
  BOOL v323;
  const void *v324;
  size_t v325;
  size_t v326;
  int v327;
  const void *v328;
  const void *v329;
  size_t v330;
  size_t v331;
  const void *v332;
  size_t v333;
  int v334;
  BOOL v335;
  double v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  void **v341;
  __int128 v342;
  unsigned int v343;
  unsigned int v344;
  unint64_t v345;
  __int128 *v346;
  size_t v347;
  int v348;
  const void *v349;
  const void *v350;
  size_t v351;
  unint64_t v352;
  size_t v353;
  const void *v354;
  size_t v355;
  int v356;
  BOOL v357;
  void **v358;
  __int128 v359;
  unsigned int v360;
  unsigned int v361;
  unsigned int v362;
  unsigned int v363;
  char v364;
  const void *v365;
  size_t v366;
  int v367;
  size_t v368;
  const void *v369;
  size_t v370;
  int v371;
  BOOL v372;
  unint64_t v373;
  uint64_t v374;
  unint64_t v375;
  unint64_t v376;
  unsigned int v377;
  unsigned int v378;
  unsigned int v379;
  unsigned int v380;
  char v381;
  int v382;
  const void *v383;
  size_t v384;
  size_t v385;
  int v386;
  size_t v387;
  const void *v388;
  size_t v389;
  int v390;
  BOOL v391;
  uint64_t v392;
  uint64_t v393;
  uint64_t k;
  uint64_t v395;
  void **v396;
  unsigned int v397;
  unsigned int v398;
  char v399;
  const void *v400;
  size_t v401;
  size_t v402;
  __int128 *v403;
  size_t v404;
  int v405;
  BOOL v406;
  uint64_t v407;
  uint64_t v408;
  uint64_t v409;
  __int128 v410;
  uint64_t v411;
  uint64_t i;
  uint64_t v413;
  unsigned int v414;
  unsigned int v415;
  unsigned int v416;
  unsigned int v417;
  char v418;
  int v419;
  const void *v420;
  size_t v421;
  size_t v422;
  int v423;
  size_t v424;
  const void *v425;
  size_t v426;
  int v427;
  BOOL v428;
  uint64_t v429;
  uint64_t v430;
  uint64_t j;
  void **v432;
  unsigned int v433;
  unsigned int v434;
  unsigned int v435;
  char v436;
  int v437;
  const void *v438;
  size_t v439;
  size_t v440;
  size_t v441;
  __int128 *p_p;
  size_t v443;
  int v444;
  BOOL v445;
  void **v446;
  __int128 v447;
  uint64_t v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t v451;
  void **v452;
  __int128 v453;
  __int128 v454;
  void **v455;
  void **v456;
  unsigned int v457;
  unint64_t v461;
  __int128 *v462;
  _BYTE *v463;
  _BYTE *v464;
  uint64_t v465;
  int v466;
  _BYTE v467[33];
  unsigned int v468;
  __int128 v469;
  uint64_t v470;
  char v471;
  void *v472;
  uint64_t v473;
  _BYTE v474[64];
  _BYTE *v475;
  _BYTE *v476;
  uint64_t v477;
  int v478;
  _BYTE v479[64];
  unsigned int v480;
  __int128 __p;
  uint64_t v482;
  char v483;
  void *v484;
  uint64_t v485;
  _QWORD v486[10];

  v486[8] = *MEMORY[0x1E0C80C00];
LABEL_2:
  v5 = a2;
  v6 = (double *)(a2 - 216);
  v455 = (void **)(a2 - 112);
  v7 = a1;
  while (2)
  {
    a1 = v7;
    v8 = v5 - v7;
    v9 = 0x84BDA12F684BDA13 * ((uint64_t)(v5 - v7) >> 3);
    switch(v9)
    {
      case 0uLL:
      case 1uLL:
        return;
      case 2uLL:
        v360 = *(_DWORD *)(a2 - 120);
        v361 = *(_DWORD *)(v7 + 96);
        if (v360 == v361)
        {
          v362 = *(_DWORD *)(a2 - 196) - *(_DWORD *)(a2 - 192);
          v363 = *(_DWORD *)(a1 + 20) - *(_DWORD *)(a1 + 24);
          if (v362 == v363)
          {
            v364 = *(_BYTE *)(a1 + 127);
            if (v364 >= 0)
              v365 = (const void *)(a1 + 104);
            else
              v365 = *(const void **)(a1 + 104);
            if (v364 >= 0)
              v366 = v364 & 0x7F;
            else
              v366 = *(_QWORD *)(a1 + 112);
            v367 = *(char *)(a2 - 89);
            if (v367 >= 0)
              v368 = *(unsigned __int8 *)(a2 - 89);
            else
              v368 = *(_QWORD *)(a2 - 104);
            if (v367 >= 0)
              v369 = (const void *)(a2 - 112);
            else
              v369 = *(const void **)(a2 - 112);
            if (v366 >= v368)
              v370 = v368;
            else
              v370 = v366;
            v371 = memcmp(v369, v365, v370);
            v372 = v368 < v366;
            if (v371)
              v372 = v371 < 0;
            if (!v372)
              return;
          }
          else if (v362 <= v363)
          {
            return;
          }
        }
        else if (v360 >= v361)
        {
          return;
        }
        v475 = v479;
        v448 = *(_QWORD *)a1;
        if (*(_QWORD *)(a1 + 8) == *(_QWORD *)a1)
        {
          v476 = v479;
          v449 = *(unsigned int *)(a1 + 20);
          v450 = a2;
          if ((_DWORD)v449)
          {
            memmove(v479, *(const void **)(a1 + 8), 8 * v449);
            v361 = *(_DWORD *)(a1 + 96);
          }
        }
        else
        {
          v476 = *(_BYTE **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v448;
          v450 = a2;
        }
        v477 = *(_QWORD *)(a1 + 16);
        v478 = *(_DWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 16) = 8;
        *(_DWORD *)(a1 + 24) = 0;
        v480 = v361;
        v451 = *(_QWORD *)(a1 + 120);
        __p = *(_OWORD *)(a1 + 104);
        v482 = v451;
        *(_QWORD *)(a1 + 112) = 0;
        *(_QWORD *)(a1 + 120) = 0;
        *(_QWORD *)(a1 + 104) = 0;
        v483 = *(_BYTE *)(a1 + 128);
        v484 = v486;
        v485 = 0x800000000;
        if (*(_DWORD *)(a1 + 144))
          sub_1C614D378((uint64_t)&v484, a1 + 136);
        if (v6 != (double *)a1)
          llvm::SmallPtrSetImplBase::MoveFrom(a1, 8, v6);
        v452 = (void **)(a1 + 104);
        *(_DWORD *)(a1 + 96) = *(_DWORD *)(v450 - 120);
        if (*(char *)(a1 + 127) < 0)
          operator delete(*v452);
        v453 = *(_OWORD *)(v450 - 112);
        *(_QWORD *)(a1 + 120) = *(_QWORD *)(v450 - 96);
        *(_OWORD *)v452 = v453;
        *(_BYTE *)(v450 - 89) = 0;
        *(_BYTE *)(v450 - 112) = 0;
        *(_BYTE *)(a1 + 128) = *(_BYTE *)(v450 - 88);
        sub_1C614D378(a1 + 136, v450 - 80);
        if (&v475 != (_BYTE **)v6)
          llvm::SmallPtrSetImplBase::MoveFrom((uint64_t)v6, 8, (double *)&v475);
        *(_DWORD *)(v450 - 120) = v480;
        if (*(char *)(v450 - 89) < 0)
          operator delete(*v455);
        v454 = __p;
        *(_QWORD *)(a2 - 96) = v482;
        *(_OWORD *)v455 = v454;
        HIBYTE(v482) = 0;
        LOBYTE(__p) = 0;
        *(_BYTE *)(v450 - 88) = v483;
        sub_1C614D378(v450 - 80, (uint64_t)&v484);
        if (v484 != v486)
          free(v484);
        if (SHIBYTE(v482) < 0)
          operator delete((void *)__p);
        if (v476 != v475)
          free(v476);
        return;
      case 3uLL:
        sub_1C55F1AA0(v7, v7 + 216, (uint64_t)v6);
        return;
      case 4uLL:
        sub_1C55F2CF4(v7, v7 + 216, v7 + 432, (uint64_t)v6);
        return;
      case 5uLL:
        sub_1C55F1128(v7, v7 + 216, v7 + 432, v7 + 648, (uint64_t)v6);
        return;
      default:
        if (v8 <= 5183)
        {
          if ((a4 & 1) == 0)
          {
            if (v7 == v5)
              return;
            v411 = v7 + 216;
            if (v7 + 216 == a2)
              return;
            for (i = v7 + 352; ; i += 216)
            {
              v413 = a1;
              a1 = v411;
              v414 = *(_DWORD *)(v413 + 312);
              v415 = *(_DWORD *)(v413 + 96);
              if (v414 == v415)
              {
                v416 = *(_DWORD *)(v413 + 236) - *(_DWORD *)(v413 + 240);
                v417 = *(_DWORD *)(v413 + 20) - *(_DWORD *)(v413 + 24);
                if (v416 == v417)
                {
                  v418 = *(_BYTE *)(v413 + 127);
                  v419 = v418;
                  if (v418 >= 0)
                    v420 = (const void *)(v413 + 104);
                  else
                    v420 = *(const void **)(v413 + 104);
                  v421 = v418 & 0x7F;
                  if (v419 >= 0)
                    v422 = v421;
                  else
                    v422 = *(_QWORD *)(v413 + 112);
                  v423 = *(char *)(v413 + 343);
                  if (v423 >= 0)
                    v424 = *(unsigned __int8 *)(v413 + 343);
                  else
                    v424 = *(_QWORD *)(v413 + 328);
                  if (v423 >= 0)
                    v425 = (const void *)(v413 + 320);
                  else
                    v425 = *(const void **)(v413 + 320);
                  if (v422 >= v424)
                    v426 = v424;
                  else
                    v426 = v422;
                  v427 = memcmp(v425, v420, v426);
                  v428 = v424 < v422;
                  if (v427)
                    v428 = v427 < 0;
                  if (!v428)
                    goto LABEL_815;
LABEL_817:
                  v475 = v479;
                  v429 = *(_QWORD *)a1;
                  if (*(_QWORD *)(a1 + 8) == *(_QWORD *)a1)
                  {
                    v476 = v479;
                    v430 = *(unsigned int *)(a1 + 20);
                    if ((_DWORD)v430)
                    {
                      memmove(v479, *(const void **)(a1 + 8), 8 * v430);
                      v414 = *(_DWORD *)(v413 + 312);
                    }
                  }
                  else
                  {
                    v476 = *(_BYTE **)(a1 + 8);
                    *(_QWORD *)(a1 + 8) = v429;
                  }
                  v477 = *(_QWORD *)(a1 + 16);
                  v478 = *(_DWORD *)(a1 + 24);
                  *(_QWORD *)(a1 + 16) = 8;
                  *(_DWORD *)(a1 + 24) = 0;
                  v480 = v414;
                  __p = *(_OWORD *)(v413 + 320);
                  v482 = *(_QWORD *)(v413 + 336);
                  *(_QWORD *)(v413 + 320) = 0;
                  *(_QWORD *)(v413 + 328) = 0;
                  *(_QWORD *)(v413 + 336) = 0;
                  v483 = *(_BYTE *)(v413 + 344);
                  v484 = v486;
                  v485 = 0x800000000;
                  if (*(_DWORD *)(v413 + 360))
                    sub_1C614D378((uint64_t)&v484, v413 + 352);
                  for (j = i; ; j -= 216)
                  {
                    llvm::SmallPtrSetImplBase::MoveFrom(j - 136, 8, (double *)(j - 352));
                    *(_DWORD *)(j - 40) = *(_DWORD *)(j - 256);
                    v432 = (void **)(j - 32);
                    if (*(char *)(j - 9) < 0)
                      operator delete(*v432);
                    *(_OWORD *)v432 = *(_OWORD *)(j - 248);
                    *(_QWORD *)(j - 16) = *(_QWORD *)(j - 232);
                    *(_BYTE *)(j - 225) = 0;
                    *(_BYTE *)(j - 248) = 0;
                    *(_BYTE *)(j - 8) = *(_BYTE *)(j - 224);
                    sub_1C614D378(j, j - 216);
                    v433 = v480;
                    v434 = *(_DWORD *)(j - 472);
                    if (v480 == v434)
                    {
                      v435 = *(_DWORD *)(j - 548) - *(_DWORD *)(j - 544);
                      if (HIDWORD(v477) - v478 == v435)
                      {
                        v436 = *(_BYTE *)(j - 441);
                        v437 = v436;
                        if (v436 >= 0)
                          v438 = (const void *)(j - 464);
                        else
                          v438 = *(const void **)(j - 464);
                        v439 = v436 & 0x7F;
                        if (v437 >= 0)
                          v440 = v439;
                        else
                          v440 = *(_QWORD *)(j - 456);
                        if (v482 >= 0)
                          v441 = HIBYTE(v482);
                        else
                          v441 = *((_QWORD *)&__p + 1);
                        if (v482 >= 0)
                          p_p = &__p;
                        else
                          p_p = (__int128 *)__p;
                        if (v440 >= v441)
                          v443 = v441;
                        else
                          v443 = v440;
                        v444 = memcmp(p_p, v438, v443);
                        v445 = v441 < v440;
                        if (v444)
                          v445 = v444 < 0;
                        if (!v445)
                        {
LABEL_850:
                          if ((_BYTE **)(j - 352) != &v475)
                          {
                            llvm::SmallPtrSetImplBase::MoveFrom(j - 352, 8, (double *)&v475);
                            v433 = v480;
                          }
                          v446 = (void **)(j - 248);
                          *(_DWORD *)(j - 256) = v433;
                          if (*(char *)(j - 225) < 0)
                            operator delete(*v446);
                          v447 = __p;
                          *(_QWORD *)(j - 232) = v482;
                          *(_OWORD *)v446 = v447;
                          HIBYTE(v482) = 0;
                          LOBYTE(__p) = 0;
                          *(_BYTE *)(j - 224) = v483;
                          sub_1C614D378(j - 216, (uint64_t)&v484);
                          if (v484 != v486)
                            free(v484);
                          if (SHIBYTE(v482) < 0)
                            operator delete((void *)__p);
                          if (v476 != v475)
                            free(v476);
                          goto LABEL_815;
                        }
                      }
                      else if (HIDWORD(v477) - v478 <= v435)
                      {
                        goto LABEL_850;
                      }
                    }
                    else if (v480 >= v434)
                    {
                      goto LABEL_850;
                    }
                  }
                }
                if (v416 > v417)
                  goto LABEL_817;
              }
              else if (v414 < v415)
              {
                goto LABEL_817;
              }
LABEL_815:
              v411 = a1 + 216;
              if (a1 + 216 == a2)
                return;
            }
          }
          if (v7 == v5)
            return;
          v373 = v7 + 216;
          if (v7 + 216 == a2)
            return;
          v374 = 0;
          v375 = v7;
LABEL_713:
          v376 = v375;
          v375 = v373;
          v377 = *(_DWORD *)(v376 + 312);
          v378 = *(_DWORD *)(v376 + 96);
          if (v377 == v378)
          {
            v379 = *(_DWORD *)(v376 + 236) - *(_DWORD *)(v376 + 240);
            v380 = *(_DWORD *)(v376 + 20) - *(_DWORD *)(v376 + 24);
            if (v379 == v380)
            {
              v381 = *(_BYTE *)(v376 + 127);
              v382 = v381;
              if (v381 >= 0)
                v383 = (const void *)(v376 + 104);
              else
                v383 = *(const void **)(v376 + 104);
              v384 = v381 & 0x7F;
              if (v382 >= 0)
                v385 = v384;
              else
                v385 = *(_QWORD *)(v376 + 112);
              v386 = *(char *)(v376 + 343);
              if (v386 >= 0)
                v387 = *(unsigned __int8 *)(v376 + 343);
              else
                v387 = *(_QWORD *)(v376 + 328);
              if (v386 >= 0)
                v388 = (const void *)(v376 + 320);
              else
                v388 = *(const void **)(v376 + 320);
              if (v385 >= v387)
                v389 = v387;
              else
                v389 = v385;
              v390 = memcmp(v388, v383, v389);
              v391 = v387 < v385;
              if (v390)
                v391 = v390 < 0;
              if (!v391)
                goto LABEL_737;
            }
            else if (v379 <= v380)
            {
              goto LABEL_737;
            }
          }
          else if (v377 >= v378)
          {
            goto LABEL_737;
          }
          v475 = v479;
          v392 = *(_QWORD *)v375;
          if (*(_QWORD *)(v375 + 8) == *(_QWORD *)v375)
          {
            v476 = v479;
            v393 = *(unsigned int *)(v375 + 20);
            if ((_DWORD)v393)
            {
              memmove(v479, *(const void **)(v375 + 8), 8 * v393);
              v377 = *(_DWORD *)(v376 + 312);
            }
          }
          else
          {
            v476 = *(_BYTE **)(v375 + 8);
            *(_QWORD *)(v375 + 8) = v392;
          }
          v477 = *(_QWORD *)(v375 + 16);
          v478 = *(_DWORD *)(v375 + 24);
          *(_QWORD *)(v375 + 16) = 8;
          *(_DWORD *)(v375 + 24) = 0;
          v480 = v377;
          __p = *(_OWORD *)(v376 + 320);
          v482 = *(_QWORD *)(v376 + 336);
          *(_QWORD *)(v376 + 320) = 0;
          *(_QWORD *)(v376 + 328) = 0;
          *(_QWORD *)(v376 + 336) = 0;
          v483 = *(_BYTE *)(v376 + 344);
          v484 = v486;
          v485 = 0x800000000;
          if (*(_DWORD *)(v376 + 360))
            sub_1C614D378((uint64_t)&v484, v376 + 352);
          for (k = v374; ; k -= 216)
          {
            v395 = v7 + k;
            llvm::SmallPtrSetImplBase::MoveFrom(v7 + k + 216, 8, (double *)(v7 + k));
            *(_DWORD *)(v7 + k + 312) = *(_DWORD *)(v7 + k + 96);
            v396 = (void **)(v7 + k + 320);
            if (*(char *)(v7 + k + 343) < 0)
              operator delete(*v396);
            *(_OWORD *)v396 = *(_OWORD *)(v395 + 104);
            *(_QWORD *)(v395 + 336) = *(_QWORD *)(v395 + 120);
            *(_BYTE *)(v395 + 127) = 0;
            *(_BYTE *)(v395 + 104) = 0;
            *(_BYTE *)(v395 + 344) = *(_BYTE *)(v395 + 128);
            sub_1C614D378(v395 + 352, v395 + 136);
            if (!k)
            {
              v407 = v7;
              goto LABEL_775;
            }
            v397 = *(_DWORD *)(v7 + k - 120);
            if (v480 == v397)
            {
              v398 = *(_DWORD *)(v7 + k - 196) - *(_DWORD *)(v7 + k - 192);
              if (HIDWORD(v477) - v478 == v398)
              {
                v399 = *(_BYTE *)(v7 + k - 89);
                if (v399 >= 0)
                  v400 = (const void *)(v7 + k - 112);
                else
                  v400 = *(const void **)(v7 + k - 112);
                if (v399 >= 0)
                  v401 = v399 & 0x7F;
                else
                  v401 = *(_QWORD *)(v7 + k - 104);
                if (v482 >= 0)
                  v402 = HIBYTE(v482);
                else
                  v402 = *((_QWORD *)&__p + 1);
                if (v482 >= 0)
                  v403 = &__p;
                else
                  v403 = (__int128 *)__p;
                if (v401 >= v402)
                  v404 = v402;
                else
                  v404 = v401;
                v405 = memcmp(v403, v400, v404);
                v406 = v402 < v401;
                if (v405)
                  v406 = v405 < 0;
                if (!v406)
                {
LABEL_774:
                  v407 = v7 + k;
LABEL_775:
                  if (&v475 != (_BYTE **)v407)
                    llvm::SmallPtrSetImplBase::MoveFrom(v407, 8, (double *)&v475);
                  v408 = v7 + k;
                  v409 = v7 + k + 104;
                  *(_DWORD *)(v407 + 96) = v480;
                  if (*(char *)(v407 + 127) < 0)
                    operator delete(*(void **)v409);
                  v410 = __p;
                  *(_QWORD *)(v409 + 16) = v482;
                  *(_OWORD *)v409 = v410;
                  HIBYTE(v482) = 0;
                  LOBYTE(__p) = 0;
                  *(_BYTE *)(v407 + 128) = v483;
                  sub_1C614D378(v408 + 136, (uint64_t)&v484);
                  if (v484 != v486)
                    free(v484);
                  if (SHIBYTE(v482) < 0)
                    operator delete((void *)__p);
                  if (v476 != v475)
                    free(v476);
LABEL_737:
                  v373 = v375 + 216;
                  v374 += 216;
                  if (v375 + 216 == a2)
                    return;
                  goto LABEL_713;
                }
              }
              else if (HIDWORD(v477) - v478 <= v398)
              {
                goto LABEL_774;
              }
            }
            else if (v480 >= v397)
            {
              goto LABEL_774;
            }
          }
        }
        if (!a3)
        {
          if (v7 == v5)
            return;
          v199 = (v9 - 2) >> 1;
          v200 = v199;
          while (1)
          {
            v201 = v200;
            if (v199 >= v200)
            {
              v202 = (2 * v200) | 1;
              v203 = a1 + 216 * v202;
              if (2 * v200 + 2 < (uint64_t)v9)
              {
                v204 = *(_DWORD *)(a1 + 216 * v202 + 96);
                v205 = *(_DWORD *)(v203 + 312);
                if (v204 == v205)
                {
                  v206 = *(_DWORD *)(v203 + 20) - *(_DWORD *)(v203 + 24);
                  v207 = *(_DWORD *)(v203 + 236) - *(_DWORD *)(v203 + 240);
                  if (v206 == v207)
                  {
                    v208 = a1 + 216 * v202;
                    v209 = *(_BYTE *)(v203 + 343);
                    if (v209 >= 0)
                      v210 = (const void *)(v203 + 320);
                    else
                      v210 = *(const void **)(v203 + 320);
                    if (v209 >= 0)
                      v211 = v209 & 0x7F;
                    else
                      v211 = *(_QWORD *)(v203 + 328);
                    v212 = *(char *)(v203 + 127);
                    v214 = *(const void **)(v208 + 104);
                    v215 = *(_QWORD *)(v208 + 112);
                    v213 = (const void *)(v208 + 104);
                    if (v212 >= 0)
                      v216 = *(unsigned __int8 *)(v203 + 127);
                    else
                      v216 = v215;
                    if (v212 >= 0)
                      v217 = v213;
                    else
                      v217 = v214;
                    if (v211 >= v216)
                      v218 = v216;
                    else
                      v218 = v211;
                    v219 = memcmp(v217, v210, v218);
                    v220 = v216 < v211;
                    if (v219)
                      v220 = v219 < 0;
                  }
                  else
                  {
                    v220 = v206 > v207;
                  }
                }
                else
                {
                  v220 = v204 < v205;
                }
                v203 += 216 * v220;
                if (v220)
                  v202 = 2 * v201 + 2;
              }
              v221 = a1 + 216 * v201;
              v222 = *(_DWORD *)(v203 + 96);
              v223 = *(_DWORD *)(v221 + 96);
              if (v222 == v223)
              {
                v224 = *(_DWORD *)(v203 + 20) - *(_DWORD *)(v203 + 24);
                v225 = *(_DWORD *)(v221 + 20) - *(_DWORD *)(v221 + 24);
                if (v224 == v225)
                {
                  v226 = a1 + 216 * v201;
                  v227 = *(_BYTE *)(v221 + 127);
                  v228 = v227;
                  v231 = *(const void **)(v226 + 104);
                  v229 = (_QWORD *)(v226 + 104);
                  v230 = v231;
                  if (v227 >= 0)
                    v232 = v229;
                  else
                    v232 = v230;
                  v233 = v229[1];
                  v234 = v227 & 0x7F;
                  if (v228 >= 0)
                    v235 = v234;
                  else
                    v235 = v233;
                  v236 = *(char *)(v203 + 127);
                  if (v236 >= 0)
                    v237 = *(unsigned __int8 *)(v203 + 127);
                  else
                    v237 = *(_QWORD *)(v203 + 112);
                  if (v236 >= 0)
                    v238 = (const void *)(v203 + 104);
                  else
                    v238 = *(const void **)(v203 + 104);
                  if (v235 >= v237)
                    v239 = v237;
                  else
                    v239 = v235;
                  v240 = memcmp(v238, v232, v239);
                  v241 = v237 < v235;
                  if (v240)
                    v241 = v240 < 0;
                  if (!v241)
                  {
LABEL_475:
                    v475 = v479;
                    v243 = *(_QWORD *)v221;
                    v242 = *(const void **)(v221 + 8);
                    if (v242 == *(const void **)v221)
                    {
                      v476 = v479;
                      v244 = *(unsigned int *)(v221 + 20);
                      if ((_DWORD)v244)
                        memmove(v479, v242, 8 * v244);
                    }
                    else
                    {
                      v476 = *(_BYTE **)(v221 + 8);
                      *(_QWORD *)(v221 + 8) = v243;
                      LODWORD(v244) = *(_DWORD *)(v221 + 20);
                    }
                    LODWORD(v477) = *(_DWORD *)(v221 + 16);
                    HIDWORD(v477) = v244;
                    v478 = *(_DWORD *)(v221 + 24);
                    *(_QWORD *)(v221 + 16) = 8;
                    *(_DWORD *)(v221 + 24) = 0;
                    v480 = v223;
                    v245 = a1 + 216 * v201;
                    v246 = *(_OWORD *)(v245 + 104);
                    v482 = *(_QWORD *)(v245 + 120);
                    __p = v246;
                    *(_QWORD *)(v245 + 112) = 0;
                    *(_QWORD *)(v245 + 120) = 0;
                    *(_QWORD *)(v245 + 104) = 0;
                    v483 = *(_BYTE *)(v245 + 128);
                    v484 = v486;
                    v485 = 0x800000000;
                    if (*(_DWORD *)(v245 + 144))
                      sub_1C614D378((uint64_t)&v484, a1 + 216 * v201 + 136);
                    while (1)
                    {
                      v247 = v203;
                      if (v203 != v221)
                        llvm::SmallPtrSetImplBase::MoveFrom(v221, 8, (double *)v203);
                      *(_DWORD *)(v221 + 96) = *(_DWORD *)(v203 + 96);
                      v248 = (void **)(v221 + 104);
                      if (*(char *)(v221 + 127) < 0)
                        operator delete(*v248);
                      v249 = *(_OWORD *)(v247 + 104);
                      *(_QWORD *)(v221 + 120) = *(_QWORD *)(v247 + 120);
                      *(_OWORD *)v248 = v249;
                      *(_BYTE *)(v247 + 127) = 0;
                      *(_BYTE *)(v247 + 104) = 0;
                      *(_BYTE *)(v221 + 128) = *(_BYTE *)(v247 + 128);
                      sub_1C614D378(v221 + 136, v247 + 136);
                      if (v199 < v202)
                        break;
                      v250 = (2 * v202) | 1;
                      v203 = a1 + 216 * v250;
                      v202 = 2 * v202 + 2;
                      if (v202 >= (uint64_t)v9)
                      {
                        v202 = v250;
                      }
                      else
                      {
                        v251 = *(_DWORD *)(a1 + 216 * v250 + 96);
                        v252 = *(_DWORD *)(v203 + 312);
                        if (v251 == v252)
                        {
                          v253 = *(_DWORD *)(v203 + 20) - *(_DWORD *)(v203 + 24);
                          v254 = *(_DWORD *)(v203 + 236) - *(_DWORD *)(v203 + 240);
                          if (v253 == v254)
                          {
                            v255 = a1 + 216 * v250;
                            v256 = *(_BYTE *)(v203 + 343);
                            if (v256 >= 0)
                              v257 = (const void *)(v203 + 320);
                            else
                              v257 = *(const void **)(v203 + 320);
                            if (v256 >= 0)
                              v258 = v256 & 0x7F;
                            else
                              v258 = *(_QWORD *)(v203 + 328);
                            v259 = *(char *)(v203 + 127);
                            v261 = *(const void **)(v255 + 104);
                            v262 = *(_QWORD *)(v255 + 112);
                            v260 = (const void *)(v255 + 104);
                            if (v259 >= 0)
                              v263 = *(unsigned __int8 *)(v203 + 127);
                            else
                              v263 = v262;
                            if (v259 >= 0)
                              v264 = v260;
                            else
                              v264 = v261;
                            if (v258 >= v263)
                              v265 = v263;
                            else
                              v265 = v258;
                            v266 = memcmp(v264, v257, v265);
                            v66 = v263 >= v258;
                            v199 = (v9 - 2) >> 1;
                            v267 = !v66;
                            if (v266)
                              v267 = v266 < 0;
                          }
                          else
                          {
                            v267 = v253 > v254;
                          }
                        }
                        else
                        {
                          v267 = v251 < v252;
                        }
                        v203 += 216 * v267;
                        if (!v267)
                          v202 = v250;
                      }
                      v268 = *(_DWORD *)(v203 + 96);
                      if (v268 == v480)
                      {
                        v269 = *(_DWORD *)(v203 + 20) - *(_DWORD *)(v203 + 24);
                        if (v269 == HIDWORD(v477) - v478)
                        {
                          if (v482 >= 0)
                            v270 = &__p;
                          else
                            v270 = (__int128 *)__p;
                          if (v482 >= 0)
                            v271 = HIBYTE(v482) & 0x7F;
                          else
                            v271 = *((_QWORD *)&__p + 1);
                          v272 = *(char *)(v203 + 127);
                          if (v272 >= 0)
                            v273 = *(unsigned __int8 *)(v203 + 127);
                          else
                            v273 = *(_QWORD *)(v203 + 112);
                          if (v272 >= 0)
                            v274 = (const void *)(v203 + 104);
                          else
                            v274 = *(const void **)(v203 + 104);
                          if (v271 >= v273)
                            v275 = v273;
                          else
                            v275 = v271;
                          v276 = memcmp(v274, v270, v275);
                          v66 = v273 >= v271;
                          v199 = (v9 - 2) >> 1;
                          v277 = !v66;
                          if (v276)
                            v277 = v276 < 0;
                          v221 = v247;
                          if (v277)
                            break;
                        }
                        else
                        {
                          v221 = v247;
                          if (v269 > HIDWORD(v477) - v478)
                            break;
                        }
                      }
                      else
                      {
                        v221 = v247;
                        if (v268 < v480)
                          break;
                      }
                    }
                    if (&v475 != (_BYTE **)v247)
                      llvm::SmallPtrSetImplBase::MoveFrom(v247, 8, (double *)&v475);
                    v278 = (void **)(v247 + 104);
                    *(_DWORD *)(v247 + 96) = v480;
                    if (*(char *)(v247 + 127) < 0)
                      operator delete(*v278);
                    v279 = __p;
                    *(_QWORD *)(v247 + 120) = v482;
                    *(_OWORD *)v278 = v279;
                    HIBYTE(v482) = 0;
                    LOBYTE(__p) = 0;
                    *(_BYTE *)(v247 + 128) = v483;
                    sub_1C614D378(v247 + 136, (uint64_t)&v484);
                    if (v484 != v486)
                      free(v484);
                    if (SHIBYTE(v482) < 0)
                      operator delete((void *)__p);
                    if (v476 != v475)
                      free(v476);
                  }
                }
                else if (v224 <= v225)
                {
                  goto LABEL_475;
                }
              }
              else if (v222 >= v223)
              {
                goto LABEL_475;
              }
            }
            v200 = v201 - 1;
            if (!v201)
            {
              v462 = (__int128 *)(a1 + 104);
              while (1)
              {
                v463 = v467;
                v280 = *(_QWORD *)a1;
                if (*(_QWORD *)(a1 + 8) == *(_QWORD *)a1)
                {
                  v464 = v467;
                  v281 = *(unsigned int *)(a1 + 20);
                  if ((_DWORD)v281)
                    memmove(v467, *(const void **)(a1 + 8), 8 * v281);
                }
                else
                {
                  v464 = *(_BYTE **)(a1 + 8);
                  *(_QWORD *)(a1 + 8) = v280;
                }
                v465 = *(_QWORD *)(a1 + 16);
                v466 = *(_DWORD *)(a1 + 24);
                *(_QWORD *)(a1 + 16) = 8;
                *(_DWORD *)(a1 + 24) = 0;
                v468 = *(_DWORD *)(a1 + 96);
                v282 = *(_QWORD *)(a1 + 120);
                v469 = *v462;
                v470 = v282;
                *(_QWORD *)(a1 + 112) = 0;
                *(_QWORD *)(a1 + 120) = 0;
                *(_QWORD *)v462 = 0;
                v471 = *(_BYTE *)(a1 + 128);
                v472 = v474;
                v473 = 0x800000000;
                if (*(_DWORD *)(a1 + 144))
                  sub_1C614D378((uint64_t)&v472, a1 + 136);
                v283 = 0;
                v284 = a1;
                do
                {
                  v285 = v283 + 1;
                  v286 = v284 + 216 * (v283 + 1);
                  v287 = 2 * v283;
                  v283 = (2 * v283) | 1;
                  v288 = v287 + 2;
                  if (v287 + 2 < (uint64_t)v9)
                  {
                    v289 = *(_DWORD *)(v284 + 216 * v285 + 96);
                    v290 = *(_DWORD *)(v286 + 312);
                    if (v289 == v290)
                    {
                      v291 = *(_DWORD *)(v286 + 20) - *(_DWORD *)(v286 + 24);
                      v292 = *(_DWORD *)(v286 + 236) - *(_DWORD *)(v286 + 240);
                      if (v291 == v292)
                      {
                        v293 = v284 + 216 * v285;
                        v294 = *(_BYTE *)(v286 + 343);
                        if (v294 >= 0)
                          v295 = (const void *)(v286 + 320);
                        else
                          v295 = *(const void **)(v286 + 320);
                        if (v294 >= 0)
                          v296 = v294 & 0x7F;
                        else
                          v296 = *(_QWORD *)(v286 + 328);
                        v297 = *(char *)(v286 + 127);
                        v299 = *(const void **)(v293 + 104);
                        v300 = *(_QWORD *)(v293 + 112);
                        v298 = (const void *)(v293 + 104);
                        if (v297 >= 0)
                          v301 = *(unsigned __int8 *)(v286 + 127);
                        else
                          v301 = v300;
                        if (v297 >= 0)
                          v302 = v298;
                        else
                          v302 = v299;
                        if (v296 >= v301)
                          v303 = v301;
                        else
                          v303 = v296;
                        v304 = memcmp(v302, v295, v303);
                        v305 = v301 < v296;
                        if (v304)
                          v305 = v304 < 0;
                      }
                      else
                      {
                        v305 = v291 > v292;
                      }
                    }
                    else
                    {
                      v305 = v289 < v290;
                    }
                    v286 += 216 * v305;
                    if (v305)
                      v283 = v288;
                  }
                  if (v286 != v284)
                    llvm::SmallPtrSetImplBase::MoveFrom(v284, 8, (double *)v286);
                  *(_DWORD *)(v284 + 96) = *(_DWORD *)(v286 + 96);
                  v306 = (void **)(v284 + 104);
                  if (*(char *)(v284 + 127) < 0)
                    operator delete(*v306);
                  v307 = *(_OWORD *)(v286 + 104);
                  *(_QWORD *)(v284 + 120) = *(_QWORD *)(v286 + 120);
                  *(_OWORD *)v306 = v307;
                  *(_BYTE *)(v286 + 127) = 0;
                  *(_BYTE *)(v286 + 104) = 0;
                  *(_BYTE *)(v284 + 128) = *(_BYTE *)(v286 + 128);
                  sub_1C614D378(v284 + 136, v286 + 136);
                  v284 = v286;
                }
                while (v283 <= (uint64_t)((v9 - 2) >> 1));
                v308 = (void **)(v286 + 104);
                v309 = (_QWORD *)(a2 - 216);
                if (v286 == a2 - 216)
                {
                  if (&v463 != (_BYTE **)v286)
                    llvm::SmallPtrSetImplBase::MoveFrom(v286, 8, (double *)&v463);
                  *(_DWORD *)(v286 + 96) = v468;
                  if (*(char *)(v286 + 127) < 0)
                    operator delete(*v308);
                  v310 = v469;
                  *(_QWORD *)(v286 + 120) = v470;
                  *(_OWORD *)v308 = v310;
                  HIBYTE(v470) = 0;
                  LOBYTE(v469) = 0;
                  *(_BYTE *)(v286 + 128) = v471;
                  sub_1C614D378(v286 + 136, (uint64_t)&v472);
                  goto LABEL_626;
                }
                llvm::SmallPtrSetImplBase::MoveFrom(v286, 8, (double *)(a2 - 216));
                *(_DWORD *)(v286 + 96) = *(_DWORD *)(a2 - 120);
                if (*(char *)(v286 + 127) < 0)
                  operator delete(*v308);
                v311 = *(_OWORD *)(a2 - 112);
                *(_QWORD *)(v286 + 120) = *(_QWORD *)(a2 - 96);
                *(_OWORD *)v308 = v311;
                *(_BYTE *)(a2 - 89) = 0;
                *(_BYTE *)(a2 - 112) = 0;
                *(_BYTE *)(v286 + 128) = *(_BYTE *)(a2 - 88);
                sub_1C614D378(v286 + 136, a2 - 80);
                if (&v463 != v309)
                  llvm::SmallPtrSetImplBase::MoveFrom((uint64_t)v309, 8, (double *)&v463);
                v312 = (void **)(a2 - 112);
                *(_DWORD *)(a2 - 120) = v468;
                if (*(char *)(a2 - 89) < 0)
                  operator delete(*v312);
                v313 = v469;
                *(_QWORD *)(a2 - 96) = v470;
                *(_OWORD *)v312 = v313;
                HIBYTE(v470) = 0;
                LOBYTE(v469) = 0;
                *(_BYTE *)(a2 - 88) = v471;
                sub_1C614D378(a2 - 80, (uint64_t)&v472);
                v314 = v286 + 216 - a1;
                if (v314 < 217)
                  goto LABEL_626;
                v315 = (v314 / 0xD8uLL - 2) >> 1;
                v316 = a1 + 216 * v315;
                v317 = *(_DWORD *)(v316 + 96);
                v318 = *(_DWORD *)(v286 + 96);
                if (v317 == v318)
                {
                  v319 = *(_DWORD *)(v316 + 20) - *(_DWORD *)(v316 + 24);
                  v320 = *(_DWORD *)(v286 + 20) - *(_DWORD *)(v286 + 24);
                  if (v319 == v320)
                  {
                    v321 = a1 + 216 * v315;
                    v322 = *(_BYTE *)(v286 + 127);
                    v323 = v322 < 0;
                    v457 = *(_DWORD *)(v286 + 96);
                    if (v322 >= 0)
                      v324 = (const void *)(v286 + 104);
                    else
                      v324 = *(const void **)(v286 + 104);
                    v325 = v322 & 0x7F;
                    v461 = v315;
                    if (v323)
                      v326 = *(_QWORD *)(v286 + 112);
                    else
                      v326 = v325;
                    v327 = *(char *)(v316 + 127);
                    v329 = *(const void **)(v321 + 104);
                    v330 = *(_QWORD *)(v321 + 112);
                    v328 = (const void *)(v321 + 104);
                    if (v327 >= 0)
                      v331 = *(unsigned __int8 *)(v316 + 127);
                    else
                      v331 = v330;
                    if (v327 >= 0)
                      v332 = v328;
                    else
                      v332 = v329;
                    if (v326 >= v331)
                      v333 = v331;
                    else
                      v333 = v326;
                    v334 = memcmp(v332, v324, v333);
                    v318 = v457;
                    v66 = v331 >= v326;
                    v315 = v461;
                    v335 = !v66;
                    if (v334)
                      v335 = v334 < 0;
                    if (!v335)
                      goto LABEL_626;
                  }
                  else if (v319 <= v320)
                  {
                    goto LABEL_626;
                  }
                }
                else if (v317 >= v318)
                {
                  goto LABEL_626;
                }
                v475 = v479;
                v337 = *(double *)v286;
                if (*(_QWORD *)(v286 + 8) == *(_QWORD *)v286)
                {
                  v476 = v479;
                  v338 = *(unsigned int *)(v286 + 20);
                  if ((_DWORD)v338)
                  {
                    memmove(v479, *(const void **)(v286 + 8), 8 * v338);
                    v318 = *(_DWORD *)(v286 + 96);
                  }
                }
                else
                {
                  v476 = *(_BYTE **)(v286 + 8);
                  *(double *)(v286 + 8) = v337;
                }
                v477 = *(_QWORD *)(v286 + 16);
                v478 = *(_DWORD *)(v286 + 24);
                *(_QWORD *)(v286 + 16) = 8;
                *(_DWORD *)(v286 + 24) = 0;
                v480 = v318;
                v339 = *(_QWORD *)(v286 + 120);
                __p = *(_OWORD *)v308;
                v482 = v339;
                *(_QWORD *)(v286 + 112) = 0;
                *(_QWORD *)(v286 + 120) = 0;
                *v308 = 0;
                v483 = *(_BYTE *)(v286 + 128);
                v484 = v486;
                v485 = 0x800000000;
                if (*(_DWORD *)(v286 + 144))
                  sub_1C614D378((uint64_t)&v484, v286 + 136);
                while (1)
                {
                  v340 = v316;
                  if (v316 != v286)
                    llvm::SmallPtrSetImplBase::MoveFrom(v286, 8, (double *)v316);
                  *(_DWORD *)(v286 + 96) = *(_DWORD *)(v316 + 96);
                  v341 = (void **)(v286 + 104);
                  if (*(char *)(v286 + 127) < 0)
                    operator delete(*v341);
                  v342 = *(_OWORD *)(v316 + 104);
                  *(_QWORD *)(v286 + 120) = *(_QWORD *)(v316 + 120);
                  *(_OWORD *)v341 = v342;
                  *(_BYTE *)(v316 + 127) = 0;
                  *(_BYTE *)(v316 + 104) = 0;
                  *(_BYTE *)(v286 + 128) = *(_BYTE *)(v316 + 128);
                  sub_1C614D378(v286 + 136, v316 + 136);
                  if (!v315)
                    break;
                  v315 = (v315 - 1) >> 1;
                  v316 = a1 + 216 * v315;
                  v343 = *(_DWORD *)(v316 + 96);
                  if (v343 == v480)
                  {
                    v344 = *(_DWORD *)(v316 + 20) - *(_DWORD *)(v316 + 24);
                    if (v344 == HIDWORD(v477) - v478)
                    {
                      v345 = a1 + 216 * v315;
                      if (v482 >= 0)
                        v346 = &__p;
                      else
                        v346 = (__int128 *)__p;
                      if (v482 >= 0)
                        v347 = HIBYTE(v482) & 0x7F;
                      else
                        v347 = *((_QWORD *)&__p + 1);
                      v348 = *(char *)(v316 + 127);
                      v350 = *(const void **)(v345 + 104);
                      v351 = *(_QWORD *)(v345 + 112);
                      v349 = (const void *)(v345 + 104);
                      v352 = v315;
                      if (v348 >= 0)
                        v353 = *(unsigned __int8 *)(v316 + 127);
                      else
                        v353 = v351;
                      if (v348 >= 0)
                        v354 = v349;
                      else
                        v354 = v350;
                      if (v347 >= v353)
                        v355 = v353;
                      else
                        v355 = v347;
                      v356 = memcmp(v354, v346, v355);
                      v66 = v353 >= v347;
                      v315 = v352;
                      v357 = !v66;
                      if (v356)
                        v357 = v356 < 0;
                      v286 = v340;
                      if (!v357)
                        break;
                    }
                    else
                    {
                      v286 = v340;
                      if (v344 <= HIDWORD(v477) - v478)
                        break;
                    }
                  }
                  else
                  {
                    v286 = v340;
                    if (v343 >= v480)
                      break;
                  }
                }
                if (&v475 != (_BYTE **)v340)
                  llvm::SmallPtrSetImplBase::MoveFrom(v340, 8, (double *)&v475);
                v358 = (void **)(v340 + 104);
                *(_DWORD *)(v340 + 96) = v480;
                if (*(char *)(v340 + 127) < 0)
                  operator delete(*v358);
                v359 = __p;
                *(_QWORD *)(v340 + 120) = v482;
                *(_OWORD *)v358 = v359;
                HIBYTE(v482) = 0;
                LOBYTE(__p) = 0;
                *(_BYTE *)(v340 + 128) = v483;
                sub_1C614D378(v340 + 136, (uint64_t)&v484);
                if (v484 != v486)
                  free(v484);
                if (SHIBYTE(v482) < 0)
                  operator delete((void *)__p);
                if (v476 != v475)
                  free(v476);
LABEL_626:
                if (v472 != v474)
                  free(v472);
                if (SHIBYTE(v470) < 0)
                  operator delete((void *)v469);
                if (v464 != v463)
                  free(v464);
                a2 = (uint64_t)v309;
                if ((uint64_t)v9-- <= 2)
                  return;
              }
            }
          }
        }
        v10 = v9 >> 1;
        v11 = v7 + 216 * (v9 >> 1);
        if ((unint64_t)v8 < 0x6C01)
        {
          sub_1C55F1AA0(a1 + 216 * (v9 >> 1), a1, (uint64_t)v6);
        }
        else
        {
          sub_1C55F1AA0(a1, a1 + 216 * (v9 >> 1), (uint64_t)v6);
          sub_1C55F1AA0(a1 + 216, 216 * v10 + a1 - 216, a2 - 432);
          sub_1C55F1AA0(a1 + 432, a1 + 216 + 216 * v10, a2 - 648);
          sub_1C55F1AA0(216 * v10 + a1 - 216, a1 + 216 * (v9 >> 1), a1 + 216 + 216 * v10);
          v475 = v479;
          v12 = *(_QWORD *)a1;
          if (*(_QWORD *)(a1 + 8) == *(_QWORD *)a1)
          {
            v476 = v479;
            v13 = *(unsigned int *)(a1 + 20);
            if ((_DWORD)v13)
              memmove(v479, *(const void **)(a1 + 8), 8 * v13);
          }
          else
          {
            v476 = *(_BYTE **)(a1 + 8);
            *(_QWORD *)(a1 + 8) = v12;
          }
          v477 = *(_QWORD *)(a1 + 16);
          v478 = *(_DWORD *)(a1 + 24);
          *(_QWORD *)(a1 + 16) = 8;
          *(_DWORD *)(a1 + 24) = 0;
          v480 = *(_DWORD *)(a1 + 96);
          v14 = *(_QWORD *)(a1 + 120);
          __p = *(_OWORD *)(a1 + 104);
          v482 = v14;
          *(_QWORD *)(a1 + 112) = 0;
          *(_QWORD *)(a1 + 120) = 0;
          *(_QWORD *)(a1 + 104) = 0;
          v483 = *(_BYTE *)(a1 + 128);
          v484 = v486;
          v485 = 0x800000000;
          if (*(_DWORD *)(a1 + 144))
            sub_1C614D378((uint64_t)&v484, a1 + 136);
          if (v9 >= 2)
            llvm::SmallPtrSetImplBase::MoveFrom(a1, 8, (double *)(a1 + 216 * (v9 >> 1)));
          v15 = (void **)(a1 + 104);
          v16 = (unsigned int *)(a1 + 96 + 216 * v10);
          *(_DWORD *)(a1 + 96) = *v16;
          if (*(char *)(a1 + 127) < 0)
            operator delete(*v15);
          v17 = a1 + 216 * v10;
          v19 = *(_BYTE *)(v17 + 128);
          v18 = (_BYTE *)(v17 + 128);
          v20 = *(_OWORD *)(v18 - 24);
          *(_QWORD *)(a1 + 120) = *((_QWORD *)v18 - 1);
          *(_OWORD *)v15 = v20;
          *(_BYTE *)(v11 + 127) = 0;
          *(v18 - 24) = 0;
          *(_BYTE *)(a1 + 128) = v19;
          sub_1C614D378(a1 + 136, (uint64_t)(v18 + 8));
          if (&v475 != (_BYTE **)v11)
            llvm::SmallPtrSetImplBase::MoveFrom(v11, 8, (double *)&v475);
          v21 = (void **)(v18 - 24);
          *v16 = v480;
          if (*(char *)(v11 + 127) < 0)
            operator delete(*v21);
          v22 = __p;
          *((_QWORD *)v18 - 1) = v482;
          *(_OWORD *)v21 = v22;
          HIBYTE(v482) = 0;
          LOBYTE(__p) = 0;
          *v18 = v483;
          sub_1C614D378((uint64_t)(v18 + 8), (uint64_t)&v484);
          if (v484 != v486)
            free(v484);
          if (SHIBYTE(v482) < 0)
            operator delete((void *)__p);
          if (v476 != v475)
            free(v476);
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v23 = *(_DWORD *)(a1 - 120);
          v24 = *(_DWORD *)(a1 + 96);
          if (v23 == v24)
          {
            v25 = *(_DWORD *)(a1 - 196) - *(_DWORD *)(a1 - 192);
            v26 = *(_DWORD *)(a1 + 20) - *(_DWORD *)(a1 + 24);
            if (v25 == v26)
            {
              v27 = *(_BYTE *)(a1 + 127);
              v28 = v27;
              if (v27 >= 0)
                v29 = (const void *)(a1 + 104);
              else
                v29 = *(const void **)(a1 + 104);
              v30 = v27 & 0x7F;
              if (v28 >= 0)
                v31 = v30;
              else
                v31 = *(_QWORD *)(a1 + 112);
              v32 = *(char *)(a1 - 89);
              if (v32 >= 0)
                v33 = *(unsigned __int8 *)(a1 - 89);
              else
                v33 = *(_QWORD *)(a1 - 104);
              if (v32 >= 0)
                v34 = (const void *)(a1 - 112);
              else
                v34 = *(const void **)(a1 - 112);
              if (v31 >= v33)
                v35 = v33;
              else
                v35 = v31;
              v36 = memcmp(v34, v29, v35);
              v37 = v33 < v31;
              if (v36)
                v37 = v36 < 0;
              if (!v37)
              {
LABEL_224:
                v463 = v467;
                v112 = *(_QWORD *)a1;
                if (*(_QWORD *)(a1 + 8) == *(_QWORD *)a1)
                {
                  v464 = v467;
                  v113 = *(unsigned int *)(a1 + 20);
                  if ((_DWORD)v113)
                  {
                    memmove(v467, *(const void **)(a1 + 8), 8 * v113);
                    v24 = *(_DWORD *)(a1 + 96);
                  }
                }
                else
                {
                  v464 = *(_BYTE **)(a1 + 8);
                  *(_QWORD *)(a1 + 8) = v112;
                }
                v465 = *(_QWORD *)(a1 + 16);
                v466 = *(_DWORD *)(a1 + 24);
                *(_QWORD *)(a1 + 16) = 8;
                *(_DWORD *)(a1 + 24) = 0;
                v468 = v24;
                v114 = *(_QWORD *)(a1 + 120);
                v469 = *(_OWORD *)(a1 + 104);
                v470 = v114;
                *(_QWORD *)(a1 + 112) = 0;
                *(_QWORD *)(a1 + 120) = 0;
                *(_QWORD *)(a1 + 104) = 0;
                v471 = *(_BYTE *)(a1 + 128);
                v472 = v474;
                v473 = 0x800000000;
                if (*(_DWORD *)(a1 + 144))
                {
                  sub_1C614D378((uint64_t)&v472, a1 + 136);
                  v24 = v468;
                }
                v115 = *(_DWORD *)(v5 - 120);
                if (v24 == v115)
                {
                  v116 = HIDWORD(v465) - v466;
                  v117 = *(_DWORD *)(v5 - 196) - *(_DWORD *)(v5 - 192);
                  if (HIDWORD(v465) - v466 == v117)
                  {
                    v118 = *(_BYTE *)(v5 - 89);
                    v119 = v118 < 0;
                    if (v118 >= 0)
                      v120 = (const void *)(a2 - 112);
                    else
                      v120 = *(const void **)(v5 - 112);
                    v121 = v118 & 0x7F;
                    if (v119)
                      v122 = *(_QWORD *)(v5 - 104);
                    else
                      v122 = v121;
                    if (v470 >= 0)
                      v123 = HIBYTE(v470);
                    else
                      v123 = *((_QWORD *)&v469 + 1);
                    if (v470 >= 0)
                      v124 = &v469;
                    else
                      v124 = (__int128 *)v469;
                    if (v122 >= v123)
                      v125 = v123;
                    else
                      v125 = v122;
                    v126 = memcmp(v124, v120, v125);
                    v127 = v123 < v122;
                    if (v126)
                      v127 = v126 < 0;
                    if (!v127)
                      goto LABEL_281;
LABEL_255:
                    if (v470 >= 0)
                      v128 = HIBYTE(v470);
                    else
                      v128 = *((_QWORD *)&v469 + 1);
                    if (v470 >= 0)
                      v129 = &v469;
                    else
                      v129 = (__int128 *)v469;
                    for (m = (_BYTE *)(a1 + 343); ; m += 216)
                    {
                      v131 = *(_DWORD *)(m - 31);
                      if (v24 == v131)
                      {
                        v132 = *(_DWORD *)(m - 107) - *(_DWORD *)(m - 103);
                        if (v116 == v132)
                        {
                          v133 = (char)*m;
                          if (v133 >= 0)
                            v134 = m - 23;
                          else
                            v134 = *(_BYTE **)(m - 23);
                          if (v133 >= 0)
                            v135 = *m & 0x7F;
                          else
                            v135 = *(_QWORD *)(m - 15);
                          if (v135 >= v128)
                            v136 = v128;
                          else
                            v136 = v135;
                          v137 = memcmp(v129, v134, v136);
                          v138 = v128 < v135;
                          if (v137)
                            v138 = v137 < 0;
                          if (v138)
                          {
LABEL_308:
                            v7 = (unint64_t)(m - 127);
                            goto LABEL_309;
                          }
                        }
                        else if (v116 > v132)
                        {
                          goto LABEL_308;
                        }
                      }
                      else if (v24 < v131)
                      {
                        goto LABEL_308;
                      }
                    }
                  }
                  if (v116 > v117)
                    goto LABEL_255;
                }
                else if (v24 < v115)
                {
                  v116 = HIDWORD(v465) - v466;
                  goto LABEL_255;
                }
LABEL_281:
                v7 = a1 + 216;
                if (a1 + 216 < v5)
                {
                  v139 = HIDWORD(v465) - v466;
                  if (v470 >= 0)
                    v140 = HIBYTE(v470);
                  else
                    v140 = *((_QWORD *)&v469 + 1);
                  if (v470 >= 0)
                    v141 = &v469;
                  else
                    v141 = (__int128 *)v469;
                  do
                  {
                    v142 = *(_DWORD *)(v7 + 96);
                    if (v24 == v142)
                    {
                      v143 = *(_DWORD *)(v7 + 20) - *(_DWORD *)(v7 + 24);
                      if (v139 == v143)
                      {
                        v144 = *(_BYTE *)(v7 + 127);
                        if (v144 >= 0)
                          v145 = (const void *)(v7 + 104);
                        else
                          v145 = *(const void **)(v7 + 104);
                        if (v144 >= 0)
                          v146 = v144 & 0x7F;
                        else
                          v146 = *(_QWORD *)(v7 + 112);
                        if (v146 >= v140)
                          v147 = v140;
                        else
                          v147 = v146;
                        v148 = memcmp(v141, v145, v147);
                        v149 = v140 < v146;
                        if (v148)
                          v149 = v148 < 0;
                        if (v149)
                          break;
                      }
                      else if (v139 > v143)
                      {
                        break;
                      }
                    }
                    else if (v24 < v142)
                    {
                      break;
                    }
                    v7 += 216;
                  }
                  while (v7 < v5);
                }
LABEL_309:
                ii = v5;
                if (v7 >= v5)
                  goto LABEL_337;
                v151 = HIDWORD(v465) - v466;
                if (v470 >= 0)
                  v152 = HIBYTE(v470);
                else
                  v152 = *((_QWORD *)&v469 + 1);
                if (v470 >= 0)
                  v153 = &v469;
                else
                  v153 = (__int128 *)v469;
                for (n = (const void **)(a2 - 112); ; n -= 27)
                {
                  if (v24 == v115)
                  {
                    v155 = *((_DWORD *)n - 21) - *((_DWORD *)n - 20);
                    if (v151 == v155)
                    {
                      v156 = *((_BYTE *)n + 23);
                      v157 = v156 < 0;
                      if (v156 >= 0)
                        v158 = n;
                      else
                        v158 = *n;
                      v159 = v156 & 0x7F;
                      if (v157)
                        v160 = (size_t)n[1];
                      else
                        v160 = v159;
                      if (v160 >= v152)
                        v161 = v152;
                      else
                        v161 = v160;
                      v162 = memcmp(v153, v158, v161);
                      v163 = v152 < v160;
                      if (v162)
                        v163 = v162 < 0;
                      if (!v163)
                      {
LABEL_336:
                        for (ii = (unint64_t)(n - 13); ; ii = kk - 112)
                        {
LABEL_337:
                          if (v7 >= ii)
                          {
                            v5 = a2;
                            v6 = (double *)(a2 - 216);
                            if (v7 - 216 != a1)
                            {
                              v195 = (void **)(a1 + 104);
                              llvm::SmallPtrSetImplBase::MoveFrom(a1, 8, (double *)(v7 - 216));
                              *(_DWORD *)(a1 + 96) = *(_DWORD *)(v7 - 120);
                              if (*(char *)(a1 + 127) < 0)
                                operator delete(*v195);
                              v196 = *(_OWORD *)(v7 - 112);
                              *(_QWORD *)(a1 + 120) = *(_QWORD *)(v7 - 96);
                              *(_OWORD *)v195 = v196;
                              *(_BYTE *)(v7 - 89) = 0;
                              *(_BYTE *)(v7 - 112) = 0;
                              *(_BYTE *)(a1 + 128) = *(_BYTE *)(v7 - 88);
                              sub_1C614D378(a1 + 136, v7 - 80);
                            }
                            if (&v463 != (_BYTE **)(v7 - 216))
                              llvm::SmallPtrSetImplBase::MoveFrom(v7 - 216, 8, (double *)&v463);
                            *(_DWORD *)(v7 - 120) = v468;
                            v197 = (void **)(v7 - 112);
                            if (*(char *)(v7 - 89) < 0)
                              operator delete(*v197);
                            v198 = v469;
                            *(_QWORD *)(v7 - 96) = v470;
                            *(_OWORD *)v197 = v198;
                            HIBYTE(v470) = 0;
                            LOBYTE(v469) = 0;
                            *(_BYTE *)(v7 - 88) = v471;
                            sub_1C614D378(v7 - 80, (uint64_t)&v472);
                            if (v472 != v474)
                              free(v472);
                            if (SHIBYTE(v470) < 0)
                              operator delete((void *)v469);
                            if (v464 != v463)
                              free(v464);
                            goto LABEL_222;
                          }
                          v475 = v479;
                          v164 = *(_QWORD *)v7;
                          if (*(_QWORD *)(v7 + 8) == *(_QWORD *)v7)
                          {
                            v476 = v479;
                            v165 = *(unsigned int *)(v7 + 20);
                            if ((_DWORD)v165)
                              memmove(v479, *(const void **)(v7 + 8), 8 * v165);
                          }
                          else
                          {
                            v476 = *(_BYTE **)(v7 + 8);
                            *(_QWORD *)(v7 + 8) = v164;
                          }
                          v477 = *(_QWORD *)(v7 + 16);
                          v478 = *(_DWORD *)(v7 + 24);
                          *(_QWORD *)(v7 + 16) = 8;
                          *(_DWORD *)(v7 + 24) = 0;
                          v480 = *(_DWORD *)(v7 + 96);
                          v166 = *(_QWORD *)(v7 + 120);
                          __p = *(_OWORD *)(v7 + 104);
                          v482 = v166;
                          *(_QWORD *)(v7 + 112) = 0;
                          *(_QWORD *)(v7 + 120) = 0;
                          *(_QWORD *)(v7 + 104) = 0;
                          v483 = *(_BYTE *)(v7 + 128);
                          v484 = v486;
                          v485 = 0x800000000;
                          if (*(_DWORD *)(v7 + 144))
                            sub_1C614D378((uint64_t)&v484, v7 + 136);
                          if (ii != v7)
                            llvm::SmallPtrSetImplBase::MoveFrom(v7, 8, (double *)ii);
                          v167 = (void **)(v7 + 104);
                          *(_DWORD *)(v7 + 96) = *(_DWORD *)(ii + 96);
                          if (*(char *)(v7 + 127) < 0)
                            operator delete(*v167);
                          v168 = *(_OWORD *)(ii + 104);
                          *(_QWORD *)(v7 + 120) = *(_QWORD *)(ii + 120);
                          *(_OWORD *)v167 = v168;
                          *(_BYTE *)(ii + 127) = 0;
                          *(_BYTE *)(ii + 104) = 0;
                          *(_BYTE *)(v7 + 128) = *(_BYTE *)(ii + 128);
                          sub_1C614D378(v7 + 136, ii + 136);
                          if (&v475 != (_BYTE **)ii)
                            llvm::SmallPtrSetImplBase::MoveFrom(ii, 8, (double *)&v475);
                          v169 = (void **)(ii + 104);
                          *(_DWORD *)(ii + 96) = v480;
                          if (*(char *)(ii + 127) < 0)
                            operator delete(*v169);
                          v170 = __p;
                          *(_QWORD *)(ii + 120) = v482;
                          *(_OWORD *)v169 = v170;
                          HIBYTE(v482) = 0;
                          LOBYTE(__p) = 0;
                          *(_BYTE *)(ii + 128) = v483;
                          sub_1C614D378(ii + 136, (uint64_t)&v484);
                          if (v484 != v486)
                            free(v484);
                          if (SHIBYTE(v482) < 0)
                            operator delete((void *)__p);
                          if (v476 != v475)
                            free(v476);
                          v171 = v468;
                          v172 = HIDWORD(v465) - v466;
                          if (v470 >= 0)
                            v173 = HIBYTE(v470);
                          else
                            v173 = *((_QWORD *)&v469 + 1);
                          if (v470 >= 0)
                            v174 = &v469;
                          else
                            v174 = (__int128 *)v469;
                          for (jj = (_BYTE *)(v7 + 343); ; jj += 216)
                          {
                            v176 = *(_DWORD *)(jj - 31);
                            if (v171 != v176)
                            {
                              if (v171 < v176)
                                goto LABEL_383;
                              continue;
                            }
                            v177 = *(_DWORD *)(jj - 107) - *(_DWORD *)(jj - 103);
                            if (v172 == v177)
                              break;
                            if (v172 > v177)
                              goto LABEL_383;
LABEL_382:
                            ;
                          }
                          v178 = (char)*jj;
                          if (v178 >= 0)
                            v179 = jj - 23;
                          else
                            v179 = *(_BYTE **)(jj - 23);
                          if (v178 >= 0)
                            v180 = *jj & 0x7F;
                          else
                            v180 = *(_QWORD *)(jj - 15);
                          if (v180 >= v173)
                            v181 = v173;
                          else
                            v181 = v180;
                          v182 = memcmp(v174, v179, v181);
                          v183 = v173 < v180;
                          if (v182)
                            v183 = v182 < 0;
                          if (!v183)
                            goto LABEL_382;
LABEL_383:
                          v7 = (unint64_t)(jj - 127);
                          for (kk = ii - 104; ; kk -= 216)
                          {
                            v185 = *(_DWORD *)(kk - 16);
                            if (v171 != v185)
                            {
                              if (v171 >= v185)
                                goto LABEL_403;
                              continue;
                            }
                            v186 = *(_DWORD *)(kk - 92) - *(_DWORD *)(kk - 88);
                            if (v172 == v186)
                              break;
                            if (v172 <= v186)
                              goto LABEL_403;
LABEL_402:
                            ;
                          }
                          v187 = *(_BYTE *)(kk + 15);
                          v188 = v187;
                          if (v187 >= 0)
                            v189 = (const void *)(kk - 8);
                          else
                            v189 = *(const void **)(kk - 8);
                          v190 = v187 & 0x7F;
                          if (v188 >= 0)
                            v191 = v190;
                          else
                            v191 = *(_QWORD *)kk;
                          if (v191 >= v173)
                            v192 = v173;
                          else
                            v192 = v191;
                          v193 = memcmp(v174, v189, v192);
                          v194 = v173 < v191;
                          if (v193)
                            v194 = v193 < 0;
                          if (v194)
                            goto LABEL_402;
LABEL_403:
                          ;
                        }
                      }
                    }
                    else if (v151 <= v155)
                    {
                      goto LABEL_336;
                    }
                  }
                  else if (v24 >= v115)
                  {
                    goto LABEL_336;
                  }
                  v115 = *((_DWORD *)n - 56);
                }
              }
            }
            else if (v25 <= v26)
            {
              goto LABEL_224;
            }
          }
          else if (v23 >= v24)
          {
            goto LABEL_224;
          }
        }
        v463 = v467;
        v38 = *(_QWORD *)a1;
        if (*(_QWORD *)(a1 + 8) == *(_QWORD *)a1)
        {
          v464 = v467;
          v39 = *(unsigned int *)(a1 + 20);
          if ((_DWORD)v39)
            memmove(v467, *(const void **)(a1 + 8), 8 * v39);
        }
        else
        {
          v464 = *(_BYTE **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v38;
        }
        v465 = *(_QWORD *)(a1 + 16);
        v466 = *(_DWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 16) = 8;
        *(_DWORD *)(a1 + 24) = 0;
        v40 = *(_DWORD *)(a1 + 96);
        v468 = v40;
        v41 = *(_QWORD *)(a1 + 120);
        v469 = *(_OWORD *)(a1 + 104);
        v470 = v41;
        *(_QWORD *)(a1 + 112) = 0;
        *(_QWORD *)(a1 + 120) = 0;
        *(_QWORD *)(a1 + 104) = 0;
        v471 = *(_BYTE *)(a1 + 128);
        v472 = v474;
        v473 = 0x800000000;
        if (*(_DWORD *)(a1 + 144))
        {
          sub_1C614D378((uint64_t)&v472, a1 + 136);
          v40 = v468;
        }
        v42 = 0;
        v456 = (void **)(a1 + 104);
        v43 = HIDWORD(v465) - v466;
        if (v470 >= 0)
          v44 = &v469;
        else
          v44 = (__int128 *)v469;
        if (v470 >= 0)
          v45 = HIBYTE(v470) & 0x7F;
        else
          v45 = *((_QWORD *)&v469 + 1);
        while (1)
        {
          v46 = *(_DWORD *)(a1 + v42 + 312);
          if (v46 != v40)
          {
            if (v46 >= v40)
              goto LABEL_80;
            goto LABEL_79;
          }
          v47 = *(_DWORD *)(a1 + v42 + 236) - *(_DWORD *)(a1 + v42 + 240);
          if (v47 == v43)
            break;
          if (v47 <= v43)
            goto LABEL_80;
LABEL_79:
          v42 += 216;
        }
        v48 = *(char *)(a1 + v42 + 343);
        if (v48 >= 0)
          v49 = *(unsigned __int8 *)(a1 + v42 + 343);
        else
          v49 = *(_QWORD *)(a1 + v42 + 328);
        if (v48 >= 0)
          v50 = (const void *)(a1 + v42 + 320);
        else
          v50 = *(const void **)(a1 + v42 + 320);
        if (v45 >= v49)
          v51 = v49;
        else
          v51 = v45;
        v52 = memcmp(v50, v44, v51);
        v53 = v49 < v45;
        if (v52)
          v53 = v52 < 0;
        if (v53)
          goto LABEL_79;
LABEL_80:
        v54 = a1 + v42 + 216;
        v55 = a2 - 104;
        if (v42)
        {
          while (1)
          {
            v69 = *(_DWORD *)(v55 - 16);
            if (v69 == v40)
            {
              v70 = *(_DWORD *)(v55 - 92) - *(_DWORD *)(v55 - 88);
              if (v70 == v43)
              {
                v71 = *(char *)(v55 + 15);
                if (v71 >= 0)
                  v72 = *(unsigned __int8 *)(v55 + 15);
                else
                  v72 = *(_QWORD *)v55;
                if (v71 >= 0)
                  v73 = (const void *)(v55 - 8);
                else
                  v73 = *(const void **)(v55 - 8);
                if (v45 >= v72)
                  v74 = v72;
                else
                  v74 = v45;
                v75 = memcmp(v73, v44, v74);
                v76 = v72 < v45;
                if (v75)
                  v76 = v75 < 0;
                if (v76)
                {
LABEL_132:
                  v56 = v55 - 112;
                  goto LABEL_133;
                }
              }
              else if (v70 > v43)
              {
                goto LABEL_132;
              }
            }
            else if (v69 < v40)
            {
              goto LABEL_132;
            }
            v55 -= 216;
          }
        }
        v56 = v5;
        if (v54 < v5)
        {
          for (mm = a2 - 104; ; mm -= 216)
          {
            v56 = mm - 112;
            v58 = *(_DWORD *)(mm - 16);
            if (v58 == v40)
            {
              v59 = *(_DWORD *)(mm - 92) - *(_DWORD *)(mm - 88);
              if (v59 == v43)
              {
                v60 = *(char *)(mm + 15);
                if (v60 >= 0)
                  v61 = *(unsigned __int8 *)(mm + 15);
                else
                  v61 = *(_QWORD *)mm;
                if (v60 >= 0)
                  v62 = (const void *)(mm - 8);
                else
                  v62 = *(const void **)(mm - 8);
                if (v45 >= v61)
                  v63 = v61;
                else
                  v63 = v45;
                v64 = memcmp(v62, v44, v63);
                v65 = v61 >= v45;
                if (v64)
                  v65 = v64 >= 0;
                v66 = !v65 || v54 >= v56;
                if (v66)
                  break;
              }
              else if (v59 > v43 || v54 >= v56)
              {
                break;
              }
            }
            else if (v58 < v40 || v54 >= v56)
            {
              break;
            }
          }
        }
LABEL_133:
        v7 = v54;
        if (v54 >= v56)
          goto LABEL_203;
        v77 = v56;
        while (2)
        {
          v475 = v479;
          v79 = *(_QWORD *)v7;
          v78 = *(const void **)(v7 + 8);
          if (v78 == *(const void **)v7)
          {
            v476 = v479;
            v80 = *(unsigned int *)(v7 + 20);
            if ((_DWORD)v80)
              memmove(v479, v78, 8 * v80);
          }
          else
          {
            v476 = *(_BYTE **)(v7 + 8);
            *(_QWORD *)(v7 + 8) = v79;
          }
          v477 = *(_QWORD *)(v7 + 16);
          v478 = *(_DWORD *)(v7 + 24);
          *(_QWORD *)(v7 + 16) = 8;
          *(_DWORD *)(v7 + 24) = 0;
          v480 = *(_DWORD *)(v7 + 96);
          v81 = *(_QWORD *)(v7 + 120);
          __p = *(_OWORD *)(v7 + 104);
          v482 = v81;
          *(_QWORD *)(v7 + 112) = 0;
          *(_QWORD *)(v7 + 120) = 0;
          *(_QWORD *)(v7 + 104) = 0;
          v483 = *(_BYTE *)(v7 + 128);
          v484 = v486;
          v485 = 0x800000000;
          if (*(_DWORD *)(v7 + 144))
            sub_1C614D378((uint64_t)&v484, v7 + 136);
          if (v77 != v7)
            llvm::SmallPtrSetImplBase::MoveFrom(v7, 8, (double *)v77);
          v82 = (void **)(v7 + 104);
          *(_DWORD *)(v7 + 96) = *(_DWORD *)(v77 + 96);
          if (*(char *)(v7 + 127) < 0)
            operator delete(*v82);
          v83 = *(_OWORD *)(v77 + 104);
          *(_QWORD *)(v7 + 120) = *(_QWORD *)(v77 + 120);
          *(_OWORD *)v82 = v83;
          *(_BYTE *)(v77 + 127) = 0;
          *(_BYTE *)(v77 + 104) = 0;
          *(_BYTE *)(v7 + 128) = *(_BYTE *)(v77 + 128);
          sub_1C614D378(v7 + 136, v77 + 136);
          if (&v475 != (_BYTE **)v77)
            llvm::SmallPtrSetImplBase::MoveFrom(v77, 8, (double *)&v475);
          v84 = (void **)(v77 + 104);
          *(_DWORD *)(v77 + 96) = v480;
          if (*(char *)(v77 + 127) < 0)
            operator delete(*v84);
          v85 = __p;
          *(_QWORD *)(v77 + 120) = v482;
          *(_OWORD *)v84 = v85;
          HIBYTE(v482) = 0;
          LOBYTE(__p) = 0;
          *(_BYTE *)(v77 + 128) = v483;
          sub_1C614D378(v77 + 136, (uint64_t)&v484);
          if (v484 != v486)
            free(v484);
          if (SHIBYTE(v482) < 0)
            operator delete((void *)__p);
          if (v476 != v475)
            free(v476);
          v86 = v468;
          v87 = HIDWORD(v465) - v466;
          if (v470 >= 0)
            v88 = &v469;
          else
            v88 = (__int128 *)v469;
          if (v470 >= 0)
            v89 = HIBYTE(v470) & 0x7F;
          else
            v89 = *((_QWORD *)&v469 + 1);
          v90 = (unsigned __int8 *)(v7 + 343);
          while (2)
          {
            v91 = *(_DWORD *)(v90 - 31);
            if (v91 != v86)
            {
              if (v91 >= v86)
                goto LABEL_180;
LABEL_179:
              v90 += 216;
              continue;
            }
            break;
          }
          v92 = *(_DWORD *)(v90 - 107) - *(_DWORD *)(v90 - 103);
          if (v92 != v87)
          {
            if (v92 <= v87)
              goto LABEL_180;
            goto LABEL_179;
          }
          v93 = (char)*v90;
          if (v93 >= 0)
            v94 = *v90;
          else
            v94 = *(_QWORD *)(v90 - 15);
          if (v93 >= 0)
            v95 = (char *)(v90 - 23);
          else
            v95 = *(char **)(v90 - 23);
          if (v89 >= v94)
            v96 = v94;
          else
            v96 = v89;
          v97 = memcmp(v95, v88, v96);
          v98 = v94 < v89;
          if (v97)
            v98 = v97 < 0;
          if (v98)
            goto LABEL_179;
LABEL_180:
          v7 = (unint64_t)(v90 - 127);
          v99 = v77 - 104;
          while (2)
          {
            v100 = *(_DWORD *)(v99 - 16);
            if (v100 != v86)
            {
              if (v100 < v86)
                goto LABEL_200;
LABEL_199:
              v99 -= 216;
              continue;
            }
            break;
          }
          v101 = *(_DWORD *)(v99 - 92) - *(_DWORD *)(v99 - 88);
          if (v101 != v87)
          {
            if (v101 > v87)
              goto LABEL_200;
            goto LABEL_199;
          }
          v102 = *(char *)(v99 + 15);
          if (v102 >= 0)
            v103 = *(unsigned __int8 *)(v99 + 15);
          else
            v103 = *(_QWORD *)v99;
          if (v102 >= 0)
            v104 = (const void *)(v99 - 8);
          else
            v104 = *(const void **)(v99 - 8);
          if (v89 >= v103)
            v105 = v103;
          else
            v105 = v89;
          v106 = memcmp(v104, v88, v105);
          v107 = v103 < v89;
          if (v106)
            v107 = v106 < 0;
          if (!v107)
            goto LABEL_199;
LABEL_200:
          v77 = v99 - 112;
          if (v7 < v77)
            continue;
          break;
        }
LABEL_203:
        if (v7 - 216 != a1)
        {
          llvm::SmallPtrSetImplBase::MoveFrom(a1, 8, (double *)(v7 - 216));
          *(_DWORD *)(a1 + 96) = *(_DWORD *)(v7 - 120);
          if (*(char *)(a1 + 127) < 0)
            operator delete(*v456);
          v108 = *(_OWORD *)(v7 - 112);
          *(_QWORD *)(a1 + 120) = *(_QWORD *)(v7 - 96);
          *(_OWORD *)v456 = v108;
          *(_BYTE *)(v7 - 89) = 0;
          *(_BYTE *)(v7 - 112) = 0;
          *(_BYTE *)(a1 + 128) = *(_BYTE *)(v7 - 88);
          sub_1C614D378(a1 + 136, v7 - 80);
        }
        if (&v463 != (_BYTE **)(v7 - 216))
          llvm::SmallPtrSetImplBase::MoveFrom(v7 - 216, 8, (double *)&v463);
        *(_DWORD *)(v7 - 120) = v468;
        v109 = (void **)(v7 - 112);
        if (*(char *)(v7 - 89) < 0)
          operator delete(*v109);
        v110 = v469;
        *(_QWORD *)(v7 - 96) = v470;
        *(_OWORD *)v109 = v110;
        HIBYTE(v470) = 0;
        LOBYTE(v469) = 0;
        *(_BYTE *)(v7 - 88) = v471;
        sub_1C614D378(v7 - 80, (uint64_t)&v472);
        if (v472 != v474)
          free(v472);
        if (SHIBYTE(v470) < 0)
          operator delete((void *)v469);
        if (v464 != v463)
          free(v464);
        v66 = v54 >= v56;
        v5 = a2;
        v6 = (double *)(a2 - 216);
        if (!v66)
        {
LABEL_221:
          sub_1C55EE9C4(a1, v7 - 216, a3, a4 & 1);
LABEL_222:
          a4 = 0;
          continue;
        }
        v111 = sub_1C55F2618(a1, v7 - 216);
        if (!sub_1C55F2618(v7, a2))
        {
          if (v111)
            continue;
          goto LABEL_221;
        }
        a2 = v7 - 216;
        if (!v111)
          goto LABEL_2;
        return;
    }
  }
}

void sub_1C55F1128(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  char v14;
  const void *v15;
  size_t v16;
  int v17;
  size_t v18;
  const void *v19;
  size_t v20;
  int v21;
  BOOL v22;
  const void *v23;
  double v24;
  uint64_t v25;
  int v26;
  void **v27;
  __int128 v28;
  void **v29;
  void **v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  char v35;
  const void *v36;
  size_t v37;
  int v38;
  size_t v39;
  const void *v40;
  size_t v41;
  int v42;
  BOOL v43;
  const void *v44;
  double v45;
  uint64_t v46;
  int v47;
  void **v48;
  __int128 v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  char v54;
  const void *v55;
  size_t v56;
  int v57;
  size_t v58;
  const void *v59;
  size_t v60;
  int v61;
  BOOL v62;
  const void *v63;
  double v64;
  uint64_t v65;
  int v66;
  void **v67;
  __int128 v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  char v73;
  const void *v74;
  size_t v75;
  int v76;
  size_t v77;
  const void *v78;
  size_t v79;
  int v80;
  BOOL v81;
  const void *v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  void **v86;
  __int128 v87;
  uint64_t v88;
  _BYTE *v89;
  _BYTE *v90;
  int v91;
  int v92;
  int v93;
  _BYTE v94[64];
  unsigned int v95;
  void *__p[2];
  uint64_t v97;
  char v98;
  void *v99;
  uint64_t v100;
  _QWORD v101[10];

  v101[8] = *MEMORY[0x1E0C80C00];
  sub_1C55F2CF4(a1, a2, a3, a4);
  v10 = *(_DWORD *)(a5 + 96);
  v11 = *(_DWORD *)(a4 + 96);
  if (v10 == v11)
  {
    v12 = *(_DWORD *)(a5 + 20) - *(_DWORD *)(a5 + 24);
    v13 = *(_DWORD *)(a4 + 20) - *(_DWORD *)(a4 + 24);
    if (v12 == v13)
    {
      v14 = *(_BYTE *)(a4 + 127);
      if (v14 >= 0)
        v15 = (const void *)(a4 + 104);
      else
        v15 = *(const void **)(a4 + 104);
      if (v14 >= 0)
        v16 = v14 & 0x7F;
      else
        v16 = *(_QWORD *)(a4 + 112);
      v17 = *(char *)(a5 + 127);
      if (v17 >= 0)
        v18 = *(unsigned __int8 *)(a5 + 127);
      else
        v18 = *(_QWORD *)(a5 + 112);
      if (v17 >= 0)
        v19 = (const void *)(a5 + 104);
      else
        v19 = *(const void **)(a5 + 104);
      if (v16 >= v18)
        v20 = v18;
      else
        v20 = v16;
      v21 = memcmp(v19, v15, v20);
      v22 = v18 < v16;
      if (v21)
        v22 = v21 < 0;
      if (!v22)
        return;
    }
    else if (v12 <= v13)
    {
      return;
    }
  }
  else if (v10 >= v11)
  {
    return;
  }
  v89 = v94;
  v24 = *(double *)a4;
  v23 = *(const void **)(a4 + 8);
  if (v23 == *(const void **)a4)
  {
    v90 = v94;
    v25 = *(unsigned int *)(a4 + 20);
    if ((_DWORD)v25)
      memmove(v94, v23, 8 * v25);
  }
  else
  {
    v90 = *(_BYTE **)(a4 + 8);
    *(double *)(a4 + 8) = v24;
    LODWORD(v25) = *(_DWORD *)(a4 + 20);
  }
  v91 = *(_DWORD *)(a4 + 16);
  v92 = v25;
  v26 = *(_DWORD *)(a4 + 24);
  *(_QWORD *)(a4 + 16) = 8;
  *(_DWORD *)(a4 + 24) = 0;
  v93 = v26;
  v95 = v11;
  *(_OWORD *)__p = *(_OWORD *)(a4 + 104);
  v97 = *(_QWORD *)(a4 + 120);
  *(_QWORD *)(a4 + 104) = 0;
  *(_QWORD *)(a4 + 112) = 0;
  *(_QWORD *)(a4 + 120) = 0;
  v98 = *(_BYTE *)(a4 + 128);
  v99 = v101;
  v100 = 0x800000000;
  if (*(_DWORD *)(a4 + 144))
    sub_1C614D378((uint64_t)&v99, a4 + 136);
  v27 = (void **)(a4 + 104);
  if (a5 != a4)
    llvm::SmallPtrSetImplBase::MoveFrom(a4, 8, (double *)a5);
  *(_DWORD *)(a4 + 96) = *(_DWORD *)(a5 + 96);
  if (*(char *)(a4 + 127) < 0)
    operator delete(*v27);
  v28 = *(_OWORD *)(a5 + 104);
  *(_QWORD *)(a4 + 120) = *(_QWORD *)(a5 + 120);
  *(_OWORD *)v27 = v28;
  *(_BYTE *)(a5 + 127) = 0;
  *(_BYTE *)(a5 + 104) = 0;
  *(_BYTE *)(a4 + 128) = *(_BYTE *)(a5 + 128);
  v88 = a4 + 136;
  sub_1C614D378(a4 + 136, a5 + 136);
  if (&v89 != (_BYTE **)a5)
    llvm::SmallPtrSetImplBase::MoveFrom(a5, 8, (double *)&v89);
  v29 = (void **)(a5 + 104);
  *(_DWORD *)(a5 + 96) = v95;
  if (*(char *)(a5 + 127) < 0)
    operator delete(*v29);
  *(_OWORD *)v29 = *(_OWORD *)__p;
  *(_QWORD *)(a5 + 120) = v97;
  HIBYTE(v97) = 0;
  LOBYTE(__p[0]) = 0;
  *(_BYTE *)(a5 + 128) = v98;
  sub_1C614D378(a5 + 136, (uint64_t)&v99);
  if (v99 != v101)
    free(v99);
  v30 = (void **)(a4 + 104);
  if (SHIBYTE(v97) < 0)
    operator delete(__p[0]);
  if (v90 != v89)
    free(v90);
  v31 = *(_DWORD *)(a4 + 96);
  v32 = *(_DWORD *)(a3 + 96);
  if (v31 == v32)
  {
    v33 = *(_DWORD *)(a4 + 20) - *(_DWORD *)(a4 + 24);
    v34 = *(_DWORD *)(a3 + 20) - *(_DWORD *)(a3 + 24);
    if (v33 == v34)
    {
      v35 = *(_BYTE *)(a3 + 127);
      if (v35 >= 0)
        v36 = (const void *)(a3 + 104);
      else
        v36 = *(const void **)(a3 + 104);
      if (v35 >= 0)
        v37 = v35 & 0x7F;
      else
        v37 = *(_QWORD *)(a3 + 112);
      v38 = *(char *)(a4 + 127);
      if (v38 >= 0)
        v39 = *(unsigned __int8 *)(a4 + 127);
      else
        v39 = *(_QWORD *)(a4 + 112);
      if (v38 >= 0)
        v40 = (const void *)(a4 + 104);
      else
        v40 = *(const void **)(a4 + 104);
      if (v37 >= v39)
        v41 = v39;
      else
        v41 = v37;
      v42 = memcmp(v40, v36, v41);
      v43 = v39 < v37;
      if (v42)
        v43 = v42 < 0;
      if (!v43)
        return;
    }
    else if (v33 <= v34)
    {
      return;
    }
  }
  else if (v31 >= v32)
  {
    return;
  }
  v89 = v94;
  v45 = *(double *)a3;
  v44 = *(const void **)(a3 + 8);
  if (v44 == *(const void **)a3)
  {
    v90 = v94;
    v46 = *(unsigned int *)(a3 + 20);
    if ((_DWORD)v46)
      memmove(v94, v44, 8 * v46);
  }
  else
  {
    v90 = *(_BYTE **)(a3 + 8);
    *(double *)(a3 + 8) = v45;
    LODWORD(v46) = *(_DWORD *)(a3 + 20);
  }
  v91 = *(_DWORD *)(a3 + 16);
  v92 = v46;
  v47 = *(_DWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 16) = 8;
  *(_DWORD *)(a3 + 24) = 0;
  v93 = v47;
  v95 = v32;
  *(_OWORD *)__p = *(_OWORD *)(a3 + 104);
  v97 = *(_QWORD *)(a3 + 120);
  *(_QWORD *)(a3 + 104) = 0;
  *(_QWORD *)(a3 + 112) = 0;
  *(_QWORD *)(a3 + 120) = 0;
  v98 = *(_BYTE *)(a3 + 128);
  v99 = v101;
  v100 = 0x800000000;
  if (*(_DWORD *)(a3 + 144))
    sub_1C614D378((uint64_t)&v99, a3 + 136);
  v48 = (void **)(a3 + 104);
  if (a4 != a3)
    llvm::SmallPtrSetImplBase::MoveFrom(a3, 8, (double *)a4);
  *(_DWORD *)(a3 + 96) = *(_DWORD *)(a4 + 96);
  if (*(char *)(a3 + 127) < 0)
    operator delete(*v48);
  v49 = *(_OWORD *)v30;
  *(_QWORD *)(a3 + 120) = *(_QWORD *)(a4 + 120);
  *(_OWORD *)v48 = v49;
  *(_BYTE *)(a4 + 127) = 0;
  *(_BYTE *)(a4 + 104) = 0;
  *(_BYTE *)(a3 + 128) = *(_BYTE *)(a4 + 128);
  sub_1C614D378(a3 + 136, v88);
  if (&v89 != (_BYTE **)a4)
    llvm::SmallPtrSetImplBase::MoveFrom(a4, 8, (double *)&v89);
  *(_DWORD *)(a4 + 96) = v95;
  if (*(char *)(a4 + 127) < 0)
    operator delete(*v30);
  *(_OWORD *)v30 = *(_OWORD *)__p;
  *(_QWORD *)(a4 + 120) = v97;
  HIBYTE(v97) = 0;
  LOBYTE(__p[0]) = 0;
  *(_BYTE *)(a4 + 128) = v98;
  sub_1C614D378(v88, (uint64_t)&v99);
  if (v99 != v101)
    free(v99);
  if (SHIBYTE(v97) < 0)
    operator delete(__p[0]);
  if (v90 != v89)
    free(v90);
  v50 = *(_DWORD *)(a3 + 96);
  v51 = *(_DWORD *)(a2 + 96);
  if (v50 == v51)
  {
    v52 = *(_DWORD *)(a3 + 20) - *(_DWORD *)(a3 + 24);
    v53 = *(_DWORD *)(a2 + 20) - *(_DWORD *)(a2 + 24);
    if (v52 == v53)
    {
      v54 = *(_BYTE *)(a2 + 127);
      if (v54 >= 0)
        v55 = (const void *)(a2 + 104);
      else
        v55 = *(const void **)(a2 + 104);
      if (v54 >= 0)
        v56 = v54 & 0x7F;
      else
        v56 = *(_QWORD *)(a2 + 112);
      v57 = *(char *)(a3 + 127);
      if (v57 >= 0)
        v58 = *(unsigned __int8 *)(a3 + 127);
      else
        v58 = *(_QWORD *)(a3 + 112);
      if (v57 >= 0)
        v59 = (const void *)(a3 + 104);
      else
        v59 = *(const void **)(a3 + 104);
      if (v56 >= v58)
        v60 = v58;
      else
        v60 = v56;
      v61 = memcmp(v59, v55, v60);
      v62 = v58 < v56;
      if (v61)
        v62 = v61 < 0;
      if (!v62)
        return;
    }
    else if (v52 <= v53)
    {
      return;
    }
  }
  else if (v50 >= v51)
  {
    return;
  }
  v89 = v94;
  v64 = *(double *)a2;
  v63 = *(const void **)(a2 + 8);
  if (v63 == *(const void **)a2)
  {
    v90 = v94;
    v65 = *(unsigned int *)(a2 + 20);
    if ((_DWORD)v65)
      memmove(v94, v63, 8 * v65);
  }
  else
  {
    v90 = *(_BYTE **)(a2 + 8);
    *(double *)(a2 + 8) = v64;
    LODWORD(v65) = *(_DWORD *)(a2 + 20);
  }
  v91 = *(_DWORD *)(a2 + 16);
  v92 = v65;
  v66 = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 16) = 8;
  *(_DWORD *)(a2 + 24) = 0;
  v93 = v66;
  v95 = v51;
  *(_OWORD *)__p = *(_OWORD *)(a2 + 104);
  v97 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  v98 = *(_BYTE *)(a2 + 128);
  v99 = v101;
  v100 = 0x800000000;
  if (*(_DWORD *)(a2 + 144))
    sub_1C614D378((uint64_t)&v99, a2 + 136);
  v67 = (void **)(a2 + 104);
  if (a3 != a2)
    llvm::SmallPtrSetImplBase::MoveFrom(a2, 8, (double *)a3);
  *(_DWORD *)(a2 + 96) = *(_DWORD *)(a3 + 96);
  if (*(char *)(a2 + 127) < 0)
    operator delete(*v67);
  v68 = *(_OWORD *)v48;
  *(_QWORD *)(a2 + 120) = *(_QWORD *)(a3 + 120);
  *(_OWORD *)v67 = v68;
  *(_BYTE *)(a3 + 127) = 0;
  *(_BYTE *)(a3 + 104) = 0;
  *(_BYTE *)(a2 + 128) = *(_BYTE *)(a3 + 128);
  sub_1C614D378(a2 + 136, a3 + 136);
  if (&v89 != (_BYTE **)a3)
    llvm::SmallPtrSetImplBase::MoveFrom(a3, 8, (double *)&v89);
  *(_DWORD *)(a3 + 96) = v95;
  if (*(char *)(a3 + 127) < 0)
    operator delete(*v48);
  *(_OWORD *)v48 = *(_OWORD *)__p;
  *(_QWORD *)(a3 + 120) = v97;
  HIBYTE(v97) = 0;
  LOBYTE(__p[0]) = 0;
  *(_BYTE *)(a3 + 128) = v98;
  sub_1C614D378(a3 + 136, (uint64_t)&v99);
  if (v99 != v101)
    free(v99);
  if (SHIBYTE(v97) < 0)
    operator delete(__p[0]);
  if (v90 != v89)
    free(v90);
  v69 = *(_DWORD *)(a2 + 96);
  v70 = *(_DWORD *)(a1 + 96);
  if (v69 != v70)
  {
    if (v69 >= v70)
      return;
    goto LABEL_157;
  }
  v71 = *(_DWORD *)(a2 + 20) - *(_DWORD *)(a2 + 24);
  v72 = *(_DWORD *)(a1 + 20) - *(_DWORD *)(a1 + 24);
  if (v71 != v72)
  {
    if (v71 <= v72)
      return;
    goto LABEL_157;
  }
  v73 = *(_BYTE *)(a1 + 127);
  if (v73 >= 0)
    v74 = (const void *)(a1 + 104);
  else
    v74 = *(const void **)(a1 + 104);
  if (v73 >= 0)
    v75 = v73 & 0x7F;
  else
    v75 = *(_QWORD *)(a1 + 112);
  v76 = *(char *)(a2 + 127);
  if (v76 >= 0)
    v77 = *(unsigned __int8 *)(a2 + 127);
  else
    v77 = *(_QWORD *)(a2 + 112);
  if (v76 >= 0)
    v78 = (const void *)(a2 + 104);
  else
    v78 = *(const void **)(a2 + 104);
  if (v75 >= v77)
    v79 = v77;
  else
    v79 = v75;
  v80 = memcmp(v78, v74, v79);
  v81 = v77 < v75;
  if (v80)
    v81 = v80 < 0;
  if (v81)
  {
LABEL_157:
    v89 = v94;
    v83 = *(_QWORD *)a1;
    v82 = *(const void **)(a1 + 8);
    if (v82 == *(const void **)a1)
    {
      v90 = v94;
      v84 = *(unsigned int *)(a1 + 20);
      if ((_DWORD)v84)
        memmove(v94, v82, 8 * v84);
    }
    else
    {
      v90 = *(_BYTE **)(a1 + 8);
      *(_QWORD *)(a1 + 8) = v83;
      LODWORD(v84) = *(_DWORD *)(a1 + 20);
    }
    v91 = *(_DWORD *)(a1 + 16);
    v92 = v84;
    v85 = *(_DWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 16) = 8;
    *(_DWORD *)(a1 + 24) = 0;
    v93 = v85;
    v95 = v70;
    *(_OWORD *)__p = *(_OWORD *)(a1 + 104);
    v97 = *(_QWORD *)(a1 + 120);
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_QWORD *)(a1 + 120) = 0;
    v98 = *(_BYTE *)(a1 + 128);
    v99 = v101;
    v100 = 0x800000000;
    if (*(_DWORD *)(a1 + 144))
      sub_1C614D378((uint64_t)&v99, a1 + 136);
    if (a2 != a1)
      llvm::SmallPtrSetImplBase::MoveFrom(a1, 8, (double *)a2);
    v86 = (void **)(a1 + 104);
    *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
    if (*(char *)(a1 + 127) < 0)
      operator delete(*v86);
    v87 = *(_OWORD *)v67;
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_OWORD *)v86 = v87;
    *(_BYTE *)(a2 + 127) = 0;
    *(_BYTE *)(a2 + 104) = 0;
    *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
    sub_1C614D378(a1 + 136, a2 + 136);
    if (&v89 != (_BYTE **)a2)
      llvm::SmallPtrSetImplBase::MoveFrom(a2, 8, (double *)&v89);
    *(_DWORD *)(a2 + 96) = v95;
    if (*(char *)(a2 + 127) < 0)
      operator delete(*v67);
    *(_OWORD *)v67 = *(_OWORD *)__p;
    *(_QWORD *)(a2 + 120) = v97;
    HIBYTE(v97) = 0;
    LOBYTE(__p[0]) = 0;
    *(_BYTE *)(a2 + 128) = v98;
    sub_1C614D378(a2 + 136, (uint64_t)&v99);
    if (v99 != v101)
      free(v99);
    if (SHIBYTE(v97) < 0)
      operator delete(__p[0]);
    if (v90 != v89)
      free(v90);
  }
}

void sub_1C55F1AA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  char v10;
  const void *v11;
  size_t v12;
  int v13;
  size_t v14;
  const void *v15;
  size_t v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  unsigned int v20;
  unsigned int v21;
  char v22;
  const void *v23;
  size_t v24;
  int v25;
  size_t v26;
  const void *v27;
  size_t v28;
  int v29;
  BOOL v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  char v34;
  const void *v35;
  size_t v36;
  int v37;
  size_t v38;
  const void *v39;
  size_t v40;
  int v41;
  BOOL v42;
  const void *v43;
  double v44;
  uint64_t v45;
  int v46;
  void **v47;
  __int128 v48;
  void **v49;
  unsigned int v50;
  unsigned int v51;
  unsigned int v52;
  unsigned int v53;
  char v54;
  const void *v55;
  size_t v56;
  int v57;
  size_t v58;
  const void *v59;
  size_t v60;
  int v61;
  BOOL v62;
  const void *v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  void **v67;
  __int128 v68;
  void **v69;
  void *v70;
  const void *v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  void **v75;
  void **v76;
  __int128 v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  char v82;
  BOOL v83;
  const void *v84;
  size_t v85;
  size_t v86;
  int v87;
  size_t v88;
  const void *v89;
  size_t v90;
  int v91;
  BOOL v92;
  const void *v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  void **v97;
  __int128 v98;
  const void *v99;
  double v100;
  uint64_t v101;
  int v102;
  __int128 v103;
  void **v104;
  _BYTE *v105;
  _BYTE *v106;
  int v107;
  int v108;
  int v109;
  _BYTE v110[64];
  unsigned int v111;
  void *__p[2];
  uint64_t v113;
  char v114;
  void *v115;
  uint64_t v116;
  _QWORD v117[10];

  v117[8] = *MEMORY[0x1E0C80C00];
  v6 = *(_DWORD *)(a2 + 96);
  v7 = *(_DWORD *)(a1 + 96);
  if (v6 != v7)
  {
    if (v6 < v7)
      goto LABEL_47;
    goto LABEL_23;
  }
  v8 = *(_DWORD *)(a2 + 20) - *(_DWORD *)(a2 + 24);
  v9 = *(_DWORD *)(a1 + 20) - *(_DWORD *)(a1 + 24);
  if (v8 != v9)
  {
    if (v8 > v9)
      goto LABEL_47;
LABEL_23:
    v19 = *(_DWORD *)(a3 + 96);
    if (v19 == v6)
    {
      v20 = *(_DWORD *)(a3 + 20) - *(_DWORD *)(a3 + 24);
      v21 = *(_DWORD *)(a2 + 20) - *(_DWORD *)(a2 + 24);
      if (v20 == v21)
      {
        v22 = *(_BYTE *)(a2 + 127);
        if (v22 >= 0)
          v23 = (const void *)(a2 + 104);
        else
          v23 = *(const void **)(a2 + 104);
        if (v22 >= 0)
          v24 = v22 & 0x7F;
        else
          v24 = *(_QWORD *)(a2 + 112);
        v25 = *(char *)(a3 + 127);
        if (v25 >= 0)
          v26 = *(unsigned __int8 *)(a3 + 127);
        else
          v26 = *(_QWORD *)(a3 + 112);
        if (v25 >= 0)
          v27 = (const void *)(a3 + 104);
        else
          v27 = *(const void **)(a3 + 104);
        if (v24 >= v26)
          v28 = v26;
        else
          v28 = v24;
        v29 = memcmp(v27, v23, v28);
        v30 = v26 < v24;
        if (v29)
          v30 = v29 < 0;
        if (!v30)
          return;
      }
      else if (v20 <= v21)
      {
        return;
      }
    }
    else if (v19 >= v6)
    {
      return;
    }
    v105 = v110;
    v44 = *(double *)a2;
    v43 = *(const void **)(a2 + 8);
    if (v43 == *(const void **)a2)
    {
      v106 = v110;
      v45 = *(unsigned int *)(a2 + 20);
      if ((_DWORD)v45)
        memmove(v110, v43, 8 * v45);
    }
    else
    {
      v106 = *(_BYTE **)(a2 + 8);
      *(double *)(a2 + 8) = v44;
      LODWORD(v45) = *(_DWORD *)(a2 + 20);
    }
    v107 = *(_DWORD *)(a2 + 16);
    v108 = v45;
    v46 = *(_DWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 16) = 8;
    *(_DWORD *)(a2 + 24) = 0;
    v109 = v46;
    v111 = v6;
    *(_OWORD *)__p = *(_OWORD *)(a2 + 104);
    v113 = *(_QWORD *)(a2 + 120);
    *(_QWORD *)(a2 + 104) = 0;
    *(_QWORD *)(a2 + 112) = 0;
    *(_QWORD *)(a2 + 120) = 0;
    v114 = *(_BYTE *)(a2 + 128);
    v115 = v117;
    v116 = 0x800000000;
    if (*(_DWORD *)(a2 + 144))
      sub_1C614D378((uint64_t)&v115, a2 + 136);
    v47 = (void **)(a2 + 104);
    if (a3 != a2)
      llvm::SmallPtrSetImplBase::MoveFrom(a2, 8, (double *)a3);
    *(_DWORD *)(a2 + 96) = *(_DWORD *)(a3 + 96);
    if (*(char *)(a2 + 127) < 0)
      operator delete(*v47);
    v48 = *(_OWORD *)(a3 + 104);
    *(_QWORD *)(a2 + 120) = *(_QWORD *)(a3 + 120);
    *(_OWORD *)v47 = v48;
    *(_BYTE *)(a3 + 127) = 0;
    *(_BYTE *)(a3 + 104) = 0;
    *(_BYTE *)(a2 + 128) = *(_BYTE *)(a3 + 128);
    sub_1C614D378(a2 + 136, a3 + 136);
    if (&v105 != (_BYTE **)a3)
      llvm::SmallPtrSetImplBase::MoveFrom(a3, 8, (double *)&v105);
    v49 = (void **)(a3 + 104);
    *(_DWORD *)(a3 + 96) = v111;
    if (*(char *)(a3 + 127) < 0)
      operator delete(*v49);
    *(_OWORD *)v49 = *(_OWORD *)__p;
    *(_QWORD *)(a3 + 120) = v113;
    HIBYTE(v113) = 0;
    LOBYTE(__p[0]) = 0;
    *(_BYTE *)(a3 + 128) = v114;
    sub_1C614D378(a3 + 136, (uint64_t)&v115);
    if (v115 != v117)
      free(v115);
    if (SHIBYTE(v113) < 0)
      operator delete(__p[0]);
    if (v106 != v105)
      free(v106);
    v50 = *(_DWORD *)(a2 + 96);
    v51 = *(_DWORD *)(a1 + 96);
    if (v50 == v51)
    {
      v52 = *(_DWORD *)(a2 + 20) - *(_DWORD *)(a2 + 24);
      v53 = *(_DWORD *)(a1 + 20) - *(_DWORD *)(a1 + 24);
      if (v52 == v53)
      {
        v54 = *(_BYTE *)(a1 + 127);
        if (v54 >= 0)
          v55 = (const void *)(a1 + 104);
        else
          v55 = *(const void **)(a1 + 104);
        if (v54 >= 0)
          v56 = v54 & 0x7F;
        else
          v56 = *(_QWORD *)(a1 + 112);
        v57 = *(char *)(a2 + 127);
        if (v57 >= 0)
          v58 = *(unsigned __int8 *)(a2 + 127);
        else
          v58 = *(_QWORD *)(a2 + 112);
        if (v57 >= 0)
          v59 = (const void *)(a2 + 104);
        else
          v59 = *(const void **)(a2 + 104);
        if (v56 >= v58)
          v60 = v58;
        else
          v60 = v56;
        v61 = memcmp(v59, v55, v60);
        v62 = v58 < v56;
        if (v61)
          v62 = v61 < 0;
        if (!v62)
          return;
      }
      else if (v52 <= v53)
      {
        return;
      }
    }
    else if (v50 >= v51)
    {
      return;
    }
    v105 = v110;
    v94 = *(_QWORD *)a1;
    v93 = *(const void **)(a1 + 8);
    if (v93 == *(const void **)a1)
    {
      v106 = v110;
      v95 = *(unsigned int *)(a1 + 20);
      if ((_DWORD)v95)
        memmove(v110, v93, 8 * v95);
    }
    else
    {
      v106 = *(_BYTE **)(a1 + 8);
      *(_QWORD *)(a1 + 8) = v94;
      LODWORD(v95) = *(_DWORD *)(a1 + 20);
    }
    v107 = *(_DWORD *)(a1 + 16);
    v108 = v95;
    v96 = *(_DWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 16) = 8;
    *(_DWORD *)(a1 + 24) = 0;
    v109 = v96;
    v111 = v51;
    *(_OWORD *)__p = *(_OWORD *)(a1 + 104);
    v113 = *(_QWORD *)(a1 + 120);
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_QWORD *)(a1 + 120) = 0;
    v114 = *(_BYTE *)(a1 + 128);
    v115 = v117;
    v116 = 0x800000000;
    if (*(_DWORD *)(a1 + 144))
      sub_1C614D378((uint64_t)&v115, a1 + 136);
    if (a2 != a1)
      llvm::SmallPtrSetImplBase::MoveFrom(a1, 8, (double *)a2);
    v97 = (void **)(a1 + 104);
    *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
    if (*(char *)(a1 + 127) < 0)
      operator delete(*v97);
    v98 = *(_OWORD *)v47;
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_OWORD *)v97 = v98;
    *(_BYTE *)(a2 + 127) = 0;
    *(_BYTE *)(a2 + 104) = 0;
    *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
    sub_1C614D378(a1 + 136, a2 + 136);
    if (&v105 != (_BYTE **)a2)
      llvm::SmallPtrSetImplBase::MoveFrom(a2, 8, (double *)&v105);
    *(_DWORD *)(a2 + 96) = v111;
    if (*(char *)(a2 + 127) < 0)
      operator delete(*v47);
    *(_OWORD *)v47 = *(_OWORD *)__p;
    *(_QWORD *)(a2 + 120) = v113;
    HIBYTE(v113) = 0;
    LOBYTE(__p[0]) = 0;
    *(_BYTE *)(a2 + 128) = v114;
    sub_1C614D378(a2 + 136, (uint64_t)&v115);
    v70 = v115;
    if (v115 == v117)
      goto LABEL_126;
LABEL_125:
    free(v70);
LABEL_126:
    if (SHIBYTE(v113) < 0)
      operator delete(__p[0]);
    if (v106 != v105)
      free(v106);
    return;
  }
  v10 = *(_BYTE *)(a1 + 127);
  if (v10 >= 0)
    v11 = (const void *)(a1 + 104);
  else
    v11 = *(const void **)(a1 + 104);
  if (v10 >= 0)
    v12 = v10 & 0x7F;
  else
    v12 = *(_QWORD *)(a1 + 112);
  v13 = *(char *)(a2 + 127);
  if (v13 >= 0)
    v14 = *(unsigned __int8 *)(a2 + 127);
  else
    v14 = *(_QWORD *)(a2 + 112);
  if (v13 >= 0)
    v15 = (const void *)(a2 + 104);
  else
    v15 = *(const void **)(a2 + 104);
  if (v12 >= v14)
    v16 = v14;
  else
    v16 = v12;
  v17 = memcmp(v15, v11, v16);
  v18 = v14 < v12;
  if (v17)
    v18 = v17 < 0;
  if (!v18)
    goto LABEL_23;
LABEL_47:
  v31 = *(_DWORD *)(a3 + 96);
  if (v31 != v6)
  {
    if (v31 >= v6)
      goto LABEL_133;
    goto LABEL_111;
  }
  v32 = *(_DWORD *)(a3 + 20) - *(_DWORD *)(a3 + 24);
  v33 = *(_DWORD *)(a2 + 20) - *(_DWORD *)(a2 + 24);
  if (v32 != v33)
  {
    if (v32 <= v33)
      goto LABEL_133;
    goto LABEL_111;
  }
  v34 = *(_BYTE *)(a2 + 127);
  if (v34 >= 0)
    v35 = (const void *)(a2 + 104);
  else
    v35 = *(const void **)(a2 + 104);
  if (v34 >= 0)
    v36 = v34 & 0x7F;
  else
    v36 = *(_QWORD *)(a2 + 112);
  v37 = *(char *)(a3 + 127);
  if (v37 >= 0)
    v38 = *(unsigned __int8 *)(a3 + 127);
  else
    v38 = *(_QWORD *)(a3 + 112);
  if (v37 >= 0)
    v39 = (const void *)(a3 + 104);
  else
    v39 = *(const void **)(a3 + 104);
  if (v36 >= v38)
    v40 = v38;
  else
    v40 = v36;
  v41 = memcmp(v39, v35, v40);
  v42 = v38 < v36;
  if (v41)
    v42 = v41 < 0;
  if (v42)
  {
LABEL_111:
    v105 = v110;
    v64 = *(_QWORD *)a1;
    v63 = *(const void **)(a1 + 8);
    if (v63 == *(const void **)a1)
    {
      v106 = v110;
      v65 = *(unsigned int *)(a1 + 20);
      if ((_DWORD)v65)
        memmove(v110, v63, 8 * v65);
    }
    else
    {
      v106 = *(_BYTE **)(a1 + 8);
      *(_QWORD *)(a1 + 8) = v64;
      LODWORD(v65) = *(_DWORD *)(a1 + 20);
    }
    v107 = *(_DWORD *)(a1 + 16);
    v108 = v65;
    v66 = *(_DWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 16) = 8;
    *(_DWORD *)(a1 + 24) = 0;
    v109 = v66;
    v111 = v7;
    *(_OWORD *)__p = *(_OWORD *)(a1 + 104);
    v113 = *(_QWORD *)(a1 + 120);
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_QWORD *)(a1 + 120) = 0;
    v114 = *(_BYTE *)(a1 + 128);
    v115 = v117;
    v116 = 0x800000000;
    if (*(_DWORD *)(a1 + 144))
      sub_1C614D378((uint64_t)&v115, a1 + 136);
    if (a3 != a1)
      llvm::SmallPtrSetImplBase::MoveFrom(a1, 8, (double *)a3);
    v67 = (void **)(a1 + 104);
    *(_DWORD *)(a1 + 96) = *(_DWORD *)(a3 + 96);
    if (*(char *)(a1 + 127) < 0)
      operator delete(*v67);
    v68 = *(_OWORD *)(a3 + 104);
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a3 + 120);
    *(_OWORD *)v67 = v68;
    *(_BYTE *)(a3 + 127) = 0;
    *(_BYTE *)(a3 + 104) = 0;
    *(_BYTE *)(a1 + 128) = *(_BYTE *)(a3 + 128);
    sub_1C614D378(a1 + 136, a3 + 136);
    if (&v105 != (_BYTE **)a3)
      llvm::SmallPtrSetImplBase::MoveFrom(a3, 8, (double *)&v105);
    v69 = (void **)(a3 + 104);
    *(_DWORD *)(a3 + 96) = v111;
    if (*(char *)(a3 + 127) < 0)
      operator delete(*v69);
    *(_OWORD *)v69 = *(_OWORD *)__p;
    *(_QWORD *)(a3 + 120) = v113;
    HIBYTE(v113) = 0;
    LOBYTE(__p[0]) = 0;
    *(_BYTE *)(a3 + 128) = v114;
    sub_1C614D378(a3 + 136, (uint64_t)&v115);
    v70 = v115;
    if (v115 == v117)
      goto LABEL_126;
    goto LABEL_125;
  }
LABEL_133:
  v105 = v110;
  v72 = *(_QWORD *)a1;
  v71 = *(const void **)(a1 + 8);
  if (v71 == *(const void **)a1)
  {
    v106 = v110;
    v73 = *(unsigned int *)(a1 + 20);
    if ((_DWORD)v73)
      memmove(v110, v71, 8 * v73);
  }
  else
  {
    v106 = *(_BYTE **)(a1 + 8);
    *(_QWORD *)(a1 + 8) = v72;
    LODWORD(v73) = *(_DWORD *)(a1 + 20);
  }
  v107 = *(_DWORD *)(a1 + 16);
  v108 = v73;
  v74 = *(_DWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 24) = 0;
  v109 = v74;
  v111 = v7;
  *(_OWORD *)__p = *(_OWORD *)(a1 + 104);
  v113 = *(_QWORD *)(a1 + 120);
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  v114 = *(_BYTE *)(a1 + 128);
  v115 = v117;
  v116 = 0x800000000;
  if (*(_DWORD *)(a1 + 144))
    sub_1C614D378((uint64_t)&v115, a1 + 136);
  if (a2 != a1)
    llvm::SmallPtrSetImplBase::MoveFrom(a1, 8, (double *)a2);
  v75 = (void **)(a1 + 104);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
  if (*(char *)(a1 + 127) < 0)
    operator delete(*v75);
  v76 = (void **)(a2 + 104);
  v77 = *(_OWORD *)(a2 + 104);
  *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
  *(_OWORD *)v75 = v77;
  *(_BYTE *)(a2 + 127) = 0;
  *(_BYTE *)(a2 + 104) = 0;
  *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
  sub_1C614D378(a1 + 136, a2 + 136);
  if (&v105 != (_BYTE **)a2)
    llvm::SmallPtrSetImplBase::MoveFrom(a2, 8, (double *)&v105);
  *(_DWORD *)(a2 + 96) = v111;
  if (*(char *)(a2 + 127) < 0)
    operator delete(*v76);
  *(_OWORD *)v76 = *(_OWORD *)__p;
  *(_QWORD *)(a2 + 120) = v113;
  HIBYTE(v113) = 0;
  LOBYTE(__p[0]) = 0;
  *(_BYTE *)(a2 + 128) = v114;
  sub_1C614D378(a2 + 136, (uint64_t)&v115);
  if (v115 != v117)
    free(v115);
  if (SHIBYTE(v113) < 0)
    operator delete(__p[0]);
  if (v106 != v105)
    free(v106);
  v78 = *(_DWORD *)(a3 + 96);
  v79 = *(_DWORD *)(a2 + 96);
  if (v78 != v79)
  {
    if (v78 >= v79)
      return;
    goto LABEL_192;
  }
  v80 = *(_DWORD *)(a3 + 20) - *(_DWORD *)(a3 + 24);
  v81 = *(_DWORD *)(a2 + 20) - *(_DWORD *)(a2 + 24);
  if (v80 != v81)
  {
    if (v80 <= v81)
      return;
LABEL_192:
    v105 = v110;
    v100 = *(double *)a2;
    v99 = *(const void **)(a2 + 8);
    if (v99 == *(const void **)a2)
    {
      v106 = v110;
      v101 = *(unsigned int *)(a2 + 20);
      if ((_DWORD)v101)
        memmove(v110, v99, 8 * v101);
    }
    else
    {
      v106 = *(_BYTE **)(a2 + 8);
      *(double *)(a2 + 8) = v100;
      LODWORD(v101) = *(_DWORD *)(a2 + 20);
    }
    v107 = *(_DWORD *)(a2 + 16);
    v108 = v101;
    v102 = *(_DWORD *)(a2 + 24);
    *(_QWORD *)(a2 + 16) = 8;
    *(_DWORD *)(a2 + 24) = 0;
    v109 = v102;
    v111 = v79;
    *(_OWORD *)__p = *(_OWORD *)v76;
    v113 = *(_QWORD *)(a2 + 120);
    *v76 = 0;
    *(_QWORD *)(a2 + 112) = 0;
    *(_QWORD *)(a2 + 120) = 0;
    v114 = *(_BYTE *)(a2 + 128);
    v115 = v117;
    v116 = 0x800000000;
    if (*(_DWORD *)(a2 + 144))
      sub_1C614D378((uint64_t)&v115, a2 + 136);
    if (a3 != a2)
      llvm::SmallPtrSetImplBase::MoveFrom(a2, 8, (double *)a3);
    *(_DWORD *)(a2 + 96) = *(_DWORD *)(a3 + 96);
    if (*(char *)(a2 + 127) < 0)
      operator delete(*v76);
    v103 = *(_OWORD *)(a3 + 104);
    *(_QWORD *)(a2 + 120) = *(_QWORD *)(a3 + 120);
    *(_OWORD *)v76 = v103;
    *(_BYTE *)(a3 + 127) = 0;
    *(_BYTE *)(a3 + 104) = 0;
    *(_BYTE *)(a2 + 128) = *(_BYTE *)(a3 + 128);
    sub_1C614D378(a2 + 136, a3 + 136);
    if (&v105 != (_BYTE **)a3)
      llvm::SmallPtrSetImplBase::MoveFrom(a3, 8, (double *)&v105);
    v104 = (void **)(a3 + 104);
    *(_DWORD *)(a3 + 96) = v111;
    if (*(char *)(a3 + 127) < 0)
      operator delete(*v104);
    *(_OWORD *)v104 = *(_OWORD *)__p;
    *(_QWORD *)(a3 + 120) = v113;
    HIBYTE(v113) = 0;
    LOBYTE(__p[0]) = 0;
    *(_BYTE *)(a3 + 128) = v114;
    sub_1C614D378(a3 + 136, (uint64_t)&v115);
    v70 = v115;
    if (v115 == v117)
      goto LABEL_126;
    goto LABEL_125;
  }
  v82 = *(_BYTE *)(a2 + 127);
  v83 = v82 < 0;
  if (v82 >= 0)
    v84 = (const void *)(a2 + 104);
  else
    v84 = *(const void **)(a2 + 104);
  v85 = v82 & 0x7F;
  if (v83)
    v86 = *(_QWORD *)(a2 + 112);
  else
    v86 = v85;
  v87 = *(char *)(a3 + 127);
  if (v87 >= 0)
    v88 = *(unsigned __int8 *)(a3 + 127);
  else
    v88 = *(_QWORD *)(a3 + 112);
  if (v87 >= 0)
    v89 = (const void *)(a3 + 104);
  else
    v89 = *(const void **)(a3 + 104);
  if (v86 >= v88)
    v90 = v88;
  else
    v90 = v86;
  v91 = memcmp(v89, v84, v90);
  v92 = v88 < v86;
  if (v91)
    v92 = v91 < 0;
  if (v92)
    goto LABEL_192;
}

BOOL sub_1C55F2618(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  char v10;
  const void *v11;
  size_t v12;
  int v13;
  size_t v14;
  const void *v15;
  size_t v16;
  int v17;
  BOOL v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  char v27;
  const void *v28;
  size_t v29;
  int v30;
  size_t v31;
  const void *v32;
  size_t v33;
  int v34;
  BOOL v35;
  const void *v36;
  const void *v37;
  uint64_t v38;
  int v39;
  uint64_t i;
  uint64_t v41;
  void **v42;
  unsigned int v43;
  unsigned int v44;
  char v45;
  const void *v46;
  size_t v47;
  void *v48;
  void **v49;
  size_t v50;
  int v51;
  BOOL v52;
  uint64_t v53;
  uint64_t v54;
  const void *v55;
  uint64_t v56;
  uint64_t v57;
  _QWORD *v58;
  int v59;
  void **v60;
  void **v61;
  __int128 v62;
  _BYTE *v63;
  _BYTE *v64;
  int v65;
  int v66;
  int v67;
  _BYTE v68[64];
  unsigned int v69;
  void *__p[2];
  uint64_t v71;
  char v72;
  void *v73;
  uint64_t v74;
  _QWORD v75[10];

  v75[8] = *MEMORY[0x1E0C80C00];
  v4 = 0x84BDA12F684BDA13 * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = *(_DWORD *)(a2 - 120);
      v7 = *(_DWORD *)(a1 + 96);
      if (v6 != v7)
      {
        if (v6 >= v7)
          return result;
        goto LABEL_108;
      }
      v8 = *(_DWORD *)(a2 - 196) - *(_DWORD *)(a2 - 192);
      v9 = *(_DWORD *)(a1 + 20) - *(_DWORD *)(a1 + 24);
      if (v8 != v9)
      {
        if (v8 <= v9)
          return result;
LABEL_108:
        v63 = v68;
        v56 = *(_QWORD *)a1;
        v55 = *(const void **)(a1 + 8);
        if (v55 == *(const void **)a1)
        {
          v64 = v68;
          v57 = *(unsigned int *)(a1 + 20);
          if ((_DWORD)v57)
            memmove(v68, v55, 8 * v57);
        }
        else
        {
          v64 = *(_BYTE **)(a1 + 8);
          *(_QWORD *)(a1 + 8) = v56;
          LODWORD(v57) = *(_DWORD *)(a1 + 20);
        }
        v58 = (_QWORD *)(a2 - 216);
        v65 = *(_DWORD *)(a1 + 16);
        v66 = v57;
        v59 = *(_DWORD *)(a1 + 24);
        *(_QWORD *)(a1 + 16) = 8;
        *(_DWORD *)(a1 + 24) = 0;
        v67 = v59;
        v69 = v7;
        *(_OWORD *)__p = *(_OWORD *)(a1 + 104);
        v71 = *(_QWORD *)(a1 + 120);
        *(_QWORD *)(a1 + 104) = 0;
        *(_QWORD *)(a1 + 112) = 0;
        *(_QWORD *)(a1 + 120) = 0;
        v72 = *(_BYTE *)(a1 + 128);
        v73 = v75;
        v74 = 0x800000000;
        if (*(_DWORD *)(a1 + 144))
          sub_1C614D378((uint64_t)&v73, a1 + 136);
        if (v58 != (_QWORD *)a1)
          llvm::SmallPtrSetImplBase::MoveFrom(a1, 8, (double *)(a2 - 216));
        v60 = (void **)(a1 + 104);
        *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 - 120);
        if (*(char *)(a1 + 127) < 0)
          operator delete(*v60);
        v61 = (void **)(a2 - 112);
        v62 = *(_OWORD *)(a2 - 112);
        *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 - 96);
        *(_OWORD *)v60 = v62;
        *(_BYTE *)(a2 - 89) = 0;
        *(_BYTE *)(a2 - 112) = 0;
        *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 - 88);
        sub_1C614D378(a1 + 136, a2 - 80);
        if (&v63 != v58)
          llvm::SmallPtrSetImplBase::MoveFrom(a2 - 216, 8, (double *)&v63);
        *(_DWORD *)(a2 - 120) = v69;
        if (*(char *)(a2 - 89) < 0)
          operator delete(*v61);
        *(_OWORD *)v61 = *(_OWORD *)__p;
        *(_QWORD *)(a2 - 96) = v71;
        HIBYTE(v71) = 0;
        LOBYTE(__p[0]) = 0;
        *(_BYTE *)(a2 - 88) = v72;
        sub_1C614D378(a2 - 80, (uint64_t)&v73);
        if (v73 != v75)
          free(v73);
        if (SHIBYTE(v71) < 0)
          operator delete(__p[0]);
        if (v64 != v63)
          free(v64);
        return 1;
      }
      v10 = *(_BYTE *)(a1 + 127);
      if (v10 >= 0)
        v11 = (const void *)(a1 + 104);
      else
        v11 = *(const void **)(a1 + 104);
      if (v10 >= 0)
        v12 = v10 & 0x7F;
      else
        v12 = *(_QWORD *)(a1 + 112);
      v13 = *(char *)(a2 - 89);
      if (v13 >= 0)
        v14 = *(unsigned __int8 *)(a2 - 89);
      else
        v14 = *(_QWORD *)(a2 - 104);
      if (v13 >= 0)
        v15 = (const void *)(a2 - 112);
      else
        v15 = *(const void **)(a2 - 112);
      if (v12 >= v14)
        v16 = v14;
      else
        v16 = v12;
      v17 = memcmp(v15, v11, v16);
      v18 = v14 < v12;
      if (v17)
        v18 = v17 < 0;
      if (v18)
        goto LABEL_108;
      return 1;
    case 3uLL:
      sub_1C55F1AA0(a1, a1 + 216, a2 - 216);
      return 1;
    case 4uLL:
      sub_1C55F2CF4(a1, a1 + 216, a1 + 432, a2 - 216);
      return 1;
    case 5uLL:
      sub_1C55F1128(a1, a1 + 216, a1 + 432, a1 + 648, a2 - 216);
      return 1;
    default:
      v19 = a1 + 432;
      sub_1C55F1AA0(a1, a1 + 216, a1 + 432);
      v20 = a1 + 648;
      if (a1 + 648 == a2)
        return 1;
      v21 = 0;
      v22 = 0;
      while (2)
      {
        v23 = *(_DWORD *)(v20 + 96);
        v24 = *(_DWORD *)(v19 + 96);
        if (v23 == v24)
        {
          v25 = *(_DWORD *)(v20 + 20) - *(_DWORD *)(v20 + 24);
          v26 = *(_DWORD *)(v19 + 20) - *(_DWORD *)(v19 + 24);
          if (v25 == v26)
          {
            v27 = *(_BYTE *)(v19 + 127);
            if (v27 >= 0)
              v28 = (const void *)(v19 + 104);
            else
              v28 = *(const void **)(v19 + 104);
            if (v27 >= 0)
              v29 = v27 & 0x7F;
            else
              v29 = *(_QWORD *)(v19 + 112);
            v30 = *(char *)(v20 + 127);
            if (v30 >= 0)
              v31 = *(unsigned __int8 *)(v20 + 127);
            else
              v31 = *(_QWORD *)(v20 + 112);
            if (v30 >= 0)
              v32 = (const void *)(v20 + 104);
            else
              v32 = *(const void **)(v20 + 104);
            if (v29 >= v31)
              v33 = v31;
            else
              v33 = v29;
            v34 = memcmp(v32, v28, v33);
            v35 = v31 < v29;
            if (v34)
              v35 = v34 < 0;
            if (!v35)
              goto LABEL_49;
          }
          else if (v25 <= v26)
          {
            goto LABEL_49;
          }
        }
        else if (v23 >= v24)
        {
          goto LABEL_49;
        }
        v63 = v68;
        v37 = *(const void **)v20;
        v36 = *(const void **)(v20 + 8);
        if (v36 == *(const void **)v20)
        {
          v64 = v68;
          v38 = *(unsigned int *)(v20 + 20);
          if ((_DWORD)v38)
            memmove(v68, v36, 8 * v38);
        }
        else
        {
          v64 = *(_BYTE **)(v20 + 8);
          *(_QWORD *)(v20 + 8) = v37;
          LODWORD(v38) = *(_DWORD *)(v20 + 20);
        }
        v65 = *(_DWORD *)(v20 + 16);
        v66 = v38;
        v39 = *(_DWORD *)(v20 + 24);
        *(_QWORD *)(v20 + 16) = 8;
        *(_DWORD *)(v20 + 24) = 0;
        v67 = v39;
        v69 = v23;
        *(_OWORD *)__p = *(_OWORD *)(v20 + 104);
        v71 = *(_QWORD *)(v20 + 120);
        *(_QWORD *)(v20 + 104) = 0;
        *(_QWORD *)(v20 + 112) = 0;
        *(_QWORD *)(v20 + 120) = 0;
        v72 = *(_BYTE *)(v20 + 128);
        v73 = v75;
        v74 = 0x800000000;
        if (*(_DWORD *)(v20 + 144))
          sub_1C614D378((uint64_t)&v73, v20 + 136);
        for (i = v21; ; i -= 216)
        {
          v41 = a1 + i;
          llvm::SmallPtrSetImplBase::MoveFrom(a1 + i + 648, 8, (double *)(a1 + i + 432));
          *(_DWORD *)(a1 + i + 744) = *(_DWORD *)(a1 + i + 528);
          v42 = (void **)(a1 + i + 752);
          if (*(char *)(a1 + i + 775) < 0)
            operator delete(*v42);
          *(_QWORD *)(v41 + 768) = *(_QWORD *)(v41 + 552);
          *(_OWORD *)v42 = *(_OWORD *)(v41 + 536);
          *(_BYTE *)(v41 + 559) = 0;
          *(_BYTE *)(v41 + 536) = 0;
          *(_BYTE *)(v41 + 776) = *(_BYTE *)(v41 + 560);
          sub_1C614D378(v41 + 784, v41 + 568);
          if (i == -432)
            break;
          v43 = *(_DWORD *)(a1 + i + 312);
          if (v69 == v43)
          {
            v44 = *(_DWORD *)(a1 + i + 236) - *(_DWORD *)(a1 + i + 240);
            if (v66 - v67 == v44)
            {
              v45 = *(_BYTE *)(a1 + i + 343);
              if (v45 >= 0)
                v46 = (const void *)(a1 + i + 320);
              else
                v46 = *(const void **)(a1 + i + 320);
              if (v45 >= 0)
                v47 = v45 & 0x7F;
              else
                v47 = *(_QWORD *)(a1 + i + 328);
              if (v71 >= 0)
                v48 = (void *)HIBYTE(v71);
              else
                v48 = __p[1];
              if (v71 >= 0)
                v49 = __p;
              else
                v49 = (void **)__p[0];
              if (v47 >= (unint64_t)v48)
                v50 = (size_t)v48;
              else
                v50 = v47;
              v51 = memcmp(v49, v46, v50);
              v52 = (unint64_t)v48 < v47;
              if (v51)
                v52 = v51 < 0;
              if (!v52)
                goto LABEL_87;
            }
            else if (v66 - v67 <= v44)
            {
              v19 = a1 + i + 432;
              goto LABEL_87;
            }
          }
          else if (v69 >= v43)
          {
            goto LABEL_87;
          }
          v19 -= 216;
        }
        v19 = a1;
LABEL_87:
        if (&v63 != (_BYTE **)v19)
          llvm::SmallPtrSetImplBase::MoveFrom(v19, 8, (double *)&v63);
        v53 = a1 + i;
        v54 = a1 + i + 536;
        *(_DWORD *)(v19 + 96) = v69;
        if (*(char *)(v19 + 127) < 0)
          operator delete(*(void **)v54);
        *(_OWORD *)v54 = *(_OWORD *)__p;
        *(_QWORD *)(v54 + 16) = v71;
        HIBYTE(v71) = 0;
        LOBYTE(__p[0]) = 0;
        *(_BYTE *)(v19 + 128) = v72;
        sub_1C614D378(v53 + 568, (uint64_t)&v73);
        if (v73 != v75)
          free(v73);
        if (SHIBYTE(v71) < 0)
          operator delete(__p[0]);
        if (v64 != v63)
          free(v64);
        if (++v22 == 8)
          return v20 + 216 == a2;
LABEL_49:
        v19 = v20;
        v21 += 216;
        v20 += 216;
        if (v20 == a2)
          return 1;
        continue;
      }
  }
}

void sub_1C55F2CF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  unsigned int v8;
  unsigned int v9;
  unsigned int v10;
  unsigned int v11;
  char v12;
  const void *v13;
  size_t v14;
  int v15;
  size_t v16;
  const void *v17;
  size_t v18;
  int v19;
  BOOL v20;
  const void *v21;
  double v22;
  uint64_t v23;
  int v24;
  void **v25;
  __int128 v26;
  void **v27;
  unsigned int v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  char v32;
  const void *v33;
  size_t v34;
  int v35;
  size_t v36;
  const void *v37;
  size_t v38;
  int v39;
  BOOL v40;
  const void *v41;
  double v42;
  uint64_t v43;
  int v44;
  void **v45;
  __int128 v46;
  unsigned int v47;
  unsigned int v48;
  unsigned int v49;
  unsigned int v50;
  char v51;
  const void *v52;
  size_t v53;
  int v54;
  size_t v55;
  const void *v56;
  size_t v57;
  int v58;
  BOOL v59;
  const void *v60;
  uint64_t v61;
  uint64_t v62;
  int v63;
  void **v64;
  __int128 v65;
  uint64_t v66;
  _BYTE *v67;
  _BYTE *v68;
  int v69;
  int v70;
  int v71;
  _BYTE v72[64];
  unsigned int v73;
  void *__p[2];
  uint64_t v75;
  char v76;
  void *v77;
  uint64_t v78;
  _QWORD v79[10];

  v79[8] = *MEMORY[0x1E0C80C00];
  sub_1C55F1AA0(a1, a2, a3);
  v8 = *(_DWORD *)(a4 + 96);
  v9 = *(_DWORD *)(a3 + 96);
  if (v8 == v9)
  {
    v10 = *(_DWORD *)(a4 + 20) - *(_DWORD *)(a4 + 24);
    v11 = *(_DWORD *)(a3 + 20) - *(_DWORD *)(a3 + 24);
    if (v10 == v11)
    {
      v12 = *(_BYTE *)(a3 + 127);
      if (v12 >= 0)
        v13 = (const void *)(a3 + 104);
      else
        v13 = *(const void **)(a3 + 104);
      if (v12 >= 0)
        v14 = v12 & 0x7F;
      else
        v14 = *(_QWORD *)(a3 + 112);
      v15 = *(char *)(a4 + 127);
      if (v15 >= 0)
        v16 = *(unsigned __int8 *)(a4 + 127);
      else
        v16 = *(_QWORD *)(a4 + 112);
      if (v15 >= 0)
        v17 = (const void *)(a4 + 104);
      else
        v17 = *(const void **)(a4 + 104);
      if (v14 >= v16)
        v18 = v16;
      else
        v18 = v14;
      v19 = memcmp(v17, v13, v18);
      v20 = v16 < v14;
      if (v19)
        v20 = v19 < 0;
      if (!v20)
        return;
    }
    else if (v10 <= v11)
    {
      return;
    }
  }
  else if (v8 >= v9)
  {
    return;
  }
  v67 = v72;
  v22 = *(double *)a3;
  v21 = *(const void **)(a3 + 8);
  if (v21 == *(const void **)a3)
  {
    v68 = v72;
    v23 = *(unsigned int *)(a3 + 20);
    if ((_DWORD)v23)
      memmove(v72, v21, 8 * v23);
  }
  else
  {
    v68 = *(_BYTE **)(a3 + 8);
    *(double *)(a3 + 8) = v22;
    LODWORD(v23) = *(_DWORD *)(a3 + 20);
  }
  v69 = *(_DWORD *)(a3 + 16);
  v70 = v23;
  v24 = *(_DWORD *)(a3 + 24);
  *(_QWORD *)(a3 + 16) = 8;
  *(_DWORD *)(a3 + 24) = 0;
  v71 = v24;
  v73 = v9;
  *(_OWORD *)__p = *(_OWORD *)(a3 + 104);
  v75 = *(_QWORD *)(a3 + 120);
  *(_QWORD *)(a3 + 104) = 0;
  *(_QWORD *)(a3 + 112) = 0;
  *(_QWORD *)(a3 + 120) = 0;
  v76 = *(_BYTE *)(a3 + 128);
  v77 = v79;
  v78 = 0x800000000;
  if (*(_DWORD *)(a3 + 144))
    sub_1C614D378((uint64_t)&v77, a3 + 136);
  v25 = (void **)(a3 + 104);
  if (a4 != a3)
    llvm::SmallPtrSetImplBase::MoveFrom(a3, 8, (double *)a4);
  *(_DWORD *)(a3 + 96) = *(_DWORD *)(a4 + 96);
  if (*(char *)(a3 + 127) < 0)
    operator delete(*v25);
  v26 = *(_OWORD *)(a4 + 104);
  *(_QWORD *)(a3 + 120) = *(_QWORD *)(a4 + 120);
  *(_OWORD *)v25 = v26;
  *(_BYTE *)(a4 + 127) = 0;
  *(_BYTE *)(a4 + 104) = 0;
  *(_BYTE *)(a3 + 128) = *(_BYTE *)(a4 + 128);
  v66 = a3 + 136;
  sub_1C614D378(a3 + 136, a4 + 136);
  if (&v67 != (_BYTE **)a4)
    llvm::SmallPtrSetImplBase::MoveFrom(a4, 8, (double *)&v67);
  v27 = (void **)(a4 + 104);
  *(_DWORD *)(a4 + 96) = v73;
  if (*(char *)(a4 + 127) < 0)
    operator delete(*v27);
  *(_OWORD *)v27 = *(_OWORD *)__p;
  *(_QWORD *)(a4 + 120) = v75;
  HIBYTE(v75) = 0;
  LOBYTE(__p[0]) = 0;
  *(_BYTE *)(a4 + 128) = v76;
  sub_1C614D378(a4 + 136, (uint64_t)&v77);
  if (v77 != v79)
    free(v77);
  if (SHIBYTE(v75) < 0)
    operator delete(__p[0]);
  if (v68 != v67)
    free(v68);
  v28 = *(_DWORD *)(a3 + 96);
  v29 = *(_DWORD *)(a2 + 96);
  if (v28 == v29)
  {
    v30 = *(_DWORD *)(a3 + 20) - *(_DWORD *)(a3 + 24);
    v31 = *(_DWORD *)(a2 + 20) - *(_DWORD *)(a2 + 24);
    if (v30 == v31)
    {
      v32 = *(_BYTE *)(a2 + 127);
      if (v32 >= 0)
        v33 = (const void *)(a2 + 104);
      else
        v33 = *(const void **)(a2 + 104);
      if (v32 >= 0)
        v34 = v32 & 0x7F;
      else
        v34 = *(_QWORD *)(a2 + 112);
      v35 = *(char *)(a3 + 127);
      if (v35 >= 0)
        v36 = *(unsigned __int8 *)(a3 + 127);
      else
        v36 = *(_QWORD *)(a3 + 112);
      if (v35 >= 0)
        v37 = (const void *)(a3 + 104);
      else
        v37 = *(const void **)(a3 + 104);
      if (v34 >= v36)
        v38 = v36;
      else
        v38 = v34;
      v39 = memcmp(v37, v33, v38);
      v40 = v36 < v34;
      if (v39)
        v40 = v39 < 0;
      if (!v40)
        return;
    }
    else if (v30 <= v31)
    {
      return;
    }
  }
  else if (v28 >= v29)
  {
    return;
  }
  v67 = v72;
  v42 = *(double *)a2;
  v41 = *(const void **)(a2 + 8);
  if (v41 == *(const void **)a2)
  {
    v68 = v72;
    v43 = *(unsigned int *)(a2 + 20);
    if ((_DWORD)v43)
      memmove(v72, v41, 8 * v43);
  }
  else
  {
    v68 = *(_BYTE **)(a2 + 8);
    *(double *)(a2 + 8) = v42;
    LODWORD(v43) = *(_DWORD *)(a2 + 20);
  }
  v69 = *(_DWORD *)(a2 + 16);
  v70 = v43;
  v44 = *(_DWORD *)(a2 + 24);
  *(_QWORD *)(a2 + 16) = 8;
  *(_DWORD *)(a2 + 24) = 0;
  v71 = v44;
  v73 = v29;
  *(_OWORD *)__p = *(_OWORD *)(a2 + 104);
  v75 = *(_QWORD *)(a2 + 120);
  *(_QWORD *)(a2 + 104) = 0;
  *(_QWORD *)(a2 + 112) = 0;
  *(_QWORD *)(a2 + 120) = 0;
  v76 = *(_BYTE *)(a2 + 128);
  v77 = v79;
  v78 = 0x800000000;
  if (*(_DWORD *)(a2 + 144))
    sub_1C614D378((uint64_t)&v77, a2 + 136);
  v45 = (void **)(a2 + 104);
  if (a3 != a2)
    llvm::SmallPtrSetImplBase::MoveFrom(a2, 8, (double *)a3);
  *(_DWORD *)(a2 + 96) = *(_DWORD *)(a3 + 96);
  if (*(char *)(a2 + 127) < 0)
    operator delete(*v45);
  v46 = *(_OWORD *)v25;
  *(_QWORD *)(a2 + 120) = *(_QWORD *)(a3 + 120);
  *(_OWORD *)v45 = v46;
  *(_BYTE *)(a3 + 127) = 0;
  *(_BYTE *)(a3 + 104) = 0;
  *(_BYTE *)(a2 + 128) = *(_BYTE *)(a3 + 128);
  sub_1C614D378(a2 + 136, v66);
  if (&v67 != (_BYTE **)a3)
    llvm::SmallPtrSetImplBase::MoveFrom(a3, 8, (double *)&v67);
  *(_DWORD *)(a3 + 96) = v73;
  if (*(char *)(a3 + 127) < 0)
    operator delete(*v25);
  *(_OWORD *)v25 = *(_OWORD *)__p;
  *(_QWORD *)(a3 + 120) = v75;
  HIBYTE(v75) = 0;
  LOBYTE(__p[0]) = 0;
  *(_BYTE *)(a3 + 128) = v76;
  sub_1C614D378(v66, (uint64_t)&v77);
  if (v77 != v79)
    free(v77);
  if (SHIBYTE(v75) < 0)
    operator delete(__p[0]);
  if (v68 != v67)
    free(v68);
  v47 = *(_DWORD *)(a2 + 96);
  v48 = *(_DWORD *)(a1 + 96);
  if (v47 != v48)
  {
    if (v47 >= v48)
      return;
    goto LABEL_113;
  }
  v49 = *(_DWORD *)(a2 + 20) - *(_DWORD *)(a2 + 24);
  v50 = *(_DWORD *)(a1 + 20) - *(_DWORD *)(a1 + 24);
  if (v49 != v50)
  {
    if (v49 <= v50)
      return;
    goto LABEL_113;
  }
  v51 = *(_BYTE *)(a1 + 127);
  if (v51 >= 0)
    v52 = (const void *)(a1 + 104);
  else
    v52 = *(const void **)(a1 + 104);
  if (v51 >= 0)
    v53 = v51 & 0x7F;
  else
    v53 = *(_QWORD *)(a1 + 112);
  v54 = *(char *)(a2 + 127);
  if (v54 >= 0)
    v55 = *(unsigned __int8 *)(a2 + 127);
  else
    v55 = *(_QWORD *)(a2 + 112);
  if (v54 >= 0)
    v56 = (const void *)(a2 + 104);
  else
    v56 = *(const void **)(a2 + 104);
  if (v53 >= v55)
    v57 = v55;
  else
    v57 = v53;
  v58 = memcmp(v56, v52, v57);
  v59 = v55 < v53;
  if (v58)
    v59 = v58 < 0;
  if (v59)
  {
LABEL_113:
    v67 = v72;
    v61 = *(_QWORD *)a1;
    v60 = *(const void **)(a1 + 8);
    if (v60 == *(const void **)a1)
    {
      v68 = v72;
      v62 = *(unsigned int *)(a1 + 20);
      if ((_DWORD)v62)
        memmove(v72, v60, 8 * v62);
    }
    else
    {
      v68 = *(_BYTE **)(a1 + 8);
      *(_QWORD *)(a1 + 8) = v61;
      LODWORD(v62) = *(_DWORD *)(a1 + 20);
    }
    v69 = *(_DWORD *)(a1 + 16);
    v70 = v62;
    v63 = *(_DWORD *)(a1 + 24);
    *(_QWORD *)(a1 + 16) = 8;
    *(_DWORD *)(a1 + 24) = 0;
    v71 = v63;
    v73 = v48;
    *(_OWORD *)__p = *(_OWORD *)(a1 + 104);
    v75 = *(_QWORD *)(a1 + 120);
    *(_QWORD *)(a1 + 104) = 0;
    *(_QWORD *)(a1 + 112) = 0;
    *(_QWORD *)(a1 + 120) = 0;
    v76 = *(_BYTE *)(a1 + 128);
    v77 = v79;
    v78 = 0x800000000;
    if (*(_DWORD *)(a1 + 144))
      sub_1C614D378((uint64_t)&v77, a1 + 136);
    if (a2 != a1)
      llvm::SmallPtrSetImplBase::MoveFrom(a1, 8, (double *)a2);
    v64 = (void **)(a1 + 104);
    *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 96);
    if (*(char *)(a1 + 127) < 0)
      operator delete(*v64);
    v65 = *(_OWORD *)v45;
    *(_QWORD *)(a1 + 120) = *(_QWORD *)(a2 + 120);
    *(_OWORD *)v64 = v65;
    *(_BYTE *)(a2 + 127) = 0;
    *(_BYTE *)(a2 + 104) = 0;
    *(_BYTE *)(a1 + 128) = *(_BYTE *)(a2 + 128);
    sub_1C614D378(a1 + 136, a2 + 136);
    if (&v67 != (_BYTE **)a2)
      llvm::SmallPtrSetImplBase::MoveFrom(a2, 8, (double *)&v67);
    *(_DWORD *)(a2 + 96) = v73;
    if (*(char *)(a2 + 127) < 0)
      operator delete(*v45);
    *(_OWORD *)v45 = *(_OWORD *)__p;
    *(_QWORD *)(a2 + 120) = v75;
    HIBYTE(v75) = 0;
    LOBYTE(__p[0]) = 0;
    *(_BYTE *)(a2 + 128) = v76;
    sub_1C614D378(a2 + 136, (uint64_t)&v77);
    if (v77 != v79)
      free(v77);
    if (SHIBYTE(v75) < 0)
      operator delete(__p[0]);
    if (v68 != v67)
      free(v68);
  }
}

uint64_t sub_1C55F342C(uint64_t result, uint64_t **a2, uint64_t *a3, uint64_t a4, char a5)
{
  unint64_t v7;
  uint64_t **v8;
  uint64_t **v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t **v13;
  uint64_t *v14;
  uint64_t *v15;
  uint64_t *v16;
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  _QWORD **v20;
  unsigned int v21;
  uint64_t v22;
  unsigned int v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t **v29;
  uint64_t *v30;
  int v31;
  int v32;
  uint64_t *v33;
  unsigned int v34;
  uint64_t **v35;
  uint64_t **v36;
  uint64_t *v37;
  uint64_t *v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  BOOL v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t **v51;
  uint64_t *v52;
  int v53;
  int v54;
  uint64_t *v55;
  char *v56;
  size_t v57;
  size_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t **v63;
  uint64_t *v64;
  int v65;
  int v66;
  uint64_t *v67;
  char *v68;
  size_t v69;
  size_t v70;
  size_t v71;
  int v72;
  uint64_t **v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t v76;
  unsigned int v77;
  unsigned int v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  unsigned int v82;
  BOOL v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t **v88;
  uint64_t *v89;
  int v90;
  int v91;
  uint64_t *v92;
  char *v93;
  size_t v94;
  size_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t **v100;
  uint64_t *v101;
  int v102;
  int v103;
  uint64_t *v104;
  char *v105;
  size_t v106;
  size_t v107;
  size_t v108;
  int v109;
  uint64_t *v110;
  uint64_t *v111;
  uint64_t v112;
  unsigned int v113;
  unsigned int v114;
  uint64_t v115;
  unsigned int v116;
  uint64_t v117;
  unsigned int v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t **v123;
  uint64_t *v124;
  int v125;
  int v126;
  uint64_t *v127;
  char *v128;
  size_t v129;
  size_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t **v135;
  uint64_t *v136;
  int v137;
  int v138;
  uint64_t *v139;
  char *v140;
  size_t v141;
  size_t v142;
  size_t v143;
  int v144;
  uint64_t **v145;
  uint64_t *v146;
  uint64_t *v147;
  uint64_t *v148;
  uint64_t v149;
  unsigned int v150;
  unsigned int v151;
  uint64_t v152;
  unsigned int v153;
  uint64_t v154;
  unsigned int v155;
  BOOL v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t **v161;
  uint64_t *v162;
  int v163;
  int v164;
  uint64_t *v165;
  char *v166;
  size_t v167;
  size_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t **v173;
  uint64_t *v174;
  int v175;
  int v176;
  uint64_t *v177;
  char *v178;
  size_t v179;
  size_t v180;
  size_t v181;
  int v182;
  size_t v183;
  char *v184;
  size_t v185;
  char *v186;
  uint64_t *v187;
  uint64_t *v188;
  uint64_t v189;
  unsigned int v190;
  unsigned int v191;
  uint64_t v192;
  unsigned int v193;
  uint64_t v194;
  unsigned int v195;
  BOOL v196;
  uint64_t v197;
  uint64_t v198;
  uint64_t v199;
  uint64_t v200;
  uint64_t **v201;
  uint64_t *v202;
  int v203;
  int v204;
  uint64_t *v205;
  size_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t **v211;
  uint64_t *v212;
  int v213;
  int v214;
  uint64_t *v215;
  size_t v216;
  size_t v217;
  int v218;
  uint64_t **v219;
  BOOL v220;
  uint64_t *v221;
  char *v222;
  size_t v223;
  size_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t **v229;
  uint64_t *v230;
  int v231;
  int v232;
  uint64_t *v233;
  char *v234;
  size_t v235;
  size_t v236;
  size_t v237;
  int v238;
  uint64_t *v239;
  uint64_t *v240;
  uint64_t v241;
  unsigned int v242;
  uint64_t v243;
  unsigned int v244;
  uint64_t v245;
  unsigned int v246;
  BOOL v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t **v252;
  uint64_t *v253;
  int v254;
  int v255;
  uint64_t *v256;
  uint64_t *v257;
  uint64_t v258;
  unsigned int v259;
  uint64_t v260;
  unsigned int v261;
  uint64_t v262;
  unsigned int v263;
  BOOL v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t **v269;
  uint64_t *v270;
  int v271;
  int v272;
  size_t *v273;
  size_t v274;
  size_t v275;
  uint64_t v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t **v280;
  uint64_t *v281;
  int v282;
  int v283;
  uint64_t *v284;
  char *v285;
  size_t v286;
  size_t v287;
  size_t v288;
  size_t *v289;
  size_t v290;
  size_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t v295;
  uint64_t **v296;
  uint64_t *v297;
  int v298;
  int v299;
  uint64_t *v300;
  char *v301;
  size_t v302;
  size_t v303;
  size_t v304;
  uint64_t *v305;
  uint64_t v306;
  unsigned int v307;
  uint64_t v308;
  unsigned int v309;
  uint64_t v310;
  unsigned int v311;
  BOOL v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t **v317;
  uint64_t *v318;
  int v319;
  int v320;
  size_t *v321;
  size_t v322;
  size_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t **v328;
  uint64_t *v329;
  int v330;
  int v331;
  uint64_t *v332;
  char *v333;
  size_t v334;
  size_t v335;
  size_t v336;
  uint64_t **v337;
  uint64_t *v338;
  uint64_t *v339;
  uint64_t v340;
  unsigned int v341;
  uint64_t v342;
  unsigned int v343;
  uint64_t v344;
  unsigned int v345;
  BOOL v346;
  uint64_t v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t **v351;
  uint64_t *v352;
  int v353;
  int v354;
  size_t *v355;
  size_t v356;
  size_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t **v362;
  uint64_t *v363;
  int v364;
  int v365;
  uint64_t *v366;
  char *v367;
  size_t v368;
  size_t v369;
  size_t v370;
  unsigned int v371;
  uint64_t *v372;
  uint64_t *v373;
  uint64_t *v374;
  uint64_t v375;
  unsigned int v376;
  unsigned int v377;
  uint64_t v378;
  unsigned int v379;
  uint64_t v380;
  unsigned int v381;
  BOOL v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t **v387;
  uint64_t *v388;
  int v389;
  int v390;
  uint64_t *v391;
  char *v392;
  size_t v393;
  size_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t v397;
  uint64_t v398;
  uint64_t **v399;
  uint64_t *v400;
  int v401;
  int v402;
  uint64_t *v403;
  char *v404;
  size_t v405;
  size_t v406;
  size_t v407;
  int v408;
  size_t v409;
  size_t v410;
  char *v411;
  uint64_t *v412;
  uint64_t *v413;
  uint64_t v414;
  unsigned int v415;
  uint64_t v416;
  unsigned int v417;
  uint64_t v418;
  unsigned int v419;
  BOOL v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  uint64_t v424;
  uint64_t **v425;
  uint64_t *v426;
  int v427;
  int v428;
  size_t *v429;
  size_t v430;
  uint64_t v431;
  uint64_t v432;
  uint64_t v433;
  uint64_t v434;
  uint64_t **v435;
  uint64_t *v436;
  int v437;
  int v438;
  uint64_t *v439;
  size_t v440;
  size_t v441;
  uint64_t **v442;
  uint64_t *v443;
  uint64_t *v444;
  uint64_t v445;
  unsigned int v446;
  _QWORD **v447;
  unsigned int v448;
  uint64_t v449;
  unsigned int v450;
  BOOL v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  uint64_t v455;
  uint64_t **v456;
  uint64_t *v457;
  int v458;
  int v459;
  uint64_t **v460;
  uint64_t **v461;
  uint64_t **v462;
  uint64_t *v463;
  uint64_t *v464;
  uint64_t v465;
  unsigned int v466;
  _QWORD **v467;
  unsigned int v468;
  _QWORD **v469;
  unsigned int v470;
  BOOL v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t v475;
  uint64_t **v476;
  uint64_t *v477;
  int v478;
  int v479;
  uint64_t **v480;
  BOOL v481;
  char v482;
  uint64_t **v483;
  uint64_t **v484;
  uint64_t *v485;
  uint64_t *v486;
  uint64_t v487;
  unsigned int v488;
  _QWORD **v489;
  unsigned int v490;
  _QWORD **v491;
  unsigned int v492;
  BOOL v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t **v498;
  uint64_t *v499;
  int v500;
  int v501;
  size_t *v502;
  size_t v503;
  size_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t **v509;
  uint64_t *v510;
  int v511;
  int v512;
  uint64_t *v513;
  char *v514;
  size_t v515;
  size_t v516;
  size_t v517;
  uint64_t *v518;
  uint64_t **v519;
  uint64_t **v520;
  uint64_t *v521;
  uint64_t *v522;
  uint64_t v523;
  unsigned int v524;
  _QWORD **v525;
  unsigned int v526;
  uint64_t v527;
  unsigned int v528;
  BOOL v529;
  uint64_t v530;
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  uint64_t **v534;
  uint64_t *v535;
  int v536;
  int v537;
  size_t *v538;
  size_t v539;
  size_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  uint64_t v544;
  uint64_t **v545;
  uint64_t *v546;
  int v547;
  int v548;
  uint64_t *v549;
  char *v550;
  size_t v551;
  size_t v552;
  size_t v553;
  int64_t v554;
  int64_t v555;
  uint64_t **v556;
  int64_t v557;
  uint64_t v558;
  uint64_t **v559;
  uint64_t *v560;
  uint64_t *v561;
  uint64_t v562;
  unsigned int v563;
  unsigned int v564;
  uint64_t v565;
  unsigned int v566;
  _QWORD **v567;
  unsigned int v568;
  BOOL v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t **v574;
  uint64_t *v575;
  int v576;
  int v577;
  _BOOL4 v578;
  uint64_t *v579;
  char *v580;
  size_t v581;
  size_t v582;
  uint64_t v583;
  uint64_t v584;
  uint64_t v585;
  uint64_t v586;
  uint64_t **v587;
  uint64_t *v588;
  int v589;
  int v590;
  uint64_t *v591;
  char *v592;
  size_t v593;
  size_t v594;
  size_t v595;
  int v596;
  uint64_t *v597;
  uint64_t *v598;
  uint64_t v599;
  unsigned int v600;
  uint64_t v601;
  unsigned int v602;
  _QWORD **v603;
  unsigned int v604;
  BOOL v605;
  uint64_t v606;
  uint64_t v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t **v610;
  uint64_t *v611;
  int v612;
  int v613;
  size_t *v614;
  size_t v615;
  size_t v616;
  uint64_t v617;
  uint64_t v618;
  uint64_t v619;
  uint64_t v620;
  uint64_t **v621;
  uint64_t *v622;
  int v623;
  int v624;
  uint64_t *v625;
  char *v626;
  size_t v627;
  size_t v628;
  size_t v629;
  uint64_t *v630;
  uint64_t **v631;
  uint64_t v632;
  uint64_t v633;
  uint64_t *v634;
  uint64_t *v635;
  uint64_t v636;
  unsigned int v637;
  unsigned int v638;
  uint64_t v639;
  unsigned int v640;
  _QWORD **v641;
  unsigned int v642;
  BOOL v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t **v648;
  uint64_t *v649;
  int v650;
  int v651;
  _BOOL4 v652;
  uint64_t *v653;
  char *v654;
  size_t v655;
  size_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t **v661;
  uint64_t *v662;
  int v663;
  int v664;
  uint64_t *v665;
  char *v666;
  size_t v667;
  size_t v668;
  size_t v669;
  int v670;
  uint64_t *v671;
  uint64_t v672;
  unsigned int v673;
  uint64_t v674;
  unsigned int v675;
  _QWORD **v676;
  unsigned int v677;
  BOOL v678;
  uint64_t v679;
  uint64_t v680;
  uint64_t v681;
  uint64_t v682;
  uint64_t **v683;
  uint64_t *v684;
  int v685;
  int v686;
  size_t *v687;
  size_t v688;
  size_t v689;
  uint64_t v690;
  uint64_t v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t **v694;
  uint64_t *v695;
  int v696;
  int v697;
  uint64_t *v698;
  char *v699;
  size_t v700;
  size_t v701;
  size_t v702;
  unint64_t v703;
  unint64_t v704;
  uint64_t **v705;
  uint64_t *v706;
  uint64_t v707;
  unsigned int v708;
  uint64_t v709;
  unsigned int v710;
  _QWORD **v711;
  unsigned int v712;
  BOOL v713;
  uint64_t v714;
  uint64_t v715;
  uint64_t v716;
  uint64_t v717;
  uint64_t **v718;
  uint64_t *v719;
  int v720;
  int v721;
  size_t *v722;
  size_t v723;
  size_t v724;
  uint64_t v725;
  uint64_t v726;
  uint64_t v727;
  uint64_t v728;
  uint64_t **v729;
  uint64_t *v730;
  int v731;
  int v732;
  uint64_t *v733;
  char *v734;
  size_t v735;
  size_t v736;
  size_t v737;
  uint64_t **v738;
  size_t v739;
  size_t v740;
  char *v741;
  uint64_t v742;
  uint64_t **v743;
  int64_t v744;
  uint64_t **v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t *v748;
  uint64_t *v749;
  uint64_t v750;
  unsigned int v751;
  uint64_t v752;
  unsigned int v753;
  _QWORD **v754;
  unsigned int v755;
  BOOL v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  uint64_t v760;
  uint64_t **v761;
  uint64_t *v762;
  int v763;
  int v764;
  _BOOL4 v765;
  size_t *v766;
  size_t v767;
  size_t v768;
  uint64_t v769;
  uint64_t v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t **v773;
  uint64_t *v774;
  int v775;
  int v776;
  uint64_t *v777;
  char *v778;
  size_t v779;
  size_t v780;
  size_t v781;
  uint64_t **v782;
  uint64_t v783;
  unint64_t v784;
  uint64_t *v785;
  uint64_t *v786;
  uint64_t v787;
  unsigned int v788;
  uint64_t v789;
  unsigned int v790;
  _QWORD **v791;
  unsigned int v792;
  BOOL v793;
  uint64_t v794;
  uint64_t v795;
  uint64_t v796;
  uint64_t v797;
  uint64_t **v798;
  uint64_t *v799;
  int v800;
  int v801;
  size_t *v802;
  size_t v803;
  uint64_t v804;
  uint64_t v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t **v808;
  uint64_t *v809;
  int v810;
  int v811;
  uint64_t *v812;
  size_t v813;
  size_t v814;
  uint64_t *v815;
  uint64_t **v816;
  uint64_t *v817;
  uint64_t *v818;
  uint64_t v819;
  unsigned int v820;
  BOOL v821;
  _QWORD **v822;
  uint64_t **v823;
  unsigned int v824;
  uint64_t **v825;
  _QWORD **v826;
  unsigned int v827;
  BOOL v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  uint64_t v832;
  uint64_t **v833;
  uint64_t *v834;
  int v835;
  int v836;
  size_t *v837;
  size_t v838;
  size_t v839;
  uint64_t v840;
  uint64_t v841;
  uint64_t v842;
  uint64_t v843;
  uint64_t **v844;
  uint64_t *v845;
  int v846;
  int v847;
  uint64_t *v848;
  char *v849;
  size_t v850;
  size_t v851;
  size_t v852;
  uint64_t *v853;
  unsigned int v854;
  uint64_t **v855;
  uint64_t *v856;
  uint64_t *v857;
  uint64_t v858;
  unsigned int v859;
  _QWORD **v860;
  unsigned int v861;
  uint64_t v862;
  unsigned int v863;
  BOOL v864;
  uint64_t v865;
  uint64_t v866;
  uint64_t v867;
  uint64_t v868;
  uint64_t **v869;
  uint64_t *v870;
  int v871;
  int v872;
  size_t *v873;
  size_t v874;
  size_t v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  uint64_t v879;
  uint64_t **v880;
  uint64_t *v881;
  int v882;
  int v883;
  uint64_t *v884;
  char *v885;
  size_t v886;
  size_t v887;
  size_t v888;
  size_t *v889;
  size_t v890;
  size_t v891;
  uint64_t v892;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t **v896;
  uint64_t *v897;
  int v898;
  int v899;
  size_t *v900;
  size_t v901;
  size_t v902;
  uint64_t v903;
  uint64_t v904;
  uint64_t v905;
  uint64_t v906;
  uint64_t **v907;
  uint64_t *v908;
  int v909;
  int v910;
  uint64_t *v911;
  char *v912;
  size_t v913;
  size_t v914;
  size_t v915;
  uint64_t *v916;
  uint64_t *v917;
  char *v918;
  size_t v919;
  size_t v920;
  size_t v921;
  uint64_t *v922;
  uint64_t *v923;
  uint64_t *v924;
  uint64_t v925;
  unsigned int v926;
  uint64_t v927;
  unsigned int v928;
  _QWORD **v929;
  unsigned int v930;
  BOOL v931;
  uint64_t v932;
  uint64_t v933;
  uint64_t v934;
  uint64_t v935;
  uint64_t **v936;
  uint64_t *v937;
  int v938;
  int v939;
  size_t *v940;
  size_t v941;
  size_t v942;
  uint64_t v943;
  uint64_t v944;
  uint64_t v945;
  uint64_t v946;
  uint64_t **v947;
  uint64_t *v948;
  int v949;
  int v950;
  uint64_t *v951;
  char *v952;
  size_t v953;
  size_t v954;
  size_t v955;
  uint64_t *v956;
  uint64_t *v957;
  uint64_t *v958;
  uint64_t v959;
  unsigned int v960;
  uint64_t v961;
  unsigned int v962;
  _QWORD **v963;
  unsigned int v964;
  BOOL v965;
  uint64_t v966;
  uint64_t v967;
  uint64_t v968;
  uint64_t v969;
  uint64_t **v970;
  uint64_t *v971;
  int v972;
  int v973;
  size_t *v974;
  size_t v975;
  size_t v976;
  uint64_t v977;
  uint64_t v978;
  uint64_t v979;
  uint64_t v980;
  uint64_t **v981;
  uint64_t *v982;
  int v983;
  int v984;
  uint64_t *v985;
  char *v986;
  size_t v987;
  size_t v988;
  size_t v989;
  uint64_t *v990;
  uint64_t *v991;
  uint64_t *v992;
  uint64_t v993;
  unsigned int v994;
  _QWORD **v995;
  unsigned int v996;
  uint64_t v997;
  unsigned int v998;
  BOOL v999;
  uint64_t v1000;
  uint64_t v1001;
  uint64_t v1002;
  uint64_t v1003;
  uint64_t **v1004;
  uint64_t *v1005;
  int v1006;
  int v1007;
  size_t *v1008;
  size_t v1009;
  size_t v1010;
  uint64_t v1011;
  uint64_t v1012;
  uint64_t v1013;
  uint64_t v1014;
  uint64_t **v1015;
  uint64_t *v1016;
  int v1017;
  int v1018;
  uint64_t *v1019;
  char *v1020;
  size_t v1021;
  size_t v1022;
  size_t v1023;
  int64_t v1024;
  uint64_t **v1025;
  uint64_t v1026;
  uint64_t *v1027;
  uint64_t **v1029;
  uint64_t **v1031;
  int64_t v1032;
  uint64_t v1033;
  unint64_t v1034;
  unint64_t v1035;

  v1029 = (uint64_t **)result;
LABEL_2:
  v7 = (unint64_t)a2;
  v8 = v1029;
  v1025 = a2 - 1;
  while (2)
  {
    v9 = v8;
    v10 = v7 - (_QWORD)v8;
    v11 = (uint64_t)(v7 - (_QWORD)v8) >> 3;
    v1029 = v9;
    switch(v11)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v443 = *(a2 - 1);
        v444 = *v1029;
        v445 = *a3;
        v446 = sub_1C55F8434(*(_QWORD *)(*a3 + 6936), *(_DWORD *)(*a3 + 6952), v443, a3[1]);
        result = sub_1C55F8434(*(_QWORD *)(v445 + 6936), *(_DWORD *)(v445 + 6952), v444, a3[1]);
        if (v446 != (_DWORD)result)
        {
          if (v446 >= result)
            return result;
          goto LABEL_1133;
        }
        v447 = (_QWORD **)v443[1];
        if (v447)
        {
          v448 = 0;
          do
          {
            ++v448;
            v447 = (_QWORD **)v447[1];
          }
          while (v447);
        }
        else
        {
          v448 = 0;
        }
        v449 = v444[1];
        if (v449)
        {
          v450 = 0;
          do
          {
            ++v450;
            v449 = *(_QWORD *)(v449 + 8);
          }
          while (v449);
        }
        else
        {
          v450 = 0;
        }
        v451 = v448 > v450;
        if (v448 != v450)
          goto LABEL_1131;
        if ((*((_BYTE *)v443 + 23) & 0x10) != 0)
        {
          v452 = **(_QWORD **)*v443;
          v453 = *(_QWORD *)(v452 + 152);
          v454 = *(unsigned int *)(v452 + 168);
          if ((_DWORD)v454)
          {
            LODWORD(v455) = (v454 - 1) & ((v443 >> 4) ^ (v443 >> 9));
            v456 = (uint64_t **)(v453 + 16 * v455);
            v457 = *v456;
            if (*v456 != v443)
            {
              v458 = 1;
              do
              {
                if (v457 == (uint64_t *)-4096)
                  goto LABEL_1103;
                v459 = v455 + v458++;
                v455 = v459 & (v454 - 1);
                v457 = *(uint64_t **)(v453 + 16 * v455);
              }
              while (v457 != v443);
              v456 = (uint64_t **)(v453 + 16 * v455);
            }
          }
          else
          {
LABEL_1103:
            v456 = (uint64_t **)(v453 + 16 * v454);
          }
          v889 = (size_t *)v456[1];
          v891 = *v889;
          result = (uint64_t)(v889 + 2);
          v890 = v891;
          goto LABEL_1105;
        }
        v890 = 0;
        result = (uint64_t)&byte_1C871356D;
LABEL_1105:
        if ((*((_BYTE *)v444 + 23) & 0x10) != 0)
        {
          v892 = **(_QWORD **)*v444;
          v893 = *(_QWORD *)(v892 + 152);
          v894 = *(unsigned int *)(v892 + 168);
          if ((_DWORD)v894)
          {
            LODWORD(v895) = (v894 - 1) & ((v444 >> 4) ^ (v444 >> 9));
            v896 = (uint64_t **)(v893 + 16 * v895);
            v897 = *v896;
            if (*v896 != v444)
            {
              v898 = 1;
              do
              {
                if (v897 == (uint64_t *)-4096)
                  goto LABEL_1121;
                v899 = v895 + v898++;
                v895 = v899 & (v894 - 1);
                v897 = *(uint64_t **)(v893 + 16 * v895);
              }
              while (v897 != v444);
              v896 = (uint64_t **)(v893 + 16 * v895);
            }
          }
          else
          {
LABEL_1121:
            v896 = (uint64_t **)(v893 + 16 * v894);
          }
          v911 = v896[1];
          v914 = *v911;
          v912 = (char *)(v911 + 2);
          v913 = v914;
          goto LABEL_1123;
        }
        v913 = 0;
        v912 = &byte_1C871356D;
LABEL_1123:
        if (v913 >= v890)
          v915 = v890;
        else
          v915 = v913;
        if (v915 && (result = memcmp((const void *)result, v912, v915), (_DWORD)result))
        {
          if ((result & 0x80000000) != 0)
            return result;
        }
        else
        {
          v451 = v890 > v913;
LABEL_1131:
          if (!v451)
            return result;
        }
LABEL_1133:
        v916 = *v1029;
        *v1029 = *(a2 - 1);
        *(a2 - 1) = v916;
        return result;
      case 3uLL:
        return sub_1C55F6C74(v9, v9 + 1, v1025, a3);
      case 4uLL:
        return sub_1C55F84EC(v9, v9 + 1, v9 + 2, v1025, a3);
      case 5uLL:
        v460 = v9 + 1;
        v461 = v9 + 2;
        v462 = v1029 + 3;
        sub_1C55F84EC(v1029, v1029 + 1, v1029 + 2, v1029 + 3, a3);
        v463 = *(a2 - 1);
        v464 = v1029[3];
        v465 = *a3;
        v466 = sub_1C55F8434(*(_QWORD *)(*a3 + 6936), *(_DWORD *)(*a3 + 6952), v463, a3[1]);
        result = sub_1C55F8434(*(_QWORD *)(v465 + 6936), *(_DWORD *)(v465 + 6952), v464, a3[1]);
        if (v466 != (_DWORD)result)
        {
          if (v466 >= result)
            return result;
          goto LABEL_1146;
        }
        v467 = (_QWORD **)v463[1];
        if (v467)
        {
          v468 = 0;
          do
          {
            ++v468;
            v467 = (_QWORD **)v467[1];
          }
          while (v467);
        }
        else
        {
          v468 = 0;
        }
        v469 = (_QWORD **)v464[1];
        if (v469)
        {
          v470 = 0;
          do
          {
            ++v470;
            v469 = (_QWORD **)v469[1];
          }
          while (v469);
        }
        else
        {
          v470 = 0;
        }
        v471 = v468 > v470;
        if (v468 != v470)
          goto LABEL_1144;
        if ((*((_BYTE *)v463 + 23) & 0x10) != 0)
        {
          v472 = **(_QWORD **)*v463;
          v473 = *(_QWORD *)(v472 + 152);
          v474 = *(unsigned int *)(v472 + 168);
          if ((_DWORD)v474)
          {
            LODWORD(v475) = (v474 - 1) & ((v463 >> 4) ^ (v463 >> 9));
            v476 = (uint64_t **)(v473 + 16 * v475);
            v477 = *v476;
            if (*v476 != v463)
            {
              v478 = 1;
              do
              {
                if (v477 == (uint64_t *)-4096)
                  goto LABEL_1112;
                v479 = v475 + v478++;
                v475 = v479 & (v474 - 1);
                v477 = *(uint64_t **)(v473 + 16 * v475);
              }
              while (v477 != v463);
              v476 = (uint64_t **)(v473 + 16 * v475);
            }
          }
          else
          {
LABEL_1112:
            v476 = (uint64_t **)(v473 + 16 * v474);
          }
          v900 = (size_t *)v476[1];
          v902 = *v900;
          result = (uint64_t)(v900 + 2);
          v901 = v902;
          goto LABEL_1114;
        }
        v901 = 0;
        result = (uint64_t)&byte_1C871356D;
LABEL_1114:
        if ((*((_BYTE *)v464 + 23) & 0x10) != 0)
        {
          v903 = **(_QWORD **)*v464;
          v904 = *(_QWORD *)(v903 + 152);
          v905 = *(unsigned int *)(v903 + 168);
          if ((_DWORD)v905)
          {
            LODWORD(v906) = (v905 - 1) & ((v464 >> 4) ^ (v464 >> 9));
            v907 = (uint64_t **)(v904 + 16 * v906);
            v908 = *v907;
            if (*v907 != v464)
            {
              v909 = 1;
              do
              {
                if (v908 == (uint64_t *)-4096)
                  goto LABEL_1134;
                v910 = v906 + v909++;
                v906 = v910 & (v905 - 1);
                v908 = *(uint64_t **)(v904 + 16 * v906);
              }
              while (v908 != v464);
              v907 = (uint64_t **)(v904 + 16 * v906);
            }
          }
          else
          {
LABEL_1134:
            v907 = (uint64_t **)(v904 + 16 * v905);
          }
          v917 = v907[1];
          v920 = *v917;
          v918 = (char *)(v917 + 2);
          v919 = v920;
          goto LABEL_1136;
        }
        v919 = 0;
        v918 = &byte_1C871356D;
LABEL_1136:
        if (v919 >= v901)
          v921 = v901;
        else
          v921 = v919;
        if (v921 && (result = memcmp((const void *)result, v918, v921), (_DWORD)result))
        {
          if ((result & 0x80000000) != 0)
            return result;
        }
        else
        {
          v471 = v901 > v919;
LABEL_1144:
          if (!v471)
            return result;
        }
LABEL_1146:
        v922 = *v462;
        *v462 = *(a2 - 1);
        *(a2 - 1) = v922;
        v923 = *v462;
        v924 = *v461;
        v925 = *a3;
        v926 = sub_1C55F8434(*(_QWORD *)(*a3 + 6936), *(_DWORD *)(*a3 + 6952), *v462, a3[1]);
        result = sub_1C55F8434(*(_QWORD *)(v925 + 6936), *(_DWORD *)(v925 + 6952), v924, a3[1]);
        if (v926 != (_DWORD)result)
        {
          if (v926 >= result)
            return result;
          goto LABEL_1186;
        }
        v927 = v923[1];
        if (v927)
        {
          v928 = 0;
          do
          {
            ++v928;
            v927 = *(_QWORD *)(v927 + 8);
          }
          while (v927);
        }
        else
        {
          v928 = 0;
        }
        v929 = (_QWORD **)v924[1];
        if (v929)
        {
          v930 = 0;
          do
          {
            ++v930;
            v929 = (_QWORD **)v929[1];
          }
          while (v929);
        }
        else
        {
          v930 = 0;
        }
        v931 = v928 > v930;
        if (v928 != v930)
          goto LABEL_1184;
        if ((*((_BYTE *)v923 + 23) & 0x10) != 0)
        {
          v932 = **(_QWORD **)*v923;
          v933 = *(_QWORD *)(v932 + 152);
          v934 = *(unsigned int *)(v932 + 168);
          if ((_DWORD)v934)
          {
            LODWORD(v935) = (v934 - 1) & ((v923 >> 4) ^ (v923 >> 9));
            v936 = (uint64_t **)(v933 + 16 * v935);
            v937 = *v936;
            if (*v936 != v923)
            {
              v938 = 1;
              do
              {
                if (v937 == (uint64_t *)-4096)
                  goto LABEL_1165;
                v939 = v935 + v938++;
                v935 = v939 & (v934 - 1);
                v937 = *(uint64_t **)(v933 + 16 * v935);
              }
              while (v937 != v923);
              v936 = (uint64_t **)(v933 + 16 * v935);
            }
          }
          else
          {
LABEL_1165:
            v936 = (uint64_t **)(v933 + 16 * v934);
          }
          v940 = (size_t *)v936[1];
          v942 = *v940;
          result = (uint64_t)(v940 + 2);
          v941 = v942;
          goto LABEL_1167;
        }
        v941 = 0;
        result = (uint64_t)&byte_1C871356D;
LABEL_1167:
        if ((*((_BYTE *)v924 + 23) & 0x10) != 0)
        {
          v943 = **(_QWORD **)*v924;
          v944 = *(_QWORD *)(v943 + 152);
          v945 = *(unsigned int *)(v943 + 168);
          if ((_DWORD)v945)
          {
            LODWORD(v946) = (v945 - 1) & ((v924 >> 4) ^ (v924 >> 9));
            v947 = (uint64_t **)(v944 + 16 * v946);
            v948 = *v947;
            if (*v947 != v924)
            {
              v949 = 1;
              do
              {
                if (v948 == (uint64_t *)-4096)
                  goto LABEL_1174;
                v950 = v946 + v949++;
                v946 = v950 & (v945 - 1);
                v948 = *(uint64_t **)(v944 + 16 * v946);
              }
              while (v948 != v924);
              v947 = (uint64_t **)(v944 + 16 * v946);
            }
          }
          else
          {
LABEL_1174:
            v947 = (uint64_t **)(v944 + 16 * v945);
          }
          v951 = v947[1];
          v954 = *v951;
          v952 = (char *)(v951 + 2);
          v953 = v954;
          goto LABEL_1176;
        }
        v953 = 0;
        v952 = &byte_1C871356D;
LABEL_1176:
        if (v953 >= v941)
          v955 = v941;
        else
          v955 = v953;
        if (v955 && (result = memcmp((const void *)result, v952, v955), (_DWORD)result))
        {
          if ((result & 0x80000000) != 0)
            return result;
        }
        else
        {
          v931 = v941 > v953;
LABEL_1184:
          if (!v931)
            return result;
        }
LABEL_1186:
        v956 = *v461;
        v957 = *v462;
        *v461 = *v462;
        *v462 = v956;
        v958 = *v460;
        v959 = *a3;
        v960 = sub_1C55F8434(*(_QWORD *)(*a3 + 6936), *(_DWORD *)(*a3 + 6952), v957, a3[1]);
        result = sub_1C55F8434(*(_QWORD *)(v959 + 6936), *(_DWORD *)(v959 + 6952), v958, a3[1]);
        if (v960 != (_DWORD)result)
        {
          if (v960 >= result)
            return result;
          goto LABEL_1226;
        }
        v961 = v957[1];
        if (v961)
        {
          v962 = 0;
          do
          {
            ++v962;
            v961 = *(_QWORD *)(v961 + 8);
          }
          while (v961);
        }
        else
        {
          v962 = 0;
        }
        v963 = (_QWORD **)v958[1];
        if (v963)
        {
          v964 = 0;
          do
          {
            ++v964;
            v963 = (_QWORD **)v963[1];
          }
          while (v963);
        }
        else
        {
          v964 = 0;
        }
        v965 = v962 > v964;
        if (v962 != v964)
          goto LABEL_1224;
        if ((*((_BYTE *)v957 + 23) & 0x10) != 0)
        {
          v966 = **(_QWORD **)*v957;
          v967 = *(_QWORD *)(v966 + 152);
          v968 = *(unsigned int *)(v966 + 168);
          if ((_DWORD)v968)
          {
            LODWORD(v969) = (v968 - 1) & ((v957 >> 4) ^ (v957 >> 9));
            v970 = (uint64_t **)(v967 + 16 * v969);
            v971 = *v970;
            if (*v970 != v957)
            {
              v972 = 1;
              do
              {
                if (v971 == (uint64_t *)-4096)
                  goto LABEL_1205;
                v973 = v969 + v972++;
                v969 = v973 & (v968 - 1);
                v971 = *(uint64_t **)(v967 + 16 * v969);
              }
              while (v971 != v957);
              v970 = (uint64_t **)(v967 + 16 * v969);
            }
          }
          else
          {
LABEL_1205:
            v970 = (uint64_t **)(v967 + 16 * v968);
          }
          v974 = (size_t *)v970[1];
          v976 = *v974;
          result = (uint64_t)(v974 + 2);
          v975 = v976;
          goto LABEL_1207;
        }
        v975 = 0;
        result = (uint64_t)&byte_1C871356D;
LABEL_1207:
        if ((*((_BYTE *)v958 + 23) & 0x10) != 0)
        {
          v977 = **(_QWORD **)*v958;
          v978 = *(_QWORD *)(v977 + 152);
          v979 = *(unsigned int *)(v977 + 168);
          if ((_DWORD)v979)
          {
            LODWORD(v980) = (v979 - 1) & ((v958 >> 4) ^ (v958 >> 9));
            v981 = (uint64_t **)(v978 + 16 * v980);
            v982 = *v981;
            if (*v981 != v958)
            {
              v983 = 1;
              do
              {
                if (v982 == (uint64_t *)-4096)
                  goto LABEL_1214;
                v984 = v980 + v983++;
                v980 = v984 & (v979 - 1);
                v982 = *(uint64_t **)(v978 + 16 * v980);
              }
              while (v982 != v958);
              v981 = (uint64_t **)(v978 + 16 * v980);
            }
          }
          else
          {
LABEL_1214:
            v981 = (uint64_t **)(v978 + 16 * v979);
          }
          v985 = v981[1];
          v988 = *v985;
          v986 = (char *)(v985 + 2);
          v987 = v988;
          goto LABEL_1216;
        }
        v987 = 0;
        v986 = &byte_1C871356D;
LABEL_1216:
        if (v987 >= v975)
          v989 = v975;
        else
          v989 = v987;
        if (v989 && (result = memcmp((const void *)result, v986, v989), (_DWORD)result))
        {
          if ((result & 0x80000000) != 0)
            return result;
        }
        else
        {
          v965 = v975 > v987;
LABEL_1224:
          if (!v965)
            return result;
        }
LABEL_1226:
        v990 = v1029[1];
        v991 = v1029[2];
        v992 = *v1029;
        v1029[1] = v991;
        v1029[2] = v990;
        v993 = *a3;
        v994 = sub_1C55F8434(*(_QWORD *)(*a3 + 6936), *(_DWORD *)(*a3 + 6952), v991, a3[1]);
        result = sub_1C55F8434(*(_QWORD *)(v993 + 6936), *(_DWORD *)(v993 + 6952), v992, a3[1]);
        if (v994 != (_DWORD)result)
        {
          if (v994 >= result)
            return result;
          goto LABEL_1242;
        }
        v995 = (_QWORD **)v991[1];
        if (v995)
        {
          v996 = 0;
          do
          {
            ++v996;
            v995 = (_QWORD **)v995[1];
          }
          while (v995);
        }
        else
        {
          v996 = 0;
        }
        v997 = v992[1];
        if (v997)
        {
          v998 = 0;
          do
          {
            ++v998;
            v997 = *(_QWORD *)(v997 + 8);
          }
          while (v997);
        }
        else
        {
          v998 = 0;
        }
        v999 = v996 > v998;
        if (v996 != v998)
          goto LABEL_1269;
        if ((*((_BYTE *)v991 + 23) & 0x10) == 0)
        {
          v1009 = 0;
          result = (uint64_t)&byte_1C871356D;
LABEL_1252:
          if ((*((_BYTE *)v992 + 23) & 0x10) == 0)
          {
            v1021 = 0;
            v1020 = &byte_1C871356D;
LABEL_1261:
            if (v1021 >= v1009)
              v1023 = v1009;
            else
              v1023 = v1021;
            if (v1023 && (result = memcmp((const void *)result, v1020, v1023), (_DWORD)result))
            {
              if ((result & 0x80000000) != 0)
                return result;
            }
            else
            {
              v999 = v1009 > v1021;
LABEL_1269:
              if (!v999)
                return result;
            }
LABEL_1242:
            *(int8x16_t *)v1029 = vextq_s8(*(int8x16_t *)v1029, *(int8x16_t *)v1029, 8uLL);
            return result;
          }
          v1011 = **(_QWORD **)*v992;
          v1012 = *(_QWORD *)(v1011 + 152);
          v1013 = *(unsigned int *)(v1011 + 168);
          if ((_DWORD)v1013)
          {
            LODWORD(v1014) = (v1013 - 1) & ((v992 >> 4) ^ (v992 >> 9));
            v1015 = (uint64_t **)(v1012 + 16 * v1014);
            v1016 = *v1015;
            if (*v1015 == v992)
            {
LABEL_1260:
              v1019 = v1015[1];
              v1022 = *v1019;
              v1020 = (char *)(v1019 + 2);
              v1021 = v1022;
              goto LABEL_1261;
            }
            v1017 = 1;
            while (v1016 != (uint64_t *)-4096)
            {
              v1018 = v1014 + v1017++;
              v1014 = v1018 & (v1013 - 1);
              v1016 = *(uint64_t **)(v1012 + 16 * v1014);
              if (v1016 == v992)
              {
                v1015 = (uint64_t **)(v1012 + 16 * v1014);
                goto LABEL_1260;
              }
            }
          }
          v1015 = (uint64_t **)(v1012 + 16 * v1013);
          goto LABEL_1260;
        }
        v1000 = **(_QWORD **)*v991;
        v1001 = *(_QWORD *)(v1000 + 152);
        v1002 = *(unsigned int *)(v1000 + 168);
        if (!(_DWORD)v1002)
          goto LABEL_1250;
        LODWORD(v1003) = (v1002 - 1) & ((v991 >> 4) ^ (v991 >> 9));
        v1004 = (uint64_t **)(v1001 + 16 * v1003);
        v1005 = *v1004;
        if (*v1004 != v991)
        {
          v1006 = 1;
          while (v1005 != (uint64_t *)-4096)
          {
            v1007 = v1003 + v1006++;
            v1003 = v1007 & (v1002 - 1);
            v1005 = *(uint64_t **)(v1001 + 16 * v1003);
            if (v1005 == v991)
            {
              v1004 = (uint64_t **)(v1001 + 16 * v1003);
              goto LABEL_1251;
            }
          }
LABEL_1250:
          v1004 = (uint64_t **)(v1001 + 16 * v1002);
        }
LABEL_1251:
        v1008 = (size_t *)v1004[1];
        v1010 = *v1008;
        result = (uint64_t)(v1008 + 2);
        v1009 = v1010;
        goto LABEL_1252;
      default:
        if (v10 <= 191)
        {
          v480 = v9 + 1;
          v481 = v9 == (uint64_t **)v7 || v480 == (uint64_t **)v7;
          v482 = v481;
          if ((a5 & 1) != 0)
          {
            if ((v482 & 1) != 0)
              return result;
            v483 = v9;
            while (1)
            {
              v484 = v483;
              v483 = v480;
              v485 = *v484;
              v486 = v484[1];
              v487 = *a3;
              v488 = sub_1C55F8434(*(_QWORD *)(*a3 + 6936), *(_DWORD *)(*a3 + 6952), v486, a3[1]);
              result = sub_1C55F8434(*(_QWORD *)(v487 + 6936), *(_DWORD *)(v487 + 6952), v485, a3[1]);
              if (v488 != (_DWORD)result)
              {
                if (v488 >= result)
                  goto LABEL_676;
                goto LABEL_628;
              }
              v489 = (_QWORD **)v486[1];
              if (v489)
              {
                v490 = 0;
                do
                {
                  ++v490;
                  v489 = (_QWORD **)v489[1];
                }
                while (v489);
              }
              else
              {
                v490 = 0;
              }
              v491 = (_QWORD **)v485[1];
              if (v491)
              {
                v492 = 0;
                do
                {
                  ++v492;
                  v491 = (_QWORD **)v491[1];
                }
                while (v491);
              }
              else
              {
                v492 = 0;
              }
              v493 = v490 > v492;
              if (v490 == v492)
              {
                if ((*((_BYTE *)v486 + 23) & 0x10) != 0)
                {
                  v494 = **(_QWORD **)*v486;
                  v495 = *(_QWORD *)(v494 + 152);
                  v496 = *(unsigned int *)(v494 + 168);
                  if ((_DWORD)v496)
                  {
                    LODWORD(v497) = (v496 - 1) & ((v486 >> 4) ^ (v486 >> 9));
                    v498 = (uint64_t **)(v495 + 16 * v497);
                    v499 = *v498;
                    if (*v498 != v486)
                    {
                      v500 = 1;
                      do
                      {
                        if (v499 == (uint64_t *)-4096)
                          goto LABEL_607;
                        v501 = v497 + v500++;
                        v497 = v501 & (v496 - 1);
                        v499 = *(uint64_t **)(v495 + 16 * v497);
                      }
                      while (v499 != v486);
                      v498 = (uint64_t **)(v495 + 16 * v497);
                    }
                  }
                  else
                  {
LABEL_607:
                    v498 = (uint64_t **)(v495 + 16 * v496);
                  }
                  v502 = (size_t *)v498[1];
                  v504 = *v502;
                  result = (uint64_t)(v502 + 2);
                  v503 = v504;
                }
                else
                {
                  v503 = 0;
                  result = (uint64_t)&byte_1C871356D;
                }
                if ((*((_BYTE *)v485 + 23) & 0x10) != 0)
                {
                  v505 = **(_QWORD **)*v485;
                  v506 = *(_QWORD *)(v505 + 152);
                  v507 = *(unsigned int *)(v505 + 168);
                  if ((_DWORD)v507)
                  {
                    LODWORD(v508) = (v507 - 1) & ((v485 >> 4) ^ (v485 >> 9));
                    v509 = (uint64_t **)(v506 + 16 * v508);
                    v510 = *v509;
                    if (*v509 != v485)
                    {
                      v511 = 1;
                      do
                      {
                        if (v510 == (uint64_t *)-4096)
                          goto LABEL_616;
                        v512 = v508 + v511++;
                        v508 = v512 & (v507 - 1);
                        v510 = *(uint64_t **)(v506 + 16 * v508);
                      }
                      while (v510 != v485);
                      v509 = (uint64_t **)(v506 + 16 * v508);
                    }
                  }
                  else
                  {
LABEL_616:
                    v509 = (uint64_t **)(v506 + 16 * v507);
                  }
                  v513 = v509[1];
                  v516 = *v513;
                  v514 = (char *)(v513 + 2);
                  v515 = v516;
                }
                else
                {
                  v515 = 0;
                  v514 = &byte_1C871356D;
                }
                if (v515 >= v503)
                  v517 = v503;
                else
                  v517 = v515;
                if (v517)
                {
                  result = memcmp((const void *)result, v514, v517);
                  if ((_DWORD)result)
                  {
                    if ((result & 0x80000000) != 0)
                      goto LABEL_676;
                    goto LABEL_628;
                  }
                }
                v493 = v503 > v515;
              }
              if (!v493)
                goto LABEL_676;
LABEL_628:
              v518 = v484[1];
              v484[1] = *v484;
              v519 = v1029;
              if (v484 == v1029)
                goto LABEL_675;
              v520 = v484;
              while (1)
              {
                v522 = *--v520;
                v521 = v522;
                v523 = *a3;
                v524 = sub_1C55F8434(*(_QWORD *)(*a3 + 6936), *(_DWORD *)(*a3 + 6952), v518, a3[1]);
                result = sub_1C55F8434(*(_QWORD *)(v523 + 6936), *(_DWORD *)(v523 + 6952), v522, a3[1]);
                if (v524 != (_DWORD)result)
                {
                  if (v524 >= result)
                    break;
                  goto LABEL_670;
                }
                v525 = (_QWORD **)v518[1];
                if (v525)
                {
                  v526 = 0;
                  do
                  {
                    ++v526;
                    v525 = (_QWORD **)v525[1];
                  }
                  while (v525);
                }
                else
                {
                  v526 = 0;
                }
                v527 = v521[1];
                if (v527)
                {
                  v528 = 0;
                  do
                  {
                    ++v528;
                    v527 = *(_QWORD *)(v527 + 8);
                  }
                  while (v527);
                }
                else
                {
                  v528 = 0;
                }
                v529 = v526 > v528;
                if (v526 == v528)
                {
                  if ((*((_BYTE *)v518 + 23) & 0x10) != 0)
                  {
                    v530 = **(_QWORD **)*v518;
                    v531 = *(_QWORD *)(v530 + 152);
                    v532 = *(unsigned int *)(v530 + 168);
                    if ((_DWORD)v532)
                    {
                      LODWORD(v533) = (v532 - 1) & ((v518 >> 4) ^ (v518 >> 9));
                      v534 = (uint64_t **)(v531 + 16 * v533);
                      v535 = *v534;
                      if (*v534 != v518)
                      {
                        v536 = 1;
                        do
                        {
                          if (v535 == (uint64_t *)-4096)
                            goto LABEL_649;
                          v537 = v533 + v536++;
                          v533 = v537 & (v532 - 1);
                          v535 = *(uint64_t **)(v531 + 16 * v533);
                        }
                        while (v535 != v518);
                        v534 = (uint64_t **)(v531 + 16 * v533);
                      }
                    }
                    else
                    {
LABEL_649:
                      v534 = (uint64_t **)(v531 + 16 * v532);
                    }
                    v538 = (size_t *)v534[1];
                    v540 = *v538;
                    result = (uint64_t)(v538 + 2);
                    v539 = v540;
                  }
                  else
                  {
                    v539 = 0;
                    result = (uint64_t)&byte_1C871356D;
                  }
                  if ((*((_BYTE *)v521 + 23) & 0x10) != 0)
                  {
                    v541 = **(_QWORD **)*v521;
                    v542 = *(_QWORD *)(v541 + 152);
                    v543 = *(unsigned int *)(v541 + 168);
                    if ((_DWORD)v543)
                    {
                      LODWORD(v544) = (v543 - 1) & ((v521 >> 4) ^ (v521 >> 9));
                      v545 = (uint64_t **)(v542 + 16 * v544);
                      v546 = *v545;
                      if (*v545 != v521)
                      {
                        v547 = 1;
                        do
                        {
                          if (v546 == (uint64_t *)-4096)
                            goto LABEL_658;
                          v548 = v544 + v547++;
                          v544 = v548 & (v543 - 1);
                          v546 = *(uint64_t **)(v542 + 16 * v544);
                        }
                        while (v546 != v521);
                        v545 = (uint64_t **)(v542 + 16 * v544);
                      }
                    }
                    else
                    {
LABEL_658:
                      v545 = (uint64_t **)(v542 + 16 * v543);
                    }
                    v549 = v545[1];
                    v552 = *v549;
                    v550 = (char *)(v549 + 2);
                    v551 = v552;
                  }
                  else
                  {
                    v551 = 0;
                    v550 = &byte_1C871356D;
                  }
                  if (v551 >= v539)
                    v553 = v539;
                  else
                    v553 = v551;
                  if (v553)
                  {
                    result = memcmp((const void *)result, v550, v553);
                    if ((_DWORD)result)
                    {
                      if ((result & 0x80000000) != 0)
                        break;
                      goto LABEL_670;
                    }
                  }
                  v529 = v539 > v551;
                }
                if (!v529)
                  break;
LABEL_670:
                *v484 = *(v484 - 1);
                v484 = v520;
                if (v520 == v1029)
                {
                  v519 = v1029;
                  goto LABEL_675;
                }
              }
              v519 = v484;
LABEL_675:
              *v519 = v518;
LABEL_676:
              v480 = v483 + 1;
              if (v483 + 1 == a2)
                return result;
            }
          }
          if ((v482 & 1) != 0)
            return result;
LABEL_1010:
          v816 = v1029;
          v1029 = v480;
          v817 = *v816;
          v818 = v816[1];
          v819 = *a3;
          v820 = sub_1C55F8434(*(_QWORD *)(*a3 + 6936), *(_DWORD *)(*a3 + 6952), v818, a3[1]);
          result = sub_1C55F8434(*(_QWORD *)(v819 + 6936), *(_DWORD *)(v819 + 6952), v817, a3[1]);
          v821 = v820 >= result;
          if (v820 != (_DWORD)result)
          {
            v823 = a2;
            v825 = v1029;
            if (v821)
              goto LABEL_1095;
            goto LABEL_1051;
          }
          v822 = (_QWORD **)v818[1];
          v823 = a2;
          v824 = 0;
          if (v822)
          {
            v825 = v1029;
            do
            {
              ++v824;
              v822 = (_QWORD **)v822[1];
            }
            while (v822);
          }
          else
          {
            v825 = v1029;
          }
          v826 = (_QWORD **)v817[1];
          if (v826)
          {
            v827 = 0;
            do
            {
              ++v827;
              v826 = (_QWORD **)v826[1];
            }
            while (v826);
          }
          else
          {
            v827 = 0;
          }
          v828 = v824 > v827;
          if (v824 == v827)
          {
            if ((*((_BYTE *)v818 + 23) & 0x10) != 0)
            {
              v829 = **(_QWORD **)*v818;
              v830 = *(_QWORD *)(v829 + 152);
              v831 = *(unsigned int *)(v829 + 168);
              if ((_DWORD)v831)
              {
                LODWORD(v832) = (v831 - 1) & ((v818 >> 4) ^ (v818 >> 9));
                v833 = (uint64_t **)(v830 + 16 * v832);
                v834 = *v833;
                if (*v833 != v818)
                {
                  v835 = 1;
                  do
                  {
                    if (v834 == (uint64_t *)-4096)
                      goto LABEL_1030;
                    v836 = v832 + v835++;
                    v832 = v836 & (v831 - 1);
                    v834 = *(uint64_t **)(v830 + 16 * v832);
                  }
                  while (v834 != v818);
                  v833 = (uint64_t **)(v830 + 16 * v832);
                }
              }
              else
              {
LABEL_1030:
                v833 = (uint64_t **)(v830 + 16 * v831);
              }
              v837 = (size_t *)v833[1];
              v839 = *v837;
              result = (uint64_t)(v837 + 2);
              v838 = v839;
            }
            else
            {
              v838 = 0;
              result = (uint64_t)&byte_1C871356D;
            }
            if ((*((_BYTE *)v817 + 23) & 0x10) != 0)
            {
              v840 = **(_QWORD **)*v817;
              v841 = *(_QWORD *)(v840 + 152);
              v842 = *(unsigned int *)(v840 + 168);
              if ((_DWORD)v842)
              {
                LODWORD(v843) = (v842 - 1) & ((v817 >> 4) ^ (v817 >> 9));
                v844 = (uint64_t **)(v841 + 16 * v843);
                v845 = *v844;
                if (*v844 != v817)
                {
                  v846 = 1;
                  do
                  {
                    if (v845 == (uint64_t *)-4096)
                      goto LABEL_1039;
                    v847 = v843 + v846++;
                    v843 = v847 & (v842 - 1);
                    v845 = *(uint64_t **)(v841 + 16 * v843);
                  }
                  while (v845 != v817);
                  v844 = (uint64_t **)(v841 + 16 * v843);
                }
              }
              else
              {
LABEL_1039:
                v844 = (uint64_t **)(v841 + 16 * v842);
              }
              v848 = v844[1];
              v851 = *v848;
              v849 = (char *)(v848 + 2);
              v850 = v851;
            }
            else
            {
              v850 = 0;
              v849 = &byte_1C871356D;
            }
            if (v850 >= v838)
              v852 = v838;
            else
              v852 = v850;
            if (v852)
            {
              result = memcmp((const void *)result, v849, v852);
              if ((_DWORD)result)
              {
                if ((result & 0x80000000) != 0)
                  goto LABEL_1095;
                goto LABEL_1051;
              }
            }
            v828 = v838 > v850;
          }
          if (!v828)
            goto LABEL_1095;
LABEL_1051:
          v853 = *v825;
          v854 = (*v825 >> 4) ^ (*v825 >> 9);
          while (1)
          {
            while (1)
            {
              v855 = v825;
              v825 = v816;
              *v855 = *v816;
              v857 = *--v816;
              v856 = v857;
              v858 = *a3;
              v859 = sub_1C55F8434(*(_QWORD *)(*a3 + 6936), *(_DWORD *)(*a3 + 6952), v853, a3[1]);
              result = sub_1C55F8434(*(_QWORD *)(v858 + 6936), *(_DWORD *)(v858 + 6952), v857, a3[1]);
              if (v859 == (_DWORD)result)
                break;
              if (v859 >= result)
                goto LABEL_1094;
            }
            v860 = (_QWORD **)v853[1];
            if (v860)
            {
              v861 = 0;
              do
              {
                ++v861;
                v860 = (_QWORD **)v860[1];
              }
              while (v860);
            }
            else
            {
              v861 = 0;
            }
            v862 = v856[1];
            if (v862)
            {
              v863 = 0;
              do
              {
                ++v863;
                v862 = *(_QWORD *)(v862 + 8);
              }
              while (v862);
            }
            else
            {
              v863 = 0;
            }
            v864 = v861 > v863;
            if (v861 != v863)
              goto LABEL_1090;
            if ((*((_BYTE *)v853 + 23) & 0x10) != 0)
            {
              v865 = **(_QWORD **)*v853;
              v866 = *(_QWORD *)(v865 + 152);
              v867 = *(unsigned int *)(v865 + 168);
              if ((_DWORD)v867)
              {
                LODWORD(v868) = (v867 - 1) & v854;
                v869 = (uint64_t **)(v866 + 16 * v868);
                v870 = *v869;
                if (*v869 != v853)
                {
                  v871 = 1;
                  do
                  {
                    if (v870 == (uint64_t *)-4096)
                      goto LABEL_1071;
                    v872 = v868 + v871++;
                    v868 = v872 & (v867 - 1);
                    v870 = *(uint64_t **)(v866 + 16 * v868);
                  }
                  while (v870 != v853);
                  v869 = (uint64_t **)(v866 + 16 * v868);
                }
              }
              else
              {
LABEL_1071:
                v869 = (uint64_t **)(v866 + 16 * v867);
              }
              v873 = (size_t *)v869[1];
              v875 = *v873;
              result = (uint64_t)(v873 + 2);
              v874 = v875;
            }
            else
            {
              v874 = 0;
              result = (uint64_t)&byte_1C871356D;
            }
            if ((*((_BYTE *)v856 + 23) & 0x10) != 0)
            {
              v876 = **(_QWORD **)*v856;
              v877 = *(_QWORD *)(v876 + 152);
              v878 = *(unsigned int *)(v876 + 168);
              if ((_DWORD)v878)
              {
                LODWORD(v879) = (v878 - 1) & ((v856 >> 4) ^ (v856 >> 9));
                v880 = (uint64_t **)(v877 + 16 * v879);
                v881 = *v880;
                if (*v880 != v856)
                {
                  v882 = 1;
                  do
                  {
                    if (v881 == (uint64_t *)-4096)
                      goto LABEL_1080;
                    v883 = v879 + v882++;
                    v879 = v883 & (v878 - 1);
                    v881 = *(uint64_t **)(v877 + 16 * v879);
                  }
                  while (v881 != v856);
                  v880 = (uint64_t **)(v877 + 16 * v879);
                }
              }
              else
              {
LABEL_1080:
                v880 = (uint64_t **)(v877 + 16 * v878);
              }
              v884 = v880[1];
              v887 = *v884;
              v885 = (char *)(v884 + 2);
              v886 = v887;
            }
            else
            {
              v886 = 0;
              v885 = &byte_1C871356D;
            }
            if (v886 >= v874)
              v888 = v874;
            else
              v888 = v886;
            if (v888 && (result = memcmp((const void *)result, v885, v888), (_DWORD)result))
            {
              if ((result & 0x80000000) != 0)
                goto LABEL_1094;
            }
            else
            {
              v864 = v874 > v886;
LABEL_1090:
              if (!v864)
              {
LABEL_1094:
                *v825 = v853;
                v823 = a2;
                v825 = v1029;
LABEL_1095:
                v480 = v825 + 1;
                if (v825 + 1 == v823)
                  return result;
                goto LABEL_1010;
              }
            }
          }
        }
        if (!a4)
        {
          if (v9 == (uint64_t **)v7)
            return result;
          v554 = (v11 - 2) >> 1;
          v555 = v554;
          v556 = v9;
          v1034 = v11;
          v1026 = v554;
          while (1)
          {
            v557 = v555;
            if (v554 < v555)
              goto LABEL_856;
            v558 = (2 * v555) | 1;
            v559 = &v556[v558];
            if (2 * v555 + 2 < (uint64_t)v11)
              break;
LABEL_726:
            v597 = *v559;
            v598 = v556[v557];
            v599 = *a3;
            v600 = sub_1C55F8434(*(_QWORD *)(*a3 + 6936), *(_DWORD *)(*a3 + 6952), *v559, a3[1]);
            result = sub_1C55F8434(*(_QWORD *)(v599 + 6936), *(_DWORD *)(v599 + 6952), v598, a3[1]);
            v554 = v1026;
            if (v600 == (_DWORD)result)
            {
              v601 = v597[1];
              if (v601)
              {
                v602 = 0;
                v556 = v1029;
                do
                {
                  ++v602;
                  v601 = *(_QWORD *)(v601 + 8);
                }
                while (v601);
              }
              else
              {
                v602 = 0;
                v556 = v1029;
              }
              v603 = (_QWORD **)v598[1];
              if (v603)
              {
                v604 = 0;
                do
                {
                  ++v604;
                  v603 = (_QWORD **)v603[1];
                }
                while (v603);
              }
              else
              {
                v604 = 0;
              }
              v605 = v602 > v604;
              if (v602 == v604)
              {
                if ((*((_BYTE *)v597 + 23) & 0x10) != 0)
                {
                  v606 = **(_QWORD **)*v597;
                  v607 = *(_QWORD *)(v606 + 152);
                  v608 = *(unsigned int *)(v606 + 168);
                  if ((_DWORD)v608)
                  {
                    LODWORD(v609) = (v608 - 1) & ((v597 >> 4) ^ (v597 >> 9));
                    v610 = (uint64_t **)(v607 + 16 * v609);
                    v611 = *v610;
                    if (*v610 != v597)
                    {
                      v612 = 1;
                      do
                      {
                        if (v611 == (uint64_t *)-4096)
                          goto LABEL_745;
                        v613 = v609 + v612++;
                        v609 = v613 & (v608 - 1);
                        v611 = *(uint64_t **)(v607 + 16 * v609);
                      }
                      while (v611 != v597);
                      v610 = (uint64_t **)(v607 + 16 * v609);
                    }
                  }
                  else
                  {
LABEL_745:
                    v610 = (uint64_t **)(v607 + 16 * v608);
                  }
                  v614 = (size_t *)v610[1];
                  v616 = *v614;
                  result = (uint64_t)(v614 + 2);
                  v615 = v616;
                }
                else
                {
                  v615 = 0;
                  result = (uint64_t)&byte_1C871356D;
                }
                if ((*((_BYTE *)v598 + 23) & 0x10) != 0)
                {
                  v617 = **(_QWORD **)*v598;
                  v618 = *(_QWORD *)(v617 + 152);
                  v619 = *(unsigned int *)(v617 + 168);
                  if ((_DWORD)v619)
                  {
                    LODWORD(v620) = (v619 - 1) & ((v598 >> 4) ^ (v598 >> 9));
                    v621 = (uint64_t **)(v618 + 16 * v620);
                    v622 = *v621;
                    if (*v621 != v598)
                    {
                      v623 = 1;
                      do
                      {
                        if (v622 == (uint64_t *)-4096)
                          goto LABEL_754;
                        v624 = v620 + v623++;
                        v620 = v624 & (v619 - 1);
                        v622 = *(uint64_t **)(v618 + 16 * v620);
                      }
                      while (v622 != v598);
                      v621 = (uint64_t **)(v618 + 16 * v620);
                    }
                  }
                  else
                  {
LABEL_754:
                    v621 = (uint64_t **)(v618 + 16 * v619);
                  }
                  v625 = v621[1];
                  v628 = *v625;
                  v626 = (char *)(v625 + 2);
                  v627 = v628;
                }
                else
                {
                  v627 = 0;
                  v626 = &byte_1C871356D;
                }
                if (v627 >= v615)
                  v629 = v615;
                else
                  v629 = v627;
                if (v629)
                {
                  result = memcmp((const void *)result, v626, v629);
                  if ((_DWORD)result)
                  {
                    if ((result & 0x80000000) == 0)
                      goto LABEL_856;
                    goto LABEL_765;
                  }
                }
                v605 = v615 > v627;
              }
              if (v605)
                goto LABEL_856;
            }
            else
            {
              v556 = v1029;
              if (v600 < result)
                goto LABEL_856;
            }
LABEL_765:
            v630 = v556[v557];
            v1024 = v557;
            v556[v557] = *v559;
            if (v1026 < v558)
              goto LABEL_855;
            while (1)
            {
              v631 = v559;
              v632 = 2 * v558;
              v558 = (2 * v558) | 1;
              v559 = &v556[v558];
              v633 = v632 + 2;
              v1031 = v631;
              if (v632 + 2 >= (uint64_t)v11)
                goto LABEL_809;
              v634 = *v559;
              v635 = v559[1];
              v636 = *a3;
              v637 = sub_1C55F8434(*(_QWORD *)(*a3 + 6936), *(_DWORD *)(*a3 + 6952), *v559, a3[1]);
              v638 = sub_1C55F8434(*(_QWORD *)(v636 + 6936), *(_DWORD *)(v636 + 6952), v635, a3[1]);
              if (v637 == v638)
              {
                v639 = v634[1];
                if (v639)
                {
                  v640 = 0;
                  v11 = v1034;
                  do
                  {
                    ++v640;
                    v639 = *(_QWORD *)(v639 + 8);
                  }
                  while (v639);
                }
                else
                {
                  v640 = 0;
                  v11 = v1034;
                }
                v641 = (_QWORD **)v635[1];
                if (v641)
                {
                  v642 = 0;
                  do
                  {
                    ++v642;
                    v641 = (_QWORD **)v641[1];
                  }
                  while (v641);
                }
                else
                {
                  v642 = 0;
                }
                v643 = v640 > v642;
                if (v640 != v642)
                  goto LABEL_803;
                if ((*((_BYTE *)v634 + 23) & 0x10) != 0)
                {
                  v644 = **(_QWORD **)*v634;
                  v645 = *(_QWORD *)(v644 + 152);
                  v646 = *(unsigned int *)(v644 + 168);
                  if ((_DWORD)v646)
                  {
                    LODWORD(v647) = (v646 - 1) & ((v634 >> 4) ^ (v634 >> 9));
                    v648 = (uint64_t **)(v645 + 16 * v647);
                    v649 = *v648;
                    if (*v648 != v634)
                    {
                      v650 = 1;
                      do
                      {
                        if (v649 == (uint64_t *)-4096)
                          goto LABEL_785;
                        v651 = v647 + v650++;
                        v647 = v651 & (v646 - 1);
                        v649 = *(uint64_t **)(v645 + 16 * v647);
                      }
                      while (v649 != v634);
                      v648 = (uint64_t **)(v645 + 16 * v647);
                    }
                  }
                  else
                  {
LABEL_785:
                    v648 = (uint64_t **)(v645 + 16 * v646);
                  }
                  v653 = v648[1];
                  v656 = *v653;
                  v654 = (char *)(v653 + 2);
                  v655 = v656;
                }
                else
                {
                  v655 = 0;
                  v654 = &byte_1C871356D;
                }
                if ((*((_BYTE *)v635 + 23) & 0x10) != 0)
                {
                  v657 = **(_QWORD **)*v635;
                  v658 = *(_QWORD *)(v657 + 152);
                  v659 = *(unsigned int *)(v657 + 168);
                  if ((_DWORD)v659)
                  {
                    LODWORD(v660) = (v659 - 1) & ((v635 >> 4) ^ (v635 >> 9));
                    v661 = (uint64_t **)(v658 + 16 * v660);
                    v662 = *v661;
                    if (*v661 != v635)
                    {
                      v663 = 1;
                      do
                      {
                        if (v662 == (uint64_t *)-4096)
                          goto LABEL_794;
                        v664 = v660 + v663++;
                        v660 = v664 & (v659 - 1);
                        v662 = *(uint64_t **)(v658 + 16 * v660);
                      }
                      while (v662 != v635);
                      v661 = (uint64_t **)(v658 + 16 * v660);
                    }
                  }
                  else
                  {
LABEL_794:
                    v661 = (uint64_t **)(v658 + 16 * v659);
                  }
                  v665 = v661[1];
                  v668 = *v665;
                  v666 = (char *)(v665 + 2);
                  v667 = v668;
                }
                else
                {
                  v667 = 0;
                  v666 = &byte_1C871356D;
                }
                if (v667 >= v655)
                  v669 = v655;
                else
                  v669 = v667;
                if (!v669 || (v670 = memcmp(v654, v666, v669)) == 0)
                {
                  v643 = v655 > v667;
LABEL_803:
                  v652 = v643;
                  goto LABEL_806;
                }
                v652 = v670 >= 0;
              }
              else
              {
                v652 = v637 < v638;
                v11 = v1034;
              }
LABEL_806:
              if (v652)
              {
                ++v559;
                v558 = v633;
              }
              v554 = v1026;
LABEL_809:
              v671 = *v559;
              v672 = *a3;
              v673 = sub_1C55F8434(*(_QWORD *)(*a3 + 6936), *(_DWORD *)(*a3 + 6952), *v559, a3[1]);
              result = sub_1C55F8434(*(_QWORD *)(v672 + 6936), *(_DWORD *)(v672 + 6952), v630, a3[1]);
              if (v673 != (_DWORD)result)
              {
                v556 = v1029;
                if (v673 < result)
                  break;
                goto LABEL_848;
              }
              v674 = v671[1];
              if (v674)
              {
                v675 = 0;
                v556 = v1029;
                do
                {
                  ++v675;
                  v674 = *(_QWORD *)(v674 + 8);
                }
                while (v674);
              }
              else
              {
                v675 = 0;
                v556 = v1029;
              }
              v676 = (_QWORD **)v630[1];
              if (v676)
              {
                v677 = 0;
                do
                {
                  ++v677;
                  v676 = (_QWORD **)v676[1];
                }
                while (v676);
              }
              else
              {
                v677 = 0;
              }
              v678 = v675 > v677;
              if (v675 == v677)
              {
                if ((*((_BYTE *)v671 + 23) & 0x10) != 0)
                {
                  v679 = **(_QWORD **)*v671;
                  v680 = *(_QWORD *)(v679 + 152);
                  v681 = *(unsigned int *)(v679 + 168);
                  if ((_DWORD)v681)
                  {
                    LODWORD(v682) = (v681 - 1) & ((v671 >> 4) ^ (v671 >> 9));
                    v683 = (uint64_t **)(v680 + 16 * v682);
                    v684 = *v683;
                    if (*v683 != v671)
                    {
                      v685 = 1;
                      do
                      {
                        if (v684 == (uint64_t *)-4096)
                          goto LABEL_828;
                        v686 = v682 + v685++;
                        v682 = v686 & (v681 - 1);
                        v684 = *(uint64_t **)(v680 + 16 * v682);
                      }
                      while (v684 != v671);
                      v683 = (uint64_t **)(v680 + 16 * v682);
                    }
                  }
                  else
                  {
LABEL_828:
                    v683 = (uint64_t **)(v680 + 16 * v681);
                  }
                  v687 = (size_t *)v683[1];
                  v689 = *v687;
                  result = (uint64_t)(v687 + 2);
                  v688 = v689;
                }
                else
                {
                  v688 = 0;
                  result = (uint64_t)&byte_1C871356D;
                }
                if ((*((_BYTE *)v630 + 23) & 0x10) != 0)
                {
                  v690 = **(_QWORD **)*v630;
                  v691 = *(_QWORD *)(v690 + 152);
                  v692 = *(unsigned int *)(v690 + 168);
                  if ((_DWORD)v692)
                  {
                    LODWORD(v693) = (v692 - 1) & ((v630 >> 4) ^ (v630 >> 9));
                    v694 = (uint64_t **)(v691 + 16 * v693);
                    v695 = *v694;
                    if (*v694 != v630)
                    {
                      v696 = 1;
                      do
                      {
                        if (v695 == (uint64_t *)-4096)
                          goto LABEL_837;
                        v697 = v693 + v696++;
                        v693 = v697 & (v692 - 1);
                        v695 = *(uint64_t **)(v691 + 16 * v693);
                      }
                      while (v695 != v630);
                      v694 = (uint64_t **)(v691 + 16 * v693);
                    }
                  }
                  else
                  {
LABEL_837:
                    v694 = (uint64_t **)(v691 + 16 * v692);
                  }
                  v698 = v694[1];
                  v701 = *v698;
                  v699 = (char *)(v698 + 2);
                  v700 = v701;
                }
                else
                {
                  v700 = 0;
                  v699 = &byte_1C871356D;
                }
                if (v700 >= v688)
                  v702 = v688;
                else
                  v702 = v700;
                if (v702)
                {
                  result = memcmp((const void *)result, v699, v702);
                  if ((_DWORD)result)
                  {
                    if ((result & 0x80000000) == 0)
                      break;
                    goto LABEL_848;
                  }
                }
                v678 = v688 > v700;
              }
              if (v678)
                break;
LABEL_848:
              *v1031 = *v559;
              if (v554 < v558)
                goto LABEL_855;
            }
            v559 = v1031;
LABEL_855:
            *v559 = v630;
            v557 = v1024;
LABEL_856:
            v555 = v557 - 1;
            if (!v557)
            {
LABEL_908:
              v742 = 0;
              v743 = v1029;
              v1027 = *v1029;
              v744 = (v11 - 2) >> 1;
              v1032 = v744;
              v1035 = v11;
              while (1)
              {
                v745 = &v743[v742 + 1];
                v746 = (2 * v742) | 1;
                v747 = 2 * v742 + 2;
                if (v747 < (uint64_t)v11)
                  break;
LABEL_952:
                *v743 = *v745;
                v743 = v745;
                v742 = v746;
                if (v746 > v744)
                {
                  v782 = a2 - 1;
                  v481 = v745 == --a2;
                  if (v481)
                  {
                    *v745 = v1027;
                    goto LABEL_1002;
                  }
                  *v745 = *v782;
                  *v782 = v1027;
                  v783 = (char *)v745 - (char *)v1029 + 8;
                  if (v783 >= 9)
                  {
                    v784 = ((unint64_t)v783 >> 3) - 2;
                    v704 = v784 >> 1;
                    v738 = &v1029[v784 >> 1];
                    v785 = *v738;
                    v786 = *v745;
                    v787 = *a3;
                    v788 = sub_1C55F8434(*(_QWORD *)(*a3 + 6936), *(_DWORD *)(*a3 + 6952), *v738, a3[1]);
                    result = sub_1C55F8434(*(_QWORD *)(v787 + 6936), *(_DWORD *)(v787 + 6952), v786, a3[1]);
                    if (v788 == (_DWORD)result)
                    {
                      v789 = v785[1];
                      if (v789)
                      {
                        v790 = 0;
                        v11 = v1035;
                        do
                        {
                          ++v790;
                          v789 = *(_QWORD *)(v789 + 8);
                        }
                        while (v789);
                      }
                      else
                      {
                        v790 = 0;
                        v11 = v1035;
                      }
                      v791 = (_QWORD **)v786[1];
                      if (v791)
                      {
                        v792 = 0;
                        do
                        {
                          ++v792;
                          v791 = (_QWORD **)v791[1];
                        }
                        while (v791);
                      }
                      else
                      {
                        v792 = 0;
                      }
                      v793 = v790 > v792;
                      if (v790 == v792)
                      {
                        if ((*((_BYTE *)v785 + 23) & 0x10) != 0)
                        {
                          v794 = **(_QWORD **)*v785;
                          v795 = *(_QWORD *)(v794 + 152);
                          v796 = *(unsigned int *)(v794 + 168);
                          if ((_DWORD)v796)
                          {
                            LODWORD(v797) = (v796 - 1) & ((v785 >> 4) ^ (v785 >> 9));
                            v798 = (uint64_t **)(v795 + 16 * v797);
                            v799 = *v798;
                            if (*v798 != v785)
                            {
                              v800 = 1;
                              do
                              {
                                if (v799 == (uint64_t *)-4096)
                                  goto LABEL_978;
                                v801 = v797 + v800++;
                                v797 = v801 & (v796 - 1);
                                v799 = *(uint64_t **)(v795 + 16 * v797);
                              }
                              while (v799 != v785);
                              v798 = (uint64_t **)(v795 + 16 * v797);
                            }
                          }
                          else
                          {
LABEL_978:
                            v798 = (uint64_t **)(v795 + 16 * v796);
                          }
                          v802 = (size_t *)v798[1];
                          v803 = *v802;
                          result = (uint64_t)(v802 + 2);
                          v739 = v803;
                        }
                        else
                        {
                          v739 = 0;
                          result = (uint64_t)&byte_1C871356D;
                        }
                        if ((*((_BYTE *)v786 + 23) & 0x10) != 0)
                        {
                          v804 = **(_QWORD **)*v786;
                          v805 = *(_QWORD *)(v804 + 152);
                          v806 = *(unsigned int *)(v804 + 168);
                          if ((_DWORD)v806)
                          {
                            LODWORD(v807) = (v806 - 1) & ((v786 >> 4) ^ (v786 >> 9));
                            v808 = (uint64_t **)(v805 + 16 * v807);
                            v809 = *v808;
                            if (*v808 != v786)
                            {
                              v810 = 1;
                              do
                              {
                                if (v809 == (uint64_t *)-4096)
                                  goto LABEL_987;
                                v811 = v807 + v810++;
                                v807 = v811 & (v806 - 1);
                                v809 = *(uint64_t **)(v805 + 16 * v807);
                              }
                              while (v809 != v786);
                              v808 = (uint64_t **)(v805 + 16 * v807);
                            }
                          }
                          else
                          {
LABEL_987:
                            v808 = (uint64_t **)(v805 + 16 * v806);
                          }
                          v812 = v808[1];
                          v813 = *v812;
                          v741 = (char *)(v812 + 2);
                          v740 = v813;
                        }
                        else
                        {
                          v740 = 0;
                          v741 = &byte_1C871356D;
                        }
                        if (v740 >= v739)
                          v814 = v739;
                        else
                          v814 = v740;
                        if (v814)
                        {
                          result = memcmp((const void *)result, v741, v814);
                          if ((_DWORD)result)
                          {
                            if ((result & 0x80000000) != 0)
                              goto LABEL_1002;
LABEL_999:
                            v815 = *v745;
                            *v745 = *v738;
                            if (v784 < 2)
                            {
LABEL_1000:
                              v705 = v738;
LABEL_1001:
                              *v705 = v815;
                              v11 = v1035;
                              goto LABEL_1002;
                            }
                            while (2)
                            {
                              v703 = v704 - 1;
                              v704 = (v704 - 1) >> 1;
                              v705 = &v1029[v704];
                              v706 = *v705;
                              v707 = *a3;
                              v708 = sub_1C55F8434(*(_QWORD *)(*a3 + 6936), *(_DWORD *)(*a3 + 6952), *v705, a3[1]);
                              result = sub_1C55F8434(*(_QWORD *)(v707 + 6936), *(_DWORD *)(v707 + 6952), v815, a3[1]);
                              if (v708 != (_DWORD)result)
                              {
                                if (v708 >= result)
                                  goto LABEL_1000;
                                goto LABEL_902;
                              }
                              v709 = v706[1];
                              if (v709)
                              {
                                v710 = 0;
                                do
                                {
                                  ++v710;
                                  v709 = *(_QWORD *)(v709 + 8);
                                }
                                while (v709);
                              }
                              else
                              {
                                v710 = 0;
                              }
                              v711 = (_QWORD **)v815[1];
                              if (v711)
                              {
                                v712 = 0;
                                do
                                {
                                  ++v712;
                                  v711 = (_QWORD **)v711[1];
                                }
                                while (v711);
                              }
                              else
                              {
                                v712 = 0;
                              }
                              v713 = v710 > v712;
                              if (v710 == v712)
                              {
                                if ((*((_BYTE *)v706 + 23) & 0x10) != 0)
                                {
                                  v714 = **(_QWORD **)*v706;
                                  v715 = *(_QWORD *)(v714 + 152);
                                  v716 = *(unsigned int *)(v714 + 168);
                                  if ((_DWORD)v716)
                                  {
                                    LODWORD(v717) = (v716 - 1) & ((v706 >> 4) ^ (v706 >> 9));
                                    v718 = (uint64_t **)(v715 + 16 * v717);
                                    v719 = *v718;
                                    if (*v718 != v706)
                                    {
                                      v720 = 1;
                                      do
                                      {
                                        if (v719 == (uint64_t *)-4096)
                                          goto LABEL_881;
                                        v721 = v717 + v720++;
                                        v717 = v721 & (v716 - 1);
                                        v719 = *(uint64_t **)(v715 + 16 * v717);
                                      }
                                      while (v719 != v706);
                                      v718 = (uint64_t **)(v715 + 16 * v717);
                                    }
                                  }
                                  else
                                  {
LABEL_881:
                                    v718 = (uint64_t **)(v715 + 16 * v716);
                                  }
                                  v722 = (size_t *)v718[1];
                                  v724 = *v722;
                                  result = (uint64_t)(v722 + 2);
                                  v723 = v724;
                                }
                                else
                                {
                                  v723 = 0;
                                  result = (uint64_t)&byte_1C871356D;
                                }
                                if ((*((_BYTE *)v815 + 23) & 0x10) != 0)
                                {
                                  v725 = **(_QWORD **)*v815;
                                  v726 = *(_QWORD *)(v725 + 152);
                                  v727 = *(unsigned int *)(v725 + 168);
                                  if ((_DWORD)v727)
                                  {
                                    LODWORD(v728) = (v727 - 1) & ((v815 >> 4) ^ (v815 >> 9));
                                    v729 = (uint64_t **)(v726 + 16 * v728);
                                    v730 = *v729;
                                    if (*v729 != v815)
                                    {
                                      v731 = 1;
                                      do
                                      {
                                        if (v730 == (uint64_t *)-4096)
                                          goto LABEL_890;
                                        v732 = v728 + v731++;
                                        v728 = v732 & (v727 - 1);
                                        v730 = *(uint64_t **)(v726 + 16 * v728);
                                      }
                                      while (v730 != v815);
                                      v729 = (uint64_t **)(v726 + 16 * v728);
                                    }
                                  }
                                  else
                                  {
LABEL_890:
                                    v729 = (uint64_t **)(v726 + 16 * v727);
                                  }
                                  v733 = v729[1];
                                  v736 = *v733;
                                  v734 = (char *)(v733 + 2);
                                  v735 = v736;
                                }
                                else
                                {
                                  v735 = 0;
                                  v734 = &byte_1C871356D;
                                }
                                if (v735 >= v723)
                                  v737 = v723;
                                else
                                  v737 = v735;
                                if (v737)
                                {
                                  result = memcmp((const void *)result, v734, v737);
                                  if ((_DWORD)result)
                                  {
                                    if ((result & 0x80000000) != 0)
                                      goto LABEL_1000;
                                    goto LABEL_902;
                                  }
                                }
                                v713 = v723 > v735;
                              }
                              if (!v713)
                                goto LABEL_1000;
LABEL_902:
                              *v738 = *v705;
                              v738 = &v1029[v704];
                              if (v703 <= 1)
                                goto LABEL_1001;
                              continue;
                            }
                          }
                        }
                        v793 = v739 > v740;
                      }
                      if (!v793)
                        goto LABEL_1002;
                      goto LABEL_999;
                    }
                    v11 = v1035;
                    if (v788 < result)
                      goto LABEL_999;
                  }
LABEL_1002:
                  v24 = (uint64_t)v11-- <= 2;
                  if (v24)
                    return result;
                  goto LABEL_908;
                }
              }
              v748 = *v745;
              v749 = v743[v742 + 2];
              v750 = *a3;
              v751 = sub_1C55F8434(*(_QWORD *)(*a3 + 6936), *(_DWORD *)(*a3 + 6952), *v745, a3[1]);
              result = sub_1C55F8434(*(_QWORD *)(v750 + 6936), *(_DWORD *)(v750 + 6952), v749, a3[1]);
              if (v751 == (_DWORD)result)
              {
                v752 = v748[1];
                if (v752)
                {
                  v753 = 0;
                  do
                  {
                    ++v753;
                    v752 = *(_QWORD *)(v752 + 8);
                  }
                  while (v752);
                }
                else
                {
                  v753 = 0;
                }
                v754 = (_QWORD **)v749[1];
                if (v754)
                {
                  v755 = 0;
                  do
                  {
                    ++v755;
                    v754 = (_QWORD **)v754[1];
                  }
                  while (v754);
                }
                else
                {
                  v755 = 0;
                }
                v756 = v753 > v755;
                if (v753 == v755)
                {
                  if ((*((_BYTE *)v748 + 23) & 0x10) != 0)
                  {
                    v757 = **(_QWORD **)*v748;
                    v758 = *(_QWORD *)(v757 + 152);
                    v759 = *(unsigned int *)(v757 + 168);
                    if ((_DWORD)v759)
                    {
                      LODWORD(v760) = (v759 - 1) & ((v748 >> 4) ^ (v748 >> 9));
                      v761 = (uint64_t **)(v758 + 16 * v760);
                      v762 = *v761;
                      if (*v761 != v748)
                      {
                        v763 = 1;
                        do
                        {
                          if (v762 == (uint64_t *)-4096)
                            goto LABEL_928;
                          v764 = v760 + v763++;
                          v760 = v764 & (v759 - 1);
                          v762 = *(uint64_t **)(v758 + 16 * v760);
                        }
                        while (v762 != v748);
                        v761 = (uint64_t **)(v758 + 16 * v760);
                      }
                    }
                    else
                    {
LABEL_928:
                      v761 = (uint64_t **)(v758 + 16 * v759);
                    }
                    v766 = (size_t *)v761[1];
                    v768 = *v766;
                    result = (uint64_t)(v766 + 2);
                    v767 = v768;
                  }
                  else
                  {
                    v767 = 0;
                    result = (uint64_t)&byte_1C871356D;
                  }
                  if ((*((_BYTE *)v749 + 23) & 0x10) != 0)
                  {
                    v769 = **(_QWORD **)*v749;
                    v770 = *(_QWORD *)(v769 + 152);
                    v771 = *(unsigned int *)(v769 + 168);
                    if ((_DWORD)v771)
                    {
                      LODWORD(v772) = (v771 - 1) & ((v749 >> 4) ^ (v749 >> 9));
                      v773 = (uint64_t **)(v770 + 16 * v772);
                      v774 = *v773;
                      if (*v773 != v749)
                      {
                        v775 = 1;
                        do
                        {
                          if (v774 == (uint64_t *)-4096)
                            goto LABEL_937;
                          v776 = v772 + v775++;
                          v772 = v776 & (v771 - 1);
                          v774 = *(uint64_t **)(v770 + 16 * v772);
                        }
                        while (v774 != v749);
                        v773 = (uint64_t **)(v770 + 16 * v772);
                      }
                    }
                    else
                    {
LABEL_937:
                      v773 = (uint64_t **)(v770 + 16 * v771);
                    }
                    v777 = v773[1];
                    v780 = *v777;
                    v778 = (char *)(v777 + 2);
                    v779 = v780;
                  }
                  else
                  {
                    v779 = 0;
                    v778 = &byte_1C871356D;
                  }
                  if (v779 >= v767)
                    v781 = v767;
                  else
                    v781 = v779;
                  if (v781)
                  {
                    result = memcmp((const void *)result, v778, v781);
                    if ((_DWORD)result)
                    {
                      v765 = (int)result >= 0;
                      goto LABEL_949;
                    }
                  }
                  v756 = v767 > v779;
                }
                v765 = v756;
                goto LABEL_949;
              }
              v765 = v751 < result;
LABEL_949:
              if (v765)
              {
                ++v745;
                v746 = v747;
              }
              v744 = v1032;
              v11 = v1035;
              goto LABEL_952;
            }
          }
          v560 = *v559;
          v561 = v559[1];
          v562 = *a3;
          v563 = sub_1C55F8434(*(_QWORD *)(*a3 + 6936), *(_DWORD *)(*a3 + 6952), *v559, a3[1]);
          v564 = sub_1C55F8434(*(_QWORD *)(v562 + 6936), *(_DWORD *)(v562 + 6952), v561, a3[1]);
          if (v563 == v564)
          {
            v565 = v560[1];
            if (v565)
            {
              v566 = 0;
              v11 = v1034;
              do
              {
                ++v566;
                v565 = *(_QWORD *)(v565 + 8);
              }
              while (v565);
            }
            else
            {
              v566 = 0;
              v11 = v1034;
            }
            v567 = (_QWORD **)v561[1];
            if (v567)
            {
              v568 = 0;
              do
              {
                ++v568;
                v567 = (_QWORD **)v567[1];
              }
              while (v567);
            }
            else
            {
              v568 = 0;
            }
            v569 = v566 > v568;
            if (v566 == v568)
            {
              if ((*((_BYTE *)v560 + 23) & 0x10) != 0)
              {
                v570 = **(_QWORD **)*v560;
                v571 = *(_QWORD *)(v570 + 152);
                v572 = *(unsigned int *)(v570 + 168);
                if ((_DWORD)v572)
                {
                  LODWORD(v573) = (v572 - 1) & ((v560 >> 4) ^ (v560 >> 9));
                  v574 = (uint64_t **)(v571 + 16 * v573);
                  v575 = *v574;
                  if (*v574 != v560)
                  {
                    v576 = 1;
                    do
                    {
                      if (v575 == (uint64_t *)-4096)
                        goto LABEL_702;
                      v577 = v573 + v576++;
                      v573 = v577 & (v572 - 1);
                      v575 = *(uint64_t **)(v571 + 16 * v573);
                    }
                    while (v575 != v560);
                    v574 = (uint64_t **)(v571 + 16 * v573);
                  }
                }
                else
                {
LABEL_702:
                  v574 = (uint64_t **)(v571 + 16 * v572);
                }
                v579 = v574[1];
                v582 = *v579;
                v580 = (char *)(v579 + 2);
                v581 = v582;
              }
              else
              {
                v581 = 0;
                v580 = &byte_1C871356D;
              }
              if ((*((_BYTE *)v561 + 23) & 0x10) != 0)
              {
                v583 = **(_QWORD **)*v561;
                v584 = *(_QWORD *)(v583 + 152);
                v585 = *(unsigned int *)(v583 + 168);
                if ((_DWORD)v585)
                {
                  LODWORD(v586) = (v585 - 1) & ((v561 >> 4) ^ (v561 >> 9));
                  v587 = (uint64_t **)(v584 + 16 * v586);
                  v588 = *v587;
                  if (*v587 != v561)
                  {
                    v589 = 1;
                    do
                    {
                      if (v588 == (uint64_t *)-4096)
                        goto LABEL_711;
                      v590 = v586 + v589++;
                      v586 = v590 & (v585 - 1);
                      v588 = *(uint64_t **)(v584 + 16 * v586);
                    }
                    while (v588 != v561);
                    v587 = (uint64_t **)(v584 + 16 * v586);
                  }
                }
                else
                {
LABEL_711:
                  v587 = (uint64_t **)(v584 + 16 * v585);
                }
                v591 = v587[1];
                v594 = *v591;
                v592 = (char *)(v591 + 2);
                v593 = v594;
              }
              else
              {
                v593 = 0;
                v592 = &byte_1C871356D;
              }
              if (v593 >= v581)
                v595 = v581;
              else
                v595 = v593;
              if (v595)
              {
                v596 = memcmp(v580, v592, v595);
                if (v596)
                {
                  v578 = v596 >= 0;
                  goto LABEL_723;
                }
              }
              v569 = v581 > v593;
            }
            v578 = v569;
            goto LABEL_723;
          }
          v578 = v563 < v564;
          v11 = v1034;
LABEL_723:
          if (v578)
          {
            ++v559;
            v558 = 2 * v557 + 2;
          }
          v556 = v1029;
          goto LABEL_726;
        }
        v12 = v11 >> 1;
        v13 = &v9[v11 >> 1];
        if ((unint64_t)v10 < 0x401)
        {
          sub_1C55F6C74(&v9[v11 >> 1], v9, v1025, a3);
        }
        else
        {
          sub_1C55F6C74(v9, &v9[v11 >> 1], v1025, a3);
          sub_1C55F6C74(v9 + 1, v13 - 1, a2 - 2, a3);
          sub_1C55F6C74(v9 + 2, &v9[v12 + 1], a2 - 3, a3);
          sub_1C55F6C74(v13 - 1, &v9[v11 >> 1], &v9[v12 + 1], a3);
          v14 = *v9;
          *v9 = *v13;
          *v13 = v14;
        }
        v1033 = a4 - 1;
        if ((a5 & 1) == 0)
        {
          v16 = *(v9 - 1);
          v15 = *v9;
          v17 = *a3;
          v18 = sub_1C55F8434(*(_QWORD *)(*a3 + 6936), *(_DWORD *)(*a3 + 6952), v16, a3[1]);
          v19 = sub_1C55F8434(*(_QWORD *)(v17 + 6936), *(_DWORD *)(v17 + 6952), v15, a3[1]);
          if (v18 != v19)
          {
            if (v18 < v19)
              goto LABEL_26;
            goto LABEL_279;
          }
          v20 = (_QWORD **)v16[1];
          if (v20)
          {
            v21 = 0;
            do
            {
              ++v21;
              v20 = (_QWORD **)v20[1];
            }
            while (v20);
          }
          else
          {
            v21 = 0;
          }
          v22 = v15[1];
          if (v22)
          {
            v23 = 0;
            do
            {
              ++v23;
              v22 = *(_QWORD *)(v22 + 8);
            }
            while (v22);
          }
          else
          {
            v23 = 0;
          }
          v24 = v21 > v23;
          if (v21 != v23)
            goto LABEL_278;
          if ((*((_BYTE *)v16 + 23) & 0x10) != 0)
          {
            v25 = **(_QWORD **)*v16;
            v26 = *(_QWORD *)(v25 + 152);
            v27 = *(unsigned int *)(v25 + 168);
            if (!(_DWORD)v27)
              goto LABEL_259;
            LODWORD(v28) = (v27 - 1) & ((v16 >> 4) ^ (v16 >> 9));
            v29 = (uint64_t **)(v26 + 16 * v28);
            v30 = *v29;
            if (*v29 != v16)
            {
              v31 = 1;
              while (v30 != (uint64_t *)-4096)
              {
                v32 = v28 + v31++;
                v28 = v32 & (v27 - 1);
                v30 = *(uint64_t **)(v26 + 16 * v28);
                if (v30 == v16)
                {
                  v29 = (uint64_t **)(v26 + 16 * v28);
                  goto LABEL_260;
                }
              }
LABEL_259:
              v29 = (uint64_t **)(v26 + 16 * v27);
            }
LABEL_260:
            v221 = v29[1];
            v224 = *v221;
            v222 = (char *)(v221 + 2);
            v223 = v224;
            goto LABEL_261;
          }
          v223 = 0;
          v222 = &byte_1C871356D;
LABEL_261:
          if ((*((_BYTE *)v15 + 23) & 0x10) == 0)
          {
            v235 = 0;
            v234 = &byte_1C871356D;
            goto LABEL_270;
          }
          v225 = **(_QWORD **)*v15;
          v226 = *(_QWORD *)(v225 + 152);
          v227 = *(unsigned int *)(v225 + 168);
          if (!(_DWORD)v227)
            goto LABEL_268;
          LODWORD(v228) = (v227 - 1) & ((v15 >> 4) ^ (v15 >> 9));
          v229 = (uint64_t **)(v226 + 16 * v228);
          v230 = *v229;
          if (*v229 != v15)
          {
            v231 = 1;
            while (v230 != (uint64_t *)-4096)
            {
              v232 = v228 + v231++;
              v228 = v232 & (v227 - 1);
              v230 = *(uint64_t **)(v226 + 16 * v228);
              if (v230 == v15)
              {
                v229 = (uint64_t **)(v226 + 16 * v228);
                goto LABEL_269;
              }
            }
LABEL_268:
            v229 = (uint64_t **)(v226 + 16 * v227);
          }
LABEL_269:
          v233 = v229[1];
          v236 = *v233;
          v234 = (char *)(v233 + 2);
          v235 = v236;
LABEL_270:
          if (v235 >= v223)
            v237 = v223;
          else
            v237 = v235;
          if (v237)
          {
            v238 = memcmp(v222, v234, v237);
            if (v238)
            {
              if ((v238 & 0x80000000) == 0)
                goto LABEL_26;
              goto LABEL_279;
            }
          }
          v24 = v223 > v235;
LABEL_278:
          if (v24)
            goto LABEL_26;
LABEL_279:
          v239 = *v9;
          v240 = *v1025;
          v241 = *a3;
          v242 = sub_1C55F8434(*(_QWORD *)(*a3 + 6936), *(_DWORD *)(*a3 + 6952), *v9, a3[1]);
          result = sub_1C55F8434(*(_QWORD *)(v241 + 6936), *(_DWORD *)(v241 + 6952), v240, a3[1]);
          if (v242 != (_DWORD)result)
          {
            if (v242 < result)
              goto LABEL_295;
            goto LABEL_363;
          }
          v243 = v239[1];
          if (v243)
          {
            v244 = 0;
            do
            {
              ++v244;
              v243 = *(_QWORD *)(v243 + 8);
            }
            while (v243);
          }
          else
          {
            v244 = 0;
          }
          v245 = v240[1];
          if (v245)
          {
            v246 = 0;
            do
            {
              ++v246;
              v245 = *(_QWORD *)(v245 + 8);
            }
            while (v245);
          }
          else
          {
            v246 = 0;
          }
          v247 = v244 > v246;
          if (v244 == v246)
          {
            if ((*((_BYTE *)v239 + 23) & 0x10) != 0)
            {
              v248 = **(_QWORD **)*v239;
              v249 = *(_QWORD *)(v248 + 152);
              v250 = *(unsigned int *)(v248 + 168);
              if (!(_DWORD)v250)
                goto LABEL_343;
              LODWORD(v251) = (v250 - 1) & ((v239 >> 4) ^ (v239 >> 9));
              v252 = (uint64_t **)(v249 + 16 * v251);
              v253 = *v252;
              if (*v252 != v239)
              {
                v254 = 1;
                while (v253 != (uint64_t *)-4096)
                {
                  v255 = v251 + v254++;
                  v251 = v255 & (v250 - 1);
                  v253 = *(uint64_t **)(v249 + 16 * v251);
                  if (v253 == v239)
                  {
                    v252 = (uint64_t **)(v249 + 16 * v251);
                    goto LABEL_344;
                  }
                }
LABEL_343:
                v252 = (uint64_t **)(v249 + 16 * v250);
              }
LABEL_344:
              v289 = (size_t *)v252[1];
              v291 = *v289;
              result = (uint64_t)(v289 + 2);
              v290 = v291;
            }
            else
            {
              v290 = 0;
              result = (uint64_t)&byte_1C871356D;
            }
            if ((*((_BYTE *)v240 + 23) & 0x10) != 0)
            {
              v292 = **(_QWORD **)*v240;
              v293 = *(_QWORD *)(v292 + 152);
              v294 = *(unsigned int *)(v292 + 168);
              if (!(_DWORD)v294)
                goto LABEL_352;
              LODWORD(v295) = (v294 - 1) & ((v240 >> 4) ^ (v240 >> 9));
              v296 = (uint64_t **)(v293 + 16 * v295);
              v297 = *v296;
              if (*v296 != v240)
              {
                v298 = 1;
                while (v297 != (uint64_t *)-4096)
                {
                  v299 = v295 + v298++;
                  v295 = v299 & (v294 - 1);
                  v297 = *(uint64_t **)(v293 + 16 * v295);
                  if (v297 == v240)
                  {
                    v296 = (uint64_t **)(v293 + 16 * v295);
                    goto LABEL_353;
                  }
                }
LABEL_352:
                v296 = (uint64_t **)(v293 + 16 * v294);
              }
LABEL_353:
              v300 = v296[1];
              v303 = *v300;
              v301 = (char *)(v300 + 2);
              v302 = v303;
            }
            else
            {
              v302 = 0;
              v301 = &byte_1C871356D;
            }
            if (v302 >= v290)
              v304 = v290;
            else
              v304 = v302;
            if (v304)
            {
              result = memcmp((const void *)result, v301, v304);
              if ((_DWORD)result)
              {
                if ((result & 0x80000000) == 0)
                  goto LABEL_295;
                goto LABEL_363;
              }
            }
            v247 = v290 > v302;
          }
          if (v247)
          {
LABEL_295:
            v8 = v9;
            while (1)
            {
              while (1)
              {
                v257 = v8[1];
                ++v8;
                v256 = v257;
                v258 = *a3;
                v259 = sub_1C55F8434(*(_QWORD *)(*a3 + 6936), *(_DWORD *)(*a3 + 6952), v239, a3[1]);
                result = sub_1C55F8434(*(_QWORD *)(v258 + 6936), *(_DWORD *)(v258 + 6952), v257, a3[1]);
                if (v259 == (_DWORD)result)
                  break;
                if (v259 < result)
                  goto LABEL_407;
              }
              v260 = v239[1];
              if (v260)
              {
                v261 = 0;
                do
                {
                  ++v261;
                  v260 = *(_QWORD *)(v260 + 8);
                }
                while (v260);
              }
              else
              {
                v261 = 0;
              }
              v262 = v256[1];
              if (v262)
              {
                v263 = 0;
                do
                {
                  ++v263;
                  v262 = *(_QWORD *)(v262 + 8);
                }
                while (v262);
              }
              else
              {
                v263 = 0;
              }
              v264 = v261 > v263;
              if (v261 != v263)
                goto LABEL_334;
              if ((*((_BYTE *)v239 + 23) & 0x10) != 0)
                break;
              v274 = 0;
              result = (uint64_t)&byte_1C871356D;
LABEL_317:
              if ((*((_BYTE *)v256 + 23) & 0x10) == 0)
              {
                v286 = 0;
                v285 = &byte_1C871356D;
                goto LABEL_326;
              }
              v276 = **(_QWORD **)*v256;
              v277 = *(_QWORD *)(v276 + 152);
              v278 = *(unsigned int *)(v276 + 168);
              if (!(_DWORD)v278)
                goto LABEL_324;
              LODWORD(v279) = (v278 - 1) & ((v256 >> 4) ^ (v256 >> 9));
              v280 = (uint64_t **)(v277 + 16 * v279);
              v281 = *v280;
              if (*v280 != v256)
              {
                v282 = 1;
                while (v281 != (uint64_t *)-4096)
                {
                  v283 = v279 + v282++;
                  v279 = v283 & (v278 - 1);
                  v281 = *(uint64_t **)(v277 + 16 * v279);
                  if (v281 == v256)
                  {
                    v280 = (uint64_t **)(v277 + 16 * v279);
                    goto LABEL_325;
                  }
                }
LABEL_324:
                v280 = (uint64_t **)(v277 + 16 * v278);
              }
LABEL_325:
              v284 = v280[1];
              v287 = *v284;
              v285 = (char *)(v284 + 2);
              v286 = v287;
LABEL_326:
              if (v286 >= v274)
                v288 = v274;
              else
                v288 = v286;
              if (v288 && (result = memcmp((const void *)result, v285, v288), (_DWORD)result))
              {
                if ((result & 0x80000000) == 0)
                  goto LABEL_407;
              }
              else
              {
                v264 = v274 > v286;
LABEL_334:
                if (v264)
                  goto LABEL_407;
              }
            }
            v265 = **(_QWORD **)*v239;
            v266 = *(_QWORD *)(v265 + 152);
            v267 = *(unsigned int *)(v265 + 168);
            if ((_DWORD)v267)
            {
              LODWORD(v268) = (v267 - 1) & ((v239 >> 4) ^ (v239 >> 9));
              v269 = (uint64_t **)(v266 + 16 * v268);
              v270 = *v269;
              if (*v269 == v239)
              {
LABEL_316:
                v273 = (size_t *)v269[1];
                v275 = *v273;
                result = (uint64_t)(v273 + 2);
                v274 = v275;
                goto LABEL_317;
              }
              v271 = 1;
              while (v270 != (uint64_t *)-4096)
              {
                v272 = v268 + v271++;
                v268 = v272 & (v267 - 1);
                v270 = *(uint64_t **)(v266 + 16 * v268);
                if (v270 == v239)
                {
                  v269 = (uint64_t **)(v266 + 16 * v268);
                  goto LABEL_316;
                }
              }
            }
            v269 = (uint64_t **)(v266 + 16 * v267);
            goto LABEL_316;
          }
LABEL_363:
          v8 = v9 + 1;
          if ((unint64_t)(v9 + 1) < v7)
          {
            while (1)
            {
              v305 = *v8;
              v306 = *a3;
              v307 = sub_1C55F8434(*(_QWORD *)(*a3 + 6936), *(_DWORD *)(*a3 + 6952), v239, a3[1]);
              result = sub_1C55F8434(*(_QWORD *)(v306 + 6936), *(_DWORD *)(v306 + 6952), v305, a3[1]);
              if (v307 != (_DWORD)result)
              {
                if (v307 < result)
                  goto LABEL_407;
                goto LABEL_403;
              }
              v308 = v239[1];
              if (v308)
              {
                v309 = 0;
                do
                {
                  ++v309;
                  v308 = *(_QWORD *)(v308 + 8);
                }
                while (v308);
              }
              else
              {
                v309 = 0;
              }
              v310 = v305[1];
              if (v310)
              {
                v311 = 0;
                do
                {
                  ++v311;
                  v310 = *(_QWORD *)(v310 + 8);
                }
                while (v310);
              }
              else
              {
                v311 = 0;
              }
              v312 = v309 > v311;
              if (v309 != v311)
                goto LABEL_402;
              if ((*((_BYTE *)v239 + 23) & 0x10) != 0)
                break;
              v322 = 0;
              result = (uint64_t)&byte_1C871356D;
LABEL_385:
              if ((*((_BYTE *)v305 + 23) & 0x10) == 0)
              {
                v334 = 0;
                v333 = &byte_1C871356D;
                goto LABEL_394;
              }
              v324 = **(_QWORD **)*v305;
              v325 = *(_QWORD *)(v324 + 152);
              v326 = *(unsigned int *)(v324 + 168);
              if (!(_DWORD)v326)
                goto LABEL_392;
              LODWORD(v327) = (v326 - 1) & ((v305 >> 4) ^ (v305 >> 9));
              v328 = (uint64_t **)(v325 + 16 * v327);
              v329 = *v328;
              if (*v328 != v305)
              {
                v330 = 1;
                while (v329 != (uint64_t *)-4096)
                {
                  v331 = v327 + v330++;
                  v327 = v331 & (v326 - 1);
                  v329 = *(uint64_t **)(v325 + 16 * v327);
                  if (v329 == v305)
                  {
                    v328 = (uint64_t **)(v325 + 16 * v327);
                    goto LABEL_393;
                  }
                }
LABEL_392:
                v328 = (uint64_t **)(v325 + 16 * v326);
              }
LABEL_393:
              v332 = v328[1];
              v335 = *v332;
              v333 = (char *)(v332 + 2);
              v334 = v335;
LABEL_394:
              if (v334 >= v322)
                v336 = v322;
              else
                v336 = v334;
              if (!v336 || (result = memcmp((const void *)result, v333, v336), !(_DWORD)result))
              {
                v312 = v322 > v334;
LABEL_402:
                if (v312)
                  goto LABEL_407;
                goto LABEL_403;
              }
              if ((result & 0x80000000) == 0)
                goto LABEL_407;
LABEL_403:
              if ((unint64_t)++v8 >= v7)
                goto LABEL_407;
            }
            v313 = **(_QWORD **)*v239;
            v314 = *(_QWORD *)(v313 + 152);
            v315 = *(unsigned int *)(v313 + 168);
            if ((_DWORD)v315)
            {
              LODWORD(v316) = (v315 - 1) & ((v239 >> 4) ^ (v239 >> 9));
              v317 = (uint64_t **)(v314 + 16 * v316);
              v318 = *v317;
              if (*v317 == v239)
              {
LABEL_384:
                v321 = (size_t *)v317[1];
                v323 = *v321;
                result = (uint64_t)(v321 + 2);
                v322 = v323;
                goto LABEL_385;
              }
              v319 = 1;
              while (v318 != (uint64_t *)-4096)
              {
                v320 = v316 + v319++;
                v316 = v320 & (v315 - 1);
                v318 = *(uint64_t **)(v314 + 16 * v316);
                if (v318 == v239)
                {
                  v317 = (uint64_t **)(v314 + 16 * v316);
                  goto LABEL_384;
                }
              }
            }
            v317 = (uint64_t **)(v314 + 16 * v315);
            goto LABEL_384;
          }
LABEL_407:
          v337 = (uint64_t **)v7;
          if ((unint64_t)v8 < v7)
          {
            v337 = (uint64_t **)v7;
            while (2)
            {
              while (1)
              {
                v339 = *--v337;
                v338 = v339;
                v340 = *a3;
                v341 = sub_1C55F8434(*(_QWORD *)(*a3 + 6936), *(_DWORD *)(*a3 + 6952), v239, a3[1]);
                result = sub_1C55F8434(*(_QWORD *)(v340 + 6936), *(_DWORD *)(v340 + 6952), v339, a3[1]);
                if (v341 == (_DWORD)result)
                  break;
                if (v341 >= result)
                  goto LABEL_451;
              }
              v342 = v239[1];
              if (v342)
              {
                v343 = 0;
                do
                {
                  ++v343;
                  v342 = *(_QWORD *)(v342 + 8);
                }
                while (v342);
              }
              else
              {
                v343 = 0;
              }
              v344 = v338[1];
              if (v344)
              {
                v345 = 0;
                do
                {
                  ++v345;
                  v344 = *(_QWORD *)(v344 + 8);
                }
                while (v344);
              }
              else
              {
                v345 = 0;
              }
              v346 = v343 > v345;
              if (v343 != v345)
                goto LABEL_447;
              if ((*((_BYTE *)v239 + 23) & 0x10) != 0)
              {
                v347 = **(_QWORD **)*v239;
                v348 = *(_QWORD *)(v347 + 152);
                v349 = *(unsigned int *)(v347 + 168);
                if (!(_DWORD)v349)
                  goto LABEL_428;
                LODWORD(v350) = (v349 - 1) & ((v239 >> 4) ^ (v239 >> 9));
                v351 = (uint64_t **)(v348 + 16 * v350);
                v352 = *v351;
                if (*v351 != v239)
                {
                  v353 = 1;
                  while (v352 != (uint64_t *)-4096)
                  {
                    v354 = v350 + v353++;
                    v350 = v354 & (v349 - 1);
                    v352 = *(uint64_t **)(v348 + 16 * v350);
                    if (v352 == v239)
                    {
                      v351 = (uint64_t **)(v348 + 16 * v350);
                      goto LABEL_429;
                    }
                  }
LABEL_428:
                  v351 = (uint64_t **)(v348 + 16 * v349);
                }
LABEL_429:
                v355 = (size_t *)v351[1];
                v357 = *v355;
                result = (uint64_t)(v355 + 2);
                v356 = v357;
              }
              else
              {
                v356 = 0;
                result = (uint64_t)&byte_1C871356D;
              }
              if ((*((_BYTE *)v338 + 23) & 0x10) != 0)
              {
                v358 = **(_QWORD **)*v338;
                v359 = *(_QWORD *)(v358 + 152);
                v360 = *(unsigned int *)(v358 + 168);
                if (!(_DWORD)v360)
                  goto LABEL_437;
                LODWORD(v361) = (v360 - 1) & ((v338 >> 4) ^ (v338 >> 9));
                v362 = (uint64_t **)(v359 + 16 * v361);
                v363 = *v362;
                if (*v362 != v338)
                {
                  v364 = 1;
                  while (v363 != (uint64_t *)-4096)
                  {
                    v365 = v361 + v364++;
                    v361 = v365 & (v360 - 1);
                    v363 = *(uint64_t **)(v359 + 16 * v361);
                    if (v363 == v338)
                    {
                      v362 = (uint64_t **)(v359 + 16 * v361);
                      goto LABEL_438;
                    }
                  }
LABEL_437:
                  v362 = (uint64_t **)(v359 + 16 * v360);
                }
LABEL_438:
                v366 = v362[1];
                v369 = *v366;
                v367 = (char *)(v366 + 2);
                v368 = v369;
              }
              else
              {
                v368 = 0;
                v367 = &byte_1C871356D;
              }
              if (v368 >= v356)
                v370 = v356;
              else
                v370 = v368;
              if (v370 && (result = memcmp((const void *)result, v367, v370), (_DWORD)result))
              {
                if ((result & 0x80000000) != 0)
                  break;
              }
              else
              {
                v346 = v356 > v368;
LABEL_447:
                if (!v346)
                  break;
              }
              continue;
            }
          }
LABEL_451:
          if (v8 >= v337)
            goto LABEL_539;
          v371 = (v239 >> 4) ^ (v239 >> 9);
          do
          {
            v372 = *v8;
            *v8 = *v337;
            *v337 = v372;
            do
            {
              while (1)
              {
                while (1)
                {
                  v374 = v8[1];
                  ++v8;
                  v373 = v374;
                  v375 = *a3;
                  v376 = sub_1C55F8434(*(_QWORD *)(*a3 + 6936), *(_DWORD *)(*a3 + 6952), v239, a3[1]);
                  v377 = sub_1C55F8434(*(_QWORD *)(v375 + 6936), *(_DWORD *)(v375 + 6952), v374, a3[1]);
                  if (v376 == v377)
                    break;
                  if (v376 < v377)
                    goto LABEL_499;
                }
                v378 = v239[1];
                if (v378)
                {
                  v379 = 0;
                  do
                  {
                    ++v379;
                    v378 = *(_QWORD *)(v378 + 8);
                  }
                  while (v378);
                }
                else
                {
                  v379 = 0;
                }
                v380 = v373[1];
                if (v380)
                {
                  v381 = 0;
                  do
                  {
                    ++v381;
                    v380 = *(_QWORD *)(v380 + 8);
                  }
                  while (v380);
                }
                else
                {
                  v381 = 0;
                }
                v382 = v379 > v381;
                if (v379 != v381)
                  break;
                if ((*((_BYTE *)v239 + 23) & 0x10) != 0)
                {
                  v383 = **(_QWORD **)*v239;
                  v384 = *(_QWORD *)(v383 + 152);
                  v385 = *(unsigned int *)(v383 + 168);
                  if ((_DWORD)v385)
                  {
                    LODWORD(v386) = (v385 - 1) & v371;
                    v387 = (uint64_t **)(v384 + 16 * v386);
                    v388 = *v387;
                    if (*v387 == v239)
                    {
LABEL_474:
                      v391 = v387[1];
                      v394 = *v391;
                      v392 = (char *)(v391 + 2);
                      v393 = v394;
                      goto LABEL_475;
                    }
                    v389 = 1;
                    while (v388 != (uint64_t *)-4096)
                    {
                      v390 = v386 + v389++;
                      v386 = v390 & (v385 - 1);
                      v388 = *(uint64_t **)(v384 + 16 * v386);
                      if (v388 == v239)
                      {
                        v387 = (uint64_t **)(v384 + 16 * v386);
                        goto LABEL_474;
                      }
                    }
                  }
                  v387 = (uint64_t **)(v384 + 16 * v385);
                  goto LABEL_474;
                }
                v393 = 0;
                v392 = &byte_1C871356D;
LABEL_475:
                if ((*((_BYTE *)v373 + 23) & 0x10) != 0)
                {
                  v395 = **(_QWORD **)*v373;
                  v396 = *(_QWORD *)(v395 + 152);
                  v397 = *(unsigned int *)(v395 + 168);
                  if ((_DWORD)v397)
                  {
                    LODWORD(v398) = (v397 - 1) & ((v373 >> 4) ^ (v373 >> 9));
                    v399 = (uint64_t **)(v396 + 16 * v398);
                    v400 = *v399;
                    if (*v399 == v373)
                    {
LABEL_483:
                      v403 = v399[1];
                      v406 = *v403;
                      v404 = (char *)(v403 + 2);
                      v405 = v406;
                      goto LABEL_484;
                    }
                    v401 = 1;
                    while (v400 != (uint64_t *)-4096)
                    {
                      v402 = v398 + v401++;
                      v398 = v402 & (v397 - 1);
                      v400 = *(uint64_t **)(v396 + 16 * v398);
                      if (v400 == v373)
                      {
                        v399 = (uint64_t **)(v396 + 16 * v398);
                        goto LABEL_483;
                      }
                    }
                  }
                  v399 = (uint64_t **)(v396 + 16 * v397);
                  goto LABEL_483;
                }
                v405 = 0;
                v404 = &byte_1C871356D;
LABEL_484:
                if (v405 >= v393)
                  v407 = v393;
                else
                  v407 = v405;
                if (!v407 || (v408 = memcmp(v392, v404, v407)) == 0)
                {
                  v382 = v393 > v405;
                  break;
                }
                if ((v408 & 0x80000000) == 0)
                  goto LABEL_499;
              }
            }
            while (!v382);
            do
            {
              while (1)
              {
LABEL_499:
                while (1)
                {
                  v413 = *--v337;
                  v412 = v413;
                  v414 = *a3;
                  v415 = sub_1C55F8434(*(_QWORD *)(*a3 + 6936), *(_DWORD *)(*a3 + 6952), v239, a3[1]);
                  result = sub_1C55F8434(*(_QWORD *)(v414 + 6936), *(_DWORD *)(v414 + 6952), v413, a3[1]);
                  if (v415 == (_DWORD)result)
                    break;
                  if (v415 >= result)
                    goto LABEL_538;
                }
                v416 = v239[1];
                if (v416)
                {
                  v417 = 0;
                  do
                  {
                    ++v417;
                    v416 = *(_QWORD *)(v416 + 8);
                  }
                  while (v416);
                }
                else
                {
                  v417 = 0;
                }
                v418 = v412[1];
                if (v418)
                {
                  v419 = 0;
                  do
                  {
                    ++v419;
                    v418 = *(_QWORD *)(v418 + 8);
                  }
                  while (v418);
                }
                else
                {
                  v419 = 0;
                }
                v420 = v417 > v419;
                if (v417 != v419)
                  break;
                if ((*((_BYTE *)v239 + 23) & 0x10) == 0)
                {
                  v409 = 0;
                  result = (uint64_t)&byte_1C871356D;
                  goto LABEL_520;
                }
                v421 = **(_QWORD **)*v239;
                v422 = *(_QWORD *)(v421 + 152);
                v423 = *(unsigned int *)(v421 + 168);
                if (!(_DWORD)v423)
                  goto LABEL_518;
                LODWORD(v424) = (v423 - 1) & v371;
                v425 = (uint64_t **)(v422 + 16 * v424);
                v426 = *v425;
                if (*v425 != v239)
                {
                  v427 = 1;
                  while (v426 != (uint64_t *)-4096)
                  {
                    v428 = v424 + v427++;
                    v424 = v428 & (v423 - 1);
                    v426 = *(uint64_t **)(v422 + 16 * v424);
                    if (v426 == v239)
                    {
                      v425 = (uint64_t **)(v422 + 16 * v424);
                      goto LABEL_519;
                    }
                  }
LABEL_518:
                  v425 = (uint64_t **)(v422 + 16 * v423);
                }
LABEL_519:
                v429 = (size_t *)v425[1];
                v430 = *v429;
                result = (uint64_t)(v429 + 2);
                v409 = v430;
LABEL_520:
                if ((*((_BYTE *)v412 + 23) & 0x10) == 0)
                {
                  v410 = 0;
                  v411 = &byte_1C871356D;
                  goto LABEL_529;
                }
                v431 = **(_QWORD **)*v412;
                v432 = *(_QWORD *)(v431 + 152);
                v433 = *(unsigned int *)(v431 + 168);
                if (!(_DWORD)v433)
                  goto LABEL_527;
                LODWORD(v434) = (v433 - 1) & ((v412 >> 4) ^ (v412 >> 9));
                v435 = (uint64_t **)(v432 + 16 * v434);
                v436 = *v435;
                if (*v435 != v412)
                {
                  v437 = 1;
                  while (v436 != (uint64_t *)-4096)
                  {
                    v438 = v434 + v437++;
                    v434 = v438 & (v433 - 1);
                    v436 = *(uint64_t **)(v432 + 16 * v434);
                    if (v436 == v412)
                    {
                      v435 = (uint64_t **)(v432 + 16 * v434);
                      goto LABEL_528;
                    }
                  }
LABEL_527:
                  v435 = (uint64_t **)(v432 + 16 * v433);
                }
LABEL_528:
                v439 = v435[1];
                v440 = *v439;
                v411 = (char *)(v439 + 2);
                v410 = v440;
LABEL_529:
                if (v410 >= v409)
                  v441 = v409;
                else
                  v441 = v410;
                if (!v441 || (result = memcmp((const void *)result, v411, v441), !(_DWORD)result))
                {
                  v420 = v409 > v410;
                  break;
                }
                if ((result & 0x80000000) != 0)
                  goto LABEL_538;
              }
            }
            while (v420);
LABEL_538:
            ;
          }
          while (v8 < v337);
LABEL_539:
          v442 = v8 - 1;
          if (v8 - 1 != v9)
            *v9 = *v442;
          a5 = 0;
          *v442 = v239;
          a4 = v1033;
          continue;
        }
LABEL_26:
        v33 = *v9;
        v34 = (*v9 >> 4) ^ (*v9 >> 9);
        v35 = v9;
        do
        {
          while (1)
          {
            while (1)
            {
              v36 = v35;
              v38 = v35[1];
              ++v35;
              v37 = v38;
              v39 = *a3;
              v40 = sub_1C55F8434(*(_QWORD *)(*a3 + 6936), *(_DWORD *)(*a3 + 6952), v38, a3[1]);
              v41 = sub_1C55F8434(*(_QWORD *)(v39 + 6936), *(_DWORD *)(v39 + 6952), v33, a3[1]);
              if (v40 == v41)
                break;
              if (v40 >= v41)
                goto LABEL_69;
            }
            v42 = v37[1];
            if (v42)
            {
              v43 = 0;
              do
              {
                ++v43;
                v42 = *(_QWORD *)(v42 + 8);
              }
              while (v42);
            }
            else
            {
              v43 = 0;
            }
            v44 = v33[1];
            if (v44)
            {
              v45 = 0;
              do
              {
                ++v45;
                v44 = *(_QWORD *)(v44 + 8);
              }
              while (v44);
            }
            else
            {
              v45 = 0;
            }
            v46 = v43 > v45;
            if (v43 != v45)
              break;
            if ((*((_BYTE *)v37 + 23) & 0x10) != 0)
            {
              v47 = **(_QWORD **)*v37;
              v48 = *(_QWORD *)(v47 + 152);
              v49 = *(unsigned int *)(v47 + 168);
              if ((_DWORD)v49)
              {
                LODWORD(v50) = (v49 - 1) & ((v37 >> 4) ^ (v37 >> 9));
                v51 = (uint64_t **)(v48 + 16 * v50);
                v52 = *v51;
                if (*v51 == v37)
                {
LABEL_47:
                  v55 = v51[1];
                  v58 = *v55;
                  v56 = (char *)(v55 + 2);
                  v57 = v58;
                  goto LABEL_48;
                }
                v53 = 1;
                while (v52 != (uint64_t *)-4096)
                {
                  v54 = v50 + v53++;
                  v50 = v54 & (v49 - 1);
                  v52 = *(uint64_t **)(v48 + 16 * v50);
                  if (v52 == v37)
                  {
                    v51 = (uint64_t **)(v48 + 16 * v50);
                    goto LABEL_47;
                  }
                }
              }
              v51 = (uint64_t **)(v48 + 16 * v49);
              goto LABEL_47;
            }
            v57 = 0;
            v56 = &byte_1C871356D;
LABEL_48:
            if ((*((_BYTE *)v33 + 23) & 0x10) != 0)
            {
              v59 = **(_QWORD **)*v33;
              v60 = *(_QWORD *)(v59 + 152);
              v61 = *(unsigned int *)(v59 + 168);
              if ((_DWORD)v61)
              {
                LODWORD(v62) = (v61 - 1) & v34;
                v63 = (uint64_t **)(v60 + 16 * v62);
                v64 = *v63;
                if (*v63 == v33)
                {
LABEL_56:
                  v67 = v63[1];
                  v70 = *v67;
                  v68 = (char *)(v67 + 2);
                  v69 = v70;
                  goto LABEL_57;
                }
                v65 = 1;
                while (v64 != (uint64_t *)-4096)
                {
                  v66 = v62 + v65++;
                  v62 = v66 & (v61 - 1);
                  v64 = *(uint64_t **)(v60 + 16 * v62);
                  if (v64 == v33)
                  {
                    v63 = (uint64_t **)(v60 + 16 * v62);
                    goto LABEL_56;
                  }
                }
              }
              v63 = (uint64_t **)(v60 + 16 * v61);
              goto LABEL_56;
            }
            v69 = 0;
            v68 = &byte_1C871356D;
LABEL_57:
            if (v69 >= v57)
              v71 = v57;
            else
              v71 = v69;
            if (!v71 || (v72 = memcmp(v56, v68, v71)) == 0)
            {
              v46 = v57 > v69;
              break;
            }
            if (v72 < 0)
              goto LABEL_69;
          }
        }
        while (v46);
LABEL_69:
        v73 = (uint64_t **)v7;
        if (v36 != v9)
        {
          while (2)
          {
            while (1)
            {
              v75 = *--v73;
              v74 = v75;
              v76 = *a3;
              v77 = sub_1C55F8434(*(_QWORD *)(*a3 + 6936), *(_DWORD *)(*a3 + 6952), v75, a3[1]);
              v78 = sub_1C55F8434(*(_QWORD *)(v76 + 6936), *(_DWORD *)(v76 + 6952), v33, a3[1]);
              if (v77 == v78)
                break;
              if (v77 < v78)
                goto LABEL_162;
            }
            v79 = v74[1];
            if (v79)
            {
              v80 = 0;
              do
              {
                ++v80;
                v79 = *(_QWORD *)(v79 + 8);
              }
              while (v79);
            }
            else
            {
              v80 = 0;
            }
            v81 = v33[1];
            if (v81)
            {
              v82 = 0;
              do
              {
                ++v82;
                v81 = *(_QWORD *)(v81 + 8);
              }
              while (v81);
            }
            else
            {
              v82 = 0;
            }
            v83 = v80 > v82;
            if (v80 != v82)
              goto LABEL_108;
            if ((*((_BYTE *)v74 + 23) & 0x10) != 0)
            {
              v84 = **(_QWORD **)*v74;
              v85 = *(_QWORD *)(v84 + 152);
              v86 = *(unsigned int *)(v84 + 168);
              if (!(_DWORD)v86)
                goto LABEL_89;
              LODWORD(v87) = (v86 - 1) & ((v74 >> 4) ^ (v74 >> 9));
              v88 = (uint64_t **)(v85 + 16 * v87);
              v89 = *v88;
              if (*v88 != v74)
              {
                v90 = 1;
                while (v89 != (uint64_t *)-4096)
                {
                  v91 = v87 + v90++;
                  v87 = v91 & (v86 - 1);
                  v89 = *(uint64_t **)(v85 + 16 * v87);
                  if (v89 == v74)
                  {
                    v88 = (uint64_t **)(v85 + 16 * v87);
                    goto LABEL_90;
                  }
                }
LABEL_89:
                v88 = (uint64_t **)(v85 + 16 * v86);
              }
LABEL_90:
              v92 = v88[1];
              v95 = *v92;
              v93 = (char *)(v92 + 2);
              v94 = v95;
            }
            else
            {
              v94 = 0;
              v93 = &byte_1C871356D;
            }
            if ((*((_BYTE *)v33 + 23) & 0x10) != 0)
            {
              v96 = **(_QWORD **)*v33;
              v97 = *(_QWORD *)(v96 + 152);
              v98 = *(unsigned int *)(v96 + 168);
              if (!(_DWORD)v98)
                goto LABEL_98;
              LODWORD(v99) = (v98 - 1) & v34;
              v100 = (uint64_t **)(v97 + 16 * v99);
              v101 = *v100;
              if (*v100 != v33)
              {
                v102 = 1;
                while (v101 != (uint64_t *)-4096)
                {
                  v103 = v99 + v102++;
                  v99 = v103 & (v98 - 1);
                  v101 = *(uint64_t **)(v97 + 16 * v99);
                  if (v101 == v33)
                  {
                    v100 = (uint64_t **)(v97 + 16 * v99);
                    goto LABEL_99;
                  }
                }
LABEL_98:
                v100 = (uint64_t **)(v97 + 16 * v98);
              }
LABEL_99:
              v104 = v100[1];
              v107 = *v104;
              v105 = (char *)(v104 + 2);
              v106 = v107;
            }
            else
            {
              v106 = 0;
              v105 = &byte_1C871356D;
            }
            if (v106 >= v94)
              v108 = v94;
            else
              v108 = v106;
            if (v108 && (v109 = memcmp(v93, v105, v108)) != 0)
            {
              if ((v109 & 0x80000000) == 0)
                goto LABEL_162;
            }
            else
            {
              v83 = v94 > v106;
LABEL_108:
              if (v83)
                goto LABEL_162;
            }
            continue;
          }
        }
        v73 = (uint64_t **)v7;
        if ((unint64_t)v35 < v7)
        {
          v73 = (uint64_t **)v7;
          while (1)
          {
            while (1)
            {
              while (1)
              {
                v111 = *--v73;
                v110 = v111;
                v112 = *a3;
                v113 = sub_1C55F8434(*(_QWORD *)(*a3 + 6936), *(_DWORD *)(*a3 + 6952), v111, a3[1]);
                v114 = sub_1C55F8434(*(_QWORD *)(v112 + 6936), *(_DWORD *)(v112 + 6952), v33, a3[1]);
                if (v113 == v114)
                  break;
                if (v35 >= v73 || v113 < v114)
                  goto LABEL_162;
              }
              v115 = v110[1];
              if (v115)
              {
                v116 = 0;
                do
                {
                  ++v116;
                  v115 = *(_QWORD *)(v115 + 8);
                }
                while (v115);
              }
              else
              {
                v116 = 0;
              }
              v117 = v33[1];
              if (v117)
              {
                v118 = 0;
                do
                {
                  ++v118;
                  v117 = *(_QWORD *)(v117 + 8);
                }
                while (v117);
              }
              else
              {
                v118 = 0;
              }
              if (v116 == v118)
                break;
              if (v35 >= v73 || v116 > v118)
                goto LABEL_162;
            }
            if ((*((_BYTE *)v110 + 23) & 0x10) != 0)
              break;
            v129 = 0;
            v128 = &byte_1C871356D;
LABEL_140:
            if ((*((_BYTE *)v33 + 23) & 0x10) == 0)
            {
              v141 = 0;
              v140 = &byte_1C871356D;
              goto LABEL_149;
            }
            v131 = **(_QWORD **)*v33;
            v132 = *(_QWORD *)(v131 + 152);
            v133 = *(unsigned int *)(v131 + 168);
            if (!(_DWORD)v133)
              goto LABEL_147;
            LODWORD(v134) = (v133 - 1) & v34;
            v135 = (uint64_t **)(v132 + 16 * v134);
            v136 = *v135;
            if (*v135 != v33)
            {
              v137 = 1;
              while (v136 != (uint64_t *)-4096)
              {
                v138 = v134 + v137++;
                v134 = v138 & (v133 - 1);
                v136 = *(uint64_t **)(v132 + 16 * v134);
                if (v136 == v33)
                {
                  v135 = (uint64_t **)(v132 + 16 * v134);
                  goto LABEL_148;
                }
              }
LABEL_147:
              v135 = (uint64_t **)(v132 + 16 * v133);
            }
LABEL_148:
            v139 = v135[1];
            v142 = *v139;
            v140 = (char *)(v139 + 2);
            v141 = v142;
LABEL_149:
            if (v141 >= v129)
              v143 = v129;
            else
              v143 = v141;
            if (v143 && (v144 = memcmp(v128, v140, v143)) != 0)
            {
              if (v35 >= v73 || (v144 & 0x80000000) == 0)
                goto LABEL_162;
            }
            else if (v35 >= v73 || v129 > v141)
            {
              goto LABEL_162;
            }
          }
          v119 = **(_QWORD **)*v110;
          v120 = *(_QWORD *)(v119 + 152);
          v121 = *(unsigned int *)(v119 + 168);
          if ((_DWORD)v121)
          {
            LODWORD(v122) = (v121 - 1) & ((v110 >> 4) ^ (v110 >> 9));
            v123 = (uint64_t **)(v120 + 16 * v122);
            v124 = *v123;
            if (*v123 != v110)
            {
              v125 = 1;
              while (v124 != (uint64_t *)-4096)
              {
                v126 = v122 + v125++;
                v122 = v126 & (v121 - 1);
                v124 = *(uint64_t **)(v120 + 16 * v122);
                if (v124 == v110)
                {
                  v123 = (uint64_t **)(v120 + 16 * v122);
                  goto LABEL_139;
                }
              }
              goto LABEL_138;
            }
          }
          else
          {
LABEL_138:
            v123 = (uint64_t **)(v120 + 16 * v121);
          }
LABEL_139:
          v127 = v123[1];
          v130 = *v127;
          v128 = (char *)(v127 + 2);
          v129 = v130;
          goto LABEL_140;
        }
LABEL_162:
        v8 = v35;
        if (v35 >= v73)
          goto LABEL_250;
        v145 = v73;
        while (2)
        {
          v146 = *v8;
          *v8 = *v145;
          *v145 = v146;
          while (1)
          {
LABEL_165:
            while (1)
            {
              v148 = v8[1];
              ++v8;
              v147 = v148;
              v149 = *a3;
              v150 = sub_1C55F8434(*(_QWORD *)(*a3 + 6936), *(_DWORD *)(*a3 + 6952), v148, a3[1]);
              v151 = sub_1C55F8434(*(_QWORD *)(v149 + 6936), *(_DWORD *)(v149 + 6952), v33, a3[1]);
              if (v150 == v151)
                break;
              if (v150 >= v151)
                goto LABEL_209;
            }
            v152 = v147[1];
            if (v152)
            {
              v153 = 0;
              do
              {
                ++v153;
                v152 = *(_QWORD *)(v152 + 8);
              }
              while (v152);
            }
            else
            {
              v153 = 0;
            }
            v154 = v33[1];
            if (v154)
            {
              v155 = 0;
              do
              {
                ++v155;
                v154 = *(_QWORD *)(v154 + 8);
              }
              while (v154);
            }
            else
            {
              v155 = 0;
            }
            v156 = v153 > v155;
            if (v153 != v155)
              break;
            if ((*((_BYTE *)v147 + 23) & 0x10) != 0)
            {
              v157 = **(_QWORD **)*v147;
              v158 = *(_QWORD *)(v157 + 152);
              v159 = *(unsigned int *)(v157 + 168);
              if (!(_DWORD)v159)
                goto LABEL_184;
              LODWORD(v160) = (v159 - 1) & ((v147 >> 4) ^ (v147 >> 9));
              v161 = (uint64_t **)(v158 + 16 * v160);
              v162 = *v161;
              if (*v161 != v147)
              {
                v163 = 1;
                while (v162 != (uint64_t *)-4096)
                {
                  v164 = v160 + v163++;
                  v160 = v164 & (v159 - 1);
                  v162 = *(uint64_t **)(v158 + 16 * v160);
                  if (v162 == v147)
                  {
                    v161 = (uint64_t **)(v158 + 16 * v160);
                    goto LABEL_185;
                  }
                }
LABEL_184:
                v161 = (uint64_t **)(v158 + 16 * v159);
              }
LABEL_185:
              v165 = v161[1];
              v168 = *v165;
              v166 = (char *)(v165 + 2);
              v167 = v168;
              goto LABEL_186;
            }
            v167 = 0;
            v166 = &byte_1C871356D;
LABEL_186:
            if ((*((_BYTE *)v33 + 23) & 0x10) != 0)
            {
              v169 = **(_QWORD **)*v33;
              v170 = *(_QWORD *)(v169 + 152);
              v171 = *(unsigned int *)(v169 + 168);
              if (!(_DWORD)v171)
                goto LABEL_193;
              LODWORD(v172) = (v171 - 1) & v34;
              v173 = (uint64_t **)(v170 + 16 * v172);
              v174 = *v173;
              if (*v173 != v33)
              {
                v175 = 1;
                while (v174 != (uint64_t *)-4096)
                {
                  v176 = v172 + v175++;
                  v172 = v176 & (v171 - 1);
                  v174 = *(uint64_t **)(v170 + 16 * v172);
                  if (v174 == v33)
                  {
                    v173 = (uint64_t **)(v170 + 16 * v172);
                    goto LABEL_194;
                  }
                }
LABEL_193:
                v173 = (uint64_t **)(v170 + 16 * v171);
              }
LABEL_194:
              v177 = v173[1];
              v180 = *v177;
              v178 = (char *)(v177 + 2);
              v179 = v180;
              goto LABEL_195;
            }
            v179 = 0;
            v178 = &byte_1C871356D;
LABEL_195:
            if (v179 >= v167)
              v181 = v167;
            else
              v181 = v179;
            if (!v181 || (v182 = memcmp(v166, v178, v181)) == 0)
            {
              v156 = v167 > v179;
              break;
            }
            if (v182 < 0)
              goto LABEL_209;
          }
          if (v156)
            goto LABEL_165;
LABEL_209:
          while (2)
          {
            while (2)
            {
              while (1)
              {
                v188 = *--v145;
                v187 = v188;
                v189 = *a3;
                v190 = sub_1C55F8434(*(_QWORD *)(*a3 + 6936), *(_DWORD *)(*a3 + 6952), v188, a3[1]);
                v191 = sub_1C55F8434(*(_QWORD *)(v189 + 6936), *(_DWORD *)(v189 + 6952), v33, a3[1]);
                if (v190 == v191)
                  break;
                if (v190 < v191)
                  goto LABEL_249;
              }
              v192 = v187[1];
              if (v192)
              {
                v193 = 0;
                do
                {
                  ++v193;
                  v192 = *(_QWORD *)(v192 + 8);
                }
                while (v192);
              }
              else
              {
                v193 = 0;
              }
              v194 = v33[1];
              if (v194)
              {
                v195 = 0;
                do
                {
                  ++v195;
                  v194 = *(_QWORD *)(v194 + 8);
                }
                while (v194);
              }
              else
              {
                v195 = 0;
              }
              v196 = v193 > v195;
              if (v193 == v195)
              {
                if ((*((_BYTE *)v187 + 23) & 0x10) != 0)
                {
                  v197 = **(_QWORD **)*v187;
                  v198 = *(_QWORD *)(v197 + 152);
                  v199 = *(unsigned int *)(v197 + 168);
                  if (!(_DWORD)v199)
                    goto LABEL_228;
                  LODWORD(v200) = (v199 - 1) & ((v187 >> 4) ^ (v187 >> 9));
                  v201 = (uint64_t **)(v198 + 16 * v200);
                  v202 = *v201;
                  if (*v201 != v187)
                  {
                    v203 = 1;
                    while (v202 != (uint64_t *)-4096)
                    {
                      v204 = v200 + v203++;
                      v200 = v204 & (v199 - 1);
                      v202 = *(uint64_t **)(v198 + 16 * v200);
                      if (v202 == v187)
                      {
                        v201 = (uint64_t **)(v198 + 16 * v200);
                        goto LABEL_229;
                      }
                    }
LABEL_228:
                    v201 = (uint64_t **)(v198 + 16 * v199);
                  }
LABEL_229:
                  v205 = v201[1];
                  v206 = *v205;
                  v184 = (char *)(v205 + 2);
                  v183 = v206;
                }
                else
                {
                  v183 = 0;
                  v184 = &byte_1C871356D;
                }
                if ((*((_BYTE *)v33 + 23) & 0x10) != 0)
                {
                  v207 = **(_QWORD **)*v33;
                  v208 = *(_QWORD *)(v207 + 152);
                  v209 = *(unsigned int *)(v207 + 168);
                  if (!(_DWORD)v209)
                    goto LABEL_237;
                  LODWORD(v210) = (v209 - 1) & v34;
                  v211 = (uint64_t **)(v208 + 16 * v210);
                  v212 = *v211;
                  if (*v211 != v33)
                  {
                    v213 = 1;
                    while (v212 != (uint64_t *)-4096)
                    {
                      v214 = v210 + v213++;
                      v210 = v214 & (v209 - 1);
                      v212 = *(uint64_t **)(v208 + 16 * v210);
                      if (v212 == v33)
                      {
                        v211 = (uint64_t **)(v208 + 16 * v210);
                        goto LABEL_238;
                      }
                    }
LABEL_237:
                    v211 = (uint64_t **)(v208 + 16 * v209);
                  }
LABEL_238:
                  v215 = v211[1];
                  v216 = *v215;
                  v186 = (char *)(v215 + 2);
                  v185 = v216;
                }
                else
                {
                  v185 = 0;
                  v186 = &byte_1C871356D;
                }
                if (v185 >= v183)
                  v217 = v183;
                else
                  v217 = v185;
                if (!v217 || (v218 = memcmp(v184, v186, v217)) == 0)
                {
                  v196 = v183 > v185;
                  break;
                }
                if ((v218 & 0x80000000) == 0)
                  goto LABEL_249;
                continue;
              }
              break;
            }
            if (!v196)
              continue;
            break;
          }
LABEL_249:
          if (v8 < v145)
            continue;
          break;
        }
LABEL_250:
        v219 = v8 - 1;
        if (v8 - 1 != v1029)
          *v1029 = *v219;
        *v219 = v33;
        v821 = v35 >= v73;
        v7 = (unint64_t)a2;
        a4 = v1033;
        if (!v821)
        {
LABEL_256:
          result = sub_1C55F342C(v1029, v8 - 1, a3, v1033, a5 & 1);
          a5 = 0;
          continue;
        }
        v220 = sub_1C55F75E4(v1029, v8 - 1, a3);
        result = sub_1C55F75E4(v8, a2, a3);
        if (!(_DWORD)result)
        {
          if (v220)
            continue;
          goto LABEL_256;
        }
        a2 = v8 - 1;
        if (!v220)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t sub_1C55F6C74(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t *a4)
{
  uint64_t **v6;
  uint64_t **v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  uint64_t v13;
  unsigned int v14;
  _QWORD **v15;
  unsigned int v16;
  BOOL v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t **v22;
  uint64_t *v23;
  int v24;
  int v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t result;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  BOOL v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t **v40;
  uint64_t *v41;
  int v42;
  int v43;
  uint64_t *v44;
  char *v45;
  size_t v46;
  size_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t **v52;
  uint64_t *v53;
  int v54;
  int v55;
  uint64_t *v56;
  char *v57;
  size_t v58;
  size_t v59;
  size_t v60;
  int v61;
  uint64_t *v62;
  uint64_t *v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t v66;
  unsigned int v67;
  uint64_t v68;
  unsigned int v69;
  BOOL v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t **v75;
  uint64_t *v76;
  int v77;
  int v78;
  size_t *v79;
  size_t v80;
  size_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t **v86;
  uint64_t *v87;
  int v88;
  int v89;
  size_t *v90;
  size_t v91;
  size_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t **v97;
  uint64_t *v98;
  int v99;
  int v100;
  uint64_t *v101;
  char *v102;
  size_t v103;
  size_t v104;
  size_t v105;
  uint64_t *v106;
  uint64_t *v107;
  uint64_t v108;
  unsigned int v109;
  BOOL v110;
  uint64_t v111;
  unsigned int v112;
  _QWORD **v113;
  unsigned int v114;
  BOOL v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t **v120;
  uint64_t *v121;
  int v122;
  int v123;
  uint64_t *v124;
  char *v125;
  size_t v126;
  size_t v127;
  size_t v128;
  uint64_t *v129;
  uint64_t *v130;
  uint64_t *v131;
  uint64_t v132;
  unsigned int v133;
  uint64_t v134;
  unsigned int v135;
  _QWORD **v136;
  unsigned int v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t **v142;
  uint64_t *v143;
  int v144;
  int v145;
  uint64_t *v146;
  size_t *v147;
  size_t v148;
  size_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t **v154;
  uint64_t *v155;
  int v156;
  int v157;
  size_t *v158;
  size_t v159;
  size_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t **v165;
  uint64_t *v166;
  int v167;
  int v168;
  uint64_t *v169;
  char *v170;
  size_t v171;
  size_t v172;
  size_t v173;
  uint64_t *v174;
  char *v175;
  size_t v176;
  size_t v177;
  size_t v178;

  v6 = a2;
  v7 = a1;
  v8 = *a2;
  v9 = *a1;
  v10 = *a4;
  v11 = sub_1C55F8434(*(_QWORD *)(v10 + 6936), *(_DWORD *)(v10 + 6952), *a2, a4[1]);
  v12 = sub_1C55F8434(*(_QWORD *)(v10 + 6936), *(_DWORD *)(v10 + 6952), v9, a4[1]);
  if (v11 != v12)
  {
    if (v11 >= v12)
      goto LABEL_56;
    goto LABEL_17;
  }
  v13 = v8[1];
  if (v13)
  {
    v14 = 0;
    do
    {
      ++v14;
      v13 = *(_QWORD *)(v13 + 8);
    }
    while (v13);
  }
  else
  {
    v14 = 0;
  }
  v15 = (_QWORD **)v9[1];
  if (v15)
  {
    v16 = 0;
    do
    {
      ++v16;
      v15 = (_QWORD **)v15[1];
    }
    while (v15);
  }
  else
  {
    v16 = 0;
  }
  v17 = v14 > v16;
  if (v14 != v16)
    goto LABEL_55;
  if ((*((_BYTE *)v8 + 23) & 0x10) != 0)
  {
    v18 = **(_QWORD **)*v8;
    v19 = *(_QWORD *)(v18 + 152);
    v20 = *(unsigned int *)(v18 + 168);
    if ((_DWORD)v20)
    {
      LODWORD(v21) = (v20 - 1) & ((v8 >> 4) ^ (v8 >> 9));
      v22 = (uint64_t **)(v19 + 16 * v21);
      v23 = *v22;
      if (*v22 == v8)
      {
LABEL_37:
        v44 = v22[1];
        v47 = *v44;
        v45 = (char *)(v44 + 2);
        v46 = v47;
        goto LABEL_38;
      }
      v24 = 1;
      while (v23 != (uint64_t *)-4096)
      {
        v25 = v21 + v24++;
        v21 = v25 & (v20 - 1);
        v23 = *(uint64_t **)(v19 + 16 * v21);
        if (v23 == v8)
        {
          v22 = (uint64_t **)(v19 + 16 * v21);
          goto LABEL_37;
        }
      }
    }
    v22 = (uint64_t **)(v19 + 16 * v20);
    goto LABEL_37;
  }
  v46 = 0;
  v45 = &byte_1C871356D;
LABEL_38:
  if ((*((_BYTE *)v9 + 23) & 0x10) != 0)
  {
    v48 = **(_QWORD **)*v9;
    v49 = *(_QWORD *)(v48 + 152);
    v50 = *(unsigned int *)(v48 + 168);
    if ((_DWORD)v50)
    {
      LODWORD(v51) = (v50 - 1) & ((v9 >> 4) ^ (v9 >> 9));
      v52 = (uint64_t **)(v49 + 16 * v51);
      v53 = *v52;
      if (*v52 == v9)
      {
LABEL_46:
        v56 = v52[1];
        v59 = *v56;
        v57 = (char *)(v56 + 2);
        v58 = v59;
        goto LABEL_47;
      }
      v54 = 1;
      while (v53 != (uint64_t *)-4096)
      {
        v55 = v51 + v54++;
        v51 = v55 & (v50 - 1);
        v53 = *(uint64_t **)(v49 + 16 * v51);
        if (v53 == v9)
        {
          v52 = (uint64_t **)(v49 + 16 * v51);
          goto LABEL_46;
        }
      }
    }
    v52 = (uint64_t **)(v49 + 16 * v50);
    goto LABEL_46;
  }
  v58 = 0;
  v57 = &byte_1C871356D;
LABEL_47:
  if (v58 >= v46)
    v60 = v46;
  else
    v60 = v58;
  if (!v60 || (v61 = memcmp(v45, v57, v60)) == 0)
  {
    v17 = v46 > v58;
LABEL_55:
    if (!v17)
      goto LABEL_56;
    goto LABEL_17;
  }
  if (v61 < 0)
  {
LABEL_56:
    v62 = *a3;
    v63 = *v6;
    v64 = *a4;
    v65 = sub_1C55F8434(*(_QWORD *)(*a4 + 6936), *(_DWORD *)(*a4 + 6952), *a3, a4[1]);
    result = sub_1C55F8434(*(_QWORD *)(v64 + 6936), *(_DWORD *)(v64 + 6952), v63, a4[1]);
    if (v65 != (_DWORD)result)
    {
      if (v65 >= result)
        return result;
      goto LABEL_135;
    }
    v66 = v62[1];
    if (v66)
    {
      v67 = 0;
      do
      {
        ++v67;
        v66 = *(_QWORD *)(v66 + 8);
      }
      while (v66);
    }
    else
    {
      v67 = 0;
    }
    v68 = v63[1];
    if (v68)
    {
      v69 = 0;
      do
      {
        ++v69;
        v68 = *(_QWORD *)(v68 + 8);
      }
      while (v68);
    }
    else
    {
      v69 = 0;
    }
    v70 = v67 > v69;
    if (v67 != v69)
      goto LABEL_133;
    if ((*((_BYTE *)v62 + 23) & 0x10) == 0)
    {
      v91 = 0;
      result = (uint64_t)&byte_1C871356D;
LABEL_88:
      if ((*((_BYTE *)v63 + 23) & 0x10) == 0)
      {
        v126 = 0;
        v125 = &byte_1C871356D;
        goto LABEL_125;
      }
      v93 = **(_QWORD **)*v63;
      v94 = *(_QWORD *)(v93 + 152);
      v95 = *(unsigned int *)(v93 + 168);
      if ((_DWORD)v95)
      {
        LODWORD(v96) = (v95 - 1) & ((v63 >> 4) ^ (v63 >> 9));
        v97 = (uint64_t **)(v94 + 16 * v96);
        v98 = *v97;
        if (*v97 == v63)
        {
LABEL_124:
          v124 = v97[1];
          v127 = *v124;
          v125 = (char *)(v124 + 2);
          v126 = v127;
LABEL_125:
          if (v126 >= v91)
            v128 = v91;
          else
            v128 = v126;
          if (v128)
          {
            result = memcmp((const void *)result, v125, v128);
            if ((_DWORD)result)
            {
              if ((result & 0x80000000) != 0)
                return result;
              goto LABEL_135;
            }
          }
          v70 = v91 > v126;
LABEL_133:
          if (!v70)
            return result;
LABEL_135:
          v129 = *v6;
          *v6 = *a3;
          *a3 = v129;
          v130 = *v6;
          v131 = *v7;
          v132 = *a4;
          v133 = sub_1C55F8434(*(_QWORD *)(*a4 + 6936), *(_DWORD *)(*a4 + 6952), *v6, a4[1]);
          result = sub_1C55F8434(*(_QWORD *)(v132 + 6936), *(_DWORD *)(v132 + 6952), v131, a4[1]);
          v110 = v133 >= result;
          if (v133 == (_DWORD)result)
          {
            v134 = v130[1];
            if (v134)
            {
              v135 = 0;
              do
              {
                ++v135;
                v134 = *(_QWORD *)(v134 + 8);
              }
              while (v134);
            }
            else
            {
              v135 = 0;
            }
            v136 = (_QWORD **)v131[1];
            if (v136)
            {
              v137 = 0;
              do
              {
                ++v137;
                v136 = (_QWORD **)v136[1];
              }
              while (v136);
            }
            else
            {
              v137 = 0;
            }
            v115 = v135 > v137;
            if (v135 != v137)
              goto LABEL_194;
            if ((*((_BYTE *)v130 + 23) & 0x10) == 0)
            {
              v159 = 0;
              result = (uint64_t)&byte_1C871356D;
LABEL_168:
              if ((*((_BYTE *)v131 + 23) & 0x10) == 0)
              {
                v176 = 0;
                v175 = &byte_1C871356D;
                goto LABEL_186;
              }
              v161 = **(_QWORD **)*v131;
              v162 = *(_QWORD *)(v161 + 152);
              v163 = *(unsigned int *)(v161 + 168);
              if ((_DWORD)v163)
              {
                LODWORD(v164) = (v163 - 1) & ((v131 >> 4) ^ (v131 >> 9));
                v165 = (uint64_t **)(v162 + 16 * v164);
                v166 = *v165;
                if (*v165 == v131)
                {
LABEL_185:
                  v174 = v165[1];
                  v177 = *v174;
                  v175 = (char *)(v174 + 2);
                  v176 = v177;
LABEL_186:
                  if (v176 >= v159)
                    v178 = v159;
                  else
                    v178 = v176;
                  if (v178)
                  {
                    result = memcmp((const void *)result, v175, v178);
                    if ((_DWORD)result)
                    {
LABEL_191:
                      if ((result & 0x80000000) != 0)
                        return result;
LABEL_151:
                      v146 = *v7;
                      *v7 = *v6;
                      *v6 = v146;
                      return result;
                    }
                  }
                  v115 = v159 > v176;
                  goto LABEL_194;
                }
                v167 = 1;
                while (v166 != (uint64_t *)-4096)
                {
                  v168 = v164 + v167++;
                  v164 = v168 & (v163 - 1);
                  v166 = *(uint64_t **)(v162 + 16 * v164);
                  if (v166 == v131)
                  {
                    v165 = (uint64_t **)(v162 + 16 * v164);
                    goto LABEL_185;
                  }
                }
              }
              v165 = (uint64_t **)(v162 + 16 * v163);
              goto LABEL_185;
            }
            v138 = **(_QWORD **)*v130;
            v139 = *(_QWORD *)(v138 + 152);
            v140 = *(unsigned int *)(v138 + 168);
            if ((_DWORD)v140)
            {
              LODWORD(v141) = (v140 - 1) & ((v130 >> 4) ^ (v130 >> 9));
              v142 = (uint64_t **)(v139 + 16 * v141);
              v143 = *v142;
              if (*v142 == v130)
              {
LABEL_167:
                v158 = (size_t *)v142[1];
                v160 = *v158;
                result = (uint64_t)(v158 + 2);
                v159 = v160;
                goto LABEL_168;
              }
              v144 = 1;
              while (v143 != (uint64_t *)-4096)
              {
                v145 = v141 + v144++;
                v141 = v145 & (v140 - 1);
                v143 = *(uint64_t **)(v139 + 16 * v141);
                if (v143 == v130)
                {
                  v142 = (uint64_t **)(v139 + 16 * v141);
                  goto LABEL_167;
                }
              }
            }
            v142 = (uint64_t **)(v139 + 16 * v140);
            goto LABEL_167;
          }
LABEL_150:
          if (v110)
            return result;
          goto LABEL_151;
        }
        v99 = 1;
        while (v98 != (uint64_t *)-4096)
        {
          v100 = v96 + v99++;
          v96 = v100 & (v95 - 1);
          v98 = *(uint64_t **)(v94 + 16 * v96);
          if (v98 == v63)
          {
            v97 = (uint64_t **)(v94 + 16 * v96);
            goto LABEL_124;
          }
        }
      }
      v97 = (uint64_t **)(v94 + 16 * v95);
      goto LABEL_124;
    }
    v71 = **(_QWORD **)*v62;
    v72 = *(_QWORD *)(v71 + 152);
    v73 = *(unsigned int *)(v71 + 168);
    if ((_DWORD)v73)
    {
      LODWORD(v74) = (v73 - 1) & ((v62 >> 4) ^ (v62 >> 9));
      v75 = (uint64_t **)(v72 + 16 * v74);
      v76 = *v75;
      if (*v75 == v62)
      {
LABEL_87:
        v90 = (size_t *)v75[1];
        v92 = *v90;
        result = (uint64_t)(v90 + 2);
        v91 = v92;
        goto LABEL_88;
      }
      v77 = 1;
      while (v76 != (uint64_t *)-4096)
      {
        v78 = v74 + v77++;
        v74 = v78 & (v73 - 1);
        v76 = *(uint64_t **)(v72 + 16 * v74);
        if (v76 == v62)
        {
          v75 = (uint64_t **)(v72 + 16 * v74);
          goto LABEL_87;
        }
      }
    }
    v75 = (uint64_t **)(v72 + 16 * v73);
    goto LABEL_87;
  }
LABEL_17:
  v26 = *a3;
  v27 = *v6;
  v28 = *a4;
  v29 = sub_1C55F8434(*(_QWORD *)(*a4 + 6936), *(_DWORD *)(*a4 + 6952), *a3, a4[1]);
  result = sub_1C55F8434(*(_QWORD *)(v28 + 6936), *(_DWORD *)(v28 + 6952), v27, a4[1]);
  if (v29 != (_DWORD)result)
  {
    if (v29 >= result)
      goto LABEL_106;
    goto LABEL_33;
  }
  v31 = v26[1];
  if (v31)
  {
    v32 = 0;
    do
    {
      ++v32;
      v31 = *(_QWORD *)(v31 + 8);
    }
    while (v31);
  }
  else
  {
    v32 = 0;
  }
  v33 = v27[1];
  if (v33)
  {
    v34 = 0;
    do
    {
      ++v34;
      v33 = *(_QWORD *)(v33 + 8);
    }
    while (v33);
  }
  else
  {
    v34 = 0;
  }
  v35 = v32 > v34;
  if (v32 != v34)
  {
LABEL_105:
    if (!v35)
      goto LABEL_106;
LABEL_33:
    v6 = a3;
    goto LABEL_151;
  }
  if ((*((_BYTE *)v26 + 23) & 0x10) != 0)
  {
    v36 = **(_QWORD **)*v26;
    v37 = *(_QWORD *)(v36 + 152);
    v38 = *(unsigned int *)(v36 + 168);
    if ((_DWORD)v38)
    {
      LODWORD(v39) = (v38 - 1) & ((v26 >> 4) ^ (v26 >> 9));
      v40 = (uint64_t **)(v37 + 16 * v39);
      v41 = *v40;
      if (*v40 == v26)
      {
LABEL_78:
        v79 = (size_t *)v40[1];
        v81 = *v79;
        result = (uint64_t)(v79 + 2);
        v80 = v81;
        goto LABEL_79;
      }
      v42 = 1;
      while (v41 != (uint64_t *)-4096)
      {
        v43 = v39 + v42++;
        v39 = v43 & (v38 - 1);
        v41 = *(uint64_t **)(v37 + 16 * v39);
        if (v41 == v26)
        {
          v40 = (uint64_t **)(v37 + 16 * v39);
          goto LABEL_78;
        }
      }
    }
    v40 = (uint64_t **)(v37 + 16 * v38);
    goto LABEL_78;
  }
  v80 = 0;
  result = (uint64_t)&byte_1C871356D;
LABEL_79:
  if ((*((_BYTE *)v27 + 23) & 0x10) != 0)
  {
    v82 = **(_QWORD **)*v27;
    v83 = *(_QWORD *)(v82 + 152);
    v84 = *(unsigned int *)(v82 + 168);
    if ((_DWORD)v84)
    {
      LODWORD(v85) = (v84 - 1) & ((v27 >> 4) ^ (v27 >> 9));
      v86 = (uint64_t **)(v83 + 16 * v85);
      v87 = *v86;
      if (*v86 == v27)
      {
LABEL_96:
        v101 = v86[1];
        v104 = *v101;
        v102 = (char *)(v101 + 2);
        v103 = v104;
        goto LABEL_97;
      }
      v88 = 1;
      while (v87 != (uint64_t *)-4096)
      {
        v89 = v85 + v88++;
        v85 = v89 & (v84 - 1);
        v87 = *(uint64_t **)(v83 + 16 * v85);
        if (v87 == v27)
        {
          v86 = (uint64_t **)(v83 + 16 * v85);
          goto LABEL_96;
        }
      }
    }
    v86 = (uint64_t **)(v83 + 16 * v84);
    goto LABEL_96;
  }
  v103 = 0;
  v102 = &byte_1C871356D;
LABEL_97:
  if (v103 >= v80)
    v105 = v80;
  else
    v105 = v103;
  if (!v105 || (result = memcmp((const void *)result, v102, v105), !(_DWORD)result))
  {
    v35 = v80 > v103;
    goto LABEL_105;
  }
  if ((result & 0x80000000) == 0)
    goto LABEL_33;
LABEL_106:
  v106 = *v7;
  *v7 = *v6;
  *v6 = v106;
  v107 = *a3;
  v108 = *a4;
  v109 = sub_1C55F8434(*(_QWORD *)(*a4 + 6936), *(_DWORD *)(*a4 + 6952), *a3, a4[1]);
  result = sub_1C55F8434(*(_QWORD *)(v108 + 6936), *(_DWORD *)(v108 + 6952), v106, a4[1]);
  v110 = v109 >= result;
  if (v109 != (_DWORD)result)
  {
    v7 = v6;
    v6 = a3;
    goto LABEL_150;
  }
  v111 = v107[1];
  if (v111)
  {
    v112 = 0;
    do
    {
      ++v112;
      v111 = *(_QWORD *)(v111 + 8);
    }
    while (v111);
  }
  else
  {
    v112 = 0;
  }
  v113 = (_QWORD **)v106[1];
  if (v113)
  {
    v114 = 0;
    do
    {
      ++v114;
      v113 = (_QWORD **)v113[1];
    }
    while (v113);
  }
  else
  {
    v114 = 0;
  }
  v115 = v112 > v114;
  if (v112 != v114)
  {
    v7 = v6;
    v6 = a3;
    goto LABEL_194;
  }
  if ((*((_BYTE *)v107 + 23) & 0x10) != 0)
  {
    v116 = **(_QWORD **)*v107;
    v117 = *(_QWORD *)(v116 + 152);
    v118 = *(unsigned int *)(v116 + 168);
    if ((_DWORD)v118)
    {
      LODWORD(v119) = (v118 - 1) & ((v107 >> 4) ^ (v107 >> 9));
      v120 = (uint64_t **)(v117 + 16 * v119);
      v121 = *v120;
      if (*v120 == v107)
      {
LABEL_158:
        v147 = (size_t *)v120[1];
        v149 = *v147;
        result = (uint64_t)(v147 + 2);
        v148 = v149;
        goto LABEL_159;
      }
      v122 = 1;
      while (v121 != (uint64_t *)-4096)
      {
        v123 = v119 + v122++;
        v119 = v123 & (v118 - 1);
        v121 = *(uint64_t **)(v117 + 16 * v119);
        if (v121 == v107)
        {
          v120 = (uint64_t **)(v117 + 16 * v119);
          goto LABEL_158;
        }
      }
    }
    v120 = (uint64_t **)(v117 + 16 * v118);
    goto LABEL_158;
  }
  v148 = 0;
  result = (uint64_t)&byte_1C871356D;
LABEL_159:
  if ((*((_BYTE *)v106 + 23) & 0x10) == 0)
  {
    v171 = 0;
    v170 = &byte_1C871356D;
    goto LABEL_177;
  }
  v150 = **(_QWORD **)*v106;
  v151 = *(_QWORD *)(v150 + 152);
  v152 = *(unsigned int *)(v150 + 168);
  if (!(_DWORD)v152)
    goto LABEL_175;
  LODWORD(v153) = (v152 - 1) & ((v106 >> 4) ^ (v106 >> 9));
  v154 = (uint64_t **)(v151 + 16 * v153);
  v155 = *v154;
  if (*v154 != v106)
  {
    v156 = 1;
    while (v155 != (uint64_t *)-4096)
    {
      v157 = v153 + v156++;
      v153 = v157 & (v152 - 1);
      v155 = *(uint64_t **)(v151 + 16 * v153);
      if (v155 == v106)
      {
        v154 = (uint64_t **)(v151 + 16 * v153);
        goto LABEL_176;
      }
    }
LABEL_175:
    v154 = (uint64_t **)(v151 + 16 * v152);
  }
LABEL_176:
  v169 = v154[1];
  v172 = *v169;
  v170 = (char *)(v169 + 2);
  v171 = v172;
LABEL_177:
  if (v171 >= v148)
    v173 = v148;
  else
    v173 = v171;
  if (v173)
  {
    result = memcmp((const void *)result, v170, v173);
    if ((_DWORD)result)
    {
      v7 = v6;
      v6 = a3;
      goto LABEL_191;
    }
  }
  v7 = v6;
  v6 = a3;
  v115 = v148 > v171;
LABEL_194:
  if (v115)
    goto LABEL_151;
  return result;
}

BOOL sub_1C55F75E4(uint64_t **a1, uint64_t **a2, uint64_t *a3)
{
  uint64_t **v4;
  uint64_t v5;
  _BOOL8 result;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  _QWORD **v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  BOOL v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t **v21;
  uint64_t *v22;
  int v23;
  int v24;
  uint64_t **v25;
  uint64_t **v26;
  int v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  unsigned int v31;
  unsigned int v32;
  uint64_t v33;
  unsigned int v34;
  _QWORD **v35;
  unsigned int v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t **v42;
  uint64_t *v43;
  int v44;
  int v45;
  uint64_t *v46;
  char *v47;
  size_t v48;
  size_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t **v54;
  uint64_t *v55;
  int v56;
  int v57;
  uint64_t *v58;
  char *v59;
  size_t v60;
  size_t v61;
  size_t v62;
  int v63;
  uint64_t *v64;
  uint64_t **v65;
  uint64_t **v66;
  uint64_t *v67;
  uint64_t *v68;
  uint64_t v69;
  unsigned int v70;
  unsigned int v71;
  uint64_t v72;
  unsigned int v73;
  uint64_t v74;
  unsigned int v75;
  BOOL v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t **v81;
  uint64_t *v82;
  int v83;
  int v84;
  uint64_t *v85;
  char *v86;
  size_t v87;
  size_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t **v93;
  uint64_t *v94;
  int v95;
  int v96;
  uint64_t *v97;
  char *v98;
  size_t v99;
  size_t v100;
  size_t v101;
  int v102;
  uint64_t **v103;
  uint64_t **v104;
  uint64_t *v105;
  uint64_t *v106;
  uint64_t v107;
  unsigned int v108;
  unsigned int v109;
  _QWORD **v110;
  unsigned int v111;
  _QWORD **v112;
  unsigned int v113;
  BOOL v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t **v119;
  uint64_t *v120;
  int v121;
  int v122;
  uint64_t *v123;
  char *v124;
  size_t v125;
  size_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t **v131;
  uint64_t *v132;
  int v133;
  int v134;
  uint64_t *v135;
  char *v136;
  size_t v137;
  size_t v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t **v143;
  uint64_t *v144;
  int v145;
  int v146;
  uint64_t *v147;
  char *v148;
  size_t v149;
  size_t v150;
  size_t v151;
  int v152;
  uint64_t *v153;
  uint64_t *v154;
  char *v155;
  size_t v156;
  size_t v157;
  size_t v158;
  int v159;
  uint64_t *v160;
  uint64_t *v161;
  uint64_t *v162;
  uint64_t v163;
  unsigned int v164;
  unsigned int v165;
  uint64_t v166;
  unsigned int v167;
  _QWORD **v168;
  unsigned int v169;
  BOOL v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t **v175;
  uint64_t *v176;
  int v177;
  int v178;
  uint64_t *v179;
  char *v180;
  size_t v181;
  size_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t **v187;
  uint64_t *v188;
  int v189;
  int v190;
  uint64_t *v191;
  char *v192;
  size_t v193;
  size_t v194;
  size_t v195;
  int v196;
  uint64_t *v197;
  uint64_t *v198;
  uint64_t *v199;
  uint64_t v200;
  unsigned int v201;
  unsigned int v202;
  uint64_t v203;
  unsigned int v204;
  _QWORD **v205;
  unsigned int v206;
  BOOL v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t **v212;
  uint64_t *v213;
  int v214;
  int v215;
  uint64_t *v216;
  char *v217;
  size_t v218;
  size_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  uint64_t **v224;
  uint64_t *v225;
  int v226;
  int v227;
  uint64_t *v228;
  char *v229;
  size_t v230;
  size_t v231;
  size_t v232;
  int v233;
  uint64_t *v234;
  uint64_t *v235;
  uint64_t *v236;
  uint64_t v237;
  unsigned int v238;
  unsigned int v239;
  _QWORD **v240;
  unsigned int v241;
  uint64_t v242;
  unsigned int v243;
  BOOL v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t **v249;
  uint64_t *v250;
  int v251;
  int v252;
  uint64_t *v253;
  char *v254;
  size_t v255;
  size_t v256;
  uint64_t v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t **v261;
  uint64_t *v262;
  int v263;
  int v264;
  uint64_t *v265;
  char *v266;
  size_t v267;
  size_t v268;
  size_t v269;
  int v270;
  uint64_t **v271;

  v4 = a2;
  v5 = a2 - a1;
  result = 1;
  switch(v5)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v7 = *(a2 - 1);
      v8 = *a1;
      v9 = *a3;
      v10 = sub_1C55F8434(*(_QWORD *)(*a3 + 6936), *(_DWORD *)(*a3 + 6952), v7, a3[1]);
      v11 = sub_1C55F8434(*(_QWORD *)(v9 + 6936), *(_DWORD *)(v9 + 6952), v8, a3[1]);
      if (v10 == v11)
      {
        v12 = (_QWORD **)v7[1];
        if (v12)
        {
          v13 = 0;
          do
          {
            ++v13;
            v12 = (_QWORD **)v12[1];
          }
          while (v12);
        }
        else
        {
          v13 = 0;
        }
        v14 = v8[1];
        if (v14)
        {
          v15 = 0;
          do
          {
            ++v15;
            v14 = *(_QWORD *)(v14 + 8);
          }
          while (v14);
        }
        else
        {
          v15 = 0;
        }
        v16 = v13 > v15;
        if (v13 == v15)
        {
          if ((*((_BYTE *)v7 + 23) & 0x10) != 0)
          {
            v17 = **(_QWORD **)*v7;
            v18 = *(_QWORD *)(v17 + 152);
            v19 = *(unsigned int *)(v17 + 168);
            if ((_DWORD)v19)
            {
              LODWORD(v20) = (v19 - 1) & ((v7 >> 4) ^ (v7 >> 9));
              v21 = (uint64_t **)(v18 + 16 * v20);
              v22 = *v21;
              if (*v21 != v7)
              {
                v23 = 1;
                do
                {
                  if (v22 == (uint64_t *)-4096)
                    goto LABEL_138;
                  v24 = v20 + v23++;
                  v20 = v24 & (v19 - 1);
                  v22 = *(uint64_t **)(v18 + 16 * v20);
                }
                while (v22 != v7);
                v21 = (uint64_t **)(v18 + 16 * v20);
              }
            }
            else
            {
LABEL_138:
              v21 = (uint64_t **)(v18 + 16 * v19);
            }
            v123 = v21[1];
            v126 = *v123;
            v124 = (char *)(v123 + 2);
            v125 = v126;
          }
          else
          {
            v125 = 0;
            v124 = &byte_1C871356D;
          }
          if ((*((_BYTE *)v8 + 23) & 0x10) != 0)
          {
            v127 = **(_QWORD **)*v8;
            v128 = *(_QWORD *)(v127 + 152);
            v129 = *(unsigned int *)(v127 + 168);
            if ((_DWORD)v129)
            {
              LODWORD(v130) = (v129 - 1) & ((v8 >> 4) ^ (v8 >> 9));
              v131 = (uint64_t **)(v128 + 16 * v130);
              v132 = *v131;
              if (*v131 != v8)
              {
                v133 = 1;
                do
                {
                  if (v132 == (uint64_t *)-4096)
                    goto LABEL_156;
                  v134 = v130 + v133++;
                  v130 = v134 & (v129 - 1);
                  v132 = *(uint64_t **)(v128 + 16 * v130);
                }
                while (v132 != v8);
                v131 = (uint64_t **)(v128 + 16 * v130);
              }
            }
            else
            {
LABEL_156:
              v131 = (uint64_t **)(v128 + 16 * v129);
            }
            v147 = v131[1];
            v150 = *v147;
            v148 = (char *)(v147 + 2);
            v149 = v150;
          }
          else
          {
            v149 = 0;
            v148 = &byte_1C871356D;
          }
          if (v149 >= v125)
            v151 = v125;
          else
            v151 = v149;
          if (v151)
          {
            v152 = memcmp(v124, v148, v151);
            if (v152)
            {
              if (v152 < 0)
                return 1;
              goto LABEL_168;
            }
          }
          v16 = v125 > v149;
        }
        if (!v16)
          return 1;
        goto LABEL_168;
      }
      if (v10 >= v11)
        return 1;
LABEL_168:
      v153 = *a1;
      *a1 = *(v4 - 1);
      *(v4 - 1) = v153;
      return 1;
    case 3:
      sub_1C55F6C74(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_1C55F84EC(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      v103 = a1 + 2;
      v104 = a1 + 3;
      sub_1C55F84EC(a1, a1 + 1, a1 + 2, a1 + 3, a3);
      v105 = *(v4 - 1);
      v106 = a1[3];
      v107 = *a3;
      v108 = sub_1C55F8434(*(_QWORD *)(*a3 + 6936), *(_DWORD *)(*a3 + 6952), v105, a3[1]);
      v109 = sub_1C55F8434(*(_QWORD *)(v107 + 6936), *(_DWORD *)(v107 + 6952), v106, a3[1]);
      if (v108 != v109)
      {
        if (v108 >= v109)
          return 1;
        goto LABEL_181;
      }
      v110 = (_QWORD **)v105[1];
      if (v110)
      {
        v111 = 0;
        do
        {
          ++v111;
          v110 = (_QWORD **)v110[1];
        }
        while (v110);
      }
      else
      {
        v111 = 0;
      }
      v112 = (_QWORD **)v106[1];
      if (v112)
      {
        v113 = 0;
        do
        {
          ++v113;
          v112 = (_QWORD **)v112[1];
        }
        while (v112);
      }
      else
      {
        v113 = 0;
      }
      v114 = v111 > v113;
      if (v111 != v113)
        goto LABEL_179;
      if ((*((_BYTE *)v105 + 23) & 0x10) != 0)
      {
        v115 = **(_QWORD **)*v105;
        v116 = *(_QWORD *)(v115 + 152);
        v117 = *(unsigned int *)(v115 + 168);
        if ((_DWORD)v117)
        {
          LODWORD(v118) = (v117 - 1) & ((v105 >> 4) ^ (v105 >> 9));
          v119 = (uint64_t **)(v116 + 16 * v118);
          v120 = *v119;
          if (*v119 != v105)
          {
            v121 = 1;
            do
            {
              if (v120 == (uint64_t *)-4096)
                goto LABEL_147;
              v122 = v118 + v121++;
              v118 = v122 & (v117 - 1);
              v120 = *(uint64_t **)(v116 + 16 * v118);
            }
            while (v120 != v105);
            v119 = (uint64_t **)(v116 + 16 * v118);
          }
        }
        else
        {
LABEL_147:
          v119 = (uint64_t **)(v116 + 16 * v117);
        }
        v135 = v119[1];
        v138 = *v135;
        v136 = (char *)(v135 + 2);
        v137 = v138;
        goto LABEL_149;
      }
      v137 = 0;
      v136 = &byte_1C871356D;
LABEL_149:
      if ((*((_BYTE *)v106 + 23) & 0x10) != 0)
      {
        v139 = **(_QWORD **)*v106;
        v140 = *(_QWORD *)(v139 + 152);
        v141 = *(unsigned int *)(v139 + 168);
        if ((_DWORD)v141)
        {
          LODWORD(v142) = (v141 - 1) & ((v106 >> 4) ^ (v106 >> 9));
          v143 = (uint64_t **)(v140 + 16 * v142);
          v144 = *v143;
          if (*v143 != v106)
          {
            v145 = 1;
            do
            {
              if (v144 == (uint64_t *)-4096)
                goto LABEL_169;
              v146 = v142 + v145++;
              v142 = v146 & (v141 - 1);
              v144 = *(uint64_t **)(v140 + 16 * v142);
            }
            while (v144 != v106);
            v143 = (uint64_t **)(v140 + 16 * v142);
          }
        }
        else
        {
LABEL_169:
          v143 = (uint64_t **)(v140 + 16 * v141);
        }
        v154 = v143[1];
        v157 = *v154;
        v155 = (char *)(v154 + 2);
        v156 = v157;
        goto LABEL_171;
      }
      v156 = 0;
      v155 = &byte_1C871356D;
LABEL_171:
      if (v156 >= v137)
        v158 = v137;
      else
        v158 = v156;
      if (v158 && (v159 = memcmp(v136, v155, v158)) != 0)
      {
        if (v159 < 0)
          return 1;
      }
      else
      {
        v114 = v137 > v156;
LABEL_179:
        if (!v114)
          return 1;
      }
LABEL_181:
      v160 = *v104;
      *v104 = *(v4 - 1);
      *(v4 - 1) = v160;
      v161 = *v104;
      v162 = *v103;
      v163 = *a3;
      v164 = sub_1C55F8434(*(_QWORD *)(*a3 + 6936), *(_DWORD *)(*a3 + 6952), *v104, a3[1]);
      v165 = sub_1C55F8434(*(_QWORD *)(v163 + 6936), *(_DWORD *)(v163 + 6952), v162, a3[1]);
      if (v164 != v165)
      {
        if (v164 >= v165)
          return 1;
        goto LABEL_221;
      }
      v166 = v161[1];
      if (v166)
      {
        v167 = 0;
        do
        {
          ++v167;
          v166 = *(_QWORD *)(v166 + 8);
        }
        while (v166);
      }
      else
      {
        v167 = 0;
      }
      v168 = (_QWORD **)v162[1];
      if (v168)
      {
        v169 = 0;
        do
        {
          ++v169;
          v168 = (_QWORD **)v168[1];
        }
        while (v168);
      }
      else
      {
        v169 = 0;
      }
      v170 = v167 > v169;
      if (v167 != v169)
        goto LABEL_219;
      if ((*((_BYTE *)v161 + 23) & 0x10) != 0)
      {
        v171 = **(_QWORD **)*v161;
        v172 = *(_QWORD *)(v171 + 152);
        v173 = *(unsigned int *)(v171 + 168);
        if ((_DWORD)v173)
        {
          LODWORD(v174) = (v173 - 1) & ((v161 >> 4) ^ (v161 >> 9));
          v175 = (uint64_t **)(v172 + 16 * v174);
          v176 = *v175;
          if (*v175 != v161)
          {
            v177 = 1;
            do
            {
              if (v176 == (uint64_t *)-4096)
                goto LABEL_200;
              v178 = v174 + v177++;
              v174 = v178 & (v173 - 1);
              v176 = *(uint64_t **)(v172 + 16 * v174);
            }
            while (v176 != v161);
            v175 = (uint64_t **)(v172 + 16 * v174);
          }
        }
        else
        {
LABEL_200:
          v175 = (uint64_t **)(v172 + 16 * v173);
        }
        v179 = v175[1];
        v182 = *v179;
        v180 = (char *)(v179 + 2);
        v181 = v182;
        goto LABEL_202;
      }
      v181 = 0;
      v180 = &byte_1C871356D;
LABEL_202:
      if ((*((_BYTE *)v162 + 23) & 0x10) != 0)
      {
        v183 = **(_QWORD **)*v162;
        v184 = *(_QWORD *)(v183 + 152);
        v185 = *(unsigned int *)(v183 + 168);
        if ((_DWORD)v185)
        {
          LODWORD(v186) = (v185 - 1) & ((v162 >> 4) ^ (v162 >> 9));
          v187 = (uint64_t **)(v184 + 16 * v186);
          v188 = *v187;
          if (*v187 != v162)
          {
            v189 = 1;
            do
            {
              if (v188 == (uint64_t *)-4096)
                goto LABEL_209;
              v190 = v186 + v189++;
              v186 = v190 & (v185 - 1);
              v188 = *(uint64_t **)(v184 + 16 * v186);
            }
            while (v188 != v162);
            v187 = (uint64_t **)(v184 + 16 * v186);
          }
        }
        else
        {
LABEL_209:
          v187 = (uint64_t **)(v184 + 16 * v185);
        }
        v191 = v187[1];
        v194 = *v191;
        v192 = (char *)(v191 + 2);
        v193 = v194;
        goto LABEL_211;
      }
      v193 = 0;
      v192 = &byte_1C871356D;
LABEL_211:
      if (v193 >= v181)
        v195 = v181;
      else
        v195 = v193;
      if (v195 && (v196 = memcmp(v180, v192, v195)) != 0)
      {
        if (v196 < 0)
          return 1;
      }
      else
      {
        v170 = v181 > v193;
LABEL_219:
        if (!v170)
          return 1;
      }
LABEL_221:
      v197 = *v103;
      v198 = *v104;
      *v103 = *v104;
      *v104 = v197;
      v199 = a1[1];
      v200 = *a3;
      v201 = sub_1C55F8434(*(_QWORD *)(*a3 + 6936), *(_DWORD *)(*a3 + 6952), v198, a3[1]);
      v202 = sub_1C55F8434(*(_QWORD *)(v200 + 6936), *(_DWORD *)(v200 + 6952), v199, a3[1]);
      if (v201 != v202)
      {
        if (v201 >= v202)
          return 1;
        goto LABEL_261;
      }
      v203 = v198[1];
      if (v203)
      {
        v204 = 0;
        do
        {
          ++v204;
          v203 = *(_QWORD *)(v203 + 8);
        }
        while (v203);
      }
      else
      {
        v204 = 0;
      }
      v205 = (_QWORD **)v199[1];
      if (v205)
      {
        v206 = 0;
        do
        {
          ++v206;
          v205 = (_QWORD **)v205[1];
        }
        while (v205);
      }
      else
      {
        v206 = 0;
      }
      v207 = v204 > v206;
      if (v204 != v206)
        goto LABEL_259;
      if ((*((_BYTE *)v198 + 23) & 0x10) != 0)
      {
        v208 = **(_QWORD **)*v198;
        v209 = *(_QWORD *)(v208 + 152);
        v210 = *(unsigned int *)(v208 + 168);
        if ((_DWORD)v210)
        {
          LODWORD(v211) = (v210 - 1) & ((v198 >> 4) ^ (v198 >> 9));
          v212 = (uint64_t **)(v209 + 16 * v211);
          v213 = *v212;
          if (*v212 != v198)
          {
            v214 = 1;
            do
            {
              if (v213 == (uint64_t *)-4096)
                goto LABEL_240;
              v215 = v211 + v214++;
              v211 = v215 & (v210 - 1);
              v213 = *(uint64_t **)(v209 + 16 * v211);
            }
            while (v213 != v198);
            v212 = (uint64_t **)(v209 + 16 * v211);
          }
        }
        else
        {
LABEL_240:
          v212 = (uint64_t **)(v209 + 16 * v210);
        }
        v216 = v212[1];
        v219 = *v216;
        v217 = (char *)(v216 + 2);
        v218 = v219;
        goto LABEL_242;
      }
      v218 = 0;
      v217 = &byte_1C871356D;
LABEL_242:
      if ((*((_BYTE *)v199 + 23) & 0x10) != 0)
      {
        v220 = **(_QWORD **)*v199;
        v221 = *(_QWORD *)(v220 + 152);
        v222 = *(unsigned int *)(v220 + 168);
        if ((_DWORD)v222)
        {
          LODWORD(v223) = (v222 - 1) & ((v199 >> 4) ^ (v199 >> 9));
          v224 = (uint64_t **)(v221 + 16 * v223);
          v225 = *v224;
          if (*v224 != v199)
          {
            v226 = 1;
            do
            {
              if (v225 == (uint64_t *)-4096)
                goto LABEL_249;
              v227 = v223 + v226++;
              v223 = v227 & (v222 - 1);
              v225 = *(uint64_t **)(v221 + 16 * v223);
            }
            while (v225 != v199);
            v224 = (uint64_t **)(v221 + 16 * v223);
          }
        }
        else
        {
LABEL_249:
          v224 = (uint64_t **)(v221 + 16 * v222);
        }
        v228 = v224[1];
        v231 = *v228;
        v229 = (char *)(v228 + 2);
        v230 = v231;
        goto LABEL_251;
      }
      v230 = 0;
      v229 = &byte_1C871356D;
LABEL_251:
      if (v230 >= v218)
        v232 = v218;
      else
        v232 = v230;
      if (v232 && (v233 = memcmp(v217, v229, v232)) != 0)
      {
        if (v233 < 0)
          return 1;
      }
      else
      {
        v207 = v218 > v230;
LABEL_259:
        if (!v207)
          return 1;
      }
LABEL_261:
      v234 = a1[1];
      v235 = a1[2];
      v236 = *a1;
      a1[1] = v235;
      a1[2] = v234;
      v237 = *a3;
      v238 = sub_1C55F8434(*(_QWORD *)(*a3 + 6936), *(_DWORD *)(*a3 + 6952), v235, a3[1]);
      v239 = sub_1C55F8434(*(_QWORD *)(v237 + 6936), *(_DWORD *)(v237 + 6952), v236, a3[1]);
      if (v238 != v239)
      {
        if (v238 >= v239)
          return 1;
        goto LABEL_277;
      }
      v240 = (_QWORD **)v235[1];
      if (v240)
      {
        v241 = 0;
        do
        {
          ++v241;
          v240 = (_QWORD **)v240[1];
        }
        while (v240);
      }
      else
      {
        v241 = 0;
      }
      v242 = v236[1];
      if (v242)
      {
        v243 = 0;
        do
        {
          ++v243;
          v242 = *(_QWORD *)(v242 + 8);
        }
        while (v242);
      }
      else
      {
        v243 = 0;
      }
      v244 = v241 > v243;
      if (v241 != v243)
        goto LABEL_304;
      if ((*((_BYTE *)v235 + 23) & 0x10) == 0)
      {
        v255 = 0;
        v254 = &byte_1C871356D;
LABEL_287:
        if ((*((_BYTE *)v236 + 23) & 0x10) == 0)
        {
          v267 = 0;
          v266 = &byte_1C871356D;
LABEL_296:
          if (v267 >= v255)
            v269 = v255;
          else
            v269 = v267;
          if (v269 && (v270 = memcmp(v254, v266, v269)) != 0)
          {
            if (v270 < 0)
              return 1;
          }
          else
          {
            v244 = v255 > v267;
LABEL_304:
            if (!v244)
              return 1;
          }
LABEL_277:
          *(int8x16_t *)a1 = vextq_s8(*(int8x16_t *)a1, *(int8x16_t *)a1, 8uLL);
          return 1;
        }
        v257 = **(_QWORD **)*v236;
        v258 = *(_QWORD *)(v257 + 152);
        v259 = *(unsigned int *)(v257 + 168);
        if ((_DWORD)v259)
        {
          LODWORD(v260) = (v259 - 1) & ((v236 >> 4) ^ (v236 >> 9));
          v261 = (uint64_t **)(v258 + 16 * v260);
          v262 = *v261;
          if (*v261 == v236)
          {
LABEL_295:
            v265 = v261[1];
            v268 = *v265;
            v266 = (char *)(v265 + 2);
            v267 = v268;
            goto LABEL_296;
          }
          v263 = 1;
          while (v262 != (uint64_t *)-4096)
          {
            v264 = v260 + v263++;
            v260 = v264 & (v259 - 1);
            v262 = *(uint64_t **)(v258 + 16 * v260);
            if (v262 == v236)
            {
              v261 = (uint64_t **)(v258 + 16 * v260);
              goto LABEL_295;
            }
          }
        }
        v261 = (uint64_t **)(v258 + 16 * v259);
        goto LABEL_295;
      }
      v245 = **(_QWORD **)*v235;
      v246 = *(_QWORD *)(v245 + 152);
      v247 = *(unsigned int *)(v245 + 168);
      if (!(_DWORD)v247)
        goto LABEL_285;
      LODWORD(v248) = (v247 - 1) & ((v235 >> 4) ^ (v235 >> 9));
      v249 = (uint64_t **)(v246 + 16 * v248);
      v250 = *v249;
      if (*v249 != v235)
      {
        v251 = 1;
        while (v250 != (uint64_t *)-4096)
        {
          v252 = v248 + v251++;
          v248 = v252 & (v247 - 1);
          v250 = *(uint64_t **)(v246 + 16 * v248);
          if (v250 == v235)
          {
            v249 = (uint64_t **)(v246 + 16 * v248);
            goto LABEL_286;
          }
        }
LABEL_285:
        v249 = (uint64_t **)(v246 + 16 * v247);
      }
LABEL_286:
      v253 = v249[1];
      v256 = *v253;
      v254 = (char *)(v253 + 2);
      v255 = v256;
      goto LABEL_287;
    default:
      v25 = a1 + 2;
      sub_1C55F6C74(a1, a1 + 1, a1 + 2, a3);
      v26 = a1 + 3;
      if (a1 + 3 == v4)
        return 1;
      v27 = 0;
      v271 = v4;
      while (2)
      {
        v28 = *v26;
        v29 = *v25;
        v30 = *a3;
        v31 = sub_1C55F8434(*(_QWORD *)(*a3 + 6936), *(_DWORD *)(*a3 + 6952), *v26, a3[1]);
        v32 = sub_1C55F8434(*(_QWORD *)(v30 + 6936), *(_DWORD *)(v30 + 6952), v29, a3[1]);
        if (v31 != v32)
        {
          if (v31 >= v32)
            goto LABEL_108;
          goto LABEL_59;
        }
        v33 = v28[1];
        if (v33)
        {
          v34 = 0;
          do
          {
            ++v34;
            v33 = *(_QWORD *)(v33 + 8);
          }
          while (v33);
        }
        else
        {
          v34 = 0;
        }
        v35 = (_QWORD **)v29[1];
        if (v35)
        {
          v36 = 0;
          do
          {
            ++v36;
            v35 = (_QWORD **)v35[1];
          }
          while (v35);
        }
        else
        {
          v36 = 0;
        }
        v37 = v34 > v36;
        if (v34 != v36)
          goto LABEL_57;
        if ((*((_BYTE *)v28 + 23) & 0x10) != 0)
        {
          v38 = **(_QWORD **)*v28;
          v39 = *(_QWORD *)(v38 + 152);
          v40 = *(unsigned int *)(v38 + 168);
          if ((_DWORD)v40)
          {
            LODWORD(v41) = (v40 - 1) & ((v28 >> 4) ^ (v28 >> 9));
            v42 = (uint64_t **)(v39 + 16 * v41);
            v43 = *v42;
            if (*v42 != v28)
            {
              v44 = 1;
              do
              {
                if (v43 == (uint64_t *)-4096)
                  goto LABEL_38;
                v45 = v41 + v44++;
                v41 = v45 & (v40 - 1);
                v43 = *(uint64_t **)(v39 + 16 * v41);
              }
              while (v43 != v28);
              v42 = (uint64_t **)(v39 + 16 * v41);
            }
          }
          else
          {
LABEL_38:
            v42 = (uint64_t **)(v39 + 16 * v40);
          }
          v46 = v42[1];
          v49 = *v46;
          v47 = (char *)(v46 + 2);
          v48 = v49;
          goto LABEL_40;
        }
        v48 = 0;
        v47 = &byte_1C871356D;
LABEL_40:
        if ((*((_BYTE *)v29 + 23) & 0x10) != 0)
        {
          v50 = **(_QWORD **)*v29;
          v51 = *(_QWORD *)(v50 + 152);
          v52 = *(unsigned int *)(v50 + 168);
          if ((_DWORD)v52)
          {
            LODWORD(v53) = (v52 - 1) & ((v29 >> 4) ^ (v29 >> 9));
            v54 = (uint64_t **)(v51 + 16 * v53);
            v55 = *v54;
            if (*v54 != v29)
            {
              v56 = 1;
              do
              {
                if (v55 == (uint64_t *)-4096)
                  goto LABEL_47;
                v57 = v53 + v56++;
                v53 = v57 & (v52 - 1);
                v55 = *(uint64_t **)(v51 + 16 * v53);
              }
              while (v55 != v29);
              v54 = (uint64_t **)(v51 + 16 * v53);
            }
          }
          else
          {
LABEL_47:
            v54 = (uint64_t **)(v51 + 16 * v52);
          }
          v58 = v54[1];
          v61 = *v58;
          v59 = (char *)(v58 + 2);
          v60 = v61;
          goto LABEL_49;
        }
        v60 = 0;
        v59 = &byte_1C871356D;
LABEL_49:
        if (v60 >= v48)
          v62 = v48;
        else
          v62 = v60;
        if (v62 && (v63 = memcmp(v47, v59, v62)) != 0)
        {
          if (v63 < 0)
            goto LABEL_108;
        }
        else
        {
          v37 = v48 > v60;
LABEL_57:
          if (!v37)
            goto LABEL_108;
        }
LABEL_59:
        v64 = *v26;
        *v26 = *v25;
        v65 = a1;
        if (v25 == a1)
          goto LABEL_107;
        v66 = v25;
        while (2)
        {
          v68 = *--v66;
          v67 = v68;
          v69 = *a3;
          v70 = sub_1C55F8434(*(_QWORD *)(*a3 + 6936), *(_DWORD *)(*a3 + 6952), v64, a3[1]);
          v71 = sub_1C55F8434(*(_QWORD *)(v69 + 6936), *(_DWORD *)(v69 + 6952), v68, a3[1]);
          if (v70 != v71)
          {
            if (v70 >= v71)
              break;
            goto LABEL_101;
          }
          v72 = v64[1];
          if (v72)
          {
            v73 = 0;
            do
            {
              ++v73;
              v72 = *(_QWORD *)(v72 + 8);
            }
            while (v72);
          }
          else
          {
            v73 = 0;
          }
          v74 = v67[1];
          if (v74)
          {
            v75 = 0;
            do
            {
              ++v75;
              v74 = *(_QWORD *)(v74 + 8);
            }
            while (v74);
          }
          else
          {
            v75 = 0;
          }
          v76 = v73 > v75;
          if (v73 != v75)
            goto LABEL_99;
          if ((*((_BYTE *)v64 + 23) & 0x10) != 0)
          {
            v77 = **(_QWORD **)*v64;
            v78 = *(_QWORD *)(v77 + 152);
            v79 = *(unsigned int *)(v77 + 168);
            if ((_DWORD)v79)
            {
              LODWORD(v80) = (v79 - 1) & ((v64 >> 4) ^ (v64 >> 9));
              v81 = (uint64_t **)(v78 + 16 * v80);
              v82 = *v81;
              if (*v81 == v64)
              {
LABEL_81:
                v85 = v81[1];
                v88 = *v85;
                v86 = (char *)(v85 + 2);
                v87 = v88;
                goto LABEL_82;
              }
              v83 = 1;
              while (v82 != (uint64_t *)-4096)
              {
                v84 = v80 + v83++;
                v80 = v84 & (v79 - 1);
                v82 = *(uint64_t **)(v78 + 16 * v80);
                if (v82 == v64)
                {
                  v81 = (uint64_t **)(v78 + 16 * v80);
                  goto LABEL_81;
                }
              }
            }
            v81 = (uint64_t **)(v78 + 16 * v79);
            goto LABEL_81;
          }
          v87 = 0;
          v86 = &byte_1C871356D;
LABEL_82:
          if ((*((_BYTE *)v67 + 23) & 0x10) != 0)
          {
            v89 = **(_QWORD **)*v67;
            v90 = *(_QWORD *)(v89 + 152);
            v91 = *(unsigned int *)(v89 + 168);
            if ((_DWORD)v91)
            {
              LODWORD(v92) = (v91 - 1) & ((v67 >> 4) ^ (v67 >> 9));
              v93 = (uint64_t **)(v90 + 16 * v92);
              v94 = *v93;
              if (*v93 == v67)
              {
LABEL_90:
                v97 = v93[1];
                v100 = *v97;
                v98 = (char *)(v97 + 2);
                v99 = v100;
                goto LABEL_91;
              }
              v95 = 1;
              while (v94 != (uint64_t *)-4096)
              {
                v96 = v92 + v95++;
                v92 = v96 & (v91 - 1);
                v94 = *(uint64_t **)(v90 + 16 * v92);
                if (v94 == v67)
                {
                  v93 = (uint64_t **)(v90 + 16 * v92);
                  goto LABEL_90;
                }
              }
            }
            v93 = (uint64_t **)(v90 + 16 * v91);
            goto LABEL_90;
          }
          v99 = 0;
          v98 = &byte_1C871356D;
LABEL_91:
          if (v99 >= v87)
            v101 = v87;
          else
            v101 = v99;
          if (v101)
          {
            v102 = memcmp(v86, v98, v101);
            if (v102)
            {
              if (v102 < 0)
                break;
              goto LABEL_101;
            }
          }
          v76 = v87 > v99;
LABEL_99:
          if (v76)
          {
LABEL_101:
            *v25 = *(v25 - 1);
            v25 = v66;
            if (v66 == a1)
            {
              v65 = a1;
              goto LABEL_106;
            }
            continue;
          }
          break;
        }
        v65 = v25;
LABEL_106:
        v4 = v271;
LABEL_107:
        *v65 = v64;
        if (++v27 != 8)
        {
LABEL_108:
          v25 = v26++;
          if (v26 == v4)
            return 1;
          continue;
        }
        return v26 + 1 == v4;
      }
  }
}

uint64_t sub_1C55F8434(uint64_t a1, unsigned int a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  int v7;
  int v8;
  int v9;
  uint64_t v10;
  const char *v11;
  uint64_t v13;

  if (a2)
  {
    LODWORD(v4) = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v5 = a1 + 16 * v4;
    v6 = *(uint64_t **)v5;
    if (*(uint64_t **)v5 == a3)
      goto LABEL_8;
    v7 = 1;
    while (v6 != (uint64_t *)-4096)
    {
      v8 = v4 + v7++;
      v4 = v8 & (a2 - 1);
      v6 = *(uint64_t **)(a1 + 16 * v4);
      if (v6 == a3)
      {
        v5 = a1 + 16 * v4;
        goto LABEL_8;
      }
    }
  }
  v5 = a1 + 16 * a2;
LABEL_8:
  v9 = *(_DWORD *)(v5 + 8);
  sub_1C4768AD0(a4, *a3);
  if ((_DWORD)v11 == 1)
  {
    v13 = v10;
    v10 = v13;
  }
  return v9 * ((unint64_t)(v10 + 7) >> 3);
}

uint64_t sub_1C55F84EC(uint64_t **a1, uint64_t **a2, uint64_t **a3, uint64_t **a4, uint64_t *a5)
{
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t result;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  unsigned int v18;
  BOOL v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t **v24;
  uint64_t *v25;
  int v26;
  int v27;
  size_t *v28;
  size_t v29;
  size_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t **v35;
  uint64_t *v36;
  int v37;
  int v38;
  uint64_t *v39;
  char *v40;
  size_t v41;
  size_t v42;
  size_t v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  unsigned int v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int v52;
  BOOL v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t **v58;
  uint64_t *v59;
  int v60;
  int v61;
  size_t *v62;
  size_t v63;
  size_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t **v69;
  uint64_t *v70;
  int v71;
  int v72;
  uint64_t *v73;
  char *v74;
  size_t v75;
  size_t v76;
  size_t v77;
  uint64_t *v78;
  uint64_t *v79;
  uint64_t *v80;
  uint64_t v81;
  unsigned int v82;
  uint64_t v83;
  unsigned int v84;
  uint64_t v85;
  unsigned int v86;
  BOOL v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t **v92;
  uint64_t *v93;
  int v94;
  int v95;
  uint64_t *v96;
  size_t *v97;
  size_t v98;
  size_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t **v104;
  uint64_t *v105;
  int v106;
  int v107;
  uint64_t *v108;
  char *v109;
  size_t v110;
  size_t v111;
  size_t v112;

  sub_1C55F6C74(a1, a2, a3, a5);
  v10 = *a4;
  v11 = *a3;
  v12 = *a5;
  v13 = sub_1C55F8434(*(_QWORD *)(*a5 + 6936), *(_DWORD *)(*a5 + 6952), *a4, a5[1]);
  result = sub_1C55F8434(*(_QWORD *)(v12 + 6936), *(_DWORD *)(v12 + 6952), v11, a5[1]);
  if (v13 != (_DWORD)result)
  {
    if (v13 >= result)
      return result;
    goto LABEL_41;
  }
  v15 = v10[1];
  if (v15)
  {
    v16 = 0;
    do
    {
      ++v16;
      v15 = *(_QWORD *)(v15 + 8);
    }
    while (v15);
  }
  else
  {
    v16 = 0;
  }
  v17 = v11[1];
  if (v17)
  {
    v18 = 0;
    do
    {
      ++v18;
      v17 = *(_QWORD *)(v17 + 8);
    }
    while (v17);
  }
  else
  {
    v18 = 0;
  }
  v19 = v16 > v18;
  if (v16 != v18)
    goto LABEL_39;
  if ((*((_BYTE *)v10 + 23) & 0x10) != 0)
  {
    v20 = **(_QWORD **)*v10;
    v21 = *(_QWORD *)(v20 + 152);
    v22 = *(unsigned int *)(v20 + 168);
    if ((_DWORD)v22)
    {
      LODWORD(v23) = (v22 - 1) & ((v10 >> 4) ^ (v10 >> 9));
      v24 = (uint64_t **)(v21 + 16 * v23);
      v25 = *v24;
      if (*v24 == v10)
      {
LABEL_21:
        v28 = (size_t *)v24[1];
        v30 = *v28;
        result = (uint64_t)(v28 + 2);
        v29 = v30;
        goto LABEL_22;
      }
      v26 = 1;
      while (v25 != (uint64_t *)-4096)
      {
        v27 = v23 + v26++;
        v23 = v27 & (v22 - 1);
        v25 = *(uint64_t **)(v21 + 16 * v23);
        if (v25 == v10)
        {
          v24 = (uint64_t **)(v21 + 16 * v23);
          goto LABEL_21;
        }
      }
    }
    v24 = (uint64_t **)(v21 + 16 * v22);
    goto LABEL_21;
  }
  v29 = 0;
  result = (uint64_t)&byte_1C871356D;
LABEL_22:
  if ((*((_BYTE *)v11 + 23) & 0x10) == 0)
  {
    v41 = 0;
    v40 = &byte_1C871356D;
    goto LABEL_31;
  }
  v31 = **(_QWORD **)*v11;
  v32 = *(_QWORD *)(v31 + 152);
  v33 = *(unsigned int *)(v31 + 168);
  if (!(_DWORD)v33)
    goto LABEL_29;
  LODWORD(v34) = (v33 - 1) & ((v11 >> 4) ^ (v11 >> 9));
  v35 = (uint64_t **)(v32 + 16 * v34);
  v36 = *v35;
  if (*v35 != v11)
  {
    v37 = 1;
    while (v36 != (uint64_t *)-4096)
    {
      v38 = v34 + v37++;
      v34 = v38 & (v33 - 1);
      v36 = *(uint64_t **)(v32 + 16 * v34);
      if (v36 == v11)
      {
        v35 = (uint64_t **)(v32 + 16 * v34);
        goto LABEL_30;
      }
    }
LABEL_29:
    v35 = (uint64_t **)(v32 + 16 * v33);
  }
LABEL_30:
  v39 = v35[1];
  v42 = *v39;
  v40 = (char *)(v39 + 2);
  v41 = v42;
LABEL_31:
  if (v41 >= v29)
    v43 = v29;
  else
    v43 = v41;
  if (v43)
  {
    result = memcmp((const void *)result, v40, v43);
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) != 0)
        return result;
      goto LABEL_41;
    }
  }
  v19 = v29 > v41;
LABEL_39:
  if (!v19)
    return result;
LABEL_41:
  v44 = *a3;
  *a3 = *a4;
  *a4 = v44;
  v45 = *a3;
  v46 = *a2;
  v47 = *a5;
  v48 = sub_1C55F8434(*(_QWORD *)(*a5 + 6936), *(_DWORD *)(*a5 + 6952), *a3, a5[1]);
  result = sub_1C55F8434(*(_QWORD *)(v47 + 6936), *(_DWORD *)(v47 + 6952), v46, a5[1]);
  if (v48 != (_DWORD)result)
  {
    if (v48 >= result)
      return result;
    goto LABEL_81;
  }
  v49 = v45[1];
  if (v49)
  {
    v50 = 0;
    do
    {
      ++v50;
      v49 = *(_QWORD *)(v49 + 8);
    }
    while (v49);
  }
  else
  {
    v50 = 0;
  }
  v51 = v46[1];
  if (v51)
  {
    v52 = 0;
    do
    {
      ++v52;
      v51 = *(_QWORD *)(v51 + 8);
    }
    while (v51);
  }
  else
  {
    v52 = 0;
  }
  v53 = v50 > v52;
  if (v50 != v52)
    goto LABEL_79;
  if ((*((_BYTE *)v45 + 23) & 0x10) != 0)
  {
    v54 = **(_QWORD **)*v45;
    v55 = *(_QWORD *)(v54 + 152);
    v56 = *(unsigned int *)(v54 + 168);
    if ((_DWORD)v56)
    {
      LODWORD(v57) = (v56 - 1) & ((v45 >> 4) ^ (v45 >> 9));
      v58 = (uint64_t **)(v55 + 16 * v57);
      v59 = *v58;
      if (*v58 == v45)
      {
LABEL_61:
        v62 = (size_t *)v58[1];
        v64 = *v62;
        result = (uint64_t)(v62 + 2);
        v63 = v64;
        goto LABEL_62;
      }
      v60 = 1;
      while (v59 != (uint64_t *)-4096)
      {
        v61 = v57 + v60++;
        v57 = v61 & (v56 - 1);
        v59 = *(uint64_t **)(v55 + 16 * v57);
        if (v59 == v45)
        {
          v58 = (uint64_t **)(v55 + 16 * v57);
          goto LABEL_61;
        }
      }
    }
    v58 = (uint64_t **)(v55 + 16 * v56);
    goto LABEL_61;
  }
  v63 = 0;
  result = (uint64_t)&byte_1C871356D;
LABEL_62:
  if ((*((_BYTE *)v46 + 23) & 0x10) == 0)
  {
    v75 = 0;
    v74 = &byte_1C871356D;
    goto LABEL_71;
  }
  v65 = **(_QWORD **)*v46;
  v66 = *(_QWORD *)(v65 + 152);
  v67 = *(unsigned int *)(v65 + 168);
  if (!(_DWORD)v67)
    goto LABEL_69;
  LODWORD(v68) = (v67 - 1) & ((v46 >> 4) ^ (v46 >> 9));
  v69 = (uint64_t **)(v66 + 16 * v68);
  v70 = *v69;
  if (*v69 != v46)
  {
    v71 = 1;
    while (v70 != (uint64_t *)-4096)
    {
      v72 = v68 + v71++;
      v68 = v72 & (v67 - 1);
      v70 = *(uint64_t **)(v66 + 16 * v68);
      if (v70 == v46)
      {
        v69 = (uint64_t **)(v66 + 16 * v68);
        goto LABEL_70;
      }
    }
LABEL_69:
    v69 = (uint64_t **)(v66 + 16 * v67);
  }
LABEL_70:
  v73 = v69[1];
  v76 = *v73;
  v74 = (char *)(v73 + 2);
  v75 = v76;
LABEL_71:
  if (v75 >= v63)
    v77 = v63;
  else
    v77 = v75;
  if (v77)
  {
    result = memcmp((const void *)result, v74, v77);
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) != 0)
        return result;
      goto LABEL_81;
    }
  }
  v53 = v63 > v75;
LABEL_79:
  if (!v53)
    return result;
LABEL_81:
  v78 = *a2;
  *a2 = *a3;
  *a3 = v78;
  v79 = *a2;
  v80 = *a1;
  v81 = *a5;
  v82 = sub_1C55F8434(*(_QWORD *)(*a5 + 6936), *(_DWORD *)(*a5 + 6952), *a2, a5[1]);
  result = sub_1C55F8434(*(_QWORD *)(v81 + 6936), *(_DWORD *)(v81 + 6952), v80, a5[1]);
  if (v82 != (_DWORD)result)
  {
    if (v82 >= result)
      return result;
    goto LABEL_97;
  }
  v83 = v79[1];
  if (v83)
  {
    v84 = 0;
    do
    {
      ++v84;
      v83 = *(_QWORD *)(v83 + 8);
    }
    while (v83);
  }
  else
  {
    v84 = 0;
  }
  v85 = v80[1];
  if (v85)
  {
    v86 = 0;
    do
    {
      ++v86;
      v85 = *(_QWORD *)(v85 + 8);
    }
    while (v85);
  }
  else
  {
    v86 = 0;
  }
  v87 = v84 > v86;
  if (v84 != v86)
    goto LABEL_120;
  if ((*((_BYTE *)v79 + 23) & 0x10) != 0)
  {
    v88 = **(_QWORD **)*v79;
    v89 = *(_QWORD *)(v88 + 152);
    v90 = *(unsigned int *)(v88 + 168);
    if ((_DWORD)v90)
    {
      LODWORD(v91) = (v90 - 1) & ((v79 >> 4) ^ (v79 >> 9));
      v92 = (uint64_t **)(v89 + 16 * v91);
      v93 = *v92;
      if (*v92 == v79)
      {
LABEL_102:
        v97 = (size_t *)v92[1];
        v99 = *v97;
        result = (uint64_t)(v97 + 2);
        v98 = v99;
        goto LABEL_103;
      }
      v94 = 1;
      while (v93 != (uint64_t *)-4096)
      {
        v95 = v91 + v94++;
        v91 = v95 & (v90 - 1);
        v93 = *(uint64_t **)(v89 + 16 * v91);
        if (v93 == v79)
        {
          v92 = (uint64_t **)(v89 + 16 * v91);
          goto LABEL_102;
        }
      }
    }
    v92 = (uint64_t **)(v89 + 16 * v90);
    goto LABEL_102;
  }
  v98 = 0;
  result = (uint64_t)&byte_1C871356D;
LABEL_103:
  if ((*((_BYTE *)v80 + 23) & 0x10) == 0)
  {
    v110 = 0;
    v109 = &byte_1C871356D;
    goto LABEL_112;
  }
  v100 = **(_QWORD **)*v80;
  v101 = *(_QWORD *)(v100 + 152);
  v102 = *(unsigned int *)(v100 + 168);
  if (!(_DWORD)v102)
    goto LABEL_110;
  LODWORD(v103) = (v102 - 1) & ((v80 >> 4) ^ (v80 >> 9));
  v104 = (uint64_t **)(v101 + 16 * v103);
  v105 = *v104;
  if (*v104 != v80)
  {
    v106 = 1;
    while (v105 != (uint64_t *)-4096)
    {
      v107 = v103 + v106++;
      v103 = v107 & (v102 - 1);
      v105 = *(uint64_t **)(v101 + 16 * v103);
      if (v105 == v80)
      {
        v104 = (uint64_t **)(v101 + 16 * v103);
        goto LABEL_111;
      }
    }
LABEL_110:
    v104 = (uint64_t **)(v101 + 16 * v102);
  }
LABEL_111:
  v108 = v104[1];
  v111 = *v108;
  v109 = (char *)(v108 + 2);
  v110 = v111;
LABEL_112:
  if (v110 >= v98)
    v112 = v98;
  else
    v112 = v110;
  if (v112)
  {
    result = memcmp((const void *)result, v109, v112);
    if ((_DWORD)result)
    {
      if ((result & 0x80000000) != 0)
        return result;
LABEL_97:
      v96 = *a1;
      *a1 = *a2;
      *a2 = v96;
      return result;
    }
  }
  v87 = v98 > v110;
LABEL_120:
  if (v87)
    goto LABEL_97;
  return result;
}

char *sub_1C55F8AC8(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v6;
  unint64_t v7;
  _BOOL4 v9;
  unint64_t v10;
  char *v11;
  int v12;
  unint64_t v13;

  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v6 = v3 + 1;
    v7 = *(_QWORD *)a1 + 216 * v3;
    v9 = *(_QWORD *)a1 <= a2 && v7 > a2;
    if (v9)
      v10 = 0x84BDA12F684BDA13 * ((uint64_t)(a2 - *(_QWORD *)a1) >> 3);
    else
      v10 = -1;
    v13 = 0;
    v11 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, v6, 216, &v13);
    sub_1C55EE794((uint64_t *)a1, (uint64_t)v11);
    v12 = v13;
    if (*(_QWORD *)a1 != a1 + 16)
      free(*(void **)a1);
    *(_QWORD *)a1 = v11;
    *(_DWORD *)(a1 + 12) = v12;
    if (v9)
      return &v11[216 * v10];
  }
  return (char *)a2;
}

uint64_t *sub_1C55F8BA8(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  uint64_t v5;
  const llvm::APInt *v6;
  _BYTE *v7;
  llvm::GetElementPtrInst *v8;
  uint64_t v9;
  llvm::ConstantInt *v10;
  unsigned int v11;
  unint64_t v12;
  llvm::ValueHandleBase *v13;
  llvm::ConstantInt *v15;
  llvm::ValueHandleBase *v16;
  unint64_t v17;
  unsigned int v18;
  __int16 v19;
  void (**v20)(llvm::raw_ostream *__hidden);
  int v21;
  uint64_t v22;
  unint64_t v23;
  _BYTE *v24;
  char v25;
  uint64_t v26;
  int v27;
  void **v28;
  void *__p[2];
  uint64_t v30;
  void *v31[2];
  _QWORD v32[16];

  v32[15] = *MEMORY[0x1E0C80C00];
  v4 = (uint64_t *)sub_1C627EB54(a1);
  if (*(_DWORD *)(a1 + 328))
  {
    sub_1C4773D54((uint64_t)v31, a2, 0, 0, 0);
    v5 = ***(_QWORD ***)a1;
    __p[0] = 0;
    __p[1] = 0;
    v30 = 0;
    v21 = 0;
    v25 = 0;
    v26 = 0;
    v20 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
    v28 = __p;
    v27 = 0;
    v23 = 0;
    v24 = 0;
    v22 = 0;
    llvm::raw_ostream::write((llvm::raw_ostream *)&v20, "scalar_slot", 0xBuLL);
    sub_1C5E21910((llvm::raw_ostream *)&v20, *(unsigned int *)(a1 + 328), 0, 0, 0);
    v7 = v24;
    if ((unint64_t)v24 >= v23)
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v20, 95);
    }
    else
    {
      ++v24;
      *v7 = 95;
    }
    v8 = (llvm::GetElementPtrInst *)(*(_QWORD *)v32[6] + 1912);
    v9 = *(unsigned int *)(a1 + 328);
    v10 = *(llvm::ConstantInt **)(*(_QWORD *)v5 + 1936);
    v11 = *(_DWORD *)(*(_QWORD *)v5 + 1944);
    v18 = v11 >> 8;
    if (v11 >> 8 > 0x40)
    {
      v15 = v10;
      llvm::APInt::initSlowCase((llvm::APInt *)&v17, v9, 0);
      v10 = v15;
    }
    else
    {
      if (v11 <= 0xFF)
        v12 = 0;
      else
        v12 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v11);
      v17 = v12 & v9;
    }
    v13 = llvm::ConstantInt::get(v10, (llvm::LLVMContext *)&v17, v6);
    if (v18 >= 0x41 && v17)
    {
      v16 = v13;
      MEMORY[0x1CAA32F9C](v17, 0x1000C8000313F17);
      v13 = v16;
    }
    v19 = 260;
    v17 = (unint64_t)v28;
    v4 = (uint64_t *)sub_1C4867B70((uint64_t *)v31, v8, v4, (uint64_t)v13, (uint64_t)&v17);
    sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 8), (uint64_t)v4);
    v20 = off_1E81A6E70;
    if (v27 == 1 && v22)
      MEMORY[0x1CAA32F9C](v22, 0x1000C8077774924);
    if (SHIBYTE(v30) < 0)
      operator delete(__p[0]);
    if (v31[0] != v32)
      free(v31[0]);
  }
  return v4;
}

_QWORD *sub_1C55F8E14(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  unsigned int v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(88 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C627EEF0(a1, v4, v4 + 88 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(_DWORD *)(a1 + 16);
  if (v10)
  {
    v11 = 88 * v10;
    do
    {
      *result = -4096;
      result += 11;
      v11 -= 88;
    }
    while (v11);
  }
  return result;
}

__n128 sub_1C55F8ED8(_WORD *a1, __n128 *a2, char **a3)
{
  __n128 result;
  char *v7;

  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED807BE8, "scalar-opt-print-divergence-analysis", 0x24uLL);
  word_1ED807BF2 = (32 * (*a1 & 3)) | word_1ED807BF2 & 0xFF9F;
  result = *a2;
  xmmword_1ED807C08 = (__int128)*a2;
  v7 = *a3;
  byte_1ED807C68 = **a3;
  byte_1ED807C79 = 1;
  byte_1ED807C78 = *v7;
  return result;
}

uint64_t sub_1C55F8F5C()
{
  char v1;
  char *v2;
  __n128 v3;
  int v4;

  v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Run the scalar optimization for all shaders, effectively ignoring the metadata and "
                                     "environment variable that normally control that optimization";
  v3.n128_u64[1] = 143;
  v1 = 0;
  v2 = &v1;
  sub_1C6148018((llvm::cl::Option *)&unk_1ED8078E8, "force-scalar-opt", &v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED8078E8, &dword_1C475E000);
  v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Print the summary of the scalar optimization shaders (print nothing if the optimiza"
                                     "tion doesn't run)";
  v3.n128_u64[1] = 100;
  v1 = 0;
  v2 = &v1;
  sub_1C6148018((llvm::cl::Option *)&unk_1ED8079A8, "scalar-opt-print-summary", &v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED8079A8, &dword_1C475E000);
  v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Print the full liveness information";
  v3.n128_u64[1] = 35;
  v1 = 0;
  v2 = &v1;
  sub_1C6148018((llvm::cl::Option *)&unk_1ED807A68, "scalar-opt-print-liveness", &v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED807A68, &dword_1C475E000);
  v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Print the reg pressure information";
  v3.n128_u64[1] = 34;
  v1 = 0;
  v2 = &v1;
  sub_1C6148018((llvm::cl::Option *)&unk_1ED807B28, "scalar-opt-print-regpressure", &v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED807B28, &dword_1C475E000);
  v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Print the results of the divergence analysis";
  v3.n128_u64[1] = 44;
  v1 = 0;
  v2 = &v1;
  sub_1C627F7F4(&v4, &v3, &v2);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED807BE8, &dword_1C475E000);
  v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Print statistic about GPR and scalar usages but don't do any transformation";
  v3.n128_u64[1] = 75;
  v1 = 0;
  v2 = &v1;
  sub_1C6148018((llvm::cl::Option *)&unk_1ED807CA8, "scalar-opt-harvest-stats", &v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED807CA8, &dword_1C475E000);
}

uint64_t sub_1C55F9160(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeDominatorTreeWrapperPassPass(a1);
  llvm::initializeLoopInfoWrapperPassPass(a1);
  llvm::initializePostDominatorTreeWrapperPassPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Merge loops";
  *(_QWORD *)(v2 + 8) = 11;
  *(_QWORD *)(v2 + 16) = "loopmerge";
  *(_QWORD *)(v2 + 24) = 9;
  *(_QWORD *)(v2 + 32) = &unk_1ED807D68;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C55F9204;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C55F9204()
{
  uint64_t v0;
  unint64_t v2;
  unint64_t v4;
  _QWORD *v5;
  _QWORD v6[2];

  v0 = operator new();
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)(v0 + 16) = &unk_1ED807D68;
  *(_DWORD *)(v0 + 24) = 2;
  *(_QWORD *)v0 = &off_1E81711B8;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v4 = qword_1ED830BC0[0];
  v2 = atomic_load(&qword_1ED807D70);
  if (v2 != -1)
  {
    v6[0] = sub_1C55F9160;
    v6[1] = &v4;
    v5 = v6;
    std::__call_once(&qword_1ED807D70, &v5, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return v0;
}

void sub_1C55F92E8(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C55F930C()
{
  return "GPU Loop Merge";
}

void *sub_1C55F931C(uint64_t a1, uint64_t a2)
{
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)llvm::LoopInfoWrapperPass::ID);
  return sub_1C4771E64(a2, a2, (uint64_t)&llvm::PostDominatorTreeWrapperPass::ID);
}

unint64_t sub_1C55F936C(uint64_t a1, uint64_t *a2)
{
  char **v4;
  char *v5;
  uint64_t v6;
  void **v7;
  void *v8;
  uint64_t v9;
  void **v10;
  void *v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  const llvm::DataLayout *v15;
  void (**v16)(void);
  uint64_t *v17;
  uint64_t *v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  uint64_t v23;
  uint64_t *v24;
  BOOL v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t **v28;
  char *v29;
  uint64_t *v30;
  _QWORD *v31;
  _QWORD *v32;
  uint64_t v33;
  char *v34;
  unint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  unint64_t result;
  uint64_t *v40;
  uint64_t *j;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  void **v51;
  uint64_t *v52;
  uint64_t k;
  uint64_t v54;
  unsigned int v55;
  BOOL v56;
  uint64_t v58;
  uint64_t v59;
  unsigned int v60;
  BOOL v61;
  BOOL v63;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  BOOL v69;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  BOOL v74;
  char *v76;
  uint64_t v77;
  uint64_t v78;
  int v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  uint64_t v85;
  uint64_t v86;
  unsigned int v87;
  BOOL v88;
  _QWORD *v90;
  uint64_t v91;
  char *v92;
  uint64_t v93;
  uint64_t m;
  uint64_t n;
  uint64_t v96;
  uint64_t v97;
  int v98;
  void **v99;
  uint64_t ExitingBlock;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  char *v105;
  char *v106;
  unsigned int *v107;
  _QWORD *v108;
  unint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  unint64_t *v113;
  uint64_t v114;
  int32x2_t *v115;
  unint64_t v116;
  uint64_t v117;
  unsigned int v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  int v122;
  int v123;
  unint64_t v125;
  unint64_t *v126;
  uint64_t v127;
  int32x2_t *v128;
  unint64_t v129;
  uint64_t v130;
  unsigned int v131;
  uint64_t v132;
  uint64_t *v133;
  uint64_t v134;
  int v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  unsigned int v139;
  BOOL v140;
  uint64_t ****v142;
  uint64_t ***v143;
  _QWORD *v144;
  _QWORD *v146;
  unint64_t v147;
  uint64_t ***v148;
  int32x2_t *v149;
  unint64_t v150;
  uint64_t v151;
  unsigned int v152;
  uint64_t v153;
  uint64_t ****v154;
  uint64_t ***v155;
  int v156;
  int v157;
  _QWORD *v158;
  uint64_t v159;
  _QWORD *v160;
  uint64_t v161;
  _QWORD *v162;
  unint64_t v163;
  unint64_t *v164;
  uint64_t v165;
  int32x2_t *v166;
  unint64_t v167;
  uint64_t v168;
  unsigned int v169;
  uint64_t v170;
  uint64_t *v171;
  uint64_t v172;
  int v173;
  int v174;
  uint64_t v175;
  unint64_t v176;
  uint64_t v177;
  int v178;
  int v179;
  llvm::PHINode *v180;
  uint64_t v181;
  uint64_t ii;
  uint64_t ***v183;
  _QWORD *v184;
  llvm::LLVMContext *v185;
  llvm::LLVMContext *v186;
  uint64_t v187;
  _QWORD *v188;
  uint64_t v189;
  unsigned int v190;
  _QWORD *v191;
  uint64_t *v192;
  uint64_t v193;
  uint64_t v194;
  const llvm::APInt *v195;
  llvm::ConstantInt *v196;
  unsigned int v197;
  char v198;
  llvm::ValueHandleBase *v199;
  const llvm::APInt *v200;
  llvm::ConstantInt *v201;
  unsigned int v202;
  unint64_t v203;
  llvm::ValueHandleBase *v204;
  const llvm::APInt *v205;
  uint64_t *v206;
  uint64_t v207;
  uint64_t v208;
  llvm::ConstantInt *v209;
  llvm::ValueHandleBase *v210;
  llvm::BasicBlock *v211;
  llvm::BasicBlock *v212;
  _DWORD *v213;
  _DWORD *v214;
  uint64_t v215;
  llvm::Value *v216;
  _QWORD *v217;
  char *v218;
  char *v219;
  unsigned __int8 **v220;
  int v221;
  unsigned __int8 *v222;
  unsigned __int8 *v223;
  unsigned __int8 *v224;
  uint64_t v225;
  unint64_t v226;
  uint64_t v227;
  int v228;
  int v229;
  llvm::Value *v230;
  uint64_t v231;
  unsigned __int8 *v232;
  llvm::User *v233;
  uint64_t v234;
  unsigned __int8 *v235;
  llvm::User *v236;
  uint64_t v237;
  unsigned __int8 *v238;
  llvm::User *v239;
  char *v240;
  uint64_t v241;
  uint64_t v242;
  unsigned __int8 *v243;
  llvm::User *v244;
  llvm::PHINode *v245;
  char *v246;
  int v247;
  int v248;
  char *v249;
  uint64_t v250;
  uint64_t v251;
  unint64_t v252;
  char *v253;
  int v254;
  int v255;
  int v256;
  char *v257;
  int v258;
  char *v259;
  uint64_t v260;
  BOOL v261;
  uint64_t v262;
  char *v263;
  uint64_t v264;
  unsigned int v265;
  uint64_t v266;
  BOOL v267;
  uint64_t v268;
  char *v269;
  int v270;
  char *v271;
  unsigned __int8 **v272;
  uint64_t *v273;
  char *v274;
  __int128 v275;
  uint64_t v276;
  unint64_t v277;
  uint64_t v278;
  _BOOL4 v280;
  unint64_t v281;
  llvm::PHINode *v282;
  char *v283;
  char *v284;
  char *v285;
  __int128 v286;
  char *v287;
  unint64_t v288;
  BOOL v289;
  char *v290;
  unsigned int v291;
  uint64_t v292;
  uint64_t v293;
  char *v294;
  int v295;
  unsigned int *v296;
  llvm::UndefValue **v297;
  int v298;
  llvm::UndefValue **v299;
  llvm::UndefValue *v300;
  unsigned int v301;
  uint64_t v302;
  unint64_t v303;
  llvm::UndefValue *v304;
  int v305;
  llvm::UndefValue *v306;
  int v307;
  int v308;
  int v309;
  llvm::UndefValue *v310;
  uint64_t v311;
  uint64_t v312;
  llvm::PHINode *v313;
  llvm::Type *v314;
  llvm::UndefValue *v315;
  uint64_t *v316;
  uint64_t v317;
  uint64_t v318;
  unsigned int *v319;
  uint64_t v320;
  llvm::Value *v321;
  uint64_t v322;
  llvm::Value *v323;
  llvm::Value *v324;
  uint64_t v325;
  int v326;
  uint64_t v327;
  llvm::PHINode *v328;
  llvm::SmallPtrSetImplBase *v329;
  int v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  llvm::UndefValue *v336;
  llvm::PHINode *v337;
  llvm::Type *v338;
  llvm::UndefValue *v339;
  int v340;
  char *v341;
  uint64_t *v342;
  uint64_t v343;
  uint64_t v344;
  int v345;
  char *v346;
  uint64_t v347;
  _QWORD *v348;
  uint64_t v349;
  unsigned int *v350;
  uint64_t v351;
  llvm::PHINode *v352;
  char *v353;
  int v354;
  char *v355;
  unsigned int v356;
  char *v357;
  int v358;
  unsigned int v359;
  int v360;
  char *v361;
  uint64_t v362;
  char *v363;
  uint64_t v364;
  llvm::UndefValue *v365;
  llvm::PHINode *v366;
  llvm::Type *v367;
  llvm::UndefValue *v368;
  unsigned int v369;
  uint64_t v370;
  unint64_t v371;
  uint64_t v372;
  int v373;
  uint64_t v374;
  int v375;
  int v376;
  int v377;
  llvm::PHINode *v378;
  uint64_t *v379;
  uint64_t v380;
  uint64_t v381;
  int v382;
  char *v383;
  llvm::SmallPtrSetImplBase *v384;
  llvm::Value *v385;
  llvm::PHINode *v386;
  uint64_t kk;
  _QWORD *v388;
  _QWORD *v389;
  unint64_t v390;
  uint64_t v391;
  unsigned int v392;
  BOOL v393;
  uint64_t v394;
  uint64_t v395;
  char *v396;
  BOOL v398;
  uint64_t v399;
  uint64_t v400;
  uint64_t v401;
  uint64_t v402;
  _QWORD *v403;
  uint64_t v404;
  _QWORD *v405;
  char v407;
  uint64_t **v408;
  int v409;
  _BOOL8 v410;
  _BOOL8 v411;
  uint64_t **v412;
  uint64_t v413;
  llvm::UndefValue **v414;
  uint64_t v415;
  llvm::PHINode *v416;
  llvm::Type *v417;
  llvm::UndefValue *v418;
  uint64_t *v419;
  uint64_t v420;
  uint64_t v421;
  llvm::PHINode *v422;
  uint64_t v423;
  uint64_t v424;
  llvm::User **v425;
  uint64_t v426;
  llvm::User *v427;
  uint64_t v428;
  _QWORD *v429;
  _QWORD *v430;
  llvm::PHINode *v431;
  char *v432;
  int v433;
  char *v434;
  llvm::UndefValue *v435;
  llvm::PHINode *v436;
  llvm::Type *v437;
  llvm::UndefValue *v438;
  int v439;
  unint64_t v440;
  uint64_t v441;
  unint64_t v442;
  char *v443;
  uint64_t v444;
  unsigned int v445;
  unint64_t **v446;
  uint64_t v447;
  uint64_t v448;
  uint64_t v449;
  _QWORD *v450;
  llvm::PHINode *v451;
  llvm::Value *v452;
  uint64_t v453;
  uint64_t v454;
  llvm::PHINode *v455;
  uint64_t nn;
  _QWORD *v457;
  _QWORD *v458;
  unint64_t v459;
  uint64_t v460;
  unsigned int v461;
  BOOL v462;
  uint64_t v463;
  uint64_t v464;
  char *v465;
  unsigned __int8 *v466;
  _BOOL8 v467;
  llvm::PHINode *v468;
  uint64_t v469;
  llvm::PHINode *v470;
  uint64_t *v471;
  uint64_t v472;
  unint64_t v473;
  uint64_t *v474;
  int v475;
  int v476;
  uint64_t v477;
  llvm::PHINode *v478;
  uint64_t v479;
  llvm::PHINode *v480;
  llvm::PHINode *v481;
  uint64_t *v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  llvm::User **v486;
  uint64_t v487;
  llvm::User *v488;
  uint64_t v489;
  _QWORD *v490;
  _QWORD *v491;
  _QWORD *v492;
  char *v493;
  _QWORD **v494;
  _QWORD *v495;
  int64_t v496;
  uint64_t *v497;
  uint64_t v498;
  uint64_t v499;
  uint64_t *v500;
  uint64_t v501;
  _QWORD *v502;
  unint64_t v503;
  uint64_t *v504;
  _QWORD *v505;
  llvm::PHINode *v506;
  uint64_t v507;
  unint64_t v508;
  uint64_t v509;
  char *v510;
  uint64_t *v511;
  uint64_t v512;
  uint64_t *v513;
  uint64_t v514;
  _QWORD *v515;
  uint64_t v516;
  unint64_t v517;
  llvm::PHINode *v518;
  _QWORD *v519;
  llvm::PHINode *v520;
  uint64_t *v521;
  uint64_t v522;
  unint64_t v523;
  uint64_t *v524;
  _QWORD *v525;
  _QWORD *v526;
  uint64_t v527;
  unint64_t v528;
  uint64_t v529;
  char *v530;
  uint64_t *v531;
  llvm::PHINode *v532;
  uint64_t v533;
  llvm::PHINode *v534;
  uint64_t v535;
  unint64_t v536;
  _QWORD *v537;
  _QWORD *v538;
  _QWORD *v539;
  uint64_t v540;
  unint64_t v541;
  uint64_t v542;
  _QWORD *v543;
  char *v544;
  uint64_t *v545;
  llvm::Value *v546;
  uint64_t v547;
  uint64_t v548;
  llvm::PHINode *v549;
  uint64_t v550;
  unint64_t v551;
  uint64_t v552;
  unint64_t v553;
  char *v554;
  uint64_t *v555;
  uint64_t v556;
  _QWORD *v557;
  uint64_t v558;
  unsigned int *v559;
  char v560;
  llvm::Value *v561;
  unsigned int *v562;
  uint64_t v563;
  void **v564;
  _BOOL8 v565;
  _BOOL8 v566;
  unint64_t v567;
  uint64_t v568;
  uint64_t **v569;
  _BOOL8 v570;
  _BOOL4 v571;
  unsigned int v572;
  uint64_t **v573;
  unsigned __int8 *v574;
  char *v575;
  unsigned int v576;
  uint64_t v577;
  uint64_t **v578;
  char *v579;
  llvm::PHINode *v580;
  _QWORD *v581;
  llvm::PHINode *v582;
  llvm::PHINode *v583;
  llvm::PHINode *v584;
  llvm::PHINode *v585;
  llvm::PHINode *v586;
  llvm::PHINode *v587;
  llvm::PHINode *v588;
  llvm::PHINode *v589;
  llvm::PHINode *v590;
  llvm::SmallPtrSetImplBase *v591;
  llvm::SmallPtrSetImplBase *v592;
  _BOOL8 v593;
  llvm::SmallPtrSetImplBase *v594;
  llvm::SmallPtrSetImplBase *v595;
  llvm::Value *v596;
  llvm::SmallPtrSetImplBase *v597;
  llvm::SmallPtrSetImplBase *v598;
  llvm::Value *v599;
  llvm::Value *v600;
  llvm::Value *v601;
  llvm::Value *v602;
  llvm::Value *v603;
  llvm::Value *jj;
  llvm::Value *v605;
  llvm::Value *v606;
  llvm::Value *mm;
  llvm::Value *v608;
  llvm::Value *v609;
  unint64_t v610;
  llvm::Value *v611;
  llvm::Value *v612;
  llvm::Value *v613;
  char v614;
  llvm::PHINode *v615;
  llvm::PHINode *v616;
  llvm::PHINode *v617;
  llvm::PHINode *v618;
  llvm::PHINode *v619;
  llvm::PHINode *v620;
  llvm::PHINode *v621;
  llvm::PHINode *v622;
  uint64_t *v623;
  llvm::PHINode *v624;
  llvm::PHINode *v625;
  llvm::PHINode *v626;
  llvm::PHINode *v627;
  llvm::PHINode *v628;
  llvm::PHINode *v629;
  uint64_t *v630;
  _QWORD *v631;
  char *v632;
  llvm::SmallPtrSetImplBase *v633;
  uint64_t *v634;
  uint64_t v635;
  void **v636;
  _QWORD *v637;
  _QWORD *v638;
  void *v639;
  uint64_t v640;
  _BYTE v641[32];
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  void **v645;
  void **v646;
  uint64_t v647;
  int v648;
  __int16 v649;
  char v650;
  uint64_t v651;
  uint64_t v652;
  void *v653;
  void *v654;
  _QWORD v655[2];
  unsigned int v656;
  uint64_t v657[3];
  char v658;
  __int128 v659;
  __int128 v660;
  __int128 v661;
  __int128 v662;
  void *v663;
  uint64_t v664;
  _BYTE v665[32];
  void *v666;
  uint64_t v667;
  _BYTE v668[32];
  void *v669;
  uint64_t v670;
  _BYTE v671[32];
  void *v672;
  uint64_t v673;
  _BYTE v674[32];
  _QWORD v675[2];
  int v676;
  void *v677;
  uint64_t v678;
  _BYTE v679[128];
  void *v680;
  uint64_t v681;
  _BYTE v682[64];
  _QWORD v683[3];
  _QWORD *v684;
  void *v685[2];
  _QWORD v686[65];
  void *v687;
  void *v688;
  void *v689;
  void *v690;
  void *v691;
  void *v692;
  uint64_t v693;
  _BYTE v694[24];
  _BYTE *v695;
  _QWORD v696[65];
  unsigned __int8 *v697;
  uint64_t v698;
  _BOOL4 v699;
  _BOOL4 v700;
  uint64_t v701;
  void *v702;
  uint64_t v703;
  _BYTE v704[32];
  void *v705;
  uint64_t v706;
  unint64_t *v707;
  uint64_t ***v708;
  _QWORD *v709;
  uint64_t v710;

  v710 = *MEMORY[0x1E0C80C00];
  v4 = **(char ****)(a1 + 8);
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != llvm::LoopInfoWrapperPass::ID);
  v6 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), llvm::LoopInfoWrapperPass::ID);
  v7 = **(void ****)(a1 + 8);
  do
  {
    v8 = *v7;
    v7 += 2;
  }
  while (v8 != &llvm::DominatorTreeWrapperPass::ID);
  v9 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v7 - 1) + 96))(*(v7 - 1), &llvm::DominatorTreeWrapperPass::ID);
  v10 = **(void ****)(a1 + 8);
  do
  {
    v11 = *v10;
    v10 += 2;
  }
  while (v11 != &llvm::PostDominatorTreeWrapperPass::ID);
  v12 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v10 - 1) + 96))(*(v10 - 1), &llvm::PostDominatorTreeWrapperPass::ID);
  v696[0] = 1;
  for (i = 1; i != 65; i += 4)
    v696[i] = -4096;
  v14 = v12 + 32;
  sub_1C5EA5D84(a2[5], (uint64_t)v696);
  v15 = (const llvm::DataLayout *)(a2[5] + 272);
  v684 = 0;
  llvm::DivergenceTracker::DivergenceTracker((uint64_t)v685, (llvm::Function *)a2, v9 + 32, v14, v15, (uint64_t)v696, (uint64_t)v683, 0, 0);
  if (v684 == v683)
  {
    v16 = (void (**)(void))(v683[0] + 32);
  }
  else
  {
    if (!v684)
      goto LABEL_14;
    v16 = (void (**)(void))(*v684 + 40);
  }
  (*v16)();
LABEL_14:
  v680 = v682;
  v681 = 0x400000000;
  v677 = v679;
  v678 = 0x1000000000;
  v17 = *(uint64_t **)(v6 + 56);
  v18 = *(uint64_t **)(v6 + 64);
  if (v17 == v18)
    goto LABEL_887;
  v19 = 0;
  do
  {
    v20 = *v17;
    if (*(_QWORD *)(*v17 + 8) != *(_QWORD *)(*v17 + 16))
    {
      if (v19 >= HIDWORD(v678))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v677, (uint64_t)v679, v19 + 1, 8);
        v19 = v678;
      }
      *((_QWORD *)v677 + v19) = v20;
      v19 = v678 + 1;
      LODWORD(v678) = v678 + 1;
    }
    ++v17;
  }
  while (v17 != v18);
  if (!v19)
  {
LABEL_887:
    v614 = 0;
    goto LABEL_888;
  }
  v614 = 0;
  v630 = a2;
  do
  {
    LODWORD(v681) = 0;
    do
    {
      while (1)
      {
        v21 = (uint64_t *)*((_QWORD *)v677 + --v19);
        LODWORD(v678) = v19;
        v23 = *v21;
        v22 = (uint64_t *)v21[1];
        v24 = (uint64_t *)v21[2];
        if (*v21)
          v25 = v22 == v24;
        else
          v25 = 0;
        if (!v25)
        {
          while (v22 != v24)
          {
            v26 = *v22;
            if (v19 >= HIDWORD(v678))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v677, (uint64_t)v679, v19 + 1, 8);
              v19 = v678;
            }
            *((_QWORD *)v677 + v19) = v26;
            v19 = v678 + 1;
            LODWORD(v678) = v678 + 1;
            ++v22;
          }
          goto LABEL_33;
        }
        if (**(uint64_t ***)(v23 + 8) == v21)
          break;
LABEL_33:
        if (!v19)
          goto LABEL_38;
      }
      v27 = v681;
      if (v681 >= (unint64_t)HIDWORD(v681))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v680, (uint64_t)v682, v681 + 1, 16);
        v27 = v681;
      }
      v28 = (uint64_t **)((char *)v680 + 16 * v27);
      *v28 = v21;
      v28[1] = (uint64_t *)v23;
      LODWORD(v681) = v681 + 1;
      v19 = v678;
    }
    while ((_DWORD)v678);
LABEL_38:
    if (!(_DWORD)v681)
      break;
    v29 = (char *)v680;
    v632 = (char *)v680 + 16 * v681;
    v30 = v630;
    do
    {
      v31 = *(_QWORD **)v29;
      v32 = (_QWORD *)*((_QWORD *)v29 + 1);
      v634 = v30;
      v635 = v9 + 32;
      v636 = v685;
      v637 = v31;
      v638 = v32;
      v33 = *(_QWORD *)*v30;
      v639 = v641;
      v640 = 0x200000000;
      v644 = v33;
      v645 = &v653;
      v646 = &v654;
      v647 = 0;
      v648 = 0;
      v649 = 512;
      v650 = 7;
      v642 = 0;
      v643 = 0;
      v651 = 0;
      v652 = 0;
      v653 = &unk_1E8167888;
      v654 = &unk_1E8167A08;
      v656 = 128;
      v34 = (char *)operator new(0x2000uLL, (std::align_val_t)8uLL);
      v655[0] = v34;
      v655[1] = 0;
      if (v656)
      {
        v35 = (unint64_t)v656 << 6;
        v36 = v34 + 16;
        do
        {
          *v36 = 0;
          v36[1] = -4096;
          *(v36 - 2) = &unk_1E814DA10;
          *(v36 - 1) = 2;
          v36[2] = 0;
          v36 += 8;
          v35 -= 64;
        }
        while (v35);
      }
      LOBYTE(v657[0]) = 0;
      v658 = 0;
      v661 = 0u;
      v662 = 0u;
      v659 = 0u;
      v660 = 0u;
      v663 = v665;
      v664 = 0x400000000;
      v666 = v668;
      v667 = 0x400000000;
      v669 = v671;
      v670 = 0x400000000;
      v672 = v674;
      v673 = 0x400000000;
      v675[0] = 0;
      v675[1] = 0;
      v676 = 0;
      *((_QWORD *)&v659 + 1) = *(_QWORD *)v638[4];
      *(_QWORD *)&v660 = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)v638);
      v631 = v32;
      if (llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitBlock(v638))
      {
        *((_QWORD *)&v660 + 1) = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitBlock(v638);
      }
      else
      {
        v705 = &v707;
        v706 = 0x400000000;
        llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitBlocks(v638, (uint64_t)&v705);
        if ((_DWORD)v706)
        {
          v37 = 8 * v706;
          v38 = v705;
          while (*(_QWORD *)v705 == *v38)
          {
            ++v38;
            v37 -= 8;
            if (!v37)
              goto LABEL_49;
          }
        }
        else
        {
LABEL_49:
          *((_QWORD *)&v660 + 1) = *(_QWORD *)v705;
        }
        if (v705 != &v707)
          free(v705);
      }
      *(_QWORD *)&v661 = *(_QWORD *)v637[4];
      *((_QWORD *)&v661 + 1) = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch((uint64_t)v637);
      result = (unint64_t)llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitingBlocks(v638, (uint64_t)&v669);
      v40 = (uint64_t *)v638[4];
      for (j = (uint64_t *)v638[5]; v40 != j; ++v40)
      {
        v42 = *v40;
        v43 = v637[4];
        v44 = v637[5];
        v45 = v44 - v43;
        v25 = v44 == v43;
        v46 = (v44 - v43) >> 3;
        if (v25)
        {
          v49 = (_QWORD *)v637[4];
        }
        else
        {
          v47 = (_QWORD *)(v43 + (v45 & 0xFFFFFFFFFFFFFFF8));
          v48 = 8 * v46;
          v49 = (_QWORD *)v637[4];
          while (*v49 != v42)
          {
            ++v49;
            v48 -= 8;
            if (!v48)
            {
              v49 = v47;
              break;
            }
          }
        }
        if (v46 == ((uint64_t)v49 - v43) >> 3)
        {
          result = llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(v635, *v40, v661);
          if ((_DWORD)result)
          {
            v50 = v664;
            if (v664 >= (unint64_t)HIDWORD(v664))
            {
              result = (unint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v663, (uint64_t)v665, v664 + 1, 8);
              v50 = v664;
            }
            v51 = &v663;
            v52 = &v664;
          }
          else
          {
            v50 = v667;
            if (v667 >= (unint64_t)HIDWORD(v667))
            {
              result = (unint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v666, (uint64_t)v668, v667 + 1, 8);
              v50 = v667;
            }
            v51 = &v666;
            v52 = &v667;
          }
          *((_QWORD *)*v51 + v50) = v42;
          ++*(_DWORD *)v52;
        }
      }
      for (k = *(_QWORD *)(v661 + 8); k; k = *(_QWORD *)(k + 8))
      {
        v54 = *(_QWORD *)(k + 24);
        v55 = *(unsigned __int8 *)(v54 + 16);
        if (v54)
          v56 = v55 >= 0x1C;
        else
          v56 = 0;
        if (v56 && v55 - 29 < 0xB)
          break;
      }
      v58 = *(_QWORD *)(*(_QWORD *)(k + 24) + 40);
      if (v58 == *((_QWORD *)&v661 + 1))
      {
        while (1)
        {
          k = *(_QWORD *)(k + 8);
          if (!k)
            break;
          v59 = *(_QWORD *)(k + 24);
          v60 = *(unsigned __int8 *)(v59 + 16);
          if (v59)
            v61 = v60 >= 0x1C;
          else
            v61 = 0;
          if (v61 && v60 - 29 <= 0xA)
            goto LABEL_90;
        }
        v59 = MEMORY[0x18];
LABEL_90:
        v58 = *(_QWORD *)(v59 + 40);
      }
      *(_QWORD *)&v662 = v58;
      if ((_DWORD)v664)
        v63 = (_DWORD)v667 == 0;
      else
        v63 = 1;
      if (v63 || *((_QWORD *)&v660 + 1) == 0 || (_QWORD)v660 == 0)
        goto LABEL_202;
      v66 = *(_QWORD *)(v661 + 8);
      if (!v66)
        goto LABEL_202;
      while (1)
      {
        v67 = *(_QWORD *)(v66 + 24);
        v68 = *(unsigned __int8 *)(v67 + 16);
        v69 = v67 && v68 >= 0x1C;
        if (v69 && v68 - 29 <= 0xA)
          break;
        v66 = *(_QWORD *)(v66 + 8);
        if (!v66)
          goto LABEL_202;
      }
      v71 = 0;
LABEL_112:
      ++v71;
      while (1)
      {
        v66 = *(_QWORD *)(v66 + 8);
        if (!v66)
          break;
        v72 = *(_QWORD *)(v66 + 24);
        v73 = *(unsigned __int8 *)(v72 + 16);
        if (v72)
          v74 = v73 >= 0x1C;
        else
          v74 = 0;
        if (v74 && v73 - 29 < 0xB)
          goto LABEL_112;
      }
      if (v71 != 2)
        goto LABEL_202;
      v76 = (char *)v663;
      do
      {
        v77 = *(_QWORD *)(*(_QWORD *)v76 + 40);
        if (v77 != *(_QWORD *)v76 + 40)
        {
          if (v77)
            v78 = v77 - 24;
          else
            v78 = 0;
          v79 = *(unsigned __int8 *)(v78 + 16);
          if (v79 != 30)
          {
            v80 = 2;
            switch(*(_BYTE *)(v78 + 16))
            {
              case 0x1E:
                __break(1u);
                return result;
              case 0x1F:
                v80 = (*(_DWORD *)(v78 + 20) >> 1) & 0x3FFFFFF;
                goto LABEL_147;
              case 0x20:
              case 0x26:
                v80 = (*(_DWORD *)(v78 + 20) & 0x7FFFFFF) - 1;
                goto LABEL_147;
              case 0x21:
                goto LABEL_132;
              case 0x24:
                v80 = *(_WORD *)(v78 + 18) & 1;
                goto LABEL_147;
              case 0x25:
                v80 = 1;
                goto LABEL_132;
              case 0x27:
                v80 = *(_DWORD *)(v78 + 80) + 1;
LABEL_147:
                if (!v80)
                  goto LABEL_144;
                goto LABEL_132;
              default:
                goto LABEL_144;
            }
          }
          if ((*(_DWORD *)(v78 + 20) & 0x7FFFFFF) == 3)
            v80 = 2;
          else
            v80 = 1;
LABEL_132:
          v81 = 0;
          result = v78 + 32;
          do
          {
            if (v79 != 30)
              __asm { BR              X5 }
            v82 = *(_QWORD *)(v78 - 32 - 32 * v81);
            v83 = 8 * v664;
            v84 = (char *)v663;
            while (*(_QWORD *)v84 != v82)
            {
              v84 += 8;
              v83 -= 8;
              if (!v83)
              {
                v84 = (char *)v663 + 8 * v664;
                break;
              }
            }
            if (v82 != (_QWORD)v661 && (v84 - (_BYTE *)v663) >> 3 == v664)
              goto LABEL_202;
            ++v81;
          }
          while (v81 != v80);
        }
LABEL_144:
        v76 += 8;
      }
      while (v76 != (char *)v663 + 8 * v664);
      v85 = *(_QWORD *)(*((_QWORD *)&v660 + 1) + 8);
      if (v85)
      {
        while (1)
        {
          v86 = *(_QWORD *)(v85 + 24);
          v87 = *(unsigned __int8 *)(v86 + 16);
          v88 = v86 && v87 >= 0x1C;
          if (v88 && v87 - 29 <= 0xA)
            break;
          v85 = *(_QWORD *)(v85 + 8);
          if (!v85)
            goto LABEL_163;
        }
        v137 = 0;
LABEL_252:
        ++v137;
        while (1)
        {
          v85 = *(_QWORD *)(v85 + 8);
          if (!v85)
            break;
          v138 = *(_QWORD *)(v85 + 24);
          v139 = *(unsigned __int8 *)(v138 + 16);
          if (v138)
            v140 = v139 >= 0x1C;
          else
            v140 = 0;
          if (v140 && v139 - 29 < 0xB)
            goto LABEL_252;
        }
      }
      else
      {
LABEL_163:
        v137 = 0;
      }
      if (v137 != (int)v670)
        goto LABEL_202;
      if ((_DWORD)v670)
      {
        v90 = v669;
        do
        {
          v91 = 8 * v664;
          v92 = (char *)v663;
          while (*(_QWORD *)v92 != *v90)
          {
            v92 += 8;
            v91 -= 8;
            if (!v91)
            {
              v92 = (char *)v663 + 8 * v664;
              break;
            }
          }
          if (v664 != (v92 - (_BYTE *)v663) >> 3)
            goto LABEL_202;
          ++v90;
        }
        while (v90 != (_QWORD *)((char *)v669 + 8 * v670));
      }
      v93 = v638[4];
      for (m = v638[5]; v93 != m; v93 += 8)
      {
        for (n = *(_QWORD *)(*(_QWORD *)v93 + 48); n != *(_QWORD *)v93 + 40; n = *(_QWORD *)(n + 8))
        {
          v96 = n - 24;
          if (!n)
            v96 = 0;
          if (*(_BYTE *)(v96 + 16) == 84)
          {
            v97 = *(_QWORD *)(v96 - 32);
            if (v97)
            {
              if (!*(_BYTE *)(v97 + 16)
                && *(_QWORD *)(v97 + 24) == *(_QWORD *)(v96 + 72)
                && (*(_BYTE *)(v97 + 33) & 0x20) != 0)
              {
                v98 = *(_DWORD *)(*(_QWORD *)(n - 56) + 36);
                if ((v98 - 1828) < 2 || v98 == 2622 || v98 == 2668)
                  goto LABEL_202;
              }
            }
          }
        }
      }
      v99 = v636;
      ExitingBlock = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitingBlock(v637);
      v101 = ExitingBlock + 40;
      v102 = *(_QWORD *)(ExitingBlock + 48);
      if (v102 == ExitingBlock + 40)
      {
LABEL_201:
        v30 = v630;
        goto LABEL_202;
      }
      while (1)
      {
        v103 = v102 - 24;
        if (!v102)
          v103 = 0;
        v104 = *(unsigned __int8 *)(v103 + 16);
        if (v104 != 30)
          v103 = 0;
        if (v102 && v104 == 30 && (*(_DWORD *)(v103 + 20) & 0x7FFFFFF) == 3)
        {
          v105 = (char *)sub_1C477672C((uint64_t)(v99 + 66), *(_QWORD *)(v103 - 96));
          v106 = (char *)v99[67];
          v107 = v106 == v99[66] ? (unsigned int *)((char *)v99 + 548) : (unsigned int *)(v99 + 68);
          if (v105 != &v106[8 * *v107])
            break;
        }
        v102 = *(_QWORD *)(v102 + 8);
        if (v102 == v101)
          goto LABEL_201;
      }
      if ((_DWORD)v664)
      {
        v142 = (uint64_t ****)v663;
        v615 = (llvm::PHINode *)((char *)v663 + 8 * v664);
        do
        {
          v143 = *v142;
          v705 = ".clone";
          LOWORD(v709) = 259;
          v144 = (_QWORD *)llvm::CloneBasicBlock(v143, (uint64_t)v655, (uint64_t)&v705, 0, 0, 0);
          v706 = 2;
          v707 = 0;
          v708 = v143;
          if (v143 != (uint64_t ***)-8192 && v143 != (uint64_t ***)-4096 && v143 != 0)
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v706);
          v705 = &unk_1E814DA10;
          v709 = v655;
          v146 = sub_1C52E2ED8((uint64_t)v655, &v705);
          if (v708 != (uint64_t ***)-8192 && v708 != (uint64_t ***)-4096 && v708)
          {
            v147 = v706 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)(v706 & 0xFFFFFFFFFFFFFFF8) = v707;
            if (v707)
            {
              *v707 = *v707 & 7 | v147;
            }
            else
            {
              v148 = v708;
              v149 = (int32x2_t *)***v708;
              v150 = (unint64_t)v149[303];
              if (v150 <= v147)
              {
                v151 = v149[305].u32[0];
                if (v150 + 16 * v151 > v147)
                {
                  v152 = v151 - 1;
                  LODWORD(v153) = v152 & ((v708 >> 4) ^ (v708 >> 9));
                  v154 = (uint64_t ****)(v150 + 16 * v153);
                  v155 = *v154;
                  if (v708 == *v154)
                  {
LABEL_281:
                    *v154 = (uint64_t ***)-8192;
                    v149[304] = vadd_s32(v149[304], (int32x2_t)0x1FFFFFFFFLL);
                    v148 = v708;
                  }
                  else
                  {
                    v156 = 1;
                    while (v155 != (uint64_t ***)-4096)
                    {
                      v157 = v153 + v156++;
                      v153 = v157 & v152;
                      v155 = *(uint64_t ****)(v150 + 16 * v153);
                      if (v708 == v155)
                      {
                        v154 = (uint64_t ****)(v150 + 16 * v153);
                        goto LABEL_281;
                      }
                    }
                  }
                  *((_BYTE *)v148 + 17) &= ~1u;
                }
              }
            }
          }
          v158 = (_QWORD *)v146[7];
          if (v158 != v144)
          {
            if (v158 && v158 != (_QWORD *)-8192 && v158 != (_QWORD *)-4096)
            {
              v163 = v146[5] & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v163 = v146[6];
              v164 = (unint64_t *)v146[6];
              if (v164)
              {
                *v164 = *v164 & 7 | v163;
              }
              else
              {
                v165 = v146[7];
                v166 = ***(int32x2_t ****)v165;
                v167 = (unint64_t)v166[303];
                if (v167 <= v163)
                {
                  v168 = v166[305].u32[0];
                  if (v167 + 16 * v168 > v163)
                  {
                    v169 = v168 - 1;
                    LODWORD(v170) = v169 & ((v165 >> 4) ^ (v165 >> 9));
                    v171 = (uint64_t *)(v167 + 16 * v170);
                    v172 = *v171;
                    if (v165 == *v171)
                    {
LABEL_304:
                      *v171 = -8192;
                      v166[304] = vadd_s32(v166[304], (int32x2_t)0x1FFFFFFFFLL);
                      v165 = v146[7];
                    }
                    else
                    {
                      v173 = 1;
                      while (v172 != -4096)
                      {
                        v174 = v170 + v173++;
                        v170 = v174 & v169;
                        v172 = *(_QWORD *)(v167 + 16 * v170);
                        if (v165 == v172)
                        {
                          v171 = (uint64_t *)(v167 + 16 * v170);
                          goto LABEL_304;
                        }
                      }
                    }
                    *(_BYTE *)(v165 + 17) &= ~1u;
                  }
                }
              }
            }
            v146[7] = v144;
            if (v144 != (_QWORD *)-8192 && v144 != (_QWORD *)-4096 && v144)
              llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v146 + 5));
          }
          v159 = v673;
          if (v673 >= (unint64_t)HIDWORD(v673))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v672, (uint64_t)v674, v673 + 1, 8);
            v159 = v673;
          }
          *((_QWORD *)v672 + v159) = v144;
          LODWORD(v673) = v673 + 1;
          v160 = (_QWORD *)*((_QWORD *)&v660 + 1);
          llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)(v634 + 9), v144);
          v161 = v160[3];
          v160 += 3;
          v144[3] = v161;
          v144[4] = v160;
          v162 = v144 + 3;
          *(_QWORD *)(v161 + 8) = v162;
          *v160 = v162;
          ++v142;
        }
        while (v142 != (uint64_t ****)v615);
      }
      if (v656)
      {
        v175 = ((v662 >> 4) ^ (v662 >> 9)) & (v656 - 1);
        v176 = v655[0] + (v175 << 6);
        v177 = *(_QWORD *)(v176 + 24);
        if ((_QWORD)v662 == v177)
          goto LABEL_314;
        v178 = 1;
        while (v177 != -4096)
        {
          v179 = v175 + v178++;
          v175 = v179 & (v656 - 1);
          v176 = v655[0] + (v175 << 6);
          v177 = *(_QWORD *)(v176 + 24);
          if ((_QWORD)v662 == v177)
            goto LABEL_314;
        }
      }
      v176 = v655[0] + ((unint64_t)v656 << 6);
LABEL_314:
      *((_QWORD *)&v662 + 1) = *(_QWORD *)(v176 + 56);
      if ((_DWORD)v673)
      {
        v180 = (llvm::PHINode *)v672;
        v599 = (llvm::Value *)((char *)v672 + 8 * v673);
        do
        {
          v616 = v180;
          v181 = *(_QWORD *)v180 + 40;
          for (ii = *(_QWORD *)(*(_QWORD *)v180 + 48); ii != v181; ii = *(_QWORD *)(ii + 8))
          {
            if (ii)
              v183 = (uint64_t ***)(ii - 24);
            else
              v183 = 0;
            v184 = (_QWORD *)operator new();
            *(_DWORD *)v184 = 2;
            v184[1] = 0;
            *((_DWORD *)v184 + 4) = 0;
            v184[5] = v655;
            v184[3] = v184 + 5;
            v184[6] = 0;
            v184[4] = 0x200000001;
            v184[9] = v184 + 11;
            v184[10] = 0x400000000;
            v184[23] = v184 + 25;
            v184[24] = 0x100000000;
            v184[27] = v184 + 29;
            v184[28] = 0x1000000000;
            v697 = (unsigned __int8 *)v184;
            v705 = v184;
            sub_1C5FD706C((uint64_t)v184, v183);
            sub_1C5FD3718((uint64_t *)&v705, v185);
            llvm::ValueMapper::~ValueMapper((llvm::ValueMapper *)&v697, v186);
          }
          v180 = (llvm::PHINode *)((char *)v616 + 8);
        }
        while ((llvm::PHINode *)((char *)v616 + 8) != v599);
      }
      v617 = (llvm::PHINode *)*((_QWORD *)&v660 + 1);
      v187 = (uint64_t)(v634 + 9);
      v188 = *(_QWORD **)*v634;
      v705 = "lm.joinbb";
      LOWORD(v709) = 259;
      v189 = operator new();
      *(_QWORD *)v189 = *v188 + 1600;
      *(_QWORD *)(v189 + 8) = 0;
      v190 = *(_DWORD *)(v189 + 20) & 0xC0000000;
      *(_DWORD *)(v189 + 16) = 22;
      *(_DWORD *)(v189 + 20) = v190;
      *(_QWORD *)(v189 + 24) = 0;
      v191 = (_QWORD *)(v189 + 24);
      *(_QWORD *)(v189 + 32) = 0;
      *(_QWORD *)(v189 + 40) = v189 + 40;
      *(_QWORD *)(v189 + 48) = v189 + 40;
      *(_QWORD *)(v189 + 56) = 0;
      if (v617)
        v192 = (uint64_t *)((char *)v617 + 24);
      else
        v192 = (uint64_t *)v187;
      llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v187, (_QWORD *)v189);
      v193 = *v192;
      *(_QWORD *)(v189 + 32) = v192;
      *v191 = v193;
      *(_QWORD *)(v193 + 8) = v191;
      *v192 = (uint64_t)v191;
      llvm::Value::setName((uint64_t ***)v189, (uint64_t)&v705);
      *(_QWORD *)&v659 = v189;
      v642 = v189;
      v643 = v189 + 40;
      v194 = *(_QWORD *)v644 + 1888;
      LOWORD(v709) = 257;
      v618 = (llvm::PHINode *)sub_1C4867E94((uint64_t)&v639, v194, (int)v670 + 2, (uint64_t)&v705);
      v196 = *(llvm::ConstantInt **)(*(_QWORD *)v644 + 1888);
      v197 = *(_DWORD *)(*(_QWORD *)v644 + 1896);
      LODWORD(v706) = v197 >> 8;
      if (v197 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v705, 1, 0);
      }
      else
      {
        if (v197 <= 0xFF)
          v198 = 0;
        else
          v198 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v197);
        v705 = (void *)(v198 & 1);
      }
      v199 = llvm::ConstantInt::get(v196, (llvm::LLVMContext *)&v705, v195);
      if (v706 >= 0x41 && v705)
        MEMORY[0x1CAA32F9C](v705, 0x1000C8000313F17);
      sub_1C477667C(v618, (uint64_t)v199, *((uint64_t *)&v661 + 1));
      v201 = *(llvm::ConstantInt **)(*(_QWORD *)v644 + 1888);
      v202 = *(_DWORD *)(*(_QWORD *)v644 + 1896);
      LODWORD(v706) = v202 >> 8;
      if (v202 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v705, 1, 0);
      }
      else
      {
        if (v202 <= 0xFF)
          LOBYTE(v203) = 0;
        else
          v203 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v202);
        v705 = (void *)(v203 & 1);
      }
      v204 = llvm::ConstantInt::get(v201, (llvm::LLVMContext *)&v705, v200);
      if (v706 >= 0x41 && v705)
        MEMORY[0x1CAA32F9C](v705, 0x1000C8000313F17);
      sub_1C477667C(v618, (uint64_t)v204, *((uint64_t *)&v662 + 1));
      if ((_DWORD)v670)
      {
        v206 = (uint64_t *)v669;
        v207 = 8 * v670;
        do
        {
          v208 = *v206;
          v209 = *(llvm::ConstantInt **)(*(_QWORD *)v644 + 1888);
          LODWORD(v706) = *(_DWORD *)(*(_QWORD *)v644 + 1896) >> 8;
          if (v706 > 0x40)
            llvm::APInt::initSlowCase((llvm::APInt *)&v705, 0, 0);
          else
            v705 = 0;
          v210 = llvm::ConstantInt::get(v209, (llvm::LLVMContext *)&v705, v205);
          if (v706 >= 0x41 && v705)
            MEMORY[0x1CAA32F9C](v705, 0x1000C8000313F17);
          sub_1C477667C(v618, (uint64_t)v210, v208);
          ++v206;
          v207 -= 8;
        }
        while (v207);
      }
      v211 = (llvm::BasicBlock *)v661;
      v212 = (llvm::BasicBlock *)*((_QWORD *)&v660 + 1);
      v213 = operator new(0xA0uLL);
      v214 = v213;
      v215 = 0;
      v216 = (llvm::Value *)(v213 + 24);
      v213[29] = v213[29] & 0x38000000 | 3;
      do
      {
        v217 = &v213[v215];
        *v217 = 0;
        v217[1] = 0;
        v217[2] = 0;
        v217[3] = v216;
        v215 += 8;
      }
      while (v215 != 24);
      llvm::BranchInst::BranchInst((llvm::BranchInst *)(v213 + 24), v211, v212, v618, 0);
      LOWORD(v709) = 257;
      v600 = v216;
      (*((void (**)(void **, llvm::Value *, void **, uint64_t, uint64_t))*v646 + 2))(v646, v216, &v705, v642, v643);
      if ((_DWORD)v640)
      {
        v218 = (char *)v639;
        v219 = (char *)v639 + 16 * v640;
        v220 = (unsigned __int8 **)(v214 + 36);
        do
        {
          v221 = *(_DWORD *)v218;
          v222 = (unsigned __int8 *)*((_QWORD *)v218 + 1);
          if (v222)
          {
            if (!v221)
            {
              v697 = (unsigned __int8 *)*((_QWORD *)v218 + 1);
              llvm::MetadataTracking::track((uint64_t)&v697, v222, 2);
              v223 = *v220;
              goto LABEL_360;
            }
          }
          else
          {
            v223 = *v220;
            if (!*v220 && (*((_BYTE *)v214 + 119) & 0x20) == 0)
              goto LABEL_357;
            if (!v221)
            {
              v697 = 0;
LABEL_360:
              if (v223)
                llvm::MetadataTracking::untrack((uint64_t)(v214 + 36), v223);
              v224 = v697;
              *v220 = v697;
              if (v224)
                llvm::MetadataTracking::retrack((uint64_t)&v697, v224, (uint64_t)(v214 + 36));
              goto LABEL_357;
            }
          }
          llvm::Value::setMetadata(v600, *(_DWORD *)v218, (llvm::MDNode *)v222);
LABEL_357:
          v218 += 16;
        }
        while (v218 != v219);
      }
      if (v656)
      {
        v225 = ((DWORD2(v659) >> 4) ^ (DWORD2(v659) >> 9)) & (v656 - 1);
        v226 = v655[0] + (v225 << 6);
        v227 = *(_QWORD *)(v226 + 24);
        if (*((_QWORD *)&v659 + 1) == v227)
          goto LABEL_371;
        v228 = 1;
        while (v227 != -4096)
        {
          v229 = v225 + v228++;
          v225 = v229 & (v656 - 1);
          v226 = v655[0] + (v225 << 6);
          v227 = *(_QWORD *)(v226 + 24);
          if (*((_QWORD *)&v659 + 1) == v227)
            goto LABEL_371;
        }
      }
      v226 = v655[0] + ((unint64_t)v656 << 6);
LABEL_371:
      v230 = *(llvm::Value **)(v226 + 56);
      v231 = *(_QWORD *)(*((_QWORD *)&v661 + 1) + 40);
      if (v231 == *((_QWORD *)&v661 + 1) + 40)
      {
        v233 = 0;
      }
      else
      {
        if (v231)
          v232 = (unsigned __int8 *)(v231 - 24);
        else
          v232 = 0;
        if (v232[16] - 29 >= 0xB)
          v233 = 0;
        else
          v233 = (llvm::User *)v232;
      }
      llvm::User::replaceUsesOfWith(v233, (llvm::Value *)v661, (llvm::Value *)v659);
      v234 = *(_QWORD *)(v660 + 40);
      if (v234 == (_QWORD)v660 + 40)
      {
        v236 = 0;
      }
      else
      {
        if (v234)
          v235 = (unsigned __int8 *)(v234 - 24);
        else
          v235 = 0;
        if (v235[16] - 29 >= 0xB)
          v236 = 0;
        else
          v236 = (llvm::User *)v235;
      }
      llvm::User::replaceUsesOfWith(v236, *((llvm::Value **)&v659 + 1), v230);
      v237 = *(_QWORD *)(*((_QWORD *)&v662 + 1) + 40);
      if (v237 == *((_QWORD *)&v662 + 1) + 40)
      {
        v239 = 0;
      }
      else
      {
        if (v237)
          v238 = (unsigned __int8 *)(v237 - 24);
        else
          v238 = 0;
        if (v238[16] - 29 >= 0xB)
          v239 = 0;
        else
          v239 = (llvm::User *)v238;
      }
      llvm::User::replaceUsesOfWith(v239, (llvm::Value *)v661, (llvm::Value *)v659);
      if ((_DWORD)v670)
      {
        v240 = (char *)v669;
        v241 = 8 * v670;
        do
        {
          v242 = *(_QWORD *)(*(_QWORD *)v240 + 40);
          if (v242 == *(_QWORD *)v240 + 40)
          {
            v244 = 0;
          }
          else
          {
            if (v242)
              v243 = (unsigned __int8 *)(v242 - 24);
            else
              v243 = 0;
            if (v243[16] - 29 >= 0xB)
              v244 = 0;
            else
              v244 = (llvm::User *)v243;
          }
          llvm::User::replaceUsesOfWith(v244, *((llvm::Value **)&v660 + 1), (llvm::Value *)v659);
          v240 += 8;
          v241 -= 8;
        }
        while (v241);
      }
      sub_1C4774094((llvm::SmallPtrSetImplBase *)(v636 + 66), (uint64_t)v618);
      v705 = &v707;
      v706 = 0x400000000;
      v245 = *(llvm::PHINode **)(*((_QWORD *)&v659 + 1) + 48);
      v601 = (llvm::Value *)(*((_QWORD *)&v659 + 1) + 40);
      if (v245 == (llvm::PHINode *)(*((_QWORD *)&v659 + 1) + 40))
        goto LABEL_575;
      do
      {
        v246 = (char *)v245 - 24;
        if (!v245)
          v246 = 0;
        v247 = v246[16];
        if (v247 != 83)
          v246 = 0;
        if (!v245 || v247 != 83)
          break;
        v248 = *((_DWORD *)v246 + 5);
        v619 = v245;
        if ((v248 & 0x40000000) != 0)
          v249 = (char *)*((_QWORD *)v246 - 1);
        else
          v249 = &v246[-32 * (v248 & 0x7FFFFFF)];
        v250 = *(_QWORD *)&v249[32 * *((unsigned int *)v246 + 15)];
        v703 = 0x400000000;
        v702 = v704;
        v697 = (unsigned __int8 *)v246;
        if (v656)
        {
          v251 = (v656 - 1) & ((v246 >> 4) ^ (v246 >> 9));
          v252 = v655[0] + (v251 << 6);
          v253 = *(char **)(v252 + 24);
          if (v246 == v253)
            goto LABEL_423;
          v254 = 1;
          while (v253 != (char *)-4096)
          {
            v255 = v251 + v254++;
            v251 = v255 & (v656 - 1);
            v252 = v655[0] + (v251 << 6);
            v253 = *(char **)(v252 + 24);
            if (v246 == v253)
              goto LABEL_423;
          }
        }
        v252 = v655[0] + ((unint64_t)v656 << 6);
LABEL_423:
        v698 = *(_QWORD *)(v252 + 56);
        v699 = v250 == (_QWORD)v660;
        v700 = v250 != (_QWORD)v660;
        v256 = *((_DWORD *)v246 + 5);
        if ((v256 & 0x40000000) != 0)
          v257 = (char *)*((_QWORD *)v246 - 1);
        else
          v257 = &v246[-32 * (v256 & 0x7FFFFFF)];
        v701 = *(_QWORD *)&v257[32 * (v250 == (_QWORD)v660)];
        v258 = *((_DWORD *)v246 + 5);
        if ((v258 & 0x40000000) != 0)
          v259 = (char *)*((_QWORD *)v246 - 1);
        else
          v259 = &v246[-32 * (v258 & 0x7FFFFFF)];
        v260 = *(_QWORD *)&v259[32 * (v250 != (_QWORD)v660)];
        if (v260)
          v261 = *(unsigned __int8 *)(v260 + 16) >= 0x1Cu;
        else
          v261 = 0;
        if (v261)
        {
          if ((_DWORD)v664)
          {
            v262 = 8 * v664;
            v263 = (char *)v663;
            while (*(_QWORD *)v263 != *(_QWORD *)(v260 + 40))
            {
              v263 += 8;
              v262 -= 8;
              if (!v262)
              {
                v263 = (char *)v663 + 8 * v664;
                break;
              }
            }
          }
          else
          {
            v263 = (char *)v663;
          }
          if (v664 != (v263 - (_BYTE *)v663) >> 3)
            v701 = v260;
        }
        v264 = *((_QWORD *)v246 + 1);
        if (v264)
        {
          v265 = 0;
          do
          {
            v266 = *(_QWORD *)(v264 + 24);
            if (v266)
              v267 = *(unsigned __int8 *)(v266 + 16) >= 0x1Cu;
            else
              v267 = 0;
            if (v267)
            {
              if ((_DWORD)v664)
              {
                v268 = 8 * v664;
                v269 = (char *)v663;
                while (*(_QWORD *)v269 != *(_QWORD *)(v266 + 40))
                {
                  v269 += 8;
                  v268 -= 8;
                  if (!v268)
                  {
                    v269 = (char *)v663 + 8 * v664;
                    break;
                  }
                }
              }
              else
              {
                v269 = (char *)v663;
              }
              if (v664 == (v269 - (_BYTE *)v663) >> 3)
              {
                if (v265 >= HIDWORD(v703))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v702, (uint64_t)v704, v265 + 1, 8);
                  v265 = v703;
                }
                *((_QWORD *)v702 + v265) = v266;
                v265 = v703 + 1;
                LODWORD(v703) = v703 + 1;
              }
            }
            v264 = *(_QWORD *)(v264 + 8);
          }
          while (v264);
        }
        v270 = v706;
        v271 = (char *)v705;
        if (v706 < HIDWORD(v706))
        {
          v272 = &v697;
          v273 = &v703;
          goto LABEL_462;
        }
        v280 = v705 <= &v697 && (char *)v705 + 80 * v706 > (char *)&v697;
        v281 = 0xCCCCCCCCCCCCCCCDLL * (((char *)&v697 - (_BYTE *)v705) >> 4);
        v571 = v280;
        if (!v280)
          v281 = -1;
        v567 = v281;
        v633 = 0;
        v575 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&v705, v706 + 1, 80, (unint64_t *)&v633);
        v591 = (llvm::SmallPtrSetImplBase *)v705;
        if ((_DWORD)v706)
        {
          v282 = 0;
          v582 = (llvm::PHINode *)(80 * v706);
          v283 = v575;
          while (2)
          {
            v284 = (char *)v282 + (_QWORD)v283;
            v285 = (char *)v282 + (_QWORD)v591;
            v286 = *(_OWORD *)((char *)v282 + (_QWORD)v591 + 16);
            *(_OWORD *)v284 = *(_OWORD *)((char *)v282 + (_QWORD)v591);
            *((_OWORD *)v284 + 1) = v286;
            v287 = (char *)v282 + (_QWORD)v283 + 48;
            *(_QWORD *)((char *)v282 + (_QWORD)v283 + 32) = v287;
            *((_QWORD *)v284 + 5) = 0x400000000;
            v288 = *(unsigned int *)((char *)v282 + (_QWORD)v591 + 40);
            if ((_DWORD)v288)
              v289 = v285 == v284;
            else
              v289 = 1;
            if (v289)
              goto LABEL_495;
            v290 = (char *)*((_QWORD *)v285 + 4);
            if (v285 + 48 == v290)
            {
              if (v288 < 5)
              {
                v291 = *((_DWORD *)v285 + 10);
                v292 = v291;
                goto LABEL_492;
              }
              v564 = (void **)((char *)v282 + (_QWORD)v283 + 32);
              v291 = *(_DWORD *)((char *)v282 + (_QWORD)v591 + 40);
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v564, (uint64_t)v282 + (_QWORD)v283 + 48, v288, 8);
              v292 = *((unsigned int *)v285 + 10);
              if ((_DWORD)v292)
              {
                v290 = (char *)*((_QWORD *)v285 + 4);
                v287 = (char *)*v564;
LABEL_492:
                memcpy(v287, v290, 8 * v292);
              }
              *((_DWORD *)v284 + 10) = v291;
              v283 = v575;
            }
            else
            {
              *((_QWORD *)v284 + 4) = v290;
              *((_DWORD *)v284 + 10) = v288;
              *((_DWORD *)v284 + 11) = *(_DWORD *)((char *)v282 + (_QWORD)v591 + 44);
              *((_QWORD *)v285 + 4) = v285 + 48;
              *(_DWORD *)((char *)v282 + (_QWORD)v591 + 44) = 0;
            }
            *((_DWORD *)v285 + 10) = 0;
LABEL_495:
            v282 = (llvm::PHINode *)((char *)v282 + 80);
            if (v582 == v282)
            {
              v591 = (llvm::SmallPtrSetImplBase *)v705;
              if ((_DWORD)v706)
              {
                v293 = 80 * v706;
                do
                {
                  v294 = *(char **)((char *)v591 + v293 - 48);
                  if ((char *)v591 + v293 - 32 != v294)
                    free(v294);
                  v293 -= 80;
                }
                while (v293);
                v591 = (llvm::SmallPtrSetImplBase *)v705;
              }
              break;
            }
            continue;
          }
        }
        v295 = (int)v633;
        if (v591 != (llvm::SmallPtrSetImplBase *)&v707)
          free(v591);
        v271 = v575;
        v705 = v575;
        HIDWORD(v706) = v295;
        if (v571)
          v272 = (unsigned __int8 **)&v575[80 * v567];
        else
          v272 = &v697;
        v273 = &v703;
        if (v571)
          v273 = (uint64_t *)&v575[80 * v567 + 40];
        v270 = v706;
LABEL_462:
        v274 = &v271[80 * v270];
        v275 = *((_OWORD *)v272 + 1);
        *(_OWORD *)v274 = *(_OWORD *)v272;
        *((_OWORD *)v274 + 1) = v275;
        *((_QWORD *)v274 + 5) = 0x400000000;
        *((_QWORD *)v274 + 4) = v274 + 48;
        v276 = (uint64_t)(v274 + 32);
        if (!*(_DWORD *)v273 || (unsigned __int8 **)v276 == v272 + 4)
          goto LABEL_469;
        v277 = *((unsigned int *)v272 + 10);
        if ((_DWORD)v277)
        {
          if (v277 >= 5)
          {
            *(_DWORD *)(v276 + 8) = 0;
            llvm::SmallVectorBase<unsigned int>::grow_pod(v276, v276 + 16, v277, 8);
            v278 = *((unsigned int *)v272 + 10);
            if (!*((_DWORD *)v272 + 10))
              goto LABEL_468;
LABEL_467:
            memcpy(*(void **)v276, v272[4], 8 * v278);
            goto LABEL_468;
          }
          v278 = *((unsigned int *)v272 + 10);
          if (*((_DWORD *)v272 + 10))
            goto LABEL_467;
        }
LABEL_468:
        *(_DWORD *)(v276 + 8) = v277;
LABEL_469:
        LODWORD(v706) = v706 + 1;
        if (v702 != v704)
          free(v702);
        v245 = (llvm::PHINode *)*((_QWORD *)v619 + 1);
      }
      while (v245 != v601);
      v296 = (unsigned int *)v705;
      if (!(_DWORD)v706)
        goto LABEL_573;
      v559 = (unsigned int *)((char *)v705 + 80 * v706);
      while (2)
      {
        v297 = *(llvm::UndefValue ***)v296;
        v298 = *(_DWORD *)(*(_QWORD *)v296 + 20);
        if ((v298 & 0x40000000) != 0)
          v299 = (llvm::UndefValue **)*(v297 - 1);
        else
          v299 = &v297[-4 * (v298 & 0x7FFFFFF)];
        v300 = v299[4 * v296[5]];
        v562 = v296;
        if (v656)
        {
          v301 = v656 - 1;
          v302 = ((v300 >> 4) ^ (v300 >> 9)) & (v656 - 1);
          v303 = v655[0] + (v302 << 6);
          v304 = *(llvm::UndefValue **)(v303 + 24);
          if (v300 != v304)
          {
            v305 = 1;
            v306 = *(llvm::UndefValue **)(v303 + 24);
            LODWORD(v303) = ((v300 >> 4) ^ (v300 >> 9)) & v301;
            while (v306 != (llvm::UndefValue *)-4096)
            {
              v307 = v303 + v305++;
              v303 = v307 & v301;
              v306 = *(llvm::UndefValue **)(v655[0] + (v303 << 6) + 24);
              if (v300 == v306)
              {
                if ((_DWORD)v303 == v656)
                  goto LABEL_530;
                v308 = 1;
                while (v304 != (llvm::UndefValue *)-4096)
                {
                  v309 = v302 + v308++;
                  v302 = v309 & v301;
                  v303 = v655[0] + (v302 << 6);
                  v304 = *(llvm::UndefValue **)(v303 + 24);
                  if (v300 == v304)
                    goto LABEL_532;
                }
                v303 = v655[0] + ((unint64_t)v656 << 6);
                goto LABEL_532;
              }
            }
            goto LABEL_530;
          }
          if ((_DWORD)v302 == v656)
            goto LABEL_530;
LABEL_532:
          v560 = 0;
          v563 = *(_QWORD *)(v303 + 56);
        }
        else
        {
LABEL_530:
          v560 = 1;
          v563 = (uint64_t)v299[4 * v296[5]];
        }
        sub_1C4D8AE2C((uint64_t)&v639, v661, *(_QWORD *)(v661 + 48));
        v310 = *v297;
        LOWORD(v702) = 257;
        v311 = sub_1C4867E94((uint64_t)&v639, (uint64_t)v310, 2, (uint64_t)&v697);
        sub_1C4D8AE2C((uint64_t)&v639, v659, *(_QWORD *)(v659 + 48));
        v312 = (uint64_t)*v297;
        LOWORD(v702) = 257;
        v313 = (llvm::PHINode *)sub_1C4867E94((uint64_t)&v639, v312, (int)v670 + 2, (uint64_t)&v697);
        v561 = (llvm::Value *)v297;
        v315 = llvm::UndefValue::get(*v297, v314);
        v583 = (llvm::PHINode *)v311;
        sub_1C477667C(v313, v311, *((uint64_t *)&v661 + 1));
        sub_1C477667C(v313, v563, *((uint64_t *)&v662 + 1));
        if ((_DWORD)v670)
        {
          v316 = (uint64_t *)v669;
          v317 = 8 * v670;
          do
          {
            v318 = *v316++;
            sub_1C477667C(v313, (uint64_t)v315, v318);
            v317 -= 8;
          }
          while (v317);
        }
        v319 = v562;
        sub_1C477667C(v583, *((_QWORD *)v562 + 3), v662);
        v320 = (uint64_t)v313;
        v321 = v583;
        sub_1C477667C(v583, v320, v659);
        v322 = v562[10];
        v323 = v561;
        if ((_DWORD)v322)
        {
          v328 = (llvm::PHINode *)*((_QWORD *)v562 + 4);
          v602 = (llvm::PHINode *)((char *)v328 + 8 * v322);
          do
          {
            v329 = *(llvm::SmallPtrSetImplBase **)v328;
            v620 = v328;
            if (*(_QWORD *)v328
              && *((_BYTE *)v329 + 16) == 83
              && *((_QWORD *)v329 + 5) == (_QWORD)v661
              && ((v330 = *((_DWORD *)v329 + 5), (v330 & 0x40000000) != 0)
                ? (v331 = *((_QWORD *)v329 - 1))
                : (v331 = (uint64_t)v329 - 32 * (v330 & 0x7FFFFFF)),
                  (v332 = *(_QWORD *)(v331 + 32 * *((unsigned int *)v329 + 15)), v333 = v662, (v330 & 0x40000000) != 0)
                ? (v334 = *((_QWORD *)v329 - 1))
                : (v334 = (uint64_t)v329 - 32 * (v330 & 0x7FFFFFF)),
                  *(llvm::Value **)(v334 + 32 * (v332 != (_QWORD)v662)) == v323))
            {
              v335 = *(_QWORD *)(v331 + 32 * *((unsigned int *)v329 + 15));
              v576 = v332 == (_QWORD)v662;
              v568 = *((_QWORD *)v319 + 3);
              v572 = v332 != (_QWORD)v662;
              v592 = *(llvm::SmallPtrSetImplBase **)v328;
              sub_1C4D8AE2C((uint64_t)&v639, v659, *(_QWORD *)(v659 + 48));
              v336 = *(llvm::UndefValue **)v592;
              LOWORD(v702) = 257;
              v337 = (llvm::PHINode *)sub_1C4867E94((uint64_t)&v639, (uint64_t)v336, (int)v670 + 2, (uint64_t)&v697);
              v339 = llvm::UndefValue::get(*(llvm::UndefValue **)v592, v338);
              v340 = *((_DWORD *)v592 + 5);
              if ((v340 & 0x40000000) != 0)
                v341 = (char *)*((_QWORD *)v592 - 1);
              else
                v341 = (char *)v592 - 32 * (v340 & 0x7FFFFFF);
              v565 = v335 == v333;
              sub_1C477667C(v337, *(_QWORD *)&v341[32 * v565], *((uint64_t *)&v661 + 1));
              sub_1C477667C(v337, v563, *((uint64_t *)&v662 + 1));
              if ((_DWORD)v670)
              {
                v342 = (uint64_t *)v669;
                v343 = 8 * v670;
                do
                {
                  v344 = *v342++;
                  sub_1C477667C(v337, (uint64_t)v339, v344);
                  v343 -= 8;
                }
                while (v343);
              }
              sub_1C6125834((uint64_t)v592, v572, v568);
              sub_1C6125834((uint64_t)v592, v576, (uint64_t)v337);
              v345 = *((_DWORD *)v592 + 5);
              if ((v345 & 0x40000000) != 0)
                v346 = (char *)*((_QWORD *)v592 - 1);
              else
                v346 = (char *)v592 - 32 * (v345 & 0x7FFFFFF);
              v323 = v561;
              v319 = v562;
              v321 = v583;
              *(_QWORD *)&v346[32 * *((unsigned int *)v592 + 15) + 8 * v565] = v659;
              v633 = v592;
              sub_1C627F8FC((uint64_t)v675, &v633, (uint64_t)&v697);
            }
            else
            {
              llvm::User::replaceUsesOfWith(v329, v323, v321);
            }
            v633 = v321;
            sub_1C627F8FC((uint64_t)v675, &v633, (uint64_t)&v697);
            v328 = (llvm::PHINode *)((char *)v620 + 8);
          }
          while ((llvm::PHINode *)((char *)v620 + 8) != v602);
        }
        v324 = v321;
        v325 = *((_QWORD *)v319 + 1);
        if ((v560 & 1) != 0)
        {
          v326 = *(_DWORD *)(v325 + 20);
          if ((v326 & 0x40000000) != 0)
            v327 = *(_QWORD *)(v325 - 8);
          else
            v327 = v325 - 32 * (v326 & 0x7FFFFFF);
          v324 = *(llvm::Value **)(v327 + 32 * v319[5]);
        }
        llvm::Value::doRAUW(*((llvm::ValueAsMetadata **)v319 + 1), v324, (llvm::Value *)1);
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v325 + 40) + 40, (uint64_t ***)v325);
        v347 = *(_QWORD *)(v325 + 24);
        v348 = *(_QWORD **)(v325 + 32);
        *v348 = v347;
        *(_QWORD *)(v347 + 8) = v348;
        *(_QWORD *)(v325 + 24) = 0;
        *(_QWORD *)(v325 + 32) = 0;
        llvm::Value::deleteValue((llvm::Value *)v325);
        llvm::PHINode::removeIncomingValue(v323, v319[5], 1);
        v633 = v583;
        sub_1C627F8FC((uint64_t)v675, &v633, (uint64_t)&v697);
        v296 = v319 + 20;
        if (v296 != v559)
          continue;
        break;
      }
      v296 = (unsigned int *)v705;
      if ((_DWORD)v706)
      {
        v349 = 20 * v706;
        do
        {
          v350 = *(unsigned int **)&v296[v349 - 12];
          if (&v296[v349 - 8] != v350)
            free(v350);
          v349 -= 20;
        }
        while (v349 * 4);
        v296 = (unsigned int *)v705;
      }
LABEL_573:
      if (v296 != (unsigned int *)&v707)
        free(v296);
LABEL_575:
      v351 = v661 + 40;
      v352 = *(llvm::PHINode **)(v661 + 48);
      while (2)
      {
        if (v352 != (llvm::PHINode *)v351)
        {
          v353 = (char *)v352 - 24;
          if (!v352)
            v353 = 0;
          v354 = v353[16];
          v355 = v354 == 83 ? v353 : 0;
          if (v352 && v354 == 83)
          {
            if (v676)
            {
              v356 = (v676 - 1) & ((v355 >> 4) ^ (v355 >> 9));
              v357 = *(char **)(v675[0] + 8 * v356);
              if (v355 == v357)
              {
LABEL_586:
                v352 = (llvm::PHINode *)*((_QWORD *)v352 + 1);
                continue;
              }
              v358 = 1;
              while (v357 != (char *)-4096)
              {
                v359 = v356 + v358++;
                v356 = v359 & (v676 - 1);
                v357 = *(char **)(v675[0] + 8 * v356);
                if (v355 == v357)
                  goto LABEL_586;
              }
            }
            v360 = *((_DWORD *)v355 + 5);
            if ((v360 & 0x40000000) != 0)
              v361 = (char *)*((_QWORD *)v355 - 1);
            else
              v361 = &v355[-32 * (v360 & 0x7FFFFFF)];
            v362 = *(_QWORD *)&v361[32 * *((unsigned int *)v355 + 15) + 8];
            v621 = (llvm::PHINode *)v351;
            v584 = v352;
            if ((v360 & 0x40000000) != 0)
              v363 = (char *)*((_QWORD *)v355 - 1);
            else
              v363 = &v355[-32 * (v360 & 0x7FFFFFF)];
            v364 = *(_QWORD *)&v363[32 * (v362 != *((_QWORD *)&v661 + 1))];
            v593 = v362 == *((_QWORD *)&v661 + 1);
            v577 = *(_QWORD *)&v363[32 * v593];
            sub_1C4D8AE2C((uint64_t)&v639, v659, *(_QWORD *)(v659 + 48));
            v365 = *(llvm::UndefValue **)v355;
            LOWORD(v709) = 257;
            v366 = (llvm::PHINode *)sub_1C4867E94((uint64_t)&v639, (uint64_t)v365, (int)v670 + 2, (uint64_t)&v705);
            v368 = llvm::UndefValue::get(*(llvm::UndefValue **)v355, v367);
            sub_1C477667C(v366, v577, *((uint64_t *)&v661 + 1));
            v603 = (llvm::Value *)v355;
            if (v656)
            {
              v369 = v656 - 1;
              v370 = (v656 - 1) & ((v364 >> 4) ^ (v364 >> 9));
              v371 = v655[0] + (v370 << 6);
              v372 = *(_QWORD *)(v371 + 24);
              if (v364 == v372)
              {
                if ((_DWORD)v370 != v656)
LABEL_610:
                  v364 = *(_QWORD *)(v371 + 56);
              }
              else
              {
                v373 = 1;
                v374 = *(_QWORD *)(v371 + 24);
                LODWORD(v371) = v369 & ((v364 >> 4) ^ (v364 >> 9));
                while (v374 != -4096)
                {
                  v375 = v371 + v373++;
                  v371 = v375 & v369;
                  v374 = *(_QWORD *)(v655[0] + (v371 << 6) + 24);
                  if (v364 == v374)
                  {
                    if ((_DWORD)v371 == v656)
                      break;
                    v376 = 1;
                    while (v372 != -4096)
                    {
                      v377 = v370 + v376++;
                      v370 = v377 & v369;
                      v371 = v655[0] + (v370 << 6);
                      v372 = *(_QWORD *)(v371 + 24);
                      if (v364 == v372)
                        goto LABEL_610;
                    }
                    v371 = v655[0] + ((unint64_t)v656 << 6);
                    goto LABEL_610;
                  }
                }
              }
            }
            sub_1C477667C(v366, v364, *((uint64_t *)&v662 + 1));
            v378 = v366;
            if ((_DWORD)v670)
            {
              v379 = (uint64_t *)v669;
              v380 = 8 * v670;
              do
              {
                v381 = *v379++;
                sub_1C477667C(v378, (uint64_t)v368, v381);
                v380 -= 8;
              }
              while (v380);
            }
            sub_1C6125834((uint64_t)v603, v593, (uint64_t)v378);
            v382 = *((_DWORD *)v603 + 5);
            if ((v382 & 0x40000000) != 0)
              v383 = (char *)*((_QWORD *)v603 - 1);
            else
              v383 = (char *)v603 - 32 * (v382 & 0x7FFFFFF);
            v351 = (uint64_t)v621;
            v352 = v584;
            *(_QWORD *)&v383[32 * *((unsigned int *)v603 + 15) + 8 * v593] = v659;
            goto LABEL_586;
          }
        }
        break;
      }
      v698 = 0;
      v697 = 0;
      v699 = 0;
      if ((_DWORD)v667)
      {
        v384 = (llvm::SmallPtrSetImplBase *)v666;
        v585 = (llvm::PHINode *)((char *)v666 + 8 * v667);
        do
        {
          v594 = v384;
          v385 = *(llvm::Value **)(*(_QWORD *)v384 + 48);
          for (jj = (llvm::Value *)(*(_QWORD *)v384 + 40); v385 != jj; v385 = (llvm::Value *)*((_QWORD *)v385 + 1))
          {
            if (v385)
              v386 = (llvm::Value *)((char *)v385 - 24);
            else
              v386 = 0;
            for (kk = *((_QWORD *)v386 + 1); kk; kk = *(_QWORD *)(kk + 8))
            {
              v391 = *(_QWORD *)(kk + 24);
              v392 = *(unsigned __int8 *)(v391 + 16);
              if (v391)
                v393 = v392 >= 0x1C;
              else
                v393 = 0;
              if (v393)
              {
                v394 = *(_QWORD *)(v391 + 40);
                if ((_DWORD)v673)
                {
                  v395 = 8 * v673;
                  v396 = (char *)v672;
                  while (*(_QWORD *)v396 != v394)
                  {
                    v396 += 8;
                    v395 -= 8;
                    if (!v395)
                    {
                      v396 = (char *)v672 + 8 * v673;
                      break;
                    }
                  }
                }
                else
                {
                  v396 = (char *)v672;
                }
                v398 = v392 == 83 && v394 == *((_QWORD *)&v660 + 1);
                v399 = v638[4];
                v400 = v638[5];
                v401 = v400 - v399;
                v25 = v400 == v399;
                v402 = (v400 - v399) >> 3;
                if (v25)
                {
                  v405 = (_QWORD *)v638[4];
                }
                else
                {
                  v403 = (_QWORD *)(v399 + (v401 & 0xFFFFFFFFFFFFFFF8));
                  v404 = 8 * v402;
                  v405 = (_QWORD *)v638[4];
                  while (*v405 != v394)
                  {
                    ++v405;
                    v404 -= 8;
                    if (!v404)
                    {
                      v405 = v403;
                      break;
                    }
                  }
                }
                v407 = v402 != ((uint64_t)v405 - v399) >> 3 || (v396 - (_BYTE *)v672) >> 3 != v673 || v398;
                if ((v407 & 1) == 0 && v394 != (_QWORD)v659)
                {
                  v622 = v386;
                  v705 = v386;
                  v388 = sub_1C61B7348((uint64_t)&v697, (uint64_t *)&v705);
                  v389 = v388;
                  v390 = *((unsigned int *)v388 + 4);
                  if (v390 >= *((unsigned int *)v388 + 5))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v388 + 1), (uint64_t)(v388 + 3), v390 + 1, 8);
                    v390 = *((unsigned int *)v389 + 4);
                  }
                  *(_QWORD *)(v389[1] + 8 * v390) = v391;
                  ++*((_DWORD *)v389 + 4);
                  v386 = v622;
                }
              }
            }
          }
          v384 = (llvm::SmallPtrSetImplBase *)((char *)v594 + 8);
        }
        while ((llvm::SmallPtrSetImplBase *)((char *)v594 + 8) != v585);
        v408 = (uint64_t **)v697;
        v409 = v698;
        v410 = v699;
      }
      else
      {
        v410 = 0;
        v408 = 0;
        v409 = 0;
      }
      sub_1C4D8AE2C((uint64_t)&v639, v659, *(_QWORD *)(v659 + 48));
      v411 = v410;
      v412 = &v408[7 * v410];
      v566 = v410;
      if (v409)
      {
        if (v410)
        {
          v413 = 56 * v410;
          v412 = v408;
          while (((unint64_t)*v412 | 0x1000) == 0xFFFFFFFFFFFFF000)
          {
            v412 += 7;
            v413 -= 56;
            if (!v413)
            {
              v411 = v410;
              v412 = &v408[7 * v410];
              goto LABEL_673;
            }
          }
          v411 = v410;
        }
        else
        {
          v411 = 0;
          v412 = v408;
        }
      }
LABEL_673:
      v569 = v408;
      v573 = &v408[7 * v411];
      v578 = &v408[7 * v410];
      if (v412 != v573)
      {
        do
        {
          v586 = (llvm::PHINode *)v412;
          v414 = (llvm::UndefValue **)*v412;
          v415 = **v412;
          LOWORD(v709) = 257;
          v416 = (llvm::PHINode *)sub_1C4867E94((uint64_t)&v639, v415, (int)v670 + 2, (uint64_t)&v705);
          v623 = (uint64_t *)v414;
          v418 = llvm::UndefValue::get(*v414, v417);
          sub_1C477667C(v416, (uint64_t)v418, *((uint64_t *)&v661 + 1));
          v605 = v416;
          sub_1C477667C(v416, (uint64_t)v418, *((uint64_t *)&v662 + 1));
          if ((_DWORD)v670)
          {
            v419 = (uint64_t *)v669;
            v420 = 8 * v670;
            do
            {
              v421 = *v419;
              if (llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(v635, v623[5], *v419))
              {
                v422 = v605;
                v423 = (uint64_t)v623;
              }
              else
              {
                v423 = (uint64_t)v418;
                v422 = v605;
              }
              sub_1C477667C(v422, v423, v421);
              ++v419;
              v420 -= 8;
            }
            while (v420);
          }
          v424 = *((unsigned int *)v586 + 4);
          if ((_DWORD)v424)
          {
            v425 = (llvm::User **)*((_QWORD *)v586 + 1);
            v426 = 8 * v424;
            do
            {
              v427 = *v425++;
              llvm::User::replaceUsesOfWith(v427, (llvm::Value *)v623, v605);
              v426 -= 8;
            }
            while (v426);
          }
          v412 = v578;
          if ((uint64_t **)((char *)v586 + 56) != v578)
          {
            v412 = (uint64_t **)((char *)v586 + 56);
            while (((unint64_t)*v412 | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              v412 += 7;
              if (v412 == v578)
              {
                v412 = v578;
                break;
              }
            }
          }
        }
        while (v412 != v573);
        v411 = v566;
      }
      if (v411)
      {
        v428 = 56 * v411;
        v429 = v569 + 3;
        do
        {
          if ((*(v429 - 3) | 0x1000) != 0xFFFFFFFFFFFFF000)
          {
            v430 = (_QWORD *)*(v429 - 2);
            if (v429 != v430)
              free(v430);
          }
          v429 += 7;
          v428 -= 56;
        }
        while (v428);
      }
      MEMORY[0x1CAA32FB4](v569, 8);
      v705 = &v707;
      v706 = 0x400000000;
      sub_1C4D8AE2C((uint64_t)&v639, v659, *(_QWORD *)(v659 + 48));
      v431 = *(llvm::PHINode **)(*((_QWORD *)&v660 + 1) + 48);
      v606 = (llvm::Value *)(*((_QWORD *)&v660 + 1) + 40);
      if (v431 != (llvm::PHINode *)(*((_QWORD *)&v660 + 1) + 40))
      {
        while (1)
        {
          v432 = (char *)v431 - 24;
          if (!v431)
            v432 = 0;
          v433 = v432[16];
          v434 = v433 == 83 ? v432 : 0;
          if (!v431 || v433 != 83)
            break;
          v624 = v431;
          v435 = *(llvm::UndefValue **)v434;
          LOWORD(v702) = 257;
          v436 = (llvm::PHINode *)sub_1C4867E94((uint64_t)&v639, (uint64_t)v435, (int)v670 + 2, (uint64_t)&v697);
          v438 = llvm::UndefValue::get(*(llvm::UndefValue **)v434, v437);
          sub_1C477667C(v436, (uint64_t)v438, *((uint64_t *)&v661 + 1));
          sub_1C477667C(v436, (uint64_t)v438, *((uint64_t *)&v662 + 1));
          v439 = *((_DWORD *)v434 + 5);
          v440 = v439 & 0x7FFFFFF;
          if ((v439 & 0x7FFFFFF) != 0)
          {
            v441 = 0;
            v442 = 0;
            do
            {
              if ((v439 & 0x40000000) != 0)
                v443 = (char *)*((_QWORD *)v434 - 1);
              else
                v443 = &v434[-32 * v440];
              sub_1C477667C(v436, *(_QWORD *)&v443[v441], *(_QWORD *)&v443[32 * *((unsigned int *)v434 + 15) + 8 * v442++]);
              v439 = *((_DWORD *)v434 + 5);
              v440 = v439 & 0x7FFFFFF;
              v441 += 32;
            }
            while (v442 < v440);
          }
          llvm::Value::doRAUW((llvm::ValueAsMetadata *)v434, v436, (llvm::Value *)1);
          v444 = v706;
          if (v706 >= (unint64_t)HIDWORD(v706))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v705, (uint64_t)&v707, v706 + 1, 8);
            v444 = v706;
          }
          *((_QWORD *)v705 + v444) = v434;
          v445 = v706 + 1;
          LODWORD(v706) = v706 + 1;
          v431 = (llvm::PHINode *)*((_QWORD *)v624 + 1);
          if (v431 == v606)
            goto LABEL_715;
        }
      }
      v445 = v706;
LABEL_715:
      v446 = (unint64_t **)v705;
      if (v445)
      {
        v447 = 8 * v445;
        do
        {
          v448 = (uint64_t)*v446++;
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v448 + 40) + 40, (uint64_t ***)v448);
          v449 = *(_QWORD *)(v448 + 24);
          v450 = *(_QWORD **)(v448 + 32);
          *v450 = v449;
          *(_QWORD *)(v449 + 8) = v450;
          *(_QWORD *)(v448 + 24) = 0;
          *(_QWORD *)(v448 + 32) = 0;
          llvm::Value::deleteValue((llvm::Value *)v448);
          v447 -= 8;
        }
        while (v447);
        v446 = (unint64_t **)v705;
      }
      if (v446 != &v707)
        free(v446);
      v698 = 0;
      v697 = 0;
      v699 = 0;
      if (!(_DWORD)v664)
      {
        v467 = 0;
        v466 = 0;
LABEL_759:
        v470 = (llvm::PHINode *)&v466[56 * v467];
        v468 = v470;
        goto LABEL_762;
      }
      v451 = (llvm::PHINode *)v663;
      v579 = (char *)v663 + 8 * v664;
      do
      {
        v587 = v451;
        v452 = *(llvm::Value **)v451;
        v453 = *(_QWORD *)v451 + 40;
        v454 = *(_QWORD *)(*(_QWORD *)v451 + 48);
        v595 = (llvm::SmallPtrSetImplBase *)v453;
        for (mm = *(llvm::Value **)v451; v454 != v453; v454 = *(_QWORD *)(v454 + 8))
        {
          if (v454)
            v455 = (llvm::PHINode *)(v454 - 24);
          else
            v455 = 0;
          if (v452 != *((llvm::Value **)&v659 + 1) || *((_BYTE *)v455 + 16) != 83)
          {
            for (nn = *((_QWORD *)v455 + 1); nn; nn = *(_QWORD *)(nn + 8))
            {
              v460 = *(_QWORD *)(nn + 24);
              v461 = *(unsigned __int8 *)(v460 + 16);
              if (v460)
                v462 = v461 >= 0x1C;
              else
                v462 = 0;
              if (v462)
              {
                v463 = *(_QWORD *)(v460 + 40);
                if ((_DWORD)v664)
                {
                  v464 = 8 * v664;
                  v465 = (char *)v663;
                  while (*(_QWORD *)v465 != v463)
                  {
                    v465 += 8;
                    v464 -= 8;
                    if (!v464)
                    {
                      v465 = (char *)v663 + 8 * v664;
                      break;
                    }
                  }
                }
                else
                {
                  v465 = (char *)v663;
                }
                if (v664 == (v465 - (_BYTE *)v663) >> 3
                  && v463 != (_QWORD)v659
                  && (v461 != 83 || v463 != (_QWORD)v661))
                {
                  v625 = v455;
                  v705 = v455;
                  v457 = sub_1C61B7348((uint64_t)&v697, (uint64_t *)&v705);
                  v458 = v457;
                  v459 = *((unsigned int *)v457 + 4);
                  if (v459 >= *((unsigned int *)v457 + 5))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v457 + 1), (uint64_t)(v457 + 3), v459 + 1, 8);
                    v459 = *((unsigned int *)v458 + 4);
                  }
                  *(_QWORD *)(v458[1] + 8 * v459) = v460;
                  ++*((_DWORD *)v458 + 4);
                  v453 = (uint64_t)v595;
                  v452 = mm;
                  v455 = v625;
                }
              }
            }
          }
        }
        v451 = (llvm::PHINode *)((char *)v587 + 8);
      }
      while ((char *)v587 + 8 != v579);
      v466 = v697;
      v467 = v699;
      if (!(_DWORD)v698)
        goto LABEL_759;
      v468 = (llvm::PHINode *)&v697[56 * v699];
      if (v699)
      {
        v469 = 0;
        while ((*(_QWORD *)&v697[v469] | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v469 += 56;
          if (56 * v699 == v469)
          {
            v470 = (llvm::PHINode *)&v697[56 * v699];
            goto LABEL_762;
          }
        }
        v470 = (llvm::PHINode *)&v697[v469];
      }
      else
      {
        v470 = (llvm::PHINode *)v697;
      }
LABEL_762:
      v570 = v467;
      v574 = v466;
      v580 = (llvm::PHINode *)&v466[56 * v467];
      v588 = v468;
      if (v470 != v580)
      {
        while (2)
        {
          v471 = *(uint64_t **)v470;
          if (!v656)
            goto LABEL_769;
          v472 = ((v471 >> 4) ^ (v471 >> 9)) & (v656 - 1);
          v473 = v655[0] + (v472 << 6);
          v474 = *(uint64_t **)(v473 + 24);
          if (v471 != v474)
          {
            v475 = 1;
            while (v474 != (uint64_t *)-4096)
            {
              v476 = v472 + v475++;
              v472 = v476 & (v656 - 1);
              v473 = v655[0] + (v472 << 6);
              v474 = *(uint64_t **)(v473 + 24);
              if (v471 == v474)
                goto LABEL_770;
            }
LABEL_769:
            v473 = v655[0] + ((unint64_t)v656 << 6);
          }
LABEL_770:
          v608 = *(llvm::Value **)(v473 + 56);
          sub_1C4D8AE2C((uint64_t)&v639, v661, *(_QWORD *)(v661 + 48));
          v477 = *v471;
          LOWORD(v709) = 257;
          v478 = (llvm::PHINode *)sub_1C4867E94((uint64_t)&v639, v477, 2, (uint64_t)&v705);
          sub_1C4D8AE2C((uint64_t)&v639, v659, *(_QWORD *)(v659 + 48));
          v479 = *v471;
          LOWORD(v709) = 257;
          v480 = (llvm::PHINode *)sub_1C4867E94((uint64_t)&v639, v479, (int)v670 + 2, (uint64_t)&v705);
          v596 = (llvm::Value *)v471;
          sub_1C477667C(v478, (uint64_t)v471, v662);
          sub_1C477667C(v478, (uint64_t)v480, v659);
          v626 = v478;
          sub_1C477667C(v480, (uint64_t)v478, *((uint64_t *)&v661 + 1));
          v481 = v480;
          sub_1C477667C(v480, (uint64_t)v608, *((uint64_t *)&v662 + 1));
          if ((_DWORD)v670)
          {
            v482 = (uint64_t *)v669;
            v483 = 8 * v670;
            do
            {
              v484 = *v482++;
              sub_1C477667C(v481, (uint64_t)v626, v484);
              v483 -= 8;
            }
            while (v483);
          }
          v609 = v470;
          v485 = *((unsigned int *)v470 + 4);
          if ((_DWORD)v485)
          {
            v486 = (llvm::User **)*((_QWORD *)v470 + 1);
            v487 = 8 * v485;
            do
            {
              v488 = *v486++;
              llvm::User::replaceUsesOfWith(v488, v596, v626);
              v487 -= 8;
            }
            while (v487);
          }
          v470 = v588;
          if ((llvm::Value *)((char *)v609 + 56) != v588)
          {
            v470 = (llvm::Value *)((char *)v609 + 56);
            while ((*(_QWORD *)v470 | 0x1000) == 0xFFFFFFFFFFFFF000)
            {
              v470 = (llvm::PHINode *)((char *)v470 + 56);
              if (v470 == v588)
              {
                v470 = v588;
                break;
              }
            }
          }
          if (v470 == v580)
            break;
          continue;
        }
      }
      if (v570)
      {
        v489 = 56 * v570;
        v490 = v574 + 24;
        do
        {
          if ((*(v490 - 3) | 0x1000) != 0xFFFFFFFFFFFFF000)
          {
            v491 = (_QWORD *)*(v490 - 2);
            if (v490 != v491)
              free(v491);
          }
          v490 += 7;
          v489 -= 56;
        }
        while (v489);
      }
      MEMORY[0x1CAA32FB4](v574, 8);
      v492 = v638;
      v494 = (_QWORD **)v638[1];
      v493 = (char *)v638[2];
      v495 = *v494;
      v496 = v493 - (char *)(v494 + 1);
      if (v493 != (char *)(v494 + 1))
        memmove((void *)v638[1], v494 + 1, v493 - (char *)(v494 + 1));
      v492[2] = (char *)v494 + v496;
      *v495 = 0;
      if ((_DWORD)v664)
      {
        v497 = (uint64_t *)v663;
        v498 = 8 * v664;
        do
        {
          v499 = *v497++;
          llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::removeBlockFromLoop((uint64_t)v638, v499);
          v498 -= 8;
        }
        while (v498);
      }
      if ((_DWORD)v673)
      {
        v500 = (uint64_t *)v672;
        v627 = (llvm::PHINode *)((char *)v672 + 8 * v673);
        do
        {
          v501 = *v500;
          v502 = v638;
          v504 = (uint64_t *)v638[5];
          v503 = v638[6];
          if ((unint64_t)v504 >= v503)
          {
            v506 = (llvm::PHINode *)v638[4];
            v507 = ((char *)v504 - (char *)v506) >> 3;
            v508 = v507 + 1;
            if ((unint64_t)(v507 + 1) >> 61)
              goto LABEL_910;
            v509 = v503 - (_QWORD)v506;
            if (v509 >> 2 > v508)
              v508 = v509 >> 2;
            if ((unint64_t)v509 >= 0x7FFFFFFFFFFFFFF8)
              v508 = 0x1FFFFFFFFFFFFFFFLL;
            v610 = v508;
            if (v508)
            {
              v589 = (llvm::PHINode *)v638[4];
              v597 = (llvm::SmallPtrSetImplBase *)*v500;
              if (v508 >> 61)
                goto LABEL_911;
              v510 = (char *)operator new(8 * v508);
              v501 = (uint64_t)v597;
              v506 = v589;
            }
            else
            {
              v510 = 0;
            }
            v511 = (uint64_t *)&v510[8 * v507];
            *v511 = v501;
            v505 = v511 + 1;
            if (v504 != (uint64_t *)v506)
            {
              do
              {
                v512 = *--v504;
                *--v511 = v512;
              }
              while (v504 != (uint64_t *)v506);
              v504 = (uint64_t *)v502[4];
            }
            v502[4] = v511;
            v502[5] = v505;
            v502[6] = &v510[8 * v610];
            if (v504)
            {
              v513 = v504;
              v514 = v501;
              operator delete(v513);
              v501 = v514;
            }
          }
          else
          {
            *v504 = v501;
            v505 = v504 + 1;
          }
          v502[5] = v505;
          sub_1C4774094((llvm::SmallPtrSetImplBase *)(v502 + 7), v501);
          ++v500;
        }
        while (v500 != (uint64_t *)v627);
      }
      v515 = v638;
      v516 = v659;
      v518 = (llvm::PHINode *)v638[5];
      v517 = v638[6];
      if ((unint64_t)v518 >= v517)
      {
        v549 = (llvm::PHINode *)v638[4];
        v550 = (v518 - v549) >> 3;
        v551 = v550 + 1;
        if ((unint64_t)(v550 + 1) >> 61)
LABEL_910:
          abort();
        v552 = v517 - (_QWORD)v549;
        if (v552 >> 2 > v551)
          v551 = v552 >> 2;
        if ((unint64_t)v552 >= 0x7FFFFFFFFFFFFFF8)
          v553 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v553 = v551;
        if (v553)
        {
          v629 = (llvm::PHINode *)v638[4];
          if (v553 >> 61)
LABEL_911:
            sub_1C4764EE4();
          v613 = (llvm::Value *)v553;
          v554 = (char *)operator new(8 * v553);
          v553 = (unint64_t)v613;
          v549 = v629;
        }
        else
        {
          v554 = 0;
        }
        v555 = (uint64_t *)&v554[8 * v550];
        *v555 = v516;
        v519 = v555 + 1;
        if (v518 != v549)
        {
          do
          {
            v556 = *((_QWORD *)v518 - 1);
            v518 = (llvm::PHINode *)((char *)v518 - 8);
            *--v555 = v556;
          }
          while (v518 != v549);
          v518 = (llvm::PHINode *)v515[4];
        }
        v515[4] = v555;
        v515[5] = v519;
        v515[6] = &v554[8 * v553];
        if (v518)
          operator delete(v518);
      }
      else
      {
        *(_QWORD *)v518 = v659;
        v519 = (_QWORD *)((char *)v518 + 8);
      }
      v515[5] = v519;
      sub_1C4774094((llvm::SmallPtrSetImplBase *)(v515 + 7), v516);
      v520 = (llvm::PHINode *)*v638;
      if (*v638)
      {
        do
        {
          v628 = v520;
          if ((_DWORD)v673)
          {
            v521 = (uint64_t *)v672;
            v598 = (llvm::PHINode *)((char *)v520 + 56);
            v611 = (llvm::Value *)((char *)v672 + 8 * v673);
            do
            {
              v522 = *v521;
              v524 = (uint64_t *)*((_QWORD *)v520 + 5);
              v523 = *((_QWORD *)v520 + 6);
              if ((unint64_t)v524 >= v523)
              {
                v526 = (_QWORD *)*((_QWORD *)v520 + 4);
                v527 = v524 - v526;
                v528 = v527 + 1;
                if ((unint64_t)(v527 + 1) >> 61)
                  goto LABEL_910;
                v529 = v523 - (_QWORD)v526;
                if (v529 >> 2 > v528)
                  v528 = v529 >> 2;
                if ((unint64_t)v529 >= 0x7FFFFFFFFFFFFFF8)
                  v528 = 0x1FFFFFFFFFFFFFFFLL;
                v590 = (llvm::PHINode *)v528;
                if (v528)
                {
                  v581 = v526;
                  if (v528 >> 61)
                    goto LABEL_911;
                  v530 = (char *)operator new(8 * v528);
                  v526 = v581;
                }
                else
                {
                  v530 = 0;
                }
                v531 = (uint64_t *)&v530[8 * v527];
                *v531 = v522;
                v525 = v531 + 1;
                if (v524 == v526)
                {
                  v534 = v628;
                  v532 = v590;
                }
                else
                {
                  v532 = v590;
                  do
                  {
                    v533 = *--v524;
                    *--v531 = v533;
                  }
                  while (v524 != v526);
                  v534 = v628;
                  v524 = (uint64_t *)*((_QWORD *)v628 + 4);
                }
                *((_QWORD *)v534 + 4) = v531;
                *((_QWORD *)v534 + 5) = v525;
                *((_QWORD *)v534 + 6) = &v530[8 * (_QWORD)v532];
                if (v524)
                  operator delete(v524);
              }
              else
              {
                *v524 = v522;
                v525 = v524 + 1;
              }
              *((_QWORD *)v628 + 5) = v525;
              v520 = v628;
              sub_1C4774094(v598, v522);
              ++v521;
            }
            while (v521 != (uint64_t *)v611);
          }
          v535 = v659;
          v537 = (_QWORD *)*((_QWORD *)v520 + 5);
          v536 = *((_QWORD *)v520 + 6);
          if ((unint64_t)v537 >= v536)
          {
            v539 = (_QWORD *)*((_QWORD *)v520 + 4);
            v540 = v537 - v539;
            v541 = v540 + 1;
            if ((unint64_t)(v540 + 1) >> 61)
              goto LABEL_910;
            v542 = v536 - (_QWORD)v539;
            if (v542 >> 2 > v541)
              v541 = v542 >> 2;
            if ((unint64_t)v542 >= 0x7FFFFFFFFFFFFFF8)
              v541 = 0x1FFFFFFFFFFFFFFFLL;
            v612 = (llvm::Value *)v541;
            if (v541)
            {
              if (v541 >> 61)
                goto LABEL_911;
              v543 = v539;
              v544 = (char *)operator new(8 * v541);
              v539 = v543;
            }
            else
            {
              v544 = 0;
            }
            v545 = (uint64_t *)&v544[8 * v540];
            *v545 = v535;
            v538 = v545 + 1;
            if (v537 == v539)
            {
              v546 = v612;
              v520 = v628;
            }
            else
            {
              v546 = v612;
              v520 = v628;
              do
              {
                v547 = *--v537;
                *--v545 = v547;
              }
              while (v537 != v539);
              v537 = (_QWORD *)*((_QWORD *)v628 + 4);
            }
            *((_QWORD *)v520 + 4) = v545;
            *((_QWORD *)v520 + 5) = v538;
            *((_QWORD *)v520 + 6) = &v544[8 * (_QWORD)v546];
            if (v537)
              operator delete(v537);
          }
          else
          {
            *v537 = v659;
            v538 = v537 + 1;
          }
          *((_QWORD *)v520 + 5) = v538;
          sub_1C4774094((llvm::PHINode *)((char *)v520 + 56), v535);
          v520 = *(llvm::PHINode **)v520;
        }
        while (v520);
      }
      v30 = v630;
      if (*v631)
      {
        v548 = v678;
        if (v678 >= (unint64_t)HIDWORD(v678))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v677, (uint64_t)v679, v678 + 1, 8);
          v548 = v678;
        }
        *((_QWORD *)v677 + v548) = v631;
        LODWORD(v678) = v678 + 1;
      }
      v614 = 1;
LABEL_202:
      MEMORY[0x1CAA32FB4](v675[0], 8);
      if (v672 != v674)
        free(v672);
      if (v669 != v671)
        free(v669);
      if (v666 != v668)
        free(v666);
      if (v663 != v665)
        free(v663);
      if (v658)
      {
        sub_1C4E43068((uint64_t)v657);
        MEMORY[0x1CAA32FB4](v657[0], 8);
        v658 = 0;
      }
      v108 = (_QWORD *)v655[0];
      if (v656)
      {
        v109 = v655[0] + ((unint64_t)v656 << 6);
        do
        {
          v110 = v108[3];
          if ((v110 | 0x1000) != 0xFFFFFFFFFFFFF000)
          {
            v111 = v108[7];
            if (v111)
            {
              if (v111 != -8192 && v111 != -4096)
              {
                v112 = v108[5] & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)v112 = v108[6];
                v113 = (unint64_t *)v108[6];
                if (v113)
                {
                  *v113 = *v113 & 7 | v112;
                }
                else
                {
                  v114 = v108[7];
                  v115 = ***(int32x2_t ****)v114;
                  v116 = (unint64_t)v115[303];
                  if (v116 <= v112)
                  {
                    v117 = v115[305].u32[0];
                    if (v116 + 16 * v117 > v112)
                    {
                      v118 = v117 - 1;
                      LODWORD(v119) = v118 & ((v114 >> 4) ^ (v114 >> 9));
                      v120 = (uint64_t *)(v116 + 16 * v119);
                      v121 = *v120;
                      if (v114 == *v120)
                      {
LABEL_226:
                        *v120 = -8192;
                        v115[304] = vadd_s32(v115[304], (int32x2_t)0x1FFFFFFFFLL);
                        v114 = v108[7];
                      }
                      else
                      {
                        v122 = 1;
                        while (v121 != -4096)
                        {
                          v123 = v119 + v122++;
                          v119 = v123 & v118;
                          v121 = *(_QWORD *)(v116 + 16 * v119);
                          if (v114 == v121)
                          {
                            v120 = (uint64_t *)(v116 + 16 * v119);
                            goto LABEL_226;
                          }
                        }
                      }
                      *(_BYTE *)(v114 + 17) &= ~1u;
                    }
                  }
                }
                v110 = v108[3];
              }
            }
          }
          if (v110 != -4096 && v110 != -8192 && v110 != 0)
          {
            v125 = v108[1] & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v125 = v108[2];
            v126 = (unint64_t *)v108[2];
            if (v126)
            {
              *v126 = *v126 & 7 | v125;
            }
            else
            {
              v127 = v108[3];
              v128 = ***(int32x2_t ****)v127;
              v129 = (unint64_t)v128[303];
              if (v129 <= v125)
              {
                v130 = v128[305].u32[0];
                if (v129 + 16 * v130 > v125)
                {
                  v131 = v130 - 1;
                  LODWORD(v132) = v131 & ((v127 >> 4) ^ (v127 >> 9));
                  v133 = (uint64_t *)(v129 + 16 * v132);
                  v134 = *v133;
                  if (v127 == *v133)
                  {
LABEL_245:
                    *v133 = -8192;
                    v128[304] = vadd_s32(v128[304], (int32x2_t)0x1FFFFFFFFLL);
                    v127 = v108[3];
                  }
                  else
                  {
                    v135 = 1;
                    while (v134 != -4096)
                    {
                      v136 = v132 + v135++;
                      v132 = v136 & v131;
                      v134 = *(_QWORD *)(v129 + 16 * v132);
                      if (v127 == v134)
                      {
                        v133 = (uint64_t *)(v129 + 16 * v132);
                        goto LABEL_245;
                      }
                    }
                  }
                  *(_BYTE *)(v127 + 17) &= ~1u;
                }
              }
            }
          }
          v108 += 8;
        }
        while (v108 != (_QWORD *)v109);
        v108 = (_QWORD *)v655[0];
      }
      MEMORY[0x1CAA32FB4](v108, 8);
      if (v639 != v641)
        free(v639);
      v29 += 16;
    }
    while (v29 != v632);
    v19 = v678;
  }
  while ((_DWORD)v678);
LABEL_888:
  if (v677 != v679)
    free(v677);
  if (v680 != v682)
    free(v680);
  v557 = v695;
  if (v695 == v694)
  {
    v558 = 4;
    v557 = v694;
LABEL_896:
    (*(void (**)(void))(*v557 + 8 * v558))();
  }
  else if (v695)
  {
    v558 = 5;
    goto LABEL_896;
  }
  if (v692 != &v693)
    free(v692);
  if (v691 != v690)
    free(v691);
  if (v689 != v688)
    free(v689);
  if (v687 != (void *)v686[64])
    free(v687);
  if (v685[0] != v686)
    free(v685[0]);
  if ((v696[0] & 1) == 0)
    MEMORY[0x1CAA32FB4](v696[1], 8);
  return v614 & 1;
}

uint64_t sub_1C55FC814(llvm *a1)
{
  llvm::PassRegistry *v2;
  llvm::PassRegistry *v3;
  llvm::PassRegistry *v4;
  uint64_t v5;

  llvm::initializeTargetTransformInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeAssumptionCacheTrackerPass((uint64_t)a1);
  llvm::initializeLoopSimplifyPass(a1, v2);
  llvm::initializeLCSSAWrapperPassPass(a1, v3);
  llvm::initializeSCEVAAWrapperPassPass(a1, v4);
  v5 = operator new();
  *(_QWORD *)v5 = "oop No-op Analysis Pass";
  *(_QWORD *)(v5 + 8) = 23;
  *(_QWORD *)(v5 + 16) = "loop-noop-analysis";
  *(_QWORD *)(v5 + 24) = 18;
  *(_QWORD *)(v5 + 32) = &unk_1ED807D78;
  *(_WORD *)(v5 + 40) = 0;
  *(_BYTE *)(v5 + 42) = 0;
  *(_QWORD *)(v5 + 48) = 0;
  *(_QWORD *)(v5 + 56) = 0;
  *(_QWORD *)(v5 + 64) = 0;
  *(_QWORD *)(v5 + 72) = sub_1C55FC990;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v5, 1);
  return v5;
}

uint64_t sub_1C55FC8C8(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED807D78;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E8171258;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED807D80);
  if (v3 != -1)
  {
    v7[0] = sub_1C55FC814;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED807D80, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C55FC990()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C55FC8C8(v0);
}

void sub_1C55FC9BC(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C55FC9E0()
{
  return "Loop No-op Analysis Pass";
}

void *sub_1C55FC9F0(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)(a2 + 160) = 1;
  sub_1C4771E64(a2, a2, (uint64_t)llvm::AssumptionCacheTracker::ID);
  sub_1C4771E64(a2, a2, (uint64_t)&unk_1EF8F7650);
  sub_1C4771E64(a2, a2, (uint64_t)&unk_1EF8F7648);
  sub_1C4771E64(a2, a2, (uint64_t)llvm::TargetTransformInfoWrapperPass::ID);
  return sub_1C4771E64(a2, a2, (uint64_t)&llvm::SCEVAAWrapperPass::ID);
}

uint64_t sub_1C55FCA70()
{
  return 0;
}

uint64_t sub_1C55FCA78(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeFunctionGroupInfoWrapperPassPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Lower driver parameters";
  *(_QWORD *)(v2 + 8) = 23;
  *(_QWORD *)(v2 + 16) = "lower-driver-params";
  *(_QWORD *)(v2 + 24) = 19;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F3018;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C55FCBD8;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C55FCB0C(uint64_t a1, char a2)
{
  unint64_t v4;
  unint64_t v6;
  _QWORD *v7;
  _QWORD v8[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8F3018;
  *(_DWORD *)(a1 + 24) = 4;
  *(_QWORD *)a1 = &off_1E81712F8;
  *(_BYTE *)(a1 + 48) = a2;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v6 = qword_1ED830BC0[0];
  v4 = atomic_load(&qword_1ED8319F8);
  if (v4 != -1)
  {
    v8[0] = sub_1C55FCA78;
    v8[1] = &v6;
    v7 = v8;
    std::__call_once(&qword_1ED8319F8, &v7, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C55FCBD8()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C55FCB0C(v0, 0);
}

void sub_1C55FCC08(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C55FCC2C(uint64_t a1, llvm::AnalysisUsage *a2)
{
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
  llvm::AnalysisUsage::setPreservesCFG(a2);
}

BOOL sub_1C55FCC70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  llvm::DataLayout *v8;
  void **v9;
  void *v10;
  int v11;
  int v12;
  char *v13;
  char *v14;
  unsigned int *v15;
  uint64_t v16;
  llvm::GlobalVariable *v17;
  uint64_t v18;
  llvm::GlobalVariable **v19;
  llvm::GlobalVariable *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  llvm::GlobalVariable **v26;
  llvm::GlobalVariable *v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  BOOL v32;
  int v34;
  char *v35;
  void **v36;
  char *v37;
  uint64_t v38;
  char *v39;
  int v40;
  uint64_t v41;
  char *v42;
  uint64_t v43;
  llvm::GlobalVariable **v44;
  int v45;
  BOOL v46;
  unsigned int v47;
  const char *v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int8 *v51;
  _QWORD **v52;
  unint64_t v53;
  _QWORD **v54;
  int v55;
  uint64_t v56;
  int v57;
  unsigned __int8 *v58;
  unsigned __int8 *v59;
  llvm::GlobalVariable **v60;
  llvm::GlobalVariable *v61;
  uint64_t v62;
  _QWORD *v63;
  unsigned int v64;
  uint64_t (*v65)();
  unsigned int v66;
  uint64_t v67;
  unsigned int v68;
  int v69;
  uint64_t k;
  uint64_t (*v71)();
  int v72;
  _QWORD *v73;
  unsigned int v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t v79;
  _QWORD *v80;
  _QWORD *v81;
  uint64_t i;
  uint64_t j;
  int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  _BOOL4 v93;
  int v94;
  int v96;
  int v97;
  _BOOL4 v99;
  uint64_t v100;
  char *v101;
  char *v102;
  char *v103;
  __int128 v104;
  char *v105;
  int v106;
  int v107;
  int v108;
  int v109;
  char *v110;
  uint64_t m;
  uint64_t v112;
  unint64_t v113;
  char *v114;
  void **v115;
  unsigned int v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  uint64_t n;
  uint64_t v121;
  uint64_t v122;
  char *v123;
  char *v124;
  char *v125;
  char *v126;
  int v127;
  _BYTE *v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  char *v132;
  unsigned int v133;
  uint64_t v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  unsigned int v138;
  unsigned int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  llvm::DataLayout *v143;
  uint64_t *v144;
  uint64_t *v145;
  unsigned int v146;
  uint64_t v147;
  llvm::PointerType *v148;
  _DWORD *v149;
  uint64_t v150;
  _BYTE *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  uint64_t v156;
  int v157;
  unsigned int v158;
  _QWORD *v159;
  uint64_t v160;
  _QWORD *v161;
  int v162;
  BOOL v163;
  unsigned int v164;
  uint64_t v165;
  uint64_t v166;
  _QWORD *v167;
  uint64_t v168;
  uint64_t v169;
  _QWORD *v170;
  _QWORD *v171;
  uint64_t v172;
  uint64_t v173;
  _QWORD *v174;
  unsigned __int8 *v175;
  uint64_t v176;
  _QWORD *v177;
  uint64_t v178;
  unsigned int *v179;
  uint64_t v180;
  _QWORD *v181;
  uint64_t v182;
  _QWORD *v183;
  unint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t *v187;
  uint64_t v188;
  uint64_t v189;
  _DWORD *v190;
  llvm::ValueAsMetadata *v191;
  llvm::PointerType *v192;
  llvm::Value *v193;
  llvm::ValueAsMetadata *v194;
  llvm::Value *v195;
  uint64_t v196;
  int v197;
  uint64_t v198;
  int v199;
  unsigned int v200;
  llvm::ValueAsMetadata **v201;
  llvm::ValueAsMetadata *v202;
  uint64_t v203;
  uint64_t *v204;
  uint64_t v205;
  uint64_t v206;
  _QWORD *v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  unsigned __int8 *v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  void *Impl;
  uint64_t v217;
  uint64_t v218;
  unsigned __int8 *v219;
  unsigned __int8 **v220;
  void *v221;
  int v222;
  char *v223;
  int v224;
  unsigned int v225;
  char *v226;
  void *v227;
  char *v228;
  int v229;
  BOOL v230;
  unsigned int v231;
  char *v232;
  void *v233;
  uint64_t *v234;
  uint64_t v235;
  void (**v236)(void);
  unsigned int v237;
  uint64_t v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  _QWORD *v242;
  uint64_t v243;
  unsigned __int8 *v244;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  int v248;
  BOOL v249;
  int v250;
  uint64_t *v251;
  uint64_t (**v252)();
  uint64_t *v253;
  uint64_t v254;
  void (**v255)(void);
  void (**v256)(void);
  uint64_t *v257;
  uint64_t v258;
  char *v259;
  llvm::ValueAsMetadata **v260;
  int v261;
  BOOL v262;
  unsigned int v263;
  llvm::ValueAsMetadata **v264;
  llvm::ValueAsMetadata *v265;
  uint64_t v266;
  char *v267;
  uint64_t v268;
  unint64_t v269;
  _QWORD *v270;
  uint64_t v271;
  uint64_t v272;
  void **v273;
  uint64_t v274;
  void *v275;
  uint64_t v276;
  char *v277;
  char *v278;
  _QWORD *v279;
  uint64_t v280;
  uint64_t v281;
  char *v282;
  uint64_t v283;
  _QWORD *v284;
  _QWORD *v285;
  uint64_t v286;
  int v287;
  int v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  int v292;
  uint64_t v293;
  unsigned int v294;
  uint64_t *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  BOOL v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  BOOL v305;
  uint64_t v306;
  uint64_t v307;
  _QWORD *v308;
  unsigned __int8 *v309;
  _QWORD *v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t *v313;
  _QWORD *v314;
  uint64_t v315;
  char *AsInstruction;
  unint64_t v317;
  uint64_t v318;
  unint64_t v319;
  char **v320;
  int v321;
  char *v322;
  char *v323;
  uint64_t v324;
  char *v325;
  char *v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  llvm::ValueSymbolTable *v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  _QWORD *v334;
  unsigned __int8 *v335;
  uint64_t v336;
  uint64_t *v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  char *v341;
  int v342;
  uint64_t NamedMetadata;
  _QWORD **v344;
  const llvm::APInt *v345;
  uint64_t v346;
  char *v347;
  uint64_t v348;
  void **v349;
  void **v350;
  uint64_t v351;
  unsigned int *v352;
  unsigned int v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  unsigned int *v358;
  unsigned int v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  uint64_t *v363;
  _QWORD *v364;
  uint64_t v365;
  unsigned __int8 *v366;
  uint64_t v367;
  llvm::Value *v368;
  llvm::ValueAsMetadata *v369;
  const llvm::APInt *v370;
  uint64_t v371;
  llvm::ConstantInt *v372;
  unsigned int v373;
  unint64_t v374;
  llvm::Value *v375;
  llvm::ValueHandleBase *v376;
  const llvm::APInt *v377;
  unint64_t v378;
  llvm::ConstantInt *v379;
  unsigned int v380;
  unint64_t v381;
  llvm::Value *v382;
  llvm::ValueHandleBase *v383;
  void *v384;
  uint64_t v385;
  uint64_t v386;
  unsigned __int8 *v387;
  unsigned __int8 **v388;
  llvm::Value *v389;
  llvm::ValueAsMetadata *v390;
  _QWORD *v391;
  uint64_t v392;
  uint64_t v393;
  llvm::ConstantInt *v394;
  unsigned int v395;
  unint64_t v396;
  llvm::Value *v397;
  llvm::ValueHandleBase *v398;
  const llvm::APInt *v399;
  uint64_t v400;
  llvm::ConstantInt *v401;
  unsigned int v402;
  unint64_t v403;
  llvm::Value *v404;
  llvm::ValueHandleBase *v405;
  const llvm::APInt *v406;
  uint64_t v407;
  llvm::ConstantInt *v408;
  unsigned int v409;
  unint64_t v410;
  llvm::Value *v411;
  llvm::ValueHandleBase *v412;
  const llvm::APInt *v413;
  unint64_t v414;
  llvm::ConstantInt *v415;
  unsigned int v416;
  unint64_t v417;
  llvm::Value *v418;
  llvm::ValueHandleBase *v419;
  uint64_t v420;
  uint64_t v421;
  void *v422;
  unsigned __int8 *v423;
  unsigned __int8 *v424;
  uint64_t v425;
  uint64_t v426;
  unsigned __int8 *v427;
  unsigned __int8 **v428;
  unsigned __int8 *v429;
  unsigned __int8 *v430;
  uint64_t v431;
  _BYTE *v432;
  uint64_t v433;
  const llvm::APInt *v434;
  uint64_t v435;
  llvm::ConstantInt *v436;
  unsigned int v437;
  unint64_t v438;
  llvm::Value *v439;
  llvm::ValueHandleBase *v440;
  const llvm::APInt *v441;
  unint64_t v442;
  llvm::ConstantInt *v443;
  unsigned int v444;
  unint64_t v445;
  llvm::Value *v446;
  llvm::ValueHandleBase *v447;
  unsigned __int8 *v448;
  uint64_t v449;
  uint64_t v450;
  _QWORD *v451;
  uint64_t v452;
  BOOL v453;
  uint64_t v454;
  _BYTE *v455;
  uint64_t v456;
  const llvm::APInt *v457;
  uint64_t v458;
  llvm::ConstantInt *v459;
  unsigned int v460;
  unint64_t v461;
  llvm::Value *v462;
  llvm::ValueHandleBase *v463;
  const llvm::APInt *v464;
  unint64_t v465;
  llvm::ConstantInt *v466;
  unsigned int v467;
  unint64_t v468;
  llvm::Value *v469;
  llvm::ValueHandleBase *v470;
  unsigned __int8 *v471;
  uint64_t v472;
  uint64_t v473;
  _QWORD *v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t v477;
  unsigned __int8 *v478;
  uint64_t v479;
  llvm::ValueAsMetadata **v480;
  uint64_t v481;
  unsigned __int8 *v482;
  unsigned __int8 *v483;
  char *v484;
  uint64_t v485;
  const llvm::APInt *v486;
  llvm::ConstantInt *v487;
  unsigned int v488;
  unint64_t v489;
  llvm::Value *v490;
  llvm::ValueHandleBase *v491;
  const llvm::APInt *v492;
  uint64_t v493;
  llvm::ConstantInt *v494;
  unsigned int v495;
  unint64_t v496;
  llvm::Value *v497;
  llvm::ValueHandleBase *v498;
  const llvm::APInt *v499;
  unint64_t v500;
  llvm::ConstantInt *v501;
  unsigned int v502;
  unint64_t v503;
  llvm::Value *v504;
  llvm::ValueHandleBase *v505;
  unsigned __int8 *v506;
  uint64_t v507;
  uint64_t v508;
  _QWORD *v509;
  char *v510;
  uint64_t v511;
  uint64_t v512;
  char *v513;
  char *v514;
  char *v515;
  char *v516;
  uint64_t v518;
  _BOOL4 v519;
  char *v520;
  int v521;
  int v522;
  char *v523;
  uint64_t inserted;
  _QWORD *v525;
  _QWORD *v526;
  llvm::DataLayout *v527;
  uint64_t **v528;
  char *v529;
  uint64_t v530;
  char *v531;
  uint64_t *v532;
  uint64_t v533;
  int64x2_t v534;
  int64x2_t v535;
  int64x2_t v536;
  unsigned int v537;
  char *v538;
  uint64_t v539;
  _QWORD *v540;
  unint64_t v541;
  uint64_t v542[2];
  int v543;
  void *__p;
  char *v545;
  uint64_t v546;
  std::string __dst;
  void *v548[2];
  _DWORD v549[74];
  void *v550;
  _OWORD v551[2];
  void *v552;
  uint64_t v553;
  _BYTE v554[32];
  void *v555;
  uint64_t v556;
  _BYTE v557[1408];
  void *v558;
  uint64_t v559;
  _DWORD v560[6];
  void *v561;
  llvm::GlobalVariable *v562;
  uint64_t v563;
  int64x2_t v564;
  int64x2_t v565;
  void *v566;
  uint64_t v567;
  _BYTE v568[32];
  int v569;
  void *v570[2];
  uint64_t v571;
  void *v572[2];
  _BYTE v573[16];
  __int16 v574;
  _BYTE v575[24];
  int64x2_t v576;
  int64x2_t v577;
  void *v578;
  uint64_t v579;
  _DWORD v580[10];
  void *v581[2];
  uint64_t v582;
  void *v583[2];
  _WORD v584[576];
  _QWORD v585[3];
  _QWORD *v586;
  _QWORD v587[2];
  int v588;
  _QWORD *v589;
  void *v590;
  uint64_t v591;
  _QWORD *v592;
  _QWORD *v593;
  uint64_t *v594;
  _QWORD *v595;
  uint64_t (**v596)();
  uint64_t v597;
  _QWORD *v598;
  unsigned __int8 **v599;
  uint64_t *v600;
  _QWORD *v601;
  uint64_t v602;

  v4 = MEMORY[0x1E0C80A78](a1, a2, a3, a4);
  v6 = v5;
  v7 = v4;
  v602 = *MEMORY[0x1E0C80C00];
  v8 = (llvm::DataLayout *)(v5 + 272);
  *(_QWORD *)(v4 + 32) = v5 + 272;
  v9 = **(void ****)(v4 + 8);
  do
  {
    v10 = *v9;
    v9 += 2;
  }
  while (v10 != &llvm::FunctionGroupInfoWrapperPass::ID);
  v539 = *(_QWORD *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v9 - 1) + 96))(*(v9 - 1), &llvm::FunctionGroupInfoWrapperPass::ID)+ 32);
  if (*(char *)(v6 + 239) < 0)
    sub_1C47EBC30(&__dst, *(void **)(v6 + 216), *(_QWORD *)(v6 + 224));
  else
    __dst = *(std::string *)(v6 + 216);
  if (!std::string::compare(&__dst, 0, 4uLL, "agx1"))
  {
    v11 = 27;
  }
  else if (!std::string::compare(&__dst, 0, 4uLL, "agx2"))
  {
    v11 = 28;
  }
  else if (!std::string::compare(&__dst, 0, 4uLL, "agx3"))
  {
    v11 = 29;
  }
  else
  {
    v11 = 0;
  }
  v527 = v8;
  *(_DWORD *)(v7 + 40) = v11;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    v11 = *(_DWORD *)(v7 + 40);
  }
  if (v11 == 29)
    v12 = 8;
  else
    v12 = 4;
  *(_DWORD *)(v7 + 44) = v12;
  v555 = v557;
  v556 = 0x800000000;
  v542[0] = 0;
  v542[1] = 0;
  v543 = 0;
  v545 = 0;
  v546 = 0;
  __p = 0;
  sub_1C5E9D34C(v6, (uint64_t)v542);
  sub_1C5E9D674(v6, (uint64_t)v542, 0);
  v530 = v7;
  v522 = *(unsigned __int8 *)(v7 + 48);
  v559 = 0;
  v558 = 0;
  v560[0] = 0;
  *(_QWORD *)v575 = &v575[16];
  *(_QWORD *)&v575[8] = 0xA00000000;
  v587[1] = 0;
  v587[0] = 0;
  v588 = 0;
  sub_1C5EA6408(v6, (uint64_t)&v558, (uint64_t)v575, (uint64_t)v587);
  v14 = (char *)__p;
  v13 = v545;
  v528 = (uint64_t **)v6;
  if (__p == v545)
    goto LABEL_243;
  v534 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  do
  {
    v15 = (unsigned int *)*((_QWORD *)v14 + 1);
    v562 = 0;
    v561 = 0;
    v563 = 1;
    v564 = v534;
    v565 = v534;
    v566 = v568;
    v567 = 0x400000000;
    v569 = 0;
    v570[0] = &v571;
    v570[1] = (void *)0x100000000;
    v572[0] = v573;
    v572[1] = (void *)0x200000000;
    v574 = 0;
    v16 = *(_QWORD *)&v15[-2 * v15[2]];
    if (!v16)
      goto LABEL_36;
    v17 = *(llvm::GlobalVariable **)(v16 + 128);
    v562 = v17;
    if (v560[0])
    {
      v18 = ((v17 >> 4) ^ (v17 >> 9)) & (v560[0] - 1);
      v19 = (llvm::GlobalVariable **)((char *)v558 + 64 * v18);
      v20 = *v19;
      if (v17 == *v19)
      {
LABEL_22:
        if ((_DWORD)v18 != v560[0])
        {
          sub_1C498C654((uint64_t)v570, (uint64_t)(v19 + 1));
          sub_1C498C654((uint64_t)v572, (uint64_t)(v19 + 4));
        }
      }
      else
      {
        v96 = 1;
        while (v20 != (llvm::GlobalVariable *)-4096)
        {
          v97 = v18 + v96++;
          v18 = v97 & (v560[0] - 1);
          v20 = (llvm::GlobalVariable *)*((_QWORD *)v558 + 8 * (unint64_t)v18);
          if (v17 == v20)
          {
            v19 = (llvm::GlobalVariable **)((char *)v558 + 64 * v18);
            goto LABEL_22;
          }
        }
      }
    }
    if ((*(_DWORD *)(*(_QWORD *)v17 + 8) & 0xFFFFFF00) != 0x200 || (*((_BYTE *)v17 + 34) & 0x40) == 0)
      goto LABEL_36;
    v21 = ***(_QWORD ***)v17;
    v548[0] = v17;
    v22 = *(_DWORD *)(v21 + 2520);
    if (v22)
    {
      v23 = *(_QWORD *)(v21 + 2504);
      v24 = v22 - 1;
      v25 = v24 & ((v17 >> 4) ^ (v17 >> 9));
      v26 = (llvm::GlobalVariable **)(v23 + 24 * v25);
      v27 = *v26;
      if (*v26 == v17)
        goto LABEL_28;
      v44 = 0;
      v45 = 1;
      while (v27 != (llvm::GlobalVariable *)-4096)
      {
        if (v44)
          v46 = 0;
        else
          v46 = v27 == (llvm::GlobalVariable *)-8192;
        if (v46)
          v44 = v26;
        v47 = v25 + v45++;
        v25 = v47 & v24;
        v26 = (llvm::GlobalVariable **)(v23 + 24 * v25);
        v27 = *v26;
        if (*v26 == v17)
          goto LABEL_28;
      }
      if (v44)
        v60 = v44;
      else
        v60 = v26;
    }
    else
    {
      v60 = 0;
    }
    v26 = (llvm::GlobalVariable **)sub_1C53D65B8(v21 + 2504, (uint64_t)v548, (uint64_t *)v548, v60);
    v61 = (llvm::GlobalVariable *)v548[0];
    v26[1] = 0;
    v26[2] = 0;
    *v26 = v61;
LABEL_28:
    if (v26[2] != (llvm::GlobalVariable *)17)
      goto LABEL_36;
    v28 = (uint64_t *)v26[1];
    v29 = *v28;
    v30 = v28[1];
    v31 = *((unsigned __int8 *)v28 + 16);
    v32 = v29 == 0x705F726576697264 && v30 == 0x726574656D617261;
    if (!v32 || v31 != 115)
      goto LABEL_36;
    sub_1C5EAB050((uint64_t)v17, v539, (uint64_t)&v563, &v574);
    v561 = v15;
    sub_1C4768AD0((uint64_t)v527, *((_QWORD *)v17 + 3));
    v50 = v49;
    if ((_DWORD)v48 == 1)
    v569 = (unint64_t)(v50 + 7) >> 3;
    v51 = (unsigned __int8 *)((_QWORD *)v561 - *((unsigned int *)v561 + 2))[1];
    if (*v51 - 4 >= 0x1F)
    {
      v62 = *((_QWORD *)v51 + 16);
      v63 = (_QWORD *)(v62 + 24);
      if (*(_DWORD *)(v62 + 32) >= 0x41u)
        v63 = (_QWORD *)*v63;
      if (*v63 == 139)
      {
        HIBYTE(v574) = 1;
        goto LABEL_36;
      }
    }
    if (!v522)
      goto LABEL_36;
    HIBYTE(v574) = 1;
    v52 = (_QWORD **)*((_QWORD *)v17 + 1);
    v596 = (uint64_t (**)())&v598;
    v597 = 0x400000000;
    if (v52)
    {
      v53 = -1;
      v54 = v52;
      do
      {
        v54 = (_QWORD **)v54[1];
        ++v53;
      }
      while (v54);
      v55 = v53 + 1;
      if (v53 >= 4)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v596, (uint64_t)&v598, v53 + 1, 8);
        v56 = v597;
        v58 = (unsigned __int8 *)v596;
        v57 = v597;
      }
      else
      {
        v56 = 0;
        v57 = 0;
        v58 = (unsigned __int8 *)&v598;
      }
      v59 = &v58[8 * v56];
      do
      {
        *(_QWORD *)v59 = v52[3];
        v59 += 8;
        v52 = (_QWORD **)v52[1];
      }
      while (v52);
    }
    else
    {
      v57 = 0;
      v55 = 0;
    }
    v64 = v57 + v55;
    LODWORD(v597) = v64;
    if (!v64)
      goto LABEL_180;
LABEL_89:
    while (1)
    {
      v65 = v596[--v64];
      LODWORD(v597) = v64;
      v66 = *((unsigned __int8 *)v65 + 16);
      if (v66 > 0x3D)
        break;
      if (v66 != 5)
      {
        if (v66 != 60)
          goto LABEL_179;
        v550 = (char *)v551 + 8;
        *(_QWORD *)&v551[0] = 0x400000000;
        v67 = *((_QWORD *)v65 + 1);
        if (v67)
        {
          v68 = 0;
          do
          {
            if (v68 >= DWORD1(v551[0]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v550, (uint64_t)v551 + 8, v68 + 1, 8);
              v68 = v551[0];
            }
            *((_QWORD *)v550 + v68) = v67;
            v68 = ++LODWORD(v551[0]);
            v67 = *(_QWORD *)(v67 + 8);
          }
          while (v67);
        }
        v72 = 0;
        v590 = &v592;
        v591 = 0x400000000;
        while (1)
        {
          if (!LODWORD(v551[0]))
          {
LABEL_169:
            if (v590 != &v592)
              free(v590);
            if (v550 != (char *)v551 + 8)
              free(v550);
            v93 = HIBYTE(v574) != 0;
            v94 = v72 & v93;
            HIBYTE(v574) = v72 & v93;
            v64 = v597;
            if (v94 != 1 || (_DWORD)v597 == 0)
              goto LABEL_180;
            goto LABEL_89;
          }
          v73 = (_QWORD *)*((_QWORD *)v550 + LODWORD(v551[0]) - 1);
          v74 = --LODWORD(v551[0]);
          v75 = v73[3];
          v76 = *(unsigned __int8 *)(v75 + 16);
          if (v76 >= 0x1C && v76 - 66 <= 0xC)
            break;
          if (v76 < 0x1C || v76 - 41 > 0x11)
            goto LABEL_146;
          if (v76 != 56)
            goto LABEL_168;
          v79 = *(_QWORD *)(v75 - 32);
          if (*(_BYTE *)(v79 + 16) != 16)
            goto LABEL_168;
          v80 = (_QWORD *)(v79 + 24);
          if (*(_DWORD *)(v79 + 32) >= 0x41u)
            v80 = (_QWORD *)*v80;
          v81 = (_QWORD *)*v80;
          if (*v80 == 0xFFFFFFFFLL || v81 == (_QWORD *)0xFFFF)
          {
            for (i = *(_QWORD *)(v75 + 8); i; i = *(_QWORD *)(i + 8))
            {
              if (v74 >= DWORD1(v551[0]))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v550, (uint64_t)v551 + 8, v74 + 1, 8);
                v74 = v551[0];
              }
              *((_QWORD *)v550 + v74) = i;
              v74 = ++LODWORD(v551[0]);
            }
            v87 = v591;
            if (v591 >= (unint64_t)HIDWORD(v591))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v590, (uint64_t)&v592, v591 + 1, 8);
              v87 = v591;
            }
            v6 = (uint64_t)v528;
            v86 = 0;
            *((_QWORD *)v590 + v87) = v75;
            LODWORD(v591) = v591 + 1;
            v85 = 2;
          }
          else
          {
            v85 = 0;
            v86 = 1;
          }
          if (v81 != (_QWORD *)0xFFFFFFFFLL && v81 != (_QWORD *)0xFFFF)
          {
LABEL_168:
            v72 = 0;
            goto LABEL_169;
          }
          if (v86)
          {
            v76 = *(unsigned __int8 *)(v75 + 16);
LABEL_146:
            if (v76 == 84)
            {
              v91 = *(_QWORD *)(v75 - 32);
              if (!v91)
                goto LABEL_168;
              if (*(_BYTE *)(v91 + 16))
                goto LABEL_168;
              if (*(_QWORD *)(v91 + 24) != *(_QWORD *)(v75 + 72))
                goto LABEL_168;
              if ((*(_BYTE *)(v91 + 33) & 0x20) == 0)
                goto LABEL_168;
              v92 = *(_DWORD *)(v91 + 36);
              if ((v92 - 1282) >= 0x190
                && (v92 - 2824) >= 0xC
                && (v92 - 1682) > 0x8B)
              {
                goto LABEL_168;
              }
              v72 = 1;
              llvm::SampleInfo::SampleInfo((uint64_t)v548, v92, 1);
              if (*(_QWORD *)(v75 - 32 * (*(_DWORD *)(v75 + 20) & 0x7FFFFFF) + 32 * v549[6]) != *v73)
                goto LABEL_168;
            }
            else
            {
              if (v76 != 89)
                goto LABEL_168;
              v88 = *(_QWORD *)(v75 + 8);
              if (v88)
              {
                v89 = v551[0];
                do
                {
                  if (v89 >= DWORD1(v551[0]))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v550, (uint64_t)v551 + 8, v89 + 1, 8);
                    v89 = v551[0];
                  }
                  *((_QWORD *)v550 + v89) = v88;
                  v89 = ++LODWORD(v551[0]);
                  v88 = *(_QWORD *)(v88 + 8);
                }
                while (v88);
              }
LABEL_153:
              v90 = v591;
              if (v591 >= (unint64_t)HIDWORD(v591))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v590, (uint64_t)&v592, v591 + 1, 8);
                v90 = v591;
              }
              *((_QWORD *)v590 + v90) = v75;
              LODWORD(v591) = v591 + 1;
            }
            v85 = 2;
          }
          if (v85 != 2)
            goto LABEL_168;
        }
        for (j = *(_QWORD *)(v75 + 8); j; j = *(_QWORD *)(j + 8))
        {
          if (v74 >= DWORD1(v551[0]))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v550, (uint64_t)v551 + 8, v74 + 1, 8);
            v74 = v551[0];
          }
          *((_QWORD *)v550 + v74) = j;
          v74 = ++LODWORD(v551[0]);
        }
        goto LABEL_153;
      }
      v69 = *((unsigned __int16 *)v65 + 9);
      if (v69 != 49 && v69 != 34)
        goto LABEL_179;
LABEL_103:
      for (k = *((_QWORD *)v65 + 1); k; k = *(_QWORD *)(k + 8))
      {
        v71 = *(uint64_t (**)())(k + 24);
        if (v64 >= HIDWORD(v597))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v596, (uint64_t)&v598, v64 + 1, 8);
          v64 = v597;
        }
        v596[v64] = v71;
        v64 = v597 + 1;
        LODWORD(v597) = v597 + 1;
      }
      if (!v64)
        goto LABEL_180;
    }
    if (v66 == 62 || v66 == 77)
      goto LABEL_103;
LABEL_179:
    HIBYTE(v574) = 0;
LABEL_180:
    if (v596 != (uint64_t (**)())&v598)
      free(v596);
LABEL_36:
    if (!v561)
      goto LABEL_48;
    if (!(_DWORD)v567)
    {
      llvm::GlobalVariable::eraseFromParent(v562);
      goto LABEL_48;
    }
    v34 = v556;
    v35 = (char *)v555;
    if (v556 < HIDWORD(v556))
    {
      v36 = &v561;
      goto LABEL_40;
    }
    v99 = v555 <= &v561 && (char *)v555 + 176 * v556 > (char *)&v561;
    v519 = v99;
    if (v99)
      v100 = 0x2E8BA2E8BA2E8BA3 * (((char *)&v561 - (_BYTE *)v555) >> 4);
    else
      v100 = -1;
    v518 = v100;
    v550 = 0;
    v101 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&v555, v556 + 1, 176, (unint64_t *)&v550);
    v35 = v101;
    v102 = (char *)v555;
    if (!(_DWORD)v556)
      goto LABEL_236;
    v520 = (char *)v555 + 176 * v556;
    v103 = v101;
    while (2)
    {
      v104 = *(_OWORD *)v102;
      *((_QWORD *)v103 + 2) = 1;
      v105 = v103 + 16;
      *(_OWORD *)v103 = v104;
      *(int64x2_t *)(v103 + 24) = v534;
      *(int64x2_t *)(v103 + 40) = v534;
      v106 = *((_DWORD *)v102 + 4);
      *((_DWORD *)v102 + 4) = *((_DWORD *)v103 + 4) & 0xFFFFFFFE | v106 & 1;
      *((_DWORD *)v103 + 4) = v106 & 0xFFFFFFFE | *((_DWORD *)v103 + 4) & 1;
      v107 = *((_DWORD *)v103 + 5);
      *((_DWORD *)v103 + 5) = *((_DWORD *)v102 + 5);
      *((_DWORD *)v102 + 5) = v107;
      v108 = *((_DWORD *)v103 + 4);
      v109 = *((_DWORD *)v102 + 4);
      if ((v108 & 1) != 0)
      {
        v108 = *((_DWORD *)v102 + 4);
        v110 = v102 + 16;
        if ((v109 & 1) != 0)
        {
          for (m = 24; m != 56; m += 8)
          {
            v112 = *(_QWORD *)&v103[m];
            *(_QWORD *)&v103[m] = *(_QWORD *)&v102[m];
            *(_QWORD *)&v102[m] = v112;
          }
          goto LABEL_202;
        }
      }
      else
      {
        v110 = v103 + 16;
        v105 = v102 + 16;
        if ((v109 & 1) == 0)
        {
          v119 = *((_QWORD *)v103 + 3);
          *((_QWORD *)v103 + 3) = *((_QWORD *)v102 + 3);
          *((_QWORD *)v102 + 3) = v119;
          LODWORD(v119) = *((_DWORD *)v103 + 8);
          *((_DWORD *)v103 + 8) = *((_DWORD *)v102 + 8);
          *((_DWORD *)v102 + 8) = v119;
          goto LABEL_202;
        }
      }
      *(_OWORD *)v548 = *(_OWORD *)(v110 + 8);
      *(_DWORD *)v110 = v108 | 1;
      for (n = 8; n != 40; n += 8)
        *(_QWORD *)&v110[n] = *(_QWORD *)&v105[n];
      *(_DWORD *)v105 &= ~1u;
      *(_OWORD *)(v105 + 8) = *(_OWORD *)v548;
      v6 = (uint64_t)v528;
LABEL_202:
      *((_QWORD *)v103 + 7) = v103 + 72;
      *((_QWORD *)v103 + 8) = 0x400000000;
      v113 = *((unsigned int *)v102 + 16);
      if ((_DWORD)v113 && v103 != v102)
      {
        v114 = (char *)*((_QWORD *)v102 + 7);
        if (v114 == v102 + 72)
        {
          v115 = (void **)(v103 + 56);
          if (v113 < 5)
          {
            v116 = *((_DWORD *)v102 + 16);
            v117 = v116;
            goto LABEL_207;
          }
          v116 = *((_DWORD *)v102 + 16);
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v103 + 56), (uint64_t)(v103 + 72), v113, 8);
          v115 = (void **)(v103 + 56);
          v117 = *((unsigned int *)v102 + 16);
          if ((_DWORD)v117)
LABEL_207:
            memcpy(*v115, *((const void **)v102 + 7), 8 * v117);
          *((_DWORD *)v103 + 16) = v116;
        }
        else
        {
          *((_QWORD *)v103 + 7) = v114;
          *((_DWORD *)v103 + 16) = v113;
          *((_DWORD *)v103 + 17) = *((_DWORD *)v102 + 17);
          *((_QWORD *)v102 + 7) = v102 + 72;
          *((_DWORD *)v102 + 17) = 0;
        }
        *((_DWORD *)v102 + 16) = 0;
      }
      v118 = *((_DWORD *)v102 + 26);
      *((_QWORD *)v103 + 14) = v103 + 128;
      *((_DWORD *)v103 + 26) = v118;
      *((_QWORD *)v103 + 15) = 0x100000000;
      if (*((_DWORD *)v102 + 30))
        sub_1C627FAA8((uint64_t)(v103 + 112), (uint64_t)(v102 + 112));
      *((_QWORD *)v103 + 17) = v103 + 152;
      *((_QWORD *)v103 + 18) = 0x200000000;
      if (*((_DWORD *)v102 + 36))
        sub_1C627FAA8((uint64_t)(v103 + 136), (uint64_t)(v102 + 136));
      *((_WORD *)v103 + 84) = *((_WORD *)v102 + 84);
      v102 += 176;
      v103 += 176;
      if (v102 != v520)
        continue;
      break;
    }
    v102 = (char *)v555;
    if ((_DWORD)v556)
    {
      v121 = 0;
      v122 = 176 * v556;
      do
      {
        v123 = &v102[v122];
        v124 = *(char **)&v102[v122 - 40];
        if (&v102[v122 - 24] != v124)
          free(v124);
        v125 = (char *)*((_QWORD *)v123 - 8);
        if (v123 - 48 != v125)
          free(v125);
        v126 = *(char **)&v102[v122 - 120];
        if (&v102[v122 - 104] != v126)
          free(v126);
        if ((v102[v122 - 160] & 1) == 0)
          MEMORY[0x1CAA32FB4](*(_QWORD *)&v102[v122 - 152], 8);
        v121 += 176;
        v102 -= 176;
      }
      while (v122 != v121);
      v102 = (char *)v555;
      v6 = (uint64_t)v528;
    }
LABEL_236:
    v127 = (int)v550;
    if (v102 != v557)
      free(v102);
    v555 = v35;
    HIDWORD(v556) = v127;
    if (v519)
      v36 = (void **)&v35[176 * v518];
    else
      v36 = &v561;
    v34 = v556;
LABEL_40:
    v37 = &v35[176 * v34];
    *(_OWORD *)v37 = *(_OWORD *)v36;
    *((_QWORD *)v37 + 2) = 1;
    *(int64x2_t *)(v37 + 24) = v534;
    *(int64x2_t *)(v37 + 40) = v534;
    sub_1C56006C4((_DWORD *)v37 + 4, (_DWORD *)v36 + 4);
    *((_QWORD *)v37 + 7) = v37 + 72;
    v38 = (uint64_t)(v37 + 56);
    *(_QWORD *)(v38 + 8) = 0x400000000;
    if (*((_DWORD *)v36 + 16))
      sub_1C61B2738(v38, (uint64_t)(v36 + 7));
    v39 = &v35[176 * v34];
    v40 = *((_DWORD *)v36 + 26);
    *((_QWORD *)v39 + 14) = v39 + 128;
    v41 = (uint64_t)(v39 + 112);
    *(_DWORD *)(v41 - 8) = v40;
    *(_QWORD *)(v41 + 8) = 0x100000000;
    if (*((_DWORD *)v36 + 30))
      sub_1C498C654(v41, (uint64_t)(v36 + 14));
    v42 = &v35[176 * v34];
    *((_QWORD *)v42 + 17) = v42 + 152;
    v43 = (uint64_t)(v42 + 136);
    *(_QWORD *)(v43 + 8) = 0x200000000;
    if (*((_DWORD *)v36 + 36))
      sub_1C498C654(v43, (uint64_t)(v36 + 17));
    *(_WORD *)&v35[176 * v34 + 168] = *((_WORD *)v36 + 84);
    LODWORD(v556) = v556 + 1;
LABEL_48:
    if (v572[0] != v573)
      free(v572[0]);
    if (v570[0] != &v571)
      free(v570[0]);
    if (v566 != v568)
      free(v566);
    if ((v563 & 1) == 0)
      MEMORY[0x1CAA32FB4](v564.i64[0], 8);
    v14 += 16;
  }
  while (v14 != v13);
LABEL_243:
  MEMORY[0x1CAA32FB4](v587[0], 4);
  v128 = *(_BYTE **)v575;
  if (*(_DWORD *)&v575[8])
  {
    v129 = 16 * *(unsigned int *)&v575[8];
    v130 = *(_QWORD *)v575 - 16;
    do
    {
      sub_1C4914448((void ***)(v130 + v129));
      v129 -= 16;
    }
    while (v129);
    v128 = *(_BYTE **)v575;
  }
  if (v128 != &v575[16])
    free(v128);
  sub_1C495C918((uint64_t)&v558);
  MEMORY[0x1CAA32FB4](v558, 8);
  v131 = v556;
  if (!(_DWORD)v556)
  {
    sub_1C5600378(v6, v542, v539);
    goto LABEL_799;
  }
  v521 = v556;
  inserted = llvm::Module::getOrInsertNamedMetadata(v6, "agx.driver_parameters_dma", 0x19uLL);
  v550 = (void *)1;
  v551[0] = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  v551[1] = v551[0];
  v552 = v554;
  v553 = 0x400000000;
  v548[0] = v549;
  v548[1] = (void *)0x2400000000;
  if (!(_DWORD)v556)
    goto LABEL_476;
  v132 = (char *)v555;
  v531 = (char *)v555 + 176 * v556;
  while (2)
  {
    llvm::Constant::removeDeadConstantUsers(*((_QWORD *)v132 + 1));
    if (!(v132[168] | v132[169]))
    {
      v133 = *(_DWORD *)(v530 + 44);
      v134 = *((unsigned int *)v132 + 16);
      if ((_DWORD)v134)
      {
        v135 = (uint64_t *)*((_QWORD *)v132 + 7);
        v136 = 8 * v134;
        do
        {
          v137 = *v135;
          v138 = sub_1C5EAC778(v539, *v135, v6);
          v139 = *((_DWORD *)v132 + 26);
          if (!(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v137 + 176))(v137, 25))
            goto LABEL_256;
          (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v137 + 128))(v575, v137, 25);
          v140 = *(_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)v575 + 32))(*(_QWORD *)v575);
          v141 = *(_QWORD *)v575;
          *(_QWORD *)v575 = 0;
          if (v141)
            (*(void (**)(uint64_t))(*(_QWORD *)v141 + 8))(v141);
          if (!v140)
LABEL_256:
            v139 += llvm::DataLayout::getPointerSize(v527, 2u);
          if (v139 > v138)
            goto LABEL_264;
          ++v135;
          v136 -= 8;
        }
        while (v136);
      }
      *(_QWORD *)v575 = &v575[16];
      *(_QWORD *)&v575[8] = 0x2000000000;
      v189 = 8;
      v561 = (void *)1;
      do
      {
        *(void **)((char *)&v561 + v189) = (void *)-4096;
        v189 += 16;
      }
      while (v189 != 520);
      v190 = operator new(0x78uLL);
      v191 = (llvm::ValueAsMetadata *)(v190 + 8);
      v190[13] = v190[13] & 0x38000000 | 1;
      *(_QWORD *)v190 = 0;
      *((_QWORD *)v190 + 1) = 0;
      *((_QWORD *)v190 + 2) = 0;
      *((_QWORD *)v190 + 3) = v190 + 8;
      v192 = *(llvm::PointerType **)(*((_QWORD *)v132 + 1) + 24);
      v590 = "dparamcache";
      LOWORD(v594) = 259;
      llvm::GlobalVariable::GlobalVariable((uint64_t)(v190 + 8), (uint64_t)v528, v192, 1, 0, 0, (uint64_t)&v590, 0, 0, 0x100000040, 0);
      v194 = (llvm::ValueAsMetadata *)llvm::UniqueStringSaver::save(***((_QWORD ***)v190 + 4) + 2136, "driver_parameter_cached", 0x17uLL);
      v195 = v193;
      v196 = ***((_QWORD ***)v190 + 4);
      v590 = v190 + 8;
      v197 = *(_DWORD *)(v196 + 2520);
      if (v197)
      {
        v198 = *(_QWORD *)(v196 + 2504);
        v199 = v197 - 1;
        v200 = v199 & ((v191 >> 4) ^ (v191 >> 9));
        v201 = (llvm::ValueAsMetadata **)(v198 + 24 * v200);
        v202 = *v201;
        if (*v201 == v191)
          goto LABEL_319;
        v260 = 0;
        v261 = 1;
        while (v202 != (llvm::ValueAsMetadata *)-4096)
        {
          if (v260)
            v262 = 0;
          else
            v262 = v202 == (llvm::ValueAsMetadata *)-8192;
          if (v262)
            v260 = v201;
          v263 = v200 + v261++;
          v200 = v263 & v199;
          v201 = (llvm::ValueAsMetadata **)(v198 + 24 * v200);
          v202 = *v201;
          if (*v201 == v191)
            goto LABEL_319;
        }
        if (v260)
          v264 = v260;
        else
          v264 = v201;
      }
      else
      {
        v264 = 0;
      }
      v201 = (llvm::ValueAsMetadata **)sub_1C53D65B8(v196 + 2504, (uint64_t)&v590, (uint64_t *)&v590, v264);
      v265 = (llvm::ValueAsMetadata *)v590;
      v201[1] = 0;
      v201[2] = 0;
      *v201 = v265;
LABEL_319:
      v201[1] = v194;
      v201[2] = v195;
      v190[16] = (((2031616 - (__clz(v133) << 16)) & 0xFF0000) + 0x10000) | ((v195 != 0) << 22) | v190[16] & 0xFF80FFFF;
      v203 = *((unsigned int *)v132 + 16);
      v143 = v527;
      if ((_DWORD)v203)
      {
        v204 = (uint64_t *)*((_QWORD *)v132 + 7);
        v205 = 8 * v203;
        do
        {
          v206 = *v204++;
          (*(void (**)(uint64_t, llvm::ValueAsMetadata *, llvm::DataLayout *, uint64_t))(*(_QWORD *)v206 + 496))(v206, v191, v527, 5);
          v205 -= 8;
        }
        while (v205);
      }
      v558 = v560;
      v559 = 0x300000000;
      v207 = llvm::ValueAsMetadata::get(v191, v193);
      v208 = v559;
      if (v559 >= (unint64_t)HIDWORD(v559))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v558, (uint64_t)v560, v559 + 1, 8);
        v208 = v559;
      }
      *((_QWORD *)v558 + v208) = v207;
      v209 = (v559 + 1);
      LODWORD(v559) = v559 + 1;
      v210 = *(_QWORD *)v132;
      v211 = *(unsigned int *)(*(_QWORD *)v132 + 8);
      v212 = *(unsigned __int8 **)(*(_QWORD *)v132 - 8 * v211 + 8);
      if (*v212 - 4 > 0x1E)
      {
        if (v209 >= HIDWORD(v559))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v558, (uint64_t)v560, v209 + 1, 8);
          LODWORD(v209) = v559;
        }
        *((_QWORD *)v558 + v209) = v212;
        v209 = (v559 + 1);
        LODWORD(v559) = v209;
        v215 = *(_QWORD *)(v210 - 8 * *(unsigned int *)(v210 + 8) + 16);
        if (v209 >= HIDWORD(v559))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v558, (uint64_t)v560, v209 + 1, 8);
          LODWORD(v209) = v559;
        }
        *((_QWORD *)v558 + v209) = v215;
        LODWORD(v209) = v559 + 1;
        LODWORD(v559) = v559 + 1;
      }
      else if ((_DWORD)v211 != 1)
      {
        v213 = 1;
        do
        {
          v214 = *(_QWORD *)(*(_QWORD *)v132 - 8 * *(unsigned int *)(*(_QWORD *)v132 + 8) + 8 * v213);
          if (v209 >= HIDWORD(v559))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v558, (uint64_t)v560, v209 + 1, 8);
            LODWORD(v209) = v559;
          }
          *((_QWORD *)v558 + v209) = v214;
          LODWORD(v209) = v559 + 1;
          LODWORD(v559) = v559 + 1;
          ++v213;
        }
        while ((_DWORD)v211 != (_DWORD)v213);
      }
      Impl = (void *)llvm::MDTuple::getImpl(*v528, v558, v209, 0, 1);
      v590 = Impl;
      v217 = *(_QWORD *)(inserted + 48);
      v218 = *(unsigned int *)(v217 + 8);
      if (v218 >= *(_DWORD *)(v217 + 12))
      {
        sub_1C5419FD8(*(_QWORD *)(inserted + 48), (unsigned __int8 **)&v590);
      }
      else
      {
        v219 = (unsigned __int8 *)Impl;
        v220 = (unsigned __int8 **)(*(_QWORD *)v217 + 8 * v218);
        *v220 = v219;
        if (v219)
        {
          llvm::MetadataTracking::track((uint64_t)v220, v219, 2);
          LODWORD(v218) = *(_DWORD *)(v217 + 8);
        }
        *(_DWORD *)(v217 + 8) = v218 + 1;
      }
      v221 = (void *)*((_QWORD *)v132 + 1);
      v590 = v221;
      if ((v561 & 1) != 0)
      {
        v222 = 32;
        v223 = (char *)&v562;
        goto LABEL_342;
      }
      v222 = v563;
      if (!(_DWORD)v563)
      {
        v232 = 0;
        goto LABEL_355;
      }
      v223 = (char *)v562;
LABEL_342:
      v224 = v222 - 1;
      v225 = v224 & ((v221 >> 4) ^ (v221 >> 9));
      v226 = &v223[16 * v225];
      v227 = *(void **)v226;
      if (v221 != *(void **)v226)
      {
        v228 = 0;
        v229 = 1;
        while (v227 != (void *)-4096)
        {
          if (v228)
            v230 = 0;
          else
            v230 = v227 == (void *)-8192;
          if (v230)
            v228 = v226;
          v231 = v225 + v229++;
          v225 = v231 & v224;
          v226 = &v223[16 * v225];
          v227 = *(void **)v226;
          if (v221 == *(void **)v226)
            goto LABEL_356;
        }
        if (v228)
          v232 = v228;
        else
          v232 = v226;
LABEL_355:
        v226 = (char *)sub_1C55E07C8((uint64_t)&v561, (uint64_t)&v590, &v590, v232);
        *(_QWORD *)v226 = v590;
        *((_QWORD *)v226 + 1) = 0;
      }
LABEL_356:
      *((_QWORD *)v226 + 1) = v191;
      v233 = (void *)*((_QWORD *)v132 + 1);
      v596 = &off_1E8171398;
      v599 = (unsigned __int8 **)&v596;
      v594 = &v591;
      v590 = v233;
      v591 = (uint64_t)&off_1E8171398;
      sub_1C56007E8((uint64_t)v575, (char *)&v590);
      v234 = v594;
      if (v594 == &v591)
      {
        v234 = &v591;
        v235 = 4;
LABEL_360:
        (*(void (**)(void))(*v234 + 8 * v235))();
      }
      else if (v594)
      {
        v235 = 5;
        goto LABEL_360;
      }
      if (v599 == (unsigned __int8 **)&v596)
      {
        v236 = (void (**)(void))(v596 + 4);
LABEL_365:
        (*v236)();
      }
      else if (v599)
      {
        v236 = (void (**)(void))(*v599 + 40);
        goto LABEL_365;
      }
      *((_QWORD *)v132 + 1) = v191;
      v237 = *(_DWORD *)&v575[8];
      v6 = (uint64_t)v528;
      if (*(_DWORD *)&v575[8])
      {
        while (2)
        {
          v238 = *(_QWORD *)v575;
          v239 = *(_QWORD *)v575 + 40 * v237;
          v590 = *(void **)(v239 - 40);
          v240 = *(_QWORD *)(v239 - 8);
          if (v240)
          {
            if (v240 == v239 - 32)
            {
              v594 = &v591;
              (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v240 + 24))(v240, &v591);
              v237 = *(_DWORD *)&v575[8];
              v238 = *(_QWORD *)v575;
            }
            else
            {
              v594 = *(uint64_t **)(v239 - 8);
              *(_QWORD *)(v239 - 8) = 0;
            }
          }
          else
          {
            v594 = 0;
          }
          *(_DWORD *)&v575[8] = v237 - 1;
          v241 = v238 + 40 * (v237 - 1);
          v242 = *(_QWORD **)(v241 + 32);
          if (v242 == (_QWORD *)(v241 + 8))
          {
            v242 = (_QWORD *)(v241 + 8);
            v243 = 4;
            goto LABEL_372;
          }
          if (v242)
          {
            v243 = 5;
LABEL_372:
            (*(void (**)(void))(*v242 + 8 * v243))();
          }
          v244 = (unsigned __int8 *)v590;
          if (v594)
          {
            if (v594 == &v591)
            {
              v589 = v587;
              (*(void (**)(uint64_t, _QWORD *))(v591 + 24))((uint64_t)&v591, v587);
              v245 = (uint64_t)v589;
            }
            else
            {
              v245 = (*(uint64_t (**)(void))(*v594 + 16))();
              v589 = (_QWORD *)v245;
            }
            v596 = (uint64_t (**)())v244;
            if (v245)
            {
              if ((*(unsigned int (**)(uint64_t, uint64_t (***)()))(*(_QWORD *)v245 + 48))(v245, &v596))
              {
                v246 = *((_QWORD *)v590 + 1);
                if (v246)
                {
                  while (1)
                  {
                    v247 = *(_QWORD *)(v246 + 24);
                    v248 = *(unsigned __int8 *)(v247 + 16);
                    v249 = v247 && v248 == 5;
                    v250 = v249 ? *(unsigned __int16 *)(v247 + 18) : v248 - 28;
                    if (v250 <= 46)
                      break;
                    if (v250 != 47)
                    {
                      v252 = &off_1E8171428;
LABEL_393:
                      v585[0] = v252;
                      v585[1] = &v561;
                      goto LABEL_394;
                    }
                    v252 = &off_1E81714B8;
                    v585[0] = &off_1E81714B8;
LABEL_394:
                    v586 = v585;
                    v596 = (uint64_t (**)())v247;
                    v600 = &v597;
                    ((void (*)(uint64_t, _QWORD *))v252[3])((uint64_t)v585, &v597);
LABEL_395:
                    sub_1C56007E8((uint64_t)v575, (char *)&v596);
                    v253 = v600;
                    if (v600 == &v597)
                    {
                      v253 = &v597;
                      v254 = 4;
                    }
                    else
                    {
                      if (!v600)
                        goto LABEL_400;
                      v254 = 5;
                    }
                    (*(void (**)(void))(*v253 + 8 * v254))();
LABEL_400:
                    if (v586 == v585)
                    {
                      v255 = (void (**)(void))(v585[0] + 32);
                      goto LABEL_404;
                    }
                    if (v586)
                    {
                      v255 = (void (**)(void))(*v586 + 40);
LABEL_404:
                      (*v255)();
                    }
                    v246 = *(_QWORD *)(v246 + 8);
                    if (!v246)
                      goto LABEL_406;
                  }
                  if (v250 == 32)
                  {
                    v251 = (uint64_t *)operator new(0x20uLL);
                    *v251 = (uint64_t)&off_1E8171470;
                    v251[1] = (uint64_t)&v561;
                    v251[2] = (uint64_t)v528;
                    v251[3] = (uint64_t)v132;
                    v596 = (uint64_t (**)())v247;
                    v600 = v251;
                    v586 = 0;
                    goto LABEL_395;
                  }
                  v252 = &off_1E81713E0;
                  goto LABEL_393;
                }
              }
LABEL_406:
              if (v589 == v587)
              {
                v256 = (void (**)(void))(v587[0] + 32);
LABEL_410:
                (*v256)();
              }
              else if (v589)
              {
                v256 = (void (**)(void))(*v589 + 40);
                goto LABEL_410;
              }
              v257 = v594;
              if (v594 == &v591)
              {
                v257 = &v591;
                v258 = 4;
LABEL_415:
                (*(void (**)(void))(*v257 + 8 * v258))();
              }
              else if (v594)
              {
                v258 = 5;
                goto LABEL_415;
              }
              v237 = *(_DWORD *)&v575[8];
              if (!*(_DWORD *)&v575[8])
                goto LABEL_422;
              continue;
            }
          }
          else
          {
            v589 = 0;
            v596 = (uint64_t (**)())v590;
          }
          break;
        }
        sub_1C485C2F0();
      }
LABEL_422:
      if (v558 != v560)
        free(v558);
      if ((v561 & 1) == 0)
        MEMORY[0x1CAA32FB4](v562, 8);
      v259 = *(char **)v575;
      if (!*(_DWORD *)&v575[8])
      {
LABEL_427:
        if (v259 != &v575[16])
          free(v259);
        goto LABEL_429;
      }
      v266 = 40 * *(unsigned int *)&v575[8];
      while (2)
      {
        v267 = *(char **)&v259[v266 - 8];
        if (&v259[v266 - 32] == v267)
        {
          v267 = &v259[v266 - 32];
          v268 = 4;
LABEL_453:
          (*(void (**)(void))(*(_QWORD *)v267 + 8 * v268))();
        }
        else if (v267)
        {
          v268 = 5;
          goto LABEL_453;
        }
        v266 -= 40;
        if (!v266)
        {
          v259 = *(char **)v575;
          v143 = v527;
          v6 = (uint64_t)v528;
          goto LABEL_427;
        }
        continue;
      }
    }
LABEL_264:
    v142 = *((unsigned int *)v132 + 16);
    v143 = v527;
    if (!(_DWORD)v142)
      goto LABEL_429;
    v529 = v132;
    v144 = (uint64_t *)*((_QWORD *)v132 + 7);
    v145 = &v144[v142];
    v146 = ((2031616 - (__clz(*(_DWORD *)(v530 + 44)) << 16)) & 0xFF0000) + 0x10000;
    while (2)
    {
      v147 = *v144;
      if (!(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)*v144 + 176))(*v144, 25))
        goto LABEL_267;
      (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v147 + 128))(v575, v147, 25);
      v165 = *(_QWORD *)(*(uint64_t (**)(_QWORD))(**(_QWORD **)v575 + 32))(*(_QWORD *)v575);
      v166 = *(_QWORD *)v575;
      *(_QWORD *)v575 = 0;
      if (v166)
        (*(void (**)(uint64_t))(*(_QWORD *)v166 + 8))(v166);
      if (!v165)
      {
LABEL_267:
        v148 = (llvm::PointerType *)llvm::PointerType::get((llvm::PointerType *)(**v528 + 1912), (llvm::Type *)2);
        v149 = operator new(0x78uLL);
        v149[13] = v149[13] & 0x38000000 | 1;
        v150 = (uint64_t)(v149 + 8);
        *(_QWORD *)v149 = 0;
        *((_QWORD *)v149 + 1) = 0;
        *((_QWORD *)v149 + 2) = 0;
        *((_QWORD *)v149 + 3) = v149 + 8;
        *(_QWORD *)v575 = "driverparambuffer";
        v576.i16[4] = 259;
        llvm::GlobalVariable::GlobalVariable((uint64_t)(v149 + 8), (uint64_t)v528, v148, 1, 0, 0, (uint64_t)v575, 0, 0, 0x100000040, 0);
        v151 = llvm::UniqueStringSaver::save(***((_QWORD ***)v149 + 4) + 2136, "driver_param_buffer", 0x13uLL);
        v153 = v152;
        v154 = ***((_QWORD ***)v149 + 4);
        *(_QWORD *)v575 = v149 + 8;
        v155 = *(_DWORD *)(v154 + 2520);
        if (v155)
        {
          v156 = *(_QWORD *)(v154 + 2504);
          v157 = v155 - 1;
          v158 = v157 & ((v150 >> 4) ^ (v150 >> 9));
          v159 = (_QWORD *)(v156 + 24 * v158);
          v160 = *v159;
          if (*v159 == v150)
            goto LABEL_269;
          v161 = 0;
          v162 = 1;
          while (v160 != -4096)
          {
            if (v161)
              v163 = 0;
            else
              v163 = v160 == -8192;
            if (v163)
              v161 = v159;
            v164 = v158 + v162++;
            v158 = v164 & v157;
            v159 = (_QWORD *)(v156 + 24 * v158);
            v160 = *v159;
            if (*v159 == v150)
              goto LABEL_269;
          }
          if (v161)
            v167 = v161;
          else
            v167 = v159;
        }
        else
        {
          v167 = 0;
        }
        v159 = sub_1C53D65B8(v154 + 2504, (uint64_t)v575, (uint64_t *)v575, v167);
        v168 = *(_QWORD *)v575;
        v159[1] = 0;
        v159[2] = 0;
        *v159 = v168;
LABEL_269:
        v159[1] = v151;
        v159[2] = v153;
        v149[16] = v146 | ((v153 != 0) << 22) | v149[16] & 0xFF80FFFF;
        llvm::FunctionGroup::setGlobalResource(v147, 25, v150);
        v143 = v527;
        (*(void (**)(uint64_t, _DWORD *, llvm::DataLayout *, uint64_t))(*(_QWORD *)v147 + 496))(v147, v149 + 8, v527, 5);
      }
      if (++v144 != v145)
        continue;
      break;
    }
    v6 = (uint64_t)v528;
    v132 = v529;
    v169 = *((unsigned int *)v529 + 16);
    if ((_DWORD)v169)
    {
      v170 = (_QWORD *)*((_QWORD *)v529 + 7);
      v171 = &v170[v169];
      do
      {
        v172 = *v170;
        v173 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v529 - 8 * *(unsigned int *)(*(_QWORD *)v529 + 8)) + 128);
        (*(void (**)(_QWORD, uint64_t, uint64_t))(*(_QWORD *)*v170 + 144))(*v170, 15, v173);
        v174 = (_QWORD *)(*(_QWORD *)v529 - 8 * *(unsigned int *)(*(_QWORD *)v529 + 8));
        v175 = (unsigned __int8 *)v174[1];
        if (*v175 - 4 < 0x1F)
          goto LABEL_293;
        v176 = *((_QWORD *)v175 + 16);
        v177 = (_QWORD *)(v176 + 24);
        if (*(_DWORD *)(v176 + 32) >= 0x41u)
          v177 = (_QWORD *)*v177;
        if (*v177 == 139)
        {
          v178 = *(_QWORD *)(v174[2] + 128);
          v179 = (unsigned int *)(v178 + 24);
          if (*(_DWORD *)(v178 + 32) >= 0x41u)
            v179 = *(unsigned int **)v179;
          v180 = *(_QWORD *)(v174[4] + 128);
          v181 = (_QWORD *)(v180 + 24);
          if (*(_DWORD *)(v180 + 32) >= 0x41u)
            v181 = (_QWORD *)*v181;
          v182 = *v179;
          if (!LODWORD(v548[1]))
          {
            v183 = (_QWORD *)*v181;
            if (*v181)
            {
              v184 = *v181;
              if (v184 <= HIDWORD(v548[1]))
              {
                v185 = 0;
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v548, (uint64_t)v549, *v181, 8);
                v185 = LODWORD(v548[1]);
              }
              if (v184 != v185)
                bzero((char *)v548[0] + 8 * v185, 8 * (v184 - v185));
              LODWORD(v548[1]) = (_DWORD)v183;
            }
          }
          *((_QWORD *)v548[0] + v182) = v529;
          v186 = *((unsigned int *)v529 + 16);
          v143 = v527;
          if ((_DWORD)v186)
          {
            v187 = (uint64_t *)*((_QWORD *)v529 + 7);
            v188 = 8 * v186;
            do
            {
              sub_1C5600638((uint64_t)&v550, v187++);
              v188 -= 8;
            }
            while (v188);
          }
        }
        else
        {
LABEL_293:
          (*(void (**)(uint64_t, uint64_t, llvm::DataLayout *, uint64_t))(*(_QWORD *)v172 + 496))(v172, v173, v143, 6);
        }
        ++v170;
      }
      while (v170 != v171);
    }
LABEL_429:
    v132 += 176;
    if (v132 != v531)
      continue;
    break;
  }
  if (LODWORD(v548[1]))
  {
    v269 = 0;
    v535 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      *(_QWORD *)v575 = 1;
      *(int64x2_t *)&v575[8] = v535;
      v576 = v535;
      v577.i64[0] = (uint64_t)&v578;
      v577.i64[1] = 0x400000000;
      if ((_DWORD)v553)
      {
        v270 = v552;
        v271 = 8 * v553;
        do
        {
          v272 = *v270;
          if ((*(uint64_t (**)(_QWORD))(*(_QWORD *)*v270 + 120))(*v270))
          {
            v561 = (void *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v272 + 120))(v272);
            sub_1C5600638((uint64_t)v575, (uint64_t *)&v561);
          }
          ++v270;
          v271 -= 8;
        }
        while (v271);
        v273 = (void **)v577.i64[0];
        if (v577.i32[2])
        {
          v274 = 8 * v577.u32[2];
          do
          {
            v275 = *v273;
            v276 = *((_QWORD *)v548[0] + v269);
            if (v276)
              (*(void (**)(void *, _QWORD, llvm::DataLayout *, uint64_t))(*(_QWORD *)v275 + 496))(v275, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v276 - 8 * *(unsigned int *)(*(_QWORD *)v276 + 8)) + 128), v143, 6);
            else
              (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v275 + 488))(v275, 6, 8, 8);
            ++v273;
            v274 -= 8;
          }
          while (v274);
          v273 = (void **)v577.i64[0];
        }
        if (v273 != &v578)
          free(v273);
      }
      if ((v575[0] & 1) == 0)
        MEMORY[0x1CAA32FB4](*(_QWORD *)&v575[8], 8);
      ++v269;
    }
    while (v269 < LODWORD(v548[1]));
  }
LABEL_476:
  sub_1C5600378(v6, v542, v539);
  v559 = 0;
  v558 = 0;
  v560[0] = 0;
  if ((_DWORD)v556)
  {
    v277 = (char *)v555;
    v278 = (char *)v555 + 176 * v556;
    v536 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      *(_OWORD *)v575 = *(_OWORD *)v277;
      *(_QWORD *)&v575[16] = 1;
      v576 = v536;
      v577 = v536;
      sub_1C56006C4(&v575[16], (_DWORD *)v277 + 4);
      v578 = v580;
      v579 = 0x400000000;
      if (*((_DWORD *)v277 + 16))
        sub_1C61B2738((uint64_t)&v578, (uint64_t)(v277 + 56));
      v580[8] = *((_DWORD *)v277 + 26);
      v581[0] = &v582;
      v581[1] = (void *)0x100000000;
      if (*((_DWORD *)v277 + 30))
        sub_1C498C654((uint64_t)v581, (uint64_t)(v277 + 112));
      v583[0] = v584;
      v583[1] = (void *)0x200000000;
      if (*((_DWORD *)v277 + 36))
        sub_1C498C654((uint64_t)v583, (uint64_t)(v277 + 136));
      v584[8] = *((_WORD *)v277 + 84);
      if ((_DWORD)v579)
      {
        v279 = v578;
        v280 = 8 * v579;
        do
        {
          v281 = *v279;
          if (((*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v279 + 184))(*v279, 15, *(_QWORD *)&v575[8]) & 1) == 0)(*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v281 + 144))(v281, 5, *(_QWORD *)&v575[8]);
          ++v279;
          v280 -= 8;
        }
        while (v280);
      }
      if (v583[0] != v584)
        free(v583[0]);
      if (v581[0] != &v582)
        free(v581[0]);
      if (v578 != v580)
        free(v578);
      if ((v575[16] & 1) == 0)
        MEMORY[0x1CAA32FB4](v576.i64[0], 8);
      v277 += 176;
    }
    while (v277 != v278);
    v6 = (uint64_t)v528;
    if ((_DWORD)v556)
    {
      v282 = (char *)v555;
      v523 = (char *)v555 + 176 * v556;
      do
      {
        v283 = *((unsigned int *)v282 + 16);
        if ((_DWORD)v283)
        {
          v284 = (_QWORD *)*((_QWORD *)v282 + 7);
          v285 = &v284[v283];
          v525 = v285;
          do
          {
            v286 = *v284;
            if ((*(unsigned int (**)(_QWORD, uint64_t, _QWORD))(*(_QWORD *)*v284 + 184))(*v284, 15, *((_QWORD *)v282 + 1)))
            {
              v526 = v284;
              (*(void (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v286 + 144))(v286, 5, *((_QWORD *)v282 + 1));
              v287 = (**(uint64_t (***)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))v286)(v286, 8, 0, 1, 3);
              v288 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v286 + 400))(v286, *((_QWORD *)v282 + 1));
              v290 = v289;
              v291 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v286 + 336))(v286);
              v292 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v291 + 24))(v291, v290);
              v590 = &v592;
              v591 = 0x800000000;
              v293 = *(_QWORD *)(*((_QWORD *)v282 + 1) + 8);
              if (v293)
              {
                v294 = 0;
                v537 = ((v287 + 3) & 0xFFFFFFFC) + v292 * v288 - 8;
                do
                {
                  if (v294 >= HIDWORD(v591))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v590, (uint64_t)&v592, v294 + 1, 8);
                    v294 = v591;
                  }
                  *((_QWORD *)v590 + v294) = v293;
                  v294 = v591 + 1;
                  LODWORD(v591) = v591 + 1;
                  v293 = *(_QWORD *)(v293 + 8);
                }
                while (v293);
                v295 = (uint64_t *)v590;
                if (v294)
                {
                  v532 = (uint64_t *)((char *)v590 + 8 * v294);
                  do
                  {
                    v296 = *v295;
                    v297 = *((_QWORD *)v282 + 1);
                    LODWORD(v596) = v537;
                    v597 = v297;
                    v598 = (_QWORD *)v539;
                    v599 = (unsigned __int8 **)&v558;
                    v600 = (uint64_t *)v6;
                    v601 = v282;
                    v298 = *(_QWORD *)(v296 + 24);
                    if (v298)
                      v299 = *(unsigned __int8 *)(v298 + 16) >= 0x1Cu;
                    else
                      v299 = 0;
                    if (v299)
                    {
                      v335 = sub_1C5602198((unsigned int *)&v596, v298);
                      if (*(_QWORD *)v296)
                      {
                        **(_QWORD **)(v296 + 16) = *(_QWORD *)(v296 + 8);
                        v336 = *(_QWORD *)(v296 + 8);
                        if (v336)
                          *(_QWORD *)(v336 + 16) = *(_QWORD *)(v296 + 16);
                      }
                      *(_QWORD *)v296 = v335;
                      if (v335)
                      {
                        v339 = *((_QWORD *)v335 + 1);
                        v337 = (uint64_t *)(v335 + 8);
                        v338 = v339;
                        *(_QWORD *)(v296 + 8) = v339;
                        if (v339)
                          *(_QWORD *)(v338 + 16) = v296 + 8;
                        *(_QWORD *)(v296 + 16) = v337;
                        *v337 = v296;
                      }
                    }
                    else
                    {
                      v561 = &v563;
                      v562 = (llvm::GlobalVariable *)0x1000000000;
                      v300 = *(_QWORD *)(v298 + 8);
                      *(_QWORD *)v575 = &v575[16];
                      *(_QWORD *)&v575[8] = 0x1000000000;
                      sub_1C55E25D8((unsigned int *)v575, 1uLL, v296, v300);
                      LODWORD(v301) = *(_DWORD *)&v575[8];
                      if (*(_DWORD *)&v575[8])
                      {
                        do
                        {
                          v302 = *(_QWORD *)v575;
                          v303 = *(_QWORD *)v575 + 16 * v301;
                          v304 = *(_QWORD *)(*(_QWORD *)(v303 - 16) + 24);
                          if (v304)
                            v305 = *(unsigned __int8 *)(v304 + 16) >= 0x1Cu;
                          else
                            v305 = 0;
                          if (v305)
                          {
                            v309 = sub_1C5602198((unsigned int *)&v596, *(_QWORD *)(*(_QWORD *)(v303 - 16) + 24));
                            if (*(_DWORD *)&v575[8])
                            {
                              v310 = v309;
                              v311 = *(_QWORD *)v575;
                              v312 = *(_QWORD *)v575 + 16 * *(unsigned int *)&v575[8];
                              v313 = (uint64_t *)(v304 + 24);
                              while (1)
                              {
                                v314 = v310;
                                v315 = *(_QWORD *)(*(_QWORD *)v311 + 24);
                                if (v315 == v304)
                                  break;
                                AsInstruction = llvm::ConstantExpr::getAsInstruction(*(llvm::ConstantExpr **)(*(_QWORD *)v311 + 24), 0);
                                v310 = AsInstruction;
                                v317 = *(_DWORD *)(v315 + 20) & 0x7FFFFFF;
                                if ((*(_DWORD *)(v315 + 20) & 0x7FFFFFF) != 0)
                                {
                                  v318 = 0;
                                  v319 = 0;
                                  v320 = (char **)(v314 + 1);
                                  do
                                  {
                                    if (*(_QWORD *)(v315 - 32 * v317 + v318) == **(_QWORD **)v311)
                                    {
                                      v321 = *((_DWORD *)AsInstruction + 5);
                                      if ((v321 & 0x40000000) != 0)
                                        v322 = (char *)*((_QWORD *)AsInstruction - 1);
                                      else
                                        v322 = &AsInstruction[-32 * (v321 & 0x7FFFFFF)];
                                      v323 = &v322[v318];
                                      if (*(_QWORD *)&v322[v318])
                                      {
                                        **((_QWORD **)v323 + 2) = *((_QWORD *)v323 + 1);
                                        v324 = *((_QWORD *)v323 + 1);
                                        if (v324)
                                          *(_QWORD *)(v324 + 16) = *((_QWORD *)v323 + 2);
                                      }
                                      *(_QWORD *)v323 = v314;
                                      if (v314)
                                      {
                                        v325 = *v320;
                                        v326 = &v322[v318];
                                        *((_QWORD *)v326 + 1) = *v320;
                                        if (v325)
                                          *((_QWORD *)v325 + 2) = v326 + 8;
                                        *((_QWORD *)v326 + 2) = v320;
                                        *v320 = v323;
                                      }
                                    }
                                    ++v319;
                                    v317 = *(_DWORD *)(v315 + 20) & 0x7FFFFFF;
                                    v318 += 32;
                                  }
                                  while (v319 < v317);
                                }
                                v327 = *(_QWORD *)(v304 + 40);
                                *((_QWORD *)AsInstruction + 5) = v327;
                                *(_WORD *)(v327 + 18) &= ~0x8000u;
                                if ((AsInstruction[23] & 0x10) != 0)
                                {
                                  v329 = *(_QWORD *)(v327 + 56);
                                  if (v329)
                                  {
                                    v330 = *(llvm::ValueSymbolTable **)(v329 + 104);
                                    if (v330)
                                      llvm::ValueSymbolTable::reinsertValue(v330, (llvm::Value *)v310);
                                  }
                                }
                                v328 = *v313;
                                v310[3] = *v313;
                                v310[4] = v313;
                                *(_QWORD *)(v328 + 8) = v310 + 3;
                                *v313 = (uint64_t)(v310 + 3);
                                v311 += 16;
                                if (v311 == v312)
                                  goto LABEL_555;
                              }
                              v331 = *(_QWORD *)(v303 - 16);
                              if (*(_QWORD *)v331)
                              {
                                **(_QWORD **)(v331 + 16) = *(_QWORD *)(v331 + 8);
                                v332 = *(_QWORD *)(v331 + 8);
                                if (v332)
                                  *(_QWORD *)(v332 + 16) = *(_QWORD *)(v331 + 16);
                              }
                              *(_QWORD *)v331 = v310;
                              if (v310)
                              {
                                v334 = v310 + 1;
                                v333 = v310[1];
                                *(_QWORD *)(v331 + 8) = v333;
                                if (v333)
                                  *(_QWORD *)(v333 + 16) = v331 + 8;
                                *(_QWORD *)(v331 + 16) = v334;
                                *v334 = v331;
                              }
                            }
LABEL_555:
                            LODWORD(v301) = *(_DWORD *)&v575[8] - 1;
                          }
                          else
                          {
                            v301 = v301;
                            v306 = *(_QWORD *)(v303 - 8);
                            if (v306)
                            {
                              *(_QWORD *)(v303 - 8) = *(_QWORD *)(v306 + 8);
                              v307 = *(_QWORD *)(*(_QWORD *)(v306 + 24) + 8);
                              if (v301 >= *(_DWORD *)&v575[12])
                              {
                                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v575, (uint64_t)&v575[16], v301 + 1, 16);
                                v302 = *(_QWORD *)v575;
                                v301 = *(unsigned int *)&v575[8];
                              }
                              v308 = (_QWORD *)(v302 + 16 * v301);
                              *v308 = v306;
                              v308[1] = v307;
                              LODWORD(v301) = *(_DWORD *)&v575[8] + 1;
                            }
                            else
                            {
                              LODWORD(v301) = v301 - 1;
                            }
                          }
                          *(_DWORD *)&v575[8] = v301;
                        }
                        while ((_DWORD)v301);
                      }
                      if (*(_BYTE **)v575 != &v575[16])
                        free(*(void **)v575);
                      if (v561 != &v563)
                        free(v561);
                      v6 = (uint64_t)v528;
                    }
                    ++v295;
                  }
                  while (v295 != v532);
                  v295 = (uint64_t *)v590;
                }
                if (v295 != (uint64_t *)&v592)
                  free(v295);
              }
              v284 = v526;
              v285 = v525;
            }
            ++v284;
          }
          while (v284 != v285);
        }
        v282 += 176;
      }
      while (v282 != v523);
    }
  }
  MEMORY[0x1CAA32FB4](v558, 8);
  v340 = v6;
  v341 = (char *)v555;
  v342 = v556;
  *(_QWORD *)v575 = "agx.prid";
  v576.i16[4] = 259;
  NamedMetadata = llvm::Module::getNamedMetadata(v340, (uint64_t)v575);
  if (NamedMetadata)
  {
    v561 = &v563;
    v562 = (llvm::GlobalVariable *)0x400000000;
    *(_QWORD *)v575 = 1;
    *(int64x2_t *)&v575[8] = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v576 = *(int64x2_t *)&v575[8];
    v577.i64[0] = (uint64_t)&v578;
    v577.i64[1] = 0x400000000;
    if (v342)
    {
      v346 = NamedMetadata;
      v538 = &v341[176 * v342];
      v347 = v341;
      do
      {
        v348 = *((unsigned int *)v347 + 16);
        if ((_DWORD)v348)
        {
          v349 = (void **)*((_QWORD *)v347 + 7);
          v350 = &v349[v348];
          do
          {
            v590 = 0;
            v590 = *v349;
            if ((*(unsigned int (**)(void *, uint64_t, _QWORD))(*(_QWORD *)v590 + 184))(v590, 15, *((_QWORD *)v347 + 1)))
            {
              sub_1C5600638((uint64_t)v575, (uint64_t *)&v590);
              v351 = *((unsigned int *)v347 + 30);
              if ((_DWORD)v351)
              {
                v352 = (unsigned int *)*((_QWORD *)v347 + 14);
                v353 = v562;
                v354 = 6 * v351;
                do
                {
                  v355 = *((unsigned __int16 *)v352 + 2);
                  v356 = *v352;
                  if (v353 >= HIDWORD(v562))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v561, (uint64_t)&v563, v353 + 1, 8);
                    v353 = v562;
                  }
                  *((_QWORD *)v561 + v353) = v356 | (v355 << 32) | 0x1000000000000;
                  v353 = (_DWORD)v562 + 1;
                  LODWORD(v562) = (_DWORD)v562 + 1;
                  v352 = (unsigned int *)((char *)v352 + 6);
                  v354 -= 6;
                }
                while (v354);
              }
              v357 = *((unsigned int *)v347 + 36);
              if ((_DWORD)v357)
              {
                v358 = (unsigned int *)*((_QWORD *)v347 + 17);
                v359 = v562;
                v360 = 6 * v357;
                do
                {
                  v361 = *((unsigned __int16 *)v358 + 2);
                  v362 = *v358;
                  if (v359 >= HIDWORD(v562))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v561, (uint64_t)&v563, v359 + 1, 8);
                    v359 = v562;
                  }
                  *((_QWORD *)v561 + v359) = v362 | (v361 << 32);
                  v359 = (_DWORD)v562 + 1;
                  LODWORD(v562) = (_DWORD)v562 + 1;
                  v358 = (unsigned int *)((char *)v358 + 6);
                  v360 -= 6;
                }
                while (v360);
              }
            }
            ++v349;
          }
          while (v349 != v350);
        }
        v347 += 176;
      }
      while (v347 != v538);
      v363 = *v528;
      if (v577.i32[2])
      {
        v364 = (_QWORD *)v577.i64[0];
        v533 = v577.i64[0] + 8 * v577.u32[2];
        do
        {
          v365 = *v364;
          v590 = &v592;
          v591 = 0x400000000;
          if ((_DWORD)v562)
          {
            v540 = v364;
            v366 = (unsigned __int8 *)v561;
            v367 = 8 * v562;
            do
            {
              if (v366[6])
              {
                if ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v365 + 176))(v365, 25))
                {
                  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v365 + 128))(&v558, v365, 25);
                  v369 = *(llvm::ValueAsMetadata **)(*(uint64_t (**)(void *))(*(_QWORD *)v558 + 32))(v558);
                  v422 = v558;
                  v558 = 0;
                  if (v422)
                    (*(void (**)(void *))(*(_QWORD *)v422 + 8))(v422);
                }
                else
                {
                  v369 = 0;
                }
                v596 = (uint64_t (**)())llvm::ValueAsMetadata::get(v369, v368);
                v597 = (uint64_t)llvm::MDString::get(v363, "read_prid", 9uLL);
                v371 = *v366 & 0xF;
                v372 = *(llvm::ConstantInt **)(*v363 + 1960);
                v373 = *(_DWORD *)(*v363 + 1968);
                LODWORD(v559) = v373 >> 8;
                if (v373 >> 8 > 0x40)
                {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v558, v371, 0);
                }
                else
                {
                  if (v373 <= 0xFF)
                    v374 = 0;
                  else
                    v374 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v373);
                  v558 = (void *)(v374 & v371);
                }
                v376 = llvm::ConstantInt::get(v372, (llvm::LLVMContext *)&v558, v370);
                if (v559 >= 0x41 && v558)
                  MEMORY[0x1CAA32F9C](v558, 0x1000C8000313F17);
                v598 = llvm::ValueAsMetadata::get(v376, v375);
                v599 = (unsigned __int8 **)llvm::MDString::get(v363, "write_prid", 0xAuLL);
                v378 = (unint64_t)*v366 >> 4;
                v379 = *(llvm::ConstantInt **)(*v363 + 1960);
                v380 = *(_DWORD *)(*v363 + 1968);
                LODWORD(v559) = v380 >> 8;
                if (v380 >> 8 > 0x40)
                {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v558, v378, 0);
                }
                else
                {
                  if (v380 <= 0xFF)
                    v381 = 0;
                  else
                    v381 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v380);
                  v558 = (void *)(v381 & v378);
                }
                v383 = llvm::ConstantInt::get(v379, (llvm::LLVMContext *)&v558, v377);
                if (v559 >= 0x41 && v558)
                  MEMORY[0x1CAA32F9C](v558, 0x1000C8000313F17);
                v600 = llvm::ValueAsMetadata::get(v383, v382);
                v384 = (void *)llvm::MDTuple::getImpl(v363, &v596, 5, 0, 1);
                v558 = v384;
                v385 = *(_QWORD *)(v346 + 48);
                v386 = *(unsigned int *)(v385 + 8);
                if (v386 >= *(_DWORD *)(v385 + 12))
                {
                  sub_1C5419FD8(*(_QWORD *)(v346 + 48), (unsigned __int8 **)&v558);
                }
                else
                {
                  v387 = (unsigned __int8 *)v384;
                  v388 = (unsigned __int8 **)(*(_QWORD *)v385 + 8 * v386);
                  *v388 = v387;
                  if (v387)
                  {
                    llvm::MetadataTracking::track((uint64_t)v388, v387, 2);
                    LODWORD(v386) = *(_DWORD *)(v385 + 8);
                  }
                  *(_DWORD *)(v385 + 8) = v386 + 1;
                }
              }
              else
              {
                if (!(_DWORD)v591)
                {
                  if ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v365 + 176))(v365, 25))
                  {
                    (*(void (**)(uint64_t (***__return_ptr)(), uint64_t, uint64_t))(*(_QWORD *)v365 + 128))(&v596, v365, 25);
                    v390 = *(llvm::ValueAsMetadata **)(*((uint64_t (**)(uint64_t (**)()))*v596 + 4))(v596);
                    v423 = (unsigned __int8 *)v596;
                    v596 = 0;
                    if (v423)
                      (*(void (**)(unsigned __int8 *))(*(_QWORD *)v423 + 8))(v423);
                  }
                  else
                  {
                    v390 = 0;
                  }
                  v391 = llvm::ValueAsMetadata::get(v390, v389);
                  v392 = v591;
                  if (v591 >= (unint64_t)HIDWORD(v591))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v590, (uint64_t)&v592, v591 + 1, 8);
                    v392 = v591;
                  }
                  *((_QWORD *)v590 + v392) = v391;
                  LODWORD(v591) = v591 + 1;
                }
                v393 = *((unsigned __int16 *)v366 + 1);
                v394 = *(llvm::ConstantInt **)(*v363 + 1960);
                v395 = *(_DWORD *)(*v363 + 1968);
                LODWORD(v559) = v395 >> 8;
                if (v395 >> 8 > 0x40)
                {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v558, v393, 0);
                }
                else
                {
                  if (v395 <= 0xFF)
                    v396 = 0;
                  else
                    v396 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v395);
                  v558 = (void *)(v396 & v393);
                }
                v398 = llvm::ConstantInt::get(v394, (llvm::LLVMContext *)&v558, v345);
                if (v559 >= 0x41 && v558)
                  MEMORY[0x1CAA32F9C](v558, 0x1000C8000313F17);
                v596 = (uint64_t (**)())llvm::ValueAsMetadata::get(v398, v397);
                v400 = *((unsigned __int16 *)v366 + 2) + (unint64_t)*((unsigned __int16 *)v366 + 1);
                v401 = *(llvm::ConstantInt **)(*v363 + 1960);
                v402 = *(_DWORD *)(*v363 + 1968);
                LODWORD(v559) = v402 >> 8;
                if (v402 >> 8 > 0x40)
                {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v558, v400, 0);
                }
                else
                {
                  if (v402 <= 0xFF)
                    v403 = 0;
                  else
                    v403 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v402);
                  v558 = (void *)(v403 & v400);
                }
                v405 = llvm::ConstantInt::get(v401, (llvm::LLVMContext *)&v558, v399);
                if (v559 >= 0x41 && v558)
                  MEMORY[0x1CAA32F9C](v558, 0x1000C8000313F17);
                v597 = (uint64_t)llvm::ValueAsMetadata::get(v405, v404);
                v598 = llvm::MDString::get(v363, "read_prid", 9uLL);
                v407 = *v366 & 0xF;
                v408 = *(llvm::ConstantInt **)(*v363 + 1960);
                v409 = *(_DWORD *)(*v363 + 1968);
                LODWORD(v559) = v409 >> 8;
                if (v409 >> 8 > 0x40)
                {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v558, v407, 0);
                }
                else
                {
                  if (v409 <= 0xFF)
                    v410 = 0;
                  else
                    v410 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v409);
                  v558 = (void *)(v410 & v407);
                }
                v412 = llvm::ConstantInt::get(v408, (llvm::LLVMContext *)&v558, v406);
                if (v559 >= 0x41 && v558)
                  MEMORY[0x1CAA32F9C](v558, 0x1000C8000313F17);
                v599 = (unsigned __int8 **)llvm::ValueAsMetadata::get(v412, v411);
                v600 = llvm::MDString::get(v363, "write_prid", 0xAuLL);
                v414 = (unint64_t)*v366 >> 4;
                v415 = *(llvm::ConstantInt **)(*v363 + 1960);
                v416 = *(_DWORD *)(*v363 + 1968);
                LODWORD(v559) = v416 >> 8;
                if (v416 >> 8 > 0x40)
                {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v558, v414, 0);
                }
                else
                {
                  if (v416 <= 0xFF)
                    v417 = 0;
                  else
                    v417 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v416);
                  v558 = (void *)(v417 & v414);
                }
                v419 = llvm::ConstantInt::get(v415, (llvm::LLVMContext *)&v558, v413);
                if (v559 >= 0x41 && v558)
                  MEMORY[0x1CAA32F9C](v558, 0x1000C8000313F17);
                v601 = llvm::ValueAsMetadata::get(v419, v418);
                v420 = llvm::MDTuple::getImpl(v363, &v596, 6, 0, 1);
                v421 = v591;
                if (v591 >= (unint64_t)HIDWORD(v591))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v590, (uint64_t)&v592, v591 + 1, 8);
                  v421 = v591;
                }
                *((_QWORD *)v590 + v421) = v420;
                LODWORD(v591) = v591 + 1;
              }
              v366 += 8;
              v367 -= 8;
            }
            while (v367);
            v345 = (const llvm::APInt *)v591;
            v344 = (_QWORD **)v590;
            if ((_DWORD)v591)
            {
              v424 = (unsigned __int8 *)llvm::MDTuple::getImpl(v363, v590, v591, 0, 1);
              v596 = (uint64_t (**)())v424;
              v425 = *(_QWORD *)(v346 + 48);
              v426 = *(unsigned int *)(v425 + 8);
              v364 = v540;
              if (v426 >= *(_DWORD *)(v425 + 12))
              {
                sub_1C5419FD8(*(_QWORD *)(v346 + 48), (unsigned __int8 **)&v596);
              }
              else
              {
                v427 = v424;
                v428 = (unsigned __int8 **)(*(_QWORD *)v425 + 8 * v426);
                *v428 = v427;
                if (v427)
                {
                  llvm::MetadataTracking::track((uint64_t)v428, v427, 2);
                  LODWORD(v426) = *(_DWORD *)(v425 + 8);
                }
                *(_DWORD *)(v425 + 8) = v426 + 1;
              }
              v344 = (_QWORD **)v590;
            }
            else
            {
              v364 = v540;
            }
            if (v344 != &v592)
              free(v344);
          }
          ++v364;
        }
        while (v364 != (_QWORD *)v533);
      }
      v429 = "read_prid";
      v430 = "write_prid";
      do
      {
        v431 = *((unsigned int *)v341 + 30);
        if ((_DWORD)v431)
        {
          v432 = (_BYTE *)*((_QWORD *)v341 + 14);
          v433 = 6 * v431;
          do
          {
            v590 = llvm::ValueAsMetadata::get(*((llvm::ValueAsMetadata **)v341 + 1), (llvm::Value *)v344);
            v591 = (uint64_t)llvm::MDString::get(v363, v429, 9uLL);
            v435 = *v432 & 0xF;
            v436 = *(llvm::ConstantInt **)(*v363 + 1960);
            v437 = *(_DWORD *)(*v363 + 1968);
            LODWORD(v597) = v437 >> 8;
            if (v437 >> 8 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v596, v435, 0);
            }
            else
            {
              if (v437 <= 0xFF)
                v438 = 0;
              else
                v438 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v437);
              v596 = (uint64_t (**)())(v438 & v435);
            }
            v440 = llvm::ConstantInt::get(v436, (llvm::LLVMContext *)&v596, v434);
            if (v597 >= 0x41 && v596)
              MEMORY[0x1CAA32F9C](v596, 0x1000C8000313F17);
            v592 = llvm::ValueAsMetadata::get(v440, v439);
            v593 = llvm::MDString::get(v363, v430, 0xAuLL);
            v442 = (unint64_t)*v432 >> 4;
            v443 = *(llvm::ConstantInt **)(*v363 + 1960);
            v444 = *(_DWORD *)(*v363 + 1968);
            LODWORD(v597) = v444 >> 8;
            if (v444 >> 8 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v596, v442, 0);
            }
            else
            {
              if (v444 <= 0xFF)
                v445 = 0;
              else
                v445 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v444);
              v596 = (uint64_t (**)())(v445 & v442);
            }
            v447 = llvm::ConstantInt::get(v443, (llvm::LLVMContext *)&v596, v441);
            if (v597 >= 0x41 && v596)
              MEMORY[0x1CAA32F9C](v596, 0x1000C8000313F17);
            v594 = llvm::ValueAsMetadata::get(v447, v446);
            v448 = (unsigned __int8 *)llvm::MDTuple::getImpl(v363, &v590, 5, 0, 1);
            v596 = (uint64_t (**)())v448;
            v449 = *(_QWORD *)(v346 + 48);
            v450 = *(unsigned int *)(v449 + 8);
            if (v450 >= *(_DWORD *)(v449 + 12))
            {
              sub_1C5419FD8(*(_QWORD *)(v346 + 48), (unsigned __int8 **)&v596);
            }
            else
            {
              v344 = (_QWORD **)v448;
              v451 = (_QWORD *)(*(_QWORD *)v449 + 8 * v450);
              *v451 = v344;
              if (v344)
              {
                llvm::MetadataTracking::track((uint64_t)v451, (unsigned __int8 *)v344, 2);
                LODWORD(v450) = *(_DWORD *)(v449 + 8);
              }
              *(_DWORD *)(v449 + 8) = v450 + 1;
            }
            v432 += 6;
            v433 -= 6;
          }
          while (v433);
        }
        v452 = *(_QWORD *)(*((_QWORD *)v341 + 1) + 24);
        if (v452)
          v453 = *(_BYTE *)(v452 + 8) == 17;
        else
          v453 = 0;
        if (v453)
        {
          sub_1C4768AD0((uint64_t)v527, *(_QWORD *)(v452 + 24));
          v476 = v475;
          if ((_DWORD)v344 == 1)
          v477 = *((unsigned int *)v341 + 36);
          if ((_DWORD)v477)
          {
            v541 = (unint64_t)(v476 + 7) >> 3;
            v478 = (unsigned __int8 *)*((_QWORD *)v341 + 17);
            v479 = 6 * v477;
            do
            {
              v480 = (llvm::ValueAsMetadata **)v341;
              v481 = v346;
              v482 = v430;
              v483 = v429;
              v484 = (char *)v480;
              v485 = *((unsigned __int16 *)v478 + 1) / v541;
              v590 = llvm::ValueAsMetadata::get(v480[1], (llvm::Value *)v344);
              v487 = *(llvm::ConstantInt **)(*v363 + 1960);
              v488 = *(_DWORD *)(*v363 + 1968);
              LODWORD(v597) = v488 >> 8;
              if (v488 >> 8 > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)&v596, v485, 0);
              }
              else
              {
                if (v488 <= 0xFF)
                  v489 = 0;
                else
                  v489 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v488);
                v596 = (uint64_t (**)())(v489 & v485);
              }
              v491 = llvm::ConstantInt::get(v487, (llvm::LLVMContext *)&v596, v486);
              v429 = v483;
              if (v597 >= 0x41 && v596)
                MEMORY[0x1CAA32F9C](v596, 0x1000C8000313F17);
              v591 = (uint64_t)llvm::ValueAsMetadata::get(v491, v490);
              v592 = llvm::MDString::get(v363, v483, 9uLL);
              v493 = *v478 & 0xF;
              v494 = *(llvm::ConstantInt **)(*v363 + 1960);
              v495 = *(_DWORD *)(*v363 + 1968);
              LODWORD(v597) = v495 >> 8;
              v430 = v482;
              if (v495 >> 8 > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)&v596, v493, 0);
                v346 = v481;
                v341 = v484;
              }
              else
              {
                v346 = v481;
                if (v495 <= 0xFF)
                  v496 = 0;
                else
                  v496 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v495);
                v341 = v484;
                v596 = (uint64_t (**)())(v496 & v493);
              }
              v498 = llvm::ConstantInt::get(v494, (llvm::LLVMContext *)&v596, v492);
              if (v597 >= 0x41 && v596)
                MEMORY[0x1CAA32F9C](v596, 0x1000C8000313F17);
              v593 = llvm::ValueAsMetadata::get(v498, v497);
              v594 = llvm::MDString::get(v363, v430, 0xAuLL);
              v500 = (unint64_t)*v478 >> 4;
              v501 = *(llvm::ConstantInt **)(*v363 + 1960);
              v502 = *(_DWORD *)(*v363 + 1968);
              LODWORD(v597) = v502 >> 8;
              if (v502 >> 8 > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)&v596, v500, 0);
              }
              else
              {
                if (v502 <= 0xFF)
                  v503 = 0;
                else
                  v503 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v502);
                v596 = (uint64_t (**)())(v503 & v500);
              }
              v505 = llvm::ConstantInt::get(v501, (llvm::LLVMContext *)&v596, v499);
              if (v597 >= 0x41 && v596)
                MEMORY[0x1CAA32F9C](v596, 0x1000C8000313F17);
              v595 = llvm::ValueAsMetadata::get(v505, v504);
              v506 = (unsigned __int8 *)llvm::MDTuple::getImpl(v363, &v590, 6, 0, 1);
              v596 = (uint64_t (**)())v506;
              v507 = *(_QWORD *)(v346 + 48);
              v508 = *(unsigned int *)(v507 + 8);
              if (v508 >= *(_DWORD *)(v507 + 12))
              {
                sub_1C5419FD8(*(_QWORD *)(v346 + 48), (unsigned __int8 **)&v596);
              }
              else
              {
                v344 = (_QWORD **)v506;
                v509 = (_QWORD *)(*(_QWORD *)v507 + 8 * v508);
                *v509 = v344;
                if (v344)
                {
                  llvm::MetadataTracking::track((uint64_t)v509, (unsigned __int8 *)v344, 2);
                  LODWORD(v508) = *(_DWORD *)(v507 + 8);
                }
                *(_DWORD *)(v507 + 8) = v508 + 1;
              }
              v478 += 6;
              v479 -= 6;
            }
            while (v479);
          }
        }
        else
        {
          v454 = *((unsigned int *)v341 + 36);
          if ((_DWORD)v454)
          {
            v455 = (_BYTE *)*((_QWORD *)v341 + 17);
            v456 = 6 * v454;
            do
            {
              v590 = llvm::ValueAsMetadata::get(*((llvm::ValueAsMetadata **)v341 + 1), (llvm::Value *)v344);
              v591 = (uint64_t)llvm::MDString::get(v363, v429, 9uLL);
              v458 = *v455 & 0xF;
              v459 = *(llvm::ConstantInt **)(*v363 + 1960);
              v460 = *(_DWORD *)(*v363 + 1968);
              LODWORD(v597) = v460 >> 8;
              if (v460 >> 8 > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)&v596, v458, 0);
              }
              else
              {
                if (v460 <= 0xFF)
                  v461 = 0;
                else
                  v461 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v460);
                v596 = (uint64_t (**)())(v461 & v458);
              }
              v463 = llvm::ConstantInt::get(v459, (llvm::LLVMContext *)&v596, v457);
              if (v597 >= 0x41 && v596)
                MEMORY[0x1CAA32F9C](v596, 0x1000C8000313F17);
              v592 = llvm::ValueAsMetadata::get(v463, v462);
              v593 = llvm::MDString::get(v363, v430, 0xAuLL);
              v465 = (unint64_t)*v455 >> 4;
              v466 = *(llvm::ConstantInt **)(*v363 + 1960);
              v467 = *(_DWORD *)(*v363 + 1968);
              LODWORD(v597) = v467 >> 8;
              if (v467 >> 8 > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)&v596, v465, 0);
              }
              else
              {
                if (v467 <= 0xFF)
                  v468 = 0;
                else
                  v468 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v467);
                v596 = (uint64_t (**)())(v468 & v465);
              }
              v470 = llvm::ConstantInt::get(v466, (llvm::LLVMContext *)&v596, v464);
              if (v597 >= 0x41 && v596)
                MEMORY[0x1CAA32F9C](v596, 0x1000C8000313F17);
              v594 = llvm::ValueAsMetadata::get(v470, v469);
              v471 = (unsigned __int8 *)llvm::MDTuple::getImpl(v363, &v590, 5, 0, 1);
              v596 = (uint64_t (**)())v471;
              v472 = *(_QWORD *)(v346 + 48);
              v473 = *(unsigned int *)(v472 + 8);
              if (v473 >= *(_DWORD *)(v472 + 12))
              {
                sub_1C5419FD8(*(_QWORD *)(v346 + 48), (unsigned __int8 **)&v596);
              }
              else
              {
                v344 = (_QWORD **)v471;
                v474 = (_QWORD *)(*(_QWORD *)v472 + 8 * v473);
                *v474 = v344;
                if (v344)
                {
                  llvm::MetadataTracking::track((uint64_t)v474, (unsigned __int8 *)v344, 2);
                  LODWORD(v473) = *(_DWORD *)(v472 + 8);
                }
                *(_DWORD *)(v472 + 8) = v473 + 1;
              }
              v455 += 6;
              v456 -= 6;
            }
            while (v456);
          }
        }
        v341 += 176;
      }
      while (v341 != v538);
      if ((void **)v577.i64[0] != &v578)
        free((void *)v577.i64[0]);
    }
    if ((v575[0] & 1) == 0)
      MEMORY[0x1CAA32FB4](*(_QWORD *)&v575[8], 8);
    if (v561 != &v563)
      free(v561);
  }
  if (v548[0] != v549)
    free(v548[0]);
  v131 = v521;
  if (v552 != v554)
    free(v552);
  if ((v550 & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)&v551[0], 8);
LABEL_799:
  if (__p)
  {
    v545 = (char *)__p;
    operator delete(__p);
  }
  MEMORY[0x1CAA32FB4](v542[0], 8);
  v510 = (char *)v555;
  if ((_DWORD)v556)
  {
    v511 = 0;
    v512 = 176 * v556;
    do
    {
      v513 = &v510[v512];
      v514 = *(char **)&v510[v512 - 40];
      if (&v510[v512 - 24] != v514)
        free(v514);
      v515 = (char *)*((_QWORD *)v513 - 8);
      if (v513 - 48 != v515)
        free(v515);
      v516 = *(char **)&v510[v512 - 120];
      if (&v510[v512 - 104] != v516)
        free(v516);
      if ((v510[v512 - 160] & 1) == 0)
        MEMORY[0x1CAA32FB4](*(_QWORD *)&v510[v512 - 152], 8);
      v511 += 176;
      v510 -= 176;
    }
    while (v512 != v511);
    v510 = (char *)v555;
  }
  if (v510 != v557)
    free(v510);
  return v131 != 0;
}

uint64_t sub_1C5600378(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t Attribute;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  unsigned int v26;
  _QWORD v27[2];
  uint64_t v28;

  v5 = sub_1C5EA50FC(a1);
  v7 = v6;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 64))(a3);
  if ((v5 & 0x100000000) != 0 && (v7 & 0x1000000000000) != 0)
  {
    v26 = *(_DWORD *)(result + 4);
    v9 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 48))(a3);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 56))(a3);
    if (v9 != (_QWORD *)result)
    {
      v10 = (_QWORD *)result;
      do
      {
        v11 = *v9;
        (*(void (**)(_QWORD *__return_ptr, _QWORD, uint64_t))(*(_QWORD *)*v9 + 128))(v27, *v9, 3);
        (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v11 + 136))(&v28, v11, 3);
        v12 = v27[0];
        v13 = v28;
        if (v27[0])
        {
          (*(void (**)(_QWORD *__return_ptr, _QWORD))(*(_QWORD *)v27[0] + 16))(v27, v27[0]);
          v14 = v27[0];
        }
        else
        {
          v14 = 0;
        }
        (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)v13 + 16))(v27, v13);
        v15 = v27[0];
        while (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 24))(v14, v15) & 1) == 0)
        {
          v16 = *(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 32))(v14);
          v18 = (uint64_t *)(v16 + 72);
          v17 = *v18;
          if (*v18)
          {
            v27[0] = "oob_check_enable";
            v27[1] = 16;
            v28 = 0;
            if (sub_1C5331A1C((uint64_t *)(v17 + 24), (uint64_t)v27, &v28))
            {
              Attribute = llvm::AttributeSet::getAttribute(v18, (uint64_t)"oob_check_enable", 16);
              if (Attribute)
              {
                if (*(_DWORD *)(Attribute + 16) == 1
                  && *(_BYTE *)(Attribute + *(unsigned int *)(Attribute + 12) + 25) == 49)
                {
                  v27[0] = v16;
                  v20 = sub_1C558B5F8(a2, v27);
                  if (v20)
                  {
                    v21 = (_QWORD *)(v20 - 8 * *(unsigned int *)(v20 + 8));
                    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v21 + 128) + 24) + 8) != 17
                      || (v22 = v21[1], *(_BYTE *)v22 == 1) && *(_BYTE *)(*(_QWORD *)(v22 + 128) + 16) == 16)
                    {
                      v23 = v21[2];
                    }
                    else
                    {
                      v23 = *(_QWORD *)(v22 - 8 * *(unsigned int *)(v22 + 8) + 8);
                    }
                    v24 = *(_QWORD *)(v23 + 128);
                    v25 = (unsigned int *)(v24 + 24);
                    if (*(_DWORD *)(v24 + 32) >= 0x41u)
                      v25 = *(unsigned int **)v25;
                    (*(void (**)(uint64_t, uint64_t, _QWORD, _QWORD))(*(_QWORD *)v11 + 472))(v11, v16, *v25, v26);
                  }
                }
              }
            }
          }
          (*(void (**)(uint64_t))(*(_QWORD *)v14 + 40))(v14);
        }
        if (v15)
          (*(void (**)(uint64_t))(*(_QWORD *)v15 + 8))(v15);
        (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
        result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
        if (v12)
          result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
        ++v9;
      }
      while (v9 != v10);
    }
  }
  return result;
}

BOOL sub_1C5600638(uint64_t a1, uint64_t *a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  int v8;
  _BYTE v9[16];
  unsigned __int8 v10;

  sub_1C5601E0C(a1, a2, (uint64_t)v9);
  v4 = v10;
  if (v10)
  {
    v5 = *a2;
    v6 = *(unsigned int *)(a1 + 48);
    if (v6 >= *(_DWORD *)(a1 + 52))
    {
      v8 = v10;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 40, a1 + 56, v6 + 1, 8);
      v4 = v8;
      LODWORD(v6) = *(_DWORD *)(a1 + 48);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v6) = v5;
    ++*(_DWORD *)(a1 + 48);
  }
  return v4 != 0;
}

void *sub_1C56006C4(_DWORD *a1, _DWORD *a2)
{
  int v2;
  int v3;
  _QWORD *v4;
  _QWORD *v5;
  char v6;
  size_t v7;
  uint64_t v9;
  unsigned int *v10;
  _DWORD *v11;
  unsigned int v12;
  _DWORD *v13;
  _DWORD *v14;

  v2 = *a1;
  if ((*a1 & 1) == 0)
  {
    v13 = a2;
    v14 = a1;
    MEMORY[0x1CAA32FB4](*((_QWORD *)a1 + 1), 8);
    a2 = v13;
    a1 = v14;
    v2 = *v14;
  }
  *a1 = v2 | 1;
  if ((*a2 & 1) != 0 || a2[4] <= 4u)
  {
    v3 = 0;
    *a1 = *a2 | 1;
    a1[1] = a2[1];
    v4 = a1 + 2;
  }
  else
  {
    *a1 = v2 & 0xFFFFFFFE;
    if ((*a2 & 1) != 0)
      v9 = 4;
    else
      v9 = a2[4];
    v10 = a1;
    v11 = a2;
    *((_QWORD *)a1 + 1) = operator new(8 * v9, (std::align_val_t)8uLL);
    v4 = v10 + 2;
    *((_QWORD *)v10 + 2) = v9;
    v12 = *v10;
    *v10 = *v11 & 0xFFFFFFFE | *v10 & 1;
    a2 = v11;
    a1 = v10;
    v10[1] = v11[1];
    if ((v12 & 1) != 0)
    {
      v3 = 0;
    }
    else
    {
      v4 = (_QWORD *)*v4;
      v3 = 1;
    }
  }
  v6 = *(_BYTE *)a2;
  v5 = a2 + 2;
  if ((v6 & 1) == 0)
    v5 = (_QWORD *)*v5;
  if (v3)
    v7 = 8 * a1[4];
  else
    v7 = 32;
  return memcpy(v4, v5, v7);
}

void sub_1C56007E8(uint64_t a1, char *a2)
{
  uint64_t v4;
  unint64_t v5;
  unsigned int v6;
  _QWORD *v7;
  char *v8;
  char *v9;
  char **v10;
  unint64_t v11;
  unint64_t v12;
  char *v14;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v11 = v4 + 1;
    v12 = v5 + 40 * v4;
    if (v5 <= (unint64_t)a2 && v12 > (unint64_t)a2)
    {
      v14 = &a2[-v5];
      sub_1C627FBCC(a1, v11);
      v5 = *(_QWORD *)a1;
      a2 = &v14[*(_QWORD *)a1];
    }
    else
    {
      sub_1C627FBCC(a1, v11);
      v5 = *(_QWORD *)a1;
    }
  }
  v6 = *(_DWORD *)(a1 + 8);
  v7 = (_QWORD *)(v5 + 40 * v6);
  *v7 = *(_QWORD *)a2;
  v8 = (char *)(v7 + 1);
  v9 = (char *)*((_QWORD *)a2 + 4);
  if (v9)
  {
    v10 = (char **)(v5 + 40 * v6 + 32);
    if (v9 == a2 + 8)
    {
      *v10 = v8;
      (*(void (**)(_QWORD))(**((_QWORD **)a2 + 4) + 24))(*((_QWORD *)a2 + 4));
      v6 = *(_DWORD *)(a1 + 8);
    }
    else
    {
      *v10 = v9;
      *((_QWORD *)a2 + 4) = 0;
    }
  }
  else
  {
    *(_QWORD *)(v5 + 40 * v6 + 32) = 0;
  }
  *(_DWORD *)(a1 + 8) = v6 + 1;
}

uint64_t sub_1C56008C8(uint64_t result, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;

  v2 = *(unsigned int *)(result + 8);
  if ((_DWORD)v2)
  {
    v3 = result;
    v4 = (_QWORD *)(a2 + 32);
    v5 = 40 * v2;
    v6 = (_QWORD *)(*(_QWORD *)result + 32);
    do
    {
      *(v4 - 4) = *(v6 - 4);
      v7 = (_QWORD *)*v6;
      if (*v6)
      {
        if (v6 - 3 == v7)
        {
          *v4 = v4 - 3;
          result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v6 + 24))(*v6);
        }
        else
        {
          *v4 = v7;
          *v6 = 0;
        }
      }
      else
      {
        *v4 = 0;
      }
      v4 += 5;
      v6 += 5;
      v5 -= 40;
    }
    while (v5);
    v8 = *(unsigned int *)(v3 + 8);
    if ((_DWORD)v8)
    {
      v9 = *(_QWORD *)v3;
      for (i = 40 * v8; i; i -= 40)
      {
        result = *(_QWORD *)(v9 + i - 8);
        if (v9 + i - 32 == result)
        {
          result = v9 + i - 32;
          v11 = 4;
        }
        else
        {
          if (!result)
            continue;
          v11 = 5;
        }
        result = (*(uint64_t (**)(void))(*(_QWORD *)result + 8 * v11))();
      }
    }
  }
  return result;
}

void sub_1C56009B4()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C56009C8()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E8171398;
  return result;
}

void sub_1C56009EC(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E8171398;
}

uint64_t sub_1C5600A04()
{
  return 1;
}

void sub_1C5600A10()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5600A24(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E81713E0;
  result[1] = v3;
  return result;
}

uint64_t sub_1C5600A58(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E81713E0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C5600A74(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  void *v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;
  unsigned int v12;
  _QWORD *v13;
  void *v14;
  _QWORD *v15;
  int v16;
  BOOL v17;
  unsigned int v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  int v31;
  unsigned int v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  int v36;
  BOOL v37;
  unsigned int v38;
  _QWORD *v39;
  uint64_t v40;
  int v41;
  void **v42;
  void *v43;
  uint64_t v44;
  int v45;
  int v46;
  unsigned int v47;
  _QWORD *v48;
  void *v49;
  _QWORD *v50;
  int v51;
  BOOL v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t *v57;
  unint64_t v58;
  uint64_t v59;
  int v60;
  llvm::Value *v61;
  uint64_t *v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t ElementPtr;
  uint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  unsigned int v73;
  _QWORD *v74;
  uint64_t v75;
  _QWORD *v76;
  int v77;
  BOOL v78;
  unsigned int v79;
  _QWORD *v80;
  uint64_t v82;
  void *v83;
  uint64_t v84;
  _QWORD v85[6];

  v85[5] = *MEMORY[0x1E0C80C00];
  v3 = *a2;
  v4 = *(unsigned __int8 *)(*a2 + 16);
  if (*a2 && v4 == 62)
  {
    v5 = *(_QWORD *)(a1 + 8);
    v6 = *(_DWORD *)(v3 + 20) & 0x7FFFFFF;
    v7 = *(void **)(v3 - 32 * v6);
    v83 = v7;
    v8 = v5 + 8;
    if ((*(_BYTE *)v5 & 1) != 0)
    {
      v9 = 32;
    }
    else
    {
      v9 = *(_DWORD *)(v5 + 16);
      if (!v9)
      {
        v19 = 0;
        goto LABEL_23;
      }
      v8 = *(_QWORD *)(v5 + 8);
    }
    v10 = -v6;
    v11 = v9 - 1;
    v12 = v11 & ((v7 >> 4) ^ (v7 >> 9));
    v13 = (_QWORD *)(v8 + 16 * v12);
    v14 = (void *)*v13;
    if (v7 == (void *)*v13)
    {
LABEL_24:
      v21 = v13[1];
      v22 = v3 + 32 * v10;
      if (v7)
      {
        **(_QWORD **)(v22 + 16) = *(_QWORD *)(v22 + 8);
        v23 = *(_QWORD *)(v22 + 8);
        if (v23)
          *(_QWORD *)(v23 + 16) = *(_QWORD *)(v22 + 16);
      }
      *(_QWORD *)v22 = v21;
      if (v21)
      {
        v26 = *(_QWORD *)(v21 + 8);
        v24 = (_QWORD *)(v21 + 8);
        v25 = v26;
        v27 = v3 + 32 * v10;
        *(_QWORD *)(v27 + 8) = v26;
        if (v26)
          *(_QWORD *)(v25 + 16) = v27 + 8;
        *(_QWORD *)(v27 + 16) = v24;
        *v24 = v22;
      }
      *(_QWORD *)v3 = llvm::PointerType::get(*(llvm::PointerType **)(v3 + 64), (llvm::Type *)0x40);
      v28 = *(_QWORD *)(a1 + 8);
      v83 = (void *)v3;
      v29 = v28 + 8;
      if ((*(_BYTE *)v28 & 1) != 0)
      {
        v30 = 32;
      }
      else
      {
        v30 = *(_DWORD *)(v28 + 16);
        if (!v30)
        {
          v39 = 0;
          goto LABEL_46;
        }
        v29 = *(_QWORD *)(v28 + 8);
      }
      v31 = v30 - 1;
      v32 = (v30 - 1) & ((v3 >> 4) ^ (v3 >> 9));
      v33 = (_QWORD *)(v29 + 16 * v32);
      v34 = *v33;
      if (v3 == *v33)
      {
LABEL_47:
        v33[1] = v3;
        return 1;
      }
      v35 = 0;
      v36 = 1;
      while (v34 != -4096)
      {
        if (v35)
          v37 = 0;
        else
          v37 = v34 == -8192;
        if (v37)
          v35 = v33;
        v38 = v32 + v36++;
        v32 = v38 & v31;
        v33 = (_QWORD *)(v29 + 16 * (v38 & v31));
        v34 = *v33;
        if (v3 == *v33)
          goto LABEL_47;
      }
      if (v35)
        v39 = v35;
      else
        v39 = v33;
LABEL_46:
      v33 = sub_1C55E07C8(v28, (uint64_t)&v83, &v83, v39);
      *v33 = v83;
      v33[1] = 0;
      goto LABEL_47;
    }
    v15 = 0;
    v16 = 1;
    while (v14 != (void *)-4096)
    {
      if (v15)
        v17 = 0;
      else
        v17 = v14 == (void *)-8192;
      if (v17)
        v15 = v13;
      v18 = v12 + v16++;
      v12 = v18 & v11;
      v13 = (_QWORD *)(v8 + 16 * (v18 & v11));
      v14 = (void *)*v13;
      if (v7 == (void *)*v13)
        goto LABEL_24;
    }
    if (v15)
      v19 = v15;
    else
      v19 = v13;
LABEL_23:
    v13 = sub_1C55E07C8(v5, (uint64_t)&v83, &v83, v19);
    *v13 = v83;
    v13[1] = 0;
    v20 = *(_DWORD *)(v3 + 20) & 0x7FFFFFF;
    v10 = -v20;
    v7 = *(void **)(v3 - 32 * v20);
    goto LABEL_24;
  }
  if (v4 != 62)
  {
    if (v4 == 5)
    {
      if (*(_WORD *)(v3 + 18) != 34)
        v3 = 0;
    }
    else
    {
      v3 = 0;
    }
  }
  v40 = *(_QWORD *)(a1 + 8);
  v41 = *(_DWORD *)(v3 + 20);
  if ((v41 & 0x40000000) != 0)
    v42 = *(void ***)(v3 - 8);
  else
    v42 = (void **)(v3 - 32 * (v41 & 0x7FFFFFF));
  v43 = *v42;
  v83 = *v42;
  v44 = v40 + 8;
  if ((*(_BYTE *)v40 & 1) != 0)
  {
    v45 = 32;
  }
  else
  {
    v45 = *(_DWORD *)(v40 + 16);
    if (!v45)
    {
      v56 = 0;
      goto LABEL_68;
    }
    v44 = *(_QWORD *)(v40 + 8);
  }
  v46 = v45 - 1;
  v47 = (v45 - 1) & ((v43 >> 4) ^ (v43 >> 9));
  v48 = (_QWORD *)(v44 + 16 * v47);
  v49 = (void *)*v48;
  if (v43 != (void *)*v48)
  {
    v50 = 0;
    v51 = 1;
    while (v49 != (void *)-4096)
    {
      if (v50)
        v52 = 0;
      else
        v52 = v49 == (void *)-8192;
      if (v52)
        v50 = v48;
      v53 = v47 + v51++;
      v47 = v53 & v46;
      v48 = (_QWORD *)(v44 + 16 * (v53 & v46));
      v49 = (void *)*v48;
      if (v43 == (void *)*v48)
        goto LABEL_63;
    }
    if (v50)
      v56 = v50;
    else
      v56 = v48;
LABEL_68:
    v48 = sub_1C55E07C8(v40, (uint64_t)&v83, &v83, v56);
    *v48 = v83;
    v48[1] = 0;
    v41 = *(_DWORD *)(v3 + 20);
    if ((v41 & 0x40000000) != 0)
      goto LABEL_69;
LABEL_64:
    v54 = v41 & 0x7FFFFFF;
    v55 = v3 - 32 * v54;
    goto LABEL_70;
  }
LABEL_63:
  if ((v41 & 0x40000000) == 0)
    goto LABEL_64;
LABEL_69:
  v55 = *(_QWORD *)(v3 - 8);
  v54 = v41 & 0x7FFFFFF;
LABEL_70:
  v57 = (uint64_t *)v48[1];
  v83 = v85;
  v84 = 0x500000000;
  v58 = 32 * v54 - 32;
  if (v58 >= 0xA1)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v83, (uint64_t)v85, (uint64_t)v58 >> 5, 8);
    v59 = v84;
    v61 = (llvm::Value *)v83;
    v60 = v84;
  }
  else
  {
    v59 = 0;
    v60 = 0;
    v61 = (llvm::Value *)v85;
  }
  if (v54 != 1)
  {
    v62 = (uint64_t *)(v55 + 32);
    v63 = (_QWORD *)((char *)v61 + 8 * v59);
    v64 = 32 * v54 - 32;
    do
    {
      v65 = *v62;
      v62 += 4;
      *v63++ = v65;
      v64 -= 32;
    }
    while (v64);
    v61 = (llvm::Value *)v83;
  }
  v66 = v60 + (v58 >> 5);
  LODWORD(v84) = v60 + (v58 >> 5);
  v67 = 24;
  if (*(_BYTE *)(v3 + 16) == 62)
    v67 = 64;
  ElementPtr = llvm::ConstantExpr::getGetElementPtr(*(llvm::GetElementPtrInst **)(v3 + v67), v57, v61, v66, (*(_BYTE *)(v3 + 17) & 2) != 0, 0, 0);
  v69 = *(_QWORD *)(a1 + 8);
  v82 = v3;
  v70 = v69 + 8;
  if ((*(_BYTE *)v69 & 1) != 0)
  {
    v71 = 32;
  }
  else
  {
    v71 = *(_DWORD *)(v69 + 16);
    if (!v71)
    {
      v80 = 0;
      goto LABEL_93;
    }
    v70 = *(_QWORD *)(v69 + 8);
  }
  v72 = v71 - 1;
  v73 = (v71 - 1) & ((v3 >> 4) ^ (v3 >> 9));
  v74 = (_QWORD *)(v70 + 16 * v73);
  v75 = *v74;
  if (v3 == *v74)
    goto LABEL_94;
  v76 = 0;
  v77 = 1;
  while (v75 != -4096)
  {
    if (v76)
      v78 = 0;
    else
      v78 = v75 == -8192;
    if (v78)
      v76 = v74;
    v79 = v73 + v77++;
    v73 = v79 & v72;
    v74 = (_QWORD *)(v70 + 16 * (v79 & v72));
    v75 = *v74;
    if (v3 == *v74)
      goto LABEL_94;
  }
  if (v76)
    v80 = v76;
  else
    v80 = v74;
LABEL_93:
  v74 = sub_1C55E07C8(v69, (uint64_t)&v82, &v82, v80);
  *v74 = v82;
  v74[1] = 0;
LABEL_94:
  v74[1] = ElementPtr;
  if (v83 != v85)
    free(v83);
  return 1;
}

void sub_1C5600F84()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5600F98(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E8171428;
  result[1] = v3;
  return result;
}

uint64_t sub_1C5600FCC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E8171428;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C5600FE8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  llvm::Constant *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  uint64_t v18;
  int v19;
  uint64_t *v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t **v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  int v29;
  int v30;
  unsigned int v31;
  _QWORD *v32;
  uint64_t v33;
  _QWORD *v34;
  int v35;
  BOOL v36;
  unsigned int v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  int v42;
  unsigned int v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  int v47;
  BOOL v48;
  unsigned int v49;
  _QWORD *v50;
  llvm::UndefValue *v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  int v55;
  unsigned int v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  int v60;
  BOOL v61;
  unsigned int v62;
  _QWORD *v63;
  uint64_t v65;

  v3 = *a2;
  v4 = (llvm::Constant *)llvm::PointerType::get(**(llvm::PointerType ***)(*(_QWORD *)*a2 + 16), (llvm::Type *)0x40);
  if (*(_BYTE *)(v3 + 16) != 77)
  {
    v18 = *(_QWORD *)(a1 + 8);
    v19 = *(_DWORD *)(v3 + 20);
    if ((v19 & 0x40000000) != 0)
      v20 = *(uint64_t **)(v3 - 8);
    else
      v20 = (uint64_t *)(v3 - 32 * (v19 & 0x7FFFFFF));
    v39 = *v20;
    v65 = *v20;
    v40 = v18 + 8;
    if ((*(_BYTE *)v18 & 1) != 0)
    {
      v41 = 32;
    }
    else
    {
      v41 = *(_DWORD *)(v18 + 16);
      if (!v41)
      {
        v50 = 0;
        goto LABEL_60;
      }
      v40 = *(_QWORD *)(v18 + 8);
    }
    v42 = v41 - 1;
    v43 = (v41 - 1) & ((v39 >> 4) ^ (v39 >> 9));
    v44 = (_QWORD *)(v40 + 16 * v43);
    v45 = *v44;
    if (v39 == *v44)
      goto LABEL_61;
    v46 = 0;
    v47 = 1;
    while (v45 != -4096)
    {
      if (v46)
        v48 = 0;
      else
        v48 = v45 == -8192;
      if (v48)
        v46 = v44;
      v49 = v43 + v47++;
      v43 = v49 & v42;
      v44 = (_QWORD *)(v40 + 16 * (v49 & v42));
      v45 = *v44;
      if (v39 == *v44)
        goto LABEL_61;
    }
    if (v46)
      v50 = v46;
    else
      v50 = v44;
LABEL_60:
    v44 = sub_1C55E07C8(v18, (uint64_t)&v65, &v65, v50);
    *v44 = v65;
    v44[1] = 0;
LABEL_61:
    v51 = (llvm::UndefValue *)v44[1];
    if (*(llvm::Constant **)v51 != v4)
      v51 = sub_1C537D3B8((llvm *)0x31, (uint64_t)v51, v4, 0);
    v52 = *(_QWORD *)(a1 + 8);
    v65 = v3;
    v53 = v52 + 8;
    if ((*(_BYTE *)v52 & 1) != 0)
    {
      v54 = 32;
    }
    else
    {
      v54 = *(_DWORD *)(v52 + 16);
      if (!v54)
      {
        v63 = 0;
        goto LABEL_78;
      }
      v53 = *(_QWORD *)(v52 + 8);
    }
    v55 = v54 - 1;
    v56 = (v54 - 1) & ((v3 >> 4) ^ (v3 >> 9));
    v57 = (_QWORD *)(v53 + 16 * v56);
    v58 = *v57;
    if (v3 == *v57)
    {
LABEL_79:
      v57[1] = v51;
      return 1;
    }
    v59 = 0;
    v60 = 1;
    while (v58 != -4096)
    {
      if (v59)
        v61 = 0;
      else
        v61 = v58 == -8192;
      if (v61)
        v59 = v57;
      v62 = v56 + v60++;
      v56 = v62 & v55;
      v57 = (_QWORD *)(v53 + 16 * (v62 & v55));
      v58 = *v57;
      if (v3 == *v57)
        goto LABEL_79;
    }
    if (v59)
      v63 = v59;
    else
      v63 = v57;
LABEL_78:
    v57 = sub_1C55E07C8(v52, (uint64_t)&v65, &v65, v63);
    *v57 = v65;
    v57[1] = 0;
    goto LABEL_79;
  }
  v5 = *(_QWORD *)(a1 + 8);
  v7 = (uint64_t *)(v3 - 32);
  v6 = *(_QWORD *)(v3 - 32);
  v65 = v6;
  v8 = v5 + 8;
  if ((*(_BYTE *)v5 & 1) != 0)
  {
    v9 = 32;
  }
  else
  {
    v9 = *(_DWORD *)(v5 + 16);
    if (!v9)
    {
      v21 = 0;
LABEL_19:
      v12 = sub_1C55E07C8(v5, (uint64_t)&v65, &v65, v21);
      *v12 = v65;
      v12[1] = 0;
      v6 = *v7;
      goto LABEL_20;
    }
    v8 = *(_QWORD *)(v5 + 8);
  }
  v10 = v9 - 1;
  v11 = (v9 - 1) & ((v6 >> 4) ^ (v6 >> 9));
  v12 = (_QWORD *)(v8 + 16 * v11);
  v13 = *v12;
  if (v6 != *v12)
  {
    v14 = 0;
    v15 = 1;
    while (v13 != -4096)
    {
      if (v14)
        v16 = 0;
      else
        v16 = v13 == -8192;
      if (v16)
        v14 = v12;
      v17 = v11 + v15++;
      v11 = v17 & v10;
      v12 = (_QWORD *)(v8 + 16 * (v17 & v10));
      v13 = *v12;
      if (v6 == *v12)
        goto LABEL_20;
    }
    if (v14)
      v21 = v14;
    else
      v21 = v12;
    goto LABEL_19;
  }
LABEL_20:
  v22 = v12[1];
  if (v6)
  {
    **(_QWORD **)(v3 - 16) = *(_QWORD *)(v3 - 24);
    v23 = *(_QWORD *)(v3 - 24);
    if (v23)
      *(_QWORD *)(v23 + 16) = *(_QWORD *)(v3 - 16);
  }
  *v7 = v22;
  if (v22)
  {
    v26 = *(_QWORD *)(v22 + 8);
    v24 = (uint64_t **)(v22 + 8);
    v25 = v26;
    *(_QWORD *)(v3 - 24) = v26;
    if (v26)
      *(_QWORD *)(v25 + 16) = v3 - 24;
    *(_QWORD *)(v3 - 16) = v24;
    *v24 = v7;
  }
  *(_QWORD *)v3 = v4;
  v27 = *(_QWORD *)(a1 + 8);
  v65 = v3;
  v28 = v27 + 8;
  if ((*(_BYTE *)v27 & 1) != 0)
  {
    v29 = 32;
  }
  else
  {
    v29 = *(_DWORD *)(v27 + 16);
    if (!v29)
    {
      v38 = 0;
LABEL_42:
      v32 = sub_1C55E07C8(v27, (uint64_t)&v65, &v65, v38);
      *v32 = v65;
      v32[1] = 0;
      goto LABEL_43;
    }
    v28 = *(_QWORD *)(v27 + 8);
  }
  v30 = v29 - 1;
  v31 = (v29 - 1) & ((v3 >> 4) ^ (v3 >> 9));
  v32 = (_QWORD *)(v28 + 16 * v31);
  v33 = *v32;
  if (v3 != *v32)
  {
    v34 = 0;
    v35 = 1;
    while (v33 != -4096)
    {
      if (v34)
        v36 = 0;
      else
        v36 = v33 == -8192;
      if (v36)
        v34 = v32;
      v37 = v31 + v35++;
      v31 = v37 & v30;
      v32 = (_QWORD *)(v28 + 16 * (v37 & v30));
      v33 = *v32;
      if (v3 == *v32)
        goto LABEL_43;
    }
    if (v34)
      v38 = v34;
    else
      v38 = v32;
    goto LABEL_42;
  }
LABEL_43:
  v32[1] = v3;
  return 1;
}

void sub_1C56013A8()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C56013BC(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x20uLL);
  *(_QWORD *)v2 = &off_1E8171470;
  result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((_QWORD *)v2 + 3) = *(_QWORD *)(a1 + 24);
  return result;
}

__n128 sub_1C56013FC(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E8171470;
  result = *(__n128 *)(a1 + 8);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C5601424(uint64_t a1, char **a2)
{
  char *v3;
  uint64_t v4;
  uint64_t v5;
  char *v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  char **v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v24;

  v3 = *a2;
  v4 = *(_QWORD *)(a1 + 8);
  v6 = *a2 - 32;
  v5 = *(_QWORD *)v6;
  v24 = *(_QWORD *)v6;
  v7 = v4 + 8;
  if ((*(_BYTE *)v4 & 1) != 0)
  {
    v8 = 32;
  }
  else
  {
    v8 = *(_DWORD *)(v4 + 16);
    if (!v8)
    {
      v17 = 0;
LABEL_16:
      v11 = sub_1C55E07C8(v4, (uint64_t)&v24, &v24, v17);
      *v11 = v24;
      v11[1] = 0;
      v5 = *(_QWORD *)v6;
      goto LABEL_17;
    }
    v7 = *(_QWORD *)(v4 + 8);
  }
  v9 = v8 - 1;
  v10 = (v8 - 1) & ((v5 >> 4) ^ (v5 >> 9));
  v11 = (_QWORD *)(v7 + 16 * v10);
  v12 = *v11;
  if (v5 != *v11)
  {
    v13 = 0;
    v14 = 1;
    while (v12 != -4096)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v12 == -8192;
      if (v15)
        v13 = v11;
      v16 = v10 + v14++;
      v10 = v16 & v9;
      v11 = (_QWORD *)(v7 + 16 * (v16 & v9));
      v12 = *v11;
      if (v5 == *v11)
        goto LABEL_17;
    }
    if (v13)
      v17 = v13;
    else
      v17 = v11;
    goto LABEL_16;
  }
LABEL_17:
  v18 = v11[1];
  if (v5)
  {
    **((_QWORD **)v3 - 2) = *((_QWORD *)v3 - 3);
    v19 = *((_QWORD *)v3 - 3);
    if (v19)
      *(_QWORD *)(v19 + 16) = *((_QWORD *)v3 - 2);
  }
  *(_QWORD *)v6 = v18;
  if (v18)
  {
    v22 = *(_QWORD *)(v18 + 8);
    v20 = (char **)(v18 + 8);
    v21 = v22;
    *((_QWORD *)v3 - 3) = v22;
    if (v22)
      *(_QWORD *)(v21 + 16) = v3 - 24;
    *((_QWORD *)v3 - 2) = v20;
    *v20 = v6;
  }
  sub_1C5601564(*(llvm::ConstantInt ***)(a1 + 16), v3, *(_QWORD *)(a1 + 24));
  return 0;
}

unsigned __int8 *sub_1C5601564(llvm::ConstantInt **a1, char *a2, uint64_t a3)
{
  unsigned __int8 *v5;
  llvm::Type *v8;
  const char *v9;
  unsigned int PrimitiveSizeInBits;
  llvm::ConstantInt *v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v15;
  unsigned int v16;
  const llvm::APInt *v17;
  llvm::ValueHandleBase *v18;
  const llvm::APInt *v19;
  llvm::ValueHandleBase *v20;
  llvm::Value *v21;
  llvm::Value *v22;
  llvm::MDNode *Impl;
  llvm::Type *v24;
  llvm::Type *v25;
  unsigned __int8 *v26;
  unsigned __int8 *v27;
  unsigned __int8 *v28;
  llvm::Type *v29;
  uint64_t v30;
  unsigned __int8 *v31;
  _QWORD *v32;
  unsigned __int8 *v33;
  uint64_t v34;
  char v35;
  char v36;
  char *v37;
  char *v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 *v43;
  llvm::Type *v44;
  char *v45;
  char *v46;
  unsigned __int8 **v47;
  int v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  unsigned __int8 *v51;
  uint64_t v52;
  _DWORD *v53;
  int v54;
  _DWORD *v55;
  llvm::PointerType *v56;
  uint64_t v57;
  _DWORD *v58;
  int v59;
  _DWORD *v60;
  int v61;
  char v62[32];
  __int16 v63;
  unint64_t v64;
  unsigned int v65;
  void *v66;
  unsigned int v67;
  unsigned __int8 *v68[4];
  __int16 v69;
  unsigned __int8 *v70;
  void *v71;
  uint64_t v72;
  _BYTE v73[32];
  uint64_t v74;
  char *v75;
  llvm::ConstantInt *v76;
  void **v77;
  _QWORD *v78;
  uint64_t v79;
  int v80;
  __int16 v81;
  char v82;
  uint64_t v83;
  uint64_t v84;
  void *v85;
  _QWORD v86[3];

  v86[1] = *MEMORY[0x1E0C80C00];
  if (!byte_1ED807E08
    || **(unsigned __int8 **)(*(_QWORD *)a3 - 8 * *(unsigned int *)(*(_QWORD *)a3 + 8) + 8) - 4 < 0x1F)
  {
    return (unsigned __int8 *)a2;
  }
  v8 = *(llvm::Type **)a2;
  PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits(*(llvm::Type **)a2);
  if ((_DWORD)v9 == 1)
  {
    v8 = *(llvm::Type **)a2;
  }
  if (*((_BYTE *)v8 + 8) != 15)
    v8 = 0;
  if (v8)
    PrimitiveSizeInBits = *(_DWORD *)(llvm::DataLayout::getPointerAlignElem((llvm::DataLayout *)(a1 + 34), *((_DWORD *)v8 + 2) >> 8)+ 4);
  v11 = *a1;
  v67 = 1;
  v66 = 0;
  v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a3 - 8 * *(unsigned int *)(*(_QWORD *)a3 + 8) + 8) + 128);
  v13 = (_QWORD *)(v12 + 24);
  if (*(_DWORD *)(v12 + 32) >= 0x41u)
    v13 = (_QWORD *)*v13;
  if (*v13 == 43 && PrimitiveSizeInBits >= 0x11)
  {
    LODWORD(v72) = PrimitiveSizeInBits;
    if (PrimitiveSizeInBits > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v71, 0, 0);
      v66 = v71;
      v67 = v72;
      LODWORD(v72) = PrimitiveSizeInBits;
      llvm::APInt::initSlowCase((llvm::APInt *)&v71, 0xFFFFLL, 0);
      v15 = (unint64_t)v71;
      v16 = v72;
    }
    else
    {
      v66 = 0;
      v67 = PrimitiveSizeInBits;
      v15 = (unsigned __int16)(0xFFFFFFFFFFFFFFFFLL >> -(char)PrimitiveSizeInBits);
      v16 = PrimitiveSizeInBits;
    }
    v64 = v15;
    v65 = v16;
    llvm::APInt::operator+=((uint64_t)&v64, 1uLL);
    v18 = llvm::ConstantInt::get(v11, (llvm::LLVMContext *)&v66, v17);
    v20 = llvm::ConstantInt::get(v11, (llvm::LLVMContext *)&v64, v19);
    v71 = llvm::ValueAsMetadata::get(v18, v21);
    v72 = (uint64_t)llvm::ValueAsMetadata::get(v20, v22);
    Impl = (llvm::MDNode *)llvm::MDTuple::getImpl((uint64_t *)v11, &v71, 2, 0, 1);
    v24 = *(llvm::Type **)a2;
    LODWORD(v71) = PrimitiveSizeInBits;
    switch(PrimitiveSizeInBits)
    {
      case 0x40u:
        v25 = (llvm::Type *)(*(_QWORD *)v11 + 1984);
        break;
      case 0x20u:
        v25 = (llvm::Type *)(*(_QWORD *)v11 + 1960);
        break;
      case 0x80u:
        v25 = (llvm::Type *)(*(_QWORD *)v11 + 2008);
        break;
      default:
        v53 = sub_1C5270984(*(_QWORD *)v11 + 2168, &v71);
        v25 = (llvm::Type *)*((_QWORD *)v53 + 1);
        if (!v25)
        {
          v25 = (llvm::Type *)sub_1C484358C(*(_QWORD *)v11 + 2040, 24, 3);
          v54 = (int)v71;
          *(_QWORD *)v25 = v11;
          *((_QWORD *)v25 + 2) = 0;
          *((_QWORD *)v25 + 1) = (v54 << 8) | 0xDu;
          *((_QWORD *)v53 + 1) = v25;
        }
        break;
    }
    if (v24 == v25)
    {
      v33 = (unsigned __int8 *)a2;
      v5 = (unsigned __int8 *)a2;
      if (Impl)
        goto LABEL_47;
      goto LABEL_45;
    }
    v26 = 0;
    v71 = v73;
    v72 = 0x200000000;
    v76 = v11;
    v77 = &v85;
    v78 = v86;
    v79 = 0;
    v80 = 0;
    v81 = 512;
    v82 = 7;
    v83 = 0;
    v84 = 0;
    v85 = &unk_1E8167888;
    v86[0] = &unk_1E8167A08;
    v27 = (unsigned __int8 *)*((_QWORD *)a2 + 6);
    v74 = *((_QWORD *)a2 + 5);
    v75 = a2 + 24;
    v68[0] = v27;
    if (v27)
    {
      llvm::MetadataTracking::track((uint64_t)v68, v27, 2);
      v26 = v68[0];
    }
    sub_1C4774EF4((uint64_t)&v71, 0, (uint64_t)v26);
    if (v68[0])
      llvm::MetadataTracking::untrack((uint64_t)v68, v68[0]);
    v28 = (unsigned __int8 *)*((_QWORD *)a2 - 4);
    v29 = (llvm::Type *)(*(_DWORD *)(*(_QWORD *)v28 + 8) >> 8);
    LODWORD(v68[0]) = PrimitiveSizeInBits;
    switch(PrimitiveSizeInBits)
    {
      case 0x40u:
        v30 = llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)v11 + 1984), v29);
        v69 = 257;
        v31 = sub_1C5098D9C((uint64_t *)&v71, v28, v30, (uint64_t)v68);
        v32 = (_QWORD *)(*(_QWORD *)v11 + 1984);
        break;
      case 0x20u:
        v34 = llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)v11 + 1960), v29);
        v69 = 257;
        v31 = sub_1C5098D9C((uint64_t *)&v71, v28, v34, (uint64_t)v68);
        v32 = (_QWORD *)(*(_QWORD *)v11 + 1960);
        break;
      case 0x80u:
        v52 = llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)v11 + 2008), v29);
        v69 = 257;
        v31 = sub_1C5098D9C((uint64_t *)&v71, v28, v52, (uint64_t)v68);
        v32 = (_QWORD *)(*(_QWORD *)v11 + 2008);
        break;
      default:
        v55 = sub_1C5270984(*(_QWORD *)v11 + 2168, v68);
        v56 = (llvm::PointerType *)*((_QWORD *)v55 + 1);
        if (!v56)
        {
          v56 = (llvm::PointerType *)sub_1C484358C(*(_QWORD *)v11 + 2040, 24, 3);
          v59 = (int)v68[0];
          *(_QWORD *)v56 = v11;
          *((_QWORD *)v56 + 2) = 0;
          *((_QWORD *)v56 + 1) = (v59 << 8) | 0xDu;
          *((_QWORD *)v55 + 1) = v56;
        }
        v57 = llvm::PointerType::get(v56, v29);
        v69 = 257;
        v31 = sub_1C5098D9C((uint64_t *)&v71, v28, v57, (uint64_t)v68);
        LODWORD(v68[0]) = PrimitiveSizeInBits;
        v58 = sub_1C5270984(*(_QWORD *)v11 + 2168, v68);
        v32 = (_QWORD *)*((_QWORD *)v58 + 1);
        if (!v32)
        {
          v60 = v58;
          v32 = (_QWORD *)sub_1C484358C(*(_QWORD *)v11 + 2040, 24, 3);
          v61 = (int)v68[0];
          *v32 = v11;
          v32[2] = 0;
          v32[1] = (v61 << 8) | 0xDu;
          *((_QWORD *)v60 + 1) = v32;
        }
        break;
    }
    v63 = 257;
    llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v74 + 56) + 40) + 272, (uint64_t)v32);
    v36 = v35;
    v37 = (char *)operator new(0x60uLL);
    v38 = v37;
    v33 = (unsigned __int8 *)(v37 + 32);
    *((_QWORD *)v37 + 2) = 0;
    *((_QWORD *)v37 + 3) = v37 + 32;
    v69 = 257;
    *((_QWORD *)v37 + 4) = v32;
    *((_QWORD *)v37 + 5) = 0;
    *((_WORD *)v37 + 24) = 60;
    *((_DWORD *)v37 + 13) = 1;
    *(_OWORD *)(v37 + 56) = 0u;
    *(_OWORD *)(v37 + 72) = 0u;
    *((_DWORD *)v37 + 22) = 0;
    *(_QWORD *)v37 = v31;
    *((_QWORD *)v37 + 1) = 0;
    if (v31)
    {
      v41 = *((_QWORD *)v31 + 1);
      v40 = v31 + 8;
      v39 = v41;
      *((_QWORD *)v37 + 1) = v41;
      if (v41)
        *(_QWORD *)(v39 + 16) = v37 + 8;
      *((_QWORD *)v37 + 2) = v40;
      *v40 = v37;
    }
    *((_WORD *)v37 + 25) = 2 * (v36 & 0x3F);
    v37[92] = 1;
    llvm::Value::setName((uint64_t ***)v37 + 4, (uint64_t)v68);
    (*(void (**)(_QWORD *, unsigned __int8 *, char *, uint64_t, char *))(*v78 + 16))(v78, v33, v62, v74, v75);
    if (!(_DWORD)v72)
    {
LABEL_40:
      *((_WORD *)v38 + 25) = *((_WORD *)v38 + 25) & 0xFF81 | (2
                                                            * __clz(1 << ((unint64_t)*((unsigned __int16 *)a2
                                                                                              + 9) >> 1))) ^ 0x7E;
      if (v8)
      {
        v69 = 257;
        v42 = 48;
        v43 = v33;
        v44 = v8;
      }
      else
      {
        v44 = *(llvm::Type **)a2;
        v69 = 257;
        v42 = 49;
        v43 = v33;
      }
      v5 = sub_1C4773E38((uint64_t *)&v71, v42, v43, (uint64_t)v44, (uint64_t)v68);
      llvm::Value::doRAUW((llvm::ValueAsMetadata *)a2, (llvm::Value *)v5, (llvm::Value *)1);
      if (v71 == v73)
      {
        if (Impl)
          goto LABEL_47;
      }
      else
      {
        free(v71);
        if (Impl)
          goto LABEL_47;
      }
LABEL_45:
      if (!*((_QWORD *)v33 + 6) && (v33[23] & 0x20) == 0)
      {
LABEL_48:
        if (v65 >= 0x41 && v64)
          MEMORY[0x1CAA32F9C](v64, 0x1000C8000313F17);
        goto LABEL_51;
      }
LABEL_47:
      llvm::Value::setMetadata((llvm::Value *)v33, 4, Impl);
      goto LABEL_48;
    }
    v45 = (char *)v71;
    v46 = (char *)v71 + 16 * v72;
    v47 = (unsigned __int8 **)(v38 + 80);
    while (1)
    {
      v48 = *(_DWORD *)v45;
      v49 = (unsigned __int8 *)*((_QWORD *)v45 + 1);
      if (v49)
      {
        if (!v48)
        {
          v70 = (unsigned __int8 *)*((_QWORD *)v45 + 1);
          llvm::MetadataTracking::track((uint64_t)&v70, v49, 2);
          v50 = *v47;
          goto LABEL_65;
        }
      }
      else
      {
        v50 = *v47;
        if (!*v47 && (v38[55] & 0x20) == 0)
          goto LABEL_62;
        if (!v48)
        {
          v70 = 0;
LABEL_65:
          if (v50)
            llvm::MetadataTracking::untrack((uint64_t)(v38 + 80), v50);
          v51 = v70;
          *v47 = v70;
          if (v51)
            llvm::MetadataTracking::retrack((uint64_t)&v70, v51, (uint64_t)(v38 + 80));
          goto LABEL_62;
        }
      }
      llvm::Value::setMetadata((llvm::Value *)v33, *(_DWORD *)v45, (llvm::MDNode *)v49);
LABEL_62:
      v45 += 16;
      if (v45 == v46)
        goto LABEL_40;
    }
  }
  v5 = (unsigned __int8 *)a2;
LABEL_51:
  if (v67 >= 0x41 && v66)
    MEMORY[0x1CAA32F9C](v66, 0x1000C8000313F17);
  return v5;
}

void sub_1C5601D2C()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5601D40()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E81714B8;
  return result;
}

void sub_1C5601D64(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E81714B8;
}

uint64_t sub_1C5601D7C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD **v8;
  uint64_t v9;

  v2 = *a2;
  v3 = *(unsigned __int8 *)(*a2 + 16);
  if ((v3 == 75 || v3 == 5 && *(_WORD *)(v2 + 18) == 47) && !*(_QWORD *)(v2 + 8))
  {
    v4 = *(_DWORD *)(v2 + 20);
    if ((v4 & 0x40000000) != 0)
    {
      v6 = *(_QWORD *)(v2 - 8);
      v5 = v4 & 0x7FFFFFF;
      if (!v5)
        return 0;
    }
    else
    {
      v5 = v4 & 0x7FFFFFF;
      v6 = v2 - 32 * v5;
      if (!v5)
        return 0;
    }
    v7 = 32 * v5;
    v8 = (_QWORD **)(v6 + 16);
    do
    {
      if (*(v8 - 2))
      {
        **v8 = *(v8 - 1);
        v9 = (uint64_t)*(v8 - 1);
        if (v9)
          *(_QWORD *)(v9 + 16) = *v8;
      }
      *(v8 - 2) = 0;
      v8 += 4;
      v7 -= 32;
    }
    while (v7);
  }
  return 0;
}

_QWORD *sub_1C5601E0C@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  _QWORD *result;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;

  v14 = 0;
  result = (_QWORD *)sub_1C5601EC4(a1, a2, &v14);
  v7 = v14;
  if ((_DWORD)result)
  {
    v12 = a1 + 8;
    if ((*(_BYTE *)a1 & 1) != 0)
    {
      v13 = 4;
    }
    else
    {
      v12 = *(_QWORD *)(a1 + 8);
      v13 = *(unsigned int *)(a1 + 16);
    }
    v11 = 0;
    v10 = v12 + 8 * v13;
  }
  else
  {
    result = sub_1C5601F74((_DWORD *)a1, (uint64_t)a2, a2, v14);
    v7 = result;
    *result = *a2;
    v8 = a1 + 8;
    if ((*(_BYTE *)a1 & 1) != 0)
    {
      v9 = 4;
    }
    else
    {
      v8 = *(_QWORD *)(a1 + 8);
      v9 = *(unsigned int *)(a1 + 16);
    }
    v10 = v8 + 8 * v9;
    v11 = 1;
  }
  *(_QWORD *)a3 = v7;
  *(_QWORD *)(a3 + 8) = v10;
  *(_BYTE *)(a3 + 16) = v11;
  return result;
}

uint64_t sub_1C5601EC4(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_8;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  v7 = (_QWORD *)(v3 + 8 * v6);
  v8 = *v7;
  if (*a2 == *v7)
  {
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v9)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v9 = v7;
      v13 = v6 + v10++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 8 * (v13 & v5));
      v8 = *v7;
      if (*a2 == *v7)
        goto LABEL_8;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_8:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C5601F74(_DWORD *a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  uint64_t v8;
  _QWORD *v9;

  v4 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v5 = 4;
  else
    v5 = a1[4];
  if (4 * v4 + 4 >= 3 * v5)
  {
    v5 *= 2;
  }
  else if (v5 + ~v4 - a1[1] > v5 >> 3)
  {
    goto LABEL_5;
  }
  v8 = (uint64_t)a1;
  sub_1C5602030((uint64_t)a1, v5);
  v9 = 0;
  sub_1C5601EC4(v8, a3, &v9);
  a1 = (_DWORD *)v8;
  a4 = v9;
LABEL_5:
  *a1 += 2;
  if (*a4 != -4096)
    --a1[1];
  return a4;
}

uint64_t sub_1C5602030(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD v14[5];

  v14[4] = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(_QWORD **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C627FC38(a1, v6, &v6[v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = v14;
  for (i = 8; i != 40; i += 8)
  {
    v10 = *(_QWORD *)(a1 + i);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
      *v8++ = v10;
  }
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C627FC38(a1, v14, v8);
}

unsigned __int8 *sub_1C5602198(unsigned int *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  llvm::BasicBlock *v9;
  uint64_t v10;
  unsigned __int8 *v11;
  uint64_t *v12;
  char *FirstNonPHIOrDbgOrLifetime;
  unsigned __int8 *v14;
  unsigned __int8 *v15;
  uint64_t v16;
  uint64_t v17;
  char v18;
  char v19;
  char *v20;
  char *v21;
  llvm::Value *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  unsigned __int8 *v29;
  unsigned __int8 *v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  unsigned __int8 *v34;
  const llvm::APInt *v35;
  uint64_t v36;
  llvm::ConstantInt *v37;
  unsigned int v38;
  unint64_t v39;
  llvm::ValueHandleBase *v40;
  llvm::GetElementPtrInst *v41;
  unsigned __int8 *v42;
  uint64_t v43;
  unsigned __int8 *v44;
  char *v46;
  char *v47;
  unsigned __int8 **v48;
  int v49;
  unsigned __int8 *v50;
  unsigned __int8 *v51;
  unsigned __int8 *v52;
  unsigned __int8 *v53;
  int v54;
  unsigned __int8 *v55;
  unsigned int v56;
  __int16 v57;
  unsigned __int8 *v58;
  _QWORD v59[4];
  __int16 v60;
  void *v61;
  uint64_t v62;
  _BYTE v63[32];
  uint64_t v64;
  char *v65;
  uint64_t v66;
  void **v67;
  _QWORD *v68;
  uint64_t v69;
  int v70;
  __int16 v71;
  char v72;
  uint64_t v73;
  uint64_t v74;
  void *v75;
  _QWORD v76[3];

  v76[1] = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 56);
  v5 = (*(uint64_t (**)(_QWORD, uint64_t))(**((_QWORD **)a1 + 2) + 24))(*((_QWORD *)a1 + 2), v4);
  v6 = ***((_QWORD ***)a1 + 1);
  v61 = v63;
  v62 = 0x200000000;
  v66 = v6;
  v67 = &v75;
  v68 = v76;
  v69 = 0;
  v70 = 0;
  v71 = 512;
  v72 = 7;
  v64 = 0;
  v65 = 0;
  v73 = 0;
  v74 = 0;
  v75 = &unk_1E8167888;
  v76[0] = &unk_1E8167A08;
  v7 = *(unsigned __int8 *)(a2 + 16);
  if (v7 == 83)
  {
    v8 = *(_QWORD *)(v4 + 80);
    if (v8)
      v9 = (llvm::BasicBlock *)(v8 - 24);
    else
      v9 = 0;
  }
  else
  {
    v9 = *(llvm::BasicBlock **)(a2 + 40);
  }
  v10 = *((_QWORD *)a1 + 3);
  v55 = 0;
  if ((sub_1C5602798(*(_QWORD *)v10, *(_DWORD *)(v10 + 16), (uint64_t)v9, &v55) & 1) != 0)
    v11 = v55;
  else
    v11 = (unsigned __int8 *)(*(_QWORD *)v10 + 16 * *(unsigned int *)(v10 + 16));
  if (v11 != (unsigned __int8 *)(**((_QWORD **)a1 + 3) + 16 * *(unsigned int *)(*((_QWORD *)a1 + 3) + 16)))
  {
    v12 = (uint64_t *)*((_QWORD *)v11 + 1);
    goto LABEL_28;
  }
  FirstNonPHIOrDbgOrLifetime = llvm::BasicBlock::getFirstNonPHIOrDbgOrLifetime(v9, 1);
  v64 = *((_QWORD *)FirstNonPHIOrDbgOrLifetime + 5);
  v65 = FirstNonPHIOrDbgOrLifetime + 24;
  v14 = (unsigned __int8 *)*((_QWORD *)FirstNonPHIOrDbgOrLifetime + 6);
  v55 = v14;
  if (v14)
  {
    llvm::MetadataTracking::track((uint64_t)&v55, v14, 2);
    v15 = v55;
  }
  else
  {
    v15 = 0;
  }
  sub_1C4774EF4((uint64_t)&v61, 0, (uint64_t)v15);
  if (v55)
    llvm::MetadataTracking::untrack((uint64_t)&v55, v55);
  v54 = v7;
  if ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v5 + 176))(v5, 25))
  {
    (*(void (**)(unsigned __int8 **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v5 + 128))(&v55, v5, 25);
    v16 = *(_QWORD *)(*(uint64_t (**)(unsigned __int8 *))(*(_QWORD *)v55 + 32))(v55);
    v53 = v55;
    v55 = 0;
    if (v53)
      (*(void (**)(unsigned __int8 *))(*(_QWORD *)v53 + 8))(v53);
  }
  else
  {
    v16 = 0;
  }
  v17 = *(_QWORD *)(v16 + 24);
  v60 = 257;
  llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v64 + 56) + 40) + 272, v17);
  v19 = v18;
  v20 = (char *)operator new(0x60uLL);
  v21 = v20;
  v22 = (llvm::Value *)(v20 + 32);
  *((_QWORD *)v20 + 1) = 0;
  *((_QWORD *)v20 + 2) = 0;
  *((_QWORD *)v20 + 3) = v20 + 32;
  v57 = 257;
  *((_QWORD *)v20 + 4) = v17;
  *((_QWORD *)v20 + 5) = 0;
  *((_WORD *)v20 + 24) = 60;
  *((_DWORD *)v20 + 13) = 1;
  *(_OWORD *)(v20 + 56) = 0u;
  *(_OWORD *)(v20 + 72) = 0u;
  *((_DWORD *)v20 + 22) = 0;
  *(_QWORD *)v20 = v16;
  v25 = *(_QWORD *)(v16 + 8);
  v24 = (_QWORD *)(v16 + 8);
  v23 = v25;
  *((_QWORD *)v20 + 1) = v25;
  if (v25)
    *(_QWORD *)(v23 + 16) = v20 + 8;
  *((_QWORD *)v20 + 2) = v24;
  *v24 = v20;
  *((_WORD *)v20 + 25) = 2 * (v19 & 0x3F);
  v20[92] = 1;
  llvm::Value::setName((uint64_t ***)v20 + 4, (uint64_t)&v55);
  (*(void (**)(_QWORD *, llvm::Value *, _QWORD *, uint64_t, char *))(*v68 + 16))(v68, v22, v59, v64, v65);
  if ((_DWORD)v62)
  {
    v46 = (char *)v61;
    v47 = (char *)v61 + 16 * v62;
    v48 = (unsigned __int8 **)(v21 + 80);
    do
    {
      v49 = *(_DWORD *)v46;
      v50 = (unsigned __int8 *)*((_QWORD *)v46 + 1);
      if (v50)
      {
        if (!v49)
        {
          v58 = (unsigned __int8 *)*((_QWORD *)v46 + 1);
          llvm::MetadataTracking::track((uint64_t)&v58, v50, 2);
          v51 = *v48;
          goto LABEL_61;
        }
      }
      else
      {
        v51 = *v48;
        if (!*v48 && (v21[55] & 0x20) == 0)
          goto LABEL_58;
        if (!v49)
        {
          v58 = 0;
LABEL_61:
          if (v51)
            llvm::MetadataTracking::untrack((uint64_t)(v21 + 80), v51);
          v52 = v58;
          *v48 = v58;
          if (v52)
            llvm::MetadataTracking::retrack((uint64_t)&v58, v52, (uint64_t)(v21 + 80));
          goto LABEL_58;
        }
      }
      llvm::Value::setMetadata(v22, *(_DWORD *)v46, (llvm::MDNode *)v50);
LABEL_58:
      v46 += 16;
    }
    while (v46 != v47);
  }
  v12 = (uint64_t *)sub_1C5601564(*((llvm::ConstantInt ***)a1 + 4), (char *)v22, *((_QWORD *)a1 + 5));
  v26 = *((_QWORD *)a1 + 3);
  v55 = 0;
  if ((sub_1C5602798(*(_QWORD *)v26, *(_DWORD *)(v26 + 16), (uint64_t)v9, &v55) & 1) != 0)
  {
    v7 = v54;
    goto LABEL_28;
  }
  v27 = *(_DWORD *)(v26 + 16);
  v28 = *(_DWORD *)(v26 + 8);
  v7 = v54;
  if (4 * v28 + 4 < 3 * v27)
  {
    if (v27 + ~v28 - *(_DWORD *)(v26 + 12) > v27 >> 3)
      goto LABEL_25;
  }
  else
  {
    v27 *= 2;
  }
  sub_1C560282C(v26, v27);
  v55 = 0;
  sub_1C5602798(*(_QWORD *)v26, *(_DWORD *)(v26 + 16), (uint64_t)v9, &v55);
LABEL_25:
  v29 = v55;
  ++*(_DWORD *)(v26 + 8);
  if (*(_QWORD *)v29 != -4096)
    --*(_DWORD *)(v26 + 12);
  *(_QWORD *)v29 = v9;
  *((_QWORD *)v29 + 1) = v12;
LABEL_28:
  if (v7 != 83)
  {
    v34 = *(unsigned __int8 **)(a2 + 48);
    v64 = *(_QWORD *)(a2 + 40);
    v65 = (char *)(a2 + 24);
    v55 = v34;
    if (!v34)
    {
      v30 = 0;
      goto LABEL_38;
    }
    goto LABEL_49;
  }
  v30 = 0;
  v31 = v12 + 3;
  if (!v12)
    v31 = 0;
  v32 = v31[1];
  if (v32)
    v33 = v32 - 24;
  else
    v33 = 0;
  v64 = *(_QWORD *)(v33 + 40);
  v65 = (char *)(v33 + 24);
  v34 = *(unsigned __int8 **)(v33 + 48);
  v55 = v34;
  if (v34)
  {
LABEL_49:
    llvm::MetadataTracking::track((uint64_t)&v55, v34, 2);
    v30 = v55;
  }
LABEL_38:
  sub_1C4774EF4((uint64_t)&v61, 0, (uint64_t)v30);
  if (v55)
    llvm::MetadataTracking::untrack((uint64_t)&v55, v55);
  v36 = *a1;
  v37 = *(llvm::ConstantInt **)(*(_QWORD *)v66 + 1984);
  v38 = *(_DWORD *)(*(_QWORD *)v66 + 1992);
  v56 = v38 >> 8;
  if (v38 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v55, v36, 0);
  }
  else
  {
    if (v38 <= 0xFF)
      v39 = 0;
    else
      v39 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v38);
    v55 = (unsigned __int8 *)(v39 & v36);
  }
  v40 = llvm::ConstantInt::get(v37, (llvm::LLVMContext *)&v55, v35);
  if (v56 >= 0x41 && v55)
    MEMORY[0x1CAA32F9C](v55, 0x1000C8000313F17);
  v59[0] = v40;
  v41 = (llvm::GetElementPtrInst *)(*(_QWORD *)v66 + 1912);
  v57 = 257;
  v42 = (unsigned __int8 *)sub_1C509D7B0((uint64_t *)&v61, v41, v12, (llvm::Value *)v59, 1, (uint64_t)&v55);
  v43 = **((_QWORD **)a1 + 1);
  v57 = 257;
  v44 = sub_1C4773E38((uint64_t *)&v61, 49, v42, v43, (uint64_t)&v55);
  if (v61 != v63)
    free(v61);
  return v44;
}

uint64_t sub_1C5602798(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  uint64_t v12;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 16 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v12 = 1;
    }
    else
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v10 = 0;
        else
          v10 = v7 == -8192;
        if (v10)
          v8 = v6;
        v11 = v5 + v9++;
        v5 = v11 & v4;
        v6 = (_QWORD *)(a1 + 16 * (v11 & v4));
        v7 = *v6;
        v12 = 1;
        if (*v6 == a3)
          goto LABEL_14;
      }
      v12 = 0;
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
    v12 = 0;
  }
LABEL_14:
  *a4 = v6;
  return v12;
}

_QWORD *sub_1C560282C(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C56028E4(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C56028E4(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 16 * v6;
    do
    {
      *v7 = -4096;
      v7 += 2;
      v8 -= 16;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_1C5602798(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v11);
      v10 = v11;
      *v11 = *a2;
      v10[1] = a2[1];
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_1C5602990()
{
  char v1;
  char *v2;
  __n128 v3;
  int v4;

  v4 = 1;
  v3.n128_u64[0] = (unint64_t)"Optimization to set range metadata whenever possible";
  v3.n128_u64[1] = 52;
  v1 = 1;
  v2 = &v1;
  sub_1C6148018((llvm::cl::Option *)&unk_1ED807D88, "lower-driver-params-set-range", &v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED807D88, &dword_1C475E000);
}

uint64_t sub_1C5602A10(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeFunctionGroupInfoWrapperPassPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Lower GPU Binding";
  *(_QWORD *)(v2 + 8) = 17;
  *(_QWORD *)(v2 + 16) = "lower-gpu-binding";
  *(_QWORD *)(v2 + 24) = 17;
  *(_QWORD *)(v2 + 32) = &unk_1ED807E48;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C5602B68;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C5602AA0(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED807E48;
  *(_DWORD *)(a1 + 24) = 4;
  *(_QWORD *)a1 = &off_1E8171500;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED807E50);
  if (v3 != -1)
  {
    v7[0] = sub_1C5602A10;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED807E50, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C5602B68()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5602AA0(v0);
}

void sub_1C5602B94(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C5602BB8(uint64_t a1, llvm::AnalysisUsage *a2)
{
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
  llvm::AnalysisUsage::setPreservesCFG(a2);
}

BOOL sub_1C5602BFC(uint64_t a1, uint64_t *a2)
{
  void **v3;
  void *v4;
  uint64_t *v5;
  uint64_t *v6;
  uint64_t ***v7;
  llvm::MDNode *v8;
  int MDKindID;
  uint64_t i;
  unsigned int v11;
  uint64_t v12;
  uint64_t *v13;
  char *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  unsigned int v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  _QWORD *v46;
  _QWORD *v47;
  uint64_t v48;
  _QWORD *v49;
  uint64_t v50;
  unsigned int *v51;
  uint64_t v52;
  uint64_t v53;
  llvm::ValueAsMetadata *v54;
  llvm::ConstantInt *v55;
  int PointerSize;
  llvm::Value **v57;
  unsigned int v59;
  char *v60;
  llvm::DataLayout *v61;
  uint64_t v62;
  unint64_t v63;
  uint64_t v64;
  _QWORD *v65;
  _QWORD v66[2];
  int v67;
  void *__p;
  uint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  void *v72;
  uint64_t v73;
  _QWORD v74[10];
  int v75;
  __int16 v76;
  char v77;
  uint64_t v78;
  uint64_t v79;
  void *v80;
  void *v81;
  uint64_t v82;
  _QWORD *v83;
  unsigned int v84;
  uint64_t *v85;
  uint64_t v86;
  _QWORD v87[6];

  v87[4] = *MEMORY[0x1E0C80C00];
  v3 = **(void ****)(a1 + 8);
  do
  {
    v4 = *v3;
    v3 += 2;
  }
  while (v4 != &llvm::FunctionGroupInfoWrapperPass::ID);
  v64 = *(_QWORD *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v3 - 1) + 96))(*(v3 - 1), &llvm::FunctionGroupInfoWrapperPass::ID)+ 32);
  v66[0] = 0;
  v66[1] = 0;
  v67 = 0;
  v69 = 0;
  v70 = 0;
  __p = 0;
  sub_1C5E9D34C((uint64_t)a2, (uint64_t)v66);
  sub_1C5E9D674((uint64_t)a2, (uint64_t)v66, 0);
  v5 = (uint64_t *)__p;
  v6 = v69;
  if (__p != v69)
  {
    do
    {
      v7 = (uint64_t ***)*v5;
      if (!llvm::Value::getMetadata(*v5, "agx.bind", 8uLL))
      {
        v8 = (llvm::MDNode *)v5[1];
        MDKindID = llvm::LLVMContext::getMDKindID(**v7, "agx.bind", 8uLL);
        llvm::Value::addMetadata((llvm::Value *)v7, MDKindID, v8);
      }
      v5 += 2;
    }
    while (v5 != v6);
  }
  v85 = v87;
  v86 = 0x400000000;
  v82 = 1;
  for (i = 8; i != 232; i += 56)
    *(uint64_t *)((char *)&v82 + i) = -4096;
  sub_1C5EAD984((uint64_t)a2, (uint64_t)&v85, &v82);
  v11 = v82;
  if (v82 >= 2)
  {
    v12 = *a2;
    v72 = v74;
    v73 = 0x200000000;
    v74[6] = v12;
    v74[7] = &v80;
    v74[8] = &v81;
    v74[9] = 0;
    v75 = 0;
    v76 = 512;
    v77 = 7;
    v74[4] = 0;
    v74[5] = 0;
    v78 = 0;
    v79 = 0;
    v80 = &unk_1E8167888;
    v81 = &unk_1E8167A08;
    if ((_DWORD)v86)
    {
      v59 = v82;
      v61 = (llvm::DataLayout *)(a2 + 34);
      v13 = v85;
      v14 = (char *)&v85[v86];
      v60 = v14;
      while (1)
      {
        v15 = *v13;
        v16 = sub_1C55DAEFC((uint64_t)&v82, *v13);
        if ((v82 & 1) != 0)
          v17 = &v83;
        else
          v17 = v83;
        v18 = v84;
        if ((v82 & 1) != 0)
          v18 = 4;
        if (&v17[7 * v18] != (_QWORD *)v16)
          break;
LABEL_18:
        if (++v13 == (uint64_t *)v14)
        {
          v11 = v59;
          if (v72 != v74)
            free(v72);
          goto LABEL_60;
        }
      }
      v19 = v16;
      v71 = v15;
      v20 = *(_QWORD *)(sub_1C627E1B0((uint64_t)v66, &v71) + 8);
      v21 = *(_QWORD *)(v15 + 24);
      v22 = (_QWORD *)(v20 - 8 * *(unsigned int *)(v20 + 8));
      v23 = v22[1];
      if (*(_BYTE *)(v21 + 8) != 17 || *(_BYTE *)v23 == 1 && *(_BYTE *)(*(_QWORD *)(v23 + 128) + 16) == 16)
        v24 = 1;
      else
        v24 = *(unsigned int *)(v21 + 32);
      v62 = v15;
      v63 = v24;
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v22 + 128) + 24) + 8) == 17)
      {
        if (*(_BYTE *)v23 != 1 || (v25 = *(_QWORD *)(v23 + 128), *(_BYTE *)(v25 + 16) != 16))
        {
          v26 = (_QWORD *)(v23 - 8 * *(unsigned int *)(v23 + 8));
          v27 = *(_QWORD *)(*v26 + 128);
          v28 = (_QWORD *)(v27 + 24);
          if (*(_DWORD *)(v27 + 32) >= 0x41u)
            v28 = (_QWORD *)*v28;
          v65 = (_QWORD *)*v28;
          v29 = v26[1];
LABEL_35:
          v31 = *(_QWORD *)(v29 + 128);
          v32 = (_QWORD *)(v31 + 24);
          if (*(_DWORD *)(v31 + 32) >= 0x41u)
            v32 = (_QWORD *)*v32;
          v33 = *(_DWORD *)v32;
          v34 = *(unsigned int *)(v19 + 40);
          if ((_DWORD)v34)
          {
            v35 = *(_QWORD **)(v19 + 32);
            v36 = &v35[v34];
            while (1)
            {
              v37 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v64 + 24))(v64, *v35);
              sub_1C560315C(v37, (int)v65, v33);
              v38 = v20 + 16;
              v39 = v63 - 1;
              if (v63 >= 2)
                break;
LABEL_53:
              if (++v35 == v36)
                goto LABEL_54;
            }
            while (2)
            {
              v40 = *(unsigned int *)(v20 + 8);
              v41 = (_QWORD *)(v20 - 8 * v40);
              v42 = v41[1];
              if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v41 + 128) + 24) + 8) == 17)
              {
                if (*(_BYTE *)v42 != 1 || (v43 = *(_QWORD *)(v42 + 128), *(_BYTE *)(v43 + 16) != 16))
                {
                  v44 = (_QWORD *)(*(_QWORD *)(v38 - 8 * v40) - 8
                                                              * *(unsigned int *)(*(_QWORD *)(v38 - 8 * v40) + 8));
                  v45 = *(_QWORD *)(*v44 + 128);
                  v46 = (_QWORD *)(v45 + 24);
                  if (*(_DWORD *)(v45 + 32) >= 0x41u)
                    v46 = (_QWORD *)*v46;
                  v47 = (_QWORD *)*v46;
                  v48 = v44[1];
                  goto LABEL_50;
                }
              }
              else
              {
                v43 = *(_QWORD *)(v42 + 128);
              }
              v49 = (_QWORD *)(v43 + 24);
              if (*(_DWORD *)(v43 + 32) >= 0x41u)
                v49 = (_QWORD *)*v49;
              v47 = (_QWORD *)*v49;
              v48 = v41[2];
LABEL_50:
              v50 = *(_QWORD *)(v48 + 128);
              v51 = (unsigned int *)(v50 + 24);
              if (*(_DWORD *)(v50 + 32) >= 0x41u)
                v51 = *(unsigned int **)v51;
              sub_1C560315C(v37, (int)v47, *v51);
              v38 += 8;
              if (!--v39)
                goto LABEL_53;
              continue;
            }
          }
LABEL_54:
          v14 = v60;
          if ((_DWORD)v65 == 139)
          {
            v52 = *(_QWORD *)(v62 + 8);
            if (v52)
            {
              do
              {
                v53 = *(_QWORD *)(v52 + 8);
                v54 = *(llvm::ValueAsMetadata **)(v52 + 24);
                v55 = *(llvm::ConstantInt **)v54;
                PointerSize = llvm::DataLayout::getPointerSize(v61, 2u);
                v57 = llvm::ConstantInt::get(v55, PointerSize * v33, 0);
                llvm::Value::doRAUW(v54, (llvm::Value *)v57, (llvm::Value *)1);
                v52 = v53;
              }
              while (v53);
            }
          }
          goto LABEL_18;
        }
      }
      else
      {
        v25 = *(_QWORD *)(v23 + 128);
      }
      v30 = (_QWORD *)(v25 + 24);
      if (*(_DWORD *)(v25 + 32) >= 0x41u)
        v30 = (_QWORD *)*v30;
      v65 = (_QWORD *)*v30;
      v29 = v22[2];
      goto LABEL_35;
    }
  }
LABEL_60:
  sub_1C55DB034((uint64_t)&v82);
  if (v85 != v87)
    free(v85);
  if (__p)
  {
    v69 = (uint64_t *)__p;
    operator delete(__p);
  }
  MEMORY[0x1CAA32FB4](v66[0], 8);
  return v11 > 1;
}

uint64_t sub_1C560315C(uint64_t result, int a2, unsigned int a3)
{
  uint64_t v3;

  if (a2 <= 97)
  {
    if (a2 == 43)
    {
      v3 = 46;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)result + 8))(result, v3, 1 << a3, 1, 0, 1, 2);
    }
    if (a2 == 93)
    {
      if (a3 < 0x40)
      {
        v3 = 43;
      }
      else
      {
        LOBYTE(a3) = a3 - 64;
        v3 = 44;
      }
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)result + 8))(result, v3, 1 << a3, 1, 0, 1, 2);
    }
    goto LABEL_15;
  }
  if (a2 != 98)
  {
    if (a2 == 113)
    {
      v3 = 45;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)result + 8))(result, v3, 1 << a3, 1, 0, 1, 2);
    }
    if (a2 == 139)
    {
      v3 = 42;
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)result + 8))(result, v3, 1 << a3, 1, 0, 1, 2);
    }
LABEL_15:
    llvm::report_fatal_error((llvm *)"Incorrect binding type", (const char *)1);
  }
  return result;
}

_QWORD *sub_1C56031FC(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;

  *a1 = &unk_1E81715A0;
  v2 = a1 + 21;
  v3 = (_QWORD *)a1[24];
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      return sub_1C47A80D0(a1);
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
  return sub_1C47A80D0(a1);
}

uint64_t sub_1C560325C(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Lower memory intrinsics";
  *(_QWORD *)(v2 + 8) = 23;
  *(_QWORD *)(v2 + 16) = "lower-mem-intrinsics";
  *(_QWORD *)(v2 + 24) = 20;
  *(_QWORD *)(v2 + 32) = &unk_1ED807E58;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C56033D0;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C56032EC(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED807E58;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E8171628;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED807E60);
  if (v3 != -1)
  {
    v7[0] = sub_1C560325C;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED807E60, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C56033B4(uint64_t result)
{
  uint64_t v1;

  if (*(_BYTE *)(result + 152))
    v1 = *(_QWORD *)(result + 144);
  else
    v1 = 0;
  *(_QWORD *)(result + 128) = v1;
  return result;
}

uint64_t sub_1C56033D0()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C56032EC(v0);
}

void sub_1C56033FC(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C5603420()
{
  return "GPU Lower Memory Intrinsics";
}

BOOL sub_1C5603430(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t **v14;
  int v15;
  uint64_t **v16;
  uint64_t *v17;
  uint64_t *v18;
  llvm::ConstantInt **v19;
  __int16 ParamAlignment;
  unsigned int v21;
  __int16 v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t *v25;
  llvm::APInt *v26;
  unsigned int v27;
  BOOL v28;
  uint64_t **v29;
  uint64_t *v30;
  uint64_t *v31;
  llvm::ConstantInt **v32;
  __int16 v33;
  unsigned int v34;
  __int16 v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t *v38;
  llvm::APInt *v39;
  unsigned int v40;
  BOOL v41;
  int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t **v45;
  uint64_t *v46;
  uint64_t *v47;
  uint64_t *v48;
  llvm::Type *v49;
  __int16 v50;
  uint64_t *v51;
  llvm::APInt *v52;
  unsigned int v53;
  BOOL v54;
  int v55;
  uint64_t *v56;
  _DWORD *v57;
  uint64_t v58;
  uint64_t v59;
  llvm *v60;
  llvm::MDNode *v61;
  uint64_t ***v62;
  uint64_t ***v63;
  uint64_t ***v64;
  _DWORD *v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  unint64_t *v72;
  unint64_t v73;
  uint64_t *v74;
  _QWORD ***v75;
  uint64_t v76;
  _QWORD **v77;
  _QWORD *v78;
  llvm::ConstantInt *v79;
  uint64_t v80;
  uint64_t **v81;
  unsigned int v82;
  _QWORD *v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t *v86;
  unsigned __int8 *v87;
  llvm::Instruction *v88;
  uint64_t v89;
  _QWORD *v90;
  llvm::Value **v91;
  llvm::GetElementPtrInst *v92;
  uint64_t ***v93;
  char v94;
  char v95;
  char *v96;
  char *v97;
  uint64_t ****v98;
  llvm::Value *v99;
  uint64_t v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t **v103;
  uint64_t *****v104;
  uint64_t **v105;
  llvm::Value **v106;
  llvm::Value *v107;
  char *v108;
  char *v109;
  llvm::Value ***v110;
  _QWORD *v111;
  uint64_t v112;
  llvm::Value *v113;
  llvm::Value ****v114;
  llvm::Value *v115;
  char *v116;
  char *v117;
  unsigned __int8 **v118;
  int v119;
  unsigned __int8 *v120;
  unsigned __int8 *v121;
  unsigned __int8 *v122;
  llvm::Value *v123;
  _DWORD *v124;
  _DWORD *v125;
  uint64_t v126;
  llvm::Value *v127;
  _QWORD *v128;
  char *v129;
  char *v130;
  unsigned __int8 **v131;
  int v132;
  llvm::MDNode *v133;
  unsigned __int8 *v134;
  unsigned __int8 *v135;
  llvm::Value **v136;
  uint64_t v137;
  _QWORD ***v138;
  uint64_t v139;
  _QWORD **v140;
  _QWORD *v141;
  llvm::ConstantInt *v142;
  uint64_t **v143;
  unsigned int v144;
  _QWORD *v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  llvm::Value **v150;
  uint64_t v151;
  llvm::GetElementPtrInst *v152;
  uint64_t ***v153;
  char v154;
  char v155;
  char *v156;
  char *v157;
  uint64_t *v158;
  uint64_t *v159;
  uint64_t **v160;
  _QWORD *v161;
  uint64_t **v162;
  uint64_t ***v163;
  char v164;
  char v165;
  char *v166;
  char *v167;
  llvm::Value *v168;
  uint64_t v169;
  uint64_t **v170;
  _QWORD *v171;
  uint64_t **v172;
  llvm::Value **v173;
  llvm::Value *v174;
  _DWORD *v175;
  _DWORD *v176;
  uint64_t v177;
  llvm::Value *v178;
  _QWORD *v179;
  char *v180;
  char *v181;
  unsigned __int8 **v182;
  int v183;
  unsigned __int8 *v184;
  unsigned __int8 *v185;
  unsigned __int8 *v186;
  llvm::Instruction *v187;
  _DWORD *v188;
  uint64_t v189;
  llvm::BranchInst *v190;
  _QWORD *v191;
  uint64_t ***v192;
  uint64_t **v193;
  uint64_t **v194;
  uint64_t **v195;
  llvm::Instruction *v196;
  _DWORD *v197;
  uint64_t v198;
  llvm::BranchInst *v199;
  _QWORD *v200;
  llvm::Instruction *v201;
  uint64_t v202;
  _QWORD *v203;
  unsigned int v204;
  uint64_t v205;
  llvm::PoisonValue *v206;
  llvm::Value **v207;
  unint64_t v208;
  llvm::PoisonValue *v209;
  llvm::Value **v210;
  llvm::PointerType *v211;
  int v212;
  uint64_t *v213;
  char *v214;
  char *v215;
  unsigned __int8 **v216;
  int v217;
  unsigned __int8 *v218;
  unsigned __int8 *v219;
  unsigned __int8 *v220;
  char *v221;
  char *v222;
  unsigned __int8 **v223;
  int v224;
  unsigned __int8 *v225;
  unsigned __int8 *v226;
  unsigned __int8 *v227;
  unsigned __int8 *v228;
  char *v229;
  char *v230;
  unsigned __int8 **v231;
  int v232;
  unsigned __int8 *v233;
  unsigned __int8 *v234;
  unsigned __int8 *v235;
  uint64_t v236;
  uint64_t v237;
  char *v238;
  char *v239;
  uint64_t v240;
  int v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  _QWORD **v245;
  uint64_t v246;
  uint64_t v247;
  _QWORD *v248;
  uint64_t *v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t ***v253;
  llvm::ValueHandleBase *v254;
  llvm::ConstantInt **v255;
  unsigned int v256;
  __int16 v257;
  unsigned int v258;
  __int16 v259;
  uint64_t v260;
  unint64_t v261;
  uint64_t v262;
  BOOL v263;
  _QWORD *v264;
  uint64_t v265;
  uint64_t *v266;
  uint64_t v267;
  int v268;
  uint64_t v269;
  uint64_t v270;
  uint64_t v271;
  _QWORD **v272;
  uint64_t v273;
  uint64_t v274;
  _QWORD *v275;
  int v276;
  int v277;
  llvm::ConstantInt *v279;
  llvm::PHINode *v280;
  uint64_t v281;
  llvm::Value *v282;
  uint64_t v283;
  uint64_t *v284;
  uint64_t *v285;
  char *v286;
  llvm::BasicBlock *v287;
  llvm::BasicBlock *v288;
  unsigned int v289;
  llvm::BasicBlock *v290;
  char *v291;
  char *v292;
  uint64_t *v293;
  uint64_t *v294;
  llvm::Instruction *v295;
  uint64_t ***v296;
  uint64_t v297;
  char v298;
  __int16 v299;
  _QWORD v300[4];
  __int16 v301;
  uint64_t *v302;
  void *v303;
  uint64_t v304;
  _BYTE v305[128];
  void *v306;
  uint64_t v307;
  _BYTE v308[128];
  char *v309;
  uint64_t v310;
  _QWORD v311[2];
  __int16 v312;
  uint64_t **v313;
  _QWORD **v314;
  uint64_t v315;
  void **v316;
  _QWORD *v317;
  uint64_t v318;
  int v319;
  __int16 v320;
  char v321;
  uint64_t v322;
  uint64_t v323;
  void *v324;
  _QWORD v325[3];

  v325[1] = *MEMORY[0x1E0C80C00];
  v306 = v308;
  v307 = 0x1000000000;
  v303 = v305;
  v304 = 0x1000000000;
  v2 = a2 + 72;
  v3 = *(_QWORD *)(a2 + 80);
  if (v3 == a2 + 72)
    goto LABEL_267;
  do
  {
    v4 = v3 - 24;
    if (!v3)
      v4 = 0;
    v5 = v4 + 40;
    for (i = *(_QWORD *)(v4 + 48); i != v5; i = *(_QWORD *)(i + 8))
    {
      if (i)
        v7 = i - 24;
      else
        v7 = 0;
      v8 = sub_1C4DE85D0(v7);
      if (i && v8)
      {
        v9 = v307;
        if (v307 >= (unint64_t)HIDWORD(v307))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v306, (uint64_t)v308, v307 + 1, 8);
          v9 = v307;
        }
        *((_QWORD *)v306 + v9) = v7;
        LODWORD(v307) = v307 + 1;
      }
      if (*(_BYTE *)(v7 + 16) == 84)
      {
        v10 = *(_QWORD *)(v7 - 32);
        if (v10)
        {
          if (!*(_BYTE *)(v10 + 16)
            && *(_QWORD *)(v10 + 24) == *(_QWORD *)(v7 + 72)
            && (*(_BYTE *)(v10 + 33) & 0x20) != 0
            && *(_DWORD *)(*(_QWORD *)(i - 56) + 36) == 2143)
          {
            v11 = v304;
            if (v304 >= (unint64_t)HIDWORD(v304))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v303, (uint64_t)v305, v304 + 1, 8);
              v11 = v304;
            }
            *((_QWORD *)v303 + v11) = i - 24;
            LODWORD(v304) = v304 + 1;
          }
        }
      }
    }
    v3 = *(_QWORD *)(v3 + 8);
  }
  while (v3 != v2);
  if (!(_DWORD)v307)
    goto LABEL_267;
  v12 = (char *)v306;
  v13 = (char *)v306 + 8 * v307;
  v286 = v13;
  do
  {
    v14 = *(uint64_t ***)v12;
    v15 = *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v12 - 32) + 36);
    switch(v15)
    {
      case 194:
LABEL_30:
        v16 = &v14[-4 * (*((_DWORD *)v14 + 5) & 0x7FFFFFF)];
        v17 = v16[4];
        v18 = *v16;
        v19 = (llvm::ConstantInt **)v16[8];
        ParamAlignment = llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(v14 + 8), 1);
        if ((ParamAlignment & 0xFF00) != 0)
          v21 = 1 << ParamAlignment;
        else
          v21 = 0;
        v22 = llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(v14 + 8), 0);
        v23 = 1 << v22;
        if ((v22 & 0xFF00) == 0)
          LODWORD(v23) = 0;
        if (v23 >= v21)
          v24 = v21;
        else
          v24 = v23;
        v25 = v16[12];
        v26 = (llvm::APInt *)(v25 + 3);
        v27 = *((_DWORD *)v25 + 8);
        if (v27 > 0x40)
          v28 = llvm::APInt::countLeadingZerosSlowCase(v26) == v27;
        else
          v28 = *(_QWORD *)v26 == 0;
        v42 = v28;
        v43 = v42 ^ 1;
        if ((sub_1C5604D64((uint64_t)v14, v17, v18, (uint64_t)v19, v24, v42 ^ 1u, qword_1ED808078, 0, 0, 0, 0) & 1) == 0)
          sub_1C5605AA0((uint64_t)v14, v17, v18, v19, v43, 0, 0, v44, 0);
        goto LABEL_185;
      case 197:
        v29 = &v14[-4 * (*((_DWORD *)v14 + 5) & 0x7FFFFFF)];
        v30 = v29[4];
        v31 = *v29;
        v32 = (llvm::ConstantInt **)v29[8];
        v33 = llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(v14 + 8), 1);
        if ((v33 & 0xFF00) != 0)
          v34 = 1 << v33;
        else
          v34 = 0;
        v35 = llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(v14 + 8), 0);
        v36 = 1 << v35;
        if ((v35 & 0xFF00) == 0)
          LODWORD(v36) = 0;
        if (v36 >= v34)
          v37 = v34;
        else
          v37 = v36;
        v38 = v29[12];
        v39 = (llvm::APInt *)(v38 + 3);
        v40 = *((_DWORD *)v38 + 8);
        if (v40 > 0x40)
          v41 = llvm::APInt::countLeadingZerosSlowCase(v39) == v40;
        else
          v41 = *(_QWORD *)v39 == 0;
        v55 = v41;
        v289 = v55 ^ 1;
        if ((sub_1C5604D64((uint64_t)v14, v30, v31, (uint64_t)v32, v37, v55 ^ 1u, xmmword_1ED807EE8, 0, 0, 0, 0) & 1) != 0)
          goto LABEL_185;
        v56 = v14[5];
        v57 = operator new(0x80uLL);
        v57[21] = v57[21] & 0x38000000 | 2;
        v58 = (uint64_t)(v57 + 16);
        *(_QWORD *)v57 = 0;
        *((_QWORD *)v57 + 1) = 0;
        *((_QWORD *)v57 + 2) = 0;
        *((_QWORD *)v57 + 3) = v57 + 16;
        *((_QWORD *)v57 + 4) = 0;
        *((_QWORD *)v57 + 5) = 0;
        *((_QWORD *)v57 + 6) = 0;
        *((_QWORD *)v57 + 7) = v57 + 16;
        v312 = 257;
        sub_1C4774CC4((_DWORD *)*v30);
        v60 = (llvm *)llvm::CmpInst::CmpInst(v58, v59, 53, 36, (uint64_t)v30, (uint64_t)v31, (uint64_t)&v309, (uint64_t)v14, 0);
        v295 = 0;
        v296 = 0;
        llvm::SplitBlockAndInsertIfThenElse(v60, (llvm::Value *)v14, (llvm::Instruction *)&v296, &v295, 0, v61);
        v62 = (uint64_t ***)v296[5];
        v309 = "copy_backwards";
        v312 = 259;
        v283 = (uint64_t)v62;
        llvm::Value::setName(v62, (uint64_t)&v309);
        v63 = (uint64_t ***)*((_QWORD *)v295 + 5);
        v309 = "copy_forward";
        v312 = 259;
        llvm::Value::setName(v63, (uint64_t)&v309);
        v64 = (uint64_t ***)v14[5];
        v309 = "memmove.done";
        v312 = 259;
        v287 = (llvm::BasicBlock *)v64;
        llvm::Value::setName(v64, (uint64_t)&v309);
        v65 = operator new(0x80uLL);
        v66 = (uint64_t)(v65 + 16);
        v65[21] = v65[21] & 0x38000000 | 2;
        *(_QWORD *)v65 = 0;
        *((_QWORD *)v65 + 1) = 0;
        *((_QWORD *)v65 + 2) = 0;
        *((_QWORD *)v65 + 3) = v65 + 16;
        *((_QWORD *)v65 + 4) = 0;
        *((_QWORD *)v65 + 5) = 0;
        *((_QWORD *)v65 + 6) = 0;
        *((_QWORD *)v65 + 7) = v65 + 16;
        v67 = (uint64_t *)v56[5];
        v291 = v12;
        v284 = v31;
        v285 = v30;
        if (v67 == v56 + 5)
        {
          v69 = 0;
        }
        else
        {
          if (v67)
            v68 = (uint64_t)(v67 - 3);
          else
            v68 = 0;
          if (*(unsigned __int8 *)(v68 + 16) - 29 >= 0xB)
            v69 = 0;
          else
            v69 = v68;
        }
        v136 = llvm::ConstantInt::get(*v32, 0, 0);
        v312 = 257;
        sub_1C4774CC4(*v32);
        v282 = (llvm::Value *)v66;
        llvm::CmpInst::CmpInst(v66, v137, 53, 32, (uint64_t)v32, (uint64_t)v136, (uint64_t)&v309, v69, 0);
        v138 = *(_QWORD ****)(v283 + 56);
        v140 = *v138;
        v139 = (uint64_t)(v138 + 9);
        v141 = *v140;
        v142 = *v32;
        v309 = "copy_backwards_loop";
        v312 = 259;
        v143 = (uint64_t **)operator new();
        *v143 = (uint64_t *)(*v141 + 1600);
        v143[1] = 0;
        v144 = *((_DWORD *)v143 + 5) & 0xC0000000;
        *((_DWORD *)v143 + 4) = 22;
        *((_DWORD *)v143 + 5) = v144;
        v143[3] = 0;
        v145 = v143 + 3;
        v143[4] = 0;
        v143[5] = (uint64_t *)(v143 + 5);
        v143[6] = (uint64_t *)(v143 + 5);
        v143[7] = 0;
        v281 = (uint64_t)v63;
        if (v63)
          v146 = (uint64_t *)(v63 + 3);
        else
          v146 = (uint64_t *)v139;
        llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v139, v143);
        v147 = *v146;
        v143[4] = v146;
        *v145 = v147;
        *(_QWORD *)(v147 + 8) = v145;
        *v146 = (uint64_t)v145;
        llvm::Value::setName((uint64_t ***)v143, (uint64_t)&v309);
        v148 = **v143;
        v309 = (char *)v311;
        v310 = 0x200000000;
        v315 = v148;
        v316 = &v324;
        v317 = v325;
        v318 = 0;
        v319 = 0;
        v320 = 512;
        v321 = 7;
        v322 = 0;
        v323 = 0;
        v324 = &unk_1E8167888;
        v325[0] = &unk_1E8167A08;
        v313 = v143;
        v314 = v143 + 5;
        v301 = 257;
        v149 = sub_1C4867E94((uint64_t)&v309, (uint64_t)v142, 0, (uint64_t)v300);
        v279 = v142;
        v150 = llvm::ConstantInt::get(v142, 1, 0);
        v301 = 257;
        v280 = (llvm::PHINode *)v149;
        v151 = sub_1C47733F8((uint64_t)&v309, v149, (uint64_t)v150, (uint64_t)v300, 0, 0);
        v152 = (llvm::GetElementPtrInst *)(*v141 + 1912);
        v301 = 257;
        v153 = sub_1C5098FF4((uint64_t *)&v309, v152, v30, v151, (uint64_t)v300);
        v299 = 257;
        llvm::DataLayout::getAlignment(v313[7][5] + 272, (uint64_t)v152);
        v155 = v154;
        v156 = (char *)operator new(0x60uLL);
        v157 = v156;
        v158 = (uint64_t *)(v156 + 32);
        *((_QWORD *)v156 + 2) = 0;
        *((_QWORD *)v156 + 3) = v156 + 32;
        v301 = 257;
        *((_QWORD *)v156 + 4) = v152;
        *((_QWORD *)v156 + 5) = 0;
        v159 = (uint64_t *)(v156 + 40);
        *((_WORD *)v156 + 24) = 60;
        *((_DWORD *)v156 + 13) = 1;
        *(_OWORD *)(v156 + 56) = 0u;
        *(_OWORD *)(v156 + 72) = 0u;
        *((_DWORD *)v156 + 22) = 0;
        *(_QWORD *)v156 = v153;
        *((_QWORD *)v156 + 1) = 0;
        if (v153)
        {
          v162 = v153[1];
          v161 = v153 + 1;
          v160 = v162;
          *((_QWORD *)v156 + 1) = v162;
          if (v162)
            v160[2] = (uint64_t *)(v156 + 8);
          *((_QWORD *)v156 + 2) = v161;
          *v161 = v156;
        }
        *((_WORD *)v156 + 25) = v289 & 0xFF81 | (2 * (v155 & 0x3F));
        v156[92] = 1;
        llvm::Value::setName((uint64_t ***)v156 + 4, (uint64_t)v300);
        (*(void (**)(_QWORD *, uint64_t *, uint64_t *, uint64_t **, _QWORD **))(*v317 + 16))(v317, v158, &v297, v313, v314);
        if (!(_DWORD)v310)
        {
LABEL_154:
          v299 = 257;
          v163 = sub_1C5098FF4((uint64_t *)&v309, v152, v284, v151, (uint64_t)&v297);
          llvm::DataLayout::getAlignment(v313[7][5] + 272, *v158);
          v165 = v164;
          v166 = (char *)operator new(0x80uLL);
          v167 = v166;
          *((_DWORD *)v166 + 21) = *((_DWORD *)v166 + 21) & 0x38000000 | 2;
          *(_QWORD *)v166 = 0;
          *((_QWORD *)v166 + 2) = 0;
          *((_QWORD *)v166 + 1) = 0;
          *((_QWORD *)v166 + 5) = 0;
          *((_QWORD *)v166 + 6) = 0;
          *((_QWORD *)v166 + 4) = 0;
          *((_QWORD *)v166 + 8) = **(_QWORD **)*v158 + 1576;
          v168 = (llvm::Value *)(v166 + 64);
          *((_QWORD *)v166 + 3) = v166 + 64;
          *((_QWORD *)v166 + 7) = v166 + 64;
          *((_QWORD *)v166 + 9) = 0;
          v166[80] = 61;
          v166[81] = 0;
          *((_DWORD *)v166 + 21) = 2;
          *(_OWORD *)(v166 + 88) = 0u;
          *(_OWORD *)(v166 + 104) = 0u;
          *((_DWORD *)v166 + 30) = 0;
          v169 = *v159;
          *(_QWORD *)v166 = v158;
          *((_QWORD *)v166 + 1) = v169;
          if (v169)
            *(_QWORD *)(v169 + 16) = v166 + 8;
          *((_QWORD *)v166 + 2) = v159;
          *v159 = (uint64_t)v166;
          *((_QWORD *)v166 + 4) = v163;
          if (v163)
          {
            v172 = v163[1];
            v171 = v163 + 1;
            v170 = v172;
            *((_QWORD *)v166 + 5) = v172;
            if (v172)
              v170[2] = (uint64_t *)(v166 + 40);
            *((_QWORD *)v166 + 6) = v171;
            *v171 = v166 + 32;
          }
          *((_WORD *)v166 + 41) = v289 & 0xFF81 | (2 * (v165 & 0x3F));
          v166[124] = 1;
          v301 = 257;
          (*(void (**)(_QWORD *, llvm::Value *, _QWORD *, uint64_t **, _QWORD **))(*v317 + 16))(v317, v168, v300, v313, v314);
          v13 = v286;
          if (!(_DWORD)v310)
          {
LABEL_161:
            v173 = llvm::ConstantInt::get(v279, 0, 0);
            v299 = 257;
            v174 = (llvm::Value *)sub_1C4774B48((uint64_t)&v309, 32, v151, (uint64_t)v173, (uint64_t)&v297);
            v175 = operator new(0xA0uLL);
            v176 = v175;
            v177 = 0;
            v178 = (llvm::Value *)(v175 + 24);
            v175[29] = v175[29] & 0x38000000 | 3;
            do
            {
              v179 = &v175[v177];
              *v179 = 0;
              v179[1] = 0;
              v179[2] = 0;
              v179[3] = v178;
              v177 += 8;
            }
            while (v177 != 24);
            llvm::BranchInst::BranchInst((llvm::BranchInst *)(v175 + 24), v287, (llvm::BasicBlock *)v143, v174, 0);
            v301 = 257;
            (*(void (**)(_QWORD *, llvm::Value *, _QWORD *, uint64_t **, _QWORD **))(*v317 + 16))(v317, v178, v300, v313, v314);
            if (!(_DWORD)v310)
            {
LABEL_178:
              sub_1C477667C(v280, (uint64_t)v32, v283);
              sub_1C477667C(v280, v151, (uint64_t)v143);
              if (v309 != (char *)v311)
                free(v309);
              v187 = (llvm::Instruction *)v296;
              v188 = operator new(0xA0uLL);
              v189 = 0;
              v190 = (llvm::BranchInst *)(v188 + 24);
              v188[29] = v188[29] & 0x38000000 | 3;
              v12 = v291;
              do
              {
                v191 = &v188[v189];
                *v191 = 0;
                v191[1] = 0;
                v191[2] = 0;
                v191[3] = v190;
                v189 += 8;
              }
              while (v189 != 24);
              llvm::BranchInst::BranchInst(v190, v287, (llvm::BasicBlock *)v143, v282, v187);
              v192 = v296;
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v296[5] + 5), v296);
              v193 = v192[3];
              v194 = v192[4];
              *v194 = (uint64_t *)v193;
              v193[1] = (uint64_t *)v194;
              *(_OWORD *)(v192 + 3) = 0u;
              llvm::Value::deleteValue((llvm::Value *)v192);
              v195 = sub_1C5605BDC(v281, v287, (uint64_t)v287, v285, v284, v32, v289, 0, 0, 0, 0);
              v196 = v295;
              v197 = operator new(0xA0uLL);
              v198 = 0;
              v199 = (llvm::BranchInst *)(v197 + 24);
              v197[29] = v197[29] & 0x38000000 | 3;
              do
              {
                v200 = &v197[v198];
                *v200 = 0;
                v200[1] = 0;
                v200[2] = 0;
                v200[3] = v199;
                v198 += 8;
              }
              while (v198 != 24);
              llvm::BranchInst::BranchInst(v199, v287, (llvm::BasicBlock *)v195, v282, v196);
              v201 = v295;
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v295 + 5) + 40, (uint64_t ***)v295);
              v202 = *((_QWORD *)v201 + 3);
              v203 = (_QWORD *)*((_QWORD *)v201 + 4);
              *v203 = v202;
              *(_QWORD *)(v202 + 8) = v203;
              *((_QWORD *)v201 + 3) = 0;
              *((_QWORD *)v201 + 4) = 0;
              llvm::Value::deleteValue(v201);
              goto LABEL_185;
            }
            v180 = v309;
            v181 = &v309[16 * v310];
            v182 = (unsigned __int8 **)(v176 + 36);
            while (1)
            {
              v183 = *(_DWORD *)v180;
              v184 = (unsigned __int8 *)*((_QWORD *)v180 + 1);
              if (v184)
              {
                if (!v183)
                {
                  v302 = (uint64_t *)*((_QWORD *)v180 + 1);
                  llvm::MetadataTracking::track((uint64_t)&v302, v184, 2);
                  v185 = *v182;
                  if (!*v182)
                  {
LABEL_176:
                    v186 = (unsigned __int8 *)v302;
                    *v182 = (unsigned __int8 *)v302;
                    if (v186)
                      llvm::MetadataTracking::retrack((uint64_t)&v302, v186, (uint64_t)(v176 + 36));
                    goto LABEL_173;
                  }
LABEL_170:
                  llvm::MetadataTracking::untrack((uint64_t)(v176 + 36), v185);
                  goto LABEL_176;
                }
              }
              else
              {
                v185 = *v182;
                if (!*v182 && (*((_BYTE *)v176 + 119) & 0x20) == 0)
                  goto LABEL_173;
                if (!v183)
                {
                  v302 = 0;
                  if (!v185)
                    goto LABEL_176;
                  goto LABEL_170;
                }
              }
              llvm::Value::setMetadata(v178, *(_DWORD *)v180, (llvm::MDNode *)v184);
LABEL_173:
              v180 += 16;
              if (v180 == v181)
                goto LABEL_178;
            }
          }
          v229 = v309;
          v230 = &v309[16 * v310];
          v231 = (unsigned __int8 **)(v167 + 112);
          while (1)
          {
            v232 = *(_DWORD *)v229;
            v233 = (unsigned __int8 *)*((_QWORD *)v229 + 1);
            if (v233)
            {
              if (!v232)
              {
                v302 = (uint64_t *)*((_QWORD *)v229 + 1);
                llvm::MetadataTracking::track((uint64_t)&v302, v233, 2);
                v234 = *v231;
                goto LABEL_246;
              }
            }
            else
            {
              v234 = *v231;
              if (!*v231 && (v167[87] & 0x20) == 0)
                goto LABEL_243;
              if (!v232)
              {
                v302 = 0;
LABEL_246:
                if (v234)
                  llvm::MetadataTracking::untrack((uint64_t)(v167 + 112), v234);
                v235 = (unsigned __int8 *)v302;
                *v231 = (unsigned __int8 *)v302;
                if (v235)
                  llvm::MetadataTracking::retrack((uint64_t)&v302, v235, (uint64_t)(v167 + 112));
                goto LABEL_243;
              }
            }
            llvm::Value::setMetadata(v168, *(_DWORD *)v229, (llvm::MDNode *)v233);
LABEL_243:
            v229 += 16;
            if (v229 == v230)
              goto LABEL_161;
          }
        }
        v214 = v309;
        v215 = &v309[16 * v310];
        v216 = (unsigned __int8 **)(v157 + 80);
        while (1)
        {
          v217 = *(_DWORD *)v214;
          v218 = (unsigned __int8 *)*((_QWORD *)v214 + 1);
          if (v218)
          {
            if (!v217)
            {
              v302 = (uint64_t *)*((_QWORD *)v214 + 1);
              llvm::MetadataTracking::track((uint64_t)&v302, v218, 2);
              v219 = *v216;
              goto LABEL_208;
            }
          }
          else
          {
            v219 = *v216;
            if (!*v216 && (v157[55] & 0x20) == 0)
              goto LABEL_205;
            if (!v217)
            {
              v302 = 0;
LABEL_208:
              if (v219)
                llvm::MetadataTracking::untrack((uint64_t)(v157 + 80), v219);
              v220 = (unsigned __int8 *)v302;
              *v216 = (unsigned __int8 *)v302;
              if (v220)
                llvm::MetadataTracking::retrack((uint64_t)&v302, v220, (uint64_t)(v157 + 80));
              goto LABEL_205;
            }
          }
          llvm::Value::setMetadata((llvm::Value *)v158, *(_DWORD *)v214, (llvm::MDNode *)v218);
LABEL_205:
          v214 += 16;
          if (v214 == v215)
            goto LABEL_154;
        }
      case 196:
        goto LABEL_30;
    }
    if (v15 != 199)
      v14 = 0;
    v45 = &v14[-4 * (*((_DWORD *)v14 + 5) & 0x7FFFFFF)];
    v46 = *v45;
    v47 = v45[4];
    v48 = v45[8];
    v50 = llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(v14 + 8), 0);
    v51 = v45[12];
    v52 = (llvm::APInt *)(v51 + 3);
    v53 = *((_DWORD *)v51 + 8);
    if (v53 > 0x40)
      v54 = llvm::APInt::countLeadingZerosSlowCase(v52) == v53;
    else
      v54 = *(_QWORD *)v52 == 0;
    v70 = v54;
    v71 = (1 << v50);
    if ((v50 & 0xFF00) == 0)
      v71 = 0;
    v302 = v46;
    if (*((_BYTE *)v48 + 16) == 16 && *(_DWORD *)(*v47 + 8) == 2061)
    {
      v72 = (unint64_t *)(v48 + 3);
      if (*((_DWORD *)v48 + 8) >= 0x41u)
        v72 = (unint64_t *)*v72;
      v13 = v286;
      v73 = *v72;
      if (!*v72)
        goto LABEL_185;
      if (v73 <= qword_1ED807FB0)
      {
        v204 = *(_DWORD *)(*v46 + 8);
        if ((v204 & 0xFE) == 0x12)
          v204 = *(_DWORD *)(**(_QWORD **)(*v46 + 16) + 8);
        v205 = **v14;
        v296 = 0;
        v297 = v71;
        v300[0] = v205;
        v300[1] = &v296;
        v298 = v70 ^ 1;
        v309 = (char *)&v302;
        LODWORD(v310) = v204 >> 8;
        v311[0] = v300;
        v311[1] = &v297;
        if (v73 < 4)
        {
          v208 = 0;
        }
        else
        {
          v206 = (llvm::PoisonValue *)(*(_QWORD *)v205 + 1960);
          v207 = sub_1C56069C4((uint64_t)v14, v206, (uint64_t)v47, 4u);
          v73 = sub_1C5606DB4((uint64_t)&v309, (uint64_t)v14, v206, (uint64_t)v207, 4uLL, v73, 0);
          v208 = (unint64_t)v49;
        }
        v13 = v286;
        if (v73 >= 2)
        {
          v209 = (llvm::PoisonValue *)(*(_QWORD *)v205 + 1936);
          v210 = sub_1C56069C4((uint64_t)v14, v209, (uint64_t)v47, 2u);
          v73 = sub_1C5606DB4((uint64_t)&v309, (uint64_t)v14, v209, (uint64_t)v210, 2uLL, v73, v208);
          v208 = (unint64_t)v49;
        }
        if (!v73)
          goto LABEL_185;
        v211 = (llvm::PointerType *)(*(_QWORD *)v205 + 1912);
        v212 = *((unsigned __int8 *)v47 + 16);
        if (v212 == 12)
        {
          v213 = llvm::PoisonValue::get((llvm::PoisonValue *)(*(_QWORD *)v205 + 1912), v49);
          goto LABEL_233;
        }
        if ((v212 - 11) <= 1)
        {
          v213 = (uint64_t *)llvm::UndefValue::get((llvm::UndefValue *)(*(_QWORD *)v205 + 1912), v49);
          goto LABEL_233;
        }
        if (v212 == 16)
        {
          v228 = (unsigned __int8 *)(v47 + 3);
          if (*((_DWORD *)v47 + 8) >= 0x41u)
            v228 = *(unsigned __int8 **)v228;
          v213 = (uint64_t *)llvm::ConstantInt::get((llvm::ConstantInt *)(*(_QWORD *)v205 + 1912), *v228, 0);
LABEL_233:
          v47 = v213;
        }
        sub_1C5606DB4((uint64_t)&v309, (uint64_t)v14, v211, (uint64_t)v47, 1uLL, v73, v208);
        goto LABEL_185;
      }
    }
    v292 = v12;
    v74 = v14[5];
    v75 = (_QWORD ***)v74[7];
    v77 = *v75;
    v76 = (uint64_t)(v75 + 9);
    v78 = *v77;
    v288 = (llvm::BasicBlock *)v48;
    v79 = (llvm::ConstantInt *)*v48;
    v309 = "memset.split";
    v312 = 259;
    v80 = llvm::BasicBlock::splitBasicBlock(v74, (uint64_t *)v14 + 3, (uint64_t)&v309, 0);
    v309 = "memset_loop";
    v312 = 259;
    v81 = (uint64_t **)operator new();
    *v81 = (uint64_t *)(*v78 + 1600);
    v81[1] = 0;
    v82 = *((_DWORD *)v81 + 5) & 0xC0000000;
    *((_DWORD *)v81 + 4) = 22;
    *((_DWORD *)v81 + 5) = v82;
    v81[3] = 0;
    v83 = v81 + 3;
    v81[4] = 0;
    v81[5] = (uint64_t *)(v81 + 5);
    v81[6] = (uint64_t *)(v81 + 5);
    v81[7] = 0;
    v290 = (llvm::BasicBlock *)v80;
    if (v80)
      v84 = (uint64_t *)(v80 + 24);
    else
      v84 = (uint64_t *)v76;
    llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v76, v81);
    v85 = *v84;
    v81[4] = v84;
    *v83 = v85;
    *(_QWORD *)(v85 + 8) = v83;
    *v84 = (uint64_t)v83;
    llvm::Value::setName((uint64_t ***)v81, (uint64_t)&v309);
    v86 = (uint64_t *)v74[5];
    if (v86 == v74 + 5)
    {
      v88 = 0;
    }
    else
    {
      if (v86)
        v87 = (unsigned __int8 *)(v86 - 3);
      else
        v87 = 0;
      if (v87[16] - 29 >= 0xB)
        v88 = 0;
      else
        v88 = (llvm::Instruction *)v87;
    }
    llvm::Instruction::setSuccessor(v88, 0, (llvm::BasicBlock *)v81);
    v89 = **v81;
    v309 = (char *)v311;
    v310 = 0x200000000;
    v315 = v89;
    v316 = &v324;
    v317 = v325;
    v318 = 0;
    v319 = 0;
    v320 = 512;
    v321 = 7;
    v322 = 0;
    v323 = 0;
    v324 = &unk_1E8167888;
    v325[0] = &unk_1E8167A08;
    v313 = v81;
    v314 = v81 + 5;
    v301 = 257;
    v90 = (_QWORD *)sub_1C4867E94((uint64_t)&v309, (uint64_t)v79, 0, (uint64_t)v300);
    v91 = llvm::ConstantInt::get(v79, 0, 0);
    sub_1C477667C((llvm::PHINode *)v90, (uint64_t)v91, (uint64_t)v74);
    v92 = (llvm::GetElementPtrInst *)*v47;
    v299 = 257;
    v93 = sub_1C5098FF4((uint64_t *)&v309, v92, v46, (uint64_t)v90, (uint64_t)&v297);
    llvm::DataLayout::getAlignment(v313[7][5] + 272, *v47);
    v95 = v94;
    v96 = (char *)operator new(0x80uLL);
    v97 = v96;
    *((_DWORD *)v96 + 21) = *((_DWORD *)v96 + 21) & 0x38000000 | 2;
    *(_QWORD *)v96 = 0;
    *((_QWORD *)v96 + 2) = 0;
    *((_QWORD *)v96 + 1) = 0;
    *((_QWORD *)v96 + 5) = 0;
    *((_QWORD *)v96 + 6) = 0;
    *((_QWORD *)v96 + 4) = 0;
    v98 = (uint64_t ****)(v96 + 32);
    *((_QWORD *)v96 + 8) = **(_QWORD **)*v47 + 1576;
    v99 = (llvm::Value *)(v96 + 64);
    *((_QWORD *)v96 + 3) = v96 + 64;
    *((_QWORD *)v96 + 7) = v96 + 64;
    *((_QWORD *)v96 + 9) = 0;
    v96[80] = 61;
    v96[81] = 0;
    *((_WORD *)v96 + 41) = 0;
    *((_DWORD *)v96 + 21) = 2;
    *(_OWORD *)(v96 + 88) = 0u;
    *(_OWORD *)(v96 + 104) = 0u;
    *((_DWORD *)v96 + 30) = 0;
    *(_QWORD *)v96 = v47;
    v102 = v47[1];
    v101 = v47 + 1;
    v100 = v102;
    *((_QWORD *)v96 + 1) = v102;
    if (v102)
      *(_QWORD *)(v100 + 16) = v96 + 8;
    *((_QWORD *)v96 + 2) = v101;
    *v101 = v96;
    if (*((_QWORD *)v96 + 4))
    {
      **((_QWORD **)v96 + 6) = *((_QWORD *)v96 + 5);
      v236 = *((_QWORD *)v96 + 5);
      if (v236)
        *(_QWORD *)(v236 + 16) = *((_QWORD *)v96 + 6);
    }
    *v98 = v93;
    if (v93)
    {
      v105 = v93[1];
      v104 = (uint64_t *****)(v93 + 1);
      v103 = v105;
      *((_QWORD *)v96 + 5) = v105;
      if (v105)
        v103[2] = (uint64_t *)(v96 + 40);
      *((_QWORD *)v96 + 6) = v104;
      *v104 = v98;
    }
    *((_WORD *)v96 + 41) = 2 * (v95 & 0x3F);
    v96[124] = 1;
    v301 = 257;
    (*(void (**)(_QWORD *, llvm::Value *, _QWORD *, uint64_t **, _QWORD **))(*v317 + 16))(v317, v99, v300, v313, v314);
    if ((_DWORD)v310)
    {
      v221 = v309;
      v222 = &v309[16 * v310];
      v223 = (unsigned __int8 **)(v97 + 112);
      do
      {
        v224 = *(_DWORD *)v221;
        v225 = (unsigned __int8 *)*((_QWORD *)v221 + 1);
        if (v225)
        {
          if (!v224)
          {
            v302 = (uint64_t *)*((_QWORD *)v221 + 1);
            llvm::MetadataTracking::track((uint64_t)&v302, v225, 2);
            v226 = *v223;
            goto LABEL_225;
          }
        }
        else
        {
          v226 = *v223;
          if (!*v223 && (v97[87] & 0x20) == 0)
            goto LABEL_222;
          if (!v224)
          {
            v302 = 0;
LABEL_225:
            if (v226)
              llvm::MetadataTracking::untrack((uint64_t)(v97 + 112), v226);
            v227 = (unsigned __int8 *)v302;
            *v223 = (unsigned __int8 *)v302;
            if (v227)
              llvm::MetadataTracking::retrack((uint64_t)&v302, v227, (uint64_t)(v97 + 112));
            goto LABEL_222;
          }
        }
        llvm::Value::setMetadata(v99, *(_DWORD *)v221, (llvm::MDNode *)v225);
LABEL_222:
        v221 += 16;
      }
      while (v221 != v222);
    }
    v106 = llvm::ConstantInt::get(v79, 1, 0);
    v299 = 257;
    v107 = (llvm::Value *)(*((uint64_t (**)(void **, _QWORD *, llvm::Value **, _QWORD, _QWORD))*v316 + 2))(v316, v90, v106, 0, 0);
    if (!v107)
    {
      v301 = 257;
      v108 = (char *)operator new(0x80uLL);
      v109 = v108;
      *(_QWORD *)v108 = 0;
      *((_QWORD *)v108 + 2) = 0;
      *((_QWORD *)v108 + 1) = 0;
      *((_QWORD *)v108 + 5) = 0;
      *((_QWORD *)v108 + 6) = 0;
      *((_QWORD *)v108 + 4) = 0;
      v110 = (llvm::Value ***)(v108 + 32);
      *((_QWORD *)v108 + 8) = *v90;
      v107 = (llvm::Value *)(v108 + 64);
      *((_QWORD *)v108 + 3) = v108 + 64;
      *((_QWORD *)v108 + 7) = v108 + 64;
      *((_QWORD *)v108 + 9) = 0;
      v108[80] = 41;
      v108[81] = 0;
      *((_WORD *)v108 + 41) = 0;
      *((_DWORD *)v108 + 21) = 2;
      *((_DWORD *)v108 + 30) = 0;
      *(_OWORD *)(v108 + 104) = 0u;
      *(_OWORD *)(v108 + 88) = 0u;
      *(_QWORD *)v108 = v90;
      v111 = v90 + 1;
      v112 = v90[1];
      *((_QWORD *)v108 + 1) = v112;
      if (v112)
        *(_QWORD *)(v112 + 16) = v108 + 8;
      *((_QWORD *)v108 + 2) = v111;
      *v111 = v108;
      if (*((_QWORD *)v108 + 4))
      {
        **((_QWORD **)v108 + 6) = *((_QWORD *)v108 + 5);
        v237 = *((_QWORD *)v108 + 5);
        if (v237)
          *(_QWORD *)(v237 + 16) = *((_QWORD *)v108 + 6);
      }
      *v110 = v106;
      if (v106)
      {
        v115 = v106[1];
        v114 = (llvm::Value ****)(v106 + 1);
        v113 = v115;
        *((_QWORD *)v108 + 5) = v115;
        if (v115)
          *((_QWORD *)v113 + 2) = v108 + 40;
        *((_QWORD *)v108 + 6) = v114;
        *v114 = v110;
      }
      llvm::Value::setName((uint64_t ***)v108 + 8, (uint64_t)v300);
      (*(void (**)(_QWORD *, llvm::Value *, uint64_t *, uint64_t **, _QWORD **))(*v317 + 16))(v317, v107, &v297, v313, v314);
      if ((_DWORD)v310)
      {
        v116 = v309;
        v117 = &v309[16 * v310];
        v118 = (unsigned __int8 **)(v109 + 112);
        do
        {
          v119 = *(_DWORD *)v116;
          v120 = (unsigned __int8 *)*((_QWORD *)v116 + 1);
          if (v120)
          {
            if (!v119)
            {
              v302 = (uint64_t *)*((_QWORD *)v116 + 1);
              llvm::MetadataTracking::track((uint64_t)&v302, v120, 2);
              v121 = *v118;
              if (!*v118)
              {
LABEL_124:
                v122 = (unsigned __int8 *)v302;
                *v118 = (unsigned __int8 *)v302;
                if (v122)
                  llvm::MetadataTracking::retrack((uint64_t)&v302, v122, (uint64_t)(v109 + 112));
                goto LABEL_121;
              }
LABEL_118:
              llvm::MetadataTracking::untrack((uint64_t)(v109 + 112), v121);
              goto LABEL_124;
            }
          }
          else
          {
            v121 = *v118;
            if (!*v118 && (v109[87] & 0x20) == 0)
              goto LABEL_121;
            if (!v119)
            {
              v302 = 0;
              if (!v121)
                goto LABEL_124;
              goto LABEL_118;
            }
          }
          llvm::Value::setMetadata(v107, *(_DWORD *)v116, (llvm::MDNode *)v120);
LABEL_121:
          v116 += 16;
        }
        while (v116 != v117);
      }
    }
    sub_1C477667C((llvm::PHINode *)v90, (uint64_t)v107, (uint64_t)v81);
    v299 = 257;
    v123 = (llvm::Value *)sub_1C4774B48((uint64_t)&v309, 36, (uint64_t)v107, (uint64_t)v288, (uint64_t)&v297);
    v124 = operator new(0xA0uLL);
    v125 = v124;
    v126 = 0;
    v127 = (llvm::Value *)(v124 + 24);
    v124[29] = v124[29] & 0x38000000 | 3;
    v12 = v292;
    v13 = v286;
    do
    {
      v128 = &v124[v126];
      *v128 = 0;
      v128[1] = 0;
      v128[2] = 0;
      v128[3] = v127;
      v126 += 8;
    }
    while (v126 != 24);
    llvm::BranchInst::BranchInst((llvm::BranchInst *)(v124 + 24), (llvm::BasicBlock *)v81, v290, v123, 0);
    v301 = 257;
    (*(void (**)(_QWORD *, llvm::Value *, _QWORD *, uint64_t **, _QWORD **))(*v317 + 16))(v317, v127, v300, v313, v314);
    v129 = v309;
    if (!(_DWORD)v310)
      goto LABEL_143;
    v130 = &v309[16 * v310];
    v131 = (unsigned __int8 **)(v125 + 36);
    do
    {
      v132 = *(_DWORD *)v129;
      v133 = (llvm::MDNode *)*((_QWORD *)v129 + 1);
      if (v133)
      {
        if (v132)
        {
LABEL_137:
          llvm::Value::setMetadata(v127, *(_DWORD *)v129, v133);
          goto LABEL_138;
        }
        v302 = (uint64_t *)*((_QWORD *)v129 + 1);
        llvm::MetadataTracking::track((uint64_t)&v302, (unsigned __int8 *)v133, 2);
        v134 = *v131;
        if (!*v131)
          goto LABEL_141;
LABEL_135:
        llvm::MetadataTracking::untrack((uint64_t)(v125 + 36), v134);
        goto LABEL_141;
      }
      v134 = *v131;
      if (!*v131 && (*((_BYTE *)v125 + 119) & 0x20) == 0)
        goto LABEL_138;
      if (v132)
        goto LABEL_137;
      v302 = 0;
      if (v134)
        goto LABEL_135;
LABEL_141:
      v135 = (unsigned __int8 *)v302;
      *v131 = (unsigned __int8 *)v302;
      if (v135)
        llvm::MetadataTracking::retrack((uint64_t)&v302, v135, (uint64_t)(v125 + 36));
LABEL_138:
      v129 += 16;
    }
    while (v129 != v130);
    v129 = v309;
LABEL_143:
    if (v129 != (char *)v311)
      free(v129);
LABEL_185:
    v12 += 8;
  }
  while (v12 != v13);
  if ((_DWORD)v307)
  {
    v238 = (char *)v306;
    v239 = (char *)v306 + 8 * v307;
    do
    {
      v240 = *(_QWORD *)v238;
      v241 = *(_DWORD *)(*(_QWORD *)v238 + 20);
      if ((v241 & 0x40000000) != 0)
      {
        v243 = *(_QWORD *)(v240 - 8);
        v242 = v241 & 0x7FFFFFF;
        if (v242)
        {
LABEL_258:
          v244 = 32 * v242;
          v245 = (_QWORD **)(v243 + 16);
          do
          {
            if (*(v245 - 2))
            {
              **v245 = *(v245 - 1);
              v246 = (uint64_t)*(v245 - 1);
              if (v246)
                *(_QWORD *)(v246 + 16) = *v245;
            }
            *(v245 - 2) = 0;
            v245 += 4;
            v244 -= 32;
          }
          while (v244);
        }
      }
      else
      {
        v242 = v241 & 0x7FFFFFF;
        v243 = v240 - 32 * v242;
        if (v242)
          goto LABEL_258;
      }
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v240 + 40) + 40, (uint64_t ***)v240);
      v247 = *(_QWORD *)(v240 + 24);
      v248 = *(_QWORD **)(v240 + 32);
      *v248 = v247;
      *(_QWORD *)(v247 + 8) = v248;
      *(_QWORD *)(v240 + 24) = 0;
      *(_QWORD *)(v240 + 32) = 0;
      llvm::Value::deleteValue((llvm::Value *)v240);
      v238 += 8;
    }
    while (v238 != v239);
  }
LABEL_267:
  v249 = (uint64_t *)v303;
  if ((_DWORD)v304)
  {
    v250 = 8 * v304;
    do
    {
      v251 = *v249;
      v252 = *v249 - 32 * (*(_DWORD *)(*v249 + 20) & 0x7FFFFFF);
      v293 = *(uint64_t **)v252;
      v294 = *(uint64_t **)(v252 + 32);
      v253 = *(uint64_t ****)(v252 + 96);
      v254 = *(llvm::ValueHandleBase **)(v252 + 64);
      v255 = *(llvm::ConstantInt ***)(v252 + 128);
      v256 = 1;
      v257 = llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(*v249 + 64), 1);
      if ((v257 & 0xFF00) != 0)
        v258 = 1 << v257;
      else
        v258 = 0;
      v259 = llvm::AttributeList::getParamAlignment((llvm::AttributeList *)(v251 + 64), 0);
      v260 = 1 << v259;
      if ((v259 & 0xFF00) == 0)
        LODWORD(v260) = 0;
      if (v260 >= v258)
        v261 = v258;
      else
        v261 = v260;
      v262 = *(_QWORD *)(v252 + 160);
      if (v262)
        v263 = *(_BYTE *)(v262 + 16) == 16;
      else
        v263 = 0;
      if (v263)
      {
        v264 = (_QWORD *)(v262 + 24);
        if (*(_DWORD *)(v262 + 32) >= 0x41u)
          v264 = (_QWORD *)*v264;
        v256 = *v264 != 0;
      }
      if ((sub_1C5604D64(v251, v294, v293, (uint64_t)v255, v261, v256, qword_1ED808078, 1, (uint64_t)v253, 1, v254) & 1) == 0)
        sub_1C5605AA0(v251, v294, v293, v255, v256, v253, 1, v265, v254);
      ++v249;
      v250 -= 8;
    }
    while (v250);
    v249 = (uint64_t *)v303;
    if ((_DWORD)v304)
    {
      v266 = (uint64_t *)((char *)v303 + 8 * v304);
      while (1)
      {
        v267 = *v249;
        v268 = *(_DWORD *)(*v249 + 20);
        if ((v268 & 0x40000000) != 0)
        {
          v270 = *(_QWORD *)(v267 - 8);
          v269 = v268 & 0x7FFFFFF;
          if (v269)
          {
LABEL_292:
            v271 = 32 * v269;
            v272 = (_QWORD **)(v270 + 16);
            do
            {
              if (*(v272 - 2))
              {
                **v272 = *(v272 - 1);
                v273 = (uint64_t)*(v272 - 1);
                if (v273)
                  *(_QWORD *)(v273 + 16) = *v272;
              }
              *(v272 - 2) = 0;
              v272 += 4;
              v271 -= 32;
            }
            while (v271);
          }
        }
        else
        {
          v269 = v268 & 0x7FFFFFF;
          v270 = v267 - 32 * v269;
          if (v269)
            goto LABEL_292;
        }
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v267 + 40) + 40, (uint64_t ***)v267);
        v274 = *(_QWORD *)(v267 + 24);
        v275 = *(_QWORD **)(v267 + 32);
        *v275 = v274;
        *(_QWORD *)(v274 + 8) = v275;
        *(_QWORD *)(v267 + 24) = 0;
        *(_QWORD *)(v267 + 32) = 0;
        llvm::Value::deleteValue((llvm::Value *)v267);
        if (++v249 == v266)
        {
          v276 = v304;
          v249 = (uint64_t *)v303;
          goto LABEL_302;
        }
      }
    }
  }
  v276 = 0;
LABEL_302:
  v277 = v307;
  if (v249 != (uint64_t *)v305)
    free(v249);
  if (v306 != v308)
    free(v306);
  return (v277 | v276) != 0;
}

uint64_t sub_1C5604D64(uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t a4, unint64_t a5, unsigned int a6, unint64_t a7, int a8, uint64_t a9, uint64_t a10, llvm::ValueHandleBase *a11)
{
  const llvm::APInt *v17;
  uint64_t v18;
  unint64_t *v19;
  unint64_t v20;
  unsigned int v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t **v25;
  uint64_t *v26;
  int v27;
  uint64_t ***v28;
  uint64_t ***v29;
  uint64_t v30;
  llvm::ConstantInt *v31;
  char *v32;
  llvm::GetElementPtrInst *v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t v37;
  char *v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t **v45;
  BOOL v46;
  uint64_t *v47;
  uint64_t v48;
  llvm::ConstantInt *v49;
  unint64_t v50;
  int v51;
  llvm::ValueHandleBase *v52;
  uint64_t Declaration;
  uint64_t v54;
  char *v55;
  char *v56;
  uint64_t v57;
  uint64_t ***v58;
  char *v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t **v62;
  uint64_t v63;
  const llvm::APInt *v64;
  uint64_t v65;
  llvm::ConstantInt *v66;
  unint64_t v67;
  int v68;
  llvm::ValueHandleBase *v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  char *v73;
  uint64_t v74;
  uint64_t ***v75;
  char *v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t **v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  _QWORD *v91;
  uint64_t v92;
  _QWORD *v93;
  uint64_t v94;
  __int16 v95;
  char *v96;
  uint64_t v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int v103;
  char v104;
  uint64_t v105;
  uint64_t *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  llvm::ValueSymbolTable *v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  llvm::ValueSymbolTable *v121;
  _DWORD *v122;
  _DWORD *v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unsigned int v129;
  unsigned int v130;
  BOOL v131;
  _QWORD *v132;
  _QWORD *v133;
  int v135;
  uint64_t *v136;
  uint64_t *v137;
  _BOOL4 v138;
  uint64_t *v140;
  uint64_t v141;
  unint64_t v142;
  char v143;
  void *v144;
  uint64_t v145;
  _BYTE v146[256];
  _QWORD *v147;
  uint64_t v148;
  _BYTE v149[256];
  unint64_t v150;
  unsigned int v151;
  __int16 v152;
  llvm::Value **v153;
  uint64_t v154;
  llvm::ValueHandleBase *v155;
  llvm::ValueHandleBase *v156;
  uint64_t v157;

  v157 = *MEMORY[0x1E0C80C00];
  if (*(_BYTE *)(a4 + 16) != 16)
    return 0;
  v131 = sub_1C53924F4(a1);
  v138 = *(_BYTE *)(a1 + 16) == 84
      && (v18 = *(_QWORD *)(a1 - 32)) != 0
      && !*(_BYTE *)(v18 + 16)
      && *(_QWORD *)(v18 + 24) == *(_QWORD *)(a1 + 72)
      && (*(_BYTE *)(v18 + 33) & 0x20) != 0
      && *(_DWORD *)(v18 + 36) == 2143;
  v19 = (unint64_t *)(a4 + 24);
  if (*(_DWORD *)(a4 + 32) >= 0x41u)
    v19 = (unint64_t *)*v19;
  v20 = *v19;
  if (*v19)
  {
    if (v20 > a7)
      return 0;
    v22 = *(_DWORD *)(*a2 + 8);
    if ((v22 & 0xFE) == 0x12)
      v22 = *(_DWORD *)(**(_QWORD **)(*a2 + 16) + 8);
    v130 = v22 >> 8;
    v23 = *(_DWORD *)(*a3 + 8);
    if ((v23 & 0xFE) == 0x12)
      v23 = *(_DWORD *)(**(_QWORD **)(*a3 + 16) + 8);
    v24 = 0;
    v129 = v23 >> 8;
    v147 = v149;
    v26 = (uint64_t *)(a1 + 24);
    v25 = *(uint64_t ***)a1;
    v148 = 0x2000000000;
    v144 = v146;
    if (a5 - 1 < 3)
      v27 = a8;
    else
      v27 = 0;
    v135 = v27;
    v145 = 0x2000000000;
    v133 = a2 + 1;
    v132 = a3 + 1;
    v140 = *v25;
    v136 = a2;
    v137 = a3;
    while (1)
    {
      v28 = (uint64_t ***)a3;
      v29 = (uint64_t ***)a2;
      if (v24)
      {
        v30 = *v140;
        v31 = (llvm::ConstantInt *)(*v140 + 1984);
        v153 = 0;
        v153 = llvm::ConstantInt::get(v31, v24, 0);
        v152 = 257;
        v32 = (char *)operator new(0x90uLL);
        *((_DWORD *)v32 + 21) = *((_DWORD *)v32 + 21) & 0x38000000 | 2;
        v29 = (uint64_t ***)(v32 + 64);
        *(_QWORD *)v32 = 0;
        *((_QWORD *)v32 + 1) = 0;
        *((_QWORD *)v32 + 2) = 0;
        *((_QWORD *)v32 + 3) = v32 + 64;
        *((_QWORD *)v32 + 4) = 0;
        *((_QWORD *)v32 + 5) = 0;
        *((_QWORD *)v32 + 6) = 0;
        *((_QWORD *)v32 + 7) = v32 + 64;
        v33 = (llvm::GetElementPtrInst *)(v30 + 1912);
        sub_1C4774650(v33, a2, (llvm::Value *)&v153, 1);
        *((_QWORD *)v32 + 8) = v34;
        *((_QWORD *)v32 + 9) = 0;
        v35 = *((_DWORD *)v32 + 21) & 0xC0000000 | 2;
        *((_DWORD *)v32 + 20) = 62;
        *((_DWORD *)v32 + 21) = v35;
        *(_OWORD *)(v32 + 88) = 0u;
        *(_OWORD *)(v32 + 104) = 0u;
        *((_DWORD *)v32 + 30) = 0;
        v36 = *(_QWORD *)v32;
        *((_QWORD *)v32 + 16) = v33;
        *((_QWORD *)v32 + 17) = v33;
        if (v36)
        {
          **((_QWORD **)v32 + 2) = *((_QWORD *)v32 + 1);
          v125 = *((_QWORD *)v32 + 1);
          if (v125)
            *(_QWORD *)(v125 + 16) = *((_QWORD *)v32 + 2);
        }
        *(_QWORD *)v32 = a2;
        v37 = a2[1];
        *((_QWORD *)v32 + 1) = v37;
        if (v37)
          *(_QWORD *)(v37 + 16) = v32 + 8;
        *((_QWORD *)v32 + 2) = v133;
        *v133 = v32;
        sub_1C5382FD4((uint64_t)&v143, (uint64_t *)&v153, &v154, (uint64_t)&v29[-4 * (*((_DWORD *)v32 + 21) & 0x7FFFFFF) + 4]);
        llvm::Value::setName(v29, (uint64_t)&v150);
        v152 = 257;
        v38 = (char *)operator new(0x90uLL);
        *((_DWORD *)v38 + 21) = *((_DWORD *)v38 + 21) & 0x38000000 | 2;
        v28 = (uint64_t ***)(v38 + 64);
        *(_QWORD *)v38 = 0;
        *((_QWORD *)v38 + 1) = 0;
        *((_QWORD *)v38 + 2) = 0;
        *((_QWORD *)v38 + 3) = v38 + 64;
        *((_QWORD *)v38 + 4) = 0;
        *((_QWORD *)v38 + 5) = 0;
        *((_QWORD *)v38 + 6) = 0;
        *((_QWORD *)v38 + 7) = v38 + 64;
        sub_1C4774650(v33, a3, (llvm::Value *)&v153, 1);
        *((_QWORD *)v38 + 8) = v39;
        *((_QWORD *)v38 + 9) = 0;
        v40 = *((_DWORD *)v38 + 21) & 0xC0000000 | 2;
        *((_DWORD *)v38 + 20) = 62;
        *((_DWORD *)v38 + 21) = v40;
        *(_OWORD *)(v38 + 88) = 0u;
        *(_OWORD *)(v38 + 104) = 0u;
        *((_DWORD *)v38 + 30) = 0;
        v41 = *(_QWORD *)v38;
        *((_QWORD *)v38 + 16) = v33;
        *((_QWORD *)v38 + 17) = v33;
        if (v41)
        {
          **((_QWORD **)v38 + 2) = *((_QWORD *)v38 + 1);
          v126 = *((_QWORD *)v38 + 1);
          if (v126)
            *(_QWORD *)(v126 + 16) = *((_QWORD *)v38 + 2);
        }
        *(_QWORD *)v38 = a3;
        v42 = a3[1];
        *((_QWORD *)v38 + 1) = v42;
        if (v42)
          *(_QWORD *)(v42 + 16) = v38 + 8;
        *((_QWORD *)v38 + 2) = v132;
        *v132 = v38;
        sub_1C5382FD4((uint64_t)&v143, (uint64_t *)&v153, &v154, (uint64_t)&v28[-4 * (*((_DWORD *)v38 + 21) & 0x7FFFFFF) + 4]);
        llvm::Value::setName(v28, (uint64_t)&v150);
        v43 = v148;
        if (v148 >= (unint64_t)HIDWORD(v148))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v147, (uint64_t)v149, v148 + 1, 8);
          v43 = v148;
        }
        v147[v43] = v29;
        LODWORD(v148) = v148 + 1;
        v44 = v145;
        if (v145 >= (unint64_t)HIDWORD(v145))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v144, (uint64_t)v146, v145 + 1, 8);
          v44 = v145;
        }
        *((_QWORD *)v144 + v44) = v28;
        LODWORD(v145) = v145 + 1;
      }
      v142 = v20;
      if (v135)
      {
        if (v20 >= a5)
          v20 = a5;
        LODWORD(v150) = 8 * v20;
        if (8 * (_DWORD)v20 == 16)
        {
          v45 = (uint64_t **)(*v140 + 1936);
        }
        else if (8 * (_DWORD)v20 == 8)
        {
          v45 = (uint64_t **)(*v140 + 1912);
        }
        else
        {
          v122 = sub_1C5270984(*v140 + 2168, &v150);
          v45 = (uint64_t **)*((_QWORD *)v122 + 1);
          if (!v45)
          {
            v123 = v122;
            v45 = (uint64_t **)sub_1C484358C(*v140 + 2040, 24, 3);
            v124 = v150;
            *v45 = v140;
            v45[2] = 0;
            v45[1] = (uint64_t *)((v124 << 8) | 0xDu);
            *((_QWORD *)v123 + 1) = v45;
          }
        }
      }
      else if (v20 < 4)
      {
        v46 = v20 >= 2;
        if (v20 >= 2)
          v20 = 2;
        else
          v20 = 1;
        if (v46)
          v45 = (uint64_t **)(*v140 + 1936);
        else
          v45 = (uint64_t **)(*v140 + 1912);
      }
      else
      {
        v45 = (uint64_t **)(*v140 + 1960);
        v20 = 4;
      }
      v141 = v24;
      if (v138)
      {
        v47 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 56) + 40);
        v48 = *(_QWORD *)*v47;
        v49 = *(llvm::ConstantInt **)(v48 + 1888);
        v50 = *(unsigned int *)(v48 + 1896);
        v151 = v50 >> 8;
        if (v50 >> 8 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v150, a6, 0);
        }
        else
        {
          if (v50 <= 0xFF)
            v51 = 0;
          else
            v51 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v50);
          v150 = v51 & a6;
        }
        v52 = llvm::ConstantInt::get(v49, (llvm::LLVMContext *)&v150, v17);
        if (v151 >= 0x41 && v150)
          MEMORY[0x1CAA32F9C](v150, 0x1000C8000313F17);
        v150 = (unint64_t)v45;
        Declaration = llvm::Intrinsic::getDeclaration(v47, 2142, (uint64_t *)&v150, 1);
        v54 = *(_QWORD *)(Declaration + 24);
        v153 = (llvm::Value **)v29;
        v154 = a9;
        v155 = v52;
        v152 = 257;
        v55 = (char *)operator new(0xD0uLL);
        v56 = v55;
        v57 = 0;
        v58 = (uint64_t ***)(v55 + 128);
        *((_DWORD *)v55 + 37) = *((_DWORD *)v55 + 37) & 0x38000000 | 4;
        do
        {
          v59 = &v55[v57];
          *(_QWORD *)v59 = 0;
          *((_QWORD *)v59 + 1) = 0;
          *((_QWORD *)v59 + 2) = 0;
          *((_QWORD *)v59 + 3) = v58;
          v57 += 32;
        }
        while (v57 != 128);
        *((_QWORD *)v55 + 16) = **(_QWORD **)(v54 + 16);
        *((_QWORD *)v55 + 17) = 0;
        v55[144] = 84;
        v55[145] = 0;
        *((_WORD *)v55 + 73) = 0;
        *((_DWORD *)v55 + 37) = *((_DWORD *)v55 + 37) & 0xC0000000 | 4;
        *(_OWORD *)(v55 + 152) = 0u;
        *(_OWORD *)(v55 + 168) = 0u;
        *((_DWORD *)v55 + 46) = 0;
        *((_QWORD *)v55 + 24) = 0;
        *((_QWORD *)v55 + 25) = v54;
        sub_1C5382FD4((uint64_t)&v143, (uint64_t *)&v153, (uint64_t *)&v156, (uint64_t)v55);
        v60 = (uint64_t *)(v56 + 96);
        if (*((_QWORD *)v56 + 12))
        {
          **((_QWORD **)v56 + 14) = *((_QWORD *)v56 + 13);
          v127 = *((_QWORD *)v56 + 13);
          if (v127)
            *(_QWORD *)(v127 + 16) = *((_QWORD *)v56 + 14);
        }
        *v60 = Declaration;
        if (Declaration)
        {
          v63 = *(_QWORD *)(Declaration + 8);
          v62 = (uint64_t **)(Declaration + 8);
          v61 = v63;
          *((_QWORD *)v56 + 13) = v63;
          if (v63)
            *(_QWORD *)(v61 + 16) = v56 + 104;
          *((_QWORD *)v56 + 14) = v62;
          *v62 = v60;
        }
        llvm::CallBase::populateBundleOperandInfos((uint64_t)v58, 0, 0, 3u);
        llvm::Value::setName(v58, (uint64_t)&v150);
        v65 = *(_QWORD *)*v47;
        v66 = *(llvm::ConstantInt **)(v65 + 1888);
        v67 = *(unsigned int *)(v65 + 1896);
        v151 = v67 >> 8;
        if (v67 >> 8 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v150, a6, 0);
        }
        else
        {
          if (v67 <= 0xFF)
            v68 = 0;
          else
            v68 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v67);
          v150 = v68 & a6;
        }
        v69 = llvm::ConstantInt::get(v66, (llvm::LLVMContext *)&v150, v64);
        if (v151 >= 0x41 && v150)
          MEMORY[0x1CAA32F9C](v150, 0x1000C8000313F17);
        v150 = (unint64_t)*v58;
        v70 = llvm::Intrinsic::getDeclaration(v47, 2144, (uint64_t *)&v150, 1);
        v71 = *(_QWORD *)(v70 + 24);
        v153 = (llvm::Value **)v28;
        v154 = (uint64_t)v58;
        v155 = a11;
        v156 = v69;
        v152 = 257;
        v72 = (char *)operator new(0xF0uLL);
        v73 = v72;
        v74 = 0;
        v75 = (uint64_t ***)(v72 + 160);
        *((_DWORD *)v72 + 45) = *((_DWORD *)v72 + 45) & 0x38000000 | 5;
        do
        {
          v76 = &v72[v74];
          *(_QWORD *)v76 = 0;
          *((_QWORD *)v76 + 1) = 0;
          *((_QWORD *)v76 + 2) = 0;
          *((_QWORD *)v76 + 3) = v75;
          v74 += 32;
        }
        while (v74 != 160);
        *((_QWORD *)v72 + 20) = **(_QWORD **)(v71 + 16);
        *((_QWORD *)v72 + 21) = 0;
        v72[176] = 84;
        v72[177] = 0;
        *((_WORD *)v72 + 89) = 0;
        *((_DWORD *)v72 + 45) = *((_DWORD *)v72 + 45) & 0xC0000000 | 5;
        *(_OWORD *)(v72 + 184) = 0u;
        *(_OWORD *)(v72 + 200) = 0u;
        *((_DWORD *)v72 + 54) = 0;
        *((_QWORD *)v72 + 28) = 0;
        *((_QWORD *)v72 + 29) = v71;
        sub_1C5382FD4((uint64_t)&v143, (uint64_t *)&v153, &v157, (uint64_t)v72);
        v77 = (uint64_t *)(v73 + 128);
        a3 = v137;
        if (*((_QWORD *)v73 + 16))
        {
          **((_QWORD **)v73 + 18) = *((_QWORD *)v73 + 17);
          v128 = *((_QWORD *)v73 + 17);
          if (v128)
            *(_QWORD *)(v128 + 16) = *((_QWORD *)v73 + 18);
        }
        *v77 = v70;
        v78 = v141;
        if (v70)
        {
          v81 = *(_QWORD *)(v70 + 8);
          v80 = (uint64_t **)(v70 + 8);
          v79 = v81;
          *((_QWORD *)v73 + 17) = v81;
          if (v81)
            *(_QWORD *)(v79 + 16) = v73 + 136;
          *((_QWORD *)v73 + 18) = v80;
          *v80 = v77;
        }
        llvm::CallBase::populateBundleOperandInfos((uint64_t)v75, 0, 0, 4u);
        llvm::Value::setName(v75, (uint64_t)&v150);
      }
      else
      {
        llvm::PointerType::get((llvm::PointerType *)v45, (llvm::Type *)v130);
        v152 = 257;
        llvm::CastInst::Create(49);
        v83 = v82;
        llvm::PointerType::get((llvm::PointerType *)v45, (llvm::Type *)v129);
        v152 = 257;
        llvm::CastInst::Create(49);
        v85 = v84;
        v86 = v148;
        if (v148 >= (unint64_t)HIDWORD(v148))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v147, (uint64_t)v149, v148 + 1, 8);
          v86 = v148;
        }
        v147[v86] = v83;
        LODWORD(v148) = v148 + 1;
        v87 = v145;
        if (v145 >= (unint64_t)HIDWORD(v145))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v144, (uint64_t)v146, v145 + 1, 8);
          v87 = v145;
        }
        *((_QWORD *)v144 + v87) = v85;
        LODWORD(v145) = v145 + 1;
        if (v20 >= a5)
          v88 = a5;
        else
          v88 = v20;
        v89 = (char *)operator new(0x60uLL);
        v90 = v89;
        v58 = (uint64_t ***)(v89 + 32);
        *((_QWORD *)v89 + 2) = 0;
        *((_QWORD *)v89 + 3) = v89 + 32;
        v152 = 257;
        *((_QWORD *)v89 + 4) = v45;
        *((_QWORD *)v89 + 5) = 0;
        v91 = v89 + 40;
        *((_WORD *)v89 + 24) = 60;
        *((_DWORD *)v89 + 13) = 1;
        *(_OWORD *)(v89 + 56) = 0u;
        *(_OWORD *)(v89 + 72) = 0u;
        *((_DWORD *)v89 + 22) = 0;
        *(_QWORD *)v89 = v83;
        *((_QWORD *)v89 + 1) = 0;
        if (v83)
        {
          v94 = *(_QWORD *)(v83 + 8);
          v93 = (_QWORD *)(v83 + 8);
          v92 = v94;
          *((_QWORD *)v89 + 1) = v94;
          if (v94)
            *(_QWORD *)(v92 + 16) = v89 + 8;
          *((_QWORD *)v89 + 2) = v93;
          *v93 = v89;
        }
        v95 = (126 - 2 * __clz(v88)) & 0x7E | a6;
        *((_WORD *)v89 + 25) = v95;
        v89[92] = 1;
        llvm::Value::setName((uint64_t ***)v89 + 4, (uint64_t)&v150);
        v96 = (char *)operator new(0x80uLL);
        *((_DWORD *)v96 + 21) = *((_DWORD *)v96 + 21) & 0x38000000 | 2;
        *(_QWORD *)v96 = 0;
        *((_QWORD *)v96 + 2) = 0;
        *((_QWORD *)v96 + 1) = 0;
        *((_QWORD *)v96 + 5) = 0;
        *((_QWORD *)v96 + 6) = 0;
        *((_QWORD *)v96 + 4) = 0;
        v97 = *((_QWORD *)v90 + 5);
        *((_QWORD *)v96 + 8) = ***((_QWORD ***)v90 + 4) + 1576;
        v75 = (uint64_t ***)(v96 + 64);
        *((_QWORD *)v96 + 3) = v96 + 64;
        *((_QWORD *)v96 + 7) = v96 + 64;
        *((_QWORD *)v96 + 9) = 0;
        v96[80] = 61;
        v96[81] = 0;
        *((_DWORD *)v96 + 21) = 2;
        *(_OWORD *)(v96 + 88) = 0u;
        *(_OWORD *)(v96 + 104) = 0u;
        *((_DWORD *)v96 + 30) = 0;
        *(_QWORD *)v96 = v58;
        *((_QWORD *)v96 + 1) = v97;
        if (v97)
          *(_QWORD *)(v97 + 16) = v96 + 8;
        *((_QWORD *)v96 + 2) = v91;
        *v91 = v96;
        *((_QWORD *)v96 + 4) = v85;
        a3 = v137;
        if (v85)
        {
          v100 = *(_QWORD *)(v85 + 8);
          v99 = (_QWORD *)(v85 + 8);
          v98 = v100;
          *((_QWORD *)v96 + 5) = v100;
          if (v100)
            *(_QWORD *)(v98 + 16) = v96 + 40;
          *((_QWORD *)v96 + 6) = v99;
          *v99 = v96 + 32;
        }
        *((_WORD *)v96 + 41) = v95;
        v96[124] = 1;
        v78 = v141;
      }
      v101 = v148;
      if (v148 >= (unint64_t)HIDWORD(v148))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v147, (uint64_t)v149, v148 + 1, 8);
        v101 = v148;
      }
      v147[v101] = v58;
      LODWORD(v148) = v148 + 1;
      v102 = v145;
      if (v145 >= (unint64_t)HIDWORD(v145))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v144, (uint64_t)v146, v145 + 1, 8);
        v102 = v145;
      }
      *((_QWORD *)v144 + v102) = v75;
      v103 = v145 + 1;
      LODWORD(v145) = v145 + 1;
      v24 = v20 + v78;
      v20 = v142 - v20;
      a2 = v136;
      if (v20)
      {
        v104 = v131;
        if ((v24 & 0x7F) != 0)
          v104 = 1;
        if ((v104 & 1) != 0)
          goto LABEL_119;
      }
      if ((_DWORD)v148)
        break;
      v105 = v24;
      if (v103)
        goto LABEL_111;
LABEL_118:
      LODWORD(v148) = 0;
      LODWORD(v145) = 0;
      v24 = v105;
LABEL_119:
      if (!v20)
      {
        if (v144 != v146)
          free(v144);
        if (v147 != (_QWORD *)v149)
          free(v147);
        return 1;
      }
    }
    v105 = v24;
    v106 = v147;
    v107 = 8 * v148;
    do
    {
      v108 = *v106;
      v109 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(v108 + 40) = v109;
      *(_WORD *)(v109 + 18) &= ~0x8000u;
      if ((*(_BYTE *)(v108 + 23) & 0x10) != 0)
      {
        v112 = *(_QWORD *)(v109 + 56);
        if (v112)
        {
          v113 = *(llvm::ValueSymbolTable **)(v112 + 104);
          if (v113)
            llvm::ValueSymbolTable::reinsertValue(v113, (llvm::Value *)v108);
        }
      }
      v110 = *v26;
      *(_QWORD *)(v108 + 24) = *v26;
      *(_QWORD *)(v108 + 32) = v26;
      v111 = v108 + 24;
      *(_QWORD *)(v110 + 8) = v111;
      *v26 = v111;
      ++v106;
      v107 -= 8;
    }
    while (v107);
    v103 = v145;
    if (!(_DWORD)v145)
      goto LABEL_118;
LABEL_111:
    v114 = (uint64_t *)v144;
    v115 = 8 * v103;
    do
    {
      v116 = *v114;
      v117 = *(_QWORD *)(a1 + 40);
      *(_QWORD *)(v116 + 40) = v117;
      *(_WORD *)(v117 + 18) &= ~0x8000u;
      if ((*(_BYTE *)(v116 + 23) & 0x10) != 0)
      {
        v120 = *(_QWORD *)(v117 + 56);
        if (v120)
        {
          v121 = *(llvm::ValueSymbolTable **)(v120 + 104);
          if (v121)
            llvm::ValueSymbolTable::reinsertValue(v121, (llvm::Value *)v116);
        }
      }
      v118 = *v26;
      *(_QWORD *)(v116 + 24) = *v26;
      *(_QWORD *)(v116 + 32) = v26;
      v119 = v116 + 24;
      *(_QWORD *)(v118 + 8) = v119;
      *v26 = v119;
      ++v114;
      v115 -= 8;
    }
    while (v115);
    goto LABEL_118;
  }
  return 1;
}

uint64_t sub_1C5605AA0(uint64_t a1, uint64_t *a2, uint64_t *a3, llvm::ConstantInt **a4, unsigned int a5, uint64_t ***a6, uint64_t a7, uint64_t a8, llvm::ValueHandleBase *a9)
{
  uint64_t *v16;
  llvm::BasicBlock *v17;
  int v18;
  uint64_t v19;
  uint64_t **v20;
  uint64_t *v21;
  unsigned __int8 *v22;
  llvm::Instruction *v23;
  const char *v25;
  __int16 v26;

  v16 = *(uint64_t **)(a1 + 40);
  v25 = "memcpy.split";
  v26 = 259;
  v17 = (llvm::BasicBlock *)llvm::BasicBlock::splitBasicBlock(v16, (uint64_t *)(a1 + 24), (uint64_t)&v25, 0);
  v18 = 0;
  if (*(_BYTE *)(a1 + 16) == 84)
  {
    v19 = *(_QWORD *)(a1 - 32);
    v18 = v19
       && !*(_BYTE *)(v19 + 16)
       && *(_QWORD *)(v19 + 24) == *(_QWORD *)(a1 + 72)
       && (*(_BYTE *)(v19 + 33) & 0x20) != 0
       && *(_DWORD *)(v19 + 36) == 2143;
  }
  v20 = sub_1C5605BDC((uint64_t)v16, v17, (uint64_t)v17, a2, a3, a4, a5, v18, a6, a7, a9);
  v21 = (uint64_t *)v16[5];
  if (v21 == v16 + 5)
  {
    v23 = 0;
  }
  else
  {
    if (v21)
      v22 = (unsigned __int8 *)(v21 - 3);
    else
      v22 = 0;
    if (v22[16] - 29 >= 0xB)
      v23 = 0;
    else
      v23 = (llvm::Instruction *)v22;
  }
  return llvm::Instruction::setSuccessor(v23, 0, (llvm::BasicBlock *)v20);
}

uint64_t **sub_1C5605BDC(uint64_t a1, llvm::BasicBlock *a2, uint64_t a3, uint64_t *a4, uint64_t *a5, llvm::ConstantInt **a6, unsigned int a7, int a8, uint64_t ***a9, uint64_t a10, llvm::ValueHandleBase *a11)
{
  uint64_t v14;
  _QWORD *v15;
  llvm::ConstantInt *v16;
  uint64_t **v17;
  unsigned int v18;
  _QWORD *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  llvm::GetElementPtrInst *v24;
  const llvm::APInt *v25;
  uint64_t ***v26;
  uint64_t *v27;
  uint64_t v28;
  uint64_t v29;
  llvm::ConstantInt *v30;
  unint64_t v31;
  int v32;
  llvm::ValueHandleBase *v33;
  uint64_t Declaration;
  uint64_t v35;
  char *v36;
  char *v37;
  uint64_t v38;
  uint64_t ***v39;
  char *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t **v43;
  uint64_t v44;
  const llvm::APInt *v45;
  uint64_t ***v46;
  uint64_t v47;
  llvm::ConstantInt *v48;
  unint64_t v49;
  unint64_t v50;
  llvm::ValueHandleBase *v51;
  uint64_t v52;
  uint64_t v53;
  char *v54;
  char *v55;
  uint64_t v56;
  uint64_t ***v57;
  char *v58;
  uint64_t *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  uint64_t **v63;
  uint64_t v64;
  char *v65;
  char *v66;
  unsigned __int8 **v67;
  int v68;
  unsigned __int8 *v69;
  unsigned __int8 *v70;
  unsigned __int8 *v71;
  char v72;
  char v73;
  char *v74;
  char *v75;
  uint64_t *v76;
  uint64_t *v77;
  uint64_t **v78;
  _QWORD *v79;
  uint64_t **v80;
  uint64_t ***v81;
  char v82;
  char v83;
  char *v84;
  char *v85;
  llvm::Value *v86;
  uint64_t v87;
  uint64_t **v88;
  _QWORD *v89;
  uint64_t **v90;
  llvm::Value **v91;
  llvm::Value *v92;
  llvm::Value *v93;
  _DWORD *v94;
  _DWORD *v95;
  uint64_t v96;
  llvm::Value *v97;
  _QWORD *v98;
  char *v99;
  char *v100;
  unsigned __int8 **v101;
  int v102;
  unsigned __int8 *v103;
  unsigned __int8 *v104;
  unsigned __int8 *v105;
  llvm::Value **v106;
  char *v108;
  char *v109;
  llvm::Value **v110;
  _QWORD *v111;
  uint64_t v112;
  llvm::Value *v113;
  _QWORD *v114;
  llvm::Value *v115;
  char *v116;
  char *v117;
  unsigned __int8 **v118;
  int v119;
  unsigned __int8 *v120;
  unsigned __int8 *v121;
  unsigned __int8 *v122;
  char *v123;
  char *v124;
  unsigned __int8 **v125;
  int v126;
  unsigned __int8 *v127;
  unsigned __int8 *v128;
  unsigned __int8 *v129;
  char *v130;
  char *v131;
  unsigned __int8 **v132;
  int v133;
  unsigned __int8 *v134;
  unsigned __int8 *v135;
  unsigned __int8 **v136;
  unsigned __int8 *v137;
  char *v138;
  char *v139;
  unsigned __int8 **v140;
  int v141;
  unsigned __int8 *v142;
  unsigned __int8 *v143;
  unsigned __int8 *v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v148;
  unsigned __int8 **v149;
  unint64_t v150;
  unint64_t v151;
  llvm::ConstantInt *v155;
  uint64_t v157;
  unsigned __int8 *v158;
  unsigned __int8 *v159;
  uint64_t ***v160;
  llvm::ValueHandleBase *v161;
  llvm::ValueHandleBase *v162;
  uint64_t v163;
  void *v164;
  uint64_t v165;
  _WORD v166[16];
  uint64_t **v167;
  _QWORD **v168;
  uint64_t v169;
  void **v170;
  void **v171;
  uint64_t v172;
  int v173;
  __int16 v174;
  char v175;
  uint64_t v176;
  uint64_t v177;
  void *v178;
  void *v179;
  unint64_t v180;
  unsigned int v181;
  __int16 v182;
  uint64_t v183;

  v183 = *MEMORY[0x1E0C80C00];
  v14 = *(_QWORD *)(a1 + 56);
  v15 = **(_QWORD ***)v14;
  v16 = *a6;
  v164 = "copy_forward_loop";
  v166[8] = 259;
  v17 = (uint64_t **)operator new();
  *v17 = (uint64_t *)(*v15 + 1600);
  v17[1] = 0;
  v18 = *((_DWORD *)v17 + 5) & 0xC0000000;
  *((_DWORD *)v17 + 4) = 22;
  *((_DWORD *)v17 + 5) = v18;
  v17[3] = 0;
  v19 = v17 + 3;
  v17[4] = 0;
  v17[5] = (uint64_t *)(v17 + 5);
  v17[6] = (uint64_t *)(v17 + 5);
  v17[7] = 0;
  if (a3)
    v20 = (uint64_t *)(a3 + 24);
  else
    v20 = (uint64_t *)(v14 + 72);
  llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v14 + 72, v17);
  v21 = *v20;
  v17[4] = v20;
  *v19 = v21;
  *(_QWORD *)(v21 + 8) = v19;
  *v20 = (uint64_t)v19;
  llvm::Value::setName((uint64_t ***)v17, (uint64_t)&v164);
  v22 = **v17;
  v164 = v166;
  v165 = 0x200000000;
  v169 = v22;
  v170 = &v178;
  v171 = &v179;
  v172 = 0;
  v173 = 0;
  v174 = 512;
  v175 = 7;
  v176 = 0;
  v177 = 0;
  v178 = &unk_1E8167888;
  v179 = &unk_1E8167A08;
  v167 = v17;
  v168 = v17 + 5;
  v182 = 257;
  v155 = v16;
  v23 = sub_1C4867E94((uint64_t)&v164, (uint64_t)v16, 0, (uint64_t)&v180);
  v24 = (llvm::GetElementPtrInst *)(*v15 + 1912);
  v182 = 257;
  v157 = v23;
  v26 = sub_1C5098FF4((uint64_t *)&v164, v24, a4, v23, (uint64_t)&v180);
  if (!a8)
  {
    LOWORD(v163) = 257;
    llvm::DataLayout::getAlignment(v167[7][5] + 272, (uint64_t)v24);
    v73 = v72;
    v74 = (char *)operator new(0x60uLL);
    v75 = v74;
    v76 = (uint64_t *)(v74 + 32);
    *((_QWORD *)v74 + 2) = 0;
    *((_QWORD *)v74 + 3) = v74 + 32;
    v182 = 257;
    *((_QWORD *)v74 + 4) = v24;
    *((_QWORD *)v74 + 5) = 0;
    v77 = (uint64_t *)(v74 + 40);
    *((_WORD *)v74 + 24) = 60;
    *((_DWORD *)v74 + 13) = 1;
    *(_OWORD *)(v74 + 56) = 0u;
    *(_OWORD *)(v74 + 72) = 0u;
    *((_DWORD *)v74 + 22) = 0;
    *(_QWORD *)v74 = v26;
    *((_QWORD *)v74 + 1) = 0;
    if (v26)
    {
      v80 = v26[1];
      v79 = v26 + 1;
      v78 = v80;
      *((_QWORD *)v74 + 1) = v80;
      if (v80)
        v78[2] = (uint64_t *)(v74 + 8);
      *((_QWORD *)v74 + 2) = v79;
      *v79 = v74;
    }
    *((_WORD *)v74 + 25) = a7 & 0xFF81 | (2 * (v73 & 0x3F));
    v74[92] = 1;
    llvm::Value::setName((uint64_t ***)v74 + 4, (uint64_t)&v180);
    (*((void (**)(void **, uint64_t *, unsigned __int8 **, uint64_t **, _QWORD **))*v171 + 2))(v171, v76, &v159, v167, v168);
    v60 = a1;
    if (!(_DWORD)v165)
    {
LABEL_53:
      v182 = 257;
      v81 = sub_1C5098FF4((uint64_t *)&v164, v24, a5, v157, (uint64_t)&v180);
      llvm::DataLayout::getAlignment(v167[7][5] + 272, *v76);
      v83 = v82;
      v84 = (char *)operator new(0x80uLL);
      v85 = v84;
      *((_DWORD *)v84 + 21) = *((_DWORD *)v84 + 21) & 0x38000000 | 2;
      *(_QWORD *)v84 = 0;
      *((_QWORD *)v84 + 2) = 0;
      *((_QWORD *)v84 + 1) = 0;
      *((_QWORD *)v84 + 5) = 0;
      *((_QWORD *)v84 + 6) = 0;
      *((_QWORD *)v84 + 4) = 0;
      *((_QWORD *)v84 + 8) = **(_QWORD **)*v76 + 1576;
      v86 = (llvm::Value *)(v84 + 64);
      *((_QWORD *)v84 + 3) = v84 + 64;
      *((_QWORD *)v84 + 7) = v84 + 64;
      *((_QWORD *)v84 + 9) = 0;
      v84[80] = 61;
      v84[81] = 0;
      *((_DWORD *)v84 + 21) = 2;
      *(_OWORD *)(v84 + 88) = 0u;
      *(_OWORD *)(v84 + 104) = 0u;
      *((_DWORD *)v84 + 30) = 0;
      v87 = *v77;
      *(_QWORD *)v84 = v76;
      *((_QWORD *)v84 + 1) = v87;
      if (v87)
        *(_QWORD *)(v87 + 16) = v84 + 8;
      *((_QWORD *)v84 + 2) = v77;
      *v77 = (uint64_t)v84;
      *((_QWORD *)v84 + 4) = v81;
      v61 = (_QWORD *)v157;
      if (v81)
      {
        v90 = v81[1];
        v89 = v81 + 1;
        v88 = v90;
        *((_QWORD *)v84 + 5) = v90;
        if (v90)
          v88[2] = (uint64_t *)(v84 + 40);
        *((_QWORD *)v84 + 6) = v89;
        *v89 = v84 + 32;
      }
      *((_WORD *)v84 + 41) = a7 & 0xFF81 | (2 * (v83 & 0x3F));
      v84[124] = 1;
      v182 = 257;
      (*((void (**)(void **, llvm::Value *, unint64_t *, uint64_t **, _QWORD **))*v171 + 2))(v171, v86, &v180, v167, v168);
      if (!(_DWORD)v165)
        goto LABEL_60;
      v138 = (char *)v164;
      v139 = (char *)v164 + 16 * v165;
      v140 = (unsigned __int8 **)(v85 + 112);
      while (1)
      {
        v141 = *(_DWORD *)v138;
        v142 = (unsigned __int8 *)*((_QWORD *)v138 + 1);
        if (v142)
        {
          if (!v141)
          {
            v159 = (unsigned __int8 *)*((_QWORD *)v138 + 1);
            llvm::MetadataTracking::track((uint64_t)&v159, v142, 2);
            v143 = *v140;
            goto LABEL_143;
          }
        }
        else
        {
          v143 = *v140;
          if (!*v140 && (v85[87] & 0x20) == 0)
            goto LABEL_140;
          if (!v141)
          {
            v159 = 0;
LABEL_143:
            if (v143)
              llvm::MetadataTracking::untrack((uint64_t)(v85 + 112), v143);
            v144 = v159;
            *v140 = v159;
            if (v144)
              llvm::MetadataTracking::retrack((uint64_t)&v159, v144, (uint64_t)(v85 + 112));
            goto LABEL_140;
          }
        }
        llvm::Value::setMetadata(v86, *(_DWORD *)v138, (llvm::MDNode *)v142);
LABEL_140:
        v138 += 16;
        if (v138 == v139)
          goto LABEL_60;
      }
    }
    v123 = (char *)v164;
    v124 = (char *)v164 + 16 * v165;
    v125 = (unsigned __int8 **)(v75 + 80);
    while (1)
    {
      v126 = *(_DWORD *)v123;
      v127 = (unsigned __int8 *)*((_QWORD *)v123 + 1);
      if (v127)
      {
        if (!v126)
        {
          v158 = (unsigned __int8 *)*((_QWORD *)v123 + 1);
          llvm::MetadataTracking::track((uint64_t)&v158, v127, 2);
          v128 = *v125;
          goto LABEL_113;
        }
      }
      else
      {
        v128 = *v125;
        if (!*v125 && (v75[55] & 0x20) == 0)
          goto LABEL_110;
        if (!v126)
        {
          v158 = 0;
LABEL_113:
          if (v128)
            llvm::MetadataTracking::untrack((uint64_t)(v75 + 80), v128);
          v129 = v158;
          *v125 = v158;
          if (v129)
            llvm::MetadataTracking::retrack((uint64_t)&v158, v129, (uint64_t)(v75 + 80));
          goto LABEL_110;
        }
      }
      llvm::Value::setMetadata((llvm::Value *)v76, *(_DWORD *)v123, (llvm::MDNode *)v127);
LABEL_110:
      v123 += 16;
      if (v123 == v124)
        goto LABEL_53;
    }
  }
  v27 = *(uint64_t **)(v14 + 40);
  v28 = *(_QWORD *)*v27;
  v29 = a7;
  v30 = *(llvm::ConstantInt **)(v28 + 1888);
  v31 = *(unsigned int *)(v28 + 1896);
  v181 = v31 >> 8;
  if (v31 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v180, a7, 0);
  }
  else
  {
    if (v31 <= 0xFF)
      v32 = 0;
    else
      v32 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v31);
    v180 = v32 & a7;
  }
  v33 = llvm::ConstantInt::get(v30, (llvm::LLVMContext *)&v180, v25);
  if (v181 >= 0x41 && v180)
    MEMORY[0x1CAA32F9C](v180, 0x1000C8000313F17);
  v180 = (unint64_t)v24;
  Declaration = llvm::Intrinsic::getDeclaration(v27, 2142, (uint64_t *)&v180, 1);
  v35 = *(_QWORD *)(Declaration + 24);
  v159 = (unsigned __int8 *)v26;
  v160 = a9;
  v161 = v33;
  v182 = 257;
  v36 = (char *)operator new(0xD0uLL);
  v37 = v36;
  v38 = 0;
  v39 = (uint64_t ***)(v36 + 128);
  *((_DWORD *)v36 + 37) = *((_DWORD *)v36 + 37) & 0x38000000 | 4;
  do
  {
    v40 = &v36[v38];
    *(_QWORD *)v40 = 0;
    *((_QWORD *)v40 + 1) = 0;
    *((_QWORD *)v40 + 2) = 0;
    *((_QWORD *)v40 + 3) = v39;
    v38 += 32;
  }
  while (v38 != 128);
  *((_QWORD *)v36 + 16) = **(_QWORD **)(v35 + 16);
  *((_QWORD *)v36 + 17) = 0;
  v36[144] = 84;
  v36[145] = 0;
  *((_WORD *)v36 + 73) = 0;
  *((_DWORD *)v36 + 37) = *((_DWORD *)v36 + 37) & 0xC0000000 | 4;
  *(_OWORD *)(v36 + 152) = 0u;
  *(_OWORD *)(v36 + 168) = 0u;
  *((_DWORD *)v36 + 46) = 0;
  *((_QWORD *)v36 + 24) = 0;
  *((_QWORD *)v36 + 25) = v35;
  sub_1C5382FD4((uint64_t)&v158, (uint64_t *)&v159, (uint64_t *)&v162, (uint64_t)v36);
  v41 = (uint64_t *)(v37 + 96);
  if (*((_QWORD *)v37 + 12))
  {
    **((_QWORD **)v37 + 14) = *((_QWORD *)v37 + 13);
    v145 = *((_QWORD *)v37 + 13);
    if (v145)
      *(_QWORD *)(v145 + 16) = *((_QWORD *)v37 + 14);
  }
  *v41 = Declaration;
  if (Declaration)
  {
    v44 = *(_QWORD *)(Declaration + 8);
    v43 = (uint64_t **)(Declaration + 8);
    v42 = v44;
    *((_QWORD *)v37 + 13) = v44;
    if (v44)
      *(_QWORD *)(v42 + 16) = v37 + 104;
    *((_QWORD *)v37 + 14) = v43;
    *v43 = v41;
  }
  llvm::CallBase::populateBundleOperandInfos((uint64_t)v39, 0, 0, 3u);
  llvm::Value::setName(v39, (uint64_t)&v180);
  v182 = 257;
  (*((void (**)(void **, uint64_t ***, unint64_t *, uint64_t **, _QWORD **))*v171 + 2))(v171, v39, &v180, v167, v168);
  if ((_DWORD)v165)
  {
    v130 = (char *)v164;
    v131 = (char *)v164 + 16 * v165;
    v132 = (unsigned __int8 **)(v37 + 176);
    do
    {
      v133 = *(_DWORD *)v130;
      v134 = (unsigned __int8 *)*((_QWORD *)v130 + 1);
      if (v134)
      {
        if (!v133)
        {
          v159 = (unsigned __int8 *)*((_QWORD *)v130 + 1);
          v149 = v132;
          llvm::MetadataTracking::track((uint64_t)&v159, v134, 2);
          v132 = v149;
          v135 = *v149;
          goto LABEL_128;
        }
      }
      else
      {
        v135 = *v132;
        if (!*v132 && (v37[151] & 0x20) == 0)
          goto LABEL_125;
        if (!v133)
        {
          v159 = 0;
LABEL_128:
          if (v135)
          {
            v151 = (unint64_t)v132;
            llvm::MetadataTracking::untrack((uint64_t)v132, v135);
            v132 = (unsigned __int8 **)v151;
          }
          v137 = v159;
          *v132 = v159;
          if (v137)
          {
            v150 = (unint64_t)v132;
            llvm::MetadataTracking::retrack((uint64_t)&v159, v137, (uint64_t)v132);
            v132 = (unsigned __int8 **)v150;
          }
          goto LABEL_125;
        }
      }
      v148 = (unint64_t)v131;
      v136 = v132;
      llvm::Value::setMetadata((llvm::Value *)v39, *(_DWORD *)v130, (llvm::MDNode *)v134);
      v132 = v136;
      v131 = (char *)v148;
LABEL_125:
      v130 += 16;
    }
    while (v130 != v131);
  }
  v182 = 257;
  v46 = sub_1C5098FF4((uint64_t *)&v164, v24, a5, v157, (uint64_t)&v180);
  v47 = *(_QWORD *)*v27;
  v48 = *(llvm::ConstantInt **)(v47 + 1888);
  v49 = *(unsigned int *)(v47 + 1896);
  v181 = v49 >> 8;
  if (v49 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v180, v29, 0);
  }
  else
  {
    if (v49 <= 0xFF)
      v50 = 0;
    else
      v50 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v49);
    v180 = v50 & v29;
  }
  v51 = llvm::ConstantInt::get(v48, (llvm::LLVMContext *)&v180, v45);
  v16 = v155;
  if (v181 >= 0x41 && v180)
    MEMORY[0x1CAA32F9C](v180, 0x1000C8000313F17);
  v180 = (unint64_t)*v39;
  v52 = llvm::Intrinsic::getDeclaration(v27, 2144, (uint64_t *)&v180, 1);
  v53 = *(_QWORD *)(v52 + 24);
  v159 = (unsigned __int8 *)v46;
  v160 = v39;
  v161 = a11;
  v162 = v51;
  v182 = 257;
  v54 = (char *)operator new(0xF0uLL);
  v55 = v54;
  v56 = 0;
  v57 = (uint64_t ***)(v54 + 160);
  *((_DWORD *)v54 + 45) = *((_DWORD *)v54 + 45) & 0x38000000 | 5;
  do
  {
    v58 = &v54[v56];
    *(_QWORD *)v58 = 0;
    *((_QWORD *)v58 + 1) = 0;
    *((_QWORD *)v58 + 2) = 0;
    *((_QWORD *)v58 + 3) = v57;
    v56 += 32;
  }
  while (v56 != 160);
  *((_QWORD *)v54 + 20) = **(_QWORD **)(v53 + 16);
  *((_QWORD *)v54 + 21) = 0;
  v54[176] = 84;
  v54[177] = 0;
  *((_WORD *)v54 + 89) = 0;
  *((_DWORD *)v54 + 45) = *((_DWORD *)v54 + 45) & 0xC0000000 | 5;
  *(_OWORD *)(v54 + 184) = 0u;
  *(_OWORD *)(v54 + 200) = 0u;
  *((_DWORD *)v54 + 54) = 0;
  *((_QWORD *)v54 + 28) = 0;
  *((_QWORD *)v54 + 29) = v53;
  sub_1C5382FD4((uint64_t)&v158, (uint64_t *)&v159, &v163, (uint64_t)v54);
  v59 = (uint64_t *)(v55 + 128);
  v60 = a1;
  v61 = (_QWORD *)v157;
  if (*((_QWORD *)v55 + 16))
  {
    **((_QWORD **)v55 + 18) = *((_QWORD *)v55 + 17);
    v146 = *((_QWORD *)v55 + 17);
    if (v146)
      *(_QWORD *)(v146 + 16) = *((_QWORD *)v55 + 18);
  }
  *v59 = v52;
  if (v52)
  {
    v64 = *(_QWORD *)(v52 + 8);
    v63 = (uint64_t **)(v52 + 8);
    v62 = v64;
    *((_QWORD *)v55 + 17) = v64;
    if (v64)
      *(_QWORD *)(v62 + 16) = v55 + 136;
    *((_QWORD *)v55 + 18) = v63;
    *v63 = v59;
  }
  llvm::CallBase::populateBundleOperandInfos((uint64_t)v57, 0, 0, 4u);
  llvm::Value::setName(v57, (uint64_t)&v180);
  v182 = 257;
  (*((void (**)(void **, uint64_t ***, unint64_t *, uint64_t **, _QWORD **))*v171 + 2))(v171, v57, &v180, v167, v168);
  if ((_DWORD)v165)
  {
    v65 = (char *)v164;
    v66 = (char *)v164 + 16 * v165;
    v67 = (unsigned __int8 **)(v55 + 208);
    do
    {
      v68 = *(_DWORD *)v65;
      v69 = (unsigned __int8 *)*((_QWORD *)v65 + 1);
      if (v69)
      {
        if (!v68)
        {
          v159 = (unsigned __int8 *)*((_QWORD *)v65 + 1);
          llvm::MetadataTracking::track((uint64_t)&v159, v69, 2);
          v70 = *v67;
          goto LABEL_44;
        }
      }
      else
      {
        v70 = *v67;
        if (!*v67 && (v55[183] & 0x20) == 0)
          goto LABEL_41;
        if (!v68)
        {
          v159 = 0;
LABEL_44:
          if (v70)
            llvm::MetadataTracking::untrack((uint64_t)(v55 + 208), v70);
          v71 = v159;
          *v67 = v159;
          if (v71)
            llvm::MetadataTracking::retrack((uint64_t)&v159, v71, (uint64_t)(v55 + 208));
          goto LABEL_41;
        }
      }
      llvm::Value::setMetadata((llvm::Value *)v57, *(_DWORD *)v65, (llvm::MDNode *)v69);
LABEL_41:
      v65 += 16;
    }
    while (v65 != v66);
  }
LABEL_60:
  v91 = llvm::ConstantInt::get(v16, 1, 0);
  LOWORD(v163) = 257;
  v92 = (llvm::Value *)(*((uint64_t (**)(void **, _QWORD *, llvm::Value **, _QWORD, _QWORD))*v170 + 2))(v170, v61, v91, 0, 0);
  if (!v92)
  {
    v182 = 257;
    v108 = (char *)operator new(0x80uLL);
    v109 = v108;
    *((_QWORD *)v108 + 6) = 0;
    *((_QWORD *)v108 + 5) = 0;
    v110 = (llvm::Value **)(v108 + 40);
    *((_QWORD *)v108 + 8) = *v61;
    v92 = (llvm::Value *)(v108 + 64);
    *((_QWORD *)v108 + 3) = v108 + 64;
    *((_QWORD *)v108 + 7) = v108 + 64;
    *((_QWORD *)v108 + 9) = 0;
    v108[80] = 41;
    v108[81] = 0;
    *((_WORD *)v108 + 41) = 0;
    *((_DWORD *)v108 + 21) = 2;
    *(_OWORD *)(v108 + 88) = 0u;
    *(_OWORD *)(v108 + 104) = 0u;
    *((_DWORD *)v108 + 30) = 0;
    *(_QWORD *)v108 = v61;
    v111 = v61 + 1;
    v112 = v61[1];
    *((_QWORD *)v108 + 1) = v112;
    if (v112)
      *(_QWORD *)(v112 + 16) = v108 + 8;
    *((_QWORD *)v108 + 2) = v111;
    *v111 = v108;
    *((_QWORD *)v108 + 4) = v91;
    if (v91)
    {
      v115 = v91[1];
      v114 = v91 + 1;
      v113 = v115;
      *v110 = v115;
      if (v115)
        *((_QWORD *)v113 + 2) = v110;
      *((_QWORD *)v108 + 6) = v114;
      *v114 = v108 + 32;
    }
    llvm::Value::setName((uint64_t ***)v108 + 8, (uint64_t)&v180);
    (*((void (**)(void **, llvm::Value *, unsigned __int8 **, uint64_t **, _QWORD **))*v171 + 2))(v171, v92, &v159, v167, v168);
    if ((_DWORD)v165)
    {
      v116 = (char *)v164;
      v117 = (char *)v164 + 16 * v165;
      v118 = (unsigned __int8 **)(v109 + 112);
      do
      {
        v119 = *(_DWORD *)v116;
        v120 = (unsigned __int8 *)*((_QWORD *)v116 + 1);
        if (v120)
        {
          if (!v119)
          {
            v158 = (unsigned __int8 *)*((_QWORD *)v116 + 1);
            llvm::MetadataTracking::track((uint64_t)&v158, v120, 2);
            v121 = *v118;
            if (!*v118)
            {
LABEL_100:
              v122 = v158;
              *v118 = v158;
              if (v122)
                llvm::MetadataTracking::retrack((uint64_t)&v158, v122, (uint64_t)(v109 + 112));
              goto LABEL_97;
            }
LABEL_94:
            llvm::MetadataTracking::untrack((uint64_t)(v109 + 112), v121);
            goto LABEL_100;
          }
        }
        else
        {
          v121 = *v118;
          if (!*v118 && (v109[87] & 0x20) == 0)
            goto LABEL_97;
          if (!v119)
          {
            v158 = 0;
            if (!v121)
              goto LABEL_100;
            goto LABEL_94;
          }
        }
        llvm::Value::setMetadata(v92, *(_DWORD *)v116, (llvm::MDNode *)v120);
LABEL_97:
        v116 += 16;
      }
      while (v116 != v117);
    }
  }
  LOWORD(v163) = 257;
  v93 = (llvm::Value *)sub_1C4774B48((uint64_t)&v164, 32, (uint64_t)v92, (uint64_t)a6, (uint64_t)&v159);
  v94 = operator new(0xA0uLL);
  v95 = v94;
  v96 = 0;
  v97 = (llvm::Value *)(v94 + 24);
  v94[29] = v94[29] & 0x38000000 | 3;
  do
  {
    v98 = &v94[v96];
    *v98 = 0;
    v98[1] = 0;
    v98[2] = 0;
    v98[3] = v97;
    v96 += 8;
  }
  while (v96 != 24);
  llvm::BranchInst::BranchInst((llvm::BranchInst *)(v94 + 24), a2, (llvm::BasicBlock *)v17, v93, 0);
  v182 = 257;
  (*((void (**)(void **, llvm::Value *, unint64_t *, uint64_t **, _QWORD **))*v171 + 2))(v171, v97, &v180, v167, v168);
  if ((_DWORD)v165)
  {
    v99 = (char *)v164;
    v100 = (char *)v164 + 16 * v165;
    v101 = (unsigned __int8 **)(v95 + 36);
    do
    {
      v102 = *(_DWORD *)v99;
      v103 = (unsigned __int8 *)*((_QWORD *)v99 + 1);
      if (v103)
      {
        if (!v102)
        {
          v158 = (unsigned __int8 *)*((_QWORD *)v99 + 1);
          llvm::MetadataTracking::track((uint64_t)&v158, v103, 2);
          v104 = *v101;
          if (!*v101)
          {
LABEL_76:
            v105 = v158;
            *v101 = v158;
            if (v105)
              llvm::MetadataTracking::retrack((uint64_t)&v158, v105, (uint64_t)(v95 + 36));
            goto LABEL_73;
          }
LABEL_70:
          llvm::MetadataTracking::untrack((uint64_t)(v95 + 36), v104);
          goto LABEL_76;
        }
      }
      else
      {
        v104 = *v101;
        if (!*v101 && (*((_BYTE *)v95 + 119) & 0x20) == 0)
          goto LABEL_73;
        if (!v102)
        {
          v158 = 0;
          if (!v104)
            goto LABEL_76;
          goto LABEL_70;
        }
      }
      llvm::Value::setMetadata(v97, *(_DWORD *)v99, (llvm::MDNode *)v103);
LABEL_73:
      v99 += 16;
    }
    while (v99 != v100);
  }
  v106 = llvm::ConstantInt::get(v16, 0, 0);
  sub_1C477667C((llvm::PHINode *)v61, (uint64_t)v106, v60);
  sub_1C477667C((llvm::PHINode *)v61, (uint64_t)v92, (uint64_t)v17);
  if (v164 != v166)
    free(v164);
  return v17;
}

llvm::Value **sub_1C56069C4(uint64_t a1, llvm::PoisonValue *this, uint64_t a3, unsigned int a4)
{
  llvm::ConstantInt *v4;
  int v5;
  unsigned int v7;
  unsigned __int8 *v8;
  uint64_t v9;
  unsigned int v10;
  uint64_t v11;
  llvm::Value *ZExtOrBitCast;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  llvm::Value **v18;
  char *v19;
  char *v20;
  llvm::Value **v21;
  llvm::Value *v22;
  uint64_t *v23;
  char *v24;
  uint64_t v25;
  _QWORD *v26;
  llvm::Value *v27;
  _QWORD *v28;
  llvm::Value *v29;
  uint64_t v30;
  uint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  BOOL v39;
  uint64_t v40;
  llvm::ValueSymbolTable *v41;
  uint64_t v42;
  llvm::ValueSymbolTable *v43;
  uint64_t v44;
  uint64_t v45;
  llvm::ValueSymbolTable *v46;
  llvm::ConstantInt *v47;
  uint64_t v48;
  _BYTE v49[32];
  __int16 v50;

  v4 = this;
  v5 = *(unsigned __int8 *)(a3 + 16);
  if (v5 == 12)
    return (llvm::Value **)llvm::PoisonValue::get(this, this);
  if ((v5 - 11) <= 1)
    return (llvm::Value **)llvm::UndefValue::get(this, this);
  v7 = a4;
  if (v5 == 16)
  {
    v8 = (unsigned __int8 *)(a3 + 24);
    if (*(_DWORD *)(a3 + 32) >= 0x41u)
      v8 = *(unsigned __int8 **)v8;
    v9 = *v8;
    v10 = a4 - 1;
    v11 = v9;
    do
    {
      v11 = v9 | (v11 << 8);
      --v10;
    }
    while (v10);
    return llvm::ConstantInt::get(v4, v11, 0);
  }
  else
  {
    v50 = 257;
    ZExtOrBitCast = llvm::CastInst::CreateZExtOrBitCast((uint64_t *)a3, (uint64_t)this, (uint64_t)v49, 0);
    v14 = *(_QWORD *)(a1 + 40);
    *((_QWORD *)ZExtOrBitCast + 5) = v14;
    *(_WORD *)(v14 + 18) &= ~0x8000u;
    if ((*((_BYTE *)ZExtOrBitCast + 23) & 0x10) != 0)
    {
      v45 = *(_QWORD *)(v14 + 56);
      if (v45)
      {
        v46 = *(llvm::ValueSymbolTable **)(v45 + 104);
        if (v46)
          llvm::ValueSymbolTable::reinsertValue(v46, ZExtOrBitCast);
      }
    }
    v16 = (uint64_t *)(a1 + 24);
    v15 = *(_QWORD *)(a1 + 24);
    *((_QWORD *)ZExtOrBitCast + 3) = v15;
    *((_QWORD *)ZExtOrBitCast + 4) = a1 + 24;
    *(_QWORD *)(v15 + 8) = (char *)ZExtOrBitCast + 24;
    *(_QWORD *)(a1 + 24) = (char *)ZExtOrBitCast + 24;
    v17 = 8;
    v47 = v4;
    v48 = a1;
    do
    {
      v18 = llvm::ConstantInt::get(v4, v17, 0);
      v50 = 257;
      v19 = (char *)operator new(0x80uLL);
      v20 = v19;
      *((_QWORD *)v19 + 6) = 0;
      *((_QWORD *)v19 + 5) = 0;
      v21 = (llvm::Value **)(v19 + 40);
      *((_QWORD *)v19 + 8) = *(_QWORD *)ZExtOrBitCast;
      v22 = (llvm::Value *)(v19 + 64);
      *((_QWORD *)v19 + 3) = v19 + 64;
      *((_QWORD *)v19 + 7) = v19 + 64;
      *((_QWORD *)v19 + 9) = 0;
      v23 = (uint64_t *)(v19 + 72);
      v19[80] = 53;
      v19[81] = 0;
      *((_WORD *)v19 + 41) = 0;
      *((_DWORD *)v19 + 21) = 2;
      *(_OWORD *)(v19 + 88) = 0u;
      v24 = v19 + 88;
      *(_OWORD *)(v19 + 104) = 0u;
      *((_DWORD *)v19 + 30) = 0;
      *(_QWORD *)v19 = ZExtOrBitCast;
      v26 = (_QWORD *)((char *)ZExtOrBitCast + 8);
      v25 = *((_QWORD *)ZExtOrBitCast + 1);
      *((_QWORD *)v19 + 1) = v25;
      if (v25)
        *(_QWORD *)(v25 + 16) = v19 + 8;
      *((_QWORD *)v19 + 2) = v26;
      *v26 = v19;
      *((_QWORD *)v19 + 4) = v18;
      if (v18)
      {
        v29 = v18[1];
        v28 = v18 + 1;
        v27 = v29;
        *v21 = v29;
        if (v29)
          *((_QWORD *)v27 + 2) = v21;
        *((_QWORD *)v19 + 6) = v28;
        *v28 = v19 + 32;
      }
      llvm::Value::setName((uint64_t ***)v19 + 8, (uint64_t)v49);
      v30 = *(_QWORD *)(v48 + 40);
      *((_QWORD *)v20 + 13) = v30;
      *(_WORD *)(v30 + 18) &= ~0x8000u;
      if ((v20[87] & 0x10) != 0)
      {
        v40 = *(_QWORD *)(v30 + 56);
        if (v40)
        {
          v41 = *(llvm::ValueSymbolTable **)(v40 + 104);
          if (v41)
            llvm::ValueSymbolTable::reinsertValue(v41, v22);
        }
      }
      v31 = *v16;
      *((_QWORD *)v20 + 11) = *v16;
      *((_QWORD *)v20 + 12) = v16;
      *(_QWORD *)(v31 + 8) = v24;
      *v16 = (uint64_t)v24;
      v50 = 257;
      v32 = (char *)operator new(0x80uLL);
      v33 = v32;
      *(_QWORD *)v32 = 0;
      *((_QWORD *)v32 + 2) = 0;
      *((_QWORD *)v32 + 1) = 0;
      *((_QWORD *)v32 + 5) = 0;
      *((_QWORD *)v32 + 6) = 0;
      *((_QWORD *)v32 + 4) = 0;
      *((_QWORD *)v32 + 8) = *(_QWORD *)ZExtOrBitCast;
      *((_QWORD *)v32 + 3) = v32 + 64;
      *((_QWORD *)v32 + 7) = v32 + 64;
      *((_QWORD *)v32 + 9) = 0;
      v32[80] = 57;
      v32[81] = 0;
      *((_WORD *)v32 + 41) = 0;
      *(_OWORD *)(v32 + 88) = 0u;
      v34 = v32 + 88;
      *((_DWORD *)v32 + 21) = 2;
      *((_DWORD *)v32 + 30) = 0;
      *(_OWORD *)(v32 + 104) = 0u;
      *(_QWORD *)v32 = ZExtOrBitCast;
      v35 = *((_QWORD *)ZExtOrBitCast + 1);
      *((_QWORD *)v32 + 1) = v35;
      if (v35)
        *(_QWORD *)(v35 + 16) = v32 + 8;
      *((_QWORD *)v32 + 2) = v26;
      *v26 = v32;
      v4 = v47;
      if (*((_QWORD *)v32 + 4))
      {
        **((_QWORD **)v32 + 6) = *((_QWORD *)v32 + 5);
        v44 = *((_QWORD *)v32 + 5);
        if (v44)
          *(_QWORD *)(v44 + 16) = *((_QWORD *)v32 + 6);
      }
      v36 = *v23;
      *((_QWORD *)v32 + 5) = *v23;
      *((_QWORD *)v32 + 4) = v22;
      if (v36)
        *(_QWORD *)(v36 + 16) = v32 + 40;
      ZExtOrBitCast = (llvm::Value *)(v32 + 64);
      *((_QWORD *)v32 + 6) = v23;
      *v23 = (uint64_t)(v32 + 32);
      llvm::Value::setName((uint64_t ***)v32 + 8, (uint64_t)v49);
      v37 = *(_QWORD *)(v48 + 40);
      *((_QWORD *)v33 + 13) = v37;
      *(_WORD *)(v37 + 18) &= ~0x8000u;
      if ((v33[87] & 0x10) != 0)
      {
        v42 = *(_QWORD *)(v37 + 56);
        if (v42)
        {
          v43 = *(llvm::ValueSymbolTable **)(v42 + 104);
          if (v43)
            llvm::ValueSymbolTable::reinsertValue(v43, ZExtOrBitCast);
        }
      }
      v38 = *v16;
      *((_QWORD *)v33 + 11) = *v16;
      *((_QWORD *)v33 + 12) = v16;
      *(_QWORD *)(v38 + 8) = v34;
      *v16 = (uint64_t)v34;
      v17 *= 2;
      v39 = v7 > 3;
      v7 >>= 1;
    }
    while (v39);
    return (llvm::Value **)ZExtOrBitCast;
  }
}

unint64_t sub_1C5606DB4(uint64_t a1, uint64_t a2, llvm::PointerType *this, uint64_t a4, unint64_t a5, unint64_t a6, unint64_t a7)
{
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  char *v18;
  llvm::ConstantInt ***v19;
  llvm::ConstantInt **v20;
  char *v21;
  uint64_t v22;
  unsigned int v23;
  char *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  char *v30;
  char *v31;
  _QWORD *v32;
  uint64_t v33;
  llvm::Value *v34;
  __int16 v35;
  unint64_t v36;
  char *v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  llvm::ValueSymbolTable *v44;
  uint64_t v45;
  llvm::ValueSymbolTable *v46;
  uint64_t v47;
  uint64_t v48;
  llvm::ValueSymbolTable *v49;
  _QWORD *v50;
  uint64_t v51;
  _QWORD *v53;
  char v55[32];
  __int16 v56;
  llvm::Value **v57;
  uint64_t v58;

  llvm::PointerType::get(this, (llvm::Type *)*(unsigned int *)(a1 + 8));
  v56 = 257;
  llvm::CastInst::Create(49);
  v13 = (_QWORD *)v12;
  v14 = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(v12 + 40) = v14;
  *(_WORD *)(v14 + 18) &= ~0x8000u;
  if ((*(_BYTE *)(v12 + 23) & 0x10) != 0)
  {
    v48 = *(_QWORD *)(v14 + 56);
    if (v48)
    {
      v49 = *(llvm::ValueSymbolTable **)(v48 + 104);
      if (v49)
        llvm::ValueSymbolTable::reinsertValue(v49, (llvm::Value *)v13);
    }
  }
  v16 = (uint64_t *)(a2 + 24);
  v15 = *(_QWORD *)(a2 + 24);
  v13[3] = v15;
  v13[4] = a2 + 24;
  *(_QWORD *)(v15 + 8) = v13 + 3;
  *(_QWORD *)(a2 + 24) = v13 + 3;
  if (a6 >= a5)
  {
    v50 = v13 + 1;
    v53 = (_QWORD *)(a4 + 8);
    v51 = a2;
    do
    {
      v18 = (char *)v13;
      if (a7)
      {
        v19 = *(llvm::ConstantInt ****)(a1 + 16);
        v20 = v19[1];
        if (!*v20)
        {
          *v20 = (llvm::ConstantInt *)((char *)**v19 + 1984);
          v20 = v19[1];
        }
        v57 = 0;
        v57 = llvm::ConstantInt::get(*v20, a7 / a5, 0);
        v56 = 257;
        v21 = (char *)operator new(0x90uLL);
        *((_DWORD *)v21 + 21) = *((_DWORD *)v21 + 21) & 0x38000000 | 2;
        v18 = v21 + 64;
        *(_QWORD *)v21 = 0;
        *((_QWORD *)v21 + 1) = 0;
        *((_QWORD *)v21 + 2) = 0;
        *((_QWORD *)v21 + 3) = v21 + 64;
        *((_QWORD *)v21 + 4) = 0;
        *((_QWORD *)v21 + 5) = 0;
        *((_QWORD *)v21 + 6) = 0;
        *((_QWORD *)v21 + 7) = v21 + 64;
        sub_1C4774650(this, v13, (llvm::Value *)&v57, 1);
        *((_QWORD *)v21 + 8) = v22;
        *((_QWORD *)v21 + 9) = 0;
        v23 = *((_DWORD *)v21 + 21) & 0xC0000000 | 2;
        *(_OWORD *)(v21 + 88) = 0u;
        v24 = v21 + 88;
        *((_DWORD *)v21 + 20) = 62;
        *((_DWORD *)v21 + 21) = v23;
        *(_OWORD *)(v21 + 104) = 0u;
        *((_DWORD *)v21 + 30) = 0;
        v25 = *(_QWORD *)v21;
        *((_QWORD *)v21 + 16) = this;
        *((_QWORD *)v21 + 17) = this;
        if (v25)
        {
          **((_QWORD **)v21 + 2) = *((_QWORD *)v21 + 1);
          v47 = *((_QWORD *)v21 + 1);
          if (v47)
            *(_QWORD *)(v47 + 16) = *((_QWORD *)v21 + 2);
        }
        *(_QWORD *)v21 = v13;
        v26 = v13[1];
        *((_QWORD *)v21 + 1) = v26;
        a2 = v51;
        if (v26)
          *(_QWORD *)(v26 + 16) = v21 + 8;
        *((_QWORD *)v21 + 2) = v50;
        *v50 = v21;
        sub_1C5382FD4((uint64_t)&v58 + 7, (uint64_t *)&v57, &v58, (uint64_t)&v18[-32 * (*((_DWORD *)v21 + 21) & 0x7FFFFFF) + 32]);
        llvm::Value::setName((uint64_t ***)v18, (uint64_t)v55);
        v27 = *(_QWORD *)(v51 + 40);
        *((_QWORD *)v21 + 13) = v27;
        *(_WORD *)(v27 + 18) &= ~0x8000u;
        if ((v21[87] & 0x10) != 0)
        {
          v45 = *(_QWORD *)(v27 + 56);
          if (v45)
          {
            v46 = *(llvm::ValueSymbolTable **)(v45 + 104);
            if (v46)
              llvm::ValueSymbolTable::reinsertValue(v46, (llvm::Value *)v18);
          }
        }
        v28 = *v16;
        *((_QWORD *)v21 + 11) = *v16;
        *((_QWORD *)v21 + 12) = v16;
        *(_QWORD *)(v28 + 8) = v24;
        *v16 = (uint64_t)v24;
      }
      v29 = *(_QWORD *)(a1 + 24);
      v30 = (char *)operator new(0x80uLL);
      v31 = v30;
      *((_DWORD *)v30 + 21) = *((_DWORD *)v30 + 21) & 0x38000000 | 2;
      *((_QWORD *)v30 + 2) = 0;
      *(_QWORD *)v30 = 0;
      *((_QWORD *)v30 + 1) = 0;
      v32 = v30 + 8;
      *((_QWORD *)v30 + 5) = 0;
      *((_QWORD *)v30 + 6) = 0;
      *((_QWORD *)v30 + 4) = 0;
      v33 = *(_QWORD *)(a4 + 8);
      *((_QWORD *)v30 + 8) = ***(_QWORD ***)a4 + 1576;
      v34 = (llvm::Value *)(v30 + 64);
      *((_QWORD *)v30 + 3) = v30 + 64;
      *((_QWORD *)v30 + 7) = v30 + 64;
      v35 = *(unsigned __int8 *)(v29 + 8);
      v36 = *(_QWORD *)v29;
      if (*(_QWORD *)v29 >= a5)
        v36 = a5;
      *((_QWORD *)v30 + 9) = 0;
      v30[80] = 61;
      v30[81] = 0;
      *((_DWORD *)v30 + 21) = 2;
      *(_OWORD *)(v30 + 88) = 0u;
      v37 = v30 + 88;
      *((_DWORD *)v30 + 30) = 0;
      *(_OWORD *)(v30 + 104) = 0u;
      *(_QWORD *)v30 = a4;
      *v32 = v33;
      if (v33)
        *(_QWORD *)(v33 + 16) = v32;
      *((_QWORD *)v30 + 2) = v53;
      *v53 = v30;
      *((_QWORD *)v30 + 4) = v18;
      if (v18)
      {
        v40 = *((_QWORD *)v18 + 1);
        v39 = v18 + 8;
        v38 = v40;
        *((_QWORD *)v30 + 5) = v40;
        if (v40)
          *(_QWORD *)(v38 + 16) = v30 + 40;
        *((_QWORD *)v30 + 6) = v39;
        *v39 = v30 + 32;
      }
      *((_WORD *)v30 + 41) = (126 - 2 * __clz(v36)) & 0x7E | v35;
      v30[124] = 1;
      v41 = *(_QWORD *)(a2 + 40);
      *((_QWORD *)v30 + 13) = v41;
      *(_WORD *)(v41 + 18) &= ~0x8000u;
      if ((v30[87] & 0x10) != 0)
      {
        v43 = *(_QWORD *)(v41 + 56);
        if (v43)
        {
          v44 = *(llvm::ValueSymbolTable **)(v43 + 104);
          if (v44)
            llvm::ValueSymbolTable::reinsertValue(v44, v34);
        }
      }
      v42 = *v16;
      *((_QWORD *)v31 + 11) = *v16;
      *((_QWORD *)v31 + 12) = v16;
      *(_QWORD *)(v42 + 8) = v37;
      *v16 = (uint64_t)v37;
      a6 -= a5;
      a7 += a5;
    }
    while (a6 >= a5);
  }
  return a6;
}

uint64_t sub_1C56071A0()
{
  __int128 v1;
  int v2;
  int v3;
  int *v4;

  v4 = &v3;
  v2 = 1;
  v3 = 256;
  *(_QWORD *)&v1 = "Don't expand MemMove if the size is bigger than this number";
  *((_QWORD *)&v1 + 1) = 59;
  sub_1C627FFB8(&v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1C56031FC, &qword_1ED807E68, &dword_1C475E000);
  v2 = 1;
  v3 = 0x2000;
  v4 = &v3;
  *(_QWORD *)&v1 = "Don't expand MemSet if the size is bigger than this number";
  *((_QWORD *)&v1 + 1) = 58;
  sub_1C62800F4((uint64_t)&unk_1ED807F30, "memset-expansion-threshold", &v4, &v2, &v1);
  __cxa_atexit((void (*)(void *))sub_1C56031FC, &unk_1ED807F30, &dword_1C475E000);
  v2 = 1;
  v3 = 0x2000;
  v4 = &v3;
  *(_QWORD *)&v1 = "Don't expand MemCpy if the size is bigger than this number";
  *((_QWORD *)&v1 + 1) = 58;
  sub_1C62800F4((uint64_t)&unk_1ED807FF8, "memcpy-expansion-threshold", &v4, &v2, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C56031FC, &unk_1ED807FF8, &dword_1C475E000);
}

uint64_t sub_1C56072C4(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeDominatorTreeWrapperPassPass(a1);
  llvm::initializePostDominatorTreeWrapperPassPass(a1);
  llvm::initializeFunctionGroupInfoWrapperPassPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Transform the object shader into multiple slices";
  *(_QWORD *)(v2 + 8) = 48;
  *(_QWORD *)(v2 + 16) = "multi-path-os-transform";
  *(_QWORD *)(v2 + 24) = 23;
  *(_QWORD *)(v2 + 32) = &unk_1ED8080C0;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C5607430;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C5607368(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED8080C0;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E8171710;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED8080C8);
  if (v3 != -1)
  {
    v7[0] = sub_1C56072C4;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED8080C8, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C5607430()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5607368(v0);
}

void sub_1C560745C(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C5607480()
{
  return "Multi Path Object Shader Transform";
}

void *sub_1C5607490(uint64_t a1, uint64_t a2)
{
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::PostDominatorTreeWrapperPass::ID);
  return sub_1C4771E64(a2, a2, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
}

BOOL sub_1C56074E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  _QWORD **v5;
  _QWORD **v6;
  uint64_t v7;
  void **v8;
  void *v9;
  uint64_t v10;
  void **v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  void **v15;
  void *v16;
  uint64_t **v17;
  uint64_t v18;
  uint64_t v19;
  char v20;
  uint64_t v21;
  unint64_t v22;
  const void *p_p;
  size_t v24;
  BOOL v25;
  char v26;
  uint64_t *v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  std::string *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  const llvm::Instruction *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  uint64_t v47;
  const llvm::APInt *v48;
  uint64_t v49;
  char *v50;
  uint64_t v51;
  int v52;
  llvm **v53;
  llvm *v54;
  int v55;
  int64_t v56;
  BOOL v57;
  unint64_t v58;
  unsigned int v59;
  BOOL v60;
  int v61;
  int64_t v62;
  unint64_t v63;
  unsigned int v64;
  int v65;
  int v66;
  int64_t v67;
  unint64_t v68;
  unsigned int v69;
  int v70;
  _BOOL8 v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t i;
  _QWORD *v81;
  int v82;
  uint64_t v83;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *j;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  int v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t *v94;
  uint64_t k;
  uint64_t m;
  uint64_t n;
  int v98;
  uint64_t v99;
  void (**v100)(void);
  char v101;
  void (**v102)(void);
  int v103;
  int v104;
  _QWORD *v105;
  uint64_t v106;
  _QWORD *v107;
  uint64_t v108;
  unsigned int v109;
  _QWORD *v110;
  llvm::BasicBlock *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t ***v116;
  uint64_t v117;
  _QWORD *v118;
  _QWORD *v119;
  llvm::BasicBlock *v120;
  uint64_t ***v121;
  llvm::Function *v123;
  _QWORD *v124;
  _QWORD *v125;
  _QWORD *v126;
  int v127;
  int v128;
  uint64_t v129;
  uint64_t v130;
  _QWORD *v131;
  uint64_t v132;
  uint64_t v133;
  _QWORD *v134;
  llvm::BasicBlock *v135;
  unint64_t v136;
  void **v137;
  int32x2_t *v138;
  unint64_t v139;
  uint64_t v140;
  unsigned int v141;
  uint64_t v142;
  void ***v143;
  void **v144;
  int v145;
  int v146;
  llvm::Function *v147;
  llvm::BlockAddress *v148;
  llvm::BasicBlock *v149;
  llvm::BlockAddress *v150;
  _QWORD *v151;
  unint64_t v152;
  void **v153;
  int32x2_t *v154;
  unint64_t v155;
  uint64_t v156;
  unsigned int v157;
  uint64_t v158;
  void ***v159;
  void **v160;
  int v161;
  int v162;
  unint64_t v163;
  unint64_t *v164;
  uint64_t v165;
  int32x2_t *v166;
  unint64_t v167;
  uint64_t v168;
  unsigned int v169;
  uint64_t v170;
  uint64_t *v171;
  uint64_t v172;
  int v173;
  int v174;
  llvm::BlockAddress *v175;
  unint64_t v176;
  unint64_t *v177;
  uint64_t v178;
  int32x2_t *v179;
  unint64_t v180;
  uint64_t v181;
  unsigned int v182;
  uint64_t v183;
  uint64_t *v184;
  uint64_t v185;
  int v186;
  int v187;
  uint64_t *v188;
  _QWORD **v189;
  uint64_t v190;
  _QWORD *v191;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  llvm::Type *v195;
  llvm::DSOLocalEquivalent **v196;
  char v197;
  llvm::BasicBlock **v198;
  llvm::BasicBlock **v199;
  uint64_t v200;
  uint64_t ii;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  const llvm::APInt *v205;
  uint64_t v206;
  BOOL v207;
  llvm::ConstantInt *v208;
  llvm::ValueHandleBase *v209;
  unsigned __int8 *v210;
  const llvm::APInt *v211;
  llvm::ConstantInt *v212;
  unsigned int v213;
  uint64_t v214;
  char v215;
  llvm::ValueHandleBase *v216;
  const llvm::APInt *v217;
  unsigned __int8 *v218;
  llvm::ConstantInt *v219;
  unsigned int v220;
  unint64_t v221;
  llvm::ValueHandleBase *v222;
  unsigned __int8 *v223;
  const llvm::APInt *v224;
  llvm::ConstantInt *v225;
  llvm::ValueHandleBase *v226;
  const llvm::APInt *v227;
  uint64_t v228;
  llvm::ConstantInt *v229;
  llvm::ValueHandleBase *v230;
  const llvm::APInt *v231;
  uint64_t *v232;
  llvm::ConstantInt *v233;
  llvm::ValueHandleBase *v234;
  const llvm::APInt *v235;
  llvm::Value *Select;
  llvm::ConstantInt *v237;
  llvm::ValueHandleBase *v238;
  const llvm::APInt *v239;
  uint64_t *v240;
  llvm::ConstantInt *v241;
  llvm::ValueHandleBase *v242;
  const llvm::APInt *v243;
  llvm::Value *v244;
  llvm::ConstantInt *v245;
  unsigned int v246;
  unint64_t v247;
  const llvm::APInt *v248;
  llvm::FixedVectorType **v249;
  llvm::ConstantInt *v250;
  unsigned int v251;
  unint64_t v252;
  const llvm::APInt *v253;
  llvm::ValueHandleBase *v254;
  llvm::ConstantInt *v255;
  unsigned int v256;
  unint64_t v257;
  llvm::Type *v258;
  llvm::ValueHandleBase *v259;
  uint64_t v260;
  _QWORD **v261;
  uint64_t Impl;
  uint64_t v263;
  uint64_t v264;
  uint64_t *v265;
  uint64_t v266;
  _QWORD *v267;
  _QWORD *v268;
  uint64_t v269;
  _QWORD *v270;
  _QWORD *v271;
  uint64_t v272;
  unsigned int *v273;
  uint64_t v274;
  unsigned int *v275;
  uint64_t v276;
  uint64_t v277;
  BOOL v278;
  llvm::ConstantInt *v280;
  unsigned int v281;
  char v282;
  const llvm::APInt *v283;
  llvm::FixedVectorType **v284;
  llvm::ConstantInt *v285;
  unsigned int v286;
  unint64_t v287;
  const llvm::APInt *v288;
  llvm::ValueHandleBase *v289;
  llvm::ConstantInt *v290;
  unsigned int v291;
  unint64_t v292;
  llvm::Type *v293;
  llvm::ValueHandleBase *v294;
  _QWORD **v295;
  uint64_t v296;
  uint64_t v297;
  _QWORD *v298;
  _QWORD *v299;
  uint64_t v300;
  uint64_t **v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  char v305;
  _QWORD *v306;
  uint64_t **v307;
  unsigned int v308;
  uint64_t **v309;
  _QWORD *v310;
  _QWORD *jj;
  uint64_t v312;
  _QWORD *v313;
  uint64_t v314;
  int32x2_t ****v315;
  _QWORD *v316;
  uint64_t ***v317;
  uint64_t *v318;
  char *v319;
  unint64_t v320;
  _QWORD *v321;
  uint64_t v322;
  unsigned int v323;
  unsigned int v324;
  BOOL v325;
  uint64_t v326;
  uint64_t *v327;
  _QWORD **v328;
  uint64_t v329;
  _QWORD *v330;
  uint64_t v331;
  _QWORD *v332;
  unint64_t v333;
  int32x2_t ****v334;
  int32x2_t *v335;
  unint64_t v336;
  uint64_t v337;
  unsigned int v338;
  uint64_t v339;
  int32x2_t *****v340;
  int32x2_t ****v341;
  int v342;
  int v343;
  int32x2_t ***v345;
  int32x2_t ***v346;
  uint64_t v347;
  uint64_t v348;
  llvm::Type *v349;
  llvm::DSOLocalEquivalent **v350;
  uint64_t v351;
  uint64_t v352;
  llvm::Type *v353;
  llvm::DSOLocalEquivalent **v354;
  _QWORD **v355;
  uint64_t v356;
  _QWORD *v357;
  void *v358;
  uint64_t v359;
  _QWORD *v360;
  uint64_t v361;
  uint64_t v362;
  void *v363;
  uint64_t Declaration;
  uint64_t **v365;
  llvm::ConstantInt **v366;
  llvm::Value **v367;
  llvm::Value *v368;
  _DWORD *v369;
  _DWORD *v370;
  uint64_t v371;
  llvm::Value *v372;
  _QWORD *v373;
  char *v374;
  char *v375;
  unsigned __int8 **v376;
  int v377;
  unsigned __int8 *v378;
  unsigned __int8 *v379;
  unsigned __int8 *v380;
  _QWORD *v381;
  uint64_t ***v382;
  uint64_t ***v383;
  uint64_t **v384;
  uint64_t **v385;
  _QWORD *v386;
  _QWORD *v387;
  uint64_t v388;
  uint64_t v389;
  unint64_t v390;
  unint64_t *v391;
  uint64_t v392;
  int32x2_t *v393;
  unint64_t v394;
  uint64_t v395;
  unsigned int v396;
  uint64_t v397;
  uint64_t *v398;
  uint64_t v399;
  int v400;
  int v401;
  unint64_t v403;
  unint64_t *v404;
  uint64_t v405;
  int32x2_t *v406;
  unint64_t v407;
  uint64_t v408;
  unsigned int v409;
  uint64_t v410;
  uint64_t *v411;
  uint64_t v412;
  int v413;
  int v414;
  llvm::FixedVectorType ***v415;
  uint64_t ****v416;
  uint64_t v417;
  uint64_t ***v418;
  uint64_t **v419;
  uint64_t ***v420;
  uint64_t **v421;
  uint64_t *v422;
  uint64_t *v423;
  llvm::ValueSymbolTable *v424;
  void (**v425)(void);
  _QWORD *v426;
  uint64_t v427;
  llvm::Function *v428;
  uint64_t v429;
  _QWORD *v430;
  llvm::BasicBlock *v431;
  unint64_t v432;
  void **v433;
  int32x2_t *v434;
  unint64_t v435;
  uint64_t v436;
  unsigned int v437;
  uint64_t v438;
  void ***v439;
  void **v440;
  int v441;
  int v442;
  llvm::Function *v443;
  llvm::BlockAddress *v444;
  llvm::BasicBlock *v445;
  llvm::BlockAddress *v446;
  _QWORD *v447;
  unint64_t v448;
  void **v449;
  int32x2_t *v450;
  unint64_t v451;
  uint64_t v452;
  unsigned int v453;
  uint64_t v454;
  void ***v455;
  void **v456;
  int v457;
  int v458;
  unint64_t v459;
  unint64_t *v460;
  uint64_t v461;
  int32x2_t *v462;
  unint64_t v463;
  uint64_t v464;
  unsigned int v465;
  uint64_t v466;
  uint64_t *v467;
  uint64_t v468;
  int v469;
  int v470;
  llvm::BlockAddress *v471;
  unint64_t v472;
  unint64_t *v473;
  uint64_t v474;
  int32x2_t *v475;
  unint64_t v476;
  uint64_t v477;
  unsigned int v478;
  uint64_t v479;
  uint64_t *v480;
  uint64_t v481;
  int v482;
  int v483;
  uint64_t *v484;
  _QWORD **v485;
  uint64_t v486;
  _QWORD *v487;
  uint64_t v488;
  uint64_t v489;
  llvm::Type *v490;
  llvm::DSOLocalEquivalent **v491;
  void (**v492)(void);
  llvm::BasicBlock *v493;
  llvm::BasicBlock *v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t **v497;
  llvm::ConstantInt **v498;
  llvm::Value **v499;
  llvm::Value *v500;
  _DWORD *v501;
  _DWORD *v502;
  uint64_t v503;
  llvm::Value *v504;
  _QWORD *v505;
  unint64_t **v506;
  unint64_t **v507;
  unsigned __int8 **v508;
  int v509;
  unsigned __int8 *v510;
  unsigned __int8 *v511;
  unsigned __int8 *v512;
  _QWORD *v513;
  unsigned __int8 *v514;
  llvm::Instruction *v515;
  _QWORD *v516;
  unint64_t v517;
  uint64_t v518;
  uint64_t v519;
  unint64_t v520;
  unint64_t *v521;
  uint64_t v522;
  int32x2_t *v523;
  unint64_t v524;
  uint64_t v525;
  unsigned int v526;
  uint64_t v527;
  uint64_t *v528;
  uint64_t v529;
  int v530;
  int v531;
  unint64_t v533;
  unint64_t *v534;
  uint64_t v535;
  int32x2_t *v536;
  unint64_t v537;
  uint64_t v538;
  unsigned int v539;
  uint64_t v540;
  uint64_t *v541;
  uint64_t v542;
  int v543;
  int v544;
  char *v545;
  uint64_t v546;
  char *v547;
  char v548;
  unsigned int v549;
  _QWORD *v550;
  uint64_t v551;
  void **v552;
  uint64_t v553;
  char v554;
  unsigned int v555;
  uint64_t v556;
  void **v557;
  uint64_t v558;
  llvm::OptimizationRemarkEmitter *v559;
  llvm::OptimizationRemarkEmitter *v560;
  llvm::OptimizationRemarkEmitter *v561;
  BOOL v562;
  BOOL v563;
  BOOL v564;
  _QWORD *v565;
  llvm::BasicBlock **v566;
  uint64_t v567;
  int v568;
  uint64_t **v569;
  llvm::BasicBlock *v570;
  uint64_t v571;
  uint64_t *v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  int v576;
  char *v577;
  int v578;
  _QWORD v579[2];
  unsigned int v580;
  _QWORD v581[3];
  char v582;
  llvm::BasicBlock *v583;
  uint64_t v584;
  void *v585;
  uint64_t v586;
  _BYTE v587[64];
  void *v588;
  uint64_t v589;
  _BYTE v590[64];
  void *v591;
  uint64_t v592;
  _BYTE v593[120];
  _QWORD v594[3];
  _QWORD *v595;
  _QWORD v596[3];
  _QWORD *v597;
  void *__p;
  uint64_t v599;
  unint64_t *v600;
  int32x2_t ****v601;
  uint64_t *v602;
  uint64_t v603;
  uint64_t v604;
  uint64_t v605;
  void **v606;
  void **v607;
  uint64_t v608;
  int v609;
  __int16 v610;
  char v611;
  uint64_t v612;
  uint64_t v613;
  void *v614;
  void *v615;
  uint64_t v616;
  _QWORD *v617;
  unsigned int v618;
  uint64_t **v619;
  void *v620;
  uint64_t v621;
  _BYTE v622[320];
  uint64_t v623;
  uint64_t v624;
  void *v625;
  uint64_t v626;
  _BYTE v627[64];
  uint64_t v628;
  uint64_t v629;
  uint64_t v630;
  uint64_t v631[3];
  char v632;
  void *v633;
  uint64_t v634;
  _BYTE v635[64];
  llvm::FixedVectorType **v636;
  llvm::ValueHandleBase *v637;
  llvm::ValueHandleBase *v638;
  llvm::UndefValue *v639;
  void *v640;
  uint64_t v641;
  unint64_t *v642;
  void **v643;
  _QWORD *v644;
  uint64_t **v645;
  _QWORD **v646;
  uint64_t v647;
  void **v648;
  void **v649;
  uint64_t v650;
  int v651;
  __int16 v652;
  char v653;
  uint64_t v654;
  uint64_t v655;
  void *v656;
  void *v657;
  llvm::FixedVectorType **v658;
  llvm::ValueHandleBase *v659;
  llvm::ValueHandleBase *v660;
  llvm::FixedVectorType ***v661;
  __int16 v662;
  uint64_t v663;

  v4 = MEMORY[0x1E0C80A78](a1, a2, a3, a4);
  v6 = v5;
  v7 = v4;
  v663 = *MEMORY[0x1E0C80C00];
  v8 = **(void ****)(v4 + 8);
  do
  {
    v9 = *v8;
    v8 += 2;
  }
  while (v9 != &llvm::DominatorTreeWrapperPass::ID);
  v10 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v8 - 1) + 96))(*(v8 - 1), &llvm::DominatorTreeWrapperPass::ID);
  v11 = **(void ****)(v7 + 8);
  do
  {
    v12 = *v11;
    v11 += 2;
  }
  while (v12 != &llvm::PostDominatorTreeWrapperPass::ID);
  v13 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v11 - 1) + 96))(*(v11 - 1), &llvm::PostDominatorTreeWrapperPass::ID);
  v14 = v13;
  v15 = **(void ****)(v7 + 8);
  do
  {
    v16 = *v15;
    v15 += 2;
  }
  while (v16 != &llvm::FunctionGroupInfoWrapperPass::ID);
  v17 = (uint64_t **)(v13 + 32);
  v18 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v15 - 1) + 96))(*(v15 - 1), &llvm::FunctionGroupInfoWrapperPass::ID);
  v19 = (*(uint64_t (**)(_QWORD, _QWORD **))(**(_QWORD **)(v18 + 32) + 24))(*(_QWORD *)(v18 + 32), v6);
  if ((*((_WORD *)v6 + 9) & 0x3FF0) != 0x6A0)
    goto LABEL_47;
  sub_1C5EAC020((uint64_t)v6[5], (uint64_t)&__p);
  if (!(_BYTE)v601)
    goto LABEL_47;
  v20 = HIBYTE(v600);
  v21 = HIBYTE(v600) & 0x7F;
  if (SHIBYTE(v600) < 0)
    v21 = v599;
  if (v21 != 18
    || (SHIBYTE(v600) >= 0 ? (v22 = HIBYTE(v600)) : (v22 = v599),
        SHIBYTE(v600) >= 0 ? (p_p = &__p) : (p_p = __p),
        v22 >= 0x12 ? (v24 = 18) : (v24 = v22),
        !memcmp(p_p, "object_passthrough", v24) ? (v25 = v22 == 18) : (v25 = 0),
        !v25))
  {
    v26 = 0;
    if ((v20 & 0x80) == 0)
      goto LABEL_26;
LABEL_30:
    operator delete(__p);
    if ((v26 & 1) == 0)
      goto LABEL_47;
LABEL_31:
    v27 = (uint64_t *)**v17;
    v28 = (uint64_t *)v27[5];
    if (v28 == v27 + 5)
      return 0;
    v29 = 0;
    while (1)
    {
      if (v28)
        v30 = v28 - 3;
      else
        v30 = 0;
      if (*((_BYTE *)v30 + 16) == 84)
      {
        v31 = *(v30 - 4);
        if (v31)
        {
          if (!*(_BYTE *)(v31 + 16) && *(_QWORD *)(v31 + 24) == v30[9] && (*(_BYTE *)(v31 + 33) & 0x20) != 0)
          {
            v32 = *(_DWORD *)(*(v28 - 7) + 36);
            if (v32 == 2793)
            {
              v29 = v28 - 3;
            }
            else if (v32 == 2421)
            {
              if (v29 && sub_1C560B288((uint64_t)v6, **v17, (uint64_t)(v28 - 3)))
              {
                v315 = (int32x2_t ****)v29[-4 * (*((_DWORD *)v29 + 5) & 0x7FFFFFF)];
                v316 = v6[10];
                if (v316)
                  v317 = (uint64_t ***)(v316 - 3);
                else
                  v317 = 0;
                v318 = (uint64_t *)v27[6];
                if (!v318 || v318 != v28)
                {
                  __p = "twostage.ret";
                  LOWORD(v602) = 259;
                  v27 = (uint64_t *)llvm::BasicBlock::splitBasicBlock(v27, v28, (uint64_t)&__p, 0);
                }
                LODWORD(v630) = 128;
                v319 = (char *)operator new(0x2000uLL, (std::align_val_t)8uLL);
                v628 = (uint64_t)v319;
                v629 = 0;
                if ((_DWORD)v630)
                {
                  v320 = (unint64_t)v630 << 6;
                  v321 = v319 + 16;
                  do
                  {
                    *v321 = 0;
                    v321[1] = -4096;
                    *(v321 - 2) = &unk_1E814DA10;
                    *(v321 - 1) = 2;
                    v321[2] = 0;
                    v321 += 8;
                    v320 -= 64;
                  }
                  while (v320);
                }
                LOBYTE(v631[0]) = 0;
                v632 = 0;
                v591 = v593;
                v592 = 0x100000000;
                v633 = v635;
                v634 = 0x100000000;
                __p = ".gOS";
                LOWORD(v602) = 259;
                v322 = llvm::CloneBasicBlock(v317, (uint64_t)&v628, (uint64_t)&__p, 0, 0, 0);
                v323 = v634;
                if (v634 >= HIDWORD(v634))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v633, (uint64_t)v635, v634 + 1, 8);
                  v323 = v634;
                }
                *((_QWORD *)v633 + v323) = v317;
                LODWORD(v634) = v634 + 1;
                v324 = v592;
                if (v592 >= HIDWORD(v592))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v591, (uint64_t)v593, v592 + 1, 8);
                  v324 = v592;
                }
                *((_QWORD *)v591 + v324) = v322;
                v325 = __CFADD__((_DWORD)v592, 1);
                v326 = (v592 + 1);
                LODWORD(v592) = v592 + 1;
                if (!v325)
                {
                  v327 = v6[10];
                  v328 = (_QWORD **)v591;
                  v329 = 8 * v326;
                  do
                  {
                    v330 = *v328++;
                    llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)(v6 + 9), v330);
                    v331 = *v327;
                    v330[3] = *v327;
                    v330[4] = v327;
                    *(_QWORD *)(v331 + 8) = v330 + 3;
                    *v327 = (uint64_t)(v330 + 3);
                    v329 -= 8;
                  }
                  while (v329);
                }
                llvm::remapInstructionsInBlocks((uint64_t *)&v591, (uint64_t)&v628);
                v599 = 2;
                v600 = 0;
                v601 = v315;
                if (v315 != (int32x2_t ****)-8192 && v315 != (int32x2_t ****)-4096 && v315)
                  llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v599);
                __p = &unk_1E814DA10;
                v602 = &v628;
                v332 = sub_1C52E2ED8((uint64_t)&v628, &__p);
                if (v601 != (int32x2_t ****)-8192 && v601 != (int32x2_t ****)-4096 && v601)
                {
                  v333 = v599 & 0xFFFFFFFFFFFFFFF8;
                  *(_QWORD *)(v599 & 0xFFFFFFFFFFFFFFF8) = v600;
                  if (v600)
                  {
                    *v600 = *v600 & 7 | v333;
                  }
                  else
                  {
                    v334 = v601;
                    v335 = ***v601;
                    v336 = (unint64_t)v335[303];
                    if (v336 <= v333)
                    {
                      v337 = v335[305].u32[0];
                      if (v336 + 16 * v337 > v333)
                      {
                        v338 = v337 - 1;
                        LODWORD(v339) = v338 & ((v601 >> 4) ^ (v601 >> 9));
                        v340 = (int32x2_t *****)(v336 + 16 * v339);
                        v341 = *v340;
                        if (v601 == *v340)
                        {
LABEL_547:
                          *v340 = (int32x2_t ****)-8192;
                          v335[304] = vadd_s32(v335[304], (int32x2_t)0x1FFFFFFFFLL);
                          v334 = v601;
                        }
                        else
                        {
                          v342 = 1;
                          while (v341 != (int32x2_t ****)-4096)
                          {
                            v343 = v339 + v342++;
                            v339 = v343 & v338;
                            v341 = *(int32x2_t *****)(v336 + 16 * v339);
                            if (v601 == v341)
                            {
                              v340 = (int32x2_t *****)(v336 + 16 * v339);
                              goto LABEL_547;
                            }
                          }
                        }
                        *((_BYTE *)v334 + 17) &= ~1u;
                      }
                    }
                  }
                }
                llvm::Value::doRAUW((llvm::ValueAsMetadata *)v315, (llvm::Value *)v332[7], (llvm::Value *)1);
                llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v315[5] + 5), (uint64_t ***)v315);
                v345 = v315[3];
                v346 = v315[4];
                *v346 = (int32x2_t **)v345;
                v345[1] = (int32x2_t **)v346;
                v315[3] = 0;
                v315[4] = 0;
                llvm::Value::deleteValue((llvm::Value *)v315);
                sub_1C560C68C((_QWORD **)v591, v592, v347, v348, v349, v350);
                if ((_DWORD)v634)
                {
                  v355 = (_QWORD **)v633;
                  v356 = 8 * v634;
                  do
                  {
                    v357 = *v355++;
                    llvm::SimplifyInstructionsInBlock(v357, 0, v351, v352, v353, v354);
                    v356 -= 8;
                  }
                  while (v356);
                }
                v358 = 0;
                v359 = **(_QWORD **)v322;
                __p = &v600;
                v599 = 0x200000000;
                v606 = &v614;
                v607 = &v615;
                v608 = 0;
                v609 = 0;
                v610 = 512;
                v611 = 7;
                v613 = 0;
                v612 = 0;
                v614 = &unk_1E8167888;
                v615 = &unk_1E8167A08;
                v360 = (_QWORD *)(v322 + 40);
                v605 = v359;
                v604 = v322 + 40;
                v361 = *(_QWORD *)(v322 + 40);
                if (v361)
                  v362 = v361 - 24;
                else
                  v362 = 0;
                if (*(unsigned __int8 *)(v362 + 16) - 29 >= 0xB)
                  v362 = 0;
                v603 = *(_QWORD *)(v362 + 40);
                v604 = v362 + 24;
                v363 = *(void **)(v362 + 48);
                v640 = v363;
                if (v363)
                {
                  llvm::MetadataTracking::track((uint64_t)&v640, (unsigned __int8 *)v363, 2);
                  v358 = v640;
                }
                sub_1C4774EF4((uint64_t)&__p, 0, (uint64_t)v358);
                if (v640)
                  llvm::MetadataTracking::untrack((uint64_t)&v640, (unsigned __int8 *)v640);
                Declaration = llvm::Intrinsic::getDeclaration(v6[5], 2796, 0, 0);
                if (Declaration)
                  v365 = *(uint64_t ***)(Declaration + 24);
                else
                  v365 = 0;
                v640 = "gOS_pass";
                LOWORD(v644) = 259;
                v366 = (llvm::ConstantInt **)sub_1C4774778((uint64_t *)&__p, v365, Declaration, 0, 0, (uint64_t)&v640, 0);
                v367 = llvm::ConstantInt::get(*v366, 1, (const llvm::APInt *)1);
                LOWORD(v644) = 257;
                v368 = (llvm::Value *)sub_1C4774B48((uint64_t)&__p, 32, (uint64_t)v366, (uint64_t)v367, (uint64_t)&v640);
                v369 = operator new(0xA0uLL);
                v370 = v369;
                v371 = 0;
                v372 = (llvm::Value *)(v369 + 24);
                v369[29] = v369[29] & 0x38000000 | 3;
                do
                {
                  v373 = &v369[v371];
                  *v373 = 0;
                  v373[1] = 0;
                  v373[2] = 0;
                  v373[3] = v372;
                  v371 += 8;
                }
                while (v371 != 24);
                llvm::BranchInst::BranchInst((llvm::BranchInst *)(v369 + 24), (llvm::BasicBlock *)v27, (llvm::BasicBlock *)v317, v368, 0);
                LOWORD(v644) = 257;
                (*((void (**)(void **, llvm::Value *, void **, uint64_t, uint64_t))*v607 + 2))(v607, v372, &v640, v603, v604);
                if (!(_DWORD)v599)
                {
LABEL_585:
                  v381 = (_QWORD *)*v360;
                  if ((_QWORD *)*v360 == v360)
                  {
                    v383 = 0;
                  }
                  else
                  {
                    if (v381)
                      v382 = (uint64_t ***)(v381 - 3);
                    else
                      v382 = 0;
                    if (*((unsigned __int8 *)v382 + 16) - 29 >= 0xB)
                      v383 = 0;
                    else
                      v383 = v382;
                  }
                  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v383[5] + 5), v383);
                  v384 = v383[3];
                  v385 = v383[4];
                  *v385 = (uint64_t *)v384;
                  v384[1] = (uint64_t *)v385;
                  v383[3] = 0;
                  v383[4] = 0;
                  llvm::Value::deleteValue((llvm::Value *)v383);
                  if (__p != &v600)
                    free(__p);
                  if (v633 != v635)
                    free(v633);
                  if (v591 != v593)
                    free(v591);
                  if (v632)
                  {
                    sub_1C4E43068((uint64_t)v631);
                    MEMORY[0x1CAA32FB4](v631[0], 8);
                    v632 = 0;
                  }
                  v386 = (_QWORD *)v628;
                  if ((_DWORD)v630)
                  {
                    v387 = (_QWORD *)(v628 + ((unint64_t)v630 << 6));
                    do
                    {
                      v388 = v386[3];
                      if ((v388 | 0x1000) != 0xFFFFFFFFFFFFF000)
                      {
                        v389 = v386[7];
                        if (v389)
                        {
                          if (v389 != -8192 && v389 != -4096)
                          {
                            v390 = v386[5] & 0xFFFFFFFFFFFFFFF8;
                            *(_QWORD *)v390 = v386[6];
                            v391 = (unint64_t *)v386[6];
                            if (v391)
                            {
                              *v391 = *v391 & 7 | v390;
                            }
                            else
                            {
                              v392 = v386[7];
                              v393 = ***(int32x2_t ****)v392;
                              v394 = (unint64_t)v393[303];
                              if (v394 <= v390)
                              {
                                v395 = v393[305].u32[0];
                                if (v394 + 16 * v395 > v390)
                                {
                                  v396 = v395 - 1;
                                  LODWORD(v397) = v396 & ((v392 >> 4) ^ (v392 >> 9));
                                  v398 = (uint64_t *)(v394 + 16 * v397);
                                  v399 = *v398;
                                  if (v392 == *v398)
                                  {
LABEL_615:
                                    *v398 = -8192;
                                    v393[304] = vadd_s32(v393[304], (int32x2_t)0x1FFFFFFFFLL);
                                    v392 = v386[7];
                                  }
                                  else
                                  {
                                    v400 = 1;
                                    while (v399 != -4096)
                                    {
                                      v401 = v397 + v400++;
                                      v397 = v401 & v396;
                                      v399 = *(_QWORD *)(v394 + 16 * v397);
                                      if (v392 == v399)
                                      {
                                        v398 = (uint64_t *)(v394 + 16 * v397);
                                        goto LABEL_615;
                                      }
                                    }
                                  }
                                  *(_BYTE *)(v392 + 17) &= ~1u;
                                }
                              }
                            }
                            v388 = v386[3];
                          }
                        }
                      }
                      if (v388 != -4096 && v388 != -8192 && v388 != 0)
                      {
                        v403 = v386[1] & 0xFFFFFFFFFFFFFFF8;
                        *(_QWORD *)v403 = v386[2];
                        v404 = (unint64_t *)v386[2];
                        if (v404)
                        {
                          *v404 = *v404 & 7 | v403;
                        }
                        else
                        {
                          v405 = v386[3];
                          v406 = ***(int32x2_t ****)v405;
                          v407 = (unint64_t)v406[303];
                          if (v407 <= v403)
                          {
                            v408 = v406[305].u32[0];
                            if (v407 + 16 * v408 > v403)
                            {
                              v409 = v408 - 1;
                              LODWORD(v410) = v409 & ((v405 >> 4) ^ (v405 >> 9));
                              v411 = (uint64_t *)(v407 + 16 * v410);
                              v412 = *v411;
                              if (v405 == *v411)
                              {
LABEL_634:
                                *v411 = -8192;
                                v406[304] = vadd_s32(v406[304], (int32x2_t)0x1FFFFFFFFLL);
                                v405 = v386[3];
                              }
                              else
                              {
                                v413 = 1;
                                while (v412 != -4096)
                                {
                                  v414 = v410 + v413++;
                                  v410 = v414 & v409;
                                  v412 = *(_QWORD *)(v407 + 16 * v410);
                                  if (v405 == v412)
                                  {
                                    v411 = (uint64_t *)(v407 + 16 * v410);
                                    goto LABEL_634;
                                  }
                                }
                              }
                              *(_BYTE *)(v405 + 17) &= ~1u;
                            }
                          }
                        }
                      }
                      v386 += 8;
                    }
                    while (v386 != v387);
                    v386 = (_QWORD *)v628;
                  }
                  MEMORY[0x1CAA32FB4](v386, 8);
                  return 1;
                }
                v374 = (char *)__p;
                v375 = (char *)__p + 16 * v599;
                v376 = (unsigned __int8 **)(v370 + 36);
                while (2)
                {
                  v377 = *(_DWORD *)v374;
                  v378 = (unsigned __int8 *)*((_QWORD *)v374 + 1);
                  if (v378)
                  {
                    if (v377)
                      goto LABEL_577;
                    v625 = (void *)*((_QWORD *)v374 + 1);
                    llvm::MetadataTracking::track((uint64_t)&v625, v378, 2);
                    v379 = *v376;
LABEL_581:
                    if (v379)
                      llvm::MetadataTracking::untrack((uint64_t)(v370 + 36), v379);
                    v380 = (unsigned __int8 *)v625;
                    *v376 = (unsigned __int8 *)v625;
                    if (v380)
                      llvm::MetadataTracking::retrack((uint64_t)&v625, v380, (uint64_t)(v370 + 36));
                  }
                  else
                  {
                    v379 = *v376;
                    if (*v376 || (*((_BYTE *)v370 + 119) & 0x20) != 0)
                    {
                      if (!v377)
                      {
                        v625 = 0;
                        goto LABEL_581;
                      }
LABEL_577:
                      llvm::Value::setMetadata(v372, *(_DWORD *)v374, (llvm::MDNode *)v378);
                    }
                  }
                  v374 += 16;
                  if (v374 == v375)
                    goto LABEL_585;
                  continue;
                }
              }
              return 0;
            }
          }
        }
      }
      v28 = (uint64_t *)*v28;
      if (v28 == v27 + 5)
        return 0;
    }
  }
  llvm::Intrinsic::getDeclaration(v6[5], 2793, 0, 0);
  if (!(_BYTE)v601)
    goto LABEL_31;
  v26 = 1;
  if ((HIBYTE(v600) & 0x80) != 0)
    goto LABEL_30;
LABEL_26:
  if ((v26 & 1) != 0)
    goto LABEL_31;
LABEL_47:
  if ((*((_WORD *)v6 + 9) & 0x3FF0) != 0x6A0)
    return 0;
  v33 = llvm::Intrinsic::getDeclaration(v6[5], 2793, 0, 0);
  if (!v33)
    return 0;
  v38 = *(_QWORD *)(v33 + 8);
  if (!v38)
    return 0;
  v39 = 0;
  v40 = (const llvm::Instruction *)(v10 + 32);
  v41 = *(_QWORD *)(v33 + 8);
  do
  {
    v41 = *(_QWORD *)(v41 + 8);
    --v39;
  }
  while (v41);
  if (!v39)
    return 0;
  v42 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v38 + 24) + 40) + 56);
  do
  {
    v42 = *(_QWORD *)(v42 + 8);
    if (!v42)
      return 0;
  }
  while (*(_QWORD ***)(*(_QWORD *)(*(_QWORD *)(v42 + 24) + 40) + 56) != v6);
  v43 = (uint64_t)v6[5];
  v44 = sub_1C5EA9FF0(v43, 2792, 0, 0, v34, v35, v36, v37);
  if (!v44)
    return sub_1C560AFB4(**v17, (uint64_t)v6, v19);
  v633 = v635;
  v634 = 0x800000000;
  v45 = *(_QWORD *)(v44 + 8);
  if (!v45)
    goto LABEL_134;
  v46 = 0;
  v47 = 0;
  v574 = v43;
  v48 = (const llvm::APInt *)(v43 + 272);
  do
  {
    v49 = *(_QWORD *)(v45 + 24);
    if (v49 && *(_BYTE *)(v49 + 16) == 84 && *(_QWORD ***)(*(_QWORD *)(v49 + 40) + 56) == v6)
    {
      if (v46 >= HIDWORD(v634))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v633, (uint64_t)v635, v46 + 1, 8);
        v46 = v634;
      }
      *((_QWORD *)v633 + v46) = v49;
      v46 = v634 + 1;
      LODWORD(v634) = v634 + 1;
      if (!v47)
        v47 = *(_QWORD *)(v49 - 32 * (*(_DWORD *)(v49 + 20) & 0x7FFFFFF) + 32);
    }
    v45 = *(_QWORD *)(v45 + 8);
  }
  while (v45);
  if (!v46)
  {
LABEL_134:
    v71 = sub_1C560AFB4(**v17, (uint64_t)v6, v19);
    goto LABEL_860;
  }
  v50 = (char *)v633;
  v577 = (char *)v633 + 8 * v46;
  v576 = 1;
  do
  {
    v51 = *(_QWORD *)v50;
    v52 = *(_DWORD *)(*(_QWORD *)v50 + 20);
    if ((v52 & 0x40000000) != 0)
      v53 = *(llvm ***)(v51 - 8);
    else
      v53 = (llvm **)(v51 - 32 * (v52 & 0x7FFFFFF));
    v54 = *v53;
    LODWORD(v629) = 4;
    v628 = 1;
    LOBYTE(v559) = 1;
    llvm::computeKnownBits(v54, (const llvm::Value *)&v628, v48, 0, v40, 0, 0, &__p, v559, v562);
    if (v629 >= 0x41 && v628)
      MEMORY[0x1CAA32F9C](v628, 0x1000C8000313F17);
    LODWORD(v641) = 4;
    v640 = (void *)2;
    LOBYTE(v560) = 1;
    llvm::computeKnownBits(v54, (const llvm::Value *)&v640, v48, 0, v40, 0, 0, &v628, v560, v563);
    if (v641 >= 0x41 && v640)
      MEMORY[0x1CAA32F9C](v640, 0x1000C8000313F17);
    LODWORD(v592) = 4;
    v591 = (void *)4;
    LOBYTE(v561) = 1;
    llvm::computeKnownBits(v54, (const llvm::Value *)&v591, v48, 0, v40, 0, 0, &v640, v561, v564);
    if (v592 >= 0x41 && v591)
      MEMORY[0x1CAA32F9C](v591, 0x1000C8000313F17);
    if (v601 > 0x40)
    {
      v55 = 0;
      v56 = ((unint64_t)v601 + 63) >> 6;
      do
      {
        v57 = v56-- < 1;
        if (v57)
          break;
        v58 = v600[v56];
        v55 += __clz(v58);
      }
      while (!v58);
      v59 = v601 | 0xFFFFFFC0;
      if ((v601 & 0x3F) == 0)
        v59 = 0;
      if (v55 + v59 == (_DWORD)v601)
      {
LABEL_100:
        v576 = 0;
        v65 = 1;
        goto LABEL_111;
      }
    }
    else if (!v600)
    {
      goto LABEL_100;
    }
    if (LODWORD(v631[0]) > 0x40)
    {
      v61 = 0;
      v62 = ((unint64_t)LODWORD(v631[0]) + 63) >> 6;
      do
      {
        v57 = v62-- < 1;
        if (v57)
          break;
        v63 = *(_QWORD *)(v630 + 8 * v62);
        v61 += __clz(v63);
      }
      while (!v63);
      v64 = LODWORD(v631[0]) | 0xFFFFFFC0;
      if ((v631[0] & 0x3F) == 0)
        v64 = 0;
      if (v61 + v64 == LODWORD(v631[0]))
        goto LABEL_100;
    }
    else if (!v630)
    {
      goto LABEL_100;
    }
    if (v643 > 0x40)
    {
      v66 = 0;
      v67 = ((unint64_t)v643 + 63) >> 6;
      do
      {
        v57 = v67-- < 1;
        if (v57)
          break;
        v68 = v642[v67];
        v66 += __clz(v68);
      }
      while (!v68);
      v69 = v643 | 0xFFFFFFC0;
      if ((v643 & 0x3F) == 0)
        v69 = 0;
      v60 = v66 + v69 == (_DWORD)v643;
    }
    else
    {
      v60 = v642 == 0;
    }
    v65 = v60;
    v576 &= v65 ^ 1;
LABEL_111:
    if (v643 >= 0x41 && v642)
      MEMORY[0x1CAA32F9C](v642, 0x1000C8000313F17);
    if (v641 >= 0x41 && v640)
      MEMORY[0x1CAA32F9C](v640, 0x1000C8000313F17);
    if (LODWORD(v631[0]) >= 0x41 && v630)
      MEMORY[0x1CAA32F9C](v630, 0x1000C8000313F17);
    if (v629 >= 0x41 && v628)
      MEMORY[0x1CAA32F9C](v628, 0x1000C8000313F17);
    if (v601 >= 0x41 && v600)
      MEMORY[0x1CAA32F9C](v600, 0x1000C8000313F17);
    if (v599 >= 0x41 && __p)
      MEMORY[0x1CAA32F9C](__p, 0x1000C8000313F17);
    v50 += 8;
    if (v50 == v577)
      v70 = 1;
    else
      v70 = v65;
  }
  while (v70 != 1);
  v72 = *(unsigned int *)(v14 + 40);
  if ((_DWORD)v72)
  {
    v73 = *(uint64_t **)(v14 + 32);
    v74 = 8 * v72;
    v75 = v574;
    while (1)
    {
      v76 = *v73;
      v77 = *(_QWORD *)(*v73 + 40);
      if (v77)
        v78 = v77 - 24;
      else
        v78 = 0;
      if (*(unsigned __int8 *)(v78 + 16) - 29 >= 0xB)
        v78 = 0;
      if (*(_BYTE *)(v78 + 16) == 29)
        break;
      ++v73;
      v74 -= 8;
      if (!v74)
      {
        v76 = 0;
        break;
      }
    }
  }
  else
  {
    v76 = 0;
    v75 = v574;
  }
  v79 = sub_1C560B174(v76);
  if (sub_1C560B288((uint64_t)v6, v76, v79))
  {
    v628 = 1;
    for (i = 8; i != 520; i += 32)
      *(uint64_t *)((char *)&v628 + i) = -4096;
    sub_1C5EA5D84(v75, (uint64_t)&v628);
    v625 = v627;
    v626 = 0x800000000;
    v81 = v6[10];
    v572 = (uint64_t *)v76;
    v575 = (uint64_t)(v6 + 9);
    v567 = v79;
    if (v81 != v6 + 9)
    {
      v578 = 0;
      v82 = 0;
      v83 = v79 + 24;
      if (!v79)
        v83 = 0;
      v571 = v83;
      while (1)
      {
        v84 = v81 - 3;
        if (!v81)
          v84 = 0;
        if (v84 == (_QWORD *)v76)
          v85 = (_QWORD *)v571;
        else
          v85 = v84 + 5;
        for (j = (_QWORD *)v84[6]; j != v85; j = (_QWORD *)j[1])
        {
          if (j)
            v87 = (uint64_t)(j - 3);
          else
            v87 = 0;
          if (sub_1C560B9F4(v87))
          {
            if (*(_BYTE *)(v87 + 16) == 84)
            {
              v88 = *(_QWORD *)(v87 - 32);
              if (v88)
              {
                if (!*(_BYTE *)(v88 + 16)
                  && *(_QWORD *)(v88 + 24) == *(_QWORD *)(v87 + 72)
                  && (*(_BYTE *)(v88 + 33) & 0x20) != 0
                  && (*(_DWORD *)(*(j - 7) + 36) - 1682) < 0x8C)
                {
                  v82 = 1;
                  continue;
                }
              }
            }
            v89 = sub_1C55A7838(v87);
            if (v89 == 0xFFFFFFFFLL)
            {
              v82 = 1;
LABEL_183:
              v578 = 1;
              continue;
            }
            v90 = *(_DWORD *)(v87 + 20);
            if ((v90 & 0x40000000) != 0)
              v91 = *(_QWORD *)(v87 - 8);
            else
              v91 = v87 - 32 * (v90 & 0x7FFFFFF);
            v92 = *(_DWORD *)(**(_QWORD **)(v91 + 32 * v89) + 8) >> 8;
            if (v92 == 1)
            {
              v82 = 1;
              goto LABEL_183;
            }
            if (v92 == 6)
            {
              v93 = v626;
              if (v626 >= (unint64_t)HIDWORD(v626))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v625, (uint64_t)v627, v626 + 1, 8);
                v93 = v626;
              }
              *((_QWORD *)v625 + v93) = v87;
              LODWORD(v626) = v626 + 1;
            }
          }
        }
        v81 = (_QWORD *)v81[1];
        v76 = (uint64_t)v572;
        if (v81 == (_QWORD *)v575)
          goto LABEL_189;
      }
    }
    v82 = 0;
    v578 = 0;
LABEL_189:
    __p = (void *)1;
    v94 = &v599;
    for (k = 8; k != 1672; k += 104)
      *(void **)((char *)&__p + k) = (void *)-4096;
    v616 = 1;
    for (m = 1680; m != 3344; m += 104)
      *(void **)((char *)&__p + m) = (void *)-4096;
    v619 = v17;
    v620 = v622;
    v621 = 0xA00000000;
    v623 = 1;
    for (n = 3696; n != 3824; n += 16)
      *(void **)((char *)&__p + n) = (void *)-4096;
    sub_1C560B350((uint64_t)&__p, (uint64_t)v6);
    v596[0] = &off_1E81717B0;
    v596[1] = sub_1C560B9F4;
    v597 = v596;
    v98 = sub_1C560B520((uint64_t)v48, (uint64_t)&__p, (int *)&v628, v578 != 0, (uint64_t)&v633, v596);
    if (v597 == v596)
    {
      v100 = (void (**)(void))(v596[0] + 32);
      v99 = (uint64_t)(v6 + 9);
LABEL_199:
      (*v100)();
    }
    else
    {
      v99 = (uint64_t)(v6 + 9);
      if (v597)
      {
        v100 = (void (**)(void))(*v597 + 40);
        goto LABEL_199;
      }
    }
    v594[0] = &off_1E81717B0;
    v594[1] = sub_1C560BB44;
    v595 = v594;
    v101 = sub_1C560B520((uint64_t)v48, (uint64_t)&__p, (int *)&v628, v578 != 0, (uint64_t)&v625, v594);
    if (v595 == v594)
    {
      v102 = (void (**)(void))(v594[0] + 32);
LABEL_204:
      (*v102)();
    }
    else if (v595)
    {
      v102 = (void (**)(void))(*v595 + 40);
      goto LABEL_204;
    }
    v103 = v576 ^ 1;
    if (!v82)
      v103 = 0;
    if ((v101 & 1) != 0)
      v104 = 1;
    else
      v104 = v103;
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v19 + 8))(v19, 38, v98 | v104, 1, 0, 1, 2);
    v105 = v6[10];
    if (v105)
      v106 = (uint64_t)(v105 - 3);
    else
      v106 = 0;
    v107 = (_QWORD *)**v6;
    v640 = "twostage.entry";
    LOWORD(v644) = 259;
    v108 = operator new();
    *(_QWORD *)v108 = *v107 + 1600;
    *(_QWORD *)(v108 + 8) = 0;
    v109 = *(_DWORD *)(v108 + 20) & 0xC0000000;
    *(_DWORD *)(v108 + 16) = 22;
    *(_DWORD *)(v108 + 20) = v109;
    v110 = (_QWORD *)(v108 + 40);
    *(_QWORD *)(v108 + 24) = 0;
    *(_QWORD *)(v108 + 32) = 0;
    *(_QWORD *)(v108 + 40) = v108 + 40;
    *(_QWORD *)(v108 + 48) = v108 + 40;
    *(_QWORD *)(v108 + 56) = 0;
    llvm::Value::setName((uint64_t ***)v108, (uint64_t)&v640);
    v569 = (uint64_t **)v108;
    v570 = (llvm::BasicBlock *)v106;
    sub_1C560BCA8(v106, v108);
    v111 = (llvm::BasicBlock *)v572;
    v112 = v572[6];
    v113 = v112 - 24;
    if (!v112)
      v113 = 0;
    if (v567 != v113)
    {
      v640 = "twostage.ret";
      LOWORD(v644) = 259;
      v111 = (llvm::BasicBlock *)llvm::BasicBlock::splitBasicBlock(v572, (uint64_t *)(v567 + 24), (uint64_t)&v640, 0);
      v112 = *((_QWORD *)v111 + 6);
    }
    if (v112)
      v114 = v112 - 24;
    else
      v114 = 0;
    v640 = "dOS.ret";
    LOWORD(v644) = 259;
    v115 = llvm::BasicBlock::splitBasicBlockBefore(v111, (uint64_t *)(v114 + 24), (uint64_t)&v640);
    sub_1C4D8ADA0((uint64_t)&v591, (uint64_t **)v115, *(_QWORD *)(v115 + 48), 0, 0, 0);
    LOWORD(v644) = 257;
    llvm::IRBuilderBase::CreateIntrinsic((uint64_t *)&v591, 60, 0, 0, 0, 0, 0, (uint64_t)&v640);
    if (v98)
    {
      v116 = sub_1C560BE4C((uint64_t)v6, v47, (uint64_t)v111);
      sub_1C560C3C0((uint64_t)v6, v569, (llvm::BasicBlock *)v116, v570);
      goto LABEL_821;
    }
    v568 = v104;
    v565 = v110;
    v580 = 128;
    v579[0] = operator new(0x2000uLL, (std::align_val_t)8uLL);
    v579[1] = 0;
    v117 = 0x2000;
    v118 = (_QWORD *)(v579[0] + 16);
    do
    {
      *v118 = 0;
      v118[1] = -4096;
      *(v118 - 2) = &unk_1E814DA10;
      *(v118 - 1) = 2;
      v118[2] = 0;
      v118 += 8;
      v117 -= 64;
    }
    while (v117);
    LOBYTE(v581[0]) = 0;
    v582 = 0;
    v588 = v590;
    v589 = 0x800000000;
    v585 = v587;
    v586 = 0x800000000;
    v119 = v6[10];
    if (v119 != (_QWORD *)v99)
    {
      v120 = v111;
      do
      {
        if (v119)
          v121 = (uint64_t ***)(v119 - 3);
        else
          v121 = 0;
        if (v121 != (uint64_t ***)v120 && v121 != (uint64_t ***)v115)
        {
          v640 = ".gOS";
          LOWORD(v644) = 259;
          v123 = (llvm::Function *)llvm::CloneBasicBlock(v121, (uint64_t)v579, (uint64_t)&v640, 0, 0, 0);
          v124 = (_QWORD *)*((_QWORD *)v123 + 5);
          if (v124 == (_QWORD *)((char *)v123 + 40))
          {
            v126 = 0;
          }
          else
          {
            if (v124)
              v125 = v124 - 3;
            else
              v125 = 0;
            if (*((unsigned __int8 *)v125 + 16) - 29 >= 0xB)
              v126 = 0;
            else
              v126 = v125;
          }
          v127 = *((unsigned __int8 *)v126 + 16);
          if (v127 != 30)
            __asm { BR              X10 }
          if ((*((_DWORD *)v126 + 5) & 0x7FFFFFF) == 3)
            v128 = 2;
          else
            v128 = 1;
          v129 = 0;
          v130 = 0;
          v131 = v126 - 8;
          while (v126[-4 * v130 - 4] != v115)
          {
            ++v130;
            v129 += 2;
            v131 += 4;
            if (v128 == v130)
              goto LABEL_250;
          }
          llvm::Instruction::setSuccessor((llvm::Instruction *)v126, v130, v120);
LABEL_250:
          v132 = v586;
          if (v586 >= (unint64_t)HIDWORD(v586))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v585, (uint64_t)v587, v586 + 1, 8);
            v132 = v586;
          }
          *((_QWORD *)v585 + v132) = v121;
          LODWORD(v586) = v586 + 1;
          v133 = v589;
          if (v589 >= (unint64_t)HIDWORD(v589))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v588, (uint64_t)v590, v589 + 1, 8);
            v133 = v589;
          }
          *((_QWORD *)v588 + v133) = v123;
          LODWORD(v589) = v589 + 1;
          v641 = 2;
          v642 = 0;
          v643 = (void **)v121;
          if (v121 != (uint64_t ***)-8192 && v121 != (uint64_t ***)-4096 && v121)
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v641);
          v640 = &unk_1E814DA10;
          v644 = v579;
          v134 = sub_1C52E2ED8((uint64_t)v579, &v640);
          if (v643 != (void **)-8192 && v643 != (void **)-4096 && v643)
          {
            v136 = v641 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)(v641 & 0xFFFFFFFFFFFFFFF8) = v642;
            if (v642)
            {
              *v642 = *v642 & 7 | v136;
            }
            else
            {
              v137 = v643;
              v138 = **(int32x2_t ***)*v643;
              v139 = (unint64_t)v138[303];
              if (v139 <= v136)
              {
                v140 = v138[305].u32[0];
                if (v139 + 16 * v140 > v136)
                {
                  v141 = v140 - 1;
                  LODWORD(v142) = v141 & ((v643 >> 4) ^ (v643 >> 9));
                  v143 = (void ***)(v139 + 16 * v142);
                  v144 = *v143;
                  if (v643 == *v143)
                  {
LABEL_269:
                    *v143 = (void **)-8192;
                    v138[304] = vadd_s32(v138[304], (int32x2_t)0x1FFFFFFFFLL);
                    v137 = v643;
                  }
                  else
                  {
                    v145 = 1;
                    while (v144 != (void **)-4096)
                    {
                      v146 = v142 + v145++;
                      v142 = v146 & v141;
                      v144 = *(void ***)(v139 + 16 * v142);
                      if (v643 == v144)
                      {
                        v143 = (void ***)(v139 + 16 * v142);
                        goto LABEL_269;
                      }
                    }
                  }
                  *((_BYTE *)v137 + 17) &= ~1u;
                }
              }
            }
          }
          v147 = (llvm::Function *)v134[7];
          if (v147 != v123)
          {
            if (v147 && v147 != (llvm::Function *)-8192 && v147 != (llvm::Function *)-4096)
            {
              v163 = v134[5] & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v163 = v134[6];
              v164 = (unint64_t *)v134[6];
              if (v164)
              {
                *v164 = *v164 & 7 | v163;
              }
              else
              {
                v165 = v134[7];
                v166 = ***(int32x2_t ****)v165;
                v167 = (unint64_t)v166[303];
                if (v167 <= v163)
                {
                  v168 = v166[305].u32[0];
                  if (v167 + 16 * v168 > v163)
                  {
                    v169 = v168 - 1;
                    LODWORD(v170) = v169 & ((v165 >> 4) ^ (v165 >> 9));
                    v171 = (uint64_t *)(v167 + 16 * v170);
                    v172 = *v171;
                    if (v165 == *v171)
                    {
LABEL_309:
                      *v171 = -8192;
                      v166[304] = vadd_s32(v166[304], (int32x2_t)0x1FFFFFFFFLL);
                      v165 = v134[7];
                    }
                    else
                    {
                      v173 = 1;
                      while (v172 != -4096)
                      {
                        v174 = v170 + v173++;
                        v170 = v174 & v169;
                        v172 = *(_QWORD *)(v167 + 16 * v170);
                        if (v165 == v172)
                        {
                          v171 = (uint64_t *)(v167 + 16 * v170);
                          goto LABEL_309;
                        }
                      }
                    }
                    *(_BYTE *)(v165 + 17) &= ~1u;
                  }
                }
              }
            }
            v134[7] = v123;
            if (v123 != (llvm::Function *)-8192 && v123 != (llvm::Function *)-4096 && v123)
              llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v134 + 5));
          }
          if ((*((_WORD *)v121 + 9) & 0x7FFF) != 0)
          {
            v148 = llvm::BlockAddress::get((llvm::BlockAddress *)v6, (llvm::Function *)v121, v135);
            v150 = llvm::BlockAddress::get((llvm::BlockAddress *)v6, v123, v149);
            v641 = 2;
            v642 = 0;
            v643 = (void **)v148;
            if (v148 != (llvm::BlockAddress *)-8192 && v148 != (llvm::BlockAddress *)-4096 && v148)
              llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v641);
            v640 = &unk_1E814DA10;
            v644 = v579;
            v151 = sub_1C52E2ED8((uint64_t)v579, &v640);
            v120 = v111;
            if (v643 != (void **)-8192 && v643 != (void **)-4096 && v643)
            {
              v152 = v641 & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)(v641 & 0xFFFFFFFFFFFFFFF8) = v642;
              if (v642)
              {
                *v642 = *v642 & 7 | v152;
              }
              else
              {
                v153 = v643;
                v154 = **(int32x2_t ***)*v643;
                v155 = (unint64_t)v154[303];
                if (v155 <= v152)
                {
                  v156 = v154[305].u32[0];
                  if (v155 + 16 * v156 > v152)
                  {
                    v157 = v156 - 1;
                    LODWORD(v158) = v157 & ((v643 >> 4) ^ (v643 >> 9));
                    v159 = (void ***)(v155 + 16 * v158);
                    v160 = *v159;
                    if (v643 == *v159)
                    {
LABEL_297:
                      *v159 = (void **)-8192;
                      v154[304] = vadd_s32(v154[304], (int32x2_t)0x1FFFFFFFFLL);
                      v153 = v643;
                    }
                    else
                    {
                      v161 = 1;
                      while (v160 != (void **)-4096)
                      {
                        v162 = v158 + v161++;
                        v158 = v162 & v157;
                        v160 = *(void ***)(v155 + 16 * v158);
                        if (v643 == v160)
                        {
                          v159 = (void ***)(v155 + 16 * v158);
                          goto LABEL_297;
                        }
                      }
                    }
                    *((_BYTE *)v153 + 17) &= ~1u;
                  }
                }
              }
            }
            v175 = (llvm::BlockAddress *)v151[7];
            if (v175 != v150)
            {
              if (v175 && v175 != (llvm::BlockAddress *)-8192 && v175 != (llvm::BlockAddress *)-4096)
              {
                v176 = v151[5] & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)v176 = v151[6];
                v177 = (unint64_t *)v151[6];
                if (v177)
                {
                  *v177 = *v177 & 7 | v176;
                }
                else
                {
                  v178 = v151[7];
                  v179 = ***(int32x2_t ****)v178;
                  v180 = (unint64_t)v179[303];
                  if (v180 <= v176)
                  {
                    v181 = v179[305].u32[0];
                    if (v180 + 16 * v181 > v176)
                    {
                      v182 = v181 - 1;
                      LODWORD(v183) = v182 & ((v178 >> 4) ^ (v178 >> 9));
                      v184 = (uint64_t *)(v180 + 16 * v183);
                      v185 = *v184;
                      if (v178 == *v184)
                      {
LABEL_329:
                        *v184 = -8192;
                        v179[304] = vadd_s32(v179[304], (int32x2_t)0x1FFFFFFFFLL);
                        v178 = v151[7];
                      }
                      else
                      {
                        v186 = 1;
                        while (v185 != -4096)
                        {
                          v187 = v183 + v186++;
                          v183 = v187 & v182;
                          v185 = *(_QWORD *)(v180 + 16 * v183);
                          if (v178 == v185)
                          {
                            v184 = (uint64_t *)(v180 + 16 * v183);
                            goto LABEL_329;
                          }
                        }
                      }
                      *(_BYTE *)(v178 + 17) &= ~1u;
                      v94 = &v599;
                      v120 = v111;
                    }
                  }
                }
              }
              v151[7] = v150;
              if (v150 != (llvm::BlockAddress *)-8192 && v150 != (llvm::BlockAddress *)-4096 && v150)
                llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v151 + 5));
            }
          }
        }
        v119 = (_QWORD *)v119[1];
        v99 = (uint64_t)(v6 + 9);
      }
      while (v119 != (_QWORD *)v575);
      if ((_DWORD)v589)
      {
        v188 = v6[10];
        v189 = (_QWORD **)v588;
        v190 = 8 * v589;
        do
        {
          v191 = *v189++;
          llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v575, v191);
          v192 = *v188;
          v191[3] = *v188;
          v191[4] = v188;
          *(_QWORD *)(v192 + 8) = v191 + 3;
          *v188 = (uint64_t)(v191 + 3);
          v190 -= 8;
        }
        while (v190);
      }
    }
    llvm::remapInstructionsInBlocks((uint64_t *)&v588, (uint64_t)v579);
    sub_1C560C68C((_QWORD **)v588, v589, v193, v194, v195, v196);
    v197 = v568;
    v198 = (llvm::BasicBlock **)v588;
    if (((v576 | v568 ^ 1) & 1) == 0 && (_DWORD)v589)
    {
      v199 = (llvm::BasicBlock **)((char *)v588 + 8 * v589);
      v566 = v199;
      while (1)
      {
        v200 = (uint64_t)*v198 + 40;
        for (ii = *((_QWORD *)*v198 + 6); ii != v200; ii = *(_QWORD *)(ii + 8))
        {
          v202 = ii - 24;
          if (ii)
            v203 = ii - 24;
          else
            v203 = 0;
          if (*(_BYTE *)(v203 + 16) != 84)
            continue;
          v204 = *(_QWORD *)(v203 - 32);
          if (!v204
            || *(_BYTE *)(v204 + 16)
            || *(_QWORD *)(v204 + 24) != *(_QWORD *)(v203 + 72)
            || (*(_BYTE *)(v204 + 33) & 0x20) == 0
            || *(_DWORD *)(*(_QWORD *)(ii - 56) + 36) != 2792)
          {
            continue;
          }
          sub_1C4773D54((uint64_t)&v640, ii - 24, 0, 0, 0);
          v206 = *(_QWORD *)(v202 - 32 * (*(_DWORD *)(ii - 4) & 0x7FFFFFF));
          if (v206)
            v207 = *(_BYTE *)(v206 + 16) == 10;
          else
            v207 = 0;
          if (v207)
          {
            v270 = (_QWORD *)(v206 - 32 * (*(_DWORD *)(v206 + 20) & 0x7FFFFFF));
            v271 = (_QWORD *)(*v270 + 24);
            if (*(_DWORD *)(*v270 + 32) >= 0x41u)
              v271 = (_QWORD *)*v271;
            v272 = v270[4];
            v273 = (unsigned int *)(v272 + 24);
            if (*(_DWORD *)(v272 + 32) >= 0x41u)
              v273 = *(unsigned int **)v273;
            v274 = v270[8];
            v275 = (unsigned int *)(v274 + 24);
            if (*(_DWORD *)(v274 + 32) >= 0x41u)
              v275 = *(unsigned int **)v275;
            v276 = *v273;
            v277 = *v275;
            if (*(_DWORD *)v271)
              v278 = v276 == 0;
            else
              v278 = 1;
            if (!v278 && v277 != 0)
              goto LABEL_443;
            v280 = *(llvm::ConstantInt **)(*(_QWORD *)v647 + 1960);
            v281 = *(_DWORD *)(*(_QWORD *)v647 + 1968);
            LODWORD(v637) = v281 >> 8;
            if (v281 >> 8 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v636, 32, 0);
            }
            else
            {
              if (v281 <= 0xFF)
                v282 = 0;
              else
                v282 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v281);
              v636 = (llvm::FixedVectorType **)(v282 & 0x20);
            }
            v284 = (llvm::FixedVectorType **)llvm::ConstantInt::get(v280, (llvm::LLVMContext *)&v636, v205);
            if (v637 >= 0x41 && v636)
              MEMORY[0x1CAA32F9C](v636, 0x1000C8000313F17);
            v658 = v284;
            v285 = *(llvm::ConstantInt **)(*(_QWORD *)v647 + 1960);
            v286 = *(_DWORD *)(*(_QWORD *)v647 + 1968);
            LODWORD(v637) = v286 >> 8;
            if (v286 >> 8 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v636, 1, 0);
            }
            else
            {
              if (v286 <= 0xFF)
                LOBYTE(v287) = 0;
              else
                v287 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v286);
              v636 = (llvm::FixedVectorType **)(v287 & 1);
            }
            v289 = llvm::ConstantInt::get(v285, (llvm::LLVMContext *)&v636, v283);
            if (v637 >= 0x41 && v636)
              MEMORY[0x1CAA32F9C](v636, 0x1000C8000313F17);
            v659 = v289;
            v290 = *(llvm::ConstantInt **)(*(_QWORD *)v647 + 1960);
            v291 = *(_DWORD *)(*(_QWORD *)v647 + 1968);
            LODWORD(v637) = v291 >> 8;
            if (v291 >> 8 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v636, 1, 0);
            }
            else
            {
              if (v291 <= 0xFF)
                LOBYTE(v292) = 0;
              else
                v292 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v291);
              v636 = (llvm::FixedVectorType **)(v292 & 1);
            }
            v294 = llvm::ConstantInt::get(v290, (llvm::LLVMContext *)&v636, v288);
            if (v637 >= 0x41 && v636)
              MEMORY[0x1CAA32F9C](v636, 0x1000C8000313F17);
            v660 = v294;
            v661 = (llvm::FixedVectorType ***)llvm::UndefValue::get((llvm::UndefValue *)(*(_QWORD *)v647 + 1960), v293);
            Impl = (uint64_t)llvm::ConstantVector::getImpl(&v658, (llvm::Type *)4);
            if (!Impl)
            {
              llvm::FixedVectorType::get(*v658, (llvm::Type *)4);
              Impl = sub_1C537B3A4(**v295 + 1288, (uint64_t)v295, &v658, 4);
            }
            v296 = *(_DWORD *)(ii - 4) & 0x7FFFFFF;
            v264 = -v296;
            v265 = (uint64_t *)(v202 - 32 * v296);
            v199 = v566;
            if (*v265)
            {
              v297 = v202 + 32 * v264;
              v299 = *(_QWORD **)(v297 + 16);
              v298 = (_QWORD *)(v297 + 16);
              *v299 = *(v298 - 1);
              v300 = *(v298 - 1);
              if (v300)
                *(_QWORD *)(v300 + 16) = *v298;
            }
            *v265 = Impl;
            if (!Impl)
              goto LABEL_443;
          }
          else
          {
            v208 = *(llvm::ConstantInt **)(*(_QWORD *)v647 + 1960);
            LODWORD(v659) = *(_DWORD *)(*(_QWORD *)v647 + 1968) >> 8;
            if (v659 > 0x40)
              llvm::APInt::initSlowCase((llvm::APInt *)&v658, 0, 0);
            else
              v658 = 0;
            v209 = llvm::ConstantInt::get(v208, (llvm::LLVMContext *)&v658, v205);
            if (v659 >= 0x41 && v658)
              MEMORY[0x1CAA32F9C](v658, 0x1000C8000313F17);
            v662 = 257;
            v210 = sub_1C4772EE0((uint64_t *)&v640, v206, (uint64_t)v209, (uint64_t)&v658);
            v212 = *(llvm::ConstantInt **)(*(_QWORD *)v647 + 1960);
            v213 = *(_DWORD *)(*(_QWORD *)v647 + 1968);
            LODWORD(v659) = v213 >> 8;
            v214 = (uint64_t)v210;
            if (v213 >> 8 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v658, 1, 0);
            }
            else
            {
              if (v213 <= 0xFF)
                v215 = 0;
              else
                v215 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v213);
              v658 = (llvm::FixedVectorType **)(v215 & 1);
            }
            v216 = llvm::ConstantInt::get(v212, (llvm::LLVMContext *)&v658, v211);
            if (v659 >= 0x41 && v658)
              MEMORY[0x1CAA32F9C](v658, 0x1000C8000313F17);
            v662 = 257;
            v218 = sub_1C4772EE0((uint64_t *)&v640, v206, (uint64_t)v216, (uint64_t)&v658);
            v219 = *(llvm::ConstantInt **)(*(_QWORD *)v647 + 1960);
            v220 = *(_DWORD *)(*(_QWORD *)v647 + 1968);
            LODWORD(v659) = v220 >> 8;
            if (v220 >> 8 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v658, 2, 0);
            }
            else
            {
              if (v220 <= 0xFF)
                LOBYTE(v221) = 0;
              else
                v221 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v220);
              v658 = (llvm::FixedVectorType **)(v221 & 2);
            }
            v222 = llvm::ConstantInt::get(v219, (llvm::LLVMContext *)&v658, v217);
            if (v659 >= 0x41 && v658)
              MEMORY[0x1CAA32F9C](v658, 0x1000C8000313F17);
            v662 = 257;
            v223 = sub_1C4772EE0((uint64_t *)&v640, v206, (uint64_t)v222, (uint64_t)&v658);
            v225 = *(llvm::ConstantInt **)(*(_QWORD *)v647 + 1960);
            LODWORD(v659) = *(_DWORD *)(*(_QWORD *)v647 + 1968) >> 8;
            v573 = (uint64_t)v223;
            if (v659 > 0x40)
              llvm::APInt::initSlowCase((llvm::APInt *)&v658, 0, 0);
            else
              v658 = 0;
            v226 = llvm::ConstantInt::get(v225, (llvm::LLVMContext *)&v658, v224);
            if (v659 >= 0x41 && v658)
              MEMORY[0x1CAA32F9C](v658, 0x1000C8000313F17);
            v662 = 257;
            v228 = sub_1C4774B48((uint64_t)&v640, 33, v214, (uint64_t)v226, (uint64_t)&v658);
            v229 = *(llvm::ConstantInt **)(*(_QWORD *)v647 + 1960);
            LODWORD(v659) = *(_DWORD *)(*(_QWORD *)v647 + 1968) >> 8;
            if (v659 > 0x40)
              llvm::APInt::initSlowCase((llvm::APInt *)&v658, 0, 0);
            else
              v658 = 0;
            v230 = llvm::ConstantInt::get(v229, (llvm::LLVMContext *)&v658, v227);
            if (v659 >= 0x41 && v658)
              MEMORY[0x1CAA32F9C](v658, 0x1000C8000313F17);
            v662 = 257;
            v232 = (uint64_t *)sub_1C4774B48((uint64_t)&v640, 33, (uint64_t)v218, (uint64_t)v230, (uint64_t)&v658);
            v233 = *(llvm::ConstantInt **)(*(_QWORD *)v647 + 1888);
            LODWORD(v659) = *(_DWORD *)(*(_QWORD *)v647 + 1896) >> 8;
            if (v659 > 0x40)
              llvm::APInt::initSlowCase((llvm::APInt *)&v658, 0, 0);
            else
              v658 = 0;
            v234 = llvm::ConstantInt::get(v233, (llvm::LLVMContext *)&v658, v231);
            if (v659 >= 0x41 && v658)
              MEMORY[0x1CAA32F9C](v658, 0x1000C8000313F17);
            v662 = 257;
            Select = llvm::IRBuilderBase::CreateSelect((uint64_t *)&v640, v228, v232, (uint64_t)v234, (uint64_t)&v658, 0);
            v237 = *(llvm::ConstantInt **)(*(_QWORD *)v647 + 1960);
            LODWORD(v659) = *(_DWORD *)(*(_QWORD *)v647 + 1968) >> 8;
            if (v659 > 0x40)
              llvm::APInt::initSlowCase((llvm::APInt *)&v658, 0, 0);
            else
              v658 = 0;
            v238 = llvm::ConstantInt::get(v237, (llvm::LLVMContext *)&v658, v235);
            if (v659 >= 0x41 && v658)
              MEMORY[0x1CAA32F9C](v658, 0x1000C8000313F17);
            v662 = 257;
            v240 = (uint64_t *)sub_1C4774B48((uint64_t)&v640, 33, v573, (uint64_t)v238, (uint64_t)&v658);
            v241 = *(llvm::ConstantInt **)(*(_QWORD *)v647 + 1888);
            LODWORD(v659) = *(_DWORD *)(*(_QWORD *)v647 + 1896) >> 8;
            if (v659 > 0x40)
              llvm::APInt::initSlowCase((llvm::APInt *)&v658, 0, 0);
            else
              v658 = 0;
            v242 = llvm::ConstantInt::get(v241, (llvm::LLVMContext *)&v658, v239);
            if (v659 >= 0x41 && v658)
              MEMORY[0x1CAA32F9C](v658, 0x1000C8000313F17);
            v662 = 257;
            v244 = llvm::IRBuilderBase::CreateSelect((uint64_t *)&v640, (uint64_t)Select, v240, (uint64_t)v242, (uint64_t)&v658, 0);
            v245 = *(llvm::ConstantInt **)(*(_QWORD *)v647 + 1960);
            v246 = *(_DWORD *)(*(_QWORD *)v647 + 1968);
            LODWORD(v659) = v246 >> 8;
            if (v246 >> 8 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v658, 32, 0);
              v94 = &v599;
            }
            else
            {
              v94 = &v599;
              if (v246 <= 0xFF)
                LOBYTE(v247) = 0;
              else
                v247 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v246);
              v658 = (llvm::FixedVectorType **)(v247 & 0x20);
            }
            v249 = (llvm::FixedVectorType **)llvm::ConstantInt::get(v245, (llvm::LLVMContext *)&v658, v243);
            if (v659 >= 0x41 && v658)
              MEMORY[0x1CAA32F9C](v658, 0x1000C8000313F17);
            v636 = v249;
            v250 = *(llvm::ConstantInt **)(*(_QWORD *)v647 + 1960);
            v251 = *(_DWORD *)(*(_QWORD *)v647 + 1968);
            LODWORD(v659) = v251 >> 8;
            if (v251 >> 8 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v658, 1, 0);
            }
            else
            {
              if (v251 <= 0xFF)
                LOBYTE(v252) = 0;
              else
                v252 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v251);
              v658 = (llvm::FixedVectorType **)(v252 & 1);
            }
            v254 = llvm::ConstantInt::get(v250, (llvm::LLVMContext *)&v658, v248);
            if (v659 >= 0x41 && v658)
              MEMORY[0x1CAA32F9C](v658, 0x1000C8000313F17);
            v637 = v254;
            v255 = *(llvm::ConstantInt **)(*(_QWORD *)v647 + 1960);
            v256 = *(_DWORD *)(*(_QWORD *)v647 + 1968);
            LODWORD(v659) = v256 >> 8;
            if (v256 >> 8 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v658, 1, 0);
            }
            else
            {
              if (v256 <= 0xFF)
                LOBYTE(v257) = 0;
              else
                v257 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v256);
              v658 = (llvm::FixedVectorType **)(v257 & 1);
            }
            v259 = llvm::ConstantInt::get(v255, (llvm::LLVMContext *)&v658, v253);
            if (v659 >= 0x41 && v658)
              MEMORY[0x1CAA32F9C](v658, 0x1000C8000313F17);
            v638 = v259;
            v639 = llvm::UndefValue::get((llvm::UndefValue *)(*(_QWORD *)v647 + 1960), v258);
            v260 = (uint64_t)llvm::ConstantVector::getImpl(&v636, (llvm::Type *)4);
            if (!v260)
            {
              llvm::FixedVectorType::get(*v636, (llvm::Type *)4);
              v260 = sub_1C537B3A4(**v261 + 1288, (uint64_t)v261, &v636, 4);
            }
            v662 = 257;
            Impl = (uint64_t)llvm::IRBuilderBase::CreateSelect((uint64_t *)&v640, (uint64_t)v244, (uint64_t *)v206, v260, (uint64_t)&v658, 0);
            v263 = *(_DWORD *)(ii - 4) & 0x7FFFFFF;
            v264 = -v263;
            v265 = (uint64_t *)(v202 - 32 * v263);
            v199 = v566;
            if (*v265)
            {
              v266 = v202 + 32 * v264;
              v268 = *(_QWORD **)(v266 + 16);
              v267 = (_QWORD *)(v266 + 16);
              *v268 = *(v267 - 1);
              v269 = *(v267 - 1);
              if (v269)
                *(_QWORD *)(v269 + 16) = *v267;
            }
            *v265 = Impl;
            v99 = (uint64_t)(v6 + 9);
            if (!Impl)
              goto LABEL_443;
          }
          v303 = *(_QWORD *)(Impl + 8);
          v301 = (uint64_t **)(Impl + 8);
          v302 = v303;
          v304 = v202 + 32 * v264;
          *(_QWORD *)(v304 + 8) = v303;
          if (v303)
            *(_QWORD *)(v302 + 16) = v304 + 8;
          *(_QWORD *)(v304 + 16) = v301;
          *v301 = v265;
LABEL_443:
          if (v640 != &v642)
            free(v640);
        }
        if (++v198 == v199)
        {
          v198 = (llvm::BasicBlock **)v588;
          v197 = v568;
          break;
        }
      }
    }
    sub_1C560C3C0((uint64_t)v6, v569, *v198, v570);
    sub_1C55B6B84((uint64_t)v579);
    if (v582)
    {
      sub_1C4E43068((uint64_t)v581);
      MEMORY[0x1CAA32FB4](v581[0], 8);
      v582 = 0;
    }
    LODWORD(v589) = 0;
    if (v578)
      v305 = v197;
    else
      v305 = 1;
    if ((v305 & 1) == 0)
    {
      v306 = (_QWORD *)**v6;
      v640 = "dOS.entry";
      LOWORD(v644) = 259;
      v307 = (uint64_t **)operator new();
      *v307 = (uint64_t *)(*v306 + 1600);
      v307[1] = 0;
      v308 = *((_DWORD *)v307 + 5) & 0xC0000000;
      *((_DWORD *)v307 + 4) = 22;
      *((_DWORD *)v307 + 5) = v308;
      v309 = v307 + 5;
      v307[3] = 0;
      v307[4] = 0;
      v307[5] = (uint64_t *)(v307 + 5);
      v307[6] = (uint64_t *)(v307 + 5);
      v307[7] = 0;
      llvm::Value::setName((uint64_t ***)v307, (uint64_t)&v640);
      v310 = v585;
      v583 = *(llvm::BasicBlock **)v585;
      for (jj = (_QWORD *)*((_QWORD *)v583 + 6); jj != (_QWORD *)((char *)v583 + 40); jj = (_QWORD *)jj[1])
      {
        v312 = (uint64_t)(jj - 3);
        if (jj)
          v313 = jj - 3;
        else
          v313 = 0;
        if (*((_BYTE *)v313 + 16) == 84)
        {
          v314 = *(v313 - 4);
          if (v314)
          {
            if (!*(_BYTE *)(v314 + 16)
              && *(_QWORD *)(v314 + 24) == v313[9]
              && (*(_BYTE *)(v314 + 33) & 0x20) != 0
              && *(_DWORD *)(*(jj - 7) + 36) == 2781)
            {
              v640 = &v642;
              v641 = 0x600000000;
              v637 = 0;
              v636 = 0;
              LODWORD(v638) = 0;
              v415 = (llvm::FixedVectorType ***)operator new(0x28uLL);
              *v415 = (llvm::FixedVectorType **)&off_1E81717F8;
              v415[1] = (llvm::FixedVectorType **)&v636;
              v415[2] = &v583;
              v415[3] = (llvm::FixedVectorType **)&v658;
              v415[4] = (llvm::FixedVectorType **)&v640;
              v661 = v415;
              v584 = v312;
              sub_1C560EEE0((uint64_t)v415, &v584);
              if ((_DWORD)v641)
              {
                v416 = (uint64_t ****)v640;
                v417 = 8 * v641;
                do
                {
                  v418 = *v416;
                  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)((*v416)[5] + 5), *v416);
                  v420 = v418 + 3;
                  v419 = v418[3];
                  v421 = v418[4];
                  *v421 = (uint64_t *)v419;
                  v419[1] = (uint64_t *)v421;
                  v418[3] = 0;
                  v418[4] = 0;
                  v418[5] = v307;
                  *((_WORD *)v307 + 9) &= ~0x8000u;
                  if ((*((_BYTE *)v418 + 23) & 0x10) != 0)
                  {
                    v423 = v307[7];
                    if (v423)
                    {
                      v424 = (llvm::ValueSymbolTable *)v423[13];
                      if (v424)
                        llvm::ValueSymbolTable::reinsertValue(v424, (llvm::Value *)v418);
                    }
                  }
                  v422 = *v309;
                  v418[3] = (uint64_t **)*v309;
                  v418[4] = v309;
                  v422[1] = (uint64_t)v420;
                  *v309 = (uint64_t *)v420;
                  ++v416;
                  v417 -= 8;
                }
                while (v417);
              }
              if (v661 == &v658)
              {
                v425 = (void (**)(void))(v658 + 4);
LABEL_650:
                (*v425)();
              }
              else if (v661)
              {
                v425 = (void (**)(void))(*v661 + 5);
                goto LABEL_650;
              }
              MEMORY[0x1CAA32FB4](v636, 8);
              if (v640 != &v642)
                free(v640);
              v310 = v585;
              v94 = &v599;
              v99 = (uint64_t)(v6 + 9);
              break;
            }
          }
        }
      }
      if ((_DWORD)v586)
      {
        v426 = &v310[v586];
        do
        {
          v427 = *v310;
          v640 = ".dOS1";
          LOWORD(v644) = 259;
          v428 = (llvm::Function *)llvm::CloneBasicBlock((uint64_t ***)v427, (uint64_t)v579, (uint64_t)&v640, 0, 0, 0);
          v429 = v589;
          if (v589 >= (unint64_t)HIDWORD(v589))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v588, (uint64_t)v590, v589 + 1, 8);
            v429 = v589;
          }
          *((_QWORD *)v588 + v429) = v428;
          LODWORD(v589) = v589 + 1;
          v641 = 2;
          v642 = 0;
          v643 = (void **)v427;
          if (v427 != -8192 && v427 != -4096 && v427)
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v641);
          v640 = &unk_1E814DA10;
          v644 = v579;
          v430 = sub_1C52E2ED8((uint64_t)v579, &v640);
          if (v643 != (void **)-8192 && v643 != (void **)-4096 && v643)
          {
            v432 = v641 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)(v641 & 0xFFFFFFFFFFFFFFF8) = v642;
            if (v642)
            {
              *v642 = *v642 & 7 | v432;
            }
            else
            {
              v433 = v643;
              v434 = **(int32x2_t ***)*v643;
              v435 = (unint64_t)v434[303];
              if (v435 <= v432)
              {
                v436 = v434[305].u32[0];
                if (v435 + 16 * v436 > v432)
                {
                  v437 = v436 - 1;
                  LODWORD(v438) = v437 & ((v643 >> 4) ^ (v643 >> 9));
                  v439 = (void ***)(v435 + 16 * v438);
                  v440 = *v439;
                  if (v643 == *v439)
                  {
LABEL_673:
                    *v439 = (void **)-8192;
                    v434[304] = vadd_s32(v434[304], (int32x2_t)0x1FFFFFFFFLL);
                    v433 = v643;
                  }
                  else
                  {
                    v441 = 1;
                    while (v440 != (void **)-4096)
                    {
                      v442 = v438 + v441++;
                      v438 = v442 & v437;
                      v440 = *(void ***)(v435 + 16 * v438);
                      if (v643 == v440)
                      {
                        v439 = (void ***)(v435 + 16 * v438);
                        goto LABEL_673;
                      }
                    }
                  }
                  *((_BYTE *)v433 + 17) &= ~1u;
                }
              }
            }
          }
          v443 = (llvm::Function *)v430[7];
          if (v443 != v428)
          {
            if (v443 && v443 != (llvm::Function *)-8192 && v443 != (llvm::Function *)-4096)
            {
              v459 = v430[5] & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v459 = v430[6];
              v460 = (unint64_t *)v430[6];
              if (v460)
              {
                *v460 = *v460 & 7 | v459;
              }
              else
              {
                v461 = v430[7];
                v462 = ***(int32x2_t ****)v461;
                v463 = (unint64_t)v462[303];
                if (v463 <= v459)
                {
                  v464 = v462[305].u32[0];
                  if (v463 + 16 * v464 > v459)
                  {
                    v465 = v464 - 1;
                    LODWORD(v466) = v465 & ((v461 >> 4) ^ (v461 >> 9));
                    v467 = (uint64_t *)(v463 + 16 * v466);
                    v468 = *v467;
                    if (v461 == *v467)
                    {
LABEL_712:
                      *v467 = -8192;
                      v462[304] = vadd_s32(v462[304], (int32x2_t)0x1FFFFFFFFLL);
                      v461 = v430[7];
                    }
                    else
                    {
                      v469 = 1;
                      while (v468 != -4096)
                      {
                        v470 = v466 + v469++;
                        v466 = v470 & v465;
                        v468 = *(_QWORD *)(v463 + 16 * v466);
                        if (v461 == v468)
                        {
                          v467 = (uint64_t *)(v463 + 16 * v466);
                          goto LABEL_712;
                        }
                      }
                    }
                    *(_BYTE *)(v461 + 17) &= ~1u;
                  }
                }
              }
            }
            v430[7] = v428;
            if (v428 != (llvm::Function *)-8192 && v428 != (llvm::Function *)-4096 && v428)
              llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v430 + 5));
          }
          if ((*(_WORD *)(v427 + 18) & 0x7FFF) != 0)
          {
            v444 = llvm::BlockAddress::get((llvm::BlockAddress *)v6, (llvm::Function *)v427, v431);
            v446 = llvm::BlockAddress::get((llvm::BlockAddress *)v6, v428, v445);
            v641 = 2;
            v642 = 0;
            v643 = (void **)v444;
            if (v444 != (llvm::BlockAddress *)-8192 && v444 != (llvm::BlockAddress *)-4096 && v444)
              llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v641);
            v640 = &unk_1E814DA10;
            v644 = v579;
            v447 = sub_1C52E2ED8((uint64_t)v579, &v640);
            if (v643 != (void **)-8192 && v643 != (void **)-4096 && v643)
            {
              v448 = v641 & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)(v641 & 0xFFFFFFFFFFFFFFF8) = v642;
              if (v642)
              {
                *v642 = *v642 & 7 | v448;
              }
              else
              {
                v449 = v643;
                v450 = **(int32x2_t ***)*v643;
                v451 = (unint64_t)v450[303];
                if (v451 <= v448)
                {
                  v452 = v450[305].u32[0];
                  if (v451 + 16 * v452 > v448)
                  {
                    v453 = v452 - 1;
                    LODWORD(v454) = v453 & ((v643 >> 4) ^ (v643 >> 9));
                    v455 = (void ***)(v451 + 16 * v454);
                    v456 = *v455;
                    if (v643 == *v455)
                    {
LABEL_700:
                      *v455 = (void **)-8192;
                      v450[304] = vadd_s32(v450[304], (int32x2_t)0x1FFFFFFFFLL);
                      v449 = v643;
                    }
                    else
                    {
                      v457 = 1;
                      while (v456 != (void **)-4096)
                      {
                        v458 = v454 + v457++;
                        v454 = v458 & v453;
                        v456 = *(void ***)(v451 + 16 * v454);
                        if (v643 == v456)
                        {
                          v455 = (void ***)(v451 + 16 * v454);
                          goto LABEL_700;
                        }
                      }
                    }
                    *((_BYTE *)v449 + 17) &= ~1u;
                  }
                }
              }
            }
            v471 = (llvm::BlockAddress *)v447[7];
            if (v471 != v446)
            {
              if (v471 && v471 != (llvm::BlockAddress *)-8192 && v471 != (llvm::BlockAddress *)-4096)
              {
                v472 = v447[5] & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)v472 = v447[6];
                v473 = (unint64_t *)v447[6];
                if (v473)
                {
                  *v473 = *v473 & 7 | v472;
                }
                else
                {
                  v474 = v447[7];
                  v475 = ***(int32x2_t ****)v474;
                  v476 = (unint64_t)v475[303];
                  if (v476 <= v472)
                  {
                    v477 = v475[305].u32[0];
                    if (v476 + 16 * v477 > v472)
                    {
                      v478 = v477 - 1;
                      LODWORD(v479) = v478 & ((v474 >> 4) ^ (v474 >> 9));
                      v480 = (uint64_t *)(v476 + 16 * v479);
                      v481 = *v480;
                      if (v474 == *v480)
                      {
LABEL_732:
                        *v480 = -8192;
                        v475[304] = vadd_s32(v475[304], (int32x2_t)0x1FFFFFFFFLL);
                        v474 = v447[7];
                      }
                      else
                      {
                        v482 = 1;
                        while (v481 != -4096)
                        {
                          v483 = v479 + v482++;
                          v479 = v483 & v478;
                          v481 = *(_QWORD *)(v476 + 16 * v479);
                          if (v474 == v481)
                          {
                            v480 = (uint64_t *)(v476 + 16 * v479);
                            goto LABEL_732;
                          }
                        }
                      }
                      *(_BYTE *)(v474 + 17) &= ~1u;
                    }
                  }
                }
              }
              v447[7] = v446;
              if (v446 != (llvm::BlockAddress *)-8192 && v446 != (llvm::BlockAddress *)-4096 && v446)
                llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v447 + 5));
            }
          }
          ++v310;
        }
        while (v310 != v426);
        v310 = v585;
        v94 = &v599;
        v99 = (uint64_t)(v6 + 9);
      }
      if (*v310)
        v484 = (uint64_t *)(*v310 + 24);
      else
        v484 = 0;
      if ((_DWORD)v589)
      {
        v485 = (_QWORD **)v588;
        v486 = 8 * v589;
        do
        {
          v487 = *v485++;
          llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v99, v487);
          v488 = *v484;
          v487[3] = *v484;
          v487[4] = v484;
          *(_QWORD *)(v488 + 8) = v487 + 3;
          *v484 = (uint64_t)(v487 + 3);
          v486 -= 8;
        }
        while (v486);
      }
      llvm::remapInstructionsInBlocks((uint64_t *)&v588, (uint64_t)v579);
      v640 = &unk_1E8171840;
      v643 = &v640;
      sub_1C560EC98((_QWORD **)v585, v586, (uint64_t)&v640, v489, v490, v491);
      if (v643 == &v640)
      {
        v492 = (void (**)(void))((char *)v640 + 32);
LABEL_745:
        (*v492)();
      }
      else if (v643)
      {
        v492 = (void (**)(void))((char *)*v643 + 40);
        goto LABEL_745;
      }
      llvm::BasicBlock::insertInto((llvm::BasicBlock *)v307, (llvm::Function *)v6, *(llvm::BasicBlock **)v588);
      v493 = *(llvm::BasicBlock **)v588;
      v494 = *(llvm::BasicBlock **)v585;
      v495 = **v307;
      v640 = &v642;
      v641 = 0x200000000;
      v647 = v495;
      v648 = &v656;
      v649 = &v657;
      v650 = 0;
      v651 = 0;
      v652 = 512;
      v653 = 7;
      v655 = 0;
      v654 = 0;
      v656 = &unk_1E8167888;
      v657 = &unk_1E8167A08;
      v645 = v307;
      v646 = v307 + 5;
      v496 = llvm::Intrinsic::getDeclaration(v6[5], 2795, 0, 0);
      if (v496)
        v497 = *(uint64_t ***)(v496 + 24);
      else
        v497 = 0;
      v658 = (llvm::FixedVectorType **)"dOS_pass";
      v662 = 259;
      v498 = (llvm::ConstantInt **)sub_1C4774778((uint64_t *)&v640, v497, v496, 0, 0, (uint64_t)&v658, 0);
      v499 = llvm::ConstantInt::get(*v498, 1, (const llvm::APInt *)1);
      v662 = 257;
      v500 = (llvm::Value *)sub_1C4774B48((uint64_t)&v640, 32, (uint64_t)v498, (uint64_t)v499, (uint64_t)&v658);
      v501 = operator new(0xA0uLL);
      v502 = v501;
      v503 = 0;
      v504 = (llvm::Value *)(v501 + 24);
      v501[29] = v501[29] & 0x38000000 | 3;
      do
      {
        v505 = &v501[v503];
        *v505 = 0;
        v505[1] = 0;
        v505[2] = 0;
        v505[3] = v504;
        v503 += 8;
      }
      while (v503 != 24);
      llvm::BranchInst::BranchInst((llvm::BranchInst *)(v501 + 24), v493, v494, v500, 0);
      v662 = 257;
      (*((void (**)(void **, llvm::Value *, llvm::FixedVectorType ***, uint64_t **, _QWORD **))*v649 + 2))(v649, v504, &v658, v645, v646);
      v506 = (unint64_t **)v640;
      if ((_DWORD)v641)
      {
        v507 = (unint64_t **)((char *)v640 + 16 * v641);
        v508 = (unsigned __int8 **)(v502 + 36);
        while (1)
        {
          v509 = *(_DWORD *)v506;
          v510 = (unsigned __int8 *)v506[1];
          if (v510)
          {
            if (!v509)
            {
              v636 = (llvm::FixedVectorType **)v506[1];
              llvm::MetadataTracking::track((uint64_t)&v636, v510, 2);
              v511 = *v508;
              goto LABEL_763;
            }
          }
          else
          {
            v511 = *v508;
            if (!*v508 && (*((_BYTE *)v502 + 119) & 0x20) == 0)
              goto LABEL_760;
            if (!v509)
            {
              v636 = 0;
LABEL_763:
              if (v511)
                llvm::MetadataTracking::untrack((uint64_t)(v502 + 36), v511);
              v512 = (unsigned __int8 *)v636;
              *v508 = (unsigned __int8 *)v636;
              if (v512)
                llvm::MetadataTracking::retrack((uint64_t)&v636, v512, (uint64_t)(v502 + 36));
              goto LABEL_760;
            }
          }
          llvm::Value::setMetadata(v504, *(_DWORD *)v506, (llvm::MDNode *)v510);
LABEL_760:
          v506 += 2;
          if (v506 == v507)
          {
            v506 = (unint64_t **)v640;
            break;
          }
        }
      }
      if (v506 != &v642)
        free(v506);
      v513 = (_QWORD *)*v565;
      if ((_QWORD *)*v565 == v565)
      {
        v515 = 0;
      }
      else
      {
        if (v513)
          v514 = (unsigned __int8 *)(v513 - 3);
        else
          v514 = 0;
        if (v514[16] - 29 >= 0xB)
          v515 = 0;
        else
          v515 = (llvm::Instruction *)v514;
      }
      llvm::Instruction::setSuccessor(v515, 1u, (llvm::BasicBlock *)v307);
    }
    if (v585 != v587)
      free(v585);
    if (v588 != v590)
      free(v588);
    if (v582)
    {
      sub_1C4E43068((uint64_t)v581);
      MEMORY[0x1CAA32FB4](v581[0], 8);
      v582 = 0;
    }
    v516 = (_QWORD *)v579[0];
    if (v580)
    {
      v517 = v579[0] + ((unint64_t)v580 << 6);
      do
      {
        v518 = v516[3];
        if ((v518 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v519 = v516[7];
          if (v519)
          {
            if (v519 != -8192 && v519 != -4096)
            {
              v520 = v516[5] & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v520 = v516[6];
              v521 = (unint64_t *)v516[6];
              if (v521)
              {
                *v521 = *v521 & 7 | v520;
              }
              else
              {
                v522 = v516[7];
                v523 = ***(int32x2_t ****)v522;
                v524 = (unint64_t)v523[303];
                if (v524 <= v520)
                {
                  v525 = v523[305].u32[0];
                  if (v524 + 16 * v525 > v520)
                  {
                    v526 = v525 - 1;
                    LODWORD(v527) = v526 & ((v522 >> 4) ^ (v522 >> 9));
                    v528 = (uint64_t *)(v524 + 16 * v527);
                    v529 = *v528;
                    if (v522 == *v528)
                    {
LABEL_798:
                      *v528 = -8192;
                      v523[304] = vadd_s32(v523[304], (int32x2_t)0x1FFFFFFFFLL);
                      v522 = v516[7];
                    }
                    else
                    {
                      v530 = 1;
                      while (v529 != -4096)
                      {
                        v531 = v527 + v530++;
                        v527 = v531 & v526;
                        v529 = *(_QWORD *)(v524 + 16 * v527);
                        if (v522 == v529)
                        {
                          v528 = (uint64_t *)(v524 + 16 * v527);
                          goto LABEL_798;
                        }
                      }
                    }
                    *(_BYTE *)(v522 + 17) &= ~1u;
                  }
                }
              }
              v518 = v516[3];
            }
          }
        }
        if (v518 != -4096 && v518 != -8192 && v518 != 0)
        {
          v533 = v516[1] & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v533 = v516[2];
          v534 = (unint64_t *)v516[2];
          if (v534)
          {
            *v534 = *v534 & 7 | v533;
          }
          else
          {
            v535 = v516[3];
            v536 = ***(int32x2_t ****)v535;
            v537 = (unint64_t)v536[303];
            if (v537 <= v533)
            {
              v538 = v536[305].u32[0];
              if (v537 + 16 * v538 > v533)
              {
                v539 = v538 - 1;
                LODWORD(v540) = v539 & ((v535 >> 4) ^ (v535 >> 9));
                v541 = (uint64_t *)(v537 + 16 * v540);
                v542 = *v541;
                if (v535 == *v541)
                {
LABEL_817:
                  *v541 = -8192;
                  v536[304] = vadd_s32(v536[304], (int32x2_t)0x1FFFFFFFFLL);
                  v535 = v516[3];
                }
                else
                {
                  v543 = 1;
                  while (v542 != -4096)
                  {
                    v544 = v540 + v543++;
                    v540 = v544 & v539;
                    v542 = *(_QWORD *)(v537 + 16 * v540);
                    if (v535 == v542)
                    {
                      v541 = (uint64_t *)(v537 + 16 * v540);
                      goto LABEL_817;
                    }
                  }
                }
                *(_BYTE *)(v535 + 17) &= ~1u;
              }
            }
          }
        }
        v516 += 8;
      }
      while (v516 != (_QWORD *)v517);
      v516 = (_QWORD *)v579[0];
    }
    MEMORY[0x1CAA32FB4](v516, 8);
LABEL_821:
    if (v591 != v593)
      free(v591);
    if ((v623 & 1) == 0)
      MEMORY[0x1CAA32FB4](v624, 8);
    v545 = (char *)v620;
    if ((_DWORD)v621)
    {
      v546 = 32 * v621;
      do
      {
        v547 = *(char **)&v545[v546 - 24];
        if (&v545[v546 - 8] != v547)
          free(v547);
        v546 -= 32;
      }
      while (v546);
      v545 = (char *)v620;
    }
    if (v545 != v622)
      free(v545);
    v548 = v616;
    if ((v616 & 1) != 0)
    {
      v549 = 16;
      v550 = &v617;
LABEL_835:
      v551 = 104 * v549;
      v552 = (void **)(v550 + 2);
      do
      {
        v553 = (uint64_t)*(v552 - 2);
        if (v553 != -4096 && v553 != -8192 && *v552 != *(v552 - 1))
          free(*v552);
        v552 += 13;
        v551 -= 104;
      }
      while (v551);
      v548 = v616;
    }
    else
    {
      v549 = v618;
      if (v618)
      {
        v550 = v617;
        goto LABEL_835;
      }
    }
    if ((v548 & 1) == 0)
      MEMORY[0x1CAA32FB4](v617, 8);
    v554 = (char)__p;
    if ((__p & 1) != 0)
    {
      v555 = 16;
LABEL_846:
      v556 = 104 * v555;
      v557 = (void **)(v94 + 2);
      do
      {
        v558 = (uint64_t)*(v557 - 2);
        if (v558 != -4096 && v558 != -8192 && *v557 != *(v557 - 1))
          free(*v557);
        v557 += 13;
        v556 -= 104;
      }
      while (v556);
      v554 = (char)__p;
    }
    else
    {
      v555 = v600;
      if ((_DWORD)v600)
      {
        v94 = (uint64_t *)v599;
        goto LABEL_846;
      }
    }
    if ((v554 & 1) == 0)
      MEMORY[0x1CAA32FB4](v599, 8);
    if (v625 != v627)
      free(v625);
    if ((v628 & 1) == 0)
      MEMORY[0x1CAA32FB4](v629, 8);
    v71 = 1;
  }
  else
  {
    v71 = 0;
  }
LABEL_860:
  if (v633 != v635)
    free(v633);
  return v71;
}

BOOL sub_1C560AFB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  llvm::BasicBlock *v8;
  _QWORD *v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  std::string *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t ***v22;
  _QWORD v24[4];
  __int16 v25;

  v5 = (uint64_t *)a1;
  v6 = sub_1C560B174(a1);
  if (v6)
  {
    v7 = *(_QWORD *)(a2 + 80);
    if (v7)
      v8 = (llvm::BasicBlock *)(v7 - 24);
    else
      v8 = 0;
    v9 = **(_QWORD ***)a2;
    v24[0] = "twostage.entry";
    v25 = 259;
    v10 = operator new();
    *(_QWORD *)v10 = *v9 + 1600;
    *(_QWORD *)(v10 + 8) = 0;
    v11 = *(_DWORD *)(v10 + 20) & 0xC0000000;
    *(_DWORD *)(v10 + 16) = 22;
    *(_DWORD *)(v10 + 20) = v11;
    *(_QWORD *)(v10 + 24) = 0;
    *(_QWORD *)(v10 + 32) = 0;
    *(_QWORD *)(v10 + 40) = v10 + 40;
    *(_QWORD *)(v10 + 48) = v10 + 40;
    *(_QWORD *)(v10 + 56) = 0;
    llvm::Value::setName((uint64_t ***)v10, (uint64_t)v24);
    sub_1C560BCA8((uint64_t)v8, v10);
    v16 = v5[6];
    if (v16)
      v17 = v16 - 24;
    else
      v17 = 0;
    if (v6 != v17)
    {
      v24[0] = "twostage.ret";
      v25 = 259;
      v5 = (uint64_t *)llvm::BasicBlock::splitBasicBlock(v5, (uint64_t *)(v6 + 24), (uint64_t)v24, 0);
    }
    v18 = (uint64_t *)(sub_1C5EA9FF0(*(_QWORD *)(a2 + 40), 2793, 0, 0, v12, v13, v14, v15) + 8);
    do
    {
      do
      {
        v19 = *v18;
        v20 = *(_QWORD *)(v19 + 24);
        v18 = (uint64_t *)(v19 + 8);
      }
      while (!v20);
    }
    while (*(_BYTE *)(v20 + 16) != 84);
    v21 = *(_QWORD *)(*(_QWORD *)(v20 - 32 * (*(_DWORD *)(v20 + 20) & 0x7FFFFFF)) - 32);
    v22 = sub_1C560BE4C(a2, *(_QWORD *)(v21 - 32 * (*(_DWORD *)(v21 + 20) & 0x7FFFFFF)), (uint64_t)v5);
    sub_1C560C3C0(a2, (uint64_t **)v10, (llvm::BasicBlock *)v22, v8);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a3 + 8))(a3, 38, 1, 1, 0, 1, 2);
  }
  return v6 != 0;
}

uint64_t sub_1C560B174(uint64_t a1)
{
  uint64_t v1;
  uint64_t i;
  uint64_t result;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  v1 = a1 + 40;
  for (i = *(_QWORD *)(a1 + 48); i != v1; i = *(_QWORD *)(i + 8))
  {
    result = i - 24;
    if (i)
      v4 = i - 24;
    else
      v4 = 0;
    if (*(_BYTE *)(v4 + 16) == 84)
    {
      v5 = *(_QWORD *)(v4 - 32);
      if (v5)
      {
        if (!*(_BYTE *)(v5 + 16)
          && *(_QWORD *)(v5 + 24) == *(_QWORD *)(v4 + 72)
          && (*(_BYTE *)(v5 + 33) & 0x20) != 0
          && *(_DWORD *)(*(_QWORD *)(i - 56) + 36) == 2668)
        {
          v6 = *(_QWORD *)(v4 + 32);
          v7 = v6 - 24;
          if (!v6)
            v7 = 0;
          if (*(_BYTE *)(v7 + 16) == 84)
          {
            v8 = *(_QWORD *)(v7 - 32);
            if (v8)
            {
              if (!*(_BYTE *)(v8 + 16)
                && *(_QWORD *)(v8 + 24) == *(_QWORD *)(v7 + 72)
                && (*(_BYTE *)(v8 + 33) & 0x20) != 0
                && *(_DWORD *)(*(_QWORD *)(v6 - 56) + 36) == 2750)
              {
                v9 = *(_QWORD *)(v6 + 8);
                if (v9)
                {
                  if (*(_BYTE *)(v9 - 8) == 84)
                  {
                    v10 = *(_QWORD *)(*(_QWORD *)(v4 + 40) + 40);
                    v11 = v10 ? v10 - 24 : 0;
                    if (*(unsigned __int8 *)(v11 + 16) - 29 >= 0xB)
                      v11 = 0;
                    if (*(_BYTE *)(v11 + 16) == 29)
                      return result;
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  return 0;
}

uint64_t sub_1C560B288(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t j;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;

  v3 = a1 + 72;
  v4 = *(_QWORD *)(a1 + 80);
  if (v4 != a1 + 72)
  {
    if (a3)
      v6 = a3 + 24;
    else
      v6 = 0;
    do
    {
      v7 = v4 - 24;
      if (!v4)
        v7 = 0;
      if (v7 == a2)
      {
        for (i = *(_QWORD *)(a2 + 48); i != v6; i = *(_QWORD *)(i + 8))
        {
          if (i)
            v12 = i - 24;
          else
            v12 = 0;
          if (sub_1C560B9F4(v12))
            return 1;
        }
      }
      else
      {
        v8 = v7 + 40;
        for (j = *(_QWORD *)(v7 + 48); j != v8; j = *(_QWORD *)(j + 8))
        {
          if (j)
            v10 = j - 24;
          else
            v10 = 0;
          if (sub_1C560B9F4(v10))
            return 1;
        }
      }
      v4 = *(_QWORD *)(v4 + 8);
    }
    while (v4 != v3);
  }
  return 0;
}

_QWORD *sub_1C560B350(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t i;
  _QWORD *v6;
  uint64_t j;
  char v8;
  unsigned int v9;
  uint64_t v10;
  void **v11;
  uint64_t v12;
  char v13;
  unsigned int v14;
  uint64_t v15;
  void **v16;
  uint64_t v17;
  uint64_t v19;
  _QWORD *v20;
  unsigned int v21;
  uint64_t v22;
  _QWORD *v23;
  unsigned int v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a1 + 3344);
  v19 = 1;
  v4 = &v20;
  for (i = 8; i != 1672; i += 104)
    *(uint64_t *)((char *)&v19 + i) = -4096;
  v22 = 1;
  v6 = &v23;
  for (j = 1680; j != 3344; j += 104)
    *(uint64_t *)((char *)&v19 + j) = -4096;
  sub_1C560C790(&v19, a2, v3);
  sub_1C560D014(a1, (unsigned int *)&v19);
  sub_1C560D014(a1 + 1672, (unsigned int *)&v22);
  v8 = v22;
  if ((v22 & 1) != 0)
  {
    v9 = 16;
  }
  else
  {
    v9 = v24;
    if (!v24)
      goto LABEL_14;
    v6 = v23;
  }
  v10 = 104 * v9;
  v11 = (void **)(v6 + 2);
  do
  {
    v12 = (uint64_t)*(v11 - 2);
    if (v12 != -4096 && v12 != -8192 && *v11 != *(v11 - 1))
      free(*v11);
    v11 += 13;
    v10 -= 104;
  }
  while (v10);
  v8 = v22;
LABEL_14:
  if ((v8 & 1) == 0)
    MEMORY[0x1CAA32FB4](v23, 8);
  v13 = v19;
  if ((v19 & 1) != 0)
  {
    v14 = 16;
  }
  else
  {
    v14 = v21;
    if (!v21)
      goto LABEL_25;
    v4 = v20;
  }
  v15 = 104 * v14;
  v16 = (void **)(v4 + 2);
  do
  {
    v17 = (uint64_t)*(v16 - 2);
    if (v17 != -4096 && v17 != -8192 && *v16 != *(v16 - 1))
      free(*v16);
    v16 += 13;
    v15 -= 104;
  }
  while (v15);
  v13 = v19;
LABEL_25:
  if ((v13 & 1) == 0)
    MEMORY[0x1CAA32FB4](v20, 8);
  return sub_1C560C72C(a1);
}

uint64_t sub_1C560B520(uint64_t a1, uint64_t a2, int *a3, int a4, uint64_t a5, _QWORD *a6)
{
  unsigned int v6;
  uint64_t v10;
  char *v11;
  uint64_t *v12;
  _QWORD *v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  unsigned int v17;
  unsigned int v18;
  _QWORD *v20;
  void (**v21)(_QWORD *);
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t *v26;
  char v27;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  unint64_t v32;
  char *v33;
  uint64_t *v34;
  char *v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  unint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  BOOL v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v49;
  char *v53;
  char *v54;
  uint64_t v55;
  int v56;
  _BYTE v57[64];
  char *v58;
  char *v59;
  uint64_t v60;
  int v61;
  _BYTE v62[64];
  char *v63;
  unsigned int v64;
  _BYTE v65[40];
  _QWORD v66[3];
  _QWORD *v67;
  uint64_t v68;

  v68 = *MEMORY[0x1E0C80C00];
  v58 = v62;
  v59 = v62;
  v60 = 8;
  v61 = 0;
  v53 = v57;
  v54 = v57;
  v55 = 8;
  v56 = 0;
  v6 = *(_DWORD *)(a5 + 8);
  if (!v6)
  {
    v47 = 0;
    goto LABEL_93;
  }
  v49 = a5 + 16;
  while (1)
  {
    v10 = *(_QWORD *)(*(_QWORD *)a5 + 8 * v6 - 8);
    *(_DWORD *)(a5 + 8) = v6 - 1;
    v11 = (char *)sub_1C477672C((uint64_t)&v58, v10);
    if (v59 == v58)
      v12 = (uint64_t *)((char *)&v60 + 4);
    else
      v12 = &v60;
    if (v11 != &v59[8 * *(unsigned int *)v12])
      goto LABEL_7;
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v58, v10);
    v13 = (_QWORD *)a6[3];
    if (!v13)
    {
      v67 = 0;
LABEL_97:
      sub_1C485C2F0();
    }
    if (v13 == a6)
    {
      v67 = v66;
      (*(void (**)(_QWORD *, _QWORD *))(*a6 + 24))(a6, v66);
      v14 = (uint64_t)v67;
      if (!v67)
        goto LABEL_97;
    }
    else
    {
      v14 = (*(uint64_t (**)(_QWORD *))(*v13 + 16))(v13);
      v67 = (_QWORD *)v14;
      if (!v14)
        goto LABEL_97;
    }
    if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v14 + 48))(v14, v10) & 1) != 0)
    {
      v15 = 1;
    }
    else
    {
      if (*(_BYTE *)(v10 + 16) != 60)
        goto LABEL_26;
      v16 = **(_QWORD **)(v10 - 32);
      v17 = *(_DWORD *)(v16 + 8);
      if ((v17 & 0xFE) == 0x12)
        v17 = *(_DWORD *)(**(_QWORD **)(v16 + 16) + 8);
      v18 = v17 >> 8;
      if (v18 == 1 && a4 == 0)
      {
LABEL_26:
        v15 = 0;
      }
      else
      {
        v15 = 0;
        if (v18 != 2 && v18 != 64)
          v15 = sub_1C5EA56B4(v10, a1, a3, 1) ^ 1;
      }
    }
    v20 = v67;
    if (v67 == v66)
    {
      v21 = (void (**)(_QWORD *))(v66[0] + 32);
      v20 = v66;
    }
    else
    {
      if (!v67)
        goto LABEL_32;
      v21 = (void (**)(_QWORD *))(*v67 + 40);
    }
    (*v21)(v20);
LABEL_32:
    if ((v15 & 1) != 0)
      break;
    if (!v10 || *(_BYTE *)(v10 + 16) != 83)
      goto LABEL_56;
    v22 = *(_DWORD *)(v10 + 20);
    if ((v22 & 0x40000000) != 0)
    {
      v24 = *(_QWORD *)(v10 - 8);
      v23 = v22 & 0x7FFFFFF;
      if (!v23)
        goto LABEL_56;
    }
    else
    {
      v23 = v22 & 0x7FFFFFF;
      v24 = v10 - 32 * v23;
      if (!v23)
        goto LABEL_56;
    }
    v25 = (uint64_t *)(v24 + 32 * *(unsigned int *)(v10 + 60));
    v26 = &v25[v23];
    do
    {
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v53, *v25);
      if (v27)
      {
        sub_1C560D5C8((uint64_t)&v63, *(void **)(v10 + 40), (llvm::SmallPtrSetImplBase *)&v53, a2);
        v28 = v63;
        if (v64)
        {
          v29 = 8 * v64;
          do
          {
            v30 = *(_QWORD *)v28;
            if (*(_QWORD *)v28)
              v31 = *(unsigned __int8 *)(*(_QWORD *)v28 + 16) >= 0x1Cu;
            else
              v31 = 0;
            if (v31)
            {
              v32 = *(unsigned int *)(a5 + 8);
              if (v32 >= *(unsigned int *)(a5 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(a5, v49, v32 + 1, 8);
                v32 = *(unsigned int *)(a5 + 8);
              }
              *(_QWORD *)(*(_QWORD *)a5 + 8 * v32) = v30;
              ++*(_DWORD *)(a5 + 8);
            }
            v28 += 8;
            v29 -= 8;
          }
          while (v29);
          v28 = v63;
        }
        if (v28 != v65)
          free(v28);
      }
      ++v25;
    }
    while (v25 != v26);
LABEL_56:
    v33 = (char *)sub_1C477672C((uint64_t)&v53, *(_QWORD *)(v10 + 40));
    if (v54 == v53)
      v34 = (uint64_t *)((char *)&v55 + 4);
    else
      v34 = &v55;
    if (v33 == &v54[8 * *(unsigned int *)v34])
    {
      sub_1C560D5C8((uint64_t)&v63, *(void **)(v10 + 40), (llvm::SmallPtrSetImplBase *)&v53, a2);
      v35 = v63;
      if (v64)
      {
        v36 = 8 * v64;
        do
        {
          v37 = *(_QWORD *)v35;
          if (*(_QWORD *)v35)
            v38 = *(unsigned __int8 *)(*(_QWORD *)v35 + 16) >= 0x1Cu;
          else
            v38 = 0;
          if (v38)
          {
            v39 = *(unsigned int *)(a5 + 8);
            if (v39 >= *(unsigned int *)(a5 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a5, v49, v39 + 1, 8);
              v39 = *(unsigned int *)(a5 + 8);
            }
            *(_QWORD *)(*(_QWORD *)a5 + 8 * v39) = v37;
            ++*(_DWORD *)(a5 + 8);
          }
          v35 += 8;
          v36 -= 8;
        }
        while (v36);
        v35 = v63;
      }
      if (v35 != v65)
        free(v35);
    }
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v53, *(_QWORD *)(v10 + 40));
    v40 = *(_DWORD *)(v10 + 20);
    if ((v40 & 0x40000000) != 0)
    {
      v42 = *(_QWORD *)(v10 - 8);
      v41 = v40 & 0x7FFFFFF;
      if (v41)
      {
LABEL_78:
        v43 = 32 * v41;
        do
        {
          v44 = *(_QWORD *)v42;
          if (*(_QWORD *)v42)
            v45 = *(unsigned __int8 *)(*(_QWORD *)v42 + 16) >= 0x1Cu;
          else
            v45 = 0;
          if (v45)
          {
            v46 = *(unsigned int *)(a5 + 8);
            if (v46 >= *(unsigned int *)(a5 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a5, v49, v46 + 1, 8);
              v46 = *(unsigned int *)(a5 + 8);
            }
            *(_QWORD *)(*(_QWORD *)a5 + 8 * v46) = v44;
            ++*(_DWORD *)(a5 + 8);
          }
          v42 += 32;
          v43 -= 32;
        }
        while (v43);
      }
    }
    else
    {
      v41 = v40 & 0x7FFFFFF;
      v42 = v10 - 32 * v41;
      if (v41)
        goto LABEL_78;
    }
LABEL_7:
    v6 = *(_DWORD *)(a5 + 8);
    if (!v6)
    {
      v47 = 0;
      goto LABEL_91;
    }
  }
  v47 = 1;
LABEL_91:
  if (v54 != v53)
    free(v54);
LABEL_93:
  if (v59 != v58)
    free(v59);
  return v47;
}

BOOL sub_1C560B9F4(uint64_t a1)
{
  _BOOL8 result;
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int v13;
  BOOL v14;
  int v15;

  result = 0;
  v3 = *(unsigned __int8 *)(a1 + 16);
  v4 = (v3 - 33);
  if (v4 <= 0x37)
  {
    if (((1 << (v3 - 33)) & 0x8000000000041) != 0)
    {
      v5 = *(_QWORD *)(a1 + 64);
      if (v5 && (*(_BYTE *)(v5 + 17) & 0x30) != 0)
        return 0;
      v6 = *(_DWORD *)(a1 + 20);
      if (v6 < 0 && (v8 = a1 - 32 * (v6 & 0x7FFFFFF), v11 = *(_QWORD *)(v8 - 8), v9 = v8 - 8, (v10 = v11) != 0))
      {
        v12 = -v10;
        while (1)
        {
          v13 = *(_DWORD *)(*(_QWORD *)(v9 + v12) + 8);
          v14 = v13 > 7;
          v15 = (1 << v13) & 0x83;
          if (v14 || v15 == 0)
            break;
          v12 += 16;
          if (!v12)
            goto LABEL_9;
        }
      }
      else
      {
LABEL_9:
        if ((llvm::CallBase::hasFnAttrOnCalledFunction(a1, 45) & 1) != 0
          || (llvm::CallBase::hasFnAttrOnCalledFunction(a1, 44) & 1) != 0)
        {
          return 0;
        }
        v3 = *(unsigned __int8 *)(a1 + 16);
      }
    }
    else
    {
      if (v4 == 27)
        return (*(_WORD *)(a1 + 18) & 0x301) != 0;
      if (((1 << (v3 - 33)) & 0x808001D0000010) == 0)
        return result;
    }
    if (v3 == 84)
    {
      v7 = *(_QWORD *)(a1 - 32);
      if (v7)
      {
        if (!*(_BYTE *)(v7 + 16)
          && *(_QWORD *)(v7 + 24) == *(_QWORD *)(a1 + 72)
          && (*(_BYTE *)(v7 + 33) & 0x20) != 0
          && *(_DWORD *)(v7 + 36) == 2792)
        {
          return 0;
        }
      }
    }
    return 1;
  }
  return result;
}

BOOL sub_1C560BB44(uint64_t a1)
{
  _BOOL8 result;
  uint64_t v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  int v16;

  result = 0;
  v3 = *(unsigned __int8 *)(a1 + 16) - 33;
  if (v3 > 0x37)
    return result;
  if (((1 << (*(_BYTE *)(a1 + 16) - 33)) & 0x8000000000041) == 0)
  {
    if (v3 != 27)
    {
      if (((1 << (*(_BYTE *)(a1 + 16) - 33)) & 0x808001D0000010) == 0)
        return result;
      goto LABEL_13;
    }
    if ((*(_WORD *)(a1 + 18) & 0x301) != 0)
      goto LABEL_13;
    return 0;
  }
  v4 = *(_QWORD *)(a1 + 64);
  if (v4 && (*(_BYTE *)(v4 + 17) & 0x30) != 0)
    return 0;
  v5 = *(_DWORD *)(a1 + 20);
  if (v5 < 0)
  {
    v9 = a1 - 32 * (v5 & 0x7FFFFFF);
    v12 = *(_QWORD *)(v9 - 8);
    v10 = v9 - 8;
    v11 = v12;
    if (v12)
    {
      v13 = -v11;
      do
      {
        v14 = *(_DWORD *)(*(_QWORD *)(v10 + v13) + 8);
        v15 = v14 > 7;
        v16 = (1 << v14) & 0x83;
        if (v15 || v16 == 0)
          goto LABEL_13;
        v13 += 16;
      }
      while (v13);
    }
  }
  if ((llvm::CallBase::hasFnAttrOnCalledFunction(a1, 45) & 1) != 0
    || (llvm::CallBase::hasFnAttrOnCalledFunction(a1, 44) & 1) != 0)
  {
    return 0;
  }
LABEL_13:
  v6 = sub_1C55A7838(a1);
  if (v6 == 0xFFFFFFFFLL)
    return 1;
  v7 = *(_DWORD *)(a1 + 20);
  if ((v7 & 0x40000000) != 0)
    v8 = *(_QWORD *)(a1 - 8);
  else
    v8 = a1 - 32 * (v7 & 0x7FFFFFF);
  return (*(_DWORD *)(**(_QWORD **)(v8 + 32 * v6) + 8) & 0xFFFFFF00) != 1536;
}

void sub_1C560BCA8(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int v5;
  uint64_t v6;
  uint64_t ****v7;
  uint64_t **v8;
  uint64_t v9;
  uint64_t ***v10;
  uint64_t **v11;
  uint64_t ***v12;
  uint64_t **v13;
  uint64_t *v14;
  uint64_t v15;
  llvm::ValueSymbolTable *v16;
  void *v17;
  uint64_t v18;
  _QWORD v19[9];

  v19[8] = *MEMORY[0x1E0C80C00];
  v17 = v19;
  v18 = 0x800000000;
  v2 = a1 + 40;
  v3 = *(_QWORD *)(a1 + 48);
  if (v3 != a1 + 40)
  {
    v5 = 0;
    do
    {
      if (v3)
        v6 = v3 - 24;
      else
        v6 = 0;
      if (*(_BYTE *)(v6 + 16) == 59)
      {
        if (v5 >= HIDWORD(v18))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v17, (uint64_t)v19, v5 + 1, 8);
          v5 = v18;
        }
        *((_QWORD *)v17 + v5) = v6;
        v5 = v18 + 1;
        LODWORD(v18) = v18 + 1;
      }
      v3 = *(_QWORD *)(v3 + 8);
    }
    while (v3 != v2);
    v7 = (uint64_t ****)v17;
    if (v5)
    {
      v8 = (uint64_t **)(a2 + 40);
      v9 = 8 * v5;
      do
      {
        v10 = *v7;
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)((*v7)[5] + 5), *v7);
        v12 = v10 + 3;
        v11 = v10[3];
        v13 = v10[4];
        *v13 = (uint64_t *)v11;
        v11[1] = (uint64_t *)v13;
        v10[3] = 0;
        v10[4] = 0;
        v10[5] = (uint64_t **)a2;
        *(_WORD *)(a2 + 18) &= ~0x8000u;
        if ((*((_BYTE *)v10 + 23) & 0x10) != 0)
        {
          v15 = *(_QWORD *)(a2 + 56);
          if (v15)
          {
            v16 = *(llvm::ValueSymbolTable **)(v15 + 104);
            if (v16)
              llvm::ValueSymbolTable::reinsertValue(v16, (llvm::Value *)v10);
          }
        }
        v14 = *v8;
        v10[3] = (uint64_t **)*v8;
        v10[4] = v8;
        v14[1] = (uint64_t)v12;
        *v8 = (uint64_t *)v12;
        ++v7;
        v9 -= 8;
      }
      while (v9);
      v7 = (uint64_t ****)v17;
    }
    if (v7 != v19)
      free(v7);
  }
}

uint64_t ***sub_1C560BE4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t ***v10;
  BOOL v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t **v16;
  uint64_t **v17;
  uint64_t *v18;
  uint64_t *v19;
  const llvm::APInt *v20;
  uint64_t Declaration;
  llvm::ConstantInt *v22;
  unsigned int v23;
  unint64_t v24;
  const llvm::APInt *v25;
  llvm::FixedVectorType **v26;
  llvm::ConstantInt *v27;
  unsigned int v28;
  unint64_t v29;
  const llvm::APInt *v30;
  llvm::ValueHandleBase *v31;
  llvm::ConstantInt *v32;
  unsigned int v33;
  unint64_t v34;
  llvm::Type *v35;
  llvm::ValueHandleBase *v36;
  uint64_t Impl;
  _QWORD **v38;
  uint64_t **v39;
  char *v40;
  char *v41;
  llvm::Value *v42;
  _QWORD *v43;
  uint64_t v44;
  char *v45;
  char *v46;
  unsigned __int8 **v47;
  int v48;
  unsigned __int8 *v49;
  unsigned __int8 *v50;
  unsigned __int8 *v51;
  void *v53;
  uint64_t v54;
  _WORD v55[16];
  uint64_t ***v56;
  uint64_t v57;
  uint64_t *v58;
  void **v59;
  void **v60;
  uint64_t v61;
  int v62;
  __int16 v63;
  char v64;
  uint64_t v65;
  uint64_t v66;
  void *v67;
  void *v68;
  llvm::FixedVectorType **v69;
  llvm::ValueHandleBase *v70;
  llvm::ValueHandleBase *v71;
  llvm::UndefValue *v72;
  __int16 v73;
  unsigned __int8 *v74;
  uint64_t v75;
  uint64_t v76;

  v76 = *MEMORY[0x1E0C80C00];
  v6 = **(_QWORD ***)a1;
  v53 = "gOS";
  v55[8] = 259;
  v7 = a1 + 72;
  v8 = *(_QWORD *)(a1 + 80);
  v9 = operator new();
  v10 = (uint64_t ***)v9;
  v11 = v8 == 0;
  if (v8)
    v12 = v8 - 24;
  else
    v12 = 0;
  *(_QWORD *)v9 = *v6 + 1600;
  *(_QWORD *)(v9 + 8) = 0;
  v13 = *(_DWORD *)(v9 + 20) & 0xC0000000;
  *(_DWORD *)(v9 + 16) = 22;
  *(_DWORD *)(v9 + 20) = v13;
  v14 = v9 + 40;
  *(_QWORD *)(v9 + 24) = 0;
  v15 = (uint64_t *)(v9 + 24);
  *(_QWORD *)(v9 + 32) = 0;
  *(_QWORD *)(v9 + 40) = v9 + 40;
  *(_QWORD *)(v9 + 48) = v9 + 40;
  *(_QWORD *)(v9 + 56) = 0;
  v16 = (uint64_t **)(v12 + 24);
  if (v11)
    v17 = (uint64_t **)v7;
  else
    v17 = v16;
  llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v7, (_QWORD *)v9);
  v18 = *v17;
  v10[4] = v17;
  *v15 = (uint64_t)v18;
  v18[1] = (uint64_t)v15;
  *v17 = v15;
  llvm::Value::setName(v10, (uint64_t)&v53);
  v19 = **v10;
  v53 = v55;
  v54 = 0x200000000;
  v58 = v19;
  v59 = &v67;
  v60 = &v68;
  v61 = 0;
  v62 = 0;
  v63 = 512;
  v64 = 7;
  v65 = 0;
  v66 = 0;
  v67 = &unk_1E8167888;
  v68 = &unk_1E8167A08;
  v56 = v10;
  v57 = v14;
  Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t **)(a1 + 40), 2792, 0, 0);
  v22 = *(llvm::ConstantInt **)(*v58 + 1960);
  v23 = *(_DWORD *)(*v58 + 1968);
  LODWORD(v70) = v23 >> 8;
  if (v23 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v69, 32, 0);
  }
  else
  {
    if (v23 <= 0xFF)
      LOBYTE(v24) = 0;
    else
      v24 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v23);
    v69 = (llvm::FixedVectorType **)(v24 & 0x20);
  }
  v26 = (llvm::FixedVectorType **)llvm::ConstantInt::get(v22, (llvm::LLVMContext *)&v69, v20);
  if (v70 >= 0x41 && v69)
    MEMORY[0x1CAA32F9C](v69, 0x1000C8000313F17);
  v69 = v26;
  v27 = *(llvm::ConstantInt **)(*v58 + 1960);
  v28 = *(_DWORD *)(*v58 + 1968);
  LODWORD(v75) = v28 >> 8;
  if (v28 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v74, 1, 0);
  }
  else
  {
    if (v28 <= 0xFF)
      LOBYTE(v29) = 0;
    else
      v29 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v28);
    v74 = (unsigned __int8 *)(v29 & 1);
  }
  v31 = llvm::ConstantInt::get(v27, (llvm::LLVMContext *)&v74, v25);
  if (v75 >= 0x41 && v74)
    MEMORY[0x1CAA32F9C](v74, 0x1000C8000313F17);
  v70 = v31;
  v32 = *(llvm::ConstantInt **)(*v58 + 1960);
  v33 = *(_DWORD *)(*v58 + 1968);
  LODWORD(v75) = v33 >> 8;
  if (v33 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v74, 1, 0);
  }
  else
  {
    if (v33 <= 0xFF)
      LOBYTE(v34) = 0;
    else
      v34 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v33);
    v74 = (unsigned __int8 *)(v34 & 1);
  }
  v36 = llvm::ConstantInt::get(v32, (llvm::LLVMContext *)&v74, v30);
  if (v75 >= 0x41 && v74)
    MEMORY[0x1CAA32F9C](v74, 0x1000C8000313F17);
  v71 = v36;
  v72 = llvm::UndefValue::get((llvm::UndefValue *)(*v58 + 1960), v35);
  Impl = (uint64_t)llvm::ConstantVector::getImpl(&v69, (llvm::Type *)4);
  if (!Impl)
  {
    llvm::FixedVectorType::get(*v69, (llvm::Type *)4);
    Impl = sub_1C537B3A4(**v38 + 1288, (uint64_t)v38, &v69, 4);
  }
  if (Declaration)
    v39 = *(uint64_t ***)(Declaration + 24);
  else
    v39 = 0;
  v74 = (unsigned __int8 *)Impl;
  v75 = a2;
  v73 = 257;
  sub_1C4774778((uint64_t *)&v53, v39, Declaration, (uint64_t *)&v74, 2, (uint64_t)&v69, 0);
  v40 = (char *)operator new(0x60uLL);
  v41 = v40;
  *((_DWORD *)v40 + 13) = *((_DWORD *)v40 + 13) & 0x38000000 | 1;
  *(_QWORD *)v40 = 0;
  *((_QWORD *)v40 + 2) = 0;
  *((_QWORD *)v40 + 1) = 0;
  *((_QWORD *)v40 + 4) = ***(_QWORD ***)a3 + 1576;
  v42 = (llvm::Value *)(v40 + 32);
  *((_QWORD *)v40 + 3) = v40 + 32;
  *((_QWORD *)v40 + 5) = 0;
  v40[48] = 30;
  v40[49] = 0;
  *((_WORD *)v40 + 25) = 0;
  *((_DWORD *)v40 + 13) = 1;
  *((_DWORD *)v40 + 22) = 0;
  *(_OWORD *)(v40 + 72) = 0u;
  *(_OWORD *)(v40 + 56) = 0u;
  v43 = (_QWORD *)(a3 + 8);
  v44 = *(_QWORD *)(a3 + 8);
  *(_QWORD *)v40 = a3;
  *((_QWORD *)v40 + 1) = v44;
  if (v44)
    *(_QWORD *)(v44 + 16) = v40 + 8;
  *((_QWORD *)v40 + 2) = v43;
  *v43 = v40;
  v73 = 257;
  (*((void (**)(void **, llvm::Value *, llvm::FixedVectorType ***, uint64_t ***, uint64_t))*v60 + 2))(v60, v42, &v69, v56, v57);
  v45 = (char *)v53;
  if ((_DWORD)v54)
  {
    v46 = (char *)v53 + 16 * v54;
    v47 = (unsigned __int8 **)(v41 + 80);
    while (1)
    {
      v48 = *(_DWORD *)v45;
      v49 = (unsigned __int8 *)*((_QWORD *)v45 + 1);
      if (v49)
      {
        if (!v48)
        {
          v74 = (unsigned __int8 *)*((_QWORD *)v45 + 1);
          llvm::MetadataTracking::track((uint64_t)&v74, v49, 2);
          v50 = *v47;
          if (!*v47)
          {
LABEL_42:
            v51 = v74;
            *v47 = v74;
            if (v51)
              llvm::MetadataTracking::retrack((uint64_t)&v74, v51, (uint64_t)(v41 + 80));
            goto LABEL_39;
          }
LABEL_36:
          llvm::MetadataTracking::untrack((uint64_t)(v41 + 80), v50);
          goto LABEL_42;
        }
      }
      else
      {
        v50 = *v47;
        if (!*v47 && (v41[55] & 0x20) == 0)
          goto LABEL_39;
        if (!v48)
        {
          v74 = 0;
          if (!v50)
            goto LABEL_42;
          goto LABEL_36;
        }
      }
      llvm::Value::setMetadata(v42, *(_DWORD *)v45, (llvm::MDNode *)v49);
LABEL_39:
      v45 += 16;
      if (v45 == v46)
      {
        v45 = (char *)v53;
        break;
      }
    }
  }
  if (v45 != (char *)v55)
    free(v45);
  return v10;
}

void sub_1C560C3C0(uint64_t a1, uint64_t **a2, llvm::BasicBlock *a3, llvm::BasicBlock *a4)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t Declaration;
  uint64_t **v14;
  llvm::ConstantInt **v15;
  llvm::Value **v16;
  llvm::Value *v17;
  _DWORD *v18;
  _DWORD *v19;
  uint64_t v20;
  llvm::Value *v21;
  _QWORD *v22;
  char *v23;
  char *v24;
  unsigned __int8 **v25;
  int v26;
  llvm::MDNode *v27;
  unsigned __int8 *v28;
  unsigned __int8 *v29;
  _QWORD v30[4];
  __int16 v31;
  unsigned __int8 *v32;
  void *v33;
  uint64_t v34;
  _BYTE v35[32];
  uint64_t **v36;
  _QWORD **v37;
  uint64_t v38;
  void **v39;
  _QWORD *v40;
  uint64_t v41;
  int v42;
  __int16 v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  void *v47;
  _QWORD v48[2];

  v48[1] = *MEMORY[0x1E0C80C00];
  v8 = (uint64_t *)(a1 + 72);
  v9 = *(uint64_t **)(a1 + 80);
  llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(a1 + 72, a2);
  if (v9)
    v10 = v9;
  else
    v10 = v8;
  v11 = (uint64_t *)*v10;
  a2[3] = (uint64_t *)*v10;
  a2[4] = v10;
  v11[1] = (uint64_t)(a2 + 3);
  *v10 = (uint64_t)(a2 + 3);
  v12 = **a2;
  v33 = v35;
  v34 = 0x200000000;
  v38 = v12;
  v39 = &v47;
  v40 = v48;
  v41 = 0;
  v42 = 0;
  v43 = 512;
  v44 = 7;
  v45 = 0;
  v46 = 0;
  v47 = &unk_1E8167888;
  v48[0] = &unk_1E8167A08;
  v36 = a2;
  v37 = a2 + 5;
  Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t **)(a1 + 40), 2796, 0, 0);
  if (Declaration)
    v14 = *(uint64_t ***)(Declaration + 24);
  else
    v14 = 0;
  v30[0] = "gOS_pass";
  v31 = 259;
  v15 = (llvm::ConstantInt **)sub_1C4774778((uint64_t *)&v33, v14, Declaration, 0, 0, (uint64_t)v30, 0);
  v16 = llvm::ConstantInt::get(*v15, 1, (const llvm::APInt *)1);
  v31 = 257;
  v17 = (llvm::Value *)sub_1C4774B48((uint64_t)&v33, 32, (uint64_t)v15, (uint64_t)v16, (uint64_t)v30);
  v18 = operator new(0xA0uLL);
  v19 = v18;
  v20 = 0;
  v21 = (llvm::Value *)(v18 + 24);
  v18[29] = v18[29] & 0x38000000 | 3;
  do
  {
    v22 = &v18[v20];
    *v22 = 0;
    v22[1] = 0;
    v22[2] = 0;
    v22[3] = v21;
    v20 += 8;
  }
  while (v20 != 24);
  llvm::BranchInst::BranchInst((llvm::BranchInst *)(v18 + 24), a3, a4, v17, 0);
  v31 = 257;
  (*(void (**)(_QWORD *, llvm::Value *, _QWORD *, uint64_t **, _QWORD **))(*v40 + 16))(v40, v21, v30, v36, v37);
  v23 = (char *)v33;
  if (!(_DWORD)v34)
    goto LABEL_24;
  v24 = (char *)v33 + 16 * v34;
  v25 = (unsigned __int8 **)(v19 + 36);
  do
  {
    v26 = *(_DWORD *)v23;
    v27 = (llvm::MDNode *)*((_QWORD *)v23 + 1);
    if (v27)
    {
      if (v26)
      {
LABEL_18:
        llvm::Value::setMetadata(v21, *(_DWORD *)v23, v27);
        goto LABEL_19;
      }
      v32 = (unsigned __int8 *)*((_QWORD *)v23 + 1);
      llvm::MetadataTracking::track((uint64_t)&v32, (unsigned __int8 *)v27, 2);
      v28 = *v25;
      if (!*v25)
        goto LABEL_22;
LABEL_16:
      llvm::MetadataTracking::untrack((uint64_t)(v19 + 36), v28);
      goto LABEL_22;
    }
    v28 = *v25;
    if (!*v25 && (*((_BYTE *)v19 + 119) & 0x20) == 0)
      goto LABEL_19;
    if (v26)
      goto LABEL_18;
    v32 = 0;
    if (v28)
      goto LABEL_16;
LABEL_22:
    v29 = v32;
    *v25 = v32;
    if (v29)
      llvm::MetadataTracking::retrack((uint64_t)&v32, v29, (uint64_t)(v19 + 36));
LABEL_19:
    v23 += 16;
  }
  while (v23 != v24);
  v23 = (char *)v33;
LABEL_24:
  if (v23 != v35)
    free(v23);
}

uint64_t sub_1C560C68C(_QWORD **a1, int a2, uint64_t a3, uint64_t a4, llvm::Type *a5, llvm::DSOLocalEquivalent **a6)
{
  uint64_t result;
  uint64_t (**v7)(void);
  _QWORD v8[3];
  _QWORD *v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  v8[0] = &off_1E81717B0;
  v8[1] = sub_1C560B9F4;
  v9 = v8;
  sub_1C560EC98(a1, a2, (uint64_t)v8, a4, a5, a6);
  result = (uint64_t)v9;
  if (v9 == v8)
  {
    v7 = (uint64_t (**)(void))(v8[0] + 32);
  }
  else
  {
    if (!v9)
      return result;
    v7 = (uint64_t (**)(void))(*v9 + 40);
  }
  return (*v7)();
}

_QWORD *sub_1C560C72C(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  void *v6;

  v1 = *(unsigned int *)(a1 + 3360);
  if ((_DWORD)v1)
  {
    v3 = *(_QWORD *)(a1 + 3352);
    v4 = 32 * v1;
    do
    {
      v5 = a1;
      v6 = *(void **)(v3 + v4 - 24);
      if ((void *)(v3 + v4 - 8) != v6)
        free(v6);
      v4 -= 32;
      a1 = v5;
    }
    while (v4);
  }
  *(_DWORD *)(a1 + 3360) = 0;
  return sub_1C560D488((_QWORD *)(a1 + 3688));
}

_QWORD *sub_1C560C790(_QWORD *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  unsigned int v7;
  int v8;
  _QWORD *v9;
  int v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  _QWORD *v14;
  int v15;
  BOOL v16;
  unsigned int v17;
  _QWORD *v18;
  int v19;
  _QWORD *v20;
  int v21;
  unsigned int v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  int v26;
  BOOL v27;
  unsigned int v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  int v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  uint64_t *v48;
  uint64_t v49;
  int v50;
  _QWORD *v51;
  int v52;
  unsigned int v53;
  _QWORD *v54;
  uint64_t v55;
  _QWORD *v56;
  int v57;
  BOOL v58;
  unsigned int v59;
  _QWORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  int v66;
  int v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t *v70;
  uint64_t *v71;
  unsigned int v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t *v79;
  unint64_t *v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  int v84;
  unsigned int v85;
  _QWORD *v86;
  uint64_t v87;
  _QWORD *v88;
  int v89;
  BOOL v90;
  unsigned int v91;
  _QWORD *v92;
  unint64_t *v93;
  unint64_t v94;
  uint64_t *v95;
  unsigned int v96;
  uint64_t v97;
  unsigned int v98;
  _QWORD *v99;
  uint64_t v100;
  _BYTE *v101;
  _QWORD *v102;
  uint64_t v103;

  v3 = (uint64_t)result;
  v4 = *(_QWORD *)(a2 + 80);
  v100 = a2 + 72;
  if (v4 != a2 + 72)
  {
    v99 = result + 210;
    v101 = result + 209;
    v102 = result + 1;
    do
    {
      if (v4)
        v6 = v4 - 24;
      else
        v6 = 0;
      v103 = v6;
      v7 = v6 >> 4;
      if ((*v101 & 1) != 0)
      {
        v8 = 16;
        v9 = v99;
      }
      else
      {
        v8 = *(_DWORD *)(v3 + 1688);
        if (!v8)
        {
          v18 = 0;
          goto LABEL_22;
        }
        v9 = *(_QWORD **)(v3 + 1680);
      }
      v10 = v8 - 1;
      v11 = v10 & (v7 ^ (v6 >> 9));
      v12 = &v9[13 * v11];
      v13 = *v12;
      if (v6 == *v12)
        goto LABEL_23;
      v14 = 0;
      v15 = 1;
      while (v13 != -4096)
      {
        if (v14)
          v16 = 0;
        else
          v16 = v13 == -8192;
        if (v16)
          v14 = v12;
        v17 = v11 + v15++;
        v11 = v17 & v10;
        v12 = &v9[13 * v11];
        v13 = *v12;
        if (v6 == *v12)
          goto LABEL_23;
      }
      if (v14)
        v18 = v14;
      else
        v18 = v12;
LABEL_22:
      result = sub_1C498DF5C((uint64_t)v101, (uint64_t)&v103, &v103, v18);
      *result = v103;
      result[1] = result + 5;
      result[2] = result + 5;
      result[3] = 8;
      *((_DWORD *)result + 8) = 0;
LABEL_23:
      v103 = v6;
      if ((*(_BYTE *)v3 & 1) != 0)
      {
        v19 = 16;
        v20 = v102;
      }
      else
      {
        v19 = *(_DWORD *)(v3 + 16);
        if (!v19)
        {
          v29 = 0;
          goto LABEL_39;
        }
        v20 = *(_QWORD **)(v3 + 8);
      }
      v21 = v19 - 1;
      v22 = v21 & (v7 ^ (v6 >> 9));
      v23 = &v20[13 * v22];
      v24 = *v23;
      if (v6 == *v23)
        goto LABEL_40;
      v25 = 0;
      v26 = 1;
      while (v24 != -4096)
      {
        if (v25)
          v27 = 0;
        else
          v27 = v24 == -8192;
        if (v27)
          v25 = v23;
        v28 = v22 + v26++;
        v22 = v28 & v21;
        v23 = &v20[13 * v22];
        v24 = *v23;
        if (v6 == *v23)
          goto LABEL_40;
      }
      if (v25)
        v29 = v25;
      else
        v29 = v23;
LABEL_39:
      result = sub_1C498DF5C(v3, (uint64_t)&v103, &v103, v29);
      *result = v103;
      result[1] = result + 5;
      result[2] = result + 5;
      result[3] = 8;
      *((_DWORD *)result + 8) = 0;
LABEL_40:
      v30 = *(_QWORD *)(v6 + 40);
      if (v30 == v6 + 40)
      {
        v31 = 0;
      }
      else
      {
        v31 = v30 - 24;
        if (!v30)
          v31 = 0;
        if (*(unsigned __int8 *)(v31 + 16) - 29 >= 0xB)
          v31 = 0;
      }
      v32 = *(unsigned __int8 *)(v31 + 16);
      if (v32 != 30)
        __asm { BR              X12 }
      if ((*(_DWORD *)(v31 + 20) & 0x7FFFFFF) == 3)
      {
        v33 = *(_QWORD *)(a3 + 48);
        v34 = *(unsigned int *)(a3 + 64);
        if ((_DWORD)v34)
        {
          LODWORD(v35) = (v34 - 1) & (v7 ^ (v6 >> 9));
          v36 = (uint64_t *)(v33 + 16 * v35);
          v37 = *v36;
          if (v6 != *v36)
          {
            v38 = 1;
            do
            {
              if (v37 == -4096)
                goto LABEL_57;
              v39 = v35 + v38++;
              v35 = v39 & (v34 - 1);
              v37 = *(_QWORD *)(v33 + 16 * v35);
            }
            while (v6 != v37);
            v36 = (uint64_t *)(v33 + 16 * v35);
          }
        }
        else
        {
LABEL_57:
          v36 = (uint64_t *)(v33 + 16 * v34);
        }
        if (v30 == v6 + 40)
          goto LABEL_103;
        if (v30)
          v40 = v30 - 24;
        else
          v40 = 0;
        v41 = *(unsigned __int8 *)(v40 + 16);
        v42 = (v41 - 29);
        v43 = **(_QWORD **)(v36[1] + 8);
        if (v41 != 30)
        {
          v44 = 2;
          switch((int)v42)
          {
            case 1:
              __break(1u);
              goto LABEL_169;
            case 2:
              v44 = (*(_DWORD *)(v40 + 20) >> 1) & 0x3FFFFFF;
              goto LABEL_106;
            case 3:
            case 9:
              v44 = (*(_DWORD *)(v40 + 20) & 0x7FFFFFF) - 1;
              goto LABEL_106;
            case 4:
              goto LABEL_66;
            case 7:
              v44 = *(_WORD *)(v40 + 18) & 1;
              goto LABEL_106;
            case 8:
              v44 = 1;
              goto LABEL_66;
            case 10:
              v44 = *(_DWORD *)(v40 + 80) + 1;
LABEL_106:
              if (!v44)
                goto LABEL_103;
              goto LABEL_66;
            default:
              goto LABEL_103;
          }
        }
        if ((*(_DWORD *)(v40 + 20) & 0x7FFFFFF) == 3)
          v44 = 2;
        else
          v44 = 1;
LABEL_66:
        v45 = 0;
        v46 = v44;
LABEL_67:
        v103 = 0;
        v47 = *(unsigned __int8 *)(v40 + 16);
        if (v47 != 30)
          __asm { BR              X9 }
        v48 = (uint64_t *)(v40 - 32 - 32 * v45);
        while (1)
        {
          v49 = *v48;
          v103 = v49;
          if (v43 == v49)
          {
LABEL_97:
            if (++v45 == v46)
              break;
            goto LABEL_67;
          }
          if ((*(_BYTE *)v3 & 1) != 0)
          {
            v50 = 16;
            v51 = v102;
          }
          else
          {
            v50 = *(_DWORD *)(v3 + 16);
            if (!v50)
            {
              v60 = 0;
              goto LABEL_87;
            }
            v51 = *(_QWORD **)(v3 + 8);
          }
          v52 = v50 - 1;
          v53 = v52 & ((v49 >> 4) ^ (v49 >> 9));
          v54 = &v51[13 * v53];
          v55 = *v54;
          if (v49 == *v54)
            goto LABEL_88;
          v56 = 0;
          v57 = 1;
          while (v55 != -4096)
          {
            if (v56)
              v58 = 0;
            else
              v58 = v55 == -8192;
            if (v58)
              v56 = v54;
            v59 = v53 + v57++;
            v53 = v59 & v52;
            v54 = &v51[13 * v53];
            v55 = *v54;
            if (v49 == *v54)
              goto LABEL_88;
          }
          if (v56)
            v60 = v56;
          else
            v60 = v54;
LABEL_87:
          v54 = sub_1C498DF5C(v3, (uint64_t)&v103, &v103, v60);
          *v54 = v103;
          v54[1] = v54 + 5;
          v54[2] = v54 + 5;
          v54[3] = 8;
          *((_DWORD *)v54 + 8) = 0;
LABEL_88:
          result = sub_1C4774094((llvm::SmallPtrSetImplBase *)(v54 + 1), v6);
          v61 = *(unsigned int *)(a3 + 64);
          if (!(_DWORD)v61)
            goto LABEL_97;
          v62 = *(_QWORD *)(a3 + 48);
          LODWORD(v63) = ((v103 >> 4) ^ (v103 >> 9)) & (v61 - 1);
          v64 = (uint64_t *)(v62 + 16 * v63);
          v65 = *v64;
          if (v103 != *v64)
          {
            v66 = 1;
            while (v65 != -4096)
            {
              v67 = v63 + v66++;
              v63 = v67 & (v61 - 1);
              v65 = *(_QWORD *)(v62 + 16 * v63);
              if (v103 == v65)
              {
                v64 = (uint64_t *)(v62 + 16 * v63);
                goto LABEL_94;
              }
            }
            goto LABEL_97;
          }
LABEL_94:
          if (v64 != (uint64_t *)(v62 + 16 * v61))
          {
            v68 = v64[1];
            if (v68)
            {
              v48 = *(uint64_t **)(v68 + 8);
              if (v48)
                continue;
            }
          }
          goto LABEL_97;
        }
      }
LABEL_103:
      v4 = *(_QWORD *)(v4 + 8);
    }
    while (v4 != v100);
  }
  v44 = *(_DWORD *)v3;
  if (*(_DWORD *)v3 <= 1u)
  {
    if (v44)
    {
      v97 = v3 + 8;
      v98 = 16;
    }
    else
    {
      v97 = *(_QWORD *)(v3 + 8);
      v98 = *(_DWORD *)(v3 + 16);
    }
    v70 = (uint64_t *)(v97 + 104 * v98);
    v42 = (uint64_t)v70;
  }
  else
  {
    if ((v44 & 1) != 0)
    {
      v69 = (uint64_t *)(v3 + 8);
      v42 = v3 + 1672;
    }
    else
    {
      v69 = *(uint64_t **)(v3 + 8);
      v96 = *(_DWORD *)(v3 + 16);
      if (!v96)
      {
        v72 = 0;
        v70 = *(uint64_t **)(v3 + 8);
        v71 = v70;
        goto LABEL_126;
      }
      v42 = (uint64_t)&v69[13 * v96];
    }
    v44 = *(_DWORD *)v3 & 1;
    v70 = v69;
    while (*v70 == -4096 || *v70 == -8192)
    {
      v70 += 13;
      if (v70 == (uint64_t *)v42)
      {
LABEL_169:
        v70 = (uint64_t *)v42;
        break;
      }
    }
  }
  if (v44)
  {
    v71 = (uint64_t *)(v3 + 8);
    v72 = 16;
  }
  else
  {
    v71 = *(uint64_t **)(v3 + 8);
    v72 = *(_DWORD *)(v3 + 16);
  }
  v69 = (uint64_t *)v42;
LABEL_126:
  v73 = &v71[13 * v72];
  while (v70 != v73)
  {
    v74 = v70[2];
    v75 = *v70;
    v76 = 24;
    if (v74 == v70[1])
      v76 = 28;
    v77 = *(unsigned int *)((char *)v70 + v76);
    if ((_DWORD)v77)
    {
      v78 = 8 * v77;
      v79 = (unint64_t *)v70[2];
      while (*v79 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v79;
        v78 -= 8;
        if (!v78)
          goto LABEL_159;
      }
    }
    else
    {
      v79 = (unint64_t *)v70[2];
    }
    v80 = (unint64_t *)(v74 + 8 * v77);
    if (v79 == v80)
      goto LABEL_159;
LABEL_136:
    v103 = 0;
    v81 = *v79;
    v103 = *v79;
    if ((*(_BYTE *)(v3 + 1672) & 1) != 0)
    {
      v82 = 16;
      v83 = v3 + 1680;
    }
    else
    {
      v82 = *(_DWORD *)(v3 + 1688);
      if (!v82)
      {
        v92 = 0;
        goto LABEL_152;
      }
      v83 = *(_QWORD *)(v3 + 1680);
    }
    v84 = v82 - 1;
    v85 = v84 & ((v81 >> 4) ^ (v81 >> 9));
    v86 = (_QWORD *)(v83 + 104 * v85);
    v87 = *v86;
    if (v81 == *v86)
      goto LABEL_153;
    v88 = 0;
    v89 = 1;
    while (v87 != -4096)
    {
      if (v88)
        v90 = 0;
      else
        v90 = v87 == -8192;
      if (v90)
        v88 = v86;
      v91 = v85 + v89++;
      v85 = v91 & v84;
      v86 = (_QWORD *)(v83 + 104 * v85);
      v87 = *v86;
      if (v81 == *v86)
        goto LABEL_153;
    }
    if (v88)
      v92 = v88;
    else
      v92 = v86;
LABEL_152:
    v86 = sub_1C498DF5C(v3 + 1672, (uint64_t)&v103, &v103, v92);
    *v86 = v103;
    v86[1] = v86 + 5;
    v86[2] = v86 + 5;
    v86[3] = 8;
    *((_DWORD *)v86 + 8) = 0;
LABEL_153:
    result = sub_1C4774094((llvm::SmallPtrSetImplBase *)(v86 + 1), v75);
    v93 = v79 + 1;
    while (v93 != v80)
    {
      v94 = *v93++;
      if (v94 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v79 = v93 - 1;
        goto LABEL_136;
      }
    }
LABEL_159:
    v95 = v70 + 13;
    v70 = v69;
    if (v95 != v69)
    {
      v70 = v95;
      while ((*v70 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v70 += 13;
        if (v70 == v69)
        {
          v70 = v69;
          break;
        }
      }
    }
  }
  return result;
}

uint64_t sub_1C560D014(uint64_t a1, unsigned int *a2)
{
  unsigned int v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  void **v8;
  uint64_t v9;
  uint64_t i;

  v4 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v5 = a1 + 8;
    v6 = 16;
  }
  else
  {
    v6 = *(_DWORD *)(a1 + 16);
    if (!v6)
      goto LABEL_10;
    v5 = *(_QWORD *)(a1 + 8);
  }
  v7 = 104 * v6;
  v8 = (void **)(v5 + 16);
  do
  {
    v9 = (uint64_t)*(v8 - 2);
    if (v9 != -4096 && v9 != -8192 && *v8 != *(v8 - 1))
      free(*v8);
    v8 += 13;
    v7 -= 104;
  }
  while (v7);
  v4 = *(_DWORD *)a1;
LABEL_10:
  if ((v4 & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 8), 8);
  *(_QWORD *)a1 = 1;
  for (i = 8; i != 1672; i += 104)
    *(_QWORD *)(a1 + i) = -4096;
  sub_1C560D0EC((unsigned int *)a1, a2);
  return a1;
}

void sub_1C560D0EC(unsigned int *a1, unsigned int *a2)
{
  unsigned int *v3;
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  uint64_t v7;
  unsigned int *v8;
  uint64_t v9;
  unsigned int *v10;
  unsigned int *v11;
  uint64_t v12;
  void *v13;
  void *v14;
  void *v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int *v18;
  unint64_t v19;
  unsigned int *v20;
  uint64_t v21;
  __int128 *v22;
  uint64_t v23;
  unsigned int *v24;
  const void *v25;
  const void *v26;
  uint64_t v27;
  unsigned int *v28;
  void *v29;
  unsigned int *v30;
  int *v31;
  unsigned int *v32;
  const void *v33;
  const void *v34;
  uint64_t v35;
  int *v36;
  int *v37;
  int *v38;
  unsigned int *v39;
  int *v40;
  uint64_t v41;
  __int128 v42;
  _BYTE *v43;
  unsigned int v44;
  int v45;
  unsigned int v46;
  _BYTE v47[72];

  v3 = a1;
  v4 = *a2;
  *a2 = *a1 & 0xFFFFFFFE | *a2 & 1;
  v5 = a1[1];
  *a1 = v4 & 0xFFFFFFFE | *a1 & 1;
  a1[1] = a2[1];
  a2[1] = v5;
  v6 = *a2;
  if ((*a1 & 1) != 0)
  {
    if ((v6 & 1) == 0)
    {
      v8 = a2;
      goto LABEL_7;
    }
    v19 = 0;
    while (1)
    {
      v20 = &v3[v19];
      v22 = (__int128 *)&a2[v19 + 2];
      v21 = *(_QWORD *)v22;
      v23 = *(_QWORD *)&v3[v19 + 2];
      if (v23 != -4096 && v23 != -8192 && v21 != -4096 && v21 != -8192)
      {
        v24 = &v3[v19];
        v25 = *(const void **)&v3[v19 + 4];
        *(_QWORD *)&v42 = *(_QWORD *)&v3[v19 + 2];
        *((_QWORD *)&v42 + 1) = v47;
        v26 = *(const void **)&v3[v19 + 6];
        if (v26 == v25)
        {
          v43 = v47;
          v27 = v24[9];
          if ((_DWORD)v27)
            memmove(v47, v26, 8 * v27);
        }
        else
        {
          v43 = *(_BYTE **)&v3[v19 + 6];
          *((_QWORD *)v24 + 3) = v25;
          LODWORD(v27) = v24[9];
          v21 = *(_QWORD *)v22;
        }
        v28 = &v3[v19];
        v44 = v3[v19 + 8];
        v45 = v27;
        v46 = v3[v19 + 10];
        *((_QWORD *)v28 + 4) = 8;
        v28[10] = 0;
        *((_QWORD *)v20 + 1) = v21;
        if (a2 != v3)
        {
          llvm::SmallPtrSetImplBase::MoveFrom((uint64_t)&v3[v19 + 4], 8, (double *)&a2[v19 + 4]);
          v23 = v42;
        }
        *(_QWORD *)v22 = v23;
        if (v22 != &v42)
          llvm::SmallPtrSetImplBase::MoveFrom((uint64_t)&a2[v19 + 4], 8, (double *)&v42 + 1);
        v29 = v43;
        if (v43 == *((_BYTE **)&v42 + 1))
          goto LABEL_44;
        goto LABEL_43;
      }
      *((_QWORD *)v20 + 1) = v21;
      *(_QWORD *)v22 = v23;
      if ((v23 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        if ((v21 | 0x1000) == 0xFFFFFFFFFFFFF000)
          goto LABEL_44;
        v30 = &v3[v19];
        v31 = (int *)&a2[v19];
        v32 = &v3[v19 + 12];
        *(_QWORD *)&v3[v19 + 4] = v32;
        v33 = *(const void **)&a2[v19 + 4];
        v34 = *(const void **)&a2[v19 + 6];
        if (v34 == v33)
        {
          *((_QWORD *)v30 + 3) = v32;
          v35 = v31[9];
          v33 = (const void *)*((_QWORD *)v31 + 3);
          if ((_DWORD)v35)
          {
            memmove(v32, v33, 8 * v35);
            v34 = (const void *)*((_QWORD *)v31 + 2);
            v33 = (const void *)*((_QWORD *)v31 + 3);
          }
        }
        else
        {
          *((_QWORD *)v30 + 3) = v34;
          *((_QWORD *)v31 + 3) = v33;
          v34 = v33;
        }
        v36 = (int *)&a2[v19];
        v37 = (int *)&v3[v19];
      }
      else
      {
        v38 = (int *)&a2[v19];
        v39 = &v3[v19];
        v40 = (int *)&a2[v19 + 12];
        *(_QWORD *)&a2[v19 + 4] = v40;
        v33 = *(const void **)&v3[v19 + 4];
        v34 = *(const void **)&v3[v19 + 6];
        if (v34 == v33)
        {
          *((_QWORD *)v38 + 3) = v40;
          v41 = v39[9];
          v33 = (const void *)*((_QWORD *)v39 + 3);
          if ((_DWORD)v41)
          {
            memmove(v40, v33, 8 * v41);
            v34 = (const void *)*((_QWORD *)v39 + 2);
            v33 = (const void *)*((_QWORD *)v39 + 3);
          }
        }
        else
        {
          *((_QWORD *)v38 + 3) = v34;
          *((_QWORD *)v39 + 3) = v33;
          v34 = v33;
        }
        v36 = (int *)&v3[v19];
        v37 = (int *)&a2[v19];
      }
      *((_QWORD *)v37 + 4) = *((_QWORD *)v36 + 4);
      v37[10] = v36[10];
      *((_QWORD *)v36 + 4) = 8;
      v36[10] = 0;
      if (v33 != v34)
      {
        v29 = (void *)v33;
LABEL_43:
        free(v29);
      }
LABEL_44:
      v19 += 26;
      if (v19 == 416)
        return;
    }
  }
  if ((v6 & 1) == 0)
  {
    v7 = *((_QWORD *)a1 + 1);
    *((_QWORD *)a1 + 1) = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v7;
    LODWORD(v7) = a1[4];
    a1[4] = a2[4];
    a2[4] = v7;
    return;
  }
  v6 = *a1;
  v8 = a1;
  v3 = a2;
LABEL_7:
  v9 = 0;
  v42 = *(_OWORD *)(v8 + 2);
  *v8 = v6 | 1;
  do
  {
    v10 = &v8[v9];
    v11 = &v3[v9];
    v12 = *(_QWORD *)&v3[v9 + 2];
    *(_QWORD *)&v8[v9 + 2] = v12;
    if ((v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v13 = v10 + 12;
      *((_QWORD *)v10 + 2) = v10 + 12;
      v14 = (void *)*((_QWORD *)v11 + 2);
      v15 = (void *)*((_QWORD *)v11 + 3);
      if (v15 == v14)
      {
        *((_QWORD *)v10 + 3) = v13;
        v16 = v3[v9 + 9];
        v14 = (void *)*((_QWORD *)v11 + 3);
        if ((_DWORD)v16)
        {
          memmove(v13, v14, 8 * v16);
          v15 = (void *)*((_QWORD *)v11 + 2);
          v14 = (void *)*((_QWORD *)v11 + 3);
        }
      }
      else
      {
        *((_QWORD *)v10 + 3) = v15;
        *((_QWORD *)v11 + 3) = v14;
        v15 = v14;
      }
      v17 = &v3[v9];
      v18 = &v8[v9];
      *((_QWORD *)v18 + 4) = *(_QWORD *)&v3[v9 + 8];
      v18[10] = v3[v9 + 10];
      *((_QWORD *)v17 + 4) = 8;
      v17[10] = 0;
      if (v14 != v15)
        free(v14);
    }
    v9 += 26;
  }
  while (v9 != 416);
  *v3 &= ~1u;
  *(_OWORD *)(v3 + 2) = v42;
}

_QWORD *sub_1C560D488(_QWORD *result)
{
  int v1;
  uint64_t v2;
  _QWORD *v3;
  _QWORD *v4;
  int v5;

  v1 = *(_DWORD *)result;
  if (*(_DWORD *)result > 1u || *((_DWORD *)result + 1))
  {
    if ((v1 & 1) != 0)
    {
      v3 = result + 1;
      v4 = result + 17;
    }
    else
    {
      v2 = *((unsigned int *)result + 4);
      if (((2 * v1) & 0xFFFFFFFC) < v2 && v2 >= 0x41)
        return sub_1C560D504(result);
      if (!(_DWORD)v2)
      {
        v5 = 0;
LABEL_10:
        *(_DWORD *)result = v5;
        *((_DWORD *)result + 1) = 0;
        return result;
      }
      v3 = (_QWORD *)result[1];
      v4 = &v3[2 * v2];
    }
    do
    {
      *v3 = -4096;
      v3 += 2;
    }
    while (v3 != v4);
    v5 = *(_DWORD *)result & 1;
    goto LABEL_10;
  }
  return result;
}

_QWORD *sub_1C560D504(_QWORD *result)
{
  _QWORD *v1;
  unsigned int v2;
  char v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;

  v1 = result;
  v2 = *(_DWORD *)result;
  v3 = __clz((*(_DWORD *)result >> 1) - 1);
  if ((v3 & 0x3E) == 0x1C)
    v4 = 64;
  else
    v4 = 1 << (33 - v3);
  if (v2 >= 2)
    v5 = v4;
  else
    v5 = 0;
  if ((v2 & 1) != 0 && v5 < 9)
  {
    v6 = result + 1;
    *result = 1;
    v7 = result + 17;
    goto LABEL_14;
  }
  if ((v2 & 1) != 0)
    return sub_1C6280274(v1, v5);
  if (v5 != *((_DWORD *)result + 4))
  {
    MEMORY[0x1CAA32FB4](result[1], 8);
    return sub_1C6280274(v1, v5);
  }
  *result = 0;
  if (!v5)
    return result;
  v6 = (_QWORD *)result[1];
  v7 = &v6[2 * v5];
  do
  {
LABEL_14:
    *v6 = -4096;
    v6 += 2;
  }
  while (v6 != v7);
  return result;
}

void sub_1C560D5C8(uint64_t a1, void *a2, llvm::SmallPtrSetImplBase *a3, uint64_t a4)
{
  uint64_t v7;
  unsigned int v8;
  char *v9;
  int v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  int v23;
  uint64_t *v24;
  uint64_t v25;
  int v26;
  char *v27;
  uint64_t *v28;
  unint64_t v29;
  char *v30;
  uint64_t v31;
  void *v32;
  uint64_t v33;
  uint64_t v34;
  char *v35;
  char *v36;
  uint64_t v37;
  int v38;
  _QWORD v39[9];
  void *v40;
  uint64_t v41;
  uint64_t v42;
  void *v43[2];
  _BYTE v44[40];
  _QWORD **v45;
  _QWORD *v46[2];
  _DWORD *v47;
  uint64_t v48;
  _QWORD v49[5];

  v49[3] = *MEMORY[0x1E0C80C00];
  v7 = *(_QWORD *)(a4 + 3352) + 32 * sub_1C560DA80(a4, a2);
  v39[8] = *(_QWORD *)v7;
  v40 = &v42;
  v41 = 0x100000000;
  if (*(_DWORD *)(v7 + 16))
  {
    sub_1C560EB98((uint64_t)&v40, v7 + 8);
    v8 = v41;
  }
  else
  {
    v8 = 0;
  }
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x500000000;
  v47 = v49;
  v48 = 0x500000000;
  v35 = (char *)v39;
  v36 = (char *)v39;
  v37 = 8;
  v38 = 0;
  if (v8)
  {
    v9 = (char *)v40;
    v30 = (char *)v40 + 4 * v8;
    do
    {
      v43[0] = v44;
      v43[1] = (void *)0xA00000000;
      v46[0] = 0;
      v46[1] = 0;
      v45 = v46;
      v10 = *(_DWORD *)v9;
      v11 = v48;
      if (v48 >= (unint64_t)HIDWORD(v48))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v47, (uint64_t)v49, v48 + 1, 4);
        v11 = v48;
      }
      v47[v11] = v10;
      v12 = __CFADD__((_DWORD)v48, 1);
      v13 = v48 + 1;
      LODWORD(v48) = v48 + 1;
      if (!v12)
      {
        do
        {
          v14 = v47[v13 - 1];
          LODWORD(v48) = v13 - 1;
          v15 = *(_QWORD *)&v14 & 0xFFFFFFLL;
          LODWORD(v31) = v14 & 0xFFFFFF;
          if ((sub_1C560D96C((uint64_t)v43, (unsigned int *)&v31) & 0x100000000) != 0)
          {
            v16 = *(_QWORD *)(a4 + 3352) + 32 * v15;
            v17 = *(_QWORD *)v16;
            v31 = *(_QWORD *)v16;
            v32 = &v34;
            v33 = 0x100000000;
            if (*(_DWORD *)(v16 + 16))
            {
              sub_1C560EB98((uint64_t)&v32, v16 + 8);
              v17 = v31;
            }
            v18 = *(_QWORD *)(v17 + 40);
            if (v18 == v17 + 40)
            {
              v20 = 0;
            }
            else
            {
              if (v18)
                v19 = v18 - 24;
              else
                v19 = 0;
              if (*(unsigned __int8 *)(v19 + 16) - 29 >= 0xB)
                v20 = 0;
              else
                v20 = v19;
            }
            sub_1C4774094(a3, v17);
            v21 = *(unsigned __int8 *)(v20 + 16);
            if (v21 == 30 && v20)
            {
              v22 = *(_QWORD *)(v20 - 96);
            }
            else
            {
              if (v21 == 32 && v20)
              {
                v23 = *(_DWORD *)(v20 + 20);
                if ((v23 & 0x40000000) != 0)
                  v24 = *(uint64_t **)(v20 - 8);
                else
                  v24 = (uint64_t *)(v20 - 32 * (v23 & 0x7FFFFFF));
              }
              else
              {
                if (v21 == 31)
                  v25 = v20;
                else
                  v25 = 0;
                v26 = *(_DWORD *)(v25 + 20);
                if ((v26 & 0x40000000) != 0)
                  v24 = *(uint64_t **)(v25 - 8);
                else
                  v24 = (uint64_t *)(v25 - 32 * (v26 & 0x7FFFFFF));
              }
              v22 = *v24;
            }
            v27 = (char *)sub_1C477672C((uint64_t)&v35, v22);
            if (v36 == v35)
              v28 = (uint64_t *)((char *)&v37 + 4);
            else
              v28 = &v37;
            if (v27 == &v36[8 * *(unsigned int *)v28])
            {
              v29 = *(unsigned int *)(a1 + 8);
              if (v29 >= *(unsigned int *)(a1 + 12))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v29 + 1, 8);
                v29 = *(unsigned int *)(a1 + 8);
              }
              *(_QWORD *)(*(_QWORD *)a1 + 8 * v29) = v22;
              ++*(_DWORD *)(a1 + 8);
              sub_1C4774094((llvm::SmallPtrSetImplBase *)&v35, v22);
            }
            sub_1C4C940F0((unsigned int *)&v47, v32, (_BYTE *)v32 + 4 * v33);
            if (v32 != &v34)
              free(v32);
          }
          v13 = v48;
        }
        while ((_DWORD)v48);
      }
      sub_1C47655E8((uint64_t)&v45, v46[0]);
      if (v43[0] != v44)
        free(v43[0]);
      v9 += 4;
    }
    while (v9 != v30);
    if (v36 != v35)
      free(v36);
  }
  if (v47 != (_DWORD *)v49)
    free(v47);
  if (v40 != &v42)
    free(v40);
}

unint64_t sub_1C560D96C(uint64_t a1, unsigned int *a2)
{
  unsigned __int8 v4;
  _DWORD *v6;
  uint64_t v7;
  unsigned int v8;
  uint64_t v9;
  _DWORD *v10;
  unsigned int *v11;

  if (*(_QWORD *)(a1 + 72))
  {
    sub_1C4778ED8((uint64_t **)(a1 + 56), a2, a2);
    return ((unint64_t)v4 << 32) | 1;
  }
  else
  {
    v6 = *(_DWORD **)a1;
    v7 = *(unsigned int *)(a1 + 8);
    v8 = *a2;
    if (!(_DWORD)v7)
      goto LABEL_11;
    v9 = 4 * v7;
    v10 = *(_DWORD **)a1;
    while (*v10 != v8)
    {
      ++v10;
      v9 -= 4;
      if (!v9)
        goto LABEL_10;
    }
    if (v9)
      return 1;
LABEL_10:
    if (v7 > 9)
    {
      do
      {
        v11 = (unsigned int *)(*(_QWORD *)a1 + 4 * v7 - 4);
        sub_1C4778ED8((uint64_t **)(a1 + 56), v11, v11);
        LODWORD(v7) = *(_DWORD *)(a1 + 8) - 1;
        *(_DWORD *)(a1 + 8) = v7;
      }
      while ((_DWORD)v7);
      sub_1C4778ED8((uint64_t **)(a1 + 56), a2, a2);
    }
    else
    {
LABEL_11:
      if (v7 >= *(_DWORD *)(a1 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v7 + 1, 4);
        v6 = *(_DWORD **)a1;
        v7 = *(unsigned int *)(a1 + 8);
      }
      v6[v7] = v8;
      ++*(_DWORD *)(a1 + 8);
    }
    return 0x100000001;
  }
}

uint64_t sub_1C560DA80(uint64_t a1, void *a2)
{
  int v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  void *v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t *v21;
  _QWORD *v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unsigned int v27;
  char *v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  int v32;
  int v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t *v44;
  uint64_t v45;
  int v46;
  int v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int8 v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  unint64_t v55;
  unint64_t *v56;
  unint64_t *v57;
  unint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  unsigned int v61;
  _QWORD *v62;
  int v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  uint64_t v71;
  __int128 v72;
  unsigned int v74;
  uint64_t v75;
  void *v76;
  uint64_t v77;
  _QWORD v78[2];
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  _QWORD *v82;
  _QWORD v83[16];
  void *v84;
  void *v85;
  void *v86;
  uint64_t v87;
  _QWORD v88[26];

  v88[24] = *MEMORY[0x1E0C80C00];
  v84 = a2;
  v3 = *(_DWORD *)(a1 + 3688);
  v4 = a1 + 3696;
  if ((v3 & 1) != 0)
  {
    v6 = 8;
    v5 = a1 + 3696;
  }
  else
  {
    v5 = *(_QWORD *)(a1 + 3696);
    v6 = *(_DWORD *)(a1 + 3704);
    if (!v6)
    {
      v15 = 0;
      goto LABEL_14;
    }
  }
  v7 = v6 - 1;
  LODWORD(v8) = (v6 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v9 = v5 + 16 * v8;
  v10 = *(void **)v9;
  if (*(void **)v9 != a2)
  {
    v11 = 1;
    while (v10 != (void *)-4096)
    {
      v12 = v8 + v11++;
      v8 = v12 & v7;
      v10 = *(void **)(v5 + 16 * v8);
      if (v10 == a2)
      {
        v9 = v5 + 16 * v8;
        goto LABEL_8;
      }
    }
    if ((v3 & 1) != 0)
    {
      v15 = 8;
      v5 = a1 + 3696;
    }
    else
    {
      v5 = *(_QWORD *)(a1 + 3696);
      v15 = *(unsigned int *)(a1 + 3704);
    }
LABEL_14:
    v9 = v5 + 16 * v15;
    if ((v3 & 1) != 0)
      goto LABEL_15;
LABEL_9:
    v13 = *(_QWORD *)(a1 + 3696);
    v14 = *(unsigned int *)(a1 + 3704);
    goto LABEL_16;
  }
LABEL_8:
  if ((v3 & 1) == 0)
    goto LABEL_9;
LABEL_15:
  v14 = 8;
  v13 = a1 + 3696;
LABEL_16:
  if (v13 + 16 * v14 != v9)
    return *(unsigned int *)(v9 + 8);
  v16 = *(unsigned int *)(a1 + 3360);
  *((_DWORD *)sub_1C560E3D0(a1 + 3688, &v84) + 2) = v16;
  v85 = v84;
  v86 = v88;
  v87 = 0x100000000;
  sub_1C560E074(a1 + 3352, (unint64_t)&v85);
  if (v86 != v88)
    free(v86);
  v17 = sub_1C560E9C0(a1, (uint64_t)v84);
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v19 = 16;
    v18 = a1 + 8;
  }
  else
  {
    v18 = *(_QWORD *)(a1 + 8);
    v19 = *(_DWORD *)(a1 + 16);
  }
  v20 = (uint64_t *)(v18 + 104 * v19);
  v21 = v17 + 1;
  if (v20 == v17)
    v21 = 0;
  if (*((_DWORD *)v21 + 5) != *((_DWORD *)v21 + 6))
  {
    v22 = (_QWORD *)v21[1];
    v23 = 16;
    if (v22 == (_QWORD *)*v21)
      v23 = 20;
    v24 = *(unsigned int *)((char *)v21 + v23);
    v25 = &v22[v24];
    if ((_DWORD)v24)
    {
      v26 = 8 * v24;
      while (*v22 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v22;
        v26 -= 8;
        if (!v26)
        {
          v22 = v25;
          break;
        }
      }
    }
    *(_QWORD *)&v80 = v84;
    *((_QWORD *)&v80 + 1) = v22;
    v81 = (uint64_t)v25;
    v82 = v25;
    v83[0] = v25;
    v85 = &v87;
    v86 = (void *)0x500000000;
    sub_1C560EA84((char *)&v85, 1uLL, &v80);
    *(_QWORD *)&v80 = v83;
    *((_QWORD *)&v80 + 1) = v83;
    v81 = 16;
    LODWORD(v82) = 0;
    v27 = v86;
    if ((_DWORD)v86)
    {
      v74 = v16;
      do
      {
LABEL_34:
        v28 = (char *)v85 + 40 * v27;
        if (*((_QWORD *)v28 - 4) != *((_QWORD *)v28 - 2))
        {
          while (1)
          {
            v79 = 0;
            v29 = **((_QWORD **)v28 - 4);
            v79 = v29;
            v30 = *(_DWORD *)(a1 + 3688);
            if ((v30 & 1) != 0)
            {
              v32 = 8;
              v31 = v4;
            }
            else
            {
              v31 = *(_QWORD *)(a1 + 3696);
              v32 = *(_DWORD *)(a1 + 3704);
              if (!v32)
              {
                v34 = 0;
                goto LABEL_46;
              }
            }
            v33 = v32 - 1;
            LODWORD(v34) = (v32 - 1) & ((v29 >> 4) ^ (v29 >> 9));
            v35 = (uint64_t *)(v31 + 16 * v34);
            v36 = *v35;
            if (*v35 == v29)
              goto LABEL_47;
            v37 = 1;
            while (v36 != -4096)
            {
              v38 = v34 + v37++;
              v34 = v38 & v33;
              v36 = *(_QWORD *)(v31 + 16 * v34);
              if (v36 == v29)
                goto LABEL_46;
            }
            if ((v30 & 1) != 0)
            {
              v31 = v4;
              v34 = 8;
            }
            else
            {
              v31 = *(_QWORD *)(a1 + 3696);
              v34 = *(unsigned int *)(a1 + 3704);
            }
LABEL_46:
            v35 = (uint64_t *)(v31 + 16 * v34);
LABEL_47:
            if ((v30 & 1) != 0)
            {
              if ((uint64_t *)(a1 + 3824) == v35)
              {
LABEL_58:
                sub_1C4774094((llvm::SmallPtrSetImplBase *)&v80, v29);
                if (v48)
                {
                  v59 = sub_1C560E9C0(a1, v79);
                  if ((*(_BYTE *)a1 & 1) != 0)
                  {
                    v60 = a1 + 8;
                    v61 = 16;
                  }
                  else
                  {
                    v60 = *(_QWORD *)(a1 + 8);
                    v61 = *(_DWORD *)(a1 + 16);
                  }
                  if ((uint64_t *)(v60 + 104 * v61) == v59)
                    v62 = 0;
                  else
                    v62 = v59 + 1;
                  v63 = *(_DWORD *)(a1 + 3360);
                  *((_DWORD *)sub_1C560E3D0(a1 + 3688, &v79) + 2) = v63;
                  v75 = v79;
                  v76 = v78;
                  v77 = 0x100000000;
                  sub_1C560E074(a1 + 3352, (unint64_t)&v75);
                  if (v76 != v78)
                    free(v76);
                  v64 = (_QWORD *)v62[1];
                  v65 = 16;
                  if (v64 == (_QWORD *)*v62)
                    v65 = 20;
                  v66 = *(unsigned int *)((char *)v62 + v65);
                  v67 = &v64[v66];
                  if ((_DWORD)v66)
                  {
                    v68 = 8 * v66;
                    while (*v64 >= 0xFFFFFFFFFFFFFFFELL)
                    {
                      ++v64;
                      v68 -= 8;
                      if (!v68)
                      {
                        v64 = v67;
                        break;
                      }
                    }
                  }
                  v75 = v79;
                  v76 = v64;
                  v77 = (uint64_t)v67;
                  v78[0] = v67;
                  v78[1] = v67;
                  v69 = sub_1C4A20B14((uint64_t)&v85, (unint64_t)&v75, 1);
                  v70 = (char *)v85 + 40 * v86;
                  v71 = *(_QWORD *)(v69 + 32);
                  v72 = *(_OWORD *)(v69 + 16);
                  *(_OWORD *)v70 = *(_OWORD *)v69;
                  *((_OWORD *)v70 + 1) = v72;
                  *((_QWORD *)v70 + 4) = v71;
                  v27 = (_DWORD)v86 + 1;
                  goto LABEL_90;
                }
                goto LABEL_69;
              }
              v41 = *((_QWORD *)v28 - 5);
              LODWORD(v40) = 8;
              v39 = v4;
            }
            else
            {
              v39 = *(_QWORD *)(a1 + 3696);
              v40 = *(unsigned int *)(a1 + 3704);
              if ((uint64_t *)(v39 + 16 * v40) == v35)
                goto LABEL_58;
              v41 = *((_QWORD *)v28 - 5);
              if (!(_DWORD)v40)
              {
                v42 = 0;
LABEL_63:
                v44 = (uint64_t *)(v39 + 16 * v42);
                goto LABEL_64;
              }
            }
            v43 = v40 - 1;
            LODWORD(v40) = ((v41 >> 4) ^ (v41 >> 9)) & (v40 - 1);
            v44 = (uint64_t *)(v39 + 16 * v40);
            v45 = *v44;
            if (*v44 != v41)
            {
              v46 = 1;
              while (v45 != -4096)
              {
                v47 = v40 + v46++;
                v40 = v47 & v43;
                v45 = *(_QWORD *)(v39 + 16 * v40);
                if (v45 == v41)
                {
                  v44 = (uint64_t *)(v39 + 16 * v40);
                  goto LABEL_64;
                }
              }
              if ((v30 & 1) != 0)
              {
                v39 = v4;
                v42 = 8;
              }
              else
              {
                v39 = *(_QWORD *)(a1 + 3696);
                v42 = *(unsigned int *)(a1 + 3704);
              }
              goto LABEL_63;
            }
LABEL_64:
            v49 = *((unsigned int *)v44 + 2);
            v50 = *(_QWORD *)(a1 + 3352);
            v51 = sub_1C560E120(v29, v41, *(_QWORD *)(a1 + 3344));
            v52 = v50 + 32 * v49;
            v53 = v52 + 8;
            v54 = *((_DWORD *)v35 + 2);
            v55 = *(unsigned int *)(v52 + 16);
            if (v55 >= *(unsigned int *)(v52 + 20))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(v52 + 8, v52 + 24, v55 + 1, 4);
              v55 = *(unsigned int *)(v53 + 8);
            }
            *(_DWORD *)(*(_QWORD *)v53 + 4 * v55) = v54 & 0xFFFFFF | (v51 << 24);
            ++*(_DWORD *)(v53 + 8);
            v56 = (unint64_t *)*((_QWORD *)v28 - 3);
            v57 = (unint64_t *)(*((_QWORD *)v28 - 4) + 8);
            do
            {
              *((_QWORD *)v28 - 4) = v57;
              if (v57 == v56)
                break;
              v58 = *v57++;
            }
            while (v58 > 0xFFFFFFFFFFFFFFFDLL);
LABEL_69:
            if (*((_QWORD *)v28 - 4) == *((_QWORD *)v28 - 2))
            {
              v27 = v86;
              if ((_DWORD)v86)
                goto LABEL_34;
              goto LABEL_93;
            }
          }
        }
        --v27;
LABEL_90:
        LODWORD(v86) = v27;
      }
      while (v27);
LABEL_93:
      v16 = v74;
      if (*((_QWORD *)&v80 + 1) != (_QWORD)v80)
        free(*((void **)&v80 + 1));
    }
    if (v85 != &v87)
      free(v85);
  }
  return v16;
}

uint64_t sub_1C560E074(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t result;
  unint64_t v8;
  unint64_t v9;
  unint64_t v11;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v8 = v4 + 1;
    v9 = v5 + 32 * v4;
    if (v5 <= a2 && v9 > a2)
    {
      v11 = a2 - v5;
      sub_1C560E894(a1, v8);
      v5 = *(_QWORD *)a1;
      a2 = *(_QWORD *)a1 + v11;
    }
    else
    {
      sub_1C560E894(a1, v8);
      v5 = *(_QWORD *)a1;
    }
  }
  v6 = (_QWORD *)(v5 + 32 * *(unsigned int *)(a1 + 8));
  *v6 = *(_QWORD *)a2;
  v6[2] = 0x100000000;
  v6[1] = v6 + 3;
  result = (uint64_t)(v6 + 1);
  if (*(_DWORD *)(a2 + 16))
    result = sub_1C4AA1E04(result, (const void **)(a2 + 8));
  ++*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1C560E120(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;

  v3 = *(_QWORD *)(a1 + 40);
  if (v3 == a1 + 40)
  {
LABEL_19:
    LOBYTE(v11) = -1;
  }
  else
  {
    if (v3)
      v4 = v3 - 24;
    else
      v4 = 0;
    v5 = *(unsigned __int8 *)(v4 + 16);
    v6 = v5 - 29;
    if (v5 != 30)
    {
      v9 = 2;
      LOBYTE(v11) = -1;
      switch(v6)
      {
        case 0:
        case 5:
        case 6:
          return v11;
        case 1:
          __break(1u);
          JUMPOUT(0x1C560E274);
        case 2:
          v9 = (*(_DWORD *)(v4 + 20) >> 1) & 0x3FFFFFF;
          goto LABEL_18;
        case 3:
        case 9:
          v9 = (*(_DWORD *)(v4 + 20) & 0x7FFFFFF) - 1;
          goto LABEL_18;
        case 4:
          goto LABEL_9;
        case 7:
          v9 = *(_WORD *)(v4 + 18) & 1;
          goto LABEL_18;
        case 8:
          v9 = 1;
          goto LABEL_9;
        case 10:
          v9 = *(_DWORD *)(v4 + 80) + 1;
LABEL_18:
          if (!v9)
            goto LABEL_19;
          goto LABEL_9;
        default:
          goto LABEL_19;
      }
    }
    if ((*(_DWORD *)(v4 + 20) & 0x7FFFFFF) == 3)
      v9 = 2;
    else
      v9 = 1;
LABEL_9:
    v10 = 0;
    v11 = 0;
    v12 = v4 - 64;
    v13 = v9;
    while (1)
    {
      v14 = *(unsigned __int8 *)(v4 + 16);
      if (v14 != 30)
        __asm { BR              X9 }
      if (llvm::DominatorTreeBase<llvm::BasicBlock,true>::dominates(a3, a2, *(_QWORD *)(v4 - 32 - 32 * v11)))
        break;
      ++v11;
      v10 += 2;
      v12 += 32;
      if (v13 == v11)
        goto LABEL_19;
    }
  }
  return v11;
}

uint64_t sub_1C560E328(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  uint64_t result;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 8;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_14;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*a2 == *v7)
  {
LABEL_13:
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -4096)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v8 == -8192;
      if (v11)
        v9 = v7;
      v12 = v6 + v10++;
      v6 = v12 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v12 & v5));
      v8 = *v7;
      if (*a2 == *v7)
        goto LABEL_13;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_14:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C560E3D0(uint64_t a1, _QWORD *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  _QWORD *v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 8;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v13 = 0;
LABEL_17:
      v7 = sub_1C560E4A0(a1, (uint64_t)a2, a2, v13);
      *v7 = *a2;
      *((_DWORD *)v7 + 2) = 0;
      return v7;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*a2 != *v7)
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -4096)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v8 == -8192;
      if (v11)
        v9 = v7;
      v12 = v6 + v10++;
      v6 = v12 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v12 & v5));
      v8 = *v7;
      if (*a2 == *v7)
        return v7;
    }
    if (v9)
      v13 = v9;
    else
      v13 = v7;
    goto LABEL_17;
  }
  return v7;
}

_QWORD *sub_1C560E4A0(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  _QWORD *v20;

  v6 = *(_DWORD *)a1;
  v7 = *(_DWORD *)a1 >> 1;
  if ((*(_DWORD *)a1 & 1) != 0)
    v8 = 8;
  else
    v8 = *(_DWORD *)(a1 + 16);
  if (4 * v7 + 4 >= 3 * v8)
  {
    sub_1C560E614(a1, 2 * v8);
    v11 = a1 + 8;
    v6 = *(_DWORD *)a1;
    if ((*(_DWORD *)a1 & 1) != 0)
    {
      v12 = 8;
    }
    else
    {
      v12 = *(_DWORD *)(a1 + 16);
      if (!v12)
      {
        v9 = 0;
        a4 = 0;
        goto LABEL_7;
      }
      v11 = *(_QWORD *)(a1 + 8);
    }
    v9 = *(_DWORD *)a1 & 1;
    v13 = v12 - 1;
    v14 = ((*a3 >> 4) ^ (*a3 >> 9)) & v13;
    a4 = (_QWORD *)(v11 + 16 * v14);
    v15 = *a4;
    if (*a3 != *a4)
    {
      v16 = 0;
      v17 = 1;
      while (v15 != -4096)
      {
        if (v16)
          v18 = 0;
        else
          v18 = v15 == -8192;
        if (v18)
          v16 = a4;
        v19 = v14 + v17++;
        v14 = v19 & v13;
        a4 = (_QWORD *)(v11 + 16 * v14);
        v15 = *a4;
        if (*a3 == *a4)
          goto LABEL_7;
      }
      if (v16)
        a4 = v16;
    }
  }
  else
  {
    if (v8 + ~v7 - *(_DWORD *)(a1 + 4) <= v8 >> 3)
    {
      sub_1C560E614(a1, v8);
      v20 = 0;
      sub_1C560E328(a1, a3, &v20);
      a4 = v20;
      v6 = *(_DWORD *)a1;
    }
    v9 = v6 & 1;
  }
LABEL_7:
  *(_DWORD *)a1 = (v6 & 0xFFFFFFFE | v9) + 2;
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 4);
  return a4;
}

int *sub_1C560E614(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[17];

  v14[16] = *MEMORY[0x1E0C80C00];
  if (a2 >= 9)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 8)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C560E78C((int *)a1, v6, &v6[2 * v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_QWORD *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *v9 = v10;
      *((_DWORD *)v9 + 2) = *(_DWORD *)(a1 + v8 + 16);
      v9 += 2;
    }
    v8 += 16;
  }
  while (v8 != 128);
  if (a2 > 8)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C560E78C((int *)a1, v14, v9);
}

int *sub_1C560E78C(int *result, uint64_t *a2, uint64_t *a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  int *v8;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t *v14;
  int v15;
  BOOL v16;
  unsigned int v17;

  v3 = *result;
  *result &= 1u;
  result[1] = 0;
  if ((v3 & 1) != 0)
  {
    v6 = result + 34;
    v5 = result + 2;
  }
  else
  {
    v4 = result[4];
    if (!(_DWORD)v4)
      goto LABEL_5;
    v5 = (_QWORD *)*((_QWORD *)result + 1);
    v6 = &v5[2 * v4];
  }
  do
  {
    *v5 = -4096;
    v5 += 2;
  }
  while (v5 != v6);
LABEL_5:
  while (a2 != a3)
  {
    v7 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      if ((*(_BYTE *)result & 1) != 0)
      {
        v9 = 8;
        v8 = result + 2;
      }
      else
      {
        v8 = (int *)*((_QWORD *)result + 1);
        v9 = result[4];
      }
      v10 = v9 - 1;
      v11 = (v9 - 1) & ((v7 >> 4) ^ (v7 >> 9));
      v12 = (uint64_t *)&v8[4 * v11];
      v13 = *v12;
      if (v7 != *v12)
      {
        v14 = 0;
        v15 = 1;
        while (v13 != -4096)
        {
          if (v14)
            v16 = 0;
          else
            v16 = v13 == -8192;
          if (v16)
            v14 = v12;
          v17 = v11 + v15++;
          v11 = v17 & v10;
          v12 = (uint64_t *)&v8[4 * (v17 & v10)];
          v13 = *v12;
          if (v7 == *v12)
            goto LABEL_21;
        }
        if (v14)
          v12 = v14;
      }
LABEL_21:
      *v12 = v7;
      *((_DWORD *)v12 + 2) = *((_DWORD *)a2 + 2);
      *result += 2;
    }
    a2 += 2;
  }
  return result;
}

void sub_1C560E894(uint64_t a1, unint64_t a2)
{
  void *v3;
  int v4;
  unint64_t v5;

  v5 = 0;
  v3 = llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, a2, 32, &v5);
  sub_1C560E900((uint64_t *)a1, (uint64_t)v3);
  v4 = v5;
  if (*(_QWORD *)a1 != a1 + 16)
    free(*(void **)a1);
  *(_QWORD *)a1 = v3;
  *(_DWORD *)(a1 + 12) = v4;
}

void sub_1C560E900(uint64_t *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;

  v2 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v2)
  {
    v4 = *a1 + 32 * v2;
    v5 = a2 + 24;
    v6 = *a1 + 8;
    do
    {
      v7 = v6 - 8;
      *(_QWORD *)(v5 - 24) = *(_QWORD *)(v6 - 8);
      *(_QWORD *)(v5 - 16) = v5;
      *(_QWORD *)(v5 - 8) = 0x100000000;
      if (*(_DWORD *)(v6 + 8))
        sub_1C4AA1E04(v5 - 16, (const void **)v6);
      v5 += 32;
      v6 += 32;
    }
    while (v7 + 32 != v4);
    v8 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v8)
    {
      v9 = *a1;
      v10 = 32 * v8;
      do
      {
        v11 = *(void **)(v9 + v10 - 24);
        if ((void *)(v9 + v10 - 8) != v11)
          free(v11);
        v10 -= 32;
      }
      while (v10);
    }
  }
}

uint64_t *sub_1C560E9C0(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  int v4;
  unsigned int v5;
  uint64_t *v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  unsigned int v10;

  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v3 = 16;
    v2 = a1 + 8;
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 8);
    v3 = *(_DWORD *)(a1 + 16);
    if (!v3)
    {
      v10 = 0;
      return (uint64_t *)(v2 + 104 * v10);
    }
  }
  v4 = v3 - 1;
  v5 = (v3 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v6 = (uint64_t *)(v2 + 104 * v5);
  v7 = *v6;
  if (*v6 == a2)
    return v6;
  v8 = 1;
  while (v7 != -4096)
  {
    v9 = v5 + v8++;
    v5 = v9 & v4;
    v6 = (uint64_t *)(v2 + 104 * (v9 & v4));
    v7 = *v6;
    if (*v6 == a2)
      return v6;
  }
  if ((*(_DWORD *)a1 & 1) != 0)
  {
    v10 = 16;
    v2 = a1 + 8;
  }
  else
  {
    v2 = *(_QWORD *)(a1 + 8);
    v10 = *(_DWORD *)(a1 + 16);
  }
  return (uint64_t *)(v2 + 104 * v10);
}

char *sub_1C560EA84(char *result, unint64_t a2, __int128 *a3)
{
  uint64_t *v4;
  _DWORD *v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  __int128 v16;
  __int128 v17;
  uint64_t v18;

  v4 = (uint64_t *)result;
  if (*((unsigned int *)result + 3) >= a2)
  {
    v5 = result + 8;
    v8 = *((unsigned int *)result + 2);
    if (v8 >= a2)
      v9 = a2;
    else
      v9 = *((unsigned int *)result + 2);
    if (v9)
    {
      v10 = *(_QWORD *)result;
      do
      {
        *(_QWORD *)v10 = *(_QWORD *)a3;
        *(_OWORD *)(v10 + 8) = *(__int128 *)((char *)a3 + 8);
        *(_OWORD *)(v10 + 24) = *(__int128 *)((char *)a3 + 24);
        v10 += 40;
        --v9;
      }
      while (v9);
      v8 = *v5;
    }
    v11 = v8 - a2;
    if (v8 < a2)
    {
      v12 = *(_QWORD *)result + 40 * v8;
      do
      {
        v13 = *a3;
        v14 = a3[1];
        *(_QWORD *)(v12 + 32) = *((_QWORD *)a3 + 4);
        *(_OWORD *)v12 = v13;
        *(_OWORD *)(v12 + 16) = v14;
        v12 += 40;
      }
      while (!__CFADD__(v11++, 1));
    }
  }
  else
  {
    v16 = *a3;
    v17 = a3[1];
    v18 = *((_QWORD *)a3 + 4);
    *((_DWORD *)result + 2) = 0;
    v5 = result + 8;
    result = (char *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 16), a2, 40);
    v6 = *v4;
    v7 = a2;
    do
    {
      *(_OWORD *)v6 = v16;
      *(_OWORD *)(v6 + 16) = v17;
      *(_QWORD *)(v6 + 32) = v18;
      v6 += 40;
      --v7;
    }
    while (v7);
  }
  *v5 = a2;
  return result;
}

uint64_t sub_1C560EB98(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;

  if (a1 != a2)
  {
    v4 = *(unsigned int *)(a2 + 8);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if ((_DWORD)v4)
        memmove(*(void **)a1, *(const void **)a2, 4 * v4);
      goto LABEL_8;
    }
    if (*(_DWORD *)(a1 + 12) < v4)
    {
      *(_DWORD *)(a1 + 8) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v4, 4);
    }
    else if ((_DWORD)v5)
    {
      v9 = *(unsigned int *)(a1 + 8);
      memmove(*(void **)a1, *(const void **)a2, 4 * v5);
      v6 = v9;
LABEL_6:
      v7 = *(unsigned int *)(a2 + 8);
      if (v6 != v7)
        memcpy((void *)(*(_QWORD *)a1 + 4 * v6), (const void *)(*(_QWORD *)a2 + 4 * v6), *(_QWORD *)a2 + 4 * v7 - (*(_QWORD *)a2 + 4 * v6));
LABEL_8:
      *(_DWORD *)(a1 + 8) = v4;
      return a1;
    }
    v6 = 0;
    goto LABEL_6;
  }
  return a1;
}

uint64_t sub_1C560EC74(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E81717B0;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C560EC8C(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t))(a1 + 8))(a2);
}

void sub_1C560EC98(_QWORD **a1, int a2, uint64_t a3, uint64_t a4, llvm::Type *a5, llvm::DSOLocalEquivalent **a6)
{
  _QWORD **v7;
  _QWORD **v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  char v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;
  void *v23;
  uint64_t v24;
  _QWORD v25[9];

  v25[8] = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    v7 = a1;
    v8 = &a1[a2];
    do
    {
      v9 = *v7;
      v23 = v25;
      v24 = 0x800000000;
      v10 = v9 + 5;
      while (1)
      {
        v11 = (_QWORD *)v9[6];
        if (v11 == v10)
        {
          v12 = 0;
        }
        else
        {
          v12 = 0;
          do
          {
            if (v11)
              v13 = v11 - 3;
            else
              v13 = 0;
            v14 = *(_QWORD *)(a3 + 24);
            if (!v14)
              sub_1C485C2F0();
            if ((*(unsigned int (**)(uint64_t, _QWORD *))(*(_QWORD *)v14 + 48))(v14, v13))
            {
              v15 = v13[1];
              if (!v15)
                goto LABEL_15;
              v16 = 0;
              do
              {
                v15 = *(_QWORD *)(v15 + 8);
                --v16;
              }
              while (v15);
              if (!v16)
              {
LABEL_15:
                v17 = v24;
                if (v24 >= (unint64_t)HIDWORD(v24))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v23, (uint64_t)v25, v24 + 1, 8);
                  v17 = v24;
                }
                *((_QWORD *)v23 + v17) = v13;
                LODWORD(v24) = v24 + 1;
                v12 = 1;
              }
            }
            v11 = (_QWORD *)v11[1];
          }
          while (v11 != v10);
        }
        if ((_DWORD)v24)
        {
          v18 = (uint64_t *)v23;
          v19 = 8 * v24;
          do
          {
            v20 = *v18++;
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v20 + 40) + 40, (uint64_t ***)v20);
            v21 = *(_QWORD *)(v20 + 24);
            v22 = *(_QWORD **)(v20 + 32);
            *v22 = v21;
            *(_QWORD *)(v21 + 8) = v22;
            *(_QWORD *)(v20 + 24) = 0;
            *(_QWORD *)(v20 + 32) = 0;
            llvm::Value::deleteValue((llvm::Value *)v20);
            v19 -= 8;
          }
          while (v19);
        }
        LODWORD(v24) = 0;
        if ((v12 & 1) == 0)
          break;
        llvm::SimplifyInstructionsInBlock(v9, 0, a3, a4, a5, a6);
      }
      if (v23 != v25)
        free(v23);
      ++v7;
    }
    while (v7 != v8);
  }
}

void sub_1C560EE64()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C560EE78(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x28uLL);
  *(_QWORD *)v2 = &off_1E81717F8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1C560EEB8(uint64_t a1, uint64_t a2)
{
  __n128 result;

  *(_QWORD *)a2 = &off_1E81717F8;
  result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1C560EEE0(uint64_t a1, uint64_t *a2)
{
  uint64_t *v3;
  uint64_t result;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD v18[3];

  v16 = *a2;
  v17 = 0;
  v3 = *(uint64_t **)(a1 + 8);
  v18[0] = v16;
  result = sub_1C61DB414(v3, v18, &v17);
  if ((result & 1) != 0)
    return result;
  result = sub_1C61DB390(*(_QWORD *)(a1 + 8), &v16, (uint64_t)v18);
  v5 = v16;
  v6 = *(_DWORD *)(v16 + 20);
  if ((v6 & 0x40000000) == 0)
  {
    v7 = v6 & 0x7FFFFFF;
    v8 = v16 - 32 * v7;
    if (!v7)
      goto LABEL_17;
LABEL_6:
    v9 = 32 * v7;
    do
    {
      if (*(_QWORD *)v8)
        v10 = *(unsigned __int8 *)(*(_QWORD *)v8 + 16) >= 0x1Cu;
      else
        v10 = 0;
      if (v10 && *(_QWORD *)(*(_QWORD *)v8 + 40) == **(_QWORD **)(a1 + 16))
      {
        v11 = *(_QWORD *)(a1 + 24);
        v18[0] = *(_QWORD *)v8;
        v12 = *(_QWORD *)(v11 + 24);
        if (!v12)
        {
          sub_1C485C2F0();
          JUMPOUT(0x1C560F014);
        }
        result = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v12 + 48))(v12, v18);
      }
      v8 += 32;
      v9 -= 32;
    }
    while (v9);
    v5 = v16;
    goto LABEL_17;
  }
  v8 = *(_QWORD *)(v16 - 8);
  v7 = v6 & 0x7FFFFFF;
  if (v7)
    goto LABEL_6;
LABEL_17:
  v13 = *(_QWORD *)(a1 + 32);
  v14 = *(unsigned int *)(v13 + 8);
  if (v14 >= *(_DWORD *)(v13 + 12))
  {
    v15 = v5;
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(v13, v13 + 16, v14 + 1, 8);
    v5 = v15;
    LODWORD(v14) = *(_DWORD *)(v13 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v13 + 8 * v14) = v5;
  ++*(_DWORD *)(v13 + 8);
  return result;
}

void sub_1C560F018()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C560F02C()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &unk_1E8171840;
  return result;
}

void sub_1C560F050(uint64_t a1, _QWORD *a2)
{
  *a2 = &unk_1E8171840;
}

BOOL sub_1C560F068(uint64_t a1, uint64_t a2)
{
  _BOOL8 result;

  result = sub_1C560B9F4(a2);
  if (result)
    return sub_1C560BB44(a2);
  return result;
}

void sub_1C560F0A0(uint64_t *a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  const char **v9;
  _QWORD *v10;
  llvm::Value *v11;
  llvm *v12;
  const char *v13;
  size_t v14;
  void *v15;
  uint64_t v16;
  _BYTE *v17;
  llvm *v18;
  char *v19;
  uint64_t *v20;
  char *v21;
  const char *v22;
  size_t v23;
  void *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  llvm::Value **v30;
  llvm::Value *v31;
  int v32;
  int v33;
  size_t *v34;
  const void *v35;
  size_t v36;
  size_t v37;
  char *v38;
  char *v39;
  uint64_t v40;
  int v41;
  _BYTE v42[64];
  _QWORD v43[16];

  v1 = 0;
  v43[14] = *MEMORY[0x1E0C80C00];
  v38 = v42;
  v39 = v42;
  v40 = 8;
  v2 = *a1;
  v3 = a1[1];
  v43[0] = "PreHeader";
  v43[1] = v2;
  v43[2] = "Header";
  v43[3] = v3;
  v4 = a1[2];
  v5 = a1[3];
  v43[4] = "BodyBegin";
  v43[5] = v4;
  v43[6] = "BodyEnd";
  v43[7] = v5;
  v6 = a1[4];
  v7 = a1[5];
  v43[8] = "PreLatch";
  v43[9] = v6;
  v43[10] = "Latch";
  v43[11] = v7;
  v8 = a1[6];
  v43[12] = "Exit";
  v43[13] = v8;
  v9 = (const char **)v43;
  v41 = 0;
  do
  {
    v10 = &v43[2 * v1];
    v11 = (llvm::Value *)v10[1];
    if (v11)
    {
      v18 = (llvm *)sub_1C477672C((uint64_t)&v38, v10[1]);
      v19 = (char *)v18;
      if (v39 == v38)
        v20 = (uint64_t *)((char *)&v40 + 4);
      else
        v20 = &v40;
      v21 = &v39[8 * *(unsigned int *)v20];
      v12 = llvm::dbgs(v18);
      if (v19 == v21)
      {
        llvm::Value::print(v11, v12, 0);
        a1 = sub_1C4774094((llvm::SmallPtrSetImplBase *)&v38, (uint64_t)v11);
        goto LABEL_34;
      }
      v22 = *v9;
      if (*v9)
      {
        v23 = strlen(*v9);
        v24 = (void *)*((_QWORD *)v12 + 4);
        if (v23 <= *((_QWORD *)v12 + 3) - (_QWORD)v24)
        {
          if (v23)
          {
            memcpy(v24, v22, v23);
            *((_QWORD *)v12 + 4) += v23;
          }
        }
        else
        {
          v12 = llvm::raw_ostream::write(v12, v22, v23);
        }
      }
      v25 = *((_QWORD *)v12 + 4);
      if ((unint64_t)(*((_QWORD *)v12 + 3) - v25) > 2)
      {
        *(_BYTE *)(v25 + 2) = 32;
        *(_WORD *)v25 = 15648;
        *((_QWORD *)v12 + 4) += 3;
      }
      else
      {
        v12 = llvm::raw_ostream::write(v12, " = ", 3uLL);
      }
      if ((*((_BYTE *)v11 + 23) & 0x10) == 0)
      {
        a1 = (uint64_t *)*((_QWORD *)v12 + 4);
LABEL_32:
        if (*((uint64_t **)v12 + 3) == a1)
          goto LABEL_33;
        *(_BYTE *)a1 = 10;
        goto LABEL_44;
      }
      v26 = ***(_QWORD ***)v11;
      v27 = *(_QWORD *)(v26 + 152);
      v28 = *(unsigned int *)(v26 + 168);
      if ((_DWORD)v28)
      {
        LODWORD(v29) = (v28 - 1) & ((v11 >> 4) ^ (v11 >> 9));
        v30 = (llvm::Value **)(v27 + 16 * v29);
        v31 = *v30;
        if (*v30 == v11)
          goto LABEL_28;
        v32 = 1;
        while (v31 != (llvm::Value *)-4096)
        {
          v33 = v29 + v32++;
          v29 = v33 & (v28 - 1);
          v31 = *(llvm::Value **)(v27 + 16 * v29);
          if (v31 == v11)
          {
            v30 = (llvm::Value **)(v27 + 16 * v29);
            goto LABEL_28;
          }
        }
      }
      v30 = (llvm::Value **)(v27 + 16 * v28);
LABEL_28:
      v34 = (size_t *)v30[1];
      v37 = *v34;
      v35 = v34 + 2;
      v36 = v37;
      a1 = (uint64_t *)*((_QWORD *)v12 + 4);
      if (v37 <= *((_QWORD *)v12 + 3) - (_QWORD)a1)
      {
        if (v36)
        {
          memcpy(a1, v35, v36);
          a1 = (uint64_t *)(*((_QWORD *)v12 + 4) + v36);
          *((_QWORD *)v12 + 4) = a1;
        }
      }
      else
      {
        v12 = llvm::raw_ostream::write(v12, (const char *)v35, v36);
        a1 = (uint64_t *)*((_QWORD *)v12 + 4);
      }
      goto LABEL_32;
    }
    v12 = llvm::dbgs((llvm *)a1);
    v13 = *v9;
    if (*v9)
    {
      v14 = strlen(*v9);
      v15 = (void *)*((_QWORD *)v12 + 4);
      if (v14 <= *((_QWORD *)v12 + 3) - (_QWORD)v15)
      {
        if (v14)
        {
          memcpy(v15, v13, v14);
          *((_QWORD *)v12 + 4) += v14;
        }
      }
      else
      {
        v12 = llvm::raw_ostream::write(v12, v13, v14);
      }
    }
    v16 = *((_QWORD *)v12 + 4);
    if ((unint64_t)(*((_QWORD *)v12 + 3) - v16) > 2)
    {
      *(_BYTE *)(v16 + 2) = 32;
      *(_WORD *)v16 = 15648;
      *((_QWORD *)v12 + 4) += 3;
    }
    else
    {
      v12 = llvm::raw_ostream::write(v12, " = ", 3uLL);
    }
    a1 = (uint64_t *)llvm::write_hex(v12, 0, 3, 0, 0);
    v17 = (_BYTE *)*((_QWORD *)v12 + 4);
    if (*((_BYTE **)v12 + 3) == v17)
    {
LABEL_33:
      a1 = (uint64_t *)llvm::raw_ostream::write(v12, "\n", 1uLL);
      goto LABEL_34;
    }
    *v17 = 10;
LABEL_44:
    ++*((_QWORD *)v12 + 4);
LABEL_34:
    ++v1;
    v9 = (const char **)&v43[2 * v1];
  }
  while (v1 != 7);
  if (v39 != v38)
    free(v39);
}

uint64_t sub_1C560F49C(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeDominatorTreeWrapperPassPass(a1);
  llvm::initializePostDominatorTreeWrapperPassPass(a1);
  llvm::initializeTargetTransformInfoWrapperPassPass(a1);
  llvm::initializeFunctionGroupInfoWrapperPassPass(a1);
  llvm::initializeLoopInfoWrapperPassPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Transform the shader to enable MultiRate mode";
  *(_QWORD *)(v2 + 8) = 45;
  *(_QWORD *)(v2 + 16) = "multirate-transform";
  *(_QWORD *)(v2 + 24) = 19;
  *(_QWORD *)(v2 + 32) = &unk_1ED8080D0;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C560F718;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C560F550(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5)
{
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  unint64_t v13;
  unint64_t v15;
  _QWORD *v16;
  _QWORD v17[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED8080D0;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E8171888;
  v9 = *(_QWORD *)(a2 + 24);
  if (v9)
  {
    if (v9 == a2)
    {
      *(_QWORD *)(a1 + 56) = a1 + 32;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1 + 32);
    }
    else
    {
      *(_QWORD *)(a1 + 56) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v9 + 16))(v9);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 56) = 0;
  }
  v10 = *(_QWORD *)(a3 + 24);
  if (v10)
  {
    if (v10 == a3)
    {
      *(_QWORD *)(a1 + 88) = a1 + 64;
      (*(void (**)(_QWORD))(**(_QWORD **)(a3 + 24) + 24))(*(_QWORD *)(a3 + 24));
    }
    else
    {
      *(_QWORD *)(a1 + 88) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 16))(v10);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 88) = 0;
  }
  *(_BYTE *)(a1 + 96) = a4;
  *(_BYTE *)(a1 + 97) = a5;
  if (byte_1ED808160)
  {
    v11 = 1;
LABEL_19:
    *(_WORD *)(a1 + 28) = v11;
    goto LABEL_20;
  }
  if (byte_1ED808220)
  {
    v11 = 2;
    goto LABEL_19;
  }
  if (byte_1ED8083A0)
  {
    v11 = 4;
    goto LABEL_19;
  }
  if (byte_1ED8082E0)
  {
    v11 = 8;
    goto LABEL_19;
  }
  *(_WORD *)(a1 + 28) = 0;
LABEL_20:
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v15 = qword_1ED830BC0[0];
  v13 = atomic_load(&qword_1ED8080D8);
  if (v13 != -1)
  {
    v17[0] = sub_1C560F49C;
    v17[1] = &v15;
    v16 = v17;
    std::__call_once(&qword_1ED8080D8, &v16, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C560F718()
{
  uint64_t v0;
  void (**v1)(void);
  void (**v2)(void);
  _QWORD v4[3];
  _QWORD *v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v0 = operator new();
  v7 = 0;
  v5 = 0;
  sub_1C560F550(v0, (uint64_t)v6, (uint64_t)v4, 0, 0);
  if (v5 == v4)
  {
    v1 = (void (**)(void))(v4[0] + 32);
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v1 = (void (**)(void))(*v5 + 40);
  }
  (*v1)();
LABEL_6:
  if (v7 == v6)
  {
    v2 = (void (**)(void))(v6[0] + 32);
    goto LABEL_10;
  }
  if (v7)
  {
    v2 = (void (**)(void))(*v7 + 40);
LABEL_10:
    (*v2)();
  }
  return v0;
}

void sub_1C560F808(llvm::Pass *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  llvm::Pass *v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E8171888;
  v2 = (char *)this + 64;
  v3 = (char *)*((_QWORD *)this + 11);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  v5 = (llvm::Pass *)*((_QWORD *)this + 7);
  if (v5 == (llvm::Pass *)((char *)this + 32))
  {
    v6 = 4;
    v5 = (llvm::Pass *)((char *)this + 32);
    goto LABEL_10;
  }
  if (v5)
  {
    v6 = 5;
LABEL_10:
    (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
  }
  llvm::Pass::~Pass(this);
}

void sub_1C560F894(llvm::Pass *this)
{
  char *v2;
  char *v3;
  uint64_t v4;
  llvm::Pass *v5;
  uint64_t v6;

  *(_QWORD *)this = &off_1E8171888;
  v2 = (char *)this + 64;
  v3 = (char *)*((_QWORD *)this + 11);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
LABEL_6:
  v5 = (llvm::Pass *)*((_QWORD *)this + 7);
  if (v5 == (llvm::Pass *)((char *)this + 32))
  {
    v6 = 4;
    v5 = (llvm::Pass *)((char *)this + 32);
  }
  else
  {
    if (!v5)
    {
LABEL_11:
      llvm::Pass::~Pass(this);
      JUMPOUT(0x1CAA32FC0);
    }
    v6 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v5 + 8 * v6))();
  goto LABEL_11;
}

const char *sub_1C560F934()
{
  return "MultiRate Transformation Pass";
}

void *sub_1C560F944(uint64_t a1, uint64_t a2)
{
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
  sub_1C4771E64(a2, a2 + 112, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::PostDominatorTreeWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)llvm::TargetTransformInfoWrapperPass::ID);
  return sub_1C4771E64(a2, a2, (uint64_t)llvm::LoopInfoWrapperPass::ID);
}

BOOL sub_1C560F9D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void **v11;
  void *v12;
  uint64_t *v13;
  void **v14;
  void *v15;
  _QWORD *v16;
  char **v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  std::string *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  std::string *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  std::string *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  std::string *v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  std::string *v47;
  uint64_t v48;
  uint64_t NamedMetadata;
  uint64_t v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t i;
  uint64_t v59;
  int v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  uint64_t v66;
  _QWORD *v67;
  unsigned int v68;
  int v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  unsigned int v73;
  _QWORD *v74;
  uint64_t v75;
  int v76;
  unsigned int v77;
  uint64_t v78;
  int v79;
  unsigned int v80;
  int v81;
  char v82;
  BOOL v83;
  int v84;
  uint64_t v86;
  uint64_t v87;
  int v88;
  unsigned int v89;
  uint64_t *v90;
  uint64_t v91;
  uint64_t *v92;
  int v93;
  BOOL v94;
  unsigned int v95;
  uint64_t *v96;
  BOOL v97;
  __int16 v98;
  char v99;
  BOOL v100;
  BOOL v101;
  int v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t *v105;
  unsigned int v106;
  uint64_t *v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  int v111;
  uint64_t v113;
  int v114;
  uint64_t v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int v122;
  void **p_src;
  void **v124;
  uint64_t v125;
  unsigned int v126;
  BOOL v127;
  uint64_t v128;
  int v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t *v137;
  uint64_t *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t *v141;
  uint64_t NearestCommonDominator;
  uint64_t v143;
  unint64_t *v144;
  unint64_t v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t j;
  uint64_t v151;
  uint64_t v152;
  unsigned int v153;
  int v154;
  unsigned int v155;
  void *v156;
  uint64_t v157;
  _QWORD *v158;
  uint64_t v159;
  uint64_t *v160;
  uint64_t v161;
  llvm::ValueSymbolTable *v162;
  uint64_t v163;
  uint64_t *v164;
  uint64_t v165;
  __n128 *v166;
  __n128 *v167;
  unsigned int v168;
  unsigned int *v169;
  uint64_t v170;
  uint64_t v171;
  _QWORD *v172;
  uint64_t *v173;
  _QWORD *v174;
  _QWORD *v175;
  unsigned int v176;
  uint64_t v177;
  unint64_t v178;
  int v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t *v184;
  uint64_t v185;
  int v186;
  int v187;
  uint64_t v188;
  uint64_t v189;
  int v190;
  int v191;
  int v192;
  uint64_t v193;
  uint64_t *v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t *v197;
  uint64_t v198;
  uint64_t *v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t *v203;
  uint64_t *k;
  uint64_t *v205;
  unint64_t v206;
  int v207;
  uint64_t *v208;
  uint64_t v209;
  unint64_t v210;
  void **v211;
  uint64_t *v212;
  unsigned int v213;
  uint64_t v214;
  uint64_t v215;
  _QWORD *v216;
  _QWORD *v217;
  int v218;
  int v219;
  unsigned int v220;
  uint64_t v221;
  uint64_t v222;
  _QWORD *v223;
  _QWORD *v224;
  uint64_t v225;
  int v226;
  char v227;
  int v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t *v231;
  uint64_t v232;
  uint64_t m;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  unsigned int v237;
  uint64_t v238;
  int v239;
  unsigned int v240;
  uint64_t v241;
  _QWORD *v242;
  uint64_t v243;
  _QWORD *v244;
  int v245;
  BOOL v246;
  int v247;
  _QWORD *v248;
  uint64_t *v249;
  uint64_t v250;
  uint64_t *v251;
  uint64_t *v252;
  uint64_t v253;
  unsigned int v254;
  unsigned int v255;
  uint64_t v256;
  uint64_t *v257;
  uint64_t v258;
  uint64_t v259;
  unint64_t v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t v263;
  int v264;
  unsigned int v265;
  _BYTE *v266;
  uint64_t v267;
  uint64_t *v268;
  uint64_t v269;
  uint64_t *v270;
  uint64_t *v271;
  uint64_t *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t v275;
  char *v276;
  _DWORD *v277;
  char *v278;
  uint64_t v280;
  uint64_t v281;
  uint64_t v282;
  int v283;
  int v284;
  unsigned int v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  uint64_t v289;
  int v290;
  uint64_t *v291;
  uint64_t v292;
  llvm::DominatorTree *v293;
  uint64_t *v294;
  llvm::SmallPtrSetImplBase *v295;
  uint64_t v296;
  _QWORD *v297;
  unsigned int *v298;
  _QWORD *v299;
  unsigned int *v300;
  void *v301;
  int v302;
  uint64_t v303;
  void *v304;
  int v305;
  uint64_t v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  unsigned int v310;
  char *v311;
  uint64_t v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  int v316;
  int v317;
  uint64_t v318;
  uint64_t v319;
  char v320;
  uint64_t *v321;
  llvm::DominatorTree *v322;
  uint64_t v323;
  llvm::DominatorTree *v324;
  char *v325;
  uint64_t v326;
  char v327;
  char v328;
  llvm::DominatorTree *v329;
  uint64_t v330;
  uint64_t n;
  uint64_t v332;
  uint64_t v333;
  void **v334;
  void *v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t ii;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  char *v347;
  uint64_t v348;
  char *FirstNonPHIOrDbgOrLifetime;
  uint64_t *v350;
  uint64_t v351;
  uint64_t jj;
  uint64_t *v353;
  unint64_t v354;
  uint64_t *v355;
  uint64_t *v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t *v359;
  uint64_t v360;
  uint64_t v361;
  int v362;
  uint64_t v363;
  uint64_t v364;
  uint64_t v365;
  unsigned int v366;
  int v367;
  _BOOL4 v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  llvm::DominatorTree *v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t *v376;
  uint64_t v377;
  int v378;
  int v379;
  uint64_t v380;
  uint64_t *v381;
  unsigned int v382;
  uint64_t *v383;
  uint64_t v384;
  int v385;
  int v386;
  _BOOL4 v387;
  int v388;
  uint64_t v389;
  unsigned int v391;
  unsigned int v392;
  uint64_t v393;
  int v395;
  uint64_t v396;
  int v398;
  uint64_t v399;
  uint64_t *v400;
  int v401;
  int v402;
  uint64_t v403;
  int v404;
  uint64_t v406;
  int v407;
  _BOOL4 v408;
  _BOOL4 v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  _QWORD *v414;
  uint64_t *v415;
  int v416;
  _BYTE *v417;
  unsigned int v418;
  _BYTE *v419;
  unsigned int v420;
  _BYTE *v421;
  unsigned int v422;
  _QWORD *v423;
  uint64_t *v424;
  unsigned int v425;
  uint64_t v426;
  int v427;
  unsigned int v428;
  _BOOL4 v429;
  int v430;
  unsigned int v431;
  _DWORD *v432;
  uint64_t v433;
  uint64_t *v434;
  unsigned int v435;
  uint64_t v436;
  int v437;
  uint64_t v438;
  uint64_t *v439;
  uint64_t v440;
  uint64_t v441;
  BOOL v442;
  int v443;
  _BYTE *v444;
  unsigned int v445;
  _BYTE *v446;
  _BOOL4 v447;
  uint64_t *v448;
  uint64_t *v449;
  uint64_t v450;
  char *v451;
  uint64_t v452;
  uint64_t v453;
  uint64_t v454;
  int v455;
  int v456;
  uint64_t v457;
  uint64_t v458;
  uint64_t v459;
  llvm::DominatorTree *v460;
  uint64_t v461;
  uint64_t v462;
  uint64_t v463;
  uint64_t *v464;
  uint64_t v465;
  int v466;
  int v467;
  int v468;
  uint64_t v469;
  llvm::DominatorTree *v470;
  uint64_t v471;
  uint64_t v472;
  uint64_t v473;
  uint64_t v474;
  uint64_t *v475;
  uint64_t v476;
  int v477;
  int v478;
  uint64_t *v479;
  uint64_t v480;
  unsigned int v481;
  uint64_t *v482;
  uint64_t v483;
  int v484;
  int v485;
  uint64_t v486;
  unsigned int v488;
  unsigned int v489;
  uint64_t v490;
  uint64_t *v491;
  uint64_t v492;
  uint64_t v493;
  unsigned int v494;
  uint64_t *v495;
  uint64_t v496;
  int v497;
  int v498;
  uint64_t v499;
  unsigned int v501;
  unsigned int v502;
  uint64_t v503;
  const llvm::Instruction **v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  uint64_t v510;
  unsigned int v511;
  BOOL v512;
  int v513;
  uint64_t v515;
  _BYTE *v516;
  uint64_t v517;
  _BYTE *v518;
  llvm::Instruction *v519;
  __int16 v520;
  uint64_t *v521;
  unint64_t v522;
  uint64_t *v523;
  uint64_t *v524;
  uint64_t v525;
  uint64_t v526;
  _QWORD *v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  __n128 *v532;
  __n128 *v533;
  unsigned __int32 v534;
  uint64_t v535;
  uint64_t v536;
  _QWORD *v537;
  uint64_t *v538;
  int v539;
  uint64_t v540;
  uint64_t *v541;
  uint64_t v542;
  uint64_t v543;
  BOOL v544;
  _QWORD *v545;
  uint64_t v546;
  uint64_t v547;
  unint64_t v548;
  unsigned int v549;
  char v550;
  _QWORD *v551;
  int v552;
  uint64_t *v553;
  uint64_t v554;
  uint64_t v555;
  uint64_t v556;
  uint64_t *v557;
  char *v558;
  char v559;
  uint64_t v560;
  uint64_t v561;
  unint64_t v562;
  BOOL v563;
  __int16 v564;
  uint64_t v565;
  uint64_t *v566;
  uint64_t v567;
  uint64_t v568;
  unint64_t *v569;
  unint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  char *v577;
  uint64_t *v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t *v581;
  uint64_t *v582;
  uint64_t v583;
  uint64_t *v584;
  uint64_t v585;
  uint64_t v586;
  unint64_t *v587;
  char *v588;
  unint64_t v589;
  uint64_t v590;
  uint64_t v591;
  unint64_t *v592;
  unint64_t v593;
  _QWORD *v594;
  unsigned int *v595;
  uint64_t v596;
  int v597;
  uint64_t *v598;
  uint64_t *v599;
  int v600;
  uint64_t v601;
  uint64_t *v602;
  uint64_t v603;
  uint64_t v604;
  char *v605;
  char *v606;
  unint64_t *v607;
  unint64_t v608;
  unint64_t v609;
  uint64_t v611;
  uint64_t v612;
  int v613;
  uint64_t v614;
  _QWORD *v615;
  uint64_t v616;
  uint64_t v617;
  _QWORD *v618;
  unsigned int *v619;
  uint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  uint64_t v624;
  unsigned int v625;
  int v626;
  int v628;
  void *v629;
  int v630;
  uint64_t v631;
  void *v632;
  int v633;
  uint64_t v634;
  char v635;
  char v636;
  uint64_t *v637;
  uint64_t v638;
  char *v639;
  uint64_t *v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t *v644;
  char *v645;
  uint64_t v646;
  unint64_t v647;
  __int16 v648;
  char v649;
  uint64_t v650;
  int v651;
  uint64_t v652;
  uint64_t *v653;
  uint64_t v654;
  uint64_t v655;
  char v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t *v659;
  uint64_t v660;
  uint64_t v661;
  unint64_t *v662;
  unint64_t v663;
  void *v664;
  int v665;
  uint64_t v666;
  void *v667;
  int v668;
  uint64_t v669;
  uint64_t v670;
  int v671;
  char v672;
  int v673;
  char v674;
  int v675;
  uint64_t *v676;
  uint64_t *v677;
  uint64_t v678;
  uint64_t v679;
  int v680;
  uint64_t v681;
  uint64_t v682;
  char hasFnAttrOnCalledFunction;
  __int16 v684;
  uint64_t v685;
  int v686;
  uint64_t v687;
  uint64_t v688;
  unsigned int v689;
  uint64_t v690;
  uint64_t v691;
  int v692;
  uint64_t v693;
  _QWORD *v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  unsigned int v702;
  int v703;
  char v705;
  uint64_t v706;
  uint64_t v707;
  unsigned int v708;
  unint64_t v709;
  unsigned int v710;
  uint64_t v711;
  void **v712;
  uint64_t v713;
  uint64_t **v714;
  uint64_t inserted;
  const llvm::APInt *v716;
  uint64_t v717;
  uint64_t *v718;
  uint64_t v719;
  llvm::ConstantInt *v720;
  unint64_t v721;
  char v722;
  llvm::Value *v723;
  llvm::ValueHandleBase *v724;
  void *Impl;
  uint64_t v726;
  uint64_t v727;
  unsigned __int8 *v728;
  unsigned __int8 **v729;
  __int16 v730;
  int v731;
  BOOL v732;
  int v733;
  uint64_t v734;
  uint64_t v735;
  uint64_t v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  char **v741;
  char *v742;
  uint64_t *v743;
  uint64_t v744;
  _BOOL4 v745;
  char v746;
  uint64_t v747;
  uint64_t *v748;
  uint64_t v749;
  uint64_t v750;
  uint64_t *v751;
  uint64_t *v752;
  char *v753;
  uint64_t *v754;
  uint64_t *v755;
  void *v756;
  uint64_t *v757;
  uint64_t *v758;
  uint64_t v759;
  unint64_t v760;
  _QWORD *v761;
  _QWORD *v762;
  _BOOL8 result;
  int v764;
  unsigned int v765;
  void *v766;
  uint64_t v767;
  uint64_t v768;
  uint64_t *v769;
  char v770;
  int v771;
  int v772;
  uint64_t *v773;
  char *v774;
  uint64_t v775;
  uint64_t v776;
  uint64_t *v777;
  int v778;
  uint64_t v779;
  char v780;
  int v781;
  uint64_t *v782;
  unint64_t v783;
  char v784;
  llvm::SmallPtrSetImplBase *v785;
  uint64_t v786;
  _BOOL4 v787;
  uint64_t v788;
  uint64_t v789;
  uint64_t v790;
  uint64_t *v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  unsigned int v796;
  uint64_t *v797;
  uint64_t *v798;
  uint64_t v799;
  int v800;
  _BYTE v801[128];
  void *__p;
  uint64_t *v803;
  uint64_t v804;
  int v805;
  _BYTE v806[128];
  _BYTE *v807;
  void *v808;
  uint64_t v809;
  int v810;
  _BYTE v811[64];
  llvm::DominatorTree *v812[2];
  uint64_t v813;
  void *v814;
  uint64_t v815;
  int v816;
  _BYTE v817[128];
  void *v818;
  uint64_t v819;
  _BYTE v820[40];
  _QWORD *v821;
  __int128 v822;
  uint64_t v823;
  uint64_t v824;
  uint64_t v825;
  uint64_t v826;
  __int128 v827;
  __int128 v828;
  void *__dst;
  uint64_t v830;
  _BYTE v831[64];
  void *v832;
  uint64_t v833;
  _BYTE v834[64];
  int v835;
  __int128 v836;
  __int128 v837;
  __int128 v838;
  unsigned int v839;
  uint64_t *v840;
  uint64_t v841;
  unsigned int v842;
  _BYTE *v843;
  void *v844;
  uint64_t v845;
  int v846;
  _BYTE v847[128];
  void *v848;
  uint64_t v849;
  _BYTE v850[160];
  _BYTE *v851;
  void *v852;
  uint64_t v853;
  int v854;
  _BYTE v855[256];
  _BYTE *v856;
  void *v857;
  uint64_t v858;
  int v859;
  _BYTE v860[256];
  _BYTE *v861;
  void *__b;
  _BYTE v863[12];
  _BYTE v864[128];
  char v865;
  uint64_t v866;
  unsigned __int8 v867;
  char v868;
  _BYTE v869[32];
  void *__src;
  uint64_t v871;
  _BYTE v872[48];
  void *v873;
  unsigned int v874;
  void *v875;
  uint64_t v876;
  _BYTE v877[392];
  void *v878;
  uint64_t v879;
  _BYTE v880[512];
  void *v881;
  void *v882;
  uint64_t v883;
  __int128 v884;
  __int128 v885;
  __int128 v886;
  __int128 v887;
  uint64_t v888;
  void *v889;
  __int128 v890;
  __int128 v891;
  _QWORD v892[10];
  __int128 v893;
  __int128 v894;
  __n128 v895;
  __int128 v896;
  __int128 v897;
  _QWORD v898[8];
  void *v899;
  uint64_t v900;
  _BYTE v901[9];
  __int16 v902;
  __n128 v903;
  __int128 v904;
  void *v905;
  uint64_t v906;
  _BYTE v907[64];
  void *v908;
  uint64_t v909;
  _BYTE v910[64];
  __int128 v911;
  __int128 v912;
  void *v913;
  uint64_t v914;
  _BYTE v915[64];
  void *v916;
  uint64_t v917;
  _BYTE v918[80];
  void *v919;
  void *v920;
  uint64_t v921;
  int v922;
  _QWORD v923[19];

  v6 = MEMORY[0x1E0C80A78](a1, a2, a3, a4);
  v8 = v7;
  v9 = v6;
  v923[16] = *MEMORY[0x1E0C80C00];
  if (byte_1ED8085E0)
    *(_BYTE *)(v6 + 97) = 1;
  v10 = *(_QWORD *)(v6 + 56);
  if (v10)
    *(_WORD *)(v9 + 28) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v10 + 48))(v10, v7);
  v768 = v9;
  v11 = **(void ****)(v9 + 8);
  do
  {
    v12 = *v11;
    v11 += 2;
  }
  while (v12 != &llvm::DominatorTreeWrapperPass::ID);
  v13 = (uint64_t *)(*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v11 - 1) + 96))(*(v11 - 1), &llvm::DominatorTreeWrapperPass::ID);
  v14 = **(void ****)(v768 + 8);
  do
  {
    v15 = *v14;
    v14 += 2;
  }
  while (v15 != &llvm::PostDominatorTreeWrapperPass::ID);
  v16 = (_QWORD *)(*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v14 - 1) + 96))(*(v14 - 1), &llvm::PostDominatorTreeWrapperPass::ID);
  v17 = **(char ****)(v768 + 8);
  do
  {
    v18 = *v17;
    v17 += 2;
  }
  while (v18 != llvm::TargetTransformInfoWrapperPass::ID);
  v767 = v8;
  v19 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v17 - 1) + 96))(*(v17 - 1), llvm::TargetTransformInfoWrapperPass::ID);
  *(_QWORD *)&v822 = 0;
  v821 = 0;
  DWORD2(v822) = 0;
  v824 = 0;
  v823 = 0;
  LODWORD(v825) = 0;
  *(_QWORD *)&v827 = 0;
  v826 = 0;
  DWORD2(v827) = 0;
  v20 = *(_QWORD *)(v19 + 56);
  if (!v20)
  {
    sub_1C485C2F0();
LABEL_1585:
    (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
    goto LABEL_15;
  }
  v5 = v13 + 4;
  v4 = v16 + 4;
  v13 = &v823;
  (*(void (**)(_BYTE *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v20 + 48))(v869, v20, v767);
  v16 = (_QWORD *)(v19 + 64);
  v21 = *(_QWORD *)v869;
  if (!*(_BYTE *)(v19 + 72))
  {
    *(_QWORD *)(v19 + 64) = *(_QWORD *)v869;
    *(_BYTE *)(v19 + 72) = 1;
    goto LABEL_15;
  }
  *(_QWORD *)v869 = 0;
  v22 = *v16;
  *v16 = v21;
  if (v22)
  {
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    v23 = *(_QWORD *)v869;
    *(_QWORD *)v869 = 0;
    if (v23)
      goto LABEL_1585;
  }
LABEL_15:
  MEMORY[0x1CAA32FB4](0, 8);
  sub_1C4D8B440(v13);
  sub_1C4D8B52C((uint64_t *)&v821);
  v821 = v16;
  *(_QWORD *)&v822 = v5;
  v827 = 0u;
  v828 = 0u;
  *((_QWORD *)&v822 + 1) = v4;
  __dst = v831;
  v830 = 0x800000000;
  v832 = v834;
  v833 = 0x800000000;
  v836 = 0u;
  v837 = 0u;
  v838 = 0u;
  v839 = 0;
  v841 = 0;
  v840 = 0;
  v842 = 0;
  v843 = v847;
  v844 = v847;
  v845 = 16;
  v846 = 0;
  v848 = v850;
  v849 = 0x1400000000;
  v851 = v855;
  v852 = v855;
  v853 = 32;
  v854 = 0;
  v856 = v860;
  v857 = v860;
  v858 = 32;
  v859 = 0;
  v861 = v864;
  __b = v864;
  *(_QWORD *)v863 = 16;
  *(_DWORD *)&v863[8] = 0;
  v865 = 0;
  v24 = v767;
  v866 = v767;
  v868 = 0;
  v25 = *(_QWORD *)(v767 + 40) + 216;
  LOWORD(__src) = 260;
  *(_QWORD *)v869 = v25;
  llvm::Triple::Triple((uint64_t)&__p, (llvm::Twine *)v869);
  v835 = v805;
  v26 = *(_QWORD *)(v767 + 40);
  v823 = sub_1C5EA9FF0(v26, 1268, 0, 0, v27, v28, v29, v30);
  v824 = sub_1C5EA9FF0(v26, 1280, 0, 0, v31, v32, v33, v34);
  v825 = sub_1C5EA9FF0(v26, 2709, 0, 0, v35, v36, v37, v38);
  if (!v825)
    v825 = sub_1C5EA9FF0(v26, 2710, 0, 0, v39, v40, v41, v42);
  v826 = sub_1C5EA9FF0(v26, 2711, 0, 0, v39, v40, v41, v42);
  v43 = (*(unsigned __int16 *)(v767 + 18) >> 4) & 0x3FF;
  v44 = *(_QWORD *)(v767 + 40);
  if ((v43 - 103) >= 2)
  {
    if (v43 != 106 && v43 != 102
      || (*(_QWORD *)v869 = "agx.vertex_amp_mode",
          LOWORD(__src) = 259,
          !llvm::Module::getNamedMetadata(v44, (uint64_t)v869))
      && ((v113 = sub_1C5EA9FF0(*(_QWORD *)(v767 + 40), 2710, 0, 0, v45, v46, v47, v48)) == 0
       || !*(_QWORD *)(v113 + 8)))
    {
      v114 = 0;
      v115 = v768;
      goto LABEL_651;
    }
    v868 = 1;
  }
  *(_QWORD *)v869 = "agx.vertex_amp_mode";
  LOWORD(__src) = 259;
  NamedMetadata = llvm::Module::getNamedMetadata(v44, (uint64_t)v869);
  if (NamedMetadata)
  {
    v50 = *(_QWORD *)(*(_QWORD *)(***(_QWORD ***)(NamedMetadata + 48)
                                - 8 * *(unsigned int *)(***(_QWORD ***)(NamedMetadata + 48) + 8))
                    + 8);
    if (*(_QWORD *)v50 == 5)
    {
      if (*(_DWORD *)(v50 + 24) ^ 0x6E756F63 | *(unsigned __int8 *)(v50 + 28) ^ 0x74)
        v51 = 2;
      else
        v51 = 1;
    }
    else
    {
      v51 = 2;
    }
  }
  else
  {
    v51 = 0;
  }
  v865 = v51;
  *((_QWORD *)&v836 + 1) = sub_1C5615DDC(v44, (uint64_t)"agx.sample_rate", 15);
  *(_QWORD *)&v836 = *((_QWORD *)&v836 + 1);
  *(_QWORD *)&v837 = sub_1C5615DDC(v44, (uint64_t)"agx.color_sample_rate", 21);
  *(_QWORD *)v869 = "agx.fragment_rate";
  LOWORD(__src) = 259;
  v52 = llvm::Module::getNamedMetadata(v44, (uint64_t)v869);
  if (v52
    && (v53 = *(_QWORD *)(***(_QWORD ***)(v52 + 48) - 8 * *(unsigned int *)(***(_QWORD ***)(v52 + 48) + 8)),
        !*(_BYTE *)v53))
  {
    *((_QWORD *)&v837 + 1) = sub_1C5615DDC(v44, (uint64_t)"agx.sample_mapping", 18);
    v109 = *(_QWORD *)(v53 + 8);
    if (*(_QWORD *)v109 == 5)
    {
      v110 = *(_DWORD *)(v109 + 24);
      v111 = *(unsigned __int8 *)(v109 + 28);
      if (v110 == 1869377379 && v111 == 114)
      {
        v54 = v837;
        *((_QWORD *)&v836 + 1) = v837;
        goto LABEL_33;
      }
    }
  }
  else
  {
    *((_QWORD *)&v837 + 1) = sub_1C5615DDC(v44, (uint64_t)"agx.sample_mapping", 18);
  }
  v54 = v837;
LABEL_33:
  v783 = (unint64_t)&v838;
  if (!v54)
    *(_QWORD *)&v837 = *((_QWORD *)&v836 + 1);
  v55 = *(_QWORD *)(v866 + 80);
  v786 = v866 + 72;
  while (v55 != v786)
  {
    v56 = v55 - 24;
    v788 = v55;
    if (!v55)
      v56 = 0;
    v57 = v56 + 40;
    for (i = *(_QWORD *)(v56 + 48); i != v57; i = *(_QWORD *)(i + 8))
    {
      if (i)
        v59 = i - 24;
      else
        v59 = 0;
      v60 = sub_1C5615E28(&v821, v59);
      if ((v60 & 0xFFFD) == 0)
      {
        if (!sub_1C5615F70(v59))
          continue;
        v76 = *(unsigned __int8 *)(v59 + 16);
        if (!i || v76 != 60)
        {
          if (i && v76 == 61)
          {
            v81 = 1;
            v82 = 1;
          }
          else
          {
            if (i)
              v83 = (v76 - 66) >= 0xFFFFFFFE;
            else
              v83 = 0;
            v84 = !v83;
            if (v76 != 84 || v84 == 0)
              goto LABEL_85;
            v86 = *(_QWORD *)(v59 - 32);
            if (!v86
              || *(_BYTE *)(v86 + 16)
              || *(_QWORD *)(v86 + 24) != *(_QWORD *)(v59 + 72)
              || (*(_BYTE *)(v86 + 33) & 0x20) == 0)
            {
              goto LABEL_85;
            }
            v81 = 0;
            v87 = *(_QWORD *)(i - 56);
            v88 = *(_DWORD *)(v87 + 36);
            if (v88 != 2142 && v88 != 2144)
            {
              if (sub_1C55A9F2C(*(_DWORD *)(v87 + 36)))
              {
                v81 = 2;
              }
              else if ((v88 - 2784) >= 3)
              {
                if (sub_1C55A9F50(v88))
                {
                  v81 = 3;
                }
                else if ((v88 - 2841) >= 0xFFFFFFFD)
                {
                  v81 = 0;
                }
                else
                {
                  v81 = -1;
                }
              }
              else
              {
                v81 = 0;
              }
            }
            v100 = sub_1C55A9F2C(v88);
            if ((v88 - 2784) < 3 || v100)
              goto LABEL_85;
            v101 = sub_1C55A9F50(v88);
            v82 = (v88 - 2838) < 3 || v101;
          }
          if (v81 != -1 && (v82 & 1) != 0)
            continue;
        }
LABEL_85:
        if (sub_1C561615C(v59))
          continue;
        if (v842)
        {
          v77 = (v842 - 1) & ((v59 >> 4) ^ (v59 >> 9));
          v78 = v840[2 * v77];
          if (v78 == v59)
            continue;
          v79 = 1;
          while (v78 != -4096)
          {
            v80 = v77 + v79++;
            v77 = v80 & (v842 - 1);
            v78 = v840[2 * v77];
            if (v78 == v59)
              goto LABEL_137;
          }
        }
        if ((sub_1C5616254(v59) & 1) != 0)
          break;
        *(_QWORD *)v869 = v59;
        if (v842)
        {
          v89 = (v842 - 1) & ((v59 >> 4) ^ (v59 >> 9));
          v90 = &v840[2 * v89];
          v91 = *v90;
          if (v59 != *v90)
          {
            v92 = 0;
            v93 = 1;
            while (v91 != -4096)
            {
              if (v92)
                v94 = 0;
              else
                v94 = v91 == -8192;
              if (v94)
                v92 = v90;
              v95 = v89 + v93++;
              v89 = v95 & (v842 - 1);
              v90 = &v840[2 * v89];
              v91 = *v90;
              if (v59 == *v90)
                goto LABEL_130;
            }
            if (v92)
              v96 = v92;
            else
              v96 = v90;
LABEL_129:
            v90 = sub_1C56163E4((uint64_t)&v840, (uint64_t *)v869, v96);
            *v90 = v59;
            *((_WORD *)v90 + 4) = 0;
            *((_BYTE *)v90 + 10) = 0;
          }
LABEL_130:
          v97 = v868 == 0;
          if (v868)
            v98 = 1;
          else
            v98 = 5;
          *((_WORD *)v90 + 4) = v98;
          if (v97)
            v99 = 2;
          else
            v99 = 4;
          *((_BYTE *)v90 + 10) |= v99;
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v843, v59);
          continue;
        }
        v96 = 0;
        goto LABEL_129;
      }
      v61 = *(_QWORD *)(v59 + 8);
      if (v61)
      {
        v62 = v60;
        do
        {
          if (*(unsigned __int8 *)(*(_QWORD *)(v61 + 24) + 16) <= 0x1Bu)
            v63 = 0;
          else
            v63 = *(_QWORD *)(v61 + 24);
          *(_QWORD *)v869 = v63;
          if (!v63)
            goto LABEL_66;
          if (*(_QWORD *)(v63 + 8))
            goto LABEL_51;
          if (!sub_1C5615F70(v63))
          {
            if (*(unsigned __int8 *)(v63 + 16) - 29 > 0xA)
              goto LABEL_66;
LABEL_51:
            v64 = sub_1C5615F04((uint64_t)&v840, (uint64_t *)v869);
            *(_WORD *)v64 = v62;
            *((_BYTE *)v64 + 2) = BYTE2(v62);
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v843, v63);
            goto LABEL_66;
          }
          if (*(_BYTE *)(v59 + 16) == 84)
          {
            v65 = *(_QWORD *)(v59 - 32);
            if (!v65)
              goto LABEL_58;
            if (!*(_BYTE *)(v65 + 16) && *(_QWORD *)(v65 + 24) == *(_QWORD *)(v59 + 72))
            {
              if ((*(_BYTE *)(v65 + 33) & 0x20) != 0)
                v65 = v59;
              else
                v65 = 0;
              goto LABEL_58;
            }
          }
          v65 = 0;
LABEL_58:
          if (*(_BYTE *)(v63 + 16) != 84)
            goto LABEL_62;
          v66 = *(_QWORD *)(v63 - 32);
          if (!v66 || *(_BYTE *)(v66 + 16) || *(_QWORD *)(v66 + 24) != *(_QWORD *)(v63 + 72))
            goto LABEL_62;
          v69 = *(_DWORD *)(v66 + 32) & 0x2000;
          v70 = v69 ? v63 : 0;
          if (!v65 || !v69)
            goto LABEL_62;
          v71 = *(_DWORD *)(v70 + 20);
          v72 = v71 & 0x7FFFFFF;
          if ((v71 & 0x7FFFFFF) != 0)
          {
            v73 = sub_1C5E9D9E4(*(_DWORD *)(*(_QWORD *)(v70 - 32) + 36));
            v74 = (_QWORD *)(v70 - 32 * v72);
            v75 = v73;
            while (!v75 || *v74 != v59)
            {
              v74 += 4;
              --v75;
              if (!--v72)
                goto LABEL_66;
            }
LABEL_62:
            v67 = sub_1C56160D4((uint64_t)&v838, (uint64_t *)v869);
            v68 = *((unsigned __int16 *)v67 + 8);
            if (v68 <= (unsigned __int16)v62)
              LOWORD(v68) = v62;
            *((_BYTE *)v67 + 18) |= BYTE2(v62);
            *((_WORD *)v67 + 8) = v68;
            *(_BYTE *)v67 = sub_1C561615C(v63);
          }
LABEL_66:
          v61 = *(_QWORD *)(v61 + 8);
        }
        while (v61);
      }
LABEL_137:
      ;
    }
    v55 = *(_QWORD *)(v788 + 8);
  }
  v102 = v841;
  v103 = v840;
  v104 = v842;
  v105 = &v840[2 * v842];
  v106 = v842;
  v107 = v105;
  if ((_DWORD)v841)
  {
    if (v842)
    {
      v108 = 16 * v842;
      v107 = v840;
      while ((*v107 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v107 += 2;
        v108 -= 16;
        if (!v108)
        {
          v106 = v842;
          v107 = &v840[2 * v842];
          goto LABEL_172;
        }
      }
      v106 = v842;
    }
    else
    {
      v106 = 0;
      v107 = v840;
    }
  }
LABEL_172:
  v116 = &v840[2 * v106];
  if (v107 == v116)
    goto LABEL_251;
  do
  {
    v117 = *v107;
    if (*(_BYTE *)(*v107 + 16) != 84)
      goto LABEL_241;
    v118 = *(_QWORD *)(v117 - 32);
    if (!v118
      || *(_BYTE *)(v118 + 16)
      || *(_QWORD *)(v118 + 24) != *(_QWORD *)(v117 + 72)
      || (*(_BYTE *)(v118 + 33) & 0x20) == 0
      || (sub_1C5E9D850(*(_DWORD *)(v118 + 36)) & 1) == 0)
    {
      goto LABEL_241;
    }
    v119 = *(_QWORD *)(v117 + 40);
    *(_QWORD *)v869 = &__src;
    *(_QWORD *)&v869[8] = &__src;
    *(_QWORD *)&v869[16] = 4;
    *(_DWORD *)&v869[24] = 0;
    v120 = *(_QWORD *)(v117 + 8);
    if (!v120)
    {
      LODWORD(v121) = 0;
      goto LABEL_202;
    }
    LODWORD(v121) = 0;
    v122 = 4;
    p_src = &__src;
    v124 = &__src;
    while (1)
    {
      v125 = *(_QWORD *)(v120 + 24);
      v126 = *(unsigned __int8 *)(v125 + 16);
      if (v125)
        v127 = v126 >= 0x1C;
      else
        v127 = 0;
      if (!v127)
        goto LABEL_197;
      v128 = *(_QWORD *)(v125 + 40);
      if (v126 == 83)
      {
        v129 = *(_DWORD *)(v125 + 20);
        v130 = v129 & 0x7FFFFFF;
        if ((v129 & 0x7FFFFFF) != 0)
        {
          v131 = 0;
          v132 = 0;
          v133 = 32 * v130;
          v134 = v125 - 32 * v130;
          do
          {
            if ((v129 & 0x40000000) != 0)
            {
              v136 = *(_QWORD *)(v125 - 8);
              v135 = *(_QWORD *)(v136 + v132);
            }
            else
            {
              v135 = *(_QWORD *)(v134 + v132);
              v136 = v134;
            }
            if (v135 == v117)
              v128 = *(_QWORD *)(v136 + 32 * *(unsigned int *)(v125 + 60) + v131);
            v132 += 32;
            v131 += 8;
          }
          while (v133 != v132);
        }
      }
      if (v128 == v119)
        break;
      sub_1C4774094((llvm::SmallPtrSetImplBase *)v869, v128);
      v124 = *(void ***)&v869[8];
      p_src = *(void ***)v869;
      LODWORD(v121) = *(_DWORD *)&v869[20];
      v122 = *(_DWORD *)&v869[16];
LABEL_197:
      v120 = *(_QWORD *)(v120 + 8);
      if (!v120)
        goto LABEL_202;
    }
    if (v124 == p_src)
      goto LABEL_201;
    if (v122 >= 0x21 && 4 * ((int)v121 - *(_DWORD *)&v869[24]) < v122)
    {
      free(v124);
      v153 = *(_DWORD *)&v869[20] - *(_DWORD *)&v869[24];
      v154 = 1 << (33 - __clz(*(_DWORD *)&v869[20] - *(_DWORD *)&v869[24] - 1));
      *(_DWORD *)&v869[24] = 0;
      if (v153 <= 0x10)
        v155 = 32;
      else
        v155 = v154;
      *(_QWORD *)&v869[16] = v155;
      v156 = malloc_type_malloc(8 * v155, 0x4065EBACuLL);
      if (v156)
      {
        *(_QWORD *)&v869[8] = v156;
        memset(v156, 255, 8 * *(unsigned int *)&v869[16]);
        LODWORD(v121) = *(_DWORD *)&v869[20];
        goto LABEL_202;
      }
LABEL_1586:
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    }
    memset(v124, 255, 8 * v122);
LABEL_201:
    LODWORD(v121) = 0;
    *(_DWORD *)&v869[24] = 0;
    *(_DWORD *)&v869[20] = 0;
LABEL_202:
    if ((_DWORD)v121 != *(_DWORD *)&v869[24])
    {
      v137 = *(uint64_t **)&v869[8];
      if (*(_QWORD *)&v869[8] == *(_QWORD *)v869)
        v121 = v121;
      else
        v121 = *(unsigned int *)&v869[16];
      v138 = (uint64_t *)(*(_QWORD *)&v869[8] + 8 * v121);
      if ((_DWORD)v121)
      {
        v139 = 8 * v121;
        v140 = v139;
        v141 = *(uint64_t **)&v869[8];
        do
        {
          NearestCommonDominator = *v141;
          if ((unint64_t)*v141 < 0xFFFFFFFFFFFFFFFELL)
            goto LABEL_211;
          ++v141;
          v140 -= 8;
        }
        while (v140);
        NearestCommonDominator = *v138;
LABEL_211:
        while (1)
        {
          v143 = *v137;
          if ((unint64_t)*v137 < 0xFFFFFFFFFFFFFFFELL)
            break;
          ++v137;
          v139 -= 8;
          if (!v139)
            goto LABEL_220;
        }
      }
      else
      {
        v143 = **(_QWORD **)&v869[8];
        NearestCommonDominator = **(_QWORD **)&v869[8];
      }
      if (v137 != v138)
      {
LABEL_216:
        NearestCommonDominator = llvm::DominatorTreeBase<llvm::BasicBlock,false>::findNearestCommonDominator(v822, NearestCommonDominator, v143);
        v144 = (unint64_t *)(v137 + 1);
        while (v144 != (unint64_t *)v138)
        {
          v145 = *v144++;
          v143 = v145;
          if (v145 <= 0xFFFFFFFFFFFFFFFDLL)
          {
            v137 = (uint64_t *)(v144 - 1);
            goto LABEL_216;
          }
        }
      }
LABEL_220:
      if (NearestCommonDominator != v119)
      {
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v117 + 40) + 40, (uint64_t ***)v117);
        v146 = *(_QWORD *)(v117 + 24);
        v147 = *(_QWORD **)(v117 + 32);
        v148 = v117 + 24;
        *v147 = v146;
        *(_QWORD *)(v146 + 8) = v147;
        *(_QWORD *)(v117 + 24) = 0;
        *(_QWORD *)(v117 + 32) = 0;
        v149 = NearestCommonDominator + 40;
        for (j = *(_QWORD *)(NearestCommonDominator + 48); j != v149; j = *(_QWORD *)(j + 8))
        {
          v151 = j - 24;
          if (j)
            v152 = j - 24;
          else
            v152 = 0;
          if (*(_BYTE *)(v152 + 16) != 83)
            goto LABEL_237;
        }
        v151 = 0;
LABEL_237:
        v157 = *(_QWORD *)(v151 + 40);
        *(_QWORD *)(v117 + 40) = v157;
        *(_WORD *)(v157 + 18) &= ~0x8000u;
        if ((*(_BYTE *)(v117 + 23) & 0x10) != 0)
        {
          v161 = *(_QWORD *)(v157 + 56);
          if (v161)
          {
            v162 = *(llvm::ValueSymbolTable **)(v161 + 104);
            if (v162)
              llvm::ValueSymbolTable::reinsertValue(v162, (llvm::Value *)v117);
          }
        }
        v159 = *(_QWORD *)(v151 + 24);
        v158 = (_QWORD *)(v151 + 24);
        *(_QWORD *)(v117 + 24) = v159;
        *(_QWORD *)(v117 + 32) = v158;
        *(_QWORD *)(v159 + 8) = v148;
        *v158 = v148;
      }
    }
    if (*(_QWORD *)&v869[8] != *(_QWORD *)v869)
      free(*(void **)&v869[8]);
LABEL_241:
    v160 = v107 + 2;
    v107 = v105;
    if (v160 != v105)
    {
      v107 = v160;
      while ((*v107 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v107 += 2;
        if (v107 == v105)
        {
          v107 = v105;
          break;
        }
      }
    }
  }
  while (v107 != v116);
  v102 = v841;
  v103 = v840;
  v104 = v842;
LABEL_251:
  if (v102)
  {
    if ((_DWORD)v104)
    {
      v163 = 16 * v104;
      v164 = v103;
      while ((*v164 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v164 += 2;
        v163 -= 16;
        if (!v163)
          goto LABEL_256;
      }
    }
    else
    {
      v164 = v103;
    }
  }
  else
  {
LABEL_256:
    v164 = &v103[2 * v104];
  }
  v773 = &v103[2 * v104];
  if (v164 == v773)
    goto LABEL_463;
  v784 = 0;
  v769 = &v103[2 * v104];
  while (2)
  {
    v881 = (char *)&v884 + 8;
    v882 = (char *)&v884 + 8;
    v883 = 16;
    LODWORD(v884) = 0;
    v165 = *v164;
    *(_QWORD *)&v911 = &v912;
    *((_QWORD *)&v911 + 1) = 0x500000000;
    v166 = (__n128 *)&v911;
    sub_1C4848C0C((unsigned int *)&v911, 1uLL, v165);
    v903.n128_u64[0] = (unint64_t)&v904;
    v903.n128_u64[1] = 0x500000000;
    v167 = &v903;
    v168 = DWORD2(v911);
    v777 = v164;
    while (2)
    {
      v169 = (unsigned int *)v167;
      if (v168)
      {
        v775 = (uint64_t)&v167[1];
        while (2)
        {
          v170 = *(_QWORD *)(v166->n128_u64[0] + 8 * v168 - 8);
          v166->n128_u32[2] = v168 - 1;
          if (*(unsigned __int8 *)(v170 + 16) <= 0x1Bu)
            v171 = 0;
          else
            v171 = v170;
          v807 = (_BYTE *)v171;
          if (!v171)
            goto LABEL_375;
          v172 = sub_1C477672C((uint64_t)&v881, v171);
          v173 = v882 == v881 ? (uint64_t *)((char *)&v883 + 4) : &v883;
          if (v172 != (_QWORD *)((char *)v882 + 8 * *(unsigned int *)v173))
            goto LABEL_375;
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v881, v171);
          if (sub_1C5615F70(v171))
          {
            v174 = sub_1C56160D4((uint64_t)&v838, (uint64_t *)&v807);
            v175 = v174;
            v176 = *((unsigned __int16 *)v174 + 8);
            if (v176 <= *((unsigned __int16 *)v164 + 4))
              LOWORD(v176) = *((_WORD *)v164 + 4);
            *((_BYTE *)v174 + 18) |= *((_BYTE *)v164 + 10);
            *((_WORD *)v174 + 8) = v176;
            v177 = *v164;
            v178 = *((unsigned int *)v174 + 8);
            if (v178 >= *((unsigned int *)v174 + 9))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v174 + 3), (uint64_t)(v174 + 5), v178 + 1, 8);
              v178 = *((unsigned int *)v175 + 8);
            }
            *(_QWORD *)(v175[3] + 8 * v178) = v177;
            ++*((_DWORD *)v175 + 8);
            v179 = sub_1C561615C(v171);
            *(_BYTE *)v175 = v179;
            v784 |= v179 == 0;
            goto LABEL_375;
          }
          if (*(unsigned __int8 *)(v171 + 16) - 29 <= 0xA)
          {
            v180 = *(_QWORD *)(v171 + 40);
            v181 = *(_QWORD *)(*((_QWORD *)&v822 + 1) + 48);
            v182 = *(unsigned int *)(*((_QWORD *)&v822 + 1) + 64);
            if (!(_DWORD)v182)
              goto LABEL_284;
            LODWORD(v183) = ((v180 >> 4) ^ (v180 >> 9)) & (v182 - 1);
            v184 = (uint64_t *)(v181 + 16 * v183);
            v185 = *v184;
            if (v180 != *v184)
            {
              v186 = 1;
              while (v185 != -4096)
              {
                v187 = v183 + v186++;
                v183 = v187 & (v182 - 1);
                v185 = *(_QWORD *)(v181 + 16 * v183);
                if (v180 == v185)
                {
                  v184 = (uint64_t *)(v181 + 16 * v183);
                  goto LABEL_285;
                }
              }
LABEL_284:
              v184 = (uint64_t *)(v181 + 16 * v182);
            }
LABEL_285:
            v789 = **(_QWORD **)(v184[1] + 8);
            v188 = *(_QWORD *)(v180 + 40);
            if (v188 == v180 + 40)
            {
LABEL_301:
              v191 = 0;
              v192 = 0;
              v812[0] = (llvm::DominatorTree *)&v813;
              HIDWORD(v812[1]) = 10;
              goto LABEL_302;
            }
            if (v188)
              v189 = v188 - 24;
            else
              v189 = 0;
            v190 = *(unsigned __int8 *)(v189 + 16);
            if (v190 == 30)
            {
              if ((*(_DWORD *)(v189 + 20) & 0x7FFFFFF) == 3)
                v191 = 2;
              else
                v191 = 1;
LABEL_293:
              v812[0] = (llvm::DominatorTree *)&v813;
              HIDWORD(v812[1]) = 10;
LABEL_294:
              v192 = 0;
              if (v191)
              {
                v193 = 0;
                v194 = &v813;
                goto LABEL_296;
              }
              v191 = 0;
LABEL_302:
              v199 = &v813;
            }
            else
            {
              v191 = 0;
              switch(*(_BYTE *)(v189 + 16))
              {
                case 0x1D:
                case 0x22:
                case 0x23:
                  goto LABEL_293;
                case 0x1E:
LABEL_1582:
                  __break(1u);
                  return result;
                case 0x1F:
                  v191 = (*(_DWORD *)(v189 + 20) >> 1) & 0x3FFFFFF;
                  goto LABEL_379;
                case 0x20:
                case 0x26:
                  v191 = (*(_DWORD *)(v189 + 20) & 0x7FFFFFF) - 1;
                  goto LABEL_379;
                case 0x21:
                  v191 = 2;
                  goto LABEL_293;
                case 0x24:
                  v191 = *(_WORD *)(v189 + 18) & 1;
                  goto LABEL_293;
                case 0x25:
                  v191 = 1;
                  goto LABEL_293;
                case 0x27:
                  v191 = *(_DWORD *)(v189 + 80) + 1;
LABEL_379:
                  v812[0] = (llvm::DominatorTree *)&v813;
                  v812[1] = (llvm::DominatorTree *)0xA00000000;
                  if (v191 < 0xB)
                    goto LABEL_294;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v812, (uint64_t)&v813, v191, 8);
                  v192 = (int)v812[1];
                  v194 = (uint64_t *)v812[0];
                  v190 = *(unsigned __int8 *)(v189 + 16);
                  v193 = LODWORD(v812[1]);
                  break;
                default:
                  goto LABEL_301;
              }
LABEL_296:
              v195 = 0;
              v196 = 0;
              v197 = &v194[v193];
              v198 = v189 - 64;
              do
              {
                if (v190 != 30)
                  __asm { BR              X1 }
                v197[v196] = *(_QWORD *)(v189 - 32 - 32 * v196);
                ++v196;
                v195 += 2;
                v198 += 32;
              }
              while (v191 != v196);
              v199 = (uint64_t *)v812[0];
            }
            *(_QWORD *)v869 = &__src;
            *(_QWORD *)&v869[8] = &__src;
            *(_QWORD *)&v869[16] = 16;
            *(_DWORD *)&v869[24] = 0;
            LODWORD(v812[1]) = v192 + v191;
            if (v192 + v191)
            {
              v200 = 8 * (v192 + v191);
              do
              {
                v201 = *v199++;
                sub_1C4774094((llvm::SmallPtrSetImplBase *)v869, v201);
                v200 -= 8;
              }
              while (v200);
              while (LODWORD(v812[1]))
              {
                v202 = *((_QWORD *)v812[0] + LODWORD(v812[1]) - 1);
                --LODWORD(v812[1]);
                v919 = &v921;
                v920 = (void *)0x400000000;
                v203 = (uint64_t *)(v202 + 40);
                for (k = *(uint64_t **)(v202 + 48); ; k = (uint64_t *)v797[1])
                {
                  v797 = k;
                  if (k == v203)
                    break;
                  if (k)
                    v205 = k - 3;
                  else
                    v205 = 0;
                  if (*((_BYTE *)v205 + 16) == 83)
                  {
                    v206 = v169[2];
                    if (v206 >= v169[3])
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v169, v775, v206 + 1, 8);
                      v206 = v169[2];
                    }
                    *(_QWORD *)(*(_QWORD *)v169 + 8 * v206) = v205;
                    ++v169[2];
                  }
                  v207 = sub_1C56168B0(&v797);
                  v208 = v797 - 3;
                  if (v797)
                    v209 = (uint64_t)(v797 - 3);
                  else
                    v209 = 0;
                  if (v207 && v797 && *(_DWORD *)(*(_QWORD *)(v209 - 32) + 36) == 2470)
                  {
                    v210 = v169[2];
                    if (v210 >= v169[3])
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v169, v775, v210 + 1, 8);
                      v210 = v169[2];
                    }
                    v211 = (void **)v169;
                  }
                  else
                  {
                    if (!sub_1C5615F70(v209))
                      continue;
                    if (v797)
                      v208 = v797 - 3;
                    else
                      v208 = 0;
                    v210 = v920;
                    v211 = &v919;
                    if (v920 >= (unint64_t)HIDWORD(v920))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v919, (uint64_t)&v921, v920 + 1, 8);
                      v210 = v920;
                    }
                  }
                  *((_QWORD *)*v211 + v210) = v208;
                  ++*((_DWORD *)v211 + 2);
                }
                if (v202 != v789)
                {
                  if ((_DWORD)v920)
                  {
                    v212 = (uint64_t *)v919;
                    v213 = v169[2];
                    v214 = 8 * v920;
                    do
                    {
                      v215 = *v212;
                      if (v213 >= v169[3])
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v169, v775, v213 + 1, 8);
                        v213 = v169[2];
                      }
                      *(_QWORD *)(*(_QWORD *)v169 + 8 * v213) = v215;
                      v213 = v169[2] + 1;
                      v169[2] = v213;
                      ++v212;
                      v214 -= 8;
                    }
                    while (v214);
                  }
                  v216 = (_QWORD *)*v203;
                  if ((uint64_t *)*v203 != v203)
                  {
                    if (v216)
                      v217 = v216 - 3;
                    else
                      v217 = 0;
                    v218 = *((unsigned __int8 *)v217 + 16);
                    v219 = v218 - 29;
                    if (v218 != 30)
                    {
                      v220 = 2;
                      switch(v219)
                      {
                        case 1:
                          goto LABEL_1582;
                        case 2:
                          v220 = (*((_DWORD *)v217 + 5) >> 1) & 0x3FFFFFF;
                          goto LABEL_362;
                        case 3:
                        case 9:
                          v220 = (*((_DWORD *)v217 + 5) & 0x7FFFFFF) - 1;
                          goto LABEL_362;
                        case 4:
                          goto LABEL_347;
                        case 7:
                          v220 = *((_WORD *)v217 + 9) & 1;
                          goto LABEL_362;
                        case 8:
                          v220 = 1;
                          goto LABEL_347;
                        case 10:
                          v220 = *((_DWORD *)v217 + 20) + 1;
LABEL_362:
                          if (!v220)
                            goto LABEL_359;
                          goto LABEL_347;
                        default:
                          goto LABEL_359;
                      }
                    }
                    if ((*((_DWORD *)v217 + 5) & 0x7FFFFFF) == 3)
                      v220 = 2;
                    else
                      v220 = 1;
LABEL_347:
                    v221 = 0;
                    v222 = 0;
                    v223 = v217 - 4;
                    v224 = v217 - 8;
                    v225 = v220;
                    do
                    {
                      v226 = *((unsigned __int8 *)v217 + 16);
                      if (v226 != 30)
                        __asm { BR              X9 }
                      sub_1C4774094((llvm::SmallPtrSetImplBase *)v869, v223[-4 * v222]);
                      if (v227)
                      {
                        v228 = *((unsigned __int8 *)v217 + 16);
                        if (v228 != 30)
                          __asm { BR              X9 }
                        v229 = v223[-4 * v222];
                        v230 = LODWORD(v812[1]);
                        if (LODWORD(v812[1]) >= (unint64_t)HIDWORD(v812[1]))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v812, (uint64_t)&v813, LODWORD(v812[1]) + 1, 8);
                          v230 = LODWORD(v812[1]);
                        }
                        *((_QWORD *)v812[0] + v230) = v229;
                        ++LODWORD(v812[1]);
                      }
                      ++v222;
                      v221 += 2;
                      v224 += 4;
                    }
                    while (v225 != v222);
                  }
                }
LABEL_359:
                if (v919 != &v921)
                  free(v919);
              }
            }
            if (*(_QWORD *)&v869[8] != *(_QWORD *)v869)
              free(*(void **)&v869[8]);
            v164 = v777;
            if ((uint64_t *)v812[0] != &v813)
              free(v812[0]);
            v170 = (uint64_t)v807;
          }
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v843, v170);
          sub_1C528A680(v169, *(_QWORD *)(v170 + 8), 0);
LABEL_375:
          v168 = v166->n128_u32[2];
          if (!v168)
            break;
          continue;
        }
      }
      v168 = v169[2];
      v167 = v166;
      v166 = (__n128 *)v169;
      if (v168)
        continue;
      break;
    }
    if ((__int128 *)v903.n128_u64[0] != &v904)
      free((void *)v903.n128_u64[0]);
    if ((__int128 *)v911 != &v912)
      free((void *)v911);
    if (v882 != v881)
      free(v882);
    v231 = v164 + 2;
    v164 = v769;
    if (v231 != v769)
    {
      v164 = v231;
      while ((*v164 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v164 += 2;
        if (v164 == v769)
        {
          v164 = v769;
          break;
        }
      }
    }
    if (v164 != v773)
      continue;
    break;
  }
  if ((v784 & 1) == 0)
    goto LABEL_463;
  v232 = v866 + 72;
  for (m = *(_QWORD *)(v866 + 80); ; m = *(_QWORD *)(m + 8))
  {
    if (m == v232)
      goto LABEL_463;
    v234 = m - 24;
    if (!m)
      v234 = 0;
    v235 = *(_QWORD *)(v234 + 48);
    if (v235 != v234 + 40)
      break;
  }
  while (2)
  {
    if (v235)
      v236 = v235 - 24;
    else
      v236 = 0;
    if (!v839)
    {
LABEL_416:
      if (!sub_1C5615F70(v236))
        goto LABEL_451;
      if ((sub_1C5616254(v236) & 1) != 0)
        goto LABEL_463;
      *(_QWORD *)v869 = v236;
      if (v839)
      {
        v241 = (v839 - 1) & ((v236 >> 4) ^ (v236 >> 9));
        v242 = (_QWORD *)(v838 + (v241 << 6));
        v243 = *v242;
        if (v236 == *v242)
        {
LABEL_431:
          v249 = &v840[2 * v842];
          if ((_DWORD)v841)
          {
            if (v842)
            {
              v250 = 16 * v842;
              v251 = v840;
              while ((*v251 | 0x1000) == 0xFFFFFFFFFFFFF000)
              {
                v251 += 2;
                v250 -= 16;
                if (!v250)
                  goto LABEL_436;
              }
            }
            else
            {
              v251 = v840;
            }
          }
          else
          {
LABEL_436:
            v251 = &v840[2 * v842];
          }
          v252 = &v840[2 * v842];
          if (v251 != v252)
          {
            v253 = (uint64_t)(v242 + 4);
            v254 = *((_DWORD *)v242 + 10);
            do
            {
              v255 = *((unsigned __int16 *)v242 + 12);
              if (v255 <= *((unsigned __int16 *)v251 + 4))
                LOWORD(v255) = *((_WORD *)v251 + 4);
              *((_BYTE *)v242 + 26) |= *((_BYTE *)v251 + 10);
              *((_WORD *)v242 + 12) = v255;
              v256 = *v251;
              if (v254 >= *((_DWORD *)v242 + 11))
              {
                v790 = v253;
                llvm::SmallVectorBase<unsigned int>::grow_pod(v253, (uint64_t)(v242 + 6), v254 + 1, 8);
                v253 = v790;
                v254 = *((_DWORD *)v242 + 10);
              }
              *(_QWORD *)(v242[4] + 8 * v254) = v256;
              v254 = *((_DWORD *)v242 + 10) + 1;
              *((_DWORD *)v242 + 10) = v254;
              v257 = v251 + 2;
              v251 = v249;
              if (v257 != v249)
              {
                v251 = v257;
                while ((*v251 | 0x1000) == 0xFFFFFFFFFFFFF000)
                {
                  v251 += 2;
                  if (v251 == v249)
                  {
                    v251 = v249;
                    break;
                  }
                }
              }
            }
            while (v251 != v252);
          }
          *((_BYTE *)v242 + 8) = sub_1C561615C(v236);
          goto LABEL_451;
        }
        v244 = 0;
        v245 = 1;
        while (v243 != -4096)
        {
          if (v244)
            v246 = 0;
          else
            v246 = v243 == -8192;
          if (v246)
            v244 = v242;
          v247 = v241 + v245++;
          v241 = v247 & (v839 - 1);
          v242 = (_QWORD *)(v838 + (v241 << 6));
          v243 = *v242;
          if (v236 == *v242)
            goto LABEL_431;
        }
        if (v244)
          v248 = v244;
        else
          v248 = v242;
      }
      else
      {
        v248 = 0;
      }
      v242 = sub_1C5616630((uint64_t)&v838, (uint64_t *)v869, v248);
      *v242 = v236;
      *((_BYTE *)v242 + 8) = 0;
      v242[2] = 0;
      *((_WORD *)v242 + 12) = 0;
      *((_BYTE *)v242 + 26) = 0;
      v242[4] = v242 + 6;
      v242[5] = 0x200000000;
      goto LABEL_431;
    }
    v237 = ((v236 >> 4) ^ (v236 >> 9)) & (v839 - 1);
    v238 = *(_QWORD *)(v838 + ((unint64_t)v237 << 6));
    if (v236 != v238)
    {
      v239 = 1;
      while (v238 != -4096)
      {
        v240 = v237 + v239++;
        v237 = v240 & (v839 - 1);
        v238 = *(_QWORD *)(v838 + ((unint64_t)v237 << 6));
        if (v236 == v238)
          goto LABEL_451;
      }
      goto LABEL_416;
    }
LABEL_451:
    v235 = *(_QWORD *)(v235 + 8);
    v258 = m - 24;
    if (!m)
      v258 = 0;
    if (v235 != v258 + 40)
    {
LABEL_458:
      if (m == v232)
        goto LABEL_463;
      continue;
    }
    break;
  }
  while (1)
  {
    m = *(_QWORD *)(m + 8);
    if (m == v232)
      break;
    v259 = m - 24;
    if (!m)
      v259 = 0;
    v235 = *(_QWORD *)(v259 + 48);
    if (v235 != v259 + 40)
      goto LABEL_458;
  }
LABEL_463:
  if (!DWORD2(v838))
  {
    v114 = 0;
    v24 = v767;
    v115 = v768;
    goto LABEL_651;
  }
  v903.n128_u64[0] = (unint64_t)&v905;
  v903.n128_u64[1] = (unint64_t)&v905;
  *(_QWORD *)&v904 = 8;
  DWORD2(v904) = 0;
  v919 = v923;
  v920 = v923;
  v921 = 8;
  v922 = 0;
  if (v839)
  {
    v260 = (unint64_t)v839 << 6;
    v261 = v838;
    while ((*(_QWORD *)v261 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      v261 += 64;
      v260 -= 64;
      if (!v260)
        goto LABEL_487;
    }
  }
  else
  {
    v261 = v838;
  }
  v262 = v838 + ((unint64_t)v839 << 6);
  if (v261 != v262)
  {
    v263 = *(_QWORD *)v261;
LABEL_473:
    v264 = *(_DWORD *)(v261 + 23);
    *(_OWORD *)&v869[8] = *(_OWORD *)(v261 + 8);
    *(_DWORD *)&v869[23] = v264;
    *(_QWORD *)v869 = v263;
    __src = v872;
    v871 = 0x200000000;
    v265 = *(_DWORD *)(v261 + 40);
    if (v265 && v869 != (_BYTE *)v261)
    {
      if (v265 < 3)
      {
        v266 = v872;
        v267 = *(unsigned int *)(v261 + 40);
        goto LABEL_477;
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v872, *(unsigned int *)(v261 + 40), 8);
      v267 = *(unsigned int *)(v261 + 40);
      if ((_DWORD)v267)
      {
        v266 = __src;
LABEL_477:
        memcpy(v266, *(const void **)(v261 + 32), 8 * v267);
      }
      LODWORD(v871) = v265;
      v263 = *(_QWORD *)v869;
    }
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v903, v263);
    if (__src != v872)
      free(__src);
    while (1)
    {
      v261 += 64;
      if (v261 == v262)
        break;
      v263 = *(_QWORD *)v261;
      if ((*(_QWORD *)v261 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (v261 != v262)
          goto LABEL_473;
        break;
      }
    }
  }
LABEL_487:
  v268 = &v840[2 * v842];
  if ((_DWORD)v841)
  {
    if (v842)
    {
      v269 = 16 * v842;
      v270 = v840;
      while ((*v270 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v270 += 2;
        v269 -= 16;
        if (!v269)
        {
          v270 = &v840[2 * v842];
          break;
        }
      }
    }
    else
    {
      v270 = v840;
    }
  }
  else
  {
    v270 = &v840[2 * v842];
  }
  v271 = &v840[2 * v842];
LABEL_496:
  while (v270 != v271)
  {
    v272 = v270 + 2;
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v919, *v270);
    v270 = v268;
    if (v272 != v268)
    {
      v270 = v272;
      while ((*v270 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v270 += 2;
        if (v270 == v268)
        {
          v270 = v268;
          goto LABEL_496;
        }
      }
    }
  }
  if (__b == v861)
  {
LABEL_503:
    *(_QWORD *)&v863[4] = 0;
    goto LABEL_504;
  }
  if (*(_DWORD *)v863 < 0x21u || (4 * (*(_DWORD *)&v863[4] - *(_DWORD *)&v863[8])) >= *(_DWORD *)v863)
  {
    memset(__b, 255, 8 * *(unsigned int *)v863);
    goto LABEL_503;
  }
  free(__b);
  v764 = 1 << (33 - __clz(*(_DWORD *)&v863[4] - *(_DWORD *)&v863[8] - 1));
  if ((*(_DWORD *)&v863[4] - *(_DWORD *)&v863[8]) <= 0x10)
    v765 = 32;
  else
    v765 = v764;
  *(_DWORD *)v863 = v765;
  *(_QWORD *)&v863[4] = 0;
  v766 = malloc_type_malloc(8 * v765, 0x4065EBACuLL);
  if (!v766)
    goto LABEL_1586;
  __b = v766;
  memset(v766, 255, 8 * *(unsigned int *)v863);
LABEL_504:
  v783 = (unint64_t)&v848;
  v812[0] = (llvm::DominatorTree *)&v815;
  v812[1] = (llvm::DominatorTree *)&v815;
  v813 = 8;
  LODWORD(v814) = 0;
  *(_QWORD *)&v911 = &v913;
  *((_QWORD *)&v911 + 1) = &v913;
  *(_QWORD *)&v912 = 8;
  DWORD2(v912) = 0;
  v273 = *(_QWORD *)(v866 + 80);
  if (v273)
    v274 = v273 - 24;
  else
    v274 = 0;
  sub_1C5616900((uint64_t)v869, v274);
  v275 = 0;
  v896 = 0u;
  v897 = 0u;
  v898[0] = 0;
  v895 = 0u;
  v894 = 0u;
  v893 = 0u;
  memset(v892, 0, sizeof(v892));
  v891 = 0u;
  v890 = 0u;
  v888 = 0;
  v887 = 0u;
  v886 = 0u;
  v885 = 0u;
  v884 = 0u;
  v881 = (char *)&v884 + 8;
  v882 = (char *)&v884 + 8;
  v883 = 8;
  DWORD1(v890) = 8;
  v889 = (char *)&v890 + 8;
  while (2)
  {
    if (v874 != v275)
      goto LABEL_518;
    if (v275)
    {
      v276 = (char *)v873 + 24 * v275;
      v277 = v889;
      v278 = (char *)v873;
      while (*(_QWORD *)v278 == *(_QWORD *)v277 && *((_DWORD *)v278 + 4) == v277[4])
      {
        v278 += 24;
        v277 += 6;
        if (v278 == v276)
          goto LABEL_560;
      }
LABEL_518:
      v280 = *((_QWORD *)v873 + 3 * v874 - 3);
      v281 = *(_QWORD *)(v280 + 40);
      if (v281 == v280 + 40)
      {
LABEL_540:
        sub_1C4774094((llvm::SmallPtrSetImplBase *)v812, v280);
        if (DWORD1(v912) != DWORD2(v912))
        {
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v861, v280);
          v297 = sub_1C477672C((uint64_t)&v911, v280);
          v298 = *((_QWORD *)&v911 + 1) == (_QWORD)v911 ? (unsigned int *)((char *)&v912 + 4) : (unsigned int *)&v912;
          if (v297 != (_QWORD *)(*((_QWORD *)&v911 + 1) + 8 * *v298))
          {
            v299 = sub_1C477672C((uint64_t)&v911, v280);
            v300 = *((_QWORD *)&v911 + 1) == (_QWORD)v911 ? (unsigned int *)((char *)&v912 + 4) : (unsigned int *)&v912;
            if (v299 != (_QWORD *)(*((_QWORD *)&v911 + 1) + 8 * *v300))
            {
              *v299 = -2;
              ++DWORD2(v912);
            }
          }
        }
        if (--v874)
          sub_1C56169E8((__int128 *)v869);
        v275 = v890;
        continue;
      }
      if (v281)
        v282 = v281 - 24;
      else
        v282 = 0;
      v283 = *(unsigned __int8 *)(v282 + 16);
      v284 = v283 - 29;
      if (v283 != 30)
      {
        v285 = 2;
        switch(v284)
        {
          case 1:
            goto LABEL_1582;
          case 2:
            v285 = (*(_DWORD *)(v282 + 20) >> 1) & 0x3FFFFFF;
            goto LABEL_554;
          case 3:
          case 9:
            v285 = (*(_DWORD *)(v282 + 20) & 0x7FFFFFF) - 1;
            goto LABEL_554;
          case 4:
            goto LABEL_526;
          case 7:
            v285 = *(_WORD *)(v282 + 18) & 1;
            goto LABEL_554;
          case 8:
            v285 = 1;
            goto LABEL_526;
          case 10:
            v285 = *(_DWORD *)(v282 + 80) + 1;
LABEL_554:
            if (!v285)
              goto LABEL_540;
            goto LABEL_526;
          default:
            goto LABEL_540;
        }
      }
      if ((*(_DWORD *)(v282 + 20) & 0x7FFFFFF) == 3)
        v285 = 2;
      else
        v285 = 1;
LABEL_526:
      v286 = 0;
      v287 = 0;
      v288 = v281 - 88;
      v289 = v285;
      while (2)
      {
        v290 = *(unsigned __int8 *)(v281 - 8);
        if (v290 != 30)
          __asm { BR              X9 }
        v291 = (uint64_t *)(v281 - 56 - 32 * v287);
        v292 = *v291;
        if (*v291 == v280)
        {
          v295 = (llvm::SmallPtrSetImplBase *)&v861;
          v296 = v280;
          goto LABEL_536;
        }
        v293 = (llvm::DominatorTree *)sub_1C477672C((uint64_t)v812, *v291);
        if (v812[1] == v812[0])
          v294 = (uint64_t *)((char *)&v813 + 4);
        else
          v294 = &v813;
        if (v293 == (llvm::DominatorTree *)((char *)v812[1] + 8 * *(unsigned int *)v294))
        {
          v295 = (llvm::SmallPtrSetImplBase *)&v911;
          v296 = v292;
LABEL_536:
          sub_1C4774094(v295, v296);
        }
        ++v287;
        v286 += 2;
        v288 += 32;
        if (v289 == v287)
          goto LABEL_540;
        continue;
      }
    }
    break;
  }
LABEL_560:
  if (v889 != (char *)&v890 + 8)
    free(v889);
  if (v882 != v881)
    free(v882);
  if (v873 != &v875)
    free(v873);
  if (*(_QWORD *)&v869[8] != *(_QWORD *)v869)
    free(*(void **)&v869[8]);
  if (*((_QWORD *)&v911 + 1) != (_QWORD)v911)
    free(*((void **)&v911 + 1));
  if (v812[1] != v812[0])
    free(v812[1]);
  sub_1C5615888(v869, (uint64_t)&v821, &v903, (uint64_t)&v919);
  v827 = *(_OWORD *)v869;
  v828 = *(_OWORD *)&v869[16];
  v301 = __src;
  if (__src == v872)
  {
    v302 = v871;
    v303 = v830;
    if (v830 >= v871)
    {
      if ((_DWORD)v871)
        memmove(__dst, __src, 8 * v871);
    }
    else
    {
      if (HIDWORD(v830) < v871)
      {
        LODWORD(v830) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, (uint64_t)v831, v871, 8);
LABEL_576:
        v303 = 0;
      }
      else
      {
        if (!(_DWORD)v830)
          goto LABEL_576;
        memmove(__dst, __src, 8 * v830);
      }
      if (v303 != v871)
        memcpy((char *)__dst + 8 * v303, (char *)__src + 8 * v303, 8 * v871 - 8 * v303);
    }
    LODWORD(v830) = v302;
  }
  else
  {
    if (__dst != v831)
    {
      free(__dst);
      v301 = __src;
    }
    __dst = v301;
    v830 = v871;
    __src = v872;
    HIDWORD(v871) = 0;
  }
  LODWORD(v871) = 0;
  v304 = v875;
  if (v875 == v877)
  {
    v305 = v876;
    v306 = v833;
    if (v833 >= v876)
    {
      if ((_DWORD)v876)
        memmove(v832, v875, 8 * v876);
    }
    else
    {
      if (HIDWORD(v833) < v876)
      {
        LODWORD(v833) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v832, (uint64_t)v834, v876, 8);
LABEL_584:
        v306 = 0;
      }
      else
      {
        if (!(_DWORD)v833)
          goto LABEL_584;
        memmove(v832, v875, 8 * v833);
      }
      if (v306 != v876)
        memcpy((char *)v832 + 8 * v306, (char *)v875 + 8 * v306, 8 * v876 - 8 * v306);
    }
    LODWORD(v833) = v305;
  }
  else
  {
    if (v832 != v834)
    {
      free(v832);
      v304 = v875;
    }
    v832 = v304;
    v833 = v876;
    v875 = v877;
    HIDWORD(v876) = 0;
  }
  LODWORD(v876) = 0;
  if (v875 != v877)
    free(v875);
  if (__src != v872)
    free(__src);
  v307 = v827;
  v308 = v828;
  v309 = *(_QWORD *)(v827 + 40);
  v881 = &v883;
  v883 = v309;
  *(_QWORD *)&v884 = 0;
  v882 = (void *)0x400000001;
  v812[0] = (llvm::DominatorTree *)&v813;
  v812[1] = (llvm::DominatorTree *)0x800000000;
  *(_QWORD *)v869 = &__src;
  *(_QWORD *)&v869[8] = &__src;
  *(_QWORD *)&v869[16] = 8;
  *(_DWORD *)&v869[24] = 0;
  v310 = 1;
  do
  {
    v311 = (char *)v881 + 16 * v310;
    v312 = *((_QWORD *)v311 - 2);
    v313 = *(_QWORD *)(v312 + 40);
    if (v313 == v312 + 40)
    {
      v314 = 0;
    }
    else
    {
      if (v313)
        v314 = v313 - 24;
      else
        v314 = 0;
      if (*(unsigned __int8 *)(v314 + 16) - 29 >= 0xB)
        v314 = 0;
    }
    if (v312 == *(_QWORD *)(v308 + 40))
      goto LABEL_607;
    v315 = *((unsigned int *)v311 - 2);
    v316 = *(unsigned __int8 *)(v314 + 16);
    if (v316 != 30)
      __asm { BR              X15 }
    v317 = (*(_DWORD *)(v314 + 20) & 0x7FFFFFF) == 3 ? 2 : 1;
    if ((_DWORD)v315 == v317)
    {
LABEL_607:
      LODWORD(v882) = v310 - 1;
      v318 = LODWORD(v812[1]);
      if (LODWORD(v812[1]) >= (unint64_t)HIDWORD(v812[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v812, (uint64_t)&v813, LODWORD(v812[1]) + 1, 8);
        v318 = LODWORD(v812[1]);
      }
      *((_QWORD *)v812[0] + v318) = v312;
      ++LODWORD(v812[1]);
      v310 = v882;
    }
    else
    {
      *((_DWORD *)v311 - 2) = v315 + 1;
      v319 = *(_QWORD *)(v314 - 32 * v315 - 32);
      sub_1C4774094((llvm::SmallPtrSetImplBase *)v869, v319);
      v310 = v882;
      if (v320)
      {
        if (v882 >= HIDWORD(v882))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v881, (uint64_t)&v883, v882 + 1, 16);
          v310 = v882;
        }
        v321 = (uint64_t *)((char *)v881 + 16 * v310);
        *v321 = v319;
        v321[1] = 0;
        v310 = (_DWORD)v882 + 1;
        LODWORD(v882) = (_DWORD)v882 + 1;
      }
    }
  }
  while (v310);
  v322 = v812[0];
  v323 = LODWORD(v812[1]);
  if (LODWORD(v812[1]))
  {
    v324 = (llvm::DominatorTree *)((char *)v812[0] + 8 * LODWORD(v812[1]) - 8);
    if (v812[0] < v324)
    {
      v325 = (char *)v812[0] + 8;
      do
      {
        v326 = *((_QWORD *)v325 - 1);
        *((_QWORD *)v325 - 1) = *(_QWORD *)v324;
        *(_QWORD *)v324 = v326;
        v324 = (llvm::DominatorTree *)((char *)v324 - 8);
        v83 = v325 >= (char *)v324;
        v325 += 8;
      }
      while (!v83);
      v322 = v812[0];
    }
  }
  if ((_DWORD)v323)
  {
    v327 = 0;
    v328 = 0;
    v329 = (llvm::DominatorTree *)((char *)v322 + 8 * v323);
    do
    {
      v330 = *(_QWORD *)v322 + 40;
      for (n = *(_QWORD *)(*(_QWORD *)v322 + 48); n != v330; n = *(_QWORD *)(n + 8))
      {
        if (n)
          v332 = n - 24;
        else
          v332 = 0;
        if (v332 == v307 || (v328 |= v332 == v308, (v327 & 1) != 0))
        {
          if ((v328 & 1) != 0)
          {
            v328 = 1;
            v327 = 1;
            break;
          }
          v333 = v849;
          if (v849 >= (unint64_t)HIDWORD(v849))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v848, (uint64_t)v850, v849 + 1, 8);
            v333 = v849;
          }
          *((_QWORD *)v848 + v333) = v332;
          LODWORD(v849) = v849 + 1;
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v851, v332);
          v328 = 0;
          v327 = 1;
        }
        else
        {
          v327 = 0;
        }
      }
      v322 = (llvm::DominatorTree *)((char *)v322 + 8);
    }
    while (v322 != v329);
  }
  if (*(_QWORD *)&v869[8] != *(_QWORD *)v869)
    free(*(void **)&v869[8]);
  v24 = v767;
  v115 = v768;
  if ((uint64_t *)v812[0] != &v813)
    free(v812[0]);
  if (v881 != &v883)
    free(v881);
  if (v920 != v919)
    free(v920);
  if (v903.n128_u64[1] != v903.n128_u64[0])
    free((void *)v903.n128_u64[1]);
  v114 = 1;
LABEL_651:
  v867 = v114;
  if (SHIBYTE(v804) < 0)
  {
    operator delete(__p);
    v114 = v867;
  }
  v778 = v114;
  if (!v114)
  {
    sub_1C561530C(v24);
    goto LABEL_1532;
  }
  v334 = **(void ****)(v115 + 8);
  do
  {
    v335 = *v334;
    v334 += 2;
  }
  while (v335 != &llvm::FunctionGroupInfoWrapperPass::ID);
  v336 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v334 - 1) + 96))(*(v334 - 1), &llvm::FunctionGroupInfoWrapperPass::ID);
  v337 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v336 + 32) + 24))(*(_QWORD *)(v336 + 32), v24);
  v338 = v337;
  v339 = *(_QWORD *)(v24 + 80);
LABEL_657:
  if (v339 != v24 + 72)
  {
    if (v339)
      v340 = v339 - 24;
    else
      v340 = 0;
    v341 = v340 + 40;
    for (ii = *(_QWORD *)(v340 + 48); ; ii = *(_QWORD *)(ii + 8))
    {
      if (ii == v341)
      {
        v339 = *(_QWORD *)(v339 + 8);
        goto LABEL_657;
      }
      v343 = ii ? ii - 24 : 0;
      if (*(_BYTE *)(v343 + 16) == 84)
      {
        v344 = *(_QWORD *)(v343 - 32);
        if (v344)
        {
          if (!*(_BYTE *)(v344 + 16)
            && *(_QWORD *)(v344 + 24) == *(_QWORD *)(v343 + 72)
            && (*(_BYTE *)(v344 + 33) & 0x20) != 0
            && (*(_DWORD *)(*(_QWORD *)(ii - 56) + 36) - 2471) <= 7)
          {
            v345 = *(_QWORD *)(ii - 24 - 32 * (*(_DWORD *)(ii - 4) & 0x7FFFFFF) + 64);
            if (*(_BYTE *)(v345 + 16) != 84)
              break;
            v346 = *(_QWORD *)(v345 - 32);
            if (!v346
              || *(_BYTE *)(v346 + 16)
              || *(_QWORD *)(v346 + 24) != *(_QWORD *)(v345 + 72)
              || (*(_BYTE *)(v346 + 33) & 0x20) == 0
              || *(_DWORD *)(v346 + 36) != 1268)
            {
              break;
            }
          }
        }
      }
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v337 + 8))(v337, 29, 1, 1, 0, 1, 2);
  }
  *(_OWORD *)v812 = v822;
  v813 = (uint64_t)v817;
  v814 = v817;
  v815 = 16;
  v816 = 0;
  v776 = v338;
  v818 = v820;
  v819 = 0x400000000;
  if ((_QWORD)v827)
  {
    v347 = (char *)(v827 + 24);
  }
  else
  {
    v348 = *((_QWORD *)&v827 + 1);
    FirstNonPHIOrDbgOrLifetime = llvm::BasicBlock::getFirstNonPHIOrDbgOrLifetime(*((llvm::BasicBlock **)&v827 + 1), 1);
    v347 = FirstNonPHIOrDbgOrLifetime + 24;
    if (!FirstNonPHIOrDbgOrLifetime)
      v347 = (char *)(v348 + 40);
  }
  v774 = v347;
  v350 = (uint64_t *)v848;
  v351 = v849;
  *(_QWORD *)v869 = 1;
  for (jj = 8; jj != 520; jj += 16)
    *(_QWORD *)&v869[jj] = -4096;
  v878 = v880;
  v879 = 0x2000000000;
  v353 = (uint64_t *)(v838 + ((unint64_t)v839 << 6));
  if (DWORD2(v838))
  {
    if (v839)
    {
      v354 = (unint64_t)v839 << 6;
      v355 = (uint64_t *)v838;
      while ((*v355 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v355 += 8;
        v354 -= 64;
        if (!v354)
          goto LABEL_693;
      }
    }
    else
    {
      v355 = (uint64_t *)v838;
    }
  }
  else
  {
LABEL_693:
    v355 = (uint64_t *)(v838 + ((unint64_t)v839 << 6));
  }
  v356 = (uint64_t *)(v838 + ((unint64_t)v839 << 6));
LABEL_696:
  while (v355 != v356)
  {
    if (sub_1C5616C94(*v355))
    {
      v357 = *v355;
      v358 = v819;
      if (v819 >= (unint64_t)HIDWORD(v819))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v818, (uint64_t)v820, v819 + 1, 8);
        v358 = v819;
      }
      *((_QWORD *)v818 + v358) = v357;
      LODWORD(v819) = v819 + 1;
    }
    v359 = v355 + 8;
    v355 = v353;
    if (v359 != v353)
    {
      v355 = v359;
      while ((*v355 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v355 += 8;
        if (v355 == v353)
        {
          v355 = v353;
          goto LABEL_696;
        }
      }
    }
  }
  if ((_DWORD)v351)
  {
    v781 = 0;
    v791 = &v350[v351];
    while (1)
    {
      v360 = 0;
      v361 = *v350;
      v362 = *(unsigned __int8 *)(*v350 + 16);
      if (v362 == 60)
        v363 = *v350;
      else
        v363 = 0;
      if (v362 != 84)
        goto LABEL_716;
      v364 = *(_QWORD *)(v361 - 32);
      if (!v364 || *(_BYTE *)(v364 + 16) || *(_QWORD *)(v364 + 24) != *(_QWORD *)(v361 + 72))
        break;
      if ((*(_BYTE *)(v364 + 33) & 0x20) != 0)
        v360 = *v350;
      else
        v360 = 0;
      if (!v363)
      {
LABEL_725:
        v367 = -1;
        if (v360)
          goto LABEL_720;
        goto LABEL_726;
      }
LABEL_717:
      v365 = **(_QWORD **)(v363 - 32);
      v366 = *(_DWORD *)(v365 + 8);
      if ((v366 & 0xFE) == 0x12)
        v366 = *(_DWORD *)(**(_QWORD **)(v365 + 16) + 8);
      v367 = v366 >> 8;
      if (v360)
      {
LABEL_720:
        v368 = sub_1C47860D0(*(_DWORD *)(*(_QWORD *)(v360 - 32) + 36));
        goto LABEL_727;
      }
LABEL_726:
      v368 = 0;
LABEL_727:
      if (!sub_1C5616C94(v361))
      {
        LODWORD(v380) = 0;
        if (!v360)
          goto LABEL_787;
        goto LABEL_770;
      }
      v369 = *(_QWORD *)(v361 + 40);
      v370 = *(_QWORD *)(*(_QWORD *)(v369 + 56) + 80);
      v371 = v370 - 24;
      if (!v370)
        v371 = 0;
      v372 = v812[1];
      v373 = *((_QWORD *)v812[1] + 6);
      v374 = *((unsigned int *)v812[1] + 16);
      if ((_DWORD)v374)
      {
        LODWORD(v375) = (v374 - 1) & ((v369 >> 4) ^ (v369 >> 9));
        v376 = (uint64_t *)(v373 + 16 * v375);
        v377 = *v376;
        if (v369 == *v376)
          goto LABEL_739;
        v378 = 1;
        while (v377 != -4096)
        {
          v379 = v375 + v378++;
          v375 = v379 & (v374 - 1);
          v377 = *(_QWORD *)(v373 + 16 * v375);
          if (v369 == v377)
          {
            v376 = (uint64_t *)(v373 + 16 * v375);
            goto LABEL_739;
          }
        }
      }
      v376 = (uint64_t *)(v373 + 16 * v374);
LABEL_739:
      v381 = (uint64_t *)(v373 + 16 * v374);
      if (v376 == v381)
      {
        v380 = 0;
        if ((_DWORD)v374)
        {
LABEL_743:
          v382 = v374 - 1;
          LODWORD(v374) = ((v371 >> 4) ^ (v371 >> 9)) & (v374 - 1);
          v383 = (uint64_t *)(v373 + 16 * v374);
          v384 = *v383;
          if (v371 == *v383)
          {
LABEL_748:
            if (v383 != v381)
            {
              v387 = v368;
              v388 = v367;
              v389 = v383[1];
              if (v389 == v380 || v389 == 0)
                goto LABEL_765;
              if (!v380)
                goto LABEL_769;
              if (*(_QWORD *)(v389 + 8) == v380)
              {
LABEL_765:
                LODWORD(v380) = 1;
                goto LABEL_769;
              }
              if (*(_QWORD *)(v380 + 8) == v389 || (v391 = *(_DWORD *)(v380 + 16), v391 >= *(_DWORD *)(v389 + 16)))
              {
LABEL_757:
                LODWORD(v380) = 0;
                goto LABEL_769;
              }
              if (!*((_BYTE *)v812[1] + 88))
              {
                v392 = *((_DWORD *)v812[1] + 23) + 1;
                *((_DWORD *)v812[1] + 23) = v392;
                if (v392 <= 0x20)
                {
                  do
                  {
                    v393 = v389;
                    v389 = *(_QWORD *)(v389 + 8);
                  }
                  while (v389 && *(_DWORD *)(v389 + 16) >= v391);
                  LODWORD(v380) = v393 == v380;
                  goto LABEL_769;
                }
                llvm::DominatorTreeBase<llvm::BasicBlock,true>::updateDFSNumbers((uint64_t)v372);
              }
              if (*(_DWORD *)(v389 + 72) < *(_DWORD *)(v380 + 72))
                goto LABEL_757;
              LODWORD(v380) = *(_DWORD *)(v389 + 76) <= *(_DWORD *)(v380 + 76);
LABEL_769:
              v367 = v388;
              v368 = v387;
              if (!v360)
                goto LABEL_787;
              goto LABEL_770;
            }
          }
          else
          {
            v385 = 1;
            while (v384 != -4096)
            {
              v386 = v374 + v385++;
              v374 = v386 & v382;
              v384 = *(_QWORD *)(v373 + 16 * v374);
              if (v371 == v384)
              {
                v383 = (uint64_t *)(v373 + 16 * v374);
                goto LABEL_748;
              }
            }
          }
        }
      }
      else
      {
        v380 = v376[1];
        if ((_DWORD)v374)
          goto LABEL_743;
      }
      LODWORD(v380) = 1;
      if (!v360)
        goto LABEL_787;
LABEL_770:
      if ((*(_DWORD *)(*(_QWORD *)(v360 - 32) + 36) - 2712) <= 0x13
        && ((1 << (*(_BYTE *)(*(_QWORD *)(v360 - 32) + 36) + 104)) & 0xFCCFF) != 0)
      {
        goto LABEL_774;
      }
LABEL_787:
      v787 = v368;
      v401 = v367;
      v402 = *(unsigned __int8 *)(v361 + 16);
      if (v402 == 84
        && (v403 = *(_QWORD *)(v361 - 32)) != 0
        && !*(_BYTE *)(v403 + 16)
        && *(_QWORD *)(v403 + 24) == *(_QWORD *)(v361 + 72)
        && (*(_BYTE *)(v403 + 33) & 0x20) != 0)
      {
        v404 = sub_1C5E9D850(*(_DWORD *)(v403 + 36)) & 1;
      }
      else
      {
        v404 = 0;
      }
      if (v402 == 83 || (v402 - 29) < 0xB)
        goto LABEL_913;
      v406 = (v402 - 33);
      v407 = v401;
      if (v406 <= 0x37)
      {
        if (((1 << v406) & 0x8000000000041) != 0)
        {
          v454 = *(_QWORD *)(v361 + 64);
          if (!v454 || (*(_BYTE *)(v454 + 17) & 0x30) == 0)
          {
            v455 = *(_DWORD *)(v361 + 20);
            if (v455 < 0)
            {
              v506 = v361 - 32 * (v455 & 0x7FFFFFF);
              v509 = *(_QWORD *)(v506 - 8);
              v507 = v506 - 8;
              v508 = v509;
              if (v509)
              {
                v510 = -v508;
                while (1)
                {
                  v511 = *(_DWORD *)(*(_QWORD *)(v507 + v510) + 8);
                  v512 = v511 > 7;
                  v513 = (1 << v511) & 0x83;
                  if (v512 || v513 == 0)
                    break;
                  v510 += 16;
                  v407 = v401;
                  if (!v510)
                    goto LABEL_894;
                }
                v456 = 1;
                v407 = v401;
LABEL_907:
                v408 = v781 == 0;
                if (v781)
                  v468 = 0;
                else
                  v468 = v380;
                v409 = v787;
                if (v456 && !v468)
                {
LABEL_912:
                  v781 = 1;
                  goto LABEL_913;
                }
                goto LABEL_803;
              }
            }
LABEL_894:
            if ((llvm::CallBase::hasFnAttrOnCalledFunction(v361, 45) & 1) == 0)
            {
              v456 = llvm::CallBase::hasFnAttrOnCalledFunction(v361, 44) ^ 1;
              goto LABEL_907;
            }
          }
        }
        else
        {
          if (v406 == 27)
          {
            v456 = (*(_WORD *)(v361 + 18) & 0x301) != 0;
            goto LABEL_907;
          }
          if (((1 << v406) & 0x808001D0000010) != 0)
          {
            v456 = 1;
            goto LABEL_907;
          }
        }
      }
      v408 = v781 == 0;
      v409 = v787;
LABEL_803:
      if (((v409 | v404) & 1) != 0 || v407 == 2 || v407 == 64)
        goto LABEL_774;
      v395 = *(unsigned __int8 *)(v361 + 16);
      v410 = (v395 - 33);
      if (v410 <= 0x37)
      {
        if (((1 << (v395 - 33)) & 0x8000000000041) != 0)
        {
          v469 = *(_QWORD *)(v361 + 64);
          if (v469 && ((*(_BYTE *)(v469 + 20) & 4) != 0 || (*(_BYTE *)(v469 + 17) & 0x10) != 0))
            goto LABEL_774;
          LODWORD(v881) = 7;
          if ((!sub_1C53E4BBC(v361, (__int32 *)&v881, 1uLL)
             || (v515 = *(_QWORD *)(v361 - 32)) != 0
             && !*(_BYTE *)(v515 + 16)
             && *(_QWORD *)(v515 + 24) == *(_QWORD *)(v361 + 72)
             && *(_DWORD *)(v515 + 36) == 7)
            && ((llvm::CallBase::hasFnAttrOnCalledFunction(v361, 66) & 1) != 0
             || (llvm::CallBase::hasFnAttrOnCalledFunction(v361, 44) & 1) != 0))
          {
            goto LABEL_774;
          }
          goto LABEL_921;
        }
        if (((1 << (v395 - 33)) & 0x808001C8000010) != 0)
          goto LABEL_921;
        if (v410 == 28)
        {
          if ((*(_WORD *)(v361 + 18) & 0x301) == 0)
          {
LABEL_774:
            v395 = *(unsigned __int8 *)(v361 + 16);
            goto LABEL_775;
          }
LABEL_921:
          if (!v408)
            goto LABEL_912;
          v470 = v812[1];
          v471 = *((_QWORD *)v812[1] + 6);
          v472 = *((unsigned int *)v812[1] + 16);
          if ((_DWORD)v472)
          {
            v473 = *(_QWORD *)(v361 + 40);
            LODWORD(v474) = ((v473 >> 4) ^ (v473 >> 9)) & (v472 - 1);
            v475 = (uint64_t *)(v471 + 16 * v474);
            v476 = *v475;
            if (v473 != *v475)
            {
              v477 = 1;
              while (v476 != -4096)
              {
                v478 = v474 + v477++;
                v474 = v478 & (v472 - 1);
                v476 = *(_QWORD *)(v471 + 16 * v474);
                if (v473 == v476)
                {
                  v475 = (uint64_t *)(v471 + 16 * v474);
                  goto LABEL_956;
                }
              }
              goto LABEL_955;
            }
          }
          else
          {
LABEL_955:
            v475 = (uint64_t *)(v471 + 16 * v472);
          }
LABEL_956:
          v491 = (uint64_t *)(v471 + 16 * v472);
          if (v475 == v491)
            v492 = 0;
          else
            v492 = v475[1];
          if ((_DWORD)v472)
          {
            v493 = *((_QWORD *)v774 + 2);
            v494 = v472 - 1;
            LODWORD(v472) = (v472 - 1) & ((v493 >> 4) ^ (v493 >> 9));
            v495 = (uint64_t *)(v471 + 16 * v472);
            v496 = *v495;
            if (v493 == *v495)
            {
LABEL_965:
              if (v495 != v491)
              {
                v499 = v495[1];
                if (v499 != v492 && v499 != 0)
                {
                  if (!v492)
                    goto LABEL_974;
                  if (*(_QWORD *)(v499 + 8) != v492)
                  {
                    if (*(_QWORD *)(v492 + 8) == v499)
                      goto LABEL_974;
                    v501 = *(_DWORD *)(v492 + 16);
                    if (v501 >= *(_DWORD *)(v499 + 16))
                      goto LABEL_974;
                    if (*((_BYTE *)v812[1] + 88))
                    {
                      if (*(_DWORD *)(v499 + 72) < *(_DWORD *)(v492 + 72)
                        || *(_DWORD *)(v499 + 76) > *(_DWORD *)(v492 + 76))
                      {
                        goto LABEL_974;
                      }
                    }
                    else
                    {
                      v502 = *((_DWORD *)v812[1] + 23) + 1;
                      *((_DWORD *)v812[1] + 23) = v502;
                      if (v502 > 0x20)
                      {
                        llvm::DominatorTreeBase<llvm::BasicBlock,true>::updateDFSNumbers((uint64_t)v470);
                        if (*(_DWORD *)(v499 + 72) < *(_DWORD *)(v492 + 72))
                        {
                          v781 = 0;
                          goto LABEL_913;
                        }
                        if (*(_DWORD *)(v499 + 76) > *(_DWORD *)(v492 + 76))
                        {
LABEL_974:
                          v781 = 0;
                          goto LABEL_913;
                        }
                      }
                      else
                      {
                        do
                        {
                          v503 = v499;
                          v499 = *(_QWORD *)(v499 + 8);
                        }
                        while (v499 && *(_DWORD *)(v499 + 16) >= v501);
                        if (v503 != v492)
                          goto LABEL_974;
                      }
                    }
                  }
                }
              }
            }
            else
            {
              v497 = 1;
              while (v496 != -4096)
              {
                v498 = v472 + v497++;
                v472 = v498 & v494;
                v496 = *(_QWORD *)(v471 + 16 * v472);
                if (v493 == v496)
                {
                  v495 = (uint64_t *)(v471 + 16 * v472);
                  goto LABEL_965;
                }
              }
            }
          }
          goto LABEL_774;
        }
      }
LABEL_775:
      if (v395 == 84)
      {
        v396 = *(_QWORD *)(v361 - 32);
        if (v396)
        {
          if (!*(_BYTE *)(v396 + 16)
            && *(_QWORD *)(v396 + 24) == *(_QWORD *)(v361 + 72)
            && (*(_BYTE *)(v396 + 33) & 0x20) != 0
            && *(_DWORD *)(v396 + 36) == 2306
            && (_DWORD)v819 != 0)
          {
            v457 = *(_QWORD *)(v361 + 40);
            v458 = *(_QWORD *)(*(_QWORD *)(v457 + 56) + 80);
            v459 = v458 - 24;
            if (!v458)
              v459 = 0;
            v460 = v812[1];
            v461 = *((_QWORD *)v812[1] + 6);
            v462 = *((unsigned int *)v812[1] + 16);
            if (!(_DWORD)v462)
              goto LABEL_930;
            LODWORD(v463) = (v462 - 1) & ((v457 >> 4) ^ (v457 >> 9));
            v464 = (uint64_t *)(v461 + 16 * v463);
            v465 = *v464;
            if (v457 != *v464)
            {
              v466 = 1;
              while (v465 != -4096)
              {
                v467 = v463 + v466++;
                v463 = v467 & (v462 - 1);
                v465 = *(_QWORD *)(v461 + 16 * v463);
                if (v457 == v465)
                {
                  v464 = (uint64_t *)(v461 + 16 * v463);
                  goto LABEL_931;
                }
              }
LABEL_930:
              v464 = (uint64_t *)(v461 + 16 * v462);
            }
LABEL_931:
            v479 = (uint64_t *)(v461 + 16 * v462);
            if (v464 == v479)
            {
              v480 = 0;
              if (!(_DWORD)v462)
                goto LABEL_987;
            }
            else
            {
              v480 = v464[1];
              if (!(_DWORD)v462)
                goto LABEL_987;
            }
            v481 = v462 - 1;
            LODWORD(v462) = ((v459 >> 4) ^ (v459 >> 9)) & (v462 - 1);
            v482 = (uint64_t *)(v461 + 16 * v462);
            v483 = *v482;
            if (v459 == *v482)
            {
LABEL_940:
              if (v482 == v479)
                goto LABEL_987;
              v486 = v482[1];
              if (v486 == v480 || v486 == 0)
                goto LABEL_987;
              if (!v480)
                goto LABEL_913;
              if (*(_QWORD *)(v486 + 8) == v480)
                goto LABEL_987;
              if (*(_QWORD *)(v480 + 8) == v486)
                goto LABEL_913;
              v488 = *(_DWORD *)(v480 + 16);
              if (v488 >= *(_DWORD *)(v486 + 16))
                goto LABEL_913;
              if (!*((_BYTE *)v812[1] + 88))
              {
                v489 = *((_DWORD *)v812[1] + 23) + 1;
                *((_DWORD *)v812[1] + 23) = v489;
                if (v489 <= 0x20)
                {
                  do
                  {
                    v490 = v486;
                    v486 = *(_QWORD *)(v486 + 8);
                  }
                  while (v486 && *(_DWORD *)(v486 + 16) >= v488);
                  if (v490 != v480)
                    goto LABEL_913;
                  goto LABEL_987;
                }
                llvm::DominatorTreeBase<llvm::BasicBlock,true>::updateDFSNumbers((uint64_t)v460);
              }
              if (*(_DWORD *)(v486 + 72) < *(_DWORD *)(v480 + 72) || *(_DWORD *)(v486 + 76) > *(_DWORD *)(v480 + 76))
                goto LABEL_913;
              goto LABEL_987;
            }
            v484 = 1;
            while (v483 != -4096)
            {
              v485 = v462 + v484++;
              v462 = v485 & v481;
              v483 = *(_QWORD *)(v461 + 16 * v462);
              if (v459 == v483)
              {
                v482 = (uint64_t *)(v461 + 16 * v462);
                goto LABEL_940;
              }
            }
LABEL_987:
            if ((_DWORD)v819)
            {
              v504 = (const llvm::Instruction **)v818;
              v505 = 8 * v819;
              while (llvm::DominatorTree::dominates(v812[0], (const llvm::Value *)v361, *v504))
              {
                ++v504;
                v505 -= 8;
                if (!v505)
                  goto LABEL_785;
              }
              goto LABEL_913;
            }
          }
        }
      }
LABEL_785:
      v398 = *(_DWORD *)(v361 + 20);
      if ((v398 & 0x40000000) != 0)
      {
        v400 = *(uint64_t **)(v361 - 8);
        v399 = v398 & 0x7FFFFFF;
      }
      else
      {
        v399 = v398 & 0x7FFFFFF;
        v400 = (uint64_t *)(v361 - 32 * v399);
      }
      if (v399)
      {
        v411 = 32 * v399;
        do
        {
          v412 = *v400;
          if (*v400 && *(unsigned __int8 *)(*v400 + 16) >= 0x1Cu)
          {
            v414 = sub_1C477672C((uint64_t)&v851, *v400);
            v415 = v852 == v851 ? (uint64_t *)((char *)&v853 + 4) : &v853;
            if (v414 != (_QWORD *)((char *)v852 + 8 * *(unsigned int *)v415))
            {
              v881 = 0;
              if (sub_1C5616CE4((uint64_t)v869, v412, &v881))
              {
                v421 = v881;
                v417 = *(_BYTE **)&v869[8];
                v418 = *(_DWORD *)&v869[16];
                v416 = v869[0] & 1;
              }
              else
              {
                v416 = v869[0] & 1;
                v417 = *(_BYTE **)&v869[8];
                v418 = *(_DWORD *)&v869[16];
                v419 = (v869[0] & 1) != 0 ? &v869[8] : *(_BYTE **)&v869[8];
                v420 = (v869[0] & 1) != 0 ? 32 : *(_DWORD *)&v869[16];
                v421 = &v419[16 * v420];
              }
              if (v416)
              {
                v417 = &v869[8];
                v422 = 32;
              }
              else
              {
                v422 = v418;
              }
              if (&v417[16 * v422] == v421)
                goto LABEL_913;
            }
          }
          v400 += 4;
          v411 -= 32;
        }
        while (v411);
      }
      v423 = sub_1C477672C((uint64_t)&v843, v361);
      if (v844 == v843)
        v424 = (uint64_t *)((char *)&v845 + 4);
      else
        v424 = &v845;
      if (v423 == (_QWORD *)((char *)v844 + 8 * *(unsigned int *)v424))
      {
        if (!v839)
          goto LABEL_848;
        v425 = (v839 - 1) & ((v361 >> 4) ^ (v361 >> 9));
        v426 = *(_QWORD *)(v838 + ((unint64_t)v425 << 6));
        if (v361 != v426)
        {
          v427 = 1;
          while (v426 != -4096)
          {
            v428 = v425 + v427++;
            v425 = v428 & (v839 - 1);
            v426 = *(_QWORD *)(v838 + ((unint64_t)v425 << 6));
            if (v361 == v426)
              goto LABEL_913;
          }
LABEL_848:
          v429 = sub_1C5EA484C(v361, 1);
          v783 = v783 & 0xFFFFFFFFFFFFFF00 | v429;
          v881 = 0;
          if ((sub_1C5616D88((uint64_t)v869, v361, &v881) & 1) == 0)
          {
            v430 = *(_DWORD *)v869 >> 1;
            if ((v869[0] & 1) != 0)
              v431 = 32;
            else
              v431 = *(_DWORD *)&v869[16];
            if (4 * v430 + 4 >= 3 * v431)
            {
              v431 *= 2;
            }
            else if (v431 + ~v430 - *(_DWORD *)&v869[4] > v431 >> 3)
            {
              goto LABEL_854;
            }
            sub_1C5616E2C((uint64_t)v869, v431);
            v881 = 0;
            sub_1C5616D88((uint64_t)v869, v361, &v881);
LABEL_854:
            v432 = v881;
            *(_DWORD *)v869 += 2;
            if (*(_QWORD *)v881 != -4096)
              --*(_DWORD *)&v869[4];
            *(_QWORD *)v881 = v361;
            v432[2] = 0;
            v433 = v879;
            if (v879 >= (unint64_t)HIDWORD(v879))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v878, (uint64_t)v880, v879 + 1, 16);
              v433 = v879;
            }
            v434 = (uint64_t *)((char *)v878 + 16 * v433);
            *v434 = v361;
            v434[1] = v783;
            LODWORD(v434) = v879;
            LODWORD(v879) = v879 + 1;
            v432[2] = (_DWORD)v434;
          }
          if (v429)
          {
            v881 = &v883;
            v882 = (void *)0x2000000000;
            sub_1C4848C0C((unsigned int *)&v881, 1uLL, v361);
LABEL_861:
            v435 = v882;
            while (v435)
            {
              v436 = *((_QWORD *)v881 + --v435);
              LODWORD(v882) = v435;
              v437 = *(_DWORD *)(v436 + 20);
              if ((v437 & 0x40000000) != 0)
              {
                v439 = *(uint64_t **)(v436 - 8);
                v438 = v437 & 0x7FFFFFF;
                if (v438)
                {
LABEL_867:
                  v440 = 32 * v438;
                  do
                  {
                    v441 = *v439;
                    if (*v439)
                      v442 = *(unsigned __int8 *)(*v439 + 16) >= 0x1Cu;
                    else
                      v442 = 0;
                    if (v442)
                    {
                      *(_QWORD *)&v911 = 0;
                      v443 = sub_1C5616CE4((uint64_t)v869, v441, &v911);
                      if ((v869[0] & 1) != 0)
                        v444 = &v869[8];
                      else
                        v444 = *(_BYTE **)&v869[8];
                      v445 = *(_DWORD *)&v869[16];
                      if ((v869[0] & 1) != 0)
                        v445 = 32;
                      v446 = &v444[16 * v445];
                      v447 = (_QWORD)v911 != (_QWORD)v446;
                      v448 = (uint64_t *)(v911 + 8);
                      v449 = (uint64_t *)(v446 + 8);
                      if (!v443)
                        v448 = v449;
                      if ((v443 & v447) == 0)
                        v448 = &v879;
                      v450 = *(unsigned int *)v448;
                      if ((_DWORD)v450 != (_DWORD)v879)
                      {
                        v451 = (char *)v878 + 16 * v450;
                        if (!v451[8])
                        {
                          v451[8] = 1;
                          v452 = *(_QWORD *)v451;
                          v453 = v882;
                          if (v882 >= (unint64_t)HIDWORD(v882))
                          {
                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v881, (uint64_t)&v883, v882 + 1, 8);
                            v453 = v882;
                          }
                          *((_QWORD *)v881 + v453) = v452;
                          LODWORD(v882) = (_DWORD)v882 + 1;
                        }
                      }
                    }
                    v439 += 4;
                    v440 -= 32;
                  }
                  while (v440);
                  goto LABEL_861;
                }
              }
              else
              {
                v438 = v437 & 0x7FFFFFF;
                v439 = (uint64_t *)(v436 - 32 * v438);
                if (v438)
                  goto LABEL_867;
              }
            }
            if (v881 != &v883)
              free(v881);
          }
        }
      }
LABEL_913:
      if (++v350 == v791)
        goto LABEL_1011;
    }
    v360 = 0;
LABEL_716:
    if (!v363)
      goto LABEL_725;
    goto LABEL_717;
  }
LABEL_1011:
  v516 = v878;
  if ((_DWORD)v879)
  {
    v517 = 16 * v879;
    v518 = (char *)v878 + 8;
    do
    {
      if ((*v518 & 1) != 0)
      {
        v519 = (llvm::Instruction *)*((_QWORD *)v518 - 1);
        llvm::Instruction::moveBefore(v519, (llvm::Instruction *)(v774 - 24));
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v813, (uint64_t)v519);
      }
      v518 += 16;
      v517 -= 16;
    }
    while (v517);
    v516 = v878;
  }
  if (v516 != v880)
    free(v516);
  if ((v869[0] & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)&v869[8], 8);
  v520 = *(_WORD *)(v768 + 28);
  *(_QWORD *)v869 = &v821;
  *(_QWORD *)&v869[8] = v812;
  *(_WORD *)&v869[16] = v520;
  *(_QWORD *)&v869[24] = &v871;
  __src = (void *)0x200000000;
  __p = v806;
  v803 = (uint64_t *)v806;
  v804 = 16;
  v805 = 0;
  v797 = (uint64_t *)v801;
  v798 = (uint64_t *)v801;
  v799 = 16;
  v800 = 0;
  v794 = 0;
  v795 = 0;
  v796 = 0;
  v521 = (uint64_t *)(v838 + ((unint64_t)v839 << 6));
  if (DWORD2(v838))
  {
    if (v839)
    {
      v522 = (unint64_t)v839 << 6;
      v523 = (uint64_t *)v838;
      while ((*v523 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v523 += 8;
        v522 -= 64;
        if (!v522)
          goto LABEL_1026;
      }
    }
    else
    {
      v523 = (uint64_t *)v838;
    }
  }
  else
  {
LABEL_1026:
    v523 = (uint64_t *)(v838 + ((unint64_t)v839 << 6));
  }
  v524 = (uint64_t *)(v838 + ((unint64_t)v839 << 6));
  if (v523 == v524)
    goto LABEL_1270;
  v782 = (uint64_t *)(v838 + ((unint64_t)v839 << 6));
  while (2)
  {
    v525 = *v523;
    v526 = *(_QWORD *)&v869[8];
    v527 = sub_1C477672C(*(_QWORD *)&v869[8] + 16, *v523);
    v528 = *(_QWORD *)(v526 + 24);
    v529 = 32;
    if (v528 == *(_QWORD *)(v526 + 16))
      v529 = 36;
    if (v527 == (_QWORD *)(v528 + 8 * *(unsigned int *)(v526 + v529)))
    {
      v785 = (llvm::SmallPtrSetImplBase *)v523;
      v530 = *(_QWORD *)v869;
      v531 = *(_QWORD *)v869 + 672;
      v881 = (char *)&v884 + 8;
      v882 = (char *)&v884 + 8;
      v883 = 16;
      LODWORD(v884) = 0;
      *(_QWORD *)&v911 = &v912;
      *((_QWORD *)&v911 + 1) = 0x500000000;
      v532 = (__n128 *)&v911;
      sub_1C4848C0C((unsigned int *)&v911, 1uLL, v525);
      v903.n128_u64[0] = (unint64_t)&v904;
      v903.n128_u64[1] = 0x500000000;
      v533 = &v903;
      v534 = DWORD2(v911);
      while (1)
      {
        v535 = (uint64_t)v533;
        if (v534)
          break;
LABEL_1071:
        v534 = *(_DWORD *)(v535 + 8);
        v533 = v532;
        v532 = (__n128 *)v535;
        if (!v534)
        {
          if ((__int128 *)v903.n128_u64[0] != &v904)
            free((void *)v903.n128_u64[0]);
          v524 = v782;
          v521 = v782;
          if ((__int128 *)v911 != &v912)
            free((void *)v911);
          v523 = (uint64_t *)v785;
          if (v882 != v881)
            free(v882);
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v797, v525);
          if (sub_1C5616C94(v525))
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&__p, v525);
          goto LABEL_1080;
        }
      }
      v792 = (uint64_t)&v533[1];
      while (2)
      {
        v536 = *(_QWORD *)(v532->n128_u64[0] + 8 * v534-- - 8);
        v532->n128_u32[2] = v534;
        if (!v536)
          goto LABEL_1042;
        v537 = sub_1C477672C((uint64_t)&v881, v536);
        if (v882 == v881)
          v538 = (uint64_t *)((char *)&v883 + 4);
        else
          v538 = &v883;
        if (v537 != (_QWORD *)((char *)v882 + 8 * *(unsigned int *)v538))
          goto LABEL_1041;
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v881, v536);
        v539 = *(_DWORD *)(v536 + 20);
        if ((v539 & 0x40000000) == 0)
        {
          v540 = v539 & 0x7FFFFFF;
          v541 = (uint64_t *)(v536 - 32 * v540);
          if (v540)
            goto LABEL_1048;
LABEL_1041:
          v534 = v532->n128_u32[2];
LABEL_1042:
          if (!v534)
            goto LABEL_1071;
          continue;
        }
        break;
      }
      v541 = *(uint64_t **)(v536 - 8);
      v540 = v539 & 0x7FFFFFF;
      if (!v540)
        goto LABEL_1041;
LABEL_1048:
      v542 = 32 * v540;
      while (2)
      {
        v543 = *v541;
        if (*v541)
          v544 = *(unsigned __int8 *)(*v541 + 16) >= 0x1Cu;
        else
          v544 = 0;
        if (v544)
        {
          v545 = sub_1C477672C(v531, *v541);
          v546 = *(_QWORD *)(v530 + 680);
          v547 = 688;
          if (v546 == *(_QWORD *)(v530 + 672))
            v547 = 692;
          if (v545 != (_QWORD *)(v546 + 8 * *(unsigned int *)(v530 + v547)))
          {
            v548 = *(unsigned int *)(v535 + 8);
            if (v548 >= *(unsigned int *)(v535 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(v535, v792, v548 + 1, 8);
              v548 = *(unsigned int *)(v535 + 8);
            }
            *(_QWORD *)(*(_QWORD *)v535 + 8 * v548) = v543;
            ++*(_DWORD *)(v535 + 8);
            v919 = 0;
            v549 = v796;
            v550 = sub_1C5617270(v794, v796, v543, &v919);
            v551 = v919;
            if ((v550 & 1) == 0)
            {
              if (4 * (int)v795 + 4 >= 3 * v549)
              {
                v552 = 2 * v549;
              }
              else
              {
                if (v549 + ~(_DWORD)v795 - HIDWORD(v795) > v549 >> 3)
                  goto LABEL_1062;
                v552 = v549;
              }
              sub_1C56172FC((uint64_t)&v794, v552);
              v919 = 0;
              sub_1C5617270(v794, v796, v543, &v919);
              v551 = v919;
LABEL_1062:
              LODWORD(v795) = v795 + 1;
              if (*v551 != -4096)
                --HIDWORD(v795);
              *v551 = v543;
              v551[1] = v551 + 5;
              v551[2] = v551 + 5;
              v551[3] = 1;
              *((_DWORD *)v551 + 8) = 0;
            }
            sub_1C4774094((llvm::SmallPtrSetImplBase *)(v551 + 1), v525);
          }
        }
        v541 += 4;
        v542 -= 32;
        if (!v542)
          goto LABEL_1041;
        continue;
      }
    }
LABEL_1080:
    v553 = v523 + 8;
    v523 = v521;
    if (v553 != v521)
    {
      v523 = v553;
      while ((*v523 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v523 += 8;
        if (v523 == v521)
        {
          v523 = v521;
          break;
        }
      }
    }
    if (v523 != v524)
      continue;
    break;
  }
  if (HIDWORD(v804) == v805)
    goto LABEL_1270;
  v881 = &v883;
  v882 = (void *)0x200000000;
  *((_QWORD *)&v884 + 1) = (char *)&v885 + 8;
  *(_QWORD *)&v885 = 0x200000000;
  *((_QWORD *)&v886 + 1) = &v889;
  *(_QWORD *)&v887 = &v889;
  *((_QWORD *)&v887 + 1) = 4;
  LODWORD(v888) = 0;
  *((_QWORD *)&v891 + 1) = &v892[1];
  v892[0] = 0xA00000000;
  BYTE8(v893) = 1;
  *(_QWORD *)&v894 = 1;
  WORD4(v894) = 0;
  BYTE10(v894) = 0;
  v896 = 0u;
  v895 = 0u;
  *(_QWORD *)&v897 = v898;
  *((_QWORD *)&v897 + 1) = 0x800000000;
  v899 = v901;
  v900 = 0x800000000;
  v554 = *(_QWORD *)v869;
  v793 = *(_QWORD *)(*(_QWORD *)v869 + 8);
  v903.n128_u64[0] = (unint64_t)&v905;
  v903.n128_u64[1] = (unint64_t)&v905;
  *(_QWORD *)&v904 = 16;
  if (v803 == __p)
    v555 = HIDWORD(v804);
  else
    v555 = v804;
  DWORD2(v904) = 0;
  if ((_DWORD)v555)
  {
    v556 = 8 * v555;
    v557 = v803;
    while ((unint64_t)*v557 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v557;
      v556 -= 8;
      if (!v556)
        goto LABEL_1110;
    }
  }
  else
  {
    v557 = v803;
  }
  v558 = (char *)&v803[v555];
  if (v557 == (uint64_t *)v558)
  {
LABEL_1110:
    v770 = 0;
  }
  else
  {
    v559 = 0;
    v560 = *v557;
LABEL_1098:
    *(_QWORD *)&v911 = 0;
    v561 = v554;
    if (sub_1C561659C(*(_QWORD *)(v554 + 288), *(_DWORD *)(v554 + 304), v560, &v911))
      v562 = v911;
    else
      v562 = *(_QWORD *)(v554 + 288) + ((unint64_t)*(unsigned int *)(v554 + 304) << 6);
    v563 = *(unsigned __int8 *)(v562 + 8) - 1 < 2;
    v564 = WORD4(v894);
    if (WORD4(v894) <= *(unsigned __int16 *)(v562 + 24))
      v564 = *(_WORD *)(v562 + 24);
    BYTE10(v894) |= *(_BYTE *)(v562 + 26);
    WORD4(v894) = v564;
    v565 = *(unsigned int *)(v562 + 40);
    if ((_DWORD)v565)
    {
      v566 = *(uint64_t **)(v562 + 32);
      v567 = 8 * v565;
      do
      {
        v568 = *v566++;
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v903, v568);
        v567 -= 8;
      }
      while (v567);
    }
    v559 |= v563;
    v569 = (unint64_t *)(v557 + 1);
    v554 = v561;
    while (v569 != (unint64_t *)v558)
    {
      v570 = *v569++;
      v560 = v570;
      if (v570 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v557 = (uint64_t *)(v569 - 1);
        goto LABEL_1098;
      }
    }
    v770 = v559;
  }
  v571 = *(_QWORD *)(v554 + 288);
  v779 = v554;
  v572 = *(unsigned int *)(v554 + 304);
  v573 = v571 + (v572 << 6);
  if (*(_DWORD *)(v554 + 296))
  {
    if ((_DWORD)v572)
    {
      v574 = v572 << 6;
      v575 = *(_QWORD *)(v554 + 288);
      while ((*(_QWORD *)v575 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v575 += 64;
        v574 -= 64;
        if (!v574)
          goto LABEL_1117;
      }
    }
    else
    {
      v575 = *(_QWORD *)(v554 + 288);
    }
  }
  else
  {
LABEL_1117:
    v575 = v571 + (v572 << 6);
  }
  v576 = v571 + ((unint64_t)v572 << 6);
  if (v575 == v576)
  {
LABEL_1159:
    v596 = *(unsigned int *)(v779 + 504);
    if ((_DWORD)v596)
    {
      v597 = 0;
      v598 = *(uint64_t **)(v779 + 496);
      v599 = &v598[v596];
      v600 = HIDWORD(v804) - v805;
      do
      {
        if (v597 == v600)
          break;
        v601 = *v598;
        if (v803 == __p)
          v602 = (uint64_t *)((char *)&v804 + 4);
        else
          v602 = &v804;
        v603 = *(unsigned int *)v602;
        if ((_DWORD)v603)
        {
          v604 = 8 * v603;
          v605 = (char *)v803;
          while (*(_QWORD *)v605 >= 0xFFFFFFFFFFFFFFFELL)
          {
            v605 += 8;
            v604 -= 8;
            if (!v604)
              goto LABEL_1181;
          }
        }
        else
        {
          v605 = (char *)v803;
        }
        v606 = (char *)&v803[v603];
        if (v605 != v606)
        {
          if (*(_QWORD *)v605 == v601)
          {
LABEL_1180:
            ++v597;
            goto LABEL_1201;
          }
          v607 = (unint64_t *)(v605 + 8);
          while (v607 != (unint64_t *)v606)
          {
            v609 = *v607++;
            v608 = v609;
            if (v609 <= 0xFFFFFFFFFFFFFFFDLL && v608 == v601)
              goto LABEL_1180;
          }
        }
LABEL_1181:
        v611 = *(unsigned __int8 *)(v601 + 16) - 33;
        if (v611 <= 0x37)
        {
          if (((1 << (*(_BYTE *)(v601 + 16) - 33)) & 0x8000000000041) != 0)
          {
            v612 = *(_QWORD *)(v601 + 64);
            if (!v612 || (*(_BYTE *)(v612 + 17) & 0x30) == 0)
            {
              v613 = *(_DWORD *)(v601 + 20);
              if (v613 < 0)
              {
                v620 = v601 - 32 * (v613 & 0x7FFFFFF);
                v623 = *(_QWORD *)(v620 - 8);
                v621 = v620 - 8;
                v622 = v623;
                if (v623)
                {
                  v624 = -v622;
                  while (1)
                  {
                    v625 = *(_DWORD *)(*(_QWORD *)(v621 + v624) + 8);
                    v512 = v625 > 7;
                    v626 = (1 << v625) & 0x83;
                    if (v512 || v626 == 0)
                      break;
                    v624 += 16;
                    if (!v624)
                      goto LABEL_1189;
                  }
LABEL_1193:
                  v614 = *(_QWORD *)&v869[8];
                  v615 = sub_1C477672C(*(_QWORD *)&v869[8] + 16, v601);
                  v616 = *(_QWORD *)(v614 + 24);
                  v617 = 32;
                  if (v616 == *(_QWORD *)(v614 + 16))
                    v617 = 36;
                  if (v615 == (_QWORD *)(v616 + 8 * *(unsigned int *)(v614 + v617)))
                    goto LABEL_1211;
                  goto LABEL_1196;
                }
              }
LABEL_1189:
              if ((llvm::CallBase::hasFnAttrOnCalledFunction(*v598, 45) & 1) == 0
                && (llvm::CallBase::hasFnAttrOnCalledFunction(v601, 44) & 1) == 0)
              {
                goto LABEL_1193;
              }
            }
          }
          else if (v611 == 27)
          {
            if ((*(_WORD *)(v601 + 18) & 0x301) != 0)
              goto LABEL_1193;
          }
          else if (((1 << (*(_BYTE *)(v601 + 16) - 33)) & 0x808001D0000010) != 0)
          {
            goto LABEL_1193;
          }
        }
LABEL_1196:
        v618 = sub_1C477672C((uint64_t)&v903, v601);
        if (v903.n128_u64[1] == v903.n128_u64[0])
          v619 = (unsigned int *)&v904 + 1;
        else
          v619 = (unsigned int *)&v904;
        if (v618 == (_QWORD *)(v903.n128_u64[1] + 8 * *v619)
          && sub_1C56161EC(*(_QWORD *)(*(_QWORD *)v869 + 312), *(_DWORD *)(*(_QWORD *)v869 + 328), v601))
        {
          goto LABEL_1211;
        }
LABEL_1201:
        ++v598;
      }
      while (v598 != v599);
    }
    sub_1C56174C0((_QWORD **)v869, (uint64_t)&v881, &v903, (uint64_t)&__p, &v794);
    sub_1C5615888(&v911, *(uint64_t *)v869, &__p, (uint64_t)&v903);
    v895 = (__n128)v911;
    v896 = v912;
    v629 = v913;
    if (v913 != v915)
    {
      if ((_QWORD *)v897 != v898)
      {
        free((void *)v897);
        v629 = v913;
      }
      *(_QWORD *)&v897 = v629;
      *((_QWORD *)&v897 + 1) = v914;
      v913 = v915;
      HIDWORD(v914) = 0;
LABEL_1220:
      LODWORD(v914) = 0;
      v632 = v916;
      if (v916 != v918)
      {
        if (v899 != v901)
        {
          free(v899);
          v632 = v916;
        }
        v899 = v632;
        v900 = v917;
        v916 = v918;
        HIDWORD(v917) = 0;
        goto LABEL_1228;
      }
      v633 = v917;
      v634 = v900;
      if (v900 >= v917)
      {
        if ((_DWORD)v917)
          memmove(v899, v916, 8 * v917);
        goto LABEL_1227;
      }
      if (HIDWORD(v900) < v917)
      {
        LODWORD(v900) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v899, (uint64_t)v901, v917, 8);
      }
      else if ((_DWORD)v900)
      {
        memmove(v899, v916, 8 * v900);
LABEL_1225:
        if (v634 != v917)
          memcpy((char *)v899 + 8 * v634, (char *)v916 + 8 * v634, 8 * v917 - 8 * v634);
LABEL_1227:
        LODWORD(v900) = v633;
LABEL_1228:
        LODWORD(v917) = 0;
        if (v916 != v918)
          free(v916);
        if (v913 != v915)
          free(v913);
        v628 = 1;
        HIBYTE(v902) = 1;
        LOBYTE(v902) = 2 * (v895.n128_u64[1] == *((_QWORD *)&v896 + 1));
        if (v895.n128_u64[1] == *((_QWORD *)&v896 + 1))
        {
          if (WORD4(v894) < 4u)
          {
            v636 = 9;
            v635 = v770;
          }
          else
          {
            v635 = v770;
            if (*(_QWORD *)(*(_QWORD *)v869 + 264))
            {
              HIBYTE(v902) = 17;
              v636 = 25;
            }
            else
            {
              v636 = 9;
            }
          }
          if ((v635 & 1) == 0)
            HIBYTE(v902) = v636;
        }
        goto LABEL_1246;
      }
      v634 = 0;
      goto LABEL_1225;
    }
    v630 = v914;
    v631 = DWORD2(v897);
    if (DWORD2(v897) >= v914)
    {
      if ((_DWORD)v914)
        memmove((void *)v897, v913, 8 * v914);
      goto LABEL_1219;
    }
    if (HIDWORD(v897) < v914)
    {
      DWORD2(v897) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v897, (uint64_t)v898, v914, 8);
    }
    else if (DWORD2(v897))
    {
      memmove((void *)v897, v913, 8 * DWORD2(v897));
LABEL_1217:
      if (v631 != v914)
        memcpy((void *)(v897 + 8 * v631), (char *)v913 + 8 * v631, 8 * v914 - 8 * v631);
LABEL_1219:
      DWORD2(v897) = v630;
      goto LABEL_1220;
    }
    v631 = 0;
    goto LABEL_1217;
  }
  while (1)
  {
    v577 = (char *)sub_1C477672C((uint64_t)&__p, *(_QWORD *)v575);
    v578 = v803 == __p ? (uint64_t *)((char *)&v804 + 4) : &v804;
    if (v577 == (char *)&v803[*(unsigned int *)v578])
    {
      v580 = *(unsigned int *)(v575 + 40);
      if ((_DWORD)v580)
        break;
    }
LABEL_1127:
    v579 = v575 + 64;
    v575 = v573;
    if (v579 != v573)
    {
      v575 = v579;
      while ((*(_QWORD *)v575 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v575 += 64;
        if (v575 == v573)
        {
          v575 = v573;
          break;
        }
      }
    }
    if (v575 == v576)
      goto LABEL_1159;
  }
  v581 = *(uint64_t **)(v575 + 32);
  v582 = &v581[v580];
  while (1)
  {
    v583 = *v581;
    v584 = v803 == __p ? (uint64_t *)((char *)&v804 + 4) : &v804;
    v585 = *(unsigned int *)v584;
    if ((_DWORD)v585)
    {
      v586 = 8 * v585;
      v587 = (unint64_t *)v803;
      while (*v587 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v587;
        v586 -= 8;
        if (!v586)
          goto LABEL_1153;
      }
    }
    else
    {
      v587 = (unint64_t *)v803;
    }
    v588 = (char *)&v803[v585];
    if (v587 != (unint64_t *)v588)
      break;
LABEL_1153:
    v594 = sub_1C477672C((uint64_t)&v903, v583);
    if (v903.n128_u64[1] == v903.n128_u64[0])
      v595 = (unsigned int *)&v904 + 1;
    else
      v595 = (unsigned int *)&v904;
    if (v594 != (_QWORD *)(v903.n128_u64[1] + 8 * *v595))
      goto LABEL_1211;
    if (++v581 == v582)
      goto LABEL_1127;
  }
  v589 = *v587;
  while (1)
  {
    v590 = *(_QWORD *)(v589 + 40);
    v591 = *(_QWORD *)(v583 + 40);
    if (v590 != v591 && !llvm::DominatorTreeBase<llvm::BasicBlock,false>::dominates(v793, v590, v591))
      break;
    v592 = v587 + 1;
    do
    {
      if (v592 == (unint64_t *)v588)
        goto LABEL_1153;
      v593 = *v592++;
      v589 = v593;
    }
    while (v593 > 0xFFFFFFFFFFFFFFFDLL);
    v587 = v592 - 1;
  }
LABEL_1211:
  v628 = 0;
LABEL_1246:
  if (v903.n128_u64[1] != v903.n128_u64[0])
    free((void *)v903.n128_u64[1]);
  if (v628)
  {
    if ((_DWORD)v882)
    {
      v637 = (uint64_t *)v881;
      v638 = 8 * v882;
      do
      {
        v639 = (char *)sub_1C477672C((uint64_t)&v797, *v637);
        if (v798 == v797)
          v640 = (uint64_t *)((char *)&v799 + 4);
        else
          v640 = &v799;
        if (v639 != (char *)&v798[*(unsigned int *)v640])
        {
          *(_QWORD *)v639 = -2;
          ++v800;
        }
        ++v637;
        v638 -= 8;
      }
      while (v638);
    }
    sub_1C5617070((uint64_t)&v869[24], (unint64_t)&v881);
  }
  if (v899 != v901)
    free(v899);
  if ((_QWORD *)v897 != v898)
    free((void *)v897);
  sub_1C4914448((void ***)&v894);
  if (*((_QWORD **)&v891 + 1) != &v892[1])
    free(*((void **)&v891 + 1));
  if ((_QWORD)v887 != *((_QWORD *)&v886 + 1))
    free((void *)v887);
  if (*((__int128 **)&v884 + 1) != (__int128 *)((char *)&v885 + 8))
    free(*((void **)&v884 + 1));
  if (v881 != &v883)
    free(v881);
LABEL_1270:
  v881 = &v883;
  v882 = (void *)0x200000000;
  *((_QWORD *)&v884 + 1) = (char *)&v885 + 8;
  *(_QWORD *)&v885 = 0x200000000;
  *((_QWORD *)&v886 + 1) = &v889;
  *(_QWORD *)&v887 = &v889;
  *((_QWORD *)&v887 + 1) = 4;
  LODWORD(v888) = 0;
  *((_QWORD *)&v891 + 1) = &v892[1];
  v892[0] = 0xA00000000;
  BYTE8(v893) = 1;
  *(_QWORD *)&v894 = 1;
  WORD4(v894) = 0;
  BYTE10(v894) = 0;
  v896 = 0u;
  v895 = 0u;
  *(_QWORD *)&v897 = v898;
  *((_QWORD *)&v897 + 1) = 0x800000000;
  v899 = v901;
  v900 = 0x800000000;
  if (HIDWORD(v799) != v800)
  {
    v641 = *(_QWORD *)v869;
    v902 = 0;
    v919 = v923;
    v920 = v923;
    v921 = 16;
    v922 = 0;
    *(_QWORD *)&v911 = &v912;
    *((_QWORD *)&v911 + 1) = 0x800000000;
    v807 = v811;
    v808 = v811;
    v809 = 8;
    if (v798 == v797)
      v642 = HIDWORD(v799);
    else
      v642 = v799;
    v810 = 0;
    if ((_DWORD)v642)
    {
      v643 = 8 * v642;
      v644 = v798;
      while ((unint64_t)*v644 >= 0xFFFFFFFFFFFFFFFELL)
      {
        ++v644;
        v643 -= 8;
        if (!v643)
          goto LABEL_1314;
      }
    }
    else
    {
      v644 = v798;
    }
    v645 = (char *)&v798[v642];
    if (v644 != (uint64_t *)v645)
    {
      v646 = *v644;
LABEL_1282:
      v903.n128_u64[0] = 0;
      if (sub_1C561659C(*(_QWORD *)(v641 + 288), *(_DWORD *)(v641 + 304), v646, &v903))
        v647 = v903.n128_u64[0];
      else
        v647 = *(_QWORD *)(v641 + 288) + ((unint64_t)*(unsigned int *)(v641 + 304) << 6);
      v648 = WORD4(v894);
      if (WORD4(v894) <= *(unsigned __int16 *)(v647 + 24))
        v648 = *(_WORD *)(v647 + 24);
      v649 = *(_BYTE *)(v647 + 26);
      WORD4(v894) = v648;
      BYTE10(v894) |= v649;
      if (*(_BYTE *)(v646 + 16) == 84)
      {
        v650 = *(_QWORD *)(v646 - 32);
        if (v650)
        {
          if (!*(_BYTE *)(v650 + 16)
            && *(_QWORD *)(v650 + 24) == *(_QWORD *)(v646 + 72)
            && (*(_BYTE *)(v650 + 33) & 0x20) != 0)
          {
            v651 = *(_DWORD *)(v650 + 36);
            if ((v651 - 2471) < 8 || (v651 - 2703) < 2 || (v651 - 1996) <= 1)
            {
              v903 = 0uLL;
              *(_QWORD *)&v904 = 0;
              sub_1C5617CF4((uint64_t)&v903, v646);
              sub_1C4AB8FDC((uint64_t)&v911, &v903);
            }
          }
        }
      }
      v652 = *(unsigned int *)(v647 + 40);
      if ((_DWORD)v652)
      {
        v653 = *(uint64_t **)(v647 + 32);
        v654 = 8 * v652;
        do
        {
          v655 = *v653;
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v807, *v653);
          if (v656)
          {
            if (*(_BYTE *)(v655 + 16) == 84)
            {
              v657 = *(_QWORD *)(v655 - 32);
              if (v657)
              {
                if (!*(_BYTE *)(v657 + 16)
                  && *(_QWORD *)(v657 + 24) == *(_QWORD *)(v655 + 72)
                  && (*(_BYTE *)(v657 + 33) & 0x20) != 0
                  && (sub_1C5E9D850(*(_DWORD *)(v657 + 36)) & 1) != 0)
                {
                  v903 = 0uLL;
                  *(_QWORD *)&v904 = 0;
                  sub_1C5617CF4((uint64_t)&v903, v655);
                  sub_1C4AB8FDC((uint64_t)&v911, &v903);
                }
              }
            }
          }
          ++v653;
          v654 -= 8;
        }
        while (v654);
        v658 = *(unsigned int *)(v647 + 40);
        if ((_DWORD)v658)
        {
          v659 = *(uint64_t **)(v647 + 32);
          v660 = 8 * v658;
          do
          {
            v661 = *v659++;
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v919, v661);
            v660 -= 8;
          }
          while (v660);
        }
      }
      v662 = (unint64_t *)(v644 + 1);
      while (v662 != (unint64_t *)v645)
      {
        v663 = *v662++;
        v646 = v663;
        if (v663 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v644 = (uint64_t *)(v662 - 1);
          goto LABEL_1282;
        }
      }
    }
LABEL_1314:
    sub_1C56174C0((_QWORD **)v869, (uint64_t)&v881, &v919, (uint64_t)&v797, &v794);
    sub_1C5615888(&v903, *(uint64_t *)v869, &v797, (uint64_t)&v919);
    v895 = v903;
    v896 = v904;
    v664 = v905;
    if (v905 == v907)
    {
      v665 = v906;
      v666 = DWORD2(v897);
      if (DWORD2(v897) >= v906)
      {
        if ((_DWORD)v906)
          memmove((void *)v897, v905, 8 * v906);
        DWORD2(v897) = v665;
      }
      else
      {
        if (HIDWORD(v897) < v906)
        {
          DWORD2(v897) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v897, (uint64_t)v898, v906, 8);
          v666 = 0;
        }
        else if (DWORD2(v897))
        {
          memmove((void *)v897, v905, 8 * DWORD2(v897));
        }
        else
        {
          v666 = 0;
        }
        if (v666 != v906)
          memcpy((void *)(v897 + 8 * v666), (char *)v905 + 8 * v666, 8 * v906 - 8 * v666);
        DWORD2(v897) = v665;
      }
    }
    else
    {
      if ((_QWORD *)v897 != v898)
      {
        free((void *)v897);
        v664 = v905;
      }
      *(_QWORD *)&v897 = v664;
      *((_QWORD *)&v897 + 1) = v906;
      v905 = v907;
      HIDWORD(v906) = 0;
    }
    LODWORD(v906) = 0;
    v667 = v908;
    if (v908 == v910)
    {
      v668 = v909;
      v669 = v900;
      if (v900 >= v909)
      {
        if ((_DWORD)v909)
          memmove(v899, v908, 8 * v909);
      }
      else
      {
        if (HIDWORD(v900) < v909)
        {
          LODWORD(v900) = 0;
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v899, (uint64_t)v901, v909, 8);
LABEL_1326:
          v669 = 0;
        }
        else
        {
          if (!(_DWORD)v900)
            goto LABEL_1326;
          memmove(v899, v908, 8 * v900);
        }
        if (v669 != v909)
          memcpy((char *)v899 + 8 * v669, (char *)v908 + 8 * v669, 8 * v909 - 8 * v669);
      }
      LODWORD(v900) = v668;
    }
    else
    {
      if (v899 != v901)
      {
        free(v899);
        v667 = v908;
      }
      v899 = v667;
      v900 = v909;
      v908 = v910;
      HIDWORD(v909) = 0;
    }
    LODWORD(v909) = 0;
    if (v908 != v910)
      free(v908);
    if (v905 != v907)
      free(v905);
    if (v895.n128_u64[1] == *((_QWORD *)&v896 + 1))
    {
      v670 = *(unsigned int *)(v641 + 504);
      if (!(_DWORD)v670)
      {
        v672 = 1;
        goto LABEL_1417;
      }
      v671 = (int)v882;
      v672 = 1;
      if ((_DWORD)v882)
      {
        v673 = 0;
        v674 = 0;
        v675 = 0;
        v676 = *(uint64_t **)(v641 + 496);
        v677 = &v676[v670];
        v772 = 1;
        v780 = 1;
        while (1)
        {
          v678 = *v676;
          v673 |= v895.n128_u64[0] == *v676;
          if ((v673 & 1) == 0)
            goto LABEL_1401;
          if (sub_1C561659C(*(_QWORD *)(v641 + 288), *(_DWORD *)(v641 + 304), *v676, &v903))
          {
            if (*(_BYTE *)(v678 + 16) != 84)
              goto LABEL_1356;
            v679 = *(_QWORD *)(v678 - 32);
            if (!v679
              || *(_BYTE *)(v679 + 16)
              || *(_QWORD *)(v679 + 24) != *(_QWORD *)(v678 + 72)
              || (*(_BYTE *)(v679 + 33) & 0x20) == 0)
            {
              goto LABEL_1356;
            }
            v680 = *(_DWORD *)(v679 + 36);
            if ((v680 - 2471) < 8 || (v680 - 2703) < 2 || (v680 - 1996) < 2)
              goto LABEL_1357;
            if ((sub_1C5616C94(v678) & 1) != 0)
            {
              v780 = 0;
            }
            else
            {
LABEL_1356:
              v780 = 0;
              v674 = 1;
            }
LABEL_1357:
            ++v675;
            goto LABEL_1401;
          }
          if (v675)
          {
            v681 = *(unsigned __int8 *)(v678 + 16) - 33;
            if (v681 > 0x37)
              goto LABEL_1355;
            if (((1 << (*(_BYTE *)(v678 + 16) - 33)) & 0x8000000000041) != 0)
            {
              v682 = *(_QWORD *)(v678 + 64);
              if (v682 && ((*(_BYTE *)(v682 + 20) & 4) != 0 || (*(_BYTE *)(v682 + 17) & 0x10) != 0))
              {
LABEL_1355:
                v678 = *v676;
                goto LABEL_1386;
              }
              v903.n128_u32[0] = 7;
              if (sub_1C53E4BBC(v678, (__int32 *)&v903, 1uLL))
              {
                v685 = *(_QWORD *)(v678 - 32);
                if (!v685
                  || *(_BYTE *)(v685 + 16)
                  || *(_QWORD *)(v685 + 24) != *(_QWORD *)(v678 + 72)
                  || *(_DWORD *)(v685 + 36) != 7)
                {
LABEL_1371:
                  v678 = *v676;
LABEL_1372:
                  v686 = *(unsigned __int8 *)(v678 + 16);
                  if (v686 == 60)
                  {
                    v688 = **(_QWORD **)(v678 - 32);
                    if ((*(_DWORD *)(v688 + 8) & 0xFE) == 0x12)
                      v689 = *(_DWORD *)(**(_QWORD **)(v688 + 16) + 8) & 0xFFFFFF00;
                    else
                      v689 = *(_DWORD *)(v688 + 8) & 0xFFFFFF00;
                    if (v689 != 0x4000)
                      v772 = (v689 == 512) & v772;
                  }
                  else if (v686 == 84
                         && (v687 = *(_QWORD *)(v678 - 32)) != 0
                         && !*(_BYTE *)(v687 + 16)
                         && *(_QWORD *)(v687 + 24) == *(_QWORD *)(v678 + 72)
                         && (*(_BYTE *)(v687 + 33) & 0x20) != 0)
                  {
                    v771 = *(_DWORD *)(v687 + 36);
                    if (!sub_1C47860D0(v771))
                      v772 &= sub_1C5E9D850(v771);
                  }
                  else
                  {
                    v772 = 0;
                  }
                  goto LABEL_1386;
                }
              }
              if ((llvm::CallBase::hasFnAttrOnCalledFunction(v678, 66) & 1) != 0)
                goto LABEL_1355;
              hasFnAttrOnCalledFunction = llvm::CallBase::hasFnAttrOnCalledFunction(v678, 44);
              v678 = *v676;
              if ((hasFnAttrOnCalledFunction & 1) == 0)
                goto LABEL_1372;
            }
            else
            {
              if (((1 << (*(_BYTE *)(v678 + 16) - 33)) & 0x808001C8000010) != 0)
                goto LABEL_1371;
              if (v681 != 28)
                goto LABEL_1355;
              v684 = *(_WORD *)(v678 + 18);
              v678 = *v676;
              if ((v684 & 0x301) != 0)
                goto LABEL_1372;
            }
          }
LABEL_1386:
          v690 = *(unsigned __int8 *)(v678 + 16) - 33;
          if (v690 <= 0x37)
          {
            if (((1 << (*(_BYTE *)(v678 + 16) - 33)) & 0x8000000000041) != 0)
            {
              v691 = *(_QWORD *)(v678 + 64);
              if (!v691 || (*(_BYTE *)(v691 + 17) & 0x30) == 0)
              {
                v692 = *(_DWORD *)(v678 + 20);
                if (v692 < 0)
                {
                  v697 = v678 - 32 * (v692 & 0x7FFFFFF);
                  v700 = *(_QWORD *)(v697 - 8);
                  v698 = v697 - 8;
                  v699 = v700;
                  if (v700)
                  {
                    v701 = -v699;
                    while (1)
                    {
                      v702 = *(_DWORD *)(*(_QWORD *)(v698 + v701) + 8);
                      v512 = v702 > 7;
                      v703 = (1 << v702) & 0x83;
                      if (v512 || v703 == 0)
                        break;
                      v701 += 16;
                      if (!v701)
                        goto LABEL_1394;
                    }
LABEL_1398:
                    v693 = *(_QWORD *)&v869[8];
                    v694 = sub_1C477672C(*(_QWORD *)&v869[8] + 16, *v676);
                    v695 = *(_QWORD *)(v693 + 24);
                    v696 = 32;
                    if (v695 == *(_QWORD *)(v693 + 16))
                      v696 = 36;
                    v674 |= v694 == (_QWORD *)(v695 + 8 * *(unsigned int *)(v693 + v696));
                    goto LABEL_1401;
                  }
                }
LABEL_1394:
                if ((llvm::CallBase::hasFnAttrOnCalledFunction(v678, 45) & 1) == 0
                  && (llvm::CallBase::hasFnAttrOnCalledFunction(v678, 44) & 1) == 0)
                {
                  goto LABEL_1398;
                }
              }
            }
            else if (v690 == 27)
            {
              if ((*(_WORD *)(v678 + 18) & 0x301) != 0)
                goto LABEL_1398;
            }
            else if (((1 << (*(_BYTE *)(v678 + 16) - 33)) & 0x808001D0000010) != 0)
            {
              goto LABEL_1398;
            }
          }
LABEL_1401:
          if (++v676 == v677 || v675 == v671)
          {
            v672 = v772;
            if (v674 & 1 | ((v780 & 1) == 0))
            {
              if ((v674 & 1) == 0)
                HIBYTE(v902) = 1;
              goto LABEL_1435;
            }
            break;
          }
        }
      }
LABEL_1417:
      LOBYTE(v902) = 1;
      if (WORD4(v894) >= 4u && *(_QWORD *)(*(_QWORD *)v869 + 264))
      {
        if (!byte_1ED808460 && *(_DWORD *)(v641 + 504) <= 0x30u)
        {
          if ((v672 & 1) != 0)
            v705 = 32;
          else
            v705 = 16;
          HIBYTE(v902) = v705;
        }
LABEL_1434:
        WORD4(v894) = 4;
        goto LABEL_1435;
      }
      if ((v672 & 1) != 0)
        __asm { BR              X13 }
      if (WORD4(v894) > 3u)
        goto LABEL_1434;
    }
LABEL_1435:
    if (DWORD2(v911))
    {
      v706 = v911 + 16;
      v707 = 24 * DWORD2(v911);
      do
      {
        v708 = *(_DWORD *)(v706 - 8);
        if (v708 == -1)
        {
          BYTE8(v893) = 0;
        }
        else
        {
          if ((v894 & 1) != 0)
            v709 = (unint64_t)v894 >> 58;
          else
            v709 = *(unsigned int *)(v894 + 64);
          v710 = *(_DWORD *)(v706 - 4) + v708;
          if (v709 <= v710)
            sub_1C496F5AC((unint64_t *)&v894, *(_DWORD *)(v706 - 4) + v708, 0);
          sub_1C49144A0((unint64_t *)&v894, v708, v710);
        }
        v706 += 24;
        v707 -= 24;
      }
      while (v707);
    }
    if (v808 != v807)
      free(v808);
    if ((__int128 *)v911 != &v912)
      free((void *)v911);
    if (v920 != v919)
      free(v920);
    sub_1C5617070((uint64_t)&v869[24], (unint64_t)&v881);
    if (v899 != v901)
      free(v899);
  }
  if ((_QWORD *)v897 != v898)
    free((void *)v897);
  sub_1C4914448((void ***)&v894);
  if (*((_QWORD **)&v891 + 1) != &v892[1])
    free(*((void **)&v891 + 1));
  if ((_QWORD)v887 != *((_QWORD *)&v886 + 1))
    free((void *)v887);
  if (*((__int128 **)&v884 + 1) != (__int128 *)((char *)&v885 + 8))
    free(*((void **)&v884 + 1));
  if (v881 != &v883)
    free(v881);
  v711 = v794;
  if (v796)
  {
    v712 = (void **)(v794 + 16);
    v713 = 48 * v796;
    do
    {
      if (((unint64_t)*(v712 - 2) | 0x1000) != 0xFFFFFFFFFFFFF000 && *v712 != *(v712 - 1))
        free(*v712);
      v712 += 6;
      v713 -= 48;
    }
    while (v713);
  }
  MEMORY[0x1CAA32FB4](v711, 8);
  if (v798 != v797)
    free(v798);
  if (v803 != __p)
    free(v803);
  v714 = *(uint64_t ***)(v767 + 40);
  inserted = llvm::Module::getOrInsertNamedMetadata((uint64_t)v714, "multirate_transform", 0x13uLL);
  if (!*(_DWORD *)(*(_QWORD *)(inserted + 48) + 8))
  {
    v717 = inserted;
    v718 = *v714;
    v719 = **v714;
    v720 = *(llvm::ConstantInt **)(v719 + 1960);
    v721 = *(unsigned int *)(v719 + 1968);
    LODWORD(v882) = v721 >> 8;
    if (v721 >> 8 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v881, 1, 0);
    }
    else
    {
      if (v721 <= 0xFF)
        v722 = 0;
      else
        v722 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v721);
      v881 = (void *)(v722 & 1);
    }
    v724 = llvm::ConstantInt::get(v720, (llvm::LLVMContext *)&v881, v716);
    if (v882 >= 0x41 && v881)
      MEMORY[0x1CAA32F9C](v881, 0x1000C8000313F17);
    *(_QWORD *)&v911 = llvm::ValueAsMetadata::get(v724, v723);
    Impl = (void *)llvm::MDTuple::getImpl(v718, &v911, 1, 0, 1);
    v881 = Impl;
    v726 = *(_QWORD *)(v717 + 48);
    v727 = *(unsigned int *)(v726 + 8);
    if (v727 >= *(_DWORD *)(v726 + 12))
    {
      sub_1C5419FD8(v726, (unsigned __int8 **)&v881);
    }
    else
    {
      v728 = (unsigned __int8 *)Impl;
      v729 = (unsigned __int8 **)(*(_QWORD *)v726 + 8 * v727);
      *v729 = v728;
      if (v728)
      {
        llvm::MetadataTracking::track((uint64_t)v729, v728, 2);
        LODWORD(v727) = *(_DWORD *)(v726 + 8);
      }
      *(_DWORD *)(v726 + 8) = v727 + 1;
    }
  }
  v730 = *(_WORD *)(v768 + 28);
  v731 = *(unsigned __int8 *)(v768 + 97);
  v732 = v835 != 28 && v731 == 0;
  v881 = v869;
  v882 = &v821;
  v883 = (uint64_t)&v813;
  *(_QWORD *)&v884 = v714;
  *((_QWORD *)&v884 + 1) = v767;
  v885 = (unint64_t)v776;
  LOWORD(v886) = v730;
  if (v732)
    v733 = 4;
  else
    v733 = 8;
  DWORD1(v886) = v733;
  BYTE8(v886) = v731;
  v734 = v767;
  if ((_DWORD)__src)
  {
    v735 = *(_QWORD *)&v869[24];
    v736 = 448 * __src;
    do
    {
      if (*(unsigned __int16 *)(v735 + 240) >= 4u)
        (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v885 + 8))(v885, 29, 1, 1, 0, 1, 2);
      sub_1C5617E8C(&v881, v735);
      v735 += 448;
      v736 -= 448;
    }
    while (v736);
    v734 = *((_QWORD *)&v884 + 1);
  }
  v737 = v734 + 72;
  v738 = *(_QWORD *)(v734 + 80);
  if (v738 != v734 + 72)
  {
    do
    {
      v739 = *(_QWORD *)(v738 + 8);
      if (v738)
        v740 = v738 - 24;
      else
        v740 = 0;
      llvm::MergeBlockIntoPredecessor(v740, 0, 0, 0, 0, 0);
      v738 = v739;
    }
    while (v739 != v737);
  }
  sub_1C561530C(v767);
  v741 = **(char ****)(v768 + 8);
  do
  {
    v742 = *v741;
    v741 += 2;
  }
  while (v742 != llvm::LoopInfoWrapperPass::ID);
  v743 = (uint64_t *)((*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v741 - 1) + 96))(*(v741 - 1), llvm::LoopInfoWrapperPass::ID)+ 32);
  if (*(_BYTE *)(v768 + 96))
  {
    v744 = v767;
    v745 = 1;
    v746 = 1;
  }
  else
  {
    v747 = *(_QWORD *)(v768 + 88);
    if (v747)
      v745 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v747 + 48))(v747, v767) != 0;
    else
      v745 = 0;
    v744 = v767;
    v746 = 0;
  }
  sub_1C5EA12A4(v744, 0, 1u, v745, v746, v743);
  v748 = *(uint64_t **)&v869[24];
  if ((_DWORD)__src)
  {
    v749 = 0;
    v750 = 448 * __src;
    do
    {
      v751 = &v748[(unint64_t)v750 / 8];
      v752 = (uint64_t *)v748[(unint64_t)v750 / 8 - 11];
      if (&v748[(unint64_t)v750 / 8 - 9] != v752)
        free(v752);
      v753 = (char *)*(v751 - 21);
      if (v751 - 19 != (uint64_t *)v753)
        free(v753);
      v754 = &v748[(unint64_t)v750 / 8];
      sub_1C4914448((void ***)&v748[(unint64_t)v750 / 8 - 27]);
      v755 = (uint64_t *)v748[(unint64_t)v750 / 8 - 40];
      if (&v748[(unint64_t)v750 / 8 - 38] != v755)
        free(v755);
      v756 = (void *)*(v754 - 47);
      if (v756 != (void *)*(v754 - 48))
        free(v756);
      v757 = (uint64_t *)v748[(unint64_t)v750 / 8 - 52];
      if (&v748[(unint64_t)v750 / 8 - 50] != v757)
        free(v757);
      v758 = (uint64_t *)*(v751 - 56);
      if (&v748[(unint64_t)v750 / 8 - 54] != v758)
        free(v758);
      v748 -= 56;
      v749 += 448;
    }
    while (v750 != v749);
    v748 = *(uint64_t **)&v869[24];
  }
  if (v748 != &v871)
    free(v748);
  if (v818 != v820)
    free(v818);
  if (v814 != (void *)v813)
    free(v814);
LABEL_1532:
  if (__b != v861)
    free(__b);
  if (v857 != v856)
    free(v857);
  if (v852 != v851)
    free(v852);
  if (v848 != v850)
    free(v848);
  if (v844 != v843)
    free(v844);
  MEMORY[0x1CAA32FB4](v840, 8);
  v759 = v838;
  if (v839)
  {
    v760 = (unint64_t)v839 << 6;
    v761 = (_QWORD *)(v838 + 48);
    do
    {
      if ((*(v761 - 6) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v762 = (_QWORD *)*(v761 - 2);
        if (v761 != v762)
          free(v762);
      }
      v761 += 8;
      v760 -= 64;
    }
    while (v760);
    v759 = v838;
  }
  MEMORY[0x1CAA32FB4](v759, 8);
  if (v832 != v834)
    free(v832);
  if (__dst != v831)
    free(__dst);
  return v778 != 0;
}

void sub_1C561530C(uint64_t a1)
{
  uint64_t *v2;
  int v3;
  uint64_t Declaration;
  uint64_t v5;
  llvm::Value **v6;
  uint64_t v7;
  llvm::Value *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  _QWORD *v13;
  _QWORD *v14;
  llvm::ValueAsMetadata **v15;
  uint64_t v16;
  llvm::ValueAsMetadata *v17;
  uint64_t v18;
  _QWORD *v19;
  llvm::Value **v20;
  uint64_t v21;
  llvm::Value *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  _QWORD *v27;
  _QWORD *v28;
  llvm::ValueAsMetadata **v29;
  uint64_t v30;
  llvm::ValueAsMetadata *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t v35;
  llvm::Value **v36;
  uint64_t v37;
  llvm::Value *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  _QWORD *v43;
  _QWORD *v44;
  llvm::ValueAsMetadata **v45;
  uint64_t v46;
  llvm::ValueAsMetadata *v47;
  uint64_t v48;
  _QWORD *v49;
  llvm::Value **v50;
  uint64_t v51;
  llvm::Value *v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  llvm::ValueAsMetadata *v60;
  uint64_t v61;
  _QWORD *v62;
  void *v63;
  uint64_t v64;
  _QWORD v65[11];

  v65[10] = *MEMORY[0x1E0C80C00];
  v2 = *(uint64_t **)(a1 + 40);
  v3 = (*(unsigned __int16 *)(a1 + 18) >> 4) & 0x3FF;
  if (v3 == 102 || v3 == 106)
  {
    Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t **)(a1 + 40), 2710, 0, 0);
    v5 = llvm::Intrinsic::getDeclaration(v2, 2711, 0, 0);
    v6 = llvm::ConstantInt::get(**(llvm::ConstantInt ***)(*(_QWORD *)(Declaration + 24) + 16), 0, 0);
    v7 = *(_QWORD *)(Declaration + 8);
    v63 = v65;
    v64 = 0xA00000000;
    if (v7)
    {
      v8 = (llvm::Value *)v6;
      v9 = 0;
      v10 = v7;
      do
      {
        v10 = *(_QWORD *)(v10 + 8);
        --v9;
      }
      while (v10);
      if (v9 <= 0xFFFFFFFFFFFFFFF5)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v63, (uint64_t)v65, -(uint64_t)v9, 8);
        v11 = v64;
        v13 = v63;
        v12 = v64;
      }
      else
      {
        v11 = 0;
        v12 = 0;
        v13 = v65;
      }
      v14 = &v13[v11];
      do
      {
        *v14++ = *(_QWORD *)(v7 + 24);
        v7 = *(_QWORD *)(v7 + 8);
      }
      while (v7);
      v15 = (llvm::ValueAsMetadata **)v63;
      LODWORD(v64) = v12 - v9;
      if (v12 != (_DWORD)v9)
      {
        v16 = 8 * (v12 - v9);
        do
        {
          v17 = *v15;
          if (*v15 && *((_BYTE *)v17 + 16) == 84 && *(_QWORD *)(*((_QWORD *)v17 + 5) + 56) == a1)
          {
            llvm::Value::doRAUW(*v15, v8, (llvm::Value *)1);
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v17 + 5) + 40, (uint64_t ***)v17);
            v18 = *((_QWORD *)v17 + 3);
            v19 = (_QWORD *)*((_QWORD *)v17 + 4);
            *v19 = v18;
            *(_QWORD *)(v18 + 8) = v19;
            *((_QWORD *)v17 + 3) = 0;
            *((_QWORD *)v17 + 4) = 0;
            llvm::Value::deleteValue(v17);
          }
          ++v15;
          v16 -= 8;
        }
        while (v16);
        v15 = (llvm::ValueAsMetadata **)v63;
      }
      if (v15 != v65)
        free(v15);
    }
    v20 = llvm::ConstantInt::get(**(llvm::ConstantInt ***)(*(_QWORD *)(v5 + 24) + 16), 1, 0);
    v21 = *(_QWORD *)(v5 + 8);
    v63 = v65;
    v64 = 0xA00000000;
    if (v21)
    {
      v22 = (llvm::Value *)v20;
      v23 = 0;
      v24 = v21;
      do
      {
        v24 = *(_QWORD *)(v24 + 8);
        --v23;
      }
      while (v24);
      if (v23 <= 0xFFFFFFFFFFFFFFF5)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v63, (uint64_t)v65, -(uint64_t)v23, 8);
        v25 = v64;
        v27 = v63;
        v26 = v64;
      }
      else
      {
        v25 = 0;
        v26 = 0;
        v27 = v65;
      }
      v28 = &v27[v25];
      do
      {
        *v28++ = *(_QWORD *)(v21 + 24);
        v21 = *(_QWORD *)(v21 + 8);
      }
      while (v21);
      v29 = (llvm::ValueAsMetadata **)v63;
      LODWORD(v64) = v26 - v23;
      if (v26 == (_DWORD)v23)
        goto LABEL_67;
      v30 = 8 * (v26 - v23);
      do
      {
        v31 = *v29;
        if (*v29 && *((_BYTE *)v31 + 16) == 84 && *(_QWORD *)(*((_QWORD *)v31 + 5) + 56) == a1)
        {
          llvm::Value::doRAUW(*v29, v22, (llvm::Value *)1);
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v31 + 5) + 40, (uint64_t ***)v31);
          v32 = *((_QWORD *)v31 + 3);
          v33 = (_QWORD *)*((_QWORD *)v31 + 4);
          *v33 = v32;
          *(_QWORD *)(v32 + 8) = v33;
          *((_QWORD *)v31 + 3) = 0;
          *((_QWORD *)v31 + 4) = 0;
          llvm::Value::deleteValue(v31);
        }
        ++v29;
        v30 -= 8;
      }
      while (v30);
LABEL_66:
      v29 = (llvm::ValueAsMetadata **)v63;
LABEL_67:
      if (v29 != v65)
        free(v29);
    }
  }
  else
  {
    v34 = llvm::Intrinsic::getDeclaration(*(uint64_t **)(a1 + 40), 1268, 0, 0);
    v35 = llvm::Intrinsic::getDeclaration(v2, 1280, 0, 0);
    v36 = llvm::ConstantInt::get(**(llvm::ConstantInt ***)(*(_QWORD *)(v34 + 24) + 16), 255, 0);
    v37 = *(_QWORD *)(v34 + 8);
    v63 = v65;
    v64 = 0xA00000000;
    if (v37)
    {
      v38 = (llvm::Value *)v36;
      v39 = 0;
      v40 = v37;
      do
      {
        v40 = *(_QWORD *)(v40 + 8);
        --v39;
      }
      while (v40);
      if (v39 <= 0xFFFFFFFFFFFFFFF5)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v63, (uint64_t)v65, -(uint64_t)v39, 8);
        v41 = v64;
        v43 = v63;
        v42 = v64;
      }
      else
      {
        v41 = 0;
        v42 = 0;
        v43 = v65;
      }
      v44 = &v43[v41];
      do
      {
        *v44++ = *(_QWORD *)(v37 + 24);
        v37 = *(_QWORD *)(v37 + 8);
      }
      while (v37);
      v45 = (llvm::ValueAsMetadata **)v63;
      LODWORD(v64) = v42 - v39;
      if (v42 != (_DWORD)v39)
      {
        v46 = 8 * (v42 - v39);
        do
        {
          v47 = *v45;
          if (*v45 && *((_BYTE *)v47 + 16) == 84 && *(_QWORD *)(*((_QWORD *)v47 + 5) + 56) == a1)
          {
            llvm::Value::doRAUW(*v45, v38, (llvm::Value *)1);
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v47 + 5) + 40, (uint64_t ***)v47);
            v48 = *((_QWORD *)v47 + 3);
            v49 = (_QWORD *)*((_QWORD *)v47 + 4);
            *v49 = v48;
            *(_QWORD *)(v48 + 8) = v49;
            *((_QWORD *)v47 + 3) = 0;
            *((_QWORD *)v47 + 4) = 0;
            llvm::Value::deleteValue(v47);
          }
          ++v45;
          v46 -= 8;
        }
        while (v46);
        v45 = (llvm::ValueAsMetadata **)v63;
      }
      if (v45 != v65)
        free(v45);
    }
    v50 = llvm::ConstantInt::get(**(llvm::ConstantInt ***)(*(_QWORD *)(v35 + 24) + 16), 0, 0);
    v51 = *(_QWORD *)(v35 + 8);
    v63 = v65;
    v64 = 0xA00000000;
    if (v51)
    {
      v52 = (llvm::Value *)v50;
      v53 = 0;
      v54 = v51;
      do
      {
        v54 = *(_QWORD *)(v54 + 8);
        --v53;
      }
      while (v54);
      if (v53 <= 0xFFFFFFFFFFFFFFF5)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v63, (uint64_t)v65, -(uint64_t)v53, 8);
        v55 = v64;
        v57 = v63;
        v56 = v64;
      }
      else
      {
        v55 = 0;
        v56 = 0;
        v57 = v65;
      }
      v58 = &v57[v55];
      do
      {
        *v58++ = *(_QWORD *)(v51 + 24);
        v51 = *(_QWORD *)(v51 + 8);
      }
      while (v51);
      v29 = (llvm::ValueAsMetadata **)v63;
      LODWORD(v64) = v56 - v53;
      if (v56 == (_DWORD)v53)
        goto LABEL_67;
      v59 = 8 * (v56 - v53);
      do
      {
        v60 = *v29;
        if (*v29 && *((_BYTE *)v60 + 16) == 84 && *(_QWORD *)(*((_QWORD *)v60 + 5) + 56) == a1)
        {
          llvm::Value::doRAUW(*v29, v52, (llvm::Value *)1);
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v60 + 5) + 40, (uint64_t ***)v60);
          v61 = *((_QWORD *)v60 + 3);
          v62 = (_QWORD *)*((_QWORD *)v60 + 4);
          *v62 = v61;
          *(_QWORD *)(v61 + 8) = v62;
          *((_QWORD *)v60 + 3) = 0;
          *((_QWORD *)v60 + 4) = 0;
          llvm::Value::deleteValue(v60);
        }
        ++v29;
        v59 -= 8;
      }
      while (v59);
      goto LABEL_66;
    }
  }
}

double sub_1C5615888(_QWORD *a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  unint64_t *v8;
  unsigned int *v9;
  uint64_t v10;
  unint64_t *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t NearestCommonDominator;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t *v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t *v32;
  uint64_t *v33;
  uint64_t *v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  _QWORD *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  int v50;
  int v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  _QWORD *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  uint64_t v64;
  int v65;
  int v66;
  _QWORD *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t v70;
  unsigned int *v71;
  uint64_t v72;
  uint64_t v73;
  _QWORD *v74;
  _QWORD *i;
  _QWORD *v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  unsigned int *v80;
  _QWORD *v81;
  _QWORD *v82;
  uint64_t v83;
  double result;

  v8 = (unint64_t *)a3[1];
  if (v8 == (unint64_t *)*a3)
    v9 = (unsigned int *)a3 + 5;
  else
    v9 = (unsigned int *)(a3 + 2);
  v10 = *v9;
  v11 = &v8[v10];
  v12 = 8 * v10;
  v13 = a3[1];
  if ((_DWORD)v10)
  {
    v14 = 8 * v10;
    v13 = a3[1];
    while (*(_QWORD *)v13 >= 0xFFFFFFFFFFFFFFFELL)
    {
      v13 += 8;
      v14 -= 8;
      if (!v14)
      {
        v13 = (unint64_t)&v8[v10];
        break;
      }
    }
  }
  NearestCommonDominator = *(_QWORD *)(*(_QWORD *)v13 + 40);
  LODWORD(v13) = *(_DWORD *)(a4 + 20);
  v16 = NearestCommonDominator;
  if ((_DWORD)v13 != *(_DWORD *)(a4 + 24))
  {
    v17 = *(_QWORD *)(a4 + 8);
    if (v17 == *(_QWORD *)a4)
      v18 = v13;
    else
      v18 = *(unsigned int *)(a4 + 16);
    if ((_DWORD)v18)
    {
      v19 = 8 * v18;
      v20 = v17 + 8 * v18;
      while (*(_QWORD *)v17 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v17 += 8;
        v19 -= 8;
        if (!v19)
        {
          v17 = v20;
          break;
        }
      }
    }
    v16 = *(_QWORD *)(*(_QWORD *)v17 + 40);
  }
  if ((_DWORD)v10)
  {
    while (*v8 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v8;
      v12 -= 8;
      if (!v12)
        goto LABEL_31;
    }
  }
  if (v8 != v11)
  {
    if (NearestCommonDominator)
    {
      v21 = *v8;
LABEL_26:
      NearestCommonDominator = llvm::DominatorTreeBase<llvm::BasicBlock,true>::findNearestCommonDominator(*(_QWORD *)(a2 + 16), NearestCommonDominator, *(_QWORD *)(v21 + 40));
      v16 = llvm::DominatorTreeBase<llvm::BasicBlock,false>::findNearestCommonDominator(*(_QWORD *)(a2 + 8), v16, *(_QWORD *)(v21 + 40));
      v22 = v8 + 1;
      while (v22 != v11)
      {
        v23 = *v22++;
        v21 = v23;
        if (v23 <= 0xFFFFFFFFFFFFFFFDLL)
        {
          v8 = v22 - 1;
          if (NearestCommonDominator)
            goto LABEL_26;
          break;
        }
      }
    }
    LODWORD(v13) = *(_DWORD *)(a4 + 20);
  }
LABEL_31:
  v24 = *(_QWORD *)(a4 + 8);
  if (v24 == *(_QWORD *)a4)
    v13 = v13;
  else
    v13 = *(unsigned int *)(a4 + 16);
  if ((_DWORD)v13)
  {
    v25 = 8 * v13;
    v26 = *(unint64_t **)(a4 + 8);
    while (*v26 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v26;
      v25 -= 8;
      if (!v25)
        goto LABEL_48;
    }
  }
  else
  {
    v26 = *(unint64_t **)(a4 + 8);
  }
  v27 = (unint64_t *)(v24 + 8 * v13);
  if (v26 != v27)
  {
    if (!NearestCommonDominator)
    {
LABEL_49:
      v31 = *(_QWORD *)(a2 + 1416);
      v32 = (uint64_t *)(v31 + 72);
      v33 = *(uint64_t **)(v31 + 80);
      if (v33 == v32)
      {
LABEL_61:
        v35 = 0;
      }
      else
      {
        v34 = v33;
        while (1)
        {
          v35 = (uint64_t)(v34 - 3);
          if (v34)
            v36 = v34 - 3;
          else
            v36 = 0;
          v37 = v36[5];
          if (v37)
            v38 = v37 - 24;
          else
            v38 = 0;
          if (*(unsigned __int8 *)(v38 + 16) - 29 >= 0xB)
            v38 = 0;
          if (*(_BYTE *)(v38 + 16) == 29)
            break;
          v34 = (uint64_t *)v34[1];
          if (v34 == v32)
            goto LABEL_61;
        }
      }
      v39 = *v32;
      if (v39)
        v40 = v39 - 24;
      else
        v40 = 0;
      if (v35)
        NearestCommonDominator = v35;
      else
        NearestCommonDominator = v40;
      if (v33)
        v16 = (uint64_t)(v33 - 3);
      else
        v16 = 0;
      goto LABEL_71;
    }
    v28 = *v26;
LABEL_43:
    NearestCommonDominator = llvm::DominatorTreeBase<llvm::BasicBlock,true>::findNearestCommonDominator(*(_QWORD *)(a2 + 16), NearestCommonDominator, *(_QWORD *)(v28 + 40));
    v16 = llvm::DominatorTreeBase<llvm::BasicBlock,false>::findNearestCommonDominator(*(_QWORD *)(a2 + 8), v16, *(_QWORD *)(v28 + 40));
    v29 = v26 + 1;
    while (v29 != v27)
    {
      v30 = *v29++;
      v28 = v30;
      if (v30 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v26 = v29 - 1;
        if (NearestCommonDominator)
          goto LABEL_43;
        goto LABEL_49;
      }
    }
  }
LABEL_48:
  if (!NearestCommonDominator)
    goto LABEL_49;
LABEL_71:
  v41 = sub_1C477672C(a2 + 1248, v16);
  v42 = *(_QWORD *)(a2 + 1256);
  v43 = 1264;
  if (v42 == *(_QWORD *)(a2 + 1248))
    v43 = 1268;
  if (v41 != (_QWORD *)(v42 + 8 * *(unsigned int *)(a2 + v43)))
  {
    do
    {
      v44 = *(_QWORD *)(a2 + 8);
      v45 = *(_QWORD *)(v44 + 24);
      v46 = *(unsigned int *)(v44 + 40);
      if ((_DWORD)v46)
      {
        LODWORD(v47) = (v46 - 1) & ((v16 >> 4) ^ (v16 >> 9));
        v48 = (uint64_t *)(v45 + 16 * v47);
        v49 = *v48;
        if (v16 != *v48)
        {
          v50 = 1;
          do
          {
            if (v49 == -4096)
              goto LABEL_80;
            v51 = v47 + v50++;
            v47 = v51 & (v46 - 1);
            v49 = *(_QWORD *)(v45 + 16 * v47);
          }
          while (v16 != v49);
          v48 = (uint64_t *)(v45 + 16 * v47);
        }
      }
      else
      {
LABEL_80:
        v48 = (uint64_t *)(v45 + 16 * v46);
      }
      v16 = **(_QWORD **)(v48[1] + 8);
      v52 = sub_1C477672C(a2 + 1248, v16);
      v53 = *(_QWORD *)(a2 + 1256);
      if (v53 == *(_QWORD *)(a2 + 1248))
        v54 = 1268;
      else
        v54 = 1264;
    }
    while (v52 != (_QWORD *)(v53 + 8 * *(unsigned int *)(a2 + v54)));
  }
  do
  {
    v55 = NearestCommonDominator;
    v56 = sub_1C477672C(a2 + 1248, NearestCommonDominator);
    v57 = *(_QWORD *)(a2 + 1256);
    v58 = v57 == *(_QWORD *)(a2 + 1248) ? 1268 : 1264;
    if (v56 == (_QWORD *)(v57 + 8 * *(unsigned int *)(a2 + v58)))
      break;
    v59 = *(_QWORD *)(a2 + 16);
    v60 = *(_QWORD *)(v59 + 48);
    v61 = *(unsigned int *)(v59 + 64);
    if (!(_DWORD)v61)
      goto LABEL_95;
    LODWORD(v62) = (v61 - 1) & ((NearestCommonDominator >> 4) ^ (NearestCommonDominator >> 9));
    v63 = (uint64_t *)(v60 + 16 * v62);
    v64 = *v63;
    if (NearestCommonDominator != *v63)
    {
      v65 = 1;
      while (v64 != -4096)
      {
        v66 = v62 + v65++;
        v62 = v66 & (v61 - 1);
        v64 = *(_QWORD *)(v60 + 16 * v62);
        if (NearestCommonDominator == v64)
        {
          v63 = (uint64_t *)(v60 + 16 * v62);
          goto LABEL_96;
        }
      }
LABEL_95:
      v63 = (uint64_t *)(v60 + 16 * v61);
    }
LABEL_96:
    NearestCommonDominator = **(_QWORD **)(v63[1] + 8);
  }
  while (NearestCommonDominator);
  v67 = (_QWORD *)(v55 + 40);
  do
  {
    v67 = (_QWORD *)*v67;
    if (v67 == (_QWORD *)(v55 + 40))
    {
      v73 = 0;
      goto LABEL_110;
    }
    if (v67)
      v68 = (uint64_t)(v67 - 3);
    else
      v68 = 0;
    v69 = sub_1C477672C((uint64_t)a3, v68);
    v70 = a3[1];
    if (v70 == *a3)
      v71 = (unsigned int *)a3 + 5;
    else
      v71 = (unsigned int *)(a3 + 2);
  }
  while (v69 == (_QWORD *)(v70 + 8 * *v71));
  v72 = v67[1];
  if (v72)
    v73 = v72 - 24;
  else
    v73 = 0;
LABEL_110:
  v74 = (_QWORD *)(v16 + 40);
  for (i = *(_QWORD **)(v16 + 48); ; i = (_QWORD *)i[1])
  {
    if (i == v74)
      goto LABEL_122;
    v76 = i - 3;
    v77 = i ? (uint64_t)(i - 3) : 0;
    if (sub_1C56161EC(*(_QWORD *)(a2 + 312), *(_DWORD *)(a2 + 328), v77))
      break;
    v78 = sub_1C477672C((uint64_t)a3, v77);
    v79 = a3[1];
    v80 = v79 == *a3 ? (unsigned int *)((char *)a3 + 20) : (unsigned int *)(a3 + 2);
    if (v78 != (_QWORD *)(v79 + 8 * *v80))
      break;
  }
  if (i)
  {
LABEL_129:
    if (v73)
      goto LABEL_133;
    goto LABEL_130;
  }
LABEL_122:
  v81 = (_QWORD *)*v74;
  if ((_QWORD *)*v74 != v74)
  {
    if (v81)
      v82 = v81 - 3;
    else
      v82 = 0;
    if (*((unsigned __int8 *)v82 + 16) - 29 >= 0xB)
      v76 = 0;
    else
      v76 = v82;
    goto LABEL_129;
  }
  v76 = 0;
  if (v73)
    goto LABEL_133;
LABEL_130:
  v83 = *(_QWORD *)(v55 + 48);
  if (v83)
    v73 = v83 - 24;
  else
    v73 = 0;
LABEL_133:
  *a1 = v76;
  a1[1] = v16;
  a1[2] = v73;
  a1[3] = v55;
  a1[4] = a1 + 6;
  *(_QWORD *)&result = 0x800000000;
  a1[5] = 0x800000000;
  a1[14] = a1 + 16;
  a1[15] = 0x800000000;
  return result;
}

uint64_t sub_1C5615DDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  _QWORD v4[4];
  __int16 v5;

  v5 = 261;
  v4[0] = a2;
  v4[1] = a3;
  result = llvm::Module::getNamedMetadata(a1, (uint64_t)v4);
  if (result)
    return *(_QWORD *)(*(_QWORD *)(***(_QWORD ***)(result + 48)
                                 - 8 * *(unsigned int *)(***(_QWORD ***)(result + 48) + 8))
                     + 128);
  return result;
}

uint64_t sub_1C5615E28(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  int v3;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;

  if (*(_BYTE *)(a2 + 16) == 84)
  {
    v2 = *(_QWORD *)(a2 - 32);
    if (!v2)
    {
      v3 = 0;
      return v2 | v3;
    }
    if (!*(_BYTE *)(v2 + 16) && *(_QWORD *)(v2 + 24) == *(_QWORD *)(a2 + 72) && (*(_BYTE *)(v2 + 33) & 0x20) != 0)
    {
      v5 = a1[3];
      if (v5 && *(_DWORD *)(v5 + 36) == *(_DWORD *)(v2 + 36))
      {
        LODWORD(v2) = 3;
        v3 = 0x10000;
        return v2 | v3;
      }
      v6 = a1[4];
      if (v6 && *(_DWORD *)(v6 + 36) == *(_DWORD *)(v2 + 36))
      {
        LODWORD(v2) = 5;
        v3 = 0x20000;
        return v2 | v3;
      }
      v7 = a1[5];
      if (v7 && *(_DWORD *)(v7 + 36) == *(_DWORD *)(v2 + 36))
      {
        LODWORD(v2) = 1;
        v3 = 0x40000;
        return v2 | v3;
      }
      v8 = a1[6];
      if (v8 && *(_DWORD *)(v8 + 36) == *(_DWORD *)(v2 + 36))
      {
        LODWORD(v2) = 1;
        v3 = 0x80000;
        return v2 | v3;
      }
    }
  }
  v3 = 0;
  LODWORD(v2) = 0;
  return v2 | v3;
}

_QWORD *sub_1C5615F04(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C49F21C0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C56163E4(a1, a2, v7);
    *v5 = *a2;
    *((_WORD *)v5 + 4) = 0;
    *((_BYTE *)v5 + 10) = 0;
  }
  return v5 + 1;
}

uint64_t sub_1C5615F70(uint64_t a1)
{
  uint64_t result;
  unsigned int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  int v16;

  result = 0;
  v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 > 0x3B)
  {
    v4 = v3 - 60;
    if (v4 > 0x1C)
      return result;
    if (v4 == 24)
    {
      v5 = *(_QWORD *)(a1 - 32);
      if (v5)
      {
        if (!*(_BYTE *)(v5 + 16) && *(_QWORD *)(v5 + 24) == *(_QWORD *)(a1 + 72) && (*(_BYTE *)(v5 + 33) & 0x20) != 0)
        {
          result = 0;
          v8 = *(_DWORD *)(v5 + 36);
          if ((v8 - 167) < 2 || v8 == 1823)
            return result;
        }
      }
LABEL_8:
      v6 = *(_QWORD *)(a1 + 64);
      if (!v6 || (*(_BYTE *)(v6 + 17) & 0x30) == 0)
      {
        v7 = *(_DWORD *)(a1 + 20);
        if (v7 < 0)
        {
          v9 = a1 - 32 * (v7 & 0x7FFFFFF);
          v12 = *(_QWORD *)(v9 - 8);
          v10 = v9 - 8;
          v11 = v12;
          if (v12)
          {
            v13 = -v11;
            do
            {
              v14 = *(_DWORD *)(*(_QWORD *)(v10 + v13) + 8);
              v15 = v14 > 7;
              v16 = (1 << v14) & 0x83;
              if (v15 || v16 == 0)
                return 1;
              v13 += 16;
            }
            while (v13);
          }
        }
        if ((llvm::CallBase::hasFnAttrOnCalledFunction(a1, 45) & 1) == 0)
          return llvm::CallBase::hasFnAttrOnCalledFunction(a1, 44) ^ 1;
      }
      return 0;
    }
    if (((1 << v4) & 0x1010003A) == 0)
    {
      if (!v4)
        return (*(_WORD *)(a1 + 18) & 0x301) != 0;
      return result;
    }
    return 1;
  }
  if (v3 == 37)
    return 1;
  if (v3 == 33 || v3 == 39)
    goto LABEL_8;
  return result;
}

_QWORD *sub_1C56160D4(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C561659C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C5616630(a1, a2, v7);
    *v5 = *a2;
    *((_BYTE *)v5 + 8) = 0;
    v5[2] = 0;
    *((_WORD *)v5 + 12) = 0;
    *((_BYTE *)v5 + 26) = 0;
    v5[4] = v5 + 6;
    v5[5] = 0x200000000;
  }
  return v5 + 1;
}

uint64_t sub_1C561615C(uint64_t a1)
{
  if ((sub_1C5E9DACC(a1, 17) & 1) != 0)
    return 4;
  if ((sub_1C5E9DACC(a1, 10) & 1) != 0)
    return 3;
  if ((sub_1C5E9DACC(a1, 11) & 1) != 0)
    return 1;
  if ((sub_1C5E9DACC(a1, 12) & 1) != 0)
    return 2;
  if (sub_1C5E9DACC(a1, 16))
    return 5;
  return 0;
}

uint64_t sub_1C56161EC(uint64_t a1, int a2, uint64_t a3)
{
  int v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;

  if (!a2)
    return 0;
  v3 = a2 - 1;
  v4 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
  v5 = *(_QWORD *)(a1 + 16 * v4);
  if (v5 != a3)
  {
    v7 = 1;
    while (v5 != -4096)
    {
      v8 = v4 + v7++;
      v4 = v8 & v3;
      v5 = *(_QWORD *)(a1 + 16 * (v8 & v3));
      v6 = 1;
      if (v5 == a3)
        return v6;
    }
    return 0;
  }
  return 1;
}

uint64_t sub_1C5616254(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  std::string *v7;
  uint64_t v8;
  uint64_t result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  const char *v18;
  __int16 v19;

  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 56);
  v3 = (*(unsigned __int16 *)(v2 + 18) >> 4) & 0x3FF;
  if (v3 != 106 && v3 != 102)
    return 0;
  v4 = *(_QWORD *)(v2 + 40);
  v18 = "agx.vertex_amp_mode";
  v19 = 259;
  if (llvm::Module::getNamedMetadata(v4, (uint64_t)&v18))
  {
    if (*(_BYTE *)(a1 + 16) != 84)
      return 0;
  }
  else
  {
    result = sub_1C5EA9FF0(*(_QWORD *)(v2 + 40), 2710, 0, 0, v5, v6, v7, v8);
    if (!result)
      return result;
    v10 = result;
    result = 0;
    if (!*(_QWORD *)(v10 + 8) || *(_BYTE *)(a1 + 16) != 84)
      return result;
  }
  v11 = *(_QWORD *)(a1 - 32);
  if (!v11
    || *(_BYTE *)(v11 + 16)
    || *(_QWORD *)(v11 + 24) != *(_QWORD *)(a1 + 72)
    || (*(_BYTE *)(v11 + 33) & 0x20) == 0
    || *(_DWORD *)(v11 + 36) != 2668)
  {
    return 0;
  }
  v12 = *(_QWORD *)(a1 + 32);
  v13 = v12 - 24;
  if (!v12)
    v13 = 0;
  if (*(_BYTE *)(v13 + 16) != 84)
    return 0;
  v14 = *(_QWORD *)(v13 - 32);
  if (!v14
    || *(_BYTE *)(v14 + 16)
    || *(_QWORD *)(v14 + 24) != *(_QWORD *)(v13 + 72)
    || (*(_BYTE *)(v14 + 33) & 0x20) == 0
    || *(_DWORD *)(*(_QWORD *)(v12 - 56) + 36) != 2750)
  {
    return 0;
  }
  result = 0;
  v15 = *(_QWORD *)(v12 + 8);
  if (v15 && *(_BYTE *)(v15 - 8) == 84)
  {
    v16 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 40);
    if (v16)
      v17 = v16 - 24;
    else
      v17 = 0;
    if (*(unsigned __int8 *)(v17 + 16) - 29 >= 0xB)
      v17 = 0;
    return *(unsigned __int8 *)(v17 + 16) == 29;
  }
  return result;
}

_QWORD *sub_1C56163E4(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _DWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t *v24;

  v23 = a3;
  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(unsigned int *)(a1 + 16);
  if (4 * v5 + 4 >= (3 * v6))
  {
    v7 = 2 * v6;
  }
  else
  {
    v7 = *(_DWORD *)(a1 + 16);
    if ((int)v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
      goto LABEL_3;
  }
  v9 = *(_QWORD *)a1;
  v10 = (v7 - 1) | ((unint64_t)(v7 - 1) >> 1);
  v11 = v10 | (v10 >> 2) | ((v10 | (v10 >> 2)) >> 4);
  v12 = ((v11 | (v11 >> 8)) >> 16) | v11 | (v11 >> 8);
  if ((v12 + 1) > 0x40)
    v13 = v12 + 1;
  else
    v13 = 64;
  *(_DWORD *)(a1 + 16) = v13;
  v14 = operator new(16 * v13, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = v14;
  if (v9)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v15 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v15)
    {
      v16 = 16 * v15;
      do
      {
        *v14 = -4096;
        v14 += 2;
        v16 -= 16;
      }
      while (v16);
    }
    if ((_DWORD)v6)
    {
      v17 = (_DWORD *)(v9 + 8);
      v18 = 16 * v6;
      do
      {
        v19 = *((_QWORD *)v17 - 1);
        if ((v19 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v24 = 0;
          sub_1C49F21C0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v19, &v24);
          v20 = v24;
          *v24 = v19;
          *((_DWORD *)v20 + 2) = *v17;
          ++*(_DWORD *)(a1 + 8);
        }
        v17 += 4;
        v18 -= 16;
      }
      while (v18);
    }
    MEMORY[0x1CAA32FB4](v9, 8);
    v14 = *(_QWORD **)a1;
    LODWORD(v21) = *(_DWORD *)(a1 + 16);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v21 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v21)
    {
      v22 = 0;
      do
      {
        v14[v22] = -4096;
        v22 += 2;
      }
      while (2 * v21 != v22);
    }
  }
  sub_1C49F21C0((uint64_t)v14, v21, *a2, &v23);
  v5 = *(_DWORD *)(a1 + 8);
  a3 = v23;
LABEL_3:
  *(_DWORD *)(a1 + 8) = v5 + 1;
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_1C561659C(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v9;
  int v10;
  BOOL v11;
  int v12;

  if (a2)
  {
    v4 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v5 = (_QWORD *)(a1 + (v4 << 6));
    v6 = *v5;
    if (*v5 == a3)
    {
      v7 = 1;
    }
    else
    {
      v9 = 0;
      v10 = 1;
      while (v6 != -4096)
      {
        if (v9)
          v11 = 0;
        else
          v11 = v6 == -8192;
        if (v11)
          v9 = v5;
        v12 = v4 + v10++;
        v4 = v12 & (a2 - 1);
        v5 = (_QWORD *)(a1 + (v4 << 6));
        v6 = *v5;
        v7 = 1;
        if (*v5 == a3)
          goto LABEL_5;
      }
      v7 = 0;
      if (v9)
        v5 = v9;
    }
  }
  else
  {
    v5 = 0;
    v7 = 0;
  }
LABEL_5:
  *a4 = v5;
  return v7;
}

_QWORD *sub_1C5616630(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  __int128 v21;
  void *v22;
  unsigned int v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  _QWORD *v29;
  uint64_t *v30;

  v29 = a3;
  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(unsigned int *)(a1 + 16);
  if (4 * v5 + 4 >= (3 * v6))
  {
    v7 = 2 * v6;
  }
  else
  {
    v7 = *(_DWORD *)(a1 + 16);
    if ((int)v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
      goto LABEL_3;
  }
  v9 = *(_QWORD *)a1;
  v10 = (v7 - 1) | ((unint64_t)(v7 - 1) >> 1);
  v11 = v10 | (v10 >> 2) | ((v10 | (v10 >> 2)) >> 4);
  v12 = ((v11 | (v11 >> 8)) >> 16) | v11 | (v11 >> 8);
  if ((v12 + 1) > 0x40)
    v13 = v12 + 1;
  else
    v13 = 64;
  *(_DWORD *)(a1 + 16) = v13;
  v14 = operator new((unint64_t)v13 << 6, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = v14;
  if (v9)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v15 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v15)
    {
      v16 = v15 << 6;
      do
      {
        *v14 = -4096;
        v14 += 8;
        v16 -= 64;
      }
      while (v16);
    }
    if ((_DWORD)v6)
    {
      v17 = (_QWORD *)(v9 + 48);
      v18 = v6 << 6;
      while (1)
      {
        v19 = *(v17 - 6);
        if ((v19 | 0x1000) != 0xFFFFFFFFFFFFF000)
          break;
LABEL_27:
        v17 += 8;
        v18 -= 64;
        if (!v18)
          goto LABEL_32;
      }
      v30 = 0;
      sub_1C561659C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v19, &v30);
      v20 = v30;
      *v30 = v19;
      v21 = *(_OWORD *)(v17 - 5);
      *(_DWORD *)((char *)v20 + 23) = *(_DWORD *)((char *)v17 - 25);
      *(_OWORD *)(v20 + 1) = v21;
      v22 = v20 + 6;
      v20[4] = (uint64_t)(v20 + 6);
      v20[5] = 0x200000000;
      v23 = *((_DWORD *)v17 - 2);
      if (!v23 || v17 - 6 == v20)
      {
LABEL_25:
        ++*(_DWORD *)(a1 + 8);
        v26 = (_QWORD *)*(v17 - 2);
        if (v17 != v26)
          free(v26);
        goto LABEL_27;
      }
      v24 = (_QWORD *)*(v17 - 2);
      if (v17 != v24)
      {
        v20[4] = (uint64_t)v24;
        *((_DWORD *)v20 + 10) = v23;
        *((_DWORD *)v20 + 11) = *((_DWORD *)v17 - 1);
        *(v17 - 2) = v17;
        *((_DWORD *)v17 - 1) = 0;
        goto LABEL_24;
      }
      if (v23 >= 3)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v20 + 4), (uint64_t)(v20 + 6), *((unsigned int *)v17 - 2), 8);
        v25 = *((unsigned int *)v17 - 2);
        if (!(_DWORD)v25)
          goto LABEL_23;
        v24 = (_QWORD *)*(v17 - 2);
        v22 = (void *)v20[4];
      }
      else
      {
        v25 = *((unsigned int *)v17 - 2);
      }
      memcpy(v22, v24, 8 * v25);
LABEL_23:
      *((_DWORD *)v20 + 10) = v23;
LABEL_24:
      *((_DWORD *)v17 - 2) = 0;
      goto LABEL_25;
    }
LABEL_32:
    MEMORY[0x1CAA32FB4](v9, 8);
    v14 = *(_QWORD **)a1;
    LODWORD(v27) = *(_DWORD *)(a1 + 16);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v27 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v27)
    {
      v28 = 0;
      do
      {
        v14[v28 / 8] = -4096;
        v28 += 64;
      }
      while (v27 << 6 != v28);
    }
  }
  sub_1C561659C((uint64_t)v14, v27, *a2, &v29);
  v5 = *(_DWORD *)(a1 + 8);
  a3 = v29;
LABEL_3:
  *(_DWORD *)(a1 + 8) = v5 + 1;
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_1C56168B0(_QWORD *a1)
{
  uint64_t v1;
  uint64_t v2;

  if (*a1)
    v1 = *a1 - 24;
  else
    v1 = 0;
  if (*(_BYTE *)(v1 + 16) == 84
    && (v2 = *(_QWORD *)(v1 - 32)) != 0
    && !*(_BYTE *)(v2 + 16)
    && *(_QWORD *)(v2 + 24) == *(_QWORD *)(v1 + 72))
  {
    return (*(unsigned __int8 *)(v2 + 33) >> 5) & 1;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1C5616900(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  __int128 v9;
  _QWORD v11[3];

  *(_QWORD *)a1 = a1 + 32;
  *(_QWORD *)(a1 + 8) = a1 + 32;
  *(_QWORD *)(a1 + 16) = 8;
  *(_DWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 96) = a1 + 112;
  v4 = a1 + 96;
  *(_QWORD *)(a1 + 104) = 0x800000000;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)a1, a2);
  v5 = *(_QWORD *)(a2 + 40);
  if (v5 == a2 + 40)
  {
    v6 = 0;
  }
  else
  {
    if (v5)
      v6 = v5 - 24;
    else
      v6 = 0;
    if (*(unsigned __int8 *)(v6 + 16) - 29 >= 0xB)
      v6 = 0;
  }
  v11[0] = a2;
  v11[1] = v6;
  v11[2] = 0;
  v7 = sub_1C4926708(v4, (unint64_t)v11, 1);
  v8 = *(_QWORD *)(a1 + 96) + 24 * *(unsigned int *)(a1 + 104);
  v9 = *(_OWORD *)v7;
  *(_QWORD *)(v8 + 16) = *(_QWORD *)(v7 + 16);
  *(_OWORD *)v8 = v9;
  ++*(_DWORD *)(a1 + 104);
  sub_1C56169E8((__int128 *)a1);
  return a1;
}

__int128 *sub_1C56169E8(__int128 *this)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  int v13;
  char v14;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  __int128 v19;
  _QWORD v20[3];

  v2 = (uint64_t)this;
  v3 = (uint64_t)(this + 6);
  while (1)
  {
    v4 = *(_QWORD *)(v2 + 96) + 24 * *(unsigned int *)(v2 + 104);
    v5 = *(_QWORD *)(v4 - 24);
    v6 = *(_QWORD *)(v5 + 40);
    if (v6 == v5 + 40)
    {
LABEL_23:
      LODWORD(v10) = 0;
    }
    else
    {
      v7 = v6 - 24;
      if (!v6)
        v7 = 0;
      v8 = *(unsigned __int8 *)(v7 + 16);
      v9 = v8 - 29;
      if (v8 == 30)
      {
        LODWORD(v10) = (*(_DWORD *)(v7 + 20) & 0x7FFFFFF) == 3 ? 2 : 1;
      }
      else
      {
        v10 = 0;
        switch(v9)
        {
          case 0:
          case 5:
          case 6:
            break;
          case 1:
            __break(1u);
            goto LABEL_25;
          case 2:
            LODWORD(v10) = (*(_DWORD *)(v7 + 20) >> 1) & 0x3FFFFFF;
            break;
          case 3:
          case 9:
            LODWORD(v10) = (*(_DWORD *)(v7 + 20) & 0x7FFFFFF) - 1;
            break;
          case 4:
            LODWORD(v10) = 2;
            break;
          case 7:
            LODWORD(v10) = *(_WORD *)(v7 + 18) & 1;
            break;
          case 8:
            LODWORD(v10) = 1;
            break;
          case 10:
            LODWORD(v10) = *(_DWORD *)(v7 + 80) + 1;
            break;
          default:
            goto LABEL_23;
        }
      }
    }
    if (*(_DWORD *)(v4 - 8) == (_DWORD)v10)
      return this;
    v11 = *(_QWORD *)(v4 - 16);
    v12 = *(_QWORD *)(v4 - 8);
    *(_DWORD *)(v4 - 8) = v12 + 1;
    v13 = *(unsigned __int8 *)(v11 + 16);
    if (v13 != 30)
      __asm { BR              X12 }
    v1 = *(_QWORD *)(v11 - 32 * v12 - 32);
    this = (__int128 *)sub_1C4774094((llvm::SmallPtrSetImplBase *)v2, v1);
    if (v14)
    {
      v4 = v1 + 40;
      v10 = *(_QWORD *)(v1 + 40);
      if (v10 == v1 + 40 || v10 == 0)
      {
LABEL_25:
        if (v10 == v4)
        {
          v16 = 0;
          goto LABEL_19;
        }
        v16 = v10 - 24;
        if (!v10)
          v16 = 0;
        v17 = (unsigned __int8 *)(v16 + 16);
      }
      else
      {
        v16 = v10 - 24;
        v17 = (unsigned __int8 *)(v10 - 8);
      }
      if (*v17 - 29 >= 0xB)
        v16 = 0;
LABEL_19:
      v20[0] = v1;
      v20[1] = v16;
      v20[2] = 0;
      this = (__int128 *)sub_1C4926708(v3, (unint64_t)v20, 1);
      v18 = *(_QWORD *)(v2 + 96) + 24 * *(unsigned int *)(v2 + 104);
      v19 = *this;
      *(_QWORD *)(v18 + 16) = *((_QWORD *)this + 2);
      *(_OWORD *)v18 = v19;
      ++*(_DWORD *)(v2 + 104);
    }
  }
}

uint64_t sub_1C5616C94(uint64_t a1)
{
  if ((sub_1C5E9DACC(a1, 11) & 1) != 0 || (sub_1C5E9DACC(a1, 10) & 1) != 0)
    return 1;
  else
    return sub_1C5E9DACC(a1, 12);
}

uint64_t sub_1C5616CE4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  uint64_t result;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 32;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_13;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
LABEL_12:
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -4096)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v8 == -8192;
      if (v11)
        v9 = v7;
      v12 = v6 + v10++;
      v6 = v12 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v12 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_12;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_13:
  *a3 = v7;
  return result;
}

uint64_t sub_1C5616D88(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  uint64_t result;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 32;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_16;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
LABEL_13:
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -4096)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v8 == -8192;
      if (v11)
        v9 = v7;
      v12 = v6 + v10++;
      v6 = v12 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v12 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_13;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_16:
  *a3 = v7;
  return result;
}

uint64_t sub_1C5616E2C(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _BYTE v14[512];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a2 >= 0x21)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 0x20)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C5616FB0(a1, v6, v6 + 16 * v7);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_QWORD *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *(_QWORD *)v9 = v10;
      *((_DWORD *)v9 + 2) = *(_DWORD *)(a1 + v8 + 16);
      v9 += 16;
    }
    v8 += 16;
  }
  while (v8 != 512);
  if (a2 > 0x20)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C5616FB0(a1, (uint64_t)v14, (uint64_t)v9);
}

uint64_t sub_1C5616FB0(uint64_t result, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 520);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_9;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[2 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    v10 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v12 = 0;
      result = sub_1C5616D88((uint64_t)v5, v10, &v12);
      v11 = v12;
      *v12 = *(_QWORD *)a2;
      *((_DWORD *)v11 + 2) = *(_DWORD *)(a2 + 8);
      *v5 += 2;
    }
    a2 += 16;
  }
  return result;
}

uint64_t sub_1C5617070(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  _BOOL4 v10;
  uint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  void *v25;
  char *v26;
  char *v27;
  int v28;
  unint64_t v29;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(char **)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v7 = v4 + 1;
    v8 = (unint64_t)&v5[448 * v4];
    v10 = (unint64_t)v5 <= a2 && v8 > a2;
    if (v10)
      v11 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(a2 - (_QWORD)v5) >> 6);
    else
      v11 = -1;
    v29 = 0;
    v12 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, v7, 448, &v29);
    v5 = v12;
    v13 = *(char **)a1;
    v14 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v14)
    {
      v15 = 448 * v14;
      do
      {
        v16 = sub_1C5617934((uint64_t)v12, (uint64_t)v13);
        v13 += 448;
        v12 = (char *)(v16 + 448);
        v15 -= 448;
      }
      while (v15);
      v13 = *(char **)a1;
      v17 = *(unsigned int *)(a1 + 8);
      if ((_DWORD)v17)
      {
        v18 = 0;
        v19 = 448 * v17;
        do
        {
          v20 = &v13[v19];
          v21 = *(char **)&v13[v19 - 88];
          if (&v13[v19 - 72] != v21)
            free(v21);
          v22 = (char *)*((_QWORD *)v20 - 21);
          if (v20 - 152 != v22)
            free(v22);
          v23 = &v13[v19];
          sub_1C4914448((void ***)&v13[v19 - 216]);
          v24 = *(char **)&v13[v19 - 320];
          if (&v13[v19 - 304] != v24)
            free(v24);
          v25 = (void *)*((_QWORD *)v23 - 47);
          if (v25 != *((void **)v23 - 48))
            free(v25);
          v26 = *(char **)&v13[v19 - 416];
          if (&v13[v19 - 400] != v26)
            free(v26);
          v27 = (char *)*((_QWORD *)v20 - 56);
          if (&v13[v19 - 432] != v27)
            free(v27);
          v13 -= 448;
          v18 += 448;
        }
        while (v19 != v18);
        v13 = *(char **)a1;
      }
    }
    v28 = v29;
    if (v13 != (char *)(a1 + 16))
      free(v13);
    *(_QWORD *)a1 = v5;
    *(_DWORD *)(a1 + 12) = v28;
    if (v10)
      a2 = (unint64_t)&v5[448 * v11];
    LODWORD(v4) = *(_DWORD *)(a1 + 8);
  }
  result = sub_1C5617934((uint64_t)&v5[448 * v4], a2);
  ++*(_DWORD *)(a1 + 8);
  return result;
}

uint64_t sub_1C5617270(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;
  uint64_t result;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 48 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
LABEL_11:
      result = 1;
    }
    else
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v10 = 0;
        else
          v10 = v7 == -8192;
        if (v10)
          v8 = v6;
        v11 = v5 + v9++;
        v5 = v11 & v4;
        v6 = (_QWORD *)(a1 + 48 * (v11 & v4));
        v7 = *v6;
        if (*v6 == a3)
          goto LABEL_11;
      }
      result = 0;
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
    result = 0;
  }
  *a4 = v6;
  return result;
}

_QWORD *sub_1C56172FC(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  void *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(48 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 48 * v10;
      do
      {
        *result = -4096;
        result += 6;
        v11 -= 48;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 48 * v3;
      v13 = v4 + 16;
      do
      {
        v14 = *(_QWORD *)(v13 - 16);
        if ((v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v22 = 0;
          sub_1C5617270(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, &v22);
          v15 = v22;
          v16 = v22 + 5;
          *v22 = *(_QWORD *)(v13 - 16);
          v15[1] = v16;
          v17 = *(void **)(v13 - 8);
          v18 = *(void **)v13;
          if (*(void **)v13 == v17)
          {
            v15[2] = v16;
            v19 = *(unsigned int *)(v13 + 12);
            v17 = *(void **)v13;
            if ((_DWORD)v19)
            {
              memmove(v16, v17, 8 * v19);
              v18 = *(void **)(v13 - 8);
              v17 = *(void **)v13;
            }
          }
          else
          {
            v15[2] = v18;
            *(_QWORD *)v13 = v17;
            v18 = v17;
          }
          v15[3] = *(_QWORD *)(v13 + 8);
          *((_DWORD *)v15 + 8) = *(_DWORD *)(v13 + 16);
          *(_QWORD *)(v13 + 8) = 1;
          *(_DWORD *)(v13 + 16) = 0;
          ++*(_DWORD *)(a1 + 8);
          if (v17 != v18)
            free(v17);
        }
        v13 += 48;
        v12 -= 48;
      }
      while (v12);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v20 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v20)
  {
    v21 = 48 * v20;
    do
    {
      *result = -4096;
      result += 6;
      v21 -= 48;
    }
    while (v21);
  }
  return result;
}

_QWORD **sub_1C56174C0(_QWORD **result, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t *a5)
{
  _QWORD *v5;
  uint64_t v6;
  _QWORD **v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int *v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  unsigned int v30;
  unsigned int v31;
  uint64_t *v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t *v44;
  uint64_t *v45;
  uint64_t v46;
  unsigned int *v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int *v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  llvm::SmallPtrSetImplBase *v60;
  uint64_t *v61;

  v5 = *result;
  v6 = *((unsigned int *)*result + 126);
  if ((_DWORD)v6)
  {
    v9 = result;
    v10 = (uint64_t *)v5[62];
    v61 = &v10[v6];
    v56 = a2 + 32;
    v57 = a2 + 16;
    v60 = (llvm::SmallPtrSetImplBase *)(a2 + 64);
    v54 = a2 + 128;
    v55 = a2 + 48;
    v53 = a2 + 144;
    do
    {
      v11 = *v10;
      result = (_QWORD **)sub_1C477672C(a4, *v10);
      v12 = *(_QWORD *)(a4 + 8);
      if (v12 == *(_QWORD *)a4)
        v13 = (unsigned int *)(a4 + 20);
      else
        v13 = (unsigned int *)(a4 + 16);
      if (result != (_QWORD **)(v12 + 8 * *v13))
      {
        v14 = *(unsigned int *)(a2 + 8);
        if (v14 >= *(unsigned int *)(a2 + 12))
        {
          result = (_QWORD **)llvm::SmallVectorBase<unsigned int>::grow_pod(a2, v57, v14 + 1, 8);
          v14 = *(unsigned int *)(a2 + 8);
        }
        *(_QWORD *)(*(_QWORD *)a2 + 8 * v14) = v11;
        ++*(_DWORD *)(a2 + 8);
        goto LABEL_82;
      }
      result = (_QWORD **)sub_1C477672C((uint64_t)a3, v11);
      v15 = a3[1];
      if (v15 == *a3)
        v16 = (unsigned int *)a3 + 5;
      else
        v16 = (unsigned int *)(a3 + 2);
      if (result != (_QWORD **)(v15 + 8 * *v16))
      {
        v17 = *(unsigned int *)(a2 + 40);
        if (v17 >= *(unsigned int *)(a2 + 44))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(v56, v55, v17 + 1, 8);
          v17 = *(unsigned int *)(a2 + 40);
        }
        *(_QWORD *)(*(_QWORD *)(a2 + 32) + 8 * v17) = v11;
        ++*(_DWORD *)(a2 + 40);
        v18 = *(_DWORD *)(v11 + 20);
        if ((v18 & 0x40000000) != 0)
        {
          v20 = *(uint64_t **)(v11 - 8);
          v19 = v18 & 0x7FFFFFF;
          if (!v19)
          {
LABEL_35:
            result = (_QWORD **)sub_1C4774094(v60, v11);
            goto LABEL_82;
          }
        }
        else
        {
          v19 = v18 & 0x7FFFFFF;
          v20 = (uint64_t *)(v11 - 32 * v19);
          if (!v19)
            goto LABEL_35;
        }
        v21 = 32 * v19;
        while (1)
        {
          v22 = *v20;
          if ((sub_1C5615E28(*v9, *v20) & 0xFFFD) == 0 && v22 && *(unsigned __int8 *)(v22 + 16) >= 0x1Cu)
          {
            v24 = sub_1C477672C((uint64_t)(v5 + 84), v22);
            v25 = v5[85];
            v26 = 688;
            if (v25 == v5[84])
              v26 = 692;
            if (v24 != (_QWORD *)(v25 + 8 * *(unsigned int *)((char *)v5 + v26)))
            {
              result = (_QWORD **)sub_1C477672C((uint64_t)v60, v22);
              v27 = *(_QWORD *)(a2 + 72);
              v28 = (unsigned int *)(v27 == *(_QWORD *)(a2 + 64) ? a2 + 84 : a2 + 80);
              if (result == (_QWORD **)(v27 + 8 * *v28))
                break;
            }
          }
          v20 += 4;
          v21 -= 32;
          if (!v21)
            goto LABEL_35;
        }
      }
      v29 = *a5;
      v30 = *((_DWORD *)a5 + 4);
      if (v30)
      {
        v31 = (v30 - 1) & ((v11 >> 4) ^ (v11 >> 9));
        v32 = (uint64_t *)(v29 + 48 * v31);
        v33 = *v32;
        if (*v32 == v11)
          goto LABEL_41;
        v34 = 1;
        while (v33 != -4096)
        {
          v35 = v31 + v34++;
          v31 = v35 & (v30 - 1);
          v32 = (uint64_t *)(v29 + 48 * v31);
          v33 = *v32;
          if (*v32 == v11)
            goto LABEL_41;
        }
      }
      v32 = (uint64_t *)(v29 + 48 * v30);
LABEL_41:
      if ((uint64_t *)(v29 + 48 * v30) != v32)
      {
        LODWORD(v36) = *((_DWORD *)v32 + 7);
        v37 = *(_DWORD *)(a4 + 20);
        if ((int)v36 - *((_DWORD *)v32 + 8) <= v37 - *(_DWORD *)(a4 + 24))
        {
          v42 = v32[2];
          if (v42 == v32[1])
            v36 = v36;
          else
            v36 = *((unsigned int *)v32 + 6);
          if ((_DWORD)v36)
          {
            v43 = 8 * v36;
            v44 = (uint64_t *)v32[2];
            while ((unint64_t)*v44 >= 0xFFFFFFFFFFFFFFFELL)
            {
              ++v44;
              v43 -= 8;
              if (!v43)
                goto LABEL_82;
            }
          }
          else
          {
            v44 = (uint64_t *)v32[2];
          }
          v48 = (uint64_t *)(v42 + 8 * v36);
          if (v44 == v48)
            goto LABEL_82;
          v49 = *v44;
LABEL_72:
          result = (_QWORD **)sub_1C477672C(a4, v49);
          v50 = *(_QWORD *)(a4 + 8);
          if (v50 == *(_QWORD *)a4)
            v51 = (unsigned int *)(a4 + 20);
          else
            v51 = (unsigned int *)(a4 + 16);
          if (result == (_QWORD **)(v50 + 8 * *v51))
          {
            while (1)
            {
              if (++v44 == v48)
                goto LABEL_82;
              v49 = *v44;
              if ((unint64_t)*v44 < 0xFFFFFFFFFFFFFFFELL)
                goto LABEL_72;
            }
          }
        }
        else
        {
          v38 = *(_QWORD *)(a4 + 8);
          if (v38 == *(_QWORD *)a4)
            v39 = v37;
          else
            v39 = *(unsigned int *)(a4 + 16);
          if ((_DWORD)v39)
          {
            v40 = 8 * v39;
            v41 = *(uint64_t **)(a4 + 8);
            while ((unint64_t)*v41 >= 0xFFFFFFFFFFFFFFFELL)
            {
              ++v41;
              v40 -= 8;
              if (!v40)
                goto LABEL_82;
            }
          }
          else
          {
            v41 = *(uint64_t **)(a4 + 8);
          }
          v45 = (uint64_t *)(v38 + 8 * v39);
          if (v41 == v45)
            goto LABEL_82;
          result = (_QWORD **)sub_1C477672C((uint64_t)(v32 + 1), *v41);
          v46 = v32[2];
          v47 = (unsigned int *)(v32 + 3);
          if (v46 == v32[1])
            v47 = (unsigned int *)v32 + 7;
LABEL_63:
          if (result == (_QWORD **)(v46 + 8 * *v47))
          {
            while (1)
            {
              if (++v41 == v45)
                goto LABEL_82;
              if ((unint64_t)*v41 < 0xFFFFFFFFFFFFFFFELL)
              {
                result = (_QWORD **)sub_1C477672C((uint64_t)(v32 + 1), *v41);
                v46 = v32[2];
                if (v46 == v32[1])
                  v47 = (unsigned int *)v32 + 7;
                else
                  v47 = (unsigned int *)(v32 + 3);
                goto LABEL_63;
              }
            }
          }
        }
        v52 = *(unsigned int *)(a2 + 136);
        if (v52 >= *(unsigned int *)(a2 + 140))
        {
          result = (_QWORD **)llvm::SmallVectorBase<unsigned int>::grow_pod(v54, v53, v52 + 1, 8);
          v52 = *(unsigned int *)(a2 + 136);
        }
        *(_QWORD *)(*(_QWORD *)(a2 + 128) + 8 * v52) = v11;
        ++*(_DWORD *)(a2 + 136);
      }
LABEL_82:
      ++v10;
    }
    while (v10 != v61);
  }
  return result;
}

uint64_t sub_1C5617934(uint64_t a1, uint64_t a2)
{
  void *v4;
  unsigned int v5;
  const void *v6;
  unsigned int v7;
  void *v8;
  unsigned int v9;
  const void *v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  void *v16;
  unsigned int v17;
  const void *v18;
  uint64_t v19;
  __int128 v20;
  void *v21;
  unsigned int v22;
  const void *v23;
  uint64_t v24;
  void *v25;
  unsigned int v26;
  const void *v27;
  uint64_t v28;
  int v30;
  int v31;
  int v32;

  v4 = (void *)(a1 + 16);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x200000000;
  if (a1 != a2)
  {
    v5 = *(_DWORD *)(a2 + 8);
    if (v5)
    {
      v6 = *(const void **)a2;
      if (*(_QWORD *)a2 != a2 + 16)
      {
        *(_QWORD *)a1 = v6;
        v32 = *(_DWORD *)(a2 + 12);
        *(_DWORD *)(a1 + 8) = v5;
        *(_DWORD *)(a1 + 12) = v32;
        *(_QWORD *)a2 = a2 + 16;
        *(_DWORD *)(a2 + 12) = 0;
        goto LABEL_8;
      }
      if (v5 >= 3)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, *(unsigned int *)(a2 + 8), 8);
        v7 = *(_DWORD *)(a2 + 8);
        if (!v7)
          goto LABEL_7;
        v6 = *(const void **)a2;
        v4 = *(void **)a1;
      }
      else
      {
        v7 = *(_DWORD *)(a2 + 8);
      }
      memcpy(v4, v6, 8 * v7);
LABEL_7:
      *(_DWORD *)(a1 + 8) = v5;
LABEL_8:
      *(_DWORD *)(a2 + 8) = 0;
    }
  }
  v8 = (void *)(a1 + 48);
  *(_QWORD *)(a1 + 32) = a1 + 48;
  *(_QWORD *)(a1 + 40) = 0x200000000;
  v9 = *(_DWORD *)(a2 + 40);
  if (v9 && a1 != a2)
  {
    v10 = *(const void **)(a2 + 32);
    if (v10 != (const void *)(a2 + 48))
    {
      *(_QWORD *)(a1 + 32) = v10;
      v30 = *(_DWORD *)(a2 + 44);
      *(_DWORD *)(a1 + 40) = v9;
      *(_DWORD *)(a1 + 44) = v30;
      *(_QWORD *)(a2 + 32) = a2 + 48;
      *(_DWORD *)(a2 + 44) = 0;
      goto LABEL_16;
    }
    if (v9 >= 3)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 32, a1 + 48, *(unsigned int *)(a2 + 40), 8);
      v11 = *(unsigned int *)(a2 + 40);
      if (!(_DWORD)v11)
        goto LABEL_15;
      v10 = *(const void **)(a2 + 32);
      v8 = *(void **)(a1 + 32);
    }
    else
    {
      v11 = *(unsigned int *)(a2 + 40);
    }
    memcpy(v8, v10, 8 * v11);
LABEL_15:
    *(_DWORD *)(a1 + 40) = v9;
LABEL_16:
    *(_DWORD *)(a2 + 40) = 0;
  }
  v12 = (void *)(a1 + 96);
  *(_QWORD *)(a1 + 64) = a1 + 96;
  v14 = *(_QWORD *)(a2 + 64);
  v13 = *(_QWORD *)(a2 + 72);
  if (v13 == v14)
  {
    *(_QWORD *)(a1 + 72) = v12;
    v15 = *(unsigned int *)(a2 + 84);
    if ((_DWORD)v15)
      memmove(v12, *(const void **)(a2 + 72), 8 * v15);
  }
  else
  {
    *(_QWORD *)(a1 + 72) = v13;
    *(_QWORD *)(a2 + 72) = v14;
  }
  v16 = (void *)(a1 + 144);
  *(_QWORD *)(a1 + 128) = a1 + 144;
  *(_QWORD *)(a1 + 80) = *(_QWORD *)(a2 + 80);
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  *(_QWORD *)(a2 + 80) = 4;
  *(_DWORD *)(a2 + 88) = 0;
  *(_QWORD *)(a1 + 136) = 0xA00000000;
  v17 = *(_DWORD *)(a2 + 136);
  if (v17 && a1 != a2)
  {
    v18 = *(const void **)(a2 + 128);
    if (v18 != (const void *)(a2 + 144))
    {
      *(_QWORD *)(a1 + 128) = v18;
      v31 = *(_DWORD *)(a2 + 140);
      *(_DWORD *)(a1 + 136) = v17;
      *(_DWORD *)(a1 + 140) = v31;
      *(_QWORD *)(a2 + 128) = a2 + 144;
      *(_DWORD *)(a2 + 140) = 0;
      goto LABEL_27;
    }
    if (v17 >= 0xB)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 128, a1 + 144, *(unsigned int *)(a2 + 136), 8);
      v19 = *(unsigned int *)(a2 + 136);
      if (!(_DWORD)v19)
        goto LABEL_26;
      v18 = *(const void **)(a2 + 128);
      v16 = *(void **)(a1 + 128);
    }
    else
    {
      v19 = *(unsigned int *)(a2 + 136);
    }
    memcpy(v16, v18, 8 * v19);
LABEL_26:
    *(_DWORD *)(a1 + 136) = v17;
LABEL_27:
    *(_DWORD *)(a2 + 136) = 0;
  }
  *(_BYTE *)(a1 + 224) = *(_BYTE *)(a2 + 224);
  *(_QWORD *)(a1 + 232) = *(_QWORD *)(a2 + 232);
  *(_QWORD *)(a2 + 232) = 1;
  *(_DWORD *)(a1 + 240) = *(_DWORD *)(a2 + 240);
  v20 = *(_OWORD *)(a2 + 248);
  *(_OWORD *)(a1 + 264) = *(_OWORD *)(a2 + 264);
  *(_OWORD *)(a1 + 248) = v20;
  v21 = (void *)(a1 + 296);
  *(_QWORD *)(a1 + 280) = a1 + 296;
  *(_QWORD *)(a1 + 288) = 0x800000000;
  v22 = *(_DWORD *)(a2 + 288);
  if (v22 && a1 != a2)
  {
    v23 = *(const void **)(a2 + 280);
    if (v23 != (const void *)(a2 + 296))
    {
      *(_QWORD *)(a1 + 280) = v23;
      *(_DWORD *)(a1 + 288) = v22;
      *(_DWORD *)(a1 + 292) = *(_DWORD *)(a2 + 292);
      *(_QWORD *)(a2 + 280) = a2 + 296;
      *(_DWORD *)(a2 + 292) = 0;
      goto LABEL_35;
    }
    if (v22 >= 9)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 280, a1 + 296, *(unsigned int *)(a2 + 288), 8);
      v24 = *(unsigned int *)(a2 + 288);
      if (!(_DWORD)v24)
        goto LABEL_34;
      v23 = *(const void **)(a2 + 280);
      v21 = *(void **)(a1 + 280);
    }
    else
    {
      v24 = *(unsigned int *)(a2 + 288);
    }
    memcpy(v21, v23, 8 * v24);
LABEL_34:
    *(_DWORD *)(a1 + 288) = v22;
LABEL_35:
    *(_DWORD *)(a2 + 288) = 0;
  }
  v25 = (void *)(a1 + 376);
  *(_QWORD *)(a1 + 360) = a1 + 376;
  *(_QWORD *)(a1 + 368) = 0x800000000;
  v26 = *(_DWORD *)(a2 + 368);
  if (v26 && a1 != a2)
  {
    v27 = *(const void **)(a2 + 360);
    if (v27 != (const void *)(a2 + 376))
    {
      *(_QWORD *)(a1 + 360) = v27;
      *(_DWORD *)(a1 + 368) = v26;
      *(_DWORD *)(a1 + 372) = *(_DWORD *)(a2 + 372);
      *(_QWORD *)(a2 + 360) = a2 + 376;
      *(_DWORD *)(a2 + 372) = 0;
      goto LABEL_43;
    }
    if (v26 >= 9)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 360, a1 + 376, *(unsigned int *)(a2 + 368), 8);
      v28 = *(unsigned int *)(a2 + 368);
      if (!(_DWORD)v28)
        goto LABEL_42;
      v27 = *(const void **)(a2 + 360);
      v25 = *(void **)(a1 + 360);
    }
    else
    {
      v28 = *(unsigned int *)(a2 + 368);
    }
    memcpy(v25, v27, 8 * v28);
LABEL_42:
    *(_DWORD *)(a1 + 368) = v26;
LABEL_43:
    *(_DWORD *)(a2 + 368) = 0;
  }
  *(_WORD *)(a1 + 440) = *(_WORD *)(a2 + 440);
  return a1;
}

uint64_t sub_1C5617CF4(uint64_t result, uint64_t a2)
{
  int v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  unint64_t *v10;
  unsigned int v11;
  _QWORD *v12;
  int v13;
  unint64_t v14;
  int v15;
  _QWORD *v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  char v21;
  int v22;
  char v23;
  BOOL v24;
  unsigned int v25;

  v2 = *(_DWORD *)(*(_QWORD *)(a2 - 32) + 36);
  v3 = 5;
  if (v2 > 2560)
  {
    if ((v2 - 2561) >= 0x10)
    {
      v17 = -1;
      v13 = 2;
      v15 = 4;
      goto LABEL_26;
    }
  }
  else
  {
    if ((v2 - 2471) < 4)
      v3 = 6;
    if ((v2 - 2545) < 0x10)
      v3 = 4;
  }
  v4 = (uint64_t *)(a2 - 32 * (*(_DWORD *)(a2 + 20) & 0x7FFFFFF));
  v5 = v4[4 * v3];
  if (*(_BYTE *)(v5 + 16) != 16)
    v5 = 0;
  v6 = v4[4];
  if (v6)
  {
    v7 = (_QWORD *)(v6 + 24);
    if (*(_DWORD *)(v6 + 32) >= 0x41u)
      v7 = (_QWORD *)*v7;
    v8 = *(_DWORD *)v7;
  }
  else
  {
    v8 = 1;
  }
  v9 = *v4;
  v10 = (unint64_t *)(v9 + 24);
  v11 = *(_DWORD *)(v9 + 32);
  v12 = (_QWORD *)(v9 + 24);
  if (v11 >= 0x41)
    v12 = (_QWORD *)*v10;
  v13 = *(_DWORD *)((char *)&unk_1C865FB38 + ((uint64_t)(*v12 << 32) >> 30));
  if (v11 > 0x40)
    v10 = (unint64_t *)*v10;
  v14 = *v10;
  if ((v14 | 4) != 0xC && (v14 != 16 ? (v24 = (v8 & 8) == 0) : (v24 = 0), v24))
  {
    v15 = 4;
    v25 = 8;
    do
    {
      v24 = (v8 & (v25 >> 1)) == 0;
      v25 >>= 1;
      --v15;
    }
    while (v24);
  }
  else
  {
    v15 = 4;
  }
  if (v5)
  {
    v16 = (_QWORD *)(v5 + 24);
    if (*(_DWORD *)(v5 + 32) >= 0x41u)
      v16 = (_QWORD *)*v16;
    v17 = *(_DWORD *)v16;
  }
  else
  {
    v17 = -1;
  }
LABEL_26:
  v18 = v2 - 2545;
  if ((v2 - 2471) >= 8)
    v19 = 0;
  else
    v19 = v17;
  if ((v2 - 2471) >= 8)
    v20 = 1;
  else
    v20 = v15;
  if ((v2 - 2471) >= 8)
    v21 = 3;
  else
    v21 = 2;
  if (v18 <= 0x1F)
    v22 = v17;
  else
    v22 = v19;
  if (v18 <= 0x1F)
  {
    v23 = 1;
  }
  else
  {
    v15 = v20;
    v23 = v21;
  }
  *(_QWORD *)(result + 16) = 0;
  *(_QWORD *)result = a2;
  *(_DWORD *)(result + 8) = v22;
  *(_DWORD *)(result + 12) = v15 * v13;
  *(_BYTE *)(result + 16) = v23;
  return result;
}

#error "1C5617E8C: too big function (funcsize=0)"

uint64_t sub_1C5629594(uint64_t result, unsigned int a2, _QWORD *a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;

  v5 = (_QWORD *)(result + 448 * a2);
  if (v5 != a3)
  {
    v6 = (_QWORD *)(a5 + 40);
    do
    {
      if (a3[32] == a4)
      {
        a3[32] = a5;
        if (*(_QWORD *)(a3[31] + 40) != a5)
        {
          v7 = *(_QWORD *)(a5 + 48);
          if (v7)
            v8 = v7 - 24;
          else
            v8 = 0;
          a3[31] = v8;
        }
      }
      if (a3[34] == a4)
      {
        a3[34] = a5;
        if (*(_QWORD *)(a3[33] + 40) != a5)
        {
          v9 = (_QWORD *)*v6;
          if ((_QWORD *)*v6 == v6)
          {
            v10 = 0;
          }
          else
          {
            if (v9)
              v10 = v9 - 3;
            else
              v10 = 0;
            if (*((unsigned __int8 *)v10 + 16) - 29 >= 0xB)
              v10 = 0;
          }
          a3[33] = v10;
        }
      }
      a3 += 56;
    }
    while (a3 != v5);
  }
  return result;
}

void sub_1C5629640(_QWORD *a1, uint64_t a2, uint64_t a3, unsigned int a4, uint64_t ***a5, uint64_t a6, uint64_t **a7, uint64_t a8)
{
  uint64_t *v12;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v17;
  uint64_t j;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  const llvm::APInt *v25;
  llvm::PHINode *v26;
  uint64_t v27;
  unsigned int *v28;
  uint64_t v29;
  llvm::ConstantInt *v30;
  unsigned int v31;
  unint64_t v32;
  llvm::ValueHandleBase *v33;
  const llvm::APInt *v34;
  uint64_t v35;
  unsigned int *v36;
  uint64_t v37;
  llvm::ConstantInt *v38;
  unsigned int v39;
  unint64_t v40;
  llvm::ValueHandleBase *v41;
  uint64_t v42;
  llvm::PHINode *v43;
  const llvm::APInt *v44;
  llvm::ConstantInt *v45;
  unsigned int v46;
  char v47;
  llvm::ValueHandleBase *v48;
  const llvm::APInt *v49;
  llvm::ConstantInt *v50;
  unsigned int v51;
  unint64_t v52;
  llvm::ValueHandleBase *v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  const llvm::APInt *v59;
  llvm::UndefValue *v60;
  uint64_t v61;
  uint64_t Declaration;
  uint64_t v63;
  uint64_t **v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  unsigned __int8 *v69;
  uint64_t v70;
  llvm::ConstantInt **v71;
  uint64_t v72;
  llvm::Value **v73;
  unsigned __int8 *v74;
  unsigned __int8 *v75;
  unsigned __int8 *v76;
  _OWORD v78[2];
  const char *v79;
  unsigned int v80;
  __int16 v81;
  llvm::UndefValue *v82;
  void *v83;
  uint64_t v84;
  _BYTE v85[32];
  uint64_t **v86;
  _QWORD **v87;
  uint64_t v88;
  void **v89;
  void **v90;
  uint64_t v91;
  int v92;
  __int16 v93;
  char v94;
  uint64_t v95;
  uint64_t v96;
  void *v97;
  void *v98;
  void *v99[2];
  _BYTE v100[48];
  uint64_t v101;
  _BYTE *v102;
  uint64_t v103;
  _BYTE v104[32];
  uint64_t ***v105;
  uint64_t ***v106;
  uint64_t *v107;
  void **v108;
  _QWORD *v109;
  uint64_t v110;
  int v111;
  __int16 v112;
  char v113;
  uint64_t v114;
  uint64_t v115;
  void *v116;
  _QWORD v117[3];

  v117[1] = *MEMORY[0x1E0C80C00];
  if (a4 >= 4)
  {
    v12 = **a5;
    v102 = v104;
    v103 = 0x200000000;
    v107 = v12;
    v108 = &v116;
    v109 = v117;
    v110 = 0;
    v111 = 0;
    v112 = 512;
    v113 = 7;
    v114 = 0;
    v115 = 0;
    v116 = &unk_1E8167888;
    v117[0] = &unk_1E8167A08;
    v105 = a5;
    v106 = a5 + 5;
    for (i = *(_QWORD *)(a6 + 48); i != a6 + 40; i = *(_QWORD *)(i + 8))
    {
      v14 = i - 24;
      if (i)
        v15 = i - 24;
      else
        v15 = 0;
      if (*(_BYTE *)(v15 + 16) != 83)
        goto LABEL_17;
    }
    v14 = 0;
LABEL_17:
    if (v14)
      v21 = v14 + 24;
    else
      v21 = a6 + 40;
    sub_1C4D8ADA0((uint64_t)v99, (uint64_t **)a6, v21, 0, 0, 0);
    v22 = **a7;
    v83 = v85;
    v84 = 0x200000000;
    v88 = v22;
    v89 = &v97;
    v90 = &v98;
    v91 = 0;
    v92 = 0;
    v93 = 512;
    v94 = 7;
    v95 = 0;
    v96 = 0;
    v97 = &unk_1E8167888;
    v98 = &unk_1E8167A08;
    v86 = a7;
    v87 = a7 + 5;
    v23 = *v107 + 1936;
    if (*(_QWORD *)(*(_QWORD *)(a2 + 8) + 280))
    {
      v24 = *v107 + 1960;
      v79 = "smp-mask";
      v81 = 259;
      v26 = (llvm::PHINode *)sub_1C4867E94((uint64_t)v99, v24, 2, (uint64_t)&v79);
      v27 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 280);
      v28 = (unsigned int *)(v27 + 24);
      if (*(_DWORD *)(v27 + 32) >= 0x41u)
        v28 = *(unsigned int **)v28;
      v29 = *v28;
      v30 = *(llvm::ConstantInt **)(*(_QWORD *)v101 + 1960);
      v31 = *(_DWORD *)(*(_QWORD *)v101 + 1968);
      v80 = v31 >> 8;
      if (v31 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v79, v29, 0);
      }
      else
      {
        if (v31 <= 0xFF)
          v32 = 0;
        else
          v32 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v31);
        v79 = (const char *)(v32 & v29);
      }
      v33 = llvm::ConstantInt::get(v30, (llvm::LLVMContext *)&v79, v25);
      if (v80 >= 0x41 && v79)
        MEMORY[0x1CAA32F9C](v79, 0x1000C8000313F17);
      sub_1C477667C(v26, (uint64_t)v33, (uint64_t)a5);
      v35 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 256);
      v36 = (unsigned int *)(v35 + 24);
      if (*(_DWORD *)(v35 + 32) >= 0x41u)
        v36 = *(unsigned int **)v36;
      v37 = *v36;
      v38 = *(llvm::ConstantInt **)(*(_QWORD *)v88 + 1960);
      v39 = *(_DWORD *)(*(_QWORD *)v88 + 1968);
      v80 = v39 >> 8;
      if (v39 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v79, v37, 0);
      }
      else
      {
        if (v39 <= 0xFF)
          v40 = 0;
        else
          v40 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v39);
        v79 = (const char *)(v40 & v37);
      }
      v41 = llvm::ConstantInt::get(v38, (llvm::LLVMContext *)&v79, v34);
      if (v80 >= 0x41 && v79)
        MEMORY[0x1CAA32F9C](v79, 0x1000C8000313F17);
      v81 = 257;
      v42 = sub_1C506ED1C((uint64_t)&v83, (uint64_t)v26, (uint64_t)v41, (uint64_t)&v79, 0);
      v81 = 257;
      v43 = (llvm::PHINode *)sub_1C4773E38((uint64_t *)v99, 38, (unsigned __int8 *)v26, v23, (uint64_t)&v79);
    }
    else
    {
      v79 = "smp-mask";
      v81 = 259;
      v43 = (llvm::PHINode *)sub_1C4867E94((uint64_t)v99, v23, 2, (uint64_t)&v79);
      v45 = *(llvm::ConstantInt **)(*(_QWORD *)v101 + 1936);
      v46 = *(_DWORD *)(*(_QWORD *)v101 + 1944);
      v80 = v46 >> 8;
      if (v46 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v79, 1, 0);
      }
      else
      {
        if (v46 <= 0xFF)
          v47 = 0;
        else
          v47 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v46);
        v79 = (const char *)(v47 & 1);
      }
      v48 = llvm::ConstantInt::get(v45, (llvm::LLVMContext *)&v79, v44);
      if (v80 >= 0x41 && v79)
        MEMORY[0x1CAA32F9C](v79, 0x1000C8000313F17);
      sub_1C477667C(v43, (uint64_t)v48, (uint64_t)a5);
      v50 = *(llvm::ConstantInt **)(*(_QWORD *)v88 + 1936);
      v51 = *(_DWORD *)(*(_QWORD *)v88 + 1944);
      v80 = v51 >> 8;
      if (v51 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v79, 1, 0);
      }
      else
      {
        if (v51 <= 0xFF)
          LOBYTE(v52) = 0;
        else
          v52 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v51);
        v79 = (const char *)(v52 & 1);
      }
      v53 = llvm::ConstantInt::get(v50, (llvm::LLVMContext *)&v79, v49);
      if (v80 >= 0x41 && v79)
        MEMORY[0x1CAA32F9C](v79, 0x1000C8000313F17);
      v81 = 257;
      v42 = sub_1C506E874((uint64_t)&v83, (uint64_t)v43, (uint64_t)v53, (uint64_t)&v79, 0, 0);
      v26 = v43;
    }
    sub_1C477667C(v26, v42, a8);
    *a1 = v43;
    a1[1] = v42;
    a1[2] = 0;
    if (v83 != v85)
      free(v83);
    if (v99[0] != v100)
      free(v99[0]);
    v54 = v102;
    if (v102 == v104)
      return;
LABEL_82:
    free(v54);
    return;
  }
  v17 = **a5;
  v102 = v104;
  v103 = 0x200000000;
  v107 = v17;
  v108 = &v116;
  v109 = v117;
  v110 = 0;
  v111 = 0;
  v112 = 512;
  v113 = 7;
  v114 = 0;
  v115 = 0;
  v116 = &unk_1E8167888;
  v117[0] = &unk_1E8167A08;
  v105 = a5;
  v106 = a5 + 5;
  for (j = *(_QWORD *)(a6 + 48); j != a6 + 40; j = *(_QWORD *)(j + 8))
  {
    v19 = j - 24;
    if (j)
      v20 = j - 24;
    else
      v20 = 0;
    if (*(_BYTE *)(v20 + 16) != 83)
      goto LABEL_56;
  }
  v19 = 0;
LABEL_56:
  if (v19)
    v55 = v19 + 24;
  else
    v55 = a6 + 40;
  sub_1C4D8ADA0((uint64_t)v99, (uint64_t **)a6, v55, 0, 0, 0);
  v56 = **a7;
  v83 = v85;
  v84 = 0x200000000;
  v88 = v56;
  v89 = &v97;
  v90 = &v98;
  v91 = 0;
  v92 = 0;
  v93 = 512;
  v94 = 7;
  v95 = 0;
  v96 = 0;
  v97 = &unk_1E8167888;
  v98 = &unk_1E8167A08;
  v86 = a7;
  v87 = a7 + 5;
  v57 = *v107;
  v58 = *v107 + 1936;
  if (*(_BYTE *)(a3 + 224))
  {
    memset(v78, 0, sizeof(v78));
    sub_1C562AD3C((unint64_t *)(a3 + 232), v78);
    v60 = sub_1C562ADE8(***a5, (uint64_t *)v78, v59);
    v61 = 7;
    if (!*(_BYTE *)(a2 + 64))
      v61 = 6;
    Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t **)(a2 + 24), dword_1C867421C[v61], 0, 0);
    v63 = Declaration;
    if (Declaration)
      v64 = *(uint64_t ***)(Declaration + 24);
    else
      v64 = 0;
    v82 = v60;
    v79 = "orig-col-msk";
    v81 = 259;
    v67 = (uint64_t *)&v82;
    v68 = 1;
  }
  else
  {
    v65 = 5;
    if (!*(_BYTE *)(a2 + 64))
      v65 = 4;
    v66 = llvm::Intrinsic::getDeclaration(*(uint64_t **)(a2 + 24), dword_1C867421C[v65], 0, 0);
    v63 = v66;
    if (v66)
      v64 = *(uint64_t ***)(v66 + 24);
    else
      v64 = 0;
    v79 = "orig-col-msk";
    v81 = 259;
    v67 = 0;
    v68 = 0;
  }
  v69 = (unsigned __int8 *)sub_1C4774778((uint64_t *)&v102, v64, v63, v67, v68, (uint64_t)&v79, 0);
  if (*(_DWORD *)(a2 + 60) != 4
    || (v79 = "orig-col-msk-16",
        v81 = 259,
        v69 = sub_1C4773E38((uint64_t *)&v102, 38, v69, v57 + 1936, (uint64_t)&v79),
        v70 = v57 + 1936,
        *(_DWORD *)(a2 + 60) != 4))
  {
    if (*(_BYTE *)(a2 + 64))
      v70 = v57 + 1984;
    else
      v70 = v57 + 1960;
  }
  v79 = "col-mask";
  v81 = 259;
  v71 = (llvm::ConstantInt **)sub_1C4867E94((uint64_t)v99, v70, 2, (uint64_t)&v79);
  v72 = *(unsigned int *)(a2 + 60);
  v79 = "cvg-msk-next";
  v81 = 259;
  v73 = llvm::ConstantInt::get(*v71, v72, 0);
  v74 = (unsigned __int8 *)sub_1C506ED1C((uint64_t)&v83, (uint64_t)v71, (uint64_t)v73, (uint64_t)&v79, 0);
  v79 = "col-mask-16";
  v81 = 259;
  v75 = sub_1C4773E38((uint64_t *)v99, 38, (unsigned __int8 *)v71, v58, (uint64_t)&v79);
  v79 = "cvg-mask-next-16";
  v81 = 259;
  v76 = sub_1C4773E38((uint64_t *)&v83, 38, v74, v58, (uint64_t)&v79);
  sub_1C477667C((llvm::PHINode *)v71, (uint64_t)v69, (uint64_t)a5);
  sub_1C477667C((llvm::PHINode *)v71, (uint64_t)v74, a8);
  *a1 = v75;
  a1[1] = v76;
  a1[2] = v69;
  if (v83 != v85)
    free(v83);
  if (v99[0] != v100)
    free(v99[0]);
  v54 = v102;
  if (v102 != v104)
    goto LABEL_82;
}

llvm::PHINode *sub_1C5629F64(unsigned int a1, _QWORD **a2, uint64_t a3, uint64_t **a4, uint64_t a5)
{
  llvm::PHINode *v5;
  _QWORD *v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  const llvm::APInt *v16;
  llvm::ConstantInt *v17;
  unsigned int v18;
  char v19;
  llvm::ValueHandleBase *v20;
  const llvm::APInt *v21;
  uint64_t v22;
  llvm::ConstantInt *v23;
  llvm::ValueHandleBase *v24;
  const char *v26;
  unsigned int v27;
  __int16 v28;
  void *v29[2];
  _QWORD v30[6];
  uint64_t v31;
  void **v32;
  void **v33;
  uint64_t v34;
  int v35;
  __int16 v36;
  char v37;
  uint64_t v38;
  uint64_t v39;
  void *v40;
  void *v41;
  void *v42[2];
  uint64_t v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  _QWORD v47[6];
  _QWORD *v48;
  void **v49;
  _QWORD *v50;
  uint64_t v51;
  int v52;
  __int16 v53;
  char v54;
  uint64_t v55;
  uint64_t v56;
  void *v57;
  _QWORD v58[2];

  v58[1] = *MEMORY[0x1E0C80C00];
  if (a1 < 4)
    return 0;
  v9 = (_QWORD *)**a2;
  v45 = v47;
  v46 = 0x200000000;
  v48 = v9;
  v49 = &v57;
  v50 = v58;
  v51 = 0;
  v52 = 0;
  v53 = 512;
  v54 = 7;
  v55 = 0;
  v56 = 0;
  v57 = &unk_1E8167888;
  v58[0] = &unk_1E8167A08;
  v47[4] = a2;
  v47[5] = a2 + 5;
  v10 = a3 + 40;
  for (i = *(_QWORD *)(a3 + 48); i != v10; i = *(_QWORD *)(i + 8))
  {
    v12 = i - 24;
    if (i)
      v13 = i - 24;
    else
      v13 = 0;
    if (*(_BYTE *)(v13 + 16) != 83)
      goto LABEL_11;
  }
  v12 = 0;
LABEL_11:
  if (v12)
    v10 = v12 + 24;
  sub_1C4D8ADA0((uint64_t)v42, (uint64_t **)a3, v10, 0, 0, 0);
  v14 = **a4;
  v29[0] = v30;
  v29[1] = (void *)0x200000000;
  v31 = v14;
  v32 = &v40;
  v33 = &v41;
  v34 = 0;
  v35 = 0;
  v36 = 512;
  v37 = 7;
  v38 = 0;
  v39 = 0;
  v40 = &unk_1E8167888;
  v41 = &unk_1E8167A08;
  v30[4] = a4;
  v30[5] = a4 + 5;
  v15 = *v48 + 1960;
  v26 = "smp-num";
  v28 = 259;
  v5 = (llvm::PHINode *)sub_1C4867E94((uint64_t)v42, v15, 2, (uint64_t)&v26);
  v17 = *(llvm::ConstantInt **)(*(_QWORD *)v31 + 1960);
  v18 = *(_DWORD *)(*(_QWORD *)v31 + 1968);
  v27 = v18 >> 8;
  if (v18 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v26, 1, 0);
  }
  else
  {
    if (v18 <= 0xFF)
      v19 = 0;
    else
      v19 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v18);
    v26 = (const char *)(v19 & 1);
  }
  v20 = llvm::ConstantInt::get(v17, (llvm::LLVMContext *)&v26, v16);
  if (v27 >= 0x41 && v26)
    MEMORY[0x1CAA32F9C](v26, 0x1000C8000313F17);
  v26 = "smp-num-next";
  v28 = 259;
  v22 = (*((uint64_t (**)(void **, llvm::PHINode *, llvm::ValueHandleBase *, uint64_t, uint64_t))*v32 + 2))(v32, v5, v20, 1, 1);
  if (!v22)
    v22 = sub_1C4774D04((uint64_t *)v29, 13, v5, (uint64_t)v20, (uint64_t)&v26, 1, 1);
  v23 = *(llvm::ConstantInt **)(*(_QWORD *)v44 + 1960);
  v27 = *(_DWORD *)(*(_QWORD *)v44 + 1968) >> 8;
  if (v27 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v26, 0, 0);
  else
    v26 = 0;
  v24 = llvm::ConstantInt::get(v23, (llvm::LLVMContext *)&v26, v21);
  if (v27 >= 0x41 && v26)
    MEMORY[0x1CAA32F9C](v26, 0x1000C8000313F17);
  sub_1C477667C(v5, (uint64_t)v24, (uint64_t)a2);
  sub_1C477667C(v5, v22, a5);
  if (v29[0] != v30)
    free(v29[0]);
  if (v42[0] != &v43)
    free(v42[0]);
  if (v45 != v47)
    free(v45);
  return v5;
}

unsigned __int8 *sub_1C562A308(uint64_t a1, _QWORD **a2, uint64_t a3)
{
  _QWORD *v4;
  uint64_t Declaration;
  uint64_t **v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  _QWORD v11[4];
  __int16 v12;
  void *v13[2];
  _BYTE v14[32];
  _QWORD **v15;
  _QWORD **v16;
  _QWORD *v17;
  void **v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  __int16 v22;
  char v23;
  uint64_t v24;
  uint64_t v25;
  void *v26;
  _QWORD v27[2];

  v27[1] = *MEMORY[0x1E0C80C00];
  v4 = (_QWORD *)**a2;
  v13[0] = v14;
  v13[1] = (void *)0x200000000;
  v17 = v4;
  v18 = &v26;
  v19 = v27;
  v20 = 0;
  v21 = 0;
  v22 = 512;
  v23 = 7;
  v15 = 0;
  v16 = 0;
  v24 = 0;
  v25 = 0;
  v26 = &unk_1E8167888;
  v27[0] = &unk_1E8167A08;
  if (a3)
  {
    sub_1C4D8AE2C((uint64_t)v13, (uint64_t)a2, a3 + 24);
  }
  else
  {
    v15 = a2;
    v16 = a2 + 5;
  }
  Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t **)(a1 + 24), 2140, 0, 0);
  if (Declaration)
    v6 = *(uint64_t ***)(Declaration + 24);
  else
    v6 = 0;
  v11[0] = "coverage_mask";
  v12 = 259;
  v7 = (unsigned __int8 *)sub_1C4774778((uint64_t *)v13, v6, Declaration, 0, 0, (uint64_t)v11, 0);
  v8 = *v17 + 1936;
  v12 = 257;
  v9 = sub_1C4773E38((uint64_t *)v13, 38, v7, v8, (uint64_t)v11);
  if (v13[0] != v14)
    free(v13[0]);
  return v9;
}

uint64_t sub_1C562A474(uint64_t *a1, _QWORD **a2, uint64_t a3)
{
  uint64_t v6;
  unsigned __int8 *v7;
  uint64_t v8;
  unsigned __int8 *v9;
  unsigned __int8 *v10;
  _QWORD *v11;
  const llvm::APInt *v12;
  uint64_t v13;
  llvm::ConstantInt *v14;
  llvm::ValueHandleBase *v15;
  uint64_t v16;
  const char *v18;
  unsigned int v19;
  __int16 v20;
  unsigned __int8 *v21[4];
  __int16 v22;
  void *v23[2];
  _BYTE v24[32];
  _QWORD **v25;
  _QWORD **v26;
  uint64_t v27;
  void **v28;
  _QWORD *v29;
  uint64_t v30;
  int v31;
  __int16 v32;
  char v33;
  uint64_t v34;
  uint64_t v35;
  void *v36;
  _QWORD v37[2];

  v37[1] = *MEMORY[0x1E0C80C00];
  v6 = *a1;
  v7 = sub_1C562A308(*a1, a2, a3);
  v8 = **(_QWORD **)(v6 + 24);
  v23[0] = v24;
  v23[1] = (void *)0x200000000;
  v27 = v8;
  v28 = &v36;
  v29 = v37;
  v30 = 0;
  v31 = 0;
  v32 = 512;
  v33 = 7;
  v25 = 0;
  v26 = 0;
  v34 = 0;
  v35 = 0;
  v36 = &unk_1E8167888;
  v37[0] = &unk_1E8167A08;
  if (a3)
  {
    v9 = *(unsigned __int8 **)(a3 + 48);
    v25 = *(_QWORD ***)(a3 + 40);
    v26 = (_QWORD **)(a3 + 24);
    v21[0] = v9;
    if (v9)
    {
      llvm::MetadataTracking::track((uint64_t)v21, v9, 2);
      v10 = v21[0];
    }
    else
    {
      v10 = 0;
    }
    sub_1C4774EF4((uint64_t)v23, 0, (uint64_t)v10);
    if (v21[0])
      llvm::MetadataTracking::untrack((uint64_t)v21, v21[0]);
  }
  else
  {
    v25 = a2;
    v26 = a2 + 5;
  }
  v11 = (_QWORD *)a1[1];
  v22 = 257;
  v13 = sub_1C4D89BCC((uint64_t)v23, v11, (uint64_t)v7, (uint64_t)v21);
  v14 = *(llvm::ConstantInt **)(*(_QWORD *)v27 + 1936);
  v19 = *(_DWORD *)(*(_QWORD *)v27 + 1944) >> 8;
  if (v19 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v18, 0, 0);
  else
    v18 = 0;
  v15 = llvm::ConstantInt::get(v14, (llvm::LLVMContext *)&v18, v12);
  if (v19 >= 0x41 && v18)
    MEMORY[0x1CAA32F9C](v18, 0x1000C8000313F17);
  v18 = "skip-cond";
  v20 = 259;
  v16 = sub_1C4774B48((uint64_t)v23, 32, v13, (uint64_t)v15, (uint64_t)&v18);
  if (v23[0] != v24)
    free(v23[0]);
  return v16;
}

void sub_1C562A688(uint64_t a1, _BYTE *a2, uint64_t a3, _BYTE *a4, uint64_t a5, uint64_t *a6, uint64_t a7)
{
  char *v12;
  uint64_t v13;
  _QWORD *v15;
  unint64_t v16;
  int32x2_t ****v17;
  int32x2_t *v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  int32x2_t *****v23;
  int32x2_t ****v24;
  int v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD **v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  char *v43;
  void *v44;
  uint64_t v45;
  unint64_t *v46;
  int32x2_t ****v47;
  uint64_t v48;
  void *v49;
  uint64_t v50;
  _QWORD v51[12];

  v51[10] = *MEMORY[0x1E0C80C00];
  v49 = v51;
  v50 = 0xA00000000;
  sub_1C486AF08((unsigned int *)&v49, a2, &a2[8 * a3]);
  sub_1C486AF08((unsigned int *)&v49, a4, &a4[8 * a5]);
  v12 = (char *)v49;
  if (!(_DWORD)v50)
    goto LABEL_51;
  v43 = (char *)v49 + 8 * v50;
  do
  {
    v13 = *(_QWORD *)v12;
    if (a7)
    {
      v45 = 2;
      v46 = 0;
      v47 = (int32x2_t ****)v13;
      if (v13 != -8192 && v13 != -4096 && v13 != 0)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v45);
      v44 = &unk_1E814DA10;
      v48 = a7;
      v15 = sub_1C52E2ED8(a7, &v44);
      if (v47 != (int32x2_t ****)-8192 && v47 != (int32x2_t ****)-4096 && v47)
      {
        v16 = v45 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v45 & 0xFFFFFFFFFFFFFFF8) = v46;
        if (v46)
        {
          *v46 = *v46 & 7 | v16;
        }
        else
        {
          v17 = v47;
          v18 = ***v47;
          v19 = (unint64_t)v18[303];
          if (v19 <= v16)
          {
            v20 = v18[305].u32[0];
            if (v19 + 16 * v20 > v16)
            {
              v21 = v20 - 1;
              LODWORD(v22) = v21 & ((v47 >> 4) ^ (v47 >> 9));
              v23 = (int32x2_t *****)(v19 + 16 * v22);
              v24 = *v23;
              if (v47 == *v23)
              {
LABEL_21:
                *v23 = (int32x2_t ****)-8192;
                v18[304] = vadd_s32(v18[304], (int32x2_t)0x1FFFFFFFFLL);
                v17 = v47;
              }
              else
              {
                v25 = 1;
                while (v24 != (int32x2_t ****)-4096)
                {
                  v26 = v22 + v25++;
                  v22 = v26 & v21;
                  v24 = *(int32x2_t *****)(v19 + 16 * v22);
                  if (v47 == v24)
                  {
                    v23 = (int32x2_t *****)(v19 + 16 * v22);
                    goto LABEL_21;
                  }
                }
              }
              *((_BYTE *)v17 + 17) &= ~1u;
            }
          }
        }
      }
      v13 = v15[7];
      if (*(unsigned __int8 *)(v13 + 16) <= 0x1Bu)
        v13 = 0;
    }
    v27 = *(_DWORD *)(v13 + 20);
    if ((v27 & 0x40000000) != 0)
    {
      v29 = *(_QWORD *)(v13 - 8);
      v28 = v27 & 0x7FFFFFF;
      if (!v28)
        goto LABEL_49;
    }
    else
    {
      v28 = v27 & 0x7FFFFFF;
      v29 = v13 - 32 * v28;
      if (!v28)
        goto LABEL_49;
    }
    v30 = 32 * v28;
    v31 = (_QWORD **)(v29 + 8);
    do
    {
      v33 = v31 - 1;
      v32 = (uint64_t)*(v31 - 1);
      v34 = *(_QWORD **)(a1 + 8);
      if ((sub_1C5615E28(v34, v32) & 0xFFFD) != 0)
      {
        v35 = *(_DWORD *)(*(_QWORD *)(v32 - 32) + 36);
        v36 = v34[3];
        if (v36 && *(_DWORD *)(v36 + 36) == v35)
        {
          v37 = *a6;
        }
        else
        {
          v38 = v34[4];
          if (v38 && *(_DWORD *)(v38 + 36) == v35)
          {
            v37 = a6[1];
          }
          else
          {
            v39 = v34[5];
            if (v39 && *(_DWORD *)(v39 + 36) == v35)
              v37 = a6[2];
            else
              v37 = a6[3];
          }
        }
        *v31[1] = *v31;
        if (*v31)
          (*v31)[2] = v31[1];
        *v33 = v37;
        if (v37)
        {
          v42 = *(_QWORD **)(v37 + 8);
          v40 = (_QWORD *)(v37 + 8);
          v41 = v42;
          *v31 = v42;
          if (v42)
            v41[2] = v31;
          v31[1] = v40;
          *v40 = v33;
        }
      }
      v31 += 4;
      v30 -= 32;
    }
    while (v30);
LABEL_49:
    v12 += 8;
  }
  while (v12 != v43);
  v12 = (char *)v49;
LABEL_51:
  if (v12 != (char *)v51)
    free(v12);
}

uint64_t sub_1C562A9CC(uint64_t a1, unsigned int a2, const llvm::APInt *a3, _QWORD **a4, uint64_t a5)
{
  _QWORD *v5;
  uint64_t v7;
  uint64_t v8;
  llvm::ConstantInt *v9;
  unint64_t v10;
  unint64_t v11;
  llvm::ValueHandleBase *v12;
  void **v13;
  __int16 v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v18;
  uint64_t v19;
  unsigned __int16 *v20;
  uint64_t v21;
  uint64_t v22;
  llvm::ConstantInt *v23;
  unint64_t v24;
  unint64_t v25;
  unsigned __int8 *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  llvm::ValueSymbolTable *v38;
  uint64_t v39;
  _WORD v40[20];
  void *v41;
  unsigned int v42;
  uint64_t v43;
  __int16 v44;
  void *v45[2];
  _QWORD v46[6];
  _QWORD *v47;
  void **v48;
  _QWORD *v49;
  uint64_t v50;
  int v51;
  __int16 v52;
  char v53;
  uint64_t v54;
  uint64_t v55;
  void *v56;
  _QWORD v57[2];

  v57[1] = *MEMORY[0x1E0C80C00];
  v5 = (_QWORD *)**a4;
  v45[0] = v46;
  v45[1] = (void *)0x200000000;
  v47 = v5;
  v48 = &v56;
  v49 = v57;
  v50 = 0;
  v51 = 0;
  v52 = 512;
  v53 = 7;
  v46[4] = 0;
  v46[5] = 0;
  v54 = 0;
  v55 = 0;
  v56 = &unk_1E8167888;
  v57[0] = &unk_1E8167A08;
  if (a2 > 3)
  {
    v18 = 264;
    if (a2 == 4)
      v18 = 272;
    v19 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + v18);
    if (v19)
    {
      v20 = (unsigned __int16 *)(v19 + 24);
      if (*(_DWORD *)(v19 + 32) >= 0x41u)
        v20 = *(unsigned __int16 **)v20;
      v21 = *v20;
      v22 = *v5;
      v23 = *(llvm::ConstantInt **)(v22 + 1936);
      v24 = *(unsigned int *)(v22 + 1944);
      v42 = v24 >> 8;
      if (v24 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v41, v21, 0);
      }
      else
      {
        if (v24 <= 0xFF)
          v25 = 0;
        else
          v25 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v24);
        v41 = (void *)(v25 & v21);
      }
      v26 = (unsigned __int8 *)llvm::ConstantInt::get(v23, (llvm::LLVMContext *)&v41, a3);
      if (v42 >= 0x41 && v41)
        MEMORY[0x1CAA32F9C](v41, 0x1000C8000313F17);
    }
    else
    {
      sub_1C63A34B0(*(uint64_t **)(a1 + 24), (uint64_t)&v41);
      v31 = (uint64_t *)v41;
      if (v42)
      {
        v32 = (uint64_t *)(a5 + 40);
        v33 = 8 * v42;
        do
        {
          v34 = *v31;
          *(_QWORD *)(v34 + 40) = a5;
          *(_WORD *)(a5 + 18) &= ~0x8000u;
          if ((*(_BYTE *)(v34 + 23) & 0x10) != 0)
          {
            v37 = *(_QWORD *)(a5 + 56);
            if (v37)
            {
              v38 = *(llvm::ValueSymbolTable **)(v37 + 104);
              if (v38)
                llvm::ValueSymbolTable::reinsertValue(v38, (llvm::Value *)v34);
            }
          }
          v35 = *v32;
          *(_QWORD *)(v34 + 24) = *v32;
          *(_QWORD *)(v34 + 32) = v32;
          v36 = v34 + 24;
          *(_QWORD *)(v35 + 8) = v36;
          *v32 = v36;
          ++v31;
          v33 -= 8;
        }
        while (v33);
        v31 = (uint64_t *)v41;
        v39 = v42;
      }
      else
      {
        v39 = 0;
      }
      v26 = (unsigned __int8 *)v31[v39 - 1];
      if (v31 != &v43)
        free(v31);
    }
    v27 = *v47 + 1960;
    v44 = 257;
    v16 = sub_1C4773E38((uint64_t *)v45, 39, v26, v27, (uint64_t)&v41);
    v40[16] = 257;
    v13 = (void **)v40;
    v14 = 32;
    v15 = (uint64_t)a3;
  }
  else
  {
    v7 = *v5;
    v8 = (unsigned __int16)~(-1 << *(_DWORD *)(a1 + 60));
    v9 = *(llvm::ConstantInt **)(v7 + 1936);
    v10 = *(unsigned int *)(v7 + 1944);
    v42 = v10 >> 8;
    if (v10 >> 8 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v41, v8, 0);
    }
    else
    {
      if (v10 <= 0xFF)
        v11 = 0;
      else
        v11 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v10);
      v41 = (void *)(v11 & v8);
    }
    v12 = llvm::ConstantInt::get(v9, (llvm::LLVMContext *)&v41, a3);
    if (v42 >= 0x41 && v41)
      MEMORY[0x1CAA32F9C](v41, 0x1000C8000313F17);
    v44 = 257;
    v13 = &v41;
    v14 = 37;
    v15 = (uint64_t)a4;
    v16 = (unsigned __int8 *)v12;
  }
  v28 = sub_1C4774B48((uint64_t)v45, v14, v15, (uint64_t)v16, (uint64_t)v13);
  if (v45[0] != v46)
    free(v45[0]);
  return v28;
}

unint64_t sub_1C562AD3C(unint64_t *a1, _OWORD *a2)
{
  unint64_t result;
  __int128 v5;
  int i;
  unint64_t v7;

  result = *a1;
  if ((result & 1) != 0)
  {
    v7 = (result >> 1) & ~(-1 << (result >> 58));
    if (!v7)
      return result;
    i = __clz(__rbit64(v7));
    goto LABEL_8;
  }
  if (*(_DWORD *)(result + 64) >= 0x101u)
  {
    *(_QWORD *)&v5 = -1;
    *((_QWORD *)&v5 + 1) = -1;
    *a2 = v5;
    a2[1] = v5;
  }
  result = sub_1C476B7EC(result);
  for (i = result; (_DWORD)result != -1; i = result)
  {
LABEL_8:
    *(_QWORD *)((char *)a2 + (((unint64_t)i >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << i;
    result = sub_1C49143F4(a1, i);
  }
  return result;
}

llvm::UndefValue *sub_1C562ADE8(uint64_t a1, uint64_t *a2, const llvm::APInt *a3)
{
  uint64_t v5;
  llvm::ConstantInt *v6;
  unsigned int v7;
  unint64_t v8;
  llvm::FixedVectorType **v9;
  const llvm::APInt *v10;
  uint64_t v11;
  llvm::ConstantInt *v12;
  unsigned int v13;
  unint64_t v14;
  llvm::ValueHandleBase *v15;
  const llvm::APInt *v16;
  uint64_t v17;
  llvm::ConstantInt *v18;
  unsigned int v19;
  unint64_t v20;
  llvm::ValueHandleBase *v21;
  const llvm::APInt *v22;
  uint64_t v23;
  llvm::ConstantInt *v24;
  unsigned int v25;
  unint64_t v26;
  llvm::ValueHandleBase *v27;
  llvm::UndefValue *result;
  _QWORD **v29;
  llvm::ConstantInt *v30;
  llvm::ConstantInt *v31;
  llvm::ConstantInt *v32;
  llvm::FixedVectorType **v33;
  llvm::ValueHandleBase *v34;
  llvm::ValueHandleBase *v35;
  unint64_t v36;
  unsigned int v37;
  llvm::FixedVectorType **v38;
  llvm::ValueHandleBase *v39;
  llvm::ValueHandleBase *v40;
  llvm::ValueHandleBase *v41;
  uint64_t v42;

  v42 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  v6 = *(llvm::ConstantInt **)(a1 + 1984);
  v7 = *(_DWORD *)(a1 + 1992);
  LODWORD(v39) = v7 >> 8;
  if (v7 >> 8 > 0x40)
  {
    v30 = v6;
    llvm::APInt::initSlowCase((llvm::APInt *)&v38, v5, 0);
    v6 = v30;
  }
  else
  {
    if (v7 <= 0xFF)
      v8 = 0;
    else
      v8 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v7);
    v38 = (llvm::FixedVectorType **)(v8 & v5);
  }
  v9 = (llvm::FixedVectorType **)llvm::ConstantInt::get(v6, (llvm::LLVMContext *)&v38, a3);
  if (v39 >= 0x41 && v38)
  {
    v33 = v9;
    MEMORY[0x1CAA32F9C](v38, 0x1000C8000313F17);
    v9 = v33;
  }
  v38 = v9;
  v11 = a2[1];
  v12 = *(llvm::ConstantInt **)(a1 + 1984);
  v13 = *(_DWORD *)(a1 + 1992);
  v37 = v13 >> 8;
  if (v13 >> 8 > 0x40)
  {
    v31 = v12;
    llvm::APInt::initSlowCase((llvm::APInt *)&v36, v11, 0);
    v12 = v31;
  }
  else
  {
    if (v13 <= 0xFF)
      v14 = 0;
    else
      v14 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v13);
    v36 = v14 & v11;
  }
  v15 = llvm::ConstantInt::get(v12, (llvm::LLVMContext *)&v36, v10);
  if (v37 >= 0x41 && v36)
  {
    v34 = v15;
    MEMORY[0x1CAA32F9C](v36, 0x1000C8000313F17);
    v15 = v34;
  }
  v39 = v15;
  v17 = a2[2];
  v18 = *(llvm::ConstantInt **)(a1 + 1984);
  v19 = *(_DWORD *)(a1 + 1992);
  v37 = v19 >> 8;
  if (v19 >> 8 > 0x40)
  {
    v32 = v18;
    llvm::APInt::initSlowCase((llvm::APInt *)&v36, v17, 0);
    v18 = v32;
  }
  else
  {
    if (v19 <= 0xFF)
      v20 = 0;
    else
      v20 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v19);
    v36 = v20 & v17;
  }
  v21 = llvm::ConstantInt::get(v18, (llvm::LLVMContext *)&v36, v16);
  if (v37 >= 0x41 && v36)
  {
    v35 = v21;
    MEMORY[0x1CAA32F9C](v36, 0x1000C8000313F17);
    v21 = v35;
  }
  v40 = v21;
  v23 = a2[3];
  v24 = *(llvm::ConstantInt **)(a1 + 1984);
  v25 = *(_DWORD *)(a1 + 1992);
  v37 = v25 >> 8;
  if (v25 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v36, v23, 0);
  }
  else
  {
    if (v25 <= 0xFF)
      v26 = 0;
    else
      v26 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v25);
    v36 = v26 & v23;
  }
  v27 = llvm::ConstantInt::get(v24, (llvm::LLVMContext *)&v36, v22);
  if (v37 >= 0x41 && v36)
    MEMORY[0x1CAA32F9C](v36, 0x1000C8000313F17);
  v41 = v27;
  result = llvm::ConstantVector::getImpl(&v38, (llvm::Type *)4);
  if (!result)
  {
    llvm::FixedVectorType::get(*v38, (llvm::Type *)4);
    return (llvm::UndefValue *)sub_1C537B3A4(**v29 + 1288, (uint64_t)v29, &v38, 4);
  }
  return result;
}

uint64_t sub_1C562B0E4(uint64_t a1, uint64_t *a2)
{
  uint64_t result;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v7 = 0;
  result = sub_1C562B178(a1, *a2, &v7);
  if ((result & 1) == 0)
  {
    result = (uint64_t)sub_1C62805D0((_DWORD *)a1, a2, v7);
    *(_QWORD *)result = *a2;
    v5 = *a2;
    v6 = *(unsigned int *)(a1 + 48);
    if (v6 >= *(_DWORD *)(a1 + 52))
    {
      result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 40, a1 + 56, v6 + 1, 8);
      LODWORD(v6) = *(_DWORD *)(a1 + 48);
    }
    *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8 * v6) = v5;
    ++*(_DWORD *)(a1 + 48);
  }
  return result;
}

uint64_t sub_1C562B178(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_9;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 8 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 8 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_9;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_9:
  *a3 = v7;
  return result;
}

uint64_t sub_1C562B224(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[5];

  v14[4] = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C6280690(a1, v6, &v6[v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = v14;
  for (i = 8; i != 40; i += 8)
  {
    v10 = *(_QWORD *)(a1 + i);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
      *v8++ = v10;
  }
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C6280690(a1, v14, v8);
}

uint64_t sub_1C562B38C(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD v14[5];

  v14[4] = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(_QWORD **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C62808BC(a1, v6, &v6[v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = v14;
  for (i = 8; i != 40; i += 8)
  {
    v10 = *(_QWORD *)(a1 + i);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
      *v8++ = v10;
  }
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C62808BC(a1, v14, v8);
}

uint64_t sub_1C562B4F4(uint64_t result, uint64_t *a2, uint64_t *a3, uint64_t a4, char a5)
{
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t *v22;
  uint64_t *v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t *v34;
  BOOL v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  unsigned int v39;
  uint64_t *v40;
  unsigned int v41;
  uint64_t *v42;
  uint64_t v43;
  unsigned int v44;
  uint64_t v45;
  uint64_t v46;
  unsigned int v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t *v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t *v54;
  BOOL v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  uint64_t v63;
  unsigned int v64;
  uint64_t *v65;
  int64_t v66;
  int64_t v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t *v72;
  uint64_t v73;
  unsigned int v74;
  uint64_t v75;
  uint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unsigned int v80;
  uint64_t v81;
  unsigned int v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unsigned int v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t *v93;
  uint64_t v94;
  unsigned int v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  unsigned int v99;
  uint64_t v101;
  uint64_t v102;
  unsigned int v103;
  uint64_t v104;
  uint64_t *v105;
  uint64_t *v106;
  uint64_t v107;
  unsigned int v108;
  uint64_t *v109;
  uint64_t *v110;
  int64_t v111;
  uint64_t *v112;
  int64_t v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;

  v9 = (uint64_t *)result;
LABEL_2:
  v110 = a2 - 2;
  v112 = a2 - 1;
  v109 = a2 - 3;
  v10 = v9;
  v115 = a2;
  while (2)
  {
    v9 = v10;
    v11 = (char *)a2 - (char *)v10;
    v12 = a2 - v10;
    switch(v12)
    {
      case 0uLL:
      case 1uLL:
        return result;
      case 2uLL:
        v51 = *(a2 - 1);
        v117 = *v10;
        v118 = v51;
        v52 = *((_DWORD *)sub_1C504894C(*a3, &v118) + 2);
        result = (uint64_t)sub_1C504894C(*a3, &v117);
        if (v52 < *(_DWORD *)(result + 8))
        {
          v53 = *v10;
          *v10 = *(a2 - 1);
          *(a2 - 1) = v53;
        }
        return result;
      case 3uLL:
        return (uint64_t)sub_1C562C00C(v10, v10 + 1, v112, a3);
      case 4uLL:
        return (uint64_t)sub_1C562C3A4(v10, v10 + 1, v10 + 2, v112, a3);
      case 5uLL:
        return (uint64_t)sub_1C562BEA4(v10, v10 + 1, v10 + 2, v10 + 3, v112, a3);
      default:
        if (v11 <= 191)
        {
          v54 = v10 + 1;
          v56 = v10 == a2 || v54 == a2;
          if ((a5 & 1) != 0)
          {
            if (!v56)
            {
              v57 = 0;
              v58 = v10;
              do
              {
                v60 = *v58;
                v59 = v58[1];
                v58 = v54;
                v117 = v60;
                v118 = v59;
                v61 = *((_DWORD *)sub_1C504894C(*a3, &v118) + 2);
                result = (uint64_t)sub_1C504894C(*a3, &v117);
                if (v61 < *(_DWORD *)(result + 8))
                {
                  v62 = *v58;
                  v63 = v57;
                  while (1)
                  {
                    *(uint64_t *)((char *)v10 + v63 + 8) = *(uint64_t *)((char *)v10 + v63);
                    if (!v63)
                      break;
                    v117 = *(uint64_t *)((char *)v10 + v63 - 8);
                    v118 = v62;
                    v64 = *((_DWORD *)sub_1C504894C(*a3, &v118) + 2);
                    result = (uint64_t)sub_1C504894C(*a3, &v117);
                    v63 -= 8;
                    if (v64 >= *(_DWORD *)(result + 8))
                    {
                      v65 = (uint64_t *)((char *)v10 + v63 + 8);
                      goto LABEL_72;
                    }
                  }
                  v65 = v10;
LABEL_72:
                  *v65 = v62;
                }
                v54 = v58 + 1;
                v57 += 8;
              }
              while (v58 + 1 != a2);
            }
          }
          else if (!v56)
          {
            do
            {
              v102 = *v9;
              v101 = v9[1];
              v9 = v54;
              v117 = v102;
              v118 = v101;
              v103 = *((_DWORD *)sub_1C504894C(*a3, &v118) + 2);
              result = (uint64_t)sub_1C504894C(*a3, &v117);
              if (v103 < *(_DWORD *)(result + 8))
              {
                v104 = *v9;
                v105 = v9;
                do
                {
                  v106 = v105;
                  v107 = *--v105;
                  *v106 = v107;
                  v117 = *(v106 - 2);
                  v118 = v104;
                  v108 = *((_DWORD *)sub_1C504894C(*a3, &v118) + 2);
                  result = (uint64_t)sub_1C504894C(*a3, &v117);
                }
                while (v108 < *(_DWORD *)(result + 8));
                *v105 = v104;
              }
              v54 = v9 + 1;
            }
            while (v9 + 1 != a2);
          }
          return result;
        }
        if (!a4)
        {
          if (v10 != a2)
          {
            v66 = (v12 - 2) >> 1;
            v113 = v66;
            do
            {
              v67 = v66;
              if (v113 >= v66)
              {
                v68 = (2 * v66) | 1;
                v69 = &v9[v68];
                if (2 * v66 + 2 < (uint64_t)v12)
                {
                  v70 = *v69;
                  v117 = v69[1];
                  v118 = v70;
                  v71 = *((_DWORD *)sub_1C504894C(*a3, &v118) + 2);
                  if (v71 < *((_DWORD *)sub_1C504894C(*a3, &v117) + 2))
                  {
                    ++v69;
                    v68 = 2 * v67 + 2;
                  }
                }
                v72 = &v9[v67];
                v73 = *v69;
                v117 = *v72;
                v118 = v73;
                v74 = *((_DWORD *)sub_1C504894C(*a3, &v118) + 2);
                result = (uint64_t)sub_1C504894C(*a3, &v117);
                if (v74 >= *(_DWORD *)(result + 8))
                {
                  v111 = v67;
                  v75 = *v72;
                  do
                  {
                    v76 = v69;
                    *v72 = *v69;
                    if (v113 < v68)
                      break;
                    v77 = (2 * v68) | 1;
                    v69 = &v9[v77];
                    v78 = 2 * v68 + 2;
                    if (v78 < (uint64_t)v12)
                    {
                      v79 = *v69;
                      v117 = v69[1];
                      v118 = v79;
                      v80 = *((_DWORD *)sub_1C504894C(*a3, &v118) + 2);
                      if (v80 < *((_DWORD *)sub_1C504894C(*a3, &v117) + 2))
                      {
                        ++v69;
                        v77 = v78;
                      }
                    }
                    v81 = *v69;
                    v117 = v75;
                    v118 = v81;
                    v82 = *((_DWORD *)sub_1C504894C(*a3, &v118) + 2);
                    result = (uint64_t)sub_1C504894C(*a3, &v117);
                    v72 = v76;
                    v68 = v77;
                  }
                  while (v82 >= *(_DWORD *)(result + 8));
                  *v76 = v75;
                  v67 = v111;
                }
              }
              v66 = v67 - 1;
            }
            while (v67);
            v83 = v115;
            do
            {
              v84 = 0;
              v114 = *v9;
              v116 = v83;
              v85 = v9;
              do
              {
                v86 = &v85[v84 + 1];
                v87 = (2 * v84) | 1;
                v88 = 2 * v84 + 2;
                if (v88 < (uint64_t)v12)
                {
                  v89 = *v86;
                  v117 = v86[1];
                  v118 = v89;
                  v90 = *((_DWORD *)sub_1C504894C(*a3, &v118) + 2);
                  result = (uint64_t)sub_1C504894C(*a3, &v117);
                  if (v90 < *(_DWORD *)(result + 8))
                  {
                    ++v86;
                    v87 = v88;
                  }
                }
                *v85 = *v86;
                v85 = v86;
                v84 = v87;
              }
              while (v87 <= (uint64_t)((v12 - 2) >> 1));
              v83 = v116 - 1;
              if (v86 == v116 - 1)
              {
                *v86 = v114;
              }
              else
              {
                *v86 = *v83;
                *v83 = v114;
                v91 = (char *)v86 - (char *)v9 + 8;
                if (v91 >= 9)
                {
                  v92 = (((unint64_t)v91 >> 3) - 2) >> 1;
                  v93 = &v9[v92];
                  v94 = *v93;
                  v117 = *v86;
                  v118 = v94;
                  v95 = *((_DWORD *)sub_1C504894C(*a3, &v118) + 2);
                  result = (uint64_t)sub_1C504894C(*a3, &v117);
                  if (v95 < *(_DWORD *)(result + 8))
                  {
                    v96 = *v86;
                    do
                    {
                      v97 = v93;
                      *v86 = *v93;
                      if (!v92)
                        break;
                      v92 = (v92 - 1) >> 1;
                      v93 = &v9[v92];
                      v98 = *v93;
                      v117 = v96;
                      v118 = v98;
                      v99 = *((_DWORD *)sub_1C504894C(*a3, &v118) + 2);
                      result = (uint64_t)sub_1C504894C(*a3, &v117);
                      v86 = v97;
                    }
                    while (v99 < *(_DWORD *)(result + 8));
                    *v97 = v96;
                    v83 = v116 - 1;
                  }
                }
              }
            }
            while ((uint64_t)v12-- > 2);
          }
          return result;
        }
        v13 = v12 >> 1;
        v14 = &v10[v12 >> 1];
        if ((unint64_t)v11 < 0x401)
        {
          sub_1C562C00C(&v9[v12 >> 1], v9, v112, a3);
        }
        else
        {
          sub_1C562C00C(v9, &v9[v12 >> 1], v112, a3);
          sub_1C562C00C(v9 + 1, v14 - 1, v110, a3);
          sub_1C562C00C(v9 + 2, &v9[v13 + 1], v109, a3);
          sub_1C562C00C(v14 - 1, &v9[v12 >> 1], &v9[v13 + 1], a3);
          v15 = *v9;
          *v9 = *v14;
          *v14 = v15;
        }
        --a4;
        if ((a5 & 1) == 0)
        {
          v16 = *(v9 - 1);
          v117 = *v9;
          v118 = v16;
          v17 = *((_DWORD *)sub_1C504894C(*a3, &v118) + 2);
          if (v17 >= *((_DWORD *)sub_1C504894C(*a3, &v117) + 2))
          {
            v36 = *v9;
            v117 = *v112;
            v118 = v36;
            v37 = *((_DWORD *)sub_1C504894C(*a3, &v118) + 2);
            result = (uint64_t)sub_1C504894C(*a3, &v117);
            if (v37 >= *(_DWORD *)(result + 8))
            {
              v40 = v9 + 1;
              do
              {
                v10 = v40;
                if (v40 >= a2)
                  break;
                ++v40;
                v117 = *v10;
                v118 = v36;
                v41 = *((_DWORD *)sub_1C504894C(*a3, &v118) + 2);
                result = (uint64_t)sub_1C504894C(*a3, &v117);
              }
              while (v41 >= *(_DWORD *)(result + 8));
            }
            else
            {
              v10 = v9;
              do
              {
                v38 = v10[1];
                ++v10;
                v117 = v38;
                v118 = v36;
                v39 = *((_DWORD *)sub_1C504894C(*a3, &v118) + 2);
                result = (uint64_t)sub_1C504894C(*a3, &v117);
              }
              while (v39 >= *(_DWORD *)(result + 8));
            }
            v42 = a2;
            if (v10 < a2)
            {
              v42 = a2;
              do
              {
                v43 = *--v42;
                v117 = v43;
                v118 = v36;
                v44 = *((_DWORD *)sub_1C504894C(*a3, &v118) + 2);
                result = (uint64_t)sub_1C504894C(*a3, &v117);
              }
              while (v44 < *(_DWORD *)(result + 8));
            }
            while (v10 < v42)
            {
              v45 = *v10;
              *v10 = *v42;
              *v42 = v45;
              do
              {
                v46 = v10[1];
                ++v10;
                v117 = v46;
                v118 = v36;
                v47 = *((_DWORD *)sub_1C504894C(*a3, &v118) + 2);
              }
              while (v47 >= *((_DWORD *)sub_1C504894C(*a3, &v117) + 2));
              do
              {
                v48 = *--v42;
                v117 = v48;
                v118 = v36;
                v49 = *((_DWORD *)sub_1C504894C(*a3, &v118) + 2);
                result = (uint64_t)sub_1C504894C(*a3, &v117);
              }
              while (v49 < *(_DWORD *)(result + 8));
            }
            v50 = v10 - 1;
            if (v10 - 1 != v9)
              *v9 = *v50;
            a5 = 0;
            *v50 = v36;
            continue;
          }
        }
        v18 = 0;
        v19 = *v9;
        do
        {
          v20 = v9[v18 + 1];
          v117 = v19;
          v118 = v20;
          v21 = *((_DWORD *)sub_1C504894C(*a3, &v118) + 2);
          ++v18;
        }
        while (v21 < *((_DWORD *)sub_1C504894C(*a3, &v117) + 2));
        v22 = &v9[v18];
        v23 = v115;
        if (v18 == 1)
        {
          v23 = v115;
          do
          {
            if (v22 >= v23)
              break;
            v26 = *--v23;
            v117 = v19;
            v118 = v26;
            v27 = *((_DWORD *)sub_1C504894C(*a3, &v118) + 2);
          }
          while (v27 >= *((_DWORD *)sub_1C504894C(*a3, &v117) + 2));
        }
        else
        {
          do
          {
            v24 = *--v23;
            v117 = v19;
            v118 = v24;
            v25 = *((_DWORD *)sub_1C504894C(*a3, &v118) + 2);
          }
          while (v25 >= *((_DWORD *)sub_1C504894C(*a3, &v117) + 2));
        }
        v10 = v22;
        if (v22 < v23)
        {
          v28 = v23;
          do
          {
            v29 = *v10;
            *v10 = *v28;
            *v28 = v29;
            do
            {
              v30 = v10[1];
              ++v10;
              v117 = v19;
              v118 = v30;
              v31 = *((_DWORD *)sub_1C504894C(*a3, &v118) + 2);
            }
            while (v31 < *((_DWORD *)sub_1C504894C(*a3, &v117) + 2));
            do
            {
              v32 = *--v28;
              v117 = v19;
              v118 = v32;
              v33 = *((_DWORD *)sub_1C504894C(*a3, &v118) + 2);
            }
            while (v33 >= *((_DWORD *)sub_1C504894C(*a3, &v117) + 2));
          }
          while (v10 < v28);
        }
        v34 = v10 - 1;
        if (v10 - 1 != v9)
          *v9 = *v34;
        *v34 = v19;
        a2 = v115;
        if (v22 < v23)
        {
LABEL_30:
          result = sub_1C562B4F4(v9, v10 - 1, a3, a4, a5 & 1);
          a5 = 0;
          continue;
        }
        v35 = sub_1C562C194(v9, v10 - 1, a3);
        result = sub_1C562C194(v10, v115, a3);
        if (!(_DWORD)result)
        {
          if (v35)
            continue;
          goto LABEL_30;
        }
        a2 = v10 - 1;
        if (!v35)
          goto LABEL_2;
        return result;
    }
  }
}

_QWORD *sub_1C562BEA4(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v12;
  unsigned int v13;
  _QWORD *result;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;

  sub_1C562C3A4(a1, a2, a3, a4, a6);
  v12 = *a5;
  v25 = *a4;
  v26 = v12;
  v13 = *((_DWORD *)sub_1C504894C(*a6, &v26) + 2);
  result = sub_1C504894C(*a6, &v25);
  if (v13 < *((_DWORD *)result + 2))
  {
    v15 = *a4;
    *a4 = *a5;
    *a5 = v15;
    v16 = *a4;
    v25 = *a3;
    v26 = v16;
    v17 = *((_DWORD *)sub_1C504894C(*a6, &v26) + 2);
    result = sub_1C504894C(*a6, &v25);
    if (v17 < *((_DWORD *)result + 2))
    {
      v18 = *a3;
      *a3 = *a4;
      *a4 = v18;
      v19 = *a3;
      v25 = *a2;
      v26 = v19;
      v20 = *((_DWORD *)sub_1C504894C(*a6, &v26) + 2);
      result = sub_1C504894C(*a6, &v25);
      if (v20 < *((_DWORD *)result + 2))
      {
        v21 = *a2;
        *a2 = *a3;
        *a3 = v21;
        v22 = *a2;
        v25 = *a1;
        v26 = v22;
        v23 = *((_DWORD *)sub_1C504894C(*a6, &v26) + 2);
        result = sub_1C504894C(*a6, &v25);
        if (v23 < *((_DWORD *)result + 2))
        {
          v24 = *a1;
          *a1 = *a2;
          *a2 = v24;
        }
      }
    }
  }
  return result;
}

_QWORD *sub_1C562C00C(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  unsigned int v12;
  _QWORD *result;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t v23;

  v8 = *a2;
  v22 = *a1;
  v23 = v8;
  v9 = *((_DWORD *)sub_1C504894C(*a4, &v23) + 2);
  v10 = sub_1C504894C(*a4, &v22);
  v11 = *a3;
  if (v9 >= *((_DWORD *)v10 + 2))
  {
    v22 = *a2;
    v23 = v11;
    v15 = *((_DWORD *)sub_1C504894C(*a4, &v23) + 2);
    result = sub_1C504894C(*a4, &v22);
    if (v15 < *((_DWORD *)result + 2))
    {
      v16 = *a2;
      *a2 = *a3;
      *a3 = v16;
      v17 = *a2;
      v22 = *a1;
      v23 = v17;
      v18 = *((_DWORD *)sub_1C504894C(*a4, &v23) + 2);
      result = sub_1C504894C(*a4, &v22);
      if (v18 < *((_DWORD *)result + 2))
      {
        v19 = *a1;
        *a1 = *a2;
        *a2 = v19;
      }
    }
  }
  else
  {
    v22 = *a2;
    v23 = v11;
    v12 = *((_DWORD *)sub_1C504894C(*a4, &v23) + 2);
    result = sub_1C504894C(*a4, &v22);
    v14 = *a1;
    if (v12 >= *((_DWORD *)result + 2))
    {
      *a1 = *a2;
      *a2 = v14;
      v20 = *a3;
      v22 = v14;
      v23 = v20;
      v21 = *((_DWORD *)sub_1C504894C(*a4, &v23) + 2);
      result = sub_1C504894C(*a4, &v22);
      if (v21 >= *((_DWORD *)result + 2))
        return result;
      v14 = *a2;
      *a2 = *a3;
    }
    else
    {
      *a1 = *a3;
    }
    *a3 = v14;
  }
  return result;
}

BOOL sub_1C562C194(uint64_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6;
  _BOOL8 result;
  uint64_t v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  unsigned int v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;

  v6 = a2 - a1;
  result = 1;
  switch(v6)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v8 = *(a2 - 1);
      v21 = *a1;
      v22 = v8;
      v9 = *((_DWORD *)sub_1C504894C(*a3, &v22) + 2);
      if (v9 < *((_DWORD *)sub_1C504894C(*a3, &v21) + 2))
      {
        v10 = *a1;
        *a1 = *(a2 - 1);
        *(a2 - 1) = v10;
      }
      return 1;
    case 3:
      sub_1C562C00C(a1, a1 + 1, a2 - 1, a3);
      return 1;
    case 4:
      sub_1C562C3A4(a1, a1 + 1, a1 + 2, a2 - 1, a3);
      return 1;
    case 5:
      sub_1C562BEA4(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1, a3);
      return 1;
    default:
      v11 = a1 + 2;
      sub_1C562C00C(a1, a1 + 1, a1 + 2, a3);
      v12 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v13 = 0;
      v14 = 0;
      break;
  }
  while (1)
  {
    v15 = *v12;
    v21 = *v11;
    v22 = v15;
    v16 = *((_DWORD *)sub_1C504894C(*a3, &v22) + 2);
    if (v16 < *((_DWORD *)sub_1C504894C(*a3, &v21) + 2))
    {
      v17 = *v12;
      v18 = v13;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v18 + 24) = *(uint64_t *)((char *)a1 + v18 + 16);
        if (v18 == -16)
          break;
        v21 = *(uint64_t *)((char *)a1 + v18 + 8);
        v22 = v17;
        v19 = *((_DWORD *)sub_1C504894C(*a3, &v22) + 2);
        v18 -= 8;
        if (v19 >= *((_DWORD *)sub_1C504894C(*a3, &v21) + 2))
        {
          v20 = (uint64_t *)((char *)a1 + v18 + 24);
          goto LABEL_12;
        }
      }
      v20 = a1;
LABEL_12:
      *v20 = v17;
      if (++v14 == 8)
        return v12 + 1 == a2;
    }
    v11 = v12;
    v13 += 8;
    if (++v12 == a2)
      return 1;
  }
}

_QWORD *sub_1C562C3A4(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4, uint64_t *a5)
{
  uint64_t v10;
  unsigned int v11;
  _QWORD *result;
  uint64_t v13;
  uint64_t v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;

  sub_1C562C00C(a1, a2, a3, a5);
  v10 = *a4;
  v20 = *a3;
  v21 = v10;
  v11 = *((_DWORD *)sub_1C504894C(*a5, &v21) + 2);
  result = sub_1C504894C(*a5, &v20);
  if (v11 < *((_DWORD *)result + 2))
  {
    v13 = *a3;
    *a3 = *a4;
    *a4 = v13;
    v14 = *a3;
    v20 = *a2;
    v21 = v14;
    v15 = *((_DWORD *)sub_1C504894C(*a5, &v21) + 2);
    result = sub_1C504894C(*a5, &v20);
    if (v15 < *((_DWORD *)result + 2))
    {
      v16 = *a2;
      *a2 = *a3;
      *a3 = v16;
      v17 = *a2;
      v20 = *a1;
      v21 = v17;
      v18 = *((_DWORD *)sub_1C504894C(*a5, &v21) + 2);
      result = sub_1C504894C(*a5, &v20);
      if (v18 < *((_DWORD *)result + 2))
      {
        v19 = *a1;
        *a1 = *a2;
        *a2 = v19;
      }
    }
  }
  return result;
}

void sub_1C562C4BC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  llvm::ValueSymbolTable *v23;
  uint64_t v24;

  if (a4)
  {
    v9 = (uint64_t *)(a2 + 40);
    v10 = 8 * a4;
    do
    {
      v11 = *a3;
      v12 = *(_QWORD **)(a1 + 16);
      v13 = sub_1C477672C((uint64_t)v12, *a3);
      v14 = v12[1];
      if (v14 == *v12)
        v15 = 20;
      else
        v15 = 16;
      if (v13 == (_QWORD *)(v14 + 8 * *(unsigned int *)((char *)v12 + v15)))
      {
        v16 = *(_QWORD *)(v11 + 40);
        if (v16)
        {
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(v16 + 40, (uint64_t ***)v11);
          v17 = *(_QWORD *)(v11 + 24);
          v18 = *(_QWORD **)(v11 + 32);
          *v18 = v17;
          *(_QWORD *)(v17 + 8) = v18;
          *(_QWORD *)(v11 + 24) = 0;
          *(_QWORD *)(v11 + 32) = 0;
        }
        if (a2)
        {
          v19 = *(_QWORD *)(a5 + 24);
          if (v19)
          {
            v24 = v11;
            (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v19 + 48))(v19, &v24);
          }
          else
          {
            *(_QWORD *)(v11 + 40) = a2;
            *(_WORD *)(a2 + 18) &= ~0x8000u;
            if ((*(_BYTE *)(v11 + 23) & 0x10) != 0)
            {
              v22 = *(_QWORD *)(a2 + 56);
              if (v22)
              {
                v23 = *(llvm::ValueSymbolTable **)(v22 + 104);
                if (v23)
                  llvm::ValueSymbolTable::reinsertValue(v23, (llvm::Value *)v11);
              }
            }
            v20 = *v9;
            *(_QWORD *)(v11 + 24) = *v9;
            *(_QWORD *)(v11 + 32) = v9;
            v21 = v11 + 24;
            *(_QWORD *)(v20 + 8) = v21;
            *v9 = v21;
          }
        }
      }
      ++a3;
      v10 -= 8;
    }
    while (v10);
  }
}

void sub_1C562C5F0(uint64_t ****a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t ***v6;
  uint64_t v7;
  llvm::LLVMContext *v8;
  llvm::LLVMContext *v9;
  uint64_t v10;
  uint64_t v11;

  if (a2)
  {
    v5 = 8 * a2;
    do
    {
      v6 = *a1++;
      v7 = operator new();
      *(_DWORD *)v7 = 6;
      *(_QWORD *)(v7 + 8) = 0;
      *(_DWORD *)(v7 + 16) = 0;
      *(_QWORD *)(v7 + 40) = a3;
      *(_QWORD *)(v7 + 24) = v7 + 40;
      *(_QWORD *)(v7 + 48) = 0;
      *(_QWORD *)(v7 + 32) = 0x200000001;
      *(_QWORD *)(v7 + 72) = v7 + 88;
      *(_QWORD *)(v7 + 80) = 0x400000000;
      *(_QWORD *)(v7 + 184) = v7 + 200;
      *(_QWORD *)(v7 + 192) = 0x100000000;
      *(_QWORD *)(v7 + 216) = v7 + 232;
      *(_QWORD *)(v7 + 224) = 0x1000000000;
      v10 = v7;
      v11 = v7;
      sub_1C5FD706C(v7, v6);
      sub_1C5FD3718(&v11, v8);
      llvm::ValueMapper::~ValueMapper((llvm::ValueMapper *)&v10, v9);
      v5 -= 8;
    }
    while (v5);
  }
}

void sub_1C562C6E8(uint64_t *a1, llvm::Instruction *this, unsigned int a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v15;
  llvm::Instruction *v16;
  int32x2_t *v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  llvm::Instruction **v22;
  llvm::Instruction *v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  uint64_t v31;
  int32x2_t *v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  llvm::ValueSymbolTable *v53;
  void *v54;
  uint64_t v55;
  unint64_t *v56;
  llvm::Instruction *v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  _QWORD v61[10];

  v61[8] = *MEMORY[0x1E0C80C00];
  v59 = v61;
  v61[0] = this;
  v60 = 0x800000001;
  v6 = 7;
  do
  {
    llvm::Instruction::clone(this);
    v8 = v7;
    v9 = v60;
    if (v60 >= (unint64_t)HIDWORD(v60))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v59, (uint64_t)v61, v60 + 1, 8);
      v9 = v60;
    }
    *((_QWORD *)v59 + v9) = v8;
    LODWORD(v60) = v60 + 1;
    --v6;
  }
  while (v6);
  for (i = 1; i != 8; ++i)
  {
    v11 = *((_QWORD *)v59 + i);
    v12 = *a1;
    v55 = 2;
    v56 = 0;
    v57 = this;
    if (this != (llvm::Instruction *)-8192 && this != (llvm::Instruction *)-4096 && this)
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v55);
    v54 = &unk_1E814DA10;
    v58 = v12 + (i << 6);
    v13 = sub_1C52E2ED8(v58, &v54);
    if (v57 != (llvm::Instruction *)-8192 && v57 != (llvm::Instruction *)-4096 && v57 != 0)
    {
      v15 = v55 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)(v55 & 0xFFFFFFFFFFFFFFF8) = v56;
      if (v56)
      {
        *v56 = *v56 & 7 | v15;
      }
      else
      {
        v16 = v57;
        v17 = ***(int32x2_t ****)v57;
        v18 = (unint64_t)v17[303];
        if (v18 <= v15)
        {
          v19 = v17[305].u32[0];
          if (v18 + 16 * v19 > v15)
          {
            v20 = v19 - 1;
            LODWORD(v21) = v20 & ((v57 >> 4) ^ (v57 >> 9));
            v22 = (llvm::Instruction **)(v18 + 16 * v21);
            v23 = *v22;
            if (v57 == *v22)
            {
LABEL_23:
              *v22 = (llvm::Instruction *)-8192;
              v17[304] = vadd_s32(v17[304], (int32x2_t)0x1FFFFFFFFLL);
              v16 = v57;
            }
            else
            {
              v24 = 1;
              while (v23 != (llvm::Instruction *)-4096)
              {
                v25 = v21 + v24++;
                v21 = v25 & v20;
                v23 = *(llvm::Instruction **)(v18 + 16 * v21);
                if (v57 == v23)
                {
                  v22 = (llvm::Instruction **)(v18 + 16 * v21);
                  goto LABEL_23;
                }
              }
            }
            *((_BYTE *)v16 + 17) &= ~1u;
          }
        }
      }
    }
    v26 = v13[7];
    if (v26 != v11)
    {
      if (v26 && v26 != -8192 && v26 != -4096)
      {
        v29 = v13[5] & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v29 = v13[6];
        v30 = (unint64_t *)v13[6];
        if (v30)
        {
          *v30 = *v30 & 7 | v29;
        }
        else
        {
          v31 = v13[7];
          v32 = ***(int32x2_t ****)v31;
          v33 = (unint64_t)v32[303];
          if (v33 <= v29)
          {
            v34 = v32[305].u32[0];
            if (v33 + 16 * v34 > v29)
            {
              v35 = v34 - 1;
              LODWORD(v36) = v35 & ((v31 >> 4) ^ (v31 >> 9));
              v37 = (uint64_t *)(v33 + 16 * v36);
              v38 = *v37;
              if (v31 == *v37)
              {
LABEL_46:
                *v37 = -8192;
                v32[304] = vadd_s32(v32[304], (int32x2_t)0x1FFFFFFFFLL);
                v31 = v13[7];
              }
              else
              {
                v39 = 1;
                while (v38 != -4096)
                {
                  v40 = v36 + v39++;
                  v36 = v40 & v35;
                  v38 = *(_QWORD *)(v33 + 16 * v36);
                  if (v31 == v38)
                  {
                    v37 = (uint64_t *)(v33 + 16 * v36);
                    goto LABEL_46;
                  }
                }
              }
              *(_BYTE *)(v31 + 17) &= ~1u;
            }
          }
        }
      }
      v13[7] = v11;
      if (v11 != -8192 && v11 != -4096 && v11)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v13 + 5));
    }
    v27 = a1[1] + 96 * i;
    v28 = *(unsigned int *)(v27 + 8);
    if (v28 >= *(unsigned int *)(v27 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1[1] + 96 * i, v27 + 16, v28 + 1, 8);
      v28 = *(unsigned int *)(v27 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v27 + 8 * v28) = v11;
    ++*(_DWORD *)(v27 + 8);
  }
  v41 = *((_QWORD *)this + 5);
  if (v41)
  {
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(v41 + 40, (uint64_t ***)this);
    v42 = *((_QWORD *)this + 3);
    v43 = (_QWORD *)*((_QWORD *)this + 4);
    *v43 = v42;
    *(_QWORD *)(v42 + 8) = v43;
    *((_QWORD *)this + 3) = 0;
    *((_QWORD *)this + 4) = 0;
  }
  v44 = 0;
  v45 = a3 + 8;
  v46 = 8 * a3;
  v47 = a3;
  do
  {
    v48 = *(_QWORD *)(a1[2] + v46 + 8 * v44);
    v49 = *((_QWORD *)v59 + v44);
    *(_QWORD *)(v49 + 40) = v48;
    *(_WORD *)(v48 + 18) &= ~0x8000u;
    if ((*(_BYTE *)(v49 + 23) & 0x10) != 0)
    {
      v52 = *(_QWORD *)(v48 + 56);
      if (v52)
      {
        v53 = *(llvm::ValueSymbolTable **)(v52 + 104);
        if (v53)
          llvm::ValueSymbolTable::reinsertValue(v53, (llvm::Value *)v49);
      }
    }
    v50 = *(_QWORD *)(v48 + 40);
    *(_QWORD *)(v49 + 24) = v50;
    *(_QWORD *)(v49 + 32) = v48 + 40;
    v51 = v49 + 24;
    *(_QWORD *)(v50 + 8) = v51;
    *(_QWORD *)(v48 + 40) = v51;
    ++v44;
  }
  while (v47 + v44 < v45);
  if (v59 != v61)
    free(v59);
}

void sub_1C562CB40()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C562CB54(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E8171928;
  result[1] = v3;
  return result;
}

uint64_t sub_1C562CB88(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E8171928;
  a2[1] = v2;
  return result;
}

void sub_1C562CBA4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  llvm::ValueSymbolTable *v8;

  v2 = *a2;
  v3 = **(_QWORD **)(a1 + 8);
  *(_QWORD *)(v2 + 40) = v3;
  *(_WORD *)(v3 + 18) &= ~0x8000u;
  if ((*(_BYTE *)(v2 + 23) & 0x10) != 0)
  {
    v7 = *(_QWORD *)(v3 + 56);
    if (v7)
    {
      v8 = *(llvm::ValueSymbolTable **)(v7 + 104);
      if (v8)
        llvm::ValueSymbolTable::reinsertValue(v8, (llvm::Value *)v2);
    }
  }
  v5 = *(_QWORD *)(v3 + 40);
  v4 = (_QWORD *)(v3 + 40);
  *(_QWORD *)(v2 + 24) = v5;
  *(_QWORD *)(v2 + 32) = v4;
  v6 = v2 + 24;
  *(_QWORD *)(v5 + 8) = v6;
  *v4 = v6;
}

void sub_1C562CC0C(uint64_t *a1, llvm::Instruction *this, unsigned int a3)
{
  int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  unint64_t v15;
  llvm::Instruction *v16;
  int32x2_t *v17;
  unint64_t v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  llvm::Instruction **v22;
  llvm::Instruction *v23;
  int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unint64_t *v30;
  uint64_t v31;
  int32x2_t *v32;
  unint64_t v33;
  uint64_t v34;
  unsigned int v35;
  uint64_t v36;
  uint64_t *v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  llvm::ValueSymbolTable *v53;
  void *v54;
  uint64_t v55;
  unint64_t *v56;
  llvm::Instruction *v57;
  uint64_t v58;
  void *v59;
  uint64_t v60;
  _QWORD v61[5];

  v61[4] = *MEMORY[0x1E0C80C00];
  v59 = v61;
  v61[0] = this;
  v60 = 0x400000001;
  v6 = 3;
  do
  {
    llvm::Instruction::clone(this);
    v8 = v7;
    v9 = v60;
    if (v60 >= (unint64_t)HIDWORD(v60))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v59, (uint64_t)v61, v60 + 1, 8);
      v9 = v60;
    }
    *((_QWORD *)v59 + v9) = v8;
    LODWORD(v60) = v60 + 1;
    --v6;
  }
  while (v6);
  for (i = 1; i != 4; ++i)
  {
    v11 = *((_QWORD *)v59 + i);
    v12 = *a1;
    v55 = 2;
    v56 = 0;
    v57 = this;
    if (this != (llvm::Instruction *)-8192 && this != (llvm::Instruction *)-4096 && this)
      llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v55);
    v54 = &unk_1E814DA10;
    v58 = v12 + (i << 6);
    v13 = sub_1C52E2ED8(v58, &v54);
    if (v57 != (llvm::Instruction *)-8192 && v57 != (llvm::Instruction *)-4096 && v57 != 0)
    {
      v15 = v55 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)(v55 & 0xFFFFFFFFFFFFFFF8) = v56;
      if (v56)
      {
        *v56 = *v56 & 7 | v15;
      }
      else
      {
        v16 = v57;
        v17 = ***(int32x2_t ****)v57;
        v18 = (unint64_t)v17[303];
        if (v18 <= v15)
        {
          v19 = v17[305].u32[0];
          if (v18 + 16 * v19 > v15)
          {
            v20 = v19 - 1;
            LODWORD(v21) = v20 & ((v57 >> 4) ^ (v57 >> 9));
            v22 = (llvm::Instruction **)(v18 + 16 * v21);
            v23 = *v22;
            if (v57 == *v22)
            {
LABEL_23:
              *v22 = (llvm::Instruction *)-8192;
              v17[304] = vadd_s32(v17[304], (int32x2_t)0x1FFFFFFFFLL);
              v16 = v57;
            }
            else
            {
              v24 = 1;
              while (v23 != (llvm::Instruction *)-4096)
              {
                v25 = v21 + v24++;
                v21 = v25 & v20;
                v23 = *(llvm::Instruction **)(v18 + 16 * v21);
                if (v57 == v23)
                {
                  v22 = (llvm::Instruction **)(v18 + 16 * v21);
                  goto LABEL_23;
                }
              }
            }
            *((_BYTE *)v16 + 17) &= ~1u;
          }
        }
      }
    }
    v26 = v13[7];
    if (v26 != v11)
    {
      if (v26 && v26 != -8192 && v26 != -4096)
      {
        v29 = v13[5] & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v29 = v13[6];
        v30 = (unint64_t *)v13[6];
        if (v30)
        {
          *v30 = *v30 & 7 | v29;
        }
        else
        {
          v31 = v13[7];
          v32 = ***(int32x2_t ****)v31;
          v33 = (unint64_t)v32[303];
          if (v33 <= v29)
          {
            v34 = v32[305].u32[0];
            if (v33 + 16 * v34 > v29)
            {
              v35 = v34 - 1;
              LODWORD(v36) = v35 & ((v31 >> 4) ^ (v31 >> 9));
              v37 = (uint64_t *)(v33 + 16 * v36);
              v38 = *v37;
              if (v31 == *v37)
              {
LABEL_46:
                *v37 = -8192;
                v32[304] = vadd_s32(v32[304], (int32x2_t)0x1FFFFFFFFLL);
                v31 = v13[7];
              }
              else
              {
                v39 = 1;
                while (v38 != -4096)
                {
                  v40 = v36 + v39++;
                  v36 = v40 & v35;
                  v38 = *(_QWORD *)(v33 + 16 * v36);
                  if (v31 == v38)
                  {
                    v37 = (uint64_t *)(v33 + 16 * v36);
                    goto LABEL_46;
                  }
                }
              }
              *(_BYTE *)(v31 + 17) &= ~1u;
            }
          }
        }
      }
      v13[7] = v11;
      if (v11 != -8192 && v11 != -4096 && v11)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v13 + 5));
    }
    v27 = a1[1] + 96 * i;
    v28 = *(unsigned int *)(v27 + 8);
    if (v28 >= *(unsigned int *)(v27 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1[1] + 96 * i, v27 + 16, v28 + 1, 8);
      v28 = *(unsigned int *)(v27 + 8);
    }
    *(_QWORD *)(*(_QWORD *)v27 + 8 * v28) = v11;
    ++*(_DWORD *)(v27 + 8);
  }
  v41 = *((_QWORD *)this + 5);
  if (v41)
  {
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(v41 + 40, (uint64_t ***)this);
    v42 = *((_QWORD *)this + 3);
    v43 = (_QWORD *)*((_QWORD *)this + 4);
    *v43 = v42;
    *(_QWORD *)(v42 + 8) = v43;
    *((_QWORD *)this + 3) = 0;
    *((_QWORD *)this + 4) = 0;
  }
  v44 = 0;
  v45 = a3 + 4;
  v46 = 8 * a3;
  v47 = a3;
  do
  {
    v48 = *(_QWORD *)(a1[2] + v46 + 8 * v44);
    v49 = *((_QWORD *)v59 + v44);
    *(_QWORD *)(v49 + 40) = v48;
    *(_WORD *)(v48 + 18) &= ~0x8000u;
    if ((*(_BYTE *)(v49 + 23) & 0x10) != 0)
    {
      v52 = *(_QWORD *)(v48 + 56);
      if (v52)
      {
        v53 = *(llvm::ValueSymbolTable **)(v52 + 104);
        if (v53)
          llvm::ValueSymbolTable::reinsertValue(v53, (llvm::Value *)v49);
      }
    }
    v50 = *(_QWORD *)(v48 + 40);
    *(_QWORD *)(v49 + 24) = v50;
    *(_QWORD *)(v49 + 32) = v48 + 40;
    v51 = v49 + 24;
    *(_QWORD *)(v50 + 8) = v51;
    *(_QWORD *)(v48 + 40) = v51;
    ++v44;
  }
  while (v47 + v44 < v45);
  if (v59 != v61)
    free(v59);
}

void sub_1C562D064()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C562D078(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E8171970;
  result[1] = v3;
  return result;
}

uint64_t sub_1C562D0AC(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E8171970;
  a2[1] = v2;
  return result;
}

void sub_1C562D0C8(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  llvm::ValueSymbolTable *v8;

  v2 = *a2;
  v3 = **(_QWORD **)(a1 + 8);
  *(_QWORD *)(v2 + 40) = v3;
  *(_WORD *)(v3 + 18) &= ~0x8000u;
  if ((*(_BYTE *)(v2 + 23) & 0x10) != 0)
  {
    v7 = *(_QWORD *)(v3 + 56);
    if (v7)
    {
      v8 = *(llvm::ValueSymbolTable **)(v7 + 104);
      if (v8)
        llvm::ValueSymbolTable::reinsertValue(v8, (llvm::Value *)v2);
    }
  }
  v5 = *(_QWORD *)(v3 + 40);
  v4 = (_QWORD *)(v3 + 40);
  *(_QWORD *)(v2 + 24) = v5;
  *(_QWORD *)(v2 + 32) = v4;
  v6 = v2 + 24;
  *(_QWORD *)(v5 + 8) = v6;
  *v4 = v6;
}

void sub_1C562D130(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v5;
  uint64_t ***v6;
  uint64_t v7;
  llvm::LLVMContext *v8;
  llvm::LLVMContext *v9;
  uint64_t v10;
  uint64_t v11;

  v2 = a1 + 40;
  v3 = *(_QWORD *)(a1 + 48);
  if (v3 != a1 + 40)
  {
    do
    {
      v5 = *(_QWORD *)(v3 + 8);
      if (v3)
        v6 = (uint64_t ***)(v3 - 24);
      else
        v6 = 0;
      v7 = operator new();
      *(_DWORD *)v7 = 6;
      *(_QWORD *)(v7 + 8) = 0;
      *(_DWORD *)(v7 + 16) = 0;
      *(_QWORD *)(v7 + 40) = a2;
      *(_QWORD *)(v7 + 24) = v7 + 40;
      *(_QWORD *)(v7 + 48) = 0;
      *(_QWORD *)(v7 + 32) = 0x200000001;
      *(_QWORD *)(v7 + 72) = v7 + 88;
      *(_QWORD *)(v7 + 80) = 0x400000000;
      *(_QWORD *)(v7 + 184) = v7 + 200;
      *(_QWORD *)(v7 + 192) = 0x100000000;
      *(_QWORD *)(v7 + 216) = v7 + 232;
      *(_QWORD *)(v7 + 224) = 0x1000000000;
      v10 = v7;
      v11 = v7;
      sub_1C5FD706C(v7, v6);
      sub_1C5FD3718(&v11, v8);
      llvm::ValueMapper::~ValueMapper((llvm::ValueMapper *)&v10, v9);
      v3 = v5;
    }
    while (v5 != v2);
  }
}

void sub_1C562D23C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, llvm::Type *a5, llvm::DSOLocalEquivalent **a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v9;
  uint64_t v10;
  int v11;
  unint64_t v12;
  uint64_t *v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  llvm::UndefValue *v21;
  uint64_t v22;
  llvm::Value *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  __int128 v31;
  __int16 v32;
  void *v33;
  uint64_t v34;
  _QWORD v35[10];

  v35[8] = *MEMORY[0x1E0C80C00];
  v6 = a1 + 40;
  v7 = *(_QWORD *)(a1 + 48);
  if (v7 != a1 + 40)
  {
    do
    {
      v9 = *(_QWORD *)(v7 + 8);
      if (v7)
        v10 = v7 - 24;
      else
        v10 = 0;
      if (!*(_QWORD *)(v10 + 8) && llvm::wouldInstructionBeTriviallyDead(v10, 0))
      {
        v28 = v10 + 24;
        if (!v7)
          v28 = 0;
        v23 = (llvm::Value *)(v28 - 24);
        if (v7)
          v24 = v28 - 24;
        else
          v24 = 0;
        goto LABEL_23;
      }
      v29 = a2;
      v30 = 0u;
      v31 = 0u;
      v32 = 257;
      v11 = *(_DWORD *)(v10 + 20);
      if ((v11 & 0x40000000) != 0)
      {
        v13 = *(uint64_t **)(v10 - 8);
        v12 = v11 & 0x7FFFFFF;
      }
      else
      {
        v12 = v11 & 0x7FFFFFF;
        v13 = (uint64_t *)(v10 - 32 * v12);
      }
      v33 = v35;
      v34 = 0x800000000;
      if (v12 >= 9)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v33, (uint64_t)v35, v12, 8);
        v14 = v34;
        v16 = v33;
        v15 = v34;
      }
      else
      {
        v14 = 0;
        if (!v12)
        {
          v20 = v35;
          goto LABEL_15;
        }
        v15 = 0;
        v16 = v35;
      }
      v17 = 32 * v12;
      v18 = &v16[v15];
      do
      {
        v19 = *v13;
        v13 += 4;
        *v18++ = v19;
        v17 -= 32;
      }
      while (v17);
      v20 = v33;
LABEL_15:
      LODWORD(v34) = v14 + v12;
      v21 = llvm::SimplifyInstructionWithOperands((llvm *)v10, (uint64_t)v20, (v14 + v12), (uint64_t)&v29, a5, a6);
      if (v33 != v35)
      {
        free(v33);
        if (!v21)
          goto LABEL_24;
LABEL_17:
        v22 = v10 + 24;
        if (!v7)
          v22 = 0;
        v23 = (llvm::Value *)(v22 - 24);
        if (v7)
          v24 = v22 - 24;
        else
          v24 = 0;
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v10, v21, (llvm::Value *)1);
LABEL_23:
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(v6, (uint64_t ***)v24);
        v25 = *(_QWORD *)(v24 + 24);
        v26 = *(_QWORD **)(v24 + 32);
        v27 = (_QWORD *)(v24 + 24);
        *v26 = v25;
        *(_QWORD *)(v25 + 8) = v26;
        *v27 = 0;
        v27[1] = 0;
        llvm::Value::deleteValue(v23);
        goto LABEL_24;
      }
      if (v21)
        goto LABEL_17;
LABEL_24:
      v7 = v9;
    }
    while (v9 != v6);
  }
}

void sub_1C562D448(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, _QWORD *a5, unsigned int a6, char a7)
{
  uint64_t i;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  int v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD *v34;
  unint64_t v35;
  int32x2_t ****v36;
  int32x2_t *v37;
  unint64_t v38;
  uint64_t v39;
  unsigned int v40;
  uint64_t v41;
  int32x2_t *****v42;
  int32x2_t ****v43;
  int v44;
  int v45;
  uint64_t v46;
  unint64_t v47;
  unint64_t *v48;
  uint64_t v49;
  int32x2_t *v50;
  unint64_t v51;
  uint64_t v52;
  unsigned int v53;
  uint64_t v54;
  uint64_t *v55;
  uint64_t v56;
  int v57;
  int v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v64;
  uint64_t *v65;
  unsigned int v66;
  unsigned int v67;
  uint64_t v68;
  uint64_t *v69;
  uint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  unint64_t *v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t j;
  uint64_t v78;
  int v79;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t k;
  uint64_t v85;
  int v86;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t m;
  uint64_t v92;
  int v93;
  uint64_t v95;
  uint64_t *v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  char *v100;
  uint64_t v101;
  unint64_t *v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t n;
  uint64_t v107;
  int v108;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  _QWORD *v114;
  _QWORD *v115;
  _QWORD *v116;
  uint64_t v117;
  llvm::ConstantInt **v118;
  llvm::Value **v119;
  int32x2_t ****v120;
  _QWORD *v121;
  unint64_t v122;
  int32x2_t ****v123;
  int32x2_t *v124;
  unint64_t v125;
  uint64_t v126;
  unsigned int v127;
  uint64_t v128;
  int32x2_t *****v129;
  int32x2_t ****v130;
  int v131;
  int v132;
  llvm::Value **v133;
  llvm::ConstantInt **v134;
  llvm::Value **v135;
  int32x2_t ****v136;
  _QWORD *v137;
  unint64_t v138;
  int32x2_t ****v139;
  int32x2_t *v140;
  unint64_t v141;
  uint64_t v142;
  unsigned int v143;
  uint64_t v144;
  int32x2_t *****v145;
  int32x2_t ****v146;
  int v147;
  int v148;
  llvm::Value **v149;
  llvm::Instruction **v150;
  llvm::Instruction *v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  uint64_t v155;
  unsigned int *v156;
  uint64_t v157;
  void **v158;
  llvm::Instruction **v159;
  uint64_t v160;
  uint64_t v161;
  llvm::Instruction **v162;
  uint64_t v163;
  llvm::LLVMContext *v164;
  llvm::LLVMContext *v165;
  uint64_t ii;
  uint64_t v167;
  BOOL v168;
  _QWORD *v169;
  uint64_t *v170;
  uint64_t v171;
  llvm::LLVMContext *v172;
  llvm::LLVMContext *v173;
  uint64_t v174;
  _QWORD *v175;
  unsigned int v176;
  int32x2_t ****v177;
  _QWORD *v179;
  unint64_t v180;
  int32x2_t ****v181;
  int32x2_t *v182;
  unint64_t v183;
  uint64_t v184;
  unsigned int v185;
  uint64_t v186;
  int32x2_t *****v187;
  int32x2_t ****v188;
  int v189;
  int v190;
  uint64_t v191;
  _QWORD *v192;
  unint64_t v193;
  int32x2_t ****v194;
  int32x2_t *v195;
  unint64_t v196;
  uint64_t v197;
  unsigned int v198;
  uint64_t v199;
  int32x2_t *****v200;
  int32x2_t ****v201;
  int v202;
  int v203;
  uint64_t v204;
  _QWORD *v205;
  uint64_t v206;
  uint64_t v207;
  llvm::ValueSymbolTable *v208;
  unint64_t v209;
  unint64_t *v210;
  uint64_t v211;
  int32x2_t *v212;
  unint64_t v213;
  uint64_t v214;
  unsigned int v215;
  uint64_t v216;
  uint64_t *v217;
  uint64_t v218;
  int v219;
  int v220;
  unint64_t v221;
  unint64_t *v222;
  uint64_t v223;
  int32x2_t *v224;
  unint64_t v225;
  uint64_t v226;
  unsigned int v227;
  uint64_t v228;
  uint64_t *v229;
  uint64_t v230;
  int v231;
  int v232;
  unint64_t v233;
  unint64_t *v234;
  uint64_t v235;
  int32x2_t *v236;
  unint64_t v237;
  uint64_t v238;
  unsigned int v239;
  uint64_t v240;
  uint64_t *v241;
  uint64_t v242;
  int v243;
  int v244;
  unint64_t v245;
  unint64_t *v246;
  uint64_t v247;
  int32x2_t *v248;
  unint64_t v249;
  uint64_t v250;
  unsigned int v251;
  uint64_t v252;
  uint64_t *v253;
  uint64_t v254;
  int v255;
  int v256;
  llvm::Instruction **v257;
  uint64_t v258;
  llvm::Instruction *v259;
  llvm::Instruction *v260;
  llvm::Instruction *v261;
  llvm::Instruction **v262;
  llvm::Instruction *v263;
  uint64_t v264;
  llvm::Instruction *v265;
  uint64_t *v266;
  uint64_t *v267;
  uint64_t v268;
  llvm::Instruction *v269;
  _QWORD *v270;
  _QWORD *v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  llvm::Value *v275;
  uint64_t v276;
  _QWORD *v277;
  unint64_t v278;
  int32x2_t ****v279;
  int32x2_t *v280;
  unint64_t v281;
  uint64_t v282;
  unsigned int v283;
  uint64_t v284;
  int32x2_t *****v285;
  int32x2_t ****v286;
  int v287;
  int v288;
  llvm::Value *v289;
  uint64_t v290;
  llvm::LLVMContext *v291;
  llvm::LLVMContext *v292;
  unint64_t v293;
  unint64_t *v294;
  uint64_t v295;
  int32x2_t *v296;
  unint64_t v297;
  uint64_t v298;
  unsigned int v299;
  uint64_t v300;
  uint64_t *v301;
  uint64_t v302;
  int v303;
  int v304;
  uint64_t v305;
  llvm::ValueSymbolTable *v306;
  uint64_t v307;
  _QWORD *v308;
  uint64_t v309;
  uint64_t v310;
  llvm::ValueSymbolTable *v311;
  _QWORD *v312;
  uint64_t v313;
  uint64_t *v315;
  uint64_t v316;
  uint64_t v318;
  llvm::Instruction **v321;
  uint64_t *v322;
  uint64_t *v323;
  uint64_t v324;
  int v325;
  _BYTE v326[64];
  uint64_t *v327;
  uint64_t *v328;
  uint64_t v329;
  int v330;
  _BYTE v331[64];
  _QWORD *v332;
  unint64_t v333;
  uint64_t v334;
  int32x2_t ****v335;
  _QWORD v336[16];
  uint64_t v337;
  void *v338;
  uint64_t v339;
  unint64_t *v340;
  int32x2_t ****v341;
  uint64_t v342;
  void *v343;
  uint64_t v344;
  _BYTE v345[40];
  void *v346;
  uint64_t v347;
  _BYTE v348[40];
  void *v349;
  uint64_t v350;
  _BYTE v351[80];
  void *v352;
  uint64_t v353;
  _BYTE v354[80];
  uint64_t v355;
  _QWORD *v356;
  unsigned int v357;
  uint64_t v358;

  v358 = *MEMORY[0x1E0C80C00];
  v355 = 1;
  for (i = 8; i != 136; i += 16)
    *(uint64_t *)((char *)&v355 + i) = -4096;
  v11 = a5[1];
  v12 = v11 + 40;
  v13 = *(_QWORD *)(v11 + 48);
  if (v13 != v11 + 40)
  {
    while (1)
    {
      if (v13)
        v14 = v13 - 24;
      else
        v14 = 0;
      if (*(_BYTE *)(v14 + 16) != 83)
      {
LABEL_78:
        v11 = a5[1];
        v12 = *(_QWORD *)(v11 + 48);
        break;
      }
      if (v14 != a5[7] && v14 != a5[8])
      {
        v16 = *(_DWORD *)(v14 + 20);
        v17 = v16 & 0x7FFFFFF;
        if ((v16 & 0x7FFFFFF) != 0)
        {
          v18 = 0;
          while (1)
          {
            v19 = v14 - 32 * v17;
            if ((v16 & 0x40000000) != 0)
              v19 = *(_QWORD *)(v14 - 8);
            if (*(_QWORD *)(v19 + 32 * *(unsigned int *)(v14 + 60) + 8 * v18) == a5[5])
              break;
            if (v17 == ++v18)
              goto LABEL_21;
          }
        }
        else
        {
LABEL_21:
          LODWORD(v18) = -1;
        }
        if ((v16 & 0x40000000) != 0)
          v20 = *(_QWORD *)(v14 - 8);
        else
          v20 = v14 - 32 * v17;
        v332 = *(_QWORD **)(v20 + 32 * v18);
        sub_1C6280A28(&v355, &v332)[1] = v14;
        v21 = *(unsigned int *)(a3 + 16);
        if (!(_DWORD)v21)
          goto LABEL_30;
        v22 = *(_QWORD *)a3;
        v23 = ((_DWORD)v21 - 1) & ((v14 >> 4) ^ (v14 >> 9));
        v24 = *(_QWORD *)a3 + (v23 << 6);
        v25 = *(_QWORD *)(v24 + 24);
        if (v14 != v25)
        {
          v26 = 1;
          while (v25 != -4096)
          {
            v27 = v23 + v26++;
            v23 = v27 & (v21 - 1);
            v24 = v22 + (v23 << 6);
            v25 = *(_QWORD *)(v24 + 24);
            if (v14 == v25)
              goto LABEL_29;
          }
LABEL_30:
          v28 = *(_DWORD *)(v14 + 20);
          v29 = v28 & 0x7FFFFFF;
          if ((v28 & 0x7FFFFFF) != 0)
          {
            v30 = 0;
            while (1)
            {
              v31 = v14 - 32 * v29;
              if ((v28 & 0x40000000) != 0)
                v31 = *(_QWORD *)(v14 - 8);
              if (*(_QWORD *)(v31 + 32 * *(unsigned int *)(v14 + 60) + 8 * v30) == *a5)
                break;
              if (v29 == ++v30)
                goto LABEL_36;
            }
          }
          else
          {
LABEL_36:
            LODWORD(v30) = -1;
          }
          if ((v28 & 0x40000000) != 0)
            v32 = *(_QWORD *)(v14 - 8);
          else
            v32 = v14 - 32 * v29;
          v33 = *(_QWORD *)(v32 + 32 * v30);
          v333 = 2;
          v334 = 0;
          v335 = (int32x2_t ****)v14;
          if (v14 != -8192 && v14 != -4096 && v14)
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v333);
          v332 = &unk_1E814DA10;
          v336[0] = a3;
          v34 = sub_1C52E2ED8(a3, &v332);
          if (v335 != (int32x2_t ****)-8192 && v335 != (int32x2_t ****)-4096 && v335)
          {
            v35 = v333 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)(v333 & 0xFFFFFFFFFFFFFFF8) = v334;
            if (v334)
            {
              *(_QWORD *)v334 = *(_QWORD *)v334 & 7 | v35;
            }
            else
            {
              v36 = v335;
              v37 = ***v335;
              v38 = (unint64_t)v37[303];
              if (v38 <= v35)
              {
                v39 = v37[305].u32[0];
                if (v38 + 16 * v39 > v35)
                {
                  v40 = v39 - 1;
                  LODWORD(v41) = v40 & ((v335 >> 4) ^ (v335 >> 9));
                  v42 = (int32x2_t *****)(v38 + 16 * v41);
                  v43 = *v42;
                  if (v335 == *v42)
                  {
LABEL_54:
                    *v42 = (int32x2_t ****)-8192;
                    v37[304] = vadd_s32(v37[304], (int32x2_t)0x1FFFFFFFFLL);
                    v36 = v335;
                  }
                  else
                  {
                    v44 = 1;
                    while (v43 != (int32x2_t ****)-4096)
                    {
                      v45 = v41 + v44++;
                      v41 = v45 & v40;
                      v43 = *(int32x2_t *****)(v38 + 16 * v41);
                      if (v335 == v43)
                      {
                        v42 = (int32x2_t *****)(v38 + 16 * v41);
                        goto LABEL_54;
                      }
                    }
                  }
                  *((_BYTE *)v36 + 17) &= ~1u;
                }
              }
            }
          }
          v46 = v34[7];
          if (v46 != v33)
          {
            if (v46 && v46 != -8192 && v46 != -4096)
            {
              v47 = v34[5] & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v47 = v34[6];
              v48 = (unint64_t *)v34[6];
              if (v48)
              {
                *v48 = *v48 & 7 | v47;
              }
              else
              {
                v49 = v34[7];
                v50 = ***(int32x2_t ****)v49;
                v51 = (unint64_t)v50[303];
                if (v51 <= v47)
                {
                  v52 = v50[305].u32[0];
                  if (v51 + 16 * v52 > v47)
                  {
                    v53 = v52 - 1;
                    LODWORD(v54) = v53 & ((v49 >> 4) ^ (v49 >> 9));
                    v55 = (uint64_t *)(v51 + 16 * v54);
                    v56 = *v55;
                    if (v49 == *v55)
                    {
LABEL_73:
                      *v55 = -8192;
                      v50[304] = vadd_s32(v50[304], (int32x2_t)0x1FFFFFFFFLL);
                      v49 = v34[7];
                    }
                    else
                    {
                      v57 = 1;
                      while (v56 != -4096)
                      {
                        v58 = v54 + v57++;
                        v54 = v58 & v53;
                        v56 = *(_QWORD *)(v51 + 16 * v54);
                        if (v49 == v56)
                        {
                          v55 = (uint64_t *)(v51 + 16 * v54);
                          goto LABEL_73;
                        }
                      }
                    }
                    *(_BYTE *)(v49 + 17) &= ~1u;
                  }
                }
              }
            }
            v34[7] = v33;
            if (v33 != -8192 && v33 != -4096 && v33)
              llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v34 + 5));
          }
          goto LABEL_13;
        }
LABEL_29:
        if (v24 == v22 + (v21 << 6))
          goto LABEL_30;
      }
LABEL_13:
      v13 = *(_QWORD *)(v13 + 8);
      if (v13 == v12)
        goto LABEL_78;
    }
  }
  v352 = v354;
  v353 = 0xA00000000;
  v332 = v336;
  v333 = (unint64_t)v336;
  v334 = 16;
  LODWORD(v335) = 0;
  v349 = v351;
  v350 = 0xA00000000;
  v59 = (uint64_t *)v331;
  v327 = (uint64_t *)v331;
  v328 = (uint64_t *)v331;
  v329 = 8;
  v330 = 0;
  v322 = (uint64_t *)v326;
  v323 = (uint64_t *)v326;
  v324 = 8;
  v325 = 0;
  v346 = v348;
  v347 = 0x500000000;
  v343 = v345;
  v60 = v11 + 40;
  v344 = 0x500000000;
  if (v12 == v11 + 40)
  {
    v66 = 0;
    v67 = 8;
    v65 = (uint64_t *)v331;
  }
  else
  {
    do
    {
      if (v12)
        v61 = v12 - 24;
      else
        v61 = 0;
      v62 = *(unsigned __int8 *)(v61 + 16);
      if (v62 != 83 && (v62 - 29) >= 0xB)
      {
        v64 = v353;
        if (v353 >= (unint64_t)HIDWORD(v353))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v352, (uint64_t)v354, v353 + 1, 8);
          v64 = v353;
        }
        *((_QWORD *)v352 + v64) = v61;
        LODWORD(v353) = v353 + 1;
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v327, v61);
      }
      v12 = *(_QWORD *)(v12 + 8);
    }
    while (v12 != v60);
    v59 = v327;
    v65 = v328;
    v66 = HIDWORD(v329);
    v67 = v329;
  }
  if (v65 == v59)
    v68 = v66;
  else
    v68 = v67;
  v69 = v65;
  if ((_DWORD)v68)
  {
    v70 = 8 * v68;
    v69 = v65;
    while ((unint64_t)*v69 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v69;
      v70 -= 8;
      if (!v70)
        goto LABEL_108;
    }
  }
  v71 = &v65[v68];
  if (v69 != v71)
  {
    v72 = *v69;
LABEL_104:
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v332, v72);
    v73 = (unint64_t *)(v69 + 1);
    while (v73 != (unint64_t *)v71)
    {
      v74 = *v73++;
      v72 = v74;
      if (v74 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v69 = (uint64_t *)(v73 - 1);
        goto LABEL_104;
      }
    }
  }
LABEL_108:
  v75 = a5[2];
  v76 = v75 + 40;
  for (j = *(_QWORD *)(v75 + 48); j != v76; j = *(_QWORD *)(j + 8))
  {
    if (j)
      v78 = j - 24;
    else
      v78 = 0;
    v79 = *(unsigned __int8 *)(v78 + 16);
    if (v79 != 83 && (v79 - 29) >= 0xB)
    {
      v81 = v353;
      if (v353 >= (unint64_t)HIDWORD(v353))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v352, (uint64_t)v354, v353 + 1, 8);
        v81 = v353;
      }
      *((_QWORD *)v352 + v81) = v78;
      LODWORD(v353) = v353 + 1;
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v332, v78);
    }
  }
  v82 = a5[4];
  v83 = v82 + 40;
  for (k = *(_QWORD *)(v82 + 48); k != v83; k = *(_QWORD *)(k + 8))
  {
    if (k)
      v85 = k - 24;
    else
      v85 = 0;
    v86 = *(unsigned __int8 *)(v85 + 16);
    if (v86 != 83 && (v86 - 29) >= 0xB)
    {
      v88 = v353;
      if (v353 >= (unint64_t)HIDWORD(v353))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v352, (uint64_t)v354, v353 + 1, 8);
        v88 = v353;
      }
      *((_QWORD *)v352 + v88) = v85;
      LODWORD(v353) = v353 + 1;
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v332, v85);
    }
  }
  v89 = a5[5];
  v90 = v89 + 40;
  for (m = *(_QWORD *)(v89 + 48); m != v90; m = *(_QWORD *)(m + 8))
  {
    if (m)
      v92 = m - 24;
    else
      v92 = 0;
    v93 = *(unsigned __int8 *)(v92 + 16);
    if (v93 != 83 && (v93 - 29) >= 0xB)
    {
      v95 = v353;
      if (v353 >= (unint64_t)HIDWORD(v353))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v352, (uint64_t)v354, v353 + 1, 8);
        v95 = v353;
      }
      *((_QWORD *)v352 + v95) = v92;
      LODWORD(v353) = v353 + 1;
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v322, v92);
    }
  }
  if (v323 == v322)
    v96 = (uint64_t *)((char *)&v324 + 4);
  else
    v96 = &v324;
  v97 = *(unsigned int *)v96;
  if ((_DWORD)v97)
  {
    v98 = 8 * v97;
    v99 = v323;
    while ((unint64_t)*v99 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v99;
      v98 -= 8;
      if (!v98)
        goto LABEL_165;
    }
  }
  else
  {
    v99 = v323;
  }
  v100 = (char *)&v323[v97];
  if (v99 != (uint64_t *)v100)
  {
    v101 = *v99;
LABEL_161:
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v332, v101);
    v102 = (unint64_t *)(v99 + 1);
    while (v102 != (unint64_t *)v100)
    {
      v103 = *v102++;
      v101 = v103;
      if (v103 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v99 = (uint64_t *)(v102 - 1);
        goto LABEL_161;
      }
    }
  }
LABEL_165:
  v104 = a5[6];
  v105 = v104 + 40;
  for (n = *(_QWORD *)(v104 + 48); n != v105; n = *(_QWORD *)(n + 8))
  {
    if (n)
      v107 = n - 24;
    else
      v107 = 0;
    v108 = *(unsigned __int8 *)(v107 + 16);
    if (v108 != 83 && (v108 - 29) >= 0xB)
    {
      v110 = v350;
      if (v350 >= (unint64_t)HIDWORD(v350))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v349, (uint64_t)v351, v350 + 1, 8);
        v110 = v350;
      }
      *((_QWORD *)v349 + v110) = v107;
      LODWORD(v350) = v350 + 1;
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v332, v107);
    }
  }
  v111 = *(_QWORD *)(a2 + 40);
  v315 = (uint64_t *)(a2 + 40);
  if (v111 == a2 + 40)
  {
    v113 = 0;
  }
  else
  {
    v112 = v111 - 24;
    if (!v111)
      v112 = 0;
    if (*(unsigned __int8 *)(v112 + 16) - 29 >= 0xB)
      v113 = 0;
    else
      v113 = v112;
  }
  v114 = (_QWORD *)(v113 + 24);
  v115 = (_QWORD *)(v113 + 24);
  if (v113 + 24 != *(_QWORD *)(a2 + 48))
    v115 = (_QWORD *)*v114;
  v313 = v113;
  v116 = &unk_1C6416000;
  if (a6)
  {
    v312 = v115;
    v117 = 0;
    v316 = a6;
    while (1)
    {
      if (*(unsigned __int16 *)(a4 + 240) >= 4u)
      {
        v118 = (llvm::ConstantInt **)a5[7];
        if (v118)
        {
          v119 = llvm::ConstantInt::get(*v118, 1 << v117, 0);
          v120 = (int32x2_t ****)a5[7];
          v339 = 2;
          v340 = 0;
          v341 = v120;
          if (v120 != (int32x2_t ****)-8192 && v120 != (int32x2_t ****)-4096 && v120)
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v339);
          v338 = &unk_1E814DA10;
          v342 = a3;
          v121 = sub_1C52E2ED8(a3, &v338);
          if (v341 != (int32x2_t ****)-8192 && v341 != (int32x2_t ****)-4096 && v341)
          {
            v122 = v339 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)(v339 & 0xFFFFFFFFFFFFFFF8) = v340;
            if (v340)
            {
              *v340 = *v340 & 7 | v122;
            }
            else
            {
              v123 = v341;
              v124 = ***v341;
              v125 = (unint64_t)v124[303];
              if (v125 <= v122)
              {
                v126 = v124[305].u32[0];
                if (v125 + 16 * v126 > v122)
                {
                  v127 = v126 - 1;
                  LODWORD(v128) = v127 & ((v341 >> 4) ^ (v341 >> 9));
                  v129 = (int32x2_t *****)(v125 + 16 * v128);
                  v130 = *v129;
                  if (v341 == *v129)
                  {
LABEL_207:
                    *v129 = (int32x2_t ****)-8192;
                    v124[304] = vadd_s32(v124[304], (int32x2_t)0x1FFFFFFFFLL);
                    v123 = v341;
                  }
                  else
                  {
                    v131 = 1;
                    while (v130 != (int32x2_t ****)-4096)
                    {
                      v132 = v128 + v131++;
                      v128 = v132 & v127;
                      v130 = *(int32x2_t *****)(v125 + 16 * v128);
                      if (v341 == v130)
                      {
                        v129 = (int32x2_t *****)(v125 + 16 * v128);
                        goto LABEL_207;
                      }
                    }
                  }
                  *((_BYTE *)v123 + 17) &= ~1u;
                }
              }
            }
          }
          v133 = (llvm::Value **)v121[7];
          if (v133 != v119)
          {
            if (v133 && v133 != (llvm::Value **)-8192 && v133 != (llvm::Value **)-4096)
            {
              v233 = v121[5] & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v233 = v121[6];
              v234 = (unint64_t *)v121[6];
              if (v234)
              {
                *v234 = *v234 & 7 | v233;
              }
              else
              {
                v235 = v121[7];
                v236 = ***(int32x2_t ****)v235;
                v237 = (unint64_t)v236[303];
                if (v237 <= v233)
                {
                  v238 = v236[305].u32[0];
                  if (v237 + 16 * v238 > v233)
                  {
                    v239 = v238 - 1;
                    LODWORD(v240) = v239 & ((v235 >> 4) ^ (v235 >> 9));
                    v241 = (uint64_t *)(v237 + 16 * v240);
                    v242 = *v241;
                    if (v235 == *v241)
                    {
LABEL_371:
                      *v241 = -8192;
                      v236[304] = vadd_s32(v236[304], (int32x2_t)0x1FFFFFFFFLL);
                      v235 = v121[7];
                    }
                    else
                    {
                      v243 = 1;
                      while (v242 != -4096)
                      {
                        v244 = v240 + v243++;
                        v240 = v244 & v239;
                        v242 = *(_QWORD *)(v237 + 16 * v240);
                        if (v235 == v242)
                        {
                          v241 = (uint64_t *)(v237 + 16 * v240);
                          goto LABEL_371;
                        }
                      }
                    }
                    *(_BYTE *)(v235 + 17) &= ~1u;
                  }
                }
              }
            }
            v121[7] = v119;
            if (v119 != (llvm::Value **)-8192 && v119 != (llvm::Value **)-4096 && v119)
              llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v121 + 5));
          }
        }
        v134 = (llvm::ConstantInt **)a5[8];
        if (v134)
        {
          v135 = llvm::ConstantInt::get(*v134, v117, 0);
          v136 = (int32x2_t ****)a5[8];
          v339 = 2;
          v340 = 0;
          v341 = v136;
          if (v136 != (int32x2_t ****)-8192 && v136 != (int32x2_t ****)-4096 && v136)
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v339);
          v338 = &unk_1E814DA10;
          v342 = a3;
          v137 = sub_1C52E2ED8(a3, &v338);
          if (v341 != (int32x2_t ****)-8192 && v341 != (int32x2_t ****)-4096 && v341)
          {
            v138 = v339 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)(v339 & 0xFFFFFFFFFFFFFFF8) = v340;
            if (v340)
            {
              *v340 = *v340 & 7 | v138;
            }
            else
            {
              v139 = v341;
              v140 = ***v341;
              v141 = (unint64_t)v140[303];
              if (v141 <= v138)
              {
                v142 = v140[305].u32[0];
                if (v141 + 16 * v142 > v138)
                {
                  v143 = v142 - 1;
                  LODWORD(v144) = v143 & ((v341 >> 4) ^ (v341 >> 9));
                  v145 = (int32x2_t *****)(v141 + 16 * v144);
                  v146 = *v145;
                  if (v341 == *v145)
                  {
LABEL_232:
                    *v145 = (int32x2_t ****)-8192;
                    v140[304] = vadd_s32(v140[304], (int32x2_t)0x1FFFFFFFFLL);
                    v139 = v341;
                  }
                  else
                  {
                    v147 = 1;
                    while (v146 != (int32x2_t ****)-4096)
                    {
                      v148 = v144 + v147++;
                      v144 = v148 & v143;
                      v146 = *(int32x2_t *****)(v141 + 16 * v144);
                      if (v341 == v146)
                      {
                        v145 = (int32x2_t *****)(v141 + 16 * v144);
                        goto LABEL_232;
                      }
                    }
                  }
                  *((_BYTE *)v139 + 17) &= ~1u;
                }
              }
            }
          }
          v149 = (llvm::Value **)v137[7];
          if (v149 != v135)
          {
            if (v149 && v149 != (llvm::Value **)-8192 && v149 != (llvm::Value **)-4096)
            {
              v245 = v137[5] & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v245 = v137[6];
              v246 = (unint64_t *)v137[6];
              if (v246)
              {
                *v246 = *v246 & 7 | v245;
              }
              else
              {
                v247 = v137[7];
                v248 = ***(int32x2_t ****)v247;
                v249 = (unint64_t)v248[303];
                if (v249 <= v245)
                {
                  v250 = v248[305].u32[0];
                  if (v249 + 16 * v250 > v245)
                  {
                    v251 = v250 - 1;
                    LODWORD(v252) = v251 & ((v247 >> 4) ^ (v247 >> 9));
                    v253 = (uint64_t *)(v249 + 16 * v252);
                    v254 = *v253;
                    if (v247 == *v253)
                    {
LABEL_383:
                      *v253 = -8192;
                      v248[304] = vadd_s32(v248[304], (int32x2_t)0x1FFFFFFFFLL);
                      v247 = v137[7];
                    }
                    else
                    {
                      v255 = 1;
                      while (v254 != -4096)
                      {
                        v256 = v252 + v255++;
                        v252 = v256 & v251;
                        v254 = *(_QWORD *)(v249 + 16 * v252);
                        if (v247 == v254)
                        {
                          v253 = (uint64_t *)(v249 + 16 * v252);
                          goto LABEL_383;
                        }
                      }
                    }
                    *(_BYTE *)(v247 + 17) &= ~1u;
                  }
                }
              }
            }
            v137[7] = v135;
            if (v135 != (llvm::Value **)-8192 && v135 != (llvm::Value **)-4096 && v135)
              llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v137 + 5));
          }
        }
      }
      v318 = v117;
      if ((_DWORD)v353)
        break;
LABEL_359:
      v117 = v318 + 1;
      if (v318 + 1 == v316)
      {
        v111 = *v315;
        v116 = (_QWORD *)&unk_1C6416000;
        v115 = v312;
        if ((a7 & 0x20) == 0)
          goto LABEL_404;
        goto LABEL_390;
      }
    }
    v150 = (llvm::Instruction **)v352;
    v321 = (llvm::Instruction **)((char *)v352 + 8 * v353);
    while (1)
    {
      v151 = *v150;
      llvm::Instruction::clone(*v150);
      v153 = v152;
      v154 = sub_1C477672C(a4 + 64, (uint64_t)v151);
      v155 = *(_QWORD *)(a4 + 72);
      if (v155 == *(_QWORD *)(a4 + 64))
        v156 = (unsigned int *)(a4 + 84);
      else
        v156 = (unsigned int *)(a4 + 80);
      if (v154 == (_QWORD *)(v155 + 8 * *v156))
      {
        v159 = *(llvm::Instruction ***)a4;
        v160 = *(unsigned int *)(a4 + 8);
        if ((_DWORD)v160)
        {
          v161 = 8 * v160;
          v162 = *(llvm::Instruction ***)a4;
          while (*v162 != v151)
          {
            ++v162;
            v161 -= 8;
            if (!v161)
            {
              v162 = &v159[v160];
              break;
            }
          }
        }
        else
        {
          v162 = *(llvm::Instruction ***)a4;
        }
        if (v160 == v162 - v159)
          goto LABEL_259;
        v157 = v344;
        v158 = &v343;
        if (v344 >= (unint64_t)HIDWORD(v344))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v343, (uint64_t)v345, v344 + 1, 8);
          v157 = v344;
        }
      }
      else
      {
        v157 = v347;
        v158 = &v346;
        if (v347 >= (unint64_t)HIDWORD(v347))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v346, (uint64_t)v348, v347 + 1, 8);
          v157 = v347;
        }
      }
      *((_QWORD *)*v158 + v157) = v153;
      ++*((_DWORD *)v158 + 2);
LABEL_259:
      v163 = operator new();
      *(_DWORD *)v163 = 6;
      *(_QWORD *)(v163 + 8) = 0;
      *(_DWORD *)(v163 + 16) = 0;
      *(_QWORD *)(v163 + 40) = a3;
      *(_QWORD *)(v163 + 24) = v163 + 40;
      *(_QWORD *)(v163 + 48) = 0;
      *(_QWORD *)(v163 + 32) = 0x200000001;
      *(_QWORD *)(v163 + 72) = v163 + 88;
      *(_QWORD *)(v163 + 80) = 0x400000000;
      *(_QWORD *)(v163 + 184) = v163 + 200;
      *(_QWORD *)(v163 + 192) = 0x100000000;
      *(_QWORD *)(v163 + 216) = v163 + 232;
      *(_QWORD *)(v163 + 224) = 0x1000000000;
      v337 = v163;
      v338 = (void *)v163;
      sub_1C5FD706C(v163, (uint64_t ***)v153);
      sub_1C5FD3718((uint64_t *)&v338, v164);
      llvm::ValueMapper::~ValueMapper((llvm::ValueMapper *)&v337, v165);
      for (ii = *((_QWORD *)v151 + 1); ii; ii = *(_QWORD *)(ii + 8))
      {
        v167 = *(_QWORD *)(ii + 24);
        if (v167)
          v168 = *(unsigned __int8 *)(v167 + 16) >= 0x1Cu;
        else
          v168 = 0;
        if (v168)
        {
          v169 = sub_1C477672C((uint64_t)&v332, *(_QWORD *)(ii + 24));
          v170 = (_QWORD *)v333 == v332 ? (uint64_t *)((char *)&v334 + 4) : &v334;
          if (v169 == (_QWORD *)(v333 + 8 * *(unsigned int *)v170))
          {
            v171 = operator new();
            *(_DWORD *)v171 = 6;
            *(_QWORD *)(v171 + 8) = 0;
            *(_DWORD *)(v171 + 16) = 0;
            *(_QWORD *)(v171 + 40) = a3;
            *(_QWORD *)(v171 + 24) = v171 + 40;
            *(_QWORD *)(v171 + 48) = 0;
            *(_QWORD *)(v171 + 32) = 0x200000001;
            *(_QWORD *)(v171 + 72) = v171 + 88;
            *(_QWORD *)(v171 + 80) = 0x400000000;
            *(_QWORD *)(v171 + 184) = v171 + 200;
            *(_QWORD *)(v171 + 192) = 0x100000000;
            *(_QWORD *)(v171 + 216) = v171 + 232;
            *(_QWORD *)(v171 + 224) = 0x1000000000;
            v337 = v171;
            v338 = (void *)v171;
            sub_1C5FD706C(v171, (uint64_t ***)v167);
            sub_1C5FD3718((uint64_t *)&v338, v172);
            llvm::ValueMapper::~ValueMapper((llvm::ValueMapper *)&v337, v173);
          }
        }
      }
      v174 = sub_1C562EF94((uint64_t)&v355, (uint64_t)v151);
      v175 = &v356;
      if ((v355 & 1) == 0)
        v175 = v356;
      v176 = v357;
      if ((v355 & 1) != 0)
        v176 = 8;
      if (&v175[2 * v176] != (_QWORD *)v174)
      {
        v177 = *(int32x2_t *****)(v174 + 8);
        v339 = 2;
        v340 = 0;
        v341 = v177;
        if (v177 != (int32x2_t ****)-8192 && v177 != (int32x2_t ****)-4096 && v177 != 0)
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v339);
        v338 = &unk_1E814DA10;
        v342 = a3;
        v179 = sub_1C52E2ED8(a3, &v338);
        if (v341 != (int32x2_t ****)-8192 && v341 != (int32x2_t ****)-4096 && v341)
        {
          v180 = v339 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)(v339 & 0xFFFFFFFFFFFFFFF8) = v340;
          if (v340)
          {
            *v340 = *v340 & 7 | v180;
          }
          else
          {
            v181 = v341;
            v182 = ***v341;
            v183 = (unint64_t)v182[303];
            if (v183 <= v180)
            {
              v184 = v182[305].u32[0];
              if (v183 + 16 * v184 > v180)
              {
                v185 = v184 - 1;
                LODWORD(v186) = v185 & ((v341 >> 4) ^ (v341 >> 9));
                v187 = (int32x2_t *****)(v183 + 16 * v186);
                v188 = *v187;
                if (v341 == *v187)
                {
LABEL_293:
                  *v187 = (int32x2_t ****)-8192;
                  v182[304] = vadd_s32(v182[304], (int32x2_t)0x1FFFFFFFFLL);
                  v181 = v341;
                }
                else
                {
                  v189 = 1;
                  while (v188 != (int32x2_t ****)-4096)
                  {
                    v190 = v186 + v189++;
                    v186 = v190 & v185;
                    v188 = *(int32x2_t *****)(v183 + 16 * v186);
                    if (v341 == v188)
                    {
                      v187 = (int32x2_t *****)(v183 + 16 * v186);
                      goto LABEL_293;
                    }
                  }
                }
                *((_BYTE *)v181 + 17) &= ~1u;
              }
            }
          }
        }
        v191 = v179[7];
        if (v191 != v153)
        {
          if (v191 && v191 != -8192 && v191 != -4096)
          {
            v221 = v179[5] & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v221 = v179[6];
            v222 = (unint64_t *)v179[6];
            if (v222)
            {
              *v222 = *v222 & 7 | v221;
            }
            else
            {
              v223 = v179[7];
              v224 = ***(int32x2_t ****)v223;
              v225 = (unint64_t)v224[303];
              if (v225 <= v221)
              {
                v226 = v224[305].u32[0];
                if (v225 + 16 * v226 > v221)
                {
                  v227 = v226 - 1;
                  LODWORD(v228) = v227 & ((v223 >> 4) ^ (v223 >> 9));
                  v229 = (uint64_t *)(v225 + 16 * v228);
                  v230 = *v229;
                  if (v223 == *v229)
                  {
LABEL_354:
                    *v229 = -8192;
                    v224[304] = vadd_s32(v224[304], (int32x2_t)0x1FFFFFFFFLL);
                    v223 = v179[7];
                  }
                  else
                  {
                    v231 = 1;
                    while (v230 != -4096)
                    {
                      v232 = v228 + v231++;
                      v228 = v232 & v227;
                      v230 = *(_QWORD *)(v225 + 16 * v228);
                      if (v223 == v230)
                      {
                        v229 = (uint64_t *)(v225 + 16 * v228);
                        goto LABEL_354;
                      }
                    }
                  }
                  *(_BYTE *)(v223 + 17) &= ~1u;
                }
              }
            }
          }
          v179[7] = v153;
          if (v153 != -8192 && v153 != -4096 && v153)
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v179 + 5));
        }
      }
      v339 = 2;
      v340 = 0;
      v341 = (int32x2_t ****)v151;
      if (v151 != (llvm::Instruction *)-8192 && v151 != (llvm::Instruction *)-4096 && v151)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v339);
      v338 = &unk_1E814DA10;
      v342 = a3;
      v192 = sub_1C52E2ED8(a3, &v338);
      if (v341 != (int32x2_t ****)-8192 && v341 != (int32x2_t ****)-4096 && v341)
      {
        v193 = v339 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)(v339 & 0xFFFFFFFFFFFFFFF8) = v340;
        if (v340)
        {
          *v340 = *v340 & 7 | v193;
        }
        else
        {
          v194 = v341;
          v195 = ***v341;
          v196 = (unint64_t)v195[303];
          if (v196 <= v193)
          {
            v197 = v195[305].u32[0];
            if (v196 + 16 * v197 > v193)
            {
              v198 = v197 - 1;
              LODWORD(v199) = v198 & ((v341 >> 4) ^ (v341 >> 9));
              v200 = (int32x2_t *****)(v196 + 16 * v199);
              v201 = *v200;
              if (v341 == *v200)
              {
LABEL_317:
                *v200 = (int32x2_t ****)-8192;
                v195[304] = vadd_s32(v195[304], (int32x2_t)0x1FFFFFFFFLL);
                v194 = v341;
              }
              else
              {
                v202 = 1;
                while (v201 != (int32x2_t ****)-4096)
                {
                  v203 = v199 + v202++;
                  v199 = v203 & v198;
                  v201 = *(int32x2_t *****)(v196 + 16 * v199);
                  if (v341 == v201)
                  {
                    v200 = (int32x2_t *****)(v196 + 16 * v199);
                    goto LABEL_317;
                  }
                }
              }
              *((_BYTE *)v194 + 17) &= ~1u;
            }
          }
        }
      }
      v204 = v192[7];
      if (v204 != v153)
      {
        if (v204 && v204 != -8192 && v204 != -4096)
        {
          v209 = v192[5] & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v209 = v192[6];
          v210 = (unint64_t *)v192[6];
          if (v210)
          {
            *v210 = *v210 & 7 | v209;
          }
          else
          {
            v211 = v192[7];
            v212 = ***(int32x2_t ****)v211;
            v213 = (unint64_t)v212[303];
            if (v213 <= v209)
            {
              v214 = v212[305].u32[0];
              if (v213 + 16 * v214 > v209)
              {
                v215 = v214 - 1;
                LODWORD(v216) = v215 & ((v211 >> 4) ^ (v211 >> 9));
                v217 = (uint64_t *)(v213 + 16 * v216);
                v218 = *v217;
                if (v211 == *v217)
                {
LABEL_342:
                  *v217 = -8192;
                  v212[304] = vadd_s32(v212[304], (int32x2_t)0x1FFFFFFFFLL);
                  v211 = v192[7];
                }
                else
                {
                  v219 = 1;
                  while (v218 != -4096)
                  {
                    v220 = v216 + v219++;
                    v216 = v220 & v215;
                    v218 = *(_QWORD *)(v213 + 16 * v216);
                    if (v211 == v218)
                    {
                      v217 = (uint64_t *)(v213 + 16 * v216);
                      goto LABEL_342;
                    }
                  }
                }
                *(_BYTE *)(v211 + 17) &= ~1u;
              }
            }
          }
        }
        v192[7] = v153;
        if (v153 != -8192 && v153 != -4096 && v153)
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v192 + 5));
      }
      *(_QWORD *)(v153 + 40) = a2;
      *(_WORD *)(a2 + 18) &= ~0x8000u;
      if ((*(_BYTE *)(v153 + 23) & 0x10) != 0)
      {
        v207 = *(_QWORD *)(a2 + 56);
        if (v207)
        {
          v208 = *(llvm::ValueSymbolTable **)(v207 + 104);
          if (v208)
            llvm::ValueSymbolTable::reinsertValue(v208, (llvm::Value *)v153);
        }
      }
      v205 = (_QWORD *)*v114;
      *(_QWORD *)(v153 + 24) = *v114;
      *(_QWORD *)(v153 + 32) = v114;
      v206 = v153 + 24;
      v205[1] = v206;
      *v114 = v206;
      if (++v150 == v321)
        goto LABEL_359;
    }
  }
  if ((a7 & 0x20) == 0)
    goto LABEL_404;
LABEL_390:
  if (v115 == v114)
    v115 = *(_QWORD **)(a2 + 48);
  if ((_DWORD)v347)
  {
    v257 = (llvm::Instruction **)v346;
    v258 = 8 * v347;
    do
    {
      v260 = *v257++;
      v259 = v260;
      if (v115)
        v261 = (llvm::Instruction *)(v115 - 3);
      else
        v261 = 0;
      llvm::Instruction::moveBefore(v259, v261);
      v115 = (_QWORD *)*((_QWORD *)v259 + 4);
      v258 -= 8;
    }
    while (v258);
  }
  if ((_DWORD)v344)
  {
    v262 = (llvm::Instruction **)v343;
    if (v111)
      v263 = (llvm::Instruction *)(v111 - 24);
    else
      v263 = 0;
    v264 = 8 * v344;
    do
    {
      v265 = *v262++;
      llvm::Instruction::moveBefore(v265, v263);
      v264 -= 8;
    }
    while (v264);
  }
LABEL_404:
  if ((_DWORD)v350)
  {
    v266 = (uint64_t *)v349;
    v267 = (uint64_t *)((char *)v349 + 8 * v350);
    v268 = v116[335];
    do
    {
      v269 = (llvm::Instruction *)*v266;
      v270 = *(_QWORD **)(a1 + 16);
      v271 = sub_1C477672C((uint64_t)v270, *v266);
      v272 = v270[1];
      if (v272 == *v270)
        v273 = 20;
      else
        v273 = 16;
      if (v271 == (_QWORD *)(v272 + 8 * *(unsigned int *)((char *)v270 + v273)))
      {
        llvm::Instruction::clone(v269);
        v275 = (llvm::Value *)v274;
        if (a2)
        {
          *(_QWORD *)(v274 + 40) = a2;
          *(_WORD *)(a2 + 18) &= ~0x8000u;
          if ((*(_BYTE *)(v274 + 23) & 0x10) != 0)
          {
            v305 = *(_QWORD *)(a2 + 56);
            if (v305)
            {
              v306 = *(llvm::ValueSymbolTable **)(v305 + 104);
              if (v306)
                llvm::ValueSymbolTable::reinsertValue(v306, v275);
            }
          }
          v276 = *v315;
          *((_QWORD *)v275 + 3) = *v315;
          *((_QWORD *)v275 + 4) = v315;
          *(_QWORD *)(v276 + 8) = (char *)v275 + 24;
          *v315 = (uint64_t)v275 + 24;
        }
        v339 = 2;
        v340 = 0;
        v341 = (int32x2_t ****)v269;
        if (v269 != (llvm::Instruction *)-8192 && v269 != (llvm::Instruction *)-4096 && v269)
          llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v339);
        v338 = &unk_1E814DA10;
        v342 = a3;
        v277 = sub_1C52E2ED8(a3, &v338);
        if (v341 != (int32x2_t ****)-8192 && v341 != (int32x2_t ****)-4096 && v341)
        {
          v278 = v339 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)(v339 & 0xFFFFFFFFFFFFFFF8) = v340;
          if (v340)
          {
            *v340 = *v340 & 7 | v278;
          }
          else
          {
            v279 = v341;
            v280 = ***v341;
            v281 = (unint64_t)v280[303];
            if (v281 <= v278)
            {
              v282 = v280[305].u32[0];
              if (v281 + 16 * v282 > v278)
              {
                v283 = v282 - 1;
                LODWORD(v284) = v283 & ((v341 >> 4) ^ (v341 >> 9));
                v285 = (int32x2_t *****)(v281 + 16 * v284);
                v286 = *v285;
                if (v341 == *v285)
                {
LABEL_428:
                  *v285 = (int32x2_t ****)-8192;
                  v280[304] = vadd_s32(v280[304], (int32x2_t)0x1FFFFFFFFLL);
                  v279 = v341;
                }
                else
                {
                  v287 = 1;
                  while (v286 != (int32x2_t ****)-4096)
                  {
                    v288 = v284 + v287++;
                    v284 = v288 & v283;
                    v286 = *(int32x2_t *****)(v281 + 16 * v284);
                    if (v341 == v286)
                    {
                      v285 = (int32x2_t *****)(v281 + 16 * v284);
                      goto LABEL_428;
                    }
                  }
                }
                *((_BYTE *)v279 + 17) &= ~1u;
              }
            }
          }
        }
        v289 = (llvm::Value *)v277[7];
        if (v289 != v275)
        {
          if (v289 && v289 != (llvm::Value *)-8192 && v289 != (llvm::Value *)-4096)
          {
            v293 = v277[5] & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v293 = v277[6];
            v294 = (unint64_t *)v277[6];
            if (v294)
            {
              *v294 = *v294 & 7 | v293;
            }
            else
            {
              v295 = v277[7];
              v296 = ***(int32x2_t ****)v295;
              v297 = (unint64_t)v296[303];
              if (v297 <= v293)
              {
                v298 = v296[305].u32[0];
                if (v297 + 16 * v298 > v293)
                {
                  v299 = v298 - 1;
                  LODWORD(v300) = v299 & ((v295 >> 4) ^ (v295 >> 9));
                  v301 = (uint64_t *)(v297 + 16 * v300);
                  v302 = *v301;
                  if (v295 == *v301)
                  {
LABEL_450:
                    *v301 = -8192;
                    v296[304] = vadd_s32(v296[304], (int32x2_t)0x1FFFFFFFFLL);
                    v295 = v277[7];
                  }
                  else
                  {
                    v303 = 1;
                    while (v302 != -4096)
                    {
                      v304 = v300 + v303++;
                      v300 = v304 & v299;
                      v302 = *(_QWORD *)(v297 + 16 * v300);
                      if (v295 == v302)
                      {
                        v301 = (uint64_t *)(v297 + 16 * v300);
                        goto LABEL_450;
                      }
                    }
                  }
                  *(_BYTE *)(v295 + 17) &= ~1u;
                }
              }
            }
          }
          v277[7] = v275;
          if (v275 != (llvm::Value *)-8192 && v275 != (llvm::Value *)-4096 && v275)
            llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v277 + 5));
        }
        v290 = operator new();
        *(_DWORD *)v290 = 6;
        *(_QWORD *)(v290 + 8) = 0;
        *(_DWORD *)(v290 + 16) = 0;
        *(_QWORD *)(v290 + 40) = a3;
        *(_QWORD *)(v290 + 24) = v290 + 40;
        *(_QWORD *)(v290 + 48) = 0;
        *(_QWORD *)(v290 + 32) = v268;
        *(_QWORD *)(v290 + 72) = v290 + 88;
        *(_QWORD *)(v290 + 80) = 0x400000000;
        *(_QWORD *)(v290 + 184) = v290 + 200;
        *(_QWORD *)(v290 + 192) = 0x100000000;
        *(_QWORD *)(v290 + 216) = v290 + 232;
        *(_QWORD *)(v290 + 224) = 0x1000000000;
        v337 = v290;
        v338 = (void *)v290;
        sub_1C5FD706C(v290, (uint64_t ***)v275);
        sub_1C5FD3718((uint64_t *)&v338, v291);
        llvm::ValueMapper::~ValueMapper((llvm::ValueMapper *)&v337, v292);
      }
      ++v266;
    }
    while (v266 != v267);
  }
  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v313 + 40) + 40, (uint64_t ***)v313);
  v307 = *(_QWORD *)(v313 + 24);
  v308 = *(_QWORD **)(v313 + 32);
  *v308 = v307;
  *(_QWORD *)(v307 + 8) = v308;
  *v114 = 0;
  v114[1] = 0;
  *(_QWORD *)(v313 + 40) = a2;
  *(_WORD *)(a2 + 18) &= ~0x8000u;
  if ((*(_BYTE *)(v313 + 23) & 0x10) != 0)
  {
    v310 = *(_QWORD *)(a2 + 56);
    if (v310)
    {
      v311 = *(llvm::ValueSymbolTable **)(v310 + 104);
      if (v311)
        llvm::ValueSymbolTable::reinsertValue(v311, (llvm::Value *)v313);
    }
  }
  v309 = *v315;
  *(_QWORD *)(v313 + 24) = *v315;
  *(_QWORD *)(v313 + 32) = v315;
  *(_QWORD *)(v309 + 8) = v114;
  *v315 = (uint64_t)v114;
  if (v343 != v345)
    free(v343);
  if (v346 != v348)
    free(v346);
  if (v323 != v322)
    free(v323);
  if (v328 != v327)
    free(v328);
  if (v349 != v351)
    free(v349);
  if ((_QWORD *)v333 != v332)
    free((void *)v333);
  if (v352 != v354)
    free(v352);
  if ((v355 & 1) == 0)
    MEMORY[0x1CAA32FB4](v356, 8);
}

