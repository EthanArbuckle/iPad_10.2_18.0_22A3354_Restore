llvm::raw_ostream *llvm::MachObjectWriter::writeDysymtabLoadCommand(llvm::MachObjectWriter *this, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, unsigned int a6, unsigned int a7, unsigned int a8, unsigned int a9)
{
  llvm::raw_ostream *v17;
  int v18;
  llvm::raw_ostream *v19;
  int v20;
  llvm::raw_ostream *v21;
  unsigned int v22;
  unsigned int v23;
  llvm::raw_ostream *v24;
  unsigned int v25;
  unsigned int v26;
  llvm::raw_ostream *v27;
  unsigned int v28;
  unsigned int v29;
  llvm::raw_ostream *v30;
  unsigned int v31;
  unsigned int v32;
  llvm::raw_ostream *v33;
  unsigned int v34;
  unsigned int v35;
  llvm::raw_ostream *v36;
  unsigned int v37;
  unsigned int v38;
  llvm::raw_ostream *v39;
  llvm::raw_ostream *v40;
  llvm::raw_ostream *v41;
  llvm::raw_ostream *v42;
  llvm::raw_ostream *v43;
  llvm::raw_ostream *v44;
  llvm::raw_ostream *v45;
  unsigned int v46;
  unsigned int v47;
  llvm::raw_ostream *v48;
  unsigned int v49;
  unsigned int v50;
  llvm::raw_ostream *v51;
  llvm::raw_ostream *v52;
  llvm::raw_ostream *v53;
  llvm::raw_ostream *v54;
  char v56[4];

  (*(void (**)(_QWORD))(**((_QWORD **)this + 26) + 80))(*((_QWORD *)this + 26));
  v17 = (llvm::raw_ostream *)*((_QWORD *)this + 26);
  if ((*((_DWORD *)this + 54) - 1) >= 2)
    v18 = 184549376;
  else
    v18 = 11;
  *(_DWORD *)v56 = v18;
  llvm::raw_ostream::write(v17, v56, 4uLL);
  v19 = (llvm::raw_ostream *)*((_QWORD *)this + 26);
  if ((*((_DWORD *)this + 54) - 1) >= 2)
    v20 = 1342177280;
  else
    v20 = 80;
  *(_DWORD *)v56 = v20;
  llvm::raw_ostream::write(v19, v56, 4uLL);
  v21 = (llvm::raw_ostream *)*((_QWORD *)this + 26);
  v22 = bswap32(a2);
  if ((*((_DWORD *)this + 54) - 1) >= 2)
    v23 = v22;
  else
    v23 = a2;
  *(_DWORD *)v56 = v23;
  llvm::raw_ostream::write(v21, v56, 4uLL);
  v24 = (llvm::raw_ostream *)*((_QWORD *)this + 26);
  v25 = bswap32(a3);
  if ((*((_DWORD *)this + 54) - 1) >= 2)
    v26 = v25;
  else
    v26 = a3;
  *(_DWORD *)v56 = v26;
  llvm::raw_ostream::write(v24, v56, 4uLL);
  v27 = (llvm::raw_ostream *)*((_QWORD *)this + 26);
  v28 = bswap32(a4);
  if ((*((_DWORD *)this + 54) - 1) >= 2)
    v29 = v28;
  else
    v29 = a4;
  *(_DWORD *)v56 = v29;
  llvm::raw_ostream::write(v27, v56, 4uLL);
  v30 = (llvm::raw_ostream *)*((_QWORD *)this + 26);
  v31 = bswap32(a5);
  if ((*((_DWORD *)this + 54) - 1) >= 2)
    v32 = v31;
  else
    v32 = a5;
  *(_DWORD *)v56 = v32;
  llvm::raw_ostream::write(v30, v56, 4uLL);
  v33 = (llvm::raw_ostream *)*((_QWORD *)this + 26);
  v34 = bswap32(a6);
  if ((*((_DWORD *)this + 54) - 1) >= 2)
    v35 = v34;
  else
    v35 = a6;
  *(_DWORD *)v56 = v35;
  llvm::raw_ostream::write(v33, v56, 4uLL);
  v36 = (llvm::raw_ostream *)*((_QWORD *)this + 26);
  v37 = bswap32(a7);
  if ((*((_DWORD *)this + 54) - 1) >= 2)
    v38 = v37;
  else
    v38 = a7;
  *(_DWORD *)v56 = v38;
  llvm::raw_ostream::write(v36, v56, 4uLL);
  v39 = (llvm::raw_ostream *)*((_QWORD *)this + 26);
  *(_DWORD *)v56 = 0;
  llvm::raw_ostream::write(v39, v56, 4uLL);
  v40 = (llvm::raw_ostream *)*((_QWORD *)this + 26);
  *(_DWORD *)v56 = 0;
  llvm::raw_ostream::write(v40, v56, 4uLL);
  v41 = (llvm::raw_ostream *)*((_QWORD *)this + 26);
  *(_DWORD *)v56 = 0;
  llvm::raw_ostream::write(v41, v56, 4uLL);
  v42 = (llvm::raw_ostream *)*((_QWORD *)this + 26);
  *(_DWORD *)v56 = 0;
  llvm::raw_ostream::write(v42, v56, 4uLL);
  v43 = (llvm::raw_ostream *)*((_QWORD *)this + 26);
  *(_DWORD *)v56 = 0;
  llvm::raw_ostream::write(v43, v56, 4uLL);
  v44 = (llvm::raw_ostream *)*((_QWORD *)this + 26);
  *(_DWORD *)v56 = 0;
  llvm::raw_ostream::write(v44, v56, 4uLL);
  v45 = (llvm::raw_ostream *)*((_QWORD *)this + 26);
  v46 = bswap32(a8);
  if ((*((_DWORD *)this + 54) - 1) >= 2)
    v47 = v46;
  else
    v47 = a8;
  *(_DWORD *)v56 = v47;
  llvm::raw_ostream::write(v45, v56, 4uLL);
  v48 = (llvm::raw_ostream *)*((_QWORD *)this + 26);
  v49 = bswap32(a9);
  if ((*((_DWORD *)this + 54) - 1) >= 2)
    v50 = v49;
  else
    v50 = a9;
  *(_DWORD *)v56 = v50;
  llvm::raw_ostream::write(v48, v56, 4uLL);
  v51 = (llvm::raw_ostream *)*((_QWORD *)this + 26);
  *(_DWORD *)v56 = 0;
  llvm::raw_ostream::write(v51, v56, 4uLL);
  v52 = (llvm::raw_ostream *)*((_QWORD *)this + 26);
  *(_DWORD *)v56 = 0;
  llvm::raw_ostream::write(v52, v56, 4uLL);
  v53 = (llvm::raw_ostream *)*((_QWORD *)this + 26);
  *(_DWORD *)v56 = 0;
  llvm::raw_ostream::write(v53, v56, 4uLL);
  v54 = (llvm::raw_ostream *)*((_QWORD *)this + 26);
  *(_DWORD *)v56 = 0;
  return llvm::raw_ostream::write(v54, v56, 4uLL);
}

const llvm::MCSymbol **llvm::MachObjectWriter::findSymbolData(llvm::MachObjectWriter *this, const llvm::MCSymbol *a2)
{
  uint64_t v2;
  const llvm::MCSymbol ***v3;
  const llvm::MCSymbol **result;
  const llvm::MCSymbol **v5;
  _QWORD v6[4];

  v2 = 0;
  v6[3] = *MEMORY[0x1E0C80C00];
  v6[0] = (char *)this + 136;
  v6[1] = (char *)this + 160;
  v6[2] = (char *)this + 184;
  do
  {
    v3 = (const llvm::MCSymbol ***)v6[v2];
    result = *v3;
    v5 = v3[1];
    while (result != v5)
    {
      if (*result == a2)
        return result;
      result += 3;
    }
    ++v2;
  }
  while (v2 != 3);
  return 0;
}

const llvm::MCSymbol *llvm::MachObjectWriter::findAliasedSymbol(llvm::MachObjectWriter *this, const llvm::MCSymbol *a2)
{
  const llvm::MCSymbol *result;
  int i;
  uint64_t v4;

  result = a2;
  for (i = *((_DWORD *)a2 + 2); (i & 0x1C00) == 0x800; i = *((_DWORD *)result + 2))
  {
    *((_DWORD *)result + 2) = i | 4;
    v4 = *((_QWORD *)result + 3);
    if (*(_BYTE *)v4 != 2)
      break;
    result = *(const llvm::MCSymbol **)(v4 + 16);
  }
  return result;
}

llvm::raw_ostream *llvm::MachObjectWriter::writeNlist(llvm::MachObjectWriter *this, char *a2, llvm::MCAsmLayout *a3)
{
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  int v17;
  unint64_t v18;
  unint64_t v19;
  int v20;
  unsigned int v21;
  int v22;
  unint64_t v23;
  char v24;
  unsigned int v25;
  int v26;
  char v27;
  unint64_t v28;
  unint64_t v29;
  uint64_t SymbolAddress;
  unsigned int v31;
  llvm::raw_ostream *v32;
  unsigned int v33;
  llvm::raw_ostream *v34;
  _BYTE *v35;
  llvm::raw_ostream *v36;
  char *v37;
  int v38;
  unsigned int v39;
  unsigned int v40;
  unsigned int v41;
  llvm::raw_ostream *v42;
  unsigned int v43;
  llvm::raw_ostream *v44;
  unsigned int v45;
  int v46;
  size_t v47;
  unint64_t v48;
  unint64_t v49;
  int v51;
  unsigned int v52;
  uint64_t v53;
  const char *v54;
  __int16 v55;
  uint64_t v56[4];
  __int16 v57;
  const char *v58;
  __int16 v59;
  uint64_t v60[4];
  __int16 v61;
  const char *v62;
  __int16 v63;
  uint64_t v64[5];
  uint64_t v65[5];
  uint64_t v66[5];
  char v67[8];
  char *v68;
  char *v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)a2;
  v7 = *(_DWORD *)(*(_QWORD *)a2 + 8);
  if ((v7 & 0x1C00) != 0x800)
  {
    v14 = 0;
    v10 = a2[16];
LABEL_19:
    v17 = 1;
    v8 = v6;
    goto LABEL_20;
  }
  v8 = *(_QWORD *)a2;
  do
  {
    *(_DWORD *)(v8 + 8) = v7 | 4;
    v9 = *(_QWORD *)(v8 + 24);
    if (*(_BYTE *)v9 != 2)
      break;
    v8 = *(_QWORD *)(v9 + 16);
    v7 = *(_DWORD *)(v8 + 8);
  }
  while ((v7 & 0x1C00) == 0x800);
  v10 = a2[16];
  if (v6 == v8)
  {
    v14 = 0;
    goto LABEL_19;
  }
  v11 = 0;
  *(_QWORD *)v67 = (char *)this + 136;
  v68 = (char *)this + 160;
  v69 = (char *)this + 184;
  while (2)
  {
    v12 = *(uint64_t **)&v67[8 * v11];
    v14 = *v12;
    v13 = v12[1];
    while (v14 != v13)
    {
      if (*(_QWORD *)v14 == v8)
      {
        v10 = *(_BYTE *)(v14 + 16);
        goto LABEL_15;
      }
      v14 += 24;
    }
    if (++v11 != 3)
      continue;
    break;
  }
  v14 = 0;
LABEL_15:
  v15 = *(_QWORD *)v8;
  v16 = *(_QWORD *)v8 & 0xFFFFFFFFFFFFFFF8;
  if (!v16 && (*(_DWORD *)(v8 + 8) & 0x1C00) == 0x800)
  {
    *(_DWORD *)(v8 + 8) |= 4u;
    llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v8 + 24));
    v15 = *(_QWORD *)v8 & 7 | v16;
    *(_QWORD *)v8 = v15;
  }
  if (!v16)
  {
    v25 = *(_DWORD *)(v6 + 8);
    v26 = (v25 >> 1) & 0x10;
    if ((v25 & 0x10) != 0)
      v27 = 11;
    else
      v27 = 10;
    LOBYTE(v22) = v26 | v27;
    goto LABEL_37;
  }
  v17 = 0;
LABEL_20:
  v15 = *(_QWORD *)v8;
  v18 = *(_QWORD *)v8 & 0xFFFFFFFFFFFFFFF8;
  if (!v18 && (*(_DWORD *)(v8 + 8) & 0x1C00) == 0x800)
  {
    *(_DWORD *)(v8 + 8) |= 4u;
    llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v8 + 24));
    v15 = *(_QWORD *)v8 & 7 | v18;
    *(_QWORD *)v8 = v15;
  }
  if (v18)
  {
    v19 = v15 & 0xFFFFFFFFFFFFFFF8;
    if ((v15 & 0xFFFFFFFFFFFFFFF8) == 0 && (*(_DWORD *)(v8 + 8) & 0x1C00) == 0x800)
    {
      *(_DWORD *)(v8 + 8) |= 4u;
      llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v8 + 24));
      v15 = *(_QWORD *)v8 & 7 | v19;
      *(_QWORD *)v8 = v15;
    }
    if ((_UNKNOWN *)v19 == llvm::MCSymbol::AbsolutePseudoFragment)
      v20 = 2;
    else
      v20 = 14;
  }
  else
  {
    v20 = 0;
  }
  v21 = *(_DWORD *)(v6 + 8);
  v22 = (v21 >> 1) & 0x10 | v20;
  if ((v21 & 0x10) != 0)
  {
    LOBYTE(v22) = v22 | 1;
    if ((v17 & 1) != 0)
    {
LABEL_32:
      v24 = 1;
      goto LABEL_39;
    }
  }
  else if (v17)
  {
    v23 = v15 & 0xFFFFFFFFFFFFFFF8;
    if ((v15 & 0xFFFFFFFFFFFFFFF8) == 0 && (*(_DWORD *)(v8 + 8) & 0x1C00) == 0x800)
    {
      *(_DWORD *)(v8 + 8) |= 4u;
      llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v8 + 24));
      v15 = *(_QWORD *)v8 & 7 | v23;
      *(_QWORD *)v8 = v15;
    }
    LOBYTE(v22) = v22 | (v23 == 0);
    goto LABEL_32;
  }
LABEL_37:
  v28 = v15 & 0xFFFFFFFFFFFFFFF8;
  if ((v15 & 0xFFFFFFFFFFFFFFF8) == 0 && (*(_DWORD *)(v8 + 8) & 0x1C00) == 0x800)
  {
    *(_DWORD *)(v8 + 8) |= 4u;
    llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v8 + 24));
    v15 = *(_QWORD *)v8 & 7 | v28;
    *(_QWORD *)v8 = v15;
  }
  v24 = 0;
  if (!v28)
  {
    SymbolAddress = *(_QWORD *)(v14 + 8);
    goto LABEL_46;
  }
LABEL_39:
  v29 = v15 & 0xFFFFFFFFFFFFFFF8;
  if ((v15 & 0xFFFFFFFFFFFFFFF8) == 0 && (*(_DWORD *)(v8 + 8) & 0x1C00) == 0x800)
  {
    *(_DWORD *)(v8 + 8) |= 4u;
    llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v8 + 24));
    *(_QWORD *)v8 = *(_QWORD *)v8 & 7 | v29;
  }
  if (v29)
  {
    SymbolAddress = llvm::MachObjectWriter::getSymbolAddress(this, (const llvm::MCSymbol *)v6, a3);
  }
  else if (((*(_DWORD *)(v8 + 8) >> 10) & 7u) - 3 > 1)
  {
    SymbolAddress = 0;
  }
  else
  {
    SymbolAddress = *(_QWORD *)(v8 + 24);
  }
LABEL_46:
  v31 = *((_DWORD *)a2 + 2);
  v32 = (llvm::raw_ostream *)*((_QWORD *)this + 26);
  v33 = bswap32(v31);
  if ((*((_DWORD *)this + 54) - 1) >= 2)
    v31 = v33;
  *(_DWORD *)v67 = v31;
  llvm::raw_ostream::write(v32, v67, 4uLL);
  v34 = (llvm::raw_ostream *)*((_QWORD *)this + 26);
  v35 = (_BYTE *)*((_QWORD *)v34 + 4);
  if ((unint64_t)v35 >= *((_QWORD *)v34 + 3))
  {
    llvm::raw_ostream::write(v34, v22);
  }
  else
  {
    *((_QWORD *)v34 + 4) = v35 + 1;
    *v35 = v22;
  }
  v36 = (llvm::raw_ostream *)*((_QWORD *)this + 26);
  v37 = (char *)*((_QWORD *)v36 + 4);
  if ((unint64_t)v37 >= *((_QWORD *)v36 + 3))
  {
    llvm::raw_ostream::write(v36, v10);
    if ((v24 & 1) == 0)
      goto LABEL_53;
LABEL_55:
    v38 = 0;
    goto LABEL_56;
  }
  *((_QWORD *)v36 + 4) = v37 + 1;
  *v37 = v10;
  if ((v24 & 1) != 0)
    goto LABEL_55;
LABEL_53:
  v38 = (*(unsigned __int16 *)(v6 + 12) >> 9) & 1;
LABEL_56:
  v39 = *(unsigned __int16 *)(v8 + 12);
  v40 = *(_DWORD *)(v8 + 8);
  if (((v40 >> 10) & 7) - 3 <= 1)
  {
    v51 = (v40 >> 13) & 0x1F;
    if (v51)
    {
      v52 = v51 - 1;
      if (v52 >= 0x10)
      {
        v62 = "invalid 'common' alignment '";
        v63 = 259;
        v61 = 264;
        LODWORD(v60[0]) = 1 << v52;
        sub_1C6131AAC((uint64_t *)&v62, v60, (uint64_t)v64);
        v58 = "' for '";
        v59 = 259;
        sub_1C6131AAC(v64, (uint64_t *)&v58, (uint64_t)v65);
        v57 = 261;
        v56[0] = sub_1C62B94EC((_BYTE *)v8);
        v56[1] = v53;
        sub_1C6131AAC(v65, v56, (uint64_t)v66);
        v54 = "'";
        v55 = 259;
        sub_1C6131AAC(v66, (uint64_t *)&v54, (uint64_t)v67);
        llvm::report_fatal_error((uint64_t)v67, 0);
      }
      v39 = v39 & 0xFFFFF0FF | (v52 << 8);
    }
  }
  if (v38)
    v41 = v39 | 0x200;
  else
    v41 = v39;
  v42 = (llvm::raw_ostream *)*((_QWORD *)this + 26);
  v43 = bswap32(v41) >> 16;
  if ((*((_DWORD *)this + 54) - 1) >= 2)
    LOWORD(v41) = v43;
  *(_WORD *)v67 = v41;
  llvm::raw_ostream::write(v42, v67, 2uLL);
  if ((*(_BYTE *)(*((_QWORD *)this + 1) + 8) & 1) != 0)
  {
    v44 = (llvm::raw_ostream *)*((_QWORD *)this + 26);
    v48 = bswap64(SymbolAddress);
    if ((*((_DWORD *)this + 54) - 1) >= 2)
      v49 = v48;
    else
      v49 = SymbolAddress;
    *(_QWORD *)v67 = v49;
    v47 = 8;
  }
  else
  {
    v44 = (llvm::raw_ostream *)*((_QWORD *)this + 26);
    v45 = bswap32(SymbolAddress);
    if ((*((_DWORD *)this + 54) - 1) >= 2)
      v46 = v45;
    else
      v46 = SymbolAddress;
    *(_DWORD *)v67 = v46;
    v47 = 4;
  }
  return llvm::raw_ostream::write(v44, v67, v47);
}

llvm::raw_ostream *llvm::MachObjectWriter::writeLinkerOptionsLoadCommand(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int v7;
  int v8;
  unsigned int v9;
  llvm::raw_ostream *v10;
  int v11;
  llvm::raw_ostream *v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  llvm::raw_ostream *v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  char v21;
  BOOL v22;
  const char *v23;
  size_t v24;
  size_t v25;
  llvm::raw_ostream *v26;
  _BYTE *v27;
  uint64_t v28;
  int v29;
  char v31[4];
  char v32[4];
  char v33[4];

  v4 = *a2;
  v5 = 12;
  while (v4 != a2[1])
  {
    if (*(char *)(v4 + 23) < 0)
      v6 = *(_QWORD *)(v4 + 8);
    else
      LODWORD(v6) = *(unsigned __int8 *)(v4 + 23);
    v5 += v6 + 1;
    v4 += 24;
  }
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 8) + 8) & 1) != 0)
    v7 = -8;
  else
    v7 = -4;
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 8) + 8) & 1) != 0)
    v8 = 7;
  else
    v8 = 3;
  v9 = (v5 + v8) & v7;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 80))(*(_QWORD *)(a1 + 208));
  v10 = *(llvm::raw_ostream **)(a1 + 208);
  if ((*(_DWORD *)(a1 + 216) - 1) >= 2)
    v11 = 754974720;
  else
    v11 = 45;
  *(_DWORD *)v31 = v11;
  llvm::raw_ostream::write(v10, v31, 4uLL);
  v12 = *(llvm::raw_ostream **)(a1 + 208);
  v13 = bswap32(v9);
  if ((*(_DWORD *)(a1 + 216) - 1) >= 2)
    v14 = v13;
  else
    v14 = v9;
  *(_DWORD *)v32 = v14;
  llvm::raw_ostream::write(v12, v32, 4uLL);
  v15 = -1431655765 * ((unint64_t)(a2[1] - *a2) >> 3);
  v16 = *(llvm::raw_ostream **)(a1 + 208);
  v17 = bswap32(v15);
  if ((*(_DWORD *)(a1 + 216) - 1) >= 2)
    v15 = v17;
  *(_DWORD *)v33 = v15;
  llvm::raw_ostream::write(v16, v33, 4uLL);
  v18 = *a2;
  v19 = a2[1];
  v20 = 12;
  while (v18 != v19)
  {
    v21 = *(_BYTE *)(v18 + 23);
    v22 = v21 < 0;
    if (v21 >= 0)
      v23 = (const char *)v18;
    else
      v23 = *(const char **)v18;
    v24 = v21 & 0x7F;
    if (v22)
      v25 = *(_QWORD *)(v18 + 8);
    else
      v25 = v24;
    v26 = llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 208), v23, v25);
    v27 = (_BYTE *)*((_QWORD *)v26 + 4);
    if ((unint64_t)v27 >= *((_QWORD *)v26 + 3))
    {
      llvm::raw_ostream::write(v26, 0);
    }
    else
    {
      *((_QWORD *)v26 + 4) = v27 + 1;
      *v27 = 0;
    }
    if (*(char *)(v18 + 23) < 0)
      v28 = *(_QWORD *)(v18 + 8);
    else
      LODWORD(v28) = *(unsigned __int8 *)(v18 + 23);
    v20 += v28 + 1;
    v18 += 24;
  }
  v29 = 1 << (*(_BYTE *)(*(_QWORD *)(a1 + 8) + 8) & 1 | 2);
  return llvm::raw_ostream::write_zeros(*(llvm::raw_ostream **)(a1 + 208), ((v20 + v29 - 1) & -v29) - v20);
}

llvm::raw_ostream *llvm::MachObjectWriter::writeLoadDylibLoadCommand(uint64_t a1, const void *a2, size_t a3)
{
  int v6;
  int v7;
  int v8;
  int v9;
  unsigned int v10;
  llvm::raw_ostream *v11;
  int v12;
  llvm::raw_ostream *v13;
  unsigned int v14;
  unsigned int v15;
  llvm::raw_ostream *v16;
  int v17;
  llvm::raw_ostream *v18;
  int v19;
  llvm::raw_ostream *v20;
  llvm::raw_ostream *v21;
  llvm::raw_ostream *v22;
  _BYTE *v23;
  int v24;
  char v26[4];

  v6 = a3 + 24;
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 8) + 8) & 1) != 0)
    v7 = 8;
  else
    v7 = 4;
  v8 = v7 + v6;
  if ((*(_BYTE *)(*(_QWORD *)(a1 + 8) + 8) & 1) != 0)
    v9 = -8;
  else
    v9 = -4;
  v10 = v8 & v9;
  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 208) + 80))(*(_QWORD *)(a1 + 208));
  v11 = *(llvm::raw_ostream **)(a1 + 208);
  if ((*(_DWORD *)(a1 + 216) - 1) >= 2)
    v12 = 201326592;
  else
    v12 = 12;
  *(_DWORD *)v26 = v12;
  llvm::raw_ostream::write(v11, v26, 4uLL);
  v13 = *(llvm::raw_ostream **)(a1 + 208);
  v14 = bswap32(v10);
  if ((*(_DWORD *)(a1 + 216) - 1) >= 2)
    v15 = v14;
  else
    v15 = v10;
  *(_DWORD *)v26 = v15;
  llvm::raw_ostream::write(v13, v26, 4uLL);
  v16 = *(llvm::raw_ostream **)(a1 + 208);
  if ((*(_DWORD *)(a1 + 216) - 1) >= 2)
    v17 = 402653184;
  else
    v17 = 24;
  *(_DWORD *)v26 = v17;
  llvm::raw_ostream::write(v16, v26, 4uLL);
  v18 = *(llvm::raw_ostream **)(a1 + 208);
  if ((*(_DWORD *)(a1 + 216) - 1) >= 2)
    v19 = 0x2000000;
  else
    v19 = 2;
  *(_DWORD *)v26 = v19;
  llvm::raw_ostream::write(v18, v26, 4uLL);
  v20 = *(llvm::raw_ostream **)(a1 + 208);
  *(_DWORD *)v26 = 0;
  llvm::raw_ostream::write(v20, v26, 4uLL);
  v21 = *(llvm::raw_ostream **)(a1 + 208);
  *(_DWORD *)v26 = 0;
  llvm::raw_ostream::write(v21, v26, 4uLL);
  v22 = *(llvm::raw_ostream **)(a1 + 208);
  v23 = (_BYTE *)*((_QWORD *)v22 + 4);
  if (a3 <= *((_QWORD *)v22 + 3) - (_QWORD)v23)
  {
    if (a3)
    {
      memcpy(v23, a2, a3);
      v23 = (_BYTE *)(*((_QWORD *)v22 + 4) + a3);
      *((_QWORD *)v22 + 4) = v23;
    }
  }
  else
  {
    llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 208), (const char *)a2, a3);
    v23 = (_BYTE *)*((_QWORD *)v22 + 4);
  }
  if ((unint64_t)v23 >= *((_QWORD *)v22 + 3))
  {
    llvm::raw_ostream::write(v22, 0);
  }
  else
  {
    *((_QWORD *)v22 + 4) = v23 + 1;
    *v23 = 0;
  }
  v24 = 1 << (*(_BYTE *)(*(_QWORD *)(a1 + 8) + 8) & 1 | 2);
  return llvm::raw_ostream::write_zeros(*(llvm::raw_ostream **)(a1 + 208), ((v24 + v6) & -v24) - a3 - 25);
}

uint64_t llvm::MachObjectWriter::recordRelocation(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  BOOL v11;
  uint64_t v13;
  __int128 v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD v18[2];
  const char *v19;
  __int16 v20;

  if (*(_QWORD *)a6)
    v11 = 1;
  else
    v11 = *(_QWORD *)(a6 + 8) == 0;
  if (v11)
  {
    v13 = *(_QWORD *)(a1 + 8);
    v14 = *(_OWORD *)(a6 + 16);
    v18[0] = *(_OWORD *)a6;
    v18[1] = v14;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, _OWORD *, uint64_t))(*(_QWORD *)v13 + 32))(v13, a1, a2, a3, a4, a5, v18, a7);
  }
  else
  {
    v15 = *a2;
    v16 = *(_QWORD *)(a5 + 16);
    v19 = "unsupported relocation expression";
    v20 = 259;
    return llvm::MCContext::reportError(v15, v16, (uint64_t)&v19);
  }
}

uint64_t llvm::MachObjectWriter::bindIndirectSymbols(uint64_t this, llvm::MCAssembler *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t *v4;
  int v5;
  int v7;
  uint64_t v8;
  int v9;
  uint64_t *v11;
  uint64_t *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  const char *v17;
  __int16 v18;
  const char *v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  __int16 v23;
  BOOL v24[40];

  v2 = (uint64_t *)*((_QWORD *)a2 + 10);
  v3 = (uint64_t *)*((_QWORD *)a2 + 11);
  if (v2 != v3)
  {
    v4 = (uint64_t *)*((_QWORD *)a2 + 10);
    do
    {
      v5 = *(unsigned __int8 *)(v2[1] + 240);
      if ((v5 - 6) >= 3 && v5 != 20)
      {
        v14 = sub_1C62B94EC((_BYTE *)*v2);
        v23 = 1283;
        v19 = "indirect symbol '";
        v21 = v14;
        v22 = v15;
        v17 = "' not in a symbol pointer or stub section";
        v18 = 259;
        sub_1C6131AAC((uint64_t *)&v19, (uint64_t *)&v17, (uint64_t)v24);
        llvm::report_fatal_error((uint64_t)v24, 1);
      }
      v2 += 2;
    }
    while (v2 != v3);
    v7 = 0;
    v8 = this + 40;
    do
    {
      v9 = *(unsigned __int8 *)(v4[1] + 240);
      if (v9 == 20 || v9 == 6)
      {
        v19 = (const char *)v4[1];
        v20 = v7;
        sub_1C62C29C0((uint64_t)v24, v8, (uint64_t *)&v19, &v20);
        this = llvm::MCAssembler::registerSymbol((uint64_t)a2, *v4, 0);
      }
      ++v7;
      v4 += 2;
    }
    while (v4 != v3);
    v11 = (uint64_t *)*((_QWORD *)a2 + 10);
    v12 = (uint64_t *)*((_QWORD *)a2 + 11);
    if (v11 != v12)
    {
      v13 = 0;
      do
      {
        if (*(unsigned __int8 *)(v11[1] + 240) - 7 <= 1)
        {
          v19 = (const char *)v11[1];
          v20 = v13;
          sub_1C62C29C0((uint64_t)v24, v8, (uint64_t *)&v19, &v20);
          v24[0] = 0;
          this = llvm::MCAssembler::registerSymbol((uint64_t)a2, *v11, v24);
          if (v24[0])
            *(_WORD *)(*v11 + 12) |= 1u;
        }
        v11 += 2;
        ++v13;
      }
      while (v11 != v12);
    }
  }
  return this;
}

uint64_t llvm::MachObjectWriter::computeSymbolTable(uint64_t a1, _QWORD *a2, void **a3, __n128 **a4, uint64_t a5)
{
  uint64_t *v8;
  uint64_t *v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  char v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t i;
  _BYTE *v19;
  _QWORD *v20;
  uint64_t v21;
  uint64_t *v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  unint64_t *v26;
  unint64_t *v27;
  unint64_t v28;
  int v29;
  uint64_t v30;
  unint64_t v31;
  _QWORD *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t Offset;
  uint64_t v39;
  unint64_t v40;
  unint64_t v41;
  unint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  unint64_t v47;
  __n128 *v48;
  unint64_t *v49;
  unint64_t v50;
  __n128 *v51;
  unint64_t *v52;
  __n128 *v53;
  unint64_t v54;
  unint64_t v55;
  unint64_t v56;
  unint64_t v57;
  char *v58;
  unint64_t v59;
  __n128 *v60;
  __n128 *v61;
  __n128 *v62;
  unint64_t v63;
  unint64_t v64;
  unint64_t v65;
  unint64_t v66;
  char *v67;
  __n128 *v68;
  unint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  __n128 *v75;
  __n128 v76;
  char *v77;
  char *v78;
  __int128 v79;
  char *v80;
  char *v81;
  __n128 *v82;
  __n128 v83;
  char *v84;
  uint64_t v85;
  int v86;
  int v87;
  uint64_t *v88;
  uint64_t *v89;
  uint64_t v90;
  int v91;
  uint64_t v93;
  unint64_t v94;
  _QWORD *v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  unint64_t v103;
  void **v104;
  unint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  char v109;
  unint64_t v110;
  char *v111;
  char *v112;
  unint64_t v113;
  char *v114;
  unint64_t v115;
  unint64_t v116;
  unint64_t v117;
  unint64_t v118;
  char *v119;
  char *v120;
  unint64_t v121;
  unint64_t v122;
  unint64_t v123;
  char *v124;
  char *v125;
  __int128 v126;
  __int128 v127;
  uint64_t v128;
  int v129;
  int v130;
  __n128 *v131;
  unint64_t v132;
  uint64_t v133;
  __n128 *v134;
  unint64_t v135;
  uint64_t v136;
  int v137;
  uint64_t v138;
  uint64_t **v139;
  uint64_t *v140;
  uint64_t *v141;
  uint64_t v142;
  uint64_t *v143;
  uint64_t *v144;
  uint64_t v145;
  int v146;
  uint64_t v147;
  unsigned int v148;
  uint64_t v149;
  _QWORD *v150;
  uint64_t v151;
  _QWORD *v152;
  int v153;
  BOOL v154;
  int v155;
  _QWORD *v156;
  _DWORD *v157;
  _DWORD *v158;
  int v159;
  int v160;
  unsigned int v161;
  unsigned int v163;
  uint64_t v165;
  int v166;
  __n128 **v167;
  uint64_t v168;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unsigned int v173;
  _QWORD v174[4];

  v174[3] = *MEMORY[0x1E0C80C00];
  v171 = 0;
  v172 = 0;
  v173 = 0;
  v8 = (uint64_t *)a2[4];
  v9 = (uint64_t *)a2[5];
  if (v8 != v9)
  {
    v10 = 0;
    v11 = 1;
    while (1)
    {
      v12 = *v8;
      v174[0] = 0;
      v13 = v173;
      v14 = sub_1C4F575EC(v10, v173, v12, v174);
      v15 = v174[0];
      if ((v14 & 1) == 0)
        break;
LABEL_9:
      *(_BYTE *)(v15 + 8) = v11;
      ++v8;
      ++v11;
      if (v8 == v9)
        goto LABEL_14;
    }
    if (4 * (int)v172 + 4 >= 3 * v13)
    {
      v16 = 2 * v13;
    }
    else
    {
      if (v13 + ~(_DWORD)v172 - HIDWORD(v172) > v13 >> 3)
      {
LABEL_6:
        LODWORD(v172) = v172 + 1;
        if (*(_QWORD *)v15 != -4096)
          --HIDWORD(v172);
        *(_QWORD *)v15 = v12;
        *(_BYTE *)(v15 + 8) = 0;
        goto LABEL_9;
      }
      v16 = v13;
    }
    sub_1C5960454((uint64_t)&v171, v16);
    v174[0] = 0;
    v10 = v171;
    sub_1C4F575EC(v171, v173, v12, v174);
    v15 = v174[0];
    goto LABEL_6;
  }
LABEL_14:
  v165 = a5;
  v17 = a2[7];
  for (i = a2[8]; v17 != i; v17 += 8)
  {
    v19 = *(_BYTE **)v17;
    if ((*(_DWORD *)(*(_QWORD *)v17 + 8) & 0x201) != 1)
    {
      if ((*v19 & 4) != 0)
      {
        v22 = (uint64_t *)*((_QWORD *)v19 - 1);
        v23 = *v22;
        v20 = v22 + 2;
        v21 = v23;
      }
      else
      {
        v20 = 0;
        v21 = 0;
      }
      v24 = sub_1C5E3DF4C(v20, (uint64_t)v20 + v21);
      llvm::StringTableBuilder::add(a1 + 88, (uint64_t)v20, v21 | ((unint64_t)v24 << 32));
    }
  }
  v170 = a1 + 88;
  llvm::StringTableBuilder::finalizeStringTable((llvm::StringTableBuilder *)(a1 + 88), 1);
  v25 = v165;
  v27 = (unint64_t *)a2[7];
  v26 = (unint64_t *)a2[8];
  if (v27 == v26)
    goto LABEL_191;
  v167 = a4;
  v168 = v171;
  v166 = v173;
  v163 = v173 - 1;
  do
  {
    v28 = *v27;
    v29 = *(_DWORD *)(*v27 + 8);
    if ((v29 & 0x201) == 1)
      goto LABEL_107;
    v30 = *(_QWORD *)v28;
    if ((v29 & 0x10) == 0)
    {
      v31 = v30 & 0xFFFFFFFFFFFFFFF8;
      if ((v29 & 0x1C00) == 0x800 && v31 == 0)
      {
        *(_DWORD *)(v28 + 8) = v29 | 4;
        llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v28 + 24));
        v30 = *(_QWORD *)v28 & 7 | v85;
        *(_QWORD *)v28 = v30;
        if (v85)
          goto LABEL_107;
      }
      else if (v31)
      {
        goto LABEL_107;
      }
    }
    if ((v30 & 4) != 0)
    {
      v35 = *(uint64_t **)(v28 - 8);
      v36 = *v35;
      v33 = v35 + 2;
      v34 = v36;
    }
    else
    {
      v33 = 0;
      v34 = 0;
    }
    v37 = sub_1C5E3DF4C(v33, (uint64_t)v33 + v34);
    Offset = llvm::StringTableBuilder::getOffset(v170, (uint64_t)v33, v34 | ((unint64_t)v37 << 32));
    v39 = *(_QWORD *)v28;
    v40 = *(_QWORD *)v28 & 0xFFFFFFFFFFFFFFF8;
    if (!v40 && (*(_DWORD *)(v28 + 8) & 0x1C00) == 0x800)
    {
      *(_DWORD *)(v28 + 8) |= 4u;
      llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v28 + 24));
      v39 = *(_QWORD *)v28 & 7 | v40;
      *(_QWORD *)v28 = v39;
    }
    if (v40)
    {
      v41 = v39 & 0xFFFFFFFFFFFFFFF8;
      if ((v39 & 0xFFFFFFFFFFFFFFF8) == 0 && (*(_DWORD *)(v28 + 8) & 0x1C00) == 0x800)
      {
        *(_DWORD *)(v28 + 8) |= 4u;
        llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v28 + 24));
        v39 = *(_QWORD *)v28 & 7 | v41;
        *(_QWORD *)v28 = v39;
      }
      if ((_UNKNOWN *)v41 == llvm::MCSymbol::AbsolutePseudoFragment)
      {
        v51 = a4[1];
        v50 = (unint64_t)a4[2];
        if ((unint64_t)v51 >= v50)
        {
          v68 = *a4;
          v69 = 0xAAAAAAAAAAAAAAABLL * (((char *)v51 - (char *)*a4) >> 3);
          v70 = v69 + 1;
          if (v69 + 1 > 0xAAAAAAAAAAAAAAALL)
LABEL_229:
            abort();
          v71 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v50 - (_QWORD)v68) >> 3);
          if (2 * v71 > v70)
            v70 = 2 * v71;
          if (v71 >= 0x555555555555555)
            v72 = 0xAAAAAAAAAAAAAAALL;
          else
            v72 = v70;
          if (v72)
          {
            if (v72 > 0xAAAAAAAAAAAAAAALL)
LABEL_230:
              sub_1C4764EE4();
            v73 = (char *)operator new(24 * v72);
          }
          else
          {
            v73 = 0;
          }
          v81 = &v73[24 * v69];
          *(_QWORD *)v81 = v28;
          *((_QWORD *)v81 + 1) = Offset;
          v81[16] = 0;
          v82 = (__n128 *)v81;
          if (v51 == v68)
          {
            a4 = v167;
          }
          else
          {
            a4 = v167;
            do
            {
              v83 = *(__n128 *)((char *)v51 - 24);
              v82[-1].n128_u64[1] = v51[-1].n128_u64[1];
              *(__n128 *)((char *)v82 - 24) = v83;
              v82 = (__n128 *)((char *)v82 - 24);
              v51 = (__n128 *)((char *)v51 - 24);
            }
            while (v51 != v68);
            v51 = *v167;
          }
          v84 = &v73[24 * v72];
          v52 = (unint64_t *)(v81 + 24);
          *a4 = v82;
          a4[1] = (__n128 *)(v81 + 24);
          a4[2] = (__n128 *)v84;
          if (v51)
            operator delete(v51);
        }
        else
        {
          v51->n128_u64[0] = v28;
          v51->n128_u64[1] = Offset;
          v52 = &v51[1].n128_u64[1];
          v51[1].n128_u8[0] = 0;
        }
        a4[1] = (__n128 *)v52;
      }
      else
      {
        v42 = v39 & 0xFFFFFFFFFFFFFFF8;
        if ((v39 & 0xFFFFFFFFFFFFFFF8) == 0 && (*(_DWORD *)(v28 + 8) & 0x1C00) == 0x800)
        {
          *(_DWORD *)(v28 + 8) |= 4u;
          llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v28 + 24));
          *(_QWORD *)v28 = *(_QWORD *)v28 & 7 | v42;
        }
        if (v166)
        {
          v43 = *(_QWORD *)(v42 + 16);
          v44 = ((v43 >> 4) ^ (v43 >> 9)) & v163;
          v45 = *(_QWORD *)(v168 + 16 * v44);
          if (v43 == v45)
          {
LABEL_40:
            v46 = *(_BYTE *)(v168 + 16 * v44 + 8);
          }
          else
          {
            v86 = 1;
            while (v45 != -4096)
            {
              v87 = v44 + v86++;
              v44 = v87 & v163;
              v45 = *(_QWORD *)(v168 + 16 * v44);
              if (v43 == v45)
                goto LABEL_40;
            }
            v46 = 0;
          }
        }
        else
        {
          v46 = 0;
        }
        v60 = a4[1];
        v59 = (unint64_t)a4[2];
        if ((unint64_t)v60 >= v59)
        {
          v62 = *a4;
          v63 = 0xAAAAAAAAAAAAAAABLL * (((char *)v60 - (char *)*a4) >> 3);
          v64 = v63 + 1;
          if (v63 + 1 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_229;
          v65 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v59 - (_QWORD)v62) >> 3);
          if (2 * v65 > v64)
            v64 = 2 * v65;
          if (v65 >= 0x555555555555555)
            v66 = 0xAAAAAAAAAAAAAAALL;
          else
            v66 = v64;
          if (v66)
          {
            if (v66 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_230;
            v67 = (char *)operator new(24 * v66);
          }
          else
          {
            v67 = 0;
          }
          v74 = &v67[24 * v63];
          *(_QWORD *)v74 = v28;
          *((_QWORD *)v74 + 1) = Offset;
          v74[16] = v46;
          v75 = (__n128 *)v74;
          if (v60 == v62)
          {
            a4 = v167;
          }
          else
          {
            a4 = v167;
            do
            {
              v76 = *(__n128 *)((char *)v60 - 24);
              v75[-1].n128_u64[1] = v60[-1].n128_u64[1];
              *(__n128 *)((char *)v75 - 24) = v76;
              v75 = (__n128 *)((char *)v75 - 24);
              v60 = (__n128 *)((char *)v60 - 24);
            }
            while (v60 != v62);
            v60 = *v167;
          }
          v61 = (__n128 *)(v74 + 24);
          *a4 = v75;
          a4[1] = (__n128 *)(v74 + 24);
          a4[2] = (__n128 *)&v67[24 * v66];
          if (v60)
            operator delete(v60);
          v25 = v165;
        }
        else
        {
          v60->n128_u64[0] = v28;
          v60->n128_u64[1] = Offset;
          v61 = (__n128 *)((char *)v60 + 24);
          v60[1].n128_u8[0] = v46;
        }
        a4[1] = v61;
      }
    }
    else
    {
      v48 = *(__n128 **)(v25 + 8);
      v47 = *(_QWORD *)(v25 + 16);
      if ((unint64_t)v48 >= v47)
      {
        v53 = *(__n128 **)v25;
        v54 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v48 - *(_QWORD *)v25) >> 3);
        v55 = v54 + 1;
        if (v54 + 1 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_229;
        v56 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v47 - (_QWORD)v53) >> 3);
        if (2 * v56 > v55)
          v55 = 2 * v56;
        if (v56 >= 0x555555555555555)
          v57 = 0xAAAAAAAAAAAAAAALL;
        else
          v57 = v55;
        if (v57)
        {
          if (v57 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_230;
          v58 = (char *)operator new(24 * v57);
        }
        else
        {
          v58 = 0;
        }
        v77 = &v58[24 * v54];
        *(_QWORD *)v77 = v28;
        *((_QWORD *)v77 + 1) = Offset;
        v77[16] = 0;
        v78 = v77;
        if (v48 == v53)
        {
          a4 = v167;
        }
        else
        {
          a4 = v167;
          do
          {
            v79 = *(__int128 *)((char *)&v48[-2] + 8);
            *((_QWORD *)v78 - 1) = v48[-1].n128_u64[1];
            *(_OWORD *)(v78 - 24) = v79;
            v78 -= 24;
            v48 = (__n128 *)((char *)v48 - 24);
          }
          while (v48 != v53);
          v48 = *(__n128 **)v25;
        }
        v80 = &v58[24 * v57];
        v49 = (unint64_t *)(v77 + 24);
        *(_QWORD *)v25 = v78;
        *(_QWORD *)(v25 + 8) = v77 + 24;
        *(_QWORD *)(v25 + 16) = v80;
        if (v48)
          operator delete(v48);
      }
      else
      {
        v48->n128_u64[0] = v28;
        v48->n128_u64[1] = Offset;
        v49 = &v48[1].n128_u64[1];
        v48[1].n128_u8[0] = 0;
      }
      *(_QWORD *)(v25 + 8) = v49;
    }
LABEL_107:
    ++v27;
  }
  while (v27 != v26);
  v88 = (uint64_t *)a2[7];
  v89 = (uint64_t *)a2[8];
  if (v88 != v89)
  {
    while (1)
    {
      v90 = *v88;
      v91 = *(_DWORD *)(*v88 + 8);
      if ((v91 & 0x201) == 1 || (v91 & 0x10) != 0)
        goto LABEL_179;
      v93 = *(_QWORD *)v90;
      v94 = *(_QWORD *)v90 & 0xFFFFFFFFFFFFFFF8;
      if ((v91 & 0x1C00) == 0x800 && v94 == 0)
        break;
      if (v94)
        goto LABEL_129;
LABEL_179:
      if (++v88 == v89)
        goto LABEL_191;
    }
    *(_DWORD *)(v90 + 8) = v91 | 4;
    llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v90 + 24));
    v93 = *(_QWORD *)v90 & 7 | v128;
    *(_QWORD *)v90 = v93;
    if (!v128)
      goto LABEL_179;
LABEL_129:
    if ((v93 & 4) != 0)
    {
      v98 = *(uint64_t **)(v90 - 8);
      v99 = *v98;
      v96 = v98 + 2;
      v97 = v99;
    }
    else
    {
      v96 = 0;
      v97 = 0;
    }
    v100 = sub_1C5E3DF4C(v96, (uint64_t)v96 + v97);
    v101 = llvm::StringTableBuilder::getOffset(v170, (uint64_t)v96, v97 | ((unint64_t)v100 << 32));
    v102 = *(_QWORD *)v90;
    v103 = *(_QWORD *)v90 & 0xFFFFFFFFFFFFFFF8;
    if (v103)
    {
      v104 = a3;
    }
    else
    {
      v104 = a3;
      if ((*(_DWORD *)(v90 + 8) & 0x1C00) == 0x800)
      {
        *(_DWORD *)(v90 + 8) |= 4u;
        llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v90 + 24));
        v104 = a3;
        v102 = *(_QWORD *)v90 & 7 | v103;
        *(_QWORD *)v90 = v102;
      }
    }
    if ((_UNKNOWN *)v103 == llvm::MCSymbol::AbsolutePseudoFragment)
    {
      v111 = (char *)v104[1];
      v110 = (unint64_t)v104[2];
      if ((unint64_t)v111 < v110)
      {
        *(_QWORD *)v111 = v90;
        *((_QWORD *)v111 + 1) = v101;
        v112 = v111 + 24;
        v111[16] = 0;
LABEL_178:
        v104[1] = v112;
        goto LABEL_179;
      }
      v120 = (char *)*v104;
      v121 = 0xAAAAAAAAAAAAAAABLL * ((v111 - (_BYTE *)*v104) >> 3);
      v122 = v121 + 1;
      if (v121 + 1 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_229;
      v123 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v110 - (_QWORD)v120) >> 3);
      if (2 * v123 > v122)
        v122 = 2 * v123;
      if (v123 >= 0x555555555555555)
        v118 = 0xAAAAAAAAAAAAAAALL;
      else
        v118 = v122;
      if (v118)
      {
        if (v118 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_230;
        v119 = (char *)operator new(24 * v118);
        v104 = a3;
      }
      else
      {
        v119 = 0;
      }
      v124 = &v119[24 * v121];
      *(_QWORD *)v124 = v90;
      *((_QWORD *)v124 + 1) = v101;
      v124[16] = 0;
      v125 = v124;
      if (v111 == v120)
      {
        a4 = v167;
      }
      else
      {
        a4 = v167;
        do
        {
          v127 = *(_OWORD *)(v111 - 24);
          *((_QWORD *)v125 - 1) = *((_QWORD *)v111 - 1);
          *(_OWORD *)(v125 - 24) = v127;
          v125 -= 24;
          v111 -= 24;
        }
        while (v111 != v120);
LABEL_174:
        v111 = (char *)*v104;
      }
    }
    else
    {
      v105 = v102 & 0xFFFFFFFFFFFFFFF8;
      if ((v102 & 0xFFFFFFFFFFFFFFF8) == 0 && (*(_DWORD *)(v90 + 8) & 0x1C00) == 0x800)
      {
        *(_DWORD *)(v90 + 8) |= 4u;
        llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v90 + 24));
        v104 = a3;
        *(_QWORD *)v90 = *(_QWORD *)v90 & 7 | v105;
      }
      if (v166)
      {
        v106 = *(_QWORD *)(v105 + 16);
        v107 = ((v106 >> 4) ^ (v106 >> 9)) & v163;
        v108 = *(_QWORD *)(v168 + 16 * v107);
        if (v106 == v108)
        {
LABEL_138:
          v109 = *(_BYTE *)(v168 + 16 * v107 + 8);
        }
        else
        {
          v129 = 1;
          while (v108 != -4096)
          {
            v130 = v107 + v129++;
            v107 = v130 & v163;
            v108 = *(_QWORD *)(v168 + 16 * v107);
            if (v106 == v108)
              goto LABEL_138;
          }
          v109 = 0;
        }
      }
      else
      {
        v109 = 0;
      }
      v111 = (char *)v104[1];
      v113 = (unint64_t)v104[2];
      if ((unint64_t)v111 < v113)
      {
        *(_QWORD *)v111 = v90;
        *((_QWORD *)v111 + 1) = v101;
        v112 = v111 + 24;
        v111[16] = v109;
        goto LABEL_178;
      }
      v114 = (char *)*v104;
      v115 = 0xAAAAAAAAAAAAAAABLL * ((v111 - (_BYTE *)*v104) >> 3);
      v116 = v115 + 1;
      if (v115 + 1 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_229;
      v117 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v113 - (_QWORD)v114) >> 3);
      if (2 * v117 > v116)
        v116 = 2 * v117;
      if (v117 >= 0x555555555555555)
        v118 = 0xAAAAAAAAAAAAAAALL;
      else
        v118 = v116;
      if (v118)
      {
        if (v118 > 0xAAAAAAAAAAAAAAALL)
          goto LABEL_230;
        v119 = (char *)operator new(24 * v118);
        v104 = a3;
      }
      else
      {
        v119 = 0;
      }
      v124 = &v119[24 * v115];
      *(_QWORD *)v124 = v90;
      *((_QWORD *)v124 + 1) = v101;
      v124[16] = v109;
      v125 = v124;
      if (v111 != v114)
      {
        a4 = v167;
        do
        {
          v126 = *(_OWORD *)(v111 - 24);
          *((_QWORD *)v125 - 1) = *((_QWORD *)v111 - 1);
          *(_OWORD *)(v125 - 24) = v126;
          v125 -= 24;
          v111 -= 24;
        }
        while (v111 != v114);
        goto LABEL_174;
      }
      a4 = v167;
    }
    v112 = v124 + 24;
    *v104 = v125;
    v104[1] = v124 + 24;
    v104[2] = &v119[24 * v118];
    if (v111)
    {
      operator delete(v111);
      v104 = a3;
    }
    v25 = v165;
    goto LABEL_178;
  }
LABEL_191:
  v131 = a4[1];
  v132 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((char *)v131 - (char *)*a4) >> 3));
  if (v131 == *a4)
    v133 = 0;
  else
    v133 = v132;
  sub_1C596050C(*a4, v131, v133, 1);
  v134 = *(__n128 **)(v25 + 8);
  v135 = 126 - 2 * __clz(0xAAAAAAAAAAAAAAABLL * (((uint64_t)v134 - *(_QWORD *)v25) >> 3));
  if (v134 == *(__n128 **)v25)
    v136 = 0;
  else
    v136 = v135;
  sub_1C596050C(*(__n128 **)v25, v134, v136, 1);
  v137 = 0;
  v138 = 0;
  v174[0] = a3;
  v174[1] = a4;
  v174[2] = v25;
  do
  {
    v139 = (uint64_t **)v174[v138];
    v140 = *v139;
    v141 = v139[1];
    while (v140 != v141)
    {
      v142 = *v140;
      v140 += 3;
      *(_DWORD *)(v142 + 16) = v137++;
    }
    ++v138;
  }
  while (v138 != 3);
  v143 = (uint64_t *)a2[4];
  v144 = (uint64_t *)a2[5];
  if (v143 != v144)
  {
    while (2)
    {
      v145 = *v143;
      v174[0] = *v143;
      v146 = *(_DWORD *)(a1 + 32);
      if (v146)
      {
        v147 = *(_QWORD *)(a1 + 16);
        v148 = v146 - 1;
        v149 = v148 & ((v145 >> 4) ^ (v145 >> 9));
        v150 = (_QWORD *)(v147 + 32 * v149);
        v151 = *v150;
        if (v145 != *v150)
        {
          v152 = 0;
          v153 = 1;
          while (v151 != -4096)
          {
            if (v152)
              v154 = 0;
            else
              v154 = v151 == -8192;
            if (v154)
              v152 = v150;
            v155 = v149 + v153++;
            v149 = v155 & v148;
            v150 = (_QWORD *)(v147 + 32 * v149);
            v151 = *v150;
            if (v145 == *v150)
              goto LABEL_218;
          }
          if (v152)
            v156 = v152;
          else
            v156 = v150;
LABEL_217:
          v150 = sub_1C4B081A0((uint64_t *)(a1 + 16), (uint64_t)v174, v174, v156);
          *v150 = v174[0];
          v150[1] = 0;
          v150[2] = 0;
          v150[3] = 0;
        }
LABEL_218:
        v157 = (_DWORD *)v150[1];
        v158 = (_DWORD *)v150[2];
        while (v157 != v158)
        {
          if (*(_QWORD *)v157)
          {
            v159 = *(_DWORD *)(*(_QWORD *)v157 + 16);
            v160 = v157[3] | (v159 << 8) | 0x10;
            v161 = v159 | v157[3] & 0xFF000000 | 0x8000000;
            if (*(_DWORD *)(a1 + 216) != 1)
              v161 = v160;
            v157[3] = v161;
          }
          v157 += 4;
        }
        if (++v143 == v144)
          return MEMORY[0x1CAA32FB4](v171, 8);
        continue;
      }
      break;
    }
    v156 = 0;
    goto LABEL_217;
  }
  return MEMORY[0x1CAA32FB4](v171, 8);
}

void llvm::MachObjectWriter::computeSectionAddresses(llvm::MachObjectWriter *this, const llvm::MCAssembler *a2, const llvm::MCAsmLayout *a3)
{
  uint64_t v3;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  char v9;
  unsigned int v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t *v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  BOOL v19;
  unsigned int v20;
  uint64_t v21;
  const llvm::MCFragment *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  int v32;
  uint64_t v33;
  const llvm::MCFragment *v34;
  uint64_t v35;
  uint64_t v36;
  unsigned int v37;
  uint64_t v38;
  _BYTE *v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  char *v43;
  uint64_t *v44;
  uint64_t *v45;

  v3 = *((unsigned int *)a3 + 4);
  if ((_DWORD)v3)
  {
    v6 = 0;
    v7 = (uint64_t *)*((_QWORD *)a3 + 1);
    v43 = (char *)this + 64;
    v44 = &v7[v3];
    while (1)
    {
      v8 = *v7;
      v9 = *(_BYTE *)(*v7 + 24);
      v10 = *((_DWORD *)this + 20);
      v11 = *v7 >> 4;
      if (v10)
      {
        v12 = *((_QWORD *)this + 8);
        v13 = v10 - 1;
        v14 = (v11 ^ (v8 >> 9)) & (v10 - 1);
        v15 = (uint64_t *)(v12 + 16 * v14);
        v16 = *v15;
        if (v8 == *v15)
          goto LABEL_13;
        v17 = 0;
        v18 = 1;
        while (v16 != -4096)
        {
          if (v17)
            v19 = 0;
          else
            v19 = v16 == -8192;
          if (v19)
            v17 = v15;
          v20 = v14 + v18++;
          v14 = v20 & v13;
          v15 = (uint64_t *)(v12 + 16 * (v20 & v13));
          v16 = *v15;
          if (v8 == *v15)
            goto LABEL_13;
        }
        if (v17)
          v15 = v17;
      }
      else
      {
        v15 = 0;
      }
      v42 = *((_DWORD *)this + 18);
      if (4 * v42 + 4 >= 3 * v10)
        break;
      if (v10 + ~v42 - *((_DWORD *)this + 19) <= v10 >> 3)
        goto LABEL_35;
LABEL_30:
      ++*((_DWORD *)this + 18);
      if (*v15 != -4096)
        --*((_DWORD *)this + 19);
      *v15 = v8;
      v15[1] = 0;
LABEL_13:
      v21 = (v6 + (1 << v9) - 1) & -(uint64_t)(1 << v9);
      v15[1] = v21;
      v22 = *(const llvm::MCFragment **)(v8 + 104);
      llvm::MCAsmLayout::ensureValid(a3, v22);
      v23 = *((_QWORD *)v22 + 4);
      llvm::MCAssembler::computeFragmentSize(*(_QWORD *)a3, (uint64_t)a3, (uint64_t)v22);
      v25 = v24;
      v26 = *((_DWORD *)this + 20);
      if (v26)
      {
        v27 = *((_QWORD *)this + 8);
        v28 = v26 - 1;
        v29 = (v26 - 1) & (v11 ^ (v8 >> 9));
        v30 = *(_QWORD *)(v27 + 16 * v29);
        if (v30 == v8)
        {
LABEL_18:
          v33 = *(_QWORD *)(v27 + 16 * v29 + 8);
          goto LABEL_19;
        }
        v31 = 1;
        while (v30 != -4096)
        {
          v32 = v29 + v31++;
          v29 = v32 & v28;
          v30 = *(_QWORD *)(v27 + 16 * v29);
          if (v30 == v8)
            goto LABEL_18;
        }
      }
      v33 = 0;
LABEL_19:
      v34 = *(const llvm::MCFragment **)(v8 + 104);
      llvm::MCAsmLayout::ensureValid(a3, v34);
      v35 = *((_QWORD *)v34 + 4);
      llvm::MCAssembler::computeFragmentSize(*(_QWORD *)a3, (uint64_t)a3, (uint64_t)v34);
      v37 = *(_DWORD *)(v8 + 32) + 1;
      if (*((_DWORD *)a3 + 4) <= v37
        || (v38 = v36,
            v39 = *(_BYTE **)(*((_QWORD *)a3 + 1) + 8 * v37),
            ((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v39 + 16))(v39) & 1) != 0))
      {
        v41 = 0;
      }
      else
      {
        v40 = 1 << (63 - __clz((1 << v39[24])));
        v41 = ((v35 + v33 + v38 + v40 - 1) & -v40) - (v35 + v33 + v38);
      }
      v6 = v23 + v21 + v25 + v41;
      if (++v7 == v44)
        return;
    }
    v10 *= 2;
LABEL_35:
    sub_1C596122C((uint64_t)v43, v10);
    v45 = 0;
    sub_1C5960088(*((_QWORD *)this + 8), *((_DWORD *)this + 20), v8, &v45);
    v15 = v45;
    goto LABEL_30;
  }
}

uint64_t llvm::MachObjectWriter::executePostLayoutBinding(llvm::MachObjectWriter *this, llvm::MCAssembler *a2, const llvm::MCAsmLayout *a3)
{
  llvm::MachObjectWriter::computeSectionAddresses(this, a2, a3);
  return llvm::MachObjectWriter::bindIndirectSymbols((uint64_t)this, a2);
}

uint64_t llvm::MachObjectWriter::isSymbolRefDifferenceFullyResolvedImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((*(_DWORD *)(a3 + 8) & 0x1C00) == 0x800 || (*(_DWORD *)(a4 + 8) & 0x1C00) == 0x800)
    return 0;
  else
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 48))(a1);
}

void llvm::MachObjectWriter::isSymbolRefDifferenceFullyResolvedImpl(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, int a6)
{
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;

  if ((a5 & 1) != 0)
    return;
  while ((*(_DWORD *)(a3 + 8) & 0x1C00) == 0x800)
  {
    *(_DWORD *)(a3 + 8) |= 4u;
    v10 = *(_QWORD *)(a3 + 24);
    if (*(_BYTE *)v10 != 2)
      break;
    a3 = *(_QWORD *)(v10 + 16);
  }
  v11 = *(_QWORD *)a3;
  v12 = *(_QWORD *)a3 & 0xFFFFFFFFFFFFFFF8;
  if (!v12 && (*(_DWORD *)(a3 + 8) & 0x1C00) == 0x800)
  {
    *(_DWORD *)(a3 + 8) |= 4u;
    llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(a3 + 24));
    v11 = *(_QWORD *)a3 & 7 | v12;
    *(_QWORD *)a3 = v11;
  }
  v13 = *(_QWORD *)(v12 + 16);
  v14 = *(_QWORD *)(a4 + 16);
  if (!a6)
    goto LABEL_16;
  if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 12) != 16777223)
  {
    v17 = v11 & 0xFFFFFFFFFFFFFFF8;
    if ((v11 & 0xFFFFFFFFFFFFFFF8) == 0 && (*(_DWORD *)(a3 + 8) & 0x1C00) == 0x800)
    {
      *(_DWORD *)(a3 + 8) |= 4u;
      llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(a3 + 24));
      v11 = *(_QWORD *)a3 & 7 | v17;
      *(_QWORD *)a3 = v11;
    }
    if (v17)
    {
      v18 = v11 & 0xFFFFFFFFFFFFFFF8;
      if ((v11 & 0xFFFFFFFFFFFFFFF8) == 0 && (*(_DWORD *)(a3 + 8) & 0x1C00) == 0x800)
      {
        *(_DWORD *)(a3 + 8) |= 4u;
        llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(a3 + 24));
        v11 = *(_QWORD *)a3 & 7 | v18;
        *(_QWORD *)a3 = v11;
      }
      if ((_UNKNOWN *)v18 != llvm::MCSymbol::AbsolutePseudoFragment && v13 == v14)
      {
        v20 = *(_DWORD *)(a3 + 8);
        if ((v20 & 1) == 0 && (v11 & 0xFFFFFFFFFFFFFFF8) == 0 && (*(_DWORD *)(a3 + 8) & 0x1C00) == 0x800)
        {
          *(_DWORD *)(a3 + 8) = v20 | 4;
          llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(a3 + 24));
          *(_QWORD *)a3 = *(_QWORD *)a3 & 7 | v23;
        }
      }
    }
    return;
  }
  if (*(_QWORD *)(a4 + 24))
    goto LABEL_16;
  v15 = *(_DWORD *)(a3 + 8);
  if ((v15 & 1) == 0)
    goto LABEL_16;
  if ((v11 & 0xFFFFFFFFFFFFFFF8) == 0 && (*(_DWORD *)(a3 + 8) & 0x1C00) == 0x800)
  {
    *(_DWORD *)(a3 + 8) = v15 | 4;
    llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(a3 + 24));
    v11 = *(_QWORD *)a3 & 7 | v22;
    *(_QWORD *)a3 = v11;
    if (v22)
      goto LABEL_13;
LABEL_16:
    if (v13 == v14 && (v11 & 0xFFFFFFFFFFFFFFF8) == 0 && (*(_DWORD *)(a3 + 8) & 0x1C00) == 0x800)
    {
      *(_DWORD *)(a3 + 8) |= 4u;
      llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(a3 + 24));
      *(_QWORD *)a3 = *(_QWORD *)a3 & 7 | v21;
    }
    return;
  }
  if ((v11 & 0xFFFFFFFFFFFFFFF8) == 0)
    goto LABEL_16;
LABEL_13:
  v16 = v11 & 0xFFFFFFFFFFFFFFF8;
  if ((v11 & 0xFFFFFFFFFFFFFFF8) == 0 && (*(_DWORD *)(a3 + 8) & 0x1C00) == 0x800)
  {
    *(_DWORD *)(a3 + 8) |= 4u;
    llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(a3 + 24));
    v11 = *(_QWORD *)a3 & 7 | v16;
    *(_QWORD *)a3 = v11;
  }
  if ((_UNKNOWN *)v16 == llvm::MCSymbol::AbsolutePseudoFragment || v13 != v14)
    goto LABEL_16;
}

uint64_t llvm::MachObjectWriter::writeObject(llvm::MachObjectWriter *this, llvm::MCAssembler *a2, const llvm::MCAsmLayout *a3)
{
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  int v14;
  int v15;
  unint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  llvm::MCLOHDirective *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  unint64_t v26;
  unsigned int v27;
  uint64_t v28;
  unint64_t v29;
  unsigned int v30;
  uint64_t *v31;
  uint64_t *v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  int v41;
  int v42;
  int v43;
  uint64_t v44;
  uint64_t *v45;
  unint64_t v46;
  unint64_t v47;
  uint64_t v48;
  int v49;
  unsigned int v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  int v56;
  const llvm::MCFragment *v57;
  uint64_t v58;
  uint64_t SectionFileSize;
  int v60;
  uint64_t v61;
  unsigned int v62;
  uint64_t v63;
  uint64_t v64;
  int v65;
  int v66;
  uint64_t v67;
  const llvm::MCFragment *v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  _BYTE *v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  unint64_t v77;
  char v78;
  unint64_t v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t v86;
  _QWORD *v87;
  _QWORD *v88;
  uint64_t v89;
  int v90;
  unsigned int v91;
  uint64_t v92;
  unsigned int v93;
  uint64_t v94;
  _QWORD *v95;
  uint64_t v96;
  _QWORD *v97;
  int v98;
  BOOL v99;
  int v100;
  _QWORD *v101;
  uint64_t v102;
  uint64_t v103;
  int v104;
  uint64_t v105;
  unsigned int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  int v112;
  uint64_t v113;
  unsigned int v114;
  unsigned int v115;
  int v116;
  int v117;
  unint64_t v118;
  unint64_t v119;
  unsigned int v120;
  unsigned int v121;
  unsigned int v122;
  unsigned int v123;
  unsigned int v124;
  uint64_t v125;
  unsigned int v126;
  unint64_t v127;
  unint64_t v128;
  unsigned int v129;
  unsigned int v130;
  int v131;
  unsigned int v132;
  uint64_t *v133;
  uint64_t *v134;
  const void **v135;
  const void **v136;
  char v137;
  BOOL v138;
  const void *v139;
  size_t v140;
  size_t v141;
  const llvm::MCSection **v142;
  const llvm::MCSection **v143;
  const llvm::MCSection *v144;
  int v145;
  uint64_t v146;
  unsigned int v147;
  uint64_t v148;
  const llvm::MCSection *v149;
  int v150;
  int v151;
  uint64_t v152;
  const llvm::MCFragment *v153;
  uint64_t v154;
  uint64_t v155;
  unsigned int v156;
  uint64_t v157;
  _BYTE *v158;
  char v159;
  uint64_t v160;
  uint64_t *v161;
  uint64_t *v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  unsigned int v166;
  uint64_t v167;
  _QWORD *v168;
  uint64_t v169;
  _QWORD *v170;
  int v171;
  BOOL v172;
  int v173;
  _QWORD *v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unsigned int v178;
  llvm::raw_ostream *v179;
  unsigned int v180;
  unsigned int v181;
  llvm::raw_ostream *v182;
  unsigned int v183;
  const llvm::MCSymbol **v184;
  unsigned __int16 *v185;
  unsigned int SymbolAddress;
  const llvm::MCSymbol *v187;
  unsigned int v188;
  int v189;
  llvm::raw_ostream *v190;
  unsigned int v191;
  unsigned int v192;
  __int16 v193;
  llvm::raw_ostream *v194;
  unsigned int v195;
  __int16 v196;
  unsigned int v197;
  llvm::raw_ostream *v198;
  unsigned int v199;
  uint64_t v200;
  llvm::MCLOHDirective *v201;
  uint64_t v202;
  int v203;
  uint64_t *v204;
  uint64_t *i;
  uint64_t v206;
  unint64_t v207;
  int v208;
  unint64_t v209;
  unsigned int v211;
  llvm::raw_ostream *v212;
  unsigned int v213;
  unsigned int v214;
  uint64_t v215;
  char **v216;
  char *v217;
  char *v218;
  _QWORD *v219;
  uint64_t v221;
  char *v222;
  unint64_t v223;
  BOOL v224;
  std::string *v225;
  std::string::size_type v226;
  uint64_t v227;
  _QWORD *v228;
  _QWORD *v229;
  unsigned int v230;
  unsigned int v231;
  unsigned int v232;
  llvm::raw_ostream *v233;
  unsigned int v234;
  unsigned int v235;
  llvm::raw_ostream *v236;
  unint64_t v237;
  unint64_t v238;
  int v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  unsigned int v244;
  int v245;
  unsigned int v246[2];
  uint64_t v247;
  unsigned int v248[2];
  uint64_t *v249;
  llvm::MCAssembler *v250;
  unint64_t v251;
  uint64_t v252;
  uint64_t v253;
  unint64_t v254;
  unint64_t v255;
  uint64_t v256;
  unsigned int v257[2];
  unsigned int v258;
  unint64_t v259;
  unint64_t v260;
  std::string v261;
  char v262[16];
  std::string::size_type v263;
  char v264[8];
  char *v265;
  _QWORD v266[2];
  __int16 v267;
  int v268;
  uint64_t v269;

  v269 = *MEMORY[0x1E0C80C00];
  v6 = (_QWORD *)*((_QWORD *)this + 26);
  v7 = (*(uint64_t (**)(_QWORD *))(*v6 + 80))(v6);
  v242 = v6[4];
  v243 = v7;
  v241 = v6[2];
  llvm::MachObjectWriter::computeSymbolTable((uint64_t)this, a2, (void **)this + 17, (__n128 **)this + 20, (uint64_t)this + 184);
  if (*((_QWORD *)a2 + 273) != *((_QWORD *)a2 + 274))
  {
    v227 = *(_QWORD *)(llvm::MCContext::getMachOSection(*(_QWORD *)a2, (uint64_t)"__LLVM", 6uLL, (uint64_t)"__cg_profile", 12, 0, 0, 0, 0)+ 112);
    if (*(_BYTE *)(v227 + 48) != 1)
      v227 = 0;
    *(_QWORD *)(v227 + 72) = 0;
    sub_1C613932C((uint64_t)v264, v227 + 64);
    v228 = (_QWORD *)*((_QWORD *)a2 + 273);
    v229 = (_QWORD *)*((_QWORD *)a2 + 274);
    while (v228 != v229)
    {
      v230 = *(_DWORD *)(*(_QWORD *)(*v228 + 16) + 16);
      v231 = *(_DWORD *)(*(_QWORD *)(v228[1] + 16) + 16);
      v232 = bswap32(v230);
      if ((*((_DWORD *)this + 54) - 1) >= 2)
        v230 = v232;
      *(_DWORD *)v262 = v230;
      v233 = llvm::raw_ostream::write((llvm::raw_ostream *)v264, v262, 4uLL);
      v234 = bswap32(v231);
      if ((*((_DWORD *)this + 54) - 1) >= 2)
        v235 = v234;
      else
        v235 = v231;
      *(_DWORD *)v262 = v235;
      v236 = llvm::raw_ostream::write(v233, v262, 4uLL);
      v237 = v228[2];
      v238 = bswap64(v237);
      if ((*((_DWORD *)this + 54) - 1) >= 2)
        v237 = v238;
      *(_QWORD *)v262 = v237;
      llvm::raw_ostream::write(v236, v262, 8uLL);
      v228 += 3;
    }
    *(_QWORD *)v264 = off_1E81A6E70;
    if (v268 == 1 && v266[0])
      MEMORY[0x1CAA32F9C](v266[0], 0x1000C8077774924);
  }
  v8 = *(_QWORD *)a3;
  v9 = *(_BYTE *)(*((_QWORD *)this + 1) + 8) & 1;
  v10 = 80;
  if ((*(_BYTE *)(*((_QWORD *)this + 1) + 8) & 1) == 0)
    v10 = 68;
  v11 = 72;
  if ((*(_BYTE *)(*((_QWORD *)this + 1) + 8) & 1) == 0)
    v11 = 56;
  v12 = v11 + v10 * (unint64_t)((uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 3);
  v240 = *(_QWORD *)a3 + 2072;
  if (*(_DWORD *)(v8 + 2080))
  {
    v13 = v12 + 16;
    v12 += 24;
    if (!*(_BYTE *)(*(_QWORD *)a3 + 2072))
      v12 = v13;
    v14 = 2;
  }
  else
  {
    v14 = 1;
  }
  if (*(_DWORD *)(v8 + 2116))
  {
    v12 += 24;
    ++v14;
  }
  v15 = -1431655765 * ((*((_QWORD *)a2 + 14) - *((_QWORD *)a2 + 13)) >> 3);
  v245 = v15;
  if (v15)
    v16 = v12 + 16;
  else
    v16 = v12;
  if (v15)
    v17 = v14 + 1;
  else
    v17 = v14;
  v18 = *((_QWORD *)a2 + 64);
  v244 = (uint64_t)(*((_QWORD *)a2 + 5) - *((_QWORD *)a2 + 4)) >> 3;
  if (!v18)
  {
    v19 = *((unsigned int *)a2 + 132);
    if ((_DWORD)v19)
    {
      v20 = (llvm::MCLOHDirective *)*((_QWORD *)a2 + 65);
      v21 = 48 * v19;
      do
      {
        v18 = *((_QWORD *)a2 + 64) + llvm::MCLOHDirective::getEmitSize(v20, this, a3);
        *((_QWORD *)a2 + 64) = v18;
        v20 = (llvm::MCLOHDirective *)((char *)v20 + 48);
        v21 -= 48;
      }
      while (v21);
      v9 = *(_BYTE *)(*((_QWORD *)this + 1) + 8) & 1;
    }
    else
    {
      v18 = 0;
    }
  }
  v22 = -4;
  if (v9)
    v22 = -8;
  v23 = 8;
  if (!v9)
    v23 = 4;
  v239 = v18;
  v25 = (v18 + v23 - 1) & v22;
  v24 = v25 == 0;
  *(_QWORD *)v248 = v25;
  v26 = v16 + 16;
  if (v24)
    v26 = v16;
  if (v24)
    v27 = v17;
  else
    v27 = v17 + 1;
  v28 = -1431655765 * ((*((_QWORD *)this + 18) - *((_QWORD *)this + 17)) >> 3)
      - 1431655765 * ((*((_QWORD *)this + 21) - *((_QWORD *)this + 20)) >> 3)
      - 1431655765 * ((*((_QWORD *)this + 24) - *((_QWORD *)this + 23)) >> 3);
  v247 = v28;
  if ((_DWORD)v28)
    v29 = v26 + 104;
  else
    v29 = v26;
  if ((_DWORD)v28)
    v30 = v27 + 2;
  else
    v30 = v27;
  v31 = (uint64_t *)*((_QWORD *)a2 + 16);
  v32 = (uint64_t *)*((_QWORD *)a2 + 17);
  if (v31 != v32)
  {
    if (v9)
      v33 = -8;
    else
      v33 = -4;
    if (v9)
      v34 = 7;
    else
      v34 = 3;
    do
    {
      v35 = *v31;
      v36 = 12;
      while (v35 != v31[1])
      {
        if (*(char *)(v35 + 23) < 0)
          v37 = *(_QWORD *)(v35 + 8);
        else
          LODWORD(v37) = *(unsigned __int8 *)(v35 + 23);
        v36 += v37 + 1;
        v35 += 24;
      }
      ++v30;
      v29 += (v36 + v34) & v33;
      v31 += 3;
    }
    while (v31 != v32);
  }
  v38 = *((_QWORD *)a2 + 19);
  v39 = *((_QWORD *)a2 + 20);
  *(_QWORD *)v246 = v8;
  if (v38 != v39)
  {
    v40 = -8;
    if (!v9)
      v40 = -4;
    v41 = v23 + 24;
    do
    {
      ++v30;
      v42 = *(char *)(v38 + 23);
      if (v42 >= 0)
        v43 = v42 & 0x7F;
      else
        v43 = *(_DWORD *)(v38 + 8);
      v29 += (v41 + v43) & v40;
      v38 += 24;
    }
    while (v38 != v39);
  }
  v44 = 32;
  if (!v9)
    v44 = 28;
  v250 = a2;
  v251 = v29 + v44;
  v45 = (uint64_t *)*((_QWORD *)a2 + 4);
  v249 = (uint64_t *)*((_QWORD *)a2 + 5);
  if (v45 == v249)
  {
    v81 = 0;
    v47 = 0;
    v46 = 0;
    goto LABEL_98;
  }
  v46 = 0;
  v47 = 0;
  v259 = 0;
  do
  {
    v48 = *v45;
    v49 = *((_DWORD *)this + 20);
    v50 = *v45 >> 4;
    if (v49)
    {
      v51 = *((_QWORD *)this + 8);
      v52 = v49 - 1;
      v53 = (v50 ^ (v48 >> 9)) & (v49 - 1);
      v54 = *(_QWORD *)(v51 + 16 * v53);
      if (v48 == v54)
      {
LABEL_73:
        v253 = *(_QWORD *)(v51 + 16 * v53 + 8);
        goto LABEL_74;
      }
      v55 = 1;
      while (v54 != -4096)
      {
        v56 = v53 + v55++;
        v53 = v56 & v52;
        v54 = *(_QWORD *)(v51 + 16 * v53);
        if (v48 == v54)
          goto LABEL_73;
      }
    }
    v253 = 0;
LABEL_74:
    v57 = *(const llvm::MCFragment **)(v48 + 104);
    llvm::MCAsmLayout::ensureValid(a3, v57);
    *(_QWORD *)v257 = *((_QWORD *)v57 + 4);
    llvm::MCAssembler::computeFragmentSize(*(_QWORD *)a3, (uint64_t)a3, (uint64_t)v57);
    v256 = v58;
    SectionFileSize = llvm::MCAsmLayout::getSectionFileSize(a3, (const llvm::MCFragment **)v48);
    v60 = *((_DWORD *)this + 20);
    v254 = v46;
    v255 = v47;
    v252 = SectionFileSize;
    if (!v60)
      goto LABEL_96;
    v61 = *((_QWORD *)this + 8);
    v62 = v60 - 1;
    v63 = (v60 - 1) & (v50 ^ (v48 >> 9));
    v64 = *(_QWORD *)(v61 + 16 * v63);
    if (v64 != v48)
    {
      v65 = 1;
      while (v64 != -4096)
      {
        v66 = v63 + v65++;
        v63 = v66 & v62;
        v64 = *(_QWORD *)(v61 + 16 * v63);
        if (v64 == v48)
          goto LABEL_79;
      }
LABEL_96:
      v67 = 0;
      goto LABEL_80;
    }
LABEL_79:
    v67 = *(_QWORD *)(v61 + 16 * v63 + 8);
LABEL_80:
    v68 = *(const llvm::MCFragment **)(v48 + 104);
    llvm::MCAsmLayout::ensureValid(a3, v68);
    v69 = *((_QWORD *)v68 + 4);
    llvm::MCAssembler::computeFragmentSize(*(_QWORD *)a3, (uint64_t)a3, (uint64_t)v68);
    v71 = *(_DWORD *)(v48 + 32) + 1;
    if (*((_DWORD *)a3 + 4) <= v71
      || (v72 = v70,
          v73 = *(_BYTE **)(*((_QWORD *)a3 + 1) + 8 * v71),
          ((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v73 + 16))(v73) & 1) != 0))
    {
      v75 = 0;
    }
    else
    {
      v74 = 1 << (63 - __clz((1 << v73[24])));
      v75 = ((v69 + v67 + v72 + v74 - 1) & -v74) - (v69 + v67 + v72);
    }
    v76 = *(_QWORD *)v257 + v253 + v256;
    v77 = v259;
    if (v259 <= v76)
      v77 = *(_QWORD *)v257 + v253 + v256;
    v259 = v77;
    v78 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v48 + 16))(v48);
    v46 = v254;
    if (v254 <= v76)
      v79 = *(_QWORD *)v257 + v253 + v256;
    else
      v79 = v254;
    v80 = v252 + v253 + v75;
    v47 = v255;
    if (v255 > v80)
      v80 = v255;
    if ((v78 & 1) == 0)
    {
      v47 = v80;
      v46 = v79;
    }
    ++v45;
  }
  while (v45 != v249);
  LOBYTE(v9) = *(_BYTE *)(*((_QWORD *)this + 1) + 8) & 1;
  a2 = v250;
  v81 = v259;
LABEL_98:
  v82 = ((v47 + (1 << (v9 | 2u)) - 1) & -(1 << (v9 | 2u))) - v47;
  v83 = v82;
  v84 = *((_QWORD *)a2 + 268);
  v258 = v82;
  v85 = v84;
  if ((v84 & 0xFF00000000) != 0 && (v84 & 0xFFFFFFC0) != 0)
  {
    v260 = v81;
    v221 = *(_QWORD *)a2;
    v222 = (char *)v266 + 5;
    v223 = v84;
    if ((_DWORD)v84)
    {
      v222 = (char *)v266 + 5;
      do
      {
        *--v222 = (v223 % 0xA) | 0x30;
        v224 = v223 > 9;
        v223 /= 0xAuLL;
      }
      while (v224);
    }
    sub_1C4E61270(&v261, v222, (char *)v266 + 5, (char *)v266 + 5 - v222);
    v225 = std::string::insert(&v261, 0, "invalid ptrauth ABI version: ");
    v226 = v225->__r_.__value_.__r.__words[2];
    *(_OWORD *)v262 = *(_OWORD *)&v225->__r_.__value_.__l.__data_;
    v263 = v226;
    v225->__r_.__value_.__l.__size_ = 0;
    v225->__r_.__value_.__r.__words[2] = 0;
    v225->__r_.__value_.__r.__words[0] = 0;
    v267 = 260;
    *(_QWORD *)v264 = v262;
    llvm::MCContext::reportError(v221, 0, (uint64_t)v264);
    if (SHIBYTE(v263) < 0)
      operator delete(*(void **)v262);
    v81 = v260;
    if (SHIBYTE(v261.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v261.__r_.__value_.__l.__data_);
    v85 = 63;
  }
  llvm::MachObjectWriter::writeHeader((uint64_t)this, 1u, v30, v29, (*((unsigned __int8 *)a2 + 500) >> 1) & 1, v84 & 0xFFFFFFFF00000000 | v85, *((unsigned __int8 *)a2 + 2152));
  llvm::MachObjectWriter::writeSegmentLoadCommand((uint64_t)this, "", 0, v244, 0, v81, v251, v46, 7u, 7u);
  v86 = v47 + v251 + v83;
  v87 = (_QWORD *)*((_QWORD *)a2 + 4);
  v88 = (_QWORD *)*((_QWORD *)a2 + 5);
  if (v87 != v88)
  {
    while (2)
    {
      *(_QWORD *)v264 = *v87;
      v89 = *(_QWORD *)v264;
      v90 = *((_DWORD *)this + 8);
      v91 = *(_DWORD *)v264 >> 4;
      if (v90)
      {
        v92 = *((_QWORD *)this + 2);
        v93 = v90 - 1;
        v94 = v93 & (v91 ^ (*(_DWORD *)v264 >> 9));
        v95 = (_QWORD *)(v92 + 32 * v94);
        v96 = *v95;
        if (*(_QWORD *)v264 != *v95)
        {
          v97 = 0;
          v98 = 1;
          while (v96 != -4096)
          {
            if (v97)
              v99 = 0;
            else
              v99 = v96 == -8192;
            if (v99)
              v97 = v95;
            v100 = v94 + v98++;
            v94 = v100 & v93;
            v95 = (_QWORD *)(v92 + 32 * v94);
            v96 = *v95;
            if (*(_QWORD *)v264 == *v95)
              goto LABEL_116;
          }
          if (v97)
            v101 = v97;
          else
            v101 = v95;
LABEL_115:
          v95 = sub_1C4B081A0((uint64_t *)this + 2, (uint64_t)v264, v264, v101);
          *v95 = *(_QWORD *)v264;
          v95[1] = 0;
          v95[2] = 0;
          v95[3] = 0;
        }
LABEL_116:
        v103 = v95[1];
        v102 = v95[2];
        v104 = *((_DWORD *)this + 20);
        if (v104)
        {
          v105 = *((_QWORD *)this + 8);
          v106 = v104 - 1;
          v107 = (v104 - 1) & (v91 ^ (v89 >> 9));
          v108 = *(_QWORD *)(v105 + 16 * v107);
          v109 = v107;
          if (v89 == v108)
          {
LABEL_121:
            v113 = *(_QWORD *)(v105 + 16 * v109 + 8);
          }
          else
          {
            v110 = 1;
            v111 = *(_QWORD *)(v105 + 16 * (v106 & (v91 ^ (v89 >> 9))));
            LODWORD(v109) = v106 & (v91 ^ (v89 >> 9));
            while (v111 != -4096)
            {
              v112 = v109 + v110++;
              v109 = v112 & v106;
              v111 = *(_QWORD *)(v105 + 16 * v109);
              if (v89 == v111)
                goto LABEL_121;
            }
            LODWORD(v113) = 0;
          }
          v114 = v113 + v251;
          v115 = *(_DWORD *)(v89 + 240) | ((*(_BYTE *)(v89 + 44) & 2) << 9);
          if (v89 == v108)
          {
LABEL_126:
            v118 = *(_QWORD *)(v105 + 16 * v107 + 8);
          }
          else
          {
            v116 = 1;
            while (v108 != -4096)
            {
              v117 = v107 + v116++;
              v107 = v117 & v106;
              v108 = *(_QWORD *)(v105 + 16 * v107);
              if (v89 == v108)
                goto LABEL_126;
            }
            v118 = 0;
          }
        }
        else
        {
          v118 = 0;
          v115 = *(_DWORD *)(v89 + 240) | ((*(_BYTE *)(v89 + 44) & 2) << 9);
          v114 = v251;
        }
        v119 = v102 - v103;
        llvm::MachObjectWriter::writeSection(this, a3, (const llvm::MCSection *)v89, v118, v114, v115, v86, (unint64_t)(v102 - v103) >> 4);
        v86 += (v119 >> 1) & 0x7FFFFFFF8;
        if (++v87 == v88)
          goto LABEL_133;
        continue;
      }
      break;
    }
    v101 = 0;
    goto LABEL_115;
  }
LABEL_133:
  if (*(_DWORD *)(*(_QWORD *)v246 + 2080))
    sub_1C595FDD0((uint64_t)this, v240);
  if (*(_DWORD *)(*(_QWORD *)v246 + 2116))
    sub_1C595FDD0((uint64_t)this, *(_QWORD *)v246 + 2108);
  if (v245)
    llvm::MachObjectWriter::writeLinkeditLoadCommand(this, 0x29u, v86, 8 * v245);
  v120 = v86 + 8 * v245;
  if (*(_QWORD *)v248)
    llvm::MachObjectWriter::writeLinkeditLoadCommand(this, 0x2Eu, v120, v248[0]);
  if (v247)
  {
    v121 = v120 + v248[0];
    v122 = -1431655765 * ((*((_QWORD *)this + 18) - *((_QWORD *)this + 17)) >> 3);
    v123 = -1431655765 * ((*((_QWORD *)this + 21) - *((_QWORD *)this + 20)) >> 3);
    v124 = v123 - 1431655765 * ((*((_QWORD *)this + 18) - *((_QWORD *)this + 17)) >> 3);
    v125 = *((_QWORD *)this + 23);
    v126 = -1431655765 * ((unint64_t)(*((_QWORD *)this + 24) - v125) >> 3);
    v127 = *((_QWORD *)a2 + 11) - *((_QWORD *)a2 + 10);
    v128 = v127 >> 4;
    v130 = ((v127 >> 2) & 0xFFFFFFFC) + v121;
    if ((*(_BYTE *)(*((_QWORD *)this + 1) + 8) & 1) != 0)
      v131 = 16;
    else
      v131 = 12;
    v129 = v124 - 1431655765 * ((unint64_t)(*((_QWORD *)this + 24) - v125) >> 3);
    llvm::MachObjectWriter::writeSymtabLoadCommand(this, v130, v129, v130 + v131 * v129, *((_DWORD *)this + 28));
    if ((_DWORD)v128)
      v132 = v121;
    else
      v132 = 0;
    llvm::MachObjectWriter::writeDysymtabLoadCommand(this, 0, v122, v122, v123, v124, v126, v132, v128);
  }
  v133 = (uint64_t *)*((_QWORD *)a2 + 16);
  v134 = (uint64_t *)*((_QWORD *)a2 + 17);
  while (v133 != v134)
  {
    llvm::MachObjectWriter::writeLinkerOptionsLoadCommand((uint64_t)this, v133);
    v133 += 3;
  }
  v135 = (const void **)*((_QWORD *)a2 + 19);
  v136 = (const void **)*((_QWORD *)a2 + 20);
  while (v135 != v136)
  {
    v137 = *((_BYTE *)v135 + 23);
    v138 = v137 < 0;
    if (v137 >= 0)
      v139 = v135;
    else
      v139 = *v135;
    v140 = v137 & 0x7F;
    if (v138)
      v141 = (size_t)v135[1];
    else
      v141 = v140;
    llvm::MachObjectWriter::writeLoadDylibLoadCommand((uint64_t)this, v139, v141);
    v135 += 3;
  }
  v142 = (const llvm::MCSection **)*((_QWORD *)a2 + 4);
  v143 = (const llvm::MCSection **)*((_QWORD *)a2 + 5);
  if (v142 != v143)
  {
    while (2)
    {
      v144 = *v142;
      llvm::MCAssembler::writeSectionData(a2, *((llvm::raw_ostream **)this + 26), *v142, a3);
      v145 = *((_DWORD *)this + 20);
      if (!v145)
        goto LABEL_174;
      v146 = *((_QWORD *)this + 8);
      v147 = v145 - 1;
      v148 = (v145 - 1) & ((v144 >> 4) ^ (v144 >> 9));
      v149 = *(const llvm::MCSection **)(v146 + 16 * v148);
      if (v149 == v144)
      {
LABEL_167:
        v152 = *(_QWORD *)(v146 + 16 * v148 + 8);
      }
      else
      {
        v150 = 1;
        while (v149 != (const llvm::MCSection *)-4096)
        {
          v151 = v148 + v150++;
          v148 = v151 & v147;
          v149 = *(const llvm::MCSection **)(v146 + 16 * v148);
          if (v149 == v144)
            goto LABEL_167;
        }
LABEL_174:
        v152 = 0;
      }
      v153 = (const llvm::MCFragment *)*((_QWORD *)v144 + 13);
      llvm::MCAsmLayout::ensureValid(a3, v153);
      v154 = *((_QWORD *)v153 + 4);
      llvm::MCAssembler::computeFragmentSize(*(_QWORD *)a3, (uint64_t)a3, (uint64_t)v153);
      v156 = *((_DWORD *)v144 + 8) + 1;
      if (*((_DWORD *)a3 + 4) <= v156
        || (v157 = v155,
            v158 = *(_BYTE **)(*((_QWORD *)a3 + 1) + 8 * v156),
            ((*(uint64_t (**)(_BYTE *))(*(_QWORD *)v158 + 16))(v158) & 1) != 0))
      {
        LODWORD(v160) = 0;
      }
      else
      {
        v159 = __clz((1 << v158[24]));
        v160 = ((v154 + v152 + v157 + (1 << (63 - v159)) - 1) & -(1 << (63 - v159))) - (v154 + v152 + v157);
      }
      llvm::raw_ostream::write_zeros(*((llvm::raw_ostream **)this + 26), v160);
      ++v142;
      a2 = v250;
      if (v142 == v143)
        break;
      continue;
    }
  }
  llvm::raw_ostream::write_zeros(*((llvm::raw_ostream **)this + 26), v258);
  v161 = (uint64_t *)*((_QWORD *)a2 + 4);
  v162 = (uint64_t *)*((_QWORD *)a2 + 5);
  if (v161 != v162)
  {
    while (2)
    {
      v163 = *v161;
      *(_QWORD *)v264 = *v161;
      v164 = *((_DWORD *)this + 8);
      if (v164)
      {
        v165 = *((_QWORD *)this + 2);
        v166 = v164 - 1;
        v167 = v166 & ((v163 >> 4) ^ (v163 >> 9));
        v168 = (_QWORD *)(v165 + 32 * v167);
        v169 = *v168;
        if (v163 != *v168)
        {
          v170 = 0;
          v171 = 1;
          while (v169 != -4096)
          {
            if (v170)
              v172 = 0;
            else
              v172 = v169 == -8192;
            if (v172)
              v170 = v168;
            v173 = v167 + v171++;
            v167 = v173 & v166;
            v168 = (_QWORD *)(v165 + 32 * v167);
            v169 = *v168;
            if (v163 == *v168)
              goto LABEL_191;
          }
          if (v170)
            v174 = v170;
          else
            v174 = v168;
LABEL_190:
          v168 = sub_1C4B081A0((uint64_t *)this + 2, (uint64_t)v264, v264, v174);
          *v168 = *(_QWORD *)v264;
          v168[1] = 0;
          v168[2] = 0;
          v168[3] = 0;
        }
LABEL_191:
        v175 = v168[1];
        v176 = v168[2];
        if (v176 != v175)
        {
          do
          {
            v177 = v176 - 16;
            v178 = *(_DWORD *)(v176 - 8);
            v179 = (llvm::raw_ostream *)*((_QWORD *)this + 26);
            v180 = bswap32(v178);
            if ((*((_DWORD *)this + 54) - 1) >= 2)
              v178 = v180;
            *(_DWORD *)v264 = v178;
            llvm::raw_ostream::write(v179, v264, 4uLL);
            v181 = *(_DWORD *)(v176 - 4);
            v182 = (llvm::raw_ostream *)*((_QWORD *)this + 26);
            v183 = bswap32(v181);
            if ((*((_DWORD *)this + 54) - 1) >= 2)
              v181 = v183;
            *(_DWORD *)v264 = v181;
            llvm::raw_ostream::write(v182, v264, 4uLL);
            v176 -= 16;
          }
          while (v177 != v175);
        }
        if (++v161 == v162)
          goto LABEL_200;
        continue;
      }
      break;
    }
    v174 = 0;
    goto LABEL_190;
  }
LABEL_200:
  v184 = (const llvm::MCSymbol **)*((_QWORD *)a2 + 13);
  v185 = (unsigned __int16 *)*((_QWORD *)a2 + 14);
  while (v184 != (const llvm::MCSymbol **)v185)
  {
    SymbolAddress = llvm::MachObjectWriter::getSymbolAddress(this, v184[1], a3);
    v187 = v184[2];
    if (!v187)
      llvm::report_fatal_error((llvm *)"Data region not terminated", (const char *)1);
    v188 = SymbolAddress;
    v189 = llvm::MachObjectWriter::getSymbolAddress(this, v187, a3);
    v190 = (llvm::raw_ostream *)*((_QWORD *)this + 26);
    v191 = bswap32(v188);
    if ((*((_DWORD *)this + 54) - 1) >= 2)
      v192 = v191;
    else
      v192 = v188;
    *(_DWORD *)v264 = v192;
    llvm::raw_ostream::write(v190, v264, 4uLL);
    v193 = v189 - v188;
    v194 = (llvm::raw_ostream *)*((_QWORD *)this + 26);
    v195 = bswap32(v189 - v188) >> 16;
    if ((*((_DWORD *)this + 54) - 1) >= 2)
      v193 = v195;
    *(_WORD *)v264 = v193;
    llvm::raw_ostream::write(v194, v264, 2uLL);
    v197 = *(unsigned __int16 *)v184;
    v184 += 3;
    v196 = v197;
    v198 = (llvm::raw_ostream *)*((_QWORD *)this + 26);
    v199 = bswap32(v197) >> 16;
    if ((*((_DWORD *)this + 54) - 1) >= 2)
      v196 = v199;
    *(_WORD *)v264 = v196;
    llvm::raw_ostream::write(v198, v264, 2uLL);
  }
  if (*(_QWORD *)v248)
  {
    v200 = *((unsigned int *)a2 + 132);
    if ((_DWORD)v200)
    {
      v201 = (llvm::MCLOHDirective *)*((_QWORD *)a2 + 65);
      v202 = 48 * v200;
      do
      {
        llvm::MCLOHDirective::emit_impl(v201, *((llvm::raw_ostream **)this + 26), this, a3);
        v201 = (llvm::MCLOHDirective *)((char *)v201 + 48);
        v202 -= 48;
      }
      while (v202);
    }
    v203 = 1 << (*(_BYTE *)(*((_QWORD *)this + 1) + 8) & 1 | 2);
    llvm::raw_ostream::write_zeros(*((llvm::raw_ostream **)this + 26), ((v239 + v203 - 1) & -v203) - v239);
  }
  if (v247)
  {
    v204 = (uint64_t *)*((_QWORD *)a2 + 10);
    for (i = (uint64_t *)*((_QWORD *)a2 + 11); v204 != i; v204 += 2)
    {
      v206 = *v204;
      if (*(_BYTE *)(v204[1] + 240) != 6)
        goto LABEL_231;
      v207 = *(_QWORD *)v206 & 0xFFFFFFFFFFFFFFF8;
      if (!v207 && (*(_DWORD *)(v206 + 8) & 0x1C00) == 0x800)
      {
        *(_DWORD *)(v206 + 8) |= 4u;
        llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v206 + 24));
        *(_QWORD *)v206 = *(_QWORD *)v206 & 7 | v207;
        v206 = *v204;
      }
      if (v207 && (v208 = *(_DWORD *)(v206 + 8), (v208 & 0x10) == 0))
      {
        v209 = *(_QWORD *)v206 & 0xFFFFFFFFFFFFFFF8;
        if ((*(_DWORD *)(v206 + 8) & 0x1C00) == 0x800 && v209 == 0)
        {
          *(_DWORD *)(v206 + 8) = v208 | 4;
          llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v206 + 24));
          *(_QWORD *)v206 = *(_QWORD *)v206 & 7 | v209;
        }
        if ((_UNKNOWN *)v209 == llvm::MCSymbol::AbsolutePseudoFragment)
          v211 = -1073741824;
        else
          v211 = 0x80000000;
        v212 = (llvm::raw_ostream *)*((_QWORD *)this + 26);
        v213 = *((_DWORD *)this + 54) - 1;
        v214 = HIBYTE(v211);
      }
      else
      {
LABEL_231:
        v211 = *(_DWORD *)(v206 + 16);
        v212 = (llvm::raw_ostream *)*((_QWORD *)this + 26);
        v213 = *((_DWORD *)this + 54) - 1;
        v214 = bswap32(v211);
      }
      if (v213 >= 2)
        v211 = v214;
      *(_DWORD *)v264 = v211;
      llvm::raw_ostream::write(v212, v264, 4uLL);
    }
    v215 = 0;
    *(_QWORD *)v264 = (char *)this + 136;
    v265 = (char *)this + 160;
    v266[0] = (char *)this + 184;
    do
    {
      v216 = *(char ***)&v264[8 * v215];
      v217 = *v216;
      v218 = v216[1];
      while (v217 != v218)
      {
        llvm::MachObjectWriter::writeNlist(this, v217, a3);
        v217 += 24;
      }
      ++v215;
    }
    while (v215 != 3);
    llvm::StringTableBuilder::write((llvm::MachObjectWriter *)((char *)this + 88), *((llvm::raw_ostream **)this + 26));
  }
  v219 = (_QWORD *)*((_QWORD *)this + 26);
  return v241 - (v243 + v242) + v219[4] + (*(uint64_t (**)(_QWORD *))(*v219 + 80))(v219) - v219[2];
}

llvm::raw_ostream *sub_1C595FDD0(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  llvm::raw_ostream *v12;
  int v13;
  llvm::raw_ostream *v14;
  int v15;
  unsigned int v16;
  llvm::raw_ostream *v17;
  unsigned int v18;
  llvm::raw_ostream *v19;
  unsigned int v20;
  unsigned int v21;
  llvm::raw_ostream *v22;
  unsigned int v23;
  unsigned int v24;
  llvm::raw_ostream *v25;
  int v26;
  llvm::raw_ostream *v27;
  llvm::raw_ostream *v28;
  int v29;
  llvm::raw_ostream *v30;
  unsigned int v31;
  unsigned int v32;
  unsigned int v33;
  unsigned int v34;
  char v36[4];

  v4 = (*(_DWORD *)(a2 + 12) << 8) | (*(_DWORD *)(a2 + 8) << 16) | *(_DWORD *)(a2 + 16) & 0x7FFFFFFF;
  v5 = *(_QWORD *)(a2 + 20);
  v6 = *(_QWORD *)(a2 + 28);
  v7 = v5 & 0x7FFFFFFFFFFFFFFFLL | v6 & 0x7FFFFFFF7FFFFFFFLL;
  if ((int)v6 < 0)
    v8 = v6 & 0x7FFFFFFF;
  else
    v8 = 0;
  v9 = ((unint64_t)v5 >> 24) & 0xFFFFFF00;
  if (v5 >= 0)
    LODWORD(v9) = 0;
  v10 = v9 | ((_DWORD)v5 << 16) | v8;
  if (v7)
    v11 = v10;
  else
    v11 = 0;
  if (*(_BYTE *)a2)
  {
    v12 = *(llvm::raw_ostream **)(a1 + 208);
    if ((*(_DWORD *)(a1 + 216) - 1) >= 2)
      v13 = 838860800;
    else
      v13 = 50;
    *(_DWORD *)v36 = v13;
    llvm::raw_ostream::write(v12, v36, 4uLL);
    v14 = *(llvm::raw_ostream **)(a1 + 208);
    if ((*(_DWORD *)(a1 + 216) - 1) >= 2)
      v15 = 402653184;
    else
      v15 = 24;
    *(_DWORD *)v36 = v15;
    llvm::raw_ostream::write(v14, v36, 4uLL);
    v16 = *(_DWORD *)(a2 + 4);
    v17 = *(llvm::raw_ostream **)(a1 + 208);
    v18 = bswap32(v16);
    if ((*(_DWORD *)(a1 + 216) - 1) >= 2)
      v16 = v18;
    *(_DWORD *)v36 = v16;
    llvm::raw_ostream::write(v17, v36, 4uLL);
    v19 = *(llvm::raw_ostream **)(a1 + 208);
    v20 = bswap32(v4);
    if ((*(_DWORD *)(a1 + 216) - 1) >= 2)
      v21 = v20;
    else
      v21 = v4;
    *(_DWORD *)v36 = v21;
    llvm::raw_ostream::write(v19, v36, 4uLL);
    v22 = *(llvm::raw_ostream **)(a1 + 208);
    v23 = bswap32(v11);
    if ((*(_DWORD *)(a1 + 216) - 1) >= 2)
      v24 = v23;
    else
      v24 = v11;
    *(_DWORD *)v36 = v24;
    llvm::raw_ostream::write(v22, v36, 4uLL);
    v25 = *(llvm::raw_ostream **)(a1 + 208);
    *(_DWORD *)v36 = 0;
  }
  else
  {
    v26 = dword_1C8663A00[*(int *)(a2 + 4)];
    v27 = *(llvm::raw_ostream **)(a1 + 208);
    if ((*(_DWORD *)(a1 + 216) - 1) >= 2)
      v26 <<= 24;
    *(_DWORD *)v36 = v26;
    llvm::raw_ostream::write(v27, v36, 4uLL);
    v28 = *(llvm::raw_ostream **)(a1 + 208);
    if ((*(_DWORD *)(a1 + 216) - 1) >= 2)
      v29 = 0x10000000;
    else
      v29 = 16;
    *(_DWORD *)v36 = v29;
    llvm::raw_ostream::write(v28, v36, 4uLL);
    v30 = *(llvm::raw_ostream **)(a1 + 208);
    v31 = bswap32(v4);
    if ((*(_DWORD *)(a1 + 216) - 1) >= 2)
      v32 = v31;
    else
      v32 = v4;
    *(_DWORD *)v36 = v32;
    llvm::raw_ostream::write(v30, v36, 4uLL);
    v25 = *(llvm::raw_ostream **)(a1 + 208);
    v33 = bswap32(v11);
    if ((*(_DWORD *)(a1 + 216) - 1) >= 2)
      v34 = v33;
    else
      v34 = v11;
    *(_DWORD *)v36 = v34;
  }
  return llvm::raw_ostream::write(v25, v36, 4uLL);
}

uint64_t sub_1C595FFF4(uint64_t *a1, uint64_t *a2, uint64_t a3, unsigned __int8 *a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;

  v8 = operator new();
  v9 = *a2;
  *a2 = 0;
  v11 = v9;
  *a1 = sub_1C62C2B04(v8, &v11, a3, *a4);
  result = v11;
  if (v11)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  return result;
}

uint64_t sub_1C5960088(uint64_t result, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(result + 16 * v5);
    v7 = *v6;
    if (*v6 != a3)
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v10 = 0;
        else
          v10 = v7 == -8192;
        if (v10)
          v8 = v6;
        v11 = v5 + v9++;
        v5 = v11 & v4;
        v6 = (_QWORD *)(result + 16 * (v11 & v4));
        v7 = *v6;
        if (*v6 == a3)
          goto LABEL_11;
      }
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
  }
LABEL_11:
  *a4 = v6;
  return result;
}

void sub_1C5960104(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  uint64_t v5;

  *(_QWORD *)a1 = &off_1E8184390;
  v2 = *(void **)(a1 + 184);
  if (v2)
  {
    *(_QWORD *)(a1 + 192) = v2;
    operator delete(v2);
  }
  v3 = *(void **)(a1 + 160);
  if (v3)
  {
    *(_QWORD *)(a1 + 168) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 136);
  if (v4)
  {
    *(_QWORD *)(a1 + 144) = v4;
    operator delete(v4);
  }
  llvm::StringTableBuilder::~StringTableBuilder((llvm::StringTableBuilder *)(a1 + 88));
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 64), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 40), 8);
  sub_1C59601AC((unsigned int *)(a1 + 16));
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 16), 8);
  v5 = *(_QWORD *)(a1 + 8);
  *(_QWORD *)(a1 + 8) = 0;
  if (v5)
    (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  llvm::MCObjectWriter::~MCObjectWriter((llvm::MCObjectWriter *)a1);
}

void sub_1C59601AC(unsigned int *a1)
{
  uint64_t v1;
  uint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  void *v5;
  _QWORD *v6;
  uint64_t v7;

  v1 = a1[4];
  if ((_DWORD)v1)
  {
    v2 = 32 * v1;
    v3 = (_QWORD *)(*(_QWORD *)a1 + 16);
    do
    {
      v4 = *(v3 - 2);
      if (v4 != -4096 && v4 != -8192)
      {
        v5 = (void *)*(v3 - 1);
        if (v5)
        {
          *v3 = v5;
          v6 = v3;
          v7 = v2;
          operator delete(v5);
          v3 = v6;
          v2 = v7;
        }
      }
      v3 += 4;
      v2 -= 32;
    }
    while (v2);
  }
}

void sub_1C5960214(unsigned int *a1)
{
  unsigned int v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  _QWORD *v6;
  unint64_t v7;
  unint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;

  v2 = a1[2];
  sub_1C59601AC(a1);
  if (v2)
  {
    v3 = 1 << (33 - __clz(v2 - 1));
    if (v3 <= 64)
      v4 = 64;
    else
      v4 = v3;
    if (v4 == a1[4])
    {
      *((_QWORD *)a1 + 1) = 0;
      v5 = 32 * v4;
      v6 = *(_QWORD **)a1;
      do
      {
        *v6 = -4096;
        v6 += 4;
        v5 -= 32;
      }
      while (v5);
    }
    else
    {
      MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 8);
      v7 = (4 * v4 / 3 + 1) | ((unint64_t)(4 * v4 / 3 + 1) >> 1);
      v8 = v7 | (v7 >> 2) | ((v7 | (v7 >> 2)) >> 4);
      LODWORD(v8) = (((v8 | (v8 >> 8)) >> 16) | v8 | (v8 >> 8)) + 1;
      a1[4] = v8;
      v9 = operator new(32 * v8, (std::align_val_t)8uLL);
      *(_QWORD *)a1 = v9;
      *((_QWORD *)a1 + 1) = 0;
      v10 = a1[4];
      if ((_DWORD)v10)
      {
        v11 = 32 * v10;
        do
        {
          *v9 = -4096;
          v9 += 4;
          v11 -= 32;
        }
        while (v11);
      }
    }
  }
  else if (a1[4])
  {
    MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 8);
    *(_QWORD *)a1 = 0;
    *((_QWORD *)a1 + 1) = 0;
    a1[4] = 0;
  }
  else
  {
    *((_QWORD *)a1 + 1) = 0;
  }
}

_QWORD *sub_1C5960324(uint64_t a1, uint64_t a2, uint64_t *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  _QWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  _QWORD *v17;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 < 3 * v7)
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    {
      sub_1C52A0D94(a1, v7);
      v17 = 0;
      sub_1C52A0CF8((uint64_t *)a1, a3, &v17);
      a4 = v17;
    }
  }
  else
  {
    sub_1C52A0D94(a1, 2 * v7);
    v8 = *a3;
    v9 = *(_DWORD *)(a1 + 16) - 1;
    v10 = ((*a3 >> 4) ^ (*a3 >> 9)) & v9;
    a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v10);
    v11 = *a4;
    if (*a3 == *a4)
      goto LABEL_3;
    v13 = 0;
    v14 = 1;
    while (v11 != -4096)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v11 == -8192;
      if (v15)
        v13 = a4;
      v16 = v10 + v14++;
      v10 = v16 & v9;
      a4 = (_QWORD *)(*(_QWORD *)a1 + 16 * v10);
      v11 = *a4;
      if (v8 == *a4)
        goto LABEL_3;
    }
    if (v13)
      a4 = v13;
  }
  v8 = *a4;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (v8 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *sub_1C5960454(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C62C2A58(a1, v4, v4 + 16 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

void sub_1C596050C(__n128 *a1, __n128 *a2, uint64_t a3, char a4)
{
  __n128 *v8;
  unint64_t *v9;
  __n128 *v10;
  uint64_t v11;
  uint64_t v12;
  unint64_t v13;
  __n128 *v14;
  uint64_t v15;
  __n128 v16;
  unint64_t v17;
  __n128 v18;
  uint64_t v19;
  __n128 v20;
  __n128 *v21;
  __n128 *v22;
  __n128 *v23;
  __n128 *v24;
  __n128 v25;
  __n128 v26;
  __n128 v27;
  __n128 *v28;
  __n128 v29;
  __n128 v30;
  BOOL v31;
  __n128 v32;
  __n128 *v33;
  _BOOL4 v34;
  __n128 *v35;
  __n128 v36;
  __n128 v37;
  __n128 v38;
  __n128 *v39;
  __n128 v40;
  __n128 v41;
  __n128 v42;
  __n128 v43;
  __n128 v44;
  __n128 *v45;
  BOOL v46;
  char v47;
  uint64_t v48;
  __n128 *v49;
  __n128 *v50;
  __n128 v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  __n128 v55;
  int64_t v56;
  int64_t v57;
  int64_t v58;
  uint64_t v59;
  unint64_t *v60;
  unint64_t *v61;
  __n128 v62;
  unint64_t *v63;
  __int128 v64;
  uint64_t v65;
  uint64_t v66;
  __n128 v67;
  __n128 *v68;
  uint64_t v69;
  __n128 v70;
  __n128 *v71;
  char *v72;
  uint64_t v73;
  uint64_t v74;
  __n128 v75;
  __n128 v76;
  __n128 v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t *v80;
  __n128 v81;
  unint64_t *v82;
  __int128 v83;
  __n128 v84;
  __n128 v85;
  __int8 *v87;
  __n128 *v88;
  __n128 v89;
  __int8 *v90;
  BOOL v91;
  __n128 v92;
  __n128 *v93;
  __n128 *v94;
  __n128 v95;
  unint64_t v96;
  __n128 v97;
  unint64_t v98;

BOOL sub_1C5960D78(_QWORD *a1, _QWORD *a2, _QWORD *a3)
{
  BOOL v6;
  _BOOL8 result;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  uint64_t v20;

  v6 = llvm::MachObjectWriter::MachSymbolData::operator<(a2, a1);
  result = llvm::MachObjectWriter::MachSymbolData::operator<(a3, a2);
  if (v6)
  {
    if (result)
    {
      v8 = a1[2];
      v9 = *(_OWORD *)a1;
      v10 = a3[2];
      *(_OWORD *)a1 = *(_OWORD *)a3;
      a1[2] = v10;
    }
    else
    {
      v17 = a1[2];
      v18 = *(_OWORD *)a1;
      v19 = a2[2];
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = v19;
      *(_OWORD *)a2 = v18;
      a2[2] = v17;
      result = llvm::MachObjectWriter::MachSymbolData::operator<(a3, a2);
      if (!result)
        return result;
      v8 = a2[2];
      v9 = *(_OWORD *)a2;
      v20 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v20;
    }
    *(_OWORD *)a3 = v9;
    a3[2] = v8;
  }
  else if (result)
  {
    v11 = a2[2];
    v12 = *(_OWORD *)a2;
    v13 = a3[2];
    *(_OWORD *)a2 = *(_OWORD *)a3;
    a2[2] = v13;
    *(_OWORD *)a3 = v12;
    a3[2] = v11;
    result = llvm::MachObjectWriter::MachSymbolData::operator<(a2, a1);
    if (result)
    {
      v14 = a1[2];
      v15 = *(_OWORD *)a1;
      v16 = a2[2];
      *(_OWORD *)a1 = *(_OWORD *)a2;
      a1[2] = v16;
      *(_OWORD *)a2 = v15;
      a2[2] = v14;
    }
  }
  return result;
}

BOOL sub_1C5960E94(__n128 *a1, __n128 *a2)
{
  unint64_t v4;
  _BOOL8 result;
  __n128 *v6;
  unint64_t v7;
  __n128 v8;
  unint64_t v9;
  __n128 *v10;
  unint64_t *v11;
  uint64_t v12;
  int v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  __int128 v17;
  unint64_t v18;

  v4 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2 - (char *)a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = (__n128 *)((char *)a2 - 24);
      if (llvm::MachObjectWriter::MachSymbolData::operator<(&a2[-2].n128_u64[1], a1))
      {
        v7 = a1[1].n128_u64[0];
        v8 = *a1;
        v9 = v6[1].n128_u64[0];
        *a1 = *v6;
        a1[1].n128_u64[0] = v9;
        *v6 = v8;
        v6[1].n128_u64[0] = v7;
      }
      return 1;
    case 3uLL:
      sub_1C5960D78(a1, &a1[1].n128_u64[1], &a2[-2].n128_u64[1]);
      return 1;
    case 4uLL:
      sub_1C5961058(a1, &a1[1].n128_u64[1], (__n128 *)a1[3].n128_u64, &a2[-2].n128_u64[1]);
      return 1;
    case 5uLL:
      sub_1C5961124(a1, &a1[1].n128_u64[1], (__n128 *)a1[3].n128_u64, &a1[4].n128_u64[1], &a2[-2].n128_u64[1]);
      return 1;
    default:
      v10 = a1 + 3;
      sub_1C5960D78(a1, &a1[1].n128_u64[1], (__n128 *)a1[3].n128_u64);
      v11 = &a1[4].n128_u64[1];
      if (&a1[4].n128_i8[8] == (__int8 *)a2)
        return 1;
      v12 = 0;
      v13 = 0;
      break;
  }
  while (1)
  {
    if (llvm::MachObjectWriter::MachSymbolData::operator<(v11, v10))
    {
      v17 = *(_OWORD *)v11;
      v18 = v11[2];
      v14 = v12;
      while (1)
      {
        v15 = (char *)a1 + v14;
        *(__n128 *)(v15 + 72) = *(__n128 *)((char *)a1 + v14 + 48);
        *((_QWORD *)v15 + 11) = *(unint64_t *)((char *)a1[4].n128_u64 + v14);
        if (v14 == -48)
          break;
        v14 -= 24;
        if (!llvm::MachObjectWriter::MachSymbolData::operator<(&v17, (_QWORD *)v15 + 3))
        {
          v16 = (uint64_t)&a1[4].n128_i64[1] + v14;
          goto LABEL_12;
        }
      }
      v16 = (uint64_t)a1;
LABEL_12:
      *(_OWORD *)v16 = v17;
      *(_QWORD *)(v16 + 16) = v18;
      if (++v13 == 8)
        return v11 + 3 == (unint64_t *)a2;
    }
    v10 = (__n128 *)v11;
    v12 += 24;
    v11 += 3;
    if (v11 == (unint64_t *)a2)
      return 1;
  }
}

__n128 sub_1C5961058(__n128 *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4)
{
  __n128 result;
  uint64_t v9;
  __int128 v10;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;

  sub_1C5960D78(a1, a2, a3);
  if (llvm::MachObjectWriter::MachSymbolData::operator<(a4, a3))
  {
    v9 = a3[2];
    v10 = *(_OWORD *)a3;
    v11 = a4[2];
    *(_OWORD *)a3 = *(_OWORD *)a4;
    a3[2] = v11;
    *(_OWORD *)a4 = v10;
    a4[2] = v9;
    if (llvm::MachObjectWriter::MachSymbolData::operator<(a3, a2))
    {
      v12 = a2[2];
      v13 = *(_OWORD *)a2;
      v14 = a3[2];
      *(_OWORD *)a2 = *(_OWORD *)a3;
      a2[2] = v14;
      *(_OWORD *)a3 = v13;
      a3[2] = v12;
      if (llvm::MachObjectWriter::MachSymbolData::operator<(a2, a1))
      {
        v15 = a1[1].n128_u64[0];
        result = *a1;
        v16 = a2[2];
        *a1 = *(__n128 *)a2;
        a1[1].n128_u64[0] = v16;
        *(__n128 *)a2 = result;
        a2[2] = v15;
      }
    }
  }
  return result;
}

__n128 sub_1C5961124(__n128 *a1, _QWORD *a2, _QWORD *a3, _QWORD *a4, _QWORD *a5)
{
  __n128 result;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;
  __int128 v18;
  uint64_t v19;
  unint64_t v20;
  unint64_t v21;

  sub_1C5961058(a1, a2, a3, a4);
  if (llvm::MachObjectWriter::MachSymbolData::operator<(a5, a4))
  {
    v11 = a4[2];
    v12 = *(_OWORD *)a4;
    v13 = a5[2];
    *(_OWORD *)a4 = *(_OWORD *)a5;
    a4[2] = v13;
    *(_OWORD *)a5 = v12;
    a5[2] = v11;
    if (llvm::MachObjectWriter::MachSymbolData::operator<(a4, a3))
    {
      v14 = a3[2];
      v15 = *(_OWORD *)a3;
      v16 = a4[2];
      *(_OWORD *)a3 = *(_OWORD *)a4;
      a3[2] = v16;
      *(_OWORD *)a4 = v15;
      a4[2] = v14;
      if (llvm::MachObjectWriter::MachSymbolData::operator<(a3, a2))
      {
        v17 = a2[2];
        v18 = *(_OWORD *)a2;
        v19 = a3[2];
        *(_OWORD *)a2 = *(_OWORD *)a3;
        a2[2] = v19;
        *(_OWORD *)a3 = v18;
        a3[2] = v17;
        if (llvm::MachObjectWriter::MachSymbolData::operator<(a2, a1))
        {
          v20 = a1[1].n128_u64[0];
          result = *a1;
          v21 = a2[2];
          *a1 = *(__n128 *)a2;
          a1[1].n128_u64[0] = v21;
          *(__n128 *)a2 = result;
          a2[2] = v20;
        }
      }
    }
  }
  return result;
}

_QWORD *sub_1C596122C(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C59612E4(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C59612E4(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  uint64_t v16;

  *(_QWORD *)(result + 8) = 0;
  v3 = *(unsigned int *)(result + 16);
  if ((_DWORD)v3)
  {
    v4 = *(_QWORD **)result;
    v5 = 16 * v3;
    do
    {
      *v4 = -4096;
      v4 += 2;
      v5 -= 16;
    }
    while (v5);
  }
  if (a2 != a3)
  {
    v6 = 0;
    v7 = v3 - 1;
    do
    {
      v8 = *a2;
      if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v9 = ((v8 >> 4) ^ (v8 >> 9)) & v7;
        v10 = (_QWORD *)(*(_QWORD *)result + 16 * v9);
        v11 = *v10;
        if (v8 != *v10)
        {
          v12 = 0;
          v13 = 1;
          while (v11 != -4096)
          {
            if (v12)
              v14 = 0;
            else
              v14 = v11 == -8192;
            if (v14)
              v12 = v10;
            v15 = v9 + v13++;
            v9 = v15 & v7;
            v10 = (_QWORD *)(*(_QWORD *)result + 16 * (v15 & v7));
            v11 = *v10;
            if (v8 == *v10)
              goto LABEL_16;
          }
          if (v12)
            v10 = v12;
        }
LABEL_16:
        v16 = a2[1];
        *v10 = v8;
        v10[1] = v16;
        *(_DWORD *)(result + 8) = ++v6;
      }
      a2 += 2;
    }
    while (a2 != a3);
  }
  return result;
}

void llvm::StringTableBuilder::~StringTableBuilder(llvm::StringTableBuilder *this)
{
  MEMORY[0x1CAA32FB4](*(_QWORD *)this, 8);
}

{
  MEMORY[0x1CAA32FB4](*(_QWORD *)this, 8);
}

uint64_t llvm::StringTableBuilder::initSize(uint64_t this)
{
  uint64_t v1;

  v1 = *(int *)(this + 32);
  if (v1 <= 8)
    *(_QWORD *)(this + 24) = qword_1C8663A60[v1];
  return this;
}

uint64_t llvm::StringTableBuilder::StringTableBuilder(uint64_t result, unsigned int a2, int a3)
{
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 32) = a2;
  *(_DWORD *)(result + 36) = a3;
  *(_BYTE *)(result + 40) = 0;
  if (a2 <= 8 && ((0x13Fu >> a2) & 1) != 0)
    *(_QWORD *)(result + 24) = qword_1C8663A18[a2];
  return result;
}

{
  *(_QWORD *)(result + 24) = 0;
  *(_QWORD *)result = 0;
  *(_QWORD *)(result + 8) = 0;
  *(_DWORD *)(result + 16) = 0;
  *(_DWORD *)(result + 32) = a2;
  *(_DWORD *)(result + 36) = a3;
  *(_BYTE *)(result + 40) = 0;
  if (a2 <= 8 && ((0x13Fu >> a2) & 1) != 0)
    *(_QWORD *)(result + 24) = qword_1C8663A18[a2];
  return result;
}

void llvm::StringTableBuilder::write(llvm::StringTableBuilder *this, llvm::raw_ostream *a2)
{
  unint64_t v4;
  unsigned __int8 *v5;
  void *v6;
  size_t v7;
  uint64_t v8;
  uint64_t v9;

  v7 = 0;
  v8 = 0;
  v6 = &v9;
  v4 = *((_QWORD *)this + 3);
  if (v4)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v6, &v9, v4, 1);
    if (v4 != v7)
      bzero((char *)v6 + v7, v4 - v7);
    v7 = v4;
    v5 = (unsigned __int8 *)v6;
  }
  else
  {
    v5 = (unsigned __int8 *)&v9;
  }
  llvm::StringTableBuilder::write((unsigned int *)this, v5);
  llvm::raw_ostream::write(a2, (const char *)v6, v7);
  if (v6 != &v9)
    free(v6);
}

unsigned int *llvm::StringTableBuilder::write(unsigned int *this, unsigned __int8 *a2)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  size_t v9;
  int v10;
  int v11;
  unsigned int v12;

  v3 = this;
  if (this[2])
  {
    v4 = this[4];
    if ((_DWORD)v4)
    {
      v5 = 24 * v4;
      v6 = *(_QWORD *)this;
      while (1)
      {
        v7 = *(_DWORD *)(v6 + 12);
        if (v7)
        {
          if (v7 != 1 || *(_QWORD *)v6 != -2)
            goto LABEL_10;
        }
        else if (*(_QWORD *)v6 != -1)
        {
          goto LABEL_10;
        }
        v6 += 24;
        v5 -= 24;
        if (!v5)
          goto LABEL_21;
      }
    }
    v6 = *(_QWORD *)this;
LABEL_10:
    v8 = *(_QWORD *)this + 24 * v4;
LABEL_11:
    if (v6 != v8)
    {
      v9 = *(unsigned int *)(v6 + 8);
      if ((_DWORD)v9)
        this = (unsigned int *)memcpy(&a2[*(_QWORD *)(v6 + 16)], *(const void **)v6, v9);
      while (1)
      {
        v6 += 24;
        if (v6 == v8)
          break;
        v10 = *(_DWORD *)(v6 + 12);
        if (v10)
        {
          if (v10 != 1 || *(_QWORD *)v6 != -2)
            goto LABEL_11;
        }
        else if (*(_QWORD *)v6 != -1)
        {
          goto LABEL_11;
        }
      }
    }
  }
LABEL_21:
  v11 = v3[8];
  if (v11 == 1)
  {
    v12 = v3[6];
LABEL_27:
    *(_DWORD *)a2 = v12;
    return this;
  }
  if (v11 == 8)
  {
    v12 = bswap32(v3[6]);
    goto LABEL_27;
  }
  return this;
}

void llvm::StringTableBuilder::finalize(llvm::StringTableBuilder *this)
{
  llvm::StringTableBuilder::finalizeStringTable(this, 1);
}

void llvm::StringTableBuilder::finalizeStringTable(llvm::StringTableBuilder *this, int a2)
{
  uint64_t v3;
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  uint64_t v24;
  const void ***v25;
  const void **v26;
  char *v27;
  unint64_t v28;
  const void *v29;
  unint64_t v30;
  unint64_t v31;
  int v32;
  unsigned __int8 v33;
  unsigned __int8 v34;
  unint64_t v35;
  unint64_t v36;
  uint64_t v37;
  __int128 v38;

  *((_BYTE *)this + 40) = 1;
  if (a2)
  {
    v3 = *((unsigned int *)this + 2);
    if ((_DWORD)v3)
    {
      v4 = (char *)operator new(8 * v3);
      v5 = v4;
      v6 = *((unsigned int *)this + 4);
      if ((_DWORD)v6)
      {
        v7 = 24 * v6;
        v8 = *(_QWORD *)this;
        while (1)
        {
          v9 = *(_DWORD *)(v8 + 12);
          if (v9)
          {
            if (v9 != 1 || *(_QWORD *)v8 != -2)
              goto LABEL_11;
          }
          else if (*(_QWORD *)v8 != -1)
          {
            goto LABEL_11;
          }
          v8 += 24;
          v7 -= 24;
          if (!v7)
            goto LABEL_40;
        }
      }
      v8 = *(_QWORD *)this;
LABEL_11:
      v10 = *(_QWORD *)this + 24 * v6;
      if (v8 == v10)
      {
LABEL_40:
        v11 = v4;
      }
      else
      {
        v11 = v4;
        v12 = &v4[8 * v3];
LABEL_13:
        if (v11 >= v12)
        {
          v13 = (v11 - v5) >> 3;
          v14 = v13 + 1;
          if ((unint64_t)(v13 + 1) >> 61)
            abort();
          if ((v12 - v5) >> 2 > v14)
            v14 = (v12 - v5) >> 2;
          if ((unint64_t)(v12 - v5) >= 0x7FFFFFFFFFFFFFF8)
            v15 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v15 = v14;
          if (v15)
          {
            if (v15 >> 61)
              sub_1C4764EE4();
            v16 = (char *)operator new(8 * v15);
          }
          else
          {
            v16 = 0;
          }
          v17 = &v16[8 * v13];
          *(_QWORD *)v17 = v8;
          v18 = v17 + 8;
          while (v11 != v5)
          {
            v19 = *((_QWORD *)v11 - 1);
            v11 -= 8;
            *((_QWORD *)v17 - 1) = v19;
            v17 -= 8;
          }
          v12 = &v16[8 * v15];
          if (v5)
            operator delete(v5);
          v5 = v17;
          v11 = v18;
        }
        else
        {
          *(_QWORD *)v11 = v8;
          v11 += 8;
        }
        while (1)
        {
          v8 += 24;
          if (v8 == v10)
            break;
          v20 = *(_DWORD *)(v8 + 12);
          if (v20)
          {
            if (v20 != 1 || *(_QWORD *)v8 != -2)
            {
LABEL_37:
              if (v8 != v10)
                goto LABEL_13;
              break;
            }
          }
          else if (*(_QWORD *)v8 != -1)
          {
            goto LABEL_37;
          }
        }
      }
    }
    else
    {
      v5 = 0;
      v11 = 0;
    }
    sub_1C5961AE4((uint64_t)v5, (v11 - v5) >> 3, 0);
    v21 = *((int *)this + 8);
    if (v21 <= 8)
      *((_QWORD *)this + 3) = qword_1C8663A60[v21];
    if (v5 != v11)
    {
      v22 = 0;
      v23 = 0;
      if ((_DWORD)v21 == 6)
        v24 = 0;
      else
        v24 = -1;
      v37 = v24;
      v25 = (const void ***)v5;
      do
      {
        v26 = *v25;
        v27 = (char *)**v25;
        v28 = *((unsigned int *)*v25 + 2);
        if (v22 < v28
          || (_DWORD)v28 && memcmp(&v23[v22 - v28], **v25, *((unsigned int *)*v25 + 2))
          || (v29 = (const void *)(*((_QWORD *)this + 3) - v28 + v37),
              (v29 & (*((_DWORD *)this + 9) - 1)) != 0))
        {
          v30 = (*((_QWORD *)this + 3) + (unint64_t)*((unsigned int *)this + 9) - 1)
              / *((unsigned int *)this + 9)
              * *((unsigned int *)this + 9);
          v26[2] = (const void *)v30;
          v31 = v30 + v28;
          *((_QWORD *)this + 3) = v31;
          if ((_DWORD)v21 != 6)
            *((_QWORD *)this + 3) = v31 + 1;
          v23 = v27;
          v22 = v28;
        }
        else
        {
          v26[2] = v29;
        }
        ++v25;
      }
      while (v25 != (const void ***)v11);
    }
    if (v5)
      operator delete(v5);
  }
  v32 = *((_DWORD *)this + 8);
  switch(v32)
  {
    case 2:
    case 4:
      *((_QWORD *)this + 3) = (*((_QWORD *)this + 3) + 3) & 0xFFFFFFFFFFFFFFFCLL;
      if (v32 == 3)
        goto LABEL_62;
      break;
    case 3:
    case 5:
LABEL_62:
      *((_QWORD *)this + 3) = (*((_QWORD *)this + 3) + 7) & 0xFFFFFFFFFFFFFFF8;
      break;
    default:
      break;
  }
  if ((v32 & 0xFFFFFFFE) != 4)
  {
    if (v32)
      return;
    goto LABEL_68;
  }
  v33 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  if ((v33 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
  {
    v35 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override)
      v35 = 0xFF51AFD7ED558CCDLL;
    qword_1ED7EAC80 = v35;
    __cxa_guard_release(&qword_1ED7EAC88);
  }
  *(_QWORD *)&v38 = " ";
  DWORD2(v38) = 1;
  HIDWORD(v38) = 797982799 * (((qword_1ED7EAC80 ^ 0xE741163865C0F937) >> 47) ^ qword_1ED7EAC80 ^ 0x65C0F937);
  *(_QWORD *)(sub_1C62C2E30((uint64_t *)this, &v38) + 16) = 0;
  if (!*((_DWORD *)this + 8))
  {
LABEL_68:
    v34 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
    if ((v34 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
    {
      v36 = llvm::hashing::detail::fixed_seed_override;
      if (!llvm::hashing::detail::fixed_seed_override)
        v36 = 0xFF51AFD7ED558CCDLL;
      qword_1ED7EAC80 = v36;
      __cxa_guard_release(&qword_1ED7EAC88);
    }
    *(_QWORD *)&v38 = "";
    DWORD2(v38) = 0;
    HIDWORD(v38) = qword_1ED7EAC80 ^ 0x2F90404F;
    *(_QWORD *)(sub_1C62C2E30((uint64_t *)this, &v38) + 16) = 0;
  }
}

void llvm::StringTableBuilder::finalizeInOrder(llvm::StringTableBuilder *this)
{
  llvm::StringTableBuilder::finalizeStringTable(this, 0);
}

uint64_t sub_1C5961AE4(uint64_t result, unint64_t a2, int a3)
{
  unint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  uint64_t v14;
  uint64_t v15;

  if (a2 >= 2)
  {
    v3 = a2;
    v4 = result;
    v5 = a3;
    while (1)
    {
      v6 = *(unsigned int *)(*(_QWORD *)v4 + 8);
      if (v5 >= v6)
        v7 = -1;
      else
        v7 = *(unsigned __int8 *)(**(_QWORD **)v4 + v6 + ~v5);
      v8 = 0;
      v9 = v3;
      v10 = 1;
      do
      {
        v11 = *(_QWORD *)(v4 + 8 * v10);
        v12 = *(unsigned int *)(v11 + 8);
        if (v5 >= v12)
        {
          v13 = -1;
        }
        else
        {
          v13 = *(unsigned __int8 *)(*(_QWORD *)v11 + ~v5 + v12);
          if (v7 < v13)
          {
            v14 = *(_QWORD *)(v4 + 8 * v8);
            *(_QWORD *)(v4 + 8 * v8++) = v11;
            *(_QWORD *)(v4 + 8 * v10) = v14;
            goto LABEL_13;
          }
        }
        if (v13 < v7)
        {
          --v9;
          v15 = *(_QWORD *)(v4 + 8 * v9);
          *(_QWORD *)(v4 + 8 * v9) = v11;
          *(_QWORD *)(v4 + 8 * v10) = v15;
          continue;
        }
LABEL_13:
        ++v10;
      }
      while (v10 < v9);
      sub_1C5961AE4(v4, v8, v5);
      result = sub_1C5961AE4(v4 + 8 * v9, v3 - v9, v5);
      if (v7 != -1)
      {
        v3 = v9 - v8;
        v4 += 8 * v8;
        ++v5;
        if (v9 - v8 > 1)
          continue;
      }
      return result;
    }
  }
  return result;
}

_DWORD *llvm::StringTableBuilder::clear(_DWORD *this)
{
  *((_BYTE *)this + 40) = 0;
  return sub_1C5961C00(this);
}

_DWORD *sub_1C5961C00(_DWORD *result)
{
  uint64_t v1;
  _OWORD *v2;
  uint64_t v3;

  if (*((_QWORD *)result + 1))
  {
    v1 = result[4];
    if (v1 > 4 * result[2] && v1 >= 0x41)
    {
      return sub_1C5962158(result);
    }
    else
    {
      if ((_DWORD)v1)
      {
        v2 = *(_OWORD **)result;
        v3 = 24 * v1;
        do
        {
          *v2 = xmmword_1C85F6FF0;
          v2 = (_OWORD *)((char *)v2 + 24);
          v3 -= 24;
        }
        while (v3);
      }
      *((_QWORD *)result + 1) = 0;
    }
  }
  return result;
}

uint64_t llvm::StringTableBuilder::getOffset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _QWORD v6[2];
  uint64_t v7;

  v6[0] = a2;
  v6[1] = a3;
  v7 = 0;
  if (sub_1C5961DD4((uint64_t *)a1, (uint64_t)v6, &v7))
    v4 = v7;
  else
    v4 = *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 16);
  return *(_QWORD *)(v4 + 16);
}

unint64_t llvm::StringTableBuilder::add(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  unint64_t result;
  unint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  char v10;

  v3 = a3;
  *(_QWORD *)&v7 = a2;
  *((_QWORD *)&v7 + 1) = a3;
  v8 = 0;
  sub_1C59621F8(a1, &v7, &v8, (uint64_t)&v9);
  if (!v10)
    return *(_QWORD *)(v9 + 16);
  result = (*(_QWORD *)(a1 + 24) + (unint64_t)*(unsigned int *)(a1 + 36) - 1)
         / *(unsigned int *)(a1 + 36)
         * *(unsigned int *)(a1 + 36);
  *(_QWORD *)(v9 + 16) = result;
  v6 = result + v3;
  if (*(_DWORD *)(a1 + 32) != 6)
    ++v6;
  *(_QWORD *)(a1 + 24) = v6;
  return result;
}

_DWORD *sub_1C5961D38(_DWORD *result, int a2)
{
  _DWORD *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = result;
  if (a2)
  {
    v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    result[4] = v4;
    result = operator new(24 * v4, (std::align_val_t)8uLL);
    *(_QWORD *)v2 = result;
    *((_QWORD *)v2 + 1) = 0;
    v5 = v2[4];
    if ((_DWORD)v5)
    {
      v6 = 24 * v5;
      do
      {
        *(_OWORD *)result = xmmword_1C85F6FF0;
        result += 6;
        v6 -= 24;
      }
      while (v6);
    }
  }
  else
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = 0;
    result[4] = 0;
  }
  return result;
}

uint64_t sub_1C5961DD4(uint64_t *a1, uint64_t a2, _QWORD *a3)
{
  int v4;
  uint64_t v6;
  uint64_t v7;
  int v8;
  unsigned int v9;
  int v10;
  int i;
  int v12;
  uint64_t v13;
  int v14;
  const void *v15;
  const void *v16;
  uint64_t result;
  BOOL v18;
  size_t v19;
  int v20;

  v4 = *((_DWORD *)a1 + 4);
  if (!v4)
  {
    v13 = 0;
    result = 0;
    goto LABEL_21;
  }
  v6 = 0;
  v7 = *a1;
  v8 = *(_DWORD *)(a2 + 12);
  v9 = v4 - 1;
  v10 = 1;
  for (i = v8; ; i = v12 + v10++)
  {
    v12 = i & v9;
    v13 = v7 + 24 * (i & v9);
    v14 = *(_DWORD *)(v13 + 12);
    if (v8 == v14)
    {
      v15 = *(const void **)a2;
      v16 = *(const void **)v13;
      if (*(_QWORD *)v13 == -1)
      {
        if (v15 == (const void *)-1)
          goto LABEL_20;
      }
      else if (v16 == (const void *)-2)
      {
        if (v15 == (const void *)-2)
          goto LABEL_20;
      }
      else
      {
        v19 = *(unsigned int *)(v13 + 8);
        v20 = *(_DWORD *)(a2 + 8);
        if (v20 == (_DWORD)v19 && (!v20 || !memcmp(v15, v16, v19)))
        {
LABEL_20:
          result = 1;
          goto LABEL_21;
        }
      }
    }
    if (!v14)
      break;
    if (v14 == 1)
    {
      v18 = *(_QWORD *)v13 == -2;
      goto LABEL_13;
    }
LABEL_22:
    v18 = 0;
LABEL_13:
    if (v18 && v6 == 0)
      v6 = v13;
  }
  if (*(_QWORD *)v13 != -1)
    goto LABEL_22;
  result = 0;
  if (v6)
    v13 = v6;
LABEL_21:
  *a3 = v13;
  return result;
}

uint64_t sub_1C5961F04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v6;
  unsigned int v7;
  uint64_t v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_8;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_8:
    sub_1C5961FBC(a1, v7);
    v9 = 0;
    sub_1C5961DD4((uint64_t *)a1, a3, &v9);
    a4 = v9;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*(_DWORD *)(a4 + 12) || *(_QWORD *)a4 != -1)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_OWORD *sub_1C5961FBC(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C5962084(a1, v4, v4 + 24 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 24 * v10;
    do
    {
      *result = xmmword_1C85F6FF0;
      result = (_OWORD *)((char *)result + 24);
      v11 -= 24;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C5962084(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  uint64_t v8;
  int v9;
  _OWORD *v10;
  _OWORD *v11;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_OWORD **)result;
    v8 = 24 * v6;
    do
    {
      *v7 = xmmword_1C85F6FF0;
      v7 = (_OWORD *)((char *)v7 + 24);
      v8 -= 24;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *(_DWORD *)(a2 + 12);
    if (!v9)
    {
      if (*(_QWORD *)a2 == -1)
        goto LABEL_8;
LABEL_7:
      v11 = 0;
      result = sub_1C5961DD4((uint64_t *)v5, a2, &v11);
      v10 = v11;
      *v11 = *(_OWORD *)a2;
      *((_QWORD *)v10 + 2) = *(_QWORD *)(a2 + 16);
      ++*(_DWORD *)(v5 + 8);
      goto LABEL_8;
    }
    if (v9 != 1 || *(_QWORD *)a2 != -2)
      goto LABEL_7;
LABEL_8:
    a2 += 24;
  }
  return result;
}

_DWORD *sub_1C5962158(_DWORD *result)
{
  _DWORD *v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  _OWORD *v6;
  uint64_t v7;

  v1 = result;
  v2 = result[4];
  v3 = result[2];
  v4 = 1 << (33 - __clz(v3 - 1));
  if (v4 <= 64)
    v4 = 64;
  if (v3)
    v5 = v4;
  else
    v5 = 0;
  if (v5 == (_DWORD)v2)
  {
    *((_QWORD *)result + 1) = 0;
    if ((_DWORD)v2)
    {
      v6 = *(_OWORD **)result;
      v7 = 24 * v2;
      do
      {
        *v6 = xmmword_1C85F6FF0;
        v6 = (_OWORD *)((char *)v6 + 24);
        v7 -= 24;
      }
      while (v7);
    }
  }
  else
  {
    MEMORY[0x1CAA32FB4](*(_QWORD *)result, 8);
    return sub_1C5961D38(v1, v5);
  }
  return result;
}

uint64_t sub_1C59621F8@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  uint64_t v9;
  char v10;
  uint64_t v11;
  uint64_t v12;

  v12 = 0;
  result = sub_1C5961DD4((uint64_t *)a1, (uint64_t)a2, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = sub_1C5961F04(a1, (uint64_t)a2, (uint64_t)a2, v12);
    v9 = result;
    *(_OWORD *)result = *a2;
    *(_QWORD *)(result + 16) = *a3;
    v10 = 1;
  }
  v11 = *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v11;
  *(_BYTE *)(a4 + 16) = v10;
  return result;
}

void llvm::SubtargetFeatures::Split(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  const void **v4;
  const void **v5;
  size_t v6;
  const void *v7;
  __int128 *p_dst;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  __int128 v20;
  int64x2_t v21;
  char v22;
  unint64_t v23;
  __int128 __dst;
  unint64_t v25;
  _QWORD v26[2];
  uint64_t v27;
  int64x2_t v28;
  unint64_t v29;
  unint64_t *v30;
  void *v31;
  uint64_t v32;
  _QWORD v33[8];

  v33[6] = *MEMORY[0x1E0C80C00];
  v26[0] = a2;
  v26[1] = a3;
  v31 = v33;
  v32 = 0x300000000;
  llvm::StringRef::split((char *)v26, (uint64_t)&v31, 44, -1, 0);
  sub_1C5962544(a1, v32);
  v4 = (const void **)v31;
  if (!(_DWORD)v32)
    goto LABEL_32;
  v5 = (const void **)((char *)v31 + 16 * v32);
  do
  {
    v6 = (size_t)v4[1];
    if (v6 >= 0x7FFFFFFFFFFFFFF8)
LABEL_35:
      abort();
    v7 = *v4;
    if (v6 >= 0x17)
    {
      v9 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v6 | 7) != 0x17)
        v9 = v6 | 7;
      v10 = v9 + 1;
      p_dst = (__int128 *)operator new(v9 + 1);
      *((_QWORD *)&__dst + 1) = v6;
      v25 = v10 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
LABEL_10:
      memmove(p_dst, v7, v6);
      goto LABEL_11;
    }
    HIBYTE(v25) = v4[1];
    p_dst = &__dst;
    if (v6)
      goto LABEL_10;
LABEL_11:
    *((_BYTE *)p_dst + v6) = 0;
    v11 = a1[1];
    v12 = a1[2];
    if (v11 >= v12)
    {
      v13 = *a1;
      v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v11 - *a1) >> 3);
      v15 = v14 + 1;
      if (v14 + 1 > 0xAAAAAAAAAAAAAAALL)
        goto LABEL_35;
      if (0x5555555555555556 * ((uint64_t)(v12 - v13) >> 3) > v15)
        v15 = 0x5555555555555556 * ((uint64_t)(v12 - v13) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v12 - v13) >> 3) >= 0x555555555555555)
        v16 = 0xAAAAAAAAAAAAAAALL;
      else
        v16 = v15;
      v30 = a1 + 2;
      if (v16)
      {
        if (v16 > 0xAAAAAAAAAAAAAAALL)
          sub_1C4764EE4();
        v17 = (char *)operator new(24 * v16);
      }
      else
      {
        v17 = 0;
      }
      v18 = &v17[24 * v14];
      *(_OWORD *)v18 = __dst;
      *((_QWORD *)v18 + 2) = v25;
      v25 = 0;
      __dst = 0uLL;
      if (v11 == v13)
      {
        v22 = 0;
        v21 = vdupq_n_s64(v11);
        v19 = &v17[24 * v14];
      }
      else
      {
        v19 = &v17[24 * v14];
        do
        {
          v20 = *(_OWORD *)(v11 - 24);
          *((_QWORD *)v19 - 1) = *(_QWORD *)(v11 - 8);
          *(_OWORD *)(v19 - 24) = v20;
          v19 -= 24;
          *(_QWORD *)(v11 - 16) = 0;
          *(_QWORD *)(v11 - 8) = 0;
          *(_QWORD *)(v11 - 24) = 0;
          v11 -= 24;
        }
        while (v11 != v13);
        v21 = *(int64x2_t *)a1;
        v12 = a1[2];
        v22 = HIBYTE(v25);
      }
      v23 = (unint64_t)(v18 + 24);
      *a1 = (unint64_t)v19;
      a1[1] = (unint64_t)(v18 + 24);
      v28 = v21;
      a1[2] = (unint64_t)&v17[24 * v16];
      v29 = v12;
      v27 = v21.i64[0];
      sub_1C4D868F0((uint64_t)&v27);
      a1[1] = v23;
      if (v22 < 0)
        operator delete((void *)__dst);
    }
    else
    {
      *(_OWORD *)v11 = __dst;
      *(_QWORD *)(v11 + 16) = v25;
      a1[1] = v11 + 24;
    }
    v4 += 2;
  }
  while (v4 != v5);
  v4 = (const void **)v31;
LABEL_32:
  if (v4 != v33)
    free(v4);
}

unint64_t *sub_1C5962544(unint64_t *result, unint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  int64x2_t *v4;
  unint64_t v5;
  uint64_t v6;
  char *v7;
  char *v8;
  char *v9;
  __int128 v10;
  int64x2_t v11;
  uint64_t v12;
  int64x2_t v13;
  unint64_t v14;
  unint64_t *v15;

  v2 = result[2];
  v3 = *result;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v2 - *result) >> 3) < a2)
  {
    if (a2 >= 0xAAAAAAAAAAAAAABLL)
      abort();
    v4 = (int64x2_t *)result;
    v5 = result[1];
    v15 = result + 2;
    v6 = 3 * a2;
    v7 = (char *)operator new(24 * a2);
    v8 = &v7[24 * ((uint64_t)(v5 - v3) / 24)];
    if (v5 == v3)
    {
      v11 = vdupq_n_s64(v3);
      v9 = &v7[24 * ((uint64_t)(v5 - v3) / 24)];
    }
    else
    {
      v9 = &v7[24 * ((uint64_t)(v5 - v3) / 24)];
      do
      {
        v10 = *(_OWORD *)(v5 - 24);
        *((_QWORD *)v9 - 1) = *(_QWORD *)(v5 - 8);
        *(_OWORD *)(v9 - 24) = v10;
        v9 -= 24;
        *(_QWORD *)(v5 - 16) = 0;
        *(_QWORD *)(v5 - 8) = 0;
        *(_QWORD *)(v5 - 24) = 0;
        v5 -= 24;
      }
      while (v5 != v3);
      v11 = *v4;
      v2 = v4[1].u64[0];
    }
    v4->i64[0] = (uint64_t)v9;
    v4->i64[1] = (uint64_t)v8;
    v13 = v11;
    v4[1].i64[0] = (uint64_t)&v7[8 * v6];
    v14 = v2;
    v12 = v11.i64[0];
    return (unint64_t *)sub_1C4D868F0((uint64_t)&v12);
  }
  return result;
}

void llvm::SubtargetFeatures::AddFeature(int64x2_t *a1, char *a2, unint64_t a3, int a4)
{
  int v5;
  const std::string::value_type *v6;
  std::string *v7;
  std::string::size_type v8;
  unint64_t v9;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t v15;
  char *v16;
  char *v17;
  char *v18;
  __int128 v19;
  int64x2_t v20;
  char *v21;
  int v22;
  std::string v23;
  void *__p[2];
  std::string::size_type v25;
  uint64_t v26;
  int64x2_t v27;
  unint64_t v28;
  int64x2_t *v29;

  if (a3)
  {
    v5 = *a2;
    if (v5 == 45 || v5 == 43)
    {
      sub_1C5E3DEA4(__p, a2, (uint64_t (*)(_QWORD))sub_1C5E3C6A8, &a2[a3], (uint64_t)sub_1C5E3C6A8, a3);
    }
    else
    {
      if (a4)
        v6 = "+";
      else
        v6 = "-";
      sub_1C5E3DEA4(&v23, a2, (uint64_t (*)(_QWORD))sub_1C5E3C6A8, &a2[a3], (uint64_t)sub_1C5E3C6A8, a3);
      v7 = std::string::insert(&v23, 0, v6);
      v8 = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v25 = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
    }
    v9 = a1[1].u64[0];
    v10 = a1->u64[1];
    if (v10 >= v9)
    {
      v12 = a1->i64[0];
      v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - a1->i64[0]) >> 3);
      v14 = v13 + 1;
      if (v13 + 1 > 0xAAAAAAAAAAAAAAALL)
        abort();
      if (0x5555555555555556 * ((uint64_t)(v9 - v12) >> 3) > v14)
        v14 = 0x5555555555555556 * ((uint64_t)(v9 - v12) >> 3);
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v9 - v12) >> 3) >= 0x555555555555555)
        v15 = 0xAAAAAAAAAAAAAAALL;
      else
        v15 = v14;
      v29 = a1 + 1;
      if (v15)
      {
        if (v15 > 0xAAAAAAAAAAAAAAALL)
          sub_1C4764EE4();
        v16 = (char *)operator new(24 * v15);
      }
      else
      {
        v16 = 0;
      }
      v17 = &v16[24 * v13];
      *(_OWORD *)v17 = *(_OWORD *)__p;
      *((_QWORD *)v17 + 2) = v25;
      __p[1] = 0;
      v25 = 0;
      __p[0] = 0;
      if (v10 == v12)
      {
        v20 = vdupq_n_s64(v10);
        v18 = &v16[24 * v13];
      }
      else
      {
        v18 = &v16[24 * v13];
        do
        {
          v19 = *(_OWORD *)(v10 - 24);
          *((_QWORD *)v18 - 1) = *(_QWORD *)(v10 - 8);
          *(_OWORD *)(v18 - 24) = v19;
          v18 -= 24;
          *(_QWORD *)(v10 - 16) = 0;
          *(_QWORD *)(v10 - 8) = 0;
          *(_QWORD *)(v10 - 24) = 0;
          v10 -= 24;
        }
        while (v10 != v12);
        v20 = *a1;
        v9 = a1[1].u64[0];
      }
      v21 = v17 + 24;
      a1->i64[0] = (uint64_t)v18;
      a1->i64[1] = (uint64_t)(v17 + 24);
      v27 = v20;
      a1[1].i64[0] = (uint64_t)&v16[24 * v15];
      v28 = v9;
      v26 = v20.i64[0];
      sub_1C4D868F0((uint64_t)&v26);
      v22 = SHIBYTE(v25);
      a1->i64[1] = (uint64_t)v21;
      if (v22 < 0)
        operator delete(__p[0]);
    }
    else
    {
      v11 = *(_OWORD *)__p;
      *(_QWORD *)(v10 + 16) = v25;
      *(_OWORD *)v10 = v11;
      __p[1] = 0;
      v25 = 0;
      __p[0] = 0;
      a1->i64[1] = v10 + 24;
    }
    if (v5 != 43 && v5 != 45 && SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v23.__r_.__value_.__l.__data_);
  }
}

unint64_t *llvm::SubtargetFeatures::SubtargetFeatures(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  llvm::SubtargetFeatures::Split(a1, a2, a3);
  return a1;
}

{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  llvm::SubtargetFeatures::Split(a1, a2, a3);
  return a1;
}

uint64_t llvm::TargetRegistry::targets(llvm::TargetRegistry *this)
{
  return qword_1ED834A00;
}

uint64_t llvm::TargetRegistry::lookupTarget(uint64_t a1, llvm::Triple *a2, uint64_t a3)
{
  char v5;
  unint64_t v6;
  uint64_t v7;
  void *v8;
  size_t v9;
  BOOL v10;
  size_t v11;
  std::string *v13;
  std::string::size_type v14;
  char v15;
  std::string::size_type v16;
  uint64_t *v18;
  std::string *v19;
  std::string::size_type v20;
  char v21;
  uint64_t v22;
  uint64_t ArchTypeForLLVMName;
  char *ArchName;
  uint64_t v25;
  std::string v26;
  std::string v27;
  _QWORD v28[3];

  v28[2] = *MEMORY[0x1E0C80C00];
  v5 = *(_BYTE *)(a1 + 23);
  if (v5 < 0)
    v6 = *(_QWORD *)(a1 + 8);
  else
    v6 = v5 & 0x7F;
  if (!v6)
  {
    memset(&v26, 0, sizeof(v26));
    v18 = llvm::TargetRegistry::lookupTarget((std::string::size_type)a2, (uint64_t)&v26);
    if (v18)
    {
      v7 = (uint64_t)v18;
      if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v26.__r_.__value_.__l.__data_);
      return v7;
    }
    std::operator+<char>();
    v19 = std::string::append(&v27, "', see --version and --triple.\n");
    v20 = v19->__r_.__value_.__r.__words[0];
    v28[0] = v19->__r_.__value_.__l.__size_;
    *(_QWORD *)((char *)v28 + 7) = *(std::string::size_type *)((char *)&v19->__r_.__value_.__r.__words[1] + 7);
    v21 = HIBYTE(v19->__r_.__value_.__r.__words[2]);
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    if (*(char *)(a3 + 23) < 0)
      operator delete(*(void **)a3);
    v22 = v28[0];
    *(_QWORD *)a3 = v20;
    *(_QWORD *)(a3 + 8) = v22;
    *(_QWORD *)(a3 + 15) = *(_QWORD *)((char *)v28 + 7);
    *(_BYTE *)(a3 + 23) = v21;
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v27.__r_.__value_.__l.__data_);
LABEL_28:
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
    return 0;
  }
  v7 = qword_1ED834A00;
  if (!qword_1ED834A00)
  {
LABEL_25:
    std::operator+<char>();
    v13 = std::string::append(&v26, "'.\n");
    v14 = v13->__r_.__value_.__r.__words[0];
    v27.__r_.__value_.__r.__words[0] = v13->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v27.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v13->__r_.__value_.__r.__words[1] + 7);
    v15 = HIBYTE(v13->__r_.__value_.__r.__words[2]);
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    if (*(char *)(a3 + 23) < 0)
      operator delete(*(void **)a3);
    v16 = v27.__r_.__value_.__r.__words[0];
    *(_QWORD *)a3 = v14;
    *(_QWORD *)(a3 + 8) = v16;
    *(_QWORD *)(a3 + 15) = *(std::string::size_type *)((char *)v27.__r_.__value_.__r.__words + 7);
    *(_BYTE *)(a3 + 23) = v15;
    goto LABEL_28;
  }
  if (v5 < 0)
    v8 = *(void **)a1;
  else
    v8 = (void *)a1;
  if (v5 < 0)
    v9 = *(_QWORD *)(a1 + 8);
  else
    v9 = *(unsigned __int8 *)(a1 + 23);
  v10 = *(_QWORD *)(a1 + 8) != -1 || v5 >= 0;
  if (v9 >= v6)
    v11 = v6;
  else
    v11 = v9;
  while (1)
  {
    if (strlen(*(const char **)(v7 + 16)) == v6)
    {
      if (!v10)
        abort();
      if (!memcmp(v8, *(const void **)(v7 + 16), v11) && v9 == v6)
        break;
    }
    v7 = *(_QWORD *)v7;
    if (!v7)
      goto LABEL_25;
  }
  ArchTypeForLLVMName = llvm::Triple::getArchTypeForLLVMName((unsigned __int16 *)v8, v6);
  if ((_DWORD)ArchTypeForLLVMName)
  {
    ArchName = llvm::Triple::getArchName(ArchTypeForLLVMName, ArchTypeForLLVMName, 0);
    llvm::Triple::setArchName(a2, ArchName, v25);
  }
  return v7;
}

uint64_t *llvm::TargetRegistry::lookupTarget(std::string::size_type a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  std::string *v6;
  std::string::size_type v7;
  char v8;
  std::string::size_type v9;
  void *v10;
  std::string *v11;
  std::string::size_type v12;
  std::string *v13;
  std::string::size_type v14;
  std::string *v15;
  std::string::size_type v16;
  std::string *v17;
  std::string::size_type v18;
  char v19;
  uint64_t v20;
  std::string v22;
  std::string v23;
  std::string __p;
  unsigned int v25;
  _QWORD v26[2];
  std::string v27;
  __int16 v28;
  uint64_t v29;

  v29 = *MEMORY[0x1E0C80C00];
  if (qword_1ED834A00)
  {
    v28 = 260;
    v27.__r_.__value_.__r.__words[0] = a1;
    llvm::Triple::Triple((uint64_t)&__p, (llvm::Twine *)&v27);
    v3 = v25;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    v4 = &qword_1ED834A00;
    while (1)
    {
      v4 = (uint64_t *)*v4;
      if (!v4)
        break;
      if (((unsigned int (*)(uint64_t))v4[1])(v3))
      {
        v5 = *v4;
        if (!*v4)
          return v4;
        while (((*(uint64_t (**)(uint64_t))(v5 + 8))(v3) & 1) == 0)
        {
          v5 = *(_QWORD *)v5;
          if (!v5)
            return v4;
        }
        v22.__r_.__value_.__r.__words[0] = (std::string::size_type)operator new(0x20uLL);
        *(_OWORD *)&v22.__r_.__value_.__r.__words[1] = xmmword_1C6613090;
        strcpy(v22.__r_.__value_.__l.__data_, "Cannot choose between targets \"");
        v11 = std::string::append(&v22, (const std::string::value_type *)v4[2]);
        v12 = v11->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v23.__r_.__value_.__l.__data_ = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
        v23.__r_.__value_.__r.__words[2] = v12;
        v11->__r_.__value_.__l.__size_ = 0;
        v11->__r_.__value_.__r.__words[2] = 0;
        v11->__r_.__value_.__r.__words[0] = 0;
        v13 = std::string::append(&v23, "\" and \"");
        v14 = v13->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v27.__r_.__value_.__l.__data_ = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
        v27.__r_.__value_.__r.__words[2] = v14;
        v13->__r_.__value_.__l.__size_ = 0;
        v13->__r_.__value_.__r.__words[2] = 0;
        v13->__r_.__value_.__r.__words[0] = 0;
        v15 = std::string::append(&v27, *(const std::string::value_type **)(v5 + 16));
        v16 = v15->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v16;
        v15->__r_.__value_.__l.__size_ = 0;
        v15->__r_.__value_.__r.__words[2] = 0;
        v15->__r_.__value_.__r.__words[0] = 0;
        v17 = std::string::append(&__p, "\"");
        v18 = v17->__r_.__value_.__r.__words[0];
        v26[0] = v17->__r_.__value_.__l.__size_;
        *(_QWORD *)((char *)v26 + 7) = *(std::string::size_type *)((char *)&v17->__r_.__value_.__r.__words[1] + 7);
        v19 = HIBYTE(v17->__r_.__value_.__r.__words[2]);
        v17->__r_.__value_.__l.__size_ = 0;
        v17->__r_.__value_.__r.__words[2] = 0;
        v17->__r_.__value_.__r.__words[0] = 0;
        if (*(char *)(a2 + 23) < 0)
          operator delete(*(void **)a2);
        v20 = v26[0];
        *(_QWORD *)a2 = v18;
        *(_QWORD *)(a2 + 8) = v20;
        *(_QWORD *)(a2 + 15) = *(_QWORD *)((char *)v26 + 7);
        *(_BYTE *)(a2 + 23) = v19;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v27.__r_.__value_.__l.__data_);
        if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v23.__r_.__value_.__l.__data_);
        if (SHIBYTE(v22.__r_.__value_.__r.__words[2]) < 0)
        {
          v10 = (void *)v22.__r_.__value_.__r.__words[0];
          goto LABEL_26;
        }
        return 0;
      }
    }
    std::operator+<char>();
    v6 = std::string::append(&__p, "\"");
    v7 = v6->__r_.__value_.__r.__words[0];
    v27.__r_.__value_.__r.__words[0] = v6->__r_.__value_.__l.__size_;
    *(std::string::size_type *)((char *)v27.__r_.__value_.__r.__words + 7) = *(std::string::size_type *)((char *)&v6->__r_.__value_.__r.__words[1] + 7);
    v8 = HIBYTE(v6->__r_.__value_.__r.__words[2]);
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    if (*(char *)(a2 + 23) < 0)
      operator delete(*(void **)a2);
    v9 = v27.__r_.__value_.__r.__words[0];
    *(_QWORD *)a2 = v7;
    *(_QWORD *)(a2 + 8) = v9;
    *(_QWORD *)(a2 + 15) = *(std::string::size_type *)((char *)v27.__r_.__value_.__r.__words + 7);
    *(_BYTE *)(a2 + 23) = v8;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      v10 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_26:
      operator delete(v10);
    }
  }
  else
  {
    MEMORY[0x1CAA32ABC](a2, "Unable to find target for this triple (no targets are registered)");
  }
  return 0;
}

void llvm::TargetRegistry::printRegisteredTargetsForVersion(llvm::TargetRegistry *this, llvm::raw_ostream *a2)
{
  uint64_t v3;
  unint64_t v4;
  char *v5;
  char *v6;
  char *v7;
  uint64_t v8;
  size_t v9;
  char *v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v14;
  char *v15;
  __int128 v16;
  void *v17;
  char *v18;
  _DWORD *v19;
  llvm::raw_ostream *v20;
  void *v21;
  const void *v22;
  unint64_t v23;
  uint64_t v24;
  llvm::raw_ostream *v25;
  uint64_t v26;
  const void *v27;
  size_t v28;
  void *v29;
  _BYTE *v30;
  uint64_t v31;

  v3 = qword_1ED834A00;
  if (qword_1ED834A00)
  {
    v4 = 0;
    v5 = 0;
    v6 = 0;
    v7 = 0;
    do
    {
      v8 = *(_QWORD *)(v3 + 16);
      if (v8)
        v9 = strlen(*(const char **)(v3 + 16));
      else
        v9 = 0;
      if (v6 >= v5)
      {
        v11 = 0xAAAAAAAAAAAAAAABLL * ((v6 - v7) >> 3) + 1;
        if (v11 > 0xAAAAAAAAAAAAAAALL)
          abort();
        if (0x5555555555555556 * ((v5 - v7) >> 3) > v11)
          v11 = 0x5555555555555556 * ((v5 - v7) >> 3);
        if (0xAAAAAAAAAAAAAAABLL * ((v5 - v7) >> 3) >= 0x555555555555555)
          v12 = 0xAAAAAAAAAAAAAAALL;
        else
          v12 = v11;
        if (v12)
        {
          if (v12 > 0xAAAAAAAAAAAAAAALL)
            sub_1C4764EE4();
          v13 = (char *)operator new(24 * v12);
        }
        else
        {
          v13 = 0;
        }
        v14 = &v13[8 * ((v6 - v7) >> 3)];
        *(_QWORD *)v14 = v8;
        *((_QWORD *)v14 + 1) = v9;
        *((_QWORD *)v14 + 2) = v3;
        if (v6 == v7)
        {
          v7 = &v13[8 * ((v6 - v7) >> 3)];
        }
        else
        {
          v15 = &v13[8 * ((v6 - v7) >> 3)];
          do
          {
            v16 = *(_OWORD *)(v6 - 24);
            *((_QWORD *)v15 - 1) = *((_QWORD *)v6 - 1);
            *(_OWORD *)(v15 - 24) = v16;
            v15 -= 24;
            v6 -= 24;
          }
          while (v6 != v7);
          v6 = v7;
          v7 = v15;
        }
        v5 = &v13[24 * v12];
        v10 = v14 + 24;
        if (v6)
          operator delete(v6);
      }
      else
      {
        *(_QWORD *)v6 = v8;
        *((_QWORD *)v6 + 1) = v9;
        v10 = v6 + 24;
        *((_QWORD *)v6 + 2) = v3;
      }
      if (v4 <= *((_QWORD *)v10 - 2))
        v4 = *((_QWORD *)v10 - 2);
      v3 = *(_QWORD *)v3;
      v6 = v10;
    }
    while (v3);
  }
  else
  {
    v7 = 0;
    v10 = 0;
    LODWORD(v4) = 0;
  }
  if (v10 - v7 >= 48)
    qsort(v7, (v10 - v7) / 0x18uLL, 0x18uLL, (int (__cdecl *)(const void *, const void *))sub_1C5963200);
  v17 = (void *)*((_QWORD *)this + 4);
  if (*((_QWORD *)this + 3) - (_QWORD)v17 > 0x15uLL)
  {
    qmemcpy(v17, "  Registered Targets:\n", 22);
    *((_QWORD *)this + 4) += 22;
  }
  else
  {
    llvm::raw_ostream::write(this, "  Registered Targets:\n", 0x16uLL);
  }
  if (v7 == v10)
  {
    v31 = *((_QWORD *)this + 4);
    if ((unint64_t)(*((_QWORD *)this + 3) - v31) > 0xA)
    {
      *(_DWORD *)(v31 + 7) = 170485102;
      *(_QWORD *)v31 = *(_QWORD *)"    (none)\n";
      *((_QWORD *)this + 4) += 11;
      if (v7)
        goto LABEL_59;
      return;
    }
    llvm::raw_ostream::write(this, "    (none)\n", 0xBuLL);
  }
  else
  {
    v18 = v7;
    do
    {
      v19 = (_DWORD *)*((_QWORD *)this + 4);
      if (*((_QWORD *)this + 3) - (_QWORD)v19 > 3uLL)
      {
        *v19 = 538976288;
        v21 = (void *)(*((_QWORD *)this + 4) + 4);
        *((_QWORD *)this + 4) = v21;
        v20 = this;
      }
      else
      {
        v20 = llvm::raw_ostream::write(this, "    ", 4uLL);
        v21 = (void *)*((_QWORD *)v20 + 4);
      }
      v22 = *(const void **)v18;
      v23 = *((_QWORD *)v18 + 1);
      if (v23 <= *((_QWORD *)v20 + 3) - (_QWORD)v21)
      {
        if (v23)
        {
          memcpy(v21, v22, *((_QWORD *)v18 + 1));
          *((_QWORD *)v20 + 4) += v23;
        }
      }
      else
      {
        llvm::raw_ostream::write(v20, (const char *)v22, *((_QWORD *)v18 + 1));
      }
      llvm::raw_ostream::indent(this, v4 - *((_DWORD *)v18 + 2));
      v24 = *((_QWORD *)this + 4);
      if ((unint64_t)(*((_QWORD *)this + 3) - v24) > 2)
      {
        *(_BYTE *)(v24 + 2) = 32;
        *(_WORD *)v24 = 11552;
        *((_QWORD *)this + 4) += 3;
        v25 = this;
      }
      else
      {
        v25 = llvm::raw_ostream::write(this, " - ", 3uLL);
      }
      v26 = *((_QWORD *)v18 + 2);
      v27 = *(const void **)(v26 + 24);
      if (v27)
      {
        v28 = strlen(*(const char **)(v26 + 24));
        v29 = (void *)*((_QWORD *)v25 + 4);
        if (v28 <= *((_QWORD *)v25 + 3) - (_QWORD)v29)
        {
          if (v28)
          {
            memcpy(v29, v27, v28);
            *((_QWORD *)v25 + 4) += v28;
          }
        }
        else
        {
          v25 = llvm::raw_ostream::write(v25, (const char *)v27, v28);
        }
      }
      v30 = (_BYTE *)*((_QWORD *)v25 + 4);
      if ((unint64_t)v30 >= *((_QWORD *)v25 + 3))
      {
        llvm::raw_ostream::write(v25, 10);
      }
      else
      {
        *((_QWORD *)v25 + 4) = v30 + 1;
        *v30 = 10;
      }
      v18 += 24;
    }
    while (v18 != v10);
  }
  if (v7)
LABEL_59:
    operator delete(v7);
}

uint64_t sub_1C5963200(uint64_t a1, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;
  size_t v4;
  int v5;
  unsigned int v7;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(_QWORD *)(a1 + 8);
  if (v2 >= v3)
    v4 = *(_QWORD *)(a1 + 8);
  else
    v4 = *(_QWORD *)(a2 + 8);
  if (v4)
  {
    v5 = memcmp(*(const void **)a1, *(const void **)a2, v4);
    if (v5)
      return (v5 >> 31) | 1u;
  }
  if (v3 < v2)
    v7 = -1;
  else
    v7 = 1;
  if (v3 == v2)
    return 0;
  else
    return v7;
}

void sub_1C5963258(uint64_t a1)
{
  llvm *v2;
  void **v3;
  size_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  uint64_t v10;
  const void *v11;
  size_t v12;
  void *__p[2];
  char v14;

  v2 = llvm::dbgs((llvm *)a1);
  llvm::wasm::relocTypetoString((llvm::wasm *)*(unsigned int *)(a1 + 24));
  if (v14 >= 0)
    v3 = __p;
  else
    v3 = (void **)__p[0];
  if (v14 >= 0)
    v4 = v14 & 0x7F;
  else
    v4 = (size_t)__p[1];
  llvm::raw_ostream::write(v2, (const char *)v3, v4);
  v5 = *((_QWORD *)v2 + 4);
  if ((unint64_t)(*((_QWORD *)v2 + 3) - v5) > 4)
  {
    *(_BYTE *)(v5 + 4) = 61;
    *(_DWORD *)v5 = 1717980960;
    *((_QWORD *)v2 + 4) += 5;
  }
  else
  {
    llvm::raw_ostream::write(v2, " Off=", 5uLL);
  }
  sub_1C5E21910(v2, *(_QWORD *)a1, 0, 0, 0);
  v6 = *((_QWORD *)v2 + 4);
  if ((unint64_t)(*((_QWORD *)v2 + 3) - v6) > 5)
  {
    *(_WORD *)(v6 + 4) = 15725;
    *(_DWORD *)v6 = 2035490860;
    *((_QWORD *)v2 + 4) += 6;
  }
  else
  {
    llvm::raw_ostream::write(v2, ", Sym=", 6uLL);
  }
  llvm::MCSymbol::print(*(llvm::MCSymbol **)(a1 + 8), v2, 0);
  v7 = *((_QWORD *)v2 + 4);
  if ((unint64_t)(*((_QWORD *)v2 + 3) - v7) > 8)
  {
    *(_BYTE *)(v7 + 8) = 61;
    *(_QWORD *)v7 = *(_QWORD *)", Addend=";
    *((_QWORD *)v2 + 4) += 9;
  }
  else
  {
    llvm::raw_ostream::write(v2, ", Addend=", 9uLL);
  }
  llvm::raw_ostream::operator<<(v2, *(_QWORD *)(a1 + 16));
  v8 = (void *)*((_QWORD *)v2 + 4);
  if (*((_QWORD *)v2 + 3) - (_QWORD)v8 > 0xEuLL)
  {
    qmemcpy(v8, ", FixupSection=", 15);
    v9 = (void *)(*((_QWORD *)v2 + 4) + 15);
    *((_QWORD *)v2 + 4) = v9;
  }
  else
  {
    llvm::raw_ostream::write(v2, ", FixupSection=", 0xFuLL);
    v9 = (void *)*((_QWORD *)v2 + 4);
  }
  v10 = *(_QWORD *)(a1 + 32);
  v11 = *(const void **)(v10 + 200);
  v12 = *(_QWORD *)(v10 + 208);
  if (v12 <= *((_QWORD *)v2 + 3) - (_QWORD)v9)
  {
    if (v12)
    {
      memcpy(v9, v11, v12);
      *((_QWORD *)v2 + 4) += v12;
    }
  }
  else
  {
    llvm::raw_ostream::write(v2, (const char *)v11, v12);
  }
  if (v14 < 0)
    operator delete(__p[0]);
}

uint64_t sub_1C5963470(uint64_t a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  void *v8;
  void *v9;
  void *v10;
  uint64_t v11;

  *(_QWORD *)a1 = &off_1E8184460;
  v2 = *(char **)(a1 + 576);
  v3 = *(unsigned int *)(a1 + 584);
  if ((_DWORD)v3)
  {
    v4 = 80 * v3;
    do
    {
      v5 = *(char **)&v2[v4 - 32];
      if (&v2[v4 - 8] != v5)
        free(v5);
      v4 -= 80;
    }
    while (v4);
    v2 = *(char **)(a1 + 576);
  }
  if (v2 != (char *)(a1 + 592))
    free(v2);
  sub_1C62C334C((char **)(a1 + 304));
  sub_1C62C33D0(a1 + 280);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 280), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 256), 8);
  sub_1C4DCF4C8((unsigned int *)(a1 + 232));
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 232), 8);
  v6 = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 224) = 0;
  if (v6)
    MEMORY[0x1CAA32FC0](v6, 0x1070C40257E1745);
  v7 = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 216) = 0;
  if (v7)
    MEMORY[0x1CAA32FC0](v7, 0x1070C40257E1745);
  v8 = *(void **)(a1 + 192);
  if (v8)
  {
    *(_QWORD *)(a1 + 200) = v8;
    operator delete(v8);
  }
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 168), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 144), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 120), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 96), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 72), 8);
  v9 = *(void **)(a1 + 48);
  if (v9)
  {
    *(_QWORD *)(a1 + 56) = v9;
    operator delete(v9);
  }
  v10 = *(void **)(a1 + 24);
  if (v10)
  {
    *(_QWORD *)(a1 + 32) = v10;
    operator delete(v10);
  }
  v11 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = 0;
  if (v11)
    (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  return a1;
}

void sub_1C59635F0(uint64_t a1)
{
  sub_1C5963470(a1);
  JUMPOUT(0x1CAA32FC0);
}

double sub_1C5963614(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  double result;
  int v15;
  unsigned int v16;
  uint64_t v17;
  _QWORD *v18;
  unint64_t v19;
  unint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;

  *(_QWORD *)(a1 + 32) = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 56) = *(_QWORD *)(a1 + 48);
  sub_1C61446F0((unsigned int *)(a1 + 72));
  sub_1C61446F0((unsigned int *)(a1 + 120));
  sub_1C61446F0((unsigned int *)(a1 + 144));
  sub_1C61446F0((unsigned int *)(a1 + 96));
  sub_1C62AE7C0((unsigned int *)(a1 + 168));
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a1 + 192);
  v2 = *(_QWORD *)(a1 + 216);
  *(_QWORD *)(a1 + 216) = 0;
  if (v2)
    MEMORY[0x1CAA32FC0](v2, 0x1070C40257E1745);
  v3 = *(_QWORD *)(a1 + 224);
  *(_QWORD *)(a1 + 224) = 0;
  if (v3)
    MEMORY[0x1CAA32FC0](v3, 0x1070C40257E1745);
  v4 = *(_DWORD *)(a1 + 240);
  if (!v4 && !*(_DWORD *)(a1 + 244))
    goto LABEL_21;
  v5 = (_QWORD *)(a1 + 232);
  v6 = *(unsigned int *)(a1 + 248);
  if (v6 <= 4 * v4 || v6 < 0x41)
  {
    if (!(_DWORD)v6)
    {
LABEL_20:
      *(_QWORD *)(a1 + 240) = 0;
      goto LABEL_21;
    }
    v7 = (_QWORD *)*v5;
    v8 = 32 * v6;
    while (1)
    {
      if (*v7 == -8192)
        goto LABEL_18;
      if (*v7 != -4096)
        break;
LABEL_19:
      v7 += 4;
      v8 -= 32;
      if (!v8)
        goto LABEL_20;
    }
    v9 = (void *)v7[1];
    if (v9)
    {
      v7[2] = v9;
      operator delete(v9);
    }
LABEL_18:
    *v7 = -4096;
    goto LABEL_19;
  }
  sub_1C4DCF4C8((unsigned int *)(a1 + 232));
  if (!v4)
  {
    if (*(_DWORD *)(a1 + 248))
    {
      MEMORY[0x1CAA32FB4](*v5, 8);
      *v5 = 0;
      *(_QWORD *)(a1 + 240) = 0;
      *(_DWORD *)(a1 + 248) = 0;
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  v15 = 1 << (33 - __clz(v4 - 1));
  if (v15 <= 64)
    v16 = 64;
  else
    v16 = v15;
  if (v16 == *(_DWORD *)(a1 + 248))
  {
    *(_QWORD *)(a1 + 240) = 0;
    v17 = 32 * v16;
    v18 = *(_QWORD **)(a1 + 232);
    do
    {
      *v18 = -4096;
      v18 += 4;
      v17 -= 32;
    }
    while (v17);
  }
  else
  {
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 232), 8);
    v19 = (4 * v16 / 3 + 1) | ((unint64_t)(4 * v16 / 3 + 1) >> 1);
    v20 = v19 | (v19 >> 2) | ((v19 | (v19 >> 2)) >> 4);
    LODWORD(v20) = (((v20 | (v20 >> 8)) >> 16) | v20 | (v20 >> 8)) + 1;
    *(_DWORD *)(a1 + 248) = v20;
    v21 = operator new(32 * v20, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 232) = v21;
    *(_QWORD *)(a1 + 240) = 0;
    v22 = *(unsigned int *)(a1 + 248);
    if ((_DWORD)v22)
    {
      v23 = 32 * v22;
      do
      {
        *v21 = -4096;
        v21 += 4;
        v23 -= 32;
      }
      while (v23);
    }
  }
LABEL_21:
  sub_1C62C35B0(a1 + 280);
  sub_1C62C375C((uint64_t *)(a1 + 304));
  v10 = *(unsigned int *)(a1 + 584);
  if ((_DWORD)v10)
  {
    v11 = *(_QWORD *)(a1 + 576);
    v12 = 80 * v10;
    do
    {
      v13 = *(void **)(v11 + v12 - 32);
      if ((void *)(v11 + v12 - 8) != v13)
        free(v13);
      v12 -= 80;
    }
    while (v12);
  }
  *(_DWORD *)(a1 + 584) = 0;
  sub_1C61446F0((unsigned int *)(a1 + 256));
  result = 0.0;
  *(_QWORD *)(a1 + 912) = 0;
  *(_DWORD *)(a1 + 920) = 0;
  return result;
}

void sub_1C5963874(uint64_t a1, uint64_t a2)
{
  llvm::MCContext *v4;
  uint64_t v5;
  int v6;
  uint64_t *v7;
  _QWORD *v8;
  uint64_t **v9;
  uint64_t **v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE v19[24];
  const char *v20;
  _QWORD v21[3];
  __int16 v22;

  v4 = *(llvm::MCContext **)a2;
  v20 = "__indirect_function_table";
  v22 = 259;
  v5 = llvm::MCContext::lookupSymbol(v4, &v20);
  if (v5)
  {
    if ((*(_WORD *)(v5 + 12) & 0x80) != 0)
    {
      v6 = *(_DWORD *)(v5 + 8);
      if ((v6 & 8) == 0)
      {
        *(_DWORD *)(v5 + 8) = v6 | 8;
        v20 = (const char *)v5;
        v7 = *(uint64_t **)(a2 + 64);
        if ((unint64_t)v7 >= *(_QWORD *)(a2 + 72))
        {
          v8 = sub_1C4DFEA3C((void **)(a2 + 56), &v20);
        }
        else
        {
          *v7 = v5;
          v8 = v7 + 1;
        }
        *(_QWORD *)(a2 + 64) = v8;
      }
    }
  }
  v9 = *(uint64_t ***)(a2 + 56);
  v10 = *(uint64_t ***)(a2 + 64);
  if (v9 != v10)
  {
    v11 = a1 + 256;
    do
    {
      v12 = *v9;
      v13 = **v9;
      v14 = v13 & 0xFFFFFFFFFFFFFFF8;
      if ((v13 & 0xFFFFFFFFFFFFFFF8) == 0 && (v12[1] & 0x1C00) == 0x800)
      {
        *((_DWORD *)v12 + 2) |= 4u;
        llvm::MCExpr::findAssociatedFragment((llvm::MCExpr *)v12[3]);
        v13 = *v12 & 7 | v14;
        *v12 = v13;
      }
      if (v14)
      {
        if (*((_BYTE *)v12 + 36))
          v15 = *((_DWORD *)v12 + 8) == 0;
        else
          v15 = 0;
        if (v15 && (v12[1] & 0x1C00) != 0x800)
        {
          v16 = *(_QWORD *)((v13 & 0xFFFFFFFFFFFFFFF8) + 16);
          v20 = (const char *)v16;
          v21[0] = v12;
          sub_1C59644CC(v11, &v20, v21, (uint64_t)v19);
          if (!v19[16])
          {
            v17 = *(_QWORD *)(v16 + 200);
            v18 = *(_QWORD *)(v16 + 208);
            v22 = 1283;
            v20 = "section already has a defining function: ";
            v21[1] = v17;
            v21[2] = v18;
            llvm::report_fatal_error((uint64_t)&v20, 1);
          }
        }
      }
      ++v9;
    }
    while (v9 != v10);
  }
}

void sub_1C59639F8(uint64_t a1, uint64_t a2, llvm::MCAsmLayout *this, llvm::MCFragment *a4, uint64_t a5, _QWORD *a6, _QWORD *a7)
{
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v27;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  const char *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  uint64_t *v36;
  _QWORD *v37;
  int v38;
  int v40;
  int v41;
  BOOL v43;
  unint64_t v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  unint64_t v48;
  unint64_t v49;
  unint64_t v50;
  char *v51;
  char *v52;
  __int128 v53;
  __int128 v54;
  unint64_t v55;
  _QWORD *v56;
  _QWORD *v57;
  uint64_t v58;
  _QWORD *v59;
  uint64_t v60;
  _QWORD *v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  char v67;
  char *v68;
  unint64_t v69;
  char *v70;
  char *v71;
  char *v72;
  uint64_t *v73;
  uint64_t v74;
  uint64_t v75;
  const char *v76;
  uint64_t *v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  _QWORD *v81;
  unint64_t v82;
  unint64_t v83;
  unint64_t v84;
  char *v85;
  _BYTE *v86;
  unint64_t v87;
  unint64_t v88;
  unint64_t v89;
  char *v90;
  char *v91;
  __int128 v92;
  __int128 v93;
  char *v94;
  __int128 v95;
  __int128 v96;
  char *v97;
  llvm::MCContext *v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101[2];
  _QWORD *v102;
  uint64_t v103;
  __int16 v104;
  const char *v105[4];
  __int16 v106;

  v14 = *((_QWORD *)a4 + 2);
  v15 = a6[2];
  llvm::MCAsmLayout::ensureValid(this, a4);
  v99 = *((_QWORD *)a4 + 4) + *(unsigned int *)(a5 + 8);
  v98 = *(llvm::MCContext **)a2;
  v16 = a6[1];
  if (!v16)
  {
    v100 = v15;
    goto LABEL_9;
  }
  v17 = *(_QWORD *)(v16 + 16);
  if ((*(_DWORD *)(v14 + 220) & 0xFE) == 2)
  {
    v58 = *(_QWORD *)(a5 + 16);
    if ((*(_BYTE *)v17 & 4) != 0)
    {
      v73 = *(uint64_t **)(v17 - 8);
      v74 = *v73;
      v59 = v73 + 2;
      v60 = v74;
    }
    else
    {
      v59 = 0;
      v60 = 0;
    }
    v75 = *(_QWORD *)a2;
    v101[0] = (uint64_t)"symbol '";
    v102 = v59;
    v103 = v60;
    v104 = 1283;
    v76 = "' unsupported subtraction expression used in relocation in code section.";
    goto LABEL_104;
  }
  v18 = *(_QWORD *)v17;
  v19 = *(_QWORD *)v17 & 0xFFFFFFFFFFFFFFF8;
  if (!v19 && (*(_DWORD *)(v17 + 8) & 0x1C00) == 0x800)
  {
    *(_DWORD *)(v17 + 8) |= 4u;
    llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v17 + 24));
    v18 = *(_QWORD *)v17 & 7 | v19;
    *(_QWORD *)v17 = v18;
  }
  if (!v19)
  {
    v58 = *(_QWORD *)(a5 + 16);
    if ((v18 & 4) != 0)
    {
      v77 = *(uint64_t **)(v17 - 8);
      v78 = *v77;
      v61 = v77 + 2;
      v62 = v78;
    }
    else
    {
      v61 = 0;
      v62 = 0;
    }
    v75 = (uint64_t)v98;
    v101[0] = (uint64_t)"symbol '";
    v102 = v61;
    v103 = v62;
    v104 = 1283;
    v76 = "' can not be undefined in a subtraction expression";
    goto LABEL_104;
  }
  v20 = v18 & 0xFFFFFFFFFFFFFFF8;
  if ((v18 & 0xFFFFFFFFFFFFFFF8) == 0 && (*(_DWORD *)(v17 + 8) & 0x1C00) == 0x800)
  {
    *(_DWORD *)(v17 + 8) |= 4u;
    llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v17 + 24));
    v18 = *(_QWORD *)v17 & 7 | v20;
    *(_QWORD *)v17 = v18;
  }
  if (*(_QWORD *)(v20 + 16) != v14)
  {
    v58 = *(_QWORD *)(a5 + 16);
    if ((v18 & 4) != 0)
    {
      v79 = *(uint64_t **)(v17 - 8);
      v80 = *v79;
      v63 = v79 + 2;
      v64 = v80;
    }
    else
    {
      v63 = 0;
      v64 = 0;
    }
    v75 = (uint64_t)v98;
    v101[0] = (uint64_t)"symbol '";
    v102 = v63;
    v103 = v64;
    v104 = 1283;
    v76 = "' can not be placed in a different section";
LABEL_104:
    v105[0] = (const char *)v101;
    v105[2] = v76;
    v106 = 770;
    llvm::MCContext::reportError(v75, v58, (uint64_t)v105);
    return;
  }
  v105[0] = 0;
  sub_1C59415F0(this, (uint64_t *)v17, 1, v105);
  v100 = v99 + v15 - (unint64_t)v105[0];
LABEL_9:
  v21 = *a6;
  v22 = *(_QWORD *)(*a6 + 16);
  if (*(_QWORD *)(v14 + 208) >= 0xBuLL)
  {
    v23 = *(uint64_t **)(v14 + 200);
    v24 = *v23;
    v25 = *(uint64_t *)((char *)v23 + 3);
    if (v24 == 0x72615F74696E692ELL && v25 == 0x79617272615F7469)
    {
      *(_BYTE *)(v22 + 44) = 1;
      return;
    }
  }
  if ((*(_DWORD *)(v22 + 8) & 0x1C00) == 0x800)
    *(_DWORD *)(v22 + 8) |= 4u;
  *a7 = 0;
  v27 = (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t, uint64_t, BOOL))(**(_QWORD **)(a1 + 16) + 24))(*(_QWORD *)(a1 + 16), a6, a5, v14, v16 != 0);
  if (v27 <= 0x16 && ((1 << v27) & 0x400300) != 0)
  {
    v29 = *(_QWORD *)v22;
    v30 = *(_QWORD *)v22 & 0xFFFFFFFFFFFFFFF8;
    if (!v30 && (*(_DWORD *)(v22 + 8) & 0x1C00) == 0x800)
    {
      *(_DWORD *)(v22 + 8) |= 4u;
      llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v22 + 24));
      v29 = *(_QWORD *)v22 & 7 | v30;
      *(_QWORD *)v22 = v29;
    }
    if (v30)
    {
      if (*(_BYTE *)(v14 + 220))
      {
        v97 = "relocations for function or section offsets are only supported in metadata sections";
        goto LABEL_148;
      }
      v31 = v29 & 0xFFFFFFFFFFFFFFF8;
      if ((v29 & 0xFFFFFFFFFFFFFFF8) == 0 && (*(_DWORD *)(v22 + 8) & 0x1C00) == 0x800)
      {
        *(_DWORD *)(v22 + 8) |= 4u;
        llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v22 + 24));
        *(_QWORD *)v22 = *(_QWORD *)v22 & 7 | v31;
      }
      v32 = *(const char **)(v31 + 16);
      if ((*((_DWORD *)v32 + 55) & 0xFE) == 2)
      {
        v101[0] = *(_QWORD *)(v31 + 16);
        v105[0] = 0;
        if (!sub_1C596455C((uint64_t *)(a1 + 256), v101, v105)
          || (v32 = v105[0], v105[0] == (const char *)(*(_QWORD *)(a1 + 256) + 16 * *(unsigned int *)(a1 + 272))))
        {
          v97 = "section doesn't have defining symbol";
          goto LABEL_148;
        }
      }
      v33 = *((_QWORD *)v32 + 1);
      if (!v33)
      {
        v97 = "section symbol is required for relocation";
        goto LABEL_148;
      }
      v105[0] = 0;
      sub_1C59415F0(this, (uint64_t *)v22, 1, v105);
      v100 += (unint64_t)v105[0];
      v22 = v33;
    }
  }
  if (v27 <= 0x18)
  {
    if (v27 == 6)
      goto LABEL_44;
    if (((1 << v27) & 0x10C1006) != 0)
    {
      v105[0] = "__indirect_function_table";
      v106 = 259;
      v34 = llvm::MCContext::lookupSymbol(v98, v105);
      if (v34)
      {
        if (*(_BYTE *)(v34 + 36) && *(_DWORD *)(v34 + 32) == 5 && *(_BYTE *)(v34 + 168) && *(_BYTE *)(v34 + 136) == 112)
        {
          *(_WORD *)(v34 + 12) |= 0x80u;
          v35 = *(_DWORD *)(v34 + 8);
          if ((v35 & 8) == 0)
          {
            *(_DWORD *)(v34 + 8) = v35 | 8;
            v105[0] = (const char *)v34;
            v36 = *(uint64_t **)(a2 + 64);
            if ((unint64_t)v36 >= *(_QWORD *)(a2 + 72))
            {
              v37 = sub_1C4DFEA3C((void **)(a2 + 56), v105);
            }
            else
            {
              *v36 = v34;
              v37 = v36 + 1;
            }
            *(_QWORD *)(a2 + 64) = v37;
          }
          goto LABEL_41;
        }
        v97 = "__indirect_function_table symbol has wrong type";
      }
      else
      {
        v97 = "missing indirect function table symbol";
      }
LABEL_148:
      llvm::report_fatal_error((llvm *)v97, (const char *)1);
    }
  }
LABEL_41:
  if ((*(_BYTE *)v22 & 4) == 0 || !**(_QWORD **)(v22 - 8))
  {
    v97 = "relocations against un-named temporaries are not yet supported by wasm";
    goto LABEL_148;
  }
  *(_DWORD *)(v22 + 8) |= 0x200u;
LABEL_44:
  v38 = *(unsigned __int16 *)(v21 + 1);
  if (v38 == 129 || v38 == 2)
    *(_BYTE *)(v22 + 45) = 1;
  v40 = *(unsigned __int8 *)(v14 + 220);
  v41 = v40 & 0xFC;
  v43 = (v40 - 15) < 6 || v41 == 4 || v41 == 8;
  if (v43 || (v40 - 12) <= 2)
  {
    v45 = *(_QWORD **)(a1 + 56);
    v44 = *(_QWORD *)(a1 + 64);
    if ((unint64_t)v45 >= v44)
    {
      v47 = *(_QWORD **)(a1 + 48);
      v48 = 0xCCCCCCCCCCCCCCCDLL * (v45 - v47) + 1;
      if (v48 > 0x666666666666666)
        goto LABEL_141;
      v49 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v44 - (_QWORD)v47) >> 3);
      if (2 * v49 > v48)
        v48 = 2 * v49;
      if (v49 >= 0x333333333333333)
        v50 = 0x666666666666666;
      else
        v50 = v48;
      if (v50)
      {
        if (v50 > 0x666666666666666)
          goto LABEL_145;
        v51 = (char *)operator new(40 * v50);
      }
      else
      {
        v51 = 0;
      }
      v52 = &v51[8 * (v45 - v47)];
      *(_QWORD *)v52 = v99;
      *((_QWORD *)v52 + 1) = v22;
      *((_QWORD *)v52 + 2) = v100;
      *((_DWORD *)v52 + 6) = v27;
      *((_QWORD *)v52 + 4) = v14;
      v46 = v52 + 40;
      if (v45 != v47)
      {
        do
        {
          v53 = *(_OWORD *)(v45 - 5);
          v54 = *(_OWORD *)(v45 - 3);
          *((_QWORD *)v52 - 1) = *(v45 - 1);
          *(_OWORD *)(v52 - 24) = v54;
          *(_OWORD *)(v52 - 40) = v53;
          v52 -= 40;
          v45 -= 5;
        }
        while (v45 != v47);
        v45 = *(_QWORD **)(a1 + 48);
      }
      *(_QWORD *)(a1 + 48) = v52;
      *(_QWORD *)(a1 + 56) = v46;
      *(_QWORD *)(a1 + 64) = &v51[40 * v50];
      if (v45)
        operator delete(v45);
    }
    else
    {
      *v45 = v99;
      v45[1] = v22;
      v45[2] = v100;
      *((_DWORD *)v45 + 6) = v27;
      v46 = v45 + 5;
      v45[4] = v14;
    }
    *(_QWORD *)(a1 + 56) = v46;
    return;
  }
  if ((*(_DWORD *)(v14 + 220) & 0xFE) != 2)
  {
    v101[0] = v14;
    v66 = *(_QWORD *)(a1 + 232);
    v65 = a1 + 232;
    v105[0] = 0;
    v67 = sub_1C4DCDF60(v66, *(_DWORD *)(v65 + 16), v14, v105);
    v68 = (char *)v105[0];
    if ((v67 & 1) != 0)
    {
      v71 = (char *)*((_QWORD *)v105[0] + 2);
      v69 = *((_QWORD *)v105[0] + 3);
      v70 = (char *)(v105[0] + 16);
      if ((unint64_t)v71 < v69)
      {
        *(_QWORD *)v71 = v99;
        *((_QWORD *)v71 + 1) = v22;
        *((_QWORD *)v71 + 2) = v100;
        *((_DWORD *)v71 + 6) = v27;
        v72 = v71 + 40;
        *((_QWORD *)v71 + 4) = v14;
        goto LABEL_131;
      }
      v86 = (_BYTE *)*((_QWORD *)v105[0] + 1);
    }
    else
    {
      v68 = (char *)sub_1C5964760(v65, v101, (_QWORD *)v105[0]);
      v86 = 0;
      v71 = 0;
      v69 = 0;
      *(_QWORD *)v68 = v14;
      *((_QWORD *)v68 + 1) = 0;
      *((_QWORD *)v68 + 3) = 0;
      *((_QWORD *)v68 + 2) = 0;
      v70 = v68 + 16;
    }
    v87 = 0xCCCCCCCCCCCCCCCDLL * ((v71 - v86) >> 3) + 1;
    if (v87 > 0x666666666666666)
      goto LABEL_141;
    v88 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v69 - (_QWORD)v86) >> 3);
    if (2 * v88 > v87)
      v87 = 2 * v88;
    if (v88 >= 0x333333333333333)
      v89 = 0x666666666666666;
    else
      v89 = v87;
    if (v89)
    {
      if (v89 > 0x666666666666666)
        goto LABEL_145;
      v90 = (char *)operator new(40 * v89);
    }
    else
    {
      v90 = 0;
    }
    v91 = &v90[8 * ((v71 - v86) >> 3)];
    *(_QWORD *)v91 = v99;
    *((_QWORD *)v91 + 1) = v22;
    *((_QWORD *)v91 + 2) = v100;
    *((_DWORD *)v91 + 6) = v27;
    *((_QWORD *)v91 + 4) = v14;
    v72 = v91 + 40;
    if (v71 != v86)
    {
      do
      {
        v92 = *(_OWORD *)(v71 - 40);
        v93 = *(_OWORD *)(v71 - 24);
        *((_QWORD *)v91 - 1) = *((_QWORD *)v71 - 1);
        *(_OWORD *)(v91 - 24) = v93;
        *(_OWORD *)(v91 - 40) = v92;
        v91 -= 40;
        v71 -= 40;
      }
      while (v71 != v86);
      v86 = (_BYTE *)*((_QWORD *)v68 + 1);
    }
    *((_QWORD *)v68 + 1) = v91;
    *(_QWORD *)v70 = v72;
    *((_QWORD *)v68 + 3) = &v90[40 * v89];
    if (v86)
      operator delete(v86);
LABEL_131:
    *(_QWORD *)v70 = v72;
    return;
  }
  v56 = *(_QWORD **)(a1 + 32);
  v55 = *(_QWORD *)(a1 + 40);
  if ((unint64_t)v56 >= v55)
  {
    v81 = *(_QWORD **)(a1 + 24);
    v82 = 0xCCCCCCCCCCCCCCCDLL * (v56 - v81) + 1;
    if (v82 <= 0x666666666666666)
    {
      v83 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v55 - (_QWORD)v81) >> 3);
      if (2 * v83 > v82)
        v82 = 2 * v83;
      if (v83 >= 0x333333333333333)
        v84 = 0x666666666666666;
      else
        v84 = v82;
      if (!v84)
      {
        v85 = 0;
        goto LABEL_133;
      }
      if (v84 <= 0x666666666666666)
      {
        v85 = (char *)operator new(40 * v84);
LABEL_133:
        v94 = &v85[8 * (v56 - v81)];
        *(_QWORD *)v94 = v99;
        *((_QWORD *)v94 + 1) = v22;
        *((_QWORD *)v94 + 2) = v100;
        *((_DWORD *)v94 + 6) = v27;
        *((_QWORD *)v94 + 4) = v14;
        v57 = v94 + 40;
        if (v56 != v81)
        {
          do
          {
            v95 = *(_OWORD *)(v56 - 5);
            v96 = *(_OWORD *)(v56 - 3);
            *((_QWORD *)v94 - 1) = *(v56 - 1);
            *(_OWORD *)(v94 - 24) = v96;
            *(_OWORD *)(v94 - 40) = v95;
            v94 -= 40;
            v56 -= 5;
          }
          while (v56 != v81);
          v56 = *(_QWORD **)(a1 + 24);
        }
        *(_QWORD *)(a1 + 24) = v94;
        *(_QWORD *)(a1 + 32) = v57;
        *(_QWORD *)(a1 + 40) = &v85[40 * v84];
        if (v56)
          operator delete(v56);
        goto LABEL_138;
      }
LABEL_145:
      sub_1C4764EE4();
    }
LABEL_141:
    abort();
  }
  *v56 = v99;
  v56[1] = v22;
  v56[2] = v100;
  *((_DWORD *)v56 + 6) = v27;
  v57 = v56 + 5;
  v56[4] = v14;
LABEL_138:
  *(_QWORD *)(a1 + 32) = v57;
}

uint64_t sub_1C5964344(uint64_t a1, llvm::MCAssembler *a2, uint64_t **a3)
{
  uint64_t v6;
  uint64_t v8;
  int v9;
  uint64_t v10;
  int v11;

  v10 = *(_QWORD *)(a1 + 936);
  v11 = 1;
  *(_QWORD *)(a1 + 8) = &v10;
  if (!*(_BYTE *)(a1 + 932))
    return sub_1C5964934(a1, a2, a3, 0);
  v6 = sub_1C5964934(a1, a2, a3, 1);
  v8 = *(_QWORD *)(a1 + 944);
  v9 = 1;
  *(_QWORD *)(a1 + 8) = &v8;
  return sub_1C5964934(a1, a2, a3, 2) + v6;
}

void sub_1C59643FC(uint64_t a1)
{
  int v2;
  int v3;
  int v4;
  unint64_t v5;
  unint64_t v6;

  v2 = *(_DWORD *)(a1 + 8);
  sub_1C62C33D0(a1);
  v3 = 1 << (33 - __clz(v2 - 1));
  if (v3 <= 64)
    v3 = 64;
  if (v2)
    v4 = v3;
  else
    v4 = 0;
  if (v4 != *(_DWORD *)(a1 + 16))
  {
    MEMORY[0x1CAA32FB4](*(_QWORD *)a1, 8);
    if (!v4)
    {
      *(_QWORD *)a1 = 0;
      *(_QWORD *)(a1 + 8) = 0;
      *(_DWORD *)(a1 + 16) = 0;
      return;
    }
    v5 = (4 * v4 / 3u + 1) | ((unint64_t)(4 * v4 / 3u + 1) >> 1);
    v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
    LODWORD(v6) = (((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8)) + 1;
    *(_DWORD *)(a1 + 16) = v6;
    *(_QWORD *)a1 = operator new(72 * v6, (std::align_val_t)8uLL);
  }
  sub_1C62C31F4(a1);
}

uint64_t sub_1C59644CC@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t result;
  _QWORD *v9;
  char v10;
  uint64_t v11;
  _QWORD *v12;

  v12 = 0;
  result = sub_1C596455C((uint64_t *)a1, a2, &v12);
  v9 = v12;
  if ((result & 1) != 0)
  {
    v10 = 0;
  }
  else
  {
    result = (uint64_t)sub_1C59645F8(a1, (uint64_t)a2, a2, v12);
    v9 = (_QWORD *)result;
    *(_QWORD *)result = *a2;
    *(_QWORD *)(result + 8) = *a3;
    v10 = 1;
  }
  v11 = *(_QWORD *)a1 + 16 * *(unsigned int *)(a1 + 16);
  *(_QWORD *)a4 = v9;
  *(_QWORD *)(a4 + 8) = v11;
  *(_BYTE *)(a4 + 16) = v10;
  return result;
}

uint64_t sub_1C596455C(uint64_t *a1, _QWORD *a2, _QWORD *a3)
{
  int v3;
  uint64_t v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = *((_DWORD *)a1 + 4);
  if (v3)
  {
    v4 = *a1;
    v5 = v3 - 1;
    v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v7 = (_QWORD *)(*a1 + 16 * v6);
    v8 = *v7;
    if (*a2 == *v7)
    {
      result = 1;
    }
    else
    {
      v9 = 0;
      v10 = 1;
      result = 1;
      while (v8 != -4096)
      {
        if (v9)
          v12 = 0;
        else
          v12 = v8 == -8192;
        if (v12)
          v9 = v7;
        v13 = v6 + v10++;
        v6 = v13 & v5;
        v7 = (_QWORD *)(v4 + 16 * (v13 & v5));
        v8 = *v7;
        if (*a2 == *v7)
          goto LABEL_10;
      }
      result = 0;
      if (v9)
        v7 = v9;
    }
  }
  else
  {
    v7 = 0;
    result = 0;
  }
LABEL_10:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C59645F8(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
LABEL_3:
    sub_1C59646A8(a1, v7);
    v9 = 0;
    sub_1C596455C((uint64_t *)a1, a3, &v9);
    a4 = v9;
    goto LABEL_4;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
    goto LABEL_3;
LABEL_4:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

_QWORD *sub_1C59646A8(uint64_t a1, int a2)
{
  uint64_t v3;
  _QWORD *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C62C37C8(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

_QWORD *sub_1C5964760(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  unsigned int v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t *v25;

  v24 = a3;
  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(unsigned int *)(a1 + 16);
  if (4 * v5 + 4 >= (3 * v6))
  {
    v7 = 2 * v6;
  }
  else
  {
    v7 = *(_DWORD *)(a1 + 16);
    if ((int)v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
      goto LABEL_3;
  }
  v9 = *(_QWORD *)a1;
  v10 = (v7 - 1) | ((unint64_t)(v7 - 1) >> 1);
  v11 = v10 | (v10 >> 2) | ((v10 | (v10 >> 2)) >> 4);
  v12 = ((v11 | (v11 >> 8)) >> 16) | v11 | (v11 >> 8);
  if ((v12 + 1) > 0x40)
    v13 = v12 + 1;
  else
    v13 = 64;
  *(_DWORD *)(a1 + 16) = v13;
  v14 = operator new(32 * v13, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = v14;
  if (v9)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v15 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v15)
    {
      v16 = 32 * v15;
      do
      {
        *v14 = -4096;
        v14 += 4;
        v16 -= 32;
      }
      while (v16);
    }
    if ((_DWORD)v6)
    {
      v17 = 0;
      v18 = 32 * v6;
      v19 = v9;
      do
      {
        v20 = *(_QWORD *)v19;
        if ((*(_QWORD *)v19 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v25 = 0;
          sub_1C4DCDF60(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v20, &v25);
          v21 = v25;
          *v25 = v20;
          v21[1] = 0;
          v21[2] = 0;
          v21[3] = 0;
          *(_OWORD *)(v21 + 1) = *(_OWORD *)(v19 + 8);
          v21[3] = *(_QWORD *)(v19 + 24);
          ++v17;
          *(_QWORD *)(v19 + 8) = 0;
          *(_QWORD *)(v19 + 16) = 0;
          *(_QWORD *)(v19 + 24) = 0;
          *(_DWORD *)(a1 + 8) = v17;
        }
        v19 += 32;
        v18 -= 32;
      }
      while (v18);
    }
    MEMORY[0x1CAA32FB4](v9, 8);
    v14 = *(_QWORD **)a1;
    LODWORD(v22) = *(_DWORD *)(a1 + 16);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v22 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v22)
    {
      v23 = 0;
      do
      {
        v14[v23] = -4096;
        v23 += 4;
      }
      while (4 * v22 != v23);
    }
  }
  sub_1C4DCDF60((uint64_t)v14, v22, *a2, &v24);
  v5 = *(_DWORD *)(a1 + 8);
  a3 = v24;
LABEL_3:
  *(_DWORD *)(a1 + 8) = v5 + 1;
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

uint64_t sub_1C5964934(uint64_t a1, llvm::MCAssembler *a2, uint64_t **a3, int a4)
{
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  __int128 v12;
  __int128 v13;
  const llvm::MCSymbol **v14;
  const llvm::MCSymbol **v15;
  llvm::MCAssembler *v16;
  const llvm::MCSymbol *v17;
  int v18;
  int v19;
  BOOL v20;
  uint64_t *BaseSymbol;
  BOOL v22;
  int v23;
  uint64_t v24;
  unint64_t v25;
  int v27;
  BOOL v28;
  uint64_t v29;
  const char *v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  uint64_t v35;
  const char *v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  const char *v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t *v47;
  uint64_t v48;
  unint64_t v49;
  char *v50;
  uint64_t v51;
  __int128 v52;
  __int128 v53;
  int v54;
  uint64_t *v55;
  uint64_t v56;
  uint64_t v57;
  const char *v58;
  unint64_t v59;
  char *v60;
  uint64_t v61;
  __int128 v62;
  __int128 v63;
  uint64_t *v64;
  uint64_t v65;
  unint64_t v66;
  char *v67;
  uint64_t v68;
  __int128 v69;
  __int128 v70;
  uint64_t *v71;
  uint64_t v72;
  __int128 v73;
  unint64_t v74;
  char *v75;
  uint64_t v76;
  __int128 v77;
  __int128 v78;
  uint64_t *v79;
  uint64_t *i;
  uint64_t v81;
  _QWORD *v82;
  uint64_t v83;
  const char *v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  unint64_t v88;
  char *v89;
  uint64_t v90;
  __int128 v91;
  __int128 v92;
  int v93;
  uint64_t *v94;
  uint64_t *v95;
  unint64_t v96;
  int v97;
  uint64_t v98;
  unint64_t v99;
  _QWORD *v100;
  int v102;
  int v103;
  BOOL v105;
  unsigned int v106;
  char v107;
  _OWORD *v108;
  unsigned int v109;
  char *v110;
  uint64_t v111;
  char *v112;
  unint64_t v113;
  unint64_t v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  unint64_t v118;
  unint64_t v119;
  size_t v120;
  _BYTE *v121;
  void *v122;
  void *v123;
  void **v124;
  void *v125;
  uint64_t *v126;
  uint64_t *v127;
  unint64_t v128;
  _QWORD *v129;
  _QWORD *v130;
  _QWORD *v131;
  uint64_t v132;
  unint64_t v133;
  unint64_t v134;
  uint64_t v135;
  unint64_t v136;
  char *v137;
  _QWORD *v140;
  uint64_t v141;
  char *v142;
  uint64_t v143;
  _BYTE *v145;
  void *v146;
  void *v147;
  void **v148;
  void *v149;
  uint64_t *v150;
  uint64_t *v151;
  unint64_t v152;
  unint64_t v153;
  unint64_t *v154;
  _QWORD *v155;
  unint64_t *v156;
  uint64_t v157;
  unint64_t v158;
  uint64_t v159;
  char *v160;
  _QWORD *v161;
  unint64_t *v162;
  unint64_t v163;
  unint64_t v164;
  unint64_t v165;
  char *v166;
  unint64_t v167;
  _QWORD *v168;
  char *v169;
  uint64_t v170;
  unint64_t v171;
  uint64_t v172;
  unint64_t v173;
  char *v174;
  char *v175;
  char *v176;
  __int128 v177;
  char *v178;
  char *v179;
  uint64_t v180;
  char *v181;
  char *v182;
  char *v183;
  int v184;
  char *v185;
  uint64_t v186;
  uint64_t v187;
  __int128 v188;
  __int128 v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  int v194;
  llvm::MCAsmLayout *v195;
  llvm::MCAssembler *v196;
  uint64_t *v197;
  uint64_t *v198;
  __int128 *v199;
  void **v200;
  __int16 *v201;
  uint64_t v202;
  int v203;
  int v205;
  BOOL v206;
  BOOL v207;
  int v208;
  unint64_t v209;
  uint64_t v210;
  char v211;
  unint64_t v212;
  void **v213;
  __int128 *v214;
  uint64_t v215;
  int v216;
  int v217;
  BOOL v219;
  int v220;
  void *v221;
  void *v222;
  _QWORD *v223;
  unint64_t v224;
  int v226;
  char v227;
  unint64_t v228;
  int v230;
  int v231;
  uint64_t v232;
  unint64_t v233;
  int v235;
  __int128 v236;
  char *v237;
  void **v238;
  char *v239;
  __int128 v240;
  __int128 v241;
  __int128 v242;
  unint64_t v243;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  char *v248;
  void **v249;
  char *v250;
  __int128 v251;
  __int128 v252;
  __int128 v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  uint64_t v257;
  unint64_t *v258;
  unint64_t v259;
  _BYTE *v260;
  void *v261;
  void *v262;
  void **v263;
  void *v264;
  uint64_t *v265;
  uint64_t *v266;
  unint64_t v267;
  uint64_t *v268;
  _QWORD *v269;
  uint64_t *v270;
  uint64_t v271;
  unint64_t v272;
  uint64_t v273;
  unint64_t v274;
  char *v275;
  uint64_t *v276;
  uint64_t v277;
  char *v278;
  void **v279;
  char *v280;
  __int128 v281;
  unint64_t v282;
  unint64_t v283;
  unint64_t v284;
  int64_t v285;
  int64_t v286;
  int64_t v287;
  const llvm::MCSymbol **v288;
  const llvm::MCSymbol **j;
  const llvm::MCSymbol *v290;
  const llvm::MCSymbol *v291;
  const llvm::MCSymbol *v292;
  int v293;
  BOOL v294;
  BOOL v295;
  unint64_t v296;
  uint64_t v297;
  void *v298;
  char v299;
  unsigned int v300;
  uint64_t v301;
  uint64_t v302;
  _QWORD *v303;
  _DWORD *v304;
  int v305;
  uint64_t *v306;
  uint64_t *k;
  uint64_t v308;
  char v309;
  int v310;
  int v311;
  uint64_t v312;
  unint64_t v313;
  unint64_t v315;
  int v316;
  __int16 v317;
  int v318;
  int v319;
  void *v320;
  void *v321;
  void **v322;
  void *v323;
  int v324;
  uint64_t v325;
  char v326;
  _DWORD *v327;
  unint64_t v328;
  char *v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  _QWORD *v336;
  unint64_t v337;
  uint64_t v338;
  BOOL v340;
  uint64_t v341;
  _QWORD *v342;
  uint64_t v343;
  uint64_t v344;
  int v345;
  uint64_t v346;
  unint64_t v347;
  unint64_t v348;
  unsigned __int8 *v349;
  int v350;
  int v351;
  unsigned int v352;
  unint64_t v353;
  uint64_t v354;
  uint64_t v355;
  _BYTE *v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  int v362;
  int v363;
  BOOL v364;
  uint64_t v365;
  uint64_t v366;
  llvm::raw_ostream *v367;
  int v368;
  int v369;
  int v370;
  const llvm::MCAsmLayout *v371;
  llvm::MCAssembler *v372;
  uint64_t *v373;
  _DWORD *v374;
  _DWORD *v375;
  uint64_t *v376;
  uint64_t *v377;
  uint64_t v378;
  uint64_t v379;
  char *v380;
  unint64_t v381;
  unsigned __int16 *v382;
  unint64_t v383;
  llvm::raw_ostream *v384;
  _BYTE *v385;
  llvm::raw_ostream *v386;
  unint64_t v387;
  char v388;
  char *v389;
  BOOL v390;
  int v391;
  char *v392;
  unint64_t v393;
  llvm::raw_ostream *v394;
  char v395;
  char *v396;
  unint64_t v397;
  llvm::raw_ostream *v398;
  char v399;
  char *v400;
  int v401;
  unint64_t v402;
  llvm::raw_ostream *v403;
  char v404;
  char *v405;
  unint64_t v406;
  llvm::raw_ostream *v407;
  char v408;
  char *v409;
  unint64_t v410;
  llvm::raw_ostream *v411;
  char v412;
  char *v413;
  unint64_t v414;
  llvm::raw_ostream *v415;
  char v416;
  char *v417;
  unint64_t v418;
  llvm::raw_ostream *v419;
  char v420;
  char *v421;
  unint64_t v422;
  llvm::raw_ostream *v423;
  char v424;
  char *v425;
  unsigned int v426;
  uint64_t v427;
  uint64_t v428;
  unint64_t v429;
  llvm::raw_ostream *v430;
  char v431;
  char *v432;
  unint64_t v433;
  llvm::raw_ostream *v434;
  char v435;
  char *v436;
  llvm::raw_ostream *v437;
  unint64_t v438;
  char v439;
  char *v440;
  unsigned __int16 *v441;
  unint64_t v442;
  llvm::raw_ostream *v443;
  char v444;
  char *v445;
  unint64_t v446;
  llvm::raw_ostream *v447;
  char v448;
  char *v449;
  unint64_t v450;
  llvm::raw_ostream *v451;
  char v452;
  char *v453;
  uint64_t *v454;
  llvm::raw_ostream *v455;
  _BYTE *v456;
  unint64_t v457;
  llvm::raw_ostream *v458;
  char v459;
  char *v460;
  unsigned int *v461;
  unsigned int *v462;
  unint64_t v463;
  llvm::raw_ostream *v464;
  char v465;
  char *v466;
  unint64_t v467;
  llvm::raw_ostream *v468;
  char v469;
  char *v470;
  uint64_t *v471;
  uint64_t *v472;
  __n128 v473;
  __n128 v474;
  uint64_t v475;
  uint64_t v476;
  uint64_t *v477;
  int v478;
  const void *v479;
  size_t v480;
  __n128 v481;
  uint64_t v482;
  uint64_t v483;
  _QWORD *v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  unint64_t v489;
  uint64_t v490;
  llvm::raw_ostream *v491;
  unint64_t v492;
  char v493;
  char *v494;
  uint64_t v495;
  llvm::raw_ostream *v496;
  _BYTE *v497;
  unint64_t v498;
  llvm::raw_ostream *v499;
  char v500;
  char *v501;
  uint64_t v502;
  int *v503;
  uint64_t v504;
  int v505;
  llvm::raw_ostream *v506;
  _BYTE *v507;
  unint64_t v508;
  llvm::raw_ostream *v509;
  char v510;
  char *v511;
  uint64_t v512;
  int *v513;
  uint64_t v514;
  int v515;
  llvm::raw_ostream *v516;
  _BYTE *v517;
  unint64_t v518;
  void *v519;
  llvm::raw_ostream *v520;
  unint64_t v521;
  char v522;
  char *v523;
  llvm::raw_ostream *v524;
  char v525;
  char *v526;
  unint64_t v527;
  unsigned int *v528;
  llvm::raw_ostream *v529;
  unint64_t v530;
  char v531;
  char *v532;
  unsigned int *v533;
  unint64_t v534;
  llvm::raw_ostream *v535;
  char v536;
  char *v537;
  unint64_t v538;
  char *v539;
  llvm::raw_ostream *v540;
  unint64_t v541;
  char v542;
  char *v543;
  char *v544;
  unint64_t v545;
  llvm::raw_ostream *v546;
  char v547;
  char *v548;
  unint64_t v549;
  llvm::raw_ostream *v550;
  char v551;
  char *v552;
  unint64_t v553;
  llvm::raw_ostream *v554;
  char v555;
  char *v556;
  unint64_t v557;
  llvm::raw_ostream *v558;
  char v559;
  char *v560;
  unint64_t v561;
  unsigned int *v562;
  llvm::raw_ostream *v563;
  unint64_t v564;
  char v565;
  char *v566;
  unsigned int *v567;
  unint64_t v568;
  llvm::raw_ostream *v569;
  _BYTE *v570;
  llvm::raw_ostream *v571;
  char v572;
  char *v573;
  unint64_t v574;
  unsigned __int8 *v575;
  llvm::raw_ostream *v576;
  unint64_t v577;
  char v578;
  char *v579;
  unsigned __int8 *v580;
  unint64_t v581;
  llvm::raw_ostream *v582;
  char v583;
  char *v584;
  llvm::raw_ostream *v585;
  char v586;
  char *v587;
  llvm::raw_ostream *v588;
  char v589;
  char *v590;
  llvm::raw_ostream *v591;
  _BYTE *v592;
  llvm::raw_ostream *v593;
  size_t v594;
  char v595;
  _BYTE *v596;
  llvm::raw_ostream *v597;
  _BYTE *v598;
  unint64_t v599;
  char *v600;
  llvm::raw_ostream *v601;
  unint64_t v602;
  char v603;
  char *v604;
  char *v605;
  llvm::raw_ostream *v606;
  char v607;
  char *v608;
  unint64_t v609;
  llvm::raw_ostream *v610;
  char v611;
  char *v612;
  llvm::MCContext *v613;
  uint64_t v614;
  unint64_t v615;
  unint64_t v616;
  llvm::raw_ostream *v617;
  char v618;
  char *v619;
  unint64_t v620;
  char *v621;
  llvm::raw_ostream *v622;
  unint64_t v623;
  char v624;
  char *v625;
  char *v626;
  uint64_t v627;
  uint64_t v628;
  unint64_t v629;
  const llvm::MCSection *v630;
  char v631;
  unint64_t v632;
  llvm::raw_ostream *v633;
  char v634;
  char *v635;
  _QWORD *v636;
  unint64_t v637;
  llvm::raw_ostream *v638;
  char v639;
  char *v640;
  unsigned int v641;
  uint64_t *v642;
  uint64_t *v643;
  uint64_t v644;
  int v645;
  unint64_t v646;
  llvm::raw_ostream *v647;
  char v648;
  char *v649;
  llvm::raw_ostream *v650;
  _BYTE *v651;
  llvm::raw_ostream *v652;
  char v653;
  char *v654;
  uint64_t v655;
  llvm::raw_ostream *v656;
  uint64_t v657;
  uint64_t v658;
  char v659;
  int v660;
  char v661;
  char *v662;
  llvm::raw_ostream *v663;
  _BYTE *v664;
  unint64_t v665;
  llvm::raw_ostream *v666;
  char v667;
  char *v668;
  uint64_t v669;
  _QWORD *v670;
  uint64_t v671;
  unsigned int *v672;
  llvm::raw_ostream *v673;
  _BYTE *v674;
  _DWORD *v675;
  unint64_t v676;
  char v677;
  llvm::raw_ostream *v678;
  char *v679;
  llvm::raw_ostream *v680;
  char v681;
  char *v682;
  llvm::raw_ostream *v683;
  _BYTE *v684;
  llvm::raw_ostream *v685;
  _BYTE *v686;
  llvm::raw_ostream *v687;
  _BYTE *v688;
  llvm::raw_ostream *v689;
  _BYTE *v690;
  llvm::raw_ostream *v691;
  _BYTE *v692;
  char v693;
  llvm::raw_ostream *v694;
  _BYTE *v695;
  _BYTE *v696;
  llvm::raw_ostream *v697;
  unint64_t v698;
  char v699;
  char *v700;
  unsigned int *v701;
  unint64_t v702;
  llvm::raw_ostream *v703;
  char v704;
  char *v705;
  uint64_t v706;
  uint64_t v707;
  uint64_t *v708;
  uint64_t v709;
  uint64_t v710;
  char *v711;
  uint64_t v712;
  uint64_t v713;
  const char *v714;
  void **v715;
  unint64_t v716;
  __int16 *v717;
  __int16 *v718;
  unint64_t v719;
  unint64_t v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  __int128 *v724;
  __int128 *v725;
  uint64_t *v726;
  uint64_t v727;
  llvm::MCAssembler *v728;
  int v730;
  int v731;
  uint64_t v732;
  uint64_t v733;
  uint64_t v734;
  unint64_t v735;
  uint64_t v736;
  uint64_t *v737;
  _QWORD *v738;
  unint64_t v739;
  _QWORD v740[4];
  __int16 v741;
  char v742;
  uint64_t v743;
  char v744;
  void *v745[2];
  __int128 v746;
  __int16 v747;
  __int128 v748;
  __int128 v749;
  char v750;
  char v751;
  __int128 v752;
  uint64_t v753;
  void *v754;
  uint64_t v755;
  _BYTE v756[16];
  void *v757;
  uint64_t v758;
  _BYTE v759[480];
  void *v760;
  uint64_t v761;
  _BYTE v762[56];
  void *v763;
  uint64_t v764;
  _BYTE v765[64];
  void *v766;
  uint64_t v767;
  uint64_t v768;
  void *v769;
  uint64_t v770;
  _BYTE v771[96];
  void *v772;
  uint64_t v773;
  _BYTE v774[288];
  void *v775;
  uint64_t v776;
  _BYTE v777[16];
  void *v778;
  uint64_t v779;
  _BYTE v780[64];
  char v781[8];
  uint64_t v782;
  uint64_t v783;
  uint64_t *v784;
  __int16 v785;
  uint64_t v786;
  uint64_t v787;
  void *v788[2];
  uint64_t v789;
  _DWORD *v790;
  uint64_t v791;
  _DWORD v792[6];
  uint64_t v793;

  v793 = *MEMORY[0x1E0C80C00];
  v7 = **(_QWORD ***)(a1 + 8);
  v8 = (*(uint64_t (**)(_QWORD *))(*v7 + 80))(v7);
  v722 = v7[4];
  v723 = v8;
  v721 = v7[2];
  *(_DWORD *)(a1 + 928) = 0;
  *(_QWORD *)(a1 + 200) = *(_QWORD *)(a1 + 192);
  v778 = v780;
  v779 = 0x400000000;
  v775 = v777;
  v776 = 0x400000000;
  v772 = v774;
  v773 = 0x400000000;
  v769 = v771;
  v770 = 0x400000000;
  v766 = &v768;
  v767 = 0x200000000;
  v763 = v765;
  v764 = 0x100000000;
  v760 = v762;
  v761 = 0x100000000;
  v757 = v759;
  v758 = 0x400000000;
  v754 = v756;
  v755 = 0x200000000;
  v738 = 0;
  v739 = 0;
  v728 = a2;
  v737 = (uint64_t *)&v738;
  v730 = a4;
  if (a4 == 2)
    goto LABEL_104;
  v740[0] = "env";
  v740[1] = 3;
  v740[2] = "__linear_memory";
  v740[3] = 15;
  LOBYTE(v741) = 2;
  v742 = 4 * (*(_BYTE *)(*(_QWORD *)(a1 + 16) + 8) & 1);
  v9 = sub_1C4FE3640((uint64_t)&v772, (unint64_t)v740);
  v10 = (char *)v772 + 72 * v773;
  *(_OWORD *)v10 = *(_OWORD *)v9;
  v11 = *(_QWORD *)(v9 + 64);
  v12 = *(_OWORD *)(v9 + 48);
  v13 = *(_OWORD *)(v9 + 16);
  *((_OWORD *)v10 + 2) = *(_OWORD *)(v9 + 32);
  *((_OWORD *)v10 + 3) = v12;
  *((_QWORD *)v10 + 8) = v11;
  *((_OWORD *)v10 + 1) = v13;
  LODWORD(v773) = v773 + 1;
  v14 = (const llvm::MCSymbol **)*((_QWORD *)a2 + 7);
  v15 = (const llvm::MCSymbol **)*((_QWORD *)a2 + 8);
  if (v14 == v15)
    goto LABEL_103;
  v716 = a1 + 304;
  v16 = a2;
  do
  {
    v17 = *v14;
    v18 = *((unsigned __int8 *)*v14 + 36);
    v19 = *((_DWORD *)*v14 + 8);
    if (*((_BYTE *)*v14 + 36))
      v20 = v19 == 0;
    else
      v20 = 0;
    if (v20)
    {
      BaseSymbol = (uint64_t *)llvm::MCAsmLayout::getBaseSymbol(a3, *v14);
      if (!BaseSymbol)
      {
        v709 = sub_1C62B94EC(v17);
        v785 = 261;
        *(_QWORD *)v781 = v709;
        v782 = v710;
        v788[0] = ": absolute addressing not supported!";
        LOWORD(v791) = 259;
        v708 = (uint64_t *)v788;
LABEL_1014:
        sub_1C6131AAC((uint64_t *)v781, v708, (uint64_t)v745);
        goto LABEL_1015;
      }
      sub_1C59693F8(a1, BaseSymbol);
      v18 = *((unsigned __int8 *)v17 + 36);
      v19 = *((_DWORD *)v17 + 8);
    }
    if (v18)
      v22 = v19 == 4;
    else
      v22 = 0;
    if (v22)
    {
      v788[0] = &v789;
      v788[1] = (void *)0x100000000;
      v790 = v792;
      v791 = 0x400000000;
      v792[4] = 0;
      v31 = *((_QWORD *)v17 + 15);
      if (v31)
      {
        sub_1C62249BC((uint64_t)v788, *((_QWORD *)v17 + 15));
        sub_1C62249BC((uint64_t)&v790, v31 + 24);
      }
      v32 = *(unsigned int *)(a1 + 312);
      sub_1C62C32C8((uint64_t)v781, v788);
      v787 = v32;
      sub_1C62C40B0((uint64_t)v745, v781);
      DWORD2(v749) = v787;
      sub_1C62C3954((uint64_t)&v743, a1 + 280, (uint64_t)v745, (_DWORD *)&v749 + 2);
      if (*((__int128 **)&v746 + 1) != &v748)
        free(*((void **)&v746 + 1));
      v16 = v728;
      if (v745[0] != &v746)
        free(v745[0]);
      if (v784 != &v786)
        free(v784);
      if (*(uint64_t **)v781 != &v783)
        free(*(void **)v781);
      if (v744)
        sub_1C59695A0(v716, (char *)v788);
      v33 = *(_DWORD *)(v743 + 64);
      v745[0] = v17;
      *((_DWORD *)sub_1C6144C70(a1 + 72, (uint64_t *)v745) + 2) = v33;
      if (v790 != v792)
        free(v790);
      if (v788[0] != &v789)
        free(v788[0]);
    }
    v23 = *((_DWORD *)v17 + 2);
    if ((v23 & 1) == 0)
    {
      v24 = *(_QWORD *)v17;
      v25 = *(_QWORD *)v17 & 0xFFFFFFFFFFFFFFF8;
      if ((*((_DWORD *)v17 + 2) & 0x1C00) == 0x800 && v25 == 0)
      {
        *((_DWORD *)v17 + 2) = v23 | 4;
        llvm::MCExpr::findAssociatedFragment(*((llvm::MCExpr **)v17 + 3));
        v24 = *(_QWORD *)v17 & 7 | v34;
        *(_QWORD *)v17 = v24;
        if (v34)
          goto LABEL_22;
      }
      else if (v25)
      {
        goto LABEL_22;
      }
      if (*((_BYTE *)v17 + 42))
        goto LABEL_22;
      v27 = *((_DWORD *)v17 + 8);
      if (*((_BYTE *)v17 + 36))
        v28 = v27 == 0;
      else
        v28 = 0;
      if (v28)
      {
        v746 = 0uLL;
        if (*((_BYTE *)v17 + 64))
        {
          v36 = (const char *)*((_QWORD *)v17 + 6);
          v35 = *((_QWORD *)v17 + 7);
        }
        else
        {
          v35 = 3;
          v36 = "env";
        }
        v745[0] = (void *)v36;
        v745[1] = (void *)v35;
        if (*((_BYTE *)v17 + 88))
        {
          v41 = (_QWORD *)*((_QWORD *)v17 + 9);
          v42 = *((_QWORD *)v17 + 10);
        }
        else if ((*(_BYTE *)v17 & 4) != 0)
        {
          v47 = (uint64_t *)*((_QWORD *)v17 - 1);
          v48 = *v47;
          v41 = v47 + 2;
          v42 = v48;
        }
        else
        {
          v41 = 0;
          v42 = 0;
        }
        *(_QWORD *)&v746 = v41;
        *((_QWORD *)&v746 + 1) = v42;
        LOBYTE(v747) = 0;
        *(_QWORD *)v781 = v17;
        LODWORD(v748) = *((_DWORD *)sub_1C6144C70(a1 + 72, (uint64_t *)v781) + 2);
        v49 = sub_1C4FE3640((uint64_t)&v772, (unint64_t)v745);
        v50 = (char *)v772 + 72 * v773;
        *(_OWORD *)v50 = *(_OWORD *)v49;
        v51 = *(_QWORD *)(v49 + 64);
        v52 = *(_OWORD *)(v49 + 48);
        v53 = *(_OWORD *)(v49 + 16);
        *((_OWORD *)v50 + 2) = *(_OWORD *)(v49 + 32);
        *((_OWORD *)v50 + 3) = v52;
        *((_QWORD *)v50 + 8) = v51;
        *((_OWORD *)v50 + 1) = v53;
        LODWORD(v773) = v773 + 1;
        v54 = *(_DWORD *)(a1 + 912);
        *(_DWORD *)(a1 + 912) = v54 + 1;
LABEL_91:
        *(_QWORD *)v781 = v17;
        *((_DWORD *)sub_1C6144C70(a1 + 120, (uint64_t *)v781) + 2) = v54;
        goto LABEL_22;
      }
      if (*((_BYTE *)v17 + 36) && v27 == 2)
      {
        if (*((_BYTE *)v17 + 40))
        {
          v711 = "undefined global symbol cannot be weak";
          goto LABEL_724;
        }
        *(_OWORD *)v745 = 0u;
        v746 = 0u;
        if (*((_BYTE *)v17 + 88))
        {
          v37 = (_QWORD *)*((_QWORD *)v17 + 9);
          v38 = *((_QWORD *)v17 + 10);
        }
        else if ((v24 & 4) != 0)
        {
          v55 = (uint64_t *)*((_QWORD *)v17 - 1);
          v56 = *v55;
          v37 = v55 + 2;
          v38 = v56;
        }
        else
        {
          v37 = 0;
          v38 = 0;
        }
        *(_QWORD *)&v746 = v37;
        *((_QWORD *)&v746 + 1) = v38;
        LOBYTE(v747) = 3;
        if (*((_BYTE *)v17 + 64))
        {
          v58 = (const char *)*((_QWORD *)v17 + 6);
          v57 = *((_QWORD *)v17 + 7);
        }
        else
        {
          v57 = 3;
          v58 = "env";
        }
        v745[0] = (void *)v58;
        v745[1] = (void *)v57;
        LOWORD(v748) = *((_WORD *)v17 + 64);
        v59 = sub_1C4FE3640((uint64_t)&v772, (unint64_t)v745);
        v60 = (char *)v772 + 72 * v773;
        *(_OWORD *)v60 = *(_OWORD *)v59;
        v61 = *(_QWORD *)(v59 + 64);
        v62 = *(_OWORD *)(v59 + 48);
        v63 = *(_OWORD *)(v59 + 16);
        *((_OWORD *)v60 + 2) = *(_OWORD *)(v59 + 32);
        *((_OWORD *)v60 + 3) = v62;
        *((_QWORD *)v60 + 8) = v61;
        *((_OWORD *)v60 + 1) = v63;
        LODWORD(v773) = v773 + 1;
        v54 = *(_DWORD *)(a1 + 916);
        *(_DWORD *)(a1 + 916) = v54 + 1;
        goto LABEL_91;
      }
      if (*((_BYTE *)v17 + 36) && v27 == 4)
      {
        if (*((_BYTE *)v17 + 40))
        {
          v711 = "undefined tag symbol cannot be weak";
          goto LABEL_724;
        }
        v746 = 0uLL;
        if (*((_BYTE *)v17 + 64))
        {
          v40 = (const char *)*((_QWORD *)v17 + 6);
          v39 = *((_QWORD *)v17 + 7);
        }
        else
        {
          v39 = 3;
          v40 = "env";
        }
        v745[0] = (void *)v40;
        v745[1] = (void *)v39;
        if (*((_BYTE *)v17 + 88))
        {
          v43 = (_QWORD *)*((_QWORD *)v17 + 9);
          v44 = *((_QWORD *)v17 + 10);
        }
        else if ((*(_BYTE *)v17 & 4) != 0)
        {
          v64 = (uint64_t *)*((_QWORD *)v17 - 1);
          v65 = *v64;
          v43 = v64 + 2;
          v44 = v65;
        }
        else
        {
          v43 = 0;
          v44 = 0;
        }
        *(_QWORD *)&v746 = v43;
        *((_QWORD *)&v746 + 1) = v44;
        LOBYTE(v747) = 4;
        *(_QWORD *)v781 = v17;
        LODWORD(v748) = *((_DWORD *)sub_1C6144C70(a1 + 72, (uint64_t *)v781) + 2);
        v66 = sub_1C4FE3640((uint64_t)&v772, (unint64_t)v745);
        v67 = (char *)v772 + 72 * v773;
        *(_OWORD *)v67 = *(_OWORD *)v66;
        v68 = *(_QWORD *)(v66 + 64);
        v69 = *(_OWORD *)(v66 + 48);
        v70 = *(_OWORD *)(v66 + 16);
        *((_OWORD *)v67 + 2) = *(_OWORD *)(v66 + 32);
        *((_OWORD *)v67 + 3) = v69;
        *((_QWORD *)v67 + 8) = v68;
        *((_OWORD *)v67 + 1) = v70;
        LODWORD(v773) = v773 + 1;
        v54 = *(_DWORD *)(a1 + 924);
        *(_DWORD *)(a1 + 924) = v54 + 1;
        goto LABEL_91;
      }
      if (*((_BYTE *)v17 + 36) && v27 == 5)
      {
        if (*((_BYTE *)v17 + 40))
        {
          v711 = "undefined table symbol cannot be weak";
          goto LABEL_724;
        }
        v746 = 0uLL;
        if (*((_BYTE *)v17 + 64))
        {
          v30 = (const char *)*((_QWORD *)v17 + 6);
          v29 = *((_QWORD *)v17 + 7);
        }
        else
        {
          v29 = 3;
          v30 = "env";
        }
        v745[0] = (void *)v30;
        v745[1] = (void *)v29;
        if (*((_BYTE *)v17 + 88))
        {
          v45 = (_QWORD *)*((_QWORD *)v17 + 9);
          v46 = *((_QWORD *)v17 + 10);
        }
        else if ((*(_BYTE *)v17 & 4) != 0)
        {
          v71 = (uint64_t *)*((_QWORD *)v17 - 1);
          v72 = *v71;
          v45 = v71 + 2;
          v46 = v72;
        }
        else
        {
          v45 = 0;
          v46 = 0;
        }
        *(_QWORD *)&v746 = v45;
        *((_QWORD *)&v746 + 1) = v46;
        LOBYTE(v747) = 1;
        v73 = *(_OWORD *)((char *)v17 + 152);
        v748 = *(_OWORD *)((char *)v17 + 136);
        v749 = v73;
        v74 = sub_1C4FE3640((uint64_t)&v772, (unint64_t)v745);
        v75 = (char *)v772 + 72 * v773;
        *(_OWORD *)v75 = *(_OWORD *)v74;
        v76 = *(_QWORD *)(v74 + 64);
        v77 = *(_OWORD *)(v74 + 48);
        v78 = *(_OWORD *)(v74 + 16);
        *((_OWORD *)v75 + 2) = *(_OWORD *)(v74 + 32);
        *((_OWORD *)v75 + 3) = v77;
        *((_QWORD *)v75 + 8) = v76;
        *((_OWORD *)v75 + 1) = v78;
        LODWORD(v773) = v773 + 1;
        v54 = *(_DWORD *)(a1 + 920);
        *(_DWORD *)(a1 + 920) = v54 + 1;
        goto LABEL_91;
      }
    }
LABEL_22:
    ++v14;
  }
  while (v14 != v15);
  v79 = (uint64_t *)*((_QWORD *)v16 + 7);
  for (i = (uint64_t *)*((_QWORD *)v16 + 8); v79 != i; ++v79)
  {
    v81 = *v79;
    if (*(_BYTE *)(*v79 + 45))
    {
      v82 = 0;
      v83 = 0;
      v746 = 0uLL;
      v84 = "GOT.mem";
      if (*(_BYTE *)(v81 + 36) != 0 && *(_DWORD *)(v81 + 32) == 0)
        v84 = "GOT.func";
      v85 = 7;
      if (*(_BYTE *)(v81 + 36) != 0 && *(_DWORD *)(v81 + 32) == 0)
        v85 = 8;
      v745[0] = (void *)v84;
      v745[1] = (void *)v85;
      if ((*(_BYTE *)v81 & 4) != 0)
      {
        v86 = *(uint64_t **)(v81 - 8);
        v87 = *v86;
        v82 = v86 + 2;
        v83 = v87;
      }
      *(_QWORD *)&v746 = v82;
      *((_QWORD *)&v746 + 1) = v83;
      LOBYTE(v747) = 3;
      LOWORD(v748) = 383;
      v88 = sub_1C4FE3640((uint64_t)&v772, (unint64_t)v745);
      v89 = (char *)v772 + 72 * v773;
      *(_OWORD *)v89 = *(_OWORD *)v88;
      v90 = *(_QWORD *)(v88 + 64);
      v91 = *(_OWORD *)(v88 + 48);
      v92 = *(_OWORD *)(v88 + 16);
      *((_OWORD *)v89 + 2) = *(_OWORD *)(v88 + 32);
      *((_OWORD *)v89 + 3) = v91;
      *((_QWORD *)v89 + 8) = v90;
      *((_OWORD *)v89 + 1) = v92;
      LODWORD(v773) = v773 + 1;
      v93 = *(_DWORD *)(a1 + 916);
      *(_DWORD *)(a1 + 916) = v93 + 1;
      *(_QWORD *)v781 = v81;
      *((_DWORD *)sub_1C6144C70(a1 + 144, (uint64_t *)v781) + 2) = v93;
    }
  }
LABEL_103:
  a2 = v728;
LABEL_104:
  v94 = (uint64_t *)*((_QWORD *)a2 + 4);
  v95 = (uint64_t *)*((_QWORD *)a2 + 5);
  if (v94 != v95)
  {
    v96 = 0;
    v716 = a1 + 576;
    v97 = v730;
    v726 = v95;
    while (1)
    {
      v98 = *v94;
      v100 = *(_QWORD **)(*v94 + 200);
      v99 = *(_QWORD *)(*v94 + 208);
      if (v97 == 2)
      {
        if (v99 < 4 || *(_DWORD *)((char *)v100 + v99 - 4) != 1870095406)
          goto LABEL_196;
      }
      else if (v97 == 1)
      {
        if (v99 < 4)
          goto LABEL_118;
        if (*(_DWORD *)((char *)v100 + v99 - 4) == 1870095406)
          goto LABEL_196;
      }
      if (v99 >= 0xB && *v100 == 0x72615F74696E692ELL && *(_QWORD *)((char *)v100 + 3) == 0x79617272615F7469)
        goto LABEL_196;
LABEL_118:
      if ((*(_DWORD *)(v98 + 220) & 0xFE) == 2)
        goto LABEL_196;
      v102 = *(_DWORD *)(v98 + 220);
      v103 = *(_DWORD *)(v98 + 220) & 0xFC;
      v105 = (v102 - 15) < 6 || v103 == 4 || v103 == 8;
      if (v105 || (v102 - 12) <= 2)
      {
        v106 = *(_DWORD *)(a1 + 584);
        v107 = *(_BYTE *)(v98 + 24);
        v734 = v106;
        if (v106 >= *(_DWORD *)(a1 + 588))
        {
          v720 = v96;
          v745[0] = 0;
          v181 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(v716, 0, 80, (unint64_t *)v745);
          v110 = v181;
          v182 = &v181[80 * *(unsigned int *)(a1 + 584)];
          *((_OWORD *)v182 + 3) = 0u;
          *((_OWORD *)v182 + 4) = 0u;
          *((_OWORD *)v182 + 1) = 0u;
          *((_OWORD *)v182 + 2) = 0u;
          *(_OWORD *)v182 = 0u;
          *((_QWORD *)v182 + 6) = v182 + 72;
          *(_OWORD *)(v182 + 56) = xmmword_1C6612EF0;
          v183 = *(char **)(a1 + 576);
          v184 = *(_DWORD *)(a1 + 584);
          if (v184)
          {
            v185 = &v183[80 * v184];
            v186 = (uint64_t)(v181 + 48);
            v187 = (uint64_t)(v183 + 48);
            do
            {
              v188 = *(_OWORD *)(v187 - 48);
              v189 = *(_OWORD *)(v187 - 16);
              *(_OWORD *)(v186 - 32) = *(_OWORD *)(v187 - 32);
              *(_OWORD *)(v186 - 16) = v189;
              *(_OWORD *)(v186 - 48) = v188;
              *(_QWORD *)v186 = v186 + 24;
              *(_OWORD *)(v186 + 8) = xmmword_1C6612EF0;
              if (*(_QWORD *)(v187 + 8))
                sub_1C4FE6ED8(v186, v187);
              v190 = v187 - 48;
              v186 += 80;
              v187 += 80;
            }
            while ((char *)(v190 + 80) != v185);
            v183 = *(char **)(a1 + 576);
            v191 = *(unsigned int *)(a1 + 584);
            if ((_DWORD)v191)
            {
              v192 = 80 * v191;
              do
              {
                v193 = *(char **)&v183[v192 - 32];
                if (&v183[v192 - 8] != v193)
                  free(v193);
                v192 -= 80;
              }
              while (v192);
              v183 = *(char **)v716;
            }
          }
          v194 = (int)v745[0];
          if (v183 != (char *)(a1 + 592))
            free(v183);
          *(_QWORD *)(a1 + 576) = v110;
          *(_DWORD *)(a1 + 588) = v194;
          v109 = *(_DWORD *)(a1 + 584) + 1;
          *(_DWORD *)(a1 + 584) = v109;
          v96 = v720;
        }
        else
        {
          v108 = (_OWORD *)(*(_QWORD *)(a1 + 576) + 80 * v106);
          v108[3] = 0u;
          v108[4] = 0u;
          v108[1] = 0u;
          v108[2] = 0u;
          *v108 = 0u;
          *((_QWORD *)v108 + 6) = (char *)v108 + 72;
          *(_OWORD *)((char *)v108 + 56) = xmmword_1C6612EF0;
          v109 = *(_DWORD *)(a1 + 584) + 1;
          *(_DWORD *)(a1 + 584) = v109;
          v110 = *(char **)(a1 + 576);
        }
        v111 = (v96 + (1 << v107) - 1) & -(uint64_t)(1 << v107);
        v112 = &v110[80 * v109];
        *((_QWORD *)v112 - 9) = v100;
        *((_QWORD *)v112 - 8) = v99;
        *((_DWORD *)v112 - 14) = *(unsigned __int8 *)(v98 + 252);
        *((_QWORD *)v112 - 6) = v111;
        *((_QWORD *)v112 - 10) = v98;
        v113 = *((_QWORD *)v112 - 3);
        v114 = (v113 + (1 << *(_BYTE *)(v98 + 24)) - 1) & -(uint64_t)(1 << *(_BYTE *)(v98 + 24));
        v732 = v111;
        if (v113 == v114)
        {
          v114 = *((_QWORD *)v112 - 3);
        }
        else
        {
          if (v113 <= v114)
          {
            if (*((_QWORD *)v112 - 2) < v114)
            {
              llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)(v112 - 32), v112 - 8, v114, 1);
              v113 = *((_QWORD *)v112 - 3);
            }
            if (v114 != v113)
              bzero((void *)(*((_QWORD *)v112 - 4) + v113), v114 - v113);
          }
          *((_QWORD *)v112 - 3) = v114;
        }
        v115 = *(_QWORD *)(v98 + 112);
        if (v115 == v98 + 104)
        {
LABEL_153:
          *((_DWORD *)v112 - 10) = 31 - __clz(1 << *(_BYTE *)(v98 + 24));
          *((_DWORD *)v112 - 9) = *(_DWORD *)(v98 + 256);
          v96 = v114 + v732;
          *(_DWORD *)(v98 + 248) = v734;
          v121 = *(_BYTE **)(v98 + 232);
          if (v121)
          {
            if ((*v121 & 4) != 0)
            {
              v124 = (void **)*((_QWORD *)v121 - 1);
              v125 = *v124;
              v122 = v124 + 2;
              v123 = v125;
            }
            else
            {
              v122 = 0;
              v123 = 0;
            }
            v745[0] = v122;
            v745[1] = v123;
            v126 = sub_1C5968BD4(&v737, v745);
            v127 = v126;
            v129 = (_QWORD *)v126[1];
            v128 = v126[2];
            if ((unint64_t)v129 >= v128)
            {
              v131 = (_QWORD *)*v126;
              v132 = ((uint64_t)v129 - *v126) >> 3;
              v133 = v132 + 1;
              if ((unint64_t)(v132 + 1) >> 61)
                goto LABEL_1021;
              v134 = v96;
              v135 = v128 - (_QWORD)v131;
              if (v135 >> 2 > v133)
                v133 = v135 >> 2;
              if ((unint64_t)v135 >= 0x7FFFFFFFFFFFFFF8)
                v136 = 0x1FFFFFFFFFFFFFFFLL;
              else
                v136 = v133;
              if (v136)
              {
                if (v136 >> 61)
                  goto LABEL_1022;
                v137 = (char *)operator new(8 * v136);
              }
              else
              {
                v137 = 0;
              }
              v142 = &v137[8 * v132];
              *(_QWORD *)v142 = v734 << 32;
              v130 = v142 + 8;
              if (v129 != v131)
              {
                do
                {
                  v143 = *--v129;
                  *((_QWORD *)v142 - 1) = v143;
                  v142 -= 8;
                }
                while (v129 != v131);
                v129 = (_QWORD *)*v127;
              }
              *v127 = (uint64_t)v142;
              v127[1] = (uint64_t)v130;
              v127[2] = (uint64_t)&v137[8 * v136];
              v97 = v730;
              if (v129)
                operator delete(v129);
              v96 = v134;
            }
            else
            {
              *v129 = v734 << 32;
              v130 = v129 + 1;
              v97 = v730;
            }
            v95 = v726;
            v127[1] = (uint64_t)v130;
          }
          else
          {
            v97 = v730;
            v95 = v726;
          }
          goto LABEL_196;
        }
        while (2)
        {
          if (*(_BYTE *)(v115 + 50))
          {
            v711 = "only data supported in data sections";
            goto LABEL_724;
          }
          v116 = *(unsigned __int8 *)(v115 + 48);
          if (v116 != 9)
          {
            if (v116 == 3)
            {
              v745[0] = 0;
              llvm::MCExpr::evaluateAsAbsolute(*(_QWORD *)(v115 + 64), v745);
              sub_1C502E368((uint64_t *)v112 - 4, *((_QWORD *)v112 - 4) + *((_QWORD *)v112 - 3), (unint64_t)v745[0] * *(unsigned __int8 *)(v115 + 51), *(char *)(v115 + 56));
              goto LABEL_151;
            }
            if (!*(_BYTE *)(v115 + 48))
            {
              if (*(_DWORD *)(v115 + 72) != 1)
              {
                v711 = "only byte values supported for alignment";
                goto LABEL_724;
              }
              if ((*(_BYTE *)(v115 + 56) & 1) != 0)
                LODWORD(v117) = 0;
              else
                v117 = *(_QWORD *)(v115 + 64);
              v118 = *((_QWORD *)v112 - 3);
              if (v118 + *(unsigned int *)(v115 + 76) >= (v118 + *(unsigned int *)(v115 + 52) - 1)
                                                        / *(unsigned int *)(v115 + 52)
                                                        * *(unsigned int *)(v115 + 52))
                v119 = (v118 + *(unsigned int *)(v115 + 52) - 1)
                     / *(unsigned int *)(v115 + 52)
                     * *(unsigned int *)(v115 + 52);
              else
                v119 = v118 + *(unsigned int *)(v115 + 76);
              v120 = v119 - v118;
              if (v119 != v118)
              {
                if (v119 >= v118)
                {
                  if (v119 > *((_QWORD *)v112 - 2))
                  {
                    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)(v112 - 32), v112 - 8, v119, 1);
                    v118 = *((_QWORD *)v112 - 3);
                  }
                  memset((void *)(*((_QWORD *)v112 - 4) + v118), v117, v120);
                  *((_QWORD *)v112 - 3) += v120;
                }
                else
                {
                  *((_QWORD *)v112 - 3) = v119;
                }
              }
LABEL_151:
              v115 = *(_QWORD *)(v115 + 8);
              if (v115 == v98 + 104)
              {
                v114 = *((_QWORD *)v112 - 3);
                goto LABEL_153;
              }
              continue;
            }
          }
          break;
        }
        sub_1C59696CC((uint64_t *)v112 - 4, *((_QWORD *)v112 - 4) + *((_QWORD *)v112 - 3), *(char **)(v115 + 64), (char *)(*(_QWORD *)(v115 + 64) + *(_QWORD *)(v115 + 72)));
        goto LABEL_151;
      }
      if (v99 >= 0x10 && *v100 == 0x5F6D6F747375632ELL && v100[1] == 0x2E6E6F6974636573)
      {
        v100 += 2;
        v99 -= 16;
      }
      if (*(_QWORD *)(v98 + 8))
      {
        v180 = (*(_QWORD *)(a1 + 200) - *(_QWORD *)(a1 + 192)) >> 5;
        v745[0] = *(void **)(v98 + 8);
        *((_DWORD *)sub_1C6144C70(a1 + 120, (uint64_t *)v745) + 2) = v180;
        v97 = v730;
      }
      if (v99 != 15)
      {
        if (v99 == 9 && *v100 == 0x72656375646F7270 && *((_BYTE *)v100 + 8) == 115)
        {
          v140 = (_QWORD *)operator new();
          *v140 = v100;
          v140[1] = 9;
          v140[2] = v98;
          v140[3] = 0xFFFFFFFF00000000;
          v141 = *(_QWORD *)(a1 + 216);
          *(_QWORD *)(a1 + 216) = v140;
          if (!v141)
            goto LABEL_196;
LABEL_223:
          MEMORY[0x1CAA32FC0](v141, 0x1070C40257E1745);
          goto LABEL_196;
        }
LABEL_202:
        v145 = *(_BYTE **)(v98 + 232);
        if (v145)
        {
          if ((*v145 & 4) != 0)
          {
            v148 = (void **)*((_QWORD *)v145 - 1);
            v149 = *v148;
            v146 = v148 + 2;
            v147 = v149;
          }
          else
          {
            v146 = 0;
            v147 = 0;
          }
          v745[0] = v146;
          v745[1] = v147;
          v150 = sub_1C5968BD4(&v737, v745);
          v151 = v150;
          v152 = *(_QWORD *)(a1 + 200) - *(_QWORD *)(a1 + 192);
          v154 = (unint64_t *)v150[1];
          v153 = v150[2];
          if ((unint64_t)v154 >= v153)
          {
            v719 = v96;
            v156 = (unint64_t *)*v150;
            v157 = ((uint64_t)v154 - *v150) >> 3;
            v158 = v157 + 1;
            if ((unint64_t)(v157 + 1) >> 61)
              goto LABEL_1021;
            v159 = v153 - (_QWORD)v156;
            if (v159 >> 2 > v158)
              v158 = v159 >> 2;
            if ((unint64_t)v159 >= 0x7FFFFFFFFFFFFFF8)
              v158 = 0x1FFFFFFFFFFFFFFFLL;
            v735 = v158;
            if (v158)
            {
              if (v158 >> 61)
                goto LABEL_1022;
              v160 = (char *)operator new(8 * v158);
            }
            else
            {
              v160 = 0;
            }
            v162 = (unint64_t *)&v160[8 * v157];
            *v162 = ((unint64_t)(v152 >> 5) << 32) | 5;
            v155 = v162 + 1;
            if (v154 == v156)
            {
              v96 = v719;
              v163 = v735;
            }
            else
            {
              v96 = v719;
              v163 = v735;
              do
              {
                v164 = *--v154;
                *--v162 = v164;
              }
              while (v154 != v156);
              v154 = (unint64_t *)*v151;
            }
            *v151 = (uint64_t)v162;
            v151[1] = (uint64_t)v155;
            v151[2] = (uint64_t)&v160[8 * v163];
            if (v154)
              operator delete(v154);
          }
          else
          {
            *v154 = ((unint64_t)(v152 >> 5) << 32) | 5;
            v155 = v154 + 1;
          }
          v151[1] = (uint64_t)v155;
          v95 = v726;
        }
        v166 = *(char **)(a1 + 200);
        v165 = *(_QWORD *)(a1 + 208);
        if ((unint64_t)v166 >= v165)
        {
          v169 = *(char **)(a1 + 192);
          v170 = (v166 - v169) >> 5;
          v171 = v170 + 1;
          if ((unint64_t)(v170 + 1) >> 59)
LABEL_1021:
            abort();
          v167 = v96;
          v172 = v165 - (_QWORD)v169;
          if (v172 >> 4 > v171)
            v171 = v172 >> 4;
          if ((unint64_t)v172 >= 0x7FFFFFFFFFFFFFE0)
            v173 = 0x7FFFFFFFFFFFFFFLL;
          else
            v173 = v171;
          if (v173 >> 59)
LABEL_1022:
            sub_1C4764EE4();
          v174 = (char *)operator new(32 * v173);
          v175 = &v174[32 * v170];
          *(_QWORD *)v175 = v100;
          *((_QWORD *)v175 + 1) = v99;
          *((_QWORD *)v175 + 2) = v98;
          *((_QWORD *)v175 + 3) = 0xFFFFFFFF00000000;
          if (v166 == v169)
          {
            v178 = &v174[32 * v170];
            v95 = v726;
          }
          else
          {
            v176 = &v174[32 * v170];
            v95 = v726;
            do
            {
              v177 = *((_OWORD *)v166 - 1);
              v178 = v176 - 32;
              *((_OWORD *)v176 - 2) = *((_OWORD *)v166 - 2);
              *((_OWORD *)v176 - 1) = v177;
              v166 -= 32;
              v176 -= 32;
            }
            while (v166 != v169);
          }
          v179 = &v174[32 * v173];
          v168 = v175 + 32;
          *(_QWORD *)(a1 + 192) = v178;
          *(_QWORD *)(a1 + 200) = v175 + 32;
          *(_QWORD *)(a1 + 208) = v179;
          if (v169)
            operator delete(v169);
        }
        else
        {
          v167 = v96;
          *(_QWORD *)v166 = v100;
          *((_QWORD *)v166 + 1) = v99;
          *((_QWORD *)v166 + 2) = v98;
          v168 = v166 + 32;
          *((_QWORD *)v166 + 3) = 0xFFFFFFFF00000000;
        }
        v97 = v730;
        *(_QWORD *)(a1 + 200) = v168;
        v96 = v167;
        goto LABEL_196;
      }
      if (*v100 != 0x665F746567726174 || *(_QWORD *)((char *)v100 + 7) != 0x7365727574616566)
        goto LABEL_202;
      v161 = (_QWORD *)operator new();
      *v161 = v100;
      v161[1] = 15;
      v161[2] = v98;
      v161[3] = 0xFFFFFFFF00000000;
      v141 = *(_QWORD *)(a1 + 224);
      *(_QWORD *)(a1 + 224) = v161;
      if (v141)
        goto LABEL_223;
LABEL_196:
      if (++v94 == v95)
        goto LABEL_265;
    }
  }
  v97 = v730;
LABEL_265:
  v195 = (llvm::MCAsmLayout *)a3;
  v196 = v728;
  if (v97 == 2)
    goto LABEL_431;
  v197 = (uint64_t *)*((_QWORD *)v728 + 7);
  v198 = (uint64_t *)*((_QWORD *)v728 + 8);
  if (v197 == v198)
    goto LABEL_431;
  v727 = a1 + 72;
  v199 = &v748;
  v200 = &v745[1];
  v201 = &v747;
  v733 = a1 + 168;
  v736 = a1 + 120;
  while (2)
  {
    v202 = *v197;
    v203 = *(_DWORD *)(*v197 + 8);
    if ((v203 & 1) != 0)
    {
      if ((*(_BYTE *)v202 & 4) != 0 && (*(_DWORD *)(*v197 + 8) & 0x1C00) != 0x800 && **(_QWORD **)(v202 - 8) != 0)
        goto LABEL_276;
    }
    else
    {
      if ((*(_DWORD *)(*v197 + 8) & 0x1C00) == 0x800)
        goto LABEL_386;
LABEL_276:
      if (!*(_BYTE *)(v202 + 42) || *(_QWORD *)v202 >= 8uLL)
      {
        v205 = *(_DWORD *)(v202 + 32);
        if (*(_BYTE *)(v202 + 36))
          v206 = v205 == 0;
        else
          v206 = 0;
        if (!v206)
        {
          if (*(_BYTE *)(v202 + 36))
            v207 = v205 == 1;
          else
            v207 = 1;
          if (!v207)
          {
            switch(v205)
            {
              case 5:
                v233 = *(_QWORD *)v202 & 0xFFFFFFFFFFFFFFF8;
                if ((*(_DWORD *)(*v197 + 8) & 0x1C00) == 0x800 && v233 == 0)
                {
                  *(_DWORD *)(v202 + 8) = v203 | 4;
                  llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v202 + 24));
                  *(_QWORD *)v202 = *(_QWORD *)v202 & 7 | v247;
                  if (!v247)
                    goto LABEL_386;
                }
                else if (!v233)
                {
                  goto LABEL_386;
                }
                *(_QWORD *)v199 = 0;
                *((_QWORD *)v199 + 1) = 0;
                v725 = v199;
                LODWORD(v745[0]) = v761 + *(_DWORD *)(a1 + 920);
                v235 = (int)v745[0];
                v236 = *(_OWORD *)(v202 + 152);
                *(_OWORD *)v200 = *(_OWORD *)(v202 + 136);
                *((_OWORD *)v200 + 1) = v236;
                *(_QWORD *)v781 = v202;
                *((_DWORD *)sub_1C6144C70(v736, (uint64_t *)v781) + 2) = v235;
                v237 = (char *)v760;
                if (v761 >= HIDWORD(v761))
                {
                  v283 = v761 + 1;
                  if (v760 <= v745 && (char *)v760 + 56 * v761 > (char *)v745)
                  {
                    v286 = (char *)v745 - (_BYTE *)v760;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v760, (uint64_t)v762, v283, 56);
                    v237 = (char *)v760;
                    v238 = (void **)((char *)v760 + v286);
                    v195 = (llvm::MCAsmLayout *)a3;
                    v196 = v728;
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v760, (uint64_t)v762, v283, 56);
                    v238 = v745;
                    v237 = (char *)v760;
                    v195 = (llvm::MCAsmLayout *)a3;
                    v196 = v728;
                  }
                }
                else
                {
                  v238 = v745;
                }
                v239 = &v237[56 * v761];
                v240 = *(_OWORD *)v238;
                v241 = *((_OWORD *)v238 + 1);
                v242 = *((_OWORD *)v238 + 2);
                *((_QWORD *)v239 + 6) = v238[6];
                *((_OWORD *)v239 + 1) = v241;
                *((_OWORD *)v239 + 2) = v242;
                *(_OWORD *)v239 = v240;
                LODWORD(v761) = v761 + 1;
                break;
              case 4:
                v228 = *(_QWORD *)v202 & 0xFFFFFFFFFFFFFFF8;
                if ((*(_DWORD *)(*v197 + 8) & 0x1C00) == 0x800 && v228 == 0)
                {
                  *(_DWORD *)(v202 + 8) = v203 | 4;
                  llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v202 + 24));
                  *(_QWORD *)v202 = *(_QWORD *)v202 & 7 | v246;
                  if (!v246)
                    goto LABEL_386;
                }
                else if (!v228)
                {
                  goto LABEL_386;
                }
                v725 = v199;
                v230 = v767 + *(_DWORD *)(a1 + 924);
                v745[0] = (void *)v202;
                v231 = *((_DWORD *)sub_1C6144C70(v727, (uint64_t *)v745) + 2);
                v745[0] = (void *)v202;
                *((_DWORD *)sub_1C6144C70(v736, (uint64_t *)v745) + 2) = v230;
                v232 = v767;
                if (v767 >= (unint64_t)HIDWORD(v767))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v766, (uint64_t)&v768, v767 + 1, 4);
                  v232 = v767;
                }
                v196 = v728;
                *((_DWORD *)v766 + v232) = v231;
                LODWORD(v767) = v767 + 1;
                break;
              case 2:
                v224 = *(_QWORD *)v202 & 0xFFFFFFFFFFFFFFF8;
                if ((*(_DWORD *)(*v197 + 8) & 0x1C00) == 0x800 && v224 == 0)
                {
                  *(_DWORD *)(v202 + 8) = v203 | 4;
                  llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v202 + 24));
                  *(_QWORD *)v202 = *(_QWORD *)v202 & 7 | v245;
                  if (!v245)
                    goto LABEL_386;
                }
                else if (!v224)
                {
                  goto LABEL_386;
                }
                v724 = v199;
                *(_OWORD *)v201 = 0u;
                *((_OWORD *)v201 + 1) = 0u;
                WORD2(v745[0]) = *(_WORD *)(v202 + 128);
                v226 = v764 + *(_DWORD *)(a1 + 916);
                LODWORD(v745[0]) = v226;
                LOBYTE(v745[1]) = 0;
                v227 = 65;
                switch(BYTE4(v745[0]))
                {
                  case '|':
                    v227 = 68;
                    break;
                  case '}':
                    v227 = 67;
                    break;
                  case '~':
                    v227 = 66;
                    break;
                  case '\x7F':
                    break;
                  default:
                    v227 = -48;
                    break;
                }
                LOBYTE(v746) = v227;
                *(_QWORD *)v781 = v202;
                *((_DWORD *)sub_1C6144C70(v736, (uint64_t *)v781) + 2) = v226;
                v248 = (char *)v763;
                if (v764 >= HIDWORD(v764))
                {
                  v284 = v764 + 1;
                  if (v763 <= v745 && (char *)v763 + 64 * (unint64_t)v764 > (char *)v745)
                  {
                    v287 = (char *)v745 - (_BYTE *)v763;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v763, (uint64_t)v765, v284, 64);
                    v248 = (char *)v763;
                    v249 = (void **)((char *)v763 + v287);
                    v195 = (llvm::MCAsmLayout *)a3;
                    v196 = v728;
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v763, (uint64_t)v765, v284, 64);
                    v249 = v745;
                    v248 = (char *)v763;
                    v195 = (llvm::MCAsmLayout *)a3;
                    v196 = v728;
                  }
                  v199 = v724;
                }
                else
                {
                  v249 = v745;
                  v199 = v724;
                }
                v250 = &v248[64 * (unint64_t)v764];
                v251 = *(_OWORD *)v249;
                v252 = *((_OWORD *)v249 + 1);
                v253 = *((_OWORD *)v249 + 3);
                *((_OWORD *)v250 + 2) = *((_OWORD *)v249 + 2);
                *((_OWORD *)v250 + 3) = v253;
                *(_OWORD *)v250 = v251;
                *((_OWORD *)v250 + 1) = v252;
                LODWORD(v764) = v764 + 1;
                goto LABEL_386;
              default:
                goto LABEL_386;
            }
LABEL_385:
            v199 = v725;
            goto LABEL_386;
          }
          sub_1C5968CCC(*v197);
          if (!v208)
            goto LABEL_386;
          v209 = *(_QWORD *)v202 & 0xFFFFFFFFFFFFFFF8;
          if (!v209 && (*(_DWORD *)(v202 + 8) & 0x1C00) == 0x800)
          {
            *(_DWORD *)(v202 + 8) |= 4u;
            llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v202 + 24));
            *(_QWORD *)v202 = *(_QWORD *)v202 & 7 | v209;
          }
          if (!v209)
            goto LABEL_386;
          v210 = *(_QWORD *)(v202 + 176);
          if (v210)
          {
            *(_QWORD *)v781 = 0;
            llvm::MCExpr::evaluateAsAbsolute(v210, v781);
            if ((v211 & 1) == 0)
            {
LABEL_1016:
              v711 = ".size expression must be evaluatable";
              goto LABEL_724;
            }
            v212 = *(_QWORD *)v202 & 0xFFFFFFFFFFFFFFF8;
            if (!v212 && (*(_DWORD *)(v202 + 8) & 0x1C00) == 0x800)
            {
              *(_DWORD *)(v202 + 8) |= 4u;
              llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v202 + 24));
              *(_QWORD *)v202 = *(_QWORD *)v202 & 7 | v212;
            }
            v717 = v201;
            v213 = v200;
            v214 = v199;
            v215 = *(_QWORD *)(v212 + 16);
            v216 = *(unsigned __int8 *)(v215 + 220);
            v217 = v216 & 0xFC;
            v219 = (v216 - 15) < 6 || v217 == 4 || v217 == 8;
            if (!v219 && (v216 - 12) >= 3)
            {
              v712 = sub_1C62B94EC((_BYTE *)v202);
              v747 = 1283;
              v714 = "data symbols must live in a data section: ";
              goto LABEL_1029;
            }
            v220 = *(_DWORD *)(v215 + 248);
            v745[0] = 0;
            sub_1C59415F0(v195, (uint64_t *)v202, 1, v745);
            v221 = v745[0];
            v222 = *(void **)v781;
            v745[0] = (void *)v202;
            v223 = sub_1C62AFA34(v733, (uint64_t *)v745);
            *((_DWORD *)v223 + 2) = v220;
            *((_DWORD *)v223 + 3) = 0;
            v223[2] = v221;
            v223[3] = v222;
            v196 = v728;
            v199 = v214;
            v200 = v213;
            v201 = v717;
            goto LABEL_386;
          }
          v712 = sub_1C62B94EC((_BYTE *)v202);
          v747 = 1283;
          v714 = "data symbols must have a size set with .size: ";
LABEL_1029:
          v745[0] = (void *)v714;
          *(_QWORD *)&v746 = v712;
          *((_QWORD *)&v746 + 1) = v713;
LABEL_1015:
          llvm::report_fatal_error((uint64_t)v745, 1);
        }
        v243 = *(_QWORD *)v202 & 0xFFFFFFFFFFFFFFF8;
        if ((*(_DWORD *)(*v197 + 8) & 0x1C00) == 0x800 && v243 == 0)
        {
          *(_DWORD *)(v202 + 8) = v203 | 4;
          llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v202 + 24));
          *(_QWORD *)v202 = *(_QWORD *)v202 & 7 | v254;
          if (!v254)
            goto LABEL_333;
        }
        else if (!v243)
        {
LABEL_333:
          sub_1C6144BDC(*(_QWORD *)(a1 + 120), *(_DWORD *)(a1 + 136), v202, v745);
          goto LABEL_386;
        }
        if (*(_QWORD *)(v202 + 24))
        {
          v711 = "function sections must contain one function each";
          goto LABEL_724;
        }
        v725 = v199;
        if (!*(_QWORD *)(v202 + 176))
        {
          v711 = "function symbols must have a size set with .size";
          goto LABEL_724;
        }
        v255 = (v779 + *(_DWORD *)(a1 + 912));
        v745[0] = (void *)v202;
        v256 = *((unsigned int *)sub_1C6144C70(v727, (uint64_t *)v745) + 2);
        v745[0] = (void *)v202;
        *((_DWORD *)sub_1C6144C70(v736, (uint64_t *)v745) + 2) = v255;
        v257 = v779;
        if (v779 >= (unint64_t)HIDWORD(v779))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v778, (uint64_t)v780, v779 + 1, 16);
          v257 = v779;
        }
        v258 = (unint64_t *)((char *)v778 + 16 * v257);
        v716 = v716 & 0xFFFFFFFF00000000 | v256;
        *v258 = v716;
        v258[1] = v202;
        LODWORD(v779) = v779 + 1;
        v259 = *(_QWORD *)v202 & 0xFFFFFFFFFFFFFFF8;
        v196 = v728;
        if (!v259 && (*(_DWORD *)(v202 + 8) & 0x1C00) == 0x800)
        {
          *(_DWORD *)(v202 + 8) |= 4u;
          llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v202 + 24));
          *(_QWORD *)v202 = *(_QWORD *)v202 & 7 | v259;
        }
        v260 = *(_BYTE **)(*(_QWORD *)(v259 + 16) + 232);
        if (v260)
        {
          v718 = v201;
          if ((*v260 & 4) != 0)
          {
            v263 = (void **)*((_QWORD *)v260 - 1);
            v264 = *v263;
            v261 = v263 + 2;
            v262 = v264;
          }
          else
          {
            v261 = 0;
            v262 = 0;
          }
          v715 = v200;
          v745[0] = v261;
          v745[1] = v262;
          v265 = sub_1C5968BD4(&v737, v745);
          v266 = v265;
          v268 = (uint64_t *)v265[1];
          v267 = v265[2];
          if ((unint64_t)v268 >= v267)
          {
            v270 = (uint64_t *)*v265;
            v271 = ((uint64_t)v268 - *v265) >> 3;
            v272 = v271 + 1;
            if ((unint64_t)(v271 + 1) >> 61)
              goto LABEL_1021;
            v273 = v267 - (_QWORD)v270;
            if (v273 >> 2 > v272)
              v272 = v273 >> 2;
            if ((unint64_t)v273 >= 0x7FFFFFFFFFFFFFF8)
              v274 = 0x1FFFFFFFFFFFFFFFLL;
            else
              v274 = v272;
            if (v274)
            {
              if (v274 >> 61)
                goto LABEL_1022;
              v275 = (char *)operator new(8 * v274);
            }
            else
            {
              v275 = 0;
            }
            v276 = (uint64_t *)&v275[8 * v271];
            *v276 = (v255 << 32) | 1;
            v269 = v276 + 1;
            if (v268 != v270)
            {
              do
              {
                v277 = *--v268;
                *--v276 = v277;
              }
              while (v268 != v270);
              v268 = (uint64_t *)*v266;
            }
            *v266 = (uint64_t)v276;
            v266[1] = (uint64_t)v269;
            v266[2] = (uint64_t)&v275[8 * v274];
            if (v268)
              operator delete(v268);
            v195 = (llvm::MCAsmLayout *)a3;
            v196 = v728;
          }
          else
          {
            *v268 = (v255 << 32) | 1;
            v269 = v268 + 1;
            v195 = (llvm::MCAsmLayout *)a3;
          }
          v266[1] = (uint64_t)v269;
          v200 = v715;
          v201 = v718;
        }
        if (*(_BYTE *)(v202 + 112))
        {
          *(_OWORD *)v745 = *(_OWORD *)(v202 + 96);
          LOBYTE(v746) = 0;
          DWORD1(v746) = v255;
          v278 = (char *)v769;
          if (v770 >= HIDWORD(v770))
          {
            v282 = v770 + 1;
            if (v769 <= v745 && (char *)v769 + 24 * v770 > (char *)v745)
            {
              v285 = (char *)v745 - (_BYTE *)v769;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v769, (uint64_t)v771, v282, 24);
              v278 = (char *)v769;
              v279 = (void **)((char *)v769 + v285);
              v195 = (llvm::MCAsmLayout *)a3;
              v196 = v728;
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v769, (uint64_t)v771, v282, 24);
              v279 = v745;
              v278 = (char *)v769;
              v195 = (llvm::MCAsmLayout *)a3;
              v196 = v728;
            }
            v199 = v725;
          }
          else
          {
            v279 = v745;
            v199 = v725;
          }
          v280 = &v278[24 * v770];
          v281 = *(_OWORD *)v279;
          *((_QWORD *)v280 + 2) = v279[2];
          *(_OWORD *)v280 = v281;
          LODWORD(v770) = v770 + 1;
          goto LABEL_386;
        }
        goto LABEL_385;
      }
    }
LABEL_386:
    if (++v197 != v198)
      continue;
    break;
  }
  v288 = (const llvm::MCSymbol **)*((_QWORD *)v196 + 7);
  for (j = (const llvm::MCSymbol **)*((_QWORD *)v196 + 8); v288 != j; ++v288)
  {
    v290 = *v288;
    if ((*((_DWORD *)*v288 + 2) & 0x1C00) == 0x800)
    {
      v291 = llvm::MCAsmLayout::getBaseSymbol((uint64_t **)v195, *v288);
      if (!v291)
      {
        v706 = sub_1C62B94EC(v290);
        v785 = 261;
        *(_QWORD *)v781 = v706;
        v782 = v707;
        v740[0] = ": absolute addressing not supported!";
        v741 = 259;
        v708 = v740;
        goto LABEL_1014;
      }
      v292 = v291;
      v293 = *((_DWORD *)v291 + 8);
      if (*((_BYTE *)v291 + 36))
        v294 = v293 == 0;
      else
        v294 = 0;
      if (v294)
      {
        v745[0] = 0;
        if ((sub_1C6144BDC(*(_QWORD *)(a1 + 120), *(_DWORD *)(a1 + 136), (uint64_t)v291, v745) & 1) != 0)
          v304 = v745[0];
        else
          v304 = (_DWORD *)(*(_QWORD *)(a1 + 120) + 16 * *(unsigned int *)(a1 + 136));
        v305 = v304[2];
        v745[0] = v290;
        *((_DWORD *)sub_1C6144C70(v736, (uint64_t *)v745) + 2) = v305;
      }
      else
      {
        if (*((_BYTE *)v291 + 36))
          v295 = v293 == 1;
        else
          v295 = 1;
        if (!v295)
        {
          v711 = "don't yet support global/tag aliases";
          goto LABEL_724;
        }
        v296 = *(_QWORD *)v290 & 0xFFFFFFFFFFFFFFF8;
        if (!v296 && (*((_DWORD *)v290 + 2) & 0x1C00) == 0x800)
        {
          *((_DWORD *)v290 + 2) |= 4u;
          llvm::MCExpr::findAssociatedFragment(*((llvm::MCExpr **)v290 + 3));
          *(_QWORD *)v290 = *(_QWORD *)v290 & 7 | v296;
        }
        v297 = *(_QWORD *)(v296 + 16);
        v745[0] = 0;
        sub_1C59415F0(v195, (uint64_t *)v290, 1, v745);
        v298 = v745[0];
        *(_QWORD *)v781 = 0;
        llvm::MCExpr::evaluateAsAbsolute(*((_QWORD *)v292 + 22), v781);
        if ((v299 & 1) == 0)
          goto LABEL_1016;
        v300 = *(_DWORD *)(v297 + 248);
        if (*(_QWORD *)(*(_QWORD *)(a1 + 576) + 80 * v300 + 56) - (_QWORD)v298 >= *(_QWORD *)v781)
          LODWORD(v301) = *(_DWORD *)v781;
        else
          v301 = *(_QWORD *)(*(_QWORD *)(a1 + 576) + 80 * v300 + 56) - (_QWORD)v298;
        v745[0] = 0;
        sub_1C59415F0(v195, (uint64_t *)v290, 1, v745);
        v302 = LODWORD(v745[0]);
        v745[0] = v290;
        v303 = sub_1C62AFA34(v733, (uint64_t *)v745);
        *((_DWORD *)v303 + 2) = v300;
        *((_DWORD *)v303 + 3) = 0;
        v303[2] = v302;
        v303[3] = v301;
      }
      v196 = v728;
    }
  }
LABEL_431:
  v306 = (uint64_t *)*((_QWORD *)v196 + 7);
  for (k = (uint64_t *)*((_QWORD *)v196 + 8); v306 != k; ++v306)
  {
    v308 = *v306;
    sub_1C5968CCC(*v306);
    if ((v309 & 1) != 0)
    {
      if (*(_BYTE *)(v308 + 41))
        v310 = *(unsigned __int8 *)(v308 + 40) | 4;
      else
        v310 = *(unsigned __int8 *)(v308 + 40);
      v311 = *(_DWORD *)(v308 + 8);
      v312 = *(_QWORD *)v308;
      if ((v311 & 0x10) == 0)
      {
        v313 = v312 & 0xFFFFFFFFFFFFFFF8;
        if ((*(_DWORD *)(v308 + 8) & 0x1C00) == 0x800 && v313 == 0)
        {
          *(_DWORD *)(v308 + 8) = v311 | 4;
          llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v308 + 24));
          v312 = *(_QWORD *)v308 & 7 | v313;
          *(_QWORD *)v308 = v312;
        }
        if (v313)
          v310 |= 2u;
      }
      v315 = v312 & 0xFFFFFFFFFFFFFFF8;
      if ((v312 & 0xFFFFFFFFFFFFFFF8) == 0 && (*(_DWORD *)(v308 + 8) & 0x1C00) == 0x800)
      {
        *(_DWORD *)(v308 + 8) |= 4u;
        llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v308 + 24));
        v312 = *(_QWORD *)v308 & 7 | v315;
        *(_QWORD *)v308 = v312;
      }
      if (v315)
        v316 = v310;
      else
        v316 = v310 | 0x10;
      v317 = *(_WORD *)(v308 + 12);
      if ((v317 & 0x80) != 0)
      {
        if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + 8) & 2) != 0)
          v318 = 160;
        else
          v318 = 128;
        v316 |= v318;
      }
      if (*(_BYTE *)(v308 + 88))
        v316 |= 0x40u;
      v319 = *(unsigned __int8 *)(v308 + 112);
      BYTE8(v746) = 0;
      if (v319)
        v316 |= 0x20u;
      LOBYTE(v748) = 0;
      BYTE8(v748) = 0;
      BYTE8(v749) = 0;
      v750 = 0;
      v751 = 0;
      if ((v312 & 4) != 0)
      {
        v322 = *(void ***)(v308 - 8);
        v323 = *v322;
        v320 = v322 + 2;
        v321 = v323;
      }
      else
      {
        v320 = 0;
        v321 = 0;
      }
      v324 = v316 | v317 & 0x100;
      v745[0] = v320;
      v745[1] = v321;
      v325 = *(_QWORD *)(v308 + 32);
      if ((v325 & 0xFF00000000) != 0)
        v326 = *(_QWORD *)(v308 + 32);
      else
        v326 = 1;
      LOBYTE(v746) = v326;
      DWORD1(v746) = v324;
      if ((v325 & 0xFF00000000) == 0 || v325 == 1)
      {
        v328 = v312 & 0xFFFFFFFFFFFFFFF8;
        if ((v312 & 0xFFFFFFFFFFFFFFF8) == 0 && (*(_DWORD *)(v308 + 8) & 0x1C00) == 0x800)
        {
          *(_DWORD *)(v308 + 8) |= 4u;
          llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v308 + 24));
          *(_QWORD *)v308 = *(_QWORD *)v308 & 7 | v328;
        }
        if (v328)
        {
          *(_QWORD *)v781 = 0;
          if ((sub_1C614ECAC(*(_QWORD *)(a1 + 168), *(_DWORD *)(a1 + 184), v308, v781) & 1) != 0)
            v329 = *(char **)v781;
          else
            v329 = (char *)(*(_QWORD *)(a1 + 168) + 32 * *(unsigned int *)(a1 + 184));
          v752 = *(_OWORD *)(v329 + 8);
          v753 = *((_QWORD *)v329 + 3);
        }
      }
      else
      {
        *(_QWORD *)v781 = 0;
        if ((sub_1C6144BDC(*(_QWORD *)(a1 + 120), *(_DWORD *)(a1 + 136), v308, v781) & 1) != 0)
          v327 = *(_DWORD **)v781;
        else
          v327 = (_DWORD *)(*(_QWORD *)(a1 + 120) + 16 * *(unsigned int *)(a1 + 136));
        LODWORD(v752) = v327[2];
      }
      *(_DWORD *)(v308 + 16) = v758;
      sub_1C62C3874((unint64_t)&v757, (__int128 *)v745);
    }
    else
    {
      *(_DWORD *)(v308 + 16) = -1;
    }
  }
  v745[0] = v195;
  v745[1] = (void *)a1;
  *(_QWORD *)&v746 = &v775;
  v330 = *(_QWORD *)(a1 + 24);
  v331 = *(_QWORD *)(a1 + 32);
  while (v330 != v331)
  {
    sub_1C5968D78((uint64_t)v745, *(const llvm::MCSymbol **)(v330 + 8), *(_DWORD *)(v330 + 24));
    v330 += 40;
  }
  v332 = *(_QWORD *)(a1 + 48);
  v333 = *(_QWORD *)(a1 + 56);
  while (v332 != v333)
  {
    sub_1C5968D78((uint64_t)v745, *(const llvm::MCSymbol **)(v332 + 8), *(_DWORD *)(v332 + 24));
    v332 += 40;
  }
  v334 = *((_QWORD *)v728 + 4);
  v335 = *((_QWORD *)v728 + 5);
  if (v334 != v335)
  {
    while (1)
    {
      v336 = *(_QWORD **)v334;
      v337 = *(_QWORD *)(*(_QWORD *)v334 + 208);
      if (v337 >= 0xB)
      {
        v338 = v336[25];
        if (*(_QWORD *)v338 == 0x72615F696E69662ELL && *(_QWORD *)(v338 + 3) == 0x79617272615F696ELL)
        {
          v711 = ".fini_array sections are unsupported";
          goto LABEL_724;
        }
        v340 = *(_QWORD *)v338 == 0x72615F74696E692ELL && *(_QWORD *)(v338 + 3) == 0x79617272615F7469;
        if (v340 && (_QWORD *)v336[13] != v336 + 13)
        {
          v341 = 4;
          v342 = v336 + 13;
          do
          {
            v342 = (_QWORD *)v342[1];
            --v341;
          }
          while (v342 != v336 + 13);
          if (v341)
          {
            v711 = "only one .init_array section fragment supported";
            goto LABEL_724;
          }
          v343 = v336[14];
          if (*(_BYTE *)(v343 + 48) != 1 || (v344 = *(_QWORD *)(v343 + 8), *(_BYTE *)(v344 + 48)))
          {
            v711 = ".init_array section should be aligned";
            goto LABEL_724;
          }
          if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + 8) & 1) != 0)
            v345 = 8;
          else
            v345 = 4;
          if (*(_DWORD *)(v344 + 52) != v345)
          {
            v711 = ".init_array section should be aligned for pointers";
            goto LABEL_724;
          }
          v346 = *(_QWORD *)(v344 + 8);
          if (*(_BYTE *)(v346 + 50) || *(_BYTE *)(v346 + 48) != 1)
          {
            v711 = "only data supported in .init_array section";
            goto LABEL_724;
          }
          if (v337 < 0xC)
          {
            v354 = 0xFFFFLL;
          }
          else
          {
            if (*(_BYTE *)(v338 + 11) != 46)
            {
              v711 = ".init_array section priority should start with '.'";
              goto LABEL_724;
            }
            v347 = v337 - 12;
            if (!v347)
              goto LABEL_723;
            v348 = 0;
            v349 = (unsigned __int8 *)(v338 + 12);
            do
            {
              v350 = *v349;
              if ((v350 - 48) >= 0xA)
              {
                if ((v350 - 97) >= 0x1A)
                {
                  if ((v350 - 65) > 0x19)
                    goto LABEL_723;
                  v351 = -55;
                }
                else
                {
                  v351 = -87;
                }
              }
              else
              {
                v351 = -48;
              }
              v352 = v351 + v350;
              if (v352 > 9)
                goto LABEL_723;
              v353 = 10 * v348 + v352;
              if (v348 > v353 / 0xA)
                goto LABEL_723;
              ++v349;
              v348 = v353;
              --v347;
            }
            while (v347);
            v354 = v353 >= 0xFFFF ? 0xFFFFLL : v353;
            if (v353 >= 0x10000)
            {
LABEL_723:
              v711 = "invalid .init_array section priority";
              goto LABEL_724;
            }
          }
          v355 = *(_QWORD *)(v346 + 72);
          if (v355)
          {
            v356 = *(_BYTE **)(v346 + 64);
            do
            {
              if (*v356)
              {
                v711 = "non-symbolic data in .init_array section";
                goto LABEL_724;
              }
              ++v356;
              --v355;
            }
            while (v355);
          }
          v357 = *(unsigned int *)(v346 + 128);
          if ((_DWORD)v357)
            break;
        }
      }
LABEL_499:
      v334 += 8;
      if (v334 == v335)
        goto LABEL_549;
    }
    v358 = *(_QWORD *)(v346 + 120);
    v359 = 24 * v357;
    while (**(_BYTE **)v358 == 2)
    {
      v360 = *(_QWORD *)(*(_QWORD *)v358 + 16);
      v361 = *(unsigned int *)(v360 + 16);
      if ((_DWORD)v361 == -1)
      {
        v711 = "symbols in .init_array should exist in symtab";
        goto LABEL_724;
      }
      v362 = *(unsigned __int8 *)(v360 + 36);
      v363 = *(_DWORD *)(v360 + 32);
      if (v362)
        v364 = v363 == 0;
      else
        v364 = 0;
      if (!v364)
      {
        v711 = "symbols in .init_array should be for functions";
        goto LABEL_724;
      }
      v365 = v755;
      if (v755 >= (unint64_t)HIDWORD(v755))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v754, (uint64_t)v756, v755 + 1, 8);
        v365 = v755;
      }
      *((_QWORD *)v754 + v365) = v354 | (v361 << 32);
      LODWORD(v755) = v755 + 1;
      v358 += 24;
      v359 -= 24;
      if (!v359)
        goto LABEL_499;
    }
    v711 = "fixups in .init_array should be symbol references";
LABEL_724:
    llvm::report_fatal_error((llvm *)v711, (const char *)1);
  }
LABEL_549:
  llvm::raw_ostream::write(**(llvm::raw_ostream ***)(a1 + 8), byte_1C8663AF0, 4uLL);
  v366 = *(_QWORD *)(a1 + 8);
  v367 = *(llvm::raw_ostream **)v366;
  if ((*(_DWORD *)(v366 + 8) - 1) < 2)
    v368 = 1;
  else
    v368 = 0x1000000;
  LODWORD(v745[0]) = v368;
  llvm::raw_ostream::write(v367, (const char *)v745, 4uLL);
  if (v730 == 2)
  {
    v369 = 0;
    v370 = 0;
    v371 = (const llvm::MCAsmLayout *)a3;
    v372 = v728;
    goto LABEL_554;
  }
  v489 = *(unsigned int *)(a1 + 312);
  v371 = (const llvm::MCAsmLayout *)a3;
  if ((_DWORD)v489)
  {
    v490 = *(_QWORD *)(a1 + 304);
    sub_1C596985C(a1, (uint64_t)v745, 1);
    v491 = **(llvm::raw_ostream ***)(a1 + 8);
    v492 = v489;
    do
    {
      v493 = v492 & 0x7F | ((v492 > 0x7F) << 7);
      v494 = (char *)*((_QWORD *)v491 + 4);
      if ((unint64_t)v494 >= *((_QWORD *)v491 + 3))
      {
        v491 = llvm::raw_ostream::write(v491, v493);
      }
      else
      {
        *((_QWORD *)v491 + 4) = v494 + 1;
        *v494 = v493;
      }
      v390 = v492 > 0x7F;
      v492 >>= 7;
    }
    while (v390);
    v495 = v490 + (v489 << 6);
    do
    {
      v496 = **(llvm::raw_ostream ***)(a1 + 8);
      v497 = (_BYTE *)*((_QWORD *)v496 + 4);
      if ((unint64_t)v497 >= *((_QWORD *)v496 + 3))
      {
        llvm::raw_ostream::write(v496, 96);
      }
      else
      {
        *((_QWORD *)v496 + 4) = v497 + 1;
        *v497 = 96;
      }
      v498 = *(unsigned int *)(v490 + 32);
      v499 = **(llvm::raw_ostream ***)(a1 + 8);
      do
      {
        v500 = v498 & 0x7F | ((v498 > 0x7F) << 7);
        v501 = (char *)*((_QWORD *)v499 + 4);
        if ((unint64_t)v501 >= *((_QWORD *)v499 + 3))
        {
          v499 = llvm::raw_ostream::write(v499, v500);
        }
        else
        {
          *((_QWORD *)v499 + 4) = v501 + 1;
          *v501 = v500;
        }
        v390 = v498 > 0x7F;
        v498 >>= 7;
      }
      while (v390);
      v502 = *(unsigned int *)(v490 + 32);
      if ((_DWORD)v502)
      {
        v503 = *(int **)(v490 + 24);
        v504 = 4 * v502;
        do
        {
          v505 = *v503;
          v506 = **(llvm::raw_ostream ***)(a1 + 8);
          v507 = (_BYTE *)*((_QWORD *)v506 + 4);
          if ((unint64_t)v507 >= *((_QWORD *)v506 + 3))
          {
            llvm::raw_ostream::write(v506, *v503);
          }
          else
          {
            *((_QWORD *)v506 + 4) = v507 + 1;
            *v507 = v505;
          }
          ++v503;
          v504 -= 4;
        }
        while (v504);
      }
      v508 = *(unsigned int *)(v490 + 8);
      v509 = **(llvm::raw_ostream ***)(a1 + 8);
      do
      {
        v510 = v508 & 0x7F | ((v508 > 0x7F) << 7);
        v511 = (char *)*((_QWORD *)v509 + 4);
        if ((unint64_t)v511 >= *((_QWORD *)v509 + 3))
        {
          v509 = llvm::raw_ostream::write(v509, v510);
        }
        else
        {
          *((_QWORD *)v509 + 4) = v511 + 1;
          *v511 = v510;
        }
        v390 = v508 > 0x7F;
        v508 >>= 7;
      }
      while (v390);
      v512 = *(unsigned int *)(v490 + 8);
      if ((_DWORD)v512)
      {
        v513 = *(int **)v490;
        v514 = 4 * v512;
        do
        {
          v515 = *v513;
          v516 = **(llvm::raw_ostream ***)(a1 + 8);
          v517 = (_BYTE *)*((_QWORD *)v516 + 4);
          if ((unint64_t)v517 >= *((_QWORD *)v516 + 3))
          {
            llvm::raw_ostream::write(v516, *v513);
          }
          else
          {
            *((_QWORD *)v516 + 4) = v517 + 1;
            *v517 = v515;
          }
          ++v513;
          v514 -= 4;
        }
        while (v514);
      }
      v490 += 64;
    }
    while (v490 != v495);
    sub_1C59699CC(a1, (uint64_t *)v745);
  }
  v518 = v773;
  if ((_DWORD)v773)
  {
    v519 = v772;
    sub_1C596985C(a1, (uint64_t)v745, 2);
    v520 = **(llvm::raw_ostream ***)(a1 + 8);
    v521 = v518;
    do
    {
      v522 = v521 & 0x7F | ((v521 > 0x7F) << 7);
      v523 = (char *)*((_QWORD *)v520 + 4);
      if ((unint64_t)v523 >= *((_QWORD *)v520 + 3))
      {
        v520 = llvm::raw_ostream::write(v520, v522);
      }
      else
      {
        *((_QWORD *)v520 + 4) = v523 + 1;
        *v523 = v522;
      }
      v390 = v521 > 0x7F;
      v521 >>= 7;
    }
    while (v390);
    sub_1C5969B3C(a1, *(char **)v519, *((_QWORD *)v519 + 1));
    sub_1C5969B3C(a1, *((char **)v519 + 2), *((_QWORD *)v519 + 3));
    v524 = **(llvm::raw_ostream ***)(a1 + 8);
    v525 = *((_BYTE *)v519 + 32);
    v526 = (char *)*((_QWORD *)v524 + 4);
    if ((unint64_t)v526 >= *((_QWORD *)v524 + 3))
    {
      llvm::raw_ostream::write(v524, v525);
    }
    else
    {
      *((_QWORD *)v524 + 4) = v526 + 1;
      *v526 = v525;
    }
    __asm { BR              X9 }
  }
  v527 = v779;
  if ((_DWORD)v779)
  {
    v528 = (unsigned int *)v778;
    sub_1C596985C(a1, (uint64_t)v745, 3);
    v529 = **(llvm::raw_ostream ***)(a1 + 8);
    v530 = v527;
    do
    {
      v531 = v530 & 0x7F | ((v530 > 0x7F) << 7);
      v532 = (char *)*((_QWORD *)v529 + 4);
      if ((unint64_t)v532 >= *((_QWORD *)v529 + 3))
      {
        v529 = llvm::raw_ostream::write(v529, v531);
      }
      else
      {
        *((_QWORD *)v529 + 4) = v532 + 1;
        *v532 = v531;
      }
      v390 = v530 > 0x7F;
      v530 >>= 7;
    }
    while (v390);
    v533 = &v528[4 * v527];
    do
    {
      v534 = *v528;
      v535 = **(llvm::raw_ostream ***)(a1 + 8);
      do
      {
        v536 = v534 & 0x7F | ((v534 > 0x7F) << 7);
        v537 = (char *)*((_QWORD *)v535 + 4);
        if ((unint64_t)v537 >= *((_QWORD *)v535 + 3))
        {
          v535 = llvm::raw_ostream::write(v535, v536);
        }
        else
        {
          *((_QWORD *)v535 + 4) = v537 + 1;
          *v537 = v536;
        }
        v390 = v534 > 0x7F;
        v534 >>= 7;
      }
      while (v390);
      v528 += 4;
    }
    while (v528 != v533);
    sub_1C59699CC(a1, (uint64_t *)v745);
  }
  v538 = v761;
  if ((_DWORD)v761)
  {
    v539 = (char *)v760;
    sub_1C596985C(a1, (uint64_t)v745, 4);
    v540 = **(llvm::raw_ostream ***)(a1 + 8);
    v541 = v538;
    do
    {
      v542 = v541 & 0x7F | ((v541 > 0x7F) << 7);
      v543 = (char *)*((_QWORD *)v540 + 4);
      if ((unint64_t)v543 >= *((_QWORD *)v540 + 3))
      {
        v540 = llvm::raw_ostream::write(v540, v542);
      }
      else
      {
        *((_QWORD *)v540 + 4) = v543 + 1;
        *v543 = v542;
      }
      v390 = v541 > 0x7F;
      v541 >>= 7;
    }
    while (v390);
    v544 = &v539[56 * v538];
    do
    {
      v545 = v539[8];
      v546 = **(llvm::raw_ostream ***)(a1 + 8);
      do
      {
        v547 = v545 & 0x7F | ((v545 > 0x7F) << 7);
        v548 = (char *)*((_QWORD *)v546 + 4);
        if ((unint64_t)v548 >= *((_QWORD *)v546 + 3))
        {
          v546 = llvm::raw_ostream::write(v546, v547);
        }
        else
        {
          *((_QWORD *)v546 + 4) = v548 + 1;
          *v548 = v547;
        }
        v390 = v545 > 0x7F;
        v545 >>= 7;
      }
      while (v390);
      v549 = v539[16];
      v550 = **(llvm::raw_ostream ***)(a1 + 8);
      do
      {
        v551 = v549 & 0x7F | ((v549 > 0x7F) << 7);
        v552 = (char *)*((_QWORD *)v550 + 4);
        if ((unint64_t)v552 >= *((_QWORD *)v550 + 3))
        {
          v550 = llvm::raw_ostream::write(v550, v551);
        }
        else
        {
          *((_QWORD *)v550 + 4) = v552 + 1;
          *v552 = v551;
        }
        v390 = v549 > 0x7F;
        v549 >>= 7;
      }
      while (v390);
      v553 = *((_QWORD *)v539 + 3);
      v554 = **(llvm::raw_ostream ***)(a1 + 8);
      do
      {
        v555 = v553 & 0x7F | ((v553 > 0x7F) << 7);
        v556 = (char *)*((_QWORD *)v554 + 4);
        if ((unint64_t)v556 >= *((_QWORD *)v554 + 3))
        {
          v554 = llvm::raw_ostream::write(v554, v555);
        }
        else
        {
          *((_QWORD *)v554 + 4) = v556 + 1;
          *v556 = v555;
        }
        v390 = v553 > 0x7F;
        v553 >>= 7;
      }
      while (v390);
      if ((v539[16] & 1) != 0)
      {
        v557 = *((_QWORD *)v539 + 4);
        v558 = **(llvm::raw_ostream ***)(a1 + 8);
        do
        {
          v559 = v557 & 0x7F | ((v557 > 0x7F) << 7);
          v560 = (char *)*((_QWORD *)v558 + 4);
          if ((unint64_t)v560 >= *((_QWORD *)v558 + 3))
          {
            v558 = llvm::raw_ostream::write(v558, v559);
          }
          else
          {
            *((_QWORD *)v558 + 4) = v560 + 1;
            *v560 = v559;
          }
          v390 = v557 > 0x7F;
          v557 >>= 7;
        }
        while (v390);
      }
      v539 += 56;
    }
    while (v539 != v544);
    sub_1C59699CC(a1, (uint64_t *)v745);
  }
  v561 = v767;
  if ((_DWORD)v767)
  {
    v562 = (unsigned int *)v766;
    sub_1C596985C(a1, (uint64_t)v745, 13);
    v563 = **(llvm::raw_ostream ***)(a1 + 8);
    v564 = v561;
    do
    {
      v565 = v564 & 0x7F | ((v564 > 0x7F) << 7);
      v566 = (char *)*((_QWORD *)v563 + 4);
      if ((unint64_t)v566 >= *((_QWORD *)v563 + 3))
      {
        v563 = llvm::raw_ostream::write(v563, v565);
      }
      else
      {
        *((_QWORD *)v563 + 4) = v566 + 1;
        *v566 = v565;
      }
      v390 = v564 > 0x7F;
      v564 >>= 7;
    }
    while (v390);
    v567 = &v562[v561];
    do
    {
      v568 = *v562;
      v569 = **(llvm::raw_ostream ***)(a1 + 8);
      v570 = (_BYTE *)*((_QWORD *)v569 + 4);
      if ((unint64_t)v570 >= *((_QWORD *)v569 + 3))
      {
        llvm::raw_ostream::write(v569, 0);
      }
      else
      {
        *((_QWORD *)v569 + 4) = v570 + 1;
        *v570 = 0;
      }
      v571 = **(llvm::raw_ostream ***)(a1 + 8);
      do
      {
        v572 = v568 & 0x7F | ((v568 > 0x7F) << 7);
        v573 = (char *)*((_QWORD *)v571 + 4);
        if ((unint64_t)v573 >= *((_QWORD *)v571 + 3))
        {
          v571 = llvm::raw_ostream::write(v571, v572);
        }
        else
        {
          *((_QWORD *)v571 + 4) = v573 + 1;
          *v573 = v572;
        }
        v390 = v568 > 0x7F;
        v568 >>= 7;
      }
      while (v390);
      ++v562;
    }
    while (v562 != v567);
    sub_1C59699CC(a1, (uint64_t *)v745);
  }
  v574 = v764;
  if ((_DWORD)v764)
  {
    v575 = (unsigned __int8 *)v763;
    sub_1C596985C(a1, (uint64_t)v745, 6);
    v576 = **(llvm::raw_ostream ***)(a1 + 8);
    v577 = v574;
    do
    {
      v578 = v577 & 0x7F | ((v577 > 0x7F) << 7);
      v579 = (char *)*((_QWORD *)v576 + 4);
      if ((unint64_t)v579 >= *((_QWORD *)v576 + 3))
      {
        v576 = llvm::raw_ostream::write(v576, v578);
      }
      else
      {
        *((_QWORD *)v576 + 4) = v579 + 1;
        *v579 = v578;
      }
      v390 = v577 > 0x7F;
      v577 >>= 7;
    }
    while (v390);
    v580 = &v575[64 * v574];
    while (2)
    {
      v581 = v575[4];
      v582 = **(llvm::raw_ostream ***)(a1 + 8);
      do
      {
        v583 = v581 & 0x7F | ((v581 > 0x7F) << 7);
        v584 = (char *)*((_QWORD *)v582 + 4);
        if ((unint64_t)v584 >= *((_QWORD *)v582 + 3))
        {
          v582 = llvm::raw_ostream::write(v582, v583);
        }
        else
        {
          *((_QWORD *)v582 + 4) = v584 + 1;
          *v584 = v583;
        }
        v390 = v581 > 0x7F;
        v581 >>= 7;
      }
      while (v390);
      v585 = **(llvm::raw_ostream ***)(a1 + 8);
      v586 = v575[5];
      v587 = (char *)*((_QWORD *)v585 + 4);
      if ((unint64_t)v587 >= *((_QWORD *)v585 + 3))
      {
        llvm::raw_ostream::write(v585, v586);
      }
      else
      {
        *((_QWORD *)v585 + 4) = v587 + 1;
        *v587 = v586;
      }
      v588 = **(llvm::raw_ostream ***)(a1 + 8);
      v589 = v575[16];
      v590 = (char *)*((_QWORD *)v588 + 4);
      if ((unint64_t)v590 >= *((_QWORD *)v588 + 3))
      {
        llvm::raw_ostream::write(v588, v589);
      }
      else
      {
        *((_QWORD *)v588 + 4) = v590 + 1;
        *v590 = v589;
      }
      switch(v575[4])
      {
        case '|':
          *(_QWORD *)v781 = 0;
          v593 = **(llvm::raw_ostream ***)(a1 + 8);
          v594 = 8;
          goto LABEL_853;
        case '}':
          *(_DWORD *)v781 = 0;
          v593 = **(llvm::raw_ostream ***)(a1 + 8);
          v594 = 4;
LABEL_853:
          llvm::raw_ostream::write(v593, v781, v594);
          goto LABEL_859;
        case '~':
        case '\x7F':
          v591 = **(llvm::raw_ostream ***)(a1 + 8);
          v592 = (_BYTE *)*((_QWORD *)v591 + 4);
          if ((unint64_t)v592 < *((_QWORD *)v591 + 3))
          {
            *((_QWORD *)v591 + 4) = v592 + 1;
            *v592 = 0;
            goto LABEL_859;
          }
          v595 = 0;
          goto LABEL_858;
        default:
          v591 = **(llvm::raw_ostream ***)(a1 + 8);
          v596 = (_BYTE *)*((_QWORD *)v591 + 4);
          if ((unint64_t)v596 >= *((_QWORD *)v591 + 3))
          {
            v595 = 111;
LABEL_858:
            llvm::raw_ostream::write(v591, v595);
          }
          else
          {
            *((_QWORD *)v591 + 4) = v596 + 1;
            *v596 = 111;
          }
LABEL_859:
          v597 = **(llvm::raw_ostream ***)(a1 + 8);
          v598 = (_BYTE *)*((_QWORD *)v597 + 4);
          if ((unint64_t)v598 >= *((_QWORD *)v597 + 3))
          {
            llvm::raw_ostream::write(v597, 11);
          }
          else
          {
            *((_QWORD *)v597 + 4) = v598 + 1;
            *v598 = 11;
          }
          v575 += 64;
          if (v575 != v580)
            continue;
          sub_1C59699CC(a1, (uint64_t *)v745);
          break;
      }
      break;
    }
  }
  v599 = v770;
  if ((_DWORD)v770)
  {
    v600 = (char *)v769;
    sub_1C596985C(a1, (uint64_t)v745, 7);
    v601 = **(llvm::raw_ostream ***)(a1 + 8);
    v602 = v599;
    do
    {
      v603 = v602 & 0x7F | ((v602 > 0x7F) << 7);
      v604 = (char *)*((_QWORD *)v601 + 4);
      if ((unint64_t)v604 >= *((_QWORD *)v601 + 3))
      {
        v601 = llvm::raw_ostream::write(v601, v603);
      }
      else
      {
        *((_QWORD *)v601 + 4) = v604 + 1;
        *v604 = v603;
      }
      v390 = v602 > 0x7F;
      v602 >>= 7;
    }
    while (v390);
    v605 = &v600[24 * v599];
    do
    {
      sub_1C5969B3C(a1, *(char **)v600, *((_QWORD *)v600 + 1));
      v606 = **(llvm::raw_ostream ***)(a1 + 8);
      v607 = v600[16];
      v608 = (char *)*((_QWORD *)v606 + 4);
      if ((unint64_t)v608 >= *((_QWORD *)v606 + 3))
      {
        llvm::raw_ostream::write(v606, v607);
      }
      else
      {
        *((_QWORD *)v606 + 4) = v608 + 1;
        *v608 = v607;
      }
      v609 = *((unsigned int *)v600 + 5);
      v610 = **(llvm::raw_ostream ***)(a1 + 8);
      do
      {
        v611 = v609 & 0x7F | ((v609 > 0x7F) << 7);
        v612 = (char *)*((_QWORD *)v610 + 4);
        if ((unint64_t)v612 >= *((_QWORD *)v610 + 3))
        {
          v610 = llvm::raw_ostream::write(v610, v611);
        }
        else
        {
          *((_QWORD *)v610 + 4) = v612 + 1;
          *v612 = v611;
        }
        v390 = v609 > 0x7F;
        v609 >>= 7;
      }
      while (v390);
      v600 += 24;
    }
    while (v600 != v605);
    sub_1C59699CC(a1, (uint64_t *)v745);
  }
  v613 = *(llvm::MCContext **)v728;
  v745[0] = "__indirect_function_table";
  v747 = 259;
  v614 = llvm::MCContext::lookupSymbol(v613, (const char **)v745);
  v615 = v776;
  if ((_DWORD)v776)
  {
    v671 = v614;
    v672 = (unsigned int *)v775;
    sub_1C596985C(a1, (uint64_t)v745, 9);
    v673 = **(llvm::raw_ostream ***)(a1 + 8);
    v674 = (_BYTE *)*((_QWORD *)v673 + 4);
    if ((unint64_t)v674 >= *((_QWORD *)v673 + 3))
    {
      llvm::raw_ostream::write(v673, 1);
    }
    else
    {
      *((_QWORD *)v673 + 4) = v674 + 1;
      *v674 = 1;
    }
    *(_QWORD *)v781 = 0;
    if ((sub_1C6144BDC(*(_QWORD *)(a1 + 120), *(_DWORD *)(a1 + 136), v671, v781) & 1) != 0)
      v675 = *(_DWORD **)v781;
    else
      v675 = (_DWORD *)(*(_QWORD *)(a1 + 120) + 16 * *(unsigned int *)(a1 + 136));
    v676 = v675[2];
    v677 = 2 * (v675[2] != 0);
    v678 = **(llvm::raw_ostream ***)(a1 + 8);
    v679 = (char *)*((_QWORD *)v678 + 4);
    if ((unint64_t)v679 >= *((_QWORD *)v678 + 3))
    {
      llvm::raw_ostream::write(v678, v677);
    }
    else
    {
      *((_QWORD *)v678 + 4) = v679 + 1;
      *v679 = v677;
    }
    if ((_DWORD)v676)
    {
      v680 = **(llvm::raw_ostream ***)(a1 + 8);
      do
      {
        v681 = v676 & 0x7F | ((v676 > 0x7F) << 7);
        v682 = (char *)*((_QWORD *)v680 + 4);
        if ((unint64_t)v682 >= *((_QWORD *)v680 + 3))
        {
          v680 = llvm::raw_ostream::write(v680, v681);
        }
        else
        {
          *((_QWORD *)v680 + 4) = v682 + 1;
          *v682 = v681;
        }
        v390 = v676 > 0x7F;
        v676 >>= 7;
      }
      while (v390);
      v683 = **(llvm::raw_ostream ***)(a1 + 8);
      v684 = (_BYTE *)*((_QWORD *)v683 + 4);
      if ((unint64_t)v684 >= *((_QWORD *)v683 + 3))
      {
        llvm::raw_ostream::write(v683, 65);
      }
      else
      {
        *((_QWORD *)v683 + 4) = v684 + 1;
        *v684 = 65;
      }
      v687 = **(llvm::raw_ostream ***)(a1 + 8);
      v688 = (_BYTE *)*((_QWORD *)v687 + 4);
      if ((unint64_t)v688 >= *((_QWORD *)v687 + 3))
      {
        llvm::raw_ostream::write(v687, 1);
      }
      else
      {
        *((_QWORD *)v687 + 4) = v688 + 1;
        *v688 = 1;
      }
      v689 = **(llvm::raw_ostream ***)(a1 + 8);
      v690 = (_BYTE *)*((_QWORD *)v689 + 4);
      if ((unint64_t)v690 >= *((_QWORD *)v689 + 3))
      {
        llvm::raw_ostream::write(v689, 11);
      }
      else
      {
        *((_QWORD *)v689 + 4) = v690 + 1;
        *v690 = 11;
      }
      v691 = **(llvm::raw_ostream ***)(a1 + 8);
      v692 = (_BYTE *)*((_QWORD *)v691 + 4);
      if ((unint64_t)v692 < *((_QWORD *)v691 + 3))
      {
        *((_QWORD *)v691 + 4) = v692 + 1;
        *v692 = 0;
LABEL_993:
        v697 = **(llvm::raw_ostream ***)(a1 + 8);
        v698 = v615;
        do
        {
          v699 = v698 & 0x7F | ((v698 > 0x7F) << 7);
          v700 = (char *)*((_QWORD *)v697 + 4);
          if ((unint64_t)v700 >= *((_QWORD *)v697 + 3))
          {
            v697 = llvm::raw_ostream::write(v697, v699);
          }
          else
          {
            *((_QWORD *)v697 + 4) = v700 + 1;
            *v700 = v699;
          }
          v390 = v698 > 0x7F;
          v698 >>= 7;
        }
        while (v390);
        v701 = &v672[v615];
        do
        {
          v702 = *v672;
          v703 = **(llvm::raw_ostream ***)(a1 + 8);
          do
          {
            v704 = v702 & 0x7F | ((v702 > 0x7F) << 7);
            v705 = (char *)*((_QWORD *)v703 + 4);
            if ((unint64_t)v705 >= *((_QWORD *)v703 + 3))
            {
              v703 = llvm::raw_ostream::write(v703, v704);
            }
            else
            {
              *((_QWORD *)v703 + 4) = v705 + 1;
              *v705 = v704;
            }
            v390 = v702 > 0x7F;
            v702 >>= 7;
          }
          while (v390);
          ++v672;
        }
        while (v672 != v701);
        sub_1C59699CC(a1, (uint64_t *)v745);
        goto LABEL_882;
      }
      v693 = 0;
    }
    else
    {
      v685 = **(llvm::raw_ostream ***)(a1 + 8);
      v686 = (_BYTE *)*((_QWORD *)v685 + 4);
      if ((unint64_t)v686 >= *((_QWORD *)v685 + 3))
      {
        llvm::raw_ostream::write(v685, 65);
      }
      else
      {
        *((_QWORD *)v685 + 4) = v686 + 1;
        *v686 = 65;
      }
      v694 = **(llvm::raw_ostream ***)(a1 + 8);
      v695 = (_BYTE *)*((_QWORD *)v694 + 4);
      if ((unint64_t)v695 >= *((_QWORD *)v694 + 3))
      {
        llvm::raw_ostream::write(v694, 1);
      }
      else
      {
        *((_QWORD *)v694 + 4) = v695 + 1;
        *v695 = 1;
      }
      v691 = **(llvm::raw_ostream ***)(a1 + 8);
      v696 = (_BYTE *)*((_QWORD *)v691 + 4);
      if ((unint64_t)v696 < *((_QWORD *)v691 + 3))
      {
        *((_QWORD *)v691 + 4) = v696 + 1;
        *v696 = 11;
        goto LABEL_993;
      }
      v693 = 11;
    }
    llvm::raw_ostream::write(v691, v693);
    goto LABEL_993;
  }
LABEL_882:
  if (*(_DWORD *)(a1 + 584))
  {
    sub_1C596985C(a1, (uint64_t)v745, 12);
    v616 = *(unsigned int *)(a1 + 584);
    v617 = **(llvm::raw_ostream ***)(a1 + 8);
    do
    {
      v618 = v616 & 0x7F | ((v616 > 0x7F) << 7);
      v619 = (char *)*((_QWORD *)v617 + 4);
      if ((unint64_t)v619 >= *((_QWORD *)v617 + 3))
      {
        v617 = llvm::raw_ostream::write(v617, v618);
      }
      else
      {
        *((_QWORD *)v617 + 4) = v619 + 1;
        *v619 = v618;
      }
      v390 = v616 > 0x7F;
      v616 >>= 7;
    }
    while (v390);
    sub_1C59699CC(a1, (uint64_t *)v745);
  }
  v620 = v779;
  if ((_DWORD)v779)
  {
    v621 = (char *)v778;
    sub_1C596985C(a1, (uint64_t)v745, 10);
    v622 = **(llvm::raw_ostream ***)(a1 + 8);
    v623 = v620;
    do
    {
      v624 = v623 & 0x7F | ((v623 > 0x7F) << 7);
      v625 = (char *)*((_QWORD *)v622 + 4);
      if ((unint64_t)v625 >= *((_QWORD *)v622 + 3))
      {
        v622 = llvm::raw_ostream::write(v622, v624);
      }
      else
      {
        *((_QWORD *)v622 + 4) = v625 + 1;
        *v625 = v624;
      }
      v390 = v623 > 0x7F;
      v623 >>= 7;
    }
    while (v390);
    v626 = &v621[16 * v620];
    v627 = v746;
    do
    {
      v628 = *((_QWORD *)v621 + 1);
      v629 = *(_QWORD *)v628 & 0xFFFFFFFFFFFFFFF8;
      if (!v629 && (*(_DWORD *)(v628 + 8) & 0x1C00) == 0x800)
      {
        *(_DWORD *)(v628 + 8) |= 4u;
        llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v628 + 24));
        *(_QWORD *)v628 = *(_QWORD *)v628 & 7 | v629;
        v628 = *((_QWORD *)v621 + 1);
      }
      v630 = *(const llvm::MCSection **)(v629 + 16);
      *(_QWORD *)v781 = 0;
      llvm::MCExpr::evaluateAsAbsolute(*(_QWORD *)(v628 + 176), v781);
      if ((v631 & 1) == 0)
        goto LABEL_1016;
      v632 = *(_QWORD *)v781;
      v633 = **(llvm::raw_ostream ***)(a1 + 8);
      do
      {
        v634 = v632 & 0x7F | ((v632 > 0x7F) << 7);
        v635 = (char *)*((_QWORD *)v633 + 4);
        if ((unint64_t)v635 >= *((_QWORD *)v633 + 3))
        {
          v633 = llvm::raw_ostream::write(v633, v634);
        }
        else
        {
          *((_QWORD *)v633 + 4) = v635 + 1;
          *v635 = v634;
        }
        v390 = v632 > 0x7F;
        v632 >>= 7;
      }
      while (v390);
      v636 = **(_QWORD ***)(a1 + 8);
      *((_QWORD *)v630 + 30) = (*(uint64_t (**)(_QWORD *))(*v636 + 80))(v636) + v636[4] - (v627 + v636[2]);
      llvm::MCAssembler::writeSectionData(v728, **(llvm::raw_ostream ***)(a1 + 8), v630, (const llvm::MCAsmLayout *)a3);
      v621 += 16;
    }
    while (v621 != v626);
    sub_1C5969C04(a1, *(_QWORD *)(a1 + 24), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 32) - *(_QWORD *)(a1 + 24)) >> 3));
    sub_1C59699CC(a1, (uint64_t *)v745);
    v369 = DWORD2(v746);
  }
  else
  {
    v369 = 0;
  }
  v372 = v728;
  if (*(_DWORD *)(a1 + 584))
  {
    sub_1C596985C(a1, (uint64_t)v745, 11);
    v637 = *(unsigned int *)(a1 + 584);
    v638 = **(llvm::raw_ostream ***)(a1 + 8);
    do
    {
      v639 = v637 & 0x7F | ((v637 > 0x7F) << 7);
      v640 = (char *)*((_QWORD *)v638 + 4);
      if ((unint64_t)v640 >= *((_QWORD *)v638 + 3))
      {
        v638 = llvm::raw_ostream::write(v638, v639);
      }
      else
      {
        *((_QWORD *)v638 + 4) = v640 + 1;
        *v640 = v639;
      }
      v390 = v637 > 0x7F;
      v637 >>= 7;
    }
    while (v390);
    v641 = *(_DWORD *)(a1 + 584);
    if (v641)
    {
      v642 = *(uint64_t **)(a1 + 576);
      v643 = &v642[10 * v641];
      v644 = v746;
      v645 = v369;
      do
      {
        v646 = *((unsigned int *)v642 + 6);
        v647 = **(llvm::raw_ostream ***)(a1 + 8);
        do
        {
          v648 = v646 & 0x7F | ((v646 > 0x7F) << 7);
          v649 = (char *)*((_QWORD *)v647 + 4);
          if ((unint64_t)v649 >= *((_QWORD *)v647 + 3))
          {
            v647 = llvm::raw_ostream::write(v647, v648);
          }
          else
          {
            *((_QWORD *)v647 + 4) = v649 + 1;
            *v649 = v648;
          }
          v390 = v646 > 0x7F;
          v646 >>= 7;
        }
        while (v390);
        if ((v642[3] & 2) != 0)
        {
          v650 = **(llvm::raw_ostream ***)(a1 + 8);
          v651 = (_BYTE *)*((_QWORD *)v650 + 4);
          if ((unint64_t)v651 >= *((_QWORD *)v650 + 3))
          {
            llvm::raw_ostream::write(v650, 0);
          }
          else
          {
            *((_QWORD *)v650 + 4) = v651 + 1;
            *v651 = 0;
          }
        }
        if ((v642[3] & 1) == 0)
        {
          v652 = **(llvm::raw_ostream ***)(a1 + 8);
          if ((*(_BYTE *)(*(_QWORD *)(a1 + 16) + 8) & 1) != 0)
            v653 = 66;
          else
            v653 = 65;
          v654 = (char *)*((_QWORD *)v652 + 4);
          if ((unint64_t)v654 >= *((_QWORD *)v652 + 3))
          {
            llvm::raw_ostream::write(v652, v653);
          }
          else
          {
            *((_QWORD *)v652 + 4) = v654 + 1;
            *v654 = v653;
          }
          v655 = v642[4];
          v656 = **(llvm::raw_ostream ***)(a1 + 8);
          do
          {
            v657 = v655 >> 7;
            if ((unint64_t)v655 < 0x40)
              goto LABEL_937;
            v658 = ((unint64_t)v655 >> 6) & 1;
            if (v657 != -1)
              LODWORD(v658) = 0;
            if ((_DWORD)v658 == 1)
            {
LABEL_937:
              v659 = 0;
              v660 = 1;
            }
            else
            {
              v660 = 0;
              v659 = 0x80;
            }
            v661 = v659 | v655 & 0x7F;
            v662 = (char *)*((_QWORD *)v656 + 4);
            if ((unint64_t)v662 >= *((_QWORD *)v656 + 3))
            {
              v656 = llvm::raw_ostream::write(v656, v661);
            }
            else
            {
              *((_QWORD *)v656 + 4) = v662 + 1;
              *v662 = v661;
            }
            v655 = v657;
          }
          while (!v660);
          v663 = **(llvm::raw_ostream ***)(a1 + 8);
          v664 = (_BYTE *)*((_QWORD *)v663 + 4);
          if ((unint64_t)v664 >= *((_QWORD *)v663 + 3))
          {
            llvm::raw_ostream::write(v663, 11);
          }
          else
          {
            *((_QWORD *)v663 + 4) = v664 + 1;
            *v664 = 11;
          }
          v369 = v645;
        }
        v665 = v642[7];
        v666 = **(llvm::raw_ostream ***)(a1 + 8);
        do
        {
          v667 = v665 & 0x7F | ((v665 > 0x7F) << 7);
          v668 = (char *)*((_QWORD *)v666 + 4);
          if ((unint64_t)v668 >= *((_QWORD *)v666 + 3))
          {
            v666 = llvm::raw_ostream::write(v666, v667);
          }
          else
          {
            *((_QWORD *)v666 + 4) = v668 + 1;
            *v668 = v667;
          }
          v390 = v665 > 0x7F;
          v665 >>= 7;
        }
        while (v390);
        v669 = *v642;
        v670 = **(_QWORD ***)(a1 + 8);
        *(_QWORD *)(v669 + 240) = (*(uint64_t (**)(_QWORD *))(*v670 + 80))(v670)
                                + v670[4]
                                - (v644
                                 + v670[2]);
        llvm::raw_ostream::write(**(llvm::raw_ostream ***)(a1 + 8), (const char *)v642[6], v642[7]);
        v642 += 10;
      }
      while (v642 != v643);
      v372 = v728;
    }
    sub_1C5969C04(a1, *(_QWORD *)(a1 + 48), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(_QWORD *)(a1 + 56) - *(_QWORD *)(a1 + 48)) >> 3));
    sub_1C59699CC(a1, (uint64_t *)v745);
    v370 = DWORD2(v746);
  }
  else
  {
    v370 = 0;
  }
LABEL_554:
  v373 = v737;
  if (v737 != (uint64_t *)&v738)
  {
    do
    {
      v374 = (_DWORD *)v373[6];
      v375 = (_DWORD *)v373[7];
      while (v374 != v375)
      {
        if (*v374 == 5)
          v374[1] += *(_DWORD *)(a1 + 928);
        v374 += 2;
      }
      v376 = (uint64_t *)v373[1];
      if (v376)
      {
        do
        {
          v377 = v376;
          v376 = (uint64_t *)*v376;
        }
        while (v376);
      }
      else
      {
        do
        {
          v377 = (uint64_t *)v373[2];
          v20 = *v377 == (_QWORD)v373;
          v373 = v377;
        }
        while (!v20);
      }
      v373 = v377;
    }
    while (v377 != (uint64_t *)&v738);
  }
  v379 = *(_QWORD *)(a1 + 192);
  v378 = *(_QWORD *)(a1 + 200);
  while (v379 != v378)
  {
    sub_1C5968E84(a1, v379, v372, v371);
    v379 += 32;
  }
  if (v730 != 2)
  {
    v380 = (char *)v757;
    v381 = v758;
    v382 = (unsigned __int16 *)v754;
    v383 = v755;
    sub_1C596A18C(a1, (uint64_t)v745, (uint64_t *)"linking", 7uLL);
    v384 = **(llvm::raw_ostream ***)(a1 + 8);
    v385 = (_BYTE *)*((_QWORD *)v384 + 4);
    if ((unint64_t)v385 >= *((_QWORD *)v384 + 3))
    {
      llvm::raw_ostream::write(v384, 2);
      if (!(_DWORD)v381)
        goto LABEL_623;
    }
    else
    {
      *((_QWORD *)v384 + 4) = v385 + 1;
      *v385 = 2;
      if (!(_DWORD)v381)
        goto LABEL_623;
    }
    sub_1C596985C(a1, (uint64_t)v781, 8);
    v386 = **(llvm::raw_ostream ***)(a1 + 8);
    v387 = v381;
    do
    {
      v388 = v387 & 0x7F | ((v387 > 0x7F) << 7);
      v389 = (char *)*((_QWORD *)v386 + 4);
      if ((unint64_t)v389 >= *((_QWORD *)v386 + 3))
      {
        v386 = llvm::raw_ostream::write(v386, v388);
      }
      else
      {
        *((_QWORD *)v386 + 4) = v389 + 1;
        *v389 = v388;
      }
      v390 = v387 > 0x7F;
      v387 >>= 7;
    }
    while (v390);
    v731 = v370;
    v391 = v369;
    v392 = &v380[120 * v381];
    do
    {
      v393 = v380[16];
      v394 = **(llvm::raw_ostream ***)(a1 + 8);
      do
      {
        v395 = v393 & 0x7F | ((v393 > 0x7F) << 7);
        v396 = (char *)*((_QWORD *)v394 + 4);
        if ((unint64_t)v396 >= *((_QWORD *)v394 + 3))
        {
          v394 = llvm::raw_ostream::write(v394, v395);
        }
        else
        {
          *((_QWORD *)v394 + 4) = v396 + 1;
          *v396 = v395;
        }
        v390 = v393 > 0x7F;
        v393 >>= 7;
      }
      while (v390);
      v397 = *((unsigned int *)v380 + 5);
      v398 = **(llvm::raw_ostream ***)(a1 + 8);
      do
      {
        v399 = v397 & 0x7F | ((v397 > 0x7F) << 7);
        v400 = (char *)*((_QWORD *)v398 + 4);
        if ((unint64_t)v400 >= *((_QWORD *)v398 + 3))
        {
          v398 = llvm::raw_ostream::write(v398, v399);
        }
        else
        {
          *((_QWORD *)v398 + 4) = v400 + 1;
          *v400 = v399;
        }
        v390 = v397 > 0x7F;
        v397 >>= 7;
      }
      while (v390);
      v401 = v380[16];
      if (((1 << v401) & 0x35) != 0)
      {
        v402 = *((unsigned int *)v380 + 24);
        v403 = **(llvm::raw_ostream ***)(a1 + 8);
        do
        {
          v404 = v402 & 0x7F | ((v402 > 0x7F) << 7);
          v405 = (char *)*((_QWORD *)v403 + 4);
          if ((unint64_t)v405 >= *((_QWORD *)v403 + 3))
          {
            v403 = llvm::raw_ostream::write(v403, v404);
          }
          else
          {
            *((_QWORD *)v403 + 4) = v405 + 1;
            *v405 = v404;
          }
          v390 = v402 > 0x7F;
          v402 >>= 7;
        }
        while (v390);
        if ((*((_DWORD *)v380 + 5) & 0x50) != 0x10)
          sub_1C5969B3C(a1, *(char **)v380, *((_QWORD *)v380 + 1));
      }
      else if (v401 == 1)
      {
        sub_1C5969B3C(a1, *(char **)v380, *((_QWORD *)v380 + 1));
        if ((v380[20] & 0x10) == 0)
        {
          v406 = *((unsigned int *)v380 + 24);
          v407 = **(llvm::raw_ostream ***)(a1 + 8);
          do
          {
            v408 = v406 & 0x7F | ((v406 > 0x7F) << 7);
            v409 = (char *)*((_QWORD *)v407 + 4);
            if ((unint64_t)v409 >= *((_QWORD *)v407 + 3))
            {
              v407 = llvm::raw_ostream::write(v407, v408);
            }
            else
            {
              *((_QWORD *)v407 + 4) = v409 + 1;
              *v409 = v408;
            }
            v390 = v406 > 0x7F;
            v406 >>= 7;
          }
          while (v390);
          v410 = *((_QWORD *)v380 + 13);
          v411 = **(llvm::raw_ostream ***)(a1 + 8);
          do
          {
            v412 = v410 & 0x7F | ((v410 > 0x7F) << 7);
            v413 = (char *)*((_QWORD *)v411 + 4);
            if ((unint64_t)v413 >= *((_QWORD *)v411 + 3))
            {
              v411 = llvm::raw_ostream::write(v411, v412);
            }
            else
            {
              *((_QWORD *)v411 + 4) = v413 + 1;
              *v413 = v412;
            }
            v390 = v410 > 0x7F;
            v410 >>= 7;
          }
          while (v390);
          v414 = *((_QWORD *)v380 + 14);
          v415 = **(llvm::raw_ostream ***)(a1 + 8);
          do
          {
            v416 = v414 & 0x7F | ((v414 > 0x7F) << 7);
            v417 = (char *)*((_QWORD *)v415 + 4);
            if ((unint64_t)v417 >= *((_QWORD *)v415 + 3))
            {
              v415 = llvm::raw_ostream::write(v415, v416);
            }
            else
            {
              *((_QWORD *)v415 + 4) = v417 + 1;
              *v417 = v416;
            }
            v390 = v414 > 0x7F;
            v414 >>= 7;
          }
          while (v390);
        }
      }
      else
      {
        v418 = *(unsigned int *)(*(_QWORD *)(a1 + 192) + 32 * *((unsigned int *)v380 + 24) + 28);
        v419 = **(llvm::raw_ostream ***)(a1 + 8);
        do
        {
          v420 = v418 & 0x7F | ((v418 > 0x7F) << 7);
          v421 = (char *)*((_QWORD *)v419 + 4);
          if ((unint64_t)v421 >= *((_QWORD *)v419 + 3))
          {
            v419 = llvm::raw_ostream::write(v419, v420);
          }
          else
          {
            *((_QWORD *)v419 + 4) = v421 + 1;
            *v421 = v420;
          }
          v390 = v418 > 0x7F;
          v418 >>= 7;
        }
        while (v390);
      }
      v380 += 120;
    }
    while (v380 != v392);
    sub_1C59699CC(a1, (uint64_t *)v781);
    v371 = (const llvm::MCAsmLayout *)a3;
    v369 = v391;
    v370 = v731;
LABEL_623:
    if (*(_DWORD *)(a1 + 584))
    {
      sub_1C596985C(a1, (uint64_t)v781, 5);
      v422 = *(unsigned int *)(a1 + 584);
      v423 = **(llvm::raw_ostream ***)(a1 + 8);
      do
      {
        v424 = v422 & 0x7F | ((v422 > 0x7F) << 7);
        v425 = (char *)*((_QWORD *)v423 + 4);
        if ((unint64_t)v425 >= *((_QWORD *)v423 + 3))
        {
          v423 = llvm::raw_ostream::write(v423, v424);
        }
        else
        {
          *((_QWORD *)v423 + 4) = v425 + 1;
          *v425 = v424;
        }
        v390 = v422 > 0x7F;
        v422 >>= 7;
      }
      while (v390);
      v426 = *(_DWORD *)(a1 + 584);
      if (v426)
      {
        v427 = *(_QWORD *)(a1 + 576);
        v428 = v427 + 80 * v426;
        do
        {
          sub_1C5969B3C(a1, *(char **)(v427 + 8), *(_QWORD *)(v427 + 16));
          v429 = *(unsigned int *)(v427 + 40);
          v430 = **(llvm::raw_ostream ***)(a1 + 8);
          do
          {
            v431 = v429 & 0x7F | ((v429 > 0x7F) << 7);
            v432 = (char *)*((_QWORD *)v430 + 4);
            if ((unint64_t)v432 >= *((_QWORD *)v430 + 3))
            {
              v430 = llvm::raw_ostream::write(v430, v431);
            }
            else
            {
              *((_QWORD *)v430 + 4) = v432 + 1;
              *v432 = v431;
            }
            v390 = v429 > 0x7F;
            v429 >>= 7;
          }
          while (v390);
          v433 = *(unsigned int *)(v427 + 44);
          v434 = **(llvm::raw_ostream ***)(a1 + 8);
          do
          {
            v435 = v433 & 0x7F | ((v433 > 0x7F) << 7);
            v436 = (char *)*((_QWORD *)v434 + 4);
            if ((unint64_t)v436 >= *((_QWORD *)v434 + 3))
            {
              v434 = llvm::raw_ostream::write(v434, v435);
            }
            else
            {
              *((_QWORD *)v434 + 4) = v436 + 1;
              *v436 = v435;
            }
            v390 = v433 > 0x7F;
            v433 >>= 7;
          }
          while (v390);
          v427 += 80;
        }
        while (v427 != v428);
      }
      sub_1C59699CC(a1, (uint64_t *)v781);
    }
    if ((_DWORD)v383)
    {
      sub_1C596985C(a1, (uint64_t)v781, 6);
      v437 = **(llvm::raw_ostream ***)(a1 + 8);
      v438 = v383;
      do
      {
        v439 = v438 & 0x7F | ((v438 > 0x7F) << 7);
        v440 = (char *)*((_QWORD *)v437 + 4);
        if ((unint64_t)v440 >= *((_QWORD *)v437 + 3))
        {
          v437 = llvm::raw_ostream::write(v437, v439);
        }
        else
        {
          *((_QWORD *)v437 + 4) = v440 + 1;
          *v440 = v439;
        }
        v390 = v438 > 0x7F;
        v438 >>= 7;
      }
      while (v390);
      v441 = &v382[4 * v383];
      do
      {
        v442 = *v382;
        v443 = **(llvm::raw_ostream ***)(a1 + 8);
        do
        {
          v444 = v442 & 0x7F | ((v442 > 0x7F) << 7);
          v445 = (char *)*((_QWORD *)v443 + 4);
          if ((unint64_t)v445 >= *((_QWORD *)v443 + 3))
          {
            v443 = llvm::raw_ostream::write(v443, v444);
          }
          else
          {
            *((_QWORD *)v443 + 4) = v445 + 1;
            *v445 = v444;
          }
          v390 = v442 > 0x7F;
          v442 >>= 7;
        }
        while (v390);
        v446 = *((unsigned int *)v382 + 1);
        v447 = **(llvm::raw_ostream ***)(a1 + 8);
        do
        {
          v448 = v446 & 0x7F | ((v446 > 0x7F) << 7);
          v449 = (char *)*((_QWORD *)v447 + 4);
          if ((unint64_t)v449 >= *((_QWORD *)v447 + 3))
          {
            v447 = llvm::raw_ostream::write(v447, v448);
          }
          else
          {
            *((_QWORD *)v447 + 4) = v449 + 1;
            *v449 = v448;
          }
          v390 = v446 > 0x7F;
          v446 >>= 7;
        }
        while (v390);
        v382 += 4;
      }
      while (v382 != v441);
      sub_1C59699CC(a1, (uint64_t *)v781);
    }
    if (v739)
    {
      sub_1C596985C(a1, (uint64_t)v781, 7);
      v450 = v739;
      v451 = **(llvm::raw_ostream ***)(a1 + 8);
      do
      {
        v452 = v450 & 0x7F | ((v450 > 0x7F) << 7);
        v453 = (char *)*((_QWORD *)v451 + 4);
        if ((unint64_t)v453 >= *((_QWORD *)v451 + 3))
        {
          v451 = llvm::raw_ostream::write(v451, v452);
        }
        else
        {
          *((_QWORD *)v451 + 4) = v453 + 1;
          *v453 = v452;
        }
        v390 = v450 > 0x7F;
        v450 >>= 7;
      }
      while (v390);
      v454 = v737;
      if (v737 != (uint64_t *)&v738)
      {
        do
        {
          sub_1C5969B3C(a1, (char *)v454[4], v454[5]);
          v455 = **(llvm::raw_ostream ***)(a1 + 8);
          v456 = (_BYTE *)*((_QWORD *)v455 + 4);
          if ((unint64_t)v456 >= *((_QWORD *)v455 + 3))
          {
            llvm::raw_ostream::write(v455, 0);
          }
          else
          {
            *((_QWORD *)v455 + 4) = v456 + 1;
            *v456 = 0;
          }
          v457 = (v454[7] - v454[6]) >> 3;
          v458 = **(llvm::raw_ostream ***)(a1 + 8);
          do
          {
            v459 = v457 & 0x7F | ((v457 > 0x7F) << 7);
            v460 = (char *)*((_QWORD *)v458 + 4);
            if ((unint64_t)v460 >= *((_QWORD *)v458 + 3))
            {
              v458 = llvm::raw_ostream::write(v458, v459);
            }
            else
            {
              *((_QWORD *)v458 + 4) = v460 + 1;
              *v460 = v459;
            }
            v390 = v457 > 0x7F;
            v457 >>= 7;
          }
          while (v390);
          v461 = (unsigned int *)v454[6];
          v462 = (unsigned int *)v454[7];
          while (v461 != v462)
          {
            v463 = *v461;
            v464 = **(llvm::raw_ostream ***)(a1 + 8);
            do
            {
              v465 = v463 & 0x7F | ((v463 > 0x7F) << 7);
              v466 = (char *)*((_QWORD *)v464 + 4);
              if ((unint64_t)v466 >= *((_QWORD *)v464 + 3))
              {
                v464 = llvm::raw_ostream::write(v464, v465);
              }
              else
              {
                *((_QWORD *)v464 + 4) = v466 + 1;
                *v466 = v465;
              }
              v390 = v463 > 0x7F;
              v463 >>= 7;
            }
            while (v390);
            v467 = v461[1];
            v468 = **(llvm::raw_ostream ***)(a1 + 8);
            do
            {
              v469 = v467 & 0x7F | ((v467 > 0x7F) << 7);
              v470 = (char *)*((_QWORD *)v468 + 4);
              if ((unint64_t)v470 >= *((_QWORD *)v468 + 3))
              {
                v468 = llvm::raw_ostream::write(v468, v469);
              }
              else
              {
                *((_QWORD *)v468 + 4) = v470 + 1;
                *v470 = v469;
              }
              v390 = v467 > 0x7F;
              v467 >>= 7;
            }
            while (v390);
            v461 += 2;
          }
          v471 = (uint64_t *)v454[1];
          if (v471)
          {
            do
            {
              v472 = v471;
              v471 = (uint64_t *)*v471;
            }
            while (v471);
          }
          else
          {
            do
            {
              v472 = (uint64_t *)v454[2];
              v20 = *v472 == (_QWORD)v454;
              v454 = v472;
            }
            while (!v20);
          }
          v454 = v472;
        }
        while (v472 != (uint64_t *)&v738);
      }
      sub_1C59699CC(a1, (uint64_t *)v781);
    }
    sub_1C59699CC(a1, (uint64_t *)v745);
    sub_1C5968F70(a1, v369, "CODE", 4uLL, (uint64_t *)(a1 + 24), v473);
    sub_1C5968F70(a1, v370, "DATA", 4uLL, (uint64_t *)(a1 + 48), v474);
  }
  v475 = *(_QWORD *)(a1 + 192);
  v476 = *(_QWORD *)(a1 + 200);
  while (v475 != v476)
  {
    v477 = sub_1C596A424(a1 + 232, (uint64_t *)(v475 + 16));
    v478 = *(_DWORD *)(v475 + 28);
    v479 = *(const void **)v475;
    v480 = *(_QWORD *)(v475 + 8);
    v475 += 32;
    sub_1C5968F70(a1, v478, v479, v480, v477, v481);
  }
  v482 = *(_QWORD *)(a1 + 216);
  if (v482)
    sub_1C5968E84(a1, v482, v728, v371);
  v483 = *(_QWORD *)(a1 + 224);
  if (v483)
    sub_1C5968E84(a1, v483, v728, v371);
  v484 = **(_QWORD ***)(a1 + 8);
  v485 = (*(uint64_t (**)(_QWORD *))(*v484 + 80))(v484);
  v486 = v484[4];
  v487 = v484[2];
  sub_1C596B130(v738);
  if (v754 != v756)
    free(v754);
  if (v757 != v759)
    free(v757);
  if (v760 != v762)
    free(v760);
  if (v763 != v765)
    free(v763);
  if (v766 != &v768)
    free(v766);
  if (v769 != v771)
    free(v769);
  if (v772 != v774)
    free(v772);
  if (v775 != v777)
    free(v775);
  if (v778 != v780)
    free(v778);
  return v721 - (v723 + v722) + v486 + v485 - v487;
}

uint64_t *sub_1C5968BD4(uint64_t **a1, _OWORD *a2)
{
  uint64_t *v4;
  uint64_t **v5;
  uint64_t **v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  uint64_t *v10;

  v5 = a1 + 1;
  v4 = a1[1];
  if (!v4)
  {
    v6 = a1 + 1;
LABEL_10:
    v8 = (uint64_t *)operator new(0x48uLL);
    *((_OWORD *)v8 + 2) = *a2;
    *v8 = 0;
    v8[1] = 0;
    v8[7] = 0;
    v8[8] = 0;
    v8[6] = 0;
    v8[2] = (uint64_t)v6;
    *v5 = v8;
    v9 = (uint64_t *)**a1;
    v10 = v8;
    if (v9)
    {
      *a1 = v9;
      v10 = *v5;
    }
    sub_1C4768E74(a1[1], v10);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v8 + 6;
  }
  while (1)
  {
    while (1)
    {
      v6 = (uint64_t **)v4;
      v7 = (uint64_t)(v4 + 4);
      if (!sub_1C4E4FA7C((uint64_t)(a1 + 2), (uint64_t)a2, (uint64_t)(v4 + 4)))
        break;
      v4 = *v6;
      v5 = v6;
      if (!*v6)
        goto LABEL_10;
    }
    if (!sub_1C4E4FA7C((uint64_t)(a1 + 2), v7, (uint64_t)a2))
      break;
    v5 = v6 + 1;
    v4 = v6[1];
    if (!v4)
      goto LABEL_10;
  }
  v8 = *v5;
  if (!*v5)
    goto LABEL_10;
  return v8 + 6;
}

void sub_1C5968CCC(uint64_t a1)
{
  int v2;
  unint64_t v3;
  uint64_t v5;

  v2 = *(_DWORD *)(a1 + 8);
  if ((v2 & 0x200) == 0 && !*(_BYTE *)(a1 + 44) && *(_BYTE *)(a1 + 42))
  {
    v3 = *(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8;
    if ((v2 & 0x1C00) == 0x800 && v3 == 0)
    {
      *(_DWORD *)(a1 + 8) = v2 | 4;
      llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(a1 + 24));
      *(_QWORD *)a1 = *(_QWORD *)a1 & 7 | v5;
    }
  }
}

void sub_1C5968D78(uint64_t a1, const llvm::MCSymbol *a2, unsigned int a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t *BaseSymbol;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD v12[2];
  char v13;
  int v14;
  uint64_t v15[7];

  if (a3 <= 0x18 && ((1 << a3) & 0x10C1006) != 0)
  {
    v15[5] = v3;
    v15[6] = v4;
    v6 = *(_QWORD *)(a1 + 8);
    BaseSymbol = (uint64_t *)llvm::MCAsmLayout::getBaseSymbol(*(uint64_t ***)a1, a2);
    v15[0] = (uint64_t)BaseSymbol;
    v12[0] = 0;
    v8 = (sub_1C6144BDC(*(_QWORD *)(v6 + 120), *(_DWORD *)(v6 + 136), (uint64_t)BaseSymbol, v12) & 1) != 0
       ? v12[0]
       : *(_QWORD *)(v6 + 120) + 16 * *(unsigned int *)(v6 + 136);
    v9 = *(_DWORD *)(v8 + 8);
    v14 = *(_DWORD *)(*(_QWORD *)(a1 + 16) + 8) + 1;
    sub_1C6144658((uint64_t)v12, v6 + 96, v15, &v14);
    if (v13)
    {
      v10 = *(_QWORD *)(a1 + 16);
      v11 = *(unsigned int *)(v10 + 8);
      if (v11 >= *(_DWORD *)(v10 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(v10, v10 + 16, v11 + 1, 4);
        LODWORD(v11) = *(_DWORD *)(v10 + 8);
      }
      *(_DWORD *)(*(_QWORD *)v10 + 4 * v11) = v9;
      ++*(_DWORD *)(v10 + 8);
      sub_1C59693F8(v6, BaseSymbol);
    }
  }
}

void sub_1C5968E84(uint64_t a1, uint64_t a2, llvm::MCAssembler *a3, const llvm::MCAsmLayout *a4)
{
  uint64_t *v8;
  const llvm::MCSection *v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t *v15;
  uint64_t v16[2];
  uint64_t v17;
  int v18;

  v8 = (uint64_t *)(a2 + 16);
  v9 = *(const llvm::MCSection **)(a2 + 16);
  sub_1C596A18C(a1, (uint64_t)v16, *(uint64_t **)a2, *(_QWORD *)(a2 + 8));
  v10 = **(_QWORD ***)(a1 + 8);
  v11 = (*(uint64_t (**)(_QWORD *))(*v10 + 80))(v10);
  v12 = v10[4];
  v13 = v10[2];
  LODWORD(v10) = v17;
  *((_QWORD *)v9 + 30) = v11 + v12 - (v17 + v13);
  llvm::MCAssembler::writeSectionData(a3, **(llvm::raw_ostream ***)(a1 + 8), v9, a4);
  v14 = v18;
  *(_DWORD *)(a2 + 24) = (_DWORD)v10;
  *(_DWORD *)(a2 + 28) = v14;
  sub_1C59699CC(a1, v16);
  v15 = sub_1C596A424(a1 + 232, v8);
  sub_1C5969C04(a1, *v15, 0xCCCCCCCCCCCCCCCDLL * ((v15[1] - *v15) >> 3));
}

uint64_t sub_1C5968F70(uint64_t result, int a2, const void *a3, size_t a4, uint64_t *a5, __n128 a6)
{
  char *v6;
  uint64_t v7;
  uint64_t v11;
  const std::nothrow_t *v12;
  unint64_t v13;
  void *v14;
  BOOL v15;
  void *v16;
  void **p_dst;
  unint64_t v18;
  std::string::size_type v19;
  const std::string::value_type *v20;
  char v21;
  uint64_t v22;
  BOOL v23;
  const std::string::value_type *v24;
  std::string::size_type v25;
  std::string::size_type v26;
  std::string *v27;
  std::string::size_type v28;
  uint64_t *v29;
  size_t v30;
  llvm::raw_ostream *v31;
  char v32;
  char *v33;
  unint64_t v34;
  llvm::raw_ostream *v35;
  char v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  llvm::raw_ostream *v43;
  int v44;
  _BYTE *v45;
  unint64_t v46;
  llvm::raw_ostream *v47;
  char v48;
  char *v49;
  llvm::raw_ostream *v50;
  char v51;
  char *v52;
  unsigned int v53;
  uint64_t v54;
  llvm::raw_ostream *v55;
  uint64_t v56;
  uint64_t v57;
  char v58;
  int v59;
  char v60;
  char *v61;
  void **__dst;
  size_t v64;
  unint64_t v65;
  std::string v66;
  void *__p[2];
  uint64_t v68;
  uint64_t v69[4];

  v7 = *a5;
  v6 = (char *)a5[1];
  if ((char *)*a5 == v6)
    return result;
  v11 = result;
  if ((uint64_t)&v6[-v7] < 5121)
  {
LABEL_6:
    sub_1C596A48C(v7, v6, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v6[-v7] >> 3), 0, 0, a6);
  }
  else
  {
    v12 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
    v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v6[-v7] >> 3);
    while (1)
    {
      v14 = operator new(40 * v13, v12);
      if (v14)
        break;
      v15 = v13 > 1;
      v13 >>= 1;
      if (!v15)
        goto LABEL_6;
    }
    v16 = v14;
    sub_1C596A48C(v7, v6, 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v6[-v7] >> 3), (uint64_t)v14, v13, a6);
    operator delete(v16);
  }
  *((_BYTE *)&v66.__r_.__value_.__s + 23) = 6;
  strcpy((char *)&v66, "reloc.");
  if (a3)
  {
    if (a4 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    if (a4 >= 0x17)
    {
      v22 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((a4 | 7) != 0x17)
        v22 = a4 | 7;
      v18 = v22 + 1;
      p_dst = (void **)operator new(v22 + 1);
      v64 = a4;
      v65 = v18 | 0x8000000000000000;
      __dst = p_dst;
      LODWORD(v18) = a2;
    }
    else
    {
      HIBYTE(v65) = a4;
      p_dst = (void **)&__dst;
      LODWORD(v18) = a2;
      if (!a4)
        goto LABEL_18;
    }
    memmove(p_dst, a3, a4);
LABEL_18:
    *((_BYTE *)p_dst + a4) = 0;
    v21 = HIBYTE(v65);
    v20 = (const std::string::value_type *)__dst;
    v19 = v64;
    goto LABEL_19;
  }
  v19 = 0;
  v20 = 0;
  v21 = 0;
  __dst = 0;
  v64 = 0;
  v65 = 0;
  LODWORD(v18) = a2;
LABEL_19:
  v23 = v21 < 0;
  if (v21 >= 0)
    v24 = (const std::string::value_type *)&__dst;
  else
    v24 = v20;
  v25 = v21 & 0x7F;
  if (v23)
    v26 = v19;
  else
    v26 = v25;
  v27 = std::string::append(&v66, v24, v26);
  v28 = v27->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
  v68 = v28;
  v27->__r_.__value_.__l.__size_ = 0;
  v27->__r_.__value_.__r.__words[2] = 0;
  v27->__r_.__value_.__r.__words[0] = 0;
  if (v68 >= 0)
    v29 = (uint64_t *)__p;
  else
    v29 = (uint64_t *)__p[0];
  if (v68 >= 0)
    v30 = HIBYTE(v68) & 0x7F;
  else
    v30 = (size_t)__p[1];
  sub_1C596A18C(v11, (uint64_t)v69, v29, v30);
  if (SHIBYTE(v68) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v65) < 0)
    operator delete(__dst);
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v66.__r_.__value_.__l.__data_);
  v18 = v18;
  v31 = **(llvm::raw_ostream ***)(v11 + 8);
  do
  {
    v32 = v18 & 0x7F | ((v18 > 0x7F) << 7);
    v33 = (char *)*((_QWORD *)v31 + 4);
    if ((unint64_t)v33 >= *((_QWORD *)v31 + 3))
    {
      v31 = llvm::raw_ostream::write(v31, v32);
    }
    else
    {
      *((_QWORD *)v31 + 4) = v33 + 1;
      *v33 = v32;
    }
    v15 = v18 > 0x7F;
    v18 >>= 7;
  }
  while (v15);
  v34 = 0xCCCCCCCCCCCCCCCDLL * ((a5[1] - *a5) >> 3);
  v35 = **(llvm::raw_ostream ***)(v11 + 8);
  do
  {
    v36 = v34 & 0x7F | ((v34 > 0x7F) << 7);
    v37 = (char *)*((_QWORD *)v35 + 4);
    if ((unint64_t)v37 >= *((_QWORD *)v35 + 3))
    {
      v35 = llvm::raw_ostream::write(v35, v36);
    }
    else
    {
      *((_QWORD *)v35 + 4) = v37 + 1;
      *v37 = v36;
    }
    v15 = v34 > 0x7F;
    v34 >>= 7;
  }
  while (v15);
  v38 = *a5;
  v39 = a5[1];
  if (*a5 != v39)
  {
    do
    {
      v40 = *(_QWORD *)v38;
      v41 = *(_QWORD *)(*(_QWORD *)(v38 + 32) + 240);
      LODWORD(v42) = sub_1C596A0F4(v11, v38);
      v43 = **(llvm::raw_ostream ***)(v11 + 8);
      v44 = *(_DWORD *)(v38 + 24);
      v45 = (_BYTE *)*((_QWORD *)v43 + 4);
      if ((unint64_t)v45 >= *((_QWORD *)v43 + 3))
      {
        llvm::raw_ostream::write(v43, *(_DWORD *)(v38 + 24));
      }
      else
      {
        *((_QWORD *)v43 + 4) = v45 + 1;
        *v45 = v44;
      }
      v46 = v41 + v40;
      v47 = **(llvm::raw_ostream ***)(v11 + 8);
      do
      {
        v48 = v46 & 0x7F | ((v46 > 0x7F) << 7);
        v49 = (char *)*((_QWORD *)v47 + 4);
        if ((unint64_t)v49 >= *((_QWORD *)v47 + 3))
        {
          v47 = llvm::raw_ostream::write(v47, v48);
        }
        else
        {
          *((_QWORD *)v47 + 4) = v49 + 1;
          *v49 = v48;
        }
        v15 = v46 > 0x7F;
        v46 >>= 7;
      }
      while (v15);
      v42 = v42;
      v50 = **(llvm::raw_ostream ***)(v11 + 8);
      do
      {
        v51 = v42 & 0x7F | ((v42 > 0x7F) << 7);
        v52 = (char *)*((_QWORD *)v50 + 4);
        if ((unint64_t)v52 >= *((_QWORD *)v50 + 3))
        {
          v50 = llvm::raw_ostream::write(v50, v51);
        }
        else
        {
          *((_QWORD *)v50 + 4) = v52 + 1;
          *v52 = v51;
        }
        v15 = v42 > 0x7F;
        v42 >>= 7;
      }
      while (v15);
      v53 = *(_DWORD *)(v38 + 24);
      if (v53 <= 0x19 && ((1 << v53) & 0x2E3CB38) != 0)
      {
        v54 = *(_QWORD *)(v38 + 16);
        v55 = **(llvm::raw_ostream ***)(v11 + 8);
        do
        {
          v56 = v54 >> 7;
          if ((unint64_t)v54 < 0x40)
            goto LABEL_68;
          v57 = ((unint64_t)v54 >> 6) & 1;
          if (v56 != -1)
            LODWORD(v57) = 0;
          if ((_DWORD)v57 == 1)
          {
LABEL_68:
            v58 = 0;
            v59 = 1;
          }
          else
          {
            v59 = 0;
            v58 = 0x80;
          }
          v60 = v58 | v54 & 0x7F;
          v61 = (char *)*((_QWORD *)v55 + 4);
          if ((unint64_t)v61 >= *((_QWORD *)v55 + 3))
          {
            v55 = llvm::raw_ostream::write(v55, v60);
          }
          else
          {
            *((_QWORD *)v55 + 4) = v61 + 1;
            *v61 = v60;
          }
          v54 = v56;
        }
        while (!v59);
      }
      v38 += 40;
    }
    while (v38 != v39);
  }
  return sub_1C59699CC(v11, v69);
}

void sub_1C59693F8(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  char v8;
  void *v9[2];
  uint64_t v10;
  void *v11;
  uint64_t v12;
  uint64_t v13;
  void *v14[2];
  uint64_t v15;
  void *v16;
  uint64_t v17;
  int v18;
  void *v19[2];
  uint64_t v20;
  void *v21[2];
  _DWORD v22[6];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v19[0] = &v20;
  v19[1] = (void *)0x100000000;
  v21[0] = v22;
  v21[1] = (void *)0x400000000;
  v22[4] = 0;
  v4 = a2[15];
  if (v4)
  {
    sub_1C62249BC((uint64_t)v19, a2[15]);
    sub_1C62249BC((uint64_t)v21, v4 + 24);
  }
  v5 = *(unsigned int *)(a1 + 312);
  sub_1C62C32C8((uint64_t)v9, v19);
  v13 = v5;
  sub_1C62C40B0((uint64_t)v14, v9);
  v18 = v13;
  sub_1C62C3954((uint64_t)&v7, a1 + 280, (uint64_t)v14, &v18);
  if (v16 != &v17)
    free(v16);
  if (v14[0] != &v15)
    free(v14[0]);
  if (v11 != &v12)
    free(v11);
  if (v9[0] != &v10)
    free(v9[0]);
  if (v8)
    sub_1C59695A0(a1 + 304, (char *)v19);
  v6 = *(_DWORD *)(v7 + 64);
  v14[0] = a2;
  *((_DWORD *)sub_1C6144C70(a1 + 72, (uint64_t *)v14) + 2) = v6;
  if (v21[0] != v22)
    free(v21[0]);
  if (v19[0] != &v20)
    free(v19[0]);
}

uint64_t sub_1C59695A0(uint64_t a1, char *a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  char *v10;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(_QWORD *)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v7 = v4 + 1;
    v8 = v5 + (v4 << 6);
    if (v5 <= (unint64_t)a2 && v8 > (unint64_t)a2)
    {
      v10 = &a2[-v5];
      sub_1C62C4134(a1, v7);
      v5 = *(_QWORD *)a1;
      a2 = &v10[*(_QWORD *)a1];
    }
    else
    {
      sub_1C62C4134(a1, v7);
      v5 = *(_QWORD *)a1;
    }
  }
  result = sub_1C62C32C8(v5 + ((unint64_t)*(unsigned int *)(a1 + 8) << 6), a2);
  ++*(_DWORD *)(a1 + 8);
  return result;
}

void sub_1C5969628(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  *(_QWORD *)a1 = operator new(72 * v8, (std::align_val_t)8uLL);
  if (v4)
  {
    sub_1C62C3EF0(a1, v4, v4 + 72 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  sub_1C62C31F4(a1);
}

char *sub_1C59696CC(uint64_t *a1, uint64_t a2, char *__src, char *a4)
{
  char *v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  size_t v10;
  unint64_t v11;
  unint64_t v12;
  char *v13;
  char *v15;
  _BYTE *v16;
  char v17;
  size_t __n;

  v5 = __src;
  v7 = *a1;
  v8 = a1[1];
  v9 = a2 - *a1;
  v10 = a4 - __src;
  v11 = v8 + a4 - __src;
  v12 = a1[2];
  if (*a1 + v8 == a2)
  {
    if (v12 < v11)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a1, a1 + 3, v11, 1);
      v7 = *a1;
      v8 = a1[1];
    }
    if (v5 != a4)
    {
      memcpy((void *)(v7 + v8), v5, v10);
      v7 = *a1;
      v8 = a1[1];
    }
    a1[1] = v8 + v10;
    return (char *)(v7 + v9);
  }
  else
  {
    if (v12 < v11)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a1, a1 + 3, v11, 1);
      v7 = *a1;
      v8 = a1[1];
    }
    v13 = (char *)(v7 + v9);
    v15 = (char *)(v7 + v8);
    if (v8 - v9 < v10)
    {
      __n = v8 - v9;
      a1[1] = v8 + v10;
      if (v9 != v8)
        memcpy((void *)(v7 + v10 + v9), v13, v8 - v9);
      if (__n)
      {
        v16 = v13;
        do
        {
          v17 = *v5++;
          *v16++ = v17;
          --__n;
        }
        while (__n);
      }
      if (v5 != a4)
        memcpy(v15, v5, a4 - v5);
    }
    else
    {
      sub_1C5042AFC(a1, &v15[-v10], (char *)(v7 + v8));
      if (&v15[-v10] != v13)
        memmove(&v13[v10], v13, &v15[-v10] - v13);
      if (v5 != a4)
        memmove(v13, v5, v10);
    }
  }
  return v13;
}

uint64_t sub_1C596985C(uint64_t a1, uint64_t a2, char a3)
{
  llvm::raw_ostream *v5;
  char *v6;
  _QWORD *v7;
  llvm::raw_ostream *v8;
  _BYTE *v9;
  int v10;
  _BYTE *v11;
  _BYTE *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t result;
  int v16;

  v5 = **(llvm::raw_ostream ***)(a1 + 8);
  v6 = (char *)*((_QWORD *)v5 + 4);
  if ((unint64_t)v6 >= *((_QWORD *)v5 + 3))
  {
    llvm::raw_ostream::write(v5, a3);
  }
  else
  {
    *((_QWORD *)v5 + 4) = v6 + 1;
    *v6 = a3;
  }
  v7 = **(_QWORD ***)(a1 + 8);
  *(_QWORD *)a2 = (*(uint64_t (**)(_QWORD *))(*v7 + 80))(v7) + v7[4] - v7[2];
  v8 = **(llvm::raw_ostream ***)(a1 + 8);
  v9 = (_BYTE *)*((_QWORD *)v8 + 4);
  if ((unint64_t)v9 >= *((_QWORD *)v8 + 3))
  {
    v8 = llvm::raw_ostream::write(v8, 128);
  }
  else
  {
    *((_QWORD *)v8 + 4) = v9 + 1;
    *v9 = 0x80;
  }
  v10 = 3;
  do
  {
    v11 = (_BYTE *)*((_QWORD *)v8 + 4);
    if ((unint64_t)v11 >= *((_QWORD *)v8 + 3))
    {
      v8 = llvm::raw_ostream::write(v8, 128);
    }
    else
    {
      *((_QWORD *)v8 + 4) = v11 + 1;
      *v11 = 0x80;
    }
    --v10;
  }
  while (v10);
  v12 = (_BYTE *)*((_QWORD *)v8 + 4);
  if ((unint64_t)v12 >= *((_QWORD *)v8 + 3))
  {
    llvm::raw_ostream::write(v8, 0);
  }
  else
  {
    *((_QWORD *)v8 + 4) = v12 + 1;
    *v12 = 0;
  }
  v13 = **(_QWORD ***)(a1 + 8);
  *(_QWORD *)(a2 + 16) = (*(uint64_t (**)(_QWORD *))(*v13 + 80))(v13) + v13[4] - v13[2];
  v14 = **(_QWORD ***)(a1 + 8);
  result = (*(uint64_t (**)(_QWORD *))(*v14 + 80))(v14);
  *(_QWORD *)(a2 + 8) = result + v14[4] - v14[2];
  v16 = *(_DWORD *)(a1 + 928);
  *(_DWORD *)(a1 + 928) = v16 + 1;
  *(_DWORD *)(a2 + 24) = v16;
  return result;
}

uint64_t sub_1C59699CC(uint64_t a1, uint64_t *a2)
{
  _QWORD *v4;
  uint64_t result;
  uint64_t v6;
  unint64_t v7;

  v4 = **(_QWORD ***)(a1 + 8);
  result = (*(uint64_t (**)(_QWORD *))(*v4 + 80))(v4);
  v6 = v4[4] - v4[2] + result;
  if (v6)
  {
    v7 = v6 - a2[1];
    if (HIDWORD(v7))
      llvm::report_fatal_error((llvm *)"section size does not fit in a uint32_t", (const char *)1);
    return sub_1C5969A5C(**(_QWORD **)(a1 + 8), v7, *a2);
  }
  return result;
}

uint64_t sub_1C5969A5C(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5;
  int v6;
  unint64_t v7;
  uint64_t v8;
  BOOL v9;
  char v10;
  _BYTE *v11;
  int v12;
  uint64_t v13;
  _BYTE v15[5];

  v5 = 0;
  v6 = 0;
  v7 = a2;
  do
  {
    v8 = v5;
    v9 = v5 < 4 || v7 > 0x7F;
    if (v9)
      v10 = 0x80;
    else
      v10 = 0;
    ++v5;
    v15[v8] = v10 & 0x80 | v7 & 0x7F;
    --v6;
    v9 = v7 > 0x7F;
    v7 >>= 7;
  }
  while (v9);
  v11 = &v15[v5];
  if (v8 <= 3)
  {
    if ((_DWORD)v5 != 4)
    {
      if (v5 <= 3)
        v12 = 3;
      else
        v12 = v5;
      v13 = (v12 + v6);
      memset(v11, 128, v13 + 1);
      v11 = &v15[v5 + 1 + v13];
    }
    *v11 = 0;
    LODWORD(v11) = (_DWORD)v11 + 1;
  }
  return (*(uint64_t (**)(uint64_t, _BYTE *, _QWORD, uint64_t))(*(_QWORD *)a1 + 104))(a1, v15, v11 - v15, a3);
}

llvm::raw_ostream *sub_1C5969B3C(uint64_t a1, char *a2, size_t a3)
{
  llvm::raw_ostream *v6;
  unint64_t v7;
  char v8;
  char *v9;
  BOOL v10;
  llvm::raw_ostream *v11;
  llvm::raw_ostream *result;

  v6 = **(llvm::raw_ostream ***)(a1 + 8);
  v7 = a3;
  do
  {
    v8 = v7 & 0x7F | ((v7 > 0x7F) << 7);
    v9 = (char *)*((_QWORD *)v6 + 4);
    if ((unint64_t)v9 >= *((_QWORD *)v6 + 3))
    {
      v6 = llvm::raw_ostream::write(v6, v8);
    }
    else
    {
      *((_QWORD *)v6 + 4) = v9 + 1;
      *v9 = v8;
    }
    v10 = v7 > 0x7F;
    v7 >>= 7;
  }
  while (v10);
  v11 = **(llvm::raw_ostream ***)(a1 + 8);
  result = (llvm::raw_ostream *)*((_QWORD *)v11 + 4);
  if (a3 > *((_QWORD *)v11 + 3) - (_QWORD)result)
    return llvm::raw_ostream::write(v11, a2, a3);
  if (a3)
  {
    result = (llvm::raw_ostream *)memcpy(result, a2, a3);
    *((_QWORD *)v11 + 4) += a3;
  }
  return result;
}

void sub_1C5969C04(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a3)
    __asm { BR              X9 }
}

uint64_t sub_1C596A0F4(uint64_t a1, uint64_t a2)
{
  unsigned int *v2;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD v8[4];
  __int16 v9;

  if (*(_DWORD *)(a2 + 24) == 6)
  {
    v4 = (uint64_t *)(a2 + 8);
    v5 = a1 + 72;
    if ((sub_1C6144BDC(*(_QWORD *)(a1 + 72), *(_DWORD *)(a1 + 88), *(_QWORD *)(a2 + 8), v8) & 1) == 0)
    {
      v6 = sub_1C62B94EC((_BYTE *)*v4);
      v9 = 1283;
      v8[0] = "symbol not found in type index space: ";
      v8[2] = v6;
      v8[3] = v7;
      llvm::report_fatal_error((uint64_t)v8, 1);
    }
    v2 = (unsigned int *)(sub_1C6144C70(v5, v4) + 1);
  }
  else
  {
    v2 = (unsigned int *)(*(_QWORD *)(a2 + 8) + 16);
  }
  return *v2;
}

uint64_t sub_1C596A18C(uint64_t a1, uint64_t a2, uint64_t *a3, size_t a4)
{
  _QWORD *v8;
  BOOL v9;
  _QWORD *v10;
  uint64_t result;
  _QWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  int v18;
  llvm::raw_ostream *v19;
  char v20;
  char *v21;
  int v22;
  _BYTE *v23;
  _BYTE *v25;
  llvm::raw_ostream *v26;
  uint64_t v27;
  uint64_t v28;
  void (**v29)(llvm::raw_ostream *__hidden);
  int v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t v35;
  int v36;

  sub_1C596985C(a1, a2, 0);
  v8 = **(_QWORD ***)(a1 + 8);
  *(_QWORD *)(a2 + 8) = (*(uint64_t (**)(_QWORD *))(*v8 + 80))(v8) + v8[4] - v8[2];
  if (a4 == 10 && (*a3 == 0x61676E616C635F5FLL ? (v9 = *((unsigned __int16 *)a3 + 4) == 29811) : (v9 = 0), v9))
  {
    v30 = 0;
    v35 = 0;
    v36 = 0;
    v32 = 0;
    v33 = 0;
    v31 = 0;
    v34 = 0;
    v29 = (void (**)(llvm::raw_ostream *__hidden))&off_1E81A7068;
    llvm::raw_ostream::write((llvm::raw_ostream *)&v29, 10);
    v12 = **(_QWORD ***)(a1 + 8);
    v13 = (*(uint64_t (**)(_QWORD *))(*v12 + 80))(v12);
    v14 = v12[4];
    v15 = v12[2];
    v16 = v13 + v14 - v15;
    v17 = v16 + 14;
    v18 = ((v16 + 14) & 0xFFFFFFFC) - v16;
    v19 = **(llvm::raw_ostream ***)(a1 + 8);
    if ((v18 - 10) >= 2)
      v20 = -118;
    else
      v20 = 10;
    v21 = (char *)*((_QWORD *)v19 + 4);
    if ((unint64_t)v21 >= *((_QWORD *)v19 + 3))
    {
      v19 = llvm::raw_ostream::write(v19, v20);
    }
    else
    {
      *((_QWORD *)v19 + 4) = v21 + 1;
      *v21 = v20;
    }
    if ((v18 - 10) >= 2)
    {
      if ((v18 - 11) >= 2)
      {
        v22 = v13 + v14 - v15 - (v17 & 0xFFFFFFFC) + 12;
        do
        {
          v23 = (_BYTE *)*((_QWORD *)v19 + 4);
          if ((unint64_t)v23 >= *((_QWORD *)v19 + 3))
          {
            v19 = llvm::raw_ostream::write(v19, 128);
          }
          else
          {
            *((_QWORD *)v19 + 4) = v23 + 1;
            *v23 = 0x80;
          }
        }
        while (!__CFADD__(v22++, 1));
      }
      v25 = (_BYTE *)*((_QWORD *)v19 + 4);
      if ((unint64_t)v25 >= *((_QWORD *)v19 + 3))
      {
        llvm::raw_ostream::write(v19, 0);
      }
      else
      {
        *((_QWORD *)v19 + 4) = v25 + 1;
        *v25 = 0;
      }
    }
    v26 = **(llvm::raw_ostream ***)(a1 + 8);
    v27 = *((_QWORD *)v26 + 4);
    if ((unint64_t)(*((_QWORD *)v26 + 3) - v27) > 9)
    {
      v28 = *a3;
      *(_WORD *)(v27 + 8) = *((_WORD *)a3 + 4);
      *(_QWORD *)v27 = v28;
      *((_QWORD *)v26 + 4) += 10;
    }
    else
    {
      llvm::raw_ostream::write(v26, (const char *)a3, 0xAuLL);
    }
    v29 = off_1E81A6E70;
    if (v36 == 1 && v31)
      MEMORY[0x1CAA32F9C](v31, 0x1000C8077774924);
  }
  else
  {
    sub_1C5969B3C(a1, (char *)a3, a4);
  }
  v10 = **(_QWORD ***)(a1 + 8);
  result = (*(uint64_t (**)(_QWORD *))(*v10 + 80))(v10);
  *(_QWORD *)(a2 + 16) = result + v10[4] - v10[2];
  return result;
}

_QWORD *sub_1C596A424(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v8;

  v8 = 0;
  v4 = sub_1C4DCDF60(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  v5 = v8;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C5964760(a1, a2, v8);
    v6 = *a2;
    v5[2] = 0;
    v5[3] = 0;
    *v5 = v6;
    v5[1] = 0;
  }
  return v5 + 1;
}

__n128 sub_1C596A48C(uint64_t a1, char *a2, unint64_t a3, uint64_t a4, uint64_t a5, __n128 result)
{
  uint64_t v7;
  char *v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  __n128 *v14;
  uint64_t v15;
  __n128 *v16;
  __n128 *v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v25;
  unint64_t v26;
  _QWORD *v27;
  unint64_t v28;
  __n128 v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  uint64_t v36;
  __int128 v37;
  uint64_t v38;
  uint64_t v39;
  __int128 v40;
  __n128 v41;
  unint64_t v42;

  if (a3 >= 2)
  {
    v7 = a1;
    if (a3 == 2)
    {
      v8 = a2 - 40;
      if (*(_QWORD *)(*((_QWORD *)a2 - 1) + 240) + *((_QWORD *)a2 - 5) < *(_QWORD *)(*(_QWORD *)(a1 + 32) + 240)
                                                                          + *(_QWORD *)a1)
      {
        result = *(__n128 *)a1;
        v9 = *(_OWORD *)(a1 + 16);
        v10 = *(_QWORD *)(a1 + 32);
        v11 = *((_QWORD *)a2 - 1);
        v12 = *(_OWORD *)(a2 - 24);
        *(_OWORD *)a1 = *(_OWORD *)v8;
        *(_OWORD *)(a1 + 16) = v12;
        *(_QWORD *)(a1 + 32) = v11;
        *((_QWORD *)a2 - 1) = v10;
        *(__n128 *)v8 = result;
        *(_OWORD *)(a2 - 24) = v9;
      }
    }
    else if ((uint64_t)a3 > 128)
    {
      v25 = a4;
      v26 = a3 >> 1;
      v27 = (_QWORD *)(a1 + 40 * (a3 >> 1));
      v28 = a3 >> 1;
      if ((uint64_t)a3 <= a5)
      {
        v29 = sub_1C596A794(a1, v27, v28, a4, result);
        v30 = v25 + 40 * v26;
        result.n128_u64[0] = sub_1C596A794(v7 + 40 * (a3 >> 1), a2, a3 - (a3 >> 1), v30, v29).n128_u64[0];
        v31 = v25 + 40 * a3;
        v32 = v30;
        while (v32 != v31)
        {
          if (*(_QWORD *)(*(_QWORD *)(v32 + 32) + 240) + *(_QWORD *)v32 >= *(_QWORD *)(*(_QWORD *)(v25 + 32) + 240)
                                                                            + *(_QWORD *)v25)
          {
            result = *(__n128 *)v25;
            v34 = *(_OWORD *)(v25 + 16);
            *(_QWORD *)(v7 + 32) = *(_QWORD *)(v25 + 32);
            *(__n128 *)v7 = result;
            *(_OWORD *)(v7 + 16) = v34;
            v25 += 40;
          }
          else
          {
            result = *(__n128 *)v32;
            v33 = *(_OWORD *)(v32 + 16);
            *(_QWORD *)(v7 + 32) = *(_QWORD *)(v32 + 32);
            *(__n128 *)v7 = result;
            *(_OWORD *)(v7 + 16) = v33;
            v32 += 40;
          }
          v7 += 40;
          if (v25 == v30)
          {
            if (v32 != v31)
            {
              v35 = 0;
              do
              {
                v36 = v7 + v35;
                result = *(__n128 *)(v32 + v35);
                v37 = *(_OWORD *)(v32 + v35 + 16);
                *(_QWORD *)(v36 + 32) = *(_QWORD *)(v32 + v35 + 32);
                *(__n128 *)v36 = result;
                *(_OWORD *)(v36 + 16) = v37;
                v35 += 40;
              }
              while (v32 + v35 != v31);
            }
            return result;
          }
        }
        if (v25 != v30)
        {
          v38 = 0;
          do
          {
            v39 = v7 + v38;
            result = *(__n128 *)(v25 + v38);
            v40 = *(_OWORD *)(v25 + v38 + 16);
            *(_QWORD *)(v39 + 32) = *(_QWORD *)(v25 + v38 + 32);
            *(__n128 *)v39 = result;
            *(_OWORD *)(v39 + 16) = v40;
            v38 += 40;
          }
          while (v25 + v38 != v30);
        }
      }
      else
      {
        sub_1C596A48C(a1, v27, v28, a4, a5);
        sub_1C596A48C(v7 + 40 * (a3 >> 1), a2, a3 - (a3 >> 1), v25, a5);
        sub_1C596AA74((char *)v7, (char *)(v7 + 40 * (a3 >> 1)), a2, a3 >> 1, a3 - (a3 >> 1), (char *)v25, a5);
      }
    }
    else if ((char *)a1 != a2)
    {
      v14 = (__n128 *)(a1 + 40);
      if ((char *)(a1 + 40) != a2)
      {
        v15 = 0;
        v16 = (__n128 *)a1;
        do
        {
          v17 = v14;
          v18 = v14->n128_u64[0];
          v19 = v16[4].n128_u64[1];
          if (*(_QWORD *)(v19 + 240) + v18 < *(_QWORD *)(v16[2].n128_u64[0] + 240) + v16->n128_u64[0])
          {
            v41 = v16[3];
            v42 = v16[4].n128_u64[0];
            v20 = v15;
            while (1)
            {
              v21 = a1 + v20;
              v22 = *(_OWORD *)(a1 + v20 + 16);
              *(_OWORD *)(v21 + 40) = *(_OWORD *)(a1 + v20);
              *(_OWORD *)(v21 + 56) = v22;
              *(_QWORD *)(v21 + 72) = *(_QWORD *)(a1 + v20 + 32);
              if (!v20)
                break;
              v20 -= 40;
              if (*(_QWORD *)(v19 + 240) + v18 >= *(_QWORD *)(*(_QWORD *)(v21 - 8) + 240) + *(_QWORD *)(v21 - 40))
              {
                v23 = a1 + v20 + 40;
                goto LABEL_15;
              }
            }
            v23 = a1;
LABEL_15:
            *(_QWORD *)v23 = v18;
            result = v41;
            *(__n128 *)(v23 + 8) = v41;
            *(_QWORD *)(v23 + 24) = v42;
            *(_QWORD *)(v23 + 32) = v19;
          }
          v14 = (__n128 *)((char *)v17 + 40);
          v15 += 40;
          v16 = v17;
        }
        while (&v17[2].n128_i8[8] != a2);
      }
    }
  }
  return result;
}

__n128 sub_1C596A794(uint64_t a1, _QWORD *a2, unint64_t a3, uint64_t a4, __n128 result)
{
  uint64_t v5;
  _QWORD *v8;
  __int128 v9;
  __n128 *v10;
  __n128 v11;
  __int128 v12;
  __int128 v13;
  uint64_t v14;
  __int128 v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  __int128 v23;
  uint64_t v24;
  __int128 v25;
  __int128 v26;
  __n128 v27;
  __int128 v28;
  _QWORD *v29;
  _QWORD *v30;
  __int128 v31;
  __int128 v32;
  uint64_t v33;
  uint64_t v34;
  __int128 v35;
  uint64_t v36;
  uint64_t v37;
  __int128 v38;

  if (a3)
  {
    v5 = a4;
    v8 = (_QWORD *)a1;
    if (a3 == 2)
    {
      v10 = (__n128 *)(a2 - 5);
      if (*(_QWORD *)(*(a2 - 1) + 240) + *(a2 - 5) >= *(_QWORD *)(*(_QWORD *)(a1 + 32) + 240) + *(_QWORD *)a1)
      {
        v27 = *(__n128 *)a1;
        v28 = *(_OWORD *)(a1 + 16);
        *(_QWORD *)(a4 + 32) = *(_QWORD *)(a1 + 32);
        *(__n128 *)a4 = v27;
        *(_OWORD *)(a4 + 16) = v28;
        result = *v10;
        v13 = *(_OWORD *)(a2 - 3);
        v14 = *(a2 - 1);
      }
      else
      {
        v11 = *v10;
        v12 = *(_OWORD *)(a2 - 3);
        *(_QWORD *)(a4 + 32) = *(a2 - 1);
        *(__n128 *)a4 = v11;
        *(_OWORD *)(a4 + 16) = v12;
        result = *(__n128 *)a1;
        v13 = *(_OWORD *)(a1 + 16);
        v14 = *(_QWORD *)(a1 + 32);
      }
      *(_QWORD *)(a4 + 72) = v14;
      *(__n128 *)(a4 + 40) = result;
      *(_OWORD *)(a4 + 56) = v13;
    }
    else if (a3 == 1)
    {
      result = *(__n128 *)a1;
      v9 = *(_OWORD *)(a1 + 16);
      *(_QWORD *)(a4 + 32) = *(_QWORD *)(a1 + 32);
      *(__n128 *)a4 = result;
      *(_OWORD *)(a4 + 16) = v9;
    }
    else if ((uint64_t)a3 > 8)
    {
      v29 = (_QWORD *)(a1 + 40 * (a3 >> 1));
      sub_1C596A48C(a1, v29, a3 >> 1, a4, a3 >> 1);
      sub_1C596A48C(&v8[5 * (a3 >> 1)], a2, a3 - (a3 >> 1), v5 + 40 * (a3 >> 1), a3 - (a3 >> 1));
      v30 = &v8[5 * (a3 >> 1)];
      while (v30 != a2)
      {
        if (*(_QWORD *)(v30[4] + 240) + *v30 >= *(_QWORD *)(v8[4] + 240) + *v8)
        {
          result = *(__n128 *)v8;
          v32 = *((_OWORD *)v8 + 1);
          *(_QWORD *)(v5 + 32) = v8[4];
          *(__n128 *)v5 = result;
          *(_OWORD *)(v5 + 16) = v32;
          v8 += 5;
        }
        else
        {
          result = *(__n128 *)v30;
          v31 = *((_OWORD *)v30 + 1);
          *(_QWORD *)(v5 + 32) = v30[4];
          *(__n128 *)v5 = result;
          *(_OWORD *)(v5 + 16) = v31;
          v30 += 5;
        }
        v5 += 40;
        if (v8 == v29)
        {
          if (v30 != a2)
          {
            v33 = 0;
            do
            {
              v34 = v5 + v33 * 8;
              result = *(__n128 *)&v30[v33];
              v35 = *(_OWORD *)&v30[v33 + 2];
              *(_QWORD *)(v34 + 32) = v30[v33 + 4];
              *(__n128 *)v34 = result;
              *(_OWORD *)(v34 + 16) = v35;
              v33 += 5;
            }
            while (&v30[v33] != a2);
          }
          return result;
        }
      }
      if (v8 != v29)
      {
        v36 = 0;
        do
        {
          v37 = v5 + v36 * 8;
          result = *(__n128 *)&v8[v36];
          v38 = *(_OWORD *)&v8[v36 + 2];
          *(_QWORD *)(v37 + 32) = v8[v36 + 4];
          *(__n128 *)v37 = result;
          *(_OWORD *)(v37 + 16) = v38;
          v36 += 5;
        }
        while (&v8[v36] != v29);
      }
    }
    else if ((_QWORD *)a1 != a2)
    {
      result = *(__n128 *)a1;
      v15 = *(_OWORD *)(a1 + 16);
      *(_QWORD *)(a4 + 32) = *(_QWORD *)(a1 + 32);
      *(__n128 *)a4 = result;
      *(_OWORD *)(a4 + 16) = v15;
      v16 = (_QWORD *)(a1 + 40);
      if ((_QWORD *)(a1 + 40) != a2)
      {
        v17 = 0;
        v18 = a4;
        do
        {
          v19 = v8;
          v20 = v18;
          v8 = v16;
          v18 += 40;
          v21 = *(_QWORD *)(v19[9] + 240) + *v16;
          v22 = v18;
          if (v21 < *(_QWORD *)(*(_QWORD *)(v20 + 32) + 240) + *(_QWORD *)v20)
          {
            v23 = *(_OWORD *)(v20 + 16);
            *(_OWORD *)v18 = *(_OWORD *)v20;
            *(_OWORD *)(v18 + 16) = v23;
            *(_QWORD *)(v18 + 32) = *(_QWORD *)(v20 + 32);
            v22 = a4;
            if (v20 != a4)
            {
              v24 = v17;
              while (1)
              {
                v22 = a4 + v24;
                if (*(_QWORD *)(v19[9] + 240) + *v8 >= *(_QWORD *)(*(_QWORD *)(a4 + v24 - 8) + 240)
                                                        + *(_QWORD *)(a4 + v24 - 40))
                  break;
                v25 = *(_OWORD *)(a4 + v24 - 24);
                *(_OWORD *)v22 = *(_OWORD *)(a4 + v24 - 40);
                *(_OWORD *)(v22 + 16) = v25;
                *(_QWORD *)(v22 + 32) = *(_QWORD *)(a4 + v24 - 8);
                v24 -= 40;
                if (!v24)
                {
                  v22 = a4;
                  break;
                }
              }
            }
          }
          result = *(__n128 *)v8;
          v26 = *((_OWORD *)v8 + 1);
          *(_QWORD *)(v22 + 32) = v8[4];
          *(__n128 *)v22 = result;
          *(_OWORD *)(v22 + 16) = v26;
          v16 = v8 + 5;
          v17 += 40;
        }
        while (v8 + 5 != a2);
      }
    }
  }
  return result;
}

char *sub_1C596AA74(char *result, char *a2, char *a3, uint64_t a4, uint64_t a5, char *a6, uint64_t a7)
{
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  unint64_t v17;
  char *v18;
  unint64_t v19;
  char *v20;
  unint64_t v21;
  char *v22;
  char *v23;
  uint64_t v24;
  unint64_t v25;
  unint64_t v26;
  char *v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  char *v32;
  unint64_t v33;
  __int128 v34;
  __int128 v35;
  BOOL v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  char *v44;
  __int128 v45;
  __int128 v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  __int128 v51;
  __int128 v52;
  unint64_t v53;
  BOOL v54;
  char v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  char *v59;
  char *v60;
  uint64_t v61;
  char *v62;
  char *v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  char *v67;
  uint64_t v68;
  char *v69;
  __int128 v70;
  __int128 v71;
  char *v72;
  char *v73;
  unint64_t v74;
  unint64_t v75;
  BOOL v76;
  char *v77;
  __int128 v78;
  __int128 v79;
  uint64_t v80;
  char *v81;
  __int128 v82;
  __int128 v83;
  char *v84;
  __int128 v85;
  __int128 v86;
  __int128 v87;
  __int128 v88;
  char *v89;
  __int128 v90;
  __int128 v91;
  unint64_t v92;
  char *v93;
  __int128 v94;
  __int128 v95;
  char *v96;
  char *v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;

  if (a5)
  {
    v9 = result;
    while (a4 > a7 && a5 > a7)
    {
      if (!a4)
        return result;
      v10 = 0;
      v11 = -a4;
      while (1)
      {
        v12 = &v9[v10];
        if (*(_QWORD *)(*((_QWORD *)a2 + 4) + 240) + *(_QWORD *)a2 < *(_QWORD *)(*(_QWORD *)&v9[v10 + 32] + 240)
                                                                      + *(_QWORD *)&v9[v10])
          break;
        v10 += 40;
        v76 = __CFADD__(v11++, 1);
        if (v76)
          return result;
      }
      v13 = -v11;
      if (-v11 >= a5)
      {
        if (v11 == -1)
        {
          v89 = &v9[v10];
          v123 = *(_QWORD *)&v9[v10 + 32];
          v113 = *(_OWORD *)&v9[v10];
          v118 = *(_OWORD *)&v9[v10 + 16];
          v90 = *(_OWORD *)a2;
          v91 = *((_OWORD *)a2 + 1);
          *((_QWORD *)v89 + 4) = *((_QWORD *)a2 + 4);
          *(_OWORD *)v89 = v90;
          *((_OWORD *)v89 + 1) = v91;
          *((_QWORD *)a2 + 4) = v123;
          *(_OWORD *)a2 = v113;
          *((_OWORD *)a2 + 1) = v118;
          return result;
        }
        if (v11 > 0)
          v13 = 1 - v11;
        v24 = v13 >> 1;
        v18 = &v9[40 * (v13 >> 1) + v10];
        v16 = a3;
        if (a3 != a2)
        {
          v25 = 0xCCCCCCCCCCCCCCCDLL * ((a3 - a2) >> 3);
          v16 = a2;
          do
          {
            v26 = v25 >> 1;
            v27 = &v16[40 * (v25 >> 1)];
            v28 = *(_QWORD *)(*((_QWORD *)v27 + 4) + 240) + *(_QWORD *)v27;
            v29 = v27 + 40;
            v25 += ~(v25 >> 1);
            if (v28 < *(_QWORD *)(*(_QWORD *)&v9[40 * v24 + 32 + v10] + 240) + *(_QWORD *)v18)
              v16 = v29;
            else
              v25 = v26;
          }
          while (v25);
        }
        v15 = 0xCCCCCCCCCCCCCCCDLL * ((v16 - a2) >> 3);
        v23 = &v9[40 * v24 + v10];
      }
      else
      {
        if (a5 >= 0)
          v14 = a5;
        else
          v14 = a5 + 1;
        v15 = v14 >> 1;
        v16 = &a2[40 * (v14 >> 1)];
        if (v12 == a2)
        {
          v23 = a2;
          v18 = a2;
        }
        else
        {
          v17 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - v9 - v10) >> 3);
          v18 = &v9[v10];
          do
          {
            v19 = v17 >> 1;
            v20 = &v18[40 * (v17 >> 1)];
            v21 = *(_QWORD *)(*((_QWORD *)v20 + 4) + 240) + *(_QWORD *)v20;
            v22 = v20 + 40;
            v17 += ~(v17 >> 1);
            if (*(_QWORD *)(*(_QWORD *)&a2[40 * v15 + 32] + 240) + *(_QWORD *)v16 < v21)
              v17 = v19;
            else
              v18 = v22;
          }
          while (v17);
          v23 = v18;
        }
        v24 = 0xCCCCCCCCCCCCCCCDLL * ((v23 - v9 - v10) >> 3);
      }
      v30 = v16;
      if (v18 != a2)
      {
        v30 = v23;
        if (a2 != v16)
        {
          v31 = v18 + 40;
          if (v18 + 40 == a2)
          {
            v120 = *((_QWORD *)v18 + 4);
            v110 = *(_OWORD *)v18;
            v115 = *((_OWORD *)v18 + 1);
            v37 = (char *)(v16 - a2);
            v96 = a6;
            v98 = v23;
            v38 = a3;
            v102 = a5;
            v104 = a7;
            v100 = v15;
            v106 = v24;
            memmove(v18, a2, v16 - a2);
            v23 = v98;
            v15 = v100;
            a7 = v104;
            v24 = v106;
            a5 = v102;
            a3 = v38;
            a6 = v96;
            v30 = &v37[(_QWORD)v18];
            *(_OWORD *)v30 = v110;
            *((_OWORD *)v30 + 1) = v115;
            *((_QWORD *)v30 + 4) = v120;
          }
          else
          {
            v32 = a2 + 40;
            if (a2 + 40 == v16)
            {
              v121 = *((_QWORD *)v16 - 1);
              v111 = *(_OWORD *)(v16 - 40);
              v116 = *(_OWORD *)(v16 - 24);
              v30 = v23 + 40;
              if (v16 - 40 != v18)
              {
                v39 = a6;
                v40 = a3;
                v103 = a5;
                v105 = a7;
                v99 = v23;
                v101 = v15;
                v107 = v24;
                v97 = v23 + 40;
                memmove(v23 + 40, v18, v16 - 40 - v23);
                v30 = v97;
                v23 = v99;
                a7 = v105;
                v24 = v107;
                v15 = v101;
                a5 = v103;
                a3 = v40;
                a6 = v39;
              }
              *((_QWORD *)v18 + 4) = v121;
              *(_OWORD *)v18 = v111;
              *((_OWORD *)v18 + 1) = v116;
            }
            else
            {
              v33 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - v23) >> 3);
              if (v33 == 0xCCCCCCCCCCCCCCCDLL * ((v16 - a2) >> 3))
              {
                do
                {
                  v119 = *((_QWORD *)v31 - 1);
                  v109 = *(_OWORD *)(v31 - 40);
                  v114 = *(_OWORD *)(v31 - 24);
                  v34 = *(_OWORD *)(v32 - 40);
                  v35 = *(_OWORD *)(v32 - 24);
                  *((_QWORD *)v31 - 1) = *((_QWORD *)v32 - 1);
                  *(_OWORD *)(v31 - 24) = v35;
                  *(_OWORD *)(v31 - 40) = v34;
                  *((_QWORD *)v32 - 1) = v119;
                  *(_OWORD *)(v32 - 24) = v114;
                  *(_OWORD *)(v32 - 40) = v109;
                  if (v31 == a2)
                    break;
                  v31 += 40;
                  v36 = v32 == v16;
                  v32 += 40;
                }
                while (!v36);
                v30 = a2;
              }
              else
              {
                v41 = 0xCCCCCCCCCCCCCCCDLL * ((v16 - a2) >> 3);
                v42 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - v23) >> 3);
                do
                {
                  v43 = v42;
                  v42 = v41;
                  v41 = v43 % v41;
                }
                while (v41);
                if (v42)
                {
                  v44 = &v18[40 * v42];
                  do
                  {
                    v45 = *(_OWORD *)(v44 - 40);
                    v46 = *(_OWORD *)(v44 - 24);
                    v47 = *((_QWORD *)v44 - 1);
                    v44 -= 40;
                    v122 = v47;
                    v112 = v45;
                    v117 = v46;
                    v48 = &v44[8 * ((a2 - v23) >> 3)];
                    v49 = v44;
                    do
                    {
                      v50 = v48;
                      v51 = *(_OWORD *)v48;
                      v52 = *((_OWORD *)v48 + 1);
                      *((_QWORD *)v49 + 4) = *((_QWORD *)v48 + 4);
                      *(_OWORD *)v49 = v51;
                      *((_OWORD *)v49 + 1) = v52;
                      v53 = 0xCCCCCCCCCCCCCCCDLL * ((v16 - v48) >> 3);
                      v48 += 8 * ((a2 - v23) >> 3);
                      v54 = __OFSUB__(v33, v53);
                      v56 = v33 - v53;
                      v55 = (v56 < 0) ^ v54;
                      v57 = &v18[40 * v56];
                      if (!v55)
                        v48 = v57;
                      v49 = v50;
                    }
                    while (v48 != v44);
                    *((_QWORD *)v50 + 4) = v122;
                    *(_OWORD *)v50 = v112;
                    *((_OWORD *)v50 + 1) = v117;
                  }
                  while (v44 != v18);
                }
                v30 = &v18[8 * ((v16 - a2) >> 3)];
              }
            }
          }
        }
      }
      a4 = -(v24 + v11);
      v58 = a5 - v15;
      if (v24 + v15 >= a5 - (v24 + v15) - v11)
      {
        v108 = v24;
        v64 = -(v24 + v11);
        v65 = a6;
        v66 = a7;
        v58 = v15;
        v67 = v30;
        result = (char *)sub_1C596AA74(v30, v16, a3, v64, a5 - v15);
        a7 = v66;
        a6 = v65;
        v16 = v18;
        a4 = v108;
        a3 = v67;
      }
      else
      {
        v59 = &v9[v10];
        v60 = a6;
        v61 = a7;
        v62 = a3;
        v63 = v30;
        result = (char *)sub_1C596AA74(v59, v23, v30, v24, v15);
        a7 = v61;
        a3 = v62;
        a6 = v60;
        v12 = v63;
      }
      a5 = v58;
      v9 = v12;
      a2 = v16;
      if (!v58)
        return result;
    }
    if (a4 <= a5)
    {
      if (v9 != a2)
      {
        v80 = 0;
        do
        {
          v81 = &a6[v80];
          v82 = *(_OWORD *)&v9[v80];
          v83 = *(_OWORD *)&v9[v80 + 16];
          *((_QWORD *)v81 + 4) = *(_QWORD *)&v9[v80 + 32];
          *(_OWORD *)v81 = v82;
          *((_OWORD *)v81 + 1) = v83;
          v80 += 40;
        }
        while (&v9[v80] != a2);
        if (v80)
        {
          v84 = a6;
          while (a2 != a3)
          {
            if (*(_QWORD *)(*((_QWORD *)a2 + 4) + 240) + *(_QWORD *)a2 >= *(_QWORD *)(*((_QWORD *)v84 + 4) + 240)
                                                                           + *(_QWORD *)v84)
            {
              v87 = *(_OWORD *)v84;
              v88 = *((_OWORD *)v84 + 1);
              *((_QWORD *)v9 + 4) = *((_QWORD *)v84 + 4);
              *(_OWORD *)v9 = v87;
              *((_OWORD *)v9 + 1) = v88;
              v84 += 40;
            }
            else
            {
              v85 = *(_OWORD *)a2;
              v86 = *((_OWORD *)a2 + 1);
              *((_QWORD *)v9 + 4) = *((_QWORD *)a2 + 4);
              *(_OWORD *)v9 = v85;
              *((_OWORD *)v9 + 1) = v86;
              a2 += 40;
            }
            v9 += 40;
            if (&a6[v80] == v84)
              return result;
          }
          return (char *)memmove(v9, v84, a6 - v84 + v80);
        }
      }
    }
    else if (a2 != a3)
    {
      v68 = 0;
      do
      {
        v69 = &a6[v68];
        v70 = *(_OWORD *)&a2[v68];
        v71 = *(_OWORD *)&a2[v68 + 16];
        *((_QWORD *)v69 + 4) = *(_QWORD *)&a2[v68 + 32];
        *(_OWORD *)v69 = v70;
        *((_OWORD *)v69 + 1) = v71;
        v68 += 40;
      }
      while (&a2[v68] != a3);
      if (v68)
      {
        v72 = &a6[v68];
        v73 = a3 - 40;
        while (a2 != v9)
        {
          v74 = *(_QWORD *)(*((_QWORD *)v72 - 1) + 240) + *((_QWORD *)v72 - 5);
          v75 = *(_QWORD *)(*((_QWORD *)a2 - 1) + 240) + *((_QWORD *)a2 - 5);
          v76 = v74 >= v75;
          if (v74 >= v75)
            v77 = v72 - 40;
          else
            v77 = a2 - 40;
          if (v76)
            v72 -= 40;
          else
            a2 -= 40;
          v78 = *(_OWORD *)v77;
          v79 = *((_OWORD *)v77 + 1);
          *((_QWORD *)v73 + 4) = *((_QWORD *)v77 + 4);
          *(_OWORD *)v73 = v78;
          *((_OWORD *)v73 + 1) = v79;
          v73 -= 40;
          if (v72 == a6)
            return result;
        }
        if (v72 != a6)
        {
          v92 = 0;
          do
          {
            v93 = &v73[v92];
            v94 = *(_OWORD *)&v72[v92 - 40];
            v95 = *(_OWORD *)&v72[v92 - 24];
            *((_QWORD *)v93 + 4) = *(_QWORD *)&v72[v92 - 8];
            *(_OWORD *)v93 = v94;
            *((_OWORD *)v93 + 1) = v95;
            v92 -= 40;
          }
          while (&v72[v92] != a6);
        }
      }
    }
  }
  return result;
}

void sub_1C596B130(_QWORD *a1)
{
  void *v2;

  if (a1)
  {
    sub_1C596B130(*a1);
    sub_1C596B130(a1[1]);
    v2 = (void *)a1[6];
    if (v2)
    {
      a1[7] = v2;
      operator delete(v2);
    }
    operator delete(a1);
  }
}

uint64_t llvm::MCWinCOFFObjectTargetWriter::MCWinCOFFObjectTargetWriter(uint64_t this, int a2)
{
  *(_QWORD *)this = off_1E81844C8;
  *(_DWORD *)(this + 8) = a2;
  return this;
}

uint64_t sub_1C596B198()
{
  return 1;
}

uint64_t sub_1C596B1A0()
{
  return 1;
}

_QWORD *sub_1C596B1A8(_QWORD *a1)
{
  void *v2;
  _QWORD *v3;
  _QWORD *v4;
  void *v5;
  uint64_t *v6;
  uint64_t *v7;
  void *v8;
  uint64_t v9;

  *a1 = &off_1E8184508;
  v2 = (void *)a1[30];
  if (v2)
  {
    a1[31] = v2;
    operator delete(v2);
  }
  MEMORY[0x1CAA32FB4](a1[25], 8);
  MEMORY[0x1CAA32FB4](a1[22], 8);
  MEMORY[0x1CAA32FB4](a1[19], 8);
  MEMORY[0x1CAA32FB4](a1[13], 8);
  v3 = (_QWORD *)a1[10];
  if (v3)
  {
    v4 = (_QWORD *)a1[11];
    v5 = (void *)a1[10];
    if (v4 != v3)
    {
      do
        v4 = sub_1C596E03C(v4 - 1);
      while (v4 != v3);
      v5 = (void *)a1[10];
    }
    a1[11] = v3;
    operator delete(v5);
  }
  v6 = (uint64_t *)a1[7];
  if (v6)
  {
    v7 = (uint64_t *)a1[8];
    v8 = (void *)a1[7];
    if (v7 != v6)
    {
      do
        v7 = sub_1C596E0A8(v7 - 1);
      while (v7 != v6);
      v8 = (void *)a1[7];
    }
    a1[8] = v6;
    operator delete(v8);
  }
  v9 = a1[3];
  a1[3] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  return a1;
}

void sub_1C596B29C(_QWORD *a1)
{
  sub_1C596B1A8(a1);
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C596B2C0(uint64_t a1)
{
  uint64_t *v2;
  uint64_t *v3;
  _QWORD *i;
  _QWORD *v5;
  _QWORD *result;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  uint64_t v17;
  int v18;
  int v19;
  uint64_t v20;
  _QWORD *v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;

  *(_QWORD *)(a1 + 40) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_WORD *)(a1 + 32) = *(_DWORD *)(*(_QWORD *)(a1 + 24) + 8);
  v2 = *(uint64_t **)(a1 + 64);
  v3 = *(uint64_t **)(a1 + 56);
  while (v2 != v3)
    v2 = sub_1C596E0A8(v2 - 1);
  *(_QWORD *)(a1 + 64) = v3;
  v5 = *(_QWORD **)(a1 + 80);
  for (i = *(_QWORD **)(a1 + 88); i != v5; i = sub_1C596E03C(i - 1))
    ;
  *(_QWORD *)(a1 + 88) = v5;
  *(_BYTE *)(a1 + 144) = 0;
  result = sub_1C5961C00((_DWORD *)(a1 + 104));
  v7 = (_QWORD *)(a1 + 152);
  v8 = *(_DWORD *)(a1 + 160);
  if (v8)
  {
    v9 = *(unsigned int *)(a1 + 168);
    if (v9 > 4 * v8 && v9 >= 0x41)
    {
      result = (_QWORD *)*v7;
      v10 = 1 << (33 - __clz(v8 - 1));
      if (v10 <= 64)
        v11 = 64;
      else
        v11 = v10;
      if (v11 == (_DWORD)v9)
      {
        *(_QWORD *)(a1 + 160) = 0;
        v12 = 16 * v9;
        do
        {
          *result = -4096;
          result += 2;
          v12 -= 16;
        }
        while (v12);
      }
      else
      {
        MEMORY[0x1CAA32FB4](result, 8);
        v23 = (4 * v11 / 3u + 1) | ((unint64_t)(4 * v11 / 3u + 1) >> 1);
        v24 = v23 | (v23 >> 2) | ((v23 | (v23 >> 2)) >> 4);
        LODWORD(v24) = (((v24 | (v24 >> 8)) >> 16) | v24 | (v24 >> 8)) + 1;
        *(_DWORD *)(a1 + 168) = v24;
        result = operator new(16 * v24, (std::align_val_t)8uLL);
        *(_QWORD *)(a1 + 152) = result;
        *(_QWORD *)(a1 + 160) = 0;
        v25 = *(unsigned int *)(a1 + 168);
        if ((_DWORD)v25)
        {
          v26 = 16 * v25;
          do
          {
            *result = -4096;
            result += 2;
            v26 -= 16;
          }
          while (v26);
        }
      }
      goto LABEL_24;
    }
  }
  else
  {
    if (!*(_DWORD *)(a1 + 164))
      goto LABEL_24;
    LODWORD(v9) = *(_DWORD *)(a1 + 168);
    if (v9 > 0x40)
    {
      result = (_QWORD *)MEMORY[0x1CAA32FB4](*v7, 8);
      *v7 = 0;
      *(_QWORD *)(a1 + 160) = 0;
      *(_DWORD *)(a1 + 168) = 0;
      goto LABEL_24;
    }
  }
  if ((_DWORD)v9)
  {
    v13 = (_QWORD *)*v7;
    v14 = 16 * v9;
    do
    {
      *v13 = -4096;
      v13 += 2;
      v14 -= 16;
    }
    while (v14);
  }
  *(_QWORD *)(a1 + 160) = 0;
LABEL_24:
  v15 = (_QWORD *)(a1 + 176);
  v16 = *(_DWORD *)(a1 + 184);
  if (v16)
  {
    v17 = *(unsigned int *)(a1 + 192);
    if (v17 > 4 * v16 && v17 >= 0x41)
    {
      result = (_QWORD *)*v15;
      v18 = 1 << (33 - __clz(v16 - 1));
      if (v18 <= 64)
        v19 = 64;
      else
        v19 = v18;
      if (v19 == (_DWORD)v17)
      {
        *(_QWORD *)(a1 + 184) = 0;
        v20 = 16 * v17;
        do
        {
          *result = -4096;
          result += 2;
          v20 -= 16;
        }
        while (v20);
      }
      else
      {
        MEMORY[0x1CAA32FB4](result, 8);
        v27 = (4 * v19 / 3u + 1) | ((unint64_t)(4 * v19 / 3u + 1) >> 1);
        v28 = v27 | (v27 >> 2) | ((v27 | (v27 >> 2)) >> 4);
        LODWORD(v28) = (((v28 | (v28 >> 8)) >> 16) | v28 | (v28 >> 8)) + 1;
        *(_DWORD *)(a1 + 192) = v28;
        result = operator new(16 * v28, (std::align_val_t)8uLL);
        *(_QWORD *)(a1 + 176) = result;
        *(_QWORD *)(a1 + 184) = 0;
        v29 = *(unsigned int *)(a1 + 192);
        if ((_DWORD)v29)
        {
          v30 = 16 * v29;
          do
          {
            *result = -4096;
            result += 2;
            v30 -= 16;
          }
          while (v30);
        }
      }
      return result;
    }
  }
  else
  {
    if (!*(_DWORD *)(a1 + 188))
      return result;
    LODWORD(v17) = *(_DWORD *)(a1 + 192);
    if (v17 > 0x40)
    {
      result = (_QWORD *)MEMORY[0x1CAA32FB4](*v15, 8);
      *v15 = 0;
      *(_QWORD *)(a1 + 184) = 0;
      *(_DWORD *)(a1 + 192) = 0;
      return result;
    }
  }
  if ((_DWORD)v17)
  {
    v21 = (_QWORD *)*v15;
    v22 = 16 * v17;
    do
    {
      *v21 = -4096;
      v21 += 2;
      v22 -= 16;
    }
    while (v22);
  }
  *(_QWORD *)(a1 + 184) = 0;
  return result;
}

void sub_1C596B590(uint64_t a1, uint64_t *a2, llvm::MCAsmLayout *a3)
{
  uint64_t v3;
  unint64_t COFFSection;
  unint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  size_t v9;
  const void *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  uint64_t *v25;
  char *v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  _BYTE *v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  uint64_t v38;
  int v39;
  int v40;
  unsigned int v41;
  unsigned int v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  void **v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  _BYTE **v50;
  _BYTE **v51;
  uint64_t v52;
  uint64_t v53;
  const llvm::MCSymbol *BaseSymbol;
  const llvm::MCSymbol *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  BOOL v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  const char *v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  void **v72;
  unint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  int v76;
  uint64_t v77;
  int v78;
  _QWORD *v79;
  unsigned int v80;
  uint64_t v81;
  int v82;
  __int16 v83;
  int v84;
  unint64_t v85;
  char v87;
  uint64_t v88;
  unint64_t v89;
  unint64_t v90;
  int v91;
  unsigned int v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  uint64_t *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t j;
  char *v102;
  uint64_t v103;
  uint64_t *v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t i;
  int v108;
  void *v110[2];
  uint64_t v111;
  uint64_t v112;
  __int16 v113;
  void *__p[2];
  char v115;
  _QWORD v116[2];
  const char *v117;
  uint64_t v118;
  __int16 v119;
  uint64_t v120[2];
  const char *v121;
  __int16 v122;

  v3 = (uint64_t)a2;
  if (*(_BYTE *)(a1 + 226))
  {
    COFFSection = llvm::MCContext::getCOFFSection(*a2, ".llvm_addrsig", 0xDuLL, 2048, 0, &unk_1C873AB3D, 0, 0, 0xFFFFFFFF, 0);
    *(_QWORD *)(a1 + 232) = COFFSection;
    llvm::MCAssembler::registerSection(v3, COFFSection);
  }
  if (*(_QWORD *)(v3 + 2184) != *(_QWORD *)(v3 + 2192))
  {
    v6 = llvm::MCContext::getCOFFSection(*(_QWORD *)v3, ".llvm.call-graph-profile", 0x18uLL, 2048, 0, &unk_1C873AB3D, 0, 0, 0xFFFFFFFF, 0);
    *(_QWORD *)(a1 + 264) = v6;
    llvm::MCAssembler::registerSection(v3, v6);
  }
  v7 = *(uint64_t **)(v3 + 32);
  v103 = v3;
  for (i = *(_QWORD *)(v3 + 40); v7 != (uint64_t *)i; ++v7)
  {
    v8 = *v7;
    v10 = *(const void **)(*v7 + 200);
    v9 = *(_QWORD *)(*v7 + 208);
    v11 = operator new();
    *(_OWORD *)v11 = 0u;
    *(_OWORD *)(v11 + 16) = 0u;
    *(_QWORD *)(v11 + 32) = 0;
    if (v9 >= 0x7FFFFFFFFFFFFFF8)
LABEL_169:
      abort();
    v12 = v11;
    if (v9 >= 0x17)
    {
      v14 = (v9 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v9 | 7) != 0x17)
        v14 = v9 | 7;
      v15 = v14 + 1;
      v13 = operator new(v14 + 1);
      *(_QWORD *)(v12 + 48) = v9;
      *(_QWORD *)(v12 + 56) = v15 | 0x8000000000000000;
      *(_QWORD *)(v12 + 40) = v13;
    }
    else
    {
      v13 = (void *)(v11 + 40);
      *(_BYTE *)(v11 + 63) = v9;
      if (!v9)
        goto LABEL_14;
    }
    memmove(v13, v10, v9);
LABEL_14:
    *((_BYTE *)v13 + v9) = 0;
    *(_OWORD *)(v12 + 88) = 0u;
    *(_OWORD *)(v12 + 72) = 0u;
    *(_QWORD *)(v12 + 104) = 0;
    *(_QWORD *)(v12 + 112) = v12 + 128;
    *(_QWORD *)(v12 + 120) = 0x100000000;
    v120[0] = v12;
    v17 = *(uint64_t **)(a1 + 64);
    v16 = *(_QWORD *)(a1 + 72);
    if ((unint64_t)v17 >= v16)
    {
      v19 = *(_QWORD **)(a1 + 56);
      v20 = v17 - v19;
      v21 = v20 + 1;
      if ((unint64_t)(v20 + 1) >> 61)
        goto LABEL_169;
      v22 = v16 - (_QWORD)v19;
      if (v22 >> 2 > v21)
        v21 = v22 >> 2;
      if ((unint64_t)v22 >= 0x7FFFFFFFFFFFFFF8)
        v23 = 0x1FFFFFFFFFFFFFFFLL;
      else
        v23 = v21;
      if (v23)
      {
        if (v23 >> 61)
          sub_1C4764EE4();
        v24 = (char *)operator new(8 * v23);
      }
      else
      {
        v24 = 0;
      }
      v25 = (uint64_t *)&v24[8 * v20];
      v26 = &v24[8 * v23];
      v120[0] = 0;
      *v25 = v12;
      v18 = v25 + 1;
      if (v17 == v19)
      {
        *(_QWORD *)(a1 + 56) = v25;
        *(_QWORD *)(a1 + 64) = v18;
        *(_QWORD *)(a1 + 72) = v26;
      }
      else
      {
        do
        {
          v27 = *--v17;
          *v17 = 0;
          *--v25 = v27;
        }
        while (v17 != v19);
        v17 = *(uint64_t **)(a1 + 56);
        v28 = *(uint64_t **)(a1 + 64);
        *(_QWORD *)(a1 + 56) = v25;
        *(_QWORD *)(a1 + 64) = v18;
        *(_QWORD *)(a1 + 72) = v26;
        while (v28 != v17)
          v28 = sub_1C596E0A8(v28 - 1);
      }
      if (v17)
        operator delete(v17);
    }
    else
    {
      v120[0] = 0;
      *v17 = v12;
      v18 = v17 + 1;
    }
    *(_QWORD *)(a1 + 64) = v18;
    sub_1C596E0A8(v120);
    v29 = *(_QWORD *)(*(_QWORD *)(a1 + 64) - 8);
    v30 = sub_1C596E120((_QWORD *)a1, *(const void **)(v8 + 200), *(_QWORD *)(v8 + 208));
    *(_QWORD *)(v29 + 80) = v30;
    *(_QWORD *)(v30 + 112) = v29;
    *(_BYTE *)(v30 + 18) = 3;
    if (*(_DWORD *)(v8 + 240) != 5)
    {
      v31 = *(_BYTE **)(v8 + 232);
      if (v31)
      {
        v32 = sub_1C596E2EC(a1, v31);
        if (*(_QWORD *)(v32 + 112))
        {
          v102 = "two sections have the same comdat";
LABEL_172:
          llvm::report_fatal_error((llvm *)v102, (const char *)1);
        }
        *(_QWORD *)(v32 + 112) = v29;
      }
    }
    sub_1C596E38C(v30 + 64, 1uLL);
    v33 = *(_QWORD **)(v30 + 64);
    v33[1] = 0;
    v33[2] = 0;
    *v33 = 0;
    v34 = *(_QWORD *)(v30 + 64);
    *(_DWORD *)v34 = 2;
    *(_BYTE *)(v34 + 20) = *(_DWORD *)(v8 + 240);
    v35 = *(_DWORD *)(v8 + 224);
    *(_DWORD *)(v29 + 36) = v35;
    v36 = 1 << *(_BYTE *)(v8 + 24);
    if ((int)v36 > 127)
    {
      if ((int)v36 <= 1023)
      {
        if ((_DWORD)v36 == 128)
        {
          v37 = 0x800000;
        }
        else if ((_DWORD)v36 == 256)
        {
          v37 = 9437184;
        }
        else
        {
          v37 = 10485760;
        }
      }
      else if ((int)v36 > 4095)
      {
        if ((_DWORD)v36 == 4096)
          v37 = 13631488;
        else
          v37 = 14680064;
      }
      else if ((_DWORD)v36 == 1024)
      {
        v37 = 11534336;
      }
      else
      {
        v37 = 12582912;
      }
    }
    else
    {
      if ((int)v36 <= 15)
        __asm { BR              X11 }
      if ((_DWORD)v36 == 16)
      {
        v37 = 5242880;
      }
      else if ((_DWORD)v36 == 32)
      {
        v37 = 6291456;
      }
      else
      {
        v37 = 7340032;
      }
    }
    *(_DWORD *)(v29 + 36) = v37 | v35;
    *(_QWORD *)(v29 + 72) = v8;
    v120[0] = v8;
    *sub_1C5306090(a1 + 152, v120) = v29;
    if (*(_BYTE *)(a1 + 225))
    {
      v38 = *(_QWORD *)(v8 + 104);
      if (v38 != v8 + 104)
      {
        llvm::MCAsmLayout::ensureValid(a3, *(const llvm::MCFragment **)(v8 + 104));
        v39 = *(_DWORD *)(v38 + 32);
        llvm::MCAssembler::computeFragmentSize(*(_QWORD *)a3, (uint64_t)a3, v38);
        v41 = v40 + v39;
        if ((v40 + v39) > 0x100000)
        {
          v42 = 1;
          v43 = 0x100000;
          do
          {
            v44 = *(_QWORD *)(v8 + 200);
            v45 = *(_QWORD *)(v8 + 208);
            v113 = 1283;
            v110[0] = "$L";
            v111 = v44;
            v112 = v45;
            v116[0] = v110;
            v117 = "_";
            v119 = 770;
            v3 = v3 & 0xFFFFFFFF00000000 | v42;
            v120[0] = (uint64_t)v116;
            v121 = (const char *)v3;
            v122 = 2050;
            llvm::Twine::str((llvm::Twine *)v120, __p);
            if (v115 >= 0)
              v46 = __p;
            else
              v46 = (void **)__p[0];
            if (v115 >= 0)
              v47 = v115 & 0x7F;
            else
              v47 = (unint64_t)__p[1];
            v48 = sub_1C596E120((_QWORD *)a1, v46, v47);
            *(_QWORD *)(v48 + 112) = v29;
            *(_BYTE *)(v48 + 18) = 6;
            *(_DWORD *)(v48 + 8) = v43;
            v49 = *(unsigned int *)(v29 + 120);
            if (v49 >= *(unsigned int *)(v29 + 124))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(v29 + 112, v29 + 128, v49 + 1, 8);
              v49 = *(unsigned int *)(v29 + 120);
            }
            *(_QWORD *)(*(_QWORD *)(v29 + 112) + 8 * v49) = v48;
            ++*(_DWORD *)(v29 + 120);
            if (v115 < 0)
              operator delete(__p[0]);
            v43 += 0x100000;
            ++v42;
          }
          while (v43 < v41);
        }
      }
    }
  }
  v50 = *(_BYTE ***)(v103 + 56);
  v51 = *(_BYTE ***)(v103 + 64);
  if (v50 != v51)
  {
    while (1)
    {
      v52 = (uint64_t)*v50;
      if (((*v50)[8] & 1) == 0)
        break;
LABEL_148:
      if (++v50 == v51)
        return;
    }
    v53 = sub_1C596E2EC(a1, *v50);
    BaseSymbol = llvm::MCAsmLayout::getBaseSymbol((uint64_t **)a3, (const llvm::MCSymbol *)v52);
    if (BaseSymbol)
    {
      v55 = BaseSymbol;
      v56 = *(_QWORD *)BaseSymbol;
      v57 = *(_QWORD *)BaseSymbol & 0xFFFFFFFFFFFFFFF8;
      if (!v57 && (*((_DWORD *)v55 + 2) & 0x1C00) == 0x800)
      {
        *((_DWORD *)v55 + 2) |= 4u;
        llvm::MCExpr::findAssociatedFragment(*((llvm::MCExpr **)v55 + 3));
        v56 = *(_QWORD *)v55 & 7 | v57;
        *(_QWORD *)v55 = v56;
      }
      if (v57)
      {
        v58 = v56 & 0xFFFFFFFFFFFFFFF8;
        if ((v56 & 0xFFFFFFFFFFFFFFF8) == 0 && (*((_DWORD *)v55 + 2) & 0x1C00) == 0x800)
        {
          *((_DWORD *)v55 + 2) |= 4u;
          llvm::MCExpr::findAssociatedFragment(*((llvm::MCExpr **)v55 + 3));
          *(_QWORD *)v55 = *(_QWORD *)v55 & 7 | v58;
        }
        v120[0] = *(_QWORD *)(v58 + 16);
        v59 = *sub_1C5306090(a1 + 152, v120);
        v60 = *(_QWORD *)(v53 + 112);
        if (v60)
          v61 = v60 == v59;
        else
          v61 = 1;
        if (!v61)
        {
          v102 = "conflicting sections for symbol";
          goto LABEL_172;
        }
      }
      else
      {
        v59 = 0;
      }
      if ((*(_WORD *)(v52 + 12) & 0x100) == 0)
      {
        *(_QWORD *)(v53 + 112) = v59;
        goto LABEL_91;
      }
    }
    else
    {
      if ((*(_WORD *)(v52 + 12) & 0x100) == 0)
      {
        *(_DWORD *)(v53 + 12) = -1;
LABEL_91:
        v62 = v53;
        goto LABEL_122;
      }
      v59 = 0;
    }
    *(_BYTE *)(v53 + 18) = 105;
    *(_QWORD *)(v53 + 112) = 0;
    if ((*(_DWORD *)(v52 + 8) & 0x1C00) == 0x800)
    {
      *(_DWORD *)(v52 + 8) |= 4u;
      v63 = *(_QWORD *)(v52 + 24);
      if (*(_BYTE *)v63 == 2)
      {
        v64 = *(_QWORD *)(v63 + 16);
        v65 = *(_QWORD *)v64 & 0xFFFFFFFFFFFFFFF8;
        if (!v65 && (*(_DWORD *)(v64 + 8) & 0x1C00) == 0x800)
        {
          *(_DWORD *)(v64 + 8) |= 4u;
          llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v64 + 24));
          *(_QWORD *)v64 = *(_QWORD *)v64 & 7 | v65;
        }
        if (!v65 || (*(_BYTE *)(v64 + 8) & 0x10) != 0)
        {
          v66 = sub_1C596E2EC(a1, (_BYTE *)v64);
          if (v66)
          {
            v67 = v66;
            v62 = 0;
            goto LABEL_121;
          }
        }
      }
    }
    if ((*(_BYTE *)v52 & 4) != 0)
    {
      v70 = *(_QWORD **)(v52 - 8);
      v71 = *v70;
      v68 = (const char *)(v70 + 2);
      v69 = v71;
    }
    else
    {
      v68 = 0;
      v69 = 0;
    }
    v119 = 1283;
    v116[0] = ".weak.";
    v117 = v68;
    v118 = v69;
    v120[0] = (uint64_t)v116;
    v121 = ".default";
    v122 = 770;
    llvm::Twine::str((llvm::Twine *)v120, v110);
    if (v111 >= 0)
      v72 = v110;
    else
      v72 = (void **)v110[0];
    if (v111 >= 0)
      v73 = HIBYTE(v111) & 0x7F;
    else
      v73 = (unint64_t)v110[1];
    v74 = sub_1C596E120((_QWORD *)a1, v72, v73);
    v67 = v74;
    if (v59)
      *(_QWORD *)(v74 + 112) = v59;
    else
      *(_DWORD *)(v74 + 12) = -1;
    __p[0] = 0;
    if ((sub_1C4EBC5C8(*(_QWORD *)(a1 + 200), *(_DWORD *)(a1 + 216), v74, __p) & 1) != 0)
    {
LABEL_118:
      if (SHIBYTE(v111) < 0)
        operator delete(v110[0]);
      v62 = v67;
LABEL_121:
      *(_QWORD *)(v53 + 104) = v67;
      sub_1C596E38C(v53 + 64, 1uLL);
      v79 = *(_QWORD **)(v53 + 64);
      *v79 = 0;
      v79[1] = 0;
      v79[2] = 0;
      **(_QWORD **)(v53 + 64) = 0;
      *(_DWORD *)(*(_QWORD *)(v53 + 64) + 8) = 3;
      if (!v62)
      {
LABEL_147:
        *(_QWORD *)(v53 + 128) = v52;
        goto LABEL_148;
      }
LABEL_122:
      v80 = *(_DWORD *)(v52 + 8);
      if ((v80 & 0x10) != 0 && ((v80 >> 10) & 7) - 3 <= 1)
      {
        v81 = *(_QWORD *)(v52 + 24);
      }
      else
      {
        v120[0] = 0;
        v82 = sub_1C59415F0(a3, (uint64_t *)v52, 0, v120);
        LODWORD(v81) = v120[0];
        if (!v82)
          LODWORD(v81) = 0;
      }
      *(_DWORD *)(v62 + 8) = v81;
      *(_WORD *)(v62 + 16) = *(_WORD *)(v52 + 32);
      v83 = *(_WORD *)(v52 + 12);
      *(_BYTE *)(v62 + 18) = v83;
      if ((_BYTE)v83)
        goto LABEL_147;
      v84 = *(_DWORD *)(v52 + 8);
      if ((v84 & 0x10) != 0)
      {
        v87 = 2;
        goto LABEL_146;
      }
      v85 = *(_QWORD *)v52 & 0xFFFFFFFFFFFFFFF8;
      if ((*(_DWORD *)(v52 + 8) & 0x1C00) == 0x800 && v85 == 0)
      {
        *(_DWORD *)(v52 + 8) = v84 | 4;
        llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v52 + 24));
        *(_QWORD *)v52 = *(_QWORD *)v52 & 7 | v88;
        if (v88)
          goto LABEL_134;
      }
      else if (v85)
      {
LABEL_134:
        v87 = 3;
LABEL_146:
        *(_BYTE *)(v62 + 18) = v87;
        goto LABEL_147;
      }
      if ((*(_DWORD *)(v52 + 8) & 0x1C00) == 0x800)
        v87 = 3;
      else
        v87 = 2;
      goto LABEL_146;
    }
    v75 = (uint64_t *)__p[0];
    v116[0] = __p[0];
    v76 = *(_DWORD *)(a1 + 208);
    v77 = *(unsigned int *)(a1 + 216);
    if (4 * v76 + 4 >= (3 * v77))
    {
      v78 = 2 * v77;
    }
    else
    {
      v78 = *(_DWORD *)(a1 + 216);
      if ((int)v77 + ~v76 - *(_DWORD *)(a1 + 212) > v77 >> 3)
      {
LABEL_115:
        *(_DWORD *)(a1 + 208) = v76 + 1;
        if (*v75 != -4096)
          --*(_DWORD *)(a1 + 212);
        *v75 = v67;
        goto LABEL_118;
      }
    }
    v104 = *(uint64_t **)(a1 + 200);
    v89 = (v78 - 1) | ((unint64_t)(v78 - 1) >> 1);
    v90 = v89 | (v89 >> 2) | ((v89 | (v89 >> 2)) >> 4);
    v91 = ((v90 | (v90 >> 8)) >> 16) | v90 | (v90 >> 8);
    if ((v91 + 1) > 0x40)
      v92 = v91 + 1;
    else
      v92 = 64;
    *(_DWORD *)(a1 + 216) = v92;
    v93 = operator new(8 * v92, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 200) = v93;
    if (v104)
    {
      *(_QWORD *)(a1 + 208) = 0;
      v94 = *(unsigned int *)(a1 + 216);
      if ((_DWORD)v94)
      {
        v95 = 8 * v94;
        do
        {
          *v93++ = -4096;
          v95 -= 8;
        }
        while (v95);
      }
      if ((_DWORD)v77)
      {
        v96 = 0;
        v97 = 8 * v77;
        v98 = v104;
        do
        {
          v99 = *v98;
          if ((*v98 | 0x1000) != 0xFFFFFFFFFFFFF000)
          {
            v120[0] = 0;
            v105 = v99;
            v106 = v97;
            v108 = v96;
            sub_1C4EBC5C8(*(_QWORD *)(a1 + 200), *(_DWORD *)(a1 + 216), v99, v120);
            v97 = v106;
            *(_QWORD *)v120[0] = v105;
            v96 = v108 + 1;
            *(_DWORD *)(a1 + 208) = v108 + 1;
          }
          ++v98;
          v97 -= 8;
        }
        while (v97);
      }
      MEMORY[0x1CAA32FB4](v104, 8);
      v93 = *(_QWORD **)(a1 + 200);
      LODWORD(v100) = *(_DWORD *)(a1 + 216);
    }
    else
    {
      *(_QWORD *)(a1 + 208) = 0;
      v100 = *(unsigned int *)(a1 + 216);
      if ((_DWORD)v100)
      {
        for (j = 0; j != v100; ++j)
          v93[j] = -4096;
      }
    }
    sub_1C4EBC5C8((uint64_t)v93, v100, v67, v116);
    v76 = *(_DWORD *)(a1 + 208);
    v75 = (uint64_t *)v116[0];
    goto LABEL_115;
  }
}

void sub_1C596C090(uint64_t a1, uint64_t *a2, llvm::MCAsmLayout *a3, const llvm::MCFragment *a4, uint64_t a5, _QWORD *a6, unint64_t *a7)
{
  uint64_t v9;
  int v10;
  uint64_t v16;
  unint64_t v17;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unint64_t v22;
  _QWORD *v23;
  unint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  _QWORD *v31;
  uint64_t v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t v40;
  _BOOL8 v41;
  int v42;
  unsigned __int16 v43;
  unsigned __int16 v44;
  int v45;
  int v47;
  unint64_t v48;
  char *v49;
  _DWORD *v50;
  char *v51;
  unint64_t v52;
  unint64_t v53;
  unint64_t v54;
  char *v55;
  char *v56;
  __int128 v57;
  _QWORD *v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  const char *v62;
  uint64_t *v63;
  uint64_t v64;
  const char *v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  _QWORD *v69;
  uint64_t *v70;
  uint64_t v71;
  uint64_t v72[2];
  _QWORD *v73;
  uint64_t v74;
  __int16 v75;
  _QWORD *v76[4];
  __int16 v77;

  v9 = *(_QWORD *)(*a6 + 16);
  v10 = *(_DWORD *)(v9 + 8);
  if ((v10 & 8) == 0)
  {
    v37 = *a2;
    v38 = *(_QWORD *)(a5 + 16);
    if ((*(_BYTE *)v9 & 4) != 0)
    {
      v60 = *(uint64_t **)(v9 - 8);
      v61 = *v60;
      v39 = v60 + 2;
      v40 = v61;
    }
    else
    {
      v39 = 0;
      v40 = 0;
    }
    v62 = "symbol '";
    goto LABEL_80;
  }
  if ((v10 & 1) == 0)
    goto LABEL_8;
  v16 = *(_QWORD *)v9;
  v17 = *(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8;
  if ((*(_DWORD *)(v9 + 8) & 0x1C00) != 0x800 || v17 != 0)
  {
    if (v17)
      goto LABEL_8;
    goto LABEL_76;
  }
  *(_DWORD *)(v9 + 8) = v10 | 4;
  llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v9 + 24));
  v16 = *(_QWORD *)v9 & 7 | v66;
  *(_QWORD *)v9 = v16;
  if (!v66)
  {
LABEL_76:
    v37 = *a2;
    v38 = *(_QWORD *)(a5 + 16);
    if ((v16 & 4) != 0)
    {
      v67 = *(uint64_t **)(v9 - 8);
      v68 = *v67;
      v39 = v67 + 2;
      v40 = v68;
    }
    else
    {
      v39 = 0;
      v40 = 0;
    }
    v62 = "assembler label '";
LABEL_80:
    v72[0] = (uint64_t)v62;
    v73 = v39;
    v74 = v40;
    v75 = 1283;
    v65 = "' can not be undefined";
LABEL_81:
    v76[0] = v72;
    v76[2] = v65;
    v77 = 770;
    llvm::MCContext::reportError(v37, v38, (uint64_t)v76);
    return;
  }
LABEL_8:
  v70 = a2;
  v71 = *((_QWORD *)a4 + 2);
  v69 = (_QWORD *)*sub_1C5306090(a1 + 152, &v71);
  v19 = a6[1];
  if (!v19)
  {
    v24 = a6[2];
    goto LABEL_13;
  }
  v20 = *(_QWORD *)(v19 + 16);
  v21 = *(_QWORD *)v20;
  v22 = *(_QWORD *)v20 & 0xFFFFFFFFFFFFFFF8;
  if (!v22 && (*(_DWORD *)(v20 + 8) & 0x1C00) == 0x800)
  {
    *(_DWORD *)(v20 + 8) |= 4u;
    llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v20 + 24));
    v21 = *(_QWORD *)v20 & 7 | v22;
    *(_QWORD *)v20 = v21;
  }
  if (!v22)
  {
    v37 = *v70;
    v38 = *(_QWORD *)(a5 + 16);
    if ((v21 & 4) != 0)
    {
      v63 = *(uint64_t **)(v20 - 8);
      v64 = *v63;
      v58 = v63 + 2;
      v59 = v64;
    }
    else
    {
      v58 = 0;
      v59 = 0;
    }
    v72[0] = (uint64_t)"symbol '";
    v73 = v58;
    v74 = v59;
    v75 = 1283;
    v65 = "' can not be undefined in a subtraction expression";
    goto LABEL_81;
  }
  v76[0] = 0;
  sub_1C59415F0(a3, (uint64_t *)v20, 1, v76);
  v23 = v76[0];
  llvm::MCAsmLayout::ensureValid(a3, a4);
  v24 = *((_QWORD *)a4 + 4) - (_QWORD)v23 + *(unsigned int *)(a5 + 8) + a6[2];
LABEL_13:
  *a7 = v24;
  llvm::MCAsmLayout::ensureValid(a3, a4);
  v25 = *((_DWORD *)a4 + 8);
  v26 = *(_DWORD *)(v9 + 8);
  if ((v26 & 1) != 0)
  {
    v29 = *(_QWORD *)v9 & 0xFFFFFFFFFFFFFFF8;
    if ((*(_DWORD *)(v9 + 8) & 0x1C00) == 0x800 && v29 == 0)
    {
      *(_DWORD *)(v9 + 8) = v26 | 4;
      llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v9 + 24));
      *(_QWORD *)v9 = *(_QWORD *)v9 & 7 | v29;
    }
    v72[0] = *(_QWORD *)(v29 + 16);
    v31 = sub_1C5306090(a1 + 152, v72);
    v32 = *v31;
    v28 = *(_QWORD *)(*v31 + 80);
    v76[0] = 0;
    sub_1C59415F0(a3, (uint64_t *)v9, 1, v76);
    v33 = (unint64_t)v76[0] + *a7;
    *a7 = v33;
    if (*(_BYTE *)(a1 + 225))
    {
      v34 = *(unsigned int *)(v32 + 120);
      if ((_DWORD)v34)
      {
        if (v33 >= 0x100000)
        {
          if (v33 >> 20 <= v34)
            v35 = *(_QWORD *)(v32 + 112) + 8 * (v33 >> 20);
          else
            v35 = *(_QWORD *)(v32 + 112) + 8 * v34;
          v28 = *(_QWORD *)(v35 - 8);
          *a7 = v33 - *(unsigned int *)(v28 + 8);
        }
      }
    }
  }
  else
  {
    v72[0] = v9;
    v27 = *(_QWORD *)(a1 + 176);
    v76[0] = 0;
    if (sub_1C49F21C0(v27, *(_DWORD *)(a1 + 192), v9, v76))
    {
      v28 = v76[0][1];
    }
    else
    {
      v36 = sub_1C5305ED0(a1 + 176, v72, v76[0]);
      v28 = 0;
      *v36 = v9;
      v36[1] = 0;
    }
  }
  v41 = v19 != 0;
  ++*(_DWORD *)(v28 + 120);
  v42 = *(_DWORD *)(a5 + 8);
  v43 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD *, uint64_t, _BOOL8, uint64_t))(**(_QWORD **)(a1 + 24) + 32))(*(_QWORD *)(a1 + 24), *v70, a6, a5, v41, v70[1]);
  v44 = v43;
  v45 = *(unsigned __int16 *)(a1 + 32);
  if (v45 == 34404 && v43 == 4 || v45 == 332 && v43 == 20 || v45 == 452 && v43 == 10 || v45 == 43620 && v43 == 17)
    *a7 += 4;
  if (v45 == 452 && v43 <= 0x15u && ((1 << v43) & 0x340000) != 0)
    *a7 += 4;
  if (*(_DWORD *)(a5 + 12) == 19)
    *a7 = 0;
  if ((*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 24) + 40))(*(_QWORD *)(a1 + 24), a5))
  {
    v47 = v42 + v25;
    v49 = (char *)v69[12];
    v48 = v69[13];
    if ((unint64_t)v49 >= v48)
    {
      v51 = (char *)v69[11];
      v52 = 0xAAAAAAAAAAAAAAABLL * ((v49 - v51) >> 3) + 1;
      if (v52 > 0xAAAAAAAAAAAAAAALL)
        abort();
      v53 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v48 - (_QWORD)v51) >> 3);
      if (2 * v53 > v52)
        v52 = 2 * v53;
      if (v53 >= 0x555555555555555)
        v54 = 0xAAAAAAAAAAAAAAALL;
      else
        v54 = v52;
      if (v54)
      {
        if (v54 > 0xAAAAAAAAAAAAAAALL)
          sub_1C4764EE4();
        v55 = (char *)operator new(24 * v54);
      }
      else
      {
        v55 = 0;
      }
      v56 = &v55[8 * ((v49 - v51) >> 3)];
      *(_DWORD *)v56 = v47;
      *((_DWORD *)v56 + 1) = 0;
      *((_WORD *)v56 + 4) = v44;
      *((_QWORD *)v56 + 2) = v28;
      v50 = v56 + 24;
      if (v49 != v51)
      {
        do
        {
          v57 = *(_OWORD *)(v49 - 24);
          *((_QWORD *)v56 - 1) = *((_QWORD *)v49 - 1);
          *(_OWORD *)(v56 - 24) = v57;
          v56 -= 24;
          v49 -= 24;
        }
        while (v49 != v51);
        v49 = (char *)v69[11];
      }
      v69[11] = v56;
      v69[12] = v50;
      v69[13] = &v55[24 * v54];
      if (v49)
        operator delete(v49);
    }
    else
    {
      *(_DWORD *)v49 = v47;
      *((_DWORD *)v49 + 1) = 0;
      *((_WORD *)v49 + 4) = v44;
      v50 = v49 + 24;
      *((_QWORD *)v49 + 2) = v28;
    }
    v69[12] = v50;
  }
}

BOOL sub_1C596C5FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;

  if ((*(_WORD *)(a3 + 32) & 0xFFF0) == 0x20)
    return 0;
  sub_1C593D6FC(a3, 1);
  return *(_QWORD *)(v6 + 16) == *(_QWORD *)(a4 + 16);
}

uint64_t sub_1C596C64C(uint64_t result)
{
  *(_BYTE *)(result + 226) = 1;
  return result;
}

void sub_1C596C658(_QWORD *a1, uint64_t a2)
{
  unint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  char *v12;
  char *v13;
  uint64_t v14;

  v5 = (_QWORD *)a1[31];
  v4 = a1[32];
  if ((unint64_t)v5 >= v4)
  {
    v7 = (_QWORD *)a1[30];
    v8 = v5 - v7;
    v9 = v8 + 1;
    if ((unint64_t)(v8 + 1) >> 61)
      abort();
    v10 = v4 - (_QWORD)v7;
    if (v10 >> 2 > v9)
      v9 = v10 >> 2;
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8)
      v11 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v11 = v9;
    if (v11)
    {
      if (v11 >> 61)
        sub_1C4764EE4();
      v12 = (char *)operator new(8 * v11);
    }
    else
    {
      v12 = 0;
    }
    v13 = &v12[8 * v8];
    *(_QWORD *)v13 = a2;
    v6 = v13 + 8;
    if (v5 != v7)
    {
      do
      {
        v14 = *--v5;
        *((_QWORD *)v13 - 1) = v14;
        v13 -= 8;
      }
      while (v5 != v7);
      v5 = (_QWORD *)a1[30];
    }
    a1[30] = v13;
    a1[31] = v6;
    a1[32] = &v12[8 * v11];
    if (v5)
      operator delete(v5);
  }
  else
  {
    *v5 = a2;
    v6 = v5 + 1;
  }
  a1[31] = v6;
}

uint64_t sub_1C596C740(uint64_t a1, uint64_t a2, llvm::MCAsmLayout *a3)
{
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  uint64_t v12;
  uint64_t *v13;
  char v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  uint64_t *v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  size_t v31;
  uint64_t v32;
  size_t v33;
  const void *v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t *v42;
  uint64_t *i;
  size_t v44;
  uint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  _DWORD *v52;
  int v53;
  uint64_t *v54;
  uint64_t *v55;
  uint64_t *v56;
  int v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t *v63;
  uint64_t *v64;
  uint64_t v65;
  char v66;
  unint64_t v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  unsigned int v74;
  unint64_t v75;
  _QWORD *v76;
  unsigned int v77;
  void **v78;
  void **v79;
  _QWORD *v80;
  char v81;
  int v82;
  size_t v83;
  size_t v84;
  _QWORD *v85;
  unsigned int v86;
  unint64_t Offset;
  char *v88;
  uint64_t v89;
  uint64_t v90;
  _DWORD *v91;
  unint64_t v92;
  _QWORD *v93;
  unsigned int v94;
  int v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t j;
  uint64_t v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unint64_t v105;
  unint64_t v106;
  int v107;
  uint64_t v108;
  _QWORD *v109;
  unint64_t v110;
  unint64_t *v111;
  unint64_t v112;
  _DWORD *v113;
  int v114;
  int v115;
  int v116;
  uint64_t *v117;
  uint64_t *m;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  const llvm::MCFragment *v122;
  int v123;
  int v124;
  int v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  __int16 v129;
  int v130;
  uint64_t v131;
  int v132;
  time_t v133;
  llvm::raw_ostream *v134;
  llvm::raw_ostream *v135;
  llvm::raw_ostream *v136;
  __int16 v137;
  unsigned int v138;
  llvm::raw_ostream *v139;
  unsigned int v140;
  unsigned int v141;
  llvm::raw_ostream *v142;
  unsigned int v143;
  llvm::raw_ostream *v144;
  llvm::raw_ostream *v145;
  llvm::raw_ostream *v146;
  llvm::raw_ostream *v147;
  unsigned int v148;
  llvm::raw_ostream *v149;
  unsigned int v150;
  unsigned int v151;
  llvm::raw_ostream *v152;
  unsigned int v153;
  unsigned int v154;
  llvm::raw_ostream *v155;
  unsigned int v156;
  size_t v157;
  unsigned int v158;
  llvm::raw_ostream *v159;
  unsigned int v160;
  unsigned int v161;
  llvm::raw_ostream *v162;
  unsigned int v163;
  unsigned int v164;
  llvm::raw_ostream *v165;
  unsigned int v166;
  unsigned int v167;
  llvm::raw_ostream *v168;
  unsigned int v169;
  unsigned int v170;
  llvm::raw_ostream *v171;
  unsigned int v172;
  unsigned int v173;
  llvm::raw_ostream *v174;
  unsigned int v175;
  unsigned int v176;
  unsigned int v177;
  uint64_t *v178;
  uint64_t *v179;
  uint64_t *v180;
  uint64_t *v181;
  uint64_t *v182;
  uint64_t v183;
  uint64_t *v184;
  uint64_t v185;
  unint64_t v186;
  unint64_t v187;
  char *v188;
  uint64_t *v189;
  uint64_t v190;
  unint64_t v191;
  uint64_t v192;
  uint64_t *v193;
  uint64_t v194;
  unsigned int v195;
  llvm::raw_ostream *v196;
  unsigned int v197;
  unsigned int v198;
  llvm::raw_ostream *v199;
  unsigned int v200;
  unsigned int v201;
  llvm::raw_ostream *v202;
  unsigned int v203;
  unsigned int v204;
  llvm::raw_ostream *v205;
  unsigned int v206;
  unsigned int v207;
  llvm::raw_ostream *v208;
  unsigned int v209;
  unsigned int v210;
  llvm::raw_ostream *v211;
  unsigned int v212;
  unsigned int v213;
  llvm::raw_ostream *v214;
  unsigned int v215;
  unsigned int v216;
  llvm::raw_ostream *v217;
  unsigned int v218;
  unsigned int v219;
  llvm::raw_ostream *v220;
  unsigned int v221;
  uint64_t *v222;
  uint64_t *v223;
  const llvm::MCSection **v224;
  const llvm::MCSection **v225;
  const char **v227;
  const char **v228;
  const char *v229;
  unsigned int v230;
  llvm::raw_ostream *v231;
  unsigned int v232;
  unsigned int v233;
  unsigned int v234;
  llvm::raw_ostream *v235;
  size_t v236;
  unsigned int v237;
  unsigned int v238;
  llvm::raw_ostream *v239;
  unsigned int v240;
  llvm::raw_ostream *v241;
  char v242;
  char *v243;
  llvm::raw_ostream *v244;
  char v245;
  char *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unsigned __int16 *v250;
  int v251;
  unsigned int v252;
  llvm::raw_ostream *v253;
  unsigned int v254;
  unsigned int v255;
  llvm::raw_ostream *v256;
  unsigned int v257;
  llvm::raw_ostream *v258;
  char *v259;
  size_t v260;
  llvm::raw_ostream *v261;
  const char *v262;
  size_t v263;
  unsigned int v264;
  llvm::raw_ostream *v265;
  unsigned int v266;
  unsigned int v267;
  llvm::raw_ostream *v268;
  unsigned int v269;
  unsigned int v270;
  llvm::raw_ostream *v271;
  unsigned int v272;
  unsigned int v273;
  llvm::raw_ostream *v274;
  unsigned int v275;
  unsigned int v276;
  llvm::raw_ostream *v277;
  unsigned int v278;
  llvm::raw_ostream *v279;
  char v280;
  char *v281;
  unsigned int v282;
  unsigned int v283;
  _QWORD *v284;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  unint64_t v289;
  const llvm::MCSection *v290;
  char *v291;
  uint64_t v292;
  unsigned int v293;
  const char *v294;
  char v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t *v298;
  uint64_t *k;
  uint64_t v300;
  int v301;
  unint64_t v302;
  char v303;
  char *v304;
  BOOL v305;
  unint64_t v306;
  unint64_t v308;
  char v309;
  char *v310;
  uint64_t v311;
  uint64_t v312;
  _QWORD *v313;
  _QWORD *v314;
  unsigned int v315;
  unsigned int v316;
  unsigned int v317;
  unsigned int v318;
  unsigned int v319;
  unint64_t v320;
  unint64_t v321;
  uint64_t *v322;
  uint64_t v323;
  uint64_t *v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  uint64_t v328;
  const char *v331;
  __int128 v332;
  __int16 v333;
  char v334[8];
  const char *v335;
  __int16 v336;
  int v337;
  char v338[8];
  __int128 v339;
  unint64_t v340;
  char *v341;
  int v342;
  uint64_t v343;

  v343 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD **)(a1 + 8);
  v5 = (*(uint64_t (**)(_QWORD *))(*v4 + 80))(v4);
  v6 = *(_QWORD *)(a1 + 56);
  v7 = *(_QWORD *)(a1 + 64);
  v8 = v7 - v6;
  if ((unint64_t)(v7 - v6) >= 0x3FFFFFFF9)
  {
    v88 = "PE COFF object files can't have more than 2147483647 sections";
LABEL_378:
    llvm::report_fatal_error((llvm *)v88, (const char *)1);
  }
  v9 = v4[4];
  v10 = v4[2];
  *(_BYTE *)(a1 + 224) = v8 > 0x7F7F8;
  *(_DWORD *)(a1 + 36) = v8 >> 3;
  *(_DWORD *)(a1 + 48) = 0;
  v327 = v9;
  v328 = v5;
  v326 = v10;
  if (!*(_DWORD *)(a1 + 208))
    goto LABEL_42;
  v11 = 0;
  v12 = 0;
  *(_WORD *)v338 = 256;
  v13 = *(uint64_t **)(a1 + 88);
  while (1)
  {
    v14 = v11;
    if (*(uint64_t **)(a1 + 80) != v13)
      break;
LABEL_19:
    v11 = 1;
    v12 = 1;
    if ((v14 & 1) != 0)
      goto LABEL_42;
  }
  v15 = v338[v12];
  v16 = *(_QWORD *)(a1 + 200);
  v17 = *(unsigned int *)(a1 + 216);
  v18 = v17 - 1;
  v19 = *(uint64_t **)(a1 + 80);
  while (1)
  {
    v20 = *v19;
    if ((_DWORD)v17)
    {
      v21 = ((v20 >> 4) ^ (v20 >> 9)) & v18;
      v22 = *(_QWORD *)(v16 + 8 * v21);
      if (v22 == v20)
        goto LABEL_18;
      v23 = 1;
      while (v22 != -4096)
      {
        v24 = v21 + v23++;
        v21 = v24 & v18;
        v22 = *(_QWORD *)(v16 + 8 * v21);
        if (v22 == v20)
          goto LABEL_18;
      }
    }
    if (*(_BYTE *)(v20 + 18) != 2)
      goto LABEL_18;
    v25 = *(_QWORD *)(v20 + 112);
    if (v25)
      break;
    if (*(_DWORD *)(v20 + 12) == -1)
      goto LABEL_21;
LABEL_18:
    if (++v19 == v13)
      goto LABEL_19;
  }
  if (!v15 && (*(_BYTE *)(v25 + 37) & 0x10) != 0)
    goto LABEL_18;
LABEL_21:
  if ((_DWORD)v17)
  {
    v26 = 8 * v17;
    v27 = *(_QWORD **)(a1 + 200);
    while ((*v27 | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      ++v27;
      v26 -= 8;
      if (!v26)
        goto LABEL_42;
    }
  }
  else
  {
    v27 = *(_QWORD **)(a1 + 200);
  }
  v28 = (_QWORD *)(v16 + 8 * v17);
  if (v27 != v28)
  {
    v29 = (_QWORD *)*v27;
LABEL_29:
    v30 = v29[4];
    if (v29[5] < (unint64_t)(v30 + 1))
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)(v29 + 3), v29 + 6, v30 + 1, 1);
      v30 = v29[4];
    }
    *(_BYTE *)(v29[3] + v30) = 46;
    v31 = v29[5];
    v32 = v29[4] + 1;
    v29[4] = v32;
    v34 = *(const void **)(v20 + 24);
    v33 = *(_QWORD *)(v20 + 32);
    if (v31 < v33 + v32)
    {
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)(v29 + 3), v29 + 6, v33 + v32, 1);
      v32 = v29[4];
      if (v33)
      {
LABEL_33:
        memcpy((void *)(v29[3] + v32), v34, v33);
        v32 = v29[4];
      }
    }
    else if (v33)
    {
      goto LABEL_33;
    }
    v29[4] = v32 + v33;
    while (++v27 != v28)
    {
      v29 = (_QWORD *)*v27;
      if ((*v27 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        if (v27 != v28)
          goto LABEL_29;
        break;
      }
    }
    v6 = *(_QWORD *)(a1 + 56);
    v7 = *(_QWORD *)(a1 + 64);
  }
LABEL_42:
  if (v6 != v7)
  {
    v35 = 1;
    do
    {
      v36 = *(_QWORD *)(*(_QWORD *)v6 + 80);
      v37 = *(_QWORD *)(v36 + 64);
      if (*(_BYTE *)(v37 + 20) != 5)
      {
        *(_DWORD *)(*(_QWORD *)v6 + 64) = v35;
        *(_DWORD *)(v36 + 12) = v35;
        *(_DWORD *)(v37 + 16) = v35++;
      }
      v6 += 8;
    }
    while (v6 != v7);
    v38 = *(_QWORD *)(a1 + 56);
    v39 = *(_QWORD *)(a1 + 64);
    while (v38 != v39)
    {
      v40 = *(_QWORD *)(*(_QWORD *)v38 + 80);
      v41 = *(_QWORD *)(v40 + 64);
      if (*(_BYTE *)(v41 + 20) == 5)
      {
        *(_DWORD *)(*(_QWORD *)v38 + 64) = v35;
        *(_DWORD *)(v40 + 12) = v35;
        *(_DWORD *)(v41 + 16) = v35++;
      }
      v38 += 8;
    }
  }
  v42 = *(uint64_t **)(a2 + 176);
  for (i = *(uint64_t **)(a2 + 184); v42 != i; v42 += 4)
  {
    if (*(_BYTE *)(a1 + 224))
      v44 = 20;
    else
      v44 = 18;
    if (*((char *)v42 + 23) < 0)
      v45 = v42[1];
    else
      v45 = *((unsigned __int8 *)v42 + 23);
    v46 = (v45 + (unint64_t)v44 - 1) / v44;
    v47 = sub_1C596E120((_QWORD *)a1, ".file", 5uLL);
    *(_DWORD *)(v47 + 12) = -2;
    *(_BYTE *)(v47 + 18) = 103;
    sub_1C596E38C(v47 + 64, v46);
    if (*((char *)v42 + 23) < 0)
      v48 = v42[1];
    else
      LODWORD(v48) = *((unsigned __int8 *)v42 + 23);
    v49 = *(unsigned int *)(v47 + 72);
    if ((_DWORD)v49)
    {
      v50 = 0;
      v51 = 24 * v49;
      v52 = (_DWORD *)(*(_QWORD *)(v47 + 64) + 4);
      while (1)
      {
        *(v52 - 1) = 1;
        v53 = *((char *)v42 + 23);
        v54 = v42;
        if (v48 <= v44)
          break;
        if (v53 < 0)
          v54 = (uint64_t *)*v42;
        memcpy(v52, (char *)v54 + v50, v44);
        v50 += v44;
        v52 += 6;
        LODWORD(v48) = v48 - v44;
        v51 -= 24;
        if (!v51)
          goto LABEL_72;
      }
      if (v53 < 0)
        v54 = (uint64_t *)*v42;
      memcpy(v52, (char *)v54 + v50, v48);
      bzero((char *)v52 + v48, (v44 - v48));
    }
LABEL_72:
    ;
  }
  v55 = *(uint64_t **)(a1 + 80);
  v56 = *(uint64_t **)(a1 + 88);
  if (v55 != v56)
  {
    v57 = *(_DWORD *)(a1 + 48);
    v58 = *(uint64_t **)(a1 + 80);
    do
    {
      v59 = *v58;
      v60 = *(_QWORD *)(*v58 + 112);
      if (v60)
        *(_DWORD *)(v59 + 12) = *(_DWORD *)(v60 + 64);
      *(_DWORD *)(v59 + 56) = v57;
      v61 = *(_QWORD *)(v59 + 128);
      if (v61)
        *(_DWORD *)(v61 + 16) = v57;
      v62 = *(_DWORD *)(v59 + 72);
      *(_BYTE *)(v59 + 19) = v62;
      v57 += 1 + v62;
      ++v58;
    }
    while (v58 != v56);
    *(_DWORD *)(a1 + 48) = v57;
  }
  v63 = *(uint64_t **)(a1 + 56);
  v64 = *(uint64_t **)(a1 + 64);
  if (v63 != v64)
  {
    do
    {
      v65 = *v63;
      v66 = *(_BYTE *)(*v63 + 63);
      if (v66 < 0)
        v67 = *(_QWORD *)(v65 + 48);
      else
        v67 = *(unsigned __int8 *)(*v63 + 63);
      if (v67 >= 9)
      {
        v70 = *(_QWORD **)(v65 + 40);
        v68 = (_QWORD *)(v65 + 40);
        v69 = v70;
        if (v66 >= 0)
          v71 = v68;
        else
          v71 = v69;
        v72 = v68[1];
        if (v66 >= 0)
          v73 = *(unsigned __int8 *)(*v63 + 63);
        else
          v73 = v72;
        v74 = sub_1C5E3DF4C(v71, (uint64_t)v71 + v73);
        llvm::StringTableBuilder::add(a1 + 104, (uint64_t)v71, v73 | ((unint64_t)v74 << 32));
      }
      ++v63;
    }
    while (v63 != v64);
    v55 = *(uint64_t **)(a1 + 80);
    v56 = *(uint64_t **)(a1 + 88);
  }
  for (; v55 != v56; ++v55)
  {
    v75 = *(_QWORD *)(*v55 + 32);
    if (v75 >= 9)
    {
      v76 = *(_QWORD **)(*v55 + 24);
      v77 = sub_1C5E3DF4C(v76, (uint64_t)v76 + v75);
      llvm::StringTableBuilder::add(a1 + 104, (uint64_t)v76, v75 | ((unint64_t)v77 << 32));
    }
  }
  llvm::StringTableBuilder::finalizeStringTable((llvm::StringTableBuilder *)(a1 + 104), 1);
  v78 = *(void ***)(a1 + 56);
  v79 = *(void ***)(a1 + 64);
  while (v78 != v79)
  {
    v80 = *v78;
    v81 = *((_BYTE *)*v78 + 63);
    v82 = v81;
    v83 = v81 & 0x7F;
    if (v82 >= 0)
      v84 = v83;
    else
      v84 = *((_QWORD *)*v78 + 6);
    if (v82 >= 0)
      v85 = v80 + 5;
    else
      v85 = (_QWORD *)v80[5];
    if (v84 > 8)
    {
      v86 = sub_1C5E3DF4C(v85, (uint64_t)v85 + v84);
      Offset = llvm::StringTableBuilder::getOffset(a1 + 104, (uint64_t)v85, v84 | ((unint64_t)v86 << 32));
      if ((llvm::COFF::encodeSectionName((llvm::COFF *)v80, Offset) & 1) == 0)
      {
        v88 = "COFF string table is greater than 64 GB.";
        goto LABEL_378;
      }
    }
    else
    {
      memcpy(*v78, v85, v84);
    }
    ++v78;
  }
  v89 = *(_QWORD *)(a1 + 80);
  v90 = *(_QWORD *)(a1 + 88);
  if (v89 != v90)
  {
    do
    {
      v91 = *(_DWORD **)v89;
      v92 = *(_QWORD *)(*(_QWORD *)v89 + 32);
      if (v92 < 9)
      {
        if (v92 >= *((_QWORD *)v91 + 5))
        {
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)(v91 + 6), v91 + 12, v92 + 1, 1);
          v92 = *((_QWORD *)v91 + 4);
        }
        *(_BYTE *)(*((_QWORD *)v91 + 3) + v92) = 0;
        memcpy(v91, *((const void **)v91 + 3), *((_QWORD *)v91 + 4));
      }
      else
      {
        v93 = (_QWORD *)*((_QWORD *)v91 + 3);
        v94 = sub_1C5E3DF4C(v93, (uint64_t)v93 + v92);
        v95 = llvm::StringTableBuilder::getOffset(a1 + 104, (uint64_t)v93, v92 | ((unint64_t)v94 << 32));
        *v91 = 0;
        v91[1] = v95;
      }
      v89 += 8;
    }
    while (v89 != v90);
    v96 = *(_QWORD *)(a1 + 80);
    v97 = *(_QWORD *)(a1 + 88);
    while (v96 != v97)
    {
      v98 = *(_QWORD *)(*(_QWORD *)v96 + 104);
      if (v98)
        *(_DWORD *)(*(_QWORD *)(*(_QWORD *)v96 + 64) + 4) = *(_DWORD *)(v98 + 56);
      v96 += 8;
    }
  }
  v99 = *(_QWORD *)(a1 + 56);
  for (j = *(_QWORD *)(a1 + 64); v99 != j; v99 += 8)
  {
    if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v99 + 80) + 64) + 20) == 5)
    {
      v101 = *(_QWORD *)(*(_QWORD *)v99 + 72);
      v102 = *(_QWORD *)(v101 + 232);
      v103 = *(_QWORD *)v102;
      v104 = *(_QWORD *)v102 & 0xFFFFFFFFFFFFFFF8;
      if (!v104 && (*(_DWORD *)(v102 + 8) & 0x1C00) == 0x800)
      {
        *(_DWORD *)(v102 + 8) |= 4u;
        llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v102 + 24));
        v103 = *(_QWORD *)v102 & 7 | v104;
        *(_QWORD *)v102 = v103;
      }
      if (!v104)
        goto LABEL_135;
      v105 = v103 & 0xFFFFFFFFFFFFFFF8;
      if ((v103 & 0xFFFFFFFFFFFFFFF8) == 0 && (*(_DWORD *)(v102 + 8) & 0x1C00) == 0x800)
      {
        *(_DWORD *)(v102 + 8) |= 4u;
        llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v102 + 24));
        v103 = *(_QWORD *)v102 & 7 | v105;
        *(_QWORD *)v102 = v103;
      }
      if ((_UNKNOWN *)v105 == llvm::MCSymbol::AbsolutePseudoFragment)
      {
LABEL_135:
        v108 = *(_QWORD *)a2;
        v331 = "cannot make section ";
        v332 = *(_OWORD *)(v101 + 200);
        v333 = 1283;
        *(_QWORD *)v334 = &v331;
        v335 = " associative with sectionless symbol ";
        v336 = 770;
        if ((*(_BYTE *)v102 & 4) != 0)
        {
          v111 = *(unint64_t **)(v102 - 8);
          v112 = *v111;
          v109 = v111 + 2;
          v110 = v112;
        }
        else
        {
          v109 = 0;
          v110 = 0;
        }
        *(_QWORD *)v338 = v334;
        *((_QWORD *)&v339 + 1) = v109;
        v340 = v110;
        LOWORD(v341) = 1282;
        llvm::MCContext::reportError(v108, 0, (uint64_t)v338);
      }
      else
      {
        v106 = v103 & 0xFFFFFFFFFFFFFFF8;
        if ((v103 & 0xFFFFFFFFFFFFFFF8) == 0 && (*(_DWORD *)(v102 + 8) & 0x1C00) == 0x800)
        {
          *(_DWORD *)(v102 + 8) |= 4u;
          llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v102 + 24));
          *(_QWORD *)v102 = *(_QWORD *)v102 & 7 | v106;
        }
        *(_QWORD *)v338 = *(_QWORD *)(v106 + 16);
        v107 = *(_DWORD *)(*sub_1C5306090(a1 + 152, (uint64_t *)v338) + 64);
        if (v107 != -1)
          *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v99 + 80) + 64) + 16) = v107;
      }
    }
  }
  if (*(_BYTE *)(a1 + 226))
  {
    v296 = operator new();
    v297 = *(_QWORD *)(a1 + 232);
    *(_QWORD *)v296 = 0;
    *(_QWORD *)(v296 + 8) = 0;
    *(_QWORD *)(v296 + 16) = v297;
    *(_QWORD *)(v296 + 24) = 0;
    *(_QWORD *)(v296 + 32) = -1;
    *(_DWORD *)(v296 + 44) = 0;
    *(_WORD *)(v296 + 48) = 1;
    *(_BYTE *)(v296 + 50) = 0;
    if (v297)
    {
      v323 = *(_QWORD *)(v297 + 104);
      v322 = (uint64_t *)(v297 + 104);
      *(_QWORD *)v296 = v323;
      *(_QWORD *)(v296 + 8) = v322;
      *(_QWORD *)(v323 + 8) = v296;
      *v322 = v296;
    }
    *(_QWORD *)(v296 + 64) = v296 + 88;
    *(_WORD *)(v296 + 51) = 0;
    *(_QWORD *)(v296 + 56) = 0;
    *(_OWORD *)(v296 + 72) = xmmword_1C677F680;
    *(_QWORD *)(v296 + 120) = v296 + 136;
    *(_QWORD *)(v296 + 128) = 0x400000000;
    *(_DWORD *)(v296 + 40) = 0;
    sub_1C613932C((uint64_t)v338, v296 + 64);
    v298 = *(uint64_t **)(a1 + 240);
    for (k = *(uint64_t **)(a1 + 248); v298 != k; ++v298)
    {
      v300 = *v298;
      v301 = *(_DWORD *)(*v298 + 8);
      if ((v301 & 1) != 0)
      {
        v306 = *(_QWORD *)v300 & 0xFFFFFFFFFFFFFFF8;
        if ((*(_DWORD *)(*v298 + 8) & 0x1C00) == 0x800 && v306 == 0)
        {
          *(_DWORD *)(v300 + 8) = v301 | 4;
          llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v300 + 24));
          *(_QWORD *)v300 = *(_QWORD *)v300 & 7 | v306;
        }
        *(_QWORD *)v334 = *(_QWORD *)(v306 + 16);
        v308 = *(int *)(*(_QWORD *)(*sub_1C5306090(a1 + 152, (uint64_t *)v334) + 80) + 56);
        do
        {
          v309 = v308 & 0x7F | ((v308 > 0x7F) << 7);
          v310 = v341;
          if ((unint64_t)v341 >= v340)
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)v338, v309);
          }
          else
          {
            ++v341;
            *v310 = v309;
          }
          v305 = v308 > 0x7F;
          v308 >>= 7;
        }
        while (v305);
      }
      else
      {
        v302 = *(unsigned int *)(v300 + 16);
        do
        {
          v303 = v302 & 0x7F | ((v302 > 0x7F) << 7);
          v304 = v341;
          if ((unint64_t)v341 >= v340)
          {
            llvm::raw_ostream::write((llvm::raw_ostream *)v338, v303);
          }
          else
          {
            ++v341;
            *v304 = v303;
          }
          v305 = v302 > 0x7F;
          v302 >>= 7;
        }
        while (v305);
      }
    }
    *(_QWORD *)v338 = off_1E81A6E70;
    if (v342 == 1 && *((_QWORD *)&v339 + 1))
      MEMORY[0x1CAA32F9C](*((_QWORD *)&v339 + 1), 0x1000C8077774924);
  }
  if (*(_QWORD *)(a1 + 264))
  {
    v311 = operator new();
    v312 = *(_QWORD *)(a1 + 264);
    *(_QWORD *)v311 = 0;
    *(_QWORD *)(v311 + 8) = 0;
    *(_QWORD *)(v311 + 16) = v312;
    *(_QWORD *)(v311 + 24) = 0;
    *(_QWORD *)(v311 + 32) = -1;
    *(_DWORD *)(v311 + 44) = 0;
    *(_WORD *)(v311 + 48) = 1;
    *(_BYTE *)(v311 + 50) = 0;
    if (v312)
    {
      v325 = *(_QWORD *)(v312 + 104);
      v324 = (uint64_t *)(v312 + 104);
      *(_QWORD *)v311 = v325;
      *(_QWORD *)(v311 + 8) = v324;
      *(_QWORD *)(v325 + 8) = v311;
      *v324 = v311;
    }
    *(_QWORD *)(v311 + 64) = v311 + 88;
    *(_WORD *)(v311 + 51) = 0;
    *(_QWORD *)(v311 + 56) = 0;
    *(_OWORD *)(v311 + 72) = xmmword_1C677F680;
    *(_QWORD *)(v311 + 120) = v311 + 136;
    *(_QWORD *)(v311 + 128) = 0x400000000;
    *(_DWORD *)(v311 + 40) = 0;
    sub_1C613932C((uint64_t)v338, v311 + 64);
    v313 = *(_QWORD **)(a2 + 2184);
    v314 = *(_QWORD **)(a2 + 2192);
    while (v313 != v314)
    {
      v315 = *(_DWORD *)(*(_QWORD *)(*v313 + 16) + 16);
      v316 = *(_DWORD *)(*(_QWORD *)(v313[1] + 16) + 16);
      v317 = bswap32(v315);
      if ((*(_DWORD *)(a1 + 16) - 1) >= 2)
        v315 = v317;
      *(_DWORD *)v334 = v315;
      llvm::raw_ostream::write((llvm::raw_ostream *)v338, v334, 4uLL);
      v318 = bswap32(v316);
      if ((*(_DWORD *)(a1 + 16) - 1) >= 2)
        v319 = v318;
      else
        v319 = v316;
      *(_DWORD *)v334 = v319;
      llvm::raw_ostream::write((llvm::raw_ostream *)v338, v334, 4uLL);
      v320 = v313[2];
      v321 = bswap64(v320);
      if ((*(_DWORD *)(a1 + 16) - 1) >= 2)
        v320 = v321;
      *(_QWORD *)v334 = v320;
      llvm::raw_ostream::write((llvm::raw_ostream *)v338, v334, 8uLL);
      v313 += 3;
    }
    *(_QWORD *)v338 = off_1E81A6E70;
    if (v342 == 1 && *((_QWORD *)&v339 + 1))
      MEMORY[0x1CAA32F9C](*((_QWORD *)&v339 + 1), 0x1000C8077774924);
  }
  v113 = *(_DWORD **)(a1 + 8);
  v114 = (*(uint64_t (**)(_DWORD *))(*(_QWORD *)v113 + 80))(v113) + v113[8] - v113[4];
  if (*(_BYTE *)(a1 + 224))
    v115 = 56;
  else
    v115 = 20;
  v116 = v115 + 40 * *(_DWORD *)(a1 + 36) + v114;
  v117 = *(uint64_t **)(a2 + 32);
  for (m = *(uint64_t **)(a2 + 40); v117 != m; ++v117)
  {
    v119 = *v117;
    *(_QWORD *)v338 = *v117;
    v120 = sub_1C5306090(a1 + 152, (uint64_t *)v338);
    v121 = *v120;
    if (*(_DWORD *)(*v120 + 64) != -1)
    {
      v122 = *(const llvm::MCFragment **)(v119 + 104);
      llvm::MCAsmLayout::ensureValid(a3, v122);
      v123 = *((_DWORD *)v122 + 8);
      llvm::MCAssembler::computeFragmentSize(*(_QWORD *)a3, (uint64_t)a3, (uint64_t)v122);
      v125 = v124 + v123;
      *(_DWORD *)(v121 + 16) = v124 + v123;
      if ((*(_BYTE *)(v121 + 36) & 0x80) == 0)
      {
        *(_DWORD *)(v121 + 20) = v116;
        v116 += v125;
      }
      v126 = *(_QWORD *)(v121 + 88);
      v127 = *(_QWORD *)(v121 + 96);
      if (v126 != v127)
      {
        v128 = 0xAAAAAAAAAAAAAAABLL * ((v127 - v126) >> 3);
        if (v128 > 0xFFFE)
          v129 = -1;
        else
          v129 = -21845 * ((v127 - v126) >> 3);
        *(_WORD *)(v121 + 32) = v129;
        *(_DWORD *)(v121 + 24) = v116;
        do
        {
          *(_DWORD *)(v126 + 4) = *(_DWORD *)(*(_QWORD *)(v126 + 16) + 56);
          v126 += 24;
        }
        while (v126 != v127);
        if (v128 <= 0xFFFE)
          v130 = v116;
        else
          v130 = v116 + 10;
        v116 = 10 * v128 + v130;
      }
      v131 = *(_QWORD *)(*(_QWORD *)(v121 + 80) + 64);
      *(_DWORD *)(v131 + 4) = v125;
      *(_WORD *)(v131 + 8) = *(_WORD *)(v121 + 32);
      *(_WORD *)(v131 + 10) = *(_WORD *)(v121 + 34);
    }
  }
  *(_DWORD *)(a1 + 44) = v116;
  if ((*(_BYTE *)(a2 + 500) & 4) != 0)
  {
    v133 = time(0);
    v132 = -1;
    if ((unint64_t)v133 < 0xFFFFFFFF)
      v132 = v133;
    if (v133 < 0)
      v132 = -1;
  }
  else
  {
    v132 = 0;
  }
  *(_DWORD *)(a1 + 40) = v132;
  if (*(_BYTE *)(a1 + 224))
  {
    v134 = *(llvm::raw_ostream **)(a1 + 8);
    *(_WORD *)v338 = 0;
    llvm::raw_ostream::write(v134, v338, 2uLL);
    v135 = *(llvm::raw_ostream **)(a1 + 8);
    *(_WORD *)v338 = -1;
    llvm::raw_ostream::write(v135, v338, 2uLL);
    v136 = *(llvm::raw_ostream **)(a1 + 8);
    if ((*(_DWORD *)(a1 + 16) - 1) >= 2)
      v137 = 512;
    else
      v137 = 2;
    *(_WORD *)v338 = v137;
    llvm::raw_ostream::write(v136, v338, 2uLL);
    v138 = *(unsigned __int16 *)(a1 + 32);
    v139 = *(llvm::raw_ostream **)(a1 + 8);
    v140 = bswap32(v138) >> 16;
    if ((*(_DWORD *)(a1 + 16) - 1) >= 2)
      LOWORD(v138) = v140;
    *(_WORD *)v338 = v138;
    llvm::raw_ostream::write(v139, v338, 2uLL);
    v141 = *(_DWORD *)(a1 + 40);
    v142 = *(llvm::raw_ostream **)(a1 + 8);
    v143 = bswap32(v141);
    if ((*(_DWORD *)(a1 + 16) - 1) >= 2)
      v141 = v143;
    *(_DWORD *)v338 = v141;
    llvm::raw_ostream::write(v142, v338, 4uLL);
    llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 8), byte_1C8663B10, 0x10uLL);
    v144 = *(llvm::raw_ostream **)(a1 + 8);
    *(_DWORD *)v338 = 0;
    llvm::raw_ostream::write(v144, v338, 4uLL);
    v145 = *(llvm::raw_ostream **)(a1 + 8);
    *(_DWORD *)v338 = 0;
    llvm::raw_ostream::write(v145, v338, 4uLL);
    v146 = *(llvm::raw_ostream **)(a1 + 8);
    *(_DWORD *)v338 = 0;
    llvm::raw_ostream::write(v146, v338, 4uLL);
    v147 = *(llvm::raw_ostream **)(a1 + 8);
    *(_DWORD *)v338 = 0;
    llvm::raw_ostream::write(v147, v338, 4uLL);
    v148 = *(_DWORD *)(a1 + 36);
    v149 = *(llvm::raw_ostream **)(a1 + 8);
    v150 = bswap32(v148);
    if ((*(_DWORD *)(a1 + 16) - 1) >= 2)
      v148 = v150;
    *(_DWORD *)v338 = v148;
    llvm::raw_ostream::write(v149, v338, 4uLL);
    v151 = *(_DWORD *)(a1 + 44);
    v152 = *(llvm::raw_ostream **)(a1 + 8);
    v153 = bswap32(v151);
    if ((*(_DWORD *)(a1 + 16) - 1) >= 2)
      v151 = v153;
    *(_DWORD *)v338 = v151;
    llvm::raw_ostream::write(v152, v338, 4uLL);
    v154 = *(_DWORD *)(a1 + 48);
    v155 = *(llvm::raw_ostream **)(a1 + 8);
    v156 = bswap32(v154);
    if ((*(_DWORD *)(a1 + 16) - 1) >= 2)
      v154 = v156;
    *(_DWORD *)v338 = v154;
    v157 = 4;
  }
  else
  {
    v158 = *(unsigned __int16 *)(a1 + 32);
    v159 = *(llvm::raw_ostream **)(a1 + 8);
    v160 = bswap32(v158) >> 16;
    if ((*(_DWORD *)(a1 + 16) - 1) >= 2)
      LOWORD(v158) = v160;
    *(_WORD *)v338 = v158;
    llvm::raw_ostream::write(v159, v338, 2uLL);
    v161 = *(unsigned __int16 *)(a1 + 36);
    v162 = *(llvm::raw_ostream **)(a1 + 8);
    v163 = bswap32(v161) >> 16;
    if ((*(_DWORD *)(a1 + 16) - 1) >= 2)
      LOWORD(v161) = v163;
    *(_WORD *)v338 = v161;
    llvm::raw_ostream::write(v162, v338, 2uLL);
    v164 = *(_DWORD *)(a1 + 40);
    v165 = *(llvm::raw_ostream **)(a1 + 8);
    v166 = bswap32(v164);
    if ((*(_DWORD *)(a1 + 16) - 1) >= 2)
      v164 = v166;
    *(_DWORD *)v338 = v164;
    llvm::raw_ostream::write(v165, v338, 4uLL);
    v167 = *(_DWORD *)(a1 + 44);
    v168 = *(llvm::raw_ostream **)(a1 + 8);
    v169 = bswap32(v167);
    if ((*(_DWORD *)(a1 + 16) - 1) >= 2)
      v167 = v169;
    *(_DWORD *)v338 = v167;
    llvm::raw_ostream::write(v168, v338, 4uLL);
    v170 = *(_DWORD *)(a1 + 48);
    v171 = *(llvm::raw_ostream **)(a1 + 8);
    v172 = bswap32(v170);
    if ((*(_DWORD *)(a1 + 16) - 1) >= 2)
      v170 = v172;
    *(_DWORD *)v338 = v170;
    llvm::raw_ostream::write(v171, v338, 4uLL);
    v173 = *(unsigned __int16 *)(a1 + 52);
    v174 = *(llvm::raw_ostream **)(a1 + 8);
    v175 = bswap32(v173) >> 16;
    if ((*(_DWORD *)(a1 + 16) - 1) >= 2)
      LOWORD(v173) = v175;
    *(_WORD *)v338 = v173;
    llvm::raw_ostream::write(v174, v338, 2uLL);
    v176 = *(unsigned __int16 *)(a1 + 54);
    v155 = *(llvm::raw_ostream **)(a1 + 8);
    v177 = bswap32(v176) >> 16;
    if ((*(_DWORD *)(a1 + 16) - 1) >= 2)
      LOWORD(v176) = v177;
    *(_WORD *)v338 = v176;
    v157 = 2;
  }
  llvm::raw_ostream::write(v155, v338, v157);
  v178 = *(uint64_t **)(a1 + 56);
  v179 = *(uint64_t **)(a1 + 64);
  if (v178 == v179)
  {
    v182 = 0;
    v184 = 0;
  }
  else
  {
    v180 = 0;
    v181 = 0;
    v182 = 0;
    do
    {
      v183 = *v178;
      if (v181 >= v180)
      {
        v185 = v181 - v182;
        v186 = v185 + 1;
        if ((unint64_t)(v185 + 1) >> 61)
          abort();
        if (((char *)v180 - (char *)v182) >> 2 > v186)
          v186 = ((char *)v180 - (char *)v182) >> 2;
        if ((unint64_t)((char *)v180 - (char *)v182) >= 0x7FFFFFFFFFFFFFF8)
          v187 = 0x1FFFFFFFFFFFFFFFLL;
        else
          v187 = v186;
        if (v187)
        {
          if (v187 >> 61)
            sub_1C4764EE4();
          v188 = (char *)operator new(8 * v187);
        }
        else
        {
          v188 = 0;
        }
        v189 = (uint64_t *)&v188[8 * v185];
        *v189 = v183;
        v184 = v189 + 1;
        while (v181 != v182)
        {
          v190 = *--v181;
          *--v189 = v190;
        }
        v180 = (uint64_t *)&v188[8 * v187];
        if (v182)
          operator delete(v182);
        v182 = v189;
      }
      else
      {
        *v181 = v183;
        v184 = v181 + 1;
      }
      ++v178;
      v181 = v184;
    }
    while (v178 != v179);
  }
  v191 = 126 - 2 * __clz(v184 - v182);
  if (v184 == v182)
    v192 = 0;
  else
    v192 = v191;
  sub_1C596E41C(v182, v184, v192, 1);
  if (v184 != v182)
  {
    v193 = v182;
    do
    {
      v194 = *v193;
      if (*(_DWORD *)(*v193 + 64) != -1)
      {
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(v194 + 96) - *(_QWORD *)(v194 + 88)) >> 3) >= 0xFFFF)
          *(_DWORD *)(v194 + 36) |= 0x1000000u;
        llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 8), (const char *)v194, 8uLL);
        v195 = *(_DWORD *)(v194 + 8);
        v196 = *(llvm::raw_ostream **)(a1 + 8);
        v197 = bswap32(v195);
        if ((*(_DWORD *)(a1 + 16) - 1) >= 2)
          v195 = v197;
        *(_DWORD *)v338 = v195;
        llvm::raw_ostream::write(v196, v338, 4uLL);
        v198 = *(_DWORD *)(v194 + 12);
        v199 = *(llvm::raw_ostream **)(a1 + 8);
        v200 = bswap32(v198);
        if ((*(_DWORD *)(a1 + 16) - 1) >= 2)
          v198 = v200;
        *(_DWORD *)v338 = v198;
        llvm::raw_ostream::write(v199, v338, 4uLL);
        v201 = *(_DWORD *)(v194 + 16);
        v202 = *(llvm::raw_ostream **)(a1 + 8);
        v203 = bswap32(v201);
        if ((*(_DWORD *)(a1 + 16) - 1) >= 2)
          v201 = v203;
        *(_DWORD *)v338 = v201;
        llvm::raw_ostream::write(v202, v338, 4uLL);
        v204 = *(_DWORD *)(v194 + 20);
        v205 = *(llvm::raw_ostream **)(a1 + 8);
        v206 = bswap32(v204);
        if ((*(_DWORD *)(a1 + 16) - 1) >= 2)
          v204 = v206;
        *(_DWORD *)v338 = v204;
        llvm::raw_ostream::write(v205, v338, 4uLL);
        v207 = *(_DWORD *)(v194 + 24);
        v208 = *(llvm::raw_ostream **)(a1 + 8);
        v209 = bswap32(v207);
        if ((*(_DWORD *)(a1 + 16) - 1) >= 2)
          v207 = v209;
        *(_DWORD *)v338 = v207;
        llvm::raw_ostream::write(v208, v338, 4uLL);
        v210 = *(_DWORD *)(v194 + 28);
        v211 = *(llvm::raw_ostream **)(a1 + 8);
        v212 = bswap32(v210);
        if ((*(_DWORD *)(a1 + 16) - 1) >= 2)
          v210 = v212;
        *(_DWORD *)v338 = v210;
        llvm::raw_ostream::write(v211, v338, 4uLL);
        v213 = *(unsigned __int16 *)(v194 + 32);
        v214 = *(llvm::raw_ostream **)(a1 + 8);
        v215 = bswap32(v213) >> 16;
        if ((*(_DWORD *)(a1 + 16) - 1) >= 2)
          LOWORD(v213) = v215;
        *(_WORD *)v338 = v213;
        llvm::raw_ostream::write(v214, v338, 2uLL);
        v216 = *(unsigned __int16 *)(v194 + 34);
        v217 = *(llvm::raw_ostream **)(a1 + 8);
        v218 = bswap32(v216) >> 16;
        if ((*(_DWORD *)(a1 + 16) - 1) >= 2)
          LOWORD(v216) = v218;
        *(_WORD *)v338 = v216;
        llvm::raw_ostream::write(v217, v338, 2uLL);
        v219 = *(_DWORD *)(v194 + 36);
        v220 = *(llvm::raw_ostream **)(a1 + 8);
        v221 = bswap32(v219);
        if ((*(_DWORD *)(a1 + 16) - 1) >= 2)
          v219 = v221;
        *(_DWORD *)v338 = v219;
        llvm::raw_ostream::write(v220, v338, 4uLL);
      }
      ++v193;
    }
    while (v193 != v184);
  }
  if (v182)
    operator delete(v182);
  v222 = *(uint64_t **)(a1 + 56);
  v223 = *(uint64_t **)(a1 + 64);
  v225 = *(const llvm::MCSection ***)(a2 + 32);
  v224 = *(const llvm::MCSection ***)(a2 + 40);
  if (v222 != v223 && v225 != v224)
  {
    do
    {
      v286 = *v222;
      if (*(_DWORD *)(*v222 + 64) != -1)
      {
        if (*(_DWORD *)(v286 + 20))
        {
          v290 = *v225;
          *(_QWORD *)v338 = &v340;
          v339 = xmmword_1C85F20B0;
          sub_1C613932C((uint64_t)v334, (uint64_t)v338);
          llvm::MCAssembler::writeSectionData((llvm::MCAssembler *)a2, (llvm::raw_ostream *)v334, v290, a3);
          llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 8), *(const char **)v338, v339);
          v291 = *(char **)v338;
          v292 = v339;
          if ((_QWORD)v339)
          {
            v293 = 0;
            v294 = *(const char **)v338;
            do
            {
              v295 = *v294++;
              v293 = dword_1C866F364[(v295 ^ v293)] ^ (v293 >> 8);
              --v292;
            }
            while (v292);
          }
          else
          {
            v293 = 0;
          }
          *(_QWORD *)v334 = off_1E81A6E70;
          if (v337 == 1 && v335)
          {
            MEMORY[0x1CAA32F9C](v335, 0x1000C8077774924);
            v291 = *(char **)v338;
          }
          if (v291 != (char *)&v340)
            free(v291);
          *(_QWORD *)v338 = v290;
          *(_DWORD *)(*(_QWORD *)(*(_QWORD *)(*sub_1C5306090(a1 + 152, (uint64_t *)v338) + 80) + 64) + 12) = v293;
        }
        v288 = *(_QWORD *)(v286 + 88);
        v287 = *(_QWORD *)(v286 + 96);
        if (v288 != v287)
        {
          v289 = 0xAAAAAAAAAAAAAAABLL * ((v287 - v288) >> 3);
          if (v289 >= 0xFFFF)
          {
            *(_DWORD *)v338 = v289 + 1;
            *(_DWORD *)&v338[4] = 0;
            LOWORD(v339) = 0;
            sub_1C596EE08(a1, (uint64_t)v338);
            v288 = *(_QWORD *)(v286 + 88);
            v287 = *(_QWORD *)(v286 + 96);
          }
          while (v288 != v287)
          {
            sub_1C596EE08(a1, v288);
            v288 += 24;
          }
        }
      }
      if (++v222 == v223)
        break;
      ++v225;
    }
    while (v225 != v224);
  }
  v227 = *(const char ***)(a1 + 80);
  v228 = *(const char ***)(a1 + 88);
  if (v227 != v228)
  {
    while (1)
    {
      v229 = *v227;
      if (*((_DWORD *)*v227 + 14) != -1)
      {
        llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 8), *v227, 8uLL);
        v230 = *((_DWORD *)v229 + 2);
        v231 = *(llvm::raw_ostream **)(a1 + 8);
        v232 = bswap32(v230);
        if ((*(_DWORD *)(a1 + 16) - 1) >= 2)
          v230 = v232;
        *(_DWORD *)v338 = v230;
        llvm::raw_ostream::write(v231, v338, 4uLL);
        v233 = *((_DWORD *)v229 + 3);
        v234 = bswap32(v233);
        if (*(_BYTE *)(a1 + 224))
        {
          v235 = *(llvm::raw_ostream **)(a1 + 8);
          if ((*(_DWORD *)(a1 + 16) - 1) >= 2)
            v233 = v234;
          *(_DWORD *)v338 = v233;
          v236 = 4;
        }
        else
        {
          v235 = *(llvm::raw_ostream **)(a1 + 8);
          v237 = HIWORD(v234);
          if ((*(_DWORD *)(a1 + 16) - 1) >= 2)
            LOWORD(v233) = v237;
          *(_WORD *)v338 = v233;
          v236 = 2;
        }
        llvm::raw_ostream::write(v235, v338, v236);
        v238 = *((unsigned __int16 *)v229 + 8);
        v239 = *(llvm::raw_ostream **)(a1 + 8);
        v240 = bswap32(v238) >> 16;
        if ((*(_DWORD *)(a1 + 16) - 1) >= 2)
          LOWORD(v238) = v240;
        *(_WORD *)v338 = v238;
        llvm::raw_ostream::write(v239, v338, 2uLL);
        v241 = *(llvm::raw_ostream **)(a1 + 8);
        v242 = v229[18];
        v243 = (char *)*((_QWORD *)v241 + 4);
        if ((unint64_t)v243 >= *((_QWORD *)v241 + 3))
        {
          llvm::raw_ostream::write(v241, v242);
        }
        else
        {
          *((_QWORD *)v241 + 4) = v243 + 1;
          *v243 = v242;
        }
        v244 = *(llvm::raw_ostream **)(a1 + 8);
        v245 = v229[19];
        v246 = (char *)*((_QWORD *)v244 + 4);
        if ((unint64_t)v246 >= *((_QWORD *)v244 + 3))
        {
          llvm::raw_ostream::write(v244, v245);
        }
        else
        {
          *((_QWORD *)v244 + 4) = v246 + 1;
          *v246 = v245;
        }
        v247 = *((unsigned int *)v229 + 18);
        if ((_DWORD)v247)
          break;
      }
LABEL_312:
      if (++v227 == v228)
        goto LABEL_313;
    }
    v248 = *((_QWORD *)v229 + 8);
    v249 = 24 * v247;
    v250 = (unsigned __int16 *)(v248 + 10);
    while (2)
    {
      v251 = *(_DWORD *)(v250 - 5);
      switch(v251)
      {
        case 2:
          v264 = *(_DWORD *)(v250 - 3);
          v265 = *(llvm::raw_ostream **)(a1 + 8);
          v266 = bswap32(v264);
          if ((*(_DWORD *)(a1 + 16) - 1) >= 2)
            v264 = v266;
          *(_DWORD *)v338 = v264;
          llvm::raw_ostream::write(v265, v338, 4uLL);
          v267 = *(v250 - 1);
          v268 = *(llvm::raw_ostream **)(a1 + 8);
          v269 = bswap32(v267) >> 16;
          if ((*(_DWORD *)(a1 + 16) - 1) >= 2)
            LOWORD(v267) = v269;
          *(_WORD *)v338 = v267;
          llvm::raw_ostream::write(v268, v338, 2uLL);
          v270 = *v250;
          v271 = *(llvm::raw_ostream **)(a1 + 8);
          v272 = bswap32(v270) >> 16;
          if ((*(_DWORD *)(a1 + 16) - 1) >= 2)
            LOWORD(v270) = v272;
          *(_WORD *)v338 = v270;
          llvm::raw_ostream::write(v271, v338, 2uLL);
          v273 = *(_DWORD *)(v250 + 1);
          v274 = *(llvm::raw_ostream **)(a1 + 8);
          v275 = bswap32(v273);
          if ((*(_DWORD *)(a1 + 16) - 1) >= 2)
            v273 = v275;
          *(_DWORD *)v338 = v273;
          llvm::raw_ostream::write(v274, v338, 4uLL);
          v276 = v250[3];
          v277 = *(llvm::raw_ostream **)(a1 + 8);
          v278 = bswap32(v276) >> 16;
          if ((*(_DWORD *)(a1 + 16) - 1) >= 2)
            LOWORD(v276) = v278;
          *(_WORD *)v338 = v276;
          llvm::raw_ostream::write(v277, v338, 2uLL);
          v279 = *(llvm::raw_ostream **)(a1 + 8);
          v280 = *((_BYTE *)v250 + 10);
          v281 = (char *)*((_QWORD *)v279 + 4);
          if ((unint64_t)v281 >= *((_QWORD *)v279 + 3))
          {
            llvm::raw_ostream::write(v279, v280);
          }
          else
          {
            *((_QWORD *)v279 + 4) = v281 + 1;
            *v281 = v280;
          }
          llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 8), "", 1uLL);
          v282 = v250[4];
          v258 = *(llvm::raw_ostream **)(a1 + 8);
          v283 = bswap32(v282) >> 16;
          if ((*(_DWORD *)(a1 + 16) - 1) >= 2)
            LOWORD(v282) = v283;
          *(_WORD *)v338 = v282;
          v259 = v338;
          v260 = 2;
LABEL_308:
          llvm::raw_ostream::write(v258, v259, v260);
          if (!*(_BYTE *)(a1 + 224))
          {
LABEL_311:
            v250 += 12;
            v249 -= 24;
            if (!v249)
              goto LABEL_312;
            continue;
          }
          v261 = *(llvm::raw_ostream **)(a1 + 8);
          v262 = "";
          v263 = 2;
          break;
        case 1:
          v261 = *(llvm::raw_ostream **)(a1 + 8);
          v262 = (const char *)(v250 - 3);
          if (*(_BYTE *)(a1 + 224))
            v263 = 20;
          else
            v263 = 18;
          break;
        case 0:
          v252 = *(_DWORD *)(v250 - 3);
          v253 = *(llvm::raw_ostream **)(a1 + 8);
          v254 = bswap32(v252);
          if ((*(_DWORD *)(a1 + 16) - 1) >= 2)
            v252 = v254;
          *(_DWORD *)v338 = v252;
          llvm::raw_ostream::write(v253, v338, 4uLL);
          v255 = *(_DWORD *)(v250 - 1);
          v256 = *(llvm::raw_ostream **)(a1 + 8);
          v257 = bswap32(v255);
          if ((*(_DWORD *)(a1 + 16) - 1) >= 2)
            v255 = v257;
          *(_DWORD *)v338 = v255;
          llvm::raw_ostream::write(v256, v338, 4uLL);
          v258 = *(llvm::raw_ostream **)(a1 + 8);
          v259 = "";
          v260 = 10;
          goto LABEL_308;
        default:
          goto LABEL_311;
      }
      break;
    }
    llvm::raw_ostream::write(v261, v262, v263);
    goto LABEL_311;
  }
LABEL_313:
  llvm::StringTableBuilder::write((llvm::StringTableBuilder *)(a1 + 104), *(llvm::raw_ostream **)(a1 + 8));
  v284 = *(_QWORD **)(a1 + 8);
  return v326 - (v328 + v327) + v284[4] + (*(uint64_t (**)(_QWORD *))(*v284 + 80))(v284) - v284[2];
}

_QWORD *sub_1C596E03C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = (_QWORD *)*a1;
  *a1 = 0;
  if (v2)
  {
    v3 = (_QWORD *)v2[8];
    if (v3 != v2 + 10)
      free(v3);
    v4 = (_QWORD *)v2[3];
    if (v4 != v2 + 6)
      free(v4);
    MEMORY[0x1CAA32FC0](v2, 0x10E0C40ABAEFE22);
  }
  return a1;
}

uint64_t *sub_1C596E0A8(uint64_t *a1)
{
  uint64_t v2;
  void *v3;
  void *v4;

  v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    v3 = *(void **)(v2 + 112);
    if (v3 != (void *)(v2 + 128))
      free(v3);
    v4 = *(void **)(v2 + 88);
    if (v4)
    {
      *(_QWORD *)(v2 + 96) = v4;
      operator delete(v4);
    }
    if (*(char *)(v2 + 63) < 0)
      operator delete(*(void **)(v2 + 40));
    MEMORY[0x1CAA32FC0](v2, 0x10F2C4051320FA1);
  }
  return a1;
}

uint64_t sub_1C596E120(_QWORD *a1, const void *a2, unint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  uint64_t *v17;
  char *v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v22;

  v6 = operator new();
  v7 = 0;
  *(_QWORD *)(v6 + 24) = v6 + 48;
  *(_QWORD *)v6 = 0;
  *(_QWORD *)(v6 + 8) = 0;
  *(_DWORD *)(v6 + 16) = 0;
  *(_OWORD *)(v6 + 32) = xmmword_1C6464ED0;
  if (a3 >= 9)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod(v6 + 24, (void *)(v6 + 48), a3, 1);
    v7 = *(_QWORD *)(v6 + 32);
  }
  else if (!a3)
  {
    goto LABEL_4;
  }
  memcpy((void *)(*(_QWORD *)(v6 + 24) + v7), a2, a3);
  v7 = *(_QWORD *)(v6 + 32);
LABEL_4:
  *(_QWORD *)(v6 + 32) = v7 + a3;
  *(_QWORD *)(v6 + 64) = v6 + 80;
  *(_QWORD *)(v6 + 72) = 0x100000000;
  *(_QWORD *)(v6 + 128) = 0;
  *(_QWORD *)(v6 + 104) = 0;
  *(_QWORD *)(v6 + 112) = 0;
  *(_DWORD *)(v6 + 120) = 0;
  v9 = (uint64_t *)a1[11];
  v8 = a1[12];
  if ((unint64_t)v9 >= v8)
  {
    v11 = (_QWORD *)a1[10];
    v12 = v9 - v11;
    v13 = v12 + 1;
    if ((unint64_t)(v12 + 1) >> 61)
      abort();
    v14 = v8 - (_QWORD)v11;
    if (v14 >> 2 > v13)
      v13 = v14 >> 2;
    if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF8)
      v15 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v15 = v13;
    if (v15)
    {
      if (v15 >> 61)
        sub_1C4764EE4();
      v16 = (char *)operator new(8 * v15);
    }
    else
    {
      v16 = 0;
    }
    v17 = (uint64_t *)&v16[8 * v12];
    v18 = &v16[8 * v15];
    v22 = 0;
    *v17 = v6;
    v10 = v17 + 1;
    if (v9 == v11)
    {
      a1[10] = v17;
      a1[11] = v10;
      a1[12] = v18;
    }
    else
    {
      do
      {
        v19 = *--v9;
        *v9 = 0;
        *--v17 = v19;
      }
      while (v9 != v11);
      v9 = (uint64_t *)a1[10];
      v20 = (uint64_t *)a1[11];
      a1[10] = v17;
      a1[11] = v10;
      a1[12] = v18;
      while (v20 != v9)
        v20 = sub_1C596E03C(v20 - 1);
    }
    if (v9)
      operator delete(v9);
  }
  else
  {
    v22 = 0;
    *v9 = v6;
    v10 = v9 + 1;
  }
  a1[11] = v10;
  sub_1C596E03C(&v22);
  return *(_QWORD *)(a1[11] - 8);
}

uint64_t sub_1C596E2EC(uint64_t a1, _BYTE *a2)
{
  uint64_t v4;
  char v5;
  _QWORD *v6;
  uint64_t result;
  const void *v8;
  unint64_t v9;
  unint64_t *v10;
  unint64_t v11;
  _BYTE *v12;
  _QWORD *v13;

  v12 = a2;
  v13 = 0;
  v4 = a1 + 176;
  v5 = sub_1C49F21C0(*(_QWORD *)(a1 + 176), *(_DWORD *)(a1 + 192), (uint64_t)a2, &v13);
  v6 = v13;
  if ((v5 & 1) != 0)
  {
    result = v13[1];
    if (result)
      return result;
  }
  else
  {
    v6 = sub_1C5305ED0(v4, (uint64_t *)&v12, v13);
    *v6 = a2;
    v6[1] = 0;
  }
  if ((*a2 & 4) != 0)
  {
    v10 = (unint64_t *)*((_QWORD *)a2 - 1);
    v11 = *v10;
    v8 = v10 + 2;
    v9 = v11;
  }
  else
  {
    v8 = 0;
    v9 = 0;
  }
  result = sub_1C596E120((_QWORD *)a1, v8, v9);
  v6[1] = result;
  return result;
}

void sub_1C596E38C(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    if (v2 <= a2)
    {
      if (*(unsigned int *)(a1 + 12) < a2)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, a2, 24);
        v2 = *(unsigned int *)(a1 + 8);
      }
      if (a2 != v2)
        bzero((void *)(*(_QWORD *)a1 + 24 * v2), 24 * ((24 * (a2 - v2) - 24) / 0x18) + 24);
    }
    *(_DWORD *)(a1 + 8) = a2;
  }
}

uint64_t *sub_1C596E41C(uint64_t *result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  BOOL v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t *v39;
  uint64_t *v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t *v49;
  BOOL v51;
  uint64_t v52;
  uint64_t *v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t *v59;
  int64_t v60;
  int64_t v61;
  int64_t v62;
  uint64_t v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  int v67;
  uint64_t *v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  int v85;
  uint64_t *v86;
  uint64_t v88;
  uint64_t v89;
  int v90;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v37 = *(a2 - 1);
        v38 = *v8;
        if (*(_DWORD *)(v37 + 64) < *(_DWORD *)(*v8 + 64))
        {
          *v8 = v37;
          *(a2 - 1) = v38;
        }
        return result;
      case 3:
        return sub_1C596EB04(v8, v8 + 1, a2 - 1);
      case 4:
        return sub_1C596ED74(v8, v8 + 1, v8 + 2, a2 - 1);
      case 5:
        v39 = v8 + 1;
        v40 = v8 + 2;
        v41 = v8 + 3;
        result = sub_1C596ED74(v8, v8 + 1, v8 + 2, v8 + 3);
        v42 = *(a2 - 1);
        v43 = v8[3];
        if (*(_DWORD *)(v42 + 64) < *(_DWORD *)(v43 + 64))
        {
          *v41 = v42;
          *(a2 - 1) = v43;
          v44 = *v41;
          v45 = *v40;
          v46 = *(_DWORD *)(*v41 + 64);
          if (v46 < *(_DWORD *)(*v40 + 64))
          {
            *v40 = v44;
            *v41 = v45;
            v47 = *v39;
            if (v46 < *(_DWORD *)(*v39 + 64))
            {
              v8[1] = v44;
              v8[2] = v47;
              v48 = *v8;
              if (v46 < *(_DWORD *)(*v8 + 64))
              {
                *v8 = v44;
                v8[1] = v48;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 191)
        {
          v49 = v8 + 1;
          v51 = v8 == a2 || v49 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v51)
            {
              v52 = 8;
              v53 = v8;
              do
              {
                v55 = *v53;
                v54 = v53[1];
                v53 = v49;
                v56 = *(_DWORD *)(v54 + 64);
                if (v56 < *(_DWORD *)(v55 + 64))
                {
                  v57 = v52;
                  while (1)
                  {
                    *(uint64_t *)((char *)v8 + v57) = v55;
                    v58 = v57 - 8;
                    if (v57 == 8)
                      break;
                    v55 = *(uint64_t *)((char *)v8 + v57 - 16);
                    v57 -= 8;
                    if (v56 >= *(_DWORD *)(v55 + 64))
                    {
                      v59 = (uint64_t *)((char *)v8 + v58);
                      goto LABEL_80;
                    }
                  }
                  v59 = v8;
LABEL_80:
                  *v59 = v54;
                }
                v49 = v53 + 1;
                v52 += 8;
              }
              while (v53 + 1 != a2);
            }
          }
          else if (!v51)
          {
            do
            {
              v89 = *v7;
              v88 = v7[1];
              v7 = v49;
              v90 = *(_DWORD *)(v88 + 64);
              if (v90 < *(_DWORD *)(v89 + 64))
              {
                do
                {
                  *v49 = v89;
                  v89 = *(v49 - 2);
                  --v49;
                }
                while (v90 < *(_DWORD *)(v89 + 64));
                *v49 = v88;
              }
              v49 = v7 + 1;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v60 = (unint64_t)(v10 - 2) >> 1;
            v61 = v60;
            do
            {
              v62 = v61;
              if (v60 >= v61)
              {
                v63 = (2 * v61) | 1;
                v64 = &v8[v63];
                v65 = *v64;
                if (2 * v62 + 2 < v10 && *(_DWORD *)(v65 + 64) < *(_DWORD *)(v64[1] + 64))
                {
                  v65 = v64[1];
                  ++v64;
                  v63 = 2 * v62 + 2;
                }
                result = &v8[v62];
                v66 = *result;
                v67 = *(_DWORD *)(*result + 64);
                if (*(_DWORD *)(v65 + 64) >= v67)
                {
                  do
                  {
                    v68 = v64;
                    *result = v65;
                    if (v60 < v63)
                      break;
                    v69 = (2 * v63) | 1;
                    v64 = &v8[v69];
                    v70 = 2 * v63 + 2;
                    v65 = *v64;
                    if (v70 < v10 && *(_DWORD *)(v65 + 64) < *(_DWORD *)(v64[1] + 64))
                    {
                      v65 = v64[1];
                      ++v64;
                      v69 = v70;
                    }
                    result = v68;
                    v63 = v69;
                  }
                  while (*(_DWORD *)(v65 + 64) >= v67);
                  *v68 = v66;
                }
              }
              v61 = v62 - 1;
            }
            while (v62);
            do
            {
              v71 = 0;
              v72 = *v8;
              v73 = v8;
              do
              {
                v74 = &v73[v71];
                v77 = v74[1];
                v75 = v74 + 1;
                v76 = v77;
                v78 = (2 * v71) | 1;
                v79 = 2 * v71 + 2;
                if (v79 < v10)
                {
                  result = (uint64_t *)*(unsigned int *)(v76 + 64);
                  if ((int)result < *(_DWORD *)(v75[1] + 64))
                  {
                    v76 = v75[1];
                    ++v75;
                    v78 = v79;
                  }
                }
                *v73 = v76;
                v73 = v75;
                v71 = v78;
              }
              while (v78 <= (uint64_t)((unint64_t)(v10 - 2) >> 1));
              if (v75 == --a2)
              {
                *v75 = v72;
              }
              else
              {
                *v75 = *a2;
                *a2 = v72;
                v80 = (char *)v75 - (char *)v8 + 8;
                if (v80 >= 9)
                {
                  v81 = (((unint64_t)v80 >> 3) - 2) >> 1;
                  v82 = &v8[v81];
                  v83 = *v82;
                  v84 = *v75;
                  v85 = *(_DWORD *)(*v75 + 64);
                  if (*(_DWORD *)(*v82 + 64) < v85)
                  {
                    do
                    {
                      v86 = v82;
                      *v75 = v83;
                      if (!v81)
                        break;
                      v81 = (v81 - 1) >> 1;
                      v82 = &v8[v81];
                      v83 = *v82;
                      v75 = v86;
                    }
                    while (*(_DWORD *)(*v82 + 64) < v85);
                    *v86 = v84;
                  }
                }
              }
            }
            while (v10-- > 2);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &v8[(unint64_t)v10 >> 1];
        if ((unint64_t)v9 < 0x401)
        {
          result = sub_1C596EB04(&v7[(unint64_t)v10 >> 1], v7, a2 - 1);
        }
        else
        {
          sub_1C596EB04(v7, &v7[(unint64_t)v10 >> 1], a2 - 1);
          sub_1C596EB04(v7 + 1, v12 - 1, a2 - 2);
          sub_1C596EB04(v7 + 2, &v7[v11 + 1], a2 - 3);
          result = sub_1C596EB04(v12 - 1, v12, &v7[v11 + 1]);
          v13 = *v7;
          *v7 = *v12;
          *v12 = v13;
        }
        --a3;
        v14 = *v7;
        if ((a4 & 1) == 0)
        {
          v15 = *(_DWORD *)(v14 + 64);
          if (*(_DWORD *)(*(v7 - 1) + 64) < v15)
            goto LABEL_12;
          if (v15 >= *(_DWORD *)(*(a2 - 1) + 64))
          {
            v29 = v7 + 1;
            do
            {
              v8 = v29;
              if (v29 >= a2)
                break;
              ++v29;
            }
            while (v15 >= *(_DWORD *)(*v8 + 64));
          }
          else
          {
            v8 = v7;
            do
            {
              v28 = v8[1];
              ++v8;
            }
            while (v15 >= *(_DWORD *)(v28 + 64));
          }
          v30 = a2;
          if (v8 < a2)
          {
            v30 = a2;
            do
              v31 = *--v30;
            while (v15 < *(_DWORD *)(v31 + 64));
          }
          if (v8 < v30)
          {
            v32 = *v8;
            v33 = *v30;
            do
            {
              *v8 = v33;
              *v30 = v32;
              do
              {
                v34 = v8[1];
                ++v8;
                v32 = v34;
              }
              while (v15 >= *(_DWORD *)(v34 + 64));
              do
              {
                v35 = *--v30;
                v33 = v35;
              }
              while (v15 < *(_DWORD *)(v35 + 64));
            }
            while (v8 < v30);
          }
          v36 = v8 - 1;
          if (v8 - 1 != v7)
            *v7 = *v36;
          a4 = 0;
          *v36 = v14;
          continue;
        }
        v15 = *(_DWORD *)(v14 + 64);
LABEL_12:
        v16 = 0;
        do
          v17 = v7[++v16];
        while (*(_DWORD *)(v17 + 64) < v15);
        v18 = &v7[v16];
        v19 = a2;
        if (v16 == 1)
        {
          v19 = a2;
          do
          {
            if (v18 >= v19)
              break;
            v21 = *--v19;
          }
          while (*(_DWORD *)(v21 + 64) >= v15);
        }
        else
        {
          do
            v20 = *--v19;
          while (*(_DWORD *)(v20 + 64) >= v15);
        }
        if (v18 >= v19)
        {
          v8 = &v7[v16];
        }
        else
        {
          v22 = *v19;
          v8 = &v7[v16];
          v23 = v19;
          do
          {
            *v8 = v22;
            *v23 = v17;
            do
            {
              v24 = v8[1];
              ++v8;
              v17 = v24;
            }
            while (*(_DWORD *)(v24 + 64) < v15);
            do
            {
              v25 = *--v23;
              v22 = v25;
            }
            while (*(_DWORD *)(v25 + 64) >= v15);
          }
          while (v8 < v23);
        }
        v26 = v8 - 1;
        if (v8 - 1 != v7)
          *v7 = *v26;
        *v26 = v14;
        if (v18 < v19)
        {
LABEL_33:
          result = (uint64_t *)sub_1C596E41C(v7, v8 - 1, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v27 = sub_1C596EB8C(v7, v8 - 1);
        result = (uint64_t *)sub_1C596EB8C(v8, a2);
        if (!(_DWORD)result)
        {
          if (v27)
            continue;
          goto LABEL_33;
        }
        a2 = v8 - 1;
        if (!v27)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t *sub_1C596EB04(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;

  v3 = *a2;
  v4 = *result;
  v5 = *(_DWORD *)(*a2 + 64);
  v6 = *(_DWORD *)(*result + 64);
  v7 = *a3;
  v8 = *(_DWORD *)(*a3 + 64);
  if (v5 >= v6)
  {
    if (v8 < v5)
    {
      *a2 = v7;
      *a3 = v3;
      v9 = *result;
      if (*(_DWORD *)(*a2 + 64) < *(_DWORD *)(*result + 64))
      {
        *result = *a2;
        *a2 = v9;
      }
    }
  }
  else
  {
    if (v8 >= v5)
    {
      *result = v3;
      *a2 = v4;
      if (*(_DWORD *)(*a3 + 64) >= v6)
        return result;
      *a2 = *a3;
    }
    else
    {
      *result = v7;
    }
    *a3 = v4;
  }
  return result;
}

BOOL sub_1C596EB8C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (*(_DWORD *)(v6 + 64) < *(_DWORD *)(*a1 + 64))
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_1C596EB04(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_1C596ED74(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      v18 = a1 + 1;
      v19 = a1 + 2;
      v20 = a1 + 3;
      sub_1C596ED74(a1, a1 + 1, a1 + 2, a1 + 3);
      v21 = *(a2 - 1);
      v22 = a1[3];
      if (*(_DWORD *)(v21 + 64) < *(_DWORD *)(v22 + 64))
      {
        *v20 = v21;
        *(a2 - 1) = v22;
        v23 = *v20;
        v24 = *v19;
        v25 = *(_DWORD *)(*v20 + 64);
        if (v25 < *(_DWORD *)(*v19 + 64))
        {
          *v19 = v23;
          *v20 = v24;
          v26 = *v18;
          if (v25 < *(_DWORD *)(*v18 + 64))
          {
            a1[1] = v23;
            a1[2] = v26;
            v27 = *a1;
            if (v25 < *(_DWORD *)(*a1 + 64))
            {
              *a1 = v23;
              a1[1] = v27;
            }
          }
        }
      }
      return 1;
    default:
      v8 = a1 + 2;
      sub_1C596EB04(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    v14 = *(_DWORD *)(*v9 + 64);
    if (v14 < *(_DWORD *)(*v8 + 64))
    {
      v15 = v11;
      while (1)
      {
        *(uint64_t *)((char *)a1 + v15) = v13;
        v16 = v15 - 8;
        if (v15 == 8)
          break;
        v13 = *(uint64_t *)((char *)a1 + v15 - 16);
        v15 -= 8;
        if (v14 >= *(_DWORD *)(v13 + 64))
        {
          v17 = (uint64_t *)((char *)a1 + v16);
          goto LABEL_13;
        }
      }
      v17 = a1;
LABEL_13:
      *v17 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

uint64_t *sub_1C596ED74(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  result = sub_1C596EB04(a1, a2, a3);
  v9 = *a3;
  if (*(_DWORD *)(*a4 + 64) < *(_DWORD *)(*a3 + 64))
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = *a2;
    if (*(_DWORD *)(*a3 + 64) < *(_DWORD *)(*a2 + 64))
    {
      *a2 = *a3;
      *a3 = v10;
      v11 = *a1;
      if (*(_DWORD *)(*a2 + 64) < *(_DWORD *)(*a1 + 64))
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

llvm::raw_ostream *sub_1C596EE08(uint64_t a1, uint64_t a2)
{
  unsigned int v4;
  llvm::raw_ostream *v5;
  unsigned int v6;
  unsigned int v7;
  llvm::raw_ostream *v8;
  unsigned int v9;
  unsigned int v10;
  llvm::raw_ostream *v11;
  unsigned int v12;
  char v14[4];
  char v15[6];
  char v16[2];

  v4 = *(_DWORD *)a2;
  v5 = *(llvm::raw_ostream **)(a1 + 8);
  v6 = bswap32(*(_DWORD *)a2);
  if ((*(_DWORD *)(a1 + 16) - 1) >= 2)
    v4 = v6;
  *(_DWORD *)v14 = v4;
  llvm::raw_ostream::write(v5, v14, 4uLL);
  v7 = *(_DWORD *)(a2 + 4);
  v8 = *(llvm::raw_ostream **)(a1 + 8);
  v9 = bswap32(v7);
  if ((*(_DWORD *)(a1 + 16) - 1) >= 2)
    v7 = v9;
  *(_DWORD *)v15 = v7;
  llvm::raw_ostream::write(v8, v15, 4uLL);
  v10 = *(unsigned __int16 *)(a2 + 8);
  v11 = *(llvm::raw_ostream **)(a1 + 8);
  v12 = bswap32(v10) >> 16;
  if ((*(_DWORD *)(a1 + 16) - 1) >= 2)
    LOWORD(v10) = v12;
  *(_WORD *)v16 = v10;
  return llvm::raw_ostream::write(v11, v16, 2uLL);
}

uint64_t sub_1C596EEB8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;

  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  v6 = 8 * a3;
  v7 = (8 * a3) >> 3;
  *(_OWORD *)a1 = 0u;
  if (!(8 * a3))
  {
    v8 = 0;
    goto LABEL_6;
  }
  sub_1C5971330(a1, (8 * a3) >> 3);
  v6 = *(_QWORD *)(a1 + 40);
  v9 = *(_QWORD *)(a1 + 8);
  v10 = *(_QWORD *)(a1 + 32) + v6;
  v8 = (_QWORD *)(v9 + 8 * (v10 >> 9));
  if (*(_QWORD *)(a1 + 16) == v9)
  {
LABEL_6:
    v11 = 0;
    if (a3)
      goto LABEL_7;
LABEL_5:
    v12 = v11;
    v13 = v8;
    goto LABEL_11;
  }
  v11 = *v8 + 8 * (v10 & 0x1FF);
  if (!a3)
    goto LABEL_5;
LABEL_7:
  v14 = v7 + ((v11 - *v8) >> 3);
  if (v14 < 1)
  {
    v15 = 511 - v14;
    LOWORD(v14) = ~(511 - v14);
    v13 = &v8[-(v15 >> 9)];
  }
  else
  {
    v13 = &v8[(unint64_t)v14 >> 9];
  }
  v12 = *v13 + 8 * (v14 & 0x1FF);
LABEL_11:
  if (v11 != v12)
  {
    do
    {
      v16 = v12;
      if (v8 != v13)
        v16 = *v8 + 4096;
      if (v11 == v16)
      {
        v16 = v11;
      }
      else
      {
        v17 = (_QWORD *)v11;
        do
        {
          v18 = *a2++;
          *v17++ = v18;
        }
        while (v17 != (_QWORD *)v16);
      }
      v6 += (v16 - v11) >> 3;
      if (v8 == v13)
        break;
      v19 = v8[1];
      ++v8;
      v11 = v19;
    }
    while (v19 != v12);
    *(_QWORD *)(a1 + 40) = v6;
  }
  return a1;
}

uint64_t sub_1C596EFF4(uint64_t a1, const void *a2, size_t a3, int a4, char a5, _QWORD *a6)
{
  void *v11;
  unint64_t v12;
  uint64_t v13;
  char *v14;
  uint64_t *v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  _QWORD *v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  unint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t *v36;
  _QWORD *v37;

  *(_OWORD *)(a1 + 8) = 0u;
  v11 = (void *)(a1 + 8);
  *(_QWORD *)a1 = off_1E8184600;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 36) = 0u;
  *(_DWORD *)(a1 + 52) = a4;
  *(_WORD *)(a1 + 56) = -3;
  memcpy((void *)(a1 + 8), a2, a3);
  *(_QWORD *)a1 = off_1E81845D8;
  *(_BYTE *)(a1 + 58) = a5;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  v12 = a6[4];
  v13 = a6[1];
  v14 = (char *)(v13 + 8 * (v12 >> 9));
  if (a6[2] == v13)
  {
    v15 = 0;
    v18 = 0;
    v17 = (char *)(v13 + 8 * ((a6[5] + v12) >> 9));
  }
  else
  {
    v15 = (uint64_t *)(*(_QWORD *)v14 + 8 * (a6[4] & 0x1FFLL));
    v16 = a6[5] + v12;
    v17 = (char *)(v13 + 8 * (v16 >> 9));
    v18 = *(_QWORD *)v17 + 8 * (v16 & 0x1FF);
  }
  if ((uint64_t *)v18 != v15)
  {
    v19 = ((v18 - *(_QWORD *)v17) >> 3) + ((v17 - v14) << 6);
    v20 = (uint64_t)v15 - *(_QWORD *)v14;
    if (v19 != v20 >> 3)
    {
      v21 = v19 - (v20 >> 3);
      sub_1C5971330(a1 + 64, v21);
      v22 = *(_QWORD *)(a1 + 104);
      v23 = *(_QWORD *)(a1 + 72);
      v24 = *(_QWORD *)(a1 + 96) + v22;
      v25 = (_QWORD *)(v23 + 8 * (v24 >> 9));
      v26 = (_QWORD *)*v25;
      v27 = *v25 + 8 * (v24 & 0x1FF);
      v28 = *(_QWORD *)(a1 + 80) == v23 ? 0 : (_QWORD *)v27;
      v29 = v21 + v28 - v26;
      if (v29 < 1)
      {
        v31 = 511 - v29;
        LOWORD(v29) = ~(511 - v29);
        v30 = &v25[-(v31 >> 9)];
      }
      else
      {
        v30 = &v25[(unint64_t)v29 >> 9];
      }
      v32 = *v30 + 8 * (v29 & 0x1FF);
      if (v28 != (_QWORD *)v32)
      {
        do
        {
          v33 = v26 + 512;
          if (v25 == v30)
            v33 = (_QWORD *)v32;
          if (v28 == v33)
          {
            v33 = v28;
          }
          else
          {
            v34 = v28;
            do
            {
              v35 = *v15++;
              *v34++ = v35;
              if ((uint64_t *)((char *)v15 - *(_QWORD *)v14) == (uint64_t *)4096)
              {
                v36 = (uint64_t *)*((_QWORD *)v14 + 1);
                v14 += 8;
                v15 = v36;
              }
            }
            while (v34 != v33);
          }
          v22 += v33 - v28;
          if (v25 == v30)
            break;
          v37 = (_QWORD *)v25[1];
          ++v25;
          v26 = v37;
          v28 = v37;
        }
        while (v37 != (_QWORD *)v32);
        *(_QWORD *)(a1 + 104) = v22;
      }
    }
  }
  memcpy(v11, a2, a3);
  return a1;
}

_QWORD *sub_1C596F20C(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  void *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  BOOL v8;
  uint64_t v9;

  *a1 = &off_1E8184570;
  v2 = (_QWORD *)a1[150];
  if (v2)
  {
    v3 = (_QWORD *)a1[151];
    v4 = (void *)a1[150];
    if (v3 != v2)
    {
      v5 = v3 - 9;
      v6 = v3 - 9;
      do
      {
        v7 = *v6;
        v6 -= 9;
        (*(void (**)(_QWORD *))(v7 + 8))(v5);
        v8 = v5 == v2;
        v5 = v6;
      }
      while (!v8);
      v4 = (void *)a1[150];
    }
    a1[151] = v2;
    operator delete(v4);
  }
  a1[131] = off_1E81845D8;
  sub_1C484143C((uint64_t)(a1 + 139));
  a1[117] = off_1E81845D8;
  sub_1C484143C((uint64_t)(a1 + 125));
  a1[103] = off_1E81845D8;
  sub_1C484143C((uint64_t)(a1 + 111));
  a1[89] = off_1E81845D8;
  sub_1C484143C((uint64_t)(a1 + 97));
  a1[75] = off_1E81845D8;
  sub_1C484143C((uint64_t)(a1 + 83));
  sub_1C5971CEC((uint64_t)(a1 + 69));
  sub_1C5971CEC((uint64_t)(a1 + 63));
  sub_1C5971CEC((uint64_t)(a1 + 57));
  sub_1C5971CEC((uint64_t)(a1 + 51));
  sub_1C5971CEC((uint64_t)(a1 + 45));
  sub_1C5971CEC((uint64_t)(a1 + 39));
  sub_1C5971CEC((uint64_t)(a1 + 33));
  sub_1C5971CEC((uint64_t)(a1 + 27));
  sub_1C5971CEC((uint64_t)(a1 + 21));
  MEMORY[0x1CAA32FB4](a1[18], 8);
  MEMORY[0x1CAA32FB4](a1[15], 8);
  MEMORY[0x1CAA32FB4](a1[8], 8);
  v9 = a1[7];
  a1[7] = 0;
  if (v9)
    (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
  return a1;
}

void sub_1C596F350(_QWORD *a1)
{
  sub_1C596F20C(a1);
  JUMPOUT(0x1CAA32FC0);
}

_DWORD *sub_1C596F374(uint64_t a1)
{
  _QWORD *v2;
  int v3;
  uint64_t v4;
  _QWORD *v5;
  int v6;
  int v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  void **v11;
  void **v12;
  _QWORD *v13;
  unint64_t v14;
  void **v15;
  unint64_t v16;
  unint64_t v17;
  void *v18;
  void *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t i;
  void (***v25)(void);
  void (***v26)(void);
  void (**v27)(void);
  unint64_t v29;
  unint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;

  sub_1C5015F50((_DWORD *)(a1 + 144));
  v2 = (_QWORD *)(a1 + 120);
  v3 = *(_DWORD *)(a1 + 128);
  if (v3)
  {
    v4 = *(unsigned int *)(a1 + 136);
    if (v4 > 4 * v3 && v4 >= 0x41)
    {
      v5 = (_QWORD *)*v2;
      v6 = 1 << (33 - __clz(v3 - 1));
      if (v6 <= 64)
        v7 = 64;
      else
        v7 = v6;
      if (v7 == (_DWORD)v4)
      {
        *(_QWORD *)(a1 + 128) = 0;
        v8 = 16 * v4;
        do
        {
          *v5 = -4096;
          v5 += 2;
          v8 -= 16;
        }
        while (v8);
      }
      else
      {
        MEMORY[0x1CAA32FB4](v5, 8);
        v29 = (4 * v7 / 3u + 1) | ((unint64_t)(4 * v7 / 3u + 1) >> 1);
        v30 = v29 | (v29 >> 2) | ((v29 | (v29 >> 2)) >> 4);
        LODWORD(v30) = (((v30 | (v30 >> 8)) >> 16) | v30 | (v30 >> 8)) + 1;
        *(_DWORD *)(a1 + 136) = v30;
        v31 = operator new(16 * v30, (std::align_val_t)8uLL);
        *(_QWORD *)(a1 + 120) = v31;
        *(_QWORD *)(a1 + 128) = 0;
        v32 = *(unsigned int *)(a1 + 136);
        if ((_DWORD)v32)
        {
          v33 = 16 * v32;
          do
          {
            *v31 = -4096;
            v31 += 2;
            v33 -= 16;
          }
          while (v33);
        }
      }
      goto LABEL_18;
    }
  }
  else
  {
    if (!*(_DWORD *)(a1 + 132))
      goto LABEL_18;
    LODWORD(v4) = *(_DWORD *)(a1 + 136);
    if (v4 > 0x40)
    {
      MEMORY[0x1CAA32FB4](*v2, 8);
      *v2 = 0;
      *(_QWORD *)(a1 + 128) = 0;
      *(_DWORD *)(a1 + 136) = 0;
      goto LABEL_18;
    }
  }
  if ((_DWORD)v4)
  {
    v9 = (_QWORD *)*v2;
    v10 = 16 * v4;
    do
    {
      *v9 = -4096;
      v9 += 2;
      v10 -= 16;
    }
    while (v10);
  }
  *(_QWORD *)(a1 + 128) = 0;
LABEL_18:
  v11 = *(void ***)(a1 + 176);
  v12 = *(void ***)(a1 + 184);
  if (v12 == v11)
  {
    v13 = (_QWORD *)(a1 + 208);
    v12 = *(void ***)(a1 + 176);
  }
  else
  {
    v13 = (_QWORD *)(a1 + 208);
    v14 = *(_QWORD *)(a1 + 200);
    v15 = &v11[v14 / 0x2A];
    v16 = (unint64_t)*v15 + 96 * (v14 % 0x2A);
    v17 = (unint64_t)v11[(*(_QWORD *)(a1 + 208) + v14) / 0x2A] + 96 * ((*(_QWORD *)(a1 + 208) + v14) % 0x2A);
    if (v16 != v17)
    {
      do
      {
        v18 = *(void **)(v16 + 64);
        if (v18 != (void *)(v16 + 80))
          free(v18);
        v19 = *(void **)(v16 + 32);
        if (v19 != (void *)(v16 + 48))
          free(v19);
        v16 += 96;
        if (v16 - (_QWORD)*v15 == 4032)
        {
          v20 = (unint64_t)v15[1];
          ++v15;
          v16 = v20;
        }
      }
      while (v16 != v17);
      v11 = *(void ***)(a1 + 176);
      v12 = *(void ***)(a1 + 184);
    }
  }
  *v13 = 0;
  v21 = (char *)v12 - (char *)v11;
  if (v21 >= 0x11)
  {
    do
    {
      operator delete(*v11);
      v22 = *(_QWORD *)(a1 + 184);
      v11 = (void **)(*(_QWORD *)(a1 + 176) + 8);
      *(_QWORD *)(a1 + 176) = v11;
      v21 = v22 - (_QWORD)v11;
    }
    while (v21 > 0x10);
  }
  if (v21 >> 3 == 1)
  {
    v23 = 21;
    goto LABEL_35;
  }
  if (v21 >> 3 == 2)
  {
    v23 = 42;
LABEL_35:
    *(_QWORD *)(a1 + 200) = v23;
  }
  for (i = 0; i != 40; i += 8)
    (***(void (****)(_QWORD))(a1 + 1160 + i))(*(_QWORD *)(a1 + 1160 + i));
  v25 = *(void (****)(void))(a1 + 1208);
  if (*(void (****)(void))(a1 + 1200) != v25)
  {
    v26 = *(void (****)(void))(a1 + 1200);
    do
    {
      v27 = *v26;
      v26 += 9;
      (*v27)();
    }
    while (v26 != v25);
  }
  *(_DWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0;
  *(_WORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_BYTE *)(a1 + 104) = 0;
  return sub_1C5961C00((_DWORD *)(a1 + 64));
}

void sub_1C596F658(uint64_t a1, _QWORD *a2, llvm::MCAsmLayout *a3)
{
  uint64_t *v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  _QWORD *v8;
  unsigned int v9;
  _QWORD *v10;
  uint64_t v11;
  const void *v12;
  size_t v13;
  int v14;
  uint64_t v15;
  _QWORD *v16;
  unint64_t v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  uint64_t v21;
  _QWORD *v22;
  _QWORD *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  uint64_t v27;
  char *v28;
  __int128 v29;
  char *v30;
  char *v31;
  uint64_t v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  uint64_t v40;
  BOOL v41;
  int v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t *v45;
  uint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t (**v49)();
  uint64_t (**v50)();
  uint64_t v51;
  _QWORD *v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t (*v61)();
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  unint64_t v68;
  unsigned int v69;
  int v70;
  uint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  llvm::MCAsmLayout *v75;
  _QWORD *v76;
  uint64_t v77;
  unint64_t v78;
  unsigned int v79;
  uint64_t *v80;
  int v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  char v93;
  int v94;
  char v95;
  unsigned int v96;
  unsigned int v97;
  unsigned int v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  unint64_t v102;
  _QWORD *v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  const llvm::MCFragment *v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  int *v114;
  unint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  int v122;
  unint64_t v123;
  const llvm::MCFragment *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unsigned int v128;
  uint64_t v129;
  unint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t i;
  uint64_t v134;
  uint64_t v135;
  char *v136;
  _QWORD *v137;
  _QWORD *v138;
  _QWORD *v139;
  _QWORD *v140;
  int v141;
  _QWORD *v142;
  char v143;
  _QWORD *v146;
  uint64_t *v147;
  _QWORD *v148;
  uint64_t v149;
  uint64_t v150;
  char v152;
  uint64_t v153;
  uint64_t *v154;
  _QWORD *v155;
  uint64_t *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t (**v160)();
  _BYTE v161[48];
  __int16 v162;
  _QWORD v163[3];

  v163[1] = *MEMORY[0x1E0C80C00];
  v3 = (uint64_t *)a2[4];
  v4 = (uint64_t *)a2[5];
  if (v3 != v4)
  {
    v142 = (_QWORD *)(a1 + 552);
    v140 = (_QWORD *)(a1 + 504);
    v146 = (_QWORD *)(a1 + 456);
    v148 = (_QWORD *)(a1 + 408);
    v137 = (_QWORD *)(a1 + 312);
    v138 = (_QWORD *)(a1 + 264);
    v139 = (_QWORD *)(a1 + 360);
    v153 = a1 + 64;
    v155 = (_QWORD *)(a1 + 216);
    v5 = a1 + 120;
    do
    {
      v6 = *v3;
      v159 = v6;
      v7 = *(_QWORD *)(v6 + 248);
      if (v7 >= 9)
      {
        v8 = *(_QWORD **)(v6 + 240);
        v9 = sub_1C5E3DF4C(v8, (uint64_t)v8 + v7);
        llvm::StringTableBuilder::add(v153, (uint64_t)v8, v7 | ((unint64_t)v9 << 32));
      }
      if (*(_BYTE *)(v6 + 226))
      {
        v10 = v155;
        switch(*(_BYTE *)(v6 + 224))
        {
          case 0:
            goto LABEL_36;
          case 1:
            v10 = v138;
            goto LABEL_36;
          case 3:
          case 0xF:
          case 0x16:
            v10 = v148;
            goto LABEL_36;
          case 5:
            v42 = *(unsigned __int8 *)(v6 + 225);
            v10 = v146;
            if (v42 == 3)
              goto LABEL_36;
            v10 = v137;
            if (v42 == 1)
              goto LABEL_36;
            v136 = "Unhandled mapping of read-write csect to section.";
            goto LABEL_130;
          case 9:
            v10 = v146;
            goto LABEL_36;
          case 0xA:
            v10 = v139;
            goto LABEL_36;
          case 0x10:
            v136 = "toc-data not yet supported when writing object files.";
            goto LABEL_130;
          case 0x14:
            v10 = v140;
            goto LABEL_36;
          case 0x15:
            v10 = v142;
LABEL_36:
            sub_1C5971E84((uint64_t)v10, &v159);
            v43 = v10[5] + v10[4] - 1;
            v44 = *(_QWORD *)(v10[1] + 8 * (v43 / 0x2A)) + 96 * (v43 % 0x2A);
            *sub_1C5717998(v5, &v159) = v44;
            goto LABEL_37;
          default:
            v136 = "Unhandled mapping of csect to section.";
            goto LABEL_130;
        }
      }
      v11 = operator new();
      *(_QWORD *)v11 = v6;
      *(_DWORD *)(v11 + 8) = -1;
      *(_OWORD *)(v11 + 16) = xmmword_1C85F6FF0;
      *(_QWORD *)(v11 + 32) = v11 + 48;
      *(_QWORD *)(v11 + 40) = 0x100000000;
      *(_QWORD *)(v11 + 64) = v11 + 80;
      *(_QWORD *)(v11 + 72) = 0x100000000;
      v158 = v11;
      *sub_1C5717998(v5, &v159) = v11;
      v12 = *(const void **)(v6 + 200);
      v13 = *(_QWORD *)(v6 + 208);
      v14 = *(_DWORD *)(v6 + 256);
      v15 = v158;
      v157 = v158;
      v158 = 0;
      v160 = off_1E8184600;
      memset(v161, 0, 44);
      *(_DWORD *)&v161[44] = v14 | 0x10;
      v162 = -3;
      memcpy(v161, v12, v13);
      v157 = 0;
      v160 = off_1E8184628;
      v163[0] = v15;
      memcpy(v161, v12, v13);
      sub_1C59723C8(&v157);
      v16 = *(_QWORD **)(a1 + 1208);
      v17 = *(_QWORD *)(a1 + 1216);
      if ((unint64_t)v16 >= v17)
      {
        v23 = *(_QWORD **)(a1 + 1200);
        v24 = 0x8E38E38E38E38E39 * (v16 - v23) + 1;
        if (v24 > 0x38E38E38E38E38ELL)
          abort();
        v25 = 0x8E38E38E38E38E39 * ((uint64_t)(v17 - (_QWORD)v23) >> 3);
        if (2 * v25 > v24)
          v24 = 2 * v25;
        if (v25 >= 0x1C71C71C71C71C7)
          v26 = 0x38E38E38E38E38ELL;
        else
          v26 = v24;
        if (v26 > 0x38E38E38E38E38ELL)
          sub_1C4764EE4();
        v27 = 9 * v26;
        v28 = (char *)operator new(72 * v26);
        v29 = *(_OWORD *)&v161[16];
        v30 = &v28[8 * (v16 - v23)];
        *(_OWORD *)(v30 + 8) = *(_OWORD *)v161;
        v31 = &v28[8 * v27];
        *(_OWORD *)(v30 + 24) = v29;
        *(_OWORD *)(v30 + 40) = *(_OWORD *)&v161[32];
        *((_WORD *)v30 + 28) = v162;
        *(_QWORD *)v30 = off_1E8184628;
        v32 = v163[0];
        v163[0] = 0;
        *((_QWORD *)v30 + 8) = v32;
        v22 = v30 + 72;
        if (v16 == v23)
        {
          *(_QWORD *)(a1 + 1200) = v30;
          *(_QWORD *)(a1 + 1208) = v22;
          *(_QWORD *)(a1 + 1216) = v31;
        }
        else
        {
          do
          {
            *((_QWORD *)v30 - 9) = off_1E8184600;
            v30 -= 72;
            v33 = *((_OWORD *)v16 - 4);
            v34 = *((_OWORD *)v16 - 3);
            v35 = *((_OWORD *)v16 - 2);
            *((_WORD *)v30 + 28) = *((_WORD *)v16 - 8);
            *(_OWORD *)(v30 + 40) = v35;
            *(_OWORD *)(v30 + 24) = v34;
            *(_OWORD *)(v30 + 8) = v33;
            *(_QWORD *)v30 = off_1E8184628;
            v36 = *(v16 - 1);
            *(v16 - 1) = 0;
            *((_QWORD *)v30 + 8) = v36;
            v16 -= 9;
          }
          while (v16 != v23);
          v16 = *(_QWORD **)(a1 + 1200);
          v37 = *(_QWORD **)(a1 + 1208);
          *(_QWORD *)(a1 + 1200) = v30;
          *(_QWORD *)(a1 + 1208) = v22;
          *(_QWORD *)(a1 + 1216) = v31;
          if (v37 != v16)
          {
            v38 = v37 - 9;
            v39 = v37 - 9;
            do
            {
              v40 = *v39;
              v39 -= 9;
              (*(void (**)(_QWORD *))(v40 + 8))(v38);
              v41 = v38 == v16;
              v38 = v39;
            }
            while (!v41);
          }
        }
        if (v16)
          operator delete(v16);
      }
      else
      {
        *v16 = off_1E8184600;
        v18 = *(_OWORD *)v161;
        v19 = *(_OWORD *)&v161[16];
        v20 = *(_OWORD *)&v161[32];
        *((_WORD *)v16 + 28) = v162;
        *(_OWORD *)(v16 + 5) = v20;
        *(_OWORD *)(v16 + 3) = v19;
        *(_OWORD *)(v16 + 1) = v18;
        *v16 = off_1E8184628;
        v21 = v163[0];
        v163[0] = 0;
        v16[8] = v21;
        v22 = v16 + 9;
      }
      *(_QWORD *)(a1 + 1208) = v22;
      v160 = off_1E8184628;
      sub_1C59723C8(v163);
      sub_1C59723C8(&v158);
LABEL_37:
      ++v3;
    }
    while (v3 != v4);
  }
  v45 = (uint64_t *)a2[7];
  v46 = (uint64_t *)a2[8];
  if (v45 != v46)
  {
    v47 = a1 + 120;
    do
    {
      v48 = *v45;
      if ((*(_BYTE *)(*v45 + 8) & 1) == 0)
      {
        v49 = (uint64_t (**)())sub_1C5972464(*v45);
        v50 = v49;
        v160 = v49;
        if (*((_BYTE *)v49 + 225))
        {
          if ((uint64_t (*)())v48 == v49[29] || (*(_BYTE *)(v48 + 8) & 0x10) == 0)
            goto LABEL_61;
          v51 = *sub_1C5717998(v47, (uint64_t *)&v160);
          v52 = (_QWORD *)(v51 + 32);
          v53 = *(unsigned int *)(v51 + 40);
          if (v53 >= *(_DWORD *)(v51 + 44))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v52, v51 + 48, v53 + 1, 16);
            v53 = *(_QWORD *)(v51 + 32) + 16 * *(unsigned int *)(v51 + 40);
            *(_QWORD *)v53 = v48;
            *(_QWORD *)(v53 + 8) = 0xFFFFFFFFLL;
            LODWORD(v53) = *(_DWORD *)(v51 + 40);
          }
          else
          {
            v54 = *v52 + 16 * v53;
            *(_QWORD *)v54 = v48;
            *(_DWORD *)(v54 + 8) = -1;
          }
          *(_DWORD *)(v51 + 40) = v53 + 1;
          v55 = *(_QWORD *)(v48 + 64);
          if (!v55)
          {
            if ((*(_BYTE *)v48 & 4) != 0)
            {
              v62 = *(uint64_t **)(v48 - 8);
              v63 = *v62;
              v56 = (uint64_t)(v62 + 2);
              v57 = v63;
            }
            else
            {
              v56 = 0;
              v57 = 0;
            }
            sub_1C52C2F08(v56, v57);
          }
          if (v55 < 9)
            goto LABEL_61;
          v60 = *(_QWORD *)(v48 + 64);
          if (v60)
          {
            v61 = *(uint64_t (**)())(v48 + 56);
          }
          else
          {
            if ((*(_BYTE *)v48 & 4) != 0)
            {
              v66 = *(uint64_t **)(v48 - 8);
              v67 = *v66;
              v64 = (uint64_t)(v66 + 2);
              v65 = v67;
            }
            else
            {
              v64 = 0;
              v65 = 0;
            }
            v61 = (uint64_t (*)())sub_1C52C2F08(v64, v65);
            v60 = v68;
          }
          goto LABEL_60;
        }
        sub_1C5971E84(a1 + 168, &v160);
        v58 = *(_QWORD *)(a1 + 208) + *(_QWORD *)(a1 + 200) - 1;
        v59 = *(_QWORD *)(*(_QWORD *)(a1 + 176) + 8 * (v58 / 0x2A)) + 96 * (v58 % 0x2A);
        *sub_1C5717998(v47, (uint64_t *)&v160) = v59;
        v60 = (unint64_t)v50[31];
        if (v60 >= 9)
        {
          v61 = v50[30];
LABEL_60:
          v69 = sub_1C5E3DF4C(v61, (uint64_t)v61 + v60);
          llvm::StringTableBuilder::add(a1 + 64, (uint64_t)v61, v60 | ((unint64_t)v69 << 32));
        }
      }
LABEL_61:
      ++v45;
    }
    while (v45 != v46);
  }
  v70 = 1;
  llvm::StringTableBuilder::finalizeStringTable((llvm::StringTableBuilder *)(a1 + 64), 1);
  v71 = *(_QWORD *)(a1 + 176);
  if (*(_QWORD *)(a1 + 184) == v71)
  {
    v75 = a3;
  }
  else
  {
    v72 = *(_QWORD *)(a1 + 200);
    v73 = *(_QWORD *)(v71 + 8 * (v72 / 0x2A)) + 96 * (v72 % 0x2A);
    v74 = *(_QWORD *)(v71 + 8 * ((*(_QWORD *)(a1 + 208) + v72) / 0x2A)) + 96 * ((*(_QWORD *)(a1 + 208) + v72) % 0x2A);
    v75 = a3;
    if (v73 != v74)
    {
      v76 = (_QWORD *)(v71 + 8 * (v72 / 0x2A));
      do
      {
        *(_QWORD *)(v73 + 16) = 0;
        *(_QWORD *)(v73 + 24) = 0;
        *(_DWORD *)(v73 + 8) = v70;
        v77 = *(_QWORD *)v73;
        v73 += 96;
        v160 = *(uint64_t (***)())(v77 + 232);
        *((_DWORD *)sub_1C62B452C((uint64_t *)(a1 + 144), &v160) + 2) = v70;
        if (v73 - *v76 == 4032)
        {
          v78 = v76[1];
          ++v76;
          v73 = v78;
        }
        v70 += 2;
      }
      while (v73 != v74);
    }
  }
  v79 = 0;
  v143 = 0;
  v80 = (uint64_t *)(a1 + 144);
  v81 = 1;
  v82 = (uint64_t *)(a1 + 1160);
  v156 = (uint64_t *)(a1 + 144);
  do
  {
    v83 = *v82;
    v84 = *(_QWORD *)(*v82 + 72);
    if (*(_QWORD *)(*v82 + 80) != v84)
    {
      v147 = v82;
      v149 = *v82;
      v85 = *(_QWORD *)(v83 + 96);
      v86 = (uint64_t *)(v84 + 8 * (v85 >> 9));
      v87 = *v86;
      v88 = *v86 + 8 * (v85 & 0x1FF);
      v89 = *(_QWORD *)(v84 + (((*(_QWORD *)(v83 + 104) + v85) >> 6) & 0x3FFFFFFFFFFFFF8))
          + 8 * ((*(_QWORD *)(v83 + 104) + v85) & 0x1FF);
      if (v88 != v89)
      {
        v90 = *v86 + 8 * (v85 & 0x1FF);
        v91 = v86;
        while (!*(_QWORD *)(*(_QWORD *)v90 + 40))
        {
          v90 += 8;
          if (v90 - v87 == 4096)
          {
            v92 = v91[1];
            ++v91;
            v87 = v92;
            v90 = v92;
          }
          if (v90 == v89)
            goto LABEL_109;
        }
        if (v81 >= 0x8000)
        {
          v136 = "Section index overflow!";
          goto LABEL_130;
        }
        v93 = 0;
        *(_WORD *)(v149 + 56) = v81;
        ++*(_WORD *)(a1 + 24);
        v94 = *(_DWORD *)(v149 + 52);
        v95 = (v94 == 1024) | v143;
        if (v94 == 1024)
          v96 = 0;
        else
          v96 = v79;
        v143 |= v94 == 1024;
        if ((v95 & 1) != 0)
          v97 = v96;
        else
          v97 = 0;
        v141 = v81 + 1;
        if (v94 == 2048)
          v98 = v97;
        else
          v98 = v96;
        v150 = v89;
        do
        {
          v99 = *(_QWORD **)v88;
          v100 = *(_QWORD *)(*(_QWORD *)v88 + 40);
          if (v100)
          {
            v152 = v93;
            v154 = v86;
            v101 = v99[1];
            if (v99[2] != v101)
            {
              v102 = v99[4];
              v103 = (_QWORD *)(v101 + 8 * (v102 / 0x2A));
              v104 = *v103 + 96 * (v102 % 0x2A);
              v105 = *(_QWORD *)(v101 + 8 * ((v102 + v100) / 0x2A)) + 96 * ((v102 + v100) % 0x2A);
              while (v104 != v105)
              {
                v106 = *(_QWORD *)v104;
                *(_QWORD *)(v104 + 16) = (v98
                                        + (unint64_t)(1 << *(_BYTE *)(*(_QWORD *)v104 + 24))
                                        - 1) & -(uint64_t)(1 << *(_BYTE *)(*(_QWORD *)v104 + 24));
                v107 = *(const llvm::MCFragment **)(v106 + 104);
                llvm::MCAsmLayout::ensureValid(v75, v107);
                v108 = *((_QWORD *)v107 + 4);
                llvm::MCAssembler::computeFragmentSize(*(_QWORD *)v75, (uint64_t)v75, (uint64_t)v107);
                v110 = v109 + v108;
                *(_QWORD *)(v104 + 24) = v109 + v108;
                v111 = *(_DWORD *)(v104 + 16);
                *(_DWORD *)(v104 + 8) = v70;
                v160 = *(uint64_t (***)())(v106 + 232);
                *((_DWORD *)sub_1C62B452C(v156, &v160) + 2) = v70;
                v112 = *(unsigned int *)(v104 + 40);
                v70 += 2;
                if ((_DWORD)v112)
                {
                  v113 = 16 * v112;
                  v114 = (int *)(*(_QWORD *)(v104 + 32) + 8);
                  do
                  {
                    *v114 = v70;
                    v160 = (uint64_t (**)())*((_QWORD *)v114 - 1);
                    *((_DWORD *)sub_1C62B452C(v156, &v160) + 2) = v70;
                    v70 += 2;
                    v114 += 4;
                    v113 -= 16;
                  }
                  while (v113);
                }
                v104 += 96;
                if (v104 - *v103 == 4032)
                {
                  v115 = v103[1];
                  ++v103;
                  v104 = v115;
                }
                v75 = a3;
                v98 = v111 + v110;
              }
            }
            if ((v152 & 1) == 0)
              *(_QWORD *)(v149 + 16) = *(_QWORD *)(*(_QWORD *)(v99[1] + 8 * (v99[4] / 0x2AuLL))
                                                 + 96 * (v99[4] % 0x2AuLL)
                                                 + 16);
            v93 = 1;
            v86 = v154;
            v89 = v150;
          }
          v88 += 8;
          if (v88 - *v86 == 4096)
          {
            v116 = v86[1];
            ++v86;
            v88 = v116;
          }
        }
        while (v88 != v89);
        v79 = (v98 + 3) & 0xFFFFFFFC;
        *(_QWORD *)(v149 + 24) = v79 - *(_QWORD *)(v149 + 16);
        v81 = v141;
      }
LABEL_109:
      v80 = (uint64_t *)(a1 + 144);
      v82 = v147;
    }
    ++v82;
  }
  while (v82 != (uint64_t *)(a1 + 1200));
  v117 = *(_QWORD *)(a1 + 1200);
  v118 = *(_QWORD *)(a1 + 1208);
  if (v117 == v118)
  {
    v119 = a1;
  }
  else
  {
    v119 = a1;
    do
    {
      v120 = *(uint64_t **)(v117 + 64);
      v121 = *v120;
      v122 = v81 + 1;
      *(_WORD *)(v117 + 56) = v81;
      ++*(_WORD *)(a1 + 24);
      *((_DWORD *)v120 + 2) = v70;
      v160 = *(uint64_t (***)())(v121 + 232);
      *((_DWORD *)sub_1C62B452C(v80, &v160) + 2) = v70;
      v70 += 2;
      v123 = (v79 + (unint64_t)(1 << *(_BYTE *)(v121 + 24)) - 1) & -(uint64_t)(1 << *(_BYTE *)(v121 + 24));
      v120[2] = v123;
      *(_QWORD *)(v117 + 16) = v123;
      v124 = *(const llvm::MCFragment **)(v121 + 104);
      llvm::MCAsmLayout::ensureValid(v75, v124);
      v125 = *((_QWORD *)v124 + 4);
      llvm::MCAssembler::computeFragmentSize(*(_QWORD *)v75, (uint64_t)v75, (uint64_t)v124);
      v120[3] = v126 + v125;
      *(_QWORD *)(v117 + 24) = v126 + v125;
      v79 = (*((_DWORD *)v120 + 4) + v126 + v125 + 3) & 0xFFFFFFFC;
      v117 += 72;
      v81 = v122;
    }
    while (v117 != v118);
  }
  v127 = 0;
  *(_DWORD *)(v119 + 8) = v70;
  v128 = 72;
  if (!*(_BYTE *)(*(_QWORD *)(v119 + 56) + 8))
    v128 = 40;
  v129 = 24;
  if (!*(_BYTE *)(*(_QWORD *)(v119 + 56) + 8))
    v129 = 20;
  v130 = v129 + v128 * (unint64_t)*(unsigned __int16 *)(v119 + 24);
  do
  {
    v131 = *(_QWORD *)(a1 + 1160 + v127);
    if (*(__int16 *)(v131 + 56) != -3 && !*(_BYTE *)(v131 + 58))
    {
      *(_QWORD *)(v131 + 32) = v130;
      v130 += *(_QWORD *)(v131 + 24);
      if (v130 > *(_QWORD *)(v119 + 112))
      {
        v136 = "Section raw data overflowed this object file.";
LABEL_130:
        llvm::report_fatal_error((llvm *)v136, (const char *)1);
      }
    }
    v127 += 8;
  }
  while (v127 != 40);
  v132 = *(_QWORD *)(v119 + 1200);
  for (i = *(_QWORD *)(v119 + 1208); v132 != i; v132 += 72)
  {
    v134 = 1 << *(_BYTE *)(**(_QWORD **)(v132 + 64) + 24);
    v135 = (v130 + v134 - 1) & -(uint64_t)v134;
    *(_QWORD *)(v132 + 32) = v135;
    v130 = (*(_QWORD *)(v132 + 24) + v135 + 3) & 0xFFFFFFFFFFFFFFFCLL;
  }
  *(_QWORD *)(v119 + 32) = v130;
}

uint64_t sub_1C59702CC(uint64_t a1, uint64_t a2, llvm::MCAsmLayout *a3, uint64_t a4, uint64_t a5, _QWORD *a6, _QWORD *a7)
{
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  _QWORD *v17;
  unsigned int v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t result;
  uint64_t v27;
  uint64_t v28;
  llvm::MCAsmLayout *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  uint64_t *v40;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;

  v12 = *(_QWORD *)(*a6 + 16);
  v13 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a2 + 8) + 80))(*(_QWORD *)(a2 + 8), *(unsigned int *)(a5 + 12));
  v14 = (*(uint64_t (**)(_QWORD, _QWORD *, uint64_t, _QWORD))(**(_QWORD **)(a1 + 56) + 24))(*(_QWORD *)(a1 + 56), a6, a5, *(_DWORD *)(v13 + 16) & 1);
  v15 = sub_1C5972464(v12);
  v16 = v15;
  v43 = v15;
  if (*(_BYTE *)(v15 + 226) && *(_BYTE *)(v15 + 224) == 16)
  {
    v20 = "toc-data not yet supported when writing object files.";
    goto LABEL_40;
  }
  v44 = v12;
  v45 = v12;
  v46 = 0;
  v40 = (uint64_t *)(a1 + 144);
  if (!sub_1C52A0CF8((uint64_t *)(a1 + 144), &v45, &v46)
    || v46 == *(_QWORD *)(a1 + 144) + 16 * *(unsigned int *)(a1 + 160))
  {
    v46 = *(_QWORD *)(v16 + 232);
    v17 = sub_1C62B452C((uint64_t *)(a1 + 144), &v46);
  }
  else
  {
    v17 = sub_1C62B452C((uint64_t *)(a1 + 144), &v44);
  }
  v18 = *((_DWORD *)v17 + 2);
  if ((v14 & 0xDF) != 0)
  {
    if (v14 == 49)
    {
LABEL_11:
      v19 = *(_QWORD *)(*sub_1C5717998(a1 + 120, &v43) + 16)
          - *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 416) + 8 * (*(_QWORD *)(a1 + 440) / 0x2AuLL))
                      + 96 * (*(_QWORD *)(a1 + 440) % 0x2AuLL)
                      + 16)
          + a6[2];
      if (v14 == 3 && (unint64_t)(v19 + 0x8000) >= 0x10000)
      {
        v20 = "TOCEntryOffset overflows in small code model mode";
        goto LABEL_40;
      }
      goto LABEL_21;
    }
    if (v14 != 36)
    {
      if (v14 != 3)
        goto LABEL_22;
      goto LABEL_11;
    }
    v19 = 0;
  }
  else
  {
    v45 = v16;
    if (*(_BYTE *)(v16 + 260))
    {
      v46 = 0;
      sub_1C59415F0(a3, (uint64_t *)v12, 1, &v46);
      v21 = v46;
    }
    else
    {
      v22 = *(_QWORD *)v12 & 0xFFFFFFFFFFFFFFF8;
      if (!v22 && (*(_DWORD *)(v12 + 8) & 0x1C00) == 0x800)
      {
        *(_DWORD *)(v12 + 8) |= 4u;
        llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v12 + 24));
        *(_QWORD *)v12 = *(_QWORD *)v12 & 7 | v22;
      }
      v39 = v22;
      v21 = *(_QWORD *)(*sub_1C5717998(a1 + 120, &v45) + 16);
      if (v39)
      {
        v46 = 0;
        sub_1C59415F0(a3, (uint64_t *)v12, 1, &v46);
        v21 += v46;
      }
    }
    v19 = a6[2] + v21;
  }
LABEL_21:
  *a7 = v19;
LABEL_22:
  llvm::MCAsmLayout::ensureValid(a3, (const llvm::MCFragment *)a4);
  v23 = (*(_DWORD *)(a5 + 8) + *(_DWORD *)(a4 + 32));
  v42 = *(_QWORD *)(a4 + 16);
  v24 = a1 + 120;
  v25 = sub_1C5717998(a1 + 120, &v42);
  result = (uint64_t)sub_1C476CB98((_DWORD *)(*v25 + 64), v18 | ((unint64_t)v23 << 32), bswap32(v14) >> 16);
  v27 = a6[1];
  if (!v27)
    return result;
  v28 = *(_QWORD *)(v27 + 16);
  if (v12 == v28)
  {
    v20 = "relocation for opposite term is not yet supported";
    goto LABEL_40;
  }
  v29 = a3;
  v30 = sub_1C5972464(*(_QWORD *)(v27 + 16));
  if (v16 == v30)
  {
    v20 = "relocation for paired relocatable term is not yet supported";
LABEL_40:
    llvm::report_fatal_error((llvm *)v20, (const char *)1);
  }
  v31 = v30;
  v44 = v28;
  v45 = v28;
  v32 = v23 << 32;
  v46 = 0;
  if (!sub_1C52A0CF8(v40, &v45, &v46)
    || v46 == *(_QWORD *)(a1 + 144) + 16 * *(unsigned int *)(a1 + 160))
  {
    v46 = *(_QWORD *)(v31 + 232);
    v33 = sub_1C62B452C(v40, &v46);
  }
  else
  {
    v33 = sub_1C62B452C(v40, &v44);
  }
  v34 = *((unsigned int *)v33 + 2);
  v35 = sub_1C5717998(a1 + 120, &v42);
  sub_1C476CB98((_DWORD *)(*v35 + 64), v32 | v34, BYTE1(v14) | 0x100);
  v45 = v31;
  if (*(_BYTE *)(v31 + 260))
  {
    v46 = 0;
    result = sub_1C59415F0(v29, (uint64_t *)v28, 1, &v46);
    v36 = v46;
  }
  else
  {
    v37 = *(_QWORD *)v28 & 0xFFFFFFFFFFFFFFF8;
    if (!v37 && (*(_DWORD *)(v28 + 8) & 0x1C00) == 0x800)
    {
      *(_DWORD *)(v28 + 8) |= 4u;
      llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(v28 + 24));
      v37 = v38;
      *(_QWORD *)v28 = *(_QWORD *)v28 & 7 | v38;
    }
    result = (uint64_t)sub_1C5717998(v24, &v45);
    v36 = *(_QWORD *)(*(_QWORD *)result + 16);
    if (v37)
    {
      v46 = 0;
      result = sub_1C59415F0(v29, (uint64_t *)v28, 1, &v46);
      v36 += v46;
    }
  }
  *a7 -= v36;
  return result;
}

uint64_t sub_1C5970738(uint64_t a1, unint64_t a2, const llvm::MCAsmLayout *a3)
{
  unint64_t v4;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  int v33;
  _QWORD *v34;
  uint64_t v35;
  unsigned int v36;
  llvm::raw_ostream *v37;
  __int16 v38;
  unsigned int v39;
  llvm::raw_ostream *v40;
  unsigned int v41;
  llvm::raw_ostream *v42;
  llvm::raw_ostream *v43;
  llvm::raw_ostream *v44;
  llvm::raw_ostream *v45;
  size_t v46;
  unsigned int v47;
  llvm::raw_ostream *v48;
  unsigned int v49;
  llvm::raw_ostream *v50;
  uint64_t i;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  unint64_t v64;
  _QWORD *v65;
  unint64_t v66;
  unint64_t v67;
  int v68;
  int v69;
  unint64_t v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t j;
  int v76;
  uint64_t v77;
  int v78;
  int v79;
  uint64_t v80;
  _QWORD *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  _QWORD *v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t *v93;
  unint64_t v94;
  unint64_t v95;
  unint64_t v96;
  unsigned int v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t k;
  uint64_t v104;
  unsigned int v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t v108;
  unint64_t v109;
  _QWORD *v110;
  unsigned int *v111;
  unint64_t v112;
  unsigned int *v113;
  uint64_t v114;
  unsigned int *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  unint64_t v119;
  uint64_t *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  uint64_t v126;
  unint64_t v127;
  _QWORD *v128;
  unint64_t v129;
  unint64_t v130;
  __int16 v131;
  uint64_t v132;
  uint64_t **v133;
  uint64_t v134;
  uint64_t *v135;
  int v136;
  uint64_t *v137;
  unint64_t v138;
  char *v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t *v142;
  uint64_t v143;
  unint64_t v144;
  unint64_t v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t m;
  _DWORD *v149;
  unsigned int v150;
  llvm::raw_ostream *v151;
  unsigned int v152;
  llvm::raw_ostream *v153;
  _QWORD *v154;
  char *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t *v168;
  uint64_t *v169;
  uint64_t v170;
  char v171[8];

  if ((*(_BYTE *)(a2 + 500) & 4) != 0)
  {
    v156 = "Incremental linking not supported for XCOFF.";
    goto LABEL_151;
  }
  v4 = a2;
  v6 = a1 + 1160;
  v170 = a1 + 1200;
  v163 = a1 + 1160;
  do
  {
    v7 = *(_QWORD *)v6;
    if (*(__int16 *)(*(_QWORD *)v6 + 56) != -3)
    {
      v8 = *(_QWORD *)(v7 + 72);
      if (*(_QWORD *)(v7 + 80) != v8)
      {
        v9 = *(_QWORD *)(v7 + 96);
        v10 = (uint64_t *)(v8 + 8 * (v9 >> 9));
        v11 = *v10;
        v12 = *v10 + 8 * (v9 & 0x1FF);
        v13 = *(_QWORD *)(v8 + (((*(_QWORD *)(v7 + 104) + v9) >> 6) & 0x3FFFFFFFFFFFFF8))
            + 8 * ((*(_QWORD *)(v7 + 104) + v9) & 0x1FF);
        while (1)
        {
          if (v12 == v13)
            goto LABEL_17;
          v14 = *(_QWORD **)v12;
          v15 = *(_QWORD *)(*(_QWORD *)v12 + 40);
          if (v15)
          {
            v16 = v14[1];
            if (v14[2] != v16)
              break;
          }
LABEL_15:
          v12 += 8;
          if (v12 - v11 == 4096)
          {
            v25 = v10[1];
            ++v10;
            v11 = v25;
            v12 = v25;
          }
        }
        v17 = v14[4];
        v18 = (unint64_t *)(v16 + 8 * (v17 / 0x2A));
        v19 = *v18;
        v20 = *v18 + 96 * (v17 % 0x2A);
        v21 = *(_QWORD *)(v16 + 8 * ((v17 + v15) / 0x2A)) + 96 * ((v17 + v15) % 0x2A);
        while (1)
        {
          if (v20 == v21)
            goto LABEL_15;
          v22 = *(unsigned int *)(v20 + 72);
          if (v22 > 0xFFFE)
            break;
          v23 = *(unsigned int *)(v7 + 48);
          if (0xFFFF - v22 <= v23)
            break;
          *(_DWORD *)(v7 + 48) = v23 + v22;
          v20 += 96;
          if (v20 - v19 == 4032)
          {
            v24 = v18[1];
            ++v18;
            v19 = v24;
            v20 = v24;
          }
        }
        v156 = "relocation entries overflowed; overflow section is not implemented yet";
LABEL_151:
        llvm::report_fatal_error((llvm *)v156, (const char *)1);
      }
    }
LABEL_17:
    v6 += 8;
  }
  while (v6 != v170);
  v26 = *(_QWORD *)(a1 + 1200);
  v27 = *(_QWORD *)(a1 + 1208);
  if (v26 != v27)
  {
    v28 = *(_QWORD *)(a1 + 1200);
    do
    {
      *(_DWORD *)(v28 + 48) = *(_DWORD *)(*(_QWORD *)(v28 + 64) + 72);
      v28 += 72;
    }
    while (v28 != v27);
  }
  v29 = *(_QWORD *)(a1 + 32);
  v30 = 1160;
  while (2)
  {
    v31 = *(_QWORD *)(a1 + v30);
    if (*(__int16 *)(v31 + 56) != -3)
    {
      v32 = *(_DWORD *)(v31 + 48);
      if (v32)
      {
        *(_QWORD *)(v31 + 40) = v29;
        v29 += (10 * v32);
        if (v29 > *(_QWORD *)(a1 + 112))
        {
LABEL_152:
          v156 = "Relocation data overflowed this object file.";
          goto LABEL_151;
        }
      }
    }
    v30 += 8;
    if (v30 != 1200)
      continue;
    break;
  }
  while (v26 != v27)
  {
    v33 = *(_DWORD *)(v26 + 48);
    if (v33)
    {
      *(_QWORD *)(v26 + 40) = v29;
      v29 += (10 * v33);
      if (v29 > *(_QWORD *)(a1 + 112))
        goto LABEL_152;
    }
    v26 += 72;
  }
  if (*(_DWORD *)(a1 + 8))
    *(_QWORD *)(a1 + 16) = v29;
  v34 = *(_QWORD **)(a1 + 40);
  v35 = (*(uint64_t (**)(_QWORD *))(*v34 + 80))(v34);
  v157 = v34[2];
  v158 = v34[4];
  if (*(_BYTE *)(*(_QWORD *)(a1 + 56) + 8))
    v36 = 503;
  else
    v36 = 479;
  v37 = *(llvm::raw_ostream **)(a1 + 40);
  v38 = __rev16(v36);
  if ((*(_DWORD *)(a1 + 48) - 1) >= 2)
    LOWORD(v36) = v38;
  *(_WORD *)v171 = v36;
  llvm::raw_ostream::write(v37, v171, 2uLL);
  v39 = *(unsigned __int16 *)(a1 + 24);
  v40 = *(llvm::raw_ostream **)(a1 + 40);
  v41 = bswap32(v39) >> 16;
  if ((*(_DWORD *)(a1 + 48) - 1) >= 2)
    LOWORD(v39) = v41;
  *(_WORD *)v171 = v39;
  llvm::raw_ostream::write(v40, v171, 2uLL);
  v42 = *(llvm::raw_ostream **)(a1 + 40);
  *(_DWORD *)v171 = 0;
  llvm::raw_ostream::write(v42, v171, 4uLL);
  sub_1C5972550(a1, *(_QWORD *)(a1 + 16));
  v159 = v35;
  if (*(_BYTE *)(*(_QWORD *)(a1 + 56) + 8))
  {
    v43 = *(llvm::raw_ostream **)(a1 + 40);
    *(_WORD *)v171 = 0;
    llvm::raw_ostream::write(v43, v171, 2uLL);
    v44 = *(llvm::raw_ostream **)(a1 + 40);
    *(_WORD *)v171 = 0;
    llvm::raw_ostream::write(v44, v171, 2uLL);
    v45 = *(llvm::raw_ostream **)(a1 + 40);
    *(_DWORD *)v171 = 0;
    v46 = 4;
  }
  else
  {
    v47 = *(_DWORD *)(a1 + 8);
    v48 = *(llvm::raw_ostream **)(a1 + 40);
    v49 = bswap32(v47);
    if ((*(_DWORD *)(a1 + 48) - 1) >= 2)
      v47 = v49;
    *(_DWORD *)v171 = v47;
    llvm::raw_ostream::write(v48, v171, 4uLL);
    v50 = *(llvm::raw_ostream **)(a1 + 40);
    *(_WORD *)v171 = 0;
    llvm::raw_ostream::write(v50, v171, 2uLL);
    v45 = *(llvm::raw_ostream **)(a1 + 40);
    *(_WORD *)v171 = 0;
    v46 = 2;
  }
  llvm::raw_ostream::write(v45, v171, v46);
  for (i = 1160; i != 1200; i += 8)
    sub_1C59725CC((llvm::raw_ostream *)a1, *(_QWORD *)(a1 + i), 0);
  v52 = *(_QWORD *)(a1 + 1200);
  v53 = *(_QWORD *)(a1 + 1208);
  while (v52 != v53)
  {
    sub_1C59725CC((llvm::raw_ostream *)a1, v52, 1);
    v52 += 72;
  }
  LODWORD(v54) = *(unsigned __int8 *)(*(_QWORD *)(a1 + 56) + 8);
  if (!*(_BYTE *)(*(_QWORD *)(a1 + 56) + 8))
  {
    v55 = v163;
    do
    {
      v56 = *(_QWORD *)v55;
      if (*(__int16 *)(*(_QWORD *)v55 + 56) != -3)
      {
        v54 = *(_QWORD *)(v56 + 16);
        if (*(_BYTE *)(v56 + 58))
        {
          LODWORD(v54) = *(_DWORD *)(v56 + 24) + v54;
        }
        else
        {
          v57 = *(_QWORD *)(v56 + 72);
          if (*(_QWORD *)(v56 + 80) == v57
            || (v58 = *(_QWORD *)(v56 + 96),
                v59 = (uint64_t *)(v57 + 8 * (v58 >> 9)),
                v60 = *v59,
                v61 = *v59 + 8 * (v58 & 0x1FF),
                v167 = *(_QWORD *)(v57 + (((*(_QWORD *)(v56 + 104) + v58) >> 6) & 0x3FFFFFFFFFFFFF8))
                     + 8 * ((*(_QWORD *)(v56 + 104) + v58) & 0x1FF),
                v61 == v167))
          {
            LODWORD(v72) = *(_QWORD *)(v56 + 16);
          }
          else
          {
            do
            {
              v62 = *(_QWORD *)v61;
              v63 = *(_QWORD *)(*(_QWORD *)v61 + 8);
              if (*(_QWORD *)(*(_QWORD *)v61 + 16) != v63)
              {
                v64 = *(_QWORD *)(v62 + 32);
                v65 = (_QWORD *)(v63 + 8 * (v64 / 0x2A));
                v66 = *v65 + 96 * (v64 % 0x2A);
                v67 = *(_QWORD *)(v63 + 8 * ((*(_QWORD *)(v62 + 40) + v64) / 0x2A))
                    + 96 * ((*(_QWORD *)(v62 + 40) + v64) % 0x2A);
                if (v66 != v67)
                {
                  do
                  {
                    v68 = *(_DWORD *)(v66 + 16);
                    if (v68 != (_DWORD)v54)
                      llvm::raw_ostream::write_zeros(*(llvm::raw_ostream **)(a1 + 40), v68 - v54);
                    v54 = *(_QWORD *)(v66 + 24);
                    if (v54)
                    {
                      llvm::MCAssembler::writeSectionData((llvm::MCAssembler *)v4, *(llvm::raw_ostream **)(a1 + 40), *(const llvm::MCSection **)v66, a3);
                      v54 = *(_QWORD *)(v66 + 24);
                    }
                    v69 = *(_DWORD *)(v66 + 16);
                    v66 += 96;
                    if (v66 - *v65 == 4032)
                    {
                      v70 = v65[1];
                      ++v65;
                      v66 = v70;
                    }
                    LODWORD(v54) = v69 + v54;
                  }
                  while (v66 != v67);
                  v60 = *v59;
                }
              }
              v61 += 8;
              if (v61 - v60 == 4096)
              {
                v71 = v59[1];
                ++v59;
                v60 = v71;
                v61 = v71;
              }
            }
            while (v61 != v167);
            v72 = *(_QWORD *)(v56 + 16);
          }
          v73 = *(_DWORD *)(v56 + 24) + v72;
          if (v73 != (_DWORD)v54)
          {
            llvm::raw_ostream::write_zeros(*(llvm::raw_ostream **)(a1 + 40), v73 - v54);
            LODWORD(v54) = v73;
          }
        }
      }
      v55 += 8;
    }
    while (v55 != v170);
    v74 = *(_QWORD *)(a1 + 1200);
    for (j = *(_QWORD *)(a1 + 1208); v74 != j; v74 += 72)
    {
      v76 = *(_DWORD *)(v74 + 16);
      if (v76 != (_DWORD)v54)
        llvm::raw_ostream::write_zeros(*(llvm::raw_ostream **)(a1 + 40), v76 - v54);
      v77 = *(_QWORD *)(v74 + 24);
      if (v77)
      {
        llvm::MCAssembler::writeSectionData((llvm::MCAssembler *)v4, *(llvm::raw_ostream **)(a1 + 40), **(const llvm::MCSection ***)(v74 + 64), a3);
        v77 = *(_QWORD *)(v74 + 24);
      }
      v78 = *(_DWORD *)(v74 + 16) + v77;
      if ((v78 & 3) != 0)
        v79 = 4 - (v78 & 3);
      else
        v79 = 0;
      if ((v78 & 3) != 0)
        llvm::raw_ostream::write_zeros(*(llvm::raw_ostream **)(a1 + 40), 4 - (v78 & 3));
      LODWORD(v54) = v79 + v78;
    }
    v80 = v163;
    do
    {
      v81 = *(_QWORD **)v80;
      v161 = v80;
      if (*(__int16 *)(*(_QWORD *)v80 + 56) != -3)
      {
        v82 = v81[9];
        if (v81[10] != v82)
        {
          v83 = v81[12];
          v84 = v81[13];
          v85 = (uint64_t *)(v82 + 8 * (v83 >> 9));
          v86 = *v85;
          v87 = *v85 + 8 * (v83 & 0x1FF);
          v88 = *(_QWORD *)(v82 + (((v84 + v83) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v84 + v83) & 0x1FF);
          if (v87 != v88)
          {
            v165 = *(_QWORD *)(v82 + (((v84 + v83) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((v84 + v83) & 0x1FF);
            do
            {
              v89 = *(_QWORD **)v87;
              v90 = *(_QWORD *)(*(_QWORD *)v87 + 40);
              if (v90)
              {
                v91 = v89[1];
                if (v89[2] != v91)
                {
                  v168 = v85;
                  v92 = v89[4];
                  v93 = (unint64_t *)(v91 + 8 * (v92 / 0x2A));
                  v94 = *v93;
                  v95 = *v93 + 96 * (v92 % 0x2A);
                  v96 = *(_QWORD *)(v91 + 8 * ((v92 + v90) / 0x2A)) + 96 * ((v92 + v90) % 0x2A);
                  if (v95 != v96)
                  {
                    do
                    {
                      v97 = *(_DWORD *)(v95 + 72);
                      if (v97)
                      {
                        v98 = *(_QWORD *)(v95 + 64);
                        v99 = v98 + 12 * v97;
                        do
                        {
                          v4 = v4 & 0xFFFFFFFF00000000 | *(unsigned int *)(v98 + 8);
                          sub_1C5972784(a1, *(_QWORD *)v98, v4, *(_BYTE *)(*(_QWORD *)v95 + 226), *(_QWORD *)(v95 + 16));
                          v98 += 12;
                        }
                        while (v98 != v99);
                        v94 = *v93;
                      }
                      v95 += 96;
                      if (v95 - v94 == 4032)
                      {
                        v100 = v93[1];
                        ++v93;
                        v94 = v100;
                        v95 = v100;
                      }
                    }
                    while (v95 != v96);
                    v85 = v168;
                    v86 = *v168;
                  }
                  v88 = v165;
                }
              }
              v87 += 8;
              if (v87 - v86 == 4096)
              {
                v101 = v85[1];
                ++v85;
                v86 = v101;
                v87 = v101;
              }
            }
            while (v87 != v88);
          }
        }
      }
      v80 = v161 + 8;
    }
    while (v161 + 8 != v170);
    v102 = *(_QWORD *)(a1 + 1200);
    for (k = *(_QWORD *)(a1 + 1208); v102 != k; v102 += 72)
    {
      v104 = *(_QWORD *)(v102 + 64);
      v105 = *(_DWORD *)(v104 + 72);
      if (v105)
      {
        v106 = *(_QWORD *)(v104 + 64);
        v107 = v106 + 12 * v105;
        do
        {
          v4 = v4 & 0xFFFFFFFF00000000 | *(unsigned int *)(v106 + 8);
          sub_1C5972784(a1, *(_QWORD *)v106, v4, *(_BYTE *)(**(_QWORD **)(v102 + 64) + 226), *(_QWORD *)(*(_QWORD *)(v102 + 64) + 16));
          v106 += 12;
        }
        while (v106 != v107);
      }
    }
    sub_1C5972868(a1, ".file", 5uLL, 0, 0xFFFFFFFE, 103, 0);
    v108 = *(_QWORD *)(a1 + 176);
    if (*(_QWORD *)(a1 + 184) != v108)
    {
      v109 = *(_QWORD *)(a1 + 200);
      v110 = (_QWORD *)(v108 + 8 * (v109 / 0x2A));
      v111 = (unsigned int *)(*v110 + 96 * (v109 % 0x2A));
      v112 = *(_QWORD *)(v108 + 8 * ((*(_QWORD *)(a1 + 208) + v109) / 0x2A))
           + 96 * ((*(_QWORD *)(a1 + 208) + v109) % 0x2A);
      if (v111 != (unsigned int *)v112)
      {
        v113 = (unsigned int *)(*v110 + 96 * (v109 % 0x2A));
        do
        {
          v114 = *(_QWORD *)v113;
          v113 += 24;
          sub_1C5972A28(a1, v111, 0, *(_BYTE *)(*(_QWORD *)(v114 + 232) + 32));
          if ((unsigned int *)((char *)v113 - *v110) == (unsigned int *)4032)
          {
            v115 = (unsigned int *)v110[1];
            ++v110;
            v113 = v115;
          }
          v111 = v113;
        }
        while (v113 != (unsigned int *)v112);
      }
    }
    v116 = v163;
    do
    {
      v164 = v116;
      v117 = *(_QWORD *)v116;
      if (*(__int16 *)(*(_QWORD *)v116 + 56) != -3)
      {
        v118 = *(_QWORD *)(v117 + 72);
        if (*(_QWORD *)(v117 + 80) != v118)
        {
          v119 = *(_QWORD *)(v117 + 96);
          v120 = (uint64_t *)(v118 + 8 * (v119 >> 9));
          v121 = *v120;
          v122 = *v120 + 8 * (v119 & 0x1FF);
          v123 = *(_QWORD *)(v118 + (((*(_QWORD *)(v117 + 104) + v119) >> 6) & 0x3FFFFFFFFFFFFF8))
               + 8 * ((*(_QWORD *)(v117 + 104) + v119) & 0x1FF);
          if (v122 != v123)
          {
            v160 = *(_QWORD *)(v118 + (((*(_QWORD *)(v117 + 104) + v119) >> 6) & 0x3FFFFFFFFFFFFF8))
                 + 8 * ((*(_QWORD *)(v117 + 104) + v119) & 0x1FF);
            v162 = v117;
            do
            {
              v124 = *(_QWORD **)v122;
              v125 = *(_QWORD *)(*(_QWORD *)v122 + 40);
              if (v125)
              {
                v126 = v124[1];
                if (v124[2] != v126)
                {
                  v127 = v124[4];
                  v128 = (_QWORD *)(v126 + 8 * (v127 / 0x2A));
                  v129 = *v128 + 96 * (v127 % 0x2A);
                  v130 = *(_QWORD *)(v126 + 8 * ((v127 + v125) / 0x2A)) + 96 * ((v127 + v125) % 0x2A);
                  if (v129 != v130)
                  {
                    v166 = v122;
                    v169 = v120;
                    v131 = *(_WORD *)(v117 + 56);
                    do
                    {
                      sub_1C5972A28(a1, (unsigned int *)v129, v131, *(_BYTE *)(*(_QWORD *)(*(_QWORD *)v129 + 232) + 32));
                      v132 = *(unsigned int *)(v129 + 40);
                      if ((_DWORD)v132)
                      {
                        v133 = *(uint64_t ***)(v129 + 32);
                        v134 = 16 * v132;
                        do
                        {
                          v135 = *v133;
                          *(_QWORD *)v171 = 0;
                          sub_1C59415F0(a3, v135, 1, v171);
                          v136 = *(_DWORD *)v171;
                          v137 = *v133;
                          v138 = (*v133)[8];
                          if (v138)
                          {
                            v139 = (char *)v137[7];
                          }
                          else
                          {
                            if ((*(_BYTE *)v137 & 4) != 0)
                            {
                              v142 = (uint64_t *)*(v137 - 1);
                              v143 = *v142;
                              v140 = (uint64_t)(v142 + 2);
                              v141 = v143;
                            }
                            else
                            {
                              v140 = 0;
                              v141 = 0;
                            }
                            v139 = (char *)sub_1C52C2F08(v140, v141);
                            v138 = v144;
                            v137 = *v133;
                          }
                          sub_1C5972868(a1, v139, v138, *(_DWORD *)(v129 + 16) + v136, v131, *((_BYTE *)v137 + 32), 1);
                          sub_1C5972A9C(a1, *(_DWORD *)(v129 + 8), 2, *(_BYTE *)(*(_QWORD *)v129 + 224));
                          v133 += 2;
                          v134 -= 16;
                        }
                        while (v134);
                      }
                      v129 += 96;
                      if (v129 - *v128 == 4032)
                      {
                        v145 = v128[1];
                        ++v128;
                        v129 = v145;
                      }
                    }
                    while (v129 != v130);
                    v122 = v166;
                    v120 = v169;
                    v121 = *v169;
                    v123 = v160;
                    v117 = v162;
                  }
                }
              }
              v122 += 8;
              if (v122 - v121 == 4096)
              {
                v146 = v120[1];
                ++v120;
                v121 = v146;
                v122 = v146;
              }
            }
            while (v122 != v123);
          }
        }
      }
      v116 = v164 + 8;
    }
    while (v164 + 8 != v170);
    v147 = *(_QWORD *)(a1 + 1200);
    for (m = *(_QWORD *)(a1 + 1208); v147 != m; v147 += 72)
    {
      v149 = *(_DWORD **)(v147 + 64);
      sub_1C5972868(a1, *(char **)(*(_QWORD *)v149 + 240), *(_QWORD *)(*(_QWORD *)v149 + 248), 0, *(__int16 *)(v147 + 56), 112, 1);
      v150 = v149[6];
      v151 = *(llvm::raw_ostream **)(a1 + 40);
      v152 = bswap32(v150);
      if ((*(_DWORD *)(a1 + 48) - 1) >= 2)
        v150 = v152;
      *(_DWORD *)v171 = v150;
      llvm::raw_ostream::write(v151, v171, 4uLL);
      llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 40), "", 4uLL);
      v153 = *(llvm::raw_ostream **)(a1 + 40);
      *(_DWORD *)v171 = 0;
      llvm::raw_ostream::write(v153, v171, 4uLL);
      llvm::raw_ostream::write(*(llvm::raw_ostream **)(a1 + 40), "", 6uLL);
    }
    llvm::StringTableBuilder::write((llvm::StringTableBuilder *)(a1 + 64), *(llvm::raw_ostream **)(a1 + 40));
  }
  v154 = *(_QWORD **)(a1 + 40);
  return v157 - (v159 + v158) + v154[4] + (*(uint64_t (**)(_QWORD *))(*v154 + 80))(v154) - v154[2];
}

void sub_1C5971330(uint64_t a1, unint64_t a2)
{
  char *v3;
  char *v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  _BOOL8 v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t v16;
  char *v17;
  _QWORD *v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  char *v25;
  int64_t v26;
  char *v27;
  unint64_t v28;
  char *v29;
  char *v30;
  BOOL v31;
  uint64_t v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  char *v38;
  char *v39;
  char *v40;
  void *v41;
  uint64_t v42;
  unint64_t v43;
  unint64_t v44;
  char *v45;
  unint64_t v46;
  char *v47;
  char *v48;
  char *v49;
  uint64_t v50;
  uint64_t v51;
  char *v52;
  uint64_t v53;
  _QWORD *v54;
  char *v55;
  uint64_t v56;
  unint64_t v57;
  unint64_t v58;
  char *v59;
  unint64_t v60;
  char *v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  char *v65;
  uint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  unint64_t v69;
  char *v70;
  size_t v71;
  unint64_t v72;
  char *v73;
  char *v74;
  uint64_t v75;
  uint64_t v76;
  char *v77;
  char *v78;
  uint64_t v79;
  uint64_t v80;
  char *v81;
  unint64_t v82;
  void *v83;
  char *v84;
  char *v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  char *v90;
  uint64_t v91;
  uint64_t v92;
  unint64_t v93;
  char *v94;
  char *v95;
  uint64_t v96;
  uint64_t v97;
  char *v98;
  char *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  char *v104;
  uint64_t v105;
  uint64_t v106;
  char *v107;
  uint64_t v108;
  uint64_t v109;
  char *v110;
  int64_t v111;
  char *v112;
  unint64_t v113;
  char *v114;
  char *v115;
  uint64_t v116;
  uint64_t v117;
  char *v118;
  uint64_t v119;
  unint64_t v120;
  char *__p;

  v3 = *(char **)(a1 + 8);
  v4 = *(char **)(a1 + 16);
  v5 = v4 - v3;
  if (v4 == v3)
    v6 = a2 + 1;
  else
    v6 = a2;
  v7 = v6 >> 9;
  v8 = (v6 & 0x1FF) != 0;
  if ((v6 & 0x1FF) != 0)
    v9 = v7 + 1;
  else
    v9 = v6 >> 9;
  v10 = *(_QWORD *)(a1 + 32);
  if (v9 >= v10 >> 9)
    v11 = v10 >> 9;
  else
    v11 = v9;
  if (v9 <= v10 >> 9)
  {
    for (*(_QWORD *)(a1 + 32) = v10 - (v11 << 9); v11; --v11)
    {
      v18 = *(_QWORD **)(a1 + 8);
      v21 = *v18;
      v19 = (char *)(v18 + 1);
      v20 = v21;
      *(_QWORD *)(a1 + 8) = v19;
      if (v4 == *(char **)(a1 + 24))
      {
        v22 = *(char **)a1;
        if ((unint64_t)v19 <= *(_QWORD *)a1)
        {
          if (v4 == v22)
            v28 = 1;
          else
            v28 = (v4 - v22) >> 2;
          if (v28 >> 61)
            goto LABEL_152;
          v29 = (char *)operator new(8 * v28);
          v30 = &v29[8 * (v28 >> 2)];
          v32 = v4 - v19;
          v31 = v4 == v19;
          v4 = v30;
          if (!v31)
          {
            v4 = &v30[v32 & 0xFFFFFFFFFFFFFFF8];
            v33 = 8 * (v32 >> 3);
            v34 = &v29[8 * (v28 >> 2)];
            do
            {
              v35 = *(_QWORD *)v19;
              v19 += 8;
              *(_QWORD *)v34 = v35;
              v34 += 8;
              v33 -= 8;
            }
            while (v33);
          }
          *(_QWORD *)a1 = v29;
          *(_QWORD *)(a1 + 8) = v30;
          *(_QWORD *)(a1 + 16) = v4;
          *(_QWORD *)(a1 + 24) = &v29[8 * v28];
          if (v22)
          {
            operator delete(v22);
            v4 = *(char **)(a1 + 16);
          }
        }
        else
        {
          v23 = (uint64_t)&v19[-*(_QWORD *)a1] >> 3;
          if (v23 >= -1)
            v24 = v23 + 1;
          else
            v24 = v23 + 2;
          v25 = &v19[-8 * (v24 >> 1)];
          v26 = v4 - v19;
          if (v4 != v19)
          {
            memmove(&v19[-8 * (v24 >> 1)], v19, v4 - v19);
            v4 = *(char **)(a1 + 8);
          }
          v27 = &v4[-8 * (v24 >> 1)];
          v4 = &v25[v26];
          *(_QWORD *)(a1 + 8) = v27;
          *(_QWORD *)(a1 + 16) = &v25[v26];
        }
      }
      *(_QWORD *)v4 = v20;
      v4 = (char *)(*(_QWORD *)(a1 + 16) + 8);
      *(_QWORD *)(a1 + 16) = v4;
    }
  }
  else
  {
    v12 = v9 - v11;
    v13 = *(_QWORD *)(a1 + 24) - *(_QWORD *)a1;
    if (v12 <= (v13 >> 3) - (v5 >> 3))
    {
      if (v12)
      {
        v36 = -(uint64_t)v7;
        v37 = v8 - v11;
        while (*(char **)(a1 + 24) != v4)
        {
          *(_QWORD *)v4 = operator new(0x1000uLL);
          v4 = (char *)(*(_QWORD *)(a1 + 16) + 8);
          *(_QWORD *)(a1 + 16) = v4;
          if (v37 == ++v36)
            goto LABEL_132;
        }
        v82 = v37 - v36;
        if (v82)
        {
          v11 = v8 - v36;
          do
          {
            v83 = operator new(0x1000uLL);
            v84 = *(char **)(a1 + 8);
            if (v84 == *(char **)a1)
            {
              v86 = *(_QWORD *)(a1 + 24);
              if ((unint64_t)v4 >= v86)
              {
                v91 = v86 - (_QWORD)v84;
                v31 = v91 == 0;
                v92 = v91 >> 2;
                if (v31)
                  v93 = 1;
                else
                  v93 = v92;
                if (v93 >> 61)
                  goto LABEL_152;
                v94 = (char *)operator new(8 * v93);
                v85 = &v94[(2 * v93 + 6) & 0xFFFFFFFFFFFFFFF8];
                v95 = v85;
                v96 = v4 - v84;
                if (v4 != v84)
                {
                  v95 = &v85[v96 & 0xFFFFFFFFFFFFFFF8];
                  v97 = 8 * (v96 >> 3);
                  v98 = &v94[(2 * v93 + 6) & 0xFFFFFFFFFFFFFFF8];
                  v99 = v84;
                  do
                  {
                    v100 = *(_QWORD *)v99;
                    v99 += 8;
                    *(_QWORD *)v98 = v100;
                    v98 += 8;
                    v97 -= 8;
                  }
                  while (v97);
                }
                *(_QWORD *)a1 = v94;
                *(_QWORD *)(a1 + 8) = v85;
                *(_QWORD *)(a1 + 16) = v95;
                *(_QWORD *)(a1 + 24) = &v94[8 * v93];
                if (v84)
                {
                  operator delete(v84);
                  v85 = *(char **)(a1 + 8);
                }
              }
              else
              {
                v87 = (uint64_t)(v86 - (_QWORD)v4) >> 3;
                if (v87 >= -1)
                  v88 = v87 + 1;
                else
                  v88 = v87 + 2;
                v89 = v88 >> 1;
                v90 = &v4[8 * (v88 >> 1)];
                v85 = &v90[-(v4 - v84)];
                if (v4 != v84)
                {
                  memmove(&v90[-(v4 - v84)], *(const void **)(a1 + 8), v4 - v84);
                  v4 = *(char **)(a1 + 16);
                }
                *(_QWORD *)(a1 + 8) = v85;
                *(_QWORD *)(a1 + 16) = &v4[8 * v89];
              }
            }
            else
            {
              v85 = *(char **)(a1 + 8);
            }
            *((_QWORD *)v85 - 1) = v83;
            v4 = *(char **)(a1 + 16);
            v101 = *(_QWORD *)(a1 + 8) - 8;
            *(_QWORD *)(a1 + 8) = v101;
            if (&v4[-v101] == (char *)8)
              v102 = 511;
            else
              v102 = 512;
            v10 = v102 + *(_QWORD *)(a1 + 32);
            *(_QWORD *)(a1 + 32) = v10;
            --v82;
          }
          while (v82);
        }
      }
LABEL_132:
      for (*(_QWORD *)(a1 + 32) = v10 - (v11 << 9); v11; --v11)
      {
        v103 = *(_QWORD **)(a1 + 8);
        v106 = *v103;
        v104 = (char *)(v103 + 1);
        v105 = v106;
        *(_QWORD *)(a1 + 8) = v104;
        if (v4 == *(char **)(a1 + 24))
        {
          v107 = *(char **)a1;
          if ((unint64_t)v104 <= *(_QWORD *)a1)
          {
            if (v4 == v107)
              v113 = 1;
            else
              v113 = (v4 - v107) >> 2;
            if (v113 >> 61)
              goto LABEL_152;
            v114 = (char *)operator new(8 * v113);
            v115 = &v114[8 * (v113 >> 2)];
            v116 = v4 - v104;
            v31 = v4 == v104;
            v4 = v115;
            if (!v31)
            {
              v4 = &v115[v116 & 0xFFFFFFFFFFFFFFF8];
              v117 = 8 * (v116 >> 3);
              v118 = &v114[8 * (v113 >> 2)];
              do
              {
                v119 = *(_QWORD *)v104;
                v104 += 8;
                *(_QWORD *)v118 = v119;
                v118 += 8;
                v117 -= 8;
              }
              while (v117);
            }
            *(_QWORD *)a1 = v114;
            *(_QWORD *)(a1 + 8) = v115;
            *(_QWORD *)(a1 + 16) = v4;
            *(_QWORD *)(a1 + 24) = &v114[8 * v113];
            if (v107)
            {
              operator delete(v107);
              v4 = *(char **)(a1 + 16);
            }
          }
          else
          {
            v108 = (uint64_t)&v104[-*(_QWORD *)a1] >> 3;
            if (v108 >= -1)
              v109 = v108 + 1;
            else
              v109 = v108 + 2;
            v110 = &v104[-8 * (v109 >> 1)];
            v111 = v4 - v104;
            if (v4 != v104)
            {
              memmove(&v104[-8 * (v109 >> 1)], v104, v4 - v104);
              v4 = *(char **)(a1 + 8);
            }
            v112 = &v4[-8 * (v109 >> 1)];
            v4 = &v110[v111];
            *(_QWORD *)(a1 + 8) = v112;
            *(_QWORD *)(a1 + 16) = &v110[v111];
          }
        }
        *(_QWORD *)v4 = v105;
        v4 = (char *)(*(_QWORD *)(a1 + 16) + 8);
        *(_QWORD *)(a1 + 16) = v4;
      }
    }
    else
    {
      v14 = v5 >> 3;
      v15 = v12 + (v5 >> 3);
      if (v13 >> 2 <= v15)
        v16 = v15;
      else
        v16 = v13 >> 2;
      if (v16)
      {
        if (v16 >> 61)
LABEL_152:
          sub_1C4764EE4();
        v17 = (char *)operator new(8 * v16);
      }
      else
      {
        v17 = 0;
      }
      v120 = v11 << 9;
      v38 = &v17[8 * (v14 - v11)];
      v39 = &v17[8 * v16];
      v40 = v38;
      do
      {
        v41 = operator new(0x1000uLL);
        if (v40 == v39)
        {
          if (v38 <= v17)
          {
            __p = v17;
            if (v39 == v17)
              v46 = 1;
            else
              v46 = (v39 - v17) >> 2;
            if (v46 >> 61)
              goto LABEL_152;
            v47 = (char *)operator new(8 * v46);
            v48 = v47;
            v49 = &v47[8 * (v46 >> 2)];
            v40 = v49;
            v50 = v39 - v38;
            if (v39 != v38)
            {
              v40 = &v49[v50 & 0xFFFFFFFFFFFFFFF8];
              v51 = 8 * (v50 >> 3);
              v52 = &v47[8 * (v46 >> 2)];
              do
              {
                v53 = *(_QWORD *)v38;
                v38 += 8;
                *(_QWORD *)v52 = v53;
                v52 += 8;
                v51 -= 8;
              }
              while (v51);
            }
            v39 = &v47[8 * v46];
            if (__p)
              operator delete(__p);
            v38 = v49;
            v17 = v48;
          }
          else
          {
            v42 = (v38 - v17) >> 3;
            if (v42 >= -1)
              v43 = v42 + 1;
            else
              v43 = v42 + 2;
            v44 = v43 >> 1;
            v45 = &v38[-8 * v44];
            if (v39 != v38)
              memmove(&v38[-8 * v44], v38, v39 - v38);
            v40 = &v45[v39 - v38];
            v38 = v45;
          }
        }
        *(_QWORD *)v40 = v41;
        v40 += 8;
        --v12;
      }
      while (v12);
      v54 = *(_QWORD **)(a1 + 8);
      if (v11)
      {
        while (1)
        {
          if (v40 == v39)
          {
            if (v38 <= v17)
            {
              v59 = v17;
              if (v39 == v17)
                v60 = 1;
              else
                v60 = (v39 - v17) >> 2;
              if (v60 >> 61)
                goto LABEL_152;
              v61 = (char *)operator new(8 * v60);
              v62 = v61;
              v55 = &v61[8 * (v60 >> 2)];
              v40 = v55;
              v63 = v39 - v38;
              if (v39 != v38)
              {
                v40 = &v55[v63 & 0xFFFFFFFFFFFFFFF8];
                v64 = 8 * (v63 >> 3);
                v65 = &v61[8 * (v60 >> 2)];
                do
                {
                  v66 = *(_QWORD *)v38;
                  v38 += 8;
                  *(_QWORD *)v65 = v66;
                  v65 += 8;
                  v64 -= 8;
                }
                while (v64);
              }
              v39 = &v61[8 * v60];
              if (v59)
                operator delete(v59);
              v17 = v62;
            }
            else
            {
              v56 = (v38 - v17) >> 3;
              if (v56 >= -1)
                v57 = v56 + 1;
              else
                v57 = v56 + 2;
              v58 = v57 >> 1;
              v55 = &v38[-8 * v58];
              if (v39 != v38)
                memmove(&v38[-8 * v58], v38, v39 - v38);
              v40 = &v55[v39 - v38];
            }
          }
          else
          {
            v55 = v38;
          }
          *(_QWORD *)v40 = *v54;
          v40 += 8;
          v54 = (_QWORD *)(*(_QWORD *)(a1 + 8) + 8);
          *(_QWORD *)(a1 + 8) = v54;
          v38 = v55;
          if (!--v11)
            goto LABEL_87;
        }
      }
      v55 = v38;
LABEL_87:
      v67 = *(_QWORD **)(a1 + 16);
      if (v67 != v54)
      {
        do
        {
          if (v55 == v17)
          {
            if (v40 >= v39)
            {
              if (v39 == v17)
                v72 = 1;
              else
                v72 = (v39 - v17) >> 2;
              if (v72 >> 61)
                goto LABEL_152;
              v73 = (char *)operator new(8 * v72);
              v74 = v73;
              v55 = &v73[(2 * v72 + 6) & 0xFFFFFFFFFFFFFFF8];
              v75 = v40 - v17;
              v31 = v40 == v17;
              v40 = v55;
              if (!v31)
              {
                v40 = &v55[v75 & 0xFFFFFFFFFFFFFFF8];
                v76 = 8 * (v75 >> 3);
                v77 = &v73[(2 * v72 + 6) & 0xFFFFFFFFFFFFFFF8];
                v78 = v17;
                do
                {
                  v79 = *(_QWORD *)v78;
                  v78 += 8;
                  *(_QWORD *)v77 = v79;
                  v77 += 8;
                  v76 -= 8;
                }
                while (v76);
              }
              v39 = &v73[8 * v72];
              if (v17)
                operator delete(v17);
              v17 = v74;
            }
            else
            {
              v68 = (v39 - v40) >> 3;
              if (v68 >= -1)
                v69 = v68 + 1;
              else
                v69 = v68 + 2;
              v70 = &v40[8 * (v69 >> 1)];
              v55 = &v70[-(v40 - v17)];
              v71 = v40 - v17;
              v31 = v40 == v17;
              v40 = v70;
              if (!v31)
                memmove(v55, v17, v71);
            }
          }
          v80 = *--v67;
          *((_QWORD *)v55 - 1) = v80;
          v55 -= 8;
        }
        while (v67 != *(_QWORD **)(a1 + 8));
      }
      v81 = *(char **)a1;
      *(_QWORD *)a1 = v17;
      *(_QWORD *)(a1 + 8) = v55;
      *(_QWORD *)(a1 + 16) = v40;
      *(_QWORD *)(a1 + 24) = v39;
      *(_QWORD *)(a1 + 32) -= v120;
      if (v81)
        operator delete(v81);
    }
  }
}

void sub_1C5971A7C(uint64_t a1)
{
  uint64_t v1;
  unint64_t v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  void **v7;
  void **v8;
  _QWORD *v9;
  unint64_t v10;
  void **v11;
  unint64_t v12;
  unint64_t v13;
  void *v14;
  void *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_DWORD *)(a1 + 48) = 0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_WORD *)(a1 + 56) = -3;
  v1 = *(_QWORD *)(a1 + 72);
  if (*(_QWORD *)(a1 + 80) != v1)
  {
    v2 = *(_QWORD *)(a1 + 96);
    v3 = (_QWORD *)(v1 + 8 * (v2 >> 9));
    v4 = *v3 + 8 * (v2 & 0x1FF);
    v5 = *(_QWORD *)(v1 + (((*(_QWORD *)(a1 + 104) + v2) >> 6) & 0x3FFFFFFFFFFFFF8))
       + 8 * ((*(_QWORD *)(a1 + 104) + v2) & 0x1FF);
    if (v4 != v5)
    {
      while (1)
      {
        v6 = *(_QWORD **)v4;
        v7 = *(void ***)(*(_QWORD *)v4 + 8);
        v8 = *(void ***)(*(_QWORD *)v4 + 16);
        if (v8 == v7)
        {
          v9 = v6 + 5;
          v8 = *(void ***)(*(_QWORD *)v4 + 8);
        }
        else
        {
          v9 = v6 + 5;
          v10 = v6[4];
          v11 = &v7[v10 / 0x2A];
          v12 = (unint64_t)*v11 + 96 * (v10 % 0x2A);
          v13 = (unint64_t)v7[(v6[5] + v10) / 0x2A] + 96 * ((v6[5] + v10) % 0x2A);
          if (v12 != v13)
          {
            do
            {
              v14 = *(void **)(v12 + 64);
              if (v14 != (void *)(v12 + 80))
                free(v14);
              v15 = *(void **)(v12 + 32);
              if (v15 != (void *)(v12 + 48))
                free(v15);
              v12 += 96;
              if (v12 - (_QWORD)*v11 == 4032)
              {
                v16 = (unint64_t)v11[1];
                ++v11;
                v12 = v16;
              }
            }
            while (v12 != v13);
            v7 = (void **)v6[1];
            v8 = (void **)v6[2];
          }
        }
        *v9 = 0;
        v17 = (char *)v8 - (char *)v7;
        if (v17 >= 0x11)
        {
          do
          {
            operator delete(*v7);
            v18 = v6[2];
            v7 = (void **)(v6[1] + 8);
            v6[1] = v7;
            v17 = v18 - (_QWORD)v7;
          }
          while (v17 > 0x10);
        }
        if (v17 >> 3 == 1)
          break;
        if (v17 >> 3 == 2)
        {
          v19 = 42;
LABEL_20:
          v6[4] = v19;
        }
        v4 += 8;
        if (v4 - *v3 == 4096)
        {
          v20 = v3[1];
          ++v3;
          v4 = v20;
        }
        if (v4 == v5)
          return;
      }
      v19 = 21;
      goto LABEL_20;
    }
  }
}

_QWORD *sub_1C5971C4C(_QWORD *a1)
{
  *a1 = off_1E81845D8;
  sub_1C484143C((uint64_t)(a1 + 8));
  return a1;
}

void sub_1C5971C7C(_QWORD *a1)
{
  *a1 = off_1E81845D8;
  sub_1C484143C((uint64_t)(a1 + 8));
  JUMPOUT(0x1CAA32FC0);
}

double sub_1C5971CBC(uint64_t a1)
{
  double result;

  *(_DWORD *)(a1 + 48) = 0;
  result = 0.0;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_WORD *)(a1 + 56) = -3;
  return result;
}

void sub_1C5971CD8()
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5971CEC(uint64_t a1)
{
  void **v2;
  void **v3;
  _QWORD *v4;
  unint64_t v5;
  void **v6;
  unint64_t v7;
  unint64_t v8;
  void *v9;
  void *v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  void *v15;
  uint64_t v16;
  uint64_t v17;

  v2 = *(void ***)(a1 + 8);
  v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    v4 = (_QWORD *)(a1 + 40);
    v3 = *(void ***)(a1 + 8);
  }
  else
  {
    v4 = (_QWORD *)(a1 + 40);
    v5 = *(_QWORD *)(a1 + 32);
    v6 = &v2[v5 / 0x2A];
    v7 = (unint64_t)*v6 + 96 * (v5 % 0x2A);
    v8 = (unint64_t)v2[(*(_QWORD *)(a1 + 40) + v5) / 0x2A] + 96 * ((*(_QWORD *)(a1 + 40) + v5) % 0x2A);
    if (v7 != v8)
    {
      do
      {
        v9 = *(void **)(v7 + 64);
        if (v9 != (void *)(v7 + 80))
          free(v9);
        v10 = *(void **)(v7 + 32);
        if (v10 != (void *)(v7 + 48))
          free(v10);
        v7 += 96;
        if (v7 - (_QWORD)*v6 == 4032)
        {
          v11 = (unint64_t)v6[1];
          ++v6;
          v7 = v11;
        }
      }
      while (v7 != v8);
      v2 = *(void ***)(a1 + 8);
      v3 = *(void ***)(a1 + 16);
    }
  }
  *v4 = 0;
  v12 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      v3 = *(void ***)(a1 + 16);
      v2 = (void **)(*(_QWORD *)(a1 + 8) + 8);
      *(_QWORD *)(a1 + 8) = v2;
      v12 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  v13 = v12 >> 3;
  if (v13 == 1)
  {
    v14 = 21;
    goto LABEL_18;
  }
  if (v13 == 2)
  {
    v14 = 42;
LABEL_18:
    *(_QWORD *)(a1 + 32) = v14;
  }
  if (v2 != v3)
  {
    do
    {
      v15 = *v2++;
      operator delete(v15);
    }
    while (v2 != v3);
    v17 = *(_QWORD *)(a1 + 8);
    v16 = *(_QWORD *)(a1 + 16);
    if (v16 != v17)
      *(_QWORD *)(a1 + 16) = v16 + ((v17 - v16 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (*(_QWORD *)a1)
    operator delete(*(void **)a1);
  return a1;
}

double sub_1C5971E84(uint64_t a1, _QWORD *a2)
{
  char *v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  char *v23;
  char *v24;
  uint64_t v25;
  void *v26;
  void *v27;
  unint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  void *v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  char *v36;
  BOOL v37;
  uint64_t v38;
  uint64_t v39;
  char *v40;
  uint64_t v41;
  uint64_t v42;
  unint64_t v43;
  double result;
  char *v45;
  unint64_t v46;
  void *v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  uint64_t v55;
  uint64_t v56;
  char *v57;
  char *v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  char *v67;
  char *v68;
  uint64_t v69;
  char *v70;
  char *v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  char *v78;
  size_t v79;
  unint64_t v80;
  char *v81;
  char *v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  uint64_t v86;

  v4 = *(char **)(a1 + 8);
  v5 = *(char **)(a1 + 16);
  v6 = (v5 - v4) >> 3;
  v7 = v5 - v4;
  if (v5 == v4)
    v8 = 0;
  else
    v8 = 42 * v6 - 1;
  v9 = *(_QWORD *)(a1 + 32);
  if (v8 == *(_QWORD *)(a1 + 40) + v9)
  {
    v10 = v9 >= 0x2A;
    v11 = v9 - 42;
    if (v10)
    {
      *(_QWORD *)(a1 + 32) = v11;
      v14 = *(_QWORD *)v4;
      v12 = v4 + 8;
      v13 = v14;
      *(_QWORD *)(a1 + 8) = v12;
      if (v5 == *(char **)(a1 + 24))
      {
        v15 = *(char **)a1;
        if ((unint64_t)v12 <= *(_QWORD *)a1)
        {
          if (v5 == v15)
            v34 = 1;
          else
            v34 = (v5 - v15) >> 2;
          if (v34 >> 61)
            goto LABEL_96;
          v35 = (char *)operator new(8 * v34);
          v36 = &v35[8 * (v34 >> 2)];
          v38 = v5 - v12;
          v37 = v5 == v12;
          v5 = v36;
          if (!v37)
          {
            v5 = &v36[v38 & 0xFFFFFFFFFFFFFFF8];
            v39 = 8 * (v38 >> 3);
            v40 = &v35[8 * (v34 >> 2)];
            do
            {
              v41 = *(_QWORD *)v12;
              v12 += 8;
              *(_QWORD *)v40 = v41;
              v40 += 8;
              v39 -= 8;
            }
            while (v39);
          }
          *(_QWORD *)a1 = v35;
          *(_QWORD *)(a1 + 8) = v36;
          *(_QWORD *)(a1 + 16) = v5;
          *(_QWORD *)(a1 + 24) = &v35[8 * v34];
          if (v15)
          {
            operator delete(v15);
            v5 = *(char **)(a1 + 16);
          }
        }
        else
        {
          v16 = (uint64_t)&v12[-*(_QWORD *)a1] >> 3;
          if (v16 >= -1)
            v17 = v16 + 1;
          else
            v17 = v16 + 2;
          v18 = -(v17 >> 1);
          v19 = v17 >> 1;
          v20 = &v12[-8 * v19];
          v21 = v5 - v12;
          if (v5 != v12)
          {
            memmove(&v12[-8 * v19], v12, v5 - v12);
            v5 = *(char **)(a1 + 8);
          }
          v22 = &v5[8 * v18];
          v5 = &v20[v21];
          *(_QWORD *)(a1 + 8) = v22;
          *(_QWORD *)(a1 + 16) = &v20[v21];
        }
      }
      *(_QWORD *)v5 = v13;
      goto LABEL_37;
    }
    v23 = *(char **)(a1 + 24);
    v24 = *(char **)a1;
    v25 = (uint64_t)&v23[-*(_QWORD *)a1];
    if (v6 < (unint64_t)(v25 >> 3))
    {
      v26 = operator new(0xFC0uLL);
      v27 = v26;
      if (v23 != v5)
      {
        *(_QWORD *)v5 = v26;
LABEL_37:
        *(_QWORD *)(a1 + 16) += 8;
        goto LABEL_38;
      }
      if (v4 == v24)
      {
        if (v5 == v4)
          v63 = 1;
        else
          v63 = v25 >> 2;
        if (v63 >> 61)
          goto LABEL_96;
        v64 = (char *)operator new(8 * v63);
        v45 = &v64[(2 * v63 + 6) & 0xFFFFFFFFFFFFFFF8];
        v65 = v45;
        if (v5 != v4)
        {
          v66 = 8 * v6;
          v67 = &v64[(2 * v63 + 6) & 0xFFFFFFFFFFFFFFF8];
          v68 = v4;
          v65 = &v45[8 * v6];
          do
          {
            v69 = *(_QWORD *)v68;
            v68 += 8;
            *(_QWORD *)v67 = v69;
            v67 += 8;
            v66 -= 8;
          }
          while (v66);
        }
        *(_QWORD *)a1 = v64;
        *(_QWORD *)(a1 + 8) = v45;
        *(_QWORD *)(a1 + 16) = v65;
        *(_QWORD *)(a1 + 24) = &v64[8 * v63];
        if (v4)
        {
          operator delete(v4);
          v45 = *(char **)(a1 + 8);
        }
      }
      else
      {
        v45 = v4;
      }
      *((_QWORD *)v45 - 1) = v27;
      v70 = *(char **)(a1 + 8);
      v71 = *(char **)(a1 + 16);
      *(_QWORD *)(a1 + 8) = v70 - 8;
      v72 = *((_QWORD *)v70 - 1);
      *(_QWORD *)(a1 + 8) = v70;
      if (v71 != *(char **)(a1 + 24))
      {
LABEL_95:
        *(_QWORD *)v71 = v72;
        goto LABEL_37;
      }
      v73 = *(char **)a1;
      if ((unint64_t)v70 > *(_QWORD *)a1)
      {
        v74 = (uint64_t)&v70[-*(_QWORD *)a1] >> 3;
        if (v74 >= -1)
          v75 = v74 + 1;
        else
          v75 = v74 + 2;
        v76 = -(v75 >> 1);
        v77 = v75 >> 1;
        v78 = &v70[-8 * v77];
        v79 = v71 - v70;
        if (v79)
        {
          memmove(&v70[-8 * v77], v70, v79);
          v70 = *(char **)(a1 + 8);
        }
        v71 = &v78[v79];
        *(_QWORD *)(a1 + 8) = &v70[8 * v76];
        *(_QWORD *)(a1 + 16) = v71;
        goto LABEL_95;
      }
      if (v71 == v73)
        v80 = 1;
      else
        v80 = (v71 - v73) >> 2;
      if (!(v80 >> 61))
      {
        v81 = (char *)operator new(8 * v80);
        v82 = &v81[8 * (v80 >> 2)];
        v83 = v71 - v70;
        v37 = v71 == v70;
        v71 = v82;
        if (!v37)
        {
          v71 = &v82[v83 & 0xFFFFFFFFFFFFFFF8];
          v84 = 8 * (v83 >> 3);
          v85 = &v81[8 * (v80 >> 2)];
          do
          {
            v86 = *(_QWORD *)v70;
            v70 += 8;
            *(_QWORD *)v85 = v86;
            v85 += 8;
            v84 -= 8;
          }
          while (v84);
        }
        *(_QWORD *)a1 = v81;
        *(_QWORD *)(a1 + 8) = v82;
        *(_QWORD *)(a1 + 16) = v71;
        *(_QWORD *)(a1 + 24) = &v81[8 * v80];
        if (v73)
        {
          operator delete(v73);
          v71 = *(char **)(a1 + 16);
        }
        goto LABEL_95;
      }
LABEL_96:
      sub_1C4764EE4();
    }
    if (v23 == v24)
      v28 = 1;
    else
      v28 = v25 >> 2;
    if (v28 >> 61)
      goto LABEL_96;
    v29 = (char *)operator new(8 * v28);
    v30 = &v29[8 * v6];
    v31 = &v29[8 * v28];
    v32 = operator new(0xFC0uLL);
    if (v6 == v28)
    {
      if (v7 < 1)
      {
        if (v5 == v4)
          v46 = 1;
        else
          v46 = v7 >> 2;
        if (v46 >> 61)
          goto LABEL_96;
        v47 = v32;
        v30 = (char *)operator new(8 * v46);
        v31 = &v30[8 * v46];
        operator delete(v29);
        v4 = *(char **)(a1 + 8);
        v5 = *(char **)(a1 + 16);
        v29 = v30;
        v32 = v47;
      }
      else
      {
        v33 = v6 + 2;
        if (v6 >= -1)
          v33 = v6 + 1;
        v30 -= 8 * (v33 >> 1);
      }
    }
    *(_QWORD *)v30 = v32;
    v48 = v30 + 8;
    if (v5 != v4)
    {
      while (1)
      {
        if (v30 == v29)
        {
          if (v48 >= v31)
          {
            if (v31 == v30)
              v53 = 1;
            else
              v53 = (v31 - v30) >> 2;
            if (v53 >> 61)
              goto LABEL_96;
            v54 = (char *)operator new(8 * v53);
            v29 = v54;
            v49 = &v54[(2 * v53 + 6) & 0xFFFFFFFFFFFFFFF8];
            v50 = v49;
            v55 = v48 - v30;
            if (v48 != v30)
            {
              v50 = &v49[v55 & 0xFFFFFFFFFFFFFFF8];
              v56 = 8 * (v55 >> 3);
              v57 = &v54[(2 * v53 + 6) & 0xFFFFFFFFFFFFFFF8];
              v58 = v30;
              do
              {
                v59 = *(_QWORD *)v58;
                v58 += 8;
                *(_QWORD *)v57 = v59;
                v57 += 8;
                v56 -= 8;
              }
              while (v56);
            }
            v31 = &v54[8 * v53];
            operator delete(v30);
          }
          else
          {
            v51 = (v31 - v48) >> 3;
            if (v51 >= -1)
              v52 = v51 + 1;
            else
              v52 = v51 + 2;
            v50 = &v48[8 * (v52 >> 1)];
            v49 = &v30[8 * (v52 >> 1)];
            if (v48 == v30)
            {
              v29 = v48;
            }
            else
            {
              memmove(&v30[8 * (v52 >> 1)], v30, v48 - v30);
              v29 = v30;
            }
          }
        }
        else
        {
          v49 = v30;
          v50 = v48;
        }
        v60 = *((_QWORD *)v5 - 1);
        v5 -= 8;
        *((_QWORD *)v49 - 1) = v60;
        v61 = v49 - 8;
        v48 = v50;
        v30 = v61;
        if (v5 == *(char **)(a1 + 8))
          goto LABEL_67;
      }
    }
    v61 = v30;
    v50 = v30 + 8;
LABEL_67:
    v62 = *(char **)a1;
    *(_QWORD *)a1 = v29;
    *(_QWORD *)(a1 + 8) = v61;
    *(_QWORD *)(a1 + 16) = v50;
    *(_QWORD *)(a1 + 24) = v31;
    if (v62)
      operator delete(v62);
  }
LABEL_38:
  v42 = *(_QWORD *)(a1 + 40);
  v43 = *(_QWORD *)(*(_QWORD *)(a1 + 8) + 8 * ((*(_QWORD *)(a1 + 32) + v42) / 0x2AuLL))
      + 96 * ((*(_QWORD *)(a1 + 32) + v42) % 0x2AuLL);
  *(_QWORD *)v43 = *a2;
  *(_DWORD *)(v43 + 8) = -1;
  *(_OWORD *)(v43 + 16) = xmmword_1C85F6FF0;
  *(_QWORD *)(v43 + 32) = v43 + 48;
  *(_QWORD *)&result = 0x100000000;
  *(_QWORD *)(v43 + 40) = 0x100000000;
  *(_QWORD *)(v43 + 64) = v43 + 80;
  *(_QWORD *)(v43 + 72) = 0x100000000;
  *(_QWORD *)(a1 + 40) = v42 + 1;
  return result;
}

_QWORD *sub_1C59723C8(_QWORD *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  v2 = (_QWORD *)*a1;
  *a1 = 0;
  if (v2)
  {
    v3 = (_QWORD *)v2[8];
    if (v3 != v2 + 10)
      free(v3);
    v4 = (_QWORD *)v2[4];
    if (v4 != v2 + 6)
      free(v4);
    MEMORY[0x1CAA32FC0](v2, 0x10E0C40DF66E2BDLL);
  }
  return a1;
}

_QWORD *sub_1C5972434(_QWORD *a1)
{
  *a1 = off_1E8184628;
  sub_1C59723C8(a1 + 8);
  return a1;
}

uint64_t sub_1C5972464(uint64_t a1)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;

  v2 = *(_QWORD *)a1;
  v3 = *(_QWORD *)a1 & 0xFFFFFFFFFFFFFFF8;
  if (!v3 && (*(_DWORD *)(a1 + 8) & 0x1C00) == 0x800)
  {
    *(_DWORD *)(a1 + 8) |= 4u;
    llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(a1 + 24));
    v2 = *(_QWORD *)a1 & 7 | v3;
    *(_QWORD *)a1 = v2;
  }
  if (v3)
  {
    v4 = v2 & 0xFFFFFFFFFFFFFFF8;
    if ((v2 & 0xFFFFFFFFFFFFFFF8) == 0 && (*(_DWORD *)(a1 + 8) & 0x1C00) == 0x800)
    {
      *(_DWORD *)(a1 + 8) |= 4u;
      llvm::MCExpr::findAssociatedFragment(*(llvm::MCExpr **)(a1 + 24));
      *(_QWORD *)a1 = *(_QWORD *)a1 & 7 | v4;
    }
    v5 = v4 + 16;
  }
  else
  {
    v5 = a1 + 40;
  }
  return *(_QWORD *)v5;
}

void sub_1C5972510(_QWORD *a1)
{
  *a1 = off_1E8184628;
  sub_1C59723C8(a1 + 8);
  JUMPOUT(0x1CAA32FC0);
}

llvm::raw_ostream *sub_1C5972550(uint64_t a1, unint64_t a2)
{
  llvm::raw_ostream *v2;
  unint64_t v3;
  unint64_t v4;
  char *v5;
  llvm::raw_ostream *v6;
  size_t v7;
  llvm::raw_ostream *v8;
  unsigned int v9;
  int v10;
  unint64_t v12;
  char v13[4];

  if (*(_BYTE *)(*(_QWORD *)(a1 + 56) + 8))
  {
    v2 = *(llvm::raw_ostream **)(a1 + 40);
    v3 = bswap64(a2);
    if ((*(_DWORD *)(a1 + 48) - 1) >= 2)
      v4 = v3;
    else
      v4 = a2;
    v12 = v4;
    v5 = (char *)&v12;
    v6 = v2;
    v7 = 8;
  }
  else
  {
    v8 = *(llvm::raw_ostream **)(a1 + 40);
    v9 = bswap32(a2);
    if ((*(_DWORD *)(a1 + 48) - 1) >= 2)
      v10 = v9;
    else
      v10 = a2;
    *(_DWORD *)v13 = v10;
    v5 = v13;
    v6 = v8;
    v7 = 4;
  }
  return llvm::raw_ostream::write(v6, v5, v7);
}

llvm::raw_ostream *sub_1C59725CC(llvm::raw_ostream *result, uint64_t a2, char a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  llvm::raw_ostream *v8;
  unint64_t v9;
  llvm::raw_ostream *v10;
  llvm::raw_ostream *v11;
  unsigned int v12;
  llvm::raw_ostream *v13;
  unsigned int v14;
  llvm::raw_ostream *v15;
  char *v16;
  unsigned int v17;
  llvm::raw_ostream *v18;
  unsigned int v19;
  llvm::raw_ostream *v20;
  unsigned int v21;
  unsigned int v22;
  char v23[4];

  if (*(__int16 *)(a2 + 56) != -3)
  {
    v5 = (uint64_t)result;
    v6 = 0;
    v7 = a2 + 8;
    v8 = (llvm::raw_ostream *)*((_QWORD *)result + 5);
    do
    {
      v23[0] = *(_BYTE *)(v7 + v6);
      llvm::raw_ostream::write(v8, v23, 1uLL);
      ++v6;
    }
    while (v6 != 8);
    if ((a3 & 1) != 0)
    {
      sub_1C5972550(v5, 0);
      v9 = 0;
    }
    else
    {
      sub_1C5972550(v5, *(_QWORD *)(a2 + 16));
      v9 = *(_QWORD *)(a2 + 16);
    }
    sub_1C5972550(v5, v9);
    sub_1C5972550(v5, *(_QWORD *)(a2 + 24));
    sub_1C5972550(v5, *(_QWORD *)(a2 + 32));
    sub_1C5972550(v5, *(_QWORD *)(a2 + 40));
    sub_1C5972550(v5, 0);
    if (*(_BYTE *)(*(_QWORD *)(v5 + 56) + 8))
    {
      v10 = *(llvm::raw_ostream **)(v5 + 40);
      *(_DWORD *)v23 = 0;
      llvm::raw_ostream::write(v10, v23, 4uLL);
      v11 = *(llvm::raw_ostream **)(v5 + 40);
      *(_DWORD *)v23 = 0;
      llvm::raw_ostream::write(v11, v23, 4uLL);
      v12 = *(_DWORD *)(a2 + 52);
      v13 = *(llvm::raw_ostream **)(v5 + 40);
      v14 = bswap32(v12);
      if ((*(_DWORD *)(v5 + 48) - 1) >= 2)
        v12 = v14;
      *(_DWORD *)v23 = v12;
      llvm::raw_ostream::write(v13, v23, 4uLL);
      v15 = *(llvm::raw_ostream **)(v5 + 40);
      v16 = "";
    }
    else
    {
      v17 = *(unsigned __int16 *)(a2 + 48);
      v18 = *(llvm::raw_ostream **)(v5 + 40);
      v19 = bswap32(v17) >> 16;
      if ((*(_DWORD *)(v5 + 48) - 1) >= 2)
        LOWORD(v17) = v19;
      *(_WORD *)v23 = v17;
      llvm::raw_ostream::write(v18, v23, 2uLL);
      v20 = *(llvm::raw_ostream **)(v5 + 40);
      *(_WORD *)v23 = 0;
      llvm::raw_ostream::write(v20, v23, 2uLL);
      v21 = *(_DWORD *)(a2 + 52);
      v15 = *(llvm::raw_ostream **)(v5 + 40);
      v22 = bswap32(v21);
      if ((*(_DWORD *)(v5 + 48) - 1) >= 2)
        v21 = v22;
      *(_DWORD *)v23 = v21;
      v16 = v23;
    }
    return llvm::raw_ostream::write(v15, v16, 4uLL);
  }
  return result;
}

llvm::raw_ostream *sub_1C5972784(uint64_t a1, unint64_t a2, __int16 a3, char a4, int a5)
{
  unsigned int v6;
  unint64_t v8;
  unsigned int v9;
  llvm::raw_ostream *v10;
  unsigned int v11;
  char *v12;
  unsigned int v13;
  llvm::raw_ostream *v14;
  unsigned int v15;
  unsigned int v16;
  llvm::raw_ostream *v17;
  llvm::raw_ostream *v18;
  unsigned int v20;
  char v21[4];
  char v22[6];
  char v23;
  char v24;

  v6 = a2;
  v8 = HIDWORD(a2);
  if (a4)
  {
    v9 = HIDWORD(a2) + a5;
    v10 = *(llvm::raw_ostream **)(a1 + 40);
    v11 = bswap32(HIDWORD(a2) + a5);
    if ((*(_DWORD *)(a1 + 48) - 1) >= 2)
      v9 = v11;
    v20 = v9;
    v12 = (char *)&v20;
  }
  else
  {
    v10 = *(llvm::raw_ostream **)(a1 + 40);
    v13 = bswap32(HIDWORD(a2));
    if ((*(_DWORD *)(a1 + 48) - 1) >= 2)
      LODWORD(v8) = v13;
    *(_DWORD *)v21 = v8;
    v12 = v21;
  }
  llvm::raw_ostream::write(v10, v12, 4uLL);
  v14 = *(llvm::raw_ostream **)(a1 + 40);
  v15 = bswap32(v6);
  if ((*(_DWORD *)(a1 + 48) - 1) >= 2)
    v16 = v15;
  else
    v16 = v6;
  *(_DWORD *)v22 = v16;
  llvm::raw_ostream::write(v14, v22, 4uLL);
  v17 = *(llvm::raw_ostream **)(a1 + 40);
  v23 = a3;
  llvm::raw_ostream::write(v17, &v23, 1uLL);
  v18 = *(llvm::raw_ostream **)(a1 + 40);
  v24 = HIBYTE(a3);
  return llvm::raw_ostream::write(v18, &v24, 1uLL);
}

llvm::raw_ostream *sub_1C5972868(uint64_t a1, char *__src, unint64_t a3, unsigned int a4, unsigned int a5, char a6, char a7)
{
  llvm::raw_ostream *v14;
  unsigned int v15;
  unsigned int Offset;
  llvm::raw_ostream *v17;
  unsigned int v18;
  unsigned int v19;
  uint64_t v20;
  llvm::raw_ostream *v21;
  llvm::raw_ostream *v22;
  unsigned int v23;
  unsigned int v24;
  llvm::raw_ostream *v25;
  unsigned int v26;
  __int16 v27;
  llvm::raw_ostream *v28;
  llvm::raw_ostream *v29;
  llvm::raw_ostream *v30;
  char v32;
  char __dst[12];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (a3 < 9)
  {
    strncpy(__dst, __src, 8uLL);
    v20 = 0;
    v21 = *(llvm::raw_ostream **)(a1 + 40);
    do
    {
      v32 = __dst[v20];
      llvm::raw_ostream::write(v21, &v32, 1uLL);
      ++v20;
    }
    while (v20 != 8);
  }
  else
  {
    v14 = *(llvm::raw_ostream **)(a1 + 40);
    *(_DWORD *)__dst = 0;
    llvm::raw_ostream::write(v14, __dst, 4uLL);
    v15 = sub_1C5E3DF4C(__src, (uint64_t)&__src[a3]);
    Offset = llvm::StringTableBuilder::getOffset(a1 + 64, (uint64_t)__src, a3 | ((unint64_t)v15 << 32));
    v17 = *(llvm::raw_ostream **)(a1 + 40);
    v18 = bswap32(Offset);
    if ((*(_DWORD *)(a1 + 48) - 1) >= 2)
      v19 = v18;
    else
      v19 = Offset;
    *(_DWORD *)__dst = v19;
    llvm::raw_ostream::write(v17, __dst, 4uLL);
  }
  v22 = *(llvm::raw_ostream **)(a1 + 40);
  v23 = bswap32(a4);
  if ((*(_DWORD *)(a1 + 48) - 1) >= 2)
    v24 = v23;
  else
    v24 = a4;
  *(_DWORD *)__dst = v24;
  llvm::raw_ostream::write(v22, __dst, 4uLL);
  v25 = *(llvm::raw_ostream **)(a1 + 40);
  v26 = bswap32(a5) >> 16;
  if ((*(_DWORD *)(a1 + 48) - 1) >= 2)
    v27 = v26;
  else
    v27 = a5;
  *(_WORD *)__dst = v27;
  llvm::raw_ostream::write(v25, __dst, 2uLL);
  v28 = *(llvm::raw_ostream **)(a1 + 40);
  *(_WORD *)__dst = 0;
  llvm::raw_ostream::write(v28, __dst, 2uLL);
  v29 = *(llvm::raw_ostream **)(a1 + 40);
  __dst[0] = a6;
  llvm::raw_ostream::write(v29, __dst, 1uLL);
  v30 = *(llvm::raw_ostream **)(a1 + 40);
  __dst[0] = a7;
  return llvm::raw_ostream::write(v30, __dst, 1uLL);
}

llvm::raw_ostream *sub_1C5972A28(uint64_t a1, unsigned int *a2, unsigned int a3, char a4)
{
  sub_1C5972868(a1, *(char **)(*(_QWORD *)a2 + 240), *(_QWORD *)(*(_QWORD *)a2 + 248), a2[4], a3, a4, 1);
  return sub_1C5972A9C(a1, a2[6], (8 * (~__clz(1 << *(_BYTE *)(*(_QWORD *)a2 + 24)) & 0x1F)) | *(_BYTE *)(*(_QWORD *)a2 + 225), *(_BYTE *)(*(_QWORD *)a2 + 224));
}

llvm::raw_ostream *sub_1C5972A9C(uint64_t a1, unsigned int a2, char a3, char a4)
{
  llvm::raw_ostream *v7;
  unsigned int v8;
  unsigned int v9;
  llvm::raw_ostream *v10;
  llvm::raw_ostream *v11;
  llvm::raw_ostream *v12;
  llvm::raw_ostream *v13;
  llvm::raw_ostream *v14;
  llvm::raw_ostream *v15;
  char v17[4];

  v7 = *(llvm::raw_ostream **)(a1 + 40);
  v8 = bswap32(a2);
  if ((*(_DWORD *)(a1 + 48) - 1) >= 2)
    v9 = v8;
  else
    v9 = a2;
  *(_DWORD *)v17 = v9;
  llvm::raw_ostream::write(v7, v17, 4uLL);
  v10 = *(llvm::raw_ostream **)(a1 + 40);
  *(_DWORD *)v17 = 0;
  llvm::raw_ostream::write(v10, v17, 4uLL);
  v11 = *(llvm::raw_ostream **)(a1 + 40);
  *(_WORD *)v17 = 0;
  llvm::raw_ostream::write(v11, v17, 2uLL);
  v12 = *(llvm::raw_ostream **)(a1 + 40);
  v17[0] = a3;
  llvm::raw_ostream::write(v12, v17, 1uLL);
  v13 = *(llvm::raw_ostream **)(a1 + 40);
  v17[0] = a4;
  llvm::raw_ostream::write(v13, v17, 1uLL);
  v14 = *(llvm::raw_ostream **)(a1 + 40);
  *(_DWORD *)v17 = 0;
  llvm::raw_ostream::write(v14, v17, 4uLL);
  v15 = *(llvm::raw_ostream **)(a1 + 40);
  *(_WORD *)v17 = 0;
  return llvm::raw_ostream::write(v15, v17, 2uLL);
}

uint64_t llvm::mca::CodeEmitter::getOrCreateEncodingInfo(llvm::mca::CodeEmitter *this, unsigned int a2)
{
  _DWORD *v2;
  uint64_t v3;
  uint64_t v6;
  __int128 *v7;
  unsigned int v8;
  void **v9;
  BOOL v10;
  _BYTE *v11;
  uint64_t v12;
  __int128 v14;
  void *v15;
  uint64_t v16;
  _BYTE v17[144];
  void *v18[2];
  _QWORD v19[8];

  v19[6] = *MEMORY[0x1E0C80C00];
  v2 = (_DWORD *)(*((_QWORD *)this + 49) + 8 * a2);
  if (v2[1])
    return *(_QWORD *)v2;
  v18[0] = v19;
  v18[1] = (void *)0x200000000;
  v6 = *((_QWORD *)this + 47);
  v7 = (__int128 *)(v6 + 168 * a2);
  v14 = *v7;
  v15 = v17;
  v16 = 0x800000000;
  v8 = *((_DWORD *)v7 + 6);
  v9 = (void **)(v7 + 1);
  if (v8)
    v10 = &v15 == v9;
  else
    v10 = 1;
  if (!v10)
  {
    if (v8 >= 9)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v15, (uint64_t)v17, *((unsigned int *)v7 + 6), 16);
      v12 = *((unsigned int *)v7 + 6);
      if (!(_DWORD)v12)
        goto LABEL_10;
      v11 = v15;
    }
    else
    {
      v11 = v17;
      v12 = *((unsigned int *)v7 + 6);
    }
    memcpy(v11, *v9, 16 * v12);
LABEL_10:
    LODWORD(v16) = v8;
  }
  v17[128] = *(_BYTE *)(v6 + 168 * a2 + 160);
  if ((*(unsigned int (**)(_QWORD, __int128 *, _QWORD))(**((_QWORD **)this + 1) + 128))(*((_QWORD *)this + 1), v7, *(_QWORD *)this))
  {
    (*(void (**)(_QWORD, __int128 *, _QWORD))(**((_QWORD **)this + 1) + 152))(*((_QWORD *)this + 1), &v14, *(_QWORD *)this);
  }
  *v2 = *((_QWORD *)this + 4);
  (*(void (**)(_QWORD, __int128 *, char *, void **, _QWORD))(**((_QWORD **)this + 2) + 32))(*((_QWORD *)this + 2), &v14, (char *)this + 304, v18, *(_QWORD *)this);
  v2[1] = *((_DWORD *)this + 8) - *v2;
  v3 = *(_QWORD *)v2;
  if (v15 != v17)
    free(v15);
  if (v18[0] != v19)
    free(v18[0]);
  return v3;
}

uint64_t *llvm::mca::Context::createDefaultPipeline@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  char v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  _QWORD *v42;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  _QWORD *v54;

  v8 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 160);
  if (*(_DWORD *)(v8 + 4) <= 1u)
    return llvm::mca::Context::createInOrderPipeline(a1, a2, a3, a4, a5);
  v9 = operator new();
  llvm::mca::RetireControlUnit::RetireControlUnit(v9, v8);
  v10 = *(_QWORD *)(a1 + 48);
  v11 = operator new();
  llvm::mca::RegisterFile::RegisterFile(v11, v8, v10, *(_DWORD *)(a2 + 12));
  v12 = operator new();
  v13 = (_QWORD *)llvm::mca::LSUnitBase::LSUnitBase(v12, v8, *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), *(_BYTE *)(a2 + 24));
  *v13 = &unk_1E81847A8;
  *(_QWORD *)((char *)v13 + 68) = 0;
  *(_QWORD *)((char *)v13 + 60) = 0;
  v14 = operator new();
  v15 = operator new();
  v16 = llvm::mca::ResourceManager::ResourceManager(v15, v8);
  *(_QWORD *)v14 = &off_1E8184650;
  *(_QWORD *)(v14 + 8) = v12;
  *(_QWORD *)(v14 + 16) = 0;
  *(_QWORD *)(v14 + 24) = v16;
  *(_OWORD *)(v14 + 32) = 0u;
  *(_OWORD *)(v14 + 48) = 0u;
  *(_OWORD *)(v14 + 64) = 0u;
  *(_OWORD *)(v14 + 80) = 0u;
  *(_OWORD *)(v14 + 96) = 0u;
  *(_OWORD *)(v14 + 112) = 0u;
  *(_OWORD *)(v14 + 125) = 0u;
  v54 = 0;
  llvm::mca::Scheduler::initializeStrategy(v14, &v54);
  if (v54)
    (*(void (**)(_QWORD *))(*v54 + 8))(v54);
  v17 = operator new();
  *(_QWORD *)(v17 + 24) = 0;
  *(_QWORD *)(v17 + 32) = 0;
  *(_QWORD *)(v17 + 16) = v17 + 24;
  *(_QWORD *)v17 = &unk_1E81849A0;
  *(_QWORD *)(v17 + 8) = 0;
  *(_DWORD *)(v17 + 40) = 0;
  *(_QWORD *)(v17 + 48) = 0;
  *(_QWORD *)(v17 + 56) = v17 + 72;
  *(_QWORD *)(v17 + 64) = 0x1000000000;
  *(_QWORD *)(v17 + 200) = a3;
  *(_DWORD *)(v17 + 208) = 0;
  v54 = (_QWORD *)v17;
  v18 = *(_QWORD *)(a1 + 56);
  v19 = operator new();
  v20 = v19;
  v21 = *(_DWORD *)(a2 + 8);
  *(_QWORD *)(v19 + 24) = 0;
  *(_QWORD *)(v19 + 16) = v19 + 24;
  *(_QWORD *)(v19 + 32) = 0;
  *(_QWORD *)v19 = &off_1E8184958;
  *(_QWORD *)(v19 + 8) = 0;
  *(_DWORD *)(v19 + 40) = v21;
  *(_QWORD *)(v19 + 44) = v21;
  *(_DWORD *)(v19 + 56) = 0;
  *(_QWORD *)(v19 + 64) = 0;
  *(_QWORD *)(v19 + 72) = v18;
  *(_QWORD *)(v19 + 80) = v9;
  *(_QWORD *)(v19 + 88) = v11;
  if (!v21)
    *(_DWORD *)(v19 + 40) = **(_DWORD **)(v18 + 160);
  v22 = operator new();
  *(_QWORD *)(v22 + 24) = 0;
  v23 = *(_BYTE *)(a2 + 25);
  *(_QWORD *)(v22 + 16) = v22 + 24;
  *(_QWORD *)v22 = &unk_1E81849E8;
  *(_QWORD *)(v22 + 8) = 0;
  *(_QWORD *)(v22 + 32) = 0;
  *(_QWORD *)(v22 + 40) = v14;
  *(_QWORD *)(v22 + 48) = 0;
  *(_BYTE *)(v22 + 56) = v23;
  v24 = (_QWORD *)operator new();
  v24[3] = 0;
  v24[2] = v24 + 3;
  *v24 = &unk_1E8184B08;
  v24[1] = 0;
  v24[4] = 0;
  v24[5] = v9;
  v24[6] = v11;
  v24[7] = v12;
  v53 = v9;
  sub_1C4E0081C(a1, (char *)&v53);
  v25 = v53;
  v53 = 0;
  if (v25)
    (*(void (**)(uint64_t))(*(_QWORD *)v25 + 8))(v25);
  v52 = v11;
  sub_1C4E0081C(a1, (char *)&v52);
  v26 = v52;
  v52 = 0;
  if (v26)
    (*(void (**)(uint64_t))(*(_QWORD *)v26 + 8))(v26);
  v51 = v12;
  sub_1C4E0081C(a1, (char *)&v51);
  v27 = v51;
  v51 = 0;
  if (v27)
    (*(void (**)(uint64_t))(*(_QWORD *)v27 + 8))(v27);
  v50 = v14;
  sub_1C4E0081C(a1, (char *)&v50);
  v28 = v50;
  v50 = 0;
  if (v28)
    (*(void (**)(uint64_t))(*(_QWORD *)v28 + 8))(v28);
  v29 = operator new();
  *(_QWORD *)v29 = v29 + 16;
  *(_QWORD *)(v29 + 8) = 0x800000000;
  *(_QWORD *)(v29 + 88) = 0;
  *(_QWORD *)(v29 + 96) = 0;
  *(_QWORD *)(v29 + 80) = v29 + 88;
  *(_DWORD *)(v29 + 104) = 0;
  *a5 = v29;
  v54 = 0;
  v49 = v17;
  sub_1C4E0081C(v29, (char *)&v49);
  v30 = v49;
  v49 = 0;
  if (v30)
    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
  if (*(_DWORD *)a2)
  {
    v31 = operator new();
    v32 = *(_DWORD *)a2;
    v33 = *(_DWORD *)(a2 + 4);
    *(_QWORD *)(v31 + 32) = 0;
    *(_QWORD *)(v31 + 24) = 0;
    *(_QWORD *)(v31 + 16) = v31 + 24;
    *(_QWORD *)v31 = &off_1E8184AC0;
    *(_QWORD *)(v31 + 8) = 0;
    *(_QWORD *)(v31 + 40) = v31 + 56;
    *(_QWORD *)(v31 + 48) = 0x800000000;
    *(_QWORD *)(v31 + 184) = 0;
    *(_DWORD *)(v31 + 192) = v33;
    *(_DWORD *)(v31 + 196) = 0;
    if (v32 <= 1)
      v34 = 1;
    else
      v34 = v32;
    *(_BYTE *)(v31 + 204) = 1;
    sub_1C598218C((unsigned int *)(v31 + 40), v34);
    *(_DWORD *)(v31 + 200) = *(_DWORD *)(v31 + 48);
    v48 = v31;
    v35 = *(unsigned int *)(v29 + 8);
    if ((_DWORD)v35)
      *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v29 + 8 * v35 - 8) + 8) = v31;
    sub_1C4E0081C(v29, (char *)&v48);
    v36 = v48;
    v48 = 0;
    if (v36)
      (*(void (**)(uint64_t))(*(_QWORD *)v36 + 8))(v36);
  }
  v47 = v20;
  v37 = *(unsigned int *)(v29 + 8);
  if ((_DWORD)v37)
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v29 + 8 * v37 - 8) + 8) = v20;
  sub_1C4E0081C(v29, (char *)&v47);
  v38 = v47;
  v47 = 0;
  if (v38)
    (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  v46 = v22;
  v39 = *(unsigned int *)(v29 + 8);
  if ((_DWORD)v39)
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v29 + 8 * v39 - 8) + 8) = v22;
  sub_1C4E0081C(v29, (char *)&v46);
  v40 = v46;
  v46 = 0;
  if (v40)
    (*(void (**)(uint64_t))(*(_QWORD *)v40 + 8))(v40);
  v45 = v24;
  v41 = *(unsigned int *)(v29 + 8);
  if ((_DWORD)v41)
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v29 + 8 * v41 - 8) + 8) = v24;
  sub_1C4E0081C(v29, (char *)&v45);
  v42 = v45;
  v45 = 0;
  if (v42)
    (*(void (**)(_QWORD *))(*v42 + 8))(v42);
  return sub_1C59736A0((uint64_t *)&v54);
}

uint64_t *llvm::mca::Context::createInOrderPipeline@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t *a5@<X8>)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(*(_QWORD *)(a1 + 56) + 160);
  v12 = operator new();
  llvm::mca::RegisterFile::RegisterFile(v12, v11, v10, *(_DWORD *)(a2 + 12));
  v13 = operator new();
  v14 = (_QWORD *)llvm::mca::LSUnitBase::LSUnitBase(v13, v11, *(_DWORD *)(a2 + 16), *(_DWORD *)(a2 + 20), *(_BYTE *)(a2 + 24));
  *v14 = &unk_1E81847A8;
  *(_QWORD *)((char *)v14 + 68) = 0;
  *(_QWORD *)((char *)v14 + 60) = 0;
  v15 = operator new();
  *(_QWORD *)(v15 + 24) = 0;
  *(_QWORD *)(v15 + 32) = 0;
  *(_QWORD *)(v15 + 16) = v15 + 24;
  *(_QWORD *)v15 = &unk_1E81849A0;
  *(_QWORD *)(v15 + 8) = 0;
  *(_DWORD *)(v15 + 40) = 0;
  *(_QWORD *)(v15 + 48) = 0;
  *(_QWORD *)(v15 + 56) = v15 + 72;
  *(_QWORD *)(v15 + 64) = 0x1000000000;
  *(_QWORD *)(v15 + 200) = a3;
  *(_DWORD *)(v15 + 208) = 0;
  v30 = v15;
  v16 = *(_QWORD *)(a1 + 56);
  v17 = operator new();
  llvm::mca::InOrderIssueStage::InOrderIssueStage(v17, v16, v12, a4, v13);
  v18 = operator new();
  *(_QWORD *)v18 = v18 + 16;
  *(_QWORD *)(v18 + 8) = 0x800000000;
  *(_QWORD *)(v18 + 96) = 0;
  *(_QWORD *)(v18 + 88) = 0;
  *(_QWORD *)(v18 + 80) = v18 + 88;
  *(_DWORD *)(v18 + 104) = 0;
  *a5 = v18;
  v29 = v12;
  sub_1C4E0081C(a1, (char *)&v29);
  v19 = v29;
  v29 = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v28 = v13;
  sub_1C4E0081C(a1, (char *)&v28);
  v20 = v28;
  v28 = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  v30 = 0;
  v27 = v15;
  v21 = *(unsigned int *)(v18 + 8);
  if ((_DWORD)v21)
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v18 + 8 * v21 - 8) + 8) = v15;
  sub_1C4E0081C(v18, (char *)&v27);
  v22 = v27;
  v27 = 0;
  if (v22)
    (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
  v26 = v17;
  v23 = *(unsigned int *)(v18 + 8);
  if ((_DWORD)v23)
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)v18 + 8 * v23 - 8) + 8) = v17;
  sub_1C4E0081C(v18, (char *)&v26);
  v24 = v26;
  v26 = 0;
  if (v24)
    (*(void (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  return sub_1C59736A0(&v30);
}

_QWORD *sub_1C5973558(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = &off_1E8184650;
  v2 = (void *)a1[13];
  if (v2)
  {
    a1[14] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[10];
  if (v3)
  {
    a1[11] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[7];
  if (v4)
  {
    a1[8] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[4];
  if (v5)
  {
    a1[5] = v5;
    operator delete(v5);
  }
  v6 = a1[3];
  a1[3] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = a1[2];
  a1[2] = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  return a1;
}

void sub_1C59735F4(_QWORD *a1)
{
  void *v2;
  void *v3;
  void *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  *a1 = &off_1E8184650;
  v2 = (void *)a1[13];
  if (v2)
  {
    a1[14] = v2;
    operator delete(v2);
  }
  v3 = (void *)a1[10];
  if (v3)
  {
    a1[11] = v3;
    operator delete(v3);
  }
  v4 = (void *)a1[7];
  if (v4)
  {
    a1[8] = v4;
    operator delete(v4);
  }
  v5 = (void *)a1[4];
  if (v5)
  {
    a1[5] = v5;
    operator delete(v5);
  }
  v6 = a1[3];
  a1[3] = 0;
  if (v6)
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  v7 = a1[2];
  a1[2] = 0;
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t *sub_1C59736A0(uint64_t *result)
{
  uint64_t v1;

  v1 = *result;
  *result = 0;
  if (v1)
  {
    sub_1C5973708((char **)(v1 + 56));
    *(_QWORD *)v1 = off_1E8184B50;
    sub_1C4FE319C(v1 + 16, *(_QWORD **)(v1 + 24));
    JUMPOUT(0x1CAA32FC0);
  }
  return result;
}

char **sub_1C5973708(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;
  uint64_t v6;
  void *v7;
  void *v8;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 8 * v3;
    v5 = v2 - 8;
    do
    {
      v6 = *(_QWORD *)&v5[v4];
      *(_QWORD *)&v5[v4] = 0;
      if (v6)
      {
        v7 = *(void **)(v6 + 512);
        if (v7)
        {
          *(_QWORD *)(v6 + 520) = v7;
          operator delete(v7);
        }
        v8 = *(void **)(v6 + 304);
        if (v8 != (void *)(v6 + 320))
          free(v8);
        sub_1C59737B0((char **)(v6 + 16));
        MEMORY[0x1CAA32FC0](v6, 0x10E0C40F9C4931CLL);
      }
      v4 -= 8;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

char **sub_1C59737B0(char **a1)
{
  char *v2;
  uint64_t v3;
  uint64_t v4;
  char *v5;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 2);
  if ((_DWORD)v3)
  {
    v4 = 136 * v3;
    do
    {
      v5 = *(char **)&v2[v4 - 80];
      if (&v2[v4 - 64] != v5)
        free(v5);
      v4 -= 136;
    }
    while (v4);
    v2 = *a1;
  }
  if (v2 != (char *)(a1 + 2))
    free(v2);
  return a1;
}

void llvm::mca::CustomBehaviour::~CustomBehaviour(llvm::mca::CustomBehaviour *this)
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t llvm::mca::CustomBehaviour::checkCustomHazard()
{
  return 0;
}

void llvm::mca::CustomBehaviour::getStartViews(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void llvm::mca::CustomBehaviour::getPostInstrInfoViews(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void llvm::mca::CustomBehaviour::getEndViews(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void sub_1C597387C()
{
  JUMPOUT(0x1CAA32FC0);
}

void llvm::mca::HardwareUnit::~HardwareUnit(llvm::mca::HardwareUnit *this)
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t llvm::mca::LSUnitBase::LSUnitBase(uint64_t result, uint64_t a2, int a3, int a4, char a5)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;

  *(_DWORD *)(result + 8) = a3;
  *(_DWORD *)(result + 12) = a4;
  *(_QWORD *)result = off_1E8184758;
  *(_QWORD *)(result + 16) = 0;
  *(_BYTE *)(result + 24) = a5;
  *(_QWORD *)(result + 32) = 0;
  *(_QWORD *)(result + 40) = 0;
  *(_DWORD *)(result + 48) = 0;
  *(_DWORD *)(result + 56) = 1;
  v5 = *(_QWORD *)(a2 + 64);
  if (v5)
  {
    if (!a3)
    {
      v6 = *(unsigned int *)(v5 + 36);
      if ((_DWORD)v6)
        *(_DWORD *)(result + 8) = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 32 * v6 + 16) & ~(*(int *)(*(_QWORD *)(a2 + 32)
                                                                                              + 32 * v6
                                                                                              + 16) >> 31);
    }
    if (!a4)
    {
      v7 = *(unsigned int *)(v5 + 40);
      if ((_DWORD)v7)
        *(_DWORD *)(result + 12) = *(_DWORD *)(*(_QWORD *)(a2 + 32) + 32 * v7 + 16) & ~(*(int *)(*(_QWORD *)(a2 + 32)
                                                                                               + 32 * v7
                                                                                               + 16) >> 31);
    }
  }
  return result;
}

void llvm::mca::LSUnitBase::~LSUnitBase(llvm::mca::LSUnitBase *this)
{
  *(_QWORD *)this = off_1E8184758;
  sub_1C59746A0((uint64_t *)this + 4);
}

uint64_t llvm::mca::LSUnitBase::cycleEvent(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  unsigned int *v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int *v6;
  _DWORD *v7;
  int v8;
  unsigned int *v9;
  unsigned int v10;

  v1 = *(_QWORD *)(this + 32);
  v2 = *(unsigned int *)(this + 48);
  v3 = (unsigned int *)(v1 + 16 * v2);
  if (*(_DWORD *)(this + 40))
  {
    if ((_DWORD)v2)
    {
      v4 = 16 * v2;
      v5 = *(unsigned int **)(this + 32);
      while (*v5 >= 0xFFFFFFFE)
      {
        v5 += 4;
        v4 -= 16;
        if (!v4)
          goto LABEL_6;
      }
    }
    else
    {
      v5 = *(unsigned int **)(this + 32);
    }
  }
  else
  {
LABEL_6:
    v5 = (unsigned int *)(v1 + 16 * v2);
  }
  v6 = (unsigned int *)(v1 + 16 * v2);
LABEL_9:
  while (v5 != v6)
  {
    v7 = (_DWORD *)*((_QWORD *)v5 + 1);
    if (*v7 > (v7[2] + v7[1]))
    {
      v8 = v7[32];
      if (v8)
        v7[32] = v8 - 1;
    }
    v9 = v5 + 4;
    while (v9 != v3)
    {
      v10 = *v9;
      v9 += 4;
      if (v10 <= 0xFFFFFFFD)
      {
        v5 = v9 - 4;
        goto LABEL_9;
      }
    }
    v5 = v3;
  }
  return this;
}

uint64_t llvm::mca::LSUnit::dispatch(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  char v4;
  char v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  _DWORD *v10;
  int v11;
  uint64_t v12;
  _DWORD *v13;
  int *v14;
  int *v15;
  _DWORD *v16;
  unsigned int v17;
  _DWORD *v18;
  int *v19;
  int v20;
  _DWORD *v21;
  int *v22;
  int *v23;
  int v25;

  v3 = *(_QWORD *)(a2 + 8);
  v4 = *(_BYTE *)(v3 + 540);
  v5 = v4;
  if ((v4 & 4) == 0)
  {
    if ((*(_BYTE *)(v3 + 540) & 8) == 0)
      goto LABEL_3;
LABEL_23:
    ++*(_DWORD *)(a1 + 20);
    if ((*(_BYTE *)(v3 + 540) & 8) == 0)
      goto LABEL_4;
LABEL_24:
    v12 = sub_1C5973CAC(a1);
    v25 = v12;
    v16 = (_DWORD *)*((_QWORD *)sub_1C4A1156C((uint64_t *)(a1 + 32), &v25) + 1);
    ++v16[3];
    v17 = *(_DWORD *)(a1 + 60);
    if (v17 <= *(_DWORD *)(a1 + 64))
      v17 = *(_DWORD *)(a1 + 64);
    if (v17)
    {
      v25 = v17;
      v18 = (_DWORD *)*((_QWORD *)sub_1C4A1156C((uint64_t *)(a1 + 32), &v25) + 1);
      sub_1C5973DDC(v18, v16, *(_BYTE *)(a1 + 24) == 0);
    }
    if (*(_DWORD *)(a1 + 72))
    {
      v25 = *(_DWORD *)(a1 + 72);
      v19 = sub_1C4A1156C((uint64_t *)(a1 + 32), &v25);
      sub_1C5973DDC(*((_DWORD **)v19 + 1), v16, 1);
    }
    v20 = *(_DWORD *)(a1 + 68);
    if (v20 && v20 != *(_DWORD *)(a1 + 72))
    {
      v25 = *(_DWORD *)(a1 + 68);
      v21 = (_DWORD *)*((_QWORD *)sub_1C4A1156C((uint64_t *)(a1 + 32), &v25) + 1);
      sub_1C5973DDC(v21, v16, *(_BYTE *)(a1 + 24) == 0);
    }
    *(_DWORD *)(a1 + 68) = v12;
    if ((v4 & 2) != 0)
      *(_DWORD *)(a1 + 72) = v12;
    if ((*(_BYTE *)(v3 + 540) & 4) != 0)
    {
      *(_DWORD *)(a1 + 60) = v12;
      if ((v4 & 1) != 0)
        goto LABEL_37;
    }
    return v12;
  }
  ++*(_DWORD *)(a1 + 16);
  v5 = *(_BYTE *)(v3 + 540);
  if ((v5 & 8) != 0)
    goto LABEL_23;
LABEL_3:
  if ((v5 & 8) != 0)
    goto LABEL_24;
LABEL_4:
  v6 = *(_DWORD *)(a1 + 60);
  v7 = *(_DWORD *)(a1 + 64);
  if (v6 <= v7)
    v8 = *(_DWORD *)(a1 + 64);
  else
    v8 = *(_DWORD *)(a1 + 60);
  if ((v4 & 1) == 0 && v8 && v7 < v6 && v8 > *(_DWORD *)(a1 + 68))
  {
    v25 = v8;
    v10 = (_DWORD *)*((_QWORD *)sub_1C4A1156C((uint64_t *)(a1 + 32), &v25) + 1);
    v11 = v10[4];
    if (!v11 || v11 != v10[3] - v10[5])
    {
      v25 = *(_DWORD *)(a1 + 60);
      v23 = sub_1C4A1156C((uint64_t *)(a1 + 32), &v25);
      ++*(_DWORD *)(*((_QWORD *)v23 + 1) + 12);
      return *(unsigned int *)(a1 + 60);
    }
  }
  v12 = sub_1C5973CAC(a1);
  v25 = v12;
  v13 = (_DWORD *)*((_QWORD *)sub_1C4A1156C((uint64_t *)(a1 + 32), &v25) + 1);
  ++v13[3];
  if (!*(_BYTE *)(a1 + 24) && *(_DWORD *)(a1 + 68))
  {
    v25 = *(_DWORD *)(a1 + 68);
    v14 = sub_1C4A1156C((uint64_t *)(a1 + 32), &v25);
    sub_1C5973DDC(*((_DWORD **)v14 + 1), v13, 1);
  }
  if ((v4 & 1) != 0)
  {
    if (v8)
    {
      v25 = v8;
      v15 = sub_1C4A1156C((uint64_t *)(a1 + 32), &v25);
      sub_1C5973DDC(*((_DWORD **)v15 + 1), v13, 1);
    }
    *(_DWORD *)(a1 + 60) = v12;
LABEL_37:
    *(_DWORD *)(a1 + 64) = v12;
    return v12;
  }
  if (*(_DWORD *)(a1 + 64))
  {
    v25 = *(_DWORD *)(a1 + 64);
    v22 = sub_1C4A1156C((uint64_t *)(a1 + 32), &v25);
    sub_1C5973DDC(*((_DWORD **)v22 + 1), v13, 1);
  }
  *(_DWORD *)(a1 + 60) = v12;
  return v12;
}

uint64_t sub_1C5973CAC(uint64_t a1)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  int v5;
  int v6;
  unsigned int v7;
  _DWORD *v8;
  int v9;
  _DWORD *v10;
  _DWORD *v11;
  uint64_t result;
  _DWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  int v17;
  uint64_t v18;

  v2 = operator new();
  v3 = *(_QWORD *)(a1 + 32);
  *(_QWORD *)v2 = 0;
  *(_QWORD *)(v2 + 8) = 0;
  *(_QWORD *)(v2 + 16) = 0;
  *(_QWORD *)(v2 + 24) = v2 + 40;
  *(_QWORD *)(v2 + 32) = 0x400000000;
  *(_QWORD *)(v2 + 72) = v2 + 88;
  *(_QWORD *)(v2 + 80) = 0x400000000;
  *(_QWORD *)(v2 + 120) = 0;
  *(_DWORD *)(v2 + 128) = 0;
  *(_DWORD *)(v2 + 136) = 0;
  *(_QWORD *)(v2 + 144) = 0;
  v4 = *(_DWORD *)(a1 + 56);
  v17 = v4;
  v18 = v2;
  v5 = *(_DWORD *)(a1 + 48);
  if (!v5)
  {
    v10 = 0;
LABEL_5:
    v11 = sub_1C5974320(a1 + 32, &v17, v10);
    *v11 = v4;
    *((_QWORD *)v11 + 1) = v2;
    goto LABEL_6;
  }
  v6 = v5 - 1;
  v7 = v6 & (37 * v4);
  v8 = (_DWORD *)(v3 + 16 * v7);
  v9 = *v8;
  if (v4 != *v8)
  {
    v13 = 0;
    v14 = 1;
    while (v9 != -1)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v9 == -2;
      if (v15)
        v13 = v8;
      v16 = v7 + v14++;
      v7 = v16 & v6;
      v8 = (_DWORD *)(v3 + 16 * v7);
      v9 = *v8;
      if (v4 == *v8)
        goto LABEL_3;
    }
    if (v13)
      v10 = v13;
    else
      v10 = v8;
    goto LABEL_5;
  }
LABEL_3:
  sub_1C5974640((_QWORD *)v2);
LABEL_6:
  result = *(unsigned int *)(a1 + 56);
  *(_DWORD *)(a1 + 56) = result + 1;
  return result;
}

_DWORD *sub_1C5973DDC(_DWORD *result, _DWORD *a2, char a3)
{
  _DWORD *v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  _DWORD *v8;

  v4 = result;
  v5 = result[4];
  if ((a3 & 1) != 0)
  {
    ++*a2;
    if (v5)
    {
      if (v5 == result[3] - result[5])
      {
        ++a2[1];
        v6 = *(_DWORD *)(*((_QWORD *)result + 18) + 548);
        if (a2[32] < v6)
        {
          a2[30] = result[34];
          a2[32] = v6;
        }
      }
    }
    v8 = result + 20;
    v7 = result[20];
    result += 18;
    if (v7 >= v4[21])
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(v4 + 22), v7 + 1, 8);
      *(_QWORD *)(*((_QWORD *)v4 + 9) + 8 * v4[20]) = a2;
      LODWORD(v7) = v4[20];
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)result + 8 * v7) = a2;
    }
    goto LABEL_12;
  }
  if (!v5 || v5 != result[3] - result[5])
  {
    ++*a2;
    v8 = result + 8;
    v7 = result[8];
    result += 6;
    if (v7 >= v4[9])
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(v4 + 10), v7 + 1, 8);
      *(_QWORD *)(*((_QWORD *)v4 + 3) + 8 * v4[8]) = a2;
      LODWORD(v7) = v4[8];
    }
    else
    {
      *(_QWORD *)(*(_QWORD *)result + 8 * v7) = a2;
    }
LABEL_12:
    *v8 = v7 + 1;
  }
  return result;
}

uint64_t llvm::mca::LSUnit::isAvailable(_DWORD *a1, uint64_t a2)
{
  int v2;
  int v4;

  if ((*(_BYTE *)(*(_QWORD *)(a2 + 8) + 540) & 4) != 0)
  {
    v2 = a1[2];
    if (v2)
    {
      if (v2 == a1[4])
        return 1;
    }
  }
  if ((*(_BYTE *)(*(_QWORD *)(a2 + 8) + 540) & 8) != 0)
  {
    v4 = a1[3];
    if (v4)
    {
      if (v4 == a1[5])
        return 2;
    }
  }
  return 0;
}

int32x2_t llvm::mca::LSUnitBase::onInstructionExecuted(uint64_t a1, int *a2)
{
  int *v4;
  int32x2_t result;
  int *v6;
  uint64_t v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;

  v15 = *(_DWORD *)(*((_QWORD *)a2 + 1) + 556);
  v4 = sub_1C4A1156C((uint64_t *)(a1 + 32), &v15);
  v6 = v4;
  v7 = *((_QWORD *)v4 + 1);
  v8 = *a2;
  v9 = *(_DWORD *)(v7 + 20) + 1;
  --*(_DWORD *)(v7 + 16);
  *(_DWORD *)(v7 + 20) = v9;
  if (*(_QWORD *)(v7 + 144) && *(_DWORD *)(v7 + 136) == v8)
    *(_QWORD *)(v7 + 144) = 0;
  if (*(_DWORD *)(v7 + 12) == v9)
  {
    v10 = *(unsigned int *)(v7 + 80);
    if ((_DWORD)v10)
    {
      v11 = *(uint64_t **)(v7 + 72);
      v12 = 8 * v10;
      result = (int32x2_t)0x1FFFFFFFFLL;
      do
      {
        v13 = *v11++;
        *(int32x2_t *)(v13 + 4) = vadd_s32(*(int32x2_t *)(v13 + 4), (int32x2_t)0x1FFFFFFFFLL);
        v12 -= 8;
      }
      while (v12);
    }
  }
  v14 = *((_QWORD *)v4 + 1);
  if (*(_DWORD *)(v14 + 12) == *(_DWORD *)(v14 + 20))
  {
    *((_QWORD *)v6 + 1) = 0;
    sub_1C5974640((_QWORD *)v14);
    *v6 = -2;
    result = vadd_s32(*(int32x2_t *)(a1 + 40), (int32x2_t)0x1FFFFFFFFLL);
    *(int32x2_t *)(a1 + 40) = result;
  }
  return result;
}

uint64_t llvm::mca::LSUnitBase::onInstructionRetired(uint64_t result, uint64_t a2)
{
  char v2;

  v2 = *(_BYTE *)(*(_QWORD *)(a2 + 8) + 540);
  if ((v2 & 4) == 0)
  {
    if ((*(_BYTE *)(*(_QWORD *)(a2 + 8) + 540) & 8) == 0)
      return result;
LABEL_5:
    --*(_DWORD *)(result + 20);
    return result;
  }
  --*(_DWORD *)(result + 16);
  if ((v2 & 8) != 0)
    goto LABEL_5;
  return result;
}

void llvm::mca::LSUnit::onInstructionExecuted(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  int v4;
  int v5;

  v2 = *(_QWORD *)(a2 + 8);
  if ((*(_BYTE *)(v2 + 540) & 0xC) != 0)
  {
    llvm::mca::LSUnitBase::onInstructionExecuted(a1, (int *)a2);
    v4 = *(_DWORD *)(v2 + 556);
    v5 = v4;
    if (!v4
      || (int *)(*(_QWORD *)(a1 + 32) + 16 * *(unsigned int *)(a1 + 48)) == sub_1C4A1156C((uint64_t *)(a1 + 32), &v5))
    {
      if (v4 == *(_DWORD *)(a1 + 60))
        *(_DWORD *)(a1 + 60) = 0;
      if (v4 == *(_DWORD *)(a1 + 68))
        *(_DWORD *)(a1 + 68) = 0;
      if (v4 == *(_DWORD *)(a1 + 64))
        *(_DWORD *)(a1 + 64) = 0;
      if (v4 == *(_DWORD *)(a1 + 72))
        *(_DWORD *)(a1 + 72) = 0;
    }
  }
}

_QWORD *sub_1C597412C(_QWORD *a1)
{
  *a1 = off_1E8184758;
  sub_1C59746A0(a1 + 4);
  return a1;
}

void sub_1C597415C(_QWORD *a1)
{
  *a1 = off_1E8184758;
  sub_1C59746A0(a1 + 4);
  JUMPOUT(0x1CAA32FC0);
}

_DWORD *sub_1C597419C(uint64_t a1, int *a2)
{
  uint64_t v3;
  int v4;
  _DWORD *result;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  _DWORD *v11;
  int v12;
  _DWORD *v13;
  int v14;
  BOOL v15;
  unsigned int v16;
  _DWORD *v17;
  uint64_t v18;
  int v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  _DWORD *v30;
  int v31;

  v3 = *((_QWORD *)a2 + 1);
  v4 = *(_DWORD *)(v3 + 556);
  v31 = v4;
  v7 = *(_QWORD *)(a1 + 32);
  result = (_DWORD *)(a1 + 32);
  v6 = v7;
  v8 = result[4];
  if (!v8)
  {
    v17 = 0;
LABEL_13:
    result = sub_1C5974320((uint64_t)result, &v31, v17);
    v11 = result;
    *result = v4;
    *((_QWORD *)result + 1) = 0;
    v3 = *((_QWORD *)a2 + 1);
    goto LABEL_14;
  }
  v9 = v8 - 1;
  v10 = (v8 - 1) & (37 * v4);
  v11 = (_DWORD *)(v6 + 16 * v10);
  v12 = *v11;
  if (v4 != *v11)
  {
    v13 = 0;
    v14 = 1;
    while (v12 != -1)
    {
      if (v13)
        v15 = 0;
      else
        v15 = v12 == -2;
      if (v15)
        v13 = v11;
      v16 = v10 + v14++;
      v10 = v16 & v9;
      v11 = (_DWORD *)(v6 + 16 * (v16 & v9));
      v12 = *v11;
      if (v4 == *v11)
        goto LABEL_14;
    }
    if (v13)
      v17 = v13;
    else
      v17 = v11;
    goto LABEL_13;
  }
LABEL_14:
  v18 = *((_QWORD *)v11 + 1);
  v19 = *a2;
  v20 = *(_DWORD *)(v18 + 16) + 1;
  *(_DWORD *)(v18 + 16) = v20;
  v21 = *(_QWORD *)(v18 + 144);
  if (!v21 || *(_DWORD *)(v21 + 548) < *(_DWORD *)(v3 + 548))
  {
    *(_DWORD *)(v18 + 136) = v19;
    *(_QWORD *)(v18 + 144) = v3;
    v21 = v3;
  }
  if (v20 && v20 == *(_DWORD *)(v18 + 12) - *(_DWORD *)(v18 + 20))
  {
    v22 = *(unsigned int *)(v18 + 32);
    if ((_DWORD)v22)
    {
      v23 = *(uint64_t **)(v18 + 24);
      v24 = 8 * v22;
      do
      {
        v25 = *v23++;
        ++*(_DWORD *)(v25 + 8);
        v24 -= 8;
      }
      while (v24);
    }
    v26 = *(unsigned int *)(v18 + 80);
    if ((_DWORD)v26)
    {
      v27 = *(_QWORD *)(v18 + 72);
      v28 = *(_DWORD *)(v21 + 548);
      v29 = 8 * v26;
      do
      {
        v30 = *(_DWORD **)v27;
        v30[1] = *(_DWORD *)(*(_QWORD *)v27 + 4) + 1;
        if (v30[32] < v28)
        {
          v30[30] = *(_DWORD *)(v18 + 136);
          v30[32] = v28;
        }
        v27 += 8;
        v29 -= 8;
      }
      while (v29);
    }
  }
  return result;
}

_DWORD *sub_1C5974320(uint64_t a1, _DWORD *a2, _DWORD *a3)
{
  int v5;
  unsigned int v6;
  int v8;
  int v9;
  unsigned int v10;
  int v11;
  _DWORD *v12;
  int v13;
  BOOL v14;
  unsigned int v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  int v20;
  BOOL v21;
  unsigned int v22;

  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 < 3 * v6)
  {
    if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
      goto LABEL_3;
    sub_1C59744A4((uint64_t *)a1, v6);
    v16 = *(_DWORD *)(a1 + 16);
    if (v16)
    {
      v17 = v16 - 1;
      v18 = (37 * *a2) & v17;
      a3 = (_DWORD *)(*(_QWORD *)a1 + 16 * v18);
      v19 = *a3;
      if (*a2 == *a3)
        goto LABEL_3;
      v12 = 0;
      v20 = 1;
      while (v19 != -1)
      {
        if (v12)
          v21 = 0;
        else
          v21 = v19 == -2;
        if (v21)
          v12 = a3;
        v22 = v18 + v20++;
        v18 = v22 & v17;
        a3 = (_DWORD *)(*(_QWORD *)a1 + 16 * v18);
        v19 = *a3;
        if (*a2 == *a3)
          goto LABEL_3;
      }
      goto LABEL_29;
    }
LABEL_28:
    a3 = 0;
    goto LABEL_3;
  }
  sub_1C59744A4((uint64_t *)a1, 2 * v6);
  v8 = *(_DWORD *)(a1 + 16);
  if (!v8)
    goto LABEL_28;
  v9 = v8 - 1;
  v10 = (37 * *a2) & v9;
  a3 = (_DWORD *)(*(_QWORD *)a1 + 16 * v10);
  v11 = *a3;
  if (*a2 == *a3)
    goto LABEL_3;
  v12 = 0;
  v13 = 1;
  while (v11 != -1)
  {
    if (v12)
      v14 = 0;
    else
      v14 = v11 == -2;
    if (v14)
      v12 = a3;
    v15 = v10 + v13++;
    v10 = v15 & v9;
    a3 = (_DWORD *)(*(_QWORD *)a1 + 16 * v10);
    v11 = *a3;
    if (*a2 == *a3)
      goto LABEL_3;
  }
LABEL_29:
  if (v12)
    a3 = v12;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a3 != -1)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

_DWORD *sub_1C59744A4(uint64_t *a1, int a2)
{
  uint64_t v3;
  int *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;
  int *v12;
  int *v13;
  int v14;
  int v15;
  unsigned int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  int v22;
  BOOL v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;

  v3 = *((unsigned int *)a1 + 4);
  v4 = (int *)*a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *((_DWORD *)a1 + 4) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *a1 = (uint64_t)result;
  if (v4)
  {
    a1[1] = 0;
    v10 = *((unsigned int *)a1 + 4);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -1;
        result += 4;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = v4;
      v13 = &v4[4 * v3];
      do
      {
        v14 = *v12;
        if (*v12 <= 0xFFFFFFFD)
        {
          v15 = *((_DWORD *)a1 + 4) - 1;
          v16 = v15 & (37 * v14);
          v17 = *a1 + 16 * v16;
          v18 = *(_DWORD *)v17;
          if (v14 != *(_DWORD *)v17)
          {
            v21 = 0;
            v22 = 1;
            while (v18 != -1)
            {
              if (v21)
                v23 = 0;
              else
                v23 = v18 == -2;
              if (v23)
                v21 = v17;
              v24 = v16 + v22++;
              v16 = v24 & v15;
              v17 = *a1 + 16 * (v24 & v15);
              v18 = *(_DWORD *)v17;
              if (v14 == *(_DWORD *)v17)
                goto LABEL_12;
            }
            if (v21)
              v17 = v21;
          }
LABEL_12:
          *(_DWORD *)v17 = v14;
          v19 = *((_QWORD *)v12 + 1);
          *((_QWORD *)v12 + 1) = 0;
          *(_QWORD *)(v17 + 8) = v19;
          ++*((_DWORD *)a1 + 2);
          v20 = (_QWORD *)*((_QWORD *)v12 + 1);
          *((_QWORD *)v12 + 1) = 0;
          if (v20)
            sub_1C5974640(v20);
        }
        v12 += 4;
      }
      while (v12 != v13);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  a1[1] = 0;
  v25 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v25)
  {
    v26 = 16 * v25;
    do
    {
      *result = -1;
      result += 4;
      v26 -= 16;
    }
    while (v26);
  }
  return result;
}

_QWORD *sub_1C5974640(_QWORD *result)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;

  if (result)
  {
    v1 = result;
    v2 = (_QWORD *)result[9];
    if (v2 != v1 + 11)
      free(v2);
    v3 = (_QWORD *)v1[3];
    if (v3 != v1 + 5)
      free(v3);
    JUMPOUT(0x1CAA32FC0);
  }
  return result;
}

uint64_t *sub_1C59746A0(uint64_t *a1)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  _QWORD **v5;
  _QWORD *v6;

  v2 = *((unsigned int *)a1 + 4);
  v3 = *a1;
  if ((_DWORD)v2)
  {
    v4 = 16 * v2;
    v5 = (_QWORD **)(v3 + 8);
    do
    {
      if (*((_DWORD *)v5 - 2) <= 0xFFFFFFFD)
      {
        v6 = *v5;
        *v5 = 0;
        if (v6)
          sub_1C5974640(v6);
      }
      v5 += 2;
      v4 -= 16;
    }
    while (v4);
    v3 = *a1;
  }
  MEMORY[0x1CAA32FB4](v3, 8);
  return a1;
}

uint64_t llvm::mca::WriteRef::WriteRef(uint64_t result, int a2, uint64_t a3)
{
  *(_DWORD *)(result + 4) = 0;
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)result = a2;
  *(_WORD *)(result + 12) = 0;
  *(_QWORD *)(result + 16) = a3;
  return result;
}

{
  *(_DWORD *)(result + 4) = 0;
  *(_DWORD *)(result + 8) = 0;
  *(_DWORD *)result = a2;
  *(_WORD *)(result + 12) = 0;
  *(_QWORD *)(result + 16) = a3;
  return result;
}

uint64_t llvm::mca::WriteRef::commit(uint64_t this)
{
  _WORD *v1;

  v1 = *(_WORD **)(this + 16);
  *(_WORD *)(this + 12) = v1[6];
  *(_DWORD *)(this + 8) = *(_DWORD *)(*(_QWORD *)v1 + 12);
  *(_QWORD *)(this + 16) = 0;
  return this;
}

uint64_t llvm::mca::WriteRef::notifyExecuted(uint64_t this, int a2)
{
  *(_DWORD *)(this + 4) = a2;
  return this;
}

BOOL llvm::mca::WriteRef::hasKnownWriteBackCycle(llvm::mca::WriteRef *this)
{
  uint64_t v1;
  int v2;

  if (*(_DWORD *)this == -1)
    return 0;
  v1 = *((_QWORD *)this + 2);
  if (!v1)
    return 1;
  v2 = *(_DWORD *)(v1 + 8);
  return v2 != -512 && v2 < 1;
}

uint64_t llvm::mca::WriteRef::isWriteZero(llvm::mca::WriteRef *this)
{
  return *(unsigned __int8 *)(*((_QWORD *)this + 2) + 21);
}

uint64_t llvm::mca::WriteRef::getWriteResourceID(llvm::mca::WriteRef *this)
{
  _QWORD *v1;
  unsigned int *v2;

  v1 = (_QWORD *)*((_QWORD *)this + 2);
  if (v1)
    v2 = (unsigned int *)(*v1 + 12);
  else
    v2 = (unsigned int *)((char *)this + 8);
  return *v2;
}

uint64_t llvm::mca::WriteRef::getRegisterID(llvm::mca::WriteRef *this)
{
  llvm::mca::WriteRef *v1;

  v1 = (llvm::mca::WriteRef *)*((_QWORD *)this + 2);
  if (!v1)
    v1 = this;
  return *((unsigned __int16 *)v1 + 6);
}

uint64_t llvm::mca::RegisterFile::RegisterFile(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  unint64_t v8;
  llvm::APInt *v9;
  unsigned int v10;
  uint64_t v12;
  int v13;
  __int16 v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  char v18;

  *(_QWORD *)a1 = &off_1E81847F8;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a1 + 32;
  *(_QWORD *)(a1 + 24) = 0x400000000;
  v8 = *(unsigned int *)(a3 + 8);
  v12 = 0xFFFFFFFFLL;
  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16 = 0x100000000;
  v17 = 0;
  v18 = 0;
  sub_1C5976300((_QWORD *)(a1 + 112), v8, (uint64_t)&v12);
  v9 = (llvm::APInt *)(a1 + 136);
  v10 = *(_DWORD *)(a3 + 8);
  *(_DWORD *)(a1 + 144) = v10;
  if (v10 > 0x40)
    llvm::APInt::initSlowCase(v9, 0, 0);
  else
    *(_QWORD *)v9 = 0;
  *(_DWORD *)(a1 + 152) = 0;
  llvm::mca::RegisterFile::initialize(a1, a2, a4);
  return a1;
}

uint64_t llvm::mca::RegisterFile::initialize(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t result;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int v10;

  v10 = a3;
  result = sub_1C5974944(a1 + 16, &v10);
  v6 = *(_QWORD *)(a2 + 64);
  if (v6)
  {
    v7 = *(_DWORD *)(v6 + 16);
    if (v7 >= 2)
    {
      v8 = 0;
      v9 = 24 * v7 - 24;
      do
      {
        result = llvm::mca::RegisterFile::addRegisterFile(a1, *(_QWORD *)(v6 + 8) + v8 + 24, (unsigned int *)(*(_QWORD *)(v6 + 24) + 12 * *(unsigned __int16 *)(*(_QWORD *)(v6 + 8) + v8 + 36)), *(unsigned __int16 *)(*(_QWORD *)(v6 + 8) + v8 + 34));
        v8 += 24;
      }
      while (v9 != v8);
    }
  }
  return result;
}

uint64_t sub_1C5974944(uint64_t a1, int *a2)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  unint64_t v9;
  uint64_t v10;
  __int128 v11;
  int v12;
  _QWORD v13[2];

  v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v12 = *a2;
    v13[0] = 0;
    *(_QWORD *)((char *)v13 + 5) = 0;
    v9 = sub_1C597638C(a1, (unint64_t)&v12);
    v10 = *(_QWORD *)a1 + 20 * *(unsigned int *)(a1 + 8);
    v11 = *(_OWORD *)v9;
    *(_DWORD *)(v10 + 16) = *(_DWORD *)(v9 + 16);
    *(_OWORD *)v10 = v11;
    v6 = *(_DWORD *)(a1 + 8) + 1;
    v7 = *(_QWORD *)a1 + 20 * v6;
  }
  else
  {
    v4 = *(_QWORD *)a1;
    v5 = *(_QWORD *)a1 + 20 * v3;
    *(_DWORD *)v5 = *a2;
    v6 = v3 + 1;
    v7 = v4 + 20 * v6;
    *(_QWORD *)(v5 + 4) = 0;
    *(_QWORD *)(v5 + 9) = 0;
  }
  *(_DWORD *)(a1 + 8) = v6;
  return v7 - 20;
}

uint64_t llvm::mca::RegisterFile::addRegisterFile(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t result;
  int v8;
  char v9;
  unsigned int v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t *v13;
  uint64_t v14;
  unsigned __int16 *v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  unsigned int *v21;
  int v22;
  BOOL v23;
  llvm::raw_ostream *v24;
  uint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  const char *v29;
  size_t v30;
  void *v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  _WORD *v36;
  unsigned __int16 v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  int v41;
  uint64_t v42;
  _WORD *v43;
  int v44;
  int v45;
  _WORD *v46;
  int v47;
  unsigned __int16 *v48;
  int v49;
  int v50;
  int v51;
  uint64_t v52;
  __int128 v53;
  unsigned int *v54;
  uint64_t v55;
  unsigned int *v56;
  _DWORD v57[4];
  char v58;

  v6 = a1;
  result = a1 + 16;
  v8 = *(unsigned __int16 *)(a2 + 14);
  v9 = *(_BYTE *)(a2 + 16);
  v10 = *(_DWORD *)(v6 + 24);
  if (v10 >= *(_DWORD *)(v6 + 28))
  {
    v57[0] = *(unsigned __int16 *)(a2 + 8);
    v57[1] = 0;
    v57[2] = v8;
    v57[3] = 0;
    v58 = v9;
    result = sub_1C597638C(result, (unint64_t)v57);
    v52 = *(_QWORD *)(v6 + 16) + 20 * *(unsigned int *)(v6 + 24);
    v53 = *(_OWORD *)result;
    *(_DWORD *)(v52 + 16) = *(_DWORD *)(result + 16);
    *(_OWORD *)v52 = v53;
    v12 = *(_DWORD *)(v6 + 24);
  }
  else
  {
    v11 = *(_QWORD *)result + 20 * v10;
    *(_DWORD *)v11 = *(unsigned __int16 *)(a2 + 8);
    *(_DWORD *)(v11 + 4) = 0;
    *(_DWORD *)(v11 + 8) = v8;
    *(_DWORD *)(v11 + 12) = 0;
    *(_BYTE *)(v11 + 16) = v9;
    v12 = v10;
  }
  *(_DWORD *)(v6 + 24) = v12 + 1;
  if (a4)
  {
    v54 = &a3[3 * a4];
    v13 = *(uint64_t **)(v6 + 8);
    do
    {
      v14 = v13[3] + 32 * *a3;
      if (*(_WORD *)(v14 + 20))
      {
        v15 = *(unsigned __int16 **)v14;
        v16 = *(_QWORD *)v14 + 2 * *(unsigned __int16 *)(v14 + 20);
        v55 = v16;
        v56 = a3;
        do
        {
          v17 = *v15;
          v18 = *(_QWORD *)(v6 + 112);
          v19 = v18 + 40 * *v15;
          v22 = *(_DWORD *)(v19 + 24);
          v21 = (unsigned int *)(v19 + 24);
          v20 = v22;
          if (v22)
            v23 = v20 == v10;
          else
            v23 = 1;
          if (!v23)
          {
            result = (uint64_t)llvm::errs((llvm *)result);
            v24 = (llvm::raw_ostream *)result;
            v25 = *(_QWORD *)(result + 32);
            if ((unint64_t)(*(_QWORD *)(result + 24) - v25) > 0x11)
            {
              *(_WORD *)(v25 + 16) = 8306;
              *(_OWORD *)v25 = *(_OWORD *)"warning: register ";
              *(_QWORD *)(result + 32) += 18;
            }
            else
            {
              result = (uint64_t)llvm::raw_ostream::write((llvm::raw_ostream *)result, "warning: register ", 0x12uLL);
              v24 = (llvm::raw_ostream *)result;
            }
            v26 = v6;
            v27 = *(_QWORD **)(v6 + 8);
            v28 = v27[8];
            if (v28)
            {
              v29 = (const char *)(v28 + *(unsigned int *)(*v27 + 24 * v17));
              v30 = strlen(v29);
              result = *((_QWORD *)v24 + 4);
              if (v30 <= *((_QWORD *)v24 + 3) - result)
              {
                if (v30)
                {
                  result = (uint64_t)memcpy((void *)result, v29, v30);
                  *((_QWORD *)v24 + 4) += v30;
                }
              }
              else
              {
                result = (uint64_t)llvm::raw_ostream::write(v24, v29, v30);
                v24 = (llvm::raw_ostream *)result;
              }
            }
            v31 = (void *)*((_QWORD *)v24 + 4);
            v6 = v26;
            if (*((_QWORD *)v24 + 3) - (_QWORD)v31 > 0x23uLL)
            {
              qmemcpy(v31, " defined in multiple register files.", 36);
              *((_QWORD *)v24 + 4) += 36;
            }
            else
            {
              result = (uint64_t)llvm::raw_ostream::write(v24, " defined in multiple register files.", 0x24uLL);
            }
            v16 = v55;
            a3 = v56;
          }
          v32 = a3[1];
          *v21 = v10;
          v21[1] = v32;
          v33 = v18 + 40 * v17;
          *(_WORD *)(v33 + 32) = v17;
          *(_BYTE *)(v33 + 36) = *((_BYTE *)a3 + 8);
          v13 = *(uint64_t **)(v6 + 8);
          v34 = v13[6];
          v35 = *v13;
          v36 = (_WORD *)(v34 + 2 * *(unsigned int *)(*v13 + 24 * v17 + 4));
          if (*v36)
          {
            v37 = *v36 + v17;
            v38 = *(_QWORD *)(v6 + 112);
            do
            {
              v39 = v38 + 40 * v37;
              v41 = *(_DWORD *)(v39 + 24);
              v40 = (_QWORD *)(v39 + 24);
              if (!v41)
              {
                v42 = v38 + 40 * v37;
                v45 = *(unsigned __int16 *)(v42 + 32);
                v43 = (_WORD *)(v42 + 32);
                v44 = v45;
                if (!v45)
                  goto LABEL_31;
                v46 = (_WORD *)(v34 + 2 * *(unsigned int *)(v35 + 24 * v37 + 8));
                result = *v46 == 0;
                if (*v46)
                {
                  v47 = (unsigned __int16)*v46 + v37;
                  if (v44 != (unsigned __int16)v47)
                  {
                    v48 = v46 + 1;
                    do
                    {
                      v50 = *v48++;
                      v49 = v50;
                      result = v50 == 0;
                      if (!v50)
                        v48 = 0;
                      if (!v49)
                        break;
                      v47 += v49;
                    }
                    while (v44 != (unsigned __int16)v47);
                  }
                }
                if ((result & 1) == 0)
                {
LABEL_31:
                  *v40 = *(_QWORD *)v21;
                  *v43 = v17;
                }
              }
              v51 = (unsigned __int16)v36[1];
              ++v36;
              v37 += v51;
            }
            while (v51);
          }
          ++v15;
        }
        while (v15 != (unsigned __int16 *)v16);
      }
      a3 += 3;
    }
    while (a3 != v54);
  }
  return result;
}

uint64_t llvm::mca::RegisterFile::cycleStart(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  _DWORD *v3;

  v1 = *(unsigned int *)(this + 24);
  if ((_DWORD)v1)
  {
    v2 = 20 * v1;
    v3 = (_DWORD *)(*(_QWORD *)(this + 16) + 12);
    do
    {
      *v3 = 0;
      v3 += 5;
      v2 -= 20;
    }
    while (v2);
  }
  return this;
}

uint64_t llvm::mca::RegisterFile::onInstructionExecuted(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  int v7;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int16 v14;
  unsigned __int16 *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  unsigned __int16 v19;
  unsigned __int16 *v20;
  uint64_t v21;
  int v22;

  v2 = *(_DWORD *)(a2 + 24);
  if (v2)
  {
    v3 = *(_QWORD *)(a2 + 16);
    v4 = v3 + 136 * v2;
    do
    {
      if (*(_BYTE *)(v3 + 22))
        break;
      v5 = *(unsigned __int16 *)(v3 + 12);
      if (*(_WORD *)(v3 + 12))
      {
        v6 = *(_QWORD *)(result + 112);
        v7 = *(unsigned __int16 *)(v6 + 40 * *(unsigned __int16 *)(v3 + 12) + 32);
        if (v7 != v5 && v7 != 0)
          v5 = *(unsigned __int16 *)(v6 + 40 * *(unsigned __int16 *)(v3 + 12) + 32);
        v9 = v6 + 40 * v5;
        if (*(_QWORD *)(v9 + 16) == v3)
          *(_DWORD *)(v9 + 4) = *(_DWORD *)(result + 152);
        v10 = *(uint64_t **)(result + 8);
        v11 = v10[6];
        v12 = *v10;
        v13 = *(unsigned int *)(v12 + 24 * v5 + 4);
        if (*(_WORD *)(v11 + 2 * v13))
        {
          v14 = *(_WORD *)(v11 + 2 * v13) + v5;
          v15 = (unsigned __int16 *)(v11 + 2 * v13 + 2);
          do
          {
            v16 = v6 + 40 * v14;
            if (*(_QWORD *)(v16 + 16) == v3)
              *(_DWORD *)(v16 + 4) = *(_DWORD *)(result + 152);
            v17 = *v15++;
            v14 += v17;
          }
          while (v17);
        }
        if (*(_BYTE *)(v3 + 20))
        {
          v18 = *(unsigned int *)(v12 + 24 * v5 + 8);
          if (*(_WORD *)(v11 + 2 * v18))
          {
            v19 = *(_WORD *)(v11 + 2 * v18) + v5;
            v20 = (unsigned __int16 *)(v11 + 2 * v18 + 2);
            do
            {
              v21 = v6 + 40 * v19;
              if (*(_QWORD *)(v21 + 16) == v3)
                *(_DWORD *)(v21 + 4) = *(_DWORD *)(result + 152);
              v22 = *v20++;
              v19 += v22;
            }
            while (v22);
          }
        }
      }
      v3 += 136;
    }
    while (v3 != v4);
  }
  return result;
}

uint64_t llvm::mca::RegisterFile::allocatePhysRegs(uint64_t result, unsigned int *a2, _DWORD *a3)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  v3 = a2[1];
  v5 = *(_QWORD *)(result + 16);
  if ((_DWORD)v4)
  {
    *(_DWORD *)(v5 + 20 * v4 + 4) += v3;
    a3[v4] += v3;
  }
  *(_DWORD *)(v5 + 4) += v3;
  *a3 += v3;
  return result;
}

uint64_t llvm::mca::RegisterFile::freePhysRegs(uint64_t result, unsigned int *a2, _DWORD *a3)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;

  v4 = *a2;
  v3 = a2[1];
  v5 = *(_QWORD *)(result + 16);
  if ((_DWORD)v4)
  {
    *(_DWORD *)(v5 + 20 * v4 + 4) -= v3;
    a3[v4] += v3;
  }
  *(_DWORD *)(v5 + 4) -= v3;
  *a3 += v3;
  return result;
}

uint64_t *llvm::mca::RegisterFile::addRegisterWrite(uint64_t *result, __int128 *a2, _DWORD *a3)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t *v7;
  int v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned int v12;
  BOOL v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unsigned int v20;
  unsigned __int16 *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  __int128 v30;
  uint64_t v31;
  _QWORD *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned int v35;
  unsigned __int16 *v36;
  uint64_t v37;
  __int128 v38;
  int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  _QWORD *v45;
  uint64_t v46;
  uint64_t v47;
  unsigned __int16 v48;
  unsigned __int16 *v49;
  uint64_t v50;
  __int128 v51;
  int v52;
  int v53;
  _BOOL4 v54;

  v3 = *((_QWORD *)a2 + 2);
  v4 = *(unsigned __int16 *)(v3 + 12);
  if (!*(_WORD *)(v3 + 12))
    return result;
  v7 = result;
  v8 = *(unsigned __int8 *)(v3 + 21);
  v9 = *(unsigned __int8 *)(v3 + 22);
  v10 = result[14];
  v11 = v10 + 40 * *(unsigned __int16 *)(v3 + 12);
  *(_DWORD *)(v3 + 16) = *(_DWORD *)(v11 + 24);
  v12 = *(unsigned __int16 *)(v11 + 32);
  if (*(_WORD *)(v11 + 32))
    v13 = v12 == v4;
  else
    v13 = 1;
  if (v13)
  {
    v54 = (v9 | v8) == 0;
    v12 = v4;
  }
  else if (*(_BYTE *)(v3 + 20))
  {
    v54 = (v9 | v8) == 0;
    v4 = *(unsigned __int16 *)(v11 + 32);
  }
  else
  {
    v14 = v10 + 40 * *(unsigned __int16 *)(v11 + 32);
    v15 = *(_QWORD *)(v14 + 16);
    if (v15 && (v16 = *(_DWORD *)v14, v16 != *(_DWORD *)a2))
    {
      v44 = *(_DWORD *)(v15 + 8);
      if (v44 == -512)
      {
        *(_QWORD *)(v15 + 32) = v3;
      }
      else
      {
        *(_WORD *)(v3 + 48) = *(_WORD *)(v15 + 12);
        v53 = v44 & ~(v44 >> 31);
        *(_DWORD *)(v3 + 52) = v53;
        *(_DWORD *)(v3 + 40) = v53;
        *(_DWORD *)(v3 + 44) = v16;
        v15 = 0;
      }
      v54 = 0;
      *(_QWORD *)(v3 + 24) = v15;
    }
    else
    {
      v54 = 0;
    }
  }
  result = sub_1C62C45DC(result + 17, v4, v8 != 0);
  v17 = (_QWORD *)v7[1];
  v18 = v17[6];
  v19 = *(unsigned int *)(*v17 + 24 * v4 + 4);
  if (*(_WORD *)(v18 + 2 * v19))
  {
    v20 = *(unsigned __int16 *)(v18 + 2 * v19) + v4;
    v21 = (unsigned __int16 *)(v18 + 2 * v19 + 2);
    do
    {
      result = sub_1C62C45DC(v7 + 17, (unsigned __int16)v20, v8 != 0);
      v22 = *v21++;
      v20 += v22;
    }
    while (v22);
  }
  if (!v9)
  {
    v23 = v7[14];
    v24 = v23 + 40 * v12;
    v25 = *(_QWORD *)(v24 + 16);
    if (v25 && *(_DWORD *)v24 == *(_DWORD *)a2 && *(_DWORD *)(*(_QWORD *)v25 + 4) > *(_DWORD *)(*(_QWORD *)v3 + 4))
    {
      if (v54)
      {
        v26 = v23 + 40 * v12;
        v28 = *(unsigned int *)(v26 + 24);
        v27 = *(_DWORD *)(v26 + 28);
        v29 = v7[2];
        if ((_DWORD)v28)
        {
          *(_DWORD *)(v29 + 20 * v28 + 4) += v27;
          a3[v28] += v27;
        }
        *(_DWORD *)(v29 + 4) += v27;
        *a3 += v27;
      }
      return result;
    }
    v30 = *a2;
    *(_QWORD *)(v24 + 16) = *((_QWORD *)a2 + 2);
    *(_OWORD *)v24 = v30;
    v31 = v7[14];
    *(_WORD *)(v31 + 40 * v12 + 34) = 0;
    v32 = (_QWORD *)v7[1];
    v33 = v32[6];
    v34 = *(unsigned int *)(*v32 + 24 * v12 + 4);
    if (*(_WORD *)(v33 + 2 * v34))
    {
      v35 = *(unsigned __int16 *)(v33 + 2 * v34) + v12;
      v36 = (unsigned __int16 *)(v33 + 2 * v34 + 2);
      do
      {
        v37 = v31 + 40 * (unsigned __int16)v35;
        v38 = *a2;
        *(_QWORD *)(v37 + 16) = *((_QWORD *)a2 + 2);
        *(_OWORD *)v37 = v38;
        v31 = v7[14];
        *(_WORD *)(v31 + 40 * (unsigned __int16)v35 + 34) = 0;
        v39 = *v36++;
        v35 += v39;
      }
      while (v39);
    }
    if (v54)
    {
      v40 = v31 + 40 * v12;
      v42 = *(unsigned int *)(v40 + 24);
      v41 = *(_DWORD *)(v40 + 28);
      v43 = v7[2];
      if ((_DWORD)v42)
      {
        *(_DWORD *)(v43 + 20 * v42 + 4) += v41;
        a3[v42] += v41;
      }
      *(_DWORD *)(v43 + 4) += v41;
      *a3 += v41;
    }
  }
  if (*(_BYTE *)(v3 + 20))
  {
    v45 = (_QWORD *)v7[1];
    v46 = v45[6];
    v47 = *(unsigned int *)(*v45 + 24 * v12 + 8);
    if (*(_WORD *)(v46 + 2 * v47))
    {
      v48 = *(_WORD *)(v46 + 2 * v47) + v12;
      v49 = (unsigned __int16 *)(v46 + 2 * v47 + 2);
      do
      {
        if (!v9)
        {
          v50 = v7[14] + 40 * v48;
          v51 = *a2;
          *(_QWORD *)(v50 + 16) = *((_QWORD *)a2 + 2);
          *(_OWORD *)v50 = v51;
          *(_WORD *)(v7[14] + 40 * v48 + 34) = 0;
        }
        result = sub_1C62C45DC(v7 + 17, v48, v8 != 0);
        v52 = *v49++;
        v48 += v52;
      }
      while (v52);
    }
  }
  return result;
}

unint64_t llvm::mca::RegisterFile::removeRegisterWrite(unint64_t result, uint64_t *a2, _DWORD *a3)
{
  int v3;
  uint64_t v4;
  unsigned int v5;
  BOOL v6;
  __int16 v7;
  __int16 v8;
  uint64_t v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned __int16 v18;
  uint64_t v19;
  unsigned __int16 *v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  unsigned __int16 v24;
  uint64_t v25;
  unsigned __int16 *v26;
  uint64_t v27;
  int v28;

  if (*((_BYTE *)a2 + 22))
    return result;
  v3 = *((unsigned __int16 *)a2 + 6);
  if (!*((_WORD *)a2 + 6))
    return result;
  v4 = *(_QWORD *)(result + 112);
  v5 = *(unsigned __int16 *)(v4 + 40 * *((unsigned __int16 *)a2 + 6) + 32);
  if (*(_WORD *)(v4 + 40 * *((unsigned __int16 *)a2 + 6) + 32))
    v6 = v5 == v3;
  else
    v6 = 1;
  if (v6)
  {
    v5 = *((unsigned __int16 *)a2 + 6);
    v7 = *((_WORD *)a2 + 6);
    v8 = v7;
    if (!*((_BYTE *)a2 + 21))
      goto LABEL_13;
  }
  else if (*((_BYTE *)a2 + 21))
  {
    v8 = *(_WORD *)(v4 + 40 * *((unsigned __int16 *)a2 + 6) + 32);
  }
  else
  {
    v7 = *(_WORD *)(v4 + 40 * *((unsigned __int16 *)a2 + 6) + 32);
    v8 = v7;
    if (*((_BYTE *)a2 + 20))
    {
LABEL_13:
      v9 = v4 + 40 * v5;
      v11 = *(unsigned int *)(v9 + 24);
      v10 = *(_DWORD *)(v9 + 28);
      v12 = *(_QWORD *)(result + 16);
      if ((_DWORD)v11)
      {
        *(_DWORD *)(v12 + 20 * v11 + 4) -= v10;
        a3[v11] += v10;
      }
      *(_DWORD *)(v12 + 4) -= v10;
      *a3 += v10;
      v8 = v7;
    }
  }
  v13 = v4 + 40 * v5;
  if (*(uint64_t **)(v13 + 16) == a2)
  {
    *(_WORD *)(v13 + 12) = v3;
    *(_DWORD *)(v13 + 8) = *(_DWORD *)(*a2 + 12);
    *(_QWORD *)(v13 + 16) = 0;
  }
  v14 = *(uint64_t **)(result + 8);
  v15 = v14[6];
  v16 = *v14;
  v17 = *(unsigned int *)(v16 + 24 * v5 + 4);
  if (*(_WORD *)(v15 + 2 * v17))
  {
    v18 = *(_WORD *)(v15 + 2 * v17) + v8;
    v19 = *a2;
    v20 = (unsigned __int16 *)(v15 + 2 * v17 + 2);
    do
    {
      v21 = v4 + 40 * v18;
      if (*(uint64_t **)(v21 + 16) == a2)
      {
        *(_WORD *)(v21 + 12) = v3;
        *(_DWORD *)(v21 + 8) = *(_DWORD *)(v19 + 12);
        *(_QWORD *)(v21 + 16) = 0;
      }
      v22 = *v20++;
      result = v22;
      v18 += v22;
    }
    while (v22);
  }
  if (*((_BYTE *)a2 + 20))
  {
    v23 = *(unsigned int *)(v16 + 24 * v5 + 8);
    if (*(_WORD *)(v15 + 2 * v23))
    {
      v24 = *(_WORD *)(v15 + 2 * v23) + v8;
      v25 = *a2;
      v26 = (unsigned __int16 *)(v15 + 2 * v23 + 2);
      do
      {
        v27 = v4 + 40 * v24;
        if (*(uint64_t **)(v27 + 16) == a2)
        {
          *(_WORD *)(v27 + 12) = v3;
          *(_DWORD *)(v27 + 8) = *(_DWORD *)(v25 + 12);
          *(_QWORD *)(v27 + 16) = 0;
        }
        v28 = *v26++;
        v24 += v28;
      }
      while (v28);
    }
  }
  return result;
}

uint64_t llvm::mca::RegisterFile::canEliminateMove(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  unint64_t v4;
  uint64_t v5;
  BOOL v6;
  BOOL v7;
  BOOL v8;
  _QWORD *v9;
  char v10;

  v4 = *(unsigned __int16 *)(a3 + 8);
  v5 = *(_QWORD *)(a1 + 112);
  v6 = *(_DWORD *)(v5 + 40 * v4 + 24) == a4 && *(_DWORD *)(v5 + 40 * *(unsigned __int16 *)(a2 + 12) + 24) == a4;
  if (v6
    && *(_BYTE *)(v5 + 40 * *(unsigned __int16 *)(v5 + 40 * *(unsigned __int16 *)(a2 + 12) + 32) + 36)
    && (*(_WORD *)(v5 + 40 * *(unsigned __int16 *)(a2 + 12) + 32)
      ? (v7 = *(unsigned __int16 *)(v5 + 40 * *(unsigned __int16 *)(a2 + 12) + 32) == *(unsigned __int16 *)(a2 + 12))
      : (v7 = 1),
        !v7 ? (v8 = *(_BYTE *)(a2 + 20) == 0) : (v8 = 0),
        !v8))
  {
    v9 = (_QWORD *)(a1 + 136);
    if (*(_DWORD *)(a1 + 144) >= 0x41u)
      v9 = (_QWORD *)(*v9 + ((v4 >> 3) & 0x1FF8));
    v10 = (*(_BYTE *)(*(_QWORD *)(a1 + 16) + 20 * a4 + 16) == 0) | (*v9 >> v4);
  }
  else
  {
    v10 = 0;
  }
  return v10 & 1;
}

uint64_t llvm::mca::RegisterFile::tryEliminateMoveOrSwap(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t result;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char canEliminateMove;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t v26;
  unint64_t v27;
  unsigned int v28;
  unsigned int v29;
  __int16 v30;
  uint64_t v31;
  unsigned int v32;
  unsigned __int16 *v33;
  int v34;
  _QWORD *v35;
  uint64_t v36;

  result = 0;
  if (a3 == a5 && (unint64_t)(a3 - 3) >= 0xFFFFFFFFFFFFFFFELL)
  {
    v10 = *(_QWORD *)(a1 + 112);
    v11 = *(_DWORD *)(v10 + 40 * *(unsigned __int16 *)(a2 + 12) + 24);
    v12 = *(_QWORD *)(a1 + 16);
    v13 = *(unsigned int *)(v12 + 20 * v11 + 8);
    if ((_DWORD)v13 && a3 + (unint64_t)*(unsigned int *)(v12 + 20 * v11 + 12) > v13)
    {
      return 0;
    }
    else
    {
      v14 = a2 + 136 * a3 - 136;
      v15 = -1;
      v16 = a4;
      while (a3 != ++v15)
      {
        v17 = v16 + 48;
        v18 = v14 - 136;
        canEliminateMove = llvm::mca::RegisterFile::canEliminateMove(a1, v14, v16, v11);
        v14 = v18;
        v16 = v17;
        if ((canEliminateMove & 1) == 0)
          return 0;
      }
      result = 1;
      if (a3)
      {
        v20 = 0;
        v21 = *(uint64_t **)(a1 + 8);
        v22 = v21[6];
        v23 = *v21;
        v24 = *(_DWORD *)(a1 + 144);
        do
        {
          v25 = v20 + 1;
          v26 = a3 - (v20 + 1);
          v27 = *(unsigned __int16 *)(a4 + 48 * v20 + 8);
          if (*(_WORD *)(v10 + 40 * v27 + 32))
            v28 = *(unsigned __int16 *)(v10 + 40 * *(unsigned __int16 *)(a4 + 48 * v20 + 8) + 32);
          else
            v28 = v27;
          v29 = *(unsigned __int16 *)(v10 + 40 * *(unsigned __int16 *)(a2 + 136 * v26 + 12) + 32);
          if (!*(_WORD *)(v10 + 40 * *(unsigned __int16 *)(a2 + 136 * v26 + 12) + 32))
            v29 = *(unsigned __int16 *)(a2 + 136 * v26 + 12);
          v30 = *(_WORD *)(v10 + 40 * v28 + 34);
          if (!v30)
            v30 = v28;
          *(_WORD *)(v10 + 40 * v29 + 34) = v30;
          v31 = *(unsigned int *)(v23 + 24 * v29 + 4);
          if (*(_WORD *)(v22 + 2 * v31))
          {
            v32 = *(unsigned __int16 *)(v22 + 2 * v31) + v29;
            v33 = (unsigned __int16 *)(v22 + 2 + 2 * v31);
            do
            {
              *(_WORD *)(v10 + 40 * (unsigned __int16)v32 + 34) = v30;
              v34 = *v33++;
              v32 += v34;
            }
            while (v34);
          }
          v35 = (_QWORD *)(a1 + 136);
          if (v24 >= 0x41)
            v35 = (_QWORD *)(*(_QWORD *)(a1 + 136) + ((v27 >> 3) & 0x1FF8));
          if (((*v35 >> v27) & 1) != 0)
          {
            *(_BYTE *)(a2 + 136 * v26 + 21) = 1;
            *(_BYTE *)(a4 + 48 * v20 + 41) = 1;
          }
          v36 = a2 + 136 * v26;
          *(_DWORD *)(v36 + 8) = 0;
          *(_BYTE *)(v36 + 22) = 1;
          ++*(_DWORD *)(v12 + 20 * v11 + 12);
          v20 = v25;
        }
        while (a3 != v25);
        return 1;
      }
    }
  }
  return result;
}

uint64_t llvm::mca::WriteRef::getWriteBackCycle(llvm::mca::WriteRef *this)
{
  return *((unsigned int *)this + 1);
}

uint64_t llvm::mca::RegisterFile::getElapsedCyclesFromWriteBack(llvm::mca::RegisterFile *this, const llvm::mca::WriteRef *a2)
{
  return (*((_DWORD *)this + 38) - *((_DWORD *)a2 + 1));
}

void llvm::mca::RegisterFile::collectWrites(uint64_t a1, uint64_t a2, unsigned __int16 *a3, uint64_t a4, uint64_t a5)
{
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  __int128 v16;
  _WORD *v17;
  unsigned __int16 v18;
  uint64_t v19;
  unsigned __int16 *v20;
  _WORD *v21;
  unint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  __int128 v26;
  int v27;
  unsigned int v28;
  _DWORD *v29;
  uint64_t v30;
  unsigned int v31;
  int v32;
  unint64_t v34;
  uint64_t v35;
  unsigned int v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v43;
  uint64_t v44;
  unsigned int v45;
  _DWORD *v46;
  uint64_t v47;
  unsigned int v48;
  int v49;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  __int128 v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v61;

  v61 = *(_QWORD *)a3;
  v8 = *(_DWORD *)(*(_QWORD *)a3 + 12);
  v9 = *(_QWORD *)(*(_QWORD *)(a2 + 160) + 40);
  v10 = *(_QWORD *)(a1 + 112);
  if (*(_WORD *)(v10 + 40 * a3[4] + 34))
    v11 = *(unsigned __int16 *)(v10 + 40 * a3[4] + 34);
  else
    v11 = a3[4];
  v12 = v10 + 40 * v11;
  v13 = a4;
  if (*(_QWORD *)(v12 + 16))
    goto LABEL_5;
  if (*(_DWORD *)v12 != -1)
  {
    v43 = v9 + 24 * v8;
    v44 = *(unsigned __int16 *)(v43 + 20);
    if (*(_WORD *)(v43 + 20))
    {
      v45 = *(_DWORD *)(v61 + 4);
      v46 = (_DWORD *)(*(_QWORD *)(a2 + 152) + 12 * *(unsigned __int16 *)(v43 + 18) + 8);
      v47 = 12 * v44;
      while (1)
      {
        v48 = *(v46 - 2);
        if (v48 >= v45)
        {
          if (v48 > v45)
            goto LABEL_6;
          v49 = *(v46 - 1);
          if (!v49 || v49 == *(_DWORD *)(v12 + 8))
            break;
        }
        v46 += 3;
        v47 -= 12;
        if (!v47)
          goto LABEL_6;
      }
      if ((*v46 & 0x80000000) != 0)
      {
        v13 = a5;
        if (*(_DWORD *)(a1 + 152) - *(_DWORD *)(v12 + 4) < -*v46)
        {
LABEL_5:
          v14 = sub_1C4DC1E54(v13, v12);
          v15 = *(_QWORD *)v13 + 24 * *(unsigned int *)(v13 + 8);
          v16 = *(_OWORD *)v14;
          *(_QWORD *)(v15 + 16) = *(_QWORD *)(v14 + 16);
          *(_OWORD *)v15 = v16;
          ++*(_DWORD *)(v13 + 8);
        }
      }
    }
  }
LABEL_6:
  v17 = (_WORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 48)
                + 2 * *(unsigned int *)(**(_QWORD **)(a1 + 8) + 24 * v11 + 4));
  if (*v17)
  {
    v18 = *v17 + v11;
    v19 = v9 + 24 * v8;
    v20 = (unsigned __int16 *)(v19 + 18);
    v21 = (_WORD *)(v19 + 20);
    do
    {
      v22 = *(_QWORD *)(a1 + 112) + 40 * v18;
      v23 = a4;
      if (*(_QWORD *)(v22 + 16))
        goto LABEL_9;
      if (*(_DWORD *)v22 != -1 && *v21)
      {
        v28 = *(_DWORD *)(v61 + 4);
        v29 = (_DWORD *)(*(_QWORD *)(a2 + 152) + 12 * *v20 + 8);
        v30 = 12 * (unsigned __int16)*v21;
        while (1)
        {
          v31 = *(v29 - 2);
          if (v31 >= v28)
          {
            if (v31 > v28)
              goto LABEL_10;
            v32 = *(v29 - 1);
            if (!v32 || v32 == *(_DWORD *)(v22 + 8))
              break;
          }
          v29 += 3;
          v30 -= 12;
          if (!v30)
            goto LABEL_10;
        }
        if ((*v29 & 0x80000000) != 0)
        {
          v23 = a5;
          if (*(_DWORD *)(a1 + 152) - *(_DWORD *)(v22 + 4) < -*v29)
          {
LABEL_9:
            v24 = sub_1C4DC1E54(v23, v22);
            v25 = *(_QWORD *)v23 + 24 * *(unsigned int *)(v23 + 8);
            v26 = *(_OWORD *)v24;
            *(_QWORD *)(v25 + 16) = *(_QWORD *)(v24 + 16);
            *(_OWORD *)v25 = v26;
            ++*(_DWORD *)(v23 + 8);
          }
        }
      }
LABEL_10:
      v27 = (unsigned __int16)v17[1];
      ++v17;
      v18 += v27;
    }
    while (v27);
  }
  v34 = *(unsigned int *)(a4 + 8);
  if (v34 > 1)
  {
    sub_1C5976404(*(_QWORD *)a4, *(_QWORD *)a4 + 24 * v34, 126 - 2 * __clz(v34), 1);
    v35 = *(_QWORD *)a4;
    v36 = *(_DWORD *)(a4 + 8);
    v37 = *(_QWORD *)a4 + 24 * v36;
    v38 = *(_QWORD *)a4;
    if (v36)
    {
      if (v36 == 1)
      {
LABEL_60:
        v56 = 0xAAAAAAAAAAAAAAABLL * ((v37 - v35) >> 3);
        if (v56 != v36)
        {
          v57 = v36;
          if (v56 >= v36)
          {
            if (v56 > *(unsigned int *)(a4 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v56, 24);
              v57 = *(unsigned int *)(a4 + 8);
              v35 = *(_QWORD *)a4;
            }
            if (v57 != v56)
            {
              v58 = v35 + 24 * v56;
              v59 = v35 + 24 * v57;
              do
              {
                *(_QWORD *)v59 = 0xFFFFFFFFLL;
                *(_DWORD *)(v59 + 8) = 0;
                *(_WORD *)(v59 + 12) = 0;
                *(_QWORD *)(v59 + 16) = 0;
                v59 += 24;
              }
              while (v59 != v58);
            }
          }
          *(_DWORD *)(a4 + 8) = v56;
        }
        return;
      }
      v39 = 0;
      while (1)
      {
        v40 = *(_QWORD *)(v35 + v39 + 16);
        if (v40)
        {
          v41 = *(_QWORD *)(v35 + v39 + 40);
          if (v41 && v40 == v41)
            break;
        }
        v39 += 24;
        if (24 * v36 - 24 == v39)
          goto LABEL_60;
      }
      v38 = v35 + v39;
    }
    if (v38 != v37)
    {
      v51 = v38 + 48;
      if (v38 + 48 != v37)
      {
        do
        {
          v52 = *(_QWORD *)(v38 + 16);
          if (!v52 || ((v53 = *(_QWORD *)(v51 + 16)) != 0 ? (v54 = v52 == v53) : (v54 = 0), !v54))
          {
            v55 = *(_OWORD *)v51;
            *(_QWORD *)(v38 + 40) = *(_QWORD *)(v51 + 16);
            *(_OWORD *)(v38 + 24) = v55;
            v38 += 24;
          }
          v51 += 24;
        }
        while (v51 != v37);
        v35 = *(_QWORD *)a4;
        v36 = *(_DWORD *)(a4 + 8);
      }
      v37 = v38 + 24;
    }
    goto LABEL_60;
  }
}

unint64_t llvm::mca::RegisterFile::checkRAWHazards(llvm::mca::RegisterFile *this, const llvm::MCSubtargetInfo *a2, const llvm::mca::ReadState *a3)
{
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  _QWORD *v8;
  unsigned int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  int *v18;
  unsigned int v19;
  int v20;
  int v22;
  int v23;
  uint64_t v24;
  unsigned int v26;
  uint64_t v27;
  unsigned int v28;
  uint64_t v29;
  char *i;
  unsigned __int16 *v31;
  int *v32;
  int v33;
  uint64_t v34;
  int *v35;
  unsigned int v36;
  int v37;
  int v39;
  uint64_t v40;
  void *v42;
  uint64_t v43;
  _BYTE v44[96];
  void *v45;
  uint64_t v46;
  _QWORD v47[13];

  v47[12] = *MEMORY[0x1E0C80C00];
  v45 = v47;
  v46 = 0x400000000;
  v42 = v44;
  v43 = 0x400000000;
  v5 = *(_QWORD *)a3;
  v6 = *(_DWORD *)(*(_QWORD *)a3 + 12);
  v7 = *(_QWORD *)(*((_QWORD *)a2 + 20) + 40);
  llvm::mca::RegisterFile::collectWrites((uint64_t)this, (uint64_t)a2, (unsigned __int16 *)a3, (uint64_t)&v45, (uint64_t)&v42);
  v8 = v45;
  if ((_DWORD)v46)
  {
    v9 = 0;
    v10 = 0;
    v11 = *(_DWORD *)(v5 + 4);
    v12 = v7 + 24 * v6;
    v13 = *(unsigned __int16 *)(v12 + 18);
    v14 = *(unsigned __int16 *)(v12 + 20);
    v15 = v45;
    while (1)
    {
      v16 = v15[2];
      if ((_DWORD)v14)
      {
        v17 = 12 * v14;
        v18 = (int *)(*((_QWORD *)a2 + 19) + 12 * v13 + 8);
        while (1)
        {
          v19 = *(v18 - 2);
          if (v19 >= v11)
          {
            if (v19 > v11)
              goto LABEL_12;
            v20 = *(v18 - 1);
            if (!v20 || v20 == *(_DWORD *)(*(_QWORD *)v16 + 12))
              break;
          }
          v18 += 3;
          v17 -= 12;
          if (!v17)
            goto LABEL_12;
        }
        v22 = *v18;
      }
      else
      {
LABEL_12:
        v22 = 0;
      }
      v23 = *(_DWORD *)(v16 + 8);
      if (v23 != -512)
        break;
      if (!v9)
      {
        v24 = 4294966784;
LABEL_21:
        v9 = *(unsigned __int16 *)(v16 + 12);
        v10 = v24;
      }
LABEL_22:
      v15 += 3;
      if (v15 == (_QWORD *)((char *)v45 + 24 * v46))
        goto LABEL_26;
    }
    v24 = (v23 - v22);
    if ((int)v24 < 1 || (int)v10 >= (int)v24)
      goto LABEL_22;
    goto LABEL_21;
  }
  v10 = 0;
  v9 = 0;
LABEL_26:
  LODWORD(v46) = 0;
  if ((_DWORD)v43)
  {
    v26 = *(_DWORD *)(v5 + 4);
    v27 = v7 + 24 * v6;
    v28 = *(unsigned __int16 *)(v27 + 18);
    v29 = *(unsigned __int16 *)(v27 + 20);
    for (i = (char *)v42; i != (char *)v42 + 24 * v43; i += 24)
    {
      v31 = (unsigned __int16 *)*((_QWORD *)i + 2);
      if (v31)
      {
        v32 = (int *)(*(_QWORD *)v31 + 12);
        if ((_DWORD)v29)
          goto LABEL_32;
      }
      else
      {
        v32 = (int *)(i + 8);
        if ((_DWORD)v29)
        {
LABEL_32:
          v33 = *v32;
          v34 = 12 * v29;
          v35 = (int *)(*((_QWORD *)a2 + 19) + 12 * v28 + 8);
          while (1)
          {
            v36 = *(v35 - 2);
            if (v36 >= v26)
            {
              if (v36 > v26)
                goto LABEL_40;
              v37 = *(v35 - 1);
              if (!v37 || v37 == v33)
                break;
            }
            v35 += 3;
            v34 -= 12;
            if (!v34)
              goto LABEL_40;
          }
          v39 = *v35;
          goto LABEL_41;
        }
      }
LABEL_40:
      v39 = 0;
LABEL_41:
      v40 = (*((_DWORD *)i + 1) - (v39 + *((_DWORD *)this + 38)));
      if ((int)v10 < (int)v40)
      {
        if (!v31)
          v31 = (unsigned __int16 *)i;
        v9 = v31[6];
        v10 = v40;
      }
    }
  }
  if (v42 != v44)
  {
    free(v42);
    v8 = v45;
  }
  if (v8 != v47)
    free(v8);
  return v9 | (unint64_t)(v10 << 32);
}

void llvm::mca::RegisterFile::addRegisterRead(llvm::mca::RegisterFile *this, llvm::mca::ReadState *a2, const llvm::MCSubtargetInfo *a3)
{
  unint64_t v3;
  _QWORD *v7;
  unsigned int v8;
  unsigned int v9;
  char v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  char *v14;
  char *v15;
  uint64_t v16;
  unsigned __int16 *v17;
  _WORD *v18;
  _QWORD *v19;
  int *v20;
  int v21;
  unsigned int v22;
  unsigned int *v23;
  uint64_t v24;
  unsigned int v25;
  int v26;
  BOOL v27;
  unsigned int v28;
  int v29;
  _BYTE *v30;
  char *v31;
  uint64_t v32;
  unsigned int v33;
  unsigned int v34;
  uint64_t v35;
  int v36;
  int v37;
  unsigned int v38;
  uint64_t v39;
  char *i;
  _WORD *v41;
  int *v42;
  int v43;
  uint64_t v44;
  int *v45;
  unsigned int v46;
  int v47;
  int v49;
  int v50;
  int v51;
  __int16 v52;
  unsigned int v53;
  unsigned int v54;
  void *v55;
  uint64_t v56;
  _BYTE v57[96];
  void *v58;
  uint64_t v59;
  _QWORD v60[14];

  v60[12] = *MEMORY[0x1E0C80C00];
  v3 = *((unsigned __int16 *)a2 + 4);
  *((_DWORD *)a2 + 3) = *(_DWORD *)(*((_QWORD *)this + 14) + 40 * v3 + 24);
  if (!*((_BYTE *)a2 + 42))
  {
    v7 = (_QWORD *)((char *)this + 136);
    if (*((_DWORD *)this + 36) >= 0x41u)
      v7 = (_QWORD *)(*v7 + ((v3 >> 3) & 0x1FF8));
    if (((*v7 >> v3) & 1) != 0)
      *((_BYTE *)a2 + 41) = 1;
    v58 = v60;
    v59 = 0x400000000;
    v55 = v57;
    v56 = 0x400000000;
    llvm::mca::RegisterFile::collectWrites((uint64_t)this, (uint64_t)a3, (unsigned __int16 *)a2, (uint64_t)&v58, (uint64_t)&v55);
    v8 = v59;
    v9 = v56;
    v27 = (_DWORD)v56 + (_DWORD)v59 == 0;
    *((_DWORD *)a2 + 4) = v56 + v59;
    v10 = v27;
    *((_BYTE *)a2 + 40) = v10;
    v11 = *(_QWORD *)a2;
    v12 = *(_DWORD *)(*(_QWORD *)a2 + 12);
    v13 = *(_QWORD *)(*((_QWORD *)a3 + 20) + 40);
    if (v8)
    {
      v14 = (char *)v58;
      v15 = (char *)v58 + 24 * v8;
      v54 = *(_DWORD *)(*(_QWORD *)a2 + 12);
      v16 = v13 + 24 * v12;
      v17 = (unsigned __int16 *)(v16 + 18);
      v18 = (_WORD *)(v16 + 20);
      do
      {
        v19 = (_QWORD *)*((_QWORD *)v14 + 2);
        if (v19)
          v20 = (int *)(*v19 + 12);
        else
          v20 = (int *)(v14 + 8);
        if (*v18)
        {
          v21 = *v20;
          v22 = *(_DWORD *)(v11 + 4);
          v23 = (unsigned int *)(*((_QWORD *)a3 + 19) + 12 * *v17 + 8);
          v24 = 12 * (unsigned __int16)*v18;
          while (1)
          {
            v25 = *(v23 - 2);
            if (v25 >= v22)
            {
              if (v25 > v22)
                goto LABEL_23;
              v26 = *(v23 - 1);
              v27 = !v26 || v26 == v21;
              if (v27)
                break;
            }
            v23 += 3;
            v24 -= 12;
            if (!v24)
              goto LABEL_23;
          }
          v28 = *v23;
        }
        else
        {
LABEL_23:
          v28 = 0;
        }
        v29 = *(_DWORD *)v14;
        v14 += 24;
        llvm::mca::WriteState::addUser((uint64_t)v19, v29, a2, v28);
      }
      while (v14 != v15);
      v9 = v56;
      v12 = v54;
    }
    v30 = v55;
    if (v9)
    {
      v31 = (char *)v55 + 24 * v9;
      v32 = v13 + 24 * v12;
      v33 = *(_DWORD *)(v11 + 4);
      v34 = *(unsigned __int16 *)(v32 + 18);
      v35 = *(unsigned __int16 *)(v32 + 20);
      v36 = *((_DWORD *)this + 38);
      v37 = *((_DWORD *)a2 + 4);
      v38 = *((_DWORD *)a2 + 6);
      v39 = *((_QWORD *)a3 + 19) + 12 * v34 + 8;
      for (i = (char *)v55; i != v31; i += 24)
      {
        v41 = (_WORD *)*((_QWORD *)i + 2);
        if (v41)
        {
          v42 = (int *)(*(_QWORD *)v41 + 12);
          if ((_DWORD)v35)
            goto LABEL_33;
        }
        else
        {
          v42 = (int *)(i + 8);
          if ((_DWORD)v35)
          {
LABEL_33:
            v43 = *v42;
            v44 = 12 * v35;
            v45 = (int *)v39;
            while (1)
            {
              v46 = *(v45 - 2);
              if (v46 >= v33)
              {
                if (v46 > v33)
                  goto LABEL_41;
                v47 = *(v45 - 1);
                if (!v47 || v47 == v43)
                  break;
              }
              v45 += 3;
              v44 -= 12;
              if (!v44)
                goto LABEL_41;
            }
            v49 = *v45;
            goto LABEL_42;
          }
        }
LABEL_41:
        v49 = 0;
LABEL_42:
        v50 = *(_DWORD *)i;
        v51 = *((_DWORD *)i + 1);
        if (!v41)
          v41 = i;
        v52 = v41[6];
        v53 = v51 - (v36 + v49);
        *((_DWORD *)a2 + 4) = --v37;
        if (v38 < v53)
        {
          *((_WORD *)a2 + 16) = v52;
          *((_DWORD *)a2 + 9) = v53;
          v38 = v51 - (v36 + v49);
          *((_DWORD *)a2 + 6) = v53;
          *((_DWORD *)a2 + 7) = v50;
        }
        if (!v37)
        {
          *((_DWORD *)a2 + 5) = v38;
          *((_BYTE *)a2 + 40) = v38 == 0;
        }
      }
    }
    if (v30 != v57)
      free(v30);
    if (v58 != v60)
      free(v58);
  }
}

uint64_t llvm::mca::RegisterFile::isAvailable(uint64_t a1, unsigned __int16 *a2, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  int v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  unsigned int v19;
  int v20;
  void *v22[2];
  _QWORD v23[3];

  v23[2] = *MEMORY[0x1E0C80C00];
  v6 = *(unsigned int *)(a1 + 24);
  v22[0] = v23;
  v22[1] = (void *)0x400000000;
  sub_1C4893E04((char *)v22, v6, 0);
  if (a3)
  {
    v7 = *(_QWORD *)(a1 + 112);
    v8 = v22[0];
    v9 = *(_DWORD *)v22[0];
    v10 = 2 * a3;
    do
    {
      v11 = *a2;
      v12 = *(unsigned int *)(v7 + 40 * *a2 + 24);
      if ((_DWORD)v12)
        v8[v12] += *(_DWORD *)(v7 + 40 * *a2 + 28);
      v9 += *(_DWORD *)(v7 + 40 * v11 + 28);
      *v8 = v9;
      ++a2;
      v10 -= 2;
    }
    while (v10);
  }
  v13 = *(unsigned int *)(a1 + 24);
  if ((_DWORD)v13)
  {
    v14 = 0;
    v15 = 0;
    v16 = 0;
    do
    {
      v17 = *((_DWORD *)v22[0] + v15);
      if (v17)
      {
        v18 = *(_QWORD *)(a1 + 16);
        v19 = *(_DWORD *)(v18 + v14);
        if (v19)
        {
          if (v19 < v17)
            v17 = *(_DWORD *)(v18 + v14);
          if (v19 >= *(_DWORD *)(v18 + v14 + 4) + v17)
            v20 = 0;
          else
            v20 = 1 << v15;
          v16 = v20 | v16;
        }
      }
      ++v15;
      v14 += 20;
    }
    while (v13 != v15);
  }
  else
  {
    v16 = 0;
  }
  if (v22[0] != v23)
    free(v22[0]);
  return v16;
}

uint64_t sub_1C5976200(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;

  *(_QWORD *)a1 = &off_1E81847F8;
  if (*(_DWORD *)(a1 + 144) >= 0x41u)
  {
    v2 = *(_QWORD *)(a1 + 136);
    if (v2)
      MEMORY[0x1CAA32F9C](v2, 0x1000C8000313F17);
  }
  v3 = *(void **)(a1 + 112);
  if (v3)
  {
    *(_QWORD *)(a1 + 120) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 16);
  if (v4 != (void *)(a1 + 32))
    free(v4);
  return a1;
}

void sub_1C5976278(uint64_t a1)
{
  uint64_t v2;
  void *v3;
  void *v4;

  *(_QWORD *)a1 = &off_1E81847F8;
  if (*(_DWORD *)(a1 + 144) >= 0x41u)
  {
    v2 = *(_QWORD *)(a1 + 136);
    if (v2)
      MEMORY[0x1CAA32F9C](v2, 0x1000C8000313F17);
  }
  v3 = *(void **)(a1 + 112);
  if (v3)
  {
    *(_QWORD *)(a1 + 120) = v3;
    operator delete(v3);
  }
  v4 = *(void **)(a1 + 16);
  if (v4 != (void *)(a1 + 32))
    free(v4);
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5976300(_QWORD *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  _OWORD *v7;
  char *v8;
  __int128 v9;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a2)
  {
    if (a2 >= 0x666666666666667)
      abort();
    v5 = 5 * a2;
    v6 = 40 * a2;
    v7 = operator new(40 * a2);
    *a1 = v7;
    a1[1] = v7;
    v8 = (char *)v7 + 8 * v5;
    a1[2] = v8;
    do
    {
      v9 = *(_OWORD *)(a3 + 16);
      *v7 = *(_OWORD *)a3;
      v7[1] = v9;
      *((_QWORD *)v7 + 4) = *(_QWORD *)(a3 + 32);
      v7 = (_OWORD *)((char *)v7 + 40);
      v6 -= 40;
    }
    while (v6);
    a1[1] = v8;
  }
  return a1;
}

unint64_t sub_1C597638C(uint64_t a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;

  v2 = a2;
  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v5 = v3 + 1;
    v6 = *(_QWORD *)a1 + 20 * v3;
    if (*(_QWORD *)a1 <= a2 && v6 > a2)
    {
      v8 = a2 - *(_QWORD *)a1;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v5, 20);
      return *(_QWORD *)a1 + v8;
    }
    else
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v5, 20);
    }
  }
  return v2;
}

void sub_1C5976404(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  uint64_t v13;
  __int128 *v14;
  __int128 *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t v26;
  __int128 v27;
  unint64_t v28;
  unint64_t v29;
  __int128 *v30;
  __int128 v31;
  BOOL v32;
  uint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t v39;
  __int128 v40;
  unint64_t v41;
  unint64_t v42;
  __int128 *v43;
  __int128 v44;
  __int128 v45;
  __int128 *v46;
  __int128 *v47;
  __int128 *v48;
  __int128 v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  __int128 v53;
  uint64_t v54;
  __int128 v55;
  _OWORD *v56;
  BOOL v58;
  uint64_t v59;
  _OWORD *v60;
  unint64_t v61;
  unint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int64_t v66;
  int64_t v67;
  int64_t v68;
  uint64_t v69;
  unint64_t v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  __int128 v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  unint64_t v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  unint64_t v87;
  unint64_t v88;
  __int128 v89;
  __int128 v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  unint64_t v94;
  __int128 v95;
  unint64_t v97;
  unint64_t v98;
  _OWORD *v99;
  unint64_t v100;
  __int128 v101;
  __int128 v102;
  __int128 v103;
  __int128 v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  __int128 v108;
  __int128 v109;
  __int128 v110;
  __int128 v111;
  __int128 v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;

__int128 *sub_1C5976CB8(__int128 *result, __int128 *a2, __int128 *a3)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  __int128 v6;
  uint64_t v7;
  uint64_t v8;
  __int128 v9;
  uint64_t v10;
  uint64_t v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  __int128 v15;
  uint64_t v16;
  uint64_t v17;

  v3 = *((_QWORD *)a2 + 2);
  v4 = *((_QWORD *)a3 + 2);
  if (v3 >= *((_QWORD *)result + 2))
  {
    if (v4 < v3)
    {
      v8 = *((_QWORD *)a2 + 2);
      v9 = *a2;
      v10 = *((_QWORD *)a3 + 2);
      *a2 = *a3;
      *((_QWORD *)a2 + 2) = v10;
      *a3 = v9;
      *((_QWORD *)a3 + 2) = v8;
      if (*((_QWORD *)a2 + 2) < *((_QWORD *)result + 2))
      {
        v11 = *((_QWORD *)result + 2);
        v12 = *result;
        v13 = *((_QWORD *)a2 + 2);
        *result = *a2;
        *((_QWORD *)result + 2) = v13;
        *a2 = v12;
        *((_QWORD *)a2 + 2) = v11;
      }
    }
  }
  else
  {
    if (v4 >= v3)
    {
      v14 = *((_QWORD *)result + 2);
      v15 = *result;
      v16 = *((_QWORD *)a2 + 2);
      *result = *a2;
      *((_QWORD *)result + 2) = v16;
      *a2 = v15;
      *((_QWORD *)a2 + 2) = v14;
      if (*((_QWORD *)a3 + 2) >= *((_QWORD *)a2 + 2))
        return result;
      v5 = *((_QWORD *)a2 + 2);
      v6 = *a2;
      v17 = *((_QWORD *)a3 + 2);
      *a2 = *a3;
      *((_QWORD *)a2 + 2) = v17;
    }
    else
    {
      v5 = *((_QWORD *)result + 2);
      v6 = *result;
      v7 = *((_QWORD *)a3 + 2);
      *result = *a3;
      *((_QWORD *)result + 2) = v7;
    }
    *a3 = v6;
    *((_QWORD *)a3 + 2) = v5;
  }
  return result;
}

BOOL sub_1C5976DA8(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  __int128 *v17;
  __int128 *v18;
  __int128 *v19;
  uint64_t v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  uint64_t v25;
  __int128 v26;
  uint64_t v27;
  __int128 v28;
  __int128 v29;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if (*(_QWORD *)(a2 - 8) < *(_QWORD *)(a1 + 16))
      {
        v6 = *(_QWORD *)(a1 + 16);
        v7 = *(_OWORD *)a1;
        v8 = *(_QWORD *)(a2 - 8);
        *(_OWORD *)a1 = *(_OWORD *)(a2 - 24);
        *(_QWORD *)(a1 + 16) = v8;
        *(_OWORD *)(a2 - 24) = v7;
        *(_QWORD *)(a2 - 8) = v6;
      }
      return result;
    case 3uLL:
      sub_1C5976CB8((__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)(a2 - 24));
      return 1;
    case 4uLL:
      sub_1C5977018(a1, a1 + 24, a1 + 48, a2 - 24);
      return 1;
    case 5uLL:
      v17 = (__int128 *)(a1 + 24);
      v18 = (__int128 *)(a1 + 48);
      v19 = (__int128 *)(a1 + 72);
      sub_1C5977018(a1, a1 + 24, a1 + 48, a1 + 72);
      if (*(_QWORD *)(a2 - 8) < *(_QWORD *)(a1 + 88))
      {
        v20 = *(_QWORD *)(a1 + 88);
        v21 = *v19;
        v22 = *(_QWORD *)(a2 - 8);
        *v19 = *(_OWORD *)(a2 - 24);
        *(_QWORD *)(a1 + 88) = v22;
        *(_OWORD *)(a2 - 24) = v21;
        *(_QWORD *)(a2 - 8) = v20;
        if (*(_QWORD *)(a1 + 88) < *(_QWORD *)(a1 + 64))
        {
          v23 = *(_QWORD *)(a1 + 64);
          v24 = *v18;
          *v18 = *v19;
          *(_QWORD *)(a1 + 64) = *(_QWORD *)(a1 + 88);
          *v19 = v24;
          *(_QWORD *)(a1 + 88) = v23;
          if (*(_QWORD *)(a1 + 64) < *(_QWORD *)(a1 + 40))
          {
            v25 = *(_QWORD *)(a1 + 40);
            v26 = *v17;
            *v17 = *v18;
            *(_QWORD *)(a1 + 40) = *(_QWORD *)(a1 + 64);
            *v18 = v26;
            *(_QWORD *)(a1 + 64) = v25;
            if (*(_QWORD *)(a1 + 40) < *(_QWORD *)(a1 + 16))
            {
              v27 = *(_QWORD *)(a1 + 16);
              v28 = *(_OWORD *)a1;
              *(_OWORD *)a1 = *v17;
              *(_QWORD *)(a1 + 16) = *(_QWORD *)(a1 + 40);
              *v17 = v28;
              *(_QWORD *)(a1 + 40) = v27;
            }
          }
        }
      }
      return 1;
    default:
      v9 = a1 + 48;
      sub_1C5976CB8((__int128 *)a1, (__int128 *)(a1 + 24), (__int128 *)(a1 + 48));
      v10 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v11 = 0;
      v12 = 72;
      break;
  }
  while (1)
  {
    v13 = *(_QWORD *)(v10 + 16);
    if (v13 < *(_QWORD *)(v9 + 16))
    {
      v29 = *(_OWORD *)v10;
      v14 = v12;
      while (1)
      {
        v15 = a1 + v14;
        *(_OWORD *)v15 = *(_OWORD *)(a1 + v14 - 24);
        *(_QWORD *)(v15 + 16) = *(_QWORD *)(a1 + v14 - 8);
        v14 -= 24;
        if (!v14)
          break;
        if (v13 >= *(_QWORD *)(v15 - 32))
        {
          v16 = a1 + v14;
          goto LABEL_13;
        }
      }
      v16 = a1;
LABEL_13:
      *(_OWORD *)v16 = v29;
      *(_QWORD *)(v16 + 16) = v13;
      if (++v11 == 8)
        return v10 + 24 == a2;
    }
    v9 = v10;
    v12 += 24;
    v10 += 24;
    if (v10 == a2)
      return 1;
  }
}

__n128 sub_1C5977018(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __n128 result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  sub_1C5976CB8((__int128 *)a1, (__int128 *)a2, (__int128 *)a3);
  if (*(_QWORD *)(a4 + 16) < *(_QWORD *)(a3 + 16))
  {
    v9 = *(_QWORD *)(a3 + 16);
    result = *(__n128 *)a3;
    v10 = *(_QWORD *)(a4 + 16);
    *(_OWORD *)a3 = *(_OWORD *)a4;
    *(_QWORD *)(a3 + 16) = v10;
    *(__n128 *)a4 = result;
    *(_QWORD *)(a4 + 16) = v9;
    if (*(_QWORD *)(a3 + 16) < *(_QWORD *)(a2 + 16))
    {
      v11 = *(_QWORD *)(a2 + 16);
      result = *(__n128 *)a2;
      v12 = *(_QWORD *)(a3 + 16);
      *(_OWORD *)a2 = *(_OWORD *)a3;
      *(_QWORD *)(a2 + 16) = v12;
      *(__n128 *)a3 = result;
      *(_QWORD *)(a3 + 16) = v11;
      if (*(_QWORD *)(a2 + 16) < *(_QWORD *)(a1 + 16))
      {
        v13 = *(_QWORD *)(a1 + 16);
        result = *(__n128 *)a1;
        v14 = *(_QWORD *)(a2 + 16);
        *(_OWORD *)a1 = *(_OWORD *)a2;
        *(_QWORD *)(a1 + 16) = v14;
        *(__n128 *)a2 = result;
        *(_QWORD *)(a2 + 16) = v13;
      }
    }
  }
  return result;
}

uint64_t llvm::mca::DefaultResourceStrategy::select(llvm::mca::DefaultResourceStrategy *this, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  char v5;

  v2 = *((_QWORD *)this + 2);
  v3 = v2 & a2;
  if ((v2 & a2) != 0
    || (v4 = *((_QWORD *)this + 1),
        v2 = *((_QWORD *)this + 3) ^ v4,
        *((_QWORD *)this + 3) = 0,
        v3 = v2 & a2,
        (v2 & a2) != 0))
  {
    v5 = __clz(v3);
    LOBYTE(v3) = v5 ^ 0x3F;
  }
  else
  {
    v3 = (63 - __clz(v4 & a2));
    v5 = 63 - v3;
    v2 = v4;
  }
  *((_QWORD *)this + 2) = (0xFFFFFFFFFFFFFFFFLL >> v5) & v2;
  return 1 << v3;
}

_QWORD *llvm::mca::DefaultResourceStrategy::used(_QWORD *this, unint64_t a2)
{
  unint64_t v2;
  uint64_t v3;

  v2 = this[2];
  if (v2 >= a2)
  {
    v3 = v2 & ~a2;
    this[2] = v3;
    if (!v3)
    {
      this[2] = this[3] ^ this[1];
      this[3] = 0;
    }
  }
  else
  {
    this[3] |= a2;
  }
  return this;
}

uint64_t llvm::mca::ResourceState::ResourceState(uint64_t result, uint64_t a2, int a3, unint64_t a4)
{
  int v4;
  uint8x8_t v5;
  uint64_t v6;

  *(_DWORD *)result = a3;
  *(_QWORD *)(result + 8) = a4;
  v4 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)(result + 32) = v4;
  v5 = (uint8x8_t)vcnt_s8((int8x8_t)a4);
  v5.i16[0] = vaddlv_u8(v5);
  *(_BYTE *)(result + 41) = v5.u32[0] > 1uLL;
  if (v5.u32[0] < 2uLL)
    v6 = ~(-1 << *(_DWORD *)(a2 + 8));
  else
    v6 = (1 << ~__clz(a4)) ^ a4;
  *(_QWORD *)(result + 16) = v6;
  *(_QWORD *)(result + 24) = v6;
  if (v4 == -1)
    v4 = 0;
  *(_DWORD *)(result + 36) = v4;
  *(_BYTE *)(result + 40) = 0;
  return result;
}

BOOL llvm::mca::ResourceState::isReady(int8x8_t *this, unsigned int a2)
{
  uint8x8_t v3;

  if (this[5].i8[0] && this[4].i32[0])
    return 0;
  v3 = (uint8x8_t)vcnt_s8(this[3]);
  v3.i16[0] = vaddlv_u8(v3);
  return v3.i32[0] >= a2;
}

uint64_t llvm::mca::ResourceState::isBufferAvailable(llvm::mca::ResourceState *this)
{
  int v1;

  v1 = *((_DWORD *)this + 8);
  if (!v1)
    return 2 * *((unsigned __int8 *)this + 40);
  if (v1 < 1)
    return 0;
  return *((_DWORD *)this + 9) == 0;
}

uint64_t llvm::mca::ResourceManager::ResourceManager(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t *v4;
  int v5;
  size_t v6;
  char *v7;
  char *v8;
  int v9;
  int v10;
  size_t v11;
  char *v12;
  char *v13;
  int v14;
  int v15;
  size_t v16;
  char *v17;
  char *v18;
  uint64_t *v19;
  unint64_t v20;
  unint64_t v21;
  uint64_t i;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t j;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t k;
  unint64_t v44;
  unsigned int v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unint64_t v49;
  int v50;
  _QWORD *v52;

  *(_QWORD *)a1 = &unk_1E8184818;
  v3 = *(_DWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 8) = 0;
  v4 = (uint64_t *)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  v5 = v3 - 1;
  if (v3 != 1)
  {
    v6 = 8 * (v3 - 1);
    v7 = (char *)operator new(v6);
    *(_QWORD *)(a1 + 8) = v7;
    v8 = &v7[8 * v5];
    *(_QWORD *)(a1 + 24) = v8;
    bzero(v7, v6);
    *(_QWORD *)(a1 + 16) = v8;
  }
  v9 = *(_DWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  v52 = (_QWORD *)(a1 + 32);
  *(_QWORD *)(a1 + 48) = 0;
  v10 = v9 - 1;
  if (v9 != 1)
  {
    v11 = 8 * (v9 - 1);
    v12 = (char *)operator new(v11);
    *(_QWORD *)(a1 + 32) = v12;
    v13 = &v12[8 * v10];
    *(_QWORD *)(a1 + 48) = v13;
    bzero(v12, v11);
    *(_QWORD *)(a1 + 40) = v13;
  }
  v14 = *(_DWORD *)(a2 + 48);
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  v15 = v14 - 1;
  if (v14 != 1)
  {
    v16 = 8 * (v14 - 1);
    v17 = (char *)operator new(v16);
    *(_QWORD *)(a1 + 56) = v17;
    v18 = &v17[8 * v15];
    *(_QWORD *)(a1 + 72) = v18;
    bzero(v17, v16);
    *(_QWORD *)(a1 + 64) = v18;
  }
  *(_QWORD *)(a1 + 80) = a1 + 96;
  v19 = (uint64_t *)(a1 + 80);
  v20 = *(unsigned int *)(a2 + 48);
  *(_QWORD *)(a1 + 88) = 0x800000000;
  sub_1C4765AA4((char *)(a1 + 80), v20, 0);
  *(_QWORD *)(a1 + 160) = a1 + 176;
  v21 = (*(_DWORD *)(a2 + 48) - 1);
  *(_QWORD *)(a1 + 168) = 0x800000000;
  sub_1C4893E04((char *)(a1 + 160), v21, 0);
  *(_QWORD *)(a1 + 208) = 1;
  for (i = 216; i != 312; i += 24)
  {
    v23 = (_QWORD *)(a1 + i);
    *v23 = -1;
    v23[1] = -1;
  }
  *(_QWORD *)(a1 + 312) = 0;
  *(_QWORD *)(a1 + 328) = 0;
  *(_OWORD *)(a1 + 336) = xmmword_1C85F6FF0;
  llvm::mca::computeProcResourceMasks(a2, *(_QWORD **)(a1 + 80));
  v24 = *(unsigned int *)(a2 + 48);
  if (v24 >= 2)
  {
    v25 = *v19;
    v26 = *(_QWORD *)(a1 + 160);
    for (j = 1; j != v24; ++j)
      *(_DWORD *)(v26 + 4 * (63 - __clz(*(_QWORD *)(v25 + 8 * j)))) = j;
    v28 = *(unsigned int *)(a2 + 48);
    if (v28 >= 2)
    {
      v29 = 1;
      v30 = 32;
      do
      {
        v31 = *(_QWORD *)(*v19 + 8 * v29);
        v32 = 63 - __clz(v31);
        v33 = *(_QWORD *)(a2 + 32) + v30;
        v34 = operator new();
        llvm::mca::ResourceState::ResourceState(v34, v33, v29, v31);
        v35 = *(_QWORD *)(*v4 + 8 * v32);
        *(_QWORD *)(*v4 + 8 * v32) = v34;
        if (v35)
          MEMORY[0x1CAA32FC0](v35, 0x1000C407EB0D517);
        v36 = *(_QWORD *)(*v4 + 8 * v32);
        if (*(_BYTE *)(v36 + 41) || (*(_QWORD *)(v36 + 16) & (*(_QWORD *)(v36 + 16) - 1)) != 0)
        {
          v38 = *(_QWORD *)(v36 + 24);
          v37 = (_QWORD *)operator new();
          *v37 = &off_1E8184868;
          v37[1] = v38;
          v37[2] = v38;
          v37[3] = 0;
        }
        else
        {
          v37 = 0;
        }
        v39 = *(_QWORD *)(*v52 + 8 * v32);
        *(_QWORD *)(*v52 + 8 * v32) = v37;
        if (v39)
          (*(void (**)(uint64_t))(*(_QWORD *)v39 + 8))(v39);
        ++v29;
        v30 += 32;
      }
      while (v28 != v29);
      v40 = *(unsigned int *)(a2 + 48);
      if (v40 >= 2)
      {
        v41 = *v19;
        v42 = *v4;
        for (k = 1; k != v40; ++k)
        {
          v44 = *(_QWORD *)(v41 + 8 * k);
          v45 = 63 - __clz(v44);
          if (*(_BYTE *)(*(_QWORD *)(v42 + 8 * v45) + 41))
          {
            v46 = 1 << v45;
            v47 = v44 - v46;
            if (v47)
            {
              v48 = *(_QWORD *)(a1 + 56);
              do
              {
                v49 = v47 & -(uint64_t)v47;
                v50 = __clz(v49);
                *(_QWORD *)(v48 + 8 * (63 - v50)) |= v46;
                v47 ^= v49;
              }
              while (v47);
            }
          }
          else
          {
            *(_QWORD *)(a1 + 312) |= v44;
          }
        }
      }
    }
  }
  *(_QWORD *)(a1 + 320) = *(_QWORD *)(a1 + 312);
  return a1;
}

uint64_t llvm::mca::ResourceManager::setCustomStrategyImpl(uint64_t a1, uint64_t *a2, unint64_t a3)
{
  unsigned int v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t result;

  v3 = 63 - __clz(a3);
  v4 = *(_QWORD *)(a1 + 32);
  v5 = *a2;
  *a2 = 0;
  result = *(_QWORD *)(v4 + 8 * v3);
  *(_QWORD *)(v4 + 8 * v3) = v5;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t llvm::mca::ResourceManager::resolveResourceMask(llvm::mca::ResourceManager *this, unint64_t a2)
{
  return *(unsigned int *)(*((_QWORD *)this + 20) + 4 * (63 - __clz(a2)));
}

uint64_t llvm::mca::ResourceManager::getNumUnits(llvm::mca::ResourceManager *this, unint64_t a2)
{
  int8x8_t *v2;
  uint8x8_t v4;

  v2 = *(int8x8_t **)(*((_QWORD *)this + 1) + 8 * (63 - __clz(a2)));
  if (v2[5].i8[1])
    return 1;
  v4 = (uint8x8_t)vcnt_s8(v2[2]);
  v4.i16[0] = vaddlv_u8(v4);
  return v4.u32[0];
}

unint64_t llvm::mca::ResourceManager::selectPipe(llvm::mca::ResourceManager *this, unint64_t a2)
{
  unint64_t v3;
  uint64_t v4;
  int8x8_t *v5;
  uint8x8_t v6;
  uint64_t v7;

  do
  {
    v3 = a2;
    v4 = 63 - __clz(a2);
    v5 = *(int8x8_t **)(*((_QWORD *)this + 1) + 8 * v4);
    if (!v5[5].i8[1])
    {
      v6 = (uint8x8_t)vcnt_s8(v5[2]);
      v6.i16[0] = vaddlv_u8(v6);
      if (v6.u32[0] == 1)
        break;
    }
    v7 = *(_QWORD *)(*((_QWORD *)this + 4) + 8 * v4);
    a2 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v7 + 16))(v7, *(_QWORD *)&v5[3]);
  }
  while (v5[5].i8[1]);
  return v3;
}

uint64_t llvm::mca::ResourceManager::use(uint64_t result, unint64_t *a2)
{
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;

  v3 = (_QWORD *)result;
  v4 = 63 - __clz(*a2);
  v5 = *(_QWORD *)(*(_QWORD *)(result + 8) + 8 * v4);
  *(_QWORD *)(v5 + 24) ^= a2[1];
  if (!*(_BYTE *)(v5 + 41) && (*(_QWORD *)(v5 + 16) & (*(_QWORD *)(v5 + 16) - 1)) != 0)
  {
    v6 = *(_QWORD *)(*(_QWORD *)(result + 32) + 8 * v4);
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 24))(v6);
  }
  if (*(_BYTE *)(v5 + 40) && *(_DWORD *)(v5 + 32) || !*(_QWORD *)(v5 + 24))
  {
    v3[40] ^= *a2;
    for (i = *(_QWORD *)(v3[7] + 8 * v4); i; i &= i - 1)
    {
      v8 = 63 - __clz(i & -i);
      v9 = *(_QWORD *)(v3[1] + 8 * v8);
      *(_QWORD *)(v9 + 24) ^= *a2;
      v10 = *(_QWORD *)(v3[4] + 8 * v8);
      result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 24))(v10);
    }
  }
  return result;
}

_QWORD *llvm::mca::ResourceManager::release(_QWORD *result, unint64_t *a2)
{
  unint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;

  v2 = *a2;
  v3 = 63 - __clz(*a2);
  v4 = result[1];
  v5 = *(_QWORD *)(v4 + 8 * v3);
  if (*(_BYTE *)(v5 + 40) && *(_DWORD *)(v5 + 32))
  {
    *(_QWORD *)(v5 + 24) ^= a2[1];
  }
  else
  {
    v6 = *(_QWORD *)(v5 + 24);
    *(_QWORD *)(v5 + 24) = a2[1] ^ v6;
    if (v6)
      return result;
  }
  result[40] ^= v2;
  for (i = *(_QWORD *)(result[7] + 8 * v3); i; i &= i - 1)
  {
    v8 = *(_QWORD *)(v4 + 8 * (63 - __clz(i & -i)));
    *(_QWORD *)(v8 + 24) ^= v2;
  }
  return result;
}

uint64_t llvm::mca::ResourceManager::canBeDispatched(llvm::mca::ResourceManager *this, uint64_t a2)
{
  if ((*((_QWORD *)this + 43) & a2) != 0)
    return 2;
  else
    return (a2 & ~*((_QWORD *)this + 42)) != 0;
}

_QWORD *llvm::mca::ResourceManager::reserveBuffers(_QWORD *this, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;
  int v5;
  _QWORD *v6;
  int v7;

  if (a2)
  {
    v2 = this[1];
    while (1)
    {
      v3 = a2 & -a2;
      v4 = *(_QWORD *)(v2 + 8 * (63 - __clz(v3)));
      v5 = *(_DWORD *)(v4 + 32);
      if (v5 < 1)
        break;
      v6 = this + 42;
      v7 = *(_DWORD *)(v4 + 36) - 1;
      *(_DWORD *)(v4 + 36) = v7;
      if (!v7)
        goto LABEL_5;
LABEL_6:
      a2 ^= v3;
      if (!a2)
        return this;
    }
    v6 = this + 43;
    if (v5)
      goto LABEL_6;
LABEL_5:
    *v6 ^= v3;
    goto LABEL_6;
  }
  return this;
}

uint64_t llvm::mca::ResourceManager::releaseBuffers(uint64_t this, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  uint64_t v4;

  *(_QWORD *)(this + 336) |= a2;
  if (a2)
  {
    v2 = *(_QWORD *)(this + 8);
    do
    {
      v3 = a2 & -a2;
      v4 = *(_QWORD *)(v2 + 8 * (63 - __clz(v3)));
      if (*(int *)(v4 + 32) >= 1)
        ++*(_DWORD *)(v4 + 36);
      a2 ^= v3;
    }
    while (a2);
  }
  return this;
}

uint64_t llvm::mca::ResourceManager::checkAvailability(_QWORD *a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unint64_t v7;
  int8x8_t *v8;
  uint8x8_t v9;
  uint64_t i;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;

  v2 = *(unsigned int *)(a2 + 144);
  if ((_DWORD)v2)
  {
    v3 = 0;
    v4 = 24 * v2;
    v5 = (unsigned int *)(*(_QWORD *)(a2 + 136) + 20);
    do
    {
      if (*((_BYTE *)v5 - 4))
        v6 = 0;
      else
        v6 = *v5;
      v7 = *(_QWORD *)(v5 - 5);
      v8 = *(int8x8_t **)(a1[1] + 8 * (63 - __clz(v7)));
      if (v8[5].i8[0] && v8[4].i32[0] || (v9 = (uint8x8_t)vcnt_s8(v8[3]), v9.i16[0] = vaddlv_u8(v9), v6 > v9.i32[0]))
        v3 |= v7;
      v5 += 6;
      v4 -= 24;
    }
    while (v4);
  }
  else
  {
    v3 = 0;
  }
  for (i = *(_QWORD *)(a2 + 264); i; i ^= v11)
  {
    v11 = i & -i;
    v12 = 63 - __clz(v11);
    v13 = *(_QWORD *)(a1[1] + 8 * v12);
    if ((!*(_BYTE *)(v13 + 40) || !*(_DWORD *)(v13 + 32)) && *(_QWORD *)(v13 + 24))
      v12 = 0;
    v3 |= v12;
  }
  v14 = a1[39] & v3;
  if (!v14)
    return a1[41] & *(_QWORD *)(a2 + 272);
  return v14;
}

uint64_t llvm::mca::ResourceManager::issueInstruction(uint64_t this, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  llvm::mca::ResourceManager *v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  int v20;
  int v21;
  _QWORD *v22;
  int v23;
  uint64_t v24;
  __int128 v26;
  uint64_t v27;
  __int128 v28;

  v3 = *(unsigned int *)(a2 + 144);
  if ((_DWORD)v3)
  {
    v4 = (llvm::mca::ResourceManager *)this;
    v5 = (_DWORD *)(this + 208);
    v6 = 24 * v3;
    v7 = *(_QWORD *)(a2 + 136) + 8;
    do
    {
      v8 = *(_DWORD *)(v7 + 4);
      v9 = v8 - *(_DWORD *)v7;
      if (v8 == *(_DWORD *)v7)
      {
        v10 = 63 - __clz(*(_QWORD *)(v7 - 8));
        v11 = *(_QWORD *)(*((_QWORD *)v4 + 1) + 8 * v10);
        *(_BYTE *)(v11 + 40) = 0;
        if (*(_BYTE *)(v11 + 41))
          *((_QWORD *)v4 + 41) ^= 1 << v10;
        if (!*(_DWORD *)(v11 + 32))
          *((_QWORD *)v4 + 43) ^= 1 << v10;
      }
      else if (*(_BYTE *)(v7 + 8))
      {
        v12 = __clz(*(_QWORD *)(v7 - 8));
        *(_BYTE *)(*(_QWORD *)(*((_QWORD *)v4 + 1) + 8 * (63 - v12)) + 40) = 1;
        *((_QWORD *)v4 + 41) ^= 1 << ~(_BYTE)v12;
        v13 = *(_QWORD *)(v7 - 8);
        *(_QWORD *)&v26 = v13;
        *((_QWORD *)&v26 + 1) = v13;
        *(_QWORD *)&v28 = 0;
        this = sub_1C597809C((uint64_t)v5, v13, v13, &v28);
        v14 = v28;
        if ((_DWORD)this)
        {
          v15 = *(_DWORD *)(v28 + 16);
        }
        else
        {
          this = (uint64_t)sub_1C59781A0(v5, (uint64_t *)&v26, (_QWORD *)v28);
          v14 = this;
          v15 = 0;
          *(_QWORD *)this = v13;
          *(_QWORD *)(this + 8) = v13;
          *(_DWORD *)(this + 16) = 0;
        }
        *(_DWORD *)(v14 + 16) = v9 + v15;
      }
      else
      {
        v16 = llvm::mca::ResourceManager::selectPipe(v4, *(_QWORD *)(v7 - 8));
        v18 = v17;
        *(_QWORD *)&v28 = v16;
        *((_QWORD *)&v28 + 1) = v17;
        llvm::mca::ResourceManager::use((uint64_t)v4, (unint64_t *)&v28);
        v19 = *(_DWORD *)v7;
        v20 = *(_DWORD *)(v7 + 4);
        *(_QWORD *)&v26 = 0;
        v21 = sub_1C597809C((uint64_t)v5, v16, v18, &v26);
        v22 = (_QWORD *)v26;
        if (v21)
        {
          v23 = *(_DWORD *)(v26 + 16);
        }
        else
        {
          v22 = sub_1C59781A0(v5, (uint64_t *)&v28, (_QWORD *)v26);
          v23 = 0;
          *v22 = v16;
          v22[1] = v18;
          *((_DWORD *)v22 + 4) = 0;
        }
        *((_DWORD *)v22 + 4) = v20 - v19 + v23;
        v24 = (*(_DWORD *)(v7 + 4) - *(_DWORD *)v7);
        v26 = v28;
        v27 = v24 | 0x100000000;
        this = sub_1C5977CEC(a3, &v26);
      }
      v7 += 24;
      v6 -= 24;
    }
    while (v6);
  }
  return this;
}

_QWORD *llvm::mca::ResourceManager::releaseResource(_QWORD *this, unint64_t a2)
{
  unsigned int v2;
  uint64_t v3;

  v2 = 63 - __clz(a2);
  v3 = *(_QWORD *)(this[1] + 8 * v2);
  *(_BYTE *)(v3 + 40) = 0;
  if (*(_BYTE *)(v3 + 41))
    this[41] ^= 1 << v2;
  if (!*(_DWORD *)(v3 + 32))
    this[43] ^= 1 << v2;
  return this;
}

uint64_t sub_1C5977CEC(uint64_t a1, __int128 *a2)
{
  unsigned int v3;
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v10;
  __int128 v11;
  uint64_t v12;

  v3 = *(_DWORD *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v11 = *a2;
    v12 = *((_QWORD *)a2 + 2);
    v10 = sub_1C4926708(a1, (unint64_t)&v11, 1);
    v4 = *(_QWORD *)a1 + 24 * *(unsigned int *)(a1 + 8);
    v5 = *(_OWORD *)v10;
    v6 = *(_QWORD *)(v10 + 16);
  }
  else
  {
    v4 = *(_QWORD *)a1 + 24 * v3;
    v5 = *a2;
    v6 = *((_QWORD *)a2 + 2);
  }
  *(_QWORD *)(v4 + 16) = v6;
  *(_OWORD *)v4 = v5;
  v7 = *(_DWORD *)(a1 + 8) + 1;
  v8 = *(_QWORD *)a1 + 24 * v7;
  *(_DWORD *)(a1 + 8) = v7;
  return v8 - 24;
}

uint64_t llvm::mca::ResourceManager::reserveResource(uint64_t this, unint64_t a2)
{
  int v2;

  v2 = __clz(a2);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(this + 8) + 8 * (63 - v2)) + 40) = 1;
  *(_QWORD *)(this + 328) ^= 1 << ~(_BYTE)v2;
  return this;
}

uint64_t llvm::mca::ResourceManager::cycleEvent(uint64_t result, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  int8x8_t *v8;
  unsigned int v9;
  int8x8_t *v10;
  int8x8_t *v11;
  int8x8_t v12;
  int8x8_t *v15;
  unsigned int v16;
  int8x8_t *v17;
  __int32 v18;
  __int32 v19;
  unint64_t v20;
  uint8x8_t v21;
  unsigned int v22;
  uint64_t v23;
  __int128 v24;
  unint64_t v25;
  int8x8_t *v26;
  int8x8_t v27;
  uint64_t v30;
  uint64_t *v31;
  uint64_t *v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  __int128 v36;
  int64x2_t v37;
  int64x2_t *v38;

  v3 = result;
  v5 = result + 208;
  v4 = *(_DWORD *)(result + 208);
  if (v4 <= 1)
  {
    if (v4)
    {
      v6 = result + 216;
      v7 = 4;
    }
    else
    {
      v6 = *(_QWORD *)(result + 216);
      v7 = *(_DWORD *)(result + 224);
    }
    v11 = (int8x8_t *)(v6 + 24 * v7);
    v8 = v11;
    if (v4)
    {
LABEL_24:
      v15 = (int8x8_t *)(result + 216);
      v16 = 4;
      goto LABEL_25;
    }
LABEL_21:
    v15 = *(int8x8_t **)(result + 216);
    v16 = *(_DWORD *)(result + 224);
    goto LABEL_25;
  }
  if ((v4 & 1) != 0)
  {
    v8 = (int8x8_t *)(result + 216);
    v10 = (int8x8_t *)(result + 312);
    goto LABEL_8;
  }
  v8 = *(int8x8_t **)(result + 216);
  v9 = *(_DWORD *)(result + 224);
  if (v9)
  {
    v10 = &v8[3 * v9];
LABEL_8:
    v11 = v8;
    while (1)
    {
      v12 = v11[1];
      if ((*v11 != -1 || *(_QWORD *)&v12 != -1) && (*v11 != -2 || *(_QWORD *)&v12 != -2))
        break;
      v11 += 3;
      if (v11 == v10)
      {
        v11 = v10;
        break;
      }
    }
    v8 = v10;
    if ((*(_DWORD *)(result + 208) & 1) != 0)
      goto LABEL_24;
    goto LABEL_21;
  }
  v16 = 0;
  v11 = *(int8x8_t **)(result + 216);
  v15 = v11;
LABEL_25:
  v17 = &v15[3 * v16];
  while (v11 != v17)
  {
    v18 = v11[2].i32[0];
    if (!v18 || (v19 = v18 - 1, (v11[2].i32[0] = v19) == 0))
    {
      v20 = (unint64_t)*v11;
      v21 = (uint8x8_t)vcnt_s8(*v11);
      v21.i16[0] = vaddlv_u8(v21);
      if (v21.u32[0] == 1)
      {
        result = (uint64_t)llvm::mca::ResourceManager::release((_QWORD *)v3, (unint64_t *)v11);
        v20 = (unint64_t)*v11;
      }
      v22 = 63 - __clz(v20);
      v23 = *(_QWORD *)(*(_QWORD *)(v3 + 8) + 8 * v22);
      *(_BYTE *)(v23 + 40) = 0;
      if (*(_BYTE *)(v23 + 41))
        *(_QWORD *)(v3 + 328) ^= 1 << v22;
      if (!*(_DWORD *)(v23 + 32))
        *(_QWORD *)(v3 + 344) ^= 1 << v22;
      v24 = *(_OWORD *)v11->i8;
      v25 = *(unsigned int *)(a2 + 8);
      if (v25 >= *(unsigned int *)(a2 + 12))
      {
        v36 = *(_OWORD *)v11->i8;
        result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v25 + 1, 16);
        v24 = v36;
        v25 = *(unsigned int *)(a2 + 8);
      }
      *(_OWORD *)(*(_QWORD *)a2 + 16 * v25) = v24;
      ++*(_DWORD *)(a2 + 8);
    }
    v26 = v11 + 3;
    v11 = v8;
    if (v26 != v8)
    {
      v11 = v26;
      while (1)
      {
        v27 = v11[1];
        if ((*v11 != -1 || *(_QWORD *)&v27 != -1) && (*v11 != -2 || *(_QWORD *)&v27 != -2))
          break;
        v11 += 3;
        if (v11 == v8)
        {
          v11 = v8;
          break;
        }
      }
    }
  }
  v30 = *(unsigned int *)(a2 + 8);
  if ((_DWORD)v30)
  {
    v31 = *(uint64_t **)a2;
    v32 = &v31[2 * v30];
    v37 = vdupq_n_s64(0xFFFFFFFFFFFFFFFELL);
    do
    {
      v33 = *v31;
      v34 = v31[1];
      v38 = 0;
      result = sub_1C597809C(v5, v33, v34, &v38);
      if ((_DWORD)result)
      {
        *v38 = v37;
        v35 = *(_DWORD *)(v3 + 212) + 1;
        *(_DWORD *)(v3 + 208) -= 2;
        *(_DWORD *)(v3 + 212) = v35;
      }
      v31 += 2;
    }
    while (v31 != v32);
  }
  return result;
}

void sub_1C5978060()
{
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C5978078(uint64_t a1)
{
  sub_1C59784E4(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C597809C(uint64_t a1, uint64_t a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  int v5;
  unint64_t v6;
  unint64_t v7;
  unint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v16;
  int v17;
  uint64_t result;
  BOOL v19;
  unsigned int v21;

  v4 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v5 = 4;
  }
  else
  {
    v5 = *(_DWORD *)(a1 + 16);
    if (!v5)
    {
      v12 = 0;
      result = 0;
      goto LABEL_11;
    }
    v4 = *(_QWORD *)(a1 + 8);
  }
  v6 = ((37 * a3) | (unint64_t)(0x2500000000 * a2))
     + ~((unint64_t)(37 * a3) << 32);
  v7 = (v6 ^ (v6 >> 22)) + ~((v6 ^ (v6 >> 22)) << 13);
  v8 = (9 * (v7 ^ (v7 >> 8))) ^ ((9 * (v7 ^ (v7 >> 8))) >> 15);
  v9 = ((v8 + ~(v8 << 27)) >> 31) ^ (v8 + ~((_DWORD)v8 << 27));
  v10 = v5 - 1;
  v11 = (v5 - 1) & v9;
  v12 = (_QWORD *)(v4 + 24 * v11);
  v13 = *v12;
  v14 = v12[1];
  if (*v12 == a2 && v14 == a3)
  {
    result = 1;
  }
  else
  {
    v16 = 0;
    v17 = 1;
    result = 1;
    while (v13 != -1 || v14 != -1)
    {
      if (v16)
        v19 = 0;
      else
        v19 = v14 == -2;
      if (v19 && v13 == -2)
        v16 = v12;
      v21 = v11 + v17++;
      v11 = v21 & v10;
      v12 = (_QWORD *)(v4 + 24 * (v21 & v10));
      v13 = *v12;
      v14 = v12[1];
      if (*v12 == a2 && v14 == a3)
        goto LABEL_11;
    }
    result = 0;
    if (v16)
      v12 = v16;
  }
LABEL_11:
  *a4 = v12;
  return result;
}

_QWORD *sub_1C59781A0(_DWORD *a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  _QWORD *v9;

  v5 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v6 = 4;
  else
    v6 = a1[4];
  if (4 * v5 + 4 >= 3 * v6)
  {
    v6 *= 2;
  }
  else if (v6 + ~v5 - a1[1] > v6 >> 3)
  {
    goto LABEL_6;
  }
  sub_1C5978260((uint64_t)a1, v6);
  v9 = 0;
  sub_1C597809C((uint64_t)a1, *a2, a2[1], &v9);
  a3 = v9;
LABEL_6:
  *a1 += 2;
  if (*a3 != -1 || a3[1] != -1)
    --a1[1];
  return a3;
}

uint64_t sub_1C5978260(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v14;
  uint64_t v16;
  _BYTE v17[96];
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(_DWORD *)(a1 + 16);
    if (a2 > 4)
    {
      v16 = a2;
      *(_QWORD *)(a1 + 8) = operator new(24 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v16;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C5978404(a1, v6, v6 + 24 * v7);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v17;
  do
  {
    v10 = *(_QWORD *)(a1 + v8 + 8);
    v11 = *(_QWORD *)(a1 + v8 + 16);
    if ((v10 != -1 || v11 != -1) && (v10 != -2 || v11 != -2))
    {
      *(_OWORD *)v9 = *(_OWORD *)(a1 + v8 + 8);
      *((_DWORD *)v9 + 4) = *(_DWORD *)(a1 + v8 + 24);
      v9 += 24;
    }
    v8 += 24;
  }
  while (v8 != 96);
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    v14 = a2;
    *(_QWORD *)(a1 + 8) = operator new(24 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v14;
  }
  return sub_1C5978404(a1, (uint64_t)v17, (uint64_t)v9);
}

uint64_t sub_1C5978404(uint64_t result, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  int v6;
  unsigned int v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v14;
  _QWORD *v15;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 104);
  }
  else
  {
    v7 = *(_DWORD *)(result + 16);
    if (!v7)
      goto LABEL_17;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[3 * v7];
  }
  do
  {
    *v8 = -1;
    v8[1] = -1;
    v8 += 3;
  }
  while (v8 != v9);
LABEL_17:
  while (a2 != a3)
  {
    v10 = *(_QWORD *)a2;
    v11 = *(_QWORD *)(a2 + 8);
    if ((*(_QWORD *)a2 != -1 || v11 != -1) && (v10 != -2 || v11 != -2))
    {
      v15 = 0;
      result = sub_1C597809C((uint64_t)v5, v10, v11, &v15);
      v14 = v15;
      *v15 = *(_QWORD *)a2;
      v14[1] = *(_QWORD *)(a2 + 8);
      *((_DWORD *)v14 + 4) = *(_DWORD *)(a2 + 16);
      *v5 += 2;
    }
    a2 += 24;
  }
  return result;
}

uint64_t sub_1C59784E4(uint64_t a1)
{
  void *v2;
  void *v3;
  void *v4;
  void **v6;

  *(_QWORD *)a1 = &unk_1E8184818;
  if ((*(_BYTE *)(a1 + 208) & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 216), 8);
  v2 = *(void **)(a1 + 160);
  if (v2 != (void *)(a1 + 176))
    free(v2);
  v3 = *(void **)(a1 + 80);
  if (v3 != (void *)(a1 + 96))
    free(v3);
  v4 = *(void **)(a1 + 56);
  if (v4)
  {
    *(_QWORD *)(a1 + 64) = v4;
    operator delete(v4);
  }
  v6 = (void **)(a1 + 32);
  sub_1C4764BBC(&v6);
  v6 = (void **)(a1 + 8);
  sub_1C5978588(&v6);
  return a1;
}

void sub_1C5978588(void ***a1)
{
  void **v1;
  _QWORD *v2;
  _QWORD *v4;
  void *v5;
  uint64_t v6;
  uint64_t v7;

  v1 = *a1;
  v2 = **a1;
  if (v2)
  {
    v4 = v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v7 = *--v4;
        v6 = v7;
        *v4 = 0;
        if (v7)
          MEMORY[0x1CAA32FC0](v6, 0x1000C407EB0D517);
      }
      while (v4 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t llvm::mca::RetireControlUnit::RetireControlUnit(uint64_t a1, uint64_t a2)
{
  unsigned int v3;
  uint64_t v4;
  unsigned int *v5;
  unsigned int v6;
  unint64_t v7;

  *(_QWORD *)a1 = &off_1E8184898;
  *(_QWORD *)(a1 + 8) = 0;
  v3 = *(_DWORD *)(a2 + 4);
  *(_QWORD *)(a1 + 32) = 0;
  v4 = a1 + 32;
  if (v3 <= 1)
    v3 = 0;
  *(_DWORD *)(v4 - 12) = v3;
  *(_DWORD *)(v4 - 8) = 0;
  *(_QWORD *)(v4 + 8) = 0;
  *(_QWORD *)(v4 + 16) = 0;
  v5 = *(unsigned int **)(a2 + 64);
  if (v5)
  {
    v6 = *v5;
    if (*v5)
    {
      *(_DWORD *)(a1 + 20) = v6;
      v3 = v6;
    }
    *(_DWORD *)(a1 + 24) = v5[1];
  }
  *(_DWORD *)(a1 + 16) = v3;
  v7 = 2 * v3;
  if ((_DWORD)v7)
    sub_1C59788AC((char **)v4, v7);
  return a1;
}

uint64_t llvm::mca::RetireControlUnit::dispatch(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v3;
  int v4;
  uint64_t v5;
  uint64_t v6;

  v2 = *(_QWORD *)(a2 + 8);
  v3 = *(_DWORD *)(*(_QWORD *)v2 + 284);
  if (*(_DWORD *)(a1 + 16) < v3)
    v3 = *(_DWORD *)(a1 + 16);
  if (v3 <= 1)
    v4 = 1;
  else
    v4 = v3;
  v5 = *(unsigned int *)(a1 + 8);
  v6 = *(_QWORD *)(a1 + 32) + 24 * v5;
  *(_DWORD *)v6 = *(_DWORD *)a2;
  *(_QWORD *)(v6 + 8) = v2;
  *(_DWORD *)(v6 + 16) = v4;
  *(_BYTE *)(v6 + 20) = 0;
  *(_DWORD *)(a1 + 8) = (*(_DWORD *)(a1 + 8) + v4)
                      % (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(_QWORD *)(a1 + 40) - *(_QWORD *)(a1 + 32)) >> 3));
  *(_DWORD *)(a1 + 20) -= v4;
  return v5;
}

uint64_t llvm::mca::RetireControlUnit::getCurrentToken(llvm::mca::RetireControlUnit *this)
{
  return *((_QWORD *)this + 4) + 24 * *((unsigned int *)this + 3);
}

unint64_t llvm::mca::RetireControlUnit::computeNextSlotIdx(llvm::mca::RetireControlUnit *this)
{
  unsigned int v1;
  uint64_t v2;
  unsigned int v3;

  v1 = *((_DWORD *)this + 3);
  v2 = *((_QWORD *)this + 4);
  v3 = *(_DWORD *)(v2 + 24 * v1 + 16);
  if (v3 <= 1)
    v3 = 1;
  return (v3 + v1) % (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 5) - v2) >> 3));
}

uint64_t llvm::mca::RetireControlUnit::peekNextToken(llvm::mca::RetireControlUnit *this)
{
  unsigned int v1;
  uint64_t v2;
  unsigned int v3;

  v1 = *((_DWORD *)this + 3);
  v2 = *((_QWORD *)this + 4);
  v3 = *(_DWORD *)(v2 + 24 * v1 + 16);
  if (v3 <= 1)
    v3 = 1;
  return v2 + 24 * ((v3 + v1) % (0xAAAAAAAAAAAAAAABLL * ((*((_QWORD *)this + 5) - v2) >> 3)));
}

uint64_t llvm::mca::RetireControlUnit::consumeCurrentToken(uint64_t this)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  int v6;

  v1 = *(_DWORD *)(this + 12);
  v2 = *(_QWORD *)(this + 32);
  v3 = *(_QWORD *)(this + 40);
  v4 = v2 + 24 * v1;
  *(_DWORD *)(*(_QWORD *)(v4 + 8) + 544) = 6;
  v5 = *(_DWORD *)(v4 + 16);
  if (v5 <= 1)
    v6 = 1;
  else
    v6 = *(_DWORD *)(v4 + 16);
  *(_DWORD *)(this + 12) = (v6 + v1) % (0xAAAAAAAAAAAAAAABLL * ((v3 - v2) >> 3));
  *(_DWORD *)(this + 20) += v5;
  *(_DWORD *)v4 = 0;
  *(_QWORD *)(v4 + 8) = 0;
  *(_DWORD *)(v4 + 16) = 0;
  *(_BYTE *)(v4 + 20) = 0;
  return this;
}

uint64_t llvm::mca::RetireControlUnit::onInstructionExecuted(uint64_t this, unsigned int a2)
{
  *(_BYTE *)(*(_QWORD *)(this + 32) + 24 * a2 + 20) = 1;
  return this;
}

_QWORD *sub_1C5978824(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E8184898;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1C5978860(_QWORD *a1)
{
  void *v2;

  *a1 = &off_1E8184898;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C59788AC(char **a1, unint64_t a2)
{
  char *v4;
  char *v5;
  char *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  char *v15;
  __int128 v16;

  v5 = a1[1];
  v4 = a1[2];
  if (0xAAAAAAAAAAAAAAABLL * ((v4 - v5) >> 3) >= a2)
  {
    if (a2)
    {
      bzero(a1[1], 24 * ((24 * a2 - 24) / 0x18) + 24);
      v5 += 24 * a2;
    }
    a1[1] = v5;
  }
  else
  {
    v6 = *a1;
    v7 = 0xAAAAAAAAAAAAAAABLL * ((v5 - *a1) >> 3);
    v8 = v7 + a2;
    if (v7 + a2 > 0xAAAAAAAAAAAAAAALL)
      abort();
    v9 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v6) >> 3);
    if (2 * v9 > v8)
      v8 = 2 * v9;
    if (v9 >= 0x555555555555555)
      v10 = 0xAAAAAAAAAAAAAAALL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 > 0xAAAAAAAAAAAAAAALL)
        sub_1C4764EE4();
      v11 = (char *)operator new(24 * v10);
    }
    else
    {
      v11 = 0;
    }
    v12 = &v11[24 * v7];
    v13 = &v11[24 * v10];
    v14 = 3 * a2;
    bzero(v12, 24 * ((8 * v14 - 24) / 0x18uLL) + 24);
    v15 = &v12[8 * v14];
    if (v5 != v6)
    {
      do
      {
        v16 = *(_OWORD *)(v5 - 24);
        *((_QWORD *)v12 - 1) = *((_QWORD *)v5 - 1);
        *(_OWORD *)(v12 - 24) = v16;
        v12 -= 24;
        v5 -= 24;
      }
      while (v5 != v6);
      v5 = *a1;
    }
    *a1 = v12;
    a1[1] = v15;
    a1[2] = v13;
    if (v5)
      operator delete(v5);
  }
}

_QWORD *llvm::mca::Scheduler::initializeStrategy(uint64_t a1, _QWORD **a2)
{
  _QWORD *result;
  uint64_t v4;

  result = *a2;
  if (*a2)
  {
    *a2 = 0;
  }
  else
  {
    result = (_QWORD *)operator new();
    *result = &off_1E81848E0;
  }
  v4 = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = result;
  if (v4)
    return (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return result;
}

void llvm::mca::DefaultSchedulerStrategy::~DefaultSchedulerStrategy(llvm::mca::DefaultSchedulerStrategy *this)
{
  JUMPOUT(0x1CAA32FC0);
}

uint64_t llvm::mca::Scheduler::isAvailable(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v3 = *(_QWORD *)(a1 + 24);
  v4 = *(_QWORD *)(*(_QWORD *)(a2 + 8) + 560);
  if ((*(_QWORD *)(v3 + 344) & v4) != 0)
  {
    *(_BYTE *)(a1 + 140) = 1;
    return 4;
  }
  else
  {
    v6 = v4 & ~*(_QWORD *)(v3 + 336);
    *(_BYTE *)(a1 + 140) = v6 != 0;
    if (v6)
    {
      return 3;
    }
    else
    {
      result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8));
      *(_BYTE *)(a1 + 140) = (_DWORD)result != 0;
    }
  }
  return result;
}

void llvm::mca::Scheduler::issueInstructionImpl(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unint64_t v10;
  _OWORD *v11;
  _OWORD *v12;
  _OWORD *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  int v20;

  v5 = *(_QWORD *)(a2 + 8);
  llvm::mca::ResourceManager::issueInstruction(*(_QWORD *)(a1 + 24), *(_QWORD *)v5, a3);
  llvm::mca::Instruction::execute(v5, *(_DWORD *)a2);
  llvm::mca::Instruction::computeCriticalRegDep((llvm::mca::Instruction *)v5);
  if ((*(_BYTE *)(v5 + 540) & 0xC) != 0)
  {
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), a2);
    v6 = *(_QWORD *)(a1 + 8);
    v20 = *(_DWORD *)(v5 + 556);
    v7 = *((_QWORD *)sub_1C4A1156C((uint64_t *)(v6 + 32), &v20) + 1);
    v8 = *(_QWORD *)(v7 + 120);
    *(_DWORD *)(v5 + 588) = *(_DWORD *)(v7 + 128);
    *(_QWORD *)(v5 + 580) = v8;
  }
  v9 = *(_DWORD *)(v5 + 544);
  if (v9 == 5)
  {
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8), a2);
  }
  else if (v9 == 4)
  {
    v11 = *(_OWORD **)(a1 + 112);
    v10 = *(_QWORD *)(a1 + 120);
    if ((unint64_t)v11 >= v10)
    {
      v13 = *(_OWORD **)(a1 + 104);
      v14 = v11 - v13;
      v15 = v14 + 1;
      if ((unint64_t)(v14 + 1) >> 60)
        abort();
      v16 = v10 - (_QWORD)v13;
      if (v16 >> 3 > v15)
        v15 = v16 >> 3;
      if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0)
        v17 = 0xFFFFFFFFFFFFFFFLL;
      else
        v17 = v15;
      if (v17)
      {
        if (v17 >> 60)
          sub_1C4764EE4();
        v18 = (char *)operator new(16 * v17);
      }
      else
      {
        v18 = 0;
      }
      v19 = &v18[16 * v14];
      *(_OWORD *)v19 = *(_OWORD *)a2;
      v12 = v19 + 16;
      if (v11 != v13)
      {
        do
        {
          *((_OWORD *)v19 - 1) = *(v11 - 1);
          v19 -= 16;
          --v11;
        }
        while (v11 != v13);
        v11 = *(_OWORD **)(a1 + 104);
      }
      *(_QWORD *)(a1 + 104) = v19;
      *(_QWORD *)(a1 + 112) = v12;
      *(_QWORD *)(a1 + 120) = &v18[16 * v17];
      if (v11)
        operator delete(v11);
    }
    else
    {
      *v11 = *(_OWORD *)a2;
      v12 = v11 + 1;
    }
    *(_QWORD *)(a1 + 112) = v12;
  }
}

void llvm::mca::Scheduler::issueInstruction(_QWORD *a1, uint64_t a2, uint64_t a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  uint64_t v13;
  int v14;
  int v15;
  uint64_t v16;
  _DWORD *v17;
  _BOOL4 v18;
  int v19;
  int v20;

  v10 = *(_QWORD *)(a2 + 8);
  v11 = *(unsigned int *)(v10 + 24);
  if ((_DWORD)v11)
  {
    v12 = (_DWORD *)(*(_QWORD *)(v10 + 16) + 64);
    v13 = 136 * v11;
    while (1)
    {
      v14 = *((_QWORD *)v12 - 4) ? -1 : 0;
      if (*v12 != v14)
        break;
      v12 += 34;
      v13 -= 136;
      if (!v13)
        goto LABEL_8;
    }
    v15 = 1;
  }
  else
  {
LABEL_8:
    v15 = 0;
  }
  v18 = (*(_BYTE *)(v10 + 540) & 0xC) != 0
     && (v16 = a1[1],
         v20 = *(_DWORD *)(v10 + 556),
         v17 = (_DWORD *)*((_QWORD *)sub_1C4A1156C((uint64_t *)(v16 + 32), &v20) + 1),
         v17[3] != v17[5])
     && v17[8] + (unint64_t)v17[20] != 0;
  v19 = v18 | v15;
  llvm::mca::ResourceManager::releaseBuffers(a1[3], *(_QWORD *)(v10 + 560));
  llvm::mca::Scheduler::issueInstructionImpl((uint64_t)a1, a2, a3);
  if (v19)
  {
    if (llvm::mca::Scheduler::promoteToPendingSet(a1, a4))
      llvm::mca::Scheduler::promoteToReadySet(a1, a5);
  }
}

BOOL llvm::mca::Scheduler::promoteToPendingSet(_QWORD *a1, _DWORD *a2)
{
  void **v3;
  uint64_t *v4;
  uint64_t *v5;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  unint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t *v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int v30;

  v4 = (uint64_t *)a1[4];
  v5 = (uint64_t *)a1[5];
  v3 = (void **)(a1 + 4);
  if (v4 == v5)
  {
    v7 = 0;
    v26 = a1[4];
  }
  else
  {
    v7 = 0;
    do
    {
      v8 = v4[1];
      if (!v8)
        break;
      if (*(_DWORD *)(v8 + 544) == 1
        && (llvm::mca::Instruction::updateDispatched((llvm::mca::Instruction *)v4[1]) & 1) == 0
        || (*(_BYTE *)(v8 + 540) & 0xC) != 0
        && (v9 = a1[1],
            v30 = *(_DWORD *)(v4[1] + 556),
            v10 = sub_1C4A1156C((uint64_t *)(v9 + 32), &v30),
            **((_DWORD **)v10 + 1) > (*(_DWORD *)(*((_QWORD *)v10 + 1) + 8)
                                                  + *(_DWORD *)(*((_QWORD *)v10 + 1) + 4))))
      {
        v4 += 2;
      }
      else
      {
        v11 = a2[2];
        if (v11 >= a2[3])
        {
          sub_1C4F76720(a2, *v4, v4[1]);
        }
        else
        {
          *(_OWORD *)(*(_QWORD *)a2 + 16 * v11) = *(_OWORD *)v4;
          ++a2[2];
        }
        v13 = (_OWORD *)a1[8];
        v12 = a1[9];
        if ((unint64_t)v13 >= v12)
        {
          v15 = (_OWORD *)a1[7];
          v16 = v13 - v15;
          v17 = v16 + 1;
          if ((unint64_t)(v16 + 1) >> 60)
            abort();
          v18 = v12 - (_QWORD)v15;
          if (v18 >> 3 > v17)
            v17 = v18 >> 3;
          v19 = (unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v17;
          if (v19)
          {
            if (v19 >> 60)
              sub_1C4764EE4();
            v20 = (char *)operator new(16 * v19);
          }
          else
          {
            v20 = 0;
          }
          v21 = &v20[16 * v16];
          *(_OWORD *)v21 = *(_OWORD *)v4;
          v22 = v21;
          if (v13 != v15)
          {
            do
            {
              *((_OWORD *)v22 - 1) = *(v13 - 1);
              v22 -= 16;
              --v13;
            }
            while (v13 != v15);
            v13 = (_OWORD *)a1[7];
          }
          v23 = &v20[16 * v19];
          v14 = v21 + 16;
          a1[7] = v22;
          a1[8] = v21 + 16;
          a1[9] = v23;
          if (v13)
            operator delete(v13);
        }
        else
        {
          *v13 = *(_OWORD *)v4;
          v14 = v13 + 1;
        }
        a1[8] = v14;
        v4[1] = 0;
        v24 = &v5[-2 * ++v7];
        v25 = *(_DWORD *)v4;
        *(_DWORD *)v4 = *(_DWORD *)v24;
        v4[1] = v24[1];
        *(_DWORD *)v24 = v25;
        v24[1] = 0;
      }
    }
    while (v4 != v5);
    v4 = (uint64_t *)a1[4];
    v26 = a1[5];
  }
  v27 = (v26 - (uint64_t)v4) >> 4;
  v28 = v27 - v7;
  if (v27 >= v7)
  {
    if (v27 > v28)
      a1[5] = &v4[2 * v28];
  }
  else
  {
    sub_1C5979BD8(v3, -(uint64_t)v7);
  }
  return v7 != 0;
}

BOOL llvm::mca::Scheduler::promoteToReadySet(_QWORD *a1, _DWORD *a2)
{
  void **v3;
  uint64_t *v4;
  uint64_t *v5;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  unint64_t v12;
  _OWORD *v13;
  _OWORD *v14;
  _OWORD *v15;
  uint64_t v16;
  unint64_t v17;
  uint64_t v18;
  unint64_t v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  uint64_t *v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  unint64_t v28;
  int v30;

  v4 = (uint64_t *)a1[7];
  v5 = (uint64_t *)a1[8];
  v3 = (void **)(a1 + 7);
  if (v4 == v5)
  {
    v7 = 0;
    v26 = a1[7];
  }
  else
  {
    v7 = 0;
    do
    {
      v8 = v4[1];
      if (!v8)
        break;
      if ((*(_DWORD *)(v8 + 544) == 3
         || (llvm::mca::Instruction::updatePending((llvm::mca::Instruction *)v4[1]) & 1) != 0)
        && ((*(_BYTE *)(v8 + 540) & 0xC) == 0
         || (v9 = a1[1],
             v30 = *(_DWORD *)(v4[1] + 556),
             v10 = sub_1C4A1156C((uint64_t *)(v9 + 32), &v30),
             *(_DWORD *)(*((_QWORD *)v10 + 1) + 8) == **((_DWORD **)v10 + 1))))
      {
        v11 = a2[2];
        if (v11 >= a2[3])
        {
          sub_1C4F76720(a2, *v4, v4[1]);
        }
        else
        {
          *(_OWORD *)(*(_QWORD *)a2 + 16 * v11) = *(_OWORD *)v4;
          ++a2[2];
        }
        v13 = (_OWORD *)a1[11];
        v12 = a1[12];
        if ((unint64_t)v13 >= v12)
        {
          v15 = (_OWORD *)a1[10];
          v16 = v13 - v15;
          v17 = v16 + 1;
          if ((unint64_t)(v16 + 1) >> 60)
            abort();
          v18 = v12 - (_QWORD)v15;
          if (v18 >> 3 > v17)
            v17 = v18 >> 3;
          v19 = (unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0 ? 0xFFFFFFFFFFFFFFFLL : v17;
          if (v19)
          {
            if (v19 >> 60)
              sub_1C4764EE4();
            v20 = (char *)operator new(16 * v19);
          }
          else
          {
            v20 = 0;
          }
          v21 = &v20[16 * v16];
          *(_OWORD *)v21 = *(_OWORD *)v4;
          v22 = v21;
          if (v13 != v15)
          {
            do
            {
              *((_OWORD *)v22 - 1) = *(v13 - 1);
              v22 -= 16;
              --v13;
            }
            while (v13 != v15);
            v13 = (_OWORD *)a1[10];
          }
          v23 = &v20[16 * v19];
          v14 = v21 + 16;
          a1[10] = v22;
          a1[11] = v21 + 16;
          a1[12] = v23;
          if (v13)
            operator delete(v13);
        }
        else
        {
          *v13 = *(_OWORD *)v4;
          v14 = v13 + 1;
        }
        a1[11] = v14;
        v4[1] = 0;
        v24 = &v5[-2 * ++v7];
        v25 = *(_DWORD *)v4;
        *(_DWORD *)v4 = *(_DWORD *)v24;
        v4[1] = v24[1];
        *(_DWORD *)v24 = v25;
        v24[1] = 0;
      }
      else
      {
        v4 += 2;
      }
    }
    while (v4 != v5);
    v4 = (uint64_t *)a1[7];
    v26 = a1[8];
  }
  v27 = (v26 - (uint64_t)v4) >> 4;
  v28 = v27 - v7;
  if (v27 >= v7)
  {
    if (v27 > v28)
      a1[8] = &v4[2 * v28];
  }
  else
  {
    sub_1C5979BD8(v3, -(uint64_t)v7);
  }
  return v7 != 0;
}

uint64_t llvm::mca::Scheduler::select(llvm::mca::Scheduler *this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t result;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;

  v3 = *((_QWORD *)this + 10);
  v2 = *((_QWORD *)this + 11);
  v4 = v2 - v3;
  if (((unint64_t)(v2 - v3) >> 4))
  {
    v5 = 0;
    v6 = ((unint64_t)v4 >> 4);
    v7 = 8;
    v8 = v6;
    do
    {
      v9 = *((_QWORD *)this + 10);
      if (v8 == (*((_QWORD *)this + 11) - v9) >> 4
        || (*(unsigned int (**)(_QWORD, uint64_t, uint64_t))(**((_QWORD **)this + 2) + 16))(*((_QWORD *)this + 2), v9 + v7 - 8, v9 + 16 * v8))
      {
        v10 = *(uint64_t **)(v9 + v7);
        v11 = llvm::mca::ResourceManager::checkAvailability(*((_QWORD **)this + 3), *v10);
        if (v11)
          v10[74] = v11;
        else
          v8 = v5;
        *((_QWORD *)this + 16) |= v11;
      }
      ++v5;
      v7 += 16;
    }
    while (v6 != v5);
    v3 = *((_QWORD *)this + 10);
    v2 = *((_QWORD *)this + 11);
    v4 = v2 - v3;
  }
  else
  {
    v8 = 0;
  }
  v12 = v4 >> 4;
  if (v12 == v8)
    return 0;
  v14 = (uint64_t *)(v3 + 16 * v8);
  result = *v14;
  v15 = v14[1];
  v16 = v3 + 16 * v12;
  *(_DWORD *)v14 = *(_DWORD *)(v16 - 16);
  v14[1] = *(_QWORD *)(v16 - 8);
  *(_DWORD *)(v16 - 16) = result;
  *(_QWORD *)(v16 - 8) = v15;
  *((_QWORD *)this + 11) = v2 - 16;
  return result;
}

void llvm::mca::Scheduler::updateIssuedSet(_QWORD **a1, _DWORD *a2)
{
  void **v3;
  uint64_t *v4;
  uint64_t *v5;
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  int v11;
  char *v12;
  unint64_t v13;
  unint64_t v14;

  v4 = a1[13];
  v5 = a1[14];
  v3 = (void **)(a1 + 13);
  if (v4 == v5)
  {
    v7 = 0;
    v12 = (char *)a1[13];
  }
  else
  {
    v7 = 0;
    do
    {
      v8 = v4[1];
      if (!v8)
        break;
      if (*(_DWORD *)(v8 + 544) == 5)
      {
        (*(void (**)(_QWORD *, uint64_t *))(*a1[1] + 32))(a1[1], v4);
        v9 = a2[2];
        if (v9 >= a2[3])
        {
          sub_1C4F76720(a2, *v4, v4[1]);
        }
        else
        {
          *(_OWORD *)(*(_QWORD *)a2 + 16 * v9) = *(_OWORD *)v4;
          ++a2[2];
        }
        ++v7;
        v4[1] = 0;
        v10 = &v5[-2 * v7];
        v11 = *(_DWORD *)v4;
        *(_DWORD *)v4 = *(_DWORD *)v10;
        v4[1] = v10[1];
        *(_DWORD *)v10 = v11;
        v10[1] = 0;
      }
      else
      {
        v4 += 2;
      }
    }
    while (v4 != v5);
    v4 = a1[13];
    v12 = (char *)a1[14];
  }
  v13 = (v12 - (char *)v4) >> 4;
  v14 = v13 - v7;
  if (v13 >= v7)
  {
    if (v13 > v14)
      a1[14] = &v4[2 * v14];
  }
  else
  {
    sub_1C5979BD8(v3, -(uint64_t)v7);
  }
}

uint64_t llvm::mca::Scheduler::analyzeResourcePressure(uint64_t a1, uint64_t a2)
{
  sub_1C5979D0C(a2, *(_QWORD *)a2 + 16 * *(unsigned int *)(a2 + 8), *(__int128 **)(a1 + 80), *(__int128 **)(a1 + 88));
  return *(_QWORD *)(a1 + 128);
}

uint64_t llvm::mca::Scheduler::analyzeDataDependencies(uint64_t result, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  int v14;

  v3 = *(_QWORD *)(result + 56);
  v4 = *(_QWORD *)(result + 64) - 16 * *(unsigned int *)(result + 136);
  if (v3 != v4)
  {
    v7 = result;
    do
    {
      v8 = *(_QWORD *)(v3 + 8);
      result = llvm::mca::ResourceManager::checkAvailability(*(_QWORD **)(v7 + 24), *(_QWORD *)v8);
      if (!result)
      {
        if ((*(_BYTE *)(v8 + 540) & 0xC) != 0)
        {
          v9 = *(_QWORD *)(v7 + 8);
          v14 = *(_DWORD *)(v8 + 556);
          result = (uint64_t)sub_1C4A1156C((uint64_t *)(v9 + 32), &v14);
          v10 = *(_DWORD **)(result + 8);
          v11 = v10[1];
          if (v11)
          {
            if (v10[2] + v11 == *v10)
            {
              v12 = *(unsigned int *)(a3 + 8);
              if (v12 >= *(_DWORD *)(a3 + 12))
              {
                result = sub_1C5979F58(a3, (__int128 *)v3);
              }
              else
              {
                *(_OWORD *)(*(_QWORD *)a3 + 16 * v12) = *(_OWORD *)v3;
                ++*(_DWORD *)(a3 + 8);
              }
            }
          }
        }
        if (*(_DWORD *)(v8 + 544) == 2)
        {
          v13 = *(unsigned int *)(a2 + 8);
          if (v13 >= *(_DWORD *)(a2 + 12))
          {
            result = sub_1C5979F58(a2, (__int128 *)v3);
          }
          else
          {
            *(_OWORD *)(*(_QWORD *)a2 + 16 * v13) = *(_OWORD *)v3;
            ++*(_DWORD *)(a2 + 8);
          }
        }
      }
      v3 += 16;
    }
    while (v3 != v4);
  }
  return result;
}

BOOL llvm::mca::Scheduler::cycleEvent(uint64_t a1, uint64_t a2, _DWORD *a3, _DWORD *a4, _DWORD *a5)
{
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BOOL8 result;

  (*(void (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 56))(*(_QWORD *)(a1 + 8));
  llvm::mca::ResourceManager::cycleEvent(*(_QWORD *)(a1 + 24), a2);
  v10 = *(_QWORD *)(a1 + 104);
  v11 = *(_QWORD *)(a1 + 112);
  while (v10 != v11)
  {
    llvm::mca::Instruction::cycleEvent(*(_QWORD *)(v10 + 8));
    v10 += 16;
  }
  llvm::mca::Scheduler::updateIssuedSet((_QWORD **)a1, a3);
  v12 = *(_QWORD *)(a1 + 56);
  v13 = *(_QWORD *)(a1 + 64);
  while (v12 != v13)
  {
    llvm::mca::Instruction::cycleEvent(*(_QWORD *)(v12 + 8));
    v12 += 16;
  }
  v14 = *(_QWORD *)(a1 + 32);
  v15 = *(_QWORD *)(a1 + 40);
  while (v14 != v15)
  {
    llvm::mca::Instruction::cycleEvent(*(_QWORD *)(v14 + 8));
    v14 += 16;
  }
  llvm::mca::Scheduler::promoteToPendingSet((_QWORD *)a1, a4);
  result = llvm::mca::Scheduler::promoteToReadySet((_QWORD *)a1, a5);
  *(_DWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  return result;
}

uint64_t llvm::mca::Scheduler::mustIssueImmediately(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  _BOOL4 v3;

  v2 = **(_QWORD **)(a2 + 8);
  if (*(_DWORD *)(v2 + 280))
    v3 = 0;
  else
    v3 = *(_DWORD *)(v2 + 144) == 0;
  return (v3 | *(unsigned __int8 *)(v2 + 292)) & 1;
}

uint64_t llvm::mca::Scheduler::dispatch(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  int *v7;
  unint64_t v8;
  _OWORD *v9;
  _OWORD *v10;
  _OWORD *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  char *v16;
  unint64_t v17;
  _OWORD *v18;
  _OWORD *v19;
  uint64_t v20;
  _DWORD *v21;
  int v22;
  uint64_t v23;
  BOOL v24;
  char *v25;
  uint64_t result;
  _OWORD *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  unint64_t v33;
  _OWORD *v34;
  _OWORD *v35;
  char *v36;
  _OWORD *v37;
  uint64_t v38;
  unint64_t v39;
  uint64_t v40;
  unint64_t v41;
  char *v42;
  char *v43;
  int v44;
  int v45;

  v4 = *(_QWORD *)(a2 + 8);
  llvm::mca::ResourceManager::reserveBuffers(*(_QWORD **)(a1 + 24), *(_QWORD *)(v4 + 560));
  if ((*(_BYTE *)(v4 + 540) & 0xC) != 0)
    *(_DWORD *)(v4 + 556) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8), a2);
  v5 = *(_DWORD *)(v4 + 544);
  if (v5 == 1)
  {
LABEL_6:
    v9 = *(_OWORD **)(a1 + 40);
    v8 = *(_QWORD *)(a1 + 48);
    if ((unint64_t)v9 < v8)
    {
      *v9 = *(_OWORD *)a2;
      v10 = v9 + 1;
LABEL_32:
      result = 0;
      *(_QWORD *)(a1 + 40) = v10;
      return result;
    }
    v11 = *(_OWORD **)(a1 + 32);
    v12 = v9 - v11;
    v13 = v12 + 1;
    if (!((unint64_t)(v12 + 1) >> 60))
    {
      v14 = v8 - (_QWORD)v11;
      if (v14 >> 3 > v13)
        v13 = v14 >> 3;
      if ((unint64_t)v14 >= 0x7FFFFFFFFFFFFFF0)
        v15 = 0xFFFFFFFFFFFFFFFLL;
      else
        v15 = v13;
      if (!v15)
      {
        v16 = 0;
        goto LABEL_27;
      }
      if (!(v15 >> 60))
      {
        v16 = (char *)operator new(16 * v15);
LABEL_27:
        v25 = &v16[16 * v12];
        *(_OWORD *)v25 = *(_OWORD *)a2;
        v10 = v25 + 16;
        if (v9 != v11)
        {
          do
          {
            *((_OWORD *)v25 - 1) = *(v9 - 1);
            v25 -= 16;
            --v9;
          }
          while (v9 != v11);
          v9 = *(_OWORD **)(a1 + 32);
        }
        *(_QWORD *)(a1 + 32) = v25;
        *(_QWORD *)(a1 + 40) = v10;
        *(_QWORD *)(a1 + 48) = &v16[16 * v15];
        if (v9)
          operator delete(v9);
        goto LABEL_32;
      }
LABEL_72:
      sub_1C4764EE4();
    }
LABEL_71:
    abort();
  }
  if ((*(_BYTE *)(v4 + 540) & 0xC) != 0)
  {
    v6 = *(_QWORD *)(a1 + 8);
    v44 = *(_DWORD *)(*(_QWORD *)(a2 + 8) + 556);
    v7 = sub_1C4A1156C((uint64_t *)(v6 + 32), &v44);
    if (**((_DWORD **)v7 + 1) > (*(_DWORD *)(*((_QWORD *)v7 + 1) + 8)
                                              + *(_DWORD *)(*((_QWORD *)v7 + 1) + 4)))
      goto LABEL_6;
    v5 = *(_DWORD *)(v4 + 544);
  }
  if (v5 == 2
    || (*(_BYTE *)(v4 + 540) & 0xC) != 0
    && (v20 = *(_QWORD *)(a1 + 8),
        v45 = *(_DWORD *)(*(_QWORD *)(a2 + 8) + 556),
        v21 = (_DWORD *)*((_QWORD *)sub_1C4A1156C((uint64_t *)(v20 + 32), &v45) + 1),
        (v22 = v21[1]) != 0)
    && v21[2] + v22 == *v21)
  {
    v18 = *(_OWORD **)(a1 + 64);
    v17 = *(_QWORD *)(a1 + 72);
    if ((unint64_t)v18 >= v17)
    {
      v27 = *(_OWORD **)(a1 + 56);
      v28 = v18 - v27;
      v29 = v28 + 1;
      if ((unint64_t)(v28 + 1) >> 60)
        goto LABEL_71;
      v30 = v17 - (_QWORD)v27;
      if (v30 >> 3 > v29)
        v29 = v30 >> 3;
      if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0)
        v31 = 0xFFFFFFFFFFFFFFFLL;
      else
        v31 = v29;
      if (v31)
      {
        if (v31 >> 60)
          goto LABEL_72;
        v32 = (char *)operator new(16 * v31);
      }
      else
      {
        v32 = 0;
      }
      v36 = &v32[16 * v28];
      *(_OWORD *)v36 = *(_OWORD *)a2;
      v19 = v36 + 16;
      if (v18 != v27)
      {
        do
        {
          *((_OWORD *)v36 - 1) = *(v18 - 1);
          v36 -= 16;
          --v18;
        }
        while (v18 != v27);
        v18 = *(_OWORD **)(a1 + 56);
      }
      *(_QWORD *)(a1 + 56) = v36;
      *(_QWORD *)(a1 + 64) = v19;
      *(_QWORD *)(a1 + 72) = &v32[16 * v31];
      if (v18)
        operator delete(v18);
    }
    else
    {
      *v18 = *(_OWORD *)a2;
      v19 = v18 + 1;
    }
    result = 0;
    *(_QWORD *)(a1 + 64) = v19;
    ++*(_DWORD *)(a1 + 136);
  }
  else
  {
    v23 = **(_QWORD **)(a2 + 8);
    if (*(_DWORD *)(v23 + 280))
      v24 = 0;
    else
      v24 = *(_DWORD *)(v23 + 144) == 0;
    result = 1;
    if (!v24 && (*(_BYTE *)(v23 + 292) & 1) == 0)
    {
      v34 = *(_OWORD **)(a1 + 88);
      v33 = *(_QWORD *)(a1 + 96);
      if ((unint64_t)v34 >= v33)
      {
        v37 = *(_OWORD **)(a1 + 80);
        v38 = v34 - v37;
        v39 = v38 + 1;
        if ((unint64_t)(v38 + 1) >> 60)
          goto LABEL_71;
        v40 = v33 - (_QWORD)v37;
        if (v40 >> 3 > v39)
          v39 = v40 >> 3;
        if ((unint64_t)v40 >= 0x7FFFFFFFFFFFFFF0)
          v41 = 0xFFFFFFFFFFFFFFFLL;
        else
          v41 = v39;
        if (v41)
        {
          if (v41 >> 60)
            goto LABEL_72;
          v42 = (char *)operator new(16 * v41);
        }
        else
        {
          v42 = 0;
        }
        v43 = &v42[16 * v38];
        *(_OWORD *)v43 = *(_OWORD *)a2;
        v35 = v43 + 16;
        if (v34 != v37)
        {
          do
          {
            *((_OWORD *)v43 - 1) = *(v34 - 1);
            v43 -= 16;
            --v34;
          }
          while (v34 != v37);
          v34 = *(_OWORD **)(a1 + 80);
        }
        *(_QWORD *)(a1 + 80) = v43;
        *(_QWORD *)(a1 + 88) = v35;
        *(_QWORD *)(a1 + 96) = &v42[16 * v41];
        if (v34)
          operator delete(v34);
      }
      else
      {
        *v34 = *(_OWORD *)a2;
        v35 = v34 + 1;
      }
      *(_QWORD *)(a1 + 88) = v35;
      return 1;
    }
  }
  return result;
}

BOOL sub_1C5979B20(uint64_t a1, int *a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  _DWORD *v7;
  unsigned int v8;
  unsigned int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  _DWORD *v14;
  int v15;
  int v16;
  _BOOL4 v17;
  BOOL v18;
  _BOOL4 v19;

  v3 = *((_QWORD *)a2 + 1);
  v4 = *(unsigned int *)(v3 + 24);
  if ((_DWORD)v4)
  {
    v5 = 0;
    v6 = 136 * v4;
    v7 = (_DWORD *)(*(_QWORD *)(v3 + 16) + 64);
    do
    {
      v5 += *v7;
      if (*((_QWORD *)v7 - 4))
        ++v5;
      v7 += 34;
      v6 -= 136;
    }
    while (v6);
  }
  else
  {
    v5 = 0;
  }
  v8 = *a2;
  v9 = *a3;
  v10 = *((_QWORD *)a3 + 1);
  v11 = *(unsigned int *)(v10 + 24);
  if ((_DWORD)v11)
  {
    v12 = 0;
    v13 = 136 * v11;
    v14 = (_DWORD *)(*(_QWORD *)(v10 + 16) + 64);
    do
    {
      v12 += *v14;
      if (*((_QWORD *)v14 - 4))
        ++v12;
      v14 += 34;
      v13 -= 136;
    }
    while (v13);
  }
  else
  {
    v12 = 0;
  }
  v15 = v8 - v5;
  v16 = v9 - v12;
  v17 = v8 < v9;
  v18 = v15 == v16;
  v19 = v15 < v16;
  if (v18)
    return v17;
  else
    return v19;
}

void sub_1C5979BD8(void **a1, unint64_t a2)
{
  _BYTE *v4;
  char *v5;
  char *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  void *v18;

  v5 = (char *)a1[1];
  v4 = a1[2];
  if (a2 <= (v4 - v5) >> 4)
  {
    v12 = &v5[16 * a2];
    do
    {
      *(_DWORD *)v5 = 0;
      *((_QWORD *)v5 + 1) = 0;
      v5 += 16;
    }
    while (v5 != v12);
    a1[1] = v12;
  }
  else
  {
    v6 = (char *)*a1;
    v7 = v5 - (_BYTE *)*a1;
    v8 = a2 + (v7 >> 4);
    if (v8 >> 60)
      abort();
    v9 = v4 - v6;
    if (v9 >> 3 > v8)
      v8 = v9 >> 3;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF0)
      v10 = 0xFFFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10)
    {
      if (v10 >> 60)
        sub_1C4764EE4();
      v11 = (char *)operator new(16 * v10);
    }
    else
    {
      v11 = 0;
    }
    v13 = &v11[16 * (v7 >> 4)];
    v14 = &v13[16 * a2];
    v15 = v13;
    do
    {
      *(_DWORD *)v15 = 0;
      *((_QWORD *)v15 + 1) = 0;
      v15 += 16;
    }
    while (v15 != v14);
    v16 = &v11[16 * v10];
    if (v5 == v6)
    {
      v17 = &v11[16 * (v7 >> 4)];
    }
    else
    {
      do
      {
        v17 = v13 - 16;
        *((_OWORD *)v13 - 1) = *((_OWORD *)v5 - 1);
        v5 -= 16;
        v13 -= 16;
      }
      while (v5 != v6);
    }
    v18 = *a1;
    *a1 = v17;
    a1[1] = v14;
    a1[2] = v16;
    if (v18)
      operator delete(v18);
  }
}

char *sub_1C5979D0C(uint64_t a1, uint64_t a2, __int128 *a3, __int128 *a4)
{
  __int128 *v5;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  char *v16;
  char *v17;
  unint64_t v18;
  unsigned int v19;
  char *v20;
  __int128 v21;
  _OWORD *v22;
  __int128 v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  _OWORD *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;

  v5 = a3;
  v7 = *(_QWORD *)a1;
  v8 = (a2 - *(_QWORD *)a1) >> 4;
  v10 = *(unsigned int *)(a1 + 8);
  v9 = *(unsigned int *)(a1 + 12);
  v11 = *(_DWORD *)(a1 + 8);
  v12 = (char *)a4 - (char *)a3;
  v13 = v10 + a4 - a3;
  if (*(_QWORD *)a1 + 16 * v10 == a2)
  {
    if (v13 > v9)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v13, 16);
      v10 = *(unsigned int *)(a1 + 8);
      v7 = *(_QWORD *)a1;
      v11 = *(_DWORD *)(a1 + 8);
    }
    if (v5 != a4)
    {
      v22 = (_OWORD *)(v7 + 16 * v10);
      do
      {
        v23 = *v5++;
        *v22++ = v23;
      }
      while (v5 != a4);
      v11 = *(_DWORD *)(a1 + 8);
      v7 = *(_QWORD *)a1;
    }
    *(_DWORD *)(a1 + 8) = v11 + ((unint64_t)v12 >> 4);
    return (char *)(v7 + 16 * v8);
  }
  else
  {
    v14 = v12 >> 4;
    if (v13 > v9)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v13, 16);
      v7 = *(_QWORD *)a1;
      v10 = *(unsigned int *)(a1 + 8);
      v11 = *(_DWORD *)(a1 + 8);
    }
    v15 = v8;
    v16 = (char *)(v7 + 16 * v8);
    v17 = (char *)(v7 + 16 * v10);
    v18 = (v17 - v16) >> 4;
    if (v18 >= v14)
    {
      v24 = v15;
      v25 = v14 + v11;
      if (v25 <= *(unsigned int *)(a1 + 12))
      {
        v26 = v11;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v25, 16);
        v26 = *(unsigned int *)(a1 + 8);
        v11 = *(_DWORD *)(a1 + 8);
      }
      if (a4 != v5)
      {
        v27 = (_OWORD *)(*(_QWORD *)a1 + 16 * v26);
        v28 = -16 * v14;
        do
        {
          *v27++ = *(_OWORD *)&v17[v28];
          v28 += 16;
        }
        while (v28);
        v11 = *(_DWORD *)(a1 + 8);
      }
      *(_DWORD *)(a1 + 8) = v11 + v14;
      if (&v17[-16 * v14] != v16)
      {
        v29 = 16 * v10;
        v30 = v7 - 16 * v14;
        v31 = 16 * v14 + 16 * v24;
        do
        {
          v32 = v7 + v29;
          *(_DWORD *)(v32 - 16) = *(_DWORD *)(v30 + v29 - 16);
          *(_QWORD *)(v32 - 8) = *(_QWORD *)(v30 + v29 - 8);
          v7 -= 16;
          v30 -= 16;
          v31 += 16;
        }
        while (v29 != v31);
      }
      if (v5 != a4)
      {
        v33 = v16;
        do
        {
          *(_DWORD *)v33 = *(_DWORD *)v5;
          *((_QWORD *)v33 + 1) = *((_QWORD *)v5++ + 1);
          v33 += 16;
        }
        while (v5 != a4);
      }
    }
    else
    {
      v19 = v11 + ((unint64_t)v12 >> 4);
      *(_DWORD *)(a1 + 8) = v19;
      if (v15 != v10)
      {
        memcpy((void *)(v7 + 16 * v19 - 16 * v18), v16, v17 - v16);
        v20 = v16;
        do
        {
          *(_DWORD *)v20 = *(_DWORD *)v5;
          *((_QWORD *)v20 + 1) = *((_QWORD *)v5++ + 1);
          v20 += 16;
          --v18;
        }
        while (v18);
      }
      while (v5 != a4)
      {
        v21 = *v5++;
        *(_OWORD *)v17 = v21;
        v17 += 16;
      }
    }
  }
  return v16;
}

uint64_t sub_1C5979F58(uint64_t a1, __int128 *a2)
{
  __int128 v3;
  uint64_t v4;
  unsigned int v5;
  __int128 v7;

  v3 = *a2;
  v4 = *(unsigned int *)(a1 + 8);
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v7 = *a2;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v4 + 1, 16);
    v3 = v7;
    LODWORD(v4) = *(_DWORD *)(a1 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a1 + 16 * v4) = v3;
  v5 = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = v5;
  return *(_QWORD *)a1 + 16 * v5 - 16;
}

uint64_t llvm::mca::InstrBuilder::InstrBuilder(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, char a6)
{
  _QWORD **v7;

  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  *(_QWORD *)(a1 + 24) = a5;
  *(_QWORD *)(a1 + 32) = a1 + 48;
  v7 = (_QWORD **)(a1 + 32);
  *(_QWORD *)(a1 + 40) = 0x800000000;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_DWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 144) = 0;
  *(_DWORD *)(a1 + 152) = 0;
  *(_WORD *)(a1 + 160) = 257;
  *(_BYTE *)(a1 + 162) = a6;
  sub_1C6154790(a1 + 32, *(unsigned int *)(*(_QWORD *)(a2 + 160) + 48));
  llvm::mca::computeProcResourceMasks(*(_QWORD *)(*(_QWORD *)a1 + 160), *v7);
  return a1;
}

void llvm::mca::InstrBuilder::populateWrites(_QWORD **a1, uint64_t a2, unsigned int *a3, unsigned int a4)
{
  unsigned int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  uint64_t *v17;
  unsigned int *v18;
  unsigned int v19;
  unsigned int v20;
  unint64_t v21;
  unsigned int v22;
  unsigned __int8 *v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  unsigned int v27;
  int v28;
  unint64_t v29;
  unsigned int v30;
  int v31;
  unsigned int v32;
  int v33;
  __int16 *v34;
  int v35;
  int v36;
  uint64_t v37;
  uint64_t v38;
  __int16 *v39;
  int v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  __int16 v44;
  __int16 *v45;
  int v46;
  int v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  uint64_t v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  __int16 **v57;
  uint64_t v59;
  unsigned int v60;
  int v61;

  v7 = *a3;
  v8 = *a1[1];
  v9 = v8 + 48 * *a3;
  v10 = *(_QWORD *)(v9 + 32);
  v57 = (__int16 **)(v9 + 32);
  v11 = *(unsigned __int8 *)(v9 + 4);
  if (v10)
  {
    v12 = -1;
    do
      ++v12;
    while (*(_WORD *)(v10 + 2 * v12));
  }
  else
  {
    v12 = 0;
  }
  v59 = *(_QWORD *)((*a1)[20] + 40);
  v13 = *(unsigned __int16 *)(v59 + 24 * a4 + 16);
  v14 = v8 + 48 * v7;
  v15 = *(_DWORD *)(v14 + 8);
  v14 += 8;
  v60 = a3[6];
  v61 = *(unsigned __int16 *)(v14 - 6);
  v16 = v60 - v61;
  sub_1C597D938(a2, ((v15 >> 2) & 1) + v12 + v11 + v60 - v61);
  v17 = (uint64_t *)v14;
  v18 = a3;
  v19 = *(unsigned __int16 *)(v14 - 6);
  v20 = v19 - 1;
  v21 = a3[6];
  if ((_DWORD)v21 && v11)
  {
    v22 = 0;
    v23 = (unsigned __int8 *)*((_QWORD *)a3 + 2);
    v24 = (_QWORD *)(v8 + 48 * v7 + 40);
    v25 = *(_QWORD *)a2;
    v27 = a4;
    v26 = v59;
    v28 = *(_DWORD *)(a2 + 280);
    v29 = 1;
    v31 = v61;
    v30 = v12 + v11;
    v32 = v60;
    do
    {
      v33 = *v23;
      v23 += 16;
      if (v33 == 1)
      {
        if ((*(_BYTE *)(*v24 + 6 * v22 + 2) & 4) != 0)
        {
          v20 = v22;
        }
        else
        {
          *(_DWORD *)(v25 + 20 * v22) = v29 - 1;
          if (v22 >= v13)
          {
            v36 = 0;
            v35 = v28;
          }
          else
          {
            v34 = (__int16 *)((*a1)[18] + 4 * (v22 + *(unsigned __int16 *)(v59 + 24 * a4 + 14)));
            v35 = *v34;
            if (v35 < 0)
              v35 = *(_DWORD *)(a2 + 280);
            v36 = (unsigned __int16)v34[1];
          }
          v37 = v25 + 20 * v22;
          *(_DWORD *)(v37 + 4) = v35;
          *(_DWORD *)(v37 + 12) = v36;
          *(_BYTE *)(v37 + 16) = 0;
        }
        ++v22;
      }
      if (v29 >= v21)
        break;
      ++v29;
    }
    while (v22 < v11);
  }
  else
  {
    v31 = v61;
    v30 = v12 + v11;
    v32 = v60;
    v27 = a4;
    v26 = v59;
  }
  if (v12)
  {
    v38 = *(_QWORD *)a2;
    v39 = *v57;
    v40 = *(_DWORD *)(a2 + 280);
    v41 = v12;
    v42 = -1;
    do
    {
      v43 = v38 + 20 * v11;
      *(_DWORD *)v43 = v42;
      v44 = *v39++;
      *(_WORD *)(v43 + 8) = v44;
      if (v11 >= v13)
      {
        v47 = 0;
        v46 = v40;
      }
      else
      {
        v45 = (__int16 *)((*a1)[18] + 4 * (v11 + *(unsigned __int16 *)(v26 + 24 * v27 + 14)));
        v46 = *v45;
        if (v46 < 0)
          v46 = *(_DWORD *)(a2 + 280);
        v47 = (unsigned __int16)v45[1];
      }
      v48 = v38 + 20 * v11;
      *(_DWORD *)(v48 + 4) = v46;
      *(_DWORD *)(v48 + 12) = v47;
      *(_BYTE *)(v48 + 16) = 0;
      --v42;
      ++v11;
      --v41;
    }
    while (v41);
  }
  v49 = *v17;
  if ((*v17 & 4) != 0)
  {
    v50 = *(_DWORD *)(a2 + 280);
    v51 = *(_QWORD *)a2 + 20 * v30;
    *(_DWORD *)v51 = v20;
    *(_DWORD *)(v51 + 4) = v50;
    *(_DWORD *)(v51 + 12) = 0;
    *(_BYTE *)(v51 + 16) = 1;
  }
  if (v32 != v31)
  {
    v52 = ((v49 >> 2) & 1) + v30;
    if ((v49 & 0x8000000000) != 0)
    {
      v53 = *((_QWORD *)v18 + 2);
      v54 = *(_QWORD *)a2;
      v55 = *(_DWORD *)(a2 + 280);
      do
      {
        if (*(_BYTE *)(v53 + 16 * v19) == 1)
        {
          v56 = v54 + 20 * v52;
          *(_DWORD *)v56 = v19;
          *(_DWORD *)(v56 + 4) = v55;
          *(_DWORD *)(v56 + 12) = 0;
          *(_BYTE *)(v56 + 16) = 0;
          ++v52;
        }
        ++v19;
        --v16;
      }
      while (v16);
    }
    sub_1C597D938(a2, v52);
  }
}

void llvm::mca::InstrBuilder::populateReads(uint64_t a1, uint64_t a2, unsigned int *a3, unsigned int a4)
{
  uint64_t v6;
  unsigned __int16 *v7;
  int v8;
  int v9;
  unsigned __int8 *v10;
  int v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int v17;
  unsigned int v18;
  int v19;
  unsigned int v20;
  uint64_t *v21;
  unsigned int v22;
  int v23;
  int v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t *v27;
  _DWORD *v28;
  uint64_t v29;
  __int16 *v30;
  uint64_t v31;
  int v32;
  int v33;
  unsigned int v34;
  uint64_t v35;
  __int16 v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int *v41;
  unsigned __int16 *v42;
  uint64_t v43;
  __int16 **v44;
  int v45;
  _QWORD *v46;

  v6 = **(_QWORD **)(a1 + 8);
  v7 = (unsigned __int16 *)(v6 + 48 * *a3);
  v9 = v7[1];
  ++v7;
  v8 = v9;
  v10 = (unsigned __int8 *)(v7 + 1);
  v11 = v9 - *((unsigned __int8 *)v7 + 2);
  v12 = *(_QWORD *)(v7 + 11);
  v42 = v7;
  v45 = *((unsigned __int8 *)v7 + 2);
  v44 = (__int16 **)(v7 + 11);
  if (v12)
  {
    v13 = -1;
    do
      ++v13;
    while (*(_WORD *)(v12 + 2 * v13));
  }
  else
  {
    v13 = 0;
  }
  v14 = v6 + 48 * *a3;
  v15 = *(_QWORD *)(v14 + 8);
  v46 = (_QWORD *)(v14 + 8);
  v43 = v15 << 61 >> 63;
  v16 = v11 + ((int)((_DWORD)v15 << 29) >> 31);
  v17 = v8;
  v18 = a3[6];
  v19 = v18 - v8;
  v20 = v16 + v13;
  v21 = (uint64_t *)(a2 + 56);
  sub_1C597D9C8(a2 + 56, v16 + v13 + v18 - v8);
  v22 = 0;
  if (!v16)
  {
    v27 = v21;
    if (!v13)
      goto LABEL_16;
    goto LABEL_14;
  }
  v23 = 0;
  v24 = *v10;
  v25 = *((_QWORD *)a3 + 2);
  v26 = *v21;
  v27 = v21;
  do
  {
    if (*(_BYTE *)(v25 + 16 * (v24 + v23)) == 1)
    {
      v28 = (_DWORD *)(v26 + 16 * v22);
      *v28 = v24 + v23;
      v28[1] = v23;
      v28[3] = a4;
      ++v22;
    }
    ++v23;
  }
  while (v16 != v23);
  if (v13)
  {
LABEL_14:
    v29 = *v27;
    v30 = *v44;
    v31 = v13;
    v32 = v17 + v43 - v45;
    v33 = -1;
    v34 = v22;
    do
    {
      v35 = v29 + 16 * v34;
      *(_DWORD *)v35 = v33;
      *(_DWORD *)(v35 + 4) = v32;
      v36 = *v30++;
      *(_WORD *)(v35 + 8) = v36;
      *(_DWORD *)(v35 + 12) = a4;
      ++v32;
      --v33;
      ++v34;
      --v31;
    }
    while (v31);
  }
LABEL_16:
  v37 = v22 + v13;
  if (v18 != v17 && (*v46 & 0x8000000000) == 0)
  {
    v38 = *v42;
    v39 = *((_QWORD *)a3 + 2);
    v40 = *v27;
    do
    {
      if (*(_BYTE *)(v39 + 16 * v38) == 1)
      {
        v41 = (unsigned int *)(v40 + 16 * v37);
        *v41 = v38;
        v41[1] = v20;
        v41[3] = a4;
        ++v37;
      }
      ++v38;
      ++v20;
      --v19;
    }
    while (v19);
  }
  sub_1C597D9C8((uint64_t)v27, v37);
}

_QWORD *llvm::mca::InstrBuilder::verifyInstrDesc@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, _QWORD *a3@<X8>)
{
  BOOL v4;
  char *v6;
  _QWORD *result;

  if (*(_DWORD *)(a1 + 284) || (!*(_QWORD *)(a1 + 248) ? (v4 = *(_DWORD *)(a1 + 144) == 0) : (v4 = 0), v4))
  {
    result = 0;
  }
  else
  {
    v6 = (char *)operator new(0x68uLL);
    strcpy(v6, "found an inconsistent instruction that decodes to zero opcodes and that consumes scheduler resources.");
    result = (_QWORD *)operator new();
    *result = off_1E8184908;
    result[1] = v6;
    result[2] = 101;
    result[3] = 0x8000000000000068;
    result[4] = a2;
  }
  *a3 = result;
  return result;
}

char *llvm::mca::InstrBuilder::convertUnsupportedInstrToDesc@<X0>(llvm::raw_ostream *a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  llvm::raw_ostream *v4;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  llvm::raw_ostream *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  char *result;
  uint64_t v14;
  uint64_t v15;
  uint64_t *v16;
  uint64_t v17;
  llvm::raw_ostream *v18;
  void *v19;
  void *v20;
  void *v21;
  llvm::raw_ostream *v22;
  void *v23;
  uint64_t v24;
  llvm::raw_ostream *v25;
  void *v26;
  uint64_t v27;
  llvm::raw_ostream *v28;
  void *v29;
  void *v30;
  void *v31;
  uint64_t v32;
  unsigned __int16 *v33;
  uint64_t v34;
  void *v35;
  void *v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  void *v40;
  void *v41;
  uint64_t v42;
  _DWORD *v43;

  v4 = a1;
  v6 = *(unsigned __int16 *)a2;
  v7 = **((_QWORD **)a1 + 1);
  v8 = *(_QWORD *)(*(_QWORD *)a1 + 160);
  v9 = (llvm::raw_ostream *)*(unsigned __int16 *)(v7 + 48 * *(unsigned __int16 *)a2 + 6);
  v10 = *(_WORD *)(*(_QWORD *)(v8 + 40) + 24 * (_QWORD)v9 + 8) & 0x1FFF;
  if (v10 == 8190)
  {
    if (!(_DWORD)v9)
    {
LABEL_6:
      v12 = operator new();
      result = (char *)operator new(0x38uLL);
      strcpy(result, "unable to resolve scheduling class for write variant.");
      *(_QWORD *)v12 = off_1E8184908;
      *(_QWORD *)(v12 + 8) = result;
      *(_OWORD *)(v12 + 16) = xmmword_1C8662E80;
      *(_QWORD *)(v12 + 32) = a2;
      *(_BYTE *)(a3 + 8) |= 1u;
      *(_QWORD *)a3 = v12;
      return result;
    }
    v11 = *(unsigned int *)(v8 + 28);
    while ((*(_WORD *)(*(_QWORD *)(v8 + 40) + 24 * v9 + 8) & 0x1FFF) == 0x1FFE)
    {
      a1 = (llvm::raw_ostream *)(*(uint64_t (**)(_QWORD, llvm::raw_ostream *, _DWORD *, _QWORD, uint64_t))(**(_QWORD **)v4 + 16))(*(_QWORD *)v4, v9, a2, *((_QWORD *)v4 + 1), v11);
      v9 = a1;
      if (!(_DWORD)a1)
        goto LABEL_6;
    }
    v10 = 8190;
  }
  v14 = v7 + 48 * v6;
  v17 = *(_QWORD *)(v14 + 8);
  v16 = (uint64_t *)(v14 + 8);
  LOBYTE(v15) = v17;
  if ((v17 & 0x80) != 0 && *((_BYTE *)v4 + 160))
  {
    v18 = llvm::WithColor::warning(a1);
    v19 = (void *)*((_QWORD *)v18 + 4);
    if (*((_QWORD *)v18 + 3) - (_QWORD)v19 > 0x2CuLL)
    {
      qmemcpy(v19, "found a call in the input assembly sequence.\n", 45);
      *((_QWORD *)v18 + 4) += 45;
    }
    else
    {
      v18 = llvm::raw_ostream::write(v18, "found a call in the input assembly sequence.\n", 0x2DuLL);
    }
    a1 = llvm::WithColor::note(v18);
    v20 = (void *)*((_QWORD *)a1 + 4);
    if (*((_QWORD *)a1 + 3) - (_QWORD)v20 > 0x2CuLL)
    {
      qmemcpy(v20, "call instructions are not correctly modeled. ", 45);
      v21 = (void *)(*((_QWORD *)a1 + 4) + 45);
      *((_QWORD *)a1 + 4) = v21;
    }
    else
    {
      a1 = llvm::raw_ostream::write(a1, "call instructions are not correctly modeled. ", 0x2DuLL);
      v21 = (void *)*((_QWORD *)a1 + 4);
    }
    if (*((_QWORD *)a1 + 3) - (_QWORD)v21 > 0x1AuLL)
    {
      qmemcpy(v21, "Assume a latency of 100cy.\n", 27);
      *((_QWORD *)a1 + 4) += 27;
    }
    else
    {
      a1 = llvm::raw_ostream::write(a1, "Assume a latency of 100cy.\n", 0x1BuLL);
    }
    *((_BYTE *)v4 + 160) = 0;
    v15 = *v16;
  }
  if ((v15 & 0x20) != 0 && *((_BYTE *)v4 + 161))
  {
    v22 = llvm::WithColor::warning(a1);
    v23 = (void *)*((_QWORD *)v22 + 4);
    if (*((_QWORD *)v22 + 3) - (_QWORD)v23 > 0x26uLL)
    {
      qmemcpy(v23, "found a return instruction in the input", 39);
      v24 = *((_QWORD *)v22 + 4) + 39;
      *((_QWORD *)v22 + 4) = v24;
    }
    else
    {
      v22 = llvm::raw_ostream::write(v22, "found a return instruction in the input", 0x27uLL);
      v24 = *((_QWORD *)v22 + 4);
    }
    if ((unint64_t)(*((_QWORD *)v22 + 3) - v24) > 0x13)
    {
      *(_DWORD *)(v24 + 16) = 170812771;
      *(_OWORD *)v24 = *(_OWORD *)" assembly sequence.\n";
      *((_QWORD *)v22 + 4) += 20;
    }
    else
    {
      v22 = llvm::raw_ostream::write(v22, " assembly sequence.\n", 0x14uLL);
    }
    v25 = llvm::WithColor::note(v22);
    v26 = (void *)*((_QWORD *)v25 + 4);
    if (*((_QWORD *)v25 + 3) - (_QWORD)v26 > 0x24uLL)
    {
      qmemcpy(v26, "program counter updates are ignored.\n", 37);
      *((_QWORD *)v25 + 4) += 37;
    }
    else
    {
      llvm::raw_ostream::write(v25, "program counter updates are ignored.\n", 0x25uLL);
    }
    *((_BYTE *)v4 + 161) = 0;
  }
  v27 = operator new();
  *(_OWORD *)(v27 + 32) = 0u;
  *(_OWORD *)(v27 + 48) = 0u;
  *(_OWORD *)(v27 + 64) = 0u;
  *(_OWORD *)(v27 + 80) = 0u;
  *(_OWORD *)(v27 + 96) = 0u;
  *(_OWORD *)(v27 + 112) = 0u;
  *(_OWORD *)(v27 + 128) = 0u;
  *(_OWORD *)(v27 + 144) = 0u;
  *(_OWORD *)(v27 + 160) = 0u;
  *(_OWORD *)(v27 + 176) = 0u;
  *(_OWORD *)(v27 + 192) = 0u;
  *(_OWORD *)(v27 + 208) = 0u;
  *(_OWORD *)(v27 + 224) = 0u;
  *(_OWORD *)(v27 + 240) = 0u;
  *(_OWORD *)(v27 + 256) = 0u;
  *(_OWORD *)(v27 + 272) = 0u;
  *(_QWORD *)(v27 + 288) = 0;
  *(_OWORD *)(v27 + 16) = 0u;
  *(_QWORD *)v27 = v27 + 16;
  *(_QWORD *)(v27 + 8) = 0x200000000;
  *(_QWORD *)(v27 + 56) = v27 + 72;
  *(_DWORD *)(v27 + 68) = 4;
  *(_QWORD *)(v27 + 136) = v27 + 152;
  *(_DWORD *)(v27 + 148) = 4;
  *(_DWORD *)(v27 + 284) = 1;
  *(_DWORD *)(v27 + 288) = (_DWORD)v9;
  *(_OWORD *)(v27 + 248) = 0u;
  *(_OWORD *)(v27 + 264) = 0u;
  v28 = llvm::WithColor::warning((llvm::WithColor *)v27);
  v29 = (void *)*((_QWORD *)v28 + 4);
  if (*((_QWORD *)v28 + 3) - (_QWORD)v29 > 0x2FuLL)
  {
    qmemcpy(v29, "this instruction's scheduling class is invalid.\n", 48);
    v30 = (void *)(*((_QWORD *)v28 + 4) + 48);
    *((_QWORD *)v28 + 4) = v30;
  }
  else
  {
    v28 = llvm::raw_ostream::write(v28, "this instruction's scheduling class is invalid.\n", 0x30uLL);
    v30 = (void *)*((_QWORD *)v28 + 4);
  }
  if (*((_QWORD *)v28 + 3) - (_QWORD)v30 > 0x32uLL)
  {
    qmemcpy(v30, "\tDefaulting to 1 latency, 1 uOp, 0 hardware units,\n", 51);
    v31 = (void *)(*((_QWORD *)v28 + 4) + 51);
    *((_QWORD *)v28 + 4) = v31;
  }
  else
  {
    v28 = llvm::raw_ostream::write(v28, "\tDefaulting to 1 latency, 1 uOp, 0 hardware units,\n", 0x33uLL);
    v31 = (void *)*((_QWORD *)v28 + 4);
  }
  if (*((_QWORD *)v28 + 3) - (_QWORD)v31 > 0x25uLL)
  {
    qmemcpy(v31, "\t0 reads, 0 defs, RetireOOO set to 1.\n", 38);
    *((_QWORD *)v28 + 4) += 38;
  }
  else
  {
    llvm::raw_ostream::write(v28, "\t0 reads, 0 defs, RetireOOO set to 1.\n", 0x26uLL);
  }
  if (v10 == 8190 || (*v16 & 2) != 0)
  {
    v37 = (uint64_t)v4 + 136;
    v43 = a2;
    v38 = sub_1C597DE4C(v37, (uint64_t *)&v43);
    v39 = v38[1];
    v38[1] = v27;
    if (v39)
    {
      v40 = *(void **)(v39 + 136);
      if (v40 != (void *)(v39 + 152))
        free(v40);
      v41 = *(void **)(v39 + 56);
      if (v41 != (void *)(v39 + 72))
        free(v41);
      if (*(_QWORD *)v39 != v39 + 16)
        free(*(void **)v39);
      MEMORY[0x1CAA32FC0](v39, 0x1080C40CEB3F022);
    }
    v43 = a2;
    result = (char *)sub_1C597DE4C(v37, (uint64_t *)&v43);
  }
  else
  {
    v32 = (uint64_t)v4 + 112;
    LOWORD(v43) = *a2;
    v33 = sub_1C597DA38(v32, (unsigned __int16 *)&v43);
    v34 = *((_QWORD *)v33 + 1);
    *((_QWORD *)v33 + 1) = v27;
    if (v34)
    {
      v35 = *(void **)(v34 + 136);
      if (v35 != (void *)(v34 + 152))
        free(v35);
      v36 = *(void **)(v34 + 56);
      if (v36 != (void *)(v34 + 72))
        free(v36);
      if (*(_QWORD *)v34 != v34 + 16)
        free(*(void **)v34);
      MEMORY[0x1CAA32FC0](v34, 0x1080C40CEB3F022);
    }
    LOWORD(v43) = *a2;
    result = (char *)sub_1C597DA38(v32, (unsigned __int16 *)&v43);
  }
  v42 = *((_QWORD *)result + 1);
  *(_BYTE *)(a3 + 8) &= ~1u;
  *(_QWORD *)a3 = v42;
  return result;
}

char *llvm::mca::InstrBuilder::createInstrDescImpl@<X0>(llvm::raw_ostream *a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  char *result;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  char v28;
  unsigned __int16 *v29;
  uint64_t v30;
  BOOL v31;
  unsigned __int16 *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  unsigned int v37;
  int v38;
  unsigned int v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  unsigned int *v45;
  int v46;
  int v47;
  _QWORD *v48;
  unint64_t v49;
  char *v50;
  __int128 v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  char *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  char *v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v67;
  __int128 v68;
  uint64_t v69;
  unint64_t v70;
  uint8x8_t v71;
  uint64_t v72;
  int8x8_t v73;
  uint8x8_t v74;
  int v76;
  char *v77;
  char *v78;
  int v79;
  int v80;
  __int128 v81;
  unint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  llvm::raw_ostream *v90;
  int v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  char *v95;
  unint64_t v96;
  unint64_t v97;
  uint64_t v98;
  unint64_t v99;
  int8x8_t v100;
  uint8x8_t v101;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  _DWORD *v106;
  unint64_t v107;
  uint64_t v108;
  uint8x8_t v109;
  unint64_t *v110;
  uint64_t v111;
  unint64_t *v112;
  unint64_t *v113;
  unsigned int v114;
  int *v115;
  unint64_t *v116;
  uint64_t v117;
  int v118;
  int v120;
  unsigned int v121;
  uint64_t v122;
  unint64_t *v123;
  unint64_t v124;
  unint64_t v125;
  unint64_t *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  int v130;
  __int16 *v131;
  int v132;
  int v133;
  int v134;
  unint64_t v135;
  BOOL v136;
  unint64_t v137;
  unsigned __int8 *v138;
  int v139;
  BOOL v140;
  uint64_t v141;
  char *v142;
  void *v143;
  char *v144;
  char *v145;
  unsigned __int16 *v146;
  uint64_t v147;
  void *v148;
  void *v149;
  uint64_t *v150;
  uint64_t v151;
  void *v152;
  void *v153;
  uint64_t v154;
  llvm::raw_ostream *v155;
  void *v156;
  void *v157;
  void *v158;
  llvm::raw_ostream *v159;
  void *v160;
  uint64_t v161;
  llvm::raw_ostream *v162;
  void *v163;
  unint64_t v164;
  void *v165;
  void *v166;
  uint64_t v167;
  void **v168;
  uint64_t v169;
  uint64_t v170;
  unsigned int v171;
  int v172;
  llvm::raw_ostream *v173;
  _DWORD *v174;
  uint64_t v175;
  uint64_t *v176;
  unsigned int v177;
  uint64_t v178;
  unsigned int v179;
  unint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  unsigned int v187;
  uint64_t v188;
  uint64_t v189;
  unint64_t v190;
  unsigned int v191;
  unint64_t *v192;
  uint64_t v193;
  unsigned int v194;
  __int128 v195;
  uint64_t v196;
  char *v197;
  uint64_t v198;
  _QWORD v199[14];

  v199[12] = *MEMORY[0x1E0C80C00];
  v6 = *(unsigned __int16 *)a2;
  v7 = **((_QWORD **)a1 + 1);
  v8 = *(_QWORD *)(*(_QWORD *)a1 + 160);
  v9 = *(unsigned __int16 *)(v7 + 48 * *(unsigned __int16 *)a2 + 6);
  v10 = *(_QWORD *)(v8 + 40);
  v11 = *(unsigned __int16 *)(v10 + 24 * v9 + 8);
  v12 = v11 & 0x1FFF;
  if (v12 == 8190)
  {
    if (!(_DWORD)v9)
    {
LABEL_6:
      v14 = operator new();
      result = (char *)operator new(0x38uLL);
      strcpy(result, "unable to resolve scheduling class for write variant.");
      *(_QWORD *)v14 = off_1E8184908;
      *(_QWORD *)(v14 + 8) = result;
      v16 = xmmword_1C8662E80;
LABEL_37:
      *(_OWORD *)(v14 + 16) = v16;
      *(_QWORD *)(v14 + 32) = a2;
      *(_BYTE *)(a3 + 8) |= 1u;
      *(_QWORD *)a3 = v14;
      return result;
    }
    v13 = *(unsigned int *)(v8 + 28);
    while (1)
    {
      v10 = *(_QWORD *)(v8 + 40);
      v11 = *(unsigned __int16 *)(v10 + 24 * v9 + 8);
      if ((v11 & 0x1FFF) != 0x1FFE)
        break;
      v9 = (*(uint64_t (**)(_QWORD, uint64_t, _DWORD *, _QWORD, uint64_t))(**(_QWORD **)a1 + 16))(*(_QWORD *)a1, v9, a2, *((_QWORD *)a1 + 1), v13);
      if (!(_DWORD)v9)
        goto LABEL_6;
    }
    v179 = v9;
  }
  else
  {
    v179 = *(unsigned __int16 *)(v7 + 48 * *(unsigned __int16 *)a2 + 6);
  }
  if ((~v11 & 0x1FFF) == 0)
  {
    if (*((_BYTE *)a1 + 162))
      return llvm::mca::InstrBuilder::convertUnsupportedInstrToDesc(a1, a2, a3);
    v14 = operator new();
    result = (char *)operator new(0x48uLL);
    strcpy(result, "found an unsupported instruction in the input assembly sequence.");
    *(_QWORD *)v14 = off_1E8184908;
    *(_QWORD *)(v14 + 8) = result;
    v16 = xmmword_1C8663B80;
    goto LABEL_37;
  }
  v178 = v10;
  v17 = v10 + 24 * v179;
  v177 = v9;
  v18 = operator new();
  *(_OWORD *)(v18 + 16) = 0u;
  v19 = v18 + 16;
  *(_OWORD *)(v18 + 32) = 0u;
  *(_OWORD *)(v18 + 48) = 0u;
  *(_OWORD *)(v18 + 64) = 0u;
  *(_OWORD *)(v18 + 80) = 0u;
  *(_OWORD *)(v18 + 96) = 0u;
  *(_OWORD *)(v18 + 112) = 0u;
  *(_OWORD *)(v18 + 128) = 0u;
  *(_OWORD *)(v18 + 144) = 0u;
  *(_OWORD *)(v18 + 160) = 0u;
  *(_OWORD *)(v18 + 176) = 0u;
  *(_OWORD *)(v18 + 192) = 0u;
  *(_OWORD *)(v18 + 208) = 0u;
  *(_OWORD *)(v18 + 224) = 0u;
  *(_OWORD *)(v18 + 240) = 0u;
  *(_OWORD *)(v18 + 256) = 0u;
  *(_OWORD *)(v18 + 272) = 0u;
  *(_QWORD *)(v18 + 288) = 0;
  *(_QWORD *)v18 = v18 + 16;
  *(_QWORD *)(v18 + 8) = 0x200000000;
  v166 = (void *)(v18 + 72);
  *(_QWORD *)(v18 + 56) = v18 + 72;
  *(_DWORD *)(v18 + 68) = 4;
  v165 = (void *)(v18 + 152);
  *(_QWORD *)(v18 + 136) = v18 + 152;
  v168 = (void **)(v18 + 136);
  *(_DWORD *)(v18 + 148) = 4;
  *(_DWORD *)(v18 + 284) = *(_WORD *)(v17 + 8) & 0x1FFF;
  v182 = v18;
  *(_DWORD *)(v18 + 288) = v177;
  v20 = v7 + 48 * v6;
  v21 = *(_QWORD *)(v20 + 8);
  v176 = (uint64_t *)(v20 + 8);
  if ((v21 & 0x80) != 0)
  {
    v22 = v179;
    if (*((_BYTE *)a1 + 160))
    {
      v155 = llvm::WithColor::warning((llvm::WithColor *)v18);
      v156 = (void *)*((_QWORD *)v155 + 4);
      if (*((_QWORD *)v155 + 3) - (_QWORD)v156 > 0x2CuLL)
      {
        qmemcpy(v156, "found a call in the input assembly sequence.\n", 45);
        *((_QWORD *)v155 + 4) += 45;
      }
      else
      {
        v155 = llvm::raw_ostream::write(v155, "found a call in the input assembly sequence.\n", 0x2DuLL);
      }
      v18 = (uint64_t)llvm::WithColor::note(v155);
      v157 = *(void **)(v18 + 32);
      if (*(_QWORD *)(v18 + 24) - (_QWORD)v157 > 0x2CuLL)
      {
        qmemcpy(v157, "call instructions are not correctly modeled. ", 45);
        v158 = (void *)(*(_QWORD *)(v18 + 32) + 45);
        *(_QWORD *)(v18 + 32) = v158;
      }
      else
      {
        v18 = (uint64_t)llvm::raw_ostream::write((llvm::raw_ostream *)v18, "call instructions are not correctly modeled. ", 0x2DuLL);
        v158 = *(void **)(v18 + 32);
      }
      if (*(_QWORD *)(v18 + 24) - (_QWORD)v158 > 0x1AuLL)
      {
        qmemcpy(v158, "Assume a latency of 100cy.\n", 27);
        *(_QWORD *)(v18 + 32) += 27;
      }
      else
      {
        v18 = (uint64_t)llvm::raw_ostream::write((llvm::raw_ostream *)v18, "Assume a latency of 100cy.\n", 0x1BuLL);
      }
      v22 = v179;
      *((_BYTE *)a1 + 160) = 0;
      v21 = *v176;
    }
  }
  else
  {
    v22 = v179;
  }
  v23 = v178;
  if ((v21 & 0x20) != 0 && *((_BYTE *)a1 + 161))
  {
    v159 = llvm::WithColor::warning((llvm::WithColor *)v18);
    v160 = (void *)*((_QWORD *)v159 + 4);
    if (*((_QWORD *)v159 + 3) - (_QWORD)v160 > 0x26uLL)
    {
      qmemcpy(v160, "found a return instruction in the input", 39);
      v161 = *((_QWORD *)v159 + 4) + 39;
      *((_QWORD *)v159 + 4) = v161;
    }
    else
    {
      v159 = llvm::raw_ostream::write(v159, "found a return instruction in the input", 0x27uLL);
      v161 = *((_QWORD *)v159 + 4);
    }
    if ((unint64_t)(*((_QWORD *)v159 + 3) - v161) > 0x13)
    {
      *(_DWORD *)(v161 + 16) = 170812771;
      *(_OWORD *)v161 = *(_OWORD *)" assembly sequence.\n";
      *((_QWORD *)v159 + 4) += 20;
    }
    else
    {
      v159 = llvm::raw_ostream::write(v159, " assembly sequence.\n", 0x14uLL);
    }
    v162 = llvm::WithColor::note(v159);
    v163 = (void *)*((_QWORD *)v162 + 4);
    if (*((_QWORD *)v162 + 3) - (_QWORD)v163 > 0x24uLL)
    {
      qmemcpy(v163, "program counter updates are ignored.\n", 37);
      *((_QWORD *)v162 + 4) += 37;
    }
    else
    {
      llvm::raw_ostream::write(v162, "program counter updates are ignored.\n", 0x25uLL);
    }
    v23 = v178;
    v22 = v179;
    *((_BYTE *)a1 + 161) = 0;
  }
  v24 = *(_QWORD *)a1;
  v25 = *((_QWORD *)a1 + 4);
  v26 = *(_QWORD *)(*(_QWORD *)a1 + 160);
  v197 = (char *)v199;
  v198 = 0x400000000;
  v192 = 0;
  v193 = 0;
  v194 = 0;
  v189 = v26;
  v191 = *(_DWORD *)(v26 + 48);
  v169 = v191;
  v183 = v25;
  if (v191 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v190, 0, 0);
    v25 = v183;
    v23 = v178;
    v22 = v179;
  }
  else
  {
    v190 = 0;
  }
  v170 = v7;
  v171 = v6;
  v172 = v12;
  v167 = v19;
  v173 = a1;
  v174 = a2;
  v175 = a3;
  if (*(_WORD *)(v23 + 24 * v22 + 12))
  {
    v27 = 0;
    v28 = 0;
    v29 = (unsigned __int16 *)(v23 + 24 * v22 + 10);
    v187 = v191;
    v30 = 4 * *(unsigned __int16 *)(v23 + 24 * v22 + 12);
    v31 = 1;
    do
    {
      v32 = (unsigned __int16 *)(*(_QWORD *)(v24 + 136) + 4 * *v29 + v27);
      v33 = v32[1];
      if (v32[1])
      {
        v34 = *v32;
        v35 = *(_QWORD *)(v189 + 32);
        v36 = *(_QWORD *)(v25 + 8 * v34);
        v37 = *(_DWORD *)(v35 + 32 * v34 + 16);
        if ((v37 & 0x80000000) != 0)
        {
          v41 = 0;
        }
        else
        {
          v38 = __clz(v36);
          v39 = 63 - v38;
          v40 = 1 << (63 - v38);
          if (v187 > 0x40)
            *(_QWORD *)(v190 + 8 * (v39 >> 6)) |= v40;
          else
            v190 |= v40;
          v28 |= v37 == 0;
          v41 = v31 && v37 < 2;
        }
        v42 = v33 << 32;
        LODWORD(v7) = v7 & 0xFFFFFF00;
        if (v198 >= HIDWORD(v198))
        {
          *(_QWORD *)&v195 = v36;
          *((_QWORD *)&v195 + 1) = v33 << 32;
          v196 = v7 | 0x100000000;
          v49 = sub_1C4DC1E54((uint64_t)&v197, (unint64_t)&v195);
          v50 = &v197[24 * v198];
          v51 = *(_OWORD *)v49;
          v25 = v183;
          *((_QWORD *)v50 + 2) = *(_QWORD *)(v49 + 16);
          *(_OWORD *)v50 = v51;
        }
        else
        {
          v43 = &v197[24 * v198];
          *(_QWORD *)v43 = v36;
          *((_QWORD *)v43 + 1) = v42;
          *((_DWORD *)v43 + 4) = v7;
          *((_DWORD *)v43 + 5) = 1;
        }
        LODWORD(v198) = v198 + 1;
        v44 = v35 + 32 * v34;
        v46 = *(_DWORD *)(v44 + 12);
        v45 = (unsigned int *)(v44 + 12);
        if (v46)
        {
          *(_QWORD *)&v195 = 0;
          *(_QWORD *)&v195 = *(_QWORD *)(v25 + 8 * *v45);
          v47 = v32[1];
          v48 = sub_1C51910A4((uint64_t)&v192, (uint64_t *)&v195);
          *((_DWORD *)v48 + 2) += v47;
          v25 = v183;
        }
        v31 = v41 != 0;
      }
      v27 += 4;
    }
    while (v30 != v27);
  }
  else
  {
    v28 = 0;
    v31 = 1;
  }
  v52 = v182;
  *(_BYTE *)(v182 + 292) = *(_BYTE *)(v182 + 292) & 0xFE | v31 & v28 & 1;
  v53 = 126 - 2 * __clz(v198);
  if ((_DWORD)v198)
    v54 = v53;
  else
    v54 = 0;
  sub_1C597C4D4((uint64_t)v197, (unint64_t)&v197[24 * v198], v54, 1);
  v55 = v198;
  if (!(_DWORD)v198)
  {
    v83 = 0;
    v103 = 0;
LABEL_94:
    v89 = (uint64_t)v174;
    v88 = v175;
    v90 = v173;
    v91 = v172;
    v93 = v170;
    v92 = v171;
    v94 = v169;
    goto LABEL_97;
  }
  v56 = 24 * v198;
  v57 = v197;
  while ((*(_QWORD *)v57 & (*(_QWORD *)v57 - 1)) == 0)
  {
    v57 += 24;
    v56 -= 24;
    if (!v56)
    {
      v57 = &v197[24 * v198];
      break;
    }
  }
  v58 = 0;
  v59 = 0;
  v60 = 0;
  v61 = 0;
  v180 = v198;
  v181 = 0;
  v164 = 0xAAAAAAAAAAAAAAABLL * ((v57 - v197) >> 3);
  v62 = v198 - 1;
  do
  {
    v63 = &v197[24 * v59];
    if (*((_DWORD *)v63 + 3) == *((_DWORD *)v63 + 2))
    {
      v64 = 1 << ~__clz(*(_QWORD *)v63);
      if (*(_QWORD *)v63)
        v65 = v64;
      else
        v65 = 0;
      v61 |= v65;
      ++v59;
      goto LABEL_73;
    }
    v66 = *(_DWORD *)(v52 + 144);
    if (v66 >= *(_DWORD *)(v52 + 148))
    {
      v81 = *(_OWORD *)v63;
      v196 = *((_QWORD *)v63 + 2);
      v195 = v81;
      v82 = sub_1C4DC1E54((uint64_t)v168, (unint64_t)&v195);
      v67 = *(_QWORD *)(v52 + 136) + 24 * *(unsigned int *)(v52 + 144);
      v68 = *(_OWORD *)v82;
      v69 = *(_QWORD *)(v82 + 16);
    }
    else
    {
      v67 = *(_QWORD *)(v52 + 136) + 24 * v66;
      v68 = *(_OWORD *)v63;
      v69 = *((_QWORD *)v63 + 2);
    }
    *(_QWORD *)(v67 + 16) = v69;
    *(_OWORD *)v67 = v68;
    ++*(_DWORD *)(v52 + 144);
    v70 = *(_QWORD *)v63;
    v71 = (uint8x8_t)vcnt_s8(*(int8x8_t *)v63);
    v71.i16[0] = vaddlv_u8(v71);
    if (v71.u32[0] != 1)
    {
      v72 = 1 << ~__clz(v70);
      if (!v70)
        v72 = 0;
      v70 ^= v72;
      v61 |= v72;
      v73 = (int8x8_t)(v70 & ~v60);
      v74 = (uint8x8_t)vcnt_s8(v73);
      v74.i16[0] = vaddlv_u8(v74);
      if (v70 == *(_QWORD *)&v73 || v74.u32[0] != 1)
        goto LABEL_65;
      v181 |= *(_QWORD *)&v73;
    }
    v60 |= v70;
LABEL_65:
    v188 = v59 + 1;
    if (v59 + 1 < v55)
    {
      v185 = v60;
      v186 = v61;
      v184 = v58;
      v76 = v62;
      do
      {
        v77 = v197;
        v78 = &v197[v58];
        if ((v70 & ~*(_QWORD *)&v197[v58 + 24]) == 0)
        {
          v80 = *((_DWORD *)v63 + 2);
          v79 = *((_DWORD *)v63 + 3);
          *((_DWORD *)v78 + 9) += v80 - v79 + *((_DWORD *)sub_1C51910A4((uint64_t)&v192, (uint64_t *)v63) + 2);
          if ((*((_QWORD *)v78 + 3) & (*((_QWORD *)v78 + 3) - 1)) != 0)
            ++*(_DWORD *)&v77[v58 + 44];
        }
        v58 += 24;
        --v76;
      }
      while (v76);
      v52 = v182;
      v60 = v185;
      v61 = v186;
      v55 = v180;
      v58 = v184;
    }
    v59 = v188;
LABEL_73:
    --v62;
    v58 += 24;
  }
  while (v59 != v55);
  v83 = v61;
  v84 = v181;
  if (!v181)
  {
    v103 = v60;
    goto LABEL_94;
  }
  v85 = *(_QWORD *)(v52 + 264);
  v86 = v60;
  v87 = v60;
  v89 = (uint64_t)v174;
  v88 = v175;
  v90 = v173;
  v91 = v172;
  v93 = v170;
  v92 = v171;
  v94 = v169;
  while (1)
  {
    v85 |= v84;
    if (v198 <= v164)
      break;
    v84 = 0;
    v95 = &v197[24 * v164 + 12];
    v96 = v198 - (unint64_t)v164;
    do
    {
      if (*(_DWORD *)v95 != *((_DWORD *)v95 - 1))
      {
        v97 = *(_QWORD *)(v95 - 12);
        v98 = 1 << ~__clz(v97);
        if (!v97)
          v98 = 0;
        v99 = v98 ^ v97;
        v100 = (int8x8_t)(v99 & ~v87);
        v101 = (uint8x8_t)vcnt_s8(v100);
        v101.i16[0] = vaddlv_u8(v101);
        if (v99 == *(_QWORD *)&v100 || v101.u32[0] == 1)
        {
          v87 |= v99;
          v84 |= *(_QWORD *)&v100;
        }
      }
      v95 += 24;
      --v96;
    }
    while (v96);
    if (!v84)
      goto LABEL_96;
  }
  v87 = v86;
LABEL_96:
  *(_QWORD *)(v52 + 264) = v85;
  v103 = v87;
LABEL_97:
  v104 = *(unsigned int *)(v52 + 144);
  if ((_DWORD)v104)
  {
    v105 = 24 * v104;
    v106 = (_DWORD *)(*(_QWORD *)(v52 + 136) + 20);
    do
    {
      v107 = *(_QWORD *)(v106 - 5);
      if ((v107 & (v107 - 1)) != 0 && !*((_BYTE *)v106 - 4))
      {
        v108 = 1 << ~__clz(v107);
        if (!v107)
          v108 = 0;
        v109 = (uint8x8_t)vcnt_s8((int8x8_t)(v108 ^ v107));
        v109.i16[0] = vaddlv_u8(v109);
        if (*v106 > v109.i32[0])
        {
          *((_BYTE *)v106 - 4) = 1;
          *v106 = v109.i32[0];
        }
      }
      v106 += 6;
      v105 -= 24;
    }
    while (v105);
  }
  v110 = &v192[2 * v194];
  if ((_DWORD)v193)
  {
    if (v194)
    {
      v111 = 16 * v194;
      v112 = v192;
      while (*v112 >= 0xFFFFFFFFFFFFFFFELL)
      {
        v112 += 2;
        v111 -= 16;
        if (!v111)
          goto LABEL_111;
      }
    }
    else
    {
      v112 = v192;
    }
  }
  else
  {
LABEL_111:
    v112 = &v192[2 * v194];
  }
  v113 = &v192[2 * v194];
  v114 = v191;
  while (v112 != v113)
  {
    if (v94 > 1)
    {
      v115 = (int *)(*(_QWORD *)(v189 + 32) + 48);
      v116 = (unint64_t *)(v183 + 8);
      v117 = v94 - 1;
      do
      {
        v118 = *v115;
        v115 += 8;
        if (v118 != -1 && *v116 != *v112 && (*v112 & *v116) == *v112)
        {
          v120 = __clz(*v116);
          v121 = 63 - v120;
          v122 = 1 << (63 - v120);
          if (v114 > 0x40)
            *(_QWORD *)(v190 + 8 * (v121 >> 6)) |= v122;
          else
            v190 |= v122;
        }
        ++v116;
        --v117;
      }
      while (v117);
    }
    v123 = v112 + 2;
    while (v123 != v110)
    {
      v124 = *v123;
      v123 += 2;
      if (v124 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v112 = v123 - 2;
        goto LABEL_131;
      }
    }
    v112 = v110;
LABEL_131:
    ;
  }
  v125 = v190;
  v126 = &v190;
  if (v114 >= 0x41)
    v126 = (unint64_t *)v190;
  *(_QWORD *)(v52 + 248) = *v126;
  *(_QWORD *)(v52 + 256) = v103;
  *(_QWORD *)(v52 + 272) = v83;
  if (v114 >= 0x41 && v125)
    MEMORY[0x1CAA32F9C](v125, 0x1000C8000313F17);
  MEMORY[0x1CAA32FB4]();
  if (v197 != (char *)v199)
    free(v197);
  v127 = *v176;
  if ((*v176 & 0x80) != 0)
  {
    v130 = 100;
  }
  else
  {
    v128 = v178 + 24 * v179;
    v129 = *(unsigned __int16 *)(v128 + 16);
    if (*(_WORD *)(v128 + 16))
    {
      v130 = 0;
      v131 = (__int16 *)(*(_QWORD *)(*(_QWORD *)v90 + 144) + 4 * *(unsigned __int16 *)(v178 + 24 * v179 + 14));
      while (1)
      {
        v133 = *v131;
        v131 += 2;
        v132 = v133;
        if (v133 < 0)
          break;
        if (v130 <= v132)
          v130 = v132;
        if (!--v129)
          goto LABEL_150;
      }
      v130 = v132;
LABEL_150:
      if (v130 < 0)
        v130 = 100;
    }
    else
    {
      v130 = 0;
    }
  }
  *(_DWORD *)(v52 + 280) = v130;
  v134 = *(unsigned __int8 *)(v93 + 48 * v92 + 4);
  v135 = *(unsigned int *)(v89 + 24);
  if (*(_BYTE *)(v93 + 48 * v92 + 4))
    v136 = (_DWORD)v135 == 0;
  else
    v136 = 1;
  if (v136)
  {
    if (*(_BYTE *)(v93 + 48 * v92 + 4))
      goto LABEL_165;
    LODWORD(v137) = 0;
  }
  else
  {
    v137 = 0;
    v138 = *(unsigned __int8 **)(v89 + 16);
    do
    {
      v139 = *v138;
      v138 += 16;
      v134 -= v139 == 1;
      ++v137;
      if (v134)
        v140 = v137 >= v135;
      else
        v140 = 1;
    }
    while (!v140);
    if (v134)
    {
LABEL_165:
      v141 = operator new();
      v142 = (char *)operator new(0x30uLL);
      strcpy(v142, "Expected more register operand definitions.");
      *(_QWORD *)v141 = off_1E8184908;
      *(_QWORD *)(v141 + 8) = v142;
      *(_OWORD *)(v141 + 16) = xmmword_1C8663B70;
      *(_QWORD *)(v141 + 32) = v89;
      goto LABEL_166;
    }
  }
  if ((v127 & 4) != 0
    && ((_DWORD)v137 == (_DWORD)v135
     || *(_BYTE *)(*(_QWORD *)(v89 + 16) + 16 * (*(unsigned __int16 *)(v93 + 48 * v92 + 2) - 1)) != 1))
  {
    v145 = (char *)operator new(0x68uLL);
    strcpy(v145, "expected a register operand for an optional definition. Instruction has not been correctly analyzed.");
    v141 = operator new();
    sub_1C47EBC30((_BYTE *)(v141 + 8), v145, 0x64uLL);
    *(_QWORD *)v141 = off_1E8184908;
    *(_QWORD *)(v141 + 32) = v89;
    operator delete(v145);
LABEL_166:
    *(_BYTE *)(v88 + 8) |= 1u;
    *(_QWORD *)v88 = v141;
LABEL_167:
    if (*v168 != v165)
      free(*v168);
    v143 = *(void **)(v52 + 56);
    if (v143 != v166)
      free(v143);
    if (*(_QWORD *)v52 != v167)
      free(*(void **)v52);
    return (char *)MEMORY[0x1CAA32FC0](v52, 0x1080C40CEB3F022);
  }
  else
  {
    llvm::mca::InstrBuilder::populateWrites((_QWORD **)v90, v52, (unsigned int *)v89, v177);
    llvm::mca::InstrBuilder::populateReads((uint64_t)v90, v52, (unsigned int *)v89, v177);
    llvm::mca::InstrBuilder::verifyInstrDesc(v52, v89, &v197);
    v144 = v197;
    if (v197)
    {
      *(_BYTE *)(v88 + 8) |= 1u;
      *(_QWORD *)v88 = v144;
      goto LABEL_167;
    }
    if (v91 == 8190 || (*v176 & 2) != 0)
    {
      v197 = (char *)v89;
      v150 = sub_1C597DE4C((uint64_t)v90 + 136, (uint64_t *)&v197);
      v151 = v150[1];
      v150[1] = v182;
      if (v151)
      {
        v152 = *(void **)(v151 + 136);
        if (v152 != (void *)(v151 + 152))
          free(v152);
        v153 = *(void **)(v151 + 56);
        if (v153 != (void *)(v151 + 72))
          free(v153);
        if (*(_QWORD *)v151 != v151 + 16)
          free(*(void **)v151);
        MEMORY[0x1CAA32FC0](v151, 0x1080C40CEB3F022);
      }
      v197 = (char *)v89;
      result = (char *)sub_1C597DE4C((uint64_t)v90 + 136, (uint64_t *)&v197);
    }
    else
    {
      LOWORD(v197) = *(_DWORD *)v89;
      v146 = sub_1C597DA38((uint64_t)v90 + 112, (unsigned __int16 *)&v197);
      v147 = *((_QWORD *)v146 + 1);
      *((_QWORD *)v146 + 1) = v182;
      if (v147)
      {
        v148 = *(void **)(v147 + 136);
        if (v148 != (void *)(v147 + 152))
          free(v148);
        v149 = *(void **)(v147 + 56);
        if (v149 != (void *)(v147 + 72))
          free(v149);
        if (*(_QWORD *)v147 != v147 + 16)
          free(*(void **)v147);
        MEMORY[0x1CAA32FC0](v147, 0x1080C40CEB3F022);
      }
      LOWORD(v197) = *(_DWORD *)v89;
      result = (char *)sub_1C597DA38((uint64_t)v90 + 112, (unsigned __int16 *)&v197);
    }
    v154 = *((_QWORD *)result + 1);
    *(_BYTE *)(v88 + 8) &= ~1u;
    *(_QWORD *)v88 = v154;
  }
  return result;
}

char *llvm::mca::InstrBuilder::getOrCreateInstrDesc@<X0>(uint64_t a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  unsigned __int16 *v12;
  int v13;
  int v14;
  int v15;
  char *result;
  uint64_t v17;
  uint64_t v18;
  _DWORD *v19;

  v8 = *(_QWORD *)(a1 + 112);
  v6 = a1 + 112;
  v7 = v8;
  v9 = *(unsigned __int16 *)a2;
  v10 = *(unsigned int *)(v6 + 16);
  if ((_DWORD)v10)
  {
    LODWORD(v11) = (v10 - 1) & (37 * v9);
    v12 = (unsigned __int16 *)(v7 + 16 * v11);
    v13 = *v12;
    if (v13 == v9)
      goto LABEL_8;
    v14 = 1;
    while (v13 != 0xFFFF)
    {
      v15 = v11 + v14++;
      v11 = v15 & (v10 - 1);
      v13 = *(unsigned __int16 *)(v7 + 16 * v11);
      if (v13 == v9)
      {
        v12 = (unsigned __int16 *)(v7 + 16 * v11);
        goto LABEL_8;
      }
    }
  }
  v12 = (unsigned __int16 *)(v7 + 16 * v10);
LABEL_8:
  if (v12 != (unsigned __int16 *)(v7 + 16 * v10))
  {
    LOWORD(v19) = *(_WORD *)a2;
    result = (char *)sub_1C597DA38(v6, (unsigned __int16 *)&v19);
LABEL_13:
    v18 = *((_QWORD *)result + 1);
    *(_BYTE *)(a3 + 8) &= ~1u;
    *(_QWORD *)a3 = v18;
    return result;
  }
  v17 = *(_QWORD *)(a1 + 136);
  v19 = 0;
  if (sub_1C49F21C0(v17, *(_DWORD *)(a1 + 152), (uint64_t)a2, &v19)
    && v19 != (_DWORD *)(*(_QWORD *)(a1 + 136) + 16 * *(unsigned int *)(a1 + 152)))
  {
    v19 = a2;
    result = (char *)sub_1C597DE4C(a1 + 136, (uint64_t *)&v19);
    goto LABEL_13;
  }
  return llvm::mca::InstrBuilder::createInstrDescImpl((llvm::raw_ostream *)a1, a2, a3);
}

void llvm::mca::InstrBuilder::createInstruction(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  unsigned int **v6;
  unsigned int v7;
  uint64_t v8;
  char v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  char v15;
  char v16;
  uint64_t v17;
  char v18;
  char v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t *v24;
  unsigned int *v25;
  unsigned int *v26;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  __int16 v30;
  uint64_t v31;
  uint64_t v32;
  unsigned int v33;
  uint64_t v34;
  unint64_t v35;
  uint64_t *v36;
  uint64_t *v37;
  int v38;
  int64_t v39;
  unint64_t v41;
  unsigned int v42;
  unint64_t v43;
  BOOL v44;
  uint64_t v45;
  char *v46;
  _OWORD *v47;
  __int128 v48;
  __int128 v49;
  unsigned int v50;
  uint64_t v51;
  uint64_t v52;
  int v53;
  unsigned int v54;
  unsigned int *v55;
  uint64_t v56;
  __int128 v57;
  uint64_t v58;
  int v59;
  BOOL v60;
  unsigned int *v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  char *v65;
  char *v66;
  char *v67;
  int v68;
  void *v69;
  char *v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t *v73;
  int v74;
  int v75;
  uint64_t v76;
  uint64_t v77;
  unsigned int v78;
  unsigned int *v79;
  unsigned int v80;
  int v81;
  int v82;
  int v83;
  _WORD v84[9];
  char v85;
  unint64_t v86;
  unsigned int **v87;
  char v88;
  uint64_t v89;

  v89 = *MEMORY[0x1E0C80C00];
  llvm::mca::InstrBuilder::getOrCreateInstrDesc(a1, a2, (uint64_t)&v87);
  v6 = v87;
  if ((v88 & 1) != 0)
  {
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v6;
  }
  else
  {
    v76 = a3;
    v7 = *a2;
    v8 = operator new();
    *(_QWORD *)v8 = v6;
    *(_BYTE *)(v8 + 8) = 0;
    *(_QWORD *)(v8 + 16) = v8 + 32;
    v73 = (uint64_t *)(v8 + 16);
    *(_QWORD *)(v8 + 24) = 0x200000000;
    v72 = v8 + 320;
    *(_QWORD *)(v8 + 304) = v8 + 320;
    *(_QWORD *)(v8 + 312) = 0x400000000;
    *(_QWORD *)(v8 + 512) = 0;
    *(_QWORD *)(v8 + 528) = 0;
    *(_QWORD *)(v8 + 520) = 0;
    *(_DWORD *)(v8 + 536) = v7;
    v9 = *(_BYTE *)(v8 + 540);
    *(_BYTE *)(v8 + 540) = v9 & 0xFC;
    *(_OWORD *)(v8 + 544) = xmmword_1C8663B90;
    *(_QWORD *)(v8 + 560) = v6[31];
    *(_BYTE *)(v8 + 600) = 0;
    *(_OWORD *)(v8 + 568) = 0u;
    *(_OWORD *)(v8 + 584) = 0u;
    v10 = *(_QWORD *)a1;
    v11 = *((_DWORD *)v6 + 72);
    v12 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 160) + 40);
    v13 = **(_QWORD **)(a1 + 8) + 48 * *a2;
    v14 = (*(_DWORD *)(v13 + 8) >> 17) & 4 | v9 & 0xF8;
    *(_BYTE *)(v8 + 540) = v14;
    v15 = v14 & 0xF7 | (*(_DWORD *)(v13 + 8) >> 17) & 8;
    *(_BYTE *)(v8 + 540) = v15;
    v16 = v15 & 0xEF | (*(_DWORD *)(v13 + 8) >> 20) & 0x10;
    *(_BYTE *)(v8 + 540) = v16;
    v17 = v12 + 24 * v11;
    v18 = v16 & 0xDF | *(_BYTE *)(v17 + 9) & 0x20;
    *(_BYTE *)(v8 + 540) = v18;
    v19 = v18 & 0xBF | *(_BYTE *)(v17 + 9) & 0x40;
    *(_BYTE *)(v8 + 540) = v19;
    *(_BYTE *)(v8 + 540) = v19 & 0x7C | *(_BYTE *)(v17 + 9) & 0x80;
    v78 = 1;
    v77 = 0;
    v20 = *(_QWORD *)(a1 + 24);
    if (v20)
    {
      v21 = *(unsigned int *)(*(_QWORD *)(v10 + 160) + 28);
      v74 = (*(uint64_t (**)(uint64_t, unsigned int *, uint64_t *, uint64_t))(*(_QWORD *)v20 + 80))(v20, a2, &v77, v21);
      if ((v74 & 1) != 0)
        v22 = 1;
      else
        v22 = (*(uint64_t (**)(_QWORD, unsigned int *, uint64_t *, uint64_t))(**(_QWORD **)(a1 + 24) + 88))(*(_QWORD *)(a1 + 24), a2, &v77, v21);
      if ((*(unsigned int (**)(_QWORD, unsigned int *, uint64_t))(**(_QWORD **)(a1 + 24) + 96))(*(_QWORD *)(a1 + 24), a2, v21))
      {
        *(_BYTE *)(v8 + 8) = 1;
      }
    }
    else
    {
      v74 = 0;
      v22 = 0;
    }
    v23 = *((unsigned int *)v6 + 16);
    if ((_DWORD)v23)
    {
      v24 = (uint64_t *)(v8 + 304);
      v25 = v6[7];
      v26 = &v25[4 * v23];
      v27 = v84;
      do
      {
        v28 = *v25;
        if ((v28 & 0x80000000) != 0)
        {
          v30 = *((_WORD *)v25 + 4);
          if (!v30)
            goto LABEL_35;
        }
        else
        {
          v29 = *((_QWORD *)a2 + 2);
          if (*(_BYTE *)(v29 + 16 * v28) != 1)
            goto LABEL_35;
          v30 = *(_WORD *)(v29 + 16 * v28 + 8);
          if (!v30)
            goto LABEL_35;
        }
        v31 = *(unsigned int *)(v8 + 312);
        if (v31 >= *(_DWORD *)(v8 + 316))
        {
          v79 = v25;
          LOWORD(v80) = v30;
          v81 = 0;
          v82 = 0;
          v83 = -512;
          *v27 = 0;
          v27[1] = 0;
          v71 = v27;
          v84[8] = 1;
          v85 = 0;
          v43 = v31 + 1;
          v44 = *v24 + 48 * (unint64_t)v31 > (unint64_t)&v79;
          if (*v24 <= (unint64_t)&v79 && v44)
          {
            v70 = (char *)&v79 - *v24;
            llvm::SmallVectorBase<unsigned int>::grow_pod(v8 + 304, v72, v43, 48);
            v45 = *v24;
            v46 = &v70[*v24];
          }
          else
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v8 + 304, v72, v43, 48);
            v45 = *v24;
            v46 = (char *)&v79;
          }
          v47 = (_OWORD *)(v45 + 48 * *(unsigned int *)(v8 + 312));
          v48 = *(_OWORD *)v46;
          v49 = *((_OWORD *)v46 + 2);
          v47[1] = *((_OWORD *)v46 + 1);
          v47[2] = v49;
          *v47 = v48;
          v33 = *(_DWORD *)(v8 + 312) + 1;
          *(_DWORD *)(v8 + 312) = v33;
          v27 = v71;
          if (!v22)
            goto LABEL_35;
        }
        else
        {
          v32 = *(_QWORD *)(v8 + 304) + 48 * v31;
          *(_QWORD *)v32 = v25;
          *(_WORD *)(v32 + 8) = v30;
          *(_DWORD *)(v32 + 12) = 0;
          *(_DWORD *)(v32 + 16) = 0;
          *(_DWORD *)(v32 + 20) = -512;
          *(_QWORD *)(v32 + 24) = 0;
          *(_QWORD *)(v32 + 32) = 0;
          *(_WORD *)(v32 + 40) = 1;
          *(_BYTE *)(v32 + 42) = 0;
          v33 = *(_DWORD *)(v8 + 312) + 1;
          *(_DWORD *)(v8 + 312) = v33;
          if (!v22)
            goto LABEL_35;
        }
        if (v78 > 0x40)
        {
          v38 = 0;
          v39 = ((unint64_t)v78 + 63) >> 6;
          v34 = v77;
          do
          {
            if (v39-- < 1)
              break;
            v41 = *(_QWORD *)(v77 + 8 * v39);
            v38 += __clz(v41);
          }
          while (!v41);
          v42 = v78 | 0xFFFFFFC0;
          if ((v78 & 0x3F) == 0)
            v42 = 0;
          if (v38 + v42 != v78)
          {
LABEL_21:
            v35 = v25[1];
            if (v78 <= v35)
              goto LABEL_35;
            v36 = (uint64_t *)(v34 + ((v35 >> 3) & 0x1FFFFFF8));
            v37 = v78 >= 0x41 ? v36 : &v77;
            if ((((unint64_t)*v37 >> v25[1]) & 1) == 0)
              goto LABEL_35;
LABEL_34:
            *(_BYTE *)(*v24 + 48 * v33 - 6) = 1;
            goto LABEL_35;
          }
        }
        else
        {
          v34 = v77;
          if (v77)
            goto LABEL_21;
        }
        if ((*v25 & 0x80000000) == 0)
          goto LABEL_34;
LABEL_35:
        v25 += 4;
      }
      while (v25 != v26);
    }
    v50 = *((_DWORD *)v6 + 2);
    if (v50)
    {
      v80 = *((_DWORD *)v6 + 2);
      if (v50 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&v79, 0, 0);
      else
        v79 = 0;
      v51 = *(_QWORD *)(a1 + 24);
      if (v51)
        (*(void (**)(uint64_t, _QWORD, unsigned int *, unsigned int **))(*(_QWORD *)v51 + 72))(v51, *(_QWORD *)(a1 + 16), a2, &v79);
      v52 = *((unsigned int *)v6 + 2);
      v53 = v74;
      if ((_DWORD)v52)
      {
        v54 = 0;
        v55 = *v6;
        v56 = 20 * v52;
        v57 = 0uLL;
        do
        {
          v58 = *v55;
          if ((v58 & 0x80000000) != 0)
            LOWORD(v59) = *((_WORD *)v55 + 4);
          else
            v59 = *(_DWORD *)(*((_QWORD *)a2 + 2) + 16 * v58 + 8);
          if (*((_BYTE *)v55 + 16))
            v60 = (unsigned __int16)v59 == 0;
          else
            v60 = 0;
          if (!v60)
          {
            if (v80 >= 0x41)
              v61 = &v79[2 * (v54 >> 6)];
            else
              v61 = (unsigned int *)&v79;
            v62 = (*(_QWORD *)v61 >> v54) & 1;
            v63 = *(_DWORD *)(v8 + 24);
            if (v63 >= *(_DWORD *)(v8 + 28))
            {
              v86 = 0;
              v75 = v53;
              v65 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)v73, 0, 136, &v86);
              v66 = &v65[136 * *(unsigned int *)(v8 + 24)];
              *(_QWORD *)v66 = v55;
              *((_DWORD *)v66 + 2) = -512;
              *((_WORD *)v66 + 6) = v59;
              v67 = v65;
              *((_DWORD *)v66 + 4) = 0;
              v66[20] = v62;
              v66[21] = v75;
              v66[22] = 0;
              *(_OWORD *)(v66 + 24) = 0u;
              *(_OWORD *)(v66 + 40) = 0u;
              *((_QWORD *)v66 + 7) = v66 + 72;
              *((_QWORD *)v66 + 8) = 0x400000000;
              sub_1C597E0C4(v73, (uint64_t)v65);
              v68 = v86;
              v69 = *(void **)(v8 + 16);
              if (v69 != (void *)(v8 + 32))
                free(v69);
              *(_QWORD *)(v8 + 16) = v67;
              ++*(_DWORD *)(v8 + 24);
              *(_DWORD *)(v8 + 28) = v68;
              v53 = v75;
              v57 = 0uLL;
            }
            else
            {
              v64 = *(_QWORD *)(v8 + 16) + 136 * v63;
              *(_QWORD *)v64 = v55;
              *(_DWORD *)(v64 + 8) = -512;
              *(_WORD *)(v64 + 12) = v59;
              *(_DWORD *)(v64 + 16) = 0;
              *(_BYTE *)(v64 + 20) = v62;
              *(_BYTE *)(v64 + 21) = v53;
              *(_BYTE *)(v64 + 22) = 0;
              *(_OWORD *)(v64 + 24) = v57;
              *(_OWORD *)(v64 + 40) = v57;
              *(_QWORD *)(v64 + 56) = v64 + 72;
              *(_QWORD *)(v64 + 64) = 0x400000000;
              ++*(_DWORD *)(v8 + 24);
            }
          }
          ++v54;
          v55 += 5;
          v56 -= 20;
        }
        while (v56);
      }
      *(_BYTE *)(v76 + 8) &= ~1u;
      *(_QWORD *)v76 = v8;
      if (v80 >= 0x41 && v79)
        MEMORY[0x1CAA32F9C](v79, 0x1000C8000313F17);
    }
    else
    {
      *(_BYTE *)(v76 + 8) &= ~1u;
      *(_QWORD *)v76 = v8;
    }
    if (v78 >= 0x41 && v77)
      MEMORY[0x1CAA32F9C](v77, 0x1000C8000313F17);
    if ((v88 & 1) != 0)
    {
      if (v87)
        (*((void (**)(unsigned int **))*v87 + 1))(v87);
    }
  }
}

void sub_1C597C4D4(uint64_t a1, unint64_t a2, uint64_t a3, char a4)
{
  int8x8_t *v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int8x8_t *v13;
  uint64_t v14;
  int8x8_t v15;
  int8x8_t v16;
  uint8x8_t v17;
  unsigned int v18;
  uint8x8_t v19;
  unsigned int v20;
  uint8x8_t v21;
  uint64_t k;
  int8x8_t v23;
  uint8x8_t v24;
  unint64_t v26;
  int8x8_t *v27;
  int8x8_t *v28;
  int8x8_t v29;
  uint8x8_t v30;
  int8x8_t *v32;
  int8x8_t v33;
  uint8x8_t v34;
  int8x8_t v36;
  int8x8_t *v37;
  int8x8_t v38;
  uint8x8_t v39;
  int8x8_t *v41;
  uint8x8_t v42;
  BOOL v44;
  int8x8_t v45;
  uint8x8_t v46;
  int8x8_t *v47;
  int8x8_t v48;
  uint8x8_t v49;
  BOOL v50;
  unint64_t j;
  uint8x8_t v52;
  int8x8_t v53;
  int8x8_t v54;
  int8x8_t v55;
  int8x8_t *v56;
  uint8x8_t v57;
  int8x8_t v59;
  uint8x8_t v60;
  int8x8_t *v62;
  int8x8_t v63;
  uint8x8_t v64;
  int8x8_t v66;
  uint8x8_t v67;
  unsigned int v68;
  int8x8_t v69;
  uint8x8_t v70;
  BOOL v71;
  int8x8_t v72;
  uint8x8_t v73;
  unsigned int v74;
  int8x8_t v75;
  uint8x8_t v76;
  __int128 v77;
  int8x8_t v78;
  unsigned int v79;
  int8x8_t v80;
  uint8x8_t v81;
  __int128 v82;
  int8x8_t v83;
  uint8x8_t v84;
  __int128 v85;
  int8x8_t v86;
  uint8x8_t v87;
  unint64_t v88;
  BOOL v90;
  uint64_t v91;
  unint64_t v92;
  unint64_t v93;
  int8x8_t v94;
  uint8x8_t v95;
  unsigned int v96;
  uint8x8_t v97;
  BOOL v98;
  uint64_t v99;
  uint64_t v100;
  int8x8_t v101;
  uint8x8_t v102;
  _OWORD *v104;
  _QWORD *v105;
  int64_t v106;
  int64_t v107;
  int64_t v108;
  uint64_t v109;
  unint64_t v110;
  int8x8_t v111;
  uint8x8_t v112;
  unsigned int v113;
  uint8x8_t v114;
  BOOL v115;
  uint8x8_t v116;
  unint64_t v117;
  int8x8_t v118;
  uint8x8_t v119;
  unsigned int v120;
  int8x8_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint8x8_t v126;
  unsigned int v127;
  uint8x8_t v128;
  BOOL v129;
  uint8x8_t v130;
  uint64_t v132;
  int8x8_t v133;
  unint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int8x8_t v138;
  uint8x8_t v139;
  unsigned int v140;
  uint8x8_t v141;
  BOOL v142;
  __int128 *v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  uint8x8_t v148;
  unsigned int v149;
  int8x8_t v150;
  uint8x8_t v151;
  unsigned int v152;
  BOOL v153;
  __int128 *v154;
  int8x8_t *v155;
  unint64_t v156;
  int8x8_t v157;
  uint8x8_t v158;
  unint64_t v160;
  uint64_t v161;
  int8x8_t v162;
  uint8x8_t v163;
  unsigned int v164;
  uint8x8_t v165;
  BOOL v166;
  int8x8_t v167;
  unint64_t i;
  uint8x8_t v169;
  __int128 v171;
  __int128 v172;
  __int128 v173;
  __int128 v174;
  __int128 v175;
  __int128 v176;
  __int128 v177;
  __int128 v178;
  __int128 v179;
  __int128 v180;
  __int128 v181;
  __int128 v182;

uint64_t sub_1C597D1A0(uint64_t result, uint64_t a2, uint64_t a3)
{
  int8x8_t v3;
  uint8x8_t v4;
  unsigned int v5;
  int8x8_t v6;
  uint8x8_t v7;
  BOOL v8;
  int8x8_t v9;
  uint8x8_t v10;
  BOOL v11;
  __int128 v12;
  int8x8_t v13;
  unsigned int v14;
  int8x8_t v15;
  uint8x8_t v16;
  __int128 v17;
  int8x8_t v18;
  uint8x8_t v19;
  BOOL v20;
  __int128 v21;
  int8x8_t v22;
  unsigned int v23;
  int8x8_t v24;
  uint8x8_t v25;
  __int128 v26;

  v3 = *(int8x8_t *)a2;
  v4 = (uint8x8_t)vcnt_s8(*(int8x8_t *)a2);
  v4.i16[0] = vaddlv_u8(v4);
  v5 = v4.i32[0];
  v6 = *(int8x8_t *)result;
  v7 = (uint8x8_t)vcnt_s8(*(int8x8_t *)result);
  v7.i16[0] = vaddlv_u8(v7);
  if (v5 >= v7.i32[0] && (*(_QWORD *)&v3 < *(_QWORD *)&v6 ? (v8 = v5 > v7.i32[0]) : (v8 = 1), v8))
  {
    v9 = *(int8x8_t *)a3;
    v10 = (uint8x8_t)vcnt_s8(*(int8x8_t *)a3);
    v10.i16[0] = vaddlv_u8(v10);
    if (v10.i32[0] < v5 || (*(_QWORD *)&v9 < *(_QWORD *)&v3 ? (v11 = v10.i32[0] > v5) : (v11 = 1), !v11))
    {
      *(int8x8_t *)a2 = v9;
      *(int8x8_t *)a3 = v3;
      v12 = *(_OWORD *)(a2 + 8);
      *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
      *(_OWORD *)(a3 + 8) = v12;
      v13 = *(int8x8_t *)a2;
      *(int8x8_t *)&v12 = vcnt_s8(*(int8x8_t *)a2);
      LOWORD(v12) = vaddlv_u8(*(uint8x8_t *)&v12);
      v14 = v12;
      v15 = *(int8x8_t *)result;
      v16 = (uint8x8_t)vcnt_s8(*(int8x8_t *)result);
      v16.i16[0] = vaddlv_u8(v16);
      if (v14 < v16.i32[0] || *(_QWORD *)&v13 < *(_QWORD *)&v15 && v14 <= v16.i32[0])
      {
        *(int8x8_t *)result = v13;
        *(int8x8_t *)a2 = v15;
        v17 = *(_OWORD *)(result + 8);
        *(_OWORD *)(result + 8) = *(_OWORD *)(a2 + 8);
        *(_OWORD *)(a2 + 8) = v17;
      }
    }
  }
  else
  {
    v18 = *(int8x8_t *)a3;
    v19 = (uint8x8_t)vcnt_s8(*(int8x8_t *)a3);
    v19.i16[0] = vaddlv_u8(v19);
    if (v19.i32[0] < v5 || (*(_QWORD *)&v18 < *(_QWORD *)&v3 ? (v20 = v19.i32[0] > v5) : (v20 = 1), !v20))
    {
      *(int8x8_t *)result = v18;
      *(int8x8_t *)a3 = v6;
      v26 = *(_OWORD *)(result + 8);
      *(_OWORD *)(result + 8) = *(_OWORD *)(a3 + 8);
      goto LABEL_27;
    }
    *(int8x8_t *)result = v3;
    *(int8x8_t *)a2 = v6;
    v21 = *(_OWORD *)(result + 8);
    *(_OWORD *)(result + 8) = *(_OWORD *)(a2 + 8);
    *(_OWORD *)(a2 + 8) = v21;
    v22 = *(int8x8_t *)a3;
    *(int8x8_t *)&v21 = vcnt_s8(*(int8x8_t *)a3);
    LOWORD(v21) = vaddlv_u8(*(uint8x8_t *)&v21);
    v23 = v21;
    v24 = *(int8x8_t *)a2;
    v25 = (uint8x8_t)vcnt_s8(*(int8x8_t *)a2);
    v25.i16[0] = vaddlv_u8(v25);
    if (v23 < v25.i32[0] || *(_QWORD *)&v22 < *(_QWORD *)&v24 && v23 <= v25.i32[0])
    {
      *(int8x8_t *)a2 = v22;
      *(int8x8_t *)a3 = v24;
      v26 = *(_OWORD *)(a2 + 8);
      *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
LABEL_27:
      *(_OWORD *)(a3 + 8) = v26;
    }
  }
  return result;
}

BOOL sub_1C597D33C(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  _BOOL8 result;
  int8x8_t v6;
  uint8x8_t v7;
  unsigned int v8;
  int8x8_t v9;
  uint8x8_t v10;
  BOOL v11;
  __int128 v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  int8x8_t v17;
  uint8x8_t v18;
  unsigned int v19;
  uint8x8_t v20;
  BOOL v21;
  uint64_t v22;
  uint64_t v23;
  int8x8_t v24;
  uint8x8_t v25;
  _OWORD *v27;
  _QWORD *v28;
  uint64_t v29;
  int8x8_t v30;
  uint8x8_t v31;
  unsigned int v32;
  int8x8_t v33;
  uint8x8_t v34;
  __int128 v35;
  int8x8_t v36;
  unsigned int v37;
  int8x8_t v38;
  uint8x8_t v39;
  __int128 v40;
  int8x8_t v41;
  uint8x8_t v42;
  __int128 v43;
  int8x8_t v44;
  uint8x8_t v45;
  __int128 v46;
  __int128 v47;

  v4 = 0xAAAAAAAAAAAAAAABLL * ((a2 - a1) >> 3);
  result = 1;
  switch(v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      v6 = *(int8x8_t *)(a2 - 24);
      v7 = (uint8x8_t)vcnt_s8(v6);
      v7.i16[0] = vaddlv_u8(v7);
      v8 = v7.i32[0];
      v9 = *(int8x8_t *)a1;
      v10 = (uint8x8_t)vcnt_s8(*(int8x8_t *)a1);
      v10.i16[0] = vaddlv_u8(v10);
      if (v8 < v10.i32[0] || (*(_QWORD *)&v6 < *(_QWORD *)&v9 ? (v11 = v8 > v10.i32[0]) : (v11 = 1), !v11))
      {
        *(int8x8_t *)a1 = v6;
        *(int8x8_t *)(a2 - 24) = v9;
        v12 = *(_OWORD *)(a1 + 8);
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 - 16);
        *(_OWORD *)(a2 - 16) = v12;
      }
      return result;
    case 3uLL:
      sub_1C597D1A0(a1, a1 + 24, a2 - 24);
      return 1;
    case 4uLL:
      sub_1C597D6C8(a1, a1 + 24, a1 + 48, a2 - 24);
      return 1;
    case 5uLL:
      sub_1C597D6C8(a1, a1 + 24, a1 + 48, a1 + 72);
      v30 = *(int8x8_t *)(a2 - 24);
      v31 = (uint8x8_t)vcnt_s8(v30);
      v31.i16[0] = vaddlv_u8(v31);
      v32 = v31.i32[0];
      v33 = *(int8x8_t *)(a1 + 72);
      v34 = (uint8x8_t)vcnt_s8(v33);
      v34.i16[0] = vaddlv_u8(v34);
      if (v32 >= v34.i32[0])
      {
        result = 1;
        if (*(_QWORD *)&v30 >= *(_QWORD *)&v33 || v32 > v34.i32[0])
          return result;
      }
      *(int8x8_t *)(a1 + 72) = v30;
      *(int8x8_t *)(a2 - 24) = v33;
      v35 = *(_OWORD *)(a1 + 80);
      *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 - 16);
      *(_OWORD *)(a2 - 16) = v35;
      v36 = *(int8x8_t *)(a1 + 72);
      *(int8x8_t *)&v35 = vcnt_s8(v36);
      LOWORD(v35) = vaddlv_u8(*(uint8x8_t *)&v35);
      v37 = v35;
      v38 = *(int8x8_t *)(a1 + 48);
      v39 = (uint8x8_t)vcnt_s8(v38);
      v39.i16[0] = vaddlv_u8(v39);
      if (v37 >= v39.i32[0])
      {
        result = 1;
        if (*(_QWORD *)&v36 >= *(_QWORD *)&v38 || v37 > v39.i32[0])
          return result;
      }
      *(int8x8_t *)(a1 + 48) = v36;
      *(int8x8_t *)(a1 + 72) = v38;
      v40 = *(_OWORD *)(a1 + 56);
      *(_OWORD *)(a1 + 56) = *(_OWORD *)(a1 + 80);
      *(_OWORD *)(a1 + 80) = v40;
      v41 = *(int8x8_t *)(a1 + 24);
      v42 = (uint8x8_t)vcnt_s8(v41);
      v42.i16[0] = vaddlv_u8(v42);
      if (v37 >= v42.i32[0])
      {
        result = 1;
        if (*(_QWORD *)&v36 >= *(_QWORD *)&v41 || v37 > v42.i32[0])
          return result;
      }
      *(int8x8_t *)(a1 + 24) = v36;
      *(int8x8_t *)(a1 + 48) = v41;
      v43 = *(_OWORD *)(a1 + 32);
      *(_OWORD *)(a1 + 32) = *(_OWORD *)(a1 + 56);
      *(_OWORD *)(a1 + 56) = v43;
      v44 = *(int8x8_t *)a1;
      v45 = (uint8x8_t)vcnt_s8(*(int8x8_t *)a1);
      v45.i16[0] = vaddlv_u8(v45);
      if (v37 >= v45.i32[0])
      {
        result = 1;
        if (*(_QWORD *)&v36 >= *(_QWORD *)&v44 || v37 > v45.i32[0])
          return result;
      }
      *(int8x8_t *)a1 = v36;
      *(int8x8_t *)(a1 + 24) = v44;
      v46 = *(_OWORD *)(a1 + 8);
      *(_OWORD *)(a1 + 8) = *(_OWORD *)(a1 + 32);
      *(_OWORD *)(a1 + 32) = v46;
      return 1;
    default:
      v13 = a1 + 48;
      sub_1C597D1A0(a1, a1 + 24, a1 + 48);
      v14 = a1 + 72;
      if (a1 + 72 == a2)
        return 1;
      v15 = 0;
      v16 = 0;
      break;
  }
  while (1)
  {
    v17 = *(int8x8_t *)v14;
    v18 = (uint8x8_t)vcnt_s8(*(int8x8_t *)v14);
    v18.i16[0] = vaddlv_u8(v18);
    v19 = v18.i32[0];
    v20 = (uint8x8_t)vcnt_s8(*(int8x8_t *)v13);
    v20.i16[0] = vaddlv_u8(v20);
    if (v19 < v20.i32[0] || (*(_QWORD *)&v17 < *(_QWORD *)v13 ? (v21 = v19 > v20.i32[0]) : (v21 = 1), !v21))
    {
      v47 = *(_OWORD *)(v14 + 8);
      *(_QWORD *)v14 = *(_QWORD *)v13;
      *(_OWORD *)(v14 + 8) = *(_OWORD *)(v13 + 8);
      if (v13 == a1)
      {
        v27 = (_OWORD *)(v13 + 8);
LABEL_25:
        v28 = (_QWORD *)a1;
      }
      else
      {
        v22 = v15;
        while (1)
        {
          v23 = a1 + v22;
          v24 = *(int8x8_t *)(a1 + v22 + 24);
          v25 = (uint8x8_t)vcnt_s8(v24);
          v25.i16[0] = vaddlv_u8(v25);
          if (v19 >= v25.i32[0] && (*(_QWORD *)&v17 >= *(_QWORD *)&v24 || v19 > v25.i32[0]))
            break;
          *(int8x8_t *)(v23 + 48) = v24;
          *(_OWORD *)(v23 + 56) = *(_OWORD *)(v23 + 32);
          v22 -= 24;
          if (v22 == -48)
          {
            v27 = (_OWORD *)(a1 + 8);
            goto LABEL_25;
          }
        }
        v29 = a1 + v22;
        v27 = (_OWORD *)(v29 + 56);
        v28 = (_QWORD *)(v29 + 48);
      }
      *v28 = v17;
      *v27 = v47;
      if (++v16 == 8)
        return v14 + 24 == a2;
    }
    v13 = v14;
    v15 += 24;
    v14 += 24;
    if (v14 == a2)
      return 1;
  }
}

__n128 sub_1C597D6C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int8x8_t v8;
  unsigned __int32 v9;
  int8x8_t v10;
  __n128 result;
  BOOL v12;
  int8x8_t v13;
  unsigned __int32 v14;
  int8x8_t v15;
  BOOL v16;
  int8x8_t v17;
  unsigned __int32 v18;
  int8x8_t v19;

  sub_1C597D1A0(a1, a2, a3);
  v8 = *(int8x8_t *)a4;
  result.n128_u64[0] = (unint64_t)vcnt_s8(*(int8x8_t *)a4);
  result.n128_u16[0] = vaddlv_u8((uint8x8_t)result.n128_u64[0]);
  v9 = result.n128_u32[0];
  v10 = *(int8x8_t *)a3;
  result.n128_u64[0] = (unint64_t)vcnt_s8(*(int8x8_t *)a3);
  result.n128_u16[0] = vaddlv_u8((uint8x8_t)result.n128_u64[0]);
  if (v9 < result.n128_u32[0] || (*(_QWORD *)&v8 < *(_QWORD *)&v10 ? (v12 = v9 > result.n128_u32[0]) : (v12 = 1), !v12))
  {
    *(int8x8_t *)a3 = v8;
    *(int8x8_t *)a4 = v10;
    result = *(__n128 *)(a3 + 8);
    *(_OWORD *)(a3 + 8) = *(_OWORD *)(a4 + 8);
    *(__n128 *)(a4 + 8) = result;
    v13 = *(int8x8_t *)a3;
    result.n128_u64[0] = (unint64_t)vcnt_s8(*(int8x8_t *)a3);
    result.n128_u16[0] = vaddlv_u8((uint8x8_t)result.n128_u64[0]);
    v14 = result.n128_u32[0];
    v15 = *(int8x8_t *)a2;
    result.n128_u64[0] = (unint64_t)vcnt_s8(*(int8x8_t *)a2);
    result.n128_u16[0] = vaddlv_u8((uint8x8_t)result.n128_u64[0]);
    if (v14 < result.n128_u32[0]
      || (*(_QWORD *)&v13 < *(_QWORD *)&v15 ? (v16 = v14 > result.n128_u32[0]) : (v16 = 1), !v16))
    {
      *(int8x8_t *)a2 = v13;
      *(int8x8_t *)a3 = v15;
      result = *(__n128 *)(a2 + 8);
      *(_OWORD *)(a2 + 8) = *(_OWORD *)(a3 + 8);
      *(__n128 *)(a3 + 8) = result;
      v17 = *(int8x8_t *)a2;
      result.n128_u64[0] = (unint64_t)vcnt_s8(*(int8x8_t *)a2);
      result.n128_u16[0] = vaddlv_u8((uint8x8_t)result.n128_u64[0]);
      v18 = result.n128_u32[0];
      v19 = *(int8x8_t *)a1;
      result.n128_u64[0] = (unint64_t)vcnt_s8(*(int8x8_t *)a1);
      result.n128_u16[0] = vaddlv_u8((uint8x8_t)result.n128_u64[0]);
      if (v18 < result.n128_u32[0] || *(_QWORD *)&v17 < *(_QWORD *)&v19 && v18 <= result.n128_u32[0])
      {
        *(int8x8_t *)a1 = v17;
        *(int8x8_t *)a2 = v19;
        result = *(__n128 *)(a1 + 8);
        *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
        *(__n128 *)(a2 + 8) = result;
      }
    }
  }
  return result;
}

uint64_t sub_1C597D80C(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E8184908;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  return a1;
}

void sub_1C597D848(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E8184908;
  if (*(char *)(a1 + 31) < 0)
    operator delete(*(void **)(a1 + 8));
  JUMPOUT(0x1CAA32FC0);
}

llvm::raw_ostream *sub_1C597D894(uint64_t a1, llvm::raw_ostream *this)
{
  uint64_t v3;
  const char *v4;
  const char *v5;
  char v6;
  int v7;
  const char *v8;
  size_t v9;
  size_t v10;

  v5 = *(const char **)(a1 + 8);
  v3 = a1 + 8;
  v4 = v5;
  v6 = *(_BYTE *)(v3 + 23);
  v7 = v6;
  if (v6 >= 0)
    v8 = (const char *)v3;
  else
    v8 = v4;
  v9 = v6 & 0x7F;
  if (v7 >= 0)
    v10 = v9;
  else
    v10 = *(_QWORD *)(v3 + 8);
  return llvm::raw_ostream::write(this, v8, v10);
}

uint64_t sub_1C597D8C0()
{
  if (!atomic_load(qword_1ED836B58))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED836B58, (void *(*)(void))sub_1C5DF15F0, (void (*)(void *))sub_1C5DF1624);
  return 3;
}

void *sub_1C597D90C()
{
  return &llvm::mca::InstructionError<llvm::MCInst>::ID;
}

BOOL sub_1C597D918(uint64_t a1, void *a2)
{
  return a2 == &llvm::mca::InstructionError<llvm::MCInst>::ID || a2 == &llvm::ErrorInfoBase::ID;
}

void sub_1C597D938(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    if (v2 <= a2)
    {
      if (*(unsigned int *)(a1 + 12) < a2)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, a2, 20);
        v2 = *(unsigned int *)(a1 + 8);
      }
      if (a2 != v2)
        bzero((void *)(*(_QWORD *)a1 + 20 * v2), 20 * ((20 * (a2 - v2) - 20) / 0x14) + 20);
    }
    *(_DWORD *)(a1 + 8) = a2;
  }
}

void sub_1C597D9C8(uint64_t a1, unint64_t a2)
{
  unint64_t v2;

  v2 = *(unsigned int *)(a1 + 8);
  if (v2 != a2)
  {
    if (v2 <= a2)
    {
      if (*(unsigned int *)(a1 + 12) < a2)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, a2, 16);
        v2 = *(unsigned int *)(a1 + 8);
      }
      if (a2 != v2)
        bzero((void *)(*(_QWORD *)a1 + 16 * v2), 16 * (a2 - v2));
    }
    *(_DWORD *)(a1 + 8) = a2;
  }
}

unsigned __int16 *sub_1C597DA38(uint64_t a1, unsigned __int16 *a2)
{
  unsigned int v4;
  int v5;
  unsigned int v6;
  unsigned __int16 *result;
  int v8;
  unsigned __int16 *v9;
  int v10;
  BOOL v11;
  unsigned int v12;
  int v13;
  int v14;
  int v15;
  unsigned int v16;
  int v17;
  unsigned __int16 *v18;
  int v19;
  BOOL v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  int v24;
  int v25;
  BOOL v26;
  unsigned int v27;

  v4 = *(_DWORD *)(a1 + 16);
  if (v4)
  {
    v5 = *a2;
    v6 = (37 * v5) & (v4 - 1);
    result = (unsigned __int16 *)(*(_QWORD *)a1 + 16 * v6);
    v8 = *result;
    if (v5 == v8)
      return result;
    v9 = 0;
    v10 = 1;
    while (v8 != 0xFFFF)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v8 == 65534;
      if (v11)
        v9 = result;
      v12 = v6 + v10++;
      v6 = v12 & (v4 - 1);
      result = (unsigned __int16 *)(*(_QWORD *)a1 + 16 * v6);
      v8 = *result;
      if (v5 == v8)
        return result;
    }
    if (v9)
      result = v9;
  }
  else
  {
    result = 0;
  }
  v13 = *(_DWORD *)(a1 + 8);
  if (4 * v13 + 4 >= 3 * v4)
  {
    sub_1C597DC40((unsigned __int16 **)a1, 2 * v4);
    v14 = *a2;
    v15 = *(_DWORD *)(a1 + 16) - 1;
    v16 = (37 * v14) & v15;
    result = (unsigned __int16 *)(*(_QWORD *)a1 + 16 * v16);
    v17 = *result;
    if (v14 == v17)
      goto LABEL_16;
    v18 = 0;
    v19 = 1;
    while (v17 != 0xFFFF)
    {
      if (v18)
        v20 = 0;
      else
        v20 = v17 == 65534;
      if (v20)
        v18 = result;
      v21 = v16 + v19++;
      v16 = v21 & v15;
      result = (unsigned __int16 *)(*(_QWORD *)a1 + 16 * v16);
      v17 = *result;
      if (v14 == v17)
        goto LABEL_16;
    }
    goto LABEL_43;
  }
  if (v4 + ~v13 - *(_DWORD *)(a1 + 12) <= v4 >> 3)
  {
    sub_1C597DC40((unsigned __int16 **)a1, v4);
    v14 = *a2;
    v22 = *(_DWORD *)(a1 + 16) - 1;
    v23 = (37 * v14) & v22;
    result = (unsigned __int16 *)(*(_QWORD *)a1 + 16 * v23);
    v24 = *result;
    if (v14 == v24)
      goto LABEL_16;
    v18 = 0;
    v25 = 1;
    while (v24 != 0xFFFF)
    {
      if (v18)
        v26 = 0;
      else
        v26 = v24 == 65534;
      if (v26)
        v18 = result;
      v27 = v23 + v25++;
      v23 = v27 & v22;
      result = (unsigned __int16 *)(*(_QWORD *)a1 + 16 * v23);
      v24 = *result;
      if (v14 == v24)
        goto LABEL_16;
    }
LABEL_43:
    if (v18)
      result = v18;
  }
  v14 = *result;
LABEL_16:
  ++*(_DWORD *)(a1 + 8);
  if (v14 != 0xFFFF)
    --*(_DWORD *)(a1 + 12);
  *result = *a2;
  *((_QWORD *)result + 1) = 0;
  return result;
}

unsigned __int16 *sub_1C597DC40(unsigned __int16 **a1, int a2)
{
  uint64_t v3;
  unsigned __int16 *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  unsigned __int16 *result;
  uint64_t v10;
  uint64_t v11;
  unsigned __int16 *v12;
  unsigned __int16 *v13;
  unsigned int v14;
  int v15;
  unsigned int v16;
  unsigned __int16 *v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  void *v21;
  void *v22;
  unsigned __int16 *v23;
  int v24;
  BOOL v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;

  v3 = *((unsigned int *)a1 + 4);
  v4 = *a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *((_DWORD *)a1 + 4) = v8;
  result = (unsigned __int16 *)operator new(16 * v8, (std::align_val_t)8uLL);
  *a1 = result;
  if (v4)
  {
    a1[1] = 0;
    v10 = *((unsigned int *)a1 + 4);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -1;
        result += 8;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = v4;
      v13 = &v4[8 * v3];
      do
      {
        v14 = *v12;
        if (v14 <= 0xFFFD)
        {
          v15 = *((_DWORD *)a1 + 4) - 1;
          v16 = v15 & (37 * v14);
          v17 = &(*a1)[8 * v16];
          v18 = *v17;
          if (v14 != v18)
          {
            v23 = 0;
            v24 = 1;
            while (v18 != 0xFFFF)
            {
              if (v23)
                v25 = 0;
              else
                v25 = v18 == 65534;
              if (v25)
                v23 = v17;
              v26 = v16 + v24++;
              v16 = v26 & v15;
              v17 = &(*a1)[8 * (v26 & v15)];
              v18 = *v17;
              if (v14 == v18)
                goto LABEL_12;
            }
            if (v23)
              v17 = v23;
          }
LABEL_12:
          *v17 = v14;
          v19 = *((_QWORD *)v12 + 1);
          *((_QWORD *)v12 + 1) = 0;
          *((_QWORD *)v17 + 1) = v19;
          ++*((_DWORD *)a1 + 2);
          v20 = *((_QWORD *)v12 + 1);
          *((_QWORD *)v12 + 1) = 0;
          if (v20)
          {
            v21 = *(void **)(v20 + 136);
            if (v21 != (void *)(v20 + 152))
              free(v21);
            v22 = *(void **)(v20 + 56);
            if (v22 != (void *)(v20 + 72))
              free(v22);
            if (*(_QWORD *)v20 != v20 + 16)
              free(*(void **)v20);
            MEMORY[0x1CAA32FC0](v20, 0x1080C40CEB3F022);
          }
        }
        v12 += 8;
      }
      while (v12 != v13);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  a1[1] = 0;
  v27 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v27)
  {
    v28 = 16 * v27;
    do
    {
      *result = -1;
      result += 8;
      v28 -= 16;
    }
    while (v28);
  }
  return result;
}

uint64_t *sub_1C597DE4C(uint64_t a1, uint64_t *a2)
{
  char v4;
  uint64_t *result;
  int v6;
  unsigned int v7;
  uint64_t *v8;

  v8 = 0;
  v4 = sub_1C49F21C0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
  result = v8;
  if ((v4 & 1) != 0)
    return result;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_9;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_9:
    sub_1C597DF24(a1, v7);
    v8 = 0;
    sub_1C49F21C0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v8);
    result = v8;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*result != -4096)
    --*(_DWORD *)(a1 + 12);
  *result = *a2;
  result[1] = 0;
  return result;
}

_QWORD *sub_1C597DF24(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  _QWORD *v22;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 16 * v10;
      do
      {
        *result = -4096;
        result += 2;
        v11 -= 16;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = (uint64_t *)(v4 + 8);
      v13 = 16 * v3;
      do
      {
        v14 = *(v12 - 1);
        if ((v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v22 = 0;
          sub_1C49F21C0(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, &v22);
          v15 = v22;
          *v22 = *(v12 - 1);
          v16 = *v12;
          *v12 = 0;
          v15[1] = v16;
          ++*(_DWORD *)(a1 + 8);
          v17 = *v12;
          *v12 = 0;
          if (v17)
          {
            v18 = *(void **)(v17 + 136);
            if (v18 != (void *)(v17 + 152))
              free(v18);
            v19 = *(void **)(v17 + 56);
            if (v19 != (void *)(v17 + 72))
              free(v19);
            if (*(_QWORD *)v17 != v17 + 16)
              free(*(void **)v17);
            MEMORY[0x1CAA32FC0](v17, 0x1080C40CEB3F022);
          }
        }
        v12 += 2;
        v13 -= 16;
      }
      while (v13);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v20 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v20)
  {
    v21 = 16 * v20;
    do
    {
      *result = -4096;
      result += 2;
      v21 -= 16;
    }
    while (v21);
  }
  return result;
}

void sub_1C597E0C4(uint64_t *a1, uint64_t a2)
{
  unsigned int v2;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  __int128 v7;
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void *v14;

  v2 = *((_DWORD *)a1 + 2);
  if (v2)
  {
    v4 = *a1 + 136 * v2;
    v5 = (_QWORD *)(a2 + 56);
    v6 = *a1 + 56;
    do
    {
      v7 = *(_OWORD *)(v6 - 56);
      v8 = *(_OWORD *)(v6 - 40);
      v9 = *(_QWORD *)(v6 - 8);
      *(_OWORD *)(v5 - 3) = *(_OWORD *)(v6 - 24);
      *(_OWORD *)(v5 - 5) = v8;
      *(_OWORD *)(v5 - 7) = v7;
      *(v5 - 1) = v9;
      *v5 = v5 + 2;
      v5[1] = 0x400000000;
      if (*(_DWORD *)(v6 + 8))
        sub_1C597E19C((uint64_t)v5, (uint64_t *)v6);
      v10 = v6 - 56;
      v5 += 17;
      v6 += 136;
    }
    while (v10 + 136 != v4);
    v11 = *((unsigned int *)a1 + 2);
    if ((_DWORD)v11)
    {
      v12 = *a1;
      v13 = 136 * v11;
      do
      {
        v14 = *(void **)(v12 + v13 - 80);
        if ((void *)(v12 + v13 - 64) != v14)
          free(v14);
        v13 -= 136;
      }
      while (v13);
    }
  }
}

uint64_t sub_1C597E19C(uint64_t a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  if ((uint64_t *)a1 != a2)
  {
    v4 = *((unsigned int *)a2 + 2);
    v5 = *(unsigned int *)(a1 + 8);
    if (v5 >= v4)
    {
      if ((_DWORD)v4)
      {
        v7 = *a2;
        v8 = *a2 + 16 * v4;
        v9 = *(_QWORD *)a1;
        do
        {
          *(_QWORD *)v9 = *(_QWORD *)v7;
          *(_DWORD *)(v9 + 8) = *(_DWORD *)(v7 + 8);
          v7 += 16;
          v9 += 16;
        }
        while (v7 != v8);
      }
    }
    else
    {
      if (*(_DWORD *)(a1 + 12) >= v4)
      {
        if ((_DWORD)v5)
        {
          v10 = *a2;
          v11 = *a2 + 16 * v5;
          v12 = *(_QWORD *)a1;
          do
          {
            *(_QWORD *)v12 = *(_QWORD *)v10;
            *(_DWORD *)(v12 + 8) = *(_DWORD *)(v10 + 8);
            v10 += 16;
            v12 += 16;
          }
          while (v10 != v11);
        }
        else
        {
          v5 = 0;
        }
        v6 = v4;
      }
      else
      {
        *(_DWORD *)(a1 + 8) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v4, 16);
        v5 = 0;
        v6 = *((unsigned int *)a2 + 2);
      }
      if (v5 != v6)
        memcpy((void *)(*(_QWORD *)a1 + 16 * v5), (const void *)(*a2 + 16 * v5), *a2 + 16 * v6 - (*a2 + 16 * v5));
    }
    *(_DWORD *)(a1 + 8) = v4;
  }
  return a1;
}

uint64_t llvm::mca::WriteState::writeStartEvent(uint64_t this, int a2, __int16 a3, int a4)
{
  *(_WORD *)(this + 48) = a3;
  *(_DWORD *)(this + 52) = a4;
  *(_DWORD *)(this + 40) = a4;
  *(_DWORD *)(this + 44) = a2;
  *(_QWORD *)(this + 24) = 0;
  return this;
}

uint64_t llvm::mca::ReadState::writeStartEvent(uint64_t this, int a2, __int16 a3, unsigned int a4)
{
  int v4;
  unsigned int v5;

  v4 = *(_DWORD *)(this + 16) - 1;
  *(_DWORD *)(this + 16) = v4;
  v5 = *(_DWORD *)(this + 24);
  if (v5 >= a4)
  {
    if (v4)
      return this;
LABEL_5:
    *(_DWORD *)(this + 20) = v5;
    *(_BYTE *)(this + 40) = v5 == 0;
    return this;
  }
  *(_WORD *)(this + 32) = a3;
  *(_DWORD *)(this + 36) = a4;
  v5 = a4;
  *(_DWORD *)(this + 24) = a4;
  *(_DWORD *)(this + 28) = a2;
  if (!v4)
    goto LABEL_5;
  return this;
}

uint64_t llvm::mca::WriteState::onInstructionIssued(uint64_t this, int a2)
{
  int v2;
  uint64_t v3;
  _DWORD *v4;
  _DWORD *v5;
  __int16 v6;
  uint64_t v7;
  unsigned int v8;
  int v9;
  unsigned int v10;
  uint64_t v11;

  v2 = *(_DWORD *)(*(_QWORD *)this + 4);
  *(_DWORD *)(this + 8) = v2;
  v3 = *(unsigned int *)(this + 64);
  if ((_DWORD)v3)
  {
    v4 = *(_DWORD **)(this + 56);
    v5 = &v4[4 * v3];
    v6 = *(_WORD *)(this + 12);
    do
    {
      v7 = *(_QWORD *)v4;
      v8 = (v2 - v4[2]) & ~((v2 - v4[2]) >> 31);
      v9 = *(_DWORD *)(*(_QWORD *)v4 + 16) - 1;
      *(_DWORD *)(v7 + 16) = v9;
      v10 = *(_DWORD *)(v7 + 24);
      if (v10 < v8)
      {
        *(_WORD *)(v7 + 32) = v6;
        *(_DWORD *)(v7 + 36) = v8;
        v10 = v8;
        *(_DWORD *)(v7 + 24) = v8;
        *(_DWORD *)(v7 + 28) = a2;
      }
      if (!v9)
      {
        *(_DWORD *)(v7 + 20) = v10;
        *(_BYTE *)(v7 + 40) = v10 == 0;
      }
      v4 += 4;
    }
    while (v4 != v5);
  }
  v11 = *(_QWORD *)(this + 32);
  if (v11)
  {
    *(_WORD *)(v11 + 48) = *(_WORD *)(this + 12);
    *(_DWORD *)(v11 + 52) = v2;
    *(_DWORD *)(v11 + 40) = v2;
    *(_DWORD *)(v11 + 44) = a2;
    *(_QWORD *)(v11 + 24) = 0;
  }
  return this;
}

uint64_t llvm::mca::WriteState::addUser(uint64_t this, int a2, llvm::mca::ReadState *a3, unsigned int a4)
{
  int v4;
  unsigned int v5;
  __int16 v6;
  int v7;
  unsigned int v8;
  unsigned int v9;
  llvm::mca::ReadState *v10;

  v10 = a3;
  v9 = a4;
  v4 = *(_DWORD *)(this + 8);
  if (v4 == -512)
    return sub_1C597E424(this + 56, (uint64_t *)&v10, &v9);
  v5 = (v4 - a4) & ~((int)(v4 - a4) >> 31);
  v6 = *(_WORD *)(this + 12);
  v7 = *((_DWORD *)a3 + 4) - 1;
  *((_DWORD *)a3 + 4) = v7;
  v8 = *((_DWORD *)a3 + 6);
  if (v8 < v5)
  {
    *((_WORD *)a3 + 16) = v6;
    *((_DWORD *)a3 + 9) = v5;
    v8 = v5;
    *((_DWORD *)a3 + 6) = v5;
    *((_DWORD *)a3 + 7) = a2;
  }
  if (!v7)
  {
    *((_DWORD *)a3 + 5) = v8;
    *((_BYTE *)a3 + 40) = v8 == 0;
  }
  return this;
}

uint64_t sub_1C597E424(uint64_t a1, uint64_t *a2, unsigned int *a3)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;

  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
    return sub_1C597E910(a1, a2, a3);
  v4 = *(_QWORD *)a1;
  v5 = *(_QWORD *)a1 + 16 * v3;
  *(_QWORD *)v5 = *a2;
  *(_DWORD *)(v5 + 8) = *a3;
  v6 = v3 + 1;
  *(_DWORD *)(a1 + 8) = v6;
  return v4 + 16 * v6 - 16;
}

uint64_t llvm::mca::WriteState::addUser(uint64_t this, int a2, llvm::mca::WriteState *a3)
{
  int v3;
  int v4;

  v3 = *(_DWORD *)(this + 8);
  if (v3 == -512)
  {
    *(_QWORD *)(this + 32) = a3;
  }
  else
  {
    *((_WORD *)a3 + 24) = *(_WORD *)(this + 12);
    v4 = v3 & ~(v3 >> 31);
    *((_DWORD *)a3 + 13) = v4;
    *((_DWORD *)a3 + 10) = v4;
    *((_DWORD *)a3 + 11) = a2;
    this = 0;
  }
  *((_QWORD *)a3 + 3) = this;
  return this;
}

uint64_t llvm::mca::WriteState::cycleEvent(uint64_t this)
{
  int v1;
  int v2;

  v1 = *(_DWORD *)(this + 8);
  if (v1 != -512)
    *(_DWORD *)(this + 8) = v1 - 1;
  v2 = *(_DWORD *)(this + 40);
  if (v2)
    *(_DWORD *)(this + 40) = v2 - 1;
  return this;
}

uint64_t llvm::mca::ReadState::cycleEvent(uint64_t this)
{
  int v1;
  int v2;
  int v4;

  if (*(_DWORD *)(this + 16) && (v1 = *(_DWORD *)(this + 24)) != 0)
  {
    *(_DWORD *)(this + 24) = v1 - 1;
  }
  else
  {
    v2 = *(_DWORD *)(this + 20);
    if (v2 != -512 && v2 != 0)
    {
      v4 = v2 - 1;
      *(_DWORD *)(this + 20) = v4;
      *(_BYTE *)(this + 40) = v4 == 0;
    }
  }
  return this;
}

uint64_t llvm::mca::Instruction::computeCriticalRegDep(llvm::mca::Instruction *this)
{
  uint64_t result;
  uint64_t v3;
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  uint64_t v11;

  result = (uint64_t)this + 568;
  if (!*((_DWORD *)this + 144))
  {
    v3 = *((unsigned int *)this + 6);
    if ((_DWORD)v3)
    {
      v4 = 136 * v3;
      v5 = (_DWORD *)(*((_QWORD *)this + 2) + 52);
      do
      {
        if (*v5)
        {
          v6 = *((_QWORD *)v5 - 1);
          *(_DWORD *)(result + 8) = *v5;
          *(_QWORD *)result = v6;
        }
        v5 += 34;
        v4 -= 136;
      }
      while (v4);
    }
    v7 = *((unsigned int *)this + 78);
    if ((_DWORD)v7)
    {
      v8 = *((_QWORD *)this + 38);
      v9 = 48 * v7;
      v10 = (_DWORD *)(v8 + 36);
      do
      {
        if (*v10)
        {
          v11 = *((_QWORD *)v10 - 1);
          *(_DWORD *)(result + 8) = *v10;
          *(_QWORD *)result = v11;
        }
        v10 += 12;
        v9 -= 48;
      }
      while (v9);
    }
  }
  return result;
}

uint64_t llvm::mca::Instruction::dispatch(llvm::mca::Instruction *this, int a2)
{
  uint64_t result;

  *((_DWORD *)this + 136) = 1;
  *((_DWORD *)this + 138) = a2;
  result = llvm::mca::Instruction::updateDispatched(this);
  if ((_DWORD)result)
    return llvm::mca::Instruction::updatePending(this);
  return result;
}

uint64_t llvm::mca::Instruction::updateDispatched(llvm::mca::Instruction *this)
{
  uint64_t v1;
  uint64_t v2;
  _BYTE *v3;
  BOOL v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v1 = *((unsigned int *)this + 78);
  if ((_DWORD)v1)
  {
    v2 = 48 * v1;
    v3 = (_BYTE *)(*((_QWORD *)this + 38) + 42);
    while (1)
    {
      v4 = *v3 || *(_DWORD *)(v3 - 22) <= 0;
      if (v4 && !*(v3 - 2))
        break;
      v3 += 48;
      v2 -= 48;
      if (!v2)
        goto LABEL_10;
    }
  }
  else
  {
LABEL_10:
    v5 = *((unsigned int *)this + 6);
    if (!(_DWORD)v5)
    {
LABEL_14:
      *((_DWORD *)this + 136) = 2;
      return 1;
    }
    v6 = (_QWORD *)(*((_QWORD *)this + 2) + 24);
    v7 = 136 * v5;
    while (!*v6)
    {
      v6 += 17;
      v7 -= 136;
      if (!v7)
        goto LABEL_14;
    }
  }
  return 0;
}

uint64_t llvm::mca::Instruction::updatePending(llvm::mca::Instruction *this)
{
  uint64_t v1;
  unsigned __int8 *v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;

  v1 = *((unsigned int *)this + 78);
  if ((_DWORD)v1)
  {
    v2 = (unsigned __int8 *)(*((_QWORD *)this + 38) + 40);
    v3 = 48 * v1;
    while (1)
    {
      v4 = *v2;
      v2 += 48;
      if (!v4)
        break;
      v3 -= 48;
      if (!v3)
        goto LABEL_5;
    }
  }
  else
  {
LABEL_5:
    v5 = *((unsigned int *)this + 6);
    if (!(_DWORD)v5)
    {
LABEL_11:
      *((_DWORD *)this + 136) = 3;
      return 1;
    }
    v6 = 136 * v5;
    v7 = (_DWORD *)(*((_QWORD *)this + 2) + 40);
    while (!*((_QWORD *)v7 - 2) && (!*v7 || *v7 < *(_DWORD *)(*((_QWORD *)v7 - 5) + 4)))
    {
      v7 += 34;
      v6 -= 136;
      if (!v6)
        goto LABEL_11;
    }
  }
  return 0;
}

uint64_t llvm::mca::Instruction::execute(uint64_t this, int a2)
{
  uint64_t v2;
  int v3;
  uint64_t v4;
  uint64_t v6;
  uint64_t v7;

  v2 = this;
  *(_DWORD *)(this + 544) = 4;
  v3 = *(_DWORD *)(*(_QWORD *)this + 280);
  *(_DWORD *)(this + 548) = v3;
  v4 = *(unsigned int *)(this + 24);
  if ((_DWORD)v4)
  {
    v6 = *(_QWORD *)(this + 16);
    v7 = 136 * v4;
    do
    {
      this = llvm::mca::WriteState::onInstructionIssued(v6, a2);
      v6 += 136;
      v7 -= 136;
    }
    while (v7);
    v3 = *(_DWORD *)(v2 + 548);
  }
  if (!v3)
    *(_DWORD *)(v2 + 544) = 5;
  return this;
}

double llvm::mca::Instruction::forceExecuted(llvm::mca::Instruction *this)
{
  double result;

  *(_QWORD *)&result = 5;
  *((_QWORD *)this + 68) = 5;
  return result;
}

llvm::mca::Instruction *llvm::mca::Instruction::update(llvm::mca::Instruction *this)
{
  llvm::mca::Instruction *v1;
  int v2;

  v1 = this;
  v2 = *((_DWORD *)this + 136);
  if (v2 == 1)
  {
    this = (llvm::mca::Instruction *)llvm::mca::Instruction::updateDispatched(this);
    v2 = *((_DWORD *)v1 + 136);
  }
  if (v2 == 2)
    return (llvm::mca::Instruction *)llvm::mca::Instruction::updatePending(v1);
  return this;
}

uint64_t llvm::mca::Instruction::cycleEvent(uint64_t this)
{
  llvm::mca::Instruction *v1;
  int v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  int v9;
  uint64_t v10;
  uint64_t v11;
  _DWORD *v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _DWORD *v16;
  int v17;
  int v18;

  v1 = (llvm::mca::Instruction *)this;
  v2 = *(_DWORD *)(this + 544);
  if ((v2 - 1) >= 2)
  {
    if (v2 != 3)
    {
      v14 = *(unsigned int *)(this + 24);
      if ((_DWORD)v14)
      {
        v15 = 136 * v14;
        v16 = (_DWORD *)(*(_QWORD *)(this + 16) + 40);
        do
        {
          v17 = *(v16 - 8);
          if (v17 != -512)
            *(v16 - 8) = v17 - 1;
          if (*v16)
            --*v16;
          v16 += 34;
          v15 -= 136;
        }
        while (v15);
      }
      v18 = *(_DWORD *)(this + 548) - 1;
      *(_DWORD *)(this + 548) = v18;
      if (!v18)
        *(_DWORD *)(this + 544) = 5;
    }
  }
  else
  {
    v3 = *(unsigned int *)(this + 312);
    if ((_DWORD)v3)
    {
      v4 = 48 * v3;
      v5 = *(_QWORD *)(this + 304) + 20;
      do
      {
        if (*(_DWORD *)(v5 - 4) && (v6 = *(_DWORD *)(v5 + 4)) != 0)
        {
          *(_DWORD *)(v5 + 4) = v6 - 1;
        }
        else
        {
          v7 = *(_DWORD *)v5;
          if (*(_DWORD *)v5 != -512 && v7 != 0)
          {
            v9 = v7 - 1;
            *(_DWORD *)v5 = v9;
            *(_BYTE *)(v5 + 20) = v9 == 0;
          }
        }
        v5 += 48;
        v4 -= 48;
      }
      while (v4);
    }
    v10 = *(unsigned int *)(this + 24);
    if ((_DWORD)v10)
    {
      v11 = 136 * v10;
      v12 = (_DWORD *)(*(_QWORD *)(this + 16) + 40);
      do
      {
        v13 = *(v12 - 8);
        if (v13 != -512)
          *(v12 - 8) = v13 - 1;
        if (*v12)
          --*v12;
        v12 += 34;
        v11 -= 136;
      }
      while (v11);
    }
    if (v2 == 1)
    {
      this = llvm::mca::Instruction::updateDispatched((llvm::mca::Instruction *)this);
      v2 = *((_DWORD *)v1 + 136);
    }
    if (v2 == 2)
      return llvm::mca::Instruction::updatePending(v1);
  }
  return this;
}

uint64_t sub_1C597E910(uint64_t a1, uint64_t *a2, unsigned int *a3)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v4 = *a2;
  v5 = *a3;
  v6 = *(unsigned int *)(a1 + 8);
  if (v6 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v6 + 1, 16);
    LODWORD(v6) = *(_DWORD *)(a1 + 8);
  }
  v7 = (_QWORD *)(*(_QWORD *)a1 + 16 * v6);
  *v7 = v4;
  v7[1] = v5;
  LODWORD(v7) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = (_DWORD)v7;
  return *(_QWORD *)a1 + 16 * v7 - 16;
}

uint64_t **llvm::mca::Pipeline::addEventListener(uint64_t **this, llvm::mca::HWEventListener *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;

  v2 = (uint64_t)this;
  v7 = (uint64_t *)a2;
  if (a2)
    this = sub_1C47BC21C(this + 10, (unint64_t *)&v7, &v7);
  v3 = *(unsigned int *)(v2 + 8);
  if ((_DWORD)v3)
  {
    v4 = *(uint64_t **)v2;
    v5 = 8 * v3;
    do
    {
      v6 = *v4++;
      v8 = v7;
      this = sub_1C47BC21C((uint64_t **)(v6 + 16), (unint64_t *)&v8, &v8);
      v5 -= 8;
    }
    while (v5);
  }
  return this;
}

uint64_t llvm::mca::Pipeline::hasWorkToProcess(uint64_t **this)
{
  uint64_t v1;
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t result;
  uint64_t v6;

  v1 = *((unsigned int *)this + 2);
  if (!(_DWORD)v1)
    return 0;
  v2 = *this;
  v3 = 8 * v1 - 8;
  do
  {
    v4 = *v2++;
    result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v4 + 24))(v4);
    if ((result & 1) != 0)
      break;
    v6 = v3;
    v3 -= 8;
  }
  while (v6);
  return result;
}

uint64_t llvm::mca::Pipeline::run@<X0>(llvm::mca::Pipeline *this@<X0>, uint64_t a2@<X8>)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  BOOL v8;
  uint64_t result;
  uint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  uint64_t v20;

  v4 = (char *)this + 88;
  while (1)
  {
    v5 = (char *)*((_QWORD *)this + 10);
    if (v5 != v4)
    {
      do
      {
        (***((void (****)(_QWORD))v5 + 4))(*((_QWORD *)v5 + 4));
        v6 = (char *)*((_QWORD *)v5 + 1);
        if (v6)
        {
          do
          {
            v7 = v6;
            v6 = *(char **)v6;
          }
          while (v6);
        }
        else
        {
          do
          {
            v7 = (char *)*((_QWORD *)v5 + 2);
            v8 = *(_QWORD *)v7 == (_QWORD)v5;
            v5 = v7;
          }
          while (!v8);
        }
        v5 = v7;
      }
      while (v7 != v4);
    }
    result = (uint64_t)llvm::mca::Pipeline::runCycle((uint64_t **)this, &v20);
    v10 = v20;
    if (v20)
    {
      *(_BYTE *)(a2 + 8) |= 1u;
      *(_QWORD *)a2 = v10;
      return result;
    }
    v11 = (char *)*((_QWORD *)this + 10);
    if (v11 != v4)
    {
      do
      {
        result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v11 + 4) + 8))(*((_QWORD *)v11 + 4));
        v12 = (char *)*((_QWORD *)v11 + 1);
        if (v12)
        {
          do
          {
            v13 = v12;
            v12 = *(char **)v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            v13 = (char *)*((_QWORD *)v11 + 2);
            v8 = *(_QWORD *)v13 == (_QWORD)v11;
            v11 = v13;
          }
          while (!v8);
        }
        v11 = v13;
      }
      while (v13 != v4);
    }
    ++*((_DWORD *)this + 26);
    v14 = *((unsigned int *)this + 2);
    if (!(_DWORD)v14)
      break;
    v15 = *(_QWORD **)this;
    v16 = 8 * v14;
    while (1)
    {
      result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*v15 + 24))(*v15);
      if ((result & 1) != 0)
        break;
      ++v15;
      v16 -= 8;
      if (!v16)
        goto LABEL_21;
    }
  }
LABEL_21:
  v17 = (char *)*((_QWORD *)this + 10);
  if (v17 != v4)
  {
    do
    {
      result = (*(uint64_t (**)(_QWORD))(**((_QWORD **)v17 + 4) + 16))(*((_QWORD *)v17 + 4));
      v18 = (char *)*((_QWORD *)v17 + 1);
      if (v18)
      {
        do
        {
          v19 = v18;
          v18 = *(char **)v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          v19 = (char *)*((_QWORD *)v17 + 2);
          v8 = *(_QWORD *)v19 == (_QWORD)v17;
          v17 = v19;
        }
        while (!v8);
      }
      v17 = v19;
    }
    while (v19 != v4);
  }
  *(_BYTE *)(a2 + 8) &= ~1u;
  *(_DWORD *)a2 = *((_DWORD *)this + 26);
  return result;
}

uint64_t llvm::mca::Pipeline::notifyCycleBegin(uint64_t this)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  BOOL v5;

  v1 = *(_QWORD **)(this + 80);
  v2 = (_QWORD *)(this + 88);
  if (v1 != (_QWORD *)(this + 88))
  {
    do
    {
      this = (**(uint64_t (***)(_QWORD))v1[4])(v1[4]);
      v3 = (_QWORD *)v1[1];
      if (v3)
      {
        do
        {
          v4 = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          v4 = (_QWORD *)v1[2];
          v5 = *v4 == (_QWORD)v1;
          v1 = v4;
        }
        while (!v5);
      }
      v1 = v4;
    }
    while (v4 != v2);
  }
  return this;
}

_QWORD *llvm::mca::Pipeline::runCycle@<X0>(uint64_t **this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  *a2 = 0;
  v4 = *this;
  v5 = *((unsigned int *)this + 2);
  if (!(_DWORD)v5)
  {
    LODWORD(v17) = 0;
    v18 = 0;
LABEL_8:
    v9 = *v4;
    do
    {
      result = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t *))(*(_QWORD *)v9 + 16))(v9, &v17);
      if (!(_DWORD)result)
        break;
      result = (*(_QWORD *(**)(uint64_t *__return_ptr, uint64_t, uint64_t *))(*(_QWORD *)v9 + 48))(&v16, v9, &v17);
      v10 = v16;
      *a2 = v16;
    }
    while (!v10);
    v4 = *this;
    goto LABEL_12;
  }
  v6 = 8 * v5 - 8;
  do
  {
    result = (*(_QWORD *(**)(uint64_t *__return_ptr))(**(_QWORD **)((char *)v4 + v6) + 32))(&v17);
    v8 = v17;
    *a2 = v17;
    if (!v6)
      break;
    v6 -= 8;
  }
  while (!v8);
  v4 = *this;
  LODWORD(v17) = 0;
  v18 = 0;
  if (!v8)
    goto LABEL_8;
LABEL_12:
  v11 = *((unsigned int *)this + 2);
  if ((_DWORD)v11)
  {
    v12 = 8 * v11 - 8;
    do
    {
      v13 = *v4++;
      result = (*(_QWORD *(**)(uint64_t *__return_ptr))(*(_QWORD *)v13 + 40))(&v16);
      v14 = v16;
      *a2 = v16;
      if (v14)
        v15 = 1;
      else
        v15 = v12 == 0;
      v12 -= 8;
    }
    while (!v15);
  }
  return result;
}

uint64_t llvm::mca::Pipeline::notifyCycleEnd(uint64_t this)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  BOOL v5;

  v1 = *(_QWORD **)(this + 80);
  v2 = (_QWORD *)(this + 88);
  if (v1 != (_QWORD *)(this + 88))
  {
    do
    {
      this = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v1[4] + 8))(v1[4]);
      v3 = (_QWORD *)v1[1];
      if (v3)
      {
        do
        {
          v4 = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          v4 = (_QWORD *)v1[2];
          v5 = *v4 == (_QWORD)v1;
          v1 = v4;
        }
        while (!v5);
      }
      v1 = v4;
    }
    while (v4 != v2);
  }
  return this;
}

uint64_t llvm::mca::Pipeline::notifyFinished(uint64_t this)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  BOOL v5;

  v1 = *(_QWORD **)(this + 80);
  v2 = (_QWORD *)(this + 88);
  if (v1 != (_QWORD *)(this + 88))
  {
    do
    {
      this = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v1[4] + 16))(v1[4]);
      v3 = (_QWORD *)v1[1];
      if (v3)
      {
        do
        {
          v4 = v3;
          v3 = (_QWORD *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          v4 = (_QWORD *)v1[2];
          v5 = *v4 == (_QWORD)v1;
          v1 = v4;
        }
        while (!v5);
      }
      v1 = v4;
    }
    while (v4 != v2);
  }
  return this;
}

void llvm::mca::Pipeline::appendStage(uint64_t a1, char *a2)
{
  uint64_t v2;

  v2 = *(unsigned int *)(a1 + 8);
  if ((_DWORD)v2)
    *(_QWORD *)(*(_QWORD *)(*(_QWORD *)a1 + 8 * v2 - 8) + 8) = *(_QWORD *)a2;
  sub_1C4E0081C(a1, a2);
}

uint64_t llvm::mca::DispatchStage::DispatchStage(uint64_t this, const llvm::MCSubtargetInfo *a2, const llvm::MCRegisterInfo *a3, int a4, llvm::mca::RetireControlUnit *a5, llvm::mca::RegisterFile *a6)
{
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = this + 24;
  *(_QWORD *)this = &off_1E8184958;
  *(_DWORD *)(this + 40) = a4;
  *(_DWORD *)(this + 44) = a4;
  *(_DWORD *)(this + 48) = 0;
  *(_DWORD *)(this + 56) = 0;
  *(_QWORD *)(this + 64) = 0;
  *(_QWORD *)(this + 72) = a2;
  *(_QWORD *)(this + 80) = a5;
  *(_QWORD *)(this + 88) = a6;
  if (!a4)
    *(_DWORD *)(this + 40) = **((_DWORD **)a2 + 20);
  return this;
}

{
  *(_QWORD *)(this + 32) = 0;
  *(_QWORD *)(this + 24) = 0;
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = this + 24;
  *(_QWORD *)this = &off_1E8184958;
  *(_DWORD *)(this + 40) = a4;
  *(_DWORD *)(this + 44) = a4;
  *(_DWORD *)(this + 48) = 0;
  *(_DWORD *)(this + 56) = 0;
  *(_QWORD *)(this + 64) = 0;
  *(_QWORD *)(this + 72) = a2;
  *(_QWORD *)(this + 80) = a5;
  *(_QWORD *)(this + 88) = a6;
  if (!a4)
    *(_DWORD *)(this + 40) = **((_DWORD **)a2 + 20);
  return this;
}

uint64_t llvm::mca::DispatchStage::notifyInstructionDispatched(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;

  v10 = 6;
  v11 = a2;
  v12 = a3;
  v13 = a4;
  v14 = a5;
  v5 = *(_QWORD **)(result + 16);
  v6 = (_QWORD *)(result + 24);
  if (v5 != (_QWORD *)(result + 24))
  {
    do
    {
      result = (*(uint64_t (**)(_QWORD, int *))(*(_QWORD *)v5[4] + 24))(v5[4], &v10);
      v7 = (_QWORD *)v5[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v5[2];
          v9 = *v8 == (_QWORD)v5;
          v5 = v8;
        }
        while (!v9);
      }
      v5 = v8;
    }
    while (v8 != v6);
  }
  return result;
}

BOOL llvm::mca::DispatchStage::checkPRF(_QWORD *a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  _WORD *v8;
  __int16 v9;
  __int16 v10;
  unsigned __int16 *v11;
  int isAvailable;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  BOOL v17;
  __int16 v19;
  _WORD *v20;
  int v21;
  uint64_t v22;
  void *v23;
  __int128 v24;
  _QWORD v25[2];

  v25[1] = *MEMORY[0x1E0C80C00];
  v23 = v25;
  v24 = xmmword_1C6612EF0;
  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(unsigned int *)(v4 + 24);
  if ((_DWORD)v5)
  {
    v6 = 0;
    v7 = 136 * v5;
    v8 = (_WORD *)(*(_QWORD *)(v4 + 16) + 12);
    do
    {
      v10 = *v8;
      v8 += 68;
      v9 = v10;
      if (v6 >= *((_QWORD *)&v24 + 1))
      {
        if (v6 + 1 > *((_QWORD *)&v24 + 1))
        {
          v20 = v8;
          v19 = v9;
          llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v23, v25, v6 + 1, 2);
          v9 = v19;
          v8 = v20;
          v6 = v24;
        }
        *((_WORD *)v23 + v6) = v9;
        v6 = v24;
      }
      else
      {
        *((_WORD *)v23 + v6) = v9;
      }
      *(_QWORD *)&v24 = ++v6;
      v7 -= 136;
    }
    while (v7);
    v11 = (unsigned __int16 *)v23;
  }
  else
  {
    v6 = 0;
    v11 = (unsigned __int16 *)v25;
  }
  isAvailable = llvm::mca::RegisterFile::isAvailable(a1[11], v11, v6);
  if (isAvailable)
  {
    v21 = 1;
    v22 = a2;
    v13 = (_QWORD *)a1[2];
    v14 = a1 + 3;
    if (v13 != v14)
    {
      do
      {
        (*(void (**)(_QWORD, int *))(*(_QWORD *)v13[4] + 32))(v13[4], &v21);
        v15 = (_QWORD *)v13[1];
        if (v15)
        {
          do
          {
            v16 = v15;
            v15 = (_QWORD *)*v15;
          }
          while (v15);
        }
        else
        {
          do
          {
            v16 = (_QWORD *)v13[2];
            v17 = *v16 == (_QWORD)v13;
            v13 = v16;
          }
          while (!v17);
        }
        v13 = v16;
      }
      while (v16 != v14);
    }
  }
  if (v23 != v25)
    free(v23);
  return isAvailable == 0;
}

BOOL llvm::mca::DispatchStage::checkRCU(_QWORD *a1, uint64_t a2)
{
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  int v11;
  uint64_t v12;

  v2 = *(_DWORD *)(**(_QWORD **)(a2 + 8) + 284);
  v3 = *(_DWORD *)(a1[10] + 20);
  if (*(_DWORD *)(a1[10] + 16) < v2)
    v2 = *(_DWORD *)(a1[10] + 16);
  if (v2 <= 1)
    v4 = 1;
  else
    v4 = v2;
  if (v3 < v4)
  {
    v11 = 2;
    v12 = a2;
    v5 = (_QWORD *)a1[2];
    v6 = a1 + 3;
    if (v5 != a1 + 3)
    {
      do
      {
        (*(void (**)(_QWORD, int *))(*(_QWORD *)v5[4] + 32))(v5[4], &v11);
        v7 = (_QWORD *)v5[1];
        if (v7)
        {
          do
          {
            v8 = v7;
            v7 = (_QWORD *)*v7;
          }
          while (v7);
        }
        else
        {
          do
          {
            v8 = (_QWORD *)v5[2];
            v9 = *v8 == (_QWORD)v5;
            v5 = v8;
          }
          while (!v9);
        }
        v5 = v8;
      }
      while (v8 != v6);
    }
  }
  return v3 >= v4;
}

uint64_t llvm::mca::DispatchStage::canDispatch(_QWORD *a1, uint64_t a2)
{
  _BOOL4 v4;
  _BOOL4 v5;
  uint64_t v6;

  v4 = llvm::mca::DispatchStage::checkRCU(a1, a2);
  v5 = llvm::mca::DispatchStage::checkPRF(a1, a2);
  v6 = a1[1];
  if (v6)
    LODWORD(v6) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 16))(v6, a2);
  return (v4 && v5) & v6;
}

void llvm::mca::DispatchStage::dispatch(uint64_t a1, uint64_t a2, llvm::mca::Instruction *a3)
{
  unsigned int v4;
  unsigned int v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  uint64_t v10;
  llvm::mca::ReadState *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  int v18;
  int v19;
  __int128 v20;
  uint64_t v21;
  _QWORD v22[2];
  void *v23;
  uint64_t v24;
  _QWORD v25[3];

  v4 = a2;
  v25[2] = *MEMORY[0x1E0C80C00];
  v22[0] = a2;
  v22[1] = a3;
  v6 = *(_DWORD *)(*(_QWORD *)a3 + 284);
  v7 = *(_DWORD *)(a1 + 40);
  v8 = v6 - v7;
  if (v6 <= v7)
  {
    v9 = *(_DWORD *)(a1 + 44) - v6;
  }
  else
  {
    v9 = 0;
    *(_DWORD *)(a1 + 48) = v8;
    *(_DWORD *)(a1 + 56) = a2;
    *(_QWORD *)(a1 + 64) = a3;
  }
  *(_DWORD *)(a1 + 44) = v9;
  if ((*((_BYTE *)a3 + 540) & 0x40) != 0)
    v9 = 0;
  *(_DWORD *)(a1 + 44) = v9;
  if (*((_BYTE *)a3 + 8)
    && llvm::mca::RegisterFile::tryEliminateMoveOrSwap(*(_QWORD *)(a1 + 88), *((_QWORD *)a3 + 2), *((unsigned int *)a3 + 6), *((_QWORD *)a3 + 38), *((unsigned int *)a3 + 78)))
  {
    *((_BYTE *)a3 + 600) = 1;
  }
  if (!*((_BYTE *)a3 + 600))
  {
    v10 = *((unsigned int *)a3 + 78);
    if ((_DWORD)v10)
    {
      v11 = (llvm::mca::ReadState *)*((_QWORD *)a3 + 38);
      v12 = 48 * v10;
      do
      {
        llvm::mca::RegisterFile::addRegisterRead(*(llvm::mca::RegisterFile **)(a1 + 88), v11, *(const llvm::MCSubtargetInfo **)(a1 + 72));
        v11 = (llvm::mca::ReadState *)((char *)v11 + 48);
        v12 -= 48;
      }
      while (v12);
    }
  }
  v13 = *(unsigned int *)(*(_QWORD *)(a1 + 88) + 24);
  v23 = v25;
  v24 = 0x400000000;
  sub_1C4893E04((char *)&v23, v13, 0);
  v14 = *((unsigned int *)a3 + 6);
  if ((_DWORD)v14)
  {
    v15 = *((_QWORD *)a3 + 2);
    v16 = 136 * v14;
    do
    {
      v17 = *(uint64_t **)(a1 + 88);
      DWORD2(v20) = 0;
      *(_QWORD *)&v20 = v4;
      WORD6(v20) = 0;
      v21 = v15;
      llvm::mca::RegisterFile::addRegisterWrite(v17, &v20, v23);
      v15 += 136;
      v16 -= 136;
    }
    while (v16);
  }
  v18 = llvm::mca::RetireControlUnit::dispatch(*(_QWORD *)(a1 + 80), (uint64_t)v22);
  *((_DWORD *)a3 + 136) = 1;
  *((_DWORD *)a3 + 138) = v18;
  if (llvm::mca::Instruction::updateDispatched(a3))
    llvm::mca::Instruction::updatePending(a3);
  if (v6 >= *(_DWORD *)(a1 + 40))
    v19 = *(_DWORD *)(a1 + 40);
  else
    v19 = v6;
  llvm::mca::DispatchStage::notifyInstructionDispatched(a1, (uint64_t)v22, (uint64_t)v23, v24, v19);
  (*(void (**)(_QWORD, _QWORD *))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), v22);
  if (v23 != v25)
    free(v23);
}

void llvm::mca::DispatchStage::cycleStart(llvm::mca::DispatchStage *this@<X0>, _QWORD *a2@<X8>)
{
  unsigned int v4;
  unsigned int v5;
  unsigned int v6;
  int v7;
  unint64_t v8;
  void *v9;
  uint64_t v10;
  _QWORD v11[5];

  v11[4] = *MEMORY[0x1E0C80C00];
  v4 = *((_DWORD *)this + 12);
  v5 = *((_DWORD *)this + 10);
  if (v4)
  {
    v6 = v5 - v4;
    if (v5 < v4)
      v6 = 0;
    v7 = v5 - v6;
    *((_DWORD *)this + 11) = v6;
    *((_DWORD *)this + 12) = v4 - (v5 - v6);
    v8 = *(unsigned int *)(*((_QWORD *)this + 11) + 24);
    v9 = v11;
    v10 = 0x800000000;
    sub_1C4893E04((char *)&v9, v8, 0);
    llvm::mca::DispatchStage::notifyInstructionDispatched((uint64_t)this, (uint64_t)this + 56, (uint64_t)v9, v10, v7);
    if (!*((_DWORD *)this + 12))
    {
      *((_DWORD *)this + 14) = 0;
      *((_QWORD *)this + 8) = 0;
    }
    *a2 = 0;
    if (v9 != v11)
      free(v9);
  }
  else
  {
    *((_DWORD *)this + 11) = v5;
    *a2 = 0;
  }
}

uint64_t llvm::mca::DispatchStage::isAvailable(uint64_t a1, uint64_t a2)
{
  unsigned int v2;
  _BYTE *v3;
  unsigned int v4;
  unsigned int v5;
  int v6;
  BOOL v7;

  v2 = *(_DWORD *)(a1 + 44);
  if (!v2)
    return 0;
  v3 = *(_BYTE **)(a2 + 8);
  v4 = *(_DWORD *)(*(_QWORD *)v3 + 284);
  v5 = *(_DWORD *)(a1 + 40);
  if (v5 < v4)
    v4 = *(_DWORD *)(a1 + 40);
  if (v4 <= v2 && ((v6 = v3[540] & 0x20, v2 != v5) ? (v7 = v6 == 0) : (v7 = 1), v7))
    return llvm::mca::DispatchStage::canDispatch((_QWORD *)a1, a2);
  else
    return 0;
}

void llvm::mca::DispatchStage::execute(uint64_t a1, uint64_t a2)
{
  llvm::mca::DispatchStage::dispatch(a1, *(_QWORD *)a2, *(llvm::mca::Instruction **)(a2 + 8));
}

uint64_t sub_1C597F5AC(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E8184B50;
  sub_1C4FE319C(a1 + 16, *(_QWORD **)(a1 + 24));
  return a1;
}

void sub_1C597F5E4(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E8184B50;
  sub_1C4FE319C(a1 + 16, *(_QWORD **)(a1 + 24));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C597F62C()
{
  return 0;
}

void sub_1C597F634(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

BOOL llvm::mca::EntryStage::hasWorkToComplete(llvm::mca::EntryStage *this)
{
  return *((_QWORD *)this + 6) != 0;
}

uint64_t llvm::mca::EntryStage::isAvailable(uint64_t a1)
{
  uint64_t v2;

  if (*(_QWORD *)(a1 + 48) && (v2 = *(_QWORD *)(a1 + 8)) != 0)
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v2 + 16))(v2, a1 + 40);
  else
    return 0;
}

void llvm::mca::EntryStage::getNextInstruction(llvm::mca::EntryStage *this)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;
  uint64_t *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  unint64_t v11;
  BOOL v12;
  char *v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  unsigned int v24;
  BOOL v25;
  uint64_t v26;
  _BYTE *v27;
  _BYTE *v28;
  int64_t v29;
  char *v30;
  char *v31;
  int v32;
  __int128 v33;
  __int128 v34;
  __int128 v35;
  uint64_t v36;
  int v37;
  uint64_t **v38;
  _QWORD *v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  void *v48;
  void *v49;
  int v50;
  unint64_t v51;

  v1 = *((_QWORD *)this + 25);
  v2 = *(unsigned int *)(v1 + 16);
  v3 = *(_QWORD *)(v1 + 8);
  if (v3 * *(unsigned int *)(v1 + 20) <= v2)
    return;
  v5 = *(uint64_t **)(*(_QWORD *)v1 + 8 * (v2 % v3));
  v6 = operator new();
  v7 = v6;
  v8 = *v5;
  *(_BYTE *)(v6 + 8) = *((_BYTE *)v5 + 8);
  *(_QWORD *)v6 = v8;
  v9 = v6 + 32;
  *(_QWORD *)(v6 + 16) = v6 + 32;
  v10 = (uint64_t *)(v6 + 16);
  *(_QWORD *)(v6 + 24) = 0x200000000;
  v11 = *((unsigned int *)v5 + 6);
  if ((_DWORD)v11)
    v12 = v6 == (_QWORD)v5;
  else
    v12 = 1;
  if (!v12)
  {
    if (v11 <= 2)
    {
      v16 = v5[2];
      v17 = v16 + 136 * v11;
      v13 = (char *)(v6 + 32);
    }
    else
    {
      v51 = 0;
      v13 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(v6 + 16, v11, 136, &v51);
      sub_1C597E0C4(v10, (uint64_t)v13);
      v14 = v51;
      if (*v10 != v9)
        free((void *)*v10);
      *(_QWORD *)(v7 + 16) = v13;
      *(_DWORD *)(v7 + 28) = v14;
      v15 = *((_DWORD *)v5 + 6);
      if (!v15)
        goto LABEL_16;
      v16 = v5[2];
      v17 = v16 + 136 * v15;
    }
    v18 = v13 + 56;
    v19 = v16 + 56;
    do
    {
      v20 = *(_OWORD *)(v19 - 56);
      v21 = *(_OWORD *)(v19 - 40);
      v22 = *(_QWORD *)(v19 - 8);
      *(_OWORD *)(v18 - 3) = *(_OWORD *)(v19 - 24);
      *(_OWORD *)(v18 - 5) = v21;
      *(_OWORD *)(v18 - 7) = v20;
      *(v18 - 1) = v22;
      *v18 = v18 + 2;
      v18[1] = 0x400000000;
      if (*(_DWORD *)(v19 + 8))
        sub_1C597E19C((uint64_t)v18, (uint64_t *)v19);
      v23 = v19 - 56;
      v18 += 17;
      v19 += 136;
    }
    while (v23 + 136 != v17);
LABEL_16:
    *(_DWORD *)(v7 + 24) = v11;
  }
  *(_QWORD *)(v7 + 304) = v7 + 320;
  *(_QWORD *)(v7 + 312) = 0x400000000;
  v24 = *((_DWORD *)v5 + 78);
  if (v24)
    v25 = v7 == (_QWORD)v5;
  else
    v25 = 1;
  if (v25)
    goto LABEL_27;
  if (v24 < 5)
  {
    v26 = *((unsigned int *)v5 + 78);
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(v7 + 304, v7 + 320, *((unsigned int *)v5 + 78), 48);
    v26 = *((unsigned int *)v5 + 78);
    if (!(_DWORD)v26)
      goto LABEL_26;
  }
  memcpy(*(void **)(v7 + 304), (const void *)v5[38], 48 * v26);
LABEL_26:
  *(_DWORD *)(v7 + 312) = v24;
LABEL_27:
  *(_QWORD *)(v7 + 528) = 0;
  *(_OWORD *)(v7 + 512) = 0u;
  v27 = (_BYTE *)v5[64];
  v28 = (_BYTE *)v5[65];
  v29 = v28 - v27;
  if (v28 != v27)
  {
    if (0xAAAAAAAAAAAAAAABLL * (v29 >> 3) >= 0xAAAAAAAAAAAAAABLL)
      abort();
    v30 = (char *)operator new(v29);
    *(_QWORD *)(v7 + 512) = v30;
    *(_QWORD *)(v7 + 520) = v30;
    v31 = &v30[8 * (v29 >> 3)];
    *(_QWORD *)(v7 + 528) = v31;
    memcpy(v30, v27, v29 - 4);
    *(_QWORD *)(v7 + 520) = v31;
  }
  v32 = *((_DWORD *)v5 + 134);
  *(_BYTE *)(v7 + 540) = *((_BYTE *)v5 + 540);
  *(_DWORD *)(v7 + 536) = v32;
  v33 = *((_OWORD *)v5 + 34);
  v34 = *((_OWORD *)v5 + 35);
  v35 = *((_OWORD *)v5 + 36);
  *(_OWORD *)(v7 + 585) = *(_OWORD *)((char *)v5 + 585);
  *(_OWORD *)(v7 + 560) = v34;
  *(_OWORD *)(v7 + 576) = v35;
  *(_OWORD *)(v7 + 544) = v33;
  *((_DWORD *)this + 10) = v2;
  *((_QWORD *)this + 6) = v7;
  v36 = *((unsigned int *)this + 16);
  if (v36 >= *((_DWORD *)this + 17))
  {
    v38 = (uint64_t **)((char *)this + 56);
    v51 = 0;
    v39 = llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)this + 56, 0, 8, &v51);
    v40 = *((unsigned int *)this + 16);
    v39[v40] = v7;
    v41 = (uint64_t *)*((_QWORD *)this + 7);
    if ((_DWORD)v40)
    {
      v42 = 8 * v40;
      v43 = 8 * v40;
      v44 = v39;
      do
      {
        v45 = *v41;
        *v41++ = 0;
        *v44++ = v45;
        v43 -= 8;
      }
      while (v43);
      v46 = (uint64_t)(*v38 - 1);
      do
      {
        v47 = *(_QWORD *)(v46 + v42);
        *(_QWORD *)(v46 + v42) = 0;
        if (v47)
        {
          v48 = *(void **)(v47 + 512);
          if (v48)
          {
            *(_QWORD *)(v47 + 520) = v48;
            operator delete(v48);
          }
          v49 = *(void **)(v47 + 304);
          if (v49 != (void *)(v47 + 320))
            free(v49);
          sub_1C59737B0((char **)(v47 + 16));
          MEMORY[0x1CAA32FC0](v47, 0x10E0C40F9C4931CLL);
        }
        v42 -= 8;
      }
      while (v42);
      v41 = *v38;
    }
    v50 = v51;
    if (v41 != (uint64_t *)((char *)this + 72))
      free(v41);
    *((_QWORD *)this + 7) = v39;
    v37 = *((_DWORD *)this + 16) + 1;
    *((_DWORD *)this + 17) = v50;
  }
  else
  {
    *(_QWORD *)(*((_QWORD *)this + 7) + 8 * v36) = v7;
    v37 = v36 + 1;
  }
  *((_DWORD *)this + 16) = v37;
  ++*(_DWORD *)(*((_QWORD *)this + 25) + 16);
}

void llvm::mca::EntryStage::execute(uint64_t a1@<X0>, _QWORD *a2@<X8>)
{
  (*(void (**)(_QWORD *__return_ptr, _QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 48))(a2, *(_QWORD *)(a1 + 8), a1 + 40);
  if (!*a2)
  {
    *(_QWORD *)(a1 + 48) = 0;
    llvm::mca::EntryStage::getNextInstruction((llvm::mca::EntryStage *)a1);
    *a2 = 0;
  }
}

void llvm::mca::EntryStage::cycleStart(llvm::mca::EntryStage *this@<X0>, _QWORD *a2@<X8>)
{
  if (!*((_QWORD *)this + 6))
    llvm::mca::EntryStage::getNextInstruction(this);
  *a2 = 0;
}

uint64_t llvm::mca::EntryStage::cycleEnd@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;
  uint64_t v4;
  char *v5;
  char *v6;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  void *v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  void *v18;
  void *v19;

  v2 = this;
  v4 = *(unsigned int *)(this + 208);
  v5 = *(char **)(this + 56);
  v6 = &v5[8 * v4];
  v7 = *(unsigned int *)(this + 64);
  v8 = &v5[8 * v7];
  if ((_DWORD)v4 != (_DWORD)v7)
  {
    v9 = 8 * v7 - 8 * v4;
    while (*(_DWORD *)(*(_QWORD *)v6 + 544) == 6)
    {
      v6 += 8;
      v9 -= 8;
      if (!v9)
      {
        v6 = &v5[8 * v7];
        break;
      }
    }
  }
  *(_DWORD *)(this + 208) = (unint64_t)(v6 - v5) >> 3;
  if ((((unint64_t)(v6 - v5) >> 2) & 0xFFFFFFFE) >= v7)
  {
    v10 = v5;
    if (v8 != v6)
    {
      do
      {
        v11 = *(_QWORD *)v6;
        *(_QWORD *)v6 = 0;
        v12 = *(_QWORD *)v5;
        *(_QWORD *)v5 = v11;
        if (v12)
        {
          v13 = *(void **)(v12 + 512);
          if (v13)
          {
            *(_QWORD *)(v12 + 520) = v13;
            operator delete(v13);
          }
          v14 = *(void **)(v12 + 304);
          if (v14 != (void *)(v12 + 320))
            free(v14);
          sub_1C59737B0((char **)(v12 + 16));
          this = MEMORY[0x1CAA32FC0](v12, 0x10E0C40F9C4931CLL);
        }
        v6 += 8;
        v5 += 8;
        v10 += 8;
      }
      while (v6 != v8);
      v5 = *(char **)(v2 + 56);
      v7 = *(unsigned int *)(v2 + 64);
    }
    v15 = &v5[8 * v7];
    if (v15 != v10)
    {
      do
      {
        v17 = *((_QWORD *)v15 - 1);
        v15 -= 8;
        v16 = v17;
        *(_QWORD *)v15 = 0;
        if (v17)
        {
          v18 = *(void **)(v16 + 512);
          if (v18)
          {
            *(_QWORD *)(v16 + 520) = v18;
            operator delete(v18);
          }
          v19 = *(void **)(v16 + 304);
          if (v19 != (void *)(v16 + 320))
            free(v19);
          sub_1C59737B0((char **)(v16 + 16));
          this = MEMORY[0x1CAA32FC0](v16, 0x10E0C40F9C4931CLL);
        }
      }
      while (v15 != v10);
      v5 = *(char **)(v2 + 56);
    }
    *(_DWORD *)(v2 + 64) = (unint64_t)(v10 - v5) >> 3;
    *(_DWORD *)(v2 + 208) = 0;
  }
  *a2 = 0;
  return this;
}

uint64_t sub_1C597FC40(uint64_t a1)
{
  sub_1C5973708((char **)(a1 + 56));
  *(_QWORD *)a1 = off_1E8184B50;
  sub_1C4FE319C(a1 + 16, *(_QWORD **)(a1 + 24));
  return a1;
}

void sub_1C597FC84(uint64_t a1)
{
  sub_1C5973708((char **)(a1 + 56));
  *(_QWORD *)a1 = off_1E8184B50;
  sub_1C4FE319C(a1 + 16, *(_QWORD **)(a1 + 24));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t llvm::mca::toHWStallEventType(int a1)
{
  return dword_1C8663BB4[a1];
}

BOOL llvm::mca::ExecuteStage::isAvailable(_QWORD *a1, uint64_t a2)
{
  int isAvailable;
  int v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  int v12;
  uint64_t v13;

  isAvailable = llvm::mca::Scheduler::isAvailable(a1[5], a2);
  v5 = isAvailable;
  if (isAvailable)
  {
    v12 = dword_1C8663BD0[isAvailable - 1];
    v13 = a2;
    v6 = (_QWORD *)a1[2];
    v7 = a1 + 3;
    if (v6 != v7)
    {
      do
      {
        (*(void (**)(_QWORD, int *))(*(_QWORD *)v6[4] + 32))(v6[4], &v12);
        v8 = (_QWORD *)v6[1];
        if (v8)
        {
          do
          {
            v9 = v8;
            v8 = (_QWORD *)*v8;
          }
          while (v8);
        }
        else
        {
          do
          {
            v9 = (_QWORD *)v6[2];
            v10 = *v9 == (_QWORD)v6;
            v6 = v9;
          }
          while (!v10);
        }
        v6 = v9;
      }
      while (v9 != v7);
    }
  }
  return v5 == 0;
}

void llvm::mca::ExecuteStage::issueInstruction(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  _DWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  BOOL v10;
  char *v11;
  char *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  char *v17;
  char *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  int v23;
  char *v24;
  void *v25;
  uint64_t v26;
  _BYTE v27[64];
  void *v28;
  uint64_t v29;
  _BYTE v30[64];
  void *v31;
  uint64_t v32;
  _QWORD v33[14];

  v33[12] = *MEMORY[0x1E0C80C00];
  v31 = v33;
  v32 = 0x400000000;
  v28 = v30;
  v29 = 0x400000000;
  v25 = v27;
  v26 = 0x400000000;
  llvm::mca::Scheduler::issueInstruction(*(_QWORD **)(a1 + 40), a2, (uint64_t)&v31, &v28, &v25);
  v6 = *(_DWORD **)(a2 + 8);
  *(_DWORD *)(a1 + 52) += *(_DWORD *)(*(_QWORD *)v6 + 284);
  llvm::mca::ExecuteStage::notifyReservedOrReleasedBuffers((_QWORD *)a1, a2, 0);
  llvm::mca::ExecuteStage::notifyInstructionIssued(a1, a2, (unint64_t *)v31, v32);
  if (v6[136] != 5)
    goto LABEL_10;
  v23 = 5;
  v24 = (char *)a2;
  v7 = *(_QWORD **)(a1 + 16);
  if (v7 != (_QWORD *)(a1 + 24))
  {
    do
    {
      (*(void (**)(_QWORD, int *))(*(_QWORD *)v7[4] + 24))(v7[4], &v23);
      v8 = (_QWORD *)v7[1];
      if (v8)
      {
        do
        {
          v9 = v8;
          v8 = (_QWORD *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          v9 = (_QWORD *)v7[2];
          v10 = *v9 == (_QWORD)v7;
          v7 = v9;
        }
        while (!v10);
      }
      v7 = v9;
    }
    while (v9 != (_QWORD *)(a1 + 24));
  }
  (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), a2);
  if (!*a3)
  {
LABEL_10:
    if ((_DWORD)v29)
    {
      v11 = (char *)v28;
      v12 = (char *)v28 + 16 * v29;
      v13 = (_QWORD *)(a1 + 24);
      do
      {
        v23 = 2;
        v24 = v11;
        v14 = *(_QWORD **)(a1 + 16);
        if (v14 != v13)
        {
          do
          {
            (*(void (**)(_QWORD, int *))(*(_QWORD *)v14[4] + 24))(v14[4], &v23);
            v15 = (_QWORD *)v14[1];
            if (v15)
            {
              do
              {
                v16 = v15;
                v15 = (_QWORD *)*v15;
              }
              while (v15);
            }
            else
            {
              do
              {
                v16 = (_QWORD *)v14[2];
                v10 = *v16 == (_QWORD)v14;
                v14 = v16;
              }
              while (!v10);
            }
            v14 = v16;
          }
          while (v16 != v13);
        }
        v11 += 16;
      }
      while (v11 != v12);
    }
    if ((_DWORD)v26)
    {
      v17 = (char *)v25;
      v18 = (char *)v25 + 16 * v26;
      v19 = (_QWORD *)(a1 + 24);
      do
      {
        v23 = 3;
        v24 = v17;
        v20 = *(_QWORD **)(a1 + 16);
        if (v20 != v19)
        {
          do
          {
            (*(void (**)(_QWORD, int *))(*(_QWORD *)v20[4] + 24))(v20[4], &v23);
            v21 = (_QWORD *)v20[1];
            if (v21)
            {
              do
              {
                v22 = v21;
                v21 = (_QWORD *)*v21;
              }
              while (v21);
            }
            else
            {
              do
              {
                v22 = (_QWORD *)v20[2];
                v10 = *v22 == (_QWORD)v20;
                v20 = v22;
              }
              while (!v10);
            }
            v20 = v22;
          }
          while (v22 != v19);
        }
        v17 += 16;
      }
      while (v17 != v18);
    }
    *a3 = 0;
  }
  if (v25 != v27)
    free(v25);
  if (v28 != v30)
    free(v28);
  if (v31 != v33)
    free(v31);
}

void llvm::mca::ExecuteStage::notifyReservedOrReleasedBuffers(_QWORD *a1, uint64_t a2, char a3)
{
  int8x8_t v3;
  uint8x8_t v7;
  uint64_t v8;
  uint64_t v9;
  _DWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  BOOL v16;
  _QWORD *v17;
  _QWORD *v18;
  void *v19;
  uint64_t v20;
  _QWORD v21[3];

  v21[2] = *MEMORY[0x1E0C80C00];
  v3 = *(int8x8_t *)(**(_QWORD **)(a2 + 8) + 248);
  if (v3)
  {
    v7 = (uint8x8_t)vcnt_s8(v3);
    v7.i16[0] = vaddlv_u8(v7);
    v19 = v21;
    v20 = 0x400000000;
    sub_1C4893E04((char *)&v19, v7.u32[0], 0);
    v8 = v20;
    if ((_DWORD)v20)
    {
      v9 = *(_QWORD *)(*(_QWORD *)(a1[5] + 24) + 160);
      v10 = v19;
      do
      {
        v11 = *(_QWORD *)&v3 & -*(_QWORD *)&v3;
        *v10++ = *(_DWORD *)(v9 + 4 * (63 - __clz(v11)));
        *(_QWORD *)&v3 ^= v11;
        --v8;
      }
      while (v8);
    }
    v12 = (_QWORD *)a1[2];
    v13 = a1 + 3;
    if ((a3 & 1) != 0)
    {
      if (v12 != v13)
      {
        do
        {
          (*(void (**)(_QWORD, uint64_t, void *, _QWORD))(*(_QWORD *)v12[4] + 56))(v12[4], a2, v19, v20);
          v14 = (_QWORD *)v12[1];
          if (v14)
          {
            do
            {
              v15 = v14;
              v14 = (_QWORD *)*v14;
            }
            while (v14);
          }
          else
          {
            do
            {
              v15 = (_QWORD *)v12[2];
              v16 = *v15 == (_QWORD)v12;
              v12 = v15;
            }
            while (!v16);
          }
          v12 = v15;
        }
        while (v15 != v13);
      }
    }
    else if (v12 != v13)
    {
      do
      {
        (*(void (**)(_QWORD, uint64_t, void *, _QWORD))(*(_QWORD *)v12[4] + 64))(v12[4], a2, v19, v20);
        v17 = (_QWORD *)v12[1];
        if (v17)
        {
          do
          {
            v18 = v17;
            v17 = (_QWORD *)*v17;
          }
          while (v17);
        }
        else
        {
          do
          {
            v18 = (_QWORD *)v12[2];
            v16 = *v18 == (_QWORD)v12;
            v12 = v18;
          }
          while (!v16);
        }
        v12 = v18;
      }
      while (v18 != v13);
    }
    if (v19 != v21)
      free(v19);
  }
}

uint64_t llvm::mca::ExecuteStage::notifyInstructionIssued(uint64_t result, uint64_t a2, unint64_t *a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  BOOL v11;
  int v12;
  uint64_t v13;
  unint64_t *v14;
  uint64_t v15;

  if (a4)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(result + 40) + 24) + 160);
    v5 = 24 * a4;
    v6 = a3;
    do
    {
      *v6 = *(unsigned int *)(v4 + 4 * (63 - __clz(*v6)));
      v6 += 3;
      v5 -= 24;
    }
    while (v5);
  }
  v12 = 4;
  v13 = a2;
  v14 = a3;
  v15 = a4;
  v7 = *(_QWORD **)(result + 16);
  v8 = (_QWORD *)(result + 24);
  if (v7 != (_QWORD *)(result + 24))
  {
    do
    {
      result = (*(uint64_t (**)(_QWORD, int *))(*(_QWORD *)v7[4] + 24))(v7[4], &v12);
      v9 = (_QWORD *)v7[1];
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (_QWORD *)v7[2];
          v11 = *v10 == (_QWORD)v7;
          v7 = v10;
        }
        while (!v11);
      }
      v7 = v10;
    }
    while (v10 != v8);
  }
  return result;
}

uint64_t llvm::mca::ExecuteStage::notifyInstructionExecuted(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;
  int v7;
  uint64_t v8;

  v7 = 5;
  v8 = a2;
  v2 = *(_QWORD **)(result + 16);
  v3 = (_QWORD *)(result + 24);
  if (v2 != (_QWORD *)(result + 24))
  {
    do
    {
      result = (*(uint64_t (**)(_QWORD, int *))(*(_QWORD *)v2[4] + 24))(v2[4], &v7);
      v4 = (_QWORD *)v2[1];
      if (v4)
      {
        do
        {
          v5 = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (_QWORD *)v2[2];
          v6 = *v5 == (_QWORD)v2;
          v2 = v5;
        }
        while (!v6);
      }
      v2 = v5;
    }
    while (v5 != v3);
  }
  return result;
}

uint64_t llvm::mca::ExecuteStage::notifyInstructionPending(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;
  int v7;
  uint64_t v8;

  v7 = 2;
  v8 = a2;
  v2 = *(_QWORD **)(result + 16);
  v3 = (_QWORD *)(result + 24);
  if (v2 != (_QWORD *)(result + 24))
  {
    do
    {
      result = (*(uint64_t (**)(_QWORD, int *))(*(_QWORD *)v2[4] + 24))(v2[4], &v7);
      v4 = (_QWORD *)v2[1];
      if (v4)
      {
        do
        {
          v5 = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (_QWORD *)v2[2];
          v6 = *v5 == (_QWORD)v2;
          v2 = v5;
        }
        while (!v6);
      }
      v2 = v5;
    }
    while (v5 != v3);
  }
  return result;
}

uint64_t llvm::mca::ExecuteStage::notifyInstructionReady(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;
  int v7;
  uint64_t v8;

  v7 = 3;
  v8 = a2;
  v2 = *(_QWORD **)(result + 16);
  v3 = (_QWORD *)(result + 24);
  if (v2 != (_QWORD *)(result + 24))
  {
    do
    {
      result = (*(uint64_t (**)(_QWORD, int *))(*(_QWORD *)v2[4] + 24))(v2[4], &v7);
      v4 = (_QWORD *)v2[1];
      if (v4)
      {
        do
        {
          v5 = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (_QWORD *)v2[2];
          v6 = *v5 == (_QWORD)v2;
          v2 = v5;
        }
        while (!v6);
      }
      v2 = v5;
    }
    while (v5 != v3);
  }
  return result;
}

void llvm::mca::ExecuteStage::issueReadyInstructions(llvm::mca::Scheduler **this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  _QWORD v5[2];

  for (v5[0] = llvm::mca::Scheduler::select(this[5]); ; LODWORD(v5[0]) = llvm::mca::Scheduler::select(this[5]))
  {
    v5[1] = v4;
    if (!v4)
      break;
    llvm::mca::ExecuteStage::issueInstruction((uint64_t)this, (uint64_t)v5, a2);
    if (*a2)
      return;
  }
  *a2 = 0;
}

void llvm::mca::ExecuteStage::cycleStart(llvm::mca::ExecuteStage *this@<X0>, _QWORD *a2@<X8>)
{
  char *v4;
  char *v5;
  char *v6;
  char *v7;
  char *v8;
  char *v9;
  BOOL v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  char *v19;
  char *v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  char *v25;
  char *v26;
  char *v27;
  char *v28;
  int v29;
  char *v30;
  void *v31;
  uint64_t v32;
  _BYTE v33[64];
  void *v34;
  uint64_t v35;
  _BYTE v36[64];
  void *v37;
  uint64_t v38;
  _BYTE v39[64];
  char *v40;
  uint64_t v41;
  _QWORD v42[18];

  v42[16] = *MEMORY[0x1E0C80C00];
  v40 = (char *)v42;
  v41 = 0x800000000;
  v37 = v39;
  v38 = 0x400000000;
  v34 = v36;
  v35 = 0x400000000;
  v31 = v33;
  v32 = 0x400000000;
  llvm::mca::Scheduler::cycleEvent(*((_QWORD *)this + 5), (uint64_t)&v40, &v37, &v34, &v31);
  *((_QWORD *)this + 6) = 0;
  if ((_DWORD)v41)
  {
    v4 = v40;
    v5 = &v40[16 * v41];
    v6 = (char *)this + 24;
    do
    {
      v7 = (char *)*((_QWORD *)this + 2);
      if (v7 != v6)
      {
        do
        {
          (*(void (**)(_QWORD, char *))(**((_QWORD **)v7 + 4) + 48))(*((_QWORD *)v7 + 4), v4);
          v8 = (char *)*((_QWORD *)v7 + 1);
          if (v8)
          {
            do
            {
              v9 = v8;
              v8 = *(char **)v8;
            }
            while (v8);
          }
          else
          {
            do
            {
              v9 = (char *)*((_QWORD *)v7 + 2);
              v10 = *(_QWORD *)v9 == (_QWORD)v7;
              v7 = v9;
            }
            while (!v10);
          }
          v7 = v9;
        }
        while (v9 != v6);
      }
      v4 += 16;
    }
    while (v4 != v5);
  }
  if ((_DWORD)v38)
  {
    v11 = (char *)v37;
    v12 = (char *)v37 + 16 * v38;
    v13 = (char *)this + 24;
    while (1)
    {
      v29 = 5;
      v30 = v11;
      v14 = (char *)*((_QWORD *)this + 2);
      if (v14 != v13)
      {
        do
        {
          (*(void (**)(_QWORD, int *))(**((_QWORD **)v14 + 4) + 24))(*((_QWORD *)v14 + 4), &v29);
          v15 = (char *)*((_QWORD *)v14 + 1);
          if (v15)
          {
            do
            {
              v16 = v15;
              v15 = *(char **)v15;
            }
            while (v15);
          }
          else
          {
            do
            {
              v16 = (char *)*((_QWORD *)v14 + 2);
              v10 = *(_QWORD *)v16 == (_QWORD)v14;
              v14 = v16;
            }
            while (!v10);
          }
          v14 = v16;
        }
        while (v16 != v13);
      }
      (*(void (**)(_QWORD, char *))(**((_QWORD **)this + 1) + 48))(*((_QWORD *)this + 1), v11);
      if (*a2)
        break;
      v11 += 16;
      if (v11 == v12)
        goto LABEL_22;
    }
  }
  else
  {
LABEL_22:
    if ((_DWORD)v35)
    {
      v17 = (char *)v34;
      v18 = (char *)v34 + 16 * v35;
      v19 = (char *)this + 24;
      do
      {
        v29 = 2;
        v30 = v17;
        v20 = (char *)*((_QWORD *)this + 2);
        if (v20 != v19)
        {
          do
          {
            (*(void (**)(_QWORD, int *))(**((_QWORD **)v20 + 4) + 24))(*((_QWORD *)v20 + 4), &v29);
            v21 = (char *)*((_QWORD *)v20 + 1);
            if (v21)
            {
              do
              {
                v22 = v21;
                v21 = *(char **)v21;
              }
              while (v21);
            }
            else
            {
              do
              {
                v22 = (char *)*((_QWORD *)v20 + 2);
                v10 = *(_QWORD *)v22 == (_QWORD)v20;
                v20 = v22;
              }
              while (!v10);
            }
            v20 = v22;
          }
          while (v22 != v19);
        }
        v17 += 16;
      }
      while (v17 != v18);
    }
    if ((_DWORD)v32)
    {
      v23 = (char *)v31;
      v24 = (char *)v31 + 16 * v32;
      v25 = (char *)this + 24;
      do
      {
        v29 = 3;
        v30 = v23;
        v26 = (char *)*((_QWORD *)this + 2);
        if (v26 != v25)
        {
          do
          {
            (*(void (**)(_QWORD, int *))(**((_QWORD **)v26 + 4) + 24))(*((_QWORD *)v26 + 4), &v29);
            v27 = (char *)*((_QWORD *)v26 + 1);
            if (v27)
            {
              do
              {
                v28 = v27;
                v27 = *(char **)v27;
              }
              while (v27);
            }
            else
            {
              do
              {
                v28 = (char *)*((_QWORD *)v26 + 2);
                v10 = *(_QWORD *)v28 == (_QWORD)v26;
                v26 = v28;
              }
              while (!v10);
            }
            v26 = v28;
          }
          while (v28 != v25);
        }
        v23 += 16;
      }
      while (v23 != v24);
    }
    llvm::mca::ExecuteStage::issueReadyInstructions((llvm::mca::Scheduler **)this, a2);
  }
  if (v31 != v33)
    free(v31);
  if (v34 != v36)
    free(v34);
  if (v37 != v39)
    free(v37);
  if (v40 != (char *)v42)
    free(v40);
}

uint64_t llvm::mca::ExecuteStage::notifyResourceAvailable(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v5;
  _QWORD *v6;
  BOOL v7;

  v2 = *(_QWORD **)(result + 16);
  v3 = (_QWORD *)(result + 24);
  if (v2 != (_QWORD *)(result + 24))
  {
    do
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)v2[4] + 48))(v2[4], a2);
      v5 = (_QWORD *)v2[1];
      if (v5)
      {
        do
        {
          v6 = v5;
          v5 = (_QWORD *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          v6 = (_QWORD *)v2[2];
          v7 = *v6 == (_QWORD)v2;
          v2 = v6;
        }
        while (!v7);
      }
      v2 = v6;
    }
    while (v6 != v3);
  }
  return result;
}

void llvm::mca::ExecuteStage::cycleEnd(llvm::mca::ExecuteStage *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  llvm::mca::ExecuteStage *v6;
  llvm::mca::ExecuteStage *v7;
  llvm::mca::ExecuteStage *v8;
  BOOL v9;
  llvm::mca::ExecuteStage *v10;
  llvm::mca::ExecuteStage *v11;
  llvm::mca::ExecuteStage *v12;
  _BYTE *v13;
  char *v14;
  char *v15;
  char *v16;
  char *v17;
  int v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  uint64_t v23;
  _BYTE v24[128];
  void *v25;
  uint64_t v26;
  _QWORD v27[16];
  _QWORD *v28;
  uint64_t v29;
  _QWORD v30[17];

  v30[16] = *MEMORY[0x1E0C80C00];
  if (*((_BYTE *)this + 56)
    && ((v4 = *((_QWORD *)this + 5), *(_BYTE *)(v4 + 140)) || *((_DWORD *)this + 12) > *((_DWORD *)this + 13)))
  {
    v28 = v30;
    v29 = 0x800000000;
    sub_1C5979D0C((uint64_t)&v28, (uint64_t)v30, *(__int128 **)(v4 + 80), *(__int128 **)(v4 + 88));
    v5 = *(_QWORD *)(v4 + 128);
    if (v5)
    {
      LODWORD(v25) = 1;
      v26 = (uint64_t)v28;
      v27[0] = v29;
      v27[1] = v5;
      v6 = (llvm::mca::ExecuteStage *)*((_QWORD *)this + 2);
      if (v6 != (llvm::mca::ExecuteStage *)((char *)this + 24))
      {
        do
        {
          (*(void (**)(_QWORD, void **))(**((_QWORD **)v6 + 4) + 40))(*((_QWORD *)v6 + 4), &v25);
          v7 = (llvm::mca::ExecuteStage *)*((_QWORD *)v6 + 1);
          if (v7)
          {
            do
            {
              v8 = v7;
              v7 = *(llvm::mca::ExecuteStage **)v7;
            }
            while (v7);
          }
          else
          {
            do
            {
              v8 = (llvm::mca::ExecuteStage *)*((_QWORD *)v6 + 2);
              v9 = *(_QWORD *)v8 == (_QWORD)v6;
              v6 = v8;
            }
            while (!v9);
          }
          v6 = v8;
        }
        while (v8 != (llvm::mca::ExecuteStage *)((char *)this + 24));
      }
    }
    v25 = v27;
    v26 = 0x800000000;
    v22 = v24;
    v23 = 0x800000000;
    llvm::mca::Scheduler::analyzeDataDependencies(*((_QWORD *)this + 5), (uint64_t)&v25, (uint64_t)&v22);
    if ((_DWORD)v26)
    {
      v18 = 2;
      v19 = v25;
      v20 = v26;
      v21 = 0;
      v10 = (llvm::mca::ExecuteStage *)*((_QWORD *)this + 2);
      if (v10 != (llvm::mca::ExecuteStage *)((char *)this + 24))
      {
        do
        {
          (*(void (**)(_QWORD, int *))(**((_QWORD **)v10 + 4) + 40))(*((_QWORD *)v10 + 4), &v18);
          v11 = (llvm::mca::ExecuteStage *)*((_QWORD *)v10 + 1);
          if (v11)
          {
            do
            {
              v12 = v11;
              v11 = *(llvm::mca::ExecuteStage **)v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              v12 = (llvm::mca::ExecuteStage *)*((_QWORD *)v10 + 2);
              v9 = *(_QWORD *)v12 == (_QWORD)v10;
              v10 = v12;
            }
            while (!v9);
          }
          v10 = v12;
        }
        while (v12 != (llvm::mca::ExecuteStage *)((char *)this + 24));
      }
    }
    v13 = v22;
    if ((_DWORD)v23)
    {
      v18 = 3;
      v19 = v22;
      v20 = v23;
      v21 = 0;
      v14 = (char *)*((_QWORD *)this + 2);
      v15 = (char *)this + 24;
      if (v14 != v15)
      {
        do
        {
          (*(void (**)(_QWORD, int *))(**((_QWORD **)v14 + 4) + 40))(*((_QWORD *)v14 + 4), &v18);
          v16 = (char *)*((_QWORD *)v14 + 1);
          if (v16)
          {
            do
            {
              v17 = v16;
              v16 = *(char **)v16;
            }
            while (v16);
          }
          else
          {
            do
            {
              v17 = (char *)*((_QWORD *)v14 + 2);
              v9 = *(_QWORD *)v17 == (_QWORD)v14;
              v14 = v17;
            }
            while (!v9);
          }
          v14 = v17;
        }
        while (v17 != v15);
        v13 = v22;
      }
    }
    *a2 = 0;
    if (v13 != v24)
      free(v13);
    if (v25 != v27)
      free(v25);
    if (v28 != v30)
      free(v28);
  }
  else
  {
    *a2 = 0;
  }
}

uint64_t llvm::mca::ExecuteStage::handleInstructionEliminated(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  int v15;
  uint64_t v16;

  v15 = 2;
  v16 = a2;
  v4 = *(_QWORD **)(a1 + 16);
  v5 = (_QWORD *)(a1 + 24);
  if (v4 != (_QWORD *)(a1 + 24))
  {
    do
    {
      (*(void (**)(_QWORD, int *))(*(_QWORD *)v4[4] + 24))(v4[4], &v15);
      v6 = (_QWORD *)v4[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v4[2];
          v8 = *v7 == (_QWORD)v4;
          v4 = v7;
        }
        while (!v8);
      }
      v4 = v7;
    }
    while (v7 != v5);
    v4 = *(_QWORD **)(a1 + 16);
  }
  v15 = 3;
  v16 = a2;
  if (v4 != v5)
  {
    do
    {
      (*(void (**)(_QWORD, int *))(*(_QWORD *)v4[4] + 24))(v4[4], &v15);
      v9 = (_QWORD *)v4[1];
      if (v9)
      {
        do
        {
          v10 = v9;
          v9 = (_QWORD *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          v10 = (_QWORD *)v4[2];
          v8 = *v10 == (_QWORD)v4;
          v4 = v10;
        }
        while (!v8);
      }
      v4 = v10;
    }
    while (v10 != v5);
  }
  llvm::mca::ExecuteStage::notifyInstructionIssued(a1, a2, 0, 0);
  *(_QWORD *)(*(_QWORD *)(a2 + 8) + 544) = 5;
  v15 = 5;
  v16 = a2;
  v11 = *(_QWORD **)(a1 + 16);
  if (v11 != v5)
  {
    do
    {
      (*(void (**)(_QWORD, int *))(*(_QWORD *)v11[4] + 24))(v11[4], &v15);
      v12 = (_QWORD *)v11[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v11[2];
          v8 = *v13 == (_QWORD)v11;
          v11 = v13;
        }
        while (!v8);
      }
      v11 = v13;
    }
    while (v13 != v5);
  }
  return (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 48))(*(_QWORD *)(a1 + 8), a2);
}

void llvm::mca::ExecuteStage::execute(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  char v6;
  _DWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  int v20;
  uint64_t v21;

  if (*(_BYTE *)(*(_QWORD *)(a2 + 8) + 600))
  {
    llvm::mca::ExecuteStage::handleInstructionEliminated(a1, a2);
    return;
  }
  v6 = llvm::mca::Scheduler::dispatch(*(_QWORD *)(a1 + 40), a2);
  v7 = *(_DWORD **)(a2 + 8);
  *(_DWORD *)(a1 + 48) += *(_DWORD *)(*(_QWORD *)v7 + 284);
  llvm::mca::ExecuteStage::notifyReservedOrReleasedBuffers((_QWORD *)a1, a2, 1);
  if ((v6 & 1) == 0)
  {
    if (v7[136] == 2)
    {
      v20 = 2;
      v21 = a2;
      v17 = *(_QWORD **)(a1 + 16);
      if (v17 != (_QWORD *)(a1 + 24))
      {
        do
        {
          (*(void (**)(_QWORD, int *))(*(_QWORD *)v17[4] + 24))(v17[4], &v20);
          v18 = (_QWORD *)v17[1];
          if (v18)
          {
            do
            {
              v19 = v18;
              v18 = (_QWORD *)*v18;
            }
            while (v18);
          }
          else
          {
            do
            {
              v19 = (_QWORD *)v17[2];
              v12 = *v19 == (_QWORD)v17;
              v17 = v19;
            }
            while (!v12);
          }
          v17 = v19;
        }
        while (v19 != (_QWORD *)(a1 + 24));
      }
    }
    goto LABEL_31;
  }
  v20 = 2;
  v21 = a2;
  v8 = *(_QWORD **)(a1 + 16);
  v9 = (_QWORD *)(a1 + 24);
  if (v8 != (_QWORD *)(a1 + 24))
  {
    do
    {
      (*(void (**)(_QWORD, int *))(*(_QWORD *)v8[4] + 24))(v8[4], &v20);
      v10 = (_QWORD *)v8[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (_QWORD *)v8[2];
          v12 = *v11 == (_QWORD)v8;
          v8 = v11;
        }
        while (!v12);
      }
      v8 = v11;
    }
    while (v11 != v9);
    v13 = *(_QWORD **)(a1 + 16);
    v20 = 3;
    v21 = a2;
    if (v13 != v9)
    {
      do
      {
        (*(void (**)(_QWORD, int *))(*(_QWORD *)v13[4] + 24))(v13[4], &v20);
        v14 = (_QWORD *)v13[1];
        if (v14)
        {
          do
          {
            v15 = v14;
            v14 = (_QWORD *)*v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            v15 = (_QWORD *)v13[2];
            v12 = *v15 == (_QWORD)v13;
            v13 = v15;
          }
          while (!v12);
        }
        v13 = v15;
      }
      while (v15 != v9);
    }
  }
  v16 = **(_QWORD **)(a2 + 8);
  if ((*(_DWORD *)(v16 + 280) || *(_DWORD *)(v16 + 144)) && (*(_BYTE *)(v16 + 292) & 1) == 0)
  {
LABEL_31:
    *a3 = 0;
    return;
  }
  llvm::mca::ExecuteStage::issueInstruction(a1, a2, a3);
}

uint64_t sub_1C5980F40(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E8184B50;
  sub_1C4FE319C(a1 + 16, *(_QWORD **)(a1 + 24));
  return a1;
}

void sub_1C5980F78(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E8184B50;
  sub_1C4FE319C(a1 + 16, *(_QWORD **)(a1 + 24));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5980FC0()
{
  return 0;
}

uint64_t llvm::mca::StallInfo::clear(uint64_t this)
{
  *(_QWORD *)(this + 8) = 0;
  *(_QWORD *)(this + 16) = 0;
  return this;
}

uint64_t llvm::mca::StallInfo::update(uint64_t result, uint64_t a2, int a3, int a4)
{
  *(_DWORD *)result = *(_DWORD *)a2;
  *(_QWORD *)(result + 8) = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(result + 16) = a3;
  *(_DWORD *)(result + 20) = a4;
  return result;
}

uint64_t llvm::mca::StallInfo::cycleEnd(uint64_t this)
{
  int v1;

  if (*(_QWORD *)(this + 8))
  {
    v1 = *(_DWORD *)(this + 16);
    if (v1)
      *(_DWORD *)(this + 16) = v1 - 1;
  }
  return this;
}

uint64_t llvm::mca::InOrderIssueStage::InOrderIssueStage(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = a1 + 24;
  *(_QWORD *)a1 = &off_1E8184A30;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = a2;
  *(_QWORD *)(a1 + 48) = a3;
  llvm::mca::ResourceManager::ResourceManager(a1 + 56, *(_QWORD *)(a2 + 160));
  *(_QWORD *)(a1 + 408) = a4;
  *(_QWORD *)(a1 + 416) = a5;
  *(_QWORD *)(a1 + 424) = a1 + 440;
  *(_QWORD *)(a1 + 432) = 0x400000000;
  *(_DWORD *)(a1 + 504) = 0;
  *(_DWORD *)(a1 + 512) = 0;
  *(_QWORD *)(a1 + 528) = 0;
  *(_QWORD *)(a1 + 520) = 0;
  *(_DWORD *)(a1 + 536) = 0;
  *(_QWORD *)(a1 + 552) = 0;
  *(_QWORD *)(a1 + 544) = 0;
  *(_DWORD *)(a1 + 560) = 0;
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)a4 + 64))(a4, a1);
  return a1;
}

uint64_t llvm::mca::InOrderIssueStage::getIssueWidth(llvm::mca::InOrderIssueStage *this)
{
  return **(unsigned int **)(*((_QWORD *)this + 5) + 160);
}

BOOL llvm::mca::InOrderIssueStage::hasWorkToComplete(llvm::mca::InOrderIssueStage *this)
{
  return *((_DWORD *)this + 108) || *((_QWORD *)this + 65) || *((_QWORD *)this + 68) != 0;
}

BOOL llvm::mca::InOrderIssueStage::isAvailable(uint64_t a1, uint64_t a2)
{
  _BYTE *v2;
  unsigned int v3;
  BOOL v4;
  _BOOL8 result;

  result = 0;
  if (!*(_QWORD *)(a1 + 520) && !*(_QWORD *)(a1 + 544))
  {
    v2 = *(_BYTE **)(a2 + 8);
    v3 = *(_DWORD *)(*(_QWORD *)v2 + 284);
    v4 = *(_DWORD *)(a1 + 556) >= v3 || v3 > **(_DWORD **)(*(_QWORD *)(a1 + 40) + 160);
    if (v4 && ((v2[540] & 0x20) == 0 || !*(_DWORD *)(a1 + 504)))
      return 1;
  }
  return result;
}

uint64_t llvm::mca::InOrderIssueStage::canExecute(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  llvm::mca::RegisterFile *v6;
  const llvm::MCSubtargetInfo *v7;
  const llvm::mca::ReadState *v8;
  uint64_t v9;
  int64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int *v14;
  unsigned int v15;
  uint64_t result;
  unsigned int v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  int *v21;
  int v22;
  unsigned int v23;
  BOOL v24;
  int v25;

  v4 = *(_QWORD *)(a2 + 8);
  v5 = *(unsigned int *)(v4 + 312);
  if ((_DWORD)v5)
  {
    v7 = *(const llvm::MCSubtargetInfo **)(a1 + 40);
    v6 = *(llvm::mca::RegisterFile **)(a1 + 48);
    v8 = *(const llvm::mca::ReadState **)(v4 + 304);
    v9 = 48 * v5;
    while (1)
    {
      v10 = llvm::mca::RegisterFile::checkRAWHazards(v6, v7, v8);
      if ((_WORD)v10)
        break;
      v8 = (const llvm::mca::ReadState *)((char *)v8 + 48);
      v9 -= 48;
      if (!v9)
      {
        v4 = *(_QWORD *)(a2 + 8);
        goto LABEL_11;
      }
    }
    v11 = HIDWORD(v10);
    if (v10 < 0)
      LODWORD(v11) = 1;
    v4 = *(_QWORD *)(a2 + 8);
    if ((_DWORD)v11)
    {
      *(_DWORD *)(a1 + 512) = *(_DWORD *)a2;
      HIDWORD(v12) = 1;
LABEL_10:
      LODWORD(v12) = v11;
LABEL_18:
      result = 0;
      *(_QWORD *)(a1 + 520) = v4;
      *(_QWORD *)(a1 + 528) = v12;
      return result;
    }
  }
LABEL_11:
  if (llvm::mca::ResourceManager::checkAvailability((_QWORD *)(a1 + 56), *(_QWORD *)v4))
  {
    *(_DWORD *)(a1 + 512) = *(_DWORD *)a2;
    v12 = 0x200000001;
    goto LABEL_18;
  }
  if ((*(_BYTE *)(v4 + 540) & 0xC) != 0)
  {
    v13 = *(_QWORD *)(a1 + 416);
    v25 = *(_DWORD *)(v4 + 556);
    v14 = sub_1C4A1156C((uint64_t *)(v13 + 32), &v25);
    if (*(_DWORD *)(*((_QWORD *)v14 + 1) + 8) != **((_DWORD **)v14 + 1))
    {
      *(_DWORD *)(a1 + 512) = *(_DWORD *)a2;
      v12 = 0x400000001;
      v4 = *(_QWORD *)(a2 + 8);
      goto LABEL_18;
    }
  }
  v15 = (*(uint64_t (**)(_QWORD, _QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 408) + 32))(*(_QWORD *)(a1 + 408), *(_QWORD *)(a1 + 424), *(unsigned int *)(a1 + 432), a2);
  if (v15)
  {
    *(_DWORD *)(a1 + 512) = *(_DWORD *)a2;
    v4 = *(_QWORD *)(a2 + 8);
    v12 = v15 | 0x500000000;
    goto LABEL_18;
  }
  v17 = *(_DWORD *)(a1 + 560);
  if (v17)
  {
    v4 = *(_QWORD *)(a2 + 8);
    if ((*(char *)(v4 + 540) & 0x80000000) == 0)
    {
      v18 = *(_DWORD *)(*(_QWORD *)v4 + 280);
      v19 = *(unsigned int *)(v4 + 24);
      if ((_DWORD)v19)
      {
        v20 = 136 * v19;
        v21 = (int *)(*(_QWORD *)(v4 + 16) + 8);
        do
        {
          v22 = *v21;
          if (*v21 == -512)
            v22 = *(_DWORD *)(*((_QWORD *)v21 - 1) + 4);
          v23 = v22 & ~(v22 >> 31);
          if (v23 < v18)
            v18 = v23;
          v21 += 34;
          v20 -= 136;
        }
        while (v20);
      }
      v24 = v17 >= v18;
      LODWORD(v11) = v17 - v18;
      if ((_DWORD)v11 != 0 && v24)
      {
        *(_DWORD *)(a1 + 512) = *(_DWORD *)a2;
        HIDWORD(v12) = 3;
        goto LABEL_10;
      }
    }
  }
  return 1;
}

uint64_t llvm::mca::InOrderIssueStage::notifyInstructionIssued(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v7;
  _QWORD *v8;
  uint64_t v9;
  _QWORD *v10;
  _QWORD *v11;
  BOOL v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;

  v15 = 3;
  v16 = a2;
  v7 = *(_QWORD **)(result + 16);
  v8 = (_QWORD *)(result + 24);
  if (v7 != (_QWORD *)(result + 24))
  {
    v9 = result;
    do
    {
      result = (*(uint64_t (**)(_QWORD, int *))(*(_QWORD *)v7[4] + 24))(v7[4], &v15);
      v10 = (_QWORD *)v7[1];
      if (v10)
      {
        do
        {
          v11 = v10;
          v10 = (_QWORD *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          v11 = (_QWORD *)v7[2];
          v12 = *v11 == (_QWORD)v7;
          v7 = v11;
        }
        while (!v12);
      }
      v7 = v11;
    }
    while (v11 != v8);
    v7 = *(_QWORD **)(v9 + 16);
  }
  v15 = 4;
  v16 = a2;
  v17 = a3;
  v18 = a4;
  if (v7 != v8)
  {
    do
    {
      result = (*(uint64_t (**)(_QWORD, int *))(*(_QWORD *)v7[4] + 24))(v7[4], &v15);
      v13 = (_QWORD *)v7[1];
      if (v13)
      {
        do
        {
          v14 = v13;
          v13 = (_QWORD *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          v14 = (_QWORD *)v7[2];
          v12 = *v14 == (_QWORD)v7;
          v7 = v14;
        }
        while (!v12);
      }
      v7 = v14;
    }
    while (v14 != v8);
  }
  return result;
}

uint64_t llvm::mca::InOrderIssueStage::notifyInstructionDispatched(uint64_t result, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  BOOL v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;

  v10 = 6;
  v11 = a2;
  v12 = a4;
  v13 = a5;
  v14 = a3;
  v5 = *(_QWORD **)(result + 16);
  v6 = (_QWORD *)(result + 24);
  if (v5 != (_QWORD *)(result + 24))
  {
    do
    {
      result = (*(uint64_t (**)(_QWORD, int *))(*(_QWORD *)v5[4] + 24))(v5[4], &v10);
      v7 = (_QWORD *)v5[1];
      if (v7)
      {
        do
        {
          v8 = v7;
          v7 = (_QWORD *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          v8 = (_QWORD *)v5[2];
          v9 = *v8 == (_QWORD)v5;
          v5 = v8;
        }
        while (!v9);
      }
      v5 = v8;
    }
    while (v8 != v6);
  }
  return result;
}

uint64_t llvm::mca::InOrderIssueStage::notifyInstructionExecuted(uint64_t result, uint64_t a2)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  BOOL v6;
  int v7;
  uint64_t v8;

  v7 = 5;
  v8 = a2;
  v2 = *(_QWORD **)(result + 16);
  v3 = (_QWORD *)(result + 24);
  if (v2 != (_QWORD *)(result + 24))
  {
    do
    {
      result = (*(uint64_t (**)(_QWORD, int *))(*(_QWORD *)v2[4] + 24))(v2[4], &v7);
      v4 = (_QWORD *)v2[1];
      if (v4)
      {
        do
        {
          v5 = v4;
          v4 = (_QWORD *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          v5 = (_QWORD *)v2[2];
          v6 = *v5 == (_QWORD)v2;
          v2 = v5;
        }
        while (!v6);
      }
      v2 = v5;
    }
    while (v5 != v3);
  }
  return result;
}

uint64_t llvm::mca::InOrderIssueStage::notifyInstructionRetired(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4)
{
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v9 = 1;
  v10 = a2;
  v11 = a3;
  v12 = a4;
  v4 = *(_QWORD **)(result + 16);
  v5 = (_QWORD *)(result + 24);
  if (v4 != (_QWORD *)(result + 24))
  {
    do
    {
      result = (*(uint64_t (**)(_QWORD, int *))(*(_QWORD *)v4[4] + 24))(v4[4], &v9);
      v6 = (_QWORD *)v4[1];
      if (v6)
      {
        do
        {
          v7 = v6;
          v6 = (_QWORD *)*v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          v7 = (_QWORD *)v4[2];
          v8 = *v7 == (_QWORD)v4;
          v4 = v7;
        }
        while (!v8);
      }
      v4 = v7;
    }
    while (v7 != v5);
  }
  return result;
}

void llvm::mca::InOrderIssueStage::execute(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;

  v6 = *(_QWORD *)(a2 + 8);
  if ((*(_BYTE *)(v6 + 540) & 0xC) != 0)
    *(_DWORD *)(v6 + 556) = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 416) + 24))(*(_QWORD *)(a1 + 416), a2);
  llvm::mca::InOrderIssueStage::tryIssue(a1, a2, a3);
  if (!*a3)
  {
    if (*(_QWORD *)(a1 + 520))
      llvm::mca::InOrderIssueStage::notifyStallEvent(a1);
    *a3 = 0;
  }
}

void llvm::mca::InOrderIssueStage::tryIssue(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  unint64_t v9;
  llvm::mca::RegisterFile *v10;
  uint64_t v11;
  const llvm::MCSubtargetInfo *v12;
  llvm::mca::ReadState *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t *v23;
  unsigned int v24;
  int v25;
  int v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  BOOL v30;
  __int128 v31;
  uint64_t v32;
  __int128 v33;
  int v34;
  uint64_t v35;
  __int128 v36;
  _QWORD v37[12];
  _QWORD *v38;
  uint64_t v39;
  _QWORD v40[4];

  v40[2] = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_DWORD *)a2;
  v8 = *(_QWORD *)v6;
  if ((llvm::mca::InOrderIssueStage::canExecute(a1, a2) & 1) != 0)
  {
    *(_DWORD *)(v6 + 544) = 1;
    *(_DWORD *)(v6 + 552) = -1;
    if (llvm::mca::Instruction::updateDispatched((llvm::mca::Instruction *)v6))
      llvm::mca::Instruction::updatePending((llvm::mca::Instruction *)v6);
    v9 = *(unsigned int *)(*(_QWORD *)(a1 + 48) + 24);
    v38 = v40;
    v39 = 0x400000000;
    sub_1C4893E04((char *)&v38, v9, 0);
    v10 = *(llvm::mca::RegisterFile **)(a1 + 48);
    v11 = *(unsigned int *)(v6 + 312);
    if ((_DWORD)v11)
    {
      v12 = *(const llvm::MCSubtargetInfo **)(a1 + 40);
      v13 = *(llvm::mca::ReadState **)(v6 + 304);
      v14 = 48 * v11;
      do
      {
        llvm::mca::RegisterFile::addRegisterRead(v10, v13, v12);
        v13 = (llvm::mca::ReadState *)((char *)v13 + 48);
        v14 -= 48;
      }
      while (v14);
    }
    v15 = *(unsigned int *)(v6 + 24);
    if ((_DWORD)v15)
    {
      v16 = *(_QWORD *)(v6 + 16);
      v17 = 136 * v15;
      do
      {
        DWORD2(v36) = 0;
        *(_QWORD *)&v36 = v7;
        WORD6(v36) = 0;
        v37[0] = v16;
        llvm::mca::RegisterFile::addRegisterWrite((uint64_t *)v10, &v36, v38);
        v16 += 136;
        v17 -= 136;
      }
      while (v17);
    }
    v18 = *(_DWORD *)(*(_QWORD *)v6 + 284);
    llvm::mca::InOrderIssueStage::notifyInstructionDispatched(a1, a2, v18, (uint64_t)v38, v39);
    *(_QWORD *)&v36 = v37;
    *((_QWORD *)&v36 + 1) = 0x400000000;
    llvm::mca::ResourceManager::issueInstruction(a1 + 56, v8, (uint64_t)&v36);
    llvm::mca::Instruction::execute(v6, v7);
    if ((*(_BYTE *)(v6 + 540) & 0xC) != 0)
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 416) + 48))(*(_QWORD *)(a1 + 416), a2);
    v19 = v36;
    v20 = DWORD2(v36);
    if (DWORD2(v36))
    {
      v21 = *(_QWORD *)(a1 + 216);
      v22 = 24 * DWORD2(v36);
      v23 = (unint64_t *)v36;
      do
      {
        *v23 = *(unsigned int *)(v21 + 4 * (63 - __clz(*v23)));
        v23 += 3;
        v22 -= 24;
      }
      while (v22);
    }
    llvm::mca::InOrderIssueStage::notifyInstructionIssued(a1, a2, v19, v20);
    v24 = *(_DWORD *)(a1 + 556);
    v25 = v18 - v24;
    if (v18 <= v24)
    {
      *(_DWORD *)(a1 + 504) += v18;
      v26 = v24 - v18;
      if ((*(_BYTE *)(v6 + 540) & 0x40) != 0)
        v26 = 0;
    }
    else
    {
      v26 = 0;
      *(_DWORD *)(a1 + 552) = v25;
      *(_DWORD *)(a1 + 536) = *(_DWORD *)a2;
      *(_QWORD *)(a1 + 544) = *(_QWORD *)(a2 + 8);
    }
    *(_DWORD *)(a1 + 556) = v26;
    if (*(_DWORD *)(v6 + 544) == 5)
    {
      llvm::mca::RegisterFile::onInstructionExecuted(*(_QWORD *)(a1 + 48), v6);
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 416) + 32))(*(_QWORD *)(a1 + 416), a2);
      v34 = 5;
      v35 = a2;
      v27 = *(_QWORD **)(a1 + 16);
      if (v27 != (_QWORD *)(a1 + 24))
      {
        do
        {
          (*(void (**)(_QWORD, int *))(*(_QWORD *)v27[4] + 24))(v27[4], &v34);
          v28 = (_QWORD *)v27[1];
          if (v28)
          {
            do
            {
              v29 = v28;
              v28 = (_QWORD *)*v28;
            }
            while (v28);
          }
          else
          {
            do
            {
              v29 = (_QWORD *)v27[2];
              v30 = *v29 == (_QWORD)v27;
              v27 = v29;
            }
            while (!v30);
          }
          v27 = v29;
        }
        while (v29 != (_QWORD *)(a1 + 24));
      }
      llvm::mca::InOrderIssueStage::retireInstruction(a1, a2);
    }
    else
    {
      v31 = *(_OWORD *)a2;
      v32 = *(unsigned int *)(a1 + 432);
      if (v32 >= *(_DWORD *)(a1 + 436))
      {
        v33 = *(_OWORD *)a2;
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 424, a1 + 440, v32 + 1, 16);
        v31 = v33;
        LODWORD(v32) = *(_DWORD *)(a1 + 432);
      }
      *(_OWORD *)(*(_QWORD *)(a1 + 424) + 16 * v32) = v31;
      ++*(_DWORD *)(a1 + 432);
      if ((*(char *)(*(_QWORD *)(a2 + 8) + 540) & 0x80000000) == 0)
        *(_DWORD *)(a1 + 560) = *(_DWORD *)(v6 + 548);
    }
    *a3 = 0;
    if ((_QWORD *)v36 != v37)
      free((void *)v36);
    if (v38 != v40)
      free(v38);
  }
  else
  {
    *(_DWORD *)(a1 + 556) = 0;
    *a3 = 0;
  }
}

uint64_t llvm::mca::InOrderIssueStage::notifyStallEvent(uint64_t this)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  BOOL v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  int v23;
  uint64_t v24;
  __int128 v25;

  v1 = this;
  v2 = this + 512;
  v3 = *(_DWORD *)(this + 532);
  switch(v3)
  {
    case 5:
      v23 = 7;
      v24 = this + 512;
      v12 = *(_QWORD **)(this + 16);
      v13 = (_QWORD *)(this + 24);
      if (v12 != (_QWORD *)(this + 24))
      {
        do
        {
          this = (*(uint64_t (**)(_QWORD, int *))(*(_QWORD *)v12[4] + 32))(v12[4], &v23);
          v14 = (_QWORD *)v12[1];
          if (v14)
          {
            do
            {
              v15 = v14;
              v14 = (_QWORD *)*v14;
            }
            while (v14);
          }
          else
          {
            do
            {
              v15 = (_QWORD *)v12[2];
              v8 = *v15 == (_QWORD)v12;
              v12 = v15;
            }
            while (!v8);
          }
          v12 = v15;
        }
        while (v15 != v13);
      }
      break;
    case 2:
      v23 = 3;
      v24 = this + 512;
      v16 = *(_QWORD **)(this + 16);
      v17 = (_QWORD *)(this + 24);
      if (v16 != (_QWORD *)(this + 24))
      {
        do
        {
          this = (*(uint64_t (**)(_QWORD, int *))(*(_QWORD *)v16[4] + 32))(v16[4], &v23);
          v18 = (_QWORD *)v16[1];
          if (v18)
          {
            do
            {
              v19 = v18;
              v18 = (_QWORD *)*v18;
            }
            while (v18);
          }
          else
          {
            do
            {
              v19 = (_QWORD *)v16[2];
              v8 = *v19 == (_QWORD)v16;
              v16 = v19;
            }
            while (!v8);
          }
          v16 = v19;
        }
        while (v19 != v17);
        v20 = *(_QWORD **)(v1 + 16);
        v23 = 1;
        v24 = v2;
        v25 = xmmword_1C64169E0;
        if (v20 != v17)
        {
          do
          {
            this = (*(uint64_t (**)(_QWORD, int *))(*(_QWORD *)v20[4] + 40))(v20[4], &v23);
            v21 = (_QWORD *)v20[1];
            if (v21)
            {
              do
              {
                v22 = v21;
                v21 = (_QWORD *)*v21;
              }
              while (v21);
            }
            else
            {
              do
              {
                v22 = (_QWORD *)v20[2];
                v8 = *v22 == (_QWORD)v20;
                v20 = v22;
              }
              while (!v8);
            }
            v20 = v22;
          }
          while (v22 != v17);
        }
      }
      break;
    case 1:
      v23 = 1;
      v24 = this + 512;
      v4 = *(_QWORD **)(this + 16);
      v5 = (_QWORD *)(this + 24);
      if (v4 != (_QWORD *)(this + 24))
      {
        do
        {
          this = (*(uint64_t (**)(_QWORD, int *))(*(_QWORD *)v4[4] + 32))(v4[4], &v23);
          v6 = (_QWORD *)v4[1];
          if (v6)
          {
            do
            {
              v7 = v6;
              v6 = (_QWORD *)*v6;
            }
            while (v6);
          }
          else
          {
            do
            {
              v7 = (_QWORD *)v4[2];
              v8 = *v7 == (_QWORD)v4;
              v4 = v7;
            }
            while (!v8);
          }
          v4 = v7;
        }
        while (v7 != v5);
        v9 = *(_QWORD **)(v1 + 16);
        v23 = 2;
        v24 = v2;
        v25 = xmmword_1C64169E0;
        if (v9 != v5)
        {
          do
          {
            this = (*(uint64_t (**)(_QWORD, int *))(*(_QWORD *)v9[4] + 40))(v9[4], &v23);
            v10 = (_QWORD *)v9[1];
            if (v10)
            {
              do
              {
                v11 = v10;
                v10 = (_QWORD *)*v10;
              }
              while (v10);
            }
            else
            {
              do
              {
                v11 = (_QWORD *)v9[2];
                v8 = *v11 == (_QWORD)v9;
                v9 = v11;
              }
              while (!v8);
            }
            v9 = v11;
          }
          while (v11 != v5);
        }
      }
      break;
  }
  return this;
}

void llvm::mca::InOrderIssueStage::retireInstruction(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  void *v9;
  uint64_t v10;
  _QWORD v11[3];

  v11[2] = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a2 + 8);
  *(_DWORD *)(v4 + 544) = 6;
  v5 = *(unsigned int *)(*(_QWORD *)(a1 + 48) + 24);
  v9 = v11;
  v10 = 0x400000000;
  sub_1C4893E04((char *)&v9, v5, 0);
  v6 = *(unsigned int *)(v4 + 24);
  if ((_DWORD)v6)
  {
    v7 = *(uint64_t **)(v4 + 16);
    v8 = 136 * v6;
    do
    {
      llvm::mca::RegisterFile::removeRegisterWrite(*(_QWORD *)(a1 + 48), v7, v9);
      v7 += 17;
      v8 -= 136;
    }
    while (v8);
  }
  if ((*(_BYTE *)(v4 + 540) & 0xC) != 0)
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 416) + 40))(*(_QWORD *)(a1 + 416), a2);
  llvm::mca::InOrderIssueStage::notifyInstructionRetired(a1, a2, (uint64_t)v9, v10);
  if (v9 != v11)
    free(v9);
}

void llvm::mca::InOrderIssueStage::updateIssuedInst(llvm::mca::InOrderIssueStage *this)
{
  uint64_t v1;
  unsigned int v3;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  char *v9;
  char *v10;
  char *v11;
  BOOL v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  int v18;
  uint64_t v19;

  v1 = *((unsigned int *)this + 108);
  if ((_DWORD)v1)
  {
    v3 = 0;
    v4 = (unsigned int *)((char *)this + 424);
    v5 = *((_QWORD *)this + 53);
    v6 = v5 + 16 * v1;
    v7 = (char *)this + 24;
    do
    {
      v8 = *(_QWORD *)(v5 + 8);
      llvm::mca::Instruction::cycleEvent(v8);
      if (*(_DWORD *)(v8 + 544) == 5)
      {
        llvm::mca::RegisterFile::onInstructionExecuted(*((_QWORD *)this + 6), v8);
        (*(void (**)(_QWORD, uint64_t))(**((_QWORD **)this + 52) + 32))(*((_QWORD *)this + 52), v5);
        v18 = 5;
        v19 = v5;
        v9 = (char *)*((_QWORD *)this + 2);
        if (v9 != v7)
        {
          do
          {
            (*(void (**)(_QWORD, int *))(**((_QWORD **)v9 + 4) + 24))(*((_QWORD *)v9 + 4), &v18);
            v10 = (char *)*((_QWORD *)v9 + 1);
            if (v10)
            {
              do
              {
                v11 = v10;
                v10 = *(char **)v10;
              }
              while (v10);
            }
            else
            {
              do
              {
                v11 = (char *)*((_QWORD *)v9 + 2);
                v12 = *(_QWORD *)v11 == (_QWORD)v9;
                v9 = v11;
              }
              while (!v12);
            }
            v9 = v11;
          }
          while (v11 != v7);
        }
        v13 = v3 + 1;
        llvm::mca::InOrderIssueStage::retireInstruction((uint64_t)this, v5);
        v14 = -v13;
        v15 = v6 - 16 * v13;
        v16 = *(_DWORD *)v5;
        v17 = *(_QWORD *)(v5 + 8);
        *(_DWORD *)v5 = *(_DWORD *)v15;
        *(_QWORD *)(v5 + 8) = *(_QWORD *)(v15 + 8);
        *(_DWORD *)v15 = v16;
        *(_QWORD *)(v15 + 8) = v17;
        ++v3;
      }
      else
      {
        v5 += 16;
        v13 = v3;
        v14 = -(uint64_t)v3;
      }
    }
    while (v5 != v6 + 16 * v14);
    if (v3)
      sub_1C598218C(v4, *((unsigned int *)this + 108) - v13);
  }
}

uint64_t llvm::mca::InOrderIssueStage::updateCarriedOver(uint64_t this)
{
  uint64_t v1;
  unsigned int v2;
  unsigned int v3;
  unsigned int v4;
  unsigned int v5;

  v1 = *(_QWORD *)(this + 544);
  if (v1)
  {
    v2 = *(_DWORD *)(this + 552);
    v3 = *(_DWORD *)(this + 556);
    if (v2 <= v3)
    {
      v4 = v3 - v2;
      if ((*(_BYTE *)(v1 + 540) & 0x40) != 0)
        v5 = 0;
      else
        v5 = v4;
      *(_DWORD *)(this + 556) = v5;
      *(_DWORD *)(this + 536) = 0;
      *(_QWORD *)(this + 544) = 0;
      *(_DWORD *)(this + 552) = 0;
    }
    else
    {
      *(_DWORD *)(this + 552) = v2 - v3;
      *(_DWORD *)(this + 556) = 0;
    }
  }
  return this;
}

void llvm::mca::InOrderIssueStage::cycleStart(llvm::mca::InOrderIssueStage *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _DWORD *v8;
  uint64_t v9;
  unsigned int v10;
  unsigned int v11;
  unsigned int v12;
  unsigned int v13;
  __int128 v14;
  void *v15[2];
  _QWORD v16[9];

  v16[8] = *MEMORY[0x1E0C80C00];
  *((_DWORD *)this + 126) = 0;
  v4 = *((_QWORD *)this + 6);
  *((_DWORD *)this + 139) = **(_DWORD **)(*((_QWORD *)this + 5) + 160);
  v5 = *(unsigned int *)(v4 + 24);
  if ((_DWORD)v5)
  {
    v6 = *(_QWORD *)(v4 + 16);
    v7 = 20 * v5;
    v8 = (_DWORD *)(v6 + 12);
    do
    {
      *v8 = 0;
      v8 += 5;
      v7 -= 20;
    }
    while (v7);
  }
  (*(void (**)(_QWORD))(**((_QWORD **)this + 52) + 56))(*((_QWORD *)this + 52));
  v15[0] = v16;
  v15[1] = (void *)0x400000000;
  llvm::mca::ResourceManager::cycleEvent((uint64_t)this + 56, (uint64_t)v15);
  llvm::mca::InOrderIssueStage::updateIssuedInst(this);
  v9 = *((_QWORD *)this + 68);
  if (v9)
  {
    v10 = *((_DWORD *)this + 138);
    v11 = *((_DWORD *)this + 139);
    if (v10 <= v11)
    {
      v12 = v11 - v10;
      if ((*(_BYTE *)(v9 + 540) & 0x40) != 0)
        v13 = 0;
      else
        v13 = v12;
      *((_DWORD *)this + 139) = v13;
      *((_DWORD *)this + 134) = 0;
      *((_QWORD *)this + 68) = 0;
      *((_DWORD *)this + 138) = 0;
    }
    else
    {
      *((_DWORD *)this + 138) = v10 - v11;
      *((_DWORD *)this + 139) = 0;
    }
  }
  if (!*((_QWORD *)this + 65))
    goto LABEL_14;
  if (*((_DWORD *)this + 132))
  {
LABEL_13:
    llvm::mca::InOrderIssueStage::notifyStallEvent((uint64_t)this);
    *((_DWORD *)this + 139) = 0;
LABEL_14:
    *a2 = 0;
    goto LABEL_15;
  }
  v14 = *((_OWORD *)this + 32);
  *((_QWORD *)this + 65) = 0;
  *((_QWORD *)this + 66) = 0;
  llvm::mca::InOrderIssueStage::tryIssue((uint64_t)this, (uint64_t)&v14, a2);
  if (!*a2)
  {
    if (!*((_DWORD *)this + 132))
      goto LABEL_14;
    goto LABEL_13;
  }
LABEL_15:
  if (v15[0] != v16)
    free(v15[0]);
}

uint64_t llvm::mca::InOrderIssueStage::cycleEnd@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  int v2;
  int v3;

  ++*(_DWORD *)(*(_QWORD *)(this + 48) + 152);
  if (*(_QWORD *)(this + 520))
  {
    v2 = *(_DWORD *)(this + 528);
    if (v2)
      *(_DWORD *)(this + 528) = v2 - 1;
  }
  v3 = *(_DWORD *)(this + 560);
  if (v3)
    *(_DWORD *)(this + 560) = v3 - 1;
  *a2 = 0;
  return this;
}

uint64_t sub_1C59820CC(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 424);
  if (v2 != (void *)(a1 + 440))
    free(v2);
  sub_1C59784E4(a1 + 56);
  *(_QWORD *)a1 = off_1E8184B50;
  sub_1C4FE319C(a1 + 16, *(_QWORD **)(a1 + 24));
  return a1;
}

void sub_1C5982124(uint64_t a1)
{
  void *v2;

  v2 = *(void **)(a1 + 424);
  if (v2 != (void *)(a1 + 440))
    free(v2);
  sub_1C59784E4(a1 + 56);
  *(_QWORD *)a1 = off_1E8184B50;
  sub_1C4FE319C(a1 + 16, *(_QWORD **)(a1 + 24));
  JUMPOUT(0x1CAA32FC0);
}

unsigned int *sub_1C598218C(unsigned int *result, unint64_t a2)
{
  unint64_t v2;
  unsigned int *v4;
  uint64_t v5;
  uint64_t v6;

  v2 = result[2];
  if (v2 != a2)
  {
    v4 = result;
    if (v2 <= a2)
    {
      if (result[3] < a2)
      {
        result = (unsigned int *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)result, (uint64_t)(result + 4), a2, 16);
        v2 = v4[2];
      }
      if (v2 != a2)
      {
        v5 = *(_QWORD *)v4 + 16 * a2;
        v6 = *(_QWORD *)v4 + 16 * v2;
        do
        {
          *(_DWORD *)v6 = 0;
          *(_QWORD *)(v6 + 8) = 0;
          v6 += 16;
        }
        while (v6 != v5);
      }
    }
    v4[2] = a2;
  }
  return result;
}

uint64_t llvm::mca::InstructionTables::execute@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t i;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  _DWORD *v26;
  int v27;
  int v28;
  uint64_t v29;
  int v30;
  uint64_t v31;
  uint64_t v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  BOOL v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t *v39;
  uint64_t *v40;
  _QWORD *v41;
  __int128 v42;
  uint64_t v43;
  uint64_t v44;

  v3 = result;
  v5 = **(_QWORD **)(a2 + 8);
  *(_DWORD *)(result + 56) = 0;
  v6 = *(_DWORD *)(v5 + 144);
  if (v6)
  {
    v37 = a2;
    v38 = a3;
    v7 = result + 48;
    v8 = *(uint64_t **)(v5 + 136);
    v39 = &v8[3 * v6];
    do
    {
      v10 = *((_DWORD *)v8 + 2);
      v9 = *((_DWORD *)v8 + 3);
      v40 = v8;
      v11 = (v9 - v10);
      if (v9 != v10)
      {
        v12 = *(_QWORD *)(v3 + 160);
        v13 = *(unsigned int *)(v3 + 168);
        if ((_DWORD)v13)
        {
          v14 = *v8;
          v15 = 8 * v13;
          v16 = *(_QWORD **)(v3 + 160);
          v17 = (_QWORD *)(v12 + 8 * v13);
          while (*v16 != v14)
          {
            ++v16;
            v15 -= 8;
            if (!v15)
            {
              v16 = v17;
              break;
            }
          }
        }
        else
        {
          v16 = *(_QWORD **)(v3 + 160);
        }
        v18 = (((unint64_t)v16 - v12) >> 3);
        v19 = *(_QWORD *)(*(_QWORD *)(v3 + 40) + 32) + 32 * v18;
        v41 = (_QWORD *)(v19 + 24);
        v20 = *(unsigned int *)(v19 + 8);
        if (*(_QWORD *)(v19 + 24))
        {
          if ((_DWORD)v20)
          {
            for (i = 0; i != v20; ++i)
            {
              v22 = *(unsigned int *)(*v41 + 4 * i);
              v23 = v3;
              v24 = *(_QWORD *)(*(_QWORD *)(v3 + 40) + 32) + 32 * v22;
              v27 = *(_DWORD *)(v24 + 8);
              v26 = (_DWORD *)(v24 + 8);
              v25 = v27;
              if (v27)
              {
                v28 = 0;
                do
                {
                  v29 = (*v26 * v20);
                  *(_QWORD *)&v42 = v22;
                  *((_QWORD *)&v42 + 1) = (1 << v28);
                  v43 = v11 | (v29 << 32);
                  result = sub_1C5977CEC(v7, &v42);
                  ++v28;
                }
                while (v25 != v28);
              }
              v3 = v23;
            }
          }
        }
        else if ((_DWORD)v20)
        {
          v30 = 0;
          do
          {
            *(_QWORD *)&v42 = v18;
            *((_QWORD *)&v42 + 1) = (1 << v30);
            v43 = v11 | (v20 << 32);
            result = sub_1C5977CEC(v7, &v42);
            ++v30;
          }
          while ((_DWORD)v20 != v30);
        }
      }
      v8 = v40 + 3;
    }
    while (v40 + 3 != v39);
    v31 = *(unsigned int *)(v3 + 56);
    a2 = v37;
    a3 = v38;
  }
  else
  {
    v31 = 0;
  }
  v32 = *(_QWORD *)(v3 + 48);
  LODWORD(v42) = 4;
  *((_QWORD *)&v42 + 1) = a2;
  v43 = v32;
  v44 = v31;
  v33 = *(_QWORD **)(v3 + 16);
  if (v33 != (_QWORD *)(v3 + 24))
  {
    do
    {
      result = (*(uint64_t (**)(_QWORD, __int128 *))(*(_QWORD *)v33[4] + 24))(v33[4], &v42);
      v34 = (_QWORD *)v33[1];
      if (v34)
      {
        do
        {
          v35 = v34;
          v34 = (_QWORD *)*v34;
        }
        while (v34);
      }
      else
      {
        do
        {
          v35 = (_QWORD *)v33[2];
          v36 = *v35 == (_QWORD)v33;
          v33 = v35;
        }
        while (!v36);
      }
      v33 = v35;
    }
    while (v35 != (_QWORD *)(v3 + 24));
  }
  *a3 = 0;
  return result;
}

uint64_t sub_1C5982434(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 160);
  if (v2 != (void *)(a1 + 176))
    free(v2);
  v3 = *(void **)(a1 + 48);
  if (v3 != (void *)(a1 + 64))
    free(v3);
  *(_QWORD *)a1 = off_1E8184B50;
  sub_1C4FE319C(a1 + 16, *(_QWORD **)(a1 + 24));
  return a1;
}

void sub_1C5982498(uint64_t a1)
{
  void *v2;
  void *v3;

  v2 = *(void **)(a1 + 160);
  if (v2 != (void *)(a1 + 176))
    free(v2);
  v3 = *(void **)(a1 + 48);
  if (v3 != (void *)(a1 + 64))
    free(v3);
  *(_QWORD *)a1 = off_1E8184B50;
  sub_1C4FE319C(a1 + 16, *(_QWORD **)(a1 + 24));
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C598250C()
{
  return 1;
}

uint64_t sub_1C5982514()
{
  return 0;
}

void sub_1C598251C(_QWORD *a1@<X8>)
{
  *a1 = 0;
}

uint64_t llvm::mca::MicroOpQueueStage::moveInstructions@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unsigned int v6;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  __int128 v10;

  v10 = *(_OWORD *)(*(_QWORD *)(this + 40) + 16 * *(unsigned int *)(this + 188));
  if (*((_QWORD *)&v10 + 1))
  {
    v3 = this;
    do
    {
      this = *(_QWORD *)(v3 + 8);
      if (!this)
        break;
      this = (*(uint64_t (**)(uint64_t, __int128 *))(*(_QWORD *)this + 16))(this, &v10);
      if (!(_DWORD)this)
        break;
      this = (*(uint64_t (**)(_QWORD, __int128 *))(**(_QWORD **)(v3 + 8) + 48))(*(_QWORD *)(v3 + 8), &v10);
      if (*a2)
        return this;
      v4 = *(unsigned int *)(v3 + 188);
      v5 = *(_QWORD *)(v3 + 40);
      *(_QWORD *)(v5 + 16 * v4 + 8) = 0;
      v6 = *(_DWORD *)(v3 + 48);
      v7 = *(_DWORD *)(**((_QWORD **)&v10 + 1) + 284);
      if (v7 >= v6)
        v7 = *(_DWORD *)(v3 + 48);
      if (v7 <= 1)
        v7 = 1;
      v8 = (v7 + v4) % v6;
      *(_DWORD *)(v3 + 188) = v8;
      *(_DWORD *)(v3 + 200) += v7;
      v9 = v5 + 16 * v8;
      LODWORD(v10) = *(_DWORD *)v9;
      *((_QWORD *)&v10 + 1) = *(_QWORD *)(v9 + 8);
    }
    while (*((_QWORD *)&v10 + 1));
  }
  *a2 = 0;
  return this;
}

llvm::mca::MicroOpQueueStage *llvm::mca::MicroOpQueueStage::MicroOpQueueStage(llvm::mca::MicroOpQueueStage *this, unint64_t a2, int a3, char a4)
{
  unsigned int *v5;

  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = (char *)this + 24;
  *(_QWORD *)this = &off_1E8184AC0;
  *((_QWORD *)this + 5) = (char *)this + 56;
  v5 = (unsigned int *)((char *)this + 40);
  *((_QWORD *)this + 6) = 0x800000000;
  *((_QWORD *)this + 23) = 0;
  *((_DWORD *)this + 48) = a3;
  *((_DWORD *)this + 49) = 0;
  if (a2 <= 1)
    a2 = 1;
  else
    a2 = a2;
  *((_BYTE *)this + 204) = a4;
  sub_1C598218C(v5, a2);
  *((_DWORD *)this + 50) = *((_DWORD *)this + 12);
  return this;
}

{
  unsigned int *v5;

  *((_QWORD *)this + 4) = 0;
  *((_QWORD *)this + 3) = 0;
  *((_QWORD *)this + 1) = 0;
  *((_QWORD *)this + 2) = (char *)this + 24;
  *(_QWORD *)this = &off_1E8184AC0;
  *((_QWORD *)this + 5) = (char *)this + 56;
  v5 = (unsigned int *)((char *)this + 40);
  *((_QWORD *)this + 6) = 0x800000000;
  *((_QWORD *)this + 23) = 0;
  *((_DWORD *)this + 48) = a3;
  *((_DWORD *)this + 49) = 0;
  if (a2 <= 1)
    a2 = 1;
  else
    a2 = a2;
  *((_BYTE *)this + 204) = a4;
  sub_1C598218C(v5, a2);
  *((_DWORD *)this + 50) = *((_DWORD *)this + 12);
  return this;
}

uint64_t llvm::mca::MicroOpQueueStage::execute@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  unsigned int v6;
  unsigned int v7;

  v3 = *(unsigned int *)(result + 184);
  v4 = *(_QWORD *)(result + 40) + 16 * v3;
  *(_DWORD *)v4 = *(_DWORD *)a2;
  *(_QWORD *)(v4 + 8) = *(_QWORD *)(a2 + 8);
  v5 = *(_DWORD *)(result + 48);
  v6 = *(_DWORD *)(**(_QWORD **)(a2 + 8) + 284);
  if (v6 >= v5)
    v6 = *(_DWORD *)(result + 48);
  if (v6 <= 1)
    v6 = 1;
  *(_DWORD *)(result + 184) = (v6 + v3) % v5;
  v7 = *(_DWORD *)(result + 200) - v6;
  ++*(_DWORD *)(result + 196);
  *(_DWORD *)(result + 200) = v7;
  *a3 = 0;
  return result;
}

uint64_t llvm::mca::MicroOpQueueStage::cycleStart@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  *(_DWORD *)(this + 196) = 0;
  if (!*(_BYTE *)(this + 204))
    return llvm::mca::MicroOpQueueStage::moveInstructions(this, a2);
  *a2 = 0;
  return this;
}

uint64_t llvm::mca::MicroOpQueueStage::cycleEnd@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  if (*(_BYTE *)(this + 204))
    return llvm::mca::MicroOpQueueStage::moveInstructions(this, a2);
  *a2 = 0;
  return this;
}

uint64_t sub_1C5982778(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_1E8184AC0;
  v2 = *(void **)(a1 + 40);
  if (v2 != (void *)(a1 + 56))
    free(v2);
  *(_QWORD *)a1 = off_1E8184B50;
  sub_1C4FE319C(a1 + 16, *(_QWORD **)(a1 + 24));
  return a1;
}

void sub_1C59827D4(uint64_t a1)
{
  void *v2;

  *(_QWORD *)a1 = &off_1E8184AC0;
  v2 = *(void **)(a1 + 40);
  if (v2 != (void *)(a1 + 56))
    free(v2);
  *(_QWORD *)a1 = off_1E8184B50;
  sub_1C4FE319C(a1 + 16, *(_QWORD **)(a1 + 24));
  JUMPOUT(0x1CAA32FC0);
}

BOOL sub_1C5982840(_DWORD *a1, uint64_t a2)
{
  int v2;
  unsigned int v4;

  v2 = a1[48];
  if (v2 && a1[49] == v2)
    return 0;
  v4 = a1[12];
  if (*(_DWORD *)(**(_QWORD **)(a2 + 8) + 284) < v4)
    v4 = *(_DWORD *)(**(_QWORD **)(a2 + 8) + 284);
  if (v4 <= 1)
    v4 = 1;
  return v4 <= a1[50];
}

BOOL sub_1C598288C(uint64_t a1)
{
  return *(_DWORD *)(a1 + 48) != *(_DWORD *)(a1 + 200);
}

void llvm::mca::RetireStage::cycleStart(llvm::mca::RetireStage *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _DWORD *v7;
  uint64_t v8;
  int v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  int v19;

  v4 = *((_QWORD *)this + 6);
  v5 = *(unsigned int *)(v4 + 24);
  if ((_DWORD)v5)
  {
    v6 = 20 * v5;
    v7 = (_DWORD *)(*(_QWORD *)(v4 + 16) + 12);
    do
    {
      *v7 = 0;
      v7 += 5;
      v6 -= 20;
    }
    while (v6);
  }
  v8 = *((_QWORD *)this + 5);
  if (*(_DWORD *)(v8 + 20) != *(_DWORD *)(v8 + 16))
  {
    v9 = *(_DWORD *)(v8 + 24);
    v10 = v9;
    do
    {
      if (v9 && !v10)
        break;
      v11 = *(_DWORD *)(v8 + 12);
      v12 = *(_QWORD *)(v8 + 32);
      if (!*(_BYTE *)(v12 + 24 * v11 + 20))
        break;
      llvm::mca::RetireStage::notifyInstructionRetired((uint64_t)this, v12 + 24 * v11);
      v13 = *((_QWORD *)this + 5);
      v14 = *(_DWORD *)(v13 + 12);
      v15 = *(_QWORD *)(v13 + 32);
      v16 = *(_QWORD *)(v13 + 40);
      v17 = v15 + 24 * v14;
      *(_DWORD *)(*(_QWORD *)(v17 + 8) + 544) = 6;
      v18 = *(_DWORD *)(v17 + 16);
      v19 = v18 <= 1 ? 1 : *(_DWORD *)(v17 + 16);
      *(_DWORD *)(v13 + 12) = (v19 + v14) % (0xAAAAAAAAAAAAAAABLL * ((v16 - v15) >> 3));
      *(_DWORD *)(v13 + 20) += v18;
      *(_DWORD *)v17 = 0;
      *(_QWORD *)(v17 + 8) = 0;
      *(_DWORD *)(v17 + 16) = 0;
      *(_BYTE *)(v17 + 20) = 0;
      v8 = *((_QWORD *)this + 5);
      --v10;
    }
    while (*(_DWORD *)(v8 + 20) != *(_DWORD *)(v8 + 16));
  }
  *a2 = 0;
}

void llvm::mca::RetireStage::notifyInstructionRetired(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  BOOL v14;
  int v15;
  uint64_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  _QWORD v21[3];

  v21[2] = *MEMORY[0x1E0C80C00];
  v4 = *(unsigned int *)(*(_QWORD *)(a1 + 48) + 24);
  v19 = v21;
  v20 = 0x400000000;
  sub_1C4893E04((char *)&v19, v4, 0);
  v5 = *(_QWORD *)(a2 + 8);
  if ((*(_BYTE *)(v5 + 540) & 0xC) != 0)
    (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 56) + 40))(*(_QWORD *)(a1 + 56), a2);
  v6 = *(unsigned int *)(v5 + 24);
  if ((_DWORD)v6)
  {
    v7 = *(uint64_t **)(v5 + 16);
    v8 = 136 * v6;
    do
    {
      llvm::mca::RegisterFile::removeRegisterWrite(*(_QWORD *)(a1 + 48), v7, v19);
      v7 += 17;
      v8 -= 136;
    }
    while (v8);
  }
  v9 = v19;
  v15 = 1;
  v16 = a2;
  v17 = v19;
  v18 = v20;
  v10 = *(_QWORD **)(a1 + 16);
  v11 = (_QWORD *)(a1 + 24);
  if (v10 != v11)
  {
    do
    {
      (*(void (**)(_QWORD, int *))(*(_QWORD *)v10[4] + 24))(v10[4], &v15);
      v12 = (_QWORD *)v10[1];
      if (v12)
      {
        do
        {
          v13 = v12;
          v12 = (_QWORD *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          v13 = (_QWORD *)v10[2];
          v14 = *v13 == (_QWORD)v10;
          v10 = v13;
        }
        while (!v14);
      }
      v10 = v13;
    }
    while (v13 != v11);
    v9 = v19;
  }
  if (v9 != v21)
    free(v9);
}

uint64_t llvm::mca::RetireStage::cycleEnd@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  ++*(_DWORD *)(*(_QWORD *)(this + 48) + 152);
  *a2 = 0;
  return this;
}

uint64_t llvm::mca::RetireStage::execute@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  uint64_t result;

  v5 = *(_QWORD *)(a2 + 8);
  result = llvm::mca::RegisterFile::onInstructionExecuted(*(_QWORD *)(a1 + 48), v5);
  *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(a1 + 40) + 32) + 24 * *(unsigned int *)(v5 + 552) + 20) = 1;
  *a3 = 0;
  return result;
}

uint64_t sub_1C5982BA0(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E8184B50;
  sub_1C4FE319C(a1 + 16, *(_QWORD **)(a1 + 24));
  return a1;
}

void sub_1C5982BD8(uint64_t a1)
{
  *(_QWORD *)a1 = off_1E8184B50;
  sub_1C4FE319C(a1 + 16, *(_QWORD **)(a1 + 24));
  JUMPOUT(0x1CAA32FC0);
}

BOOL sub_1C5982C20(uint64_t a1)
{
  return *(_DWORD *)(*(_QWORD *)(a1 + 40) + 20) != *(_DWORD *)(*(_QWORD *)(a1 + 40) + 16);
}

void llvm::mca::Stage::~Stage(llvm::mca::Stage *this)
{
  *(_QWORD *)this = off_1E8184B50;
  sub_1C4FE319C((uint64_t)this + 16, *((_QWORD **)this + 3));
}

uint64_t **llvm::mca::Stage::addListener(uint64_t **this, llvm::mca::HWEventListener *a2)
{
  uint64_t *v3;

  v3 = (uint64_t *)a2;
  return sub_1C47BC21C(this + 2, (unint64_t *)&v3, &v3);
}

_DWORD *llvm::mca::ResourceCycles::operator+=(_DWORD *result, _DWORD *a2)
{
  unsigned int v2;
  unsigned int v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t v6;
  unsigned int v7;

  v2 = result[1];
  v3 = a2[1];
  if (v2 == v3)
  {
    *result += *a2;
  }
  else
  {
    LODWORD(v4) = result[1];
    if (v3)
    {
      v5 = result[1];
      v6 = a2[1];
      do
      {
        v4 = v6;
        v6 = v5 % v6;
        v5 = v4;
      }
      while (v6);
    }
    v7 = v3 * v2 / v4;
    *result = v7 / v2 * *result + v7 / v3 * *a2;
    result[1] = v7;
  }
  return result;
}

uint64_t llvm::mca::computeProcResourceMasks(uint64_t result, _QWORD *a2)
{
  uint64_t v2;
  char v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t i;
  uint64_t v9;
  int *v10;
  uint64_t v11;
  uint64_t v12;
  int v13;

  *a2 = 0;
  v2 = *(unsigned int *)(result + 48);
  if (v2 >= 2)
  {
    v3 = 0;
    v4 = *(_QWORD *)(result + 32);
    v5 = v2 - 1;
    v6 = a2 + 1;
    v7 = (_QWORD *)(v4 + 56);
    do
    {
      if (!*v7)
        *v6 = 1 << v3++;
      ++v6;
      v7 += 4;
      --v5;
    }
    while (v5);
    for (i = 1; i != v2; ++i)
    {
      v9 = v4 + 32 * i;
      v10 = *(int **)(v9 + 24);
      if (v10)
      {
        v11 = 1 << v3;
        a2[i] = 1 << v3;
        v12 = *(unsigned int *)(v9 + 8);
        if ((_DWORD)v12)
        {
          do
          {
            v13 = *v10++;
            v11 |= a2[v13];
            a2[i] = v11;
            --v12;
          }
          while (v12);
        }
        ++v3;
      }
    }
  }
  return result;
}

uint64_t llvm::mca::computeBlockRThroughput(uint64_t result, unsigned int a2, unsigned int a3, unsigned int *a4, double a5, double a6, double a7)
{
  double v7;
  uint64_t v8;
  _DWORD *v9;
  unsigned int v10;
  unsigned int v11;

  v7 = (double)a3 / (double)a2;
  v8 = *(unsigned int *)(result + 48);
  if ((_DWORD)v8)
  {
    v9 = (_DWORD *)(*(_QWORD *)(result + 32) + 8);
    do
    {
      v11 = *a4++;
      v10 = v11;
      if (v11)
      {
        LODWORD(a7) = *v9;
        a7 = (double)*(unint64_t *)&a7;
        if (v7 < (double)v10 / a7)
          v7 = (double)v10 / a7;
      }
      v9 += 8;
      --v8;
    }
    while (v8);
  }
  return result;
}

uint64_t sub_1C5982E00()
{
  return 0;
}

uint64_t LLVMCreateDisasmCPUFeatures(const char *a1, const char *a2, const char *a3, uint64_t a4, int a5, uint64_t a6, uint64_t a7)
{
  size_t v12;
  size_t v13;
  __int128 *p_dst;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t *v18;
  size_t v19;
  uint64_t (*v20)(void **);
  uint64_t v21;
  size_t v22;
  uint64_t v23;
  uint64_t v24;
  unsigned int *v25;
  uint64_t (*v26)(void);
  uint64_t v27;
  size_t v28;
  size_t v29;
  size_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  char v34;
  uint64_t (*v35)(uint64_t *, uint64_t, uint64_t);
  size_t v36;
  uint64_t (*v37)(uint64_t, uint64_t);
  uint64_t v38;
  uint64_t v39;
  size_t v40;
  _QWORD *(*v41)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *);
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char v46;
  uint64_t v47;
  void (*v48)(uint64_t);
  uint64_t (*v49)(__int128 *, uint64_t, unsigned int *, uint64_t, uint64_t);
  uint64_t v50;
  llvm::MCContext *v51;
  uint64_t v52;
  size_t v53;
  size_t v54;
  __int128 *v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  size_t v60;
  __int128 *v61;
  const char *v62;
  size_t v63;
  unint64_t v64;
  uint64_t v65;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  llvm::MCContext *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  __int128 v76;
  unint64_t v77;
  uint64_t v78;
  __int128 __dst;
  __int128 v80;
  void *v81[2];
  __int128 v82;
  void *v83[2];
  void *__p[2];
  __int128 v85;
  __int128 v86;
  _OWORD v87[2];
  void *v88[2];
  uint64_t v89;
  const char *v90;
  size_t v91;
  __int16 v92;
  __int128 v93;
  char v94;

  v88[0] = 0;
  v88[1] = 0;
  v89 = 0;
  v12 = strlen(a1);
  if (v12 > 0x7FFFFFFFFFFFFFF7)
LABEL_102:
    abort();
  v13 = v12;
  if (v12 >= 0x17)
  {
    v15 = (v12 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v12 | 7) != 0x17)
      v15 = v12 | 7;
    v16 = v15 + 1;
    p_dst = (__int128 *)operator new(v15 + 1);
    *((_QWORD *)&__dst + 1) = v13;
    *(_QWORD *)&v80 = v16 | 0x8000000000000000;
    *(_QWORD *)&__dst = p_dst;
    goto LABEL_8;
  }
  BYTE7(v80) = v12;
  p_dst = &__dst;
  if (v12)
LABEL_8:
    memcpy(p_dst, a1, v13);
  *((_BYTE *)p_dst + v13) = 0;
  v17 = llvm::TargetRegistry::lookupTarget((std::string::size_type)&__dst, (uint64_t)v88);
  v18 = v17;
  if (SBYTE7(v80) < 0)
  {
    operator delete((void *)__dst);
    if (!v18)
    {
LABEL_19:
      v23 = 0;
      goto LABEL_99;
    }
  }
  else if (!v17)
  {
    goto LABEL_19;
  }
  if (a1)
    v19 = strlen(a1);
  else
    v19 = 0;
  v20 = sub_1C511F97C((uint64_t)v18, (uint64_t)a1, v19);
  if (!v20)
    goto LABEL_19;
  v21 = (uint64_t)v20;
  LOWORD(__dst) = 4096;
  *(_QWORD *)((char *)&__dst + 4) = 2;
  v80 = 0u;
  *(_OWORD *)v81 = 0u;
  v82 = 0u;
  *(_OWORD *)v83 = 0u;
  *(_OWORD *)__p = 0u;
  v85 = 0u;
  v86 = 0u;
  memset(v87, 0, sizeof(v87));
  v73 = a7;
  if (a1)
    v22 = strlen(a1);
  else
    v22 = 0;
  v24 = sub_1C511F9DC((uint64_t)v18, v21, (uint64_t)a1, v22, (uint64_t)&__dst);
  if (!v24)
  {
    v23 = 0;
    goto LABEL_89;
  }
  v25 = (unsigned int *)v24;
  v26 = (uint64_t (*)(void))v18[8];
  if (!v26 || (v27 = v26()) == 0)
  {
    v23 = 0;
LABEL_88:
    (*(void (**)(unsigned int *))(*(_QWORD *)v25 + 8))(v25);
    goto LABEL_89;
  }
  v72 = v27;
  if (a1)
  {
    v28 = strlen(a1);
    if (a2)
      goto LABEL_26;
LABEL_31:
    v29 = 0;
    if (a3)
      goto LABEL_27;
    goto LABEL_32;
  }
  v28 = 0;
  if (!a2)
    goto LABEL_31;
LABEL_26:
  v29 = strlen(a2);
  if (a3)
  {
LABEL_27:
    v30 = strlen(a3);
    goto LABEL_33;
  }
LABEL_32:
  v30 = 0;
LABEL_33:
  v31 = sub_1C4D72F0C((uint64_t)v18, (uint64_t)a1, v28, (uint64_t)a2, v29, (uint64_t)a3, v30);
  if (!v31)
  {
    v23 = 0;
    v52 = v72;
LABEL_86:
    MEMORY[0x1CAA32FC0](v52, 0x10F0C40CB53E019);
    goto LABEL_87;
  }
  v32 = v31;
  v33 = operator new();
  v34 = 1;
  HIBYTE(v92) = 1;
  if (*a1)
  {
    v90 = a1;
    v34 = 3;
  }
  LOBYTE(v92) = v34;
  llvm::Triple::Triple((uint64_t)&v93, (llvm::Twine *)&v90);
  llvm::MCContext::MCContext(v33, &v93, (uint64_t)v25, v21, v32, 0, 0, 1, 0, 0);
  if (v94 < 0)
    operator delete((void *)v93);
  v35 = (uint64_t (*)(uint64_t *, uint64_t, uint64_t))v18[16];
  if (!v35 || (v71 = v35(v18, v32, v33)) == 0)
  {
    v51 = (llvm::MCContext *)v33;
    v23 = 0;
LABEL_82:
    llvm::MCContext::~MCContext(v51);
    MEMORY[0x1CAA32FC0]();
    goto LABEL_83;
  }
  v69 = v32;
  v36 = strlen(a1);
  if (v18[28])
    v37 = (uint64_t (*)(uint64_t, uint64_t))v18[28];
  else
    v37 = (uint64_t (*)(uint64_t, uint64_t))llvm::createMCRelocationInfo;
  v92 = 261;
  v90 = a1;
  v91 = v36;
  v38 = llvm::Triple::Triple((uint64_t)&v93, (llvm::Twine *)&v90);
  v39 = v37(v38, v33);
  if (v94 < 0)
    operator delete((void *)v93);
  v78 = v39;
  v70 = (llvm::MCContext *)v33;
  if (!v39)
  {
    v23 = 0;
    v32 = v69;
LABEL_71:
    v57 = v71;
    goto LABEL_77;
  }
  v40 = strlen(a1);
  if (v18[29])
    v41 = (_QWORD *(*)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t *))v18[29];
  else
    v41 = llvm::createMCSymbolizer;
  v92 = 261;
  v90 = a1;
  v91 = v40;
  v42 = llvm::Triple::Triple((uint64_t)&v93, (llvm::Twine *)&v90);
  v43 = (uint64_t)v41(v42, a6, v73, a4, v33, &v78);
  if (v94 < 0)
    operator delete((void *)v93);
  v44 = *(_QWORD *)(v71 + 24);
  *(_QWORD *)(v71 + 24) = v43;
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  v45 = v25[44];
  v46 = 1;
  HIBYTE(v92) = 1;
  v32 = v69;
  if (*a1)
  {
    v90 = a1;
    v46 = 3;
  }
  LOBYTE(v92) = v46;
  v47 = llvm::Triple::Triple((uint64_t)&v93, (llvm::Twine *)&v90);
  v48 = (void (*)(uint64_t))v18[36];
  if (v48)
    v48(v47);
  v49 = (uint64_t (*)(__int128 *, uint64_t, unsigned int *, uint64_t, uint64_t))v18[17];
  if (v49)
    v50 = v49(&v93, v45, v25, v72, v21);
  else
    v50 = 0;
  v68 = v50;
  if (v94 < 0)
  {
    operator delete((void *)v93);
    v50 = v68;
  }
  if (!v50)
  {
    v23 = 0;
    goto LABEL_71;
  }
  v23 = operator new();
  v53 = strlen(a1);
  if (v53 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_102;
  v54 = v53;
  if (v53 >= 0x17)
  {
    v58 = (v53 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v53 | 7) != 0x17)
      v58 = v53 | 7;
    v59 = v58 + 1;
    v60 = v53;
    v61 = (__int128 *)operator new(v58 + 1);
    v54 = v60;
    v55 = v61;
    *((_QWORD *)&v76 + 1) = v54;
    v77 = v59 | 0x8000000000000000;
    *(_QWORD *)&v76 = v61;
    v56 = v71;
  }
  else
  {
    HIBYTE(v77) = v53;
    v55 = &v76;
    v56 = v71;
    if (!v53)
      goto LABEL_76;
  }
  v62 = a1;
  v63 = v54;
  memcpy(v55, v62, v54);
  v54 = v63;
LABEL_76:
  *((_BYTE *)v55 + v54) = 0;
  *(_OWORD *)v23 = v76;
  v64 = v77;
  v77 = 0;
  v76 = 0uLL;
  *(_QWORD *)(v23 + 16) = v64;
  *(_QWORD *)(v23 + 24) = a4;
  *(_DWORD *)(v23 + 32) = a5;
  *(_QWORD *)(v23 + 40) = a6;
  *(_QWORD *)(v23 + 48) = v73;
  *(_QWORD *)(v23 + 56) = v18;
  *(_QWORD *)(v23 + 64) = v25;
  *(_QWORD *)(v23 + 72) = v21;
  *(_QWORD *)(v23 + 80) = v69;
  *(_QWORD *)(v23 + 88) = v72;
  *(_QWORD *)(v23 + 96) = v70;
  *(_QWORD *)(v23 + 104) = v56;
  *(_QWORD *)(v23 + 112) = v68;
  *(_QWORD *)(v23 + 152) = v23 + 176;
  *(_OWORD *)(v23 + 120) = 0u;
  *(_OWORD *)(v23 + 136) = 0u;
  *(_OWORD *)(v23 + 160) = xmmword_1C85F20B0;
  *(_DWORD *)(v23 + 312) = 0;
  *(_BYTE *)(v23 + 344) = 0;
  *(_QWORD *)(v23 + 352) = 0;
  *(_QWORD *)(v23 + 304) = &off_1E81A7280;
  *(_QWORD *)(v23 + 368) = v23 + 152;
  *(_DWORD *)(v23 + 360) = 0;
  *(_QWORD *)(v23 + 328) = 0;
  *(_QWORD *)(v23 + 336) = 0;
  *(_QWORD *)(v23 + 320) = 0;
  MEMORY[0x1CAA32ABC](v23 + 128, a2);
  v57 = 0;
  v70 = 0;
  v32 = 0;
  v72 = 0;
  v25 = 0;
  v21 = 0;
LABEL_77:
  v65 = v78;
  v78 = 0;
  if (v65)
    (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
  if (v57)
    (*(void (**)(uint64_t))(*(_QWORD *)v57 + 8))(v57);
  v51 = v70;
  if (v70)
    goto LABEL_82;
LABEL_83:
  if (v32)
    (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
  v52 = v72;
  if (v72)
    goto LABEL_86;
LABEL_87:
  if (v25)
    goto LABEL_88;
LABEL_89:
  *(_QWORD *)&v93 = (char *)v87 + 8;
  sub_1C4765410((void ***)&v93);
  if (SHIBYTE(v85) < 0)
    operator delete(__p[1]);
  if (SHIBYTE(__p[0]) < 0)
    operator delete(v83[0]);
  if (SHIBYTE(v82) < 0)
    operator delete(v81[1]);
  if (SHIBYTE(v81[0]) < 0)
    operator delete((void *)v80);
  if (v21)
  {
    v67 = sub_1C61E6B14(v21);
    MEMORY[0x1CAA32FC0](v67, 0x10F0C4031312594);
  }
LABEL_99:
  if (SHIBYTE(v89) < 0)
    operator delete(v88[0]);
  return v23;
}

uint64_t LLVMCreateDisasmCPU(const char *a1, const char *a2, uint64_t a3, int a4, uint64_t a5, uint64_t a6)
{
  return LLVMCreateDisasmCPUFeatures(a1, a2, "", a3, a4, a5, a6);
}

uint64_t LLVMCreateDisasm(const char *a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5)
{
  return LLVMCreateDisasmCPUFeatures(a1, "", "", a2, a3, a4, a5);
}

uint64_t LLVMDisasmDispose(uint64_t result)
{
  uint64_t v1;
  void *v2;
  uint64_t v3;
  uint64_t v4;
  llvm::MCContext *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;

  if (result)
  {
    v1 = result;
    *(_QWORD *)(result + 304) = off_1E81A6E70;
    if (*(_DWORD *)(result + 360) == 1)
    {
      v11 = *(_QWORD *)(result + 320);
      if (v11)
        MEMORY[0x1CAA32F9C](v11, 0x1000C8077774924);
    }
    v2 = *(void **)(v1 + 152);
    if (v2 != (void *)(v1 + 176))
      free(v2);
    if (*(char *)(v1 + 151) < 0)
      operator delete(*(void **)(v1 + 128));
    v3 = *(_QWORD *)(v1 + 112);
    *(_QWORD *)(v1 + 112) = 0;
    if (v3)
      (*(void (**)(uint64_t))(*(_QWORD *)v3 + 8))(v3);
    v4 = *(_QWORD *)(v1 + 104);
    *(_QWORD *)(v1 + 104) = 0;
    if (v4)
      (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v5 = *(llvm::MCContext **)(v1 + 96);
    *(_QWORD *)(v1 + 96) = 0;
    if (v5)
    {
      llvm::MCContext::~MCContext(v5);
      MEMORY[0x1CAA32FC0]();
    }
    v6 = *(_QWORD *)(v1 + 88);
    *(_QWORD *)(v1 + 88) = 0;
    if (v6)
      MEMORY[0x1CAA32FC0](v6, 0x10F0C40CB53E019);
    v7 = *(_QWORD *)(v1 + 80);
    *(_QWORD *)(v1 + 80) = 0;
    if (v7)
      (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
    v8 = *(_QWORD *)(v1 + 72);
    *(_QWORD *)(v1 + 72) = 0;
    if (v8)
    {
      v10 = sub_1C61E6B14(v8);
      MEMORY[0x1CAA32FC0](v10, 0x10F0C4031312594);
    }
    v9 = *(_QWORD *)(v1 + 64);
    *(_QWORD *)(v1 + 64) = 0;
    if (v9)
      (*(void (**)(uint64_t))(*(_QWORD *)v9 + 8))(v9);
    if (*(char *)(v1 + 23) < 0)
      operator delete(*(void **)v1);
    JUMPOUT(0x1CAA32FC0);
  }
  return result;
}

uint64_t LLVMDisasmInstruction(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5, uint64_t a6)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  void *v11;
  void *v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned __int16 v16;
  __int16 *v17;
  unsigned __int16 v18;
  int v19;
  int v20;
  llvm::raw_ostream *v21;
  uint64_t v22;
  _BYTE *v23;
  char v24;
  int v25;
  size_t v26;
  size_t v27;
  size_t v28;
  uint64_t v29;
  size_t v30;
  const void *v31;
  char *v32;
  char v33;
  _BYTE *v34;
  _BYTE *v35;
  unint64_t v36;
  char *v37;
  llvm::raw_ostream *v38;
  char **v39;
  size_t v40;
  void *v41;
  size_t v42;
  uint64_t v43;
  size_t v44;
  _DWORD *v46;
  __int128 *SchedModelForCPU;
  int v48;
  uint64_t v49;
  uint64_t v50;
  unsigned __int16 *v51;
  unsigned __int16 *v52;
  unsigned int v53;
  int v54;
  uint64_t (**v57)(llvm::raw_ostream *);
  int v58;
  char *v59;
  unint64_t v60;
  char *v61;
  char v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  __int128 v68;
  uint64_t v69;
  uint64_t (**v70)();
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  char v75;
  uint64_t v76;
  int v77;
  void **v78;
  uint64_t (**v79)();
  int v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char v84;
  uint64_t v85;
  int v86;
  void **v87;
  uint64_t v88;
  void *v89;
  __int128 v90;
  _BYTE v91[64];
  void *v92;
  __int128 v93;
  _BYTE v94[64];
  _QWORD v95[2];
  void *v96;
  uint64_t v97;
  _BYTE v98[136];
  uint64_t v99;

  v99 = *MEMORY[0x1E0C80C00];
  v88 = 0;
  v95[1] = 0;
  v95[0] = 0;
  v96 = v98;
  v97 = 0x800000000;
  v98[128] = 0;
  v8 = *(_QWORD *)(a1 + 104);
  v9 = *(_QWORD *)(a1 + 112);
  v92 = v94;
  v93 = xmmword_1C64638C0;
  v80 = 0;
  v84 = 0;
  v85 = 0;
  v79 = &off_1E81A7280;
  v87 = &v92;
  v86 = 0;
  v82 = 0;
  v83 = 0;
  v81 = 0;
  v10 = 0;
  if ((*(unsigned int (**)(uint64_t, _QWORD *, uint64_t *, uint64_t, uint64_t, uint64_t, uint64_t (***)()))(*(_QWORD *)v8 + 16))(v8, v95, &v88, a2, a3, a4, &v79) < 2)goto LABEL_56;
  v11 = *v87;
  v12 = v87[1];
  v89 = v91;
  v90 = xmmword_1C64638C0;
  v71 = 0;
  v75 = 0;
  v76 = 0;
  v70 = &off_1E81A7280;
  v78 = &v89;
  v77 = 0;
  v73 = 0;
  v74 = 0;
  v72 = 0;
  v58 = 0;
  v62 = 0;
  v63 = 0;
  v64 = 1;
  v60 = 0;
  v61 = 0;
  v59 = 0;
  v57 = &off_1E81A1100;
  v65 = 0;
  v66 = 0;
  v67 = &v69;
  v68 = xmmword_1C6612EF0;
  sub_1C4D685DC((uint64_t)&v57, (uint64_t)&v70);
  (*(void (**)(uint64_t, _QWORD *, uint64_t, void *, void *, _QWORD, uint64_t (***)(llvm::raw_ostream *)))(*(_QWORD *)v9 + 32))(v9, v95, a4, v11, v12, *(_QWORD *)(a1 + 80), &v57);
  if ((*(_BYTE *)(a1 + 120) & 0x10) != 0)
  {
    v13 = *(_QWORD **)(a1 + 80);
    v14 = *(_QWORD *)(v13[20] + 40);
    if (v14)
    {
      if ((~*(unsigned __int16 *)(v14
                                 + 24 * *(unsigned __int16 *)(**(_QWORD **)(a1 + 88) + 48 * LODWORD(v95[0]) + 6)
                                 + 8) & 0x1FFE) != 0)
      {
        v15 = *(unsigned __int16 *)(v14
                                  + 24 * *(unsigned __int16 *)(**(_QWORD **)(a1 + 88) + 48 * LODWORD(v95[0]) + 6)
                                  + 16);
        if (*(_WORD *)(v14 + 24 * *(unsigned __int16 *)(**(_QWORD **)(a1 + 88) + 48 * LODWORD(v95[0]) + 6) + 16))
        {
          v16 = 0;
          v17 = (__int16 *)(v13[18]
                          + 4
                          * *(unsigned __int16 *)(v14
                                                + 24
                                                * *(unsigned __int16 *)(**(_QWORD **)(a1 + 88)
                                                                      + 48 * LODWORD(v95[0])
                                                                      + 6)
                                                + 14));
          do
          {
            v19 = *v17;
            v17 += 2;
            v18 = v19;
            if ((__int16)v16 <= v19)
              v16 = v18;
            --v15;
          }
          while (v15);
          v20 = v16;
LABEL_11:
          if (v20 >= 2)
          {
            v21 = (llvm::raw_ostream *)(a1 + 304);
            v22 = *(_QWORD *)(a1 + 336);
            if ((unint64_t)(*(_QWORD *)(a1 + 328) - v22) > 8)
            {
              *(_BYTE *)(v22 + 8) = 32;
              *(_QWORD *)v22 = *(_QWORD *)"Latency: ";
              *(_QWORD *)(a1 + 336) += 9;
            }
            else
            {
              v21 = llvm::raw_ostream::write((llvm::raw_ostream *)(a1 + 304), "Latency: ", 9uLL);
            }
            sub_1C5E21910(v21, v20, 0, 0, 0);
            v23 = (_BYTE *)*((_QWORD *)v21 + 4);
            if ((unint64_t)v23 >= *((_QWORD *)v21 + 3))
            {
              llvm::raw_ostream::write(v21, 10);
            }
            else
            {
              *((_QWORD *)v21 + 4) = v23 + 1;
              *v23 = 10;
            }
          }
        }
      }
    }
    else
    {
      v24 = *(_BYTE *)(a1 + 151);
      v25 = v24;
      v26 = v24 & 0x7F;
      if (v25 >= 0)
        v27 = v26;
      else
        v27 = *(_QWORD *)(a1 + 136);
      if (v27)
      {
        v46 = v25 >= 0 ? (_DWORD *)(a1 + 128) : *(_DWORD **)(a1 + 128);
        SchedModelForCPU = llvm::MCSubtargetInfo::getSchedModelForCPU(*(_QWORD *)(a1 + 80), v46, v27);
        if ((_DWORD)v97)
        {
          v48 = 0;
          v20 = 0;
          v49 = *((_QWORD *)SchedModelForCPU + 7);
          v50 = v49 + 10 * *(unsigned __int16 *)(**(_QWORD **)(a1 + 88) + 48 * LODWORD(v95[0]) + 6);
          v51 = (unsigned __int16 *)(v50 + 6);
          v52 = (unsigned __int16 *)(v50 + 8);
          do
          {
            if (v49 && (v53 = v48 + *v51, v53 < *v52))
              v54 = *(_DWORD *)(v13[22] + 4 * v53);
            else
              v54 = -1;
            if (v20 <= v54)
              v20 = v54;
            ++v48;
          }
          while ((_DWORD)v97 != v48);
          goto LABEL_11;
        }
      }
    }
  }
  v28 = *(_QWORD *)(a1 + 160);
  if (v28)
  {
    v29 = *(_QWORD *)(a1 + 64);
    v31 = *(const void **)(v29 + 48);
    v30 = *(_QWORD *)(v29 + 56);
    v32 = *(char **)(a1 + 152);
    v33 = 1;
    do
    {
      if ((v33 & 1) == 0)
      {
        v34 = v61;
        if ((unint64_t)v61 >= v60)
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v57, 10);
        }
        else
        {
          ++v61;
          *v34 = 10;
        }
      }
      llvm::formatted_raw_ostream::PadToColumn((llvm::formatted_raw_ostream *)&v57, 40);
      v35 = memchr(v32, 10, v28);
      if (v35)
        v36 = v35 - v32;
      else
        v36 = -1;
      v37 = v61;
      if (v30 <= v60 - (unint64_t)v61)
      {
        if (v30)
        {
          memcpy(v61, v31, v30);
          v37 = &v61[v30];
          v61 += v30;
        }
        v38 = (llvm::raw_ostream *)&v57;
        v39 = &v61;
      }
      else
      {
        v38 = llvm::raw_ostream::write((llvm::raw_ostream *)&v57, (const char *)v31, v30);
        v39 = (char **)((char *)v38 + 32);
        v37 = (char *)*((_QWORD *)v38 + 4);
      }
      if ((unint64_t)v37 >= *((_QWORD *)v38 + 3))
      {
        llvm::raw_ostream::write(v38, 32);
      }
      else
      {
        *v39 = v37 + 1;
        *v37 = 32;
      }
      if (v28 >= v36)
        v40 = v36;
      else
        v40 = v28;
      v41 = (void *)*((_QWORD *)v38 + 4);
      if (v40 <= *((_QWORD *)v38 + 3) - (_QWORD)v41)
      {
        if (v40)
        {
          memcpy(v41, v32, v40);
          *((_QWORD *)v38 + 4) += v40;
        }
      }
      else
      {
        llvm::raw_ostream::write(v38, v32, v40);
      }
      v33 = 0;
      if (v28 >= v36 + 1)
        v42 = v36 + 1;
      else
        v42 = v28;
      v32 += v42;
      v28 -= v42;
    }
    while (v28);
  }
  v43 = v61 - v59;
  if (v61 != v59)
  {
    v61 = v59;
    llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)&v57, v59, v43);
  }
  *(_QWORD *)(a1 + 160) = 0;
  if ((unint64_t)v90 >= a6 - 1)
    v44 = a6 - 1;
  else
    v44 = v90;
  memcpy(a5, v89, v44);
  *((_BYTE *)a5 + v44) = 0;
  v10 = v88;
  sub_1C4D687F0((llvm::raw_ostream *)&v57);
  v70 = (uint64_t (**)())off_1E81A6E70;
  if (v77 == 1 && v72)
    MEMORY[0x1CAA32F9C](v72, 0x1000C8077774924);
  if (v89 != v91)
    free(v89);
LABEL_56:
  v79 = (uint64_t (**)())off_1E81A6E70;
  if (v86 == 1 && v81)
    MEMORY[0x1CAA32F9C](v81, 0x1000C8077774924);
  if (v92 != v94)
    free(v92);
  if (v96 != v98)
    free(v96);
  return v10;
}

BOOL LLVMSetDisasmOptions(_QWORD *a1, unint64_t a2)
{
  unint64_t v2;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  _BOOL8 v8;
  uint64_t v9;
  void (*v10)(uint64_t);
  uint64_t (*v11)(void **, _BOOL8, uint64_t, uint64_t, uint64_t);
  uint64_t v12;
  uint64_t v14;
  _QWORD *v15;
  __int16 v16;
  void *__p[2];
  char v18;

  v2 = a2;
  if ((a2 & 1) == 0)
  {
    if ((a2 & 2) == 0)
      goto LABEL_3;
LABEL_6:
    *(_BYTE *)(a1[14] + 50) = 1;
    a1[15] |= 2uLL;
    v2 &= ~2uLL;
    if ((v2 & 4) == 0)
      goto LABEL_14;
    goto LABEL_7;
  }
  *(_BYTE *)(a1[14] + 48) = 1;
  a1[15] |= 1uLL;
  v2 = a2 & 0xFFFFFFFFFFFFFFFELL;
  if ((a2 & 2) != 0)
    goto LABEL_6;
LABEL_3:
  if ((v2 & 4) == 0)
  {
LABEL_14:
    if ((v2 & 8) == 0)
      goto LABEL_16;
    goto LABEL_15;
  }
LABEL_7:
  v4 = a1[11];
  v6 = a1[8];
  v5 = a1[9];
  v7 = a1[7];
  v8 = *(_DWORD *)(v6 + 176) == 0;
  v16 = 260;
  v15 = a1;
  v9 = llvm::Triple::Triple((uint64_t)__p, (llvm::Twine *)&v15);
  v10 = *(void (**)(uint64_t))(v7 + 288);
  if (v10)
    v10(v9);
  v11 = *(uint64_t (**)(void **, _BOOL8, uint64_t, uint64_t, uint64_t))(v7 + 136);
  if (v11)
    v12 = v11(__p, v8, v6, v4, v5);
  else
    v12 = 0;
  if (v18 < 0)
  {
    operator delete(__p[0]);
    if (!v12)
      goto LABEL_14;
  }
  else if (!v12)
  {
    goto LABEL_14;
  }
  v14 = a1[14];
  a1[14] = v12;
  if (v14)
    (*(void (**)(uint64_t))(*(_QWORD *)v14 + 8))(v14);
  a1[15] |= 4uLL;
  v2 &= ~4uLL;
  if ((v2 & 8) != 0)
  {
LABEL_15:
    *(_QWORD *)(a1[14] + 8) = a1 + 38;
    a1[15] |= 8uLL;
    v2 &= ~8uLL;
  }
LABEL_16:
  if ((v2 & 0x10) != 0)
  {
    a1[15] |= 0x10uLL;
    v2 &= ~0x10uLL;
  }
  return v2 == 0;
}

void llvm::MCDisassembler::~MCDisassembler(llvm::MCDisassembler *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E8184C30;
  v2 = *((_QWORD *)this + 3);
  *((_QWORD *)this + 3) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

uint64_t llvm::MCDisassembler::onSymbolStart()
{
  return 0;
}

uint64_t llvm::MCDisassembler::tryAddingSymbolicOperand(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t result;

  result = *(_QWORD *)(a1 + 24);
  if (result)
    return (*(uint64_t (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)result + 16))(result, a2, *(_QWORD *)(a1 + 32), a3, a4, a5, a6, a7);
  return result;
}

uint64_t llvm::MCDisassembler::tryAddingPcLoadReferenceComment(llvm::MCDisassembler *this, uint64_t a2, uint64_t a3)
{
  uint64_t result;

  result = *((_QWORD *)this + 3);
  if (result)
    return (*(uint64_t (**)(uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)result + 24))(result, *((_QWORD *)this + 4), a2, a3);
  return result;
}

uint64_t llvm::MCDisassembler::setSymbolizer(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  uint64_t result;

  v3 = *a2;
  *a2 = 0;
  result = *(_QWORD *)(a1 + 24);
  *(_QWORD *)(a1 + 24) = v3;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

BOOL llvm::XCOFFSymbolInfo::operator<(char *a1, char *a2)
{
  int v2;
  int v4;
  BOOL v5;
  _BOOL8 result;
  BOOL v7;
  unint64_t v8;
  unsigned int v9;
  unint64_t v10;
  unsigned int v11;

  v2 = a2[12];
  if (a1[12] != v2)
    return v2 != 0;
  v4 = a1[1];
  if (a2[1])
    v5 = v4 == 0;
  else
    v5 = 0;
  result = v5;
  if (v4)
    v7 = a2[1] == 0;
  else
    v7 = 1;
  if (!v7)
  {
    v8 = *a1;
    if (v8 > 0x16)
      v9 = 0;
    else
      v9 = byte_1C8663BE0[v8];
    v10 = *a2;
    if (v10 > 0x16)
      v11 = 0;
    else
      v11 = byte_1C8663BE0[v10];
    return v9 < v11;
  }
  return result;
}

uint64_t llvm::MCExternalSymbolizer::tryAddingSymbolicOperand(uint64_t a1, uint64_t a2, llvm::raw_ostream *a3, unint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8)
{
  __int128 v15;
  uint64_t (*v16)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, char **);
  int v17;
  size_t v18;
  uint64_t v19;
  unint64_t Symbol;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  int v24;
  int v25;
  uint64_t result;
  char v27;
  uint64_t (*v28)(_QWORD, unint64_t, char **, uint64_t, char **);
  char *v29;
  char *v30;
  char *v31;
  size_t v32;
  void *v33;
  size_t v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  int v40;
  int v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t *v46;
  unint64_t v47;
  uint64_t v48;
  const char *v49;
  llvm::raw_ostream *v50;
  size_t v51;
  void *v52;
  size_t v53;
  void *v54;
  uint64_t v55;
  uint64_t v56;
  _QWORD *v57;
  uint64_t v58;
  char *v59;
  size_t v60;
  __int16 v61;
  char *v62;
  char *__s[2];
  __int128 v64;
  char *v65[2];
  __int128 v66;

  v15 = 0uLL;
  *(_OWORD *)v65 = 0u;
  *(_OWORD *)__s = 0u;
  v64 = 0u;
  v66 = a4;
  v16 = *(uint64_t (**)(_QWORD, uint64_t, uint64_t, uint64_t, uint64_t, char **))(a1 + 24);
  if (v16)
  {
    v17 = v16(*(_QWORD *)(a1 + 40), a5, a7, a8, 1, __s);
    v15 = 0uLL;
    if (v17)
      goto LABEL_3;
  }
  result = 0;
  *(_OWORD *)v65 = v15;
  v66 = v15;
  *(_OWORD *)__s = v15;
  v64 = v15;
  v27 = a6 ^ 1;
  if (a8 != 1)
    v27 = 0;
  if ((v27 & 1) == 0)
  {
    v28 = *(uint64_t (**)(_QWORD, unint64_t, char **, uint64_t, char **))(a1 + 32);
    if (v28)
    {
      v59 = (char *)a6;
      v62 = 0;
      v29 = (char *)v28(*(_QWORD *)(a1 + 40), a4, &v59, a5, &v62);
      v30 = v29;
      if (v29)
      {
        __s[0] = (char *)1;
        __s[1] = v29;
        v31 = v59;
        if (v59 != (char *)9)
          goto LABEL_40;
        if (!v62)
          goto LABEL_3;
        v32 = strlen(v62);
        v33 = (void *)*((_QWORD *)a3 + 4);
        if (v32 <= *((_QWORD *)a3 + 3) - (_QWORD)v33)
        {
          if (v32)
          {
            memcpy(v33, v62, v32);
            *((_QWORD *)a3 + 4) += v32;
          }
        }
        else
        {
          llvm::raw_ostream::write(a3, v62, v32);
        }
      }
      else if (a6)
      {
        *(_QWORD *)&v66 = a4;
      }
      v31 = v59;
LABEL_40:
      if (v31 == (char *)5)
      {
        v52 = (void *)*((_QWORD *)a3 + 4);
        if (*((_QWORD *)a3 + 3) - (_QWORD)v52 <= 0xDuLL)
        {
          v49 = "Objc message: ";
          v50 = a3;
          v51 = 14;
          goto LABEL_46;
        }
        qmemcpy(v52, "Objc message: ", 14);
        v58 = *((_QWORD *)a3 + 4) + 14;
      }
      else
      {
        if (v31 != (char *)1)
          goto LABEL_50;
        v48 = *((_QWORD *)a3 + 4);
        if ((unint64_t)(*((_QWORD *)a3 + 3) - v48) <= 0x10)
        {
          v49 = "symbol stub for: ";
          v50 = a3;
          v51 = 17;
LABEL_46:
          a3 = llvm::raw_ostream::write(v50, v49, v51);
          goto LABEL_47;
        }
        *(_BYTE *)(v48 + 16) = 32;
        *(_OWORD *)v48 = *(_OWORD *)"symbol stub for: ";
        v58 = *((_QWORD *)a3 + 4) + 17;
      }
      *((_QWORD *)a3 + 4) = v58;
LABEL_47:
      if (v62)
      {
        v53 = strlen(v62);
        v54 = (void *)*((_QWORD *)a3 + 4);
        if (v53 <= *((_QWORD *)a3 + 3) - (_QWORD)v54)
        {
          if (v53)
          {
            memcpy(v54, v62, v53);
            *((_QWORD *)a3 + 4) += v53;
          }
        }
        else
        {
          llvm::raw_ostream::write(a3, v62, v53);
        }
      }
LABEL_50:
      if (!v30 && !a6)
        return 0;
LABEL_3:
      if (__s[0])
      {
        if (__s[1])
        {
          v18 = strlen(__s[1]);
          v19 = *(_QWORD *)(a1 + 8);
          v61 = 261;
          v59 = __s[1];
          v60 = v18;
          Symbol = llvm::MCContext::getOrCreateSymbol(v19, (uint64_t)&v59);
          v21 = *(_QWORD *)(a1 + 8);
          v22 = sub_1C484358C(v21 + 192, 24, 3);
          v23 = v22;
          v24 = *(unsigned __int8 *)(*(_QWORD *)(v21 + 152) + 18) << 16;
          *(_BYTE *)v22 = 2;
          v25 = v24 | (*(unsigned __int8 *)(v22 + 4) << 24);
        }
        else
        {
          Symbol = (int)v64;
          v22 = sub_1C484358C(*(_QWORD *)(a1 + 8) + 192, 24, 3);
          v23 = v22;
          *(_BYTE *)v22 = 1;
          v25 = *(unsigned __int8 *)(v22 + 4) << 24;
        }
        *(_DWORD *)(v22 + 1) = v25;
        *(_QWORD *)(v22 + 8) = 0;
        *(_QWORD *)(v22 + 16) = Symbol;
      }
      else
      {
        v23 = 0;
      }
      if (*((_QWORD *)&v64 + 1))
      {
        if (v65[0])
        {
          v34 = strlen(v65[0]);
          v35 = *(_QWORD *)(a1 + 8);
          v61 = 261;
          v59 = v65[0];
          v60 = v34;
          v36 = llvm::MCContext::getOrCreateSymbol(v35, (uint64_t)&v59);
          v37 = *(_QWORD *)(a1 + 8);
          v38 = sub_1C484358C(v37 + 192, 24, 3);
          v39 = v38;
          v40 = *(unsigned __int8 *)(*(_QWORD *)(v37 + 152) + 18) << 16;
          *(_BYTE *)v38 = 2;
          v41 = v40 | (*(unsigned __int8 *)(v38 + 4) << 24);
        }
        else
        {
          v36 = SLODWORD(v65[1]);
          v38 = sub_1C484358C(*(_QWORD *)(a1 + 8) + 192, 24, 3);
          v39 = v38;
          *(_BYTE *)v38 = 1;
          v41 = *(unsigned __int8 *)(v38 + 4) << 24;
        }
        *(_DWORD *)(v38 + 1) = v41;
        *(_QWORD *)(v38 + 8) = 0;
        *(_QWORD *)(v38 + 16) = v36;
      }
      else
      {
        v39 = 0;
      }
      v42 = v66;
      if ((_QWORD)v66)
      {
        v43 = sub_1C484358C(*(_QWORD *)(a1 + 8) + 192, 24, 3);
        *(_BYTE *)v43 = 1;
        *(_DWORD *)(v43 + 1) = *(unsigned __int8 *)(v43 + 4) << 24;
        *(_QWORD *)(v43 + 8) = 0;
        *(_QWORD *)(v43 + 16) = v42;
        if (v39)
        {
LABEL_26:
          v44 = *(_QWORD *)(a1 + 8) + 192;
          if (v23)
          {
            v45 = sub_1C484358C(v44, 32, 3);
            *(_BYTE *)v45 = 0;
            *(_DWORD *)(v45 + 1) = (*(unsigned __int8 *)(v45 + 4) << 24) | 0x12;
            *(_QWORD *)(v45 + 8) = 0;
            *(_QWORD *)(v45 + 16) = v23;
            v46 = (unint64_t *)(v45 + 24);
          }
          else
          {
            v45 = sub_1C484358C(v44, 24, 3);
            *(_BYTE *)v45 = 3;
            *(_DWORD *)(v45 + 1) = (*(unsigned __int8 *)(v45 + 4) << 24) | 1;
            *(_QWORD *)(v45 + 8) = 0;
            v46 = (unint64_t *)(v45 + 16);
          }
          *v46 = v39;
          if (v43)
          {
            v47 = sub_1C484358C(*(_QWORD *)(a1 + 8) + 192, 32, 3);
            *(_BYTE *)v47 = 0;
            *(_DWORD *)(v47 + 1) = *(unsigned __int8 *)(v47 + 4) << 24;
            *(_QWORD *)(v47 + 8) = 0;
            *(_QWORD *)(v47 + 16) = v45;
            goto LABEL_35;
          }
          v43 = v45;
          goto LABEL_56;
        }
      }
      else
      {
        v43 = 0;
        if (v39)
          goto LABEL_26;
      }
      if (!v23)
      {
        if (!v43)
        {
          v43 = sub_1C484358C(*(_QWORD *)(a1 + 8) + 192, 24, 3);
          *(_BYTE *)v43 = 1;
          *(_DWORD *)(v43 + 1) = *(unsigned __int8 *)(v43 + 4) << 24;
          *(_QWORD *)(v43 + 8) = 0;
          *(_QWORD *)(v43 + 16) = 0;
        }
        goto LABEL_56;
      }
      if (v43)
      {
        v47 = sub_1C484358C(*(_QWORD *)(a1 + 8) + 192, 32, 3);
        *(_BYTE *)v47 = 0;
        *(_DWORD *)(v47 + 1) = *(unsigned __int8 *)(v47 + 4) << 24;
        *(_QWORD *)(v47 + 8) = 0;
        *(_QWORD *)(v47 + 16) = v23;
LABEL_35:
        *(_QWORD *)(v47 + 24) = v43;
        v43 = v47;
        goto LABEL_56;
      }
      v43 = v23;
LABEL_56:
      result = (*(uint64_t (**)(_QWORD, unint64_t, _QWORD))(**(_QWORD **)(a1 + 16) + 16))(*(_QWORD *)(a1 + 16), v43, DWORD2(v66));
      if (result)
      {
        v55 = result;
        v56 = *(unsigned int *)(a2 + 24);
        if (v56 >= *(_DWORD *)(a2 + 28))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a2 + 16, a2 + 32, v56 + 1, 16);
          LODWORD(v56) = *(_DWORD *)(a2 + 24);
        }
        v57 = (_QWORD *)(*(_QWORD *)(a2 + 16) + 16 * v56);
        *v57 = 5;
        v57[1] = v55;
        ++*(_DWORD *)(a2 + 24);
        return 1;
      }
    }
  }
  return result;
}

llvm::raw_ostream *llvm::MCExternalSymbolizer::tryAddingPcLoadReferenceComment(llvm::raw_ostream *this, llvm::raw_ostream *a2, uint64_t a3, uint64_t a4)
{
  uint64_t (*v4)(_QWORD, uint64_t, uint64_t *, uint64_t, char **);
  void *v6;
  const char *v7;
  llvm::raw_ostream *v8;
  size_t v9;
  uint64_t v10;
  size_t v11;
  void *v12;
  unint64_t v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  _OWORD *v17;
  unint64_t v18;
  llvm::raw_ostream *v19;
  char *v20;
  size_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  char *__s;
  uint64_t v26;

  v4 = (uint64_t (*)(_QWORD, uint64_t, uint64_t *, uint64_t, char **))*((_QWORD *)this + 4);
  if (v4)
  {
    __s = 0;
    v26 = 2;
    this = (llvm::raw_ostream *)v4(*((_QWORD *)this + 5), a3, &v26, a4, &__s);
    switch(v26)
    {
      case 2:
        v6 = (void *)*((_QWORD *)a2 + 4);
        if (*((_QWORD *)a2 + 3) - (_QWORD)v6 <= 0x1CuLL)
        {
          v7 = "literal pool symbol address: ";
          v8 = a2;
          v9 = 29;
          goto LABEL_22;
        }
        qmemcpy(v6, "literal pool symbol address: ", 29);
        v24 = *((_QWORD *)a2 + 4) + 29;
        goto LABEL_45;
      case 3:
        v10 = *((_QWORD *)a2 + 4);
        if ((unint64_t)(*((_QWORD *)a2 + 3) - v10) > 0x12)
        {
          *(_DWORD *)(v10 + 15) = 572537458;
          *(_OWORD *)v10 = *(_OWORD *)"literal pool for: \"";
          *((_QWORD *)a2 + 4) += 19;
        }
        else
        {
          llvm::raw_ostream::write(a2, "literal pool for: \"", 0x13uLL);
        }
        if (__s)
          v11 = strlen(__s);
        else
          v11 = 0;
        this = llvm::raw_ostream::write_escaped(a2, __s, v11, 0);
        goto LABEL_28;
      case 4:
        v12 = (void *)*((_QWORD *)a2 + 4);
        if (*((_QWORD *)a2 + 3) - (_QWORD)v12 > 0x14uLL)
        {
          qmemcpy(v12, "Objc cfstring ref: @\"", 21);
          *((_QWORD *)a2 + 4) += 21;
        }
        else
        {
          this = llvm::raw_ostream::write(a2, "Objc cfstring ref: @\"", 0x15uLL);
          a2 = this;
        }
        if (__s)
        {
          v13 = strlen(__s);
          this = (llvm::raw_ostream *)*((_QWORD *)a2 + 4);
          if (v13 <= *((_QWORD *)a2 + 3) - (_QWORD)this)
          {
            if (v13)
            {
              this = (llvm::raw_ostream *)memcpy(this, __s, v13);
              *((_QWORD *)a2 + 4) += v13;
            }
          }
          else
          {
            this = llvm::raw_ostream::write(a2, __s, v13);
            a2 = this;
          }
        }
LABEL_28:
        v22 = (_BYTE *)*((_QWORD *)a2 + 4);
        if (*((_BYTE **)a2 + 3) == v22)
        {
          v20 = "\"";
          v19 = a2;
          v21 = 1;
          goto LABEL_30;
        }
        *v22 = 34;
        v23 = *((_QWORD *)a2 + 4) + 1;
        goto LABEL_35;
      case 5:
        v14 = (void *)*((_QWORD *)a2 + 4);
        if (*((_QWORD *)a2 + 3) - (_QWORD)v14 <= 0xDuLL)
        {
          v7 = "Objc message: ";
          v8 = a2;
          v9 = 14;
          goto LABEL_22;
        }
        qmemcpy(v14, "Objc message: ", 14);
        v24 = *((_QWORD *)a2 + 4) + 14;
        goto LABEL_45;
      case 6:
        v15 = *((_QWORD *)a2 + 4);
        if ((unint64_t)(*((_QWORD *)a2 + 3) - v15) <= 0x11)
        {
          v7 = "Objc message ref: ";
          v8 = a2;
          v9 = 18;
          goto LABEL_22;
        }
        *(_WORD *)(v15 + 16) = 8250;
        *(_OWORD *)v15 = *(_OWORD *)"Objc message ref: ";
        v24 = *((_QWORD *)a2 + 4) + 18;
        goto LABEL_45;
      case 7:
        v16 = *((_QWORD *)a2 + 4);
        if ((unint64_t)(*((_QWORD *)a2 + 3) - v16) <= 0x12)
        {
          v7 = "Objc selector ref: ";
          v8 = a2;
          v9 = 19;
          goto LABEL_22;
        }
        *(_DWORD *)(v16 + 15) = 540698213;
        *(_OWORD *)v16 = *(_OWORD *)"Objc selector ref: ";
        v24 = *((_QWORD *)a2 + 4) + 19;
        goto LABEL_45;
      case 8:
        v17 = (_OWORD *)*((_QWORD *)a2 + 4);
        if (*((_QWORD *)a2 + 3) - (_QWORD)v17 > 0xFuLL)
        {
          *v17 = *(_OWORD *)"Objc class ref: ";
          v24 = *((_QWORD *)a2 + 4) + 16;
LABEL_45:
          *((_QWORD *)a2 + 4) = v24;
        }
        else
        {
          v7 = "Objc class ref: ";
          v8 = a2;
          v9 = 16;
LABEL_22:
          this = llvm::raw_ostream::write(v8, v7, v9);
          a2 = this;
        }
        if (__s)
        {
          v18 = strlen(__s);
          this = (llvm::raw_ostream *)*((_QWORD *)a2 + 4);
          if (v18 <= *((_QWORD *)a2 + 3) - (_QWORD)this)
          {
            if (v18)
            {
              this = (llvm::raw_ostream *)memcpy(this, __s, v18);
              v23 = *((_QWORD *)a2 + 4) + v18;
LABEL_35:
              *((_QWORD *)a2 + 4) = v23;
            }
          }
          else
          {
            v19 = a2;
            v20 = __s;
            v21 = v18;
LABEL_30:
            this = llvm::raw_ostream::write(v19, v20, v21);
          }
        }
        break;
      default:
        return this;
    }
  }
  return this;
}

_QWORD *llvm::createMCSymbolizer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  _QWORD *result;
  uint64_t v12;

  result = (_QWORD *)operator new();
  v12 = *a6;
  *a6 = 0;
  *result = &off_1E8184C60;
  result[1] = a5;
  result[2] = v12;
  result[3] = a2;
  result[4] = a3;
  result[5] = a4;
  return result;
}

_QWORD *sub_1C598493C(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_1E8184CC0;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  return a1;
}

void sub_1C5984984(_QWORD *a1)
{
  uint64_t v2;

  *a1 = off_1E8184CC0;
  v2 = a1[2];
  a1[2] = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *llvm::MCRelocationInfo::MCRelocationInfo(_QWORD *this, llvm::MCContext *a2)
{
  *this = &off_1E8184C98;
  this[1] = a2;
  return this;
}

{
  *this = &off_1E8184C98;
  this[1] = a2;
  return this;
}

void llvm::MCRelocationInfo::~MCRelocationInfo(llvm::MCRelocationInfo *this)
{
  JUMPOUT(0x1CAA32FC0);
}

const llvm::MCExpr *llvm::MCRelocationInfo::createExprForCAPIVariantKind(llvm::MCRelocationInfo *this, const llvm::MCExpr *a2, int a3)
{
  if (a3)
    return 0;
  else
    return a2;
}

_QWORD *llvm::createMCRelocationInfo(llvm *this, const llvm::Triple *a2, llvm::MCContext *a3)
{
  _QWORD *result;

  result = (_QWORD *)operator new();
  *result = &off_1E8184C98;
  result[1] = a2;
  return result;
}

void llvm::MCSymbolizer::~MCSymbolizer(llvm::MCSymbolizer *this)
{
  uint64_t v2;

  *(_QWORD *)this = off_1E8184CC0;
  v2 = *((_QWORD *)this + 2);
  *((_QWORD *)this + 2) = 0;
  if (v2)
    (*(void (**)(uint64_t))(*(_QWORD *)v2 + 8))(v2);
}

void llvm::initializeObjCARCOpts(llvm *this, llvm::PassRegistry *a2)
{
  llvm::PassRegistry *v3;
  llvm::PassRegistry *v4;
  llvm::PassRegistry *v5;
  llvm::PassRegistry *v6;
  llvm::PassRegistry *v7;

  llvm::initializeObjCARCAAWrapperPassPass(this, a2);
  llvm::initializeObjCARCAPElimPass(this, v3);
  llvm::initializeObjCARCExpandPass(this, v4);
  llvm::initializeObjCARCContractLegacyPassPass(this, v5);
  llvm::initializeObjCARCOptLegacyPassPass(this, v6);
  llvm::initializePAEvalPass(this, v7);
}

uint64_t llvm::objcarc::BundledRetainClaimRVs::insertAfterInvokes(llvm::objcarc::BundledRetainClaimRVs *this, llvm::Function *a2, llvm::DominatorTree *a3)
{
  char *v3;
  char *v4;
  unsigned __int8 v7;
  int v8;
  char *v9;
  char *v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  llvm::BasicBlock *v15;
  _QWORD *v16;
  _QWORD *i;
  _QWORD *v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  uint64_t v23;
  _WORD v25[20];
  llvm::DominatorTree *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  char v31;

  v3 = (char *)a2 + 72;
  v4 = (char *)*((_QWORD *)a2 + 10);
  if (v4 == (char *)a2 + 72)
  {
    v8 = 0;
    v7 = 0;
  }
  else
  {
    v7 = 0;
    v8 = 0;
    do
    {
      if (v4)
        v9 = v4 - 24;
      else
        v9 = 0;
      v10 = (char *)*((_QWORD *)v9 + 5);
      if (v10 != v9 + 40)
      {
        v11 = v10 ? (uint64_t)(v10 - 24) : 0;
        v12 = *(unsigned __int8 *)(v11 + 16) - 40;
        v13 = v12 >= 0xFFFFFFF5 ? v11 : 0;
        if (v10)
        {
          if (*(_BYTE *)(v13 + 16) == 33
            && v12 >= 0xFFFFFFF5
            && *(_BYTE *)(**(_QWORD **)(*(_QWORD *)(v13 + 72) + 16) + 8) != 7)
          {
            sub_1C5062CEC(v13, 6, (uint64_t)&v26);
            if ((_BYTE)v29)
            {
              v15 = *(llvm::BasicBlock **)(v13 - 96);
              if (!llvm::BasicBlock::getSinglePredecessor(v15))
              {
                v26 = a3;
                v28 = 0;
                v29 = 0;
                v27 = 0;
                v30 = 0;
                v8 = 1;
                v31 = 1;
                v25[16] = 257;
                v15 = (llvm::BasicBlock *)llvm::SplitCriticalEdge((llvm::Instruction *)v13, 0, (uint64_t)&v26, (llvm::Twine *)v25);
              }
              v16 = (_QWORD *)((char *)v15 + 40);
              for (i = (_QWORD *)*((_QWORD *)v15 + 6); i != v16; i = (_QWORD *)i[1])
              {
                v18 = i - 3;
                if (!i)
                  v18 = 0;
                if (*((_BYTE *)v18 + 16) != 83)
                {
                  v19 = *((unsigned __int8 *)i - 8) - 38;
                  v20 = v19 > 0x38;
                  v21 = (1 << v19) & 0x100060000000001;
                  if (v20 || v21 == 0)
                    v16 = i;
                  else
                    v16 = (_QWORD *)i[1];
                  break;
                }
              }
              if (v16)
                v23 = (uint64_t)(v16 - 3);
              else
                v23 = 0;
              v26 = 0;
              v27 = 0;
              LODWORD(v28) = 0;
              llvm::objcarc::BundledRetainClaimRVs::insertRVCallWithColors((uint64_t *)this, v23, (unsigned __int8 *)v13, (uint64_t)&v26);
              sub_1C4EF1108((uint64_t *)&v26);
              v7 = 1;
            }
          }
        }
      }
      v4 = (char *)*((_QWORD *)v4 + 1);
    }
    while (v4 != v3);
  }
  return v7 | (v8 << 8);
}

uint64_t llvm::objcarc::BundledRetainClaimRVs::insertRVCall(llvm::objcarc::BundledRetainClaimRVs *this, llvm::Instruction *a2, llvm::CallBase *a3)
{
  uint64_t inserted;
  uint64_t v5[2];
  int v6;

  v5[0] = 0;
  v5[1] = 0;
  v6 = 0;
  inserted = llvm::objcarc::BundledRetainClaimRVs::insertRVCallWithColors((uint64_t *)this, (uint64_t)a2, (unsigned __int8 *)a3, (uint64_t)v5);
  sub_1C4EF1108(v5);
  return inserted;
}

uint64_t llvm::objcarc::BundledRetainClaimRVs::insertRVCallWithColors(uint64_t *a1, uint64_t a2, unsigned __int8 *a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t **v10;
  uint64_t v11;
  _QWORD v13[3];
  char v14;
  __int16 v15;
  unsigned __int8 *v16;
  void *v17[2];
  _QWORD v18[16];

  v18[15] = *MEMORY[0x1E0C80C00];
  sub_1C4773D54((uint64_t)v17, a2, 0, 0, 0);
  sub_1C5062CEC((uint64_t)a3, 6, (uint64_t)v13);
  v8 = 0;
  if (v14)
    v8 = *(_QWORD *)v13[0];
  if ((*(_WORD *)(v8 + 18) & 1) != 0)
    llvm::Function::BuildLazyArguments((llvm::Function *)v8);
  v9 = **(_QWORD **)(v8 + 88);
  v15 = 257;
  v16 = sub_1C4773E38((uint64_t *)v17, 49, a3, v9, (uint64_t)v13);
  if (v8)
    v10 = *(uint64_t ***)(v8 + 24);
  else
    v10 = 0;
  v15 = 257;
  v13[0] = llvm::objcarc::createCallInstWithColors(v10, v8, (uint64_t *)&v16, 1, (uint64_t)v13, a2, a4);
  sub_1C61B6040(a1, v13)[1] = a3;
  v11 = v13[0];
  if (v17[0] != v18)
    free(v17[0]);
  return v11;
}

void llvm::objcarc::BundledRetainClaimRVs::~BundledRetainClaimRVs(uint64_t **this)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  void (*v16)(void);
  uint64_t *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t Declaration;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  _QWORD v34[3];
  _QWORD *v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v2 = *((unsigned int *)this + 4);
  v3 = (uint64_t)&(*this)[2 * v2];
  if (*((_DWORD *)this + 2))
  {
    if ((_DWORD)v2)
    {
      v5 = 16 * v2;
      v4 = *this;
      while ((*v4 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v4 += 2;
        v5 -= 16;
        if (!v5)
          goto LABEL_7;
      }
    }
    else
    {
      v4 = *this;
    }
  }
  else
  {
LABEL_7:
    v4 = &(*this)[2 * v2];
  }
  v6 = (uint64_t)&(*this)[2 * v2];
  while (v4 != (uint64_t *)v6)
  {
    v7 = *v4;
    if (*((_BYTE *)this + 32))
    {
      v8 = v4[1];
      if (*(_BYTE *)(v8 + 16) == 84 && v8 != 0)
        *(_WORD *)(v8 + 18) |= 3u;
      if (*((_BYTE *)this + 33))
      {
        v10 = *(_DWORD *)(v8 + 20);
        if (v10 < 0)
        {
          v33 = v8 - 32 * (v10 & 0x7FFFFFF);
          v18 = *(_QWORD *)(v33 - 8);
          if (v18)
          {
            v19 = -v18;
            while (1)
            {
              if (*(_DWORD *)(*(_QWORD *)(v33 + v19 - 8) + 8) == 6)
              {
                v32 = *(unsigned int *)(v33 + v19);
                v20 = *(_QWORD *)(v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF) + 32 * v32);
                v21 = this[3];
                Declaration = v21[7];
                if (!Declaration)
                {
                  Declaration = llvm::Intrinsic::getDeclaration((uint64_t *)*v21, 226, 0, 0);
                  v21[7] = Declaration;
                }
                if (v20 == Declaration)
                  break;
              }
              v19 += 16;
              if (!v19)
                goto LABEL_18;
            }
            v23 = this[3];
            v24 = v23[8];
            if (!v24)
            {
              v24 = llvm::Intrinsic::getDeclaration((uint64_t *)*v23, 212, 0, 0);
              v23[8] = v24;
            }
            v25 = v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF);
            v26 = v25 + 32 * v32;
            if (*(_QWORD *)v26)
            {
              **(_QWORD **)(v26 + 16) = *(_QWORD *)(v26 + 8);
              v27 = *(_QWORD *)(v26 + 8);
              if (v27)
                *(_QWORD *)(v27 + 16) = *(_QWORD *)(v26 + 16);
            }
            *(_QWORD *)v26 = v24;
            if (v24)
            {
              v30 = *(_QWORD *)(v24 + 8);
              v28 = (_QWORD *)(v24 + 8);
              v29 = v30;
              v31 = v25 + 32 * v32;
              *(_QWORD *)(v31 + 8) = v30;
              if (v30)
                *(_QWORD *)(v29 + 16) = v31 + 8;
              *(_QWORD *)(v31 + 16) = v28;
              *v28 = v26;
            }
          }
        }
      }
    }
LABEL_18:
    v11 = *(_QWORD *)(v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF));
    if (*(_QWORD *)(v7 + 8))
    {
      llvm::Value::doRAUW((llvm::ValueAsMetadata *)v7, *(llvm::Value **)(v7 - 32 * (*(_DWORD *)(v7 + 20) & 0x7FFFFFF)), (llvm::Value *)1);
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v7 + 40) + 40, (uint64_t ***)v7);
      v12 = *(_QWORD *)(v7 + 24);
      v13 = *(_QWORD **)(v7 + 32);
      *v13 = v12;
      *(_QWORD *)(v12 + 8) = v13;
      *(_QWORD *)(v7 + 24) = 0;
      *(_QWORD *)(v7 + 32) = 0;
      llvm::Value::deleteValue((llvm::Value *)v7);
    }
    else
    {
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v7 + 40) + 40, (uint64_t ***)v7);
      v14 = *(_QWORD *)(v7 + 24);
      v15 = *(_QWORD **)(v7 + 32);
      *v15 = v14;
      *(_QWORD *)(v14 + 8) = v15;
      *(_QWORD *)(v7 + 24) = 0;
      *(_QWORD *)(v7 + 32) = 0;
      llvm::Value::deleteValue((llvm::Value *)v7);
      v35 = 0;
      llvm::RecursivelyDeleteTriviallyDeadInstructions(v11, 0, 0, v34);
      if (v35 == v34)
      {
        v16 = *(void (**)(void))(v34[0] + 32);
        goto LABEL_24;
      }
      if (v35)
      {
        v16 = *(void (**)(void))(*v35 + 40);
LABEL_24:
        v16();
      }
    }
    v17 = v4 + 2;
    v4 = (uint64_t *)v3;
    if (v17 != (uint64_t *)v3)
    {
      v4 = v17;
      while ((*v4 | 0x1000) == 0xFFFFFFFFFFFFF000)
      {
        v4 += 2;
        if (v4 == (uint64_t *)v3)
        {
          v4 = (uint64_t *)v3;
          break;
        }
      }
    }
  }
  sub_1C61446F0((unsigned int *)this);
  MEMORY[0x1CAA32FB4](*this, 8);
}

void llvm::initializeObjCARCOptLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1EF8F7208);
  if (v2 != -1)
  {
    v5[0] = sub_1C59851F8;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1EF8F7208, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C59851F8(llvm *a1, llvm::PassRegistry *a2)
{
  uint64_t v3;

  llvm::initializeObjCARCAAWrapperPassPass(a1, a2);
  v3 = operator new();
  *(_QWORD *)v3 = "ObjC ARC optimization";
  *(_QWORD *)(v3 + 8) = 21;
  *(_QWORD *)(v3 + 16) = "objc-arc";
  *(_QWORD *)(v3 + 24) = 8;
  *(_QWORD *)(v3 + 32) = &unk_1EF8F5718;
  *(_WORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = sub_1C598A3C4;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

uint64_t sub_1C598528C(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8F5718;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E8184CF8;
  *(_BYTE *)(a1 + 200) = 0;
  *(_BYTE *)(a1 + 204) = 0;
  *(_BYTE *)(a1 + 208) = 0;
  *(_BYTE *)(a1 + 212) = 0;
  *(_BYTE *)(a1 + 216) = 0;
  *(_BYTE *)(a1 + 220) = 0;
  *(_QWORD *)(a1 + 224) = 0;
  *(_BYTE *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1EF8F7208);
  if (v3 != -1)
  {
    v7[0] = sub_1C59851F8;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1EF8F7208, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

BOOL sub_1C5985394(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  __int16 v5;
  const llvm::Value *v6;
  char v7;
  uint64_t v8;
  int v9;
  llvm::Value **v10;
  _BOOL8 v11;
  unsigned int v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  int v29;
  llvm::Value *v30;
  _QWORD *v31;
  _QWORD *v32;
  unsigned int FunctionClass;
  unsigned int v34;
  llvm::Value *v35;
  llvm::Value *v36;
  uint64_t *v37;
  char v38;
  uint64_t v39;
  llvm::Value *v40;
  uint64_t v41;
  int v42;
  llvm::Value *v43;
  uint64_t v44;
  llvm::Value *v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  char *v49;
  llvm::Value *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  llvm::Value **v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  _QWORD *v60;
  uint64_t v61;
  _QWORD *v62;
  void (*v63)(void);
  uint64_t v64;
  uint64_t v65;
  _QWORD *v66;
  uint64_t Declaration;
  char *v68;
  char *v69;
  uint64_t v70;
  _QWORD *v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t **v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  _QWORD *v78;
  uint64_t v79;
  _QWORD *v80;
  void (*v81)(void);
  uint64_t v82;
  _QWORD *v83;
  void (*v84)(void);
  uint64_t v85;
  llvm::ValueSymbolTable *v86;
  uint64_t v87;
  const llvm::Function *v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  _QWORD *v92;
  _QWORD *v93;
  _QWORD *v94;
  _QWORD *v95;
  _QWORD *v96;
  uint64_t v97;
  _QWORD *v98;
  _QWORD *v99;
  int v100;
  int v101;
  _QWORD *v102;
  _QWORD **v103;
  uint64_t v104;
  _QWORD *v105;
  _QWORD *v106;
  _QWORD *v107;
  _QWORD **v108;
  _QWORD *i;
  llvm::objcarc *v110;
  unsigned int ARCInstKind;
  int v112;
  void *v113;
  uint64_t v114;
  int v115;
  void *v116;
  uint64_t v117;
  int v118;
  uint64_t v119;
  llvm::Value *v120;
  char *v121;
  llvm::Value *v122;
  llvm::Value *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t **v128;
  llvm::ValueAsMetadata *v129;
  llvm::Value *v130;
  uint64_t v131;
  llvm::Value *v132;
  char *v133;
  llvm::Value *v134;
  llvm::Value *v135;
  char *v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t **v140;
  uint64_t v141;
  _QWORD *v142;
  uint64_t v143;
  llvm::ValueSymbolTable *v144;
  uint64_t v145;
  llvm::ValueSymbolTable *v146;
  uint64_t v147;
  uint64_t v148;
  _QWORD *v149;
  _QWORD *v150;
  _QWORD *v151;
  _QWORD *v152;
  _QWORD *v153;
  uint64_t v154;
  _QWORD *v155;
  _QWORD *v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  unsigned int v162;
  uint64_t v164;
  int v165;
  uint64_t v166;
  int v167;
  uint64_t v168;
  _QWORD *v169;
  uint64_t v170;
  _QWORD *v171;
  int v172;
  int MDKindID;
  int v175;
  uint64_t v176;
  _QWORD *v177;
  _QWORD *v178;
  unsigned __int8 *v179;
  _QWORD *v180;
  unint64_t v181;
  uint64_t v182;
  __int128 v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  int v189;
  llvm::Instruction *v190;
  unsigned int v191;
  _QWORD *Successor;
  char v193;
  _QWORD *v194;
  uint64_t *v195;
  _QWORD *v196;
  _QWORD *v197;
  unint64_t v198;
  _QWORD *v199;
  _QWORD *v200;
  unint64_t v201;
  _QWORD *v202;
  uint64_t *v203;
  uint64_t v204;
  _QWORD *v205;
  unsigned __int8 *v206;
  unint64_t v207;
  uint64_t v208;
  __int128 v209;
  _QWORD *v210;
  _QWORD *v211;
  unint64_t v212;
  _QWORD *v213;
  _QWORD *v214;
  unint64_t v215;
  _QWORD *v216;
  uint64_t v217;
  _QWORD *v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t *v221;
  unsigned int j;
  _QWORD *v223;
  uint64_t v224;
  int v225;
  char *v226;
  char *v227;
  uint64_t *v228;
  uint64_t v229;
  char v230;
  uint64_t v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t *v235;
  uint64_t v236;
  char *v237;
  char *v238;
  llvm::Value *v239;
  _QWORD *v240;
  _QWORD *v241;
  uint64_t v242;
  llvm::Value **v243;
  llvm::Value *v244;
  int v245;
  llvm::Value *v246;
  llvm::objcarc *v247;
  _BOOL4 v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  llvm::objcarc *v253;
  uint64_t *v254;
  uint64_t v255;
  uint64_t v256;
  unsigned int v257;
  int v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t *v261;
  uint64_t v262;
  uint64_t v263;
  unsigned int v264;
  uint64_t v265;
  int v266;
  unsigned int v267;
  llvm::Value *v268;
  uint64_t v269;
  uint64_t v270;
  unint64_t v271;
  unint64_t v272;
  unint64_t v273;
  __int16 v274;
  void *v275;
  const void *v276;
  const void *v277;
  int v278;
  unsigned int v279;
  void *v280;
  const void *v281;
  const void *v282;
  int v283;
  unsigned int v284;
  char *v285;
  uint64_t v286;
  uint64_t v287;
  char *v288;
  const void *v289;
  const void *v290;
  unsigned int v291;
  unsigned int v292;
  unsigned int v293;
  int v294;
  char *v295;
  const void *v296;
  const void *v297;
  unsigned int v298;
  unsigned int v299;
  unsigned int v300;
  llvm::objcarc::PtrState *v301;
  int v302;
  char v303;
  unint64_t v304;
  uint64_t v305;
  unint64_t v306;
  _BYTE *v307;
  char *v308;
  __int16 v309;
  void *v310;
  const void *v311;
  const void *v312;
  unsigned int v313;
  int v314;
  unsigned int v315;
  char *v316;
  void *v317;
  char *v318;
  const void *v319;
  const void *v320;
  unsigned int v321;
  int v322;
  unsigned int v323;
  char *v324;
  uint64_t v325;
  char *v326;
  char *v327;
  char *v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t *v335;
  uint64_t *m;
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  uint64_t *v341;
  uint64_t *v342;
  char v343;
  uint64_t v344;
  llvm::Value *v345;
  unsigned int v346;
  BOOL v348;
  BOOL v349;
  int v350;
  uint64_t *v351;
  uint64_t *v352;
  uint64_t v353;
  uint64_t v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t *v359;
  uint64_t *v360;
  unsigned int v361;
  uint64_t v362;
  uint64_t v363;
  uint64_t *v364;
  uint64_t v365;
  _QWORD *v366;
  uint64_t v367;
  uint64_t v368;
  char v369;
  unsigned int *v370;
  unsigned int v371;
  unint64_t v372;
  char v373;
  uint64_t v374;
  uint64_t v375;
  uint64_t v376;
  uint64_t v377;
  uint64_t *v378;
  _QWORD *v379;
  uint64_t v380;
  char v381;
  unsigned int *v382;
  unsigned int v383;
  unint64_t v384;
  unint64_t *v385;
  unint64_t v386;
  uint64_t v387;
  unint64_t *v388;
  unint64_t v389;
  int v390;
  int v391;
  uint64_t *v392;
  uint64_t *v393;
  uint64_t v394;
  unsigned int v395;
  unint64_t v396;
  uint64_t v397;
  int v398;
  uint64_t v399;
  int v400;
  uint64_t v401;
  uint64_t v402;
  uint64_t v403;
  uint64_t v404;
  uint64_t *v405;
  uint64_t *v406;
  uint64_t v407;
  uint64_t v408;
  _QWORD *v409;
  _QWORD *v410;
  uint64_t v411;
  uint64_t v412;
  char v413;
  unsigned int *v414;
  unsigned int v415;
  unint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  uint64_t v420;
  uint64_t *v421;
  uint64_t *v422;
  uint64_t v423;
  char v424;
  unsigned int *v425;
  unsigned int v426;
  unint64_t v427;
  unint64_t *v428;
  unint64_t v429;
  uint64_t v430;
  unint64_t *v431;
  unint64_t v432;
  int v433;
  int v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t *v438;
  uint64_t v439;
  uint64_t v440;
  uint64_t *v441;
  _BOOL4 v443;
  llvm::Value *v444;
  unint64_t *v446;
  uint64_t v447;
  void *v448;
  _DWORD *v449;
  uint64_t v450;
  uint64_t v451;
  char *v452;
  char *v453;
  llvm::Value *v454;
  uint64_t *v455;
  int v456;
  char *v457;
  uint64_t v458;
  uint64_t **v459;
  uint64_t v460;
  unint64_t *v461;
  unint64_t v462;
  uint64_t v463;
  uint64_t v464;
  uint64_t v465;
  llvm::ValueSymbolTable *v466;
  uint64_t v467;
  void **v468;
  uint64_t v469;
  uint64_t v470;
  uint64_t *v471;
  unint64_t *v472;
  uint64_t v473;
  void *v474;
  _DWORD *v475;
  uint64_t v476;
  uint64_t v477;
  char *v478;
  char *v479;
  llvm::Value *v480;
  uint64_t *v481;
  int v482;
  char *v483;
  uint64_t v484;
  uint64_t **v485;
  uint64_t v486;
  llvm::MDNode *v487;
  int v488;
  int v489;
  unint64_t *v490;
  unint64_t v491;
  unsigned __int8 *v492;
  unsigned __int8 *v493;
  uint64_t v494;
  uint64_t v495;
  uint64_t v496;
  llvm::ValueSymbolTable *v497;
  uint64_t v498;
  void **v499;
  uint64_t v500;
  uint64_t v501;
  uint64_t *v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  unint64_t *v506;
  unint64_t v507;
  unsigned int *v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t *v511;
  uint64_t v512;
  uint64_t v513;
  uint64_t v514;
  unint64_t *v515;
  unint64_t v516;
  int v517;
  BOOL v518;
  unsigned int v519;
  void *v520;
  int v521;
  unsigned int v522;
  void *v523;
  uint64_t v524;
  uint64_t v525;
  uint64_t v526;
  _QWORD *v527;
  uint64_t v528;
  _QWORD *v529;
  void (*v530)(void);
  uint64_t v531;
  uint64_t v532;
  uint64_t v533;
  void *v534;
  void *v535;
  uint64_t v536;
  _QWORD *v537;
  unint64_t v538;
  _QWORD *v539;
  _QWORD *v540;
  uint64_t v541;
  int v542;
  llvm::Value **v543;
  llvm::Value *v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  unint64_t *v549;
  unint64_t *v550;
  unint64_t *v551;
  unint64_t v552;
  _QWORD *v553;
  unint64_t v554;
  int v555;
  char *v556;
  _QWORD *v557;
  _QWORD *v558;
  _QWORD *v559;
  uint64_t v560;
  const llvm::Value *v561;
  _QWORD *v562;
  _QWORD *v563;
  int v564;
  unsigned int *v565;
  llvm::objcarc *v566;
  int v567;
  unsigned int v568;
  BOOL v569;
  uint64_t v570;
  uint64_t v571;
  uint64_t v572;
  uint64_t v573;
  unint64_t *v574;
  unint64_t *v575;
  unint64_t v576;
  uint64_t v577;
  unint64_t *v578;
  unint64_t v579;
  _BOOL4 inited;
  llvm::Value *v581;
  uint64_t v582;
  _QWORD *v583;
  uint64_t v584;
  uint64_t v585;
  const llvm::Value *v586;
  uint64_t *v587;
  uint64_t *v588;
  uint64_t v589;
  uint64_t v590;
  uint64_t v591;
  uint64_t v592;
  _QWORD *v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t v596;
  uint64_t v597;
  uint64_t v598;
  int v599;
  int v600;
  char v601;
  unsigned int v602;
  int v603;
  uint64_t v604;
  uint64_t v605;
  unsigned int v606;
  int v607;
  uint64_t v608;
  uint64_t v609;
  int v610;
  int v611;
  int v612;
  uint64_t *v613;
  uint64_t v614;
  uint64_t v615;
  unsigned int v616;
  uint64_t v617;
  unsigned int *v618;
  uint64_t *v619;
  uint64_t v620;
  uint64_t v621;
  unsigned int v622;
  llvm::Value *v623;
  unsigned int v624;
  uint64_t v625;
  uint64_t v626;
  uint64_t v627;
  unint64_t v628;
  unint64_t v629;
  unint64_t v630;
  __int16 v631;
  void *v632;
  const void *v633;
  const void *v634;
  int v635;
  unsigned int v636;
  void *v637;
  const void *v638;
  const void *v639;
  int v640;
  unsigned int v641;
  char *v642;
  uint64_t v643;
  uint64_t v644;
  char *v645;
  const void *v646;
  const void *v647;
  unsigned int v648;
  unsigned int v649;
  unsigned int v650;
  int v651;
  char *v652;
  const void *v653;
  const void *v654;
  unsigned int v655;
  unsigned int v656;
  unsigned int v657;
  llvm::objcarc::PtrState *v658;
  int v659;
  char v660;
  unint64_t v661;
  uint64_t v662;
  unint64_t v663;
  _BYTE *v664;
  char *v665;
  __int16 v666;
  void *v667;
  const void *v668;
  const void *v669;
  unsigned int v670;
  int v671;
  unsigned int v672;
  char *v673;
  void *v674;
  char *v675;
  const void *v676;
  const void *v677;
  uint64_t v678;
  unsigned int v679;
  int v680;
  unsigned int v681;
  char *v682;
  uint64_t v683;
  char *v684;
  char *v685;
  char *v686;
  llvm::Value *v687;
  uint64_t v688;
  uint64_t v689;
  uint64_t v690;
  llvm::Value *v691;
  uint64_t v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  uint64_t v696;
  uint64_t *v697;
  uint64_t *n;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  void *v703;
  int v704;
  unsigned int v705;
  void *v706;
  _QWORD *ii;
  char *v708;
  uint64_t v709;
  uint64_t v710;
  BOOL v711;
  llvm::Value *v712;
  char *SingleDependency;
  const llvm::Function *v714;
  uint64_t v715;
  uint64_t v716;
  char *v717;
  const llvm::Function *v718;
  uint64_t v719;
  uint64_t v720;
  char *v721;
  const llvm::Function *v722;
  int v723;
  BOOL v724;
  llvm::Value *v725;
  int v727;
  int v728;
  uint64_t v729;
  uint64_t v730;
  const llvm::Function *v731;
  uint64_t v732;
  uint64_t *v733;
  llvm::Instruction *v734;
  _QWORD *v735;
  llvm::CallBase *v736;
  uint64_t v737;
  uint64_t v738;
  uint64_t v739;
  uint64_t v740;
  _QWORD *v741;
  char *v742;
  uint64_t v743;
  uint64_t v744;
  _QWORD *v745;
  uint64_t v746;
  uint64_t v747;
  _QWORD *v748;
  uint64_t v749;
  _QWORD *v750;
  void (*v751)(void);
  uint64_t v752;
  uint64_t v753;
  _QWORD *v754;
  uint64_t v755;
  _QWORD *v756;
  void (*v757)(void);
  uint64_t v759;
  char v760;
  BOOL v761;
  uint64_t *v763;
  uint64_t v764;
  uint64_t *v765;
  char *v766;
  unint64_t *v767;
  char *v768;
  char *v769;
  int v770;
  int v771;
  int v772;
  int v773;
  unsigned int v774;
  llvm::objcarc::ProvenanceAnalysis *v775;
  uint64_t *v776;
  char v777;
  int v778;
  int v779;
  uint64_t v780;
  uint64_t v781;
  llvm::Value *v782;
  llvm::SmallPtrSetImplBase *v783;
  uint64_t v784;
  uint64_t *v785;
  unsigned int *v786;
  char v787;
  uint64_t *v788;
  uint64_t *v789;
  llvm::Value *v790;
  llvm::Value *v791;
  llvm::Value *v792;
  llvm::Value *v793;
  llvm::Value *k;
  int v795;
  llvm::Value *v796;
  llvm::Value *v797;
  uint64_t v798;
  _QWORD *v799;
  uint64_t *v800;
  uint64_t *v801;
  uint64_t v802;
  uint64_t v803;
  char *v804;
  int v805;
  uint64_t v806;
  uint64_t v807;
  uint64_t *v808;
  int32x2_t *v809;
  uint64_t *v810[2];
  int v811;
  uint64_t v812;
  __int16 v813;
  uint64_t v814[2];
  unsigned int v815;
  _QWORD v816[2];
  int v817;
  _QWORD *v818;
  _QWORD *v819;
  uint64_t v820;
  _QWORD v821[2];
  unsigned int v822;
  _QWORD *v823;
  uint64_t v824;
  _QWORD *v825;
  void *v826;
  uint64_t v827;
  _BYTE v828[128];
  void *v829;
  uint64_t v830;
  _BYTE v831[128];
  void *v832;
  llvm::MDNode *v833;
  __int128 v834;
  __int128 v835;
  _BYTE v836[16];
  _BYTE *v837;
  void *v838;
  uint64_t v839;
  int v840;
  _BYTE v841[176];
  _BYTE v842[32];
  void *v843[2];
  __int128 v844;
  void *__b[2];
  void *v846[2];
  __int128 v847;
  __int128 v848;
  void *v849;
  void *v850;
  uint64_t v851;
  int v852;
  _WORD v853[64];
  llvm::Value *v854;
  void *v855;
  uint64_t v856;
  int v857;
  _QWORD v858[18];

  v858[16] = *MEMORY[0x1E0C80C00];
  if (!llvm::objcarc::EnableARCOpts)
    return 0;
  v4 = a1;
  *(_WORD *)a1 = 0;
  v810[0] = 0;
  v810[1] = 0;
  v811 = 0;
  v812 = a1 + 64;
  v813 = 0;
  *(_QWORD *)(a1 + 192) = v810;
  v5 = llvm::objcarc::BundledRetainClaimRVs::insertAfterInvokes((llvm::objcarc::BundledRetainClaimRVs *)v810, (llvm::Function *)a2, 0);
  *(_BYTE *)v4 |= v5 & 1;
  v7 = HIBYTE(v5) & 1 | *(_BYTE *)(v4 + 1);
  *(_QWORD *)(v4 + 8) = a3;
  v775 = (llvm::objcarc::ProvenanceAnalysis *)(v4 + 8);
  v8 = a2;
  *(_BYTE *)(v4 + 1) = v7;
  *(_DWORD *)(v4 + 204) = 0;
  v833 = 0;
  v832 = 0;
  LODWORD(v834) = 0;
  if ((*(_BYTE *)(a2 + 18) & 8) != 0)
  {
    v9 = *(_DWORD *)(a2 + 20);
    v10 = (v9 & 0x40000000) != 0 ? *(llvm::Value ***)(a2 - 8) : (llvm::Value **)(a2 - 32 * (v9 & 0x7FFFFFF));
    v12 = llvm::classifyEHPersonality(*v10, v6);
    v8 = a2;
    if (v12 <= 0xC)
    {
      v8 = a2;
      if (((1 << v12) & 0x1780) != 0)
      {
        llvm::colorEHFunclets((llvm *)a2, v6, (uint64_t)v842);
        sub_1C61A9204((uint64_t *)&v832, (uint64_t *)v842);
        sub_1C4EF1108((uint64_t *)v842);
        v8 = a2;
      }
    }
  }
  v13 = *(_QWORD **)(v8 + 80);
  v798 = v4;
  v799 = (_QWORD *)(v8 + 72);
  if (v13 != (_QWORD *)(v8 + 72))
  {
    while (1)
    {
      v14 = v13 - 3;
      if (!v13)
        v14 = 0;
      v15 = (_QWORD *)v14[6];
      if (v15 != v14 + 5)
        break;
      v13 = (_QWORD *)v13[1];
      if (v13 == v799)
        goto LABEL_161;
    }
    v16 = 0;
    while (1)
    {
      v17 = v15;
      v15 = (_QWORD *)v15[1];
      v18 = v13 - 3;
      if (!v13)
        v18 = 0;
      if (v15 == v18 + 5)
      {
        v31 = (_QWORD *)v13[1];
        v13 = v799;
        if (v31 != v799)
        {
          while (1)
          {
            v32 = v31 - 3;
            if (!v31)
              v32 = 0;
            v15 = (_QWORD *)v32[6];
            if (v15 != v32 + 5)
              break;
            v31 = (_QWORD *)v31[1];
            if (v31 == v799)
            {
              v13 = v799;
              goto LABEL_20;
            }
          }
          v13 = v31;
        }
      }
LABEL_20:
      v19 = v17 - 3;
      if (v17)
        v20 = (uint64_t)(v17 - 3);
      else
        v20 = 0;
      v21 = *(unsigned __int8 *)(v20 + 16);
      if (v21 == 84)
        v22 = v20;
      else
        v22 = 0;
      if (v17 && v21 == 84)
      {
        if (*(_BYTE *)(**(_QWORD **)(*(_QWORD *)(v22 + 72) + 16) + 8) != 7)
        {
          sub_1C5062CEC(v22, 6, (uint64_t)v842);
          if (v842[24])
          {
            v23 = *(uint64_t **)(v798 + 192);
            if (v15)
              v24 = (uint64_t)(v15 - 3);
            else
              v24 = 0;
            memset(v842, 0, 20);
            llvm::objcarc::BundledRetainClaimRVs::insertRVCallWithColors(v23, v24, (unsigned __int8 *)v22, (uint64_t)v842);
            sub_1C4EF1108((uint64_t *)v842);
            *(_BYTE *)v798 = 1;
          }
        }
        v21 = *(unsigned __int8 *)(v20 + 16);
      }
      if (!v17)
        goto LABEL_1274;
      if (v21 != 84)
        goto LABEL_1274;
      v25 = *(_QWORD *)(v20 - 32);
      if (!v25 || *(_BYTE *)(v25 + 16) || *(_QWORD *)(v25 + 24) != *(_QWORD *)(v20 + 72))
        goto LABEL_1274;
      FunctionClass = llvm::objcarc::GetFunctionClass((llvm::objcarc *)v25, v6);
      v34 = FunctionClass;
      if (FunctionClass > 0x18)
        goto LABEL_68;
      if (((1 << FunctionClass) & 0x1A00000) == 0)
      {
        v4 = v798;
        if (((1 << FunctionClass) & 6) != 0)
        {
          if (!v16)
          {
            v35 = 0;
            goto LABEL_70;
          }
          v37 = *(uint64_t **)(v798 + 192);
          *(_QWORD *)v842 = v20;
          v854 = 0;
          v38 = sub_1C61252B8(v37, v842, &v854);
          v36 = 0;
          v35 = 0;
          if ((v38 & 1) != 0)
            goto LABEL_69;
          v35 = sub_1C61AB204(*(llvm::Value **)(v20 - 32 * (*(_DWORD *)(v20 + 20) & 0x7FFFFFF)));
          v782 = sub_1C61AB204((llvm::Value *)v16[-4 * (*((_DWORD *)v16 + 5) & 0x7FFFFFF)]);
          if (v35 != v782)
          {
            if (!v35)
              goto LABEL_119;
            if (*((_BYTE *)v35 + 16) != 83)
              goto LABEL_119;
            *(_QWORD *)v842 = &v842[16];
            *(_QWORD *)&v842[8] = 0x400000000;
            if (*(_QWORD *)(*((_QWORD *)v35 + 5) + 40) == *((_QWORD *)v35 + 5) + 40)
              goto LABEL_119;
            v39 = *(_QWORD *)(*((_QWORD *)v35 + 5) + 48);
            v40 = (llvm::Value *)(v39 - 24);
            if (!v39 || *(_BYTE *)(v39 - 8) != 83)
              goto LABEL_119;
            do
            {
              if (v40 != v35)
              {
                v784 = *((_DWORD *)v35 + 5) & 0x7FFFFFF;
                v790 = v40;
                if ((_DWORD)v784)
                {
                  v41 = 0;
                  while (1)
                  {
                    v42 = *((_DWORD *)v35 + 5);
                    v43 = (v42 & 0x40000000) != 0
                        ? (llvm::Value *)*((_QWORD *)v35 - 1)
                        : (llvm::Value *)((char *)v35 - 32 * (v42 & 0x7FFFFFF));
                    v44 = *((_QWORD *)v43 + 4 * *((unsigned int *)v35 + 15) + v41);
                    v45 = llvm::Value::stripPointerCasts(*((llvm::Value **)v43 + 4 * v41));
                    v46 = *((_DWORD *)v790 + 5);
                    v47 = v46 & 0x7FFFFFF;
                    if ((v46 & 0x7FFFFFF) != 0)
                    {
                      v48 = 0;
                      while (1)
                      {
                        v49 = (char *)v790 - 32 * v47;
                        if ((v46 & 0x40000000) != 0)
                          v49 = (char *)*((_QWORD *)v790 - 1);
                        if (*(_QWORD *)&v49[32 * *((unsigned int *)v790 + 15) + 8 * v48] == v44)
                          break;
                        if (v47 == ++v48)
                          goto LABEL_92;
                      }
                    }
                    else
                    {
LABEL_92:
                      LODWORD(v48) = -1;
                    }
                    v50 = (v46 & 0x40000000) != 0
                        ? (llvm::Value *)*((_QWORD *)v790 - 1)
                        : (llvm::Value *)((char *)v790 - 32 * v47);
                    if (v45 != llvm::Value::stripPointerCasts(*((llvm::Value **)v50 + 4 * v48)))
                      break;
                    ++v41;
                    v40 = v790;
                    if (v41 == v784)
                      goto LABEL_102;
                  }
                  v40 = v790;
                }
                else
                {
                  LODWORD(v41) = 0;
                }
                if ((_DWORD)v41 == (_DWORD)v784)
                {
LABEL_102:
                  v51 = *(unsigned int *)&v842[8];
                  if (*(unsigned int *)&v842[8] >= (unint64_t)*(unsigned int *)&v842[12])
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v842, (uint64_t)&v842[16], *(unsigned int *)&v842[8] + 1, 8);
                    v40 = v790;
                    v51 = *(unsigned int *)&v842[8];
                  }
                  *(_QWORD *)(*(_QWORD *)v842 + 8 * v51) = v40;
                  ++*(_DWORD *)&v842[8];
                }
              }
              v52 = *((_QWORD *)v40 + 4);
              v40 = (llvm::Value *)(v52 - 24);
              if (v52)
                v53 = v52 - 24;
              else
                v53 = 0;
            }
            while (v52 && *(_BYTE *)(v53 + 16) == 83);
            v54 = *(unsigned int *)&v842[8];
            if (*(_DWORD *)&v842[8])
            {
              v55 = 8 * *(unsigned int *)&v842[8];
              v56 = *(llvm::Value ***)v842;
              while (*v56 != v782)
              {
                ++v56;
                v55 -= 8;
                if (!v55)
                {
                  v56 = (llvm::Value **)(*(_QWORD *)v842 + 8 * *(unsigned int *)&v842[8]);
                  break;
                }
              }
            }
            else
            {
              v54 = 0;
              v56 = *(llvm::Value ***)v842;
            }
            v57 = ((uint64_t)v56 - *(_QWORD *)v842) >> 3;
            if (*(_BYTE **)v842 != &v842[16])
              free(*(void **)v842);
            if (v57 == v54)
            {
LABEL_119:
              v4 = v798;
              v36 = v782;
LABEL_69:
              sub_1C598A6D0(v4, (const llvm::Function *)&v832, v16, 6, v36);
LABEL_70:
              v27 = v4;
              v28 = (uint64_t *)v20;
              v29 = v34;
LABEL_71:
              v30 = v35;
LABEL_50:
              sub_1C598A6D0(v27, (const llvm::Function *)&v832, v28, v29, v30);
              v16 = 0;
              goto LABEL_51;
            }
          }
          llvm::Value::doRAUW((llvm::ValueAsMetadata *)v16, (llvm::Value *)v16[-4 * (*((_DWORD *)v16 + 5) & 0x7FFFFFF)], (llvm::Value *)1);
          *(_BYTE *)v798 = 1;
          v58 = v16[-4 * (*((_DWORD *)v16 + 5) & 0x7FFFFFF)];
          if (v16[1])
          {
            llvm::Value::doRAUW((llvm::ValueAsMetadata *)v16, (llvm::Value *)v16[-4 * (*((_DWORD *)v16 + 5) & 0x7FFFFFF)], (llvm::Value *)1);
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(v16[5] + 40, (uint64_t ***)v16);
            v59 = v16[3];
            v60 = (_QWORD *)v16[4];
            *v60 = v59;
            *(_QWORD *)(v59 + 8) = v60;
            v16[3] = 0;
            v16[4] = 0;
            llvm::Value::deleteValue((llvm::Value *)v16);
            goto LABEL_127;
          }
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(v16[5] + 40, (uint64_t ***)v16);
          v61 = v16[3];
          v62 = (_QWORD *)v16[4];
          *v62 = v61;
          *(_QWORD *)(v61 + 8) = v62;
          v16[3] = 0;
          v16[4] = 0;
          llvm::Value::deleteValue((llvm::Value *)v16);
          *(_QWORD *)&v842[24] = 0;
          llvm::RecursivelyDeleteTriviallyDeadInstructions(v58, 0, 0, v842);
          if (*(_BYTE **)&v842[24] == v842)
          {
            v63 = *(void (**)(void))(*(_QWORD *)v842 + 32);
LABEL_126:
            v63();
          }
          else if (*(_QWORD *)&v842[24])
          {
            v63 = *(void (**)(void))(**(_QWORD **)&v842[24] + 40);
            goto LABEL_126;
          }
LABEL_127:
          if (v34 != 1)
          {
            v854 = 0;
            v854 = *(llvm::Value **)(v20 - 32 * (*(_DWORD *)(v20 + 20) & 0x7FFFFFF));
            Declaration = *(_QWORD *)(v798 + 80);
            if (Declaration
              || (Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t **)(v798 + 64), 221, 0, 0),
                  (*(_QWORD *)(v798 + 80) = Declaration) != 0))
            {
              v783 = *(llvm::SmallPtrSetImplBase **)(Declaration + 24);
            }
            else
            {
              v783 = 0;
            }
            LOWORD(v843[0]) = 257;
            v68 = (char *)operator new(0x90uLL);
            *((_DWORD *)v68 + 21) = *((_DWORD *)v68 + 21) & 0x38000000 | 2;
            *(_QWORD *)v68 = 0;
            *((_QWORD *)v68 + 1) = 0;
            *((_QWORD *)v68 + 2) = 0;
            *((_QWORD *)v68 + 3) = v68 + 64;
            *((_QWORD *)v68 + 4) = 0;
            v785 = (uint64_t *)(v68 + 32);
            v791 = (llvm::Value *)(v68 + 64);
            *((_QWORD *)v68 + 5) = 0;
            *((_QWORD *)v68 + 6) = 0;
            *((_QWORD *)v68 + 7) = v68 + 64;
            *((_QWORD *)v68 + 8) = **((_QWORD **)v783 + 2);
            *((_QWORD *)v68 + 9) = 0;
            v68[80] = 84;
            v68[81] = 0;
            *((_WORD *)v68 + 41) = 0;
            *((_DWORD *)v68 + 21) = 2;
            *(_OWORD *)(v68 + 88) = 0u;
            v69 = v68 + 88;
            *(_OWORD *)(v68 + 104) = 0u;
            *((_DWORD *)v68 + 30) = 0;
            v70 = *(_QWORD *)(v20 + 40);
            *((_QWORD *)v68 + 13) = v70;
            *(_WORD *)(v70 + 18) &= ~0x8000u;
            if ((v68[87] & 0x10) != 0)
            {
              v85 = *(_QWORD *)(v70 + 56);
              if (v85)
              {
                v86 = *(llvm::ValueSymbolTable **)(v85 + 104);
                if (v86)
                  llvm::ValueSymbolTable::reinsertValue(v86, v791);
              }
            }
            v71 = (_QWORD *)(v20 + 24);
            v72 = *(_QWORD *)(v20 + 24);
            *((_QWORD *)v68 + 11) = v72;
            *((_QWORD *)v68 + 12) = v20 + 24;
            *(_QWORD *)(v72 + 8) = v69;
            *(_QWORD *)(v20 + 24) = v69;
            *((_QWORD *)v68 + 16) = 0;
            *((_QWORD *)v68 + 17) = v783;
            sub_1C5382FD4((uint64_t)&v849, (uint64_t *)&v854, (uint64_t *)&v855, (uint64_t)v791 - 32 * (*((_DWORD *)v68 + 21) & 0x7FFFFFF));
            if (*((_QWORD *)v68 + 4))
            {
              **((_QWORD **)v68 + 6) = *((_QWORD *)v68 + 5);
              v87 = *((_QWORD *)v68 + 5);
              if (v87)
                *(_QWORD *)(v87 + 16) = *((_QWORD *)v68 + 6);
            }
            *v785 = Declaration;
            if (Declaration)
            {
              v75 = *(_QWORD *)(Declaration + 8);
              v74 = (uint64_t **)(Declaration + 8);
              v73 = v75;
              *((_QWORD *)v68 + 5) = v75;
              if (v75)
                *(_QWORD *)(v73 + 16) = v68 + 40;
              *((_QWORD *)v68 + 6) = v74;
              *v74 = v785;
            }
            llvm::CallBase::populateBundleOperandInfos((uint64_t)v791, 0, 0, 1u);
            llvm::Value::setName((uint64_t ***)v791, (uint64_t)v842);
            *((_WORD *)v68 + 41) = *((_WORD *)v68 + 41) & 0xFFFC | 1;
            llvm::Value::doRAUW((llvm::ValueAsMetadata *)v20, v854, (llvm::Value *)1);
            v76 = *(_QWORD *)(v20 - 32 * (*(_DWORD *)(v20 + 20) & 0x7FFFFFF));
            if (*(_QWORD *)(v20 + 8))
            {
              llvm::Value::doRAUW((llvm::ValueAsMetadata *)v20, *(llvm::Value **)(v20 - 32 * (*(_DWORD *)(v20 + 20) & 0x7FFFFFF)), (llvm::Value *)1);
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v20 + 40) + 40, (uint64_t ***)v20);
              v77 = *(_QWORD *)(v20 + 24);
              v78 = *(_QWORD **)(v20 + 32);
              *v78 = v77;
              *(_QWORD *)(v77 + 8) = v78;
              *v71 = 0;
              *(_QWORD *)(v20 + 32) = 0;
              llvm::Value::deleteValue((llvm::Value *)v20);
LABEL_153:
              v28 = (uint64_t *)(v68 + 64);
              v4 = v798;
              v27 = v798;
              v29 = 4;
              goto LABEL_71;
            }
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v20 + 40) + 40, (uint64_t ***)v20);
            v82 = *(_QWORD *)(v20 + 24);
            v83 = *(_QWORD **)(v20 + 32);
            *v83 = v82;
            *(_QWORD *)(v82 + 8) = v83;
            *v71 = 0;
            *(_QWORD *)(v20 + 32) = 0;
            llvm::Value::deleteValue((llvm::Value *)v20);
            *(_QWORD *)&v842[24] = 0;
            llvm::RecursivelyDeleteTriviallyDeadInstructions(v76, 0, 0, v842);
            if (*(_BYTE **)&v842[24] == v842)
            {
              v84 = *(void (**)(void))(*(_QWORD *)v842 + 32);
            }
            else
            {
              if (!*(_QWORD *)&v842[24])
                goto LABEL_153;
              v84 = *(void (**)(void))(**(_QWORD **)&v842[24] + 40);
            }
            v84();
            goto LABEL_153;
          }
          llvm::Value::doRAUW((llvm::ValueAsMetadata *)v20, *(llvm::Value **)(v20 - 32 * (*(_DWORD *)(v20 + 20) & 0x7FFFFFF)), (llvm::Value *)1);
          v64 = *(_QWORD *)(v20 - 32 * (*(_DWORD *)(v20 + 20) & 0x7FFFFFF));
          if (*(_QWORD *)(v20 + 8))
          {
            llvm::Value::doRAUW((llvm::ValueAsMetadata *)v20, *(llvm::Value **)(v20 - 32 * (*(_DWORD *)(v20 + 20) & 0x7FFFFFF)), (llvm::Value *)1);
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v20 + 40) + 40, (uint64_t ***)v20);
            v65 = *(_QWORD *)(v20 + 24);
            v66 = *(_QWORD **)(v20 + 32);
            *v66 = v65;
            *(_QWORD *)(v65 + 8) = v66;
            *(_QWORD *)(v20 + 24) = 0;
            *(_QWORD *)(v20 + 32) = 0;
            llvm::Value::deleteValue((llvm::Value *)v20);
LABEL_150:
            v16 = 0;
            goto LABEL_48;
          }
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v20 + 40) + 40, (uint64_t ***)v20);
          v79 = *(_QWORD *)(v20 + 24);
          v80 = *(_QWORD **)(v20 + 32);
          *v80 = v79;
          *(_QWORD *)(v79 + 8) = v80;
          *(_QWORD *)(v20 + 24) = 0;
          *(_QWORD *)(v20 + 32) = 0;
          llvm::Value::deleteValue((llvm::Value *)v20);
          *(_QWORD *)&v842[24] = 0;
          llvm::RecursivelyDeleteTriviallyDeadInstructions(v64, 0, 0, v842);
          if (*(_BYTE **)&v842[24] == v842)
          {
            v81 = *(void (**)(void))(*(_QWORD *)v842 + 32);
          }
          else
          {
            if (!*(_QWORD *)&v842[24])
              goto LABEL_150;
            v81 = *(void (**)(void))(**(_QWORD **)&v842[24] + 40);
          }
          v81();
          goto LABEL_150;
        }
        if (FunctionClass != 6)
        {
LABEL_68:
          v36 = 0;
          v35 = 0;
          v4 = v798;
          if (v16)
            goto LABEL_69;
          goto LABEL_70;
        }
        if (v16)
        {
          v4 = v798;
          sub_1C598A6D0(v798, (const llvm::Function *)&v832, v16, 6, 0);
          v16 = v19;
          goto LABEL_51;
        }
        v16 = v19;
      }
      else
      {
LABEL_1274:
        if (v16)
        {
          if ((v21 - 29) < 0xB
            || (v21 - 33) <= 0x33
            && ((1 << (v21 - 33)) & 0x8000000000041) != 0
            && ((v26 = *(v17 - 7)) == 0
             || *(_BYTE *)(v26 + 16)
             || *(_QWORD *)(v26 + 24) != v17[6]
             || !*(_DWORD *)(v26 + 36)))
          {
            v4 = v798;
            v27 = v798;
            v28 = v16;
            v29 = 6;
            v30 = 0;
            goto LABEL_50;
          }
        }
      }
LABEL_48:
      v4 = v798;
LABEL_51:
      if (v13 == v799)
      {
        if (v16)
          sub_1C598A6D0(v4, (const llvm::Function *)&v832, v16, 6, 0);
        break;
      }
    }
  }
LABEL_161:
  sub_1C4EF1108((uint64_t *)&v832);
  if ((*(_DWORD *)(v4 + 204) & 0x7F000) != 0)
  {
    v89 = *(_QWORD **)(a2 + 80);
    if (v89 != v799)
    {
      v90 = v89 - 3;
      if (!v89)
        v90 = 0;
      v91 = (_QWORD *)v90[6];
      if (v91 != v90 + 5)
      {
        v92 = *(_QWORD **)(a2 + 80);
        goto LABEL_172;
      }
      v92 = *(_QWORD **)(a2 + 80);
      while (1)
      {
        v92 = (_QWORD *)v92[1];
        if (v92 == v799)
          break;
        v93 = v92 - 3;
        if (!v92)
          v93 = 0;
        v91 = (_QWORD *)v93[6];
        if (v91 != v93 + 5)
        {
          do
          {
LABEL_172:
            v94 = v91;
            v91 = (_QWORD *)v91[1];
            v95 = v92 - 3;
            if (!v92)
              v95 = 0;
            if (v91 == v95 + 5)
            {
              v98 = (_QWORD *)v92[1];
              v92 = v799;
              if (v98 != v799)
              {
                while (1)
                {
                  v99 = v98 - 3;
                  if (!v98)
                    v99 = 0;
                  v91 = (_QWORD *)v99[6];
                  if (v91 != v99 + 5)
                    break;
                  v98 = (_QWORD *)v98[1];
                  if (v98 == v799)
                  {
                    v92 = v799;
                    goto LABEL_175;
                  }
                }
                v92 = v98;
              }
            }
LABEL_175:
            if (v94)
              v96 = v94 - 3;
            else
              v96 = 0;
            if (v94)
            {
              if (*((_BYTE *)v96 + 16) == 84)
              {
                v97 = *(v96 - 4);
                if (v97)
                {
                  if (!*(_BYTE *)(v97 + 16) && *(_QWORD *)(v97 + 24) == v96[9])
                  {
                    v100 = llvm::objcarc::GetFunctionClass((llvm::objcarc *)v97, v88);
                    v101 = v100;
                    if (v100 == 15)
                    {
                      v102 = v92;
                      v103 = (_QWORD **)v91;
                      if (v96[1])
                      {
LABEL_200:
                        while (1)
                        {
                          if (v102 != v799)
                          {
                            v107 = v102 - 3;
                            if (!v102)
                              v107 = 0;
                            v108 = (_QWORD **)v107[6];
                            if (v103 != v108)
                              break;
                          }
                          v102 = (_QWORD *)*v102;
                          v106 = v102 - 3;
                          if (!v102)
                            v106 = 0;
                          v103 = (_QWORD **)(v106 + 5);
                        }
                        for (i = *v103; ; i = (_QWORD *)*i)
                        {
                          if (i == v108)
                            goto LABEL_183;
                          v110 = *i ? (llvm::objcarc *)(*i - 24) : 0;
                          ARCInstKind = llvm::objcarc::GetARCInstKind(v110, v88);
                          if (ARCInstKind > 0x18)
                            goto LABEL_183;
                          v112 = 1 << ARCInstKind;
                          if (((1 << ARCInstKind) & 0x1900080) == 0)
                          {
                            if ((v112 & 0x6000) != 0)
                            {
                              v116 = (void *)*((_QWORD *)v110 - 4 * (*((_DWORD *)v110 + 5) & 0x7FFFFFF));
                              v117 = *(_QWORD *)v775;
                              *(_QWORD *)v842 = v96[-4 * (*((_DWORD *)v96 + 5) & 0x7FFFFFF)];
                              *(_QWORD *)&v842[8] = -1;
                              *(_OWORD *)&v842[16] = 0u;
                              *(_OWORD *)v843 = 0u;
                              v832 = v116;
                              v833 = (llvm::MDNode *)-1;
                              v834 = 0u;
                              v835 = 0u;
                              v118 = llvm::AAResults::alias(v117, (uint64_t)v842, (uint64_t)&v832);
                              if ((v118 - 1) < 2)
                                goto LABEL_183;
                              if (v118 == 3)
                              {
                                *(_BYTE *)v798 = 1;
                                if (v101 == 12)
                                {
                                  v131 = *(_QWORD *)(v798 + 88);
                                  if (v131
                                    || (v131 = llvm::Intrinsic::getDeclaration(*(uint64_t **)(v798 + 64), 222, 0, 0),
                                        (*(_QWORD *)(v798 + 88) = v131) != 0))
                                  {
                                    v803 = v131;
                                    v132 = *(llvm::Value **)(v131 + 24);
                                  }
                                  else
                                  {
                                    v803 = 0;
                                    v132 = 0;
                                  }
                                  v832 = v110;
                                  LOWORD(v843[0]) = 257;
                                  v133 = (char *)operator new(0x90uLL);
                                  v134 = (llvm::Value *)(v133 + 64);
                                  *((_DWORD *)v133 + 21) = *((_DWORD *)v133 + 21) & 0x38000000 | 2;
                                  *(_QWORD *)v133 = 0;
                                  *((_QWORD *)v133 + 1) = 0;
                                  *((_QWORD *)v133 + 2) = 0;
                                  *((_QWORD *)v133 + 3) = v133 + 64;
                                  *((_QWORD *)v133 + 4) = 0;
                                  v801 = (uint64_t *)(v133 + 32);
                                  *((_QWORD *)v133 + 5) = 0;
                                  *((_QWORD *)v133 + 6) = 0;
                                  *((_QWORD *)v133 + 7) = v133 + 64;
                                  *((_QWORD *)v133 + 8) = **((_QWORD **)v132 + 2);
                                  *((_QWORD *)v133 + 9) = 0;
                                  v133[80] = 84;
                                  v133[81] = 0;
                                  *((_WORD *)v133 + 41) = 0;
                                  *((_DWORD *)v133 + 21) = 2;
                                  v135 = v132;
                                  *(_OWORD *)(v133 + 88) = 0u;
                                  v136 = v133 + 88;
                                  *(_OWORD *)(v133 + 104) = 0u;
                                  *((_DWORD *)v133 + 30) = 0;
                                  v137 = v96[5];
                                  *((_QWORD *)v133 + 13) = v137;
                                  *(_WORD *)(v137 + 18) &= ~0x8000u;
                                  if ((v133[87] & 0x10) != 0)
                                  {
                                    v145 = *(_QWORD *)(v137 + 56);
                                    if (v145)
                                    {
                                      v146 = *(llvm::ValueSymbolTable **)(v145 + 104);
                                      if (v146)
                                      {
                                        v793 = v135;
                                        llvm::ValueSymbolTable::reinsertValue(v146, v134);
                                        v135 = v793;
                                      }
                                    }
                                  }
                                  v138 = v96[3];
                                  *((_QWORD *)v133 + 11) = v138;
                                  *((_QWORD *)v133 + 12) = v96 + 3;
                                  *(_QWORD *)(v138 + 8) = v136;
                                  v96[3] = v136;
                                  *((_QWORD *)v133 + 16) = 0;
                                  *((_QWORD *)v133 + 17) = v135;
                                  sub_1C5382FD4((uint64_t)&v854, (uint64_t *)&v832, (uint64_t *)&v833, (uint64_t)v134 - 32 * (*((_DWORD *)v133 + 21) & 0x7FFFFFF));
                                  if (*((_QWORD *)v133 + 4))
                                  {
                                    **((_QWORD **)v133 + 6) = *((_QWORD *)v133 + 5);
                                    v148 = *((_QWORD *)v133 + 5);
                                    if (v148)
                                      *(_QWORD *)(v148 + 16) = *((_QWORD *)v133 + 6);
                                  }
                                  *v801 = v803;
                                  if (v803)
                                  {
                                    v140 = (uint64_t **)(v803 + 8);
                                    v139 = *(_QWORD *)(v803 + 8);
                                    *((_QWORD *)v133 + 5) = v139;
                                    if (v139)
                                      *(_QWORD *)(v139 + 16) = v133 + 40;
                                    *((_QWORD *)v133 + 6) = v140;
                                    *v140 = v801;
                                  }
                                  llvm::CallBase::populateBundleOperandInfos((uint64_t)v134, 0, 0, 1u);
                                  llvm::Value::setName((uint64_t ***)v134, (uint64_t)v842);
                                  *((_WORD *)v133 + 41) = *((_WORD *)v133 + 41) & 0xFFFC | 1;
                                }
                                v130 = (llvm::Value *)((_QWORD *)v110 - 4 * (*((_DWORD *)v110 + 5) & 0x7FFFFFF))[4];
                                v129 = (llvm::ValueAsMetadata *)v96;
                                goto LABEL_243;
                              }
                            }
                            else
                            {
                              if ((v112 & 0x9000) == 0)
                                goto LABEL_183;
                              v113 = (void *)*((_QWORD *)v110 - 4 * (*((_DWORD *)v110 + 5) & 0x7FFFFFF));
                              v114 = *(_QWORD *)v775;
                              *(_QWORD *)v842 = v96[-4 * (*((_DWORD *)v96 + 5) & 0x7FFFFFF)];
                              *(_QWORD *)&v842[8] = -1;
                              *(_OWORD *)&v842[16] = 0u;
                              *(_OWORD *)v843 = 0u;
                              v832 = v113;
                              v833 = (llvm::MDNode *)-1;
                              v834 = 0u;
                              v835 = 0u;
                              v115 = llvm::AAResults::alias(v114, (uint64_t)v842, (uint64_t)&v832);
                              if ((v115 - 1) < 2)
                                goto LABEL_183;
                              if (v115 == 3)
                              {
                                *(_BYTE *)v798 = 1;
                                if (v101 == 12)
                                {
                                  v119 = *(_QWORD *)(v798 + 88);
                                  if (v119
                                    || (v119 = llvm::Intrinsic::getDeclaration(*(uint64_t **)(v798 + 64), 222, 0, 0),
                                        (*(_QWORD *)(v798 + 88) = v119) != 0))
                                  {
                                    v802 = v119;
                                    v120 = *(llvm::Value **)(v119 + 24);
                                  }
                                  else
                                  {
                                    v802 = 0;
                                    v120 = 0;
                                  }
                                  v832 = v110;
                                  LOWORD(v843[0]) = 257;
                                  v121 = (char *)operator new(0x90uLL);
                                  v122 = (llvm::Value *)(v121 + 64);
                                  *((_DWORD *)v121 + 21) = *((_DWORD *)v121 + 21) & 0x38000000 | 2;
                                  *(_QWORD *)v121 = 0;
                                  *((_QWORD *)v121 + 1) = 0;
                                  *((_QWORD *)v121 + 2) = 0;
                                  *((_QWORD *)v121 + 3) = v121 + 64;
                                  *((_QWORD *)v121 + 4) = 0;
                                  v800 = (uint64_t *)(v121 + 32);
                                  *((_QWORD *)v121 + 5) = 0;
                                  *((_QWORD *)v121 + 6) = 0;
                                  *((_QWORD *)v121 + 7) = v121 + 64;
                                  *((_QWORD *)v121 + 8) = **((_QWORD **)v120 + 2);
                                  *((_QWORD *)v121 + 9) = 0;
                                  v121[80] = 84;
                                  v121[81] = 0;
                                  *((_WORD *)v121 + 41) = 0;
                                  *((_DWORD *)v121 + 21) = 2;
                                  v123 = v120;
                                  *(_OWORD *)(v121 + 88) = 0u;
                                  v124 = v121 + 88;
                                  *(_OWORD *)(v121 + 104) = 0u;
                                  *((_DWORD *)v121 + 30) = 0;
                                  v125 = v96[5];
                                  *((_QWORD *)v121 + 13) = v125;
                                  *(_WORD *)(v125 + 18) &= ~0x8000u;
                                  if ((v121[87] & 0x10) != 0)
                                  {
                                    v143 = *(_QWORD *)(v125 + 56);
                                    if (v143)
                                    {
                                      v144 = *(llvm::ValueSymbolTable **)(v143 + 104);
                                      if (v144)
                                      {
                                        v792 = v123;
                                        llvm::ValueSymbolTable::reinsertValue(v144, v122);
                                        v123 = v792;
                                      }
                                    }
                                  }
                                  v126 = v96[3];
                                  *((_QWORD *)v121 + 11) = v126;
                                  *((_QWORD *)v121 + 12) = v96 + 3;
                                  *(_QWORD *)(v126 + 8) = v124;
                                  v96[3] = v124;
                                  *((_QWORD *)v121 + 16) = 0;
                                  *((_QWORD *)v121 + 17) = v123;
                                  sub_1C5382FD4((uint64_t)&v854, (uint64_t *)&v832, (uint64_t *)&v833, (uint64_t)v122 - 32 * (*((_DWORD *)v121 + 21) & 0x7FFFFFF));
                                  if (*((_QWORD *)v121 + 4))
                                  {
                                    **((_QWORD **)v121 + 6) = *((_QWORD *)v121 + 5);
                                    v147 = *((_QWORD *)v121 + 5);
                                    if (v147)
                                      *(_QWORD *)(v147 + 16) = *((_QWORD *)v121 + 6);
                                  }
                                  *v800 = v802;
                                  if (v802)
                                  {
                                    v128 = (uint64_t **)(v802 + 8);
                                    v127 = *(_QWORD *)(v802 + 8);
                                    *((_QWORD *)v121 + 5) = v127;
                                    if (v127)
                                      *(_QWORD *)(v127 + 16) = v121 + 40;
                                    *((_QWORD *)v121 + 6) = v128;
                                    *v128 = v800;
                                  }
                                  llvm::CallBase::populateBundleOperandInfos((uint64_t)v122, 0, 0, 1u);
                                  llvm::Value::setName((uint64_t ***)v122, (uint64_t)v842);
                                  *((_WORD *)v121 + 41) = *((_WORD *)v121 + 41) & 0xFFFC | 1;
                                }
                                v129 = (llvm::ValueAsMetadata *)v96;
                                v130 = v110;
LABEL_243:
                                llvm::Value::doRAUW(v129, v130, (llvm::Value *)1);
                                llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(v96[5] + 40, (uint64_t ***)v96);
                                v141 = v96[3];
                                v142 = (_QWORD *)v96[4];
                                *v142 = v141;
                                *(_QWORD *)(v141 + 8) = v142;
                                v96[3] = 0;
                                v96[4] = 0;
                                llvm::Value::deleteValue((llvm::Value *)v96);
                                goto LABEL_183;
                              }
                            }
                          }
                        }
                      }
                      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(v96[5] + 40, (uint64_t ***)v96);
                      v104 = v96[3];
                      v105 = (_QWORD *)v96[4];
                      *v105 = v104;
                      *(_QWORD *)(v104 + 8) = v105;
                      v96[3] = 0;
                      v96[4] = 0;
                      llvm::Value::deleteValue((llvm::Value *)v96);
                      *(_BYTE *)v798 = 1;
                    }
                    else
                    {
                      v102 = v92;
                      v103 = (_QWORD **)v91;
                      if (v100 == 12)
                        goto LABEL_200;
                    }
                  }
                }
              }
            }
LABEL_183:
            ;
          }
          while (v92 != v799);
          v89 = *(_QWORD **)(a2 + 80);
          v4 = v798;
          break;
        }
      }
      while (v89 != v799)
      {
        v149 = v89 - 3;
        if (!v89)
          v149 = 0;
        v150 = (_QWORD *)v149[6];
        if (v150 != v149 + 5)
        {
          while (1)
          {
            v151 = v150;
            v150 = (_QWORD *)v150[1];
            v152 = v89 - 3;
            if (!v89)
              v152 = 0;
            if (v150 == v152 + 5)
            {
              v155 = (_QWORD *)v89[1];
              v89 = v799;
              if (v155 != v799)
              {
                while (1)
                {
                  v156 = v155 - 3;
                  if (!v155)
                    v156 = 0;
                  v150 = (_QWORD *)v156[6];
                  if (v150 != v156 + 5)
                    break;
                  v155 = (_QWORD *)v155[1];
                  if (v155 == v799)
                  {
                    v89 = v799;
                    goto LABEL_264;
                  }
                }
                v89 = v155;
              }
            }
LABEL_264:
            if (v151)
              v153 = v151 - 3;
            else
              v153 = 0;
            if (v151)
            {
              if (*((_BYTE *)v153 + 16) == 84)
              {
                v154 = *(v153 - 4);
                if (v154)
                {
                  if (!*(_BYTE *)(v154 + 16)
                    && *(_QWORD *)(v154 + 24) == v153[9]
                    && llvm::objcarc::GetFunctionClass((llvm::objcarc *)v154, v88) == 18)
                  {
                    v157 = v153[-4 * (*((_DWORD *)v153 + 5) & 0x7FFFFFF)];
                    if (v157)
                    {
                      if (*(_BYTE *)(v157 + 16) == 59)
                      {
                        v158 = *(_QWORD *)(v157 + 8);
                        v159 = v158;
                        if (v158)
                        {
                          do
                          {
                            v160 = *(_QWORD *)(v159 + 24);
                            if (!v160)
                              goto LABEL_272;
                            if (*(_BYTE *)(v160 + 16) != 84)
                              goto LABEL_272;
                            v161 = *(_QWORD *)(v160 - 32);
                            if (!v161 || *(_BYTE *)(v161 + 16) || *(_QWORD *)(v161 + 24) != *(_QWORD *)(v160 + 72))
                              goto LABEL_272;
                            v162 = llvm::objcarc::GetFunctionClass((llvm::objcarc *)v161, v88);
                            if (v162 > 0x12 || ((1 << v162) & 0x46000) == 0)
                              goto LABEL_272;
                            v159 = *(_QWORD *)(v159 + 8);
                          }
                          while (v159);
                          *(_BYTE *)v4 = 1;
                          while (2)
                          {
                            v164 = *(_QWORD *)(v158 + 24);
                            v158 = *(_QWORD *)(v158 + 8);
                            v165 = *(unsigned __int8 *)(v164 + 16);
                            if (v164 && v165 == 84)
                            {
                              v166 = *(_QWORD *)(v164 - 32);
                              if (v166 && !*(_BYTE *)(v166 + 16) && *(_QWORD *)(v166 + 24) == *(_QWORD *)(v164 + 72))
                              {
                                v167 = llvm::objcarc::GetFunctionClass((llvm::objcarc *)v166, v88);
LABEL_305:
                                if ((v167 - 13) <= 1)
                                  llvm::Value::doRAUW((llvm::ValueAsMetadata *)v164, *(llvm::Value **)(v164 - 32 * (*(_DWORD *)(v164 + 20) & 0x7FFFFFF) + 32), (llvm::Value *)1);
                              }
                              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v164 + 40) + 40, (uint64_t ***)v164);
                              v168 = *(_QWORD *)(v164 + 24);
                              v169 = *(_QWORD **)(v164 + 32);
                              *v169 = v168;
                              *(_QWORD *)(v168 + 8) = v169;
                              *(_QWORD *)(v164 + 24) = 0;
                              *(_QWORD *)(v164 + 32) = 0;
                              llvm::Value::deleteValue((llvm::Value *)v164);
                              if (!v158)
                                goto LABEL_310;
                              continue;
                            }
                            break;
                          }
                          if (v165 == 33)
                            v167 = 21;
                          else
                            v167 = 23;
                          goto LABEL_305;
                        }
                        *(_BYTE *)v4 = 1;
LABEL_310:
                        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v157 + 40) + 40, (uint64_t ***)v157);
                        v170 = *(_QWORD *)(v157 + 24);
                        v171 = *(_QWORD **)(v157 + 32);
                        *v171 = v170;
                        *(_QWORD *)(v170 + 8) = v171;
                        *(_QWORD *)(v157 + 24) = 0;
                        *(_QWORD *)(v157 + 32) = 0;
                        llvm::Value::deleteValue((llvm::Value *)v157);
                      }
                    }
                  }
                }
              }
            }
LABEL_272:
            if (v89 == v799)
              goto LABEL_311;
          }
        }
        v89 = (_QWORD *)v89[1];
      }
    }
  }
LABEL_311:
  v172 = *(_DWORD *)(v4 + 204);
  if ((v172 & 0xB) != 0 && (*(_DWORD *)(v4 + 204) & 0x10) != 0)
  {
    v759 = v4 + 160;
    while (1)
    {
      v821[0] = 0;
      v821[1] = 0;
      v822 = 0;
      v816[0] = 0;
      v816[1] = 0;
      v817 = 0;
      v819 = 0;
      v820 = 0;
      v818 = 0;
      v814[0] = 0;
      v814[1] = 0;
      v815 = 0;
      v829 = v831;
      v830 = 0x1000000000;
      v826 = v828;
      v827 = 0x1000000000;
      if (!*(_BYTE *)(v4 + 188))
      {
        MDKindID = llvm::LLVMContext::getMDKindID(**(uint64_t ***)(v4 + 160), "clang.arc.no_objc_arc_exceptions", 0x20uLL);
        v175 = *(unsigned __int8 *)(v4 + 188);
        *(_DWORD *)(v4 + 184) = MDKindID;
        if (!v175)
          *(_BYTE *)(v4 + 188) = 1;
      }
      v854 = (llvm::Value *)v858;
      v855 = v858;
      v856 = 16;
      v857 = 0;
      v849 = v853;
      v850 = v853;
      v851 = 16;
      v852 = 0;
      *(_QWORD *)v842 = &v842[16];
      *(_QWORD *)&v842[8] = 0x1000000000;
      v176 = *(_QWORD *)(a2 + 80);
      if (v176)
        v177 = (_QWORD *)(v176 - 24);
      else
        v177 = 0;
      v825 = v177;
      v178 = sub_1C598C098((uint64_t)v814, (uint64_t *)&v825);
      v179 = 0;
      *(_DWORD *)v178 = 1;
      v180 = (_QWORD *)v177[5];
      if (v180 != v177 + 5)
      {
        v179 = (unsigned __int8 *)(v180 - 3);
        if (!v180)
          v179 = 0;
        if (v179[16] - 29 >= 0xB)
          v179 = 0;
      }
      v832 = v177;
      v833 = (llvm::MDNode *)v179;
      LODWORD(v834) = 0;
      v181 = sub_1C4926708((uint64_t)v842, (unint64_t)&v832, 1);
      v182 = *(_QWORD *)v842 + 24 * *(unsigned int *)&v842[8];
      v183 = *(_OWORD *)v181;
      *(_QWORD *)(v182 + 16) = *(_QWORD *)(v181 + 16);
      *(_OWORD *)v182 = v183;
      ++*(_DWORD *)&v842[8];
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v854, (uint64_t)v177);
      v184 = (uint64_t)v177;
LABEL_328:
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v849, v184);
      do
      {
        v185 = *(_QWORD *)v842 + 24 * *(unsigned int *)&v842[8];
        v186 = *(_QWORD *)(v185 - 24);
        v824 = v186;
        v187 = *(_QWORD *)(v186 + 40);
        if (v187 == v186 + 40)
        {
LABEL_337:
          v189 = 0;
        }
        else
        {
          if (v187)
            v188 = v187 - 24;
          else
            v188 = 0;
          if (*(_BYTE *)(v188 + 16) != 30)
          {
            v189 = 0;
            switch(*(_BYTE *)(v188 + 16))
            {
              case 0x1D:
              case 0x22:
              case 0x23:
                goto LABEL_338;
              case 0x1E:
LABEL_1270:
                __break(1u);
                goto LABEL_1271;
              case 0x1F:
                v189 = (*(_DWORD *)(v188 + 20) >> 1) & 0x3FFFFFF;
                goto LABEL_338;
              case 0x20:
              case 0x26:
                v189 = (*(_DWORD *)(v188 + 20) & 0x7FFFFFF) - 1;
                goto LABEL_338;
              case 0x21:
                v189 = 2;
                goto LABEL_338;
              case 0x24:
                v189 = *(_WORD *)(v188 + 18) & 1;
                goto LABEL_338;
              case 0x25:
                v189 = 1;
                goto LABEL_338;
              case 0x27:
                v189 = *(_DWORD *)(v188 + 80) + 1;
                goto LABEL_338;
              default:
                goto LABEL_337;
            }
          }
          if ((*(_DWORD *)(v188 + 20) & 0x7FFFFFF) == 3)
            v189 = 2;
          else
            v189 = 1;
        }
LABEL_338:
        while (*(_DWORD *)(v185 - 8) != v189)
        {
          v190 = *(llvm::Instruction **)(v185 - 16);
          v191 = *(_DWORD *)(v185 - 8);
          *(_DWORD *)(v185 - 8) = v191 + 1;
          Successor = (_QWORD *)llvm::Instruction::getSuccessor(v190, v191);
          v823 = Successor;
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v854, (uint64_t)Successor);
          if (v193)
          {
            v205 = (_QWORD *)Successor[5];
            if (v205 == Successor + 5)
            {
              v206 = 0;
            }
            else
            {
              if (v205)
                v206 = (unsigned __int8 *)(v205 - 3);
              else
                v206 = 0;
              if (v206[16] - 29 >= 0xB)
                v206 = 0;
            }
            v832 = Successor;
            v833 = (llvm::MDNode *)v206;
            LODWORD(v834) = 0;
            v207 = sub_1C4926708((uint64_t)v842, (unint64_t)&v832, 1);
            v208 = *(_QWORD *)v842 + 24 * *(unsigned int *)&v842[8];
            v209 = *(_OWORD *)v207;
            *(_QWORD *)(v208 + 16) = *(_QWORD *)(v207 + 16);
            *(_OWORD *)v208 = v209;
            ++*(_DWORD *)&v842[8];
            v210 = sub_1C598C098((uint64_t)v814, &v824);
            v211 = v210;
            v212 = *((unsigned int *)v210 + 36);
            if (v212 >= *((unsigned int *)v210 + 37))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v210 + 17), (uint64_t)(v210 + 19), v212 + 1, 8);
              v212 = *((unsigned int *)v211 + 36);
            }
            *(_QWORD *)(v211[17] + 8 * v212) = Successor;
            ++*((_DWORD *)v211 + 36);
            v213 = sub_1C598C098((uint64_t)v814, (uint64_t *)&v823);
            v214 = v213;
            v215 = *((unsigned int *)v213 + 28);
            if (v215 >= *((unsigned int *)v213 + 29))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v213 + 13), (uint64_t)(v213 + 15), v215 + 1, 8);
              v215 = *((unsigned int *)v214 + 28);
            }
            *(_QWORD *)(v214[13] + 8 * v215) = v186;
            ++*((_DWORD *)v214 + 28);
            v184 = (uint64_t)Successor;
            goto LABEL_328;
          }
          v194 = sub_1C477672C((uint64_t)&v849, (uint64_t)Successor);
          if (v850 == v849)
            v195 = (uint64_t *)((char *)&v851 + 4);
          else
            v195 = &v851;
          if (v194 == (_QWORD *)((char *)v850 + 8 * *(unsigned int *)v195))
          {
            v196 = sub_1C598C098((uint64_t)v814, &v824);
            v197 = v196;
            v198 = *((unsigned int *)v196 + 36);
            if (v198 >= *((unsigned int *)v196 + 37))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v196 + 17), (uint64_t)(v196 + 19), v198 + 1, 8);
              v198 = *((unsigned int *)v197 + 36);
            }
            *(_QWORD *)(v197[17] + 8 * v198) = Successor;
            ++*((_DWORD *)v197 + 36);
            v199 = sub_1C598C098((uint64_t)v814, (uint64_t *)&v823);
            v200 = v199;
            v201 = *((unsigned int *)v199 + 28);
            if (v201 >= *((unsigned int *)v199 + 29))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v199 + 13), (uint64_t)(v199 + 15), v201 + 1, 8);
              v201 = *((unsigned int *)v200 + 28);
            }
            *(_QWORD *)(v200[13] + 8 * v201) = v186;
            ++*((_DWORD *)v200 + 28);
          }
          v185 = *(_QWORD *)v842 + 24 * *(unsigned int *)&v842[8];
        }
        v202 = sub_1C477672C((uint64_t)&v849, v186);
        if (v850 == v849)
          v203 = (uint64_t *)((char *)&v851 + 4);
        else
          v203 = &v851;
        if (v202 != (_QWORD *)((char *)v850 + 8 * *(unsigned int *)v203))
        {
          *v202 = -2;
          ++v852;
        }
        v204 = v830;
        if (v830 >= (unint64_t)HIDWORD(v830))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v829, (uint64_t)v831, v830 + 1, 8);
          v204 = v830;
        }
        *((_QWORD *)v829 + v204) = v186;
        LODWORD(v830) = v830 + 1;
        --*(_DWORD *)&v842[8];
      }
      while (*(_DWORD *)&v842[8]);
      if (v855 == v854)
        goto LABEL_381;
      if (v856 < 0x21 || 4 * (HIDWORD(v856) - v857) >= v856)
        break;
      free(v855);
      v704 = 1 << (33 - __clz(HIDWORD(v856) - v857 - 1));
      v518 = (HIDWORD(v856) - v857) > 0x10;
      v857 = 0;
      if (v518)
        v705 = v704;
      else
        v705 = 32;
      v856 = v705;
      v706 = malloc_type_malloc(8 * v705, 0x4065EBACuLL);
      if (!v706)
        goto LABEL_1271;
      v855 = v706;
      memset(v706, 255, 8 * v856);
LABEL_382:
      v832 = &v834;
      v833 = (llvm::MDNode *)0x1000000000;
      v216 = *(_QWORD **)(a2 + 80);
      if (v216 != v799)
      {
        do
        {
          if (v216)
            v217 = (uint64_t)(v216 - 3);
          else
            v217 = 0;
          v824 = v217;
          v218 = sub_1C598C098((uint64_t)v814, &v824);
          if (!*((_DWORD *)v218 + 36))
          {
            *((_DWORD *)v218 + 1) = 1;
            v219 = v218[13];
            v220 = v833;
            if (v833 >= (unint64_t)HIDWORD(v833))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v832, (uint64_t)&v834, v833 + 1, 16);
              v220 = v833;
            }
            v221 = (uint64_t *)((char *)v832 + 16 * v220);
            *v221 = v217;
            v221[1] = v219;
            LODWORD(v833) = (_DWORD)v833 + 1;
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v854, v217);
            for (j = v833; (_DWORD)v833; j = v833)
            {
              while (1)
              {
                v223 = sub_1C598C098((uint64_t)v814, (uint64_t *)v832 + 2 * j - 2);
                v224 = v223[13] + 8 * *((unsigned int *)v223 + 28);
                v225 = (int)v833;
                v226 = (char *)v832 + 16 * v833;
                v227 = v226 - 8;
                v228 = (uint64_t *)*((_QWORD *)v226 - 1);
                if (v228 == (uint64_t *)v224)
                  break;
                while (1)
                {
                  *(_QWORD *)v227 = v228 + 1;
                  v229 = *v228;
                  v824 = v229;
                  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v854, v229);
                  if (v230)
                    break;
                  v225 = (int)v833;
                  v226 = (char *)v832 + 16 * v833;
                  v227 = v226 - 8;
                  v228 = (uint64_t *)*((_QWORD *)v226 - 1);
                  if (v228 == (uint64_t *)v224)
                    goto LABEL_393;
                }
                v233 = sub_1C598C098((uint64_t)v814, &v824)[13];
                v234 = v833;
                if (v833 >= (unint64_t)HIDWORD(v833))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v832, (uint64_t)&v834, v833 + 1, 16);
                  v234 = v833;
                }
                v235 = (uint64_t *)((char *)v832 + 16 * v234);
                *v235 = v229;
                v235[1] = v233;
                j = (_DWORD)v833 + 1;
                LODWORD(v833) = (_DWORD)v833 + 1;
              }
LABEL_393:
              v231 = *((_QWORD *)v226 - 2);
              LODWORD(v833) = v225 - 1;
              v232 = v827;
              if (v827 >= (unint64_t)HIDWORD(v827))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v826, (uint64_t)v828, v827 + 1, 8);
                v232 = v827;
              }
              *((_QWORD *)v826 + v232) = v231;
              LODWORD(v827) = v827 + 1;
            }
          }
          v216 = (_QWORD *)v216[1];
        }
        while (v216 != v799);
        if (v832 != &v834)
          free(v832);
      }
      if (*(_BYTE **)v842 != &v842[16])
        free(*(void **)v842);
      if (v850 != v849)
        free(v850);
      if (v855 != v854)
        free(v855);
      v236 = 0;
      v237 = (char *)v826;
      v238 = (char *)v826 + 8 * v827;
      v769 = (char *)v826;
      while (v238 != v237)
      {
        v239 = (llvm::Value *)*((_QWORD *)v238 - 1);
        v804 = v238 - 8;
        v854 = v239;
        v240 = sub_1C598C098((uint64_t)v814, (uint64_t *)&v854);
        v241 = v240;
        v242 = *((unsigned int *)v240 + 36);
        if ((_DWORD)v242)
        {
          v254 = (uint64_t *)v240[17];
          v255 = *v254;
          *(_QWORD *)v842 = 0;
          v256 = v814[0];
          v257 = v815;
          v258 = sub_1C598C148(v814[0], v815, v255, v842);
          v259 = v256 + 176 * v257;
          v237 = v769;
          v260 = v258 ? *(_QWORD *)v842 : v259;
          v786 = (unsigned int *)(v241 + 7);
          sub_1C62C4A68((uint64_t)(v241 + 7), v260 + 64);
          *((_DWORD *)v241 + 1) = *(_DWORD *)(v260 + 12);
          if ((_DWORD)v242 != 1)
          {
            v776 = &v254[v242];
            v261 = v254 + 1;
            v772 = v236;
            while (2)
            {
              v262 = *v261;
              *(_QWORD *)v842 = 0;
              v263 = v814[0];
              v264 = v815;
              if (sub_1C598C148(v814[0], v815, v262, v842))
                v265 = *(_QWORD *)v842;
              else
                v265 = v263 + 176 * v264;
              v266 = *((_DWORD *)v241 + 1);
              if (v266 == -1)
                goto LABEL_551;
              v267 = *(_DWORD *)(v265 + 12) + v266;
              *((_DWORD *)v241 + 1) = v267;
              if (v267 == -1)
              {
                sub_1C61446F0(v786);
                v338 = v241[10];
                v337 = v241[11];
                if (v337 != v338)
                {
                  do
                  {
                    v339 = v337 - 136;
                    sub_1C62C4A24((_QWORD *)(v337 - 120));
                    v337 = v339;
                  }
                  while (v339 != v338);
LABEL_558:
                  v337 = v338;
                }
              }
              else
              {
                if (v267 >= *(_DWORD *)(v265 + 12))
                {
                  v269 = *(_QWORD *)(v265 + 88);
                  v268 = *(llvm::Value **)(v265 + 96);
                  for (k = v268; (llvm::Value *)v269 != v268; v269 += 136)
                  {
                    v832 = *(void **)v269;
                    v833 = 0;
                    sub_1C618F0E8((uint64_t)v842, (uint64_t)v786, (uint64_t *)&v832, (uint64_t *)&v833);
                    if (v842[16])
                    {
                      v270 = v241[10];
                      v271 = v241[11];
                      v272 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v271 - v270) >> 3);
                      *(_QWORD *)(*(_QWORD *)v842 + 8) = v272;
                      v273 = v241[12];
                      if (v271 >= v273)
                      {
                        if (v272 + 1 > 0x1E1E1E1E1E1E1E1)
                          goto LABEL_1268;
                        v304 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v273 - v270) >> 3);
                        v305 = 2 * v304;
                        if (2 * v304 <= v272 + 1)
                          v305 = v272 + 1;
                        if (v304 >= 0xF0F0F0F0F0F0F0)
                          v306 = 0x1E1E1E1E1E1E1E1;
                        else
                          v306 = v305;
                        if (v306)
                        {
                          if (v306 > 0x1E1E1E1E1E1E1E1)
                            goto LABEL_1269;
                          v307 = operator new(136 * v306);
                        }
                        else
                        {
                          v307 = 0;
                        }
                        v308 = &v307[136 * v272];
                        *(_QWORD *)v308 = *(_QWORD *)v269;
                        v309 = *(_WORD *)(v269 + 8);
                        v308[10] = *(_BYTE *)(v269 + 10);
                        *((_WORD *)v308 + 4) = v309;
                        *((_OWORD *)v308 + 1) = *(_OWORD *)(v269 + 16);
                        v310 = v308 + 64;
                        *((_QWORD *)v308 + 4) = v308 + 64;
                        v311 = *(const void **)(v269 + 40);
                        if (v311 == *(const void **)(v269 + 32))
                        {
                          *((_QWORD *)v308 + 5) = v310;
                          v312 = v311;
                        }
                        else
                        {
                          v333 = *(unsigned int *)(v269 + 48);
                          v310 = malloc_type_malloc(8 * v333, 0x4065EBACuLL);
                          if (!v310)
                          {
                            if ((_DWORD)v333)
                              goto LABEL_1271;
                            v310 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
                            if (!v310)
                              goto LABEL_1271;
                          }
                          *((_QWORD *)v308 + 5) = v310;
                          v312 = *(const void **)(v269 + 32);
                          v311 = *(const void **)(v269 + 40);
                        }
                        v313 = *(_DWORD *)(v269 + 48);
                        *((_DWORD *)v308 + 12) = v313;
                        v314 = *(_DWORD *)(v269 + 52);
                        if (v311 == v312)
                          v315 = *(_DWORD *)(v269 + 52);
                        else
                          v315 = v313;
                        if (v315)
                        {
                          memmove(v310, v311, 8 * v315);
                          v314 = *(_DWORD *)(v269 + 52);
                        }
                        *((_DWORD *)v308 + 13) = v314;
                        *((_DWORD *)v308 + 14) = *(_DWORD *)(v269 + 56);
                        v316 = &v307[136 * v272];
                        v317 = v316 + 112;
                        *((_QWORD *)v316 + 10) = v316 + 112;
                        v318 = v316 + 80;
                        v319 = *(const void **)(v269 + 88);
                        if (v319 == *(const void **)(v269 + 80))
                        {
                          *((_QWORD *)v318 + 1) = v317;
                          v320 = v319;
                        }
                        else
                        {
                          v334 = *(unsigned int *)(v269 + 96);
                          v317 = malloc_type_malloc(8 * v334, 0x4065EBACuLL);
                          if (!v317)
                          {
                            if ((_DWORD)v334)
                              goto LABEL_1271;
                            v317 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
                            if (!v317)
                              goto LABEL_1271;
                          }
                          *((_QWORD *)v318 + 1) = v317;
                          v320 = *(const void **)(v269 + 80);
                          v319 = *(const void **)(v269 + 88);
                        }
                        v321 = *(_DWORD *)(v269 + 96);
                        *((_DWORD *)v318 + 4) = v321;
                        v322 = *(_DWORD *)(v269 + 100);
                        if (v319 == v320)
                          v323 = *(_DWORD *)(v269 + 100);
                        else
                          v323 = v321;
                        if (v323)
                        {
                          memmove(v317, v319, 8 * v323);
                          v322 = *(_DWORD *)(v269 + 100);
                        }
                        v324 = &v307[136 * v306];
                        *((_DWORD *)v318 + 5) = v322;
                        *((_DWORD *)v318 + 6) = *(_DWORD *)(v269 + 104);
                        v307[136 * v272 + 128] = *(_BYTE *)(v269 + 128);
                        v285 = v308 + 136;
                        v325 = sub_1C598CF30(v241[11], v241[11], v241[10], v241[10], (uint64_t)&v307[136 * v272], (uint64_t)&v307[136 * v272]);
                        v327 = (char *)v241[10];
                        v326 = (char *)v241[11];
                        v241[10] = v325;
                        v241[11] = v285;
                        v241[12] = v324;
                        if (v326 != v327)
                        {
                          do
                          {
                            v328 = v326 - 136;
                            sub_1C62C4A24((_QWORD *)v326 - 15);
                            v326 = v328;
                          }
                          while (v328 != v327);
                        }
                        v4 = v798;
                        if (v327)
                          operator delete(v327);
                        LODWORD(v236) = v772;
                        v268 = k;
                      }
                      else
                      {
                        *(_QWORD *)v271 = *(_QWORD *)v269;
                        v274 = *(_WORD *)(v269 + 8);
                        *(_BYTE *)(v271 + 10) = *(_BYTE *)(v269 + 10);
                        *(_WORD *)(v271 + 8) = v274;
                        *(_OWORD *)(v271 + 16) = *(_OWORD *)(v269 + 16);
                        v275 = (void *)(v271 + 64);
                        *(_QWORD *)(v271 + 32) = v271 + 64;
                        v276 = *(const void **)(v269 + 40);
                        if (v276 == *(const void **)(v269 + 32))
                        {
                          *(_QWORD *)(v271 + 40) = v275;
                        }
                        else
                        {
                          v331 = *(unsigned int *)(v269 + 48);
                          v275 = malloc_type_malloc(8 * v331, 0x4065EBACuLL);
                          if (!v275)
                          {
                            if ((_DWORD)v331)
                              goto LABEL_1271;
                            v275 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
                            v4 = v798;
                            if (!v275)
                              goto LABEL_1271;
                          }
                          *(_QWORD *)(v271 + 40) = v275;
                          v276 = *(const void **)(v269 + 32);
                          v268 = k;
                        }
                        *(_DWORD *)(v271 + 48) = *(_DWORD *)(v269 + 48);
                        v277 = *(const void **)(v269 + 40);
                        v278 = *(_DWORD *)(v269 + 52);
                        if (v277 == v276)
                          v279 = *(_DWORD *)(v269 + 52);
                        else
                          v279 = *(_DWORD *)(v269 + 48);
                        if (v279)
                        {
                          memmove(v275, v277, 8 * v279);
                          v278 = *(_DWORD *)(v269 + 52);
                        }
                        *(_DWORD *)(v271 + 52) = v278;
                        *(_DWORD *)(v271 + 56) = *(_DWORD *)(v269 + 56);
                        v280 = (void *)(v271 + 112);
                        *(_QWORD *)(v271 + 80) = v271 + 112;
                        v281 = *(const void **)(v269 + 88);
                        if (v281 == *(const void **)(v269 + 80))
                        {
                          *(_QWORD *)(v271 + 88) = v280;
                        }
                        else
                        {
                          v332 = *(unsigned int *)(v269 + 96);
                          v280 = malloc_type_malloc(8 * v332, 0x4065EBACuLL);
                          if (!v280)
                          {
                            if ((_DWORD)v332)
                              goto LABEL_1271;
                            v280 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
                            v4 = v798;
                            if (!v280)
                              goto LABEL_1271;
                          }
                          *(_QWORD *)(v271 + 88) = v280;
                          v281 = *(const void **)(v269 + 80);
                          v268 = k;
                        }
                        *(_DWORD *)(v271 + 96) = *(_DWORD *)(v269 + 96);
                        v282 = *(const void **)(v269 + 88);
                        v283 = *(_DWORD *)(v269 + 100);
                        if (v282 == v281)
                          v284 = *(_DWORD *)(v269 + 100);
                        else
                          v284 = *(_DWORD *)(v269 + 96);
                        if (v284)
                        {
                          memmove(v280, v282, 8 * v284);
                          v283 = *(_DWORD *)(v269 + 100);
                        }
                        *(_DWORD *)(v271 + 100) = v283;
                        *(_DWORD *)(v271 + 104) = *(_DWORD *)(v269 + 104);
                        *(_BYTE *)(v271 + 128) = *(_BYTE *)(v269 + 128);
                        v285 = (char *)(v271 + 136);
                      }
                      v303 = 0;
                      v241[11] = v285;
                      v301 = (llvm::objcarc::PtrState *)(v241[10] + 136 * v272 + 8);
                      __b[0] = 0;
                      v848 = 0u;
                      v847 = 0u;
                      v844 = 0u;
                      memset(v842, 0, 24);
                      *(_QWORD *)&v842[24] = (char *)&v844 + 8;
                      v843[0] = (char *)&v844 + 8;
                      v843[1] = (void *)2;
                      __b[1] = (char *)&v847 + 8;
                      v846[0] = (char *)&v847 + 8;
                      v846[1] = (void *)2;
                    }
                    else
                    {
                      v286 = v241[10];
                      v287 = *(_QWORD *)(*(_QWORD *)v842 + 8);
                      *(_WORD *)v842 = *(_WORD *)(v269 + 8);
                      v842[2] = *(_BYTE *)(v269 + 10);
                      *(_OWORD *)&v842[8] = *(_OWORD *)(v269 + 16);
                      v288 = (char *)&v844 + 8;
                      *(_QWORD *)&v842[24] = (char *)&v844 + 8;
                      v289 = *(const void **)(v269 + 40);
                      if (v289 == *(const void **)(v269 + 32))
                      {
                        v843[0] = (char *)&v844 + 8;
                        v290 = v289;
                      }
                      else
                      {
                        v329 = *(unsigned int *)(v269 + 48);
                        v288 = (char *)malloc_type_malloc(8 * v329, 0x4065EBACuLL);
                        if (!v288)
                        {
                          if ((_DWORD)v329)
                            goto LABEL_1271;
                          v288 = (char *)malloc_type_malloc(1uLL, 0x4065EBACuLL);
                          v4 = v798;
                          if (!v288)
                            goto LABEL_1271;
                        }
                        v843[0] = v288;
                        v290 = *(const void **)(v269 + 32);
                        v289 = *(const void **)(v269 + 40);
                      }
                      v292 = *(_DWORD *)(v269 + 48);
                      v291 = *(_DWORD *)(v269 + 52);
                      LODWORD(v843[1]) = v292;
                      if (v289 == v290)
                        v293 = v291;
                      else
                        v293 = v292;
                      if (v293)
                      {
                        memmove(v288, v289, 8 * v293);
                        v291 = *(_DWORD *)(v269 + 52);
                      }
                      v294 = *(_DWORD *)(v269 + 56);
                      HIDWORD(v843[1]) = v291;
                      LODWORD(v844) = v294;
                      v295 = (char *)&v847 + 8;
                      __b[1] = (char *)&v847 + 8;
                      v296 = *(const void **)(v269 + 88);
                      if (v296 == *(const void **)(v269 + 80))
                      {
                        v846[0] = (char *)&v847 + 8;
                        v297 = v296;
                      }
                      else
                      {
                        v330 = *(unsigned int *)(v269 + 96);
                        v295 = (char *)malloc_type_malloc(8 * v330, 0x4065EBACuLL);
                        if (!v295)
                        {
                          if ((_DWORD)v330)
                            goto LABEL_1271;
                          v295 = (char *)malloc_type_malloc(1uLL, 0x4065EBACuLL);
                          v4 = v798;
                          if (!v295)
                            goto LABEL_1271;
                        }
                        v846[0] = v295;
                        v297 = *(const void **)(v269 + 80);
                        v296 = *(const void **)(v269 + 88);
                      }
                      v299 = *(_DWORD *)(v269 + 96);
                      v298 = *(_DWORD *)(v269 + 100);
                      LODWORD(v846[1]) = v299;
                      if (v296 == v297)
                        v300 = v298;
                      else
                        v300 = v299;
                      if (v300)
                      {
                        memmove(v295, v296, 8 * v300);
                        v298 = *(_DWORD *)(v269 + 100);
                      }
                      v301 = (llvm::objcarc::PtrState *)(v286 + 136 * v287 + 8);
                      v302 = *(_DWORD *)(v269 + 104);
                      HIDWORD(v846[1]) = v298;
                      LODWORD(v847) = v302;
                      v303 = *(_BYTE *)(v269 + 128);
                      v268 = k;
                    }
                    BYTE8(v848) = v303;
                    llvm::objcarc::PtrState::Merge(v301, (const llvm::objcarc::PtrState *)v842, 0);
                    if (v846[0] != __b[1])
                      free(v846[0]);
                    if (v843[0] != *(void **)&v842[24])
                      free(v843[0]);
                  }
                  v335 = (uint64_t *)v241[10];
                  for (m = (uint64_t *)v241[11]; v335 != m; v335 += 17)
                  {
                    if (*(_QWORD *)(v265 + 96) == sub_1C62C4B78(v265 + 64, *v335))
                    {
                      __b[0] = 0;
                      v848 = 0u;
                      v847 = 0u;
                      v844 = 0u;
                      memset(v842, 0, 24);
                      *(_QWORD *)&v842[24] = (char *)&v844 + 8;
                      v843[0] = (char *)&v844 + 8;
                      v843[1] = (void *)2;
                      __b[1] = (char *)&v847 + 8;
                      v846[0] = (char *)&v847 + 8;
                      v846[1] = (void *)2;
                      llvm::objcarc::PtrState::Merge((llvm::objcarc::PtrState *)(v335 + 1), (const llvm::objcarc::PtrState *)v842, 0);
                      if (v846[0] != __b[1])
                        free(v846[0]);
                      if (v843[0] != *(void **)&v842[24])
                        free(v843[0]);
                    }
                  }
                  goto LABEL_551;
                }
                *((_DWORD *)v241 + 1) = -1;
                sub_1C61446F0(v786);
                v338 = v241[10];
                v337 = v241[11];
                if (v337 != v338)
                {
                  do
                  {
                    v340 = v337 - 136;
                    sub_1C62C4A24((_QWORD *)(v337 - 120));
                    v337 = v340;
                  }
                  while (v340 != v338);
                  goto LABEL_558;
                }
              }
              v241[11] = v337;
LABEL_551:
              if (++v261 == v776)
              {
                v239 = v854;
                v237 = v769;
                break;
              }
              continue;
            }
          }
        }
        v243 = (llvm::Value **)((char *)v239 + 40);
        v244 = (llvm::Value *)*((_QWORD *)v239 + 6);
        if ((llvm::Value *)((char *)v239 + 40) != v244)
        {
          v245 = 0;
          while (1)
          {
            v246 = *v243;
            if (*v243)
              v247 = (llvm::Value *)((char *)*v243 - 24);
            else
              v247 = 0;
            if (*((_BYTE *)v247 + 16) != 33)
            {
              v248 = sub_1C598C5E0(v4, v247, (uint64_t)v239, v816, (unsigned int *)v241);
              if (dword_1ED81A400 < -252645135 * ((v241[11] - v241[10]) >> 3))
              {
                v760 = 0;
                *(_BYTE *)(v4 + 200) = 1;
                goto LABEL_561;
              }
              v245 |= v248;
              v246 = *v243;
            }
            v243 = (llvm::Value **)v246;
            if (v246 == v244)
              goto LABEL_423;
          }
        }
        v245 = 0;
LABEL_423:
        v249 = *((unsigned int *)v241 + 28);
        if ((_DWORD)v249)
        {
          v250 = v241[13];
          v251 = 8 * v249;
          do
          {
            v252 = *(_QWORD *)(*(_QWORD *)v250 + 40);
            if (v252)
              v253 = (llvm::objcarc *)(v252 - 24);
            else
              v253 = 0;
            if (v252 && *((_BYTE *)v253 + 16) == 33)
              v245 |= sub_1C598C5E0(v4, v253, (uint64_t)v239, v816, (unsigned int *)v241);
            v250 += 8;
            v251 -= 8;
          }
          while (v251);
        }
        v236 = v236 | v245;
        v238 = v804;
        if (*(_BYTE *)(v4 + 200))
        {
          v760 = 0;
          goto LABEL_561;
        }
      }
      v833 = 0;
      v832 = 0;
      LODWORD(v834) = 0;
      v539 = v818;
      v540 = v819;
      while (v539 != v540)
      {
        v541 = *v539;
        v542 = *(_DWORD *)(*v539 + 20);
        if ((v542 & 0x40000000) != 0)
          v543 = *(llvm::Value ***)(v541 - 8);
        else
          v543 = (llvm::Value **)(v541 - 32 * (v542 & 0x7FFFFFF));
        v544 = sub_1C61AB204(*v543);
        v545 = v539[10];
        v546 = 88;
        if (v545 == v539[9])
          v546 = 92;
        v547 = *(unsigned int *)((char *)v539 + v546);
        if ((_DWORD)v547)
        {
          v548 = 8 * v547;
          v549 = (unint64_t *)v539[10];
          while (*v549 >= 0xFFFFFFFFFFFFFFFELL)
          {
            ++v549;
            v548 -= 8;
            if (!v548)
              goto LABEL_938;
          }
        }
        else
        {
          v549 = (unint64_t *)v539[10];
        }
        v550 = (unint64_t *)(v545 + 8 * v547);
        if (v549 != v550)
        {
LABEL_934:
          *(_QWORD *)v842 = 0;
          v552 = *v549;
          v551 = v549 + 1;
          *(_QWORD *)v842 = v552;
          v553 = sub_1C61BE588((uint64_t)&v832, (uint64_t *)v842);
          sub_1C4774094((llvm::SmallPtrSetImplBase *)(v553 + 1), (uint64_t)v544);
          while (v551 != v550)
          {
            v554 = *v551++;
            if (v554 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              v549 = v551 - 1;
              goto LABEL_934;
            }
          }
        }
LABEL_938:
        v539 += 16;
      }
      v555 = 0;
      v766 = (char *)v829;
      v556 = (char *)v829 + 8 * v830;
      v774 = v236;
      do
      {
        if (v556 == v766)
        {
          v760 = v555 & v236;
          goto LABEL_1168;
        }
        v771 = v555;
        v557 = (_QWORD *)*((_QWORD *)v556 - 1);
        v768 = v556 - 8;
        v849 = v557;
        v558 = sub_1C598C098((uint64_t)v814, (uint64_t *)&v849);
        v559 = v558;
        v560 = *((unsigned int *)v558 + 28);
        if ((_DWORD)v560)
        {
          v613 = (uint64_t *)v558[13];
          v614 = *v613;
          *(_QWORD *)v842 = 0;
          v615 = v814[0];
          v616 = v815;
          v617 = sub_1C598C148(v814[0], v815, v614, v842) ? *(_QWORD *)v842 : v615 + 176 * v616;
          v618 = (unsigned int *)(v559 + 1);
          sub_1C62C4A68((uint64_t)(v559 + 1), v617 + 16);
          *(_DWORD *)v559 = *(_DWORD *)(v617 + 8);
          if ((_DWORD)v560 != 1)
          {
            v808 = &v613[v560];
            v619 = v613 + 1;
            while (2)
            {
              v620 = *v619;
              *(_QWORD *)v842 = 0;
              v621 = v814[0];
              v622 = v815;
              if (sub_1C598C148(v814[0], v815, v620, v842))
                v623 = *(llvm::Value **)v842;
              else
                v623 = (llvm::Value *)(v621 + 176 * v622);
              if (*(_DWORD *)v559 == -1)
                goto LABEL_1157;
              v624 = *((_DWORD *)v623 + 2) + *(_DWORD *)v559;
              *(_DWORD *)v559 = v624;
              if (v624 == -1)
              {
                sub_1C61446F0(v618);
                v700 = v559[4];
                v699 = v559[5];
                if (v699 != v700)
                {
                  do
                  {
                    v701 = v699 - 136;
                    sub_1C62C4A24((_QWORD *)(v699 - 120));
                    v699 = v701;
                  }
                  while (v701 != v700);
LABEL_1164:
                  v699 = v700;
                }
              }
              else
              {
                if (v624 >= *((_DWORD *)v623 + 2))
                {
                  v626 = *((_QWORD *)v623 + 5);
                  v625 = *((_QWORD *)v623 + 6);
                  while (v626 != v625)
                  {
                    v854 = *(llvm::Value **)v626;
                    v855 = 0;
                    sub_1C618F0E8((uint64_t)v842, (uint64_t)v618, (uint64_t *)&v854, (uint64_t *)&v855);
                    if (v842[16])
                    {
                      v627 = v559[4];
                      v628 = v559[5];
                      v629 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v628 - v627) >> 3);
                      *(_QWORD *)(*(_QWORD *)v842 + 8) = v629;
                      v630 = v559[6];
                      if (v628 >= v630)
                      {
                        if (v629 + 1 > 0x1E1E1E1E1E1E1E1)
LABEL_1268:
                          abort();
                        v661 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v630 - v627) >> 3);
                        v662 = 2 * v661;
                        if (2 * v661 <= v629 + 1)
                          v662 = v629 + 1;
                        if (v661 >= 0xF0F0F0F0F0F0F0)
                          v663 = 0x1E1E1E1E1E1E1E1;
                        else
                          v663 = v662;
                        if (v663)
                        {
                          if (v663 > 0x1E1E1E1E1E1E1E1)
LABEL_1269:
                            sub_1C4764EE4();
                          v664 = operator new(136 * v663);
                        }
                        else
                        {
                          v664 = 0;
                        }
                        v665 = &v664[136 * v629];
                        *(_QWORD *)v665 = *(_QWORD *)v626;
                        v666 = *(_WORD *)(v626 + 8);
                        v665[10] = *(_BYTE *)(v626 + 10);
                        *((_WORD *)v665 + 4) = v666;
                        *((_OWORD *)v665 + 1) = *(_OWORD *)(v626 + 16);
                        v667 = v665 + 64;
                        *((_QWORD *)v665 + 4) = v665 + 64;
                        v668 = *(const void **)(v626 + 40);
                        if (v668 == *(const void **)(v626 + 32))
                        {
                          *((_QWORD *)v665 + 5) = v667;
                          v669 = v668;
                        }
                        else
                        {
                          v780 = *(unsigned int *)(v626 + 48);
                          v667 = malloc_type_malloc(8 * v780, 0x4065EBACuLL);
                          if (!v667)
                          {
                            if ((_DWORD)v780)
                              goto LABEL_1271;
                            v667 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
                            if (!v667)
                              goto LABEL_1271;
                          }
                          *((_QWORD *)v665 + 5) = v667;
                          v669 = *(const void **)(v626 + 32);
                          v668 = *(const void **)(v626 + 40);
                        }
                        v670 = *(_DWORD *)(v626 + 48);
                        *((_DWORD *)v665 + 12) = v670;
                        v671 = *(_DWORD *)(v626 + 52);
                        if (v668 == v669)
                          v672 = *(_DWORD *)(v626 + 52);
                        else
                          v672 = v670;
                        if (v672)
                        {
                          memmove(v667, v668, 8 * v672);
                          v671 = *(_DWORD *)(v626 + 52);
                        }
                        *((_DWORD *)v665 + 13) = v671;
                        *((_DWORD *)v665 + 14) = *(_DWORD *)(v626 + 56);
                        v673 = &v664[136 * v629];
                        v674 = v673 + 112;
                        *((_QWORD *)v673 + 10) = v673 + 112;
                        v675 = v673 + 80;
                        v676 = *(const void **)(v626 + 88);
                        v797 = v623;
                        if (v676 == *(const void **)(v626 + 80))
                        {
                          *((_QWORD *)v675 + 1) = v674;
                          v677 = v676;
                        }
                        else
                        {
                          v781 = *(unsigned int *)(v626 + 96);
                          v674 = malloc_type_malloc(8 * v781, 0x4065EBACuLL);
                          if (!v674)
                          {
                            if ((_DWORD)v781)
                              goto LABEL_1271;
                            v674 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
                            if (!v674)
                              goto LABEL_1271;
                          }
                          *((_QWORD *)v675 + 1) = v674;
                          v677 = *(const void **)(v626 + 80);
                          v676 = *(const void **)(v626 + 88);
                        }
                        v678 = v625;
                        v679 = *(_DWORD *)(v626 + 96);
                        *((_DWORD *)v675 + 4) = v679;
                        v680 = *(_DWORD *)(v626 + 100);
                        if (v676 == v677)
                          v681 = *(_DWORD *)(v626 + 100);
                        else
                          v681 = v679;
                        if (v681)
                        {
                          memmove(v674, v676, 8 * v681);
                          v680 = *(_DWORD *)(v626 + 100);
                        }
                        v682 = &v664[136 * v663];
                        *((_DWORD *)v675 + 5) = v680;
                        *((_DWORD *)v675 + 6) = *(_DWORD *)(v626 + 104);
                        v664[136 * v629 + 128] = *(_BYTE *)(v626 + 128);
                        v642 = v665 + 136;
                        v683 = sub_1C598CF30(v559[5], v559[5], v559[4], v559[4], (uint64_t)&v664[136 * v629], (uint64_t)&v664[136 * v629]);
                        v685 = (char *)v559[4];
                        v684 = (char *)v559[5];
                        v559[4] = v683;
                        v559[5] = v642;
                        v559[6] = v682;
                        if (v684 != v685)
                        {
                          do
                          {
                            v686 = v684 - 136;
                            sub_1C62C4A24((_QWORD *)v684 - 15);
                            v684 = v686;
                          }
                          while (v686 != v685);
                        }
                        v236 = v774;
                        v618 = (unsigned int *)(v559 + 1);
                        if (v685)
                          operator delete(v685);
                        v625 = v678;
                        v623 = v797;
                      }
                      else
                      {
                        *(_QWORD *)v628 = *(_QWORD *)v626;
                        v631 = *(_WORD *)(v626 + 8);
                        *(_BYTE *)(v628 + 10) = *(_BYTE *)(v626 + 10);
                        *(_WORD *)(v628 + 8) = v631;
                        *(_OWORD *)(v628 + 16) = *(_OWORD *)(v626 + 16);
                        v632 = (void *)(v628 + 64);
                        *(_QWORD *)(v628 + 32) = v628 + 64;
                        v633 = *(const void **)(v626 + 40);
                        if (v633 == *(const void **)(v626 + 32))
                        {
                          *(_QWORD *)(v628 + 40) = v632;
                        }
                        else
                        {
                          v695 = *(unsigned int *)(v626 + 48);
                          v632 = malloc_type_malloc(8 * v695, 0x4065EBACuLL);
                          if (!v632)
                          {
                            if ((_DWORD)v695)
                              goto LABEL_1271;
                            v632 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
                            v618 = (unsigned int *)(v559 + 1);
                            if (!v632)
                              goto LABEL_1271;
                          }
                          *(_QWORD *)(v628 + 40) = v632;
                          v633 = *(const void **)(v626 + 32);
                        }
                        *(_DWORD *)(v628 + 48) = *(_DWORD *)(v626 + 48);
                        v634 = *(const void **)(v626 + 40);
                        v635 = *(_DWORD *)(v626 + 52);
                        if (v634 == v633)
                          v636 = *(_DWORD *)(v626 + 52);
                        else
                          v636 = *(_DWORD *)(v626 + 48);
                        if (v636)
                        {
                          memmove(v632, v634, 8 * v636);
                          v635 = *(_DWORD *)(v626 + 52);
                        }
                        *(_DWORD *)(v628 + 52) = v635;
                        *(_DWORD *)(v628 + 56) = *(_DWORD *)(v626 + 56);
                        v637 = (void *)(v628 + 112);
                        *(_QWORD *)(v628 + 80) = v628 + 112;
                        v638 = *(const void **)(v626 + 88);
                        if (v638 == *(const void **)(v626 + 80))
                        {
                          *(_QWORD *)(v628 + 88) = v637;
                        }
                        else
                        {
                          v696 = *(unsigned int *)(v626 + 96);
                          v637 = malloc_type_malloc(8 * v696, 0x4065EBACuLL);
                          if (!v637)
                          {
                            if ((_DWORD)v696)
                              goto LABEL_1271;
                            v637 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
                            v618 = (unsigned int *)(v559 + 1);
                            if (!v637)
                              goto LABEL_1271;
                          }
                          *(_QWORD *)(v628 + 88) = v637;
                          v638 = *(const void **)(v626 + 80);
                        }
                        *(_DWORD *)(v628 + 96) = *(_DWORD *)(v626 + 96);
                        v639 = *(const void **)(v626 + 88);
                        v640 = *(_DWORD *)(v626 + 100);
                        if (v639 == v638)
                          v641 = *(_DWORD *)(v626 + 100);
                        else
                          v641 = *(_DWORD *)(v626 + 96);
                        if (v641)
                        {
                          memmove(v637, v639, 8 * v641);
                          v640 = *(_DWORD *)(v626 + 100);
                        }
                        *(_DWORD *)(v628 + 100) = v640;
                        *(_DWORD *)(v628 + 104) = *(_DWORD *)(v626 + 104);
                        *(_BYTE *)(v628 + 128) = *(_BYTE *)(v626 + 128);
                        v642 = (char *)(v628 + 136);
                      }
                      v660 = 0;
                      v559[5] = v642;
                      v658 = (llvm::objcarc::PtrState *)(v559[4] + 136 * v629 + 8);
                      __b[0] = 0;
                      v848 = 0u;
                      v847 = 0u;
                      v844 = 0u;
                      memset(v842, 0, 24);
                      *(_QWORD *)&v842[24] = (char *)&v844 + 8;
                      v843[0] = (char *)&v844 + 8;
                      v843[1] = (void *)2;
                      __b[1] = (char *)&v847 + 8;
                      v846[0] = (char *)&v847 + 8;
                      v846[1] = (void *)2;
                    }
                    else
                    {
                      v643 = v559[4];
                      v644 = *(_QWORD *)(*(_QWORD *)v842 + 8);
                      *(_WORD *)v842 = *(_WORD *)(v626 + 8);
                      v842[2] = *(_BYTE *)(v626 + 10);
                      *(_OWORD *)&v842[8] = *(_OWORD *)(v626 + 16);
                      v645 = (char *)&v844 + 8;
                      *(_QWORD *)&v842[24] = (char *)&v844 + 8;
                      v646 = *(const void **)(v626 + 40);
                      if (v646 == *(const void **)(v626 + 32))
                      {
                        v843[0] = (char *)&v844 + 8;
                        v647 = v646;
                      }
                      else
                      {
                        v687 = v623;
                        v688 = v625;
                        v689 = v236;
                        v690 = *(unsigned int *)(v626 + 48);
                        v645 = (char *)malloc_type_malloc(8 * v690, 0x4065EBACuLL);
                        if (!v645)
                        {
                          if ((_DWORD)v690)
                            goto LABEL_1271;
                          v645 = (char *)malloc_type_malloc(1uLL, 0x4065EBACuLL);
                          v618 = (unsigned int *)(v559 + 1);
                          if (!v645)
                            goto LABEL_1271;
                        }
                        v843[0] = v645;
                        v647 = *(const void **)(v626 + 32);
                        v646 = *(const void **)(v626 + 40);
                        v236 = v689;
                        v625 = v688;
                        v623 = v687;
                      }
                      v649 = *(_DWORD *)(v626 + 48);
                      v648 = *(_DWORD *)(v626 + 52);
                      LODWORD(v843[1]) = v649;
                      if (v646 == v647)
                        v650 = v648;
                      else
                        v650 = v649;
                      if (v650)
                      {
                        memmove(v645, v646, 8 * v650);
                        v648 = *(_DWORD *)(v626 + 52);
                      }
                      v651 = *(_DWORD *)(v626 + 56);
                      HIDWORD(v843[1]) = v648;
                      LODWORD(v844) = v651;
                      v652 = (char *)&v847 + 8;
                      __b[1] = (char *)&v847 + 8;
                      v653 = *(const void **)(v626 + 88);
                      if (v653 == *(const void **)(v626 + 80))
                      {
                        v846[0] = (char *)&v847 + 8;
                        v654 = v653;
                      }
                      else
                      {
                        v691 = v623;
                        v692 = v625;
                        v693 = v236;
                        v694 = *(unsigned int *)(v626 + 96);
                        v652 = (char *)malloc_type_malloc(8 * v694, 0x4065EBACuLL);
                        if (!v652)
                        {
                          if ((_DWORD)v694)
                            goto LABEL_1271;
                          v652 = (char *)malloc_type_malloc(1uLL, 0x4065EBACuLL);
                          v618 = (unsigned int *)(v559 + 1);
                          if (!v652)
                            goto LABEL_1271;
                        }
                        v846[0] = v652;
                        v654 = *(const void **)(v626 + 80);
                        v653 = *(const void **)(v626 + 88);
                        v236 = v693;
                        v625 = v692;
                        v623 = v691;
                      }
                      v656 = *(_DWORD *)(v626 + 96);
                      v655 = *(_DWORD *)(v626 + 100);
                      LODWORD(v846[1]) = v656;
                      if (v653 == v654)
                        v657 = v655;
                      else
                        v657 = v656;
                      if (v657)
                      {
                        memmove(v652, v653, 8 * v657);
                        v655 = *(_DWORD *)(v626 + 100);
                      }
                      v658 = (llvm::objcarc::PtrState *)(v643 + 136 * v644 + 8);
                      v659 = *(_DWORD *)(v626 + 104);
                      HIDWORD(v846[1]) = v655;
                      LODWORD(v847) = v659;
                      v660 = *(_BYTE *)(v626 + 128);
                    }
                    BYTE8(v848) = v660;
                    llvm::objcarc::PtrState::Merge(v658, (const llvm::objcarc::PtrState *)v842, 1);
                    if (v846[0] != __b[1])
                      free(v846[0]);
                    if (v843[0] != *(void **)&v842[24])
                      free(v843[0]);
                    v626 += 136;
                  }
                  v697 = (uint64_t *)v559[4];
                  for (n = (uint64_t *)v559[5]; v697 != n; v697 += 17)
                  {
                    if (*((_QWORD *)v623 + 6) == sub_1C62C4B78((uint64_t)v623 + 16, *v697))
                    {
                      __b[0] = 0;
                      v848 = 0u;
                      v847 = 0u;
                      v844 = 0u;
                      memset(v842, 0, 24);
                      *(_QWORD *)&v842[24] = (char *)&v844 + 8;
                      v843[0] = (char *)&v844 + 8;
                      v843[1] = (void *)2;
                      __b[1] = (char *)&v847 + 8;
                      v846[0] = (char *)&v847 + 8;
                      v846[1] = (void *)2;
                      llvm::objcarc::PtrState::Merge((llvm::objcarc::PtrState *)(v697 + 1), (const llvm::objcarc::PtrState *)v842, 1);
                      if (v846[0] != __b[1])
                        free(v846[0]);
                      if (v843[0] != *(void **)&v842[24])
                        free(v843[0]);
                    }
                  }
                  goto LABEL_1157;
                }
                *(_DWORD *)v559 = -1;
                sub_1C61446F0(v618);
                v700 = v559[4];
                v699 = v559[5];
                if (v699 != v700)
                {
                  do
                  {
                    v702 = v699 - 136;
                    sub_1C62C4A24((_QWORD *)(v699 - 120));
                    v699 = v702;
                  }
                  while (v702 != v700);
                  goto LABEL_1164;
                }
              }
              v559[5] = v699;
LABEL_1157:
              if (++v619 == v808)
              {
                v557 = v849;
                break;
              }
              continue;
            }
          }
        }
        if ((llvm::BasicBlock::hasNPredecessors((llvm::BasicBlock *)v557, *((_DWORD *)v559 + 28)) & 1) == 0)
        {
          v594 = v559[4];
          v595 = v559[5];
          while (v594 != v595)
          {
            *(_BYTE *)(v594 + 128) = 1;
            v594 += 136;
          }
        }
        v562 = v557 + 5;
        v563 = (_QWORD *)v557[6];
        if (v563 != v557 + 5)
        {
          v564 = 0;
          v565 = (unsigned int *)(v559 + 1);
          while (2)
          {
            v778 = v564;
            if (v563)
              v566 = (llvm::objcarc *)(v563 - 3);
            else
              v566 = 0;
            v567 = llvm::objcarc::GetARCInstKind(v566, v561);
            *(_QWORD *)v842 = 0;
            v568 = v834;
            if (sub_1C61A45F4((uint64_t)v832, v834, (uint64_t)v566, v842))
              v569 = *(_QWORD *)v842 == (_QWORD)v832 + 56 * v568;
            else
              v569 = 1;
            if (!v569)
            {
              v570 = *(_QWORD *)(*(_QWORD *)v842 + 16);
              v571 = 28;
              if (v570 != *(_QWORD *)(*(_QWORD *)v842 + 8))
                v571 = 24;
              v572 = *(unsigned int *)(*(_QWORD *)v842 + v571);
              if ((_DWORD)v572)
              {
                v573 = 8 * v572;
                v574 = *(unint64_t **)(*(_QWORD *)v842 + 16);
                while (*v574 >= 0xFFFFFFFFFFFFFFFELL)
                {
                  ++v574;
                  v573 -= 8;
                  if (!v573)
                    goto LABEL_968;
                }
              }
              else
              {
                v574 = *(unint64_t **)(*(_QWORD *)v842 + 16);
              }
              v575 = (unint64_t *)(v570 + 8 * v572);
              if (v574 != v575)
              {
                v576 = *v574;
                while (1)
                {
                  *(_QWORD *)v842 = v576;
                  v577 = sub_1C598D074(v565, (uint64_t *)v842);
                  if (*(_BYTE *)(v577 + 2) == 1)
                    *(_BYTE *)(v577 + 120) = 1;
                  v578 = v574 + 1;
                  do
                  {
                    if (v578 == v575)
                      goto LABEL_968;
                    v579 = *v578++;
                    v576 = v579;
                  }
                  while (v579 > 0xFFFFFFFFFFFFFFFDLL);
                  v574 = v578 - 1;
                }
              }
            }
LABEL_968:
            inited = 0;
            v581 = 0;
            switch(v567)
            {
              case 0:
              case 1:
                v581 = sub_1C61AB204(*((llvm::Value **)v566 - 4 * (*((_DWORD *)v566 + 5) & 0x7FFFFFF)));
                *(_QWORD *)v842 = v581;
                v582 = sub_1C598D074(v565, (uint64_t *)v842);
                inited = llvm::objcarc::TopDownPtrState::InitTopDown(v582, v567, (uint64_t)v566);
                goto LABEL_971;
              case 2:
              case 3:
              case 5:
              case 6:
                goto LABEL_971;
              case 4:
                v581 = sub_1C61AB204(*((llvm::Value **)v566 - 4 * (*((_DWORD *)v566 + 5) & 0x7FFFFFF)));
                *(_QWORD *)v842 = v581;
                v589 = sub_1C598D074(v565, (uint64_t *)v842);
                if (llvm::objcarc::TopDownPtrState::MatchWithRelease(v589, v759, v566))
                {
                  *(_QWORD *)v842 = v566;
                  v593 = sub_1C62C4C8C((uint64_t)v821, (uint64_t *)v842);
                  sub_1C62C4B24((uint64_t)(v593 + 1), v589 + 8);
                  llvm::objcarc::PtrState::ResetSequenceProgress(v589, 0);
                }
                inited = 0;
                goto LABEL_971;
              case 7:
                goto LABEL_980;
              case 8:
                sub_1C61446F0(v565);
                v591 = v559[4];
                v590 = v559[5];
                if (v590 != v591)
                {
                  do
                  {
                    v592 = v590 - 136;
                    sub_1C62C4A24((_QWORD *)(v590 - 120));
                    v590 = v592;
                  }
                  while (v592 != v591);
                }
                inited = 0;
                v559[5] = v591;
                goto LABEL_980;
              default:
                if (v567 != 24)
                {
LABEL_971:
                  v583 = v562;
                  v584 = v559[4];
                  v585 = v559[5];
                  while (v584 != v585)
                  {
                    v586 = *(const llvm::Value **)v584;
                    if (*(llvm::Value **)v584 != v581
                      && (llvm::objcarc::TopDownPtrState::HandlePotentialAlterRefCount((_BYTE *)(v584 + 8), (uint64_t)v566, *(const llvm::Value **)v584, v775, v567, *(uint64_t **)(v798 + 192)) & 1) == 0&& *(_BYTE *)(v584 + 10) == 2&& llvm::objcarc::CanUse((uint64_t)v566, v586, (const llvm::Value **)v775, v567))
                    {
                      *(_BYTE *)(v584 + 10) = 3;
                    }
                    v584 += 136;
                  }
                  v562 = v583;
                  v565 = (unsigned int *)(v559 + 1);
                }
LABEL_980:
                v588 = (uint64_t *)v559[4];
                v587 = (uint64_t *)v559[5];
                if (dword_1ED81A400 < -252645135 * ((unint64_t)((char *)v587 - (char *)v588) >> 3))
                {
                  v760 = 0;
                  v4 = v798;
                  *(_BYTE *)(v798 + 200) = 1;
                  goto LABEL_1168;
                }
                v564 = v778 | inited;
                v563 = (_QWORD *)v563[1];
                if (v563 == v562)
                  goto LABEL_993;
                continue;
            }
          }
        }
        v564 = 0;
        v588 = (uint64_t *)v559[4];
        v587 = (uint64_t *)v559[5];
LABEL_993:
        v779 = v564;
        if (v588 == v587)
          goto LABEL_1038;
        v789 = v587;
        v796 = (llvm::Value *)((char *)v849 + 40);
        do
        {
          if (!*((_BYTE *)v588 + 10))
            goto LABEL_1027;
          v596 = *(_QWORD *)v796;
          if (*(llvm::Value **)v796 == v796)
            goto LABEL_1027;
          if (v596)
            v597 = v596 - 24;
          else
            v597 = 0;
          v598 = *v588;
          if (*(_BYTE *)(v597 + 16) != 30)
          {
            v599 = 2;
            switch(*(_BYTE *)(v597 + 16))
            {
              case 0x1E:
                goto LABEL_1270;
              case 0x1F:
                v599 = (*(_DWORD *)(v597 + 20) >> 1) & 0x3FFFFFF;
                goto LABEL_1031;
              case 0x20:
              case 0x26:
                v599 = (*(_DWORD *)(v597 + 20) & 0x7FFFFFF) - 1;
                goto LABEL_1031;
              case 0x21:
                goto LABEL_1004;
              case 0x24:
                v599 = *(_WORD *)(v597 + 18) & 1;
                goto LABEL_1031;
              case 0x25:
                v599 = 1;
                goto LABEL_1004;
              case 0x27:
                v599 = *(_DWORD *)(v597 + 80) + 1;
LABEL_1031:
                if (!v599)
                  goto LABEL_1027;
                goto LABEL_1004;
              default:
                goto LABEL_1027;
            }
          }
          if ((*(_DWORD *)(v597 + 20) & 0x7FFFFFF) == 3)
            v599 = 2;
          else
            v599 = 1;
LABEL_1004:
          v600 = 0;
          v601 = 0;
          v602 = 0;
          v807 = (uint64_t)(v588 + 1);
          v603 = 1;
          do
          {
            v604 = llvm::Instruction::getSuccessor((llvm::Instruction *)v597, v602);
            *(_QWORD *)v842 = 0;
            v605 = v814[0];
            v606 = v815;
            v607 = sub_1C598C148(v814[0], v815, v604, v842);
            v608 = *(_QWORD *)v842;
            if (!v607)
              v608 = v605 + 176 * v606;
            *(_QWORD *)v842 = v598;
            v609 = sub_1C598D074((_QWORD *)(v608 + 64), (uint64_t *)v842);
            v610 = *(unsigned __int8 *)(v609 + 2);
            if (!*(_BYTE *)(v609 + 2))
              goto LABEL_1021;
            v611 = *(unsigned __int8 *)(v609 + 8);
            v612 = *((unsigned __int8 *)v588 + 10);
            if (v612 == 2)
            {
              if ((v610 - 3) >= 3)
              {
                if (v610 != 2)
                  goto LABEL_1022;
LABEL_1020:
                v600 = 1;
                goto LABEL_1022;
              }
            }
            else
            {
              if (v612 != 3)
                goto LABEL_1022;
              if ((v610 - 4) >= 2)
              {
                if (v610 == 3)
                  goto LABEL_1020;
                if (v610 != 2)
                  goto LABEL_1022;
                if (*((unsigned __int8 *)v588 + 16) | v611)
                {
                  *((_BYTE *)v588 + 128) = 1;
                  goto LABEL_1022;
                }
LABEL_1021:
                llvm::objcarc::PtrState::ResetSequenceProgress(v807, 0);
                goto LABEL_1022;
              }
            }
            if (*((unsigned __int8 *)v588 + 16) | v611)
              v601 = 1;
            else
              v603 = 0;
LABEL_1022:
            ++v602;
          }
          while (v599 != v602);
          if (v600 && !v603)
          {
            llvm::objcarc::PtrState::ResetSequenceProgress(v807, 0);
            v587 = v789;
          }
          else
          {
            v587 = v789;
            if (v601)
              *((_BYTE *)v588 + 128) = 1;
          }
LABEL_1027:
          v588 += 17;
        }
        while (v588 != v587);
LABEL_1038:
        v4 = v798;
        v555 = v771 | v779;
        v236 = v774;
        v556 = v768;
      }
      while (!*(_BYTE *)(v798 + 200));
      v760 = 0;
LABEL_1168:
      v703 = v832;
      sub_1C62C4F70((uint64_t)v832, v834);
      MEMORY[0x1CAA32FB4](v703, 8);
LABEL_561:
      if (v826 != v828)
        free(v826);
      if (v829 != v831)
        free(v829);
      if (*(_BYTE *)(v4 + 200))
      {
        v343 = 0;
      }
      else
      {
        v854 = (llvm::Value *)&v856;
        v855 = (void *)0x800000000;
        v341 = v818;
        v342 = v819;
        if (v818 != v819)
        {
          v761 = 0;
          v763 = v819;
          while (1)
          {
            v344 = *v341;
            if (!*v341)
              goto LABEL_571;
            v765 = v341;
            v345 = sub_1C61AB204(*(llvm::Value **)(v344 - 32 * (*(_DWORD *)(v344 + 20) & 0x7FFFFFF)));
            v346 = *((unsigned __int8 *)v345 + 16);
            v348 = v346 < 0x15 || v346 == 59;
            v777 = v348;
            v764 = (uint64_t)v345;
            if (v345 && v346 == 60)
            {
              v444 = sub_1C61AB204(*((llvm::Value **)v345 - 4));
              if (v444 && *((_BYTE *)v444 + 16) == 3)
                v777 |= *((_BYTE *)v444 + 80);
            }
            v770 = 0;
            v773 = 0;
            v795 = 0;
            v349 = 0;
            *(_WORD *)v842 = 0;
            *(_QWORD *)&v842[8] = 0;
            *(_QWORD *)&v842[16] = &v844;
            *(_QWORD *)&v842[24] = &v844;
            v843[0] = (void *)2;
            LODWORD(v843[1]) = 0;
            __b[0] = &v847;
            __b[1] = &v847;
            v846[0] = (void *)2;
            LODWORD(v846[1]) = 0;
            LOBYTE(v848) = 0;
            LOWORD(v832) = 0;
            v833 = 0;
            *(_QWORD *)&v834 = v836;
            *((_QWORD *)&v834 + 1) = v836;
            *(_QWORD *)&v835 = 2;
            DWORD2(v835) = 0;
            v837 = v841;
            v838 = v841;
            v839 = 2;
            v840 = 0;
            v841[16] = 0;
            v849 = &v851;
            v851 = v344;
            v787 = 1;
            v350 = 1;
            v805 = 1;
            v850 = (void *)0x400000001;
            do
            {
              v829 = v831;
              v830 = 0x400000000;
              if (!(_DWORD)v850)
              {
                LODWORD(v850) = 0;
                v433 = 2;
                goto LABEL_720;
              }
              v351 = (uint64_t *)v849;
              v352 = (uint64_t *)((char *)v849 + 8 * v850);
              do
              {
                v353 = *v351;
                v354 = sub_1C62C4FCC((uint64_t)v816, *v351);
                v805 = v805 & (*(_BYTE *)(v354 + 8) != 0);
                v349 = (*(unsigned __int8 *)(v354 + 120) | v349) != 0;
                v355 = *(_QWORD *)(v354 + 32);
                v356 = 44;
                if (v355 != *(_QWORD *)(v354 + 24))
                  v356 = 40;
                v357 = *(unsigned int *)(v354 + v356);
                if (!(_DWORD)v357)
                {
                  v359 = *(uint64_t **)(v354 + 32);
LABEL_592:
                  v360 = (uint64_t *)(v355 + 8 * v357);
                  if (v359 == v360)
                    goto LABEL_648;
                  v361 = v822;
                  if (!v822)
                  {
                    v433 = 1;
                    goto LABEL_720;
                  }
                  v362 = *v359;
                  while (2)
                  {
                    v363 = ((v362 >> 4) ^ (v362 >> 9)) & (v361 - 1);
                    v364 = (uint64_t *)(v821[0] + (v363 << 7));
                    v365 = *v364;
                    if (v362 != *v364)
                    {
                      v390 = 1;
                      do
                      {
                        if (v365 == -4096)
                          goto LABEL_715;
                        v391 = v363 + v390++;
                        v363 = v391 & (v361 - 1);
                        v365 = *(_QWORD *)(v821[0] + ((unint64_t)v363 << 7));
                      }
                      while (v362 != v365);
                      v364 = (uint64_t *)(v821[0] + (v363 << 7));
                    }
                    if ((_DWORD)v363 == v361)
                      goto LABEL_715;
                    v366 = sub_1C477672C((uint64_t)(v364 + 3), v353);
                    v367 = v364[4];
                    v368 = 40;
                    if (v367 == v364[3])
                      v368 = 44;
                    if (v366 == (_QWORD *)(v367 + 8 * *(unsigned int *)((char *)v364 + v368)))
                    {
LABEL_715:
                      v433 = 1;
                      v4 = v798;
                      goto LABEL_720;
                    }
                    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v834, v362);
                    if (v369)
                    {
                      v826 = *(void **)(v362 + 40);
                      v370 = (unsigned int *)sub_1C598C098((uint64_t)v814, (uint64_t *)&v826);
                      if (*v370 == -1)
                        goto LABEL_715;
                      v371 = v370[1];
                      if (v371 == -1)
                        goto LABEL_715;
                      v372 = *v370 * (unint64_t)v371;
                      if ((v372 & 0xFFFFFFFF00000000) != 0 || (_DWORD)v372 == -1)
                        goto LABEL_715;
                      if ((v787 & 1) != 0)
                      {
                        v833 = (llvm::MDNode *)v364[2];
                        v373 = *((_BYTE *)v364 + 9);
                        goto LABEL_611;
                      }
                      if (v833 != (llvm::MDNode *)v364[2])
                        v833 = 0;
                      if (BYTE1(v832) != *((unsigned __int8 *)v364 + 9))
                      {
                        v373 = 0;
LABEL_611:
                        BYTE1(v832) = v373;
                      }
                      v795 -= v372;
                      if ((v777 & 1) == 0)
                      {
                        v788 = v352;
                        v374 = v364[10];
                        v375 = 88;
                        if (v374 == v364[9])
                          v375 = 92;
                        v376 = *(unsigned int *)((char *)v364 + v375);
                        if ((_DWORD)v376)
                        {
                          v377 = 8 * v376;
                          v378 = (uint64_t *)v364[10];
                          while ((unint64_t)*v378 >= 0xFFFFFFFFFFFFFFFELL)
                          {
                            ++v378;
                            v377 -= 8;
                            if (!v377)
                              goto LABEL_634;
                          }
                        }
                        else
                        {
                          v378 = (uint64_t *)v364[10];
                        }
                        v379 = (_QWORD *)(v374 + 8 * v376);
                        if (v378 != v379)
                        {
                          v380 = *v378;
                          while (1)
                          {
                            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v837, v380);
                            if (v381)
                            {
                              v826 = *(void **)(v380 + 40);
                              v382 = (unsigned int *)sub_1C598C098((uint64_t)v814, (uint64_t *)&v826);
                              if (*v382 == -1
                                || (v383 = v382[1], v383 == -1)
                                || (v384 = *v382 * (unint64_t)v383, (v384 & 0xFFFFFFFF00000000) != 0)
                                || (_DWORD)v384 == -1)
                              {
                                v787 = 0;
                                goto LABEL_718;
                              }
                              v773 -= v384;
                            }
                            v385 = (unint64_t *)(v378 + 1);
                            v352 = v788;
                            do
                            {
                              if (v385 == v379)
                                goto LABEL_635;
                              v386 = *v385++;
                              v380 = v386;
                            }
                            while (v386 > 0xFFFFFFFFFFFFFFFDLL);
                            v378 = (uint64_t *)(v385 - 1);
                          }
                        }
LABEL_634:
                        v352 = v788;
                      }
LABEL_635:
                      v387 = v830;
                      if (v830 >= (unint64_t)HIDWORD(v830))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v829, (uint64_t)v831, v830 + 1, 8);
                        v387 = v830;
                      }
                      v787 = 0;
                      *((_QWORD *)v829 + v387) = v362;
                      LODWORD(v830) = v830 + 1;
                    }
                    v388 = (unint64_t *)(v359 + 1);
                    do
                    {
                      if (v388 == (unint64_t *)v360)
                      {
                        v4 = v798;
                        goto LABEL_648;
                      }
                      v389 = *v388++;
                      v362 = v389;
                    }
                    while (v389 > 0xFFFFFFFFFFFFFFFDLL);
                    v361 = v822;
                    v359 = (uint64_t *)(v388 - 1);
                    if (!v822)
                      goto LABEL_715;
                    continue;
                  }
                }
                v358 = 8 * v357;
                v359 = *(uint64_t **)(v354 + 32);
                do
                {
                  if ((unint64_t)*v359 < 0xFFFFFFFFFFFFFFFELL)
                    goto LABEL_592;
                  ++v359;
                  v358 -= 8;
                }
                while (v358);
LABEL_648:
                ++v351;
              }
              while (v351 != v352);
              LODWORD(v850) = 0;
              if ((_DWORD)v830)
              {
                v392 = (uint64_t *)v829;
                v393 = (uint64_t *)((char *)v829 + 8 * v830);
                while (1)
                {
                  v394 = *v392;
                  if (v822)
                  {
                    v395 = v822 - 1;
                    v396 = v821[0]
                         + ((unint64_t)(((v394 >> 4) ^ (v394 >> 9)) & (v822 - 1)) << 7);
                    v397 = *(_QWORD *)v396;
                    if (v394 == *(_QWORD *)v396)
                      goto LABEL_658;
                    v398 = 1;
                    LODWORD(v399) = ((v394 >> 4) ^ (v394 >> 9)) & v395;
                    while (v397 != -4096)
                    {
                      v400 = v399 + v398++;
                      v399 = v400 & v395;
                      v397 = *(_QWORD *)(v821[0] + ((unint64_t)v399 << 7));
                      if (v394 == v397)
                      {
                        v396 = v821[0] + (v399 << 7);
                        goto LABEL_658;
                      }
                    }
                    v396 = v821[0] + ((unint64_t)v822 << 7);
                  }
                  else
                  {
                    v396 = v821[0];
                  }
LABEL_658:
                  v350 = v350 & (*(_BYTE *)(v396 + 8) != 0);
                  v349 = (*(unsigned __int8 *)(v396 + 120) | v349) != 0;
                  v401 = *(_QWORD *)(v396 + 32);
                  v402 = v401 == *(_QWORD *)(v396 + 24) ? 44 : 40;
                  v403 = *(unsigned int *)(v396 + v402);
                  if ((_DWORD)v403)
                  {
                    v404 = 8 * v403;
                    v405 = *(uint64_t **)(v396 + 32);
                    while ((unint64_t)*v405 >= 0xFFFFFFFFFFFFFFFELL)
                    {
                      ++v405;
                      v404 -= 8;
                      if (!v404)
                        goto LABEL_668;
                    }
                  }
                  else
                  {
                    v405 = *(uint64_t **)(v396 + 32);
                  }
                  v406 = (uint64_t *)(v401 + 8 * v403);
                  if (v405 != v406)
                    break;
LABEL_668:
                  if (++v392 == v393)
                  {
                    v433 = 2 * ((_DWORD)v850 == 0);
                    goto LABEL_719;
                  }
                }
                v407 = *v405;
                v408 = sub_1C62C4FCC((uint64_t)v816, *v405);
                if (v819 != (_QWORD *)v408)
                {
                  v409 = (_QWORD *)v408;
                  while (1)
                  {
                    v410 = sub_1C477672C((uint64_t)(v409 + 3), v394);
                    v411 = v409[4];
                    v412 = 40;
                    if (v411 == v409[3])
                      v412 = 44;
                    if (v410 == (_QWORD *)(v411 + 8 * *(unsigned int *)((char *)v409 + v412)))
                      break;
                    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v842[16], v407);
                    if (v413)
                    {
                      v826 = *(void **)(v407 + 40);
                      v414 = (unsigned int *)sub_1C598C098((uint64_t)v814, (uint64_t *)&v826);
                      if (*v414 == -1)
                        break;
                      v415 = v414[1];
                      if (v415 == -1)
                        break;
                      v416 = *v414 * (unint64_t)v415;
                      if ((v416 & 0xFFFFFFFF00000000) != 0 || (_DWORD)v416 == -1)
                        break;
                      v795 += v416;
                      if ((v777 & 1) == 0)
                      {
                        v417 = v409[10];
                        v418 = 88;
                        if (v417 == v409[9])
                          v418 = 92;
                        v419 = *(unsigned int *)((char *)v409 + v418);
                        if ((_DWORD)v419)
                        {
                          v420 = 8 * v419;
                          v421 = (uint64_t *)v409[10];
                          while ((unint64_t)*v421 >= 0xFFFFFFFFFFFFFFFELL)
                          {
                            ++v421;
                            v420 -= 8;
                            if (!v420)
                              goto LABEL_703;
                          }
                        }
                        else
                        {
                          v421 = (uint64_t *)v409[10];
                        }
                        v422 = (uint64_t *)(v417 + 8 * v419);
                        if (v421 != v422)
                        {
                          v767 = (unint64_t *)v422;
                          v423 = *v421;
                          while (1)
                          {
                            sub_1C4774094((llvm::SmallPtrSetImplBase *)__b, v423);
                            if (v424)
                            {
                              v826 = *(void **)(v423 + 40);
                              v425 = (unsigned int *)sub_1C598C098((uint64_t)v814, (uint64_t *)&v826);
                              if (*v425 == -1)
                                goto LABEL_718;
                              v426 = v425[1];
                              if (v426 == -1)
                                goto LABEL_718;
                              v427 = *v425 * (unint64_t)v426;
                              if ((v427 & 0xFFFFFFFF00000000) != 0 || (_DWORD)v427 == -1)
                                goto LABEL_718;
                              v770 += v427;
                              v773 += v427;
                            }
                            v428 = (unint64_t *)(v421 + 1);
                            do
                            {
                              if (v428 == v767)
                                goto LABEL_703;
                              v429 = *v428++;
                              v423 = v429;
                            }
                            while (v429 > 0xFFFFFFFFFFFFFFFDLL);
                            v421 = (uint64_t *)(v428 - 1);
                          }
                        }
                      }
LABEL_703:
                      v430 = v850;
                      if (v850 >= (unint64_t)HIDWORD(v850))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v849, (uint64_t)&v851, v850 + 1, 8);
                        v430 = v850;
                      }
                      *((_QWORD *)v849 + v430) = v407;
                      LODWORD(v850) = (_DWORD)v850 + 1;
                    }
                    v431 = (unint64_t *)(v405 + 1);
                    do
                    {
                      if (v431 == (unint64_t *)v406)
                        goto LABEL_668;
                      v432 = *v431++;
                      v407 = v432;
                    }
                    while (v432 > 0xFFFFFFFFFFFFFFFDLL);
                    v409 = (_QWORD *)sub_1C62C4FCC((uint64_t)v816, v407);
                    v405 = (uint64_t *)(v431 - 1);
                    v433 = 1;
                    if (v819 == v409)
                      goto LABEL_719;
                  }
                }
LABEL_718:
                v433 = 1;
LABEL_719:
                v4 = v798;
              }
              else
              {
                v433 = 2;
              }
LABEL_720:
              if (v829 != v831)
                free(v829);
            }
            while (!v433);
            if (v849 != &v851)
              free(v849);
            if (v433 != 2)
              goto LABEL_863;
            if ((v805 & v350 & 1) != 0)
            {
              if (__b[1] == __b[0])
                goto LABEL_728;
              if (LODWORD(v846[0]) >= 0x21
                && (4 * (HIDWORD(v846[0]) - LODWORD(v846[1]))) < LODWORD(v846[0]))
              {
                free(__b[1]);
                v517 = 1 << (33 - __clz(HIDWORD(v846[0]) - LODWORD(v846[1]) - 1));
                v518 = (HIDWORD(v846[0]) - LODWORD(v846[1])) > 0x10;
                LODWORD(v846[1]) = 0;
                if (v518)
                  v519 = v517;
                else
                  v519 = 32;
                v846[0] = (void *)v519;
                v520 = malloc_type_malloc(8 * v519, 0x4065EBACuLL);
                if (v520)
                {
                  __b[1] = v520;
                  memset(v520, 255, 8 * LODWORD(v846[0]));
                  goto LABEL_729;
                }
              }
              else
              {
                memset(__b[1], 255, 8 * LODWORD(v846[0]));
LABEL_728:
                LODWORD(v846[1]) = 0;
                HIDWORD(v846[0]) = 0;
LABEL_729:
                if (v838 == v837)
                {
LABEL_730:
                  v434 = 0;
                  v840 = 0;
                  HIDWORD(v839) = 0;
LABEL_731:
                  if (!v795)
                  {
                    *(_BYTE *)v4 = 1;
                    v761 = v434 == 0;
                    v435 = *(_QWORD *)v764;
                    v436 = llvm::PointerType::get((llvm::PointerType *)(***(_QWORD ***)v764 + 1912), 0);
                    v437 = v436;
                    if (v838 == v837)
                      v438 = (uint64_t *)((char *)&v839 + 4);
                    else
                      v438 = &v839;
                    v439 = *(unsigned int *)v438;
                    v806 = v436;
                    if ((_DWORD)v439)
                    {
                      v440 = 8 * v439;
                      v441 = (uint64_t *)v838;
                      while ((unint64_t)*v441 >= 0xFFFFFFFFFFFFFFFELL)
                      {
                        ++v441;
                        v440 -= 8;
                        if (!v440)
                          goto LABEL_782;
                      }
                    }
                    else
                    {
                      v441 = (uint64_t *)v838;
                    }
                    v446 = (unint64_t *)((char *)v838 + 8 * v439);
                    if (v441 != (uint64_t *)v446)
                    {
                      v447 = *v441;
                      while (1)
                      {
                        v829 = 0;
                        v448 = (void *)v764;
                        if (v435 != v437)
                        {
                          v449 = operator new(0x60uLL);
                          v449[13] = v449[13] & 0x38000000 | 1;
                          *(_QWORD *)v449 = 0;
                          *((_QWORD *)v449 + 1) = 0;
                          *((_QWORD *)v449 + 2) = 0;
                          *((_QWORD *)v449 + 3) = v449 + 8;
                          v853[0] = 257;
                          v448 = (void *)llvm::BitCastInst::BitCastInst((uint64_t)(v449 + 8), v764, v437, (uint64_t)&v849, v447);
                        }
                        v829 = v448;
                        v450 = *(_QWORD *)(v4 + 88);
                        if (v450
                          || (v450 = llvm::Intrinsic::getDeclaration(*(uint64_t **)(v4 + 64), 222, 0, 0),
                              (*(_QWORD *)(v4 + 88) = v450) != 0))
                        {
                          v451 = *(_QWORD *)(v450 + 24);
                        }
                        else
                        {
                          v451 = 0;
                        }
                        v853[0] = 257;
                        v452 = (char *)operator new(0x90uLL);
                        v453 = v452;
                        v454 = (llvm::Value *)(v452 + 64);
                        *((_DWORD *)v452 + 21) = *((_DWORD *)v452 + 21) & 0x38000000 | 2;
                        *(_QWORD *)v452 = 0;
                        *((_QWORD *)v452 + 1) = 0;
                        *((_QWORD *)v452 + 4) = 0;
                        v455 = (uint64_t *)(v452 + 32);
                        *((_QWORD *)v452 + 2) = 0;
                        *((_QWORD *)v452 + 3) = v452 + 64;
                        *((_QWORD *)v452 + 5) = 0;
                        *((_QWORD *)v452 + 6) = 0;
                        *((_QWORD *)v452 + 7) = v452 + 64;
                        *((_QWORD *)v452 + 8) = **(_QWORD **)(v451 + 16);
                        *((_QWORD *)v452 + 9) = 0;
                        v452[80] = 84;
                        v452[81] = 0;
                        *((_WORD *)v452 + 41) = 0;
                        v456 = 2;
                        *((_DWORD *)v452 + 21) = 2;
                        *(_OWORD *)(v452 + 88) = 0u;
                        v457 = v452 + 88;
                        *((_DWORD *)v452 + 30) = 0;
                        *(_OWORD *)(v452 + 104) = 0u;
                        if (v447)
                        {
                          v463 = *(_QWORD *)(v447 + 40);
                          *((_QWORD *)v452 + 13) = v463;
                          *(_WORD *)(v463 + 18) &= ~0x8000u;
                          if ((v452[87] & 0x10) != 0)
                          {
                            v465 = *(_QWORD *)(v463 + 56);
                            if (v465)
                            {
                              v466 = *(llvm::ValueSymbolTable **)(v465 + 104);
                              if (v466)
                                llvm::ValueSymbolTable::reinsertValue(v466, v454);
                            }
                          }
                          v464 = *(_QWORD *)(v447 + 24);
                          *((_QWORD *)v453 + 11) = v464;
                          *((_QWORD *)v453 + 12) = v447 + 24;
                          *(_QWORD *)(v464 + 8) = v457;
                          *(_QWORD *)(v447 + 24) = v457;
                          v456 = *((_DWORD *)v453 + 21);
                        }
                        *((_QWORD *)v453 + 16) = 0;
                        *((_QWORD *)v453 + 17) = v451;
                        sub_1C5382FD4((uint64_t)&v826, (uint64_t *)&v829, &v830, (uint64_t)v454 - 32 * (v456 & 0x7FFFFFF));
                        if (*((_QWORD *)v453 + 4))
                        {
                          **((_QWORD **)v453 + 6) = *((_QWORD *)v453 + 5);
                          v467 = *((_QWORD *)v453 + 5);
                          if (v467)
                            *(_QWORD *)(v467 + 16) = *((_QWORD *)v453 + 6);
                        }
                        *v455 = v450;
                        v437 = v806;
                        if (v450)
                        {
                          v460 = *(_QWORD *)(v450 + 8);
                          v459 = (uint64_t **)(v450 + 8);
                          v458 = v460;
                          *((_QWORD *)v453 + 5) = v460;
                          if (v460)
                            *(_QWORD *)(v458 + 16) = v453 + 40;
                          *((_QWORD *)v453 + 6) = v459;
                          *v459 = v455;
                        }
                        llvm::CallBase::populateBundleOperandInfos((uint64_t)v454, 0, 0, 1u);
                        llvm::Value::setName((uint64_t ***)v454, (uint64_t)&v849);
                        *((_QWORD *)v453 + 16) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)v453 + 16, **((uint64_t ***)v453 + 8), -1, 37);
                        *((_WORD *)v453 + 41) = *((_WORD *)v453 + 41) & 0xFFFC | 1;
                        v461 = (unint64_t *)(v441 + 1);
                        v4 = v798;
                        do
                        {
                          if (v461 == v446)
                            goto LABEL_782;
                          v462 = *v461++;
                          v447 = v462;
                        }
                        while (v462 > 0xFFFFFFFFFFFFFFFDLL);
                        v441 = (uint64_t *)(v461 - 1);
                      }
                    }
LABEL_782:
                    if (__b[1] == __b[0])
                      v468 = (void **)((char *)v846 + 4);
                    else
                      v468 = v846;
                    v469 = *(unsigned int *)v468;
                    if ((_DWORD)v469)
                    {
                      v470 = 8 * v469;
                      v471 = (uint64_t *)__b[1];
                      while ((unint64_t)*v471 >= 0xFFFFFFFFFFFFFFFELL)
                      {
                        ++v471;
                        v470 -= 8;
                        if (!v470)
                          goto LABEL_829;
                      }
                    }
                    else
                    {
                      v471 = (uint64_t *)__b[1];
                    }
                    v472 = (unint64_t *)((char *)__b[1] + 8 * v469);
                    if (v471 != (uint64_t *)v472)
                    {
                      v473 = *v471;
                      while (1)
                      {
                        v829 = 0;
                        v474 = (void *)v764;
                        if (v435 != v437)
                        {
                          v475 = operator new(0x60uLL);
                          v475[13] = v475[13] & 0x38000000 | 1;
                          *(_QWORD *)v475 = 0;
                          *((_QWORD *)v475 + 1) = 0;
                          *((_QWORD *)v475 + 2) = 0;
                          *((_QWORD *)v475 + 3) = v475 + 8;
                          v853[0] = 257;
                          v474 = (void *)llvm::BitCastInst::BitCastInst((uint64_t)(v475 + 8), v764, v437, (uint64_t)&v849, v473);
                        }
                        v829 = v474;
                        v476 = *(_QWORD *)(v4 + 80);
                        if (v476
                          || (v476 = llvm::Intrinsic::getDeclaration(*(uint64_t **)(v4 + 64), 221, 0, 0),
                              (*(_QWORD *)(v4 + 80) = v476) != 0))
                        {
                          v477 = *(_QWORD *)(v476 + 24);
                        }
                        else
                        {
                          v477 = 0;
                        }
                        v853[0] = 257;
                        v478 = (char *)operator new(0x90uLL);
                        v479 = v478;
                        v480 = (llvm::Value *)(v478 + 64);
                        *((_DWORD *)v478 + 21) = *((_DWORD *)v478 + 21) & 0x38000000 | 2;
                        *(_QWORD *)v478 = 0;
                        *((_QWORD *)v478 + 1) = 0;
                        *((_QWORD *)v478 + 4) = 0;
                        v481 = (uint64_t *)(v478 + 32);
                        *((_QWORD *)v478 + 2) = 0;
                        *((_QWORD *)v478 + 3) = v478 + 64;
                        *((_QWORD *)v478 + 5) = 0;
                        *((_QWORD *)v478 + 6) = 0;
                        *((_QWORD *)v478 + 7) = v478 + 64;
                        *((_QWORD *)v478 + 8) = **(_QWORD **)(v477 + 16);
                        *((_QWORD *)v478 + 9) = 0;
                        v478[80] = 84;
                        v478[81] = 0;
                        *((_WORD *)v478 + 41) = 0;
                        v482 = 2;
                        *((_DWORD *)v478 + 21) = 2;
                        *(_OWORD *)(v478 + 88) = 0u;
                        v483 = v478 + 88;
                        *((_DWORD *)v478 + 30) = 0;
                        *(_OWORD *)(v478 + 104) = 0u;
                        if (v473)
                        {
                          v494 = *(_QWORD *)(v473 + 40);
                          *((_QWORD *)v478 + 13) = v494;
                          *(_WORD *)(v494 + 18) &= ~0x8000u;
                          if ((v478[87] & 0x10) != 0)
                          {
                            v496 = *(_QWORD *)(v494 + 56);
                            if (v496)
                            {
                              v497 = *(llvm::ValueSymbolTable **)(v496 + 104);
                              if (v497)
                                llvm::ValueSymbolTable::reinsertValue(v497, v480);
                            }
                          }
                          v495 = *(_QWORD *)(v473 + 24);
                          *((_QWORD *)v479 + 11) = v495;
                          *((_QWORD *)v479 + 12) = v473 + 24;
                          *(_QWORD *)(v495 + 8) = v483;
                          *(_QWORD *)(v473 + 24) = v483;
                          v482 = *((_DWORD *)v479 + 21);
                        }
                        *((_QWORD *)v479 + 16) = 0;
                        *((_QWORD *)v479 + 17) = v477;
                        sub_1C5382FD4((uint64_t)&v826, (uint64_t *)&v829, &v830, (uint64_t)v480 - 32 * (v482 & 0x7FFFFFF));
                        if (*((_QWORD *)v479 + 4))
                        {
                          **((_QWORD **)v479 + 6) = *((_QWORD *)v479 + 5);
                          v498 = *((_QWORD *)v479 + 5);
                          if (v498)
                            *(_QWORD *)(v498 + 16) = *((_QWORD *)v479 + 6);
                        }
                        *v481 = v476;
                        v437 = v806;
                        if (v476)
                        {
                          v486 = *(_QWORD *)(v476 + 8);
                          v485 = (uint64_t **)(v476 + 8);
                          v484 = v486;
                          *((_QWORD *)v479 + 5) = v486;
                          if (v486)
                            *(_QWORD *)(v484 + 16) = v479 + 40;
                          *((_QWORD *)v479 + 6) = v485;
                          *v485 = v481;
                        }
                        llvm::CallBase::populateBundleOperandInfos((uint64_t)v480, 0, 0, 1u);
                        llvm::Value::setName((uint64_t ***)v480, (uint64_t)&v849);
                        v487 = v833;
                        if (v833)
                        {
                          if (*(_BYTE *)(v798 + 172))
                          {
                            v488 = *(_DWORD *)(v798 + 168);
                          }
                          else
                          {
                            v488 = llvm::LLVMContext::getMDKindID(**(uint64_t ***)(v798 + 160), "clang.imprecise_release", 0x17uLL);
                            v489 = *(unsigned __int8 *)(v798 + 172);
                            *(_DWORD *)(v798 + 168) = v488;
                            if (!v489)
                              *(_BYTE *)(v798 + 172) = 1;
                          }
                          if (v488)
                          {
                            llvm::Value::setMetadata(v480, v488, v487);
                          }
                          else
                          {
                            v849 = v487;
                            llvm::MetadataTracking::track((uint64_t)&v849, (unsigned __int8 *)v487, 2);
                            v492 = (unsigned __int8 *)*((_QWORD *)v479 + 14);
                            if (v492)
                              llvm::MetadataTracking::untrack((uint64_t)(v479 + 112), v492);
                            v493 = (unsigned __int8 *)v849;
                            *((_QWORD *)v479 + 14) = v849;
                            if (v493)
                              llvm::MetadataTracking::retrack((uint64_t)&v849, v493, (uint64_t)(v479 + 112));
                          }
                        }
                        *((_QWORD *)v479 + 16) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)v479 + 16, **(uint64_t ***)v480, -1, 37);
                        if (BYTE1(v832))
                          *((_WORD *)v479 + 41) = *((_WORD *)v479 + 41) & 0xFFFC | 1;
                        v490 = (unint64_t *)(v471 + 1);
                        v4 = v798;
                        do
                        {
                          if (v490 == v472)
                            goto LABEL_829;
                          v491 = *v490++;
                          v473 = v491;
                        }
                        while (v491 > 0xFFFFFFFFFFFFFFFDLL);
                        v471 = (uint64_t *)(v490 - 1);
                      }
                    }
LABEL_829:
                    if (*(_QWORD *)&v842[24] == *(_QWORD *)&v842[16])
                      v499 = (void **)((char *)v843 + 4);
                    else
                      v499 = v843;
                    v500 = *(unsigned int *)v499;
                    if ((_DWORD)v500)
                    {
                      v501 = 8 * v500;
                      v502 = *(uint64_t **)&v842[24];
                      while ((unint64_t)*v502 >= 0xFFFFFFFFFFFFFFFELL)
                      {
                        ++v502;
                        v501 -= 8;
                        if (!v501)
                          goto LABEL_846;
                      }
                    }
                    else
                    {
                      v502 = *(uint64_t **)&v842[24];
                    }
                    v503 = *(_QWORD *)&v842[24] + 8 * v500;
                    if (v502 != (uint64_t *)v503)
                    {
                      v504 = *v502;
                      while (1)
                      {
                        sub_1C62C5038((uint64_t)v816, v504);
                        v505 = v855;
                        if (v855 >= (unint64_t)HIDWORD(v855))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v854, (uint64_t)&v856, v855 + 1, 8);
                          v505 = v855;
                        }
                        *((_QWORD *)v854 + v505) = v504;
                        LODWORD(v855) = (_DWORD)v855 + 1;
                        v506 = (unint64_t *)(v502 + 1);
                        do
                        {
                          if (v506 == (unint64_t *)v503)
                            goto LABEL_846;
                          v507 = *v506++;
                          v504 = v507;
                        }
                        while (v507 > 0xFFFFFFFFFFFFFFFDLL);
                        v502 = (uint64_t *)(v506 - 1);
                      }
                    }
LABEL_846:
                    if (*((_QWORD *)&v834 + 1) == (_QWORD)v834)
                      v508 = (unsigned int *)&v835 + 1;
                    else
                      v508 = (unsigned int *)&v835;
                    v509 = *v508;
                    if ((_DWORD)v509)
                    {
                      v510 = 8 * v509;
                      v511 = (uint64_t *)*((_QWORD *)&v834 + 1);
                      while ((unint64_t)*v511 >= 0xFFFFFFFFFFFFFFFELL)
                      {
                        ++v511;
                        v510 -= 8;
                        if (!v510)
                          goto LABEL_863;
                      }
                    }
                    else
                    {
                      v511 = (uint64_t *)*((_QWORD *)&v834 + 1);
                    }
                    v512 = *((_QWORD *)&v834 + 1) + 8 * v509;
                    if (v511 != (uint64_t *)v512)
                    {
                      v513 = *v511;
                      while (1)
                      {
                        sub_1C62C50BC((uint64_t)v821, v513);
                        v514 = v855;
                        if (v855 >= (unint64_t)HIDWORD(v855))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v854, (uint64_t)&v856, v855 + 1, 8);
                          v514 = v855;
                        }
                        *((_QWORD *)v854 + v514) = v513;
                        LODWORD(v855) = (_DWORD)v855 + 1;
                        v515 = (unint64_t *)(v511 + 1);
                        do
                        {
                          if (v515 == (unint64_t *)v512)
                            goto LABEL_863;
                          v516 = *v515++;
                          v513 = v516;
                        }
                        while (v516 > 0xFFFFFFFFFFFFFFFDLL);
                        v511 = (uint64_t *)(v515 - 1);
                      }
                    }
                  }
                  goto LABEL_863;
                }
                if (v839 < 0x21 || 4 * (HIDWORD(v839) - v840) >= v839)
                {
                  memset(v838, 255, 8 * v839);
                  goto LABEL_730;
                }
                free(v838);
                v521 = 1 << (33 - __clz(HIDWORD(v839) - v840 - 1));
                v518 = (HIDWORD(v839) - v840) > 0x10;
                v840 = 0;
                if (v518)
                  v522 = v521;
                else
                  v522 = 32;
                v839 = v522;
                v523 = malloc_type_malloc(8 * v522, 0x4065EBACuLL);
                if (v523)
                {
                  v838 = v523;
                  memset(v523, 255, 8 * v839);
                  v434 = 0;
                  goto LABEL_731;
                }
              }
LABEL_1271:
              llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
            }
            if (!v773)
            {
              v443 = HIDWORD(v846[0]) == LODWORD(v846[1]) && HIDWORD(v839) == v840;
              if (!v349)
              {
                v434 = v770;
                goto LABEL_731;
              }
              v434 = v770;
              if (v443)
                goto LABEL_731;
            }
LABEL_863:
            if (v838 != v837)
              free(v838);
            if (*((_QWORD *)&v834 + 1) != (_QWORD)v834)
              free(*((void **)&v834 + 1));
            if (__b[1] != __b[0])
              free(__b[1]);
            if (*(_QWORD *)&v842[24] != *(_QWORD *)&v842[16])
              free(*(void **)&v842[24]);
            v341 = v765;
            v342 = v763;
LABEL_571:
            v341 += 16;
            if (v341 == v342)
            {
              while (1)
              {
                while (1)
                {
LABEL_896:
                  if (!(_DWORD)v855)
                    goto LABEL_897;
                  v524 = *((_QWORD *)v854 + v855 - 1);
                  LODWORD(v855) = (_DWORD)v855 - 1;
                  v525 = *(_QWORD *)(v524 - 32 * (*(_DWORD *)(v524 + 20) & 0x7FFFFFF));
                  if (!*(_QWORD *)(v524 + 8))
                    break;
                  llvm::Value::doRAUW((llvm::ValueAsMetadata *)v524, *(llvm::Value **)(v524 - 32 * (*(_DWORD *)(v524 + 20) & 0x7FFFFFF)), (llvm::Value *)1);
                  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v524 + 40) + 40, (uint64_t ***)v524);
                  v526 = *(_QWORD *)(v524 + 24);
                  v527 = *(_QWORD **)(v524 + 32);
                  *v527 = v526;
                  *(_QWORD *)(v526 + 8) = v527;
                  *(_QWORD *)(v524 + 24) = 0;
                  *(_QWORD *)(v524 + 32) = 0;
                  llvm::Value::deleteValue((llvm::Value *)v524);
                }
                llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v524 + 40) + 40, (uint64_t ***)v524);
                v528 = *(_QWORD *)(v524 + 24);
                v529 = *(_QWORD **)(v524 + 32);
                *v529 = v528;
                *(_QWORD *)(v528 + 8) = v529;
                *(_QWORD *)(v524 + 24) = 0;
                *(_QWORD *)(v524 + 32) = 0;
                llvm::Value::deleteValue((llvm::Value *)v524);
                *(_QWORD *)&v842[24] = 0;
                llvm::RecursivelyDeleteTriviallyDeadInstructions(v525, 0, 0, v842);
                if (*(_BYTE **)&v842[24] == v842)
                {
                  v530 = *(void (**)(void))(*(_QWORD *)v842 + 32);
                }
                else
                {
                  if (!*(_QWORD *)&v842[24])
                    goto LABEL_896;
                  v530 = *(void (**)(void))(**(_QWORD **)&v842[24] + 40);
                }
                v530();
              }
            }
          }
        }
        v761 = 0;
LABEL_897:
        if (v854 != (llvm::Value *)&v856)
          free(v854);
        v343 = v761 & v760;
      }
      v531 = v814[0];
      if (v815)
      {
        v532 = 176 * v815;
        v533 = v814[0] + 160;
        do
        {
          if ((*(_QWORD *)(v533 - 160) | 0x1000) != 0xFFFFFFFFFFFFF000)
          {
            v534 = *(void **)(v533 - 16);
            if ((void *)v533 != v534)
              free(v534);
            v535 = *(void **)(v533 - 48);
            if ((void *)(v533 - 32) != v535)
              free(v535);
            sub_1C62C49E0(v533 - 96);
            sub_1C62C49E0(v533 - 144);
          }
          v533 += 176;
          v532 -= 176;
        }
        while (v532);
        v531 = v814[0];
      }
      MEMORY[0x1CAA32FB4](v531, 8);
      sub_1C62C5128((uint64_t)v816);
      v536 = v821[0];
      if (v822)
      {
        v537 = (_QWORD *)(v821[0] + 8);
        v538 = (unint64_t)v822 << 7;
        do
        {
          if ((*(v537 - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
            v537 = sub_1C62C4A24(v537);
          v537 += 16;
          v538 -= 128;
        }
        while (v538);
      }
      MEMORY[0x1CAA32FB4](v536, 8);
      if ((v343 & 1) == 0)
      {
        v172 = *(_DWORD *)(v4 + 204);
        goto LABEL_1174;
      }
    }
    memset(v855, 255, 8 * v856);
LABEL_381:
    v857 = 0;
    HIDWORD(v856) = 0;
    goto LABEL_382;
  }
LABEL_1174:
  if ((v172 & 0x60) != 0 && *(_BYTE *)(**(_QWORD **)(*(_QWORD *)(a2 + 24) + 16) + 8) == 15)
  {
    for (ii = *(_QWORD **)(a2 + 80); ii != v799; ii = (_QWORD *)ii[1])
    {
      if (ii)
        v708 = (char *)(ii - 3);
      else
        v708 = 0;
      v709 = *((_QWORD *)v708 + 5);
      if (v709)
        v710 = v709 - 24;
      else
        v710 = 0;
      if (v709)
        v711 = *(_BYTE *)(v710 + 16) == 29;
      else
        v711 = 0;
      if (!v711)
        continue;
      v712 = sub_1C61AB204(*(llvm::Value **)(v710 - 32 * (*(_DWORD *)(v710 + 20) & 0x7FFFFFF)));
      *(_QWORD *)v842 = v843;
      *(_QWORD *)&v842[8] = v843;
      *(_QWORD *)&v842[16] = 4;
      *(_DWORD *)&v842[24] = 0;
      SingleDependency = llvm::objcarc::findSingleDependency(0, (uint64_t)v712, v708, v710);
      v715 = (uint64_t)SingleDependency;
      if (SingleDependency)
      {
        if (SingleDependency[16] == 84
          && (v716 = *((_QWORD *)SingleDependency - 4)) != 0
          && !*(_BYTE *)(v716 + 16)
          && *(_QWORD *)(v716 + 24) == *(_QWORD *)(v715 + 72)
          && llvm::objcarc::GetFunctionClass((llvm::objcarc *)v716, v714) - 5 <= 1)
        {
          if (sub_1C61AB204(*(llvm::Value **)(v715 - 32 * (*(_DWORD *)(v715 + 20) & 0x7FFFFFF))) != v712)
            v715 = 0;
        }
        else
        {
          v715 = 0;
        }
      }
      if (*(_QWORD *)&v842[8] != *(_QWORD *)v842)
        free(*(void **)&v842[8]);
      if (!v715)
        continue;
      v717 = llvm::objcarc::findSingleDependency(2, (uint64_t)v712, *(char **)(v715 + 40), v715);
      if (!v717)
        continue;
      v719 = (uint64_t)v717;
      if (v717[16] != 84)
        continue;
      v720 = *((_QWORD *)v717 - 4);
      if (!v720)
        continue;
      if (*(_BYTE *)(v720 + 16))
        continue;
      if (*(_QWORD *)(v720 + 24) != *(_QWORD *)(v719 + 72))
        continue;
      if (llvm::objcarc::GetFunctionClass((llvm::objcarc *)v720, v718) > 1)
        continue;
      if (sub_1C61AB204(*(llvm::Value **)(v719 - 32 * (*(_DWORD *)(v719 + 20) & 0x7FFFFFF))) != v712)
        continue;
      v721 = llvm::objcarc::findSingleDependency(2, (uint64_t)v712, *(char **)(v719 + 40), v719);
      if (!v721)
        continue;
      v723 = v721[16];
      v724 = v723 == 84;
      v725 = v723 == 84 ? (llvm::Value *)v721 : 0;
      if (!v724 || v725 != v712)
        continue;
      v727 = *((unsigned __int8 *)v712 + 16);
      if (v727 == 84)
      {
        v729 = *((_QWORD *)v712 - 4);
        if (!v729 || *(_BYTE *)(v729 + 16) || *(_QWORD *)(v729 + 24) != *((_QWORD *)v712 + 9))
          goto LABEL_1228;
        v728 = llvm::objcarc::GetFunctionClass((llvm::objcarc *)v729, v722);
      }
      else if (v727 == 33)
      {
        v728 = 21;
      }
      else
      {
        v728 = 23;
      }
      if ((v728 - 21) > 1)
        continue;
LABEL_1228:
      if ((*((_WORD *)v712 + 9) & 3u) - 1 >= 2 && *(_BYTE *)(v719 + 16) == 84)
      {
        v730 = *(_QWORD *)(v719 - 32);
        if (v730)
        {
          if (!*(_BYTE *)(v730 + 16)
            && *(_QWORD *)(v730 + 24) == *(_QWORD *)(v719 + 72)
            && llvm::objcarc::GetFunctionClass((llvm::objcarc *)v730, v722) == 1
            && *(_BYTE *)(v715 + 16) == 84)
          {
            v732 = *(_QWORD *)(v715 - 32);
            if (v732)
            {
              if (!*(_BYTE *)(v732 + 16)
                && *(_QWORD *)(v732 + 24) == *(_QWORD *)(v715 + 72)
                && llvm::objcarc::GetFunctionClass((llvm::objcarc *)v732, v731) == 6)
              {
                continue;
              }
            }
          }
        }
      }
      *(_BYTE *)v798 = 1;
      v733 = *(uint64_t **)(v798 + 192);
      v832 = (void *)v719;
      *(_QWORD *)v842 = 0;
      v809 = (int32x2_t *)v733;
      if (sub_1C61252B8(v733, &v832, v842))
      {
        v735 = *(_QWORD **)v842;
        if (*(_QWORD *)v842 != *(_QWORD *)v809 + 16 * v809[2].u32[0])
        {
          v736 = *(llvm::CallBase **)(*(_QWORD *)v842 + 8);
          v737 = *((_QWORD *)v736 + 1);
          if (v737)
          {
            while (1)
            {
              v738 = *(_QWORD *)(v737 + 24);
              if (v738)
              {
                if (*(_BYTE *)(v738 + 16) == 84)
                {
                  v739 = *(_QWORD *)(v738 - 32);
                  if (v739)
                  {
                    if (!*(_BYTE *)(v739 + 16)
                      && *(_QWORD *)(v739 + 24) == *(_QWORD *)(v738 + 72)
                      && *(_DWORD *)(v739 + 36) == 213)
                    {
                      break;
                    }
                  }
                }
              }
              v737 = *(_QWORD *)(v737 + 8);
              if (!v737)
                goto LABEL_1251;
            }
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v738 + 40) + 40, (uint64_t ***)v738);
            v740 = *(_QWORD *)(v738 + 24);
            v741 = *(_QWORD **)(v738 + 32);
            *v741 = v740;
            *(_QWORD *)(v740 + 8) = v741;
            *(_QWORD *)(v738 + 24) = 0;
            *(_QWORD *)(v738 + 32) = 0;
            llvm::Value::deleteValue((llvm::Value *)v738);
            v736 = (llvm::CallBase *)v735[1];
          }
LABEL_1251:
          v742 = llvm::CallBase::removeOperandBundle(v736, (llvm::CallBase *)6, v736, v734);
          llvm::Instruction::copyMetadata((uint64_t)v742, v735[1], 0, 0);
          llvm::Value::doRAUW((llvm::ValueAsMetadata *)v735[1], (llvm::Value *)v742, (llvm::Value *)1);
          v743 = v735[1];
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v743 + 40) + 40, (uint64_t ***)v743);
          v744 = *(_QWORD *)(v743 + 24);
          v745 = *(_QWORD **)(v743 + 32);
          *v745 = v744;
          *(_QWORD *)(v744 + 8) = v745;
          *(_QWORD *)(v743 + 24) = 0;
          *(_QWORD *)(v743 + 32) = 0;
          llvm::Value::deleteValue((llvm::Value *)v743);
          *v735 = -8192;
          v809[1] = vadd_s32(v809[1], (int32x2_t)0x1FFFFFFFFLL);
        }
      }
      v746 = *(_QWORD *)(v719 - 32 * (*(_DWORD *)(v719 + 20) & 0x7FFFFFF));
      if (*(_QWORD *)(v719 + 8))
      {
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v719, *(llvm::Value **)(v719 - 32 * (*(_DWORD *)(v719 + 20) & 0x7FFFFFF)), (llvm::Value *)1);
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v719 + 40) + 40, (uint64_t ***)v719);
        v747 = *(_QWORD *)(v719 + 24);
        v748 = *(_QWORD **)(v719 + 32);
        *v748 = v747;
        *(_QWORD *)(v747 + 8) = v748;
        *(_QWORD *)(v719 + 24) = 0;
        *(_QWORD *)(v719 + 32) = 0;
        llvm::Value::deleteValue((llvm::Value *)v719);
        goto LABEL_1259;
      }
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v719 + 40) + 40, (uint64_t ***)v719);
      v749 = *(_QWORD *)(v719 + 24);
      v750 = *(_QWORD **)(v719 + 32);
      *v750 = v749;
      *(_QWORD *)(v749 + 8) = v750;
      *(_QWORD *)(v719 + 24) = 0;
      *(_QWORD *)(v719 + 32) = 0;
      llvm::Value::deleteValue((llvm::Value *)v719);
      *(_QWORD *)&v842[24] = 0;
      llvm::RecursivelyDeleteTriviallyDeadInstructions(v746, 0, 0, v842);
      if (*(_BYTE **)&v842[24] == v842)
      {
        v751 = *(void (**)(void))(*(_QWORD *)v842 + 32);
      }
      else
      {
        if (!*(_QWORD *)&v842[24])
          goto LABEL_1259;
        v751 = *(void (**)(void))(**(_QWORD **)&v842[24] + 40);
      }
      v751();
LABEL_1259:
      v752 = *(_QWORD *)(v715 - 32 * (*(_DWORD *)(v715 + 20) & 0x7FFFFFF));
      if (*(_QWORD *)(v715 + 8))
      {
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v715, *(llvm::Value **)(v715 - 32 * (*(_DWORD *)(v715 + 20) & 0x7FFFFFF)), (llvm::Value *)1);
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v715 + 40) + 40, (uint64_t ***)v715);
        v753 = *(_QWORD *)(v715 + 24);
        v754 = *(_QWORD **)(v715 + 32);
        *v754 = v753;
        *(_QWORD *)(v753 + 8) = v754;
        *(_QWORD *)(v715 + 24) = 0;
        *(_QWORD *)(v715 + 32) = 0;
        llvm::Value::deleteValue((llvm::Value *)v715);
      }
      else
      {
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v715 + 40) + 40, (uint64_t ***)v715);
        v755 = *(_QWORD *)(v715 + 24);
        v756 = *(_QWORD **)(v715 + 32);
        *v756 = v755;
        *(_QWORD *)(v755 + 8) = v756;
        *(_QWORD *)(v715 + 24) = 0;
        *(_QWORD *)(v715 + 32) = 0;
        llvm::Value::deleteValue((llvm::Value *)v715);
        *(_QWORD *)&v842[24] = 0;
        llvm::RecursivelyDeleteTriviallyDeadInstructions(v752, 0, 0, v842);
        if (*(_BYTE **)&v842[24] == v842)
        {
          v757 = *(void (**)(void))(*(_QWORD *)v842 + 32);
          goto LABEL_1265;
        }
        if (*(_QWORD *)&v842[24])
        {
          v757 = *(void (**)(void))(**(_QWORD **)&v842[24] + 40);
LABEL_1265:
          v757();
        }
      }
    }
  }
  v11 = *(_BYTE *)v798 != 0;
  llvm::objcarc::BundledRetainClaimRVs::~BundledRetainClaimRVs(v810);
  return v11;
}

uint64_t sub_1C598A3C4()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C598528C(v0);
}

void sub_1C598A3EC(uint64_t *a1)
{
  *a1 = (uint64_t)&off_1E8184CF8;
  sub_1C4EC4314(a1 + 9);
  MEMORY[0x1CAA32FB4](a1[6], 8);
  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1C598A428(uint64_t *a1)
{
  *a1 = (uint64_t)&off_1E8184CF8;
  sub_1C4EC4314(a1 + 9);
  MEMORY[0x1CAA32FB4](a1[6], 8);
  llvm::Pass::~Pass((llvm::Pass *)a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C598A478(uint64_t a1, uint64_t a2)
{
  if (llvm::objcarc::EnableARCOpts)
  {
    *(_QWORD *)(a1 + 208) = 0;
    *(_QWORD *)(a1 + 216) = 0;
    *(_QWORD *)(a1 + 192) = a2;
    *(_QWORD *)(a1 + 200) = 0;
    *(_QWORD *)(a1 + 96) = a2;
    *(_OWORD *)(a1 + 104) = 0u;
    *(_OWORD *)(a1 + 120) = 0u;
    *(_OWORD *)(a1 + 136) = 0u;
    *(_OWORD *)(a1 + 152) = 0u;
    *(_OWORD *)(a1 + 168) = 0u;
    *(_QWORD *)(a1 + 184) = 0;
  }
  return 0;
}

void *sub_1C598A4B8(uint64_t a1, uint64_t a2)
{
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::objcarc::ObjCARCAAWrapperPass::ID);
  return sub_1C4771E64(a2, a2, (uint64_t)&llvm::AAResultsWrapperPass::ID);
}

llvm::ValueHandleBase *sub_1C598A4F4(uint64_t a1)
{
  sub_1C6201058((unsigned int *)(a1 + 48));
  return sub_1C62C493C((llvm::ValueHandleBase *)(a1 + 72));
}

BOOL sub_1C598A51C(uint64_t a1, uint64_t a2)
{
  void **v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;

  v3 = **(void ****)(a1 + 8);
  do
  {
    v4 = *v3;
    v3 += 2;
  }
  while (v4 != &llvm::AAResultsWrapperPass::ID);
  v5 = a1 + 32;
  v6 = *(_QWORD *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v3 - 1) + 96))(*(v3 - 1), &llvm::AAResultsWrapperPass::ID)+ 32);
  return sub_1C5985394(v5, a2, v6);
}

llvm::ValueHandleBase *sub_1C598A580(llvm::ValueHandleBase *result)
{
  llvm::ValueHandleBase *v1;
  uint64_t v2;
  int v3;
  uint64_t v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;

  v1 = result;
  v2 = *((unsigned int *)result + 4);
  v3 = *((_DWORD *)result + 2);
  if ((_DWORD)v2)
  {
    v4 = 56 * v2;
    result = (llvm::ValueHandleBase *)(*(_QWORD *)result + 8);
    do
    {
      if ((*((_QWORD *)result - 1) | 0x1000) != 0xFFFFFFFFFFFFF000)
        result = sub_1C61A406C(result);
      result = (llvm::ValueHandleBase *)((char *)result + 56);
      v4 -= 56;
    }
    while (v4);
  }
  v5 = 1 << (33 - __clz(v3 - 1));
  if (v5 <= 64)
    v5 = 64;
  if (v3)
    v6 = v5;
  else
    v6 = 0;
  if ((_DWORD)v6 == *((_DWORD *)v1 + 4))
  {
    *((_QWORD *)v1 + 1) = 0;
    if ((_DWORD)v6)
    {
      v7 = *(_QWORD **)v1;
      v8 = 56 * v6;
      do
      {
        *v7 = -4096;
        v7 += 7;
        v8 -= 56;
      }
      while (v8);
    }
  }
  else
  {
    result = (llvm::ValueHandleBase *)MEMORY[0x1CAA32FB4](*(_QWORD *)v1, 8);
    if ((_DWORD)v6)
    {
      v9 = (4 * (int)v6 / 3u + 1) | ((unint64_t)(4 * (int)v6 / 3u + 1) >> 1);
      v10 = v9 | (v9 >> 2) | ((v9 | (v9 >> 2)) >> 4);
      LODWORD(v10) = (((v10 | (v10 >> 8)) >> 16) | v10 | (v10 >> 8)) + 1;
      *((_DWORD *)v1 + 4) = v10;
      result = (llvm::ValueHandleBase *)operator new(56 * v10, (std::align_val_t)8uLL);
      *(_QWORD *)v1 = result;
      *((_QWORD *)v1 + 1) = 0;
      v11 = *((unsigned int *)v1 + 4);
      if ((_DWORD)v11)
      {
        v12 = 56 * v11;
        do
        {
          *(_QWORD *)result = -4096;
          result = (llvm::ValueHandleBase *)((char *)result + 56);
          v12 -= 56;
        }
        while (v12);
      }
    }
    else
    {
      *(_QWORD *)v1 = 0;
      *((_QWORD *)v1 + 1) = 0;
      *((_DWORD *)v1 + 4) = 0;
    }
  }
  return result;
}

void sub_1C598A6D0(uint64_t a1, const llvm::Function *a2, uint64_t *a3, int a4, llvm::Value *a5)
{
  uint64_t *v7;
  int v10;
  llvm::Value **v11;
  int v12;
  llvm::Value **v13;
  unsigned int v14;
  BOOL v15;
  int v16;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t *v23;
  unsigned int v24;
  _DWORD *v26;
  const llvm::APInt *v27;
  llvm::StoreInst *v28;
  uint64_t *v29;
  uint64_t v30;
  llvm::Value *v31;
  llvm::UndefValue *v32;
  llvm::Type *v33;
  llvm::UndefValue *v34;
  llvm::Type *v35;
  llvm::UndefValue *v36;
  llvm::ValueAsMetadata *v37;
  _QWORD **v38;
  _QWORD *v39;
  uint64_t *v40;
  _QWORD **v41;
  _QWORD *v42;
  unsigned int v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t *v47;
  uint64_t *v48;
  char *v49;
  _QWORD **v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t **v54;
  uint64_t v55;
  int MDKindID;
  uint64_t *v57;
  llvm::Value *v58;
  llvm::Value *v59;
  unsigned int v60;
  _QWORD **v62;
  uint64_t *j;
  uint64_t v64;
  uint64_t v65;
  unsigned __int8 *v66;
  int v67;
  uint64_t v68;
  llvm::Value *v69;
  unsigned int v70;
  uint64_t v71;
  _QWORD **v72;
  _QWORD *v73;
  void (*v74)(void);
  int v75;
  int v76;
  int v77;
  _QWORD **v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  int v82;
  unsigned int v83;
  uint64_t **v84;
  uint64_t *v85;
  uint64_t **v86;
  int v87;
  BOOL v88;
  unsigned int v89;
  uint64_t v90;
  _QWORD *v91;
  uint64_t v92;
  llvm::ConstantInt *v93;
  unsigned int v94;
  char v95;
  int v96;
  void *Impl;
  unsigned __int8 *v98;
  llvm::Value *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  unsigned int v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  llvm::Value *v108;
  uint64_t v109;
  llvm::Value *v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD **v120;
  _QWORD *v121;
  _QWORD **v122;
  _QWORD *v123;
  void (*v124)(void);
  unsigned int v125;
  char *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  char v132;
  uint64_t v133;
  int v134;
  uint64_t v135;
  unsigned int v136;
  int v137;
  int v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  int v144;
  int v145;
  char *SingleDependency;
  llvm::Value *v147;
  int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  int v152;
  uint64_t v153;
  llvm::Value *v154;
  unsigned int v155;
  int v156;
  int v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  int v163;
  char *v164;
  uint64_t v165;
  char *v166;
  void *v167;
  _QWORD *v168;
  _DWORD *v169;
  char *v170;
  uint64_t v171;
  uint64_t v172;
  _QWORD *v173;
  char *v174;
  _QWORD *v175;
  _QWORD *v176;
  uint64_t v177;
  uint64_t v178;
  _QWORD *v179;
  uint64_t v180;
  char *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  llvm::Value **v185;
  int v186;
  uint64_t v187;
  uint64_t v188;
  unint64_t v189;
  unint64_t v190;
  uint64_t k;
  uint64_t v192;
  uint64_t v193;
  uint64_t v194;
  llvm::ValueSymbolTable *v195;
  unsigned int v196;
  uint64_t v197;
  unint64_t v199;
  uint64_t v200;
  uint64_t v201;
  unsigned int *v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  _QWORD *v208;
  uint64_t v209;
  _QWORD *v210;
  void (*v211)(void);
  uint64_t *i;
  uint64_t v213;
  uint64_t v214;
  int v215;
  uint64_t Declaration;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  int v220;
  uint64_t v221;
  uint64_t v222;
  unsigned __int8 *v223;
  _QWORD *v224;
  llvm::ValueSymbolTable *v225;
  uint64_t **v226;
  uint64_t *v227;
  uint64_t v228;
  uint64_t v229;
  llvm::Value *v230;
  llvm::Value *v231;
  _QWORD *v232;
  llvm::Value *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t *v237;
  _QWORD *v238;
  uint64_t *v239;
  uint64_t *v240;
  uint64_t v241;
  int v242;
  uint64_t v243;
  uint64_t v244[3];
  uint64_t v245;
  void *v246;
  uint64_t v247;
  llvm::Value *v248;
  void **v249;
  __int16 v250;
  char *v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t *v254;
  __int16 v255;
  uint64_t v256;

  v7 = a3;
  v256 = *MEMORY[0x1E0C80C00];
  v239 = &v243;
  v240 = &v243;
  v241 = 1;
  v242 = 0;
  if (a3)
  {
    if (*((_BYTE *)a3 + 16) == 84)
    {
      v40 = *(uint64_t **)(a1 + 192);
      v246 = a3;
      v251 = 0;
      if (sub_1C61252B8(v40, &v246, &v251))
      {
LABEL_97:
        *(_DWORD *)(a1 + 204) |= 1 << a4;
        goto LABEL_109;
      }
    }
  }
  if (((1 << a4) & 0x1FFF380) == 0)
  {
    v10 = *((_DWORD *)v7 + 5);
    v11 = (v10 & 0x40000000) != 0 ? (llvm::Value **)*(v7 - 1) : (llvm::Value **)&v7[-4 * (v10 & 0x7FFFFFF)];
    if (sub_1C598BCE4(*v11, (llvm::SmallPtrSetImplBase *)&v239))
    {
      if (*(_BYTE *)(*v7 + 8) != 7)
      {
        v12 = *((_DWORD *)v7 + 5);
        if ((v12 & 0x40000000) != 0)
          v13 = (llvm::Value **)*(v7 - 1);
        else
          v13 = (llvm::Value **)&v7[-4 * (v12 & 0x7FFFFFF)];
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v7, *v13, (llvm::Value *)1);
      }
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(v7[5] + 40, (uint64_t ***)v7);
      v41 = (_QWORD **)v7[3];
      v42 = (_QWORD *)v7[4];
      *v42 = v41;
      v41[1] = v42;
      v7[3] = 0;
      v7[4] = 0;
      llvm::Value::deleteValue((llvm::Value *)v7);
      *(_BYTE *)a1 = 1;
      goto LABEL_109;
    }
  }
  switch(a4)
  {
    case 1:
      v59 = sub_1C61AB204((llvm::Value *)v7[-4 * (*((_DWORD *)v7 + 5) & 0x7FFFFFF)]);
      v60 = *((unsigned __int8 *)v59 + 16);
      if (v60 < 0x1C)
        goto LABEL_319;
      if (v60 - 33 > 0x33 || ((1 << (v60 - 33)) & 0x8000000000041) == 0)
        goto LABEL_319;
      v62 = (_QWORD **)v7[5];
      if (*((_QWORD ***)v59 + 5) == v62)
      {
        for (i = (uint64_t *)((char *)v59 + 32); ; i = (uint64_t *)(v213 + 8))
        {
          v213 = *i;
          v214 = *i - 24;
          v66 = v213 ? (unsigned __int8 *)v214 : 0;
          v215 = v66[16];
          if (v215 != 77
            && (v215 != 62 || !llvm::GetElementPtrInst::hasAllZeroIndices((llvm::GetElementPtrInst *)v66)))
          {
            break;
          }
        }
      }
      else
      {
        if (v60 != 33 || *((_QWORD ***)v59 - 12) != v62)
          goto LABEL_319;
        for (j = (uint64_t *)(v62 + 6); ; j = (uint64_t *)(v64 + 8))
        {
          v64 = *j;
          v65 = *j - 24;
          v66 = v64 ? (unsigned __int8 *)v65 : 0;
          v67 = v66[16];
          if (v67 != 77
            && (v67 != 62 || !llvm::GetElementPtrInst::hasAllZeroIndices((llvm::GetElementPtrInst *)v66)))
          {
            break;
          }
        }
      }
      if (v66 == (unsigned __int8 *)v7)
      {
LABEL_322:
        a4 = 1;
        goto LABEL_102;
      }
LABEL_319:
      *(_BYTE *)a1 = 1;
      Declaration = *(_QWORD *)(a1 + 88);
      if (!Declaration)
      {
        Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t **)(a1 + 64), 222, 0, 0);
        *(_QWORD *)(a1 + 88) = Declaration;
      }
      sub_1C500A72C((uint64_t)v7, Declaration);
      goto LABEL_322;
    case 6:
      v58 = sub_1C61AB204((llvm::Value *)v7[-4 * (*((_DWORD *)v7 + 5) & 0x7FFFFFF)]);
      if (*((unsigned __int8 *)v58 + 16) - 11 < 0xA)
      {
        a4 = 6;
        goto LABEL_19;
      }
      v99 = v58;
      v246 = &v248;
      v248 = v58;
      v247 = 0x200000001;
      if (*((_BYTE *)v58 + 16) != 83 || *(_QWORD *)(*((_QWORD *)v58 + 5) + 40) == *((_QWORD *)v58 + 5) + 40)
      {
        v103 = 1;
        goto LABEL_324;
      }
      v100 = *(_QWORD *)(*((_QWORD *)v58 + 5) + 48);
      v101 = v100 - 24;
      if (v100)
        v102 = v100 - 24;
      else
        v102 = 0;
      v103 = 1;
      if (!v100 || *(_BYTE *)(v102 + 16) != 83)
        goto LABEL_324;
      do
      {
        if ((llvm::Value *)v101 != v99)
        {
          v104 = *((_DWORD *)v99 + 5);
          v105 = v104 & 0x7FFFFFF;
          if ((v104 & 0x7FFFFFF) != 0)
          {
            v106 = 0;
            while (1)
            {
              v107 = *((_DWORD *)v99 + 5);
              v108 = (v107 & 0x40000000) != 0
                   ? (llvm::Value *)*((_QWORD *)v99 - 1)
                   : (llvm::Value *)((char *)v99 - 32 * (v107 & 0x7FFFFFF));
              v109 = *((_QWORD *)v108 + 4 * *((unsigned int *)v99 + 15) + v106);
              v110 = llvm::Value::stripPointerCasts(*((llvm::Value **)v108 + 4 * v106));
              v111 = *(_DWORD *)(v101 + 20);
              v112 = v111 & 0x7FFFFFF;
              if ((v111 & 0x7FFFFFF) != 0)
              {
                v113 = 0;
                while (1)
                {
                  v114 = v101 - 32 * v112;
                  if ((v111 & 0x40000000) != 0)
                    v114 = *(_QWORD *)(v101 - 8);
                  if (*(_QWORD *)(v114 + 32 * *(unsigned int *)(v101 + 60) + 8 * v113) == v109)
                    break;
                  if (v112 == ++v113)
                    goto LABEL_166;
                }
              }
              else
              {
LABEL_166:
                LODWORD(v113) = -1;
              }
              v115 = (v111 & 0x40000000) != 0 ? *(_QWORD *)(v101 - 8) : v101 - 32 * v112;
              if (v110 != llvm::Value::stripPointerCasts(*(llvm::Value **)(v115 + 32 * v113)))
                break;
              if (++v106 == v105)
                goto LABEL_175;
            }
          }
          else
          {
            LODWORD(v106) = 0;
          }
          if ((_DWORD)v106 == (_DWORD)v105)
          {
LABEL_175:
            v116 = v247;
            if (v247 >= (unint64_t)HIDWORD(v247))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v246, (uint64_t)&v248, v247 + 1, 8);
              v116 = v247;
            }
            *((_QWORD *)v246 + v116) = v101;
            LODWORD(v247) = v247 + 1;
          }
        }
        v117 = *(_QWORD *)(v101 + 32);
        v101 = v117 - 24;
        if (v117)
          v118 = v117 - 24;
        else
          v118 = 0;
      }
      while (v117 && *(_BYTE *)(v118 + 16) == 83);
      v103 = v247;
LABEL_324:
      while (1)
      {
        v217 = *((_QWORD *)v246 + --v103);
        LODWORD(v247) = v103;
        v218 = *(_QWORD *)(v217 + 8);
        if (v218)
          break;
LABEL_338:
        if (!v103)
        {
          *(_BYTE *)a1 = 1;
          v222 = *(_QWORD *)(a1 + 104);
          if (!v222)
          {
            v222 = llvm::Intrinsic::getDeclaration(*(uint64_t **)(a1 + 64), 208, 0, 0);
            *(_QWORD *)(a1 + 104) = v222;
          }
          sub_1C500A72C((uint64_t)v7, v222);
          *((_WORD *)v7 + 9) &= 0xFFFCu;
          a4 = 5;
          goto LABEL_343;
        }
      }
      while (2)
      {
        v219 = *(_QWORD *)(v218 + 24);
        v220 = *(unsigned __int8 *)(v219 + 16);
        if (v220 == 77)
        {
          if (v103 >= HIDWORD(v247))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v246, (uint64_t)&v248, v103 + 1, 8);
            v103 = v247;
          }
          *((_QWORD *)v246 + v103) = v219;
          v103 = v247 + 1;
          LODWORD(v247) = v247 + 1;
          goto LABEL_337;
        }
        if (v220 != 84)
        {
          if (v220 == 29)
            break;
          goto LABEL_337;
        }
        v221 = *(_QWORD *)(v219 - 32);
        if (!v221
          || *(_BYTE *)(v221 + 16)
          || *(_QWORD *)(v221 + 24) != *(_QWORD *)(v219 + 72)
          || llvm::objcarc::GetFunctionClass((llvm::objcarc *)v221, a2) != 1)
        {
LABEL_337:
          v218 = *(_QWORD *)(v218 + 8);
          if (!v218)
            goto LABEL_338;
          continue;
        }
        break;
      }
      a4 = 6;
LABEL_343:
      if (v246 != &v248)
        free(v246);
LABEL_18:
      if ((a4 - 5) > 1)
        goto LABEL_85;
LABEL_19:
      if (v7[1])
        goto LABEL_85;
      v18 = v7[-4 * (*((_DWORD *)v7 + 5) & 0x7FFFFFF)];
      v19 = *(unsigned __int8 *)(v18 + 16);
      if ((v19 - 11) < 0xA)
        goto LABEL_85;
      while (2)
      {
        v20 = *(_QWORD *)(v18 + 8);
        if (!v20 || *(_QWORD *)(v20 + 8))
        {
          if (!sub_1C598BDD8(v18))
            goto LABEL_85;
          v68 = *(_QWORD *)(v18 + 8);
          if (v68)
          {
            do
            {
              v69 = *(llvm::Value **)(v68 + 24);
              if (*((_QWORD *)v69 + 1) || sub_1C61AB204(v69) != (llvm::Value *)v18)
                goto LABEL_85;
              v68 = *(_QWORD *)(v68 + 8);
            }
            while (v68);
            if (!v18)
              goto LABEL_85;
          }
LABEL_50:
          *(_BYTE *)a1 = 1;
          v44 = *(_QWORD *)(a1 + 80);
          v237 = *(uint64_t **)*v7;
          if (v44
            || (v44 = llvm::Intrinsic::getDeclaration(*(uint64_t **)(a1 + 64), 221, 0, 0),
                (*(_QWORD *)(a1 + 80) = v44) != 0))
          {
            v45 = *(_QWORD *)(v44 + 24);
          }
          else
          {
            v45 = 0;
          }
          v251 = (char *)v7[-4 * (*((_DWORD *)v7 + 5) & 0x7FFFFFF)];
          v250 = 257;
          v46 = (char *)operator new(0x90uLL);
          v47 = (uint64_t *)(v46 + 64);
          *((_DWORD *)v46 + 21) = *((_DWORD *)v46 + 21) & 0x38000000 | 2;
          *(_QWORD *)v46 = 0;
          *((_QWORD *)v46 + 1) = 0;
          *((_QWORD *)v46 + 2) = 0;
          *((_QWORD *)v46 + 3) = v46 + 64;
          *((_QWORD *)v46 + 4) = 0;
          v48 = (uint64_t *)(v46 + 32);
          *((_QWORD *)v46 + 5) = 0;
          *((_QWORD *)v46 + 6) = 0;
          *((_QWORD *)v46 + 7) = v46 + 64;
          *((_QWORD *)v46 + 8) = **(_QWORD **)(v45 + 16);
          *((_QWORD *)v46 + 9) = 0;
          v46[80] = 84;
          v46[81] = 0;
          *((_WORD *)v46 + 41) = 0;
          *((_DWORD *)v46 + 21) = 2;
          *(_OWORD *)(v46 + 88) = 0u;
          v49 = v46 + 88;
          *(_OWORD *)(v46 + 104) = 0u;
          *((_DWORD *)v46 + 30) = 0;
          v50 = (_QWORD **)v7[5];
          v51 = v7 + 3;
          *((_QWORD *)v46 + 13) = v50;
          *((_WORD *)v50 + 9) &= ~0x8000u;
          v238 = v7 + 3;
          if ((v46[87] & 0x10) != 0)
          {
            v224 = v50[7];
            if (v224)
            {
              v225 = (llvm::ValueSymbolTable *)v224[13];
              if (v225)
              {
                llvm::ValueSymbolTable::reinsertValue(v225, (llvm::Value *)v47);
                v51 = v7 + 3;
              }
            }
          }
          v52 = *v51;
          *((_QWORD *)v46 + 11) = *v51;
          *((_QWORD *)v46 + 12) = v51;
          *(_QWORD *)(v52 + 8) = v49;
          *v51 = (uint64_t)v49;
          *((_QWORD *)v46 + 16) = 0;
          *((_QWORD *)v46 + 17) = v45;
          sub_1C5382FD4((uint64_t)v244, (uint64_t *)&v251, &v252, (uint64_t)&v47[-4 * (*((_DWORD *)v46 + 21) & 0x7FFFFFF)]);
          if (*((_QWORD *)v46 + 4))
          {
            **((_QWORD **)v46 + 6) = *((_QWORD *)v46 + 5);
            v228 = *((_QWORD *)v46 + 5);
            if (v228)
              *(_QWORD *)(v228 + 16) = *((_QWORD *)v46 + 6);
          }
          *v48 = v44;
          if (v44)
          {
            v55 = *(_QWORD *)(v44 + 8);
            v54 = (uint64_t **)(v44 + 8);
            v53 = v55;
            *((_QWORD *)v46 + 5) = v55;
            if (v55)
              *(_QWORD *)(v53 + 16) = v46 + 40;
            *((_QWORD *)v46 + 6) = v54;
            *v54 = v48;
          }
          llvm::CallBase::populateBundleOperandInfos((uint64_t)v47, 0, 0, 1u);
          llvm::Value::setName((uint64_t ***)v47, (uint64_t)&v246);
          if (*(_BYTE *)(a1 + 172))
          {
            MDKindID = *(_DWORD *)(a1 + 168);
            v57 = v237;
          }
          else
          {
            MDKindID = llvm::LLVMContext::getMDKindID(**(uint64_t ***)(a1 + 160), "clang.imprecise_release", 0x17uLL);
            v96 = *(unsigned __int8 *)(a1 + 172);
            *(_DWORD *)(a1 + 168) = MDKindID;
            v57 = v237;
            if (!v96)
              *(_BYTE *)(a1 + 172) = 1;
          }
          Impl = (void *)llvm::MDTuple::getImpl(v57, 0, 0, 0, 1);
          if (Impl)
          {
            if (!MDKindID)
            {
              v246 = Impl;
              llvm::MetadataTracking::track((uint64_t)&v246, (unsigned __int8 *)Impl, 2);
              v98 = (unsigned __int8 *)*((_QWORD *)v46 + 14);
              goto LABEL_346;
            }
          }
          else
          {
            v98 = (unsigned __int8 *)*((_QWORD *)v46 + 14);
            if (!v98 && (v46[87] & 0x20) == 0)
              goto LABEL_186;
            if (!MDKindID)
            {
              v246 = 0;
LABEL_346:
              if (v98)
                llvm::MetadataTracking::untrack((uint64_t)(v46 + 112), v98);
              v223 = (unsigned __int8 *)v246;
              *((_QWORD *)v46 + 14) = v246;
              if (v223)
                llvm::MetadataTracking::retrack((uint64_t)&v246, v223, (uint64_t)(v46 + 112));
LABEL_186:
              v119 = v7[-4 * (*((_DWORD *)v7 + 5) & 0x7FFFFFF)];
              if (v7[1])
              {
                llvm::Value::doRAUW((llvm::ValueAsMetadata *)v7, (llvm::Value *)v7[-4 * (*((_DWORD *)v7 + 5) & 0x7FFFFFF)], (llvm::Value *)1);
                llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(v7[5] + 40, (uint64_t ***)v7);
                v120 = (_QWORD **)v7[3];
                v121 = (_QWORD *)v7[4];
                *v121 = v120;
                v120[1] = v121;
                *v238 = 0;
                v7[4] = 0;
                llvm::Value::deleteValue((llvm::Value *)v7);
LABEL_309:
                a4 = 4;
LABEL_90:
                *(_BYTE *)a1 = 1;
                v47[8] = llvm::AttributeList::addAttributeAtIndex(v47 + 8, *(uint64_t **)*v47, -1, 37);
                v7 = v47;
                goto LABEL_91;
              }
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(v7[5] + 40, (uint64_t ***)v7);
              v122 = (_QWORD **)v7[3];
              v123 = (_QWORD *)v7[4];
              *v123 = v122;
              v122[1] = v123;
              *v238 = 0;
              v7[4] = 0;
              llvm::Value::deleteValue((llvm::Value *)v7);
              v249 = 0;
              llvm::RecursivelyDeleteTriviallyDeadInstructions(v119, 0, 0, &v246);
              if (v249 == &v246)
              {
                v124 = (void (*)(void))*((_QWORD *)v246 + 4);
              }
              else
              {
                if (!v249)
                  goto LABEL_309;
                v124 = (void (*)(void))*((_QWORD *)*v249 + 5);
              }
              v124();
              goto LABEL_309;
            }
          }
          llvm::Value::setMetadata((llvm::Value *)v47, MDKindID, (llvm::MDNode *)Impl);
          goto LABEL_186;
        }
        switch(v19)
        {
          case '>':
            if ((llvm::GetElementPtrInst::hasAllZeroIndices((llvm::GetElementPtrInst *)v18) & 1) == 0)
              break;
            goto LABEL_33;
          case 'M':
            v22 = -1;
            goto LABEL_34;
          case 'T':
            v21 = *(_QWORD *)(v18 - 32);
            if (v21)
            {
              if (!*(_BYTE *)(v21 + 16)
                && *(_QWORD *)(v21 + 24) == *(_QWORD *)(v18 + 72)
                && ((1 << llvm::objcarc::GetFunctionClass((llvm::objcarc *)v21, a2)) & 0x267) != 0)
              {
LABEL_33:
                v22 = -(uint64_t)(*(_DWORD *)(v18 + 20) & 0x7FFFFFF);
LABEL_34:
                v18 = *(_QWORD *)(v18 + 32 * v22);
                v19 = *(unsigned __int8 *)(v18 + 16);
                if ((v19 - 11) < 0xA)
                  goto LABEL_85;
                continue;
              }
            }
            break;
        }
        break;
      }
      if (sub_1C598BDD8(v18))
        goto LABEL_50;
LABEL_85:
      if ((a4 - 7) >= 0x12 && ((1 << a4) & 0x47) != 0)
      {
LABEL_102:
        v75 = *((unsigned __int16 *)v7 + 9);
        if ((~v75 & 3) != 0)
        {
          *(_BYTE *)a1 = 1;
          *((_WORD *)v7 + 9) = v75 & 0xFFFC | 1;
        }
      }
      if (((1 << a4) & 0x1FFFE08) == 0)
      {
        if (((1 << a4) & 0x1D7) == 0)
        {
          *((_WORD *)v7 + 9) &= 0xFFFCu;
          a4 = 5;
        }
        v47 = v7;
        goto LABEL_90;
      }
LABEL_91:
      if (!a5)
        a5 = sub_1C61AB204((llvm::Value *)v7[-4 * (*((_DWORD *)v7 + 5) & 0x7FFFFFF)]);
      v70 = *((unsigned __int8 *)a5 + 16);
      if (v70 > 0x13 || ((1 << v70) & 0x81800) == 0)
      {
        *(_DWORD *)(a1 + 204) |= 1 << a4;
        if (a4 != 4)
        {
LABEL_193:
          v246 = &v248;
          HIDWORD(v247) = 4;
          v248 = (llvm::Value *)v7;
          v249 = (void **)a5;
          v125 = 1;
          while (1)
          {
            v126 = (char *)v246 + 16 * v125;
            v127 = *((_QWORD *)v126 - 2);
            v128 = *((_QWORD *)v126 - 1);
            LODWORD(v247) = v125 - 1;
            if (!v128)
              goto LABEL_302;
            if (*(_BYTE *)(v128 + 16) != 83)
              goto LABEL_302;
            v129 = *(_DWORD *)(v128 + 20) & 0x7FFFFFF;
            if (!(_DWORD)v129)
              goto LABEL_302;
            v130 = 0;
            v131 = 0;
            v132 = 0;
            v133 = 32 * v129;
            do
            {
              v134 = *(_DWORD *)(v128 + 20);
              if ((v134 & 0x40000000) != 0)
                v135 = *(_QWORD *)(v128 - 8);
              else
                v135 = v128 - 32 * (v134 & 0x7FFFFFF);
              v136 = *((unsigned __int8 *)sub_1C61AB204(*(llvm::Value **)(v135 + v131)) + 16);
              v15 = v136 > 0x13;
              v137 = (1 << v136) & 0x81800;
              if (v15 || v137 == 0)
              {
                v139 = *(_DWORD *)(v128 + 20);
                if ((v139 & 0x40000000) != 0)
                  v140 = *(_QWORD *)(v128 - 8);
                else
                  v140 = v128 - 32 * (v139 & 0x7FFFFFF);
                v141 = *(_QWORD *)(v140 + 32 * *(unsigned int *)(v128 + 60) + v130);
                v142 = *(_QWORD *)(v141 + 40);
                if (v142 == v141 + 40)
                {
                  v143 = 0;
                }
                else
                {
                  if (v142)
                    v143 = v142 - 24;
                  else
                    v143 = 0;
                  if (*(unsigned __int8 *)(v143 + 16) - 29 >= 0xB)
                    v143 = 0;
                }
                v144 = *(unsigned __int8 *)(v143 + 16);
                if (v144 != 30)
                  __asm { BR              X10 }
                if ((*(_DWORD *)(v143 + 20) & 0x7FFFFFF) == 3)
                  goto LABEL_302;
              }
              else
              {
                v132 = 1;
              }
              v131 += 32;
              v130 += 8;
            }
            while (v133 != v131);
            if ((v132 & 1) == 0)
              goto LABEL_302;
            v145 = 0;
            SingleDependency = 0;
            switch(a4)
            {
              case 0:
              case 3:
                goto LABEL_227;
              case 1:
              case 2:
              case 6:
                goto LABEL_302;
              case 4:
                goto LABEL_226;
              case 5:
                v145 = 1;
LABEL_226:
                SingleDependency = llvm::objcarc::findSingleDependency(v145, v128, *(char **)(v127 + 40), v127);
LABEL_227:
                if (SingleDependency != (char *)v128)
                  goto LABEL_302;
                *(_BYTE *)a1 = 1;
                v147 = *(llvm::Value **)(v127 - 32 * (*(_DWORD *)(v127 + 20) & 0x7FFFFFF));
                v148 = *(_DWORD *)(v128 + 20);
                v149 = v148 & 0x7FFFFFF;
                if ((v148 & 0x7FFFFFF) == 0)
                  goto LABEL_295;
                v150 = 0;
                v151 = *(_QWORD *)v147;
                v229 = v127 - 8;
                break;
              default:
                goto LABEL_97;
            }
            do
            {
              v152 = *(_DWORD *)(v128 + 20);
              if ((v152 & 0x40000000) != 0)
                v153 = *(_QWORD *)(v128 - 8);
              else
                v153 = v128 - 32 * (v152 & 0x7FFFFFF);
              v154 = sub_1C61AB204(*(llvm::Value **)(v153 + 32 * v150));
              v155 = *((unsigned __int8 *)v154 + 16);
              v15 = v155 > 0x13;
              v156 = (1 << v155) & 0x81800;
              if (v15 || v156 == 0)
              {
                v158 = *(_DWORD *)(v128 + 20);
                v234 = v149;
                if ((v158 & 0x40000000) != 0)
                  v159 = *(_QWORD *)(v128 - 8);
                else
                  v159 = v128 - 32 * (v158 & 0x7FFFFFF);
                v232 = *(_QWORD **)(v159 + 32 * v150);
                v233 = v154;
                v160 = *(_QWORD *)(*(_QWORD *)(v159 + 32 * *(unsigned int *)(v128 + 60) + 8 * v150) + 40);
                if (v160)
                  v161 = v160 - 24;
                else
                  v161 = 0;
                v235 = v161;
                v162 = *(_QWORD *)(v161 + 40);
                v251 = (char *)&v253;
                v252 = 0x100000000;
                v163 = *(_DWORD *)(v127 + 20);
                if (v163 < 0)
                {
                  v199 = *(_QWORD *)(v229 - 32 * (v163 & 0x7FFFFFF));
                  if ((v199 & 0xFFFFFFFF0) != 0)
                  {
                    v231 = (llvm::Value *)(v199 >> 4);
                    v200 = v127;
                    do
                    {
                      v201 = *(_DWORD *)(v127 + 20) & 0x7FFFFFF;
                      v202 = (unsigned int *)(v200 - (*(_QWORD *)(v229 - 32 * v201) + 32 * v201));
                      v203 = *v202;
                      v204 = v127 - 32 * v201 + 32 * v203;
                      v205 = v202[1] - v203;
                      v206 = *((_QWORD *)v202 - 1);
                      v244[0] = v204;
                      v244[1] = v205;
                      v244[2] = v206;
                      if (*(_DWORD *)(v206 + 8) != 1)
                        sub_1C623D924((uint64_t)&v251, (uint64_t)v244);
                      v200 += 16;
                      v231 = (llvm::Value *)((char *)v231 - 1);
                    }
                    while (v231);
                  }
                }
                if (*((_DWORD *)a2 + 2))
                {
                  v244[0] = v162;
                  v245 = 0;
                  v186 = sub_1C61252B8((uint64_t *)a2, v244, &v245);
                  v187 = v245;
                  if (!v186)
                    v187 = *(_QWORD *)a2 + 16 * *((unsigned int *)a2 + 4);
                  v244[0] = 0;
                  v188 = *(_QWORD *)(v187 + 8);
                  v189 = v188 & 0xFFFFFFFFFFFFFFF8;
                  if ((v188 & 4) != 0)
                    v189 = **(_QWORD **)v189;
                  v190 = v189 + 40;
                  for (k = *(_QWORD *)(v189 + 48); k != v190; k = *(_QWORD *)(k + 8))
                  {
                    v192 = k - 24;
                    if (k)
                      v193 = k - 24;
                    else
                      v193 = 0;
                    if (*(_BYTE *)(v193 + 16) != 83)
                      goto LABEL_284;
                  }
                  v192 = 0;
LABEL_284:
                  v244[0] = v192;
                  v196 = *(unsigned __int8 *)(v192 + 16) - 38;
                  v15 = v196 > 0x38;
                  v197 = (1 << v196) & 0x100060000000001;
                  if (!v15 && v197 != 0)
                    sub_1C58C6FD8((uint64_t)&v251, "funclet", v244);
                }
                v230 = (llvm::Value *)llvm::CallInst::Create((uint64_t ***)v127, (uint64_t)v251, v252, 0);
                v164 = v251;
                v236 = v151;
                if ((_DWORD)v252)
                {
                  v165 = 48 * v252;
                  do
                  {
                    v166 = &v164[v165];
                    v167 = *(void **)&v164[v165 - 24];
                    if (v167)
                    {
                      *((_QWORD *)v166 - 2) = v167;
                      operator delete(v167);
                    }
                    if (*(v166 - 25) < 0)
                      operator delete(*((void **)v166 - 6));
                    v165 -= 48;
                  }
                  while (v165);
                  v164 = v251;
                }
                if (v164 != (char *)&v253)
                  free(v164);
                v168 = v232;
                if (*v232 != v236)
                {
                  v169 = operator new(0x60uLL);
                  v169[13] = v169[13] & 0x38000000 | 1;
                  v170 = (char *)(v169 + 8);
                  *(_QWORD *)v169 = 0;
                  *((_QWORD *)v169 + 1) = 0;
                  *((_QWORD *)v169 + 2) = 0;
                  *((_QWORD *)v169 + 3) = v169 + 8;
                  v255 = 257;
                  llvm::BitCastInst::BitCastInst((uint64_t)(v169 + 8), (uint64_t)v232, v236, (uint64_t)&v251, v235);
                  v168 = v170;
                }
                v149 = v234;
                v171 = *((_DWORD *)v230 + 5) & 0x7FFFFFF;
                v172 = -v171;
                v173 = (_QWORD *)((char *)v230 - 32 * v171);
                if (*v173)
                {
                  v174 = (char *)v230 + 32 * v172;
                  v176 = (_QWORD *)*((_QWORD *)v174 + 2);
                  v175 = v174 + 16;
                  *v176 = *(v175 - 1);
                  v177 = *(v175 - 1);
                  if (v177)
                    *(_QWORD *)(v177 + 16) = *v175;
                }
                *v173 = v168;
                v180 = v168[1];
                v179 = v168 + 1;
                v178 = v180;
                v181 = (char *)v230 + 32 * v172;
                *((_QWORD *)v181 + 1) = v180;
                if (v180)
                  *(_QWORD *)(v178 + 16) = v181 + 8;
                *((_QWORD *)v181 + 2) = v179;
                *v179 = v173;
                v182 = *(_QWORD *)(v235 + 40);
                *((_QWORD *)v230 + 5) = v182;
                *(_WORD *)(v182 + 18) &= ~0x8000u;
                if ((*((_BYTE *)v230 + 23) & 0x10) != 0)
                {
                  v194 = *(_QWORD *)(v182 + 56);
                  if (v194)
                  {
                    v195 = *(llvm::ValueSymbolTable **)(v194 + 104);
                    if (v195)
                      llvm::ValueSymbolTable::reinsertValue(v195, v230);
                  }
                }
                v183 = *(_QWORD *)(v235 + 24);
                *((_QWORD *)v230 + 3) = v183;
                *((_QWORD *)v230 + 4) = v235 + 24;
                *(_QWORD *)(v183 + 8) = (char *)v230 + 24;
                *(_QWORD *)(v235 + 24) = (char *)v230 + 24;
                v184 = v247;
                v151 = v236;
                if (v247 >= (unint64_t)HIDWORD(v247))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v246, (uint64_t)&v248, v247 + 1, 16);
                  v184 = v247;
                }
                v185 = (llvm::Value **)((char *)v246 + 16 * v184);
                *v185 = v230;
                v185[1] = v233;
                LODWORD(v247) = v247 + 1;
              }
              ++v150;
            }
            while (v150 != v149);
            v147 = *(llvm::Value **)(v127 - 32 * (*(_DWORD *)(v127 + 20) & 0x7FFFFFF));
LABEL_295:
            if (*(_QWORD *)(v127 + 8))
            {
              llvm::Value::doRAUW((llvm::ValueAsMetadata *)v127, v147, (llvm::Value *)1);
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v127 + 40) + 40, (uint64_t ***)v127);
              v207 = *(_QWORD *)(v127 + 24);
              v208 = *(_QWORD **)(v127 + 32);
              *v208 = v207;
              *(_QWORD *)(v207 + 8) = v208;
              *(_QWORD *)(v127 + 24) = 0;
              *(_QWORD *)(v127 + 32) = 0;
              llvm::Value::deleteValue((llvm::Value *)v127);
            }
            else
            {
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v127 + 40) + 40, (uint64_t ***)v127);
              v209 = *(_QWORD *)(v127 + 24);
              v210 = *(_QWORD **)(v127 + 32);
              *v210 = v209;
              *(_QWORD *)(v209 + 8) = v210;
              *(_QWORD *)(v127 + 24) = 0;
              *(_QWORD *)(v127 + 32) = 0;
              llvm::Value::deleteValue((llvm::Value *)v127);
              v254 = 0;
              llvm::RecursivelyDeleteTriviallyDeadInstructions((uint64_t)v147, 0, 0, &v251);
              if (v254 == (uint64_t *)&v251)
              {
                v211 = (void (*)(void))*((_QWORD *)v251 + 4);
                goto LABEL_301;
              }
              if (v254)
              {
                v211 = *(void (**)(void))(*v254 + 40);
LABEL_301:
                v211();
              }
            }
LABEL_302:
            v125 = v247;
            if (!(_DWORD)v247)
            {
              if (v246 != &v248)
                free(v246);
              goto LABEL_109;
            }
          }
        }
        if (*(_BYTE *)(a1 + 172))
        {
          v76 = *(_DWORD *)(a1 + 168);
        }
        else
        {
          v76 = llvm::LLVMContext::getMDKindID(**(uint64_t ***)(a1 + 160), "clang.imprecise_release", 0x17uLL);
          v77 = *(unsigned __int8 *)(a1 + 172);
          *(_DWORD *)(a1 + 168) = v76;
          if (!v77)
            *(_BYTE *)(a1 + 172) = 1;
        }
        v78 = (_QWORD **)v7[6];
        if (!v78 && (*((_BYTE *)v7 + 23) & 0x20) == 0)
          goto LABEL_109;
        if (!v76)
        {
LABEL_192:
          if (!v78)
            goto LABEL_109;
          goto LABEL_193;
        }
        if ((*((_BYTE *)v7 + 23) & 0x20) == 0)
          goto LABEL_109;
        v79 = **(_QWORD **)*v7;
        v246 = v7;
        v80 = *(_DWORD *)(v79 + 2496);
        if (v80)
        {
          v81 = *(_QWORD *)(v79 + 2480);
          v82 = v80 - 1;
          v83 = v82 & ((v7 >> 4) ^ (v7 >> 9));
          v84 = (uint64_t **)(v81 + 40 * v83);
          v85 = *v84;
          if (*v84 == v7)
            goto LABEL_128;
          v86 = 0;
          v87 = 1;
          while (v85 != (uint64_t *)-4096)
          {
            if (v86)
              v88 = 0;
            else
              v88 = v85 == (uint64_t *)-8192;
            if (v88)
              v86 = v84;
            v89 = v83 + v87++;
            v83 = v89 & v82;
            v84 = (uint64_t **)(v81 + 40 * v83);
            v85 = *v84;
            if (*v84 == v7)
              goto LABEL_128;
          }
          if (v86)
            v226 = v86;
          else
            v226 = v84;
        }
        else
        {
          v226 = 0;
        }
        v84 = (uint64_t **)sub_1C541AB24(v79 + 2480, (uint64_t)&v246, (uint64_t *)&v246, v226);
        v227 = (uint64_t *)v246;
        v84[3] = 0;
        v84[4] = 0;
        *v84 = v227;
        v84[1] = (uint64_t *)(v84 + 3);
        v84[2] = (uint64_t *)0x100000000;
LABEL_128:
        v90 = *((unsigned int *)v84 + 4);
        if (!(_DWORD)v90)
          goto LABEL_109;
        v91 = v84[1] + 1;
        v92 = 16 * v90;
        while (*((_DWORD *)v91 - 2) != v76)
        {
          v91 += 2;
          v92 -= 16;
          if (!v92)
            goto LABEL_109;
        }
        v78 = (_QWORD **)*v91;
        goto LABEL_192;
      }
LABEL_95:
      *(_BYTE *)a1 = 1;
      v71 = v7[-4 * (*((_DWORD *)v7 + 5) & 0x7FFFFFF)];
      if (v7[1])
      {
        v37 = (llvm::ValueAsMetadata *)v7;
        v36 = (llvm::UndefValue *)v7[-4 * (*((_DWORD *)v7 + 5) & 0x7FFFFFF)];
LABEL_42:
        llvm::Value::doRAUW(v37, v36, (llvm::Value *)1);
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(v7[5] + 40, (uint64_t ***)v7);
        v38 = (_QWORD **)v7[3];
        v39 = (_QWORD *)v7[4];
        *v39 = v38;
        v38[1] = v39;
        v7[3] = 0;
        v7[4] = 0;
        llvm::Value::deleteValue((llvm::Value *)v7);
      }
      else
      {
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(v7[5] + 40, (uint64_t ***)v7);
        v72 = (_QWORD **)v7[3];
        v73 = (_QWORD *)v7[4];
        *v73 = v72;
        v72[1] = v73;
        v7[3] = 0;
        v7[4] = 0;
        llvm::Value::deleteValue((llvm::Value *)v7);
        v249 = 0;
        llvm::RecursivelyDeleteTriviallyDeadInstructions(v71, 0, 0, &v246);
        if (v249 == &v246)
        {
          v74 = (void (*)(void))*((_QWORD *)v246 + 4);
        }
        else
        {
          if (!v249)
            goto LABEL_109;
          v74 = (void (*)(void))*((_QWORD *)*v249 + 5);
        }
        v74();
      }
LABEL_109:
      if (v240 != v239)
        free(v240);
      return;
    case 9:
      goto LABEL_95;
    case 12:
    case 13:
    case 14:
    case 15:
    case 18:
      v14 = *(unsigned __int8 *)(v7[-4 * (*((_DWORD *)v7 + 5) & 0x7FFFFFF)] + 16);
      v15 = v14 > 0x13;
      v16 = (1 << v14) & 0x81800;
      goto LABEL_13;
    case 16:
    case 17:
      v23 = &v7[-4 * (*((_DWORD *)v7 + 5) & 0x7FFFFFF)];
      v24 = *(unsigned __int8 *)(*v23 + 16);
      if (v24 <= 0x13 && ((1 << v24) & 0x81800) != 0)
        goto LABEL_40;
      v43 = *(unsigned __int8 *)(v23[4] + 16);
      v15 = v43 > 0x13;
      v16 = (1 << v43) & 0x81800;
LABEL_13:
      if (v15 || v16 == 0)
        goto LABEL_18;
LABEL_40:
      *(_BYTE *)a1 = 1;
      v26 = operator new(0x80uLL);
      v28 = (llvm::StoreInst *)(v26 + 16);
      v26[21] = v26[21] & 0x38000000 | 2;
      *(_QWORD *)v26 = 0;
      *((_QWORD *)v26 + 1) = 0;
      *((_QWORD *)v26 + 2) = 0;
      *((_QWORD *)v26 + 3) = v26 + 16;
      *((_QWORD *)v26 + 4) = 0;
      *((_QWORD *)v26 + 5) = 0;
      *((_QWORD *)v26 + 6) = 0;
      *((_QWORD *)v26 + 7) = v26 + 16;
      v29 = *(uint64_t **)*v7;
      v30 = *v29;
      v31 = *(llvm::Value **)(*v29 + 1560);
      if (!v31)
      {
        v93 = *(llvm::ConstantInt **)(v30 + 1888);
        v94 = *(_DWORD *)(v30 + 1896);
        LODWORD(v247) = v94 >> 8;
        if (v94 >> 8 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v246, 1, 0);
        }
        else
        {
          if (v94 <= 0xFF)
            v95 = 0;
          else
            v95 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v94);
          v246 = (void *)(v95 & 1);
        }
        v31 = llvm::ConstantInt::get(v93, (llvm::LLVMContext *)&v246, v27);
        if (v247 >= 0x41 && v246)
          MEMORY[0x1CAA32F9C](v246, 0x1000C8000313F17);
        *(_QWORD *)(v30 + 1560) = v31;
        v30 = **(_QWORD **)*v7;
      }
      v32 = (llvm::UndefValue *)llvm::PointerType::get((llvm::PointerType *)(v30 + 1888), 0);
      v34 = llvm::UndefValue::get(v32, v33);
      llvm::StoreInst::StoreInst(v28, v31, v34, 0, (llvm::Instruction *)v7);
      v36 = llvm::UndefValue::get((llvm::UndefValue *)*v7, v35);
      v37 = (llvm::ValueAsMetadata *)v7;
      goto LABEL_42;
    default:
      goto LABEL_18;
  }
}

uint64_t sub_1C598BCE4(llvm::Value *a1, llvm::SmallPtrSetImplBase *a2)
{
  llvm::Value *v3;
  int v4;
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  char v9;
  int v10;
  uint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  BOOL v15;
  _QWORD v16[2];
  uint64_t v17;

  v3 = llvm::Value::stripPointerCasts(a1);
  v4 = *((unsigned __int8 *)v3 + 16);
  if ((v4 - 11) < 2 || v4 == 19)
    return 1;
  v7 = (uint64_t)v3;
  if (v4 != 3)
    goto LABEL_11;
  v8 = *((_QWORD *)v3 + 9);
  if (!v8)
    return 0;
  v16[0] = "objc_arc_inert";
  v16[1] = 14;
  v17 = 0;
  if ((sub_1C5331A1C((uint64_t *)(v8 + 24), (uint64_t)v16, &v17) & 1) != 0)
    return 1;
  v4 = *(unsigned __int8 *)(v7 + 16);
LABEL_11:
  if (v4 != 83)
    return 0;
  sub_1C4774094(a2, v7);
  if (!v9)
    return 1;
  v10 = *(_DWORD *)(v7 + 20);
  if ((v10 & 0x40000000) != 0)
  {
    v12 = *(uint64_t **)(v7 - 8);
    v11 = v10 & 0x7FFFFFF;
  }
  else
  {
    v11 = v10 & 0x7FFFFFF;
    v12 = (uint64_t *)(v7 - 32 * v11);
  }
  if (!v11)
    return 1;
  v13 = 32 * v11 - 32;
  do
  {
    v14 = *v12;
    v12 += 4;
    result = sub_1C598BCE4(v14, a2);
    if ((_DWORD)result)
      v15 = v13 == 0;
    else
      v15 = 1;
    v13 -= 32;
  }
  while (!v15);
  return result;
}

BOOL sub_1C598BDD8(uint64_t a1)
{
  unsigned int v1;
  _BOOL8 result;
  llvm::Value *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  llvm::Value **v11;
  llvm::Value *v12;
  int v13;
  int v14;
  llvm::Value *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  BOOL v19;
  __int128 v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  int v25;
  unsigned int v26;
  _QWORD *v27;
  llvm::Value *v28;
  _QWORD *v29;
  int v30;
  BOOL v31;
  unsigned int v32;
  _QWORD *v33;
  uint64_t v34;
  __int128 v35;
  llvm::Value *v36;

  v1 = *(unsigned __int8 *)(a1 + 16);
  if (v1 - 21 <= 0x3F && ((1 << (v1 - 21)) & 0x8000000000001001) != 0)
    return 1;
  result = 1;
  if (v1 >= 0x15 && v1 != 59)
  {
    if (v1 != 60)
      return 0;
    v5 = sub_1C61AB204(*(llvm::Value **)(a1 - 32));
    if (!v5 || *((_BYTE *)v5 + 16) != 3)
      return 0;
    if ((*((_BYTE *)v5 + 80) & 1) != 0)
      return 1;
    v6 = v5 >> 4;
    if ((*((_BYTE *)v5 + 23) & 0x10) == 0)
    {
LABEL_30:
      v21 = 0uLL;
      if ((*((_BYTE *)v5 + 34) & 0x40) == 0)
      {
LABEL_34:
        v35 = v21;
        return llvm::StringRef::find((uint64_t *)&v35, "__message_refs", 0xEuLL, 0) != -1
            || llvm::StringRef::find((uint64_t *)&v35, "__objc_classrefs", 0x10uLL, 0) != -1
            || llvm::StringRef::find((uint64_t *)&v35, "__objc_superrefs", 0x10uLL, 0) != -1
            || llvm::StringRef::find((uint64_t *)&v35, "__objc_methname", 0xFuLL, 0) != -1
            || llvm::StringRef::find((uint64_t *)&v35, "__cstring", 9uLL, 0) != -1;
      }
      v22 = ***(_QWORD ***)v5;
      v36 = v5;
      v23 = *(_DWORD *)(v22 + 2520);
      if (v23)
      {
        v24 = *(_QWORD *)(v22 + 2504);
        v25 = v23 - 1;
        v26 = v25 & (v6 ^ (v5 >> 9));
        v27 = (_QWORD *)(v24 + 24 * v26);
        v28 = (llvm::Value *)*v27;
        if ((llvm::Value *)*v27 == v5)
        {
LABEL_33:
          v21 = *(_OWORD *)(v27 + 1);
          goto LABEL_34;
        }
        v29 = 0;
        v30 = 1;
        while (v28 != (llvm::Value *)-4096)
        {
          if (v29)
            v31 = 0;
          else
            v31 = v28 == (llvm::Value *)-8192;
          if (v31)
            v29 = v27;
          v32 = v26 + v30++;
          v26 = v32 & v25;
          v27 = (_QWORD *)(v24 + 24 * (v32 & v25));
          v28 = (llvm::Value *)*v27;
          if ((llvm::Value *)*v27 == v5)
            goto LABEL_33;
        }
        if (v29)
          v33 = v29;
        else
          v33 = v27;
      }
      else
      {
        v33 = 0;
      }
      v27 = sub_1C53D65B8(v22 + 2504, (uint64_t)&v36, (uint64_t *)&v36, v33);
      v34 = (uint64_t)v36;
      v27[1] = 0;
      v27[2] = 0;
      *v27 = v34;
      goto LABEL_33;
    }
    v7 = ***(_QWORD ***)v5;
    v8 = *(_QWORD *)(v7 + 152);
    v9 = *(unsigned int *)(v7 + 168);
    if ((_DWORD)v9)
    {
      LODWORD(v10) = (v9 - 1) & (v6 ^ (v5 >> 9));
      v11 = (llvm::Value **)(v8 + 16 * v10);
      v12 = *v11;
      if (*v11 == v5)
      {
LABEL_22:
        v15 = v11[1];
        if (*(_QWORD *)v15 >= 0x16uLL)
        {
          v16 = *((_QWORD *)v15 + 2);
          v17 = *((_QWORD *)v15 + 3);
          v18 = *(_QWORD *)((char *)v15 + 30);
          v19 = v16 == 0x5F636A626F5F6C01 && v17 == 0x5F646E655367736DLL;
          if (v19 && v18 == 0x5F70757869665F64)
            return 1;
        }
        goto LABEL_30;
      }
      v13 = 1;
      while (v12 != (llvm::Value *)-4096)
      {
        v14 = v10 + v13++;
        v10 = v14 & (v9 - 1);
        v12 = *(llvm::Value **)(v8 + 16 * v10);
        if (v12 == v5)
        {
          v11 = (llvm::Value **)(v8 + 16 * v10);
          goto LABEL_22;
        }
      }
    }
    v11 = (llvm::Value **)(v8 + 16 * v9);
    goto LABEL_22;
  }
  return result;
}

_QWORD *sub_1C598C098(uint64_t a1, uint64_t *a2)
{
  char v4;
  _QWORD *v5;
  _QWORD *v7;

  v7 = 0;
  v4 = sub_1C598C148(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v7);
  v5 = v7;
  if ((v4 & 1) == 0)
  {
    v5 = sub_1C598C1E0(a1, a2, v7);
    *v5 = *a2;
    *(_OWORD *)(v5 + 13) = 0u;
    *(_OWORD *)(v5 + 15) = 0u;
    *(_OWORD *)(v5 + 17) = 0u;
    *(_OWORD *)(v5 + 19) = 0u;
    v5[21] = 0;
    *(_OWORD *)(v5 + 11) = 0u;
    *(_OWORD *)(v5 + 9) = 0u;
    *(_OWORD *)(v5 + 7) = 0u;
    *(_OWORD *)(v5 + 5) = 0u;
    *(_OWORD *)(v5 + 3) = 0u;
    *(_OWORD *)(v5 + 1) = 0u;
    v5[14] = v5 + 16;
    *((_DWORD *)v5 + 31) = 2;
    v5[18] = v5 + 20;
    *((_DWORD *)v5 + 39) = 2;
  }
  return v5 + 1;
}

uint64_t sub_1C598C148(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 176 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 176 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_5;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

_QWORD *sub_1C598C1E0(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  unsigned int v6;
  int v7;
  uint64_t v9;
  unint64_t v10;
  unint64_t v11;
  int v12;
  unsigned int v13;
  _QWORD *v14;
  unsigned int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  void *v22;
  unint64_t v23;
  uint64_t v24;
  const void *v25;
  uint64_t v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  unsigned int v30;
  const void *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  void *v35;
  void *v36;
  unsigned int v37;
  uint64_t v38;
  _QWORD *v39;
  uint64_t *v40;

  v39 = a3;
  v5 = *(_DWORD *)(a1 + 8);
  v6 = *(_DWORD *)(a1 + 16);
  if (4 * v5 + 4 >= 3 * v6)
  {
    v7 = 2 * v6;
  }
  else
  {
    v7 = *(_DWORD *)(a1 + 16);
    if (v6 + ~v5 - *(_DWORD *)(a1 + 12) > v6 >> 3)
      goto LABEL_3;
  }
  v9 = *(_QWORD *)a1;
  v10 = (v7 - 1) | ((unint64_t)(v7 - 1) >> 1);
  v11 = v10 | (v10 >> 2) | ((v10 | (v10 >> 2)) >> 4);
  v12 = ((v11 | (v11 >> 8)) >> 16) | v11 | (v11 >> 8);
  if ((v12 + 1) > 0x40)
    v13 = v12 + 1;
  else
    v13 = 64;
  *(_DWORD *)(a1 + 16) = v13;
  v14 = operator new(176 * v13, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = v14;
  if (v9)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v15 = *(_DWORD *)(a1 + 16);
    if (v15)
    {
      v16 = 176 * v15;
      do
      {
        *v14 = -4096;
        v14 += 22;
        v16 -= 176;
      }
      while (v16);
    }
    if (v6)
    {
      v17 = 0;
      v18 = 176 * v6;
      while (1)
      {
        v19 = v9 + v17;
        v20 = *(_QWORD *)(v9 + v17);
        if ((v20 | 0x1000) != 0xFFFFFFFFFFFFF000)
          break;
LABEL_17:
        v17 += 176;
        if (v18 == v17)
          goto LABEL_46;
      }
      v40 = 0;
      sub_1C598C148(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v20, &v40);
      v21 = v40;
      *v40 = v20;
      v21[1] = *(_QWORD *)(v19 + 8);
      sub_1C6182CAC((uint64_t)(v21 + 2), v19 + 16);
      sub_1C6182CAC((uint64_t)(v21 + 8), v19 + 64);
      v22 = v21 + 16;
      v21[14] = (uint64_t)(v21 + 16);
      v21[15] = 0x200000000;
      v23 = *(unsigned int *)(v19 + 120);
      if (!(_DWORD)v23 || (uint64_t *)v19 == v21)
      {
LABEL_27:
        v28 = v21 + 20;
        v21[18] = (uint64_t)(v21 + 20);
        v21[19] = 0x200000000;
        v29 = v9 + v17;
        v30 = *(_DWORD *)(v9 + v17 + 152);
        if (!v30 || (uint64_t *)v19 == v21)
          goto LABEL_35;
        v31 = *(const void **)(v29 + 144);
        v32 = v9 + v17;
        v33 = v9 + v17 + 160;
        if ((const void *)v33 != v31)
        {
          v21[18] = (uint64_t)v31;
          *((_DWORD *)v21 + 38) = v30;
          *((_DWORD *)v21 + 39) = *(_DWORD *)(v32 + 156);
          *(_QWORD *)(v29 + 144) = v33;
          *(_DWORD *)(v32 + 156) = 0;
          goto LABEL_34;
        }
        if (v30 >= 3)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v21 + 18), (uint64_t)(v21 + 20), *(unsigned int *)(v9 + v17 + 152), 8);
          v34 = *(unsigned int *)(v29 + 152);
          if (!(_DWORD)v34)
            goto LABEL_33;
          v31 = *(const void **)(v29 + 144);
          v28 = (void *)v21[18];
        }
        else
        {
          v34 = *(unsigned int *)(v9 + v17 + 152);
        }
        memcpy(v28, v31, 8 * v34);
LABEL_33:
        *((_DWORD *)v21 + 38) = v30;
LABEL_34:
        *(_DWORD *)(v29 + 152) = 0;
LABEL_35:
        ++*(_DWORD *)(a1 + 8);
        v35 = *(void **)(v29 + 144);
        if ((void *)(v29 + 160) != v35)
          free(v35);
        v36 = *(void **)(v9 + v17 + 112);
        if ((void *)(v9 + v17 + 128) != v36)
          free(v36);
        sub_1C62C49E0(v19 + 64);
        sub_1C62C49E0(v19 + 16);
        goto LABEL_17;
      }
      v24 = v9 + v17;
      v25 = *(const void **)(v9 + v17 + 112);
      v26 = v9 + v17 + 128;
      if ((const void *)v26 != v25)
      {
        v21[14] = (uint64_t)v25;
        *((_DWORD *)v21 + 30) = v23;
        *((_DWORD *)v21 + 31) = *(_DWORD *)(v9 + v17 + 124);
        *(_QWORD *)(v24 + 112) = v26;
        *(_DWORD *)(v9 + v17 + 124) = 0;
        goto LABEL_26;
      }
      if (v23 >= 3)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v21 + 14), (uint64_t)(v21 + 16), v23, 8);
        v27 = *(unsigned int *)(v19 + 120);
        if (!(_DWORD)v27)
          goto LABEL_25;
        v25 = *(const void **)(v24 + 112);
        v22 = (void *)v21[14];
      }
      else
      {
        v27 = *(unsigned int *)(v19 + 120);
      }
      memcpy(v22, v25, 8 * v27);
LABEL_25:
      *((_DWORD *)v21 + 30) = v23;
LABEL_26:
      *(_DWORD *)(v19 + 120) = 0;
      goto LABEL_27;
    }
LABEL_46:
    MEMORY[0x1CAA32FB4](v9, 8);
    v14 = *(_QWORD **)a1;
    v37 = *(_DWORD *)(a1 + 16);
  }
  else
  {
    *(_QWORD *)(a1 + 8) = 0;
    v37 = *(_DWORD *)(a1 + 16);
    if (v37)
    {
      v38 = 0;
      do
      {
        v14[v38] = -4096;
        v38 += 22;
      }
      while (22 * v37 != v38);
    }
  }
  sub_1C598C148((uint64_t)v14, v37, *a2, &v39);
  v5 = *(_DWORD *)(a1 + 8);
  a3 = v39;
LABEL_3:
  *(_DWORD *)(a1 + 8) = v5 + 1;
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a3;
}

void sub_1C598C56C(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 136;
        sub_1C62C4A24((_QWORD *)v4 - 15);
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

BOOL sub_1C598C5E0(uint64_t a1, llvm::objcarc *this, uint64_t a3, _QWORD *a4, unsigned int *a5)
{
  int ARCInstKind;
  int v11;
  _BOOL8 inited;
  llvm::Value *v13;
  llvm::objcarc::BottomUpPtrState *v14;
  int v15;
  const llvm::Value **v16;
  const llvm::Value **v17;
  const llvm::Value **v18;
  const llvm::Value *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  void *v29;
  void *v30;
  int v31;
  void *v32;
  void *v33;
  int v34;
  char *v35;
  unint64_t v36;
  uint64_t v37;
  unint64_t v38;
  char *v39;
  char *v40;
  char *v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  uint64_t v47;
  char *v48;
  const void *v49;
  const void *v50;
  uint64_t v51;
  uint64_t v52;
  char *v53;
  char *v54;
  const void *v55;
  const void *v56;
  uint64_t v57;
  uint64_t v58;
  char *v59;
  char *v60;
  char *v61;
  char *v62;
  char *v63;
  llvm::objcarc::BottomUpPtrState *v64;
  char *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  __int128 v69;
  __int128 *v70;
  __int128 *v71;
  __int128 v72;
  __int128 v73;
  uint64_t v74;
  llvm::objcarc *v75;
  __int128 v76;
  _BYTE *v77;
  void *__src;
  uint64_t v79;
  int v80;
  _BYTE v81[16];
  _BYTE *v82;
  void *v83;
  uint64_t v84;
  int v85;
  _BYTE v86[16];
  char v87;
  uint64_t v88;
  char v89;

  ARCInstKind = llvm::objcarc::GetARCInstKind(this, this);
  v11 = ARCInstKind;
  inited = 0;
  v13 = 0;
  switch(ARCInstKind)
  {
    case 0:
    case 1:
      v13 = sub_1C61AB204(*((llvm::Value **)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF)));
      v75 = v13;
      v14 = (llvm::objcarc::BottomUpPtrState *)sub_1C598D074((_QWORD *)a5 + 7, (uint64_t *)&v75);
      llvm::objcarc::BottomUpPtrState::MatchWithRetain(v14);
      if (v15)
      {
        if (v11 != 1)
        {
          v75 = this;
          *(_QWORD *)&v76 = 0;
          sub_1C62C4BF8((uint64_t)&v88, (uint64_t)a4, &v75, (uint64_t *)&v76);
          if (v89)
          {
            v27 = a4[3];
            v26 = a4[4];
            v25 = (uint64_t)(v26 - v27) >> 7;
            *(_QWORD *)(v88 + 8) = v25;
            v74 = 0;
            v72 = 0u;
            v73 = 0u;
            v69 = 0u;
            v70 = &v73;
            v71 = &v73;
            v75 = this;
            v76 = 0uLL;
            v77 = v81;
            __src = v81;
            v79 = 2;
            v80 = 0;
            v82 = v86;
            v83 = v86;
            v84 = 2;
            v85 = 0;
            LODWORD(v72) = 2;
            v87 = 0;
            v28 = a4[5];
            v68 = v26;
            if (v26 >= v28)
            {
              v66 = (uint64_t)(v26 - v27) >> 7;
              v36 = v25 + 1;
              if ((unint64_t)(v25 + 1) >> 57)
                abort();
              v37 = v28 - v27;
              if (v37 >> 6 > v36)
                v36 = v37 >> 6;
              if ((unint64_t)v37 >= 0x7FFFFFFFFFFFFF80)
                v38 = 0x1FFFFFFFFFFFFFFLL;
              else
                v38 = v36;
              v67 = v27;
              if (v38 >> 57)
                sub_1C4764EE4();
              v39 = (char *)operator new(v38 << 7);
              v40 = &v39[128 * v66];
              *(_QWORD *)v40 = this;
              *((_QWORD *)v40 + 1) = 0;
              v41 = &v39[128 * v38];
              *((_QWORD *)v40 + 2) = 0;
              *((_QWORD *)v40 + 3) = v40 + 56;
              *((_QWORD *)v40 + 4) = v40 + 56;
              *((_QWORD *)v40 + 5) = 2;
              *((_DWORD *)v40 + 12) = 0;
              v79 = 2;
              v80 = 0;
              *((_QWORD *)v40 + 9) = v40 + 104;
              *((_QWORD *)v40 + 10) = v40 + 104;
              *((_QWORD *)v40 + 11) = 2;
              *((_DWORD *)v40 + 24) = 0;
              v84 = 2;
              v85 = 0;
              v42 = v40 + 128;
              v40[120] = 0;
              v44 = v67;
              v43 = v68;
              v65 = v40 + 128;
              if (v68 != v67)
              {
                v63 = &v39[128 * v38];
                v64 = v14;
                v45 = 0;
                do
                {
                  v46 = &v40[v45];
                  v47 = v43 + v45;
                  *((_QWORD *)v46 - 16) = *(_QWORD *)(v43 + v45 - 128);
                  *(_OWORD *)(v46 - 120) = *(_OWORD *)(v43 + v45 - 120);
                  v48 = &v40[v45 - 72];
                  *((_QWORD *)v46 - 13) = v48;
                  v50 = *(const void **)(v43 + v45 - 104);
                  v49 = *(const void **)(v43 + v45 - 96);
                  if (v49 == v50)
                  {
                    *((_QWORD *)v46 - 12) = v48;
                    v51 = *(unsigned int *)(v47 - 84);
                    if ((_DWORD)v51)
                    {
                      memmove(v48, v49, 8 * v51);
                      v44 = v67;
                      v43 = v68;
                    }
                  }
                  else
                  {
                    *((_QWORD *)v46 - 12) = v49;
                    *(_QWORD *)(v47 - 96) = v50;
                    LODWORD(v51) = *(_DWORD *)(v47 - 84);
                  }
                  v52 = v43 + v45;
                  v53 = &v40[v45];
                  *((_DWORD *)v53 - 22) = *(_DWORD *)(v43 + v45 - 88);
                  *((_DWORD *)v53 - 21) = v51;
                  *((_DWORD *)v53 - 20) = *(_DWORD *)(v43 + v45 - 80);
                  *(_QWORD *)(v52 - 88) = 2;
                  *(_DWORD *)(v52 - 80) = 0;
                  v54 = &v40[v45 - 24];
                  *((_QWORD *)v53 - 7) = v54;
                  v56 = *(const void **)(v43 + v45 - 56);
                  v55 = *(const void **)(v43 + v45 - 48);
                  if (v55 == v56)
                  {
                    *((_QWORD *)v53 - 6) = v54;
                    v57 = *(unsigned int *)(v52 - 36);
                    if ((_DWORD)v57)
                    {
                      memmove(v54, v55, 8 * v57);
                      v44 = v67;
                      v43 = v68;
                    }
                  }
                  else
                  {
                    *((_QWORD *)v53 - 6) = v55;
                    *(_QWORD *)(v52 - 48) = v56;
                    LODWORD(v57) = *(_DWORD *)(v52 - 36);
                  }
                  v58 = v43 + v45;
                  v59 = &v40[v45];
                  *((_DWORD *)v59 - 10) = *(_DWORD *)(v43 + v45 - 40);
                  *((_DWORD *)v59 - 9) = v57;
                  *((_DWORD *)v59 - 8) = *(_DWORD *)(v43 + v45 - 32);
                  *(_QWORD *)(v58 - 40) = 2;
                  *(_DWORD *)(v58 - 32) = 0;
                  *(v59 - 8) = *(_BYTE *)(v43 + v45 - 8);
                  v45 -= 128;
                }
                while (v43 + v45 != v44);
                v40 += v45;
                v14 = v64;
                v42 = v65;
                v41 = v63;
              }
              v61 = (char *)a4[3];
              v60 = (char *)a4[4];
              a4[3] = v40;
              a4[4] = v42;
              a4[5] = v41;
              if (v60 != v61)
              {
                do
                {
                  v62 = v60 - 128;
                  sub_1C62C4A24((_QWORD *)v60 - 15);
                  v60 = v62;
                }
                while (v62 != v61);
              }
              if (v61)
                operator delete(v61);
              v35 = v65;
              v25 = v66;
            }
            else
            {
              *(_QWORD *)v26 = this;
              *(_OWORD *)(v26 + 8) = v76;
              v29 = (void *)(v26 + 56);
              *(_QWORD *)(v26 + 24) = v26 + 56;
              v30 = v77;
              if (__src == v77)
              {
                *(_QWORD *)(v26 + 32) = v29;
                v31 = HIDWORD(v79);
                if (HIDWORD(v79))
                {
                  memmove(v29, __src, 8 * HIDWORD(v79));
                  v26 = v68;
                }
              }
              else
              {
                *(_QWORD *)(v26 + 32) = __src;
                __src = v30;
                v31 = HIDWORD(v79);
              }
              *(_DWORD *)(v26 + 40) = v79;
              *(_DWORD *)(v26 + 44) = v31;
              *(_DWORD *)(v26 + 48) = v80;
              v79 = 2;
              v80 = 0;
              v32 = (void *)(v26 + 104);
              *(_QWORD *)(v26 + 72) = v26 + 104;
              v33 = v82;
              if (v83 == v82)
              {
                *(_QWORD *)(v26 + 80) = v32;
                v34 = HIDWORD(v84);
                if (HIDWORD(v84))
                {
                  memmove(v32, v83, 8 * HIDWORD(v84));
                  v26 = v68;
                }
              }
              else
              {
                *(_QWORD *)(v26 + 80) = v83;
                v83 = v33;
                v34 = HIDWORD(v84);
              }
              *(_DWORD *)(v26 + 88) = v84;
              *(_DWORD *)(v26 + 92) = v34;
              *(_DWORD *)(v26 + 96) = v85;
              v84 = 2;
              v85 = 0;
              *(_BYTE *)(v26 + 120) = v87;
              v35 = (char *)(v26 + 128);
            }
            a4[4] = v35;
            if (v83 != v82)
              free(v83);
            if (__src != v77)
              free(__src);
            if (v71 != v70)
              free(v71);
          }
          else
          {
            v25 = *(_QWORD *)(v88 + 8);
          }
          sub_1C62C4B24(a4[3] + (v25 << 7) + 8, (uint64_t)v14 + 8);
        }
        llvm::objcarc::PtrState::ResetSequenceProgress((uint64_t)v14, 0);
      }
      inited = 0;
      goto LABEL_5;
    case 2:
    case 3:
    case 5:
    case 6:
      goto LABEL_5;
    case 4:
      v13 = sub_1C61AB204(*((llvm::Value **)this - 4 * (*((_DWORD *)this + 5) & 0x7FFFFFF)));
      v75 = v13;
      v20 = sub_1C598D074((_QWORD *)a5 + 7, (uint64_t *)&v75);
      inited = llvm::objcarc::BottomUpPtrState::InitBottomUp(v20, a1 + 160, this);
      goto LABEL_5;
    case 7:
      return inited;
    case 8:
      sub_1C61446F0(a5 + 14);
      v22 = *((_QWORD *)a5 + 10);
      v21 = *((_QWORD *)a5 + 11);
      if (v21 != v22)
      {
        do
        {
          v23 = v21 - 136;
          sub_1C62C4A24((_QWORD *)(v21 - 120));
          v21 = v23;
        }
        while (v23 != v22);
      }
      inited = 0;
      *((_QWORD *)a5 + 11) = v22;
      return inited;
    default:
      if (ARCInstKind != 24)
      {
LABEL_5:
        v16 = (const llvm::Value **)*((_QWORD *)a5 + 10);
        v17 = (const llvm::Value **)*((_QWORD *)a5 + 11);
        if (v16 != v17)
        {
          v18 = (const llvm::Value **)(a1 + 8);
          do
          {
            v19 = *v16;
            if (*v16 != v13
              && (llvm::objcarc::BottomUpPtrState::HandlePotentialAlterRefCount((uint64_t)(v16 + 1), (uint64_t)this, *v16, (llvm::objcarc::ProvenanceAnalysis *)v18, v11) & 1) == 0)
            {
              llvm::objcarc::BottomUpPtrState::HandlePotentialUse((uint64_t)(v16 + 1), a3, (uint64_t)this, v19, v18, v11);
            }
            v16 += 17;
          }
          while (v16 != v17);
        }
      }
      return inited;
  }
}

uint64_t sub_1C598CB80(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  _QWORD *v7;
  char *v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  __int16 v13;
  uint64_t v14;
  uint64_t v15;
  __int16 v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  char *v22;

  v7 = (_QWORD *)result;
  v8 = *(char **)result;
  if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*(_QWORD *)(result + 16) - *(_QWORD *)result) >> 3) < a4)
  {
    sub_1C62C4ABC((void **)result);
    if (a4 > 0x1E1E1E1E1E1E1E1)
      goto LABEL_23;
    v19 = 0xE1E1E1E1E1E1E1E2 * ((uint64_t)(v7[2] - *v7) >> 3);
    if (v19 <= a4)
      v19 = a4;
    v20 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v7[2] - *v7) >> 3) >= 0xF0F0F0F0F0F0F0 ? 0x1E1E1E1E1E1E1E1 : v19;
    if (v20 > 0x1E1E1E1E1E1E1E1)
LABEL_23:
      abort();
    v21 = 17 * v20;
    v22 = (char *)operator new(136 * v20);
    *v7 = v22;
    v7[1] = v22;
    v7[2] = &v22[8 * v21];
    result = sub_1C598CD60(a2, a3, (uint64_t)v22);
    v7[1] = result;
  }
  else
  {
    v9 = *(char **)(result + 8);
    if (0xF0F0F0F0F0F0F0F1 * ((v9 - v8) >> 3) >= a4)
    {
      if (a2 != a3)
      {
        result = (uint64_t)(v8 + 16);
        v15 = a2 + 16;
        do
        {
          *(_QWORD *)(result - 16) = *(_QWORD *)(v15 - 16);
          v16 = *(_WORD *)(v15 - 8);
          *(_BYTE *)(result - 6) = *(_BYTE *)(v15 - 6);
          *(_WORD *)(result - 8) = v16;
          v8 += 136;
          result = sub_1C62C4B24(result, v15) + 136;
          v17 = v15 + 120;
          v15 += 136;
        }
        while (v17 != a3);
        v9 = (char *)v7[1];
      }
      if (v9 != v8)
      {
        do
        {
          v18 = v9 - 136;
          result = (uint64_t)sub_1C62C4A24((_QWORD *)v9 - 15);
          v9 = v18;
        }
        while (v18 != v8);
      }
      v7[1] = v8;
    }
    else
    {
      v10 = a2 + 8 * ((v9 - v8) >> 3);
      if (v9 != v8)
      {
        v11 = (uint64_t)(v8 + 16);
        v12 = a2 + 16;
        do
        {
          *(_QWORD *)(v11 - 16) = *(_QWORD *)(v12 - 16);
          v13 = *(_WORD *)(v12 - 8);
          *(_BYTE *)(v11 - 6) = *(_BYTE *)(v12 - 6);
          *(_WORD *)(v11 - 8) = v13;
          v11 = sub_1C62C4B24(v11, v12) + 136;
          v14 = v12 + 120;
          v12 += 136;
        }
        while (v14 != v10);
        v8 = (char *)v7[1];
      }
      result = sub_1C598CD60(v10, a3, (uint64_t)v8);
      v7[1] = result;
    }
  }
  return result;
}

uint64_t sub_1C598CD60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  __int16 v9;
  void *v10;
  const void *v11;
  uint64_t v12;
  uint64_t v13;
  const void *v14;
  int v15;
  unsigned int v16;
  int v17;
  void *v18;
  const void *v19;
  uint64_t v20;
  uint64_t v21;
  const void *v22;
  int v23;
  unsigned int v24;
  int v25;
  uint64_t v26;
  uint64_t v27;

  if (a1 != a2)
  {
    v6 = 0;
    do
    {
      v7 = a3 + v6;
      v8 = a1 + v6;
      *(_QWORD *)v7 = *(_QWORD *)(a1 + v6);
      v9 = *(_WORD *)(a1 + v6 + 8);
      *(_BYTE *)(v7 + 10) = *(_BYTE *)(a1 + v6 + 10);
      *(_WORD *)(v7 + 8) = v9;
      *(_OWORD *)(v7 + 16) = *(_OWORD *)(a1 + v6 + 16);
      v10 = (void *)(a3 + v6 + 64);
      *(_QWORD *)(v7 + 32) = v10;
      v11 = *(const void **)(a1 + v6 + 40);
      if (v11 == *(const void **)(a1 + v6 + 32))
      {
        *(_QWORD *)(v7 + 40) = v10;
      }
      else
      {
        v26 = *(unsigned int *)(v8 + 48);
        v10 = malloc_type_malloc(8 * v26, 0x4065EBACuLL);
        if (!v10 && ((_DWORD)v26 || (v10 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
LABEL_28:
          llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
        *(_QWORD *)(a3 + v6 + 40) = v10;
        v11 = *(const void **)(v8 + 32);
      }
      v12 = a1 + v6;
      v13 = a3 + v6;
      *(_DWORD *)(a3 + v6 + 48) = *(_DWORD *)(a1 + v6 + 48);
      v14 = *(const void **)(v8 + 40);
      v15 = *(_DWORD *)(a1 + v6 + 52);
      if (v14 == v11)
        v16 = *(_DWORD *)(a1 + v6 + 52);
      else
        v16 = *(_DWORD *)(a1 + v6 + 48);
      if (v16)
      {
        memmove(v10, v14, 8 * v16);
        v15 = *(_DWORD *)(v12 + 52);
      }
      v17 = *(_DWORD *)(v12 + 56);
      *(_DWORD *)(v13 + 52) = v15;
      *(_DWORD *)(v13 + 56) = v17;
      v18 = (void *)(v13 + 112);
      *(_QWORD *)(v13 + 80) = v13 + 112;
      v19 = *(const void **)(v12 + 88);
      if (v19 == *(const void **)(v12 + 80))
      {
        *(_QWORD *)(a3 + v6 + 88) = v18;
      }
      else
      {
        v27 = *(unsigned int *)(a1 + v6 + 96);
        v18 = malloc_type_malloc(8 * v27, 0x4065EBACuLL);
        if (!v18)
        {
          if ((_DWORD)v27)
            goto LABEL_28;
          v18 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
          if (!v18)
            goto LABEL_28;
        }
        *(_QWORD *)(a3 + v6 + 88) = v18;
        v19 = *(const void **)(v12 + 80);
      }
      v20 = a1 + v6;
      v21 = a3 + v6;
      *(_DWORD *)(a3 + v6 + 96) = *(_DWORD *)(a1 + v6 + 96);
      v22 = *(const void **)(v12 + 88);
      v23 = *(_DWORD *)(a1 + v6 + 100);
      if (v22 == v19)
        v24 = *(_DWORD *)(a1 + v6 + 100);
      else
        v24 = *(_DWORD *)(a1 + v6 + 96);
      if (v24)
      {
        memmove(v18, v22, 8 * v24);
        v23 = *(_DWORD *)(v20 + 100);
      }
      v25 = *(_DWORD *)(v20 + 104);
      *(_DWORD *)(v21 + 100) = v23;
      *(_DWORD *)(v21 + 104) = v25;
      *(_BYTE *)(v21 + 128) = *(_BYTE *)(v20 + 128);
      v6 += 136;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

uint64_t sub_1C598CF30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  void *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  void *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;

  if (a2 != a4)
  {
    v9 = 0;
    do
    {
      v10 = a6 + v9;
      v11 = a2 + v9;
      *(_QWORD *)(v10 - 136) = *(_QWORD *)(a2 + v9 - 136);
      v12 = *(_WORD *)(a2 + v9 - 128);
      *(_BYTE *)(v10 - 126) = *(_BYTE *)(a2 + v9 - 126);
      *(_WORD *)(v10 - 128) = v12;
      *(_OWORD *)(v10 - 120) = *(_OWORD *)(a2 + v9 - 120);
      v13 = (void *)(a6 + v9 - 72);
      *(_QWORD *)(v10 - 104) = v13;
      v15 = *(_QWORD *)(a2 + v9 - 104);
      v14 = *(_QWORD *)(a2 + v9 - 96);
      if (v14 == v15)
      {
        *(_QWORD *)(v10 - 96) = v13;
        v16 = *(unsigned int *)(v11 - 84);
        if ((_DWORD)v16)
          memmove(v13, *(const void **)(v11 - 96), 8 * v16);
      }
      else
      {
        *(_QWORD *)(v10 - 96) = v14;
        *(_QWORD *)(v11 - 96) = v15;
      }
      v17 = a2 + v9;
      v18 = a6 + v9;
      *(_QWORD *)(v18 - 88) = *(_QWORD *)(a2 + v9 - 88);
      *(_DWORD *)(v18 - 80) = *(_DWORD *)(a2 + v9 - 80);
      *(_QWORD *)(v17 - 88) = 2;
      *(_DWORD *)(v17 - 80) = 0;
      v19 = (void *)(a6 + v9 - 24);
      *(_QWORD *)(v18 - 56) = v19;
      v21 = *(_QWORD *)(a2 + v9 - 56);
      v20 = *(_QWORD *)(a2 + v9 - 48);
      if (v20 == v21)
      {
        *(_QWORD *)(v18 - 48) = v19;
        v22 = *(unsigned int *)(v17 - 36);
        if ((_DWORD)v22)
          memmove(v19, *(const void **)(v17 - 48), 8 * v22);
      }
      else
      {
        *(_QWORD *)(v18 - 48) = v20;
        *(_QWORD *)(v17 - 48) = v21;
      }
      v23 = a2 + v9;
      v24 = a6 + v9;
      *(_QWORD *)(v24 - 40) = *(_QWORD *)(a2 + v9 - 40);
      *(_DWORD *)(v24 - 32) = *(_DWORD *)(a2 + v9 - 32);
      *(_QWORD *)(v23 - 40) = 2;
      *(_DWORD *)(v23 - 32) = 0;
      *(_BYTE *)(v24 - 8) = *(_BYTE *)(a2 + v9 - 8);
      v9 -= 136;
    }
    while (a2 + v9 != a4);
    a6 += v9;
  }
  return a6;
}

uint64_t sub_1C598D074(_QWORD *a1, uint64_t *a2)
{
  unint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  __int16 v9;
  void *v10;
  void *v11;
  int v12;
  void *v13;
  void *v14;
  int v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t v18;
  unint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t v22;
  char *v23;
  uint64_t v24;
  char *v25;
  char *v26;
  char *v27;
  _OWORD v29[4];
  uint64_t v30;
  char *v31;
  __int128 v32;
  _OWORD v33[2];
  uint64_t v34;
  uint64_t v35;
  __int128 v36;
  _BYTE *v37;
  void *__src;
  uint64_t v39;
  int v40;
  _BYTE v41[16];
  _BYTE *v42;
  void *v43;
  uint64_t v44;
  int v45;
  _BYTE v46[16];
  char v47;
  uint64_t v48;
  char v49;

  v34 = *a2;
  v35 = 0;
  sub_1C618F0E8((uint64_t)&v48, (uint64_t)a1, &v34, &v35);
  if (v49)
  {
    v5 = a1[3];
    v4 = a1[4];
    v6 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v4 - v5) >> 3);
    *(_QWORD *)(v48 + 8) = v6;
    v30 = 0;
    memset(v29, 0, 24);
    memset(v33, 0, sizeof(v33));
    v29[3] = 0u;
    v31 = (char *)v33 + 8;
    v32 = (unint64_t)v33 + 8;
    v7 = *a2;
    v34 = v7;
    LOWORD(v35) = 0;
    BYTE2(v35) = 0;
    v36 = 0uLL;
    v37 = v41;
    __src = v41;
    v39 = 2;
    v40 = 0;
    v42 = v46;
    v43 = v46;
    v44 = 2;
    v45 = 0;
    DWORD2(v32) = 2;
    LODWORD(v33[0]) = 0;
    v47 = 0;
    v8 = a1[5];
    if (v4 >= v8)
    {
      v17 = v6 + 1;
      if (v6 + 1 > 0x1E1E1E1E1E1E1E1)
        abort();
      v18 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v8 - v5) >> 3);
      if (2 * v18 > v17)
        v17 = 2 * v18;
      if (v18 >= 0xF0F0F0F0F0F0F0)
        v19 = 0x1E1E1E1E1E1E1E1;
      else
        v19 = v17;
      if (v19 > 0x1E1E1E1E1E1E1E1)
        sub_1C4764EE4();
      v20 = 17 * v19;
      v21 = (char *)operator new(136 * v19);
      v22 = (uint64_t)&v21[8 * ((uint64_t)(v4 - v5) >> 3)];
      *(_QWORD *)v22 = v7;
      *(_WORD *)(v22 + 8) = 0;
      v23 = &v21[8 * v20];
      *(_BYTE *)(v22 + 10) = 0;
      *(_OWORD *)(v22 + 16) = *(_OWORD *)((char *)v29 + 8);
      *(_QWORD *)(v22 + 32) = v22 + 64;
      *(_QWORD *)(v22 + 40) = v22 + 64;
      *(_QWORD *)(v22 + 48) = 2;
      *(_DWORD *)(v22 + 56) = 0;
      v39 = 2;
      v40 = 0;
      *(_QWORD *)(v22 + 80) = v22 + 112;
      *(_QWORD *)(v22 + 88) = v22 + 112;
      *(_QWORD *)(v22 + 96) = 2;
      *(_DWORD *)(v22 + 104) = 0;
      v44 = 2;
      v45 = 0;
      v16 = v22 + 136;
      *(_BYTE *)(v22 + 128) = 0;
      v24 = sub_1C598CF30(v4, v4, v5, v5, v22, v22);
      v26 = (char *)a1[3];
      v25 = (char *)a1[4];
      a1[3] = v24;
      a1[4] = v16;
      a1[5] = v23;
      if (v25 != v26)
      {
        do
        {
          v27 = v25 - 136;
          sub_1C62C4A24((_QWORD *)v25 - 15);
          v25 = v27;
        }
        while (v27 != v26);
      }
      if (v26)
        operator delete(v26);
    }
    else
    {
      *(_QWORD *)v4 = v7;
      v9 = v35;
      *(_BYTE *)(v4 + 10) = BYTE2(v35);
      *(_WORD *)(v4 + 8) = v9;
      *(_OWORD *)(v4 + 16) = v36;
      v10 = (void *)(v4 + 64);
      *(_QWORD *)(v4 + 32) = v4 + 64;
      v11 = v37;
      if (__src == v37)
      {
        *(_QWORD *)(v4 + 40) = v10;
        v12 = HIDWORD(v39);
        if (HIDWORD(v39))
          memmove(v10, __src, 8 * HIDWORD(v39));
      }
      else
      {
        *(_QWORD *)(v4 + 40) = __src;
        __src = v11;
        v12 = HIDWORD(v39);
      }
      *(_DWORD *)(v4 + 48) = v39;
      *(_DWORD *)(v4 + 52) = v12;
      *(_DWORD *)(v4 + 56) = v40;
      v39 = 2;
      v40 = 0;
      v13 = (void *)(v4 + 112);
      *(_QWORD *)(v4 + 80) = v4 + 112;
      v14 = v42;
      if (v43 == v42)
      {
        *(_QWORD *)(v4 + 88) = v13;
        v15 = HIDWORD(v44);
        if (HIDWORD(v44))
          memmove(v13, v43, 8 * HIDWORD(v44));
      }
      else
      {
        *(_QWORD *)(v4 + 88) = v43;
        v43 = v14;
        v15 = HIDWORD(v44);
      }
      *(_DWORD *)(v4 + 96) = v44;
      *(_DWORD *)(v4 + 100) = v15;
      *(_DWORD *)(v4 + 104) = v45;
      v44 = 2;
      v45 = 0;
      *(_BYTE *)(v4 + 128) = v47;
      v16 = v4 + 136;
    }
    a1[4] = v16;
    if (v43 != v42)
      free(v43);
    if (__src != v37)
      free(__src);
    if ((char *)v32 != v31)
      free((void *)v32);
  }
  else
  {
    v6 = *(_QWORD *)(v48 + 8);
  }
  return a1[3] + 136 * v6 + 8;
}

_QWORD *sub_1C598D3D8(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new((unint64_t)v8 << 7, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C62C4E78((_QWORD *)a1, v4, v4 + (v3 << 7));
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = v10 << 7;
    do
    {
      *result = -4096;
      result += 16;
      v11 -= 128;
    }
    while (v11);
  }
  return result;
}

void sub_1C598D490(void ***a1)
{
  void **v1;
  char *v2;
  char *v4;
  void *v5;
  char *v6;

  v1 = *a1;
  v2 = (char *)**a1;
  if (v2)
  {
    v4 = (char *)v1[1];
    v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        v6 = v4 - 128;
        sub_1C62C4A24((_QWORD *)v4 - 15);
        v4 = v6;
      }
      while (v6 != v2);
      v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1C598D504(uint64_t a1)
{
  sub_1C4EC4314((uint64_t *)(a1 + 32));
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 8), 8);
  return a1;
}

uint64_t sub_1C598D538()
{
  int v1;
  int *v2;
  __int128 v3;
  int v4;

  v4 = 1;
  *(_QWORD *)&v3 = "Maximum number of ptr states the optimizer keeps track of";
  *((_QWORD *)&v3 + 1) = 57;
  v1 = 4095;
  v2 = &v1;
  sub_1C6147F28((uint64_t)&unk_1ED81A380, "arc-opt-max-ptr-states", &v4, &v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &unk_1ED81A380, &dword_1C475E000);
}

void llvm::initializeObjCARCExpandPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1EF8F7210);
  if (v2 != -1)
  {
    v5[0] = sub_1C598D61C;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1EF8F7210, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C598D61C(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "ObjC ARC expansion";
  *(_QWORD *)(v2 + 8) = 18;
  *(_QWORD *)(v2 + 16) = "objc-arc-expand";
  *(_QWORD *)(v2 + 24) = 15;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F5719;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C598D948;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C598D6AC(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8F5719;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E8184D98;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1EF8F7210);
  if (v3 != -1)
  {
    v7[0] = sub_1C598D61C;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1EF8F7210, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

_QWORD *llvm::ObjCARCExpandPass::run@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  char v3;

  v3 = sub_1C598D7E8(a1);
  *(_QWORD *)a2 = a2 + 32;
  *(_QWORD *)(a2 + 8) = a2 + 32;
  *(_QWORD *)(a2 + 16) = 2;
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 48) = a2 + 80;
  *(_QWORD *)(a2 + 56) = a2 + 80;
  *(_QWORD *)(a2 + 64) = 2;
  *(_DWORD *)(a2 + 72) = 0;
  if ((v3 & 1) != 0)
    return sub_1C4D8B5A8((llvm::SmallPtrSetImplBase *)a2, (uint64_t)&llvm::CFGAnalyses::SetKey);
  else
    return sub_1C4774094((llvm::SmallPtrSetImplBase *)a2, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
}

uint64_t sub_1C598D7E8(uint64_t a1)
{
  char v1;
  const llvm::Function *v4;
  uint64_t v5;
  uint64_t i;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  unsigned int FunctionClass;

  if (llvm::objcarc::EnableARCOpts && sub_1C62C5194(*(_QWORD *)(a1 + 40)))
  {
    v5 = a1 + 72;
    for (i = *(_QWORD *)(a1 + 80); i != v5; i = *(_QWORD *)(i + 8))
    {
      v7 = i - 24;
      if (!i)
        v7 = 0;
      v8 = *(_QWORD *)(v7 + 48);
      if (v8 != v7 + 40)
      {
        v1 = 0;
        while (1)
        {
          if (v8)
            v9 = v8 - 24;
          else
            v9 = 0;
          if (v8)
          {
            if (*(_BYTE *)(v9 + 16) == 84)
            {
              v10 = *(_QWORD *)(v9 - 32);
              if (v10)
              {
                if (!*(_BYTE *)(v10 + 16) && *(_QWORD *)(v10 + 24) == *(_QWORD *)(v9 + 72))
                {
                  FunctionClass = llvm::objcarc::GetFunctionClass((llvm::objcarc *)v10, v4);
                  if (FunctionClass <= 0xB && ((1 << FunctionClass) & 0xC63) != 0)
                  {
                    v1 = 1;
                    llvm::Value::doRAUW((llvm::ValueAsMetadata *)v9, *(llvm::Value **)(v9 - 32 * (*(_DWORD *)(v9 + 20) & 0x7FFFFFF)), (llvm::Value *)1);
                  }
                }
              }
            }
          }
          v8 = *(_QWORD *)(v8 + 8);
          v11 = i - 24;
          if (!i)
            v11 = 0;
          if (v8 == v11 + 40)
            break;
LABEL_27:
          if (i == v5)
            return v1 & 1;
        }
        while (1)
        {
          i = *(_QWORD *)(i + 8);
          if (i == v5)
            return v1 & 1;
          v12 = i - 24;
          if (!i)
            v12 = 0;
          v8 = *(_QWORD *)(v12 + 48);
          if (v8 != v12 + 40)
            goto LABEL_27;
        }
      }
    }
  }
  v1 = 0;
  return v1 & 1;
}

uint64_t sub_1C598D948()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C598D6AC(v0);
}

void sub_1C598D974(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C598D998(int a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
}

uint64_t sub_1C598D9A0(uint64_t a1, uint64_t a2)
{
  return sub_1C598D7E8(a2);
}

void llvm::initializeObjCARCAPElimPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1EF8F7218);
  if (v2 != -1)
  {
    v5[0] = sub_1C598DA08;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1EF8F7218, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C598DA08(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "ObjC ARC autorelease pool elimination";
  *(_QWORD *)(v2 + 8) = 37;
  *(_QWORD *)(v2 + 16) = "objc-arc-apelim";
  *(_QWORD *)(v2 + 24) = 15;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F571A;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C598DE0C;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C598DA98(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8F571A;
  *(_DWORD *)(a1 + 24) = 4;
  *(_QWORD *)a1 = &off_1E8184E38;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1EF8F7218);
  if (v3 != -1)
  {
    v7[0] = sub_1C598DA08;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1EF8F7218, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

_QWORD *llvm::ObjCARCAPElimPass::run@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  char v3;

  v3 = sub_1C598DBD4(a1);
  *(_QWORD *)a2 = a2 + 32;
  *(_QWORD *)(a2 + 8) = a2 + 32;
  *(_QWORD *)(a2 + 16) = 2;
  *(_DWORD *)(a2 + 24) = 0;
  *(_QWORD *)(a2 + 48) = a2 + 80;
  *(_QWORD *)(a2 + 56) = a2 + 80;
  *(_QWORD *)(a2 + 64) = 2;
  *(_DWORD *)(a2 + 72) = 0;
  if ((v3 & 1) != 0)
    return sub_1C4D8B5A8((llvm::SmallPtrSetImplBase *)a2, (uint64_t)&llvm::CFGAnalyses::SetKey);
  else
    return sub_1C4774094((llvm::SmallPtrSetImplBase *)a2, (uint64_t)&llvm::PreservedAnalyses::AllAnalysesKey);
}

uint64_t sub_1C598DBD4(uint64_t a1)
{
  char v1;
  uint64_t v4;
  const llvm::Function *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  char v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  int FunctionClass;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  _QWORD *v26;

  if (llvm::objcarc::EnableARCOpts)
  {
    if (sub_1C62C5194(a1))
    {
      v4 = sub_1C4FB7E80(*(uint64_t **)(a1 + 112), "llvm.global_ctors", 0x11uLL);
      if (v4)
      {
        if (*(_BYTE *)(v4 + 16) == 3 && (*(_DWORD *)(v4 + 32) & 0xFu) - 7 >= 2)
        {
          v6 = *(_QWORD *)(v4 - 32);
          v7 = *(_DWORD *)(v6 + 20) & 0x7FFFFFF;
          if ((_DWORD)v7)
          {
            v1 = 0;
            v8 = v6 - 32 * v7;
            while (1)
            {
              v9 = *(_QWORD *)(*(_QWORD *)v8 - 32 * (*(_DWORD *)(*(_QWORD *)v8 + 20) & 0x7FFFFFF) + 32);
              if (v9)
                v10 = *(_BYTE *)(v9 + 16) == 0;
              else
                v10 = 0;
              if (v10)
              {
                v11 = v9 + 72;
                if (*(_QWORD *)(v9 + 72) != v9 + 72 || (*(_BYTE *)(v9 + 34) & 0x80) != 0)
                {
                  v12 = *(_QWORD *)(v9 + 80);
                  if (*(_QWORD *)(v12 + 8) == v11)
                  {
                    v13 = *(_QWORD *)(v12 + 24);
                    v14 = v12 + 16;
                    if (v13 != v12 + 16)
                    {
                      v15 = 0;
                      v16 = 0;
                      while (1)
                      {
                        v17 = v13;
                        v13 = *(_QWORD *)(v13 + 8);
                        v18 = v17 - 24;
                        if (v17)
                          v19 = v17 - 24;
                        else
                          v19 = 0;
                        v20 = *(unsigned __int8 *)(v19 + 16);
                        if (v17 && v20 == 84)
                        {
                          v21 = *(_QWORD *)(v19 - 32);
                          if (!v21
                            || *(_BYTE *)(v21 + 16)
                            || *(_QWORD *)(v21 + 24) != *(_QWORD *)(v19 + 72)
                            || (FunctionClass = llvm::objcarc::GetFunctionClass((llvm::objcarc *)v21, v5),
                                FunctionClass == 21))
                          {
LABEL_33:
                            if (sub_1C598DE9C(v19, 0))
                              v16 = 0;
                            goto LABEL_35;
                          }
                          if (FunctionClass == 8)
                          {
                            if (v16)
                            {
                              if (*(_QWORD *)(v19 - 32 * (*(_DWORD *)(v19 + 20) & 0x7FFFFFF)) == v16)
                              {
                                llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v19 + 40) + 40, (uint64_t ***)v19);
                                v23 = *(_QWORD *)(v19 + 24);
                                v24 = *(_QWORD **)(v19 + 32);
                                *v24 = v23;
                                *(_QWORD *)(v23 + 8) = v24;
                                *(_QWORD *)(v19 + 24) = 0;
                                *(_QWORD *)(v19 + 32) = 0;
                                llvm::Value::deleteValue((llvm::Value *)v19);
                                llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v16 + 40) + 40, (uint64_t ***)v16);
                                v25 = *(_QWORD *)(v16 + 24);
                                v26 = *(_QWORD **)(v16 + 32);
                                *v26 = v25;
                                *(_QWORD *)(v25 + 8) = v26;
                                *(_QWORD *)(v16 + 24) = 0;
                                *(_QWORD *)(v16 + 32) = 0;
                                llvm::Value::deleteValue((llvm::Value *)v16);
                                v16 = 0;
                                v15 = 1;
                              }
                              else
                              {
                                v16 = 0;
                              }
                            }
                          }
                          else if (FunctionClass == 7)
                          {
                            v16 = v18;
                          }
                        }
                        else if (v20 == 33)
                        {
                          goto LABEL_33;
                        }
LABEL_35:
                        if (v13 == v14)
                          goto LABEL_42;
                      }
                    }
                    v15 = 0;
LABEL_42:
                    v1 |= v15;
                  }
                }
              }
              v8 += 32;
              if (v8 == v6)
                return v1 & 1;
            }
          }
        }
      }
    }
  }
  v1 = 0;
  return v1 & 1;
}

uint64_t sub_1C598DE0C()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C598DA98(v0);
}

void sub_1C598DE38(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C598DE5C(int a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
}

uint64_t sub_1C598DE64(llvm::ModulePass *a1, uint64_t **a2)
{
  if ((llvm::ModulePass::skipModule(a1, a2) & 1) != 0)
    return 0;
  else
    return sub_1C598DBD4((uint64_t)a2);
}

uint64_t sub_1C598DE9C(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v6;
  int v7;
  char v9;
  llvm::Module *v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t i;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  BOOL v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unsigned int v28;
  int v29;

  v3 = *(_QWORD *)(a1 - 32);
  if (v3)
  {
    if (!*(_BYTE *)(v3 + 16))
    {
      v2 = *(_QWORD *)(a1 + 72);
      if (*(_QWORD *)(v3 + 24) == v2)
      {
        v6 = v3 + 72;
        v7 = *(_DWORD *)(v3 + 32);
        if (*(_QWORD *)(v3 + 72) == v3 + 72 && (v7 & 0x800000) == 0)
          goto LABEL_47;
        v9 = v7 & 0xF;
        LODWORD(v2) = 1;
        v4 = 0;
        if (((1 << v9) & 0x63E) != 0)
          return (v4 | v2) & 1;
        v11 = *(llvm::Module **)(v3 + 40);
        if (v11)
        {
          if (llvm::Module::getSemanticInterposition(v11) && (*(_BYTE *)(v3 + 33) & 0x40) == 0)
          {
LABEL_47:
            v4 = 0;
            LODWORD(v2) = 1;
            return (v4 | v2) & 1;
          }
        }
        v12 = *(_QWORD *)(v3 + 80);
        if (v12 == v6)
        {
          v4 = 0;
          LODWORD(v2) = 0;
          return (v4 | v2) & 1;
        }
LABEL_14:
        v13 = v12 - 24;
        if (!v12)
          v13 = 0;
        v14 = v13 + 40;
        for (i = *(_QWORD *)(v13 + 48); ; i = *(_QWORD *)(i + 8))
        {
          if (i == v14)
          {
            v4 = 0;
            LODWORD(v2) = 0;
            v12 = *(_QWORD *)(v12 + 8);
            if (v12 == v6)
              return (v4 | v2) & 1;
            goto LABEL_14;
          }
          if (i)
            v16 = i - 24;
          else
            v16 = 0;
          v17 = *(unsigned __int8 *)(v16 + 16) - 33;
          v20 = v17 > 0x33;
          v18 = (1 << v17) & 0x8000000000041;
          v20 = v20 || v18 == 0 || a2 > 2;
          if (!v20)
          {
            v21 = *(_QWORD *)(i + 40);
            if (!v21 || (*(_BYTE *)(v21 + 17) & 0x30) == 0)
            {
              v22 = *(_DWORD *)(i - 4);
              if (v22 < 0
                && (v23 = i - 24 - 32 * (v22 & 0x7FFFFFF), v26 = *(_QWORD *)(v23 - 8), v24 = v23 - 8, (v25 = v26) != 0))
              {
                v27 = -v25;
                while (1)
                {
                  v28 = *(_DWORD *)(*(_QWORD *)(v24 + v27) + 8);
                  v20 = v28 > 7;
                  v29 = (1 << v28) & 0x83;
                  if (v20 || v29 == 0)
                    break;
                  v27 += 16;
                  if (!v27)
                    goto LABEL_31;
                }
              }
              else
              {
LABEL_31:
                if ((llvm::CallBase::hasFnAttrOnCalledFunction(i - 24, 45) & 1) != 0
                  || (llvm::CallBase::hasFnAttrOnCalledFunction(i - 24, 44) & 1) != 0)
                {
                  continue;
                }
              }
              if ((sub_1C598DE9C(i - 24, a2 + 1) & 1) != 0)
                goto LABEL_47;
            }
          }
        }
      }
    }
  }
  v4 = 1;
  return (v4 | v2) & 1;
}

void llvm::initializeObjCARCContractLegacyPassPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1EF8F7220);
  if (v2 != -1)
  {
    v5[0] = sub_1C598E0DC;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1EF8F7220, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C598E0DC(llvm *a1, llvm::PassRegistry *a2)
{
  uint64_t v3;

  llvm::initializeAAResultsWrapperPassPass(a1, a2);
  llvm::initializeDominatorTreeWrapperPassPass((uint64_t)a1);
  v3 = operator new();
  *(_QWORD *)v3 = "ObjC ARC contraction";
  *(_QWORD *)(v3 + 8) = 20;
  *(_QWORD *)(v3 + 16) = "objc-arc-contract";
  *(_QWORD *)(v3 + 24) = 17;
  *(_QWORD *)(v3 + 32) = &unk_1EF8F5720;
  *(_WORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = sub_1C598F890;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

uint64_t sub_1C598E178(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1EF8F5720;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E8184ED8;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1EF8F7220);
  if (v3 != -1)
  {
    v7[0] = sub_1C598E0DC;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1EF8F7220, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

_BYTE *sub_1C598E240(uint64_t a1, uint64_t a2)
{
  BOOL v4;
  unsigned int OSVersion;
  BOOL v6;
  _BYTE *result;
  _BYTE *v8;
  uint64_t v9[4];
  __int16 v10;
  void *__p[2];
  char v12;
  int v13;
  int v14;

  *(_QWORD *)(a1 + 80) = a2;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_QWORD *)(a1 + 168) = 0;
  if (dword_1ED81A4C0)
  {
    v4 = dword_1ED81A4C0 == 1;
  }
  else
  {
    v10 = 260;
    v9[0] = a2 + 216;
    llvm::Triple::Triple((uint64_t)__p, (llvm::Twine *)v9);
    if ((v13 - 3) > 2)
    {
      v4 = 0;
    }
    else
    {
      OSVersion = llvm::Triple::getOSVersion((llvm::Triple *)__p);
      v4 = 0;
      switch(v14)
      {
        case 28:
          goto LABEL_8;
        case 29:
          v6 = OSVersion > 8;
          goto LABEL_10;
        case 30:
          v6 = OSVersion > 6;
          goto LABEL_10;
        case 31:
        case 32:
          break;
        case 33:
          v4 = 1;
          break;
        default:
          if (v14 != 7)
            break;
LABEL_8:
          v6 = OSVersion > 0xF;
LABEL_10:
          v4 = v6;
          break;
      }
    }
    if (v12 < 0)
      operator delete(__p[0]);
  }
  *(_BYTE *)(a1 + 184) = v4;
  result = (_BYTE *)llvm::Module::getModuleFlag(a2, "clang.arc.retainAutoreleasedReturnValueMarker", 0x2DuLL);
  if (result)
  {
    if (*result)
      v8 = 0;
    else
      v8 = result;
  }
  else
  {
    v8 = 0;
  }
  *(_QWORD *)(a1 + 192) = v8;
  return result;
}

BOOL sub_1C598E37C(uint64_t a1, uint64_t a2, uint64_t a3, llvm::DominatorTree *a4)
{
  llvm::objcarc::ProvenanceAnalysis *v6;
  uint64_t v7;
  char v8;
  __int16 v9;
  const llvm::Value *v10;
  int v11;
  llvm::Value **v12;
  _BOOL8 v13;
  unsigned int v14;
  int v15;
  _QWORD *v16;
  _QWORD *i;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  uint64_t v22;
  int v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  int FunctionClass;
  uint64_t v34;
  uint64_t v35;
  int v36;
  int v37;
  uint64_t *v38;
  llvm::Module *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  uint64_t v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  llvm::Value *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unsigned int v58;
  BOOL v59;
  int v60;
  llvm::Value *v62;
  _DWORD *v63;
  uint64_t *v64;
  uint64_t v65;
  uint64_t v66;
  llvm::Value *v67;
  int v68;
  char *SingleDependency;
  const llvm::Function *v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  _QWORD *v77;
  llvm::Value *v78;
  llvm::Value *v79;
  llvm::Value *v80;
  uint64_t v81;
  llvm::Value *v82;
  uint64_t v83;
  int v84;
  unint64_t v85;
  llvm::Value *v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  uint64_t v94;
  unsigned int v95;
  uint64_t v96;
  char CanUse;
  int v98;
  uint64_t v99;
  int v100;
  __int16 v101;
  llvm::Value *v102;
  llvm::Value *v103;
  unsigned int v104;
  unsigned int v105;
  uint64_t v106;
  BOOL v107;
  uint64_t *j;
  uint64_t v109;
  uint64_t v110;
  unsigned __int8 *v111;
  int v112;
  uint64_t v113;
  unsigned int v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int v117;
  uint64_t k;
  uint64_t v119;
  uint64_t Declaration;
  uint64_t *v121;
  _QWORD *v122;
  llvm::BasicBlock *v123;
  _QWORD *v124;
  unsigned __int8 *v125;
  int v126;
  uint64_t SinglePredecessor;
  uint64_t v128;
  uint64_t v129;
  llvm::Value *v130;
  llvm::Value *v131;
  llvm::PointerType *v132;
  uint64_t v133;
  uint64_t **v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  _QWORD *v138;
  _QWORD *v139;
  uint64_t v140;
  uint64_t v141;
  int ARCInstKind;
  char CanAlterRefCount;
  uint64_t v144;
  uint64_t v145;
  llvm::PointerType *v146;
  uint64_t v147;
  uint64_t v148;
  _DWORD *v149;
  char *v150;
  _DWORD *v151;
  char *v152;
  uint64_t v153;
  uint64_t **v154;
  uint64_t v155;
  unsigned __int8 *v156;
  unsigned __int8 **v157;
  unsigned __int8 *v158;
  _QWORD *v159;
  _QWORD *v160;
  _QWORD *v161;
  uint64_t v162;
  _QWORD *v163;
  uint64_t v164;
  _QWORD *v165;
  uint64_t v166;
  uint64_t v167;
  _QWORD *v168;
  uint64_t v169;
  _QWORD *v170;
  void (*v171)(void);
  uint64_t v172;
  _QWORD *v173;
  void (*v174)(void);
  _QWORD *v175;
  _QWORD *v176;
  _QWORD *v177;
  _QWORD *v178;
  uint64_t v179;
  _QWORD *v180;
  char *v181;
  char *v182;
  uint64_t v183;
  uint64_t v184;
  unint64_t *v185;
  uint64_t v186;
  unint64_t *v187;
  unint64_t v188;
  unint64_t *v189;
  unint64_t v190;
  uint64_t v192;
  unsigned int v194;
  int v195;
  unsigned int v196;
  void *v197;
  llvm::Value *v198;
  uint64_t v199;
  llvm::Value *v200;
  llvm::Value *v201;
  uint64_t v202;
  char v203;
  uint64_t v204;
  uint64_t v205;
  llvm::objcarc::ProvenanceAnalysis *v206;
  int v207;
  uint64_t v208[2];
  int v209;
  uint64_t *v210[2];
  int v211;
  uint64_t v212;
  char v213;
  char v214;
  unsigned __int8 *v215;
  void *v216[2];
  __int128 v217;
  __int128 v218;
  char v219;
  __int128 v220;
  _OWORD v221[2];
  uint64_t v222;

  v222 = *MEMORY[0x1E0C80C00];
  if (!llvm::objcarc::EnableARCOpts)
    return 0;
  *(_WORD *)a1 = 0;
  *(_QWORD *)(a1 + 24) = a3;
  v6 = (llvm::objcarc::ProvenanceAnalysis *)(a1 + 24);
  *(_QWORD *)(a1 + 8) = a3;
  *(_QWORD *)(a1 + 16) = a4;
  v7 = a1 + 80;
  v8 = *(_BYTE *)(a1 + 184);
  v210[0] = 0;
  v210[1] = 0;
  v211 = 0;
  v212 = a1 + 80;
  v213 = 1;
  v214 = v8;
  *(_QWORD *)(a1 + 176) = v210;
  v9 = llvm::objcarc::BundledRetainClaimRVs::insertAfterInvokes((llvm::objcarc::BundledRetainClaimRVs *)v210, (llvm::Function *)a2, a4);
  *(_BYTE *)a1 |= v9 & 1;
  *(_BYTE *)(a1 + 1) |= HIBYTE(v9) & 1;
  v208[0] = 0;
  v208[1] = 0;
  v209 = 0;
  if ((*(_BYTE *)(a2 + 18) & 8) != 0)
  {
    v11 = *(_DWORD *)(a2 + 20);
    v12 = (v11 & 0x40000000) != 0 ? *(llvm::Value ***)(a2 - 8) : (llvm::Value **)(a2 - 32 * (v11 & 0x7FFFFFF));
    v14 = llvm::classifyEHPersonality(*v12, v10);
    if (v14 <= 0xC && ((1 << v14) & 0x1780) != 0)
    {
      llvm::colorEHFunclets((llvm *)a2, v10, (uint64_t)v216);
      sub_1C61A9204(v208, (uint64_t *)v216);
      sub_1C4EF1108((uint64_t *)v216);
    }
  }
  if (*(_DWORD *)(*(_QWORD *)(a2 + 24) + 8) <= 0xFFu)
    v15 = llvm::Function::callsFunctionThatReturnsTwice((llvm::Function *)a2) ^ 1;
  else
    v15 = 0;
  v16 = (_QWORD *)(a2 + 72);
  for (i = *(_QWORD **)(a2 + 80); ; i = (_QWORD *)i[1])
  {
    if (i == v16)
      goto LABEL_360;
    v18 = i - 3;
    if (!i)
      v18 = 0;
    v19 = (_QWORD *)v18[6];
    if (v19 != v18 + 5)
      break;
  }
  v205 = v7;
  v206 = v6;
  while (2)
  {
    v20 = (_QWORD *)v19[1];
    v21 = i - 3;
    if (!i)
      v21 = 0;
    if (v20 == v21 + 5)
    {
      v28 = (_QWORD *)i[1];
      i = v16;
      if (v28 != v16)
      {
        while (1)
        {
          v29 = v28 - 3;
          if (!v28)
            v29 = 0;
          v20 = (_QWORD *)v29[6];
          if (v20 != v29 + 5)
            break;
          v28 = (_QWORD *)v28[1];
          if (v28 == v16)
          {
            i = v16;
            goto LABEL_23;
          }
        }
        i = v28;
      }
    }
LABEL_23:
    if (v19)
      v22 = (uint64_t)(v19 - 3);
    else
      v22 = 0;
    v23 = *(unsigned __int8 *)(v22 + 16);
    if (v23 == 84)
      v24 = v22;
    else
      v24 = 0;
    if (v19 && v23 == 84)
    {
      if (*(_BYTE *)(**(_QWORD **)(*(_QWORD *)(v24 + 72) + 16) + 8) != 7)
      {
        sub_1C5062CEC(v24, 6, (uint64_t)v216);
        if (BYTE8(v217))
        {
          if (v20)
            v25 = (uint64_t)(v20 - 3);
          else
            v25 = 0;
          llvm::objcarc::BundledRetainClaimRVs::insertRVCallWithColors(*(uint64_t **)(a1 + 176), v25, (unsigned __int8 *)v24, (uint64_t)v208);
          while (1)
          {
            if (i != v16)
            {
              v26 = i - 3;
              if (!i)
                v26 = 0;
              if (v20 != (_QWORD *)v26[6])
                break;
            }
            i = (_QWORD *)*i;
            v27 = i - 3;
            if (!i)
              v27 = 0;
            v20 = v27 + 5;
          }
          v20 = (_QWORD *)*v20;
          *(_BYTE *)a1 = 1;
        }
      }
      v23 = *(unsigned __int8 *)(v22 + 16);
    }
    if (!v19 || v23 != 84)
    {
      if (v23 != 33)
      {
LABEL_63:
        if (v23 == 59)
          v15 = 0;
      }
      goto LABEL_65;
    }
    v30 = *(_QWORD *)(v22 - 32);
    if (!v30)
      goto LABEL_65;
    if (*(_BYTE *)(v30 + 16) || *(_QWORD *)(v30 + 24) != *(_QWORD *)(v22 + 72))
    {
LABEL_57:
      if (!*(_BYTE *)(v30 + 16) && *(_QWORD *)(v30 + 24) == *(_QWORD *)(v22 + 72) && *(_DWORD *)(v30 + 36) == 213)
      {
LABEL_60:
        *(_BYTE *)a1 = 1;
LABEL_61:
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v22 + 40) + 40, (uint64_t ***)v22);
        v31 = *(_QWORD *)(v22 + 24);
        v32 = *(_QWORD **)(v22 + 32);
        *v32 = v31;
        *(_QWORD *)(v31 + 8) = v32;
        *(_QWORD *)(v22 + 24) = 0;
        *(_QWORD *)(v22 + 32) = 0;
        llvm::Value::deleteValue((llvm::Value *)v22);
      }
      goto LABEL_65;
    }
    FunctionClass = llvm::objcarc::GetFunctionClass(*(llvm::objcarc **)(v22 - 32), v10);
    v207 = v15;
    switch(FunctionClass)
    {
      case 0:
        v103 = sub_1C61AB204(*(llvm::Value **)(v22 - 32 * (*(_DWORD *)(v22 + 20) & 0x7FFFFFF)));
        v104 = *((unsigned __int8 *)v103 + 16);
        if (v104 < 0x1C)
          goto LABEL_69;
        v105 = v104 - 33;
        v59 = v105 > 0x33;
        v106 = (1 << v105) & 0x8000000000041;
        v107 = v59 || v106 == 0;
        if (v107 || *((_QWORD *)v103 + 5) != *(_QWORD *)(v22 + 40))
          goto LABEL_69;
        for (j = (uint64_t *)((char *)v103 + 32); ; j = (uint64_t *)(v109 + 8))
        {
          v109 = *j;
          v110 = *j - 24;
          v111 = v109 ? (unsigned __int8 *)v110 : 0;
          v112 = v111[16];
          if (v112 != 77
            && (v112 != 62 || !llvm::GetElementPtrInst::hasAllZeroIndices((llvm::GetElementPtrInst *)v111)))
          {
            break;
          }
        }
        if (v111 != (unsigned __int8 *)v22)
          goto LABEL_69;
        *(_BYTE *)a1 = 1;
        Declaration = *(_QWORD *)(a1 + 136);
        if (!Declaration)
        {
          Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t **)(a1 + 80), 226, 0, 0);
          *(_QWORD *)(a1 + 136) = Declaration;
        }
        sub_1C500A72C(v22, Declaration);
        if (*(_BYTE *)(v22 + 16) != 84)
          goto LABEL_247;
LABEL_246:
        v121 = *(uint64_t **)(a1 + 176);
        v216[0] = (void *)v22;
        *(_QWORD *)&v220 = 0;
        if ((sub_1C61252B8(v121, v216, &v220) & 1) != 0)
          goto LABEL_65;
LABEL_247:
        if (!*(_QWORD *)(a1 + 192))
          goto LABEL_69;
        v122 = (_QWORD *)(v22 + 24);
        v123 = *(llvm::BasicBlock **)(v22 + 40);
        v124 = (_QWORD *)*((_QWORD *)v123 + 6);
        while (v122 != v124)
        {
          v122 = (_QWORD *)*v122;
          if (v122)
            v125 = (unsigned __int8 *)(v122 - 3);
          else
            v125 = 0;
          v126 = v125[16];
          if (v126 != 62)
          {
            if (v126 != 77)
              goto LABEL_267;
            continue;
          }
          if ((llvm::GetElementPtrInst::hasAllZeroIndices((llvm::GetElementPtrInst *)v125) & 1) == 0)
            goto LABEL_267;
        }
        SinglePredecessor = llvm::BasicBlock::getSinglePredecessor(v123);
        if (!SinglePredecessor)
          goto LABEL_69;
        v128 = *(_QWORD *)(SinglePredecessor + 40);
        if (v128 == SinglePredecessor + 40)
        {
          v129 = 0;
        }
        else
        {
          if (v128)
            v129 = v128 - 24;
          else
            v129 = 0;
          if (*(unsigned __int8 *)(v129 + 16) - 29 >= 0xB)
            v129 = 0;
        }
        v122 = (_QWORD *)(v129 + 24);
LABEL_267:
        if (v122)
          v130 = (llvm::Value *)(v122 - 3);
        else
          v130 = 0;
        v131 = sub_1C61AB204(v130);
        if (v131 == sub_1C61AB204(*(llvm::Value **)(v22 - 32 * (*(_DWORD *)(v22 + 20) & 0x7FFFFFF))))
        {
          *(_BYTE *)a1 = 1;
          v132 = (llvm::PointerType *)llvm::FunctionType::get((uint64_t **)(***(_QWORD ***)v22 + 1576), 0, 0, 0);
          v133 = llvm::InlineAsm::get(v132, *(_QWORD *)(*(_QWORD *)(a1 + 192) + 8) + 24, **(_QWORD **)(*(_QWORD *)(a1 + 192) + 8), (uint64_t)"", 0, 1, 0, 0, 0);
          v134 = 0;
          if (v133)
            v134 = *(uint64_t ***)(v133 + 72);
          LOWORD(v218) = 257;
          llvm::objcarc::createCallInstWithColors(v134, v133, 0, 0, (uint64_t)v216, v22, (uint64_t)v208);
        }
LABEL_69:
        *(_QWORD *)&v220 = v22;
        *((_QWORD *)&v220 + 1) = a1;
        v34 = *(_QWORD *)(v22 - 32 * (*(_DWORD *)(v22 + 20) & 0x7FFFFFF));
        v35 = v34;
        while (2)
        {
          sub_1C598FA5C((uint64_t)&v220, v35);
          v36 = *(unsigned __int8 *)(v35 + 16);
          if (v35 && v36 == 77)
            goto LABEL_83;
          if (v36 == 62)
            goto LABEL_75;
          if (v36 != 5)
            goto LABEL_79;
          if (*(_WORD *)(v35 + 18) != 34)
            goto LABEL_222;
LABEL_75:
          if ((sub_1C535A110(v35) & 1) != 0)
          {
            v37 = *(_DWORD *)(v35 + 20);
            if ((v37 & 0x40000000) != 0)
              v38 = *(uint64_t **)(v35 - 8);
            else
              v38 = (uint64_t *)(v35 - 32 * (v37 & 0x7FFFFFF));
            goto LABEL_84;
          }
          v36 = *(unsigned __int8 *)(v35 + 16);
LABEL_79:
          if (v36 != 1)
            goto LABEL_90;
          if ((*(_DWORD *)(v35 + 32) & 0xFu) - 5 >= 4 && ((1 << (*(_DWORD *)(v35 + 32) & 0xF)) & 0x614) != 0)
            goto LABEL_222;
          v39 = *(llvm::Module **)(v35 + 40);
          if (!v39 || !llvm::Module::getSemanticInterposition(v39) || (*(_BYTE *)(v35 + 33) & 0x40) != 0)
          {
LABEL_83:
            v38 = (uint64_t *)(v35 - 32);
LABEL_84:
            v35 = *v38;
            continue;
          }
          break;
        }
        v36 = *(unsigned __int8 *)(v35 + 16);
LABEL_90:
        if (v35)
        {
          if (v36 == 83)
          {
            v216[0] = &v217;
            v216[1] = (void *)0x100000000;
            if (*(_QWORD *)(*(_QWORD *)(v35 + 40) + 40) != *(_QWORD *)(v35 + 40) + 40)
            {
              v40 = *(_QWORD *)(*(_QWORD *)(v35 + 40) + 48);
              v41 = v40 - 24;
              v42 = v40 ? v40 - 24 : 0;
              if (v40 && *(_BYTE *)(v42 + 16) == 83)
              {
                v202 = v34;
                do
                {
                  if (v41 != v35)
                  {
                    v43 = *(_DWORD *)(v35 + 20);
                    v44 = v43 & 0x7FFFFFF;
                    if ((v43 & 0x7FFFFFF) != 0)
                    {
                      v45 = 0;
                      while (1)
                      {
                        v46 = *(_DWORD *)(v35 + 20);
                        v47 = (v46 & 0x40000000) != 0 ? *(_QWORD *)(v35 - 8) : v35 - 32 * (v46 & 0x7FFFFFF);
                        v48 = *(_QWORD *)(v47 + 32 * *(unsigned int *)(v35 + 60) + 8 * v45);
                        v49 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v47 + 32 * v45));
                        v50 = *(_DWORD *)(v41 + 20);
                        v51 = v50 & 0x7FFFFFF;
                        if ((v50 & 0x7FFFFFF) != 0)
                        {
                          v52 = 0;
                          while (1)
                          {
                            v53 = v41 - 32 * v51;
                            if ((v50 & 0x40000000) != 0)
                              v53 = *(_QWORD *)(v41 - 8);
                            if (*(_QWORD *)(v53 + 32 * *(unsigned int *)(v41 + 60) + 8 * v52) == v48)
                              break;
                            if (v51 == ++v52)
                              goto LABEL_111;
                          }
                        }
                        else
                        {
LABEL_111:
                          LODWORD(v52) = -1;
                        }
                        v15 = v207;
                        v54 = (v50 & 0x40000000) != 0 ? *(_QWORD *)(v41 - 8) : v41 - 32 * v51;
                        if (v49 != llvm::Value::stripPointerCasts(*(llvm::Value **)(v54 + 32 * v52)))
                          break;
                        if (++v45 == v44)
                          goto LABEL_120;
                      }
                    }
                    else
                    {
                      LODWORD(v45) = 0;
                    }
                    if ((_DWORD)v45 == (_DWORD)v44)
                    {
LABEL_120:
                      v55 = LODWORD(v216[1]);
                      if (LODWORD(v216[1]) >= (unint64_t)HIDWORD(v216[1]))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v216, (uint64_t)&v217, LODWORD(v216[1]) + 1, 8);
                        v55 = LODWORD(v216[1]);
                      }
                      *((_QWORD *)v216[0] + v55) = v41;
                      ++LODWORD(v216[1]);
                    }
                  }
                  v56 = *(_QWORD *)(v41 + 32);
                  v41 = v56 - 24;
                  if (v56)
                    v57 = v56 - 24;
                  else
                    v57 = 0;
                }
                while (v56 && *(_BYTE *)(v57 + 16) == 83);
                v64 = (uint64_t *)v216[0];
                if (LODWORD(v216[1]))
                {
                  v65 = 8 * LODWORD(v216[1]);
                  v34 = v202;
                  do
                  {
                    v66 = *v64++;
                    sub_1C598FA5C((uint64_t)&v220, v66);
                    v65 -= 8;
                  }
                  while (v65);
                  v64 = (uint64_t *)v216[0];
                }
                else
                {
                  v34 = v202;
                }
                if (v64 != (uint64_t *)&v217)
                  free(v64);
              }
            }
          }
        }
LABEL_222:
        v216[0] = &v217;
        v216[1] = (void *)0x200000000;
        v113 = *(_QWORD *)(v34 + 8);
        if (v113)
        {
          v114 = 0;
          do
          {
            v115 = *(_QWORD *)(v113 + 24);
            if (v115 && *(_BYTE *)(v115 + 16) == 77)
            {
              if (v114 >= HIDWORD(v216[1]))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v216, (uint64_t)&v217, v114 + 1, 8);
                v114 = v216[1];
              }
              *((_QWORD *)v216[0] + v114) = v115;
              v114 = ++LODWORD(v216[1]);
            }
            v113 = *(_QWORD *)(v113 + 8);
          }
          while (v113);
          while (v114)
          {
            v116 = *((_QWORD *)v216[0] + v114 - 1);
            v117 = v114 - 1;
            LODWORD(v216[1]) = v117;
            for (k = *(_QWORD *)(v116 + 8); k; k = *(_QWORD *)(k + 8))
            {
              v119 = *(_QWORD *)(k + 24);
              if (v119 && *(_BYTE *)(v119 + 16) == 77)
              {
                if (v117 >= HIDWORD(v216[1]))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v216, (uint64_t)&v217, v117 + 1, 8);
                  v117 = v216[1];
                }
                *((_QWORD *)v216[0] + v117) = v119;
                v117 = ++LODWORD(v216[1]);
              }
            }
            sub_1C598FA5C((uint64_t)&v220, v116);
            v114 = v216[1];
          }
        }
        if (v216[0] != &v217)
          free(v216[0]);
LABEL_65:
        v19 = v20;
        if (i != v16)
          continue;
LABEL_360:
        if ((_BYTE)v15)
        {
          v182 = *(char **)(a1 + 200);
          v181 = *(char **)(a1 + 208);
          v183 = 216;
          if (v181 == v182)
            v183 = 220;
          v184 = *(unsigned int *)(a1 + v183);
          v185 = *(unint64_t **)(a1 + 208);
          if ((_DWORD)v184)
          {
            v186 = 0;
            while (*(_QWORD *)&v181[v186] >= 0xFFFFFFFFFFFFFFFELL)
            {
              v186 += 8;
              if (8 * v184 == v186)
                goto LABEL_376;
            }
            v185 = (unint64_t *)&v181[v186];
          }
          v187 = (unint64_t *)&v181[8 * v184];
          if (v185 != v187)
          {
            v188 = *v185;
LABEL_372:
            *(_WORD *)(v188 + 18) = *(_WORD *)(v188 + 18) & 0xFFFC | 1;
            v189 = v185 + 1;
            while (v189 != v187)
            {
              v190 = *v189++;
              v188 = v190;
              if (v190 <= 0xFFFFFFFFFFFFFFFDLL)
              {
                v185 = v189 - 1;
                goto LABEL_372;
              }
            }
          }
        }
        else
        {
          v182 = *(char **)(a1 + 200);
          v181 = *(char **)(a1 + 208);
        }
LABEL_376:
        if (v181 == v182)
        {
LABEL_377:
          *(_DWORD *)(a1 + 220) = 0;
          *(_DWORD *)(a1 + 224) = 0;
        }
        else
        {
          v192 = *(unsigned int *)(a1 + 216);
          if (v192 < 0x21 || 4 * (*(_DWORD *)(a1 + 220) - *(_DWORD *)(a1 + 224)) >= v192)
          {
            memset(v181, 255, 8 * v192);
            goto LABEL_377;
          }
          free(v181);
          v194 = *(_DWORD *)(a1 + 220) - *(_DWORD *)(a1 + 224);
          v195 = 1 << (33 - __clz(v194 - 1));
          *(_DWORD *)(a1 + 220) = 0;
          *(_DWORD *)(a1 + 224) = 0;
          if (v194 <= 0x10)
            v196 = 32;
          else
            v196 = v195;
          *(_DWORD *)(a1 + 216) = v196;
          v197 = malloc_type_malloc(8 * v196, 0x4065EBACuLL);
          if (!v197)
            llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
          *(_QWORD *)(a1 + 208) = v197;
          memset(v197, 255, 8 * *(unsigned int *)(a1 + 216));
        }
        v13 = *(_BYTE *)a1 != 0;
        sub_1C4EF1108(v208);
        llvm::objcarc::BundledRetainClaimRVs::~BundledRetainClaimRVs(v210);
        return v13;
      case 1:
      case 2:
        goto LABEL_246;
      case 4:
        v79 = sub_1C61AB204(*(llvm::Value **)(v22 - 32 * (*(_DWORD *)(v22 + 20) & 0x7FFFFFF)));
        if (!v79)
          goto LABEL_65;
        v80 = v79;
        if (*((_BYTE *)v79 + 16) != 60)
          goto LABEL_65;
        if ((*((_WORD *)v79 + 9) & 0x381) != 0)
          goto LABEL_65;
        v81 = *(_QWORD *)(v22 + 40);
        if (*((_QWORD *)v79 + 5) != v81)
          goto LABEL_65;
        v199 = *(_QWORD *)(a1 + 8);
        v82 = (llvm::Value *)*((_QWORD *)v79 - 4);
        sub_1C4768AD0(*(_QWORD *)(*(_QWORD *)(v81 + 56) + 40) + 272, *(_QWORD *)v79);
        if (v84 == 1)
          v85 = -2;
        else
          v85 = (unint64_t)(v83 + 7) >> 3;
        llvm::Instruction::getAAMetadata((uint64_t ***)v80, v221);
        *(_QWORD *)&v220 = v82;
        *((_QWORD *)&v220 + 1) = v85;
        v198 = llvm::Value::stripPointerCasts(v82);
        v86 = v80;
        v87 = *((_QWORD *)v80 + 4);
        v200 = v86;
        v88 = *((_QWORD *)v86 + 5) + 40;
        if (v87 == v88)
          goto LABEL_279;
        v89 = v88;
        v203 = 0;
        v90 = 0;
        break;
      case 5:
      case 6:
        v67 = sub_1C61AB204(*(llvm::Value **)(v22 - 32 * (*(_DWORD *)(v22 + 20) & 0x7FFFFFF)));
        if (FunctionClass == 6)
          v68 = 4;
        else
          v68 = 3;
        SingleDependency = llvm::objcarc::findSingleDependency(v68, (uint64_t)v67, *(char **)(v22 + 40), v22);
        if (!SingleDependency)
          goto LABEL_69;
        v71 = (uint64_t)SingleDependency;
        if (SingleDependency[16] != 84)
          goto LABEL_69;
        v72 = *((_QWORD *)SingleDependency - 4);
        if (!v72
          || *(_BYTE *)(v72 + 16)
          || *(_QWORD *)(v72 + 24) != *(_QWORD *)(v71 + 72)
          || llvm::objcarc::GetFunctionClass((llvm::objcarc *)v72, v70)
          || sub_1C61AB204(*(llvm::Value **)(v71 - 32 * (*(_DWORD *)(v71 + 20) & 0x7FFFFFF))) != v67)
        {
          goto LABEL_69;
        }
        *(_BYTE *)a1 = 1;
        if (FunctionClass == 6)
          v73 = 10;
        else
          v73 = 9;
        v74 = sub_1C62C5510(v205, v73);
        sub_1C500A72C(v71, v74);
        v75 = *(_QWORD *)(v22 - 32 * (*(_DWORD *)(v22 + 20) & 0x7FFFFFF));
        if (*(_QWORD *)(v22 + 8))
        {
          llvm::Value::doRAUW((llvm::ValueAsMetadata *)v22, *(llvm::Value **)(v22 - 32 * (*(_DWORD *)(v22 + 20) & 0x7FFFFFF)), (llvm::Value *)1);
          llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v22 + 40) + 40, (uint64_t ***)v22);
          v76 = *(_QWORD *)(v22 + 24);
          v77 = *(_QWORD **)(v22 + 32);
          *v77 = v76;
          *(_QWORD *)(v76 + 8) = v77;
          *(_QWORD *)(v22 + 24) = 0;
          *(_QWORD *)(v22 + 32) = 0;
          v78 = (llvm::Value *)v22;
          goto LABEL_154;
        }
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v22 + 40) + 40, (uint64_t ***)v22);
        v169 = *(_QWORD *)(v22 + 24);
        v170 = *(_QWORD **)(v22 + 32);
        *v170 = v169;
        *(_QWORD *)(v169 + 8) = v170;
        *(_QWORD *)(v22 + 24) = 0;
        *(_QWORD *)(v22 + 32) = 0;
        llvm::Value::deleteValue((llvm::Value *)v22);
        *((_QWORD *)&v217 + 1) = 0;
        llvm::RecursivelyDeleteTriviallyDeadInstructions(v75, 0, 0, v216);
        if (*((void ***)&v217 + 1) == v216)
        {
          v171 = (void (*)(void))*((_QWORD *)v216[0] + 4);
        }
        else
        {
          if (!*((_QWORD *)&v217 + 1))
            goto LABEL_279;
          v171 = *(void (**)(void))(**((_QWORD **)&v217 + 1) + 40);
        }
        v171();
        goto LABEL_279;
      case 10:
      case 11:
        goto LABEL_69;
      case 14:
        v58 = *(unsigned __int8 *)(*(_QWORD *)(v22 - 32 * (*(_DWORD *)(v22 + 20) & 0x7FFFFFF) + 32) + 16);
        v59 = v58 > 0x13;
        v60 = (1 << v58) & 0x81800;
        if (v59 || v60 == 0)
          goto LABEL_65;
        v62 = (llvm::Value *)llvm::ConstantPointerNull::get(*(llvm::ConstantPointerNull **)v22, v10);
        *(_BYTE *)a1 = 1;
        v63 = operator new(0x80uLL);
        v63[21] = v63[21] & 0x38000000 | 2;
        *(_QWORD *)v63 = 0;
        *((_QWORD *)v63 + 1) = 0;
        *((_QWORD *)v63 + 2) = 0;
        *((_QWORD *)v63 + 3) = v63 + 16;
        *((_QWORD *)v63 + 4) = 0;
        *((_QWORD *)v63 + 5) = 0;
        *((_QWORD *)v63 + 6) = 0;
        *((_QWORD *)v63 + 7) = v63 + 16;
        llvm::StoreInst::StoreInst((llvm::StoreInst *)(v63 + 16), v62, *(llvm::Value **)(v22 - 32 * (*(_DWORD *)(v22 + 20) & 0x7FFFFFF)), 0, (llvm::Instruction *)v22);
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v22, v62, (llvm::Value *)1);
        goto LABEL_61;
      case 20:
        goto LABEL_60;
      case 23:
        goto LABEL_63;
      default:
        goto LABEL_57;
    }
    break;
  }
  while (1)
  {
    if (v90 && (v203 & 1) != 0)
    {
      v203 = 1;
LABEL_275:
      v135 = (v90 != 0) & v203;
      if (((v90 != 0) & v203) != 0)
        v136 = v90;
      else
        v136 = 0;
      v204 = v136;
      if (v135 == 1)
      {
        v137 = v90;
        v201 = sub_1C61AB204(*(llvm::Value **)(v90 - 64));
        v138 = (_QWORD *)(v137 + 24);
        v139 = *(_QWORD **)(*(_QWORD *)(v137 + 40) + 48);
        if (v138 != v139)
        {
          do
          {
            if (v138)
              v140 = (uint64_t)(v138 - 3);
            else
              v140 = 0;
            if (v138)
            {
              if (*(_BYTE *)(v140 + 16) == 84)
              {
                v141 = *(_QWORD *)(v140 - 32);
                if (v141)
                {
                  if (!*(_BYTE *)(v141 + 16)
                    && *(_QWORD *)(v141 + 24) == *(_QWORD *)(v140 + 72)
                    && !llvm::objcarc::GetFunctionClass((llvm::objcarc *)v141, v10))
                  {
                    goto LABEL_295;
                  }
                }
              }
            }
            ARCInstKind = llvm::objcarc::GetARCInstKind((llvm::objcarc *)v140, v10);
            if (llvm::objcarc::CanDecrementRefCount(ARCInstKind))
            {
              CanAlterRefCount = llvm::objcarc::CanAlterRefCount(v140, v201, v206, ARCInstKind);
              if (v140 != v22 && (CanAlterRefCount & 1) != 0)
                goto LABEL_279;
            }
            v138 = (_QWORD *)*v138;
          }
          while (v138 != v139);
          v138 = v139;
        }
LABEL_295:
        v144 = v138 ? (uint64_t)(v138 - 3) : 0;
        if (v138)
        {
          if (*(_BYTE *)(v144 + 16) == 84)
          {
            v145 = *(_QWORD *)(v144 - 32);
            if (v145)
            {
              if (!*(_BYTE *)(v145 + 16)
                && *(_QWORD *)(v145 + 24) == *(_QWORD *)(v144 + 72)
                && !llvm::objcarc::GetFunctionClass((llvm::objcarc *)v145, v10)
                && sub_1C61AB204(*(llvm::Value **)(v144 - 32 * (*(_DWORD *)(v144 + 20) & 0x7FFFFFF))) == v201)
              {
                *(_BYTE *)a1 = 1;
                v146 = (llvm::PointerType *)llvm::PointerType::get((llvm::PointerType *)(***(_QWORD ***)v22 + 1912), 0);
                v147 = llvm::PointerType::get(v146, 0);
                v220 = 0uLL;
                *(_QWORD *)&v220 = *((_QWORD *)v200 - 4);
                *((_QWORD *)&v220 + 1) = v201;
                if (*(_QWORD *)v220 != v147)
                {
                  v148 = v147;
                  v149 = operator new(0x60uLL);
                  v150 = (char *)(v149 + 8);
                  v149[13] = v149[13] & 0x38000000 | 1;
                  *(_QWORD *)v149 = 0;
                  *((_QWORD *)v149 + 1) = 0;
                  *((_QWORD *)v149 + 2) = 0;
                  *((_QWORD *)v149 + 3) = v149 + 8;
                  LOWORD(v218) = 257;
                  llvm::BitCastInst::BitCastInst((uint64_t)(v149 + 8), v220, v148, (uint64_t)v216, v204);
                  *(_QWORD *)&v220 = v150;
                  v201 = (llvm::Value *)*((_QWORD *)&v220 + 1);
                }
                if (*(llvm::PointerType **)v201 != v146)
                {
                  v151 = operator new(0x60uLL);
                  v152 = (char *)(v151 + 8);
                  v151[13] = v151[13] & 0x38000000 | 1;
                  *(_QWORD *)v151 = 0;
                  *((_QWORD *)v151 + 1) = 0;
                  *((_QWORD *)v151 + 2) = 0;
                  *((_QWORD *)v151 + 3) = v151 + 8;
                  LOWORD(v218) = 257;
                  llvm::BitCastInst::BitCastInst((uint64_t)(v151 + 8), *((uint64_t *)&v220 + 1), (uint64_t)v146, (uint64_t)v216, v204);
                  *((_QWORD *)&v220 + 1) = v152;
                }
                v153 = *(_QWORD *)(a1 + 128);
                if (v153
                  || (v154 = (uint64_t **)llvm::Intrinsic::getDeclaration(*(uint64_t **)(a1 + 80), 229, 0, 0),
                      v153 = (uint64_t)v154,
                      (*(_QWORD *)(a1 + 128) = v154) != 0))
                {
                  v154 = *(uint64_t ***)(v153 + 24);
                }
                LOWORD(v218) = 257;
                v155 = llvm::objcarc::createCallInstWithColors(v154, v153, (uint64_t *)&v220, 2, (uint64_t)v216, v204, (uint64_t)v208);
                *(_QWORD *)(v155 + 64) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(v155 + 64), **(uint64_t ***)v155, -1, 37);
                v156 = *(unsigned __int8 **)(v204 + 48);
                v215 = v156;
                if (v156)
                  llvm::MetadataTracking::track((uint64_t)&v215, v156, 2);
                v157 = (unsigned __int8 **)(v155 + 48);
                if (&v215 == (unsigned __int8 **)(v155 + 48))
                {
                  if (v215)
                    llvm::MetadataTracking::untrack((uint64_t)&v215, v215);
                }
                else
                {
                  if (*v157)
                    llvm::MetadataTracking::untrack(v155 + 48, *v157);
                  v158 = v215;
                  *v157 = v215;
                  if (v158)
                  {
                    llvm::MetadataTracking::retrack((uint64_t)&v215, v158, v155 + 48);
                    v215 = 0;
                  }
                }
                sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 200), v155);
                if (v20 && v20 - 3 == (_QWORD *)v144)
                {
                  v20 = (_QWORD *)v20[1];
                  v159 = i - 3;
                  if (!i)
                    v159 = 0;
                  if (v20 == v159 + 5)
                  {
                    v175 = (_QWORD *)i[1];
                    i = v16;
                    if (v175 != v16)
                    {
                      while (1)
                      {
                        v176 = v175 - 3;
                        if (!v175)
                          v176 = 0;
                        v20 = (_QWORD *)v176[6];
                        if (v20 != v176 + 5)
                          break;
                        v175 = (_QWORD *)v175[1];
                        if (v175 == v16)
                        {
                          i = v16;
                          goto LABEL_324;
                        }
                      }
                      i = v175;
                    }
                  }
                }
LABEL_324:
                v160 = v20 - 3;
                if (!v20)
                  v160 = 0;
                if (v160 == (_QWORD *)v204)
                {
                  v20 = (_QWORD *)v20[1];
                  v161 = i - 3;
                  if (!i)
                    v161 = 0;
                  if (v20 == v161 + 5)
                  {
                    v177 = (_QWORD *)i[1];
                    i = v16;
                    if (v177 != v16)
                    {
                      while (1)
                      {
                        v178 = v177 - 3;
                        if (!v177)
                          v178 = 0;
                        v20 = (_QWORD *)v178[6];
                        if (v20 != v178 + 5)
                          break;
                        v177 = (_QWORD *)v177[1];
                        if (v177 == v16)
                        {
                          i = v16;
                          goto LABEL_330;
                        }
                      }
                      i = v177;
                    }
                  }
                }
LABEL_330:
                llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v204 + 40) + 40, (uint64_t ***)v204);
                v162 = *(_QWORD *)(v204 + 24);
                v163 = *(_QWORD **)(v204 + 32);
                *v163 = v162;
                *(_QWORD *)(v162 + 8) = v163;
                *(_QWORD *)(v204 + 24) = 0;
                *(_QWORD *)(v204 + 32) = 0;
                llvm::Value::deleteValue((llvm::Value *)v204);
                llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v22 + 40) + 40, (uint64_t ***)v22);
                v164 = *(_QWORD *)(v22 + 24);
                v165 = *(_QWORD **)(v22 + 32);
                *v165 = v164;
                *(_QWORD *)(v164 + 8) = v165;
                *(_QWORD *)(v22 + 24) = 0;
                *(_QWORD *)(v22 + 32) = 0;
                llvm::Value::deleteValue((llvm::Value *)v22);
                v166 = *(_QWORD *)(v144 - 32 * (*(_DWORD *)(v144 + 20) & 0x7FFFFFF));
                if (!*(_QWORD *)(v144 + 8))
                {
                  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v144 + 40) + 40, (uint64_t ***)v144);
                  v172 = *(_QWORD *)(v144 + 24);
                  v173 = *(_QWORD **)(v144 + 32);
                  *v173 = v172;
                  *(_QWORD *)(v172 + 8) = v173;
                  *(_QWORD *)(v144 + 24) = 0;
                  *(_QWORD *)(v144 + 32) = 0;
                  llvm::Value::deleteValue((llvm::Value *)v144);
                  *((_QWORD *)&v217 + 1) = 0;
                  llvm::RecursivelyDeleteTriviallyDeadInstructions(v166, 0, 0, v216);
                  if (*((void ***)&v217 + 1) == v216)
                  {
                    v174 = (void (*)(void))*((_QWORD *)v216[0] + 4);
                  }
                  else
                  {
                    if (!*((_QWORD *)&v217 + 1))
                      goto LABEL_354;
                    v174 = *(void (**)(void))(**((_QWORD **)&v217 + 1) + 40);
                  }
                  v174();
                  goto LABEL_354;
                }
                llvm::Value::doRAUW((llvm::ValueAsMetadata *)v144, *(llvm::Value **)(v144 - 32 * (*(_DWORD *)(v144 + 20) & 0x7FFFFFF)), (llvm::Value *)1);
                llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v144 + 40) + 40, (uint64_t ***)v144);
                v167 = *(_QWORD *)(v144 + 24);
                v168 = *(_QWORD **)(v144 + 32);
                *v168 = v167;
                *(_QWORD *)(v167 + 8) = v168;
                *(_QWORD *)(v144 + 24) = 0;
                *(_QWORD *)(v144 + 32) = 0;
                llvm::Value::deleteValue((llvm::Value *)v144);
LABEL_354:
                if (!*((_QWORD *)v200 + 1))
                {
                  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v200 + 5) + 40, (uint64_t ***)v200);
                  v179 = *((_QWORD *)v200 + 3);
                  v180 = (_QWORD *)*((_QWORD *)v200 + 4);
                  *v180 = v179;
                  *(_QWORD *)(v179 + 8) = v180;
                  *((_QWORD *)v200 + 3) = 0;
                  *((_QWORD *)v200 + 4) = 0;
                  v78 = v200;
LABEL_154:
                  llvm::Value::deleteValue(v78);
                }
              }
            }
          }
        }
      }
LABEL_279:
      v15 = v207;
      goto LABEL_65;
    }
    if (v87)
      v91 = v87 - 24;
    else
      v91 = 0;
    if (v91 == v22)
    {
      v203 = 1;
    }
    else
    {
      v92 = *(unsigned __int8 *)(v91 + 16);
      if (v87 && v92 == 84)
      {
        v93 = *(_QWORD *)(v91 - 32);
        if (v93)
        {
          v94 = v90;
          if (!*(_BYTE *)(v93 + 16) && *(_QWORD *)(v93 + 24) == *(_QWORD *)(v91 + 72))
            v95 = llvm::objcarc::GetFunctionClass((llvm::objcarc *)v93, v10);
          else
            v95 = 21;
          v90 = v94;
          if (v94)
          {
LABEL_185:
            v96 = v90;
            CanUse = llvm::objcarc::CanUse(v91, v200, (const llvm::Value **)v206, v95);
            v90 = v96;
            if ((CanUse & 1) != 0)
              goto LABEL_279;
            goto LABEL_186;
          }
        }
        else
        {
          v95 = 21;
          if (v90)
            goto LABEL_185;
        }
      }
      else
      {
        if (v92 == 33)
          v95 = 21;
        else
          v95 = 23;
        if (v90)
          goto LABEL_185;
      }
      if (v95 >= 2
        && (*(_OWORD *)v216 = v220,
            v217 = v221[0],
            v218 = v221[1],
            v219 = 1,
            (sub_1C4D90C64(v199, v91, (__int128 *)v216) & 2) != 0))
      {
        v98 = *(unsigned __int8 *)(v91 + 16);
        if (v98 == 61)
          v99 = v91;
        else
          v99 = 0;
        if (!v87 || v98 != 61)
          goto LABEL_279;
        v100 = *(unsigned __int8 *)(v99 + 16);
        if (v100 == 60 || v100 == 61)
        {
          v101 = *(_WORD *)(v99 + 18);
          if ((v101 & 0x380) != 0 || (v101 & 1) != 0)
            goto LABEL_279;
        }
        else if ((v100 - 63) < 3 || (*(_WORD *)(v99 + 18) & 1) != 0)
        {
          goto LABEL_279;
        }
        v102 = llvm::Value::stripPointerCasts(*(llvm::Value **)(v99 - 32));
        v90 = v87 - 24;
        if (v102 != v198)
          goto LABEL_279;
      }
      else
      {
        v90 = 0;
      }
    }
LABEL_186:
    v87 = *(_QWORD *)(v87 + 8);
    if (v87 == v89)
      goto LABEL_275;
  }
}

uint64_t sub_1C598F890()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C598E178(v0);
}

void sub_1C598F8BC(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C598F8E0(uint64_t a1, uint64_t a2)
{
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::AAResultsWrapperPass::ID);
  return sub_1C4771E64(a2, a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
}

BOOL sub_1C598F91C(uint64_t a1, uint64_t a2)
{
  void **v4;
  void *v5;
  uint64_t v6;
  void **v7;
  void *v8;
  uint64_t v9;
  _BOOL8 v10;
  _BYTE v12[32];
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16[2];
  int v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  _BYTE v23[25];
  _BYTE *v24;
  _BYTE *v25;
  uint64_t v26;
  int v27;
  _BYTE v28[64];

  v13 = 0;
  v14 = 0;
  v15 = 0;
  v16[0] = 0;
  v16[1] = 0;
  v17 = 0;
  v18 = 0u;
  v19 = 0u;
  v20 = 0u;
  v21 = 0u;
  v22 = 0u;
  memset(v23, 0, sizeof(v23));
  v24 = v28;
  v25 = v28;
  v26 = 8;
  v27 = 0;
  sub_1C598E240((uint64_t)v12, *(_QWORD *)(a2 + 40));
  v4 = **(void ****)(a1 + 8);
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != &llvm::AAResultsWrapperPass::ID);
  v6 = *(_QWORD *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), &llvm::AAResultsWrapperPass::ID)+ 32);
  v7 = **(void ****)(a1 + 8);
  do
  {
    v8 = *v7;
    v7 += 2;
  }
  while (v8 != &llvm::DominatorTreeWrapperPass::ID);
  v9 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v7 - 1) + 96))(*(v7 - 1), &llvm::DominatorTreeWrapperPass::ID);
  v10 = sub_1C598E37C((uint64_t)v12, a2, v6, (llvm::DominatorTree *)(v9 + 32));
  if (v25 != v24)
    free(v25);
  sub_1C4EC4314(v16);
  MEMORY[0x1CAA32FB4](v13, 8);
  return v10;
}

uint64_t sub_1C598FA5C(uint64_t result, uint64_t a2)
{
  unsigned int v2;
  uint64_t **v4;
  const llvm::Value **v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t *v8;
  int v9;
  uint64_t *v10;
  const llvm::Value *v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  _DWORD *v16;
  const llvm::Value *v17;
  uint64_t *v18;
  uint64_t *v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t v22;
  uint64_t i;
  uint64_t j;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  int v32;
  int v33;
  _DWORD *v34;
  const llvm::Value *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  _BYTE v44[32];
  __int16 v45;

  v2 = *(unsigned __int8 *)(a2 + 16);
  if (v2 <= 0x1B && v2 != 21)
    return result;
  v4 = *(uint64_t ***)(a2 + 8);
  if (!v4)
    return result;
  v5 = (const llvm::Value **)result;
  v6 = *(_QWORD *)(result + 8);
  do
  {
    v7 = v4[1];
    v8 = v4[3];
    v9 = *((_DWORD *)v8 + 5);
    if ((v9 & 0x40000000) != 0)
      v10 = (uint64_t *)*(v8 - 1);
    else
      v10 = &v8[-4 * (v9 & 0x7FFFFFF)];
    result = llvm::DominatorTree::isReachableFromEntry(*(llvm::DominatorTree **)(v6 + 16), (const llvm::Use *)v4);
    if (!(_DWORD)result)
      goto LABEL_60;
    result = llvm::DominatorTree::dominates(*(llvm::DominatorTree **)(v6 + 16), *v5, (const llvm::Use *)v4);
    if (!(_DWORD)result)
      goto LABEL_60;
    *(_BYTE *)v6 = 1;
    v11 = *v5;
    v12 = **v4;
    v13 = (uint64_t)v4[3];
    if (!v13 || *(_BYTE *)(v13 + 16) != 83)
    {
      if (*(_QWORD *)v11 == v12)
        goto LABEL_63;
      v16 = operator new(0x60uLL);
      v17 = (const llvm::Value *)(v16 + 8);
      v16[13] = v16[13] & 0x38000000 | 1;
      *(_QWORD *)v16 = 0;
      *((_QWORD *)v16 + 1) = 0;
      *((_QWORD *)v16 + 2) = 0;
      *((_QWORD *)v16 + 3) = v16 + 8;
      v45 = 257;
      result = llvm::BitCastInst::BitCastInst((uint64_t)(v16 + 8), (uint64_t)v11, v12, (uint64_t)v44, (uint64_t)v4[3]);
      v11 = v17;
      if (*v4)
      {
LABEL_63:
        *v4[2] = (uint64_t)v4[1];
        v18 = v4[1];
        if (v18)
          v18[2] = (uint64_t)v4[2];
      }
      *v4 = (uint64_t *)v11;
      v21 = (uint64_t *)*((_QWORD *)v11 + 1);
      v20 = (uint64_t *)((char *)v11 + 8);
      v19 = v21;
      v4[1] = v21;
      if (v21)
        v19[2] = (uint64_t)(v4 + 1);
      v4[2] = v20;
      *v20 = (uint64_t)v4;
      goto LABEL_60;
    }
    v14 = *(_DWORD *)(v13 + 20);
    if ((v14 & 0x40000000) != 0)
      v15 = *(_QWORD *)(v13 - 8);
    else
      v15 = v13 - 32 * (v14 & 0x7FFFFFF);
    v22 = *(_QWORD *)(v15
                    + 32 * *(unsigned int *)(v13 + 60)
                    + 8 * ((unint64_t)((char *)v4 - (char *)v10) >> 5));
    if (*(_QWORD *)v11 == v12)
      goto LABEL_45;
    for (i = v22; ; i = **(_QWORD **)(v30[1] + 8))
    {
      for (j = *(_QWORD *)(i + 48); ; j = *(_QWORD *)(j + 8))
      {
        v25 = j - 24;
        if (!j)
          v25 = 0;
        if (*(_BYTE *)(v25 + 16) != 83)
          break;
      }
      if (*(_BYTE *)(j - 8) != 38)
        break;
      v26 = *(_QWORD *)(v6 + 16);
      v27 = *(_QWORD *)(v26 + 24);
      v28 = *(unsigned int *)(v26 + 40);
      if ((_DWORD)v28)
      {
        LODWORD(v29) = (v28 - 1) & ((i >> 4) ^ (i >> 9));
        v30 = (uint64_t *)(v27 + 16 * v29);
        v31 = *v30;
        if (i == *v30)
          continue;
        v32 = 1;
        while (v31 != -4096)
        {
          v33 = v29 + v32++;
          v29 = v33 & (v28 - 1);
          v31 = *(_QWORD *)(v27 + 16 * v29);
          if (i == v31)
          {
            v30 = (uint64_t *)(v27 + 16 * v29);
            goto LABEL_40;
          }
        }
      }
      v30 = (uint64_t *)(v27 + 16 * v28);
LABEL_40:
      ;
    }
    v34 = operator new(0x60uLL);
    v35 = (const llvm::Value *)(v34 + 8);
    v34[13] = v34[13] & 0x38000000 | 1;
    *(_QWORD *)v34 = 0;
    *((_QWORD *)v34 + 1) = 0;
    *((_QWORD *)v34 + 2) = 0;
    *((_QWORD *)v34 + 3) = v34 + 8;
    v45 = 257;
    v36 = *(_QWORD *)(i + 40);
    if (v36)
      v37 = v36 - 24;
    else
      v37 = 0;
    result = llvm::BitCastInst::BitCastInst((uint64_t)(v34 + 8), (uint64_t)v11, v12, (uint64_t)v44, v37);
    v14 = *(_DWORD *)(v13 + 20);
    v11 = v35;
LABEL_45:
    v38 = v14 & 0x7FFFFFF;
    if ((v14 & 0x7FFFFFF) != 0)
    {
      v39 = 0;
      v40 = 0;
      do
      {
        v41 = *(_DWORD *)(v13 + 20);
        if ((v41 & 0x40000000) != 0)
          v42 = *(_QWORD *)(v13 - 8);
        else
          v42 = v13 - 32 * (v41 & 0x7FFFFFF);
        if (*(_QWORD *)(v42 + 32 * *(unsigned int *)(v13 + 60) + 8 * v40) == v22)
        {
          if (v7)
          {
            if ((v41 & 0x40000000) != 0)
              v43 = *(_QWORD *)(v13 - 8);
            else
              v43 = v13 - 32 * (v41 & 0x7FFFFFF);
            if ((uint64_t *)(v43 + v39) == v7)
              v7 = (uint64_t *)v7[1];
          }
          result = sub_1C6125834(v13, v40, (uint64_t)v11);
        }
        ++v40;
        v39 += 32;
      }
      while (v38 != v40);
    }
LABEL_60:
    v4 = (uint64_t **)v7;
  }
  while (v7);
  return result;
}

uint64_t sub_1C598FD8C()
{
  __int128 v1;

  *(_QWORD *)&v1 = "Enable generation of calls to objc_claimAutoreleasedReturnValue";
  *((_QWORD *)&v1 + 1) = 63;
  sub_1C62C5578(&v1);
  return __cxa_atexit((void (*)(void *))sub_1C506F830, &qword_1ED81A440, &dword_1C475E000);
}

uint64_t llvm::objcarc::CanAlterRefCount(uint64_t a1, const llvm::Value *a2, llvm::objcarc::ProvenanceAnalysis *a3, int a4)
{
  _QWORD *v7;
  _QWORD *v8;
  int v9;
  llvm::AAResults *v10;
  int v12;
  uint64_t v13;
  llvm::objcarc **v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const llvm::Value *v19;
  uint64_t v20;

  if ((a4 - 5) < 0x13 && ((0x48003u >> (a4 - 5)) & 1) != 0)
    return 0;
  v7 = *(_QWORD **)(*(_QWORD *)a3 + 8);
  v8 = *(_QWORD **)(*(_QWORD *)a3 + 16);
  if (v7 != v8)
  {
    v9 = 63;
    while (1)
    {
      v9 &= (*(uint64_t (**)(_QWORD, uint64_t))(*(_QWORD *)*v7 + 48))(*v7, a1);
      if (v9 == 4)
        break;
      if (++v7 == v8)
      {
        if ((v9 & 2) == 0)
          return 0;
        if ((v9 & 0x30) == 0)
        {
          v12 = *(_DWORD *)(a1 + 20);
          v13 = v12 & 0x7FFFFFF;
          v14 = (llvm::objcarc **)(a1 - 32 * v13);
          v15 = *(unsigned __int8 *)(a1 + 16);
          if (v15 == 84)
          {
            v16 = 0;
          }
          else if (v15 == 39)
          {
            v16 = (*(_DWORD *)(a1 + 80) + 1);
          }
          else
          {
            v16 = 2;
          }
          if (v12 < 0 && (v20 = (uint64_t)*(v14 - 1), (v20 & 0xFFFFFFFF0) != 0))
            v17 = (*((_DWORD *)v14 - 3) - *(_DWORD *)((char *)v14 - v20));
          else
            v17 = 0;
          if (v14 == (llvm::objcarc **)(a1 - 32 * v16 - 32 * v17 - 32))
            return 0;
          v18 = 32 * v13 - 32 * v16 - 32 * v17 - 32;
          while (1)
          {
            v19 = *v14;
            if (llvm::objcarc::IsPotentialRetainableObjPtr(*v14, *(const llvm::Value **)a3, v10))
            {
              if (llvm::objcarc::ProvenanceAnalysis::related(a3, a2, v19))
                break;
            }
            v14 += 4;
            v18 -= 32;
            if (!v18)
              return 0;
          }
        }
        return 1;
      }
    }
    return 0;
  }
  return 1;
}

uint64_t llvm::objcarc::CanUse(uint64_t a1, const llvm::Value *a2, const llvm::Value **a3, int a4)
{
  uint64_t result;
  int v8;
  int v9;
  uint64_t v10;
  llvm::objcarc **v11;
  int v13;
  uint64_t v14;
  llvm::objcarc **v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  const llvm::Value *v19;
  uint64_t v20;
  const llvm::Value *v21;
  llvm *v22;
  llvm::AAResults *v23;
  uint64_t v24;

  if (a4 == 22)
    return 0;
  v8 = *(unsigned __int8 *)(a1 + 16);
  if (a1 && v8 == 81)
  {
    if ((llvm::objcarc::IsPotentialRetainableObjPtr(*(llvm::objcarc **)(a1 - 32), *a3, (llvm::AAResults *)a3) & 1) == 0)
      return 0;
    goto LABEL_7;
  }
  if ((v8 - 33) <= 0x33 && ((1 << (v8 - 33)) & 0x8000000000041) != 0)
  {
    v13 = *(_DWORD *)(a1 + 20);
    v14 = v13 & 0x7FFFFFF;
    v15 = (llvm::objcarc **)(a1 - 32 * v14);
    if (v8 == 84)
    {
      v16 = 0;
    }
    else if (v8 == 39)
    {
      v16 = (*(_DWORD *)(a1 + 80) + 1);
    }
    else
    {
      v16 = 2;
    }
    if (v13 < 0 && (v24 = (uint64_t)*(v15 - 1), (v24 & 0xFFFFFFFF0) != 0))
      v17 = (*((_DWORD *)v15 - 3) - *(_DWORD *)((char *)v15 - v24));
    else
      v17 = 0;
    if (v15 == (llvm::objcarc **)(a1 - 32 * v16 - 32 * v17 - 32))
      return 0;
    v18 = 32 * v14 - 32 * v16 - 32 * v17 - 32;
    while (1)
    {
      v19 = *v15;
      if (llvm::objcarc::IsPotentialRetainableObjPtr(*v15, *a3, (llvm::AAResults *)a3))
      {
        if (llvm::objcarc::ProvenanceAnalysis::related((llvm::objcarc::ProvenanceAnalysis *)a3, a2, v19))
          break;
      }
      v15 += 4;
      v18 -= 32;
      if (!v18)
        return 0;
    }
    return 1;
  }
  if (!a1 || v8 != 61)
  {
LABEL_7:
    v9 = *(_DWORD *)(a1 + 20);
    if ((v9 & 0x40000000) == 0)
    {
      v10 = v9 & 0x7FFFFFF;
      v11 = (llvm::objcarc **)(a1 - 32 * v10);
      if (!v10)
        return 0;
      goto LABEL_26;
    }
    v11 = *(llvm::objcarc ***)(a1 - 8);
    v10 = v9 & 0x7FFFFFF;
    if (v10)
    {
LABEL_26:
      v20 = 32 * v10;
      while (1)
      {
        v21 = *v11;
        if (llvm::objcarc::IsPotentialRetainableObjPtr(*v11, *a3, (llvm::AAResults *)a3))
        {
          if (llvm::objcarc::ProvenanceAnalysis::related((llvm::objcarc::ProvenanceAnalysis *)a3, a2, v21))
            break;
        }
        v11 += 4;
        v20 -= 32;
        if (!v20)
          return 0;
      }
      return 1;
    }
    return 0;
  }
  v22 = sub_1C61AB258(*(llvm **)(a1 - 32));
  result = llvm::objcarc::IsPotentialRetainableObjPtr(v22, *a3, v23);
  if ((_DWORD)result)
    return llvm::objcarc::ProvenanceAnalysis::related((llvm::objcarc::ProvenanceAnalysis *)a3, v22, a2);
  return result;
}

char *llvm::objcarc::findSingleDependency(int a1, uint64_t a2, char *a3, uint64_t a4)
{
  unsigned int v7;
  char *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  BOOL v15;
  uint64_t v17;
  char *result;
  char v19;
  uint64_t v20;
  uint64_t *v21;
  unsigned int v22;
  BOOL v23;
  _BYTE *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t *v30;
  uint64_t v31;
  char *v32;
  uint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t *v36;
  char v37;
  char *v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  unsigned int v43;
  uint64_t *v44;
  unint64_t *v45;
  unint64_t v46;
  _BYTE *v47;
  _BYTE *v48;
  uint64_t v49;
  uint64_t *v50;
  uint64_t v51;
  uint64_t *v52;
  uint64_t v53;
  _BYTE *v54;
  _BYTE *v55;
  uint64_t v56;
  int v57;
  _BYTE v58[32];
  char *v59;
  char *v60;
  uint64_t v61;
  int v62;
  _BYTE v63[32];
  void *v64;
  uint64_t v65;
  _QWORD v66[10];

  v66[8] = *MEMORY[0x1E0C80C00];
  v54 = v58;
  v55 = v58;
  v56 = 4;
  v57 = 0;
  v59 = v63;
  v60 = v63;
  v61 = 4;
  v62 = 0;
  v64 = v66;
  v66[0] = a3;
  v66[1] = a4 + 24;
  v7 = 1;
  v65 = 0x400000001;
  do
  {
    v8 = (char *)v64 + 16 * v7;
    v9 = (_QWORD *)*((_QWORD *)v8 - 2);
    v10 = (_QWORD *)*((_QWORD *)v8 - 1);
    LODWORD(v65) = v7 - 1;
    v11 = (_QWORD *)v9[6];
    if (v11 == v10)
      goto LABEL_8;
    while (1)
    {
      v10 = (_QWORD *)*v10;
      v12 = v10 ? (uint64_t)(v10 - 3) : 0;
      if (llvm::objcarc::Depends(a1, v12, a2))
        break;
      if (v10 == v11)
      {
LABEL_8:
        while (1)
        {
          v9 = (_QWORD *)v9[1];
          if (!v9)
            goto LABEL_86;
          v13 = v9[3];
          v14 = *(unsigned __int8 *)(v13 + 16);
          if (v13)
            v15 = v14 >= 0x1C;
          else
            v15 = 0;
          if (v15 && v14 - 29 <= 0xA)
          {
LABEL_16:
            v17 = *(_QWORD *)(v13 + 40);
            result = (char *)sub_1C4774094((llvm::SmallPtrSetImplBase *)&v59, v17);
            if (v19)
            {
              v20 = v65;
              if (v65 >= (unint64_t)HIDWORD(v65))
              {
                result = (char *)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, (uint64_t)v66, v65 + 1, 16);
                v20 = v65;
              }
              v21 = (uint64_t *)((char *)v64 + 16 * v20);
              *v21 = v17;
              v21[1] = v17 + 40;
              LODWORD(v65) = v65 + 1;
            }
            while (1)
            {
              v9 = (_QWORD *)v9[1];
              if (!v9)
                goto LABEL_30;
              v13 = v9[3];
              v22 = *(unsigned __int8 *)(v13 + 16);
              if (v13)
                v23 = v22 >= 0x1C;
              else
                v23 = 0;
              if (v23 && v22 - 29 < 0xB)
                goto LABEL_16;
            }
          }
        }
      }
    }
    result = (char *)sub_1C4774094((llvm::SmallPtrSetImplBase *)&v54, v12);
LABEL_30:
    v7 = v65;
  }
  while ((_DWORD)v65);
  if (HIDWORD(v56) - v57 != 1)
    goto LABEL_86;
  v25 = v55;
  v26 = v55 == v54 ? HIDWORD(v56) : v56;
  v27 = 8 * v26;
  v28 = (uint64_t *)v55;
  if ((_DWORD)v26)
  {
    v29 = 8 * v26;
    v30 = (uint64_t *)v55;
    while (1)
    {
      v31 = *v30;
      if ((unint64_t)*v30 < 0xFFFFFFFFFFFFFFFELL)
        break;
      ++v30;
      v29 -= 8;
      if (!v29)
      {
        v28 = (uint64_t *)&v55[8 * v26];
        goto LABEL_40;
      }
    }
  }
  else
  {
LABEL_40:
    v31 = *v28;
  }
  if (!v31)
  {
LABEL_86:
    v37 = 0;
    goto LABEL_87;
  }
  if ((_DWORD)v26)
  {
    while (*(_QWORD *)v25 >= 0xFFFFFFFFFFFFFFFELL)
    {
      v25 += 8;
      v27 -= 8;
      if (!v27)
      {
        v25 = &v55[8 * v26];
        break;
      }
    }
  }
  v32 = *(char **)(*(_QWORD *)v25 + 40);
  if (v60 == v59)
    v33 = (uint64_t *)((char *)&v61 + 4);
  else
    v33 = &v61;
  v34 = *(unsigned int *)v33;
  if ((_DWORD)v34)
  {
    v35 = 8 * v34;
    v36 = (unint64_t *)v60;
    v37 = 1;
    while (*v36 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v36;
      v35 -= 8;
      if (!v35)
        goto LABEL_87;
    }
  }
  else
  {
    v36 = (unint64_t *)v60;
  }
  v38 = &v60[8 * v34];
  v37 = 1;
  if (v36 != (unint64_t *)v38)
  {
    v39 = *v36;
LABEL_57:
    if ((char *)v39 != a3)
    {
      v40 = *(_QWORD *)(v39 + 40);
      if (v40 != v39 + 40)
      {
        if (v40)
          v41 = v40 - 24;
        else
          v41 = 0;
        if (*(_BYTE *)(v41 + 16) != 30)
        {
          v42 = 2;
          switch(*(_BYTE *)(v41 + 16))
          {
            case 0x1E:
              __break(1u);
              return result;
            case 0x1F:
              v42 = (*(_DWORD *)(v41 + 20) >> 1) & 0x3FFFFFF;
              goto LABEL_80;
            case 0x20:
            case 0x26:
              v42 = (*(_DWORD *)(v41 + 20) & 0x7FFFFFF) - 1;
              goto LABEL_80;
            case 0x21:
              goto LABEL_66;
            case 0x24:
              v42 = *(_WORD *)(v41 + 18) & 1;
              goto LABEL_80;
            case 0x25:
              v42 = 1;
              goto LABEL_66;
            case 0x27:
              v42 = *(_DWORD *)(v41 + 80) + 1;
LABEL_80:
              if (!v42)
                goto LABEL_74;
              goto LABEL_66;
            default:
              goto LABEL_74;
          }
        }
        if ((*(_DWORD *)(v41 + 20) & 0x7FFFFFF) == 3)
          v42 = 2;
        else
          v42 = 1;
LABEL_66:
        v43 = 0;
        do
        {
          result = (char *)llvm::Instruction::getSuccessor((llvm::Instruction *)v41, v43);
          if (result == v32)
            goto LABEL_86;
          if (result != a3)
          {
            result = (char *)sub_1C477672C((uint64_t)&v59, (uint64_t)result);
            v44 = v60 == v59 ? (uint64_t *)((char *)&v61 + 4) : &v61;
            if (result == &v60[8 * *(unsigned int *)v44])
              goto LABEL_86;
          }
        }
        while (v42 != ++v43);
      }
    }
LABEL_74:
    v45 = v36 + 1;
    while (v45 != (unint64_t *)v38)
    {
      v46 = *v45++;
      v39 = v46;
      if (v46 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v36 = v45 - 1;
        goto LABEL_57;
      }
    }
    v37 = 1;
  }
LABEL_87:
  if (v64 != v66)
    free(v64);
  if (v60 != v59)
    free(v60);
  if ((v37 & 1) != 0)
  {
    v48 = v54;
    v47 = v55;
    if (HIDWORD(v56) - v57 == 1)
    {
      if (v55 == v54)
        v49 = HIDWORD(v56);
      else
        v49 = v56;
      v50 = (uint64_t *)v55;
      if ((_DWORD)v49)
      {
        v51 = 8 * v49;
        v50 = (uint64_t *)v55;
        v52 = (uint64_t *)&v55[8 * v49];
        while ((unint64_t)*v50 >= 0xFFFFFFFFFFFFFFFELL)
        {
          ++v50;
          v51 -= 8;
          if (!v51)
          {
            v50 = v52;
            break;
          }
        }
      }
      v53 = *v50;
    }
    else
    {
      v53 = 0;
    }
  }
  else
  {
    v53 = 0;
    v48 = v54;
    v47 = v55;
  }
  if (v47 != v48)
    free(v47);
  return (char *)v53;
}

uint64_t llvm::objcarc::ProvenanceAnalysis::relatedSelect(llvm::objcarc::ProvenanceAnalysis *this, const llvm::SelectInst *a2, const llvm::Value *a3)
{
  const llvm::Value *v6;
  const llvm::Value *v7;
  llvm::objcarc::ProvenanceAnalysis *v8;

  if (!a3 || *((_BYTE *)a3 + 16) != 85 || *((_QWORD *)a2 - 12) != *((_QWORD *)a3 - 12))
  {
    if ((llvm::objcarc::ProvenanceAnalysis::related(this, *((const llvm::Value **)a2 - 8), a3) & 1) == 0)
    {
      v6 = (const llvm::Value *)*((_QWORD *)a2 - 4);
      v8 = this;
      v7 = a3;
      return llvm::objcarc::ProvenanceAnalysis::related(v8, v6, v7);
    }
    return 1;
  }
  if ((llvm::objcarc::ProvenanceAnalysis::related(this, *((const llvm::Value **)a2 - 8), *((const llvm::Value **)a3 - 8)) & 1) != 0)return 1;
  v6 = (const llvm::Value *)*((_QWORD *)a2 - 4);
  v7 = (const llvm::Value *)*((_QWORD *)a3 - 4);
  v8 = this;
  return llvm::objcarc::ProvenanceAnalysis::related(v8, v6, v7);
}

uint64_t llvm::objcarc::ProvenanceAnalysis::relatedPHI(llvm::objcarc::ProvenanceAnalysis *this, const llvm::PHINode *a2, const llvm::Value *a3)
{
  int v6;
  uint64_t v7;
  uint64_t *v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  char *v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  char *v17;
  char *v18;
  uint64_t v19;
  uint64_t v20;
  const llvm::Value *v21;
  char v22;
  int v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t v26;
  const llvm::Value *v27;
  char v28;
  _BYTE *v30;
  _BYTE *v31;
  uint64_t v32;
  int v33;
  _BYTE v34[32];

  if (a3 && *((_BYTE *)a3 + 16) == 83)
  {
    if (*((_QWORD *)a3 + 5) != *((_QWORD *)a2 + 5))
    {
      v30 = v34;
      v31 = v34;
      v32 = 4;
      v33 = 0;
      v6 = *((_DWORD *)a3 + 5);
      if ((v6 & 0x40000000) == 0)
      {
        v7 = v6 & 0x7FFFFFF;
        v8 = (uint64_t *)((char *)a3 - 32 * v7);
        if (!v7)
          return 0;
LABEL_26:
        v20 = 32 * v7;
        do
        {
          v21 = (const llvm::Value *)*v8;
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v30, *v8);
          if (v22 && (llvm::objcarc::ProvenanceAnalysis::related(this, v21, a2) & 1) != 0)
          {
            if (v31 != v30)
              free(v31);
            goto LABEL_33;
          }
          v8 += 4;
          v20 -= 32;
        }
        while (v20);
        if (v31 != v30)
          free(v31);
        return 0;
      }
      v8 = (uint64_t *)*((_QWORD *)a3 - 1);
      v7 = v6 & 0x7FFFFFF;
      if (v7)
        goto LABEL_26;
      return 0;
    }
    v9 = *((_DWORD *)a2 + 5);
    v10 = v9 & 0x7FFFFFF;
    if ((v9 & 0x7FFFFFF) == 0)
      return 0;
    v11 = 0;
    do
    {
      v12 = *((_DWORD *)a2 + 5);
      if ((v12 & 0x40000000) != 0)
        v13 = (char *)*((_QWORD *)a2 - 1);
      else
        v13 = (char *)a2 - 32 * (v12 & 0x7FFFFFF);
      v14 = *((_DWORD *)a3 + 5);
      v15 = v14 & 0x7FFFFFF;
      if ((v14 & 0x7FFFFFF) != 0)
      {
        v16 = 0;
        while (1)
        {
          v17 = (char *)a3 - 32 * v15;
          if ((v14 & 0x40000000) != 0)
            v17 = (char *)*((_QWORD *)a3 - 1);
          if (*(_QWORD *)&v17[32 * *((unsigned int *)a3 + 15) + 8 * v16] == *(_QWORD *)&v13[32
                                                                                           * *((unsigned int *)a2 + 15)
                                                                                           + 8 * v11])
            break;
          if (v15 == ++v16)
            goto LABEL_18;
        }
      }
      else
      {
LABEL_18:
        LODWORD(v16) = -1;
      }
      if ((v14 & 0x40000000) != 0)
        v18 = (char *)*((_QWORD *)a3 - 1);
      else
        v18 = (char *)a3 - 32 * v15;
      v19 = llvm::objcarc::ProvenanceAnalysis::related(this, *(const llvm::Value **)&v13[32 * v11], *(const llvm::Value **)&v18[32 * v16]);
      if ((v19 & 1) != 0)
        break;
      ++v11;
    }
    while (v11 != v10);
  }
  else
  {
LABEL_33:
    v30 = v34;
    v31 = v34;
    v32 = 4;
    v33 = 0;
    v23 = *((_DWORD *)a2 + 5);
    if ((v23 & 0x40000000) != 0)
    {
      v25 = (uint64_t *)*((_QWORD *)a2 - 1);
      v24 = v23 & 0x7FFFFFF;
      if (!v24)
        return 0;
    }
    else
    {
      v24 = v23 & 0x7FFFFFF;
      v25 = (uint64_t *)((char *)a2 - 32 * v24);
      if (!v24)
        return 0;
    }
    v26 = 32 * v24;
    while (1)
    {
      v27 = (const llvm::Value *)*v25;
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v30, *v25);
      if (v28)
      {
        if ((llvm::objcarc::ProvenanceAnalysis::related(this, v27, a3) & 1) != 0)
          break;
      }
      v25 += 4;
      v26 -= 32;
      if (!v26)
      {
        v19 = 0;
        goto LABEL_43;
      }
    }
    v19 = 1;
LABEL_43:
    if (v31 != v30)
      free(v31);
  }
  return v19;
}

uint64_t llvm::objcarc::ProvenanceAnalysis::relatedCheck(llvm::objcarc::ProvenanceAnalysis *this, const llvm::Value *a2, const llvm::Value *a3)
{
  uint64_t v6;
  int v7;
  uint64_t result;
  _BOOL4 v9;
  _BOOL4 v10;
  const llvm::Value *v11;
  int v12;
  llvm::objcarc::ProvenanceAnalysis *v13;
  const llvm::PHINode *v14;
  const llvm::Value *v15;
  int v16;
  llvm::objcarc::ProvenanceAnalysis *v17;
  const llvm::SelectInst *v18;
  const llvm::Value *v19;
  _QWORD v20[2];
  __int128 v21;
  __int128 v22;
  _QWORD v23[2];
  __int128 v24;
  __int128 v25;

  v6 = *(_QWORD *)this;
  v23[0] = a2;
  v23[1] = -1;
  v24 = 0u;
  v25 = 0u;
  v20[0] = a3;
  v20[1] = -1;
  v21 = 0u;
  v22 = 0u;
  v7 = llvm::AAResults::alias(v6, (uint64_t)v23, (uint64_t)v20);
  if ((v7 - 2) < 2)
    return 1;
  if (!v7)
    return 0;
  v9 = sub_1C598BDD8((uint64_t)a2);
  v10 = sub_1C598BDD8((uint64_t)a3);
  if (v9)
  {
    if (*((_BYTE *)a3 + 16) == 60)
    {
      v11 = a2;
      return sub_1C5990A20((uint64_t)v11);
    }
    if (v10)
    {
      if (*((_BYTE *)a2 + 16) != 60)
        return 0;
      goto LABEL_13;
    }
  }
  else if (v10 && *((_BYTE *)a2 + 16) == 60)
  {
LABEL_13:
    v11 = a3;
    return sub_1C5990A20((uint64_t)v11);
  }
  v12 = *((unsigned __int8 *)a2 + 16);
  if (a2 && v12 == 83)
  {
    v13 = this;
    v14 = a2;
    v15 = a3;
    return llvm::objcarc::ProvenanceAnalysis::relatedPHI(v13, v14, v15);
  }
  v16 = *((unsigned __int8 *)a3 + 16);
  if (a3 && v16 == 83)
  {
    v13 = this;
    v14 = a3;
    v15 = a2;
    return llvm::objcarc::ProvenanceAnalysis::relatedPHI(v13, v14, v15);
  }
  if (a2 && v12 == 85)
  {
    v17 = this;
    v18 = a2;
    v19 = a3;
    return llvm::objcarc::ProvenanceAnalysis::relatedSelect(v17, v18, v19);
  }
  result = 1;
  if (a3 && v16 == 85)
  {
    v17 = this;
    v18 = a3;
    v19 = a2;
    return llvm::objcarc::ProvenanceAnalysis::relatedSelect(v17, v18, v19);
  }
  return result;
}

uint64_t sub_1C5990A20(uint64_t a1)
{
  unsigned int v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int v5;
  int v6;
  uint64_t v7;
  char v8;
  uint64_t v9;
  uint64_t v10;
  _BYTE *v12;
  _BYTE *v13;
  uint64_t v14;
  int v15;
  _BYTE v16[64];
  void *v17;
  uint64_t v18;
  _QWORD v19[9];

  v19[8] = *MEMORY[0x1E0C80C00];
  v12 = v16;
  v13 = v16;
  v14 = 8;
  v15 = 0;
  v17 = v19;
  v19[0] = a1;
  v18 = 0x800000001;
  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v12, a1);
  v1 = v18;
  while (1)
  {
    v2 = *((_QWORD *)v17 + --v1);
    LODWORD(v18) = v1;
    v3 = *(_QWORD *)(v2 + 8);
    if (v3)
      break;
LABEL_17:
    if (!v1)
    {
      v10 = 0;
      goto LABEL_20;
    }
  }
  while (1)
  {
    v4 = *(_QWORD *)(v3 + 24);
    v5 = *(unsigned __int8 *)(v4 + 16);
    if (v5 == 84)
      goto LABEL_14;
    if (v5 == 61)
      break;
    if (*(_BYTE *)(v2 + 16) == 75)
      goto LABEL_19;
    sub_1C4774094((llvm::SmallPtrSetImplBase *)&v12, *(_QWORD *)(v3 + 24));
    if (v8)
    {
      v9 = v18;
      if (v18 >= (unint64_t)HIDWORD(v18))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v17, (uint64_t)v19, v18 + 1, 8);
        v9 = v18;
      }
      *((_QWORD *)v17 + v9) = v4;
      LODWORD(v18) = v18 + 1;
    }
LABEL_14:
    v3 = *(_QWORD *)(v3 + 8);
    if (!v3)
    {
      v1 = v18;
      goto LABEL_17;
    }
  }
  v6 = *(_DWORD *)(v4 + 20);
  if ((v6 & 0x40000000) != 0)
    v7 = *(_QWORD *)(v4 - 8);
  else
    v7 = v4 - 32 * (v6 & 0x7FFFFFF);
  if (((v3 - v7) & 0x1FFFFFFFE0) != 0)
    goto LABEL_14;
LABEL_19:
  v10 = 1;
LABEL_20:
  if (v17 != v19)
    free(v17);
  if (v13 != v12)
    free(v13);
  return v10;
}

llvm *sub_1C5990BB8(llvm *a1, uint64_t a2)
{
  llvm *v4;
  BOOL v5;
  _QWORD *v6;
  _QWORD *v7;
  llvm *v8;
  llvm *v9;
  unint64_t v11;
  unint64_t *v12;
  uint64_t v13;
  int32x2_t *v14;
  unint64_t v15;
  uint64_t v16;
  unsigned int v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  int v21;
  int v22;
  unint64_t v23;
  unint64_t *v24;
  uint64_t v25;
  int32x2_t *v26;
  unint64_t v27;
  uint64_t v28;
  unsigned int v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  int v33;
  int v34;
  unint64_t v35[5];
  llvm *v36;
  llvm *v37;

  v37 = a1;
  sub_1C62C58A4(v35, *(_QWORD *)a2, *(_DWORD *)(a2 + 16), (uint64_t)a1);
  v4 = v36;
  if (v35[2])
    v5 = v36 == 0;
  else
    v5 = 1;
  if (v5)
  {
    v4 = sub_1C61AB258(a1);
    v6 = sub_1C62C5918(a2, (uint64_t *)&v37);
    v7 = v6;
    v8 = (llvm *)v6[3];
    if (v8 != a1)
    {
      if (v8 && v8 != (llvm *)-8192 && v8 != (llvm *)-4096)
      {
        v11 = v6[1] & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v11 = v6[2];
        v12 = (unint64_t *)v6[2];
        if (v12)
        {
          *v12 = *v12 & 7 | v11;
        }
        else
        {
          v13 = v6[3];
          v14 = ***(int32x2_t ****)v13;
          v15 = (unint64_t)v14[303];
          if (v15 <= v11)
          {
            v16 = v14[305].u32[0];
            if (v15 + 16 * v16 > v11)
            {
              v17 = v16 - 1;
              LODWORD(v18) = v17 & ((v13 >> 4) ^ (v13 >> 9));
              v19 = (uint64_t *)(v15 + 16 * v18);
              v20 = *v19;
              if (v13 == *v19)
              {
LABEL_29:
                *v19 = -8192;
                v14[304] = vadd_s32(v14[304], (int32x2_t)0x1FFFFFFFFLL);
                v13 = v6[3];
              }
              else
              {
                v21 = 1;
                while (v20 != -4096)
                {
                  v22 = v18 + v21++;
                  v18 = v22 & v17;
                  v20 = *(_QWORD *)(v15 + 16 * v18);
                  if (v13 == v20)
                  {
                    v19 = (uint64_t *)(v15 + 16 * v18);
                    goto LABEL_29;
                  }
                }
              }
              *(_BYTE *)(v13 + 17) &= ~1u;
            }
          }
        }
      }
      v6[3] = a1;
      if (a1 != (llvm *)-8192 && a1 != (llvm *)-4096 && a1)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v6 + 1));
    }
    v9 = (llvm *)v7[6];
    if (v9 != v4)
    {
      if (v9 && v9 != (llvm *)-8192 && v9 != (llvm *)-4096)
      {
        v23 = v7[4] & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v23 = v7[5];
        v24 = (unint64_t *)v7[5];
        if (v24)
        {
          *v24 = *v24 & 7 | v23;
        }
        else
        {
          v25 = v7[6];
          v26 = ***(int32x2_t ****)v25;
          v27 = (unint64_t)v26[303];
          if (v27 <= v23)
          {
            v28 = v26[305].u32[0];
            if (v27 + 16 * v28 > v23)
            {
              v29 = v28 - 1;
              LODWORD(v30) = v29 & ((v25 >> 4) ^ (v25 >> 9));
              v31 = (uint64_t *)(v27 + 16 * v30);
              v32 = *v31;
              if (v25 == *v31)
              {
LABEL_41:
                *v31 = -8192;
                v26[304] = vadd_s32(v26[304], (int32x2_t)0x1FFFFFFFFLL);
                v25 = v7[6];
              }
              else
              {
                v33 = 1;
                while (v32 != -4096)
                {
                  v34 = v30 + v33++;
                  v30 = v34 & v29;
                  v32 = *(_QWORD *)(v27 + 16 * v30);
                  if (v25 == v32)
                  {
                    v31 = (uint64_t *)(v27 + 16 * v30);
                    goto LABEL_41;
                  }
                }
              }
              *(_BYTE *)(v25 + 17) &= ~1u;
            }
          }
        }
      }
      v7[6] = v4;
      if (v4 != (llvm *)-8192 && v4 != (llvm *)-4096 && v4)
        llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v7 + 4));
    }
  }
  sub_1C61A406C((llvm::ValueHandleBase *)v35);
  return v4;
}

unint64_t *sub_1C5990E5C(unint64_t *result, _QWORD *a2)
{
  unint64_t v2;
  unint64_t v4;
  unint64_t *v5;
  unint64_t *v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v10;

  *result = 4;
  result[1] = 0;
  v2 = a2[2];
  result[2] = v2;
  if (v2 != -8192 && v2 != -4096 && v2 != 0)
  {
    v4 = *a2 & 0xFFFFFFFFFFFFFFF8;
    result[1] = *(_QWORD *)v4;
    *(_QWORD *)v4 = result;
    *result = v4 | 4;
    v5 = (unint64_t *)result[1];
    if (v5)
      *v5 = *v5 & 7 | (unint64_t)(result + 1);
  }
  result[3] = 6;
  v6 = result + 3;
  result[4] = 0;
  v7 = (unint64_t)(result + 4);
  v8 = a2[5];
  result[5] = v8;
  if (v8 != -8192 && v8 != -4096 && v8 != 0)
  {
    v10 = a2[3] & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v7 = *(_QWORD *)v10;
    *(_QWORD *)v10 = v6;
    *v6 = v10 | 6;
    if (*(_QWORD *)v7)
      **(_QWORD **)v7 = **(_QWORD **)v7 & 7 | v7;
  }
  return result;
}

_QWORD *sub_1C5990F28(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(56 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C62C5A44((llvm::ValueHandleBase *)a1, v4, &v4[7 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 56 * v10;
    do
    {
      *result = -4096;
      result += 7;
      v11 -= 56;
    }
    while (v11);
  }
  return result;
}

_OWORD *sub_1C5990FEC(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _OWORD *result;
  uint64_t v10;
  uint64_t v11;
  int64x2_t v12;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(24 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C62C5C68(a1, v4, v4 + 24 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 24 * v10;
    v12 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    do
    {
      *result = v12;
      result = (_OWORD *)((char *)result + 24);
      v11 -= 24;
    }
    while (v11);
  }
  return result;
}

void llvm::initializePAEvalPass(llvm *this, llvm::PassRegistry *a2)
{
  unint64_t v2;
  llvm *v3;
  _QWORD *v4;
  _QWORD v5[2];

  v3 = this;
  v2 = atomic_load(&qword_1EF8F7228);
  if (v2 != -1)
  {
    v5[0] = sub_1C5991114;
    v5[1] = &v3;
    v4 = v5;
    std::__call_once(&qword_1EF8F7228, &v4, (void (__cdecl *)(void *))sub_1C4776838);
  }
}

uint64_t sub_1C5991114(llvm *a1, llvm::PassRegistry *a2)
{
  uint64_t v3;

  llvm::initializeAAResultsWrapperPassPass(a1, a2);
  v3 = operator new();
  *(_QWORD *)v3 = "Evaluate ProvenanceAnalysis on all pairs";
  *(_QWORD *)(v3 + 8) = 40;
  *(_QWORD *)(v3 + 16) = "pa-eval";
  *(_QWORD *)(v3 + 24) = 7;
  *(_QWORD *)(v3 + 32) = &unk_1EF8F5721;
  *(_WORD *)(v3 + 40) = 256;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = sub_1C5991764;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

void sub_1C59911B0(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C59911D4(uint64_t a1, uint64_t a2)
{
  return sub_1C4771E64(a2, a2, (uint64_t)&llvm::AAResultsWrapperPass::ID);
}

uint64_t sub_1C59911E4(uint64_t a1, llvm::Function *this)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  char *v7;
  uint64_t i;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void **v18;
  void *v19;
  uint64_t v20;
  const llvm::Value **v21;
  const llvm::Value **v22;
  const llvm::Value *v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  const llvm::Value **v28;
  const llvm::Value *v29;
  int v30;
  int v31;
  const llvm::Value *v32;
  size_t v33;
  char *v34;
  size_t v35;
  size_t v36;
  const llvm::Value **v37;
  const llvm::Value **v38;
  const llvm::Value *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  const llvm::Value **v44;
  const llvm::Value *v45;
  int v46;
  int v47;
  const llvm::Value *v48;
  size_t v49;
  char *v50;
  size_t v51;
  size_t v52;
  llvm::raw_ostream *v53;
  _BYTE *v54;
  void *v55;
  _BOOL8 v56;
  _BOOL4 v57;
  _WORD *v58;
  unint64_t v59;
  const char *v60;
  size_t v61;
  uint64_t v62;
  const llvm::Value **v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  uint64_t v69[2];
  int v70;
  _QWORD v71[2];
  int v72;
  void *__p;
  const llvm::Value **v74;
  uint64_t v75;

  v71[0] = 0;
  v71[1] = 0;
  v72 = 0;
  v74 = 0;
  v75 = 0;
  __p = 0;
  if ((*((_BYTE *)this + 18) & 1) != 0)
  {
    llvm::Function::BuildLazyArguments(this);
    v4 = *((_QWORD *)this + 11);
    if ((*((_WORD *)this + 9) & 1) != 0)
    {
      llvm::Function::BuildLazyArguments(this);
      v5 = *((_QWORD *)this + 11);
      goto LABEL_4;
    }
  }
  else
  {
    v4 = *((_QWORD *)this + 11);
  }
  v5 = v4;
LABEL_4:
  v6 = v5 + 40 * *((_QWORD *)this + 12);
  while (v4 != v6)
  {
    v65 = v4;
    if ((*(_BYTE *)(v4 + 23) & 0x10) != 0)
      sub_1C4D954B8(v71, &v65);
    v4 += 40;
  }
  v7 = (char *)this + 72;
  for (i = *((_QWORD *)this + 10); ; i = *(_QWORD *)(i + 8))
  {
    if ((char *)i == v7)
      goto LABEL_36;
    v9 = i - 24;
    if (!i)
      v9 = 0;
    v10 = *(_QWORD *)(v9 + 48);
    if (v10 != v9 + 40)
      break;
  }
  while (1)
  {
    if (v10)
      v11 = v10 - 24;
    else
      v11 = 0;
    v65 = v11;
    v12 = *(_DWORD *)(v11 + 20);
    if ((v12 & 0x10000000) != 0)
    {
      sub_1C4D954B8(v71, &v65);
      v12 = *(_DWORD *)(v11 + 20);
    }
    if ((v12 & 0x40000000) != 0)
    {
      v14 = *(uint64_t **)(v11 - 8);
      v13 = v12 & 0x7FFFFFF;
      if (!v13)
        goto LABEL_28;
    }
    else
    {
      v13 = v12 & 0x7FFFFFF;
      v14 = (uint64_t *)(v11 - 32 * v13);
      if (!v13)
        goto LABEL_28;
    }
    v15 = 32 * v13;
    do
    {
      v65 = *v14;
      if ((*(_BYTE *)(v65 + 23) & 0x10) != 0)
        sub_1C4D954B8(v71, &v65);
      v14 += 4;
      v15 -= 32;
    }
    while (v15);
LABEL_28:
    v10 = *(_QWORD *)(v10 + 8);
    v16 = i - 24;
    if (!i)
      v16 = 0;
    if (v10 == v16 + 40)
      break;
LABEL_35:
    if ((char *)i == v7)
      goto LABEL_36;
  }
  while (1)
  {
    i = *(_QWORD *)(i + 8);
    if ((char *)i == v7)
      break;
    v17 = i - 24;
    if (!i)
      v17 = 0;
    v10 = *(_QWORD *)(v17 + 48);
    if (v10 != v17 + 40)
      goto LABEL_35;
  }
LABEL_36:
  v66 = 0;
  v67 = 0;
  v68 = 0;
  v69[0] = 0;
  v69[1] = 0;
  v70 = 0;
  v18 = **(void ****)(a1 + 8);
  do
  {
    v19 = *v18;
    v18 += 2;
  }
  while (v19 != &llvm::AAResultsWrapperPass::ID);
  v20 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v18 - 1) + 96))(*(v18 - 1), &llvm::AAResultsWrapperPass::ID);
  v22 = (const llvm::Value **)__p;
  v21 = v74;
  v64 = v74;
  v65 = *(_QWORD *)(v20 + 32);
  while (2)
  {
    if (v22 != v21)
    {
      v23 = *v22;
      if ((*((_BYTE *)*v22 + 23) & 0x10) != 0)
      {
        v24 = ***(_QWORD ***)v23;
        v25 = *(_QWORD *)(v24 + 152);
        v26 = *(unsigned int *)(v24 + 168);
        if ((_DWORD)v26)
        {
          LODWORD(v27) = (v26 - 1) & ((v23 >> 4) ^ (v23 >> 9));
          v28 = (const llvm::Value **)(v25 + 16 * v27);
          v29 = *v28;
          if (*v28 != v23)
          {
            v30 = 1;
            do
            {
              if (v29 == (const llvm::Value *)-4096)
                goto LABEL_47;
              v31 = v27 + v30++;
              v27 = v31 & (v26 - 1);
              v29 = *(const llvm::Value **)(v25 + 16 * v27);
            }
            while (v29 != v23);
            v28 = (const llvm::Value **)(v25 + 16 * v27);
          }
        }
        else
        {
LABEL_47:
          v28 = (const llvm::Value **)(v25 + 16 * v26);
        }
        v32 = v28[1];
        v35 = *(_QWORD *)v32;
        v34 = (char *)v32 + 16;
        v33 = v35;
        if (v35)
        {
          if (*v34 == 1)
          {
            v34 = (char *)v28[1] + 17;
            v36 = v33 - 1;
          }
          else
          {
            v36 = v33;
          }
        }
        else
        {
          v36 = 0;
        }
      }
      else
      {
        v36 = 0;
        v34 = &byte_1C871356D;
      }
      v37 = (const llvm::Value **)__p;
      v38 = v74;
LABEL_54:
      if (v37 == v38)
      {
        ++v22;
        v21 = v64;
        continue;
      }
      v39 = *v37;
      if ((*((_BYTE *)*v37 + 23) & 0x10) != 0)
      {
        v40 = ***(_QWORD ***)v39;
        v41 = *(_QWORD *)(v40 + 152);
        v42 = *(unsigned int *)(v40 + 168);
        if (!(_DWORD)v42)
          goto LABEL_62;
        LODWORD(v43) = (v42 - 1) & ((v39 >> 4) ^ (v39 >> 9));
        v44 = (const llvm::Value **)(v41 + 16 * v43);
        v45 = *v44;
        if (*v44 != v39)
        {
          v46 = 1;
          while (v45 != (const llvm::Value *)-4096)
          {
            v47 = v43 + v46++;
            v43 = v47 & (v42 - 1);
            v45 = *(const llvm::Value **)(v41 + 16 * v43);
            if (v45 == v39)
            {
              v44 = (const llvm::Value **)(v41 + 16 * v43);
              goto LABEL_63;
            }
          }
LABEL_62:
          v44 = (const llvm::Value **)(v41 + 16 * v42);
        }
LABEL_63:
        v48 = v44[1];
        v51 = *(_QWORD *)v48;
        v50 = (char *)v48 + 16;
        v49 = v51;
        if (v51 && *v50 == 1)
        {
          v50 = (char *)v44[1] + 17;
          --v49;
        }
      }
      else
      {
        v49 = 0;
        v50 = &byte_1C871356D;
      }
      if (v49 >= v36)
        v52 = v36;
      else
        v52 = v49;
      if (v52 && (v20 = memcmp(v34, v50, v52), (_DWORD)v20))
      {
        if ((v20 & 0x80000000) != 0)
        {
LABEL_75:
          v53 = (llvm::raw_ostream *)llvm::errs((llvm *)v20);
          v54 = (_BYTE *)*((_QWORD *)v53 + 4);
          if (v36 <= *((_QWORD *)v53 + 3) - (_QWORD)v54)
          {
            if (v36)
            {
              memcpy(v54, v34, v36);
              v54 = (_BYTE *)(*((_QWORD *)v53 + 4) + v36);
              *((_QWORD *)v53 + 4) = v54;
            }
          }
          else
          {
            v53 = llvm::raw_ostream::write(v53, v34, v36);
            v54 = (_BYTE *)*((_QWORD *)v53 + 4);
          }
          if (*((_QWORD *)v53 + 3) - (_QWORD)v54 > 4uLL)
          {
            v54[4] = 32;
            *(_DWORD *)v54 = 1684955424;
            v55 = (void *)(*((_QWORD *)v53 + 4) + 5);
            *((_QWORD *)v53 + 4) = v55;
          }
          else
          {
            v53 = llvm::raw_ostream::write(v53, " and ", 5uLL);
            v55 = (void *)*((_QWORD *)v53 + 4);
          }
          if (v49 <= *((_QWORD *)v53 + 3) - (_QWORD)v55)
          {
            if (v49)
            {
              memcpy(v55, v50, v49);
              *((_QWORD *)v53 + 4) += v49;
            }
          }
          else
          {
            llvm::raw_ostream::write(v53, v50, v49);
          }
          v56 = llvm::objcarc::ProvenanceAnalysis::related((llvm::objcarc::ProvenanceAnalysis *)&v65, v23, v39);
          v57 = v56;
          v20 = (uint64_t)llvm::errs((llvm *)v56);
          v58 = *(_WORD **)(v20 + 32);
          v59 = *(_QWORD *)(v20 + 24) - (_QWORD)v58;
          if (v57)
          {
            if (v59 <= 0xD)
            {
              v60 = " are related.\n";
              v61 = 14;
              goto LABEL_90;
            }
            qmemcpy(v58, " are related.\n", 14);
            v62 = *(_QWORD *)(v20 + 32) + 14;
LABEL_95:
            *(_QWORD *)(v20 + 32) = v62;
          }
          else
          {
            if (v59 > 0x11)
            {
              v58[8] = 2606;
              *(_OWORD *)v58 = *(_OWORD *)" are not related.\n";
              v62 = *(_QWORD *)(v20 + 32) + 18;
              goto LABEL_95;
            }
            v60 = " are not related.\n";
            v61 = 18;
LABEL_90:
            v20 = (uint64_t)llvm::raw_ostream::write((llvm::raw_ostream *)v20, v60, v61);
          }
        }
      }
      else if (v36 < v49)
      {
        goto LABEL_75;
      }
      ++v37;
      goto LABEL_54;
    }
    break;
  }
  sub_1C4EC4314(v69);
  MEMORY[0x1CAA32FB4](v66, 8);
  if (__p)
  {
    v74 = (const llvm::Value **)__p;
    operator delete(__p);
  }
  MEMORY[0x1CAA32FB4](v71[0], 8);
  return 0;
}

uint64_t sub_1C5991764()
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &unk_1EF8F5721;
  *(_DWORD *)(result + 24) = 2;
  *(_QWORD *)result = &off_1E8184F78;
  return result;
}

llvm::raw_ostream *sub_1C59917C8(llvm::raw_ostream *result)
{
  uint64_t v1;

  v1 = *((_QWORD *)result + 4);
  if ((unint64_t)(*((_QWORD *)result + 3) - v1) <= 5)
    return llvm::raw_ostream::write(result, "S_None", 6uLL);
  *(_WORD *)(v1 + 4) = 25966;
  *(_DWORD *)v1 = 1867407187;
  *((_QWORD *)result + 4) += 6;
  return result;
}

void *llvm::objcarc::RRInfo::clear(llvm::objcarc::RRInfo *this)
{
  void *v2;
  void *result;
  uint64_t v4;
  uint64_t v6;
  unsigned int v7;
  int v8;
  unsigned int v9;
  void *v10;
  unsigned int v11;
  int v12;
  unsigned int v13;
  void *v14;

  *(_WORD *)this = 0;
  *((_QWORD *)this + 1) = 0;
  v2 = (void *)*((_QWORD *)this + 3);
  if (v2 == *((void **)this + 2))
    goto LABEL_2;
  v4 = *((unsigned int *)this + 8);
  if (v4 < 0x21 || 4 * (*((_DWORD *)this + 9) - *((_DWORD *)this + 10)) >= v4)
  {
    memset(v2, 255, 8 * v4);
LABEL_2:
    *((_DWORD *)this + 9) = 0;
    *((_DWORD *)this + 10) = 0;
    goto LABEL_3;
  }
  free(v2);
  v7 = *((_DWORD *)this + 9) - *((_DWORD *)this + 10);
  v8 = 1 << (33 - __clz(v7 - 1));
  *((_DWORD *)this + 9) = 0;
  *((_DWORD *)this + 10) = 0;
  if (v7 <= 0x10)
    v9 = 32;
  else
    v9 = v8;
  *((_DWORD *)this + 8) = v9;
  v10 = malloc_type_malloc(8 * v9, 0x4065EBACuLL);
  if (!v10)
    goto LABEL_25;
  *((_QWORD *)this + 3) = v10;
  memset(v10, 255, 8 * *((unsigned int *)this + 8));
LABEL_3:
  result = (void *)*((_QWORD *)this + 9);
  if (result != *((void **)this + 8))
  {
    v6 = *((unsigned int *)this + 20);
    if (v6 < 0x21 || 4 * (*((_DWORD *)this + 21) - *((_DWORD *)this + 22)) >= v6)
    {
      result = memset(result, 255, 8 * v6);
      goto LABEL_4;
    }
    free(result);
    v11 = *((_DWORD *)this + 21) - *((_DWORD *)this + 22);
    v12 = 1 << (33 - __clz(v11 - 1));
    *((_DWORD *)this + 21) = 0;
    *((_DWORD *)this + 22) = 0;
    if (v11 <= 0x10)
      v13 = 32;
    else
      v13 = v12;
    *((_DWORD *)this + 20) = v13;
    v14 = malloc_type_malloc(8 * v13, 0x4065EBACuLL);
    if (v14)
    {
      *((_QWORD *)this + 9) = v14;
      result = memset(v14, 255, 8 * *((unsigned int *)this + 20));
      goto LABEL_5;
    }
LABEL_25:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
LABEL_4:
  *((_DWORD *)this + 21) = 0;
  *((_DWORD *)this + 22) = 0;
LABEL_5:
  *((_BYTE *)this + 112) = 0;
  return result;
}

BOOL llvm::objcarc::RRInfo::Merge(llvm::objcarc::RRInfo *this, const llvm::objcarc::RRInfo *a2)
{
  uint64_t v4;
  char *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unsigned int v13;
  _BOOL8 v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t *i;
  _QWORD *v19;
  llvm::SmallPtrSetImplBase *v20;
  uint64_t v21;
  unsigned __int8 v22;
  unint64_t *v23;
  unint64_t v24;

  if (*((_QWORD *)this + 1) != *((_QWORD *)a2 + 1))
    *((_QWORD *)this + 1) = 0;
  *(_BYTE *)this &= *(_BYTE *)a2;
  *((_BYTE *)this + 1) &= *((_BYTE *)a2 + 1);
  *((_BYTE *)this + 112) |= *((_BYTE *)a2 + 112);
  v4 = *((_QWORD *)a2 + 3);
  if (v4 == *((_QWORD *)a2 + 2))
    v5 = (char *)a2 + 36;
  else
    v5 = (char *)a2 + 32;
  v6 = *(unsigned int *)v5;
  if ((_DWORD)v6)
  {
    v7 = 8 * v6;
    v8 = (uint64_t *)*((_QWORD *)a2 + 3);
    while ((unint64_t)*v8 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v8;
      v7 -= 8;
      if (!v7)
        goto LABEL_18;
    }
  }
  else
  {
    v8 = (uint64_t *)*((_QWORD *)a2 + 3);
  }
  v9 = (_QWORD *)(v4 + 8 * v6);
  if (v8 != v9)
  {
    v10 = *v8;
LABEL_14:
    sub_1C4774094((llvm::objcarc::RRInfo *)((char *)this + 16), v10);
    v11 = (unint64_t *)(v8 + 1);
    while (v11 != v9)
    {
      v12 = *v11++;
      v10 = v12;
      if (v12 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v8 = (uint64_t *)(v11 - 1);
        goto LABEL_14;
      }
    }
  }
LABEL_18:
  v13 = *((_DWORD *)a2 + 21);
  v14 = *((_DWORD *)this + 21) - *((_DWORD *)this + 22) != v13 - *((_DWORD *)a2 + 22);
  v15 = *((_QWORD *)a2 + 9);
  if (v15 == *((_QWORD *)a2 + 8))
    v16 = v13;
  else
    v16 = *((unsigned int *)a2 + 20);
  if ((_DWORD)v16)
  {
    v17 = 8 * v16;
    for (i = (uint64_t *)*((_QWORD *)a2 + 9); (unint64_t)*i >= 0xFFFFFFFFFFFFFFFELL; ++i)
    {
      v17 -= 8;
      if (!v17)
        return v14;
    }
  }
  else
  {
    i = (uint64_t *)*((_QWORD *)a2 + 9);
  }
  v19 = (_QWORD *)(v15 + 8 * v16);
  if (i != v19)
  {
    v20 = (llvm::objcarc::RRInfo *)((char *)this + 64);
    v21 = *i;
LABEL_29:
    sub_1C4774094(v20, v21);
    v14 |= v22;
    v23 = (unint64_t *)(i + 1);
    while (v23 != v19)
    {
      v24 = *v23++;
      v21 = v24;
      if (v24 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        i = (uint64_t *)(v23 - 1);
        goto LABEL_29;
      }
    }
  }
  return v14;
}

_BYTE *llvm::objcarc::PtrState::SetKnownPositiveRefCount(_BYTE *this)
{
  *this = 1;
  return this;
}

_BYTE *llvm::objcarc::PtrState::ClearKnownPositiveRefCount(_BYTE *this)
{
  *this = 0;
  return this;
}

uint64_t llvm::objcarc::PtrState::SetSeq(uint64_t result, char a2)
{
  *(_BYTE *)(result + 2) = a2;
  return result;
}

uint64_t llvm::objcarc::PtrState::Merge(llvm::objcarc::PtrState *this, const llvm::objcarc::PtrState *a2, int a3)
{
  int v4;
  int v5;
  BOOL v6;
  int v7;
  int v8;
  BOOL v9;
  uint64_t result;
  void *v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  unsigned int v19;
  void *v20;
  unsigned int v21;
  int v22;
  unsigned int v23;
  void *v24;

  v4 = *((unsigned __int8 *)this + 2);
  v5 = *((unsigned __int8 *)a2 + 2);
  if (v4 != v5)
  {
    if (*((_BYTE *)this + 2))
      v6 = v5 == 0;
    else
      v6 = 1;
    if (v6)
      goto LABEL_9;
    if (v4 >= v5)
      v7 = *((unsigned __int8 *)a2 + 2);
    else
      v7 = *((unsigned __int8 *)this + 2);
    if (v4 <= v5)
      v8 = *((unsigned __int8 *)a2 + 2);
    else
      v8 = *((unsigned __int8 *)this + 2);
    if (a3)
    {
      v9 = (v7 - 1) <= 1 && (v8 & 0xFE) == 2;
      LOBYTE(v7) = v8;
      if (!v9)
      {
LABEL_9:
        *((_BYTE *)this + 2) = 0;
        *(_BYTE *)this &= *(_BYTE *)a2;
LABEL_10:
        *((_BYTE *)this + 1) = 0;
        goto LABEL_39;
      }
    }
    else if ((v7 & 0xFE) != 2 || (v8 - 3) >= 3)
    {
      if (v7 != 4 || v8 != 5)
        goto LABEL_9;
      LOBYTE(v7) = 4;
    }
    *((_BYTE *)this + 2) = v7;
    *(_BYTE *)this &= *(_BYTE *)a2;
    goto LABEL_36;
  }
  *(_BYTE *)this &= *(_BYTE *)a2;
  if (!v4)
    goto LABEL_10;
LABEL_36:
  if (!(*((unsigned __int8 *)this + 1) | *((unsigned __int8 *)a2 + 1)))
  {
    result = llvm::objcarc::RRInfo::Merge((llvm::objcarc::PtrState *)((char *)this + 8), (const llvm::objcarc::PtrState *)((char *)a2 + 8));
    *((_BYTE *)this + 1) = result;
    return result;
  }
  *(_WORD *)((char *)this + 1) = 0;
LABEL_39:
  *((_WORD *)this + 4) = 0;
  *((_QWORD *)this + 2) = 0;
  v14 = (void *)*((_QWORD *)this + 3);
  v13 = (void *)*((_QWORD *)this + 4);
  if (v13 == v14)
  {
LABEL_40:
    *((_DWORD *)this + 11) = 0;
    *((_DWORD *)this + 12) = 0;
    goto LABEL_41;
  }
  v15 = *((unsigned int *)this + 10);
  if (v15 < 0x21 || 4 * (*((_DWORD *)this + 11) - *((_DWORD *)this + 12)) >= v15)
  {
    memset(v13, 255, 8 * v15);
    goto LABEL_40;
  }
  free(v13);
  v17 = *((_DWORD *)this + 11) - *((_DWORD *)this + 12);
  v18 = 1 << (33 - __clz(v17 - 1));
  *((_DWORD *)this + 11) = 0;
  *((_DWORD *)this + 12) = 0;
  if (v17 <= 0x10)
    v19 = 32;
  else
    v19 = v18;
  *((_DWORD *)this + 10) = v19;
  v20 = malloc_type_malloc(8 * v19, 0x4065EBACuLL);
  if (!v20)
    goto LABEL_60;
  *((_QWORD *)this + 4) = v20;
  memset(v20, 255, 8 * *((unsigned int *)this + 10));
LABEL_41:
  result = *((_QWORD *)this + 10);
  if (result != *((_QWORD *)this + 9))
  {
    v16 = *((unsigned int *)this + 22);
    if (v16 < 0x21 || 4 * (*((_DWORD *)this + 23) - *((_DWORD *)this + 24)) >= v16)
    {
      result = (uint64_t)memset((void *)result, 255, 8 * v16);
      goto LABEL_42;
    }
    free((void *)result);
    v21 = *((_DWORD *)this + 23) - *((_DWORD *)this + 24);
    v22 = 1 << (33 - __clz(v21 - 1));
    *((_DWORD *)this + 23) = 0;
    *((_DWORD *)this + 24) = 0;
    if (v21 <= 0x10)
      v23 = 32;
    else
      v23 = v22;
    *((_DWORD *)this + 22) = v23;
    v24 = malloc_type_malloc(8 * v23, 0x4065EBACuLL);
    if (v24)
    {
      *((_QWORD *)this + 10) = v24;
      result = (uint64_t)memset(v24, 255, 8 * *((unsigned int *)this + 22));
      goto LABEL_43;
    }
LABEL_60:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  }
LABEL_42:
  *((_DWORD *)this + 23) = 0;
  *((_DWORD *)this + 24) = 0;
LABEL_43:
  *((_BYTE *)this + 120) = 0;
  return result;
}

uint64_t llvm::objcarc::BottomUpPtrState::HandlePotentialUse(uint64_t result, uint64_t a2, uint64_t a3, const llvm::Value *a4, const llvm::Value **a5, int a6)
{
  _BYTE *v10;
  int v11;
  uint64_t *v13;
  uint64_t i;
  uint64_t v15;
  int v16;
  llvm::Value **v17;
  const llvm::Function *v18;
  int v19;
  BOOL v20;
  _BOOL4 v21;
  uint64_t v23;
  uint64_t v24;
  int FunctionClass;
  uint64_t v26;
  unsigned int v27;
  BOOL v28;
  uint64_t v29;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int v34;
  _BYTE v35[32];

  v10 = (_BYTE *)result;
  v11 = *(unsigned __int8 *)(result + 2);
  if (v11 != 4)
  {
    if (v11 != 5)
      return result;
    result = llvm::objcarc::CanUse(a3, a4, a5, a6);
    if ((_DWORD)result)
    {
      v10[2] = 3;
      if (*(_BYTE *)(a3 + 16) == 33)
      {
        v13 = (uint64_t *)(a2 + 40);
        for (i = *(_QWORD *)(a2 + 48); (uint64_t *)i != v13; i = *(_QWORD *)(i + 8))
        {
          v15 = i - 24;
          if (!i)
            v15 = 0;
          if (*(_BYTE *)(v15 + 16) != 83)
            goto LABEL_44;
        }
LABEL_50:
        i = *v13;
LABEL_51:
        v31 = i - 24;
        if (!i)
          v31 = 0;
        if (*(_BYTE *)(v31 + 16) == 38)
          v10[120] = 1;
        goto LABEL_55;
      }
    }
    else
    {
      if (a6 != 1)
        return result;
      v16 = *(_DWORD *)(a3 + 20);
      v17 = (v16 & 0x40000000) != 0 ? *(llvm::Value ***)(a3 - 8) : (llvm::Value **)(a3 - 32 * (v16 & 0x7FFFFFF));
      result = (uint64_t)llvm::Value::stripPointerCasts(*v17);
      v19 = *(unsigned __int8 *)(result + 16);
      v20 = result && v19 == 84;
      v21 = v20;
      if (v19 != 33 && !v21)
        return result;
      v23 = result;
      if (v19 == 84)
      {
        v24 = *(_QWORD *)(result - 32);
        if (v24 && !*(_BYTE *)(v24 + 16) && *(_QWORD *)(v24 + 24) == *(_QWORD *)(v23 + 72))
          FunctionClass = llvm::objcarc::GetFunctionClass((llvm::objcarc *)v24, v18);
        else
          FunctionClass = 21;
      }
      else
      {
        FunctionClass = v19 == 33 ? 21 : 23;
      }
      result = llvm::objcarc::CanUse(v23, a4, a5, FunctionClass);
      if (!(_DWORD)result)
        return result;
      v10[2] = 4;
      if (*(_BYTE *)(a3 + 16) == 33)
      {
        v13 = (uint64_t *)(a2 + 40);
        for (i = *(_QWORD *)(a2 + 48); (uint64_t *)i != v13; i = *(_QWORD *)(i + 8))
        {
          v26 = i - 24;
          if (!i)
            v26 = 0;
          if (*(_BYTE *)(v26 + 16) != 83)
          {
LABEL_44:
            v27 = *(unsigned __int8 *)(i - 8) - 38;
            v28 = v27 > 0x38;
            v29 = (1 << v27) & 0x100060000000001;
            if (!v28 && v29 != 0)
              i = *(_QWORD *)(i + 8);
            if (v13 != (uint64_t *)i)
              goto LABEL_51;
            goto LABEL_50;
          }
        }
        goto LABEL_50;
      }
    }
    i = *(_QWORD *)(a3 + 32);
LABEL_55:
    v32 = a2 + 40;
    if (i != a2 + 40)
      v32 = llvm::skipDebugIntrinsics(i);
    if (v32)
      v33 = v32 - 24;
    else
      v33 = 0;
    result = (uint64_t)sub_1C4774094((llvm::SmallPtrSetImplBase *)(v10 + 72), v33);
    v34 = *(unsigned __int8 *)(a3 + 16) - 33;
    if (v34 <= 0x33
      && ((1 << v34) & 0x8000000000041) != 0
      && *(_BYTE *)(**(_QWORD **)(*(_QWORD *)(a3 + 72) + 16) + 8) != 7)
    {
      result = sub_1C5062CEC(a3, 6, (uint64_t)v35);
      if (v35[24])
        v10[120] = 1;
    }
    return result;
  }
  result = llvm::objcarc::CanUse(a3, a4, a5, a6);
  if ((_DWORD)result)
    v10[2] = 3;
  return result;
}

uint64_t llvm::objcarc::TopDownPtrState::HandlePotentialAlterRefCount(_BYTE *a1, uint64_t a2, const llvm::Value *a3, llvm::objcarc::ProvenanceAnalysis *a4, int a5, uint64_t *a6)
{
  uint64_t result;
  int v13;
  uint64_t v14;
  uint64_t v15;

  result = llvm::objcarc::CanDecrementRefCount(a5);
  if ((_DWORD)result)
    result = llvm::objcarc::CanAlterRefCount(a2, a3, a4, a5);
  if (a5 == 20 || (_DWORD)result)
  {
    result = 0;
    *a1 = 0;
    if (a1[2] == 1)
    {
      a1[2] = 2;
      sub_1C4774094((llvm::SmallPtrSetImplBase *)(a1 + 72), a2);
      result = 1;
      if (a2)
      {
        if (*(_BYTE *)(a2 + 16) == 84)
        {
          v14 = 0;
          v15 = a2;
          v13 = sub_1C61252B8(a6, &v15, &v14);
          result = 1;
          if (v13)
            a1[120] = 1;
        }
      }
    }
  }
  return result;
}

_QWORD *llvm::object::CommonArchiveMemberHeader<llvm::object::UnixArMemHdrType>::CommonArchiveMemberHeader(_QWORD *result, uint64_t a2, uint64_t a3)
{
  *result = &unk_1E8185018;
  result[1] = a2;
  result[2] = a3;
  return result;
}

uint64_t llvm::object::CommonArchiveMemberHeader<llvm::object::UnixArMemHdrType>::getRawAccessMode(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[2];

  v3[0] = *(_QWORD *)(a1 + 16) + 40;
  v1 = v3[0];
  v3[1] = 8;
  llvm::StringRef::find_last_not_of(v3, " ", 1, 0xFFFFFFFFFFFFFFFFLL);
  return v1;
}

uint64_t llvm::object::CommonArchiveMemberHeader<llvm::object::UnixArMemHdrType>::getRawLastModified(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[2];

  v3[0] = *(_QWORD *)(a1 + 16) + 16;
  v1 = v3[0];
  v3[1] = 12;
  llvm::StringRef::find_last_not_of(v3, " ", 1, 0xFFFFFFFFFFFFFFFFLL);
  return v1;
}

uint64_t llvm::object::CommonArchiveMemberHeader<llvm::object::UnixArMemHdrType>::getRawUID(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[2];

  v3[0] = *(_QWORD *)(a1 + 16) + 28;
  v1 = v3[0];
  v3[1] = 6;
  llvm::StringRef::find_last_not_of(v3, " ", 1, 0xFFFFFFFFFFFFFFFFLL);
  return v1;
}

uint64_t llvm::object::CommonArchiveMemberHeader<llvm::object::UnixArMemHdrType>::getRawGID(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[2];

  v3[0] = *(_QWORD *)(a1 + 16) + 34;
  v1 = v3[0];
  v3[1] = 6;
  llvm::StringRef::find_last_not_of(v3, " ", 1, 0xFFFFFFFFFFFFFFFFLL);
  return v1;
}

_QWORD *llvm::object::CommonArchiveMemberHeader<llvm::object::BigArMemHdrType>::CommonArchiveMemberHeader(_QWORD *result, uint64_t a2, uint64_t a3)
{
  *result = &unk_1E8185098;
  result[1] = a2;
  result[2] = a3;
  return result;
}

uint64_t llvm::object::CommonArchiveMemberHeader<llvm::object::BigArMemHdrType>::getRawAccessMode(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[2];

  v3[0] = *(_QWORD *)(a1 + 16) + 96;
  v1 = v3[0];
  v3[1] = 12;
  llvm::StringRef::find_last_not_of(v3, " ", 1, 0xFFFFFFFFFFFFFFFFLL);
  return v1;
}

uint64_t llvm::object::CommonArchiveMemberHeader<llvm::object::BigArMemHdrType>::getRawLastModified(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[2];

  v3[0] = *(_QWORD *)(a1 + 16) + 60;
  v1 = v3[0];
  v3[1] = 12;
  llvm::StringRef::find_last_not_of(v3, " ", 1, 0xFFFFFFFFFFFFFFFFLL);
  return v1;
}

uint64_t llvm::object::CommonArchiveMemberHeader<llvm::object::BigArMemHdrType>::getRawUID(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[2];

  v3[0] = *(_QWORD *)(a1 + 16) + 72;
  v1 = v3[0];
  v3[1] = 12;
  llvm::StringRef::find_last_not_of(v3, " ", 1, 0xFFFFFFFFFFFFFFFFLL);
  return v1;
}

uint64_t llvm::object::CommonArchiveMemberHeader<llvm::object::BigArMemHdrType>::getRawGID(uint64_t a1)
{
  uint64_t v1;
  _QWORD v3[2];

  v3[0] = *(_QWORD *)(a1 + 16) + 84;
  v1 = v3[0];
  v3[1] = 12;
  llvm::StringRef::find_last_not_of(v3, " ", 1, 0xFFFFFFFFFFFFFFFFLL);
  return v1;
}

_QWORD *llvm::object::ArchiveMemberHeader::ArchiveMemberHeader(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4, char **a5)
{
  void (**v9)(llvm::raw_ostream *__hidden);
  uint64_t v11;
  std::string *v12;
  int v13;
  size_t v14;
  void **v15;
  std::string *v16;
  char *v17;
  size_t size;
  void **v19;
  std::string *v20;
  std::string::size_type v21;
  void **v23;
  __int128 v24;
  __int16 v25;
  void *__p[2];
  char v27;
  _QWORD v28[4];
  __int16 v29;
  char *v30;
  std::string v31;
  void (**v32)(llvm::raw_ostream *__hidden);
  int v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char v37;
  uint64_t v38;
  int v39;
  void **v40;
  void *v41[2];
  uint64_t v42;
  char *v43;
  std::string v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  a1[1] = a2;
  a1[2] = a3;
  *a1 = off_1E8185118;
  if (!a3)
    return a1;
  if (a4 <= 0x3B)
  {
    sub_1C5992914((uint64_t *)&v32, a1, a3, a4);
    v9 = v32;
    *a5 = (char *)v32;
    if (!v9)
      goto LABEL_53;
    return a1;
  }
  if (*(_BYTE *)(a3 + 58) != 96)
  {
    if (!a5)
      return a1;
    goto LABEL_11;
  }
  if (a5 && *(_BYTE *)(a3 + 59) != 10)
  {
LABEL_11:
    v41[0] = 0;
    v41[1] = 0;
    v42 = 0;
    v33 = 0;
    v37 = 0;
    v38 = 0;
    v32 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
    v40 = v41;
    v39 = 0;
    v35 = 0;
    v36 = 0;
    v34 = 0;
    llvm::raw_ostream::write_escaped((llvm::raw_ostream *)&v32, (char *)(a3 + 58), 2, 0);
    v11 = v36 - v34;
    if (v36 != v34)
    {
      v36 = v34;
      llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)&v32, v34, v11);
    }
    std::operator+<char>();
    v31 = *v12;
    v12->__r_.__value_.__r.__words[0] = 0;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v44.__r_.__value_.__l.__data_);
    (*(void (**)(std::string *__return_ptr, _QWORD *, unint64_t))(*a1 + 64))(&v44, a1, a4);
    if ((v44.__r_.__value_.__s.__data_[16] & 1) != 0)
    {
      v43 = (char *)v44.__r_.__value_.__r.__words[0];
      v44.__r_.__value_.__r.__words[0] = 0;
      sub_1C4D62BD4(&v43, (char **)__p);
      if (v43)
        (*(void (**)(char *))(*(_QWORD *)v43 + 8))(v43);
      v43 = (char *)(a3 - *(_QWORD *)(a2 + 16));
      v13 = SHIBYTE(v31.__r_.__value_.__r.__words[2]);
      if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        size = *((_BYTE *)&v31.__r_.__value_.__s + 23) & 0x7F;
      else
        size = v31.__r_.__value_.__l.__size_;
      sub_1C484371C((uint64_t)__p, size + 10);
      if (v27 >= 0)
        v19 = __p;
      else
        v19 = (void **)__p[0];
      if (size)
      {
        if (v13 >= 0)
          v20 = &v31;
        else
          v20 = (std::string *)v31.__r_.__value_.__r.__words[0];
        memmove(v19, v20, size);
      }
      strcpy((char *)v19 + size, "at offset ");
      v28[0] = __p;
      v28[2] = &v43;
      v29 = 3076;
      sub_1C5992A84((uint64_t *)&v30, (llvm::Twine *)v28);
      v17 = v30;
    }
    else
    {
      v13 = SHIBYTE(v31.__r_.__value_.__r.__words[2]);
      if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v14 = *((_BYTE *)&v31.__r_.__value_.__s + 23) & 0x7F;
      else
        v14 = v31.__r_.__value_.__l.__size_;
      sub_1C484371C((uint64_t)__p, v14 + 4);
      if (v27 >= 0)
        v15 = __p;
      else
        v15 = (void **)__p[0];
      if (v14)
      {
        if (v13 >= 0)
          v16 = &v31;
        else
          v16 = (std::string *)v31.__r_.__value_.__r.__words[0];
        memmove(v15, v16, v14);
      }
      strcpy((char *)v15 + v14, "for ");
      v23 = __p;
      v24 = *(_OWORD *)&v44.__r_.__value_.__l.__data_;
      v25 = 1284;
      sub_1C5992A84((uint64_t *)&v43, (llvm::Twine *)&v23);
      v17 = v43;
    }
    *a5 = v17;
    if (v27 < 0)
      operator delete(__p[0]);
    if ((v44.__r_.__value_.__s.__data_[16] & 1) != 0)
    {
      v21 = v44.__r_.__value_.__r.__words[0];
      v44.__r_.__value_.__r.__words[0] = 0;
      if (v21)
        (*(void (**)(std::string::size_type))(*(_QWORD *)v21 + 8))(v21);
    }
    if (v13 < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
    v32 = off_1E81A6E70;
    if (v39 == 1 && v34)
      MEMORY[0x1CAA32F9C](v34, 0x1000C8077774924);
    if (SHIBYTE(v42) < 0)
      operator delete(v41[0]);
    goto LABEL_52;
  }
  if (!a5)
    return a1;
LABEL_52:
  if (!*a5)
LABEL_53:
    *a5 = 0;
  return a1;
}

void sub_1C5992914(uint64_t *a1, _QWORD *a2, uint64_t a3, uint64_t a4)
{
  llvm::Twine *v7;
  uint64_t v8;
  _QWORD v9[4];
  __int16 v10;
  char *v11;
  uint64_t v12;
  const char *v13;
  __int16 v14;
  _QWORD v15[4];
  __int16 v16;
  char *v17;
  _QWORD v18[2];
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  (*(void (**)(_QWORD *__return_ptr, _QWORD *, uint64_t))(*a2 + 64))(v18, a2, a4);
  if ((v19 & 1) != 0)
  {
    v17 = (char *)v18[0];
    v18[0] = 0;
    sub_1C4D62BD4(&v17, &v11);
    if (v17)
      (*(void (**)(char *))(*(_QWORD *)v17 + 8))(v17);
    v17 = (char *)(a3 - *(_QWORD *)(a2[1] + 16));
    v14 = 773;
    v11 = "remaining size of archive too small for next archive member header ";
    v12 = 67;
    v13 = "at offset ";
    v9[0] = &v11;
    v9[2] = &v17;
    v10 = 3074;
    v7 = (llvm::Twine *)v9;
  }
  else
  {
    v14 = 773;
    v11 = "remaining size of archive too small for next archive member header ";
    v12 = 67;
    v13 = "for ";
    v15[0] = &v11;
    v15[2] = v18[0];
    v15[3] = v18[1];
    v16 = 1282;
    v7 = (llvm::Twine *)v15;
  }
  sub_1C5992A84(a1, v7);
  if ((v19 & 1) != 0)
  {
    v8 = v18[0];
    v18[0] = 0;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
}

void sub_1C5992A84(uint64_t *a1, llvm::Twine *a2)
{
  std::string *v3;
  std::string::size_type v4;
  std::string *v5;
  std::string::size_type v6;
  uint64_t v7;
  std::string v8;
  void *__p[2];
  std::string::size_type v10;
  std::string v11;
  __int16 v12;

  llvm::Twine::str(a2, &v8);
  v3 = std::string::insert(&v8, 0, "truncated or malformed archive (");
  v4 = v3->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v11.__r_.__value_.__l.__data_ = *(_OWORD *)&v3->__r_.__value_.__l.__data_;
  v11.__r_.__value_.__r.__words[2] = v4;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  v5 = std::string::append(&v11, ")");
  v6 = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v10 = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v11.__r_.__value_.__l.__data_);
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v8.__r_.__value_.__l.__data_);
  v7 = operator new();
  v12 = 260;
  v11.__r_.__value_.__r.__words[0] = (std::string::size_type)__p;
  *a1 = llvm::object::GenericBinaryError::GenericBinaryError(v7, (llvm::Twine *)&v11, 3u);
  if (SHIBYTE(v10) < 0)
    operator delete(__p[0]);
}

_QWORD *llvm::object::BigArchiveMemberHeader::BigArchiveMemberHeader(_QWORD *a1, uint64_t a2, uint64_t a3, unint64_t a4, _QWORD *a5)
{
  uint64_t v7;
  uint64_t v9;

  a1[1] = a2;
  a1[2] = a3;
  *a1 = off_1E8185198;
  if (a3)
  {
    if (a4 > 0x71)
    {
      if (a5 && !*a5)
        goto LABEL_7;
    }
    else
    {
      sub_1C5992914(&v9, a1, a3, a4);
      v7 = v9;
      *a5 = v9;
      if (!v7)
LABEL_7:
        *a5 = 0;
    }
  }
  return a1;
}

void getArchiveMemberOctField(uint64_t *a1@<X0>, unsigned __int8 *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X4>, uint64_t a5@<X8>)
{
  unint64_t v9;
  unsigned __int8 *v10;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  unint64_t v15;
  int v16;
  const char *v17;
  char v18;
  char v19;
  char v20;
  uint64_t *v21;
  uint64_t v22;
  _QWORD v23[4];
  __int16 v24;
  _QWORD v25[4];
  __int16 v26;
  _QWORD v27[4];
  __int16 v28;
  _QWORD v29[4];
  __int16 v30;
  _QWORD v31[4];
  char v32;
  char v33;
  uint64_t v34;

  if (a3)
  {
    v9 = 0;
    v10 = a2;
    v11 = a3;
    while (1)
    {
      v12 = *v10;
      if ((v12 - 48) >= 0xA)
      {
        if ((v12 - 97) >= 0x1A)
        {
          if ((v12 - 65) > 0x19)
            break;
          v13 = -55;
        }
        else
        {
          v13 = -87;
        }
      }
      else
      {
        v13 = -48;
      }
      v14 = v13 + v12;
      if (v14 > 7)
        break;
      v15 = 8 * v9 + v14;
      if (v9 > v15 >> 3)
        break;
      ++v10;
      v9 = v15;
      if (!--v11)
      {
        *(_BYTE *)(a5 + 8) &= ~1u;
        *(_QWORD *)a5 = v15;
        return;
      }
    }
  }
  v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 80))(a4);
  v16 = *((unsigned __int8 *)a1 + 32);
  if (*((_BYTE *)a1 + 32))
  {
    if (v16 == 1)
    {
      v17 = "characters in ";
      v23[0] = "characters in ";
      v24 = 259;
      v18 = 3;
    }
    else
    {
      v21 = (uint64_t *)*a1;
      v22 = a1[1];
      v18 = 2;
      if (*((_BYTE *)a1 + 33) != 1)
      {
        LOBYTE(v16) = 2;
        v21 = a1;
      }
      v23[0] = "characters in ";
      v23[2] = v21;
      v23[3] = v22;
      LOBYTE(v24) = 3;
      HIBYTE(v24) = v16;
      v17 = (const char *)v23;
    }
    v25[0] = v17;
    v25[2] = " field in archive member header are not all octal numbers: '";
    LOBYTE(v26) = v18;
    HIBYTE(v26) = 3;
    v27[0] = v25;
    v27[2] = a2;
    v27[3] = a3;
    v28 = 1282;
    v29[0] = v27;
    v29[2] = "' for the archive member header at offset ";
    v30 = 770;
    v20 = 12;
    v19 = 2;
    v31[0] = v29;
    v31[2] = &v34;
  }
  else
  {
    v19 = 0;
    v24 = 256;
    v26 = 256;
    v28 = 256;
    v30 = 256;
    v20 = 1;
  }
  v32 = v19;
  v33 = v20;
  sub_1C5992A84((uint64_t *)a5, (llvm::Twine *)v31);
  *(_BYTE *)(a5 + 8) |= 1u;
}

void llvm::object::BigArchiveMemberHeader::getRawName(llvm::object::BigArchiveMemberHeader *this@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 *v4;
  uint64_t last_not_of;
  uint64_t v6;
  unsigned __int8 *v7;
  unint64_t v8;
  uint64_t v9;
  unsigned __int8 *v10;
  _QWORD v11[4];
  __int16 v12;
  unint64_t v13;
  const char *v14;
  __int16 v15;
  unsigned __int8 *v16;
  uint64_t v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v14 = "NameLen";
  v15 = 259;
  v4 = (unsigned __int8 *)(*((_QWORD *)this + 2) + 108);
  v16 = v4;
  v17 = 4;
  last_not_of = llvm::StringRef::find_last_not_of(&v16, " ", 1, 0xFFFFFFFFFFFFFFFFLL);
  if ((unint64_t)(last_not_of + 1) < 4)
    v6 = last_not_of + 1;
  else
    v6 = 4;
  getArchiveMemberDecField((uint64_t *)&v14, v4, v6, (uint64_t)this, (uint64_t)&v16);
  if ((v17 & 1) != 0)
  {
    v10 = v16;
    *(_BYTE *)(a2 + 16) |= 1u;
    *(_QWORD *)a2 = v10;
  }
  else
  {
    v7 = v16;
    v8 = (unint64_t)(v16 + 1) & 0xFFFFFFFFFFFFFFFELL;
    v9 = *((_QWORD *)this + 2) + 112;
    if (v8 != -2 && *(_WORD *)(v9 + v8) == 2656)
    {
      *(_BYTE *)(a2 + 16) &= ~1u;
      *(_QWORD *)a2 = v9;
      *(_QWORD *)(a2 + 8) = v7;
    }
    else
    {
      v13 = v9 + v8 - *(_QWORD *)(*((_QWORD *)this + 1) + 16);
      v11[2] = &v13;
      v12 = 3075;
      sub_1C5992A84((uint64_t *)a2, (llvm::Twine *)v11);
      *(_BYTE *)(a2 + 16) |= 1u;
    }
  }
}

void llvm::object::ArchiveMemberHeader::getName(llvm::object::ArchiveMemberHeader *this@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  BOOL v9;
  unint64_t v10;
  unint64_t v11;
  char *v13;
  unint64_t v14;
  unint64_t v15;
  unsigned __int8 *v16;
  unint64_t v17;
  unint64_t v18;
  int v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  int v23;
  int v24;
  unsigned int v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  char *v30;
  size_t v31;
  llvm::Twine *v32;
  char *v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  int v37;
  uint64_t v38;
  unint64_t v39;
  unsigned __int8 *v40;
  int v41;
  int v42;
  unsigned int v43;
  unint64_t v44;
  char *v45;
  BOOL v46;
  unint64_t v47;
  unint64_t v48;
  uint64_t v49;
  unint64_t v50;
  unint64_t v51;
  unsigned __int8 *v52;
  unint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  std::string *v57;
  std::string::size_type v58;
  llvm::Twine *v59;
  unint64_t v60;
  int v61;
  uint64_t v62;
  uint64_t v63;
  std::string *v64;
  std::string::size_type v65;
  uint64_t v66;
  _QWORD v67[4];
  __int16 v68;
  _QWORD v69[4];
  __int16 v70;
  _QWORD v71[4];
  __int16 v72;
  void *v73;
  uint64_t v74;
  unint64_t *v75;
  __int16 v76;
  _QWORD v77[4];
  __int16 v78;
  std::string v79;
  void *__p[2];
  std::string::size_type v81;
  _QWORD v82[4];
  __int16 v83;
  uint64_t v84;
  void **v85;
  int v86;
  const char *v87;
  uint64_t v88;
  const char *v89;
  char v90;
  uint64_t v91;
  int v92;
  void **v93;
  unint64_t v94;
  _QWORD v95[4];
  __int16 v96;
  __int128 v97;
  char v98;
  uint64_t v99;

  v99 = *MEMORY[0x1E0C80C00];
  if (a2 <= 0xF)
  {
    v85 = (void **)(*((_QWORD *)this + 2) - *(_QWORD *)(*((_QWORD *)this + 1) + 16));
    v95[0] = "archive header truncated before the name field for archive member header at offset ";
    v95[2] = &v85;
    v96 = 3075;
    sub_1C5992A84((uint64_t *)a3, (llvm::Twine *)v95);
    *(_BYTE *)(a3 + 16) |= 1u;
    return;
  }
  (*(void (**)(__int128 *__return_ptr, llvm::object::ArchiveMemberHeader *))(*(_QWORD *)this + 24))(&v97, this);
  v6 = v97;
  if ((v98 & 1) != 0)
  {
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v6;
    return;
  }
  v7 = *((_QWORD *)&v97 + 1);
  if (*(_BYTE *)v97 != 47)
  {
    v8 = *((_QWORD *)&v97 + 1) - 3;
    if (*((_QWORD *)&v97 + 1) < 3uLL || (*(_WORD *)v97 == 12579 ? (v9 = *(_BYTE *)(v97 + 2) == 47) : (v9 = 0), !v9))
    {
      if (*(_BYTE *)(v97 + *((_QWORD *)&v97 + 1) - 1) == 47)
      {
        if (*((_QWORD *)&v97 + 1) >= (unint64_t)(*((_QWORD *)&v97 + 1) - 1))
          v7 = *((_QWORD *)&v97 + 1) - 1;
      }
      else
      {
        v10 = *((_QWORD *)&v97 + 1);
        do
        {
          v11 = v10;
          if (!v10)
            break;
          --v10;
        }
        while (*(_BYTE *)(v97 - 1 + v11) == 32);
        if (v11 < *((_QWORD *)&v97 + 1))
          v7 = v11;
      }
LABEL_24:
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)a3 = v6;
      *(_QWORD *)(a3 + 8) = v7;
      goto LABEL_126;
    }
    v33 = (char *)(v97 + 3);
    v34 = *((_QWORD *)&v97 + 1) - 1;
    v35 = *((_QWORD *)&v97 + 1) - 1;
    do
    {
      v36 = v35 - 2;
      if (v35 == 2)
        break;
      v37 = *(unsigned __int8 *)(v97 + v35--);
    }
    while (v37 == 32);
    if (v36 >= v8)
      v38 = *((_QWORD *)&v97 + 1) - 3;
    else
      v38 = v36;
    if (v38)
    {
      v39 = 0;
      v40 = (unsigned __int8 *)(v97 + 3);
      while (1)
      {
        v41 = *v40;
        if ((v41 - 48) >= 0xA)
        {
          if ((v41 - 97) >= 0x1A)
          {
            if ((v41 - 65) > 0x19)
              break;
            v42 = -55;
          }
          else
          {
            v42 = -87;
          }
        }
        else
        {
          v42 = -48;
        }
        v43 = v42 + v41;
        if (v43 > 9)
          break;
        v44 = 10 * v39 + v43;
        if (v39 > v44 / 0xA)
          break;
        ++v40;
        v39 = 10 * v39 + v43;
        if (!--v38)
        {
          v94 = v44;
          if ((*(uint64_t (**)(llvm::object::ArchiveMemberHeader *, char *))(*(_QWORD *)this + 104))(this, v33)+ v44 <= a2)
          {
            v49 = *((_QWORD *)this + 2);
            v6 = v49 + (*(uint64_t (**)(llvm::object::ArchiveMemberHeader *))(*(_QWORD *)this + 104))(this);
            v50 = v44;
            do
            {
              v51 = v50;
              if (!v50)
                break;
              --v50;
            }
            while (!*(_BYTE *)(v6 - 1 + v51));
            if (v51 >= v44)
              v7 = v44;
            else
              v7 = v51;
            goto LABEL_24;
          }
          __p[0] = (void *)(*((_QWORD *)this + 2) - *(_QWORD *)(*((_QWORD *)this + 1) + 16));
          v73 = "long name length: ";
          v75 = &v94;
          v76 = 3075;
          v85 = &v73;
          v87 = " extends past the end of the member or archive for archive member header at offset ";
          LOWORD(v89) = 770;
          v67[0] = &v85;
          v67[2] = __p;
          v68 = 3074;
          v32 = (llvm::Twine *)v67;
LABEL_98:
          sub_1C5992A84((uint64_t *)a3, v32);
          *(_BYTE *)(a3 + 16) |= 1u;
          goto LABEL_126;
        }
      }
    }
    v73 = 0;
    v74 = 0;
    v75 = 0;
    v86 = 0;
    v90 = 0;
    v91 = 0;
    v85 = (void **)&unk_1E81A7208;
    v93 = &v73;
    v92 = 0;
    v88 = 0;
    v89 = 0;
    v87 = 0;
    do
    {
      v60 = v34 - 2;
      if (v34 == 2)
        break;
      v61 = *(unsigned __int8 *)(v97 + v34--);
    }
    while (v61 == 32);
    if (v60 >= v8)
      v62 = *((_QWORD *)&v97 + 1) - 3;
    else
      v62 = v60;
    llvm::raw_ostream::write_escaped((llvm::raw_ostream *)&v85, v33, v62, 0);
    v63 = v89 - v87;
    if (v89 != v87)
    {
      v89 = v87;
      llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)&v85, v87, v63);
    }
    v84 = *((_QWORD *)this + 2) - *(_QWORD *)(*((_QWORD *)this + 1) + 16);
    std::operator+<char>();
    v64 = std::string::append(&v79, "' for archive member header at offset ");
    v65 = v64->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v64->__r_.__value_.__l.__data_;
    v81 = v65;
    v64->__r_.__value_.__l.__size_ = 0;
    v64->__r_.__value_.__r.__words[2] = 0;
    v64->__r_.__value_.__r.__words[0] = 0;
    v69[0] = __p;
    v69[2] = &v84;
    v70 = 3076;
    v59 = (llvm::Twine *)v69;
    goto LABEL_119;
  }
  if (*((_QWORD *)&v97 + 1) == 14)
  {
    if (*(_QWORD *)v97 == 0x5341484746583C2FLL && *(_QWORD *)(v97 + 6) == 0x2F3E50414D485341)
      goto LABEL_8;
    goto LABEL_31;
  }
  if (*((_QWORD *)&v97 + 1) == 2)
  {
    if (*(_BYTE *)(v97 + 1) == 47)
      goto LABEL_8;
    goto LABEL_31;
  }
  if (*((_QWORD *)&v97 + 1) != 1)
  {
LABEL_31:
    if (*((_QWORD *)&v97 + 1))
      v13 = (char *)(v97 + 1);
    else
      v13 = (char *)v97;
    v14 = *((_QWORD *)&v97 + 1) - (*((_QWORD *)&v97 + 1) != 0);
    v15 = v14;
    v16 = (unsigned __int8 *)(*((_QWORD *)&v97 + 1) + v97 - 1);
    v17 = v14;
    do
    {
      v18 = v17;
      if (!v17)
        break;
      --v17;
      v19 = *v16--;
    }
    while (v19 == 32);
    if (v18 >= v14)
      v20 = *((_QWORD *)&v97 + 1) - (*((_QWORD *)&v97 + 1) != 0);
    else
      v20 = v18;
    if (v20)
    {
      v21 = 0;
      v22 = v13;
      while (1)
      {
        v23 = *v22;
        if ((v23 - 48) >= 0xA)
        {
          if ((v23 - 97) >= 0x1A)
          {
            if ((v23 - 65) > 0x19)
              break;
            v24 = -55;
          }
          else
          {
            v24 = -87;
          }
        }
        else
        {
          v24 = -48;
        }
        v25 = v24 + v23;
        if (v25 > 9)
          break;
        v26 = 10 * v21 + v25;
        if (v21 > v26 / 0xA)
          break;
        ++v22;
        v21 = 10 * v21 + v25;
        if (!--v20)
        {
          v94 = v26;
          v27 = *((_QWORD *)this + 1);
          v28 = *(_QWORD *)(v27 + 72);
          if (v28 <= v26)
          {
            __p[0] = (void *)(*((_QWORD *)this + 2) - *(_QWORD *)(v27 + 16));
            v73 = "long name offset ";
            v75 = &v94;
            v76 = 2563;
            v85 = &v73;
            v87 = " past the end of the string table for archive member header at offset ";
            LOWORD(v89) = 770;
            v77[0] = &v85;
            v77[2] = __p;
            v78 = 3074;
            v32 = (llvm::Twine *)v77;
            goto LABEL_98;
          }
          v29 = *(_QWORD *)(v27 + 64);
          v30 = (char *)(v29 + v26);
          if ((*(_BYTE *)(v27 + 98) & 6) != 0)
          {
            *(_BYTE *)(a3 + 16) &= ~1u;
            *(_QWORD *)a3 = v30;
            if (v29)
              v31 = strlen(v30);
            else
              v31 = 0;
            *(_QWORD *)(a3 + 8) = v31;
          }
          else
          {
            v45 = (char *)memchr(v30, 10, v28 - v26);
            if (v45)
              v46 = (unint64_t)&v45[-v29 + 1] >= 2;
            else
              v46 = 0;
            if (!v46 || (v47 = (unint64_t)&v45[-v29 - 1], *(v45 - 1) != 47))
            {
              v85 = (void **)"string table at long name offset ";
              v87 = (const char *)&v94;
              LOWORD(v89) = 2563;
              v71[0] = &v85;
              v71[2] = "not terminated";
              v72 = 770;
              v32 = (llvm::Twine *)v71;
              goto LABEL_98;
            }
            if (v28 >= v26)
              v48 = v26;
            else
              v48 = v28;
            if (v48 > v47)
              v47 = v48;
            if (v28 < v47)
              v47 = v28;
            *(_BYTE *)(a3 + 16) &= ~1u;
            *(_QWORD *)a3 = v29 + v48;
            *(_QWORD *)(a3 + 8) = v47 - v48;
          }
          goto LABEL_126;
        }
      }
    }
    v73 = 0;
    v74 = 0;
    v75 = 0;
    v86 = 0;
    v90 = 0;
    v91 = 0;
    v85 = (void **)&unk_1E81A7208;
    v93 = &v73;
    v92 = 0;
    v88 = 0;
    v89 = 0;
    v87 = 0;
    v52 = (unsigned __int8 *)(*((_QWORD *)&v97 + 1) + v97 - 1);
    do
    {
      v53 = v15;
      if (!v15)
        break;
      --v15;
      v54 = *v52--;
    }
    while (v54 == 32);
    if (v53 >= v14)
      v55 = *((_QWORD *)&v97 + 1) - (*((_QWORD *)&v97 + 1) != 0);
    else
      v55 = v53;
    llvm::raw_ostream::write_escaped((llvm::raw_ostream *)&v85, v13, v55, 0);
    v56 = v89 - v87;
    if (v89 != v87)
    {
      v89 = v87;
      llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)&v85, v87, v56);
    }
    v84 = *((_QWORD *)this + 2) - *(_QWORD *)(*((_QWORD *)this + 1) + 16);
    std::operator+<char>();
    v57 = std::string::append(&v79, "' for archive member header at offset ");
    v58 = v57->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
    v81 = v58;
    v57->__r_.__value_.__l.__size_ = 0;
    v57->__r_.__value_.__r.__words[2] = 0;
    v57->__r_.__value_.__r.__words[0] = 0;
    v82[0] = __p;
    v82[2] = &v84;
    v83 = 3076;
    v59 = (llvm::Twine *)v82;
LABEL_119:
    sub_1C5992A84((uint64_t *)a3, v59);
    *(_BYTE *)(a3 + 16) |= 1u;
    if (SHIBYTE(v81) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v79.__r_.__value_.__l.__data_);
    v85 = (void **)off_1E81A6E70;
    if (v92 == 1 && v87)
      MEMORY[0x1CAA32F9C](v87, 0x1000C8077774924);
    if (SHIBYTE(v75) < 0)
      operator delete(v73);
    goto LABEL_126;
  }
LABEL_8:
  *(_BYTE *)(a3 + 16) &= ~1u;
  *(_OWORD *)a3 = v97;
LABEL_126:
  if ((v98 & 1) != 0)
  {
    v66 = v97;
    *(_QWORD *)&v97 = 0;
    if (v66)
      (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
  }
}

void llvm::object::ArchiveMemberHeader::getSize(llvm::object::ArchiveMemberHeader *this@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 *v4;
  uint64_t last_not_of;
  uint64_t v6;
  const char *v7;
  __int16 v8;
  _QWORD v9[2];

  v7 = "size";
  v8 = 259;
  v4 = (unsigned __int8 *)(*((_QWORD *)this + 2) + 48);
  v9[0] = v4;
  v9[1] = 10;
  last_not_of = llvm::StringRef::find_last_not_of(v9, " ", 1, 0xFFFFFFFFFFFFFFFFLL);
  if ((unint64_t)(last_not_of + 1) < 0xA)
    v6 = last_not_of + 1;
  else
    v6 = 10;
  getArchiveMemberDecField((uint64_t *)&v7, v4, v6, (uint64_t)this, a2);
}

void llvm::object::BigArchiveMemberHeader::getSize(llvm::object::BigArchiveMemberHeader *this@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 *v4;
  uint64_t last_not_of;
  uint64_t v6;
  unsigned __int8 *v7;
  char v8;
  const char *v9;
  __int16 v10;
  unsigned __int8 *v11;
  char v12;
  unsigned __int8 *v13;
  uint64_t v14;
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  v9 = "size";
  v10 = 259;
  v4 = (unsigned __int8 *)*((_QWORD *)this + 2);
  v13 = v4;
  v14 = 20;
  last_not_of = llvm::StringRef::find_last_not_of(&v13, " ", 1, 0xFFFFFFFFFFFFFFFFLL);
  if ((unint64_t)(last_not_of + 1) < 0x14)
    v6 = last_not_of + 1;
  else
    v6 = 20;
  getArchiveMemberDecField((uint64_t *)&v9, v4, v6, (uint64_t)this, (uint64_t)&v13);
  if ((v14 & 1) != 0)
  {
    v7 = v13;
LABEL_9:
    v8 = *(_BYTE *)(a2 + 8) | 1;
    goto LABEL_10;
  }
  llvm::object::BigArchiveMemberHeader::getRawNameSize(this, (uint64_t)&v11);
  if ((v12 & 1) != 0)
  {
    v7 = v11;
    goto LABEL_9;
  }
  v7 = &v13[(unint64_t)(v11 + 1) & 0xFFFFFFFFFFFFFFFELL];
  v8 = *(_BYTE *)(a2 + 8) & 0xFE;
LABEL_10:
  *(_BYTE *)(a2 + 8) = v8;
  *(_QWORD *)a2 = v7;
}

void llvm::object::BigArchiveMemberHeader::getRawNameSize(llvm::object::BigArchiveMemberHeader *this@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 *v4;
  uint64_t last_not_of;
  uint64_t v6;
  const char *v7;
  __int16 v8;
  _QWORD v9[2];

  v7 = "NameLen";
  v8 = 259;
  v4 = (unsigned __int8 *)(*((_QWORD *)this + 2) + 108);
  v9[0] = v4;
  v9[1] = 4;
  last_not_of = llvm::StringRef::find_last_not_of(v9, " ", 1, 0xFFFFFFFFFFFFFFFFLL);
  if ((unint64_t)(last_not_of + 1) < 4)
    v6 = last_not_of + 1;
  else
    v6 = 4;
  getArchiveMemberDecField((uint64_t *)&v7, v4, v6, (uint64_t)this, a2);
}

void llvm::object::BigArchiveMemberHeader::getNextOffset(llvm::object::BigArchiveMemberHeader *this@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 *v4;
  uint64_t last_not_of;
  uint64_t v6;
  const char *v7;
  __int16 v8;
  _QWORD v9[2];

  v7 = "NextOffset";
  v8 = 259;
  v4 = (unsigned __int8 *)(*((_QWORD *)this + 2) + 20);
  v9[0] = v4;
  v9[1] = 20;
  last_not_of = llvm::StringRef::find_last_not_of(v9, " ", 1, 0xFFFFFFFFFFFFFFFFLL);
  if ((unint64_t)(last_not_of + 1) < 0x14)
    v6 = last_not_of + 1;
  else
    v6 = 20;
  getArchiveMemberDecField((uint64_t *)&v7, v4, v6, (uint64_t)this, a2);
}

void llvm::object::AbstractArchiveMemberHeader::getAccessMode(llvm::object::AbstractArchiveMemberHeader *this@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 *v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  const char *v8;
  __int16 v9;
  uint64_t v10;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v8 = "AccessMode";
  v9 = 259;
  v4 = (unsigned __int8 *)(*(uint64_t (**)(llvm::object::AbstractArchiveMemberHeader *))(*(_QWORD *)this + 32))(this);
  getArchiveMemberOctField((uint64_t *)&v8, v4, v5, (uint64_t)this, (uint64_t)&v10);
  if ((v11 & 1) != 0)
  {
    v7 = v10;
    *(_BYTE *)(a2 + 8) |= 1u;
    *(_QWORD *)a2 = v7;
  }
  else
  {
    v6 = v10;
    *(_BYTE *)(a2 + 8) &= ~1u;
    *(_DWORD *)a2 = v6;
  }
}

void llvm::object::AbstractArchiveMemberHeader::getLastModified(llvm::object::AbstractArchiveMemberHeader *this@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 *v4;
  uint64_t v5;
  std::chrono::system_clock::time_point v6;
  char v7;
  const char *v8;
  __int16 v9;
  time_t __t;
  char v11;
  uint64_t v12;

  v12 = *MEMORY[0x1E0C80C00];
  v8 = "LastModified";
  v9 = 259;
  v4 = (unsigned __int8 *)(*(uint64_t (**)(llvm::object::AbstractArchiveMemberHeader *))(*(_QWORD *)this + 40))(this);
  getArchiveMemberDecField((uint64_t *)&v8, v4, v5, (uint64_t)this, (uint64_t)&__t);
  if ((v11 & 1) != 0)
  {
    v6.__d_.__rep_ = __t;
    v7 = *(_BYTE *)(a2 + 8) | 1;
  }
  else
  {
    v6.__d_.__rep_ = std::chrono::system_clock::from_time_t(__t).__d_.__rep_ / 1000000;
    v7 = *(_BYTE *)(a2 + 8) & 0xFE;
  }
  *(_BYTE *)(a2 + 8) = v7;
  *(std::chrono::system_clock::time_point *)a2 = v6;
}

void llvm::object::AbstractArchiveMemberHeader::getUID(llvm::object::AbstractArchiveMemberHeader *this@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 *v4;
  uint64_t v5;
  char v6;
  const char *v7;
  __int16 v8;
  uint64_t v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v4 = (unsigned __int8 *)(*(uint64_t (**)(llvm::object::AbstractArchiveMemberHeader *))(*(_QWORD *)this + 48))(this);
  if (v5)
  {
    v7 = "UID";
    v8 = 259;
    getArchiveMemberDecField((uint64_t *)&v7, v4, v5, (uint64_t)this, (uint64_t)&v9);
    v6 = v10;
    *(_BYTE *)(a2 + 8) = *(_BYTE *)(a2 + 8) & 0xFE | v10 & 1;
    if ((v6 & 1) != 0)
      *(_QWORD *)a2 = v9;
    else
      *(_DWORD *)a2 = v9;
  }
  else
  {
    *(_BYTE *)(a2 + 8) &= ~1u;
    *(_DWORD *)a2 = 0;
  }
}

void llvm::object::AbstractArchiveMemberHeader::getGID(llvm::object::AbstractArchiveMemberHeader *this@<X0>, uint64_t a2@<X8>)
{
  unsigned __int8 *v4;
  uint64_t v5;
  char v6;
  const char *v7;
  __int16 v8;
  uint64_t v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  v4 = (unsigned __int8 *)(*(uint64_t (**)(llvm::object::AbstractArchiveMemberHeader *))(*(_QWORD *)this + 56))(this);
  if (v5)
  {
    v7 = "GID";
    v8 = 259;
    getArchiveMemberDecField((uint64_t *)&v7, v4, v5, (uint64_t)this, (uint64_t)&v9);
    v6 = v10;
    *(_BYTE *)(a2 + 8) = *(_BYTE *)(a2 + 8) & 0xFE | v10 & 1;
    if ((v6 & 1) != 0)
      *(_QWORD *)a2 = v9;
    else
      *(_DWORD *)a2 = v9;
  }
  else
  {
    *(_BYTE *)(a2 + 8) &= ~1u;
    *(_DWORD *)a2 = 0;
  }
}

_QWORD *llvm::object::ArchiveMemberHeader::isThin@<X0>(llvm::object::ArchiveMemberHeader *this@<X0>, uint64_t a2@<X8>)
{
  _QWORD *result;
  BOOL v5;
  _DWORD *v6;
  _DWORD *v8;
  uint64_t v9;
  char v10;
  uint64_t v11;

  v11 = *MEMORY[0x1E0C80C00];
  result = (*(_QWORD *(**)(_DWORD **__return_ptr))(*(_QWORD *)this + 24))(&v8);
  if ((v10 & 1) != 0)
  {
    v6 = v8;
    *(_BYTE *)(a2 + 8) |= 1u;
    *(_QWORD *)a2 = v6;
    return result;
  }
  if ((*(_BYTE *)(*((_QWORD *)this + 1) + 98) & 8) == 0)
    goto LABEL_3;
  if (v9 == 7)
  {
    v5 = *v8 != 1297699631 || *(_DWORD *)((char *)v8 + 3) != 791950925;
    goto LABEL_18;
  }
  if (v9 == 2)
  {
    if (*(_WORD *)v8 != 12079)
    {
LABEL_17:
      v5 = 1;
      goto LABEL_18;
    }
  }
  else if (v9 != 1 || *(_BYTE *)v8 != 47)
  {
    goto LABEL_17;
  }
LABEL_3:
  v5 = 0;
LABEL_18:
  *(_BYTE *)(a2 + 8) &= ~1u;
  *(_BYTE *)a2 = v5;
  return result;
}

uint64_t llvm::object::Archive::Child::Child(uint64_t a1, uint64_t a2, uint64_t a3, char **a4)
{
  char **v5;
  unint64_t v10;
  char *v11;
  uint64_t v12;
  char *v13;
  __int16 v14;
  char *v15;
  char *v16;
  unint64_t v18;
  unint64_t v19;
  int v20;
  unint64_t v21;
  unint64_t v22;
  unsigned __int8 *v23;
  unint64_t v24;
  int v25;
  int v26;
  unsigned int v27;
  unint64_t v28;
  _BYTE *v29;
  _QWORD v30[4];
  __int16 v31;
  _QWORD v32[4];
  __int16 v33;
  char *v34;
  uint64_t v35;
  char *v36;
  char v37;
  const char *v38;
  __int16 v39;
  _BYTE *v40;
  unint64_t v41;
  char v42;
  char *v43;
  char v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)a1 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v5 = (char **)(a1 + 8);
  *(_QWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = 0;
  if (a3)
  {
    if (a2)
      v10 = *(_QWORD *)(a2 + 16) - a3 + *(_QWORD *)(a2 + 24);
    else
      v10 = 0;
    llvm::object::Archive::createArchiveMemberHeader(a2, a3, v10, a4, &v36);
    v11 = *v5;
    *v5 = v36;
    if (v11)
      (*(void (**)(char *))(*(_QWORD *)v11 + 16))(v11);
    if (!*a4)
    {
      v12 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 104))(*(_QWORD *)(a1 + 8));
      *(_QWORD *)(a1 + 16) = a3;
      *(_QWORD *)(a1 + 24) = v12;
      (*(void (**)(char **__return_ptr))(**(_QWORD **)(a1 + 8) + 96))(&v43);
      if ((v44 & 1) != 0)
      {
        v15 = v43;
        v43 = 0;
      }
      else
      {
        if ((_BYTE)v43)
          goto LABEL_13;
        (*(void (**)(char **__return_ptr))(*(_QWORD *)*v5 + 72))(&v36);
        if ((v37 & 1) == 0)
        {
          v13 = &v36[v12];
          *(_QWORD *)(a1 + 16) = a3;
          *(_QWORD *)(a1 + 24) = v13;
LABEL_13:
          *(_WORD *)(a1 + 32) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 104))(*(_QWORD *)(a1 + 8));
          (*(void (**)(_BYTE **__return_ptr))(**(_QWORD **)(a1 + 8) + 24))(&v40);
          if ((v42 & 1) != 0)
          {
            *a4 = v40;
          }
          else if ((*(_BYTE *)(a2 + 98) & 7) == 6)
          {
            v14 = *(_WORD *)(a1 + 32) + ((v41 + 1) & 0xFFFE);
LABEL_16:
            *(_WORD *)(a1 + 32) = v14;
          }
          else if (v41 >= 3 && *(_WORD *)v40 == 12579 && v40[2] == 47)
          {
            v18 = v41 - 1;
            do
            {
              v19 = v18 - 2;
              if (v18 == 2)
                break;
              v20 = v40[v18--];
            }
            while (v20 == 32);
            if (v19 >= v41 - 3)
              v21 = v41 - 3;
            else
              v21 = v19;
            if (v21)
            {
              v22 = 0;
              v23 = v40 + 3;
              v24 = v21;
              while (1)
              {
                v25 = *v23;
                if ((v25 - 48) >= 0xA)
                {
                  if ((v25 - 97) >= 0x1A)
                  {
                    if ((v25 - 65) > 0x19)
                      break;
                    v26 = -55;
                  }
                  else
                  {
                    v26 = -87;
                  }
                }
                else
                {
                  v26 = -48;
                }
                v27 = v26 + v25;
                if (v27 > 9)
                  break;
                v28 = 10 * v22 + v27;
                if (v22 > v28 / 0xA)
                  break;
                ++v23;
                v22 = v28;
                if (!--v24)
                {
                  v14 = *(_WORD *)(a1 + 32) + v28;
                  goto LABEL_16;
                }
              }
            }
            v35 = a3 - *(_QWORD *)(a2 + 16);
            v31 = 1283;
            v30[0] = "long name length characters after the #1/ are not all decimal numbers: '";
            v30[2] = v40 + 3;
            v30[3] = v21;
            v36 = (char *)v30;
            v38 = "' for archive member header at offset ";
            v39 = 770;
            v32[0] = &v36;
            v32[2] = &v35;
            v33 = 3074;
            sub_1C5992A84((uint64_t *)&v34, (llvm::Twine *)v32);
            *a4 = v34;
            if ((v42 & 1) != 0)
            {
              v29 = v40;
              v40 = 0;
              if (v29)
                (*(void (**)(_BYTE *))(*(_QWORD *)v29 + 8))(v29);
            }
          }
          goto LABEL_20;
        }
        v15 = v36;
      }
      *a4 = v15;
LABEL_20:
      if ((v44 & 1) != 0)
      {
        v16 = v43;
        v43 = 0;
        if (v16)
          (*(void (**)(char *))(*(_QWORD *)v16 + 8))(v16);
      }
      if (!*a4)
        *a4 = 0;
    }
  }
  return a1;
}

uint64_t llvm::object::Archive::Child::isThinMember(llvm::object::Archive::Child *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 96))(*((_QWORD *)this + 1));
}

uint64_t llvm::object::Archive::Child::getRawSize(llvm::object::Archive::Child *this)
{
  return (*(uint64_t (**)(_QWORD))(**((_QWORD **)this + 1) + 72))(*((_QWORD *)this + 1));
}

uint64_t llvm::object::Archive::Child::getSize@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;

  if ((*(_BYTE *)(*(_QWORD *)this + 98) & 8) != 0)
    return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(this + 8) + 72))(*(_QWORD *)(this + 8));
  v2 = *(_QWORD *)(this + 24) - *(unsigned __int16 *)(this + 32);
  *(_BYTE *)(a2 + 8) &= ~1u;
  *(_QWORD *)a2 = v2;
  return this;
}

void llvm::object::Archive::Child::getFullName(llvm::object::Archive::Child *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  const void *v5;
  size_t v6;
  _BYTE *v7;
  _QWORD *v8;
  unsigned __int8 *v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  unsigned __int8 *v15;
  size_t v16;
  const void *v17;
  __int128 *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unsigned __int8 *v24;
  void **v25;
  __int16 v26;
  _QWORD *v27;
  __int16 v28;
  _QWORD *v29;
  __int16 v30;
  __int128 v31;
  unint64_t v32;
  __int16 v33;
  _BYTE __dst[24];
  _WORD v35[64];
  __int128 v36;
  char v37;
  uint64_t v38;
  char v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)this + 1) + 96))(&v38);
  if ((v39 & 1) != 0)
  {
    v4 = v38;
    *(_BYTE *)(a2 + 24) |= 1u;
    *(_QWORD *)a2 = v4;
    return;
  }
  llvm::object::Archive::Child::getName(this, (uint64_t)&v36);
  v5 = (const void *)v36;
  if ((v37 & 1) != 0)
  {
    *(_QWORD *)&v36 = 0;
    *(_BYTE *)(a2 + 24) |= 1u;
    *(_QWORD *)a2 = v5;
    goto LABEL_38;
  }
  v6 = *((_QWORD *)&v36 + 1);
  v35[4] = 261;
  *(_OWORD *)__dst = v36;
  if (!llvm::sys::path::is_absolute((const char **)__dst, 0))
  {
    v8 = *(_QWORD **)this;
    v9 = *(unsigned __int8 **)(*(_QWORD *)this + 32);
    v10 = v8[5];
    v11 = sub_1C5E7BE8C(v9, v10, 0);
    v12 = 0;
    if (v10 >= v11)
      v13 = v11;
    else
      v13 = v10;
    if (v11 == -1)
      v14 = 0;
    else
      v14 = v13;
    if (v11 == -1)
      v15 = 0;
    else
      v15 = v9;
    *(_QWORD *)__dst = v35;
    *(_OWORD *)&__dst[8] = xmmword_1C85F20B0;
    if (v14 >= 0x81)
    {
      v24 = v15;
      llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)__dst, v35, v14, 1);
      v15 = v24;
      v12 = *(_QWORD *)&__dst[8];
    }
    else if (!v14)
    {
      goto LABEL_23;
    }
    memcpy((void *)(*(_QWORD *)__dst + v12), v15, v14);
    v12 = *(_QWORD *)&__dst[8];
LABEL_23:
    *(_QWORD *)&__dst[8] = v12 + v14;
    v33 = 261;
    *(_QWORD *)&v31 = v5;
    *((_QWORD *)&v31 + 1) = v6;
    v30 = 257;
    v28 = 257;
    v26 = 257;
    llvm::sys::path::append(__dst, 0, (_QWORD **)&v31, &v29, &v27, &v25);
    v16 = *(_QWORD *)&__dst[8];
    if (*(_QWORD *)&__dst[8] > 0x7FFFFFFFFFFFFFF7uLL)
LABEL_45:
      abort();
    v17 = *(const void **)__dst;
    if (*(_QWORD *)&__dst[8] >= 0x17uLL)
    {
      v21 = (*(_QWORD *)&__dst[8] & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((*(_QWORD *)&__dst[8] | 7) != 0x17)
        v21 = *(_QWORD *)&__dst[8] | 7;
      v22 = v21 + 1;
      v18 = (__int128 *)operator new(v21 + 1);
      *((_QWORD *)&v31 + 1) = v16;
      v32 = v22 | 0x8000000000000000;
      *(_QWORD *)&v31 = v18;
    }
    else
    {
      HIBYTE(v32) = __dst[8];
      v18 = &v31;
      if (!*(_QWORD *)&__dst[8])
      {
LABEL_36:
        *((_BYTE *)v18 + v16) = 0;
        *(_BYTE *)(a2 + 24) &= ~1u;
        *(_OWORD *)a2 = v31;
        *(_QWORD *)(a2 + 16) = v32;
        if (*(_WORD **)__dst != v35)
          free(*(void **)__dst);
        goto LABEL_38;
      }
    }
    memmove(v18, v17, v16);
    goto LABEL_36;
  }
  if (v6 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_45;
  if (v6 >= 0x17)
  {
    v19 = (v6 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v6 | 7) != 0x17)
      v19 = v6 | 7;
    v20 = v19 + 1;
    v7 = operator new(v19 + 1);
    *(_QWORD *)&__dst[8] = v6;
    *(_QWORD *)&__dst[16] = v20 | 0x8000000000000000;
    *(_QWORD *)__dst = v7;
  }
  else
  {
    __dst[23] = v6;
    v7 = __dst;
    if (!v6)
      goto LABEL_31;
  }
  memmove(v7, v5, v6);
LABEL_31:
  v7[v6] = 0;
  *(_BYTE *)(a2 + 24) &= ~1u;
  *(_OWORD *)a2 = *(_OWORD *)__dst;
  *(_QWORD *)(a2 + 16) = *(_QWORD *)&__dst[16];
LABEL_38:
  if ((v37 & 1) != 0 && (_QWORD)v36)
    (*(void (**)(_QWORD))(*(_QWORD *)v36 + 8))(v36);
  if ((v39 & 1) != 0)
  {
    v23 = v38;
    v38 = 0;
    if (v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
  }
}

void llvm::object::Archive::Child::getBuffer(llvm::object::Archive::Child *this@<X0>, uint64_t a2@<X8>)
{
  char v4;
  uint64_t v5;
  uint64_t v6;
  void **v7;
  void *v8;
  void **v9;
  uint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  unint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  char *v24;
  char *v25;
  char *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  void *v37;
  uint64_t v38;
  void **v39;
  char v40;
  __int16 v41;
  _QWORD v42[2];
  char v43;
  void *__p[2];
  char v45;
  char v46;
  uint64_t v47;
  char v48;
  uint64_t v49;

  v49 = *MEMORY[0x1E0C80C00];
  (*(void (**)(uint64_t *__return_ptr))(**((_QWORD **)this + 1) + 96))(&v47);
  if ((v48 & 1) != 0)
  {
    v5 = v47;
    v47 = 0;
    *(_BYTE *)(a2 + 16) |= 1u;
    *(_QWORD *)a2 = v5;
    goto LABEL_48;
  }
  if (!(_BYTE)v47)
  {
    if ((*(_BYTE *)(*(_QWORD *)this + 98) & 8) != 0)
    {
      (*(void (**)(void ***__return_ptr))(**((_QWORD **)this + 1) + 72))(&v39);
      if ((v40 & 1) != 0)
      {
        v9 = v39;
        *(_BYTE *)(a2 + 16) |= 1u;
        goto LABEL_30;
      }
      v6 = *((unsigned __int16 *)this + 16);
      v7 = v39;
    }
    else
    {
      v6 = *((unsigned __int16 *)this + 16);
      v7 = (void **)(*((_QWORD *)this + 3) - v6);
    }
    v9 = (void **)(*((_QWORD *)this + 2) + v6);
    *(_BYTE *)(a2 + 16) &= ~1u;
    *(_QWORD *)(a2 + 8) = v7;
LABEL_30:
    *(_QWORD *)a2 = v9;
    goto LABEL_48;
  }
  llvm::object::Archive::Child::getFullName(this, (uint64_t)__p);
  if ((v46 & 1) != 0)
  {
    v8 = __p[0];
    __p[0] = 0;
    *(_BYTE *)(a2 + 16) |= 1u;
    *(_QWORD *)a2 = v8;
    goto LABEL_46;
  }
  v41 = 260;
  v39 = __p;
  sub_1C5E1F6CC((unsigned __int8 *)&v39, 0xFFFFFFFFFFFFFFFFLL, 0, 0, 1, 0, (uint64_t)v42);
  v4 = v43;
  if ((v43 & 1) != 0)
  {
    v10 = v42[0];
    if (LODWORD(v42[0]))
    {
      v11 = v42[1];
      v12 = (_QWORD *)operator new();
      *v12 = &off_1E81A0D28;
      v12[1] = v10;
      v12[2] = v11;
      *(_BYTE *)(a2 + 16) |= 1u;
      *(_QWORD *)a2 = v12;
      if ((v4 & 1) != 0)
        goto LABEL_45;
      goto LABEL_43;
    }
  }
  else
  {
    std::system_category();
  }
  v13 = *(_QWORD **)this;
  v15 = *(_QWORD **)(*(_QWORD *)this + 112);
  v14 = *(_QWORD *)(*(_QWORD *)this + 120);
  if ((unint64_t)v15 >= v14)
  {
    v19 = v13[13];
    v20 = ((uint64_t)v15 - v19) >> 3;
    if ((unint64_t)(v20 + 1) >> 61)
      abort();
    v21 = v14 - v19;
    v22 = v21 >> 2;
    if (v21 >> 2 <= (unint64_t)(v20 + 1))
      v22 = v20 + 1;
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF8)
      v23 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v23 = v22;
    if (v23)
    {
      if (v23 >> 61)
        sub_1C4764EE4();
      v24 = (char *)operator new(8 * v23);
    }
    else
    {
      v24 = 0;
    }
    v25 = &v24[8 * v20];
    v26 = &v24[8 * v23];
    v27 = v42[0];
    v42[0] = 0;
    *(_QWORD *)v25 = v27;
    v17 = v25 + 8;
    v28 = (_QWORD *)v13[13];
    v29 = (_QWORD *)v13[14];
    if (v29 == v28)
    {
      v13[13] = v25;
      v13[14] = v17;
      v13[15] = v26;
    }
    else
    {
      do
      {
        v30 = *--v29;
        *v29 = 0;
        *((_QWORD *)v25 - 1) = v30;
        v25 -= 8;
      }
      while (v29 != v28);
      v29 = (_QWORD *)v13[13];
      v31 = (_QWORD *)v13[14];
      v13[13] = v25;
      v13[14] = v17;
      v13[15] = v26;
      while (v31 != v29)
      {
        v33 = *--v31;
        v32 = v33;
        *v31 = 0;
        if (v33)
          (*(void (**)(uint64_t))(*(_QWORD *)v32 + 8))(v32);
      }
    }
    if (v29)
      operator delete(v29);
    v18 = *(_QWORD **)this;
    v4 = v43;
  }
  else
  {
    v16 = v42[0];
    v42[0] = 0;
    *v15 = v16;
    v17 = v15 + 1;
    v18 = v13;
  }
  v13[14] = v17;
  v34 = *(_QWORD *)(v18[14] - 8);
  v35 = *(_QWORD *)(v34 + 8);
  v36 = *(_QWORD *)(v34 + 16) - v35;
  *(_BYTE *)(a2 + 16) &= ~1u;
  *(_QWORD *)a2 = v35;
  *(_QWORD *)(a2 + 8) = v36;
  if ((v4 & 1) == 0)
  {
LABEL_43:
    if (v42[0])
      (*(void (**)(_QWORD))(*(_QWORD *)v42[0] + 8))(v42[0]);
  }
LABEL_45:
  if ((v46 & 1) != 0)
  {
LABEL_46:
    v37 = __p[0];
    __p[0] = 0;
    if (v37)
      (*(void (**)(void *))(*(_QWORD *)v37 + 8))(v37);
    goto LABEL_48;
  }
  if (v45 < 0)
    operator delete(__p[0]);
LABEL_48:
  if ((v48 & 1) != 0)
  {
    v38 = v47;
    v47 = 0;
    if (v38)
      (*(void (**)(uint64_t))(*(_QWORD *)v38 + 8))(v38);
  }
}

void llvm::object::Archive::Child::getNext(llvm::object::Archive::Child *this@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  _QWORD *v5;
  char *v6;
  uint64_t v7;
  __int128 v8;
  __int128 v9;
  unint64_t v10;
  char *v11;
  _OWORD *v12;
  __int128 v13;
  __int128 v14;
  _BYTE v15[32];
  __int16 v16;
  _QWORD v17[4];
  __int16 v18;
  void *__p;
  __int128 v20;
  _QWORD v21[4];
  __int16 v22;
  char *v23;
  char *v24[2];
  char v25;
  unint64_t v26;
  char v27;
  uint64_t v28;

  v28 = *MEMORY[0x1E0C80C00];
  (*(void (**)(unint64_t *__return_ptr))(**((_QWORD **)this + 1) + 88))(&v26);
  v4 = v26;
  if ((v27 & 1) != 0)
  {
    v26 = 0;
    *(_BYTE *)(a2 + 40) |= 1u;
    *(_QWORD *)a2 = v4;
    goto LABEL_11;
  }
  if (!v26)
  {
    *(_BYTE *)(a2 + 40) &= ~1u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    goto LABEL_11;
  }
  v5 = *(_QWORD **)this;
  if (v26 > *(_QWORD *)(*(_QWORD *)this + 16) + *(_QWORD *)(*(_QWORD *)this + 24))
  {
    v11 = (char *)operator new(0x48uLL);
    *(_QWORD *)v15 = v11;
    *(_OWORD *)&v15[8] = xmmword_1C8663CE0;
    strcpy(v11, "offset to next archive member past the end of the archive after member ");
    llvm::object::Archive::Child::getName(this, (uint64_t)v24);
    if ((v25 & 1) != 0)
    {
      v23 = v24[0];
      sub_1C4D62BD4(&v23, (char **)&__p);
      if (v23)
        (*(void (**)(char *))(*(_QWORD *)v23 + 8))(v23);
      v23 = (char *)(*((_QWORD *)this + 2) - *(_QWORD *)(*(_QWORD *)this + 16));
      v12 = operator new(0x58uLL);
      __p = v12;
      v20 = xmmword_1C8663CF0;
      v13 = *((_OWORD *)v11 + 3);
      v12[2] = *((_OWORD *)v11 + 2);
      v12[3] = v13;
      *(_QWORD *)((char *)v12 + 63) = *(_QWORD *)(v11 + 63);
      v14 = *((_OWORD *)v11 + 1);
      *v12 = *(_OWORD *)v11;
      v12[1] = v14;
      strcpy((char *)v12 + 71, "at offset ");
      v21[0] = &__p;
      v21[2] = &v23;
      v22 = 3076;
      sub_1C5992A84((uint64_t *)a2, (llvm::Twine *)v21);
      *(_BYTE *)(a2 + 40) |= 1u;
      if (SHIBYTE(v20) < 0)
        operator delete(__p);
    }
    else
    {
      v17[0] = v15;
      v17[2] = v24[0];
      v17[3] = v24[1];
      v18 = 1284;
      sub_1C5992A84((uint64_t *)a2, (llvm::Twine *)v17);
      *(_BYTE *)(a2 + 40) |= 1u;
      if ((v15[23] & 0x80000000) == 0)
        goto LABEL_11;
    }
    operator delete(*(void **)v15);
  }
  else
  {
    v24[0] = 0;
    llvm::object::Archive::Child::Child((uint64_t)v15, (uint64_t)v5, v26, v24);
    v6 = v24[0];
    if (v24[0])
    {
      v24[0] = 0;
      *(_BYTE *)(a2 + 40) |= 1u;
      v7 = *(_QWORD *)&v15[8];
      *(_QWORD *)a2 = v6;
      *(_QWORD *)&v15[8] = 0;
      if (v7)
      {
        (*(void (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
        if (v24[0])
          (*(void (**)(char *))(*(_QWORD *)v24[0] + 8))(v24[0]);
      }
    }
    else
    {
      *(_BYTE *)(a2 + 40) &= ~1u;
      *(_WORD *)(a2 + 32) = v16;
      v9 = *(_OWORD *)v15;
      v8 = *(_OWORD *)&v15[16];
      *(_QWORD *)&v15[8] = 0;
      *(_OWORD *)a2 = v9;
      *(_OWORD *)(a2 + 16) = v8;
    }
  }
LABEL_11:
  if ((v27 & 1) != 0)
  {
    v10 = v26;
    v26 = 0;
    if (v10)
      (*(void (**)(unint64_t))(*(_QWORD *)v10 + 8))(v10);
  }
}

uint64_t llvm::object::Archive::Child::getChildOffset(llvm::object::Archive::Child *this)
{
  return *((_QWORD *)this + 2) - *(_QWORD *)(*(_QWORD *)this + 16);
}

void llvm::object::Archive::Child::getAsBinary(llvm::object::Archive::Child *this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  _OWORD v5[2];
  uint64_t v6;
  char v7;
  _OWORD v8[2];
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  llvm::object::Archive::Child::getMemoryBufferRef(this, (uint64_t)v8);
  if ((v9 & 1) != 0)
  {
    v4 = *(_QWORD *)&v8[0];
LABEL_6:
    *(_BYTE *)(a2 + 8) |= 1u;
    goto LABEL_7;
  }
  v5[0] = v8[0];
  v5[1] = v8[1];
  llvm::object::createBinary((uint64_t)v5);
  if ((v7 & 1) != 0)
  {
    v4 = v6;
    goto LABEL_6;
  }
  *(_BYTE *)(a2 + 8) &= ~1u;
  v4 = v6;
LABEL_7:
  *(_QWORD *)a2 = v4;
}

uint64_t llvm::object::Archive::getArchiveMagicLen(llvm::object::Archive *this)
{
  return 8;
}

__n128 llvm::object::Archive::setFirstRegular(__n128 *this, __n128 *a2)
{
  __n128 result;

  result = a2[1];
  this[5] = result;
  this[6].n128_u16[0] = a2[2].n128_u16[0];
  return result;
}

uint64_t llvm::object::Archive::Archive(uint64_t a1, __int128 *a2, char **a3)
{
  __int128 v5;
  __int128 v6;
  _OWORD *v7;
  _OWORD *v8;
  _OWORD *v9;
  _QWORD *v10;
  char v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  char *v23;
  __int128 v24;
  BOOL v25;
  BOOL v28;
  __int128 v29;
  uint64_t v30;
  unint64_t v32;
  char *v33;
  BOOL v37;
  uint64_t v41;
  _BYTE v42[8];
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  const char *v46;
  uint64_t v47;
  __int128 v48;
  __int16 v49;
  unint64_t v50;
  __int128 v51;
  __int128 v52;
  __int128 v53;
  char v54;
  __int128 v55;
  char v56;
  uint64_t v57;
  unint64_t v58;
  char v59;
  uint64_t v60;

  v60 = *MEMORY[0x1E0C80C00];
  v6 = a2[1];
  v51 = *a2;
  v5 = v51;
  v52 = v6;
  *(_DWORD *)(a1 + 8) = 0;
  *(_OWORD *)(a1 + 16) = v5;
  *(_OWORD *)(a1 + 32) = v6;
  *(_QWORD *)a1 = off_1E8185218;
  *(_OWORD *)(a1 + 48) = 0u;
  v7 = (_OWORD *)(a1 + 48);
  *(_OWORD *)(a1 + 64) = 0u;
  v8 = (_OWORD *)(a1 + 64);
  *(_OWORD *)(a1 + 80) = 0u;
  v9 = (_OWORD *)(a1 + 80);
  *(_WORD *)(a1 + 96) = -1;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  if (*(_QWORD *)(a1 + 24) < 8uLL)
    goto LABEL_30;
  v10 = *(_QWORD **)(a1 + 16);
  switch(*v10)
  {
    case 0xA3E6E6968743C21:
      v11 = *(_BYTE *)(a1 + 98) | 8;
      break;
    case 0xA3E686372613C21:
      v11 = *(_BYTE *)(a1 + 98) & 0xF7;
      break;
    case 0xA3E66616769623CLL:
      *(_BYTE *)(a1 + 98) = *(_BYTE *)(a1 + 98) & 0xF0 | 6;
      goto LABEL_26;
    default:
LABEL_30:
      v21 = operator new();
      v46 = "file too small to be an archive";
      v49 = 259;
      v19 = llvm::object::GenericBinaryError::GenericBinaryError(v21, (llvm::Twine *)&v46, 2u);
      goto LABEL_28;
  }
  *(_BYTE *)(a1 + 98) = v11 & 0xF8;
  llvm::object::Archive::child_begin(a1, a3, 0, (uint64_t)&v46);
  if (!*a3)
  {
    llvm::object::Archive::child_end((uint64_t)v42);
    v12 = v45;
    if (v50 <= 7 && v45 < 8 || (v13 = v44, (_QWORD)v48 == v44))
    {
      *a3 = 0;
LABEL_22:
      if (v43)
        (*(void (**)(uint64_t))(*(_QWORD *)v43 + 16))(v43);
      goto LABEL_24;
    }
    (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v47 + 24))(&v57);
    v14 = v57;
    if ((v59 & 1) != 0)
    {
      v57 = 0;
      goto LABEL_32;
    }
    v15 = v58;
    if (v58 == 12)
    {
      if (*(_QWORD *)v57 == 0x45444D59532E5F5FLL && *(_DWORD *)(v57 + 8) == 875978566)
      {
        v17 = 4;
        goto LABEL_39;
      }
    }
    else
    {
      if (v58 == 9)
      {
        if (*(_QWORD *)v57 != 0x45444D59532E5F5FLL || *(_BYTE *)(v57 + 8) != 70)
          goto LABEL_47;
        v17 = 2;
LABEL_39:
        *(_BYTE *)(a1 + 98) = *(_BYTE *)(a1 + 98) & 0xF8 | v17;
        llvm::object::Archive::Child::getBuffer((llvm::object::Archive::Child *)&v46, (uint64_t)&v55);
        if ((v56 & 1) != 0)
        {
LABEL_73:
          v23 = (char *)v55;
          goto LABEL_74;
        }
        *v7 = v55;
        sub_1C624B980((uint64_t)&v46);
        v23 = *a3;
        if (*a3)
          goto LABEL_75;
        v24 = v48;
        goto LABEL_42;
      }
      if (v58 < 3)
      {
        if (v58 != 1)
        {
          v25 = 0;
LABEL_82:
          if (v15 != 2)
            goto LABEL_58;
          if (*(_WORD *)v14 != 12079)
          {
            v15 = 2;
LABEL_58:
            if (*(_BYTE *)v14 == 47)
            {
              if (v15 != 1)
              {
                if (!atomic_load(qword_1EF8F7238))
                  llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
                v32 = qword_1EF8F7238[0];
                v33 = (char *)operator new();
                *(_QWORD *)v33 = &off_1E81A0D28;
                *((_QWORD *)v33 + 1) = 3;
                *((_QWORD *)v33 + 2) = v32;
                *a3 = v33;
                goto LABEL_75;
              }
              *(_BYTE *)(a1 + 98) = *(_BYTE *)(a1 + 98) & 0xF8 | 5;
              llvm::object::Archive::Child::getBuffer((llvm::object::Archive::Child *)&v46, (uint64_t)&v55);
              if ((v56 & 1) == 0)
              {
                *v7 = v55;
                sub_1C624B980((uint64_t)&v46);
                if (!*a3)
                {
                  v28 = v12 >= 8 || v50 >= 8;
                  if (!v28 || (_QWORD)v48 == v13)
                    goto LABEL_68;
                  (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v47 + 24))(&v53);
                  sub_1C6175028(&v57, &v53);
                  if ((v54 & 1) != 0)
                  {
                    v41 = v53;
                    *(_QWORD *)&v53 = 0;
                    if (v41)
                      (*(void (**)(uint64_t))(*(_QWORD *)v41 + 8))(v41);
                  }
                  if ((v59 & 1) != 0)
                  {
                    v23 = (char *)v57;
                    v57 = 0;
                    goto LABEL_74;
                  }
                  if (v58 != 2 || *(_WORD *)v57 != 12079)
                  {
LABEL_68:
                    v29 = v48;
LABEL_70:
                    *v9 = v29;
                    *(_WORD *)(a1 + 96) = v49;
LABEL_71:
                    *a3 = 0;
                    goto LABEL_75;
                  }
                  llvm::object::Archive::Child::getBuffer((llvm::object::Archive::Child *)&v46, (uint64_t)&v53);
                  if ((v54 & 1) == 0)
                  {
                    *v8 = v53;
                    sub_1C624B980((uint64_t)&v46);
                    if (*a3)
                      goto LABEL_75;
                    goto LABEL_68;
                  }
                  goto LABEL_139;
                }
LABEL_75:
                if ((v59 & 1) != 0)
                {
                  v30 = v57;
                  v57 = 0;
                  if (v30)
                    (*(void (**)(uint64_t))(*(_QWORD *)v30 + 8))(v30);
                }
                goto LABEL_22;
              }
              goto LABEL_73;
            }
LABEL_69:
            *(_BYTE *)(a1 + 98) = *(_BYTE *)(a1 + 98) & 0xF8 | v25;
            v29 = v48;
            goto LABEL_70;
          }
          *(_BYTE *)(a1 + 98) = *(_BYTE *)(a1 + 98) & 0xF8 | v25;
          llvm::object::Archive::Child::getBuffer((llvm::object::Archive::Child *)&v46, (uint64_t)&v55);
          if ((v56 & 1) != 0)
            goto LABEL_73;
          *v8 = v55;
          sub_1C624B980((uint64_t)&v46);
          v23 = *a3;
          if (*a3)
            goto LABEL_75;
          v24 = v48;
LABEL_42:
          *v9 = v24;
          *(_WORD *)(a1 + 96) = v49;
LABEL_74:
          *a3 = v23;
          goto LABEL_75;
        }
        if (*(_BYTE *)v57 != 47)
        {
          v25 = 0;
          goto LABEL_69;
        }
        goto LABEL_72;
      }
    }
LABEL_47:
    if (*(_WORD *)v57 != 12579 || *(_BYTE *)(v57 + 2) != 47)
    {
      if (v58 != 7)
      {
        v25 = 0;
        goto LABEL_58;
      }
      if (*(_DWORD *)v57 != 1297699631 || *(_DWORD *)(v57 + 3) != 791950925)
      {
        v25 = 0;
        v15 = 7;
        goto LABEL_58;
      }
LABEL_72:
      llvm::object::Archive::Child::getBuffer((llvm::object::Archive::Child *)&v46, (uint64_t)&v55);
      if ((v56 & 1) != 0)
        goto LABEL_73;
      *v7 = v55;
      v25 = v15 == 7 && *(_DWORD *)v14 == 1297699631 && *(_DWORD *)(v14 + 3) == 791950925;
      sub_1C624B980((uint64_t)&v46);
      if (*a3)
        goto LABEL_75;
      v37 = v12 >= 8 || v50 >= 8;
      if (!v37 || (_QWORD)v48 == v13)
        goto LABEL_71;
      (*(void (**)(__int128 *__return_ptr))(*(_QWORD *)v47 + 24))(&v53);
      v14 = v53;
      if ((v54 & 1) == 0)
      {
        v15 = *((_QWORD *)&v53 + 1);
        goto LABEL_82;
      }
LABEL_32:
      *a3 = (char *)v14;
      goto LABEL_75;
    }
    *(_BYTE *)(a1 + 98) = *(_BYTE *)(a1 + 98) & 0xF8 | 2;
    llvm::object::Archive::Child::getName((llvm::object::Archive::Child *)&v46, (uint64_t)&v55);
    v23 = (char *)v55;
    if ((v56 & 1) != 0)
      goto LABEL_74;
    if (*((uint64_t *)&v55 + 1) > 15)
    {
      if (*((_QWORD *)&v55 + 1) != 19)
      {
        if (*((_QWORD *)&v55 + 1) != 16)
          goto LABEL_136;
        if (*(_QWORD *)v55 != 0x45444D59532E5F5FLL || *(_QWORD *)(v55 + 8) != 0x444554524F532046)
          goto LABEL_136;
        goto LABEL_138;
      }
      if (*(_QWORD *)v55 != 0x45444D59532E5F5FLL
        || *(_QWORD *)(v55 + 8) != 0x524F532034365F46
        || *(_QWORD *)(v55 + 11) != 0x444554524F532034)
      {
        goto LABEL_136;
      }
    }
    else
    {
      if (*((_QWORD *)&v55 + 1) == 9)
      {
        if (*(_QWORD *)v55 != 0x45444D59532E5F5FLL || *(_BYTE *)(v55 + 8) != 70)
          goto LABEL_136;
        goto LABEL_138;
      }
      if (*((_QWORD *)&v55 + 1) != 12)
        goto LABEL_136;
      if (*(_QWORD *)v55 != 0x45444D59532E5F5FLL || *(_DWORD *)(v55 + 8) != 875978566)
        goto LABEL_136;
    }
    *(_BYTE *)(a1 + 98) = *(_BYTE *)(a1 + 98) & 0xF8 | 4;
LABEL_138:
    llvm::object::Archive::Child::getBuffer((llvm::object::Archive::Child *)&v46, (uint64_t)&v53);
    if ((v54 & 1) != 0)
    {
LABEL_139:
      v23 = (char *)v53;
      goto LABEL_74;
    }
    *v7 = v53;
    sub_1C624B980((uint64_t)&v46);
    if (*a3)
      goto LABEL_75;
LABEL_136:
    *v9 = v48;
    *(_WORD *)(a1 + 96) = v49;
    goto LABEL_75;
  }
LABEL_24:
  v18 = v47;
  v47 = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 16))(v18);
LABEL_26:
  if (!*a3)
  {
    v19 = 0;
LABEL_28:
    *a3 = (char *)v19;
  }
  return a1;
}

uint64_t llvm::object::Archive::child_begin@<X0>(uint64_t a1@<X0>, char **a2@<X1>, int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  __int16 v12;
  uint64_t v13;
  uint64_t v14;
  __int16 v15;
  __int128 v16;
  uint64_t v17;
  uint64_t v18;
  __int16 v19;
  _BYTE v20[8];
  uint64_t v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;

  if (*(_QWORD *)(a1 + 24) == 8)
    return llvm::object::Archive::child_end(a4);
  if (a3)
  {
    llvm::object::Archive::Child::Child((uint64_t)v20, a1, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_WORD *)(a1 + 96));
    sub_1C624BC78((uint64_t)&v22, (uint64_t)v20);
    v10 = v23;
    v11 = v24;
    v12 = v25;
    *(_OWORD *)a4 = v22;
    *(_QWORD *)(a4 + 16) = v10;
    *(_QWORD *)(a4 + 24) = v11;
    *(_WORD *)(a4 + 32) = v12;
    *(_QWORD *)(a4 + 40) = a2;
    *((_QWORD *)&v22 + 1) = 0;
  }
  else
  {
    v8 = *(_QWORD *)(a1 + 16);
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 32))(a1);
    llvm::object::Archive::Child::Child((uint64_t)v20, a1, v8 + v9, a2);
    if (*a2)
    {
      llvm::object::Archive::child_end(a4);
    }
    else
    {
      sub_1C624BC78((uint64_t)&v16, (uint64_t)v20);
      v13 = v17;
      v14 = v18;
      v15 = v19;
      *(_OWORD *)a4 = v16;
      *(_QWORD *)(a4 + 16) = v13;
      *(_QWORD *)(a4 + 24) = v14;
      *(_WORD *)(a4 + 32) = v15;
      *(_QWORD *)(a4 + 40) = a2;
      *((_QWORD *)&v16 + 1) = 0;
    }
  }
  result = v21;
  v21 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

uint64_t llvm::object::Archive::child_end@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  __int16 v5;
  uint64_t result;
  _OWORD v7[3];
  __int128 v8;
  uint64_t v9;
  uint64_t v10;
  __int16 v11;

  memset(v7, 0, 32);
  sub_1C624BC78((uint64_t)&v8, (uint64_t)v7);
  v3 = v9;
  v4 = v10;
  v5 = v11;
  *(_OWORD *)a1 = v8;
  *(_QWORD *)(a1 + 16) = v3;
  *(_QWORD *)(a1 + 24) = v4;
  *(_WORD *)(a1 + 32) = v5;
  *(_QWORD *)(a1 + 40) = 0;
  *((_QWORD *)&v8 + 1) = 0;
  result = *((_QWORD *)&v7[0] + 1);
  *((_QWORD *)&v7[0] + 1) = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 16))(result);
  return result;
}

BOOL llvm::object::Archive::isEmpty(llvm::object::Archive *this)
{
  return *((_QWORD *)this + 3) == 8;
}

uint64_t llvm::object::Archive::Symbol::getName(llvm::object::Archive::Symbol *this)
{
  uint64_t v1;
  uint64_t v2;

  v1 = *(_QWORD *)(*(_QWORD *)this + 48);
  v2 = v1 + *((unsigned int *)this + 3);
  if (v1)
    strlen((const char *)(v1 + *((unsigned int *)this + 3)));
  return v2;
}

uint64_t llvm::object::Archive::Symbol::getNext(llvm::object::Archive::Symbol *this)
{
  uint64_t v1;
  unint64_t v2;
  unint64_t v3;

  v1 = *(_QWORD *)this;
  v2 = *((_QWORD *)this + 1);
  if ((*(_BYTE *)(*(_QWORD *)this + 98) & 7) != 2)
  {
    v3 = *(_QWORD *)(v1 + 56);
    if (v3 > HIDWORD(v2))
      memchr((void *)(*(_QWORD *)(v1 + 48) + HIDWORD(v2)), 0, v3 - HIDWORD(v2));
  }
  return v1;
}

llvm::object::Archive *llvm::object::Archive::symbol_end(llvm::object::Archive *this)
{
  llvm::object::Archive::getNumberOfSymbols(this);
  return this;
}

uint64_t llvm::object::BigArchive::BigArchive(uint64_t a1, __int128 *a2, char **a3)
{
  __int128 v5;
  _QWORD *v6;
  unint64_t *v7;
  uint64_t v8;
  uint64_t last_not_of;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  int v13;
  int v14;
  unsigned int v15;
  unint64_t v16;
  const char *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  const char *v21;
  uint64_t v22;
  int v23;
  int v24;
  unsigned int v25;
  unint64_t v26;
  char *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  const char *v32;
  uint64_t v33;
  __int128 v34;
  __int16 v35;
  unint64_t v36;
  _QWORD v37[4];
  __int16 v38;
  _QWORD v39[4];
  __int16 v40;
  __int128 v41[2];

  v5 = a2[1];
  v41[0] = *a2;
  v41[1] = v5;
  v6 = (_QWORD *)llvm::object::Archive::Archive(a1, v41, a3);
  *v6 = off_1E8185250;
  v6[17] = 0;
  v7 = v6 + 17;
  v6[18] = 0;
  v8 = v6[2];
  v6[16] = v8;
  v32 = (const char *)(v8 + 68);
  v33 = 20;
  last_not_of = llvm::StringRef::find_last_not_of(&v32, " ", 1, 0xFFFFFFFFFFFFFFFFLL);
  if ((unint64_t)(last_not_of + 1) < 0x14)
    v10 = last_not_of + 1;
  else
    v10 = 20;
  if (v10)
  {
    v11 = 0;
    v12 = 0;
    while (1)
    {
      v13 = *(unsigned __int8 *)(v8 + v11 + 68);
      if ((v13 - 48) >= 0xA)
      {
        if ((v13 - 97) >= 0x1A)
        {
          if ((v13 - 65) > 0x19)
            break;
          v14 = -55;
        }
        else
        {
          v14 = -87;
        }
      }
      else
      {
        v14 = -48;
      }
      v15 = v14 + v13;
      if (v15 > 9)
        break;
      v16 = 10 * v12 + v15;
      if (v12 > v16 / 0xA)
        break;
      ++v11;
      v12 = v16;
      if (v10 == v11)
      {
        *v7 = v16;
        goto LABEL_16;
      }
    }
  }
  v35 = 1283;
  v32 = "malformed AIX big archive: first member offset \"";
  *(_QWORD *)&v34 = v8 + 68;
  *((_QWORD *)&v34 + 1) = v10;
  v39[0] = &v32;
  v39[2] = "\" is not a number";
  v40 = 770;
  sub_1C5992A84((uint64_t *)&v28, (llvm::Twine *)v39);
  *a3 = v28;
  v8 = *(_QWORD *)(a1 + 128);
LABEL_16:
  v17 = (const char *)(v8 + 88);
  v32 = v17;
  v33 = 20;
  v18 = llvm::StringRef::find_last_not_of(&v32, " ", 1, 0xFFFFFFFFFFFFFFFFLL);
  if ((unint64_t)(v18 + 1) < 0x14)
    v19 = v18 + 1;
  else
    v19 = 20;
  if (v19)
  {
    v20 = 0;
    v21 = v17;
    v22 = v19;
    while (1)
    {
      v23 = *(unsigned __int8 *)v21;
      if ((v23 - 48) >= 0xA)
      {
        if ((v23 - 97) >= 0x1A)
        {
          if ((v23 - 65) > 0x19)
            break;
          v24 = -55;
        }
        else
        {
          v24 = -87;
        }
      }
      else
      {
        v24 = -48;
      }
      v25 = v24 + v23;
      if (v25 > 9)
        break;
      v26 = 10 * v20 + v25;
      if (v20 > v26 / 0xA)
        break;
      ++v21;
      v20 = v26;
      if (!--v22)
      {
        *(_QWORD *)(a1 + 144) = v26;
        goto LABEL_31;
      }
    }
  }
  v35 = 1283;
  v32 = "malformed AIX big archive: last member offset \"";
  *(_QWORD *)&v34 = v17;
  *((_QWORD *)&v34 + 1) = v19;
  v37[0] = &v32;
  v37[2] = "\" is not a number";
  v38 = 770;
  sub_1C5992A84((uint64_t *)&v28, (llvm::Twine *)v37);
  *a3 = v28;
LABEL_31:
  llvm::object::Archive::child_begin(a1, a3, 0, (uint64_t)&v32);
  if (!*a3)
  {
    llvm::object::Archive::child_end((uint64_t)&v28);
    if ((v36 > 7 || v31 >= 8) && (_QWORD)v34 != v30)
    {
      *(_OWORD *)(a1 + 80) = v34;
      *(_WORD *)(a1 + 96) = v35;
    }
    *a3 = 0;
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 16))(v29);
  }
  if (v33)
    (*(void (**)(uint64_t))(*(_QWORD *)v33 + 16))(v33);
  if (!*a3)
    *a3 = 0;
  return a1;
}

uint64_t llvm::NewArchiveMember::NewArchiveMember(uint64_t a1, _OWORD *a2)
{
  __int128 v4;
  _OWORD v6[2];

  v4 = a2[1];
  v6[0] = *a2;
  v6[1] = v4;
  llvm::MemoryBuffer::getMemBuffer((uint64_t *)v6, (char **)a1);
  *(_OWORD *)(a1 + 8) = a2[1];
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 420;
  return a1;
}

{
  __int128 v4;
  _OWORD v6[2];

  v4 = a2[1];
  v6[0] = *a2;
  v6[1] = v4;
  llvm::MemoryBuffer::getMemBuffer((uint64_t *)v6, (char **)a1);
  *(_OWORD *)(a1 + 8) = a2[1];
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 420;
  return a1;
}

void llvm::NewArchiveMember::getOldMember(llvm::object::AbstractArchiveMemberHeader **this@<X0>, const llvm::object::Archive::Child *a2@<X1>, uint64_t a3@<X8>)
{
  char v3;
  uint64_t v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  int v12;
  int v13;
  int v14;
  char *v15;
  _OWORD v16[2];
  char *v17;
  char v18;
  char *v19;
  char v20;
  char *v21;
  char v22;
  char *v23;
  char v24;
  _OWORD v25[2];
  char v26;
  uint64_t v27;

  v3 = (char)a2;
  v27 = *MEMORY[0x1E0C80C00];
  llvm::object::Archive::Child::getMemoryBufferRef((llvm::object::Archive::Child *)this, (uint64_t)v25);
  if ((v26 & 1) == 0)
  {
    v16[0] = v25[0];
    v16[1] = v25[1];
    llvm::MemoryBuffer::getMemBuffer((uint64_t *)v16, &v23);
    v7 = v23;
    v8 = (*(uint64_t (**)(char *))(*(_QWORD *)v23 + 16))(v23);
    v10 = v9;
    if ((v3 & 1) != 0)
    {
      v11 = 0;
      v12 = 0;
      v13 = 0;
      v14 = 420;
LABEL_6:
      *(_BYTE *)(a3 + 48) &= ~1u;
      *(_QWORD *)a3 = v7;
      *(_QWORD *)(a3 + 8) = v8;
      *(_QWORD *)(a3 + 16) = v10;
      *(_QWORD *)(a3 + 24) = v11;
      *(_DWORD *)(a3 + 32) = v12;
      *(_DWORD *)(a3 + 36) = v13;
      *(_DWORD *)(a3 + 40) = v14;
      return;
    }
    llvm::object::AbstractArchiveMemberHeader::getLastModified(this[1], (uint64_t)&v23);
    if ((v24 & 1) != 0)
    {
      v15 = v23;
    }
    else
    {
      v11 = v23;
      llvm::object::AbstractArchiveMemberHeader::getUID(this[1], (uint64_t)&v21);
      if ((v22 & 1) != 0)
      {
        v15 = v21;
      }
      else
      {
        v12 = (int)v21;
        llvm::object::AbstractArchiveMemberHeader::getGID(this[1], (uint64_t)&v19);
        if ((v20 & 1) != 0)
        {
          v15 = v19;
        }
        else
        {
          v13 = (int)v19;
          llvm::object::AbstractArchiveMemberHeader::getAccessMode(this[1], (uint64_t)&v17);
          if ((v18 & 1) == 0)
          {
            v14 = (int)v17;
            goto LABEL_6;
          }
          v15 = v17;
        }
      }
    }
    *(_BYTE *)(a3 + 48) |= 1u;
    *(_QWORD *)a3 = v15;
    (*(void (**)(char *))(*(_QWORD *)v7 + 8))(v7);
    return;
  }
  v6 = *(_QWORD *)&v25[0];
  *(_BYTE *)(a3 + 48) |= 1u;
  *(_QWORD *)a3 = v6;
}

uint64_t llvm::NewArchiveMember::getFile@<X0>(uint64_t a1@<X0>, __darwin_ino64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t result;
  llvm::sys::Process *v9;
  int v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const std::error_category *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  time_t __t[2];
  _BYTE v31[28];
  int v32;
  stat v33;
  _QWORD v34[2];
  char v35;
  uint64_t v36;
  char v37;
  uint64_t v38;

  v38 = *MEMORY[0x1E0C80C00];
  *(_OWORD *)__t = 0u;
  memset(v31, 0, sizeof(v31));
  v32 = 0xFFFF;
  LOWORD(v33.st_atimespec.tv_sec) = 261;
  *(_QWORD *)&v33.st_dev = a1;
  v33.st_ino = a2;
  result = (uint64_t)llvm::sys::fs::openNativeFileForRead((unsigned __int8 *)&v33, 0, 0, (uint64_t)&v36);
  if ((v37 & 1) != 0)
  {
    v14 = v36;
    *(_BYTE *)(a4 + 48) |= 1u;
    *(_QWORD *)a4 = v14;
    return result;
  }
  v9 = (llvm::sys::Process *)v36;
  v10 = fstat(v36, &v33);
  v12 = sub_1C5E7F828(v10, &v33.st_dev, (uint64_t)__t);
  if ((_DWORD)v12)
  {
    v13 = v11;
    result = operator new();
    *(_QWORD *)result = &off_1E81A0D28;
    *(_QWORD *)(result + 8) = v12;
    *(_QWORD *)(result + 16) = v13;
LABEL_13:
    *(_BYTE *)(a4 + 48) |= 1u;
    *(_QWORD *)a4 = result;
    return result;
  }
  if (*(_DWORD *)&v31[24] == 3)
  {
    v15 = std::generic_category();
    result = operator new();
    *(_QWORD *)result = &off_1E81A0D28;
    *(_QWORD *)(result + 8) = 21;
    *(_QWORD *)(result + 16) = v15;
    goto LABEL_13;
  }
  LOWORD(v33.st_atimespec.tv_sec) = 261;
  *(_QWORD *)&v33.st_dev = a1;
  v33.st_ino = a2;
  sub_1C5E1FFD0((int)v9, (uint64_t)&v33, *(size_t *)&v31[16], *(size_t *)&v31[16], 0, 0, 0, (uint64_t)v34);
  if ((v35 & 1) != 0)
  {
    v20 = v34[0];
    if (LODWORD(v34[0]))
    {
      v21 = v34[1];
      result = operator new();
      *(_QWORD *)result = &off_1E81A0D28;
      *(_QWORD *)(result + 8) = v20;
      *(_QWORD *)(result + 16) = v21;
    }
    else
    {
      result = 0;
    }
    goto LABEL_13;
  }
  v17 = llvm::sys::Process::SafelyCloseFileDescriptor(v9);
  if ((_DWORD)v17)
  {
    v18 = v16;
    v19 = (_QWORD *)operator new();
    *v19 = &off_1E81A0D28;
    v19[1] = v17;
    v19[2] = v18;
    *(_BYTE *)(a4 + 48) |= 1u;
    *(_QWORD *)a4 = v19;
    result = v34[0];
    if (v34[0])
      return (*(uint64_t (**)(_QWORD))(*(_QWORD *)v34[0] + 8))(v34[0]);
  }
  else
  {
    v22 = v34[0];
    result = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v34[0] + 16))(v34[0]);
    v23 = result;
    v25 = v24;
    if ((a3 & 1) != 0)
    {
      v26 = 0;
      v27 = 0;
      v28 = 420;
    }
    else
    {
      v29 = *(unsigned int *)&v31[4];
      result = std::chrono::system_clock::from_time_t(__t[1]).__d_.__rep_;
      v26 = (v29 + 1000 * result) / 1000000000;
      v27 = *(_QWORD *)&v31[8];
      v28 = v32;
    }
    *(_BYTE *)(a4 + 48) &= ~1u;
    *(_QWORD *)a4 = v22;
    *(_QWORD *)(a4 + 8) = v23;
    *(_QWORD *)(a4 + 16) = v25;
    *(_QWORD *)(a4 + 24) = v26;
    *(_QWORD *)(a4 + 32) = v27;
    *(_DWORD *)(a4 + 40) = v28;
  }
  return result;
}

void llvm::computeArchiveRelativePath(void *a1@<X0>, size_t a2@<X1>, void *a3@<X2>, size_t a4@<X3>, uint64_t a5@<X8>)
{
  void *v8;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  const void *v14;
  unsigned __int8 *v15;
  size_t v16;
  size_t v17;
  unsigned __int8 *v18;
  uint64_t v19;
  uint64_t v20;
  const std::error_category *v21;
  const std::error_category *v22;
  _QWORD *v23;
  void *v24;
  uint64_t v25;
  void *v27;
  uint64_t v28;
  uint64_t *v30;
  unint64_t v31;
  size_t v33;
  const void *v34;
  __int128 *p_dst;
  uint64_t v36;
  uint64_t v37;
  void **v38[4];
  __int16 v39;
  _QWORD *v40[4];
  __int16 v41;
  _QWORD *v42[4];
  __int16 v43;
  __int128 __dst;
  unint64_t v45;
  __int16 v46;
  __int128 v47;
  __int128 v48;
  __int128 v49;
  _OWORD v50[6];
  __int128 v51;
  __int128 v52;
  __int128 v53;
  __int128 v54;
  void *__s2[2];
  __int128 v56;
  _BYTE __len[32];
  __int128 v58;
  void *v59;
  __int128 v60;
  _BYTE v61[128];
  void *v62;
  unint64_t v63;
  uint64_t v64;
  char v65;
  uint64_t *v66;
  unint64_t v67;
  uint64_t v68;
  char v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  sub_1C59964F0((uint64_t)&v66, a3, a4);
  sub_1C59964F0((uint64_t)&v62, a1, a2);
  if ((v69 & 1) != 0 || (v65 & 1) != 0)
  {
    v20 = *__error();
    v21 = std::generic_category();
    if ((_DWORD)v20)
    {
      v22 = v21;
      v23 = (_QWORD *)operator new();
      *v23 = &off_1E81A0D28;
      v23[1] = v20;
      v23[2] = v22;
    }
    else
    {
      v23 = 0;
    }
    *(_BYTE *)(a5 + 24) |= 1u;
    *(_QWORD *)a5 = v23;
    goto LABEL_22;
  }
  v8 = v62;
  v9 = v63;
  v10 = sub_1C5E7BE8C((unsigned __int8 *)v62, v63, 0);
  v11 = 0;
  if (v9 >= v10)
    v12 = v10;
  else
    v12 = v9;
  if (v10 == -1)
    v13 = 0;
  else
    v13 = v12;
  if (v10 == -1)
    v14 = 0;
  else
    v14 = v8;
  v59 = v61;
  v60 = xmmword_1C85F20B0;
  if (v13 >= 0x81)
  {
    llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v59, v61, v13, 1);
    v11 = v60;
    goto LABEL_14;
  }
  if (v13)
  {
LABEL_14:
    memcpy((char *)v59 + v11, v14, v13);
    v11 = v60;
  }
  *(_QWORD *)&v60 = v11 + v13;
  v15 = llvm::sys::path::root_name((unint64_t)v66, v67, 0);
  v17 = v16;
  v18 = llvm::sys::path::root_name((unint64_t)v59, v60, 0);
  if (v17 == v19 && (!v17 || !memcmp(v15, v18, v17)))
  {
    llvm::sys::path::begin((unint64_t)v59, v60, 0, (uint64_t)v50);
    v24 = v59;
    v25 = v60;
    llvm::sys::path::begin((unint64_t)v66, v67, 0, (uint64_t)&v54);
    *(_OWORD *)&__len[16] = v50[1];
    v58 = v50[2];
    *(_OWORD *)__len = v50[0];
    if (*(void **)&v50[0] != v24 || (_QWORD)v58 != v25)
    {
      do
      {
        if (*(void **)&__len[24] != __s2[1]
          || *(_QWORD *)&__len[24] && memcmp(*(const void **)&__len[16], __s2[0], *(size_t *)&__len[24]))
        {
          break;
        }
        llvm::sys::path::const_iterator::operator++((uint64_t *)__len);
        llvm::sys::path::const_iterator::operator++((uint64_t *)&v54);
      }
      while (*(void **)__len != v24 || (_QWORD)v58 != v25);
    }
    v50[3] = *(_OWORD *)__len;
    v50[4] = *(_OWORD *)&__len[16];
    v50[5] = v58;
    v51 = v54;
    v52 = *(_OWORD *)__s2;
    v53 = v56;
    *(_OWORD *)__s2 = *(_OWORD *)&__len[16];
    v56 = v58;
    v54 = *(_OWORD *)__len;
    v47 = v51;
    v48 = v52;
    v49 = v53;
    *(_QWORD *)__len = &__len[24];
    *(_OWORD *)&__len[8] = xmmword_1C85F20B0;
    v27 = v59;
    v28 = v60;
    while ((void *)v54 != v27 || (_QWORD)v56 != v28)
    {
      *(_QWORD *)&__dst = "..";
      v46 = 259;
      v43 = 257;
      v41 = 257;
      v39 = 257;
      llvm::sys::path::append(__len, (const llvm::Twine *)1, (_QWORD **)&__dst, v42, v40, v38);
      llvm::sys::path::const_iterator::operator++((uint64_t *)&v54);
    }
    v30 = v66;
    v31 = v67;
    while ((uint64_t *)v47 != v30 || (_QWORD)v49 != v31)
    {
      v46 = 261;
      __dst = v48;
      v43 = 257;
      v41 = 257;
      v39 = 257;
      llvm::sys::path::append(__len, (const llvm::Twine *)1, (_QWORD **)&__dst, v42, v40, v38);
      llvm::sys::path::const_iterator::operator++((uint64_t *)&v47);
    }
    v33 = *(_QWORD *)&__len[8];
    if (*(_QWORD *)&__len[8] >= 0x7FFFFFFFFFFFFFF8uLL)
      abort();
    v34 = *(const void **)__len;
    if (*(_QWORD *)&__len[8] >= 0x17uLL)
    {
      v36 = (*(_QWORD *)&__len[8] & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((*(_QWORD *)&__len[8] | 7) != 0x17)
        v36 = *(_QWORD *)&__len[8] | 7;
      v37 = v36 + 1;
      p_dst = (__int128 *)operator new(v36 + 1);
      *((_QWORD *)&__dst + 1) = v33;
      v45 = v37 | 0x8000000000000000;
      *(_QWORD *)&__dst = p_dst;
    }
    else
    {
      HIBYTE(v45) = __len[8];
      p_dst = &__dst;
      if (!*(_QWORD *)&__len[8])
      {
LABEL_61:
        *((_BYTE *)p_dst + v33) = 0;
        *(_BYTE *)(a5 + 24) &= ~1u;
        *(_OWORD *)a5 = __dst;
        *(_QWORD *)(a5 + 16) = v45;
        if (*(_BYTE **)__len != &__len[24])
          free(*(void **)__len);
        goto LABEL_63;
      }
    }
    memmove(p_dst, v34, v33);
    goto LABEL_61;
  }
  llvm::sys::path::convert_to_slash(v66, v67, 0, (uint64_t)__len);
  *(_BYTE *)(a5 + 24) &= ~1u;
  *(_OWORD *)a5 = *(_OWORD *)__len;
  *(_QWORD *)(a5 + 16) = *(_QWORD *)&__len[16];
LABEL_63:
  if (v59 != v61)
    free(v59);
LABEL_22:
  if ((v65 & 1) == 0 && v62 != &v64)
    free(v62);
  if ((v69 & 1) == 0 && v66 != &v68)
    free(v66);
}

void sub_1C59964F0(uint64_t a1, void *__src, size_t __n)
{
  uint64_t v6;
  unint64_t absolute;
  uint64_t v8;
  void *v9;
  __int128 v10;
  _QWORD v11[17];

  v11[16] = *MEMORY[0x1E0C80C00];
  v9 = v11;
  v10 = xmmword_1C85F20B0;
  if (__n < 0x81)
  {
    v6 = 0;
    if (!__n)
      goto LABEL_4;
    goto LABEL_3;
  }
  llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)&v9, v11, __n, 1);
  v6 = v10;
  if (__n)
  {
LABEL_3:
    memcpy((char *)v9 + v6, __src, __n);
    v6 = v10;
  }
LABEL_4:
  *(_QWORD *)&v10 = v6 + __n;
  absolute = llvm::sys::fs::make_absolute((uint64_t)&v9);
  if ((_DWORD)absolute)
  {
    *(_BYTE *)(a1 + 152) |= 1u;
    *(_QWORD *)a1 = absolute;
    *(_QWORD *)(a1 + 8) = v8;
  }
  else
  {
    llvm::sys::path::remove_dots((unsigned __int8 **)&v9, 1, 0);
    *(_BYTE *)(a1 + 152) &= ~1u;
    *(_QWORD *)a1 = a1 + 24;
    *(_OWORD *)(a1 + 8) = xmmword_1C85F20B0;
    if ((_QWORD)v10)
      sub_1C4FE6ED8(a1, (uint64_t)&v9);
  }
  if (v9 != v11)
    free(v9);
}

void llvm::writeArchive(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, char *a4@<X3>, int a5@<W4>, uint64_t a6@<X5>, int a7@<W6>, int a8@<W7>, char **a9@<X8>, uint64_t *a10)
{
  char *v19;
  const llvm::Twine *v20;
  char *v21;
  uint64_t v22;
  uint64_t v23;
  _QWORD v24[4];
  __int16 v25;
  char *v26;
  char *v27;
  char *v28;
  _QWORD v29[4];
  __int16 v30;
  _QWORD v31[3];
  char v32;
  int v33;
  char v34;
  uint64_t v35;

  v35 = *MEMORY[0x1E0C80C00];
  v30 = 773;
  v29[0] = a1;
  v29[1] = a2;
  v29[2] = ".temp-archive-%%%%%%%.a";
  llvm::sys::fs::TempFile::create((uint64_t)v29, 438, 0, (uint64_t)v31);
  if ((v34 & 1) != 0)
  {
    v19 = (char *)v31[0];
    v31[0] = 0;
    *a9 = v19;
LABEL_12:
    v23 = v31[0];
    v31[0] = 0;
    if (v23)
      (*(void (**)(uint64_t))(*(_QWORD *)v23 + 8))(v23);
    return;
  }
  llvm::raw_fd_ostream::raw_fd_ostream((uint64_t)v29, v33, 0, 0, 0);
  sub_1C599682C(v24, (llvm::raw_ostream *)v29, a3, a4, a5, a6, a7, a8);
  v21 = (char *)v24[0];
  if (v24[0])
  {
    llvm::sys::fs::TempFile::discard((llvm::sys::fs::TempFile *)v31, &v28);
    if (v28)
    {
      v26 = v28;
      v27 = v21;
      v28 = 0;
      sub_1C624E8DC(&v27, &v26, a9);
      if (v26)
        (*(void (**)(char *))(*(_QWORD *)v26 + 8))(v26);
      if (v27)
        (*(void (**)(char *))(*(_QWORD *)v27 + 8))(v27);
      if (v28)
        (*(void (**)(char *))(*(_QWORD *)v28 + 8))(v28);
    }
    else
    {
      *a9 = v21;
    }
  }
  else
  {
    v22 = *a10;
    *a10 = 0;
    if (v22)
      (*(void (**)(uint64_t))(*(_QWORD *)v22 + 8))(v22);
    v25 = 261;
    v24[0] = a1;
    v24[1] = a2;
    llvm::sys::fs::TempFile::keep((llvm::sys::fs::TempFile *)v31, (const llvm::Twine *)v24, v20, a9);
  }
  llvm::raw_fd_ostream::~raw_fd_ostream((llvm::raw_fd_ostream *)v29);
  if ((v34 & 1) != 0)
    goto LABEL_12;
  if (v32 < 0)
    operator delete((void *)v31[1]);
}

void sub_1C599682C(_QWORD *a1, llvm::raw_ostream *a2, uint64_t a3, char *a4, int a5, uint64_t a6, int a7, int a8)
{
  uint64_t v8;
  char *v9;
  unsigned int *v10;
  int v11;
  uint64_t v12;
  uint64_t (**v14)(uint64_t);
  _OWORD *v15;
  _QWORD **v16;
  _QWORD *v17;
  _QWORD **v18;
  char *v19;
  void **v20;
  int v21;
  char *v22;
  unsigned __int8 *v23;
  unint64_t v24;
  uint64_t v25;
  const char *v26;
  unint64_t v27;
  unsigned int v28;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v29;
  void *v30;
  size_t v31;
  _BYTE *v32;
  char *v33;
  unint64_t v34;
  unsigned int v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int v38;
  uint64_t v39;
  unsigned int v40;
  unsigned int v41;
  unsigned int v42;
  unint64_t v43;
  uint64_t v44;
  void *v45;
  const void *v46;
  unint64_t v47;
  uint64_t v48;
  _WORD *v49;
  size_t v50;
  unsigned int v51;
  int v52;
  size_t v53;
  unsigned __int8 *v54;
  int v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  int v60;
  int v61;
  uint64_t v62;
  _QWORD *v63;
  uint64_t v64;
  uint64_t v65;
  _OWORD *v66;
  time_t v67;
  const void *v68;
  _QWORD *v69;
  size_t *v70;
  char *v71;
  unsigned int v72;
  BOOL v73;
  uint64_t v74;
  _WORD *v75;
  const void *v76;
  unint64_t v77;
  unint64_t v78;
  std::string::size_type v79;
  void *v80;
  uint64_t v81;
  unsigned int v82;
  llvm::Value *v83;
  char *v84;
  int v85;
  unsigned int v86;
  llvm::LLVMContextImpl **v87;
  char *v88;
  uint64_t v89;
  std::string::size_type v90;
  std::string::size_type v91;
  uint64_t v92;
  char *v93;
  char *v94;
  char *v95;
  uint64_t v96;
  char *v97;
  char *v98;
  char *v99;
  char *v100;
  unint64_t v101;
  char *v102;
  char *v103;
  uint64_t v104;
  char *v105;
  int v106;
  int v107;
  uint64_t v108;
  unint64_t v109;
  unint64_t v110;
  char *v111;
  char *v112;
  int v113;
  _BYTE *v114;
  llvm::Value *v115;
  char v116;
  char *v117;
  char v118;
  char *v119;
  int v120;
  unint64_t v121;
  char *v122;
  char *v123;
  void **v124;
  char *v125;
  __int128 v126;
  __int128 v127;
  __int128 v128;
  void **v129;
  void *v130;
  std::string::size_type v131;
  uint64_t v132;
  uint64_t v133;
  unint64_t v134;
  std::string *v135;
  std::string::size_type v136;
  std::string *v137;
  std::string::size_type v138;
  uint64_t v139;
  _QWORD *v140;
  _QWORD *v141;
  void *v142;
  _QWORD *v143;
  char *v144;
  void *v145;
  uint64_t v146;
  unint64_t v147;
  void *v148;
  int v149;
  int v150;
  int v151;
  int v152;
  int v153;
  char *v154;
  void **v155;
  uint64_t v156;
  std::string::size_type v157;
  char v158;
  _BOOL8 v159;
  const char *v160;
  char *v161;
  unint64_t v162;
  unint64_t v163;
  __int128 v164;
  __int128 v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  void **v170;
  __int128 v171;
  __int128 v172;
  void *v173;
  uint64_t v174;
  llvm::raw_ostream *v175;
  _QWORD *v176;
  unint64_t v177;
  std::string::size_type v178;
  const char *v179;
  size_t v180;
  uint64_t v181;
  _BYTE *v182;
  _QWORD *v183;
  uint64_t v184;
  char *v185;
  char *v186;
  __int128 v187;
  __int128 v188;
  void *v189;
  _QWORD *v190;
  uint64_t v191;
  uint64_t v192;
  char *v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  char *v198;
  char v199;
  uint64_t v200;
  uint64_t v201;
  size_t v202;
  int v203;
  int v204;
  unint64_t v205;
  std::string::size_type size;
  unint64_t v207;
  char *v208;
  char *v209;
  size_t v210;
  unint64_t v211;
  size_t v212;
  int v213;
  int v214;
  unsigned int v215;
  unint64_t v216;
  unint64_t v217;
  _BYTE *v218;
  _BYTE *v219;
  _BOOL4 v220;
  _BOOL4 v221;
  uint64_t v222;
  std::string::size_type v223;
  int v224;
  uint64_t *v225;
  unint64_t v226;
  const char *v227;
  llvm::raw_ostream *v228;
  uint64_t v229;
  unsigned int v230;
  uint64_t v231;
  _QWORD *v232;
  char *v233;
  char v234;
  uint64_t v235;
  uint64_t v236;
  int v237;
  uint64_t v238;
  uint64_t v239;
  unsigned int v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t v243;
  unint64_t v244;
  unsigned int v245;
  unint64_t v246;
  unsigned int **v247;
  unsigned int *v248;
  unsigned int *v249;
  unsigned int *v250;
  void *v251;
  int v252;
  int v253;
  llvm::raw_ostream *v255;
  char *v256;
  char v257;
  int v258;
  const char *v259;
  size_t v260;
  size_t v261;
  const void *v262;
  unint64_t v263;
  void *v264;
  const void *v265;
  unint64_t v266;
  const char *v267;
  const char *v268;
  uint64_t v269;
  char v270;
  int v272;
  unsigned __int8 *v273;
  unint64_t v274;
  _QWORD *v275;
  uint64_t v276;
  unsigned __int8 *__s1;
  unsigned int v279;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v280;
  unint64_t v281;
  unsigned int *v283;
  int v284;
  unsigned int v285;
  unsigned int v286;
  unsigned int v287;
  char *v288;
  char *v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  const char *v294;
  std::string::size_type v295;
  uint64_t v296;
  const void *__srca;
  int v299;
  char v300;
  char v301;
  unint64_t v302;
  _BOOL8 v303;
  size_t __n;
  size_t __na;
  size_t __nb;
  char **v307;
  const char *v308;
  const char *v309;
  char *v310;
  unint64_t v311;
  int v312;
  int v313;
  uint64_t (**v314)();
  int v315;
  uint64_t v316;
  uint64_t v317;
  void *__dst;
  char v319;
  uint64_t v320;
  int v321;
  void **v322;
  void *v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t (**v326)();
  int v327;
  uint64_t v328;
  unint64_t v329;
  _BYTE *v330;
  char v331;
  uint64_t v332;
  int v333;
  void **v334;
  void *v335;
  size_t v336;
  uint64_t v337;
  std::string v338;
  void *__p;
  __int128 v340;
  _QWORD **v341;
  _QWORD *v342[2];
  llvm::LLVMContextImpl *v343;
  uint64_t v344;
  uint64_t (**v345)(uint64_t);
  int v346;
  char *v347;
  unint64_t v348;
  char *v349;
  char v350;
  uint64_t v351;
  int v352;
  std::string *p_p;
  __int128 v354;
  std::string::size_type v355;
  _BYTE v356[24];
  std::string v357;
  uint64_t v358;
  __int16 v359;
  uint64_t v360;

  v8 = a6;
  v9 = a4;
  v10 = (unsigned int *)a3;
  v360 = *MEMORY[0x1E0C80C00];
  v336 = 0;
  v337 = 0;
  v335 = &v338;
  v327 = 0;
  v331 = 0;
  v332 = 0;
  v325 = 0;
  v326 = &off_1E81A7280;
  v334 = &v335;
  v333 = 0;
  v329 = 0;
  v330 = 0;
  v328 = 0;
  v323 = &v326;
  v324 = 0;
  v315 = 0;
  v319 = 0;
  v320 = 0;
  v314 = &off_1E81A7280;
  v322 = &v323;
  v321 = 0;
  v317 = 0;
  __dst = 0;
  v316 = 0;
  *(_QWORD *)v356 = 0;
  *(_QWORD *)&v356[8] = 0;
  *(_QWORD *)&v356[16] = 0x1000000000;
  v285 = a6 - 3;
  v270 = a7;
  if ((a6 - 3) < 2)
    v11 = a7;
  else
    v11 = 0;
  v342[1] = 0;
  v342[0] = 0;
  v341 = v342;
  v284 = v11;
  v279 = a6;
  if (v11 == 1)
  {
    if (!a4)
    {
LABEL_16:
      v19 = 0;
      v302 = 0;
      v275 = 0;
      v20 = 0;
      v21 = 1;
      goto LABEL_207;
    }
    v12 = 48 * (_QWORD)a4;
    v14 = (uint64_t (**)(uint64_t))(a3 + 8);
    do
    {
      v345 = v14;
      v15 = sub_1C62C71E8((uint64_t)&v341, (uint64_t)v14, (_OWORD **)&v345);
      ++*((_DWORD *)v15 + 12);
      v14 += 6;
      v12 -= 48;
    }
    while (v12);
    v16 = v341;
    v10 = (unsigned int *)a3;
    if (v341 != v342)
    {
      do
      {
        *((_DWORD *)v16 + 12) = *((_DWORD *)v16 + 12) > 1u;
        v17 = v16[1];
        if (v17)
        {
          do
          {
            v18 = (_QWORD **)v17;
            v17 = (_QWORD *)*v17;
          }
          while (v17);
        }
        else
        {
          do
          {
            v18 = (_QWORD **)v16[2];
            v73 = *v18 == v16;
            v16 = v18;
          }
          while (!v73);
        }
        v16 = v18;
      }
      while (v18 != v342);
    }
  }
  if (!v9)
    goto LABEL_16;
  v299 = 0;
  v22 = 0;
  v19 = 0;
  v20 = 0;
  v272 = 0;
  v283 = &v10[12 * (_QWORD)v9];
  do
  {
    v302 = (unint64_t)v22;
    __p = 0;
    v340 = 0uLL;
    v346 = 0;
    v350 = 0;
    v351 = 0;
    v345 = (uint64_t (**)(uint64_t))&unk_1E81A7208;
    p_p = (std::string *)&__p;
    v352 = 0;
    v348 = 0;
    v349 = 0;
    v347 = 0;
    v23 = *(unsigned __int8 **)(*(_QWORD *)v10 + 8);
    v24 = *(_QWORD *)(*(_QWORD *)v10 + 16) - (_QWORD)v23;
    v290 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)v10 + 16))(*(_QWORD *)v10);
    v291 = v25;
    if (a8)
      v26 = "";
    else
      v26 = (const char *)v23;
    if (a8)
      v27 = 0;
    else
      v27 = v24;
    v311 = v27;
    if (v285 >= 2)
      v28 = 0;
    else
      v28 = ((v27 + 7) & 0xFFFFFFF8) - v27;
    if (v284)
    {
      v357.__r_.__value_.__r.__words[0] = (std::string::size_type)(v10 + 2);
      v66 = sub_1C62C71E8((uint64_t)&v341, (uint64_t)(v10 + 2), &v357);
      v67 = *((unsigned int *)v66 + 12);
      *((_DWORD *)v66 + 12) = v67 + 1;
      v29 = std::chrono::system_clock::from_time_t(v67).__d_.__rep_ / 1000000;
    }
    else
    {
      v29 = *((_QWORD *)v10 + 3);
    }
    __n = (size_t)v10;
    v307 = (char **)v19;
    if (v28 + v24 >= 0x2540BE400)
    {
      v68 = (const void *)*((_QWORD *)v10 + 1);
      if (!v68)
      {
        memset(&v338, 0, sizeof(v338));
LABEL_190:
        v135 = std::string::insert(&v338, 0, "File ");
        v136 = v135->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v357.__r_.__value_.__l.__data_ = *(_OWORD *)&v135->__r_.__value_.__l.__data_;
        v357.__r_.__value_.__r.__words[2] = v136;
        v135->__r_.__value_.__l.__size_ = 0;
        v135->__r_.__value_.__r.__words[2] = 0;
        v135->__r_.__value_.__r.__words[0] = 0;
        v137 = std::string::append(&v357, " exceeds size limit");
        v138 = v137->__r_.__value_.__r.__words[2];
        v354 = *(_OWORD *)&v137->__r_.__value_.__l.__data_;
        v355 = v138;
        v137->__r_.__value_.__l.__size_ = 0;
        v137->__r_.__value_.__r.__words[2] = 0;
        v137->__r_.__value_.__r.__words[0] = 0;
        if (SHIBYTE(v357.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v357.__r_.__value_.__l.__data_);
        if (SHIBYTE(v338.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v338.__r_.__value_.__l.__data_);
        v139 = operator new();
        v359 = 260;
        v357.__r_.__value_.__r.__words[0] = (std::string::size_type)&v354;
        v275 = (_QWORD *)v139;
        llvm::object::GenericBinaryError::GenericBinaryError(v139, (llvm::Twine *)&v357, 3u);
        if (SHIBYTE(v355) < 0)
          operator delete((void *)v354);
        v116 = 0;
        v9 = v19;
        v100 = (char *)v302;
        goto LABEL_176;
      }
      v79 = *((_QWORD *)v10 + 2);
      if (v79 >= 0x7FFFFFFFFFFFFFF8)
        goto LABEL_335;
      if (v79 >= 0x17)
      {
        v132 = (v79 & 0xFFFFFFFFFFFFFFF8) + 8;
        if ((v79 | 7) != 0x17)
          v132 = v79 | 7;
        v133 = v132 + 1;
        v80 = operator new(v132 + 1);
        v134 = v133 | 0x8000000000000000;
        v10 = (unsigned int *)__n;
        v338.__r_.__value_.__l.__size_ = v79;
        v338.__r_.__value_.__r.__words[2] = v134;
        v338.__r_.__value_.__r.__words[0] = (std::string::size_type)v80;
      }
      else
      {
        *((_BYTE *)&v338.__r_.__value_.__s + 23) = *((_QWORD *)v10 + 2);
        v80 = &v338;
        if (!v79)
          goto LABEL_189;
      }
      memmove(v80, v68, v79);
LABEL_189:
      *((_BYTE *)v80 + v79) = 0;
      goto LABEL_190;
    }
    v294 = v26;
    *(_QWORD *)&v354 = v29;
    v30 = (void *)*((_QWORD *)v10 + 1);
    v31 = *((_QWORD *)v10 + 2);
    if (v8 >= 2)
    {
      sub_1C5998688((llvm::raw_ostream *)&v345, v299, v30, v31, (uint64_t *)&v354, v10[8], v10[9], v10[10], v28 + v24);
      goto LABEL_97;
    }
    v280 = v29;
    v281 = v28 + v24;
    if ((a8 & 1) != 0 || v31 > 0xF || v31 && (v32 = memchr(v30, 47, v31)) != 0 && v32 - (_BYTE *)v30 != -1)
    {
      v33 = v349;
      if ((unint64_t)v349 >= v348)
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)&v345, 47);
      }
      else
      {
        ++v349;
        *v33 = 47;
      }
      if (a8)
      {
        v43 = v24;
        v44 = ((uint64_t (*)(llvm::raw_svector_ostream *))v314[10])((llvm::raw_svector_ostream *)&v314);
        v45 = __dst;
        v46 = (const void *)*((_QWORD *)v10 + 1);
        v47 = *((_QWORD *)v10 + 2);
        v48 = v316;
        if (v47 <= v317 - (uint64_t)__dst)
        {
          if (v47)
          {
            memcpy(__dst, v46, *((_QWORD *)v10 + 2));
            v49 = (char *)__dst + v47;
            __dst = (char *)__dst + v47;
          }
          else
          {
            v49 = __dst;
          }
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v314, (const char *)v46, *((_QWORD *)v10 + 2));
          v49 = __dst;
        }
        v78 = (unint64_t)v45 + v44 - v48;
        v24 = v43;
        if ((unint64_t)(v317 - (_QWORD)v49) > 1)
        {
          *v49 = 2607;
          __dst = (char *)__dst + 2;
        }
        else
        {
          llvm::raw_ostream::write((llvm::raw_ostream *)&v314, "/\n", 2uLL);
        }
        goto LABEL_95;
      }
      v50 = *((_QWORD *)v10 + 2);
      __s1 = (unsigned __int8 *)*((_QWORD *)v10 + 1);
      v51 = *(_DWORD *)&v356[8];
      if (!*(_DWORD *)&v356[8])
      {
        *(_QWORD *)&v356[12] = 0;
        v140 = malloc_type_calloc(0x11uLL, 0xCuLL, 0x6D9A4F0CuLL);
        if (!v140)
          llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
        v140[16] = 2;
        *(_QWORD *)v356 = v140;
        v51 = 16;
        *(_DWORD *)&v356[8] = 16;
      }
      v286 = v28;
      v273 = v23;
      v274 = v24;
      v52 = 0;
      if (v50)
      {
        v53 = v50;
        v54 = __s1;
        do
        {
          v55 = *v54++;
          v52 = 33 * v52 + v55;
          --v53;
        }
        while (v53);
      }
      v56 = v51 - 1;
      v57 = *(_QWORD *)v356;
      v58 = *(_QWORD *)v356 + 8 * v51 + 8;
      v276 = *(unsigned int *)&v356[20];
      v59 = -1;
      v60 = 1;
      v61 = v52;
      while (1)
      {
        v62 = v61 & v56;
        v63 = *(_QWORD **)(v57 + 8 * v62);
        if (!v63)
          break;
        if (v63 == (_QWORD *)-8)
        {
          if (v59 == -1)
            v59 = v61 & v56;
        }
        else if (*(_DWORD *)(v58 + 4 * v62) == v52 && v50 == *v63 && (!v50 || !memcmp(__s1, (char *)v63 + v276, v50)))
        {
          goto LABEL_63;
        }
        v61 = v60 + v62;
        ++v60;
      }
      v64 = v59;
      if (v59 == -1)
      {
        v64 = v62;
        v62 = v62;
      }
      else
      {
        v62 = v59;
      }
      *(_DWORD *)(v58 + 4 * v64) = v52;
      v63 = *(_QWORD **)(v57 + 8 * v62);
LABEL_63:
      v65 = v57 + 8 * v62;
      if (v63 == (_QWORD *)-8)
      {
        --*(_DWORD *)&v356[16];
        v23 = v273;
      }
      else
      {
        v23 = v273;
        if (v63)
        {
          v8 = v279;
          v24 = v274;
          v10 = (unsigned int *)__n;
LABEL_87:
          v78 = *(_QWORD *)(*(_QWORD *)v65 + 8);
          v28 = v286;
LABEL_95:
          sub_1C59987AC((llvm::raw_ostream *)&v345, v78, 15);
          v40 = v10[8];
          v41 = v10[9];
          v42 = v10[10];
          v39 = v280;
          goto LABEL_96;
        }
      }
      v69 = operator new(v50 + 17, (std::align_val_t)8uLL);
      v70 = v69;
      v71 = (char *)(v69 + 2);
      if (v50)
        memcpy(v69 + 2, __s1, v50);
      v71[v50] = 0;
      *v70 = v50;
      v70[1] = 0;
      *(_QWORD *)v65 = v70;
      ++*(_DWORD *)&v356[12];
      v72 = llvm::StringMapImpl::RehashTable((llvm::StringMapImpl *)v356, v62);
      v65 = *(_QWORD *)v356 + 8 * v72;
      v8 = v279;
      v10 = (unsigned int *)__n;
      v24 = v274;
      while (1)
      {
        v73 = !*(_QWORD *)v65 || *(_QWORD *)v65 == -8;
        if (!v73)
          break;
        v65 += 8;
      }
      v74 = ((uint64_t (*)(llvm::raw_svector_ostream *))v314[10])((llvm::raw_svector_ostream *)&v314);
      v75 = __dst;
      *(_QWORD *)(*(_QWORD *)v65 + 8) = (char *)__dst + v74 - v316;
      v76 = *(const void **)(__n + 8);
      v77 = *(_QWORD *)(__n + 16);
      if (v77 <= v317 - (uint64_t)v75)
      {
        if (v77)
        {
          memcpy(v75, v76, *(_QWORD *)(__n + 16));
          v75 = (char *)__dst + v77;
          __dst = (char *)__dst + v77;
        }
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)&v314, (const char *)v76, *(_QWORD *)(__n + 16));
        v75 = __dst;
      }
      if ((unint64_t)(v317 - (_QWORD)v75) > 1)
      {
        *v75 = 2607;
        __dst = (char *)__dst + 2;
      }
      else
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)&v314, "/\n", 2uLL);
      }
      goto LABEL_87;
    }
    v34 = v24;
    v35 = v10[8];
    v36 = v10[9];
    v37 = v28;
    v38 = v10[10];
    v357.__r_.__value_.__r.__words[0] = (std::string::size_type)v30;
    v357.__r_.__value_.__l.__size_ = v31;
    v357.__r_.__value_.__r.__words[2] = (std::string::size_type)"/";
    v359 = 773;
    sub_1C5998A3C((llvm::raw_ostream *)&v345, (uint64_t)&v357);
    v39 = v280;
    v40 = v35;
    v8 = v279;
    v41 = v36;
    v24 = v34;
    v42 = v38;
    v28 = v37;
LABEL_96:
    sub_1C5998844((llvm::raw_ostream *)&v345, v39, v40, v41, v42, v281);
LABEL_97:
    v81 = v349 - v347;
    if (v349 != v347)
    {
      v349 = v347;
      llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)&v345, v347, v81);
    }
    if (a5)
    {
      v287 = v28;
      llvm::LLVMContext::LLVMContext((llvm::LLVMContext *)&v343);
      v82 = llvm::identify_magic(v23, v24);
      if (v82 - 3 < 0x14)
        goto LABEL_103;
      v84 = 0;
      v85 = 0;
      if (v82 > 0x25)
      {
        v102 = 0;
        v88 = 0;
        goto LABEL_109;
      }
      if (((1 << v82) & 0x23B8000000) != 0)
      {
LABEL_103:
        v357.__r_.__value_.__r.__words[2] = v290;
        v358 = v291;
        v357.__r_.__value_.__r.__words[0] = (std::string::size_type)v23;
        v357.__r_.__value_.__l.__size_ = v24;
        v85 = 1;
        v86 = 0;
        v87 = 0;
      }
      else
      {
        v131 = (std::string::size_type)v23;
        v102 = 0;
        v88 = 0;
        if (v82 != 1)
          goto LABEL_109;
        v357.__r_.__value_.__r.__words[0] = v131;
        v357.__r_.__value_.__l.__size_ = v24;
        v357.__r_.__value_.__r.__words[2] = v290;
        v358 = v291;
        v85 = 1;
        v87 = &v343;
        v86 = 1;
      }
      llvm::object::SymbolicFile::createSymbolicFile((uint64_t)&v357, v86, (uint64_t)v87, (uint64_t)&v354);
      v88 = (char *)v354;
      if ((BYTE8(v354) & 1) == 0)
      {
        v89 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)v354 + 48))(v354);
        v91 = v90;
        v92 = (*(uint64_t (**)(char *))(*(_QWORD *)v88 + 56))(v88);
        v338.__r_.__value_.__r.__words[0] = v89;
        v338.__r_.__value_.__l.__size_ = v91;
        if (v89 != v92)
        {
          v104 = v92;
          v95 = 0;
          v105 = 0;
          v93 = 0;
          while (1)
          {
            (*(void (**)(__int128 *__return_ptr, std::string::size_type, uint64_t))(*(_QWORD *)v338.__r_.__value_.__l.__size_
                                                                                            + 40))(&v354, v338.__r_.__value_.__l.__size_, v89);
            if ((BYTE8(v354) & 1) != 0)
            {
              v222 = v354;
              *(_QWORD *)&v354 = 0;
              v344 = v222;
              llvm::report_fatal_error(&v344);
            }
            if ((v354 & 0x83) == 2)
            {
              v106 = ((uint64_t (*)(uint64_t (***)()))v326[10])(&v326);
              v107 = v106 + (_DWORD)v330 - v328;
              if (v105 >= v95)
              {
                v108 = (v105 - v93) >> 2;
                v109 = v108 + 1;
                if ((unint64_t)(v108 + 1) >> 62)
                  goto LABEL_335;
                if ((v95 - v93) >> 1 > v109)
                  v109 = (v95 - v93) >> 1;
                if ((unint64_t)(v95 - v93) >= 0x7FFFFFFFFFFFFFFCLL)
                  v110 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v110 = v109;
                if (v110)
                {
                  if (v110 >> 62)
                    goto LABEL_336;
                  v111 = (char *)operator new(4 * v110);
                }
                else
                {
                  v111 = 0;
                }
                v112 = &v111[4 * v108];
                *(_DWORD *)v112 = v107;
                v94 = v112 + 4;
                while (v105 != v93)
                {
                  v113 = *((_DWORD *)v105 - 1);
                  v105 -= 4;
                  *((_DWORD *)v112 - 1) = v113;
                  v112 -= 4;
                }
                v95 = &v111[4 * v110];
                if (v93)
                  operator delete(v93);
                v93 = v112;
              }
              else
              {
                *(_DWORD *)v105 = v107;
                v94 = v105 + 4;
              }
              (*(void (**)(__int128 *__return_ptr, std::string::size_type, uint64_t (***)(), std::string::size_type))(*(_QWORD *)v338.__r_.__value_.__l.__size_ + 32))(&v354, v338.__r_.__value_.__l.__size_, &v326, v338.__r_.__value_.__r.__words[0]);
              v103 = (char *)v354;
              if ((_QWORD)v354)
              {
                v85 = 1;
                goto LABEL_138;
              }
              v114 = v330;
              if ((unint64_t)v330 >= v329)
              {
                llvm::raw_ostream::write((llvm::raw_ostream *)&v326, 0);
              }
              else
              {
                ++v330;
                *v114 = 0;
              }
            }
            else
            {
              v94 = v105;
            }
            (*(void (**)(std::string::size_type, std::string *))(*(_QWORD *)v338.__r_.__value_.__l.__size_
                                                                          + 24))(v338.__r_.__value_.__l.__size_, &v338);
            v89 = v338.__r_.__value_.__r.__words[0];
            v105 = v94;
            if (v338.__r_.__value_.__r.__words[0] == v104)
              goto LABEL_137;
          }
        }
        v93 = 0;
        v94 = 0;
        v95 = 0;
LABEL_137:
        v85 = 0;
        v103 = v93;
        v288 = v95;
        v289 = v94;
        v93 = 0;
LABEL_138:
        (*(void (**)(char *))(*(_QWORD *)v88 + 8))(v88);
        llvm::LLVMContext::~LLVMContext(&v343, v115);
        v8 = v279;
        if (v93)
          operator delete(v93);
        v272 = 1;
        v97 = v288;
        v98 = v289;
        goto LABEL_141;
      }
      v84 = v288;
      v102 = v289;
LABEL_109:
      llvm::LLVMContext::~LLVMContext(&v343, v83);
      v97 = v84;
      v98 = v102;
      v103 = v88;
LABEL_141:
      if (v85)
        v99 = 0;
      else
        v99 = v103;
      v100 = (char *)v302;
      v101 = v311;
      if (v85 && v103)
      {
        v288 = v97;
        v289 = v98;
        if (v99)
          (*(void (**)(char *))(*(_QWORD *)v99 + 8))(v99);
        v116 = 0;
        v275 = v103;
        v10 = (unsigned int *)__n;
        v19 = (char *)v307;
        v9 = (char *)v307;
        goto LABEL_176;
      }
      v96 = v8;
      v288 = 0;
      v289 = 0;
      v28 = v287;
      goto LABEL_150;
    }
    v96 = v8;
    v97 = 0;
    v98 = 0;
    v99 = 0;
    v100 = (char *)v302;
    v101 = v311;
LABEL_150:
    v117 = (char *)(((v28 + (_DWORD)v101 + 1) & 0xFFFFFFFE) - v101);
    v118 = HIBYTE(v340);
    v119 = (char *)__p;
    if (v340 >= 0)
      v120 = HIBYTE(v340) & 0x7F;
    else
      v120 = v340;
    v357.__r_.__value_.__r.__words[0] = v340;
    *(std::string::size_type *)((char *)v357.__r_.__value_.__r.__words + 7) = *(_QWORD *)((char *)&v340 + 7);
    v340 = 0uLL;
    __p = 0;
    if (v307 >= (char **)v100)
    {
      v121 = 0xCCCCCCCCCCCCCCCDLL * (((char *)v307 - (char *)v20) >> 4) + 1;
      if (v121 > 0x333333333333333)
        goto LABEL_335;
      if (0x999999999999999ALL * ((v100 - (char *)v20) >> 4) > v121)
        v121 = 0x999999999999999ALL * ((v100 - (char *)v20) >> 4);
      if (0xCCCCCCCCCCCCCCCDLL * ((v100 - (char *)v20) >> 4) >= 0x199999999999999)
        v121 = 0x333333333333333;
      if (v121 > 0x333333333333333)
        goto LABEL_336;
      v292 = 5 * v121;
      v122 = (char *)operator new(80 * v121);
      v123 = &v122[16 * (((char *)v307 - (char *)v20) >> 4)];
      *(_QWORD *)v123 = v99;
      *((_QWORD *)v123 + 1) = v98;
      *((_QWORD *)v123 + 2) = v97;
      *((_QWORD *)v123 + 3) = v119;
      *((_QWORD *)v123 + 4) = v357.__r_.__value_.__r.__words[0];
      *(_QWORD *)(v123 + 39) = *(std::string::size_type *)((char *)v357.__r_.__value_.__r.__words + 7);
      v123[47] = v118;
      v357.__r_.__value_.__r.__words[0] = 0;
      *(std::string::size_type *)((char *)v357.__r_.__value_.__r.__words + 7) = 0;
      v19 = (char *)v307;
      LODWORD(v101) = v311;
      *((_QWORD *)v123 + 6) = v294;
      *((_QWORD *)v123 + 7) = v311;
      *((_QWORD *)v123 + 8) = asc_1EF8EC789;
      *((_QWORD *)v123 + 9) = v117;
      if (v307 == (char **)v20)
      {
        v125 = &v122[16 * (((char *)v307 - (char *)v20) >> 4)];
        v10 = (unsigned int *)__n;
      }
      else
      {
        v124 = (void **)v307;
        v125 = &v122[16 * (((char *)v307 - (char *)v20) >> 4)];
        v10 = (unsigned int *)__n;
        do
        {
          *((_QWORD *)v125 - 10) = 0;
          *((_QWORD *)v125 - 9) = 0;
          v125 -= 80;
          *((_QWORD *)v125 + 2) = 0;
          v126 = *((_OWORD *)v124 - 5);
          v124 -= 10;
          *(_OWORD *)v125 = v126;
          *((_QWORD *)v125 + 2) = v124[2];
          *v124 = 0;
          v124[1] = 0;
          v124[2] = 0;
          v127 = *(_OWORD *)(v124 + 3);
          *((_QWORD *)v125 + 5) = v124[5];
          *(_OWORD *)(v125 + 24) = v127;
          v124[4] = 0;
          v124[5] = 0;
          v124[3] = 0;
          v128 = *((_OWORD *)v124 + 4);
          *((_OWORD *)v125 + 3) = *((_OWORD *)v124 + 3);
          *((_OWORD *)v125 + 4) = v128;
        }
        while (v124 != v20);
        v129 = (void **)v307;
        do
        {
          if (*((char *)v129 - 33) < 0)
            operator delete(*(v129 - 7));
          v130 = *(v129 - 10);
          if (v130)
          {
            *(v129 - 9) = v130;
            operator delete(v130);
          }
          v129 -= 10;
        }
        while (v129 != v20);
        LODWORD(v101) = v311;
      }
      v100 = &v122[16 * v292];
      v9 = v123 + 80;
      if (v20)
      {
        operator delete(v20);
        LODWORD(v101) = v311;
      }
      v20 = (void **)v125;
      v96 = v279;
    }
    else
    {
      *v307 = v99;
      v307[1] = v98;
      v307[2] = v97;
      v307[3] = v119;
      v307[4] = (char *)v357.__r_.__value_.__r.__words[0];
      *(char **)((char *)v307 + 39) = *(char **)((char *)v357.__r_.__value_.__r.__words + 7);
      *((_BYTE *)v307 + 47) = v118;
      v307[6] = (char *)v294;
      v307[7] = (char *)v101;
      v9 = (char *)(v307 + 10);
      v307[8] = asc_1EF8EC789;
      v307[9] = v117;
      v19 = (char *)v307;
      v10 = (unsigned int *)__n;
    }
    v299 += v101 + (_DWORD)v117 + v120;
    v116 = 1;
    v8 = v96;
LABEL_176:
    v345 = (uint64_t (**)(uint64_t))off_1E81A6E70;
    if (v352 == 1 && v347)
      MEMORY[0x1CAA32F9C](v347, 0x1000C8077774924);
    if (SHIBYTE(v340) < 0)
      operator delete(__p);
    if ((v116 & 1) == 0)
    {
      v21 = 0;
      goto LABEL_207;
    }
    v10 += 12;
    v22 = v100;
    v19 = v9;
  }
  while (v10 != v283);
  if (v272)
  {
    v181 = ((uint64_t (*)(uint64_t (***)()))v326[10])(&v326);
    v182 = v330;
    v141 = a1;
    if (v181 == v328 - (_QWORD)v330)
    {
      if ((unint64_t)v330 >= v329)
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)&v326, 0);
      }
      else
      {
        ++v330;
        *v182 = 0;
      }
      v218 = v330;
      if ((unint64_t)v330 >= v329)
      {
        llvm::raw_ostream::write((llvm::raw_ostream *)&v326, 0);
      }
      else
      {
        ++v330;
        *v218 = 0;
      }
      v219 = v330;
      if ((unint64_t)v330 < v329)
      {
        ++v330;
        v21 = 1;
        v19 = v9;
        *v219 = 0;
LABEL_330:
        v302 = (unint64_t)v100;
        v275 = v20;
        v20 = 0;
        v9 = 0;
        goto LABEL_208;
      }
      llvm::raw_ostream::write((llvm::raw_ostream *)&v326, 0);
    }
    v21 = 1;
    v19 = v9;
    goto LABEL_330;
  }
  v21 = 1;
  v19 = v9;
  v302 = (unint64_t)v100;
  v275 = v20;
  v20 = 0;
  v9 = 0;
LABEL_207:
  v141 = a1;
LABEL_208:
  sub_1C6143384(v342[0]);
  sub_1C61A8A20((uint64_t)v356);
  if (v20)
  {
    while (v9 != (char *)v20)
    {
      if (*(v9 - 33) < 0)
        operator delete(*((void **)v9 - 7));
      v142 = (void *)*((_QWORD *)v9 - 10);
      if (v142)
      {
        *((_QWORD *)v9 - 9) = v142;
        operator delete(v142);
      }
      v9 -= 80;
    }
    operator delete(v20);
  }
  v143 = v275;
  if (v21)
    v144 = (char *)v275;
  else
    v144 = 0;
  if (v21)
    v143 = 0;
  *v141 = v143;
  if (v143)
  {
    if (!v21)
      goto LABEL_418;
    goto LABEL_223;
  }
  v146 = v324;
  if (v324)
  {
    v147 = (unint64_t)v19;
    v148 = v323;
    v149 = ((v324 + 1) & 0xFFFFFFFE) - v324;
    memset(&v357, 0, sizeof(v357));
    v346 = 0;
    v350 = 0;
    v351 = 0;
    v345 = (uint64_t (**)(uint64_t))&unk_1E81A7208;
    p_p = &v357;
    v352 = 0;
    v349 = 0;
    v347 = 0;
    v348 = 0;
    v150 = sub_1C5E71D20((uint64_t)&v345);
    v151 = (int)v349;
    v152 = (int)v347;
    if (v348 - (unint64_t)v349 > 1)
    {
      *(_WORD *)v349 = 12079;
      v349 += 2;
    }
    else
    {
      llvm::raw_ostream::write((llvm::raw_ostream *)&v345, "//", 2uLL);
    }
    v153 = v345[10]((uint64_t)&v345);
    llvm::raw_ostream::indent((llvm::raw_ostream *)&v345, v150 + v151 - (v152 + (_DWORD)v349) - v153 + (_DWORD)v347 + 48);
    sub_1C5998AD8((llvm::raw_ostream *)&v345, v149 + v146, 10);
    if (v348 - (unint64_t)v349 > 1)
    {
      *(_WORD *)v349 = 2656;
      v154 = v349 + 2;
      v349 += 2;
    }
    else
    {
      v154 = v349;
    }
    v155 = (void **)v19;
    v156 = v154 - v347;
    if (v154 != v347)
    {
      v349 = v347;
      llvm::raw_ostream::flush_tied_then_write((llvm::raw_ostream *)&v345, v347, v156);
    }
    *(_QWORD *)v356 = v357.__r_.__value_.__l.__size_;
    v157 = v357.__r_.__value_.__r.__words[0];
    *(_QWORD *)&v356[7] = *(std::string::size_type *)((char *)&v357.__r_.__value_.__r.__words[1] + 7);
    v158 = HIBYTE(v357.__r_.__value_.__r.__words[2]);
    memset(&v357, 0, sizeof(v357));
    v159 = v149 != 0;
    if (v149)
      v160 = "\n";
    else
      v160 = "";
    v345 = (uint64_t (**)(uint64_t))off_1E81A6E70;
    if (v352 == 1 && v347)
    {
      v309 = v160;
      v223 = v157;
      MEMORY[0x1CAA32F9C](v347, 0x1000C8077774924, v156);
      v157 = v223;
      v160 = v309;
      LODWORD(v8) = v279;
      if (SHIBYTE(v357.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(v357.__r_.__value_.__l.__data_);
        v157 = v223;
        v160 = v309;
      }
    }
    else
    {
      LODWORD(v8) = v279;
    }
    if (v147 < v302)
    {
      if (v144 == (char *)v147)
      {
        *(_QWORD *)v147 = 0;
        *(_QWORD *)(v147 + 8) = 0;
        *(_QWORD *)(v147 + 16) = 0;
        *(_QWORD *)(v147 + 24) = v157;
        *(_QWORD *)(v147 + 32) = *(_QWORD *)v356;
        *(_QWORD *)(v147 + 39) = *(_QWORD *)&v356[7];
        *(_BYTE *)(v147 + 47) = v158;
        *(_QWORD *)(v147 + 48) = v148;
        *(_QWORD *)(v147 + 56) = v146;
        v19 = (char *)(v147 + 80);
        v176 = (_QWORD *)v147;
        *(_QWORD *)(v147 + 64) = v160;
        *(_QWORD *)(v147 + 72) = v159;
        v175 = a2;
      }
      else
      {
        v300 = v158;
        v312 = v21;
        v161 = v144 + 80;
        v162 = v147 - 80;
        v19 = (char *)v147;
        if (v147 >= 0x50)
        {
          v163 = v147 - 80;
          v19 = (char *)v147;
          do
          {
            *(_QWORD *)v19 = 0;
            *((_QWORD *)v19 + 1) = 0;
            *((_QWORD *)v19 + 2) = 0;
            *(_OWORD *)v19 = *(_OWORD *)v163;
            *((_QWORD *)v19 + 2) = *(_QWORD *)(v163 + 16);
            *(_QWORD *)v163 = 0;
            *(_QWORD *)(v163 + 8) = 0;
            *(_QWORD *)(v163 + 16) = 0;
            v164 = *(_OWORD *)(v163 + 24);
            *((_QWORD *)v19 + 5) = *(_QWORD *)(v163 + 40);
            *(_OWORD *)(v19 + 24) = v164;
            *(_QWORD *)(v163 + 32) = 0;
            *(_QWORD *)(v163 + 40) = 0;
            *(_QWORD *)(v163 + 24) = 0;
            v165 = *(_OWORD *)(v163 + 64);
            *((_OWORD *)v19 + 3) = *(_OWORD *)(v163 + 48);
            *((_OWORD *)v19 + 4) = v165;
            v19 += 80;
            v163 += 80;
          }
          while (v163 < v147);
        }
        v295 = v157;
        __na = (size_t)v148;
        v308 = v160;
        v303 = v159;
        if ((char *)v147 != v161)
        {
          v166 = 0;
          v167 = -16 * ((uint64_t)(v147 - (_QWORD)v161) >> 4);
          do
          {
            v168 = v162 + v166;
            v169 = v147 + v166;
            sub_1C6184574(v147 + v166 - 80, (__n128 *)(v162 + v166 - 80));
            v170 = (void **)(v147 + v166 - 56);
            if (*(char *)(v147 + v166 - 33) < 0)
              operator delete(*v170);
            v171 = *(_OWORD *)(v168 - 56);
            *(_QWORD *)(v169 - 40) = *(_QWORD *)(v168 - 40);
            *(_OWORD *)v170 = v171;
            *(_BYTE *)(v168 - 33) = 0;
            *(_BYTE *)(v168 - 56) = 0;
            v172 = *(_OWORD *)(v168 - 16);
            *(_OWORD *)(v169 - 32) = *(_OWORD *)(v168 - 32);
            *(_OWORD *)(v169 - 16) = v172;
            v166 -= 80;
          }
          while (v167 != v166);
        }
        v173 = *(void **)v144;
        if (*(_QWORD *)v144)
        {
          *((_QWORD *)v144 + 1) = v173;
          operator delete(v173);
        }
        *(_QWORD *)v144 = 0;
        *((_QWORD *)v144 + 1) = 0;
        *((_QWORD *)v144 + 2) = 0;
        LODWORD(v8) = v279;
        v21 = v312;
        if (v144[47] < 0)
          operator delete(*((void **)v144 + 3));
        v174 = *(_QWORD *)v356;
        *((_QWORD *)v144 + 3) = v295;
        *((_QWORD *)v144 + 4) = v174;
        *(_QWORD *)(v144 + 39) = *(_QWORD *)&v356[7];
        v144[47] = v300;
        *((_QWORD *)v144 + 6) = __na;
        *((_QWORD *)v144 + 7) = v146;
        *((_QWORD *)v144 + 8) = v308;
        *((_QWORD *)v144 + 9) = v303;
        v175 = a2;
        v176 = v275;
      }
      goto LABEL_283;
    }
    v177 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v147 - (_QWORD)v144) >> 4) + 1;
    if (v177 > 0x333333333333333)
LABEL_335:
      abort();
    if (0x999999999999999ALL * ((uint64_t)(v302 - (_QWORD)v144) >> 4) > v177)
      v177 = 0x999999999999999ALL * ((uint64_t)(v302 - (_QWORD)v144) >> 4);
    if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v302 - (_QWORD)v144) >> 4) >= 0x199999999999999)
      v177 = 0x333333333333333;
    if (v177)
    {
      if (v177 > 0x333333333333333)
LABEL_336:
        sub_1C4764EE4();
      v178 = v157;
      v179 = v160;
      v180 = 80 * v177;
    }
    else
    {
      v178 = v157;
      v179 = v160;
      v180 = 80;
    }
    v176 = operator new(v180);
    *v176 = 0;
    v176[1] = 0;
    v176[2] = 0;
    v176[3] = v178;
    v176[4] = *(_QWORD *)v356;
    *(_QWORD *)((char *)v176 + 39) = *(_QWORD *)&v356[7];
    *((_BYTE *)v176 + 47) = v158;
    *(_QWORD *)v356 = 0;
    *(_QWORD *)&v356[7] = 0;
    v176[6] = v148;
    v176[7] = v146;
    v19 = (char *)(v176 + 10);
    v176[8] = v179;
    v176[9] = v159;
    if (v144 == (char *)v155)
    {
      v175 = a2;
      if (!v144)
        goto LABEL_283;
LABEL_282:
      v190 = v176;
      operator delete(v144);
      v176 = v190;
      goto LABEL_283;
    }
    v183 = v176;
    v184 = 0;
    do
    {
      v185 = &v19[v184];
      v186 = &v144[v184];
      *(_QWORD *)v185 = 0;
      *((_QWORD *)v185 + 1) = 0;
      *((_QWORD *)v185 + 2) = 0;
      *(_QWORD *)v185 = *(_QWORD *)&v144[v184];
      *((_QWORD *)v185 + 1) = *(_QWORD *)&v144[v184 + 8];
      *((_QWORD *)v185 + 2) = *(_QWORD *)&v144[v184 + 16];
      *(_QWORD *)v186 = 0;
      *((_QWORD *)v186 + 1) = 0;
      *((_QWORD *)v186 + 2) = 0;
      v187 = *(_OWORD *)&v144[v184 + 24];
      *((_QWORD *)v185 + 5) = *(_QWORD *)&v144[v184 + 40];
      *(_OWORD *)(v185 + 24) = v187;
      *((_QWORD *)v186 + 4) = 0;
      *((_QWORD *)v186 + 5) = 0;
      *((_QWORD *)v186 + 3) = 0;
      v188 = *(_OWORD *)&v144[v184 + 64];
      *((_OWORD *)v185 + 3) = *(_OWORD *)&v144[v184 + 48];
      *((_OWORD *)v185 + 4) = v188;
      v184 += 80;
    }
    while (v186 + 80 != (char *)v155);
    v19 += v184;
    v175 = a2;
    do
    {
      if (*((char *)v155 - 33) < 0)
        operator delete(*(v155 - 7));
      v189 = *(v155 - 10);
      if (v189)
      {
        *(v155 - 9) = v189;
        operator delete(v189);
      }
      v155 -= 10;
    }
    while (v155 != (void **)v144);
    v176 = v183;
    if (v144)
      goto LABEL_282;
LABEL_283:
    v144 = (char *)v176;
  }
  else
  {
    v175 = a2;
  }
  if (!a5)
    goto LABEL_355;
  if (v144 == v19)
  {
    v191 = 0;
    v195 = 8;
  }
  else
  {
    v191 = 0;
    v192 = 8;
    v193 = v144;
    do
    {
      if (v193[47] < 0)
        v194 = *((_QWORD *)v193 + 4);
      else
        v194 = v193[47];
      v195 = v192;
      v192 += v194 + *((_QWORD *)v193 + 9) + *((_QWORD *)v193 + 7);
      v197 = *(_QWORD *)v193;
      v196 = *((_QWORD *)v193 + 1);
      v193 += 80;
      v191 += (v196 - v197) >> 2;
    }
    while (v193 != v19);
  }
  v198 = v19;
  v199 = 2;
  if (v8 > 1)
    v199 = 3;
  v200 = v191 << v199;
  v201 = 4;
  if (v8 > 1)
    v201 = 8;
  *(_OWORD *)&v357.__r_.__value_.__r.__words[1] = 0uLL;
  v202 = v200 + v201 + v336;
  if (v8 <= 1)
    v203 = -2;
  else
    v203 = -8;
  v357.__r_.__value_.__r.__words[0] = (std::string::size_type)&v358;
  v345 = (uint64_t (**)(uint64_t))&off_1E81A7280;
  v204 = v202 + 7;
  v346 = 0;
  v350 = 0;
  if (v8 <= 1)
    v204 = v202 + 1;
  v351 = 0;
  p_p = &v357;
  v352 = 0;
  v205 = (v204 & v203) - v202 + v202;
  v349 = 0;
  v347 = 0;
  v348 = 0;
  sub_1C5998B70((llvm::raw_ostream *)&v345, v8, v270, v205);
  size = v357.__r_.__value_.__l.__size_;
  v345 = (uint64_t (**)(uint64_t))off_1E81A6E70;
  if (v352 == 1 && v347)
    MEMORY[0x1CAA32F9C](v347, 0x1000C8077774924);
  if ((uint64_t *)v357.__r_.__value_.__l.__data_ != &v358)
    free(v357.__r_.__value_.__l.__data_);
  v207 = v205 + v195 + size;
  v208 = getenv("SYM64_THRESHOLD");
  if (!v208)
  {
    v217 = 0x100000000;
    LODWORD(v8) = v279;
    goto LABEL_350;
  }
  v209 = v208;
  v210 = strlen(v208);
  if (!v210)
  {
    v216 = 0;
    v220 = 0;
    v221 = 1;
    LODWORD(v8) = v279;
    goto LABEL_347;
  }
  v211 = 0;
  v212 = v210;
  LODWORD(v8) = v279;
  while (2)
  {
    v213 = *v209;
    if ((v213 - 48) < 0xA)
    {
      v214 = -48;
LABEL_310:
      v215 = v214 + v213;
      if (v215 > 9)
      {
        v216 = v211;
        goto LABEL_346;
      }
      v216 = 10 * v211 + v215;
      if (v211 > v216 / 0xA)
      {
        v220 = 1;
        v221 = 1;
        goto LABEL_347;
      }
      ++v209;
      v211 = v216;
      if (!--v212)
        goto LABEL_346;
      continue;
    }
    break;
  }
  if ((v213 - 97) < 0x1A)
  {
    v214 = -87;
LABEL_318:
    v175 = a2;
    LODWORD(v8) = v279;
    v19 = v198;
    goto LABEL_310;
  }
  if ((v213 - 65) <= 0x19)
  {
    v214 = -55;
    goto LABEL_318;
  }
  v216 = v211;
  v175 = a2;
  LODWORD(v8) = v279;
  v19 = v198;
LABEL_346:
  v221 = v210 == v212;
  v220 = v212 != 0;
LABEL_347:
  v73 = !v220 && !v221;
  v217 = 0x100000000;
  if (v73)
    v217 = v216;
LABEL_350:
  if ((_DWORD)v8 == 3)
    v224 = 4;
  else
    v224 = 1;
  if (v207 >= v217)
    LODWORD(v8) = v224;
LABEL_355:
  v225 = (uint64_t *)*((_QWORD *)v175 + 4);
  v226 = *((_QWORD *)v175 + 3) - (_QWORD)v225;
  if (a8)
  {
    if (v226 <= 7)
    {
      v227 = "!<thin>\n";
      goto LABEL_360;
    }
    v269 = 0x6E6968743C21;
LABEL_429:
    *v225 = v269 & 0xFFFFFFFFFFFFLL | 0xA3E000000000000;
    *((_QWORD *)v175 + 4) += 8;
  }
  else
  {
    if (v226 > 7)
    {
      v269 = 0x686372613C21;
      goto LABEL_429;
    }
    v227 = "!<arch>\n";
LABEL_360:
    llvm::raw_ostream::write(v175, v227, 8uLL);
  }
  v228 = a2;
  if (a5 && ((v8 - 3) < 2 || v336))
  {
    v229 = (v19 - v144) / 80;
    v230 = 0;
    if (v19 != v144)
    {
      v231 = 80 * v229;
      v232 = v144 + 8;
      do
      {
        v230 += (*v232 - *(v232 - 1)) >> 2;
        v232 += 10;
        v231 -= 80;
      }
      while (v231);
    }
    v233 = &v144[80 * v229];
    v310 = v19;
    v313 = v21;
    __srca = v335;
    if (((1 << v8) & 0x6D) != 0)
    {
      v234 = 2;
      if (v8 >= 2)
      {
        v235 = 4;
        goto LABEL_372;
      }
LABEL_373:
      v301 = v234;
      v237 = 0;
      v235 = 0;
      v236 = (v230 + 1) << v234;
      v238 = 2;
    }
    else
    {
      v234 = 3;
      if (v8 <= 1)
        goto LABEL_373;
      v235 = 8;
LABEL_372:
      v301 = v234;
      v236 = v235 + 2 * ((unint64_t)v230 << v234);
      v237 = 1;
      v238 = 8;
    }
    v293 = v235 + v336 + v236;
    v296 = (v238 + v293 - 1) & -v238;
    __nb = v336;
    sub_1C5998B70(a2, v8, v270, v293 + (v296 - v293));
    v239 = (*(uint64_t (**)(llvm::raw_ostream *))(*(_QWORD *)a2 + 80))(a2);
    v240 = v8;
    v241 = v239;
    v242 = *((_QWORD *)a2 + 4);
    v243 = *((_QWORD *)a2 + 2);
    if (v237)
      v244 = (unint64_t)(2 * v230) << v301;
    else
      v244 = v230;
    v245 = v240;
    sub_1C5998CE0(a2, v240, v244);
    if (v310 != v144)
    {
      v246 = v241 + v242 + v293 + (v296 - v293) - v243;
      v247 = (unsigned int **)v144;
      do
      {
        v248 = *v247;
        v249 = v247[1];
        while (v248 != v249)
        {
          if (v237)
            sub_1C5998CE0(a2, v245, *v248);
          sub_1C5998CE0(a2, v245, v246);
          ++v248;
        }
        if (*((char *)v247 + 47) < 0)
          v250 = v247[4];
        else
          v250 = (unsigned int *)*((unsigned __int8 *)v247 + 47);
        v246 += (unint64_t)v247[9] + (_QWORD)v250 + (unint64_t)v247[7];
        v247 += 10;
      }
      while (v247 != (unsigned int **)v233);
    }
    if ((v237 & 1) != 0)
      sub_1C5998CE0(a2, v245, __nb);
    v251 = (void *)*((_QWORD *)a2 + 4);
    v19 = v310;
    if (__nb <= *((_QWORD *)a2 + 3) - (_QWORD)v251)
    {
      v21 = v313;
      v252 = v296 - v293;
      if (__nb)
      {
        memcpy(v251, __srca, __nb);
        *((_QWORD *)a2 + 4) += __nb;
      }
    }
    else
    {
      llvm::raw_ostream::write(a2, (const char *)__srca, __nb);
      v21 = v313;
      v252 = v296 - v293;
    }
    v228 = a2;
    if (v252)
    {
      v253 = v293 - v296;
      do
        v228 = llvm::raw_ostream::write(v228, 0);
      while (!__CFADD__(v253++, 1));
    }
  }
  v255 = v228;
  if (v144 != v19)
  {
    v256 = v144;
    do
    {
      v257 = v256[47];
      v258 = v257;
      if (v257 >= 0)
        v259 = v256 + 24;
      else
        v259 = (const char *)*((_QWORD *)v256 + 3);
      v260 = v257 & 0x7F;
      if (v258 >= 0)
        v261 = v260;
      else
        v261 = *((_QWORD *)v256 + 4);
      llvm::raw_ostream::write(v255, v259, v261);
      v262 = (const void *)*((_QWORD *)v256 + 6);
      v263 = *((_QWORD *)v256 + 7);
      v264 = (void *)*((_QWORD *)v255 + 4);
      if (v263 <= *((_QWORD *)v255 + 3) - (_QWORD)v264)
      {
        if (v263)
        {
          memcpy(v264, v262, *((_QWORD *)v256 + 7));
          v264 = (void *)(*((_QWORD *)v255 + 4) + v263);
          *((_QWORD *)v255 + 4) = v264;
        }
      }
      else
      {
        llvm::raw_ostream::write(v255, (const char *)v262, *((_QWORD *)v256 + 7));
        v264 = (void *)*((_QWORD *)v255 + 4);
      }
      v265 = (const void *)*((_QWORD *)v256 + 8);
      v266 = *((_QWORD *)v256 + 9);
      if (v266 <= *((_QWORD *)v255 + 3) - (_QWORD)v264)
      {
        if (v266)
        {
          memcpy(v264, v265, *((_QWORD *)v256 + 9));
          *((_QWORD *)v255 + 4) += v266;
        }
      }
      else
      {
        llvm::raw_ostream::write(v255, (const char *)v265, *((_QWORD *)v256 + 9));
      }
      v256 += 80;
    }
    while (v256 != v19);
  }
  v267 = (const char *)*((_QWORD *)v255 + 4);
  v268 = (const char *)*((_QWORD *)v255 + 2);
  if (v267 != v268)
  {
    *((_QWORD *)v255 + 4) = v268;
    llvm::raw_ostream::flush_tied_then_write(v255, v268, v267 - v268);
  }
  *a1 = 0;
  if (v21)
  {
LABEL_223:
    if (v144)
    {
      while (v19 != v144)
      {
        if (*(v19 - 33) < 0)
          operator delete(*((void **)v19 - 7));
        v145 = (void *)*((_QWORD *)v19 - 10);
        if (v145)
        {
          *((_QWORD *)v19 - 9) = v145;
          operator delete(v145);
        }
        v19 -= 80;
      }
      operator delete(v144);
    }
    goto LABEL_420;
  }
LABEL_418:
  if (v144)
    (*(void (**)(char *))(*(_QWORD *)v144 + 8))(v144);
LABEL_420:
  v314 = (uint64_t (**)())off_1E81A6E70;
  if (v321 == 1 && v316)
    MEMORY[0x1CAA32F9C](v316, 0x1000C8077774924);
  if (v323 != &v326)
    free(v323);
  v326 = (uint64_t (**)())off_1E81A6E70;
  if (v333 == 1 && v328)
    MEMORY[0x1CAA32F9C](v328, 0x1000C8077774924);
  if (v335 != &v338)
    free(v335);
}

void llvm::writeArchiveToBuffer(uint64_t a1@<X0>, char *a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, int a5@<W4>, int a6@<W5>, uint64_t a7@<X8>)
{
  uint64_t v8;
  char v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t (**v12)();
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  char v17;
  uint64_t v18;
  int v19;
  void **v20;
  void *v21[3];
  uint64_t v22;

  v21[1] = 0;
  v21[2] = 0;
  v21[0] = &v22;
  v13 = 0;
  v17 = 0;
  v18 = 0;
  v12 = &off_1E81A7280;
  v20 = v21;
  v19 = 0;
  v15 = 0;
  v16 = 0;
  v14 = 0;
  sub_1C599682C(&v11, (llvm::raw_ostream *)&v12, a1, a2, a3, a4, a5, a6);
  v8 = v11;
  if (v11)
  {
    v9 = *(_BYTE *)(a7 + 8) | 1;
  }
  else
  {
    v10 = operator new();
    v8 = sub_1C5906388(v10, (uint64_t)v21, "<in-memory object>", 0x12uLL, 0);
    v9 = *(_BYTE *)(a7 + 8) & 0xFE;
  }
  *(_BYTE *)(a7 + 8) = v9;
  *(_QWORD *)a7 = v8;
  v12 = (uint64_t (**)())off_1E81A6E70;
  if (v19 == 1 && v14)
    MEMORY[0x1CAA32F9C](v14, 0x1000C8077774924);
  if (v21[0] != &v22)
    free(v21[0]);
}

void *sub_1C5998688(llvm::raw_ostream *a1, int a2, const void *a3, size_t a4, uint64_t *a5, unsigned int a6, unsigned int a7, unsigned int a8, uint64_t a9)
{
  int v15;
  int v16;
  uint64_t v17;
  void *result;
  int v19;
  _QWORD v23[4];
  __int16 v24;

  v15 = a2 + a4 + 67;
  v16 = (v15 & 0xFFFFFFF8) - (a2 + a4) - 60;
  v17 = (v15 & 0xFFFFFFF8) - a2 - 60;
  v23[0] = "#1/";
  v23[2] = v17;
  v24 = 2051;
  sub_1C5998A3C(a1, (uint64_t)v23);
  sub_1C5998844(a1, *a5, a6, a7, a8, v17 + a9);
  result = (void *)*((_QWORD *)a1 + 4);
  if (a4 <= *((_QWORD *)a1 + 3) - (_QWORD)result)
  {
    if (a4)
    {
      result = memcpy(result, a3, a4);
      *((_QWORD *)a1 + 4) += a4;
    }
  }
  else
  {
    result = llvm::raw_ostream::write(a1, (const char *)a3, a4);
  }
  if (v16)
  {
    v19 = a4 + a2 - (v15 & 0xFFFFFFF8) + 60;
    do
      result = llvm::raw_ostream::write(a1, 0);
    while (!__CFADD__(v19++, 1));
  }
  return result;
}

llvm::raw_ostream *sub_1C59987AC(llvm::raw_ostream *a1, unint64_t a2, int a3)
{
  int v6;
  int v7;
  int v8;
  unsigned int v9;

  v6 = (*(uint64_t (**)(llvm::raw_ostream *))(*(_QWORD *)a1 + 80))(a1);
  v7 = *((_DWORD *)a1 + 8);
  v8 = *((_DWORD *)a1 + 4);
  sub_1C5E21910(a1, a2, 0, 0, 0);
  v9 = v6
     + v7
     - ((*(uint64_t (**)(llvm::raw_ostream *))(*(_QWORD *)a1 + 80))(a1)
      + v8
      + *((_DWORD *)a1 + 8))
     + *((_DWORD *)a1 + 4)
     + a3;
  return llvm::raw_ostream::indent(a1, v9);
}

llvm::raw_ostream *sub_1C5998844(llvm::raw_ostream *a1, uint64_t a2, unsigned int a3, unsigned int a4, unsigned int a5, unint64_t a6)
{
  time_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  llvm::raw_ostream *v15;
  unint64_t v16;
  int v17;
  int v18;
  llvm::raw_ostream *v19;
  int v20;
  int v21;
  int v22;
  llvm::raw_ostream *v23;
  int v24;
  llvm::raw_ostream *v25;
  llvm::raw_ostream *result;
  _WORD *v27;
  _QWORD v28[3];
  std::chrono::system_clock::time_point __t;

  __t.__d_.__rep_ = 1000000 * a2;
  v11 = std::chrono::system_clock::to_time_t(&__t);
  v12 = (*(uint64_t (**)(llvm::raw_ostream *))(*(_QWORD *)a1 + 80))(a1);
  v13 = *((_QWORD *)a1 + 4);
  v14 = *((_QWORD *)a1 + 2);
  if (v11 < 0)
  {
    v16 = -v11;
    v15 = a1;
    v17 = 1;
  }
  else
  {
    v15 = a1;
    v16 = v11;
    v17 = 0;
  }
  sub_1C5E21910(v15, v16, 0, 0, v17);
  v18 = (*(uint64_t (**)(llvm::raw_ostream *))(*(_QWORD *)a1 + 80))(a1);
  v19 = llvm::raw_ostream::indent(a1, v12 + (int)v13 - (v18 + (int)v14 + *((_DWORD *)a1 + 8)) + *((_DWORD *)a1 + 4) + 12);
  sub_1C5998AD8(v19, a3 % 0xF4240, 6);
  sub_1C5998AD8(a1, a4 % 0xF4240, 6);
  v28[0] = &off_1E8132728;
  v28[1] = "%o";
  v28[2] = a5;
  v20 = (*(uint64_t (**)(llvm::raw_ostream *))(*(_QWORD *)a1 + 80))(a1);
  v21 = *((_DWORD *)a1 + 8);
  v22 = *((_DWORD *)a1 + 4);
  v23 = llvm::raw_ostream::operator<<(a1, (uint64_t)v28);
  v24 = (*(uint64_t (**)(llvm::raw_ostream *))(*(_QWORD *)a1 + 80))(v23);
  v25 = llvm::raw_ostream::indent(a1, v20 + v21 - (v24 + v22 + *((_DWORD *)a1 + 8)) + *((_DWORD *)a1 + 4) + 8);
  result = sub_1C59987AC(v25, a6, 10);
  v27 = (_WORD *)*((_QWORD *)a1 + 4);
  if (*((_QWORD *)a1 + 3) - (_QWORD)v27 <= 1uLL)
  *v27 = 2656;
  *((_QWORD *)a1 + 4) += 2;
  return result;
}

llvm::raw_ostream *sub_1C5998A3C(llvm::raw_ostream *a1, uint64_t a2)
{
  uint64_t v4;
  int v5;
  int v6;
  int v7;
  uint64_t v8;
  unsigned int v9;

  v4 = (*(uint64_t (**)(llvm::raw_ostream *))(*(_QWORD *)a1 + 80))(a1);
  v5 = v4;
  v6 = *((_DWORD *)a1 + 8);
  v7 = *((_DWORD *)a1 + 4);
  llvm::Twine::printOneChild(v4, a1, *(_QWORD *)a2, *(_QWORD *)(a2 + 8), *(_BYTE *)(a2 + 32));
  llvm::Twine::printOneChild(v8, a1, *(_QWORD *)(a2 + 16), *(_QWORD *)(a2 + 24), *(_BYTE *)(a2 + 33));
  v9 = v5
     + v6
     - ((*(uint64_t (**)(llvm::raw_ostream *))(*(_QWORD *)a1 + 80))(a1)
      + v7
      + *((_DWORD *)a1 + 8))
     + *((_DWORD *)a1 + 4)
     + 16;
  return llvm::raw_ostream::indent(a1, v9);
}

llvm::raw_ostream *sub_1C5998AD8(llvm::raw_ostream *a1, unsigned int a2, int a3)
{
  int v6;
  int v7;
  int v8;
  unsigned int v9;

  v6 = (*(uint64_t (**)(llvm::raw_ostream *))(*(_QWORD *)a1 + 80))(a1);
  v7 = *((_DWORD *)a1 + 8);
  v8 = *((_DWORD *)a1 + 4);
  sub_1C5E21910(a1, a2, 0, 0, 0);
  v9 = v6
     + v7
     - ((*(uint64_t (**)(llvm::raw_ostream *))(*(_QWORD *)a1 + 80))(a1)
      + v8
      + *((_DWORD *)a1 + 8))
     + *((_DWORD *)a1 + 4)
     + a3;
  return llvm::raw_ostream::indent(a1, v9);
}

llvm::raw_ostream *sub_1C5998B70(llvm::raw_ostream *a1, unsigned int a2, char a3, unint64_t a4)
{
  uint64_t v8;
  size_t v9;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v10;
  std::chrono::duration<long long, std::ratio<1, 1000000>>::rep v11;
  uint64_t v12;
  const char *v13;
  const char *v15;
  uint64_t v16[4];
  __int16 v17;

  if (a2 < 2)
  {
    v11 = 0;
    if (a2)
      v12 = 6;
    else
      v12 = 0;
    if ((a3 & 1) == 0)
      v11 = std::chrono::system_clock::now().__d_.__rep_ / 1000000;
    v13 = "/SYM64";
    if (!a2)
      v13 = "";
    v16[0] = (uint64_t)v13;
    v16[1] = v12;
    v16[2] = (uint64_t)"/";
    v17 = 773;
    sub_1C5998A3C(a1, (uint64_t)v16);
    return sub_1C5998844(a1, v11, 0, 0, 0, a4);
  }
  else
  {
    v8 = (*(uint64_t (**)(llvm::raw_ostream *))(*(_QWORD *)a1 + 80))(a1)
       + *((_QWORD *)a1 + 4)
       - *((_QWORD *)a1 + 2);
    if (a2 == 4)
      v9 = 12;
    else
      v9 = 9;
    if ((a3 & 1) != 0)
      v10 = 0;
    else
      v10 = std::chrono::system_clock::now().__d_.__rep_ / 1000000;
    v16[0] = v10;
    if (a2 == 4)
      v15 = "__.SYMDEF_64";
    else
      v15 = "__.SYMDEF";
    return (llvm::raw_ostream *)sub_1C5998688(a1, v8, v15, v9, v16, 0, 0, 0, a4);
  }
}

llvm::raw_ostream *sub_1C5998CE0(llvm::raw_ostream *a1, unsigned int a2, unint64_t a3)
{
  unsigned int v3;
  const char *v4;
  size_t v5;
  unint64_t v6;
  unint64_t v8;
  unsigned int v9;

  if (((1 << a2) & 0x6D) != 0)
  {
    v3 = bswap32(a3);
    if (a2 > 1)
      v3 = a3;
    v9 = v3;
    v4 = (const char *)&v9;
    v5 = 4;
  }
  else
  {
    v6 = bswap64(a3);
    if (a2 > 1)
      v6 = a3;
    v8 = v6;
    v4 = (const char *)&v8;
    v5 = 8;
  }
  return llvm::raw_ostream::write(a1, v4, v5);
}

__n128 llvm::object::Binary::Binary(uint64_t a1, int a2, uint64_t a3)
{
  __n128 result;
  __int128 v4;

  *(_QWORD *)a1 = &off_1E8185288;
  *(_DWORD *)(a1 + 8) = a2;
  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 32) = v4;
  return result;
}

{
  __n128 result;
  __int128 v4;

  *(_QWORD *)a1 = &off_1E8185288;
  *(_DWORD *)(a1 + 8) = a2;
  result = *(__n128 *)a3;
  v4 = *(_OWORD *)(a3 + 16);
  *(_OWORD *)(a1 + 16) = *(_OWORD *)a3;
  *(_OWORD *)(a1 + 32) = v4;
  return result;
}

uint64_t llvm::object::Binary::getData(llvm::object::Binary *this)
{
  return *((_QWORD *)this + 2);
}

void llvm::object::createBinary(uint64_t a1)
{
  char *v1;

  v1 = (char *)sub_1C5998DEC
     + 4 * byte_1C8663D0F[llvm::identify_magic(*(unsigned __int8 **)a1, *(_QWORD *)(a1 + 8))];
  __asm { BR              X9 }
}

void sub_1C5998DEC(uint64_t a1, unsigned int a2)
{
  uint64_t v2;
  _OWORD *v3;
  uint64_t v4;
  uint64_t v5;
  __int128 v6;
  _OWORD v7[10];

  v6 = v3[1];
  v7[0] = *v3;
  v7[1] = v6;
  llvm::object::SymbolicFile::createSymbolicFile((uint64_t)v7, a2, v4, v5 - 72);
  *(_BYTE *)(v2 + 8) = *(_BYTE *)(v2 + 8) & 0xFE | *(_BYTE *)(v5 - 64) & 1;
  *(_QWORD *)v2 = *(_QWORD *)(v5 - 72);
}

void llvm::object::createBinary(const char **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  char v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  const char **v12;
  char v13;
  _QWORD v14[4];
  const char **v15;
  uint64_t v16;
  __int16 v17;
  _QWORD v18[2];
  char v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v17 = 261;
  v15 = a1;
  v16 = a2;
  llvm::MemoryBuffer::getFileOrSTDIN(&v15, 0, 0, (uint64_t)v18);
  v4 = v19;
  if ((v19 & 1) != 0)
  {
    v5 = (_QWORD *)v18[0];
    if (LODWORD(v18[0]))
    {
      v6 = v18[1];
      v7 = (_QWORD *)operator new();
      *v7 = &off_1E81A0D28;
      v7[1] = v5;
      v7[2] = v6;
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v7;
      return;
    }
  }
  else
  {
    std::system_category();
    v5 = (_QWORD *)v18[0];
  }
  v8 = v5[1];
  v9 = v5[2] - v8;
  v10 = (*(uint64_t (**)(_QWORD *))(*v5 + 16))(v5);
  v14[0] = v8;
  v14[1] = v9;
  v14[2] = v10;
  v14[3] = v11;
  llvm::object::createBinary((uint64_t)v14);
  v12 = v15;
  v13 = *(_BYTE *)(a3 + 16);
  if ((v16 & 1) != 0)
  {
    *(_BYTE *)(a3 + 16) = v13 | 1;
    *(_QWORD *)a3 = v12;
    if ((v4 & 1) == 0)
      (*(void (**)(_QWORD *))(*v5 + 8))(v5);
  }
  else
  {
    *(_BYTE *)(a3 + 16) = v13 & 0xFE;
    *(_QWORD *)a3 = v12;
    *(_QWORD *)(a3 + 8) = v5;
  }
}

void llvm::object::writeImportLibrary(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, __int128 *a5@<X4>, uint64_t a6@<X5>, int a7@<W6>, int a8@<W7>, char **a9@<X8>)
{
  void *v12;
  size_t v13;
  __int16 v14;
  int v15;
  __int16 v16;
  _WORD *v17;
  int v18;
  char *v19;
  int64_t v20;
  int v21;
  char *v22;
  char *v23;
  int64_t v24;
  char *v25;
  __int16 v26;
  char *v27;
  int64_t v28;
  char *v29;
  char *v30;
  int64_t v31;
  size_t v32;
  size_t v33;
  int v34;
  int v35;
  int v36;
  int v37;
  char *v38;
  int64_t v39;
  char *v40;
  uint64_t i;
  void *v42;
  size_t v43;
  char *v44;
  __int128 v45;
  __int16 v46;
  __int16 v47;
  char *v48;
  char *v49;
  int64_t v50;
  char *v51;
  char *v52;
  int64_t v53;
  char *v54;
  char *v55;
  int64_t v56;
  char *v57;
  void *v58;
  size_t v59;
  char *v60;
  __int128 v61;
  __int128 v62;
  __int16 v63;
  int v64;
  __int16 v65;
  _WORD *v66;
  int v67;
  char *v68;
  int64_t v69;
  char *v70;
  char *v71;
  int64_t v72;
  char *v73;
  int64_t v74;
  char *v75;
  int64_t v76;
  char *v77;
  int64_t v78;
  char *v79;
  int64_t v80;
  char *v81;
  void *v82;
  size_t v83;
  char *v84;
  char *v85;
  uint64_t v86;
  __int128 v87;
  char *v88;
  uint64_t j;
  char *v90;
  uint64_t v91;
  uint64_t k;
  uint64_t v93;
  __int128 *v94;
  __int128 *v95;
  __int128 v96;
  __int128 v97;
  __int128 v98;
  __int128 v99;
  int v100;
  int v101;
  char v102;
  char v103;
  void *v104;
  void *v105;
  BOOL v106;
  uint64_t v107;
  void **v108;
  char v109;
  int v110;
  void **v111;
  size_t v112;
  void **v113;
  size_t v114;
  size_t v115;
  __int16 v116;
  int v117;
  size_t v118;
  _BYTE *v119;
  uint64_t v120;
  char *v121;
  const char *v122;
  unint64_t v123;
  size_t v124;
  unint64_t v125;
  size_t v126;
  uint64_t v127;
  size_t v128;
  int v129;
  size_t v130;
  uint64_t v131;
  size_t *v132;
  unsigned __int8 *v133;
  uint64_t v134;
  _BYTE *v135;
  size_t v136;
  void **v137;
  _BYTE *v138;
  _BYTE *v139;
  uint64_t v140;
  size_t v141;
  const char *v142;
  _BYTE *v143;
  const char *v144;
  uint64_t v145;
  uint64_t v146;
  void **v147;
  _BYTE *v148;
  unint64_t v149;
  size_t v150;
  void **v151;
  size_t *v152;
  char *v153;
  uint64_t v154;
  __int128 v155;
  __int128 v156;
  char *v157;
  unint64_t v158;
  unint64_t v159;
  char *v160;
  void **v161;
  void *v162;
  uint64_t v163;
  unint64_t v164;
  unint64_t v165;
  char v166;
  char *v167;
  uint64_t v168;
  __int128 v169;
  char *v170;
  char *v171;
  uint64_t v172;
  __int128 v173;
  __int128 v174;
  uint64_t v175;
  uint64_t v176;
  __int128 *v177;
  uint64_t v178;
  size_t *v179;
  uint64_t v180;
  __int128 v181;
  unint64_t v182;
  unint64_t v183;
  char *v184;
  char *v185;
  uint64_t v186;
  __int128 v187;
  char *v188;
  char *v189;
  uint64_t v190;
  __int128 v191;
  __int128 v192;
  uint64_t v193;
  uint64_t v194;
  size_t v195;
  size_t *v196;
  size_t v197;
  int v198;
  int v199;
  size_t v200;
  unint64_t v201;
  void *v202;
  size_t v203;
  char *v204;
  uint64_t v205;
  __int128 v206;
  __int128 v207;
  unint64_t v208;
  unint64_t v209;
  char *v210;
  char *v211;
  uint64_t v212;
  __int128 v213;
  char *v214;
  char *v215;
  uint64_t v216;
  __int128 v217;
  __int128 v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t v223;
  int v224;
  __int16 v229;
  unsigned __int8 v230;
  __int128 *v231;
  char *v232;
  uint64_t v233;
  const char *v234;
  size_t v235;
  uint64_t v236;
  _BYTE __dst[24];
  __int128 v238;
  int v239;
  void *v240;
  char *v241;
  uint64_t v242;
  void *v243;
  char *v244;
  uint64_t v245;
  void *v246;
  char *v247;
  uint64_t v248;
  _QWORD v249[4];
  __int16 v250;
  _QWORD v251[4];
  __int16 v252;
  _QWORD v253[4];
  __int16 v254;
  __int128 v255;
  const char *v256;
  size_t v257;
  __int16 v258;
  __int128 *v259;
  size_t v260;
  const char *v261;
  size_t v262;
  __int16 v263;
  void *v264[2];
  char v265;
  uint64_t v266[2];
  size_t v267[2];
  const char *v268;
  char v269;
  _BYTE __p[24];
  __int128 v271;
  uint64_t v272;
  void *v273[2];
  uint64_t v274;
  __int128 v275;
  uint64_t v276;
  int v277;
  __int16 v278;
  uint64_t v279;
  uint64_t v280;
  void *v281;
  int *v282;
  uint64_t v283;
  int v284;
  _QWORD *v285;
  uint64_t v286;
  _QWORD v287[2];
  void *__src;
  size_t __n;
  void *v290;
  size_t v291;
  __int128 v292;
  uint64_t v293;
  __int128 v294;
  uint64_t v295;
  uint64_t v296;

  v296 = *MEMORY[0x1E0C80C00];
  v282 = 0;
  v281 = 0;
  v279 = a1;
  v280 = a2;
  v283 = a2;
  v284 = 0;
  llvm::sys::path::reverse_iterator::operator++((uint64_t)&v279);
  v12 = v281;
  v13 = (size_t)v282;
  v224 = a7;
  LODWORD(v279) = a7;
  v281 = 0;
  v280 = 0;
  v282 = &v284;
  v283 = 0x400000000;
  v285 = v287;
  v286 = 0;
  v287[0] = 0;
  v287[1] = 1;
  __src = v12;
  __n = v13;
  if (v13 >= v13 - 4)
    v13 -= 4;
  v290 = v12;
  v291 = v13;
  WORD4(v271) = 1283;
  *(_QWORD *)__p = "__IMPORT_DESCRIPTOR_";
  *(_QWORD *)&__p[16] = v12;
  *(_QWORD *)&v271 = v13;
  llvm::Twine::str((llvm::Twine *)__p, &v292);
  WORD4(v238) = 1283;
  *(_QWORD *)__dst = "\x7F";
  *(_QWORD *)&__dst[16] = v290;
  *(_QWORD *)&v238 = v291;
  *(_QWORD *)__p = __dst;
  *(_QWORD *)&__p[16] = "_NULL_THUNK_DATA";
  WORD4(v271) = 770;
  llvm::Twine::str((llvm::Twine *)__p, &v294);
  v246 = 0;
  v247 = 0;
  v248 = 0;
  v14 = v279;
  v15 = __n + 151;
  if ((int)v279 > 34403)
    v16 = 0;
  else
    v16 = 256;
  sub_1C50429D8((unint64_t *)&v246, 0x14uLL);
  v17 = v246;
  *(_WORD *)v246 = v14;
  v17[1] = 2;
  *((_DWORD *)v17 + 1) = 0;
  *((_DWORD *)v17 + 2) = v15;
  *((_DWORD *)v17 + 3) = 7;
  v17[8] = 0;
  v17[9] = v16;
  v18 = __n + 1;
  v19 = (char *)v246;
  v20 = v247 - (_BYTE *)v246;
  if ((unint64_t)(v247 - (_BYTE *)v246) > 0xFFFFFFFFFFFFFFAFLL)
  {
    v247 += 80;
  }
  else
  {
    sub_1C50429D8((unint64_t *)&v246, 0x50uLL);
    v19 = (char *)v246;
  }
  v21 = -1070596032;
  v22 = &v19[v20];
  *(_QWORD *)v22 = 0x322461746164692ELL;
  *(_OWORD *)(v22 + 8) = xmmword_1C8663DC0;
  *((_QWORD *)v22 + 3) = 120;
  *((_QWORD *)v22 + 4) = 0xC030004000000003;
  *((_QWORD *)v22 + 5) = 0x362461746164692ELL;
  *((_QWORD *)v22 + 6) = 0;
  *((_DWORD *)v22 + 14) = v18;
  *((_DWORD *)v22 + 15) = 150;
  *((_QWORD *)v22 + 8) = 0;
  *((_DWORD *)v22 + 18) = 0;
  *((_DWORD *)v22 + 19) = -1071644608;
  v23 = (char *)v246;
  v24 = v247 - (_BYTE *)v246;
  if ((unint64_t)(v247 - (_BYTE *)v246) > 0xFFFFFFFFFFFFFFEBLL)
  {
    v247 += 20;
  }
  else
  {
    sub_1C50429D8((unint64_t *)&v246, 0x14uLL);
    v23 = (char *)v246;
  }
  v25 = &v23[v24];
  *(_QWORD *)v25 = 0;
  *((_QWORD *)v25 + 1) = 0;
  *((_DWORD *)v25 + 4) = 0;
  if ((int)v279 > 34403)
  {
    if ((_DWORD)v279 == 34404)
    {
      v26 = 3;
      goto LABEL_18;
    }
  }
  else if ((_DWORD)v279 == 332)
  {
    v26 = 7;
    goto LABEL_18;
  }
  v26 = 2;
LABEL_18:
  v27 = (char *)v246;
  v28 = v247 - (_BYTE *)v246;
  if ((unint64_t)(v247 - (_BYTE *)v246) > 0xFFFFFFFFFFFFFFE1)
  {
    v247 += 30;
  }
  else
  {
    sub_1C50429D8((unint64_t *)&v246, 0x1EuLL);
    v27 = (char *)v246;
  }
  v29 = &v27[v28];
  *(_QWORD *)v29 = 0x20000000CLL;
  *((_WORD *)v29 + 4) = v26;
  *(_QWORD *)(v29 + 10) = 0x300000000;
  *((_WORD *)v29 + 9) = v26;
  *(_QWORD *)(v29 + 20) = 0x400000010;
  *((_WORD *)v29 + 14) = v26;
  v30 = (char *)v246;
  v31 = v247 - (_BYTE *)v246;
  v32 = __n;
  v33 = __n + 1 + v247 - (_BYTE *)v246;
  if (v247 - (_BYTE *)v246 >= v33)
  {
    if (v247 - (_BYTE *)v246 > v33)
      v247 += __n + 1;
  }
  else
  {
    sub_1C50429D8((unint64_t *)&v246, __n + 1);
    v30 = (char *)v246;
    v32 = __n;
  }
  memcpy(&v30[v31], __src, v32);
  *((_BYTE *)v246 + __n + v31) = 0;
  if (v293 >= 0)
    v34 = SHIBYTE(v293) & 0x7F;
  else
    v34 = DWORD2(v292);
  v35 = v34 + 5;
  if (byte_1ED81A517 >= 0)
    v36 = byte_1ED81A517 & 0x7F;
  else
    v36 = DWORD2(xmmword_1ED81A500);
  v37 = v35 + v36 + 1;
  v38 = (char *)v246;
  v39 = v247 - (_BYTE *)v246;
  if ((unint64_t)(v247 - (_BYTE *)v246) > 0xFFFFFFFFFFFFFF81)
  {
    v247 += 126;
  }
  else
  {
    sub_1C50429D8((unint64_t *)&v246, 0x7EuLL);
    v38 = (char *)v246;
  }
  v40 = &v38[v39];
  *(_QWORD *)v40 = 0x400000000;
  *((_QWORD *)v40 + 1) = 0x100000000;
  *((_QWORD *)v40 + 2) = 0x61746164692E0002;
  *((_WORD *)v40 + 12) = 12836;
  *(_QWORD *)(v40 + 26) = 0x100000000;
  *(_QWORD *)(v40 + 34) = 0x61746164692E0068;
  *((_WORD *)v40 + 21) = 13860;
  *(_QWORD *)(v40 + 44) = 0x200000000;
  *(_QWORD *)(v40 + 52) = 0x61746164692E0003;
  *((_WORD *)v40 + 30) = 13348;
  *(_QWORD *)(v40 + 62) = 0;
  *(_QWORD *)(v40 + 70) = 0x61746164692E0068;
  *((_WORD *)v40 + 39) = 13604;
  *((_QWORD *)v40 + 10) = 0;
  v40[88] = 104;
  *(_DWORD *)(v40 + 89) = 0;
  v40[93] = 0;
  *(_DWORD *)(v40 + 94) = v35;
  *(_QWORD *)(v40 + 98) = 0;
  v40[106] = 2;
  *(_DWORD *)(v40 + 107) = 0;
  v40[111] = 0;
  *((_DWORD *)v40 + 28) = v37;
  *(_QWORD *)(v40 + 116) = 0;
  *((_WORD *)v40 + 62) = 2;
  if (SHIBYTE(v293) < 0)
  {
    sub_1C47EBC30(__p, (void *)v292, *((unint64_t *)&v292 + 1));
  }
  else
  {
    *(_OWORD *)__p = v292;
    *(_QWORD *)&__p[16] = v293;
  }
  if (byte_1ED81A517 < 0)
  {
    sub_1C47EBC30(&v271, (void *)xmmword_1ED81A500, *((unint64_t *)&xmmword_1ED81A500 + 1));
  }
  else
  {
    v271 = xmmword_1ED81A500;
    v272 = unk_1ED81A510;
  }
  if (SHIBYTE(v295) < 0)
  {
    sub_1C47EBC30(v273, (void *)v294, *((unint64_t *)&v294 + 1));
  }
  else
  {
    *(_OWORD *)v273 = v294;
    v274 = v295;
  }
  sub_1C599AD48((char *)&v246, (uint64_t)__p, 3);
  for (i = 0; i != -9; i -= 3)
  {
    if (*((char *)&v274 + i * 8 + 7) < 0)
      operator delete(v273[i]);
  }
  v42 = __src;
  v43 = __n;
  *(_QWORD *)__dst = v246;
  *(_QWORD *)&__dst[8] = v247 - (_BYTE *)v246;
  *(_QWORD *)&__dst[16] = __src;
  *(_QWORD *)&v238 = __n;
  llvm::MemoryBuffer::getMemBuffer((uint64_t *)__dst, (char **)__p);
  *(_QWORD *)&__p[8] = v42;
  *(_QWORD *)&__p[16] = v43;
  v271 = 0uLL;
  LODWORD(v272) = 420;
  v44 = (char *)operator new(0x30uLL);
  v45 = v271;
  *(_OWORD *)(v44 + 8) = *(_OWORD *)&__p[8];
  *(_QWORD *)v44 = *(_QWORD *)__p;
  *(_OWORD *)(v44 + 24) = v45;
  *((_DWORD *)v44 + 10) = v272;
  v243 = 0;
  v244 = 0;
  v245 = 0;
  v46 = v279;
  if ((int)v279 > 34403)
    v47 = 0;
  else
    v47 = 256;
  sub_1C50429D8((unint64_t *)&v243, 0x14uLL);
  v48 = (char *)v243;
  *(_WORD *)v243 = v46;
  *((_WORD *)v48 + 1) = 1;
  *(_QWORD *)(v48 + 4) = 0x5000000000;
  *((_DWORD *)v48 + 3) = 1;
  *((_WORD *)v48 + 8) = 0;
  *((_WORD *)v48 + 9) = v47;
  v49 = (char *)v243;
  v50 = v244 - (_BYTE *)v243;
  if ((unint64_t)(v244 - (_BYTE *)v243) > 0xFFFFFFFFFFFFFFD7)
  {
    v244 += 40;
  }
  else
  {
    sub_1C50429D8((unint64_t *)&v243, 0x28uLL);
    v49 = (char *)v243;
  }
  v51 = &v49[v50];
  *(_QWORD *)v51 = 0x332461746164692ELL;
  *(_OWORD *)(v51 + 8) = xmmword_1C8663DD0;
  *((_QWORD *)v51 + 3) = 0;
  *((_DWORD *)v51 + 8) = 0;
  *((_DWORD *)v51 + 9) = -1070596032;
  v52 = (char *)v243;
  v53 = v244 - (_BYTE *)v243;
  if ((unint64_t)(v244 - (_BYTE *)v243) > 0xFFFFFFFFFFFFFFEBLL)
  {
    v244 += 20;
  }
  else
  {
    sub_1C50429D8((unint64_t *)&v243, 0x14uLL);
    v52 = (char *)v243;
  }
  v54 = &v52[v53];
  *(_QWORD *)v54 = 0;
  *((_QWORD *)v54 + 1) = 0;
  *((_DWORD *)v54 + 4) = 0;
  v55 = (char *)v243;
  v56 = v244 - (_BYTE *)v243;
  if ((unint64_t)(v244 - (_BYTE *)v243) > 0xFFFFFFFFFFFFFFEDLL)
  {
    v244 += 18;
  }
  else
  {
    sub_1C50429D8((unint64_t *)&v243, 0x12uLL);
    v55 = (char *)v243;
  }
  v57 = &v55[v56];
  *(_QWORD *)v57 = 0x400000000;
  *((_QWORD *)v57 + 1) = 0x100000000;
  *((_WORD *)v57 + 8) = 2;
  if (byte_1ED81A517 < 0)
  {
    sub_1C47EBC30(__p, (void *)xmmword_1ED81A500, *((unint64_t *)&xmmword_1ED81A500 + 1));
  }
  else
  {
    *(_OWORD *)__p = xmmword_1ED81A500;
    *(_QWORD *)&__p[16] = unk_1ED81A510;
  }
  sub_1C599AD48((char *)&v243, (uint64_t)__p, 1);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  v58 = __src;
  v59 = __n;
  *(_QWORD *)__dst = v243;
  *(_QWORD *)&__dst[8] = v244 - (_BYTE *)v243;
  *(_QWORD *)&__dst[16] = __src;
  *(_QWORD *)&v238 = __n;
  llvm::MemoryBuffer::getMemBuffer((uint64_t *)__dst, (char **)__p);
  *(_QWORD *)&__p[8] = v58;
  *(_QWORD *)&__p[16] = v59;
  v271 = 0uLL;
  LODWORD(v272) = 420;
  v60 = (char *)operator new(0x60uLL);
  v61 = v271;
  *(_OWORD *)(v60 + 56) = *(_OWORD *)&__p[8];
  *(_OWORD *)(v60 + 72) = v61;
  v62 = *(_OWORD *)(v44 + 24);
  *(_OWORD *)(v60 + 8) = *(_OWORD *)(v44 + 8);
  *((_QWORD *)v60 + 6) = *(_QWORD *)__p;
  *((_DWORD *)v60 + 22) = v272;
  *(_QWORD *)v60 = *(_QWORD *)v44;
  *(_OWORD *)(v60 + 24) = v62;
  *((_DWORD *)v60 + 10) = *((_DWORD *)v44 + 10);
  operator delete(v44);
  v63 = v279;
  v240 = 0;
  v241 = 0;
  v242 = 0;
  if ((int)v279 > 34403)
    v64 = 8;
  else
    v64 = 4;
  if ((int)v279 > 34403)
    v65 = 0;
  else
    v65 = 256;
  sub_1C50429D8((unint64_t *)&v240, 0x14uLL);
  v66 = v240;
  *(_WORD *)v240 = v63;
  v66[1] = 2;
  *((_DWORD *)v66 + 1) = 0;
  *((_DWORD *)v66 + 2) = v64 + 100 + v64;
  *((_DWORD *)v66 + 3) = 1;
  v66[8] = 0;
  v66[9] = v65;
  if ((int)v279 > 34403)
    v67 = -1069547456;
  else
    v67 = -1070596032;
  if ((int)v279 > 34403)
    v21 = -1069547456;
  v68 = (char *)v240;
  v69 = v241 - (_BYTE *)v240;
  if ((unint64_t)(v241 - (_BYTE *)v240) > 0xFFFFFFFFFFFFFFAFLL)
  {
    v241 += 80;
  }
  else
  {
    sub_1C50429D8((unint64_t *)&v240, 0x50uLL);
    v68 = (char *)v240;
  }
  v70 = &v68[v69];
  *(_QWORD *)v70 = 0x352461746164692ELL;
  *((_QWORD *)v70 + 1) = 0;
  *((_DWORD *)v70 + 4) = v64;
  *((_DWORD *)v70 + 5) = 100;
  *((_QWORD *)v70 + 3) = 0;
  *((_DWORD *)v70 + 8) = 0;
  *((_DWORD *)v70 + 9) = v67;
  *((_QWORD *)v70 + 5) = 0x342461746164692ELL;
  *((_QWORD *)v70 + 6) = 0;
  *((_DWORD *)v70 + 14) = v64;
  *((_DWORD *)v70 + 15) = v64 + 100;
  *((_QWORD *)v70 + 8) = 0;
  *((_DWORD *)v70 + 18) = 0;
  *((_DWORD *)v70 + 19) = v21;
  v71 = (char *)v240;
  v72 = v241 - (_BYTE *)v240;
  if ((unint64_t)(v241 - (_BYTE *)v240) > 0xFFFFFFFFFFFFFFFBLL)
  {
    v241 += 4;
  }
  else
  {
    sub_1C50429D8((unint64_t *)&v240, 4uLL);
    v71 = (char *)v240;
  }
  *(_DWORD *)&v71[v72] = 0;
  if ((int)v279 > 34403)
  {
    v73 = (char *)v240;
    v74 = v241 - (_BYTE *)v240;
    if ((unint64_t)(v241 - (_BYTE *)v240) > 0xFFFFFFFFFFFFFFFBLL)
    {
      v241 += 4;
    }
    else
    {
      sub_1C50429D8((unint64_t *)&v240, 4uLL);
      v73 = (char *)v240;
    }
    *(_DWORD *)&v73[v74] = 0;
  }
  v75 = (char *)v240;
  v76 = v241 - (_BYTE *)v240;
  if ((unint64_t)(v241 - (_BYTE *)v240) > 0xFFFFFFFFFFFFFFFBLL)
  {
    v241 += 4;
  }
  else
  {
    sub_1C50429D8((unint64_t *)&v240, 4uLL);
    v75 = (char *)v240;
  }
  *(_DWORD *)&v75[v76] = 0;
  if ((int)v279 > 34403)
  {
    v77 = (char *)v240;
    v78 = v241 - (_BYTE *)v240;
    if ((unint64_t)(v241 - (_BYTE *)v240) > 0xFFFFFFFFFFFFFFFBLL)
    {
      v241 += 4;
    }
    else
    {
      sub_1C50429D8((unint64_t *)&v240, 4uLL);
      v77 = (char *)v240;
    }
    *(_DWORD *)&v77[v78] = 0;
  }
  v79 = (char *)v240;
  v80 = v241 - (_BYTE *)v240;
  if ((unint64_t)(v241 - (_BYTE *)v240) > 0xFFFFFFFFFFFFFFEDLL)
  {
    v241 += 18;
  }
  else
  {
    sub_1C50429D8((unint64_t *)&v240, 0x12uLL);
    v79 = (char *)v240;
  }
  v81 = &v79[v80];
  *(_QWORD *)v81 = 0x400000000;
  *((_QWORD *)v81 + 1) = 0x100000000;
  *((_WORD *)v81 + 8) = 2;
  if (SHIBYTE(v295) < 0)
  {
    sub_1C47EBC30(__p, (void *)v294, *((unint64_t *)&v294 + 1));
  }
  else
  {
    *(_OWORD *)__p = v294;
    *(_QWORD *)&__p[16] = v295;
  }
  sub_1C599AD48((char *)&v240, (uint64_t)__p, 1);
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  v82 = __src;
  v83 = __n;
  *(_QWORD *)__dst = v240;
  *(_QWORD *)&__dst[8] = v241 - (_BYTE *)v240;
  *(_QWORD *)&__dst[16] = __src;
  *(_QWORD *)&v238 = __n;
  llvm::MemoryBuffer::getMemBuffer((uint64_t *)__dst, (char **)__p);
  *(_QWORD *)&__p[8] = v82;
  *(_QWORD *)&__p[16] = v83;
  v271 = 0uLL;
  LODWORD(v272) = 420;
  v84 = (char *)operator new(0xC0uLL);
  v85 = v84;
  v232 = v84 + 192;
  v86 = *(_QWORD *)__p;
  *(_QWORD *)__p = 0;
  *((_QWORD *)v84 + 12) = v86;
  v87 = v271;
  *(_OWORD *)(v84 + 104) = *(_OWORD *)&__p[8];
  *(_OWORD *)(v84 + 120) = v87;
  *((_DWORD *)v84 + 34) = v272;
  v88 = v84 + 144;
  for (j = 48; j != -48; j -= 48)
  {
    v90 = &v84[j];
    v91 = *(_QWORD *)&v60[j];
    *(_QWORD *)&v60[j] = 0;
    *(_QWORD *)v90 = v91;
    *(_OWORD *)(v90 + 8) = *(_OWORD *)&v60[j + 8];
    *(_OWORD *)(v90 + 24) = *(_OWORD *)&v60[j + 24];
    *((_DWORD *)v90 + 10) = *(_DWORD *)&v60[j + 40];
  }
  for (k = 48; k != -48; k -= 48)
  {
    v93 = *(_QWORD *)&v60[k];
    *(_QWORD *)&v60[k] = 0;
    if (v93)
      (*(void (**)(uint64_t))(*(_QWORD *)v93 + 8))(v93);
  }
  operator delete(v60);
  if (*(_QWORD *)__p)
    (*(void (**)(_QWORD))(**(_QWORD **)__p + 8))(*(_QWORD *)__p);
  if (a6)
  {
    v94 = (__int128 *)((char *)a5 + 104 * a6);
    v95 = &v275;
    v231 = v94;
    do
    {
      if (*((char *)a5 + 23) < 0)
      {
        sub_1C47EBC30(__p, *(void **)a5, *((_QWORD *)a5 + 1));
      }
      else
      {
        v96 = *a5;
        *(_QWORD *)&__p[16] = *((_QWORD *)a5 + 2);
        *(_OWORD *)__p = v96;
      }
      if (*((char *)a5 + 47) < 0)
      {
        sub_1C47EBC30(&v271, *((void **)a5 + 3), *((_QWORD *)a5 + 4));
      }
      else
      {
        v97 = *(__int128 *)((char *)a5 + 24);
        v272 = *((_QWORD *)a5 + 5);
        v271 = v97;
      }
      if (*((char *)a5 + 71) < 0)
      {
        sub_1C47EBC30(v273, *((void **)a5 + 6), *((_QWORD *)a5 + 7));
      }
      else
      {
        v98 = a5[3];
        v274 = *((_QWORD *)a5 + 8);
        *(_OWORD *)v273 = v98;
      }
      if (*((char *)a5 + 95) < 0)
      {
        sub_1C47EBC30(&v275, *((void **)a5 + 9), *((_QWORD *)a5 + 10));
      }
      else
      {
        v99 = *(__int128 *)((char *)a5 + 72);
        v276 = *((_QWORD *)a5 + 11);
        v275 = v99;
      }
      v100 = *((_DWORD *)a5 + 24);
      v278 = *((_WORD *)a5 + 50);
      v277 = v100;
      if ((_BYTE)v278)
      {
        v101 = 3;
        goto LABEL_126;
      }
      v102 = HIBYTE(v277);
      if (HIBYTE(v278))
        v102 = 2;
      v230 = v102;
      v103 = HIBYTE(v274);
      v104 = v273[1];
      if (v274 >= 0)
        v105 = (void *)(HIBYTE(v274) & 0x7F);
      else
        v105 = v273[1];
      v106 = v105 == 0;
      v107 = 48;
      if (v106)
      {
        v107 = 0;
        v108 = (void **)__p;
      }
      else
      {
        v108 = v273;
      }
      v109 = __p[23];
      if (v106)
        v103 = __p[23];
      v110 = v103;
      v111 = *(void ***)&__p[v107];
      v112 = *(_QWORD *)&__p[8];
      if (v106)
        v104 = *(void **)&__p[8];
      if (v103 >= 0)
        v113 = v108;
      else
        v113 = v111;
      v114 = v103 & 0x7F;
      if (v110 >= 0)
        v115 = v114;
      else
        v115 = (size_t)v104;
      if (BYTE2(v277))
      {
        v116 = 0;
        goto LABEL_158;
      }
      if (__p[23] >= 0)
        v135 = __p;
      else
        v135 = *(_BYTE **)__p;
      if (__p[23] >= 0)
        v136 = __p[23] & 0x7F;
      else
        v136 = *(_QWORD *)&__p[8];
      if (v136)
      {
        if (*v135 == 95)
        {
          v137 = v113;
          v138 = memchr(v135, 64, v136);
          v113 = v137;
          if (v138)
          {
            if (v138 - v135 != -1 && !a8)
            {
              v116 = 4;
LABEL_257:
              v95 = &v275;
              goto LABEL_158;
            }
          }
        }
        if (v115 != v136)
        {
          v116 = 12;
          goto LABEL_257;
        }
        v151 = v113;
        v95 = &v275;
        if (memcmp(v113, v135, v115))
        {
          v116 = 12;
          v113 = v151;
          goto LABEL_158;
        }
        v113 = v151;
        if (v224 == 332 && *(_BYTE *)v151 == 95)
        {
          v116 = 8;
          goto LABEL_158;
        }
      }
      else
      {
        v95 = &v275;
        if (v115)
        {
          v116 = 12;
          goto LABEL_158;
        }
      }
      v116 = 4;
LABEL_158:
      v117 = SHIBYTE(v272);
      v118 = HIBYTE(v272) & 0x7F;
      if (v272 < 0)
        v118 = *((_QWORD *)&v271 + 1);
      v229 = v116;
      if (!v118)
      {
        if (v115 >= 0x7FFFFFFFFFFFFFF8)
          goto LABEL_373;
        v94 = v231;
        if (v115 >= 0x17)
        {
          v145 = (v115 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v115 | 7) != 0x17)
            v145 = v115 | 7;
          v146 = v145 + 1;
          v147 = v113;
          v148 = operator new(v145 + 1);
          v113 = v147;
          v139 = v148;
          v149 = v146 | 0x8000000000000000;
          v95 = &v275;
          *(_QWORD *)&__dst[8] = v115;
          *(_QWORD *)&__dst[16] = v149;
          *(_QWORD *)__dst = v148;
        }
        else
        {
          __dst[23] = v115;
          v139 = __dst;
          if (!v115)
          {
LABEL_221:
            v139[v115] = 0;
            v269 &= ~1u;
            *(_OWORD *)v267 = *(_OWORD *)__dst;
            v268 = *(const char **)&__dst[16];
            if ((v269 & 1) != 0)
              goto LABEL_222;
            goto LABEL_176;
          }
        }
        memmove(v139, v113, v115);
        goto LABEL_221;
      }
      v235 = v118;
      v119 = *(_BYTE **)__p;
      v120 = v271;
      if (v109 >= 0)
        v121 = __p;
      else
        v121 = *(char **)__p;
      if (v109 >= 0)
        v112 = v109 & 0x7F;
      v122 = (const char *)&v271;
      if (v272 < 0)
        v122 = (const char *)v271;
      v233 = (uint64_t)v113;
      v234 = v122;
      v266[0] = (uint64_t)v113;
      v266[1] = v115;
      v123 = llvm::StringRef::find(v266, v121, v112, 0);
      if (v123 != -1)
      {
        v124 = v112;
LABEL_170:
        if (v115 >= v123)
          v125 = v123;
        else
          v125 = v115;
        v259 = (__int128 *)v233;
        v260 = v125;
        v261 = v234;
        v262 = v235;
        v263 = 1285;
        v126 = v124 + v123;
        if (v115 < v124 + v123)
          v126 = v115;
        *(_QWORD *)__dst = &v259;
        *(_QWORD *)&__dst[16] = v233 + v126;
        *(_QWORD *)&v238 = v115 - v126;
        WORD4(v238) = 1282;
        llvm::Twine::str((llvm::Twine *)__dst, &v255);
        v269 &= ~1u;
        *(_OWORD *)v267 = v255;
        v268 = v256;
        v94 = v231;
        v95 = &v275;
        if ((v269 & 1) != 0)
          goto LABEL_222;
        goto LABEL_176;
      }
      v140 = v233;
      if (v112)
      {
        v142 = v234;
        v141 = v235;
        if (*v121 == 95 && *v234 == 95)
        {
          v143 = __p;
          if (v109 < 0)
            v143 = v119;
          v121 = v143 + 1;
          --v112;
          v144 = (char *)&v271 + 1;
          if (v117 < 0)
            v144 = (const char *)(v120 + 1);
          v234 = v144;
          --v235;
          v124 = v112;
          v123 = llvm::StringRef::find(v266, v121, v112, 0);
          if (v123 != -1)
            goto LABEL_170;
          v140 = v233;
          v142 = v234;
          v141 = v235;
        }
      }
      else
      {
        v142 = v234;
        v141 = v235;
      }
      v250 = 773;
      v249[0] = v140;
      v249[1] = v115;
      v249[2] = ": replacing '";
      v251[0] = v249;
      v251[2] = v121;
      v251[3] = v112;
      v252 = 1282;
      v253[0] = v251;
      v253[2] = "' with '";
      v254 = 770;
      *(_QWORD *)&v255 = v253;
      v256 = v142;
      v257 = v141;
      v258 = 1282;
      v259 = &v255;
      v261 = "' failed";
      v263 = 770;
      llvm::Twine::str((llvm::Twine *)&v259, v264);
      if (v265 >= 0)
        v161 = v264;
      else
        v161 = (void **)v264[0];
      if (v265 >= 0)
        v162 = (void *)(v265 & 0x7F);
      else
        v162 = v264[1];
      v163 = operator new();
      WORD4(v238) = 261;
      *(_QWORD *)__dst = v161;
      *(_QWORD *)&__dst[8] = v162;
      v164 = atomic_load(qword_1EF8F7238);
      v95 = &v275;
      if (!v164)
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
      v165 = qword_1EF8F7238[0];
      *(_QWORD *)v163 = off_1E81A0C88;
      llvm::Twine::str((llvm::Twine *)__dst, (_QWORD *)(v163 + 8));
      *(_QWORD *)(v163 + 32) = 3;
      *(_QWORD *)(v163 + 40) = v165;
      *(_BYTE *)(v163 + 48) = 1;
      v166 = v269 | 1;
      v269 |= 1u;
      v267[0] = v163;
      v94 = v231;
      if (v265 < 0)
      {
        operator delete(v264[0]);
        v166 = v269;
      }
      if ((v166 & 1) != 0)
      {
LABEL_222:
        v150 = v267[0];
        v267[0] = 0;
        *a9 = (char *)v150;
        v101 = 1;
        goto LABEL_310;
      }
LABEL_176:
      if (v276 >= 0)
        v127 = HIBYTE(v276) & 0x7F;
      else
        v127 = *((_QWORD *)&v275 + 1);
      v128 = v267[1];
      v129 = SHIBYTE(v268);
      if (!v127)
      {
        v130 = HIBYTE(v268) & 0x7F;
LABEL_321:
        if (v129 >= 0)
          v196 = v267;
        else
          v196 = (size_t *)v267[0];
        if (v129 >= 0)
          v197 = v130;
        else
          v197 = v128;
        v198 = (unsigned __int16)v277;
        v199 = __n + v197;
        v200 = __n + v197 + 22;
        v201 = sub_1C484358C((uint64_t)&v280, v200, 0);
        bzero((void *)v201, v200);
        *(_WORD *)(v201 + 2) = -1;
        *(_WORD *)(v201 + 6) = v279;
        *(_DWORD *)(v201 + 12) = v199 + 2;
        if (v198)
          *(_WORD *)(v201 + 16) = v198;
        *(_WORD *)(v201 + 18) = v229 | v230;
        memcpy((void *)(v201 + 20), v196, v197);
        memcpy((void *)(v197 + v201 + 20 + 1), __src, __n);
        v202 = __src;
        v203 = __n;
        v259 = (__int128 *)v201;
        v260 = v200;
        v261 = (const char *)__src;
        v262 = __n;
        llvm::MemoryBuffer::getMemBuffer((uint64_t *)&v259, (char **)__dst);
        *(_QWORD *)&__dst[8] = v202;
        *(_QWORD *)&__dst[16] = v203;
        v238 = 0uLL;
        v239 = 420;
        v204 = v232;
        if (v88 >= v232)
        {
          v208 = 0xAAAAAAAAAAAAAAABLL * ((v88 - v85) >> 4) + 1;
          v95 = &v275;
          if (v208 > 0x555555555555555)
LABEL_373:
            abort();
          if (0x5555555555555556 * ((v232 - v85) >> 4) > v208)
            v208 = 0x5555555555555556 * ((v232 - v85) >> 4);
          if (0xAAAAAAAAAAAAAAABLL * ((v232 - v85) >> 4) >= 0x2AAAAAAAAAAAAAALL)
            v209 = 0x555555555555555;
          else
            v209 = v208;
          if (v209)
          {
            if (v209 > 0x555555555555555)
LABEL_374:
              sub_1C4764EE4();
            v210 = (char *)operator new(48 * v209);
          }
          else
          {
            v210 = 0;
          }
          v211 = &v210[16 * ((v88 - v85) >> 4)];
          v212 = *(_QWORD *)__dst;
          *(_QWORD *)__dst = 0;
          *(_QWORD *)v211 = v212;
          v213 = v238;
          *(_OWORD *)(v211 + 8) = *(_OWORD *)&__dst[8];
          *(_OWORD *)(v211 + 24) = v213;
          *((_DWORD *)v211 + 10) = v239;
          if (v88 == v85)
          {
            v215 = &v210[16 * ((v88 - v85) >> 4)];
          }
          else
          {
            v214 = v88;
            v215 = &v210[16 * ((v88 - v85) >> 4)];
            do
            {
              v216 = *((_QWORD *)v214 - 6);
              v214 -= 48;
              *(_QWORD *)v214 = 0;
              *((_QWORD *)v215 - 6) = v216;
              v215 -= 48;
              v217 = *(_OWORD *)(v214 + 8);
              v218 = *(_OWORD *)(v214 + 24);
              *((_DWORD *)v215 + 10) = *((_DWORD *)v214 + 10);
              *(_OWORD *)(v215 + 24) = v218;
              *(_OWORD *)(v215 + 8) = v217;
            }
            while (v214 != v85);
            do
            {
              v220 = *((_QWORD *)v88 - 6);
              v88 -= 48;
              v219 = v220;
              *(_QWORD *)v88 = 0;
              if (v220)
                (*(void (**)(uint64_t))(*(_QWORD *)v219 + 8))(v219);
            }
            while (v88 != v85);
          }
          v204 = &v210[48 * v209];
          v88 = v211 + 48;
          if (v85)
            operator delete(v85);
          v85 = v215;
        }
        else
        {
          v205 = *(_QWORD *)__dst;
          *(_QWORD *)__dst = 0;
          *(_QWORD *)v88 = v205;
          v206 = *(_OWORD *)&__dst[8];
          v207 = v238;
          *((_DWORD *)v88 + 10) = v239;
          *(_OWORD *)(v88 + 24) = v207;
          *(_OWORD *)(v88 + 8) = v206;
          v88 += 48;
          v95 = &v275;
        }
        v232 = v204;
        if (*(_QWORD *)__dst)
          (*(void (**)(_QWORD))(**(_QWORD **)__dst + 8))(*(_QWORD *)__dst);
        v101 = 0;
        goto LABEL_310;
      }
      v130 = HIBYTE(v268) & 0x7F;
      if (SHIBYTE(v268) >= 0)
        v131 = HIBYTE(v268) & 0x7F;
      else
        v131 = v267[1];
      if (v276 < 0)
        v95 = (__int128 *)v275;
      if (v131 == v127)
      {
        if ((HIBYTE(v268) & 0x80) != 0)
        {
          if (!memcmp((const void *)v267[0], v95, v267[1]))
            goto LABEL_321;
        }
        else
        {
          if ((HIBYTE(v268) & 0x7F) == 0)
          {
            v130 = 0;
            goto LABEL_321;
          }
          v132 = v267;
          v133 = (unsigned __int8 *)v95;
          v134 = HIBYTE(v268) & 0x7F;
          while (*(unsigned __int8 *)v132 == *v133)
          {
            v132 = (size_t *)((char *)v132 + 1);
            ++v133;
            if (!--v134)
              goto LABEL_321;
          }
        }
      }
      if (v129 >= 0)
        v152 = v267;
      else
        v152 = (size_t *)v267[0];
      sub_1C599AA88((uint64_t)__dst, (int *)&v279, (uint64_t)v95, v127, (uint64_t)v152, v131, 0);
      v153 = v232;
      if (v88 >= v232)
      {
        v158 = 0xAAAAAAAAAAAAAAABLL * ((v88 - v85) >> 4) + 1;
        v95 = &v275;
        if (v158 > 0x555555555555555)
          goto LABEL_373;
        if (0x5555555555555556 * ((v232 - v85) >> 4) > v158)
          v158 = 0x5555555555555556 * ((v232 - v85) >> 4);
        if (0xAAAAAAAAAAAAAAABLL * ((v232 - v85) >> 4) >= 0x2AAAAAAAAAAAAAALL)
          v159 = 0x555555555555555;
        else
          v159 = v158;
        if (v159)
        {
          if (v159 > 0x555555555555555)
            goto LABEL_374;
          v160 = (char *)operator new(48 * v159);
        }
        else
        {
          v160 = 0;
        }
        v167 = &v160[16 * ((v88 - v85) >> 4)];
        v168 = *(_QWORD *)__dst;
        *(_QWORD *)__dst = 0;
        *(_QWORD *)v167 = v168;
        v169 = v238;
        *(_OWORD *)(v167 + 8) = *(_OWORD *)&__dst[8];
        *(_OWORD *)(v167 + 24) = v169;
        *((_DWORD *)v167 + 10) = v239;
        if (v88 == v85)
        {
          v171 = &v160[16 * ((v88 - v85) >> 4)];
        }
        else
        {
          v170 = v88;
          v171 = &v160[16 * ((v88 - v85) >> 4)];
          do
          {
            v172 = *((_QWORD *)v170 - 6);
            v170 -= 48;
            *(_QWORD *)v170 = 0;
            *((_QWORD *)v171 - 6) = v172;
            v171 -= 48;
            v173 = *(_OWORD *)(v170 + 8);
            v174 = *(_OWORD *)(v170 + 24);
            *((_DWORD *)v171 + 10) = *((_DWORD *)v170 + 10);
            *(_OWORD *)(v171 + 24) = v174;
            *(_OWORD *)(v171 + 8) = v173;
          }
          while (v170 != v85);
          do
          {
            v176 = *((_QWORD *)v88 - 6);
            v88 -= 48;
            v175 = v176;
            *(_QWORD *)v88 = 0;
            if (v176)
              (*(void (**)(uint64_t))(*(_QWORD *)v175 + 8))(v175);
          }
          while (v88 != v85);
        }
        v153 = &v160[48 * v159];
        v157 = v167 + 48;
        if (v85)
          operator delete(v85);
        v85 = v171;
      }
      else
      {
        v154 = *(_QWORD *)__dst;
        *(_QWORD *)__dst = 0;
        *(_QWORD *)v88 = v154;
        v155 = *(_OWORD *)&__dst[8];
        v156 = v238;
        *((_DWORD *)v88 + 10) = v239;
        *(_OWORD *)(v88 + 24) = v156;
        *(_OWORD *)(v88 + 8) = v155;
        v157 = v88 + 48;
        v95 = &v275;
      }
      if (*(_QWORD *)__dst)
        (*(void (**)(_QWORD))(**(_QWORD **)__dst + 8))(*(_QWORD *)__dst);
      if (v276 >= 0)
        v177 = &v275;
      else
        v177 = (__int128 *)v275;
      if (v276 >= 0)
        v178 = HIBYTE(v276) & 0x7F;
      else
        v178 = *((_QWORD *)&v275 + 1);
      if (SHIBYTE(v268) >= 0)
        v179 = v267;
      else
        v179 = (size_t *)v267[0];
      if (SHIBYTE(v268) >= 0)
        v180 = HIBYTE(v268) & 0x7F;
      else
        v180 = v267[1];
      sub_1C599AA88((uint64_t)__dst, (int *)&v279, (uint64_t)v177, v178, (uint64_t)v179, v180, 1);
      if (v157 >= v153)
      {
        v182 = 0xAAAAAAAAAAAAAAABLL * ((v157 - v85) >> 4) + 1;
        if (v182 > 0x555555555555555)
          goto LABEL_373;
        if (0x5555555555555556 * ((v153 - v85) >> 4) > v182)
          v182 = 0x5555555555555556 * ((v153 - v85) >> 4);
        if (0xAAAAAAAAAAAAAAABLL * ((v153 - v85) >> 4) >= 0x2AAAAAAAAAAAAAALL)
          v183 = 0x555555555555555;
        else
          v183 = v182;
        if (v183)
        {
          if (v183 > 0x555555555555555)
            goto LABEL_374;
          v184 = (char *)operator new(48 * v183);
        }
        else
        {
          v184 = 0;
        }
        v185 = &v184[16 * ((v157 - v85) >> 4)];
        v186 = *(_QWORD *)__dst;
        *(_QWORD *)__dst = 0;
        *(_QWORD *)v185 = v186;
        v187 = v238;
        *(_OWORD *)(v185 + 8) = *(_OWORD *)&__dst[8];
        *(_OWORD *)(v185 + 24) = v187;
        *((_DWORD *)v185 + 10) = v239;
        if (v157 == v85)
        {
          v189 = &v184[16 * ((v157 - v85) >> 4)];
        }
        else
        {
          v188 = v157;
          v189 = &v184[16 * ((v157 - v85) >> 4)];
          do
          {
            v190 = *((_QWORD *)v188 - 6);
            v188 -= 48;
            *(_QWORD *)v188 = 0;
            *((_QWORD *)v189 - 6) = v190;
            v189 -= 48;
            v191 = *(_OWORD *)(v188 + 8);
            v192 = *(_OWORD *)(v188 + 24);
            *((_DWORD *)v189 + 10) = *((_DWORD *)v188 + 10);
            *(_OWORD *)(v189 + 24) = v192;
            *(_OWORD *)(v189 + 8) = v191;
          }
          while (v188 != v85);
          do
          {
            v194 = *((_QWORD *)v157 - 6);
            v157 -= 48;
            v193 = v194;
            *(_QWORD *)v157 = 0;
            if (v194)
              (*(void (**)(uint64_t))(*(_QWORD *)v193 + 8))(v193);
          }
          while (v157 != v85);
          if (!v85)
            goto LABEL_306;
        }
        operator delete(v85);
LABEL_306:
        v88 = v185 + 48;
        v232 = &v184[48 * v183];
        if (*(_QWORD *)__dst)
          (*(void (**)(_QWORD))(**(_QWORD **)__dst + 8))(*(_QWORD *)__dst);
        v85 = v189;
        goto LABEL_309;
      }
      v232 = v153;
      *(_QWORD *)v157 = *(_QWORD *)__dst;
      v181 = v238;
      *(_OWORD *)(v157 + 8) = *(_OWORD *)&__dst[8];
      *(_OWORD *)(v157 + 24) = v181;
      *((_DWORD *)v157 + 10) = v239;
      v88 = v157 + 48;
LABEL_309:
      v101 = 3;
LABEL_310:
      if ((v269 & 1) != 0)
      {
        v195 = v267[0];
        v267[0] = 0;
        if (v195)
          (*(void (**)(size_t))(*(_QWORD *)v195 + 8))(v195);
      }
      else if (SHIBYTE(v268) < 0)
      {
        operator delete((void *)v267[0]);
      }
LABEL_126:
      if (SHIBYTE(v276) < 0)
        operator delete((void *)v275);
      if (SHIBYTE(v274) < 0)
        operator delete(v273[0]);
      if (SHIBYTE(v272) < 0)
        operator delete((void *)v271);
      if ((__p[23] & 0x80000000) != 0)
        operator delete(*(void **)__p);
      if (v101 != 3 && v101)
        goto LABEL_357;
      a5 = (__int128 *)((char *)a5 + 104);
    }
    while (a5 != v94);
  }
  v236 = 0;
  llvm::writeArchive(a3, a4, (uint64_t)v85, (char *)(0xAAAAAAAAAAAAAAABLL * ((v88 - v85) >> 4)), 1, 0, 1, 0, a9, &v236);
  v221 = v236;
  v236 = 0;
  if (v221)
    (*(void (**)(uint64_t))(*(_QWORD *)v221 + 8))(v221);
LABEL_357:
  if (v240)
  {
    v241 = (char *)v240;
    operator delete(v240);
  }
  if (v243)
  {
    v244 = (char *)v243;
    operator delete(v243);
  }
  if (v246)
  {
    v247 = (char *)v246;
    operator delete(v246);
  }
  if (SHIBYTE(v295) < 0)
    operator delete((void *)v294);
  if (SHIBYTE(v293) < 0)
    operator delete((void *)v292);
  sub_1C4926AE8((uint64_t)&v280);
  if (v85)
  {
    while (v88 != v85)
    {
      v223 = *((_QWORD *)v88 - 6);
      v88 -= 48;
      v222 = v223;
      *(_QWORD *)v88 = 0;
      if (v223)
        (*(void (**)(uint64_t))(*(_QWORD *)v222 + 8))(v222);
    }
    operator delete(v85);
  }
}

void sub_1C599AA88(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  int v14;
  char *v15;
  char *v16;
  int64_t v17;
  char *v18;
  uint64_t v19;
  char *v20;
  int64_t v21;
  char *v22;
  const char *v23;
  uint64_t i;
  void *v25;
  uint64_t v26;
  uint64_t v27;
  _QWORD v28[4];
  __int16 v29;
  _QWORD v30[4];
  __int16 v31;
  void *__p;
  char *v33;
  uint64_t v34;
  uint64_t v35[3];
  _QWORD v36[5];

  v36[3] = *MEMORY[0x1E0C80C00];
  __p = 0;
  v33 = 0;
  v34 = 0;
  v14 = *a2;
  sub_1C50429D8((unint64_t *)&__p, 0x14uLL);
  v15 = (char *)__p;
  *(_WORD *)__p = v14;
  *((_WORD *)v15 + 1) = 1;
  *(_QWORD *)(v15 + 4) = 0x3C00000000;
  *(_QWORD *)(v15 + 12) = 5;
  v16 = (char *)__p;
  v17 = v33 - (_BYTE *)__p;
  if ((unint64_t)(v33 - (_BYTE *)__p) > 0xFFFFFFFFFFFFFFD7)
  {
    v33 += 40;
  }
  else
  {
    sub_1C50429D8((unint64_t *)&__p, 0x28uLL);
    v16 = (char *)__p;
  }
  v18 = &v16[v17];
  *(_QWORD *)v18 = 0x657674636572642ELL;
  *((_QWORD *)v18 + 1) = 0;
  *((_QWORD *)v18 + 2) = 0;
  *((_QWORD *)v18 + 3) = 0;
  *((_QWORD *)v18 + 4) = 0xA0000000000;
  if (a7)
    v19 = 6;
  else
    v19 = 0;
  v20 = (char *)__p;
  v21 = v33 - (_BYTE *)__p;
  if ((unint64_t)(v33 - (_BYTE *)__p) > 0xFFFFFFFFFFFFFFA5)
  {
    v33 += 90;
  }
  else
  {
    sub_1C50429D8((unint64_t *)&__p, 0x5AuLL);
    v20 = (char *)__p;
  }
  v22 = &v20[v21];
  *(_QWORD *)v22 = 0x64692E706D6F6340;
  *((_QWORD *)v22 + 1) = 0xFFFF00000000;
  *((_QWORD *)v22 + 2) = 0x2E74616566400003;
  *((_WORD *)v22 + 12) = 12336;
  *(_QWORD *)(v22 + 26) = 0xFFFF00000000;
  v22[34] = 3;
  *(_DWORD *)(v22 + 35) = 0;
  v22[39] = 0;
  *((_DWORD *)v22 + 10) = 4;
  *(_QWORD *)(v22 + 44) = 0;
  v22[52] = 2;
  *(_DWORD *)(v22 + 53) = 0;
  v22[57] = 0;
  *(_DWORD *)(v22 + 58) = a4 + v19 + 5;
  *(_QWORD *)(v22 + 62) = 0;
  *(_DWORD *)(v22 + 70) = 131433;
  *((_WORD *)v22 + 37) = 0;
  v22[76] = 3;
  *(_QWORD *)(v22 + 82) = 0;
  *(_QWORD *)(v22 + 77) = 0;
  if (a7)
    v23 = "__imp_";
  else
    v23 = "";
  v30[0] = v23;
  v30[1] = v19;
  v30[2] = a3;
  v30[3] = a4;
  v31 = 1285;
  llvm::Twine::str((llvm::Twine *)v30, v35);
  v28[0] = v23;
  v28[1] = v19;
  v28[2] = a5;
  v28[3] = a6;
  v29 = 1285;
  llvm::Twine::str((llvm::Twine *)v28, v36);
  sub_1C599AD48((char *)&__p, (uint64_t)v35, 2);
  for (i = 0; i != -6; i -= 3)
  {
    if (SHIBYTE(v36[i + 2]) < 0)
      operator delete((void *)v35[i + 3]);
  }
  v25 = (void *)sub_1C484358C((uint64_t)(a2 + 2), v33 - (_BYTE *)__p, 0);
  memcpy(v25, __p, v33 - (_BYTE *)__p);
  v27 = *((_QWORD *)a2 + 13);
  v26 = *((_QWORD *)a2 + 14);
  v35[0] = (uint64_t)v25;
  v35[1] = v33 - (_BYTE *)__p;
  v35[2] = v27;
  v36[0] = v26;
  llvm::MemoryBuffer::getMemBuffer(v35, (char **)a1);
  *(_QWORD *)(a1 + 8) = v27;
  *(_QWORD *)(a1 + 16) = v26;
  *(_QWORD *)(a1 + 24) = 0;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = 420;
  if (__p)
  {
    v33 = (char *)__p;
    operator delete(__p);
  }
}

char *sub_1C599AD48(char *result, uint64_t a2, uint64_t a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  unint64_t *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t v12;
  unint64_t v13;
  const char *v14;
  uint64_t v15;

  v3 = *(_QWORD *)result;
  v4 = *((_QWORD *)result + 1);
  v5 = v4 - *(_QWORD *)result;
  if (a3)
  {
    v7 = (unint64_t *)result;
    v8 = v5 + 4;
    v9 = 24 * a3;
    do
    {
      if (*(char *)(a2 + 23) < 0)
        v10 = *(_QWORD *)(a2 + 8);
      else
        v10 = *(unsigned __int8 *)(a2 + 23);
      v11 = v10 + v8 + 1;
      v12 = *v7;
      v13 = v7[1] - *v7;
      if (v11 <= v13)
      {
        if (v11 < v13)
          v7[1] = v12 + v11;
      }
      else
      {
        sub_1C50429D8(v7, v11 - v13);
        v12 = *v7;
      }
      v14 = (const char *)a2;
      if (*(char *)(a2 + 23) < 0)
        v14 = *(const char **)a2;
      result = strcpy((char *)(v12 + v8), v14);
      if (*(char *)(a2 + 23) < 0)
        v15 = *(_QWORD *)(a2 + 8);
      else
        v15 = *(unsigned __int8 *)(a2 + 23);
      v8 += v15 + 1;
      a2 += 24;
      v9 -= 24;
    }
    while (v9);
    v3 = *v7;
    v4 = v7[1];
  }
  *(_DWORD *)(v3 + v5) = v4 - v3 - v5;
  return result;
}

uint64_t sub_1C599AE24()
{
  *(_QWORD *)&xmmword_1ED81A500 = operator new(0x20uLL);
  *(__int128 *)((char *)&xmmword_1ED81A500 + 8) = xmmword_1C640C690;
  strcpy((char *)xmmword_1ED81A500, "__NULL_IMPORT_DESCRIPTOR");
  return __cxa_atexit((void (*)(void *))MEMORY[0x1E0DE44D0], &xmmword_1ED81A500, &dword_1C475E000);
}

void llvm::object::parseCOFFModuleDefinition(__int128 *a1@<X0>, int a2@<W1>, char a3@<W2>, uint64_t a4@<X8>)
{
  __int128 v4;
  int v5;
  __int128 v6;
  __int128 v7;
  std::string::size_type v8;
  const void *v9;
  std::string *p_dst;
  uint64_t v11;
  uint64_t v12;
  __int128 v13;
  __int128 v14;
  _OWORD *v15;
  __int128 v16;
  char *v17;
  _OWORD *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  char *v22;
  std::string::size_type v23;
  const void *v24;
  std::string *v25;
  uint64_t v26;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;
  char *v31;
  char *v32;
  __int128 v33;
  std::string *v34;
  std::string::size_type size;
  std::string *v36;
  std::string::size_type v37;
  std::string *v38;
  std::string *v39;
  std::string *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  uint64_t v44;
  unint64_t v45;
  unsigned __int8 *v46;
  uint64_t v47;
  int v48;
  int v49;
  unsigned int v50;
  unint64_t v51;
  std::string::size_type v53;
  const void *v54;
  std::string *v55;
  uint64_t v56;
  uint64_t v57;
  unsigned __int8 *v58;
  size_t v59;
  uint64_t v60;
  unint64_t v61;
  unsigned __int8 *v62;
  int v63;
  int v64;
  unsigned int v65;
  __int128 v66;
  _OWORD *v67;
  __int128 v68;
  char *v69;
  _OWORD *v70;
  unint64_t v71;
  unint64_t v72;
  unint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  __int128 v77;
  char *v78;
  char *v79;
  unint64_t v80;
  unint64_t v81;
  unint64_t v82;
  char *v83;
  __int128 v84;
  char *v85;
  char *v86;
  unint64_t v87;
  unint64_t v88;
  char *v89;
  char *v90;
  __int128 v91;
  __int128 v92;
  char *v93;
  __int128 v94;
  char *v95;
  _BYTE *v96;
  __int128 v97;
  _BYTE *v98;
  __int128 v99;
  _BYTE *v100;
  __int128 v101;
  int v102;
  unint64_t *v103;
  unint64_t *v104;
  __int128 v105;
  std::string::size_type v106;
  const void *v107;
  std::string *v108;
  _OWORD *v109;
  __int128 v110;
  char *v111;
  _OWORD *v112;
  __int128 v113;
  char *v114;
  _OWORD *v115;
  unint64_t v116;
  unint64_t v117;
  char *v118;
  uint64_t v119;
  uint64_t v120;
  const void *v121;
  std::string *v122;
  __int128 v123;
  unint64_t v124;
  std::string::size_type v125;
  std::string::size_type v126;
  unint64_t v127;
  unint64_t v128;
  unsigned __int8 *v129;
  unint64_t v130;
  __int128 v131;
  _OWORD *v132;
  __int128 v133;
  char *v134;
  uint64_t v135;
  unint64_t v136;
  int v137;
  int v138;
  unsigned int v139;
  unint64_t v140;
  unint64_t v141;
  int v142;
  int v143;
  unsigned int v144;
  unint64_t v145;
  _OWORD *v146;
  unint64_t v147;
  unint64_t v148;
  unint64_t v149;
  char *v150;
  _OWORD *v151;
  unint64_t v152;
  unint64_t v153;
  char *v154;
  char *v155;
  char *v156;
  __int128 v157;
  uint64_t v158;
  unint64_t v160;
  char *v161;
  char *v162;
  __int128 v163;
  char *v164;
  char *v165;
  __int128 v166;
  void *v167;
  uint64_t v168;
  const std::string::value_type *v169;
  char *v170;
  char *v171;
  int64_t v172;
  unint64_t v173;
  char *v174;
  uint64_t v175;
  char *v176;
  char *v177;
  __int128 v178;
  char *v179;
  void **v180;
  __int128 v181;
  char *v182;
  void **v183;
  __int128 v184;
  char *v185;
  void **v186;
  __int128 v187;
  char *v188;
  int v189;
  _BYTE *v190;
  unint64_t v192;
  _BYTE *v193;
  __int128 v194;
  void **v195;
  void **v196;
  void *v197;
  unint64_t v198;
  unint64_t v199;
  __int128 v201;
  _BYTE v202[32];
  __int128 v203;
  int v204;
  void *v205[2];
  void *v206[4];
  void *__p[2];
  _QWORD v208[8];
  char v209;
  uint64_t v210;
  std::string __dst;
  uint64_t v212;
  __int16 v213;
  std::string __str[2];
  __int128 v215;
  _OWORD v216[4];

  v201 = *a1;
  *(_DWORD *)v202 = 0;
  *(_QWORD *)&v202[8] = "";
  *(_OWORD *)&v202[16] = 0u;
  v203 = 0u;
  v204 = a2;
  *(_OWORD *)v205 = 0u;
  memset(v206, 0, sizeof(v206));
  *(_OWORD *)__p = 0u;
  memset(v208, 0, sizeof(v208));
  v209 = a3;
  while (2)
  {
    if (*(_QWORD *)&v202[24] == (_QWORD)v203)
    {
      sub_1C599CA38((uint64_t)__str, (uint64_t *)&v201);
      *(std::string *)v202 = __str[0];
    }
    else
    {
      v4 = *(_OWORD *)(v203 - 24);
      *(_QWORD *)&v202[16] = *(_QWORD *)(v203 - 8);
      *(_OWORD *)v202 = v4;
      *(_QWORD *)&v203 = v203 - 24;
    }
    v5 = *(_DWORD *)v202;
    switch(*(_DWORD *)v202)
    {
      case 1:
        goto LABEL_364;
      case 9:
LABEL_8:
        if (*(_QWORD *)&v202[24] == (_QWORD)v203)
        {
          sub_1C599CA38((uint64_t)__str, (uint64_t *)&v201);
          *(std::string *)v202 = __str[0];
        }
        else
        {
          v7 = *(_OWORD *)(v203 - 24);
          *(_QWORD *)&v202[16] = *(_QWORD *)(v203 - 8);
          *(_OWORD *)v202 = v7;
          *(_QWORD *)&v203 = v203 - 24;
        }
        if (*(_DWORD *)v202 != 2)
        {
          v112 = (_OWORD *)v203;
          if ((unint64_t)v203 >= *((_QWORD *)&v203 + 1))
          {
            v146 = *(_OWORD **)&v202[24];
            v147 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v203 - *(_QWORD *)&v202[24]) >> 3);
            v148 = v147 + 1;
            if (v147 + 1 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_415;
            if (0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v203 + 1) - *(_QWORD *)&v202[24]) >> 3) > v148)
              v148 = 0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v203 + 1) - *(_QWORD *)&v202[24]) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v203 + 1) - *(_QWORD *)&v202[24]) >> 3) >= 0x555555555555555)
              v149 = 0xAAAAAAAAAAAAAAALL;
            else
              v149 = v148;
            if (v149)
            {
              if (v149 > 0xAAAAAAAAAAAAAAALL)
                goto LABEL_416;
              v150 = (char *)operator new(24 * v149);
            }
            else
            {
              v150 = 0;
            }
            v161 = &v150[24 * v147];
            *(_OWORD *)v161 = *(_OWORD *)v202;
            *((_QWORD *)v161 + 2) = *(_QWORD *)&v202[16];
            v162 = v161;
            if (v112 != v146)
            {
              do
              {
                v163 = *(_OWORD *)((char *)v112 - 24);
                *((_QWORD *)v162 - 1) = *((_QWORD *)v112 - 1);
                *(_OWORD *)(v162 - 24) = v163;
                v162 -= 24;
                v112 = (_OWORD *)((char *)v112 - 24);
              }
              while (v112 != v146);
              v112 = *(_OWORD **)&v202[24];
            }
            v114 = v161 + 24;
            *(_QWORD *)&v202[24] = v162;
            *(_QWORD *)&v203 = v161 + 24;
            *((_QWORD *)&v203 + 1) = &v150[24 * v149];
            if (v112)
              operator delete(v112);
          }
          else
          {
            v113 = *(_OWORD *)v202;
            *(_QWORD *)(v203 + 16) = *(_QWORD *)&v202[16];
            *v112 = v113;
            v114 = (char *)v112 + 24;
          }
          *(_QWORD *)&v203 = v114;
LABEL_357:
          if (*(_DWORD *)v202 == 1)
          {
LABEL_364:
            *(_BYTE *)(a4 + 128) &= ~1u;
            *(_QWORD *)(a4 + 8) = 0;
            *(_QWORD *)(a4 + 16) = 0;
            *(_QWORD *)a4 = 0;
            v170 = (char *)v205[0];
            v171 = (char *)v205[1];
            v172 = (char *)v205[1] - (char *)v205[0];
            if (v205[1] != v205[0])
            {
              v173 = 0x4EC4EC4EC4EC4EC5 * (v172 >> 3);
              if (v173 >= 0x276276276276277)
                goto LABEL_415;
              v174 = (char *)operator new(v172);
              v175 = 0;
              *(_QWORD *)a4 = v174;
              *(_QWORD *)(a4 + 8) = v174;
              *(_QWORD *)(a4 + 16) = &v174[104 * v173];
              do
              {
                v176 = &v170[v175];
                v177 = &v174[v175];
                if (v170[v175 + 23] < 0)
                {
                  sub_1C47EBC30(v177, *(void **)v176, *((_QWORD *)v176 + 1));
                }
                else
                {
                  v178 = *(_OWORD *)v176;
                  *((_QWORD *)v177 + 2) = *((_QWORD *)v176 + 2);
                  *(_OWORD *)v177 = v178;
                }
                v179 = &v174[v175 + 24];
                v180 = (void **)&v170[v175 + 24];
                if (v170[v175 + 47] < 0)
                {
                  sub_1C47EBC30(v179, *v180, *(_QWORD *)&v170[v175 + 32]);
                }
                else
                {
                  v181 = *(_OWORD *)v180;
                  *(_QWORD *)&v174[v175 + 40] = *(_QWORD *)&v170[v175 + 40];
                  *(_OWORD *)v179 = v181;
                }
                v182 = &v174[v175 + 48];
                v183 = (void **)&v170[v175 + 48];
                if (v170[v175 + 71] < 0)
                {
                  sub_1C47EBC30(v182, *v183, *(_QWORD *)&v170[v175 + 56]);
                }
                else
                {
                  v184 = *(_OWORD *)v183;
                  *(_QWORD *)&v174[v175 + 64] = *(_QWORD *)&v170[v175 + 64];
                  *(_OWORD *)v182 = v184;
                }
                v185 = &v174[v175 + 72];
                v186 = (void **)&v170[v175 + 72];
                if (v170[v175 + 95] < 0)
                {
                  sub_1C47EBC30(v185, *v186, *(_QWORD *)&v170[v175 + 80]);
                }
                else
                {
                  v187 = *(_OWORD *)v186;
                  *(_QWORD *)&v174[v175 + 88] = *(_QWORD *)&v170[v175 + 88];
                  *(_OWORD *)v185 = v187;
                }
                v188 = &v174[v175];
                v189 = *(_DWORD *)&v170[v175 + 96];
                *((_WORD *)v188 + 50) = *(_WORD *)&v170[v175 + 100];
                *((_DWORD *)v188 + 24) = v189;
                v175 += 104;
              }
              while (&v170[v175] != v171);
              *(_QWORD *)(a4 + 8) = &v174[v175];
            }
            v190 = (_BYTE *)(a4 + 24);
            if (SHIBYTE(v206[3]) < 0)
            {
              sub_1C47EBC30(v190, v206[1], (unint64_t)v206[2]);
            }
            else
            {
              *(_OWORD *)v190 = *(_OWORD *)&v206[1];
              *(void **)(a4 + 40) = v206[3];
            }
            v193 = (_BYTE *)(a4 + 48);
            if (SHIBYTE(v208[0]) < 0)
            {
              sub_1C47EBC30(v193, __p[0], (unint64_t)__p[1]);
            }
            else
            {
              *(_OWORD *)v193 = *(_OWORD *)__p;
              *(_QWORD *)(a4 + 64) = v208[0];
            }
            v194 = *(_OWORD *)&v208[3];
            *(_OWORD *)(a4 + 72) = *(_OWORD *)&v208[1];
            *(_OWORD *)(a4 + 88) = v194;
            *(_OWORD *)(a4 + 104) = *(_OWORD *)&v208[5];
            *(_QWORD *)(a4 + 120) = v208[7];
            goto LABEL_393;
          }
          continue;
        }
        memset(v216, 0, 38);
        v215 = 0u;
        memset(__str, 0, sizeof(__str));
        v8 = *(_QWORD *)&v202[16];
        if (*(_QWORD *)&v202[16] > 0x7FFFFFFFFFFFFFF7uLL)
          goto LABEL_415;
        v9 = *(const void **)&v202[8];
        if (*(_QWORD *)&v202[16] >= 0x17uLL)
        {
          v11 = (*(_QWORD *)&v202[16] & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((*(_QWORD *)&v202[16] | 7) != 0x17)
            v11 = *(_QWORD *)&v202[16] | 7;
          v12 = v11 + 1;
          p_dst = (std::string *)operator new(v11 + 1);
          __dst.__r_.__value_.__l.__size_ = v8;
          __dst.__r_.__value_.__r.__words[2] = v12 | 0x8000000000000000;
          __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
          goto LABEL_19;
        }
        *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v202[16];
        p_dst = &__dst;
        if (*(_QWORD *)&v202[16])
LABEL_19:
          memmove(p_dst, v9, v8);
        p_dst->__r_.__value_.__s.__data_[v8] = 0;
        if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
          operator delete(__str[0].__r_.__value_.__l.__data_);
        __str[0] = __dst;
        if (*(_QWORD *)&v202[24] == (_QWORD)v203)
        {
          sub_1C599CA38((uint64_t)&__dst, (uint64_t *)&v201);
          *(std::string *)v202 = __dst;
        }
        else
        {
          v13 = *(_OWORD *)(v203 - 24);
          *(_QWORD *)&v202[16] = *(_QWORD *)(v203 - 8);
          *(_OWORD *)v202 = v13;
          *(_QWORD *)&v203 = v203 - 24;
        }
        if (*(_DWORD *)v202 == 4)
        {
          if (*(_QWORD *)&v202[24] == (_QWORD)v203)
          {
            sub_1C599CA38((uint64_t)&__dst, (uint64_t *)&v201);
            *(std::string *)v202 = __dst;
          }
          else
          {
            v14 = *(_OWORD *)(v203 - 24);
            *(_QWORD *)&v202[16] = *(_QWORD *)(v203 - 8);
            *(_OWORD *)v202 = v14;
            *(_QWORD *)&v203 = v203 - 24;
          }
          if (*(_DWORD *)v202 != 2)
          {
            v213 = 1283;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)"identifier expected, but got ";
            __dst.__r_.__value_.__r.__words[2] = *(_QWORD *)&v202[8];
            v212 = *(_QWORD *)&v202[16];
            v26 = operator new();
            if (!atomic_load(qword_1EF8F7238))
              llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
            v28 = qword_1EF8F7238[0];
            *(_QWORD *)v26 = off_1E81A0C88;
            llvm::Twine::str((llvm::Twine *)&__dst, (_QWORD *)(v26 + 8));
            *(_QWORD *)(v26 + 32) = 3;
            *(_QWORD *)(v26 + 40) = v28;
            *(_BYTE *)(v26 + 48) = 1;
            v210 = v26;
            goto LABEL_217;
          }
          std::string::operator=(&__str[1], __str);
          v23 = *(_QWORD *)&v202[16];
          if (*(_QWORD *)&v202[16] > 0x7FFFFFFFFFFFFFF7uLL)
            goto LABEL_415;
          v24 = *(const void **)&v202[8];
          if (*(_QWORD *)&v202[16] >= 0x17uLL)
          {
            v29 = (*(_QWORD *)&v202[16] & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((*(_QWORD *)&v202[16] | 7) != 0x17)
              v29 = *(_QWORD *)&v202[16] | 7;
            v30 = v29 + 1;
            v25 = (std::string *)operator new(v29 + 1);
            __dst.__r_.__value_.__l.__size_ = v23;
            __dst.__r_.__value_.__r.__words[2] = v30 | 0x8000000000000000;
            __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v25;
          }
          else
          {
            *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v202[16];
            v25 = &__dst;
            if (!*(_QWORD *)&v202[16])
            {
LABEL_52:
              v25->__r_.__value_.__s.__data_[v23] = 0;
              if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str[0].__r_.__value_.__l.__data_);
              __str[0] = __dst;
              goto LABEL_62;
            }
          }
          memmove(v25, v24, v23);
          goto LABEL_52;
        }
        v15 = (_OWORD *)v203;
        if ((unint64_t)v203 >= *((_QWORD *)&v203 + 1))
        {
          v18 = *(_OWORD **)&v202[24];
          v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v203 - *(_QWORD *)&v202[24]) >> 3);
          v20 = v19 + 1;
          if (v19 + 1 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_415;
          if (0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v203 + 1) - *(_QWORD *)&v202[24]) >> 3) > v20)
            v20 = 0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v203 + 1) - *(_QWORD *)&v202[24]) >> 3);
          if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v203 + 1) - *(_QWORD *)&v202[24]) >> 3) >= 0x555555555555555)
            v21 = 0xAAAAAAAAAAAAAAALL;
          else
            v21 = v20;
          if (v21)
          {
            if (v21 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_416;
            v22 = (char *)operator new(24 * v21);
          }
          else
          {
            v22 = 0;
          }
          v31 = &v22[24 * v19];
          *(_OWORD *)v31 = *(_OWORD *)v202;
          *((_QWORD *)v31 + 2) = *(_QWORD *)&v202[16];
          v32 = v31;
          if (v15 != v18)
          {
            do
            {
              v33 = *(_OWORD *)((char *)v15 - 24);
              *((_QWORD *)v32 - 1) = *((_QWORD *)v15 - 1);
              *(_OWORD *)(v32 - 24) = v33;
              v32 -= 24;
              v15 = (_OWORD *)((char *)v15 - 24);
            }
            while (v15 != v18);
            v15 = *(_OWORD **)&v202[24];
          }
          v17 = v31 + 24;
          *(_QWORD *)&v202[24] = v32;
          *(_QWORD *)&v203 = v31 + 24;
          *((_QWORD *)&v203 + 1) = &v22[24 * v21];
          if (v15)
            operator delete(v15);
        }
        else
        {
          v16 = *(_OWORD *)v202;
          *(_QWORD *)(v203 + 16) = *(_QWORD *)&v202[16];
          *v15 = v16;
          v17 = (char *)v15 + 24;
        }
        *(_QWORD *)&v203 = v17;
LABEL_62:
        if (v204 == 332)
        {
          if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v34 = __str;
          else
            v34 = (std::string *)__str[0].__r_.__value_.__r.__words[0];
          if ((__str[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            size = *((_BYTE *)&__str[0].__r_.__value_.__s + 23) & 0x7F;
          else
            size = __str[0].__r_.__value_.__l.__size_;
          if ((sub_1C599CE50((unsigned __int8 *)v34, size, v209) & 1) == 0)
          {
            *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 1;
            LOWORD(__dst.__r_.__value_.__l.__data_) = 95;
            v36 = std::string::append(&__dst, (const std::string::value_type *)v34, size);
            std::string::operator=(__str, v36);
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__dst.__r_.__value_.__l.__data_);
          }
          if ((__str[1].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
            v37 = *((_BYTE *)&__str[1].__r_.__value_.__s + 23) & 0x7F;
          else
            v37 = __str[1].__r_.__value_.__l.__size_;
          if (v37)
          {
            v38 = (__str[1].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                ? &__str[1]
                : (std::string *)__str[1].__r_.__value_.__r.__words[0];
            if ((sub_1C599CE50((unsigned __int8 *)v38, v37, v209) & 1) == 0)
            {
              *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 1;
              LOWORD(__dst.__r_.__value_.__l.__data_) = 95;
              v39 = std::string::append(&__dst, (const std::string::value_type *)v38, v37);
              v40 = &__str[1];
LABEL_81:
              std::string::operator=(v40, v39);
              if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                operator delete(__dst.__r_.__value_.__l.__data_);
            }
          }
        }
        while (2)
        {
          if (*(_QWORD *)&v202[24] == (_QWORD)v203)
          {
            sub_1C599CA38((uint64_t)&__dst, (uint64_t *)&v201);
            *(std::string *)v202 = __dst;
          }
          else
          {
            v41 = *(_OWORD *)(v203 - 24);
            *(_QWORD *)&v202[16] = *(_QWORD *)(v203 - 8);
            *(_OWORD *)v202 = v41;
            *(_QWORD *)&v203 = v203 - 24;
          }
          switch(*(_DWORD *)v202)
          {
            case 5:
              if (*(_QWORD *)&v202[24] == (_QWORD)v203)
              {
                sub_1C599CA38((uint64_t)&__dst, (uint64_t *)&v201);
                *(std::string *)v202 = __dst;
              }
              else
              {
                v42 = *(_OWORD *)(v203 - 24);
                *(_QWORD *)&v202[16] = *(_QWORD *)(v203 - 8);
                *(_OWORD *)v202 = v42;
                *(_QWORD *)&v203 = v203 - 24;
              }
              v53 = *(_QWORD *)&v202[16];
              if (*(_QWORD *)&v202[16] > 0x7FFFFFFFFFFFFFF7uLL)
                goto LABEL_415;
              v54 = *(const void **)&v202[8];
              if (*(_QWORD *)&v202[16] >= 0x17uLL)
              {
                v56 = (*(_QWORD *)&v202[16] & 0xFFFFFFFFFFFFFFF8) + 8;
                if ((*(_QWORD *)&v202[16] | 7) != 0x17)
                  v56 = *(_QWORD *)&v202[16] | 7;
                v57 = v56 + 1;
                v55 = (std::string *)operator new(v56 + 1);
                __dst.__r_.__value_.__l.__size_ = v53;
                __dst.__r_.__value_.__r.__words[2] = v57 | 0x8000000000000000;
                __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v55;
              }
              else
              {
                *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v202[16];
                v55 = &__dst;
                if (!*(_QWORD *)&v202[16])
                  goto LABEL_121;
              }
              memmove(v55, v54, v53);
LABEL_121:
              v55->__r_.__value_.__s.__data_[v53] = 0;
              if (SHIBYTE(v216[1]) < 0)
                operator delete(*((void **)&v216[0] + 1));
              *(std::string *)((char *)v216 + 8) = __dst;
              if (v204 != 332)
                continue;
              v58 = v216[1] >= 0 ? (unsigned __int8 *)v216 + 8 : (unsigned __int8 *)*((_QWORD *)&v216[0] + 1);
              v59 = v216[1] >= 0 ? HIBYTE(v216[1]) & 0x7F : *(_QWORD *)&v216[1];
              if ((sub_1C599CE50(v58, v59, v209) & 1) != 0)
                continue;
              *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 1;
              LOWORD(__dst.__r_.__value_.__l.__data_) = 95;
              v39 = std::string::append(&__dst, (const std::string::value_type *)v58, v59);
              v40 = (std::string *)((char *)v216 + 8);
              goto LABEL_81;
            case 6:
            case 9:
            case 0xA:
            case 0xB:
            case 0xC:
            case 0xD:
              goto LABEL_170;
            case 7:
              BYTE5(v216[2]) = 1;
              continue;
            case 8:
              BYTE3(v216[2]) = 1;
              continue;
            case 0xE:
              BYTE4(v216[2]) = 1;
              continue;
            default:
              if (*(_DWORD *)v202 == 2 && **(_BYTE **)&v202[8] == 64)
              {
                if (*(_QWORD *)&v202[16] == 1)
                {
                  if (*(_QWORD *)&v202[24] == (_QWORD)v203)
                  {
                    sub_1C599CA38((uint64_t)&__dst, (uint64_t *)&v201);
                    *(std::string *)v202 = __dst;
                  }
                  else
                  {
                    v43 = *(_OWORD *)(v203 - 24);
                    *(_QWORD *)&v202[16] = *(_QWORD *)(v203 - 8);
                    *(_OWORD *)v202 = v43;
                    *(_QWORD *)&v203 = v203 - 24;
                  }
                  v60 = *(_QWORD *)&v202[16];
                  if (*(_QWORD *)&v202[16])
                  {
                    v61 = 0;
                    v62 = *(unsigned __int8 **)&v202[8];
                    while (1)
                    {
                      v63 = *v62;
                      if ((v63 - 48) >= 0xA)
                      {
                        if ((v63 - 97) >= 0x1A)
                        {
                          if ((v63 - 65) > 0x19)
                            break;
                          v64 = -55;
                        }
                        else
                        {
                          v64 = -87;
                        }
                      }
                      else
                      {
                        v64 = -48;
                      }
                      v65 = v64 + v63;
                      if (v65 > 9)
                        break;
                      v51 = 10 * v61 + v65;
                      if (v61 > v51 / 0xA)
                        break;
                      ++v62;
                      v61 = v51;
                      if (!--v60)
                      {
                        if (v51 >= 0x10000)
                          break;
                        goto LABEL_146;
                      }
                    }
                  }
                }
                else
                {
                  v44 = *(_QWORD *)&v202[16] != 0;
                  if (*(_QWORD *)&v202[16] == v44)
                    goto LABEL_180;
                  v45 = 0;
                  v46 = (unsigned __int8 *)(*(_QWORD *)&v202[8] + v44);
                  v47 = v44 - *(_QWORD *)&v202[16];
                  do
                  {
                    v48 = *v46;
                    if ((v48 - 48) >= 0xA)
                    {
                      if ((v48 - 97) >= 0x1A)
                      {
                        if ((v48 - 65) > 0x19)
                          goto LABEL_180;
                        v49 = -55;
                      }
                      else
                      {
                        v49 = -87;
                      }
                    }
                    else
                    {
                      v49 = -48;
                    }
                    v50 = v49 + v48;
                    if (v50 > 9)
                      goto LABEL_180;
                    v51 = 10 * v45 + v50;
                    if (v45 > v51 / 0xA)
                      goto LABEL_180;
                    ++v46;
                    v45 = v51;
                  }
                  while (!__CFADD__(v47++, 1));
                  if (v51 >= 0x10000)
                  {
LABEL_180:
                    v78 = (char *)v203;
                    if ((unint64_t)v203 < *((_QWORD *)&v203 + 1))
                    {
LABEL_181:
                      v84 = *(_OWORD *)v202;
                      *((_QWORD *)v78 + 2) = *(_QWORD *)&v202[16];
                      *(_OWORD *)v78 = v84;
                      v85 = v78 + 24;
                      goto LABEL_201;
                    }
                    v86 = *(char **)&v202[24];
                    v87 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v203 - *(_QWORD *)&v202[24]) >> 3);
                    v88 = v87 + 1;
                    if (v87 + 1 <= 0xAAAAAAAAAAAAAAALL)
                    {
                      if (0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v203 + 1) - *(_QWORD *)&v202[24]) >> 3) > v88)
                        v88 = 0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v203 + 1) - *(_QWORD *)&v202[24]) >> 3);
                      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v203 + 1) - *(_QWORD *)&v202[24]) >> 3) >= 0x555555555555555)
                        v82 = 0xAAAAAAAAAAAAAAALL;
                      else
                        v82 = v88;
                      if (v82)
                      {
                        if (v82 <= 0xAAAAAAAAAAAAAAALL)
                        {
                          v83 = (char *)operator new(24 * v82);
                          goto LABEL_196;
                        }
LABEL_416:
                        sub_1C4764EE4();
                      }
                      v83 = 0;
LABEL_196:
                      v89 = &v83[24 * v87];
                      *(_OWORD *)v89 = *(_OWORD *)v202;
                      *((_QWORD *)v89 + 2) = *(_QWORD *)&v202[16];
                      v90 = v89;
                      if (v78 != v86)
                      {
                        do
                        {
                          v92 = *(_OWORD *)(v78 - 24);
                          *((_QWORD *)v90 - 1) = *((_QWORD *)v78 - 1);
                          *(_OWORD *)(v90 - 24) = v92;
                          v90 -= 24;
                          v78 -= 24;
                        }
                        while (v78 != v86);
LABEL_198:
                        v78 = *(char **)&v202[24];
                      }
                      goto LABEL_199;
                    }
LABEL_415:
                    abort();
                  }
LABEL_146:
                  LOWORD(v216[2]) = v51;
                }
                if (*(_QWORD *)&v202[24] == (_QWORD)v203)
                {
                  sub_1C599CA38((uint64_t)&__dst, (uint64_t *)&v201);
                  *(std::string *)v202 = __dst;
                }
                else
                {
                  v66 = *(_OWORD *)(v203 - 24);
                  *(_QWORD *)&v202[16] = *(_QWORD *)(v203 - 8);
                  *(_OWORD *)v202 = v66;
                  *(_QWORD *)&v203 = v203 - 24;
                }
                if (*(_DWORD *)v202 == 13)
                {
                  BYTE2(v216[2]) = 1;
                }
                else
                {
                  v67 = (_OWORD *)v203;
                  if ((unint64_t)v203 >= *((_QWORD *)&v203 + 1))
                  {
                    v70 = *(_OWORD **)&v202[24];
                    v71 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v203 - *(_QWORD *)&v202[24]) >> 3);
                    v72 = v71 + 1;
                    if (v71 + 1 > 0xAAAAAAAAAAAAAAALL)
                      goto LABEL_415;
                    if (0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v203 + 1) - *(_QWORD *)&v202[24]) >> 3) > v72)
                      v72 = 0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v203 + 1) - *(_QWORD *)&v202[24]) >> 3);
                    if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v203 + 1) - *(_QWORD *)&v202[24]) >> 3) >= 0x555555555555555)
                      v73 = 0xAAAAAAAAAAAAAAALL;
                    else
                      v73 = v72;
                    if (v73)
                    {
                      if (v73 > 0xAAAAAAAAAAAAAAALL)
                        goto LABEL_416;
                      v74 = (char *)operator new(24 * v73);
                    }
                    else
                    {
                      v74 = 0;
                    }
                    v75 = &v74[24 * v71];
                    *(_OWORD *)v75 = *(_OWORD *)v202;
                    *((_QWORD *)v75 + 2) = *(_QWORD *)&v202[16];
                    v76 = v75;
                    if (v67 != v70)
                    {
                      do
                      {
                        v77 = *(_OWORD *)((char *)v67 - 24);
                        *((_QWORD *)v76 - 1) = *((_QWORD *)v67 - 1);
                        *(_OWORD *)(v76 - 24) = v77;
                        v76 -= 24;
                        v67 = (_OWORD *)((char *)v67 - 24);
                      }
                      while (v67 != v70);
                      v67 = *(_OWORD **)&v202[24];
                    }
                    v69 = v75 + 24;
                    *(_QWORD *)&v202[24] = v76;
                    *(_QWORD *)&v203 = v75 + 24;
                    *((_QWORD *)&v203 + 1) = &v74[24 * v73];
                    if (v67)
                      operator delete(v67);
                  }
                  else
                  {
                    v68 = *(_OWORD *)v202;
                    *(_QWORD *)(v203 + 16) = *(_QWORD *)&v202[16];
                    *v67 = v68;
                    v69 = (char *)v67 + 24;
                  }
                  *(_QWORD *)&v203 = v69;
                }
                continue;
              }
LABEL_170:
              v78 = (char *)v203;
              if ((unint64_t)v203 < *((_QWORD *)&v203 + 1))
                goto LABEL_181;
              v79 = *(char **)&v202[24];
              v80 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v203 - *(_QWORD *)&v202[24]) >> 3);
              v81 = v80 + 1;
              if (v80 + 1 > 0xAAAAAAAAAAAAAAALL)
                goto LABEL_415;
              if (0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v203 + 1) - *(_QWORD *)&v202[24]) >> 3) > v81)
                v81 = 0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v203 + 1) - *(_QWORD *)&v202[24]) >> 3);
              if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v203 + 1) - *(_QWORD *)&v202[24]) >> 3) >= 0x555555555555555)
                v82 = 0xAAAAAAAAAAAAAAALL;
              else
                v82 = v81;
              if (v82)
              {
                if (v82 > 0xAAAAAAAAAAAAAAALL)
                  goto LABEL_416;
                v83 = (char *)operator new(24 * v82);
              }
              else
              {
                v83 = 0;
              }
              v89 = &v83[24 * v80];
              *(_OWORD *)v89 = *(_OWORD *)v202;
              *((_QWORD *)v89 + 2) = *(_QWORD *)&v202[16];
              v90 = v89;
              if (v78 != v79)
              {
                do
                {
                  v91 = *(_OWORD *)(v78 - 24);
                  *((_QWORD *)v90 - 1) = *((_QWORD *)v78 - 1);
                  *(_OWORD *)(v90 - 24) = v91;
                  v90 -= 24;
                  v78 -= 24;
                }
                while (v78 != v79);
                goto LABEL_198;
              }
LABEL_199:
              v85 = v89 + 24;
              *(_QWORD *)&v202[24] = v90;
              *(_QWORD *)&v203 = v89 + 24;
              *((_QWORD *)&v203 + 1) = &v83[24 * v82];
              if (v78)
                operator delete(v78);
LABEL_201:
              *(_QWORD *)&v203 = v85;
              v93 = (char *)v205[1];
              if (v205[1] >= v206[0])
              {
                v95 = sub_1C599CF20(v205, (uint64_t)__str);
              }
              else
              {
                if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
                {
                  sub_1C47EBC30((_BYTE *)v205[1], __str[0].__r_.__value_.__l.__data_, __str[0].__r_.__value_.__l.__size_);
                }
                else
                {
                  v94 = *(_OWORD *)&__str[0].__r_.__value_.__l.__data_;
                  *((_QWORD *)v205[1] + 2) = *((_QWORD *)&__str[0].__r_.__value_.__l + 2);
                  *(_OWORD *)v93 = v94;
                }
                v96 = v93 + 24;
                if (SHIBYTE(__str[1].__r_.__value_.__r.__words[2]) < 0)
                {
                  sub_1C47EBC30(v96, __str[1].__r_.__value_.__l.__data_, __str[1].__r_.__value_.__l.__size_);
                }
                else
                {
                  v97 = *(_OWORD *)&__str[1].__r_.__value_.__l.__data_;
                  *((_QWORD *)v93 + 5) = *((_QWORD *)&__str[1].__r_.__value_.__l + 2);
                  *(_OWORD *)v96 = v97;
                }
                v98 = v93 + 48;
                if (SBYTE7(v216[0]) < 0)
                {
                  sub_1C47EBC30(v98, (void *)v215, *((unint64_t *)&v215 + 1));
                }
                else
                {
                  v99 = v215;
                  *((_QWORD *)v93 + 8) = *(_QWORD *)&v216[0];
                  *(_OWORD *)v98 = v99;
                }
                v100 = v93 + 72;
                if (SHIBYTE(v216[1]) < 0)
                {
                  sub_1C47EBC30(v100, *((void **)&v216[0] + 1), *(unint64_t *)&v216[1]);
                }
                else
                {
                  v101 = *(_OWORD *)((char *)v216 + 8);
                  *((_QWORD *)v93 + 11) = *((_QWORD *)&v216[1] + 1);
                  *(_OWORD *)v100 = v101;
                }
                v102 = v216[2];
                *((_WORD *)v93 + 50) = WORD2(v216[2]);
                *((_DWORD *)v93 + 24) = v102;
                v95 = v93 + 104;
              }
              v26 = 0;
              v205[1] = v95;
              v210 = 0;
LABEL_217:
              if (SHIBYTE(v216[1]) < 0)
                operator delete(*((void **)&v216[0] + 1));
              if (SBYTE7(v216[0]) < 0)
                operator delete((void *)v215);
              if (SHIBYTE(__str[1].__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str[1].__r_.__value_.__l.__data_);
              if (SHIBYTE(__str[0].__r_.__value_.__r.__words[2]) < 0)
                operator delete(__str[0].__r_.__value_.__l.__data_);
              if (!v26)
                goto LABEL_8;
LABEL_356:
              v168 = v210;
              if (!v210)
                goto LABEL_357;
LABEL_387:
              *(_BYTE *)(a4 + 128) |= 1u;
              *(_QWORD *)a4 = v168;
LABEL_393:
              if (SHIBYTE(v208[0]) < 0)
                operator delete(__p[0]);
              if (SHIBYTE(v206[3]) < 0)
                operator delete(v206[1]);
              v195 = (void **)v205[0];
              if (v205[0])
              {
                v196 = (void **)v205[1];
                v197 = v205[0];
                if (v205[1] != v205[0])
                {
                  do
                  {
                    if (*((char *)v196 - 9) < 0)
                      operator delete(*(v196 - 4));
                    if (*((char *)v196 - 33) < 0)
                      operator delete(*(v196 - 7));
                    if (*((char *)v196 - 57) < 0)
                      operator delete(*(v196 - 10));
                    if (*((char *)v196 - 81) < 0)
                      operator delete(*(v196 - 13));
                    v196 -= 13;
                  }
                  while (v196 != v195);
                  v197 = v205[0];
                }
                v205[1] = v195;
                operator delete(v197);
              }
              if (*(_QWORD *)&v202[24])
              {
                *(_QWORD *)&v203 = *(_QWORD *)&v202[24];
                operator delete(*(void **)&v202[24]);
              }
              return;
          }
        }
      case 0xA:
        v103 = &v208[4];
        v104 = &v208[5];
        goto LABEL_231;
      case 0xB:
      case 0xC:
        memset(&__dst, 0, sizeof(__dst));
        if (*(_QWORD *)&v202[24] == (_QWORD)v203)
        {
          sub_1C599CA38((uint64_t)__str, (uint64_t *)&v201);
          *(std::string *)v202 = __str[0];
        }
        else
        {
          v6 = *(_OWORD *)(v203 - 24);
          *(_QWORD *)&v202[16] = *(_QWORD *)(v203 - 8);
          *(_OWORD *)v202 = v6;
          *(_QWORD *)&v203 = v203 - 24;
        }
        if (*(_DWORD *)v202 != 2)
        {
          MEMORY[0x1CAA32ABC](&__dst, "");
          v109 = (_OWORD *)v203;
          if ((unint64_t)v203 >= *((_QWORD *)&v203 + 1))
          {
            v115 = *(_OWORD **)&v202[24];
            v116 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v203 - *(_QWORD *)&v202[24]) >> 3);
            v117 = v116 + 1;
            if (v116 + 1 > 0xAAAAAAAAAAAAAAALL)
              goto LABEL_415;
            if (0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v203 + 1) - *(_QWORD *)&v202[24]) >> 3) > v117)
              v117 = 0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v203 + 1) - *(_QWORD *)&v202[24]) >> 3);
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v203 + 1) - *(_QWORD *)&v202[24]) >> 3) >= 0x555555555555555)
              v117 = 0xAAAAAAAAAAAAAAALL;
            v198 = v117;
            if (v117)
            {
              if (v117 > 0xAAAAAAAAAAAAAAALL)
                goto LABEL_416;
              v118 = (char *)operator new(24 * v117);
            }
            else
            {
              v118 = 0;
            }
            v155 = &v118[24 * v116];
            *(_OWORD *)v155 = *(_OWORD *)v202;
            *((_QWORD *)v155 + 2) = *(_QWORD *)&v202[16];
            v156 = v155;
            if (v109 != v115)
            {
              do
              {
                v157 = *(_OWORD *)((char *)v109 - 24);
                *((_QWORD *)v156 - 1) = *((_QWORD *)v109 - 1);
                *(_OWORD *)(v156 - 24) = v157;
                v156 -= 24;
                v109 = (_OWORD *)((char *)v109 - 24);
              }
              while (v109 != v115);
              v109 = *(_OWORD **)&v202[24];
            }
            v111 = v155 + 24;
            *(_QWORD *)&v202[24] = v156;
            *(_QWORD *)&v203 = v155 + 24;
            *((_QWORD *)&v203 + 1) = &v118[24 * v198];
            if (v109)
              operator delete(v109);
          }
          else
          {
            v110 = *(_OWORD *)v202;
            *(_QWORD *)(v203 + 16) = *(_QWORD *)&v202[16];
            *v109 = v110;
            v111 = (char *)v109 + 24;
          }
          *(_QWORD *)&v203 = v111;
          goto LABEL_349;
        }
        v106 = *(_QWORD *)&v202[16];
        if (*(_QWORD *)&v202[16] > 0x7FFFFFFFFFFFFFF7uLL)
          goto LABEL_415;
        v107 = *(const void **)&v202[8];
        if (*(_QWORD *)&v202[16] >= 0x17uLL)
        {
          v119 = (*(_QWORD *)&v202[16] & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((*(_QWORD *)&v202[16] | 7) != 0x17)
            v119 = *(_QWORD *)&v202[16] | 7;
          v120 = v119 + 1;
          v121 = *(const void **)&v202[8];
          v122 = (std::string *)operator new(v119 + 1);
          v107 = v121;
          v108 = v122;
          __str[0].__r_.__value_.__l.__size_ = v106;
          __str[0].__r_.__value_.__r.__words[2] = v120 | 0x8000000000000000;
          __str[0].__r_.__value_.__r.__words[0] = (std::string::size_type)v122;
        }
        else
        {
          *((_BYTE *)&__str[0].__r_.__value_.__s + 23) = v202[16];
          v108 = __str;
          if (!*(_QWORD *)&v202[16])
          {
LABEL_254:
            v108->__r_.__value_.__s.__data_[v106] = 0;
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
              operator delete(__dst.__r_.__value_.__l.__data_);
            __dst = __str[0];
            if (*(_QWORD *)&v202[24] == (_QWORD)v203)
            {
              sub_1C599CA38((uint64_t)__str, (uint64_t *)&v201);
              *(std::string *)v202 = __str[0];
            }
            else
            {
              v123 = *(_OWORD *)(v203 - 24);
              *(_QWORD *)&v202[16] = *(_QWORD *)(v203 - 8);
              *(_OWORD *)v202 = v123;
              *(_QWORD *)&v203 = v203 - 24;
            }
            if (*(_DWORD *)v202 == 6)
            {
              if (*(_QWORD *)&v202[24] == (_QWORD)v203)
              {
                sub_1C599CA38((uint64_t)__str, (uint64_t *)&v201);
                *(std::string *)v202 = __str[0];
              }
              else
              {
                v131 = *(_OWORD *)(v203 - 24);
                *(_QWORD *)&v202[16] = *(_QWORD *)(v203 - 8);
                *(_OWORD *)v202 = v131;
                *(_QWORD *)&v203 = v203 - 24;
              }
              if (*(_DWORD *)v202 != 4)
              {
                LOWORD(__str[1].__r_.__value_.__r.__words[1]) = 261;
                __str[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"'=' expected";
                __str[0].__r_.__value_.__l.__size_ = 12;
                v158 = operator new();
                if (!atomic_load(qword_1EF8F7238))
                  llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
                v160 = qword_1EF8F7238[0];
                *(_QWORD *)v158 = off_1E81A0C88;
                llvm::Twine::str((llvm::Twine *)__str, (_QWORD *)(v158 + 8));
                *(_QWORD *)(v158 + 32) = 3;
                *(_QWORD *)(v158 + 40) = v160;
                *(_BYTE *)(v158 + 48) = 1;
LABEL_353:
                v210 = v158;
LABEL_354:
                if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
                  operator delete(__dst.__r_.__value_.__l.__data_);
                goto LABEL_356;
              }
              v210 = 0;
              sub_1C599D1E4(&v210, (uint64_t)&v201, &v208[1]);
              if (v210)
                goto LABEL_354;
            }
            else
            {
              v132 = (_OWORD *)v203;
              if ((unint64_t)v203 >= *((_QWORD *)&v203 + 1))
              {
                v151 = *(_OWORD **)&v202[24];
                v152 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v203 - *(_QWORD *)&v202[24]) >> 3);
                v153 = v152 + 1;
                if (v152 + 1 > 0xAAAAAAAAAAAAAAALL)
                  goto LABEL_415;
                if (0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v203 + 1) - *(_QWORD *)&v202[24]) >> 3) > v153)
                  v153 = 0x5555555555555556 * ((uint64_t)(*((_QWORD *)&v203 + 1) - *(_QWORD *)&v202[24]) >> 3);
                if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)&v203 + 1) - *(_QWORD *)&v202[24]) >> 3) >= 0x555555555555555)
                  v153 = 0xAAAAAAAAAAAAAAALL;
                v199 = v153;
                if (v153)
                {
                  if (v153 > 0xAAAAAAAAAAAAAAALL)
                    goto LABEL_416;
                  v154 = (char *)operator new(24 * v153);
                }
                else
                {
                  v154 = 0;
                }
                v164 = &v154[24 * v152];
                *(_OWORD *)v164 = *(_OWORD *)v202;
                *((_QWORD *)v164 + 2) = *(_QWORD *)&v202[16];
                v165 = v164;
                if (v132 != v151)
                {
                  do
                  {
                    v166 = *(_OWORD *)((char *)v132 - 24);
                    *((_QWORD *)v165 - 1) = *((_QWORD *)v132 - 1);
                    *(_OWORD *)(v165 - 24) = v166;
                    v165 -= 24;
                    v132 = (_OWORD *)((char *)v132 - 24);
                  }
                  while (v132 != v151);
                  v132 = *(_OWORD **)&v202[24];
                }
                v134 = v164 + 24;
                *(_QWORD *)&v202[24] = v165;
                *(_QWORD *)&v203 = v164 + 24;
                *((_QWORD *)&v203 + 1) = &v154[24 * v199];
                if (v132)
                  operator delete(v132);
              }
              else
              {
                v133 = *(_OWORD *)v202;
                *(_QWORD *)(v203 + 16) = *(_QWORD *)&v202[16];
                *v132 = v133;
                v134 = (char *)v132 + 24;
              }
              *(_QWORD *)&v203 = v134;
              v208[1] = 0;
            }
LABEL_349:
            std::string::operator=((std::string *)__p, &__dst);
            v167 = (void *)HIBYTE(v206[3]);
            if (SHIBYTE(v206[3]) < 0)
              v167 = v206[2];
            if (!v167)
            {
              std::string::operator=((std::string *)&v206[1], &__dst);
              LOWORD(__str[1].__r_.__value_.__r.__words[1]) = 260;
              __str[0].__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst;
              if (!llvm::sys::path::has_extension((const char **)&__str[0].__r_.__value_.__l.__data_, 0))
              {
                if (v5 == 11)
                  v169 = ".dll";
                else
                  v169 = ".exe";
                std::string::append((std::string *)&v206[1], v169);
              }
            }
            v158 = 0;
            goto LABEL_353;
          }
        }
        memmove(v108, v107, v106);
        goto LABEL_254;
      case 0xF:
        v103 = &v208[2];
        v104 = &v208[3];
LABEL_231:
        sub_1C599C86C(&v210, (uint64_t)&v201, v103, v104);
        goto LABEL_356;
      case 0x10:
        if (*(_QWORD *)&v202[24] == (_QWORD)v203)
        {
          sub_1C599CA38((uint64_t)__str, (uint64_t *)&v201);
          *(std::string *)v202 = __str[0];
        }
        else
        {
          v105 = *(_OWORD *)(v203 - 24);
          *(_QWORD *)&v202[16] = *(_QWORD *)(v203 - 8);
          *(_OWORD *)v202 = v105;
          *(_QWORD *)&v203 = v203 - 24;
        }
        if (*(_DWORD *)v202 != 2)
        {
          LOWORD(__str[1].__r_.__value_.__r.__words[1]) = 1283;
          __str[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"identifier expected, but got ";
          *(_OWORD *)&__str[0].__r_.__value_.__r.__words[2] = *(_OWORD *)&v202[8];
          goto LABEL_384;
        }
        __str[0].__r_.__value_.__s.__data_[0] = 46;
        v124 = llvm::StringRef::find((uint64_t *)&v202[8], (char *)__str, 1uLL, 0);
        if (v124 == -1)
        {
          v129 = 0;
          v130 = 0;
          v126 = *(_QWORD *)&v202[8];
          v125 = *(_QWORD *)&v202[16];
          v127 = *(_QWORD *)&v202[16];
          if (!*(_QWORD *)&v202[16])
          {
LABEL_383:
            LOWORD(__str[1].__r_.__value_.__r.__words[1]) = 1283;
            __str[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"integer expected, but got ";
            __str[0].__r_.__value_.__r.__words[2] = v126;
            __str[1].__r_.__value_.__r.__words[0] = v125;
LABEL_384:
            v168 = operator new();
            if (!atomic_load(qword_1EF8F7238))
              llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
            v192 = qword_1EF8F7238[0];
            *(_QWORD *)v168 = off_1E81A0C88;
            llvm::Twine::str((llvm::Twine *)__str, (_QWORD *)(v168 + 8));
            *(_QWORD *)(v168 + 32) = 3;
            *(_QWORD *)(v168 + 40) = v192;
            *(_BYTE *)(v168 + 48) = 1;
            goto LABEL_387;
          }
        }
        else
        {
          v126 = *(_QWORD *)&v202[8];
          v125 = *(_QWORD *)&v202[16];
          if (*(_QWORD *)&v202[16] >= v124)
            v127 = v124;
          else
            v127 = *(_QWORD *)&v202[16];
          if (*(_QWORD *)&v202[16] >= v124 + 1)
            v128 = v124 + 1;
          else
            v128 = *(_QWORD *)&v202[16];
          v129 = (unsigned __int8 *)(*(_QWORD *)&v202[8] + v128);
          v130 = *(_QWORD *)&v202[16] - v128;
          if (!v127)
            goto LABEL_383;
        }
        v135 = 0;
        v136 = 0;
        do
        {
          v137 = *(unsigned __int8 *)(v126 + v135);
          if ((v137 - 48) >= 0xA)
          {
            if ((v137 - 97) >= 0x1A)
            {
              if ((v137 - 65) > 0x19)
                goto LABEL_383;
              v138 = -55;
            }
            else
            {
              v138 = -87;
            }
          }
          else
          {
            v138 = -48;
          }
          v139 = v138 + v137;
          if (v139 > 9)
            goto LABEL_383;
          v140 = 10 * v136 + v139;
          if (v136 > v140 / 0xA)
            goto LABEL_383;
          ++v135;
          v136 = v140;
        }
        while (v127 != v135);
        if (HIDWORD(v140))
          goto LABEL_383;
        LODWORD(v208[6]) = v140;
        if (v130)
        {
          v141 = 0;
          do
          {
            v142 = *v129;
            if ((v142 - 48) >= 0xA)
            {
              if ((v142 - 97) >= 0x1A)
              {
                if ((v142 - 65) > 0x19)
                  goto LABEL_383;
                v143 = -55;
              }
              else
              {
                v143 = -87;
              }
            }
            else
            {
              v143 = -48;
            }
            v144 = v143 + v142;
            if (v144 > 9)
              goto LABEL_383;
            v145 = 10 * v141 + v144;
            if (v141 > v145 / 0xA)
              goto LABEL_383;
            ++v129;
            v141 = v145;
            --v130;
          }
          while (v130);
          if (HIDWORD(v145))
            goto LABEL_383;
        }
        else
        {
          LODWORD(v145) = 0;
        }
        HIDWORD(v208[6]) = v145;
        goto LABEL_357;
      default:
        LOWORD(__str[1].__r_.__value_.__r.__words[1]) = 1283;
        __str[0].__r_.__value_.__r.__words[0] = (std::string::size_type)"unknown directive: ";
        *(_OWORD *)&__str[0].__r_.__value_.__r.__words[2] = *(_OWORD *)&v202[8];
        goto LABEL_384;
    }
  }
}

void sub_1C599C86C(uint64_t *a1, uint64_t a2, unint64_t *a3, unint64_t *a4)
{
  uint64_t v7;
  __int128 v8;
  _OWORD *v9;
  unint64_t v10;
  _QWORD *v11;
  __int128 v12;
  _QWORD *v13;
  _QWORD *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  char *v18;
  char *v19;
  __int128 v20;
  __int128 v21;
  uint64_t v22;

  sub_1C599D1E4(a1, a2, a3);
  if (!*a1)
  {
    v7 = *(_QWORD *)(a2 + 48);
    if (*(_QWORD *)(a2 + 40) == v7)
    {
      sub_1C599CA38((uint64_t)&v21, (uint64_t *)a2);
      *(_OWORD *)(a2 + 16) = v21;
      *(_QWORD *)(a2 + 32) = v22;
    }
    else
    {
      v8 = *(_OWORD *)(v7 - 24);
      *(_QWORD *)(a2 + 32) = *(_QWORD *)(v7 - 8);
      *(_OWORD *)(a2 + 16) = v8;
      *(_QWORD *)(a2 + 48) = v7 - 24;
    }
    v9 = (_OWORD *)(a2 + 16);
    if (*(_DWORD *)(a2 + 16) == 3)
    {
      sub_1C599D1E4(a1, a2, a4);
      if (*a1)
        return;
    }
    else
    {
      v11 = *(_QWORD **)(a2 + 48);
      v10 = *(_QWORD *)(a2 + 56);
      if ((unint64_t)v11 >= v10)
      {
        v14 = *(_QWORD **)(a2 + 40);
        v15 = 0xAAAAAAAAAAAAAAABLL * (v11 - v14) + 1;
        if (v15 > 0xAAAAAAAAAAAAAAALL)
          abort();
        v16 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v10 - (_QWORD)v14) >> 3);
        if (2 * v16 > v15)
          v15 = 2 * v16;
        if (v16 >= 0x555555555555555)
          v17 = 0xAAAAAAAAAAAAAAALL;
        else
          v17 = v15;
        if (v17)
        {
          if (v17 > 0xAAAAAAAAAAAAAAALL)
            sub_1C4764EE4();
          v18 = (char *)operator new(24 * v17);
        }
        else
        {
          v18 = 0;
        }
        v19 = &v18[8 * (v11 - v14)];
        *(_OWORD *)v19 = *v9;
        *((_QWORD *)v19 + 2) = *(_QWORD *)(a2 + 32);
        v13 = v19 + 24;
        if (v11 != v14)
        {
          do
          {
            v20 = *(_OWORD *)(v11 - 3);
            *((_QWORD *)v19 - 1) = *(v11 - 1);
            *(_OWORD *)(v19 - 24) = v20;
            v19 -= 24;
            v11 -= 3;
          }
          while (v11 != v14);
          v11 = *(_QWORD **)(a2 + 40);
        }
        *(_QWORD *)(a2 + 40) = v19;
        *(_QWORD *)(a2 + 48) = v13;
        *(_QWORD *)(a2 + 56) = &v18[24 * v17];
        if (v11)
          operator delete(v11);
      }
      else
      {
        v12 = *v9;
        v11[2] = *(_QWORD *)(a2 + 32);
        *(_OWORD *)v11 = v12;
        v13 = v11 + 3;
      }
      *(_QWORD *)(a2 + 48) = v13;
    }
    *a1 = 0;
  }
}

unint64_t sub_1C599CA38(uint64_t a1, uint64_t *a2)
{
  unint64_t result;
  size_t v5;
  char *v6;
  size_t v7;
  uint64_t v8;
  _BYTE *v9;
  unint64_t v10;
  BOOL v11;
  int v12;
  const char *v13;
  uint64_t v14;
  BOOL v15;
  const char *v16;
  size_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;
  char *v21;
  const char *v27;
  size_t v28;
  uint64_t v29[2];
  char v30;

  result = sub_1C534E9D8(a2, " \t\n\v\f\r", 6);
  *a2 = result;
  a2[1] = v5;
  if (!v5)
  {
LABEL_18:
    v8 = 0;
    goto LABEL_19;
  }
  v6 = (char *)result;
  v7 = v5;
  while (1)
  {
    v8 = *v6;
    if ((_DWORD)v8 != 59)
      break;
    v9 = memchr(v6, 10, v7);
    v10 = v9 - v6;
    if (v9)
      v11 = v10 == -1;
    else
      v11 = 1;
    v12 = v11;
    if (v7 < v10)
      v10 = v7;
    v13 = &v6[v10];
    v14 = v7 - v10;
    v15 = v12 == 0;
    if (v12)
      v16 = "";
    else
      v16 = v13;
    if (!v15)
      v14 = 0;
    *a2 = (uint64_t)v16;
    a2[1] = v14;
    result = sub_1C534E9D8(a2, " \t\n\v\f\r", 6);
    v6 = (char *)result;
    v7 = v17;
    *a2 = result;
    a2[1] = v17;
    if (!v17)
      goto LABEL_18;
  }
  if ((int)v8 > 43)
  {
    if ((_DWORD)v8 == 44)
    {
      *a2 = (uint64_t)(v6 + 1);
      a2[1] = v7 - 1;
      v6 = ",";
      LODWORD(v18) = 3;
    }
    else
    {
      if ((_DWORD)v8 != 61)
        goto LABEL_38;
      *a2 = (uint64_t)(v6 + 1);
      a2[1] = v7 - 1;
      if (v7 != 1 && v6[1] == 61)
      {
        *a2 = (uint64_t)(v6 + 2);
        a2[1] = v7 - 2;
        v6 = "==";
        LODWORD(v18) = 5;
        v8 = 2;
        goto LABEL_82;
      }
      v6 = "=";
      LODWORD(v18) = 4;
    }
    v8 = 1;
    goto LABEL_82;
  }
  if (!*v6)
  {
LABEL_19:
    LODWORD(v18) = 1;
    v6 = "";
    goto LABEL_82;
  }
  if ((_DWORD)v8 == 34)
  {
    ++v6;
    v19 = v7 - 1;
    v29[0] = (uint64_t)v6;
    v29[1] = v19;
    v30 = 34;
    result = llvm::StringRef::find(v29, &v30, 1uLL, 0);
    if (v19 >= result)
      v8 = result;
    else
      v8 = v19;
    if (v19 >= result + 1)
      v20 = result + 1;
    else
      v20 = v19;
    v21 = &v6[v20];
    v18 = v19 - v20;
    if (result == -1)
    {
      v8 = v19;
      v21 = 0;
      v18 = 0;
    }
    *a2 = (uint64_t)v21;
    a2[1] = v18;
    LODWORD(v18) = 2;
    goto LABEL_82;
  }
LABEL_38:
  result = llvm::StringRef::find_first_of(a2, "=,;\r\n \t\v", 8, 0);
  if (v7 >= result)
    v8 = result;
  else
    v8 = v7;
  switch(v8)
  {
    case 4:
      v18 = 0x100000006;
      if (*(_DWORD *)v6 != 1163084098)
      {
        if (*(_DWORD *)v6 == 1096040772)
        {
          v18 = 0x100000008;
        }
        else
        {
          if (*(_DWORD *)v6 != 1162690894)
            goto LABEL_76;
          v18 = 0x10000000CLL;
        }
      }
      break;
    case 6:
      if (*(_DWORD *)v6 != 1095651150 || *((_WORD *)v6 + 2) != 17741)
        goto LABEL_76;
      v18 = 0x10000000DLL;
      break;
    case 7:
      if (*(_DWORD *)v6 == 1330665541 && *(_DWORD *)(v6 + 3) == 1398035023)
      {
        v18 = 0x100000009;
      }
      else if (*(_DWORD *)v6 == 1380075852 && *(_DWORD *)(v6 + 3) == 1498562898)
      {
        v18 = 0x10000000BLL;
      }
      else if (*(_DWORD *)v6 == 1447645776 && *(_DWORD *)(v6 + 3) == 1163149654)
      {
        v18 = 0x10000000ELL;
      }
      else
      {
        v18 = 0x100000010;
        if (*(_DWORD *)v6 ^ 0x53524556 | *(_DWORD *)(v6 + 3) ^ 0x4E4F4953)
          v18 = 0;
      }
      break;
    case 8:
      if (*(_QWORD *)v6 == 0x544E4154534E4F43)
      {
        v18 = 0x100000007;
      }
      else
      {
        if (*(_QWORD *)v6 != 0x455A495350414548)
          goto LABEL_76;
        v18 = 0x10000000ALL;
      }
      break;
    case 9:
      if (*(_QWORD *)v6 != 0x5A49534B43415453 || v6[8] != 69)
        goto LABEL_76;
      v18 = 0x10000000FLL;
      break;
    default:
LABEL_76:
      v18 = 0;
      break;
  }
  if ((v18 & 0x300000000) == 0)
    LODWORD(v18) = 2;
  v27 = &v6[v8];
  v28 = v7 - v8;
  if (result == -1)
  {
    v28 = 0;
    v27 = "";
  }
  *a2 = (uint64_t)v27;
  a2[1] = v28;
LABEL_82:
  *(_DWORD *)a1 = v18;
  *(_QWORD *)(a1 + 8) = v6;
  *(_QWORD *)(a1 + 16) = v8;
  return result;
}

uint64_t sub_1C599CE50(unsigned __int8 *a1, size_t a2, char a3)
{
  int v5;
  uint64_t result;
  uint64_t v8;
  BOOL v9;
  uint64_t v10;
  _BYTE *v11;
  uint64_t v12[2];

  v12[0] = (uint64_t)a1;
  v12[1] = a2;
  if (a2)
  {
    v5 = *a1;
    if (v5 == 64 || llvm::StringRef::find(v12, "@@", 2uLL, 0) != -1)
      return 1;
    result = v5 == 63;
    if (v5 != 63 && (a3 & 1) == 0)
    {
      v11 = memchr(a1, 64, a2);
      if (v11)
      {
        v10 = v11 - a1;
        return v10 != -1;
      }
LABEL_8:
      v10 = -1;
      return v10 != -1;
    }
  }
  else
  {
    v8 = llvm::StringRef::find(v12, "@@", 2uLL, 0);
    v9 = v8 == -1;
    result = v8 != -1;
    if (v9 && (a3 & 1) == 0)
      goto LABEL_8;
  }
  return result;
}

char *sub_1C599CF20(void **a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v6;
  _BYTE *v7;
  char *v8;
  _BYTE *v9;
  _BYTE *v10;
  _BYTE *v11;
  char *v12;
  char *v13;
  char *v14;
  void **v15;
  void **v16;
  __int128 v17;
  __int128 v18;
  __int128 v19;
  __int128 v20;
  int v21;
  void **v22;

  v2 = 0x4EC4EC4EC4EC4EC5 * (((_BYTE *)a1[1] - (_BYTE *)*a1) >> 3);
  v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0x276276276276276)
    abort();
  if (0x9D89D89D89D89D8ALL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3) > v3)
    v3 = 0x9D89D89D89D89D8ALL * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3);
  if ((unint64_t)(0x4EC4EC4EC4EC4EC5 * (((_BYTE *)a1[2] - (_BYTE *)*a1) >> 3)) >= 0x13B13B13B13B13BLL)
    v6 = 0x276276276276276;
  else
    v6 = v3;
  if (v6)
  {
    if (v6 > 0x276276276276276)
      sub_1C4764EE4();
    v7 = operator new(104 * v6);
  }
  else
  {
    v7 = 0;
  }
  v8 = &v7[104 * v2];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_1C47EBC30(&v7[104 * v2], *(void **)a2, *(_QWORD *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)v8 = *(_OWORD *)a2;
    *((_QWORD *)v8 + 2) = *(_QWORD *)(a2 + 16);
  }
  v9 = &v7[104 * v2 + 24];
  if (*(char *)(a2 + 47) < 0)
  {
    sub_1C47EBC30(v9, *(void **)(a2 + 24), *(_QWORD *)(a2 + 32));
  }
  else
  {
    *(_OWORD *)v9 = *(_OWORD *)(a2 + 24);
    *(_QWORD *)&v7[104 * v2 + 40] = *(_QWORD *)(a2 + 40);
  }
  v10 = &v7[104 * v2 + 48];
  if (*(char *)(a2 + 71) < 0)
  {
    sub_1C47EBC30(v10, *(void **)(a2 + 48), *(_QWORD *)(a2 + 56));
  }
  else
  {
    *(_OWORD *)v10 = *(_OWORD *)(a2 + 48);
    *(_QWORD *)&v7[104 * v2 + 64] = *(_QWORD *)(a2 + 64);
  }
  v11 = &v7[104 * v2 + 72];
  if (*(char *)(a2 + 95) < 0)
  {
    sub_1C47EBC30(v11, *(void **)(a2 + 72), *(_QWORD *)(a2 + 80));
  }
  else
  {
    *(_OWORD *)v11 = *(_OWORD *)(a2 + 72);
    *(_QWORD *)&v7[104 * v2 + 88] = *(_QWORD *)(a2 + 88);
  }
  v12 = &v7[104 * v6];
  v13 = &v7[104 * v2];
  *((_DWORD *)v13 + 24) = *(_DWORD *)(a2 + 96);
  *((_WORD *)v13 + 50) = *(_WORD *)(a2 + 100);
  v14 = v8 + 104;
  v15 = (void **)*a1;
  v16 = (void **)a1[1];
  if (v16 == *a1)
  {
    *a1 = v8;
    a1[1] = v14;
    a1[2] = v12;
  }
  else
  {
    do
    {
      v17 = *(_OWORD *)(v16 - 13);
      *((_QWORD *)v8 - 11) = *(v16 - 11);
      *(_OWORD *)(v8 - 104) = v17;
      *(v16 - 12) = 0;
      *(v16 - 11) = 0;
      *(v16 - 13) = 0;
      v18 = *((_OWORD *)v16 - 5);
      *((_QWORD *)v8 - 8) = *(v16 - 8);
      *((_OWORD *)v8 - 5) = v18;
      *(v16 - 9) = 0;
      *(v16 - 8) = 0;
      *(v16 - 10) = 0;
      v19 = *(_OWORD *)(v16 - 7);
      *((_QWORD *)v8 - 5) = *(v16 - 5);
      *(_OWORD *)(v8 - 56) = v19;
      *(v16 - 6) = 0;
      *(v16 - 5) = 0;
      *(v16 - 7) = 0;
      v20 = *((_OWORD *)v16 - 2);
      *((_QWORD *)v8 - 2) = *(v16 - 2);
      *((_OWORD *)v8 - 2) = v20;
      *(v16 - 4) = 0;
      *(v16 - 3) = 0;
      *(v16 - 2) = 0;
      v21 = *((_DWORD *)v16 - 2);
      *((_WORD *)v8 - 2) = *((_WORD *)v16 - 2);
      *((_DWORD *)v8 - 2) = v21;
      v8 -= 104;
      v16 -= 13;
    }
    while (v16 != v15);
    v16 = (void **)*a1;
    v22 = (void **)a1[1];
    *a1 = v8;
    a1[1] = v14;
    a1[2] = v12;
    while (v22 != v16)
    {
      if (*((char *)v22 - 9) < 0)
        operator delete(*(v22 - 4));
      if (*((char *)v22 - 33) < 0)
        operator delete(*(v22 - 7));
      if (*((char *)v22 - 57) < 0)
        operator delete(*(v22 - 10));
      if (*((char *)v22 - 81) < 0)
        operator delete(*(v22 - 13));
      v22 -= 13;
    }
  }
  if (v16)
    operator delete(v16);
  return v14;
}

void sub_1C599D1E4(uint64_t *a1, uint64_t a2, unint64_t *a3)
{
  uint64_t v6;
  __int128 v7;
  uint64_t v8;
  unint64_t v9;
  unsigned __int8 *i;
  int v11;
  int v12;
  unsigned int v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v17;
  __int128 v18;
  uint64_t v19;
  __int16 v20;

  v6 = *(_QWORD *)(a2 + 48);
  if (*(_QWORD *)(a2 + 40) == v6)
  {
    sub_1C599CA38((uint64_t)&v18, (uint64_t *)a2);
    *(_OWORD *)(a2 + 16) = v18;
    *(_QWORD *)(a2 + 32) = v19;
  }
  else
  {
    v7 = *(_OWORD *)(v6 - 24);
    *(_QWORD *)(a2 + 32) = *(_QWORD *)(v6 - 8);
    *(_OWORD *)(a2 + 16) = v7;
    *(_QWORD *)(a2 + 48) = v6 - 24;
  }
  if (*(_DWORD *)(a2 + 16) == 2)
  {
    v8 = *(_QWORD *)(a2 + 32);
    if (v8)
    {
      v9 = 0;
      for (i = *(unsigned __int8 **)(a2 + 24); ; ++i)
      {
        v11 = *i;
        if ((v11 - 48) >= 0xA)
        {
          if ((v11 - 97) >= 0x1A)
          {
            if ((v11 - 65) > 0x19)
              break;
            v12 = -55;
          }
          else
          {
            v12 = -87;
          }
        }
        else
        {
          v12 = -48;
        }
        v13 = v12 + v11;
        if (v13 > 9)
          break;
        v14 = 10 * v9 + v13;
        if (v9 > v14 / 0xA)
          break;
        v9 = v14;
        if (!--v8)
        {
          *a3 = v14;
          *a1 = 0;
          return;
        }
      }
    }
  }
  *(_QWORD *)&v18 = "integer expected";
  v20 = 259;
  v15 = operator new();
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v17 = qword_1EF8F7238[0];
  *(_QWORD *)v15 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)&v18, (_QWORD *)(v15 + 8));
  *(_QWORD *)(v15 + 32) = 3;
  *(_QWORD *)(v15 + 40) = v17;
  *(_BYTE *)(v15 + 48) = 1;
  *a1 = v15;
}

uint64_t llvm::object::COFFObjectFile::toSec(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t llvm::object::COFFObjectFile::moveSymbolNext(uint64_t result, uint64_t a2)
{
  unint64_t v2;
  unint64_t v3;

  v2 = *(_QWORD *)(result + 112);
  if (*(_QWORD *)(result + 96))
    v3 = *(_QWORD *)a2 + 18 * *(unsigned __int8 *)(*(_QWORD *)a2 + 17) + 18;
  else
    v3 = *(_QWORD *)a2 + 20 * *(unsigned __int8 *)(*(_QWORD *)a2 + 19) + 20;
  if (v2 >= v3)
    v2 = v3;
  *(_QWORD *)a2 = v2;
  return result;
}

void llvm::object::COFFObjectFile::getSymbolName(llvm::object::COFFObjectFile *a1@<X0>, char *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v3;
  BOOL v4;
  char *v5;
  char *v6;
  char *v7;

  v3 = *((_QWORD *)a1 + 12);
  v4 = v3 == 0;
  if (v3)
    v5 = 0;
  else
    v5 = a2;
  if (v4)
    v6 = 0;
  else
    v6 = a2;
  if (v6)
    v7 = v6;
  else
    v7 = v5;
  llvm::object::COFFObjectFile::getSymbolName(v7, a1, a3);
}

void llvm::object::COFFObjectFile::getSymbolName(llvm::object::COFFObjectFile *a1@<X0>, char *a2@<X1>, char *a3@<X2>, uint64_t a4@<X8>)
{
  if (!a2)
    a2 = a3;
  llvm::object::COFFObjectFile::getSymbolName(a2, a1, a4);
}

uint64_t llvm::object::COFFObjectFile::getCOFFSymbol(uint64_t a1, uint64_t a2)
{
  if (*(_QWORD *)(a1 + 96))
    return *(_QWORD *)a2;
  else
    return 0;
}

{
  if (*(_QWORD *)(a1 + 96))
    return *(_QWORD *)a2;
  else
    return 0;
}

uint64_t llvm::object::COFFObjectFile::getSymbolValueImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 96);
  v3 = v2 == 0;
  if (v2)
    v4 = a2;
  else
    v4 = 0;
  if (v3)
    v5 = a2;
  else
    v5 = 0;
  if (!v4)
    v4 = v5;
  return *(unsigned int *)(v4 + 8);
}

uint64_t llvm::object::COFFObjectFile::getSymbolAlignment(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  unint64_t v9;

  v2 = *(_QWORD *)(a1 + 96);
  v3 = v2 == 0;
  if (v2)
    v4 = a2;
  else
    v4 = 0;
  if (v3)
    v5 = a2;
  else
    v5 = 0;
  if (!v4)
    v4 = v5;
  v6 = *(unsigned int *)(v4 + 8);
  if ((_DWORD)v6)
  {
    v7 = (v6 - 1) | ((unint64_t)(v6 - 1) >> 1) | (((v6 - 1) | ((unint64_t)(v6 - 1) >> 1)) >> 2);
    v8 = v7 | (v7 >> 4) | ((v7 | (v7 >> 4)) >> 8);
    v9 = (v8 | (v8 >> 16)) + 1;
  }
  else
  {
    v9 = 0;
  }
  if (v9 >= 0x20)
    return 32;
  else
    return v9;
}

void llvm::object::COFFObjectFile::getSymbolAddress(llvm::object::COFFObjectFile *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  uint64_t v11;
  _BYTE *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char v16;
  _DWORD *v17;
  BOOL v18;
  uint64_t v19;
  char v20;
  _QWORD v21[3];

  v21[2] = *MEMORY[0x1E0C80C00];
  llvm::object::ObjectFile::getSymbolValue((uint64_t)a1, a2, (uint64_t)v21);
  v6 = *((_QWORD *)a1 + 12);
  if (v6)
    v7 = a2;
  else
    v7 = 0;
  if (v6)
    v8 = 0;
  else
    v8 = a2;
  if (v7)
  {
    v10 = *(unsigned __int16 *)(v7 + 12);
    if (v10 >> 8 <= 0xFE)
      v9 = *(unsigned __int16 *)(v7 + 12);
    else
      v9 = (__int16)v10;
  }
  else
  {
    v9 = *(_DWORD *)(v8 + 12);
  }
  v11 = v21[0];
  if ((sub_1C62C72C0(v7, v8) & 1) != 0)
    goto LABEL_32;
  v12 = (_BYTE *)(v7 + 16);
  if (!v7)
    v12 = (_BYTE *)(v8 + 18);
  if (*v12 == 2)
  {
    if (v7)
    {
      if (HIBYTE(*(unsigned __int16 *)(v7 + 12)) > 0xFEu || *(_WORD *)(v7 + 12))
        goto LABEL_19;
    }
    else if (*(_DWORD *)(v8 + 12))
    {
      goto LABEL_19;
    }
    v17 = (_DWORD *)(v7 + 8);
    if (!v7)
      v17 = (_DWORD *)(v8 + 8);
    if (*v17)
      v18 = 1;
    else
      v18 = v9 < 1;
    if (!v18)
      goto LABEL_20;
LABEL_32:
    *(_BYTE *)(a3 + 8) &= ~1u;
    *(_QWORD *)a3 = v11;
    return;
  }
LABEL_19:
  if (v9 <= 0)
    goto LABEL_32;
LABEL_20:
  llvm::object::COFFObjectFile::getSection(a1, v9, (uint64_t)&v19);
  v13 = v19;
  if ((v20 & 1) != 0)
  {
    v16 = *(_BYTE *)(a3 + 8) | 1;
  }
  else
  {
    v14 = *((_QWORD *)a1 + 8);
    if (v14)
    {
      v15 = *(unsigned int *)(v14 + 28);
    }
    else
    {
      v15 = *((_QWORD *)a1 + 9);
      if (v15)
        v15 = *(_QWORD *)(v15 + 24);
    }
    v13 = v11 + *(unsigned int *)(v19 + 12) + v15;
    v16 = *(_BYTE *)(a3 + 8) & 0xFE;
  }
  *(_BYTE *)(a3 + 8) = v16;
  *(_QWORD *)a3 = v13;
}

void llvm::object::COFFObjectFile::getSection(llvm::object::COFFObjectFile *this@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v8;
  const char *v9;
  uint64_t v10[2];

  if (a2 <= 0)
  {
    v6 = 0;
LABEL_13:
    *(_BYTE *)(a3 + 8) &= ~1u;
    goto LABEL_14;
  }
  v4 = *((_QWORD *)this + 6);
  if (v4)
  {
    v5 = *(unsigned __int16 *)(v4 + 2);
    if (v5 == 0xFFFF)
      v5 = 0;
  }
  else
  {
    v5 = *(_DWORD *)(*((_QWORD *)this + 7) + 44);
  }
  if (v5 >= a2)
  {
    v6 = *((_QWORD *)this + 11) + 40 * (a2 - 1);
    goto LABEL_13;
  }
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v10[0] = 3;
  v10[1] = qword_1EF8F7238[0];
  v9 = "section index out of bounds";
  sub_1C5DF1730((_BYTE **)&v9, v10, &v8);
  *(_BYTE *)(a3 + 8) |= 1u;
  v6 = v8;
LABEL_14:
  *(_QWORD *)a3 = v6;
}

uint64_t llvm::object::COFFObjectFile::getImageBase(llvm::object::COFFObjectFile *this)
{
  uint64_t v1;
  uint64_t v3;

  v1 = *((_QWORD *)this + 8);
  if (v1)
    return *(unsigned int *)(v1 + 28);
  v3 = *((_QWORD *)this + 9);
  if (v3)
    return *(_QWORD *)(v3 + 24);
  else
    return 0;
}

uint64_t llvm::object::COFFObjectFile::getSymbolType@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  int v8;
  _WORD *v9;
  int v10;
  unsigned __int8 *v11;
  int v12;
  unsigned int v13;
  _DWORD *v14;

  v4 = *(_QWORD *)(result + 96);
  if (v4)
    v5 = a2;
  else
    v5 = 0;
  if (v4)
    v6 = 0;
  else
    v6 = a2;
  if (v5)
  {
    v7 = *(unsigned __int16 *)(v5 + 12);
    if (v7 >> 8 <= 0xFE)
      v8 = *(unsigned __int16 *)(v5 + 12);
    else
      v8 = (__int16)v7;
  }
  else
  {
    v8 = *(_DWORD *)(v6 + 12);
  }
  v9 = (_WORD *)(v5 + 14);
  if (!v5)
    v9 = (_WORD *)(v6 + 16);
  if ((*v9 & 0xF0) == 0x20)
  {
    *(_BYTE *)(a3 + 8) &= ~1u;
    v10 = 5;
    goto LABEL_16;
  }
  result = sub_1C62C72C0(v5, v6);
  if ((_DWORD)result)
  {
    v10 = 0;
    *(_BYTE *)(a3 + 8) &= ~1u;
    goto LABEL_16;
  }
  v11 = (unsigned __int8 *)(v5 + 16);
  if (!v5)
    v11 = (unsigned __int8 *)(v6 + 18);
  v12 = *v11;
  if (v12 == 103)
  {
    *(_BYTE *)(a3 + 8) &= ~1u;
    v10 = 4;
    goto LABEL_16;
  }
  if (v12 == 2)
  {
    if (v5)
    {
      v13 = *(unsigned __int16 *)(v5 + 12);
      if (v13 >> 8 > 0xFE)
        goto LABEL_29;
    }
    else
    {
      v13 = *(_DWORD *)(v6 + 12);
    }
    if (!v13)
    {
      v14 = (_DWORD *)(v5 + 8);
      if (!v5)
        v14 = (_DWORD *)(v6 + 8);
      if (*v14)
      {
        *(_BYTE *)(a3 + 8) &= ~1u;
        v10 = 2;
        goto LABEL_16;
      }
    }
  }
LABEL_29:
  if (v8 == -2 || (result = sub_1C62C7318(v5, v6), (_DWORD)result))
  {
    *(_BYTE *)(a3 + 8) &= ~1u;
    v10 = 3;
  }
  else
  {
    *(_BYTE *)(a3 + 8) &= ~1u;
    if (v8 < 1)
      v10 = 1;
    else
      v10 = 2;
  }
LABEL_16:
  *(_DWORD *)a3 = v10;
  return result;
}

uint64_t llvm::object::COFFObjectFile::getSymbolFlags@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned __int8 *v7;
  int v8;
  unsigned __int8 *v9;
  int v11;
  int v12;
  uint64_t v14;
  int v15;
  int v16;
  int v17;
  uint64_t result;
  unsigned int v19;
  _BOOL4 v20;
  _BOOL4 v21;
  int v22;
  int v23;
  int v24;
  int v25;
  _DWORD *v26;
  _DWORD *v27;

  v4 = *(_QWORD *)(a1 + 96);
  if (v4)
    v5 = a2;
  else
    v5 = 0;
  if (v4)
    v6 = 0;
  else
    v6 = a2;
  v7 = (unsigned __int8 *)(v5 + 16);
  if (!v5)
    v7 = (unsigned __int8 *)(v6 + 18);
  v8 = *v7;
  v9 = (unsigned __int8 *)(v5 + 17);
  if (!v5)
    v9 = (unsigned __int8 *)(v6 + 19);
  if (v8 == 105 || v8 == 2)
    v11 = 2;
  else
    v11 = 0;
  v12 = *v9;
  if (v8 == 105 && v12 != 0)
  {
    v14 = v5 + 18;
    if (!v5)
      v14 = v6 + 20;
    if (*(_DWORD *)(v14 + 4) == 3)
      v15 = 4;
    else
      v15 = 5;
    v11 |= v15;
  }
  if (!v5)
  {
    v16 = *(_DWORD *)(v6 + 12);
    v17 = *(unsigned __int8 *)(v6 + 18);
    result = sub_1C62C7318(0, v6);
    if (v8 == 2)
    {
      v19 = *(_DWORD *)(v6 + 12);
      goto LABEL_35;
    }
LABEL_40:
    v20 = 0;
    goto LABEL_41;
  }
  if (*(__int16 *)(v5 + 12) >= 0xFFFFFF00)
    v16 = *(__int16 *)(v5 + 12);
  else
    v16 = *(unsigned __int16 *)(v5 + 12);
  v17 = *(unsigned __int8 *)(v5 + 16);
  result = sub_1C62C7318(v5, v6);
  if (v8 != 2)
    goto LABEL_40;
  v19 = *(unsigned __int16 *)(v5 + 12);
  if (v19 >> 8 > 0xFE)
    goto LABEL_40;
LABEL_35:
  if (v19)
  {
    v20 = 0;
    if (v5)
      goto LABEL_37;
  }
  else
  {
    v26 = (_DWORD *)(v5 + 8);
    if (!v5)
      v26 = (_DWORD *)(v6 + 8);
    v20 = *v26 != 0;
    if (v5)
    {
LABEL_37:
      if (HIBYTE(*(unsigned __int16 *)(v5 + 12)) <= 0xFEu && !*(_WORD *)(v5 + 12))
        goto LABEL_58;
LABEL_41:
      v21 = 0;
      goto LABEL_42;
    }
  }
  if (*(_DWORD *)(v6 + 12))
    goto LABEL_41;
LABEL_58:
  v27 = (_DWORD *)(v5 + 8);
  if (!v5)
    v27 = (_DWORD *)(v6 + 8);
  v21 = *v27 == 0;
LABEL_42:
  if (v17 == 103)
    v22 = 1;
  else
    v22 = result;
  v23 = v11 | 8;
  if (v16 != -1)
    v23 = v11;
  if (v22)
    v24 = v23 | 0x80;
  else
    v24 = v23;
  if (v20)
    v25 = v24 | 0x10;
  else
    v25 = v24;
  *(_BYTE *)(a3 + 8) &= ~1u;
  *(_DWORD *)a3 = v25 | v21;
  return result;
}

uint64_t llvm::object::COFFObjectFile::getCommonSymbolSizeImpl(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  uint64_t v5;

  v2 = *(_QWORD *)(a1 + 96);
  v3 = v2 == 0;
  if (v2)
    v4 = a2;
  else
    v4 = 0;
  if (v3)
    v5 = a2;
  else
    v5 = 0;
  if (!v4)
    v4 = v5;
  return *(unsigned int *)(v4 + 8);
}

void llvm::object::COFFObjectFile::getSymbolSection(llvm::object::COFFObjectFile *this@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  BOOL v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  v5 = *((_QWORD *)this + 12);
  if (v5)
    v6 = a2 == 0;
  else
    v6 = 1;
  if (v6)
  {
    if (v5)
      v7 = 0;
    else
      v7 = a2;
    v8 = *(_DWORD *)(v7 + 12);
    if (v8 <= 0)
      goto LABEL_13;
  }
  else
  {
    v8 = *(unsigned __int16 *)(a2 + 12);
    if ((unsigned __int16)(v8 + 256) < 0x101u)
    {
LABEL_13:
      v10 = (*(uint64_t (**)(llvm::object::COFFObjectFile *))(*(_QWORD *)this + 352))(this);
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)a3 = v10;
      *(_QWORD *)(a3 + 8) = v11;
      return;
    }
  }
  llvm::object::COFFObjectFile::getSection(this, v8, (uint64_t)&v12);
  v9 = v12;
  if ((v13 & 1) != 0)
  {
    *(_BYTE *)(a3 + 16) |= 1u;
  }
  else
  {
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_QWORD *)(a3 + 8) = this;
  }
  *(_QWORD *)a3 = v9;
}

uint64_t llvm::object::COFFObjectFile::getSymbolSectionID(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  BOOL v3;
  uint64_t v4;
  unsigned int v6;

  v2 = *(_QWORD *)(a1 + 96);
  if (v2)
    v3 = a2 == 0;
  else
    v3 = 1;
  if (v3)
  {
    if (v2)
      v4 = 0;
    else
      v4 = a2;
    return *(unsigned int *)(v4 + 12);
  }
  else
  {
    v6 = *(unsigned __int16 *)(a2 + 12);
    if (v6 >> 8 <= 0xFE)
      return *(unsigned __int16 *)(a2 + 12);
    else
      return (__int16)v6;
  }
}

void llvm::object::COFFObjectFile::getSectionName(char *__s@<X1>, llvm::object::COFFObjectFile *a2@<X0>, uint64_t a3@<X8>)
{
  size_t v6;
  unint64_t v7;
  char *v8;
  size_t v9;
  int v10;
  int v11;
  int v12;
  unsigned int v13;
  unint64_t v14;
  size_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v21;
  _BOOL4 v22;
  int v23;
  uint64_t v25;
  uint64_t v26;
  const char *v27;
  uint64_t v28;
  unint64_t v29;

  if (!__s[7])
  {
    v6 = strlen(__s);
    if (v6 && *__s == 47)
    {
      if (v6 < 2)
        goto LABEL_47;
      goto LABEL_3;
    }
LABEL_19:
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_QWORD *)a3 = __s;
    *(_QWORD *)(a3 + 8) = v6;
    return;
  }
  v6 = 8;
  if (*__s != 47)
    goto LABEL_19;
LABEL_3:
  if (*(_WORD *)__s == 12079)
  {
    v15 = v6 - 2;
    if (v6 - 2 <= 6)
    {
      if (v6 == 2)
      {
        LODWORD(v16) = 0;
        goto LABEL_51;
      }
      v16 = 0;
      v17 = __s + 2;
      do
      {
        v18 = *v17;
        if ((v18 - 65) > 0x19)
        {
          if ((v18 - 97) > 0x19)
          {
            if ((v18 - 48) > 9)
            {
              if ((_DWORD)v18 == 43)
              {
                v19 = 62;
              }
              else
              {
                if ((_DWORD)v18 != 47)
                  goto LABEL_35;
                v19 = 63;
              }
            }
            else
            {
              v19 = v18 + 4;
            }
          }
          else
          {
            v19 = v18 - 71;
          }
        }
        else
        {
          v19 = v18 - 65;
        }
        v16 = v19 + (v16 << 6);
        ++v17;
        --v15;
      }
      while (v15);
      if (!HIDWORD(v16))
        goto LABEL_51;
    }
LABEL_35:
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v28 = 3;
    v29 = qword_1EF8F7238[0];
    v27 = "invalid section name";
    sub_1C5DF1730((_BYTE **)&v27, &v28, &v26);
    *(_BYTE *)(a3 + 16) |= 1u;
    v21 = v26;
LABEL_50:
    *(_QWORD *)a3 = v21;
    return;
  }
  v7 = 0;
  v8 = __s + 1;
  v9 = v6 - 1;
  while (1)
  {
    v11 = *v8++;
    v10 = v11;
    if ((v11 - 48) < 0xA)
    {
      v12 = -48;
      goto LABEL_7;
    }
    if ((v10 - 97) < 0x1A)
    {
      v12 = -87;
      goto LABEL_7;
    }
    if ((v10 - 65) > 0x19)
      break;
    v12 = -55;
LABEL_7:
    v13 = v12 + v10;
    if (v13 > 9)
      break;
    v14 = 10 * v7 + v13;
    if (v7 > v14 / 0xA)
      goto LABEL_47;
    v7 = v14;
    if (!--v9)
      goto LABEL_40;
  }
  v14 = v7;
LABEL_40:
  v22 = v9 != 0;
  v23 = 0;
  if (v14 < 0x100000000)
    v23 = v14;
  if (v22)
    LODWORD(v16) = 0;
  else
    LODWORD(v16) = v23;
  if (HIDWORD(v14) || v22)
  {
LABEL_47:
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v28 = 3;
    v29 = qword_1EF8F7238[0];
    v27 = "invalid section name";
    sub_1C5DF1730((_BYTE **)&v27, &v28, &v25);
    *(_BYTE *)(a3 + 16) |= 1u;
    v21 = v25;
    goto LABEL_50;
  }
LABEL_51:
  llvm::object::COFFObjectFile::getString(a2, v16, a3);
}

uint64_t llvm::object::COFFObjectFile::getSectionSize(_QWORD *a1, uint64_t a2)
{
  unsigned int v2;

  if ((a1[8] || a1[9]) && a1[2])
  {
    v2 = *(_DWORD *)(a2 + 16);
    if (v2 >= *(_DWORD *)(a2 + 8))
      return *(unsigned int *)(a2 + 8);
  }
  else
  {
    return *(unsigned int *)(a2 + 16);
  }
  return v2;
}

{
  unsigned int v2;

  if ((a1[8] || a1[9]) && a1[2])
  {
    v2 = *(_DWORD *)(a2 + 16);
    if (v2 >= *(_DWORD *)(a2 + 8))
      return *(unsigned int *)(a2 + 8);
  }
  else
  {
    return *(unsigned int *)(a2 + 16);
  }
  return v2;
}

double llvm::object::COFFObjectFile::getSectionContents@<D0>(_QWORD *a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  double result;
  uint64_t v5;
  uint64_t v6;
  __int128 v7;

  v7 = 0uLL;
  llvm::object::COFFObjectFile::getSectionContents(a1, a2, (unint64_t *)&v7, &v6);
  v5 = v6;
  if (v6)
  {
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v5;
  }
  else
  {
    *(_BYTE *)(a3 + 16) &= ~1u;
    result = *(double *)&v7;
    *(_OWORD *)a3 = v7;
  }
  return result;
}

_QWORD *llvm::object::COFFObjectFile::getSectionContents@<X0>(_QWORD *result@<X0>, _DWORD *a2@<X1>, unint64_t *a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v5;
  uint64_t v7;
  unint64_t v8;
  unsigned int v9;
  BOOL v10;
  __int128 v11;
  unint64_t v12;
  _OWORD v13[2];

  v5 = a2[5];
  if (!(_DWORD)v5)
    goto LABEL_14;
  v7 = result[2];
  v8 = v7 + v5;
  if (result[8])
  {
    if (v7)
    {
LABEL_4:
      v9 = a2[4];
      if (v9 >= a2[2])
        v9 = a2[2];
      goto LABEL_12;
    }
  }
  else
  {
    if (result[9])
      v10 = v7 == 0;
    else
      v10 = 1;
    if (!v10)
      goto LABEL_4;
  }
  v9 = a2[4];
LABEL_12:
  v11 = *((_OWORD *)result + 2);
  v12 = v9;
  v13[0] = *((_OWORD *)result + 1);
  v13[1] = v11;
  result = sub_1C599ECDC((unint64_t *)v13, v8, v9, a4);
  if (*a4)
    return result;
  *a3 = v8;
  a3[1] = v12;
LABEL_14:
  *a4 = 0;
  return result;
}

uint64_t llvm::object::COFFObjectFile::getSectionID(uint64_t a1, uint64_t a2)
{
  return ((a2 - *(_QWORD *)(a1 + 88)) / 0x28uLL) + 1;
}

unint64_t sub_1C599E004(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  __int128 v6;
  unsigned int v7;
  _BOOL4 v8;
  unint64_t v9;
  __int128 v10;
  char *v11;
  _OWORD v13[2];
  char *v14;
  _OWORD v15[2];
  char *v16;
  char *v17;

  v6 = a2[1];
  v15[0] = *a2;
  v15[1] = v6;
  v7 = sub_1C599E0EC(a1, v15, a3);
  if (!v7)
    return 0;
  v8 = (*(_BYTE *)(a1 + 39) & 1) != 0 && *(__int16 *)(a1 + 32) == -1;
  v9 = a3 + *(unsigned int *)(a1 + 24) + 10 * v8;
  v10 = a2[1];
  v13[0] = *a2;
  v13[1] = v10;
  sub_1C599ECDC((unint64_t *)v13, v9, 10 * v7, &v14);
  v11 = v14;
  if (v14)
  {
    v14 = 0;
    v16 = v11;
    sub_1C4D62BD4(&v16, &v17);
    if (v16)
      (*(void (**)(char *))(*(_QWORD *)v16 + 8))(v16);
    if (v14)
      (*(void (**)(char *))(*(_QWORD *)v14 + 8))(v14);
    return 0;
  }
  return v9;
}

uint64_t sub_1C599E0EC(uint64_t a1, _OWORD *a2, uint64_t a3)
{
  uint64_t result;
  __int128 v5;
  _DWORD *v6;
  char *v7;
  char *v8;
  _OWORD v9[2];
  char *v10;

  if ((*(_BYTE *)(a1 + 39) & 1) == 0)
    return *(unsigned __int16 *)(a1 + 32);
  result = *(unsigned __int16 *)(a1 + 32);
  if ((_DWORD)result == 0xFFFF)
  {
    v5 = a2[1];
    v9[0] = *a2;
    v9[1] = v5;
    v6 = (_DWORD *)(a3 + *(unsigned int *)(a1 + 24));
    sub_1C599ECDC((unint64_t *)v9, (unint64_t)v6, 0xAuLL, &v8);
    v7 = v8;
    if (v8)
    {
      v8 = 0;
      v10 = v7;
      sub_1C4D62BD4(&v10, (char **)v9);
      if (v10)
        (*(void (**)(char *))(*(_QWORD *)v10 + 8))(v10);
      if (v8)
        (*(void (**)(char *))(*(_QWORD *)v8 + 8))(v8);
      return 0;
    }
    else
    {
      return (*v6 - 1);
    }
  }
  return result;
}

void llvm::object::COFFObjectFile::initSymbolTablePtr(llvm::object::COFFObjectFile *this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v4;
  int v5;
  unsigned int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  unsigned int *v13;
  int v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  __int128 *v18;
  unsigned int v19;
  __int128 v20;
  unsigned int v21;
  unsigned int v22;
  int v23;
  int *v24;
  int v25;
  int *v26;
  int v27;
  int v28;
  __int128 v29;
  unsigned int *v30;
  unint64_t v31;
  __int128 v32;
  unsigned int v33;
  __int128 v35;
  __int128 v36;
  __int128 v37;
  __int128 v38;
  const char *v39;

  v4 = *((_QWORD *)this + 6);
  if (!v4)
  {
    v8 = (_QWORD *)((char *)this + 56);
    v7 = *((_QWORD *)this + 7);
    if (!v7)
    {
LABEL_35:
      v12 = 0;
      v24 = (int *)(v7 + 48);
      v23 = 1;
      goto LABEL_36;
    }
    v9 = (_QWORD *)((char *)this + 104);
    v35 = *((_OWORD *)this + 1);
    v36 = *((_OWORD *)this + 2);
    v10 = *((_QWORD *)this + 2);
    v11 = *((_QWORD *)this + 12);
    goto LABEL_6;
  }
  v5 = *(unsigned __int16 *)(v4 + 2);
  if (v5 == 0xFFFF)
    v6 = 0;
  else
    v6 = *(_DWORD *)(v4 + 8);
  v18 = (__int128 *)((char *)this + 16);
  v11 = *((_QWORD *)this + 2) + v6;
  if ((*((_QWORD *)this + 12) || *((_QWORD *)this + 13)) && v5 != 0xFFFF)
    v19 = *(_DWORD *)(v4 + 12);
  else
    v19 = 0;
  v20 = *((_OWORD *)this + 2);
  v37 = *v18;
  v38 = v20;
  sub_1C599ECDC((unint64_t *)&v37, v11, 18 * v19, a2);
  if (*a2)
    return;
  *((_QWORD *)this + 12) = v11;
  *a2 = 0;
  v8 = (_QWORD *)((char *)this + 56);
  v7 = *((_QWORD *)this + 7);
  v12 = *((_QWORD *)this + 6);
  if (v7)
  {
    v9 = (_QWORD *)((char *)this + 104);
    v35 = *v18;
    v36 = *((_OWORD *)this + 2);
    v10 = *((_QWORD *)this + 2);
    if (v12)
    {
      if (*(__int16 *)(v12 + 2) == -1)
      {
        v14 = 0;
        v15 = 0;
        goto LABEL_8;
      }
      v14 = 0;
      v13 = (unsigned int *)(v12 + 8);
LABEL_7:
      v15 = *v13;
LABEL_8:
      v16 = v10 + v15;
      if (v11 || *v9)
      {
        if ((v14 & 1) != 0)
        {
          v17 = (unsigned int *)(v7 + 52);
LABEL_25:
          v21 = *v17;
LABEL_27:
          v22 = 18;
          if (v14)
            v22 = 20;
          v37 = v35;
          v38 = v36;
          sub_1C599ECDC((unint64_t *)&v37, v10 + v15, v21 * (unint64_t)v22, a2);
          if (*a2)
            return;
          *((_QWORD *)this + 13) = v16;
          *a2 = 0;
          v12 = *((_QWORD *)this + 6);
          goto LABEL_31;
        }
        if (*(__int16 *)(v12 + 2) != -1)
        {
          v17 = (unsigned int *)(v12 + 12);
          goto LABEL_25;
        }
      }
      v21 = 0;
      goto LABEL_27;
    }
LABEL_6:
    v12 = 0;
    v13 = (unsigned int *)(v7 + 48);
    v14 = 1;
    goto LABEL_7;
  }
LABEL_31:
  if (!v12)
  {
    v7 = *v8;
    goto LABEL_35;
  }
  if (*(__int16 *)(v12 + 2) == -1)
  {
    v23 = 0;
    v25 = 0;
    goto LABEL_37;
  }
  v23 = 0;
  v24 = (int *)(v12 + 8);
LABEL_36:
  v25 = *v24;
LABEL_37:
  if (*((_QWORD *)this + 12) || *((_QWORD *)this + 13))
  {
    if ((v23 & 1) != 0)
    {
      v26 = (int *)(*v8 + 52);
LABEL_43:
      v27 = *v26;
      goto LABEL_45;
    }
    if (*(__int16 *)(v12 + 2) != -1)
    {
      v26 = (int *)(v12 + 12);
      goto LABEL_43;
    }
  }
  v27 = 0;
LABEL_45:
  if (v23)
    v28 = 20;
  else
    v28 = 18;
  v29 = *((_OWORD *)this + 2);
  v30 = (unsigned int *)(*((_QWORD *)this + 2) + (v25 + v27 * v28));
  v37 = *((_OWORD *)this + 1);
  v38 = v29;
  sub_1C599ECDC((unint64_t *)&v37, (unint64_t)v30, 4uLL, a2);
  if (!*a2)
  {
    *a2 = 0;
    v31 = *v30;
    *((_DWORD *)this + 30) = v31;
    v32 = *((_OWORD *)this + 2);
    v37 = *((_OWORD *)this + 1);
    v38 = v32;
    sub_1C599ECDC((unint64_t *)&v37, (unint64_t)v30, v31, a2);
    if (!*a2)
    {
      *((_QWORD *)this + 14) = v30;
      *a2 = 0;
      v33 = *((_DWORD *)this + 30);
      if (v33 <= 3)
      {
        *((_DWORD *)this + 30) = 4;
LABEL_59:
        *a2 = 0;
        return;
      }
      if (v33 == 4 || !*((_BYTE *)v30 + v33 - 1))
        goto LABEL_59;
      if (!atomic_load(qword_1EF8F7238))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
      *(_QWORD *)&v37 = 3;
      *((_QWORD *)&v37 + 1) = qword_1EF8F7238[0];
      v39 = "string table missing null terminator";
      sub_1C5DF1730((_BYTE **)&v39, (uint64_t *)&v37, a2);
    }
  }
}

void llvm::object::COFFObjectFile::getVaPtr(llvm::object::COFFObjectFile *this@<X0>, unint64_t *a2@<X2>, int a3@<W1>, uint64_t *a4@<X8>)
{
  uint64_t v4;

  v4 = *((_QWORD *)this + 8);
  if (v4)
  {
    LODWORD(v4) = *(_DWORD *)(v4 + 28);
  }
  else
  {
    v4 = *((_QWORD *)this + 9);
    if (v4)
      v4 = *(_QWORD *)(v4 + 24);
  }
  llvm::object::COFFObjectFile::getRvaPtr(this, a2, 0, a3 - v4, a4);
}

void llvm::object::COFFObjectFile::getRvaPtr(llvm::object::COFFObjectFile *this@<X0>, unint64_t *a2@<X2>, const char *a3@<X3>, unsigned int a4@<W1>, uint64_t *a5@<X8>)
{
  void (**v10)(llvm::raw_ostream *__hidden);
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  void (**v16)(llvm::raw_ostream *__hidden);
  uint64_t v17;
  unsigned int v18;
  unsigned int v19;
  BOOL v20;
  uint64_t v21;
  unint64_t v25;
  void **v26;
  uint64_t v27;
  void (**v28)(llvm::raw_ostream *__hidden);
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  char v33;
  uint64_t v34;
  int v35;
  void **v36;
  void *__p[2];
  uint64_t v38;
  uint64_t (**v39)(llvm::format_object_base *__hidden);
  const char *v40;
  uint64_t v41;
  const char *v42;
  __int16 v43;

  v10 = (void (**)(llvm::raw_ostream *__hidden))(*(uint64_t (**)(llvm::object::COFFObjectFile *))(*(_QWORD *)this + 344))(this);
  v12 = v11;
  v13 = (*(uint64_t (**)(llvm::object::COFFObjectFile *))(*(_QWORD *)this + 352))(this);
  v28 = v10;
  v29 = v12;
  if (v12 == v14 && v10 == (void (**)(llvm::raw_ostream *__hidden))v13)
  {
LABEL_15:
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v25 = qword_1EF8F7238[0];
    __p[0] = 0;
    __p[1] = 0;
    v38 = 0;
    LODWORD(v29) = 0;
    v33 = 0;
    v34 = 0;
    v28 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
    v36 = __p;
    v35 = 0;
    v31 = 0;
    v32 = 0;
    v30 = 0;
    if (a3)
    {
      v39 = (uint64_t (**)(llvm::format_object_base *__hidden))&unk_1E8169CA0;
      v40 = "RVA 0x%x for %s not found";
      LODWORD(v41) = a4;
      v42 = a3;
    }
    else
    {
      v39 = &off_1E8132728;
      v40 = "RVA 0x%x not found";
      v41 = a4;
    }
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v28, (uint64_t)&v39);
    v26 = v36;
    v27 = operator new();
    v43 = 260;
    v39 = (uint64_t (**)(llvm::format_object_base *__hidden))v26;
    *(_QWORD *)v27 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)&v39, (_QWORD *)(v27 + 8));
    *(_QWORD *)(v27 + 32) = 3;
    *(_QWORD *)(v27 + 40) = v25;
    *(_BYTE *)(v27 + 48) = 1;
    *a5 = v27;
    v28 = off_1E81A6E70;
    if (v35 == 1 && v30)
      MEMORY[0x1CAA32F9C](v30, 0x1000C8077774924);
    if (SHIBYTE(v38) < 0)
      operator delete(__p[0]);
  }
  else
  {
    v16 = (void (**)(llvm::raw_ostream *__hidden))v13;
    v17 = v14;
    while (1)
    {
      v18 = *((_DWORD *)v10 + 3);
      v19 = *((_DWORD *)v10 + 2) + v18;
      v20 = a4 >= v18;
      v21 = a4 - v18;
      if (v20 && v19 > a4)
        break;
      (*(void (**)(uint64_t, void (***)(llvm::raw_ostream *__hidden)))(*(_QWORD *)v12 + 128))(v12, &v28);
      v10 = v28;
      v12 = v29;
      if (v29 == v17 && v28 == v16)
        goto LABEL_15;
    }
    *a2 = *((_QWORD *)this + 2) + *((unsigned int *)v10 + 5) + v21;
    *a5 = 0;
  }
}

uint64_t llvm::object::COFFObjectFile::getCOFFSection(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

void llvm::object::COFFObjectFile::getRvaAndSizeAsBytes(_QWORD *a1@<X0>, unsigned int a2@<W1>, unsigned int a3@<W2>, _QWORD *a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  void (**v12)(llvm::raw_ostream *__hidden);
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  void (**v18)(llvm::raw_ostream *__hidden);
  uint64_t v19;
  unsigned int v20;
  BOOL v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unint64_t v27;
  void **v28;
  uint64_t v29;
  void (**v30)(llvm::raw_ostream *__hidden);
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  char v35;
  uint64_t v36;
  int v37;
  void **v38;
  void *__p[2];
  uint64_t v40;
  uint64_t (**v41)(llvm::format_object_base *__hidden);
  const char *v42;
  uint64_t v43;
  uint64_t v44;
  __int16 v45;

  v12 = (void (**)(llvm::raw_ostream *__hidden))(*(uint64_t (**)(_QWORD *))(*a1 + 344))(a1);
  v14 = v13;
  v15 = (*(uint64_t (**)(_QWORD *))(*a1 + 352))(a1);
  v30 = v12;
  v31 = v14;
  if (v14 == v16 && v12 == (void (**)(llvm::raw_ostream *__hidden))v15)
  {
LABEL_16:
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v27 = qword_1EF8F7238[0];
    __p[0] = 0;
    __p[1] = 0;
    v40 = 0;
    LODWORD(v31) = 0;
    v35 = 0;
    v36 = 0;
    v30 = (void (**)(llvm::raw_ostream *__hidden))&unk_1E81A7208;
    v38 = __p;
    v37 = 0;
    v33 = 0;
    v34 = 0;
    v32 = 0;
    if (a5)
    {
      v41 = (uint64_t (**)(llvm::format_object_base *__hidden))&unk_1E8169CA0;
      v42 = "RVA 0x%x for %s not found";
      LODWORD(v43) = a2;
      v44 = a5;
    }
    else
    {
      v41 = &off_1E8132728;
      v42 = "RVA 0x%x not found";
      v43 = a2;
    }
    llvm::raw_ostream::operator<<((llvm::raw_ostream *)&v30, (uint64_t)&v41);
    v28 = v38;
    v29 = operator new();
    v45 = 260;
    v41 = (uint64_t (**)(llvm::format_object_base *__hidden))v28;
    *(_QWORD *)v29 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)&v41, (_QWORD *)(v29 + 8));
    *(_QWORD *)(v29 + 32) = 3;
    *(_QWORD *)(v29 + 40) = v27;
    *(_BYTE *)(v29 + 48) = 1;
    *a6 = v29;
    v30 = off_1E81A6E70;
    if (v37 == 1 && v32)
      MEMORY[0x1CAA32F9C](v32, 0x1000C8077774924);
    if (SHIBYTE(v40) < 0)
      operator delete(__p[0]);
  }
  else
  {
    v18 = (void (**)(llvm::raw_ostream *__hidden))v15;
    v19 = v16;
    while (1)
    {
      v20 = *((_DWORD *)v12 + 3);
      v21 = a2 >= v20;
      v22 = a2 - v20;
      if (v21)
      {
        v23 = *((_DWORD *)v12 + 2);
        v21 = v23 >= v22;
        v24 = v23 - v22;
        if (v24 != 0 && v21 && v24 >= a3)
          break;
      }
      (*(void (**)(uint64_t, void (***)(llvm::raw_ostream *__hidden)))(*(_QWORD *)v14 + 128))(v14, &v30);
      v12 = v30;
      v14 = v31;
      if (v31 == v19 && v30 == v18)
        goto LABEL_16;
    }
    *a4 = a1[2] + v22 + *((unsigned int *)v12 + 5);
    a4[1] = a3;
    *a6 = 0;
  }
}

void llvm::object::COFFObjectFile::getHintName(llvm::object::COFFObjectFile *this@<X0>, unsigned __int16 *a2@<X2>, llvm::StringRef *a3@<X3>, unsigned int a4@<W1>, uint64_t *a5@<X8>)
{
  const char *v8;
  size_t v9;
  char *__s;

  __s = 0;
  llvm::object::COFFObjectFile::getRvaPtr(this, (unint64_t *)&__s, 0, a4, a5);
  if (!*a5)
  {
    v8 = __s + 2;
    *a2 = *(_WORD *)__s;
    v9 = strlen(v8);
    *(_QWORD *)a3 = v8;
    *((_QWORD *)a3 + 1) = v9;
    *a5 = 0;
  }
}

void llvm::object::COFFObjectFile::getDebugPDBInfo(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X8>)
{
  unint64_t v8;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v15;
  const char *v16;
  uint64_t v17[2];

  v14 = 0;
  v15 = 0;
  llvm::object::COFFObjectFile::getRvaAndSizeAsBytes(a1, *(_DWORD *)(a2 + 20), *(_DWORD *)(a2 + 16), &v14, (uint64_t)"PDB info", a5);
  if (!*a5)
  {
    v8 = v15 - 24;
    if (v15 > 0x18)
    {
      v10 = v14;
      *a3 = v14;
      v11 = v10 + 24;
      *a4 = v10 + 24;
      a4[1] = v8;
      LOBYTE(v17[0]) = 0;
      v12 = llvm::StringRef::find(a4, (char *)v17, 1uLL, 0);
      if (v8 >= v12)
        v13 = v12;
      else
        v13 = v8;
      if (v12 == -1)
        v13 = v8;
      *a4 = v11;
      a4[1] = v13;
      *a5 = 0;
    }
    else
    {
      if (!atomic_load(qword_1EF8F7238))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
      v17[0] = 3;
      v17[1] = qword_1EF8F7238[0];
      v16 = "PDB info too small";
      sub_1C5DF1730((_BYTE **)&v16, v17, a5);
    }
  }
}

void llvm::object::COFFObjectFile::getDebugPDBInfo(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  _DWORD *v4;
  _DWORD *v5;
  _DWORD *v6;
  _DWORD *v7;

  v5 = (_DWORD *)a1[22];
  v4 = (_DWORD *)a1[23];
  if (v5 == v4)
  {
LABEL_5:
    *a2 = 0;
    *a3 = 0;
    a3[1] = 0;
    *a4 = 0;
  }
  else
  {
    v6 = v5 + 3;
    while (*v6 != 2)
    {
      v7 = v6 + 4;
      v6 += 7;
      if (v7 == v4)
        goto LABEL_5;
    }
    llvm::object::COFFObjectFile::getDebugPDBInfo(a1, (uint64_t)(v6 - 3), a2, a3, a4);
  }
}

void llvm::object::COFFObjectFile::initImportTablePtr(llvm::object::COFFObjectFile *this@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3;
  uint64_t v5;
  _DWORD *v6;
  unsigned int v7;
  __int128 v8;
  unint64_t v9;
  _OWORD v10[2];
  unint64_t v11;

  v3 = *((_QWORD *)this + 10);
  if (!v3)
    goto LABEL_10;
  v5 = *((_QWORD *)this + 8);
  v6 = (_DWORD *)(v5 ? v5 + 92 : *((_QWORD *)this + 9) + 108);
  if (*v6 <= 1u)
    goto LABEL_10;
  v7 = *(_DWORD *)(v3 + 8);
  if (!v7)
    goto LABEL_10;
  v11 = 0;
  llvm::object::COFFObjectFile::getRvaPtr(this, &v11, "import table", v7, a2);
  if (!*a2)
  {
    v8 = *((_OWORD *)this + 2);
    v10[0] = *((_OWORD *)this + 1);
    v10[1] = v8;
    v9 = v11;
    sub_1C599ECDC((unint64_t *)v10, v11, *(unsigned int *)(v3 + 12), a2);
    if (!*a2)
    {
      *((_QWORD *)this + 16) = v9;
LABEL_10:
      *a2 = 0;
    }
  }
}

uint64_t llvm::object::COFFObjectFile::getDataDirectory(llvm::object::COFFObjectFile *this, unsigned int a2)
{
  uint64_t v2;
  uint64_t v3;
  unsigned int *v4;

  v2 = *((_QWORD *)this + 10);
  if (v2
    && ((v3 = *((_QWORD *)this + 8)) == 0
      ? (v4 = (unsigned int *)(*((_QWORD *)this + 9) + 108))
      : (v4 = (unsigned int *)(v3 + 92)),
        *v4 > a2))
  {
    return v2 + 8 * a2;
  }
  else
  {
    return 0;
  }
}

_QWORD *sub_1C599ECDC@<X0>(unint64_t *a1@<X0>, unint64_t a2@<X1>, unint64_t a3@<X2>, _QWORD *a4@<X8>)
{
  unint64_t v5;
  BOOL v6;
  unint64_t v8;
  _QWORD *result;

  v5 = a3 + a2;
  if (__CFADD__(a3, a2) || v5 < a3 || (*a1 <= a2 ? (v6 = v5 > *a1 + a1[1]) : (v6 = 1), v6))
  {
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v8 = qword_1EF8F7238[0];
    result = (_QWORD *)operator new();
    *result = &off_1E81A0D28;
    result[1] = 4;
    result[2] = v8;
  }
  else
  {
    result = 0;
  }
  *a4 = result;
  return result;
}

void llvm::object::COFFObjectFile::create(_OWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  __int128 v5;
  uint64_t v6;
  uint64_t v7;

  v4 = operator new();
  v5 = a1[1];
  *(_OWORD *)(v4 + 16) = *a1;
  *(_OWORD *)(v4 + 32) = v5;
  *(_DWORD *)(v4 + 8) = 9;
  *(_QWORD *)v4 = &off_1E81852B0;
  *(_OWORD *)(v4 + 48) = 0u;
  *(_OWORD *)(v4 + 64) = 0u;
  *(_OWORD *)(v4 + 80) = 0u;
  *(_OWORD *)(v4 + 96) = 0u;
  *(_OWORD *)(v4 + 108) = 0u;
  *(_QWORD *)(v4 + 128) = 0;
  *(_QWORD *)(v4 + 136) = 0;
  *(_DWORD *)(v4 + 144) = 0;
  *(_OWORD *)(v4 + 152) = 0u;
  *(_OWORD *)(v4 + 168) = 0u;
  *(_OWORD *)(v4 + 184) = 0u;
  *(_OWORD *)(v4 + 200) = 0u;
  llvm::object::COFFObjectFile::initialize((llvm::object::COFFObjectFile *)v4, &v7);
  v6 = v7;
  if (v7)
  {
    *(_BYTE *)(a2 + 8) |= 1u;
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
    v4 = v6;
  }
  else
  {
    *(_BYTE *)(a2 + 8) &= ~1u;
  }
  *(_QWORD *)a2 = v4;
}

double llvm::object::COFFObjectFile::COFFObjectFile(uint64_t a1, __int128 *a2)
{
  __int128 v2;
  __int128 v3;
  double result;

  v3 = *a2;
  v2 = a2[1];
  *(_DWORD *)(a1 + 8) = 9;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v2;
  *(_QWORD *)a1 = &off_1E81852B0;
  result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 108) = 0u;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  return result;
}

{
  __int128 v2;
  __int128 v3;
  double result;

  v3 = *a2;
  v2 = a2[1];
  *(_DWORD *)(a1 + 8) = 9;
  *(_OWORD *)(a1 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v2;
  *(_QWORD *)a1 = &off_1E81852B0;
  result = 0.0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 108) = 0u;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 144) = 0;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  return result;
}

void llvm::object::COFFObjectFile::initialize(llvm::object::COFFObjectFile *this@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4;
  _QWORD *v5;
  _BYTE *v6;
  uint64_t v7;
  const char *v9;
  unint64_t v11;
  _QWORD *v12;
  int v14;
  uint64_t v15;
  __int128 v16;
  _WORD *v17;
  __int128 v18;
  unint64_t v19;
  uint64_t v22;
  uint64_t v23;
  __int128 v24;
  unint64_t v25;
  unsigned int v26;
  __int128 v27;
  unsigned __int16 *v28;
  int v29;
  unint64_t v30;
  unsigned int *v31;
  unint64_t v32;
  __int128 v33;
  __int128 v34;
  uint64_t v35;
  _DWORD *v36;
  char *v37;
  _DWORD *v38;
  char *v40;
  __int128 v41;
  __int128 v42;
  __int128 v43;
  __int128 v44;
  char *v45;

  std::system_category();
  v4 = *((_QWORD *)this + 3);
  if (v4 <= 0x13)
  {
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v11 = qword_1EF8F7238[0];
    v12 = (_QWORD *)operator new();
    *v12 = &off_1E81A0D28;
    v12[1] = 4;
    v12[2] = v11;
    *a2 = (uint64_t)v12;
    return;
  }
  v5 = (_QWORD *)((char *)this + 16);
  if (v4 <= 0x43)
  {
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v14 = 0;
    v15 = 0;
    v6 = (_BYTE *)*v5;
  }
  else
  {
    v6 = (_BYTE *)*v5;
    if (*(_BYTE *)*v5 == 77 && v6[1] == 90)
    {
      v7 = *((unsigned int *)v6 + 15);
      if (*(_DWORD *)&v6[v7] != 17744)
      {
LABEL_6:
        if (!atomic_load(qword_1EF8F7238))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
        *(_QWORD *)&v43 = 3;
        *((_QWORD *)&v43 + 1) = qword_1EF8F7238[0];
        v9 = "incorrect PE magic";
LABEL_9:
        v45 = (char *)v9;
        sub_1C5DF1730(&v45, (uint64_t *)&v43, a2);
        return;
      }
      v15 = v7 + 4;
      v14 = 1;
    }
    else
    {
      v14 = 0;
      v15 = 0;
    }
  }
  v16 = *((_OWORD *)this + 2);
  v43 = *(_OWORD *)v5;
  v44 = v16;
  v17 = &v6[v15];
  sub_1C599ECDC((unint64_t *)&v43, (unint64_t)&v6[v15], 0x14uLL, a2);
  if (!*a2)
  {
    *((_QWORD *)this + 6) = v17;
    *a2 = 0;
    if ((v14 & 1) == 0)
    {
      if (*v17)
        goto LABEL_35;
      if ((__int16)v17[1] == -1)
      {
        if (*((_QWORD *)this + 3) <= 0x37uLL)
        {
          if (!atomic_load(qword_1EF8F7238))
            llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
        }
        else
        {
          v18 = *((_OWORD *)this + 2);
          v43 = *(_OWORD *)v5;
          v44 = v18;
          v19 = *((_QWORD *)this + 2) + v15;
          sub_1C599ECDC((unint64_t *)&v43, v19, 0x38uLL, a2);
          if (*a2)
            return;
          *((_QWORD *)this + 7) = v19;
          *a2 = 0;
          if (*(unsigned __int16 *)(v19 + 4) >= 2u
            && *(_QWORD *)(v19 + 12) == 0x4BA9BAEED1BAA1C7
            && *(_QWORD *)(v19 + 20) == 0xB8DCA46AF6FA20AFLL)
          {
            *((_QWORD *)this + 6) = 0;
            v15 += 56;
            goto LABEL_50;
          }
          *((_QWORD *)this + 7) = 0;
        }
      }
      v17 = (_WORD *)*((_QWORD *)this + 6);
    }
    if (!v17)
    {
      v22 = 0;
      if (!v14)
        goto LABEL_37;
      goto LABEL_42;
    }
LABEL_35:
    std::system_category();
    v22 = *((_QWORD *)this + 6);
    if (*(__int16 *)(v22 + 2) == -1)
      goto LABEL_79;
    v15 += 20;
    if (!v14)
    {
LABEL_37:
      if (v22)
      {
LABEL_38:
        v23 = v15 + *(unsigned __int16 *)(v22 + 16);
        v24 = *((_OWORD *)this + 2);
        v41 = *(_OWORD *)v5;
        v42 = v24;
        v25 = *v5 + v23;
        v26 = *(unsigned __int16 *)(v22 + 2);
        if (v26 == 0xFFFF)
          v26 = 0;
LABEL_51:
        v43 = v41;
        v44 = v42;
        sub_1C599ECDC((unint64_t *)&v43, v25, 40 * v26, a2);
        if (*a2)
          return;
        *((_QWORD *)this + 11) = v25;
        *a2 = 0;
        v35 = *((_QWORD *)this + 6);
        if (v35)
        {
          if (*(__int16 *)(v35 + 2) == -1)
            goto LABEL_62;
          v36 = (_DWORD *)(v35 + 8);
        }
        else
        {
          v36 = (_DWORD *)(*((_QWORD *)this + 7) + 48);
        }
        if (*v36)
        {
          llvm::object::COFFObjectFile::initSymbolTablePtr(this, &v40);
          v37 = v40;
          if (v40)
          {
            v40 = 0;
            v45 = v37;
            sub_1C4D62BD4(&v45, (char **)&v43);
            if (v45)
              (*(void (**)(char *))(*(_QWORD *)v45 + 8))(v45);
            *((_QWORD *)this + 12) = 0;
            *((_QWORD *)this + 13) = 0;
            *((_DWORD *)this + 30) = 0;
            *((_QWORD *)this + 14) = 0;
            if (v40)
              (*(void (**)(char *))(*(_QWORD *)v40 + 8))(v40);
          }
          goto LABEL_72;
        }
LABEL_62:
        if (*((_QWORD *)this + 12) || *((_QWORD *)this + 13))
        {
          if (v35)
          {
            if (*(__int16 *)(v35 + 2) == -1)
              goto LABEL_72;
            v38 = (_DWORD *)(v35 + 12);
          }
          else
          {
            v38 = (_DWORD *)(*((_QWORD *)this + 7) + 52);
          }
          if (*v38)
          {
            if (!atomic_load(qword_1EF8F7238))
              llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
            *(_QWORD *)&v43 = 3;
            *((_QWORD *)&v43 + 1) = qword_1EF8F7238[0];
            v9 = "symbol table missing";
            goto LABEL_9;
          }
        }
LABEL_72:
        llvm::object::COFFObjectFile::initImportTablePtr(this, a2);
        if (*a2)
          return;
        llvm::object::COFFObjectFile::initDelayImportTablePtr(this, a2);
        if (*a2)
          return;
        llvm::object::COFFObjectFile::initExportTablePtr(this, a2);
        if (*a2)
          return;
        llvm::object::COFFObjectFile::initBaseRelocPtr(this, a2);
        if (*a2)
          return;
        llvm::object::COFFObjectFile::initDebugDirectoryPtr(this, a2);
        if (*a2)
          return;
        llvm::object::COFFObjectFile::initTLSDirectoryPtr(this, a2);
        if (*a2)
          return;
        llvm::object::COFFObjectFile::initLoadConfigPtr(this, a2);
        if (*a2)
          return;
LABEL_79:
        *a2 = 0;
        return;
      }
      goto LABEL_49;
    }
LABEL_42:
    v27 = *((_OWORD *)this + 2);
    v43 = *(_OWORD *)v5;
    v44 = v27;
    v28 = (unsigned __int16 *)(*v5 + v15);
    sub_1C599ECDC((unint64_t *)&v43, (unint64_t)v28, 0x60uLL, a2);
    if (*a2)
      return;
    *a2 = 0;
    v29 = *v28;
    if (v29 == 267)
    {
      *((_QWORD *)this + 8) = v28;
      v30 = *((_QWORD *)this + 2) + v15 + 96;
      v31 = (unsigned int *)(v28 + 46);
    }
    else
    {
      if (v29 != 523)
        goto LABEL_6;
      *((_QWORD *)this + 9) = v28;
      v30 = *((_QWORD *)this + 2) + v15 + 112;
      v31 = (unsigned int *)(v28 + 54);
    }
    v32 = 8 * *v31;
    v33 = *((_OWORD *)this + 2);
    v43 = *(_OWORD *)v5;
    v44 = v33;
    sub_1C599ECDC((unint64_t *)&v43, v30, v32, a2);
    if (*a2)
      return;
    *((_QWORD *)this + 10) = v30;
    *a2 = 0;
    v22 = *((_QWORD *)this + 6);
    if (v22)
      goto LABEL_38;
LABEL_49:
    v19 = *((_QWORD *)this + 7);
LABEL_50:
    v34 = *((_OWORD *)this + 2);
    v41 = *(_OWORD *)v5;
    v42 = v34;
    v25 = *v5 + v15;
    v26 = *(_DWORD *)(v19 + 44);
    goto LABEL_51;
  }
}

uint64_t llvm::object::COFFObjectFile::symbol_begin(llvm::object::COFFObjectFile *this)
{
  uint64_t result;

  result = *((_QWORD *)this + 12);
  if (!result)
    return *((_QWORD *)this + 13);
  return result;
}

uint64_t llvm::object::COFFObjectFile::import_directory_begin@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v2;
  int v3;

  v2 = *(_DWORD **)(this + 128);
  if (!v2)
    goto LABEL_9;
  if (!*v2 && !v2[1] && !v2[2] && !v2[3] && !v2[4])
  {
    v2 = 0;
LABEL_9:
    v3 = -1;
    goto LABEL_10;
  }
  v3 = 0;
LABEL_10:
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = this;
  return this;
}

uint64_t llvm::object::COFFObjectFile::import_directory_end@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = 0;
  *(_DWORD *)(a2 + 8) = -1;
  *(_QWORD *)(a2 + 16) = this;
  return this;
}

uint64_t llvm::object::COFFObjectFile::delay_import_directory_begin@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(this + 136);
  *(_DWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = this;
  return this;
}

uint64_t llvm::object::COFFObjectFile::delay_import_directory_end@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  int v2;

  v2 = *(_DWORD *)(this + 144);
  *(_QWORD *)a2 = *(_QWORD *)(this + 136);
  *(_DWORD *)(a2 + 8) = v2;
  *(_QWORD *)(a2 + 16) = this;
  return this;
}

uint64_t llvm::object::COFFObjectFile::export_directory_begin@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  *(_QWORD *)a2 = *(_QWORD *)(this + 152);
  *(_DWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = this;
  return this;
}

uint64_t llvm::object::COFFObjectFile::export_directory_end@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;

  v2 = *(_QWORD *)(this + 152);
  if (v2)
    v3 = *(_DWORD *)(v2 + 20);
  else
    v3 = 0;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = this;
  return this;
}

uint64_t llvm::object::COFFObjectFile::section_end(llvm::object::COFFObjectFile *this)
{
  uint64_t v1;
  int v2;

  v1 = *((_QWORD *)this + 6);
  if (v1)
  {
    v2 = *(unsigned __int16 *)(v1 + 2);
    if (v2 == 0xFFFF)
      v2 = 0;
  }
  else
  {
    v2 = *(_DWORD *)(*((_QWORD *)this + 7) + 44);
  }
  return *((_QWORD *)this + 11) + 40 * v2;
}

uint64_t llvm::object::COFFObjectFile::base_reloc_begin(llvm::object::COFFObjectFile *this)
{
  return *((_QWORD *)this + 20);
}

uint64_t llvm::object::COFFObjectFile::base_reloc_end(llvm::object::COFFObjectFile *this)
{
  return *((_QWORD *)this + 21);
}

uint64_t llvm::object::COFFObjectFile::import_directories@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v2;
  int v3;

  v2 = *(_DWORD **)(this + 128);
  if (!v2)
    goto LABEL_9;
  if (!*v2 && !v2[1] && !v2[2] && !v2[3] && !v2[4])
  {
    v2 = 0;
LABEL_9:
    v3 = -1;
    goto LABEL_10;
  }
  v3 = 0;
LABEL_10:
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = v3;
  *(_QWORD *)(a2 + 16) = this;
  *(_QWORD *)(a2 + 24) = 0;
  *(_DWORD *)(a2 + 32) = -1;
  *(_QWORD *)(a2 + 40) = this;
  return this;
}

uint64_t llvm::object::COFFObjectFile::delay_import_directories@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;

  v2 = *(_QWORD *)(this + 136);
  v3 = *(_DWORD *)(this + 144);
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = this;
  *(_QWORD *)(a2 + 24) = v2;
  *(_DWORD *)(a2 + 32) = v3;
  *(_QWORD *)(a2 + 40) = this;
  return this;
}

uint64_t llvm::object::COFFObjectFile::export_directories@<X0>(uint64_t this@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2;
  int v3;

  v2 = *(_QWORD *)(this + 152);
  if (v2)
    v3 = *(_DWORD *)(v2 + 20);
  else
    v3 = 0;
  *(_QWORD *)a2 = v2;
  *(_DWORD *)(a2 + 8) = 0;
  *(_QWORD *)(a2 + 16) = this;
  *(_QWORD *)(a2 + 24) = v2;
  *(_DWORD *)(a2 + 32) = v3;
  *(_QWORD *)(a2 + 40) = this;
  return this;
}

uint64_t llvm::object::COFFObjectFile::base_relocs@<X0>(uint64_t this@<X0>, _QWORD *a2@<X8>)
{
  uint64_t v2;

  v2 = *(_QWORD *)(this + 168);
  *a2 = *(_QWORD *)(this + 160);
  a2[1] = 0;
  a2[2] = v2;
  a2[3] = 0;
  return this;
}

void llvm::object::COFFObjectFile::getSymbolName(char *__s@<X1>, llvm::object::COFFObjectFile *a2@<X0>, uint64_t a3@<X8>)
{
  size_t v5;

  if (*(_DWORD *)__s)
  {
    if (__s[7])
    {
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)a3 = __s;
      *(_QWORD *)(a3 + 8) = 8;
    }
    else
    {
      v5 = strlen(__s);
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)a3 = __s;
      *(_QWORD *)(a3 + 8) = v5;
    }
  }
  else
  {
    llvm::object::COFFObjectFile::getString(a2, *((_DWORD *)__s + 1), a3);
  }
}

uint64_t llvm::object::COFFObjectFile::getSymbolAuxData(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unsigned __int8 *v4;
  int v5;
  uint64_t v6;
  uint64_t v7;

  v3 = 18;
  if (!*(_QWORD *)(a1 + 48))
    v3 = 20;
  v4 = (unsigned __int8 *)(a2 + 17);
  if (!a2)
    v4 = (unsigned __int8 *)(a3 + 19);
  v5 = *v4;
  if (a2)
    v6 = a2;
  else
    v6 = a3;
  v7 = v6 + v3;
  if (v5)
    return v7;
  else
    return 0;
}

unint64_t llvm::object::COFFObjectFile::getSymbolIndex(_QWORD *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;

  v3 = a1[12];
  if (!v3)
    v3 = a1[13];
  if (a2)
    a3 = a2;
  v5 = a3 - v3;
  v6 = 18;
  if (!a1[6])
    v6 = 20;
  return v5 / v6;
}

uint64_t llvm::object::COFFObjectFile::toRel(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t llvm::object::COFFObjectFile::getCOFFRelocation(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

unint64_t llvm::object::COFFObjectFile::getRelocations(uint64_t a1, uint64_t a2)
{
  __int128 v4;
  unint64_t v5;
  __int128 v6;
  _OWORD v8[2];
  _OWORD v9[2];

  v4 = *(_OWORD *)(a1 + 32);
  v9[0] = *(_OWORD *)(a1 + 16);
  v9[1] = v4;
  v5 = sub_1C599E004(a2, v9, *(_QWORD *)(a1 + 16));
  v6 = *(_OWORD *)(a1 + 32);
  v8[0] = *(_OWORD *)(a1 + 16);
  v8[1] = v6;
  sub_1C599E0EC(a2, v8, *(_QWORD *)(a1 + 16));
  return v5;
}

BOOL llvm::object::ImportDirectoryEntryRef::operator==(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a1 == *(_QWORD *)a2 && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
}

uint64_t *llvm::object::ImportDirectoryEntryRef::moveNext(uint64_t *this)
{
  unsigned int v1;
  uint64_t v2;

  v1 = *((_DWORD *)this + 2) + 1;
  *((_DWORD *)this + 2) = v1;
  v2 = *this;
  if (!*(_DWORD *)(*this + 20 * v1)
    && !*(_DWORD *)(v2 + 20 * v1 + 4)
    && !*(_DWORD *)(v2 + 20 * v1 + 8)
    && !*(_DWORD *)(v2 + 20 * v1 + 12)
    && !*(_DWORD *)(v2 + 20 * v1 + 16))
  {
    *((_DWORD *)this + 2) = -1;
    *this = 0;
  }
  return this;
}

_QWORD *llvm::object::ImportDirectoryEntryRef::getImportTableEntry@<X0>(uint64_t a1@<X0>, unint64_t *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v5;
  unint64_t v6;
  _QWORD *result;
  __int128 v8;
  _OWORD v9[2];

  v5 = *(_QWORD *)(a1 + 16);
  v8 = *(_OWORD *)(v5 + 32);
  v6 = *(_QWORD *)a1 + 20 * *(unsigned int *)(a1 + 8);
  v9[0] = *(_OWORD *)(v5 + 16);
  v9[1] = v8;
  result = sub_1C599ECDC((unint64_t *)v9, v6, 0x14uLL, a3);
  if (!*a3)
  {
    *a2 = v6;
    *a3 = 0;
  }
  return result;
}

uint64_t llvm::object::ImportDirectoryEntryRef::imported_symbol_begin@<X0>(llvm::object::COFFObjectFile **this@<X0>, uint64_t a2@<X8>)
{
  return sub_1C599F95C(a2, *((_DWORD *)*this + 5 * *((unsigned int *)this + 2) + 4), this[2]);
}

uint64_t sub_1C599F95C(uint64_t a1, unsigned int a2, llvm::object::COFFObjectFile *this)
{
  unint64_t v5;
  uint64_t result;
  unint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;

  v10 = 0;
  llvm::object::COFFObjectFile::getRvaPtr(this, &v10, 0, a2, &v9);
  v5 = v10;
  result = (*(uint64_t (**)(llvm::object::COFFObjectFile *))(*(_QWORD *)this + 360))(this);
  if ((_DWORD)result == 4)
    v7 = v5;
  else
    v7 = 0;
  if ((_DWORD)result == 4)
    v8 = 0;
  else
    v8 = v5;
  *(_QWORD *)a1 = v7;
  *(_QWORD *)(a1 + 8) = v8;
  *(_DWORD *)(a1 + 16) = 0;
  *(_QWORD *)(a1 + 24) = this;
  return result;
}

uint64_t llvm::object::ImportDirectoryEntryRef::imported_symbol_end@<X0>(llvm::object::COFFObjectFile **this@<X0>, uint64_t a2@<X8>)
{
  return sub_1C599F9F0(a2, *((_DWORD *)*this + 5 * *((unsigned int *)this + 2) + 4), this[2]);
}

uint64_t sub_1C599F9F0(uint64_t a1, unsigned int a2, llvm::object::COFFObjectFile *this)
{
  int v5;
  unint64_t v6;
  int v7;
  _DWORD *v8;
  _QWORD *v10;
  uint64_t result;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;

  v16 = 0;
  llvm::object::COFFObjectFile::getRvaPtr(this, &v16, 0, a2, &v15);
  v5 = (*(uint64_t (**)(llvm::object::COFFObjectFile *))(*(_QWORD *)this + 360))(this);
  v6 = v16;
  if (v5 == 4)
  {
    if (*(_DWORD *)v16)
    {
      v7 = 0;
      v8 = (_DWORD *)(v16 + 4);
      do
        ++v7;
      while (*v8++);
      goto LABEL_11;
    }
  }
  else if (*(_QWORD *)v16)
  {
    v7 = 0;
    v10 = (_QWORD *)(v16 + 8);
    do
      ++v7;
    while (*v10++);
    goto LABEL_11;
  }
  v7 = 0;
LABEL_11:
  result = (*(uint64_t (**)(llvm::object::COFFObjectFile *))(*(_QWORD *)this + 360))(this);
  if ((_DWORD)result == 4)
    v13 = v6;
  else
    v13 = 0;
  if ((_DWORD)result == 4)
    v14 = 0;
  else
    v14 = v6;
  *(_QWORD *)a1 = v13;
  *(_QWORD *)(a1 + 8) = v14;
  *(_DWORD *)(a1 + 16) = v7;
  *(_QWORD *)(a1 + 24) = this;
  return result;
}

uint64_t llvm::object::ImportDirectoryEntryRef::imported_symbols@<X0>(llvm::object::ImportDirectoryEntryRef *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int v4;
  llvm::object::COFFObjectFile *v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;

  v4 = *(_DWORD *)(*(_QWORD *)this + 20 * *((unsigned int *)this + 2) + 16);
  v5 = (llvm::object::COFFObjectFile *)*((_QWORD *)this + 2);
  v11 = 0;
  llvm::object::COFFObjectFile::getRvaPtr(v5, &v11, 0, v4, &v10);
  v6 = v11;
  v7 = (*(uint64_t (**)(llvm::object::COFFObjectFile *))(*(_QWORD *)v5 + 360))(v5);
  if (v7 == 4)
    v8 = 0;
  else
    v8 = v6;
  if (v7 != 4)
    v6 = 0;
  result = sub_1C599F9F0(a2 + 32, *(_DWORD *)(*(_QWORD *)this + 20 * *((unsigned int *)this + 2) + 16), *((llvm::object::COFFObjectFile **)this + 2));
  *(_QWORD *)a2 = v6;
  *(_QWORD *)(a2 + 8) = v8;
  *(_DWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = v5;
  return result;
}

uint64_t llvm::object::ImportDirectoryEntryRef::lookup_table_begin@<X0>(llvm::object::COFFObjectFile **this@<X0>, uint64_t a2@<X8>)
{
  return sub_1C599F95C(a2, *((_DWORD *)*this + 5 * *((unsigned int *)this + 2)), this[2]);
}

uint64_t llvm::object::ImportDirectoryEntryRef::lookup_table_end@<X0>(llvm::object::COFFObjectFile **this@<X0>, uint64_t a2@<X8>)
{
  return sub_1C599F9F0(a2, *((_DWORD *)*this + 5 * *((unsigned int *)this + 2)), this[2]);
}

uint64_t llvm::object::ImportDirectoryEntryRef::lookup_table_symbols@<X0>(llvm::object::ImportDirectoryEntryRef *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int v4;
  llvm::object::COFFObjectFile *v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;

  v4 = *(_DWORD *)(*(_QWORD *)this + 20 * *((unsigned int *)this + 2));
  v5 = (llvm::object::COFFObjectFile *)*((_QWORD *)this + 2);
  v11 = 0;
  llvm::object::COFFObjectFile::getRvaPtr(v5, &v11, 0, v4, &v10);
  v6 = v11;
  v7 = (*(uint64_t (**)(llvm::object::COFFObjectFile *))(*(_QWORD *)v5 + 360))(v5);
  if (v7 == 4)
    v8 = 0;
  else
    v8 = v6;
  if (v7 != 4)
    v6 = 0;
  result = sub_1C599F9F0(a2 + 32, *(_DWORD *)(*(_QWORD *)this + 20 * *((unsigned int *)this + 2)), *((llvm::object::COFFObjectFile **)this + 2));
  *(_QWORD *)a2 = v6;
  *(_QWORD *)(a2 + 8) = v8;
  *(_DWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = v5;
  return result;
}

void llvm::object::ImportDirectoryEntryRef::getName(llvm::object::COFFObjectFile **this@<X0>, llvm::StringRef *a2@<X1>, uint64_t *a3@<X8>)
{
  size_t v5;
  char *__s;

  __s = 0;
  llvm::object::COFFObjectFile::getRvaPtr(this[2], (unint64_t *)&__s, "import directory name", *((_DWORD *)*this + 5 * *((unsigned int *)this + 2) + 3), a3);
  if (!*a3)
  {
    if (__s)
      v5 = strlen(__s);
    else
      v5 = 0;
    *(_QWORD *)a2 = __s;
    *((_QWORD *)a2 + 1) = v5;
    *a3 = 0;
  }
}

uint64_t llvm::object::ImportDirectoryEntryRef::getImportLookupTableRVA@<X0>(uint64_t this@<X0>, unsigned int *a2@<X1>, _QWORD *a3@<X8>)
{
  *a2 = *(_DWORD *)(*(_QWORD *)this + 20 * *(unsigned int *)(this + 8));
  *a3 = 0;
  return this;
}

uint64_t llvm::object::ImportDirectoryEntryRef::getImportAddressTableRVA@<X0>(uint64_t this@<X0>, unsigned int *a2@<X1>, _QWORD *a3@<X8>)
{
  *a2 = *(_DWORD *)(*(_QWORD *)this + 20 * *(unsigned int *)(this + 8) + 16);
  *a3 = 0;
  return this;
}

BOOL llvm::object::DelayImportDirectoryEntryRef::operator==(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a1 == *(_QWORD *)a2 && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
}

uint64_t llvm::object::DelayImportDirectoryEntryRef::moveNext(uint64_t this)
{
  ++*(_DWORD *)(this + 8);
  return this;
}

uint64_t llvm::object::DelayImportDirectoryEntryRef::imported_symbol_begin@<X0>(llvm::object::COFFObjectFile **this@<X0>, uint64_t a2@<X8>)
{
  return sub_1C599F95C(a2, *((_DWORD *)*this + 8 * *((unsigned int *)this + 2) + 4), this[2]);
}

uint64_t llvm::object::DelayImportDirectoryEntryRef::imported_symbol_end@<X0>(llvm::object::COFFObjectFile **this@<X0>, uint64_t a2@<X8>)
{
  return sub_1C599F9F0(a2, *((_DWORD *)*this + 8 * *((unsigned int *)this + 2) + 4), this[2]);
}

uint64_t llvm::object::DelayImportDirectoryEntryRef::imported_symbols@<X0>(llvm::object::DelayImportDirectoryEntryRef *this@<X0>, uint64_t a2@<X8>)
{
  unsigned int v4;
  llvm::object::COFFObjectFile *v5;
  unint64_t v6;
  int v7;
  unint64_t v8;
  uint64_t result;
  uint64_t v10;
  unint64_t v11;

  v4 = *(_DWORD *)(*(_QWORD *)this + 32 * *((unsigned int *)this + 2) + 16);
  v5 = (llvm::object::COFFObjectFile *)*((_QWORD *)this + 2);
  v11 = 0;
  llvm::object::COFFObjectFile::getRvaPtr(v5, &v11, 0, v4, &v10);
  v6 = v11;
  v7 = (*(uint64_t (**)(llvm::object::COFFObjectFile *))(*(_QWORD *)v5 + 360))(v5);
  if (v7 == 4)
    v8 = 0;
  else
    v8 = v6;
  if (v7 != 4)
    v6 = 0;
  result = sub_1C599F9F0(a2 + 32, *(_DWORD *)(*(_QWORD *)this + 32 * *((unsigned int *)this + 2) + 16), *((llvm::object::COFFObjectFile **)this + 2));
  *(_QWORD *)a2 = v6;
  *(_QWORD *)(a2 + 8) = v8;
  *(_DWORD *)(a2 + 16) = 0;
  *(_QWORD *)(a2 + 24) = v5;
  return result;
}

void llvm::object::DelayImportDirectoryEntryRef::getName(llvm::object::COFFObjectFile **this@<X0>, llvm::StringRef *a2@<X1>, uint64_t *a3@<X8>)
{
  size_t v5;
  char *__s;

  __s = 0;
  llvm::object::COFFObjectFile::getRvaPtr(this[2], (unint64_t *)&__s, "delay import directory name", *((_DWORD *)*this + 8 * *((unsigned int *)this + 2) + 1), a3);
  if (!*a3)
  {
    if (__s)
      v5 = strlen(__s);
    else
      v5 = 0;
    *(_QWORD *)a2 = __s;
    *((_QWORD *)a2 + 1) = v5;
    *a3 = 0;
  }
}

uint64_t llvm::object::DelayImportDirectoryEntryRef::getDelayImportTable@<X0>(uint64_t result@<X0>, _QWORD *a2@<X1>, _QWORD *a3@<X8>)
{
  *a2 = *(_QWORD *)result + 32 * *(unsigned int *)(result + 8);
  *a3 = 0;
  return result;
}

void llvm::object::DelayImportDirectoryEntryRef::getImportAddress(llvm::object::DelayImportDirectoryEntryRef *this@<X0>, unint64_t *a2@<X2>, int a3@<W1>, uint64_t *a4@<X8>)
{
  int v7;
  llvm::object::COFFObjectFile *v8;
  char v9;
  unint64_t v10;
  unint64_t v11;

  v7 = *(_DWORD *)(*(_QWORD *)this + 32 * *((unsigned int *)this + 2) + 12);
  v8 = (llvm::object::COFFObjectFile *)*((_QWORD *)this + 2);
  if (*((_QWORD *)v8 + 9))
    v9 = 3;
  else
    v9 = 2;
  v11 = 0;
  llvm::object::COFFObjectFile::getRvaPtr(v8, &v11, "import address", (a3 << v9) + v7, a4);
  if (!*a4)
  {
    if (*(_QWORD *)(*((_QWORD *)this + 2) + 72))
      v10 = *(_QWORD *)v11;
    else
      v10 = *(unsigned int *)v11;
    *a2 = v10;
    *a4 = 0;
  }
}

BOOL llvm::object::ExportDirectoryEntryRef::operator==(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a1 == *(_QWORD *)a2 && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
}

uint64_t llvm::object::ExportDirectoryEntryRef::moveNext(uint64_t this)
{
  ++*(_DWORD *)(this + 8);
  return this;
}

void llvm::object::ExportDirectoryEntryRef::getDllName(llvm::object::COFFObjectFile **this@<X0>, llvm::StringRef *a2@<X1>, uint64_t *a3@<X8>)
{
  size_t v5;
  char *__s;

  __s = 0;
  llvm::object::COFFObjectFile::getRvaPtr(this[2], (unint64_t *)&__s, "dll name", *((_DWORD *)*this + 3), a3);
  if (!*a3)
  {
    if (__s)
      v5 = strlen(__s);
    else
      v5 = 0;
    *(_QWORD *)a2 = __s;
    *((_QWORD *)a2 + 1) = v5;
    *a3 = 0;
  }
}

uint64_t llvm::object::ExportDirectoryEntryRef::getOrdinalBase@<X0>(uint64_t this@<X0>, unsigned int *a2@<X1>, _QWORD *a3@<X8>)
{
  *a2 = *(_DWORD *)(*(_QWORD *)this + 16);
  *a3 = 0;
  return this;
}

_DWORD *llvm::object::ExportDirectoryEntryRef::getOrdinal@<X0>(_DWORD *this@<X0>, unsigned int *a2@<X1>, _QWORD *a3@<X8>)
{
  *a2 = this[2] + *(_DWORD *)(*(_QWORD *)this + 16);
  *a3 = 0;
  return this;
}

void llvm::object::ExportDirectoryEntryRef::getExportRVA(llvm::object::COFFObjectFile **this@<X0>, unsigned int *a2@<X1>, uint64_t *a3@<X8>)
{
  unint64_t v6;

  v6 = 0;
  llvm::object::COFFObjectFile::getRvaPtr(this[2], &v6, "export address", *((_DWORD *)*this + 7), a3);
  if (!*a3)
  {
    *a2 = *(_DWORD *)(v6 + 4 * *((unsigned int *)this + 2));
    *a3 = 0;
  }
}

void llvm::object::ExportDirectoryEntryRef::getSymbolName(llvm::object::COFFObjectFile **this@<X0>, llvm::StringRef *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  char *v8;
  char *v9;
  char *v10;
  size_t v11;
  char *__s;

  __s = 0;
  llvm::object::COFFObjectFile::getRvaPtr(this[2], (unint64_t *)&__s, "export ordinal table", *((_DWORD *)*this + 9), a3);
  if (*a3)
    return;
  v6 = *((unsigned int *)*this + 6);
  if (!(_DWORD)v6)
  {
    v11 = 0;
    v10 = (char *)&unk_1C873FF12;
LABEL_8:
    *(_QWORD *)a2 = v10;
    *((_QWORD *)a2 + 1) = v11;
    *a3 = 0;
    return;
  }
  v7 = 0;
  v8 = __s;
  v9 = &__s[2 * v6];
  v10 = (char *)&unk_1C873FF12;
  while (*((_DWORD *)this + 2) != *(unsigned __int16 *)v8)
  {
    v8 += 2;
    v7 += 4;
    if (v8 >= v9)
      goto LABEL_6;
  }
  llvm::object::COFFObjectFile::getRvaPtr(this[2], (unint64_t *)&__s, "export table entry", *((_DWORD *)*this + 8), a3);
  if (!*a3)
  {
    llvm::object::COFFObjectFile::getRvaPtr(this[2], (unint64_t *)&__s, "export symbol name", *(_DWORD *)&__s[v7], a3);
    if (!*a3)
    {
      v10 = __s;
      if (!__s)
      {
LABEL_6:
        v11 = 0;
        goto LABEL_8;
      }
      v11 = strlen(__s);
      goto LABEL_8;
    }
  }
}

void llvm::object::ExportDirectoryEntryRef::isForwarder(llvm::object::ExportDirectoryEntryRef *this@<X0>, BOOL *a2@<X1>, uint64_t *a3@<X8>)
{
  llvm::object::COFFObjectFile *v5;
  unsigned int *v6;
  uint64_t v8;
  _DWORD *v9;
  unsigned int v10;
  BOOL v12;
  const char *v14;
  unint64_t v15[2];

  v5 = (llvm::object::COFFObjectFile *)*((_QWORD *)this + 2);
  v6 = (unsigned int *)*((_QWORD *)v5 + 10);
  if (v6
    && ((v8 = *((_QWORD *)v5 + 8)) == 0 ? (v9 = (_DWORD *)(*((_QWORD *)v5 + 9) + 108)) : (v9 = (_DWORD *)(v8 + 92)),
        *v9))
  {
    v15[0] = 0;
    llvm::object::COFFObjectFile::getRvaPtr(v5, v15, "export address", *(_DWORD *)(*(_QWORD *)this + 28), a3);
    if (!*a3)
    {
      v10 = *(_DWORD *)(v15[0] + 4 * *((unsigned int *)this + 2));
      v12 = *v6 <= v10 && v10 < v6[1] + *v6;
      *a2 = v12;
      *a3 = 0;
    }
  }
  else
  {
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v15[0] = 3;
    v15[1] = qword_1EF8F7238[0];
    v14 = "export table missing";
    sub_1C5DF1730((_BYTE **)&v14, (uint64_t *)v15, a3);
  }
}

void llvm::object::ExportDirectoryEntryRef::getForwardTo(llvm::object::COFFObjectFile **this@<X0>, llvm::StringRef *a2@<X1>, uint64_t *a3@<X8>)
{
  unsigned int v6;
  size_t v7;
  char *__s;

  __s = 0;
  llvm::object::COFFObjectFile::getRvaPtr(this[2], (unint64_t *)&__s, "export address", *((_DWORD *)*this + 7), a3);
  if (!*a3)
  {
    v6 = *(_DWORD *)&__s[4 * *((unsigned int *)this + 2)];
    *a3 = 0;
    __s = 0;
    llvm::object::COFFObjectFile::getRvaPtr(this[2], (unint64_t *)&__s, "export forward target", v6, a3);
    if (!*a3)
    {
      if (__s)
        v7 = strlen(__s);
      else
        v7 = 0;
      *(_QWORD *)a2 = __s;
      *((_QWORD *)a2 + 1) = v7;
      *a3 = 0;
    }
  }
}

BOOL llvm::object::ImportedSymbolRef::operator==(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a1 == *(_QWORD *)a2
      && *(_QWORD *)(a1 + 8) == *(_QWORD *)(a2 + 8)
      && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16);
}

uint64_t llvm::object::ImportedSymbolRef::moveNext(uint64_t this)
{
  ++*(_DWORD *)(this + 16);
  return this;
}

void llvm::object::ImportedSymbolRef::getSymbolName(llvm::object::ImportedSymbolRef *this@<X0>, llvm::StringRef *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  size_t v6;
  unint64_t v7;

  if (*(_QWORD *)this)
  {
    LODWORD(v5) = *(_DWORD *)(*(_QWORD *)this + 4 * *((unsigned int *)this + 4));
    if ((v5 & 0x80000000) != 0)
      goto LABEL_10;
  }
  else
  {
    v5 = *(_QWORD *)(*((_QWORD *)this + 1) + 8 * *((unsigned int *)this + 4));
    if (v5 < 0)
      goto LABEL_10;
  }
  v7 = 0;
  llvm::object::COFFObjectFile::getRvaPtr(*((llvm::object::COFFObjectFile **)this + 3), &v7, "import symbol name", v5, a3);
  if (*a3)
    return;
  if (v7 == -2)
    v6 = 0;
  else
    v6 = strlen((const char *)(v7 + 2));
  *(_QWORD *)a2 = v7 + 2;
  *((_QWORD *)a2 + 1) = v6;
LABEL_10:
  *a3 = 0;
}

uint64_t llvm::object::ImportedSymbolRef::isOrdinal@<X0>(uint64_t this@<X0>, BOOL *a2@<X1>, _QWORD *a3@<X8>)
{
  _BOOL8 v3;

  if (*(_QWORD *)this)
    LODWORD(v3) = *(_DWORD *)(*(_QWORD *)this + 4 * *(unsigned int *)(this + 16)) >> 31;
  else
    v3 = *(_QWORD *)(*(_QWORD *)(this + 8) + 8 * *(unsigned int *)(this + 16)) >> 63;
  *a2 = v3;
  *a3 = 0;
  return this;
}

uint64_t llvm::object::ImportedSymbolRef::getHintNameRVA@<X0>(uint64_t this@<X0>, unsigned int *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v3;

  if (*(_QWORD *)this)
    LODWORD(v3) = *(_DWORD *)(*(_QWORD *)this + 4 * *(unsigned int *)(this + 16));
  else
    v3 = *(_QWORD *)(*(_QWORD *)(this + 8) + 8 * *(unsigned int *)(this + 16));
  *a2 = v3;
  *a3 = 0;
  return this;
}

void llvm::object::ImportedSymbolRef::getOrdinal(llvm::object::ImportedSymbolRef *this@<X0>, unsigned __int16 *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5;
  unint64_t v6;

  if (!*(_QWORD *)this)
  {
    v5 = *(_QWORD *)(*((_QWORD *)this + 1) + 8 * *((unsigned int *)this + 4));
    if ((v5 & 0x8000000000000000) == 0)
      goto LABEL_3;
LABEL_6:
    *a2 = v5;
    goto LABEL_7;
  }
  LODWORD(v5) = *(_DWORD *)(*(_QWORD *)this + 4 * *((unsigned int *)this + 4));
  if ((v5 & 0x80000000) != 0)
    goto LABEL_6;
LABEL_3:
  v6 = 0;
  llvm::object::COFFObjectFile::getRvaPtr(*((llvm::object::COFFObjectFile **)this + 3), &v6, "import symbol ordinal", v5, a3);
  if (*a3)
    return;
  *a2 = *(_WORD *)v6;
LABEL_7:
  *a3 = 0;
}

BOOL llvm::object::BaseRelocRef::operator==(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a1 == *(_QWORD *)a2 && *(_DWORD *)(a1 + 8) == *(_DWORD *)(a2 + 8);
}

_DWORD *llvm::object::BaseRelocRef::moveNext(_DWORD *this)
{
  int v1;
  unsigned int v2;
  int v3;

  v1 = this[2];
  v2 = 2 * v1 + 10;
  if (v2 == *(_DWORD *)(*(_QWORD *)this + 4))
  {
    v3 = 0;
    *(_QWORD *)this += v2;
  }
  else
  {
    v3 = v1 + 1;
  }
  this[2] = v3;
  return this;
}

uint64_t llvm::object::BaseRelocRef::getType@<X0>(uint64_t this@<X0>, unsigned __int8 *a2@<X1>, _QWORD *a3@<X8>)
{
  *a2 = *(unsigned __int16 *)(*(_QWORD *)this + 2 * *(unsigned int *)(this + 8) + 8) >> 12;
  *a3 = 0;
  return this;
}

uint64_t llvm::object::BaseRelocRef::getRVA@<X0>(uint64_t this@<X0>, unsigned int *a2@<X1>, _QWORD *a3@<X8>)
{
  *a2 = **(_DWORD **)this + (*(_WORD *)(*(_QWORD *)this + 2 * *(unsigned int *)(this + 8) + 8) & 0xFFF);
  *a3 = 0;
  return this;
}

void llvm::object::ResourceSectionRef::getDirStringAtOffset(llvm::object::ResourceSectionRef *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  std::__shared_weak_count *v6;
  unint64_t *p_shared_owners;
  unint64_t v8;
  uint64_t v9;
  __int128 v10;
  unsigned __int16 v11;
  void *v12;
  uint64_t v13;
  std::__shared_weak_count *v14;
  uint64_t v15;

  v12 = &unk_1E8185470;
  llvm::BinaryStreamRef::BinaryStreamRef(&v13, this);
  v15 = a2;
  v11 = 0;
  sub_1C62C8034((uint64_t)&v12, &v11, (uint64_t *)&v10);
  v5 = v10;
  if ((_QWORD)v10 || (v10 = 0uLL, sub_1C59A0758((uint64_t)&v12, &v10, v11, &v9), (v5 = v9) != 0))
  {
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v5;
  }
  else
  {
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_OWORD *)a3 = v10;
  }
  v12 = &unk_1E8185470;
  v6 = v14;
  if (v14)
  {
    p_shared_owners = (unint64_t *)&v14->__shared_owners_;
    do
      v8 = __ldaxr(p_shared_owners);
    while (__stlxr(v8 - 1, p_shared_owners));
    if (!v8)
    {
      ((void (*)(std::__shared_weak_count *))v6->__on_zero_shared)(v6);
      std::__shared_weak_count::__release_weak(v6);
    }
  }
}

uint64_t sub_1C59A0758@<X0>(uint64_t a1@<X0>, _QWORD *a2@<X1>, unsigned int a3@<W2>, uint64_t *a4@<X8>)
{
  uint64_t v7;
  uint64_t result;
  _QWORD v9[2];

  v9[0] = 0;
  v9[1] = 0;
  if (!a3)
  {
    result = 0;
    *a2 = 0;
    a2[1] = 0;
    goto LABEL_5;
  }
  if ((a3 & 0x80000000) != 0)
  {
    v7 = operator new();
    result = llvm::BinaryStreamError::BinaryStreamError(v7, 2u, "", 0);
LABEL_5:
    *a4 = result;
    return result;
  }
  result = llvm::BinaryStreamReader::readBytes(a1, (uint64_t)v9, 2 * a3, a4);
  if (!*a4)
  {
    result = 0;
    *a2 = v9[0];
    a2[1] = a3;
    goto LABEL_5;
  }
  return result;
}

void llvm::object::ResourceSectionRef::getEntryNameString(llvm::object::ResourceSectionRef *a1@<X0>, _DWORD *a2@<X1>, uint64_t a3@<X8>)
{
  llvm::object::ResourceSectionRef::getDirStringAtOffset(a1, *a2 & 0x7FFFFFFF, a3);
}

void llvm::object::ResourceSectionRef::getTableAtOffset(llvm::object::ResourceSectionRef *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  _QWORD v15[2];

  v11 = &unk_1E8185470;
  llvm::BinaryStreamRef::BinaryStreamRef(&v12, this);
  v14 = a2;
  v15[0] = 0;
  v15[1] = 0;
  llvm::BinaryStreamReader::readBytes((uint64_t)&v11, (uint64_t)v15, 0x10u, &v10);
  v5 = v10;
  if (v10)
  {
    v6 = *(_BYTE *)(a3 + 8) | 1;
  }
  else
  {
    v5 = v15[0];
    v6 = *(_BYTE *)(a3 + 8) & 0xFE;
  }
  *(_BYTE *)(a3 + 8) = v6;
  *(_QWORD *)a3 = v5;
  v11 = &unk_1E8185470;
  v7 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void llvm::object::ResourceSectionRef::getTableEntryAtOffset(llvm::object::ResourceSectionRef *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  _QWORD v15[2];

  v11 = &unk_1E8185470;
  llvm::BinaryStreamRef::BinaryStreamRef(&v12, this);
  v14 = a2;
  v15[0] = 0;
  v15[1] = 0;
  llvm::BinaryStreamReader::readBytes((uint64_t)&v11, (uint64_t)v15, 8u, &v10);
  v5 = v10;
  if (v10)
  {
    v6 = *(_BYTE *)(a3 + 8) | 1;
  }
  else
  {
    v5 = v15[0];
    v6 = *(_BYTE *)(a3 + 8) & 0xFE;
  }
  *(_BYTE *)(a3 + 8) = v6;
  *(_QWORD *)a3 = v5;
  v11 = &unk_1E8185470;
  v7 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void llvm::object::ResourceSectionRef::getDataEntryAtOffset(llvm::object::ResourceSectionRef *this@<X0>, unsigned int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  char v6;
  std::__shared_weak_count *v7;
  unint64_t *p_shared_owners;
  unint64_t v9;
  uint64_t v10;
  void *v11;
  uint64_t v12;
  std::__shared_weak_count *v13;
  uint64_t v14;
  _QWORD v15[2];

  v11 = &unk_1E8185470;
  llvm::BinaryStreamRef::BinaryStreamRef(&v12, this);
  v14 = a2;
  v15[0] = 0;
  v15[1] = 0;
  llvm::BinaryStreamReader::readBytes((uint64_t)&v11, (uint64_t)v15, 0x10u, &v10);
  v5 = v10;
  if (v10)
  {
    v6 = *(_BYTE *)(a3 + 8) | 1;
  }
  else
  {
    v5 = v15[0];
    v6 = *(_BYTE *)(a3 + 8) & 0xFE;
  }
  *(_BYTE *)(a3 + 8) = v6;
  *(_QWORD *)a3 = v5;
  v11 = &unk_1E8185470;
  v7 = v13;
  if (v13)
  {
    p_shared_owners = (unint64_t *)&v13->__shared_owners_;
    do
      v9 = __ldaxr(p_shared_owners);
    while (__stlxr(v9 - 1, p_shared_owners));
    if (!v9)
    {
      ((void (*)(std::__shared_weak_count *))v7->__on_zero_shared)(v7);
      std::__shared_weak_count::__release_weak(v7);
    }
  }
}

void llvm::object::ResourceSectionRef::getEntrySubDir(llvm::object::ResourceSectionRef *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  llvm::object::ResourceSectionRef::getTableAtOffset(a1, *(_DWORD *)(a2 + 4) & 0x7FFFFFFF, a3);
}

void llvm::object::ResourceSectionRef::getEntryData(llvm::object::ResourceSectionRef *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  llvm::object::ResourceSectionRef::getDataEntryAtOffset(a1, *(_DWORD *)(a2 + 4) & 0x7FFFFFFF, a3);
}

void llvm::object::ResourceSectionRef::getBaseTable(llvm::object::ResourceSectionRef *this@<X0>, uint64_t a2@<X8>)
{
  llvm::object::ResourceSectionRef::getTableAtOffset(this, 0, a2);
}

void llvm::object::ResourceSectionRef::getTableEntry(llvm::object::ResourceSectionRef *a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v6;
  const char *v7;
  uint64_t v8[2];

  if (*(unsigned __int16 *)(a2 + 14) + *(unsigned __int16 *)(a2 + 12) <= a3)
  {
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v8[0] = 3;
    v8[1] = qword_1EF8F7238[0];
    v7 = "index out of range";
    sub_1C5DF1730((_BYTE **)&v7, v8, &v6);
    *(_BYTE *)(a4 + 8) |= 1u;
    *(_QWORD *)a4 = v6;
  }
  else
  {
    llvm::object::ResourceSectionRef::getTableEntryAtOffset(a1, a2 + 8 * a3 - *((_DWORD *)a1 + 4) + 16, a4);
  }
}

void llvm::object::ResourceSectionRef::load(llvm::object::ResourceSectionRef *this@<X0>, const llvm::object::COFFObjectFile *a2@<X1>, _QWORD *a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v12;
  unint64_t v13;
  uint64_t v16;
  __int128 v17;
  uint64_t v18;
  unint64_t v19;
  char v20;
  uint64_t v21;

  v21 = *MEMORY[0x1E0C80C00];
  v6 = (*(uint64_t (**)(const llvm::object::COFFObjectFile *))(*(_QWORD *)a2 + 344))(a2);
  v8 = v7;
  v9 = (*(uint64_t (**)(const llvm::object::COFFObjectFile *))(*(_QWORD *)a2 + 352))(a2);
  *(_QWORD *)&v17 = v6;
  *((_QWORD *)&v17 + 1) = v8;
  if (v8 == v10 && v6 == v9)
  {
LABEL_17:
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v18 = 3;
    v19 = qword_1EF8F7238[0];
    *(_QWORD *)&v17 = "no resource section found";
    sub_1C5DF1730((_BYTE **)&v17, &v18, a3);
    return;
  }
  v12 = v9;
  v13 = v10;
  while (1)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v8 + 136))(&v18, v8, v6);
    if ((v20 & 1) != 0)
    {
      *a3 = v18;
      return;
    }
    if (v19 != 8)
      break;
    if (*(_QWORD *)v18 == 0x313024637273722ELL)
      goto LABEL_21;
LABEL_16:
    (*(void (**)(_QWORD, __int128 *))(**((_QWORD **)&v17 + 1) + 128))(*((_QWORD *)&v17 + 1), &v17);
    v8 = *((_QWORD *)&v17 + 1);
    v6 = v17;
    if (v17 == __PAIR128__(v13, v12))
      goto LABEL_17;
  }
  if (v19 != 5)
    goto LABEL_16;
  if (*(_DWORD *)v18 != 1920168494 || *(_BYTE *)(v18 + 4) != 99)
    goto LABEL_16;
LABEL_21:
  llvm::object::ResourceSectionRef::load((uint64_t)this, (uint64_t)a2, &v17, a3);
  if ((v20 & 1) != 0)
  {
    v16 = v18;
    v18 = 0;
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  }
}

_QWORD *llvm::object::ResourceSectionRef::load@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X2>, _QWORD *a4@<X8>)
{
  _QWORD *result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  unint64_t v12;
  __int128 v13;
  unsigned int v14;
  uint64_t v15;
  _BYTE *v16;
  _BYTE *v17;
  char *v18;
  char *v19;
  char *v20;
  uint64_t v21;
  unsigned int **v22;
  unint64_t v23;
  unint64_t v24;
  unsigned int **v25;
  _QWORD *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  unint64_t *v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  _OWORD v37[2];
  __int128 v38;
  __int128 v39;
  uint64_t v40;

  v40 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 48) = a2;
  *(_OWORD *)(a1 + 32) = *a3;
  result = (*(_QWORD *(**)(__int128 *__return_ptr, _QWORD, _QWORD))(**(_QWORD **)(a1 + 40) + 168))(&v38, *(_QWORD *)(a1 + 40), *(_QWORD *)(a1 + 32));
  v7 = v38;
  if ((v39 & 1) == 0)
  {
    v8 = *((_QWORD *)&v38 + 1);
    *(_DWORD *)(a1 + 8) = 1;
    *(_QWORD *)(a1 + 16) = v7;
    *(_QWORD *)(a1 + 24) = v8;
    v9 = *(_QWORD *)(a1 + 32);
    v10 = *(_QWORD *)(a1 + 48);
    v11 = *(_OWORD *)(v10 + 32);
    v38 = *(_OWORD *)(v10 + 16);
    v39 = v11;
    v12 = sub_1C599E004(v9, &v38, *(_QWORD *)(v10 + 16));
    v13 = *(_OWORD *)(v10 + 32);
    v37[0] = *(_OWORD *)(v10 + 16);
    v37[1] = v13;
    v14 = sub_1C599E0EC(v9, v37, *(_QWORD *)(v10 + 16));
    v15 = v14;
    v16 = *(_BYTE **)(a1 + 56);
    if (v14 > (unint64_t)((uint64_t)(*(_QWORD *)(a1 + 72) - (_QWORD)v16) >> 3))
    {
      v17 = *(_BYTE **)(a1 + 64);
      v18 = (char *)operator new(8 * v14);
      v19 = &v18[(v17 - v16) & 0xFFFFFFFFFFFFFFF8];
      v20 = v19;
      if (v17 != v16)
      {
        v20 = &v18[(v17 - v16) & 0xFFFFFFFFFFFFFFF8];
        do
        {
          v21 = *((_QWORD *)v17 - 1);
          v17 -= 8;
          *((_QWORD *)v20 - 1) = v21;
          v20 -= 8;
        }
        while (v17 != v16);
      }
      *(_QWORD *)(a1 + 56) = v20;
      *(_QWORD *)(a1 + 64) = v19;
      *(_QWORD *)(a1 + 72) = &v18[8 * v15];
      if (v16)
        operator delete(v16);
    }
    v22 = *(unsigned int ***)(a1 + 64);
    if ((_DWORD)v15)
    {
      v23 = v12 + 10 * v15;
      do
      {
        v24 = *(_QWORD *)(a1 + 72);
        if ((unint64_t)v22 >= v24)
        {
          v26 = *(_QWORD **)(a1 + 56);
          v27 = v22 - (unsigned int **)v26;
          v28 = v27 + 1;
          if ((unint64_t)(v27 + 1) >> 61)
            abort();
          v29 = v24 - (_QWORD)v26;
          if (v29 >> 2 > v28)
            v28 = v29 >> 2;
          if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
            v30 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v30 = v28;
          if (v30)
          {
            if (v30 >> 61)
              sub_1C4764EE4();
            v31 = (char *)operator new(8 * v30);
          }
          else
          {
            v31 = 0;
          }
          v32 = (unint64_t *)&v31[8 * v27];
          *v32 = v12;
          v25 = (unsigned int **)(v32 + 1);
          if (v22 != v26)
          {
            do
            {
              v33 = (unint64_t)*--v22;
              *--v32 = v33;
            }
            while (v22 != v26);
            v22 = *(unsigned int ***)(a1 + 56);
          }
          *(_QWORD *)(a1 + 56) = v32;
          *(_QWORD *)(a1 + 64) = v25;
          *(_QWORD *)(a1 + 72) = &v31[8 * v30];
          if (v22)
            operator delete(v22);
        }
        else
        {
          *v22 = (unsigned int *)v12;
          v25 = v22 + 1;
        }
        *(_QWORD *)(a1 + 64) = v25;
        v12 += 10;
        v22 = v25;
      }
      while (v12 != v23);
    }
    else
    {
      v25 = *(unsigned int ***)(a1 + 64);
    }
    v34 = *(_QWORD *)(a1 + 56);
    v35 = 126 - 2 * __clz((uint64_t)((uint64_t)v25 - v34) >> 3);
    if (v25 == (unsigned int **)v34)
      v36 = 0;
    else
      v36 = v35;
    result = (_QWORD *)sub_1C59A1728(v34, v25, v36, 1);
    v7 = 0;
  }
  *a4 = v7;
  return result;
}

void llvm::object::ResourceSectionRef::getContents(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  llvm::object::COFFObjectFile *v5;
  uint64_t *v7;
  uint64_t *v8;
  unsigned int v9;
  unint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  unsigned int v13;
  char *v15;
  _QWORD *v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  unsigned int *v23;
  uint64_t *v24;
  unint64_t v25;
  unint64_t v26;
  unsigned int **v27;
  uint64_t *v28;
  unsigned int *v29;
  unsigned __int16 *v30;
  unsigned __int16 *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  char *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char *v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  unint64_t v53;
  unsigned int v54;
  uint64_t v55;
  unsigned int *v56;
  uint64_t v59;
  unsigned int v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  int v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t v71;
  _QWORD *v72;
  uint64_t v73;
  char *v74;
  char *v75;
  char *v76;
  unint64_t v77;
  unint64_t v78;
  char *v79;
  char *v80;
  char *v81;
  const char *v82;
  char *v83;
  uint64_t v84;
  uint64_t v85;
  unint64_t v86;
  char v87;
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  v5 = *(llvm::object::COFFObjectFile **)(a1 + 48);
  if (!v5)
  {
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v85 = 3;
    v86 = qword_1EF8F7238[0];
    v83 = "no object provided";
    sub_1C5DF1730(&v83, &v85, &v81);
    *(_BYTE *)(a3 + 16) |= 1u;
    v15 = v81;
    goto LABEL_57;
  }
  v7 = *(uint64_t **)(a1 + 56);
  v8 = *(uint64_t **)(a1 + 64);
  if (v8 == v7)
    goto LABEL_9;
  v9 = (_DWORD)a2 - *(_DWORD *)(a1 + 16);
  v10 = v8 - v7;
  while (1)
  {
    v11 = v10 >> 1;
    v12 = &v7[v10 >> 1];
    v13 = *(_DWORD *)*v12;
    if (v13 >= v9)
      break;
    v7 = v12 + 1;
    v11 = v10 + ~v11;
LABEL_8:
    v10 = v11;
    if (!v11)
      goto LABEL_9;
  }
  if (v13 > v9)
  {
    v8 = &v7[v10 >> 1];
    goto LABEL_8;
  }
  if (v10 >= 2)
  {
    do
    {
      v20 = v11 >> 1;
      v21 = &v7[v11 >> 1];
      v23 = (unsigned int *)*v21;
      v22 = v21 + 1;
      v11 += ~(v11 >> 1);
      if (*v23 < v9)
        v7 = v22;
      else
        v11 = v20;
    }
    while (v11);
  }
  v24 = v12 + 1;
  if (v8 != v12 + 1)
  {
    v25 = v8 - (v12 + 1);
    v8 = v24;
    do
    {
      v26 = v25 >> 1;
      v27 = (unsigned int **)&v8[v25 >> 1];
      v29 = *v27;
      v28 = (uint64_t *)(v27 + 1);
      v25 += ~(v25 >> 1);
      if (*v29 > v9)
        v25 = v26;
      else
        v8 = v28;
    }
    while (v25);
  }
  if (v7 == v8)
  {
LABEL_9:
    if ((*(unsigned int (**)(llvm::object::COFFObjectFile *))(*(_QWORD *)v5 + 424))(v5))
    {
      if (!atomic_load(qword_1EF8F7238))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
      v85 = 3;
      v86 = qword_1EF8F7238[0];
      v83 = "no relocation found for DataRVA";
      sub_1C5DF1730(&v83, &v85, &v75);
      *(_BYTE *)(a3 + 16) |= 1u;
      v15 = v75;
      goto LABEL_57;
    }
    v17 = *(_QWORD **)(a1 + 48);
    v18 = v17[8];
    if (v18)
    {
      v19 = *(unsigned int *)(v18 + 28);
    }
    else
    {
      v34 = v17[9];
      if (v34)
        v19 = *(_QWORD *)(v34 + 24);
      else
        v19 = 0;
    }
    v36 = *a2;
    v37 = (char *)(*(uint64_t (**)(_QWORD *))(*v17 + 344))(v17);
    v39 = v38;
    v40 = (*(uint64_t (**)(_QWORD *))(*v17 + 352))(v17);
    v83 = v37;
    v84 = v39;
    if (v39 == v41 && v37 == (char *)v40)
    {
LABEL_54:
      if (!atomic_load(qword_1EF8F7238))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
      v85 = 3;
      v86 = qword_1EF8F7238[0];
      v83 = "address not found in image";
      sub_1C5DF1730(&v83, &v85, &v74);
      *(_BYTE *)(a3 + 16) |= 1u;
      v15 = v74;
      goto LABEL_57;
    }
    v43 = (char *)v40;
    v44 = v41;
    v45 = v19 + v36;
    while (1)
    {
      if (v45 >= (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v39 + 144))(v39, v37))
      {
        v46 = v45 + a2[1];
        v47 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v84 + 144))(v84, v83);
        if (v46 <= (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v84 + 160))(v84, v83) + v47)
          break;
      }
      (*(void (**)(uint64_t, char **))(*(_QWORD *)v84 + 128))(v84, &v83);
      v37 = v83;
      v39 = v84;
      if (v84 == v44 && v83 == v43)
        goto LABEL_54;
    }
    v50 = (*(uint64_t (**)(uint64_t, char *))(*(_QWORD *)v84 + 144))(v84, v83);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, char *))(*(_QWORD *)v84 + 168))(&v85, v84, v83);
    v15 = (char *)v85;
    if ((v87 & 1) == 0)
    {
      v51 = v86;
      v52 = v45 - v50;
      v53 = v45 - v50 + a2[1];
      if (v86 < v45 - v50)
        v52 = v86;
      if (v52 > v53)
        v53 = v52;
      if (v86 >= v53)
        v51 = v53;
      v15 = (char *)(v85 + v52);
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_QWORD *)(a3 + 8) = v51 - v52;
      goto LABEL_57;
    }
LABEL_101:
    *(_BYTE *)(a3 + 16) |= 1u;
    goto LABEL_57;
  }
  v30 = (unsigned __int16 *)*((_QWORD *)v5 + 6);
  v31 = v30;
  if (!v30)
    v31 = (unsigned __int16 *)(*((_QWORD *)v5 + 7) + 6);
  v32 = *v7;
  v33 = *v31;
  if (v33 > 34403)
  {
    if (v33 == 43620)
      goto LABEL_66;
    if (v33 != 34404)
      goto LABEL_77;
    v35 = 3;
  }
  else if (v33 == 332)
  {
    v35 = 7;
  }
  else
  {
    if (v33 != 452)
    {
LABEL_77:
      if (!atomic_load(qword_1EF8F7238))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
      v85 = 3;
      v86 = qword_1EF8F7238[0];
      v83 = "unsupported architecture";
      sub_1C5DF1730(&v83, &v85, &v80);
      *(_BYTE *)(a3 + 16) |= 1u;
      v15 = v80;
      goto LABEL_57;
    }
LABEL_66:
    v35 = 2;
  }
  if (v35 != *(unsigned __int16 *)(v32 + 8))
  {
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v85 = 3;
    v86 = qword_1EF8F7238[0];
    v83 = "unexpected relocation type";
    sub_1C5DF1730(&v83, &v85, &v79);
    *(_BYTE *)(a3 + 16) |= 1u;
    v15 = v79;
LABEL_57:
    *(_QWORD *)a3 = v15;
    return;
  }
  v54 = *(_DWORD *)(v32 + 4);
  v55 = *((_QWORD *)v5 + 12);
  if (!v55 && !*((_QWORD *)v5 + 13))
    goto LABEL_97;
  if (v30)
  {
    if ((__int16)v30[1] != -1)
    {
      v56 = (unsigned int *)(v30 + 6);
      goto LABEL_81;
    }
    goto LABEL_97;
  }
  v56 = (unsigned int *)(*((_QWORD *)v5 + 7) + 52);
LABEL_81:
  if (*v56 <= v54)
  {
LABEL_97:
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v71 = qword_1EF8F7238[0];
    v72 = (_QWORD *)operator new();
    *v72 = &off_1E81A0D28;
    v72[1] = 3;
    v72[2] = v71;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v72;
    return;
  }
  if (v55)
  {
    v59 = v55 + 18 * v54;
    v60 = *(unsigned __int16 *)(v59 + 12);
    v61 = 0;
    if (v60 >> 8 <= 0xFE)
      v62 = *(unsigned __int16 *)(v59 + 12);
    else
      v62 = (__int16)v60;
  }
  else
  {
    v63 = *((_QWORD *)v5 + 13);
    if (!v63)
      goto LABEL_97;
    v59 = 0;
    v61 = v63 + 20 * v54;
    v62 = *(_DWORD *)(v61 + 12);
  }
  llvm::object::COFFObjectFile::getSection(v5, v62, (uint64_t)&v83);
  if ((v84 & 1) != 0)
  {
    v15 = v83;
    goto LABEL_101;
  }
  v64 = *a2;
  if (v55)
    v65 = v59;
  else
    v65 = v61;
  v66 = *(_DWORD *)(v65 + 8);
  v77 = 0;
  v78 = 0;
  llvm::object::COFFObjectFile::getSectionContents(*(_QWORD **)(a1 + 48), v83, &v77, &v85);
  v15 = (char *)v85;
  if (v85)
    goto LABEL_101;
  v67 = (v66 + v64);
  v68 = a2[1];
  if (v68 + v67 > v78)
  {
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v85 = 3;
    v86 = qword_1EF8F7238[0];
    v82 = "data outside of section";
    sub_1C5DF1730((_BYTE **)&v82, &v85, &v76);
    *(_BYTE *)(a3 + 16) |= 1u;
    v15 = v76;
    goto LABEL_57;
  }
  v73 = v77 + v67;
  *(_BYTE *)(a3 + 16) &= ~1u;
  *(_QWORD *)a3 = v73;
  *(_QWORD *)(a3 + 8) = v68;
}

unint64_t sub_1C59A1728(unint64_t result, unsigned int **a2, uint64_t a3, char a4)
{
  unsigned int **v7;
  unsigned int **v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unsigned int **v12;
  unsigned int *v13;
  unsigned int *v14;
  unsigned int v15;
  uint64_t v16;
  unsigned int *v17;
  unsigned int **v18;
  unsigned int **v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int **v23;
  unsigned int v24;
  unsigned int *v25;
  unsigned int *v26;
  unsigned int **v27;
  BOOL v28;
  unsigned int *v29;
  unsigned int **v30;
  unsigned int **v31;
  unsigned int *v32;
  unsigned int *v33;
  unsigned int *v34;
  unsigned int v35;
  unsigned int *v36;
  unsigned int *v37;
  unsigned int **v38;
  unsigned int *v39;
  unsigned int *v40;
  unsigned int **v41;
  unsigned int **v42;
  unsigned int **v43;
  unsigned int *v44;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int *v47;
  unsigned int *v48;
  unsigned int *v49;
  unsigned int **v50;
  BOOL v52;
  uint64_t v53;
  unsigned int **v54;
  unsigned int *v55;
  unsigned int *v56;
  uint64_t v57;
  uint64_t v58;
  unsigned int **v59;
  int64_t v60;
  int64_t v61;
  int64_t v62;
  uint64_t v63;
  unsigned int **v64;
  unsigned int *v65;
  unsigned int v66;
  unsigned int **v67;
  unsigned int *v68;
  unsigned int **v69;
  uint64_t v70;
  unsigned int v71;
  unsigned int v72;
  uint64_t v73;
  unsigned int *v74;
  unsigned int **v75;
  unsigned int **v76;
  unsigned int **v77;
  unsigned int *v78;
  unsigned int *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unint64_t v83;
  unsigned int **v84;
  unsigned int *v85;
  unsigned int *v86;
  unsigned int **v87;
  unsigned int *v89;
  unsigned int *v90;

  v7 = (unsigned int **)result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v39 = *(a2 - 1);
        v40 = *v8;
        if (*v39 < **v8)
        {
          *v8 = v39;
          *(a2 - 1) = v40;
        }
        return result;
      case 3:
        return (unint64_t)sub_1C59A1E34(v8, v8 + 1, a2 - 1);
      case 4:
        return (unint64_t)sub_1C59A20B4(v8, v8 + 1, v8 + 2, a2 - 1);
      case 5:
        v41 = v8 + 1;
        v42 = v8 + 2;
        v43 = v8 + 3;
        result = (unint64_t)sub_1C59A20B4(v8, v8 + 1, v8 + 2, v8 + 3);
        v44 = *(a2 - 1);
        v45 = v8[3];
        if (*v44 < *v45)
        {
          *v43 = v44;
          *(a2 - 1) = v45;
          v46 = *v43;
          v47 = *v42;
          if (**v43 < **v42)
          {
            *v42 = v46;
            *v43 = v47;
            v48 = *v41;
            if (*v46 < **v41)
            {
              v8[1] = v46;
              v8[2] = v48;
              v49 = *v8;
              if (*v46 < **v8)
              {
                *v8 = v46;
                v8[1] = v49;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 191)
        {
          v50 = v8 + 1;
          v52 = v8 == a2 || v50 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v52)
            {
              v53 = 8;
              v54 = v8;
              do
              {
                v56 = *v54;
                v55 = v54[1];
                v54 = v50;
                if (*v55 < *v56)
                {
                  v57 = v53;
                  while (1)
                  {
                    *(unsigned int **)((char *)v8 + v57) = v56;
                    v58 = v57 - 8;
                    if (v57 == 8)
                      break;
                    v56 = *(unsigned int **)((char *)v8 + v57 - 16);
                    v57 -= 8;
                    if (*v55 >= *v56)
                    {
                      v59 = (unsigned int **)((char *)v8 + v58);
                      goto LABEL_78;
                    }
                  }
                  v59 = v8;
LABEL_78:
                  *v59 = v55;
                }
                v50 = v54 + 1;
                v53 += 8;
              }
              while (v54 + 1 != a2);
            }
          }
          else if (!v52)
          {
            do
            {
              v90 = *v7;
              v89 = v7[1];
              v7 = v50;
              if (*v89 < *v90)
              {
                do
                {
                  *v50 = v90;
                  v90 = *(v50 - 2);
                  --v50;
                }
                while (*v89 < *v90);
                *v50 = v89;
              }
              v50 = v7 + 1;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v60 = (unint64_t)(v10 - 2) >> 1;
            v61 = v60;
            do
            {
              v62 = v61;
              if (v60 >= v61)
              {
                v63 = (2 * v61) | 1;
                v64 = &v8[v63];
                v65 = *v64;
                if (2 * v62 + 2 >= v10)
                {
                  v66 = *v65;
                }
                else
                {
                  v66 = *v65;
                  result = *v64[1];
                  if (*v65 <= result)
                    v66 = *v64[1];
                  if (*v65 < result)
                  {
                    v65 = v64[1];
                    ++v64;
                    v63 = 2 * v62 + 2;
                  }
                }
                v67 = &v8[v62];
                v68 = *v67;
                if (v66 >= **v67)
                {
                  do
                  {
                    v69 = v64;
                    *v67 = v65;
                    if (v60 < v63)
                      break;
                    v70 = (2 * v63) | 1;
                    v64 = &v8[v70];
                    v63 = 2 * v63 + 2;
                    v65 = *v64;
                    if (v63 >= v10)
                    {
                      v71 = *v65;
                      v63 = v70;
                    }
                    else
                    {
                      v71 = *v65;
                      v72 = *v64[1];
                      if (*v65 <= v72)
                        v71 = *v64[1];
                      if (*v65 >= v72)
                      {
                        v63 = v70;
                      }
                      else
                      {
                        v65 = v64[1];
                        ++v64;
                      }
                    }
                    result = *v68;
                    v67 = v69;
                  }
                  while (v71 >= result);
                  *v69 = v68;
                }
              }
              v61 = v62 - 1;
            }
            while (v62);
            do
            {
              v73 = 0;
              v74 = *v8;
              v75 = v8;
              do
              {
                v76 = &v75[v73];
                v79 = v76[1];
                v77 = v76 + 1;
                v78 = v79;
                v80 = (2 * v73) | 1;
                v81 = 2 * v73 + 2;
                if (v81 < v10)
                {
                  result = *v78;
                  if (result < *v77[1])
                  {
                    v78 = v77[1];
                    ++v77;
                    v80 = v81;
                  }
                }
                *v75 = v78;
                v75 = v77;
                v73 = v80;
              }
              while (v80 <= (uint64_t)((unint64_t)(v10 - 2) >> 1));
              if (v77 == --a2)
              {
                *v77 = v74;
              }
              else
              {
                *v77 = *a2;
                *a2 = v74;
                v82 = (char *)v77 - (char *)v8 + 8;
                if (v82 >= 9)
                {
                  v83 = (((unint64_t)v82 >> 3) - 2) >> 1;
                  v84 = &v8[v83];
                  v85 = *v84;
                  v86 = *v77;
                  if (**v84 < **v77)
                  {
                    do
                    {
                      v87 = v84;
                      *v77 = v85;
                      if (!v83)
                        break;
                      v83 = (v83 - 1) >> 1;
                      v84 = &v8[v83];
                      v85 = *v84;
                      v77 = v87;
                    }
                    while (**v84 < *v86);
                    *v87 = v86;
                  }
                }
              }
            }
            while (v10-- > 2);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &v8[(unint64_t)v10 >> 1];
        if ((unint64_t)v9 < 0x401)
        {
          result = (unint64_t)sub_1C59A1E34(&v7[(unint64_t)v10 >> 1], v7, a2 - 1);
        }
        else
        {
          sub_1C59A1E34(v7, &v7[(unint64_t)v10 >> 1], a2 - 1);
          sub_1C59A1E34(v7 + 1, v12 - 1, a2 - 2);
          sub_1C59A1E34(v7 + 2, &v7[v11 + 1], a2 - 3);
          result = (unint64_t)sub_1C59A1E34(v12 - 1, v12, &v7[v11 + 1]);
          v13 = *v7;
          *v7 = *v12;
          *v12 = v13;
        }
        --a3;
        v14 = *v7;
        v15 = **v7;
        if ((a4 & 1) == 0 && **(v7 - 1) >= v15)
        {
          if (v15 >= **(a2 - 1))
          {
            v30 = v7 + 1;
            do
            {
              v8 = v30;
              if (v30 >= a2)
                break;
              ++v30;
            }
            while (v15 >= **v8);
          }
          else
          {
            v8 = v7;
            do
            {
              v29 = v8[1];
              ++v8;
            }
            while (v15 >= *v29);
          }
          v31 = a2;
          if (v8 < a2)
          {
            v31 = a2;
            do
              v32 = *--v31;
            while (v15 < *v32);
          }
          if (v8 < v31)
          {
            v33 = *v8;
            v34 = *v31;
            do
            {
              *v8 = v34;
              *v31 = v33;
              v35 = *v14;
              do
              {
                v36 = v8[1];
                ++v8;
                v33 = v36;
              }
              while (v35 >= *v36);
              do
              {
                v37 = *--v31;
                v34 = v37;
              }
              while (v35 < *v37);
            }
            while (v8 < v31);
          }
          v38 = v8 - 1;
          if (v8 - 1 != v7)
            *v7 = *v38;
          a4 = 0;
          *v38 = v14;
          continue;
        }
        v16 = 0;
        do
          v17 = v7[++v16];
        while (*v17 < v15);
        v18 = &v7[v16];
        v19 = a2;
        if (v16 == 1)
        {
          do
          {
            if (v18 >= v19)
              break;
            v21 = *--v19;
          }
          while (*v21 >= v15);
        }
        else
        {
          do
            v20 = *--v19;
          while (*v20 >= v15);
        }
        if (v18 >= v19)
        {
          v8 = &v7[v16];
        }
        else
        {
          v22 = *v19;
          v8 = v18;
          v23 = v19;
          do
          {
            *v8 = v22;
            *v23 = v17;
            v24 = *v14;
            do
            {
              v25 = v8[1];
              ++v8;
              v17 = v25;
            }
            while (*v25 < v24);
            do
            {
              v26 = *--v23;
              v22 = v26;
            }
            while (*v26 >= v24);
          }
          while (v8 < v23);
        }
        v27 = v8 - 1;
        if (v8 - 1 != v7)
          *v7 = *v27;
        *v27 = v14;
        if (v18 < v19)
        {
LABEL_31:
          result = sub_1C59A1728(v7, v8 - 1, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v28 = sub_1C59A1EC0(v7, v8 - 1);
        result = sub_1C59A1EC0(v8, a2);
        if (!(_DWORD)result)
        {
          if (v28)
            continue;
          goto LABEL_31;
        }
        a2 = v8 - 1;
        if (!v28)
          goto LABEL_2;
        return result;
    }
  }
}

unsigned int **sub_1C59A1E34(unsigned int **result, unsigned int **a2, unsigned int **a3)
{
  unsigned int *v3;
  unsigned int *v4;
  unsigned int v5;
  unsigned int *v6;
  unsigned int v7;
  unsigned int *v8;

  v3 = *a2;
  v4 = *result;
  v5 = **a2;
  v6 = *a3;
  v7 = **a3;
  if (v5 >= **result)
  {
    if (v7 < v5)
    {
      *a2 = v6;
      *a3 = v3;
      v8 = *result;
      if (**a2 < **result)
      {
        *result = *a2;
        *a2 = v8;
      }
    }
  }
  else
  {
    if (v7 >= v5)
    {
      *result = v3;
      *a2 = v4;
      if (**a3 >= *v4)
        return result;
      *a2 = *a3;
    }
    else
    {
      *result = v6;
    }
    *a3 = v4;
  }
  return result;
}

BOOL sub_1C59A1EC0(unsigned int **a1, unsigned int **a2)
{
  uint64_t v4;
  _BOOL8 result;
  unsigned int *v6;
  unsigned int *v7;
  unsigned int **v8;
  unsigned int **v9;
  int v10;
  uint64_t v11;
  unsigned int *v12;
  unsigned int *v13;
  uint64_t v14;
  uint64_t v15;
  unsigned int **v16;
  unsigned int **v17;
  unsigned int **v18;
  unsigned int **v19;
  unsigned int *v20;
  unsigned int *v21;
  unsigned int *v22;
  unsigned int *v23;
  unsigned int *v24;
  unsigned int *v25;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (*v6 < **a1)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_1C59A1E34(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_1C59A20B4(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      v17 = a1 + 1;
      v18 = a1 + 2;
      v19 = a1 + 3;
      sub_1C59A20B4(a1, a1 + 1, a1 + 2, a1 + 3);
      v20 = *(a2 - 1);
      v21 = a1[3];
      if (*v20 < *v21)
      {
        *v19 = v20;
        *(a2 - 1) = v21;
        v22 = *v19;
        v23 = *v18;
        if (**v19 < **v18)
        {
          *v18 = v22;
          *v19 = v23;
          v24 = *v17;
          if (*v22 < **v17)
          {
            a1[1] = v22;
            a1[2] = v24;
            v25 = *a1;
            if (*v22 < **a1)
            {
              *a1 = v22;
              a1[1] = v25;
            }
          }
        }
      }
      return 1;
    default:
      v8 = a1 + 2;
      sub_1C59A1E34(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    if (**v9 < **v8)
    {
      v14 = v11;
      while (1)
      {
        *(unsigned int **)((char *)a1 + v14) = v13;
        v15 = v14 - 8;
        if (v14 == 8)
          break;
        v13 = *(unsigned int **)((char *)a1 + v14 - 16);
        v14 -= 8;
        if (*v12 >= *v13)
        {
          v16 = (unsigned int **)((char *)a1 + v15);
          goto LABEL_13;
        }
      }
      v16 = a1;
LABEL_13:
      *v16 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

unsigned int **sub_1C59A20B4(unsigned int **a1, unsigned int **a2, unsigned int **a3, unsigned int **a4)
{
  unsigned int **result;
  unsigned int *v9;
  unsigned int *v10;
  unsigned int *v11;

  result = sub_1C59A1E34(a1, a2, a3);
  v9 = *a3;
  if (**a4 < **a3)
  {
    *a3 = *a4;
    *a4 = v9;
    v10 = *a2;
    if (**a3 < **a2)
    {
      *a2 = *a3;
      *a3 = v10;
      v11 = *a1;
      if (**a2 < **a1)
      {
        *a1 = *a2;
        *a2 = v11;
      }
    }
  }
  return result;
}

void llvm::object::Decompressor::create(uint64_t a1@<X8>)
{
  uint64_t v2;
  unint64_t v4;
  const char *v5;
  __int16 v6;

  v5 = "zlib is not available";
  v6 = 259;
  v2 = operator new();
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v4 = qword_1EF8F7238[0];
  *(_QWORD *)v2 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)&v5, (_QWORD *)(v2 + 8));
  *(_QWORD *)(v2 + 32) = 3;
  *(_QWORD *)(v2 + 40) = v4;
  *(_BYTE *)(v2 + 48) = 1;
  *(_BYTE *)(a1 + 24) |= 1u;
  *(_QWORD *)a1 = v2;
}

_QWORD *llvm::object::Decompressor::Decompressor(_QWORD *result, uint64_t a2, uint64_t a3)
{
  *result = a2;
  result[1] = a3;
  result[2] = 0;
  return result;
}

{
  *result = a2;
  result[1] = a3;
  result[2] = 0;
  return result;
}

BOOL llvm::object::Decompressor::isGnuStyle(_DWORD *a1, unint64_t a2)
{
  if (a2 < 7)
    return 0;
  return *a1 == 1701083694 && *(_DWORD *)((char *)a1 + 3) == 1735746149;
}

void llvm::object::Decompressor::consumeCompressedGnuHeader(llvm::object::Decompressor *this@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  const char *v6;
  uint64_t v7;
  unint64_t v9;
  unint64_t v10;
  const char *v11;
  __int16 v12;

  v3 = *((_QWORD *)this + 1);
  v4 = v3 - 4;
  if (v3 >= 4 && (v5 = *(_QWORD *)this, **(_DWORD **)this == 1112099930))
  {
    *(_QWORD *)this = v5 + 4;
    *((_QWORD *)this + 1) = v4;
    if (v4 > 7)
    {
      v10 = bswap64(*(_QWORD *)(v5 + 4));
      *(_QWORD *)this = v5 + 12;
      *((_QWORD *)this + 1) = v3 - 12;
      *((_QWORD *)this + 2) = v10;
      *a2 = 0;
      return;
    }
    v6 = "corrupted uncompressed section size";
  }
  else
  {
    v6 = "corrupted compressed section header";
  }
  v11 = v6;
  v12 = 259;
  v7 = operator new();
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v9 = qword_1EF8F7238[0];
  *(_QWORD *)v7 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)&v11, (_QWORD *)(v7 + 8));
  *(_QWORD *)(v7 + 32) = 3;
  *(_QWORD *)(v7 + 40) = v9;
  *(_BYTE *)(v7 + 48) = 1;
  *a2 = v7;
}

void llvm::object::Decompressor::consumeCompressedZLibHeader(llvm::object::Decompressor *this@<X0>, int a2@<W1>, char a3@<W2>, uint64_t *a4@<X8>)
{
  unint64_t v5;
  unint64_t v6;
  const char *v7;
  uint64_t v8;
  unint64_t v10;
  int v13;
  unint64_t Unsigned;
  unint64_t v15;
  unint64_t v16;
  unint64_t v17;
  _QWORD v18[2];
  char v19;
  char v20;
  const char *v21;
  __int16 v22;

  if (a2)
    v5 = 24;
  else
    v5 = 12;
  v6 = *((_QWORD *)this + 1);
  if (v6 < v5)
  {
    v7 = "corrupted compressed section header";
LABEL_6:
    v21 = v7;
    v22 = 259;
    v8 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v10 = qword_1EF8F7238[0];
    *(_QWORD *)v8 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)&v21, (_QWORD *)(v8 + 8));
    *(_QWORD *)(v8 + 32) = 3;
    *(_QWORD *)(v8 + 40) = v10;
    *(_BYTE *)(v8 + 48) = 1;
    *a4 = v8;
    return;
  }
  v18[0] = *(_QWORD *)this;
  v18[1] = v6;
  v19 = a3;
  v20 = 0;
  v17 = 0;
  if (sub_1C6387364((uint64_t)v18, &v17, 0) != 1)
  {
    v7 = "unsupported compression type";
    goto LABEL_6;
  }
  if (a2)
  {
    v17 += 4;
    v13 = 8;
  }
  else
  {
    v13 = 4;
  }
  Unsigned = llvm::DataExtractor::getUnsigned(v18, &v17, v13, 0);
  v15 = *((_QWORD *)this + 1);
  if (v15 >= v5)
    v16 = v5;
  else
    v16 = *((_QWORD *)this + 1);
  *(_QWORD *)this += v16;
  *((_QWORD *)this + 1) = v15 - v16;
  *((_QWORD *)this + 2) = Unsigned;
  *a4 = 0;
}

uint64_t llvm::object::Decompressor::isCompressed(_QWORD *a1)
{
  uint64_t result;
  char *v4;
  char *v5;
  char *v6;
  _QWORD v7[2];
  char v8;
  uint64_t v9;

  v9 = *MEMORY[0x1E0C80C00];
  if (((*(uint64_t (**)(_QWORD, _QWORD))(*(_QWORD *)a1[1] + 184))(a1[1], *a1) & 1) != 0)
    return 1;
  (*(void (**)(_QWORD *__return_ptr, _QWORD, _QWORD))(*(_QWORD *)a1[1] + 136))(v7, a1[1], *a1);
  if ((v8 & 1) != 0)
  {
    v4 = (char *)v7[0];
    v7[0] = 0;
    v5 = v4;
    sub_1C4D62BD4(&v5, &v6);
    if (v5)
      (*(void (**)(char *))(*(_QWORD *)v5 + 8))(v5);
    if ((v8 & 1) != 0)
    {
      result = v7[0];
      v7[0] = 0;
      if (!result)
        return result;
      (*(void (**)(uint64_t))(*(_QWORD *)result + 8))(result);
    }
    return 0;
  }
  if (v7[1] < 7uLL)
    return 0;
  return *(_DWORD *)v7[0] == 1701083694 && *(_DWORD *)(v7[0] + 3) == 1735746149;
}

BOOL llvm::object::Decompressor::isCompressedELFSection(__int16 a1, _DWORD *a2, unint64_t a3)
{
  if ((a1 & 0x800) != 0)
    return 1;
  if (a3 < 7)
    return 0;
  return *a2 == 1701083694 && *(_DWORD *)((char *)a2 + 3) == 1735746149;
}

uint64_t llvm::object::getELFRelativeRelocationType(llvm::object *this)
{
  int v1;
  uint64_t result;

  v1 = (int)this;
  result = 8;
  if (v1 > 61)
  {
    if (v1 > 194)
    {
      if (v1 > 250)
      {
        if (v1 == 251)
          return 17;
        if (v1 == 252)
          return 9;
        return 0;
      }
      if (v1 != 195)
      {
        if (v1 == 243)
          return 3;
        return 0;
      }
    }
    else
    {
      if (v1 > 163)
      {
        if (v1 == 164)
          return 35;
        if (v1 == 183)
          return 1027;
        return 0;
      }
      if (v1 == 62)
        return result;
      if (v1 != 93)
        return 0;
    }
    return 56;
  }
  if (v1 > 20)
  {
    if (v1 > 39)
    {
      if (v1 == 40)
        return 23;
      if (v1 != 43)
        return 0;
    }
    else if (v1 != 21)
    {
      if (v1 == 22)
        return 12;
      return 0;
    }
    return 22;
  }
  if (v1 <= 5)
  {
    if (v1 != 2)
    {
      if (v1 == 3)
        return result;
      return 0;
    }
    return 22;
  }
  if (v1 != 6)
  {
    if (v1 != 18)
      return 0;
    return 22;
  }
  return result;
}

uint64_t llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::base(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::end(_QWORD *a1)
{
  return *a1 + a1[1];
}

uint64_t llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getBufSize(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

_QWORD *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::ELFFile(_QWORD *result, uint64_t a2, uint64_t a3)
{
  *result = a2;
  result[1] = a3;
  return result;
}

{
  *result = a2;
  result[1] = a3;
  return result;
}

uint64_t llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getHeader(uint64_t a1)
{
  return *(_QWORD *)a1;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getVersionDefinitions(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int16 *v6;
  char v7;
  unsigned int v8;
  std::string::size_type v9;
  __int128 *v10;
  __int128 *v11;
  int v12;
  char v13;
  unint64_t v14;
  _BYTE *v15;
  __int128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  __int128 v20;
  std::string::size_type v21;
  uint64_t v22;
  std::string *v23;
  std::string::size_type v24;
  std::string *v25;
  std::string::size_type v26;
  std::string *v27;
  uint64_t v28;
  unint64_t v30;
  void *v31;
  std::string *v32;
  std::string::size_type v33;
  std::string *v34;
  char *v35;
  std::string::size_type v36;
  std::string *v37;
  std::string::size_type size;
  std::string *v39;
  std::string::size_type v40;
  uint64_t v41;
  unint64_t v43;
  void *v44;
  std::string *v45;
  std::string::size_type v46;
  std::string *v47;
  std::string::size_type v48;
  const char *v49;
  std::string *v50;
  std::string::size_type v51;
  std::string *v52;
  std::string::size_type v53;
  std::string *v54;
  std::string::size_type v55;
  std::string *v56;
  std::string::size_type v57;
  uint64_t v58;
  unint64_t v60;
  std::string::size_type v61;
  std::string::size_type v62;
  std::string::size_type v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  std::string *v67;
  std::string::size_type v68;
  std::string v69;
  std::string __p;
  __int16 v71;
  unint64_t v72;
  uint64_t v73;
  char *v74;
  std::string v75;
  std::string v76;
  std::string v77;
  _QWORD v78[4];
  _QWORD *v79;
  _BYTE v80[24];
  uint64_t v81;
  __int16 v82;
  _QWORD v83[2];
  char v84;
  _QWORD v85[2];
  char v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getLinkAsStrtab(a1, a2, (uint64_t)v85);
  if ((v86 & 1) != 0)
  {
    v22 = v85[0];
    *(_BYTE *)(a3 + 24) |= 1u;
    *(_QWORD *)a3 = v22;
    return;
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionContents(a1, a2, (uint64_t)v83);
  if ((v84 & 1) != 0)
  {
    sub_1C59A3508(&v76, a1, a2);
    v32 = std::string::insert(&v76, 0, "cannot read content of ");
    v33 = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v77.__r_.__value_.__l.__data_ = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v77.__r_.__value_.__r.__words[2] = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    v34 = std::string::append(&v77, ": ");
    v35 = 0;
    v36 = v34->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v36;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    if ((v84 & 1) != 0)
    {
      v35 = (char *)v83[0];
      v83[0] = 0;
    }
    v74 = v35;
    sub_1C61D2548(&v74, &v75);
    if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v37 = &v75;
    else
      v37 = (std::string *)v75.__r_.__value_.__r.__words[0];
    if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&v75.__r_.__value_.__s + 23) & 0x7F;
    else
      size = v75.__r_.__value_.__l.__size_;
    v39 = std::string::append(&__p, (const std::string::value_type *)v37, size);
    v40 = v39->__r_.__value_.__r.__words[2];
    *(_OWORD *)v80 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
    *(_QWORD *)&v80[16] = v40;
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    LOWORD(v79) = 260;
    v78[0] = v80;
    v41 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v43 = qword_1EF8F7238[0];
    *(_QWORD *)v41 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v78, (_QWORD *)(v41 + 8));
    *(_QWORD *)(v41 + 32) = 3;
    *(_QWORD *)(v41 + 40) = v43;
    *(_BYTE *)(v41 + 48) = 1;
    *(_BYTE *)(a3 + 24) |= 1u;
    *(_QWORD *)a3 = v41;
    if ((v80[23] & 0x80000000) != 0)
      operator delete(*(void **)v80);
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v75.__r_.__value_.__l.__data_);
    if (v74)
      (*(void (**)(char *))(*(_QWORD *)v74 + 8))(v74);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v77.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v76.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_86;
    v44 = (void *)v76.__r_.__value_.__r.__words[0];
  }
  else
  {
    v6 = (unsigned __int16 *)v83[0];
    v72 = v83[0] + v83[1];
    v73 = v83[0];
    v78[0] = &v72;
    v78[1] = a1;
    v78[2] = a2;
    v78[3] = &v73;
    v79 = v85;
    memset(&v77, 0, sizeof(v77));
    if (!*(_DWORD *)(a2 + 28))
    {
      v21 = 0;
      v7 = *(_BYTE *)(a3 + 24);
      v20 = 0uLL;
LABEL_33:
      *(_BYTE *)(a3 + 24) = v7 & 0xFE;
      *(_OWORD *)a3 = v20;
      *(_QWORD *)(a3 + 16) = v21;
      goto LABEL_86;
    }
    v7 = *(_BYTE *)(a3 + 24);
    v8 = 1;
    while (1)
    {
      if ((unint64_t)(v6 + 10) > v72)
      {
        sub_1C59A3508(&v69, a1, a2);
        v45 = std::string::insert(&v69, 0, "invalid ");
        v46 = v45->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v75.__r_.__value_.__l.__data_ = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
        v75.__r_.__value_.__r.__words[2] = v46;
        v45->__r_.__value_.__l.__size_ = 0;
        v45->__r_.__value_.__r.__words[2] = 0;
        v45->__r_.__value_.__r.__words[0] = 0;
        v47 = std::string::append(&v75, ": version definition ");
        v48 = v47->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v76.__r_.__value_.__l.__data_ = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        v76.__r_.__value_.__r.__words[2] = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v76;
        __p.__r_.__value_.__r.__words[2] = v8;
        v71 = 2052;
        v49 = " goes past the end of the section";
        goto LABEL_68;
      }
      if ((v6 & 3) != 0)
      {
        sub_1C59A3508(&v75, a1, a2);
        v50 = std::string::insert(&v75, 0, "invalid ");
        v51 = v50->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v76.__r_.__value_.__l.__data_ = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
        v76.__r_.__value_.__r.__words[2] = v51;
        v50->__r_.__value_.__l.__size_ = 0;
        v50->__r_.__value_.__r.__words[2] = 0;
        v50->__r_.__value_.__r.__words[0] = 0;
        v52 = std::string::append(&v76, ": found a misaligned version definition entry at offset 0x");
        v53 = v52->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v53;
        v52->__r_.__value_.__l.__size_ = 0;
        v52->__r_.__value_.__r.__words[2] = 0;
        v52->__r_.__value_.__r.__words[0] = 0;
        v69.__r_.__value_.__r.__words[0] = (std::string::size_type)v6 - v73;
        v27 = &v69;
        goto LABEL_35;
      }
      v9 = *v6;
      if (v9 != 1)
        break;
      v10 = sub_1C59A35D4((uint64_t)&v77, v77.__r_.__value_.__l.__size_);
      *(_DWORD *)v10 = (_DWORD)v6 - v73;
      *((_DWORD *)v10 + 1) = *v6;
      *((_DWORD *)v10 + 2) = v6[1];
      *((_DWORD *)v10 + 3) = v6[2];
      *((_DWORD *)v10 + 4) = v6[3];
      *((_DWORD *)v10 + 5) = *((_DWORD *)v6 + 2);
      v69.__r_.__value_.__r.__words[0] = (std::string::size_type)v6 + *((unsigned int *)v6 + 3);
      if (v6[3])
      {
        v11 = v10;
        v12 = 0;
        v66 = (unint64_t *)(v10 + 3);
        v67 = (std::string *)((char *)v10 + 24);
        while ((v69.__r_.__value_.__s.__data_[0] & 3) == 0)
        {
          sub_1C59A3814((uint64_t)v78, (unsigned int **)&v69, v8, (uint64_t)v80);
          v13 = v82;
          if ((v82 & 1) != 0)
          {
            v17 = *(_QWORD *)v80;
            *(_QWORD *)v80 = 0;
            v7 |= 1u;
            *(_BYTE *)(a3 + 24) = v7;
            *(_QWORD *)a3 = v17;
          }
          else if (v12)
          {
            v14 = *((_QWORD *)v11 + 7);
            if (v14 >= *((_QWORD *)v11 + 8))
            {
              v18 = sub_1C59C53F0(v66, (uint64_t)v80);
            }
            else
            {
              *(_DWORD *)v14 = *(_DWORD *)v80;
              v15 = (_BYTE *)(v14 + 8);
              if (SHIBYTE(v81) < 0)
              {
                sub_1C47EBC30(v15, *(void **)&v80[8], *(unint64_t *)&v80[16]);
              }
              else
              {
                v16 = *(_OWORD *)&v80[8];
                *(_QWORD *)(v14 + 24) = v81;
                *(_OWORD *)v15 = v16;
              }
              v18 = (char *)(v14 + 32);
            }
            *((_QWORD *)v11 + 7) = v18;
          }
          else
          {
            std::string::operator=(v67, (const std::string *)&v80[8]);
          }
          if ((v82 & 1) != 0)
          {
            v19 = *(_QWORD *)v80;
            *(_QWORD *)v80 = 0;
            if (v19)
              (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
          }
          else if (SHIBYTE(v81) < 0)
          {
            operator delete(*(void **)&v80[8]);
          }
          if ((v13 & 1) != 0)
            goto LABEL_77;
          if (++v12 >= v6[3])
            goto LABEL_29;
        }
        sub_1C59A3508(&v75, a1, a2);
        v23 = std::string::insert(&v75, 0, "invalid ");
        v24 = v23->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v76.__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
        v76.__r_.__value_.__r.__words[2] = v24;
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        v25 = std::string::append(&v76, ": found a misaligned auxiliary entry at offset 0x");
        v26 = v25->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        v68 = v69.__r_.__value_.__r.__words[0] - v73;
        v27 = (std::string *)&v68;
LABEL_35:
        *(_QWORD *)v80 = &__p;
        *(_QWORD *)&v80[16] = v27;
        v82 = 3588;
        v28 = operator new();
        if (!atomic_load(qword_1EF8F7238))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
        v30 = qword_1EF8F7238[0];
        *(_QWORD *)v28 = off_1E81A0C88;
        llvm::Twine::str((llvm::Twine *)v80, (_QWORD *)(v28 + 8));
        *(_QWORD *)(v28 + 32) = 3;
        *(_QWORD *)(v28 + 40) = v30;
        *(_BYTE *)(v28 + 48) = 1;
        *(_BYTE *)(a3 + 24) = v7 | 1;
        *(_QWORD *)a3 = v28;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v76.__r_.__value_.__l.__data_);
        if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
        {
          v31 = (void *)v75.__r_.__value_.__r.__words[0];
LABEL_76:
          operator delete(v31);
          goto LABEL_77;
        }
        goto LABEL_77;
      }
LABEL_29:
      v6 = (unsigned __int16 *)((char *)v6 + *((unsigned int *)v6 + 4));
      if (++v8 > *(_DWORD *)(a2 + 28))
      {
        v20 = *(_OWORD *)&v77.__r_.__value_.__l.__data_;
        v21 = v77.__r_.__value_.__r.__words[2];
        goto LABEL_33;
      }
    }
    sub_1C59A3508(&v69, a1, a2);
    v54 = std::string::insert(&v69, 0, "unable to dump ");
    v55 = v54->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v75.__r_.__value_.__l.__data_ = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    v75.__r_.__value_.__r.__words[2] = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    v56 = std::string::append(&v75, ": version ");
    v57 = v56->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v76.__r_.__value_.__l.__data_ = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
    v76.__r_.__value_.__r.__words[2] = v57;
    v56->__r_.__value_.__l.__size_ = 0;
    v56->__r_.__value_.__r.__words[2] = 0;
    v56->__r_.__value_.__r.__words[0] = 0;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v76;
    __p.__r_.__value_.__r.__words[2] = v9;
    v71 = 2052;
    v49 = " is not yet supported";
LABEL_68:
    *(_QWORD *)v80 = &__p;
    *(_QWORD *)&v80[16] = v49;
    v82 = 770;
    v58 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v60 = qword_1EF8F7238[0];
    *(_QWORD *)v58 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v80, (_QWORD *)(v58 + 8));
    *(_QWORD *)(v58 + 32) = 3;
    *(_QWORD *)(v58 + 40) = v60;
    *(_BYTE *)(v58 + 48) = 1;
    *(_BYTE *)(a3 + 24) = v7 | 1;
    *(_QWORD *)a3 = v58;
    if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v76.__r_.__value_.__l.__data_);
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v75.__r_.__value_.__l.__data_);
    if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
    {
      v31 = (void *)v69.__r_.__value_.__r.__words[0];
      goto LABEL_76;
    }
LABEL_77:
    v61 = v77.__r_.__value_.__r.__words[0];
    if (!v77.__r_.__value_.__r.__words[0])
      goto LABEL_86;
    v44 = (void *)v77.__r_.__value_.__r.__words[0];
    if (v77.__r_.__value_.__l.__size_ != v77.__r_.__value_.__r.__words[0])
    {
      v62 = v77.__r_.__value_.__l.__size_ - 24;
      do
      {
        *(_QWORD *)v80 = v62;
        sub_1C4FF890C((void ***)v80);
        if (*(char *)(v62 - 1) < 0)
          operator delete(*(void **)(v62 - 24));
        v63 = v62 - 48;
        v62 -= 72;
      }
      while (v63 != v61);
      v44 = (void *)v77.__r_.__value_.__r.__words[0];
    }
    v77.__r_.__value_.__l.__size_ = v61;
  }
  operator delete(v44);
LABEL_86:
  if ((v84 & 1) != 0)
  {
    v64 = v83[0];
    v83[0] = 0;
    if (v64)
      (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
  }
  if ((v86 & 1) != 0)
  {
    v65 = v85[0];
    v85[0] = 0;
    if (v65)
      (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getLinkAsStrtab(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  char *v10;
  std::string::size_type v11;
  std::string *p_p;
  std::string::size_type size;
  std::string *v14;
  std::string::size_type v15;
  uint64_t v16;
  unint64_t v18;
  std::string *v19;
  std::string::size_type v20;
  std::string *v21;
  char *v22;
  std::string::size_type v23;
  std::string *v24;
  std::string::size_type v25;
  std::string *v26;
  std::string::size_type v27;
  uint64_t v28;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  std::string v33;
  char *v34;
  std::string __p;
  std::string v36;
  std::string v37;
  std::string v38;
  _QWORD v39[4];
  __int16 v40;
  __int128 v41;
  std::string::size_type v42;
  char *v43;
  char v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSection(a1, *(_DWORD *)(a2 + 24), (uint64_t)&v43);
  if ((v44 & 1) != 0)
  {
    sub_1C59A3508(&v36, a1, a2);
    v7 = std::string::insert(&v36, 0, "invalid section linked to ");
    v8 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__r.__words[2] = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    v9 = std::string::append(&v37, ": ");
    v10 = 0;
    v11 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v38.__r_.__value_.__r.__words[2] = v11;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if ((v44 & 1) != 0)
    {
      v10 = v43;
      v43 = 0;
    }
    v34 = v10;
    sub_1C61D2548(&v34, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
    else
      size = __p.__r_.__value_.__l.__size_;
    v14 = std::string::append(&v38, (const std::string::value_type *)p_p, size);
    v15 = v14->__r_.__value_.__r.__words[2];
    v41 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v42 = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    v40 = 260;
    v39[0] = &v41;
    v16 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v18 = qword_1EF8F7238[0];
    *(_QWORD *)v16 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v39, (_QWORD *)(v16 + 8));
    *(_QWORD *)(v16 + 32) = 3;
    *(_QWORD *)(v16 + 40) = v18;
    *(_BYTE *)(v16 + 48) = 1;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v16;
    if (SHIBYTE(v42) < 0)
      operator delete((void *)v41);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v34)
      (*(void (**)(char *))(*(_QWORD *)v34 + 8))(v34);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v37.__r_.__value_.__l.__data_);
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v36.__r_.__value_.__l.__data_);
  }
  else
  {
    v39[0] = sub_1C59A5848;
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getStringTable(a1, (uint64_t)v43, (void (*)(std::string *__return_ptr, uint64_t, _QWORD *))sub_1C62CD258, (uint64_t)v39, (uint64_t)&v41);
    if ((v42 & 1) != 0)
    {
      sub_1C59A3508(&__p, a1, a2);
      v19 = std::string::insert(&__p, 0, "invalid string table linked to ");
      v20 = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v36.__r_.__value_.__l.__data_ = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v36.__r_.__value_.__r.__words[2] = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      v21 = std::string::append(&v36, ": ");
      v22 = 0;
      v23 = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v37.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v37.__r_.__value_.__r.__words[2] = v23;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      if ((v42 & 1) != 0)
      {
        v22 = (char *)v41;
        *(_QWORD *)&v41 = 0;
      }
      v32 = v22;
      sub_1C61D2548(&v32, &v33);
      if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v24 = &v33;
      else
        v24 = (std::string *)v33.__r_.__value_.__r.__words[0];
      if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v25 = *((_BYTE *)&v33.__r_.__value_.__s + 23) & 0x7F;
      else
        v25 = v33.__r_.__value_.__l.__size_;
      v26 = std::string::append(&v37, (const std::string::value_type *)v24, v25);
      v27 = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v38.__r_.__value_.__l.__data_ = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v38.__r_.__value_.__r.__words[2] = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      v40 = 260;
      v39[0] = &v38;
      v28 = operator new();
      if (!atomic_load(qword_1EF8F7238))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
      v30 = qword_1EF8F7238[0];
      *(_QWORD *)v28 = off_1E81A0C88;
      llvm::Twine::str((llvm::Twine *)v39, (_QWORD *)(v28 + 8));
      *(_QWORD *)(v28 + 32) = 3;
      *(_QWORD *)(v28 + 40) = v30;
      *(_BYTE *)(v28 + 48) = 1;
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v28;
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v38.__r_.__value_.__l.__data_);
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v33.__r_.__value_.__l.__data_);
      if (v32)
        (*(void (**)(char *))(*(_QWORD *)v32 + 8))(v32);
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v37.__r_.__value_.__l.__data_);
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v36.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if ((v42 & 1) != 0)
      {
        v31 = v41;
        *(_QWORD *)&v41 = 0;
        if (v31)
          (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
      }
    }
    else
    {
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_OWORD *)a3 = v41;
    }
  }
  if ((v44 & 1) != 0)
  {
    v6 = (uint64_t)v43;
    v43 = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
}

void sub_1C59A3508(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  const char *ELFSectionTypeName;
  uint64_t v8;
  _QWORD v9[4];
  __int16 v10;
  _QWORD v11[4];
  __int16 v12;
  _QWORD v13[4];

  v13[3] = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::sections(a2, (uint64_t)v13);
  v6 = -858993459 * ((unint64_t)(a3 - v13[0]) >> 3);
  ELFSectionTypeName = llvm::object::getELFSectionTypeName((llvm::object *)*(unsigned __int16 *)(*a2 + 18), *(_DWORD *)(a3 + 4));
  v10 = 773;
  v9[0] = ELFSectionTypeName;
  v9[1] = v8;
  v9[2] = " section with index ";
  v11[0] = v9;
  v11[2] = v6;
  v12 = 2050;
  llvm::Twine::str((llvm::Twine *)v11, a1);
}

__int128 *sub_1C59A35D4(uint64_t a1, uint64_t a2)
{
  __int128 *v2;
  unint64_t v4;
  __int128 *v5;
  unint64_t v6;
  unint64_t v7;
  void **v8;
  __int128 v9;
  void **v10;
  void *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  void *v16;
  uint64_t v17;
  void *__p[2];
  _OWORD v20[2];
  __int128 v21;
  uint64_t v22;
  uint64_t v23;
  void **v24;

  v2 = (__int128 *)a2;
  v5 = *(__int128 **)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v6 = 0x8E38E38E38E38E39 * ((a2 - *(_QWORD *)a1) >> 3);
  v7 = *(_QWORD *)(a1 + 16);
  if (v4 >= v7)
  {
    v12 = 0x8E38E38E38E38E39 * ((uint64_t)(v4 - (_QWORD)v5) >> 3) + 1;
    if (v12 > 0x38E38E38E38E38ELL)
      abort();
    v13 = 0x8E38E38E38E38E39 * ((uint64_t)(v7 - (_QWORD)v5) >> 3);
    if (2 * v13 > v12)
      v12 = 2 * v13;
    if (v13 >= 0x1C71C71C71C71C7)
      v14 = 0x38E38E38E38E38ELL;
    else
      v14 = v12;
    *(_QWORD *)&v20[1] = a1 + 16;
    if (v14)
    {
      if (v14 > 0x38E38E38E38E38ELL)
        sub_1C4764EE4();
      v15 = (char *)operator new(72 * v14);
    }
    else
    {
      v15 = 0;
    }
    __p[0] = v15;
    __p[1] = &v15[72 * v6];
    *(void **)&v20[0] = __p[1];
    *((_QWORD *)&v20[0] + 1) = &v15[72 * v14];
    sub_1C59C4FE8((__int128 **)__p);
    v2 = sub_1C59C5258((__int128 **)a1, __p, v2);
    v16 = __p[1];
    while (1)
    {
      v17 = *(_QWORD *)&v20[0];
      if (*(void **)&v20[0] == v16)
        break;
      *(_QWORD *)&v20[0] -= 72;
      v24 = (void **)(v17 - 24);
      sub_1C4FF890C(&v24);
      if (*(char *)(v17 - 25) < 0)
        operator delete(*(void **)(v17 - 48));
    }
    v11 = __p[0];
    if (__p[0])
      goto LABEL_23;
  }
  else if (a2 == v4)
  {
    *(_QWORD *)(a2 + 64) = 0;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    *(_QWORD *)(a1 + 8) = a2 + 72;
  }
  else
  {
    *(_OWORD *)__p = 0u;
    memset(v20, 0, sizeof(v20));
    v21 = 0u;
    v22 = 0;
    v23 = a1 + 16;
    sub_1C59C4E9C(a1, a2, v4, a2 + 72);
    *(_QWORD *)v2 = 0;
    *((_QWORD *)v2 + 1) = 0;
    *((_QWORD *)v2 + 2) = 0;
    v8 = (void **)v5 + 9 * v6 + 3;
    if (*((char *)v2 + 47) < 0)
      operator delete(*v8);
    v9 = *(_OWORD *)((char *)v20 + 8);
    *((_QWORD *)v5 + 9 * v6 + 5) = *((_QWORD *)&v20[1] + 1);
    *(_OWORD *)v8 = v9;
    HIBYTE(v20[1]) = 0;
    BYTE8(v20[0]) = 0;
    v10 = (void **)v5 + 9 * v6;
    sub_1C59C5384(v10 + 6);
    v10[6] = 0;
    v10[7] = 0;
    v10[8] = 0;
    v21 = 0uLL;
    v22 = 0;
    v24 = (void **)&v21;
    sub_1C4FF890C(&v24);
    if (SHIBYTE(v20[1]) < 0)
    {
      v11 = (void *)*((_QWORD *)&v20[0] + 1);
LABEL_23:
      operator delete(v11);
    }
  }
  return v2;
}

void sub_1C59A3814(uint64_t a1@<X0>, unsigned int **a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int *v5;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  std::string::size_type v10;
  uint64_t v11;
  unint64_t v13;
  unsigned int *v14;
  uint64_t *v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  _QWORD *v20;
  char v21;
  uint64_t v22;
  _QWORD **p_dst;
  uint64_t v24;
  uint64_t v25;
  std::string::size_type v26;
  std::string v27;
  _BYTE __p[24];
  _QWORD v29[2];
  unint64_t v30;
  __int16 v31;
  _QWORD *__dst;
  __int128 v33;
  __int16 v34;
  std::string v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  if ((unint64_t)(*a2 + 2) <= **(_QWORD **)a1)
  {
    v14 = (unsigned int *)((char *)v5 + v5[1]);
    *a2 = v14;
    v15 = *(uint64_t **)(a1 + 32);
    v16 = **(_DWORD **)(a1 + 24);
    v17 = *v5;
    v18 = v15[1];
    v19 = v18 - v17;
    if (v18 < v17)
    {
      v29[0] = "<invalid vda_name: ";
      v30 = v17;
      v31 = 2051;
      __dst = v29;
      *((_QWORD *)&v33 + 1) = ">";
      v34 = 770;
      llvm::Twine::str((llvm::Twine *)&__dst, __p);
      v20 = *(_QWORD **)__p;
      v35.__r_.__value_.__r.__words[0] = *(_QWORD *)&__p[8];
      *(std::string::size_type *)((char *)v35.__r_.__value_.__r.__words + 7) = *(_QWORD *)&__p[15];
      v21 = __p[23];
LABEL_21:
      *(_BYTE *)(a4 + 32) &= ~1u;
      *(_DWORD *)a4 = (_DWORD)v14 - v16;
      v26 = v35.__r_.__value_.__r.__words[0];
      *(_QWORD *)(a4 + 8) = v20;
      *(_QWORD *)(a4 + 16) = v26;
      *(_QWORD *)(a4 + 23) = *(std::string::size_type *)((char *)v35.__r_.__value_.__r.__words + 7);
      *(_BYTE *)(a4 + 31) = v21;
      return;
    }
    if (v19 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v22 = *v15;
    if (v19 >= 0x17)
    {
      v24 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v19 | 7) != 0x17)
        v24 = v19 | 7;
      v25 = v24 + 1;
      p_dst = (_QWORD **)operator new(v24 + 1);
      *(_QWORD *)&v33 = v19;
      *((_QWORD *)&v33 + 1) = v25 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v33) = v18 - v17;
      p_dst = &__dst;
      if (v18 == v17)
        goto LABEL_20;
    }
    memmove(p_dst, (const void *)(v22 + v17), v19);
LABEL_20:
    *((_BYTE *)p_dst + v19) = 0;
    v20 = __dst;
    v35.__r_.__value_.__r.__words[0] = v33;
    *(std::string::size_type *)((char *)v35.__r_.__value_.__r.__words + 7) = *(_QWORD *)((char *)&v33 + 7);
    v21 = HIBYTE(v33);
    goto LABEL_21;
  }
  sub_1C59A3508(&v27, *(_QWORD **)(a1 + 8), *(_QWORD *)(a1 + 16));
  v7 = std::string::insert(&v27, 0, "invalid ");
  v8 = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  v9 = std::string::append(&v35, ": version definition ");
  v10 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  *(_QWORD *)&__p[16] = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  v29[0] = __p;
  v30 = a3;
  v31 = 2052;
  __dst = v29;
  *((_QWORD *)&v33 + 1) = " refers to an auxiliary entry that goes past the end of the section";
  v34 = 770;
  v11 = operator new();
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v13 = qword_1EF8F7238[0];
  *(_QWORD *)v11 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)&__dst, (_QWORD *)(v11 + 8));
  *(_QWORD *)(v11 + 32) = 3;
  *(_QWORD *)(v11 + 40) = v13;
  *(_BYTE *)(v11 + 48) = 1;
  *(_BYTE *)(a4 + 32) |= 1u;
  *(_QWORD *)a4 = v11;
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getVersionDependencies(_QWORD *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr, uint64_t, __int128 *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  unint64_t v13;
  unsigned int v14;
  unsigned __int16 *v15;
  std::string::size_type v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __int128 *p_dst;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char *v27;
  _DWORD *v28;
  _DWORD *v29;
  unint64_t v30;
  size_t v31;
  __int128 *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void **v37;
  std::string::size_type v38;
  std::string *v39;
  std::string::size_type v40;
  std::string *v41;
  std::string::size_type v42;
  std::string::size_type v43;
  uint64_t v44;
  unint64_t v46;
  void *v47;
  std::string *v48;
  std::string::size_type v49;
  std::string *v50;
  std::string::size_type v51;
  const char *v52;
  uint64_t v53;
  unint64_t v55;
  std::string::size_type v56;
  void *v57;
  std::string::size_type v58;
  std::string::size_type v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  std::string *v65;
  std::string::size_type v66;
  std::string *v67;
  char *v68;
  std::string::size_type v69;
  std::string *v70;
  std::string::size_type size;
  std::string *v72;
  std::string::size_type v73;
  uint64_t v74;
  unint64_t v76;
  std::string *v77;
  std::string::size_type v78;
  std::string *v79;
  std::string::size_type v80;
  std::string *v81;
  std::string::size_type v82;
  std::string *v83;
  std::string::size_type v84;
  std::string *v85;
  std::string::size_type v86;
  std::string *v87;
  std::string::size_type v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  _QWORD *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  char **v97;
  std::string __p;
  __int16 v99;
  char *v100;
  std::string v101;
  std::string v102;
  std::string v103;
  std::string v104;
  char *v105;
  __int128 __dst;
  const char *v107;
  __int16 v108;
  _QWORD v109[2];
  char v110;
  _QWORD v111[2];
  char v112;
  uint64_t v113;

  v7 = a2;
  v8 = a1;
  v113 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getLinkAsStrtab(a1, a2, (uint64_t)v111);
  v93 = v8;
  if ((v112 & 1) != 0)
  {
    v62 = (char *)v111[0];
    v111[0] = 0;
    v105 = v62;
    sub_1C61D2548(&v105, &__p);
    v108 = 260;
    *(_QWORD *)&__dst = &__p;
    a3(v109, a4, &__dst);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v105)
      (*(void (**)(char *))(*(_QWORD *)v105 + 8))(v105);
    v63 = v109[0];
    if (v109[0])
    {
      *(_BYTE *)(a5 + 24) |= 1u;
      *(_QWORD *)a5 = v63;
      goto LABEL_73;
    }
    v96 = 0;
    v10 = 0;
  }
  else
  {
    v10 = v111[1];
    v96 = v111[0];
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionContents(v8, v7, (uint64_t)v109);
  if ((v110 & 1) != 0)
  {
    v64 = a5;
    sub_1C59A3508(&v102, v8, v7);
    v65 = std::string::insert(&v102, 0, "cannot read content of ");
    v66 = v65->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v103.__r_.__value_.__l.__data_ = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
    v103.__r_.__value_.__r.__words[2] = v66;
    v65->__r_.__value_.__l.__size_ = 0;
    v65->__r_.__value_.__r.__words[2] = 0;
    v65->__r_.__value_.__r.__words[0] = 0;
    v67 = std::string::append(&v103, ": ");
    v68 = 0;
    v69 = v67->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v104.__r_.__value_.__l.__data_ = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
    v104.__r_.__value_.__r.__words[2] = v69;
    v67->__r_.__value_.__l.__size_ = 0;
    v67->__r_.__value_.__r.__words[2] = 0;
    v67->__r_.__value_.__r.__words[0] = 0;
    if ((v110 & 1) != 0)
    {
      v68 = (char *)v109[0];
      v109[0] = 0;
    }
    v100 = v68;
    sub_1C61D2548(&v100, &v101);
    if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v70 = &v101;
    else
      v70 = (std::string *)v101.__r_.__value_.__r.__words[0];
    if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&v101.__r_.__value_.__s + 23) & 0x7F;
    else
      size = v101.__r_.__value_.__l.__size_;
    v72 = std::string::append(&v104, (const std::string::value_type *)v70, size);
    v73 = v72->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v73;
    v72->__r_.__value_.__l.__size_ = 0;
    v72->__r_.__value_.__r.__words[2] = 0;
    v72->__r_.__value_.__r.__words[0] = 0;
    v108 = 260;
    *(_QWORD *)&__dst = &__p;
    v74 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v76 = qword_1EF8F7238[0];
    *(_QWORD *)v74 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)&__dst, (_QWORD *)(v74 + 8));
    *(_QWORD *)(v74 + 32) = 3;
    *(_QWORD *)(v74 + 40) = v76;
    *(_BYTE *)(v74 + 48) = 1;
    *(_BYTE *)(v64 + 24) |= 1u;
    *(_QWORD *)v64 = v74;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v101.__r_.__value_.__l.__data_);
    if (v100)
      (*(void (**)(char *))(*(_QWORD *)v100 + 8))(v100);
    if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v104.__r_.__value_.__l.__data_);
    if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v103.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v102.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_70;
    v57 = (void *)v102.__r_.__value_.__r.__words[0];
  }
  else
  {
    v11 = v109[0];
    v12 = 0uLL;
    memset(&v104, 0, sizeof(v104));
    if (!*(_DWORD *)(v7 + 28))
    {
      v38 = 0;
LABEL_41:
      *(_BYTE *)(a5 + 24) &= ~1u;
      *(_OWORD *)a5 = v12;
      *(_QWORD *)(a5 + 16) = v38;
      goto LABEL_70;
    }
    v90 = a5;
    v91 = v7;
    v13 = v109[0] + v109[1];
    v14 = 1;
    v15 = (unsigned __int16 *)v109[0];
    v95 = v10;
    while (1)
    {
      if ((unint64_t)(v15 + 10) > v13)
      {
        sub_1C59A3508(&v101, v8, v7);
        v77 = std::string::insert(&v101, 0, "invalid ");
        v78 = v77->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v102.__r_.__value_.__l.__data_ = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
        v102.__r_.__value_.__r.__words[2] = v78;
        v77->__r_.__value_.__l.__size_ = 0;
        v77->__r_.__value_.__r.__words[2] = 0;
        v77->__r_.__value_.__r.__words[0] = 0;
        v79 = std::string::append(&v102, ": version dependency ");
        v80 = v79->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v103.__r_.__value_.__l.__data_ = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
        v103.__r_.__value_.__r.__words[2] = v80;
        v79->__r_.__value_.__l.__size_ = 0;
        v79->__r_.__value_.__r.__words[2] = 0;
        v79->__r_.__value_.__r.__words[0] = 0;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v103;
        __p.__r_.__value_.__r.__words[2] = v14;
        v99 = 2052;
        v52 = " goes past the end of the section";
        goto LABEL_52;
      }
      if ((v15 & 3) != 0)
        break;
      v16 = *v15;
      if (v16 != 1)
      {
        sub_1C59A3508(&v101, v93, v7);
        v85 = std::string::insert(&v101, 0, "unable to dump ");
        v86 = v85->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v102.__r_.__value_.__l.__data_ = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
        v102.__r_.__value_.__r.__words[2] = v86;
        v85->__r_.__value_.__l.__size_ = 0;
        v85->__r_.__value_.__r.__words[2] = 0;
        v85->__r_.__value_.__r.__words[0] = 0;
        v87 = std::string::append(&v102, ": version ");
        v88 = v87->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v103.__r_.__value_.__l.__data_ = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
        v103.__r_.__value_.__r.__words[2] = v88;
        v87->__r_.__value_.__l.__size_ = 0;
        v87->__r_.__value_.__r.__words[2] = 0;
        v87->__r_.__value_.__r.__words[0] = 0;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v103;
        __p.__r_.__value_.__r.__words[2] = v16;
        v99 = 2052;
        v52 = " is not yet supported";
        goto LABEL_52;
      }
      v17 = sub_1C59A4610((uint64_t)&v104, (_OWORD *)v104.__r_.__value_.__l.__size_);
      *(_DWORD *)v17 = *v15;
      *(_DWORD *)(v17 + 4) = v15[1];
      *(_DWORD *)(v17 + 8) = (_DWORD)v15 - v11;
      v18 = *((unsigned int *)v15 + 1);
      v19 = v10 - v18;
      v92 = v14;
      if (v10 <= v18)
      {
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"<corrupt vn_file: ";
        v89 = v89 & 0xFFFFFFFF00000000 | v18;
        __p.__r_.__value_.__r.__words[2] = v89;
        v99 = 2051;
        *(_QWORD *)&__dst = &__p;
        v107 = ">";
        v108 = 770;
        llvm::Twine::str((llvm::Twine *)&__dst, &v103);
        v21 = v17 + 16;
        v22 = v17;
        if (*(char *)(v17 + 39) < 0)
          operator delete(*(void **)v21);
        v23 = (const char *)v103.__r_.__value_.__r.__words[2];
        *(_OWORD *)v21 = *(_OWORD *)&v103.__r_.__value_.__l.__data_;
      }
      else
      {
        if (v19 > 0x7FFFFFFFFFFFFFF7)
LABEL_109:
          abort();
        if (v19 >= 0x17)
        {
          v24 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v19 | 7) != 0x17)
            v24 = v19 | 7;
          v25 = v24 + 1;
          p_dst = (__int128 *)operator new(v24 + 1);
          *((_QWORD *)&__dst + 1) = v10 - v18;
          v107 = (const char *)(v25 | 0x8000000000000000);
          *(_QWORD *)&__dst = p_dst;
        }
        else
        {
          HIBYTE(v107) = v10 - v18;
          p_dst = &__dst;
        }
        memmove(p_dst, (const void *)(v96 + v18), v10 - v18);
        *((_BYTE *)p_dst + v19) = 0;
        v22 = v17;
        v21 = v17 + 16;
        if (*(char *)(v17 + 39) < 0)
          operator delete(*(void **)v21);
        *(_OWORD *)v21 = __dst;
        v23 = v107;
      }
      *(_QWORD *)(v21 + 16) = v23;
      if (v15[1])
      {
        v26 = 0;
        v27 = (char *)v15 + *((unsigned int *)v15 + 2);
        v97 = (char **)(v22 + 40);
        v94 = v22;
        while (1)
        {
          if ((v27 & 3) != 0)
          {
            sub_1C59A3508(&v102, v93, v91);
            v39 = std::string::insert(&v102, 0, "invalid ");
            v40 = v39->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v103.__r_.__value_.__l.__data_ = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
            v103.__r_.__value_.__r.__words[2] = v40;
            v39->__r_.__value_.__l.__size_ = 0;
            v39->__r_.__value_.__r.__words[2] = 0;
            v39->__r_.__value_.__r.__words[0] = 0;
            v41 = std::string::append(&v103, ": found a misaligned auxiliary entry at offset 0x");
            v42 = v41->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
            __p.__r_.__value_.__r.__words[2] = v42;
            v41->__r_.__value_.__l.__size_ = 0;
            v41->__r_.__value_.__r.__words[2] = 0;
            v41->__r_.__value_.__r.__words[0] = 0;
            v43 = (std::string::size_type)&v27[-v11];
            goto LABEL_43;
          }
          if ((unint64_t)(v27 + 16) > v13)
            break;
          v28 = (_DWORD *)sub_1C59A47F0(v97, *(_QWORD *)(v22 + 48));
          v29 = v28;
          *v28 = *(_DWORD *)v27;
          v28[1] = *((unsigned __int16 *)v27 + 2);
          v28[2] = *((unsigned __int16 *)v27 + 3);
          v28[3] = (_DWORD)v27 - v11;
          v30 = *((unsigned int *)v27 + 2);
          v31 = v10 - v30;
          if (v10 <= v30)
          {
            MEMORY[0x1CAA32ABC](v28 + 4, "<corrupt>");
          }
          else
          {
            if (v31 > 0x7FFFFFFFFFFFFFF7)
              goto LABEL_109;
            if (v31 >= 0x17)
            {
              v33 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v31 | 7) != 0x17)
                v33 = v31 | 7;
              v34 = v11;
              v35 = v33 + 1;
              v32 = (__int128 *)operator new(v33 + 1);
              v36 = v35 | 0x8000000000000000;
              v11 = v34;
              v22 = v94;
              *((_QWORD *)&__dst + 1) = v31;
              v107 = (const char *)v36;
              *(_QWORD *)&__dst = v32;
            }
            else
            {
              HIBYTE(v107) = v10 - v30;
              v32 = &__dst;
            }
            memmove(v32, (const void *)(v96 + v30), v31);
            *((_BYTE *)v32 + v31) = 0;
            v37 = (void **)(v29 + 4);
            if (*((char *)v29 + 39) < 0)
              operator delete(*v37);
            *(_OWORD *)v37 = __dst;
            *((_QWORD *)v29 + 4) = v107;
            v10 = v95;
          }
          v27 += *((unsigned int *)v27 + 3);
          if (++v26 >= v15[1])
            goto LABEL_38;
        }
        sub_1C59A3508(&v101, v93, v91);
        v48 = std::string::insert(&v101, 0, "invalid ");
        v49 = v48->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v102.__r_.__value_.__l.__data_ = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
        v102.__r_.__value_.__r.__words[2] = v49;
        v48->__r_.__value_.__l.__size_ = 0;
        v48->__r_.__value_.__r.__words[2] = 0;
        v48->__r_.__value_.__r.__words[0] = 0;
        v50 = std::string::append(&v102, ": version dependency ");
        v51 = v50->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v103.__r_.__value_.__l.__data_ = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
        v103.__r_.__value_.__r.__words[2] = v51;
        v50->__r_.__value_.__l.__size_ = 0;
        v50->__r_.__value_.__r.__words[2] = 0;
        v50->__r_.__value_.__r.__words[0] = 0;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v103;
        __p.__r_.__value_.__r.__words[2] = v92;
        v99 = 2052;
        v52 = " refers to an auxiliary entry that goes past the end of the section";
LABEL_52:
        *(_QWORD *)&__dst = &__p;
        v107 = v52;
        v108 = 770;
        v53 = operator new();
        if (!atomic_load(qword_1EF8F7238))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
        v55 = qword_1EF8F7238[0];
        *(_QWORD *)v53 = off_1E81A0C88;
        llvm::Twine::str((llvm::Twine *)&__dst, (_QWORD *)(v53 + 8));
        *(_QWORD *)(v53 + 32) = 3;
        *(_QWORD *)(v53 + 40) = v55;
        *(_BYTE *)(v53 + 48) = 1;
        *(_BYTE *)(v90 + 24) |= 1u;
        *(_QWORD *)v90 = v53;
        if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v103.__r_.__value_.__l.__data_);
        if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v102.__r_.__value_.__l.__data_);
        if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
        {
          v47 = (void *)v101.__r_.__value_.__r.__words[0];
          goto LABEL_60;
        }
        goto LABEL_61;
      }
LABEL_38:
      v15 = (unsigned __int16 *)((char *)v15 + *((unsigned int *)v15 + 3));
      v14 = v92 + 1;
      v7 = v91;
      v8 = v93;
      if (v92 + 1 > *(_DWORD *)(v91 + 28))
      {
        v12 = *(_OWORD *)&v104.__r_.__value_.__l.__data_;
        v38 = v104.__r_.__value_.__r.__words[2];
        a5 = v90;
        goto LABEL_41;
      }
    }
    sub_1C59A3508(&v102, v8, v7);
    v81 = std::string::insert(&v102, 0, "invalid ");
    v82 = v81->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v103.__r_.__value_.__l.__data_ = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
    v103.__r_.__value_.__r.__words[2] = v82;
    v81->__r_.__value_.__l.__size_ = 0;
    v81->__r_.__value_.__r.__words[2] = 0;
    v81->__r_.__value_.__r.__words[0] = 0;
    v83 = std::string::append(&v103, ": found a misaligned version dependency entry at offset 0x");
    v84 = v83->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v84;
    v83->__r_.__value_.__l.__size_ = 0;
    v83->__r_.__value_.__r.__words[2] = 0;
    v83->__r_.__value_.__r.__words[0] = 0;
    v43 = (std::string::size_type)v15 - v11;
LABEL_43:
    v101.__r_.__value_.__r.__words[0] = v43;
    *(_QWORD *)&__dst = &__p;
    v107 = (const char *)&v101;
    v108 = 3588;
    v44 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v46 = qword_1EF8F7238[0];
    *(_QWORD *)v44 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)&__dst, (_QWORD *)(v44 + 8));
    *(_QWORD *)(v44 + 32) = 3;
    *(_QWORD *)(v44 + 40) = v46;
    *(_BYTE *)(v44 + 48) = 1;
    *(_BYTE *)(v90 + 24) |= 1u;
    *(_QWORD *)v90 = v44;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v103.__r_.__value_.__l.__data_);
    if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
    {
      v47 = (void *)v102.__r_.__value_.__r.__words[0];
LABEL_60:
      operator delete(v47);
    }
LABEL_61:
    v56 = v104.__r_.__value_.__r.__words[0];
    if (!v104.__r_.__value_.__r.__words[0])
      goto LABEL_70;
    v57 = (void *)v104.__r_.__value_.__r.__words[0];
    if (v104.__r_.__value_.__l.__size_ != v104.__r_.__value_.__r.__words[0])
    {
      v58 = v104.__r_.__value_.__l.__size_ - 24;
      do
      {
        *(_QWORD *)&__dst = v58;
        sub_1C59C5618((void ***)&__dst);
        if (*(char *)(v58 - 1) < 0)
          operator delete(*(void **)(v58 - 24));
        v59 = v58 - 40;
        v58 -= 64;
      }
      while (v59 != v56);
      v57 = (void *)v104.__r_.__value_.__r.__words[0];
    }
    v104.__r_.__value_.__l.__size_ = v56;
  }
  operator delete(v57);
LABEL_70:
  if ((v110 & 1) != 0)
  {
    v60 = v109[0];
    v109[0] = 0;
    if (v60)
      (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
  }
LABEL_73:
  if ((v112 & 1) != 0)
  {
    v61 = v111[0];
    v111[0] = 0;
    if (v61)
      (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  }
}

uint64_t sub_1C59A4610(uint64_t a1, _OWORD *a2)
{
  uint64_t v2;
  unint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  unint64_t v7;
  uint64_t *v8;
  void **v9;
  __int128 v10;
  void *v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  void *v16;
  uint64_t v17;
  void *__p[2];
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  void **v24;

  v2 = (uint64_t)a2;
  v5 = *(uint64_t **)a1;
  v4 = *(_QWORD *)(a1 + 8);
  v6 = ((uint64_t)a2 - *(_QWORD *)a1) >> 6;
  v7 = *(_QWORD *)(a1 + 16);
  if (v4 >= v7)
  {
    v12 = ((uint64_t)(v4 - (_QWORD)v5) >> 6) + 1;
    if (v12 >> 58)
      abort();
    v13 = v7 - (_QWORD)v5;
    if (v13 >> 5 > v12)
      v12 = v13 >> 5;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFC0)
      v14 = 0x3FFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    *(_QWORD *)&v21 = a1 + 16;
    if (v14)
    {
      if (v14 >> 58)
        sub_1C4764EE4();
      v15 = (char *)operator new(v14 << 6);
    }
    else
    {
      v15 = 0;
    }
    __p[0] = v15;
    __p[1] = &v15[64 * v6];
    *(void **)&v20 = __p[1];
    *((_QWORD *)&v20 + 1) = &v15[64 * v14];
    sub_1C59C57C4((uint64_t **)__p);
    v2 = sub_1C59C59D8((uint64_t **)a1, __p, (uint64_t *)v2);
    v16 = __p[1];
    while (1)
    {
      v17 = v20;
      if ((void *)v20 == v16)
        break;
      *(_QWORD *)&v20 = v20 - 64;
      v24 = (void **)(v17 - 24);
      sub_1C59C5618(&v24);
      if (*(char *)(v17 - 25) < 0)
        operator delete(*(void **)(v17 - 48));
    }
    v11 = __p[0];
    if (__p[0])
      goto LABEL_23;
  }
  else if (a2 == (_OWORD *)v4)
  {
    a2[2] = 0u;
    a2[3] = 0u;
    *a2 = 0u;
    a2[1] = 0u;
    *(_QWORD *)(a1 + 8) = a2 + 4;
  }
  else
  {
    v23 = a1 + 16;
    *(_OWORD *)__p = 0u;
    v20 = 0u;
    v21 = 0u;
    v22 = 0u;
    sub_1C59C5690(a1, (uint64_t)a2, v4, (uint64_t)(a2 + 4));
    *(_DWORD *)(v2 + 8) = 0;
    *(_QWORD *)v2 = 0;
    v8 = &v5[8 * v6];
    v9 = (void **)(v8 + 2);
    if (*(char *)(v2 + 39) < 0)
      operator delete(*v9);
    v10 = v20;
    v8[4] = v21;
    *(_OWORD *)v9 = v10;
    BYTE7(v21) = 0;
    LOBYTE(v20) = 0;
    sub_1C59C5AF4((void **)v8 + 5);
    v8[5] = 0;
    v8[6] = 0;
    v8[7] = 0;
    *((_QWORD *)&v21 + 1) = 0;
    v22 = 0uLL;
    v24 = (void **)&v21 + 1;
    sub_1C59C5618(&v24);
    if (SBYTE7(v21) < 0)
    {
      v11 = (void *)v20;
LABEL_23:
      operator delete(v11);
    }
  }
  return v2;
}

uint64_t sub_1C59A47F0(char **a1, uint64_t a2)
{
  uint64_t v2;
  unint64_t v4;
  char *v5;
  unint64_t v6;
  unint64_t v7;
  char *v8;
  unint64_t v9;
  __int128 v10;
  void **v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  char *v17;
  char *v18;
  uint64_t v19;
  char *v20;
  __int128 v21;
  char *v22;
  char *v23;
  __int128 v24;
  char *v25;
  char *v26;
  char *v28;
  char *v29;
  char *v30;
  char *v31;
  _QWORD *v32;

  v2 = a2;
  v5 = *a1;
  v4 = (unint64_t)a1[1];
  v6 = 0xCCCCCCCCCCCCCCCDLL * ((a2 - (uint64_t)*a1) >> 3);
  v7 = (unint64_t)a1[2];
  if (v4 >= v7)
  {
    v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v4 - (_QWORD)v5) >> 3) + 1;
    if (v12 > 0x666666666666666)
      abort();
    v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v7 - (_QWORD)v5) >> 3);
    if (2 * v13 > v12)
      v12 = 2 * v13;
    if (v13 >= 0x333333333333333)
      v14 = 0x666666666666666;
    else
      v14 = v12;
    v32 = a1 + 2;
    if (v14)
    {
      if (v14 > 0x666666666666666)
        sub_1C4764EE4();
      v15 = (char *)operator new(40 * v14);
    }
    else
    {
      v15 = 0;
    }
    v28 = v15;
    v29 = &v15[40 * v6];
    v30 = v29;
    v31 = &v15[40 * v14];
    sub_1C59C5B60(&v28);
    v16 = v29;
    v17 = *a1;
    v18 = v29;
    if ((char *)v2 != *a1)
    {
      v19 = v2;
      v20 = v29;
      do
      {
        v18 = v20 - 40;
        *(_OWORD *)(v20 - 40) = *(_OWORD *)(v19 - 40);
        v21 = *(_OWORD *)(v19 - 24);
        *((_QWORD *)v20 - 1) = *(_QWORD *)(v19 - 8);
        *(_OWORD *)(v20 - 24) = v21;
        *(_QWORD *)(v19 - 16) = 0;
        *(_QWORD *)(v19 - 8) = 0;
        *(_QWORD *)(v19 - 24) = 0;
        v19 -= 40;
        v20 -= 40;
      }
      while ((char *)v19 != v17);
    }
    v29 = v18;
    v22 = a1[1];
    v23 = v30;
    if ((char *)v2 != v22)
    {
      do
      {
        *(_OWORD *)v23 = *(_OWORD *)v2;
        v24 = *(_OWORD *)(v2 + 16);
        *((_QWORD *)v23 + 4) = *(_QWORD *)(v2 + 32);
        *((_OWORD *)v23 + 1) = v24;
        *(_QWORD *)(v2 + 24) = 0;
        *(_QWORD *)(v2 + 32) = 0;
        *(_QWORD *)(v2 + 16) = 0;
        v23 += 40;
        v2 += 40;
      }
      while ((char *)v2 != v22);
      v18 = v29;
      v2 = (uint64_t)a1[1];
    }
    v25 = *a1;
    *a1 = v18;
    a1[1] = v23;
    v26 = a1[2];
    a1[2] = v31;
    v30 = (char *)v2;
    v31 = v26;
    v28 = v25;
    v29 = v25;
    sub_1C59C5D74((uint64_t)&v28);
    return (uint64_t)v16;
  }
  else if (a2 == v4)
  {
    *(_QWORD *)(a2 + 32) = 0;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    a1[1] = (char *)(a2 + 40);
  }
  else
  {
    v8 = a1[1];
    if (v4 - 40 < v4)
    {
      v9 = v4 - 40;
      v8 = a1[1];
      do
      {
        *(_OWORD *)v8 = *(_OWORD *)v9;
        v10 = *(_OWORD *)(v9 + 16);
        *((_QWORD *)v8 + 4) = *(_QWORD *)(v9 + 32);
        *((_OWORD *)v8 + 1) = v10;
        *(_QWORD *)(v9 + 24) = 0;
        *(_QWORD *)(v9 + 32) = 0;
        *(_QWORD *)(v9 + 16) = 0;
        v8 += 40;
        v9 += 40;
      }
      while (v9 < v4);
    }
    a1[1] = v8;
    sub_1C59C5CDC(a2, v4 - 40, v4);
    *(_QWORD *)v2 = 0;
    *(_QWORD *)(v2 + 8) = 0;
    v11 = (void **)&v5[40 * v6 + 16];
    if (*(char *)(v2 + 39) < 0)
      operator delete(*v11);
    *v11 = 0;
    *(_QWORD *)&v5[40 * v6 + 24] = 0;
    *(_QWORD *)&v5[40 * v6 + 32] = 0;
  }
  return v2;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSymbolVersionByIndex(__int16 a1@<W1>, _BYTE *a2@<X2>, uint64_t a3@<X3>, __int16 a4@<W4>, uint64_t a5@<X8>)
{
  uint64_t v6;
  size_t v7;
  char v8;
  uint64_t v9;
  unint64_t v11;
  _QWORD v12[4];
  __int16 v13;
  _QWORD v14[4];
  __int16 v15;
  uint64_t v16;

  v6 = a1 & 0x7FFF;
  v16 = v6;
  if (v6 <= 1)
  {
    *a2 = 0;
    *(_BYTE *)(a5 + 16) &= ~1u;
    *(_QWORD *)a5 = "";
    *(_QWORD *)(a5 + 8) = 0;
    return;
  }
  if (*(_DWORD *)(a3 + 8) > v6)
  {
    v7 = *(_QWORD *)a3 + 40 * (a1 & 0x7FFF);
    if (*(_BYTE *)(v7 + 32))
    {
      v8 = *(_BYTE *)(v7 + 24);
      if (v8)
        v8 = ((a4 & 0xFF00) == 0 || !(_BYTE)a4) && (a1 & 0x8000) == 0;
      *a2 = v8;
      if (*(char *)(v7 + 23) < 0)
      {
        v7 = *(_QWORD *)v7;
        *(_BYTE *)(a5 + 16) &= ~1u;
        *(_QWORD *)a5 = v7;
        if (!v7)
        {
LABEL_17:
          *(_QWORD *)(a5 + 8) = v7;
          return;
        }
      }
      else
      {
        *(_BYTE *)(a5 + 16) &= ~1u;
        *(_QWORD *)a5 = v7;
      }
      v7 = strlen((const char *)v7);
      goto LABEL_17;
    }
  }
  v12[0] = "SHT_GNU_versym section refers to a version index ";
  v12[2] = &v16;
  v13 = 2563;
  v14[0] = v12;
  v14[2] = " which is missing";
  v15 = 770;
  v9 = operator new();
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v11 = qword_1EF8F7238[0];
  *(_QWORD *)v9 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)v14, (_QWORD *)(v9 + 8));
  *(_QWORD *)(v9 + 32) = 3;
  *(_QWORD *)(v9 + 40) = v11;
  *(_BYTE *)(v9 + 48) = 1;
  *(_BYTE *)(a5 + 16) |= 1u;
  *(_QWORD *)a5 = v9;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getStringTable(_QWORD *a1@<X0>, uint64_t a2@<X1>, void (*a3)(std::string *__return_ptr, uint64_t, _QWORD *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  std::string *v10;
  std::string::size_type v11;
  const std::string::value_type *v12;
  std::string *v13;
  std::string::size_type v14;
  std::string *v15;
  std::string::size_type v16;
  uint64_t v17;
  unint64_t v19;
  uint64_t v20;
  std::string *v23;
  std::string::size_type v24;
  std::string *v25;
  std::string::size_type v26;
  const char *ELFSectionTypeName;
  uint64_t v28;
  std::string::size_type v29;
  std::string v30;
  std::string v31;
  std::string __p;
  _QWORD v33[4];
  __int16 v34;
  __int128 v35;
  std::string::size_type v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a2 + 4) != 3)
  {
    sub_1C59A4F58(a1, a2, (char *)&v31);
    v23 = std::string::insert(&v31, 0, "invalid sh_type for string table section ");
    v24 = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    v25 = std::string::append(&__p, ": expected SHT_STRTAB, but got ");
    v26 = v25->__r_.__value_.__r.__words[2];
    v35 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v36 = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    ELFSectionTypeName = llvm::object::getELFSectionTypeName((llvm::object *)*(unsigned __int16 *)(*a1 + 18), *(_DWORD *)(a2 + 4));
    v33[0] = &v35;
    v33[2] = ELFSectionTypeName;
    v33[3] = v28;
    v34 = 1284;
    a3(&v30, a4, v33);
    if (SHIBYTE(v36) < 0)
      operator delete((void *)v35);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
    v29 = v30.__r_.__value_.__r.__words[0];
    if (v30.__r_.__value_.__r.__words[0])
    {
      *(_BYTE *)(a5 + 16) |= 1u;
      *(_QWORD *)a5 = v29;
      return;
    }
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionContents(a1, a2, (uint64_t)&v35);
  v8 = v35;
  if ((v36 & 1) != 0)
  {
    *(_QWORD *)&v35 = 0;
    *(_BYTE *)(a5 + 16) |= 1u;
    *(_QWORD *)a5 = v8;
  }
  else
  {
    v9 = *((_QWORD *)&v35 + 1);
    if (!*((_QWORD *)&v35 + 1))
    {
      sub_1C59A4F58(a1, a2, (char *)&v30);
      v13 = std::string::insert(&v30, 0, "SHT_STRTAB string table section ");
      v14 = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v31.__r_.__value_.__r.__words[2] = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      v12 = " is empty";
      goto LABEL_8;
    }
    if (*(_BYTE *)(*((_QWORD *)&v35 + 1) + v35 - 1))
    {
      sub_1C59A4F58(a1, a2, (char *)&v30);
      v10 = std::string::insert(&v30, 0, "SHT_STRTAB string table section ");
      v11 = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v31.__r_.__value_.__r.__words[2] = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      v12 = " is non-null terminated";
LABEL_8:
      v15 = std::string::append(&v31, v12);
      v16 = v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      v34 = 260;
      v33[0] = &__p;
      v17 = operator new();
      if (!atomic_load(qword_1EF8F7238))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
      v19 = qword_1EF8F7238[0];
      *(_QWORD *)v17 = off_1E81A0C88;
      llvm::Twine::str((llvm::Twine *)v33, (_QWORD *)(v17 + 8));
      *(_QWORD *)(v17 + 32) = 3;
      *(_QWORD *)(v17 + 40) = v19;
      *(_BYTE *)(v17 + 48) = 1;
      *(_BYTE *)(a5 + 16) |= 1u;
      *(_QWORD *)a5 = v17;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v31.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
      goto LABEL_17;
    }
    *(_BYTE *)(a5 + 16) &= ~1u;
    *(_QWORD *)a5 = v8;
    *(_QWORD *)(a5 + 8) = v9;
  }
LABEL_17:
  if ((v36 & 1) != 0)
  {
    v20 = v35;
    *(_QWORD *)&v35 = 0;
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  }
}

void sub_1C59A4F58(_QWORD *a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  std::string *v5;
  std::string::size_type v6;
  std::string *v7;
  std::string::size_type v8;
  std::string::size_type v9;
  std::string v10;
  std::string v11;
  std::string::size_type v12[2];
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::sections(a1, (uint64_t)v12);
  if ((v13 & 1) != 0)
  {
    v8 = v12[0];
    v12[0] = 0;
    v10.__r_.__value_.__r.__words[0] = v8;
    sub_1C4D62BD4(&v10.__r_.__value_.__l.__data_, &v11.__r_.__value_.__l.__data_);
    if (v10.__r_.__value_.__r.__words[0])
      (*(void (**)(std::string::size_type))(*(_QWORD *)v10.__r_.__value_.__l.__data_ + 8))(v10.__r_.__value_.__r.__words[0]);
    a3[23] = 15;
    strcpy(a3, "[unknown index]");
  }
  else
  {
    std::to_string(&v10, 0xCCCCCCCCCCCCCCCDLL * ((int64_t)(a2 - v12[0]) >> 3));
    v5 = std::string::insert(&v10, 0, "[index ");
    v6 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v11.__r_.__value_.__l.__data_ = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v11.__r_.__value_.__r.__words[2] = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    v7 = std::string::append(&v11, "]");
    *(std::string *)a3 = *v7;
    v7->__r_.__value_.__r.__words[0] = 0;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v11.__r_.__value_.__l.__data_);
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v10.__r_.__value_.__l.__data_);
  }
  if ((v13 & 1) != 0)
  {
    v9 = v12[0];
    v12[0] = 0;
    if (v9)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v9 + 8))(v9);
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionContents(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::string::size_type v5;
  std::string::size_type v6;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  const char *v10;
  uint64_t v11;
  unint64_t v13;
  void *v14;
  std::string *v15;
  std::string::size_type v16;
  std::string *v17;
  std::string::size_type v18;
  uint64_t v19;
  unint64_t v21;
  std::string::size_type v22;
  uint64_t v23;
  std::string::size_type v24;
  std::string::size_type v25;
  std::string v26;
  std::string v27;
  std::string v28;
  __int16 v29;
  void *__p[2];
  const char *v31;
  __int16 v32;
  std::string v33;
  _QWORD v34[2];
  std::string *v35;
  __int16 v36;
  _QWORD v37[2];
  const char *v38;
  __int16 v39;
  _QWORD v40[2];
  std::string *v41;
  __int16 v42;
  _QWORD v43[2];
  const char *v44;
  __int16 v45;

  v6 = *(unsigned int *)(a2 + 16);
  v5 = *(unsigned int *)(a2 + 20);
  if (__CFADD__((_DWORD)v6, (_DWORD)v5))
  {
    sub_1C59A4F58(a1, a2, (char *)&v33);
    v7 = std::string::insert(&v33, 0, "section ");
    v8 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    v9 = std::string::append(&v28, " has a sh_offset (0x");
    v10 = (const char *)v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v31 = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    v27.__r_.__value_.__r.__words[0] = v6;
    v34[0] = __p;
    v35 = &v27;
    v36 = 3588;
    v37[0] = v34;
    v38 = ") + sh_size (0x";
    v39 = 770;
    v26.__r_.__value_.__r.__words[0] = v5;
    v40[0] = v37;
    v41 = &v26;
    v42 = 3586;
    v43[0] = v40;
    v44 = ") that cannot be represented";
    v45 = 770;
    v11 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v13 = qword_1EF8F7238[0];
    *(_QWORD *)v11 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v43, (_QWORD *)(v11 + 8));
    *(_QWORD *)(v11 + 32) = 3;
    *(_QWORD *)(v11 + 40) = v13;
    *(_BYTE *)(v11 + 48) = 1;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v11;
    if (SHIBYTE(v31) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v28.__r_.__value_.__l.__data_);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    {
      v14 = (void *)v33.__r_.__value_.__r.__words[0];
LABEL_20:
      operator delete(v14);
    }
  }
  else if (a1[1] >= (unint64_t)(v5 + v6))
  {
    v22 = *a1 + v6;
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_QWORD *)a3 = v22;
    *(_QWORD *)(a3 + 8) = v5;
  }
  else
  {
    sub_1C59A4F58(a1, a2, (char *)&v26);
    v15 = std::string::insert(&v26, 0, "section ");
    v16 = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v27.__r_.__value_.__r.__words[2] = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    v17 = std::string::append(&v27, " has a sh_offset (0x");
    v18 = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v33.__r_.__value_.__r.__words[2] = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    v24 = v5;
    v25 = v6;
    v28.__r_.__value_.__r.__words[0] = (std::string::size_type)&v33;
    v28.__r_.__value_.__r.__words[2] = (std::string::size_type)&v25;
    v29 = 3588;
    __p[0] = &v28;
    v31 = ") + sh_size (0x";
    v32 = 770;
    v34[0] = __p;
    v35 = (std::string *)&v24;
    v36 = 3586;
    v37[0] = v34;
    v38 = ") that is greater than the file size (0x";
    v39 = 770;
    v23 = a1[1];
    v40[0] = v37;
    v41 = (std::string *)&v23;
    v42 = 3586;
    v43[0] = v40;
    v44 = ")";
    v45 = 770;
    v19 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v21 = qword_1EF8F7238[0];
    *(_QWORD *)v19 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v43, (_QWORD *)(v19 + 8));
    *(_QWORD *)(v19 + 32) = 3;
    *(_QWORD *)(v19 + 40) = v21;
    *(_BYTE *)(v19 + 48) = 1;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v19;
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v27.__r_.__value_.__l.__data_);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    {
      v14 = (void *)v26.__r_.__value_.__r.__words[0];
      goto LABEL_20;
    }
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getStringTableForSymtab(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8[2];
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::sections(a1, (uint64_t)v8);
  if ((v9 & 1) != 0)
  {
    v7 = v8[0];
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v7;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getStringTableForSymtab(a1, a2, v8[0], v8[1], a3);
    if ((v9 & 1) != 0)
    {
      v6 = v8[0];
      v8[0] = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    }
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::sections(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  unint64_t v6;
  __int16 v8;
  uint64_t v9;
  unint64_t v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  const char *v15;
  uint64_t *v16;
  __int16 v17;

  v3 = *a1;
  v4 = *(unsigned int *)(*a1 + 32);
  if (!(_DWORD)v4)
  {
    *(_BYTE *)(a2 + 16) &= ~1u;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    return;
  }
  v5 = (uint64_t *)*(unsigned __int16 *)(v3 + 46);
  if (v5 == (uint64_t *)40)
  {
    v6 = a1[1];
    if (v4 > 0xFFFFFFD7 || v4 + 40 > v6)
    {
      v14 = *(unsigned int *)(*a1 + 32);
      v15 = "section header table goes past the end of the file: e_shoff = 0x";
      v16 = &v14;
      v8 = 3587;
    }
    else
    {
      v12 = v3 + v4;
      v13 = *(unsigned __int16 *)(v3 + 48);
      if (!v13)
        v13 = *(_DWORD *)(v12 + 20);
      if (v4 + 40 * (unint64_t)v13 <= v6)
      {
        *(_BYTE *)(a2 + 16) &= ~1u;
        *(_QWORD *)a2 = v12;
        *(_QWORD *)(a2 + 8) = v13;
        return;
      }
      v15 = "section table goes past the end of file";
      v8 = 259;
    }
  }
  else
  {
    v15 = "invalid e_shentsize in ELF header: ";
    v16 = v5;
    v8 = 2307;
  }
  v17 = v8;
  v9 = operator new();
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v11 = qword_1EF8F7238[0];
  *(_QWORD *)v9 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)&v15, (_QWORD *)(v9 + 8));
  *(_QWORD *)(v9 + 32) = 3;
  *(_QWORD *)(v9 + 40) = v11;
  *(_BYTE *)(v9 + 48) = 1;
  *(_BYTE *)(a2 + 16) |= 1u;
  *(_QWORD *)a2 = v9;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getStringTableForSymtab(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v6;
  uint64_t v8;
  unint64_t v10;
  const char *v12;
  const char *v13;
  void (*v14)(llvm::Twine *@<X0>, uint64_t *@<X8>);
  const char *v15;
  char v16;
  __int16 v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v6 = *(_DWORD *)(a2 + 4);
  if (v6 == 2 || v6 == 11)
  {
    sub_1C62C97E8(a3, a4, *(_DWORD *)(a2 + 24), (uint64_t)&v15);
    v12 = v15;
    if ((v16 & 1) != 0)
    {
      *(_BYTE *)(a5 + 16) |= 1u;
      *(_QWORD *)a5 = v12;
    }
    else
    {
      v14 = sub_1C59A5848;
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getStringTable(a1, (uint64_t)v15, (void (*)(std::string *__return_ptr, uint64_t, _QWORD *))sub_1C62CD258, (uint64_t)&v14, a5);
      if ((v16 & 1) != 0)
      {
        v13 = v15;
        v15 = 0;
        if (v13)
          (*(void (**)(const char *))(*(_QWORD *)v13 + 8))(v13);
      }
    }
  }
  else
  {
    v15 = "invalid sh_type for symbol table, expected SHT_SYMTAB or SHT_DYNSYM";
    v17 = 259;
    v8 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v10 = qword_1EF8F7238[0];
    *(_QWORD *)v8 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)&v15, (_QWORD *)(v8 + 8));
    *(_QWORD *)(v8 + 32) = 3;
    *(_QWORD *)(v8 + 40) = v10;
    *(_BYTE *)(v8 + 48) = 1;
    *(_BYTE *)(a5 + 16) |= 1u;
    *(_QWORD *)a5 = v8;
  }
}

{
  __ZNK4llvm6object7ELFFileINS0_7ELFTypeILNS_7support10endiannessE1ELb0EEEE23getStringTableForSymtabERKNS0_13Elf_Shdr_ImplIS5_EENS_8ArrayRefIS8_EE(a1, a2, a3, a4, a5);
}

void sub_1C59A5848(llvm::Twine *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4;
  unint64_t v6;

  v4 = operator new();
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v6 = qword_1EF8F7238[0];
  *(_QWORD *)v4 = off_1E81A0C88;
  llvm::Twine::str(a1, (_QWORD *)(v4 + 8));
  *(_QWORD *)(v4 + 32) = 3;
  *(_QWORD *)(v4 + 40) = v6;
  *(_BYTE *)(v4 + 48) = 1;
  *a2 = v4;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::relrs(_QWORD *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  std::string::size_type v6;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  std::string::size_type v10;
  std::string *v11;
  const char *v12;
  std::string *v13;
  std::string::size_type v14;
  std::string *v15;
  std::string *v16;
  const char *v17;
  uint64_t v18;
  unint64_t v20;
  void *v21;
  std::string::size_type v22;
  std::string *v23;
  std::string::size_type v24;
  std::string *v25;
  std::string::size_type v26;
  uint64_t v27;
  unint64_t v29;
  std::string *v30;
  std::string::size_type v31;
  std::string *v32;
  std::string::size_type v33;
  uint64_t v34;
  unint64_t v36;
  std::string::size_type v37;
  uint64_t v38;
  std::string::size_type v39;
  std::string::size_type v40;
  std::string v41;
  std::string v42;
  std::string v43;
  __int16 v44;
  std::string v45;
  __int16 v46;
  std::string v47;
  void *__p[2];
  std::string *v49;
  __int16 v50;
  _QWORD v51[2];
  std::string *v52;
  __int16 v53;
  _QWORD v54[2];
  std::string *v55;
  __int16 v56;
  _QWORD v57[2];
  const char *v58;
  __int16 v59;

  if (a2[9] == 4)
  {
    v6 = a2[5];
    if ((v6 & 3) != 0)
    {
      sub_1C59A4F58(a1, (uint64_t)a2, (char *)&v47);
      v7 = std::string::insert(&v47, 0, "section ");
      v8 = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v43.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v43.__r_.__value_.__r.__words[2] = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      v9 = std::string::append(&v43, " has an invalid sh_size (");
      v10 = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v45.__r_.__value_.__l.__data_ = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v45.__r_.__value_.__r.__words[2] = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      __p[0] = &v45;
      v49 = (std::string *)v6;
      v50 = 2052;
      v51[0] = __p;
      v52 = (std::string *)") which is not a multiple of its sh_entsize (";
      v53 = 770;
      v11 = (std::string *)a2[9];
      v54[0] = v51;
      v55 = v11;
      v56 = 2050;
      v12 = ")";
    }
    else
    {
      v22 = a2[4];
      if (!__CFADD__((_DWORD)v22, (_DWORD)v6))
      {
        if (a1[1] >= (unint64_t)(v6 + v22))
        {
          v37 = *a1 + v22;
          *(_BYTE *)(a3 + 16) &= ~1u;
          *(_QWORD *)a3 = v37;
          *(_QWORD *)(a3 + 8) = v6 >> 2;
          return;
        }
        sub_1C59A4F58(a1, (uint64_t)a2, (char *)&v41);
        v30 = std::string::insert(&v41, 0, "section ");
        v31 = v30->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v42.__r_.__value_.__l.__data_ = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        v42.__r_.__value_.__r.__words[2] = v31;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        v32 = std::string::append(&v42, " has a sh_offset (0x");
        v33 = v32->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v47.__r_.__value_.__l.__data_ = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
        v47.__r_.__value_.__r.__words[2] = v33;
        v32->__r_.__value_.__l.__size_ = 0;
        v32->__r_.__value_.__r.__words[2] = 0;
        v32->__r_.__value_.__r.__words[0] = 0;
        v39 = v6;
        v40 = v22;
        v43.__r_.__value_.__r.__words[0] = (std::string::size_type)&v47;
        v43.__r_.__value_.__r.__words[2] = (std::string::size_type)&v40;
        v44 = 3588;
        v45.__r_.__value_.__r.__words[0] = (std::string::size_type)&v43;
        v45.__r_.__value_.__r.__words[2] = (std::string::size_type)") + sh_size (0x";
        v46 = 770;
        __p[0] = &v45;
        v49 = (std::string *)&v39;
        v50 = 3586;
        v51[0] = __p;
        v52 = (std::string *)") that is greater than the file size (0x";
        v53 = 770;
        v38 = a1[1];
        v54[0] = v51;
        v55 = (std::string *)&v38;
        v56 = 3586;
        v57[0] = v54;
        v58 = ")";
        v59 = 770;
        v34 = operator new();
        if (!atomic_load(qword_1EF8F7238))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
        v36 = qword_1EF8F7238[0];
        *(_QWORD *)v34 = off_1E81A0C88;
        llvm::Twine::str((llvm::Twine *)v57, (_QWORD *)(v34 + 8));
        *(_QWORD *)(v34 + 32) = 3;
        *(_QWORD *)(v34 + 40) = v36;
        *(_BYTE *)(v34 + 48) = 1;
        *(_BYTE *)(a3 + 16) |= 1u;
        *(_QWORD *)a3 = v34;
        if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v47.__r_.__value_.__l.__data_);
        if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v42.__r_.__value_.__l.__data_);
        if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
        {
          v21 = (void *)v41.__r_.__value_.__r.__words[0];
          goto LABEL_23;
        }
        return;
      }
      sub_1C59A4F58(a1, (uint64_t)a2, (char *)&v47);
      v23 = std::string::insert(&v47, 0, "section ");
      v24 = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v43.__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v43.__r_.__value_.__r.__words[2] = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      v25 = std::string::append(&v43, " has a sh_offset (0x");
      v26 = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v45.__r_.__value_.__l.__data_ = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v45.__r_.__value_.__r.__words[2] = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      v42.__r_.__value_.__r.__words[0] = v22;
      __p[0] = &v45;
      v49 = &v42;
      v50 = 3588;
      v51[0] = __p;
      v52 = (std::string *)") + sh_size (0x";
      v53 = 770;
      v41.__r_.__value_.__r.__words[0] = v6;
      v54[0] = v51;
      v55 = &v41;
      v56 = 3586;
      v12 = ") that cannot be represented";
    }
    v57[0] = v54;
    v58 = v12;
    v59 = 770;
    v27 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v29 = qword_1EF8F7238[0];
    *(_QWORD *)v27 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v57, (_QWORD *)(v27 + 8));
    *(_QWORD *)(v27 + 32) = 3;
    *(_QWORD *)(v27 + 40) = v29;
    *(_BYTE *)(v27 + 48) = 1;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v27;
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__r_.__value_.__l.__data_);
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v43.__r_.__value_.__l.__data_);
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    {
      v21 = (void *)v47.__r_.__value_.__r.__words[0];
      goto LABEL_23;
    }
  }
  else
  {
    sub_1C59A4F58(a1, (uint64_t)a2, (char *)&v43);
    v13 = std::string::insert(&v43, 0, "section ");
    v14 = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__r.__words[2] = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    v15 = std::string::append(&v45, " has invalid sh_entsize: expected ");
    v16 = (std::string *)v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v49 = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    v47.__r_.__value_.__r.__words[0] = 4;
    v51[0] = __p;
    v52 = &v47;
    v53 = 2564;
    v54[0] = v51;
    v55 = (std::string *)", but got ";
    v56 = 770;
    v17 = (const char *)a2[9];
    v57[0] = v54;
    v58 = v17;
    v59 = 2050;
    v18 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v20 = qword_1EF8F7238[0];
    *(_QWORD *)v18 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v57, (_QWORD *)(v18 + 8));
    *(_QWORD *)(v18 + 32) = 3;
    *(_QWORD *)(v18 + 40) = v20;
    *(_BYTE *)(v18 + 48) = 1;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v18;
    if (SHIBYTE(v49) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__r_.__value_.__l.__data_);
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    {
      v21 = (void *)v43.__r_.__value_.__r.__words[0];
LABEL_23:
      operator delete(v21);
    }
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getDynSymtabSize(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  _DWORD *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t *v9;
  int v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t *v14;
  unsigned int *v15;
  unsigned int *v16;
  int v17;
  unsigned int v18;
  void (*v19)(llvm::Twine *@<X0>, uint64_t *@<X8>);
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _BYTE *v28;
  unint64_t v29;
  void (*v31)(llvm::Twine *@<X0>, uint64_t *@<X8>);
  unsigned int v32;
  uint64_t v34;
  unint64_t v35;
  uint64_t v36;
  void **v37;
  char v38;
  uint64_t v39;
  uint64_t *v40;
  _BYTE *v41[4];
  __int16 v42;
  uint64_t v43;
  void *__p[2];
  char v45;
  void **v46;
  uint64_t v47[2];
  void (*v48)(llvm::Twine *@<X0>, uint64_t *@<X8>);
  char v49;
  const char *v50;
  __int16 v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  __int16 v55;
  uint64_t *v56;
  uint64_t v57;
  const char *v58;
  __int16 v59;
  uint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::sections(a1, (uint64_t)&v60);
  v4 = v60;
  if ((v62 & 1) != 0)
  {
    v60 = 0;
    v7 = *(_BYTE *)(a2 + 8) | 1;
    goto LABEL_8;
  }
  if (v61)
  {
    v5 = (_DWORD *)(v60 + 36);
    v6 = 40 * v61;
    while (*(v5 - 8) != 11)
    {
      v5 += 10;
      v6 -= 40;
      if (!v6)
      {
        *(_BYTE *)(a2 + 8) &= ~1u;
        *(_QWORD *)a2 = 0;
        goto LABEL_9;
      }
    }
    v32 = *(v5 - 4);
    v4 = v32 / *v5;
    if (v32 % *v5)
    {
      if (!atomic_load(qword_1EF8F7238))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
      v34 = qword_1EF8F7238[0];
      v35 = *(v5 - 4);
      v41[0] = "SHT_DYNSYM section has sh_size (";
      v41[2] = (_BYTE *)v35;
      v42 = 2051;
      v48 = (void (*)(llvm::Twine *@<X0>, uint64_t *@<X8>))v41;
      v50 = ") % sh_entsize (";
      v51 = 770;
      v36 = *v5;
      v52 = (uint64_t)&v48;
      v54 = v36;
      v55 = 2050;
      v56 = &v52;
      v58 = ") that is not 0";
      v59 = 770;
      llvm::Twine::str((llvm::Twine *)&v56, __p);
      if (v45 >= 0)
        v37 = __p;
      else
        v37 = (void **)__p[0];
      v47[0] = 3;
      v47[1] = v34;
      v46 = v37;
      sub_1C5DF1730((_BYTE **)&v46, v47, &v43);
      if (v45 < 0)
        operator delete(__p[0]);
      *(_BYTE *)(a2 + 8) |= 1u;
      *(_QWORD *)a2 = v43;
      v43 = 0;
      goto LABEL_9;
    }
    v7 = *(_BYTE *)(a2 + 8) & 0xFE;
LABEL_8:
    *(_BYTE *)(a2 + 8) = v7;
    *(_QWORD *)a2 = v4;
    goto LABEL_9;
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::dynamicEntries(a1, (uint64_t)&v56);
  v9 = v56;
  if ((v58 & 1) != 0)
  {
    v56 = 0;
    *(_BYTE *)(a2 + 8) |= 1u;
    *(_QWORD *)a2 = v9;
    goto LABEL_61;
  }
  if (!v57)
    goto LABEL_60;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = &v56[v57];
  do
  {
    v15 = (unsigned int *)v9 + 1;
    while (1)
    {
      v16 = v15 - 1;
      v17 = *(v15 - 1);
      if (v17 != 1879047925)
        break;
      v18 = *v15;
      v15 += 2;
      v13 = v18;
      v12 = 1;
      if (v16 + 2 == (unsigned int *)v14)
        goto LABEL_24;
    }
    if (v17 == 4)
    {
      v11 = *v15;
      v10 = 1;
    }
    v9 = (uint64_t *)(v15 + 1);
  }
  while (v9 != v14);
  if (!v12)
  {
    if (v10)
    {
      v48 = sub_1C59A5848;
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::toMappedAddr(a1, (void (*)(_QWORD *__return_ptr, uint64_t, _QWORD *))sub_1C62CD258, v11, (uint64_t)&v48, (uint64_t)&v52);
      v39 = v52;
      if ((v53 & 1) != 0)
      {
        *(_BYTE *)(a2 + 8) |= 1u;
      }
      else
      {
        *(_BYTE *)(a2 + 8) &= ~1u;
        v39 = *(unsigned int *)(v39 + 4);
      }
      *(_QWORD *)a2 = v39;
      goto LABEL_61;
    }
LABEL_60:
    *(_BYTE *)(a2 + 8) &= ~1u;
    *(_QWORD *)a2 = 0;
    goto LABEL_61;
  }
LABEL_24:
  v52 = (uint64_t)sub_1C59A5848;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::toMappedAddr(a1, (void (*)(_QWORD *__return_ptr, uint64_t, _QWORD *))sub_1C62CD258, v13, (uint64_t)&v52, (uint64_t)&v48);
  v19 = v48;
  if ((v49 & 1) != 0)
  {
    v48 = 0;
    v38 = *(_BYTE *)(a2 + 8) | 1;
LABEL_56:
    *(_BYTE *)(a2 + 8) = v38;
    *(_QWORD *)a2 = v19;
    goto LABEL_61;
  }
  v20 = *(unsigned int *)v48;
  if (!(_DWORD)v20)
  {
    v19 = (void (*)(llvm::Twine *@<X0>, uint64_t *@<X8>))(*((_DWORD *)v48 + 1) + 1);
LABEL_55:
    v38 = *(_BYTE *)(a2 + 8) & 0xFE;
    goto LABEL_56;
  }
  v21 = 0;
  v22 = *a1 + a1[1];
  v23 = 4 * *((unsigned int *)v48 + 2) + 16;
  v24 = (uint64_t)v48 + 4 * v20 + v23;
  v25 = 4 * v20;
  do
  {
    v26 = v21;
    v27 = *(unsigned int *)((char *)v48 + v23);
    if (v21 <= v27)
      v21 = *(unsigned int *)((char *)v48 + v23);
    v23 += 4;
    v25 -= 4;
  }
  while (v25);
  v28 = (_BYTE *)(v24 + 4 * (v21 - *((_DWORD *)v48 + 1)));
  if ((unint64_t)v28 < v22)
  {
    if (v26 <= v27)
      v29 = v27;
    else
      v29 = v26;
    v19 = (void (*)(llvm::Twine *@<X0>, uint64_t *@<X8>))(v29 + 1);
    while ((*v28 & 1) == 0)
    {
      v28 += 4;
      v19 = (void (*)(llvm::Twine *@<X0>, uint64_t *@<X8>))((char *)v19 + 1);
      if ((unint64_t)v28 >= v22)
        goto LABEL_37;
    }
    goto LABEL_55;
  }
LABEL_37:
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v52 = 3;
  v53 = qword_1EF8F7238[0];
  v41[0] = "no terminator found for GNU hash section before buffer end";
  sub_1C5DF1730(v41, &v52, (_QWORD *)a2);
  *(_BYTE *)(a2 + 8) |= 1u;
  if ((v49 & 1) != 0)
  {
    v31 = v48;
    v48 = 0;
    if (v31)
      (*(void (**)(void (*)(llvm::Twine *@<X0>, uint64_t *@<X8>)))(*(_QWORD *)v31 + 8))(v31);
  }
LABEL_61:
  if ((v58 & 1) != 0)
  {
    v40 = v56;
    v56 = 0;
    if (v40)
      (*(void (**)(uint64_t *))(*v40 + 8))(v40);
  }
LABEL_9:
  if ((v62 & 1) != 0)
  {
    v8 = v60;
    v60 = 0;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::dynamicEntries(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v4;
  uint64_t v5;
  std::string::size_type v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  const char *v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  unint64_t v16;
  std::string::size_type v17;
  std::string *v18;
  std::string::size_type v19;
  std::string *v20;
  std::string::size_type v21;
  std::string *v22;
  const char *v23;
  std::string *v24;
  std::string::size_type v25;
  std::string *v26;
  std::string *v27;
  const char *v28;
  uint64_t v29;
  unint64_t v31;
  void *v32;
  std::string::size_type v33;
  std::string *v34;
  std::string::size_type v35;
  std::string *v36;
  std::string::size_type v37;
  unint64_t v39;
  std::string *v40;
  std::string::size_type v41;
  std::string *v42;
  std::string::size_type v43;
  unint64_t v45;
  _DWORD *v46;
  uint64_t v47;
  std::string::size_type v48;
  std::string::size_type v49;
  std::string v50;
  std::string v51;
  std::string v52;
  __int16 v53;
  std::string v54;
  __int16 v55;
  std::string v56;
  void *__p[2];
  std::string *v58;
  __int16 v59;
  _QWORD v60[2];
  std::string *v61;
  __int16 v62;
  _QWORD v63[2];
  std::string *v64;
  __int16 v65;
  _QWORD v66[2];
  const char *v67;
  __int16 v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  _DWORD *v72;
  uint64_t v73;
  char v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::program_headers(a1, (uint64_t)&v72);
  v4 = v72;
  if ((v74 & 1) != 0)
  {
    v72 = 0;
    *(_BYTE *)(a2 + 16) |= 1u;
    *(_QWORD *)a2 = v4;
    goto LABEL_63;
  }
  if (v73)
  {
    v5 = 32 * v73;
    while (*v4 != 2)
    {
      v4 += 8;
      v5 -= 32;
      if (!v5)
        goto LABEL_6;
    }
    v6 = *a1 + v4[1];
    v13 = v4[4];
    if (v13 > 7)
    {
      v10 = v13 >> 3;
      goto LABEL_21;
    }
  }
  else
  {
LABEL_6:
    v6 = 0;
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::sections(a1, (uint64_t)&v69);
  v7 = v69;
  if ((v71 & 1) == 0)
  {
    if (v70)
    {
      v8 = 0;
      while (1)
      {
        v9 = v69 + v8;
        if (*(_DWORD *)(v69 + v8 + 4) == 6)
          break;
        v8 += 40;
        if (40 * v70 == v8)
          goto LABEL_12;
      }
      if (*(_DWORD *)(v9 + 36) != 8)
      {
        sub_1C59A4F58(a1, v9, (char *)&v52);
        v24 = std::string::insert(&v52, 0, "section ");
        v25 = v24->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v54.__r_.__value_.__l.__data_ = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
        v54.__r_.__value_.__r.__words[2] = v25;
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        v26 = std::string::append(&v54, " has invalid sh_entsize: expected ");
        v27 = (std::string *)v26->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
        v58 = v27;
        v26->__r_.__value_.__l.__size_ = 0;
        v26->__r_.__value_.__r.__words[2] = 0;
        v26->__r_.__value_.__r.__words[0] = 0;
        v56.__r_.__value_.__r.__words[0] = 8;
        v60[0] = __p;
        v61 = &v56;
        v62 = 2564;
        v63[0] = v60;
        v64 = (std::string *)", but got ";
        v65 = 770;
        v28 = (const char *)*(unsigned int *)(v9 + 36);
        v66[0] = v63;
        v67 = v28;
        v68 = 2050;
        v29 = operator new();
        if (!atomic_load(qword_1EF8F7238))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
        v31 = qword_1EF8F7238[0];
        *(_QWORD *)v29 = off_1E81A0C88;
        llvm::Twine::str((llvm::Twine *)v66, (_QWORD *)(v29 + 8));
        *(_QWORD *)(v29 + 32) = 3;
        *(_QWORD *)(v29 + 40) = v31;
        *(_BYTE *)(v29 + 48) = 1;
        if (SHIBYTE(v58) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v54.__r_.__value_.__l.__data_);
        if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
        {
          v32 = (void *)v52.__r_.__value_.__r.__words[0];
LABEL_49:
          operator delete(v32);
        }
LABEL_50:
        *(_BYTE *)(a2 + 16) |= 1u;
        *(_QWORD *)a2 = v29;
        if ((v71 & 1) == 0)
          goto LABEL_63;
        goto LABEL_17;
      }
      v17 = *(unsigned int *)(v69 + v8 + 20);
      if ((v17 & 7) != 0)
      {
        sub_1C59A4F58(a1, v9, (char *)&v56);
        v18 = std::string::insert(&v56, 0, "section ");
        v19 = v18->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v52.__r_.__value_.__l.__data_ = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
        v52.__r_.__value_.__r.__words[2] = v19;
        v18->__r_.__value_.__l.__size_ = 0;
        v18->__r_.__value_.__r.__words[2] = 0;
        v18->__r_.__value_.__r.__words[0] = 0;
        v20 = std::string::append(&v52, " has an invalid sh_size (");
        v21 = v20->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v54.__r_.__value_.__l.__data_ = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
        v54.__r_.__value_.__r.__words[2] = v21;
        v20->__r_.__value_.__l.__size_ = 0;
        v20->__r_.__value_.__r.__words[2] = 0;
        v20->__r_.__value_.__r.__words[0] = 0;
        __p[0] = &v54;
        v58 = (std::string *)v17;
        v59 = 2052;
        v60[0] = __p;
        v61 = (std::string *)") which is not a multiple of its sh_entsize (";
        v62 = 770;
        v22 = (std::string *)*(unsigned int *)(v9 + 36);
        v63[0] = v60;
        v64 = v22;
        v65 = 2050;
        v23 = ")";
        goto LABEL_41;
      }
      v33 = *(unsigned int *)(v69 + v8 + 16);
      if (__CFADD__((_DWORD)v33, (_DWORD)v17))
      {
        sub_1C59A4F58(a1, v9, (char *)&v56);
        v34 = std::string::insert(&v56, 0, "section ");
        v35 = v34->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v52.__r_.__value_.__l.__data_ = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
        v52.__r_.__value_.__r.__words[2] = v35;
        v34->__r_.__value_.__l.__size_ = 0;
        v34->__r_.__value_.__r.__words[2] = 0;
        v34->__r_.__value_.__r.__words[0] = 0;
        v36 = std::string::append(&v52, " has a sh_offset (0x");
        v37 = v36->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v54.__r_.__value_.__l.__data_ = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
        v54.__r_.__value_.__r.__words[2] = v37;
        v36->__r_.__value_.__l.__size_ = 0;
        v36->__r_.__value_.__r.__words[2] = 0;
        v36->__r_.__value_.__r.__words[0] = 0;
        v51.__r_.__value_.__r.__words[0] = v33;
        __p[0] = &v54;
        v58 = &v51;
        v59 = 3588;
        v60[0] = __p;
        v61 = (std::string *)") + sh_size (0x";
        v62 = 770;
        v50.__r_.__value_.__r.__words[0] = v17;
        v63[0] = v60;
        v64 = &v50;
        v65 = 3586;
        v23 = ") that cannot be represented";
LABEL_41:
        v66[0] = v63;
        v67 = v23;
        v68 = 770;
        v29 = operator new();
        if (!atomic_load(qword_1EF8F7238))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
        v39 = qword_1EF8F7238[0];
        *(_QWORD *)v29 = off_1E81A0C88;
        llvm::Twine::str((llvm::Twine *)v66, (_QWORD *)(v29 + 8));
        *(_QWORD *)(v29 + 32) = 3;
        *(_QWORD *)(v29 + 40) = v39;
        *(_BYTE *)(v29 + 48) = 1;
        if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v54.__r_.__value_.__l.__data_);
        if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v52.__r_.__value_.__l.__data_);
        if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
        {
          v32 = (void *)v56.__r_.__value_.__r.__words[0];
          goto LABEL_49;
        }
        goto LABEL_50;
      }
      if (a1[1] < (unint64_t)(v17 + v33))
      {
        sub_1C59A4F58(a1, v9, (char *)&v50);
        v40 = std::string::insert(&v50, 0, "section ");
        v41 = v40->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v51.__r_.__value_.__l.__data_ = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
        v51.__r_.__value_.__r.__words[2] = v41;
        v40->__r_.__value_.__l.__size_ = 0;
        v40->__r_.__value_.__r.__words[2] = 0;
        v40->__r_.__value_.__r.__words[0] = 0;
        v42 = std::string::append(&v51, " has a sh_offset (0x");
        v43 = v42->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v56.__r_.__value_.__l.__data_ = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
        v56.__r_.__value_.__r.__words[2] = v43;
        v42->__r_.__value_.__l.__size_ = 0;
        v42->__r_.__value_.__r.__words[2] = 0;
        v42->__r_.__value_.__r.__words[0] = 0;
        v48 = v17;
        v49 = v33;
        v52.__r_.__value_.__r.__words[0] = (std::string::size_type)&v56;
        v52.__r_.__value_.__r.__words[2] = (std::string::size_type)&v49;
        v53 = 3588;
        v54.__r_.__value_.__r.__words[0] = (std::string::size_type)&v52;
        v54.__r_.__value_.__r.__words[2] = (std::string::size_type)") + sh_size (0x";
        v55 = 770;
        __p[0] = &v54;
        v58 = (std::string *)&v48;
        v59 = 3586;
        v60[0] = __p;
        v61 = (std::string *)") that is greater than the file size (0x";
        v62 = 770;
        v47 = a1[1];
        v63[0] = v60;
        v64 = (std::string *)&v47;
        v65 = 3586;
        v66[0] = v63;
        v67 = ")";
        v68 = 770;
        v29 = operator new();
        if (!atomic_load(qword_1EF8F7238))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
        v45 = qword_1EF8F7238[0];
        *(_QWORD *)v29 = off_1E81A0C88;
        llvm::Twine::str((llvm::Twine *)v66, (_QWORD *)(v29 + 8));
        *(_QWORD *)(v29 + 32) = 3;
        *(_QWORD *)(v29 + 40) = v45;
        *(_BYTE *)(v29 + 48) = 1;
        if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v56.__r_.__value_.__l.__data_);
        if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v51.__r_.__value_.__l.__data_);
        if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
        {
          v32 = (void *)v50.__r_.__value_.__r.__words[0];
          goto LABEL_49;
        }
        goto LABEL_50;
      }
      v6 = *a1 + v33;
      v10 = v17 >> 3;
      if (!v6)
      {
LABEL_62:
        *(_BYTE *)(a2 + 16) &= ~1u;
        *(_QWORD *)a2 = 0;
        *(_QWORD *)(a2 + 8) = 0;
        goto LABEL_63;
      }
    }
    else
    {
LABEL_12:
      v10 = 0;
      if (!v6)
        goto LABEL_62;
    }
    if (!v10)
    {
      v11 = "invalid empty dynamic section";
LABEL_23:
      v66[0] = v11;
      v68 = 259;
      v14 = operator new();
      if (!atomic_load(qword_1EF8F7238))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
      v16 = qword_1EF8F7238[0];
      *(_QWORD *)v14 = off_1E81A0C88;
      llvm::Twine::str((llvm::Twine *)v66, (_QWORD *)(v14 + 8));
      *(_QWORD *)(v14 + 32) = 3;
      *(_QWORD *)(v14 + 40) = v16;
      *(_BYTE *)(v14 + 48) = 1;
      *(_BYTE *)(a2 + 16) |= 1u;
      *(_QWORD *)a2 = v14;
      goto LABEL_63;
    }
LABEL_21:
    if (!*(_DWORD *)(v6 + 8 * v10 - 8))
    {
      *(_BYTE *)(a2 + 16) &= ~1u;
      *(_QWORD *)a2 = v6;
      *(_QWORD *)(a2 + 8) = v10;
      goto LABEL_63;
    }
    v11 = "dynamic sections must be DT_NULL terminated";
    goto LABEL_23;
  }
  v69 = 0;
  *(_BYTE *)(a2 + 16) |= 1u;
  *(_QWORD *)a2 = v7;
LABEL_17:
  v12 = v69;
  v69 = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
LABEL_63:
  if ((v74 & 1) != 0)
  {
    v46 = v72;
    v72 = 0;
    if (v46)
      (*(void (**)(_DWORD *))(*(_QWORD *)v46 + 8))(v46);
  }
}

{
  __ZNK4llvm6object7ELFFileINS0_7ELFTypeILNS_7support10endiannessE1ELb0EEEE14dynamicEntriesEv(a1, a2);
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::toMappedAddr(_QWORD *a1@<X0>, unint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr, uint64_t, _QWORD *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unsigned int v9;
  _DWORD *v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  char *v20;
  unint64_t v21;
  const std::nothrow_t *v22;
  unint64_t v23;
  uint64_t *v24;
  BOOL v25;
  uint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t *v30;
  _QWORD *v31;
  uint64_t v32;
  unsigned int *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v41;
  _DWORD *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[4];
  __int16 v47;
  _QWORD v48[4];
  __int16 v49;
  _QWORD v50[4];
  __int16 v51;
  _QWORD v52[4];
  __int16 v53;
  _QWORD v54[4];
  __int16 v55;
  _QWORD v56[4];
  __int16 v57;
  _QWORD v58[4];
  __int16 v59;
  _QWORD v60[2];
  unint64_t *v61;
  __int16 v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  _BYTE v66[32];
  _DWORD *v67;
  uint64_t v68;
  char v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v63 = a2;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::program_headers(a1, (uint64_t)&v67);
  if ((v69 & 1) != 0)
  {
    v13 = v67;
    *(_BYTE *)(a5 + 8) |= 1u;
    *(_QWORD *)a5 = v13;
  }
  else
  {
    v64 = v66;
    v65 = 0x400000000;
    if (!v68)
      goto LABEL_35;
    v9 = 0;
    v10 = v67;
    v11 = 32 * v68;
    v12 = v67;
    do
    {
      if (*v12 == 1)
      {
        if (v9 >= HIDWORD(v65))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, (uint64_t)v66, v9 + 1, 8);
          v9 = v65;
        }
        *(_QWORD *)&v64[8 * v9] = v10;
        v9 = v65 + 1;
        LODWORD(v65) = v65 + 1;
      }
      v12 += 8;
      v10 += 8;
      v11 -= 32;
    }
    while (v11);
    if (!v9)
      goto LABEL_35;
    v14 = 0;
    v15 = v64;
    do
    {
      if (8 * v9 - 8 == v14)
        goto LABEL_25;
      v16 = *(_DWORD *)(*(_QWORD *)&v64[v14 + 8] + 8);
      v17 = *(_DWORD *)(*(_QWORD *)&v64[v14] + 8);
      v14 += 8;
    }
    while (v16 >= v17);
    v60[0] = "loadable segments are unsorted by virtual address";
    v62 = 259;
    a3(v58, a4, v60);
    v18 = v58[0];
    if (v58[0])
    {
      v19 = *(_BYTE *)(a5 + 8) | 1;
LABEL_17:
      *(_BYTE *)(a5 + 8) = v19;
      *(_QWORD *)a5 = v18;
      goto LABEL_39;
    }
    v20 = v64;
    v21 = v65;
    if (v65 < 0x81)
    {
LABEL_22:
      sub_1C59C632C(v20, &v20[8 * v21], v21, 0, 0);
    }
    else
    {
      v22 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
      v23 = v65;
      while (1)
      {
        v24 = (uint64_t *)operator new(8 * v23, v22);
        if (v24)
          break;
        v25 = v23 > 1;
        v23 >>= 1;
        if (!v25)
          goto LABEL_22;
      }
      v26 = v24;
      sub_1C59C632C(v20, &v20[8 * v21], v21, v24, v23);
      operator delete(v26);
    }
    v15 = v64;
    v9 = v65;
    if (!v9)
      goto LABEL_35;
LABEL_25:
    v27 = v9;
    v28 = v15;
    do
    {
      v29 = v27 >> 1;
      v30 = &v28[v27 >> 1];
      v32 = *v30;
      v31 = v30 + 1;
      v27 += ~(v27 >> 1);
      if (v63 < *(unsigned int *)(v32 + 8))
        v27 = v29;
      else
        v28 = v31;
    }
    while (v27);
    if (v28 != v15 && (v33 = (unsigned int *)*(v28 - 1), v34 = v63 - v33[2], v35 = v33[4], v34 < v35))
    {
      v36 = v33[1];
      v37 = v34 + v36;
      v38 = a1[1];
      if (v37 < v38)
      {
        v18 = *a1 + v37;
        v19 = *(_BYTE *)(a5 + 8) & 0xFE;
        goto LABEL_17;
      }
      v46[2] = &v63;
      v47 = 3587;
      v48[0] = v46;
      v48[2] = " to the segment with index ";
      v49 = 770;
      v45 = (((char *)v33 - (char *)v67) >> 5) + 1;
      v46[0] = "can't map virtual address 0x";
      v50[0] = v48;
      v50[2] = &v45;
      v51 = 2818;
      v52[0] = v50;
      v52[2] = ": the segment ends at 0x";
      v53 = 770;
      v43 = v38;
      v44 = (v35 + v36);
      v54[0] = v52;
      v54[2] = &v44;
      v55 = 3586;
      v56[0] = v54;
      v56[2] = ", which is greater than the file size (0x";
      v57 = 770;
      v58[0] = v56;
      v58[2] = &v43;
      v59 = 3586;
      v60[0] = v58;
      v61 = (unint64_t *)")";
      v62 = 770;
    }
    else
    {
LABEL_35:
      v60[0] = "virtual address is not in any segment: 0x";
      v61 = &v63;
      v62 = 3587;
    }
    v39 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v41 = qword_1EF8F7238[0];
    *(_QWORD *)v39 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v60, (_QWORD *)(v39 + 8));
    *(_QWORD *)(v39 + 32) = 3;
    *(_QWORD *)(v39 + 40) = v41;
    *(_BYTE *)(v39 + 48) = 1;
    *(_BYTE *)(a5 + 8) |= 1u;
    *(_QWORD *)a5 = v39;
LABEL_39:
    if (v64 != v66)
      free(v64);
    if ((v69 & 1) != 0)
    {
      v42 = v67;
      v67 = 0;
      if (v42)
        (*(void (**)(_DWORD *))(*(_QWORD *)v42 + 8))(v42);
    }
  }
}

const char *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getRelocationTypeName(uint64_t a1, unsigned int a2)
{
  return llvm::object::getELFRelocationTypeName((llvm::object *)*(unsigned __int16 *)(*(_QWORD *)a1 + 18), a2);
}

BOOL llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::isMipsELF64(uint64_t a1)
{
  return *(_WORD *)(*(_QWORD *)a1 + 18) == 8 && *(_BYTE *)(*(_QWORD *)a1 + 4) == 2;
}

uint64_t llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getRelativeRelocationType(uint64_t a1)
{
  return llvm::object::getELFRelativeRelocationType((llvm::object *)*(unsigned __int16 *)(*(_QWORD *)a1 + 18));
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getDynamicTagAsString(int a1@<W1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  const char *v4;
  const char *v5;
  const char *v6;
  int v7;
  const char *v8;
  int v9;
  __int16 v10;
  const char *v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  const char *v15;
  const char *v16;
  uint64_t v17;
  BOOL v18;
  std::string *v19;
  std::string::size_type v20;
  int v21;
  int v22;
  unsigned __int16 v23;
  int v24;
  int v25;
  __int16 v26;
  int v27;
  const char *v28;
  const char *v29;
  const char *v30;
  char *v31;
  std::string v32;
  _BYTE v33[17];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (a1 > 163)
  {
    switch(a1)
    {
      case 164:
        switch(a2)
        {
          case 1879048194:
            *(_BYTE *)(a3 + 23) = 11;
            *(_DWORD *)(a3 + 7) = 1414287455;
            v4 = "HEXAGON_PLT";
            goto LABEL_46;
          case 1879048193:
            *(_BYTE *)(a3 + 23) = 11;
            *(_DWORD *)(a3 + 7) = 1380275807;
            v4 = "HEXAGON_VER";
            goto LABEL_46;
          case 1879048192:
            v8 = "HEXAGON_SYMSZ";
LABEL_23:
            *(_BYTE *)(a3 + 23) = 13;
            *(_QWORD *)a3 = *(_QWORD *)v8;
            *(_QWORD *)(a3 + 5) = *(_QWORD *)(v8 + 5);
            *(_BYTE *)(a3 + 13) = 0;
            return;
        }
        break;
      case 243:
        if (a2 == 1879048193)
        {
          *(_BYTE *)(a3 + 23) = 16;
          v6 = "RISCV_VARIANT_CC";
LABEL_26:
          *(_OWORD *)a3 = *(_OWORD *)v6;
          *(_BYTE *)(a3 + 16) = 0;
          return;
        }
        break;
      case 183:
        switch(a2)
        {
          case 1879048197:
            *(_BYTE *)(a3 + 23) = 19;
            *(_DWORD *)(a3 + 15) = 1396920415;
            v11 = "AARCH64_VARIANT_PCS";
LABEL_41:
            *(_OWORD *)a3 = *(_OWORD *)v11;
            *(_BYTE *)(a3 + 19) = 0;
            return;
          case 1879048195:
            v5 = "AARCH64_PAC_PLT";
            goto LABEL_43;
          case 1879048193:
            v5 = "AARCH64_BTI_PLT";
            goto LABEL_43;
        }
        break;
    }
  }
  else
  {
    if (a1 == 8)
    {
      switch(a2)
      {
        case 1879048193:
          *(_BYTE *)(a3 + 23) = 16;
          v6 = "MIPS_RLD_VERSION";
          goto LABEL_26;
        case 1879048194:
          v5 = "MIPS_TIME_STAMP";
          goto LABEL_43;
        case 1879048195:
          v16 = "MIPS_ICHECKSUM";
          goto LABEL_163;
        case 1879048196:
          v8 = "MIPS_IVERSION";
          goto LABEL_23;
        case 1879048197:
          *(_BYTE *)(a3 + 23) = 10;
          *(_WORD *)(a3 + 8) = 21319;
          v14 = "MIPS_FLAGS";
          goto LABEL_176;
        case 1879048198:
          *(_BYTE *)(a3 + 23) = 17;
          *(_WORD *)(a3 + 16) = 83;
          v28 = "MIPS_BASE_ADDRESS";
          goto LABEL_169;
        case 1879048199:
          *(_BYTE *)(a3 + 23) = 9;
          *(_WORD *)(a3 + 8) = 77;
          v12 = "MIPS_MSYM";
          goto LABEL_130;
        case 1879048200:
          v8 = "MIPS_CONFLICT";
          goto LABEL_23;
        case 1879048201:
          *(_BYTE *)(a3 + 23) = 12;
          *(_DWORD *)(a3 + 8) = 1414744396;
          v15 = "MIPS_LIBLIST";
          goto LABEL_161;
        case 1879048202:
          *(_BYTE *)(a3 + 23) = 16;
          v6 = "MIPS_LOCAL_GOTNO";
          goto LABEL_26;
        case 1879048203:
          v5 = "MIPS_CONFLICTNO";
          goto LABEL_43;
        case 1879048208:
          v16 = "MIPS_LIBLISTNO";
          goto LABEL_163;
        case 1879048209:
          v8 = "MIPS_SYMTABNO";
          goto LABEL_23;
        case 1879048210:
          v5 = "MIPS_UNREFEXTNO";
          goto LABEL_43;
        case 1879048211:
          *(_BYTE *)(a3 + 23) = 11;
          *(_DWORD *)(a3 + 7) = 1297699668;
          v4 = "MIPS_GOTSYM";
          goto LABEL_46;
        case 1879048212:
          v8 = "MIPS_HIPAGENO";
          goto LABEL_23;
        case 1879048214:
          *(_BYTE *)(a3 + 23) = 12;
          *(_DWORD *)(a3 + 8) = 1346456927;
          v15 = "MIPS_RLD_MAP";
          goto LABEL_161;
        case 1879048215:
          *(_BYTE *)(a3 + 23) = 16;
          v6 = "MIPS_DELTA_CLASS";
          goto LABEL_26;
        case 1879048216:
          *(_BYTE *)(a3 + 23) = 19;
          *(_DWORD *)(a3 + 15) = 1330536275;
          v11 = "MIPS_DELTA_CLASS_NO";
          goto LABEL_41;
        case 1879048217:
          *(_BYTE *)(a3 + 23) = 19;
          *(_DWORD *)(a3 + 15) = 1162038849;
          v11 = "MIPS_DELTA_INSTANCE";
          goto LABEL_41;
        case 1879048218:
          v29 = "MIPS_DELTA_INSTANCE_NO";
          goto LABEL_151;
        case 1879048219:
          *(_BYTE *)(a3 + 23) = 16;
          v6 = "MIPS_DELTA_RELOC";
          goto LABEL_26;
        case 1879048220:
          *(_BYTE *)(a3 + 23) = 19;
          *(_DWORD *)(a3 + 15) = 1330536259;
          v11 = "MIPS_DELTA_RELOC_NO";
          goto LABEL_41;
        case 1879048221:
          v16 = "MIPS_DELTA_SYM";
          goto LABEL_163;
        case 1879048222:
          *(_BYTE *)(a3 + 23) = 17;
          *(_WORD *)(a3 + 16) = 79;
          v28 = "MIPS_DELTA_SYM_NO";
          goto LABEL_169;
        case 1879048224:
          *(_BYTE *)(a3 + 23) = 19;
          *(_DWORD *)(a3 + 15) = 1297699667;
          v11 = "MIPS_DELTA_CLASSSYM";
          goto LABEL_41;
        case 1879048225:
          v29 = "MIPS_DELTA_CLASSSYM_NO";
LABEL_151:
          *(_OWORD *)a3 = *(_OWORD *)v29;
          *(_QWORD *)(a3 + 14) = *(_QWORD *)(v29 + 14);
          *(_WORD *)(a3 + 22) = 5632;
          return;
        case 1879048226:
          v16 = "MIPS_CXX_FLAGS";
          goto LABEL_163;
        case 1879048227:
          v5 = "MIPS_PIXIE_INIT";
          goto LABEL_43;
        case 1879048228:
          v5 = "MIPS_SYMBOL_LIB";
          goto LABEL_43;
        case 1879048229:
          v30 = "MIPS_LOCALPAGE_GOTIDX";
          goto LABEL_159;
        case 1879048230:
          *(_BYTE *)(a3 + 23) = 17;
          *(_WORD *)(a3 + 16) = 88;
          v28 = "MIPS_LOCAL_GOTIDX";
          goto LABEL_169;
        case 1879048231:
          *(_BYTE *)(a3 + 23) = 18;
          strcpy((char *)a3, "MIPS_HIDDEN_GOTIDX");
          return;
        case 1879048232:
          v30 = "MIPS_PROTECTED_GOTIDX";
LABEL_159:
          *(_BYTE *)(a3 + 23) = 21;
          *(_OWORD *)a3 = *(_OWORD *)v30;
          *(_QWORD *)(a3 + 13) = *(_QWORD *)(v30 + 13);
          *(_BYTE *)(a3 + 21) = 0;
          return;
        case 1879048233:
          *(_BYTE *)(a3 + 23) = 12;
          *(_DWORD *)(a3 + 8) = 1397641033;
          v15 = "MIPS_OPTIONS";
          goto LABEL_161;
        case 1879048234:
          v16 = "MIPS_INTERFACE";
          goto LABEL_163;
        case 1879048235:
          *(_BYTE *)(a3 + 23) = 17;
          *(_WORD *)(a3 + 16) = 78;
          v28 = "MIPS_DYNSTR_ALIGN";
          goto LABEL_169;
        case 1879048236:
          *(_BYTE *)(a3 + 23) = 19;
          *(_DWORD *)(a3 + 15) = 1163544915;
          v11 = "MIPS_INTERFACE_SIZE";
          goto LABEL_41;
        case 1879048237:
          v31 = (char *)operator new(0x20uLL);
          *(_QWORD *)a3 = v31;
          *(_OWORD *)(a3 + 8) = xmmword_1C64638E0;
          strcpy(v31, "MIPS_RLD_TEXT_RESOLVE_ADDR");
          return;
        case 1879048238:
          *(_BYTE *)(a3 + 23) = 16;
          v6 = "MIPS_PERF_SUFFIX";
          goto LABEL_26;
        case 1879048239:
          *(_BYTE *)(a3 + 23) = 17;
          *(_WORD *)(a3 + 16) = 69;
          v28 = "MIPS_COMPACT_SIZE";
LABEL_169:
          *(_OWORD *)a3 = *(_OWORD *)v28;
          return;
        case 1879048240:
          v8 = "MIPS_GP_VALUE";
          goto LABEL_23;
        case 1879048241:
          *(_BYTE *)(a3 + 23) = 16;
          v6 = "MIPS_AUX_DYNAMIC";
          goto LABEL_26;
        case 1879048242:
          *(_BYTE *)(a3 + 23) = 11;
          *(_DWORD *)(a3 + 7) = 1414481748;
          v4 = "MIPS_PLTGOT";
          goto LABEL_46;
        case 1879048244:
          *(_BYTE *)(a3 + 23) = 10;
          *(_WORD *)(a3 + 8) = 21580;
          v14 = "MIPS_RWPLT";
          goto LABEL_176;
        case 1879048245:
          *(_BYTE *)(a3 + 23) = 16;
          v6 = "MIPS_RLD_MAP_REL";
          goto LABEL_26;
        case 1879048246:
          *(_BYTE *)(a3 + 23) = 10;
          *(_WORD *)(a3 + 8) = 18515;
          v14 = "MIPS_XHASH";
LABEL_176:
          *(_QWORD *)a3 = *(_QWORD *)v14;
          *(_BYTE *)(a3 + 10) = 0;
          break;
        default:
          goto LABEL_27;
      }
      return;
    }
    if (a1 == 20)
    {
      if (a2 == 1879048193)
      {
        *(_BYTE *)(a3 + 23) = 7;
        *(_DWORD *)a3 = 1598246992;
        v7 = 1414549343;
      }
      else
      {
        if (a2 != 1879048192)
          goto LABEL_27;
        *(_BYTE *)(a3 + 23) = 7;
        *(_DWORD *)a3 = 1598246992;
        v7 = 1414481759;
      }
LABEL_120:
      *(_DWORD *)(a3 + 3) = v7;
      *(_BYTE *)(a3 + 7) = 0;
      return;
    }
    if (a1 == 21 && a2 == 1879048192)
    {
      *(_BYTE *)(a3 + 23) = 11;
      *(_DWORD *)(a3 + 7) = 1263421772;
      v4 = "PPC64_GLINK";
LABEL_46:
      *(_QWORD *)a3 = *(_QWORD *)v4;
      *(_BYTE *)(a3 + 11) = 0;
      return;
    }
  }
LABEL_27:
  if (a2 <= 1879039999)
  {
    switch(a2)
    {
      case 0:
        *(_BYTE *)(a3 + 23) = 4;
        v9 = 1280070990;
        goto LABEL_117;
      case 1:
        *(_BYTE *)(a3 + 23) = 6;
        *(_DWORD *)a3 = 1145390414;
        v10 = 17477;
        goto LABEL_115;
      case 2:
        *(_BYTE *)(a3 + 23) = 8;
        v13 = 0x5A534C4552544C50;
        goto LABEL_102;
      case 3:
        *(_BYTE *)(a3 + 23) = 6;
        *(_DWORD *)a3 = 1196706896;
        v10 = 21583;
        goto LABEL_115;
      case 4:
        *(_BYTE *)(a3 + 23) = 4;
        v9 = 1213415752;
        goto LABEL_117;
      case 5:
        *(_BYTE *)(a3 + 23) = 6;
        v21 = 1414681683;
        goto LABEL_80;
      case 6:
        *(_BYTE *)(a3 + 23) = 6;
        v21 = 1414355283;
LABEL_80:
        *(_DWORD *)a3 = v21;
        v10 = 16961;
        goto LABEL_115;
      case 7:
        *(_BYTE *)(a3 + 23) = 4;
        v9 = 1095517522;
        goto LABEL_117;
      case 8:
        *(_BYTE *)(a3 + 23) = 6;
        v22 = 1095517522;
        goto LABEL_114;
      case 9:
        *(_BYTE *)(a3 + 23) = 7;
        *(_DWORD *)a3 = 1095517522;
        v23 = 17729;
        goto LABEL_119;
      case 10:
        *(_BYTE *)(a3 + 23) = 5;
        v24 = 1397904467;
        goto LABEL_93;
      case 11:
        *(_BYTE *)(a3 + 23) = 6;
        v25 = 1162697043;
        goto LABEL_95;
      case 12:
        *(_BYTE *)(a3 + 23) = 4;
        v9 = 1414090313;
        goto LABEL_117;
      case 13:
        *(_BYTE *)(a3 + 23) = 4;
        v9 = 1229867334;
        goto LABEL_117;
      case 14:
        *(_BYTE *)(a3 + 23) = 6;
        *(_DWORD *)a3 = 1095651155;
        v10 = 17741;
        goto LABEL_115;
      case 15:
        *(_BYTE *)(a3 + 23) = 5;
        *(_DWORD *)a3 = 1413566546;
        v26 = 72;
        goto LABEL_109;
      case 16:
        *(_BYTE *)(a3 + 23) = 8;
        v13 = 0x43494C4F424D5953;
        goto LABEL_102;
      case 17:
        *(_BYTE *)(a3 + 23) = 3;
        *(_DWORD *)a3 = 4998482;
        return;
      case 18:
        *(_BYTE *)(a3 + 23) = 5;
        v24 = 1397507410;
LABEL_93:
        *(_DWORD *)a3 = v24;
        v26 = 90;
        goto LABEL_109;
      case 19:
        *(_BYTE *)(a3 + 23) = 6;
        v25 = 1162626386;
LABEL_95:
        *(_DWORD *)a3 = v25;
        v10 = 21582;
        goto LABEL_115;
      case 20:
        *(_BYTE *)(a3 + 23) = 6;
        v27 = 1381256272;
        goto LABEL_100;
      case 21:
        *(_BYTE *)(a3 + 23) = 5;
        *(_DWORD *)a3 = 1430406468;
        v26 = 71;
        goto LABEL_109;
      case 22:
        *(_BYTE *)(a3 + 23) = 7;
        *(_DWORD *)a3 = 1415071060;
        v7 = 1279611476;
        goto LABEL_120;
      case 23:
        *(_BYTE *)(a3 + 23) = 6;
        v27 = 1380994378;
LABEL_100:
        *(_DWORD *)a3 = v27;
        v10 = 19525;
        goto LABEL_115;
      case 24:
        *(_BYTE *)(a3 + 23) = 8;
        v13 = 0x574F4E5F444E4942;
        goto LABEL_102;
      case 25:
        *(_BYTE *)(a3 + 23) = 10;
        *(_WORD *)(a3 + 8) = 22849;
        v14 = "INIT_ARRAY";
        goto LABEL_176;
      case 26:
        *(_BYTE *)(a3 + 23) = 10;
        *(_WORD *)(a3 + 8) = 22849;
        v14 = "FINI_ARRAY";
        goto LABEL_176;
      case 27:
        *(_BYTE *)(a3 + 23) = 12;
        *(_DWORD *)(a3 + 8) = 1515411777;
        v15 = "INIT_ARRAYSZ";
        goto LABEL_161;
      case 28:
        *(_BYTE *)(a3 + 23) = 12;
        *(_DWORD *)(a3 + 8) = 1515411777;
        v15 = "FINI_ARRAYSZ";
        goto LABEL_161;
      case 29:
        *(_BYTE *)(a3 + 23) = 7;
        *(_DWORD *)a3 = 1347310930;
        v7 = 1213481296;
        goto LABEL_120;
      case 30:
        *(_BYTE *)(a3 + 23) = 5;
        *(_DWORD *)a3 = 1195461702;
        v26 = 83;
LABEL_109:
        *(_WORD *)(a3 + 4) = v26;
        return;
      case 31:
        goto LABEL_70;
      case 32:
        v8 = "PREINIT_ARRAY";
        goto LABEL_23;
      case 33:
        v5 = "PREINIT_ARRAYSZ";
        goto LABEL_43;
      case 34:
        *(_BYTE *)(a3 + 23) = 12;
        *(_DWORD *)(a3 + 8) = 1480871496;
        v15 = "SYMTAB_SHNDX";
        goto LABEL_161;
      case 35:
        *(_BYTE *)(a3 + 23) = 6;
        v22 = 1380730194;
LABEL_114:
        *(_DWORD *)a3 = v22;
        v10 = 23123;
        goto LABEL_115;
      case 36:
        *(_BYTE *)(a3 + 23) = 4;
        v9 = 1380730194;
        goto LABEL_117;
      case 37:
        *(_BYTE *)(a3 + 23) = 7;
        *(_DWORD *)a3 = 1380730194;
        v23 = 17746;
LABEL_119:
        v7 = v23 | 0x544E0000;
        goto LABEL_120;
      default:
        switch(a2)
        {
          case 1610612751:
            *(_BYTE *)(a3 + 23) = 11;
            *(_DWORD *)(a3 + 7) = 1279611487;
            v4 = "ANDROID_REL";
            goto LABEL_46;
          case 1610612752:
            v8 = "ANDROID_RELSZ";
            goto LABEL_23;
          case 1610612753:
            *(_BYTE *)(a3 + 23) = 12;
            *(_DWORD *)(a3 + 8) = 1095517522;
            v15 = "ANDROID_RELA";
            goto LABEL_161;
          case 1610612754:
            v16 = "ANDROID_RELASZ";
            goto LABEL_163;
          default:
            goto LABEL_70;
        }
    }
  }
  if (a2 <= 1879048175)
  {
    if (a2 > 1879047924)
    {
      if (a2 != 1879047925)
      {
        if (a2 == 1879047926)
        {
          *(_BYTE *)(a3 + 23) = 11;
          *(_DWORD *)(a3 + 7) = 1414287455;
          v4 = "TLSDESC_PLT";
          goto LABEL_46;
        }
        if (a2 == 1879047927)
        {
          *(_BYTE *)(a3 + 23) = 11;
          *(_DWORD *)(a3 + 7) = 1414481759;
          v4 = "TLSDESC_GOT";
          goto LABEL_46;
        }
        goto LABEL_70;
      }
      *(_BYTE *)(a3 + 23) = 8;
      v13 = 0x485341485F554E47;
LABEL_102:
      *(_QWORD *)a3 = v13;
      *(_BYTE *)(a3 + 8) = 0;
      return;
    }
    if (a2 == 1879040000)
    {
      *(_BYTE *)(a3 + 23) = 12;
      *(_DWORD *)(a3 + 8) = 1380730194;
      v15 = "ANDROID_RELR";
LABEL_161:
      *(_QWORD *)a3 = *(_QWORD *)v15;
      *(_BYTE *)(a3 + 12) = 0;
      return;
    }
    if (a2 == 1879040001)
    {
      v16 = "ANDROID_RELRSZ";
LABEL_163:
      *(_BYTE *)(a3 + 23) = 14;
      *(_QWORD *)a3 = *(_QWORD *)v16;
      *(_QWORD *)(a3 + 6) = *(_QWORD *)(v16 + 6);
      *(_BYTE *)(a3 + 14) = 0;
      return;
    }
    if (a2 != 1879040003)
      goto LABEL_70;
    v5 = "ANDROID_RELRENT";
LABEL_43:
    *(_BYTE *)(a3 + 23) = 15;
    *(_QWORD *)a3 = *(_QWORD *)v5;
    *(_QWORD *)(a3 + 7) = *(_QWORD *)(v5 + 7);
    *(_BYTE *)(a3 + 15) = 0;
    return;
  }
  if (a2 <= 2147483644)
  {
    switch(a2)
    {
      case 1879048176:
        *(_BYTE *)(a3 + 23) = 6;
        *(_DWORD *)a3 = 1397900630;
        v10 = 19801;
        goto LABEL_115;
      case 1879048185:
        *(_BYTE *)(a3 + 23) = 9;
        *(_WORD *)(a3 + 8) = 84;
        v12 = "RELACOUNT";
        goto LABEL_130;
      case 1879048186:
        *(_BYTE *)(a3 + 23) = 8;
        v13 = 0x544E554F434C4552;
        goto LABEL_102;
      case 1879048187:
        *(_BYTE *)(a3 + 23) = 7;
        *(_DWORD *)a3 = 1195461702;
        v7 = 828330823;
        goto LABEL_120;
      case 1879048188:
        *(_BYTE *)(a3 + 23) = 6;
        *(_DWORD *)a3 = 1146242390;
        v10 = 17989;
        goto LABEL_115;
      case 1879048189:
        *(_BYTE *)(a3 + 23) = 9;
        *(_WORD *)(a3 + 8) = 77;
        v12 = "VERDEFNUM";
        goto LABEL_130;
      case 1879048190:
        *(_BYTE *)(a3 + 23) = 7;
        *(_DWORD *)a3 = 1314014550;
        v7 = 1145390414;
        goto LABEL_120;
      case 1879048191:
        *(_BYTE *)(a3 + 23) = 10;
        *(_WORD *)(a3 + 8) = 19797;
        v14 = "VERNEEDNUM";
        goto LABEL_176;
      default:
        goto LABEL_70;
    }
  }
  if (a2 != 2147483645)
  {
    if (a2 == 2147483646)
    {
      *(_BYTE *)(a3 + 23) = 4;
      v9 = 1145394005;
LABEL_117:
      *(_DWORD *)a3 = v9;
      *(_BYTE *)(a3 + 4) = 0;
      return;
    }
    if (a2 == 0x7FFFFFFF)
    {
      *(_BYTE *)(a3 + 23) = 6;
      *(_DWORD *)a3 = 1414285638;
      v10 = 21061;
LABEL_115:
      *(_WORD *)(a3 + 4) = v10;
      *(_BYTE *)(a3 + 6) = 0;
      return;
    }
LABEL_70:
    v17 = 0;
    do
    {
      v33[v17-- + 16] = a0123456789abcd_6[a2 & 0xF] | 0x20;
      v18 = (unint64_t)a2 > 0xF;
      a2 = (unint64_t)a2 >> 4;
    }
    while (v18);
    sub_1C4E61270(&v32, &v33[v17 + 17], (char *)&v34, -v17);
    v19 = std::string::insert(&v32, 0, "<unknown:>0x");
    v20 = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)a3 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    *(_QWORD *)(a3 + 16) = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v32.__r_.__value_.__l.__data_);
    return;
  }
  *(_BYTE *)(a3 + 23) = 9;
  *(_WORD *)(a3 + 8) = 89;
  v12 = "AUXILIARY";
LABEL_130:
  *(_QWORD *)a3 = *(_QWORD *)v12;
}

{
  __ZNK4llvm6object7ELFFileINS0_7ELFTypeILNS_7support10endiannessE1ELb0EEEE21getDynamicTagAsStringEjy(a1, a2, a3);
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getDynamicTagAsString(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getDynamicTagAsString(*(unsigned __int16 *)(*(_QWORD *)a1 + 18), a2, a3);
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getRelocationSymbol(_QWORD *a1@<X0>, uint64_t a2@<X1>, unsigned int *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v4;

  v4 = *(_DWORD *)(a2 + 4);
  if (v4 > 0xFF)
  {
    sub_1C62C9DF4(a1, a3, v4 >> 8, a4);
  }
  else
  {
    *(_BYTE *)(a4 + 8) &= ~1u;
    *(_QWORD *)a4 = 0;
  }
}

BOOL llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::isMips64EL(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  return *(_WORD *)(*a1 + 18) == 8 && *(_BYTE *)(v1 + 4) == 2 && *(_BYTE *)(v1 + 5) == 1;
}

char **llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::loadVersionMap@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  const void **v8;
  const void **v9;
  const void **v10;
  unsigned int v11;
  char v12;
  BOOL v13;
  const void *v14;
  size_t v15;
  size_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _BYTE *v21;
  const void **v22;
  const void **v23;
  char *v24;
  char *v25;
  unsigned int v26;
  char v27;
  const void *v28;
  size_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  _QWORD *v35;
  uint64_t v36;
  const void **v37;
  void *__p[2];
  unint64_t v39;
  char v40;
  char v41;
  const void ***v42;
  uint64_t v43;
  const void **v44;
  const void **v45;
  char v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v42 = &v44;
  v43 = 0;
  __p[0] = 0;
  __p[1] = 0;
  v40 = 0;
  v39 = 0;
  v41 = 1;
  sub_1C59A8468((uint64_t)&v42, (unint64_t)__p);
  if (v41 && SHIBYTE(v39) < 0)
    operator delete(__p[0]);
  __p[0] = 0;
  __p[1] = 0;
  v40 = 0;
  v39 = 0;
  v41 = 1;
  sub_1C59A8468((uint64_t)&v42, (unint64_t)__p);
  if (v41 && SHIBYTE(v39) < 0)
    operator delete(__p[0]);
  if (a3)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getVersionDefinitions(a1, a3, (uint64_t)&v44);
    v8 = v44;
    if ((v46 & 1) != 0)
    {
      v44 = 0;
      *(_BYTE *)(a4 + 16) |= 1u;
      *(_QWORD *)a4 = v8;
      sub_1C59C5EB8((uint64_t)&v44);
      return sub_1C59C5DD4((char **)&v42);
    }
    v35 = a1;
    v9 = v45;
    if (v44 != v45)
    {
      v10 = v44 + 3;
      do
      {
        v11 = *((_DWORD *)v10 - 3) & 0x7FFF;
        v12 = *((_BYTE *)v10 + 23);
        v13 = v12 < 0;
        if (v12 >= 0)
          v14 = v10;
        else
          v14 = *v10;
        v15 = v12 & 0x7F;
        if (v13)
          v16 = (size_t)v10[1];
        else
          v16 = v15;
        if (v43 <= v11)
          sub_1C59C4C20((uint64_t)&v42, v11 + 1);
        if (v16 > 0x7FFFFFFFFFFFFFF7)
LABEL_68:
          abort();
        if (v16 >= 0x17)
        {
          v18 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v16 | 7) != 0x17)
            v18 = v16 | 7;
          v19 = v18 + 1;
          v17 = operator new(v18 + 1);
          __p[1] = (void *)v16;
          v39 = v19 | 0x8000000000000000;
          __p[0] = v17;
        }
        else
        {
          HIBYTE(v39) = v16;
          v17 = __p;
          if (!v16)
            goto LABEL_27;
        }
        memmove(v17, v14, v16);
LABEL_27:
        *((_BYTE *)v17 + v16) = 0;
        v20 = (char *)&v42[5 * v11];
        v21 = v20 + 32;
        if (v20[32])
        {
          if (v20[23] < 0)
            operator delete(*(void **)v20);
          *(_OWORD *)v20 = *(_OWORD *)__p;
          *((_QWORD *)v20 + 2) = v39;
          v21 = v20 + 24;
        }
        else
        {
          *(_OWORD *)v20 = *(_OWORD *)__p;
          *((_QWORD *)v20 + 2) = v39;
          v20[24] = 1;
        }
        *v21 = 1;
        v22 = v10 + 6;
        v10 += 9;
      }
      while (v22 != v9);
    }
    sub_1C59C5EB8((uint64_t)&v44);
    a1 = v35;
  }
  if (a2)
  {
    __p[0] = sub_1C59A5848;
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getVersionDependencies(a1, a2, (void (*)(_QWORD *__return_ptr, uint64_t, __int128 *))sub_1C62CD258, (uint64_t)__p, (uint64_t)&v44);
    v23 = v44;
    if ((v46 & 1) == 0)
    {
      v36 = a4;
      v37 = v45;
      if (v44 == v45)
        goto LABEL_62;
      while (1)
      {
        v24 = (char *)v23[5];
        v25 = (char *)v23[6];
        while (v24 != v25)
        {
          v26 = *((_DWORD *)v24 + 2) & 0x7FFF;
          v27 = v24[39];
          if (v27 >= 0)
            v28 = v24 + 16;
          else
            v28 = (const void *)*((_QWORD *)v24 + 2);
          if (v27 >= 0)
            v29 = v27 & 0x7F;
          else
            v29 = *((_QWORD *)v24 + 3);
          if (v43 <= v26)
            sub_1C59C4C20((uint64_t)&v42, v26 + 1);
          if (v29 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_68;
          if (v29 >= 0x17)
          {
            v31 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v29 | 7) != 0x17)
              v31 = v29 | 7;
            v32 = v31 + 1;
            v30 = operator new(v31 + 1);
            __p[1] = (void *)v29;
            v39 = v32 | 0x8000000000000000;
            __p[0] = v30;
LABEL_54:
            memmove(v30, v28, v29);
            goto LABEL_55;
          }
          HIBYTE(v39) = v29;
          v30 = __p;
          if (v29)
            goto LABEL_54;
LABEL_55:
          *((_BYTE *)v30 + v29) = 0;
          v33 = (char *)&v42[5 * v26];
          if (v33[32])
          {
            if (v33[23] < 0)
              operator delete(*(void **)v33);
            *(_OWORD *)v33 = *(_OWORD *)__p;
            *((_QWORD *)v33 + 2) = v39;
            v33[24] = 0;
          }
          else
          {
            *(_OWORD *)v33 = *(_OWORD *)__p;
            *((_QWORD *)v33 + 2) = v39;
            v33[24] = 0;
            v33[32] = 1;
          }
          v24 += 40;
        }
        v23 += 8;
        if (v23 == v37)
        {
LABEL_62:
          sub_1C59C5F14((uint64_t)&v44);
          a4 = v36;
          goto LABEL_63;
        }
      }
    }
    v44 = 0;
    *(_BYTE *)(a4 + 16) |= 1u;
    *(_QWORD *)a4 = v23;
    sub_1C59C5F14((uint64_t)&v44);
  }
  else
  {
LABEL_63:
    *(_BYTE *)(a4 + 16) &= ~1u;
    *(_QWORD *)a4 = a4 + 16;
    *(_QWORD *)(a4 + 8) = 0;
    if ((_DWORD)v43)
      sub_1C59C5F70(a4, (uint64_t)&v42);
  }
  return sub_1C59C5DD4((char **)&v42);
}

unint64_t sub_1C59A8468(uint64_t a1, unint64_t a2)
{
  unint64_t result;
  uint64_t v4;
  __int128 v5;

  result = sub_1C59C5E50(a1, a2, 1);
  v4 = *(_QWORD *)a1 + 40 * *(unsigned int *)(a1 + 8);
  *(_BYTE *)v4 = 0;
  *(_BYTE *)(v4 + 32) = 0;
  if (*(_BYTE *)(result + 32))
  {
    v5 = *(_OWORD *)result;
    *(_QWORD *)(v4 + 16) = *(_QWORD *)(result + 16);
    *(_OWORD *)v4 = v5;
    *(_QWORD *)(result + 8) = 0;
    *(_QWORD *)(result + 16) = 0;
    *(_QWORD *)result = 0;
    *(_BYTE *)(v4 + 24) = *(_BYTE *)(result + 24);
    *(_BYTE *)(v4 + 32) = 1;
  }
  ++*(_DWORD *)(a1 + 8);
  return result;
}

BOOL llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::isLE(uint64_t a1)
{
  return *(_BYTE *)(*(_QWORD *)a1 + 5) == 1;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::program_headers(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  _QWORD v14[4];
  __int16 v15;
  _QWORD v16[4];
  __int16 v17;
  _QWORD v18[4];
  __int16 v19;
  _QWORD v20[4];
  __int16 v21;
  _QWORD v22[4];
  __int16 v23;
  _QWORD v24[4];
  __int16 v25;
  const char *v26;
  uint64_t v27;
  __int16 v28;

  v3 = *a1;
  v4 = *(unsigned __int16 *)(*a1 + 44);
  if (*(_WORD *)(*a1 + 44))
  {
    v5 = *(unsigned __int16 *)(v3 + 42);
    if (v5 != 32)
    {
      v26 = "invalid e_phentsize: ";
      v27 = v5;
      v6 = 2307;
      goto LABEL_7;
    }
  }
  else
  {
    v5 = *(unsigned __int16 *)(v3 + 42);
  }
  v7 = *(unsigned int *)(v3 + 28);
  v8 = a1[1];
  if (v7 + v5 * (unint64_t)*(unsigned __int16 *)(*a1 + 44) <= v8)
  {
    *(_BYTE *)(a2 + 16) &= ~1u;
    *(_QWORD *)a2 = v3 + v7;
    *(_QWORD *)(a2 + 8) = v4;
    return;
  }
  v12 = *(unsigned int *)(v3 + 28);
  v13 = v8;
  v14[0] = "program headers are longer than binary of size ";
  v14[2] = &v13;
  v15 = 2563;
  v16[0] = v14;
  v16[2] = ": e_phoff = 0x";
  v17 = 770;
  v18[0] = v16;
  v18[2] = &v12;
  v19 = 3586;
  v20[0] = v18;
  v20[2] = ", e_phnum = ";
  v21 = 770;
  v22[0] = v20;
  v22[2] = v4;
  v6 = 2306;
  v23 = 2306;
  v24[0] = v22;
  v24[2] = ", e_phentsize = ";
  v25 = 770;
  v26 = (const char *)v24;
  v27 = v5;
LABEL_7:
  v28 = v6;
  v9 = operator new();
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v11 = qword_1EF8F7238[0];
  *(_QWORD *)v9 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)&v26, (_QWORD *)(v9 + 8));
  *(_QWORD *)(v9 + 32) = 3;
  *(_QWORD *)(v9 + 40) = v11;
  *(_BYTE *)(v9 + 48) = 1;
  *(_BYTE *)(a2 + 16) |= 1u;
  *(_QWORD *)a2 = v9;
}

{
  __ZNK4llvm6object7ELFFileINS0_7ELFTypeILNS_7support10endiannessE1ELb0EEEE15program_headersEv(a1, a2);
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::symbols(_QWORD *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  if (a2)
  {
    sub_1C59A86D4(a1, a2, a3);
  }
  else
  {
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
  }
}

void sub_1C59A86D4(_QWORD *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  std::string::size_type v6;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  std::string::size_type v10;
  std::string *v11;
  const char *v12;
  std::string *v13;
  std::string::size_type v14;
  std::string *v15;
  std::string *v16;
  const char *v17;
  uint64_t v18;
  unint64_t v20;
  void *v21;
  std::string::size_type v22;
  std::string *v23;
  std::string::size_type v24;
  std::string *v25;
  std::string::size_type v26;
  uint64_t v27;
  unint64_t v29;
  std::string *v30;
  std::string::size_type v31;
  std::string *v32;
  std::string::size_type v33;
  uint64_t v34;
  unint64_t v36;
  std::string::size_type v37;
  uint64_t v38;
  std::string::size_type v39;
  std::string::size_type v40;
  std::string v41;
  std::string v42;
  std::string v43;
  __int16 v44;
  std::string v45;
  __int16 v46;
  std::string v47;
  void *__p[2];
  std::string *v49;
  __int16 v50;
  _QWORD v51[2];
  std::string *v52;
  __int16 v53;
  _QWORD v54[2];
  std::string *v55;
  __int16 v56;
  _QWORD v57[2];
  const char *v58;
  __int16 v59;

  if (a2[9] == 16)
  {
    v6 = a2[5];
    if ((v6 & 0xF) != 0)
    {
      sub_1C59A4F58(a1, (uint64_t)a2, (char *)&v47);
      v7 = std::string::insert(&v47, 0, "section ");
      v8 = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v43.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v43.__r_.__value_.__r.__words[2] = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      v9 = std::string::append(&v43, " has an invalid sh_size (");
      v10 = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v45.__r_.__value_.__l.__data_ = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v45.__r_.__value_.__r.__words[2] = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      __p[0] = &v45;
      v49 = (std::string *)v6;
      v50 = 2052;
      v51[0] = __p;
      v52 = (std::string *)") which is not a multiple of its sh_entsize (";
      v53 = 770;
      v11 = (std::string *)a2[9];
      v54[0] = v51;
      v55 = v11;
      v56 = 2050;
      v12 = ")";
    }
    else
    {
      v22 = a2[4];
      if (!__CFADD__((_DWORD)v22, (_DWORD)v6))
      {
        if (a1[1] >= (unint64_t)(v6 + v22))
        {
          v37 = *a1 + v22;
          *(_BYTE *)(a3 + 16) &= ~1u;
          *(_QWORD *)a3 = v37;
          *(_QWORD *)(a3 + 8) = v6 >> 4;
          return;
        }
        sub_1C59A4F58(a1, (uint64_t)a2, (char *)&v41);
        v30 = std::string::insert(&v41, 0, "section ");
        v31 = v30->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v42.__r_.__value_.__l.__data_ = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        v42.__r_.__value_.__r.__words[2] = v31;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        v32 = std::string::append(&v42, " has a sh_offset (0x");
        v33 = v32->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v47.__r_.__value_.__l.__data_ = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
        v47.__r_.__value_.__r.__words[2] = v33;
        v32->__r_.__value_.__l.__size_ = 0;
        v32->__r_.__value_.__r.__words[2] = 0;
        v32->__r_.__value_.__r.__words[0] = 0;
        v39 = v6;
        v40 = v22;
        v43.__r_.__value_.__r.__words[0] = (std::string::size_type)&v47;
        v43.__r_.__value_.__r.__words[2] = (std::string::size_type)&v40;
        v44 = 3588;
        v45.__r_.__value_.__r.__words[0] = (std::string::size_type)&v43;
        v45.__r_.__value_.__r.__words[2] = (std::string::size_type)") + sh_size (0x";
        v46 = 770;
        __p[0] = &v45;
        v49 = (std::string *)&v39;
        v50 = 3586;
        v51[0] = __p;
        v52 = (std::string *)") that is greater than the file size (0x";
        v53 = 770;
        v38 = a1[1];
        v54[0] = v51;
        v55 = (std::string *)&v38;
        v56 = 3586;
        v57[0] = v54;
        v58 = ")";
        v59 = 770;
        v34 = operator new();
        if (!atomic_load(qword_1EF8F7238))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
        v36 = qword_1EF8F7238[0];
        *(_QWORD *)v34 = off_1E81A0C88;
        llvm::Twine::str((llvm::Twine *)v57, (_QWORD *)(v34 + 8));
        *(_QWORD *)(v34 + 32) = 3;
        *(_QWORD *)(v34 + 40) = v36;
        *(_BYTE *)(v34 + 48) = 1;
        *(_BYTE *)(a3 + 16) |= 1u;
        *(_QWORD *)a3 = v34;
        if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v47.__r_.__value_.__l.__data_);
        if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v42.__r_.__value_.__l.__data_);
        if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
        {
          v21 = (void *)v41.__r_.__value_.__r.__words[0];
          goto LABEL_23;
        }
        return;
      }
      sub_1C59A4F58(a1, (uint64_t)a2, (char *)&v47);
      v23 = std::string::insert(&v47, 0, "section ");
      v24 = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v43.__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v43.__r_.__value_.__r.__words[2] = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      v25 = std::string::append(&v43, " has a sh_offset (0x");
      v26 = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v45.__r_.__value_.__l.__data_ = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v45.__r_.__value_.__r.__words[2] = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      v42.__r_.__value_.__r.__words[0] = v22;
      __p[0] = &v45;
      v49 = &v42;
      v50 = 3588;
      v51[0] = __p;
      v52 = (std::string *)") + sh_size (0x";
      v53 = 770;
      v41.__r_.__value_.__r.__words[0] = v6;
      v54[0] = v51;
      v55 = &v41;
      v56 = 3586;
      v12 = ") that cannot be represented";
    }
    v57[0] = v54;
    v58 = v12;
    v59 = 770;
    v27 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v29 = qword_1EF8F7238[0];
    *(_QWORD *)v27 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v57, (_QWORD *)(v27 + 8));
    *(_QWORD *)(v27 + 32) = 3;
    *(_QWORD *)(v27 + 40) = v29;
    *(_BYTE *)(v27 + 48) = 1;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v27;
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__r_.__value_.__l.__data_);
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v43.__r_.__value_.__l.__data_);
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    {
      v21 = (void *)v47.__r_.__value_.__r.__words[0];
      goto LABEL_23;
    }
  }
  else
  {
    sub_1C59A4F58(a1, (uint64_t)a2, (char *)&v43);
    v13 = std::string::insert(&v43, 0, "section ");
    v14 = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__r.__words[2] = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    v15 = std::string::append(&v45, " has invalid sh_entsize: expected ");
    v16 = (std::string *)v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v49 = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    v47.__r_.__value_.__r.__words[0] = 16;
    v51[0] = __p;
    v52 = &v47;
    v53 = 2564;
    v54[0] = v51;
    v55 = (std::string *)", but got ";
    v56 = 770;
    v17 = (const char *)a2[9];
    v57[0] = v54;
    v58 = v17;
    v59 = 2050;
    v18 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v20 = qword_1EF8F7238[0];
    *(_QWORD *)v18 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v57, (_QWORD *)(v18 + 8));
    *(_QWORD *)(v18 + 32) = 3;
    *(_QWORD *)(v18 + 40) = v20;
    *(_BYTE *)(v18 + 48) = 1;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v18;
    if (SHIBYTE(v49) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__r_.__value_.__l.__data_);
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    {
      v21 = (void *)v43.__r_.__value_.__r.__words[0];
LABEL_23:
      operator delete(v21);
    }
  }
}

void sub_1C59A8CEC(_QWORD *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  std::string::size_type v6;
  unsigned int v7;
  std::string *v8;
  std::string::size_type v9;
  std::string *v10;
  std::string::size_type v11;
  std::string *v12;
  const char *v13;
  std::string *v14;
  std::string::size_type v15;
  std::string *v16;
  std::string *v17;
  const char *v18;
  uint64_t v19;
  unint64_t v21;
  void *v22;
  std::string::size_type v23;
  std::string *v24;
  std::string::size_type v25;
  std::string *v26;
  std::string::size_type v27;
  uint64_t v28;
  unint64_t v30;
  std::string *v31;
  std::string::size_type v32;
  std::string *v33;
  std::string::size_type v34;
  uint64_t v35;
  unint64_t v37;
  std::string::size_type v38;
  uint64_t v39;
  std::string::size_type v40;
  std::string::size_type v41;
  std::string v42;
  std::string v43;
  std::string v44;
  __int16 v45;
  std::string v46;
  __int16 v47;
  std::string v48;
  void *__p[2];
  std::string *v50;
  __int16 v51;
  _QWORD v52[2];
  std::string *v53;
  __int16 v54;
  _QWORD v55[2];
  std::string *v56;
  __int16 v57;
  _QWORD v58[2];
  const char *v59;
  __int16 v60;

  if (a2[9] == 12)
  {
    v6 = a2[5];
    v7 = a2[5] / 0xC;
    if (a2[5] % 0xC)
    {
      sub_1C59A4F58(a1, (uint64_t)a2, (char *)&v48);
      v8 = std::string::insert(&v48, 0, "section ");
      v9 = v8->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v44.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      v44.__r_.__value_.__r.__words[2] = v9;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      v10 = std::string::append(&v44, " has an invalid sh_size (");
      v11 = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      __p[0] = &v46;
      v50 = (std::string *)v6;
      v51 = 2052;
      v52[0] = __p;
      v53 = (std::string *)") which is not a multiple of its sh_entsize (";
      v54 = 770;
      v12 = (std::string *)a2[9];
      v55[0] = v52;
      v56 = v12;
      v57 = 2050;
      v13 = ")";
    }
    else
    {
      v23 = a2[4];
      if (!__CFADD__((_DWORD)v23, (_DWORD)v6))
      {
        if (a1[1] >= (unint64_t)(v6 + v23))
        {
          v38 = *a1 + v23;
          *(_BYTE *)(a3 + 16) &= ~1u;
          *(_QWORD *)a3 = v38;
          *(_QWORD *)(a3 + 8) = v7;
          return;
        }
        sub_1C59A4F58(a1, (uint64_t)a2, (char *)&v42);
        v31 = std::string::insert(&v42, 0, "section ");
        v32 = v31->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v43.__r_.__value_.__l.__data_ = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
        v43.__r_.__value_.__r.__words[2] = v32;
        v31->__r_.__value_.__l.__size_ = 0;
        v31->__r_.__value_.__r.__words[2] = 0;
        v31->__r_.__value_.__r.__words[0] = 0;
        v33 = std::string::append(&v43, " has a sh_offset (0x");
        v34 = v33->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v48.__r_.__value_.__l.__data_ = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
        v48.__r_.__value_.__r.__words[2] = v34;
        v33->__r_.__value_.__l.__size_ = 0;
        v33->__r_.__value_.__r.__words[2] = 0;
        v33->__r_.__value_.__r.__words[0] = 0;
        v40 = v6;
        v41 = v23;
        v44.__r_.__value_.__r.__words[0] = (std::string::size_type)&v48;
        v44.__r_.__value_.__r.__words[2] = (std::string::size_type)&v41;
        v45 = 3588;
        v46.__r_.__value_.__r.__words[0] = (std::string::size_type)&v44;
        v46.__r_.__value_.__r.__words[2] = (std::string::size_type)") + sh_size (0x";
        v47 = 770;
        __p[0] = &v46;
        v50 = (std::string *)&v40;
        v51 = 3586;
        v52[0] = __p;
        v53 = (std::string *)") that is greater than the file size (0x";
        v54 = 770;
        v39 = a1[1];
        v55[0] = v52;
        v56 = (std::string *)&v39;
        v57 = 3586;
        v58[0] = v55;
        v59 = ")";
        v60 = 770;
        v35 = operator new();
        if (!atomic_load(qword_1EF8F7238))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
        v37 = qword_1EF8F7238[0];
        *(_QWORD *)v35 = off_1E81A0C88;
        llvm::Twine::str((llvm::Twine *)v58, (_QWORD *)(v35 + 8));
        *(_QWORD *)(v35 + 32) = 3;
        *(_QWORD *)(v35 + 40) = v37;
        *(_BYTE *)(v35 + 48) = 1;
        *(_BYTE *)(a3 + 16) |= 1u;
        *(_QWORD *)a3 = v35;
        if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v48.__r_.__value_.__l.__data_);
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v43.__r_.__value_.__l.__data_);
        if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
        {
          v22 = (void *)v42.__r_.__value_.__r.__words[0];
          goto LABEL_23;
        }
        return;
      }
      sub_1C59A4F58(a1, (uint64_t)a2, (char *)&v48);
      v24 = std::string::insert(&v48, 0, "section ");
      v25 = v24->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v44.__r_.__value_.__l.__data_ = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
      v44.__r_.__value_.__r.__words[2] = v25;
      v24->__r_.__value_.__l.__size_ = 0;
      v24->__r_.__value_.__r.__words[2] = 0;
      v24->__r_.__value_.__r.__words[0] = 0;
      v26 = std::string::append(&v44, " has a sh_offset (0x");
      v27 = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v46.__r_.__value_.__l.__data_ = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v46.__r_.__value_.__r.__words[2] = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      v43.__r_.__value_.__r.__words[0] = v23;
      __p[0] = &v46;
      v50 = &v43;
      v51 = 3588;
      v52[0] = __p;
      v53 = (std::string *)") + sh_size (0x";
      v54 = 770;
      v42.__r_.__value_.__r.__words[0] = v6;
      v55[0] = v52;
      v56 = &v42;
      v57 = 3586;
      v13 = ") that cannot be represented";
    }
    v58[0] = v55;
    v59 = v13;
    v60 = 770;
    v28 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v30 = qword_1EF8F7238[0];
    *(_QWORD *)v28 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v58, (_QWORD *)(v28 + 8));
    *(_QWORD *)(v28 + 32) = 3;
    *(_QWORD *)(v28 + 40) = v30;
    *(_BYTE *)(v28 + 48) = 1;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v28;
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v46.__r_.__value_.__l.__data_);
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v44.__r_.__value_.__l.__data_);
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
    {
      v22 = (void *)v48.__r_.__value_.__r.__words[0];
      goto LABEL_23;
    }
  }
  else
  {
    sub_1C59A4F58(a1, (uint64_t)a2, (char *)&v44);
    v14 = std::string::insert(&v44, 0, "section ");
    v15 = v14->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v46.__r_.__value_.__l.__data_ = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v46.__r_.__value_.__r.__words[2] = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    v16 = std::string::append(&v46, " has invalid sh_entsize: expected ");
    v17 = (std::string *)v16->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    v50 = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    v48.__r_.__value_.__r.__words[0] = 12;
    v52[0] = __p;
    v53 = &v48;
    v54 = 2564;
    v55[0] = v52;
    v56 = (std::string *)", but got ";
    v57 = 770;
    v18 = (const char *)a2[9];
    v58[0] = v55;
    v59 = v18;
    v60 = 2050;
    v19 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v21 = qword_1EF8F7238[0];
    *(_QWORD *)v19 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v58, (_QWORD *)(v19 + 8));
    *(_QWORD *)(v19 + 32) = 3;
    *(_QWORD *)(v19 + 40) = v21;
    *(_BYTE *)(v19 + 48) = 1;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v19;
    if (SHIBYTE(v50) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v46.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v46.__r_.__value_.__l.__data_);
    if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0)
    {
      v22 = (void *)v44.__r_.__value_.__r.__words[0];
LABEL_23:
      operator delete(v22);
    }
  }
}

void sub_1C59A931C(_QWORD *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  std::string::size_type v6;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  std::string::size_type v10;
  std::string *v11;
  const char *v12;
  std::string *v13;
  std::string::size_type v14;
  std::string *v15;
  std::string *v16;
  const char *v17;
  uint64_t v18;
  unint64_t v20;
  void *v21;
  std::string::size_type v22;
  std::string *v23;
  std::string::size_type v24;
  std::string *v25;
  std::string::size_type v26;
  uint64_t v27;
  unint64_t v29;
  std::string *v30;
  std::string::size_type v31;
  std::string *v32;
  std::string::size_type v33;
  uint64_t v34;
  unint64_t v36;
  std::string::size_type v37;
  uint64_t v38;
  std::string::size_type v39;
  std::string::size_type v40;
  std::string v41;
  std::string v42;
  std::string v43;
  __int16 v44;
  std::string v45;
  __int16 v46;
  std::string v47;
  void *__p[2];
  std::string *v49;
  __int16 v50;
  _QWORD v51[2];
  std::string *v52;
  __int16 v53;
  _QWORD v54[2];
  std::string *v55;
  __int16 v56;
  _QWORD v57[2];
  const char *v58;
  __int16 v59;

  if (a2[9] == 8)
  {
    v6 = a2[5];
    if ((v6 & 7) != 0)
    {
      sub_1C59A4F58(a1, (uint64_t)a2, (char *)&v47);
      v7 = std::string::insert(&v47, 0, "section ");
      v8 = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v43.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v43.__r_.__value_.__r.__words[2] = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      v9 = std::string::append(&v43, " has an invalid sh_size (");
      v10 = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v45.__r_.__value_.__l.__data_ = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v45.__r_.__value_.__r.__words[2] = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      __p[0] = &v45;
      v49 = (std::string *)v6;
      v50 = 2052;
      v51[0] = __p;
      v52 = (std::string *)") which is not a multiple of its sh_entsize (";
      v53 = 770;
      v11 = (std::string *)a2[9];
      v54[0] = v51;
      v55 = v11;
      v56 = 2050;
      v12 = ")";
    }
    else
    {
      v22 = a2[4];
      if (!__CFADD__((_DWORD)v22, (_DWORD)v6))
      {
        if (a1[1] >= (unint64_t)(v6 + v22))
        {
          v37 = *a1 + v22;
          *(_BYTE *)(a3 + 16) &= ~1u;
          *(_QWORD *)a3 = v37;
          *(_QWORD *)(a3 + 8) = v6 >> 3;
          return;
        }
        sub_1C59A4F58(a1, (uint64_t)a2, (char *)&v41);
        v30 = std::string::insert(&v41, 0, "section ");
        v31 = v30->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v42.__r_.__value_.__l.__data_ = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        v42.__r_.__value_.__r.__words[2] = v31;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        v32 = std::string::append(&v42, " has a sh_offset (0x");
        v33 = v32->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v47.__r_.__value_.__l.__data_ = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
        v47.__r_.__value_.__r.__words[2] = v33;
        v32->__r_.__value_.__l.__size_ = 0;
        v32->__r_.__value_.__r.__words[2] = 0;
        v32->__r_.__value_.__r.__words[0] = 0;
        v39 = v6;
        v40 = v22;
        v43.__r_.__value_.__r.__words[0] = (std::string::size_type)&v47;
        v43.__r_.__value_.__r.__words[2] = (std::string::size_type)&v40;
        v44 = 3588;
        v45.__r_.__value_.__r.__words[0] = (std::string::size_type)&v43;
        v45.__r_.__value_.__r.__words[2] = (std::string::size_type)") + sh_size (0x";
        v46 = 770;
        __p[0] = &v45;
        v49 = (std::string *)&v39;
        v50 = 3586;
        v51[0] = __p;
        v52 = (std::string *)") that is greater than the file size (0x";
        v53 = 770;
        v38 = a1[1];
        v54[0] = v51;
        v55 = (std::string *)&v38;
        v56 = 3586;
        v57[0] = v54;
        v58 = ")";
        v59 = 770;
        v34 = operator new();
        if (!atomic_load(qword_1EF8F7238))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
        v36 = qword_1EF8F7238[0];
        *(_QWORD *)v34 = off_1E81A0C88;
        llvm::Twine::str((llvm::Twine *)v57, (_QWORD *)(v34 + 8));
        *(_QWORD *)(v34 + 32) = 3;
        *(_QWORD *)(v34 + 40) = v36;
        *(_BYTE *)(v34 + 48) = 1;
        *(_BYTE *)(a3 + 16) |= 1u;
        *(_QWORD *)a3 = v34;
        if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v47.__r_.__value_.__l.__data_);
        if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v42.__r_.__value_.__l.__data_);
        if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
        {
          v21 = (void *)v41.__r_.__value_.__r.__words[0];
          goto LABEL_23;
        }
        return;
      }
      sub_1C59A4F58(a1, (uint64_t)a2, (char *)&v47);
      v23 = std::string::insert(&v47, 0, "section ");
      v24 = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v43.__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v43.__r_.__value_.__r.__words[2] = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      v25 = std::string::append(&v43, " has a sh_offset (0x");
      v26 = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v45.__r_.__value_.__l.__data_ = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v45.__r_.__value_.__r.__words[2] = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      v42.__r_.__value_.__r.__words[0] = v22;
      __p[0] = &v45;
      v49 = &v42;
      v50 = 3588;
      v51[0] = __p;
      v52 = (std::string *)") + sh_size (0x";
      v53 = 770;
      v41.__r_.__value_.__r.__words[0] = v6;
      v54[0] = v51;
      v55 = &v41;
      v56 = 3586;
      v12 = ") that cannot be represented";
    }
    v57[0] = v54;
    v58 = v12;
    v59 = 770;
    v27 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v29 = qword_1EF8F7238[0];
    *(_QWORD *)v27 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v57, (_QWORD *)(v27 + 8));
    *(_QWORD *)(v27 + 32) = 3;
    *(_QWORD *)(v27 + 40) = v29;
    *(_BYTE *)(v27 + 48) = 1;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v27;
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__r_.__value_.__l.__data_);
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v43.__r_.__value_.__l.__data_);
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    {
      v21 = (void *)v47.__r_.__value_.__r.__words[0];
      goto LABEL_23;
    }
  }
  else
  {
    sub_1C59A4F58(a1, (uint64_t)a2, (char *)&v43);
    v13 = std::string::insert(&v43, 0, "section ");
    v14 = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__r.__words[2] = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    v15 = std::string::append(&v45, " has invalid sh_entsize: expected ");
    v16 = (std::string *)v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v49 = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    v47.__r_.__value_.__r.__words[0] = 8;
    v51[0] = __p;
    v52 = &v47;
    v53 = 2564;
    v54[0] = v51;
    v55 = (std::string *)", but got ";
    v56 = 770;
    v17 = (const char *)a2[9];
    v57[0] = v54;
    v58 = v17;
    v59 = 2050;
    v18 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v20 = qword_1EF8F7238[0];
    *(_QWORD *)v18 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v57, (_QWORD *)(v18 + 8));
    *(_QWORD *)(v18 + 32) = 3;
    *(_QWORD *)(v18 + 40) = v20;
    *(_BYTE *)(v18 + 48) = 1;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v18;
    if (SHIBYTE(v49) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__r_.__value_.__l.__data_);
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    {
      v21 = (void *)v43.__r_.__value_.__r.__words[0];
LABEL_23:
      operator delete(v21);
    }
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::decode_relrs(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X2>, unint64_t **a4@<X8>)
{
  llvm::object *v5;
  unsigned int *v6;
  unint64_t *v7;
  unsigned int v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unsigned int v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  unint64_t v20;
  char *v21;
  unint64_t *v22;
  unint64_t v23;
  BOOL v24;
  unint64_t *v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  unint64_t *v31;
  unint64_t v32;
  unsigned int *v33;

  v5 = (llvm::object *)*(unsigned __int16 *)(*(_QWORD *)a1 + 18);
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  if (a3)
  {
    v6 = a2;
    v33 = &a2[a3];
    v7 = 0;
    v8 = 0;
    v9 = (unint64_t)llvm::object::getELFRelativeRelocationType(v5) << 32;
    do
    {
      v10 = *v6;
      if ((v10 & 1) != 0)
      {
        v13 = v8;
        if (v10 >= 2)
        {
          do
          {
            if ((v10 & 2) != 0)
            {
              v14 = (unint64_t)a4[2];
              if ((unint64_t)v7 >= v14)
              {
                v16 = *a4;
                v17 = v7 - *a4;
                v18 = v17 + 1;
                if ((unint64_t)(v17 + 1) >> 61)
                  goto LABEL_46;
                v19 = v14 - (_QWORD)v16;
                if (v19 >> 2 > v18)
                  v18 = v19 >> 2;
                if ((unint64_t)v19 >= 0x7FFFFFFFFFFFFFF8)
                  v20 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v20 = v18;
                if (v20)
                {
                  if (v20 >> 61)
                    goto LABEL_47;
                  v21 = (char *)operator new(8 * v20);
                }
                else
                {
                  v21 = 0;
                }
                v22 = (unint64_t *)&v21[8 * v17];
                *v22 = v9 | v13;
                v15 = v22 + 1;
                if (v7 != v16)
                {
                  do
                  {
                    v23 = *--v7;
                    *--v22 = v23;
                  }
                  while (v7 != v16);
                  v7 = *a4;
                }
                *a4 = v22;
                a4[1] = v15;
                a4[2] = (unint64_t *)&v21[8 * v20];
                if (v7)
                  operator delete(v7);
              }
              else
              {
                *v7 = v9 | v13;
                v15 = v7 + 1;
              }
              a4[1] = v15;
              v7 = v15;
            }
            v13 += 4;
            v24 = v10 >= 4;
            LODWORD(v10) = v10 >> 1;
          }
          while (v24);
        }
        v8 += 124;
      }
      else
      {
        v11 = (unint64_t)a4[2];
        if ((unint64_t)v7 >= v11)
        {
          v25 = *a4;
          v26 = v7 - *a4;
          v27 = v26 + 1;
          if ((unint64_t)(v26 + 1) >> 61)
LABEL_46:
            abort();
          v28 = v11 - (_QWORD)v25;
          if (v28 >> 2 > v27)
            v27 = v28 >> 2;
          if ((unint64_t)v28 >= 0x7FFFFFFFFFFFFFF8)
            v29 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v29 = v27;
          if (v29)
          {
            if (v29 >> 61)
LABEL_47:
              sub_1C4764EE4();
            v30 = (char *)operator new(8 * v29);
          }
          else
          {
            v30 = 0;
          }
          v31 = (unint64_t *)&v30[8 * v26];
          *v31 = v9 | v10;
          v12 = v31 + 1;
          if (v7 != v25)
          {
            do
            {
              v32 = *--v7;
              *--v31 = v32;
            }
            while (v7 != v25);
            v7 = *a4;
          }
          *a4 = v31;
          a4[1] = v12;
          a4[2] = (unint64_t *)&v30[8 * v29];
          if (v7)
            operator delete(v7);
        }
        else
        {
          *v7 = v9 | v10;
          v12 = v7 + 1;
        }
        a4[1] = v12;
        v8 = v10 + 4;
        v7 = v12;
      }
      ++v6;
    }
    while (v6 != v33);
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::android_relas(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE *v5;
  BOOL v6;
  _QWORD *v7;
  unint64_t SLEB128;
  int v9;
  int v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  BOOL v22;
  BOOL v23;
  uint64_t v24;
  int v25;
  int v26;
  char *v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  char *v33;
  char *v34;
  uint64_t v35;
  int v36;
  char *v37;
  BOOL v38;
  uint64_t v39;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  int v45;
  int v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  _QWORD v50[2];
  BOOL v51;
  char v52;
  _QWORD v53[4];
  __int16 v54;
  _BYTE *v55;
  unint64_t v56;
  char v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionContents(a1, a2, (uint64_t)&v55);
  v5 = v55;
  if ((v57 & 1) != 0)
  {
    v55 = 0;
    goto LABEL_12;
  }
  if (v56 < 4 || *v55 != 65 || v55[1] != 80 || v55[2] != 83 || v55[3] != 50)
  {
    v53[0] = "invalid packed relocation header";
    v54 = 259;
    v13 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v15 = qword_1EF8F7238[0];
    *(_QWORD *)v13 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v53, (_QWORD *)(v13 + 8));
    *(_QWORD *)(v13 + 32) = 3;
    *(_QWORD *)(v13 + 40) = v15;
    *(_BYTE *)(v13 + 48) = 1;
    *(_BYTE *)(a3 + 24) |= 1u;
    *(_QWORD *)a3 = v13;
    goto LABEL_16;
  }
  v6 = *(_BYTE *)(*a1 + 5) == 1;
  v50[0] = v55;
  v50[1] = v56;
  v51 = v6;
  v52 = 4;
  v7 = &v49;
  v48 = 4;
  v49 = 0;
  SLEB128 = llvm::DataExtractor::getSLEB128(v50, &v48, &v49);
  v9 = llvm::DataExtractor::getSLEB128(v50, &v48, &v49);
  v5 = v49;
  if (v49)
  {
LABEL_12:
    *(_BYTE *)(a3 + 24) |= 1u;
    *(_QWORD *)a3 = v5;
    goto LABEL_16;
  }
  v10 = v9;
  v42 = a3;
  if (SLEB128)
  {
    if (SLEB128 > 0x1555555555555555)
LABEL_77:
      abort();
    v11 = (char *)operator new(12 * SLEB128);
    v12 = &v11[12 * SLEB128];
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  v17 = 0;
  v18 = v11;
  while (1)
  {
    if (!SLEB128)
    {
      *(_BYTE *)(v42 + 24) &= ~1u;
      *(_QWORD *)v42 = v11;
      *(_QWORD *)(v42 + 8) = v18;
      *(_QWORD *)(v42 + 16) = v12;
      goto LABEL_75;
    }
    v19 = llvm::DataExtractor::getSLEB128(v50, &v48, v7);
    v20 = v49;
    if (v49)
    {
LABEL_68:
      v49 = 0;
      *(_BYTE *)(v42 + 24) |= 1u;
      *(_QWORD *)v42 = v20;
      goto LABEL_73;
    }
    v21 = v19;
    v22 = SLEB128 >= v19;
    SLEB128 -= v19;
    if (!v22)
      break;
    v47 = llvm::DataExtractor::getSLEB128(v50, &v48, v7);
    if ((v47 & 2) != 0)
      v46 = llvm::DataExtractor::getSLEB128(v50, &v48, v7);
    else
      v46 = 0;
    if ((v47 & 1) != 0)
      v45 = llvm::DataExtractor::getSLEB128(v50, &v48, v7);
    else
      v45 = 0;
    v44 = v47 & 0xC;
    if (v44 == 12)
      v17 += llvm::DataExtractor::getSLEB128(v50, &v48, v7);
    v17 &= v47 << 60 >> 63;
    v20 = v49;
    v23 = v49 == 0;
    if (!v49 && v21)
    {
      v43 = SLEB128;
      v24 = 0;
      do
      {
        v25 = v46;
        if ((v47 & 2) == 0)
          v25 = llvm::DataExtractor::getSLEB128(v50, &v48, v7);
        v26 = v45;
        if ((v47 & 1) == 0)
          v26 = llvm::DataExtractor::getSLEB128(v50, &v48, v7);
        if (v44 == 8)
          v17 += llvm::DataExtractor::getSLEB128(v50, &v48, v7);
        v10 += v25;
        if (v18 >= v12)
        {
          v27 = v12;
          v28 = v7;
          v29 = 0xAAAAAAAAAAAAAAABLL * ((v18 - v11) >> 2) + 1;
          if (v29 > 0x1555555555555555)
            goto LABEL_77;
          v30 = 0xAAAAAAAAAAAAAAABLL * ((v27 - v11) >> 2);
          if (2 * v30 > v29)
            v29 = 2 * v30;
          if (v30 >= 0xAAAAAAAAAAAAAAALL)
            v31 = 0x1555555555555555;
          else
            v31 = v29;
          if (v31)
          {
            if (v31 > 0x1555555555555555)
              sub_1C4764EE4();
            v32 = (char *)operator new(12 * v31);
          }
          else
          {
            v32 = 0;
          }
          v33 = &v32[4 * ((v18 - v11) >> 2)];
          *(_DWORD *)v33 = v10;
          *((_DWORD *)v33 + 1) = v26;
          *((_DWORD *)v33 + 2) = v17;
          v34 = v33;
          while (v18 != v11)
          {
            v35 = *(_QWORD *)(v18 - 12);
            v18 -= 12;
            v36 = *((_DWORD *)v18 + 2);
            *(_QWORD *)(v34 - 12) = v35;
            v34 -= 12;
            *((_DWORD *)v34 + 2) = v36;
          }
          v37 = &v32[12 * v31];
          v18 = v33 + 12;
          if (v11)
            operator delete(v11);
          v11 = v34;
          v7 = v28;
          v12 = v37;
        }
        else
        {
          *(_DWORD *)v18 = v10;
          *((_DWORD *)v18 + 1) = v26;
          *((_DWORD *)v18 + 2) = v17;
          v18 += 12;
        }
        ++v24;
        v20 = v49;
        v23 = v49 == 0;
        if (v49)
          v38 = 1;
        else
          v38 = v24 == v21;
      }
      while (!v38);
      SLEB128 = v43;
    }
    if (!v23)
      goto LABEL_68;
  }
  v53[0] = "relocation group unexpectedly large";
  v54 = 259;
  v39 = operator new();
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v41 = qword_1EF8F7238[0];
  *(_QWORD *)v39 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)v53, (_QWORD *)(v39 + 8));
  *(_QWORD *)(v39 + 32) = 3;
  *(_QWORD *)(v39 + 40) = v41;
  *(_BYTE *)(v39 + 48) = 1;
  *(_BYTE *)(v42 + 24) |= 1u;
  *(_QWORD *)v42 = v39;
LABEL_73:
  if (v11)
    operator delete(v11);
LABEL_75:
  if (v49)
    (*(void (**)(_BYTE *))(*(_QWORD *)v49 + 8))(v49);
LABEL_16:
  if ((v57 & 1) != 0)
  {
    v16 = v55;
    v55 = 0;
    if (v16)
      (*(void (**)(_BYTE *))(*(_QWORD *)v16 + 8))(v16);
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::notes_begin(_QWORD *a1@<X0>, uint64_t a2@<X1>, char **a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[4];
  __int16 v14;
  _QWORD v15[4];
  __int16 v16;
  _QWORD v17[4];
  __int16 v18;
  _QWORD v19[4];
  __int16 v20;

  v6 = *(unsigned int *)(a2 + 4);
  v7 = *(unsigned int *)(a2 + 16);
  if (a1[1] >= (unint64_t)(v7 + v6))
  {
    sub_1C59C6BF0(a4, *a1 + v6, v7, a3);
    if (!*a3)
      *a3 = 0;
  }
  else
  {
    v11 = *(unsigned int *)(a2 + 16);
    v12 = v6;
    v13[0] = "invalid offset (0x";
    v13[2] = &v12;
    v14 = 3587;
    v15[0] = v13;
    v15[2] = ") or size (0x";
    v16 = 770;
    v17[0] = v15;
    v17[2] = &v11;
    v18 = 3586;
    v19[0] = v17;
    v19[2] = ")";
    v20 = 770;
    v8 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v10 = qword_1EF8F7238[0];
    *(_QWORD *)v8 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v19, (_QWORD *)(v8 + 8));
    *(_QWORD *)(v8 + 32) = 3;
    *(_QWORD *)(v8 + 40) = v10;
    *(_BYTE *)(v8 + 48) = 1;
    *a3 = (char *)v8;
    *a4 = 0;
    a4[1] = 0;
    a4[2] = a3;
  }
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[4];
  __int16 v14;
  _QWORD v15[4];
  __int16 v16;
  _QWORD v17[4];
  __int16 v18;
  _QWORD v19[4];
  __int16 v20;

  v7 = *(unsigned int *)(a2 + 16);
  v6 = *(unsigned int *)(a2 + 20);
  if (a1[1] >= (unint64_t)(v6 + v7))
  {
    sub_1C59C6BF0(a4, *a1 + v7, v6, a3);
    if (!*a3)
      *a3 = 0;
  }
  else
  {
    v11 = *(unsigned int *)(a2 + 20);
    v12 = v7;
    v13[0] = "invalid offset (0x";
    v13[2] = &v12;
    v14 = 3587;
    v15[0] = v13;
    v15[2] = ") or size (0x";
    v16 = 770;
    v17[0] = v15;
    v17[2] = &v11;
    v18 = 3586;
    v19[0] = v17;
    v19[2] = ")";
    v20 = 770;
    v8 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v10 = qword_1EF8F7238[0];
    *(_QWORD *)v8 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v19, (_QWORD *)(v8 + 8));
    *(_QWORD *)(v8 + 32) = 3;
    *(_QWORD *)(v8 + 40) = v10;
    *(_BYTE *)(v8 + 48) = 1;
    *a3 = (char *)v8;
    *a4 = 0;
    a4[1] = 0;
    a4[2] = a3;
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::notes_end(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::notes(_QWORD *a1@<X0>, uint64_t a2@<X1>, char **a3@<X2>, _QWORD *a4@<X8>)
{
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::notes_begin(a1, a3, a4, a2);
  a4[3] = 0;
  a4[4] = 0;
  a4[5] = 0;
}

{
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::notes_begin(a1, a3, a4, a2);
  a4[3] = 0;
  a4[4] = 0;
  a4[5] = 0;
}

void sub_1C59AA420(unsigned int a1@<W1>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v11;
  char *v12;
  char *v13;
  std::string __p;
  _QWORD v15[4];
  __int16 v16;
  _QWORD v17[2];
  unint64_t v18;
  __int16 v19;
  _QWORD v20[2];
  std::string *p_p;
  __int16 v22;
  char *v23;
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (*a2)
  {
    v4 = a1;
    sub_1C59C6D90(a2, a1, (uint64_t)&v23);
    if ((v24 & 1) != 0)
    {
      v15[0] = "unable to read an extended symbol table at index ";
      v15[2] = v4;
      v16 = 2051;
      v17[0] = v15;
      v18 = (unint64_t)": ";
      v19 = 770;
      v8 = v23;
      v23 = 0;
      v13 = v8;
      sub_1C61D2548(&v13, &__p);
      v20[0] = v17;
      p_p = &__p;
      v22 = 1026;
      v9 = operator new();
      if (!atomic_load(qword_1EF8F7238))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
      v11 = qword_1EF8F7238[0];
      *(_QWORD *)v9 = off_1E81A0C88;
      llvm::Twine::str((llvm::Twine *)v20, (_QWORD *)(v9 + 8));
      *(_QWORD *)(v9 + 32) = 3;
      *(_QWORD *)(v9 + 40) = v11;
      *(_BYTE *)(v9 + 48) = 1;
      *(_BYTE *)(a3 + 8) |= 1u;
      *(_QWORD *)a3 = v9;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v13)
        (*(void (**)(char *))(*(_QWORD *)v13 + 8))(v13);
      if ((v24 & 1) != 0)
      {
        v12 = v23;
        v23 = 0;
        if (v12)
          (*(void (**)(char *))(*(_QWORD *)v12 + 8))(v12);
      }
    }
    else
    {
      *(_BYTE *)(a3 + 8) &= ~1u;
      *(_DWORD *)a3 = (_DWORD)v23;
    }
  }
  else
  {
    v17[0] = "found an extended symbol index (";
    v18 = a1;
    v19 = 2051;
    v20[0] = v17;
    p_p = (std::string *)"), but unable to locate the extended symbol index table";
    v22 = 770;
    v5 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v7 = qword_1EF8F7238[0];
    *(_QWORD *)v5 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v20, (_QWORD *)(v5 + 8));
    *(_QWORD *)(v5 + 32) = 3;
    *(_QWORD *)(v5 + 40) = v7;
    *(_BYTE *)(v5 + 48) = 1;
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v5;
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSymbol(_QWORD *a1@<X0>, unsigned int *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  std::string *v12;
  std::string::size_type v13;
  std::string *v14;
  std::string::size_type v15;
  uint64_t v16;
  unint64_t v18;
  uint64_t v19;
  std::string v20;
  std::string v21;
  void *__p[2];
  std::string::size_type v23;
  _QWORD v24[4];
  __int16 v25;
  _QWORD v26[4];
  __int16 v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    sub_1C59A86D4(a1, a2, (uint64_t)&v28);
    v8 = v30;
    if ((v30 & 1) != 0)
    {
      v10 = v28;
      v28 = 0;
      v11 = *(_BYTE *)(a4 + 8) | 1;
LABEL_17:
      *(_BYTE *)(a4 + 8) = v11;
      *(_QWORD *)a4 = v10;
      if ((v8 & 1) == 0)
        return;
      goto LABEL_18;
    }
    v9 = a3;
    if (v29 > a3)
    {
      v10 = v28 + 16 * a3;
      v11 = *(_BYTE *)(a4 + 8) & 0xFE;
      goto LABEL_17;
    }
  }
  else
  {
    v28 = 0;
    v29 = 0;
    v9 = a3;
    v30 = 0;
  }
  sub_1C59A4F58(a1, (uint64_t)a2, (char *)&v20);
  v12 = std::string::insert(&v20, 0, "unable to get symbol from section ");
  v13 = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  v14 = std::string::append(&v21, ": invalid symbol index (");
  v15 = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v23 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v24[0] = __p;
  v24[2] = v9;
  v25 = 2052;
  v26[0] = v24;
  v26[2] = ")";
  v27 = 770;
  v16 = operator new();
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v18 = qword_1EF8F7238[0];
  *(_QWORD *)v16 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)v26, (_QWORD *)(v16 + 8));
  *(_QWORD *)(v16 + 32) = 3;
  *(_QWORD *)(v16 + 40) = v18;
  *(_BYTE *)(v16 + 48) = 1;
  *(_BYTE *)(a4 + 8) |= 1u;
  *(_QWORD *)a4 = v16;
  if (SHIBYTE(v23) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if ((v30 & 1) != 0)
  {
LABEL_18:
    v19 = v28;
    v28 = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionName(_QWORD *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v6;
  const char *v7;
  size_t v8;
  std::string *v9;
  std::string::size_type v10;
  std::string *v11;
  std::string::size_type v12;
  uint64_t v13;
  unint64_t v15;
  unint64_t v16;
  std::string v17;
  std::string v18;
  void *__p[2];
  std::string::size_type v20;
  _QWORD v21[4];
  __int16 v22;
  _QWORD v23[4];
  __int16 v24;

  v6 = *a2;
  if ((_DWORD)v6)
  {
    if (a4 <= v6)
    {
      sub_1C59A4F58(a1, (uint64_t)a2, (char *)&v17);
      v9 = std::string::insert(&v17, 0, "a section ");
      v10 = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v18.__r_.__value_.__r.__words[2] = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      v11 = std::string::append(&v18, " has an invalid sh_name (0x");
      v12 = v11->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      v20 = v12;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      v16 = v6;
      v21[0] = __p;
      v21[2] = &v16;
      v22 = 3588;
      v23[0] = v21;
      v23[2] = ") offset which goes past the end of the section name string table";
      v24 = 770;
      v13 = operator new();
      if (!atomic_load(qword_1EF8F7238))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
      v15 = qword_1EF8F7238[0];
      *(_QWORD *)v13 = off_1E81A0C88;
      llvm::Twine::str((llvm::Twine *)v23, (_QWORD *)(v13 + 8));
      *(_QWORD *)(v13 + 32) = 3;
      *(_QWORD *)(v13 + 40) = v15;
      *(_BYTE *)(v13 + 48) = 1;
      *(_BYTE *)(a5 + 16) |= 1u;
      *(_QWORD *)a5 = v13;
      if (SHIBYTE(v20) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v18.__r_.__value_.__l.__data_);
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v17.__r_.__value_.__l.__data_);
    }
    else
    {
      v7 = (const char *)(a3 + v6);
      v8 = strlen(v7);
      *(_BYTE *)(a5 + 16) &= ~1u;
      *(_QWORD *)a5 = v7;
      *(_QWORD *)(a5 + 8) = v8;
    }
  }
  else
  {
    *(_BYTE *)(a5 + 16) &= ~1u;
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSegmentContents(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::string::size_type v5;
  std::string::size_type v6;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  const char *v10;
  uint64_t v11;
  unint64_t v13;
  void *v14;
  std::string *v15;
  std::string::size_type v16;
  std::string *v17;
  std::string::size_type v18;
  uint64_t v19;
  unint64_t v21;
  std::string::size_type v22;
  uint64_t v23;
  std::string::size_type v24;
  std::string::size_type v25;
  std::string v26;
  std::string v27;
  std::string v28;
  __int16 v29;
  void *__p[2];
  const char *v31;
  __int16 v32;
  std::string v33;
  _QWORD v34[2];
  std::string *v35;
  __int16 v36;
  _QWORD v37[2];
  const char *v38;
  __int16 v39;
  _QWORD v40[2];
  std::string *v41;
  __int16 v42;
  _QWORD v43[2];
  const char *v44;
  __int16 v45;

  v5 = *(unsigned int *)(a2 + 4);
  v6 = *(unsigned int *)(a2 + 16);
  if (__CFADD__((_DWORD)v5, (_DWORD)v6))
  {
    sub_1C59AAE88((char *)&v33, a1, a2);
    v7 = std::string::insert(&v33, 0, "program header ");
    v8 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    v9 = std::string::append(&v28, " has a p_offset (0x");
    v10 = (const char *)v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v31 = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    v27.__r_.__value_.__r.__words[0] = v5;
    v34[0] = __p;
    v35 = &v27;
    v36 = 3588;
    v37[0] = v34;
    v38 = ") + p_filesz (0x";
    v39 = 770;
    v26.__r_.__value_.__r.__words[0] = v6;
    v40[0] = v37;
    v41 = &v26;
    v42 = 3586;
    v43[0] = v40;
    v44 = ") that cannot be represented";
    v45 = 770;
    v11 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v13 = qword_1EF8F7238[0];
    *(_QWORD *)v11 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v43, (_QWORD *)(v11 + 8));
    *(_QWORD *)(v11 + 32) = 3;
    *(_QWORD *)(v11 + 40) = v13;
    *(_BYTE *)(v11 + 48) = 1;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v11;
    if (SHIBYTE(v31) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v28.__r_.__value_.__l.__data_);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    {
      v14 = (void *)v33.__r_.__value_.__r.__words[0];
LABEL_20:
      operator delete(v14);
    }
  }
  else if (a1[1] >= (unint64_t)(v6 + v5))
  {
    v22 = *a1 + v5;
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_QWORD *)a3 = v22;
    *(_QWORD *)(a3 + 8) = v6;
  }
  else
  {
    sub_1C59AAE88((char *)&v26, a1, a2);
    v15 = std::string::insert(&v26, 0, "program header  ");
    v16 = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v27.__r_.__value_.__r.__words[2] = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    v17 = std::string::append(&v27, " has a p_offset (0x");
    v18 = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v33.__r_.__value_.__r.__words[2] = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    v24 = v6;
    v25 = v5;
    v28.__r_.__value_.__r.__words[0] = (std::string::size_type)&v33;
    v28.__r_.__value_.__r.__words[2] = (std::string::size_type)&v25;
    v29 = 3588;
    __p[0] = &v28;
    v31 = ") + p_filesz (0x";
    v32 = 770;
    v34[0] = __p;
    v35 = (std::string *)&v24;
    v36 = 3586;
    v37[0] = v34;
    v38 = ") that is greater than the file size (0x";
    v39 = 770;
    v23 = a1[1];
    v40[0] = v37;
    v41 = (std::string *)&v23;
    v42 = 3586;
    v43[0] = v40;
    v44 = ")";
    v45 = 770;
    v19 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v21 = qword_1EF8F7238[0];
    *(_QWORD *)v19 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v43, (_QWORD *)(v19 + 8));
    *(_QWORD *)(v19 + 32) = 3;
    *(_QWORD *)(v19 + 40) = v21;
    *(_BYTE *)(v19 + 48) = 1;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v19;
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v27.__r_.__value_.__l.__data_);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    {
      v14 = (void *)v26.__r_.__value_.__r.__words[0];
      goto LABEL_20;
    }
  }
}

void sub_1C59AAE88(char *a1, _QWORD *a2, uint64_t a3)
{
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8[4];
  __int16 v9;
  char *v10[4];
  __int16 v11;
  char *v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::program_headers(a2, (uint64_t)&v12);
  if ((v13 & 1) != 0)
  {
    v5 = v12;
    v12 = 0;
    v8[0] = v5;
    sub_1C4D62BD4(v8, v10);
    if (v8[0])
      (*(void (**)(char *))(*(_QWORD *)v8[0] + 8))(v8[0]);
    a1[23] = 15;
    strcpy(a1, "[unknown index]");
  }
  else
  {
    v7 = (a3 - (uint64_t)v12) >> 5;
    v8[0] = "[index ";
    v8[2] = (char *)&v7;
    v9 = 2819;
    v10[0] = (char *)v8;
    v10[2] = "]";
    v11 = 770;
    llvm::Twine::str((llvm::Twine *)v10, a1);
  }
  if ((v13 & 1) != 0)
  {
    v6 = v12;
    v12 = 0;
    if (v6)
      (*(void (**)(char *))(*(_QWORD *)v6 + 8))(v6);
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::decodeBBAddrMap(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v5;
  unsigned int Unsigned;
  uint64_t v7;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  unsigned int v12;
  char *v13;
  char *v14;
  BOOL v15;
  unint64_t v16;
  unint64_t v18;
  int v19;
  int v20;
  unint64_t v21;
  unint64_t v23;
  int v24;
  unint64_t v26;
  unsigned int v27;
  char v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int v34;
  int v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  int v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unint64_t v47;
  unsigned int v48;
  unsigned int v49;
  char *v50;
  char *v51;
  uint64_t v52;
  unsigned __int128 v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56[2];
  BOOL v57;
  unsigned __int8 v58;
  _QWORD v59[2];
  uint64_t *v60;
  __int16 v61;
  _QWORD v62[2];
  const char *v63;
  __int16 v64;
  _QWORD v65[2];
  unint64_t *p_ULEB128;
  __int16 v67;
  unint64_t v68;
  void *v69;
  const char *v70;
  uint64_t v71;
  __int16 v72;
  unint64_t ULEB128;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,false>>::getSectionContents(a1, a2, (uint64_t)&v75);
  if ((v77 & 1) != 0)
  {
    v42 = v75;
    *(_BYTE *)(a3 + 24) |= 1u;
    *(_QWORD *)a3 = v42;
  }
  else
  {
    v44 = a3;
    v5 = *(_BYTE *)(*a1 + 5) == 1;
    v56[0] = v75;
    v56[1] = v76;
    v57 = v5;
    v58 = 4;
    v54 = 0uLL;
    v55 = 0;
    v53 = 0uLL;
    v45 = v76;
    if (v76)
    {
      while (1)
      {
        Unsigned = llvm::DataExtractor::getUnsigned(v56, (unint64_t *)&v53, v58, (uint64_t *)&v53 + 1);
        v74 = v53;
        ULEB128 = llvm::DataExtractor::getULEB128(v56, (uint64_t *)&v53, (_QWORD *)&v53 + 1);
        v48 = ULEB128;
        v46 = Unsigned;
        if (!HIDWORD(ULEB128))
          break;
        v59[0] = "ULEB128 value at offset 0x";
        v60 = &v74;
        v61 = 3587;
        v62[0] = v59;
        v63 = " exceeds UINT32_MAX (0x";
        v64 = 770;
        v65[0] = v62;
        p_ULEB128 = &ULEB128;
        v67 = 3586;
        v68 = (unint64_t)v65;
        v70 = ")";
        v72 = 770;
        v7 = operator new();
        if (!atomic_load(qword_1EF8F7238))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
        v9 = qword_1EF8F7238[0];
        *(_QWORD *)v7 = off_1E81A0C88;
        llvm::Twine::str((llvm::Twine *)&v68, (_QWORD *)(v7 + 8));
        v10 = 0;
        v11 = 0;
        *(_QWORD *)(v7 + 32) = 3;
        *(_QWORD *)(v7 + 40) = v9;
        *(_BYTE *)(v7 + 48) = 1;
LABEL_49:
        v68 = v46;
        v70 = 0;
        v71 = 0;
        v69 = 0;
        sub_1C59C6EE4(&v69, v10, v11, 0xAAAAAAAAAAAAAAABLL * ((v11 - (uint64_t)v10) >> 2));
        sub_1C59AB80C((void **)&v54, (uint64_t)&v68);
        if (v69)
          operator delete(v69);
        if (v10)
          operator delete(v10);
        v41 = (char *)*((_QWORD *)&v53 + 1);
        if (v7 || v53 >= (unint64_t)v45)
          goto LABEL_58;
      }
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v10 = 0;
      while (1)
      {
        if (*((_QWORD *)&v53 + 1))
          v15 = 1;
        else
          v15 = v12 >= v48;
        if (v15)
        {
          v7 = 0;
          v11 = (uint64_t)v14;
          goto LABEL_49;
        }
        v74 = v53;
        v16 = llvm::DataExtractor::getULEB128(v56, (uint64_t *)&v53, (_QWORD *)&v53 + 1);
        ULEB128 = v16;
        v49 = v12;
        if (HIDWORD(v16))
        {
          v59[0] = "ULEB128 value at offset 0x";
          v60 = &v74;
          v61 = 3587;
          v62[0] = v59;
          v63 = " exceeds UINT32_MAX (0x";
          v64 = 770;
          v65[0] = v62;
          p_ULEB128 = &ULEB128;
          v67 = 3586;
          v68 = (unint64_t)v65;
          v70 = ")";
          v72 = 770;
          v7 = operator new();
          if (!atomic_load(qword_1EF8F7238))
            llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
          v18 = qword_1EF8F7238[0];
          *(_QWORD *)v7 = off_1E81A0C88;
          llvm::Twine::str((llvm::Twine *)&v68, (_QWORD *)(v7 + 8));
          v19 = 0;
          v20 = 0;
        }
        else
        {
          v20 = v16;
          v74 = v53;
          v21 = llvm::DataExtractor::getULEB128(v56, (uint64_t *)&v53, (_QWORD *)&v53 + 1);
          ULEB128 = v21;
          if (!HIDWORD(v21))
          {
            v24 = v21;
            v74 = v53;
            v23 = llvm::DataExtractor::getULEB128(v56, (uint64_t *)&v53, (_QWORD *)&v53 + 1);
            ULEB128 = v23;
            if (HIDWORD(v23))
            {
              v59[0] = "ULEB128 value at offset 0x";
              v60 = &v74;
              v61 = 3587;
              v62[0] = v59;
              v63 = " exceeds UINT32_MAX (0x";
              v64 = 770;
              v65[0] = v62;
              p_ULEB128 = &ULEB128;
              v67 = 3586;
              v68 = (unint64_t)v65;
              v70 = ")";
              v72 = 770;
              v7 = operator new();
              if (!atomic_load(qword_1EF8F7238))
                llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
              v26 = qword_1EF8F7238[0];
              *(_QWORD *)v7 = off_1E81A0C88;
              llvm::Twine::str((llvm::Twine *)&v68, (_QWORD *)(v7 + 8));
              LODWORD(v23) = 0;
              *(_QWORD *)(v7 + 32) = 3;
              *(_QWORD *)(v7 + 40) = v26;
              *(_BYTE *)(v7 + 48) = 1;
            }
            else
            {
              v7 = 0;
            }
            v19 = v24;
            goto LABEL_27;
          }
          v59[0] = "ULEB128 value at offset 0x";
          v60 = &v74;
          v61 = 3587;
          v62[0] = v59;
          v63 = " exceeds UINT32_MAX (0x";
          v64 = 770;
          v65[0] = v62;
          p_ULEB128 = &ULEB128;
          v67 = 3586;
          v68 = (unint64_t)v65;
          v70 = ")";
          v72 = 770;
          v7 = operator new();
          if (!atomic_load(qword_1EF8F7238))
            llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
          v18 = qword_1EF8F7238[0];
          *(_QWORD *)v7 = off_1E81A0C88;
          llvm::Twine::str((llvm::Twine *)&v68, (_QWORD *)(v7 + 8));
          v19 = 0;
        }
        LODWORD(v23) = 0;
        *(_QWORD *)(v7 + 32) = 3;
        *(_QWORD *)(v7 + 40) = v18;
        *(_BYTE *)(v7 + 48) = 1;
LABEL_27:
        v27 = (v23 >> 1) & 1;
        v28 = v23 & 1;
        v29 = (v23 >> 2) & 1;
        v30 = (v23 >> 3) & 1;
        if (v14 >= v13)
        {
          v32 = 0xAAAAAAAAAAAAAAABLL * ((v14 - v10) >> 2) + 1;
          if (v32 > 0x1555555555555555)
            abort();
          if (0x5555555555555556 * ((v13 - v10) >> 2) > v32)
            v32 = 0x5555555555555556 * ((v13 - v10) >> 2);
          if (0xAAAAAAAAAAAAAAABLL * ((v13 - v10) >> 2) >= 0xAAAAAAAAAAAAAAALL)
            v33 = 0x1555555555555555;
          else
            v33 = v32;
          if (v33)
          {
            if (v33 > 0x1555555555555555)
              sub_1C4764EE4();
            v34 = (v23 >> 3) & 1;
            v35 = v19;
            v47 = v33;
            v36 = (char *)operator new(12 * v33);
            v33 = v47;
            v19 = v35;
            LOBYTE(v30) = v34;
          }
          else
          {
            v36 = 0;
          }
          v37 = &v36[4 * ((v14 - v10) >> 2)];
          *(_DWORD *)v37 = v20;
          *((_DWORD *)v37 + 1) = v19;
          v37[8] = v28;
          v37[9] = v27;
          v37[10] = v29;
          v37[11] = v30;
          if (v14 == v10)
          {
            v10 = &v36[4 * ((v14 - v10) >> 2)];
            v31 = v49;
          }
          else
          {
            v38 = &v36[4 * ((v14 - v10) >> 2)];
            v31 = v49;
            do
            {
              v39 = *(_QWORD *)(v14 - 12);
              v14 -= 12;
              v40 = *((_DWORD *)v14 + 2);
              *(_QWORD *)(v38 - 12) = v39;
              v38 -= 12;
              *((_DWORD *)v38 + 2) = v40;
            }
            while (v14 != v10);
            v14 = v10;
            v10 = v38;
          }
          v13 = &v36[12 * v33];
          v11 = (uint64_t)(v37 + 12);
          if (v14)
            operator delete(v14);
        }
        else
        {
          *(_DWORD *)v14 = v20;
          *((_DWORD *)v14 + 1) = v19;
          v14[8] = v28;
          v14[9] = (v23 & 2) != 0;
          v14[10] = (v23 & 4) != 0;
          v11 = (uint64_t)(v14 + 12);
          v14[11] = (v23 & 8) != 0;
          v31 = v49;
        }
        v12 = v31 + 1;
        v14 = (char *)v11;
        if (v7)
          goto LABEL_49;
      }
    }
    v7 = 0;
    v41 = 0;
LABEL_58:
    if (v7 | (unint64_t)v41)
    {
      v50 = (char *)v7;
      v51 = v41;
      *((_QWORD *)&v53 + 1) = 0;
      sub_1C624E8DC(&v51, &v50, &v52);
      *(_BYTE *)(v44 + 24) |= 1u;
      *(_QWORD *)v44 = v52;
      v52 = 0;
      if (v50)
        (*(void (**)(char *))(*(_QWORD *)v50 + 8))(v50);
      if (v51)
        (*(void (**)(char *))(*(_QWORD *)v51 + 8))(v51);
    }
    else
    {
      *(_BYTE *)(v44 + 24) &= ~1u;
      *(_OWORD *)v44 = v54;
      *(_QWORD *)(v44 + 16) = v55;
      v54 = 0uLL;
      v55 = 0;
    }
    if (*((_QWORD *)&v53 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v53 + 1) + 8))(*((_QWORD *)&v53 + 1));
    v68 = (unint64_t)&v54;
    sub_1C52E1318((void ***)&v68);
    if ((v77 & 1) != 0)
    {
      v43 = v75;
      v75 = 0;
      if (v43)
        (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
    }
  }
}

void sub_1C59AB80C(void **a1, uint64_t a2)
{
  _QWORD *v4;
  unint64_t v5;
  _QWORD *v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  char *v11;
  char *v12;
  char *v13;
  char *v14;
  char *v15;
  uint64_t v16;
  char *v17;
  char *v18;
  char *v19;
  void *v20;

  v4 = a1[1];
  v5 = (unint64_t)a1[2];
  if ((unint64_t)v4 >= v5)
  {
    v7 = ((char *)v4 - (_BYTE *)*a1) >> 5;
    v8 = v7 + 1;
    if ((unint64_t)(v7 + 1) >> 59)
      abort();
    v9 = v5 - (_QWORD)*a1;
    if (v9 >> 4 > v8)
      v8 = v9 >> 4;
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFE0)
      v10 = 0x7FFFFFFFFFFFFFFLL;
    else
      v10 = v8;
    if (v10 >> 59)
      sub_1C4764EE4();
    v11 = (char *)operator new(32 * v10);
    v12 = &v11[32 * v7];
    v13 = &v11[32 * v10];
    *(_QWORD *)v12 = *(_QWORD *)a2;
    *(_OWORD *)(v12 + 8) = *(_OWORD *)(a2 + 8);
    *((_QWORD *)v12 + 3) = *(_QWORD *)(a2 + 24);
    v6 = v12 + 32;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
    v14 = (char *)*a1;
    v15 = (char *)a1[1];
    if (v15 == *a1)
    {
      *a1 = v12;
      a1[1] = v6;
      a1[2] = v13;
    }
    else
    {
      v16 = 0;
      do
      {
        v17 = &v12[v16];
        v18 = &v15[v16];
        *((_QWORD *)v17 - 4) = *(_QWORD *)&v15[v16 - 32];
        *((_QWORD *)v17 - 3) = 0;
        *((_QWORD *)v17 - 2) = 0;
        *((_QWORD *)v17 - 1) = 0;
        *(_OWORD *)(v17 - 24) = *(_OWORD *)&v15[v16 - 24];
        *((_QWORD *)v17 - 1) = *(_QWORD *)&v15[v16 - 8];
        *((_QWORD *)v18 - 3) = 0;
        *((_QWORD *)v18 - 2) = 0;
        *((_QWORD *)v18 - 1) = 0;
        v16 -= 32;
      }
      while (&v15[v16] != v14);
      v15 = (char *)*a1;
      v19 = (char *)a1[1];
      *a1 = &v12[v16];
      a1[1] = v6;
      a1[2] = v13;
      while (v19 != v15)
      {
        v20 = (void *)*((_QWORD *)v19 - 3);
        if (v20)
        {
          *((_QWORD *)v19 - 2) = v20;
          operator delete(v20);
        }
        v19 -= 32;
      }
    }
    if (v15)
      operator delete(v15);
  }
  else
  {
    *v4 = *(_QWORD *)a2;
    v4[1] = 0;
    v4[2] = 0;
    v4[3] = 0;
    *(_OWORD *)(v4 + 1) = *(_OWORD *)(a2 + 8);
    v4[3] = *(_QWORD *)(a2 + 24);
    v6 = v4 + 4;
    *(_QWORD *)(a2 + 8) = 0;
    *(_QWORD *)(a2 + 16) = 0;
    *(_QWORD *)(a2 + 24) = 0;
  }
  a1[1] = v6;
}

uint64_t llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::base(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::end(_QWORD *a1)
{
  return *a1 + a1[1];
}

uint64_t llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getBufSize(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

_QWORD *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::ELFFile(_QWORD *result, uint64_t a2, uint64_t a3)
{
  *result = a2;
  result[1] = a3;
  return result;
}

{
  *result = a2;
  result[1] = a3;
  return result;
}

uint64_t llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getHeader(uint64_t a1)
{
  return *(_QWORD *)a1;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getVersionDefinitions(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int16 *v6;
  char v7;
  unsigned int v8;
  unsigned int v9;
  __int128 *v10;
  __int128 *v11;
  int v12;
  char v13;
  unint64_t v14;
  _BYTE *v15;
  __int128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  __int128 v20;
  std::string::size_type v21;
  uint64_t v22;
  std::string *v23;
  std::string::size_type v24;
  std::string *v25;
  std::string::size_type v26;
  std::string *v27;
  uint64_t v28;
  unint64_t v30;
  void *v31;
  std::string *v32;
  std::string::size_type v33;
  std::string *v34;
  char *v35;
  std::string::size_type v36;
  std::string *v37;
  std::string::size_type size;
  std::string *v39;
  std::string::size_type v40;
  uint64_t v41;
  unint64_t v43;
  void *v44;
  std::string *v45;
  std::string::size_type v46;
  std::string *v47;
  std::string::size_type v48;
  const char *v49;
  std::string *v50;
  std::string::size_type v51;
  std::string *v52;
  std::string::size_type v53;
  std::string::size_type v54;
  std::string *v55;
  std::string::size_type v56;
  std::string *v57;
  std::string::size_type v58;
  uint64_t v59;
  unint64_t v61;
  std::string::size_type v62;
  std::string::size_type v63;
  std::string::size_type v64;
  uint64_t v65;
  uint64_t v66;
  unint64_t *v67;
  std::string *v68;
  std::string::size_type v69;
  std::string v70;
  std::string __p;
  __int16 v72;
  unint64_t v73;
  uint64_t v74;
  char *v75;
  std::string v76;
  std::string v77;
  std::string v78;
  _QWORD v79[4];
  _QWORD *v80;
  _BYTE v81[24];
  uint64_t v82;
  __int16 v83;
  _QWORD v84[2];
  char v85;
  _QWORD v86[2];
  char v87;
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getLinkAsStrtab(a1, a2, (uint64_t)v86);
  if ((v87 & 1) != 0)
  {
    v22 = v86[0];
    *(_BYTE *)(a3 + 24) |= 1u;
    *(_QWORD *)a3 = v22;
    return;
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionContents(a1, a2, (uint64_t)v84);
  if ((v85 & 1) != 0)
  {
    sub_1C59AC748(&v77, a1, a2);
    v32 = std::string::insert(&v77, 0, "cannot read content of ");
    v33 = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v78.__r_.__value_.__l.__data_ = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v78.__r_.__value_.__r.__words[2] = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    v34 = std::string::append(&v78, ": ");
    v35 = 0;
    v36 = v34->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v36;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    if ((v85 & 1) != 0)
    {
      v35 = (char *)v84[0];
      v84[0] = 0;
    }
    v75 = v35;
    sub_1C61D2548(&v75, &v76);
    if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v37 = &v76;
    else
      v37 = (std::string *)v76.__r_.__value_.__r.__words[0];
    if ((v76.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&v76.__r_.__value_.__s + 23) & 0x7F;
    else
      size = v76.__r_.__value_.__l.__size_;
    v39 = std::string::append(&__p, (const std::string::value_type *)v37, size);
    v40 = v39->__r_.__value_.__r.__words[2];
    *(_OWORD *)v81 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
    *(_QWORD *)&v81[16] = v40;
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    LOWORD(v80) = 260;
    v79[0] = v81;
    v41 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v43 = qword_1EF8F7238[0];
    *(_QWORD *)v41 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v79, (_QWORD *)(v41 + 8));
    *(_QWORD *)(v41 + 32) = 3;
    *(_QWORD *)(v41 + 40) = v43;
    *(_BYTE *)(v41 + 48) = 1;
    *(_BYTE *)(a3 + 24) |= 1u;
    *(_QWORD *)a3 = v41;
    if ((v81[23] & 0x80000000) != 0)
      operator delete(*(void **)v81);
    if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v76.__r_.__value_.__l.__data_);
    if (v75)
      (*(void (**)(char *))(*(_QWORD *)v75 + 8))(v75);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v78.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v78.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v77.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_86;
    v44 = (void *)v77.__r_.__value_.__r.__words[0];
  }
  else
  {
    v6 = (unsigned __int16 *)v84[0];
    v73 = v84[0] + v84[1];
    v74 = v84[0];
    v79[0] = &v73;
    v79[1] = a1;
    v79[2] = a2;
    v79[3] = &v74;
    v80 = v86;
    memset(&v78, 0, sizeof(v78));
    if (!*(_DWORD *)(a2 + 28))
    {
      v21 = 0;
      v7 = *(_BYTE *)(a3 + 24);
      v20 = 0uLL;
LABEL_33:
      *(_BYTE *)(a3 + 24) = v7 & 0xFE;
      *(_OWORD *)a3 = v20;
      *(_QWORD *)(a3 + 16) = v21;
      goto LABEL_86;
    }
    v7 = *(_BYTE *)(a3 + 24);
    v8 = 1;
    while (1)
    {
      if ((unint64_t)(v6 + 10) > v73)
      {
        sub_1C59AC748(&v70, a1, a2);
        v45 = std::string::insert(&v70, 0, "invalid ");
        v46 = v45->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v76.__r_.__value_.__l.__data_ = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
        v76.__r_.__value_.__r.__words[2] = v46;
        v45->__r_.__value_.__l.__size_ = 0;
        v45->__r_.__value_.__r.__words[2] = 0;
        v45->__r_.__value_.__r.__words[0] = 0;
        v47 = std::string::append(&v76, ": version definition ");
        v48 = v47->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v77.__r_.__value_.__l.__data_ = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        v77.__r_.__value_.__r.__words[2] = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v77;
        __p.__r_.__value_.__r.__words[2] = v8;
        v72 = 2052;
        v49 = " goes past the end of the section";
        goto LABEL_68;
      }
      if ((v6 & 3) != 0)
      {
        sub_1C59AC748(&v76, a1, a2);
        v50 = std::string::insert(&v76, 0, "invalid ");
        v51 = v50->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v77.__r_.__value_.__l.__data_ = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
        v77.__r_.__value_.__r.__words[2] = v51;
        v50->__r_.__value_.__l.__size_ = 0;
        v50->__r_.__value_.__r.__words[2] = 0;
        v50->__r_.__value_.__r.__words[0] = 0;
        v52 = std::string::append(&v77, ": found a misaligned version definition entry at offset 0x");
        v53 = v52->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v53;
        v52->__r_.__value_.__l.__size_ = 0;
        v52->__r_.__value_.__r.__words[2] = 0;
        v52->__r_.__value_.__r.__words[0] = 0;
        v70.__r_.__value_.__r.__words[0] = (std::string::size_type)v6 - v74;
        v27 = &v70;
        goto LABEL_35;
      }
      v9 = *v6;
      if (v9 != 256)
        break;
      v10 = sub_1C59A35D4((uint64_t)&v78, v78.__r_.__value_.__l.__size_);
      *(_DWORD *)v10 = (_DWORD)v6 - v74;
      *((_DWORD *)v10 + 1) = bswap32(*v6) >> 16;
      *((_DWORD *)v10 + 2) = bswap32(v6[1]) >> 16;
      *((_DWORD *)v10 + 3) = bswap32(v6[2]) >> 16;
      *((_DWORD *)v10 + 4) = bswap32(v6[3]) >> 16;
      *((_DWORD *)v10 + 5) = bswap32(*((_DWORD *)v6 + 2));
      v70.__r_.__value_.__r.__words[0] = (std::string::size_type)v6 + bswap32(*((_DWORD *)v6 + 3));
      if (v6[3])
      {
        v11 = v10;
        v12 = 0;
        v67 = (unint64_t *)(v10 + 3);
        v68 = (std::string *)((char *)v10 + 24);
        while ((v70.__r_.__value_.__s.__data_[0] & 3) == 0)
        {
          sub_1C59AC820((uint64_t)v79, (unsigned int **)&v70, v8, (uint64_t)v81);
          v13 = v83;
          if ((v83 & 1) != 0)
          {
            v17 = *(_QWORD *)v81;
            *(_QWORD *)v81 = 0;
            v7 |= 1u;
            *(_BYTE *)(a3 + 24) = v7;
            *(_QWORD *)a3 = v17;
          }
          else if (v12)
          {
            v14 = *((_QWORD *)v11 + 7);
            if (v14 >= *((_QWORD *)v11 + 8))
            {
              v18 = sub_1C59C53F0(v67, (uint64_t)v81);
            }
            else
            {
              *(_DWORD *)v14 = *(_DWORD *)v81;
              v15 = (_BYTE *)(v14 + 8);
              if (SHIBYTE(v82) < 0)
              {
                sub_1C47EBC30(v15, *(void **)&v81[8], *(unint64_t *)&v81[16]);
              }
              else
              {
                v16 = *(_OWORD *)&v81[8];
                *(_QWORD *)(v14 + 24) = v82;
                *(_OWORD *)v15 = v16;
              }
              v18 = (char *)(v14 + 32);
            }
            *((_QWORD *)v11 + 7) = v18;
          }
          else
          {
            std::string::operator=(v68, (const std::string *)&v81[8]);
          }
          if ((v83 & 1) != 0)
          {
            v19 = *(_QWORD *)v81;
            *(_QWORD *)v81 = 0;
            if (v19)
              (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
          }
          else if (SHIBYTE(v82) < 0)
          {
            operator delete(*(void **)&v81[8]);
          }
          if ((v13 & 1) != 0)
            goto LABEL_77;
          if (++v12 >= bswap32(v6[3]) >> 16)
            goto LABEL_29;
        }
        sub_1C59AC748(&v76, a1, a2);
        v23 = std::string::insert(&v76, 0, "invalid ");
        v24 = v23->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v77.__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
        v77.__r_.__value_.__r.__words[2] = v24;
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        v25 = std::string::append(&v77, ": found a misaligned auxiliary entry at offset 0x");
        v26 = v25->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        v69 = v70.__r_.__value_.__r.__words[0] - v74;
        v27 = (std::string *)&v69;
LABEL_35:
        *(_QWORD *)v81 = &__p;
        *(_QWORD *)&v81[16] = v27;
        v83 = 3588;
        v28 = operator new();
        if (!atomic_load(qword_1EF8F7238))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
        v30 = qword_1EF8F7238[0];
        *(_QWORD *)v28 = off_1E81A0C88;
        llvm::Twine::str((llvm::Twine *)v81, (_QWORD *)(v28 + 8));
        *(_QWORD *)(v28 + 32) = 3;
        *(_QWORD *)(v28 + 40) = v30;
        *(_BYTE *)(v28 + 48) = 1;
        *(_BYTE *)(a3 + 24) = v7 | 1;
        *(_QWORD *)a3 = v28;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v77.__r_.__value_.__l.__data_);
        if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
        {
          v31 = (void *)v76.__r_.__value_.__r.__words[0];
LABEL_76:
          operator delete(v31);
          goto LABEL_77;
        }
        goto LABEL_77;
      }
LABEL_29:
      v6 = (unsigned __int16 *)((char *)v6 + bswap32(*((_DWORD *)v6 + 4)));
      if (++v8 > bswap32(*(_DWORD *)(a2 + 28)))
      {
        v20 = *(_OWORD *)&v78.__r_.__value_.__l.__data_;
        v21 = v78.__r_.__value_.__r.__words[2];
        goto LABEL_33;
      }
    }
    v54 = __rev16(v9);
    sub_1C59AC748(&v70, a1, a2);
    v55 = std::string::insert(&v70, 0, "unable to dump ");
    v56 = v55->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v76.__r_.__value_.__l.__data_ = *(_OWORD *)&v55->__r_.__value_.__l.__data_;
    v76.__r_.__value_.__r.__words[2] = v56;
    v55->__r_.__value_.__l.__size_ = 0;
    v55->__r_.__value_.__r.__words[2] = 0;
    v55->__r_.__value_.__r.__words[0] = 0;
    v57 = std::string::append(&v76, ": version ");
    v58 = v57->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v77.__r_.__value_.__l.__data_ = *(_OWORD *)&v57->__r_.__value_.__l.__data_;
    v77.__r_.__value_.__r.__words[2] = v58;
    v57->__r_.__value_.__l.__size_ = 0;
    v57->__r_.__value_.__r.__words[2] = 0;
    v57->__r_.__value_.__r.__words[0] = 0;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v77;
    __p.__r_.__value_.__r.__words[2] = v54;
    v72 = 2052;
    v49 = " is not yet supported";
LABEL_68:
    *(_QWORD *)v81 = &__p;
    *(_QWORD *)&v81[16] = v49;
    v83 = 770;
    v59 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v61 = qword_1EF8F7238[0];
    *(_QWORD *)v59 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v81, (_QWORD *)(v59 + 8));
    *(_QWORD *)(v59 + 32) = 3;
    *(_QWORD *)(v59 + 40) = v61;
    *(_BYTE *)(v59 + 48) = 1;
    *(_BYTE *)(a3 + 24) = v7 | 1;
    *(_QWORD *)a3 = v59;
    if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v77.__r_.__value_.__l.__data_);
    if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v76.__r_.__value_.__l.__data_);
    if (SHIBYTE(v70.__r_.__value_.__r.__words[2]) < 0)
    {
      v31 = (void *)v70.__r_.__value_.__r.__words[0];
      goto LABEL_76;
    }
LABEL_77:
    v62 = v78.__r_.__value_.__r.__words[0];
    if (!v78.__r_.__value_.__r.__words[0])
      goto LABEL_86;
    v44 = (void *)v78.__r_.__value_.__r.__words[0];
    if (v78.__r_.__value_.__l.__size_ != v78.__r_.__value_.__r.__words[0])
    {
      v63 = v78.__r_.__value_.__l.__size_ - 24;
      do
      {
        *(_QWORD *)v81 = v63;
        sub_1C4FF890C((void ***)v81);
        if (*(char *)(v63 - 1) < 0)
          operator delete(*(void **)(v63 - 24));
        v64 = v63 - 48;
        v63 -= 72;
      }
      while (v64 != v62);
      v44 = (void *)v78.__r_.__value_.__r.__words[0];
    }
    v78.__r_.__value_.__l.__size_ = v62;
  }
  operator delete(v44);
LABEL_86:
  if ((v85 & 1) != 0)
  {
    v65 = v84[0];
    v84[0] = 0;
    if (v65)
      (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
  }
  if ((v87 & 1) != 0)
  {
    v66 = v86[0];
    v86[0] = 0;
    if (v66)
      (*(void (**)(uint64_t))(*(_QWORD *)v66 + 8))(v66);
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getLinkAsStrtab(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  char *v10;
  std::string::size_type v11;
  std::string *p_p;
  std::string::size_type size;
  std::string *v14;
  std::string::size_type v15;
  uint64_t v16;
  unint64_t v18;
  std::string *v19;
  std::string::size_type v20;
  std::string *v21;
  char *v22;
  std::string::size_type v23;
  std::string *v24;
  std::string::size_type v25;
  std::string *v26;
  std::string::size_type v27;
  uint64_t v28;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  std::string v33;
  char *v34;
  std::string __p;
  std::string v36;
  std::string v37;
  std::string v38;
  _QWORD v39[4];
  __int16 v40;
  __int128 v41;
  std::string::size_type v42;
  char *v43;
  char v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSection(a1, bswap32(*(_DWORD *)(a2 + 24)), (uint64_t)&v43);
  if ((v44 & 1) != 0)
  {
    sub_1C59AC748(&v36, a1, a2);
    v7 = std::string::insert(&v36, 0, "invalid section linked to ");
    v8 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__r.__words[2] = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    v9 = std::string::append(&v37, ": ");
    v10 = 0;
    v11 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v38.__r_.__value_.__r.__words[2] = v11;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if ((v44 & 1) != 0)
    {
      v10 = v43;
      v43 = 0;
    }
    v34 = v10;
    sub_1C61D2548(&v34, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
    else
      size = __p.__r_.__value_.__l.__size_;
    v14 = std::string::append(&v38, (const std::string::value_type *)p_p, size);
    v15 = v14->__r_.__value_.__r.__words[2];
    v41 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v42 = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    v40 = 260;
    v39[0] = &v41;
    v16 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v18 = qword_1EF8F7238[0];
    *(_QWORD *)v16 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v39, (_QWORD *)(v16 + 8));
    *(_QWORD *)(v16 + 32) = 3;
    *(_QWORD *)(v16 + 40) = v18;
    *(_BYTE *)(v16 + 48) = 1;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v16;
    if (SHIBYTE(v42) < 0)
      operator delete((void *)v41);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v34)
      (*(void (**)(char *))(*(_QWORD *)v34 + 8))(v34);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v37.__r_.__value_.__l.__data_);
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v36.__r_.__value_.__l.__data_);
  }
  else
  {
    v39[0] = sub_1C59A5848;
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getStringTable(a1, (uint64_t)v43, (void (*)(std::string *__return_ptr, uint64_t, _QWORD *))sub_1C62CD258, (uint64_t)v39, (uint64_t)&v41);
    if ((v42 & 1) != 0)
    {
      sub_1C59AC748(&__p, a1, a2);
      v19 = std::string::insert(&__p, 0, "invalid string table linked to ");
      v20 = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v36.__r_.__value_.__l.__data_ = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v36.__r_.__value_.__r.__words[2] = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      v21 = std::string::append(&v36, ": ");
      v22 = 0;
      v23 = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v37.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v37.__r_.__value_.__r.__words[2] = v23;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      if ((v42 & 1) != 0)
      {
        v22 = (char *)v41;
        *(_QWORD *)&v41 = 0;
      }
      v32 = v22;
      sub_1C61D2548(&v32, &v33);
      if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v24 = &v33;
      else
        v24 = (std::string *)v33.__r_.__value_.__r.__words[0];
      if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v25 = *((_BYTE *)&v33.__r_.__value_.__s + 23) & 0x7F;
      else
        v25 = v33.__r_.__value_.__l.__size_;
      v26 = std::string::append(&v37, (const std::string::value_type *)v24, v25);
      v27 = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v38.__r_.__value_.__l.__data_ = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v38.__r_.__value_.__r.__words[2] = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      v40 = 260;
      v39[0] = &v38;
      v28 = operator new();
      if (!atomic_load(qword_1EF8F7238))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
      v30 = qword_1EF8F7238[0];
      *(_QWORD *)v28 = off_1E81A0C88;
      llvm::Twine::str((llvm::Twine *)v39, (_QWORD *)(v28 + 8));
      *(_QWORD *)(v28 + 32) = 3;
      *(_QWORD *)(v28 + 40) = v30;
      *(_BYTE *)(v28 + 48) = 1;
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v28;
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v38.__r_.__value_.__l.__data_);
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v33.__r_.__value_.__l.__data_);
      if (v32)
        (*(void (**)(char *))(*(_QWORD *)v32 + 8))(v32);
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v37.__r_.__value_.__l.__data_);
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v36.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if ((v42 & 1) != 0)
      {
        v31 = v41;
        *(_QWORD *)&v41 = 0;
        if (v31)
          (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
      }
    }
    else
    {
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_OWORD *)a3 = v41;
    }
  }
  if ((v44 & 1) != 0)
  {
    v6 = (uint64_t)v43;
    v43 = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
}

void sub_1C59AC748(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v6;
  const char *ELFSectionTypeName;
  uint64_t v8;
  _QWORD v9[4];
  __int16 v10;
  _QWORD v11[4];
  __int16 v12;
  _QWORD v13[4];

  v13[3] = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::sections(a2, (uint64_t)v13);
  v6 = -858993459 * ((unint64_t)(a3 - v13[0]) >> 3);
  ELFSectionTypeName = llvm::object::getELFSectionTypeName((llvm::object *)(bswap32(*(unsigned __int16 *)(*a2 + 18)) >> 16), bswap32(*(_DWORD *)(a3 + 4)));
  v10 = 773;
  v9[0] = ELFSectionTypeName;
  v9[1] = v8;
  v9[2] = " section with index ";
  v11[0] = v9;
  v11[2] = v6;
  v12 = 2050;
  llvm::Twine::str((llvm::Twine *)v11, a1);
}

void sub_1C59AC820(uint64_t a1@<X0>, unsigned int **a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int *v5;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  std::string::size_type v10;
  uint64_t v11;
  unint64_t v13;
  unsigned int *v14;
  uint64_t *v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  _QWORD *v20;
  char v21;
  uint64_t v22;
  _QWORD **p_dst;
  uint64_t v24;
  uint64_t v25;
  std::string::size_type v26;
  std::string v27;
  _BYTE __p[24];
  _QWORD v29[2];
  unint64_t v30;
  __int16 v31;
  _QWORD *__dst;
  __int128 v33;
  __int16 v34;
  std::string v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  if ((unint64_t)(*a2 + 2) <= **(_QWORD **)a1)
  {
    v14 = (unsigned int *)((char *)v5 + bswap32(v5[1]));
    *a2 = v14;
    v15 = *(uint64_t **)(a1 + 32);
    v16 = **(_DWORD **)(a1 + 24);
    v17 = bswap32(*v5);
    v18 = v15[1];
    v19 = v18 - v17;
    if (v18 < v17)
    {
      v29[0] = "<invalid vda_name: ";
      v30 = v17;
      v31 = 2051;
      __dst = v29;
      *((_QWORD *)&v33 + 1) = ">";
      v34 = 770;
      llvm::Twine::str((llvm::Twine *)&__dst, __p);
      v20 = *(_QWORD **)__p;
      v35.__r_.__value_.__r.__words[0] = *(_QWORD *)&__p[8];
      *(std::string::size_type *)((char *)v35.__r_.__value_.__r.__words + 7) = *(_QWORD *)&__p[15];
      v21 = __p[23];
LABEL_21:
      *(_BYTE *)(a4 + 32) &= ~1u;
      *(_DWORD *)a4 = (_DWORD)v14 - v16;
      v26 = v35.__r_.__value_.__r.__words[0];
      *(_QWORD *)(a4 + 8) = v20;
      *(_QWORD *)(a4 + 16) = v26;
      *(_QWORD *)(a4 + 23) = *(std::string::size_type *)((char *)v35.__r_.__value_.__r.__words + 7);
      *(_BYTE *)(a4 + 31) = v21;
      return;
    }
    if (v19 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v22 = *v15;
    if (v19 >= 0x17)
    {
      v24 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v19 | 7) != 0x17)
        v24 = v19 | 7;
      v25 = v24 + 1;
      p_dst = (_QWORD **)operator new(v24 + 1);
      *(_QWORD *)&v33 = v19;
      *((_QWORD *)&v33 + 1) = v25 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v33) = v18 - v17;
      p_dst = &__dst;
      if (v18 == v17)
        goto LABEL_20;
    }
    memmove(p_dst, (const void *)(v22 + v17), v19);
LABEL_20:
    *((_BYTE *)p_dst + v19) = 0;
    v20 = __dst;
    v35.__r_.__value_.__r.__words[0] = v33;
    *(std::string::size_type *)((char *)v35.__r_.__value_.__r.__words + 7) = *(_QWORD *)((char *)&v33 + 7);
    v21 = HIBYTE(v33);
    goto LABEL_21;
  }
  sub_1C59AC748(&v27, *(_QWORD **)(a1 + 8), *(_QWORD *)(a1 + 16));
  v7 = std::string::insert(&v27, 0, "invalid ");
  v8 = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  v9 = std::string::append(&v35, ": version definition ");
  v10 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  *(_QWORD *)&__p[16] = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  v29[0] = __p;
  v30 = a3;
  v31 = 2052;
  __dst = v29;
  *((_QWORD *)&v33 + 1) = " refers to an auxiliary entry that goes past the end of the section";
  v34 = 770;
  v11 = operator new();
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v13 = qword_1EF8F7238[0];
  *(_QWORD *)v11 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)&__dst, (_QWORD *)(v11 + 8));
  *(_QWORD *)(v11 + 32) = 3;
  *(_QWORD *)(v11 + 40) = v13;
  *(_BYTE *)(v11 + 48) = 1;
  *(_BYTE *)(a4 + 32) |= 1u;
  *(_QWORD *)a4 = v11;
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getVersionDependencies(_QWORD *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr, uint64_t, __int128 *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  unint64_t v13;
  unsigned int v14;
  unsigned __int16 *v15;
  unsigned int v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __int128 *p_dst;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char *v27;
  _DWORD *v28;
  _DWORD *v29;
  unint64_t v30;
  size_t v31;
  __int128 *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void **v37;
  std::string::size_type v38;
  std::string *v39;
  std::string::size_type v40;
  std::string *v41;
  std::string::size_type v42;
  std::string::size_type v43;
  uint64_t v44;
  unint64_t v46;
  void *v47;
  std::string *v48;
  std::string::size_type v49;
  std::string *v50;
  std::string::size_type v51;
  const char *v52;
  uint64_t v53;
  unint64_t v55;
  std::string::size_type v56;
  void *v57;
  std::string::size_type v58;
  std::string::size_type v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  std::string *v65;
  std::string::size_type v66;
  std::string *v67;
  char *v68;
  std::string::size_type v69;
  std::string *v70;
  std::string::size_type size;
  std::string *v72;
  std::string::size_type v73;
  uint64_t v74;
  unint64_t v76;
  std::string *v77;
  std::string::size_type v78;
  std::string *v79;
  std::string::size_type v80;
  std::string *v81;
  std::string::size_type v82;
  std::string *v83;
  std::string::size_type v84;
  std::string::size_type v85;
  std::string *v86;
  std::string::size_type v87;
  std::string *v88;
  std::string::size_type v89;
  unint64_t v90;
  uint64_t v91;
  uint64_t v92;
  unsigned int v93;
  _QWORD *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  char **v98;
  std::string __p;
  __int16 v100;
  char *v101;
  std::string v102;
  std::string v103;
  std::string v104;
  std::string v105;
  char *v106;
  __int128 __dst;
  const char *v108;
  __int16 v109;
  _QWORD v110[2];
  char v111;
  _QWORD v112[2];
  char v113;
  uint64_t v114;

  v7 = a2;
  v8 = a1;
  v114 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getLinkAsStrtab(a1, a2, (uint64_t)v112);
  v94 = v8;
  if ((v113 & 1) != 0)
  {
    v62 = (char *)v112[0];
    v112[0] = 0;
    v106 = v62;
    sub_1C61D2548(&v106, &__p);
    v109 = 260;
    *(_QWORD *)&__dst = &__p;
    a3(v110, a4, &__dst);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v106)
      (*(void (**)(char *))(*(_QWORD *)v106 + 8))(v106);
    v63 = v110[0];
    if (v110[0])
    {
      *(_BYTE *)(a5 + 24) |= 1u;
      *(_QWORD *)a5 = v63;
      goto LABEL_73;
    }
    v97 = 0;
    v10 = 0;
  }
  else
  {
    v10 = v112[1];
    v97 = v112[0];
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionContents(v8, v7, (uint64_t)v110);
  if ((v111 & 1) != 0)
  {
    v64 = a5;
    sub_1C59AC748(&v103, v8, v7);
    v65 = std::string::insert(&v103, 0, "cannot read content of ");
    v66 = v65->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v104.__r_.__value_.__l.__data_ = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
    v104.__r_.__value_.__r.__words[2] = v66;
    v65->__r_.__value_.__l.__size_ = 0;
    v65->__r_.__value_.__r.__words[2] = 0;
    v65->__r_.__value_.__r.__words[0] = 0;
    v67 = std::string::append(&v104, ": ");
    v68 = 0;
    v69 = v67->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v105.__r_.__value_.__l.__data_ = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
    v105.__r_.__value_.__r.__words[2] = v69;
    v67->__r_.__value_.__l.__size_ = 0;
    v67->__r_.__value_.__r.__words[2] = 0;
    v67->__r_.__value_.__r.__words[0] = 0;
    if ((v111 & 1) != 0)
    {
      v68 = (char *)v110[0];
      v110[0] = 0;
    }
    v101 = v68;
    sub_1C61D2548(&v101, &v102);
    if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v70 = &v102;
    else
      v70 = (std::string *)v102.__r_.__value_.__r.__words[0];
    if ((v102.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&v102.__r_.__value_.__s + 23) & 0x7F;
    else
      size = v102.__r_.__value_.__l.__size_;
    v72 = std::string::append(&v105, (const std::string::value_type *)v70, size);
    v73 = v72->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v73;
    v72->__r_.__value_.__l.__size_ = 0;
    v72->__r_.__value_.__r.__words[2] = 0;
    v72->__r_.__value_.__r.__words[0] = 0;
    v109 = 260;
    *(_QWORD *)&__dst = &__p;
    v74 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v76 = qword_1EF8F7238[0];
    *(_QWORD *)v74 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)&__dst, (_QWORD *)(v74 + 8));
    *(_QWORD *)(v74 + 32) = 3;
    *(_QWORD *)(v74 + 40) = v76;
    *(_BYTE *)(v74 + 48) = 1;
    *(_BYTE *)(v64 + 24) |= 1u;
    *(_QWORD *)v64 = v74;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v102.__r_.__value_.__l.__data_);
    if (v101)
      (*(void (**)(char *))(*(_QWORD *)v101 + 8))(v101);
    if (SHIBYTE(v105.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v105.__r_.__value_.__l.__data_);
    if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v104.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v103.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_70;
    v57 = (void *)v103.__r_.__value_.__r.__words[0];
  }
  else
  {
    v11 = v110[0];
    v12 = 0uLL;
    memset(&v105, 0, sizeof(v105));
    if (!*(_DWORD *)(v7 + 28))
    {
      v38 = 0;
LABEL_41:
      *(_BYTE *)(a5 + 24) &= ~1u;
      *(_OWORD *)a5 = v12;
      *(_QWORD *)(a5 + 16) = v38;
      goto LABEL_70;
    }
    v91 = a5;
    v92 = v7;
    v13 = v110[0] + v110[1];
    v14 = 1;
    v15 = (unsigned __int16 *)v110[0];
    v96 = v10;
    while (1)
    {
      if ((unint64_t)(v15 + 10) > v13)
      {
        sub_1C59AC748(&v102, v8, v7);
        v77 = std::string::insert(&v102, 0, "invalid ");
        v78 = v77->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v103.__r_.__value_.__l.__data_ = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
        v103.__r_.__value_.__r.__words[2] = v78;
        v77->__r_.__value_.__l.__size_ = 0;
        v77->__r_.__value_.__r.__words[2] = 0;
        v77->__r_.__value_.__r.__words[0] = 0;
        v79 = std::string::append(&v103, ": version dependency ");
        v80 = v79->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v104.__r_.__value_.__l.__data_ = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
        v104.__r_.__value_.__r.__words[2] = v80;
        v79->__r_.__value_.__l.__size_ = 0;
        v79->__r_.__value_.__r.__words[2] = 0;
        v79->__r_.__value_.__r.__words[0] = 0;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v104;
        __p.__r_.__value_.__r.__words[2] = v14;
        v100 = 2052;
        v52 = " goes past the end of the section";
        goto LABEL_52;
      }
      if ((v15 & 3) != 0)
        break;
      v16 = *v15;
      if (v16 != 256)
      {
        v85 = __rev16(v16);
        sub_1C59AC748(&v102, v8, v7);
        v86 = std::string::insert(&v102, 0, "unable to dump ");
        v87 = v86->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v103.__r_.__value_.__l.__data_ = *(_OWORD *)&v86->__r_.__value_.__l.__data_;
        v103.__r_.__value_.__r.__words[2] = v87;
        v86->__r_.__value_.__l.__size_ = 0;
        v86->__r_.__value_.__r.__words[2] = 0;
        v86->__r_.__value_.__r.__words[0] = 0;
        v88 = std::string::append(&v103, ": version ");
        v89 = v88->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v104.__r_.__value_.__l.__data_ = *(_OWORD *)&v88->__r_.__value_.__l.__data_;
        v104.__r_.__value_.__r.__words[2] = v89;
        v88->__r_.__value_.__l.__size_ = 0;
        v88->__r_.__value_.__r.__words[2] = 0;
        v88->__r_.__value_.__r.__words[0] = 0;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v104;
        __p.__r_.__value_.__r.__words[2] = v85;
        v100 = 2052;
        v52 = " is not yet supported";
        goto LABEL_52;
      }
      v17 = sub_1C59A4610((uint64_t)&v105, (_OWORD *)v105.__r_.__value_.__l.__size_);
      *(_DWORD *)v17 = bswap32(*v15) >> 16;
      *(_DWORD *)(v17 + 4) = bswap32(v15[1]) >> 16;
      *(_DWORD *)(v17 + 8) = (_DWORD)v15 - v11;
      v18 = bswap32(*((_DWORD *)v15 + 1));
      v19 = v10 - v18;
      v93 = v14;
      if (v10 <= v18)
      {
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"<corrupt vn_file: ";
        v90 = v90 & 0xFFFFFFFF00000000 | v18;
        __p.__r_.__value_.__r.__words[2] = v90;
        v100 = 2051;
        *(_QWORD *)&__dst = &__p;
        v108 = ">";
        v109 = 770;
        llvm::Twine::str((llvm::Twine *)&__dst, &v104);
        v21 = v17 + 16;
        v22 = v17;
        if (*(char *)(v17 + 39) < 0)
          operator delete(*(void **)v21);
        v23 = (const char *)v104.__r_.__value_.__r.__words[2];
        *(_OWORD *)v21 = *(_OWORD *)&v104.__r_.__value_.__l.__data_;
      }
      else
      {
        if (v19 > 0x7FFFFFFFFFFFFFF7)
LABEL_109:
          abort();
        if (v19 >= 0x17)
        {
          v24 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v19 | 7) != 0x17)
            v24 = v19 | 7;
          v25 = v24 + 1;
          p_dst = (__int128 *)operator new(v24 + 1);
          *((_QWORD *)&__dst + 1) = v10 - v18;
          v108 = (const char *)(v25 | 0x8000000000000000);
          *(_QWORD *)&__dst = p_dst;
        }
        else
        {
          HIBYTE(v108) = v10 - v18;
          p_dst = &__dst;
        }
        memmove(p_dst, (const void *)(v97 + v18), v10 - v18);
        *((_BYTE *)p_dst + v19) = 0;
        v22 = v17;
        v21 = v17 + 16;
        if (*(char *)(v17 + 39) < 0)
          operator delete(*(void **)v21);
        *(_OWORD *)v21 = __dst;
        v23 = v108;
      }
      *(_QWORD *)(v21 + 16) = v23;
      if (v15[1])
      {
        v26 = 0;
        v27 = (char *)v15 + bswap32(*((_DWORD *)v15 + 2));
        v98 = (char **)(v22 + 40);
        v95 = v22;
        while (1)
        {
          if ((v27 & 3) != 0)
          {
            sub_1C59AC748(&v103, v94, v92);
            v39 = std::string::insert(&v103, 0, "invalid ");
            v40 = v39->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v104.__r_.__value_.__l.__data_ = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
            v104.__r_.__value_.__r.__words[2] = v40;
            v39->__r_.__value_.__l.__size_ = 0;
            v39->__r_.__value_.__r.__words[2] = 0;
            v39->__r_.__value_.__r.__words[0] = 0;
            v41 = std::string::append(&v104, ": found a misaligned auxiliary entry at offset 0x");
            v42 = v41->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
            __p.__r_.__value_.__r.__words[2] = v42;
            v41->__r_.__value_.__l.__size_ = 0;
            v41->__r_.__value_.__r.__words[2] = 0;
            v41->__r_.__value_.__r.__words[0] = 0;
            v43 = (std::string::size_type)&v27[-v11];
            goto LABEL_43;
          }
          if ((unint64_t)(v27 + 16) > v13)
            break;
          v28 = (_DWORD *)sub_1C59A47F0(v98, *(_QWORD *)(v22 + 48));
          v29 = v28;
          *v28 = bswap32(*(_DWORD *)v27);
          v28[1] = bswap32(*((unsigned __int16 *)v27 + 2)) >> 16;
          v28[2] = bswap32(*((unsigned __int16 *)v27 + 3)) >> 16;
          v28[3] = (_DWORD)v27 - v11;
          v30 = bswap32(*((_DWORD *)v27 + 2));
          v31 = v10 - v30;
          if (v10 <= v30)
          {
            MEMORY[0x1CAA32ABC](v28 + 4, "<corrupt>");
          }
          else
          {
            if (v31 > 0x7FFFFFFFFFFFFFF7)
              goto LABEL_109;
            if (v31 >= 0x17)
            {
              v33 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v31 | 7) != 0x17)
                v33 = v31 | 7;
              v34 = v11;
              v35 = v33 + 1;
              v32 = (__int128 *)operator new(v33 + 1);
              v36 = v35 | 0x8000000000000000;
              v11 = v34;
              v22 = v95;
              *((_QWORD *)&__dst + 1) = v31;
              v108 = (const char *)v36;
              *(_QWORD *)&__dst = v32;
            }
            else
            {
              HIBYTE(v108) = v10 - v30;
              v32 = &__dst;
            }
            memmove(v32, (const void *)(v97 + v30), v31);
            *((_BYTE *)v32 + v31) = 0;
            v37 = (void **)(v29 + 4);
            if (*((char *)v29 + 39) < 0)
              operator delete(*v37);
            *(_OWORD *)v37 = __dst;
            *((_QWORD *)v29 + 4) = v108;
            v10 = v96;
          }
          v27 += bswap32(*((_DWORD *)v27 + 3));
          if (++v26 >= bswap32(v15[1]) >> 16)
            goto LABEL_38;
        }
        sub_1C59AC748(&v102, v94, v92);
        v48 = std::string::insert(&v102, 0, "invalid ");
        v49 = v48->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v103.__r_.__value_.__l.__data_ = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
        v103.__r_.__value_.__r.__words[2] = v49;
        v48->__r_.__value_.__l.__size_ = 0;
        v48->__r_.__value_.__r.__words[2] = 0;
        v48->__r_.__value_.__r.__words[0] = 0;
        v50 = std::string::append(&v103, ": version dependency ");
        v51 = v50->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v104.__r_.__value_.__l.__data_ = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
        v104.__r_.__value_.__r.__words[2] = v51;
        v50->__r_.__value_.__l.__size_ = 0;
        v50->__r_.__value_.__r.__words[2] = 0;
        v50->__r_.__value_.__r.__words[0] = 0;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v104;
        __p.__r_.__value_.__r.__words[2] = v93;
        v100 = 2052;
        v52 = " refers to an auxiliary entry that goes past the end of the section";
LABEL_52:
        *(_QWORD *)&__dst = &__p;
        v108 = v52;
        v109 = 770;
        v53 = operator new();
        if (!atomic_load(qword_1EF8F7238))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
        v55 = qword_1EF8F7238[0];
        *(_QWORD *)v53 = off_1E81A0C88;
        llvm::Twine::str((llvm::Twine *)&__dst, (_QWORD *)(v53 + 8));
        *(_QWORD *)(v53 + 32) = 3;
        *(_QWORD *)(v53 + 40) = v55;
        *(_BYTE *)(v53 + 48) = 1;
        *(_BYTE *)(v91 + 24) |= 1u;
        *(_QWORD *)v91 = v53;
        if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v104.__r_.__value_.__l.__data_);
        if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v103.__r_.__value_.__l.__data_);
        if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
        {
          v47 = (void *)v102.__r_.__value_.__r.__words[0];
          goto LABEL_60;
        }
        goto LABEL_61;
      }
LABEL_38:
      v15 = (unsigned __int16 *)((char *)v15 + bswap32(*((_DWORD *)v15 + 3)));
      v14 = v93 + 1;
      v7 = v92;
      v8 = v94;
      if (v93 + 1 > bswap32(*(_DWORD *)(v92 + 28)))
      {
        v12 = *(_OWORD *)&v105.__r_.__value_.__l.__data_;
        v38 = v105.__r_.__value_.__r.__words[2];
        a5 = v91;
        goto LABEL_41;
      }
    }
    sub_1C59AC748(&v103, v8, v7);
    v81 = std::string::insert(&v103, 0, "invalid ");
    v82 = v81->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v104.__r_.__value_.__l.__data_ = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
    v104.__r_.__value_.__r.__words[2] = v82;
    v81->__r_.__value_.__l.__size_ = 0;
    v81->__r_.__value_.__r.__words[2] = 0;
    v81->__r_.__value_.__r.__words[0] = 0;
    v83 = std::string::append(&v104, ": found a misaligned version dependency entry at offset 0x");
    v84 = v83->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v84;
    v83->__r_.__value_.__l.__size_ = 0;
    v83->__r_.__value_.__r.__words[2] = 0;
    v83->__r_.__value_.__r.__words[0] = 0;
    v43 = (std::string::size_type)v15 - v11;
LABEL_43:
    v102.__r_.__value_.__r.__words[0] = v43;
    *(_QWORD *)&__dst = &__p;
    v108 = (const char *)&v102;
    v109 = 3588;
    v44 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v46 = qword_1EF8F7238[0];
    *(_QWORD *)v44 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)&__dst, (_QWORD *)(v44 + 8));
    *(_QWORD *)(v44 + 32) = 3;
    *(_QWORD *)(v44 + 40) = v46;
    *(_BYTE *)(v44 + 48) = 1;
    *(_BYTE *)(v91 + 24) |= 1u;
    *(_QWORD *)v91 = v44;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v104.__r_.__value_.__l.__data_);
    if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
    {
      v47 = (void *)v103.__r_.__value_.__r.__words[0];
LABEL_60:
      operator delete(v47);
    }
LABEL_61:
    v56 = v105.__r_.__value_.__r.__words[0];
    if (!v105.__r_.__value_.__r.__words[0])
      goto LABEL_70;
    v57 = (void *)v105.__r_.__value_.__r.__words[0];
    if (v105.__r_.__value_.__l.__size_ != v105.__r_.__value_.__r.__words[0])
    {
      v58 = v105.__r_.__value_.__l.__size_ - 24;
      do
      {
        *(_QWORD *)&__dst = v58;
        sub_1C59C5618((void ***)&__dst);
        if (*(char *)(v58 - 1) < 0)
          operator delete(*(void **)(v58 - 24));
        v59 = v58 - 40;
        v58 -= 64;
      }
      while (v59 != v56);
      v57 = (void *)v105.__r_.__value_.__r.__words[0];
    }
    v105.__r_.__value_.__l.__size_ = v56;
  }
  operator delete(v57);
LABEL_70:
  if ((v111 & 1) != 0)
  {
    v60 = v110[0];
    v110[0] = 0;
    if (v60)
      (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
  }
LABEL_73:
  if ((v113 & 1) != 0)
  {
    v61 = v112[0];
    v112[0] = 0;
    if (v61)
      (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getStringTable(_QWORD *a1@<X0>, uint64_t a2@<X1>, void (*a3)(std::string *__return_ptr, uint64_t, _QWORD *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  std::string *v10;
  std::string::size_type v11;
  const std::string::value_type *v12;
  std::string *v13;
  std::string::size_type v14;
  std::string *v15;
  std::string::size_type v16;
  uint64_t v17;
  unint64_t v19;
  uint64_t v20;
  std::string *v23;
  std::string::size_type v24;
  std::string *v25;
  std::string::size_type v26;
  const char *ELFSectionTypeName;
  uint64_t v28;
  std::string::size_type v29;
  std::string v30;
  std::string v31;
  std::string __p;
  _QWORD v33[4];
  __int16 v34;
  __int128 v35;
  std::string::size_type v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a2 + 4) != 50331648)
  {
    sub_1C59AD9D0(a1, a2, (char *)&v31);
    v23 = std::string::insert(&v31, 0, "invalid sh_type for string table section ");
    v24 = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    v25 = std::string::append(&__p, ": expected SHT_STRTAB, but got ");
    v26 = v25->__r_.__value_.__r.__words[2];
    v35 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v36 = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    ELFSectionTypeName = llvm::object::getELFSectionTypeName((llvm::object *)(bswap32(*(unsigned __int16 *)(*a1 + 18)) >> 16), bswap32(*(_DWORD *)(a2 + 4)));
    v33[0] = &v35;
    v33[2] = ELFSectionTypeName;
    v33[3] = v28;
    v34 = 1284;
    a3(&v30, a4, v33);
    if (SHIBYTE(v36) < 0)
      operator delete((void *)v35);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
    v29 = v30.__r_.__value_.__r.__words[0];
    if (v30.__r_.__value_.__r.__words[0])
    {
      *(_BYTE *)(a5 + 16) |= 1u;
      *(_QWORD *)a5 = v29;
      return;
    }
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionContents(a1, a2, (uint64_t)&v35);
  v8 = v35;
  if ((v36 & 1) != 0)
  {
    *(_QWORD *)&v35 = 0;
    *(_BYTE *)(a5 + 16) |= 1u;
    *(_QWORD *)a5 = v8;
  }
  else
  {
    v9 = *((_QWORD *)&v35 + 1);
    if (!*((_QWORD *)&v35 + 1))
    {
      sub_1C59AD9D0(a1, a2, (char *)&v30);
      v13 = std::string::insert(&v30, 0, "SHT_STRTAB string table section ");
      v14 = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v31.__r_.__value_.__r.__words[2] = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      v12 = " is empty";
      goto LABEL_8;
    }
    if (*(_BYTE *)(*((_QWORD *)&v35 + 1) + v35 - 1))
    {
      sub_1C59AD9D0(a1, a2, (char *)&v30);
      v10 = std::string::insert(&v30, 0, "SHT_STRTAB string table section ");
      v11 = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v31.__r_.__value_.__r.__words[2] = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      v12 = " is non-null terminated";
LABEL_8:
      v15 = std::string::append(&v31, v12);
      v16 = v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      v34 = 260;
      v33[0] = &__p;
      v17 = operator new();
      if (!atomic_load(qword_1EF8F7238))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
      v19 = qword_1EF8F7238[0];
      *(_QWORD *)v17 = off_1E81A0C88;
      llvm::Twine::str((llvm::Twine *)v33, (_QWORD *)(v17 + 8));
      *(_QWORD *)(v17 + 32) = 3;
      *(_QWORD *)(v17 + 40) = v19;
      *(_BYTE *)(v17 + 48) = 1;
      *(_BYTE *)(a5 + 16) |= 1u;
      *(_QWORD *)a5 = v17;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v31.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
      goto LABEL_17;
    }
    *(_BYTE *)(a5 + 16) &= ~1u;
    *(_QWORD *)a5 = v8;
    *(_QWORD *)(a5 + 8) = v9;
  }
LABEL_17:
  if ((v36 & 1) != 0)
  {
    v20 = v35;
    *(_QWORD *)&v35 = 0;
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  }
}

void sub_1C59AD9D0(_QWORD *a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  std::string *v5;
  std::string::size_type v6;
  std::string *v7;
  std::string::size_type v8;
  std::string::size_type v9;
  std::string v10;
  std::string v11;
  std::string::size_type v12[2];
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::sections(a1, (uint64_t)v12);
  if ((v13 & 1) != 0)
  {
    v8 = v12[0];
    v12[0] = 0;
    v10.__r_.__value_.__r.__words[0] = v8;
    sub_1C4D62BD4(&v10.__r_.__value_.__l.__data_, &v11.__r_.__value_.__l.__data_);
    if (v10.__r_.__value_.__r.__words[0])
      (*(void (**)(std::string::size_type))(*(_QWORD *)v10.__r_.__value_.__l.__data_ + 8))(v10.__r_.__value_.__r.__words[0]);
    a3[23] = 15;
    strcpy(a3, "[unknown index]");
  }
  else
  {
    std::to_string(&v10, 0xCCCCCCCCCCCCCCCDLL * ((int64_t)(a2 - v12[0]) >> 3));
    v5 = std::string::insert(&v10, 0, "[index ");
    v6 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v11.__r_.__value_.__l.__data_ = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v11.__r_.__value_.__r.__words[2] = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    v7 = std::string::append(&v11, "]");
    *(std::string *)a3 = *v7;
    v7->__r_.__value_.__r.__words[0] = 0;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v11.__r_.__value_.__l.__data_);
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v10.__r_.__value_.__l.__data_);
  }
  if ((v13 & 1) != 0)
  {
    v9 = v12[0];
    v12[0] = 0;
    if (v9)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v9 + 8))(v9);
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionContents(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::string::size_type v5;
  std::string::size_type v6;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  const char *v10;
  uint64_t v11;
  unint64_t v13;
  void *v14;
  std::string *v15;
  std::string::size_type v16;
  std::string *v17;
  std::string::size_type v18;
  uint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::string::size_type v24;
  std::string::size_type v25;
  std::string v26;
  std::string v27;
  std::string v28;
  __int16 v29;
  void *__p[2];
  const char *v31;
  __int16 v32;
  std::string v33;
  _QWORD v34[2];
  std::string *v35;
  __int16 v36;
  _QWORD v37[2];
  const char *v38;
  __int16 v39;
  _QWORD v40[2];
  std::string *v41;
  __int16 v42;
  _QWORD v43[2];
  const char *v44;
  __int16 v45;

  v5 = bswap32(*(_DWORD *)(a2 + 16));
  v6 = bswap32(*(_DWORD *)(a2 + 20));
  if (__CFADD__((_DWORD)v5, (_DWORD)v6))
  {
    sub_1C59AD9D0(a1, a2, (char *)&v33);
    v7 = std::string::insert(&v33, 0, "section ");
    v8 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    v9 = std::string::append(&v28, " has a sh_offset (0x");
    v10 = (const char *)v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v31 = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    v27.__r_.__value_.__r.__words[0] = v5;
    v34[0] = __p;
    v35 = &v27;
    v36 = 3588;
    v37[0] = v34;
    v38 = ") + sh_size (0x";
    v39 = 770;
    v26.__r_.__value_.__r.__words[0] = v6;
    v40[0] = v37;
    v41 = &v26;
    v42 = 3586;
    v43[0] = v40;
    v44 = ") that cannot be represented";
    v45 = 770;
    v11 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v13 = qword_1EF8F7238[0];
    *(_QWORD *)v11 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v43, (_QWORD *)(v11 + 8));
    *(_QWORD *)(v11 + 32) = 3;
    *(_QWORD *)(v11 + 40) = v13;
    *(_BYTE *)(v11 + 48) = 1;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v11;
    if (SHIBYTE(v31) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v28.__r_.__value_.__l.__data_);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    {
      v14 = (void *)v33.__r_.__value_.__r.__words[0];
LABEL_20:
      operator delete(v14);
    }
  }
  else if (a1[1] >= (unint64_t)(v6 + v5))
  {
    v22 = *a1 + v5;
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_QWORD *)a3 = v22;
    *(_QWORD *)(a3 + 8) = v6;
  }
  else
  {
    sub_1C59AD9D0(a1, a2, (char *)&v26);
    v15 = std::string::insert(&v26, 0, "section ");
    v16 = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v27.__r_.__value_.__r.__words[2] = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    v17 = std::string::append(&v27, " has a sh_offset (0x");
    v18 = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v33.__r_.__value_.__r.__words[2] = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    v24 = v6;
    v25 = v5;
    v28.__r_.__value_.__r.__words[0] = (std::string::size_type)&v33;
    v28.__r_.__value_.__r.__words[2] = (std::string::size_type)&v25;
    v29 = 3588;
    __p[0] = &v28;
    v31 = ") + sh_size (0x";
    v32 = 770;
    v34[0] = __p;
    v35 = (std::string *)&v24;
    v36 = 3586;
    v37[0] = v34;
    v38 = ") that is greater than the file size (0x";
    v39 = 770;
    v23 = a1[1];
    v40[0] = v37;
    v41 = (std::string *)&v23;
    v42 = 3586;
    v43[0] = v40;
    v44 = ")";
    v45 = 770;
    v19 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v21 = qword_1EF8F7238[0];
    *(_QWORD *)v19 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v43, (_QWORD *)(v19 + 8));
    *(_QWORD *)(v19 + 32) = 3;
    *(_QWORD *)(v19 + 40) = v21;
    *(_BYTE *)(v19 + 48) = 1;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v19;
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v27.__r_.__value_.__l.__data_);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    {
      v14 = (void *)v26.__r_.__value_.__r.__words[0];
      goto LABEL_20;
    }
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getStringTableForSymtab(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8[2];
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::sections(a1, (uint64_t)v8);
  if ((v9 & 1) != 0)
  {
    v7 = v8[0];
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v7;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getStringTableForSymtab(a1, a2, v8[0], v8[1], a3);
    if ((v9 & 1) != 0)
    {
      v6 = v8[0];
      v8[0] = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    }
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::sections(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  unint64_t v7;
  __int16 v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  unsigned int v15;
  uint64_t v16;
  const char *v17;
  uint64_t *v18;
  __int16 v19;

  v3 = *a1;
  v4 = *(_DWORD *)(*a1 + 32);
  if (!v4)
  {
    *(_BYTE *)(a2 + 16) &= ~1u;
    *(_QWORD *)a2 = 0;
    *(_QWORD *)(a2 + 8) = 0;
    return;
  }
  v5 = *(unsigned __int16 *)(v3 + 46);
  if (v5 == 10240)
  {
    v6 = bswap32(v4);
    v7 = a1[1];
    if (v6 > 0xFFFFFFD7 || v6 + 40 > v7)
    {
      v16 = v6;
      v17 = "section header table goes past the end of the file: e_shoff = 0x";
      v18 = &v16;
      v9 = 3587;
    }
    else
    {
      v13 = v3 + v6;
      v14 = *(unsigned __int16 *)(v3 + 48);
      if (v14)
        v15 = __rev16(v14);
      else
        v15 = bswap32(*(_DWORD *)(v13 + 20));
      if (v6 + 40 * (unint64_t)v15 <= v7)
      {
        *(_BYTE *)(a2 + 16) &= ~1u;
        *(_QWORD *)a2 = v13;
        *(_QWORD *)(a2 + 8) = v15;
        return;
      }
      v17 = "section table goes past the end of file";
      v9 = 259;
    }
  }
  else
  {
    v17 = "invalid e_shentsize in ELF header: ";
    v18 = (uint64_t *)__rev16(v5);
    v9 = 2307;
  }
  v19 = v9;
  v10 = operator new();
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v12 = qword_1EF8F7238[0];
  *(_QWORD *)v10 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)&v17, (_QWORD *)(v10 + 8));
  *(_QWORD *)(v10 + 32) = 3;
  *(_QWORD *)(v10 + 40) = v12;
  *(_BYTE *)(v10 + 48) = 1;
  *(_BYTE *)(a2 + 16) |= 1u;
  *(_QWORD *)a2 = v10;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getStringTableForSymtab(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v6;
  uint64_t v8;
  unint64_t v10;
  const char *v12;
  const char *v13;
  void (*v14)(llvm::Twine *@<X0>, uint64_t *@<X8>);
  const char *v15;
  char v16;
  __int16 v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v6 = *(_DWORD *)(a2 + 4);
  if (v6 == 0x2000000 || v6 == 184549376)
  {
    sub_1C62C97E8(a3, a4, bswap32(*(_DWORD *)(a2 + 24)), (uint64_t)&v15);
    v12 = v15;
    if ((v16 & 1) != 0)
    {
      *(_BYTE *)(a5 + 16) |= 1u;
      *(_QWORD *)a5 = v12;
    }
    else
    {
      v14 = sub_1C59A5848;
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getStringTable(a1, (uint64_t)v15, (void (*)(std::string *__return_ptr, uint64_t, _QWORD *))sub_1C62CD258, (uint64_t)&v14, a5);
      if ((v16 & 1) != 0)
      {
        v13 = v15;
        v15 = 0;
        if (v13)
          (*(void (**)(const char *))(*(_QWORD *)v13 + 8))(v13);
      }
    }
  }
  else
  {
    v15 = "invalid sh_type for symbol table, expected SHT_SYMTAB or SHT_DYNSYM";
    v17 = 259;
    v8 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v10 = qword_1EF8F7238[0];
    *(_QWORD *)v8 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)&v15, (_QWORD *)(v8 + 8));
    *(_QWORD *)(v8 + 32) = 3;
    *(_QWORD *)(v8 + 40) = v10;
    *(_BYTE *)(v8 + 48) = 1;
    *(_BYTE *)(a5 + 16) |= 1u;
    *(_QWORD *)a5 = v8;
  }
}

{
  __ZNK4llvm6object7ELFFileINS0_7ELFTypeILNS_7support10endiannessE0ELb0EEEE23getStringTableForSymtabERKNS0_13Elf_Shdr_ImplIS5_EENS_8ArrayRefIS8_EE(a1, a2, a3, a4, a5);
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::relrs(_QWORD *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  std::string::size_type v6;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  std::string::size_type v10;
  std::string *v11;
  const char *v12;
  std::string *v13;
  std::string::size_type v14;
  std::string *v15;
  std::string *v16;
  const char *v17;
  uint64_t v18;
  unint64_t v20;
  void *v21;
  std::string::size_type v22;
  std::string *v23;
  std::string::size_type v24;
  std::string *v25;
  std::string::size_type v26;
  uint64_t v27;
  unint64_t v29;
  std::string *v30;
  std::string::size_type v31;
  std::string *v32;
  std::string::size_type v33;
  uint64_t v34;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  std::string::size_type v39;
  std::string::size_type v40;
  std::string v41;
  std::string v42;
  std::string v43;
  __int16 v44;
  std::string v45;
  __int16 v46;
  std::string v47;
  void *__p[2];
  std::string *v49;
  __int16 v50;
  _QWORD v51[2];
  std::string *v52;
  __int16 v53;
  _QWORD v54[2];
  std::string *v55;
  __int16 v56;
  _QWORD v57[2];
  const char *v58;
  __int16 v59;

  if (a2[9] == 0x4000000)
  {
    v6 = bswap32(a2[5]);
    if ((v6 & 3) != 0)
    {
      sub_1C59AD9D0(a1, (uint64_t)a2, (char *)&v47);
      v7 = std::string::insert(&v47, 0, "section ");
      v8 = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v43.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v43.__r_.__value_.__r.__words[2] = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      v9 = std::string::append(&v43, " has an invalid sh_size (");
      v10 = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v45.__r_.__value_.__l.__data_ = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v45.__r_.__value_.__r.__words[2] = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      __p[0] = &v45;
      v49 = (std::string *)v6;
      v50 = 2052;
      v51[0] = __p;
      v52 = (std::string *)") which is not a multiple of its sh_entsize (";
      v53 = 770;
      v11 = (std::string *)bswap32(a2[9]);
      v54[0] = v51;
      v55 = v11;
      v56 = 2050;
      v12 = ")";
    }
    else
    {
      v22 = bswap32(a2[4]);
      if (!__CFADD__((_DWORD)v22, (_DWORD)v6))
      {
        if (a1[1] >= (unint64_t)(v6 + v22))
        {
          v37 = *a1 + v22;
          *(_BYTE *)(a3 + 16) &= ~1u;
          *(_QWORD *)a3 = v37;
          *(_QWORD *)(a3 + 8) = v6 >> 2;
          return;
        }
        sub_1C59AD9D0(a1, (uint64_t)a2, (char *)&v41);
        v30 = std::string::insert(&v41, 0, "section ");
        v31 = v30->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v42.__r_.__value_.__l.__data_ = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        v42.__r_.__value_.__r.__words[2] = v31;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        v32 = std::string::append(&v42, " has a sh_offset (0x");
        v33 = v32->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v47.__r_.__value_.__l.__data_ = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
        v47.__r_.__value_.__r.__words[2] = v33;
        v32->__r_.__value_.__l.__size_ = 0;
        v32->__r_.__value_.__r.__words[2] = 0;
        v32->__r_.__value_.__r.__words[0] = 0;
        v39 = v6;
        v40 = v22;
        v43.__r_.__value_.__r.__words[0] = (std::string::size_type)&v47;
        v43.__r_.__value_.__r.__words[2] = (std::string::size_type)&v40;
        v44 = 3588;
        v45.__r_.__value_.__r.__words[0] = (std::string::size_type)&v43;
        v45.__r_.__value_.__r.__words[2] = (std::string::size_type)") + sh_size (0x";
        v46 = 770;
        __p[0] = &v45;
        v49 = (std::string *)&v39;
        v50 = 3586;
        v51[0] = __p;
        v52 = (std::string *)") that is greater than the file size (0x";
        v53 = 770;
        v38 = a1[1];
        v54[0] = v51;
        v55 = (std::string *)&v38;
        v56 = 3586;
        v57[0] = v54;
        v58 = ")";
        v59 = 770;
        v34 = operator new();
        if (!atomic_load(qword_1EF8F7238))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
        v36 = qword_1EF8F7238[0];
        *(_QWORD *)v34 = off_1E81A0C88;
        llvm::Twine::str((llvm::Twine *)v57, (_QWORD *)(v34 + 8));
        *(_QWORD *)(v34 + 32) = 3;
        *(_QWORD *)(v34 + 40) = v36;
        *(_BYTE *)(v34 + 48) = 1;
        *(_BYTE *)(a3 + 16) |= 1u;
        *(_QWORD *)a3 = v34;
        if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v47.__r_.__value_.__l.__data_);
        if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v42.__r_.__value_.__l.__data_);
        if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
        {
          v21 = (void *)v41.__r_.__value_.__r.__words[0];
          goto LABEL_23;
        }
        return;
      }
      sub_1C59AD9D0(a1, (uint64_t)a2, (char *)&v47);
      v23 = std::string::insert(&v47, 0, "section ");
      v24 = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v43.__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v43.__r_.__value_.__r.__words[2] = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      v25 = std::string::append(&v43, " has a sh_offset (0x");
      v26 = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v45.__r_.__value_.__l.__data_ = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v45.__r_.__value_.__r.__words[2] = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      v42.__r_.__value_.__r.__words[0] = v22;
      __p[0] = &v45;
      v49 = &v42;
      v50 = 3588;
      v51[0] = __p;
      v52 = (std::string *)") + sh_size (0x";
      v53 = 770;
      v41.__r_.__value_.__r.__words[0] = v6;
      v54[0] = v51;
      v55 = &v41;
      v56 = 3586;
      v12 = ") that cannot be represented";
    }
    v57[0] = v54;
    v58 = v12;
    v59 = 770;
    v27 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v29 = qword_1EF8F7238[0];
    *(_QWORD *)v27 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v57, (_QWORD *)(v27 + 8));
    *(_QWORD *)(v27 + 32) = 3;
    *(_QWORD *)(v27 + 40) = v29;
    *(_BYTE *)(v27 + 48) = 1;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v27;
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__r_.__value_.__l.__data_);
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v43.__r_.__value_.__l.__data_);
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    {
      v21 = (void *)v47.__r_.__value_.__r.__words[0];
      goto LABEL_23;
    }
  }
  else
  {
    sub_1C59AD9D0(a1, (uint64_t)a2, (char *)&v43);
    v13 = std::string::insert(&v43, 0, "section ");
    v14 = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__r.__words[2] = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    v15 = std::string::append(&v45, " has invalid sh_entsize: expected ");
    v16 = (std::string *)v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v49 = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    v47.__r_.__value_.__r.__words[0] = 4;
    v51[0] = __p;
    v52 = &v47;
    v53 = 2564;
    v54[0] = v51;
    v55 = (std::string *)", but got ";
    v56 = 770;
    v17 = (const char *)bswap32(a2[9]);
    v57[0] = v54;
    v58 = v17;
    v59 = 2050;
    v18 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v20 = qword_1EF8F7238[0];
    *(_QWORD *)v18 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v57, (_QWORD *)(v18 + 8));
    *(_QWORD *)(v18 + 32) = 3;
    *(_QWORD *)(v18 + 40) = v20;
    *(_BYTE *)(v18 + 48) = 1;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v18;
    if (SHIBYTE(v49) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__r_.__value_.__l.__data_);
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    {
      v21 = (void *)v43.__r_.__value_.__r.__words[0];
LABEL_23:
      operator delete(v21);
    }
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getDynSymtabSize(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  unsigned int *v5;
  uint64_t v6;
  char v7;
  uint64_t v8;
  uint64_t *v9;
  int v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t *v14;
  unsigned int *v15;
  unsigned int *v16;
  unsigned int v17;
  unsigned int v18;
  unsigned int *v19;
  unint64_t v20;
  unint64_t v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  unint64_t v28;
  unint64_t v29;
  unsigned int *v31;
  unsigned int v32;
  unsigned int v33;
  uint64_t v35;
  _BYTE *v36;
  uint64_t v37;
  void **v38;
  char v39;
  uint64_t v40;
  uint64_t *v41;
  _BYTE *v42[4];
  __int16 v43;
  uint64_t v44;
  void *__p[2];
  char v46;
  void **v47;
  uint64_t v48[2];
  unsigned int *v49;
  char v50;
  const char *v51;
  __int16 v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  __int16 v56;
  uint64_t *v57;
  uint64_t v58;
  const char *v59;
  __int16 v60;
  uint64_t v61;
  uint64_t v62;
  char v63;
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::sections(a1, (uint64_t)&v61);
  v4 = v61;
  if ((v63 & 1) != 0)
  {
    v61 = 0;
    v7 = *(_BYTE *)(a2 + 8) | 1;
    goto LABEL_8;
  }
  if (v62)
  {
    v5 = (unsigned int *)(v61 + 36);
    v6 = 40 * v62;
    while (*(v5 - 8) != 184549376)
    {
      v5 += 10;
      v6 -= 40;
      if (!v6)
      {
        *(_BYTE *)(a2 + 8) &= ~1u;
        *(_QWORD *)a2 = 0;
        goto LABEL_9;
      }
    }
    v32 = bswap32(*(v5 - 4));
    v33 = bswap32(*v5);
    v4 = v32 / v33;
    if (v32 % v33)
    {
      if (!atomic_load(qword_1EF8F7238))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
      v35 = qword_1EF8F7238[0];
      v36 = (_BYTE *)bswap32(*(v5 - 4));
      v42[0] = "SHT_DYNSYM section has sh_size (";
      v42[2] = v36;
      v43 = 2051;
      v49 = (unsigned int *)v42;
      v51 = ") % sh_entsize (";
      v52 = 770;
      v37 = bswap32(*v5);
      v53 = (uint64_t)&v49;
      v55 = v37;
      v56 = 2050;
      v57 = &v53;
      v59 = ") that is not 0";
      v60 = 770;
      llvm::Twine::str((llvm::Twine *)&v57, __p);
      if (v46 >= 0)
        v38 = __p;
      else
        v38 = (void **)__p[0];
      v48[0] = 3;
      v48[1] = v35;
      v47 = v38;
      sub_1C5DF1730((_BYTE **)&v47, v48, &v44);
      if (v46 < 0)
        operator delete(__p[0]);
      *(_BYTE *)(a2 + 8) |= 1u;
      *(_QWORD *)a2 = v44;
      v44 = 0;
      goto LABEL_9;
    }
    v7 = *(_BYTE *)(a2 + 8) & 0xFE;
LABEL_8:
    *(_BYTE *)(a2 + 8) = v7;
    *(_QWORD *)a2 = v4;
    goto LABEL_9;
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::dynamicEntries(a1, (uint64_t)&v57);
  v9 = v57;
  if ((v59 & 1) != 0)
  {
    v57 = 0;
    *(_BYTE *)(a2 + 8) |= 1u;
    *(_QWORD *)a2 = v9;
    goto LABEL_61;
  }
  if (!v58)
    goto LABEL_60;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = &v57[v58];
  do
  {
    v15 = (unsigned int *)v9 + 1;
    while (1)
    {
      v16 = v15 - 1;
      v17 = bswap32(*(v15 - 1));
      if (v17 != 1879047925)
        break;
      v18 = *v15;
      v15 += 2;
      v13 = bswap32(v18);
      v12 = 1;
      if (v16 + 2 == (unsigned int *)v14)
        goto LABEL_24;
    }
    if (v17 == 4)
    {
      v11 = bswap32(*v15);
      v10 = 1;
    }
    v9 = (uint64_t *)(v15 + 1);
  }
  while (v9 != v14);
  if (!v12)
  {
    if (v10)
    {
      v49 = (unsigned int *)sub_1C59A5848;
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::toMappedAddr(a1, (void (*)(_QWORD *__return_ptr, uint64_t, _QWORD *))sub_1C62CD258, v11, (uint64_t)&v49, (uint64_t)&v53);
      v40 = v53;
      if ((v54 & 1) != 0)
      {
        *(_BYTE *)(a2 + 8) |= 1u;
      }
      else
      {
        *(_BYTE *)(a2 + 8) &= ~1u;
        v40 = bswap32(*(_DWORD *)(v40 + 4));
      }
      *(_QWORD *)a2 = v40;
      goto LABEL_61;
    }
LABEL_60:
    *(_BYTE *)(a2 + 8) &= ~1u;
    *(_QWORD *)a2 = 0;
    goto LABEL_61;
  }
LABEL_24:
  v53 = (uint64_t)sub_1C59A5848;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::toMappedAddr(a1, (void (*)(_QWORD *__return_ptr, uint64_t, _QWORD *))sub_1C62CD258, v13, (uint64_t)&v53, (uint64_t)&v49);
  v19 = v49;
  if ((v50 & 1) != 0)
  {
    v49 = 0;
    v39 = *(_BYTE *)(a2 + 8) | 1;
LABEL_56:
    *(_BYTE *)(a2 + 8) = v39;
    *(_QWORD *)a2 = v19;
    goto LABEL_61;
  }
  if (!*v49)
  {
    v19 = (unsigned int *)(bswap32(v49[1]) + 1);
LABEL_55:
    v39 = *(_BYTE *)(a2 + 8) & 0xFE;
    goto LABEL_56;
  }
  v20 = 0;
  v21 = *a1 + a1[1];
  v22 = bswap32(*v49);
  v23 = 4 * bswap32(v49[2]) + 16;
  v24 = (uint64_t)&v49[v22] + v23;
  v25 = 4 * v22;
  do
  {
    v26 = v20;
    v27 = bswap32(*(unsigned int *)((char *)v49 + v23));
    if (v20 <= v27)
      v20 = v27;
    v23 += 4;
    v25 -= 4;
  }
  while (v25);
  v28 = v24 + 4 * (v20 - bswap32(v49[1]));
  if (v28 < v21)
  {
    if (v26 <= v27)
      v29 = v27;
    else
      v29 = v26;
    v19 = (unsigned int *)(v29 + 1);
    while ((*(_BYTE *)(v28 + 3) & 1) == 0)
    {
      v28 += 4;
      v19 = (unsigned int *)((char *)v19 + 1);
      if (v28 >= v21)
        goto LABEL_37;
    }
    goto LABEL_55;
  }
LABEL_37:
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v53 = 3;
  v54 = qword_1EF8F7238[0];
  v42[0] = "no terminator found for GNU hash section before buffer end";
  sub_1C5DF1730(v42, &v53, (_QWORD *)a2);
  *(_BYTE *)(a2 + 8) |= 1u;
  if ((v50 & 1) != 0)
  {
    v31 = v49;
    v49 = 0;
    if (v31)
      (*(void (**)(unsigned int *))(*(_QWORD *)v31 + 8))(v31);
  }
LABEL_61:
  if ((v59 & 1) != 0)
  {
    v41 = v57;
    v57 = 0;
    if (v41)
      (*(void (**)(uint64_t *))(*v41 + 8))(v41);
  }
LABEL_9:
  if ((v63 & 1) != 0)
  {
    v8 = v61;
    v61 = 0;
    if (v8)
      (*(void (**)(uint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::dynamicEntries(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  _DWORD *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  std::string::size_type v10;
  const char *v11;
  uint64_t v12;
  unsigned int v13;
  uint64_t v14;
  unint64_t v16;
  std::string::size_type v17;
  std::string *v18;
  std::string::size_type v19;
  std::string *v20;
  std::string::size_type v21;
  std::string *v22;
  const char *v23;
  std::string *v24;
  std::string::size_type v25;
  std::string *v26;
  std::string *v27;
  const char *v28;
  uint64_t v29;
  unint64_t v31;
  void *v32;
  std::string::size_type v33;
  std::string *v34;
  std::string::size_type v35;
  std::string *v36;
  std::string::size_type v37;
  unint64_t v39;
  std::string *v40;
  std::string::size_type v41;
  std::string *v42;
  std::string::size_type v43;
  unint64_t v45;
  _DWORD *v46;
  uint64_t v47;
  std::string::size_type v48;
  std::string::size_type v49;
  std::string v50;
  std::string v51;
  std::string v52;
  __int16 v53;
  std::string v54;
  __int16 v55;
  std::string v56;
  void *__p[2];
  std::string *v58;
  __int16 v59;
  _QWORD v60[2];
  std::string *v61;
  __int16 v62;
  _QWORD v63[2];
  std::string *v64;
  __int16 v65;
  _QWORD v66[2];
  const char *v67;
  __int16 v68;
  uint64_t v69;
  uint64_t v70;
  char v71;
  _DWORD *v72;
  uint64_t v73;
  char v74;
  uint64_t v75;

  v75 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::program_headers(a1, (uint64_t)&v72);
  v4 = v72;
  if ((v74 & 1) != 0)
  {
    v72 = 0;
    *(_BYTE *)(a2 + 16) |= 1u;
    *(_QWORD *)a2 = v4;
    goto LABEL_63;
  }
  if (v73)
  {
    v5 = 32 * v73;
    while (*v4 != 0x2000000)
    {
      v4 += 8;
      v5 -= 32;
      if (!v5)
        goto LABEL_6;
    }
    v6 = *a1 + bswap32(v4[1]);
    v13 = bswap32(v4[4]);
    if (v13 > 7)
    {
      v10 = v13 >> 3;
      goto LABEL_21;
    }
  }
  else
  {
LABEL_6:
    v6 = 0;
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::sections(a1, (uint64_t)&v69);
  v7 = v69;
  if ((v71 & 1) == 0)
  {
    if (v70)
    {
      v8 = 0;
      while (1)
      {
        v9 = v69 + v8;
        if (*(_DWORD *)(v69 + v8 + 4) == 100663296)
          break;
        v8 += 40;
        if (40 * v70 == v8)
          goto LABEL_12;
      }
      if (*(_DWORD *)(v9 + 36) != 0x8000000)
      {
        sub_1C59AD9D0(a1, v9, (char *)&v52);
        v24 = std::string::insert(&v52, 0, "section ");
        v25 = v24->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v54.__r_.__value_.__l.__data_ = *(_OWORD *)&v24->__r_.__value_.__l.__data_;
        v54.__r_.__value_.__r.__words[2] = v25;
        v24->__r_.__value_.__l.__size_ = 0;
        v24->__r_.__value_.__r.__words[2] = 0;
        v24->__r_.__value_.__r.__words[0] = 0;
        v26 = std::string::append(&v54, " has invalid sh_entsize: expected ");
        v27 = (std::string *)v26->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
        v58 = v27;
        v26->__r_.__value_.__l.__size_ = 0;
        v26->__r_.__value_.__r.__words[2] = 0;
        v26->__r_.__value_.__r.__words[0] = 0;
        v56.__r_.__value_.__r.__words[0] = 8;
        v60[0] = __p;
        v61 = &v56;
        v62 = 2564;
        v63[0] = v60;
        v64 = (std::string *)", but got ";
        v65 = 770;
        v28 = (const char *)bswap32(*(_DWORD *)(v9 + 36));
        v66[0] = v63;
        v67 = v28;
        v68 = 2050;
        v29 = operator new();
        if (!atomic_load(qword_1EF8F7238))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
        v31 = qword_1EF8F7238[0];
        *(_QWORD *)v29 = off_1E81A0C88;
        llvm::Twine::str((llvm::Twine *)v66, (_QWORD *)(v29 + 8));
        *(_QWORD *)(v29 + 32) = 3;
        *(_QWORD *)(v29 + 40) = v31;
        *(_BYTE *)(v29 + 48) = 1;
        if (SHIBYTE(v58) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v54.__r_.__value_.__l.__data_);
        if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
        {
          v32 = (void *)v52.__r_.__value_.__r.__words[0];
LABEL_49:
          operator delete(v32);
        }
LABEL_50:
        *(_BYTE *)(a2 + 16) |= 1u;
        *(_QWORD *)a2 = v29;
        if ((v71 & 1) == 0)
          goto LABEL_63;
        goto LABEL_17;
      }
      v17 = bswap32(*(_DWORD *)(v69 + v8 + 20));
      if ((v17 & 7) != 0)
      {
        sub_1C59AD9D0(a1, v9, (char *)&v56);
        v18 = std::string::insert(&v56, 0, "section ");
        v19 = v18->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v52.__r_.__value_.__l.__data_ = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
        v52.__r_.__value_.__r.__words[2] = v19;
        v18->__r_.__value_.__l.__size_ = 0;
        v18->__r_.__value_.__r.__words[2] = 0;
        v18->__r_.__value_.__r.__words[0] = 0;
        v20 = std::string::append(&v52, " has an invalid sh_size (");
        v21 = v20->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v54.__r_.__value_.__l.__data_ = *(_OWORD *)&v20->__r_.__value_.__l.__data_;
        v54.__r_.__value_.__r.__words[2] = v21;
        v20->__r_.__value_.__l.__size_ = 0;
        v20->__r_.__value_.__r.__words[2] = 0;
        v20->__r_.__value_.__r.__words[0] = 0;
        __p[0] = &v54;
        v58 = (std::string *)v17;
        v59 = 2052;
        v60[0] = __p;
        v61 = (std::string *)") which is not a multiple of its sh_entsize (";
        v62 = 770;
        v22 = (std::string *)bswap32(*(_DWORD *)(v9 + 36));
        v63[0] = v60;
        v64 = v22;
        v65 = 2050;
        v23 = ")";
        goto LABEL_41;
      }
      v33 = bswap32(*(_DWORD *)(v69 + v8 + 16));
      if (__CFADD__((_DWORD)v33, (_DWORD)v17))
      {
        sub_1C59AD9D0(a1, v9, (char *)&v56);
        v34 = std::string::insert(&v56, 0, "section ");
        v35 = v34->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v52.__r_.__value_.__l.__data_ = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
        v52.__r_.__value_.__r.__words[2] = v35;
        v34->__r_.__value_.__l.__size_ = 0;
        v34->__r_.__value_.__r.__words[2] = 0;
        v34->__r_.__value_.__r.__words[0] = 0;
        v36 = std::string::append(&v52, " has a sh_offset (0x");
        v37 = v36->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v54.__r_.__value_.__l.__data_ = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
        v54.__r_.__value_.__r.__words[2] = v37;
        v36->__r_.__value_.__l.__size_ = 0;
        v36->__r_.__value_.__r.__words[2] = 0;
        v36->__r_.__value_.__r.__words[0] = 0;
        v51.__r_.__value_.__r.__words[0] = v33;
        __p[0] = &v54;
        v58 = &v51;
        v59 = 3588;
        v60[0] = __p;
        v61 = (std::string *)") + sh_size (0x";
        v62 = 770;
        v50.__r_.__value_.__r.__words[0] = v17;
        v63[0] = v60;
        v64 = &v50;
        v65 = 3586;
        v23 = ") that cannot be represented";
LABEL_41:
        v66[0] = v63;
        v67 = v23;
        v68 = 770;
        v29 = operator new();
        if (!atomic_load(qword_1EF8F7238))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
        v39 = qword_1EF8F7238[0];
        *(_QWORD *)v29 = off_1E81A0C88;
        llvm::Twine::str((llvm::Twine *)v66, (_QWORD *)(v29 + 8));
        *(_QWORD *)(v29 + 32) = 3;
        *(_QWORD *)(v29 + 40) = v39;
        *(_BYTE *)(v29 + 48) = 1;
        if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v54.__r_.__value_.__l.__data_);
        if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v52.__r_.__value_.__l.__data_);
        if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
        {
          v32 = (void *)v56.__r_.__value_.__r.__words[0];
          goto LABEL_49;
        }
        goto LABEL_50;
      }
      if (a1[1] < (unint64_t)(v17 + v33))
      {
        sub_1C59AD9D0(a1, v9, (char *)&v50);
        v40 = std::string::insert(&v50, 0, "section ");
        v41 = v40->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v51.__r_.__value_.__l.__data_ = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
        v51.__r_.__value_.__r.__words[2] = v41;
        v40->__r_.__value_.__l.__size_ = 0;
        v40->__r_.__value_.__r.__words[2] = 0;
        v40->__r_.__value_.__r.__words[0] = 0;
        v42 = std::string::append(&v51, " has a sh_offset (0x");
        v43 = v42->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v56.__r_.__value_.__l.__data_ = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
        v56.__r_.__value_.__r.__words[2] = v43;
        v42->__r_.__value_.__l.__size_ = 0;
        v42->__r_.__value_.__r.__words[2] = 0;
        v42->__r_.__value_.__r.__words[0] = 0;
        v48 = v17;
        v49 = v33;
        v52.__r_.__value_.__r.__words[0] = (std::string::size_type)&v56;
        v52.__r_.__value_.__r.__words[2] = (std::string::size_type)&v49;
        v53 = 3588;
        v54.__r_.__value_.__r.__words[0] = (std::string::size_type)&v52;
        v54.__r_.__value_.__r.__words[2] = (std::string::size_type)") + sh_size (0x";
        v55 = 770;
        __p[0] = &v54;
        v58 = (std::string *)&v48;
        v59 = 3586;
        v60[0] = __p;
        v61 = (std::string *)") that is greater than the file size (0x";
        v62 = 770;
        v47 = a1[1];
        v63[0] = v60;
        v64 = (std::string *)&v47;
        v65 = 3586;
        v66[0] = v63;
        v67 = ")";
        v68 = 770;
        v29 = operator new();
        if (!atomic_load(qword_1EF8F7238))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
        v45 = qword_1EF8F7238[0];
        *(_QWORD *)v29 = off_1E81A0C88;
        llvm::Twine::str((llvm::Twine *)v66, (_QWORD *)(v29 + 8));
        *(_QWORD *)(v29 + 32) = 3;
        *(_QWORD *)(v29 + 40) = v45;
        *(_BYTE *)(v29 + 48) = 1;
        if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v56.__r_.__value_.__l.__data_);
        if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v51.__r_.__value_.__l.__data_);
        if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0)
        {
          v32 = (void *)v50.__r_.__value_.__r.__words[0];
          goto LABEL_49;
        }
        goto LABEL_50;
      }
      v6 = *a1 + v33;
      v10 = v17 >> 3;
      if (!v6)
      {
LABEL_62:
        *(_BYTE *)(a2 + 16) &= ~1u;
        *(_QWORD *)a2 = 0;
        *(_QWORD *)(a2 + 8) = 0;
        goto LABEL_63;
      }
    }
    else
    {
LABEL_12:
      v10 = 0;
      if (!v6)
        goto LABEL_62;
    }
    if (!v10)
    {
      v11 = "invalid empty dynamic section";
LABEL_23:
      v66[0] = v11;
      v68 = 259;
      v14 = operator new();
      if (!atomic_load(qword_1EF8F7238))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
      v16 = qword_1EF8F7238[0];
      *(_QWORD *)v14 = off_1E81A0C88;
      llvm::Twine::str((llvm::Twine *)v66, (_QWORD *)(v14 + 8));
      *(_QWORD *)(v14 + 32) = 3;
      *(_QWORD *)(v14 + 40) = v16;
      *(_BYTE *)(v14 + 48) = 1;
      *(_BYTE *)(a2 + 16) |= 1u;
      *(_QWORD *)a2 = v14;
      goto LABEL_63;
    }
LABEL_21:
    if (!*(_DWORD *)(v6 + 8 * v10 - 8))
    {
      *(_BYTE *)(a2 + 16) &= ~1u;
      *(_QWORD *)a2 = v6;
      *(_QWORD *)(a2 + 8) = v10;
      goto LABEL_63;
    }
    v11 = "dynamic sections must be DT_NULL terminated";
    goto LABEL_23;
  }
  v69 = 0;
  *(_BYTE *)(a2 + 16) |= 1u;
  *(_QWORD *)a2 = v7;
LABEL_17:
  v12 = v69;
  v69 = 0;
  if (v12)
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
LABEL_63:
  if ((v74 & 1) != 0)
  {
    v46 = v72;
    v72 = 0;
    if (v46)
      (*(void (**)(_DWORD *))(*(_QWORD *)v46 + 8))(v46);
  }
}

{
  __ZNK4llvm6object7ELFFileINS0_7ELFTypeILNS_7support10endiannessE0ELb0EEEE14dynamicEntriesEv(a1, a2);
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::toMappedAddr(_QWORD *a1@<X0>, unint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr, uint64_t, _QWORD *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unsigned int v9;
  _DWORD *v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  unsigned int v16;
  unsigned int v17;
  unint64_t v18;
  char v19;
  char *v20;
  unint64_t v21;
  const std::nothrow_t *v22;
  unint64_t v23;
  uint64_t *v24;
  BOOL v25;
  uint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t *v30;
  _QWORD *v31;
  uint64_t v32;
  unsigned int *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v41;
  _DWORD *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[4];
  __int16 v47;
  _QWORD v48[4];
  __int16 v49;
  _QWORD v50[4];
  __int16 v51;
  _QWORD v52[4];
  __int16 v53;
  _QWORD v54[4];
  __int16 v55;
  _QWORD v56[4];
  __int16 v57;
  _QWORD v58[4];
  __int16 v59;
  _QWORD v60[2];
  unint64_t *v61;
  __int16 v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  _BYTE v66[32];
  _DWORD *v67;
  uint64_t v68;
  char v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v63 = a2;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::program_headers(a1, (uint64_t)&v67);
  if ((v69 & 1) != 0)
  {
    v13 = v67;
    *(_BYTE *)(a5 + 8) |= 1u;
    *(_QWORD *)a5 = v13;
  }
  else
  {
    v64 = v66;
    v65 = 0x400000000;
    if (!v68)
      goto LABEL_35;
    v9 = 0;
    v10 = v67;
    v11 = 32 * v68;
    v12 = v67;
    do
    {
      if (*v12 == 0x1000000)
      {
        if (v9 >= HIDWORD(v65))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, (uint64_t)v66, v9 + 1, 8);
          v9 = v65;
        }
        *(_QWORD *)&v64[8 * v9] = v10;
        v9 = v65 + 1;
        LODWORD(v65) = v65 + 1;
      }
      v12 += 8;
      v10 += 8;
      v11 -= 32;
    }
    while (v11);
    if (!v9)
      goto LABEL_35;
    v14 = 0;
    v15 = v64;
    do
    {
      if (8 * v9 - 8 == v14)
        goto LABEL_25;
      v16 = bswap32(*(_DWORD *)(*(_QWORD *)&v64[v14 + 8] + 8));
      v17 = bswap32(*(_DWORD *)(*(_QWORD *)&v64[v14] + 8));
      v14 += 8;
    }
    while (v16 >= v17);
    v60[0] = "loadable segments are unsorted by virtual address";
    v62 = 259;
    a3(v58, a4, v60);
    v18 = v58[0];
    if (v58[0])
    {
      v19 = *(_BYTE *)(a5 + 8) | 1;
LABEL_17:
      *(_BYTE *)(a5 + 8) = v19;
      *(_QWORD *)a5 = v18;
      goto LABEL_39;
    }
    v20 = v64;
    v21 = v65;
    if (v65 < 0x81)
    {
LABEL_22:
      sub_1C59C6F70(v20, &v20[8 * v21], v21, 0, 0);
    }
    else
    {
      v22 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
      v23 = v65;
      while (1)
      {
        v24 = (uint64_t *)operator new(8 * v23, v22);
        if (v24)
          break;
        v25 = v23 > 1;
        v23 >>= 1;
        if (!v25)
          goto LABEL_22;
      }
      v26 = v24;
      sub_1C59C6F70(v20, &v20[8 * v21], v21, v24, v23);
      operator delete(v26);
    }
    v15 = v64;
    v9 = v65;
    if (!v9)
      goto LABEL_35;
LABEL_25:
    v27 = v9;
    v28 = v15;
    do
    {
      v29 = v27 >> 1;
      v30 = &v28[v27 >> 1];
      v32 = *v30;
      v31 = v30 + 1;
      v27 += ~(v27 >> 1);
      if (v63 < bswap32(*(_DWORD *)(v32 + 8)))
        v27 = v29;
      else
        v28 = v31;
    }
    while (v27);
    if (v28 != v15 && (v33 = (unsigned int *)*(v28 - 1), v34 = v63 - bswap32(v33[2]), v35 = bswap32(v33[4]), v34 < v35))
    {
      v36 = bswap32(v33[1]);
      v37 = v34 + v36;
      v38 = a1[1];
      if (v37 < v38)
      {
        v18 = *a1 + v37;
        v19 = *(_BYTE *)(a5 + 8) & 0xFE;
        goto LABEL_17;
      }
      v46[2] = &v63;
      v47 = 3587;
      v48[0] = v46;
      v48[2] = " to the segment with index ";
      v49 = 770;
      v45 = (((char *)v33 - (char *)v67) >> 5) + 1;
      v46[0] = "can't map virtual address 0x";
      v50[0] = v48;
      v50[2] = &v45;
      v51 = 2818;
      v52[0] = v50;
      v52[2] = ": the segment ends at 0x";
      v53 = 770;
      v43 = v38;
      v44 = (v35 + v36);
      v54[0] = v52;
      v54[2] = &v44;
      v55 = 3586;
      v56[0] = v54;
      v56[2] = ", which is greater than the file size (0x";
      v57 = 770;
      v58[0] = v56;
      v58[2] = &v43;
      v59 = 3586;
      v60[0] = v58;
      v61 = (unint64_t *)")";
      v62 = 770;
    }
    else
    {
LABEL_35:
      v60[0] = "virtual address is not in any segment: 0x";
      v61 = &v63;
      v62 = 3587;
    }
    v39 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v41 = qword_1EF8F7238[0];
    *(_QWORD *)v39 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v60, (_QWORD *)(v39 + 8));
    *(_QWORD *)(v39 + 32) = 3;
    *(_QWORD *)(v39 + 40) = v41;
    *(_BYTE *)(v39 + 48) = 1;
    *(_BYTE *)(a5 + 8) |= 1u;
    *(_QWORD *)a5 = v39;
LABEL_39:
    if (v64 != v66)
      free(v64);
    if ((v69 & 1) != 0)
    {
      v42 = v67;
      v67 = 0;
      if (v42)
        (*(void (**)(_DWORD *))(*(_QWORD *)v42 + 8))(v42);
    }
  }
}

const char *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getRelocationTypeName(uint64_t a1, unsigned int a2)
{
  return llvm::object::getELFRelocationTypeName((llvm::object *)(bswap32(*(unsigned __int16 *)(*(_QWORD *)a1 + 18)) >> 16), a2);
}

BOOL llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::isMipsELF64(uint64_t a1)
{
  return *(_WORD *)(*(_QWORD *)a1 + 18) == 2048 && *(_BYTE *)(*(_QWORD *)a1 + 4) == 2;
}

uint64_t llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getRelativeRelocationType(uint64_t a1)
{
  return llvm::object::getELFRelativeRelocationType((llvm::object *)(bswap32(*(unsigned __int16 *)(*(_QWORD *)a1 + 18)) >> 16));
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getDynamicTagAsString(int a1@<W1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  const char *v4;
  const char *v5;
  const char *v6;
  int v7;
  const char *v8;
  int v9;
  __int16 v10;
  const char *v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  const char *v15;
  const char *v16;
  uint64_t v17;
  BOOL v18;
  std::string *v19;
  std::string::size_type v20;
  int v21;
  int v22;
  unsigned __int16 v23;
  int v24;
  int v25;
  __int16 v26;
  int v27;
  const char *v28;
  const char *v29;
  const char *v30;
  char *v31;
  std::string v32;
  _BYTE v33[17];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (a1 > 163)
  {
    switch(a1)
    {
      case 164:
        switch(a2)
        {
          case 1879048194:
            *(_BYTE *)(a3 + 23) = 11;
            *(_DWORD *)(a3 + 7) = 1414287455;
            v4 = "HEXAGON_PLT";
            goto LABEL_46;
          case 1879048193:
            *(_BYTE *)(a3 + 23) = 11;
            *(_DWORD *)(a3 + 7) = 1380275807;
            v4 = "HEXAGON_VER";
            goto LABEL_46;
          case 1879048192:
            v8 = "HEXAGON_SYMSZ";
LABEL_23:
            *(_BYTE *)(a3 + 23) = 13;
            *(_QWORD *)a3 = *(_QWORD *)v8;
            *(_QWORD *)(a3 + 5) = *(_QWORD *)(v8 + 5);
            *(_BYTE *)(a3 + 13) = 0;
            return;
        }
        break;
      case 243:
        if (a2 == 1879048193)
        {
          *(_BYTE *)(a3 + 23) = 16;
          v6 = "RISCV_VARIANT_CC";
LABEL_26:
          *(_OWORD *)a3 = *(_OWORD *)v6;
          *(_BYTE *)(a3 + 16) = 0;
          return;
        }
        break;
      case 183:
        switch(a2)
        {
          case 1879048197:
            *(_BYTE *)(a3 + 23) = 19;
            *(_DWORD *)(a3 + 15) = 1396920415;
            v11 = "AARCH64_VARIANT_PCS";
LABEL_41:
            *(_OWORD *)a3 = *(_OWORD *)v11;
            *(_BYTE *)(a3 + 19) = 0;
            return;
          case 1879048195:
            v5 = "AARCH64_PAC_PLT";
            goto LABEL_43;
          case 1879048193:
            v5 = "AARCH64_BTI_PLT";
            goto LABEL_43;
        }
        break;
    }
  }
  else
  {
    if (a1 == 8)
    {
      switch(a2)
      {
        case 1879048193:
          *(_BYTE *)(a3 + 23) = 16;
          v6 = "MIPS_RLD_VERSION";
          goto LABEL_26;
        case 1879048194:
          v5 = "MIPS_TIME_STAMP";
          goto LABEL_43;
        case 1879048195:
          v16 = "MIPS_ICHECKSUM";
          goto LABEL_163;
        case 1879048196:
          v8 = "MIPS_IVERSION";
          goto LABEL_23;
        case 1879048197:
          *(_BYTE *)(a3 + 23) = 10;
          *(_WORD *)(a3 + 8) = 21319;
          v14 = "MIPS_FLAGS";
          goto LABEL_176;
        case 1879048198:
          *(_BYTE *)(a3 + 23) = 17;
          *(_WORD *)(a3 + 16) = 83;
          v28 = "MIPS_BASE_ADDRESS";
          goto LABEL_169;
        case 1879048199:
          *(_BYTE *)(a3 + 23) = 9;
          *(_WORD *)(a3 + 8) = 77;
          v12 = "MIPS_MSYM";
          goto LABEL_130;
        case 1879048200:
          v8 = "MIPS_CONFLICT";
          goto LABEL_23;
        case 1879048201:
          *(_BYTE *)(a3 + 23) = 12;
          *(_DWORD *)(a3 + 8) = 1414744396;
          v15 = "MIPS_LIBLIST";
          goto LABEL_161;
        case 1879048202:
          *(_BYTE *)(a3 + 23) = 16;
          v6 = "MIPS_LOCAL_GOTNO";
          goto LABEL_26;
        case 1879048203:
          v5 = "MIPS_CONFLICTNO";
          goto LABEL_43;
        case 1879048208:
          v16 = "MIPS_LIBLISTNO";
          goto LABEL_163;
        case 1879048209:
          v8 = "MIPS_SYMTABNO";
          goto LABEL_23;
        case 1879048210:
          v5 = "MIPS_UNREFEXTNO";
          goto LABEL_43;
        case 1879048211:
          *(_BYTE *)(a3 + 23) = 11;
          *(_DWORD *)(a3 + 7) = 1297699668;
          v4 = "MIPS_GOTSYM";
          goto LABEL_46;
        case 1879048212:
          v8 = "MIPS_HIPAGENO";
          goto LABEL_23;
        case 1879048214:
          *(_BYTE *)(a3 + 23) = 12;
          *(_DWORD *)(a3 + 8) = 1346456927;
          v15 = "MIPS_RLD_MAP";
          goto LABEL_161;
        case 1879048215:
          *(_BYTE *)(a3 + 23) = 16;
          v6 = "MIPS_DELTA_CLASS";
          goto LABEL_26;
        case 1879048216:
          *(_BYTE *)(a3 + 23) = 19;
          *(_DWORD *)(a3 + 15) = 1330536275;
          v11 = "MIPS_DELTA_CLASS_NO";
          goto LABEL_41;
        case 1879048217:
          *(_BYTE *)(a3 + 23) = 19;
          *(_DWORD *)(a3 + 15) = 1162038849;
          v11 = "MIPS_DELTA_INSTANCE";
          goto LABEL_41;
        case 1879048218:
          v29 = "MIPS_DELTA_INSTANCE_NO";
          goto LABEL_151;
        case 1879048219:
          *(_BYTE *)(a3 + 23) = 16;
          v6 = "MIPS_DELTA_RELOC";
          goto LABEL_26;
        case 1879048220:
          *(_BYTE *)(a3 + 23) = 19;
          *(_DWORD *)(a3 + 15) = 1330536259;
          v11 = "MIPS_DELTA_RELOC_NO";
          goto LABEL_41;
        case 1879048221:
          v16 = "MIPS_DELTA_SYM";
          goto LABEL_163;
        case 1879048222:
          *(_BYTE *)(a3 + 23) = 17;
          *(_WORD *)(a3 + 16) = 79;
          v28 = "MIPS_DELTA_SYM_NO";
          goto LABEL_169;
        case 1879048224:
          *(_BYTE *)(a3 + 23) = 19;
          *(_DWORD *)(a3 + 15) = 1297699667;
          v11 = "MIPS_DELTA_CLASSSYM";
          goto LABEL_41;
        case 1879048225:
          v29 = "MIPS_DELTA_CLASSSYM_NO";
LABEL_151:
          *(_OWORD *)a3 = *(_OWORD *)v29;
          *(_QWORD *)(a3 + 14) = *(_QWORD *)(v29 + 14);
          *(_WORD *)(a3 + 22) = 5632;
          return;
        case 1879048226:
          v16 = "MIPS_CXX_FLAGS";
          goto LABEL_163;
        case 1879048227:
          v5 = "MIPS_PIXIE_INIT";
          goto LABEL_43;
        case 1879048228:
          v5 = "MIPS_SYMBOL_LIB";
          goto LABEL_43;
        case 1879048229:
          v30 = "MIPS_LOCALPAGE_GOTIDX";
          goto LABEL_159;
        case 1879048230:
          *(_BYTE *)(a3 + 23) = 17;
          *(_WORD *)(a3 + 16) = 88;
          v28 = "MIPS_LOCAL_GOTIDX";
          goto LABEL_169;
        case 1879048231:
          *(_BYTE *)(a3 + 23) = 18;
          strcpy((char *)a3, "MIPS_HIDDEN_GOTIDX");
          return;
        case 1879048232:
          v30 = "MIPS_PROTECTED_GOTIDX";
LABEL_159:
          *(_BYTE *)(a3 + 23) = 21;
          *(_OWORD *)a3 = *(_OWORD *)v30;
          *(_QWORD *)(a3 + 13) = *(_QWORD *)(v30 + 13);
          *(_BYTE *)(a3 + 21) = 0;
          return;
        case 1879048233:
          *(_BYTE *)(a3 + 23) = 12;
          *(_DWORD *)(a3 + 8) = 1397641033;
          v15 = "MIPS_OPTIONS";
          goto LABEL_161;
        case 1879048234:
          v16 = "MIPS_INTERFACE";
          goto LABEL_163;
        case 1879048235:
          *(_BYTE *)(a3 + 23) = 17;
          *(_WORD *)(a3 + 16) = 78;
          v28 = "MIPS_DYNSTR_ALIGN";
          goto LABEL_169;
        case 1879048236:
          *(_BYTE *)(a3 + 23) = 19;
          *(_DWORD *)(a3 + 15) = 1163544915;
          v11 = "MIPS_INTERFACE_SIZE";
          goto LABEL_41;
        case 1879048237:
          v31 = (char *)operator new(0x20uLL);
          *(_QWORD *)a3 = v31;
          *(_OWORD *)(a3 + 8) = xmmword_1C64638E0;
          strcpy(v31, "MIPS_RLD_TEXT_RESOLVE_ADDR");
          return;
        case 1879048238:
          *(_BYTE *)(a3 + 23) = 16;
          v6 = "MIPS_PERF_SUFFIX";
          goto LABEL_26;
        case 1879048239:
          *(_BYTE *)(a3 + 23) = 17;
          *(_WORD *)(a3 + 16) = 69;
          v28 = "MIPS_COMPACT_SIZE";
LABEL_169:
          *(_OWORD *)a3 = *(_OWORD *)v28;
          return;
        case 1879048240:
          v8 = "MIPS_GP_VALUE";
          goto LABEL_23;
        case 1879048241:
          *(_BYTE *)(a3 + 23) = 16;
          v6 = "MIPS_AUX_DYNAMIC";
          goto LABEL_26;
        case 1879048242:
          *(_BYTE *)(a3 + 23) = 11;
          *(_DWORD *)(a3 + 7) = 1414481748;
          v4 = "MIPS_PLTGOT";
          goto LABEL_46;
        case 1879048244:
          *(_BYTE *)(a3 + 23) = 10;
          *(_WORD *)(a3 + 8) = 21580;
          v14 = "MIPS_RWPLT";
          goto LABEL_176;
        case 1879048245:
          *(_BYTE *)(a3 + 23) = 16;
          v6 = "MIPS_RLD_MAP_REL";
          goto LABEL_26;
        case 1879048246:
          *(_BYTE *)(a3 + 23) = 10;
          *(_WORD *)(a3 + 8) = 18515;
          v14 = "MIPS_XHASH";
LABEL_176:
          *(_QWORD *)a3 = *(_QWORD *)v14;
          *(_BYTE *)(a3 + 10) = 0;
          break;
        default:
          goto LABEL_27;
      }
      return;
    }
    if (a1 == 20)
    {
      if (a2 == 1879048193)
      {
        *(_BYTE *)(a3 + 23) = 7;
        *(_DWORD *)a3 = 1598246992;
        v7 = 1414549343;
      }
      else
      {
        if (a2 != 1879048192)
          goto LABEL_27;
        *(_BYTE *)(a3 + 23) = 7;
        *(_DWORD *)a3 = 1598246992;
        v7 = 1414481759;
      }
LABEL_120:
      *(_DWORD *)(a3 + 3) = v7;
      *(_BYTE *)(a3 + 7) = 0;
      return;
    }
    if (a1 == 21 && a2 == 1879048192)
    {
      *(_BYTE *)(a3 + 23) = 11;
      *(_DWORD *)(a3 + 7) = 1263421772;
      v4 = "PPC64_GLINK";
LABEL_46:
      *(_QWORD *)a3 = *(_QWORD *)v4;
      *(_BYTE *)(a3 + 11) = 0;
      return;
    }
  }
LABEL_27:
  if (a2 <= 1879039999)
  {
    switch(a2)
    {
      case 0:
        *(_BYTE *)(a3 + 23) = 4;
        v9 = 1280070990;
        goto LABEL_117;
      case 1:
        *(_BYTE *)(a3 + 23) = 6;
        *(_DWORD *)a3 = 1145390414;
        v10 = 17477;
        goto LABEL_115;
      case 2:
        *(_BYTE *)(a3 + 23) = 8;
        v13 = 0x5A534C4552544C50;
        goto LABEL_102;
      case 3:
        *(_BYTE *)(a3 + 23) = 6;
        *(_DWORD *)a3 = 1196706896;
        v10 = 21583;
        goto LABEL_115;
      case 4:
        *(_BYTE *)(a3 + 23) = 4;
        v9 = 1213415752;
        goto LABEL_117;
      case 5:
        *(_BYTE *)(a3 + 23) = 6;
        v21 = 1414681683;
        goto LABEL_80;
      case 6:
        *(_BYTE *)(a3 + 23) = 6;
        v21 = 1414355283;
LABEL_80:
        *(_DWORD *)a3 = v21;
        v10 = 16961;
        goto LABEL_115;
      case 7:
        *(_BYTE *)(a3 + 23) = 4;
        v9 = 1095517522;
        goto LABEL_117;
      case 8:
        *(_BYTE *)(a3 + 23) = 6;
        v22 = 1095517522;
        goto LABEL_114;
      case 9:
        *(_BYTE *)(a3 + 23) = 7;
        *(_DWORD *)a3 = 1095517522;
        v23 = 17729;
        goto LABEL_119;
      case 10:
        *(_BYTE *)(a3 + 23) = 5;
        v24 = 1397904467;
        goto LABEL_93;
      case 11:
        *(_BYTE *)(a3 + 23) = 6;
        v25 = 1162697043;
        goto LABEL_95;
      case 12:
        *(_BYTE *)(a3 + 23) = 4;
        v9 = 1414090313;
        goto LABEL_117;
      case 13:
        *(_BYTE *)(a3 + 23) = 4;
        v9 = 1229867334;
        goto LABEL_117;
      case 14:
        *(_BYTE *)(a3 + 23) = 6;
        *(_DWORD *)a3 = 1095651155;
        v10 = 17741;
        goto LABEL_115;
      case 15:
        *(_BYTE *)(a3 + 23) = 5;
        *(_DWORD *)a3 = 1413566546;
        v26 = 72;
        goto LABEL_109;
      case 16:
        *(_BYTE *)(a3 + 23) = 8;
        v13 = 0x43494C4F424D5953;
        goto LABEL_102;
      case 17:
        *(_BYTE *)(a3 + 23) = 3;
        *(_DWORD *)a3 = 4998482;
        return;
      case 18:
        *(_BYTE *)(a3 + 23) = 5;
        v24 = 1397507410;
LABEL_93:
        *(_DWORD *)a3 = v24;
        v26 = 90;
        goto LABEL_109;
      case 19:
        *(_BYTE *)(a3 + 23) = 6;
        v25 = 1162626386;
LABEL_95:
        *(_DWORD *)a3 = v25;
        v10 = 21582;
        goto LABEL_115;
      case 20:
        *(_BYTE *)(a3 + 23) = 6;
        v27 = 1381256272;
        goto LABEL_100;
      case 21:
        *(_BYTE *)(a3 + 23) = 5;
        *(_DWORD *)a3 = 1430406468;
        v26 = 71;
        goto LABEL_109;
      case 22:
        *(_BYTE *)(a3 + 23) = 7;
        *(_DWORD *)a3 = 1415071060;
        v7 = 1279611476;
        goto LABEL_120;
      case 23:
        *(_BYTE *)(a3 + 23) = 6;
        v27 = 1380994378;
LABEL_100:
        *(_DWORD *)a3 = v27;
        v10 = 19525;
        goto LABEL_115;
      case 24:
        *(_BYTE *)(a3 + 23) = 8;
        v13 = 0x574F4E5F444E4942;
        goto LABEL_102;
      case 25:
        *(_BYTE *)(a3 + 23) = 10;
        *(_WORD *)(a3 + 8) = 22849;
        v14 = "INIT_ARRAY";
        goto LABEL_176;
      case 26:
        *(_BYTE *)(a3 + 23) = 10;
        *(_WORD *)(a3 + 8) = 22849;
        v14 = "FINI_ARRAY";
        goto LABEL_176;
      case 27:
        *(_BYTE *)(a3 + 23) = 12;
        *(_DWORD *)(a3 + 8) = 1515411777;
        v15 = "INIT_ARRAYSZ";
        goto LABEL_161;
      case 28:
        *(_BYTE *)(a3 + 23) = 12;
        *(_DWORD *)(a3 + 8) = 1515411777;
        v15 = "FINI_ARRAYSZ";
        goto LABEL_161;
      case 29:
        *(_BYTE *)(a3 + 23) = 7;
        *(_DWORD *)a3 = 1347310930;
        v7 = 1213481296;
        goto LABEL_120;
      case 30:
        *(_BYTE *)(a3 + 23) = 5;
        *(_DWORD *)a3 = 1195461702;
        v26 = 83;
LABEL_109:
        *(_WORD *)(a3 + 4) = v26;
        return;
      case 31:
        goto LABEL_70;
      case 32:
        v8 = "PREINIT_ARRAY";
        goto LABEL_23;
      case 33:
        v5 = "PREINIT_ARRAYSZ";
        goto LABEL_43;
      case 34:
        *(_BYTE *)(a3 + 23) = 12;
        *(_DWORD *)(a3 + 8) = 1480871496;
        v15 = "SYMTAB_SHNDX";
        goto LABEL_161;
      case 35:
        *(_BYTE *)(a3 + 23) = 6;
        v22 = 1380730194;
LABEL_114:
        *(_DWORD *)a3 = v22;
        v10 = 23123;
        goto LABEL_115;
      case 36:
        *(_BYTE *)(a3 + 23) = 4;
        v9 = 1380730194;
        goto LABEL_117;
      case 37:
        *(_BYTE *)(a3 + 23) = 7;
        *(_DWORD *)a3 = 1380730194;
        v23 = 17746;
LABEL_119:
        v7 = v23 | 0x544E0000;
        goto LABEL_120;
      default:
        switch(a2)
        {
          case 1610612751:
            *(_BYTE *)(a3 + 23) = 11;
            *(_DWORD *)(a3 + 7) = 1279611487;
            v4 = "ANDROID_REL";
            goto LABEL_46;
          case 1610612752:
            v8 = "ANDROID_RELSZ";
            goto LABEL_23;
          case 1610612753:
            *(_BYTE *)(a3 + 23) = 12;
            *(_DWORD *)(a3 + 8) = 1095517522;
            v15 = "ANDROID_RELA";
            goto LABEL_161;
          case 1610612754:
            v16 = "ANDROID_RELASZ";
            goto LABEL_163;
          default:
            goto LABEL_70;
        }
    }
  }
  if (a2 <= 1879048175)
  {
    if (a2 > 1879047924)
    {
      if (a2 != 1879047925)
      {
        if (a2 == 1879047926)
        {
          *(_BYTE *)(a3 + 23) = 11;
          *(_DWORD *)(a3 + 7) = 1414287455;
          v4 = "TLSDESC_PLT";
          goto LABEL_46;
        }
        if (a2 == 1879047927)
        {
          *(_BYTE *)(a3 + 23) = 11;
          *(_DWORD *)(a3 + 7) = 1414481759;
          v4 = "TLSDESC_GOT";
          goto LABEL_46;
        }
        goto LABEL_70;
      }
      *(_BYTE *)(a3 + 23) = 8;
      v13 = 0x485341485F554E47;
LABEL_102:
      *(_QWORD *)a3 = v13;
      *(_BYTE *)(a3 + 8) = 0;
      return;
    }
    if (a2 == 1879040000)
    {
      *(_BYTE *)(a3 + 23) = 12;
      *(_DWORD *)(a3 + 8) = 1380730194;
      v15 = "ANDROID_RELR";
LABEL_161:
      *(_QWORD *)a3 = *(_QWORD *)v15;
      *(_BYTE *)(a3 + 12) = 0;
      return;
    }
    if (a2 == 1879040001)
    {
      v16 = "ANDROID_RELRSZ";
LABEL_163:
      *(_BYTE *)(a3 + 23) = 14;
      *(_QWORD *)a3 = *(_QWORD *)v16;
      *(_QWORD *)(a3 + 6) = *(_QWORD *)(v16 + 6);
      *(_BYTE *)(a3 + 14) = 0;
      return;
    }
    if (a2 != 1879040003)
      goto LABEL_70;
    v5 = "ANDROID_RELRENT";
LABEL_43:
    *(_BYTE *)(a3 + 23) = 15;
    *(_QWORD *)a3 = *(_QWORD *)v5;
    *(_QWORD *)(a3 + 7) = *(_QWORD *)(v5 + 7);
    *(_BYTE *)(a3 + 15) = 0;
    return;
  }
  if (a2 <= 2147483644)
  {
    switch(a2)
    {
      case 1879048176:
        *(_BYTE *)(a3 + 23) = 6;
        *(_DWORD *)a3 = 1397900630;
        v10 = 19801;
        goto LABEL_115;
      case 1879048185:
        *(_BYTE *)(a3 + 23) = 9;
        *(_WORD *)(a3 + 8) = 84;
        v12 = "RELACOUNT";
        goto LABEL_130;
      case 1879048186:
        *(_BYTE *)(a3 + 23) = 8;
        v13 = 0x544E554F434C4552;
        goto LABEL_102;
      case 1879048187:
        *(_BYTE *)(a3 + 23) = 7;
        *(_DWORD *)a3 = 1195461702;
        v7 = 828330823;
        goto LABEL_120;
      case 1879048188:
        *(_BYTE *)(a3 + 23) = 6;
        *(_DWORD *)a3 = 1146242390;
        v10 = 17989;
        goto LABEL_115;
      case 1879048189:
        *(_BYTE *)(a3 + 23) = 9;
        *(_WORD *)(a3 + 8) = 77;
        v12 = "VERDEFNUM";
        goto LABEL_130;
      case 1879048190:
        *(_BYTE *)(a3 + 23) = 7;
        *(_DWORD *)a3 = 1314014550;
        v7 = 1145390414;
        goto LABEL_120;
      case 1879048191:
        *(_BYTE *)(a3 + 23) = 10;
        *(_WORD *)(a3 + 8) = 19797;
        v14 = "VERNEEDNUM";
        goto LABEL_176;
      default:
        goto LABEL_70;
    }
  }
  if (a2 != 2147483645)
  {
    if (a2 == 2147483646)
    {
      *(_BYTE *)(a3 + 23) = 4;
      v9 = 1145394005;
LABEL_117:
      *(_DWORD *)a3 = v9;
      *(_BYTE *)(a3 + 4) = 0;
      return;
    }
    if (a2 == 0x7FFFFFFF)
    {
      *(_BYTE *)(a3 + 23) = 6;
      *(_DWORD *)a3 = 1414285638;
      v10 = 21061;
LABEL_115:
      *(_WORD *)(a3 + 4) = v10;
      *(_BYTE *)(a3 + 6) = 0;
      return;
    }
LABEL_70:
    v17 = 0;
    do
    {
      v33[v17-- + 16] = a0123456789abcd_6[a2 & 0xF] | 0x20;
      v18 = (unint64_t)a2 > 0xF;
      a2 = (unint64_t)a2 >> 4;
    }
    while (v18);
    sub_1C4E61270(&v32, &v33[v17 + 17], (char *)&v34, -v17);
    v19 = std::string::insert(&v32, 0, "<unknown:>0x");
    v20 = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)a3 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    *(_QWORD *)(a3 + 16) = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v32.__r_.__value_.__l.__data_);
    return;
  }
  *(_BYTE *)(a3 + 23) = 9;
  *(_WORD *)(a3 + 8) = 89;
  v12 = "AUXILIARY";
LABEL_130:
  *(_QWORD *)a3 = *(_QWORD *)v12;
}

{
  __ZNK4llvm6object7ELFFileINS0_7ELFTypeILNS_7support10endiannessE0ELb0EEEE21getDynamicTagAsStringEjy(a1, a2, a3);
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getDynamicTagAsString(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getDynamicTagAsString(bswap32(*(unsigned __int16 *)(*(_QWORD *)a1 + 18)) >> 16, a2, a3);
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getRelocationSymbol(_QWORD *a1@<X0>, uint64_t a2@<X1>, unsigned int *a3@<X2>, uint64_t a4@<X8>)
{
  unsigned int v4;

  v4 = bswap32(*(_DWORD *)(a2 + 4));
  if (v4 > 0xFF)
  {
    sub_1C62CABF4(a1, a3, v4 >> 8, a4);
  }
  else
  {
    *(_BYTE *)(a4 + 8) &= ~1u;
    *(_QWORD *)a4 = 0;
  }
}

BOOL llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::isMips64EL(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  return *(_WORD *)(*a1 + 18) == 2048 && *(_BYTE *)(v1 + 4) == 2 && *(_BYTE *)(v1 + 5) == 1;
}

char **llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::loadVersionMap@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  const void **v8;
  const void **v9;
  const void **v10;
  unsigned int v11;
  char v12;
  BOOL v13;
  const void *v14;
  size_t v15;
  size_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _BYTE *v21;
  const void **v22;
  const void **v23;
  char *v24;
  char *v25;
  unsigned int v26;
  char v27;
  const void *v28;
  size_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  _QWORD *v35;
  uint64_t v36;
  const void **v37;
  void *__p[2];
  unint64_t v39;
  char v40;
  char v41;
  const void ***v42;
  uint64_t v43;
  const void **v44;
  const void **v45;
  char v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v42 = &v44;
  v43 = 0;
  __p[0] = 0;
  __p[1] = 0;
  v40 = 0;
  v39 = 0;
  v41 = 1;
  sub_1C59A8468((uint64_t)&v42, (unint64_t)__p);
  if (v41 && SHIBYTE(v39) < 0)
    operator delete(__p[0]);
  __p[0] = 0;
  __p[1] = 0;
  v40 = 0;
  v39 = 0;
  v41 = 1;
  sub_1C59A8468((uint64_t)&v42, (unint64_t)__p);
  if (v41 && SHIBYTE(v39) < 0)
    operator delete(__p[0]);
  if (a3)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getVersionDefinitions(a1, a3, (uint64_t)&v44);
    v8 = v44;
    if ((v46 & 1) != 0)
    {
      v44 = 0;
      *(_BYTE *)(a4 + 16) |= 1u;
      *(_QWORD *)a4 = v8;
      sub_1C59C5EB8((uint64_t)&v44);
      return sub_1C59C5DD4((char **)&v42);
    }
    v35 = a1;
    v9 = v45;
    if (v44 != v45)
    {
      v10 = v44 + 3;
      do
      {
        v11 = *((_DWORD *)v10 - 3) & 0x7FFF;
        v12 = *((_BYTE *)v10 + 23);
        v13 = v12 < 0;
        if (v12 >= 0)
          v14 = v10;
        else
          v14 = *v10;
        v15 = v12 & 0x7F;
        if (v13)
          v16 = (size_t)v10[1];
        else
          v16 = v15;
        if (v43 <= v11)
          sub_1C59C4C20((uint64_t)&v42, v11 + 1);
        if (v16 > 0x7FFFFFFFFFFFFFF7)
LABEL_68:
          abort();
        if (v16 >= 0x17)
        {
          v18 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v16 | 7) != 0x17)
            v18 = v16 | 7;
          v19 = v18 + 1;
          v17 = operator new(v18 + 1);
          __p[1] = (void *)v16;
          v39 = v19 | 0x8000000000000000;
          __p[0] = v17;
        }
        else
        {
          HIBYTE(v39) = v16;
          v17 = __p;
          if (!v16)
            goto LABEL_27;
        }
        memmove(v17, v14, v16);
LABEL_27:
        *((_BYTE *)v17 + v16) = 0;
        v20 = (char *)&v42[5 * v11];
        v21 = v20 + 32;
        if (v20[32])
        {
          if (v20[23] < 0)
            operator delete(*(void **)v20);
          *(_OWORD *)v20 = *(_OWORD *)__p;
          *((_QWORD *)v20 + 2) = v39;
          v21 = v20 + 24;
        }
        else
        {
          *(_OWORD *)v20 = *(_OWORD *)__p;
          *((_QWORD *)v20 + 2) = v39;
          v20[24] = 1;
        }
        *v21 = 1;
        v22 = v10 + 6;
        v10 += 9;
      }
      while (v22 != v9);
    }
    sub_1C59C5EB8((uint64_t)&v44);
    a1 = v35;
  }
  if (a2)
  {
    __p[0] = sub_1C59A5848;
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getVersionDependencies(a1, a2, (void (*)(_QWORD *__return_ptr, uint64_t, __int128 *))sub_1C62CD258, (uint64_t)__p, (uint64_t)&v44);
    v23 = v44;
    if ((v46 & 1) == 0)
    {
      v36 = a4;
      v37 = v45;
      if (v44 == v45)
        goto LABEL_62;
      while (1)
      {
        v24 = (char *)v23[5];
        v25 = (char *)v23[6];
        while (v24 != v25)
        {
          v26 = *((_DWORD *)v24 + 2) & 0x7FFF;
          v27 = v24[39];
          if (v27 >= 0)
            v28 = v24 + 16;
          else
            v28 = (const void *)*((_QWORD *)v24 + 2);
          if (v27 >= 0)
            v29 = v27 & 0x7F;
          else
            v29 = *((_QWORD *)v24 + 3);
          if (v43 <= v26)
            sub_1C59C4C20((uint64_t)&v42, v26 + 1);
          if (v29 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_68;
          if (v29 >= 0x17)
          {
            v31 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v29 | 7) != 0x17)
              v31 = v29 | 7;
            v32 = v31 + 1;
            v30 = operator new(v31 + 1);
            __p[1] = (void *)v29;
            v39 = v32 | 0x8000000000000000;
            __p[0] = v30;
LABEL_54:
            memmove(v30, v28, v29);
            goto LABEL_55;
          }
          HIBYTE(v39) = v29;
          v30 = __p;
          if (v29)
            goto LABEL_54;
LABEL_55:
          *((_BYTE *)v30 + v29) = 0;
          v33 = (char *)&v42[5 * v26];
          if (v33[32])
          {
            if (v33[23] < 0)
              operator delete(*(void **)v33);
            *(_OWORD *)v33 = *(_OWORD *)__p;
            *((_QWORD *)v33 + 2) = v39;
            v33[24] = 0;
          }
          else
          {
            *(_OWORD *)v33 = *(_OWORD *)__p;
            *((_QWORD *)v33 + 2) = v39;
            v33[24] = 0;
            v33[32] = 1;
          }
          v24 += 40;
        }
        v23 += 8;
        if (v23 == v37)
        {
LABEL_62:
          sub_1C59C5F14((uint64_t)&v44);
          a4 = v36;
          goto LABEL_63;
        }
      }
    }
    v44 = 0;
    *(_BYTE *)(a4 + 16) |= 1u;
    *(_QWORD *)a4 = v23;
    sub_1C59C5F14((uint64_t)&v44);
  }
  else
  {
LABEL_63:
    *(_BYTE *)(a4 + 16) &= ~1u;
    *(_QWORD *)a4 = a4 + 16;
    *(_QWORD *)(a4 + 8) = 0;
    if ((_DWORD)v43)
      sub_1C59C5F70(a4, (uint64_t)&v42);
  }
  return sub_1C59C5DD4((char **)&v42);
}

BOOL llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::isLE(uint64_t a1)
{
  return *(_BYTE *)(*(_QWORD *)a1 + 5) == 1;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::program_headers(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  unsigned int v4;
  unsigned int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  _QWORD v15[4];
  __int16 v16;
  _QWORD v17[4];
  __int16 v18;
  _QWORD v19[4];
  __int16 v20;
  _QWORD v21[4];
  __int16 v22;
  _QWORD v23[4];
  __int16 v24;
  _QWORD v25[4];
  __int16 v26;
  const char *v27;
  uint64_t v28;
  __int16 v29;

  v3 = *a1;
  if (*(_WORD *)(*a1 + 44))
  {
    v4 = *(unsigned __int16 *)(v3 + 42);
    if (v4 != 0x2000)
    {
      v27 = "invalid e_phentsize: ";
      v28 = __rev16(v4);
      v29 = 2307;
      goto LABEL_9;
    }
    v5 = 0x2000;
  }
  else
  {
    v5 = *(unsigned __int16 *)(v3 + 42);
  }
  v6 = __rev16(*(unsigned __int16 *)(*a1 + 44));
  v7 = __rev16(v5);
  v8 = bswap32(*(_DWORD *)(v3 + 28));
  v9 = a1[1];
  if (v8 + v7 * (unint64_t)v6 <= v9)
  {
    *(_BYTE *)(a2 + 16) &= ~1u;
    *(_QWORD *)a2 = v3 + v8;
    *(_QWORD *)(a2 + 8) = v6;
    return;
  }
  v13 = v8;
  v14 = v9;
  v15[0] = "program headers are longer than binary of size ";
  v15[2] = &v14;
  v16 = 2563;
  v17[0] = v15;
  v17[2] = ": e_phoff = 0x";
  v18 = 770;
  v19[0] = v17;
  v19[2] = &v13;
  v20 = 3586;
  v21[0] = v19;
  v21[2] = ", e_phnum = ";
  v22 = 770;
  v23[0] = v21;
  v23[2] = v6;
  v24 = 2306;
  v25[0] = v23;
  v25[2] = ", e_phentsize = ";
  v26 = 770;
  v27 = (const char *)v25;
  v28 = v7;
  v29 = 2306;
LABEL_9:
  v10 = operator new();
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v12 = qword_1EF8F7238[0];
  *(_QWORD *)v10 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)&v27, (_QWORD *)(v10 + 8));
  *(_QWORD *)(v10 + 32) = 3;
  *(_QWORD *)(v10 + 40) = v12;
  *(_BYTE *)(v10 + 48) = 1;
  *(_BYTE *)(a2 + 16) |= 1u;
  *(_QWORD *)a2 = v10;
}

{
  __ZNK4llvm6object7ELFFileINS0_7ELFTypeILNS_7support10endiannessE0ELb0EEEE15program_headersEv(a1, a2);
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::symbols(_QWORD *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  if (a2)
  {
    sub_1C59B1118(a1, a2, a3);
  }
  else
  {
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
  }
}

void sub_1C59B1118(_QWORD *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  std::string::size_type v6;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  std::string::size_type v10;
  std::string *v11;
  const char *v12;
  std::string *v13;
  std::string::size_type v14;
  std::string *v15;
  std::string *v16;
  const char *v17;
  uint64_t v18;
  unint64_t v20;
  void *v21;
  std::string::size_type v22;
  std::string *v23;
  std::string::size_type v24;
  std::string *v25;
  std::string::size_type v26;
  uint64_t v27;
  unint64_t v29;
  std::string *v30;
  std::string::size_type v31;
  std::string *v32;
  std::string::size_type v33;
  uint64_t v34;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  std::string::size_type v39;
  std::string::size_type v40;
  std::string v41;
  std::string v42;
  std::string v43;
  __int16 v44;
  std::string v45;
  __int16 v46;
  std::string v47;
  void *__p[2];
  std::string *v49;
  __int16 v50;
  _QWORD v51[2];
  std::string *v52;
  __int16 v53;
  _QWORD v54[2];
  std::string *v55;
  __int16 v56;
  _QWORD v57[2];
  const char *v58;
  __int16 v59;

  if (a2[9] == 0x10000000)
  {
    v6 = bswap32(a2[5]);
    if ((v6 & 0xF) != 0)
    {
      sub_1C59AD9D0(a1, (uint64_t)a2, (char *)&v47);
      v7 = std::string::insert(&v47, 0, "section ");
      v8 = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v43.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v43.__r_.__value_.__r.__words[2] = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      v9 = std::string::append(&v43, " has an invalid sh_size (");
      v10 = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v45.__r_.__value_.__l.__data_ = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v45.__r_.__value_.__r.__words[2] = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      __p[0] = &v45;
      v49 = (std::string *)v6;
      v50 = 2052;
      v51[0] = __p;
      v52 = (std::string *)") which is not a multiple of its sh_entsize (";
      v53 = 770;
      v11 = (std::string *)bswap32(a2[9]);
      v54[0] = v51;
      v55 = v11;
      v56 = 2050;
      v12 = ")";
    }
    else
    {
      v22 = bswap32(a2[4]);
      if (!__CFADD__((_DWORD)v22, (_DWORD)v6))
      {
        if (a1[1] >= (unint64_t)(v6 + v22))
        {
          v37 = *a1 + v22;
          *(_BYTE *)(a3 + 16) &= ~1u;
          *(_QWORD *)a3 = v37;
          *(_QWORD *)(a3 + 8) = v6 >> 4;
          return;
        }
        sub_1C59AD9D0(a1, (uint64_t)a2, (char *)&v41);
        v30 = std::string::insert(&v41, 0, "section ");
        v31 = v30->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v42.__r_.__value_.__l.__data_ = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        v42.__r_.__value_.__r.__words[2] = v31;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        v32 = std::string::append(&v42, " has a sh_offset (0x");
        v33 = v32->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v47.__r_.__value_.__l.__data_ = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
        v47.__r_.__value_.__r.__words[2] = v33;
        v32->__r_.__value_.__l.__size_ = 0;
        v32->__r_.__value_.__r.__words[2] = 0;
        v32->__r_.__value_.__r.__words[0] = 0;
        v39 = v6;
        v40 = v22;
        v43.__r_.__value_.__r.__words[0] = (std::string::size_type)&v47;
        v43.__r_.__value_.__r.__words[2] = (std::string::size_type)&v40;
        v44 = 3588;
        v45.__r_.__value_.__r.__words[0] = (std::string::size_type)&v43;
        v45.__r_.__value_.__r.__words[2] = (std::string::size_type)") + sh_size (0x";
        v46 = 770;
        __p[0] = &v45;
        v49 = (std::string *)&v39;
        v50 = 3586;
        v51[0] = __p;
        v52 = (std::string *)") that is greater than the file size (0x";
        v53 = 770;
        v38 = a1[1];
        v54[0] = v51;
        v55 = (std::string *)&v38;
        v56 = 3586;
        v57[0] = v54;
        v58 = ")";
        v59 = 770;
        v34 = operator new();
        if (!atomic_load(qword_1EF8F7238))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
        v36 = qword_1EF8F7238[0];
        *(_QWORD *)v34 = off_1E81A0C88;
        llvm::Twine::str((llvm::Twine *)v57, (_QWORD *)(v34 + 8));
        *(_QWORD *)(v34 + 32) = 3;
        *(_QWORD *)(v34 + 40) = v36;
        *(_BYTE *)(v34 + 48) = 1;
        *(_BYTE *)(a3 + 16) |= 1u;
        *(_QWORD *)a3 = v34;
        if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v47.__r_.__value_.__l.__data_);
        if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v42.__r_.__value_.__l.__data_);
        if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
        {
          v21 = (void *)v41.__r_.__value_.__r.__words[0];
          goto LABEL_23;
        }
        return;
      }
      sub_1C59AD9D0(a1, (uint64_t)a2, (char *)&v47);
      v23 = std::string::insert(&v47, 0, "section ");
      v24 = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v43.__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v43.__r_.__value_.__r.__words[2] = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      v25 = std::string::append(&v43, " has a sh_offset (0x");
      v26 = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v45.__r_.__value_.__l.__data_ = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v45.__r_.__value_.__r.__words[2] = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      v42.__r_.__value_.__r.__words[0] = v22;
      __p[0] = &v45;
      v49 = &v42;
      v50 = 3588;
      v51[0] = __p;
      v52 = (std::string *)") + sh_size (0x";
      v53 = 770;
      v41.__r_.__value_.__r.__words[0] = v6;
      v54[0] = v51;
      v55 = &v41;
      v56 = 3586;
      v12 = ") that cannot be represented";
    }
    v57[0] = v54;
    v58 = v12;
    v59 = 770;
    v27 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v29 = qword_1EF8F7238[0];
    *(_QWORD *)v27 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v57, (_QWORD *)(v27 + 8));
    *(_QWORD *)(v27 + 32) = 3;
    *(_QWORD *)(v27 + 40) = v29;
    *(_BYTE *)(v27 + 48) = 1;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v27;
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__r_.__value_.__l.__data_);
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v43.__r_.__value_.__l.__data_);
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    {
      v21 = (void *)v47.__r_.__value_.__r.__words[0];
      goto LABEL_23;
    }
  }
  else
  {
    sub_1C59AD9D0(a1, (uint64_t)a2, (char *)&v43);
    v13 = std::string::insert(&v43, 0, "section ");
    v14 = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__r.__words[2] = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    v15 = std::string::append(&v45, " has invalid sh_entsize: expected ");
    v16 = (std::string *)v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v49 = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    v47.__r_.__value_.__r.__words[0] = 16;
    v51[0] = __p;
    v52 = &v47;
    v53 = 2564;
    v54[0] = v51;
    v55 = (std::string *)", but got ";
    v56 = 770;
    v17 = (const char *)bswap32(a2[9]);
    v57[0] = v54;
    v58 = v17;
    v59 = 2050;
    v18 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v20 = qword_1EF8F7238[0];
    *(_QWORD *)v18 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v57, (_QWORD *)(v18 + 8));
    *(_QWORD *)(v18 + 32) = 3;
    *(_QWORD *)(v18 + 40) = v20;
    *(_BYTE *)(v18 + 48) = 1;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v18;
    if (SHIBYTE(v49) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__r_.__value_.__l.__data_);
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    {
      v21 = (void *)v43.__r_.__value_.__r.__words[0];
LABEL_23:
      operator delete(v21);
    }
  }
}

void sub_1C59B1744(_QWORD *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  std::string::size_type v6;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  std::string::size_type v10;
  std::string *v11;
  const char *v12;
  std::string *v13;
  std::string::size_type v14;
  std::string *v15;
  std::string *v16;
  const char *v17;
  uint64_t v18;
  unint64_t v20;
  void *v21;
  std::string::size_type v22;
  std::string *v23;
  std::string::size_type v24;
  std::string *v25;
  std::string::size_type v26;
  uint64_t v27;
  unint64_t v29;
  std::string *v30;
  std::string::size_type v31;
  std::string *v32;
  std::string::size_type v33;
  uint64_t v34;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  std::string::size_type v39;
  std::string::size_type v40;
  std::string v41;
  std::string v42;
  std::string v43;
  __int16 v44;
  std::string v45;
  __int16 v46;
  std::string v47;
  void *__p[2];
  std::string *v49;
  __int16 v50;
  _QWORD v51[2];
  std::string *v52;
  __int16 v53;
  _QWORD v54[2];
  std::string *v55;
  __int16 v56;
  _QWORD v57[2];
  const char *v58;
  __int16 v59;

  if (a2[9] == 201326592)
  {
    v6 = bswap32(a2[5]);
    if (v6 % 0xC)
    {
      sub_1C59AD9D0(a1, (uint64_t)a2, (char *)&v47);
      v7 = std::string::insert(&v47, 0, "section ");
      v8 = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v43.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v43.__r_.__value_.__r.__words[2] = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      v9 = std::string::append(&v43, " has an invalid sh_size (");
      v10 = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v45.__r_.__value_.__l.__data_ = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v45.__r_.__value_.__r.__words[2] = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      __p[0] = &v45;
      v49 = (std::string *)v6;
      v50 = 2052;
      v51[0] = __p;
      v52 = (std::string *)") which is not a multiple of its sh_entsize (";
      v53 = 770;
      v11 = (std::string *)bswap32(a2[9]);
      v54[0] = v51;
      v55 = v11;
      v56 = 2050;
      v12 = ")";
    }
    else
    {
      v22 = bswap32(a2[4]);
      if (!__CFADD__((_DWORD)v22, (_DWORD)v6))
      {
        if (a1[1] >= (unint64_t)(v6 + v22))
        {
          v37 = *a1 + v22;
          *(_BYTE *)(a3 + 16) &= ~1u;
          *(_QWORD *)a3 = v37;
          *(_QWORD *)(a3 + 8) = v6 / 0xC;
          return;
        }
        sub_1C59AD9D0(a1, (uint64_t)a2, (char *)&v41);
        v30 = std::string::insert(&v41, 0, "section ");
        v31 = v30->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v42.__r_.__value_.__l.__data_ = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        v42.__r_.__value_.__r.__words[2] = v31;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        v32 = std::string::append(&v42, " has a sh_offset (0x");
        v33 = v32->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v47.__r_.__value_.__l.__data_ = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
        v47.__r_.__value_.__r.__words[2] = v33;
        v32->__r_.__value_.__l.__size_ = 0;
        v32->__r_.__value_.__r.__words[2] = 0;
        v32->__r_.__value_.__r.__words[0] = 0;
        v39 = v6;
        v40 = v22;
        v43.__r_.__value_.__r.__words[0] = (std::string::size_type)&v47;
        v43.__r_.__value_.__r.__words[2] = (std::string::size_type)&v40;
        v44 = 3588;
        v45.__r_.__value_.__r.__words[0] = (std::string::size_type)&v43;
        v45.__r_.__value_.__r.__words[2] = (std::string::size_type)") + sh_size (0x";
        v46 = 770;
        __p[0] = &v45;
        v49 = (std::string *)&v39;
        v50 = 3586;
        v51[0] = __p;
        v52 = (std::string *)") that is greater than the file size (0x";
        v53 = 770;
        v38 = a1[1];
        v54[0] = v51;
        v55 = (std::string *)&v38;
        v56 = 3586;
        v57[0] = v54;
        v58 = ")";
        v59 = 770;
        v34 = operator new();
        if (!atomic_load(qword_1EF8F7238))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
        v36 = qword_1EF8F7238[0];
        *(_QWORD *)v34 = off_1E81A0C88;
        llvm::Twine::str((llvm::Twine *)v57, (_QWORD *)(v34 + 8));
        *(_QWORD *)(v34 + 32) = 3;
        *(_QWORD *)(v34 + 40) = v36;
        *(_BYTE *)(v34 + 48) = 1;
        *(_BYTE *)(a3 + 16) |= 1u;
        *(_QWORD *)a3 = v34;
        if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v47.__r_.__value_.__l.__data_);
        if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v42.__r_.__value_.__l.__data_);
        if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
        {
          v21 = (void *)v41.__r_.__value_.__r.__words[0];
          goto LABEL_23;
        }
        return;
      }
      sub_1C59AD9D0(a1, (uint64_t)a2, (char *)&v47);
      v23 = std::string::insert(&v47, 0, "section ");
      v24 = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v43.__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v43.__r_.__value_.__r.__words[2] = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      v25 = std::string::append(&v43, " has a sh_offset (0x");
      v26 = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v45.__r_.__value_.__l.__data_ = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v45.__r_.__value_.__r.__words[2] = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      v42.__r_.__value_.__r.__words[0] = v22;
      __p[0] = &v45;
      v49 = &v42;
      v50 = 3588;
      v51[0] = __p;
      v52 = (std::string *)") + sh_size (0x";
      v53 = 770;
      v41.__r_.__value_.__r.__words[0] = v6;
      v54[0] = v51;
      v55 = &v41;
      v56 = 3586;
      v12 = ") that cannot be represented";
    }
    v57[0] = v54;
    v58 = v12;
    v59 = 770;
    v27 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v29 = qword_1EF8F7238[0];
    *(_QWORD *)v27 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v57, (_QWORD *)(v27 + 8));
    *(_QWORD *)(v27 + 32) = 3;
    *(_QWORD *)(v27 + 40) = v29;
    *(_BYTE *)(v27 + 48) = 1;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v27;
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__r_.__value_.__l.__data_);
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v43.__r_.__value_.__l.__data_);
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    {
      v21 = (void *)v47.__r_.__value_.__r.__words[0];
      goto LABEL_23;
    }
  }
  else
  {
    sub_1C59AD9D0(a1, (uint64_t)a2, (char *)&v43);
    v13 = std::string::insert(&v43, 0, "section ");
    v14 = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__r.__words[2] = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    v15 = std::string::append(&v45, " has invalid sh_entsize: expected ");
    v16 = (std::string *)v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v49 = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    v47.__r_.__value_.__r.__words[0] = 12;
    v51[0] = __p;
    v52 = &v47;
    v53 = 2564;
    v54[0] = v51;
    v55 = (std::string *)", but got ";
    v56 = 770;
    v17 = (const char *)bswap32(a2[9]);
    v57[0] = v54;
    v58 = v17;
    v59 = 2050;
    v18 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v20 = qword_1EF8F7238[0];
    *(_QWORD *)v18 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v57, (_QWORD *)(v18 + 8));
    *(_QWORD *)(v18 + 32) = 3;
    *(_QWORD *)(v18 + 40) = v20;
    *(_BYTE *)(v18 + 48) = 1;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v18;
    if (SHIBYTE(v49) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__r_.__value_.__l.__data_);
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    {
      v21 = (void *)v43.__r_.__value_.__r.__words[0];
LABEL_23:
      operator delete(v21);
    }
  }
}

void sub_1C59B1D84(_QWORD *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X8>)
{
  std::string::size_type v6;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  std::string::size_type v10;
  std::string *v11;
  const char *v12;
  std::string *v13;
  std::string::size_type v14;
  std::string *v15;
  std::string *v16;
  const char *v17;
  uint64_t v18;
  unint64_t v20;
  void *v21;
  std::string::size_type v22;
  std::string *v23;
  std::string::size_type v24;
  std::string *v25;
  std::string::size_type v26;
  uint64_t v27;
  unint64_t v29;
  std::string *v30;
  std::string::size_type v31;
  std::string *v32;
  std::string::size_type v33;
  uint64_t v34;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  std::string::size_type v39;
  std::string::size_type v40;
  std::string v41;
  std::string v42;
  std::string v43;
  __int16 v44;
  std::string v45;
  __int16 v46;
  std::string v47;
  void *__p[2];
  std::string *v49;
  __int16 v50;
  _QWORD v51[2];
  std::string *v52;
  __int16 v53;
  _QWORD v54[2];
  std::string *v55;
  __int16 v56;
  _QWORD v57[2];
  const char *v58;
  __int16 v59;

  if (a2[9] == 0x8000000)
  {
    v6 = bswap32(a2[5]);
    if ((v6 & 7) != 0)
    {
      sub_1C59AD9D0(a1, (uint64_t)a2, (char *)&v47);
      v7 = std::string::insert(&v47, 0, "section ");
      v8 = v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v43.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      v43.__r_.__value_.__r.__words[2] = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      v9 = std::string::append(&v43, " has an invalid sh_size (");
      v10 = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v45.__r_.__value_.__l.__data_ = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v45.__r_.__value_.__r.__words[2] = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      __p[0] = &v45;
      v49 = (std::string *)v6;
      v50 = 2052;
      v51[0] = __p;
      v52 = (std::string *)") which is not a multiple of its sh_entsize (";
      v53 = 770;
      v11 = (std::string *)bswap32(a2[9]);
      v54[0] = v51;
      v55 = v11;
      v56 = 2050;
      v12 = ")";
    }
    else
    {
      v22 = bswap32(a2[4]);
      if (!__CFADD__((_DWORD)v22, (_DWORD)v6))
      {
        if (a1[1] >= (unint64_t)(v6 + v22))
        {
          v37 = *a1 + v22;
          *(_BYTE *)(a3 + 16) &= ~1u;
          *(_QWORD *)a3 = v37;
          *(_QWORD *)(a3 + 8) = v6 >> 3;
          return;
        }
        sub_1C59AD9D0(a1, (uint64_t)a2, (char *)&v41);
        v30 = std::string::insert(&v41, 0, "section ");
        v31 = v30->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v42.__r_.__value_.__l.__data_ = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        v42.__r_.__value_.__r.__words[2] = v31;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        v32 = std::string::append(&v42, " has a sh_offset (0x");
        v33 = v32->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v47.__r_.__value_.__l.__data_ = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
        v47.__r_.__value_.__r.__words[2] = v33;
        v32->__r_.__value_.__l.__size_ = 0;
        v32->__r_.__value_.__r.__words[2] = 0;
        v32->__r_.__value_.__r.__words[0] = 0;
        v39 = v6;
        v40 = v22;
        v43.__r_.__value_.__r.__words[0] = (std::string::size_type)&v47;
        v43.__r_.__value_.__r.__words[2] = (std::string::size_type)&v40;
        v44 = 3588;
        v45.__r_.__value_.__r.__words[0] = (std::string::size_type)&v43;
        v45.__r_.__value_.__r.__words[2] = (std::string::size_type)") + sh_size (0x";
        v46 = 770;
        __p[0] = &v45;
        v49 = (std::string *)&v39;
        v50 = 3586;
        v51[0] = __p;
        v52 = (std::string *)") that is greater than the file size (0x";
        v53 = 770;
        v38 = a1[1];
        v54[0] = v51;
        v55 = (std::string *)&v38;
        v56 = 3586;
        v57[0] = v54;
        v58 = ")";
        v59 = 770;
        v34 = operator new();
        if (!atomic_load(qword_1EF8F7238))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
        v36 = qword_1EF8F7238[0];
        *(_QWORD *)v34 = off_1E81A0C88;
        llvm::Twine::str((llvm::Twine *)v57, (_QWORD *)(v34 + 8));
        *(_QWORD *)(v34 + 32) = 3;
        *(_QWORD *)(v34 + 40) = v36;
        *(_BYTE *)(v34 + 48) = 1;
        *(_BYTE *)(a3 + 16) |= 1u;
        *(_QWORD *)a3 = v34;
        if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v47.__r_.__value_.__l.__data_);
        if (SHIBYTE(v42.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v42.__r_.__value_.__l.__data_);
        if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
        {
          v21 = (void *)v41.__r_.__value_.__r.__words[0];
          goto LABEL_23;
        }
        return;
      }
      sub_1C59AD9D0(a1, (uint64_t)a2, (char *)&v47);
      v23 = std::string::insert(&v47, 0, "section ");
      v24 = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v43.__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v43.__r_.__value_.__r.__words[2] = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      v25 = std::string::append(&v43, " has a sh_offset (0x");
      v26 = v25->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v45.__r_.__value_.__l.__data_ = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
      v45.__r_.__value_.__r.__words[2] = v26;
      v25->__r_.__value_.__l.__size_ = 0;
      v25->__r_.__value_.__r.__words[2] = 0;
      v25->__r_.__value_.__r.__words[0] = 0;
      v42.__r_.__value_.__r.__words[0] = v22;
      __p[0] = &v45;
      v49 = &v42;
      v50 = 3588;
      v51[0] = __p;
      v52 = (std::string *)") + sh_size (0x";
      v53 = 770;
      v41.__r_.__value_.__r.__words[0] = v6;
      v54[0] = v51;
      v55 = &v41;
      v56 = 3586;
      v12 = ") that cannot be represented";
    }
    v57[0] = v54;
    v58 = v12;
    v59 = 770;
    v27 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v29 = qword_1EF8F7238[0];
    *(_QWORD *)v27 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v57, (_QWORD *)(v27 + 8));
    *(_QWORD *)(v27 + 32) = 3;
    *(_QWORD *)(v27 + 40) = v29;
    *(_BYTE *)(v27 + 48) = 1;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v27;
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__r_.__value_.__l.__data_);
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v43.__r_.__value_.__l.__data_);
    if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
    {
      v21 = (void *)v47.__r_.__value_.__r.__words[0];
      goto LABEL_23;
    }
  }
  else
  {
    sub_1C59AD9D0(a1, (uint64_t)a2, (char *)&v43);
    v13 = std::string::insert(&v43, 0, "section ");
    v14 = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v45.__r_.__value_.__l.__data_ = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v45.__r_.__value_.__r.__words[2] = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    v15 = std::string::append(&v45, " has invalid sh_entsize: expected ");
    v16 = (std::string *)v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v49 = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    v47.__r_.__value_.__r.__words[0] = 8;
    v51[0] = __p;
    v52 = &v47;
    v53 = 2564;
    v54[0] = v51;
    v55 = (std::string *)", but got ";
    v56 = 770;
    v17 = (const char *)bswap32(a2[9]);
    v57[0] = v54;
    v58 = v17;
    v59 = 2050;
    v18 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v20 = qword_1EF8F7238[0];
    *(_QWORD *)v18 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v57, (_QWORD *)(v18 + 8));
    *(_QWORD *)(v18 + 32) = 3;
    *(_QWORD *)(v18 + 40) = v20;
    *(_BYTE *)(v18 + 48) = 1;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v18;
    if (SHIBYTE(v49) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v45.__r_.__value_.__l.__data_);
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    {
      v21 = (void *)v43.__r_.__value_.__r.__words[0];
LABEL_23:
      operator delete(v21);
    }
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::decode_relrs(uint64_t a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X2>, uint64_t **a4@<X8>)
{
  unsigned int v5;
  unsigned int *v6;
  uint64_t *v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  unint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t *v16;
  uint64_t *v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t v20;
  unint64_t v21;
  char *v22;
  uint64_t *v23;
  uint64_t v24;
  BOOL v25;
  uint64_t *v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  unint64_t v30;
  char *v31;
  uint64_t *v32;
  uint64_t v33;
  unsigned int v34;
  unsigned int *v35;

  v5 = *(unsigned __int16 *)(*(_QWORD *)a1 + 18);
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  if (a3)
  {
    v6 = a2;
    v35 = &a2[a3];
    v7 = 0;
    v8 = 0;
    v9 = llvm::object::getELFRelativeRelocationType((llvm::object *)__rev16(v5)) << 56;
    do
    {
      v10 = *v6;
      v11 = bswap32(v10);
      if ((v11 & 1) != 0)
      {
        v34 = v8;
        if (v11 >= 2)
        {
          do
          {
            if ((v11 & 2) != 0)
            {
              v14 = bswap32(v8);
              v15 = (unint64_t)a4[2];
              if ((unint64_t)v7 >= v15)
              {
                v17 = *a4;
                v18 = v7 - *a4;
                v19 = v18 + 1;
                if ((unint64_t)(v18 + 1) >> 61)
                  goto LABEL_46;
                v20 = v15 - (_QWORD)v17;
                if (v20 >> 2 > v19)
                  v19 = v20 >> 2;
                if ((unint64_t)v20 >= 0x7FFFFFFFFFFFFFF8)
                  v21 = 0x1FFFFFFFFFFFFFFFLL;
                else
                  v21 = v19;
                if (v21)
                {
                  if (v21 >> 61)
                    goto LABEL_47;
                  v22 = (char *)operator new(8 * v21);
                }
                else
                {
                  v22 = 0;
                }
                v23 = (uint64_t *)&v22[8 * v18];
                *v23 = v9 | v14;
                v16 = v23 + 1;
                if (v7 != v17)
                {
                  do
                  {
                    v24 = *--v7;
                    *--v23 = v24;
                  }
                  while (v7 != v17);
                  v7 = *a4;
                }
                *a4 = v23;
                a4[1] = v16;
                a4[2] = (uint64_t *)&v22[8 * v21];
                if (v7)
                  operator delete(v7);
              }
              else
              {
                *v7 = v9 | v14;
                v16 = v7 + 1;
              }
              a4[1] = v16;
              v7 = v16;
            }
            v8 += 4;
            v25 = v11 >= 4;
            v11 >>= 1;
          }
          while (v25);
        }
        v8 = v34 + 124;
      }
      else
      {
        v12 = (unint64_t)a4[2];
        if ((unint64_t)v7 >= v12)
        {
          v26 = *a4;
          v27 = v7 - *a4;
          v28 = v27 + 1;
          if ((unint64_t)(v27 + 1) >> 61)
LABEL_46:
            abort();
          v29 = v12 - (_QWORD)v26;
          if (v29 >> 2 > v28)
            v28 = v29 >> 2;
          if ((unint64_t)v29 >= 0x7FFFFFFFFFFFFFF8)
            v30 = 0x1FFFFFFFFFFFFFFFLL;
          else
            v30 = v28;
          if (v30)
          {
            if (v30 >> 61)
LABEL_47:
              sub_1C4764EE4();
            v31 = (char *)operator new(8 * v30);
          }
          else
          {
            v31 = 0;
          }
          v32 = (uint64_t *)&v31[8 * v27];
          *v32 = v9 | v10;
          v13 = v32 + 1;
          if (v7 != v26)
          {
            do
            {
              v33 = *--v7;
              *--v32 = v33;
            }
            while (v7 != v26);
            v7 = *a4;
          }
          *a4 = v32;
          a4[1] = v13;
          a4[2] = (uint64_t *)&v31[8 * v30];
          if (v7)
            operator delete(v7);
        }
        else
        {
          *v7 = v9 | v10;
          v13 = v7 + 1;
        }
        a4[1] = v13;
        v7 = v13;
        v8 = v11 + 4;
      }
      ++v6;
    }
    while (v6 != v35);
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::android_relas(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE *v5;
  BOOL v6;
  _QWORD *v7;
  unint64_t SLEB128;
  uint64_t v9;
  uint64_t v10;
  unsigned int *v11;
  unsigned int *v12;
  uint64_t v13;
  unint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  unsigned int *v18;
  unint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  BOOL v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  unsigned int v27;
  unsigned int v28;
  unsigned int v29;
  unint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  unint64_t v34;
  char *v35;
  unsigned int *v36;
  unsigned int *v37;
  uint64_t v38;
  unsigned int v39;
  BOOL v40;
  uint64_t v41;
  unint64_t v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  unint64_t v47;
  uint64_t v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _BYTE *v53;
  _QWORD v54[2];
  BOOL v55;
  char v56;
  _QWORD v57[4];
  __int16 v58;
  _BYTE *v59;
  unint64_t v60;
  char v61;
  uint64_t v62;

  v62 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionContents(a1, a2, (uint64_t)&v59);
  v5 = v59;
  if ((v61 & 1) != 0)
  {
    v59 = 0;
    goto LABEL_12;
  }
  if (v60 < 4 || *v59 != 65 || v59[1] != 80 || v59[2] != 83 || v59[3] != 50)
  {
    v57[0] = "invalid packed relocation header";
    v58 = 259;
    v13 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v15 = qword_1EF8F7238[0];
    *(_QWORD *)v13 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v57, (_QWORD *)(v13 + 8));
    *(_QWORD *)(v13 + 32) = 3;
    *(_QWORD *)(v13 + 40) = v15;
    *(_BYTE *)(v13 + 48) = 1;
    *(_BYTE *)(a3 + 24) |= 1u;
    *(_QWORD *)a3 = v13;
    goto LABEL_16;
  }
  v6 = *(_BYTE *)(*a1 + 5) == 1;
  v54[0] = v59;
  v54[1] = v60;
  v55 = v6;
  v56 = 4;
  v7 = &v53;
  v52 = 4;
  v53 = 0;
  SLEB128 = llvm::DataExtractor::getSLEB128(v54, &v52, &v53);
  v9 = llvm::DataExtractor::getSLEB128(v54, &v52, &v53);
  v5 = v53;
  if (v53)
  {
LABEL_12:
    *(_BYTE *)(a3 + 24) |= 1u;
    *(_QWORD *)a3 = v5;
    goto LABEL_16;
  }
  v10 = v9;
  v44 = a3;
  if (SLEB128)
  {
    if (SLEB128 > 0x1555555555555555)
LABEL_79:
      abort();
    v11 = (unsigned int *)operator new(12 * SLEB128);
    v12 = &v11[3 * SLEB128];
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  v17 = 0;
  v18 = v11;
  while (1)
  {
    if (!SLEB128)
    {
      *(_BYTE *)(v44 + 24) &= ~1u;
      *(_QWORD *)v44 = v11;
      *(_QWORD *)(v44 + 8) = v18;
      *(_QWORD *)(v44 + 16) = v12;
      goto LABEL_77;
    }
    v19 = llvm::DataExtractor::getSLEB128(v54, &v52, v7);
    v20 = v53;
    if (v53)
    {
LABEL_70:
      v53 = 0;
      *(_BYTE *)(v44 + 24) |= 1u;
      *(_QWORD *)v44 = v20;
      goto LABEL_75;
    }
    v21 = v19;
    v22 = SLEB128 >= v19;
    SLEB128 -= v19;
    if (!v22)
      break;
    v51 = llvm::DataExtractor::getSLEB128(v54, &v52, v7);
    if ((v51 & 2) != 0)
      v50 = llvm::DataExtractor::getSLEB128(v54, &v52, v7);
    else
      v50 = 0;
    if ((v51 & 1) != 0)
      v49 = llvm::DataExtractor::getSLEB128(v54, &v52, v7);
    else
      v49 = 0;
    v48 = v51 & 0xC;
    if (v48 == 12)
      v17 += llvm::DataExtractor::getSLEB128(v54, &v52, v7);
    v17 &= v51 << 60 >> 63;
    v20 = v53;
    v23 = v53 == 0;
    if (!v53 && v21)
    {
      v45 = SLEB128;
      v24 = 0;
      v47 = v21;
      do
      {
        v25 = v50;
        if ((v51 & 2) == 0)
          v25 = llvm::DataExtractor::getSLEB128(v54, &v52, v7);
        v26 = v49;
        if ((v51 & 1) == 0)
          v26 = llvm::DataExtractor::getSLEB128(v54, &v52, v7);
        if (v48 == 8)
          v17 += llvm::DataExtractor::getSLEB128(v54, &v52, v7);
        v10 += v25;
        v27 = bswap32(v10);
        v28 = bswap32(v26);
        v29 = bswap32(v17);
        if (v18 >= v12)
        {
          v46 = v17;
          v31 = v10;
          v32 = v7;
          v33 = 0xAAAAAAAAAAAAAAABLL * (v18 - v11) + 1;
          if (v33 > 0x1555555555555555)
            goto LABEL_79;
          if (0x5555555555555556 * (v12 - v11) > v33)
            v33 = 0x5555555555555556 * (v12 - v11);
          if (0xAAAAAAAAAAAAAAABLL * (v12 - v11) >= 0xAAAAAAAAAAAAAAALL)
            v34 = 0x1555555555555555;
          else
            v34 = v33;
          if (v34)
          {
            if (v34 > 0x1555555555555555)
              sub_1C4764EE4();
            v35 = (char *)operator new(12 * v34);
          }
          else
          {
            v35 = 0;
          }
          v36 = (unsigned int *)&v35[4 * (v18 - v11)];
          *v36 = v27;
          v36[1] = v28;
          v36[2] = v29;
          v37 = v36;
          if (v18 == v11)
          {
            v30 = v47;
          }
          else
          {
            v30 = v47;
            do
            {
              v38 = *(_QWORD *)(v18 - 3);
              v18 -= 3;
              v39 = v18[2];
              *(_QWORD *)(v37 - 3) = v38;
              v37 -= 3;
              v37[2] = v39;
            }
            while (v18 != v11);
          }
          v12 = (unsigned int *)&v35[12 * v34];
          v18 = v36 + 3;
          if (v11)
            operator delete(v11);
          v11 = v37;
          v7 = v32;
          v10 = v31;
          v17 = v46;
        }
        else
        {
          *v18 = v27;
          v18[1] = v28;
          v18[2] = v29;
          v18 += 3;
          v30 = v47;
        }
        ++v24;
        v20 = v53;
        v23 = v53 == 0;
        if (v53)
          v40 = 1;
        else
          v40 = v24 == v30;
      }
      while (!v40);
      SLEB128 = v45;
    }
    if (!v23)
      goto LABEL_70;
  }
  v57[0] = "relocation group unexpectedly large";
  v58 = 259;
  v41 = operator new();
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v43 = qword_1EF8F7238[0];
  *(_QWORD *)v41 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)v57, (_QWORD *)(v41 + 8));
  *(_QWORD *)(v41 + 32) = 3;
  *(_QWORD *)(v41 + 40) = v43;
  *(_BYTE *)(v41 + 48) = 1;
  *(_BYTE *)(v44 + 24) |= 1u;
  *(_QWORD *)v44 = v41;
LABEL_75:
  if (v11)
    operator delete(v11);
LABEL_77:
  if (v53)
    (*(void (**)(_BYTE *))(*(_QWORD *)v53 + 8))(v53);
LABEL_16:
  if ((v61 & 1) != 0)
  {
    v16 = v59;
    v59 = 0;
    if (v16)
      (*(void (**)(_BYTE *))(*(_QWORD *)v16 + 8))(v16);
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::notes_begin(_QWORD *a1@<X0>, uint64_t a2@<X1>, char **a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[4];
  __int16 v14;
  _QWORD v15[4];
  __int16 v16;
  _QWORD v17[4];
  __int16 v18;
  _QWORD v19[4];
  __int16 v20;

  v6 = bswap32(*(_DWORD *)(a2 + 4));
  v7 = bswap32(*(_DWORD *)(a2 + 16));
  if (a1[1] >= (unint64_t)(v7 + v6))
  {
    sub_1C59C789C(a4, *a1 + v6, v7, a3);
    if (!*a3)
      *a3 = 0;
  }
  else
  {
    v11 = v7;
    v12 = v6;
    v13[0] = "invalid offset (0x";
    v13[2] = &v12;
    v14 = 3587;
    v15[0] = v13;
    v15[2] = ") or size (0x";
    v16 = 770;
    v17[0] = v15;
    v17[2] = &v11;
    v18 = 3586;
    v19[0] = v17;
    v19[2] = ")";
    v20 = 770;
    v8 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v10 = qword_1EF8F7238[0];
    *(_QWORD *)v8 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v19, (_QWORD *)(v8 + 8));
    *(_QWORD *)(v8 + 32) = 3;
    *(_QWORD *)(v8 + 40) = v10;
    *(_BYTE *)(v8 + 48) = 1;
    *a3 = (char *)v8;
    *a4 = 0;
    a4[1] = 0;
    a4[2] = a3;
  }
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[4];
  __int16 v14;
  _QWORD v15[4];
  __int16 v16;
  _QWORD v17[4];
  __int16 v18;
  _QWORD v19[4];
  __int16 v20;

  v6 = bswap32(*(_DWORD *)(a2 + 16));
  v7 = bswap32(*(_DWORD *)(a2 + 20));
  if (a1[1] >= (unint64_t)(v7 + v6))
  {
    sub_1C59C789C(a4, *a1 + v6, v7, a3);
    if (!*a3)
      *a3 = 0;
  }
  else
  {
    v11 = v7;
    v12 = v6;
    v13[0] = "invalid offset (0x";
    v13[2] = &v12;
    v14 = 3587;
    v15[0] = v13;
    v15[2] = ") or size (0x";
    v16 = 770;
    v17[0] = v15;
    v17[2] = &v11;
    v18 = 3586;
    v19[0] = v17;
    v19[2] = ")";
    v20 = 770;
    v8 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v10 = qword_1EF8F7238[0];
    *(_QWORD *)v8 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v19, (_QWORD *)(v8 + 8));
    *(_QWORD *)(v8 + 32) = 3;
    *(_QWORD *)(v8 + 40) = v10;
    *(_BYTE *)(v8 + 48) = 1;
    *a3 = (char *)v8;
    *a4 = 0;
    a4[1] = 0;
    a4[2] = a3;
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::notes_end(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::notes(_QWORD *a1@<X0>, uint64_t a2@<X1>, char **a3@<X2>, _QWORD *a4@<X8>)
{
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::notes_begin(a1, a3, a4, a2);
  a4[3] = 0;
  a4[4] = 0;
  a4[5] = 0;
}

{
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::notes_begin(a1, a3, a4, a2);
  a4[3] = 0;
  a4[4] = 0;
  a4[5] = 0;
}

void sub_1C59B2EE8(unsigned int a1@<W1>, uint64_t *a2@<X2>, uint64_t a3@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v7;
  char *v8;
  uint64_t v9;
  unint64_t v11;
  char *v12;
  char *v13;
  std::string __p;
  _QWORD v15[4];
  __int16 v16;
  _QWORD v17[2];
  unint64_t v18;
  __int16 v19;
  _QWORD v20[2];
  std::string *p_p;
  __int16 v22;
  char *v23;
  char v24;
  uint64_t v25;

  v25 = *MEMORY[0x1E0C80C00];
  if (*a2)
  {
    v4 = a1;
    sub_1C59C6D90(a2, a1, (uint64_t)&v23);
    if ((v24 & 1) != 0)
    {
      v15[0] = "unable to read an extended symbol table at index ";
      v15[2] = v4;
      v16 = 2051;
      v17[0] = v15;
      v18 = (unint64_t)": ";
      v19 = 770;
      v8 = v23;
      v23 = 0;
      v13 = v8;
      sub_1C61D2548(&v13, &__p);
      v20[0] = v17;
      p_p = &__p;
      v22 = 1026;
      v9 = operator new();
      if (!atomic_load(qword_1EF8F7238))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
      v11 = qword_1EF8F7238[0];
      *(_QWORD *)v9 = off_1E81A0C88;
      llvm::Twine::str((llvm::Twine *)v20, (_QWORD *)(v9 + 8));
      *(_QWORD *)(v9 + 32) = 3;
      *(_QWORD *)(v9 + 40) = v11;
      *(_BYTE *)(v9 + 48) = 1;
      *(_BYTE *)(a3 + 8) |= 1u;
      *(_QWORD *)a3 = v9;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (v13)
        (*(void (**)(char *))(*(_QWORD *)v13 + 8))(v13);
      if ((v24 & 1) != 0)
      {
        v12 = v23;
        v23 = 0;
        if (v12)
          (*(void (**)(char *))(*(_QWORD *)v12 + 8))(v12);
      }
    }
    else
    {
      *(_BYTE *)(a3 + 8) &= ~1u;
      *(_DWORD *)a3 = bswap32(v23);
    }
  }
  else
  {
    v17[0] = "found an extended symbol index (";
    v18 = a1;
    v19 = 2051;
    v20[0] = v17;
    p_p = (std::string *)"), but unable to locate the extended symbol index table";
    v22 = 770;
    v5 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v7 = qword_1EF8F7238[0];
    *(_QWORD *)v5 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v20, (_QWORD *)(v5 + 8));
    *(_QWORD *)(v5 + 32) = 3;
    *(_QWORD *)(v5 + 40) = v7;
    *(_BYTE *)(v5 + 48) = 1;
    *(_BYTE *)(a3 + 8) |= 1u;
    *(_QWORD *)a3 = v5;
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSymbol(_QWORD *a1@<X0>, unsigned int *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  std::string *v12;
  std::string::size_type v13;
  std::string *v14;
  std::string::size_type v15;
  uint64_t v16;
  unint64_t v18;
  uint64_t v19;
  std::string v20;
  std::string v21;
  void *__p[2];
  std::string::size_type v23;
  _QWORD v24[4];
  __int16 v25;
  _QWORD v26[4];
  __int16 v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    sub_1C59B1118(a1, a2, (uint64_t)&v28);
    v8 = v30;
    if ((v30 & 1) != 0)
    {
      v10 = v28;
      v28 = 0;
      v11 = *(_BYTE *)(a4 + 8) | 1;
LABEL_17:
      *(_BYTE *)(a4 + 8) = v11;
      *(_QWORD *)a4 = v10;
      if ((v8 & 1) == 0)
        return;
      goto LABEL_18;
    }
    v9 = a3;
    if (v29 > a3)
    {
      v10 = v28 + 16 * a3;
      v11 = *(_BYTE *)(a4 + 8) & 0xFE;
      goto LABEL_17;
    }
  }
  else
  {
    v28 = 0;
    v29 = 0;
    v9 = a3;
    v30 = 0;
  }
  sub_1C59AD9D0(a1, (uint64_t)a2, (char *)&v20);
  v12 = std::string::insert(&v20, 0, "unable to get symbol from section ");
  v13 = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  v14 = std::string::append(&v21, ": invalid symbol index (");
  v15 = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v23 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v24[0] = __p;
  v24[2] = v9;
  v25 = 2052;
  v26[0] = v24;
  v26[2] = ")";
  v27 = 770;
  v16 = operator new();
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v18 = qword_1EF8F7238[0];
  *(_QWORD *)v16 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)v26, (_QWORD *)(v16 + 8));
  *(_QWORD *)(v16 + 32) = 3;
  *(_QWORD *)(v16 + 40) = v18;
  *(_BYTE *)(v16 + 48) = 1;
  *(_BYTE *)(a4 + 8) |= 1u;
  *(_QWORD *)a4 = v16;
  if (SHIBYTE(v23) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if ((v30 & 1) != 0)
  {
LABEL_18:
    v19 = v28;
    v28 = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionName(_QWORD *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v6;
  const char *v7;
  size_t v8;
  std::string *v9;
  std::string::size_type v10;
  std::string *v11;
  std::string::size_type v12;
  uint64_t v13;
  unint64_t v15;
  unint64_t v16;
  std::string v17;
  std::string v18;
  void *__p[2];
  std::string::size_type v20;
  _QWORD v21[4];
  __int16 v22;
  _QWORD v23[4];
  __int16 v24;

  if (*a2)
  {
    v6 = bswap32(*a2);
    if (a4 <= v6)
    {
      sub_1C59AD9D0(a1, (uint64_t)a2, (char *)&v17);
      v9 = std::string::insert(&v17, 0, "a section ");
      v10 = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v18.__r_.__value_.__r.__words[2] = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      v11 = std::string::append(&v18, " has an invalid sh_name (0x");
      v12 = v11->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      v20 = v12;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      v16 = v6;
      v21[0] = __p;
      v21[2] = &v16;
      v22 = 3588;
      v23[0] = v21;
      v23[2] = ") offset which goes past the end of the section name string table";
      v24 = 770;
      v13 = operator new();
      if (!atomic_load(qword_1EF8F7238))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
      v15 = qword_1EF8F7238[0];
      *(_QWORD *)v13 = off_1E81A0C88;
      llvm::Twine::str((llvm::Twine *)v23, (_QWORD *)(v13 + 8));
      *(_QWORD *)(v13 + 32) = 3;
      *(_QWORD *)(v13 + 40) = v15;
      *(_BYTE *)(v13 + 48) = 1;
      *(_BYTE *)(a5 + 16) |= 1u;
      *(_QWORD *)a5 = v13;
      if (SHIBYTE(v20) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v18.__r_.__value_.__l.__data_);
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v17.__r_.__value_.__l.__data_);
    }
    else
    {
      v7 = (const char *)(a3 + v6);
      v8 = strlen(v7);
      *(_BYTE *)(a5 + 16) &= ~1u;
      *(_QWORD *)a5 = v7;
      *(_QWORD *)(a5 + 8) = v8;
    }
  }
  else
  {
    *(_BYTE *)(a5 + 16) &= ~1u;
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSegmentContents(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  std::string::size_type v5;
  std::string::size_type v6;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  const char *v10;
  uint64_t v11;
  unint64_t v13;
  void *v14;
  std::string *v15;
  std::string::size_type v16;
  std::string *v17;
  std::string::size_type v18;
  uint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::string::size_type v24;
  std::string::size_type v25;
  std::string v26;
  std::string v27;
  std::string v28;
  __int16 v29;
  void *__p[2];
  const char *v31;
  __int16 v32;
  std::string v33;
  _QWORD v34[2];
  std::string *v35;
  __int16 v36;
  _QWORD v37[2];
  const char *v38;
  __int16 v39;
  _QWORD v40[2];
  std::string *v41;
  __int16 v42;
  _QWORD v43[2];
  const char *v44;
  __int16 v45;

  v5 = bswap32(*(_DWORD *)(a2 + 4));
  v6 = bswap32(*(_DWORD *)(a2 + 16));
  if (__CFADD__((_DWORD)v5, (_DWORD)v6))
  {
    sub_1C59B3960((char *)&v33, a1, a2);
    v7 = std::string::insert(&v33, 0, "program header ");
    v8 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v28.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v28.__r_.__value_.__r.__words[2] = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    v9 = std::string::append(&v28, " has a p_offset (0x");
    v10 = (const char *)v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v31 = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    v27.__r_.__value_.__r.__words[0] = v5;
    v34[0] = __p;
    v35 = &v27;
    v36 = 3588;
    v37[0] = v34;
    v38 = ") + p_filesz (0x";
    v39 = 770;
    v26.__r_.__value_.__r.__words[0] = v6;
    v40[0] = v37;
    v41 = &v26;
    v42 = 3586;
    v43[0] = v40;
    v44 = ") that cannot be represented";
    v45 = 770;
    v11 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v13 = qword_1EF8F7238[0];
    *(_QWORD *)v11 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v43, (_QWORD *)(v11 + 8));
    *(_QWORD *)(v11 + 32) = 3;
    *(_QWORD *)(v11 + 40) = v13;
    *(_BYTE *)(v11 + 48) = 1;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v11;
    if (SHIBYTE(v31) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v28.__r_.__value_.__l.__data_);
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
    {
      v14 = (void *)v33.__r_.__value_.__r.__words[0];
LABEL_20:
      operator delete(v14);
    }
  }
  else if (a1[1] >= (unint64_t)(v6 + v5))
  {
    v22 = *a1 + v5;
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_QWORD *)a3 = v22;
    *(_QWORD *)(a3 + 8) = v6;
  }
  else
  {
    sub_1C59B3960((char *)&v26, a1, a2);
    v15 = std::string::insert(&v26, 0, "program header  ");
    v16 = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v27.__r_.__value_.__l.__data_ = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v27.__r_.__value_.__r.__words[2] = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    v17 = std::string::append(&v27, " has a p_offset (0x");
    v18 = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v33.__r_.__value_.__l.__data_ = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v33.__r_.__value_.__r.__words[2] = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    v24 = v6;
    v25 = v5;
    v28.__r_.__value_.__r.__words[0] = (std::string::size_type)&v33;
    v28.__r_.__value_.__r.__words[2] = (std::string::size_type)&v25;
    v29 = 3588;
    __p[0] = &v28;
    v31 = ") + p_filesz (0x";
    v32 = 770;
    v34[0] = __p;
    v35 = (std::string *)&v24;
    v36 = 3586;
    v37[0] = v34;
    v38 = ") that is greater than the file size (0x";
    v39 = 770;
    v23 = a1[1];
    v40[0] = v37;
    v41 = (std::string *)&v23;
    v42 = 3586;
    v43[0] = v40;
    v44 = ")";
    v45 = 770;
    v19 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v21 = qword_1EF8F7238[0];
    *(_QWORD *)v19 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v43, (_QWORD *)(v19 + 8));
    *(_QWORD *)(v19 + 32) = 3;
    *(_QWORD *)(v19 + 40) = v21;
    *(_BYTE *)(v19 + 48) = 1;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v19;
    if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v33.__r_.__value_.__l.__data_);
    if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v27.__r_.__value_.__l.__data_);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
    {
      v14 = (void *)v26.__r_.__value_.__r.__words[0];
      goto LABEL_20;
    }
  }
}

void sub_1C59B3960(char *a1, _QWORD *a2, uint64_t a3)
{
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8[4];
  __int16 v9;
  char *v10[4];
  __int16 v11;
  char *v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::program_headers(a2, (uint64_t)&v12);
  if ((v13 & 1) != 0)
  {
    v5 = v12;
    v12 = 0;
    v8[0] = v5;
    sub_1C4D62BD4(v8, v10);
    if (v8[0])
      (*(void (**)(char *))(*(_QWORD *)v8[0] + 8))(v8[0]);
    a1[23] = 15;
    strcpy(a1, "[unknown index]");
  }
  else
  {
    v7 = (a3 - (uint64_t)v12) >> 5;
    v8[0] = "[index ";
    v8[2] = (char *)&v7;
    v9 = 2819;
    v10[0] = (char *)v8;
    v10[2] = "]";
    v11 = 770;
    llvm::Twine::str((llvm::Twine *)v10, a1);
  }
  if ((v13 & 1) != 0)
  {
    v6 = v12;
    v12 = 0;
    if (v6)
      (*(void (**)(char *))(*(_QWORD *)v6 + 8))(v6);
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::decodeBBAddrMap(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v5;
  unsigned int Unsigned;
  uint64_t v7;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  unsigned int v12;
  char *v13;
  char *v14;
  BOOL v15;
  unint64_t v16;
  unint64_t v18;
  int v19;
  int v20;
  unint64_t v21;
  unint64_t v23;
  int v24;
  unint64_t v26;
  unsigned int v27;
  char v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int v34;
  int v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  int v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unsigned int v46;
  unint64_t v47;
  unsigned int v48;
  unsigned int v49;
  char *v50;
  char *v51;
  uint64_t v52;
  unsigned __int128 v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56[2];
  BOOL v57;
  unsigned __int8 v58;
  _QWORD v59[2];
  uint64_t *v60;
  __int16 v61;
  _QWORD v62[2];
  const char *v63;
  __int16 v64;
  _QWORD v65[2];
  unint64_t *p_ULEB128;
  __int16 v67;
  unint64_t v68;
  void *v69;
  const char *v70;
  uint64_t v71;
  __int16 v72;
  unint64_t ULEB128;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)0,false>>::getSectionContents(a1, a2, (uint64_t)&v75);
  if ((v77 & 1) != 0)
  {
    v42 = v75;
    *(_BYTE *)(a3 + 24) |= 1u;
    *(_QWORD *)a3 = v42;
  }
  else
  {
    v44 = a3;
    v5 = *(_BYTE *)(*a1 + 5) == 1;
    v56[0] = v75;
    v56[1] = v76;
    v57 = v5;
    v58 = 4;
    v54 = 0uLL;
    v55 = 0;
    v53 = 0uLL;
    v45 = v76;
    if (v76)
    {
      while (1)
      {
        Unsigned = llvm::DataExtractor::getUnsigned(v56, (unint64_t *)&v53, v58, (uint64_t *)&v53 + 1);
        v74 = v53;
        ULEB128 = llvm::DataExtractor::getULEB128(v56, (uint64_t *)&v53, (_QWORD *)&v53 + 1);
        v48 = ULEB128;
        v46 = Unsigned;
        if (!HIDWORD(ULEB128))
          break;
        v59[0] = "ULEB128 value at offset 0x";
        v60 = &v74;
        v61 = 3587;
        v62[0] = v59;
        v63 = " exceeds UINT32_MAX (0x";
        v64 = 770;
        v65[0] = v62;
        p_ULEB128 = &ULEB128;
        v67 = 3586;
        v68 = (unint64_t)v65;
        v70 = ")";
        v72 = 770;
        v7 = operator new();
        if (!atomic_load(qword_1EF8F7238))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
        v9 = qword_1EF8F7238[0];
        *(_QWORD *)v7 = off_1E81A0C88;
        llvm::Twine::str((llvm::Twine *)&v68, (_QWORD *)(v7 + 8));
        v10 = 0;
        v11 = 0;
        *(_QWORD *)(v7 + 32) = 3;
        *(_QWORD *)(v7 + 40) = v9;
        *(_BYTE *)(v7 + 48) = 1;
LABEL_49:
        v68 = v46;
        v70 = 0;
        v71 = 0;
        v69 = 0;
        sub_1C59C6EE4(&v69, v10, v11, 0xAAAAAAAAAAAAAAABLL * ((v11 - (uint64_t)v10) >> 2));
        sub_1C59AB80C((void **)&v54, (uint64_t)&v68);
        if (v69)
          operator delete(v69);
        if (v10)
          operator delete(v10);
        v41 = (char *)*((_QWORD *)&v53 + 1);
        if (v7 || v53 >= (unint64_t)v45)
          goto LABEL_58;
      }
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v10 = 0;
      while (1)
      {
        if (*((_QWORD *)&v53 + 1))
          v15 = 1;
        else
          v15 = v12 >= v48;
        if (v15)
        {
          v7 = 0;
          v11 = (uint64_t)v14;
          goto LABEL_49;
        }
        v74 = v53;
        v16 = llvm::DataExtractor::getULEB128(v56, (uint64_t *)&v53, (_QWORD *)&v53 + 1);
        ULEB128 = v16;
        v49 = v12;
        if (HIDWORD(v16))
        {
          v59[0] = "ULEB128 value at offset 0x";
          v60 = &v74;
          v61 = 3587;
          v62[0] = v59;
          v63 = " exceeds UINT32_MAX (0x";
          v64 = 770;
          v65[0] = v62;
          p_ULEB128 = &ULEB128;
          v67 = 3586;
          v68 = (unint64_t)v65;
          v70 = ")";
          v72 = 770;
          v7 = operator new();
          if (!atomic_load(qword_1EF8F7238))
            llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
          v18 = qword_1EF8F7238[0];
          *(_QWORD *)v7 = off_1E81A0C88;
          llvm::Twine::str((llvm::Twine *)&v68, (_QWORD *)(v7 + 8));
          v19 = 0;
          v20 = 0;
        }
        else
        {
          v20 = v16;
          v74 = v53;
          v21 = llvm::DataExtractor::getULEB128(v56, (uint64_t *)&v53, (_QWORD *)&v53 + 1);
          ULEB128 = v21;
          if (!HIDWORD(v21))
          {
            v24 = v21;
            v74 = v53;
            v23 = llvm::DataExtractor::getULEB128(v56, (uint64_t *)&v53, (_QWORD *)&v53 + 1);
            ULEB128 = v23;
            if (HIDWORD(v23))
            {
              v59[0] = "ULEB128 value at offset 0x";
              v60 = &v74;
              v61 = 3587;
              v62[0] = v59;
              v63 = " exceeds UINT32_MAX (0x";
              v64 = 770;
              v65[0] = v62;
              p_ULEB128 = &ULEB128;
              v67 = 3586;
              v68 = (unint64_t)v65;
              v70 = ")";
              v72 = 770;
              v7 = operator new();
              if (!atomic_load(qword_1EF8F7238))
                llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
              v26 = qword_1EF8F7238[0];
              *(_QWORD *)v7 = off_1E81A0C88;
              llvm::Twine::str((llvm::Twine *)&v68, (_QWORD *)(v7 + 8));
              LODWORD(v23) = 0;
              *(_QWORD *)(v7 + 32) = 3;
              *(_QWORD *)(v7 + 40) = v26;
              *(_BYTE *)(v7 + 48) = 1;
            }
            else
            {
              v7 = 0;
            }
            v19 = v24;
            goto LABEL_27;
          }
          v59[0] = "ULEB128 value at offset 0x";
          v60 = &v74;
          v61 = 3587;
          v62[0] = v59;
          v63 = " exceeds UINT32_MAX (0x";
          v64 = 770;
          v65[0] = v62;
          p_ULEB128 = &ULEB128;
          v67 = 3586;
          v68 = (unint64_t)v65;
          v70 = ")";
          v72 = 770;
          v7 = operator new();
          if (!atomic_load(qword_1EF8F7238))
            llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
          v18 = qword_1EF8F7238[0];
          *(_QWORD *)v7 = off_1E81A0C88;
          llvm::Twine::str((llvm::Twine *)&v68, (_QWORD *)(v7 + 8));
          v19 = 0;
        }
        LODWORD(v23) = 0;
        *(_QWORD *)(v7 + 32) = 3;
        *(_QWORD *)(v7 + 40) = v18;
        *(_BYTE *)(v7 + 48) = 1;
LABEL_27:
        v27 = (v23 >> 1) & 1;
        v28 = v23 & 1;
        v29 = (v23 >> 2) & 1;
        v30 = (v23 >> 3) & 1;
        if (v14 >= v13)
        {
          v32 = 0xAAAAAAAAAAAAAAABLL * ((v14 - v10) >> 2) + 1;
          if (v32 > 0x1555555555555555)
            abort();
          if (0x5555555555555556 * ((v13 - v10) >> 2) > v32)
            v32 = 0x5555555555555556 * ((v13 - v10) >> 2);
          if (0xAAAAAAAAAAAAAAABLL * ((v13 - v10) >> 2) >= 0xAAAAAAAAAAAAAAALL)
            v33 = 0x1555555555555555;
          else
            v33 = v32;
          if (v33)
          {
            if (v33 > 0x1555555555555555)
              sub_1C4764EE4();
            v34 = (v23 >> 3) & 1;
            v35 = v19;
            v47 = v33;
            v36 = (char *)operator new(12 * v33);
            v33 = v47;
            v19 = v35;
            LOBYTE(v30) = v34;
          }
          else
          {
            v36 = 0;
          }
          v37 = &v36[4 * ((v14 - v10) >> 2)];
          *(_DWORD *)v37 = v20;
          *((_DWORD *)v37 + 1) = v19;
          v37[8] = v28;
          v37[9] = v27;
          v37[10] = v29;
          v37[11] = v30;
          if (v14 == v10)
          {
            v10 = &v36[4 * ((v14 - v10) >> 2)];
            v31 = v49;
          }
          else
          {
            v38 = &v36[4 * ((v14 - v10) >> 2)];
            v31 = v49;
            do
            {
              v39 = *(_QWORD *)(v14 - 12);
              v14 -= 12;
              v40 = *((_DWORD *)v14 + 2);
              *(_QWORD *)(v38 - 12) = v39;
              v38 -= 12;
              *((_DWORD *)v38 + 2) = v40;
            }
            while (v14 != v10);
            v14 = v10;
            v10 = v38;
          }
          v13 = &v36[12 * v33];
          v11 = (uint64_t)(v37 + 12);
          if (v14)
            operator delete(v14);
        }
        else
        {
          *(_DWORD *)v14 = v20;
          *((_DWORD *)v14 + 1) = v19;
          v14[8] = v28;
          v14[9] = (v23 & 2) != 0;
          v14[10] = (v23 & 4) != 0;
          v11 = (uint64_t)(v14 + 12);
          v14[11] = (v23 & 8) != 0;
          v31 = v49;
        }
        v12 = v31 + 1;
        v14 = (char *)v11;
        if (v7)
          goto LABEL_49;
      }
    }
    v7 = 0;
    v41 = 0;
LABEL_58:
    if (v7 | (unint64_t)v41)
    {
      v50 = (char *)v7;
      v51 = v41;
      *((_QWORD *)&v53 + 1) = 0;
      sub_1C624E8DC(&v51, &v50, &v52);
      *(_BYTE *)(v44 + 24) |= 1u;
      *(_QWORD *)v44 = v52;
      v52 = 0;
      if (v50)
        (*(void (**)(char *))(*(_QWORD *)v50 + 8))(v50);
      if (v51)
        (*(void (**)(char *))(*(_QWORD *)v51 + 8))(v51);
    }
    else
    {
      *(_BYTE *)(v44 + 24) &= ~1u;
      *(_OWORD *)v44 = v54;
      *(_QWORD *)(v44 + 16) = v55;
      v54 = 0uLL;
      v55 = 0;
    }
    if (*((_QWORD *)&v53 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v53 + 1) + 8))(*((_QWORD *)&v53 + 1));
    v68 = (unint64_t)&v54;
    sub_1C52E1318((void ***)&v68);
    if ((v77 & 1) != 0)
    {
      v43 = v75;
      v75 = 0;
      if (v43)
        (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
    }
  }
}

uint64_t llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::base(uint64_t a1)
{
  return *(_QWORD *)a1;
}

uint64_t llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::end(_QWORD *a1)
{
  return *a1 + a1[1];
}

uint64_t llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getBufSize(uint64_t a1)
{
  return *(_QWORD *)(a1 + 8);
}

_QWORD *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::ELFFile(_QWORD *result, uint64_t a2, uint64_t a3)
{
  *result = a2;
  result[1] = a3;
  return result;
}

{
  *result = a2;
  result[1] = a3;
  return result;
}

uint64_t llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getHeader(uint64_t a1)
{
  return *(_QWORD *)a1;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getVersionDefinitions(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  unsigned __int16 *v6;
  char v7;
  unsigned int v8;
  std::string::size_type v9;
  __int128 *v10;
  __int128 *v11;
  int v12;
  char v13;
  unint64_t v14;
  _BYTE *v15;
  __int128 v16;
  uint64_t v17;
  char *v18;
  uint64_t v19;
  __int128 v20;
  std::string::size_type v21;
  uint64_t v22;
  std::string *v23;
  std::string::size_type v24;
  std::string *v25;
  std::string::size_type v26;
  std::string *v27;
  uint64_t v28;
  unint64_t v30;
  void *v31;
  std::string *v32;
  std::string::size_type v33;
  std::string *v34;
  char *v35;
  std::string::size_type v36;
  std::string *v37;
  std::string::size_type size;
  std::string *v39;
  std::string::size_type v40;
  uint64_t v41;
  unint64_t v43;
  void *v44;
  std::string *v45;
  std::string::size_type v46;
  std::string *v47;
  std::string::size_type v48;
  const char *v49;
  std::string *v50;
  std::string::size_type v51;
  std::string *v52;
  std::string::size_type v53;
  std::string *v54;
  std::string::size_type v55;
  std::string *v56;
  std::string::size_type v57;
  uint64_t v58;
  unint64_t v60;
  std::string::size_type v61;
  std::string::size_type v62;
  std::string::size_type v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t *v66;
  std::string *v67;
  std::string::size_type v68;
  std::string v69;
  std::string __p;
  __int16 v71;
  unint64_t v72;
  uint64_t v73;
  char *v74;
  std::string v75;
  std::string v76;
  std::string v77;
  _QWORD v78[4];
  _QWORD *v79;
  _BYTE v80[24];
  uint64_t v81;
  __int16 v82;
  _QWORD v83[2];
  char v84;
  _QWORD v85[2];
  char v86;
  uint64_t v87;

  v87 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getLinkAsStrtab(a1, a2, (uint64_t)v85);
  if ((v86 & 1) != 0)
  {
    v22 = v85[0];
    *(_BYTE *)(a3 + 24) |= 1u;
    *(_QWORD *)a3 = v22;
    return;
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionContents(a1, a2, (uint64_t)v83);
  if ((v84 & 1) != 0)
  {
    sub_1C59B5074(&v76, a1, a2);
    v32 = std::string::insert(&v76, 0, "cannot read content of ");
    v33 = v32->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v77.__r_.__value_.__l.__data_ = *(_OWORD *)&v32->__r_.__value_.__l.__data_;
    v77.__r_.__value_.__r.__words[2] = v33;
    v32->__r_.__value_.__l.__size_ = 0;
    v32->__r_.__value_.__r.__words[2] = 0;
    v32->__r_.__value_.__r.__words[0] = 0;
    v34 = std::string::append(&v77, ": ");
    v35 = 0;
    v36 = v34->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v36;
    v34->__r_.__value_.__l.__size_ = 0;
    v34->__r_.__value_.__r.__words[2] = 0;
    v34->__r_.__value_.__r.__words[0] = 0;
    if ((v84 & 1) != 0)
    {
      v35 = (char *)v83[0];
      v83[0] = 0;
    }
    v74 = v35;
    sub_1C61D2548(&v74, &v75);
    if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v37 = &v75;
    else
      v37 = (std::string *)v75.__r_.__value_.__r.__words[0];
    if ((v75.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&v75.__r_.__value_.__s + 23) & 0x7F;
    else
      size = v75.__r_.__value_.__l.__size_;
    v39 = std::string::append(&__p, (const std::string::value_type *)v37, size);
    v40 = v39->__r_.__value_.__r.__words[2];
    *(_OWORD *)v80 = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
    *(_QWORD *)&v80[16] = v40;
    v39->__r_.__value_.__l.__size_ = 0;
    v39->__r_.__value_.__r.__words[2] = 0;
    v39->__r_.__value_.__r.__words[0] = 0;
    LOWORD(v79) = 260;
    v78[0] = v80;
    v41 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v43 = qword_1EF8F7238[0];
    *(_QWORD *)v41 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v78, (_QWORD *)(v41 + 8));
    *(_QWORD *)(v41 + 32) = 3;
    *(_QWORD *)(v41 + 40) = v43;
    *(_BYTE *)(v41 + 48) = 1;
    *(_BYTE *)(a3 + 24) |= 1u;
    *(_QWORD *)a3 = v41;
    if ((v80[23] & 0x80000000) != 0)
      operator delete(*(void **)v80);
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v75.__r_.__value_.__l.__data_);
    if (v74)
      (*(void (**)(char *))(*(_QWORD *)v74 + 8))(v74);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v77.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v76.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_86;
    v44 = (void *)v76.__r_.__value_.__r.__words[0];
  }
  else
  {
    v6 = (unsigned __int16 *)v83[0];
    v72 = v83[0] + v83[1];
    v73 = v83[0];
    v78[0] = &v72;
    v78[1] = a1;
    v78[2] = a2;
    v78[3] = &v73;
    v79 = v85;
    memset(&v77, 0, sizeof(v77));
    if (!*(_DWORD *)(a2 + 44))
    {
      v21 = 0;
      v7 = *(_BYTE *)(a3 + 24);
      v20 = 0uLL;
LABEL_33:
      *(_BYTE *)(a3 + 24) = v7 & 0xFE;
      *(_OWORD *)a3 = v20;
      *(_QWORD *)(a3 + 16) = v21;
      goto LABEL_86;
    }
    v7 = *(_BYTE *)(a3 + 24);
    v8 = 1;
    while (1)
    {
      if ((unint64_t)(v6 + 10) > v72)
      {
        sub_1C59B5074(&v69, a1, a2);
        v45 = std::string::insert(&v69, 0, "invalid ");
        v46 = v45->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v75.__r_.__value_.__l.__data_ = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
        v75.__r_.__value_.__r.__words[2] = v46;
        v45->__r_.__value_.__l.__size_ = 0;
        v45->__r_.__value_.__r.__words[2] = 0;
        v45->__r_.__value_.__r.__words[0] = 0;
        v47 = std::string::append(&v75, ": version definition ");
        v48 = v47->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v76.__r_.__value_.__l.__data_ = *(_OWORD *)&v47->__r_.__value_.__l.__data_;
        v76.__r_.__value_.__r.__words[2] = v48;
        v47->__r_.__value_.__l.__size_ = 0;
        v47->__r_.__value_.__r.__words[2] = 0;
        v47->__r_.__value_.__r.__words[0] = 0;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v76;
        __p.__r_.__value_.__r.__words[2] = v8;
        v71 = 2052;
        v49 = " goes past the end of the section";
        goto LABEL_68;
      }
      if ((v6 & 3) != 0)
      {
        sub_1C59B5074(&v75, a1, a2);
        v50 = std::string::insert(&v75, 0, "invalid ");
        v51 = v50->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v76.__r_.__value_.__l.__data_ = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
        v76.__r_.__value_.__r.__words[2] = v51;
        v50->__r_.__value_.__l.__size_ = 0;
        v50->__r_.__value_.__r.__words[2] = 0;
        v50->__r_.__value_.__r.__words[0] = 0;
        v52 = std::string::append(&v76, ": found a misaligned version definition entry at offset 0x");
        v53 = v52->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v52->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v53;
        v52->__r_.__value_.__l.__size_ = 0;
        v52->__r_.__value_.__r.__words[2] = 0;
        v52->__r_.__value_.__r.__words[0] = 0;
        v69.__r_.__value_.__r.__words[0] = (std::string::size_type)v6 - v73;
        v27 = &v69;
        goto LABEL_35;
      }
      v9 = *v6;
      if (v9 != 1)
        break;
      v10 = sub_1C59A35D4((uint64_t)&v77, v77.__r_.__value_.__l.__size_);
      *(_DWORD *)v10 = (_DWORD)v6 - v73;
      *((_DWORD *)v10 + 1) = *v6;
      *((_DWORD *)v10 + 2) = v6[1];
      *((_DWORD *)v10 + 3) = v6[2];
      *((_DWORD *)v10 + 4) = v6[3];
      *((_DWORD *)v10 + 5) = *((_DWORD *)v6 + 2);
      v69.__r_.__value_.__r.__words[0] = (std::string::size_type)v6 + *((unsigned int *)v6 + 3);
      if (v6[3])
      {
        v11 = v10;
        v12 = 0;
        v66 = (unint64_t *)(v10 + 3);
        v67 = (std::string *)((char *)v10 + 24);
        while ((v69.__r_.__value_.__s.__data_[0] & 3) == 0)
        {
          sub_1C59B5134((uint64_t)v78, (unsigned int **)&v69, v8, (uint64_t)v80);
          v13 = v82;
          if ((v82 & 1) != 0)
          {
            v17 = *(_QWORD *)v80;
            *(_QWORD *)v80 = 0;
            v7 |= 1u;
            *(_BYTE *)(a3 + 24) = v7;
            *(_QWORD *)a3 = v17;
          }
          else if (v12)
          {
            v14 = *((_QWORD *)v11 + 7);
            if (v14 >= *((_QWORD *)v11 + 8))
            {
              v18 = sub_1C59C53F0(v66, (uint64_t)v80);
            }
            else
            {
              *(_DWORD *)v14 = *(_DWORD *)v80;
              v15 = (_BYTE *)(v14 + 8);
              if (SHIBYTE(v81) < 0)
              {
                sub_1C47EBC30(v15, *(void **)&v80[8], *(unint64_t *)&v80[16]);
              }
              else
              {
                v16 = *(_OWORD *)&v80[8];
                *(_QWORD *)(v14 + 24) = v81;
                *(_OWORD *)v15 = v16;
              }
              v18 = (char *)(v14 + 32);
            }
            *((_QWORD *)v11 + 7) = v18;
          }
          else
          {
            std::string::operator=(v67, (const std::string *)&v80[8]);
          }
          if ((v82 & 1) != 0)
          {
            v19 = *(_QWORD *)v80;
            *(_QWORD *)v80 = 0;
            if (v19)
              (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
          }
          else if (SHIBYTE(v81) < 0)
          {
            operator delete(*(void **)&v80[8]);
          }
          if ((v13 & 1) != 0)
            goto LABEL_77;
          if (++v12 >= v6[3])
            goto LABEL_29;
        }
        sub_1C59B5074(&v75, a1, a2);
        v23 = std::string::insert(&v75, 0, "invalid ");
        v24 = v23->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v76.__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
        v76.__r_.__value_.__r.__words[2] = v24;
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        v25 = std::string::append(&v76, ": found a misaligned auxiliary entry at offset 0x");
        v26 = v25->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v26;
        v25->__r_.__value_.__l.__size_ = 0;
        v25->__r_.__value_.__r.__words[2] = 0;
        v25->__r_.__value_.__r.__words[0] = 0;
        v68 = v69.__r_.__value_.__r.__words[0] - v73;
        v27 = (std::string *)&v68;
LABEL_35:
        *(_QWORD *)v80 = &__p;
        *(_QWORD *)&v80[16] = v27;
        v82 = 3588;
        v28 = operator new();
        if (!atomic_load(qword_1EF8F7238))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
        v30 = qword_1EF8F7238[0];
        *(_QWORD *)v28 = off_1E81A0C88;
        llvm::Twine::str((llvm::Twine *)v80, (_QWORD *)(v28 + 8));
        *(_QWORD *)(v28 + 32) = 3;
        *(_QWORD *)(v28 + 40) = v30;
        *(_BYTE *)(v28 + 48) = 1;
        *(_BYTE *)(a3 + 24) = v7 | 1;
        *(_QWORD *)a3 = v28;
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
          operator delete(__p.__r_.__value_.__l.__data_);
        if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v76.__r_.__value_.__l.__data_);
        if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
        {
          v31 = (void *)v75.__r_.__value_.__r.__words[0];
LABEL_76:
          operator delete(v31);
          goto LABEL_77;
        }
        goto LABEL_77;
      }
LABEL_29:
      v6 = (unsigned __int16 *)((char *)v6 + *((unsigned int *)v6 + 4));
      if (++v8 > *(_DWORD *)(a2 + 44))
      {
        v20 = *(_OWORD *)&v77.__r_.__value_.__l.__data_;
        v21 = v77.__r_.__value_.__r.__words[2];
        goto LABEL_33;
      }
    }
    sub_1C59B5074(&v69, a1, a2);
    v54 = std::string::insert(&v69, 0, "unable to dump ");
    v55 = v54->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v75.__r_.__value_.__l.__data_ = *(_OWORD *)&v54->__r_.__value_.__l.__data_;
    v75.__r_.__value_.__r.__words[2] = v55;
    v54->__r_.__value_.__l.__size_ = 0;
    v54->__r_.__value_.__r.__words[2] = 0;
    v54->__r_.__value_.__r.__words[0] = 0;
    v56 = std::string::append(&v75, ": version ");
    v57 = v56->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v76.__r_.__value_.__l.__data_ = *(_OWORD *)&v56->__r_.__value_.__l.__data_;
    v76.__r_.__value_.__r.__words[2] = v57;
    v56->__r_.__value_.__l.__size_ = 0;
    v56->__r_.__value_.__r.__words[2] = 0;
    v56->__r_.__value_.__r.__words[0] = 0;
    __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v76;
    __p.__r_.__value_.__r.__words[2] = v9;
    v71 = 2052;
    v49 = " is not yet supported";
LABEL_68:
    *(_QWORD *)v80 = &__p;
    *(_QWORD *)&v80[16] = v49;
    v82 = 770;
    v58 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v60 = qword_1EF8F7238[0];
    *(_QWORD *)v58 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v80, (_QWORD *)(v58 + 8));
    *(_QWORD *)(v58 + 32) = 3;
    *(_QWORD *)(v58 + 40) = v60;
    *(_BYTE *)(v58 + 48) = 1;
    *(_BYTE *)(a3 + 24) = v7 | 1;
    *(_QWORD *)a3 = v58;
    if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v76.__r_.__value_.__l.__data_);
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v75.__r_.__value_.__l.__data_);
    if (SHIBYTE(v69.__r_.__value_.__r.__words[2]) < 0)
    {
      v31 = (void *)v69.__r_.__value_.__r.__words[0];
      goto LABEL_76;
    }
LABEL_77:
    v61 = v77.__r_.__value_.__r.__words[0];
    if (!v77.__r_.__value_.__r.__words[0])
      goto LABEL_86;
    v44 = (void *)v77.__r_.__value_.__r.__words[0];
    if (v77.__r_.__value_.__l.__size_ != v77.__r_.__value_.__r.__words[0])
    {
      v62 = v77.__r_.__value_.__l.__size_ - 24;
      do
      {
        *(_QWORD *)v80 = v62;
        sub_1C4FF890C((void ***)v80);
        if (*(char *)(v62 - 1) < 0)
          operator delete(*(void **)(v62 - 24));
        v63 = v62 - 48;
        v62 -= 72;
      }
      while (v63 != v61);
      v44 = (void *)v77.__r_.__value_.__r.__words[0];
    }
    v77.__r_.__value_.__l.__size_ = v61;
  }
  operator delete(v44);
LABEL_86:
  if ((v84 & 1) != 0)
  {
    v64 = v83[0];
    v83[0] = 0;
    if (v64)
      (*(void (**)(uint64_t))(*(_QWORD *)v64 + 8))(v64);
  }
  if ((v86 & 1) != 0)
  {
    v65 = v85[0];
    v85[0] = 0;
    if (v65)
      (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getLinkAsStrtab(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  char *v10;
  std::string::size_type v11;
  std::string *p_p;
  std::string::size_type size;
  std::string *v14;
  std::string::size_type v15;
  uint64_t v16;
  unint64_t v18;
  std::string *v19;
  std::string::size_type v20;
  std::string *v21;
  char *v22;
  std::string::size_type v23;
  std::string *v24;
  std::string::size_type v25;
  std::string *v26;
  std::string::size_type v27;
  uint64_t v28;
  unint64_t v30;
  uint64_t v31;
  char *v32;
  std::string v33;
  char *v34;
  std::string __p;
  std::string v36;
  std::string v37;
  std::string v38;
  _QWORD v39[4];
  __int16 v40;
  __int128 v41;
  std::string::size_type v42;
  char *v43;
  char v44;
  uint64_t v45;

  v45 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSection(a1, *(_DWORD *)(a2 + 40), (uint64_t)&v43);
  if ((v44 & 1) != 0)
  {
    sub_1C59B5074(&v36, a1, a2);
    v7 = std::string::insert(&v36, 0, "invalid section linked to ");
    v8 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v37.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v37.__r_.__value_.__r.__words[2] = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    v9 = std::string::append(&v37, ": ");
    v10 = 0;
    v11 = v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v38.__r_.__value_.__l.__data_ = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v38.__r_.__value_.__r.__words[2] = v11;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    if ((v44 & 1) != 0)
    {
      v10 = v43;
      v43 = 0;
    }
    v34 = v10;
    sub_1C61D2548(&v34, &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      p_p = &__p;
    else
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&__p.__r_.__value_.__s + 23) & 0x7F;
    else
      size = __p.__r_.__value_.__l.__size_;
    v14 = std::string::append(&v38, (const std::string::value_type *)p_p, size);
    v15 = v14->__r_.__value_.__r.__words[2];
    v41 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
    v42 = v15;
    v14->__r_.__value_.__l.__size_ = 0;
    v14->__r_.__value_.__r.__words[2] = 0;
    v14->__r_.__value_.__r.__words[0] = 0;
    v40 = 260;
    v39[0] = &v41;
    v16 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v18 = qword_1EF8F7238[0];
    *(_QWORD *)v16 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v39, (_QWORD *)(v16 + 8));
    *(_QWORD *)(v16 + 32) = 3;
    *(_QWORD *)(v16 + 40) = v18;
    *(_BYTE *)(v16 + 48) = 1;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v16;
    if (SHIBYTE(v42) < 0)
      operator delete((void *)v41);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v34)
      (*(void (**)(char *))(*(_QWORD *)v34 + 8))(v34);
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v38.__r_.__value_.__l.__data_);
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v37.__r_.__value_.__l.__data_);
    if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v36.__r_.__value_.__l.__data_);
  }
  else
  {
    v39[0] = sub_1C59A5848;
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getStringTable(a1, (uint64_t)v43, (void (*)(std::string *__return_ptr, uint64_t, _QWORD *))sub_1C62CD258, (uint64_t)v39, (uint64_t)&v41);
    if ((v42 & 1) != 0)
    {
      sub_1C59B5074(&__p, a1, a2);
      v19 = std::string::insert(&__p, 0, "invalid string table linked to ");
      v20 = v19->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v36.__r_.__value_.__l.__data_ = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
      v36.__r_.__value_.__r.__words[2] = v20;
      v19->__r_.__value_.__l.__size_ = 0;
      v19->__r_.__value_.__r.__words[2] = 0;
      v19->__r_.__value_.__r.__words[0] = 0;
      v21 = std::string::append(&v36, ": ");
      v22 = 0;
      v23 = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v37.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v37.__r_.__value_.__r.__words[2] = v23;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      if ((v42 & 1) != 0)
      {
        v22 = (char *)v41;
        *(_QWORD *)&v41 = 0;
      }
      v32 = v22;
      sub_1C61D2548(&v32, &v33);
      if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v24 = &v33;
      else
        v24 = (std::string *)v33.__r_.__value_.__r.__words[0];
      if ((v33.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        v25 = *((_BYTE *)&v33.__r_.__value_.__s + 23) & 0x7F;
      else
        v25 = v33.__r_.__value_.__l.__size_;
      v26 = std::string::append(&v37, (const std::string::value_type *)v24, v25);
      v27 = v26->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v38.__r_.__value_.__l.__data_ = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
      v38.__r_.__value_.__r.__words[2] = v27;
      v26->__r_.__value_.__l.__size_ = 0;
      v26->__r_.__value_.__r.__words[2] = 0;
      v26->__r_.__value_.__r.__words[0] = 0;
      v40 = 260;
      v39[0] = &v38;
      v28 = operator new();
      if (!atomic_load(qword_1EF8F7238))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
      v30 = qword_1EF8F7238[0];
      *(_QWORD *)v28 = off_1E81A0C88;
      llvm::Twine::str((llvm::Twine *)v39, (_QWORD *)(v28 + 8));
      *(_QWORD *)(v28 + 32) = 3;
      *(_QWORD *)(v28 + 40) = v30;
      *(_BYTE *)(v28 + 48) = 1;
      *(_BYTE *)(a3 + 16) |= 1u;
      *(_QWORD *)a3 = v28;
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v38.__r_.__value_.__l.__data_);
      if (SHIBYTE(v33.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v33.__r_.__value_.__l.__data_);
      if (v32)
        (*(void (**)(char *))(*(_QWORD *)v32 + 8))(v32);
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v37.__r_.__value_.__l.__data_);
      if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v36.__r_.__value_.__l.__data_);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if ((v42 & 1) != 0)
      {
        v31 = v41;
        *(_QWORD *)&v41 = 0;
        if (v31)
          (*(void (**)(uint64_t))(*(_QWORD *)v31 + 8))(v31);
      }
    }
    else
    {
      *(_BYTE *)(a3 + 16) &= ~1u;
      *(_OWORD *)a3 = v41;
    }
  }
  if ((v44 & 1) != 0)
  {
    v6 = (uint64_t)v43;
    v43 = 0;
    if (v6)
      (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  }
}

void sub_1C59B5074(_QWORD *a1, _QWORD *a2, uint64_t a3)
{
  unint64_t v6;
  const char *ELFSectionTypeName;
  uint64_t v8;
  _QWORD v9[4];
  __int16 v10;
  _QWORD v11[4];
  __int16 v12;
  _QWORD v13[4];

  v13[3] = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::sections(a2, (uint64_t)v13);
  v6 = a3 - v13[0];
  ELFSectionTypeName = llvm::object::getELFSectionTypeName((llvm::object *)*(unsigned __int16 *)(*a2 + 18), *(_DWORD *)(a3 + 4));
  v10 = 773;
  v9[0] = ELFSectionTypeName;
  v9[1] = v8;
  v9[2] = " section with index ";
  v11[0] = v9;
  v11[2] = (v6 >> 6);
  v12 = 2050;
  llvm::Twine::str((llvm::Twine *)v11, a1);
}

void sub_1C59B5134(uint64_t a1@<X0>, unsigned int **a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  unsigned int *v5;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  std::string::size_type v10;
  uint64_t v11;
  unint64_t v13;
  unsigned int *v14;
  uint64_t *v15;
  int v16;
  unint64_t v17;
  unint64_t v18;
  size_t v19;
  _QWORD *v20;
  char v21;
  uint64_t v22;
  _QWORD **p_dst;
  uint64_t v24;
  uint64_t v25;
  std::string::size_type v26;
  std::string v27;
  _BYTE __p[24];
  _QWORD v29[2];
  unint64_t v30;
  __int16 v31;
  _QWORD *__dst;
  __int128 v33;
  __int16 v34;
  std::string v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  if ((unint64_t)(*a2 + 2) <= **(_QWORD **)a1)
  {
    v14 = (unsigned int *)((char *)v5 + v5[1]);
    *a2 = v14;
    v15 = *(uint64_t **)(a1 + 32);
    v16 = **(_DWORD **)(a1 + 24);
    v17 = *v5;
    v18 = v15[1];
    v19 = v18 - v17;
    if (v18 < v17)
    {
      v29[0] = "<invalid vda_name: ";
      v30 = v17;
      v31 = 2051;
      __dst = v29;
      *((_QWORD *)&v33 + 1) = ">";
      v34 = 770;
      llvm::Twine::str((llvm::Twine *)&__dst, __p);
      v20 = *(_QWORD **)__p;
      v35.__r_.__value_.__r.__words[0] = *(_QWORD *)&__p[8];
      *(std::string::size_type *)((char *)v35.__r_.__value_.__r.__words + 7) = *(_QWORD *)&__p[15];
      v21 = __p[23];
LABEL_21:
      *(_BYTE *)(a4 + 32) &= ~1u;
      *(_DWORD *)a4 = (_DWORD)v14 - v16;
      v26 = v35.__r_.__value_.__r.__words[0];
      *(_QWORD *)(a4 + 8) = v20;
      *(_QWORD *)(a4 + 16) = v26;
      *(_QWORD *)(a4 + 23) = *(std::string::size_type *)((char *)v35.__r_.__value_.__r.__words + 7);
      *(_BYTE *)(a4 + 31) = v21;
      return;
    }
    if (v19 >= 0x7FFFFFFFFFFFFFF8)
      abort();
    v22 = *v15;
    if (v19 >= 0x17)
    {
      v24 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
      if ((v19 | 7) != 0x17)
        v24 = v19 | 7;
      v25 = v24 + 1;
      p_dst = (_QWORD **)operator new(v24 + 1);
      *(_QWORD *)&v33 = v19;
      *((_QWORD *)&v33 + 1) = v25 | 0x8000000000000000;
      __dst = p_dst;
    }
    else
    {
      HIBYTE(v33) = v18 - v17;
      p_dst = &__dst;
      if (v18 == v17)
        goto LABEL_20;
    }
    memmove(p_dst, (const void *)(v22 + v17), v19);
LABEL_20:
    *((_BYTE *)p_dst + v19) = 0;
    v20 = __dst;
    v35.__r_.__value_.__r.__words[0] = v33;
    *(std::string::size_type *)((char *)v35.__r_.__value_.__r.__words + 7) = *(_QWORD *)((char *)&v33 + 7);
    v21 = HIBYTE(v33);
    goto LABEL_21;
  }
  sub_1C59B5074(&v27, *(_QWORD **)(a1 + 8), *(_QWORD *)(a1 + 16));
  v7 = std::string::insert(&v27, 0, "invalid ");
  v8 = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v35.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v35.__r_.__value_.__r.__words[2] = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  v9 = std::string::append(&v35, ": version definition ");
  v10 = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  *(_QWORD *)&__p[16] = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  v29[0] = __p;
  v30 = a3;
  v31 = 2052;
  __dst = v29;
  *((_QWORD *)&v33 + 1) = " refers to an auxiliary entry that goes past the end of the section";
  v34 = 770;
  v11 = operator new();
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v13 = qword_1EF8F7238[0];
  *(_QWORD *)v11 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)&__dst, (_QWORD *)(v11 + 8));
  *(_QWORD *)(v11 + 32) = 3;
  *(_QWORD *)(v11 + 40) = v13;
  *(_BYTE *)(v11 + 48) = 1;
  *(_BYTE *)(a4 + 32) |= 1u;
  *(_QWORD *)a4 = v11;
  if ((__p[23] & 0x80000000) != 0)
    operator delete(*(void **)__p);
  if (SHIBYTE(v35.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v35.__r_.__value_.__l.__data_);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v27.__r_.__value_.__l.__data_);
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getVersionDependencies(_QWORD *a1@<X0>, uint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr, uint64_t, __int128 *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v7;
  _QWORD *v8;
  unint64_t v10;
  uint64_t v11;
  __int128 v12;
  unint64_t v13;
  unsigned int v14;
  unsigned __int16 *v15;
  std::string::size_type v16;
  uint64_t v17;
  unint64_t v18;
  unint64_t v19;
  __int128 *p_dst;
  uint64_t v21;
  uint64_t v22;
  const char *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  char *v27;
  _DWORD *v28;
  _DWORD *v29;
  unint64_t v30;
  size_t v31;
  __int128 *v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  unint64_t v36;
  void **v37;
  std::string::size_type v38;
  std::string *v39;
  std::string::size_type v40;
  std::string *v41;
  std::string::size_type v42;
  std::string::size_type v43;
  uint64_t v44;
  unint64_t v46;
  void *v47;
  std::string *v48;
  std::string::size_type v49;
  std::string *v50;
  std::string::size_type v51;
  const char *v52;
  uint64_t v53;
  unint64_t v55;
  std::string::size_type v56;
  void *v57;
  std::string::size_type v58;
  std::string::size_type v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  uint64_t v63;
  uint64_t v64;
  std::string *v65;
  std::string::size_type v66;
  std::string *v67;
  char *v68;
  std::string::size_type v69;
  std::string *v70;
  std::string::size_type size;
  std::string *v72;
  std::string::size_type v73;
  uint64_t v74;
  unint64_t v76;
  std::string *v77;
  std::string::size_type v78;
  std::string *v79;
  std::string::size_type v80;
  std::string *v81;
  std::string::size_type v82;
  std::string *v83;
  std::string::size_type v84;
  std::string *v85;
  std::string::size_type v86;
  std::string *v87;
  std::string::size_type v88;
  unint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unsigned int v92;
  _QWORD *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  char **v97;
  std::string __p;
  __int16 v99;
  char *v100;
  std::string v101;
  std::string v102;
  std::string v103;
  std::string v104;
  char *v105;
  __int128 __dst;
  const char *v107;
  __int16 v108;
  _QWORD v109[2];
  char v110;
  _QWORD v111[2];
  char v112;
  uint64_t v113;

  v7 = a2;
  v8 = a1;
  v113 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getLinkAsStrtab(a1, a2, (uint64_t)v111);
  v93 = v8;
  if ((v112 & 1) != 0)
  {
    v62 = (char *)v111[0];
    v111[0] = 0;
    v105 = v62;
    sub_1C61D2548(&v105, &__p);
    v108 = 260;
    *(_QWORD *)&__dst = &__p;
    a3(v109, a4, &__dst);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (v105)
      (*(void (**)(char *))(*(_QWORD *)v105 + 8))(v105);
    v63 = v109[0];
    if (v109[0])
    {
      *(_BYTE *)(a5 + 24) |= 1u;
      *(_QWORD *)a5 = v63;
      goto LABEL_73;
    }
    v96 = 0;
    v10 = 0;
  }
  else
  {
    v10 = v111[1];
    v96 = v111[0];
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionContents(v8, v7, (uint64_t)v109);
  if ((v110 & 1) != 0)
  {
    v64 = a5;
    sub_1C59B5074(&v102, v8, v7);
    v65 = std::string::insert(&v102, 0, "cannot read content of ");
    v66 = v65->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v103.__r_.__value_.__l.__data_ = *(_OWORD *)&v65->__r_.__value_.__l.__data_;
    v103.__r_.__value_.__r.__words[2] = v66;
    v65->__r_.__value_.__l.__size_ = 0;
    v65->__r_.__value_.__r.__words[2] = 0;
    v65->__r_.__value_.__r.__words[0] = 0;
    v67 = std::string::append(&v103, ": ");
    v68 = 0;
    v69 = v67->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v104.__r_.__value_.__l.__data_ = *(_OWORD *)&v67->__r_.__value_.__l.__data_;
    v104.__r_.__value_.__r.__words[2] = v69;
    v67->__r_.__value_.__l.__size_ = 0;
    v67->__r_.__value_.__r.__words[2] = 0;
    v67->__r_.__value_.__r.__words[0] = 0;
    if ((v110 & 1) != 0)
    {
      v68 = (char *)v109[0];
      v109[0] = 0;
    }
    v100 = v68;
    sub_1C61D2548(&v100, &v101);
    if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      v70 = &v101;
    else
      v70 = (std::string *)v101.__r_.__value_.__r.__words[0];
    if ((v101.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
      size = *((_BYTE *)&v101.__r_.__value_.__s + 23) & 0x7F;
    else
      size = v101.__r_.__value_.__l.__size_;
    v72 = std::string::append(&v104, (const std::string::value_type *)v70, size);
    v73 = v72->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v73;
    v72->__r_.__value_.__l.__size_ = 0;
    v72->__r_.__value_.__r.__words[2] = 0;
    v72->__r_.__value_.__r.__words[0] = 0;
    v108 = 260;
    *(_QWORD *)&__dst = &__p;
    v74 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v76 = qword_1EF8F7238[0];
    *(_QWORD *)v74 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)&__dst, (_QWORD *)(v74 + 8));
    *(_QWORD *)(v74 + 32) = 3;
    *(_QWORD *)(v74 + 40) = v76;
    *(_BYTE *)(v74 + 48) = 1;
    *(_BYTE *)(v64 + 24) |= 1u;
    *(_QWORD *)v64 = v74;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v101.__r_.__value_.__l.__data_);
    if (v100)
      (*(void (**)(char *))(*(_QWORD *)v100 + 8))(v100);
    if (SHIBYTE(v104.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v104.__r_.__value_.__l.__data_);
    if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v103.__r_.__value_.__l.__data_);
    if ((SHIBYTE(v102.__r_.__value_.__r.__words[2]) & 0x80000000) == 0)
      goto LABEL_70;
    v57 = (void *)v102.__r_.__value_.__r.__words[0];
  }
  else
  {
    v11 = v109[0];
    v12 = 0uLL;
    memset(&v104, 0, sizeof(v104));
    if (!*(_DWORD *)(v7 + 44))
    {
      v38 = 0;
LABEL_41:
      *(_BYTE *)(a5 + 24) &= ~1u;
      *(_OWORD *)a5 = v12;
      *(_QWORD *)(a5 + 16) = v38;
      goto LABEL_70;
    }
    v90 = a5;
    v91 = v7;
    v13 = v109[0] + v109[1];
    v14 = 1;
    v15 = (unsigned __int16 *)v109[0];
    v95 = v10;
    while (1)
    {
      if ((unint64_t)(v15 + 10) > v13)
      {
        sub_1C59B5074(&v101, v8, v7);
        v77 = std::string::insert(&v101, 0, "invalid ");
        v78 = v77->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v102.__r_.__value_.__l.__data_ = *(_OWORD *)&v77->__r_.__value_.__l.__data_;
        v102.__r_.__value_.__r.__words[2] = v78;
        v77->__r_.__value_.__l.__size_ = 0;
        v77->__r_.__value_.__r.__words[2] = 0;
        v77->__r_.__value_.__r.__words[0] = 0;
        v79 = std::string::append(&v102, ": version dependency ");
        v80 = v79->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v103.__r_.__value_.__l.__data_ = *(_OWORD *)&v79->__r_.__value_.__l.__data_;
        v103.__r_.__value_.__r.__words[2] = v80;
        v79->__r_.__value_.__l.__size_ = 0;
        v79->__r_.__value_.__r.__words[2] = 0;
        v79->__r_.__value_.__r.__words[0] = 0;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v103;
        __p.__r_.__value_.__r.__words[2] = v14;
        v99 = 2052;
        v52 = " goes past the end of the section";
        goto LABEL_52;
      }
      if ((v15 & 3) != 0)
        break;
      v16 = *v15;
      if (v16 != 1)
      {
        sub_1C59B5074(&v101, v93, v7);
        v85 = std::string::insert(&v101, 0, "unable to dump ");
        v86 = v85->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v102.__r_.__value_.__l.__data_ = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
        v102.__r_.__value_.__r.__words[2] = v86;
        v85->__r_.__value_.__l.__size_ = 0;
        v85->__r_.__value_.__r.__words[2] = 0;
        v85->__r_.__value_.__r.__words[0] = 0;
        v87 = std::string::append(&v102, ": version ");
        v88 = v87->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v103.__r_.__value_.__l.__data_ = *(_OWORD *)&v87->__r_.__value_.__l.__data_;
        v103.__r_.__value_.__r.__words[2] = v88;
        v87->__r_.__value_.__l.__size_ = 0;
        v87->__r_.__value_.__r.__words[2] = 0;
        v87->__r_.__value_.__r.__words[0] = 0;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v103;
        __p.__r_.__value_.__r.__words[2] = v16;
        v99 = 2052;
        v52 = " is not yet supported";
        goto LABEL_52;
      }
      v17 = sub_1C59A4610((uint64_t)&v104, (_OWORD *)v104.__r_.__value_.__l.__size_);
      *(_DWORD *)v17 = *v15;
      *(_DWORD *)(v17 + 4) = v15[1];
      *(_DWORD *)(v17 + 8) = (_DWORD)v15 - v11;
      v18 = *((unsigned int *)v15 + 1);
      v19 = v10 - v18;
      v92 = v14;
      if (v10 <= v18)
      {
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)"<corrupt vn_file: ";
        v89 = v89 & 0xFFFFFFFF00000000 | v18;
        __p.__r_.__value_.__r.__words[2] = v89;
        v99 = 2051;
        *(_QWORD *)&__dst = &__p;
        v107 = ">";
        v108 = 770;
        llvm::Twine::str((llvm::Twine *)&__dst, &v103);
        v21 = v17 + 16;
        v22 = v17;
        if (*(char *)(v17 + 39) < 0)
          operator delete(*(void **)v21);
        v23 = (const char *)v103.__r_.__value_.__r.__words[2];
        *(_OWORD *)v21 = *(_OWORD *)&v103.__r_.__value_.__l.__data_;
      }
      else
      {
        if (v19 > 0x7FFFFFFFFFFFFFF7)
LABEL_109:
          abort();
        if (v19 >= 0x17)
        {
          v24 = (v19 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v19 | 7) != 0x17)
            v24 = v19 | 7;
          v25 = v24 + 1;
          p_dst = (__int128 *)operator new(v24 + 1);
          *((_QWORD *)&__dst + 1) = v10 - v18;
          v107 = (const char *)(v25 | 0x8000000000000000);
          *(_QWORD *)&__dst = p_dst;
        }
        else
        {
          HIBYTE(v107) = v10 - v18;
          p_dst = &__dst;
        }
        memmove(p_dst, (const void *)(v96 + v18), v10 - v18);
        *((_BYTE *)p_dst + v19) = 0;
        v22 = v17;
        v21 = v17 + 16;
        if (*(char *)(v17 + 39) < 0)
          operator delete(*(void **)v21);
        *(_OWORD *)v21 = __dst;
        v23 = v107;
      }
      *(_QWORD *)(v21 + 16) = v23;
      if (v15[1])
      {
        v26 = 0;
        v27 = (char *)v15 + *((unsigned int *)v15 + 2);
        v97 = (char **)(v22 + 40);
        v94 = v22;
        while (1)
        {
          if ((v27 & 3) != 0)
          {
            sub_1C59B5074(&v102, v93, v91);
            v39 = std::string::insert(&v102, 0, "invalid ");
            v40 = v39->__r_.__value_.__r.__words[2];
            *(_OWORD *)&v103.__r_.__value_.__l.__data_ = *(_OWORD *)&v39->__r_.__value_.__l.__data_;
            v103.__r_.__value_.__r.__words[2] = v40;
            v39->__r_.__value_.__l.__size_ = 0;
            v39->__r_.__value_.__r.__words[2] = 0;
            v39->__r_.__value_.__r.__words[0] = 0;
            v41 = std::string::append(&v103, ": found a misaligned auxiliary entry at offset 0x");
            v42 = v41->__r_.__value_.__r.__words[2];
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v41->__r_.__value_.__l.__data_;
            __p.__r_.__value_.__r.__words[2] = v42;
            v41->__r_.__value_.__l.__size_ = 0;
            v41->__r_.__value_.__r.__words[2] = 0;
            v41->__r_.__value_.__r.__words[0] = 0;
            v43 = (std::string::size_type)&v27[-v11];
            goto LABEL_43;
          }
          if ((unint64_t)(v27 + 16) > v13)
            break;
          v28 = (_DWORD *)sub_1C59A47F0(v97, *(_QWORD *)(v22 + 48));
          v29 = v28;
          *v28 = *(_DWORD *)v27;
          v28[1] = *((unsigned __int16 *)v27 + 2);
          v28[2] = *((unsigned __int16 *)v27 + 3);
          v28[3] = (_DWORD)v27 - v11;
          v30 = *((unsigned int *)v27 + 2);
          v31 = v10 - v30;
          if (v10 <= v30)
          {
            MEMORY[0x1CAA32ABC](v28 + 4, "<corrupt>");
          }
          else
          {
            if (v31 > 0x7FFFFFFFFFFFFFF7)
              goto LABEL_109;
            if (v31 >= 0x17)
            {
              v33 = (v31 & 0xFFFFFFFFFFFFFFF8) + 8;
              if ((v31 | 7) != 0x17)
                v33 = v31 | 7;
              v34 = v11;
              v35 = v33 + 1;
              v32 = (__int128 *)operator new(v33 + 1);
              v36 = v35 | 0x8000000000000000;
              v11 = v34;
              v22 = v94;
              *((_QWORD *)&__dst + 1) = v31;
              v107 = (const char *)v36;
              *(_QWORD *)&__dst = v32;
            }
            else
            {
              HIBYTE(v107) = v10 - v30;
              v32 = &__dst;
            }
            memmove(v32, (const void *)(v96 + v30), v31);
            *((_BYTE *)v32 + v31) = 0;
            v37 = (void **)(v29 + 4);
            if (*((char *)v29 + 39) < 0)
              operator delete(*v37);
            *(_OWORD *)v37 = __dst;
            *((_QWORD *)v29 + 4) = v107;
            v10 = v95;
          }
          v27 += *((unsigned int *)v27 + 3);
          if (++v26 >= v15[1])
            goto LABEL_38;
        }
        sub_1C59B5074(&v101, v93, v91);
        v48 = std::string::insert(&v101, 0, "invalid ");
        v49 = v48->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v102.__r_.__value_.__l.__data_ = *(_OWORD *)&v48->__r_.__value_.__l.__data_;
        v102.__r_.__value_.__r.__words[2] = v49;
        v48->__r_.__value_.__l.__size_ = 0;
        v48->__r_.__value_.__r.__words[2] = 0;
        v48->__r_.__value_.__r.__words[0] = 0;
        v50 = std::string::append(&v102, ": version dependency ");
        v51 = v50->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v103.__r_.__value_.__l.__data_ = *(_OWORD *)&v50->__r_.__value_.__l.__data_;
        v103.__r_.__value_.__r.__words[2] = v51;
        v50->__r_.__value_.__l.__size_ = 0;
        v50->__r_.__value_.__r.__words[2] = 0;
        v50->__r_.__value_.__r.__words[0] = 0;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v103;
        __p.__r_.__value_.__r.__words[2] = v92;
        v99 = 2052;
        v52 = " refers to an auxiliary entry that goes past the end of the section";
LABEL_52:
        *(_QWORD *)&__dst = &__p;
        v107 = v52;
        v108 = 770;
        v53 = operator new();
        if (!atomic_load(qword_1EF8F7238))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
        v55 = qword_1EF8F7238[0];
        *(_QWORD *)v53 = off_1E81A0C88;
        llvm::Twine::str((llvm::Twine *)&__dst, (_QWORD *)(v53 + 8));
        *(_QWORD *)(v53 + 32) = 3;
        *(_QWORD *)(v53 + 40) = v55;
        *(_BYTE *)(v53 + 48) = 1;
        *(_BYTE *)(v90 + 24) |= 1u;
        *(_QWORD *)v90 = v53;
        if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v103.__r_.__value_.__l.__data_);
        if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v102.__r_.__value_.__l.__data_);
        if (SHIBYTE(v101.__r_.__value_.__r.__words[2]) < 0)
        {
          v47 = (void *)v101.__r_.__value_.__r.__words[0];
          goto LABEL_60;
        }
        goto LABEL_61;
      }
LABEL_38:
      v15 = (unsigned __int16 *)((char *)v15 + *((unsigned int *)v15 + 3));
      v14 = v92 + 1;
      v7 = v91;
      v8 = v93;
      if (v92 + 1 > *(_DWORD *)(v91 + 44))
      {
        v12 = *(_OWORD *)&v104.__r_.__value_.__l.__data_;
        v38 = v104.__r_.__value_.__r.__words[2];
        a5 = v90;
        goto LABEL_41;
      }
    }
    sub_1C59B5074(&v102, v8, v7);
    v81 = std::string::insert(&v102, 0, "invalid ");
    v82 = v81->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v103.__r_.__value_.__l.__data_ = *(_OWORD *)&v81->__r_.__value_.__l.__data_;
    v103.__r_.__value_.__r.__words[2] = v82;
    v81->__r_.__value_.__l.__size_ = 0;
    v81->__r_.__value_.__r.__words[2] = 0;
    v81->__r_.__value_.__r.__words[0] = 0;
    v83 = std::string::append(&v103, ": found a misaligned version dependency entry at offset 0x");
    v84 = v83->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v83->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v84;
    v83->__r_.__value_.__l.__size_ = 0;
    v83->__r_.__value_.__r.__words[2] = 0;
    v83->__r_.__value_.__r.__words[0] = 0;
    v43 = (std::string::size_type)v15 - v11;
LABEL_43:
    v101.__r_.__value_.__r.__words[0] = v43;
    *(_QWORD *)&__dst = &__p;
    v107 = (const char *)&v101;
    v108 = 3588;
    v44 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v46 = qword_1EF8F7238[0];
    *(_QWORD *)v44 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)&__dst, (_QWORD *)(v44 + 8));
    *(_QWORD *)(v44 + 32) = 3;
    *(_QWORD *)(v44 + 40) = v46;
    *(_BYTE *)(v44 + 48) = 1;
    *(_BYTE *)(v90 + 24) |= 1u;
    *(_QWORD *)v90 = v44;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v103.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v103.__r_.__value_.__l.__data_);
    if (SHIBYTE(v102.__r_.__value_.__r.__words[2]) < 0)
    {
      v47 = (void *)v102.__r_.__value_.__r.__words[0];
LABEL_60:
      operator delete(v47);
    }
LABEL_61:
    v56 = v104.__r_.__value_.__r.__words[0];
    if (!v104.__r_.__value_.__r.__words[0])
      goto LABEL_70;
    v57 = (void *)v104.__r_.__value_.__r.__words[0];
    if (v104.__r_.__value_.__l.__size_ != v104.__r_.__value_.__r.__words[0])
    {
      v58 = v104.__r_.__value_.__l.__size_ - 24;
      do
      {
        *(_QWORD *)&__dst = v58;
        sub_1C59C5618((void ***)&__dst);
        if (*(char *)(v58 - 1) < 0)
          operator delete(*(void **)(v58 - 24));
        v59 = v58 - 40;
        v58 -= 64;
      }
      while (v59 != v56);
      v57 = (void *)v104.__r_.__value_.__r.__words[0];
    }
    v104.__r_.__value_.__l.__size_ = v56;
  }
  operator delete(v57);
LABEL_70:
  if ((v110 & 1) != 0)
  {
    v60 = v109[0];
    v109[0] = 0;
    if (v60)
      (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
  }
LABEL_73:
  if ((v112 & 1) != 0)
  {
    v61 = v111[0];
    v111[0] = 0;
    if (v61)
      (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getStringTable(_QWORD *a1@<X0>, uint64_t a2@<X1>, void (*a3)(std::string *__return_ptr, uint64_t, _QWORD *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  uint64_t v8;
  uint64_t v9;
  std::string *v10;
  std::string::size_type v11;
  const std::string::value_type *v12;
  std::string *v13;
  std::string::size_type v14;
  std::string *v15;
  std::string::size_type v16;
  uint64_t v17;
  unint64_t v19;
  uint64_t v20;
  std::string *v23;
  std::string::size_type v24;
  std::string *v25;
  std::string::size_type v26;
  const char *ELFSectionTypeName;
  uint64_t v28;
  std::string::size_type v29;
  std::string v30;
  std::string v31;
  std::string __p;
  _QWORD v33[4];
  __int16 v34;
  __int128 v35;
  std::string::size_type v36;
  uint64_t v37;

  v37 = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a2 + 4) != 3)
  {
    sub_1C59B6288(a1, a2, (char *)&v31);
    v23 = std::string::insert(&v31, 0, "invalid sh_type for string table section ");
    v24 = v23->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v24;
    v23->__r_.__value_.__l.__size_ = 0;
    v23->__r_.__value_.__r.__words[2] = 0;
    v23->__r_.__value_.__r.__words[0] = 0;
    v25 = std::string::append(&__p, ": expected SHT_STRTAB, but got ");
    v26 = v25->__r_.__value_.__r.__words[2];
    v35 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v36 = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    ELFSectionTypeName = llvm::object::getELFSectionTypeName((llvm::object *)*(unsigned __int16 *)(*a1 + 18), *(_DWORD *)(a2 + 4));
    v33[0] = &v35;
    v33[2] = ELFSectionTypeName;
    v33[3] = v28;
    v34 = 1284;
    a3(&v30, a4, v33);
    if (SHIBYTE(v36) < 0)
      operator delete((void *)v35);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      operator delete(__p.__r_.__value_.__l.__data_);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
    v29 = v30.__r_.__value_.__r.__words[0];
    if (v30.__r_.__value_.__r.__words[0])
    {
      *(_BYTE *)(a5 + 16) |= 1u;
      *(_QWORD *)a5 = v29;
      return;
    }
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionContents(a1, a2, (uint64_t)&v35);
  v8 = v35;
  if ((v36 & 1) != 0)
  {
    *(_QWORD *)&v35 = 0;
    *(_BYTE *)(a5 + 16) |= 1u;
    *(_QWORD *)a5 = v8;
  }
  else
  {
    v9 = *((_QWORD *)&v35 + 1);
    if (!*((_QWORD *)&v35 + 1))
    {
      sub_1C59B6288(a1, a2, (char *)&v30);
      v13 = std::string::insert(&v30, 0, "SHT_STRTAB string table section ");
      v14 = v13->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
      v31.__r_.__value_.__r.__words[2] = v14;
      v13->__r_.__value_.__l.__size_ = 0;
      v13->__r_.__value_.__r.__words[2] = 0;
      v13->__r_.__value_.__r.__words[0] = 0;
      v12 = " is empty";
      goto LABEL_8;
    }
    if (*(_BYTE *)(*((_QWORD *)&v35 + 1) + v35 - 1))
    {
      sub_1C59B6288(a1, a2, (char *)&v30);
      v10 = std::string::insert(&v30, 0, "SHT_STRTAB string table section ");
      v11 = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v31.__r_.__value_.__r.__words[2] = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      v12 = " is non-null terminated";
LABEL_8:
      v15 = std::string::append(&v31, v12);
      v16 = v15->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
      __p.__r_.__value_.__r.__words[2] = v16;
      v15->__r_.__value_.__l.__size_ = 0;
      v15->__r_.__value_.__r.__words[2] = 0;
      v15->__r_.__value_.__r.__words[0] = 0;
      v34 = 260;
      v33[0] = &__p;
      v17 = operator new();
      if (!atomic_load(qword_1EF8F7238))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
      v19 = qword_1EF8F7238[0];
      *(_QWORD *)v17 = off_1E81A0C88;
      llvm::Twine::str((llvm::Twine *)v33, (_QWORD *)(v17 + 8));
      *(_QWORD *)(v17 + 32) = 3;
      *(_QWORD *)(v17 + 40) = v19;
      *(_BYTE *)(v17 + 48) = 1;
      *(_BYTE *)(a5 + 16) |= 1u;
      *(_QWORD *)a5 = v17;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__p.__r_.__value_.__l.__data_);
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v31.__r_.__value_.__l.__data_);
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v30.__r_.__value_.__l.__data_);
      goto LABEL_17;
    }
    *(_BYTE *)(a5 + 16) &= ~1u;
    *(_QWORD *)a5 = v8;
    *(_QWORD *)(a5 + 8) = v9;
  }
LABEL_17:
  if ((v36 & 1) != 0)
  {
    v20 = v35;
    *(_QWORD *)&v35 = 0;
    if (v20)
      (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  }
}

void sub_1C59B6288(_QWORD *a1@<X0>, uint64_t a2@<X1>, char *a3@<X8>)
{
  std::string *v5;
  std::string::size_type v6;
  std::string *v7;
  std::string::size_type v8;
  std::string::size_type v9;
  std::string v10;
  std::string v11;
  std::string::size_type v12[2];
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::sections(a1, (uint64_t)v12);
  if ((v13 & 1) != 0)
  {
    v8 = v12[0];
    v12[0] = 0;
    v10.__r_.__value_.__r.__words[0] = v8;
    sub_1C4D62BD4(&v10.__r_.__value_.__l.__data_, &v11.__r_.__value_.__l.__data_);
    if (v10.__r_.__value_.__r.__words[0])
      (*(void (**)(std::string::size_type))(*(_QWORD *)v10.__r_.__value_.__l.__data_ + 8))(v10.__r_.__value_.__r.__words[0]);
    a3[23] = 15;
    strcpy(a3, "[unknown index]");
  }
  else
  {
    std::to_string(&v10, (int64_t)(a2 - v12[0]) >> 6);
    v5 = std::string::insert(&v10, 0, "[index ");
    v6 = v5->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v11.__r_.__value_.__l.__data_ = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    v11.__r_.__value_.__r.__words[2] = v6;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    v7 = std::string::append(&v11, "]");
    *(std::string *)a3 = *v7;
    v7->__r_.__value_.__r.__words[0] = 0;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v11.__r_.__value_.__l.__data_);
    if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v10.__r_.__value_.__l.__data_);
  }
  if ((v13 & 1) != 0)
  {
    v9 = v12[0];
    v12[0] = 0;
    if (v9)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v9 + 8))(v9);
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionContents(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  const char *v10;
  uint64_t v11;
  unint64_t v13;
  void *v14;
  std::string *v15;
  std::string::size_type v16;
  std::string *v17;
  std::string::size_type v18;
  uint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::string v24;
  std::string v25;
  std::string v26;
  __int16 v27;
  void *__p[2];
  const char *v29;
  __int16 v30;
  std::string v31;
  _QWORD v32[2];
  uint64_t *v33;
  __int16 v34;
  _QWORD v35[2];
  const char *v36;
  __int16 v37;
  _QWORD v38[2];
  uint64_t *v39;
  __int16 v40;
  _QWORD v41[2];
  const char *v42;
  __int16 v43;
  uint64_t v44;
  uint64_t v45;

  v6 = *(_QWORD *)(a2 + 24);
  v5 = *(_QWORD *)(a2 + 32);
  v44 = v5;
  v45 = v6;
  if (__CFADD__(v6, v5))
  {
    sub_1C59B6288(a1, a2, (char *)&v31);
    v7 = std::string::insert(&v31, 0, "section ");
    v8 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v26.__r_.__value_.__r.__words[2] = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    v9 = std::string::append(&v26, " has a sh_offset (0x");
    v10 = (const char *)v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v29 = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    v32[0] = __p;
    v33 = &v45;
    v34 = 3588;
    v35[0] = v32;
    v36 = ") + sh_size (0x";
    v37 = 770;
    v38[0] = v35;
    v39 = &v44;
    v40 = 3586;
    v41[0] = v38;
    v42 = ") that cannot be represented";
    v43 = 770;
    v11 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v13 = qword_1EF8F7238[0];
    *(_QWORD *)v11 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v41, (_QWORD *)(v11 + 8));
    *(_QWORD *)(v11 + 32) = 3;
    *(_QWORD *)(v11 + 40) = v13;
    *(_BYTE *)(v11 + 48) = 1;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v11;
    if (SHIBYTE(v29) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    {
      v14 = (void *)v31.__r_.__value_.__r.__words[0];
LABEL_20:
      operator delete(v14);
    }
  }
  else if ((unint64_t)(v5 + v6) <= a1[1])
  {
    v22 = *a1 + v6;
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_QWORD *)a3 = v22;
    *(_QWORD *)(a3 + 8) = v5;
  }
  else
  {
    sub_1C59B6288(a1, a2, (char *)&v24);
    v15 = std::string::insert(&v24, 0, "section ");
    v16 = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v25.__r_.__value_.__r.__words[2] = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    v17 = std::string::append(&v25, " has a sh_offset (0x");
    v18 = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    v26.__r_.__value_.__r.__words[0] = (std::string::size_type)&v31;
    v26.__r_.__value_.__r.__words[2] = (std::string::size_type)&v45;
    v27 = 3588;
    __p[0] = &v26;
    v29 = ") + sh_size (0x";
    v30 = 770;
    v32[0] = __p;
    v33 = &v44;
    v34 = 3586;
    v35[0] = v32;
    v36 = ") that is greater than the file size (0x";
    v37 = 770;
    v23 = a1[1];
    v38[0] = v35;
    v39 = &v23;
    v40 = 3586;
    v41[0] = v38;
    v42 = ")";
    v43 = 770;
    v19 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v21 = qword_1EF8F7238[0];
    *(_QWORD *)v19 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v41, (_QWORD *)(v19 + 8));
    *(_QWORD *)(v19 + 32) = 3;
    *(_QWORD *)(v19 + 40) = v21;
    *(_BYTE *)(v19 + 48) = 1;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v19;
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    {
      v14 = (void *)v24.__r_.__value_.__r.__words[0];
      goto LABEL_20;
    }
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getStringTableForSymtab(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8[2];
  char v9;
  uint64_t v10;

  v10 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::sections(a1, (uint64_t)v8);
  if ((v9 & 1) != 0)
  {
    v7 = v8[0];
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v7;
  }
  else
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getStringTableForSymtab(a1, a2, v8[0], v8[1], a3);
    if ((v9 & 1) != 0)
    {
      v6 = v8[0];
      v8[0] = 0;
      if (v6)
        (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
    }
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getStringTableForSymtab(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  int v6;
  uint64_t v8;
  unint64_t v10;
  const char *v12;
  const char *v13;
  void (*v14)(llvm::Twine *@<X0>, uint64_t *@<X8>);
  const char *v15;
  char v16;
  __int16 v17;
  uint64_t v18;

  v18 = *MEMORY[0x1E0C80C00];
  v6 = *(_DWORD *)(a2 + 4);
  if (v6 == 2 || v6 == 11)
  {
    sub_1C62CB604(a3, a4, *(_DWORD *)(a2 + 40), (uint64_t)&v15);
    v12 = v15;
    if ((v16 & 1) != 0)
    {
      *(_BYTE *)(a5 + 16) |= 1u;
      *(_QWORD *)a5 = v12;
    }
    else
    {
      v14 = sub_1C59A5848;
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getStringTable(a1, (uint64_t)v15, (void (*)(std::string *__return_ptr, uint64_t, _QWORD *))sub_1C62CD258, (uint64_t)&v14, a5);
      if ((v16 & 1) != 0)
      {
        v13 = v15;
        v15 = 0;
        if (v13)
          (*(void (**)(const char *))(*(_QWORD *)v13 + 8))(v13);
      }
    }
  }
  else
  {
    v15 = "invalid sh_type for symbol table, expected SHT_SYMTAB or SHT_DYNSYM";
    v17 = 259;
    v8 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v10 = qword_1EF8F7238[0];
    *(_QWORD *)v8 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)&v15, (_QWORD *)(v8 + 8));
    *(_QWORD *)(v8 + 32) = 3;
    *(_QWORD *)(v8 + 40) = v10;
    *(_BYTE *)(v8 + 48) = 1;
    *(_BYTE *)(a5 + 16) |= 1u;
    *(_QWORD *)a5 = v8;
  }
}

{
  __ZNK4llvm6object7ELFFileINS0_7ELFTypeILNS_7support10endiannessE1ELb1EEEE23getStringTableForSymtabERKNS0_13Elf_Shdr_ImplIS5_EENS_8ArrayRefIS8_EE(a1, a2, a3, a4, a5);
}

void sub_1C59B69E0(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  std::string *v8;
  std::string::size_type v9;
  std::string *v10;
  std::string::size_type v11;
  const char *v12;
  std::string *v13;
  std::string::size_type v14;
  std::string *v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v19;
  void *v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  std::string::size_type v24;
  uint64_t v25;
  unint64_t v27;
  std::string *v28;
  std::string::size_type v29;
  std::string *v30;
  std::string::size_type v31;
  uint64_t v32;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  std::string v37;
  std::string v38;
  std::string v39;
  __int16 v40;
  std::string v41;
  __int16 v42;
  std::string v43;
  void *__p[2];
  uint64_t *v45;
  __int16 v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD v49[2];
  std::string *v50;
  __int16 v51;
  _QWORD v52[2];
  std::string *v53;
  __int16 v54;
  _QWORD v55[2];
  std::string *v56;
  __int16 v57;

  if (a2[7] == 4)
  {
    v6 = a2[3];
    v7 = a2[4];
    v47 = v7;
    v48 = v6;
    if ((v7 & 3) != 0)
    {
      sub_1C59B6288(a1, (uint64_t)a2, (char *)&v43);
      v8 = std::string::insert(&v43, 0, "section ");
      v9 = v8->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v39.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      v39.__r_.__value_.__r.__words[2] = v9;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      v10 = std::string::append(&v39, " has an invalid sh_size (");
      v11 = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v41.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v41.__r_.__value_.__r.__words[2] = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      __p[0] = &v41;
      v45 = (uint64_t *)&v47;
      v46 = 3076;
      v49[0] = __p;
      v50 = (std::string *)") which is not a multiple of its sh_entsize (";
      v51 = 770;
      v38.__r_.__value_.__r.__words[0] = a2[7];
      v52[0] = v49;
      v53 = &v38;
      v54 = 3074;
      v12 = ")";
    }
    else
    {
      if (!__CFADD__(v6, v7))
      {
        if (v7 + v6 <= a1[1])
        {
          v35 = *a1 + v6;
          *(_BYTE *)(a3 + 16) &= ~1u;
          *(_QWORD *)a3 = v35;
          *(_QWORD *)(a3 + 8) = v7 >> 2;
          return;
        }
        sub_1C59B6288(a1, (uint64_t)a2, (char *)&v37);
        v28 = std::string::insert(&v37, 0, "section ");
        v29 = v28->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v38.__r_.__value_.__l.__data_ = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
        v38.__r_.__value_.__r.__words[2] = v29;
        v28->__r_.__value_.__l.__size_ = 0;
        v28->__r_.__value_.__r.__words[2] = 0;
        v28->__r_.__value_.__r.__words[0] = 0;
        v30 = std::string::append(&v38, " has a sh_offset (0x");
        v31 = v30->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v43.__r_.__value_.__l.__data_ = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        v43.__r_.__value_.__r.__words[2] = v31;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        v39.__r_.__value_.__r.__words[0] = (std::string::size_type)&v43;
        v39.__r_.__value_.__r.__words[2] = (std::string::size_type)&v48;
        v40 = 3588;
        v41.__r_.__value_.__r.__words[0] = (std::string::size_type)&v39;
        v41.__r_.__value_.__r.__words[2] = (std::string::size_type)") + sh_size (0x";
        v42 = 770;
        __p[0] = &v41;
        v45 = (uint64_t *)&v47;
        v46 = 3586;
        v49[0] = __p;
        v50 = (std::string *)") that is greater than the file size (0x";
        v51 = 770;
        v36 = a1[1];
        v52[0] = v49;
        v53 = (std::string *)&v36;
        v54 = 3586;
        v55[0] = v52;
        v56 = (std::string *)")";
        v57 = 770;
        v32 = operator new();
        if (!atomic_load(qword_1EF8F7238))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
        v34 = qword_1EF8F7238[0];
        *(_QWORD *)v32 = off_1E81A0C88;
        llvm::Twine::str((llvm::Twine *)v55, (_QWORD *)(v32 + 8));
        *(_QWORD *)(v32 + 32) = 3;
        *(_QWORD *)(v32 + 40) = v34;
        *(_BYTE *)(v32 + 48) = 1;
        *(_BYTE *)(a3 + 16) |= 1u;
        *(_QWORD *)a3 = v32;
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v43.__r_.__value_.__l.__data_);
        if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v38.__r_.__value_.__l.__data_);
        if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
        {
          v20 = (void *)v37.__r_.__value_.__r.__words[0];
          goto LABEL_23;
        }
        return;
      }
      sub_1C59B6288(a1, (uint64_t)a2, (char *)&v43);
      v21 = std::string::insert(&v43, 0, "section ");
      v22 = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v39.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v39.__r_.__value_.__r.__words[2] = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      v23 = std::string::append(&v39, " has a sh_offset (0x");
      v24 = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v41.__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v41.__r_.__value_.__r.__words[2] = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      __p[0] = &v41;
      v45 = &v48;
      v46 = 3588;
      v49[0] = __p;
      v50 = (std::string *)") + sh_size (0x";
      v51 = 770;
      v52[0] = v49;
      v53 = (std::string *)&v47;
      v54 = 3586;
      v12 = ") that cannot be represented";
    }
    v55[0] = v52;
    v56 = (std::string *)v12;
    v57 = 770;
    v25 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v27 = qword_1EF8F7238[0];
    *(_QWORD *)v25 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v55, (_QWORD *)(v25 + 8));
    *(_QWORD *)(v25 + 32) = 3;
    *(_QWORD *)(v25 + 40) = v27;
    *(_BYTE *)(v25 + 48) = 1;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v25;
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v41.__r_.__value_.__l.__data_);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39.__r_.__value_.__l.__data_);
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    {
      v20 = (void *)v43.__r_.__value_.__r.__words[0];
      goto LABEL_23;
    }
  }
  else
  {
    sub_1C59B6288(a1, (uint64_t)a2, (char *)&v39);
    v13 = std::string::insert(&v39, 0, "section ");
    v14 = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v41.__r_.__value_.__r.__words[2] = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    v15 = std::string::append(&v41, " has invalid sh_entsize: expected ");
    v16 = (uint64_t *)v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v45 = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    v43.__r_.__value_.__r.__words[0] = 4;
    v49[0] = __p;
    v50 = &v43;
    v51 = 2564;
    v52[0] = v49;
    v53 = (std::string *)", but got ";
    v54 = 770;
    v38.__r_.__value_.__r.__words[0] = a2[7];
    v55[0] = v52;
    v56 = &v38;
    v57 = 3074;
    v17 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v19 = qword_1EF8F7238[0];
    *(_QWORD *)v17 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v55, (_QWORD *)(v17 + 8));
    *(_QWORD *)(v17 + 32) = 3;
    *(_QWORD *)(v17 + 40) = v19;
    *(_BYTE *)(v17 + 48) = 1;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v17;
    if (SHIBYTE(v45) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v41.__r_.__value_.__l.__data_);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    {
      v20 = (void *)v39.__r_.__value_.__r.__words[0];
LABEL_23:
      operator delete(v20);
    }
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getDynSymtabSize(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  char v7;
  unint64_t v8;
  uint64_t *v9;
  int v10;
  unint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t *v14;
  unint64_t *v15;
  unint64_t *v16;
  uint64_t v17;
  unint64_t v18;
  void (*v19)(llvm::Twine *@<X0>, uint64_t *@<X8>);
  uint64_t v20;
  unint64_t v21;
  unint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  unint64_t v26;
  unint64_t v27;
  _BYTE *v28;
  unint64_t v29;
  void (*v31)(llvm::Twine *@<X0>, uint64_t *@<X8>);
  unint64_t v32;
  uint64_t v34;
  void **v35;
  char v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  uint64_t v40;
  _BYTE *v41[4];
  __int16 v42;
  uint64_t v43;
  void *__p[2];
  char v45;
  void **v46;
  uint64_t v47[2];
  void (*v48)(llvm::Twine *@<X0>, uint64_t *@<X8>);
  char v49;
  const char *v50;
  __int16 v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t *v54;
  __int16 v55;
  uint64_t *v56;
  uint64_t v57;
  const char *v58;
  __int16 v59;
  unint64_t v60;
  uint64_t v61;
  char v62;
  uint64_t v63;

  v63 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::sections(a1, (uint64_t)&v60);
  v4 = v60;
  if ((v62 & 1) != 0)
  {
    v60 = 0;
    v7 = *(_BYTE *)(a2 + 8) | 1;
    goto LABEL_8;
  }
  if (v61)
  {
    v5 = (_QWORD *)(v60 + 32);
    v6 = v61 << 6;
    while (*((_DWORD *)v5 - 7) != 11)
    {
      v5 += 8;
      v6 -= 64;
      if (!v6)
      {
        *(_BYTE *)(a2 + 8) &= ~1u;
        *(_QWORD *)a2 = 0;
        goto LABEL_9;
      }
    }
    v32 = v5[3];
    v4 = *v5 / v32;
    if (*v5 % v32)
    {
      if (!atomic_load(qword_1EF8F7238))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
      v34 = qword_1EF8F7238[0];
      v40 = *v5;
      v41[0] = "SHT_DYNSYM section has sh_size (";
      v41[2] = &v40;
      v42 = 3075;
      v48 = (void (*)(llvm::Twine *@<X0>, uint64_t *@<X8>))v41;
      v50 = ") % sh_entsize (";
      v51 = 770;
      v39 = v5[3];
      v52 = (uint64_t)&v48;
      v54 = &v39;
      v55 = 3074;
      v56 = &v52;
      v58 = ") that is not 0";
      v59 = 770;
      llvm::Twine::str((llvm::Twine *)&v56, __p);
      if (v45 >= 0)
        v35 = __p;
      else
        v35 = (void **)__p[0];
      v47[0] = 3;
      v47[1] = v34;
      v46 = v35;
      sub_1C5DF1730((_BYTE **)&v46, v47, &v43);
      if (v45 < 0)
        operator delete(__p[0]);
      *(_BYTE *)(a2 + 8) |= 1u;
      *(_QWORD *)a2 = v43;
      v43 = 0;
      goto LABEL_9;
    }
    v7 = *(_BYTE *)(a2 + 8) & 0xFE;
LABEL_8:
    *(_BYTE *)(a2 + 8) = v7;
    *(_QWORD *)a2 = v4;
    goto LABEL_9;
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::dynamicEntries(a1, (uint64_t)&v56);
  v9 = v56;
  if ((v58 & 1) != 0)
  {
    v56 = 0;
    *(_BYTE *)(a2 + 8) |= 1u;
    *(_QWORD *)a2 = v9;
    goto LABEL_61;
  }
  if (!v57)
    goto LABEL_60;
  v10 = 0;
  v11 = 0;
  v12 = 0;
  v13 = 0;
  v14 = &v56[2 * v57];
  do
  {
    v15 = (unint64_t *)(v9 + 1);
    while (1)
    {
      v16 = v15 - 1;
      v17 = *(v15 - 1);
      if (v17 != 1879047925)
        break;
      v18 = *v15;
      v15 += 2;
      v13 = v18;
      v12 = 1;
      if (v16 + 2 == (unint64_t *)v14)
        goto LABEL_24;
    }
    if (v17 == 4)
    {
      v11 = *v15;
      v10 = 1;
    }
    v9 = (uint64_t *)(v15 + 1);
  }
  while (v9 != v14);
  if (!v12)
  {
    if (v10)
    {
      v48 = sub_1C59A5848;
      llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::toMappedAddr(a1, (void (*)(_QWORD *__return_ptr, uint64_t, _QWORD *))sub_1C62CD258, v11, (uint64_t)&v48, (uint64_t)&v52);
      v37 = v52;
      if ((v53 & 1) != 0)
      {
        *(_BYTE *)(a2 + 8) |= 1u;
      }
      else
      {
        *(_BYTE *)(a2 + 8) &= ~1u;
        v37 = *(unsigned int *)(v37 + 4);
      }
      *(_QWORD *)a2 = v37;
      goto LABEL_61;
    }
LABEL_60:
    *(_BYTE *)(a2 + 8) &= ~1u;
    *(_QWORD *)a2 = 0;
    goto LABEL_61;
  }
LABEL_24:
  v52 = (uint64_t)sub_1C59A5848;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::toMappedAddr(a1, (void (*)(_QWORD *__return_ptr, uint64_t, _QWORD *))sub_1C62CD258, v13, (uint64_t)&v52, (uint64_t)&v48);
  v19 = v48;
  if ((v49 & 1) != 0)
  {
    v48 = 0;
    v36 = *(_BYTE *)(a2 + 8) | 1;
LABEL_56:
    *(_BYTE *)(a2 + 8) = v36;
    *(_QWORD *)a2 = v19;
    goto LABEL_61;
  }
  v20 = *(unsigned int *)v48;
  if (!(_DWORD)v20)
  {
    v19 = (void (*)(llvm::Twine *@<X0>, uint64_t *@<X8>))(*((_DWORD *)v48 + 1) + 1);
LABEL_55:
    v36 = *(_BYTE *)(a2 + 8) & 0xFE;
    goto LABEL_56;
  }
  v21 = 0;
  v22 = *a1 + a1[1];
  v23 = 8 * *((unsigned int *)v48 + 2) + 16;
  v24 = (uint64_t)v48 + 4 * v20 + v23;
  v25 = 4 * v20;
  do
  {
    v26 = v21;
    v27 = *(unsigned int *)((char *)v48 + v23);
    if (v21 <= v27)
      v21 = *(unsigned int *)((char *)v48 + v23);
    v23 += 4;
    v25 -= 4;
  }
  while (v25);
  v28 = (_BYTE *)(v24 + 4 * (v21 - *((_DWORD *)v48 + 1)));
  if ((unint64_t)v28 < v22)
  {
    if (v26 <= v27)
      v29 = v27;
    else
      v29 = v26;
    v19 = (void (*)(llvm::Twine *@<X0>, uint64_t *@<X8>))(v29 + 1);
    while ((*v28 & 1) == 0)
    {
      v28 += 4;
      v19 = (void (*)(llvm::Twine *@<X0>, uint64_t *@<X8>))((char *)v19 + 1);
      if ((unint64_t)v28 >= v22)
        goto LABEL_37;
    }
    goto LABEL_55;
  }
LABEL_37:
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v52 = 3;
  v53 = qword_1EF8F7238[0];
  v41[0] = "no terminator found for GNU hash section before buffer end";
  sub_1C5DF1730(v41, &v52, (_QWORD *)a2);
  *(_BYTE *)(a2 + 8) |= 1u;
  if ((v49 & 1) != 0)
  {
    v31 = v48;
    v48 = 0;
    if (v31)
      (*(void (**)(void (*)(llvm::Twine *@<X0>, uint64_t *@<X8>)))(*(_QWORD *)v31 + 8))(v31);
  }
LABEL_61:
  if ((v58 & 1) != 0)
  {
    v38 = v56;
    v56 = 0;
    if (v38)
      (*(void (**)(uint64_t *))(*v38 + 8))(v38);
  }
LABEL_9:
  if ((v62 & 1) != 0)
  {
    v8 = v60;
    v60 = 0;
    if (v8)
      (*(void (**)(unint64_t))(*(_QWORD *)v8 + 8))(v8);
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::dynamicEntries(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unint64_t v7;
  unint64_t v8;
  const char *v9;
  uint64_t v10;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  std::string::size_type v24;
  const char *v25;
  std::string *v26;
  std::string::size_type v27;
  std::string *v28;
  uint64_t *v29;
  uint64_t v30;
  unint64_t v32;
  void *v33;
  std::string *v34;
  std::string::size_type v35;
  std::string *v36;
  std::string::size_type v37;
  unint64_t v39;
  std::string *v40;
  std::string::size_type v41;
  std::string *v42;
  std::string::size_type v43;
  unint64_t v45;
  uint64_t v46;
  std::string v47;
  std::string v48;
  std::string v49;
  __int16 v50;
  std::string v51;
  __int16 v52;
  std::string v53;
  void *__p[2];
  uint64_t *v55;
  __int16 v56;
  unint64_t v57;
  uint64_t v58;
  _QWORD v59[2];
  std::string *v60;
  __int16 v61;
  _QWORD v62[2];
  std::string *v63;
  __int16 v64;
  _QWORD v65[2];
  std::string *v66;
  __int16 v67;
  uint64_t v68;
  uint64_t v69;
  char v70;
  uint64_t v71;
  uint64_t v72;
  char v73;
  uint64_t v74;

  v74 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::program_headers(a1, (uint64_t)&v71);
  v4 = v71;
  if ((v73 & 1) != 0)
  {
    v71 = 0;
    *(_BYTE *)(a2 + 16) |= 1u;
    *(_QWORD *)a2 = v4;
    goto LABEL_16;
  }
  if (v72)
  {
    v5 = 56 * v72;
    while (*(_DWORD *)v4 != 2)
    {
      v4 += 56;
      v5 -= 56;
      if (!v5)
        goto LABEL_6;
    }
    v6 = *a1 + *(_QWORD *)(v4 + 8);
    v7 = *(_QWORD *)(v4 + 32);
    if (v7 > 0xF)
    {
      v8 = v7 >> 4;
      goto LABEL_10;
    }
  }
  else
  {
LABEL_6:
    v6 = 0;
  }
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::sections(a1, (uint64_t)&v68);
  v14 = v68;
  if ((v70 & 1) == 0)
  {
    if (v69)
    {
      v15 = 0;
      while (1)
      {
        v16 = v68 + v15;
        if (*(_DWORD *)(v68 + v15 + 4) == 6)
          break;
        v15 += 64;
        if (v69 << 6 == v15)
          goto LABEL_25;
      }
      if (*(_QWORD *)(v16 + 56) != 16)
      {
        sub_1C59B6288(a1, v16, (char *)&v49);
        v26 = std::string::insert(&v49, 0, "section ");
        v27 = v26->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v51.__r_.__value_.__l.__data_ = *(_OWORD *)&v26->__r_.__value_.__l.__data_;
        v51.__r_.__value_.__r.__words[2] = v27;
        v26->__r_.__value_.__l.__size_ = 0;
        v26->__r_.__value_.__r.__words[2] = 0;
        v26->__r_.__value_.__r.__words[0] = 0;
        v28 = std::string::append(&v51, " has invalid sh_entsize: expected ");
        v29 = (uint64_t *)v28->__r_.__value_.__r.__words[2];
        *(_OWORD *)__p = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
        v55 = v29;
        v28->__r_.__value_.__l.__size_ = 0;
        v28->__r_.__value_.__r.__words[2] = 0;
        v28->__r_.__value_.__r.__words[0] = 0;
        v53.__r_.__value_.__r.__words[0] = 16;
        v59[0] = __p;
        v60 = &v53;
        v61 = 2564;
        v62[0] = v59;
        v63 = (std::string *)", but got ";
        v64 = 770;
        v48.__r_.__value_.__r.__words[0] = *(_QWORD *)(v16 + 56);
        v65[0] = v62;
        v66 = &v48;
        v67 = 3074;
        v30 = operator new();
        if (!atomic_load(qword_1EF8F7238))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
        v32 = qword_1EF8F7238[0];
        *(_QWORD *)v30 = off_1E81A0C88;
        llvm::Twine::str((llvm::Twine *)v65, (_QWORD *)(v30 + 8));
        *(_QWORD *)(v30 + 32) = 3;
        *(_QWORD *)(v30 + 40) = v32;
        *(_BYTE *)(v30 + 48) = 1;
        if (SHIBYTE(v55) < 0)
          operator delete(__p[0]);
        if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v51.__r_.__value_.__l.__data_);
        if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
        {
          v33 = (void *)v49.__r_.__value_.__r.__words[0];
LABEL_53:
          operator delete(v33);
        }
LABEL_54:
        *(_BYTE *)(a2 + 16) |= 1u;
        *(_QWORD *)a2 = v30;
        if ((v70 & 1) == 0)
          goto LABEL_16;
        goto LABEL_29;
      }
      v18 = v68 + v15;
      v19 = *(_QWORD *)(v18 + 24);
      v58 = v19;
      v20 = *(_QWORD *)(v18 + 32);
      v57 = v20;
      if ((v20 & 0xF) != 0)
      {
        sub_1C59B6288(a1, v16, (char *)&v53);
        v21 = std::string::insert(&v53, 0, "section ");
        v22 = v21->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v49.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        v49.__r_.__value_.__r.__words[2] = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        v23 = std::string::append(&v49, " has an invalid sh_size (");
        v24 = v23->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v51.__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
        v51.__r_.__value_.__r.__words[2] = v24;
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        __p[0] = &v51;
        v55 = (uint64_t *)&v57;
        v56 = 3076;
        v59[0] = __p;
        v60 = (std::string *)") which is not a multiple of its sh_entsize (";
        v61 = 770;
        v48.__r_.__value_.__r.__words[0] = *(_QWORD *)(v16 + 56);
        v62[0] = v59;
        v63 = &v48;
        v64 = 3074;
        v25 = ")";
        goto LABEL_45;
      }
      if (__CFADD__(v19, v20))
      {
        sub_1C59B6288(a1, v16, (char *)&v53);
        v34 = std::string::insert(&v53, 0, "section ");
        v35 = v34->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v49.__r_.__value_.__l.__data_ = *(_OWORD *)&v34->__r_.__value_.__l.__data_;
        v49.__r_.__value_.__r.__words[2] = v35;
        v34->__r_.__value_.__l.__size_ = 0;
        v34->__r_.__value_.__r.__words[2] = 0;
        v34->__r_.__value_.__r.__words[0] = 0;
        v36 = std::string::append(&v49, " has a sh_offset (0x");
        v37 = v36->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v51.__r_.__value_.__l.__data_ = *(_OWORD *)&v36->__r_.__value_.__l.__data_;
        v51.__r_.__value_.__r.__words[2] = v37;
        v36->__r_.__value_.__l.__size_ = 0;
        v36->__r_.__value_.__r.__words[2] = 0;
        v36->__r_.__value_.__r.__words[0] = 0;
        __p[0] = &v51;
        v55 = &v58;
        v56 = 3588;
        v59[0] = __p;
        v60 = (std::string *)") + sh_size (0x";
        v61 = 770;
        v62[0] = v59;
        v63 = (std::string *)&v57;
        v64 = 3586;
        v25 = ") that cannot be represented";
LABEL_45:
        v65[0] = v62;
        v66 = (std::string *)v25;
        v67 = 770;
        v30 = operator new();
        if (!atomic_load(qword_1EF8F7238))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
        v39 = qword_1EF8F7238[0];
        *(_QWORD *)v30 = off_1E81A0C88;
        llvm::Twine::str((llvm::Twine *)v65, (_QWORD *)(v30 + 8));
        *(_QWORD *)(v30 + 32) = 3;
        *(_QWORD *)(v30 + 40) = v39;
        *(_BYTE *)(v30 + 48) = 1;
        if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v51.__r_.__value_.__l.__data_);
        if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v49.__r_.__value_.__l.__data_);
        if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
        {
          v33 = (void *)v53.__r_.__value_.__r.__words[0];
          goto LABEL_53;
        }
        goto LABEL_54;
      }
      if (v20 + v19 > a1[1])
      {
        sub_1C59B6288(a1, v16, (char *)&v47);
        v40 = std::string::insert(&v47, 0, "section ");
        v41 = v40->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v48.__r_.__value_.__l.__data_ = *(_OWORD *)&v40->__r_.__value_.__l.__data_;
        v48.__r_.__value_.__r.__words[2] = v41;
        v40->__r_.__value_.__l.__size_ = 0;
        v40->__r_.__value_.__r.__words[2] = 0;
        v40->__r_.__value_.__r.__words[0] = 0;
        v42 = std::string::append(&v48, " has a sh_offset (0x");
        v43 = v42->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v53.__r_.__value_.__l.__data_ = *(_OWORD *)&v42->__r_.__value_.__l.__data_;
        v53.__r_.__value_.__r.__words[2] = v43;
        v42->__r_.__value_.__l.__size_ = 0;
        v42->__r_.__value_.__r.__words[2] = 0;
        v42->__r_.__value_.__r.__words[0] = 0;
        v49.__r_.__value_.__r.__words[0] = (std::string::size_type)&v53;
        v49.__r_.__value_.__r.__words[2] = (std::string::size_type)&v58;
        v50 = 3588;
        v51.__r_.__value_.__r.__words[0] = (std::string::size_type)&v49;
        v51.__r_.__value_.__r.__words[2] = (std::string::size_type)") + sh_size (0x";
        v52 = 770;
        __p[0] = &v51;
        v55 = (uint64_t *)&v57;
        v56 = 3586;
        v59[0] = __p;
        v60 = (std::string *)") that is greater than the file size (0x";
        v61 = 770;
        v46 = a1[1];
        v62[0] = v59;
        v63 = (std::string *)&v46;
        v64 = 3586;
        v65[0] = v62;
        v66 = (std::string *)")";
        v67 = 770;
        v30 = operator new();
        if (!atomic_load(qword_1EF8F7238))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
        v45 = qword_1EF8F7238[0];
        *(_QWORD *)v30 = off_1E81A0C88;
        llvm::Twine::str((llvm::Twine *)v65, (_QWORD *)(v30 + 8));
        *(_QWORD *)(v30 + 32) = 3;
        *(_QWORD *)(v30 + 40) = v45;
        *(_BYTE *)(v30 + 48) = 1;
        if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v53.__r_.__value_.__l.__data_);
        if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v48.__r_.__value_.__l.__data_);
        if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0)
        {
          v33 = (void *)v47.__r_.__value_.__r.__words[0];
          goto LABEL_53;
        }
        goto LABEL_54;
      }
      v6 = *a1 + v19;
      v8 = v20 >> 4;
      if (!v6)
      {
LABEL_66:
        *(_BYTE *)(a2 + 16) &= ~1u;
        *(_QWORD *)a2 = 0;
        *(_QWORD *)(a2 + 8) = 0;
        goto LABEL_16;
      }
    }
    else
    {
LABEL_25:
      v8 = 0;
      if (!v6)
        goto LABEL_66;
    }
    if (!v8)
    {
      v9 = "invalid empty dynamic section";
LABEL_12:
      v65[0] = v9;
      v67 = 259;
      v10 = operator new();
      if (!atomic_load(qword_1EF8F7238))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
      v12 = qword_1EF8F7238[0];
      *(_QWORD *)v10 = off_1E81A0C88;
      llvm::Twine::str((llvm::Twine *)v65, (_QWORD *)(v10 + 8));
      *(_QWORD *)(v10 + 32) = 3;
      *(_QWORD *)(v10 + 40) = v12;
      *(_BYTE *)(v10 + 48) = 1;
      *(_BYTE *)(a2 + 16) |= 1u;
      *(_QWORD *)a2 = v10;
      goto LABEL_16;
    }
LABEL_10:
    if (!*(_QWORD *)(v6 + 16 * v8 - 16))
    {
      *(_BYTE *)(a2 + 16) &= ~1u;
      *(_QWORD *)a2 = v6;
      *(_QWORD *)(a2 + 8) = v8;
      goto LABEL_16;
    }
    v9 = "dynamic sections must be DT_NULL terminated";
    goto LABEL_12;
  }
  v68 = 0;
  *(_BYTE *)(a2 + 16) |= 1u;
  *(_QWORD *)a2 = v14;
LABEL_29:
  v17 = v68;
  v68 = 0;
  if (v17)
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
LABEL_16:
  if ((v73 & 1) != 0)
  {
    v13 = v71;
    v71 = 0;
    if (v13)
      (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  }
}

{
  __ZNK4llvm6object7ELFFileINS0_7ELFTypeILNS_7support10endiannessE1ELb1EEEE14dynamicEntriesEv(a1, a2);
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::toMappedAddr(_QWORD *a1@<X0>, unint64_t a2@<X1>, void (*a3)(_QWORD *__return_ptr, uint64_t, _QWORD *)@<X2>, uint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unsigned int v9;
  _DWORD *v10;
  uint64_t v11;
  _DWORD *v12;
  _DWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  unint64_t v16;
  unint64_t v17;
  unint64_t v18;
  char v19;
  char *v20;
  unint64_t v21;
  const std::nothrow_t *v22;
  unint64_t v23;
  uint64_t *v24;
  BOOL v25;
  uint64_t *v26;
  unint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  uint64_t *v30;
  _QWORD *v31;
  uint64_t v32;
  char *v33;
  unint64_t v34;
  unint64_t v35;
  uint64_t v36;
  unint64_t v37;
  unint64_t v38;
  uint64_t v39;
  unint64_t v41;
  _DWORD *v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  _QWORD v46[4];
  __int16 v47;
  _QWORD v48[4];
  __int16 v49;
  _QWORD v50[4];
  __int16 v51;
  _QWORD v52[4];
  __int16 v53;
  _QWORD v54[4];
  __int16 v55;
  _QWORD v56[4];
  __int16 v57;
  _QWORD v58[4];
  __int16 v59;
  _QWORD v60[2];
  const char *v61;
  __int16 v62;
  unint64_t v63;
  char *v64;
  uint64_t v65;
  _BYTE v66[32];
  _DWORD *v67;
  uint64_t v68;
  char v69;
  uint64_t v70;

  v70 = *MEMORY[0x1E0C80C00];
  v63 = a2;
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::program_headers(a1, (uint64_t)&v67);
  if ((v69 & 1) != 0)
  {
    v13 = v67;
    *(_BYTE *)(a5 + 8) |= 1u;
    *(_QWORD *)a5 = v13;
  }
  else
  {
    v64 = v66;
    v65 = 0x400000000;
    if (!v68)
      goto LABEL_35;
    v9 = 0;
    v10 = v67;
    v11 = 56 * v68;
    v12 = v67;
    do
    {
      if (*v12 == 1)
      {
        if (v9 >= HIDWORD(v65))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v64, (uint64_t)v66, v9 + 1, 8);
          v9 = v65;
        }
        *(_QWORD *)&v64[8 * v9] = v10;
        v9 = v65 + 1;
        LODWORD(v65) = v65 + 1;
      }
      v12 += 14;
      v10 += 14;
      v11 -= 56;
    }
    while (v11);
    if (!v9)
      goto LABEL_35;
    v14 = 0;
    v15 = v64;
    do
    {
      if (8 * v9 - 8 == v14)
        goto LABEL_25;
      v16 = *(_QWORD *)(*(_QWORD *)&v64[v14 + 8] + 16);
      v17 = *(_QWORD *)(*(_QWORD *)&v64[v14] + 16);
      v14 += 8;
    }
    while (v16 >= v17);
    v60[0] = "loadable segments are unsorted by virtual address";
    v62 = 259;
    a3(v58, a4, v60);
    v18 = v58[0];
    if (v58[0])
    {
      v19 = *(_BYTE *)(a5 + 8) | 1;
LABEL_17:
      *(_BYTE *)(a5 + 8) = v19;
      *(_QWORD *)a5 = v18;
      goto LABEL_39;
    }
    v20 = v64;
    v21 = v65;
    if (v65 < 0x81)
    {
LABEL_22:
      sub_1C59C7A4C(v20, &v20[8 * v21], v21, 0, 0);
    }
    else
    {
      v22 = (const std::nothrow_t *)MEMORY[0x1E0DE4E10];
      v23 = v65;
      while (1)
      {
        v24 = (uint64_t *)operator new(8 * v23, v22);
        if (v24)
          break;
        v25 = v23 > 1;
        v23 >>= 1;
        if (!v25)
          goto LABEL_22;
      }
      v26 = v24;
      sub_1C59C7A4C(v20, &v20[8 * v21], v21, v24, v23);
      operator delete(v26);
    }
    v15 = v64;
    v9 = v65;
    if (!v9)
      goto LABEL_35;
LABEL_25:
    v27 = v9;
    v28 = v15;
    do
    {
      v29 = v27 >> 1;
      v30 = &v28[v27 >> 1];
      v32 = *v30;
      v31 = v30 + 1;
      v27 += ~(v27 >> 1);
      if (*(_QWORD *)(v32 + 16) > v63)
        v27 = v29;
      else
        v28 = v31;
    }
    while (v27);
    if (v28 != v15
      && (v33 = (char *)*(v28 - 1), v34 = v63 - *((_QWORD *)v33 + 2), v35 = *((_QWORD *)v33 + 4), v34 < v35))
    {
      v36 = *((_QWORD *)v33 + 1);
      v37 = v36 + v34;
      v38 = a1[1];
      if (v37 < v38)
      {
        v18 = *a1 + v37;
        v19 = *(_BYTE *)(a5 + 8) & 0xFE;
        goto LABEL_17;
      }
      v46[2] = &v63;
      v47 = 3587;
      v48[0] = v46;
      v48[2] = " to the segment with index ";
      v49 = 770;
      v45 = 0x6DB6DB6DB6DB6DB7 * ((v33 - (char *)v67) >> 3) + 1;
      v46[0] = "can't map virtual address 0x";
      v50[0] = v48;
      v50[2] = &v45;
      v51 = 2818;
      v52[0] = v50;
      v52[2] = ": the segment ends at 0x";
      v53 = 770;
      v43 = v38;
      v44 = v35 + v36;
      v54[0] = v52;
      v54[2] = &v44;
      v55 = 3586;
      v56[0] = v54;
      v56[2] = ", which is greater than the file size (0x";
      v57 = 770;
      v58[0] = v56;
      v58[2] = &v43;
      v59 = 3586;
      v60[0] = v58;
      v61 = ")";
      v62 = 770;
    }
    else
    {
LABEL_35:
      v60[0] = "virtual address is not in any segment: 0x";
      v61 = (const char *)&v63;
      v62 = 3587;
    }
    v39 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v41 = qword_1EF8F7238[0];
    *(_QWORD *)v39 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v60, (_QWORD *)(v39 + 8));
    *(_QWORD *)(v39 + 32) = 3;
    *(_QWORD *)(v39 + 40) = v41;
    *(_BYTE *)(v39 + 48) = 1;
    *(_BYTE *)(a5 + 8) |= 1u;
    *(_QWORD *)a5 = v39;
LABEL_39:
    if (v64 != v66)
      free(v64);
    if ((v69 & 1) != 0)
    {
      v42 = v67;
      v67 = 0;
      if (v42)
        (*(void (**)(_DWORD *))(*(_QWORD *)v42 + 8))(v42);
    }
  }
}

const char *llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getRelocationTypeName(uint64_t a1, unsigned int a2)
{
  return llvm::object::getELFRelocationTypeName((llvm::object *)*(unsigned __int16 *)(*(_QWORD *)a1 + 18), a2);
}

BOOL llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::isMipsELF64(uint64_t a1)
{
  return *(_WORD *)(*(_QWORD *)a1 + 18) == 8 && *(_BYTE *)(*(_QWORD *)a1 + 4) == 2;
}

uint64_t llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getRelativeRelocationType(uint64_t a1)
{
  return llvm::object::getELFRelativeRelocationType((llvm::object *)*(unsigned __int16 *)(*(_QWORD *)a1 + 18));
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getDynamicTagAsString(int a1@<W1>, uint64_t a2@<X2>, uint64_t a3@<X8>)
{
  const char *v4;
  const char *v5;
  const char *v6;
  int v7;
  const char *v8;
  int v9;
  __int16 v10;
  const char *v11;
  const char *v12;
  uint64_t v13;
  const char *v14;
  const char *v15;
  const char *v16;
  uint64_t v17;
  BOOL v18;
  std::string *v19;
  std::string::size_type v20;
  int v21;
  int v22;
  unsigned __int16 v23;
  int v24;
  int v25;
  __int16 v26;
  int v27;
  const char *v28;
  const char *v29;
  const char *v30;
  char *v31;
  std::string v32;
  _BYTE v33[17];
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  if (a1 > 163)
  {
    switch(a1)
    {
      case 164:
        switch(a2)
        {
          case 1879048194:
            *(_BYTE *)(a3 + 23) = 11;
            *(_DWORD *)(a3 + 7) = 1414287455;
            v4 = "HEXAGON_PLT";
            goto LABEL_46;
          case 1879048193:
            *(_BYTE *)(a3 + 23) = 11;
            *(_DWORD *)(a3 + 7) = 1380275807;
            v4 = "HEXAGON_VER";
            goto LABEL_46;
          case 1879048192:
            v8 = "HEXAGON_SYMSZ";
LABEL_23:
            *(_BYTE *)(a3 + 23) = 13;
            *(_QWORD *)a3 = *(_QWORD *)v8;
            *(_QWORD *)(a3 + 5) = *(_QWORD *)(v8 + 5);
            *(_BYTE *)(a3 + 13) = 0;
            return;
        }
        break;
      case 243:
        if (a2 == 1879048193)
        {
          *(_BYTE *)(a3 + 23) = 16;
          v6 = "RISCV_VARIANT_CC";
LABEL_26:
          *(_OWORD *)a3 = *(_OWORD *)v6;
          *(_BYTE *)(a3 + 16) = 0;
          return;
        }
        break;
      case 183:
        switch(a2)
        {
          case 1879048197:
            *(_BYTE *)(a3 + 23) = 19;
            *(_DWORD *)(a3 + 15) = 1396920415;
            v11 = "AARCH64_VARIANT_PCS";
LABEL_41:
            *(_OWORD *)a3 = *(_OWORD *)v11;
            *(_BYTE *)(a3 + 19) = 0;
            return;
          case 1879048195:
            v5 = "AARCH64_PAC_PLT";
            goto LABEL_43;
          case 1879048193:
            v5 = "AARCH64_BTI_PLT";
            goto LABEL_43;
        }
        break;
    }
  }
  else
  {
    if (a1 == 8)
    {
      switch(a2)
      {
        case 1879048193:
          *(_BYTE *)(a3 + 23) = 16;
          v6 = "MIPS_RLD_VERSION";
          goto LABEL_26;
        case 1879048194:
          v5 = "MIPS_TIME_STAMP";
          goto LABEL_43;
        case 1879048195:
          v16 = "MIPS_ICHECKSUM";
          goto LABEL_163;
        case 1879048196:
          v8 = "MIPS_IVERSION";
          goto LABEL_23;
        case 1879048197:
          *(_BYTE *)(a3 + 23) = 10;
          *(_WORD *)(a3 + 8) = 21319;
          v14 = "MIPS_FLAGS";
          goto LABEL_176;
        case 1879048198:
          *(_BYTE *)(a3 + 23) = 17;
          *(_WORD *)(a3 + 16) = 83;
          v28 = "MIPS_BASE_ADDRESS";
          goto LABEL_169;
        case 1879048199:
          *(_BYTE *)(a3 + 23) = 9;
          *(_WORD *)(a3 + 8) = 77;
          v12 = "MIPS_MSYM";
          goto LABEL_130;
        case 1879048200:
          v8 = "MIPS_CONFLICT";
          goto LABEL_23;
        case 1879048201:
          *(_BYTE *)(a3 + 23) = 12;
          *(_DWORD *)(a3 + 8) = 1414744396;
          v15 = "MIPS_LIBLIST";
          goto LABEL_161;
        case 1879048202:
          *(_BYTE *)(a3 + 23) = 16;
          v6 = "MIPS_LOCAL_GOTNO";
          goto LABEL_26;
        case 1879048203:
          v5 = "MIPS_CONFLICTNO";
          goto LABEL_43;
        case 1879048208:
          v16 = "MIPS_LIBLISTNO";
          goto LABEL_163;
        case 1879048209:
          v8 = "MIPS_SYMTABNO";
          goto LABEL_23;
        case 1879048210:
          v5 = "MIPS_UNREFEXTNO";
          goto LABEL_43;
        case 1879048211:
          *(_BYTE *)(a3 + 23) = 11;
          *(_DWORD *)(a3 + 7) = 1297699668;
          v4 = "MIPS_GOTSYM";
          goto LABEL_46;
        case 1879048212:
          v8 = "MIPS_HIPAGENO";
          goto LABEL_23;
        case 1879048214:
          *(_BYTE *)(a3 + 23) = 12;
          *(_DWORD *)(a3 + 8) = 1346456927;
          v15 = "MIPS_RLD_MAP";
          goto LABEL_161;
        case 1879048215:
          *(_BYTE *)(a3 + 23) = 16;
          v6 = "MIPS_DELTA_CLASS";
          goto LABEL_26;
        case 1879048216:
          *(_BYTE *)(a3 + 23) = 19;
          *(_DWORD *)(a3 + 15) = 1330536275;
          v11 = "MIPS_DELTA_CLASS_NO";
          goto LABEL_41;
        case 1879048217:
          *(_BYTE *)(a3 + 23) = 19;
          *(_DWORD *)(a3 + 15) = 1162038849;
          v11 = "MIPS_DELTA_INSTANCE";
          goto LABEL_41;
        case 1879048218:
          v29 = "MIPS_DELTA_INSTANCE_NO";
          goto LABEL_151;
        case 1879048219:
          *(_BYTE *)(a3 + 23) = 16;
          v6 = "MIPS_DELTA_RELOC";
          goto LABEL_26;
        case 1879048220:
          *(_BYTE *)(a3 + 23) = 19;
          *(_DWORD *)(a3 + 15) = 1330536259;
          v11 = "MIPS_DELTA_RELOC_NO";
          goto LABEL_41;
        case 1879048221:
          v16 = "MIPS_DELTA_SYM";
          goto LABEL_163;
        case 1879048222:
          *(_BYTE *)(a3 + 23) = 17;
          *(_WORD *)(a3 + 16) = 79;
          v28 = "MIPS_DELTA_SYM_NO";
          goto LABEL_169;
        case 1879048224:
          *(_BYTE *)(a3 + 23) = 19;
          *(_DWORD *)(a3 + 15) = 1297699667;
          v11 = "MIPS_DELTA_CLASSSYM";
          goto LABEL_41;
        case 1879048225:
          v29 = "MIPS_DELTA_CLASSSYM_NO";
LABEL_151:
          *(_OWORD *)a3 = *(_OWORD *)v29;
          *(_QWORD *)(a3 + 14) = *(_QWORD *)(v29 + 14);
          *(_WORD *)(a3 + 22) = 5632;
          return;
        case 1879048226:
          v16 = "MIPS_CXX_FLAGS";
          goto LABEL_163;
        case 1879048227:
          v5 = "MIPS_PIXIE_INIT";
          goto LABEL_43;
        case 1879048228:
          v5 = "MIPS_SYMBOL_LIB";
          goto LABEL_43;
        case 1879048229:
          v30 = "MIPS_LOCALPAGE_GOTIDX";
          goto LABEL_159;
        case 1879048230:
          *(_BYTE *)(a3 + 23) = 17;
          *(_WORD *)(a3 + 16) = 88;
          v28 = "MIPS_LOCAL_GOTIDX";
          goto LABEL_169;
        case 1879048231:
          *(_BYTE *)(a3 + 23) = 18;
          strcpy((char *)a3, "MIPS_HIDDEN_GOTIDX");
          return;
        case 1879048232:
          v30 = "MIPS_PROTECTED_GOTIDX";
LABEL_159:
          *(_BYTE *)(a3 + 23) = 21;
          *(_OWORD *)a3 = *(_OWORD *)v30;
          *(_QWORD *)(a3 + 13) = *(_QWORD *)(v30 + 13);
          *(_BYTE *)(a3 + 21) = 0;
          return;
        case 1879048233:
          *(_BYTE *)(a3 + 23) = 12;
          *(_DWORD *)(a3 + 8) = 1397641033;
          v15 = "MIPS_OPTIONS";
          goto LABEL_161;
        case 1879048234:
          v16 = "MIPS_INTERFACE";
          goto LABEL_163;
        case 1879048235:
          *(_BYTE *)(a3 + 23) = 17;
          *(_WORD *)(a3 + 16) = 78;
          v28 = "MIPS_DYNSTR_ALIGN";
          goto LABEL_169;
        case 1879048236:
          *(_BYTE *)(a3 + 23) = 19;
          *(_DWORD *)(a3 + 15) = 1163544915;
          v11 = "MIPS_INTERFACE_SIZE";
          goto LABEL_41;
        case 1879048237:
          v31 = (char *)operator new(0x20uLL);
          *(_QWORD *)a3 = v31;
          *(_OWORD *)(a3 + 8) = xmmword_1C64638E0;
          strcpy(v31, "MIPS_RLD_TEXT_RESOLVE_ADDR");
          return;
        case 1879048238:
          *(_BYTE *)(a3 + 23) = 16;
          v6 = "MIPS_PERF_SUFFIX";
          goto LABEL_26;
        case 1879048239:
          *(_BYTE *)(a3 + 23) = 17;
          *(_WORD *)(a3 + 16) = 69;
          v28 = "MIPS_COMPACT_SIZE";
LABEL_169:
          *(_OWORD *)a3 = *(_OWORD *)v28;
          return;
        case 1879048240:
          v8 = "MIPS_GP_VALUE";
          goto LABEL_23;
        case 1879048241:
          *(_BYTE *)(a3 + 23) = 16;
          v6 = "MIPS_AUX_DYNAMIC";
          goto LABEL_26;
        case 1879048242:
          *(_BYTE *)(a3 + 23) = 11;
          *(_DWORD *)(a3 + 7) = 1414481748;
          v4 = "MIPS_PLTGOT";
          goto LABEL_46;
        case 1879048244:
          *(_BYTE *)(a3 + 23) = 10;
          *(_WORD *)(a3 + 8) = 21580;
          v14 = "MIPS_RWPLT";
          goto LABEL_176;
        case 1879048245:
          *(_BYTE *)(a3 + 23) = 16;
          v6 = "MIPS_RLD_MAP_REL";
          goto LABEL_26;
        case 1879048246:
          *(_BYTE *)(a3 + 23) = 10;
          *(_WORD *)(a3 + 8) = 18515;
          v14 = "MIPS_XHASH";
LABEL_176:
          *(_QWORD *)a3 = *(_QWORD *)v14;
          *(_BYTE *)(a3 + 10) = 0;
          break;
        default:
          goto LABEL_27;
      }
      return;
    }
    if (a1 == 20)
    {
      if (a2 == 1879048193)
      {
        *(_BYTE *)(a3 + 23) = 7;
        *(_DWORD *)a3 = 1598246992;
        v7 = 1414549343;
      }
      else
      {
        if (a2 != 1879048192)
          goto LABEL_27;
        *(_BYTE *)(a3 + 23) = 7;
        *(_DWORD *)a3 = 1598246992;
        v7 = 1414481759;
      }
LABEL_120:
      *(_DWORD *)(a3 + 3) = v7;
      *(_BYTE *)(a3 + 7) = 0;
      return;
    }
    if (a1 == 21 && a2 == 1879048192)
    {
      *(_BYTE *)(a3 + 23) = 11;
      *(_DWORD *)(a3 + 7) = 1263421772;
      v4 = "PPC64_GLINK";
LABEL_46:
      *(_QWORD *)a3 = *(_QWORD *)v4;
      *(_BYTE *)(a3 + 11) = 0;
      return;
    }
  }
LABEL_27:
  if (a2 <= 1879039999)
  {
    switch(a2)
    {
      case 0:
        *(_BYTE *)(a3 + 23) = 4;
        v9 = 1280070990;
        goto LABEL_117;
      case 1:
        *(_BYTE *)(a3 + 23) = 6;
        *(_DWORD *)a3 = 1145390414;
        v10 = 17477;
        goto LABEL_115;
      case 2:
        *(_BYTE *)(a3 + 23) = 8;
        v13 = 0x5A534C4552544C50;
        goto LABEL_102;
      case 3:
        *(_BYTE *)(a3 + 23) = 6;
        *(_DWORD *)a3 = 1196706896;
        v10 = 21583;
        goto LABEL_115;
      case 4:
        *(_BYTE *)(a3 + 23) = 4;
        v9 = 1213415752;
        goto LABEL_117;
      case 5:
        *(_BYTE *)(a3 + 23) = 6;
        v21 = 1414681683;
        goto LABEL_80;
      case 6:
        *(_BYTE *)(a3 + 23) = 6;
        v21 = 1414355283;
LABEL_80:
        *(_DWORD *)a3 = v21;
        v10 = 16961;
        goto LABEL_115;
      case 7:
        *(_BYTE *)(a3 + 23) = 4;
        v9 = 1095517522;
        goto LABEL_117;
      case 8:
        *(_BYTE *)(a3 + 23) = 6;
        v22 = 1095517522;
        goto LABEL_114;
      case 9:
        *(_BYTE *)(a3 + 23) = 7;
        *(_DWORD *)a3 = 1095517522;
        v23 = 17729;
        goto LABEL_119;
      case 10:
        *(_BYTE *)(a3 + 23) = 5;
        v24 = 1397904467;
        goto LABEL_93;
      case 11:
        *(_BYTE *)(a3 + 23) = 6;
        v25 = 1162697043;
        goto LABEL_95;
      case 12:
        *(_BYTE *)(a3 + 23) = 4;
        v9 = 1414090313;
        goto LABEL_117;
      case 13:
        *(_BYTE *)(a3 + 23) = 4;
        v9 = 1229867334;
        goto LABEL_117;
      case 14:
        *(_BYTE *)(a3 + 23) = 6;
        *(_DWORD *)a3 = 1095651155;
        v10 = 17741;
        goto LABEL_115;
      case 15:
        *(_BYTE *)(a3 + 23) = 5;
        *(_DWORD *)a3 = 1413566546;
        v26 = 72;
        goto LABEL_109;
      case 16:
        *(_BYTE *)(a3 + 23) = 8;
        v13 = 0x43494C4F424D5953;
        goto LABEL_102;
      case 17:
        *(_BYTE *)(a3 + 23) = 3;
        *(_DWORD *)a3 = 4998482;
        return;
      case 18:
        *(_BYTE *)(a3 + 23) = 5;
        v24 = 1397507410;
LABEL_93:
        *(_DWORD *)a3 = v24;
        v26 = 90;
        goto LABEL_109;
      case 19:
        *(_BYTE *)(a3 + 23) = 6;
        v25 = 1162626386;
LABEL_95:
        *(_DWORD *)a3 = v25;
        v10 = 21582;
        goto LABEL_115;
      case 20:
        *(_BYTE *)(a3 + 23) = 6;
        v27 = 1381256272;
        goto LABEL_100;
      case 21:
        *(_BYTE *)(a3 + 23) = 5;
        *(_DWORD *)a3 = 1430406468;
        v26 = 71;
        goto LABEL_109;
      case 22:
        *(_BYTE *)(a3 + 23) = 7;
        *(_DWORD *)a3 = 1415071060;
        v7 = 1279611476;
        goto LABEL_120;
      case 23:
        *(_BYTE *)(a3 + 23) = 6;
        v27 = 1380994378;
LABEL_100:
        *(_DWORD *)a3 = v27;
        v10 = 19525;
        goto LABEL_115;
      case 24:
        *(_BYTE *)(a3 + 23) = 8;
        v13 = 0x574F4E5F444E4942;
        goto LABEL_102;
      case 25:
        *(_BYTE *)(a3 + 23) = 10;
        *(_WORD *)(a3 + 8) = 22849;
        v14 = "INIT_ARRAY";
        goto LABEL_176;
      case 26:
        *(_BYTE *)(a3 + 23) = 10;
        *(_WORD *)(a3 + 8) = 22849;
        v14 = "FINI_ARRAY";
        goto LABEL_176;
      case 27:
        *(_BYTE *)(a3 + 23) = 12;
        *(_DWORD *)(a3 + 8) = 1515411777;
        v15 = "INIT_ARRAYSZ";
        goto LABEL_161;
      case 28:
        *(_BYTE *)(a3 + 23) = 12;
        *(_DWORD *)(a3 + 8) = 1515411777;
        v15 = "FINI_ARRAYSZ";
        goto LABEL_161;
      case 29:
        *(_BYTE *)(a3 + 23) = 7;
        *(_DWORD *)a3 = 1347310930;
        v7 = 1213481296;
        goto LABEL_120;
      case 30:
        *(_BYTE *)(a3 + 23) = 5;
        *(_DWORD *)a3 = 1195461702;
        v26 = 83;
LABEL_109:
        *(_WORD *)(a3 + 4) = v26;
        return;
      case 31:
        goto LABEL_70;
      case 32:
        v8 = "PREINIT_ARRAY";
        goto LABEL_23;
      case 33:
        v5 = "PREINIT_ARRAYSZ";
        goto LABEL_43;
      case 34:
        *(_BYTE *)(a3 + 23) = 12;
        *(_DWORD *)(a3 + 8) = 1480871496;
        v15 = "SYMTAB_SHNDX";
        goto LABEL_161;
      case 35:
        *(_BYTE *)(a3 + 23) = 6;
        v22 = 1380730194;
LABEL_114:
        *(_DWORD *)a3 = v22;
        v10 = 23123;
        goto LABEL_115;
      case 36:
        *(_BYTE *)(a3 + 23) = 4;
        v9 = 1380730194;
        goto LABEL_117;
      case 37:
        *(_BYTE *)(a3 + 23) = 7;
        *(_DWORD *)a3 = 1380730194;
        v23 = 17746;
LABEL_119:
        v7 = v23 | 0x544E0000;
        goto LABEL_120;
      default:
        switch(a2)
        {
          case 1610612751:
            *(_BYTE *)(a3 + 23) = 11;
            *(_DWORD *)(a3 + 7) = 1279611487;
            v4 = "ANDROID_REL";
            goto LABEL_46;
          case 1610612752:
            v8 = "ANDROID_RELSZ";
            goto LABEL_23;
          case 1610612753:
            *(_BYTE *)(a3 + 23) = 12;
            *(_DWORD *)(a3 + 8) = 1095517522;
            v15 = "ANDROID_RELA";
            goto LABEL_161;
          case 1610612754:
            v16 = "ANDROID_RELASZ";
            goto LABEL_163;
          default:
            goto LABEL_70;
        }
    }
  }
  if (a2 <= 1879048175)
  {
    if (a2 > 1879047924)
    {
      if (a2 != 1879047925)
      {
        if (a2 == 1879047926)
        {
          *(_BYTE *)(a3 + 23) = 11;
          *(_DWORD *)(a3 + 7) = 1414287455;
          v4 = "TLSDESC_PLT";
          goto LABEL_46;
        }
        if (a2 == 1879047927)
        {
          *(_BYTE *)(a3 + 23) = 11;
          *(_DWORD *)(a3 + 7) = 1414481759;
          v4 = "TLSDESC_GOT";
          goto LABEL_46;
        }
        goto LABEL_70;
      }
      *(_BYTE *)(a3 + 23) = 8;
      v13 = 0x485341485F554E47;
LABEL_102:
      *(_QWORD *)a3 = v13;
      *(_BYTE *)(a3 + 8) = 0;
      return;
    }
    if (a2 == 1879040000)
    {
      *(_BYTE *)(a3 + 23) = 12;
      *(_DWORD *)(a3 + 8) = 1380730194;
      v15 = "ANDROID_RELR";
LABEL_161:
      *(_QWORD *)a3 = *(_QWORD *)v15;
      *(_BYTE *)(a3 + 12) = 0;
      return;
    }
    if (a2 == 1879040001)
    {
      v16 = "ANDROID_RELRSZ";
LABEL_163:
      *(_BYTE *)(a3 + 23) = 14;
      *(_QWORD *)a3 = *(_QWORD *)v16;
      *(_QWORD *)(a3 + 6) = *(_QWORD *)(v16 + 6);
      *(_BYTE *)(a3 + 14) = 0;
      return;
    }
    if (a2 != 1879040003)
      goto LABEL_70;
    v5 = "ANDROID_RELRENT";
LABEL_43:
    *(_BYTE *)(a3 + 23) = 15;
    *(_QWORD *)a3 = *(_QWORD *)v5;
    *(_QWORD *)(a3 + 7) = *(_QWORD *)(v5 + 7);
    *(_BYTE *)(a3 + 15) = 0;
    return;
  }
  if (a2 <= 2147483644)
  {
    switch(a2)
    {
      case 1879048176:
        *(_BYTE *)(a3 + 23) = 6;
        *(_DWORD *)a3 = 1397900630;
        v10 = 19801;
        goto LABEL_115;
      case 1879048185:
        *(_BYTE *)(a3 + 23) = 9;
        *(_WORD *)(a3 + 8) = 84;
        v12 = "RELACOUNT";
        goto LABEL_130;
      case 1879048186:
        *(_BYTE *)(a3 + 23) = 8;
        v13 = 0x544E554F434C4552;
        goto LABEL_102;
      case 1879048187:
        *(_BYTE *)(a3 + 23) = 7;
        *(_DWORD *)a3 = 1195461702;
        v7 = 828330823;
        goto LABEL_120;
      case 1879048188:
        *(_BYTE *)(a3 + 23) = 6;
        *(_DWORD *)a3 = 1146242390;
        v10 = 17989;
        goto LABEL_115;
      case 1879048189:
        *(_BYTE *)(a3 + 23) = 9;
        *(_WORD *)(a3 + 8) = 77;
        v12 = "VERDEFNUM";
        goto LABEL_130;
      case 1879048190:
        *(_BYTE *)(a3 + 23) = 7;
        *(_DWORD *)a3 = 1314014550;
        v7 = 1145390414;
        goto LABEL_120;
      case 1879048191:
        *(_BYTE *)(a3 + 23) = 10;
        *(_WORD *)(a3 + 8) = 19797;
        v14 = "VERNEEDNUM";
        goto LABEL_176;
      default:
        goto LABEL_70;
    }
  }
  if (a2 != 2147483645)
  {
    if (a2 == 2147483646)
    {
      *(_BYTE *)(a3 + 23) = 4;
      v9 = 1145394005;
LABEL_117:
      *(_DWORD *)a3 = v9;
      *(_BYTE *)(a3 + 4) = 0;
      return;
    }
    if (a2 == 0x7FFFFFFF)
    {
      *(_BYTE *)(a3 + 23) = 6;
      *(_DWORD *)a3 = 1414285638;
      v10 = 21061;
LABEL_115:
      *(_WORD *)(a3 + 4) = v10;
      *(_BYTE *)(a3 + 6) = 0;
      return;
    }
LABEL_70:
    v17 = 0;
    do
    {
      v33[v17-- + 16] = a0123456789abcd_6[a2 & 0xF] | 0x20;
      v18 = (unint64_t)a2 > 0xF;
      a2 = (unint64_t)a2 >> 4;
    }
    while (v18);
    sub_1C4E61270(&v32, &v33[v17 + 17], (char *)&v34, -v17);
    v19 = std::string::insert(&v32, 0, "<unknown:>0x");
    v20 = v19->__r_.__value_.__r.__words[2];
    *(_OWORD *)a3 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
    *(_QWORD *)(a3 + 16) = v20;
    v19->__r_.__value_.__l.__size_ = 0;
    v19->__r_.__value_.__r.__words[2] = 0;
    v19->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v32.__r_.__value_.__l.__data_);
    return;
  }
  *(_BYTE *)(a3 + 23) = 9;
  *(_WORD *)(a3 + 8) = 89;
  v12 = "AUXILIARY";
LABEL_130:
  *(_QWORD *)a3 = *(_QWORD *)v12;
}

{
  __ZNK4llvm6object7ELFFileINS0_7ELFTypeILNS_7support10endiannessE1ELb1EEEE21getDynamicTagAsStringEjy(a1, a2, a3);
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getDynamicTagAsString(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getDynamicTagAsString(*(unsigned __int16 *)(*(_QWORD *)a1 + 18), a2, a3);
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getRelocationSymbol(_QWORD *a1@<X0>, uint64_t a2@<X1>, _QWORD *a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;

  v4 = *a1;
  if (*(_WORD *)(*a1 + 18) == 8 && *(_BYTE *)(v4 + 4) == 2)
  {
    if (*(_BYTE *)(v4 + 5) == 1)
      v5 = *(_QWORD *)(a2 + 8) << 32;
    else
      v5 = *(_QWORD *)(a2 + 8);
  }
  else
  {
    v5 = *(_QWORD *)(a2 + 8);
  }
  v6 = HIDWORD(v5);
  if ((_DWORD)v6)
  {
    sub_1C62CBB20(a1, a3, v6, a4);
  }
  else
  {
    *(_BYTE *)(a4 + 8) &= ~1u;
    *(_QWORD *)a4 = 0;
  }
}

BOOL llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::isMips64EL(uint64_t *a1)
{
  uint64_t v1;

  v1 = *a1;
  return *(_WORD *)(*a1 + 18) == 8 && *(_BYTE *)(v1 + 4) == 2 && *(_BYTE *)(v1 + 5) == 1;
}

char **llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::loadVersionMap@<X0>(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  const void **v8;
  const void **v9;
  const void **v10;
  unsigned int v11;
  char v12;
  BOOL v13;
  const void *v14;
  size_t v15;
  size_t v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  char *v20;
  _BYTE *v21;
  const void **v22;
  const void **v23;
  char *v24;
  char *v25;
  unsigned int v26;
  char v27;
  const void *v28;
  size_t v29;
  void *v30;
  uint64_t v31;
  uint64_t v32;
  char *v33;
  _QWORD *v35;
  uint64_t v36;
  const void **v37;
  void *__p[2];
  unint64_t v39;
  char v40;
  char v41;
  const void ***v42;
  uint64_t v43;
  const void **v44;
  const void **v45;
  char v46;
  uint64_t v47;

  v47 = *MEMORY[0x1E0C80C00];
  v42 = &v44;
  v43 = 0;
  __p[0] = 0;
  __p[1] = 0;
  v40 = 0;
  v39 = 0;
  v41 = 1;
  sub_1C59A8468((uint64_t)&v42, (unint64_t)__p);
  if (v41 && SHIBYTE(v39) < 0)
    operator delete(__p[0]);
  __p[0] = 0;
  __p[1] = 0;
  v40 = 0;
  v39 = 0;
  v41 = 1;
  sub_1C59A8468((uint64_t)&v42, (unint64_t)__p);
  if (v41 && SHIBYTE(v39) < 0)
    operator delete(__p[0]);
  if (a3)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getVersionDefinitions(a1, a3, (uint64_t)&v44);
    v8 = v44;
    if ((v46 & 1) != 0)
    {
      v44 = 0;
      *(_BYTE *)(a4 + 16) |= 1u;
      *(_QWORD *)a4 = v8;
      sub_1C59C5EB8((uint64_t)&v44);
      return sub_1C59C5DD4((char **)&v42);
    }
    v35 = a1;
    v9 = v45;
    if (v44 != v45)
    {
      v10 = v44 + 3;
      do
      {
        v11 = *((_DWORD *)v10 - 3) & 0x7FFF;
        v12 = *((_BYTE *)v10 + 23);
        v13 = v12 < 0;
        if (v12 >= 0)
          v14 = v10;
        else
          v14 = *v10;
        v15 = v12 & 0x7F;
        if (v13)
          v16 = (size_t)v10[1];
        else
          v16 = v15;
        if (v43 <= v11)
          sub_1C59C4C20((uint64_t)&v42, v11 + 1);
        if (v16 > 0x7FFFFFFFFFFFFFF7)
LABEL_68:
          abort();
        if (v16 >= 0x17)
        {
          v18 = (v16 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v16 | 7) != 0x17)
            v18 = v16 | 7;
          v19 = v18 + 1;
          v17 = operator new(v18 + 1);
          __p[1] = (void *)v16;
          v39 = v19 | 0x8000000000000000;
          __p[0] = v17;
        }
        else
        {
          HIBYTE(v39) = v16;
          v17 = __p;
          if (!v16)
            goto LABEL_27;
        }
        memmove(v17, v14, v16);
LABEL_27:
        *((_BYTE *)v17 + v16) = 0;
        v20 = (char *)&v42[5 * v11];
        v21 = v20 + 32;
        if (v20[32])
        {
          if (v20[23] < 0)
            operator delete(*(void **)v20);
          *(_OWORD *)v20 = *(_OWORD *)__p;
          *((_QWORD *)v20 + 2) = v39;
          v21 = v20 + 24;
        }
        else
        {
          *(_OWORD *)v20 = *(_OWORD *)__p;
          *((_QWORD *)v20 + 2) = v39;
          v20[24] = 1;
        }
        *v21 = 1;
        v22 = v10 + 6;
        v10 += 9;
      }
      while (v22 != v9);
    }
    sub_1C59C5EB8((uint64_t)&v44);
    a1 = v35;
  }
  if (a2)
  {
    __p[0] = sub_1C59A5848;
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getVersionDependencies(a1, a2, (void (*)(_QWORD *__return_ptr, uint64_t, __int128 *))sub_1C62CD258, (uint64_t)__p, (uint64_t)&v44);
    v23 = v44;
    if ((v46 & 1) == 0)
    {
      v36 = a4;
      v37 = v45;
      if (v44 == v45)
        goto LABEL_62;
      while (1)
      {
        v24 = (char *)v23[5];
        v25 = (char *)v23[6];
        while (v24 != v25)
        {
          v26 = *((_DWORD *)v24 + 2) & 0x7FFF;
          v27 = v24[39];
          if (v27 >= 0)
            v28 = v24 + 16;
          else
            v28 = (const void *)*((_QWORD *)v24 + 2);
          if (v27 >= 0)
            v29 = v27 & 0x7F;
          else
            v29 = *((_QWORD *)v24 + 3);
          if (v43 <= v26)
            sub_1C59C4C20((uint64_t)&v42, v26 + 1);
          if (v29 > 0x7FFFFFFFFFFFFFF7)
            goto LABEL_68;
          if (v29 >= 0x17)
          {
            v31 = (v29 & 0xFFFFFFFFFFFFFFF8) + 8;
            if ((v29 | 7) != 0x17)
              v31 = v29 | 7;
            v32 = v31 + 1;
            v30 = operator new(v31 + 1);
            __p[1] = (void *)v29;
            v39 = v32 | 0x8000000000000000;
            __p[0] = v30;
LABEL_54:
            memmove(v30, v28, v29);
            goto LABEL_55;
          }
          HIBYTE(v39) = v29;
          v30 = __p;
          if (v29)
            goto LABEL_54;
LABEL_55:
          *((_BYTE *)v30 + v29) = 0;
          v33 = (char *)&v42[5 * v26];
          if (v33[32])
          {
            if (v33[23] < 0)
              operator delete(*(void **)v33);
            *(_OWORD *)v33 = *(_OWORD *)__p;
            *((_QWORD *)v33 + 2) = v39;
            v33[24] = 0;
          }
          else
          {
            *(_OWORD *)v33 = *(_OWORD *)__p;
            *((_QWORD *)v33 + 2) = v39;
            v33[24] = 0;
            v33[32] = 1;
          }
          v24 += 40;
        }
        v23 += 8;
        if (v23 == v37)
        {
LABEL_62:
          sub_1C59C5F14((uint64_t)&v44);
          a4 = v36;
          goto LABEL_63;
        }
      }
    }
    v44 = 0;
    *(_BYTE *)(a4 + 16) |= 1u;
    *(_QWORD *)a4 = v23;
    sub_1C59C5F14((uint64_t)&v44);
  }
  else
  {
LABEL_63:
    *(_BYTE *)(a4 + 16) &= ~1u;
    *(_QWORD *)a4 = a4 + 16;
    *(_QWORD *)(a4 + 8) = 0;
    if ((_DWORD)v43)
      sub_1C59C5F70(a4, (uint64_t)&v42);
  }
  return sub_1C59C5DD4((char **)&v42);
}

BOOL llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::isLE(uint64_t a1)
{
  return *(_BYTE *)(*(_QWORD *)a1 + 5) == 1;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::program_headers(_QWORD *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  __int16 v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  BOOL v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  _QWORD v17[4];
  __int16 v18;
  _QWORD v19[4];
  __int16 v20;
  _QWORD v21[4];
  __int16 v22;
  _QWORD v23[4];
  __int16 v24;
  _QWORD v25[4];
  __int16 v26;
  _QWORD v27[4];
  __int16 v28;
  const char *v29;
  uint64_t v30;
  __int16 v31;

  v3 = *a1;
  v4 = *(unsigned __int16 *)(*a1 + 56);
  if (*(_WORD *)(*a1 + 56))
  {
    v5 = *(unsigned __int16 *)(v3 + 54);
    if (v5 != 56)
    {
      v29 = "invalid e_phentsize: ";
      v30 = v5;
      v6 = 2307;
      goto LABEL_9;
    }
  }
  else
  {
    v5 = *(unsigned __int16 *)(v3 + 54);
  }
  v7 = v5 * (unint64_t)*(unsigned __int16 *)(*a1 + 56);
  v8 = *(_QWORD *)(v3 + 32);
  v9 = a1[1];
  v10 = __CFADD__(v8, v7);
  v11 = v8 + v7;
  if (!v10 && v11 <= v9)
  {
    *(_BYTE *)(a2 + 16) &= ~1u;
    *(_QWORD *)a2 = v3 + v8;
    *(_QWORD *)(a2 + 8) = v4;
    return;
  }
  v15 = *(_QWORD *)(v3 + 32);
  v16 = v9;
  v17[0] = "program headers are longer than binary of size ";
  v17[2] = &v16;
  v18 = 2563;
  v19[0] = v17;
  v19[2] = ": e_phoff = 0x";
  v20 = 770;
  v21[0] = v19;
  v21[2] = &v15;
  v22 = 3586;
  v23[0] = v21;
  v23[2] = ", e_phnum = ";
  v24 = 770;
  v25[0] = v23;
  v25[2] = v4;
  v6 = 2306;
  v26 = 2306;
  v27[0] = v25;
  v27[2] = ", e_phentsize = ";
  v28 = 770;
  v29 = (const char *)v27;
  v30 = v5;
LABEL_9:
  v31 = v6;
  v12 = operator new();
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v14 = qword_1EF8F7238[0];
  *(_QWORD *)v12 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)&v29, (_QWORD *)(v12 + 8));
  *(_QWORD *)(v12 + 32) = 3;
  *(_QWORD *)(v12 + 40) = v14;
  *(_BYTE *)(v12 + 48) = 1;
  *(_BYTE *)(a2 + 16) |= 1u;
  *(_QWORD *)a2 = v12;
}

{
  __ZNK4llvm6object7ELFFileINS0_7ELFTypeILNS_7support10endiannessE1ELb1EEEE15program_headersEv(a1, a2);
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::symbols(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  if (a2)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::relas(a1, a2, a3);
  }
  else
  {
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_QWORD *)a3 = 0;
    *(_QWORD *)(a3 + 8) = 0;
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::relas(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  std::string *v8;
  std::string::size_type v9;
  std::string *v10;
  std::string::size_type v11;
  const char *v12;
  std::string *v13;
  std::string::size_type v14;
  std::string *v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v19;
  void *v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  std::string::size_type v24;
  uint64_t v25;
  unint64_t v27;
  std::string *v28;
  std::string::size_type v29;
  std::string *v30;
  std::string::size_type v31;
  uint64_t v32;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  std::string v37;
  std::string v38;
  std::string v39;
  __int16 v40;
  std::string v41;
  __int16 v42;
  std::string v43;
  void *__p[2];
  uint64_t *v45;
  __int16 v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD v49[2];
  std::string *v50;
  __int16 v51;
  _QWORD v52[2];
  std::string *v53;
  __int16 v54;
  _QWORD v55[2];
  std::string *v56;
  __int16 v57;

  if (a2[7] == 24)
  {
    v6 = a2[3];
    v7 = a2[4];
    v47 = v7;
    v48 = v6;
    if (v7 % 0x18)
    {
      sub_1C59B6288(a1, (uint64_t)a2, (char *)&v43);
      v8 = std::string::insert(&v43, 0, "section ");
      v9 = v8->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v39.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      v39.__r_.__value_.__r.__words[2] = v9;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      v10 = std::string::append(&v39, " has an invalid sh_size (");
      v11 = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v41.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v41.__r_.__value_.__r.__words[2] = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      __p[0] = &v41;
      v45 = (uint64_t *)&v47;
      v46 = 3076;
      v49[0] = __p;
      v50 = (std::string *)") which is not a multiple of its sh_entsize (";
      v51 = 770;
      v38.__r_.__value_.__r.__words[0] = a2[7];
      v52[0] = v49;
      v53 = &v38;
      v54 = 3074;
      v12 = ")";
    }
    else
    {
      if (!__CFADD__(v6, v7))
      {
        if (v7 + v6 <= a1[1])
        {
          v35 = *a1 + v6;
          *(_BYTE *)(a3 + 16) &= ~1u;
          *(_QWORD *)a3 = v35;
          *(_QWORD *)(a3 + 8) = v7 / 0x18;
          return;
        }
        sub_1C59B6288(a1, (uint64_t)a2, (char *)&v37);
        v28 = std::string::insert(&v37, 0, "section ");
        v29 = v28->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v38.__r_.__value_.__l.__data_ = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
        v38.__r_.__value_.__r.__words[2] = v29;
        v28->__r_.__value_.__l.__size_ = 0;
        v28->__r_.__value_.__r.__words[2] = 0;
        v28->__r_.__value_.__r.__words[0] = 0;
        v30 = std::string::append(&v38, " has a sh_offset (0x");
        v31 = v30->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v43.__r_.__value_.__l.__data_ = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        v43.__r_.__value_.__r.__words[2] = v31;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        v39.__r_.__value_.__r.__words[0] = (std::string::size_type)&v43;
        v39.__r_.__value_.__r.__words[2] = (std::string::size_type)&v48;
        v40 = 3588;
        v41.__r_.__value_.__r.__words[0] = (std::string::size_type)&v39;
        v41.__r_.__value_.__r.__words[2] = (std::string::size_type)") + sh_size (0x";
        v42 = 770;
        __p[0] = &v41;
        v45 = (uint64_t *)&v47;
        v46 = 3586;
        v49[0] = __p;
        v50 = (std::string *)") that is greater than the file size (0x";
        v51 = 770;
        v36 = a1[1];
        v52[0] = v49;
        v53 = (std::string *)&v36;
        v54 = 3586;
        v55[0] = v52;
        v56 = (std::string *)")";
        v57 = 770;
        v32 = operator new();
        if (!atomic_load(qword_1EF8F7238))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
        v34 = qword_1EF8F7238[0];
        *(_QWORD *)v32 = off_1E81A0C88;
        llvm::Twine::str((llvm::Twine *)v55, (_QWORD *)(v32 + 8));
        *(_QWORD *)(v32 + 32) = 3;
        *(_QWORD *)(v32 + 40) = v34;
        *(_BYTE *)(v32 + 48) = 1;
        *(_BYTE *)(a3 + 16) |= 1u;
        *(_QWORD *)a3 = v32;
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v43.__r_.__value_.__l.__data_);
        if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v38.__r_.__value_.__l.__data_);
        if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
        {
          v20 = (void *)v37.__r_.__value_.__r.__words[0];
          goto LABEL_23;
        }
        return;
      }
      sub_1C59B6288(a1, (uint64_t)a2, (char *)&v43);
      v21 = std::string::insert(&v43, 0, "section ");
      v22 = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v39.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v39.__r_.__value_.__r.__words[2] = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      v23 = std::string::append(&v39, " has a sh_offset (0x");
      v24 = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v41.__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v41.__r_.__value_.__r.__words[2] = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      __p[0] = &v41;
      v45 = &v48;
      v46 = 3588;
      v49[0] = __p;
      v50 = (std::string *)") + sh_size (0x";
      v51 = 770;
      v52[0] = v49;
      v53 = (std::string *)&v47;
      v54 = 3586;
      v12 = ") that cannot be represented";
    }
    v55[0] = v52;
    v56 = (std::string *)v12;
    v57 = 770;
    v25 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v27 = qword_1EF8F7238[0];
    *(_QWORD *)v25 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v55, (_QWORD *)(v25 + 8));
    *(_QWORD *)(v25 + 32) = 3;
    *(_QWORD *)(v25 + 40) = v27;
    *(_BYTE *)(v25 + 48) = 1;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v25;
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v41.__r_.__value_.__l.__data_);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39.__r_.__value_.__l.__data_);
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    {
      v20 = (void *)v43.__r_.__value_.__r.__words[0];
      goto LABEL_23;
    }
  }
  else
  {
    sub_1C59B6288(a1, (uint64_t)a2, (char *)&v39);
    v13 = std::string::insert(&v39, 0, "section ");
    v14 = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v41.__r_.__value_.__r.__words[2] = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    v15 = std::string::append(&v41, " has invalid sh_entsize: expected ");
    v16 = (uint64_t *)v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v45 = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    v43.__r_.__value_.__r.__words[0] = 24;
    v49[0] = __p;
    v50 = &v43;
    v51 = 2564;
    v52[0] = v49;
    v53 = (std::string *)", but got ";
    v54 = 770;
    v38.__r_.__value_.__r.__words[0] = a2[7];
    v55[0] = v52;
    v56 = &v38;
    v57 = 3074;
    v17 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v19 = qword_1EF8F7238[0];
    *(_QWORD *)v17 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v55, (_QWORD *)(v17 + 8));
    *(_QWORD *)(v17 + 32) = 3;
    *(_QWORD *)(v17 + 40) = v19;
    *(_BYTE *)(v17 + 48) = 1;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v17;
    if (SHIBYTE(v45) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v41.__r_.__value_.__l.__data_);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    {
      v20 = (void *)v39.__r_.__value_.__r.__words[0];
LABEL_23:
      operator delete(v20);
    }
  }
}

void sub_1C59B9DE0(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  std::string *v8;
  std::string::size_type v9;
  std::string *v10;
  std::string::size_type v11;
  const char *v12;
  std::string *v13;
  std::string::size_type v14;
  std::string *v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v19;
  void *v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  std::string::size_type v24;
  uint64_t v25;
  unint64_t v27;
  std::string *v28;
  std::string::size_type v29;
  std::string *v30;
  std::string::size_type v31;
  uint64_t v32;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  std::string v37;
  std::string v38;
  std::string v39;
  __int16 v40;
  std::string v41;
  __int16 v42;
  std::string v43;
  void *__p[2];
  uint64_t *v45;
  __int16 v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD v49[2];
  std::string *v50;
  __int16 v51;
  _QWORD v52[2];
  std::string *v53;
  __int16 v54;
  _QWORD v55[2];
  std::string *v56;
  __int16 v57;

  if (a2[7] == 16)
  {
    v6 = a2[3];
    v7 = a2[4];
    v47 = v7;
    v48 = v6;
    if ((v7 & 0xF) != 0)
    {
      sub_1C59B6288(a1, (uint64_t)a2, (char *)&v43);
      v8 = std::string::insert(&v43, 0, "section ");
      v9 = v8->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v39.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      v39.__r_.__value_.__r.__words[2] = v9;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      v10 = std::string::append(&v39, " has an invalid sh_size (");
      v11 = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v41.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v41.__r_.__value_.__r.__words[2] = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      __p[0] = &v41;
      v45 = (uint64_t *)&v47;
      v46 = 3076;
      v49[0] = __p;
      v50 = (std::string *)") which is not a multiple of its sh_entsize (";
      v51 = 770;
      v38.__r_.__value_.__r.__words[0] = a2[7];
      v52[0] = v49;
      v53 = &v38;
      v54 = 3074;
      v12 = ")";
    }
    else
    {
      if (!__CFADD__(v6, v7))
      {
        if (v7 + v6 <= a1[1])
        {
          v35 = *a1 + v6;
          *(_BYTE *)(a3 + 16) &= ~1u;
          *(_QWORD *)a3 = v35;
          *(_QWORD *)(a3 + 8) = v7 >> 4;
          return;
        }
        sub_1C59B6288(a1, (uint64_t)a2, (char *)&v37);
        v28 = std::string::insert(&v37, 0, "section ");
        v29 = v28->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v38.__r_.__value_.__l.__data_ = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
        v38.__r_.__value_.__r.__words[2] = v29;
        v28->__r_.__value_.__l.__size_ = 0;
        v28->__r_.__value_.__r.__words[2] = 0;
        v28->__r_.__value_.__r.__words[0] = 0;
        v30 = std::string::append(&v38, " has a sh_offset (0x");
        v31 = v30->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v43.__r_.__value_.__l.__data_ = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        v43.__r_.__value_.__r.__words[2] = v31;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        v39.__r_.__value_.__r.__words[0] = (std::string::size_type)&v43;
        v39.__r_.__value_.__r.__words[2] = (std::string::size_type)&v48;
        v40 = 3588;
        v41.__r_.__value_.__r.__words[0] = (std::string::size_type)&v39;
        v41.__r_.__value_.__r.__words[2] = (std::string::size_type)") + sh_size (0x";
        v42 = 770;
        __p[0] = &v41;
        v45 = (uint64_t *)&v47;
        v46 = 3586;
        v49[0] = __p;
        v50 = (std::string *)") that is greater than the file size (0x";
        v51 = 770;
        v36 = a1[1];
        v52[0] = v49;
        v53 = (std::string *)&v36;
        v54 = 3586;
        v55[0] = v52;
        v56 = (std::string *)")";
        v57 = 770;
        v32 = operator new();
        if (!atomic_load(qword_1EF8F7238))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
        v34 = qword_1EF8F7238[0];
        *(_QWORD *)v32 = off_1E81A0C88;
        llvm::Twine::str((llvm::Twine *)v55, (_QWORD *)(v32 + 8));
        *(_QWORD *)(v32 + 32) = 3;
        *(_QWORD *)(v32 + 40) = v34;
        *(_BYTE *)(v32 + 48) = 1;
        *(_BYTE *)(a3 + 16) |= 1u;
        *(_QWORD *)a3 = v32;
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v43.__r_.__value_.__l.__data_);
        if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v38.__r_.__value_.__l.__data_);
        if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
        {
          v20 = (void *)v37.__r_.__value_.__r.__words[0];
          goto LABEL_23;
        }
        return;
      }
      sub_1C59B6288(a1, (uint64_t)a2, (char *)&v43);
      v21 = std::string::insert(&v43, 0, "section ");
      v22 = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v39.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v39.__r_.__value_.__r.__words[2] = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      v23 = std::string::append(&v39, " has a sh_offset (0x");
      v24 = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v41.__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v41.__r_.__value_.__r.__words[2] = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      __p[0] = &v41;
      v45 = &v48;
      v46 = 3588;
      v49[0] = __p;
      v50 = (std::string *)") + sh_size (0x";
      v51 = 770;
      v52[0] = v49;
      v53 = (std::string *)&v47;
      v54 = 3586;
      v12 = ") that cannot be represented";
    }
    v55[0] = v52;
    v56 = (std::string *)v12;
    v57 = 770;
    v25 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v27 = qword_1EF8F7238[0];
    *(_QWORD *)v25 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v55, (_QWORD *)(v25 + 8));
    *(_QWORD *)(v25 + 32) = 3;
    *(_QWORD *)(v25 + 40) = v27;
    *(_BYTE *)(v25 + 48) = 1;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v25;
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v41.__r_.__value_.__l.__data_);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39.__r_.__value_.__l.__data_);
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    {
      v20 = (void *)v43.__r_.__value_.__r.__words[0];
      goto LABEL_23;
    }
  }
  else
  {
    sub_1C59B6288(a1, (uint64_t)a2, (char *)&v39);
    v13 = std::string::insert(&v39, 0, "section ");
    v14 = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v41.__r_.__value_.__r.__words[2] = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    v15 = std::string::append(&v41, " has invalid sh_entsize: expected ");
    v16 = (uint64_t *)v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v45 = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    v43.__r_.__value_.__r.__words[0] = 16;
    v49[0] = __p;
    v50 = &v43;
    v51 = 2564;
    v52[0] = v49;
    v53 = (std::string *)", but got ";
    v54 = 770;
    v38.__r_.__value_.__r.__words[0] = a2[7];
    v55[0] = v52;
    v56 = &v38;
    v57 = 3074;
    v17 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v19 = qword_1EF8F7238[0];
    *(_QWORD *)v17 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v55, (_QWORD *)(v17 + 8));
    *(_QWORD *)(v17 + 32) = 3;
    *(_QWORD *)(v17 + 40) = v19;
    *(_BYTE *)(v17 + 48) = 1;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v17;
    if (SHIBYTE(v45) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v41.__r_.__value_.__l.__data_);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    {
      v20 = (void *)v39.__r_.__value_.__r.__words[0];
LABEL_23:
      operator delete(v20);
    }
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::relrs(_QWORD *a1@<X0>, _QWORD *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  unint64_t v7;
  std::string *v8;
  std::string::size_type v9;
  std::string *v10;
  std::string::size_type v11;
  const char *v12;
  std::string *v13;
  std::string::size_type v14;
  std::string *v15;
  uint64_t *v16;
  uint64_t v17;
  unint64_t v19;
  void *v20;
  std::string *v21;
  std::string::size_type v22;
  std::string *v23;
  std::string::size_type v24;
  uint64_t v25;
  unint64_t v27;
  std::string *v28;
  std::string::size_type v29;
  std::string *v30;
  std::string::size_type v31;
  uint64_t v32;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  std::string v37;
  std::string v38;
  std::string v39;
  __int16 v40;
  std::string v41;
  __int16 v42;
  std::string v43;
  void *__p[2];
  uint64_t *v45;
  __int16 v46;
  unint64_t v47;
  uint64_t v48;
  _QWORD v49[2];
  std::string *v50;
  __int16 v51;
  _QWORD v52[2];
  std::string *v53;
  __int16 v54;
  _QWORD v55[2];
  std::string *v56;
  __int16 v57;

  if (a2[7] == 8)
  {
    v6 = a2[3];
    v7 = a2[4];
    v47 = v7;
    v48 = v6;
    if ((v7 & 7) != 0)
    {
      sub_1C59B6288(a1, (uint64_t)a2, (char *)&v43);
      v8 = std::string::insert(&v43, 0, "section ");
      v9 = v8->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v39.__r_.__value_.__l.__data_ = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
      v39.__r_.__value_.__r.__words[2] = v9;
      v8->__r_.__value_.__l.__size_ = 0;
      v8->__r_.__value_.__r.__words[2] = 0;
      v8->__r_.__value_.__r.__words[0] = 0;
      v10 = std::string::append(&v39, " has an invalid sh_size (");
      v11 = v10->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v41.__r_.__value_.__l.__data_ = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
      v41.__r_.__value_.__r.__words[2] = v11;
      v10->__r_.__value_.__l.__size_ = 0;
      v10->__r_.__value_.__r.__words[2] = 0;
      v10->__r_.__value_.__r.__words[0] = 0;
      __p[0] = &v41;
      v45 = (uint64_t *)&v47;
      v46 = 3076;
      v49[0] = __p;
      v50 = (std::string *)") which is not a multiple of its sh_entsize (";
      v51 = 770;
      v38.__r_.__value_.__r.__words[0] = a2[7];
      v52[0] = v49;
      v53 = &v38;
      v54 = 3074;
      v12 = ")";
    }
    else
    {
      if (!__CFADD__(v6, v7))
      {
        if (v7 + v6 <= a1[1])
        {
          v35 = *a1 + v6;
          *(_BYTE *)(a3 + 16) &= ~1u;
          *(_QWORD *)a3 = v35;
          *(_QWORD *)(a3 + 8) = v7 >> 3;
          return;
        }
        sub_1C59B6288(a1, (uint64_t)a2, (char *)&v37);
        v28 = std::string::insert(&v37, 0, "section ");
        v29 = v28->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v38.__r_.__value_.__l.__data_ = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
        v38.__r_.__value_.__r.__words[2] = v29;
        v28->__r_.__value_.__l.__size_ = 0;
        v28->__r_.__value_.__r.__words[2] = 0;
        v28->__r_.__value_.__r.__words[0] = 0;
        v30 = std::string::append(&v38, " has a sh_offset (0x");
        v31 = v30->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v43.__r_.__value_.__l.__data_ = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
        v43.__r_.__value_.__r.__words[2] = v31;
        v30->__r_.__value_.__l.__size_ = 0;
        v30->__r_.__value_.__r.__words[2] = 0;
        v30->__r_.__value_.__r.__words[0] = 0;
        v39.__r_.__value_.__r.__words[0] = (std::string::size_type)&v43;
        v39.__r_.__value_.__r.__words[2] = (std::string::size_type)&v48;
        v40 = 3588;
        v41.__r_.__value_.__r.__words[0] = (std::string::size_type)&v39;
        v41.__r_.__value_.__r.__words[2] = (std::string::size_type)") + sh_size (0x";
        v42 = 770;
        __p[0] = &v41;
        v45 = (uint64_t *)&v47;
        v46 = 3586;
        v49[0] = __p;
        v50 = (std::string *)") that is greater than the file size (0x";
        v51 = 770;
        v36 = a1[1];
        v52[0] = v49;
        v53 = (std::string *)&v36;
        v54 = 3586;
        v55[0] = v52;
        v56 = (std::string *)")";
        v57 = 770;
        v32 = operator new();
        if (!atomic_load(qword_1EF8F7238))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
        v34 = qword_1EF8F7238[0];
        *(_QWORD *)v32 = off_1E81A0C88;
        llvm::Twine::str((llvm::Twine *)v55, (_QWORD *)(v32 + 8));
        *(_QWORD *)(v32 + 32) = 3;
        *(_QWORD *)(v32 + 40) = v34;
        *(_BYTE *)(v32 + 48) = 1;
        *(_BYTE *)(a3 + 16) |= 1u;
        *(_QWORD *)a3 = v32;
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v43.__r_.__value_.__l.__data_);
        if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0)
          operator delete(v38.__r_.__value_.__l.__data_);
        if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0)
        {
          v20 = (void *)v37.__r_.__value_.__r.__words[0];
          goto LABEL_23;
        }
        return;
      }
      sub_1C59B6288(a1, (uint64_t)a2, (char *)&v43);
      v21 = std::string::insert(&v43, 0, "section ");
      v22 = v21->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v39.__r_.__value_.__l.__data_ = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
      v39.__r_.__value_.__r.__words[2] = v22;
      v21->__r_.__value_.__l.__size_ = 0;
      v21->__r_.__value_.__r.__words[2] = 0;
      v21->__r_.__value_.__r.__words[0] = 0;
      v23 = std::string::append(&v39, " has a sh_offset (0x");
      v24 = v23->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v41.__r_.__value_.__l.__data_ = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
      v41.__r_.__value_.__r.__words[2] = v24;
      v23->__r_.__value_.__l.__size_ = 0;
      v23->__r_.__value_.__r.__words[2] = 0;
      v23->__r_.__value_.__r.__words[0] = 0;
      __p[0] = &v41;
      v45 = &v48;
      v46 = 3588;
      v49[0] = __p;
      v50 = (std::string *)") + sh_size (0x";
      v51 = 770;
      v52[0] = v49;
      v53 = (std::string *)&v47;
      v54 = 3586;
      v12 = ") that cannot be represented";
    }
    v55[0] = v52;
    v56 = (std::string *)v12;
    v57 = 770;
    v25 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v27 = qword_1EF8F7238[0];
    *(_QWORD *)v25 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v55, (_QWORD *)(v25 + 8));
    *(_QWORD *)(v25 + 32) = 3;
    *(_QWORD *)(v25 + 40) = v27;
    *(_BYTE *)(v25 + 48) = 1;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v25;
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v41.__r_.__value_.__l.__data_);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v39.__r_.__value_.__l.__data_);
    if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0)
    {
      v20 = (void *)v43.__r_.__value_.__r.__words[0];
      goto LABEL_23;
    }
  }
  else
  {
    sub_1C59B6288(a1, (uint64_t)a2, (char *)&v39);
    v13 = std::string::insert(&v39, 0, "section ");
    v14 = v13->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v41.__r_.__value_.__l.__data_ = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
    v41.__r_.__value_.__r.__words[2] = v14;
    v13->__r_.__value_.__l.__size_ = 0;
    v13->__r_.__value_.__r.__words[2] = 0;
    v13->__r_.__value_.__r.__words[0] = 0;
    v15 = std::string::append(&v41, " has invalid sh_entsize: expected ");
    v16 = (uint64_t *)v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v45 = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    v43.__r_.__value_.__r.__words[0] = 8;
    v49[0] = __p;
    v50 = &v43;
    v51 = 2564;
    v52[0] = v49;
    v53 = (std::string *)", but got ";
    v54 = 770;
    v38.__r_.__value_.__r.__words[0] = a2[7];
    v55[0] = v52;
    v56 = &v38;
    v57 = 3074;
    v17 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v19 = qword_1EF8F7238[0];
    *(_QWORD *)v17 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v55, (_QWORD *)(v17 + 8));
    *(_QWORD *)(v17 + 32) = 3;
    *(_QWORD *)(v17 + 40) = v19;
    *(_BYTE *)(v17 + 48) = 1;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v17;
    if (SHIBYTE(v45) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v41.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v41.__r_.__value_.__l.__data_);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0)
    {
      v20 = (void *)v39.__r_.__value_.__r.__words[0];
LABEL_23:
      operator delete(v20);
    }
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::decode_relrs(uint64_t a1@<X0>, unint64_t *a2@<X1>, uint64_t a3@<X2>, unint64_t **a4@<X8>)
{
  unsigned int ELFRelativeRelocationType;
  unint64_t *v8;
  unint64_t v9;
  unint64_t v10;
  unint64_t *v11;
  unint64_t v12;
  unint64_t v13;
  unint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  uint64_t v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  char *v23;
  char *v24;
  char *v25;
  BOOL v26;
  unint64_t *v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  unint64_t v31;
  char *v32;
  unint64_t *v33;
  unint64_t *v34;
  unint64_t *v35;

  ELFRelativeRelocationType = llvm::object::getELFRelativeRelocationType((llvm::object *)*(unsigned __int16 *)(*(_QWORD *)a1 + 18));
  a4[1] = 0;
  a4[2] = 0;
  *a4 = 0;
  if (a3)
  {
    v8 = 0;
    v9 = 0;
    v10 = ELFRelativeRelocationType;
    v11 = &a2[a3];
    v35 = v11;
    do
    {
      v12 = *a2;
      if ((*a2 & 1) != 0)
      {
        v15 = v9;
        if (v12 >= 2)
        {
          do
          {
            if ((v12 & 2) != 0)
            {
              v16 = (unint64_t)a4[2];
              if ((unint64_t)v8 >= v16)
              {
                v18 = *a4;
                v19 = ((char *)v8 - (char *)*a4) >> 4;
                v20 = v19 + 1;
                if ((unint64_t)(v19 + 1) >> 60)
                  goto LABEL_46;
                v21 = v16 - (_QWORD)v18;
                if (v21 >> 3 > v20)
                  v20 = v21 >> 3;
                if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0)
                  v22 = 0xFFFFFFFFFFFFFFFLL;
                else
                  v22 = v20;
                if (v22)
                {
                  if (v22 >> 60)
                    goto LABEL_47;
                  v23 = (char *)operator new(16 * v22);
                }
                else
                {
                  v23 = 0;
                }
                v24 = &v23[16 * v19];
                *(_QWORD *)v24 = v15;
                *((_QWORD *)v24 + 1) = v10;
                v25 = v24;
                if (v8 != v18)
                {
                  do
                  {
                    *((_OWORD *)v25 - 1) = *((_OWORD *)v8 - 1);
                    v25 -= 16;
                    v8 -= 2;
                  }
                  while (v8 != v18);
                  v8 = *a4;
                }
                v17 = (unint64_t *)(v24 + 16);
                *a4 = (unint64_t *)v25;
                a4[1] = (unint64_t *)(v24 + 16);
                a4[2] = (unint64_t *)&v23[16 * v22];
                if (v8)
                  operator delete(v8);
              }
              else
              {
                *v8 = v15;
                v8[1] = v10;
                v17 = v8 + 2;
              }
              a4[1] = v17;
              v8 = v17;
            }
            v15 += 8;
            v26 = v12 >= 4;
            v12 >>= 1;
          }
          while (v26);
        }
        v9 += 504;
        v11 = v35;
      }
      else
      {
        v13 = (unint64_t)a4[2];
        if ((unint64_t)v8 >= v13)
        {
          v27 = *a4;
          v28 = ((char *)v8 - (char *)*a4) >> 4;
          v29 = v28 + 1;
          if ((unint64_t)(v28 + 1) >> 60)
LABEL_46:
            abort();
          v30 = v13 - (_QWORD)v27;
          if (v30 >> 3 > v29)
            v29 = v30 >> 3;
          if ((unint64_t)v30 >= 0x7FFFFFFFFFFFFFF0)
            v31 = 0xFFFFFFFFFFFFFFFLL;
          else
            v31 = v29;
          if (v31)
          {
            if (v31 >> 60)
LABEL_47:
              sub_1C4764EE4();
            v32 = (char *)operator new(16 * v31);
          }
          else
          {
            v32 = 0;
          }
          v33 = (unint64_t *)&v32[16 * v28];
          *v33 = v12;
          v33[1] = v10;
          v34 = v33;
          if (v8 != v27)
          {
            do
            {
              *((_OWORD *)v34 - 1) = *((_OWORD *)v8 - 1);
              v34 -= 2;
              v8 -= 2;
            }
            while (v8 != v27);
            v8 = *a4;
          }
          v14 = v33 + 2;
          *a4 = v34;
          a4[1] = v33 + 2;
          a4[2] = (unint64_t *)&v32[16 * v31];
          if (v8)
            operator delete(v8);
        }
        else
        {
          *v8 = v12;
          v8[1] = v10;
          v14 = v8 + 2;
        }
        a4[1] = v14;
        v9 = v12 + 8;
        v8 = v14;
      }
      ++a2;
    }
    while (a2 != v11);
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::android_relas(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  _BYTE *v5;
  BOOL v6;
  _QWORD *v7;
  unint64_t SLEB128;
  uint64_t v9;
  uint64_t v10;
  char *v11;
  char *v12;
  uint64_t v13;
  unint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  char *v18;
  unint64_t v19;
  _BYTE *v20;
  unint64_t v21;
  BOOL v22;
  BOOL v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  char *v27;
  _QWORD *v28;
  unint64_t v29;
  unint64_t v30;
  unint64_t v31;
  char *v32;
  uint64_t *v33;
  char *v34;
  __int128 v35;
  char *v36;
  char *v37;
  BOOL v38;
  uint64_t v39;
  unint64_t v41;
  uint64_t v42;
  unint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  _BYTE *v49;
  _QWORD v50[2];
  BOOL v51;
  char v52;
  _QWORD v53[4];
  __int16 v54;
  _BYTE *v55;
  unint64_t v56;
  char v57;
  uint64_t v58;

  v58 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionContents(a1, a2, (uint64_t)&v55);
  v5 = v55;
  if ((v57 & 1) != 0)
  {
    v55 = 0;
    goto LABEL_12;
  }
  if (v56 < 4 || *v55 != 65 || v55[1] != 80 || v55[2] != 83 || v55[3] != 50)
  {
    v53[0] = "invalid packed relocation header";
    v54 = 259;
    v13 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v15 = qword_1EF8F7238[0];
    *(_QWORD *)v13 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v53, (_QWORD *)(v13 + 8));
    *(_QWORD *)(v13 + 32) = 3;
    *(_QWORD *)(v13 + 40) = v15;
    *(_BYTE *)(v13 + 48) = 1;
    *(_BYTE *)(a3 + 24) |= 1u;
    *(_QWORD *)a3 = v13;
    goto LABEL_16;
  }
  v6 = *(_BYTE *)(*a1 + 5) == 1;
  v50[0] = v55;
  v50[1] = v56;
  v51 = v6;
  v52 = 8;
  v7 = &v49;
  v48 = 4;
  v49 = 0;
  SLEB128 = llvm::DataExtractor::getSLEB128(v50, &v48, &v49);
  v9 = llvm::DataExtractor::getSLEB128(v50, &v48, &v49);
  v5 = v49;
  if (v49)
  {
LABEL_12:
    *(_BYTE *)(a3 + 24) |= 1u;
    *(_QWORD *)a3 = v5;
    goto LABEL_16;
  }
  v10 = v9;
  v42 = a3;
  if (SLEB128)
  {
    if (SLEB128 > 0xAAAAAAAAAAAAAAALL)
LABEL_79:
      abort();
    v11 = (char *)operator new(24 * SLEB128);
    v12 = &v11[24 * SLEB128];
  }
  else
  {
    v11 = 0;
    v12 = 0;
  }
  v17 = 0;
  v18 = v11;
  while (1)
  {
    if (!SLEB128)
    {
      *(_BYTE *)(v42 + 24) &= ~1u;
      *(_QWORD *)v42 = v11;
      *(_QWORD *)(v42 + 8) = v18;
      *(_QWORD *)(v42 + 16) = v12;
      goto LABEL_77;
    }
    v19 = llvm::DataExtractor::getSLEB128(v50, &v48, v7);
    v20 = v49;
    if (v49)
    {
LABEL_70:
      v49 = 0;
      *(_BYTE *)(v42 + 24) |= 1u;
      *(_QWORD *)v42 = v20;
      goto LABEL_75;
    }
    v21 = v19;
    v22 = SLEB128 >= v19;
    SLEB128 -= v19;
    if (!v22)
      break;
    v47 = llvm::DataExtractor::getSLEB128(v50, &v48, v7);
    if ((v47 & 2) != 0)
      v46 = llvm::DataExtractor::getSLEB128(v50, &v48, v7);
    else
      v46 = 0;
    if ((v47 & 1) != 0)
      v45 = llvm::DataExtractor::getSLEB128(v50, &v48, v7);
    else
      v45 = 0;
    v44 = v47 & 0xC;
    if (v44 == 12)
      v17 += llvm::DataExtractor::getSLEB128(v50, &v48, v7);
    v17 &= v47 << 60 >> 63;
    v20 = v49;
    v23 = v49 == 0;
    if (!v49 && v21)
    {
      v43 = SLEB128;
      v24 = 0;
      do
      {
        v25 = v46;
        if ((v47 & 2) == 0)
          v25 = llvm::DataExtractor::getSLEB128(v50, &v48, v7);
        v26 = v45;
        if ((v47 & 1) == 0)
          v26 = llvm::DataExtractor::getSLEB128(v50, &v48, v7);
        if (v44 == 8)
          v17 += llvm::DataExtractor::getSLEB128(v50, &v48, v7);
        v10 += v25;
        if (v18 >= v12)
        {
          v27 = v12;
          v28 = v7;
          v29 = 0xAAAAAAAAAAAAAAABLL * ((v18 - v11) >> 3) + 1;
          if (v29 > 0xAAAAAAAAAAAAAAALL)
            goto LABEL_79;
          v30 = 0xAAAAAAAAAAAAAAABLL * ((v27 - v11) >> 3);
          if (2 * v30 > v29)
            v29 = 2 * v30;
          if (v30 >= 0x555555555555555)
            v31 = 0xAAAAAAAAAAAAAAALL;
          else
            v31 = v29;
          if (v31)
          {
            if (v31 > 0xAAAAAAAAAAAAAAALL)
              sub_1C4764EE4();
            v32 = (char *)operator new(24 * v31);
          }
          else
          {
            v32 = 0;
          }
          v33 = (uint64_t *)&v32[8 * ((v18 - v11) >> 3)];
          *v33 = v10;
          v33[1] = v26;
          v33[2] = v17;
          if (v18 == v11)
          {
            v36 = &v32[8 * ((v18 - v11) >> 3)];
          }
          else
          {
            v34 = &v32[8 * ((v18 - v11) >> 3)];
            do
            {
              v35 = *(_OWORD *)(v18 - 24);
              v36 = v34 - 24;
              *((_QWORD *)v34 - 1) = *((_QWORD *)v18 - 1);
              *(_OWORD *)(v34 - 24) = v35;
              v18 -= 24;
              v34 -= 24;
            }
            while (v18 != v11);
          }
          v37 = &v32[24 * v31];
          v18 = (char *)(v33 + 3);
          if (v11)
            operator delete(v11);
          v11 = v36;
          v7 = v28;
          v12 = v37;
        }
        else
        {
          *(_QWORD *)v18 = v10;
          *((_QWORD *)v18 + 1) = v26;
          *((_QWORD *)v18 + 2) = v17;
          v18 += 24;
        }
        ++v24;
        v20 = v49;
        v23 = v49 == 0;
        if (v49)
          v38 = 1;
        else
          v38 = v24 == v21;
      }
      while (!v38);
      SLEB128 = v43;
    }
    if (!v23)
      goto LABEL_70;
  }
  v53[0] = "relocation group unexpectedly large";
  v54 = 259;
  v39 = operator new();
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v41 = qword_1EF8F7238[0];
  *(_QWORD *)v39 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)v53, (_QWORD *)(v39 + 8));
  *(_QWORD *)(v39 + 32) = 3;
  *(_QWORD *)(v39 + 40) = v41;
  *(_BYTE *)(v39 + 48) = 1;
  *(_BYTE *)(v42 + 24) |= 1u;
  *(_QWORD *)v42 = v39;
LABEL_75:
  if (v11)
    operator delete(v11);
LABEL_77:
  if (v49)
    (*(void (**)(_BYTE *))(*(_QWORD *)v49 + 8))(v49);
LABEL_16:
  if ((v57 & 1) != 0)
  {
    v16 = v55;
    v55 = 0;
    if (v16)
      (*(void (**)(_BYTE *))(*(_QWORD *)v16 + 8))(v16);
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::notes_begin(_QWORD *a1@<X0>, uint64_t a2@<X1>, char **a3@<X2>, _QWORD *a4@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[4];
  __int16 v14;
  _QWORD v15[4];
  __int16 v16;
  _QWORD v17[4];
  __int16 v18;
  _QWORD v19[4];
  __int16 v20;

  v6 = *(_QWORD *)(a2 + 8);
  v7 = *(_QWORD *)(a2 + 32);
  if ((unint64_t)(v7 + v6) <= a1[1])
  {
    sub_1C59C6BF0(a4, *a1 + v6, v7, a3);
    if (!*a3)
      *a3 = 0;
  }
  else
  {
    v11 = *(_QWORD *)(a2 + 32);
    v12 = v6;
    v13[0] = "invalid offset (0x";
    v13[2] = &v12;
    v14 = 3587;
    v15[0] = v13;
    v15[2] = ") or size (0x";
    v16 = 770;
    v17[0] = v15;
    v17[2] = &v11;
    v18 = 3586;
    v19[0] = v17;
    v19[2] = ")";
    v20 = 770;
    v8 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v10 = qword_1EF8F7238[0];
    *(_QWORD *)v8 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v19, (_QWORD *)(v8 + 8));
    *(_QWORD *)(v8 + 32) = 3;
    *(_QWORD *)(v8 + 40) = v10;
    *(_BYTE *)(v8 + 48) = 1;
    *a3 = (char *)v8;
    *a4 = 0;
    a4[1] = 0;
    a4[2] = a3;
  }
}

{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD v13[4];
  __int16 v14;
  _QWORD v15[4];
  __int16 v16;
  _QWORD v17[4];
  __int16 v18;
  _QWORD v19[4];
  __int16 v20;

  v7 = *(_QWORD *)(a2 + 24);
  v6 = *(_QWORD *)(a2 + 32);
  if ((unint64_t)(v6 + v7) <= a1[1])
  {
    sub_1C59C6BF0(a4, *a1 + v7, v6, a3);
    if (!*a3)
      *a3 = 0;
  }
  else
  {
    v11 = *(_QWORD *)(a2 + 32);
    v12 = v7;
    v13[0] = "invalid offset (0x";
    v13[2] = &v12;
    v14 = 3587;
    v15[0] = v13;
    v15[2] = ") or size (0x";
    v16 = 770;
    v17[0] = v15;
    v17[2] = &v11;
    v18 = 3586;
    v19[0] = v17;
    v19[2] = ")";
    v20 = 770;
    v8 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v10 = qword_1EF8F7238[0];
    *(_QWORD *)v8 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v19, (_QWORD *)(v8 + 8));
    *(_QWORD *)(v8 + 32) = 3;
    *(_QWORD *)(v8 + 40) = v10;
    *(_BYTE *)(v8 + 48) = 1;
    *a3 = (char *)v8;
    *a4 = 0;
    a4[1] = 0;
    a4[2] = a3;
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::notes_end(_QWORD *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::notes(_QWORD *a1@<X0>, uint64_t a2@<X1>, char **a3@<X2>, _QWORD *a4@<X8>)
{
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::notes_begin(a1, a3, a4, a2);
  a4[3] = 0;
  a4[4] = 0;
  a4[5] = 0;
}

{
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::notes_begin(a1, a3, a4, a2);
  a4[3] = 0;
  a4[4] = 0;
  a4[5] = 0;
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSymbol(_QWORD *a1@<X0>, _QWORD *a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  char v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  std::string *v12;
  std::string::size_type v13;
  std::string *v14;
  std::string::size_type v15;
  uint64_t v16;
  unint64_t v18;
  uint64_t v19;
  std::string v20;
  std::string v21;
  void *__p[2];
  std::string::size_type v23;
  _QWORD v24[4];
  __int16 v25;
  _QWORD v26[4];
  __int16 v27;
  uint64_t v28;
  unint64_t v29;
  char v30;
  uint64_t v31;

  v31 = *MEMORY[0x1E0C80C00];
  if (a2)
  {
    llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::relas(a1, a2, (uint64_t)&v28);
    v8 = v30;
    if ((v30 & 1) != 0)
    {
      v10 = v28;
      v28 = 0;
      v11 = *(_BYTE *)(a4 + 8) | 1;
LABEL_17:
      *(_BYTE *)(a4 + 8) = v11;
      *(_QWORD *)a4 = v10;
      if ((v8 & 1) == 0)
        return;
      goto LABEL_18;
    }
    v9 = a3;
    if (v29 > a3)
    {
      v10 = v28 + 24 * a3;
      v11 = *(_BYTE *)(a4 + 8) & 0xFE;
      goto LABEL_17;
    }
  }
  else
  {
    v28 = 0;
    v29 = 0;
    v9 = a3;
    v30 = 0;
  }
  sub_1C59B6288(a1, (uint64_t)a2, (char *)&v20);
  v12 = std::string::insert(&v20, 0, "unable to get symbol from section ");
  v13 = v12->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v21.__r_.__value_.__l.__data_ = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
  v21.__r_.__value_.__r.__words[2] = v13;
  v12->__r_.__value_.__l.__size_ = 0;
  v12->__r_.__value_.__r.__words[2] = 0;
  v12->__r_.__value_.__r.__words[0] = 0;
  v14 = std::string::append(&v21, ": invalid symbol index (");
  v15 = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)__p = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v23 = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  v24[0] = __p;
  v24[2] = v9;
  v25 = 2052;
  v26[0] = v24;
  v26[2] = ")";
  v27 = 770;
  v16 = operator new();
  if (!atomic_load(qword_1EF8F7238))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
  v18 = qword_1EF8F7238[0];
  *(_QWORD *)v16 = off_1E81A0C88;
  llvm::Twine::str((llvm::Twine *)v26, (_QWORD *)(v16 + 8));
  *(_QWORD *)(v16 + 32) = 3;
  *(_QWORD *)(v16 + 40) = v18;
  *(_BYTE *)(v16 + 48) = 1;
  *(_BYTE *)(a4 + 8) |= 1u;
  *(_QWORD *)a4 = v16;
  if (SHIBYTE(v23) < 0)
    operator delete(__p[0]);
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v21.__r_.__value_.__l.__data_);
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v20.__r_.__value_.__l.__data_);
  if ((v30 & 1) != 0)
  {
LABEL_18:
    v19 = v28;
    v28 = 0;
    if (v19)
      (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionName(_QWORD *a1@<X0>, unsigned int *a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, uint64_t a5@<X8>)
{
  unint64_t v6;
  const char *v7;
  size_t v8;
  std::string *v9;
  std::string::size_type v10;
  std::string *v11;
  std::string::size_type v12;
  uint64_t v13;
  unint64_t v15;
  unint64_t v16;
  std::string v17;
  std::string v18;
  void *__p[2];
  std::string::size_type v20;
  _QWORD v21[4];
  __int16 v22;
  _QWORD v23[4];
  __int16 v24;

  v6 = *a2;
  if ((_DWORD)v6)
  {
    if (a4 <= v6)
    {
      sub_1C59B6288(a1, (uint64_t)a2, (char *)&v17);
      v9 = std::string::insert(&v17, 0, "a section ");
      v10 = v9->__r_.__value_.__r.__words[2];
      *(_OWORD *)&v18.__r_.__value_.__l.__data_ = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
      v18.__r_.__value_.__r.__words[2] = v10;
      v9->__r_.__value_.__l.__size_ = 0;
      v9->__r_.__value_.__r.__words[2] = 0;
      v9->__r_.__value_.__r.__words[0] = 0;
      v11 = std::string::append(&v18, " has an invalid sh_name (0x");
      v12 = v11->__r_.__value_.__r.__words[2];
      *(_OWORD *)__p = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
      v20 = v12;
      v11->__r_.__value_.__l.__size_ = 0;
      v11->__r_.__value_.__r.__words[2] = 0;
      v11->__r_.__value_.__r.__words[0] = 0;
      v16 = v6;
      v21[0] = __p;
      v21[2] = &v16;
      v22 = 3588;
      v23[0] = v21;
      v23[2] = ") offset which goes past the end of the section name string table";
      v24 = 770;
      v13 = operator new();
      if (!atomic_load(qword_1EF8F7238))
        llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
      v15 = qword_1EF8F7238[0];
      *(_QWORD *)v13 = off_1E81A0C88;
      llvm::Twine::str((llvm::Twine *)v23, (_QWORD *)(v13 + 8));
      *(_QWORD *)(v13 + 32) = 3;
      *(_QWORD *)(v13 + 40) = v15;
      *(_BYTE *)(v13 + 48) = 1;
      *(_BYTE *)(a5 + 16) |= 1u;
      *(_QWORD *)a5 = v13;
      if (SHIBYTE(v20) < 0)
        operator delete(__p[0]);
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v18.__r_.__value_.__l.__data_);
      if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0)
        operator delete(v17.__r_.__value_.__l.__data_);
    }
    else
    {
      v7 = (const char *)(a3 + v6);
      v8 = strlen(v7);
      *(_BYTE *)(a5 + 16) &= ~1u;
      *(_QWORD *)a5 = v7;
      *(_QWORD *)(a5 + 8) = v8;
    }
  }
  else
  {
    *(_BYTE *)(a5 + 16) &= ~1u;
    *(_QWORD *)a5 = 0;
    *(_QWORD *)(a5 + 8) = 0;
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSegmentContents(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5;
  uint64_t v6;
  std::string *v7;
  std::string::size_type v8;
  std::string *v9;
  const char *v10;
  uint64_t v11;
  unint64_t v13;
  void *v14;
  std::string *v15;
  std::string::size_type v16;
  std::string *v17;
  std::string::size_type v18;
  uint64_t v19;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  std::string v24;
  std::string v25;
  std::string v26;
  __int16 v27;
  void *__p[2];
  const char *v29;
  __int16 v30;
  std::string v31;
  _QWORD v32[2];
  uint64_t *v33;
  __int16 v34;
  _QWORD v35[2];
  const char *v36;
  __int16 v37;
  _QWORD v38[2];
  uint64_t *v39;
  __int16 v40;
  _QWORD v41[2];
  const char *v42;
  __int16 v43;
  uint64_t v44;
  uint64_t v45;

  v5 = *(_QWORD *)(a2 + 8);
  v6 = *(_QWORD *)(a2 + 32);
  v44 = v6;
  v45 = v5;
  if (__CFADD__(v5, v6))
  {
    sub_1C59BBCE0((char *)&v31, a1, a2);
    v7 = std::string::insert(&v31, 0, "program header ");
    v8 = v7->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v26.__r_.__value_.__l.__data_ = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
    v26.__r_.__value_.__r.__words[2] = v8;
    v7->__r_.__value_.__l.__size_ = 0;
    v7->__r_.__value_.__r.__words[2] = 0;
    v7->__r_.__value_.__r.__words[0] = 0;
    v9 = std::string::append(&v26, " has a p_offset (0x");
    v10 = (const char *)v9->__r_.__value_.__r.__words[2];
    *(_OWORD *)__p = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
    v29 = v10;
    v9->__r_.__value_.__l.__size_ = 0;
    v9->__r_.__value_.__r.__words[2] = 0;
    v9->__r_.__value_.__r.__words[0] = 0;
    v32[0] = __p;
    v33 = &v45;
    v34 = 3588;
    v35[0] = v32;
    v36 = ") + p_filesz (0x";
    v37 = 770;
    v38[0] = v35;
    v39 = &v44;
    v40 = 3586;
    v41[0] = v38;
    v42 = ") that cannot be represented";
    v43 = 770;
    v11 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v13 = qword_1EF8F7238[0];
    *(_QWORD *)v11 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v41, (_QWORD *)(v11 + 8));
    *(_QWORD *)(v11 + 32) = 3;
    *(_QWORD *)(v11 + 40) = v13;
    *(_BYTE *)(v11 + 48) = 1;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v11;
    if (SHIBYTE(v29) < 0)
      operator delete(__p[0]);
    if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v26.__r_.__value_.__l.__data_);
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
    {
      v14 = (void *)v31.__r_.__value_.__r.__words[0];
LABEL_20:
      operator delete(v14);
    }
  }
  else if ((unint64_t)(v6 + v5) <= a1[1])
  {
    v22 = *a1 + v5;
    *(_BYTE *)(a3 + 16) &= ~1u;
    *(_QWORD *)a3 = v22;
    *(_QWORD *)(a3 + 8) = v6;
  }
  else
  {
    sub_1C59BBCE0((char *)&v24, a1, a2);
    v15 = std::string::insert(&v24, 0, "program header  ");
    v16 = v15->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v25.__r_.__value_.__l.__data_ = *(_OWORD *)&v15->__r_.__value_.__l.__data_;
    v25.__r_.__value_.__r.__words[2] = v16;
    v15->__r_.__value_.__l.__size_ = 0;
    v15->__r_.__value_.__r.__words[2] = 0;
    v15->__r_.__value_.__r.__words[0] = 0;
    v17 = std::string::append(&v25, " has a p_offset (0x");
    v18 = v17->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v31.__r_.__value_.__l.__data_ = *(_OWORD *)&v17->__r_.__value_.__l.__data_;
    v31.__r_.__value_.__r.__words[2] = v18;
    v17->__r_.__value_.__l.__size_ = 0;
    v17->__r_.__value_.__r.__words[2] = 0;
    v17->__r_.__value_.__r.__words[0] = 0;
    v26.__r_.__value_.__r.__words[0] = (std::string::size_type)&v31;
    v26.__r_.__value_.__r.__words[2] = (std::string::size_type)&v45;
    v27 = 3588;
    __p[0] = &v26;
    v29 = ") + p_filesz (0x";
    v30 = 770;
    v32[0] = __p;
    v33 = &v44;
    v34 = 3586;
    v35[0] = v32;
    v36 = ") that is greater than the file size (0x";
    v37 = 770;
    v23 = a1[1];
    v38[0] = v35;
    v39 = &v23;
    v40 = 3586;
    v41[0] = v38;
    v42 = ")";
    v43 = 770;
    v19 = operator new();
    if (!atomic_load(qword_1EF8F7238))
      llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
    v21 = qword_1EF8F7238[0];
    *(_QWORD *)v19 = off_1E81A0C88;
    llvm::Twine::str((llvm::Twine *)v41, (_QWORD *)(v19 + 8));
    *(_QWORD *)(v19 + 32) = 3;
    *(_QWORD *)(v19 + 40) = v21;
    *(_BYTE *)(v19 + 48) = 1;
    *(_BYTE *)(a3 + 16) |= 1u;
    *(_QWORD *)a3 = v19;
    if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v31.__r_.__value_.__l.__data_);
    if (SHIBYTE(v25.__r_.__value_.__r.__words[2]) < 0)
      operator delete(v25.__r_.__value_.__l.__data_);
    if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
    {
      v14 = (void *)v24.__r_.__value_.__r.__words[0];
      goto LABEL_20;
    }
  }
}

void sub_1C59BBCE0(char *a1, _QWORD *a2, uint64_t a3)
{
  char *v5;
  char *v6;
  uint64_t v7;
  char *v8[4];
  __int16 v9;
  char *v10[4];
  __int16 v11;
  char *v12;
  char v13;
  uint64_t v14;

  v14 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::program_headers(a2, (uint64_t)&v12);
  if ((v13 & 1) != 0)
  {
    v5 = v12;
    v12 = 0;
    v8[0] = v5;
    sub_1C4D62BD4(v8, v10);
    if (v8[0])
      (*(void (**)(char *))(*(_QWORD *)v8[0] + 8))(v8[0]);
    a1[23] = 15;
    strcpy(a1, "[unknown index]");
  }
  else
  {
    v7 = 0x6DB6DB6DB6DB6DB7 * ((a3 - (uint64_t)v12) >> 3);
    v8[0] = "[index ";
    v8[2] = (char *)&v7;
    v9 = 2819;
    v10[0] = (char *)v8;
    v10[2] = "]";
    v11 = 770;
    llvm::Twine::str((llvm::Twine *)v10, a1);
  }
  if ((v13 & 1) != 0)
  {
    v6 = v12;
    v12 = 0;
    if (v6)
      (*(void (**)(char *))(*(_QWORD *)v6 + 8))(v6);
  }
}

void llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::decodeBBAddrMap(_QWORD *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  BOOL v5;
  unint64_t Unsigned;
  uint64_t v7;
  unint64_t v9;
  char *v10;
  uint64_t v11;
  unsigned int v12;
  char *v13;
  char *v14;
  BOOL v15;
  unint64_t v16;
  unint64_t v18;
  int v19;
  int v20;
  unint64_t v21;
  unint64_t v23;
  int v24;
  unint64_t v26;
  unsigned int v27;
  char v28;
  unsigned int v29;
  unsigned int v30;
  unsigned int v31;
  unint64_t v32;
  unint64_t v33;
  unsigned int v34;
  int v35;
  char *v36;
  char *v37;
  char *v38;
  uint64_t v39;
  int v40;
  char *v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void **v46;
  unint64_t v47;
  unsigned int v48;
  unsigned int v49;
  char *v50;
  char *v51;
  uint64_t v52;
  unsigned __int128 v53;
  __int128 v54;
  uint64_t v55;
  uint64_t v56[2];
  BOOL v57;
  unsigned __int8 v58;
  _QWORD v59[2];
  uint64_t *v60;
  __int16 v61;
  _QWORD v62[2];
  const char *v63;
  __int16 v64;
  _QWORD v65[2];
  unint64_t *p_ULEB128;
  __int16 v67;
  void **v68;
  void *v69;
  const char *v70;
  uint64_t v71;
  __int16 v72;
  unint64_t ULEB128;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  char v77;
  uint64_t v78;

  v78 = *MEMORY[0x1E0C80C00];
  llvm::object::ELFFile<llvm::object::ELFType<(llvm::support::endianness)1,true>>::getSectionContents(a1, a2, (uint64_t)&v75);
  if ((v77 & 1) != 0)
  {
    v42 = v75;
    *(_BYTE *)(a3 + 24) |= 1u;
    *(_QWORD *)a3 = v42;
  }
  else
  {
    v44 = a3;
    v5 = *(_BYTE *)(*a1 + 5) == 1;
    v56[0] = v75;
    v56[1] = v76;
    v57 = v5;
    v58 = 8;
    v54 = 0uLL;
    v55 = 0;
    v53 = 0uLL;
    v45 = v76;
    if (v76)
    {
      while (1)
      {
        Unsigned = llvm::DataExtractor::getUnsigned(v56, (unint64_t *)&v53, v58, (uint64_t *)&v53 + 1);
        v74 = v53;
        ULEB128 = llvm::DataExtractor::getULEB128(v56, (uint64_t *)&v53, (_QWORD *)&v53 + 1);
        v48 = ULEB128;
        v46 = (void **)Unsigned;
        if (!HIDWORD(ULEB128))
          break;
        v59[0] = "ULEB128 value at offset 0x";
        v60 = &v74;
        v61 = 3587;
        v62[0] = v59;
        v63 = " exceeds UINT32_MAX (0x";
        v64 = 770;
        v65[0] = v62;
        p_ULEB128 = &ULEB128;
        v67 = 3586;
        v68 = (void **)v65;
        v70 = ")";
        v72 = 770;
        v7 = operator new();
        if (!atomic_load(qword_1EF8F7238))
          llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
        v9 = qword_1EF8F7238[0];
        *(_QWORD *)v7 = off_1E81A0C88;
        llvm::Twine::str((llvm::Twine *)&v68, (_QWORD *)(v7 + 8));
        v10 = 0;
        v11 = 0;
        *(_QWORD *)(v7 + 32) = 3;
        *(_QWORD *)(v7 + 40) = v9;
        *(_BYTE *)(v7 + 48) = 1;
LABEL_49:
        v68 = v46;
        v70 = 0;
        v71 = 0;
        v69 = 0;
        sub_1C59C6EE4(&v69, v10, v11, 0xAAAAAAAAAAAAAAABLL * ((v11 - (uint64_t)v10) >> 2));
        sub_1C59AB80C((void **)&v54, (uint64_t)&v68);
        if (v69)
          operator delete(v69);
        if (v10)
          operator delete(v10);
        v41 = (char *)*((_QWORD *)&v53 + 1);
        if (v7 || v53 >= (unint64_t)v45)
          goto LABEL_58;
      }
      v12 = 0;
      v13 = 0;
      v14 = 0;
      v10 = 0;
      while (1)
      {
        if (*((_QWORD *)&v53 + 1))
          v15 = 1;
        else
          v15 = v12 >= v48;
        if (v15)
        {
          v7 = 0;
          v11 = (uint64_t)v14;
          goto LABEL_49;
        }
        v74 = v53;
        v16 = llvm::DataExtractor::getULEB128(v56, (uint64_t *)&v53, (_QWORD *)&v53 + 1);
        ULEB128 = v16;
        v49 = v12;
        if (HIDWORD(v16))
        {
          v59[0] = "ULEB128 value at offset 0x";
          v60 = &v74;
          v61 = 3587;
          v62[0] = v59;
          v63 = " exceeds UINT32_MAX (0x";
          v64 = 770;
          v65[0] = v62;
          p_ULEB128 = &ULEB128;
          v67 = 3586;
          v68 = (void **)v65;
          v70 = ")";
          v72 = 770;
          v7 = operator new();
          if (!atomic_load(qword_1EF8F7238))
            llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
          v18 = qword_1EF8F7238[0];
          *(_QWORD *)v7 = off_1E81A0C88;
          llvm::Twine::str((llvm::Twine *)&v68, (_QWORD *)(v7 + 8));
          v19 = 0;
          v20 = 0;
        }
        else
        {
          v20 = v16;
          v74 = v53;
          v21 = llvm::DataExtractor::getULEB128(v56, (uint64_t *)&v53, (_QWORD *)&v53 + 1);
          ULEB128 = v21;
          if (!HIDWORD(v21))
          {
            v24 = v21;
            v74 = v53;
            v23 = llvm::DataExtractor::getULEB128(v56, (uint64_t *)&v53, (_QWORD *)&v53 + 1);
            ULEB128 = v23;
            if (HIDWORD(v23))
            {
              v59[0] = "ULEB128 value at offset 0x";
              v60 = &v74;
              v61 = 3587;
              v62[0] = v59;
              v63 = " exceeds UINT32_MAX (0x";
              v64 = 770;
              v65[0] = v62;
              p_ULEB128 = &ULEB128;
              v67 = 3586;
              v68 = (void **)v65;
              v70 = ")";
              v72 = 770;
              v7 = operator new();
              if (!atomic_load(qword_1EF8F7238))
                llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
              v26 = qword_1EF8F7238[0];
              *(_QWORD *)v7 = off_1E81A0C88;
              llvm::Twine::str((llvm::Twine *)&v68, (_QWORD *)(v7 + 8));
              LODWORD(v23) = 0;
              *(_QWORD *)(v7 + 32) = 3;
              *(_QWORD *)(v7 + 40) = v26;
              *(_BYTE *)(v7 + 48) = 1;
            }
            else
            {
              v7 = 0;
            }
            v19 = v24;
            goto LABEL_27;
          }
          v59[0] = "ULEB128 value at offset 0x";
          v60 = &v74;
          v61 = 3587;
          v62[0] = v59;
          v63 = " exceeds UINT32_MAX (0x";
          v64 = 770;
          v65[0] = v62;
          p_ULEB128 = &ULEB128;
          v67 = 3586;
          v68 = (void **)v65;
          v70 = ")";
          v72 = 770;
          v7 = operator new();
          if (!atomic_load(qword_1EF8F7238))
            llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1EF8F7238, (void *(*)(void))sub_1C59D0934, (void (*)(void *))sub_1C59D0968);
          v18 = qword_1EF8F7238[0];
          *(_QWORD *)v7 = off_1E81A0C88;
          llvm::Twine::str((llvm::Twine *)&v68, (_QWORD *)(v7 + 8));
          v19 = 0;
        }
        LODWORD(v23) = 0;
        *(_QWORD *)(v7 + 32) = 3;
        *(_QWORD *)(v7 + 40) = v18;
        *(_BYTE *)(v7 + 48) = 1;
LABEL_27:
        v27 = (v23 >> 1) & 1;
        v28 = v23 & 1;
        v29 = (v23 >> 2) & 1;
        v30 = (v23 >> 3) & 1;
        if (v14 >= v13)
        {
          v32 = 0xAAAAAAAAAAAAAAABLL * ((v14 - v10) >> 2) + 1;
          if (v32 > 0x1555555555555555)
            abort();
          if (0x5555555555555556 * ((v13 - v10) >> 2) > v32)
            v32 = 0x5555555555555556 * ((v13 - v10) >> 2);
          if (0xAAAAAAAAAAAAAAABLL * ((v13 - v10) >> 2) >= 0xAAAAAAAAAAAAAAALL)
            v33 = 0x1555555555555555;
          else
            v33 = v32;
          if (v33)
          {
            if (v33 > 0x1555555555555555)
              sub_1C4764EE4();
            v34 = (v23 >> 3) & 1;
            v35 = v19;
            v47 = v33;
            v36 = (char *)operator new(12 * v33);
            v33 = v47;
            v19 = v35;
            LOBYTE(v30) = v34;
          }
          else
          {
            v36 = 0;
          }
          v37 = &v36[4 * ((v14 - v10) >> 2)];
          *(_DWORD *)v37 = v20;
          *((_DWORD *)v37 + 1) = v19;
          v37[8] = v28;
          v37[9] = v27;
          v37[10] = v29;
          v37[11] = v30;
          if (v14 == v10)
          {
            v10 = &v36[4 * ((v14 - v10) >> 2)];
            v31 = v49;
          }
          else
          {
            v38 = &v36[4 * ((v14 - v10) >> 2)];
            v31 = v49;
            do
            {
              v39 = *(_QWORD *)(v14 - 12);
              v14 -= 12;
              v40 = *((_DWORD *)v14 + 2);
              *(_QWORD *)(v38 - 12) = v39;
              v38 -= 12;
              *((_DWORD *)v38 + 2) = v40;
            }
            while (v14 != v10);
            v14 = v10;
            v10 = v38;
          }
          v13 = &v36[12 * v33];
          v11 = (uint64_t)(v37 + 12);
          if (v14)
            operator delete(v14);
        }
        else
        {
          *(_DWORD *)v14 = v20;
          *((_DWORD *)v14 + 1) = v19;
          v14[8] = v28;
          v14[9] = (v23 & 2) != 0;
          v14[10] = (v23 & 4) != 0;
          v11 = (uint64_t)(v14 + 12);
          v14[11] = (v23 & 8) != 0;
          v31 = v49;
        }
        v12 = v31 + 1;
        v14 = (char *)v11;
        if (v7)
          goto LABEL_49;
      }
    }
    v7 = 0;
    v41 = 0;
LABEL_58:
    if (v7 | (unint64_t)v41)
    {
      v50 = (char *)v7;
      v51 = v41;
      *((_QWORD *)&v53 + 1) = 0;
      sub_1C624E8DC(&v51, &v50, &v52);
      *(_BYTE *)(v44 + 24) |= 1u;
      *(_QWORD *)v44 = v52;
      v52 = 0;
      if (v50)
        (*(void (**)(char *))(*(_QWORD *)v50 + 8))(v50);
      if (v51)
        (*(void (**)(char *))(*(_QWORD *)v51 + 8))(v51);
    }
    else
    {
      *(_BYTE *)(v44 + 24) &= ~1u;
      *(_OWORD *)v44 = v54;
      *(_QWORD *)(v44 + 16) = v55;
      v54 = 0uLL;
      v55 = 0;
    }
    if (*((_QWORD *)&v53 + 1))
      (*(void (**)(_QWORD))(**((_QWORD **)&v53 + 1) + 8))(*((_QWORD *)&v53 + 1));
    v68 = (void **)&v54;
    sub_1C52E1318(&v68);
    if ((v77 & 1) != 0)
    {
      v43 = v75;
      v75 = 0;
      if (v43)
        (*(void (**)(uint64_t))(*(_QWORD *)v43 + 8))(v43);
    }
  }
}

