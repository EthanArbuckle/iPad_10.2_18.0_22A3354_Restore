void sub_1C5563940(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;

  *(_QWORD *)this = &off_1E816F318;
  v2 = (char *)*((_QWORD *)this + 37);
  if (v2 != (char *)this + 312)
    free(v2);
  *(_QWORD *)this = &unk_1E8144BE8;
  v3 = (char *)*((_QWORD *)this + 22);
  if (v3 != (char *)this + 192)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 13);
  if (v4 != (char *)this + 120)
    free(v4);
  v5 = (char *)*((_QWORD *)this + 4);
  if (v5 != (char *)this + 48)
    free(v5);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C55639EC()
{
  return "GPU conditional flattener";
}

void *sub_1C55639FC(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *a2)
{
  llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::MachineLoopInfo::ID);
  return sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::MachineLoopInfo::ID);
}

BOOL sub_1C5563A40(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  _QWORD *v4;
  void **v5;
  void *v6;
  int32x2_t *v7;
  llvm::TargetInstrInfo *v8;
  void (**v9)(void);
  int v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t *v14;
  unint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  _QWORD *v22;
  uint64_t i;
  uint64_t v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t *v27;
  uint64_t v28;
  __int128 v29;
  unint64_t v30;
  void **v31;
  void **v32;
  void *v33;
  uint64_t v34;
  uint64_t v35;
  __n128 v36;
  unsigned int v37;
  char *v38;
  int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  _QWORD *v43;
  char v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  __int16 v49;
  __int16 v50;
  uint64_t v51;
  unsigned int v52;
  BOOL v53;
  int v54;
  uint64_t *v56;
  uint64_t *v57;
  _WORD *v58;
  uint64_t v59;
  _WORD *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned __int8 *v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t *v74;
  uint64_t v75;
  uint64_t v76;
  int v77;
  __int16 v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  unsigned int v82;
  uint64_t v83;
  _QWORD *v84;
  int v85;
  int v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  _QWORD *v90;
  int v91;
  uint64_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  char *v96;
  char *v97;
  unsigned __int8 *v98;
  char *v99;
  unsigned __int8 *v100;
  unsigned __int8 *v101;
  __int16 v102;
  unsigned __int8 *v103;
  unsigned __int8 *v104;
  int v105;
  uint64_t v106;
  uint64_t v107;
  unsigned __int8 *v108;
  int v109;
  uint64_t v110;
  _WORD *v111;
  int v112;
  _WORD *v113;
  uint64_t v114;
  uint64_t *v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  _QWORD *v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t *v124;
  uint64_t *v125;
  uint64_t v126;
  uint64_t *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t *v130;
  uint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  char v138;
  int v139;
  char v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t *v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  _QWORD *v152;
  uint64_t v153;
  uint64_t v154;
  unsigned int v155;
  int v156;
  uint64_t v158;
  _BOOL8 v159;
  uint64_t v160;
  unsigned int v161;
  int v162;
  unsigned __int8 *v164;
  uint64_t v165;
  int v166;
  uint64_t v167;
  unsigned int v168;
  uint64_t v169;
  unsigned __int8 *v170;
  int v171;
  int v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  _QWORD *v180;
  uint64_t v181;
  unsigned __int8 *v182;
  unsigned __int8 **v183;
  unsigned __int8 *v184;
  int v185;
  uint64_t v186;
  uint64_t v187;
  int v188;
  uint64_t v189;
  int v190;
  uint64_t v191;
  unsigned __int8 *v192;
  uint64_t *v193;
  uint64_t *v194;
  uint64_t v195;
  uint64_t v196;
  __int16 v197;
  unsigned __int8 *v198;
  unsigned __int8 *v199;
  uint64_t v200;
  uint64_t v201;
  unsigned __int8 *v202;
  uint64_t v203;
  unsigned int v204;
  int v205;
  uint64_t v207;
  unsigned int v208;
  int v209;
  unsigned __int8 *v211;
  uint64_t *v212;
  uint64_t *v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unsigned __int8 *v217;
  int v218;
  uint64_t v219;
  _QWORD *v220;
  uint64_t v221;
  int v222;
  uint64_t v223;
  int v224;
  uint64_t v225;
  uint64_t v226;
  unsigned int v227;
  int v228;
  unsigned __int8 *v230;
  _QWORD *v231;
  uint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  int v238;
  uint64_t v239;
  int v240;
  uint64_t v241;
  __int16 v242;
  unsigned __int8 *v243;
  unsigned __int8 *v244;
  uint64_t v245;
  uint64_t v246;
  unsigned __int8 *v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  int v251;
  uint64_t v252;
  int v253;
  uint64_t v254;
  uint64_t v255;
  uint64_t v256;
  unsigned int v257;
  int v258;
  unsigned __int8 *v260;
  uint64_t v261;
  _QWORD *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  int v266;
  uint64_t v267;
  int v268;
  uint64_t v269;
  uint64_t v270;
  unsigned int v271;
  int v272;
  uint64_t v274;
  uint64_t v275;
  unsigned __int8 *v276;
  uint64_t v277;
  uint64_t *v278;
  uint64_t v279;
  uint64_t v280;
  unsigned int v281;
  int v282;
  unsigned __int8 *v284;
  _WORD *v285;
  uint64_t v286;
  _WORD *v287;
  uint64_t v288;
  int v289;
  int v290;
  int v291;
  int v292;
  int v293;
  int v294;
  int v295;
  _WORD *v296;
  int v297;
  int v298;
  int v299;
  int v300;
  unsigned int v301;
  uint64_t *v302;
  char *v303;
  unsigned __int16 *v304;
  uint64_t v305;
  uint64_t *v306;
  int v307;
  int v308;
  BOOL v309;
  int v310;
  unint64_t v311;
  char *v312;
  _QWORD *v313;
  char *v314;
  uint64_t v315;
  unint64_t v316;
  uint64_t v317;
  unint64_t v318;
  char *v319;
  char *v320;
  char *v321;
  uint64_t *v322;
  uint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t *v327;
  uint64_t *v328;
  unsigned int v329;
  unsigned __int16 *v330;
  unsigned int v331;
  uint64_t v332;
  _QWORD *v333;
  uint64_t v334;
  int v335;
  uint64_t v336;
  int v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;
  _QWORD *v341;
  uint64_t v342;
  _QWORD *v343;
  uint64_t v344;
  int v345;
  uint64_t v346;
  unsigned int v347;
  uint64_t v348;
  uint64_t *v349;
  int v350;
  int v351;
  uint64_t v352;
  uint64_t v353;
  int v354;
  uint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  uint64_t v360;
  uint64_t v361;
  uint64_t v362;
  int v363;
  _QWORD *v364;
  void **v365;
  void **v366;
  unint64_t v367;
  unint64_t v368;
  uint64_t v369;
  void *v370;
  uint64_t v372;
  int v373;
  int v374;
  int v375;
  int v376;
  _QWORD *v377;
  _QWORD *v378;
  int v379;
  _WORD *v380;
  uint64_t *v381;
  uint64_t *v382;
  int v383;
  int v384;
  int v385;
  uint64_t v386;
  uint64_t v387;
  _QWORD *v388;
  uint64_t v389;
  uint64_t v390;
  uint64_t v391;
  void *__p[2];
  __int128 v393;
  __int128 v394;
  unsigned __int8 *v395;
  unsigned __int8 *v396;
  unsigned __int8 *v397;
  uint64_t v398;
  unsigned __int8 v399;
  void *v400;
  uint64_t v401;
  uint64_t v402;
  void **v403;
  uint64_t v404;

  v3 = a1;
  v404 = *MEMORY[0x1E0C80C00];
  v4 = (_QWORD *)(a1 + 696);
  *(_QWORD *)(a1 + 696) = -2;
  *(_QWORD *)(a1 + 280) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 104))(*(_QWORD *)(a2 + 16));
  v5 = **(void ****)(v3 + 8);
  do
  {
    v6 = *v5;
    v5 += 2;
  }
  while (v6 != &llvm::MachineLoopInfo::ID);
  v7 = (int32x2_t *)(*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v5 - 1) + 96))(*(v5 - 1), &llvm::MachineLoopInfo::ID);
  *(_QWORD *)(v3 + 288) = v7;
  v8 = *(llvm::TargetInstrInfo **)(v3 + 280);
  v400 = &off_1E816F3D8;
  v401 = v3;
  v403 = &v400;
  llvm::foldBlocksForCFGProcessing(a2, v7, v8, (uint64_t)&v400);
  if (v403 == &v400)
  {
    v9 = (void (**)(void))((char *)v400 + 32);
  }
  else
  {
    if (!v403)
      goto LABEL_8;
    v9 = (void (**)(void))((char *)*v403 + 40);
  }
  (*v9)();
LABEL_8:
  llvm::MachineFunction::RenumberBlocks((llvm::MachineFunction *)a2, 0);
  v10 = (***(uint64_t (****)(_QWORD, uint64_t))(v3 + 264))(*(_QWORD *)(v3 + 264), a2);
  *(_DWORD *)(v3 + 272) = v10;
  v11 = *(_QWORD *)(a2 + 48);
  if (!v11)
  {
    v11 = (*(uint64_t (**)(_QWORD, uint64_t, uint64_t))(**(_QWORD **)(a2 + 8) + 216))(*(_QWORD *)(a2 + 8), a2 + 128, a2);
    *(_QWORD *)(a2 + 48) = v11;
    v10 = *(_DWORD *)(v3 + 272);
  }
  *(_DWORD *)(v11 + 8) = v10;
  v12 = *(_QWORD *)(a2 + 112) - *(_QWORD *)(a2 + 104);
  v13 = v12 & 0x7FFFFFFF8;
  if ((v12 & 0x7FFFFFFF8) == 8)
    return v13 != 8;
  v388 = v4;
  v389 = v12 & 0x7FFFFFFF8;
  v14 = (uint64_t *)(v3 + 296);
  *(_DWORD *)(v3 + 304) = 0;
  v15 = (v12 >> 3);
  if (!(v12 >> 3))
    goto LABEL_19;
  v16 = v12 >> 3;
  if (v15 <= *(unsigned int *)(v3 + 308))
  {
    LODWORD(v17) = 0;
LABEL_16:
    v18 = *v14 + 48 * v15;
    v19 = *v14 + 48 * v17;
    do
    {
      *(_WORD *)v19 &= 0xC000u;
      *(_OWORD *)(v19 + 8) = 0uLL;
      *(_OWORD *)(v19 + 24) = 0uLL;
      *(_DWORD *)(v19 + 40) = -1;
      v19 += 48;
    }
    while (v19 != v18);
    goto LABEL_18;
  }
  llvm::SmallVectorBase<unsigned int>::grow_pod(v3 + 296, v3 + 312, v15, 48);
  v17 = *(unsigned int *)(v3 + 304);
  if (v15 != v17)
    goto LABEL_16;
LABEL_18:
  *(_DWORD *)(v3 + 304) = v16;
LABEL_19:
  *(_BYTE *)(v3 + 256) = 0;
  v393 = 0u;
  v394 = 0u;
  *(_OWORD *)__p = 0u;
  v20 = *(_QWORD *)(v3 + 288);
  v22 = *(_QWORD **)(v20 + 272);
  v21 = *(_QWORD **)(v20 + 280);
  if (v22 != v21)
  {
    do
      sub_1C51DF784((uint64_t)__p, v22++);
    while (v22 != v21);
    for (i = *((_QWORD *)&v394 + 1); *((_QWORD *)&v394 + 1); i = *((_QWORD *)&v394 + 1))
    {
      v24 = *(_QWORD *)(*(_QWORD *)((char *)__p[1] + (((unint64_t)(i + v394 - 1) >> 6) & 0x3FFFFFFFFFFFFF8))
                      + 8 * ((i + v394 - 1) & 0x1FF));
      v25 = sub_1C556566C(v24);
      if (v25)
      {
        *(_WORD *)(*v14 + 48 * *(int *)(v25 + 24)) |= 0x200u;
        v26 = *(uint64_t **)(v25 + 64);
        v27 = *(uint64_t **)(v25 + 72);
        while (v26 != v27)
        {
          v28 = *v26++;
          *(_WORD *)(*v14 + 48 * *(int *)(v28 + 24)) |= 0x400u;
        }
      }
      v29 = v394;
      --*((_QWORD *)&v394 + 1);
      v30 = (((_QWORD)v393 - (unint64_t)__p[1]) << 6) - 1;
      if ((void *)v393 == __p[1])
        v30 = 0;
      if (v30 - (*((_QWORD *)&v29 + 1) + (_QWORD)v29) + 1 >= 0x400)
      {
        operator delete(*(void **)(v393 - 8));
        *(_QWORD *)&v393 = v393 - 8;
      }
      v31 = *(void ***)(v24 + 8);
      v32 = *(void ***)(v24 + 16);
      while (v31 != v32)
      {
        v33 = *v31++;
        v400 = v33;
        sub_1C51DF784((uint64_t)__p, &v400);
      }
    }
  }
  v390 = a2;
  v34 = *(_QWORD *)(a2 + 328);
  v35 = *v14 + 48 * *(int *)(v34 + 24);
  *(_QWORD *)(v35 + 8) = v34;
  v400 = &v402;
  v401 = 0x1000000000;
  LODWORD(v396) = 1;
  v397 = 0;
  v398 = v35;
  v399 = 0;
  v36 = sub_1C47E9C18((uint64_t)&v400, (unint64_t)&v396);
  v37 = v401;
  v391 = v3;
  if ((_DWORD)v401)
  {
    while (1)
    {
      v38 = (char *)v400 + 32 * v37;
      v39 = *((_DWORD *)v38 - 8);
      v40 = *((_QWORD *)v38 - 3);
      v41 = *((_QWORD *)v38 - 2);
      v42 = *(v38 - 8);
      LODWORD(v401) = --v37;
      if (!v39)
      {
        if ((*(_WORD *)v41 & 0x30) == 0x10)
        {
          *(_WORD *)v41 |= 0x40u;
          *(_WORD *)v40 |= 0x100u;
          *(_DWORD *)(v40 + 40) = 0;
          v48 = *(_QWORD *)(v40 + 8);
          if (((*(_QWORD *)(v48 + 96) - *(_QWORD *)(v48 + 88)) & 0x7FFFFFFF8) == 8)
            *(_QWORD *)(v40 + 32) = v48;
        }
        if ((*(_WORD *)v41 & 0x10) == 0)
        {
          LODWORD(v396) = 1;
          v397 = 0;
          v398 = v41;
          v399 = 0;
          v36 = sub_1C47E9C18((uint64_t)&v400, (unint64_t)&v396);
        }
        goto LABEL_117;
      }
      v43 = *(_QWORD **)(v41 + 8);
      if (v39 == 2)
        break;
      if (v39 == 1)
      {
        if ((*(_WORD *)v41 & 0x10) == 0)
        {
          *(_WORD *)v41 |= 0x10u;
          v44 = *(_BYTE *)(v3 + 256);
          if (v44)
          {
            v46 = v43[11];
            v45 = v43[12];
            v47 = v45 - v46;
          }
          else
          {
            v46 = v43[11];
            v45 = v43[12];
            v47 = v45 - v46;
            if (((v45 - v46) & 0x7FFFFFFF8) == 0x10 || ((v43[9] - v43[8]) & 0x7FFFFFFF0) != 0)
              *(_BYTE *)(v3 + 256) = 1;
          }
          if ((v47 & 0x7FFFFFFF8) == 0x10)
          {
            if (v46 == v45)
            {
LABEL_71:
              *(_WORD *)v41 |= 0x800u;
            }
            else
            {
              while ((*(_WORD *)(*v14 + 48 * *(int *)(*(_QWORD *)v46 + 24)) & 0x210) == 0)
              {
                v46 += 8;
                if (v46 == v45)
                  goto LABEL_71;
              }
            }
          }
          LODWORD(v396) = 2;
          v397 = 0;
          v398 = v41;
          v399 = v44 ^ 1;
          v36 = sub_1C47E9C18((uint64_t)&v400, (unint64_t)&v396);
          v62 = v43[11];
          v61 = v43[12];
          while (v61 != v62)
          {
            v63 = *(_QWORD *)(v61 - 8);
            v61 -= 8;
            v64 = *v14 + 48 * *(int *)(v63 + 24);
            *(_QWORD *)(v64 + 8) = v63;
            LODWORD(v396) = 0;
            v397 = (unsigned __int8 *)v41;
            v398 = v64;
            v399 = 0;
            v36 = sub_1C47E9C18((uint64_t)&v400, (unint64_t)&v396);
          }
        }
        goto LABEL_117;
      }
LABEL_118:
      if (!v37)
        goto LABEL_350;
    }
    v49 = *(_WORD *)v41;
    v50 = *(_WORD *)v41 | 0x20;
    *(_WORD *)v41 = v50;
    if (((v43[12] - v43[11]) & 0x7FFFFFFF8) == 0)
    {
      *(_QWORD *)(v41 + 32) = v43;
      *(_DWORD *)(v41 + 40) = 0;
    }
    if ((v49 & 0x800) == 0)
    {
      if ((v49 & 0x40) == 0)
      {
        if ((v49 & 0x80) != 0)
        {
          v51 = v43[7];
          if (v43 + 6 == (_QWORD *)v51)
          {
LABEL_57:
            v396 = 0;
          }
          else
          {
            while (1)
            {
              v52 = **(unsigned __int16 **)(v51 + 16);
              v53 = v52 > 0x17;
              v54 = (1 << v52) & 0x83E000;
              if (v53 || v54 == 0)
                break;
              v51 = *(_QWORD *)(v51 + 8);
              if ((_QWORD *)v51 == v43 + 6)
                goto LABEL_57;
            }
            v65 = *(unsigned __int8 **)(v51 + 56);
            v396 = v65;
            if (v65)
              llvm::MetadataTracking::track((uint64_t)&v396, v65, 2);
          }
          (*(void (**)(_QWORD, _QWORD *, BOOL, unsigned __int8 **, _QWORD, _QWORD, __n128))(**(_QWORD **)(v3 + 264) + 40))(*(_QWORD *)(v3 + 264), v43, v42 != 0, &v396, *(unsigned int *)(v3 + 272), *(_QWORD *)(v3 + 280), v36);
          if (!v42)
            *(_WORD *)v41 |= 0x2000u;
          if (v396)
            llvm::MetadataTracking::untrack((uint64_t)&v396, v396);
          v50 = *(_WORD *)v41;
        }
        if ((v50 & 0x300) == 0x200)
        {
          v66 = v43[8];
          v67 = v43[9];
          if (v66 != v67)
          {
            v68 = *v14;
            do
            {
              v69 = v68 + 48 * *(int *)(*(_QWORD *)v66 + 24);
              v71 = *(_QWORD *)(v69 + 32);
              v70 = (_QWORD *)(v69 + 32);
              if (!v71)
                *v70 = *(_QWORD *)v66;
              v66 += 8;
            }
            while (v66 != v67);
          }
          goto LABEL_116;
        }
        if (((v43[12] - v43[11]) & 0x7FFFFFFF0) == 0)
        {
          v72 = v43[9] - v43[8];
          if ((v50 & 0x100) != 0 || (v72 & 0x7FFFFFFF8) != 8)
            goto LABEL_91;
          (*(void (**)(_QWORD, _QWORD *, _QWORD, __n128))(**(_QWORD **)(v3 + 280) + 264))(*(_QWORD *)(v3 + 280), v43, 0, v36);
          v92 = v43[8];
          if (((v43[9] - v92) & 0x7FFFFFFF8) == 8)
          {
            v93 = *(_DWORD *)(*(_QWORD *)v92 + 24);
            if ((*(_WORD *)(*v14 + 48 * v93) & 0x840) == 0)
            {
              v94 = *v14 + 48 * v93;
              *(_QWORD *)(v94 + 32) = *(_QWORD *)(v41 + 32);
              *(_DWORD *)(v94 + 40) = *(_DWORD *)(v41 + 40);
            }
          }
LABEL_117:
          v37 = v401;
          goto LABEL_118;
        }
        v72 = v43[9] - v43[8];
LABEL_91:
        if ((v72 & 0x7FFFFFFF8) == 0x10)
        {
          v50 |= 0x1000u;
          *(_WORD *)v41 = v50;
          v73 = (uint64_t *)v43[8];
          v74 = (uint64_t *)v43[9];
          if (v73 != v74)
          {
            v75 = *v14;
            do
            {
              v76 = *v73;
              v77 = *(_DWORD *)(*v73 + 24);
              v78 = *(_WORD *)(v75 + 48 * v77);
              if ((v78 & 0x800) == 0)
              {
                *(_DWORD *)(v75 + 48 * v77 + 40) = *(_DWORD *)(v41 + 40) + 1;
                if ((v78 & 0x400) == 0)
                  *(_QWORD *)(v75 + 48 * v77 + 32) = v76;
              }
              ++v73;
            }
            while (v73 != v74);
            v50 = *(_WORD *)v41;
          }
          if ((v50 & 0x100) == 0)
          {
LABEL_116:
            (*(void (**)(_QWORD, _QWORD *, _QWORD, __n128))(**(_QWORD **)(v3 + 280) + 264))(*(_QWORD *)(v3 + 280), v43, 0, v36);
            goto LABEL_117;
          }
        }
        if ((v50 & 0x500) == 0x400)
        {
          sub_1C6278648((uint64_t)&v396, *(uint64_t **)(v3 + 264), v43, *(llvm::TargetInstrInfo **)(v3 + 280));
          v197 = *(_WORD *)v41 & 0xFFFE | v399;
          *(_WORD *)v41 = v197;
          v198 = v396;
          v199 = v397;
          *(_QWORD *)(v41 + 16) = v396;
          *(_QWORD *)(v41 + 24) = v199;
          v200 = *(_QWORD *)(v41 + 8);
          v201 = *(_QWORD *)(v200 + 32) + 320;
          v202 = *(unsigned __int8 **)(v200 + 8);
          if (v202 == (unsigned __int8 *)v201)
            v202 = 0;
          if (v199 == v202)
            *(_WORD *)v41 = v197 | 2;
          if ((_BYTE)v398)
          {
            *(_QWORD *)(v41 + 16) = v199;
            *(_QWORD *)(v41 + 24) = v198;
          }
          v203 = v43[7];
          if (v43 + 6 == (_QWORD *)v203)
          {
LABEL_237:
            v395 = 0;
          }
          else
          {
            while (1)
            {
              v204 = **(unsigned __int16 **)(v203 + 16);
              v53 = v204 > 0x17;
              v205 = (1 << v204) & 0x83E000;
              if (v53 || v205 == 0)
                break;
              v203 = *(_QWORD *)(v203 + 8);
              if ((_QWORD *)v203 == v43 + 6)
                goto LABEL_237;
            }
            v211 = *(unsigned __int8 **)(v203 + 56);
            v395 = v211;
            if (v211)
              llvm::MetadataTracking::track((uint64_t)&v395, v211, 2);
          }
          v212 = (uint64_t *)v43[11];
          v213 = (uint64_t *)v43[12];
          if (v212 == v213)
          {
            v214 = 0;
          }
          else
          {
            v214 = 0;
            do
            {
              v216 = *v212++;
              v215 = v216;
              if ((*(_WORD *)(*v14 + 48 * *(int *)(v216 + 24)) & 0x200) != 0)
                v214 = v215;
            }
            while (v212 != v213);
          }
          v248 = *(_QWORD *)(v41 + 16);
          v249 = v248;
          if (v248 == v214)
            v249 = *(_QWORD *)(v41 + 24);
          (*(void (**)(_QWORD, _QWORD *, uint64_t, uint64_t, unsigned __int8 **, _QWORD, BOOL, _QWORD, _QWORD))(**(_QWORD **)(v3 + 264) + 56))(*(_QWORD *)(v3 + 264), v43, v214, v249, &v395, *(unsigned int *)(v3 + 272), v248 == v214, *(unsigned int *)(v41 + 40), *(_QWORD *)(v3 + 280));
          v250 = v43[8];
          v251 = *(_DWORD *)(*(_QWORD *)v250 + 24);
          v252 = *(_QWORD *)(v3 + 296);
          if ((*(_WORD *)(v252 + 48 * v251) & 0x400) != 0)
            *(_QWORD *)(v252 + 48 * v251 + 32) = 0;
          if (((v43[9] - v250) & 0x7FFFFFFF8) == 8)
          {
            v253 = *(_DWORD *)(*(_QWORD *)v250 + 24);
            if ((*(_WORD *)(v252 + 48 * v253) & 0x840) == 0)
            {
              v254 = v252 + 48 * v253;
              *(_QWORD *)(v254 + 32) = *(_QWORD *)(v41 + 32);
              *(_DWORD *)(v254 + 40) = *(_DWORD *)(v41 + 40);
            }
          }
          v182 = v395;
          if (!v395)
            goto LABEL_117;
          v183 = &v395;
LABEL_210:
          llvm::MetadataTracking::untrack((uint64_t)v183, v182);
          goto LABEL_117;
        }
        if ((v50 & 0x100) == 0)
        {
          if ((v50 & 0x80) == 0)
            goto LABEL_116;
          goto LABEL_117;
        }
        v95 = v35;
        v96 = (char *)v43[11];
        v97 = (char *)v43[12];
        if (v96 == v97)
        {
          v98 = 0;
        }
        else
        {
          v98 = 0;
          v99 = (char *)v43[11];
          do
          {
            v101 = *(unsigned __int8 **)v99;
            v99 += 8;
            v100 = v101;
            if ((*(_WORD *)(*v14 + 48 * *((int *)v101 + 6)) & 0x40) != 0)
              v98 = v100;
          }
          while (v99 != v97);
        }
        if (((v97 - v96) & 0x7FFFFFFF8) == 0x10)
        {
          sub_1C6278648((uint64_t)&v396, *(uint64_t **)(v3 + 264), v43, *(llvm::TargetInstrInfo **)(v3 + 280));
          v242 = *(_WORD *)v41 & 0xFFFE | v399;
          *(_WORD *)v41 = v242;
          v244 = v396;
          v243 = v397;
          *(_QWORD *)(v41 + 16) = v396;
          *(_QWORD *)(v41 + 24) = v243;
          v245 = *(_QWORD *)(v41 + 8);
          v246 = *(_QWORD *)(v245 + 32) + 320;
          v247 = *(unsigned __int8 **)(v245 + 8);
          if (v247 == (unsigned __int8 *)v246)
            v247 = 0;
          if (v243 == v247)
            *(_WORD *)v41 = v242 | 2;
          if ((_BYTE)v398)
          {
            *(_QWORD *)(v41 + 16) = v243;
            *(_QWORD *)(v41 + 24) = v244;
            v243 = v244;
          }
          v159 = v98 == v243;
        }
        else
        {
          v159 = 1;
        }
        v160 = v43[7];
        if (v43 + 6 == (_QWORD *)v160)
        {
LABEL_190:
          v396 = 0;
        }
        else
        {
          while (1)
          {
            v161 = **(unsigned __int16 **)(v160 + 16);
            v53 = v161 > 0x17;
            v162 = (1 << v161) & 0x83E000;
            if (v53 || v162 == 0)
              break;
            v160 = *(_QWORD *)(v160 + 8);
            if ((_QWORD *)v160 == v43 + 6)
              goto LABEL_190;
          }
          v164 = *(unsigned __int8 **)(v160 + 56);
          v396 = v164;
          if (v164)
            llvm::MetadataTracking::track((uint64_t)&v396, v164, 2);
        }
        v165 = *(_QWORD *)(v391 + 288);
        v166 = *(_DWORD *)(v165 + 264);
        if (v166)
        {
          v167 = *(_QWORD *)(v165 + 248);
          v168 = v166 - 1;
          v169 = (v166 - 1) & ((v98 >> 4) ^ (v98 >> 9));
          v170 = *(unsigned __int8 **)(v167 + 16 * v169);
          if (v98 == v170)
          {
LABEL_198:
            v173 = *(_QWORD *)(v167 + 16 * v169 + 8);
LABEL_200:
            v174 = sub_1C556566C(v173);
            LODWORD(v372) = *(_DWORD *)(v41 + 40);
            (*(void (**)(_QWORD, _QWORD *, unsigned __int8 *, uint64_t, unsigned __int8 **, _QWORD, BOOL, _BOOL8, uint64_t, _QWORD))(**(_QWORD **)(v391 + 264) + 48))(*(_QWORD *)(v391 + 264), v43, v98, v174, &v396, *(unsigned int *)(v391 + 272), ((v43[12] - v43[11]) & 0x7FFFFFFF8) == 16, v159, v372, *(_QWORD *)(v391 + 280));
            if ((*(_WORD *)v41 & 0x200) != 0)
            {
              v176 = v43[8];
              v177 = v43[9];
              v3 = v391;
              v35 = v95;
              if (v176 != v177)
              {
                v178 = *v14;
                do
                {
                  v179 = v178 + 48 * *(int *)(*(_QWORD *)v176 + 24);
                  v181 = *(_QWORD *)(v179 + 32);
                  v180 = (_QWORD *)(v179 + 32);
                  if (!v181)
                    *v180 = *(_QWORD *)v176;
                  v176 += 8;
                }
                while (v176 != v177);
              }
            }
            else
            {
              v3 = v391;
              v35 = v95;
              if ((*(_WORD *)v41 & 0x1000) == 0)
              {
                v175 = *v14 + 48 * *(int *)(*(_QWORD *)v43[8] + 24);
                *(_QWORD *)(v175 + 32) = v43;
                *(_DWORD *)(v175 + 40) = 0;
              }
            }
            v182 = v396;
            if (!v396)
              goto LABEL_117;
            v183 = &v396;
            goto LABEL_210;
          }
          v171 = 1;
          while (v170 != (unsigned __int8 *)-4096)
          {
            v172 = v169 + v171++;
            v169 = v172 & v168;
            v170 = *(unsigned __int8 **)(v167 + 16 * v169);
            if (v98 == v170)
              goto LABEL_198;
          }
        }
        v173 = 0;
        goto LABEL_200;
      }
      v56 = (uint64_t *)v43[8];
      v57 = (uint64_t *)v43[9];
      if (v56 == v57)
      {
        v58 = 0;
      }
      else
      {
        v58 = 0;
        do
        {
          v59 = *v56++;
          v60 = (_WORD *)(*v14 + 48 * *(int *)(v59 + 24));
          if ((*v60 & 0x100) == 0)
            v58 = v60;
        }
        while (v56 != v57);
      }
      v79 = *(_QWORD *)(v3 + 288);
      v80 = *(_DWORD *)(v79 + 264);
      if (v80)
      {
        v81 = *(_QWORD *)(v79 + 248);
        v82 = v80 - 1;
        v83 = (v80 - 1) & ((v43 >> 4) ^ (v43 >> 9));
        v84 = *(_QWORD **)(v81 + 16 * v83);
        if (v43 == v84)
        {
LABEL_110:
          v87 = *(_QWORD *)(v81 + 16 * v83 + 8);
LABEL_112:
          v88 = sub_1C556566C(v87);
          if (v88)
          {
            v89 = *v14 + 48 * *(int *)(v88 + 24);
            v90 = (_QWORD *)(v89 + 32);
            v91 = *(_DWORD *)(v89 + 40);
          }
          else
          {
            v91 = 0;
            v90 = v388;
          }
          *((_QWORD *)v58 + 4) = *v90;
          *((_DWORD *)v58 + 10) = v91;
          *v58 |= 0x80u;
          goto LABEL_116;
        }
        v85 = 1;
        while (v84 != (_QWORD *)-4096)
        {
          v86 = v83 + v85++;
          v83 = v86 & v82;
          v84 = *(_QWORD **)(v81 + 16 * v83);
          if (v43 == v84)
            goto LABEL_110;
        }
      }
      v87 = 0;
      goto LABEL_112;
    }
    sub_1C6278648((uint64_t)&v396, *(uint64_t **)(v3 + 264), v43, *(llvm::TargetInstrInfo **)(v3 + 280));
    v102 = *(_WORD *)v41 & 0xFFFE | v399;
    *(_WORD *)v41 = v102;
    v104 = v396;
    v103 = v397;
    *(_QWORD *)(v41 + 16) = v396;
    *(_QWORD *)(v41 + 24) = v103;
    v105 = v398;
    v106 = *(_QWORD *)(v41 + 8);
    v107 = *(_QWORD *)(v106 + 32) + 320;
    v108 = *(unsigned __int8 **)(v106 + 8);
    if (v108 == (unsigned __int8 *)v107)
      v108 = 0;
    if (v103 == v108)
      *(_WORD *)v41 = v102 | 2;
    v109 = *((_DWORD *)v104 + 6);
    v110 = *v14;
    v111 = (_WORD *)(*v14 + 48 * v109);
    v112 = *((_DWORD *)v103 + 6);
    if ((*v111 & 0x1000) != 0)
    {
      v383 = *((_DWORD *)v104 + 6);
      v387 = v35;
      v150 = v110 + 48 * v109;
      v153 = *(_QWORD *)(v150 + 8);
      v152 = (_QWORD *)(v150 + 8);
      v151 = v153;
      *(_QWORD *)(v41 + 16) = v103;
      *(_QWORD *)(v41 + 24) = v153;
      v154 = v43[7];
      if (v43 + 6 == (_QWORD *)v154)
      {
LABEL_180:
        v395 = 0;
        v158 = v151;
      }
      else
      {
        while (1)
        {
          v155 = **(unsigned __int16 **)(v154 + 16);
          v53 = v155 > 0x17;
          v156 = (1 << v155) & 0x83E000;
          if (v53 || v156 == 0)
            break;
          v154 = *(_QWORD *)(v154 + 8);
          if ((_QWORD *)v154 == v43 + 6)
            goto LABEL_180;
        }
        v184 = *(unsigned __int8 **)(v154 + 56);
        v395 = v184;
        v158 = v151;
        if (v184)
        {
          v289 = v105;
          v290 = v112;
          llvm::MetadataTracking::track((uint64_t)&v395, v184, 2);
          v112 = v290;
          v105 = v289;
          v158 = *v152;
        }
      }
      v185 = v112;
      (*(void (**)(_QWORD, _QWORD *, _QWORD, BOOL, BOOL, uint64_t, unsigned __int8 **, _QWORD, _QWORD))(**(_QWORD **)(v391 + 264) + 16))(*(_QWORD *)(v391 + 264), v43, *(_QWORD *)(v110 + 48 * v112 + 8), v42 != 0, v105 == 0, v158, &v395, *(unsigned int *)(v391 + 272), *(_QWORD *)(v391 + 280));
      if (!v42)
        *(_WORD *)v41 |= 0x2000u;
      (*(void (**)(_QWORD, _QWORD, _QWORD, unsigned __int8 **, _QWORD, _QWORD))(**(_QWORD **)(v391 + 264)
                                                                                         + 32))(*(_QWORD *)(v391 + 264), *(_QWORD *)(v110 + 48 * v185 + 32), *v152, &v395, *(unsigned int *)(v391 + 272), *(_QWORD *)(v391 + 280));
      v186 = *(_QWORD *)(v391 + 296);
      v187 = *(_QWORD *)(v186 + 48 * *(int *)(v151 + 24) + 32);
      *(_QWORD *)(v41 + 32) = v187;
      v188 = *(_DWORD *)(v110 + 48 * v383 + 40);
      *(_DWORD *)(v41 + 40) = v188;
      v189 = v43[8];
      if (((v43[9] - v189) & 0x7FFFFFFF8) == 8)
      {
        v190 = *(_DWORD *)(*(_QWORD *)v189 + 24);
        if ((*(_WORD *)(v186 + 48 * v190) & 0x840) == 0)
        {
          v191 = v186 + 48 * v190;
          *(_QWORD *)(v191 + 32) = v187;
          *(_DWORD *)(v191 + 40) = v188;
        }
      }
      v192 = v395;
      v35 = v387;
    }
    else
    {
      v113 = (_WORD *)(v110 + 48 * v112);
      v114 = v110 + 48 * v109;
      v117 = *(_QWORD *)(v114 + 32);
      v115 = (uint64_t *)(v114 + 32);
      v116 = v117;
      if ((*v113 & 0x1000) != 0)
      {
        v193 = *(uint64_t **)(v116 + 88);
        v194 = *(uint64_t **)(v116 + 96);
        if (v193 == v194)
        {
          v116 = 0;
        }
        else
        {
          v116 = 0;
          do
          {
            v196 = *v193++;
            v195 = v196;
            if ((*(_WORD *)(v110 + 48 * *(int *)(v196 + 24)) & 0x1000) != 0)
              v116 = v195;
          }
          while (v193 != v194);
        }
        v226 = v43[7];
        v386 = v35;
        v382 = v115;
        if (v43 + 6 == (_QWORD *)v226)
        {
LABEL_267:
          v395 = 0;
        }
        else
        {
          while (1)
          {
            v227 = **(unsigned __int16 **)(v226 + 16);
            v53 = v227 > 0x17;
            v228 = (1 << v227) & 0x83E000;
            if (v53 || v228 == 0)
              break;
            v226 = *(_QWORD *)(v226 + 8);
            if ((_QWORD *)v226 == v43 + 6)
              goto LABEL_267;
          }
          v230 = *(unsigned __int8 **)(v226 + 56);
          v395 = v230;
          if (v230)
          {
            v373 = v105;
            v291 = v109;
            v292 = v112;
            llvm::MetadataTracking::track((uint64_t)&v395, v230, 2);
            v112 = v292;
            v105 = v373;
            v109 = v291;
          }
        }
        v379 = v112;
        v231 = (_QWORD *)(v110 + 48 * v112 + 8);
        v232 = v391;
        (*(void (**)(_QWORD, _QWORD *, _QWORD, BOOL, BOOL, _QWORD, unsigned __int8 **, _QWORD, _QWORD))(**(_QWORD **)(v391 + 264) + 16))(*(_QWORD *)(v391 + 264), v43, *(_QWORD *)(v110 + 48 * v109 + 8), v42 != 0, v105 != 0, *v231, &v395, *(unsigned int *)(v391 + 272), *(_QWORD *)(v391 + 280));
        if (!v42)
          *(_WORD *)v41 |= 0x2000u;
        v233 = *(_QWORD *)(v391 + 264);
        v234 = *v382;
        v235 = *v231;
        goto LABEL_273;
      }
      v118 = *v388;
      v119 = v110 + 48 * v112;
      v122 = *(_QWORD *)(v119 + 32);
      v120 = (_QWORD *)(v119 + 32);
      v121 = v122;
      if (v116 == *v388 && v121 == v118)
      {
        v207 = v43[7];
        if (v43 + 6 == (_QWORD *)v207)
        {
LABEL_244:
          v395 = 0;
        }
        else
        {
          while (1)
          {
            v208 = **(unsigned __int16 **)(v207 + 16);
            v53 = v208 > 0x17;
            v209 = (1 << v208) & 0x83E000;
            if (v53 || v209 == 0)
              break;
            v207 = *(_QWORD *)(v207 + 8);
            if ((_QWORD *)v207 == v43 + 6)
              goto LABEL_244;
          }
          v217 = *(unsigned __int8 **)(v207 + 56);
          v395 = v217;
          if (v217)
          {
            v293 = v105;
            v294 = v109;
            v295 = v112;
            llvm::MetadataTracking::track((uint64_t)&v395, v217, 2);
            v112 = v295;
            v105 = v293;
            v109 = v294;
          }
        }
        v218 = v109;
        v219 = v110 + 48 * v112;
        v221 = *(_QWORD *)(v219 + 8);
        v220 = (_QWORD *)(v219 + 8);
        (*(void (**)(_QWORD, _QWORD *, _QWORD, BOOL, BOOL, uint64_t, unsigned __int8 **, _QWORD, _QWORD))(**(_QWORD **)(v391 + 264) + 16))(*(_QWORD *)(v391 + 264), v43, *(_QWORD *)(v110 + 48 * v109 + 8), v42 != 0, v105 != 0, v221, &v395, *(unsigned int *)(v391 + 272), *(_QWORD *)(v391 + 280));
        if (!v42)
          *(_WORD *)v41 |= 0x2000u;
        (*(void (**)(_QWORD, _QWORD, _QWORD, _QWORD, unsigned __int8 **, _QWORD, _QWORD))(**(_QWORD **)(v391 + 264) + 24))(*(_QWORD *)(v391 + 264), *v220, *v220, 0, &v395, *(unsigned int *)(v391 + 272), *(_QWORD *)(v391 + 280));
        *(_QWORD *)(v41 + 32) = 0;
        v222 = *(_DWORD *)(v110 + 48 * v218 + 40);
        *(_DWORD *)(v41 + 40) = v222;
        v223 = v43[8];
        if (((v43[9] - v223) & 0x7FFFFFFF8) == 8)
        {
          v224 = *(_DWORD *)(*(_QWORD *)v223 + 24);
          if ((*(_WORD *)(*v14 + 48 * v224) & 0x840) == 0)
          {
            v225 = *v14 + 48 * v224;
            *(_QWORD *)(v225 + 32) = 0;
            *(_DWORD *)(v225 + 40) = v222;
          }
        }
      }
      else
      {
        if (v116 != v118)
        {
          v386 = v35;
          v381 = v115;
          if (v121 != v118)
          {
            v377 = v120;
            v124 = *(uint64_t **)(v116 + 88);
            v125 = *(uint64_t **)(v116 + 96);
            if (v124 == v125)
            {
              v149 = 0;
            }
            else
            {
              v126 = 0;
              v127 = *(uint64_t **)(v116 + 88);
              do
              {
                v129 = *v127++;
                v128 = v129;
                if ((*(_WORD *)(v110 + 48 * *(int *)(v129 + 24)) & 0x200) != 0)
                  v126 = v128;
              }
              while (v127 != v125);
              if (!v126)
                goto LABEL_321;
              v130 = *(uint64_t **)(v121 + 88);
              v131 = *(uint64_t **)(v121 + 96);
              if (v130 == v131)
                goto LABEL_321;
              v132 = 0;
              do
              {
                v134 = *v130++;
                v133 = v134;
                if ((*(_WORD *)(v110 + 48 * *(int *)(v134 + 24)) & 0x200) != 0)
                  v132 = v133;
              }
              while (v130 != v131);
              if (v132)
              {
                v135 = 0;
                v136 = 0;
                v137 = 0;
                v138 = 1;
                v139 = -1;
                do
                {
                  v140 = v135;
                  if ((v138 & 1) != 0)
                    v141 = *v14 + 48 * v109;
                  else
                    v141 = (uint64_t)v113;
                  if (((*(_QWORD *)(*(_QWORD *)(v141 + 8) + 96) - *(_QWORD *)(*(_QWORD *)(v141 + 8) + 88)) & 0x7FFFFFFF8) == 8)
                  {
                    v139 = v135;
                  }
                  else
                  {
                    v142 = 0;
                    v143 = *(_QWORD *)(v141 + 32);
                    v144 = *(uint64_t **)(v143 + 88);
                    v145 = *(uint64_t **)(v143 + 96);
                    do
                    {
                      v147 = *v144++;
                      v146 = v147;
                      if ((*(_WORD *)(v110 + 48 * *(int *)(v147 + 24)) & 0x200) == 0)
                        v142 = v146;
                    }
                    while (v144 != v145);
                    v148 = *(_QWORD *)(v110 + 48 * *(int *)(v142 + 24) + 8);
                    if ((v138 & 1) != 0)
                      v136 = v148;
                    else
                      v137 = v148;
                  }
                  v138 = 0;
                  v135 = 1;
                }
                while ((v140 & 1) == 0);
                if (!v136)
                  v137 = 0;
                if (v139 == -1)
                  v149 = v136;
                else
                  v149 = v137;
              }
              else
              {
LABEL_321:
                v149 = 0;
                do
                {
                  v275 = *v124++;
                  v274 = v275;
                  if ((*(_WORD *)(v110 + 48 * *(int *)(v275 + 24)) & 0x1000) != 0)
                    v149 = v274;
                }
                while (v124 != v125);
              }
            }
            v280 = v43[7];
            v385 = v109;
            if (v43 + 6 == (_QWORD *)v280)
            {
LABEL_338:
              v395 = 0;
            }
            else
            {
              while (1)
              {
                v281 = **(unsigned __int16 **)(v280 + 16);
                v53 = v281 > 0x17;
                v282 = (1 << v281) & 0x83E000;
                if (v53 || v282 == 0)
                  break;
                v280 = *(_QWORD *)(v280 + 8);
                if ((_QWORD *)v280 == v43 + 6)
                  goto LABEL_338;
              }
              v284 = *(unsigned __int8 **)(v280 + 56);
              v395 = v284;
              if (v284)
              {
                v374 = v105;
                v296 = v111;
                v380 = v113;
                llvm::MetadataTracking::track((uint64_t)&v395, v284, 2);
                v113 = v380;
                v111 = v296;
                v105 = v374;
              }
            }
            if (v105)
              v285 = v113;
            else
              v285 = v111;
            v286 = *((_QWORD *)v285 + 1);
            if (v105)
              v287 = v111;
            else
              v287 = v113;
            v288 = *((_QWORD *)v287 + 1);
            (*(void (**)(_QWORD, _QWORD *, uint64_t, BOOL, BOOL, uint64_t, unsigned __int8 **, _QWORD, _QWORD))(**(_QWORD **)(v391 + 264) + 16))(*(_QWORD *)(v391 + 264), v43, v286, v42 != 0, v105 != 0, v288, &v395, *(unsigned int *)(v391 + 272), *(_QWORD *)(v391 + 280));
            if (!v42)
              *(_WORD *)v41 |= 0x2000u;
            (*(void (**)(_QWORD, uint64_t, uint64_t, uint64_t, unsigned __int8 **, _QWORD, _QWORD))(**(_QWORD **)(v391 + 264) + 24))(*(_QWORD *)(v391 + 264), *v381, v288, v149, &v395, *(unsigned int *)(v391 + 272), *(_QWORD *)(v391 + 280));
            (*(void (**)(_QWORD, _QWORD, uint64_t, unsigned __int8 **, _QWORD, _QWORD))(**(_QWORD **)(v391 + 264)
                                                                                                + 32))(*(_QWORD *)(v391 + 264), *v377, v149, &v395, *(unsigned int *)(v391 + 272), *(_QWORD *)(v391 + 280));
            v236 = *(_QWORD *)(v391 + 296);
            v237 = *(_QWORD *)(v236 + 48 * *(int *)(v149 + 24) + 32);
            *(_QWORD *)(v41 + 32) = v237;
            v238 = *(_DWORD *)(v110 + 48 * v385 + 40) - 1;
LABEL_274:
            *(_DWORD *)(v41 + 40) = v238;
            v239 = v43[8];
            if (((v43[9] - v239) & 0x7FFFFFFF8) == 8)
            {
              v240 = *(_DWORD *)(*(_QWORD *)v239 + 24);
              if ((*(_WORD *)(v236 + 48 * v240) & 0x840) == 0)
              {
                v241 = v236 + 48 * v240;
                *(_QWORD *)(v241 + 32) = v237;
                *(_DWORD *)(v241 + 40) = v238;
              }
            }
            v192 = v395;
            v35 = v386;
            if (!v395)
              goto LABEL_313;
            goto LABEL_312;
          }
          *(_QWORD *)(v41 + 16) = v103;
          *(_QWORD *)(v41 + 24) = v104;
          v270 = v43[7];
          if (v43 + 6 == (_QWORD *)v270)
          {
LABEL_320:
            v395 = 0;
          }
          else
          {
            while (1)
            {
              v271 = **(unsigned __int16 **)(v270 + 16);
              v53 = v271 > 0x17;
              v272 = (1 << v271) & 0x83E000;
              if (v53 || v272 == 0)
                break;
              v270 = *(_QWORD *)(v270 + 8);
              if ((_QWORD *)v270 == v43 + 6)
                goto LABEL_320;
            }
            v276 = *(unsigned __int8 **)(v270 + 56);
            v395 = v276;
            if (v276)
            {
              v376 = v105;
              v299 = v109;
              v300 = v112;
              llvm::MetadataTracking::track((uint64_t)&v395, v276, 2);
              v112 = v300;
              v105 = v376;
              v109 = v299;
            }
          }
          v379 = v112;
          v232 = v391;
          v277 = v110 + 48 * v109;
          v279 = *(_QWORD *)(v277 + 8);
          v278 = (uint64_t *)(v277 + 8);
          (*(void (**)(_QWORD, _QWORD *, uint64_t, BOOL, BOOL, _QWORD, unsigned __int8 **, _QWORD, _QWORD))(**(_QWORD **)(v391 + 264) + 16))(*(_QWORD *)(v391 + 264), v43, v279, v42 != 0, v105 == 0, *(_QWORD *)(v110 + 48 * v112 + 8), &v395, *(unsigned int *)(v391 + 272), *(_QWORD *)(v391 + 280));
          if (!v42)
            *(_WORD *)v41 |= 0x2000u;
          v233 = *(_QWORD *)(v391 + 264);
          v234 = *v278;
          v235 = *v381;
LABEL_273:
          (*(void (**)(uint64_t, uint64_t, uint64_t, unsigned __int8 **, _QWORD, _QWORD))(*(_QWORD *)v233 + 32))(v233, v234, v235, &v395, *(unsigned int *)(v232 + 272), *(_QWORD *)(v232 + 280));
          v236 = *(_QWORD *)(v232 + 296);
          v237 = *(_QWORD *)(v236 + 48 * *(int *)(v116 + 24) + 32);
          *(_QWORD *)(v41 + 32) = v237;
          v238 = *(_DWORD *)(v110 + 48 * v379 + 40);
          goto LABEL_274;
        }
        v378 = v120;
        v255 = v43[7];
        if (v43 + 6 == (_QWORD *)v255)
        {
LABEL_302:
          v256 = v121;
          v395 = 0;
        }
        else
        {
          while (1)
          {
            v256 = v121;
            v257 = **(unsigned __int16 **)(v255 + 16);
            v53 = v257 > 0x17;
            v258 = (1 << v257) & 0x83E000;
            if (v53 || v258 == 0)
              break;
            v255 = *(_QWORD *)(v255 + 8);
            if ((_QWORD *)v255 == v43 + 6)
              goto LABEL_302;
          }
          v260 = *(unsigned __int8 **)(v255 + 56);
          v395 = v260;
          if (v260)
          {
            v375 = v105;
            v297 = v109;
            v298 = v112;
            llvm::MetadataTracking::track((uint64_t)&v395, v260, 2);
            v112 = v298;
            v105 = v375;
            v109 = v297;
          }
        }
        v384 = v109;
        v261 = v110 + 48 * v112;
        v263 = *(_QWORD *)(v261 + 8);
        v262 = (_QWORD *)(v261 + 8);
        (*(void (**)(_QWORD, _QWORD *, _QWORD, BOOL, BOOL, uint64_t, unsigned __int8 **, _QWORD, _QWORD))(**(_QWORD **)(v391 + 264) + 16))(*(_QWORD *)(v391 + 264), v43, *(_QWORD *)(v110 + 48 * v109 + 8), v42 != 0, v105 != 0, v263, &v395, *(unsigned int *)(v391 + 272), *(_QWORD *)(v391 + 280));
        if (!v42)
          *(_WORD *)v41 |= 0x2000u;
        (*(void (**)(_QWORD, _QWORD, _QWORD, unsigned __int8 **, _QWORD, _QWORD))(**(_QWORD **)(v391 + 264)
                                                                                           + 32))(*(_QWORD *)(v391 + 264), *v262, *v378, &v395, *(unsigned int *)(v391 + 272), *(_QWORD *)(v391 + 280));
        v264 = *(_QWORD *)(v391 + 296);
        v265 = *(_QWORD *)(v264 + 48 * *(int *)(v256 + 24) + 32);
        *(_QWORD *)(v41 + 32) = v265;
        v266 = *(_DWORD *)(v110 + 48 * v384 + 40);
        *(_DWORD *)(v41 + 40) = v266;
        v267 = v43[8];
        if (((v43[9] - v267) & 0x7FFFFFFF8) == 8)
        {
          v268 = *(_DWORD *)(*(_QWORD *)v267 + 24);
          if ((*(_WORD *)(v264 + 48 * v268) & 0x840) == 0)
          {
            v269 = v264 + 48 * v268;
            *(_QWORD *)(v269 + 32) = v265;
            *(_DWORD *)(v269 + 40) = v266;
          }
        }
      }
      v192 = v395;
    }
    if (!v192)
    {
LABEL_313:
      v3 = v391;
      goto LABEL_117;
    }
LABEL_312:
    llvm::MetadataTracking::untrack((uint64_t)&v395, v192);
    goto LABEL_313;
  }
LABEL_350:
  if (v400 != &v402)
    free(v400);
  v400 = &v402;
  v402 = v35;
  v403 = 0;
  v401 = 0x800000001;
  v301 = 1;
  v302 = *(uint64_t **)(v390 + 328);
  do
  {
    while (1)
    {
      v303 = (char *)v400 + 16 * v301;
      v304 = (unsigned __int16 *)*((_QWORD *)v303 - 2);
      v305 = *((_QWORD *)v303 - 1);
      LODWORD(v401) = v301 - 1;
      v306 = (uint64_t *)*((_QWORD *)v304 + 1);
      ++*(_DWORD *)(v3 + 252);
      v307 = *v304;
      if ((~v307 & 0x1010) == 0)
      {
        *v304 = v307 & 0xFFEF;
        goto LABEL_421;
      }
      v308 = v307 & 0x2200;
      if ((_DWORD)v305)
        v309 = 0;
      else
        v309 = v308 == 0;
      if (!v309)
      {
        v310 = *(_DWORD *)(v3 + 272);
        v312 = (char *)v306[20];
        v311 = v306[21];
        if ((unint64_t)v312 >= v311)
        {
          v314 = (char *)v306[19];
          v315 = (v312 - v314) >> 4;
          v316 = v315 + 1;
          if ((unint64_t)(v315 + 1) >> 60)
            abort();
          v317 = v311 - (_QWORD)v314;
          if (v317 >> 3 > v316)
            v316 = v317 >> 3;
          if ((unint64_t)v317 >= 0x7FFFFFFFFFFFFFF0)
            v318 = 0xFFFFFFFFFFFFFFFLL;
          else
            v318 = v316;
          if (v318)
          {
            if (v318 >> 60)
              sub_1C4764EE4();
            v319 = (char *)operator new(16 * v318);
          }
          else
          {
            v319 = 0;
          }
          v320 = &v319[16 * v315];
          *(_WORD *)v320 = v310;
          *((_QWORD *)v320 + 1) = -1;
          v321 = v320;
          if (v312 != v314)
          {
            do
            {
              *((_OWORD *)v321 - 1) = *((_OWORD *)v312 - 1);
              v321 -= 16;
              v312 -= 16;
            }
            while (v312 != v314);
            v312 = (char *)v306[19];
          }
          v313 = v320 + 16;
          v306[19] = (uint64_t)v321;
          v306[20] = (uint64_t)(v320 + 16);
          v306[21] = (uint64_t)&v319[16 * v318];
          if (v312)
            operator delete(v312);
          v3 = v391;
        }
        else
        {
          *(_WORD *)v312 = v310;
          *((_QWORD *)v312 + 1) = -1;
          v313 = v312 + 16;
        }
        v306[20] = (uint64_t)v313;
      }
      if (v306 == v302)
      {
        v302 = (uint64_t *)v302[1];
      }
      else
      {
        v322 = (uint64_t *)v306[1];
        if (v322 != v302 && v322 != v306)
        {
          v324 = *v322;
          v325 = *v306;
          *(_QWORD *)(v325 + 8) = v322;
          *v322 = v325;
          v326 = *v302;
          *(_QWORD *)(v324 + 8) = v302;
          *v306 = v326;
          *(_QWORD *)(v326 + 8) = v306;
          *v302 = v324;
        }
      }
      v327 = (uint64_t *)v306[11];
      v328 = (uint64_t *)v306[12];
      if ((((char *)v328 - (char *)v327) & 0x7FFFFFFF8) == 0)
        goto LABEL_421;
      if ((*v304 & 0x1000) != 0)
        v329 = v305 - 1;
      else
        v329 = v305;
      if ((*v304 & 0x800) != 0)
      {
        v334 = *((_QWORD *)v304 + 3);
        v335 = *(_DWORD *)(*((_QWORD *)v304 + 2) + 24);
        v336 = *v14;
        v337 = *(_DWORD *)(v334 + 24);
        v338 = v401;
        if (v401 >= (unint64_t)HIDWORD(v401))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v400, (uint64_t)&v402, v401 + 1, 16);
          v338 = v401;
        }
        v339 = v336 + 48 * v337;
        v340 = v329 + 1;
        v341 = (char *)v400 + 16 * v338;
        *v341 = v339;
        v341[1] = v340;
        v342 = (v401 + 1);
        LODWORD(v401) = v342;
        if (v342 >= HIDWORD(v401))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v400, (uint64_t)&v402, v342 + 1, 16);
          LODWORD(v342) = v401;
        }
        v343 = (char *)v400 + 16 * v342;
        *v343 = v336 + 48 * v335;
        v343[1] = v340;
        goto LABEL_419;
      }
      if ((*v304 & 0x100) != 0)
        break;
      if ((*v304 & 0x400) == 0)
      {
        v330 = (unsigned __int16 *)(*v14 + 48 * *(int *)(*v327 + 24));
        v331 = *v330;
        v332 = v401;
        if (v401 >= (unint64_t)HIDWORD(v401))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v400, (uint64_t)&v402, v401 + 1, 16);
          v332 = v401;
        }
        v333 = (char *)v400 + 16 * v332;
        *v333 = v330;
        v333[1] = v329 + ((v331 >> 6) & 1);
        goto LABEL_419;
      }
      v359 = 0;
      v360 = *v14;
      do
      {
        v362 = *v327++;
        v361 = v362;
        if ((*(_WORD *)(v360 + 48 * *(int *)(v362 + 24)) & 0x200) == 0)
          v359 = v361;
      }
      while (v327 != v328);
      v363 = *(_DWORD *)(v359 + 24);
      v356 = v401;
      if (v401 >= (unint64_t)HIDWORD(v401))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v400, (uint64_t)&v402, v401 + 1, 16);
        v356 = v401;
      }
      v357 = v360 + 48 * v363;
      v358 = v329;
LABEL_418:
      v364 = (char *)v400 + 16 * v356;
      *v364 = v357;
      v364[1] = v358;
LABEL_419:
      v301 = v401 + 1;
      LODWORD(v401) = v301;
      if (!v301)
        goto LABEL_422;
    }
    v344 = *(_QWORD *)(v3 + 288);
    v345 = *(_DWORD *)(v344 + 264);
    if (v345)
    {
      v346 = *(_QWORD *)(v344 + 248);
      v347 = v345 - 1;
      v348 = (v345 - 1) & ((v306 >> 4) ^ (v306 >> 9));
      v349 = *(uint64_t **)(v346 + 16 * v348);
      if (v306 == v349)
      {
LABEL_405:
        v352 = *(_QWORD *)(v346 + 16 * v348 + 8);
        goto LABEL_407;
      }
      v350 = 1;
      while (v349 != (uint64_t *)-4096)
      {
        v351 = v348 + v350++;
        v348 = v351 & v347;
        v349 = *(uint64_t **)(v346 + 16 * v348);
        if (v306 == v349)
          goto LABEL_405;
      }
    }
    v352 = 0;
LABEL_407:
    v353 = sub_1C556566C(v352);
    if (v353)
    {
      v354 = *(_DWORD *)(v353 + 24);
      v355 = *v14;
      v356 = v401;
      if (v401 >= (unint64_t)HIDWORD(v401))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v400, (uint64_t)&v402, v401 + 1, 16);
        v356 = v401;
      }
      v357 = v355 + 48 * v354;
      v358 = v329 - 1;
      goto LABEL_418;
    }
LABEL_421:
    v301 = v401;
  }
  while ((_DWORD)v401);
LABEL_422:
  if (v400 != &v402)
    free(v400);
  (*(void (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(v3 + 264) + 96))(*(_QWORD *)(v3 + 264), v390, *(_QWORD *)(v3 + 280));
  v365 = (void **)__p[1];
  v366 = (void **)v393;
  *((_QWORD *)&v394 + 1) = 0;
  v367 = v393 - (unint64_t)__p[1];
  if ((unint64_t)v393 - (unint64_t)__p[1] >= 0x11)
  {
    do
    {
      operator delete(*v365);
      v366 = (void **)v393;
      v365 = (void **)((char *)__p[1] + 8);
      __p[1] = v365;
      v367 = v393 - (_QWORD)v365;
    }
    while ((_QWORD)v393 - (_QWORD)v365 > 0x10uLL);
  }
  v368 = v367 >> 3;
  if (v368 == 1)
  {
    v369 = 256;
LABEL_430:
    *(_QWORD *)&v394 = v369;
  }
  else if (v368 == 2)
  {
    v369 = 512;
    goto LABEL_430;
  }
  if (v365 != v366)
  {
    do
    {
      v370 = *v365++;
      operator delete(v370);
    }
    while (v365 != v366);
    if ((void *)v393 != __p[1])
      *(_QWORD *)&v393 = v393 + (((unint64_t)__p[1] - v393 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  if (__p[0])
    operator delete(__p[0]);
  v13 = v389;
  return v13 != 8;
}

uint64_t sub_1C556566C(uint64_t a1)
{
  _BYTE *v2;
  _BYTE *v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t v8;
  unint64_t *v9;
  unint64_t *v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  unint64_t *v15;
  unint64_t *v16;
  unint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  char *v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  void *v25;
  uint64_t v26;
  _BYTE v27[64];
  void *v28;
  unsigned int v29;
  unsigned int v30;
  _BYTE v31[256];
  void *v32;
  uint64_t v33;
  _QWORD v34[130];

  v34[128] = *MEMORY[0x1E0C80C00];
  v25 = v27;
  v26 = 0x800000000;
  v2 = *(_BYTE **)(a1 + 32);
  v3 = *(_BYTE **)(a1 + 40);
  v32 = v34;
  v33 = 0x8000000000;
  sub_1C618A450((unsigned int *)&v32, v2, v3);
  v4 = 126 - 2 * __clz(v33);
  if ((_DWORD)v33)
    v5 = v4;
  else
    v5 = 0;
  sub_1C5565988((unint64_t *)v32, (unint64_t *)v32 + v33, v5, 1);
  v28 = v31;
  v30 = 32;
  v7 = *(uint64_t **)(a1 + 32);
  v6 = *(uint64_t **)(a1 + 40);
  if (v6 == v7)
    goto LABEL_33;
  do
  {
    v8 = *v7;
    v29 = 0;
    v9 = *(unint64_t **)(v8 + 88);
    v10 = *(unint64_t **)(v8 + 96);
    while (v9 != v10)
    {
      v11 = *v9;
      v12 = (unint64_t *)v32;
      if ((_DWORD)v33)
      {
        v13 = v33;
        do
        {
          v14 = v13 >> 1;
          v15 = &v12[v13 >> 1];
          v17 = *v15;
          v16 = v15 + 1;
          v13 += ~(v13 >> 1);
          if (v17 < v11)
            v12 = v16;
          else
            v13 = v14;
        }
        while (v13);
      }
      if ((v12 == (unint64_t *)((char *)v32 + 8 * v33) || v11 < *v12)
        && v8 == **(_QWORD **)(v11 + 64))
      {
        if ((uint64_t)(*(_QWORD *)(v8 + 96) - *(_QWORD *)(v8 + 88)) <= 23)
          goto LABEL_26;
        v18 = v28;
        v19 = v29;
        v20 = (char *)v28;
        if (v29)
        {
          v21 = 8 * v29;
          v20 = (char *)v28;
          while (*(_QWORD *)v20 != v11)
          {
            v20 += 8;
            v21 -= 8;
            if (!v21)
            {
              v20 = (char *)v28 + 8 * v29;
              break;
            }
          }
        }
        if (v29 == (v20 - (_BYTE *)v28) >> 3)
        {
          if (v29 >= v30)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v28, (uint64_t)v31, v29 + 1, 8);
            v18 = v28;
            v19 = v29;
          }
          v18[v19] = v11;
          ++v29;
          v11 = *v9;
LABEL_26:
          v22 = v26;
          if (v26 >= (unint64_t)HIDWORD(v26))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v25, (uint64_t)v27, v26 + 1, 8);
            v22 = v26;
          }
          *((_QWORD *)v25 + v22) = v11;
          LODWORD(v26) = v26 + 1;
        }
      }
      ++v9;
    }
    ++v7;
  }
  while (v7 != v6);
  if (v28 != v31)
    free(v28);
LABEL_33:
  if (v32 != v34)
    free(v32);
  if ((_DWORD)v26 == 1)
    v23 = *(_QWORD *)v25;
  else
    v23 = 0;
  if (v25 != v27)
    free(v25);
  return v23;
}

void sub_1C5565910()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5565924(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E816F3D8;
  result[1] = v3;
  return result;
}

uint64_t sub_1C5565958(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E816F3D8;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C5565974(uint64_t a1)
{
  return (*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)(a1 + 8) + 264) + 80))(*(_QWORD *)(*(_QWORD *)(a1 + 8) + 264));
}

unint64_t *sub_1C5565988(unint64_t *result, unint64_t *a2, uint64_t a3, char a4)
{
  unint64_t *v7;
  unint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  unint64_t *v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  unint64_t *v17;
  unint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  unint64_t v21;
  unint64_t *v22;
  unint64_t *v23;
  unint64_t v24;
  unint64_t v25;
  unint64_t *v26;
  BOOL v27;
  unint64_t v28;
  unint64_t *v29;
  unint64_t *v30;
  unint64_t v31;
  unint64_t v32;
  unint64_t v33;
  unint64_t v34;
  unint64_t v35;
  unint64_t *v36;
  unint64_t v37;
  unint64_t v38;
  unint64_t *v39;
  BOOL v41;
  uint64_t v42;
  unint64_t *v43;
  unint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unint64_t *v48;
  int64_t v49;
  int64_t v50;
  int64_t v51;
  uint64_t v52;
  unint64_t *v53;
  unint64_t v54;
  BOOL v55;
  unint64_t *v56;
  unint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unint64_t v60;
  unint64_t *v61;
  unint64_t *v62;
  uint64_t v63;
  unint64_t v64;
  uint64_t v65;
  unint64_t v66;
  unint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  unint64_t v71;
  unint64_t v72;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = a2 - v8;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v37 = *(a2 - 1);
        v38 = *v8;
        if (v37 < *v8)
        {
          *v8 = v37;
          *(a2 - 1) = v38;
        }
        return result;
      case 3:
        return sub_1C49F0A6C(v8, v8 + 1, a2 - 1);
      case 4:
        return sub_1C49F0C38(v8, v8 + 1, v8 + 2, a2 - 1);
      case 5:
        return sub_1C49F0CB4(v8, v8 + 1, v8 + 2, v8 + 3, a2 - 1);
      default:
        if (v9 <= 191)
        {
          v39 = v8 + 1;
          v41 = v8 == a2 || v39 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v41)
            {
              v42 = 8;
              v43 = v8;
              do
              {
                v45 = *v43;
                v44 = v43[1];
                v43 = v39;
                if (v44 < v45)
                {
                  v46 = v42;
                  while (1)
                  {
                    *(unint64_t *)((char *)v8 + v46) = v45;
                    v47 = v46 - 8;
                    if (v46 == 8)
                      break;
                    v45 = *(unint64_t *)((char *)v8 + v46 - 16);
                    v46 -= 8;
                    if (v44 >= v45)
                    {
                      v48 = (unint64_t *)((char *)v8 + v47);
                      goto LABEL_75;
                    }
                  }
                  v48 = v8;
LABEL_75:
                  *v48 = v44;
                }
                v39 = v43 + 1;
                v42 += 8;
              }
              while (v43 + 1 != a2);
            }
          }
          else if (!v41)
          {
            do
            {
              v72 = *v7;
              v71 = v7[1];
              v7 = v39;
              if (v71 < v72)
              {
                do
                {
                  *v39 = v72;
                  v72 = *(v39 - 2);
                  --v39;
                }
                while (v71 < v72);
                *v39 = v71;
              }
              v39 = v7 + 1;
            }
            while (v7 + 1 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v49 = (unint64_t)(v10 - 2) >> 1;
            v50 = v49;
            do
            {
              v51 = v50;
              if (v49 >= v50)
              {
                v52 = (2 * v50) | 1;
                v53 = &v8[v52];
                if (2 * v51 + 2 >= v10)
                {
                  v54 = *v53;
                }
                else
                {
                  v54 = v53[1];
                  v55 = *v53 >= v54;
                  if (*v53 < v54)
                    ++v53;
                  else
                    v54 = *v53;
                  if (!v55)
                    v52 = 2 * v51 + 2;
                }
                v56 = &v8[v51];
                v57 = *v56;
                if (v54 >= *v56)
                {
                  do
                  {
                    *v56 = v54;
                    v56 = v53;
                    if (v49 < v52)
                      break;
                    v58 = (2 * v52) | 1;
                    v53 = &v8[v58];
                    v52 = 2 * v52 + 2;
                    if (v52 >= v10)
                    {
                      v54 = *v53;
                      v52 = v58;
                    }
                    else
                    {
                      v54 = *v53;
                      result = (unint64_t *)v53[1];
                      if (*v53 >= (unint64_t)result)
                      {
                        v52 = v58;
                      }
                      else
                      {
                        v54 = v53[1];
                        ++v53;
                      }
                    }
                  }
                  while (v54 >= v57);
                  *v56 = v57;
                }
              }
              v50 = v51 - 1;
            }
            while (v51);
            do
            {
              v59 = 0;
              v60 = *v8;
              v61 = v8;
              do
              {
                v62 = &v61[v59 + 1];
                v63 = (2 * v59) | 1;
                v59 = 2 * v59 + 2;
                if (v59 >= v10)
                {
                  v64 = *v62;
                  v59 = v63;
                }
                else
                {
                  v64 = *v62;
                  if (*v62 >= v62[1])
                  {
                    v59 = v63;
                  }
                  else
                  {
                    v64 = v62[1];
                    ++v62;
                  }
                }
                *v61 = v64;
                v61 = v62;
              }
              while (v59 <= (uint64_t)((unint64_t)(v10 - 2) >> 1));
              if (v62 == --a2)
              {
                *v62 = v60;
              }
              else
              {
                *v62 = *a2;
                *a2 = v60;
                v65 = (char *)v62 - (char *)v8 + 8;
                if (v65 >= 9)
                {
                  v66 = (((unint64_t)v65 >> 3) - 2) >> 1;
                  v67 = &v8[v66];
                  v68 = *v67;
                  v69 = *v62;
                  if (*v67 < *v62)
                  {
                    do
                    {
                      *v62 = v68;
                      v62 = v67;
                      if (!v66)
                        break;
                      v66 = (v66 - 1) >> 1;
                      v67 = &v8[v66];
                      v68 = *v67;
                    }
                    while (*v67 < v69);
                    *v62 = v69;
                  }
                }
              }
            }
            while (v10-- > 2);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &v8[(unint64_t)v10 >> 1];
        if ((unint64_t)v9 < 0x401)
        {
          result = sub_1C49F0A6C(&v7[(unint64_t)v10 >> 1], v7, a2 - 1);
        }
        else
        {
          sub_1C49F0A6C(v7, &v7[(unint64_t)v10 >> 1], a2 - 1);
          sub_1C49F0A6C(v7 + 1, v12 - 1, a2 - 2);
          sub_1C49F0A6C(v7 + 2, &v7[v11 + 1], a2 - 3);
          result = sub_1C49F0A6C(v12 - 1, v12, &v7[v11 + 1]);
          v13 = *v7;
          *v7 = *v12;
          *v12 = v13;
        }
        --a3;
        v14 = *v7;
        if ((a4 & 1) == 0 && *(v7 - 1) >= v14)
        {
          if (v14 >= *(a2 - 1))
          {
            v29 = v7 + 1;
            do
            {
              v8 = v29;
              if (v29 >= a2)
                break;
              ++v29;
            }
            while (v14 >= *v8);
          }
          else
          {
            v8 = v7;
            do
            {
              v28 = v8[1];
              ++v8;
            }
            while (v14 >= v28);
          }
          v30 = a2;
          if (v8 < a2)
          {
            v30 = a2;
            do
              v31 = *--v30;
            while (v14 < v31);
          }
          if (v8 < v30)
          {
            v32 = *v8;
            v33 = *v30;
            do
            {
              *v8 = v33;
              *v30 = v32;
              do
              {
                v34 = v8[1];
                ++v8;
                v32 = v34;
              }
              while (v14 >= v34);
              do
              {
                v35 = *--v30;
                v33 = v35;
              }
              while (v14 < v35);
            }
            while (v8 < v30);
          }
          v36 = v8 - 1;
          if (v8 - 1 != v7)
            *v7 = *v36;
          a4 = 0;
          *v36 = v14;
          continue;
        }
        v15 = 0;
        do
          v16 = v7[++v15];
        while (v16 < v14);
        v17 = &v7[v15];
        v18 = a2;
        if (v15 == 1)
        {
          v18 = a2;
          do
          {
            if (v17 >= v18)
              break;
            v20 = *--v18;
          }
          while (v20 >= v14);
        }
        else
        {
          do
            v19 = *--v18;
          while (v19 >= v14);
        }
        if (v17 >= v18)
        {
          v26 = v17 - 1;
        }
        else
        {
          v21 = *v18;
          v22 = &v7[v15];
          v23 = v18;
          do
          {
            *v22 = v21;
            *v23 = v16;
            do
            {
              v24 = v22[1];
              ++v22;
              v16 = v24;
            }
            while (v24 < v14);
            do
            {
              v25 = *--v23;
              v21 = v25;
            }
            while (v25 >= v14);
          }
          while (v22 < v23);
          v26 = v22 - 1;
        }
        if (v26 != v7)
          *v7 = *v26;
        *v26 = v14;
        if (v17 < v18)
        {
LABEL_32:
          result = (unint64_t *)sub_1C5565988(v7, v26, a3, a4 & 1);
          a4 = 0;
          v8 = v26 + 1;
          continue;
        }
        v27 = sub_1C5565FA8(v7, v26);
        v8 = v26 + 1;
        result = (unint64_t *)sub_1C5565FA8(v26 + 1, a2);
        if (!(_DWORD)result)
        {
          if (v27)
            continue;
          goto LABEL_32;
        }
        a2 = v26;
        if (!v27)
          goto LABEL_2;
        return result;
    }
  }
}

BOOL sub_1C5565FA8(unint64_t *a1, unint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unint64_t v6;
  unint64_t v7;
  unint64_t *v8;
  unint64_t *v9;
  int v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t *v16;

  v4 = a2 - a1;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = *a1;
      if (v6 < *a1)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_1C49F0A6C(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_1C49F0C38(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      sub_1C49F0CB4(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      v8 = a1 + 2;
      sub_1C49F0A6C(a1, a1 + 1, a1 + 2);
      v9 = a1 + 3;
      if (a1 + 3 == a2)
        return 1;
      v10 = 0;
      v11 = 24;
      break;
  }
  while (1)
  {
    v12 = *v9;
    v13 = *v8;
    if (*v9 < *v8)
    {
      v14 = v11;
      while (1)
      {
        *(unint64_t *)((char *)a1 + v14) = v13;
        v15 = v14 - 8;
        if (v14 == 8)
          break;
        v13 = *(unint64_t *)((char *)a1 + v14 - 16);
        v14 -= 8;
        if (v12 >= v13)
        {
          v16 = (unint64_t *)((char *)a1 + v15);
          goto LABEL_12;
        }
      }
      v16 = a1;
LABEL_12:
      *v16 = v12;
      if (++v10 == 8)
        return v9 + 1 == a2;
    }
    v8 = v9;
    v11 += 8;
    if (++v9 == a2)
      return 1;
  }
}

uint64_t llvm::GPUFastISel::GetStateSource(llvm::DataLayout **this, const llvm::FunctionGroup *a2, const llvm::Value *a3, uint64_t a4, BOOL *a5)
{
  unint64_t *v6;
  unint64_t v7;

  if (a3 && *((_BYTE *)a3 + 16) == 16)
  {
    v6 = (unint64_t *)((char *)a3 + 24);
    if (*((_DWORD *)a3 + 8) >= 0x41u)
      v6 = (unint64_t *)*v6;
    v7 = *v6;
  }
  else
  {
    v7 = sub_1C55661AC(this[5], (uint64_t)a3, (uint64_t)a2, a4, (uint64_t)a5);
  }
  if (v7 == 0xFFFFFFFF)
    return 0x2FFFFFFFFLL;
  else
    return (*(unsigned int (**)(llvm::DataLayout *))(*(_QWORD *)this[1] + 56))(this[1]) | 0x200000000;
}

uint64_t sub_1C55661AC(llvm::DataLayout *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unsigned int v8;
  unsigned int v9;
  int v10;
  uint64_t *v11;
  int v12;
  _QWORD *v13;
  _QWORD *v14;
  int v15;
  _DWORD *v16;
  uint64_t v17;
  int v18;
  _DWORD *v19;
  int v20;
  int v21;
  int v22;
  uint64_t v23;
  int v24;
  _DWORD *v25;
  _DWORD *v27;
  unsigned int v28;

  v28 = *(_DWORD *)(*((_QWORD *)a1 + 29) + 4);
  if (v28 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v27, 0, 0);
  else
    v27 = 0;
  while (1)
  {
    v8 = *(unsigned __int8 *)(a2 + 16);
    if (v8 == 62)
      goto LABEL_7;
    if (v8 == 5)
    {
      v9 = *(unsigned __int16 *)(a2 + 18);
      if (v9 - 47 < 3)
        goto LABEL_11;
      if (v9 != 34)
        goto LABEL_16;
LABEL_7:
      if (!llvm::GEPOperator::accumulateConstantOffset(a2, a1, (uint64_t)&v27, 0, a5))
        goto LABEL_38;
      goto LABEL_11;
    }
    if (v8 < 0x1C)
      goto LABEL_19;
    if (v8 - 75 > 2)
      break;
LABEL_11:
    v10 = *(_DWORD *)(a2 + 20);
    if ((v10 & 0x40000000) != 0)
      v11 = *(uint64_t **)(a2 - 8);
    else
      v11 = (uint64_t *)(a2 - 32 * (v10 & 0x7FFFFFF));
    a2 = *v11;
  }
  v9 = v8 - 28;
LABEL_16:
  if (v9 == 13)
  {
    v12 = *(_DWORD *)(a2 + 20);
    if ((v12 & 0x40000000) != 0)
      v13 = *(_QWORD **)(a2 - 8);
    else
      v13 = (_QWORD *)(a2 - 32 * (v12 & 0x7FFFFFF));
    v20 = sub_1C55661AC(a1, *v13, a3);
    if (v20 != -1)
    {
      v21 = v20;
      v22 = *(_DWORD *)(a2 + 20);
      v23 = (v22 & 0x40000000) != 0 ? *(_QWORD *)(a2 - 8) : a2 - 32 * (v22 & 0x7FFFFFF);
      v24 = sub_1C55661AC(a1, *(_QWORD *)(v23 + 32), a3);
      if (v24 != -1)
      {
        v25 = &v27;
        if (v28 >= 0x41)
          v25 = v27;
        v17 = (v24 + v21 + *v25);
        goto LABEL_39;
      }
    }
LABEL_38:
    v17 = 0xFFFFFFFFLL;
    goto LABEL_39;
  }
LABEL_19:
  if (v8 <= 3)
  {
    v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 400))(a3, a2);
    v19 = &v27;
    if (v28 >= 0x41)
      v19 = v27;
    v17 = (*v19 + 4 * v18);
  }
  else
  {
    if (v8 != 16)
      goto LABEL_38;
    v14 = (_QWORD *)(a2 + 24);
    if (*(_DWORD *)(a2 + 32) >= 0x41u)
      v14 = (_QWORD *)*v14;
    v15 = *(_DWORD *)v14;
    v16 = &v27;
    if (v28 >= 0x41)
      v16 = v27;
    v17 = (*v16 + v15);
  }
LABEL_39:
  if (v28 >= 0x41 && v27)
    MEMORY[0x1CAA32F9C](v27, 0x1000C8000313F17);
  return v17;
}

uint64_t llvm::GPUFastISel::getScalarCoordElements(uint64_t result, uint64_t a2, uint64_t a3, unsigned int a4)
{
  uint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t *v11;
  uint64_t v12;

  if (a2 && *(_BYTE *)(a2 + 16) == 90)
  {
    v4 = *(_QWORD *)(*(_QWORD *)(result + 16) + 16);
    do
    {
      if (*(_QWORD *)(a2 + 40) != v4)
        return result;
      v5 = *(_DWORD *)(a2 + 20);
      v6 = (v5 & 0x40000000) != 0 ? *(_QWORD *)(a2 - 8) : a2 - 32 * (v5 & 0x7FFFFFF);
      v7 = *(_QWORD *)(v6 + 64);
      if (!v7 || *(_BYTE *)(v7 + 16) != 16)
        return result;
      v9 = (_QWORD *)(v7 + 24);
      if (*(_DWORD *)(v7 + 32) >= 0x41u)
        v9 = (_QWORD *)*v9;
      v10 = (_QWORD *)*v9;
      if (v10 < a4)
      {
        if ((v5 & 0x40000000) != 0)
          v12 = *(_QWORD *)(a2 - 8);
        else
          v12 = a2 - 32 * (v5 & 0x7FFFFFF);
        *(_QWORD *)(a3 + 8 * v10) = *(_QWORD *)(v12 + 32);
        v5 = *(_DWORD *)(a2 + 20);
        if ((v5 & 0x40000000) == 0)
        {
LABEL_17:
          v11 = (uint64_t *)(a2 - 32 * (v5 & 0x7FFFFFF));
          goto LABEL_23;
        }
      }
      else if ((v5 & 0x40000000) == 0)
      {
        goto LABEL_17;
      }
      v11 = *(uint64_t **)(a2 - 8);
LABEL_23:
      a2 = *v11;
    }
    while (*v11 && *(_BYTE *)(a2 + 16) == 90);
  }
  return result;
}

uint64_t llvm::GPUFastISel::getFDiv(llvm::GPUFastISel *this, const llvm::Value *a2, const llvm::Value **a3, const llvm::Value **a4)
{
  uint64_t result;
  int v6;
  const llvm::Value **v7;
  int v8;
  char *v9;

  result = 0;
  if (a2 && *((_BYTE *)a2 + 16) == 49)
  {
    if (*((_QWORD *)a2 + 5) == *(_QWORD *)(*((_QWORD *)this + 2) + 16))
    {
      v6 = *((_DWORD *)a2 + 5);
      if ((v6 & 0x40000000) != 0)
        v7 = (const llvm::Value **)*((_QWORD *)a2 - 1);
      else
        v7 = (const llvm::Value **)((char *)a2 - 32 * (v6 & 0x7FFFFFF));
      *a3 = *v7;
      v8 = *((_DWORD *)a2 + 5);
      if ((v8 & 0x40000000) != 0)
        v9 = (char *)*((_QWORD *)a2 - 1);
      else
        v9 = (char *)a2 - 32 * (v8 & 0x7FFFFFF);
      *a4 = (const llvm::Value *)*((_QWORD *)v9 + 4);
      return 1;
    }
    else
    {
      return 0;
    }
  }
  return result;
}

uint64_t llvm::GPUFastISel::getMulByRecip(llvm::GPUFastISel *this, const llvm::Value *a2, const llvm::Value **a3, const llvm::Value **a4)
{
  uint64_t result;
  int v7;
  const llvm::Value **v8;
  int v9;
  const llvm::Value *v10;
  uint64_t v11;
  BOOL v12;
  int v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  int v18;
  uint64_t v19;
  _DWORD *v20;
  int v21;
  _DWORD *v22;
  uint64_t v23;
  _QWORD v24[2];
  int v25;
  char v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  char v31;
  uint64_t v32;

  result = 0;
  v32 = *MEMORY[0x1E0C80C00];
  if (!a2 || *((_BYTE *)a2 + 16) != 46)
    return result;
  if (*((_QWORD *)a2 + 5) != *(_QWORD *)(*((_QWORD *)this + 2) + 16))
    return 0;
  v7 = *((_DWORD *)a2 + 5);
  v8 = (v7 & 0x40000000) != 0
     ? (const llvm::Value **)*((_QWORD *)a2 - 1)
     : (const llvm::Value **)((char *)a2 - 32 * (v7 & 0x7FFFFFF));
  *a3 = *v8;
  v9 = *((_DWORD *)a2 + 5);
  v10 = (v9 & 0x40000000) != 0
      ? (const llvm::Value *)*((_QWORD *)a2 - 1)
      : (const llvm::Value *)((char *)a2 - 32 * (v9 & 0x7FFFFFF));
  v11 = *((_QWORD *)v10 + 4);
  *a4 = (const llvm::Value *)v11;
  v12 = v11 && *(unsigned __int8 *)(v11 + 16) >= 0x1Cu;
  if (!v12 || *(_BYTE *)(*(_QWORD *)v11 + 8) != 2)
    return 0;
  v13 = *(_DWORD *)(v11 + 20);
  v14 = (v13 & 0x40000000) != 0 ? *(uint64_t **)(v11 - 8) : (uint64_t *)(v11 - 32 * (v13 & 0x7FFFFFF));
  v15 = *v14;
  v16 = *(unsigned __int8 *)(*v14 + 16);
  if (!v15 || v16 != 17)
    return 0;
  LODWORD(v28) = 64;
  v27 = 0x3FF0000000000000;
  llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)v24, (const llvm::APInt **)&v27);
  v28 = v24[0];
  v29 = v24[1];
  v30 = v25;
  v31 = v26 & 0xF;
  llvm::APFloat::convert((uint64_t)&v27, *(void **)(v15 + 32), 1, v24);
  result = sub_1C47ECB98(v15 + 24, (uint64_t)&v27);
  if ((_UNKNOWN *)v28 == &unk_1C866F1C0)
  {
    v23 = result;
    sub_1C4773C74(&v29);
LABEL_39:
    result = v23;
    goto LABEL_27;
  }
  if ((*(_DWORD *)(v28 + 8) - 64) <= 0xFFFFFF7F && v29)
  {
    v23 = result;
    MEMORY[0x1CAA32F9C](v29, 0x1000C8000313F17);
    goto LABEL_39;
  }
LABEL_27:
  if ((_DWORD)result)
  {
    v18 = *(_DWORD *)(v11 + 20);
    if ((v18 & 0x40000000) != 0)
      v19 = *(_QWORD *)(v11 - 8);
    else
      v19 = v11 - 32 * (v18 & 0x7FFFFFF);
    if (!*(_QWORD *)(v19 + 32))
      return 0;
    v20 = *a4;
    v21 = *((_DWORD *)*a4 + 5);
    if ((v21 & 0x40000000) != 0)
      v22 = (_DWORD *)*((_QWORD *)v20 - 1);
    else
      v22 = &v20[-8 * (v21 & 0x7FFFFFF)];
    *a4 = (const llvm::Value *)*((_QWORD *)v22 + 4);
    return 1;
  }
  return result;
}

uint64_t llvm::GPUFastISel::GetSharedRegisterReadByteOffset(llvm::DataLayout **this, const llvm::Value *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v5;
  int v6;

  if (!a2 || *((_BYTE *)a2 + 16) != 60 || *(_BYTE *)(*(_QWORD *)a2 + 8) != 2)
    return 0xFFFFFFFFLL;
  v5 = *((_QWORD *)a2 - 4);
  v6 = *(_DWORD *)(*(_QWORD *)v5 + 8);
  if ((v6 & 0xFE) == 0x12)
    v6 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v5 + 16) + 8);
  if ((v6 & 0xFFFFFF00) == 0x4000)
    return sub_1C55661AC(this[5], v5, *((_QWORD *)this[4] + 43), a4, a5);
  else
    return 0xFFFFFFFFLL;
}

void llvm::GPUFastISel::GetInstr(_QWORD **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unsigned int a4@<W3>, const llvm::MachineOperand *a5@<X4>, const llvm::MachineOperand *a6@<X6>, uint64_t a7@<X8>, uint64_t a8, uint64_t a9, int *a10, uint64_t a11, int *a12, uint64_t a13, int *a14, uint64_t a15, unsigned __int8 a16, unsigned __int8 a17, char a18, unsigned int a19, unsigned int a20)
{
  int v24;
  int v25;
  int v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  unint64_t *v31;
  _QWORD *v32;
  uint64_t v33;
  llvm::MachineFunction *v34;
  void *v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  unint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int8x8_t v46;
  int8x8_t *v47;
  int8x8_t *v48;
  uint64_t v49;
  int8x8_t v50;
  char v51;
  unsigned int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint8x8_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t *v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  int IncompleteVirtualRegister;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  unsigned int v72;
  BOOL v73;
  uint64_t v74;
  uint64_t v75;
  char v76;
  uint64_t v77;
  llvm::MachineInstr *v78;
  llvm::MachineFunction *v79;
  unsigned __int8 *v80;
  uint64_t v81;
  unsigned int v82;
  int8x8_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  int v87;
  int v88;
  unsigned int *v90;
  uint64_t v91;
  unsigned int v92;
  llvm::MachineFunction **v93;
  char v94;
  unsigned int v96;
  int v97;
  int v98;
  int v99;
  int v102;
  llvm::MachineFunction *v103;
  llvm::MachineInstr *v104;
  int v105;
  int v106;
  _DWORD v107[2];
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  void *v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  unsigned __int8 *v115;
  uint64_t v116;
  _QWORD v117[18];

  v117[16] = *MEMORY[0x1E0C80C00];
  v106 = 0;
  v24 = *(unsigned __int8 *)(a2 + 61);
  v25 = *(_DWORD *)(a2 + 72);
  if (*(_BYTE *)(a2 + 61) && v25 == -1)
  {
    ((void (*)(_QWORD **, uint64_t, uint64_t, int *))(*a1)[35])(a1, a3, a2, &v106);
    v24 = *(unsigned __int8 *)(a2 + 61);
    v25 = *(_DWORD *)(a2 + 72);
  }
  v105 = 0;
  if (v24 && v25 != -1)
    ((void (*)(_QWORD **, uint64_t, uint64_t, int *, int *))(*a1)[36])(a1, a3, a2, &v106, &v105);
  if ((*(unsigned int (**)(_QWORD *))(*a1[1] + 208))(a1[1]) != 1)
  {
    if ((*(unsigned int (**)(_QWORD *))(*a1[1] + 208))(a1[1]) != 3 || v106 != 0)
      goto LABEL_9;
LABEL_15:
    v102 = ((uint64_t (*)(_QWORD **, uint64_t, uint64_t, uint64_t))(*a1)[12])(a1, a3, a8, a9);
    goto LABEL_16;
  }
  if (!v106)
    goto LABEL_15;
LABEL_9:
  v102 = 0;
LABEL_16:
  if (v105 || !a11)
  {
    v27 = 0;
LABEL_18:
    v28 = 0;
    goto LABEL_19;
  }
  if (a11 == 1)
  {
    v27 = *a10;
    if ((*a10 - 0x40000000) > 0xC0000000)
      goto LABEL_18;
  }
  v28 = ((uint64_t (*)(_QWORD **, uint64_t, int *, uint64_t))(*a1)[12])(a1, a3, a10, a11);
  v27 = 0;
LABEL_19:
  v96 = v28;
  v97 = v27;
  if (a13)
  {
    if (a13 != 1 || (v29 = *a12, (*a12 - 0x40000000) <= 0xC0000000))
      v29 = ((uint64_t (*)(_QWORD **, uint64_t, int *, uint64_t))(*a1)[12])(a1, a3, a12, a13);
  }
  else
  {
    v29 = 0;
  }
  v98 = v29;
  if (a15)
  {
    if (a15 != 1 || (v99 = *a14, (*a14 - 0x40000000) <= 0xC0000000))
      v99 = ((uint64_t (*)(_QWORD **, uint64_t, int *, uint64_t))(*a1)[12])(a1, a3, a14, a15);
  }
  else
  {
    v99 = 0;
  }
  v30 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)a1[4][2] + 104))(a1[4][2]);
  v32 = a1[2];
  v31 = a1[3];
  v33 = *(_QWORD *)(v30 + 8);
  v34 = (llvm::MachineFunction *)v32[4];
  v35 = *(void **)(a3 + 48);
  v111 = v35;
  if (v35)
    llvm::MetadataTracking::track((uint64_t)&v111, (unsigned __int8 *)v35, 2);
  v36 = v33 + 48 * a4;
  v37 = *((_QWORD *)v34 + 28);
  if (v37)
    *((_QWORD *)v34 + 28) = *(_QWORD *)v37;
  else
    v37 = sub_1C484358C((uint64_t)v34 + 128, 72, 3);
  v115 = (unsigned __int8 *)v111;
  if (v111)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v111, (unsigned __int8 *)v111, (uint64_t)&v115);
    v111 = 0;
  }
  llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v37, v34, v36, &v115, 0);
  if (v115)
    llvm::MetadataTracking::untrack((uint64_t)&v115, v115);
  if (v111)
    llvm::MetadataTracking::untrack((uint64_t)&v111, (unsigned __int8 *)v111);
  v38 = v32[5];
  *(_QWORD *)(v37 + 24) = v38;
  v39 = *(_QWORD *)(v38 + 32);
  v40 = *(unsigned int *)(v37 + 40);
  if ((_DWORD)v40)
  {
    v58 = *(_QWORD *)(v37 + 32);
    v59 = *(_QWORD *)(v39 + 40);
    v60 = 32 * v40;
    do
    {
      if (!*(_BYTE *)v58)
      {
        v61 = *(unsigned int *)(v58 + 4);
        if ((int)v61 >= 0)
          v62 = (uint64_t *)(*(_QWORD *)(v59 + 272) + 8 * v61);
        else
          v62 = (uint64_t *)(*(_QWORD *)(v59 + 24) + 16 * (v61 & 0x7FFFFFFF) + 8);
        v63 = *v62;
        if (*v62)
        {
          v64 = *(_QWORD *)(v63 + 16);
          *(_QWORD *)(v63 + 16) = v58;
          *(_QWORD *)(v58 + 16) = v64;
          if ((*(_BYTE *)(v58 + 3) & 1) != 0)
          {
            *(_QWORD *)(v58 + 24) = v63;
          }
          else
          {
            *(_QWORD *)(v58 + 24) = 0;
            v62 = (uint64_t *)(v64 + 24);
          }
        }
        else
        {
          *(_QWORD *)(v58 + 16) = v58;
          *(_QWORD *)(v58 + 24) = 0;
        }
        *v62 = v58;
      }
      v58 += 32;
      v60 -= 32;
    }
    while (v60);
  }
  v41 = *(_QWORD *)(v39 + 728);
  if (v41)
    (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v41 + 24))(v41, v37);
  v42 = *v31 & 0xFFFFFFFFFFFFFFF8;
  *(_QWORD *)v37 = v42 | *(_QWORD *)v37 & 7;
  *(_QWORD *)(v37 + 8) = v31;
  *(_QWORD *)(v42 + 8) = v37;
  *v31 = *v31 & 7 | v37;
  v103 = v34;
  v104 = (llvm::MachineInstr *)v37;
  v43 = *(unsigned int *)(a2 + 24);
  if ((_DWORD)v43 == -1)
  {
    v46 = (int8x8_t)0xFFFFFFFFLL;
  }
  else
  {
    v44 = *(_DWORD *)(a3 + 20);
    if ((v44 & 0x40000000) != 0)
      v45 = *(_QWORD *)(a3 - 8);
    else
      v45 = a3 - 32 * (v44 & 0x7FFFFFF);
    v47 = *(int8x8_t **)(v45 + 32 * v43);
    v48 = v47 + 3;
    if (v47[4].i32[0] >= 0x41u)
      v48 = (int8x8_t *)*v48;
    v46 = *v48;
  }
  v49 = a20;
  if (!a15)
  {
    if (*(_BYTE *)(a2 + 62) && (*(unsigned int (**)(_QWORD *))(*a1[1] + 216))(a1[1]))
    {
      v50 = v46;
      if (*(_BYTE *)(a2 + 8))
        v51 = 7;
      else
        v51 = 6;
      v52 = (a20 + 1) << v51;
      v53 = a20;
      if (a20 & 1 | *(unsigned __int8 *)(a2 + 8))
        v54 = v52;
      else
        v54 = v52 + 64;
      v55 = ((uint64_t (*)(_QWORD **, uint64_t))(*a1)[42])(a1, v54);
    }
    else
    {
      v53 = a20;
      if ((*(unsigned int (**)(_QWORD *))(*a1[1] + 376))(a1[1]))
      {
        if (v46.i32[0] == -1)
        {
          v56 = 0xFFFFFFFFLL;
        }
        else if (v46.i32[0] <= 7u)
        {
          if (v46.i32[0] <= 3u)
          {
            if (v46.i32[0] <= 1u)
              v56 = 1;
            else
              v56 = 2;
          }
          else
          {
            v56 = 3;
          }
        }
        else
        {
          v56 = 4;
        }
      }
      else
      {
        v57 = (uint8x8_t)vcnt_s8(v46);
        v57.i16[0] = vaddlv_u8(v57);
        v56 = v57.u32[0];
      }
      v50 = v46;
      v55 = (*(uint64_t (**)(_QWORD *, uint64_t, BOOL))(*a1[1] + 256))(a1[1], v56, *(_BYTE *)(a2 + 8) == 0);
    }
    v65 = v55;
    v66 = a1[4][5];
    IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v66, "", 0);
    *(_QWORD *)(*(_QWORD *)(v66 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v65 & 0xFFFFFFFFFFFFFFFBLL;
    v68 = *(_QWORD *)(v66 + 8);
    if (v68)
      (*(void (**)(uint64_t))(*(_QWORD *)v68 + 24))(v68);
    v116 = 0;
    v117[0] = 0;
    v117[1] = 0;
    LODWORD(v115) = 0x1000000;
    HIDWORD(v115) = IncompleteVirtualRegister;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v37, v34, (const llvm::MachineOperand *)&v115);
    v46 = v50;
    v49 = v53;
  }
  v69 = *(_DWORD *)(a3 + 20);
  if ((v69 & 0x40000000) != 0)
    v70 = *(_QWORD *)(a3 - 8);
  else
    v70 = a3 - 32 * (v69 & 0x7FFFFFF);
  v71 = *(_QWORD *)(v70 + 32 * *(unsigned int *)(a2 + 32));
  v72 = *(unsigned __int8 *)(v71 + 16);
  if (v71)
    v73 = v72 == 5;
  else
    v73 = 0;
  if (v73)
  {
    if (*(unsigned __int16 *)(v71 + 18) - 38 > 0xC)
    {
      v74 = v49;
      v75 = 0;
      goto LABEL_109;
    }
    v71 = *(_QWORD *)(v71 - 32 * (*(_DWORD *)(v71 + 20) & 0x7FFFFFF));
    v72 = *(unsigned __int8 *)(v71 + 16);
  }
  v74 = v49;
  if (v72 == 77)
  {
    v71 = *(_QWORD *)(v71 - 32);
    v72 = *(unsigned __int8 *)(v71 + 16);
  }
  if (v72 >= 4)
    v75 = 0;
  else
    v75 = v71;
LABEL_109:
  v76 = (*(uint64_t (**)(_QWORD *, uint64_t, _QWORD))(*a1[1] + 312))(a1[1], v75, *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 40) + 56) + 40));
  v115 = (unsigned __int8 *)v117;
  v116 = 0x1000000000;
  v94 = v76;
  if (((*(uint64_t (**)(_QWORD *))(*a1[1] + 16))(a1[1]) & 1) != 0)
  {
    v77 = v74;
    (*(void (**)(_QWORD *))(*a1[1] + 288))(a1[1]);
    v79 = v103;
    v78 = v104;
    if ((_DWORD)v116)
    {
      v80 = v115;
      v81 = 8 * v116;
      do
      {
        v82 = *(_DWORD *)v80;
        v80 += 8;
        LODWORD(v111) = 1;
        v112 = 0;
        v113 = v82;
        llvm::MachineInstr::addOperand(v104, v103, (const llvm::MachineOperand *)&v111);
        v81 -= 8;
      }
      while (v81);
    }
    if (a15)
    {
      v112 = 0;
      v113 = 0;
      LODWORD(v111) = 0;
      HIDWORD(v111) = v99;
      v114 = 0;
      llvm::MachineInstr::addOperand(v104, v103, (const llvm::MachineOperand *)&v111);
    }
    v83 = v46;
    v84 = v77;
    v85 = a15;
    v86 = a19;
  }
  else
  {
    v79 = v103;
    v78 = v104;
    v83 = v46;
    v84 = v74;
    v86 = a19;
    v85 = a15;
  }
  llvm::MachineInstr::addOperand(v78, v79, a5);
  if ((*(unsigned int (**)(_QWORD *))(*a1[1] + 208))(a1[1]) == 1)
  {
    v112 = 0;
    v113 = 0;
    LODWORD(v111) = 0;
    HIDWORD(v111) = v102;
    v114 = 0;
    llvm::MachineInstr::addOperand(v78, v79, (const llvm::MachineOperand *)&v111);
  }
  if (((*(uint64_t (**)(_QWORD *))(*a1[1] + 232))(a1[1]) & 1) != 0 || *(_DWORD *)(a2 + 92) == -1)
    llvm::MachineInstr::addOperand(v78, v79, a6);
  if (!v102)
    goto LABEL_130;
  v87 = (*(uint64_t (**)(_QWORD *))(*a1[1] + 208))(a1[1]);
  v88 = v106;
  if (v87 == 3 && v106 == 0)
  {
    v112 = 0;
    v113 = 0;
    LODWORD(v111) = 0;
    HIDWORD(v111) = v102;
    v114 = 0;
    llvm::MachineInstr::addOperand(v78, v79, (const llvm::MachineOperand *)&v111);
    if ((*(unsigned int (**)(_QWORD *))(*a1[1] + 184))(a1[1]))
    {
      LODWORD(v111) = 1;
      v112 = 0;
      v113 = 0;
      llvm::MachineInstr::addOperand(v78, v79, (const llvm::MachineOperand *)&v111);
    }
LABEL_130:
    v88 = v106;
  }
  if (v88)
  {
    v112 = 0;
    v113 = 0;
    LODWORD(v111) = 0;
    HIDWORD(v111) = v88;
    v114 = 0;
    llvm::MachineInstr::addOperand(v78, v79, (const llvm::MachineOperand *)&v111);
    if ((*(unsigned int (**)(_QWORD *))(*a1[1] + 184))(a1[1]))
    {
      LODWORD(v111) = 1;
      v112 = 0;
      v113 = 0;
      llvm::MachineInstr::addOperand(v78, v79, (const llvm::MachineOperand *)&v111);
    }
  }
  if (v105)
  {
    v112 = 0;
    v113 = 0;
    LODWORD(v111) = 0;
    HIDWORD(v111) = v105;
    v114 = 0;
    llvm::MachineInstr::addOperand(v78, v79, (const llvm::MachineOperand *)&v111);
    if ((*(unsigned int (**)(_QWORD *))(*a1[1] + 184))(a1[1]))
    {
      LODWORD(v111) = 1;
      v112 = 0;
      v113 = 0;
      llvm::MachineInstr::addOperand(v78, v79, (const llvm::MachineOperand *)&v111);
    }
  }
  if (a11 && !v105)
  {
    if (v96)
    {
      if ((_DWORD)v86 == 7)
      {
        LODWORD(v111) = 1;
        v112 = 0;
        v113 = v96;
      }
      else
      {
        v112 = 0;
        v113 = 0;
        LODWORD(v111) = 0;
        HIDWORD(v111) = v96;
        v114 = 0;
      }
      llvm::MachineInstr::addOperand(v78, v79, (const llvm::MachineOperand *)&v111);
    }
    if (v97)
    {
      v107[0] = 0;
      (*(void (**)(_QWORD *, _DWORD *))(*a1[1] + 80))(a1[1], v107);
      v112 = 0;
      LODWORD(v113) = 64;
      LODWORD(v114) = 0;
      LODWORD(v111) = ((v107[0] & 0xFFF) << 8) | 7;
      HIDWORD(v111) = v97;
      llvm::MachineInstr::addOperand(v78, v79, (const llvm::MachineOperand *)&v111);
    }
    if ((*(unsigned int (**)(_QWORD *))(*a1[1] + 184))(a1[1])
      && (*(_DWORD *)(a2 + 92) == -1 || (*(unsigned int (**)(_QWORD *))(*a1[1] + 320))(a1[1])))
    {
      LODWORD(v111) = 1;
      v112 = 0;
      v113 = 0;
      llvm::MachineInstr::addOperand(v78, v79, (const llvm::MachineOperand *)&v111);
    }
  }
  if (a13)
  {
    v112 = 0;
    v113 = 0;
    LODWORD(v111) = 0;
    HIDWORD(v111) = v98;
    v114 = 0;
    llvm::MachineInstr::addOperand(v78, v79, (const llvm::MachineOperand *)&v111);
    if ((*(unsigned int (**)(_QWORD *))(*a1[1] + 184))(a1[1]))
    {
      if (!v85)
      {
        LODWORD(v111) = 1;
        v112 = 0;
        v113 = 0;
        llvm::MachineInstr::addOperand(v78, v79, (const llvm::MachineOperand *)&v111);
      }
    }
  }
  if (((*(uint64_t (**)(_QWORD *))(*a1[1] + 16))(a1[1]) & 1) == 0)
  {
    v111 = &v113;
    v112 = 0x1000000000;
    if (v85)
    {
      v108 = 0;
      v109 = 0;
      v107[0] = 0;
      v107[1] = v99;
      v110 = 0;
      llvm::MachineInstr::addOperand(v78, v79, (const llvm::MachineOperand *)v107);
    }
    (*(void (**)(_QWORD *, uint64_t, _QWORD *, uint64_t, uint64_t, int8x8_t, _QWORD, _QWORD, char, void **, char))(*a1[1] + 288))(a1[1], a2, a1[4], v86, v84, v83, a16, a17, a18, &v111, v94);
    v90 = (unsigned int *)v111;
    if ((_DWORD)v112)
    {
      v91 = 8 * v112;
      do
      {
        v92 = *v90;
        v90 += 2;
        v107[0] = 1;
        v108 = 0;
        v109 = v92;
        llvm::MachineInstr::addOperand(v78, v79, (const llvm::MachineOperand *)v107);
        v91 -= 8;
      }
      while (v91);
      v90 = (unsigned int *)v111;
    }
    if (v90 != (unsigned int *)&v113)
      free(v90);
  }
  if (*(_DWORD *)(a2 + 92) == -1 || (*(unsigned int (**)(_QWORD *))(*a1[1] + 336))(a1[1]))
  {
    LODWORD(v111) = 1;
    v112 = 0;
    v113 = 0;
    llvm::MachineInstr::addOperand(v78, v79, (const llvm::MachineOperand *)&v111);
  }
  if ((*(unsigned int (**)(_QWORD *))(*a1[1] + 24))(a1[1]))
    v93 = (llvm::MachineFunction **)((uint64_t (*)(_QWORD **, llvm::MachineFunction **))(*a1)[41])(a1, &v103);
  else
    v93 = &v103;
  *(_OWORD *)a7 = *(_OWORD *)v93;
  *(_BYTE *)(a7 + 16) = 1;
  if (v115 != (unsigned __int8 *)v117)
    free(v115);
}

uint64_t llvm::GPUFastISel::GetRegSequenceOrTargetIndexForValues(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4, _BYTE *a5)
{
  uint64_t v5;

  *a5 = 0;
  if (!a4)
    return 0;
  if (a4 != 1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
  v5 = *a3;
  if ((v5 - 0x40000000) < 0xC0000001)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)a1 + 96))(a1);
  *a5 = 1;
  return v5;
}

uint64_t llvm::GPUFastISel::GetRegSequenceForValues(_QWORD *a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  int *v4;
  uint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t IncompleteVirtualRegister;
  uint64_t v12;
  unint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  llvm::MachineFunction *v16;
  unsigned __int8 *v17;
  uint64_t v18;
  unint64_t v19;
  unsigned int v20;
  uint64_t v21;
  int *v22;
  uint64_t v23;
  int v24;
  unint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t *v30;
  uint64_t v31;
  uint64_t v32;
  llvm::MachineFunction *v33;
  unsigned __int8 *v34;
  uint64_t v35;
  unint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unsigned int v42;
  unint64_t v43;
  int v44;
  int v45;
  _BOOL8 v46;
  char v47;
  int v48;
  unsigned int v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  unsigned int v70;
  int v71;
  unsigned __int8 *v72;
  unsigned __int8 *v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;

  v4 = (int *)a3;
  v7 = *(_QWORD *)(a1[4] + 40);
  if (a4 == 1)
  {
    v8 = *a3;
    v9 = *(_QWORD *)(*(_QWORD *)(v7 + 24) + 16 * (v8 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
    v71 = 0;
    (*(void (**)(_QWORD *, unint64_t, int *))(*a1 + 304))(a1, v9, &v71);
    if (v71 == 16)
    {
      v10 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 336))(a1, 16);
      IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v7, "", 0);
      *(_QWORD *)(*(_QWORD *)(v7 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v10 & 0xFFFFFFFFFFFFFFFBLL;
      v12 = *(_QWORD *)(v7 + 8);
      if (v12)
        (*(void (**)(uint64_t))(*(_QWORD *)v12 + 24))(v12);
      v14 = a1[2];
      v13 = (unint64_t *)a1[3];
      v15 = *(_QWORD *)(a1[6] + 8);
      v16 = *(llvm::MachineFunction **)(v14 + 32);
      v17 = *(unsigned __int8 **)(a2 + 48);
      v72 = v17;
      if (v17)
        llvm::MetadataTracking::track((uint64_t)&v72, v17, 2);
      v18 = v15 + 912;
      v19 = *((_QWORD *)v16 + 28);
      if (v19)
        *((_QWORD *)v16 + 28) = *(_QWORD *)v19;
      else
        v19 = sub_1C484358C((uint64_t)v16 + 128, 72, 3);
      v73 = v72;
      if (v72)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v72, v72, (uint64_t)&v73);
        v72 = 0;
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v19, v16, v18, &v73, 0);
      if (v73)
        llvm::MetadataTracking::untrack((uint64_t)&v73, v73);
      if (v72)
        llvm::MetadataTracking::untrack((uint64_t)&v72, v72);
      v50 = *(_QWORD *)(v14 + 40);
      *(_QWORD *)(v19 + 24) = v50;
      v51 = *(_QWORD *)(v50 + 32);
      v52 = *(unsigned int *)(v19 + 40);
      if ((_DWORD)v52)
      {
        v63 = *(_QWORD *)(v19 + 32);
        v64 = *(_QWORD *)(v51 + 40);
        v65 = 32 * v52;
        do
        {
          if (!*(_BYTE *)v63)
          {
            v66 = *(unsigned int *)(v63 + 4);
            if ((int)v66 >= 0)
              v67 = (uint64_t *)(*(_QWORD *)(v64 + 272) + 8 * v66);
            else
              v67 = (uint64_t *)(*(_QWORD *)(v64 + 24) + 16 * (v66 & 0x7FFFFFFF) + 8);
            v68 = *v67;
            if (*v67)
            {
              v69 = *(_QWORD *)(v68 + 16);
              *(_QWORD *)(v68 + 16) = v63;
              *(_QWORD *)(v63 + 16) = v69;
              if ((*(_BYTE *)(v63 + 3) & 1) != 0)
              {
                *(_QWORD *)(v63 + 24) = v68;
              }
              else
              {
                *(_QWORD *)(v63 + 24) = 0;
                v67 = (uint64_t *)(v69 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v63 + 16) = v63;
              *(_QWORD *)(v63 + 24) = 0;
            }
            *v67 = v63;
          }
          v63 += 32;
          v65 -= 32;
        }
        while (v65);
      }
      v53 = *(_QWORD *)(v51 + 728);
      if (v53)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v53 + 24))(v53, v19);
      v54 = *v13 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v19 = v54 | *(_QWORD *)v19 & 7;
      *(_QWORD *)(v19 + 8) = v13;
      *(_QWORD *)(v54 + 8) = v19;
      *v13 = *v13 & 7 | v19;
      v74 = 0;
      v75 = 0;
      v76 = 0;
      LODWORD(v73) = 0x1000000;
      HIDWORD(v73) = IncompleteVirtualRegister;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v19, v16, (const llvm::MachineOperand *)&v73);
      v74 = 0;
      v75 = 0;
      LODWORD(v73) = 0;
      HIDWORD(v73) = v8;
      v76 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v19, v16, (const llvm::MachineOperand *)&v73);
    }
    else
    {
      return v8;
    }
  }
  else
  {
    v20 = 0;
    v21 = a4;
    if ((_DWORD)a4)
    {
      v22 = (int *)a3;
      v23 = a4;
      do
      {
        v24 = *v22++;
        v25 = *(_QWORD *)(*(_QWORD *)(v7 + 24) + 16 * (v24 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
        LODWORD(v73) = 0;
        (*(void (**)(_QWORD *, unint64_t, unsigned __int8 **))(*a1 + 304))(a1, v25, &v73);
        v20 += v73;
        --v23;
      }
      while (v23);
    }
    if (v20 <= 0x20)
      v26 = 32;
    else
      v26 = v20;
    if ((v26 & 0x1F) == 0x10)
      v27 = v26 + 16;
    else
      v27 = v26;
    v28 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a1 + 336))(a1, v27);
    IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v7, "", 0);
    *(_QWORD *)(*(_QWORD *)(v7 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v28 & 0xFFFFFFFFFFFFFFFBLL;
    v29 = *(_QWORD *)(v7 + 8);
    if (v29)
      (*(void (**)(uint64_t))(*(_QWORD *)v29 + 24))(v29);
    v31 = a1[2];
    v30 = (unint64_t *)a1[3];
    v32 = *(_QWORD *)(a1[6] + 8);
    v33 = *(llvm::MachineFunction **)(v31 + 32);
    v34 = *(unsigned __int8 **)(a2 + 48);
    v72 = v34;
    if (v34)
      llvm::MetadataTracking::track((uint64_t)&v72, v34, 2);
    v35 = v32 + 864;
    v36 = *((_QWORD *)v33 + 28);
    if (v36)
      *((_QWORD *)v33 + 28) = *(_QWORD *)v36;
    else
      v36 = sub_1C484358C((uint64_t)v33 + 128, 72, 3);
    v73 = v72;
    if (v72)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v72, v72, (uint64_t)&v73);
      v72 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v36, v33, v35, &v73, 0);
    if (v73)
      llvm::MetadataTracking::untrack((uint64_t)&v73, v73);
    if (v72)
      llvm::MetadataTracking::untrack((uint64_t)&v72, v72);
    v37 = *(_QWORD *)(v31 + 40);
    *(_QWORD *)(v36 + 24) = v37;
    v38 = *(_QWORD *)(v37 + 32);
    v39 = *(unsigned int *)(v36 + 40);
    if ((_DWORD)v39)
    {
      v56 = *(_QWORD *)(v36 + 32);
      v57 = *(_QWORD *)(v38 + 40);
      v58 = 32 * v39;
      do
      {
        if (!*(_BYTE *)v56)
        {
          v59 = *(unsigned int *)(v56 + 4);
          if ((int)v59 >= 0)
            v60 = (uint64_t *)(*(_QWORD *)(v57 + 272) + 8 * v59);
          else
            v60 = (uint64_t *)(*(_QWORD *)(v57 + 24) + 16 * (v59 & 0x7FFFFFFF) + 8);
          v61 = *v60;
          if (*v60)
          {
            v62 = *(_QWORD *)(v61 + 16);
            *(_QWORD *)(v61 + 16) = v56;
            *(_QWORD *)(v56 + 16) = v62;
            if ((*(_BYTE *)(v56 + 3) & 1) != 0)
            {
              *(_QWORD *)(v56 + 24) = v61;
            }
            else
            {
              *(_QWORD *)(v56 + 24) = 0;
              v60 = (uint64_t *)(v62 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v56 + 16) = v56;
            *(_QWORD *)(v56 + 24) = 0;
          }
          *v60 = v56;
        }
        v56 += 32;
        v58 -= 32;
      }
      while (v58);
    }
    v40 = *(_QWORD *)(v38 + 728);
    if (v40)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v40 + 24))(v40, v36);
    v41 = *v30 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v36 = v41 | *(_QWORD *)v36 & 7;
    *(_QWORD *)(v36 + 8) = v30;
    *(_QWORD *)(v41 + 8) = v36;
    *v30 = *v30 & 7 | v36;
    v74 = 0;
    v75 = 0;
    v76 = 0;
    LODWORD(v73) = 0x1000000;
    HIDWORD(v73) = IncompleteVirtualRegister;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v36, v33, (const llvm::MachineOperand *)&v73);
    if (v21)
    {
      v70 = IncompleteVirtualRegister;
      v42 = 0;
      do
      {
        v43 = *(_QWORD *)(*(_QWORD *)(v7 + 24) + 16 * (*v4 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
        LODWORD(v72) = 0;
        (*(void (**)(_QWORD *, unint64_t, unsigned __int8 **))(*a1 + 304))(a1, v43, &v72);
        v44 = *v4++;
        v45 = (int)v72;
        v74 = 0;
        LODWORD(v73) = 0;
        HIDWORD(v73) = v44;
        v75 = 0;
        v76 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v36, v33, (const llvm::MachineOperand *)&v73);
        v46 = v45 == 16;
        v47 = v45 != 16;
        if (v45 == 16)
          v48 = 1;
        else
          v48 = 2;
        v49 = (*(uint64_t (**)(_QWORD *, _BOOL8, _QWORD))(*a1 + 312))(a1, v46, v42 >> v47);
        LODWORD(v73) = 1;
        v74 = 0;
        v75 = v49;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v36, v33, (const llvm::MachineOperand *)&v73);
        v42 += v48;
        --v21;
      }
      while (v21);
      return v70;
    }
  }
  return IncompleteVirtualRegister;
}

void llvm::GPUFastISel::ReplaceInstructionUses(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4, uint64_t a5, unsigned int a6, unsigned int a7)
{
  int v12;
  unsigned int v13;
  uint64_t v14;
  unsigned int v15;
  int v16;
  int v18;
  int v19;
  int8x8_t v20;
  int v21;
  uint8x8_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t *v29;
  uint64_t v30;
  llvm::MachineFunction *v31;
  unsigned __int8 *v32;
  unint64_t v33;
  int v34;
  uint64_t v35;
  unint64_t *v36;
  uint64_t v37;
  llvm::MachineFunction *v38;
  unsigned __int8 *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t v46;
  __int16 v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  unint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t *v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  unsigned int v69;
  unint64_t *v70;
  uint64_t v71;
  uint64_t v72;
  llvm::MachineFunction *v73;
  void *v74;
  unint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  __int16 v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t *v89;
  uint64_t v90;
  uint64_t v91;
  llvm::MachineFunction *v92;
  void *v93;
  uint64_t v94;
  unint64_t v95;
  uint64_t v96;
  unsigned int v97;
  int v98;
  int v99;
  uint64_t v100;
  unint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  llvm::MachineFunction *v104;
  unsigned __int8 *v105;
  unint64_t v106;
  int v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  unint64_t v112;
  int v113;
  unsigned int v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  unint64_t *v118;
  uint64_t v119;
  uint64_t v120;
  llvm::MachineFunction *v121;
  unsigned __int8 *v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  unint64_t v128;
  int v129;
  unsigned int v130;
  unint64_t *v131;
  uint64_t v132;
  uint64_t v133;
  llvm::MachineFunction *v134;
  unsigned __int8 *v135;
  unint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t *v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t *v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  uint64_t v165;
  unint64_t *v166;
  uint64_t v167;
  uint64_t v168;
  llvm::MachineFunction *v169;
  void *v170;
  unint64_t v171;
  int v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  unint64_t v177;
  __int16 v178;
  unsigned int v179;
  uint64_t v180;
  unint64_t *v181;
  uint64_t v182;
  uint64_t v183;
  llvm::MachineFunction *v184;
  void *v185;
  unint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unint64_t v191;
  __int16 v192;
  unsigned int v193;
  unint64_t *v194;
  uint64_t v195;
  uint64_t v196;
  llvm::MachineFunction *v197;
  void *v198;
  unint64_t v199;
  uint64_t v200;
  uint64_t v201;
  uint64_t v202;
  uint64_t v203;
  unint64_t v204;
  uint64_t v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t *v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t *v216;
  uint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  uint64_t v221;
  uint64_t v222;
  uint64_t *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  unint64_t *v228;
  uint64_t v229;
  llvm::MachineFunction *v230;
  void *v231;
  unint64_t v232;
  uint64_t v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t v236;
  unint64_t v237;
  __int16 v238;
  uint64_t v239;
  uint64_t v240;
  uint64_t v241;
  uint64_t v242;
  uint64_t *v243;
  uint64_t v244;
  uint64_t v245;
  unint64_t *v246;
  uint64_t v247;
  uint64_t v248;
  llvm::MachineFunction *v249;
  void *v250;
  unint64_t v251;
  uint64_t v252;
  uint64_t v253;
  uint64_t v254;
  uint64_t v255;
  unint64_t v256;
  int v257;
  uint64_t v258;
  uint64_t v259;
  uint64_t v260;
  uint64_t v261;
  uint64_t *v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  uint64_t v268;
  unint64_t v269;
  unsigned int v270;
  llvm::MachineInstr *v271;
  uint64_t v272;
  unint64_t *v273;
  uint64_t v274;
  uint64_t v275;
  void *v276;
  uint64_t v277;
  unint64_t v278;
  unint64_t v279;
  int v280;
  int v281;
  uint64_t v282;
  unint64_t *v283;
  uint64_t v284;
  uint64_t v285;
  llvm::MachineFunction *v286;
  void *v287;
  unint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  unint64_t v293;
  __int16 v294;
  unsigned int v295;
  unsigned int v296;
  unint64_t *v297;
  uint64_t v298;
  uint64_t v299;
  llvm::MachineFunction *v300;
  void *v301;
  unint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  unint64_t v307;
  uint64_t v308;
  uint64_t v309;
  uint64_t v310;
  uint64_t v311;
  uint64_t *v312;
  uint64_t v313;
  uint64_t v314;
  uint64_t v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t *v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  uint64_t *v326;
  uint64_t v327;
  uint64_t v328;
  uint64_t v329;
  uint64_t v330;
  uint64_t v331;
  uint64_t v332;
  unint64_t v333;
  __int16 v334;
  uint64_t v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  uint64_t *v339;
  uint64_t v340;
  uint64_t v341;
  uint64_t v342;
  unsigned int v343;
  char *v344;
  unsigned int v345;
  unsigned int v346;
  unint64_t v347;
  int v348;
  uint64_t v349;
  unsigned int v350;
  unint64_t v351;
  unsigned int v352;
  int IncompleteVirtualRegister;
  int v355;
  int v356;
  unsigned int v357;
  int v358;
  _QWORD *v359;
  uint64_t v360;
  unsigned __int8 *v361;
  __int128 v362;
  uint64_t v363;
  uint64_t v364;
  void *v365;
  uint64_t v366;
  _QWORD v367[4];

  v367[2] = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a2 + 12) == -1)
    return;
  v12 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)a1 + 296))(a1, a3);
  v13 = *(_DWORD *)(*(_QWORD *)(a5 + 32) + 4);
  v14 = *(_QWORD *)(*(_QWORD *)(a1 + 32) + 40);
  v360 = 0;
  v357 = v13;
  v15 = (*(uint64_t (**)(uint64_t, unint64_t, char *))(*(_QWORD *)a1 + 304))(a1, *(_QWORD *)(*(_QWORD *)(v14 + 24) + 16 * (v13 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, (char *)&v360 + 4);
  v358 = v12;
  v349 = v14;
  (*(void (**)(uint64_t, unint64_t, uint64_t *))(*(_QWORD *)a1 + 304))(a1, *(_QWORD *)(*(_QWORD *)(v14 + 24) + 16 * (v12 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8, &v360);
  v342 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 336))(a1, 32);
  v16 = v15;
  if ((*(_DWORD *)(*a3 + 8) & 0xFE) == 0x12)
  {
    if (v15 == 3 && *(_DWORD *)(*a3 + 32) == 4)
      v16 = 4;
    else
      v16 = v15;
  }
  v345 = v16;
  v19 = v360;
  v18 = HIDWORD(v360);
  v359 = a3;
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 376))(*(_QWORD *)(a1 + 8)))
  {
    if (a7 == -1)
      goto LABEL_94;
    if (a7 <= 7)
    {
      if (a7 <= 3)
      {
        if (a7 <= 1)
          v21 = 1;
        else
          v21 = 2;
      }
      else
      {
        v21 = 3;
      }
    }
    else
    {
      v21 = 4;
    }
  }
  else
  {
    v20.i32[0] = a7;
    v22 = (uint8x8_t)vcnt_s8(v20);
    v22.i16[0] = vaddlv_u8(v22);
    v21 = v22.i32[0];
  }
  v350 = v21;
  if (a7 != -1)
  {
    v23 = *(_DWORD *)(a2 + 12);
    if (v350 != v23)
    {
      v24 = v350;
      if (v23 > v350)
        v24 = *(_DWORD *)(a2 + 12);
      v365 = v367;
      v366 = 0x400000000;
      v346 = v24;
      if (v24)
      {
        v25 = 0;
        v26 = 0;
        v343 = a7;
        do
        {
          if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 376))(*(_QWORD *)(a1 + 8)))
            v27 = v26;
          else
            v27 = v25;
          if (((a7 >> v26) & 1) != 0)
          {
            if (*(_BYTE *)(a2 + 8))
            {
              v28 = *(_QWORD *)(a1 + 16);
              v29 = *(unint64_t **)(a1 + 24);
              v30 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
              v31 = *(llvm::MachineFunction **)(v28 + 32);
              v32 = (unsigned __int8 *)a3[6];
              v361 = v32;
              if (v32)
                llvm::MetadataTracking::track((uint64_t)&v361, v32, 2);
              v33 = *((_QWORD *)v31 + 28);
              if (v33)
                *((_QWORD *)v31 + 28) = *(_QWORD *)v33;
              else
                v33 = sub_1C484358C((uint64_t)v31 + 128, 72, 3);
              *(_QWORD *)&v362 = v361;
              if (v361)
              {
                llvm::MetadataTracking::retrack((uint64_t)&v361, v361, (uint64_t)&v362);
                v361 = 0;
              }
              llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v33, v31, v30 + 912, (unsigned __int8 **)&v362, 0);
              if ((_QWORD)v362)
                llvm::MetadataTracking::untrack((uint64_t)&v362, (unsigned __int8 *)v362);
              if (v361)
                llvm::MetadataTracking::untrack((uint64_t)&v361, v361);
              v42 = *(_QWORD *)(v28 + 40);
              *(_QWORD *)(v33 + 24) = v42;
              v43 = *(_QWORD *)(v42 + 32);
              v44 = *(unsigned int *)(v33 + 40);
              if ((_DWORD)v44)
              {
                v54 = *(_QWORD *)(v33 + 32);
                v55 = *(_QWORD *)(v43 + 40);
                v56 = 32 * v44;
                do
                {
                  if (!*(_BYTE *)v54)
                  {
                    v57 = *(unsigned int *)(v54 + 4);
                    if ((int)v57 >= 0)
                      v58 = (uint64_t *)(*(_QWORD *)(v55 + 272) + 8 * v57);
                    else
                      v58 = (uint64_t *)(*(_QWORD *)(v55 + 24) + 16 * (v57 & 0x7FFFFFFF) + 8);
                    v59 = *v58;
                    if (*v58)
                    {
                      v60 = *(_QWORD *)(v59 + 16);
                      *(_QWORD *)(v59 + 16) = v54;
                      *(_QWORD *)(v54 + 16) = v60;
                      if ((*(_BYTE *)(v54 + 3) & 1) != 0)
                      {
                        *(_QWORD *)(v54 + 24) = v59;
                      }
                      else
                      {
                        *(_QWORD *)(v54 + 24) = 0;
                        v58 = (uint64_t *)(v60 + 24);
                      }
                    }
                    else
                    {
                      *(_QWORD *)(v54 + 16) = v54;
                      *(_QWORD *)(v54 + 24) = 0;
                    }
                    *v58 = v54;
                  }
                  v54 += 32;
                  v56 -= 32;
                }
                while (v56);
              }
              v45 = *(_QWORD *)(v43 + 728);
              if (v45)
                (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v45 + 24))(v45, v33);
              v46 = *v29 & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v33 = v46 | *(_QWORD *)v33 & 7;
              *(_QWORD *)(v33 + 8) = v29;
              *(_QWORD *)(v46 + 8) = v33;
              *v29 = *v29 & 7 | v33;
              HIDWORD(v362) = 0;
              v363 = 0;
              v364 = 0;
              *(_QWORD *)((char *)&v362 + 4) = v26 + v358;
              LODWORD(v362) = 0x1000000;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v33, v31, (const llvm::MachineOperand *)&v362);
              if (v350 == 1)
                v47 = 0;
              else
                v47 = (*(uint64_t (**)(uint64_t, _QWORD, uint64_t))(*(_QWORD *)a1 + 312))(a1, 0, v27);
              a7 = v343;
              *((_QWORD *)&v362 + 1) = 0;
              v363 = 0;
              v364 = 0;
              LODWORD(v362) = (v47 & 0xFFF) << 8;
              DWORD1(v362) = v357;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v33, v31, (const llvm::MachineOperand *)&v362);
            }
            else
            {
              v41 = v366;
              if (v366 >= (unint64_t)HIDWORD(v366))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v365, (uint64_t)v367, v366 + 1, 4);
                v41 = v366;
              }
              *((_DWORD *)v365 + v41) = v27;
              LODWORD(v366) = v366 + 1;
            }
            ++v25;
          }
          else if (*(_BYTE *)(a2 + 8))
          {
            v34 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 320))(a1, 1);
            v35 = *(_QWORD *)(a1 + 16);
            v36 = *(unint64_t **)(a1 + 24);
            v37 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
            v38 = *(llvm::MachineFunction **)(v35 + 32);
            v39 = (unsigned __int8 *)a3[6];
            v361 = v39;
            if (v39)
              llvm::MetadataTracking::track((uint64_t)&v361, v39, 2);
            v40 = *((_QWORD *)v38 + 28);
            if (v40)
              *((_QWORD *)v38 + 28) = *(_QWORD *)v40;
            else
              v40 = sub_1C484358C((uint64_t)v38 + 128, 72, 3);
            *(_QWORD *)&v362 = v361;
            if (v361)
            {
              llvm::MetadataTracking::retrack((uint64_t)&v361, v361, (uint64_t)&v362);
              v361 = 0;
            }
            llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v40, v38, v37 + 912, (unsigned __int8 **)&v362, 0);
            if ((_QWORD)v362)
              llvm::MetadataTracking::untrack((uint64_t)&v362, (unsigned __int8 *)v362);
            if (v361)
              llvm::MetadataTracking::untrack((uint64_t)&v361, v361);
            v49 = *(_QWORD *)(v35 + 40);
            *(_QWORD *)(v40 + 24) = v49;
            v50 = *(_QWORD *)(v49 + 32);
            v51 = *(unsigned int *)(v40 + 40);
            if ((_DWORD)v51)
            {
              v61 = *(_QWORD *)(v40 + 32);
              v62 = *(_QWORD *)(v50 + 40);
              v63 = 32 * v51;
              do
              {
                if (!*(_BYTE *)v61)
                {
                  v64 = *(unsigned int *)(v61 + 4);
                  if ((int)v64 >= 0)
                    v65 = (uint64_t *)(*(_QWORD *)(v62 + 272) + 8 * v64);
                  else
                    v65 = (uint64_t *)(*(_QWORD *)(v62 + 24) + 16 * (v64 & 0x7FFFFFFF) + 8);
                  v66 = *v65;
                  if (*v65)
                  {
                    v67 = *(_QWORD *)(v66 + 16);
                    *(_QWORD *)(v66 + 16) = v61;
                    *(_QWORD *)(v61 + 16) = v67;
                    if ((*(_BYTE *)(v61 + 3) & 1) != 0)
                    {
                      *(_QWORD *)(v61 + 24) = v66;
                    }
                    else
                    {
                      *(_QWORD *)(v61 + 24) = 0;
                      v65 = (uint64_t *)(v67 + 24);
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v61 + 16) = v61;
                    *(_QWORD *)(v61 + 24) = 0;
                  }
                  *v65 = v61;
                }
                v61 += 32;
                v63 -= 32;
              }
              while (v63);
            }
            v52 = *(_QWORD *)(v50 + 728);
            if (v52)
              (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v52 + 24))(v52, v40);
            v53 = *v36 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v40 = v53 | *(_QWORD *)v40 & 7;
            *(_QWORD *)(v40 + 8) = v36;
            *(_QWORD *)(v53 + 8) = v40;
            *v36 = *v36 & 7 | v40;
            HIDWORD(v362) = 0;
            v363 = 0;
            v364 = 0;
            *(_QWORD *)((char *)&v362 + 4) = v26 + v358;
            LODWORD(v362) = 0x1000000;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v40, v38, (const llvm::MachineOperand *)&v362);
            *((_QWORD *)&v362 + 1) = 0;
            LODWORD(v362) = 0;
            DWORD1(v362) = v34;
            v363 = 0;
            v364 = 0;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v40, v38, (const llvm::MachineOperand *)&v362);
            a7 = v343;
          }
          else
          {
            v48 = v366;
            if (v366 >= (unint64_t)HIDWORD(v366))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v365, (uint64_t)v367, v366 + 1, 4);
              v48 = v366;
            }
            *((_DWORD *)v365 + v48) = -1;
            LODWORD(v366) = v366 + 1;
          }
          ++v26;
        }
        while (v26 != v346);
        if ((_DWORD)v366)
        {
          v96 = 0;
          v97 = 0;
          v347 = v342 & 0xFFFFFFFFFFFFFFFBLL;
          do
          {
            v98 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 320))(a1, 0);
            v99 = v98;
            if (*((_DWORD *)v365 + v96) == -1)
            {
              v107 = v98;
            }
            else
            {
              IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v349, "", 0);
              *(_QWORD *)(*(_QWORD *)(v349 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v347;
              v100 = *(_QWORD *)(v349 + 8);
              if (v100)
                (*(void (**)(uint64_t))(*(_QWORD *)v100 + 24))(v100);
              v102 = *(_QWORD *)(a1 + 16);
              v101 = *(unint64_t **)(a1 + 24);
              v103 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
              v104 = *(llvm::MachineFunction **)(v102 + 32);
              v105 = (unsigned __int8 *)v359[6];
              v361 = v105;
              if (v105)
                llvm::MetadataTracking::track((uint64_t)&v361, v105, 2);
              v106 = *((_QWORD *)v104 + 28);
              if (v106)
                *((_QWORD *)v104 + 28) = *(_QWORD *)v106;
              else
                v106 = sub_1C484358C((uint64_t)v104 + 128, 72, 3);
              *(_QWORD *)&v362 = v361;
              if (v361)
              {
                llvm::MetadataTracking::retrack((uint64_t)&v361, v361, (uint64_t)&v362);
                v361 = 0;
              }
              llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v106, v104, v103 + 432, (unsigned __int8 **)&v362, 0);
              if ((_QWORD)v362)
                llvm::MetadataTracking::untrack((uint64_t)&v362, (unsigned __int8 *)v362);
              if (v361)
                llvm::MetadataTracking::untrack((uint64_t)&v361, v361);
              v108 = *(_QWORD *)(v102 + 40);
              *(_QWORD *)(v106 + 24) = v108;
              v109 = *(_QWORD *)(v108 + 32);
              v110 = *(unsigned int *)(v106 + 40);
              if ((_DWORD)v110)
              {
                v149 = *(_QWORD *)(v106 + 32);
                v150 = *(_QWORD *)(v109 + 40);
                v151 = 32 * v110;
                do
                {
                  if (!*(_BYTE *)v149)
                  {
                    v152 = *(unsigned int *)(v149 + 4);
                    if ((int)v152 >= 0)
                      v153 = (uint64_t *)(*(_QWORD *)(v150 + 272) + 8 * v152);
                    else
                      v153 = (uint64_t *)(*(_QWORD *)(v150 + 24) + 16 * (v152 & 0x7FFFFFFF) + 8);
                    v154 = *v153;
                    if (*v153)
                    {
                      v155 = *(_QWORD *)(v154 + 16);
                      *(_QWORD *)(v154 + 16) = v149;
                      *(_QWORD *)(v149 + 16) = v155;
                      if ((*(_BYTE *)(v149 + 3) & 1) != 0)
                      {
                        *(_QWORD *)(v149 + 24) = v154;
                      }
                      else
                      {
                        *(_QWORD *)(v149 + 24) = 0;
                        v153 = (uint64_t *)(v155 + 24);
                      }
                    }
                    else
                    {
                      *(_QWORD *)(v149 + 16) = v149;
                      *(_QWORD *)(v149 + 24) = 0;
                    }
                    *v153 = v149;
                  }
                  v149 += 32;
                  v151 -= 32;
                }
                while (v151);
              }
              v111 = *(_QWORD *)(v109 + 728);
              if (v111)
                (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v111 + 24))(v111, v106);
              v112 = *v101 & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v106 = v112 | *(_QWORD *)v106 & 7;
              *(_QWORD *)(v106 + 8) = v101;
              *(_QWORD *)(v112 + 8) = v106;
              *v101 = *v101 & 7 | v106;
              *((_QWORD *)&v362 + 1) = 0;
              v363 = 0;
              v364 = 0;
              v107 = IncompleteVirtualRegister;
              LODWORD(v362) = 0x1000000;
              DWORD1(v362) = IncompleteVirtualRegister;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v106, v104, (const llvm::MachineOperand *)&v362);
              *((_QWORD *)&v362 + 1) = 0;
              LODWORD(v362) = 0;
              DWORD1(v362) = v99;
              v363 = 0;
              v364 = 0;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v106, v104, (const llvm::MachineOperand *)&v362);
              if (v350 != 1
                || (v113 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 376))(*(_QWORD *)(a1 + 8))) != 0)
              {
                LOWORD(v113) = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 312))(a1, 1, *((unsigned int *)v365 + v96));
              }
              *((_QWORD *)&v362 + 1) = 0;
              v363 = 0;
              v364 = 0;
              LODWORD(v362) = (v113 & 0xFFF) << 8;
              DWORD1(v362) = v357;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v106, v104, (const llvm::MachineOperand *)&v362);
              v114 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 312))(a1, 1, 0);
              LODWORD(v362) = 1;
              *((_QWORD *)&v362 + 1) = 0;
              v363 = v114;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v106, v104, (const llvm::MachineOperand *)&v362);
            }
            v115 = v97 | 1;
            if (v366 <= v115 || *((_DWORD *)v365 + v115) == -1)
            {
              v116 = v107;
            }
            else
            {
              v355 = v107;
              v116 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v349, "", 0);
              *(_QWORD *)(*(_QWORD *)(v349 + 24) + 16 * (v116 & 0x7FFFFFFF)) = v347;
              v117 = *(_QWORD *)(v349 + 8);
              if (v117)
                (*(void (**)(uint64_t))(*(_QWORD *)v117 + 24))(v117);
              v119 = *(_QWORD *)(a1 + 16);
              v118 = *(unint64_t **)(a1 + 24);
              v120 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
              v121 = *(llvm::MachineFunction **)(v119 + 32);
              v122 = (unsigned __int8 *)v359[6];
              v361 = v122;
              if (v122)
                llvm::MetadataTracking::track((uint64_t)&v361, v122, 2);
              v123 = *((_QWORD *)v121 + 28);
              if (v123)
                *((_QWORD *)v121 + 28) = *(_QWORD *)v123;
              else
                v123 = sub_1C484358C((uint64_t)v121 + 128, 72, 3);
              *(_QWORD *)&v362 = v361;
              if (v361)
              {
                llvm::MetadataTracking::retrack((uint64_t)&v361, v361, (uint64_t)&v362);
                v361 = 0;
              }
              llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v123, v121, v120 + 432, (unsigned __int8 **)&v362, 0);
              if ((_QWORD)v362)
                llvm::MetadataTracking::untrack((uint64_t)&v362, (unsigned __int8 *)v362);
              if (v361)
                llvm::MetadataTracking::untrack((uint64_t)&v361, v361);
              v124 = *(_QWORD *)(v119 + 40);
              *(_QWORD *)(v123 + 24) = v124;
              v125 = *(_QWORD *)(v124 + 32);
              v126 = *(unsigned int *)(v123 + 40);
              if ((_DWORD)v126)
              {
                v156 = *(_QWORD *)(v123 + 32);
                v157 = *(_QWORD *)(v125 + 40);
                v158 = 32 * v126;
                do
                {
                  if (!*(_BYTE *)v156)
                  {
                    v159 = *(unsigned int *)(v156 + 4);
                    if ((int)v159 >= 0)
                      v160 = (uint64_t *)(*(_QWORD *)(v157 + 272) + 8 * v159);
                    else
                      v160 = (uint64_t *)(*(_QWORD *)(v157 + 24) + 16 * (v159 & 0x7FFFFFFF) + 8);
                    v161 = *v160;
                    if (*v160)
                    {
                      v162 = *(_QWORD *)(v161 + 16);
                      *(_QWORD *)(v161 + 16) = v156;
                      *(_QWORD *)(v156 + 16) = v162;
                      if ((*(_BYTE *)(v156 + 3) & 1) != 0)
                      {
                        *(_QWORD *)(v156 + 24) = v161;
                      }
                      else
                      {
                        *(_QWORD *)(v156 + 24) = 0;
                        v160 = (uint64_t *)(v162 + 24);
                      }
                    }
                    else
                    {
                      *(_QWORD *)(v156 + 16) = v156;
                      *(_QWORD *)(v156 + 24) = 0;
                    }
                    *v160 = v156;
                  }
                  v156 += 32;
                  v158 -= 32;
                }
                while (v158);
              }
              v127 = *(_QWORD *)(v125 + 728);
              if (v127)
                (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v127 + 24))(v127, v123);
              v128 = *v118 & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v123 = v128 | *(_QWORD *)v123 & 7;
              *(_QWORD *)(v123 + 8) = v118;
              *(_QWORD *)(v128 + 8) = v123;
              *v118 = *v118 & 7 | v123;
              *((_QWORD *)&v362 + 1) = 0;
              v363 = 0;
              v364 = 0;
              LODWORD(v362) = 0x1000000;
              DWORD1(v362) = v116;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v123, v121, (const llvm::MachineOperand *)&v362);
              *((_QWORD *)&v362 + 1) = 0;
              LODWORD(v362) = 0;
              DWORD1(v362) = v355;
              v363 = 0;
              v364 = 0;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v123, v121, (const llvm::MachineOperand *)&v362);
              if (v350 != 1
                || (v129 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 376))(*(_QWORD *)(a1 + 8))) != 0)
              {
                LOWORD(v129) = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 312))(a1, 1, *((unsigned int *)v365 + v115));
              }
              *((_QWORD *)&v362 + 1) = 0;
              v363 = 0;
              v364 = 0;
              LODWORD(v362) = (v129 & 0xFFF) << 8;
              DWORD1(v362) = v357;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v123, v121, (const llvm::MachineOperand *)&v362);
              v130 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 312))(a1, 1, 1);
              LODWORD(v362) = 1;
              *((_QWORD *)&v362 + 1) = 0;
              v363 = v130;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v123, v121, (const llvm::MachineOperand *)&v362);
            }
            v132 = *(_QWORD *)(a1 + 16);
            v131 = *(unint64_t **)(a1 + 24);
            v133 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
            v134 = *(llvm::MachineFunction **)(v132 + 32);
            v135 = (unsigned __int8 *)v359[6];
            v361 = v135;
            if (v135)
              llvm::MetadataTracking::track((uint64_t)&v361, v135, 2);
            v136 = *((_QWORD *)v134 + 28);
            if (v136)
              *((_QWORD *)v134 + 28) = *(_QWORD *)v136;
            else
              v136 = sub_1C484358C((uint64_t)v134 + 128, 72, 3);
            *(_QWORD *)&v362 = v361;
            if (v361)
            {
              llvm::MetadataTracking::retrack((uint64_t)&v361, v361, (uint64_t)&v362);
              v361 = 0;
            }
            llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v136, v134, v133 + 912, (unsigned __int8 **)&v362, 0);
            if ((_QWORD)v362)
              llvm::MetadataTracking::untrack((uint64_t)&v362, (unsigned __int8 *)v362);
            if (v361)
              llvm::MetadataTracking::untrack((uint64_t)&v361, v361);
            v137 = *(_QWORD *)(v132 + 40);
            *(_QWORD *)(v136 + 24) = v137;
            v138 = *(_QWORD *)(v137 + 32);
            v139 = *(unsigned int *)(v136 + 40);
            if ((_DWORD)v139)
            {
              v142 = *(_QWORD *)(v136 + 32);
              v143 = *(_QWORD *)(v138 + 40);
              v144 = 32 * v139;
              do
              {
                if (!*(_BYTE *)v142)
                {
                  v145 = *(unsigned int *)(v142 + 4);
                  if ((int)v145 >= 0)
                    v146 = (uint64_t *)(*(_QWORD *)(v143 + 272) + 8 * v145);
                  else
                    v146 = (uint64_t *)(*(_QWORD *)(v143 + 24) + 16 * (v145 & 0x7FFFFFFF) + 8);
                  v147 = *v146;
                  if (*v146)
                  {
                    v148 = *(_QWORD *)(v147 + 16);
                    *(_QWORD *)(v147 + 16) = v142;
                    *(_QWORD *)(v142 + 16) = v148;
                    if ((*(_BYTE *)(v142 + 3) & 1) != 0)
                    {
                      *(_QWORD *)(v142 + 24) = v147;
                    }
                    else
                    {
                      *(_QWORD *)(v142 + 24) = 0;
                      v146 = (uint64_t *)(v148 + 24);
                    }
                  }
                  else
                  {
                    *(_QWORD *)(v142 + 16) = v142;
                    *(_QWORD *)(v142 + 24) = 0;
                  }
                  *v146 = v142;
                }
                v142 += 32;
                v144 -= 32;
              }
              while (v144);
            }
            v140 = *(_QWORD *)(v138 + 728);
            if (v140)
              (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v140 + 24))(v140, v136);
            v141 = *v131 & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v136 = v141 | *(_QWORD *)v136 & 7;
            *(_QWORD *)(v136 + 8) = v131;
            *(_QWORD *)(v141 + 8) = v136;
            *v131 = *v131 & 7 | v136;
            HIDWORD(v362) = 0;
            v363 = 0;
            v364 = 0;
            *(_QWORD *)((char *)&v362 + 4) = v358 + (v97 >> 1);
            LODWORD(v362) = 0x1000000;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v136, v134, (const llvm::MachineOperand *)&v362);
            *((_QWORD *)&v362 + 1) = 0;
            LODWORD(v362) = 0;
            DWORD1(v362) = v116;
            v363 = 0;
            v364 = 0;
            llvm::MachineInstr::addOperand((llvm::MachineInstr *)v136, v134, (const llvm::MachineOperand *)&v362);
            v96 = v97 + 2;
            v97 = v96;
          }
          while (v366 > v96);
        }
      }
      if (v365 != v367)
        free(v365);
      return;
    }
  }
LABEL_94:
  if (a6 != -1 && (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 216))(*(_QWORD *)(a1 + 8)))
  {
    v68 = *(_DWORD *)(a2 + 12);
    if (*(_BYTE *)(a2 + 8))
    {
      if (v68)
      {
        v69 = 0;
        do
        {
          v71 = *(_QWORD *)(a1 + 16);
          v70 = *(unint64_t **)(a1 + 24);
          v72 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
          v73 = *(llvm::MachineFunction **)(v71 + 32);
          v74 = (void *)v359[6];
          v365 = v74;
          if (v74)
            llvm::MetadataTracking::track((uint64_t)&v365, (unsigned __int8 *)v74, 2);
          v75 = *((_QWORD *)v73 + 28);
          if (v75)
            *((_QWORD *)v73 + 28) = *(_QWORD *)v75;
          else
            v75 = sub_1C484358C((uint64_t)v73 + 128, 72, 3);
          *(_QWORD *)&v362 = v365;
          if (v365)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v365, (unsigned __int8 *)v365, (uint64_t)&v362);
            v365 = 0;
          }
          llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v75, v73, v72 + 912, (unsigned __int8 **)&v362, 0);
          if ((_QWORD)v362)
            llvm::MetadataTracking::untrack((uint64_t)&v362, (unsigned __int8 *)v362);
          if (v365)
            llvm::MetadataTracking::untrack((uint64_t)&v365, (unsigned __int8 *)v365);
          v76 = *(_QWORD *)(v71 + 40);
          *(_QWORD *)(v75 + 24) = v76;
          v77 = *(_QWORD *)(v76 + 32);
          v78 = *(unsigned int *)(v75 + 40);
          if ((_DWORD)v78)
          {
            v82 = *(_QWORD *)(v75 + 32);
            v83 = *(_QWORD *)(v77 + 40);
            v84 = 32 * v78;
            do
            {
              if (!*(_BYTE *)v82)
              {
                v85 = *(unsigned int *)(v82 + 4);
                if ((int)v85 >= 0)
                  v86 = (uint64_t *)(*(_QWORD *)(v83 + 272) + 8 * v85);
                else
                  v86 = (uint64_t *)(*(_QWORD *)(v83 + 24) + 16 * (v85 & 0x7FFFFFFF) + 8);
                v87 = *v86;
                if (*v86)
                {
                  v88 = *(_QWORD *)(v87 + 16);
                  *(_QWORD *)(v87 + 16) = v82;
                  *(_QWORD *)(v82 + 16) = v88;
                  if ((*(_BYTE *)(v82 + 3) & 1) != 0)
                  {
                    *(_QWORD *)(v82 + 24) = v87;
                  }
                  else
                  {
                    *(_QWORD *)(v82 + 24) = 0;
                    v86 = (uint64_t *)(v88 + 24);
                  }
                }
                else
                {
                  *(_QWORD *)(v82 + 16) = v82;
                  *(_QWORD *)(v82 + 24) = 0;
                }
                *v86 = v82;
              }
              v82 += 32;
              v84 -= 32;
            }
            while (v84);
          }
          v79 = *(_QWORD *)(v77 + 728);
          if (v79)
            (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v79 + 24))(v79, v75);
          v80 = *v70 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)v75 = v80 | *(_QWORD *)v75 & 7;
          *(_QWORD *)(v75 + 8) = v70;
          *(_QWORD *)(v80 + 8) = v75;
          *v70 = *v70 & 7 | v75;
          HIDWORD(v362) = 0;
          v363 = 0;
          v364 = 0;
          *(_QWORD *)((char *)&v362 + 4) = v69 + v358;
          LODWORD(v362) = 0x1000000;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v75, v73, (const llvm::MachineOperand *)&v362);
          v81 = (*(uint64_t (**)(uint64_t, _QWORD, _QWORD))(*(_QWORD *)a1 + 312))(a1, 0, a6 + v69 * (a6 + 1));
          *((_QWORD *)&v362 + 1) = 0;
          v363 = 0;
          v364 = 0;
          LODWORD(v362) = (v81 & 0xFFF) << 8;
          DWORD1(v362) = v357;
          llvm::MachineInstr::addOperand((llvm::MachineInstr *)v75, v73, (const llvm::MachineOperand *)&v362);
          ++v69;
        }
        while (v69 < *(_DWORD *)(a2 + 12));
      }
      return;
    }
    if (!v68)
      return;
    if (v68 == 1)
    {
      v272 = byte_1C8655451[4 * a6];
      v274 = *(_QWORD *)(a1 + 16);
      v273 = *(unint64_t **)(a1 + 24);
      v275 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
      v92 = *(llvm::MachineFunction **)(v274 + 32);
      v276 = (void *)v359[6];
      v365 = v276;
      if (v276)
        llvm::MetadataTracking::track((uint64_t)&v365, (unsigned __int8 *)v276, 2);
      v277 = v275 + 912;
      v278 = *((_QWORD *)v92 + 28);
      if (v278)
        *((_QWORD *)v92 + 28) = *(_QWORD *)v278;
      else
        v278 = sub_1C484358C((uint64_t)v92 + 128, 72, 3);
      *(_QWORD *)&v362 = v365;
      if (v365)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v365, (unsigned __int8 *)v365, (uint64_t)&v362);
        v365 = 0;
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v278, v92, v277, (unsigned __int8 **)&v362, 0);
      if ((_QWORD)v362)
        llvm::MetadataTracking::untrack((uint64_t)&v362, (unsigned __int8 *)v362);
      if (v365)
        llvm::MetadataTracking::untrack((uint64_t)&v365, (unsigned __int8 *)v365);
      v329 = *(_QWORD *)(v274 + 40);
      *(_QWORD *)(v278 + 24) = v329;
      v330 = *(_QWORD *)(v329 + 32);
      v331 = *(unsigned int *)(v278 + 40);
      if ((_DWORD)v331)
      {
        v335 = *(_QWORD *)(v278 + 32);
        v336 = *(_QWORD *)(v330 + 40);
        v337 = 32 * v331;
        do
        {
          if (!*(_BYTE *)v335)
          {
            v338 = *(unsigned int *)(v335 + 4);
            if ((int)v338 >= 0)
              v339 = (uint64_t *)(*(_QWORD *)(v336 + 272) + 8 * v338);
            else
              v339 = (uint64_t *)(*(_QWORD *)(v336 + 24) + 16 * (v338 & 0x7FFFFFFF) + 8);
            v340 = *v339;
            if (*v339)
            {
              v341 = *(_QWORD *)(v340 + 16);
              *(_QWORD *)(v340 + 16) = v335;
              *(_QWORD *)(v335 + 16) = v341;
              if ((*(_BYTE *)(v335 + 3) & 1) != 0)
              {
                *(_QWORD *)(v335 + 24) = v340;
              }
              else
              {
                *(_QWORD *)(v335 + 24) = 0;
                v339 = (uint64_t *)(v341 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v335 + 16) = v335;
              *(_QWORD *)(v335 + 24) = 0;
            }
            *v339 = v335;
          }
          v335 += 32;
          v337 -= 32;
        }
        while (v337);
      }
      v332 = *(_QWORD *)(v330 + 728);
      if (v332)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v332 + 24))(v332, v278);
      v333 = *v273 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v278 = v333 | *(_QWORD *)v278 & 7;
      *(_QWORD *)(v278 + 8) = v273;
      *(_QWORD *)(v333 + 8) = v278;
      *v273 = *v273 & 7 | v278;
      *((_QWORD *)&v362 + 1) = 0;
      v363 = 0;
      v364 = 0;
      LODWORD(v362) = 0x1000000;
      DWORD1(v362) = v358;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v278, v92, (const llvm::MachineOperand *)&v362);
      v334 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 312))(a1, 1, v272);
      *((_QWORD *)&v362 + 1) = 0;
      v363 = 0;
      v364 = 0;
      LODWORD(v362) = (v334 & 0xFFF) << 8;
      DWORD1(v362) = v357;
      v271 = (llvm::MachineInstr *)v278;
LABEL_410:
      llvm::MachineInstr::addOperand(v271, v92, (const llvm::MachineOperand *)&v362);
      return;
    }
    v279 = 0;
    v280 = 0;
    v344 = (char *)&byte_1C8655451[4 * a6];
    while (1)
    {
      v281 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v349, "", 0);
      *(_QWORD *)(*(_QWORD *)(v349 + 24) + 16 * (v281 & 0x7FFFFFFF)) = v342 & 0xFFFFFFFFFFFFFFFBLL;
      v282 = *(_QWORD *)(v349 + 8);
      if (v282)
        break;
      if (!v280)
        goto LABEL_421;
LABEL_422:
      v352 = v344[v279];
      v284 = *(_QWORD *)(a1 + 16);
      v283 = *(unint64_t **)(a1 + 24);
      v285 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
      v286 = *(llvm::MachineFunction **)(v284 + 32);
      v287 = (void *)a3[6];
      v365 = v287;
      if (v287)
        llvm::MetadataTracking::track((uint64_t)&v365, (unsigned __int8 *)v287, 2);
      v288 = *((_QWORD *)v286 + 28);
      if (v288)
        *((_QWORD *)v286 + 28) = *(_QWORD *)v288;
      else
        v288 = sub_1C484358C((uint64_t)v286 + 128, 72, 3);
      *(_QWORD *)&v362 = v365;
      if (v365)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v365, (unsigned __int8 *)v365, (uint64_t)&v362);
        v365 = 0;
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v288, v286, v285 + 432, (unsigned __int8 **)&v362, 0);
      if ((_QWORD)v362)
        llvm::MetadataTracking::untrack((uint64_t)&v362, (unsigned __int8 *)v362);
      if (v365)
        llvm::MetadataTracking::untrack((uint64_t)&v365, (unsigned __int8 *)v365);
      v289 = *(_QWORD *)(v284 + 40);
      *(_QWORD *)(v288 + 24) = v289;
      v290 = *(_QWORD *)(v289 + 32);
      v291 = *(unsigned int *)(v288 + 40);
      if ((_DWORD)v291)
      {
        v308 = *(_QWORD *)(v288 + 32);
        v309 = *(_QWORD *)(v290 + 40);
        v310 = 32 * v291;
        do
        {
          if (!*(_BYTE *)v308)
          {
            v311 = *(unsigned int *)(v308 + 4);
            if ((int)v311 >= 0)
              v312 = (uint64_t *)(*(_QWORD *)(v309 + 272) + 8 * v311);
            else
              v312 = (uint64_t *)(*(_QWORD *)(v309 + 24) + 16 * (v311 & 0x7FFFFFFF) + 8);
            v313 = *v312;
            if (*v312)
            {
              v314 = *(_QWORD *)(v313 + 16);
              *(_QWORD *)(v313 + 16) = v308;
              *(_QWORD *)(v308 + 16) = v314;
              if ((*(_BYTE *)(v308 + 3) & 1) != 0)
              {
                *(_QWORD *)(v308 + 24) = v313;
              }
              else
              {
                *(_QWORD *)(v308 + 24) = 0;
                v312 = (uint64_t *)(v314 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v308 + 16) = v308;
              *(_QWORD *)(v308 + 24) = 0;
            }
            *v312 = v308;
          }
          v308 += 32;
          v310 -= 32;
        }
        while (v310);
      }
      v292 = *(_QWORD *)(v290 + 728);
      if (v292)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v292 + 24))(v292, v288);
      v293 = *v283 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v288 = v293 | *(_QWORD *)v288 & 7;
      *(_QWORD *)(v288 + 8) = v283;
      *(_QWORD *)(v293 + 8) = v288;
      *v283 = *v283 & 7 | v288;
      *((_QWORD *)&v362 + 1) = 0;
      v363 = 0;
      v364 = 0;
      LODWORD(v362) = 0x1000000;
      DWORD1(v362) = v281;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v288, v286, (const llvm::MachineOperand *)&v362);
      *((_QWORD *)&v362 + 1) = 0;
      LODWORD(v362) = 0;
      DWORD1(v362) = v280;
      v363 = 0;
      v364 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v288, v286, (const llvm::MachineOperand *)&v362);
      v294 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 312))(a1, 1, v352);
      *((_QWORD *)&v362 + 1) = 0;
      v363 = 0;
      v364 = 0;
      LODWORD(v362) = (v294 & 0xFFF) << 8;
      DWORD1(v362) = v357;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v288, v286, (const llvm::MachineOperand *)&v362);
      v295 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)a1 + 312))(a1, 1, v279 & 1);
      LODWORD(v362) = 1;
      *((_QWORD *)&v362 + 1) = 0;
      v363 = v295;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v288, v286, (const llvm::MachineOperand *)&v362);
      if ((v279 & 1) != 0 || (v296 = *(_DWORD *)(a2 + 12), v279 == v296 - 1))
      {
        v298 = *(_QWORD *)(a1 + 16);
        v297 = *(unint64_t **)(a1 + 24);
        v299 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
        v300 = *(llvm::MachineFunction **)(v298 + 32);
        v301 = (void *)a3[6];
        v365 = v301;
        if (v301)
          llvm::MetadataTracking::track((uint64_t)&v365, (unsigned __int8 *)v301, 2);
        v302 = *((_QWORD *)v300 + 28);
        if (v302)
          *((_QWORD *)v300 + 28) = *(_QWORD *)v302;
        else
          v302 = sub_1C484358C((uint64_t)v300 + 128, 72, 3);
        *(_QWORD *)&v362 = v365;
        if (v365)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v365, (unsigned __int8 *)v365, (uint64_t)&v362);
          v365 = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v302, v300, v299 + 912, (unsigned __int8 **)&v362, 0);
        if ((_QWORD)v362)
          llvm::MetadataTracking::untrack((uint64_t)&v362, (unsigned __int8 *)v362);
        if (v365)
          llvm::MetadataTracking::untrack((uint64_t)&v365, (unsigned __int8 *)v365);
        v303 = *(_QWORD *)(v298 + 40);
        *(_QWORD *)(v302 + 24) = v303;
        v304 = *(_QWORD *)(v303 + 32);
        v305 = *(unsigned int *)(v302 + 40);
        if ((_DWORD)v305)
        {
          v315 = *(_QWORD *)(v302 + 32);
          v316 = *(_QWORD *)(v304 + 40);
          v317 = 32 * v305;
          do
          {
            if (!*(_BYTE *)v315)
            {
              v318 = *(unsigned int *)(v315 + 4);
              if ((int)v318 >= 0)
                v319 = (uint64_t *)(*(_QWORD *)(v316 + 272) + 8 * v318);
              else
                v319 = (uint64_t *)(*(_QWORD *)(v316 + 24) + 16 * (v318 & 0x7FFFFFFF) + 8);
              v320 = *v319;
              if (*v319)
              {
                v321 = *(_QWORD *)(v320 + 16);
                *(_QWORD *)(v320 + 16) = v315;
                *(_QWORD *)(v315 + 16) = v321;
                if ((*(_BYTE *)(v315 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v315 + 24) = v320;
                }
                else
                {
                  *(_QWORD *)(v315 + 24) = 0;
                  v319 = (uint64_t *)(v321 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v315 + 16) = v315;
                *(_QWORD *)(v315 + 24) = 0;
              }
              *v319 = v315;
            }
            v315 += 32;
            v317 -= 32;
          }
          while (v317);
        }
        v306 = *(_QWORD *)(v304 + 728);
        if (v306)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v306 + 24))(v306, v302);
        v307 = *v297 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v302 = v307 | *(_QWORD *)v302 & 7;
        *(_QWORD *)(v302 + 8) = v297;
        *(_QWORD *)(v307 + 8) = v302;
        *v297 = *v297 & 7 | v302;
        HIDWORD(v362) = 0;
        v363 = 0;
        v364 = 0;
        *(_QWORD *)((char *)&v362 + 4) = v358 + (v279 >> 1);
        LODWORD(v362) = 0x1000000;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v302, v300, (const llvm::MachineOperand *)&v362);
        *((_QWORD *)&v362 + 1) = 0;
        LODWORD(v362) = 0;
        DWORD1(v362) = v281;
        v363 = 0;
        v364 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v302, v300, (const llvm::MachineOperand *)&v362);
        v281 = 0;
        v296 = *(_DWORD *)(a2 + 12);
      }
      ++v279;
      v280 = v281;
      if (v279 >= v296)
        return;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v282 + 24))(v282);
    if (v280)
      goto LABEL_422;
LABEL_421:
    v280 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 320))(a1, 0);
    goto LABEL_422;
  }
  if (v15 == 1)
  {
    v90 = *(_QWORD *)(a1 + 16);
    v89 = *(unint64_t **)(a1 + 24);
    v91 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
    v92 = *(llvm::MachineFunction **)(v90 + 32);
    v93 = (void *)v359[6];
    v365 = v93;
    if (v93)
      llvm::MetadataTracking::track((uint64_t)&v365, (unsigned __int8 *)v93, 2);
    v94 = v91 + 912;
    v95 = *((_QWORD *)v92 + 28);
    if (v95)
      *((_QWORD *)v92 + 28) = *(_QWORD *)v95;
    else
      v95 = sub_1C484358C((uint64_t)v92 + 128, 72, 3);
    *(_QWORD *)&v362 = v365;
    if (v365)
    {
      llvm::MetadataTracking::retrack((uint64_t)&v365, (unsigned __int8 *)v365, (uint64_t)&v362);
      v365 = 0;
    }
    llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v95, v92, v94, (unsigned __int8 **)&v362, 0);
    if ((_QWORD)v362)
      llvm::MetadataTracking::untrack((uint64_t)&v362, (unsigned __int8 *)v362);
    if (v365)
      llvm::MetadataTracking::untrack((uint64_t)&v365, (unsigned __int8 *)v365);
    v265 = *(_QWORD *)(v90 + 40);
    *(_QWORD *)(v95 + 24) = v265;
    v266 = *(_QWORD *)(v265 + 32);
    v267 = *(unsigned int *)(v95 + 40);
    if ((_DWORD)v267)
    {
      v322 = *(_QWORD *)(v95 + 32);
      v323 = *(_QWORD *)(v266 + 40);
      v324 = 32 * v267;
      do
      {
        if (!*(_BYTE *)v322)
        {
          v325 = *(unsigned int *)(v322 + 4);
          if ((int)v325 >= 0)
            v326 = (uint64_t *)(*(_QWORD *)(v323 + 272) + 8 * v325);
          else
            v326 = (uint64_t *)(*(_QWORD *)(v323 + 24) + 16 * (v325 & 0x7FFFFFFF) + 8);
          v327 = *v326;
          if (*v326)
          {
            v328 = *(_QWORD *)(v327 + 16);
            *(_QWORD *)(v327 + 16) = v322;
            *(_QWORD *)(v322 + 16) = v328;
            if ((*(_BYTE *)(v322 + 3) & 1) != 0)
            {
              *(_QWORD *)(v322 + 24) = v327;
            }
            else
            {
              *(_QWORD *)(v322 + 24) = 0;
              v326 = (uint64_t *)(v328 + 24);
            }
          }
          else
          {
            *(_QWORD *)(v322 + 16) = v322;
            *(_QWORD *)(v322 + 24) = 0;
          }
          *v326 = v322;
        }
        v322 += 32;
        v324 -= 32;
      }
      while (v324);
    }
    v268 = *(_QWORD *)(v266 + 728);
    if (v268)
      (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v268 + 24))(v268, v95);
    v269 = *v89 & 0xFFFFFFFFFFFFFFF8;
    *(_QWORD *)v95 = v269 | *(_QWORD *)v95 & 7;
    *(_QWORD *)(v95 + 8) = v89;
    *(_QWORD *)(v269 + 8) = v95;
    *v89 = *v89 & 7 | v95;
    *((_QWORD *)&v362 + 1) = 0;
    v363 = 0;
    v364 = 0;
    LODWORD(v362) = 0x1000000;
    DWORD1(v362) = v358;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v95, v92, (const llvm::MachineOperand *)&v362);
    v270 = 0;
    if (v19 == 16 && v18 != 16)
      v270 = ((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 312))(a1, 1, 0) & 0xFFF) << 8;
    v363 = 0;
    v364 = 0;
    v362 = __PAIR64__(v357, v270);
    v271 = (llvm::MachineInstr *)v95;
    goto LABEL_410;
  }
  if (v18 != 16 || v19 == 16)
  {
    if (v15)
    {
      v226 = 0;
      do
      {
        v227 = *(_QWORD *)(a1 + 16);
        v228 = *(unint64_t **)(a1 + 24);
        v229 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
        v230 = *(llvm::MachineFunction **)(v227 + 32);
        v231 = (void *)v359[6];
        v365 = v231;
        if (v231)
          llvm::MetadataTracking::track((uint64_t)&v365, (unsigned __int8 *)v231, 2);
        v232 = *((_QWORD *)v230 + 28);
        if (v232)
          *((_QWORD *)v230 + 28) = *(_QWORD *)v232;
        else
          v232 = sub_1C484358C((uint64_t)v230 + 128, 72, 3);
        *(_QWORD *)&v362 = v365;
        if (v365)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v365, (unsigned __int8 *)v365, (uint64_t)&v362);
          v365 = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v232, v230, v229 + 912, (unsigned __int8 **)&v362, 0);
        if ((_QWORD)v362)
          llvm::MetadataTracking::untrack((uint64_t)&v362, (unsigned __int8 *)v362);
        if (v365)
          llvm::MetadataTracking::untrack((uint64_t)&v365, (unsigned __int8 *)v365);
        v233 = *(_QWORD *)(v227 + 40);
        *(_QWORD *)(v232 + 24) = v233;
        v234 = *(_QWORD *)(v233 + 32);
        v235 = *(unsigned int *)(v232 + 40);
        if ((_DWORD)v235)
        {
          v239 = *(_QWORD *)(v232 + 32);
          v240 = *(_QWORD *)(v234 + 40);
          v241 = 32 * v235;
          do
          {
            if (!*(_BYTE *)v239)
            {
              v242 = *(unsigned int *)(v239 + 4);
              if ((int)v242 >= 0)
                v243 = (uint64_t *)(*(_QWORD *)(v240 + 272) + 8 * v242);
              else
                v243 = (uint64_t *)(*(_QWORD *)(v240 + 24) + 16 * (v242 & 0x7FFFFFFF) + 8);
              v244 = *v243;
              if (*v243)
              {
                v245 = *(_QWORD *)(v244 + 16);
                *(_QWORD *)(v244 + 16) = v239;
                *(_QWORD *)(v239 + 16) = v245;
                if ((*(_BYTE *)(v239 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v239 + 24) = v244;
                }
                else
                {
                  *(_QWORD *)(v239 + 24) = 0;
                  v243 = (uint64_t *)(v245 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v239 + 16) = v239;
                *(_QWORD *)(v239 + 24) = 0;
              }
              *v243 = v239;
            }
            v239 += 32;
            v241 -= 32;
          }
          while (v241);
        }
        v236 = *(_QWORD *)(v234 + 728);
        if (v236)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v236 + 24))(v236, v232);
        v237 = *v228 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v232 = v237 | *(_QWORD *)v232 & 7;
        *(_QWORD *)(v232 + 8) = v228;
        *(_QWORD *)(v237 + 8) = v232;
        *v228 = *v228 & 7 | v232;
        HIDWORD(v362) = 0;
        v363 = 0;
        v364 = 0;
        *(_QWORD *)((char *)&v362 + 4) = (v226 + v358);
        LODWORD(v362) = 0x1000000;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v232, v230, (const llvm::MachineOperand *)&v362);
        v238 = (*(uint64_t (**)(uint64_t, BOOL, uint64_t))(*(_QWORD *)a1 + 312))(a1, v18 == 16, v226);
        *((_QWORD *)&v362 + 1) = 0;
        v363 = 0;
        v364 = 0;
        LODWORD(v362) = (v238 & 0xFFF) << 8;
        DWORD1(v362) = v357;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v232, v230, (const llvm::MachineOperand *)&v362);
        v226 = (v226 + 1);
      }
      while ((_DWORD)v226 != v15);
    }
    if (v15 < v345)
    {
      do
      {
        v247 = *(_QWORD *)(a1 + 16);
        v246 = *(unint64_t **)(a1 + 24);
        v248 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
        v249 = *(llvm::MachineFunction **)(v247 + 32);
        v250 = (void *)v359[6];
        v365 = v250;
        if (v250)
          llvm::MetadataTracking::track((uint64_t)&v365, (unsigned __int8 *)v250, 2);
        v251 = *((_QWORD *)v249 + 28);
        if (v251)
          *((_QWORD *)v249 + 28) = *(_QWORD *)v251;
        else
          v251 = sub_1C484358C((uint64_t)v249 + 128, 72, 3);
        *(_QWORD *)&v362 = v365;
        if (v365)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v365, (unsigned __int8 *)v365, (uint64_t)&v362);
          v365 = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v251, v249, v248 + 912, (unsigned __int8 **)&v362, 0);
        if ((_QWORD)v362)
          llvm::MetadataTracking::untrack((uint64_t)&v362, (unsigned __int8 *)v362);
        if (v365)
          llvm::MetadataTracking::untrack((uint64_t)&v365, (unsigned __int8 *)v365);
        v252 = *(_QWORD *)(v247 + 40);
        *(_QWORD *)(v251 + 24) = v252;
        v253 = *(_QWORD *)(v252 + 32);
        v254 = *(unsigned int *)(v251 + 40);
        if ((_DWORD)v254)
        {
          v258 = *(_QWORD *)(v251 + 32);
          v259 = *(_QWORD *)(v253 + 40);
          v260 = 32 * v254;
          do
          {
            if (!*(_BYTE *)v258)
            {
              v261 = *(unsigned int *)(v258 + 4);
              if ((int)v261 >= 0)
                v262 = (uint64_t *)(*(_QWORD *)(v259 + 272) + 8 * v261);
              else
                v262 = (uint64_t *)(*(_QWORD *)(v259 + 24) + 16 * (v261 & 0x7FFFFFFF) + 8);
              v263 = *v262;
              if (*v262)
              {
                v264 = *(_QWORD *)(v263 + 16);
                *(_QWORD *)(v263 + 16) = v258;
                *(_QWORD *)(v258 + 16) = v264;
                if ((*(_BYTE *)(v258 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v258 + 24) = v263;
                }
                else
                {
                  *(_QWORD *)(v258 + 24) = 0;
                  v262 = (uint64_t *)(v264 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v258 + 16) = v258;
                *(_QWORD *)(v258 + 24) = 0;
              }
              *v262 = v258;
            }
            v258 += 32;
            v260 -= 32;
          }
          while (v260);
        }
        v255 = *(_QWORD *)(v253 + 728);
        if (v255)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v255 + 24))(v255, v251);
        v256 = *v246 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v251 = v256 | *(_QWORD *)v251 & 7;
        *(_QWORD *)(v251 + 8) = v246;
        *(_QWORD *)(v256 + 8) = v251;
        *v246 = *v246 & 7 | v251;
        HIDWORD(v362) = 0;
        v363 = 0;
        v364 = 0;
        LODWORD(v362) = 0x1000000;
        *(_QWORD *)((char *)&v362 + 4) = v15 + v358;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v251, v249, (const llvm::MachineOperand *)&v362);
        v257 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 320))(a1, 0);
        *((_QWORD *)&v362 + 1) = 0;
        LODWORD(v362) = 0;
        DWORD1(v362) = v257;
        v363 = 0;
        v364 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v251, v249, (const llvm::MachineOperand *)&v362);
        ++v15;
      }
      while (v15 != v345);
    }
  }
  else if (v15)
  {
    v163 = 0;
    v351 = v342 & 0xFFFFFFFFFFFFFFFBLL;
    do
    {
      v164 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a1 + 320))(a1, 0);
      v356 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v349, "", 0);
      *(_QWORD *)(*(_QWORD *)(v349 + 24) + 16 * (v356 & 0x7FFFFFFF)) = v351;
      v165 = *(_QWORD *)(v349 + 8);
      if (v165)
        (*(void (**)(uint64_t))(*(_QWORD *)v165 + 24))(v165);
      v167 = *(_QWORD *)(a1 + 16);
      v166 = *(unint64_t **)(a1 + 24);
      v168 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
      v169 = *(llvm::MachineFunction **)(v167 + 32);
      v170 = (void *)v359[6];
      v365 = v170;
      if (v170)
        llvm::MetadataTracking::track((uint64_t)&v365, (unsigned __int8 *)v170, 2);
      v171 = *((_QWORD *)v169 + 28);
      if (v171)
        *((_QWORD *)v169 + 28) = *(_QWORD *)v171;
      else
        v171 = sub_1C484358C((uint64_t)v169 + 128, 72, 3);
      *(_QWORD *)&v362 = v365;
      if (v365)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v365, (unsigned __int8 *)v365, (uint64_t)&v362);
        v365 = 0;
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v171, v169, v168 + 432, (unsigned __int8 **)&v362, 0);
      if ((_QWORD)v362)
        llvm::MetadataTracking::untrack((uint64_t)&v362, (unsigned __int8 *)v362);
      v172 = v356;
      if (v365)
        llvm::MetadataTracking::untrack((uint64_t)&v365, (unsigned __int8 *)v365);
      v173 = *(_QWORD *)(v167 + 40);
      *(_QWORD *)(v171 + 24) = v173;
      v174 = *(_QWORD *)(v173 + 32);
      v175 = *(unsigned int *)(v171 + 40);
      if ((_DWORD)v175)
      {
        v205 = *(_QWORD *)(v171 + 32);
        v206 = *(_QWORD *)(v174 + 40);
        v207 = 32 * v175;
        do
        {
          if (!*(_BYTE *)v205)
          {
            v208 = *(unsigned int *)(v205 + 4);
            if ((int)v208 >= 0)
              v209 = (uint64_t *)(*(_QWORD *)(v206 + 272) + 8 * v208);
            else
              v209 = (uint64_t *)(*(_QWORD *)(v206 + 24) + 16 * (v208 & 0x7FFFFFFF) + 8);
            v210 = *v209;
            if (*v209)
            {
              v211 = *(_QWORD *)(v210 + 16);
              *(_QWORD *)(v210 + 16) = v205;
              *(_QWORD *)(v205 + 16) = v211;
              if ((*(_BYTE *)(v205 + 3) & 1) != 0)
              {
                *(_QWORD *)(v205 + 24) = v210;
              }
              else
              {
                *(_QWORD *)(v205 + 24) = 0;
                v209 = (uint64_t *)(v211 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v205 + 16) = v205;
              *(_QWORD *)(v205 + 24) = 0;
            }
            *v209 = v205;
          }
          v205 += 32;
          v207 -= 32;
        }
        while (v207);
      }
      v176 = *(_QWORD *)(v174 + 728);
      if (v176)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v176 + 24))(v176, v171);
      v177 = *v166 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v171 = v177 | *(_QWORD *)v171 & 7;
      *(_QWORD *)(v171 + 8) = v166;
      *(_QWORD *)(v177 + 8) = v171;
      *v166 = *v166 & 7 | v171;
      *((_QWORD *)&v362 + 1) = 0;
      v363 = 0;
      v364 = 0;
      LODWORD(v362) = 0x1000000;
      DWORD1(v362) = v356;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v171, v169, (const llvm::MachineOperand *)&v362);
      *((_QWORD *)&v362 + 1) = 0;
      LODWORD(v362) = 0;
      DWORD1(v362) = v164;
      v363 = 0;
      v364 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v171, v169, (const llvm::MachineOperand *)&v362);
      v178 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 312))(a1, 1, v163);
      *((_QWORD *)&v362 + 1) = 0;
      v363 = 0;
      v364 = 0;
      LODWORD(v362) = (v178 & 0xFFF) << 8;
      DWORD1(v362) = v357;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v171, v169, (const llvm::MachineOperand *)&v362);
      v179 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 312))(a1, 1, 0);
      LODWORD(v362) = 1;
      *((_QWORD *)&v362 + 1) = 0;
      v363 = v179;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v171, v169, (const llvm::MachineOperand *)&v362);
      if ((v163 | 1) < v15)
      {
        v348 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v349, "", 0);
        *(_QWORD *)(*(_QWORD *)(v349 + 24) + 16 * (v348 & 0x7FFFFFFF)) = v351;
        v180 = *(_QWORD *)(v349 + 8);
        if (v180)
          (*(void (**)(uint64_t))(*(_QWORD *)v180 + 24))(v180);
        v182 = *(_QWORD *)(a1 + 16);
        v181 = *(unint64_t **)(a1 + 24);
        v183 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
        v184 = *(llvm::MachineFunction **)(v182 + 32);
        v185 = (void *)v359[6];
        v365 = v185;
        if (v185)
          llvm::MetadataTracking::track((uint64_t)&v365, (unsigned __int8 *)v185, 2);
        v186 = *((_QWORD *)v184 + 28);
        if (v186)
          *((_QWORD *)v184 + 28) = *(_QWORD *)v186;
        else
          v186 = sub_1C484358C((uint64_t)v184 + 128, 72, 3);
        *(_QWORD *)&v362 = v365;
        if (v365)
        {
          llvm::MetadataTracking::retrack((uint64_t)&v365, (unsigned __int8 *)v365, (uint64_t)&v362);
          v365 = 0;
        }
        llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v186, v184, v183 + 432, (unsigned __int8 **)&v362, 0);
        if ((_QWORD)v362)
          llvm::MetadataTracking::untrack((uint64_t)&v362, (unsigned __int8 *)v362);
        if (v365)
          llvm::MetadataTracking::untrack((uint64_t)&v365, (unsigned __int8 *)v365);
        v187 = *(_QWORD *)(v182 + 40);
        *(_QWORD *)(v186 + 24) = v187;
        v188 = *(_QWORD *)(v187 + 32);
        v189 = *(unsigned int *)(v186 + 40);
        if ((_DWORD)v189)
        {
          v219 = *(_QWORD *)(v186 + 32);
          v220 = *(_QWORD *)(v188 + 40);
          v221 = 32 * v189;
          do
          {
            if (!*(_BYTE *)v219)
            {
              v222 = *(unsigned int *)(v219 + 4);
              if ((int)v222 >= 0)
                v223 = (uint64_t *)(*(_QWORD *)(v220 + 272) + 8 * v222);
              else
                v223 = (uint64_t *)(*(_QWORD *)(v220 + 24) + 16 * (v222 & 0x7FFFFFFF) + 8);
              v224 = *v223;
              if (*v223)
              {
                v225 = *(_QWORD *)(v224 + 16);
                *(_QWORD *)(v224 + 16) = v219;
                *(_QWORD *)(v219 + 16) = v225;
                if ((*(_BYTE *)(v219 + 3) & 1) != 0)
                {
                  *(_QWORD *)(v219 + 24) = v224;
                }
                else
                {
                  *(_QWORD *)(v219 + 24) = 0;
                  v223 = (uint64_t *)(v225 + 24);
                }
              }
              else
              {
                *(_QWORD *)(v219 + 16) = v219;
                *(_QWORD *)(v219 + 24) = 0;
              }
              *v223 = v219;
            }
            v219 += 32;
            v221 -= 32;
          }
          while (v221);
        }
        v190 = *(_QWORD *)(v188 + 728);
        if (v190)
          (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v190 + 24))(v190, v186);
        v191 = *v181 & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v186 = v191 | *(_QWORD *)v186 & 7;
        *(_QWORD *)(v186 + 8) = v181;
        *(_QWORD *)(v191 + 8) = v186;
        *v181 = *v181 & 7 | v186;
        *((_QWORD *)&v362 + 1) = 0;
        v363 = 0;
        v364 = 0;
        LODWORD(v362) = 0x1000000;
        DWORD1(v362) = v348;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v186, v184, (const llvm::MachineOperand *)&v362);
        *((_QWORD *)&v362 + 1) = 0;
        LODWORD(v362) = 0;
        DWORD1(v362) = v356;
        v363 = 0;
        v364 = 0;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v186, v184, (const llvm::MachineOperand *)&v362);
        v192 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 312))(a1, 1, v163 | 1);
        *((_QWORD *)&v362 + 1) = 0;
        v363 = 0;
        v364 = 0;
        LODWORD(v362) = (v192 & 0xFFF) << 8;
        DWORD1(v362) = v357;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v186, v184, (const llvm::MachineOperand *)&v362);
        v193 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 312))(a1, 1, 1);
        LODWORD(v362) = 1;
        *((_QWORD *)&v362 + 1) = 0;
        v363 = v193;
        llvm::MachineInstr::addOperand((llvm::MachineInstr *)v186, v184, (const llvm::MachineOperand *)&v362);
        v172 = v348;
      }
      v195 = *(_QWORD *)(a1 + 16);
      v194 = *(unint64_t **)(a1 + 24);
      v196 = *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8);
      v197 = *(llvm::MachineFunction **)(v195 + 32);
      v198 = (void *)v359[6];
      v365 = v198;
      if (v198)
        llvm::MetadataTracking::track((uint64_t)&v365, (unsigned __int8 *)v198, 2);
      v199 = *((_QWORD *)v197 + 28);
      if (v199)
        *((_QWORD *)v197 + 28) = *(_QWORD *)v199;
      else
        v199 = sub_1C484358C((uint64_t)v197 + 128, 72, 3);
      *(_QWORD *)&v362 = v365;
      if (v365)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v365, (unsigned __int8 *)v365, (uint64_t)&v362);
        v365 = 0;
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v199, v197, v196 + 912, (unsigned __int8 **)&v362, 0);
      if ((_QWORD)v362)
        llvm::MetadataTracking::untrack((uint64_t)&v362, (unsigned __int8 *)v362);
      if (v365)
        llvm::MetadataTracking::untrack((uint64_t)&v365, (unsigned __int8 *)v365);
      v200 = *(_QWORD *)(v195 + 40);
      *(_QWORD *)(v199 + 24) = v200;
      v201 = *(_QWORD *)(v200 + 32);
      v202 = *(unsigned int *)(v199 + 40);
      if ((_DWORD)v202)
      {
        v212 = *(_QWORD *)(v199 + 32);
        v213 = *(_QWORD *)(v201 + 40);
        v214 = 32 * v202;
        do
        {
          if (!*(_BYTE *)v212)
          {
            v215 = *(unsigned int *)(v212 + 4);
            if ((int)v215 >= 0)
              v216 = (uint64_t *)(*(_QWORD *)(v213 + 272) + 8 * v215);
            else
              v216 = (uint64_t *)(*(_QWORD *)(v213 + 24) + 16 * (v215 & 0x7FFFFFFF) + 8);
            v217 = *v216;
            if (*v216)
            {
              v218 = *(_QWORD *)(v217 + 16);
              *(_QWORD *)(v217 + 16) = v212;
              *(_QWORD *)(v212 + 16) = v218;
              if ((*(_BYTE *)(v212 + 3) & 1) != 0)
              {
                *(_QWORD *)(v212 + 24) = v217;
              }
              else
              {
                *(_QWORD *)(v212 + 24) = 0;
                v216 = (uint64_t *)(v218 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v212 + 16) = v212;
              *(_QWORD *)(v212 + 24) = 0;
            }
            *v216 = v212;
          }
          v212 += 32;
          v214 -= 32;
        }
        while (v214);
      }
      v203 = *(_QWORD *)(v201 + 728);
      if (v203)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v203 + 24))(v203, v199);
      v204 = *v194 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v199 = v204 | *(_QWORD *)v199 & 7;
      *(_QWORD *)(v199 + 8) = v194;
      *(_QWORD *)(v204 + 8) = v199;
      *v194 = *v194 & 7 | v199;
      HIDWORD(v362) = 0;
      v363 = 0;
      v364 = 0;
      *(_QWORD *)((char *)&v362 + 4) = v12 + (v163 >> 1);
      LODWORD(v362) = 0x1000000;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v199, v197, (const llvm::MachineOperand *)&v362);
      *((_QWORD *)&v362 + 1) = 0;
      LODWORD(v362) = 0;
      DWORD1(v362) = v172;
      v363 = 0;
      v364 = 0;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v199, v197, (const llvm::MachineOperand *)&v362);
      v163 = (v163 + 2);
    }
    while (v163 < v15);
  }
}

uint64_t sub_1C5569F78(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int *a5, uint64_t a6)
{
  _QWORD **v10;
  BOOL v11;
  unsigned int v13;
  int v14;
  uint64_t v15;
  uint64_t i;
  int v17;
  int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  uint64_t v24;
  uint64_t v25;
  unsigned __int8 v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  int v31;
  int v32;
  int v33;
  int v34;
  uint64_t v35;
  int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  char v40;
  _QWORD v41[66];

  v10 = (_QWORD **)result;
  v41[65] = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a2 + 72) != -1)
  {
    if (*(_BYTE *)(a2 + 61))
      v11 = 0;
    else
      v11 = *(_BYTE *)(a2 + 60) == 0;
    if (v11 && *(_DWORD *)(a2 + 48) == -1)
    {
      v13 = *(_DWORD *)(a2 + 4);
      if (!v13)
      {
LABEL_22:
        v20 = 8;
LABEL_23:
        *a5 = v20;
        return result;
      }
    }
    else
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(result + 8) + 224))(*(_QWORD *)(result + 8), a2);
      v13 = result >> 1;
      if (!(result >> 1))
        goto LABEL_22;
    }
    v18 = 0;
    do
    {
      v19 = ((uint64_t (*)(_QWORD **, uint64_t, _QWORD))(*v10)[2])(v10, a4, (v18 + *(_DWORD *)(a2 + 72)));
      result = ((uint64_t (*)(_QWORD **, uint64_t, uint64_t, uint64_t))(*v10)[10])(v10, v19, a6, 0xFFFFFFFFLL);
      ++v18;
    }
    while (v13 != v18);
    goto LABEL_22;
  }
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 8) + 168))(*(_QWORD *)(result + 8));
  if (*(_DWORD *)(a2 + 56) == -1)
    v14 = 0;
  else
    v14 = result;
  if (v14 == 1)
  {
    v15 = ((uint64_t (*)(_QWORD **, uint64_t))(*v10)[2])(v10, a4);
    v41[0] = 1;
    for (i = 1; i != 65; ++i)
      LODWORD(v41[i]) = 0x7FFFFFFF;
    result = ((uint64_t (*)(_QWORD **, uint64_t, _QWORD *, _QWORD))(*v10)[27])(v10, v15, v41, 0);
    v17 = result;
    if ((v41[0] & 1) == 0)
      result = MEMORY[0x1CAA32FB4](v41[1], 4);
  }
  else
  {
    v17 = 1;
  }
  v21 = *(_DWORD *)(a2 + 76);
  v22 = *(_DWORD *)(a2 + 68);
  if (v21 != -1 || v22 != -1)
  {
LABEL_29:
    if (v22 == -1)
      v24 = v21;
    else
      v24 = v22;
    v25 = ((uint64_t (*)(_QWORD **, uint64_t, uint64_t))(*v10)[2])(v10, a4, v24);
    if (*(_DWORD *)(a2 + 92) != -1 && (*(unsigned int (**)(_QWORD *))(*v10[1] + 328))(v10[1]))
    {
      LODWORD(v41[0]) = -1;
      v26 = ((uint64_t (*)(_QWORD **, uint64_t, _QWORD *, _QWORD))(*v10)[18])(v10, v25, v41, 0);
      if ((v26 & (LODWORD(v41[0]) < 0xFF)) != 0)
        v27 = 7;
      else
        v27 = 6;
      *a5 = v27;
      result = ((uint64_t (*)(_QWORD **, uint64_t))(*v10)[21])(v10, v25);
      goto LABEL_83;
    }
    if ((((uint64_t (*)(_QWORD **, uint64_t))(*v10)[30])(v10, v25) & 1) != 0
      || ((unsigned int (*)(_QWORD **, uint64_t))(*v10)[28])(v10, v25))
    {
      if ((*(unsigned int (**)(_QWORD *))(*v10[1] + 176))(v10[1]))
        goto LABEL_49;
    }
    else if ((((uint64_t (*)(_QWORD **, uint64_t))(*v10)[31])(v10, v25) & 1) == 0
           && !((unsigned int (*)(_QWORD **, uint64_t))(*v10)[29])(v10, v25)
           || (*(unsigned int (**)(_QWORD *))(*v10[1] + 176))(v10[1]) != 2)
    {
LABEL_49:
      llvm::report_fatal_error((llvm *)"Invalid sample LOD operand for architecture", (const char *)1);
    }
    LODWORD(v41[0]) = -1;
    v40 = 0;
    result = ((uint64_t (*)(_QWORD **, uint64_t, _QWORD *, char *))(*v10)[18])(v10, v25, v41, &v40);
    v31 = result ^ 1;
    if (LODWORD(v41[0]))
      v31 = 1;
    v32 = v14 | v31;
    if (v22 == -1)
      v33 = v32;
    else
      v33 = 1;
    if ((v33 & v17) != 1)
      goto LABEL_74;
    if ((_DWORD)result)
    {
      result = sub_1C47AB6D8((uint64_t)v10, LODWORD(v41[0]));
    }
    else
    {
      result = ((uint64_t (*)(_QWORD **, uint64_t))(*v10)[22])(v10, v25);
      if ((_DWORD)result == -1)
      {
LABEL_74:
        if (v33)
        {
          result = ((uint64_t (*)(_QWORD **, uint64_t))(*v10)[21])(v10, v25);
          v36 = result;
          v37 = *(unsigned int *)(a6 + 8);
          if (v37 >= *(_DWORD *)(a6 + 12))
          {
            result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a6, a6 + 16, v37 + 1, 4);
            LODWORD(v37) = *(_DWORD *)(a6 + 8);
          }
          *(_DWORD *)(*(_QWORD *)a6 + 4 * v37) = v36;
          ++*(_DWORD *)(a6 + 8);
          if (v22 == -1)
            v20 = 5;
          else
            v20 = 6;
          goto LABEL_23;
        }
        goto LABEL_79;
      }
      result = (*(uint64_t (**)(_QWORD *, uint64_t))(*v10[1] + 56))(v10[1], result);
    }
    if ((_DWORD)result != -1)
    {
      result = ((uint64_t (*)(_QWORD **, uint64_t))(*v10)[20])(v10, result);
      v34 = result;
      v35 = *(unsigned int *)(a6 + 8);
      if (v35 >= *(_DWORD *)(a6 + 12))
      {
        result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a6, a6 + 16, v35 + 1, 4);
        LODWORD(v35) = *(_DWORD *)(a6 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a6 + 4 * v35) = v34;
      ++*(_DWORD *)(a6 + 8);
      if (v22 == -1)
        v20 = 1;
      else
        v20 = 2;
      goto LABEL_23;
    }
    goto LABEL_74;
  }
  if (*(_BYTE *)(a2 + 62))
  {
    result = (*(uint64_t (**)(_QWORD *))(*v10[1] + 384))(v10[1]);
    if (((v14 | result ^ 1) & 1) == 0)
    {
      v28 = sub_1C47AB6D8((uint64_t)v10, 0);
      v29 = 2;
LABEL_51:
      *a5 = v29;
      result = ((uint64_t (*)(_QWORD **, uint64_t))(*v10)[20])(v10, v28);
      goto LABEL_83;
    }
  }
  if ((v14 & 1) == 0)
  {
    if (*(_DWORD *)(a2 + 92) == -1
      || (result = (*(uint64_t (**)(_QWORD *))(*v10[1] + 328))(v10[1]), (result & 1) == 0))
    {
LABEL_79:
      *a5 = 0;
      return result;
    }
  }
  if (*(_DWORD *)(a2 + 92) == -1 || !(*(unsigned int (**)(_QWORD *))(*v10[1] + 328))(v10[1]))
  {
    if (!v14)
    {
      v22 = *(_DWORD *)(a2 + 68);
      v21 = *(_DWORD *)(a2 + 76);
      goto LABEL_29;
    }
    if (!v17 || (v30 = sub_1C47AB6D8((uint64_t)v10, 0), (_DWORD)v30 == -1))
    {
      *a5 = 5;
      result = ((uint64_t (*)(_QWORD **, _QWORD))(*v10)[8])(v10, 0);
      goto LABEL_83;
    }
    v28 = v30;
    v29 = 1;
    goto LABEL_51;
  }
  *a5 = 7;
  result = ((uint64_t (*)(_QWORD **, _QWORD))(*v10)[9])(v10, 0);
LABEL_83:
  v38 = result;
  v39 = *(unsigned int *)(a6 + 8);
  if (v39 >= *(_DWORD *)(a6 + 12))
  {
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a6, a6 + 16, v39 + 1, 4);
    LODWORD(v39) = *(_DWORD *)(a6 + 8);
  }
  *(_DWORD *)(*(_QWORD *)a6 + 4 * v39) = v38;
  ++*(_DWORD *)(a6 + 8);
  return result;
}

void *sub_1C556A530(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  void *result;
  int v10;
  uint64_t v11;
  uint64_t (*v13)(_QWORD **, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;
  _DWORD v22[2];
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  v8 = *(_DWORD *)(a2 + 64);
  result = (void *)(*(uint64_t (**)(_QWORD *))(*a1[1] + 192))(a1[1]);
  if (v8 == -1)
    v10 = 1;
  else
    v10 = (int)result;
  v11 = *(unsigned int *)(a2 + 80);
  if (v10 != 1 || (_DWORD)v11 != -1)
  {
    v13 = (uint64_t (*)(_QWORD **, uint64_t, uint64_t))(*a1)[2];
    if ((_DWORD)v11 == -1 || *(_DWORD *)(a2 + 64) == -1)
    {
      if ((_DWORD)v11 == -1)
        v11 = *(unsigned int *)(a2 + 64);
      v15 = v13(a1, a3, v11);
      result = (void *)((uint64_t (*)(_QWORD **, uint64_t))(*a1)[21])(a1, v15);
    }
    else
    {
      v16 = ((uint64_t (*)(_QWORD **, uint64_t))v13)(a1, a3);
      v17 = ((uint64_t (*)(_QWORD **, uint64_t, _QWORD))(*a1)[2])(a1, a3, *(unsigned int *)(a2 + 64));
      v18 = ((uint64_t (*)(_QWORD **, uint64_t))(*a1)[21])(a1, v17);
      v19 = ((uint64_t (*)(_QWORD **, uint64_t))(*a1)[21])(a1, v16);
      v22[0] = v18;
      v22[1] = v19;
      result = (void *)((uint64_t (*)(_QWORD **, uint64_t, _DWORD *, uint64_t))(*a1)[12])(a1, a3, v22, 2);
    }
    v20 = (int)result;
    v21 = *(unsigned int *)(a4 + 8);
    if (v21 >= *(_DWORD *)(a4 + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v21 + 1, 4);
      LODWORD(v21) = *(_DWORD *)(a4 + 8);
    }
    *(_DWORD *)(*(_QWORD *)a4 + 4 * v21) = v20;
    ++*(_DWORD *)(a4 + 8);
  }
  return result;
}

uint64_t sub_1C556A6C0(_QWORD **a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t result;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  int *v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  uint64_t v34;
  int *v35;
  unsigned int v36;
  uint64_t v37;
  int v38;
  uint64_t v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  int v43;
  uint64_t v44;
  BOOL v46;
  int v47;
  int v48;
  int v49;
  uint64_t v50;
  uint64_t v51;
  int *v52;
  unsigned int v53;
  uint64_t v54;
  int v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  _DWORD v63[2];
  uint64_t v64;

  v64 = *MEMORY[0x1E0C80C00];
  result = (*(uint64_t (**)(_QWORD *))(*a1[1] + 240))(a1[1]);
  if ((_DWORD)result)
  {
    if (a2[12] != -1)
    {
      v18 = ((uint64_t (*)(_QWORD **, uint64_t))(*a1)[2])(a1, a3);
      result = ((uint64_t (*)(_QWORD **, uint64_t))(*a1)[21])(a1, v18);
      v19 = result;
      v20 = *(unsigned int *)(a4 + 8);
      if (v20 >= *(_DWORD *)(a4 + 12))
      {
        result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v20 + 1, 4);
        LODWORD(v20) = *(_DWORD *)(a4 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a4 + 4 * v20) = v19;
      ++*(_DWORD *)(a4 + 8);
    }
    if (a2[14] != -1)
    {
      v21 = ((uint64_t (*)(_QWORD **, uint64_t))(*a1)[2])(a1, a3);
      result = ((uint64_t (*)(_QWORD **, uint64_t))(*a1)[21])(a1, v21);
      v22 = result;
      v23 = *(unsigned int *)(a4 + 8);
      if (v23 >= *(_DWORD *)(a4 + 12))
      {
        result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v23 + 1, 4);
        LODWORD(v23) = *(_DWORD *)(a4 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a4 + 4 * v23) = v22;
      ++*(_DWORD *)(a4 + 8);
    }
    if (a2[13] != -1)
    {
      v24 = ((uint64_t (*)(_QWORD **, uint64_t))(*a1)[2])(a1, a3);
      result = ((uint64_t (*)(_QWORD **, uint64_t))(*a1)[21])(a1, v24);
      v25 = result;
      v26 = *(unsigned int *)(a4 + 8);
      if (v26 >= *(_DWORD *)(a4 + 12))
      {
        result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v26 + 1, 4);
        LODWORD(v26) = *(_DWORD *)(a4 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a4 + 4 * v26) = v25;
      ++*(_DWORD *)(a4 + 8);
    }
    return result;
  }
  if (a6 <= 8 && ((1 << a6) & 0x160) != 0)
  {
    v27 = *(unsigned int *)(a5 + 8);
    if ((_DWORD)v27)
    {
      v28 = *(int **)a5;
      v29 = a4 + 16;
      v30 = *(_DWORD *)(a4 + 8);
      v31 = 4 * v27;
      do
      {
        v32 = *v28;
        if (v30 >= *(_DWORD *)(a4 + 12))
        {
          v59 = v29;
          result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a4, v29, v30 + 1, 4);
          v29 = v59;
          v30 = *(_DWORD *)(a4 + 8);
        }
        *(_DWORD *)(*(_QWORD *)a4 + 4 * v30) = v32;
        v30 = *(_DWORD *)(a4 + 8) + 1;
        *(_DWORD *)(a4 + 8) = v30;
        ++v28;
        v31 -= 4;
      }
      while (v31);
    }
    *(_DWORD *)(a5 + 8) = 0;
  }
  v34 = *(unsigned int *)(a8 + 8);
  if ((_DWORD)v34)
  {
    v35 = *(int **)a8;
    v36 = *(_DWORD *)(a4 + 8);
    v37 = 4 * v34;
    do
    {
      v38 = *v35;
      if (v36 >= *(_DWORD *)(a4 + 12))
      {
        v60 = a9;
        result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v36 + 1, 4);
        a9 = v60;
        v36 = *(_DWORD *)(a4 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a4 + 4 * v36) = v38;
      v36 = *(_DWORD *)(a4 + 8) + 1;
      *(_DWORD *)(a4 + 8) = v36;
      ++v35;
      v37 -= 4;
    }
    while (v37);
  }
  *(_DWORD *)(a8 + 8) = 0;
  v62 = 0;
  if (a2[20] != -1)
  {
    v61 = a9;
    v39 = ((uint64_t (*)(_QWORD **, uint64_t))(*a1)[2])(a1, a3);
    result = ((uint64_t (*)(_QWORD **, uint64_t, char *, _QWORD))(*a1)[18])(a1, v39, (char *)&v62 + 4, 0);
    v40 = result;
    if ((result & 1) != 0)
    {
      v41 = 0;
    }
    else
    {
      result = ((uint64_t (*)(_QWORD **, uint64_t))(*a1)[21])(a1, v39);
      v41 = result;
    }
    *(_DWORD *)(a7 + 8) = 0;
    if (a2[13] == -1)
    {
      v44 = 0;
      v43 = 1;
      goto LABEL_43;
    }
LABEL_34:
    v42 = ((uint64_t (*)(_QWORD **, uint64_t))(*a1)[2])(a1, a3);
    result = ((uint64_t (*)(_QWORD **, uint64_t, uint64_t *, _QWORD))(*a1)[18])(a1, v42, &v62, 0);
    v43 = result;
    if ((result & 1) != 0)
    {
      v44 = 0;
    }
    else
    {
      result = ((uint64_t (*)(_QWORD **, uint64_t))(*a1)[21])(a1, v42);
      v44 = result;
    }
    if (v40 != v43 && a2[20] != -1)
    {
      v44 = ((uint64_t (*)(_QWORD **, uint64_t))(*a1)[21])(a1, v42);
      result = ((uint64_t (*)(_QWORD **, uint64_t))(*a1)[21])(a1, v39);
      v41 = result;
      goto LABEL_48;
    }
LABEL_43:
    if (v40)
      v46 = v43 == 0;
    else
      v46 = 1;
    if (!v46)
    {
      result = ((uint64_t (*)(_QWORD **, _QWORD))(*a1)[8])(a1, (HIDWORD(v62) | ((_DWORD)v62 << 16)));
LABEL_54:
      v49 = result;
      v50 = *(unsigned int *)(a4 + 8);
      if (v50 >= *(_DWORD *)(a4 + 12))
      {
        result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v50 + 1, 4);
        LODWORD(v50) = *(_DWORD *)(a4 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a4 + 4 * v50) = v49;
      ++*(_DWORD *)(a4 + 8);
      a9 = v61;
      goto LABEL_57;
    }
LABEL_48:
    v47 = a2[20];
    v48 = a2[13];
    if (v47 == -1 || v48 != -1)
    {
      if (v47 != -1 || v48 == -1)
      {
        a9 = v61;
        if (v47 != -1 && v48 != -1)
        {
          v63[0] = v44;
          v63[1] = v41;
          result = ((uint64_t (*)(_QWORD **, uint64_t, _DWORD *, uint64_t))(*a1)[12])(a1, a3, v63, 2);
          v57 = result;
          v58 = *(unsigned int *)(a4 + 8);
          if (v58 >= *(_DWORD *)(a4 + 12))
          {
            result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v58 + 1, 4);
            LODWORD(v58) = *(_DWORD *)(a4 + 8);
          }
          *(_DWORD *)(*(_QWORD *)a4 + 4 * v58) = v57;
          ++*(_DWORD *)(a4 + 8);
          a9 = v61;
        }
        goto LABEL_57;
      }
      result = ((uint64_t (*)(_QWORD **, uint64_t))(*a1)[23])(a1, v44);
    }
    else
    {
      result = ((uint64_t (*)(_QWORD **, uint64_t))(*a1)[24])(a1, v41);
    }
    goto LABEL_54;
  }
  if (a2[13] != -1)
  {
    v61 = a9;
    v41 = 0;
    v39 = 0;
    v40 = 1;
    goto LABEL_34;
  }
LABEL_57:
  v51 = *(unsigned int *)(a9 + 8);
  if ((_DWORD)v51)
  {
    v52 = *(int **)a9;
    v53 = *(_DWORD *)(a4 + 8);
    v54 = 4 * v51;
    do
    {
      v55 = *v52;
      if (v53 >= *(_DWORD *)(a4 + 12))
      {
        v56 = a9;
        result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v53 + 1, 4);
        a9 = v56;
        v53 = *(_DWORD *)(a4 + 8);
      }
      *(_DWORD *)(*(_QWORD *)a4 + 4 * v53) = v55;
      v53 = *(_DWORD *)(a4 + 8) + 1;
      *(_DWORD *)(a4 + 8) = v53;
      ++v52;
      v54 -= 4;
    }
    while (v54);
  }
  *(_DWORD *)(a9 + 8) = 0;
  return result;
}

uint64_t llvm::GPUSDISel::getOperand(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4)
{
  return *(_QWORD *)(*(_QWORD *)(a2 + 32) + 40 * a4);
}

uint64_t llvm::GPUSDISel::getOpcode(uint64_t a1, uint64_t a2)
{
  return *(unsigned __int16 *)(a2 + 24);
}

{
  return *(unsigned __int16 *)(a2 + 24);
}

uint64_t *llvm::GPUSDISel::GetStateSourceByteOffset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;

  if (*(_WORD *)(a3 + 24) != 11)
    return (uint64_t *)*(int *)(a3 + 80);
  v3 = *(_QWORD *)(a3 + 80);
  v4 = (uint64_t *)(v3 + 24);
  if (*(_DWORD *)(v3 + 32) >= 0x41u)
    v4 = (uint64_t *)*v4;
  return (uint64_t *)*v4;
}

uint64_t *llvm::GPUSDISel::GetBaseSourceByteOffset(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t *v4;

  v3 = *(_QWORD *)(a3 + 80);
  v4 = (uint64_t *)(v3 + 24);
  if (*(_DWORD *)(v3 + 32) >= 0x41u)
    v4 = (uint64_t *)*v4;
  return (uint64_t *)*v4;
}

_QWORD *llvm::GPUSDISel::FixupTexStateSource(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unsigned int v15;
  _QWORD *v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned int v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unsigned int v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unsigned int v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unsigned int v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  unsigned __int8 *v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  _QWORD v64[17];

  v64[16] = *MEMORY[0x1E0C80C00];
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 120))(*(_QWORD *)(a1 + 8)))
  {
    v61 = 0;
    v62 = v64;
    v63 = 0x800000000;
    v7 = *(_QWORD *)(a1 + 40);
    v60 = 0;
    v8 = sub_1C6366AB4(v7, 0, (const llvm::APInt *)&v60, (llvm *)5, 0, 1, 0);
    v10 = v63;
    if (v63 >= HIDWORD(v63))
    {
      v53 = v8;
      v46 = v9;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, (uint64_t)v64, v63 + 1, 16);
      v9 = v46;
      v8 = v53;
      v10 = v63;
    }
    v11 = (char *)v62 + 16 * v10;
    *v11 = v8;
    v11[1] = v9;
    LODWORD(v63) = v63 + 1;
    if (v60)
      llvm::MetadataTracking::untrack((uint64_t)&v60, v60);
    v12 = *(_QWORD *)(a1 + 40);
    v60 = 0;
    v61 = 0;
    v13 = sub_1C6366AB4(v12, 0, (const llvm::APInt *)&v60, (llvm *)5, 0, 1, 0);
    v15 = v63;
    if (v63 >= HIDWORD(v63))
    {
      v54 = v13;
      v47 = v14;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, (uint64_t)v64, v63 + 1, 16);
      v14 = v47;
      v13 = v54;
      v15 = v63;
    }
    v16 = (char *)v62 + 16 * v15;
    *v16 = v13;
    v16[1] = v14;
    v17 = v63 + 1;
    LODWORD(v63) = v63 + 1;
    if (v60)
    {
      llvm::MetadataTracking::untrack((uint64_t)&v60, v60);
      v17 = v63;
    }
    if (v17 >= HIDWORD(v63))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, (uint64_t)v64, v17 + 1, 16);
      v17 = v63;
    }
    v18 = (char *)v62 + 16 * v17;
    *v18 = a2;
    v18[1] = a3;
    LODWORD(v63) = v63 + 1;
    v19 = *(_QWORD *)(a1 + 40);
    v60 = 0;
    v61 = 0;
    v20 = sub_1C6366AB4(v19, 0, (const llvm::APInt *)&v60, (llvm *)5, 0, 1, 0);
    v22 = v63;
    if (v63 >= HIDWORD(v63))
    {
      v55 = v20;
      v48 = v21;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, (uint64_t)v64, v63 + 1, 16);
      v21 = v48;
      v20 = v55;
      v22 = v63;
    }
    v23 = (char *)v62 + 16 * v22;
    *v23 = v20;
    v23[1] = v21;
    LODWORD(v63) = v63 + 1;
    if (v60)
      llvm::MetadataTracking::untrack((uint64_t)&v60, v60);
    v24 = *(_QWORD *)(a1 + 40);
    v60 = 0;
    v61 = 0;
    v25 = sub_1C6366AB4(v24, 1, (const llvm::APInt *)&v60, (llvm *)5, 0, 1, 0);
    v27 = v63;
    if (v63 >= HIDWORD(v63))
    {
      v56 = v25;
      v49 = v26;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, (uint64_t)v64, v63 + 1, 16);
      v26 = v49;
      v25 = v56;
      v27 = v63;
    }
    v28 = (char *)v62 + 16 * v27;
    *v28 = v25;
    v28[1] = v26;
    LODWORD(v63) = v63 + 1;
    if (v60)
      llvm::MetadataTracking::untrack((uint64_t)&v60, v60);
    v29 = *(_QWORD *)(a1 + 40);
    v60 = 0;
    v61 = 0;
    v30 = sub_1C6366AB4(v29, 0, (const llvm::APInt *)&v60, (llvm *)5, 0, 1, 0);
    v32 = v63;
    if (v63 >= HIDWORD(v63))
    {
      v57 = v30;
      v50 = v31;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, (uint64_t)v64, v63 + 1, 16);
      v31 = v50;
      v30 = v57;
      v32 = v63;
    }
    v33 = (char *)v62 + 16 * v32;
    *v33 = v30;
    v33[1] = v31;
    LODWORD(v63) = v63 + 1;
    if (v60)
      llvm::MetadataTracking::untrack((uint64_t)&v60, v60);
    v34 = *(_QWORD *)(a1 + 40);
    v60 = 0;
    v61 = 0;
    v35 = sub_1C6366AB4(v34, 0, (const llvm::APInt *)&v60, (llvm *)5, 0, 1, 0);
    v37 = v63;
    if (v63 >= HIDWORD(v63))
    {
      v58 = v35;
      v51 = v36;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, (uint64_t)v64, v63 + 1, 16);
      v36 = v51;
      v35 = v58;
      v37 = v63;
    }
    v38 = (char *)v62 + 16 * v37;
    *v38 = v35;
    v38[1] = v36;
    LODWORD(v63) = v63 + 1;
    if (v60)
      llvm::MetadataTracking::untrack((uint64_t)&v60, v60);
    v39 = sub_1C5D428B0(*(_QWORD *)(a1 + 40), 0, (llvm *)5, 0);
    v41 = v63;
    if (v63 >= HIDWORD(v63))
    {
      v59 = v39;
      v52 = v40;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, (uint64_t)v64, v63 + 1, 16);
      v40 = v52;
      v39 = v59;
      v41 = v63;
    }
    v42 = (uint64_t *)((char *)v62 + 16 * v41);
    *v42 = v39;
    v42[1] = v40;
    LODWORD(v63) = v63 + 1;
    v43 = *(_QWORD *)(a1 + 40);
    v44 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 128))(*(_QWORD *)(a1 + 8));
    v60 = 0;
    v61 = 0;
    v45 = a2[5] + 16 * a3;
    a2 = sub_1C636E56C(v43, v44, (uint64_t)&v60, *(llvm **)v45, *(_QWORD *)(v45 + 8), (uint64_t *)v62, v63);
    if (v60)
      llvm::MetadataTracking::untrack((uint64_t)&v60, v60);
    if (v62 != v64)
      free(v62);
  }
  return a2;
}

_QWORD *llvm::GPUSDISel::FixupSmpStateSource(uint64_t a1, _QWORD *a2, uint64_t a3)
{
  uint64_t v7;
  _QWORD *v8;
  uint64_t v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  unsigned int v15;
  _QWORD *v16;
  unsigned int v17;
  _QWORD *v18;
  uint64_t v19;
  _QWORD *v20;
  uint64_t v21;
  unsigned int v22;
  _QWORD *v23;
  uint64_t v24;
  _QWORD *v25;
  uint64_t v26;
  unsigned int v27;
  _QWORD *v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  unsigned int v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unsigned int v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  unsigned int v41;
  uint64_t *v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  uint64_t v59;
  unsigned __int8 *v60;
  uint64_t v61;
  void *v62;
  uint64_t v63;
  _QWORD v64[17];

  v64[16] = *MEMORY[0x1E0C80C00];
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 120))(*(_QWORD *)(a1 + 8)))
  {
    v61 = 0;
    v62 = v64;
    v63 = 0x800000000;
    v7 = *(_QWORD *)(a1 + 40);
    v60 = 0;
    v8 = sub_1C6366AB4(v7, 0, (const llvm::APInt *)&v60, (llvm *)5, 0, 1, 0);
    v10 = v63;
    if (v63 >= HIDWORD(v63))
    {
      v53 = v8;
      v46 = v9;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, (uint64_t)v64, v63 + 1, 16);
      v9 = v46;
      v8 = v53;
      v10 = v63;
    }
    v11 = (char *)v62 + 16 * v10;
    *v11 = v8;
    v11[1] = v9;
    LODWORD(v63) = v63 + 1;
    if (v60)
      llvm::MetadataTracking::untrack((uint64_t)&v60, v60);
    v12 = *(_QWORD *)(a1 + 40);
    v60 = 0;
    v61 = 0;
    v13 = sub_1C6366AB4(v12, 0, (const llvm::APInt *)&v60, (llvm *)5, 0, 1, 0);
    v15 = v63;
    if (v63 >= HIDWORD(v63))
    {
      v54 = v13;
      v47 = v14;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, (uint64_t)v64, v63 + 1, 16);
      v14 = v47;
      v13 = v54;
      v15 = v63;
    }
    v16 = (char *)v62 + 16 * v15;
    *v16 = v13;
    v16[1] = v14;
    v17 = v63 + 1;
    LODWORD(v63) = v63 + 1;
    if (v60)
    {
      llvm::MetadataTracking::untrack((uint64_t)&v60, v60);
      v17 = v63;
    }
    if (v17 >= HIDWORD(v63))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, (uint64_t)v64, v17 + 1, 16);
      v17 = v63;
    }
    v18 = (char *)v62 + 16 * v17;
    *v18 = a2;
    v18[1] = a3;
    LODWORD(v63) = v63 + 1;
    v19 = *(_QWORD *)(a1 + 40);
    v60 = 0;
    v61 = 0;
    v20 = sub_1C6366AB4(v19, 0, (const llvm::APInt *)&v60, (llvm *)5, 0, 1, 0);
    v22 = v63;
    if (v63 >= HIDWORD(v63))
    {
      v55 = v20;
      v48 = v21;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, (uint64_t)v64, v63 + 1, 16);
      v21 = v48;
      v20 = v55;
      v22 = v63;
    }
    v23 = (char *)v62 + 16 * v22;
    *v23 = v20;
    v23[1] = v21;
    LODWORD(v63) = v63 + 1;
    if (v60)
      llvm::MetadataTracking::untrack((uint64_t)&v60, v60);
    v24 = *(_QWORD *)(a1 + 40);
    v60 = 0;
    v61 = 0;
    v25 = sub_1C6366AB4(v24, 1, (const llvm::APInt *)&v60, (llvm *)5, 0, 1, 0);
    v27 = v63;
    if (v63 >= HIDWORD(v63))
    {
      v56 = v25;
      v49 = v26;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, (uint64_t)v64, v63 + 1, 16);
      v26 = v49;
      v25 = v56;
      v27 = v63;
    }
    v28 = (char *)v62 + 16 * v27;
    *v28 = v25;
    v28[1] = v26;
    LODWORD(v63) = v63 + 1;
    if (v60)
      llvm::MetadataTracking::untrack((uint64_t)&v60, v60);
    v29 = *(_QWORD *)(a1 + 40);
    v60 = 0;
    v61 = 0;
    v30 = sub_1C6366AB4(v29, 0, (const llvm::APInt *)&v60, (llvm *)5, 0, 1, 0);
    v32 = v63;
    if (v63 >= HIDWORD(v63))
    {
      v57 = v30;
      v50 = v31;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, (uint64_t)v64, v63 + 1, 16);
      v31 = v50;
      v30 = v57;
      v32 = v63;
    }
    v33 = (char *)v62 + 16 * v32;
    *v33 = v30;
    v33[1] = v31;
    LODWORD(v63) = v63 + 1;
    if (v60)
      llvm::MetadataTracking::untrack((uint64_t)&v60, v60);
    v34 = *(_QWORD *)(a1 + 40);
    v60 = 0;
    v61 = 0;
    v35 = sub_1C6366AB4(v34, 0, (const llvm::APInt *)&v60, (llvm *)5, 0, 1, 0);
    v37 = v63;
    if (v63 >= HIDWORD(v63))
    {
      v58 = v35;
      v51 = v36;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, (uint64_t)v64, v63 + 1, 16);
      v36 = v51;
      v35 = v58;
      v37 = v63;
    }
    v38 = (char *)v62 + 16 * v37;
    *v38 = v35;
    v38[1] = v36;
    LODWORD(v63) = v63 + 1;
    if (v60)
      llvm::MetadataTracking::untrack((uint64_t)&v60, v60);
    v39 = sub_1C5D428B0(*(_QWORD *)(a1 + 40), 0, (llvm *)5, 0);
    v41 = v63;
    if (v63 >= HIDWORD(v63))
    {
      v59 = v39;
      v52 = v40;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v62, (uint64_t)v64, v63 + 1, 16);
      v40 = v52;
      v39 = v59;
      v41 = v63;
    }
    v42 = (uint64_t *)((char *)v62 + 16 * v41);
    *v42 = v39;
    v42[1] = v40;
    LODWORD(v63) = v63 + 1;
    v43 = *(_QWORD *)(a1 + 40);
    v44 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 128))(*(_QWORD *)(a1 + 8));
    v60 = 0;
    v61 = 0;
    v45 = a2[5] + 16 * a3;
    a2 = sub_1C636E56C(v43, v44, (uint64_t)&v60, *(llvm **)v45, *(_QWORD *)(v45 + 8), (uint64_t *)v62, v63);
    if (v60)
      llvm::MetadataTracking::untrack((uint64_t)&v60, v60);
    if (v62 != v64)
      free(v62);
  }
  return a2;
}

double llvm::GPUSDISel::GetTexSmpStateSource@<D0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X8>)
{
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  __int128 *v19;
  __int128 *v20;
  uint64_t v21;
  __int128 *v22;
  uint64_t v23;
  __int128 *v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  _QWORD *v28;
  _QWORD *v29;
  int v30;
  uint64_t v31;
  unsigned int v32;
  int v33;
  uint64_t v34;
  _QWORD *v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  unsigned int v39;
  int v40;
  int v41;
  int v42;
  unsigned __int8 *v43;
  int v44;
  unsigned int v45;
  uint64_t ExtendedSizeInBits;
  const char *v47;
  unint64_t v48;
  uint64_t v49;
  unsigned int v50;
  int v51;
  int v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  unint64_t *v56;
  unint64_t v57;
  unsigned int v58;
  _QWORD *v59;
  uint64_t v60;
  int v61;
  uint64_t v62;
  _QWORD *v63;
  _QWORD *v64;
  unsigned int v65;
  int v66;
  int v67;
  uint64_t v68;
  int v69;
  double result;
  uint64_t v71;
  unsigned int v72;
  unsigned int v73;
  __int128 v74;
  __int128 v75;
  int v76;
  _QWORD *v77;
  uint64_t v78;
  _QWORD v79[2];
  _QWORD v80[2];
  __int128 v81;
  __int128 v82;
  _BYTE v83[23];
  uint64_t v84;

  v84 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)&v82 = 0;
  DWORD2(v82) = 0;
  *(_QWORD *)&v81 = 0;
  DWORD2(v81) = 0;
  v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, a2, a3);
  v13 = v12;
  v80[0] = v11;
  v80[1] = v12;
  v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, a2, a4);
  v16 = v15;
  v79[0] = v14;
  v79[1] = v15;
  v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, a2, a5);
  v77 = (_QWORD *)v17;
  v78 = v18;
  v76 = 0;
  if (*(_WORD *)(v11 + 24) == 201)
    v19 = *(__int128 **)(v11 + 32);
  else
    v19 = (__int128 *)v80;
  v75 = *v19;
  if (*(_WORD *)(v75 + 24) == 199)
    v20 = *(__int128 **)(v75 + 32);
  else
    v20 = &v75;
  v21 = *(_QWORD *)v20;
  DWORD2(v75) = *((_DWORD *)v20 + 2);
  *(_QWORD *)&v75 = v21;
  if (*(_WORD *)(v21 + 24) == 216)
    v22 = *(__int128 **)(v21 + 32);
  else
    v22 = &v75;
  v23 = *(_QWORD *)v22;
  DWORD2(v75) = *((_DWORD *)v22 + 2);
  *(_QWORD *)&v75 = v23;
  if (*(__int16 *)(v23 + 24) == -9)
    v24 = *(__int128 **)(v23 + 32);
  else
    v24 = &v75;
  v25 = *(_QWORD *)v24;
  DWORD2(v75) = *((_DWORD *)v24 + 2);
  *(_QWORD *)&v75 = v25;
  if (*(_WORD *)(v17 + 24) == 199)
    v26 = *(_QWORD **)(v17 + 32);
  else
    v26 = &v77;
  v27 = *v26;
  LODWORD(v78) = *((_DWORD *)v26 + 2);
  v77 = (_QWORD *)v27;
  if (*(_WORD *)(v27 + 24) == 216)
    v28 = *(_QWORD **)(v27 + 32);
  else
    v28 = &v77;
  v29 = (_QWORD *)*v28;
  LODWORD(v78) = *((_DWORD *)v28 + 2);
  v77 = v29;
  v30 = *((unsigned __int16 *)v29 + 12);
  if (v30 == 35 || v30 == 11)
  {
    v31 = v29[10];
    v32 = *(_DWORD *)(v31 + 32);
    if (v32 > 0x40)
    {
      if ((**(_QWORD **)(v31 + 24) & 0x8000000000000000) != 0)
        goto LABEL_23;
    }
    else if ((uint64_t)(*(_QWORD *)(v31 + 24) << -(char)v32) >> -(char)v32 < 0)
    {
LABEL_23:
      v33 = *(unsigned __int16 *)(v75 + 24);
      if (v33 == 45 || v33 == 35)
      {
        v36 = (_QWORD *)*(int *)(v75 + 80);
      }
      else
      {
        if (v33 != 11)
        {
          LODWORD(v49) = 2;
          v76 = 2;
          v53 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 32))(a1, v11, v13);
          goto LABEL_57;
        }
        v34 = *(_QWORD *)(v75 + 80);
        v35 = (_QWORD *)(v34 + 24);
        if (*(_DWORD *)(v34 + 32) >= 0x41u)
          v35 = (_QWORD *)*v35;
        v36 = (_QWORD *)*v35;
      }
      v50 = (*(uint64_t (**)(_QWORD, _QWORD *))(**(_QWORD **)(a1 + 8) + 136))(*(_QWORD *)(a1 + 8), v36);
      v53 = sub_1C5D410E8(*(_QWORD *)(a1 + 40), v51, (llvm *)0xA, 0, v50, v52);
      LODWORD(v49) = 0;
LABEL_57:
      v45 = 0;
      v29 = 0;
      *(_QWORD *)&v82 = v53;
      DWORD2(v82) = v54;
      goto LABEL_58;
    }
  }
  v37 = *(_QWORD *)(v11 + 80);
  v38 = (_QWORD *)(v37 + 24);
  if (*(_DWORD *)(v37 + 32) >= 0x41u)
    v38 = (_QWORD *)*v38;
  v39 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 8) + 144))(*(_QWORD *)(a1 + 8), *v38);
  *(_QWORD *)&v82 = sub_1C5D410E8(*(_QWORD *)(a1 + 40), v40, (llvm *)0xA, 0, v39, v41);
  DWORD2(v82) = v42;
  v43 = *(unsigned __int8 **)(a2 + 64);
  *(_QWORD *)v83 = v43;
  if (v43)
    llvm::MetadataTracking::track((uint64_t)v83, v43, 2);
  *(_DWORD *)&v83[8] = *(_DWORD *)(a2 + 60);
  v44 = *((unsigned __int16 *)v29 + 12);
  if (v44 != 11 && v44 != 35)
  {
    v45 = v78;
LABEL_37:
    v74 = *(_OWORD *)(v29[5] + 16 * v45);
    if ((_BYTE)v74)
      ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)&v74);
    else
      ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v74);
    v48 = ExtendedSizeInBits;
    if ((_DWORD)v47 == 1)
    if (v48 > 0x20)
    {
      v71 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 264))(*(_QWORD *)(a1 + 8));
      v29 = sub_1C636E638(*(_QWORD *)(a1 + 40), SHIDWORD(v71), (const llvm::APInt *)v83, (llvm *)5, 0, (uint64_t)v29, v78);
      LODWORD(v49) = 8;
      v45 = v72;
    }
    else if (v74 == 4)
    {
      LODWORD(v49) = 6;
    }
    else
    {
      LODWORD(v49) = 8;
    }
    v76 = v49;
    goto LABEL_47;
  }
  v55 = v29[10];
  v56 = (unint64_t *)(v55 + 24);
  if (*(_DWORD *)(v55 + 32) >= 0x41u)
    v56 = (unint64_t *)*v56;
  v57 = *v56;
  if (*v56)
  {
    if (v57 < 0x10000)
      v49 = 4;
    else
      v49 = 5;
    goto LABEL_77;
  }
  v49 = 4;
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 96))(*(_QWORD *)(a1 + 8)) & 1) == 0)
  {
LABEL_77:
    v29 = sub_1C6366AB4(*(_QWORD *)(a1 + 40), v57, (const llvm::APInt *)v83, (llvm *)v49, 0, 0, 0);
    LODWORD(v78) = v73;
    v45 = v73;
    sub_1C612E190(*(_QWORD *)(a1 + 40), a2, 0, (uint64_t)v29);
    goto LABEL_37;
  }
  v76 = 4;
  v29 = sub_1C6366AB4(*(_QWORD *)(a1 + 40), 0, (const llvm::APInt *)v83, (llvm *)3, 0, 0, 0);
  v45 = v58;
LABEL_47:
  if (*(_QWORD *)v83)
    llvm::MetadataTracking::untrack((uint64_t)v83, *(unsigned __int8 **)v83);
LABEL_58:
  if (*(_WORD *)(v14 + 24) == 201)
    v59 = *(_QWORD **)(v14 + 32);
  else
    v59 = v79;
  v60 = *v59;
  *(_QWORD *)&v75 = v60;
  DWORD2(v75) = *((_DWORD *)v59 + 2);
  v61 = *(unsigned __int16 *)(v60 + 24);
  if (v61 == 45 || v61 == 35)
  {
    v64 = (_QWORD *)*(int *)(v60 + 80);
LABEL_68:
    v65 = (*(uint64_t (**)(_QWORD, _QWORD *))(**(_QWORD **)(a1 + 8) + 152))(*(_QWORD *)(a1 + 8), v64);
    v68 = sub_1C5D410E8(*(_QWORD *)(a1 + 40), v66, (llvm *)0xA, 0, v65, v67);
    goto LABEL_70;
  }
  if (v61 == 11)
  {
    v62 = *(_QWORD *)(v60 + 80);
    v63 = (_QWORD *)(v62 + 24);
    if (*(_DWORD *)(v62 + 32) >= 0x41u)
      v63 = (_QWORD *)*v63;
    v64 = (_QWORD *)*v63;
    goto LABEL_68;
  }
  LODWORD(v49) = v49 | 1;
  v76 = v49;
  v68 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 40))(a1, v14, v16);
LABEL_70:
  *(_QWORD *)&v81 = v68;
  DWORD2(v81) = v69;
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 32))(*(_QWORD *)(a1 + 8)) & 1) == 0)
  {
    (*(void (**)(uint64_t, uint64_t, __int128 *, __int128 *, int *))(*(_QWORD *)a1 + 280))(a1, a2, &v82, &v81, &v76);
    LODWORD(v49) = v76;
  }
  *(_OWORD *)a6 = v82;
  *(_OWORD *)&v83[7] = v81;
  *(_BYTE *)(a6 + 16) = 1;
  *(_QWORD *)(a6 + 24) = v29;
  *(_DWORD *)(a6 + 32) = v45;
  *(_DWORD *)(a6 + 36) = 0;
  *(_BYTE *)(a6 + 40) = 1;
  result = *(double *)v83;
  *(_OWORD *)(a6 + 41) = *(_OWORD *)v83;
  *(_QWORD *)(a6 + 56) = *(_QWORD *)&v83[15];
  *(_BYTE *)(a6 + 64) = 1;
  *(_DWORD *)(a6 + 72) = v49;
  *(_BYTE *)(a6 + 80) = 0;
  *(_BYTE *)(a6 + 96) = 0;
  *(_BYTE *)(a6 + 104) = 1;
  return result;
}

uint64_t llvm::GPUSDISel::GetSharedRegisterReadByteOffset(uint64_t a1, uint64_t a2)
{
  int v3;
  uint64_t v4;
  unsigned int *v5;

  v3 = *(unsigned __int16 *)(a2 + 24);
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 360))(*(_QWORD *)(a1 + 8)) != v3)
    return 0xFFFFFFFFLL;
  v4 = *(_QWORD *)(**(_QWORD **)(a2 + 32) + 80);
  v5 = (unsigned int *)(v4 + 24);
  if (*(_DWORD *)(v4 + 32) >= 0x41u)
    v5 = *(unsigned int **)v5;
  return *v5;
}

_QWORD *llvm::GPUSDISel::GetConstantValue(llvm::GPUSDISel *this, uint64_t a2)
{
  uint64_t v3;
  uint64_t *v4;
  int *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  _QWORD *v21;
  unsigned __int8 *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  void *v27;
  uint64_t v28;
  _BYTE v29[128];
  void *v30;
  uint64_t v31;
  _QWORD v32[17];

  v32[16] = *MEMORY[0x1E0C80C00];
  v26 = 0;
  v30 = v32;
  v31 = 0x800000000;
  v25 = 0;
  (*(void (**)(_QWORD, uint64_t, int *, uint64_t *, void **))(**((_QWORD **)this + 1) + 296))(*((_QWORD *)this + 1), a2, &v26, &v25, &v30);
  v27 = v29;
  v28 = 0x800000000;
  if ((_DWORD)v31)
  {
    v5 = (int *)v30;
    v6 = 16 * v31;
    do
    {
      v7 = v5[1];
      if (v7)
      {
        if (v7 == 1)
        {
          v8 = *((_QWORD *)this + 5);
          v9 = *v5;
          v23 = 0;
          v24 = 0;
          v10 = sub_1C6366AB4(v8, v9, (const llvm::APInt *)&v23, (llvm *)5, 0, 1, 0);
          v12 = v11;
          v13 = v28;
          if (v28 >= (unint64_t)HIDWORD(v28))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, (uint64_t)v29, v28 + 1, 16);
            v13 = v28;
          }
          v14 = (char *)v27 + 16 * v13;
          *v14 = v10;
          v14[1] = v12;
          LODWORD(v28) = v28 + 1;
          if (v23)
            llvm::MetadataTracking::untrack((uint64_t)&v23, v23);
        }
      }
      else
      {
        v15 = sub_1C5D428B0(*((_QWORD *)this + 5), *v5, (llvm *)5, 0);
        v17 = v16;
        v18 = v28;
        if (v28 >= (unint64_t)HIDWORD(v28))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, (uint64_t)v29, v28 + 1, 16);
          v18 = v28;
        }
        v19 = (uint64_t *)((char *)v27 + 16 * v18);
        *v19 = v15;
        v19[1] = v17;
        LODWORD(v28) = v28 + 1;
      }
      v5 += 4;
      v6 -= 16;
    }
    while (v6);
    v4 = (uint64_t *)v27;
    v3 = v28;
  }
  else
  {
    v3 = 0;
    v4 = (uint64_t *)v29;
  }
  v20 = *((_QWORD *)this + 5);
  v23 = 0;
  v24 = 0;
  v21 = sub_1C636E56C(v20, v26, (uint64_t)&v23, (llvm *)4, 0, v4, v3);
  if (v23)
    llvm::MetadataTracking::untrack((uint64_t)&v23, v23);
  if (v27 != v29)
    free(v27);
  if (v30 != v32)
    free(v30);
  return v21;
}

{
  uint64_t v3;
  uint64_t *v4;
  int *v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t *v19;
  uint64_t v20;
  _QWORD *v21;
  unsigned __int8 *v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  void *v27;
  uint64_t v28;
  _BYTE v29[128];
  void *v30;
  uint64_t v31;
  _QWORD v32[17];

  v32[16] = *MEMORY[0x1E0C80C00];
  v26 = 0;
  v30 = v32;
  v31 = 0x800000000;
  v25 = 0;
  (*(void (**)(_QWORD, uint64_t, int *, uint64_t *, void **))(**((_QWORD **)this + 1) + 304))(*((_QWORD *)this + 1), a2, &v26, &v25, &v30);
  v27 = v29;
  v28 = 0x800000000;
  if ((_DWORD)v31)
  {
    v5 = (int *)v30;
    v6 = 16 * v31;
    do
    {
      v7 = v5[1];
      if (v7)
      {
        if (v7 == 1)
        {
          v8 = *((_QWORD *)this + 5);
          v9 = *v5;
          v23 = 0;
          v24 = 0;
          v10 = sub_1C6366AB4(v8, v9, (const llvm::APInt *)&v23, (llvm *)5, 0, 1, 0);
          v12 = v11;
          v13 = v28;
          if (v28 >= (unint64_t)HIDWORD(v28))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, (uint64_t)v29, v28 + 1, 16);
            v13 = v28;
          }
          v14 = (char *)v27 + 16 * v13;
          *v14 = v10;
          v14[1] = v12;
          LODWORD(v28) = v28 + 1;
          if (v23)
            llvm::MetadataTracking::untrack((uint64_t)&v23, v23);
        }
      }
      else
      {
        v15 = sub_1C5D428B0(*((_QWORD *)this + 5), *v5, (llvm *)5, 0);
        v17 = v16;
        v18 = v28;
        if (v28 >= (unint64_t)HIDWORD(v28))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v27, (uint64_t)v29, v28 + 1, 16);
          v18 = v28;
        }
        v19 = (uint64_t *)((char *)v27 + 16 * v18);
        *v19 = v15;
        v19[1] = v17;
        LODWORD(v28) = v28 + 1;
      }
      v5 += 4;
      v6 -= 16;
    }
    while (v6);
    v4 = (uint64_t *)v27;
    v3 = v28;
  }
  else
  {
    v3 = 0;
    v4 = (uint64_t *)v29;
  }
  v20 = *((_QWORD *)this + 5);
  v23 = 0;
  v24 = 0;
  v21 = sub_1C636E56C(v20, v26, (uint64_t)&v23, (llvm *)5, 0, v4, v3);
  if (v23)
    llvm::MetadataTracking::untrack((uint64_t)&v23, v23);
  if (v27 != v29)
    free(v27);
  if (v30 != v32)
    free(v30);
  return v21;
}

double llvm::GPUSDISel::AddDefaultPredicates(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unsigned int v4;
  uint64_t v5;
  double result;

  v3 = *(unsigned int *)(a2 + 8);
  if (v3 >= *(_DWORD *)(a2 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v3 + 1, 16);
    LODWORD(v3) = *(_DWORD *)(a2 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v3) = xmmword_1C640F7B0;
  v4 = *(_DWORD *)(a2 + 12);
  v5 = (*(_DWORD *)(a2 + 8) + 1);
  *(_DWORD *)(a2 + 8) = v5;
  if (v5 >= v4)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a2, a2 + 16, v5 + 1, 16);
    LODWORD(v5) = *(_DWORD *)(a2 + 8);
  }
  result = 0.0;
  *(_OWORD *)(*(_QWORD *)a2 + 16 * v5) = xmmword_1C640F7C0;
  ++*(_DWORD *)(a2 + 8);
  return result;
}

void llvm::GPUSDISel::GetInstrOps(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int128 *a5, __int128 *a6, __int128 *a7, uint64_t a8, _QWORD *a9, uint64_t a10, __int128 *a11, __int128 *a12, uint64_t a13, int a14, __int128 *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21)
{
  uint64_t v26;
  _QWORD *v27;
  uint64_t v28;
  _QWORD *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  __int128 v41;
  uint64_t v42;
  uint64_t v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  __int128 v47;
  uint64_t v48;
  uint64_t v49;
  __int128 v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v59;
  unsigned int v60;
  __int128 v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t *v67;
  uint64_t v68;
  unsigned int v70;
  uint64_t v71;
  __int128 v72;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  unint64_t v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t *v97;
  uint64_t v98;
  __n128 v99;
  _QWORD *v100;
  uint64_t v101;
  _DWORD *v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unint64_t v108;
  uint64_t *v109;
  __int128 *v110;
  uint64_t v111;
  __int128 v112;
  __int128 v113;
  __int128 v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  __int128 v118;
  int v120;
  void *v121;
  uint64_t v122;
  _QWORD v123[18];

  v26 = a18;
  v27 = a9;
  v123[16] = *MEMORY[0x1E0C80C00];
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8)))
  {
    v110 = a7;
    v111 = a2;
    if (a10)
    {
      v28 = 8 * a10;
      v29 = a9;
      while (1)
      {
        LODWORD(v121) = *v29;
        v30 = *(_QWORD *)(a21 + 24);
        if (!v30)
          break;
        v31 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v30 + 48))(v30, &v121);
        v33 = v32;
        v34 = *(unsigned int *)(a20 + 8);
        if (v34 >= *(unsigned int *)(a20 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a20, a20 + 16, v34 + 1, 16);
          v34 = *(unsigned int *)(a20 + 8);
        }
        v35 = (uint64_t *)(*(_QWORD *)a20 + 16 * v34);
        *v35 = v31;
        v35[1] = v33;
        ++*(_DWORD *)(a20 + 8);
        ++v29;
        v28 -= 8;
        if (!v28)
          goto LABEL_8;
      }
LABEL_97:
      sub_1C485C2F0();
    }
LABEL_8:
    v26 = a18;
    a2 = v111;
    a7 = v110;
    if (a18)
    {
      v36 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 96))(a1, a3, a17, a18);
      v38 = v37;
      v39 = *(unsigned int *)(a20 + 8);
      if (v39 >= *(_DWORD *)(a20 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a20, a20 + 16, v39 + 1, 16);
        LODWORD(v39) = *(_DWORD *)(a20 + 8);
      }
      v40 = (uint64_t *)(*(_QWORD *)a20 + 16 * v39);
      *v40 = v36;
      v40[1] = v38;
      ++*(_DWORD *)(a20 + 8);
      a2 = v111;
    }
  }
  v41 = *a5;
  v42 = *(unsigned int *)(a20 + 8);
  if (v42 >= *(_DWORD *)(a20 + 12))
  {
    v114 = *a5;
    llvm::SmallVectorBase<unsigned int>::grow_pod(a20, a20 + 16, v42 + 1, 16);
    v41 = v114;
    LODWORD(v42) = *(_DWORD *)(a20 + 8);
  }
  *(_OWORD *)(*(_QWORD *)a20 + 16 * v42) = v41;
  v43 = (*(_DWORD *)(a20 + 8) + 1);
  *(_DWORD *)(a20 + 8) = v43;
  if (*((_BYTE *)a6 + 16))
  {
    v44 = *a6;
    if (v43 >= *(_DWORD *)(a20 + 12))
    {
      v115 = *a6;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a20, a20 + 16, v43 + 1, 16);
      v44 = v115;
      LODWORD(v43) = *(_DWORD *)(a20 + 8);
    }
    *(_OWORD *)(*(_QWORD *)a20 + 16 * v43) = v44;
    ++*(_DWORD *)(a20 + 8);
  }
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 208))(*(_QWORD *)(a1 + 8)) == 1)
  {
    v45 = *a11;
    v46 = *(unsigned int *)(a20 + 8);
    if (v46 >= *(_DWORD *)(a20 + 12))
    {
      v116 = *a11;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a20, a20 + 16, v46 + 1, 16);
      v45 = v116;
      LODWORD(v46) = *(_DWORD *)(a20 + 8);
    }
    *(_OWORD *)(*(_QWORD *)a20 + 16 * v46) = v45;
    ++*(_DWORD *)(a20 + 8);
  }
  if ((((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 232))(*(_QWORD *)(a1 + 8)) & 1) != 0
     || *(_DWORD *)(a2 + 92) == -1)
    && *((_BYTE *)a7 + 16))
  {
    v47 = *a7;
    v48 = *(unsigned int *)(a20 + 8);
    if (v48 >= *(_DWORD *)(a20 + 12))
    {
      v118 = *a7;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a20, a20 + 16, v48 + 1, 16);
      v47 = v118;
      LODWORD(v48) = *(_DWORD *)(a20 + 8);
    }
    *(_OWORD *)(*(_QWORD *)a20 + 16 * v48) = v47;
    ++*(_DWORD *)(a20 + 8);
  }
  v49 = v26;
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 208))(*(_QWORD *)(a1 + 8)) == 3)
  {
    v50 = *a11;
    v51 = *(unsigned int *)(a20 + 8);
    if (v51 >= *(_DWORD *)(a20 + 12))
    {
      v117 = *a11;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a20, a20 + 16, v51 + 1, 16);
      v50 = v117;
      LODWORD(v51) = *(_DWORD *)(a20 + 8);
    }
    *(_OWORD *)(*(_QWORD *)a20 + 16 * v51) = v50;
    ++*(_DWORD *)(a20 + 8);
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8)))
    {
      LODWORD(v121) = 0;
      v52 = *(_QWORD *)(a21 + 24);
      if (!v52)
        goto LABEL_97;
      v53 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v52 + 48))(v52, &v121);
      v55 = v54;
      v56 = *(unsigned int *)(a20 + 8);
      if (v56 >= *(_DWORD *)(a20 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a20, a20 + 16, v56 + 1, 16);
        LODWORD(v56) = *(_DWORD *)(a20 + 8);
      }
      v57 = (uint64_t *)(*(_QWORD *)a20 + 16 * v56);
      *v57 = v53;
      v57[1] = v55;
      ++*(_DWORD *)(a20 + 8);
    }
  }
  if (a13)
  {
    v59 = 16 * a13;
    v60 = *(_DWORD *)(a20 + 8);
    do
    {
      v61 = *a12;
      if (v60 >= *(_DWORD *)(a20 + 12))
      {
        v112 = *a12;
        llvm::SmallVectorBase<unsigned int>::grow_pod(a20, a20 + 16, v60 + 1, 16);
        v61 = v112;
        v60 = *(_DWORD *)(a20 + 8);
      }
      *(_OWORD *)(*(_QWORD *)a20 + 16 * v60) = v61;
      v60 = *(_DWORD *)(a20 + 8) + 1;
      *(_DWORD *)(a20 + 8) = v60;
      ++a12;
      v59 -= 16;
    }
    while (v59);
    if (a14 != 7
      && (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8))
      && (*(_DWORD *)(a2 + 92) == -1
       || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 320))(*(_QWORD *)(a1 + 8))))
    {
      LODWORD(v121) = 0;
      v62 = *(_QWORD *)(a21 + 24);
      if (!v62)
        goto LABEL_97;
      v63 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v62 + 48))(v62, &v121);
      v65 = v64;
      v66 = *(unsigned int *)(a20 + 8);
      if (v66 >= *(_DWORD *)(a20 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a20, a20 + 16, v66 + 1, 16);
        LODWORD(v66) = *(_DWORD *)(a20 + 8);
      }
      v67 = (uint64_t *)(*(_QWORD *)a20 + 16 * v66);
      *v67 = v63;
      v67[1] = v65;
      ++*(_DWORD *)(a20 + 8);
    }
  }
  v68 = v49;
  if (a16)
  {
    v70 = *(_DWORD *)(a20 + 8);
    v71 = 16 * a16;
    do
    {
      v72 = *a15;
      if (v70 >= *(_DWORD *)(a20 + 12))
      {
        v113 = *a15;
        llvm::SmallVectorBase<unsigned int>::grow_pod(a20, a20 + 16, v70 + 1, 16);
        v72 = v113;
        v70 = *(_DWORD *)(a20 + 8);
      }
      *(_OWORD *)(*(_QWORD *)a20 + 16 * v70) = v72;
      v70 = *(_DWORD *)(a20 + 8) + 1;
      *(_DWORD *)(a20 + 8) = v70;
      ++a15;
      v71 -= 16;
    }
    while (v71);
    if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 184))(*(_QWORD *)(a1 + 8)) && v49 == 0)
    {
      LODWORD(v121) = 0;
      v74 = *(_QWORD *)(a21 + 24);
      if (!v74)
        goto LABEL_97;
      v75 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v74 + 48))(v74, &v121);
      v77 = v76;
      v78 = *(unsigned int *)(a20 + 8);
      if (v78 >= *(_DWORD *)(a20 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a20, a20 + 16, v78 + 1, 16);
        LODWORD(v78) = *(_DWORD *)(a20 + 8);
      }
      v79 = (uint64_t *)(*(_QWORD *)a20 + 16 * v78);
      *v79 = v75;
      v79[1] = v77;
      ++*(_DWORD *)(a20 + 8);
    }
  }
  if (((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 16))(*(_QWORD *)(a1 + 8)) & 1) == 0)
  {
    if (v68)
    {
      v80 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 96))(a1, a3, a17, v68);
      v82 = v81;
      v83 = *(unsigned int *)(a20 + 8);
      if (v83 >= *(_DWORD *)(a20 + 12))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a20, a20 + 16, v83 + 1, 16);
        LODWORD(v83) = *(_DWORD *)(a20 + 8);
      }
      v84 = (uint64_t *)(*(_QWORD *)a20 + 16 * v83);
      *v84 = v80;
      v84[1] = v82;
      ++*(_DWORD *)(a20 + 8);
    }
    if (a10)
    {
      v85 = 8 * a10;
      do
      {
        LODWORD(v121) = *v27;
        v86 = *(_QWORD *)(a21 + 24);
        if (!v86)
          goto LABEL_97;
        v87 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v86 + 48))(v86, &v121);
        v89 = v88;
        v90 = *(unsigned int *)(a20 + 8);
        if (v90 >= *(unsigned int *)(a20 + 12))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod(a20, a20 + 16, v90 + 1, 16);
          v90 = *(unsigned int *)(a20 + 8);
        }
        v91 = (uint64_t *)(*(_QWORD *)a20 + 16 * v90);
        *v91 = v87;
        v91[1] = v89;
        ++*(_DWORD *)(a20 + 8);
        ++v27;
        v85 -= 8;
      }
      while (v85);
    }
  }
  if (*(_DWORD *)(a2 + 92) == -1
    || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 336))(*(_QWORD *)(a1 + 8)))
  {
    LODWORD(v121) = 0;
    v92 = *(_QWORD *)(a21 + 24);
    if (!v92)
      goto LABEL_97;
    v93 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)v92 + 48))(v92, &v121);
    v95 = v94;
    v96 = *(unsigned int *)(a20 + 8);
    if (v96 >= *(_DWORD *)(a20 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a20, a20 + 16, v96 + 1, 16);
      LODWORD(v96) = *(_DWORD *)(a20 + 8);
    }
    v97 = (uint64_t *)(*(_QWORD *)a20 + 16 * v96);
    *v97 = v93;
    v97[1] = v95;
    ++*(_DWORD *)(a20 + 8);
  }
  v121 = v123;
  v122 = 0x800000000;
  v98 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 24))(*(_QWORD *)(a1 + 8));
  if ((_DWORD)v98)
    v99.n128_f64[0] = llvm::GPUSDISel::AddDefaultPredicates(v98, (uint64_t)&v121);
  v100 = v121;
  if ((_DWORD)v122)
  {
    v101 = 16 * v122;
    v102 = (char *)v121 + 4;
    while (*v102)
    {
      if (*v102 == 1)
      {
        v120 = 0;
        v103 = *(_QWORD *)(a21 + 24);
        if (!v103)
          goto LABEL_97;
        v104 = (*(uint64_t (**)(uint64_t, int *, __n128))(*(_QWORD *)v103 + 48))(v103, &v120, v99);
        goto LABEL_89;
      }
LABEL_92:
      v102 += 4;
      v101 -= 16;
      if (!v101)
      {
        v100 = v121;
        goto LABEL_94;
      }
    }
    v104 = sub_1C5D428B0(*(_QWORD *)(a1 + 40), *(v102 - 1), (llvm *)5, 0);
LABEL_89:
    v106 = v104;
    v107 = v105;
    v108 = *(unsigned int *)(a20 + 8);
    if (v108 >= *(unsigned int *)(a20 + 12))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(a20, a20 + 16, v108 + 1, 16);
      v108 = *(unsigned int *)(a20 + 8);
    }
    v109 = (uint64_t *)(*(_QWORD *)a20 + 16 * v108);
    *v109 = v106;
    v109[1] = v107;
    ++*(_DWORD *)(a20 + 8);
    goto LABEL_92;
  }
LABEL_94:
  if (v100 != v123)
    free(v100);
}

_QWORD *llvm::GPUSDISel::GetInstr(uint64_t a1, uint64_t a2, uint64_t a3, unsigned int a4, __int128 *a5, uint64_t *a6, uint64_t *a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, unsigned __int8 a17, unsigned __int8 a18, char a19, unsigned int a20,unsigned int a21)
{
  unsigned __int8 *v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  uint64_t v30;
  int v31;
  uint64_t *v32;
  BOOL v33;
  unsigned int *v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  unsigned int v45;
  _QWORD *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t *v51;
  int v52;
  uint64_t v53;
  uint64_t *v54;
  char v55;
  uint64_t v56;
  char v57;
  uint64_t v58;
  unsigned __int8 *v59;
  _QWORD *v60;
  void (**v61)(void);
  void (**v62)(void);
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t *v67;
  uint64_t v68;
  uint64_t v69;
  int v70;
  uint8x8_t v71;
  int v72;
  _QWORD *v73;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t *v79;
  int v80;
  uint64_t v84;
  unsigned int v85;
  int8x8_t v86;
  uint64_t v87;
  unsigned __int8 *v88;
  int v89;
  uint64_t v90;
  char v91;
  _BYTE v92[15];
  char v93;
  _BYTE v94[7];
  char v95;
  _BYTE v96[15];
  char v97;
  _BYTE v98[7];
  __int128 v99;
  uint64_t v100;
  _DWORD v101[2];
  _DWORD v102[2];
  unsigned __int8 *v103;
  int v104;
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  unsigned __int8 *v108;
  int v109;
  _QWORD v110[3];
  _QWORD *v111;
  uint64_t v112;
  uint64_t *v113;
  _QWORD v114[2];
  _QWORD v115[2];
  void *v116;
  uint64_t v117;
  _BYTE v118[256];
  void *v119;
  uint64_t v120;
  _BYTE v121[256];
  void *v122;
  uint64_t v123;
  _BYTE v124[256];
  void *v125;
  uint64_t v126;
  _BYTE v127[256];
  void *v128;
  uint64_t v129;
  _QWORD v130[19];

  v130[16] = *MEMORY[0x1E0C80C00];
  v25 = *(unsigned __int8 **)(a3 + 64);
  v108 = v25;
  if (v25)
    llvm::MetadataTracking::track((uint64_t)&v108, v25, 2);
  v109 = *(_DWORD *)(a3 + 60);
  v26 = *(_DWORD *)(a2 + 24);
  if (v26 == -1)
  {
    v80 = 0;
    v29 = 0xFFFFFFFFLL;
  }
  else
  {
    v27 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 32) + 40 * v26) + 80);
    v28 = (uint64_t *)(v27 + 24);
    if (*(_DWORD *)(v27 + 32) >= 0x41u)
      v28 = (uint64_t *)*v28;
    v29 = *v28;
    v80 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 200))(a1, a2, a3);
  }
  v30 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)a1 + 16))(a1, a3, *(unsigned int *)(a2 + 32));
  v31 = *(unsigned __int16 *)(v30 + 24);
  v85 = a4;
  v86 = (int8x8_t)v29;
  if (v31 == 201)
  {
    v32 = *(uint64_t **)(v30 + 32);
    v30 = *v32;
    v31 = *(unsigned __int16 *)(*v32 + 24);
  }
  v87 = a3;
  v33 = v31 == 45 && *(_QWORD *)(v30 + 88) != 0;
  v128 = v130;
  v129 = 0x1000000000;
  v125 = v127;
  v126 = 0x1000000000;
  v84 = a2;
  (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD, uint64_t, _QWORD, _QWORD, char, void **, BOOL))(**(_QWORD **)(a1 + 8) + 288))(*(_QWORD *)(a1 + 8), a2, *(_QWORD *)(*(_QWORD *)(a1 + 40) + 40), a20, a21, v29, a17, a18, a19, &v128, v33);
  if ((_DWORD)v129)
  {
    v34 = (unsigned int *)v128;
    v35 = 8 * v129;
    do
    {
      v36 = sub_1C6366AB4(*(_QWORD *)(a1 + 40), *v34, (const llvm::APInt *)&v108, (llvm *)5, 0, 1, 0);
      v38 = v37;
      v39 = v126;
      if (v126 >= (unint64_t)HIDWORD(v126))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v125, (uint64_t)v127, v126 + 1, 16);
        v39 = v126;
      }
      v40 = (char *)v125 + 16 * v39;
      *v40 = v36;
      v40[1] = v38;
      LODWORD(v126) = v126 + 1;
      v34 += 2;
      v35 -= 8;
    }
    while (v35);
  }
  v106 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 96))(a1, a3, a9, a10);
  v107 = v41;
  v122 = v124;
  v123 = 0x1000000000;
  if (a12)
  {
    v43 = (_QWORD *)(*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 96))(a1, a3, a11, a12);
    if (a20 == 7)
    {
      v78 = v43[10];
      v79 = (uint64_t *)(v78 + 24);
      if (*(_DWORD *)(v78 + 32) >= 0x41u)
        v79 = (uint64_t *)*v79;
      v43 = sub_1C6366AB4(*(_QWORD *)(a1 + 40), *v79, (const llvm::APInt *)&v108, (llvm *)5, 0, 1, 0);
    }
    v44 = v42;
    v45 = v123;
    if (v123 >= HIDWORD(v123))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v122, (uint64_t)v124, v123 + 1, 16);
      v45 = v123;
    }
    v46 = (char *)v122 + 16 * v45;
    *v46 = v43;
    v46[1] = v44;
    LODWORD(v123) = v123 + 1;
  }
  v119 = v121;
  v120 = 0x1000000000;
  if (a14)
  {
    v47 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 96))(a1, a3, a13, a14);
    v49 = v48;
    v50 = v120;
    if (v120 >= HIDWORD(v120))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v119, (uint64_t)v121, v120 + 1, 16);
      v50 = v120;
    }
    v51 = (uint64_t *)((char *)v119 + 16 * v50);
    *v51 = v47;
    v51[1] = v49;
    LODWORD(v120) = v120 + 1;
  }
  v116 = v118;
  v117 = 0x1000000000;
  v103 = v108;
  if (v108)
    llvm::MetadataTracking::track((uint64_t)&v103, v108, 2);
  v52 = v109;
  v104 = v109;
  v105 = a1;
  LOBYTE(v53) = *((_BYTE *)a6 + 16);
  if ((_BYTE)v53)
  {
    v53 = *a6;
    v54 = a7;
    if (*a6)
    {
      v115[0] = *(uint64_t *)((char *)a6 + 1);
      *(_QWORD *)((char *)v115 + 7) = a6[1];
      v102[0] = *(_DWORD *)((char *)a6 + 17);
      *(_DWORD *)((char *)v102 + 3) = *((_DWORD *)a6 + 5);
      v55 = 1;
    }
    else
    {
      v55 = 0;
    }
  }
  else
  {
    v55 = 0;
    v54 = a7;
  }
  LOBYTE(v56) = *((_BYTE *)v54 + 16);
  if ((_BYTE)v56 && (v56 = *v54) != 0)
  {
    v114[0] = *(uint64_t *)((char *)v54 + 1);
    *(_QWORD *)((char *)v114 + 7) = v54[1];
    v101[0] = *(_DWORD *)((char *)v54 + 17);
    *(_DWORD *)((char *)v101 + 3) = *((_DWORD *)v54 + 5);
    v57 = 1;
  }
  else
  {
    v57 = 0;
  }
  v99 = *a5;
  v100 = *((_QWORD *)a5 + 2);
  v95 = v53;
  *(_QWORD *)v96 = v115[0];
  *(_QWORD *)&v96[7] = *(_QWORD *)((char *)v115 + 7);
  v97 = v55;
  *(_DWORD *)v98 = v102[0];
  *(_DWORD *)&v98[3] = *(_DWORD *)((char *)v102 + 3);
  v91 = v56;
  *(_QWORD *)&v92[7] = *(_QWORD *)((char *)v114 + 7);
  *(_QWORD *)v92 = v114[0];
  v93 = v57;
  *(_DWORD *)&v94[3] = *(_DWORD *)((char *)v101 + 3);
  *(_DWORD *)v94 = v101[0];
  v88 = v103;
  if (v103)
  {
    llvm::MetadataTracking::track((uint64_t)&v88, v103, 2);
    v52 = v104;
    v58 = v105;
    v59 = v88;
  }
  else
  {
    v59 = 0;
    v58 = a1;
  }
  v89 = v52;
  v90 = v58;
  v113 = 0;
  v60 = operator new(0x20uLL);
  *v60 = &off_1E816F6C0;
  v60[1] = v59;
  if (v59)
  {
    llvm::MetadataTracking::retrack((uint64_t)&v88, v59, (uint64_t)(v60 + 1));
    v88 = 0;
    v52 = v89;
    v58 = v90;
  }
  *((_DWORD *)v60 + 4) = v52;
  v60[3] = v58;
  v113 = v60;
  v110[0] = &off_1E816F708;
  v111 = v110;
  (*(void (**)(uint64_t, uint64_t, uint64_t, _QWORD, __int128 *, char *, char *))(*(_QWORD *)a1 + 288))(a1, v84, v87, v85, &v99, &v95, &v91);
  if (v111 == v110)
  {
    v61 = (void (**)(void))(v110[0] + 32);
  }
  else
  {
    if (!v111)
      goto LABEL_48;
    v61 = (void (**)(void))(*v111 + 40);
  }
  (*v61)();
LABEL_48:
  if (v113 == &v112)
  {
    v62 = (void (**)(void))(v112 + 32);
  }
  else
  {
    if (!v113)
      goto LABEL_53;
    v62 = (void (**)(void))(*v113 + 40);
  }
  (*v62)();
LABEL_53:
  if (v88)
    llvm::MetadataTracking::untrack((uint64_t)&v88, v88);
  if (*(_DWORD *)(v84 + 20) != -1)
  {
    v63 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a1 + 16))(a1, v87);
    v65 = v64;
    v66 = v117;
    if (v117 >= HIDWORD(v117))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v116, (uint64_t)v118, v117 + 1, 16);
      v66 = v117;
    }
    v67 = (uint64_t *)((char *)v116 + 16 * v66);
    *v67 = v63;
    v67[1] = v65;
    LODWORD(v117) = v117 + 1;
  }
  v68 = *(_QWORD *)(v87 + 40);
  v69 = *(unsigned __int16 *)(v87 + 58);
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 376))(*(_QWORD *)(a1 + 8)))
  {
    if (v86.i32[0] == -1)
    {
      v70 = -1;
    }
    else if (v86.i32[0] <= 7u)
    {
      if (v86.i32[0] <= 3u)
      {
        if (v86.i32[0] <= 1u)
          v70 = 1;
        else
          v70 = 2;
      }
      else
      {
        v70 = 3;
      }
    }
    else
    {
      v70 = 4;
    }
  }
  else
  {
    v71 = (uint8x8_t)vcnt_s8(v86);
    v71.i16[0] = vaddlv_u8(v71);
    v70 = v71.i32[0] + v80;
  }
  v72 = *(_DWORD *)(v84 + 12);
  if (v72 != -1 && v70 != v72)
  {
    v75 = 9;
    if (*(_BYTE *)(v84 + 8))
      v75 = 10;
    if (v70 == 1)
      v76 = v75;
    else
      v76 = 174;
    v68 = sub_1C636A8B4(*(_QWORD *)(a1 + 40), v76, 0, *(_QWORD *)(v68 + 16 * (v69 - 1)), *(_QWORD *)(v68 + 16 * (v69 - 1) + 8));
    v69 = v77;
  }
  v73 = sub_1C5D61678(*(_QWORD *)(a1 + 40), v85, (uint64_t)&v108, v68, v69, (uint64_t *)v116, v117);
  if (v103)
    llvm::MetadataTracking::untrack((uint64_t)&v103, v103);
  if (v116 != v118)
    free(v116);
  if (v119 != v121)
    free(v119);
  if (v122 != v124)
    free(v122);
  if (v125 != v127)
    free(v125);
  if (v128 != v130)
    free(v128);
  if (v108)
    llvm::MetadataTracking::untrack((uint64_t)&v108, v108);
  return v73;
}

_QWORD *llvm::GPUSDISel::GetRegSequenceForValues(uint64_t a1, uint64_t a2, unsigned int *a3, uint64_t a4)
{
  _QWORD *v5;
  unsigned __int8 *v10;
  uint64_t ExtendedSizeInBits;
  const char *v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  int v17;
  uint64_t v18;
  _QWORD *v19;
  unsigned int v20;
  _QWORD *v21;
  unsigned int v22;
  int v23;
  int v24;
  uint64_t v25;
  unsigned int *v26;
  uint64_t v27;
  uint64_t v28;
  _QWORD *v29;
  int v30;
  _BOOL4 v31;
  uint64_t v32;
  int v33;
  int v34;
  int v35;
  uint64_t v36;
  int v37;
  unsigned int v39;
  uint64_t v40;
  const char *v41;
  uint64_t v42;
  _QWORD *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  _QWORD *v47;
  uint64_t v48;
  __int128 v49;
  __int128 v50;
  __int128 v51;
  unsigned __int8 *v52;
  int v53;
  void *v54[2];
  _QWORD v55[18];

  v55[16] = *MEMORY[0x1E0C80C00];
  if (a4 == 1)
    return *(_QWORD **)a3;
  v10 = *(unsigned __int8 **)(a2 + 64);
  v52 = v10;
  if (v10)
    llvm::MetadataTracking::track((uint64_t)&v52, v10, 2);
  v53 = *(_DWORD *)(a2 + 60);
  *(_OWORD *)v54 = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 40) + 16 * a3[2]);
  if (LOBYTE(v54[0]))
    ExtendedSizeInBits = sub_1C47A8C74((unsigned __int8 *)v54);
  else
    ExtendedSizeInBits = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)v54);
  v13 = ExtendedSizeInBits;
  if ((_DWORD)v12 == 1)
  v14 = (*(uint64_t (**)(_QWORD, uint64_t, BOOL))(**(_QWORD **)(a1 + 8) + 248))(*(_QWORD *)(a1 + 8), a4, v13 == 16);
  v15 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 264))(*(_QWORD *)(a1 + 8));
  v16 = v15;
  if (v13 == 16)
    v17 = v15;
  else
    v17 = HIDWORD(v15);
  v54[0] = v55;
  v54[1] = (void *)0x800000000;
  v19 = sub_1C6366AB4(*(_QWORD *)(a1 + 40), v14, (const llvm::APInt *)&v52, (llvm *)5, 0, 1, 0);
  v20 = v54[1];
  if (LODWORD(v54[1]) >= HIDWORD(v54[1]))
  {
    v48 = v18;
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v54, (uint64_t)v55, LODWORD(v54[1]) + 1, 16);
    v18 = v48;
    v20 = v54[1];
  }
  v21 = (char *)v54[0] + 16 * v20;
  *v21 = v19;
  v21[1] = v18;
  v22 = ++LODWORD(v54[1]);
  v51 = *(_OWORD *)(*(_QWORD *)(*(_QWORD *)a3 + 40) + 16 * a3[2]);
  if ((_DWORD)a4)
  {
    v23 = 0;
    v24 = 0;
    v25 = a4;
    v26 = a3 + 2;
    do
    {
      v27 = *((_QWORD *)v26 - 1);
      v50 = *(_OWORD *)(*(_QWORD *)(v27 + 40) + 16 * *v26);
      v28 = *(_QWORD *)v26;
      if (v22 >= HIDWORD(v54[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v54, (uint64_t)v55, v22 + 1, 16);
        v22 = v54[1];
      }
      v29 = (char *)v54[0] + 16 * v22;
      *v29 = v27;
      v29[1] = v28;
      ++LODWORD(v54[1]);
      v30 = v50;
      if (v50 == 174)
      {
        v31 = 0;
      }
      else
      {
        if ((_BYTE)v51)
        {
          v32 = sub_1C47A8C74((unsigned __int8 *)&v51);
          v34 = v35;
          v30 = v50;
        }
        else
        {
          v32 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v51);
          v34 = v33;
        }
        if (v30)
          v36 = sub_1C47A8C74((unsigned __int8 *)&v50);
        else
          v36 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v50);
        v31 = v32 != v36 || v34 != v37;
      }
      v39 = v17 + v23;
      v24 |= v31;
      if ((v24 & 1) != 0)
      {
        v49 = *(_OWORD *)(*(_QWORD *)(*((_QWORD *)v26 - 1) + 40) + 16 * *v26);
        if ((_BYTE)v49)
          v40 = sub_1C47A8C74((unsigned __int8 *)&v49);
        else
          v40 = (uint64_t)llvm::EVT::getExtendedSizeInBits((llvm::EVT *)&v49);
        v42 = v40;
        if ((_DWORD)v41 == 1)
        if (v42 == 16)
          v39 = v16;
      }
      v43 = sub_1C6366AB4(*(_QWORD *)(a1 + 40), v39, (const llvm::APInt *)&v52, (llvm *)5, 0, 1, 0);
      v45 = v44;
      v46 = LODWORD(v54[1]);
      if (LODWORD(v54[1]) >= (unint64_t)HIDWORD(v54[1]))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v54, (uint64_t)v55, LODWORD(v54[1]) + 1, 16);
        v46 = LODWORD(v54[1]);
      }
      v47 = (char *)v54[0] + 16 * v46;
      *v47 = v43;
      v47[1] = v45;
      v22 = ++LODWORD(v54[1]);
      v51 = v50;
      ++v23;
      v26 += 4;
      v16 += 2;
      --v25;
    }
    while (v25);
  }
  v5 = sub_1C636E56C(*(_QWORD *)(a1 + 40), 18, (uint64_t)&v52, (llvm *)0xAE, 0, (uint64_t *)v54[0], v22);
  if (v54[0] != v55)
    free(v54[0]);
  if (v52)
    llvm::MetadataTracking::untrack((uint64_t)&v52, v52);
  return v5;
}

uint64_t llvm::GPUSDISel::GetIsSparse(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t v4;
  _QWORD *v5;

  v3 = *(_DWORD *)(a2 + 28);
  if (v3 == -1)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 32) + 40 * v3) + 80);
  v5 = (_QWORD *)(v4 + 24);
  if (*(_DWORD *)(v4 + 32) >= 0x41u)
    v5 = (_QWORD *)*v5;
  return *(_BYTE *)v5 & 1;
}

uint64_t llvm::GPUSDISel::GetIsQueryLOD(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unsigned int v3;
  uint64_t v4;
  unsigned __int8 *v5;

  v3 = *(_DWORD *)(a2 + 28);
  if (v3 == -1)
    return 0;
  v4 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 32) + 40 * v3) + 80);
  v5 = (unsigned __int8 *)(v4 + 24);
  if (*(_DWORD *)(v4 + 32) >= 0x41u)
    v5 = *(unsigned __int8 **)v5;
  return (*v5 >> 1) & 1;
}

void llvm::GPUSDISel::ReplaceInstructionUses(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  unsigned __int8 *v10;
  uint64_t v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  _QWORD *v16;
  int8x8_t v17;
  unsigned int v18;
  uint8x8_t v19;
  uint64_t v20;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  int v27;
  uint64_t v28;
  uint64_t v29;
  __n128 v30;
  unsigned int v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unsigned __int8 *v38;
  _QWORD *v39;
  int v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unsigned __int8 *v49;
  _QWORD *v50;
  int v51;
  uint64_t v52;
  unsigned __int8 **v53;
  uint64_t v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  int v58;
  int v59;
  unsigned __int8 **v60;
  uint64_t v61;
  uint64_t *v62;
  int v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned __int8 *v69;
  _QWORD *v70;
  int v71;
  _QWORD *v72;
  uint64_t v73;
  _BYTE *v74;
  uint64_t v75;
  _QWORD *v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  uint64_t *v80;
  int v81;
  BOOL v83;
  _QWORD *v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  _QWORD *v88;
  unsigned __int8 **v89;
  unint64_t v90;
  uint64_t v91;
  _QWORD *v92;
  uint64_t v93;
  uint64_t *v94;
  _QWORD *v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t *v99;
  uint64_t v100;
  uint64_t v101;
  unsigned __int8 *v102;
  int v103;
  uint64_t v104;
  uint64_t *v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t *v110;
  uint64_t v111;
  _QWORD *v112;
  uint64_t v113;
  uint64_t v114;
  int v115;
  unsigned __int8 *v116;
  BOOL v117;
  int v118;
  int v119;
  unsigned int v120;
  uint64_t v121;
  uint64_t v122;
  uint64_t v123;
  llvm *v125;
  int v126;
  unsigned __int8 *v127;
  int v128;
  unsigned __int8 *v129;
  int v130;
  unsigned __int8 *v131;
  uint64_t v132;
  _BYTE v133[144];
  uint64_t *v134;
  uint64_t v135;
  _QWORD v136[10];

  v136[8] = *MEMORY[0x1E0C80C00];
  v10 = *(unsigned __int8 **)(a3 + 64);
  v129 = v10;
  v123 = a3;
  if (v10)
  {
    llvm::MetadataTracking::track((uint64_t)&v129, v10, 2);
    a3 = v123;
  }
  v130 = *(_DWORD *)(a3 + 60);
  if (*(_DWORD *)(a2 + 12) == -1)
    goto LABEL_4;
  sub_1C5D6146C(*(_QWORD *)(a1 + 40), a3, 1, a4, 1);
  if ((*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 376))(*(_QWORD *)(a1 + 8)))
  {
    if ((_DWORD)a6 == -1)
    {
      v18 = -1;
    }
    else if (a6 <= 7)
    {
      if (a6 <= 3)
      {
        if (a6 <= 1)
          v18 = 1;
        else
          v18 = 2;
      }
      else
      {
        v18 = 3;
      }
    }
    else
    {
      v18 = 4;
    }
  }
  else
  {
    v17.i32[0] = a6;
    v19 = (uint8x8_t)vcnt_s8(v17);
    v19.i16[0] = vaddlv_u8(v19);
    v18 = v19.i32[0];
  }
  v20 = *(unsigned int *)(a2 + 12);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)a1 + 200))(a1, a2, v123))
  {
    a6 = (1 << *(_DWORD *)(a2 + 12)) | a6;
    ++v18;
    v20 = (v20 + 1);
  }
  if (v18 == (_DWORD)v20 || *(_BYTE *)(a2 + 62) != 0)
  {
    if (a5 != -1 && (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 216))(*(_QWORD *)(a1 + 8)))
    {
      v22 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 264))(*(_QWORD *)(a1 + 8));
      v23 = *(unsigned __int8 *)(a2 + 8);
      if (*(_DWORD *)(a2 + 12) != 1)
      {
        v131 = v133;
        v132 = 0x400000000;
        v111 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 256))(*(_QWORD *)(a1 + 8));
        v112 = sub_1C6366AB4(*(_QWORD *)(a1 + 40), *(unsigned __int16 *)(*(_QWORD *)v111 + 24), (const llvm::APInt *)&v129, (llvm *)5, 0, 1, 0);
        v114 = v113;
        v115 = v132;
        if (v132 >= HIDWORD(v132))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v131, (uint64_t)v133, v132 + 1, 16);
          v115 = v132;
        }
        v116 = &v131[16 * v115];
        *(_QWORD *)v116 = v112;
        *((_QWORD *)v116 + 1) = v114;
        LODWORD(v132) = v132 + 1;
        if (!v23)
          __asm { BR              X11 }
        __asm { BR              X11 }
      }
      if (*(_BYTE *)(a2 + 8))
        v24 = HIDWORD(v22);
      else
        v24 = v22;
      if (*(_BYTE *)(a2 + 8))
        v25 = 10;
      else
        v25 = 9;
      v12 = sub_1C636E638(*(_QWORD *)(a1 + 40), v24 + a5, (const llvm::APInt *)&v129, (llvm *)v25, 0, a4, 0);
      v15 = v26;
      v11 = *(_QWORD *)(a1 + 40);
      v13 = v123;
      v14 = v123;
      goto LABEL_5;
    }
    if (!*(_BYTE *)(a2 + 8)
      && *(_DWORD *)(a2 + 12) == 1
      && ((*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 64))(*(_QWORD *)(a1 + 8)) & 1) == 0)
    {
      v34 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 264))(*(_QWORD *)(a1 + 8));
      v35 = a1;
      v36 = *(_QWORD *)(a1 + 40);
      v37 = v123;
      v38 = *(unsigned __int8 **)(v123 + 64);
      v131 = v38;
      if (v38)
      {
        llvm::MetadataTracking::track((uint64_t)&v131, v38, 2);
        v37 = v123;
      }
      LODWORD(v132) = *(_DWORD *)(v37 + 60);
      v39 = sub_1C636E638(v36, v34, (const llvm::APInt *)&v131, (llvm *)9, 0, a4, 0);
      v41 = v40;
      if (v131)
        llvm::MetadataTracking::untrack((uint64_t)&v131, v131);
      v42 = v35;
      v43 = *(_QWORD *)(v35 + 40);
      v13 = v123;
      sub_1C5D6146C(v43, v123, 0, (uint64_t)v39, v41);
      v16 = *(_QWORD **)(v42 + 40);
      goto LABEL_6;
    }
LABEL_4:
    v11 = *(_QWORD *)(a1 + 40);
    v13 = v123;
    v12 = (_QWORD *)a4;
    v14 = v123;
    v15 = 0;
LABEL_5:
    sub_1C5D6146C(v11, v14, 0, (uint64_t)v12, v15);
    v16 = *(_QWORD **)(a1 + 40);
LABEL_6:
    sub_1C6365540(v16, v13);
    goto LABEL_7;
  }
  v27 = *(unsigned __int8 *)(a2 + 8);
  v134 = v136;
  v135 = 0x400000000;
  v28 = 9;
  if (v27)
    v28 = 10;
  v125 = (llvm *)v28;
  v29 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 264))(*(_QWORD *)(a1 + 8));
  if (v20 <= v18)
    v31 = v18;
  else
    v31 = v20;
  v32 = *(_QWORD *)(v123 + 48);
  if (v32)
  {
    v33 = v29;
    v44 = *(_QWORD *)(v123 + 48);
    do
    {
      if (*(__int16 *)(*(_QWORD *)(v44 + 16) + 24) != -9)
      {
        v75 = (*(uint64_t (**)(_QWORD, uint64_t, BOOL))(**(_QWORD **)(a1 + 8) + 256))(*(_QWORD *)(a1 + 8), v20, v27 == 0);
        v76 = sub_1C6366AB4(*(_QWORD *)(a1 + 40), *(unsigned __int16 *)(*(_QWORD *)v75 + 24), (const llvm::APInt *)&v129, (llvm *)5, 0, 1, 0);
        v78 = v77;
        v79 = v135;
        if (v135 >= HIDWORD(v135))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v134, (uint64_t)v136, v135 + 1, 16);
          v79 = v135;
        }
        v80 = &v134[2 * v79];
        *v80 = (uint64_t)v76;
        v80[1] = v78;
        LODWORD(v135) = v135 + 1;
        v122 = v31 << v27;
        v118 = 1;
        v81 = v33;
        if (v18 <= 1 && !v27)
          v118 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 64))(*(_QWORD *)(a1 + 8)) ^ 1;
        v83 = v20 < 2 && v27 == 0;
        v117 = v83;
        if ((_DWORD)v122)
        {
          v91 = 0;
          v126 = 0;
          LODWORD(v85) = 0;
          v84 = 0;
          v120 = v27 + 1;
          while (1)
          {
            if (((a6 >> (v91 / v120)) & 1) != 0)
            {
              if (v118)
              {
                v100 = *(_QWORD *)(a1 + 40);
                v101 = v123;
                v102 = *(unsigned __int8 **)(v123 + 64);
                v131 = v102;
                if (v102)
                {
                  llvm::MetadataTracking::track((uint64_t)&v131, v102, 2);
                  v101 = v123;
                }
                LODWORD(v132) = *(_DWORD *)(v101 + 60);
                v84 = sub_1C636E638(v100, v126 + v81, (const llvm::APInt *)&v131, (llvm *)4, 0, a4, 0);
                LODWORD(v85) = v103;
                if (v131)
                  llvm::MetadataTracking::untrack((uint64_t)&v131, v131);
                v85 = v85;
              }
              else
              {
                v85 = 0;
                v84 = (_QWORD *)a4;
              }
              if (v117)
                goto LABEL_109;
              v104 = v135;
              if (v135 >= (unint64_t)HIDWORD(v135))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v134, (uint64_t)v136, v135 + 1, 16);
                v104 = v135;
              }
              v105 = &v134[2 * v104];
              *v105 = (uint64_t)v84;
              v105[1] = v85;
              LODWORD(v135) = v135 + 1;
              v106 = sub_1C6366AB4(*(_QWORD *)(a1 + 40), (v81 + v91), (const llvm::APInt *)&v129, (llvm *)5, 0, 1, 0);
              v108 = v107;
              v109 = v135;
              if (v135 >= (unint64_t)HIDWORD(v135))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v134, (uint64_t)v136, v135 + 1, 16);
                v109 = v135;
              }
              v110 = &v134[2 * v109];
              *v110 = (uint64_t)v106;
              v110[1] = v108;
              LODWORD(v135) = v135 + 1;
              ++v126;
            }
            else
            {
              v92 = sub_1C636E2F0(*(_QWORD *)(a1 + 40), 10, (uint64_t)&v129, (llvm *)4, 0);
              v93 = v135;
              if (v135 >= (unint64_t)HIDWORD(v135))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v134, (uint64_t)v136, v135 + 1, 16);
                v93 = v135;
              }
              v94 = &v134[2 * v93];
              *v94 = (uint64_t)v92;
              v94[1] = 0;
              LODWORD(v135) = v135 + 1;
              v95 = sub_1C6366AB4(*(_QWORD *)(a1 + 40), (v81 + v91), (const llvm::APInt *)&v129, (llvm *)5, 0, 1, 0);
              v97 = v96;
              v98 = v135;
              if (v135 >= (unint64_t)HIDWORD(v135))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v134, (uint64_t)v136, v135 + 1, 16);
                v98 = v135;
              }
              v99 = &v134[2 * v98];
              *v99 = (uint64_t)v95;
              v99[1] = v97;
              LODWORD(v135) = v135 + 1;
            }
            if (v122 == ++v91)
              goto LABEL_109;
          }
        }
        v84 = 0;
        LODWORD(v85) = 0;
LABEL_109:
        if (v135 >= 2)
        {
          v84 = sub_1C636E56C(*(_QWORD *)(a1 + 40), 18, (uint64_t)&v129, (llvm *)0xAE, 0, v134, v135);
          LODWORD(v85) = 0;
        }
        sub_1C5D6146C(*(_QWORD *)(a1 + 40), v123, 0, (uint64_t)v84, v85);
        goto LABEL_112;
      }
      v44 = *(_QWORD *)(v44 + 32);
    }
    while (v44);
    v45 = v29;
    if (v27)
      v33 = HIDWORD(v29);
    if (v18 == 1)
    {
      do
      {
        v46 = *(_QWORD *)(v32 + 16);
        if (v27 || (*(unsigned int (**)(_QWORD))(**(_QWORD **)(a1 + 8) + 64))(*(_QWORD *)(a1 + 8)))
        {
          sub_1C5D6146C(*(_QWORD *)(a1 + 40), v46, 0, a4, 0);
        }
        else
        {
          v47 = *(_QWORD *)(a1 + 40);
          v48 = v123;
          v49 = *(unsigned __int8 **)(v123 + 64);
          v131 = v49;
          if (v49)
          {
            llvm::MetadataTracking::track((uint64_t)&v131, v49, 2);
            v48 = v123;
          }
          LODWORD(v132) = *(_DWORD *)(v48 + 60);
          v50 = sub_1C636E638(v47, v45, (const llvm::APInt *)&v131, (llvm *)9, 0, a4, 0);
          sub_1C5D6146C(v47, v46, 0, (uint64_t)v50, v51);
          if (v131)
            llvm::MetadataTracking::untrack((uint64_t)&v131, v131);
        }
        v32 = *(_QWORD *)(v32 + 32);
      }
      while (v32);
      goto LABEL_112;
    }
    goto LABEL_71;
  }
  if (v27)
    v33 = HIDWORD(v29);
  else
    v33 = v29;
  if (v18 != 1)
  {
LABEL_71:
    v52 = 0;
    v30.n128_u64[0] = 0x200000000;
    do
    {
      v53 = &(&v131)[v52];
      *v53 = &v133[v52 * 8];
      v53[1] = (unsigned __int8 *)0x200000000;
      v52 += 4;
    }
    while (v52 != 20);
    for (; v32; v32 = *(_QWORD *)(v32 + 32))
    {
      v86 = *(_QWORD *)(v32 + 16);
      v87 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v86 + 32) + 40) + 80);
      v88 = (_QWORD *)(v87 + 24);
      if (*(_DWORD *)(v87 + 32) >= 0x41u)
        v88 = (_QWORD *)*v88;
      v89 = &(&v131)[4 * (*(_DWORD *)v88 - v33)];
      v90 = *((unsigned int *)v89 + 2);
      if (v90 >= *((unsigned int *)v89 + 3))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v89, (uint64_t)(v89 + 2), v90 + 1, 8);
        v90 = *((unsigned int *)v89 + 2);
      }
      *(_QWORD *)&(*v89)[8 * v90] = v86;
      ++*((_DWORD *)v89 + 2);
    }
    v119 = v33;
    v54 = a1;
    if ((_DWORD)v20)
    {
      v55 = 0;
      v56 = 0;
      v121 = v20;
      do
      {
        v57 = a6;
        v58 = (1 << v55) & a6;
        v59 = (*(uint64_t (**)(_QWORD, __n128))(**(_QWORD **)(v54 + 8) + 376))(*(_QWORD *)(v54 + 8), v30);
        v60 = &(&v131)[4 * v55];
        v61 = *((unsigned int *)v60 + 2);
        if ((_DWORD)v61)
        {
          v62 = (uint64_t *)*v60;
          if (v59)
            v63 = v55;
          else
            v63 = v56;
          v64 = v63 + v119;
          v65 = 8 * v61;
          do
          {
            v66 = *v62;
            v67 = *(_QWORD *)(v54 + 40);
            if (v58)
            {
              v68 = v123;
              v69 = *(unsigned __int8 **)(v123 + 64);
              v127 = v69;
              if (v69)
              {
                llvm::MetadataTracking::track((uint64_t)&v127, v69, 2);
                v68 = v123;
              }
              v128 = *(_DWORD *)(v68 + 60);
              v70 = sub_1C636E638(v67, v64, (const llvm::APInt *)&v127, v125, 0, a4, 0);
              sub_1C5D6146C(v67, v66, 0, (uint64_t)v70, v71);
              if (v127)
                llvm::MetadataTracking::untrack((uint64_t)&v127, v127);
            }
            else
            {
              v72 = sub_1C636E2F0(*(_QWORD *)(v54 + 40), 10, (uint64_t)&v129, v125, 0);
              sub_1C5D6146C(v67, v66, 0, (uint64_t)v72, 0);
            }
            ++v62;
            v65 -= 8;
          }
          while (v65);
        }
        if (v58)
          ++v56;
        ++v55;
        a6 = v57;
      }
      while (v55 != v121);
    }
    v73 = 0;
    a1 = v54;
    do
    {
      v74 = *(_BYTE **)&v133[v73 + 112];
      if (&v133[v73 + 128] != v74)
        free(v74);
      v73 -= 32;
    }
    while (v73 != -160);
  }
LABEL_112:
  sub_1C6365540(*(_QWORD **)(a1 + 40), v123);
  if (v134 != v136)
    free(v134);
LABEL_7:
  if (v129)
    llvm::MetadataTracking::untrack((uint64_t)&v129, v129);
}

void llvm::GPUSDISel::ExpandIntrinsicSample(uint64_t a1, uint64_t a2, int a3, unsigned int *a4, int a5, uint64_t (*a6)(uint64_t *, unint64_t, uint64_t, uint64_t, uint64_t), void (*a7)(_OWORD *, uint64_t, uint64_t, void **, uint64_t (*)(_QWORD)), int a8, int a9)
{
  char *v16;
  char *v17;
  uint64_t v18;
  unsigned __int8 *v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  int v23;
  uint64_t v25;
  unsigned int v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  __int16 v32;
  uint64_t *v33;
  uint64_t v34;
  char *v35;
  int v36;
  uint64_t v37;
  uint64_t **v38;
  uint64_t v39;
  char *v40;
  int v41;
  int v42;
  uint64_t **v43;
  uint64_t v44;
  char *v45;
  int v46;
  uint64_t **v47;
  uint64_t *v48;
  unint64_t v49;
  uint64_t v50;
  char *v51;
  int v52;
  uint64_t v53;
  unsigned int v54;
  uint64_t v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  BOOL v59;
  unsigned __int8 **v60;
  unsigned __int8 **v61;
  unsigned int v62;
  unsigned __int8 ***v63;
  uint64_t v64;
  unsigned __int8 ***v65;
  _QWORD *v66;
  uint64_t v67;
  uint64_t v68;
  unint64_t *v69;
  unint64_t v70;
  uint64_t *v71;
  uint64_t v72;
  unint64_t v73;
  uint64_t v74;
  __int16 v75;
  uint64_t v76;
  int v77;
  unint64_t EVT;
  uint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  unint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  unsigned int v89;
  uint64_t v90;
  uint64_t v91;
  char *v92;
  int v93;
  llvm *v94;
  uint64_t v95;
  unsigned int v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  _QWORD *v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t *v112;
  BOOL v113;
  uint64_t v114;
  int v115;
  unint64_t v116;
  uint64_t v117;
  BOOL v118;
  unint64_t v119;
  uint64_t *v120;
  int v121;
  uint64_t v122;
  __int16 v123;
  int v124;
  uint64_t v125;
  uint64_t *v126;
  unsigned int v127;
  uint64_t v128;
  uint64_t v129;
  char *v130;
  int v131;
  _QWORD *v132;
  char *v133;
  int v134;
  char *v135;
  uint64_t v136;
  unint64_t v137;
  uint64_t v138;
  __int16 v139;
  uint64_t *v140;
  uint64_t v141;
  int v142;
  uint64_t v143;
  __int16 v144;
  uint64_t v145;
  int v146;
  int v147;
  _QWORD v148[2];
  _OWORD v149[6];
  uint64_t v150;
  unsigned __int8 *v151;
  int v152;
  __int128 v153;
  __int128 v154;
  __int128 v155;
  __int128 v156;
  __int128 v157;
  __int128 v158;
  __int128 v159;
  uint64_t v160;
  void *v161[2];
  _BYTE v162[136];
  void *v163;
  uint64_t v164;
  _QWORD v165[35];

  v165[32] = *MEMORY[0x1E0C80C00];
  llvm::SampleInfo::SampleInfo((uint64_t)&v154, a3, 0);
  v153 = *(_OWORD *)*(_QWORD *)(a1 + 40);
  if (v153 == 174)
    return;
  v16 = *(char **)(a1 + 32);
  v17 = &v16[40 * *(unsigned __int16 *)(a1 + 56)];
  v163 = v165;
  v164 = 0x1000000000;
  sub_1C6132D88((unsigned int *)&v163, v16, v17);
  v19 = *(unsigned __int8 **)(a1 + 64);
  v151 = v19;
  if (v19)
    llvm::MetadataTracking::track((uint64_t)&v151, v19, 2);
  v152 = *(_DWORD *)(a1 + 60);
  v20 = *(_QWORD *)(a1 + 32);
  if (DWORD2(v156) != -1
    || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v20 + 40 * v156) + 40)
                + 16 * *(unsigned int *)(v20 + 40 * v156 + 8)) != 4)
  {
    v21 = DWORD1(v156);
    if (DWORD1(v156) == -1
      || *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(v20 + 40 * DWORD1(v156)) + 40)
                  + 16 * *(unsigned int *)(v20 + 40 * DWORD1(v156) + 8)) != 4)
    {
      v22 = *(_QWORD *)(v20 + 40 * DWORD2(v156));
      v23 = *(unsigned __int16 *)(v22 + 24);
      if (v23 == 35 || v23 == 11)
      {
        v25 = *(_QWORD *)(v22 + 80);
        v26 = *(_DWORD *)(v25 + 32);
        v27 = v26 > 0x40 ? **(_QWORD **)(v25 + 24) : (uint64_t)(*(_QWORD *)(v25 + 24) << -(char)v26) >> -(char)v26;
        if (v27 < 0)
        {
          v82 = (uint64_t *)(v20 + 40 * v156);
          v83 = *v82;
          v84 = v82[1];
          if (*(_BYTE *)(*(_QWORD *)(*v82 + 40) + 16 * v84) == 5)
          {
            v85 = a2;
            v86 = *v82;
            v87 = v82[1];
          }
          else
          {
            v122 = *(_QWORD *)(a2 + 832);
            if (v122)
              v123 = *(_WORD *)(v122 + 8);
            else
              v123 = 0;
            v126 = sub_1C5D52060(a2, 216, (const llvm::APInt *)&v151, (llvm *)0x31, 0, v83, v84, v123);
            v128 = *(_QWORD *)(a6(v126, v84 & 0xFFFFFFFF00000000 | v127, a2, 2, 5) + 32);
            v86 = *(_QWORD *)(v128 + 40);
            v87 = *(_QWORD *)(v128 + 48);
            v85 = a2;
          }
          v129 = sub_1C6366544(v85, v86, v87, (uint64_t)&v151, 4, 0);
          v130 = (char *)v163 + 16 * v156;
          *(_QWORD *)v130 = v129;
          *((_DWORD *)v130 + 2) = v131;
          v132 = sub_1C6366AB4(a2, -1, (const llvm::APInt *)&v151, (llvm *)5, 0, 1, 0);
          v133 = (char *)v163 + 16 * DWORD2(v156);
          *(_QWORD *)v133 = v132;
          *((_DWORD *)v133 + 2) = v134;
          v21 = DWORD1(v156);
        }
      }
      if (v21 != -1)
      {
        v71 = (uint64_t *)(*(_QWORD *)(a1 + 32) + 40 * v21);
        v72 = *v71;
        v73 = v71[1];
        v74 = *(_QWORD *)(a2 + 832);
        if (v74)
          v75 = *(_WORD *)(v74 + 8);
        else
          v75 = 0;
        v88 = sub_1C5D52060(a2, 216, (const llvm::APInt *)&v151, (llvm *)0x31, 0, v72, v73, v75);
        v90 = a6(v88, v73 & 0xFFFFFFFF00000000 | v89, a2, 2, 5);
        v91 = sub_1C6366544(a2, *(_QWORD *)(*(_QWORD *)(v90 + 32) + 40), *(_QWORD *)(*(_QWORD *)(v90 + 32) + 48), (uint64_t)&v151, 4, 0);
        v92 = (char *)v163 + 16 * DWORD1(v156);
        *(_QWORD *)v92 = v91;
        *((_DWORD *)v92 + 2) = v93;
      }
      if (a5 > 1 || DWORD2(v157) == -1)
        goto LABEL_26;
      v28 = (uint64_t *)(*(_QWORD *)(a1 + 32) + 40 * DWORD2(v157));
      v29 = *v28;
      if (*(unsigned __int8 *)(*(_QWORD *)(*v28 + 40) + 16 * *((unsigned int *)v28 + 2)) != 174)
      {
        v30 = v28[1];
        v31 = *(_QWORD *)(a2 + 832);
        if (v31)
          v32 = *(_WORD *)(v31 + 8);
        else
          v32 = 0;
        v33 = sub_1C5D52060(a2, 216, (const llvm::APInt *)&v151, (llvm *)0x31, 0, v29, v30, v32);
        v34 = ((uint64_t (*)(uint64_t *))a6)(v33);
        v35 = (char *)v163 + 16 * DWORD2(v157);
        *(_QWORD *)v35 = v34;
        *((_DWORD *)v35 + 2) = v36;
LABEL_26:
        if (BYTE13(v157) && a5 >= 2 && a7)
        {
          v149[4] = v158;
          v149[5] = v159;
          v150 = v160;
          v149[0] = v154;
          v149[1] = v155;
          v149[2] = v156;
          v149[3] = v157;
          a7(v149, a1, a2, &v163, (uint64_t (*)(_QWORD))a6);
        }
        else
        {
          v37 = DWORD1(v154) + BYTE13(v157);
          if (DWORD1(v154) != 1)
          {
            v38 = (uint64_t **)(*(_QWORD *)(a1 + 32) + 40 * HIDWORD(v156));
            v39 = a6(*v38, (unint64_t)v38[1], a2, v37, byte_1C86554C8[2 * BYTE1(v154) + BYTE2(v154)]);
            v40 = (char *)v163 + 16 * HIDWORD(v156);
            *(_QWORD *)v40 = v39;
            *((_DWORD *)v40 + 2) = v41;
          }
          if ((_DWORD)v37 && DWORD2(v158) != -1)
          {
            v42 = 0;
            do
            {
              v43 = (uint64_t **)(*(_QWORD *)(a1 + 32) + 40 * (v42 + DWORD2(v158)));
              v44 = a6(*v43, (unint64_t)v43[1], a2, 2, 10);
              v45 = (char *)v163 + 16 * (v42 + DWORD2(v158));
              *(_QWORD *)v45 = v44;
              *((_DWORD *)v45 + 2) = v46;
              ++v42;
            }
            while ((_DWORD)v37 != v42);
          }
        }
        if (HIDWORD(v159) != -1)
        {
          v47 = (uint64_t **)(*(_QWORD *)(a1 + 32) + 40 * HIDWORD(v159));
          v48 = *v47;
          v49 = (unint64_t)v47[1];
          LODWORD(v47) = *(unsigned __int8 *)((*v47)[5] + 16 * v49);
          LOBYTE(v161[0]) = (_BYTE)v47;
          if (((_DWORD)v47 - 15) <= 0x9B)
          {
            LOBYTE(v161[0]) = sub_1C47F37A0((unsigned __int8 *)v161);
            v50 = a6(v48, v49, a2, v155, LOBYTE(v161[0]));
            v51 = (char *)v163 + 16 * HIDWORD(v159);
            *(_QWORD *)v51 = v50;
            *((_DWORD *)v51 + 2) = v52;
          }
        }
        if (HIDWORD(v155) == -1)
        {
          v56 = 0;
        }
        else
        {
          v53 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 40 * HIDWORD(v155)) + 80);
          v54 = *(_DWORD *)(v53 + 32);
          if (v54 > 0x40)
            v55 = **(_QWORD **)(v53 + 24);
          else
            v55 = (uint64_t)(*(_QWORD *)(v53 + 24) << -(char)v54) >> -(char)v54;
          v56 = v55 & 1;
        }
        v57 = *(_QWORD *)(a1 + 40);
        if (HIDWORD(v154) == -1)
        {
          v58 = *(unsigned __int16 *)(a1 + 58);
        }
        else
        {
          v57 = sub_1C636A8B4(a2, 174, 0, *(_QWORD *)(v57 + 32), *(_QWORD *)(v57 + 40));
          v58 = v76;
        }
        v60 = sub_1C5D5C710(a2, 47, (uint64_t)&v151, v57, v58, (uint64_t *)v163, v164, v18, *(_QWORD *)(a1 + 80), *(_QWORD *)(a1 + 88), *(_QWORD *)(a1 + 96));
        if (HIDWORD(v154) == -1)
        {
          v64 = a4[2];
          if (v64 >= a4[3])
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a4, (uint64_t)(a4 + 4), v64 + 1, 16);
            LODWORD(v64) = a4[2];
          }
          v65 = (unsigned __int8 ***)(*(_QWORD *)a4 + 16 * v64);
          *v65 = v60;
          v65[1] = 0;
          ++a4[2];
        }
        else
        {
          if ((_DWORD)v58)
          {
            v61 = 0;
            v62 = a4[2];
            do
            {
              if (v62 >= a4[3])
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a4, (uint64_t)(a4 + 4), v62 + 1, 16);
                v62 = a4[2];
              }
              v63 = (unsigned __int8 ***)(*(_QWORD *)a4 + 16 * v62);
              *v63 = v60;
              v63[1] = v61;
              v62 = a4[2] + 1;
              a4[2] = v62;
              v61 = (unsigned __int8 **)((char *)v61 + 1);
            }
            while ((unsigned __int8 **)v58 != v61);
          }
          else
          {
            v62 = a4[2];
          }
          if (v62 >= a4[3])
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a4, (uint64_t)(a4 + 4), v62 + 1, 16);
            v62 = a4[2];
          }
          v66 = (_QWORD *)(*(_QWORD *)a4 + 16 * v62);
          *v66 = 0;
          v66[1] = 0;
          LODWORD(v66) = a4[2] + 1;
          a4[2] = v66;
          v67 = *(_QWORD *)a4 + 16 * v66;
          *(_OWORD *)v161 = *(_OWORD *)(v67 - 32);
          *(_QWORD *)(v67 - 32) = *(_QWORD *)(v67 - 16);
          *(_DWORD *)(v67 - 24) = *(_DWORD *)(v67 - 8);
          *(void **)(v67 - 16) = v161[0];
          *(_DWORD *)(v67 - 8) = v161[1];
        }
        if (DWORD2(v155) == -1)
        {
          v70 = 0xFFFFFFFFLL;
        }
        else
        {
          v68 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 32) + 40 * DWORD2(v155)) + 80);
          v69 = (unint64_t *)(v68 + 24);
          if (*(_DWORD *)(v68 + 32) >= 0x41u)
            v69 = (unint64_t *)*v69;
          v70 = *v69;
        }
        if (HIDWORD(v154) != -1)
        {
          v161[0] = v162;
          v161[1] = (void *)0x800000000;
          if (BYTE8(v154))
            v77 = a9;
          else
            v77 = a8;
          v147 = v77;
          v146 = v56;
          if ((_BYTE)v153)
          {
            LOBYTE(EVT) = sub_1C47F37A0((unsigned __int8 *)&v153);
            v81 = 0;
            v80 = 0;
          }
          else
          {
            EVT = llvm::EVT::getEVT(*(llvm::EVT **)(*((_QWORD *)&v153 + 1) + 24), 0, v59);
            v80 = v79;
            v81 = EVT & 0xFFFFFFFFFFFFFF00;
          }
          v94 = (llvm *)(v81 | EVT);
          v95 = HIDWORD(v154);
          if (HIDWORD(v154))
          {
            v97 = 0;
            do
            {
              if (((v70 >> v97) & 1) != 0)
                v98 = sub_1C636E638(a2, v147 + (int)v97, (const llvm::APInt *)&v151, v94, v80, (uint64_t)v60, 0);
              else
                v98 = sub_1C5D51E4C(a2, 51, (uint64_t)&v151, v94, v80);
              v100 = v98;
              v101 = v99;
              v102 = LODWORD(v161[1]);
              if (LODWORD(v161[1]) >= (unint64_t)HIDWORD(v161[1]))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v161, (uint64_t)v162, LODWORD(v161[1]) + 1, 16);
                v102 = LODWORD(v161[1]);
              }
              v103 = (char *)v161[0] + 16 * v102;
              *v103 = v100;
              v103[1] = v101;
              ++LODWORD(v161[1]);
              ++v97;
            }
            while (v95 != v97);
            v96 = HIDWORD(v154);
          }
          else
          {
            v96 = 0;
          }
          if ((v146 & 1) != 0)
          {
            v104 = sub_1C636E638(a2, v96 + v147, (const llvm::APInt *)&v151, v94, v80, (uint64_t)v60, 0);
            v106 = v105;
            v107 = v161[1];
            if (LODWORD(v161[1]) >= HIDWORD(v161[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v161, (uint64_t)v162, LODWORD(v161[1]) + 1, 16);
              v107 = v161[1];
            }
            v108 = (char *)v161[0] + 16 * v107;
            *v108 = v104;
            v108[1] = v106;
            ++LODWORD(v161[1]);
            v96 = HIDWORD(v154);
          }
          v109 = v96;
          v110 = *(_QWORD *)(a2 + 832);
          if (v110)
            v111 = *(unsigned __int16 *)(v110 + 8);
          else
            v111 = 0;
          v112 = sub_1C636D0C8(a2, (const char *)0x92, (const llvm::APInt *)&v151, (llvm *)v153, *((uint64_t *)&v153 + 1), (uint64_t *)v161[0], v109, v111);
          v114 = *(_QWORD *)a4;
          *(_QWORD *)v114 = v112;
          *(_DWORD *)(v114 + 8) = v115;
          if (v146)
          {
            if ((_BYTE)v153)
            {
              LOBYTE(v116) = sub_1C47F37A0((unsigned __int8 *)&v153);
              v119 = 0;
              v117 = 0;
            }
            else
            {
              v116 = llvm::EVT::getEVT(*(llvm::EVT **)(*((_QWORD *)&v153 + 1) + 24), 0, v113);
              v119 = v116 & 0xFFFFFFFFFFFFFF00;
            }
            v148[0] = v119 | v116;
            v148[1] = v117;
            v124 = sub_1C6131328((unsigned __int8 *)v148, v117, v118);
            v125 = 0;
            if (v124 > 31)
            {
              switch(v124)
              {
                case 32:
                  v125 = 5;
                  break;
                case 64:
                  v125 = 6;
                  break;
                case 128:
                  v125 = 7;
                  break;
              }
            }
            else
            {
              switch(v124)
              {
                case 1:
                  v125 = 2;
                  break;
                case 8:
                  v125 = 3;
                  break;
                case 16:
                  v125 = 4;
                  break;
              }
            }
            v135 = (char *)v161[0] + 16 * LODWORD(v161[1]);
            v136 = *((_QWORD *)v135 - 2);
            v137 = *((_QWORD *)v135 - 1);
            v138 = *(_QWORD *)(a2 + 832);
            if (v138)
              v139 = *(_WORD *)(v138 + 8);
            else
              v139 = 0;
            v140 = sub_1C5D52060(a2, 216, (const llvm::APInt *)&v151, (llvm *)v125, 0, v136, v137, v139);
            v141 = *(_QWORD *)a4;
            *(_QWORD *)(v141 + 16) = v140;
            *(_DWORD *)(v141 + 24) = v142;
            v143 = *(_QWORD *)(a2 + 832);
            if (v143)
              v144 = *(_WORD *)(v143 + 8);
            else
              v144 = 0;
            v120 = sub_1C5D52060(a2, 201, (const llvm::APInt *)&v151, (llvm *)3, 0, *(_QWORD *)(*(_QWORD *)a4 + 16), *(_QWORD *)(*(_QWORD *)a4 + 24), v144);
          }
          else
          {
            v120 = sub_1C6366AB4(a2, 0, (const llvm::APInt *)&v151, (llvm *)3, 0, 0, 0);
          }
          v145 = *(_QWORD *)a4;
          *(_QWORD *)(v145 + 16) = v120;
          *(_DWORD *)(v145 + 24) = v121;
          if (v161[0] != v162)
            free(v161[0]);
        }
      }
    }
  }
  if (v151)
    llvm::MetadataTracking::untrack((uint64_t)&v151, v151);
  if (v163 != v165)
    free(v163);
}

uint64_t sub_1C556EFBC(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, int *a5, uint64_t a6)
{
  _QWORD **v10;
  BOOL v11;
  unsigned int v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t i;
  int v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  unsigned int v23;
  unsigned int v24;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unsigned __int8 v30;
  int v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  int v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t *v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t *v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t *v52;
  char v53;
  _QWORD v54[66];

  v10 = (_QWORD **)result;
  v54[65] = *MEMORY[0x1E0C80C00];
  if (*(_DWORD *)(a2 + 72) != -1)
  {
    if (*(_BYTE *)(a2 + 61))
      v11 = 0;
    else
      v11 = *(_BYTE *)(a2 + 60) == 0;
    if (v11 && *(_DWORD *)(a2 + 48) == -1)
    {
      v13 = *(_DWORD *)(a2 + 4);
      if (!v13)
      {
LABEL_22:
        v22 = 8;
LABEL_23:
        *a5 = v22;
        return result;
      }
    }
    else
    {
      result = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(result + 8) + 224))(*(_QWORD *)(result + 8), a2);
      v13 = result >> 1;
      if (!(result >> 1))
        goto LABEL_22;
    }
    v19 = 0;
    do
    {
      v20 = ((uint64_t (*)(_QWORD **, uint64_t, _QWORD))(*v10)[2])(v10, a4, (v19 + *(_DWORD *)(a2 + 72)));
      result = ((uint64_t (*)(_QWORD **, uint64_t, uint64_t, uint64_t, uint64_t))(*v10)[10])(v10, v20, v21, a6, 0xFFFFFFFFLL);
      ++v19;
    }
    while (v13 != v19);
    goto LABEL_22;
  }
  result = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(result + 8) + 168))(*(_QWORD *)(result + 8));
  if (*(_DWORD *)(a2 + 56) == -1)
    v14 = 0;
  else
    v14 = result;
  if (v14 == 1)
  {
    v16 = ((uint64_t (*)(_QWORD **, uint64_t))(*v10)[2])(v10, a4);
    v54[0] = 1;
    for (i = 1; i != 65; ++i)
      LODWORD(v54[i]) = 0x7FFFFFFF;
    result = ((uint64_t (*)(_QWORD **, uint64_t, uint64_t, _QWORD *, _QWORD))(*v10)[27])(v10, v16, v15, v54, 0);
    v18 = result;
    if ((v54[0] & 1) == 0)
      result = MEMORY[0x1CAA32FB4](v54[1], 4);
  }
  else
  {
    v18 = 1;
  }
  v23 = *(_DWORD *)(a2 + 76);
  v24 = *(_DWORD *)(a2 + 68);
  if (v23 != -1 || v24 != -1)
  {
LABEL_29:
    if (v24 == -1)
      v26 = v23;
    else
      v26 = v24;
    v27 = ((uint64_t (*)(_QWORD **, uint64_t, uint64_t))(*v10)[2])(v10, a4, v26);
    v29 = v28;
    if (*(_DWORD *)(a2 + 92) != -1 && (*(unsigned int (**)(_QWORD *))(*v10[1] + 328))(v10[1]))
    {
      LODWORD(v54[0]) = -1;
      v30 = ((uint64_t (*)(_QWORD **, uint64_t, uint64_t, _QWORD *, _QWORD))(*v10)[18])(v10, v27, v29, v54, 0);
      if ((v30 & (LODWORD(v54[0]) < 0xFF)) != 0)
        v31 = 7;
      else
        v31 = 6;
      *a5 = v31;
      result = ((uint64_t (*)(_QWORD **, uint64_t, uint64_t))(*v10)[21])(v10, v27, v29);
      goto LABEL_83;
    }
    if ((((uint64_t (*)(_QWORD **, uint64_t, uint64_t))(*v10)[30])(v10, v27, v29) & 1) != 0
      || ((unsigned int (*)(_QWORD **, uint64_t, uint64_t))(*v10)[28])(v10, v27, v29))
    {
      if ((*(unsigned int (**)(_QWORD *))(*v10[1] + 176))(v10[1]))
        goto LABEL_49;
    }
    else if ((((uint64_t (*)(_QWORD **, uint64_t, uint64_t))(*v10)[31])(v10, v27, v29) & 1) == 0
           && !((unsigned int (*)(_QWORD **, uint64_t, uint64_t))(*v10)[29])(v10, v27, v29)
           || (*(unsigned int (**)(_QWORD *))(*v10[1] + 176))(v10[1]) != 2)
    {
LABEL_49:
      llvm::report_fatal_error((llvm *)"Invalid sample LOD operand for architecture", (const char *)1);
    }
    LODWORD(v54[0]) = -1;
    v53 = 0;
    result = ((uint64_t (*)(_QWORD **, uint64_t, uint64_t, _QWORD *, char *))(*v10)[18])(v10, v27, v29, v54, &v53);
    v36 = result ^ 1;
    if (LODWORD(v54[0]))
      v36 = 1;
    v37 = v14 | v36;
    if (v24 == -1)
      v38 = v37;
    else
      v38 = 1;
    if ((v38 & v18) != 1)
      goto LABEL_74;
    if ((_DWORD)result)
    {
      result = sub_1C47AB6D8((uint64_t)v10, LODWORD(v54[0]));
    }
    else
    {
      result = ((uint64_t (*)(_QWORD **, uint64_t, uint64_t))(*v10)[22])(v10, v27, v29);
      if ((_DWORD)result == -1)
      {
LABEL_74:
        if (v38)
        {
          result = ((uint64_t (*)(_QWORD **, uint64_t, _QWORD))(*v10)[21])(v10, v27, v29);
          v44 = result;
          v46 = v45;
          v47 = *(unsigned int *)(a6 + 8);
          if (v47 >= *(_DWORD *)(a6 + 12))
          {
            result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a6, a6 + 16, v47 + 1, 16);
            LODWORD(v47) = *(_DWORD *)(a6 + 8);
          }
          v48 = (uint64_t *)(*(_QWORD *)a6 + 16 * v47);
          *v48 = v44;
          v48[1] = v46;
          ++*(_DWORD *)(a6 + 8);
          if (v24 == -1)
            v22 = 5;
          else
            v22 = 6;
          goto LABEL_23;
        }
        goto LABEL_79;
      }
      result = (*(uint64_t (**)(_QWORD *, uint64_t))(*v10[1] + 56))(v10[1], result);
    }
    if ((_DWORD)result != -1)
    {
      result = ((uint64_t (*)(_QWORD **, uint64_t))(*v10)[20])(v10, result);
      v39 = result;
      v41 = v40;
      v42 = *(unsigned int *)(a6 + 8);
      if (v42 >= *(_DWORD *)(a6 + 12))
      {
        result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a6, a6 + 16, v42 + 1, 16);
        LODWORD(v42) = *(_DWORD *)(a6 + 8);
      }
      v43 = (uint64_t *)(*(_QWORD *)a6 + 16 * v42);
      *v43 = v39;
      v43[1] = v41;
      ++*(_DWORD *)(a6 + 8);
      if (v24 == -1)
        v22 = 1;
      else
        v22 = 2;
      goto LABEL_23;
    }
    goto LABEL_74;
  }
  if (*(_BYTE *)(a2 + 62))
  {
    result = (*(uint64_t (**)(_QWORD *))(*v10[1] + 384))(v10[1]);
    if (((v14 | result ^ 1) & 1) == 0)
    {
      v33 = sub_1C47AB6D8((uint64_t)v10, 0);
      v34 = 2;
LABEL_51:
      *a5 = v34;
      result = ((uint64_t (*)(_QWORD **, uint64_t))(*v10)[20])(v10, v33);
      goto LABEL_83;
    }
  }
  if ((v14 & 1) == 0)
  {
    if (*(_DWORD *)(a2 + 92) == -1
      || (result = (*(uint64_t (**)(_QWORD *))(*v10[1] + 328))(v10[1]), (result & 1) == 0))
    {
LABEL_79:
      *a5 = 0;
      return result;
    }
  }
  if (*(_DWORD *)(a2 + 92) == -1 || !(*(unsigned int (**)(_QWORD *))(*v10[1] + 328))(v10[1]))
  {
    if (!v14)
    {
      v24 = *(_DWORD *)(a2 + 68);
      v23 = *(_DWORD *)(a2 + 76);
      goto LABEL_29;
    }
    if (!v18 || (v35 = sub_1C47AB6D8((uint64_t)v10, 0), (_DWORD)v35 == -1))
    {
      *a5 = 5;
      result = ((uint64_t (*)(_QWORD **, _QWORD))(*v10)[8])(v10, 0);
      goto LABEL_83;
    }
    v33 = v35;
    v34 = 1;
    goto LABEL_51;
  }
  *a5 = 7;
  result = ((uint64_t (*)(_QWORD **, _QWORD))(*v10)[9])(v10, 0);
LABEL_83:
  v49 = result;
  v50 = v32;
  v51 = *(unsigned int *)(a6 + 8);
  if (v51 >= *(_DWORD *)(a6 + 12))
  {
    result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a6, a6 + 16, v51 + 1, 16);
    LODWORD(v51) = *(_DWORD *)(a6 + 8);
  }
  v52 = (uint64_t *)(*(_QWORD *)a6 + 16 * v51);
  *v52 = v49;
  v52[1] = v50;
  ++*(_DWORD *)(a6 + 8);
  return result;
}

void *sub_1C556F5CC(_QWORD **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  int v8;
  void *result;
  int v10;
  uint64_t v11;
  uint64_t (*v13)(_QWORD **, uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  uint64_t v25;
  int v26;
  uint64_t v27;
  void *v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  uint64_t v32;
  int v33;
  uint64_t v34;
  int v35;
  uint64_t v36;

  v36 = *MEMORY[0x1E0C80C00];
  v8 = *(_DWORD *)(a2 + 64);
  result = (void *)(*(uint64_t (**)(_QWORD *))(*a1[1] + 192))(a1[1]);
  if (v8 == -1)
    v10 = 1;
  else
    v10 = (int)result;
  v11 = *(unsigned int *)(a2 + 80);
  if (v10 != 1 || (_DWORD)v11 != -1)
  {
    v13 = (uint64_t (*)(_QWORD **, uint64_t, uint64_t))(*a1)[2];
    if ((_DWORD)v11 == -1 || *(_DWORD *)(a2 + 64) == -1)
    {
      if ((_DWORD)v11 == -1)
        v11 = *(unsigned int *)(a2 + 64);
      v15 = v13(a1, a3, v11);
      result = (void *)((uint64_t (*)(_QWORD **, uint64_t, uint64_t))(*a1)[21])(a1, v15, v16);
    }
    else
    {
      v17 = ((uint64_t (*)(_QWORD **, uint64_t))v13)(a1, a3);
      v19 = v18;
      v20 = ((uint64_t (*)(_QWORD **, uint64_t, _QWORD))(*a1)[2])(a1, a3, *(unsigned int *)(a2 + 64));
      v22 = ((uint64_t (*)(_QWORD **, uint64_t, uint64_t))(*a1)[21])(a1, v20, v21);
      v24 = v23;
      v25 = ((uint64_t (*)(_QWORD **, uint64_t, uint64_t))(*a1)[21])(a1, v17, v19);
      v32 = v22;
      v33 = v24;
      v34 = v25;
      v35 = v26;
      result = (void *)((uint64_t (*)(_QWORD **, uint64_t, uint64_t *, uint64_t))(*a1)[12])(a1, a3, &v32, 2);
    }
    v28 = result;
    v29 = v27;
    v30 = *(unsigned int *)(a4 + 8);
    if (v30 >= *(_DWORD *)(a4 + 12))
    {
      result = llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v30 + 1, 16);
      LODWORD(v30) = *(_DWORD *)(a4 + 8);
    }
    v31 = (_QWORD *)(*(_QWORD *)a4 + 16 * v30);
    *v31 = v28;
    v31[1] = v29;
    ++*(_DWORD *)(a4 + 8);
  }
  return result;
}

uint64_t sub_1C556F79C(_QWORD **a1, _DWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t result;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t *v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t v39;
  __int128 *v40;
  unsigned int v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  uint64_t v45;
  __int128 *v46;
  unsigned int v47;
  uint64_t v48;
  __int128 v49;
  uint64_t v50;
  unsigned int v51;
  uint64_t v52;
  int v53;
  uint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  int v60;
  uint64_t v61;
  uint64_t v62;
  unsigned int v63;
  BOOL v64;
  unsigned int v65;
  unsigned int v66;
  uint64_t v67;
  BOOL v68;
  int v69;
  int v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t *v75;
  uint64_t v76;
  __int128 *v77;
  unsigned int v78;
  uint64_t v79;
  __int128 v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  __int128 v85;
  __int128 v86;
  uint64_t v87;
  __int128 v88;
  uint64_t v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  int v93;
  uint64_t v94;

  v94 = *MEMORY[0x1E0C80C00];
  result = (*(uint64_t (**)(_QWORD *))(*a1[1] + 240))(a1[1]);
  if ((_DWORD)result)
  {
    if (a2[12] != -1)
    {
      v18 = ((uint64_t (*)(_QWORD **, uint64_t))(*a1)[2])(a1, a3);
      result = ((uint64_t (*)(_QWORD **, uint64_t, uint64_t))(*a1)[21])(a1, v18, v19);
      v20 = result;
      v22 = v21;
      v23 = *(unsigned int *)(a4 + 8);
      if (v23 >= *(_DWORD *)(a4 + 12))
      {
        result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v23 + 1, 16);
        LODWORD(v23) = *(_DWORD *)(a4 + 8);
      }
      v24 = (uint64_t *)(*(_QWORD *)a4 + 16 * v23);
      *v24 = v20;
      v24[1] = v22;
      ++*(_DWORD *)(a4 + 8);
    }
    if (a2[14] != -1)
    {
      v25 = ((uint64_t (*)(_QWORD **, uint64_t))(*a1)[2])(a1, a3);
      result = ((uint64_t (*)(_QWORD **, uint64_t, uint64_t))(*a1)[21])(a1, v25, v26);
      v27 = result;
      v29 = v28;
      v30 = *(unsigned int *)(a4 + 8);
      if (v30 >= *(_DWORD *)(a4 + 12))
      {
        result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v30 + 1, 16);
        LODWORD(v30) = *(_DWORD *)(a4 + 8);
      }
      v31 = (uint64_t *)(*(_QWORD *)a4 + 16 * v30);
      *v31 = v27;
      v31[1] = v29;
      ++*(_DWORD *)(a4 + 8);
    }
    if (a2[13] != -1)
    {
      v32 = ((uint64_t (*)(_QWORD **, uint64_t))(*a1)[2])(a1, a3);
      result = ((uint64_t (*)(_QWORD **, uint64_t, uint64_t))(*a1)[21])(a1, v32, v33);
      v34 = result;
      v36 = v35;
      v37 = *(unsigned int *)(a4 + 8);
      if (v37 >= *(_DWORD *)(a4 + 12))
      {
        result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v37 + 1, 16);
        LODWORD(v37) = *(_DWORD *)(a4 + 8);
      }
      v38 = (uint64_t *)(*(_QWORD *)a4 + 16 * v37);
      *v38 = v34;
      v38[1] = v36;
      ++*(_DWORD *)(a4 + 8);
    }
    return result;
  }
  if (a6 <= 8 && ((1 << a6) & 0x160) != 0)
  {
    v39 = *(unsigned int *)(a5 + 8);
    if ((_DWORD)v39)
    {
      v40 = *(__int128 **)a5;
      v41 = *(_DWORD *)(a4 + 8);
      v42 = 16 * v39;
      do
      {
        v43 = *v40;
        if (v41 >= *(_DWORD *)(a4 + 12))
        {
          v85 = *v40;
          result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v41 + 1, 16);
          v43 = v85;
          v41 = *(_DWORD *)(a4 + 8);
        }
        *(_OWORD *)(*(_QWORD *)a4 + 16 * v41) = v43;
        v41 = *(_DWORD *)(a4 + 8) + 1;
        *(_DWORD *)(a4 + 8) = v41;
        ++v40;
        v42 -= 16;
      }
      while (v42);
    }
    *(_DWORD *)(a5 + 8) = 0;
  }
  v44 = a9;
  v45 = *(unsigned int *)(a8 + 8);
  if ((_DWORD)v45)
  {
    v46 = *(__int128 **)a8;
    v47 = *(_DWORD *)(a4 + 8);
    v48 = 16 * v45;
    do
    {
      v49 = *v46;
      if (v47 >= *(_DWORD *)(a4 + 12))
      {
        v86 = *v46;
        result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v47 + 1, 16);
        v49 = v86;
        v47 = *(_DWORD *)(a4 + 8);
      }
      *(_OWORD *)(*(_QWORD *)a4 + 16 * v47) = v49;
      v47 = *(_DWORD *)(a4 + 8) + 1;
      *(_DWORD *)(a4 + 8) = v47;
      ++v46;
      v48 -= 16;
    }
    while (v48);
  }
  *(_DWORD *)(a8 + 8) = 0;
  v89 = 0;
  if (a2[20] == -1)
  {
    if (a2[13] == -1)
      goto LABEL_59;
    v84 = a9;
    v87 = a3;
    v82 = 0;
    v83 = 0;
    v52 = 0;
    v81 = 0;
    v53 = 1;
  }
  else
  {
    v84 = a9;
    v87 = a3;
    v50 = ((uint64_t (*)(_QWORD **, uint64_t))(*a1)[2])(a1, a3);
    v52 = v51;
    result = ((uint64_t (*)(_QWORD **, uint64_t, _QWORD, char *, _QWORD))(*a1)[18])(a1, v50, v51, (char *)&v89 + 4, 0);
    v53 = result;
    v54 = 0;
    v55 = 0;
    if ((result & 1) == 0)
    {
      result = ((uint64_t (*)(_QWORD **, uint64_t, uint64_t))(*a1)[21])(a1, v50, v52);
      v54 = result;
      v55 = v56;
    }
    *(_DWORD *)(a7 + 8) = 0;
    if (a2[13] == -1)
    {
      v62 = 0;
      v61 = 0;
      v60 = 1;
      goto LABEL_42;
    }
    v81 = v50;
    v82 = v55;
    v83 = v54;
  }
  v57 = ((uint64_t (*)(_QWORD **, uint64_t))(*a1)[2])(a1, v87);
  v59 = v58;
  result = ((uint64_t (*)(_QWORD **, uint64_t, _QWORD, uint64_t *, _QWORD))(*a1)[18])(a1, v57, v58, &v89, 0);
  v60 = result;
  v61 = 0;
  v62 = 0;
  if ((result & 1) == 0)
  {
    result = ((uint64_t (*)(_QWORD **, uint64_t, uint64_t))(*a1)[21])(a1, v57, v59);
    v61 = result;
    v62 = v63;
  }
  v64 = v53 == v60 || a2[20] == -1;
  v55 = v82;
  v54 = v83;
  if (v64)
  {
LABEL_42:
    if (v53)
      v68 = v60 == 0;
    else
      v68 = 1;
    v44 = v84;
    v67 = v87;
    if (!v68)
    {
      result = ((uint64_t (*)(_QWORD **, _QWORD))(*a1)[8])(a1, (HIDWORD(v89) | ((_DWORD)v89 << 16)));
LABEL_56:
      v72 = result;
      v73 = v71;
      v74 = *(unsigned int *)(a4 + 8);
      if (v74 >= *(_DWORD *)(a4 + 12))
      {
        result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v74 + 1, 16);
        LODWORD(v74) = *(_DWORD *)(a4 + 8);
      }
      v75 = (uint64_t *)(*(_QWORD *)a4 + 16 * v74);
      *v75 = v72;
      v75[1] = v73;
      ++*(_DWORD *)(a4 + 8);
      goto LABEL_59;
    }
    goto LABEL_47;
  }
  v61 = ((uint64_t (*)(_QWORD **, uint64_t, uint64_t))(*a1)[21])(a1, v57, v59);
  v62 = v65;
  result = ((uint64_t (*)(_QWORD **, uint64_t, uint64_t))(*a1)[21])(a1, v81, v52);
  v54 = result;
  v55 = v66;
  v44 = v84;
  v67 = v87;
LABEL_47:
  v69 = a2[20];
  v70 = a2[13];
  if (v69 != -1 && v70 == -1)
  {
    result = ((uint64_t (*)(_QWORD **, uint64_t, uint64_t))(*a1)[24])(a1, v54, v55);
    goto LABEL_56;
  }
  if (v69 == -1 && v70 != -1)
  {
    result = ((uint64_t (*)(_QWORD **, uint64_t, uint64_t))(*a1)[23])(a1, v61, v62);
    goto LABEL_56;
  }
  if (v69 != -1 && v70 != -1)
  {
    v90 = v61;
    v91 = v62;
    v92 = v54;
    v93 = v55;
    result = ((uint64_t (*)(_QWORD **, uint64_t, uint64_t *, uint64_t))(*a1)[12])(a1, v67, &v90, 2);
    goto LABEL_56;
  }
LABEL_59:
  v76 = *(unsigned int *)(v44 + 8);
  if ((_DWORD)v76)
  {
    v77 = *(__int128 **)v44;
    v78 = *(_DWORD *)(a4 + 8);
    v79 = 16 * v76;
    do
    {
      v80 = *v77;
      if (v78 >= *(_DWORD *)(a4 + 12))
      {
        v88 = *v77;
        result = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v78 + 1, 16);
        v80 = v88;
        v78 = *(_DWORD *)(a4 + 8);
      }
      *(_OWORD *)(*(_QWORD *)a4 + 16 * v78) = v80;
      v78 = *(_DWORD *)(a4 + 8) + 1;
      *(_DWORD *)(a4 + 8) = v78;
      ++v77;
      v79 -= 16;
    }
    while (v79);
  }
  *(_DWORD *)(v44 + 8) = 0;
  return result;
}

uint64_t sub_1C556FDF8(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  int v10;
  uint64_t v11;
  uint64_t v13;
  _BYTE v14[512];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a2 >= 0x41)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 0x40)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)4uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C6279894(a1, v6, v6 + 8 * v7);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_DWORD *)(a1 + v8 + 8);
    if ((v10 - 0x7FFFFFFF) >= 2)
    {
      *(_DWORD *)v9 = v10;
      v9[4] = *(_BYTE *)(a1 + v8 + 12);
      v9 += 8;
    }
    v8 += 8;
  }
  while (v8 != 512);
  if (a2 > 0x40)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)4uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C6279894(a1, (uint64_t)v14, (uint64_t)v9);
}

_QWORD *sub_1C556FF80(_QWORD *a1)
{
  uint64_t v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;

  *a1 = &off_1E816F6C0;
  v4 = (unsigned __int8 *)a1[1];
  v2 = (uint64_t)(a1 + 1);
  v3 = v4;
  if (v4)
    llvm::MetadataTracking::untrack(v2, v3);
  return a1;
}

void sub_1C556FFB8(_QWORD *a1)
{
  uint64_t v1;
  unsigned __int8 *v2;
  unsigned __int8 *v3;

  *a1 = &off_1E816F6C0;
  v3 = (unsigned __int8 *)a1[1];
  v1 = (uint64_t)(a1 + 1);
  v2 = v3;
  if (v3)
    llvm::MetadataTracking::untrack(v1, v2);
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5570000(uint64_t a1)
{
  _QWORD *v2;
  unsigned __int8 *v3;

  v2 = operator new(0x20uLL);
  *v2 = &off_1E816F6C0;
  v3 = *(unsigned __int8 **)(a1 + 8);
  v2[1] = v3;
  if (v3)
    llvm::MetadataTracking::track((uint64_t)(v2 + 1), v3, 2);
  *((_DWORD *)v2 + 4) = *(_DWORD *)(a1 + 16);
  v2[3] = *(_QWORD *)(a1 + 24);
  return v2;
}

uint64_t sub_1C557005C(uint64_t a1, uint64_t a2)
{
  unsigned __int8 *v4;
  uint64_t result;

  *(_QWORD *)a2 = &off_1E816F6C0;
  v4 = *(unsigned __int8 **)(a1 + 8);
  *(_QWORD *)(a2 + 8) = v4;
  result = a2 + 8;
  if (v4)
    result = llvm::MetadataTracking::track(result, v4, 2);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(a1 + 16);
  *(_QWORD *)(a2 + 24) = *(_QWORD *)(a1 + 24);
  return result;
}

uint64_t sub_1C55700B0(uint64_t a1)
{
  uint64_t result;
  unsigned __int8 *v2;
  unsigned __int8 *v3;

  v3 = *(unsigned __int8 **)(a1 + 8);
  result = a1 + 8;
  v2 = v3;
  if (v3)
    return llvm::MetadataTracking::untrack(result, v2);
  return result;
}

void sub_1C55700C0(char *__p)
{
  char *v2;
  unsigned __int8 *v3;
  unsigned __int8 *v4;

  v4 = (unsigned __int8 *)*((_QWORD *)__p + 1);
  v2 = __p + 8;
  v3 = v4;
  if (v4)
    llvm::MetadataTracking::untrack((uint64_t)v2, v3);
  operator delete(__p);
}

_QWORD *sub_1C55700EC(uint64_t a1, unsigned int *a2)
{
  return sub_1C6366AB4(*(_QWORD *)(*(_QWORD *)(a1 + 24) + 40), *a2, (const llvm::APInt *)(a1 + 8), (llvm *)5, 0, 1, 0);
}

void sub_1C5570114()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C5570128()
{
  _QWORD *result;

  result = operator new(0x10uLL);
  *result = &off_1E816F708;
  return result;
}

void sub_1C557014C(uint64_t a1, _QWORD *a2)
{
  *a2 = &off_1E816F708;
}

uint64_t sub_1C5570164(uint64_t a1, uint64_t a2)
{
  return *(_QWORD *)a2;
}

uint64_t sub_1C5570174(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "GPU Iterate Combiner";
  *(_QWORD *)(v2 + 8) = 20;
  *(_QWORD *)(v2 + 16) = "gpu-itr-combine";
  *(_QWORD *)(v2 + 24) = 15;
  *(_QWORD *)(v2 + 32) = &unk_1ED806348;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C5570204;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C5570204()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C557022C(v0);
}

uint64_t sub_1C557022C(uint64_t a1)
{
  _QWORD *v2;
  unint64_t v4;
  unint64_t v6;
  _QWORD *v7;
  _QWORD v8[2];

  v2 = (_QWORD *)sub_1C4776848(a1, (uint64_t)&unk_1ED806348);
  *v2 = &off_1E816F750;
  v2[31] = 0;
  v2[35] = v2 + 37;
  v2[36] = 0x2000000000;
  v2[229] = 0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v6 = qword_1ED830BC0[0];
  v4 = atomic_load(&qword_1ED806350);
  if (v4 != -1)
  {
    v8[0] = sub_1C5570174;
    v8[1] = &v6;
    v7 = v8;
    std::__call_once(&qword_1ED806350, &v7, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

void sub_1C5570308(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;

  *(_QWORD *)this = &off_1E816F750;
  v2 = (char *)*((_QWORD *)this + 35);
  if (v2 != (char *)this + 296)
    free(v2);
  *(_QWORD *)this = &unk_1E8144BE8;
  v3 = (char *)*((_QWORD *)this + 22);
  if (v3 != (char *)this + 192)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 13);
  if (v4 != (char *)this + 120)
    free(v4);
  v5 = (char *)*((_QWORD *)this + 4);
  if (v5 != (char *)this + 48)
    free(v5);
  llvm::Pass::~Pass(this);
}

void sub_1C55703A0(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;
  char *v5;

  *(_QWORD *)this = &off_1E816F750;
  v2 = (char *)*((_QWORD *)this + 35);
  if (v2 != (char *)this + 296)
    free(v2);
  *(_QWORD *)this = &unk_1E8144BE8;
  v3 = (char *)*((_QWORD *)this + 22);
  if (v3 != (char *)this + 192)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 13);
  if (v4 != (char *)this + 120)
    free(v4);
  v5 = (char *)*((_QWORD *)this + 4);
  if (v5 != (char *)this + 48)
    free(v5);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C557044C()
{
  return "GPU Specific Iterate Combine";
}

void sub_1C557045C(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *a2)
{
  llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
  llvm::AnalysisUsage::setPreservesCFG(a2);
}

uint64_t sub_1C5570480(uint64_t a1, uint64_t a2)
{
  _QWORD *v4;
  _QWORD *v5;
  int v6;
  uint64_t v7;
  char v8;
  int v9;
  _QWORD *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t *v15;
  __int128 v16;
  __int128 v17;
  unsigned int v18;
  unint64_t v19;
  BOOL v20;
  char *v21;
  uint64_t v22;
  uint64_t i;
  int v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  size_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  unsigned int v34;
  unsigned int v35;
  int v36;
  uint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v44;
  uint64_t v45;
  unsigned int v46;
  int v47;
  _QWORD *v48;
  BOOL v49;
  int v50;
  BOOL v51;
  int v52;
  int v53;
  unsigned int v54;
  unsigned int v55;
  BOOL v56;
  unint64_t **v57;
  BOOL v58;
  int v59;
  _BOOL4 v60;
  _BOOL4 v61;
  uint64_t v63;
  int v64;
  int v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  unsigned int v69;
  unsigned int v70;
  uint64_t v71;
  uint64_t v72;
  unsigned int v73;
  unint64_t **v74;
  unsigned int v75;
  int v76;
  _QWORD *v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  char v83;
  unsigned int v84;
  uint64_t v85;

  v85 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(a1 + 272) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(a1 + 256) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 104))(*(_QWORD *)(a2 + 16));
  *(_QWORD *)(a1 + 264) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 176))(*(_QWORD *)(a2 + 16));
  *(_QWORD *)(a1 + 248) = *(_QWORD *)(a2 + 8);
  v4 = (_QWORD *)(a2 + 320);
  v5 = *(_QWORD **)(a2 + 328);
  if (v5 == (_QWORD *)(a2 + 320))
  {
    LOBYTE(v6) = 0;
    return v6 & 1;
  }
  v6 = 0;
  do
  {
    v7 = v5[7];
    if ((_QWORD *)v7 != v5 + 6)
    {
      v8 = 1;
      do
      {
        v9 = (***(uint64_t (****)(_QWORD, uint64_t, _QWORD))(a1 + 1832))(*(_QWORD *)(a1 + 1832), v7, v8 & 1);
        if (!v7 || (*(_BYTE *)v7 & 4) == 0)
        {
          while ((*(_WORD *)(v7 + 44) & 8) != 0)
            v7 = *(_QWORD *)(v7 + 8);
        }
        v8 &= v9 ^ 1;
        v6 |= v9;
        v7 = *(_QWORD *)(v7 + 8);
      }
      while ((_QWORD *)v7 != v5 + 6);
    }
    v5 = (_QWORD *)v5[1];
  }
  while (v5 != v4);
  v10 = *(_QWORD **)(a2 + 328);
  if (v10 != v4)
  {
    v67 = (_QWORD *)(a1 + 280);
    v63 = a1 + 296;
    v66 = (_QWORD *)(a2 + 320);
    do
    {
      v71 = v10[4];
      v11 = v10[7];
      if ((_QWORD *)v11 == v10 + 6)
      {
        v75 = 0;
      }
      else
      {
        v75 = 0;
        do
        {
          v83 = 0;
          v82 = 0;
          if ((*(unsigned int (**)(_QWORD, uint64_t, uint64_t *))(**(_QWORD **)(a1 + 1832) + 48))(*(_QWORD *)(a1 + 1832), v11, &v81))
          {
            v12 = *(unsigned int *)(a1 + 288);
            v13 = *(uint64_t **)(a1 + 280);
            if (v12 >= *(_DWORD *)(a1 + 292))
            {
              v19 = v12 + 1;
              v20 = &v13[6 * v12] > &v81;
              if (v13 <= &v81 && v20)
              {
                v21 = (char *)((char *)&v81 - (char *)v13);
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v67, v63, v19, 48);
                v13 = (uint64_t *)*v67;
                v14 = (uint64_t *)&v21[*v67];
              }
              else
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v67, v63, v19, 48);
                v13 = (uint64_t *)*v67;
                v14 = &v81;
              }
            }
            else
            {
              v14 = &v81;
            }
            v15 = &v13[6 * *(unsigned int *)(a1 + 288)];
            v16 = *(_OWORD *)v14;
            v17 = *((_OWORD *)v14 + 2);
            *((_OWORD *)v15 + 1) = *((_OWORD *)v14 + 1);
            *((_OWORD *)v15 + 2) = v17;
            *(_OWORD *)v15 = v16;
            ++*(_DWORD *)(a1 + 288);
            v18 = v75;
            if (v84 > v75)
              v18 = v84;
            v75 = v18;
          }
          if (!v11 || (*(_BYTE *)v11 & 4) == 0)
          {
            while ((*(_WORD *)(v11 + 44) & 8) != 0)
              v11 = *(_QWORD *)(v11 + 8);
          }
          v11 = *(_QWORD *)(v11 + 8);
        }
        while ((_QWORD *)v11 != v10 + 6);
      }
      v22 = *(unsigned int *)(a1 + 288);
      if (!(_DWORD)v22)
      {
        v60 = 0;
        goto LABEL_114;
      }
      v68 = v10;
      v81 = 1;
      for (i = 8; i != 520; i += 16)
        *(uint64_t *)((char *)&v81 + i) = -4096;
      v24 = 0;
      v25 = (uint64_t *)*v67;
      v26 = 48 * v22;
      do
      {
        v27 = *v25;
        v25 += 6;
        v80 = v27;
        *(_DWORD *)(sub_1C5571844(&v81, &v80) + 8) = v24++;
        v26 -= 48;
      }
      while (v26);
      v28 = *(unsigned int *)(a1 + 288);
      v29 = *(_QWORD *)(a1 + 280);
      if (v28 >= 2)
      {
        qsort(*(void **)(a1 + 280), v28, 0x30uLL, (int (__cdecl *)(const void *, const void *))sub_1C5570C10);
        v29 = *(_QWORD *)(a1 + 280);
        LODWORD(v28) = *(_DWORD *)(a1 + 288);
      }
      v30 = 0;
      v76 = 0;
      v73 = 0;
      v31 = 0;
      v74 = 0;
      v77 = 0;
      v79 = 0;
      v78 = 0;
      v72 = v29 + 48 * v28;
      v32 = -1;
      v69 = -1;
      v70 = -1;
      v33 = -1;
      do
      {
        v80 = 0;
        v80 = *(_QWORD *)v29;
        v34 = *(_DWORD *)(sub_1C5571844(&v81, &v80) + 8);
        v35 = *(_DWORD *)(v29 + 20);
        if (v32 == -1)
        {
          (*(void (**)(_QWORD, _QWORD, uint64_t, _QWORD, char *, uint64_t *, unsigned int *))(**(_QWORD **)(a1 + 1832) + 40))(*(_QWORD *)(a1 + 1832), *(_QWORD *)(a1 + 248), v71, *(_DWORD *)(v29 + 24), (char *)&v79 + 4, &v79, &v78);
          v77 = (_QWORD *)v29;
          v74 = (unint64_t **)v29;
          v29 += 48;
          v73 = v30++;
          v31 = 1;
          v33 = v35;
          v69 = v34;
          v70 = v34;
          goto LABEL_79;
        }
        v36 = *((_DWORD *)v77 + 6);
        if ((unsigned __int16)v36 != (unsigned __int16)*(_DWORD *)(v29 + 24)
          || *((unsigned __int8 *)v77 + 16) != *(unsigned __int8 *)(v29 + 16)
          || *((_DWORD *)v77 + 2) != *(_DWORD *)(v29 + 8)
          || *((_DWORD *)v77 + 3) != *(_DWORD *)(v29 + 12))
        {
          goto LABEL_64;
        }
        v37 = BYTE2(v36);
        if (BYTE2(v36))
        {
          v38 = v77 + 4;
          v39 = (uint64_t *)(v29 + 32);
          while (1)
          {
            v41 = *v38++;
            v40 = v41;
            v42 = *v39++;
            if (v40 != v42)
              break;
            if (!--v37)
              goto LABEL_51;
          }
LABEL_64:
          v45 = v31;
LABEL_65:
          if ((v36 & 0xFF00) == 0x1000)
          {
            if ((*(unsigned int (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 1832) + 24))(*(_QWORD *)(a1 + 1832), *(_QWORD *)(a1 + 248), v71))
            {
              v51 = (_DWORD)v45 == 1;
            }
            else
            {
              v51 = 0;
            }
            v52 = v76;
            if (v51)
            {
              if (v33 | v75)
              {
                if (v33)
                  v33 -= v78;
                v45 = 2;
              }
              else
              {
                (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 1832) + 32))(*(_QWORD *)(a1 + 1832), v71, *(_QWORD *)(a1 + 256), *(_QWORD *)(a1 + 272), *v77);
                v33 = 0;
                v45 = 1;
              }
            }
          }
          else
          {
            v52 = v76;
          }
          v31 = v45;
          v76 = v52 | sub_1C5570D78(a1, v73, v30 - 1, v33, v45, (uint64_t)v77, v74, v78);
          v35 = -1;
          goto LABEL_79;
        }
LABEL_51:
        if (v35 != v78 + v32 || v31 >= HIDWORD(v79))
        {
          v44 = v35 != v32 + ((_DWORD)v79 + 1) * v78 || v31 >= HIDWORD(v79) - (int)v79;
          v45 = v31;
          if (v44)
            goto LABEL_65;
          v64 = v79;
          v65 = v79 + 1;
          v46 = HIDWORD(v79);
          v47 = sub_1C5570CD4(v29, v72, (uint64_t)v77, *(_DWORD *)(v29 + 20), v78, v79);
          v48 = v77;
          v49 = (v47 + v46) / v46 == (v46
                                    + (((_DWORD)v45 - v46 + v64 + v47 + 1) & ~((int)(v45 - v46 + v64 + v47 + 1) >> 31))
                                    - 1)
                                   / v46;
          v50 = v65;
          if ((v47 + v46) / v46 == (v46
                                   + (((_DWORD)v45 - v46 + v64 + v47 + 1) & ~((int)(v45 - v46 + v64 + v47 + 1) >> 31))
                                   - 1)
                                  / v46)
            v50 = 0;
          v45 = (v50 + v45);
          if (v49)
            goto LABEL_65;
        }
        else
        {
          v53 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 1832) + 16))(*(_QWORD *)(a1 + 1832), *(_QWORD *)(a1 + 248), v71);
          v45 = v31;
          if (v53
            && (_DWORD)v31 == HIDWORD(v79) - 1
            && sub_1C5570CD4(v29, v72, (uint64_t)v77, v35, v78, v79) == 1)
          {
            v36 = *((_DWORD *)v77 + 6);
            goto LABEL_65;
          }
          v45 = (v31 + 1);
          v48 = v77;
        }
        v31 = v45;
        if (v34 >= v69)
          v54 = v69;
        else
          v54 = v34;
        if (v34 < v69)
          v48 = (_QWORD *)v29;
        v77 = v48;
        v55 = v70;
        v56 = v34 > v70;
        if (v34 > v70)
          v55 = v34;
        v69 = v54;
        v70 = v55;
        v57 = v74;
        if (v56)
          v57 = (unint64_t **)v29;
        v74 = v57;
        if (v33 >= v35)
          v33 = v35;
        v29 += 48;
        ++v30;
LABEL_79:
        v32 = v35;
      }
      while (v29 != v72);
      if (*((unsigned __int8 *)v77 + 25) << 8 != 4096)
      {
        v10 = v68;
        goto LABEL_110;
      }
      if ((*(unsigned int (**)(_QWORD, _QWORD, uint64_t))(**(_QWORD **)(a1 + 1832) + 24))(*(_QWORD *)(a1 + 1832), *(_QWORD *)(a1 + 248), v71))
      {
        v58 = (_DWORD)v31 == 1;
      }
      else
      {
        v58 = 0;
      }
      v10 = v68;
      if (v58)
      {
        v59 = v76;
        if (v33 | v75)
        {
          if (v33)
            v33 -= v78;
          v31 = 2;
        }
        else
        {
          (*(void (**)(_QWORD, uint64_t, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 1832) + 32))(*(_QWORD *)(a1 + 1832), v71, *(_QWORD *)(a1 + 256), *(_QWORD *)(a1 + 272), *v77);
          v33 = 0;
          v31 = 1;
        }
      }
      else
      {
LABEL_110:
        v59 = v76;
      }
      v61 = sub_1C5570D78(a1, v73, v30 - 1, v33, v31, (uint64_t)v77, v74, v78);
      *(_DWORD *)(a1 + 288) = 0;
      v60 = (v59 | v61) != 0;
      if ((v81 & 1) == 0)
        MEMORY[0x1CAA32FB4](v82, 8);
      v4 = v66;
LABEL_114:
      v6 |= v60 | (*(uint64_t (**)(_QWORD, _QWORD *))(**(_QWORD **)(a1 + 1832) + 8))(*(_QWORD *)(a1 + 1832), v10);
      v10 = (_QWORD *)v10[1];
    }
    while (v10 != v4);
  }
  return v6 & 1;
}

uint64_t sub_1C5570C10(uint64_t a1, uint64_t a2)
{
  int v2;
  int v3;
  int v4;
  uint64_t v5;
  int *v6;
  int *v7;
  int v8;
  int v9;
  int v10;
  uint64_t v11;
  unsigned int v12;
  unsigned int v13;
  unsigned int v14;
  unsigned int v15;
  unsigned int v16;
  unsigned int v17;
  int v21;
  int v22;
  unsigned int v23;
  int v24;

  v2 = *(_DWORD *)(a1 + 24);
  v3 = v2;
  v4 = *(_DWORD *)(a2 + 24);
  if (v2 != v4)
  {
    v24 = *(_DWORD *)(a2 + 24);
    return (v3 - v24);
  }
  v5 = BYTE2(v2);
  if (!BYTE2(v2))
  {
LABEL_6:
    v12 = *(unsigned __int8 *)(a1 + 16);
    v13 = *(unsigned __int8 *)(a2 + 16);
    v14 = *(_DWORD *)(a1 + 8);
    v15 = *(_DWORD *)(a1 + 12);
    v16 = *(_DWORD *)(a2 + 8);
    v17 = *(_DWORD *)(a2 + 12);
    if (v12 != v13 || v14 != v16 || v15 != v17)
    {
      if (v15 < v17 && v16 >= v14)
        v21 = -1;
      else
        v21 = 1;
      if (v14 >= v16)
        v22 = v21;
      else
        v22 = -1;
      if (v13 >= v12)
        v23 = v22;
      else
        v23 = 1;
      if (v12 >= v13)
        return v23;
      else
        return 0xFFFFFFFFLL;
    }
    v3 = BYTE1(v2);
    if (BYTE1(v2) == BYTE1(v4))
    {
      v3 = *(_DWORD *)(a1 + 20);
      v24 = *(_DWORD *)(a2 + 20);
    }
    else
    {
      v24 = BYTE1(v4);
    }
    return (v3 - v24);
  }
  v6 = (int *)(a1 + 32);
  v7 = (int *)(a2 + 32);
  while (1)
  {
    v9 = *v6;
    v6 += 2;
    v8 = v9;
    v10 = *v7;
    v7 += 2;
    v11 = (v8 - v10);
    if ((_DWORD)v11)
      return v11;
    if (!--v5)
      goto LABEL_6;
  }
}

uint64_t sub_1C5570CD4(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, int a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t result;
  int v9;
  uint64_t v10;

  v6 = a1 + 48;
  if (a1 + 48 == a2)
    return 0;
  v7 = a1;
  result = 0;
  do
  {
    a4 += a5;
    if (a6)
    {
      v9 = *(_DWORD *)(v7 + 68);
      if (v9 == a4 + a5)
        result = (result + 1);
      else
        result = result;
      if (v9 == a4 + a5)
        a4 += a5;
    }
    if (*(unsigned __int16 *)(v7 + 72) != (unsigned __int16)*(_DWORD *)(a3 + 24) || *(_DWORD *)(v7 + 68) != a4)
      break;
    if (BYTE2(*(_DWORD *)(a3 + 24)))
    {
      v10 = 0;
      while (*(_QWORD *)(a3 + 32 + v10) == *(_QWORD *)(v7 + v10 + 80))
      {
        v10 += 8;
        if (8 * BYTE2(*(_DWORD *)(a3 + 24)) == v10)
          goto LABEL_15;
      }
      return result;
    }
LABEL_15:
    result = (result + 1);
    v6 += 48;
    v7 += 48;
  }
  while (v6 != a2);
  return result;
}

BOOL sub_1C5570D78(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6, unint64_t **a7, unsigned int a8)
{
  unsigned int v8;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  const llvm::DILocation *v15;
  uint64_t v16;
  unint64_t v17;
  unint64_t **v18;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  _DWORD *v26;
  unsigned int v27;
  uint64_t *v28;
  uint64_t v29;
  const llvm::MachineOperand *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  unint64_t v38;
  uint64_t v39;
  int *v40;
  uint64_t v41;
  unsigned int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  unint64_t *v46;
  uint64_t v47;
  uint64_t v48;
  llvm::MachineFunction *v49;
  unsigned __int8 *v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  unint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  _DWORD *v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  unsigned int v68;
  unint64_t *v69;
  uint64_t v70;
  uint64_t v71;
  llvm::MachineFunction *v72;
  unsigned __int8 *v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  uint64_t *v77;
  uint64_t v78;
  int v79;
  unsigned int *v80;
  unint64_t *v81;
  unsigned __int8 **v82;
  const llvm::DILocation *v83;
  unsigned __int8 *MergedLocation;
  unsigned __int8 *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  unint64_t v92;
  uint64_t v93;
  unint64_t *v94;
  unsigned __int8 **v95;
  const llvm::DILocation *v96;
  unsigned __int8 *v97;
  unsigned __int8 *v98;
  uint64_t v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  uint64_t v105;
  unsigned int v106;
  unsigned int IncompleteVirtualRegister;
  unsigned int v108;
  unint64_t **v109;
  unsigned int v111;
  uint64_t v112;
  unsigned int v113;
  _DWORD *v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  unsigned __int8 *v121;
  unsigned __int8 *v122;
  int v123;
  uint64_t v124[2];
  unsigned int v125;
  unsigned __int8 *v126;
  unsigned __int8 *v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;

  v8 = a5;
  if (a5 < 2)
    return v8 > 1;
  v106 = a5;
  v12 = (*(uint64_t (**)(_QWORD, uint64_t, _QWORD))(**(_QWORD **)(a1 + 1832) + 56))(*(_QWORD *)(a1 + 1832), a5, *(unsigned __int8 *)(a6 + 25));
  v109 = (unint64_t **)a6;
  v13 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 1832) + 64))(*(_QWORD *)(a1 + 1832), a6);
  v14 = *(_QWORD *)(a1 + 272);
  IncompleteVirtualRegister = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v14, "", 0);
  *(_QWORD *)(*(_QWORD *)(v14 + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v12 & 0xFFFFFFFFFFFFFFFBLL;
  v16 = *(_QWORD *)(v14 + 8);
  if (v16)
    (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v16 + 24))(v16, IncompleteVirtualRegister);
  v17 = 0;
  v124[0] = 0;
  v124[1] = 0;
  v125 = 0;
  if (a2 <= a3)
  {
    v120 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 280) + 48 * a2) + 24) + 32);
    v20 = a2;
    v108 = a2;
    v118 = v13;
    do
    {
      v21 = *(_QWORD *)(a1 + 280) + 48 * v20;
      v119 = (*(_DWORD *)(v21 + 20) - a4) / a8;
      v22 = *(_QWORD *)v21;
      v123 = *(_DWORD *)(v13 + 4 * v119);
      v112 = v22;
      v23 = *(_QWORD *)(v22 + 32) + 32 * *(unsigned int *)(v21 + 28);
      if ((*(_BYTE *)(v23 + 3) & 1) == 0)
        break;
      v24 = *(_QWORD *)(a1 + 272);
      v27 = *(_DWORD *)(v23 + 4);
      v26 = (_DWORD *)(v23 + 4);
      v25 = v27;
      if ((v27 & 0x80000000) != 0)
        v28 = (uint64_t *)(*(_QWORD *)(v24 + 24) + 16 * (v25 & 0x7FFFFFFF) + 8);
      else
        v28 = (uint64_t *)(*(_QWORD *)(v24 + 272) + 8 * v25);
      v29 = *v28;
      v111 = v20;
      if (*v28)
      {
        while ((*(_BYTE *)(v29 + 3) & 1) != 0)
        {
          v29 = *(_QWORD *)(v29 + 24);
          if (!v29)
            goto LABEL_18;
        }
        v117 = v26;
        while (2)
        {
          v30 = (const llvm::MachineOperand *)v29;
          do
            v29 = *(_QWORD *)(v29 + 24);
          while (v29 && (*(_BYTE *)(v29 + 3) & 1) != 0);
          v31 = *((_QWORD *)v30 + 1);
          if ((**(_WORD **)(v31 + 16) & 0xFFFE) != 0x12)
          {
            v32 = *(unsigned int *)(v13 + 4 * v119);
            v33 = v12;
            if (((*(_DWORD *)v30 >> 8) & 0xFFF) != 0)
            {
              if ((_DWORD)v32)
                v32 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a1 + 264) + 208))(*(_QWORD *)(a1 + 264));
              else
                v32 = (*(_DWORD *)v30 >> 8) & 0xFFF;
            }
            v34 = *(unsigned int *)(v31 + 40);
            if ((_DWORD)v34)
            {
              v35 = 0;
              v36 = 0;
              while (1)
              {
                if (llvm::MachineOperand::isIdenticalTo((llvm::MachineOperand *)(*(_QWORD *)(v31 + 32) + v35), v30))
                {
                  v37 = (*(uint64_t (**)(_QWORD, _QWORD, uint64_t, _QWORD, uint64_t))(**(_QWORD **)(a1 + 256)
                                                                                            + 16))(*(_QWORD *)(a1 + 256), *(_QWORD *)(v31 + 16), v36, *(_QWORD *)(a1 + 264), v120);
                  if (v37)
                    break;
                }
                ++v36;
                v35 += 32;
                if (v34 == v36)
                  goto LABEL_34;
              }
              v38 = v37;
            }
            else
            {
LABEL_34:
              v38 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 272) + 24) + 16 * (*v117 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8;
            }
            v12 = v33;
            v39 = (*(uint64_t (**)(_QWORD, uint64_t, unint64_t, uint64_t))(**(_QWORD **)(a1 + 264) + 184))(*(_QWORD *)(a1 + 264), v33, v38, v32);
            if (v39)
            {
              *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a1 + 272) + 24) + 16 * (IncompleteVirtualRegister & 0x7FFFFFFF)) = v39 & 0xFFFFFFFFFFFFFFFBLL;
              v12 = v39;
              v13 = v118;
              goto LABEL_64;
            }
            v40 = sub_1C4A1156C(v124, &v123);
            if ((int *)(v124[0] + 16 * v125) == v40)
            {
              v43 = *(_QWORD *)(a1 + 272);
              v113 = llvm::MachineRegisterInfo::createIncompleteVirtualRegister(v43, "", 0);
              v42 = v113;
              *(_QWORD *)(*(_QWORD *)(v43 + 24) + 16 * (v113 & 0x7FFFFFFF)) = v38 & 0xFFFFFFFFFFFFFFFBLL;
              v44 = *(_QWORD *)(v43 + 8);
              if (v44)
                (*(void (**)(uint64_t, _QWORD))(*(_QWORD *)v44 + 24))(v44, v113);
              if (!v112 || (v45 = v112, (*(_BYTE *)v112 & 4) == 0))
              {
                v45 = v112;
                if ((*(_WORD *)(v112 + 44) & 8) != 0)
                {
                  v45 = v112;
                  do
                    v45 = *(_QWORD *)(v45 + 8);
                  while ((*(_WORD *)(v45 + 44) & 8) != 0);
                }
              }
              v46 = *(unint64_t **)(v45 + 8);
              v47 = *(_QWORD *)(v112 + 24);
              v48 = *(_QWORD *)(*(_QWORD *)(a1 + 256) + 8);
              v49 = *(llvm::MachineFunction **)(v47 + 32);
              v50 = *(unsigned __int8 **)(v112 + 56);
              v126 = v50;
              if (v50)
                llvm::MetadataTracking::track((uint64_t)&v126, v50, 2);
              v51 = *((_QWORD *)v49 + 28);
              if (v51)
                *((_QWORD *)v49 + 28) = *(_QWORD *)v51;
              else
                v51 = sub_1C484358C((uint64_t)v49 + 128, 72, 3);
              v127 = v126;
              if (v126)
              {
                llvm::MetadataTracking::retrack((uint64_t)&v126, v126, (uint64_t)&v127);
                v126 = 0;
              }
              llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v51, v49, v48 + 912, &v127, 0);
              if (v127)
                llvm::MetadataTracking::untrack((uint64_t)&v127, v127);
              if (v126)
                llvm::MetadataTracking::untrack((uint64_t)&v126, v126);
              v52 = *(_QWORD *)(v47 + 40);
              *(_QWORD *)(v51 + 24) = v52;
              v53 = *(_QWORD *)(v52 + 32);
              v54 = *(unsigned int *)(v51 + 40);
              if ((_DWORD)v54)
              {
                v57 = *(_QWORD *)(v51 + 32);
                v58 = *(_QWORD *)(v53 + 40);
                v59 = 32 * v54;
                do
                {
                  if (!*(_BYTE *)v57)
                  {
                    v60 = *(unsigned int *)(v57 + 4);
                    if ((int)v60 >= 0)
                      v61 = (uint64_t *)(*(_QWORD *)(v58 + 272) + 8 * v60);
                    else
                      v61 = (uint64_t *)(*(_QWORD *)(v58 + 24) + 16 * (v60 & 0x7FFFFFFF) + 8);
                    v62 = *v61;
                    if (*v61)
                    {
                      v63 = *(_QWORD *)(v62 + 16);
                      *(_QWORD *)(v62 + 16) = v57;
                      *(_QWORD *)(v57 + 16) = v63;
                      if ((*(_BYTE *)(v57 + 3) & 1) != 0)
                      {
                        *(_QWORD *)(v57 + 24) = v62;
                      }
                      else
                      {
                        *(_QWORD *)(v57 + 24) = 0;
                        v61 = (uint64_t *)(v63 + 24);
                      }
                    }
                    else
                    {
                      *(_QWORD *)(v57 + 16) = v57;
                      *(_QWORD *)(v57 + 24) = 0;
                    }
                    *v61 = v57;
                  }
                  v57 += 32;
                  v59 -= 32;
                }
                while (v59);
              }
              v55 = *(_QWORD *)(v53 + 728);
              if (v55)
                (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v55 + 24))(v55, v51);
              v56 = *v46 & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v51 = v56 | *(_QWORD *)v51 & 7;
              *(_QWORD *)(v51 + 8) = v46;
              *(_QWORD *)(v56 + 8) = v51;
              *v46 = *v46 & 7 | v51;
              v128 = 0;
              v129 = 0;
              v130 = 0;
              LODWORD(v127) = 0x1000000;
              HIDWORD(v127) = v113;
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v51, v49, (const llvm::MachineOperand *)&v127);
              llvm::MachineInstr::addOperand((llvm::MachineInstr *)v51, *(llvm::MachineFunction **)(*(_QWORD *)(v51 + 24) + 32), v30);
              *((_QWORD *)sub_1C4A118C0((uint64_t)v124, &v123) + 1) = v51;
              v13 = v118;
LABEL_63:
              llvm::MachineOperand::setReg((uint64_t)v30, v42);
              *(_DWORD *)v30 &= 0xFFF000FF;
            }
            else
            {
              v41 = *((_QWORD *)v40 + 1);
              v13 = v118;
              if (*((_QWORD *)v30 + 1) != v41)
              {
                v42 = *(_DWORD *)(*(_QWORD *)(v41 + 32) + 4);
                goto LABEL_63;
              }
            }
          }
LABEL_64:
          if (!v29)
            break;
          continue;
        }
      }
LABEL_18:
      v20 = v111 + 1;
      a2 = v108;
    }
    while (v111 + 1 <= a3);
    v17 = 0;
    while (1)
    {
      v64 = (_DWORD *)(*(_QWORD *)(a1 + 280) + 48 * a2);
      v65 = *(_QWORD *)v64;
      v66 = (v64[5] - a4) / a8;
      v67 = *(_QWORD *)(*(_QWORD *)v64 + 32) + 32 * v64[7];
      if ((*(_BYTE *)(v67 + 3) & 1) == 0)
        break;
      v74 = *(_QWORD *)(a1 + 272);
      v75 = *(unsigned int *)(v67 + 4);
      v76 = a2;
      if ((v75 & 0x80000000) != 0)
        v77 = (uint64_t *)(*(_QWORD *)(v74 + 24) + 16 * (v75 & 0x7FFFFFFF) + 8);
      else
        v77 = (uint64_t *)(*(_QWORD *)(v74 + 272) + 8 * v75);
      v78 = *v77;
      if (*v77)
      {
        while ((*(_BYTE *)(v78 + 3) & 1) != 0)
        {
          v78 = *(_QWORD *)(v78 + 24);
          if (!v78)
            goto LABEL_104;
        }
        while (2)
        {
          v80 = (unsigned int *)v78;
          do
            v78 = *(_QWORD *)(v78 + 24);
          while (v78 && (*(_BYTE *)(v78 + 3) & 1) != 0);
          v79 = *(_DWORD *)(v13 + 4 * v66);
          if (!v79)
          {
            llvm::MachineOperand::setReg((uint64_t)v80, IncompleteVirtualRegister);
            goto LABEL_103;
          }
          if (((*v80 >> 8) & 0xFFF) != 0)
          {
            v79 = (*(uint64_t (**)(_QWORD, _QWORD))(**(_QWORD **)(a1 + 264) + 208))(*(_QWORD *)(a1 + 264), *(unsigned int *)(v13 + 4 * v66));
            llvm::MachineOperand::setReg((uint64_t)v80, IncompleteVirtualRegister);
            if (v79)
              goto LABEL_102;
          }
          else
          {
            llvm::MachineOperand::setReg((uint64_t)v80, IncompleteVirtualRegister);
LABEL_102:
            *v80 = *v80 & 0xFFF000FF | ((v79 & 0xFFF) << 8);
          }
LABEL_103:
          *v80 &= ~0x4000000u;
          if (!v78)
            break;
          continue;
        }
      }
LABEL_104:
      v81 = *v109;
      if ((unint64_t *)v65 != *v109)
      {
        v83 = (const llvm::DILocation *)v81[7];
        v82 = (unsigned __int8 **)(v81 + 7);
        MergedLocation = (unsigned __int8 *)llvm::DILocation::getMergedLocation(*(llvm::DILocation **)(v65 + 56), v83, v15);
        v122 = MergedLocation;
        a2 = v76;
        if (MergedLocation)
          llvm::MetadataTracking::track((uint64_t)&v122, MergedLocation, 2);
        if (&v122 == v82)
        {
          if (v122)
            llvm::MetadataTracking::untrack((uint64_t)&v122, v122);
        }
        else
        {
          if (*v82)
            llvm::MetadataTracking::untrack((uint64_t)v82, *v82);
          v85 = v122;
          *v82 = v122;
          if (v85)
          {
            llvm::MetadataTracking::retrack((uint64_t)&v122, v85, (uint64_t)v82);
            v122 = 0;
          }
        }
        v86 = *(_QWORD *)(v65 + 24);
        if ((*(_BYTE *)v65 & 4) == 0 && (*(_WORD *)(v65 + 44) & 8) != 0)
        {
          v87 = v65;
          do
            v87 = *(_QWORD *)(v87 + 8);
          while ((*(_WORD *)(v87 + 44) & 8) != 0);
LABEL_158:
          v13 = v118;
LABEL_140:
          sub_1C487FE80(v86 + 40, v65, *(_QWORD *)(v87 + 8));
          goto LABEL_141;
        }
LABEL_139:
        v87 = v65;
        goto LABEL_140;
      }
      a2 = v76;
LABEL_141:
      if (++a2 > a3)
        goto LABEL_5;
    }
    if (!v17)
    {
      v68 = a2;
      v69 = *a7;
      v70 = *(_QWORD *)(v65 + 24);
      v71 = *(_QWORD *)(*(_QWORD *)(a1 + 256) + 8);
      v72 = *(llvm::MachineFunction **)(v70 + 32);
      v73 = *(unsigned __int8 **)(v65 + 56);
      v126 = v73;
      if (v73)
        llvm::MetadataTracking::track((uint64_t)&v126, v73, 2);
      v17 = *((_QWORD *)v72 + 28);
      if (v17)
        *((_QWORD *)v72 + 28) = *(_QWORD *)v17;
      else
        v17 = sub_1C484358C((uint64_t)v72 + 128, 72, 3);
      v127 = v126;
      if (v126)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v126, v126, (uint64_t)&v127);
        v126 = 0;
      }
      llvm::MachineInstr::MachineInstr((llvm::MachineInstr *)v17, v72, v71 + 864, &v127, 0);
      if (v127)
        llvm::MetadataTracking::untrack((uint64_t)&v127, v127);
      if (v126)
        llvm::MetadataTracking::untrack((uint64_t)&v126, v126);
      v88 = *(_QWORD *)(v70 + 40);
      *(_QWORD *)(v17 + 24) = v88;
      v89 = *(_QWORD *)(v88 + 32);
      v90 = *(unsigned int *)(v17 + 40);
      if ((_DWORD)v90)
      {
        v99 = *(_QWORD *)(v17 + 32);
        v100 = *(_QWORD *)(v89 + 40);
        v101 = 32 * v90;
        do
        {
          if (!*(_BYTE *)v99)
          {
            v102 = *(unsigned int *)(v99 + 4);
            if ((int)v102 >= 0)
              v103 = (uint64_t *)(*(_QWORD *)(v100 + 272) + 8 * v102);
            else
              v103 = (uint64_t *)(*(_QWORD *)(v100 + 24) + 16 * (v102 & 0x7FFFFFFF) + 8);
            v104 = *v103;
            if (*v103)
            {
              v105 = *(_QWORD *)(v104 + 16);
              *(_QWORD *)(v104 + 16) = v99;
              *(_QWORD *)(v99 + 16) = v105;
              if ((*(_BYTE *)(v99 + 3) & 1) != 0)
              {
                *(_QWORD *)(v99 + 24) = v104;
              }
              else
              {
                *(_QWORD *)(v99 + 24) = 0;
                v103 = (uint64_t *)(v105 + 24);
              }
            }
            else
            {
              *(_QWORD *)(v99 + 16) = v99;
              *(_QWORD *)(v99 + 24) = 0;
            }
            *v103 = v99;
          }
          v99 += 32;
          v101 -= 32;
        }
        while (v101);
      }
      v91 = *(_QWORD *)(v89 + 728);
      if (v91)
        (*(void (**)(uint64_t, unint64_t))(*(_QWORD *)v91 + 24))(v91, v17);
      v92 = *v69 & 0xFFFFFFFFFFFFFFF8;
      *(_QWORD *)v17 = v92 | *(_QWORD *)v17 & 7;
      *(_QWORD *)(v17 + 8) = v69;
      *(_QWORD *)(v92 + 8) = v17;
      *v69 = *v69 & 7 | v17;
      v128 = 0;
      v129 = 0;
      v130 = 0;
      LODWORD(v127) = 0x1000000;
      HIDWORD(v127) = IncompleteVirtualRegister;
      llvm::MachineInstr::addOperand((llvm::MachineInstr *)v17, v72, (const llvm::MachineOperand *)&v127);
      a2 = v68;
      v13 = v118;
    }
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v17, *(llvm::MachineFunction **)(*(_QWORD *)(v17 + 24) + 32), (const llvm::MachineOperand *)v67);
    v93 = *(unsigned int *)(v13 + 4 * v66);
    LODWORD(v127) = 1;
    v128 = 0;
    v129 = v93;
    llvm::MachineInstr::addOperand((llvm::MachineInstr *)v17, *(llvm::MachineFunction **)(*(_QWORD *)(v17 + 24) + 32), (const llvm::MachineOperand *)&v127);
    v94 = *a7;
    if ((unint64_t *)v65 == *a7)
      goto LABEL_141;
    v96 = (const llvm::DILocation *)v94[7];
    v95 = (unsigned __int8 **)(v94 + 7);
    v97 = (unsigned __int8 *)llvm::DILocation::getMergedLocation(*(llvm::DILocation **)(v65 + 56), v96, v15);
    v121 = v97;
    if (v97)
      llvm::MetadataTracking::track((uint64_t)&v121, v97, 2);
    if (&v121 == v95)
    {
      if (v121)
        llvm::MetadataTracking::untrack((uint64_t)&v121, v121);
    }
    else
    {
      if (*v95)
        llvm::MetadataTracking::untrack((uint64_t)v95, *v95);
      v98 = v121;
      *v95 = v121;
      if (v98)
      {
        llvm::MetadataTracking::retrack((uint64_t)&v121, v98, (uint64_t)v95);
        v121 = 0;
      }
    }
    v86 = *(_QWORD *)(v65 + 24);
    if ((*(_BYTE *)v65 & 4) == 0 && (*(_WORD *)(v65 + 44) & 8) != 0)
    {
      v87 = v65;
      do
        v87 = *(_QWORD *)(v87 + 8);
      while ((*(_WORD *)(v87 + 44) & 8) != 0);
      goto LABEL_158;
    }
    goto LABEL_139;
  }
LABEL_5:
  if (v17)
    v18 = a7;
  else
    v18 = v109;
  v8 = v106;
  (*(void (**)(_QWORD, unint64_t **, _QWORD, _QWORD, _QWORD, _QWORD))(**(_QWORD **)(a1 + 1832) + 72))(*(_QWORD *)(a1 + 1832), v18, v106, IncompleteVirtualRegister, a4, *(_QWORD *)(a1 + 256));
  MEMORY[0x1CAA32FB4](v124[0], 8);
  return v8 > 1;
}

uint64_t sub_1C5571844(_DWORD *a1, uint64_t *a2)
{
  char v4;
  uint64_t result;
  int v6;
  unsigned int v7;
  uint64_t v8;

  v8 = 0;
  v4 = sub_1C557192C((uint64_t)a1, *a2, &v8);
  result = v8;
  if ((v4 & 1) != 0)
    return result;
  v6 = *a1 >> 1;
  if ((*a1 & 1) != 0)
    v7 = 32;
  else
    v7 = a1[4];
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_11;
  }
  if (v7 + ~v6 - a1[1] <= v7 >> 3)
  {
LABEL_11:
    sub_1C55719D8((uint64_t)a1, v7);
    v8 = 0;
    sub_1C557192C((uint64_t)a1, *a2, &v8);
    result = v8;
  }
  *a1 += 2;
  if (*(_QWORD *)result != -4096)
    --a1[1];
  *(_QWORD *)result = *a2;
  *(_DWORD *)(result + 8) = 0;
  return result;
}

uint64_t sub_1C557192C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 32;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_15;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v9)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v9 = v7;
      v13 = v6 + v10++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_15;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_15:
  *a3 = v7;
  return result;
}

uint64_t sub_1C55719D8(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _BYTE v14[512];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a2 >= 0x21)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 0x20)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C5571B5C(a1, v6, v6 + 16 * v7);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_QWORD *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *(_QWORD *)v9 = v10;
      *((_DWORD *)v9 + 2) = *(_DWORD *)(a1 + v8 + 16);
      v9 += 16;
    }
    v8 += 16;
  }
  while (v8 != 512);
  if (a2 > 0x20)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C5571B5C(a1, (uint64_t)v14, (uint64_t)v9);
}

uint64_t sub_1C5571B5C(uint64_t result, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 520);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_9;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[2 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    v10 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v12 = 0;
      result = sub_1C557192C((uint64_t)v5, v10, &v12);
      v11 = v12;
      *v12 = *(_QWORD *)a2;
      *((_DWORD *)v11 + 2) = *(_DWORD *)(a2 + 8);
      *v5 += 2;
    }
    a2 += 16;
  }
  return result;
}

uint64_t llvm::GPUMetadataEmitter::CreateFragmentShaderIterationData(uint64_t a1, _QWORD *a2, int a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10;
  _QWORD *v11;
  void (**v12)(void);
  int v14;
  int v15;
  __int16 v16;
  int v17;
  _QWORD v18[3];
  _QWORD *v19;
  uint64_t v20;

  v20 = *MEMORY[0x1E0C80C00];
  v17 = a3;
  v16 = 0;
  v15 = 0;
  v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 336))(a4);
  v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v10 + 40))(v10);
  v11 = operator new(0x48uLL);
  *v11 = &off_1E816F810;
  v11[1] = &v17;
  v11[2] = &v15;
  v11[3] = &v14;
  v11[4] = a1;
  v11[5] = a5;
  v11[6] = a6;
  v11[7] = (char *)&v16 + 1;
  v11[8] = &v16;
  v19 = v11;
  sub_1C485BBE8(a2, (uint64_t)v18);
  if (v19 == v18)
  {
    v12 = (void (**)(void))(v18[0] + 32);
    goto LABEL_4;
  }
  if (v19)
  {
    v12 = (void (**)(void))(*v19 + 40);
LABEL_4:
    (*v12)();
  }
  return HIBYTE(v16) | (v16 << 8);
}

_DWORD *llvm::GPUMetadataEmitter::doFinalization(llvm::GPUMetadataEmitter *this)
{
  *((_DWORD *)this + 42) = 0;
  *((_DWORD *)this + 56) = 0;
  *(_OWORD *)((char *)this + 232) = 0u;
  *(_OWORD *)((char *)this + 248) = 0u;
  *(_OWORD *)((char *)this + 259) = 0u;
  sub_1C558AC98((_QWORD *)this + 1);
  *((_DWORD *)this + 22) = 0;
  return sub_1C5571D80((_DWORD *)this + 72);
}

_DWORD *sub_1C5571D80(_DWORD *result)
{
  uint64_t v1;
  _QWORD *v2;
  uint64_t v3;

  if (*((_QWORD *)result + 1))
  {
    v1 = result[4];
    if (v1 > 4 * result[2] && v1 >= 0x41)
    {
      return sub_1C558ADD8(result);
    }
    else
    {
      if ((_DWORD)v1)
      {
        v2 = *(_QWORD **)result;
        v3 = 96 * v1;
        do
        {
          *v2 = -4096;
          v2 += 12;
          v3 -= 96;
        }
        while (v3);
      }
      *((_QWORD *)result + 1) = 0;
    }
  }
  return result;
}

uint64_t llvm::GPUMetadataEmitter::runOnMachineFunction(llvm::GPUMetadataEmitter *this, llvm::MachineFunction *a2, const llvm::MachineLoopInfo *a3, llvm::MCContext *a4, llvm::MCStreamer *a5)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  char v11;
  int DeviceTypeFromTarget;
  uint64_t v13;
  unsigned int v14;
  int v15;
  uint64_t v16;
  int v17;
  unsigned int v18;
  _QWORD *v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  int v24;
  unsigned int v25;
  _QWORD *v26;
  uint64_t v27;
  void **v28;
  _WORD *v29;
  unint64_t v30;
  uint64_t v31;
  int v32;
  uint64_t v33;
  int v34;
  unsigned int v35;
  _QWORD *v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v39;
  uint64_t v40;
  const llvm::MachineLoopInfo *v41;
  uint64_t v42;
  void **v43;
  _WORD *v44;
  unint64_t v45;
  uint64_t v46;
  int v47;
  int v48;
  uint64_t v49;
  int v50;
  unsigned int v51;
  _QWORD *v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  int v56;
  unsigned int v57;
  _QWORD *v58;
  uint64_t v59;
  int v60;
  int v61;
  uint64_t v62;
  int v63;
  unsigned int v64;
  _QWORD *v65;
  uint64_t v66;
  void **v67;
  _WORD *v68;
  unint64_t v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  int v73;
  unsigned int v74;
  _QWORD *v75;
  uint64_t v76;
  const llvm::MachineLoopInfo *v77;
  uint64_t v78;
  void **v79;
  unint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  int v84;
  unsigned int v85;
  _QWORD *v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  uint64_t v90;
  int v91;
  unsigned int v92;
  _QWORD *v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  uint64_t v97;
  int v98;
  unsigned int v99;
  _QWORD *v100;
  uint64_t v101;
  uint64_t v102;
  _QWORD *v103;
  uint64_t v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  unsigned int v110;
  _QWORD *v111;
  uint64_t v112;
  char v113;
  _QWORD *v114;
  uint64_t v115;
  char v116;
  _QWORD *v117;
  uint64_t v118;
  int v119;
  _QWORD *v120;
  uint64_t v121;
  char v122;
  _QWORD *v123;
  uint64_t v124;
  unsigned int v125;
  char v127;
  int v128;
  unsigned int v129;
  uint64_t v130;
  int v131;
  unsigned int v132;
  _QWORD *v133;
  uint64_t v134;
  uint64_t v135;
  _QWORD *v136;
  uint64_t v137;
  uint64_t v138;
  int v139;
  uint64_t v140;
  unsigned int v141;
  uint64_t v142;
  int v143;
  unsigned int v144;
  _QWORD *v145;
  uint64_t v146;
  char v147;
  int v148;
  uint64_t v149;
  int v150;
  unsigned int v151;
  _QWORD *v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  _DWORD *v156;
  int v157;
  unsigned int v158;
  _QWORD *v159;
  uint64_t v160;
  _QWORD *v162;
  int v163;
  BOOL v164;
  unsigned int v165;
  _QWORD *v166;
  int v167;
  BOOL v168;
  unsigned int v169;
  _QWORD *v170;
  int v171;
  BOOL v172;
  unsigned int v173;
  _QWORD *v174;
  int v175;
  BOOL v176;
  unsigned int v177;
  _QWORD *v178;
  int v179;
  BOOL v180;
  unsigned int v181;
  _QWORD *v182;
  int v183;
  BOOL v184;
  unsigned int v185;
  _QWORD *v186;
  int v187;
  BOOL v188;
  unsigned int v189;
  _QWORD *v190;
  int v191;
  BOOL v192;
  unsigned int v193;
  _QWORD *v194;
  int v195;
  BOOL v196;
  unsigned int v197;
  _QWORD *v198;
  int v199;
  BOOL v200;
  unsigned int v201;
  _QWORD *v202;
  int v203;
  BOOL v204;
  unsigned int v205;
  _QWORD *v206;
  int v207;
  BOOL v208;
  unsigned int v209;
  _QWORD *v210;
  _QWORD *v211;
  _QWORD *v212;
  _QWORD *v213;
  _QWORD *v214;
  _QWORD *v215;
  _QWORD *v216;
  _QWORD *v217;
  _QWORD *v218;
  _QWORD *v219;
  _QWORD *v220;
  _QWORD *v221;
  _QWORD *v222;
  int v223;
  BOOL v224;
  unsigned int v225;
  _QWORD *v226;
  int v227;
  BOOL v228;
  unsigned int v229;
  char *v230;
  _QWORD *v231;
  _QWORD *v232;
  _QWORD *v233;
  int v234;
  BOOL v235;
  unsigned int v236;
  _QWORD *v237;
  int v238;
  BOOL v239;
  unsigned int v240;
  _QWORD *v241;
  int v242;
  BOOL v243;
  unsigned int v244;
  char *v245;
  _QWORD *v246;
  _QWORD *v247;
  _QWORD *v248;
  _QWORD *v249;
  int v250;
  BOOL v251;
  unsigned int v252;
  _QWORD *v253;
  int v254;
  BOOL v255;
  unsigned int v256;
  char *v257;
  _QWORD *v258;
  _QWORD *v259;
  _QWORD *v260;
  int v261;
  BOOL v262;
  unsigned int v263;
  _QWORD *v264;
  int v265;
  BOOL v266;
  unsigned int v267;
  _QWORD *v268;
  int v269;
  BOOL v270;
  unsigned int v271;
  char *v272;
  _QWORD *v273;
  _QWORD *v274;
  _QWORD *v275;
  _DWORD *v276;
  uint64_t v277;
  unsigned int v278;
  char v279;
  const char *v280;
  __int16 v281;
  const char *v282;
  __int16 v283;
  std::string __dst;
  uint64_t v285;
  void *__src;
  uint64_t v287;
  _WORD v288[24];
  int v289;
  __int128 v290;
  _OWORD v291[2];
  uint64_t v292;

  v292 = *MEMORY[0x1E0C80C00];
  v8 = *((_QWORD *)a2 + 43);
  *((_QWORD *)this + 39) = *((_QWORD *)a2 + 1);
  v9 = *(_QWORD *)a2;
  v285 = v9;
  v10 = *(_QWORD *)(v9 + 40);
  if (*(char *)(v10 + 239) < 0)
    sub_1C47EBC30(&__dst, *(void **)(v10 + 216), *(_QWORD *)(v10 + 224));
  else
    __dst = *(std::string *)(v10 + 216);
  if (!std::string::compare(&__dst, 0, 4uLL, "agx1"))
  {
    v11 = 27;
  }
  else if (!std::string::compare(&__dst, 0, 4uLL, "agx2"))
  {
    v11 = 28;
  }
  else if (!std::string::compare(&__dst, 0, 4uLL, "agx3"))
  {
    v11 = 29;
  }
  else
  {
    v11 = 0;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  DeviceTypeFromTarget = llvm::GPUBaseInfo::getDeviceTypeFromTarget(*((_QWORD *)this + 39));
  *((_DWORD *)this + 70) = DeviceTypeFromTarget;
  if (DeviceTypeFromTarget <= 11)
    *((_BYTE *)this + 6360) = 1;
  v13 = (*(uint64_t (**)(_QWORD, llvm::MachineFunction *))(**(_QWORD **)this + 72))(*(_QWORD *)this, a2);
  (*(void (**)(_QWORD, _QWORD, uint64_t))(**((_QWORD **)a2 + 43) + 632))(*((_QWORD *)a2 + 43), *(_QWORD *)a2, v13);
  v14 = v9 >> 4;
  v279 = v11;
  if (((*(unsigned __int16 *)(v9 + 18) >> 4) & 0x3FFu) <= 0x63)
  {
LABEL_30:
    v276 = (_DWORD *)((char *)this + 288);
    v32 = *((_DWORD *)this + 76);
    if (v32)
    {
      v33 = *((_QWORD *)this + 36);
      v34 = v32 - 1;
      v35 = (v32 - 1) & (v14 ^ (v9 >> 9));
      v36 = (_QWORD *)(v33 + 96 * v35);
      v37 = *v36;
      if (v9 == *v36)
      {
        v36[1] = v13;
        goto LABEL_33;
      }
      v233 = 0;
      v234 = 1;
      while (v37 != -4096)
      {
        if (v233)
          v235 = 0;
        else
          v235 = v37 == -8192;
        if (v235)
          v233 = v36;
        v236 = v35 + v234++;
        v35 = v236 & v34;
        v36 = (_QWORD *)(v33 + 96 * v35);
        v37 = *v36;
        if (v9 == *v36)
          goto LABEL_378;
      }
      if (v233)
        v246 = v233;
      else
        v246 = v36;
    }
    else
    {
      v246 = 0;
    }
    v36 = sub_1C558AEF8(v276, &v285, v246);
    *v36 = v9;
    *(_OWORD *)(v36 + 1) = 0u;
    *(_OWORD *)(v36 + 3) = 0u;
    *(_OWORD *)(v36 + 5) = 0u;
    *(_OWORD *)(v36 + 7) = 0u;
    *(_OWORD *)(v36 + 9) = 0u;
    v36[11] = 0;
    v33 = *((_QWORD *)this + 36);
    v32 = *((_DWORD *)this + 76);
LABEL_378:
    v36[1] = v13;
    if (!v32)
    {
      v247 = 0;
      goto LABEL_383;
    }
    v34 = v32 - 1;
    v35 = (v32 - 1) & (v14 ^ (v9 >> 9));
LABEL_33:
    v38 = (_QWORD *)(v33 + 96 * v35);
    v39 = *v38;
    if (v9 == *v38)
      goto LABEL_34;
    v237 = 0;
    v238 = 1;
    while (v39 != -4096)
    {
      if (v237)
        v239 = 0;
      else
        v239 = v39 == -8192;
      if (v239)
        v237 = v38;
      v240 = v35 + v238++;
      v35 = v240 & v34;
      v38 = (_QWORD *)(v33 + 96 * v35);
      v39 = *v38;
      if (v9 == *v38)
        goto LABEL_34;
    }
    if (v237)
      v247 = v237;
    else
      v247 = v38;
LABEL_383:
    v38 = sub_1C558AEF8(v276, &v285, v247);
    *v38 = v9;
    *(_OWORD *)(v38 + 1) = 0u;
    *(_OWORD *)(v38 + 3) = 0u;
    *(_OWORD *)(v38 + 5) = 0u;
    *(_OWORD *)(v38 + 7) = 0u;
    *(_OWORD *)(v38 + 9) = 0u;
    v38[11] = 0;
LABEL_34:
    v40 = v10;
    v41 = a3;
    v42 = v8;
    v38[3] = v13;
    v43 = (void **)((char *)this + 160);
    (*(void (**)(void **__return_ptr, _QWORD, llvm::MachineFunction *))(**(_QWORD **)this + 896))(&__src, *(_QWORD *)this, a2);
    v44 = __src;
    if ((void **)((char *)this + 160) == &__src)
    {
      a3 = v41;
LABEL_41:
      *((_DWORD *)this + 56) = v289;
      *(_OWORD *)((char *)this + 232) = v290;
      *(_OWORD *)((char *)this + 248) = v291[0];
      *(_OWORD *)((char *)this + 259) = *(_OWORD *)((char *)v291 + 11);
      v10 = v40;
      if (v44 != v288)
        free(v44);
      v47 = (*(uint64_t (**)(_QWORD, llvm::MachineFunction *))(**(_QWORD **)this + 904))(*(_QWORD *)this, a2);
      v48 = *((_DWORD *)this + 76);
      v14 = v9 >> 4;
      if (v48)
      {
        v49 = *((_QWORD *)this + 36);
        v50 = v48 - 1;
        v51 = v50 & ((v9 >> 4) ^ (v9 >> 9));
        v52 = (_QWORD *)(v49 + 96 * v51);
        v53 = *v52;
        if (v9 == *v52)
        {
LABEL_45:
          *((_DWORD *)v52 + 8) = v47;
          goto LABEL_83;
        }
        v241 = 0;
        v242 = 1;
        while (v53 != -4096)
        {
          if (v241)
            v243 = 0;
          else
            v243 = v53 == -8192;
          if (v243)
            v241 = v52;
          v244 = v51 + v242++;
          v51 = v244 & v50;
          v52 = (_QWORD *)(v49 + 96 * v51);
          v53 = *v52;
          if (v9 == *v52)
            goto LABEL_45;
        }
        if (v241)
          v248 = v241;
        else
          v248 = v52;
      }
      else
      {
        v248 = 0;
      }
      v52 = sub_1C558AEF8(v276, &v285, v248);
      *v52 = v9;
      *(_OWORD *)(v52 + 1) = 0u;
      *(_OWORD *)(v52 + 3) = 0u;
      *(_OWORD *)(v52 + 5) = 0u;
      *(_OWORD *)(v52 + 7) = 0u;
      *(_OWORD *)(v52 + 9) = 0u;
      v52[11] = 0;
      goto LABEL_45;
    }
    if (__src != v288)
    {
      v245 = (char *)*((_QWORD *)this + 20);
      if (v245 != (char *)this + 176)
      {
        free(v245);
        v44 = __src;
      }
      *((_QWORD *)this + 20) = v44;
      *((_QWORD *)this + 21) = v287;
      __src = v288;
      HIDWORD(v287) = 0;
      goto LABEL_40;
    }
    v45 = v287;
    v46 = *((unsigned int *)this + 42);
    if (v46 >= v287)
    {
      if ((_DWORD)v287)
        memmove(*v43, __src, 8 * v287);
LABEL_39:
      *((_DWORD *)this + 42) = v45;
LABEL_40:
      v8 = v42;
      LODWORD(v287) = 0;
      v44 = __src;
      a3 = v41;
      goto LABEL_41;
    }
    if (*((_DWORD *)this + 43) < v287)
    {
      *((_DWORD *)this + 42) = 0;
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 160, (uint64_t)this + 176, v45, 8);
    }
    else if ((_DWORD)v46)
    {
      memmove(*v43, __src, 8 * v46);
LABEL_369:
      if (v46 != v287)
        memcpy((char *)*v43 + 8 * v46, (char *)__src + 8 * v46, 8 * v287 - 8 * v46);
      goto LABEL_39;
    }
    v46 = 0;
    goto LABEL_369;
  }
  switch((*(unsigned __int16 *)(v9 + 18) >> 4) & 0x3FF)
  {
    case 'd':
      v82 = *((_DWORD *)this + 76);
      if (v82)
      {
        v83 = *((_QWORD *)this + 36);
        v84 = v82 - 1;
        v85 = v84 & (v14 ^ (v9 >> 9));
        v86 = (_QWORD *)(v83 + 96 * v85);
        v87 = *v86;
        if (v9 == *v86)
          goto LABEL_73;
        v264 = 0;
        v265 = 1;
        while (v87 != -4096)
        {
          if (v264)
            v266 = 0;
          else
            v266 = v87 == -8192;
          if (v266)
            v264 = v86;
          v267 = v85 + v265++;
          v85 = v267 & v84;
          v86 = (_QWORD *)(v83 + 96 * v85);
          v87 = *v86;
          if (v9 == *v86)
          {
LABEL_73:
            if (!*((_BYTE *)v86 + 20))
              *((_BYTE *)v86 + 20) = 1;
            *((_DWORD *)v86 + 4) = v13;
            v88 = *((_QWORD *)a2 + 6);
            if (!v88)
            {
              v88 = (*(uint64_t (**)(_QWORD, char *, llvm::MachineFunction *))(**((_QWORD **)a2 + 1) + 216))(*((_QWORD *)a2 + 1), (char *)a2 + 128, a2);
              *((_QWORD *)a2 + 6) = v88;
            }
            if (*(_BYTE *)(v88 + 12))
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v8 + 8))(v8, 40, 1, 1, 0, 1, 2);
            *((_DWORD *)this + 42) = 0;
            *((_DWORD *)this + 56) = 0;
            *(_OWORD *)((char *)this + 232) = 0u;
            *(_OWORD *)((char *)this + 248) = 0u;
            *(_OWORD *)((char *)this + 259) = 0u;
            goto LABEL_83;
          }
        }
        if (v264)
          v274 = v264;
        else
          v274 = v86;
      }
      else
      {
        v274 = 0;
      }
      v86 = sub_1C558AEF8((_DWORD *)this + 72, &v285, v274);
      *v86 = v9;
      *(_OWORD *)(v86 + 1) = 0u;
      *(_OWORD *)(v86 + 3) = 0u;
      *(_OWORD *)(v86 + 5) = 0u;
      *(_OWORD *)(v86 + 7) = 0u;
      *(_OWORD *)(v86 + 9) = 0u;
      v86[11] = 0;
      goto LABEL_73;
    case 'e':
    case 'g':
    case 'h':
    case 'l':
      v15 = *((_DWORD *)this + 76);
      if (v15)
      {
        v16 = *((_QWORD *)this + 36);
        v17 = v15 - 1;
        v18 = v17 & (v14 ^ (v9 >> 9));
        v19 = (_QWORD *)(v16 + 96 * v18);
        v20 = *v19;
        if (v9 == *v19)
          goto LABEL_18;
        v222 = 0;
        v223 = 1;
        while (v20 != -4096)
        {
          if (v222)
            v224 = 0;
          else
            v224 = v20 == -8192;
          if (v224)
            v222 = v19;
          v225 = v18 + v223++;
          v18 = v225 & v17;
          v19 = (_QWORD *)(v16 + 96 * v18);
          v20 = *v19;
          if (v9 == *v19)
          {
LABEL_18:
            v19[1] = v13;
            v21 = (*(unsigned int (**)(_QWORD, llvm::MachineFunction *))(**(_QWORD **)this + 112))(*(_QWORD *)this, a2);
            v22 = *((_DWORD *)this + 76);
            if (v22)
            {
              v23 = *((_QWORD *)this + 36);
              v24 = v22 - 1;
              v25 = v24 & (v14 ^ (v9 >> 9));
              v26 = (_QWORD *)(v23 + 96 * v25);
              v27 = *v26;
              if (v9 == *v26)
                goto LABEL_20;
              v226 = 0;
              v227 = 1;
              while (v27 != -4096)
              {
                if (v226)
                  v228 = 0;
                else
                  v228 = v27 == -8192;
                if (v228)
                  v226 = v26;
                v229 = v25 + v227++;
                v25 = v229 & v24;
                v26 = (_QWORD *)(v23 + 96 * v25);
                v27 = *v26;
                if (v9 == *v26)
                  goto LABEL_20;
              }
              if (v226)
                v232 = v226;
              else
                v232 = v26;
            }
            else
            {
              v232 = 0;
            }
            v26 = sub_1C558AEF8((_DWORD *)this + 72, &v285, v232);
            *v26 = v9;
            *(_OWORD *)(v26 + 1) = 0u;
            *(_OWORD *)(v26 + 3) = 0u;
            *(_OWORD *)(v26 + 5) = 0u;
            *(_OWORD *)(v26 + 7) = 0u;
            *(_OWORD *)(v26 + 9) = 0u;
            v26[11] = 0;
LABEL_20:
            v278 = v9 >> 4;
            v26[3] = v21;
            v28 = (void **)((char *)this + 160);
            (*(void (**)(void **__return_ptr, _QWORD, llvm::MachineFunction *))(**(_QWORD **)this + 896))(&__src, *(_QWORD *)this, a2);
            v29 = __src;
            if ((void **)((char *)this + 160) != &__src)
            {
              if (__src == v288)
              {
                v30 = v287;
                v31 = *((unsigned int *)this + 42);
                if (v31 >= v287)
                {
                  if ((_DWORD)v287)
                    memmove(*v28, __src, 8 * v287);
                  goto LABEL_25;
                }
                if (*((_DWORD *)this + 43) < v287)
                {
                  *((_DWORD *)this + 42) = 0;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 160, (uint64_t)this + 176, v30, 8);
LABEL_325:
                  v31 = 0;
                }
                else
                {
                  if (!(_DWORD)v31)
                    goto LABEL_325;
                  memmove(*v28, __src, 8 * v31);
                }
                if (v31 != v287)
                  memcpy((char *)*v28 + 8 * v31, (char *)__src + 8 * v31, 8 * v287 - 8 * v31);
LABEL_25:
                *((_DWORD *)this + 42) = v30;
              }
              else
              {
                v230 = (char *)*((_QWORD *)this + 20);
                if (v230 != (char *)this + 176)
                {
                  free(v230);
                  v29 = __src;
                }
                *((_QWORD *)this + 20) = v29;
                *((_QWORD *)this + 21) = v287;
                __src = v288;
                HIDWORD(v287) = 0;
              }
              LODWORD(v287) = 0;
              v29 = __src;
            }
            *((_DWORD *)this + 56) = v289;
            *(_OWORD *)((char *)this + 232) = v290;
            *(_OWORD *)((char *)this + 248) = v291[0];
            *(_OWORD *)((char *)this + 259) = *(_OWORD *)((char *)v291 + 11);
            if (v29 != v288)
LABEL_28:
              free(v29);
LABEL_29:
            v14 = v278;
            goto LABEL_83;
          }
        }
        if (v222)
          v231 = v222;
        else
          v231 = v19;
      }
      else
      {
        v231 = 0;
      }
      v19 = sub_1C558AEF8((_DWORD *)this + 72, &v285, v231);
      *v19 = v9;
      *(_OWORD *)(v19 + 1) = 0u;
      *(_OWORD *)(v19 + 3) = 0u;
      *(_OWORD *)(v19 + 5) = 0u;
      *(_OWORD *)(v19 + 7) = 0u;
      *(_OWORD *)(v19 + 9) = 0u;
      v19[11] = 0;
      goto LABEL_18;
    case 'f':
    case 'j':
      v54 = *((_DWORD *)this + 76);
      if (!v54)
      {
        v258 = 0;
LABEL_417:
        v58 = sub_1C558AEF8((_DWORD *)this + 72, &v285, v258);
        *v58 = v9;
        *(_OWORD *)(v58 + 1) = 0u;
        *(_OWORD *)(v58 + 3) = 0u;
        *(_OWORD *)(v58 + 5) = 0u;
        *(_OWORD *)(v58 + 7) = 0u;
        *(_OWORD *)(v58 + 9) = 0u;
        v58[11] = 0;
        goto LABEL_48;
      }
      v55 = *((_QWORD *)this + 36);
      v56 = v54 - 1;
      v57 = v56 & (v14 ^ (v9 >> 9));
      v58 = (_QWORD *)(v55 + 96 * v57);
      v59 = *v58;
      if (v9 == *v58)
        goto LABEL_48;
      v249 = 0;
      v250 = 1;
      do
      {
        if (v59 == -4096)
        {
          if (v249)
            v258 = v249;
          else
            v258 = v58;
          goto LABEL_417;
        }
        if (v249)
          v251 = 0;
        else
          v251 = v59 == -8192;
        if (v251)
          v249 = v58;
        v252 = v57 + v250++;
        v57 = v252 & v56;
        v58 = (_QWORD *)(v55 + 96 * v57);
        v59 = *v58;
      }
      while (v9 != *v58);
LABEL_48:
      v58[1] = v13;
      v60 = (*(uint64_t (**)(_QWORD, llvm::MachineFunction *))(**(_QWORD **)this + 904))(*(_QWORD *)this, a2);
      v61 = *((_DWORD *)this + 76);
      if (v61)
      {
        v62 = *((_QWORD *)this + 36);
        v63 = v61 - 1;
        v64 = v63 & (v14 ^ (v9 >> 9));
        v65 = (_QWORD *)(v62 + 96 * v64);
        v66 = *v65;
        if (v9 == *v65)
          goto LABEL_50;
        v253 = 0;
        v254 = 1;
        while (v66 != -4096)
        {
          if (v253)
            v255 = 0;
          else
            v255 = v66 == -8192;
          if (v255)
            v253 = v65;
          v256 = v64 + v254++;
          v64 = v256 & v63;
          v65 = (_QWORD *)(v62 + 96 * v64);
          v66 = *v65;
          if (v9 == *v65)
            goto LABEL_50;
        }
        if (v253)
          v259 = v253;
        else
          v259 = v65;
      }
      else
      {
        v259 = 0;
      }
      v65 = sub_1C558AEF8((_DWORD *)this + 72, &v285, v259);
      *v65 = v9;
      *(_OWORD *)(v65 + 1) = 0u;
      *(_OWORD *)(v65 + 3) = 0u;
      *(_OWORD *)(v65 + 5) = 0u;
      *(_OWORD *)(v65 + 7) = 0u;
      *(_OWORD *)(v65 + 9) = 0u;
      v65[11] = 0;
LABEL_50:
      *((_DWORD *)v65 + 8) = v60;
      v67 = (void **)((char *)this + 160);
      (*(void (**)(void **__return_ptr, _QWORD, llvm::MachineFunction *))(**(_QWORD **)this + 896))(&__src, *(_QWORD *)this, a2);
      v68 = __src;
      if ((void **)((char *)this + 160) != &__src)
      {
        if (__src == v288)
        {
          v69 = v287;
          v70 = *((unsigned int *)this + 42);
          if (v70 >= v287)
          {
            if ((_DWORD)v287)
              memmove(*v67, __src, 8 * v287);
            goto LABEL_55;
          }
          if (*((_DWORD *)this + 43) < v287)
          {
            *((_DWORD *)this + 42) = 0;
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 160, (uint64_t)this + 176, v69, 8);
LABEL_408:
            v70 = 0;
          }
          else
          {
            if (!(_DWORD)v70)
              goto LABEL_408;
            memmove(*v67, __src, 8 * v70);
          }
          if (v70 != v287)
            memcpy((char *)*v67 + 8 * v70, (char *)__src + 8 * v70, 8 * v287 - 8 * v70);
LABEL_55:
          *((_DWORD *)this + 42) = v69;
        }
        else
        {
          v257 = (char *)*((_QWORD *)this + 20);
          if (v257 != (char *)this + 176)
          {
            free(v257);
            v68 = __src;
          }
          *((_QWORD *)this + 20) = v68;
          *((_QWORD *)this + 21) = v287;
          __src = v288;
          HIDWORD(v287) = 0;
        }
        LODWORD(v287) = 0;
        v68 = __src;
      }
      *((_DWORD *)this + 56) = v289;
      *(_OWORD *)((char *)this + 232) = v290;
      *(_OWORD *)((char *)this + 248) = v291[0];
      *(_OWORD *)((char *)this + 259) = *(_OWORD *)((char *)v291 + 11);
      if (v68 != v288)
        free(v68);
LABEL_83:
      v95 = *((_QWORD *)this + 29);
      v96 = *((_DWORD *)this + 76);
      if (v96)
      {
        v97 = *((_QWORD *)this + 36);
        v98 = v96 - 1;
        v99 = (v14 ^ (v9 >> 9)) & (v96 - 1);
        v100 = (_QWORD *)(v97 + 96 * v99);
        v101 = *v100;
        if (v9 == *v100)
        {
          v100[6] |= v95;
          v102 = *((_QWORD *)this + 30);
          goto LABEL_86;
        }
        v194 = 0;
        v195 = 1;
        while (v101 != -4096)
        {
          if (v194)
            v196 = 0;
          else
            v196 = v101 == -8192;
          if (v196)
            v194 = v100;
          v197 = v99 + v195++;
          v99 = v197 & v98;
          v100 = (_QWORD *)(v97 + 96 * v99);
          v101 = *v100;
          if (v9 == *v100)
            goto LABEL_289;
        }
        if (v194)
          v218 = v194;
        else
          v218 = v100;
      }
      else
      {
        v218 = 0;
      }
      v100 = sub_1C558AEF8((_DWORD *)this + 72, &v285, v218);
      *v100 = v9;
      *(_OWORD *)(v100 + 1) = 0u;
      *(_OWORD *)(v100 + 3) = 0u;
      *(_OWORD *)(v100 + 5) = 0u;
      *(_OWORD *)(v100 + 7) = 0u;
      *(_OWORD *)(v100 + 9) = 0u;
      v100[11] = 0;
      v97 = *((_QWORD *)this + 36);
      v96 = *((_DWORD *)this + 76);
LABEL_289:
      v100[6] |= v95;
      v102 = *((_QWORD *)this + 30);
      if (v96)
      {
        v98 = v96 - 1;
        v99 = (v14 ^ (v9 >> 9)) & (v96 - 1);
LABEL_86:
        v103 = (_QWORD *)(v97 + 96 * v99);
        v104 = *v103;
        if (v9 == *v103)
        {
          v103[7] |= v102;
          v105 = *((_QWORD *)this + 31);
          goto LABEL_88;
        }
        v162 = 0;
        v163 = 1;
        while (v104 != -4096)
        {
          if (v162)
            v164 = 0;
          else
            v164 = v104 == -8192;
          if (v164)
            v162 = v103;
          v165 = v99 + v163++;
          v99 = v165 & v98;
          v103 = (_QWORD *)(v97 + 96 * v99);
          v104 = *v103;
          if (v9 == *v103)
            goto LABEL_244;
        }
        if (v162)
          v210 = v162;
        else
          v210 = v103;
      }
      else
      {
        v210 = 0;
      }
      v103 = sub_1C558AEF8((_DWORD *)this + 72, &v285, v210);
      *v103 = v9;
      *(_OWORD *)(v103 + 1) = 0u;
      *(_OWORD *)(v103 + 3) = 0u;
      *(_OWORD *)(v103 + 5) = 0u;
      *(_OWORD *)(v103 + 7) = 0u;
      *(_OWORD *)(v103 + 9) = 0u;
      v103[11] = 0;
      v97 = *((_QWORD *)this + 36);
      v96 = *((_DWORD *)this + 76);
LABEL_244:
      v103[7] |= v102;
      v105 = *((_QWORD *)this + 31);
      if (v96)
      {
        v98 = v96 - 1;
        v99 = (v14 ^ (v9 >> 9)) & (v96 - 1);
LABEL_88:
        v106 = (_QWORD *)(v97 + 96 * v99);
        v107 = *v106;
        if (v9 == *v106)
        {
          v106[8] |= v105;
          v108 = *((_QWORD *)this + 32);
          v109 = v285;
          goto LABEL_90;
        }
        v166 = 0;
        v167 = 1;
        while (v107 != -4096)
        {
          if (v166)
            v168 = 0;
          else
            v168 = v107 == -8192;
          if (v168)
            v166 = v106;
          v169 = v99 + v167++;
          v99 = v169 & v98;
          v106 = (_QWORD *)(v97 + 96 * v99);
          v107 = *v106;
          if (v9 == *v106)
            goto LABEL_251;
        }
        if (v166)
          v211 = v166;
        else
          v211 = v106;
        v9 = v285;
      }
      else
      {
        v211 = 0;
      }
      v106 = sub_1C558AEF8((_DWORD *)this + 72, &v285, v211);
      *v106 = v9;
      *(_OWORD *)(v106 + 1) = 0u;
      *(_OWORD *)(v106 + 3) = 0u;
      *(_OWORD *)(v106 + 5) = 0u;
      *(_OWORD *)(v106 + 7) = 0u;
      *(_OWORD *)(v106 + 9) = 0u;
      v106[11] = 0;
      v97 = *((_QWORD *)this + 36);
      v96 = *((_DWORD *)this + 76);
LABEL_251:
      v106[8] |= v105;
      v108 = *((_QWORD *)this + 32);
      v109 = v285;
      if (v96)
      {
        v98 = v96 - 1;
LABEL_90:
        v110 = ((v109 >> 4) ^ (v109 >> 9)) & v98;
        v111 = (_QWORD *)(v97 + 96 * v110);
        v112 = *v111;
        if (v109 == *v111)
        {
          v111[9] |= v108;
          v113 = *((_BYTE *)this + 273);
          goto LABEL_92;
        }
        v170 = 0;
        v171 = 1;
        while (v112 != -4096)
        {
          if (v170)
            v172 = 0;
          else
            v172 = v112 == -8192;
          if (v172)
            v170 = v111;
          v173 = v110 + v171++;
          v110 = v173 & v98;
          v111 = (_QWORD *)(v97 + 96 * v110);
          v112 = *v111;
          if (v109 == *v111)
            goto LABEL_257;
        }
        if (v170)
          v212 = v170;
        else
          v212 = v111;
      }
      else
      {
        v212 = 0;
      }
      v111 = sub_1C558AEF8((_DWORD *)this + 72, &v285, v212);
      *v111 = v109;
      *(_OWORD *)(v111 + 1) = 0u;
      *(_OWORD *)(v111 + 3) = 0u;
      *(_OWORD *)(v111 + 5) = 0u;
      *(_OWORD *)(v111 + 7) = 0u;
      *(_OWORD *)(v111 + 9) = 0u;
      v111[11] = 0;
      v97 = *((_QWORD *)this + 36);
      v96 = *((_DWORD *)this + 76);
LABEL_257:
      v111[9] |= v108;
      v113 = *((_BYTE *)this + 273);
      if (v96)
      {
        v98 = v96 - 1;
        v110 = ((v109 >> 4) ^ (v109 >> 9)) & (v96 - 1);
LABEL_92:
        v114 = (_QWORD *)(v97 + 96 * v110);
        v115 = *v114;
        if (v109 == *v114)
        {
          *((_BYTE *)v114 + 80) |= v113;
          v116 = *((_BYTE *)this + 274);
          goto LABEL_94;
        }
        v174 = 0;
        v175 = 1;
        while (v115 != -4096)
        {
          if (v174)
            v176 = 0;
          else
            v176 = v115 == -8192;
          if (v176)
            v174 = v114;
          v177 = v110 + v175++;
          v110 = v177 & v98;
          v114 = (_QWORD *)(v97 + 96 * v110);
          v115 = *v114;
          if (v109 == *v114)
            goto LABEL_263;
        }
        if (v174)
          v213 = v174;
        else
          v213 = v114;
      }
      else
      {
        v213 = 0;
      }
      v114 = sub_1C558AEF8((_DWORD *)this + 72, &v285, v213);
      *v114 = v109;
      *(_OWORD *)(v114 + 1) = 0u;
      *(_OWORD *)(v114 + 3) = 0u;
      *(_OWORD *)(v114 + 5) = 0u;
      *(_OWORD *)(v114 + 7) = 0u;
      *(_OWORD *)(v114 + 9) = 0u;
      v114[11] = 0;
      v97 = *((_QWORD *)this + 36);
      v96 = *((_DWORD *)this + 76);
LABEL_263:
      *((_BYTE *)v114 + 80) |= v113;
      v116 = *((_BYTE *)this + 274);
      if (v96)
      {
        v98 = v96 - 1;
        v110 = ((v109 >> 4) ^ (v109 >> 9)) & (v96 - 1);
LABEL_94:
        v117 = (_QWORD *)(v97 + 96 * v110);
        v118 = *v117;
        if (v109 == *v117)
        {
          *((_BYTE *)v117 + 81) |= v116;
          v119 = *((_DWORD *)this + 66);
          goto LABEL_96;
        }
        v178 = 0;
        v179 = 1;
        while (v118 != -4096)
        {
          if (v178)
            v180 = 0;
          else
            v180 = v118 == -8192;
          if (v180)
            v178 = v117;
          v181 = v110 + v179++;
          v110 = v181 & v98;
          v117 = (_QWORD *)(v97 + 96 * v110);
          v118 = *v117;
          if (v109 == *v117)
            goto LABEL_269;
        }
        if (v178)
          v214 = v178;
        else
          v214 = v117;
      }
      else
      {
        v214 = 0;
      }
      v117 = sub_1C558AEF8((_DWORD *)this + 72, &v285, v214);
      *v117 = v109;
      *(_OWORD *)(v117 + 1) = 0u;
      *(_OWORD *)(v117 + 3) = 0u;
      *(_OWORD *)(v117 + 5) = 0u;
      *(_OWORD *)(v117 + 7) = 0u;
      *(_OWORD *)(v117 + 9) = 0u;
      v117[11] = 0;
      v97 = *((_QWORD *)this + 36);
      v96 = *((_DWORD *)this + 76);
LABEL_269:
      *((_BYTE *)v117 + 81) |= v116;
      v119 = *((_DWORD *)this + 66);
      if (v96)
      {
        v98 = v96 - 1;
        v110 = ((v109 >> 4) ^ (v109 >> 9)) & (v96 - 1);
LABEL_96:
        v120 = (_QWORD *)(v97 + 96 * v110);
        v121 = *v120;
        if (v109 == *v120)
        {
          *((_DWORD *)v120 + 21) += v119;
          v122 = *((_BYTE *)this + 272);
          goto LABEL_98;
        }
        v182 = 0;
        v183 = 1;
        while (v121 != -4096)
        {
          if (v182)
            v184 = 0;
          else
            v184 = v121 == -8192;
          if (v184)
            v182 = v120;
          v185 = v110 + v183++;
          v110 = v185 & v98;
          v120 = (_QWORD *)(v97 + 96 * v110);
          v121 = *v120;
          if (v109 == *v120)
            goto LABEL_275;
        }
        if (v182)
          v215 = v182;
        else
          v215 = v120;
      }
      else
      {
        v215 = 0;
      }
      v120 = sub_1C558AEF8((_DWORD *)this + 72, &v285, v215);
      *v120 = v109;
      *(_OWORD *)(v120 + 1) = 0u;
      *(_OWORD *)(v120 + 3) = 0u;
      *(_OWORD *)(v120 + 5) = 0u;
      *(_OWORD *)(v120 + 7) = 0u;
      *(_OWORD *)(v120 + 9) = 0u;
      v120[11] = 0;
      v97 = *((_QWORD *)this + 36);
      v96 = *((_DWORD *)this + 76);
LABEL_275:
      *((_DWORD *)v120 + 21) += v119;
      v122 = *((_BYTE *)this + 272);
      if (!v96)
      {
        v216 = 0;
LABEL_280:
        v123 = sub_1C558AEF8((_DWORD *)this + 72, &v285, v216);
        *v123 = v109;
        *(_OWORD *)(v123 + 1) = 0u;
        *(_OWORD *)(v123 + 3) = 0u;
        *(_OWORD *)(v123 + 5) = 0u;
        *(_OWORD *)(v123 + 7) = 0u;
        *(_OWORD *)(v123 + 9) = 0u;
        v123[11] = 0;
        goto LABEL_99;
      }
      v98 = v96 - 1;
      v110 = ((v109 >> 4) ^ (v109 >> 9)) & (v96 - 1);
LABEL_98:
      v123 = (_QWORD *)(v97 + 96 * v110);
      v124 = *v123;
      if (v109 != *v123)
      {
        v186 = 0;
        v187 = 1;
        while (v124 != -4096)
        {
          if (v186)
            v188 = 0;
          else
            v188 = v124 == -8192;
          if (v188)
            v186 = v123;
          v189 = v110 + v187++;
          v110 = v189 & v98;
          v123 = (_QWORD *)(v97 + 96 * v110);
          v124 = *v123;
          if (v109 == *v123)
            goto LABEL_99;
        }
        if (v186)
          v216 = v186;
        else
          v216 = v123;
        goto LABEL_280;
      }
LABEL_99:
      *((_BYTE *)v123 + 88) |= v122;
      v125 = *(unsigned __int16 *)(*(_QWORD *)a2 + 18);
      if ((v125 & 0x3FF0) != 0x640 && ((v125 >> 4) & 0x3FF) - 109 >= 0xFFFFFFF7)
        (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v8 + 8))(v8, 10, *((unsigned int *)this + 67), 1, 0, 1, 1);
      __src = "agx.asm_statistics";
      v288[8] = 259;
      if (llvm::Module::getNamedMetadata(v10, (uint64_t)&__src)
        || (v282 = "agx.compiler_counters", v283 = 259, llvm::Module::getNamedMetadata(v10, (uint64_t)&v282))
        || (v280 = "agx.telemetry_statistics", v281 = 259, llvm::Module::getNamedMetadata(v10, (uint64_t)&v280)))
      {
        (***(void (****)(_QWORD, llvm::MachineFunction *, const llvm::MachineLoopInfo *, uint64_t))this)(*(_QWORD *)this, a2, a3, v10 + 272);
      }
      if ((v279 & 0x1E) == 0x1C)
        (*(void (**)(_QWORD, llvm::MachineFunction *))(**(_QWORD **)this + 880))(*(_QWORD *)this, a2);
      v127 = (*(uint64_t (**)(_QWORD, llvm::MachineFunction *))(**(_QWORD **)this + 104))(*(_QWORD *)this, a2);
      v128 = *((_DWORD *)this + 76);
      v129 = v109 >> 4;
      if (v128)
      {
        v130 = *((_QWORD *)this + 36);
        v131 = v128 - 1;
        v132 = (v129 ^ (v109 >> 9)) & (v128 - 1);
        v133 = (_QWORD *)(v130 + 96 * v132);
        v134 = *v133;
        if (v109 == *v133)
        {
          *((_BYTE *)v133 + 89) |= v127;
          v135 = *(_QWORD *)this;
          goto LABEL_114;
        }
        v198 = 0;
        v199 = 1;
        while (v134 != -4096)
        {
          if (v198)
            v200 = 0;
          else
            v200 = v134 == -8192;
          if (v200)
            v198 = v133;
          v201 = v132 + v199++;
          v132 = v201 & v131;
          v133 = (_QWORD *)(v130 + 96 * v132);
          v134 = *v133;
          if (v109 == *v133)
            goto LABEL_295;
        }
        if (v198)
          v219 = v198;
        else
          v219 = v133;
      }
      else
      {
        v219 = 0;
      }
      v133 = sub_1C558AEF8((_DWORD *)this + 72, &v285, v219);
      *v133 = v109;
      *(_OWORD *)(v133 + 1) = 0u;
      *(_OWORD *)(v133 + 3) = 0u;
      *(_OWORD *)(v133 + 5) = 0u;
      *(_OWORD *)(v133 + 7) = 0u;
      *(_OWORD *)(v133 + 9) = 0u;
      v133[11] = 0;
      v130 = *((_QWORD *)this + 36);
      v128 = *((_DWORD *)this + 76);
LABEL_295:
      *((_BYTE *)v133 + 89) |= v127;
      v135 = *(_QWORD *)this;
      if (!v128)
      {
        v217 = 0;
LABEL_284:
        v136 = sub_1C558AEF8((_DWORD *)this + 72, &v285, v217);
        *v136 = v109;
        *(_OWORD *)(v136 + 1) = 0u;
        *(_OWORD *)(v136 + 3) = 0u;
        *(_OWORD *)(v136 + 5) = 0u;
        *(_OWORD *)(v136 + 7) = 0u;
        *(_OWORD *)(v136 + 9) = 0u;
        v136[11] = 0;
        goto LABEL_115;
      }
      v131 = v128 - 1;
      v132 = (v129 ^ (v109 >> 9)) & (v128 - 1);
LABEL_114:
      v136 = (_QWORD *)(v130 + 96 * v132);
      v137 = *v136;
      if (v109 != *v136)
      {
        v190 = 0;
        v191 = 1;
        while (v137 != -4096)
        {
          if (v190)
            v192 = 0;
          else
            v192 = v137 == -8192;
          if (v192)
            v190 = v136;
          v193 = v132 + v191++;
          v132 = v193 & v131;
          v136 = (_QWORD *)(v130 + 96 * v132);
          v137 = *v136;
          if (v109 == *v136)
            goto LABEL_115;
        }
        if (v190)
          v217 = v190;
        else
          v217 = v136;
        goto LABEL_284;
      }
LABEL_115:
      v138 = (*(uint64_t (**)(uint64_t, llvm::MachineFunction *, _QWORD))(*(_QWORD *)v135 + 232))(v135, a2, (2 * *((_DWORD *)v136 + 2)));
      v139 = *((_DWORD *)this + 76);
      v140 = v285;
      v141 = v285 >> 4;
      if (v139)
      {
        v142 = *((_QWORD *)this + 36);
        v143 = v139 - 1;
        v144 = (v141 ^ (v285 >> 9)) & v143;
        v145 = (_QWORD *)(v142 + 96 * v144);
        v146 = *v145;
        if (v285 == *v145)
          goto LABEL_117;
        v202 = 0;
        v203 = 1;
        while (v146 != -4096)
        {
          if (v202)
            v204 = 0;
          else
            v204 = v146 == -8192;
          if (v204)
            v202 = v145;
          v205 = v144 + v203++;
          v144 = v205 & v143;
          v145 = (_QWORD *)(v142 + 96 * v144);
          v146 = *v145;
          if (v285 == *v145)
            goto LABEL_117;
        }
        if (v202)
          v220 = v202;
        else
          v220 = v145;
      }
      else
      {
        v220 = 0;
      }
      v145 = sub_1C558AEF8((_DWORD *)this + 72, &v285, v220);
      *v145 = v140;
      *(_OWORD *)(v145 + 1) = 0u;
      *(_OWORD *)(v145 + 3) = 0u;
      *(_OWORD *)(v145 + 5) = 0u;
      *(_OWORD *)(v145 + 7) = 0u;
      *(_OWORD *)(v145 + 9) = 0u;
      v145[11] = 0;
LABEL_117:
      *(_QWORD *)((char *)v145 + 36) = v138;
      v147 = (*(uint64_t (**)(_QWORD, llvm::MachineFunction *))(**(_QWORD **)this + 968))(*(_QWORD *)this, a2);
      v148 = *((_DWORD *)this + 76);
      if (!v148)
      {
        v221 = 0;
LABEL_304:
        v152 = sub_1C558AEF8((_DWORD *)this + 72, &v285, v221);
        *v152 = v140;
        *(_OWORD *)(v152 + 1) = 0u;
        *(_OWORD *)(v152 + 3) = 0u;
        *(_OWORD *)(v152 + 5) = 0u;
        *(_OWORD *)(v152 + 7) = 0u;
        *(_OWORD *)(v152 + 9) = 0u;
        v152[11] = 0;
        goto LABEL_119;
      }
      v149 = *((_QWORD *)this + 36);
      v150 = v148 - 1;
      v151 = (v141 ^ (v140 >> 9)) & v150;
      v152 = (_QWORD *)(v149 + 96 * v151);
      v153 = *v152;
      if (v140 != *v152)
      {
        v206 = 0;
        v207 = 1;
        while (v153 != -4096)
        {
          if (v206)
            v208 = 0;
          else
            v208 = v153 == -8192;
          if (v208)
            v206 = v152;
          v209 = v151 + v207++;
          v151 = v209 & v150;
          v152 = (_QWORD *)(v149 + 96 * v151);
          v153 = *v152;
          if (v140 == *v152)
            goto LABEL_119;
        }
        if (v206)
          v221 = v206;
        else
          v221 = v152;
        goto LABEL_304;
      }
LABEL_119:
      *((_BYTE *)v152 + 90) = v147;
      v154 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v8 + 600))(v8, v140);
      if (v154)
      {
        v155 = v154;
        v156 = (_DWORD *)((char *)this + 8);
        __src = 0;
        if ((sub_1C558B184((uint64_t)this + 8, v154, &__src) & 1) == 0)
        {
          v157 = *v156 >> 1;
          if ((*v156 & 1) != 0)
            v158 = 8;
          else
            v158 = *((_DWORD *)this + 6);
          if (4 * v157 + 4 >= 3 * v158)
          {
            v158 *= 2;
          }
          else if (v158 + ~v157 - *((_DWORD *)this + 3) > v158 >> 3)
          {
            goto LABEL_126;
          }
          sub_1C558B228((uint64_t)this + 8, v158);
          __src = 0;
          sub_1C558B184((uint64_t)this + 8, v155, &__src);
LABEL_126:
          v159 = __src;
          *v156 += 2;
          if (*v159 != -4096)
            --*((_DWORD *)this + 3);
          *v159 = v155;
          v160 = *((unsigned int *)this + 22);
          if (v160 >= *((_DWORD *)this + 23))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 80, (uint64_t)this + 96, v160 + 1, 8);
            LODWORD(v160) = *((_DWORD *)this + 22);
          }
          *(_QWORD *)(*((_QWORD *)this + 10) + 8 * v160) = v155;
          ++*((_DWORD *)this + 22);
        }
      }
      return 0;
    case 'i':
      v71 = *((_DWORD *)this + 76);
      if (v71)
      {
        v72 = *((_QWORD *)this + 36);
        v73 = v71 - 1;
        v74 = v73 & (v14 ^ (v9 >> 9));
        v75 = (_QWORD *)(v72 + 96 * v74);
        v76 = *v75;
        if (v9 == *v75)
          goto LABEL_62;
        v260 = 0;
        v261 = 1;
        while (v76 != -4096)
        {
          if (v260)
            v262 = 0;
          else
            v262 = v76 == -8192;
          if (v262)
            v260 = v75;
          v263 = v74 + v261++;
          v74 = v263 & v73;
          v75 = (_QWORD *)(v72 + 96 * v74);
          v76 = *v75;
          if (v9 == *v75)
          {
LABEL_62:
            v277 = v10;
            v278 = v9 >> 4;
            v77 = a3;
            v78 = v8;
            v75[1] = v13;
            v79 = (void **)((char *)this + 160);
            (*(void (**)(void **__return_ptr, _QWORD, llvm::MachineFunction *))(**(_QWORD **)this + 896))(&__src, *(_QWORD *)this, a2);
            v29 = __src;
            if ((void **)((char *)this + 160) == &__src)
            {
              a3 = v77;
            }
            else
            {
              if (__src == v288)
              {
                v80 = v287;
                v81 = *((unsigned int *)this + 42);
                if (v81 >= v287)
                {
                  if ((_DWORD)v287)
                    memmove(*v79, __src, 8 * v287);
                  goto LABEL_67;
                }
                if (*((_DWORD *)this + 43) < v287)
                {
                  *((_DWORD *)this + 42) = 0;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)this + 160, (uint64_t)this + 176, v80, 8);
LABEL_451:
                  v81 = 0;
                }
                else
                {
                  if (!(_DWORD)v81)
                    goto LABEL_451;
                  memmove(*v79, __src, 8 * v81);
                }
                if (v81 != v287)
                  memcpy((char *)*v79 + 8 * v81, (char *)__src + 8 * v81, 8 * v287 - 8 * v81);
LABEL_67:
                *((_DWORD *)this + 42) = v80;
                v8 = v78;
              }
              else
              {
                v272 = (char *)*((_QWORD *)this + 20);
                if (v272 != (char *)this + 176)
                {
                  free(v272);
                  v29 = __src;
                }
                *((_QWORD *)this + 20) = v29;
                *((_QWORD *)this + 21) = v287;
                __src = v288;
                HIDWORD(v287) = 0;
              }
              LODWORD(v287) = 0;
              v29 = __src;
              a3 = v77;
            }
            *((_DWORD *)this + 56) = v289;
            *(_OWORD *)((char *)this + 232) = v290;
            *(_OWORD *)((char *)this + 248) = v291[0];
            *(_OWORD *)((char *)this + 259) = *(_OWORD *)((char *)v291 + 11);
            v10 = v277;
            if (v29 != v288)
              goto LABEL_28;
            goto LABEL_29;
          }
        }
        if (v260)
          v273 = v260;
        else
          v273 = v75;
      }
      else
      {
        v273 = 0;
      }
      v75 = sub_1C558AEF8((_DWORD *)this + 72, &v285, v273);
      *v75 = v9;
      *(_OWORD *)(v75 + 1) = 0u;
      *(_OWORD *)(v75 + 3) = 0u;
      *(_OWORD *)(v75 + 5) = 0u;
      *(_OWORD *)(v75 + 7) = 0u;
      *(_OWORD *)(v75 + 9) = 0u;
      v75[11] = 0;
      goto LABEL_62;
    case 'k':
      v89 = *((_DWORD *)this + 76);
      if (v89)
      {
        v90 = *((_QWORD *)this + 36);
        v91 = v89 - 1;
        v92 = v91 & (v14 ^ (v9 >> 9));
        v93 = (_QWORD *)(v90 + 96 * v92);
        v94 = *v93;
        if (v9 == *v93)
          goto LABEL_82;
        v268 = 0;
        v269 = 1;
        while (v94 != -4096)
        {
          if (v268)
            v270 = 0;
          else
            v270 = v94 == -8192;
          if (v270)
            v268 = v93;
          v271 = v92 + v269++;
          v92 = v271 & v91;
          v93 = (_QWORD *)(v90 + 96 * v92);
          v94 = *v93;
          if (v9 == *v93)
          {
LABEL_82:
            v93[1] = v13;
            goto LABEL_83;
          }
        }
        if (v268)
          v275 = v268;
        else
          v275 = v93;
      }
      else
      {
        v275 = 0;
      }
      v93 = sub_1C558AEF8((_DWORD *)this + 72, &v285, v275);
      *v93 = v9;
      *(_OWORD *)(v93 + 1) = 0u;
      *(_OWORD *)(v93 + 3) = 0u;
      *(_OWORD *)(v93 + 5) = 0u;
      *(_OWORD *)(v93 + 7) = 0u;
      *(_OWORD *)(v93 + 9) = 0u;
      v93[11] = 0;
      goto LABEL_82;
    default:
      goto LABEL_30;
  }
}

const char *llvm::GPUMetadataEmitter::processFunctionGroup(llvm::GPUMetadataEmitter *this, llvm::Module *a2, llvm::FunctionGroup *a3, llvm::MCContext *a4, llvm::MCStreamer *a5)
{
  uint64_t i;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned int v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t j;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  unsigned int v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  BOOL v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  int v38;
  llvm::Function *v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  const llvm::DataLayout *v48;
  unsigned __int16 *v49;
  const char *v50;
  uint64_t v51;
  int v52;
  uint64_t v53;
  int v54;
  unsigned int v55;
  _QWORD *v56;
  uint64_t v57;
  int8x16_t v58;
  _QWORD *v59;
  int v60;
  BOOL v61;
  unsigned int v62;
  _QWORD *v63;
  uint64_t v65;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  uint64_t v72;
  uint64_t v73;
  int v74;
  char v75;
  char v76;
  __int128 v77;
  __int128 v78;
  __int16 v79;
  _DWORD v80[3];
  uint64_t v81;

  v81 = *MEMORY[0x1E0C80C00];
  if (!(**(unsigned int (***)(llvm::FunctionGroup *, uint64_t, _QWORD, uint64_t, uint64_t))a3)(a3, 11, 0, 1, 4)&& !(**(unsigned int (***)(llvm::FunctionGroup *, uint64_t, _QWORD, uint64_t, uint64_t))a3)(a3, 18, 0, 1, 4))
  {
    goto LABEL_73;
  }
  v71 = 1;
  for (i = 8; i != 72; i += 16)
    *(unint64_t *)((char *)&v71 + i) = -4096;
  v8 = (*(uint64_t (**)(llvm::FunctionGroup *))(*(_QWORD *)a3 + 568))(a3);
  v9 = (*(uint64_t (**)(llvm::FunctionGroup *))(*(_QWORD *)a3 + 568))(a3);
  sub_1C611A8F4(&v68, *(_QWORD *)(v9 + 40));
  (*(void (**)(uint64_t *__return_ptr, llvm::FunctionGroup *))(*(_QWORD *)a3 + 72))(&v70, a3);
  (*(void (**)(uint64_t *__return_ptr, llvm::FunctionGroup *))(*(_QWORD *)a3 + 80))(&v69, a3);
  v11 = v69;
  v10 = v70;
  if (v70)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v70 + 16))(&v70, v70);
    v12 = v70;
  }
  else
  {
    v12 = 0;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v11 + 16))(&v70, v11);
  v13 = v70;
  v14 = 0;
  while (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v12 + 24))(v12, v13) & 1) == 0)
  {
    v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v12 + 32))(v12);
    v22 = *(_QWORD *)v21;
    if ((*(_WORD *)(*(_QWORD *)v21 + 18) & 0x3FF0) != 0x640 && !sub_1C611A970((uint64_t)&v68, v22))
    {
      v23 = v22 + 72;
      for (j = *(_QWORD *)(v22 + 80); j != v23; j = *(_QWORD *)(j + 8))
      {
        v25 = j - 24;
        if (!j)
          v25 = 0;
        v26 = v25 + 40;
        v27 = *(_QWORD *)(v25 + 48);
        if (v27 != v26)
        {
          while (1)
          {
            v28 = v27 - 24;
            if (v27)
            {
              v29 = *(unsigned __int8 *)(v27 - 8);
              if (v29 >= 0x1C)
              {
                if (v29 == 33)
                {
                  v30 = v28 & 0xFFFFFFFFFFFFFFFBLL;
                }
                else
                {
                  if (v29 != 84)
                    goto LABEL_39;
                  v30 = v28 | 4;
                }
                if (v30 >= 8)
                {
                  v31 = v30 & 0xFFFFFFFFFFFFFFF8;
                  v34 = (v30 & 4) == 0;
                  v32 = -32;
                  if (v34)
                    v32 = -96;
                  v33 = *(_QWORD *)(v31 + v32);
                  v34 = v33 && *(_BYTE *)(v33 + 16) == 0;
                  if (!v34)
                  {
                    v38 = 1;
                    goto LABEL_49;
                  }
                }
              }
            }
LABEL_39:
            v27 = *(_QWORD *)(v27 + 8);
            v35 = j - 24;
            if (!j)
              v35 = 0;
            v36 = v35 + 40;
            while (v27 == v36)
            {
              j = *(_QWORD *)(j + 8);
              if (j == v23)
                goto LABEL_48;
              v37 = j - 24;
              if (!j)
                v37 = 0;
              v36 = v37 + 40;
              v27 = *(_QWORD *)(v37 + 48);
            }
            if (j == v23)
              goto LABEL_48;
          }
        }
      }
LABEL_48:
      v38 = 0;
LABEL_49:
      v14 += v38;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v12 + 40))(v12);
  }
  if (v13)
    (*(void (**)(uint64_t))(*(_QWORD *)v13 + 8))(v13);
  (*(void (**)(uint64_t))(*(_QWORD *)v12 + 8))(v12);
  (*(void (**)(uint64_t))(*(_QWORD *)v11 + 8))(v11);
  if (v10)
    (*(void (**)(uint64_t))(*(_QWORD *)v10 + 8))(v10);
  if (v14)
  {
    (*(void (**)(uint64_t *__return_ptr, llvm::FunctionGroup *))(*(_QWORD *)a3 + 72))(&v70, a3);
    (*(void (**)(uint64_t *__return_ptr, llvm::FunctionGroup *))(*(_QWORD *)a3 + 80))(&v69, a3);
    v15 = v69;
    v16 = v70;
    if (v70)
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v70 + 16))(&v70, v70);
      v17 = v70;
    }
    else
    {
      v17 = 0;
    }
    v65 = v15;
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v15 + 16))(&v70, v15);
    v18 = v70;
    if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 24))(v17, v70) & 1) != 0)
    {
      v19 = 0;
      v20 = 0;
    }
    else
    {
      v20 = 0;
      v19 = 0;
      do
      {
        v39 = *(llvm::Function **)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v17 + 32))(v17);
        if (v39 != (llvm::Function *)v8
          && (*((_WORD *)v39 + 9) & 0x3FF0) != 0x640
          && !sub_1C611A970((uint64_t)&v68, (uint64_t)v39)
          && llvm::Function::hasAddressTaken(v39, 0, 0, 1, 0, 0))
        {
          v40 = sub_1C55888CC((uint64_t)a3, (uint64_t)v39, (uint64_t)&v71);
          if (v19 <= v40)
            v19 = v40;
          if (v20 <= HIDWORD(v40))
            v20 = HIDWORD(v40);
        }
        (*(void (**)(uint64_t))(*(_QWORD *)v17 + 40))(v17);
      }
      while (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v17 + 24))(v17, v18) & 1) == 0);
    }
    if (v18)
      (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
    (*(void (**)(uint64_t))(*(_QWORD *)v17 + 8))(v17);
    (*(void (**)(uint64_t))(*(_QWORD *)v65 + 8))(v65);
    if (v16)
      (*(void (**)(uint64_t))(*(_QWORD *)v16 + 8))(v16);
  }
  else
  {
    v19 = 0;
    v20 = 0;
  }
  v41 = sub_1C55888CC((uint64_t)a3, v8, (uint64_t)&v71);
  v42 = v41 + v19 * v14;
  v43 = HIDWORD(v41) + v20 * v14;
  if ((v71 & 1) == 0)
    MEMORY[0x1CAA32FB4](v72, 8);
  if (v42 < (**(unsigned int (***)(llvm::FunctionGroup *, uint64_t, _QWORD, uint64_t, uint64_t))a3)(a3, 11, 0, 1, 4))
  {
    (*(void (**)(llvm::FunctionGroup *, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a3 + 8))(a3, 11, 0, 1, 0, 1, 0);
    (*(void (**)(llvm::FunctionGroup *, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a3 + 8))(a3, 11, v42, 1, 0, 1, 3);
  }
  if (v43 < (**(unsigned int (***)(llvm::FunctionGroup *, uint64_t, _QWORD, uint64_t, uint64_t))a3)(a3, 18, 0, 1, 4))
  {
    (*(void (**)(llvm::FunctionGroup *, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a3 + 8))(a3, 18, 0, 1, 0, 1, 0);
    (*(void (**)(llvm::FunctionGroup *, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)a3 + 8))(a3, 18, v43, 1, 0, 1, 3);
  }
LABEL_73:
  v71 = 0;
  LOBYTE(v72) = 0;
  BYTE4(v72) = 0;
  v73 = 0;
  v74 = 0;
  v75 = 0;
  v76 = 0;
  v77 = 0u;
  v78 = 0u;
  v79 = 0;
  v80[0] = 0;
  *(_DWORD *)((char *)v80 + 3) = 0;
  (*(void (**)(uint64_t *__return_ptr, llvm::FunctionGroup *))(*(_QWORD *)a3 + 72))(&v70, a3);
  (*(void (**)(uint64_t *__return_ptr, llvm::FunctionGroup *))(*(_QWORD *)a3 + 80))(&v69, a3);
  v45 = v69;
  v44 = v70;
  if (v70)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v70 + 16))(&v70, v70);
    v46 = v70;
    v70 = 0;
  }
  else
  {
    v46 = 0;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v45 + 16))(&v70, v45);
  v47 = v70;
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v46 + 24))(v46, v70) & 1) == 0)
  {
    while (1)
    {
      v51 = *(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v46 + 32))(v46);
      v70 = v51;
      v52 = *((_DWORD *)this + 76);
      if (!v52)
        break;
      v53 = *((_QWORD *)this + 36);
      v54 = v52 - 1;
      v55 = ((v51 >> 4) ^ (v51 >> 9)) & v54;
      v56 = (_QWORD *)(v53 + 96 * v55);
      v57 = *v56;
      if (v51 != *v56)
      {
        v59 = 0;
        v60 = 1;
        while (v57 != -4096)
        {
          if (v59)
            v61 = 0;
          else
            v61 = v57 == -8192;
          if (v61)
            v59 = v56;
          v62 = v55 + v60++;
          v55 = v62 & v54;
          v56 = (_QWORD *)(v53 + 96 * v55);
          v57 = *v56;
          if (v51 == *v56)
            goto LABEL_86;
        }
        if (v59)
          v63 = v59;
        else
          v63 = v56;
        goto LABEL_100;
      }
LABEL_86:
      v58 = llvm::FunctionStats::combine(&v71, v56 + 1);
      (*(void (**)(uint64_t, int8x16_t))(*(_QWORD *)v46 + 40))(v46, v58);
      if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v46 + 24))(v46, v47) & 1) != 0)
        goto LABEL_76;
    }
    v63 = 0;
LABEL_100:
    v56 = sub_1C558AEF8((_DWORD *)this + 72, &v70, v63);
    *v56 = v51;
    *(_OWORD *)(v56 + 1) = 0u;
    *(_OWORD *)(v56 + 3) = 0u;
    *(_OWORD *)(v56 + 5) = 0u;
    *(_OWORD *)(v56 + 7) = 0u;
    *(_OWORD *)(v56 + 9) = 0u;
    v56[11] = 0;
    goto LABEL_86;
  }
LABEL_76:
  if (v47)
    (*(void (**)(uint64_t))(*(_QWORD *)v47 + 8))(v47);
  (*(void (**)(uint64_t))(*(_QWORD *)v46 + 8))(v46);
  (*(void (**)(uint64_t))(*(_QWORD *)v45 + 8))(v45);
  if (v44)
    (*(void (**)(uint64_t))(*(_QWORD *)v44 + 8))(v44);
  (*(void (**)(_QWORD, unint64_t *, llvm::FunctionGroup *))(**(_QWORD **)this + 944))(*(_QWORD *)this, &v71, a3);
  v49 = (unsigned __int16 *)(*(uint64_t (**)(llvm::FunctionGroup *))(*(_QWORD *)a3 + 568))(a3);
  if (((v49[9] >> 4) & 0x3FFu) <= 0x63)
  {
LABEL_102:
    llvm::GPUMetadataEmitter::EmitHelperMetadata((uint64_t *)this, (uint64_t)v48, (_QWORD **)a3, (uint64_t)v49, (uint64_t)&v71, (uint64_t)a4, a5);
    v50 = "__helpers";
  }
  else
  {
    v50 = 0;
    switch((v49[9] >> 4) & 0x3FF)
    {
      case 'd':
      case 'i':
        break;
      case 'e':
      case 'g':
      case 'h':
      case 'l':
        llvm::GPUMetadataEmitter::EmitFragmentMetadata((uint64_t *)this, (uint64_t)v48, (uint64_t)a3, (uint64_t)v49, (uint64_t)&v71, (uint64_t)a4, a5);
        goto LABEL_83;
      case 'f':
        llvm::GPUMetadataEmitter::EmitVertexMetadata((uint64_t *)this, (uint64_t)v48, (uint64_t)a3, (uint64_t)v49, (uint64_t)&v71, (uint64_t)a4, a5);
        v50 = "__vertex";
        break;
      case 'j':
        llvm::GPUMetadataEmitter::EmitComputeMetadata((uint64_t *)this, (uint64_t)v48, (uint64_t)a3, (uint64_t)v49, (uint64_t)&v71, (uint64_t)a4, a5);
        v50 = "__compute";
        break;
      case 'k':
        llvm::GPUMetadataEmitter::EmitDriverShaderMetadata(this, v48, a3, (const llvm::Function *)v49, a4, a5);
LABEL_83:
        v50 = "__fragment";
        break;
      default:
        goto LABEL_102;
    }
  }
  llvm::GPUMetadataEmitter::EmitVIDMAListMetadata(this, a3, a4, a5);
  llvm::GPUMetadataEmitter::EmitStatsMetadata(this, (uint64_t)a3, (uint64_t)v49, (int *)&v71, (uint64_t)a4, (uint64_t)a5);
  return v50;
}

int8x16_t llvm::FunctionStats::combine(unint64_t *a1, unint64_t *a2)
{
  unint64_t v2;
  unint64_t v3;
  unsigned int v4;
  float v5;
  int8x16_t result;

  v2 = *a1;
  if (*a1 <= *a2)
    v2 = *a2;
  *a1 = v2;
  if (!*((_BYTE *)a2 + 12))
    a1[1] = a2[1];
  v3 = a1[2];
  if (v3 <= a2[2])
    v3 = a2[2];
  a1[2] = v3;
  v4 = *((_DWORD *)a1 + 6);
  if (v4 <= *((_DWORD *)a2 + 6))
    v4 = *((_DWORD *)a2 + 6);
  *((_DWORD *)a1 + 6) = v4;
  if (*((_BYTE *)a1 + 32))
  {
    if (*((_BYTE *)a2 + 32))
    {
      v5 = *((float *)a2 + 7);
      if (v5 >= *((float *)a1 + 7))
        v5 = *((float *)a1 + 7);
      *((float *)a1 + 7) = v5;
    }
  }
  else if (*((_BYTE *)a2 + 32))
  {
    *((_DWORD *)a1 + 7) = *((_DWORD *)a2 + 7);
    *((_BYTE *)a1 + 32) = 1;
  }
  *(int8x16_t *)(a1 + 5) = vorrq_s8(*(int8x16_t *)(a1 + 5), *(int8x16_t *)(a2 + 5));
  result = vorrq_s8(*(int8x16_t *)(a1 + 7), *(int8x16_t *)(a2 + 7));
  *(int8x16_t *)(a1 + 7) = result;
  *((_BYTE *)a1 + 72) |= *((_BYTE *)a2 + 72);
  *((_BYTE *)a1 + 73) |= *((_BYTE *)a2 + 73);
  *((_DWORD *)a1 + 19) += *((_DWORD *)a2 + 19);
  *((_BYTE *)a1 + 80) |= *((_BYTE *)a2 + 80);
  *((_BYTE *)a1 + 81) |= *((_BYTE *)a2 + 81);
  *((_BYTE *)a1 + 82) |= *((_BYTE *)a2 + 82);
  return result;
}

const char *llvm::GPUMetadataEmitter::EmitHelperMetadata(uint64_t *a1, uint64_t a2, _QWORD **a3, uint64_t a4, uint64_t a5, uint64_t a6, llvm::MCStreamer *a7)
{
  uint64_t v13;
  uint64_t v14;
  char v15;
  int v16;
  int v17;
  __int16 v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  unsigned int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t v26;
  unint64_t v27;
  uint64_t v28;
  uint64_t v29;
  int v30;
  BOOL v31;
  int v32;
  uint64_t v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  int v37;
  BOOL v38;
  int v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  BOOL v45;
  int v46;
  uint64_t v47;
  unint64_t v48;
  uint64_t v49;
  uint64_t v50;
  int v51;
  BOOL v52;
  int v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  char v59;
  unsigned int v60;
  uint64_t v61;
  char v62;
  int v63;
  __int16 v64;
  __int16 v65;
  __int16 v66;
  int v67;
  int v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  unint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  int v78;
  int v79;
  uint64_t v81;
  int v82;
  uint64_t v83;
  llvm::MCStreamer *v84;
  uint64_t *v85;
  int v86;
  std::string __dst;
  uint64_t v88;
  char v89;
  __int128 v90;
  __int128 v91;
  __int128 v92;
  uint64_t v93;
  unint64_t v94;
  __int16 v95;
  uint64_t v96;
  uint64_t *v97;
  unsigned int v98;
  _QWORD v99[6];

  v99[4] = *MEMORY[0x1E0C80C00];
  v13 = *(_QWORD *)(a4 + 40);
  v88 = 0;
  v89 = 0;
  v90 = xmmword_1C865F170;
  v91 = 0u;
  v92 = 0u;
  v93 = 0;
  v94 = 1;
  v95 = 256;
  v96 = 0;
  if (*(char *)(v13 + 239) < 0)
    sub_1C47EBC30(&__dst, *(void **)(v13 + 216), *(_QWORD *)(v13 + 224));
  else
    __dst = *(std::string *)(v13 + 216);
  v14 = std::string::compare(&__dst, 0, 4uLL, "agx1");
  if ((_DWORD)v14)
  {
    v14 = std::string::compare(&__dst, 0, 4uLL, "agx2");
    if ((_DWORD)v14)
    {
      v14 = std::string::compare(&__dst, 0, 4uLL, "agx3");
      if ((_DWORD)v14)
        v15 = 0;
      else
        v15 = 29;
    }
    else
    {
      v15 = 28;
    }
  }
  else
  {
    v15 = 27;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  if (*(_DWORD *)(a1[39] + 544) == 1)
  {
    v14 = ((uint64_t (*)(_QWORD **))(*a3)[39])(a3);
    if (v14)
      llvm::report_fatal_error((llvm *)"Literal constant used when compiling for shared library", (const char *)1);
  }
  v83 = a6;
  v84 = a7;
  v16 = v15 & 0x1E;
  if (v16 == 28)
  {
    (*(void (**)(uint64_t **__return_ptr))(*(_QWORD *)*a1 + 888))(&v97);
    v17 = sub_1C5586000((uint64_t)&v88, v97, v98);
    v14 = (uint64_t)v97;
    if (v97 != v99)
      free(v97);
  }
  else
  {
    v17 = 0;
  }
  v97 = &v88;
  BYTE6(v93) = 1;
  v18 = v91 - v92 + WORD4(v91);
  v98 = v91 - v92 + DWORD2(v91);
  v19 = *a1;
  SetShaderInfoFromFunctionGroup(v14, (uint64_t *)&v97, a3, (int *)a5);
  sub_1C558622C((uint64_t *)&v97, v19);
  if (v16 == 28)
    sub_1C5589334(&v88, 62, v17);
  v20 = ((uint64_t (*)(_QWORD **))(*a3)[4])(a3);
  v21 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v20 + 80))(v20, a4);
  if ((v21 & 1) != 0 || (_BYTE)v95)
  {
    v22 = sub_1C4D6650C((uint64_t)&v88, v21);
    sub_1C4D66288(&v88, 72, v22);
  }
  v23 = sub_1C4D66580((uint64_t)&v88, v18);
  v82 = v23;
  v85 = &v88;
  BYTE6(v93) = 1;
  v86 = v91 - v92 + DWORD2(v91);
  v24 = *a1;
  SetShaderInfoFromFunctionGroup(v23, (uint64_t *)&v85, (uint64_t)a3, (int *)a5);
  v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 8))(v24);
  if (v25 || (_BYTE)v95)
  {
    if (v94 <= 3)
      v94 = 4;
    v26 = *((_QWORD *)&v92 + 1);
    v27 = ((_BYTE)v92 - ((_BYTE)v91 + BYTE8(v91))) & 3;
    if ((_QWORD)v92 - *((_QWORD *)&v92 + 1) < v27)
    {
      sub_1C4D663A4(&v88, ((_BYTE)v92 - ((_BYTE)v91 + BYTE8(v91))) & 3);
      *(_QWORD *)&v92 = v92 - v27;
    }
    else
    {
      v28 = v92 - v27;
      *(_QWORD *)&v92 = v92 - v27;
      if (!v27)
      {
LABEL_32:
        if ((unint64_t)(v28 - v26) <= 3)
        {
          sub_1C4D663A4(&v88, 4uLL);
          v28 = v92;
        }
        *(_DWORD *)(v28 - 4) = v25;
        *(_QWORD *)&v92 = v28 - 4;
        sub_1C4D66288(&v88, 16, v91 - (v28 - 4) + DWORD2(v91));
        goto LABEL_35;
      }
    }
    v29 = 0;
    do
      *(_BYTE *)(v92 + v29++) = 0;
    while (v27 != v29);
    v26 = *((_QWORD *)&v92 + 1);
    v28 = v92;
    goto LABEL_32;
  }
LABEL_35:
  v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 16))(v24);
  if (v30)
    v31 = 0;
  else
    v31 = v95 == 0;
  if (v31)
    goto LABEL_49;
  v32 = v30;
  if (v94 <= 3)
    v94 = 4;
  v33 = *((_QWORD *)&v92 + 1);
  v34 = ((_BYTE)v92 - ((_BYTE)v91 + BYTE8(v91))) & 3;
  if ((_QWORD)v92 - *((_QWORD *)&v92 + 1) < v34)
  {
    sub_1C4D663A4(&v88, ((_BYTE)v92 - ((_BYTE)v91 + BYTE8(v91))) & 3);
    *(_QWORD *)&v92 = v92 - v34;
LABEL_43:
    v36 = 0;
    do
      *(_BYTE *)(v92 + v36++) = 0;
    while (v34 != v36);
    v33 = *((_QWORD *)&v92 + 1);
    v35 = v92;
    goto LABEL_46;
  }
  v35 = v92 - v34;
  *(_QWORD *)&v92 = v92 - v34;
  if (v34)
    goto LABEL_43;
LABEL_46:
  if ((unint64_t)(v35 - v33) <= 3)
  {
    sub_1C4D663A4(&v88, 4uLL);
    v35 = v92;
  }
  *(_DWORD *)(v35 - 4) = v32;
  *(_QWORD *)&v92 = v35 - 4;
  sub_1C4D66288(&v88, 18, v91 - (v35 - 4) + DWORD2(v91));
LABEL_49:
  v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 24))(v24);
  if (v37)
    v38 = 0;
  else
    v38 = v95 == 0;
  if (v38)
    goto LABEL_63;
  v39 = v37;
  if (v94 <= 3)
    v94 = 4;
  v40 = *((_QWORD *)&v92 + 1);
  v41 = ((_BYTE)v92 - ((_BYTE)v91 + BYTE8(v91))) & 3;
  if ((_QWORD)v92 - *((_QWORD *)&v92 + 1) < v41)
  {
    sub_1C4D663A4(&v88, ((_BYTE)v92 - ((_BYTE)v91 + BYTE8(v91))) & 3);
    *(_QWORD *)&v92 = v92 - v41;
LABEL_57:
    v43 = 0;
    do
      *(_BYTE *)(v92 + v43++) = 0;
    while (v41 != v43);
    v40 = *((_QWORD *)&v92 + 1);
    v42 = v92;
    goto LABEL_60;
  }
  v42 = v92 - v41;
  *(_QWORD *)&v92 = v92 - v41;
  if (v41)
    goto LABEL_57;
LABEL_60:
  if ((unint64_t)(v42 - v40) <= 3)
  {
    sub_1C4D663A4(&v88, 4uLL);
    v42 = v92;
  }
  *(_DWORD *)(v42 - 4) = v39;
  *(_QWORD *)&v92 = v42 - 4;
  sub_1C4D66288(&v88, 20, v91 - (v42 - 4) + DWORD2(v91));
LABEL_63:
  v44 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 32))(v24);
  if (v44)
    v45 = 0;
  else
    v45 = v95 == 0;
  if (v45)
    goto LABEL_77;
  v46 = v44;
  if (v94 <= 3)
    v94 = 4;
  v47 = *((_QWORD *)&v92 + 1);
  v48 = ((_BYTE)v92 - ((_BYTE)v91 + BYTE8(v91))) & 3;
  if ((_QWORD)v92 - *((_QWORD *)&v92 + 1) < v48)
  {
    sub_1C4D663A4(&v88, ((_BYTE)v92 - ((_BYTE)v91 + BYTE8(v91))) & 3);
    *(_QWORD *)&v92 = v92 - v48;
LABEL_71:
    v50 = 0;
    do
      *(_BYTE *)(v92 + v50++) = 0;
    while (v48 != v50);
    v47 = *((_QWORD *)&v92 + 1);
    v49 = v92;
    goto LABEL_74;
  }
  v49 = v92 - v48;
  *(_QWORD *)&v92 = v92 - v48;
  if (v48)
    goto LABEL_71;
LABEL_74:
  if ((unint64_t)(v49 - v47) <= 3)
  {
    sub_1C4D663A4(&v88, 4uLL);
    v49 = v92;
  }
  *(_DWORD *)(v49 - 4) = v46;
  *(_QWORD *)&v92 = v49 - 4;
  sub_1C4D66288(&v88, 22, v91 - (v49 - 4) + DWORD2(v91));
LABEL_77:
  v51 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v24 + 56))(v24);
  if (v51)
    v52 = 0;
  else
    v52 = v95 == 0;
  if (v52)
    goto LABEL_91;
  v53 = v51;
  if (v94 <= 3)
    v94 = 4;
  v54 = *((_QWORD *)&v92 + 1);
  v55 = ((_BYTE)v92 - ((_BYTE)v91 + BYTE8(v91))) & 3;
  if ((_QWORD)v92 - *((_QWORD *)&v92 + 1) < v55)
  {
    sub_1C4D663A4(&v88, ((_BYTE)v92 - ((_BYTE)v91 + BYTE8(v91))) & 3);
    *(_QWORD *)&v92 = v92 - v55;
LABEL_85:
    v57 = 0;
    do
      *(_BYTE *)(v92 + v57++) = 0;
    while (v55 != v57);
    v54 = *((_QWORD *)&v92 + 1);
    v56 = v92;
    goto LABEL_88;
  }
  v56 = v92 - v55;
  *(_QWORD *)&v92 = v92 - v55;
  if (v55)
    goto LABEL_85;
LABEL_88:
  if ((unint64_t)(v56 - v54) <= 3)
  {
    sub_1C4D663A4(&v88, 4uLL);
    v56 = v92;
  }
  *(_DWORD *)(v56 - 4) = v53;
  *(_QWORD *)&v92 = v56 - 4;
  sub_1C4D66288(&v88, 24, v91 - (v56 - 4) + DWORD2(v91));
LABEL_91:
  if (v16 == 28)
    sub_1C5589334(&v88, 28, v17);
  v58 = ((uint64_t (*)(_QWORD **))(*a3)[4])(a3);
  v59 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v58 + 80))(v58, a4);
  if ((v59 & 1) != 0 || (_BYTE)v95)
  {
    v60 = sub_1C4D6650C((uint64_t)&v88, v59);
    sub_1C4D66288(&v88, 36, v60);
  }
  if (*(_BYTE *)(a5 + 73))
  {
    if (!v94)
      v94 = 1;
    v61 = v92;
    if ((_QWORD)v92 == *((_QWORD *)&v92 + 1))
    {
      sub_1C4D663A4(&v88, 1uLL);
      v61 = v92;
    }
    *(_QWORD *)&v92 = v61 - 1;
    v62 = 2;
LABEL_108:
    *(_BYTE *)(v61 - 1) = v62;
LABEL_109:
    sub_1C4D66288(&v88, 38, v91 - v92 + DWORD2(v91));
    goto LABEL_110;
  }
  if (*(_BYTE *)(a5 + 72))
  {
    if (!v94)
      v94 = 1;
    v61 = v92;
    if ((_QWORD)v92 == *((_QWORD *)&v92 + 1))
    {
      sub_1C4D663A4(&v88, 1uLL);
      v61 = v92;
    }
    *(_QWORD *)&v92 = v61 - 1;
    v62 = 1;
    goto LABEL_108;
  }
  if ((_BYTE)v95)
  {
    if (!v94)
      v94 = 1;
    v81 = v92;
    if ((_QWORD)v92 == *((_QWORD *)&v92 + 1))
    {
      sub_1C4D663A4(&v88, 1uLL);
      v81 = v92;
    }
    *(_QWORD *)&v92 = v81 - 1;
    *(_BYTE *)(v81 - 1) = 0;
    goto LABEL_109;
  }
LABEL_110:
  v63 = sub_1C4D66580((uint64_t)&v88, v86);
  sub_1C558671C(v13, *a1, (uint64_t *)a5);
  BYTE6(v93) = 1;
  v65 = WORD4(v91);
  v64 = v92;
  v66 = v91;
  sub_1C55895A0(&v88, v82);
  if (!v63)
    goto LABEL_129;
  if (v94 <= 3)
    v94 = 4;
  v68 = DWORD2(v91);
  v67 = v91;
  v69 = ((_BYTE)v92 - ((_BYTE)v91 + BYTE8(v91))) & 3;
  if ((_QWORD)v92 - *((_QWORD *)&v92 + 1) < v69)
  {
    sub_1C4D663A4(&v88, ((_BYTE)v92 - ((_BYTE)v91 + BYTE8(v91))) & 3);
    *(_QWORD *)&v92 = v92 - v69;
  }
  else
  {
    v70 = v92 - v69;
    *(_QWORD *)&v92 = v92 - v69;
    if (!v69)
      goto LABEL_118;
  }
  v71 = 0;
  do
    *(_BYTE *)(v92 + v71++) = 0;
  while (v69 != v71);
  v68 = DWORD2(v91);
  v70 = v92;
  v67 = v91;
LABEL_118:
  v72 = v68 - v70 + v67 - v63;
  v73 = v72 + 4;
  if (v72 == -4 && !(_BYTE)v95)
    goto LABEL_129;
  if (v94 <= 3)
    v94 = 4;
  v74 = ((_BYTE)v70 - ((_BYTE)v67 + (_BYTE)v68)) & 3;
  v75 = *((_QWORD *)&v92 + 1);
  if (v70 - *((_QWORD *)&v92 + 1) < v74)
  {
    sub_1C4D663A4(&v88, v74);
    *(_QWORD *)&v92 = v92 - v74;
LABEL_123:
    v77 = 0;
    do
      *(_BYTE *)(v92 + v77++) = 0;
    while (v74 != v77);
    v75 = *((_QWORD *)&v92 + 1);
    v76 = v92;
    goto LABEL_126;
  }
  v76 = v70 - v74;
  *(_QWORD *)&v92 = v70 - v74;
  if (v74)
    goto LABEL_123;
LABEL_126:
  if ((unint64_t)(v76 - v75) <= 3)
  {
    sub_1C4D663A4(&v88, 4uLL);
    v76 = v92;
  }
  *(_DWORD *)(v76 - 4) = v73;
  *(_QWORD *)&v92 = v76 - 4;
  sub_1C4D66288(&v88, 12, v91 - (v76 - 4) + DWORD2(v91));
LABEL_129:
  v78 = sub_1C4D66580((uint64_t)&v88, v66 - v64 + v65);
  sub_1C55899C0((uint64_t)&v88, v78);
  llvm::GPUMetadataEmitter::EmitMetadataFromFB((uint64_t)a1, v79, (uint64_t)a3, (uint64_t ***)a4, v83, v84, "__helpers", &v88, 1);
  sub_1C4765570(&v88);
  return "__helpers";
}

const char *llvm::GPUMetadataEmitter::EmitVertexMetadata(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, llvm::MCStreamer *a7)
{
  uint64_t v13;
  size_t MachOSection;
  uint64_t v15;
  int v16;
  __int16 v17;
  __int16 v18;
  __int16 v19;
  int v20;
  int v21;
  __int16 v22;
  int v23;
  int v24;
  unint64_t v25;
  uint64_t v26;
  int v27;
  int v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  char v42;
  __int128 v43;
  __int128 v44;
  __int128 v45;
  uint64_t v46;
  unint64_t v47;
  __int16 v48;
  uint64_t v49;
  uint64_t v50[2];
  int v51;
  void *__p;
  void *v53;
  uint64_t v54;

  v13 = *(_QWORD *)(a4 + 40);
  MachOSection = llvm::MCContext::getMachOSection(a6, (uint64_t)"__GPU_METADATA", 0xEuLL, (uint64_t)"__vertex", 8, 0, 0, 0, 0);
  *(_BYTE *)(MachOSection + 24) = 3;
  (*(void (**)(llvm::MCStreamer *, size_t, _QWORD))(*(_QWORD *)a7 + 168))(a7, MachOSection, 0);
  (*(void (**)(llvm::MCStreamer *, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a7 + 632))(a7, 8, 0, 1, 0);
  v50[0] = 0;
  v50[1] = 0;
  v51 = 0;
  v53 = 0;
  v54 = 0;
  __p = 0;
  sub_1C5E9D34C(v13, (uint64_t)v50);
  v42 = 0;
  v43 = xmmword_1C865F170;
  v44 = 0u;
  v45 = 0u;
  v46 = 0;
  v47 = 1;
  v48 = 256;
  v49 = 0;
  v40 = a3;
  v41 = 0;
  v16 = llvm::GPUMetadataEmitter::EmitCommonMetadata(a1, (uint64_t)&v41, v15, a3, a4, v50);
  BYTE6(v46) = 1;
  v17 = WORD4(v44);
  v18 = v45;
  v19 = v44;
  v20 = *(_DWORD *)(a5 + 24);
  if (!v20 && !(_BYTE)v48)
    goto LABEL_3;
  if (v47 <= 3)
    v47 = 4;
  v34 = ((_BYTE)v45 - ((_BYTE)v44 + BYTE8(v44))) & 3;
  v35 = *((_QWORD *)&v45 + 1);
  if ((_QWORD)v45 - *((_QWORD *)&v45 + 1) < v34)
  {
    sub_1C4D663A4(&v41, ((_BYTE)v45 - ((_BYTE)v44 + BYTE8(v44))) & 3);
    *(_QWORD *)&v45 = v45 - v34;
LABEL_35:
    v39 = 0;
    do
      *(_BYTE *)(v45 + v39++) = 0;
    while (v34 != v39);
    v35 = *((_QWORD *)&v45 + 1);
    v36 = v45;
    goto LABEL_23;
  }
  v36 = v45 - v34;
  *(_QWORD *)&v45 = v45 - v34;
  if ((((_BYTE)v18 - ((_BYTE)v44 + BYTE8(v44))) & 3) != 0)
    goto LABEL_35;
LABEL_23:
  if ((unint64_t)(v36 - v35) <= 3)
  {
    sub_1C4D663A4(&v41, 4uLL);
    v36 = v45;
  }
  *(_DWORD *)(v36 - 4) = v20;
  *(_QWORD *)&v45 = v36 - 4;
  sub_1C4D66288(&v41, 4, v44 - (v36 - 4) + DWORD2(v44));
LABEL_3:
  v21 = sub_1C4D66580((uint64_t)&v41, v19 - v18 + v17);
  BYTE6(v46) = 1;
  v22 = v44 - v45 + WORD4(v44);
  sub_1C55895A0(&v41, v16);
  if (!v21)
    goto LABEL_16;
  if (v47 <= 3)
    v47 = 4;
  v24 = DWORD2(v44);
  v23 = v44;
  v25 = ((_BYTE)v45 - ((_BYTE)v44 + BYTE8(v44))) & 3;
  if ((_QWORD)v45 - *((_QWORD *)&v45 + 1) < v25)
  {
    sub_1C4D663A4(&v41, ((_BYTE)v45 - ((_BYTE)v44 + BYTE8(v44))) & 3);
    *(_QWORD *)&v45 = v45 - v25;
  }
  else
  {
    v26 = v45 - v25;
    *(_QWORD *)&v45 = v45 - v25;
    if (!v25)
      goto LABEL_8;
  }
  v37 = 0;
  do
    *(_BYTE *)(v45 + v37++) = 0;
  while (v25 != v37);
  v24 = DWORD2(v44);
  v26 = v45;
  v23 = v44;
LABEL_8:
  v27 = v24 - v26 + v23 - v21;
  v28 = v27 + 4;
  if (v27 == -4 && !(_BYTE)v48)
    goto LABEL_16;
  if (v47 <= 3)
    v47 = 4;
  v29 = ((_BYTE)v26 - ((_BYTE)v23 + (_BYTE)v24)) & 3;
  v30 = *((_QWORD *)&v45 + 1);
  if (v26 - *((_QWORD *)&v45 + 1) < v29)
  {
    sub_1C4D663A4(&v41, v29);
    *(_QWORD *)&v45 = v45 - v29;
LABEL_31:
    v38 = 0;
    do
      *(_BYTE *)(v45 + v38++) = 0;
    while (v29 != v38);
    v30 = *((_QWORD *)&v45 + 1);
    v31 = v45;
    goto LABEL_13;
  }
  v31 = v26 - v29;
  *(_QWORD *)&v45 = v26 - v29;
  if (v29)
    goto LABEL_31;
LABEL_13:
  if ((unint64_t)(v31 - v30) <= 3)
  {
    sub_1C4D663A4(&v41, 4uLL);
    v31 = v45;
  }
  *(_DWORD *)(v31 - 4) = v28;
  *(_QWORD *)&v45 = v31 - 4;
  sub_1C4D66288(&v41, 6, v44 - (v31 - 4) + DWORD2(v44));
LABEL_16:
  v32 = sub_1C4D66580((uint64_t)&v41, v22);
  sub_1C55899C0((uint64_t)&v41, v32);
  llvm::GPUMetadataEmitter::EmitSerializedMetadataFlatbuffer((uint64_t)a1, (uint64_t)(a1 + 40), &v41, (uint64_t)a7);
  sub_1C557BB88(a6, a7, MachOSection, v40);
  sub_1C4765570(&v41);
  if (__p)
  {
    v53 = __p;
    operator delete(__p);
  }
  MEMORY[0x1CAA32FB4](v50[0], 8);
  return "__vertex";
}

const char *llvm::GPUMetadataEmitter::EmitComputeMetadata(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, llvm::MCStreamer *a7)
{
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t v22;
  int v23;
  int v24;
  unint64_t *v25;
  size_t v26;
  const void *v27;
  unint64_t v28;
  void **p_dst;
  uint64_t v30;
  uint64_t v31;
  void **v32;
  size_t v33;
  int v34;
  __int16 v35;
  __int16 v36;
  __int16 v37;
  int v38;
  unint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned int v43;
  uint64_t v44;
  unsigned int v45;
  uint64_t v46;
  unsigned int v47;
  unsigned __int8 v48;
  uint64_t v49;
  unint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  BOOL v54;
  unsigned int v55;
  uint64_t v56;
  BOOL v57;
  unsigned int v58;
  int v59;
  __int16 v60;
  int v61;
  int v62;
  unint64_t v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  int v73;
  uint64_t v75;
  void **v76;
  int v77;
  BOOL v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  uint64_t v82;
  unsigned int v83;
  void **v84;
  int v85;
  BOOL v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  void **v92;
  int v93;
  BOOL v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  void **v100;
  int v101;
  BOOL v102;
  uint64_t v103;
  unint64_t v104;
  uint64_t v105;
  uint64_t v106;
  int v107;
  uint64_t v108;
  llvm::MCStreamer *v109;
  void **__dst;
  size_t v111;
  int64_t v112;
  uint64_t v113;
  char v114;
  __int128 v115;
  __int128 v116;
  __int128 v117;
  uint64_t v118;
  unint64_t v119;
  __int16 v120;
  uint64_t v121;
  uint64_t v122[2];
  int v123;
  void *v124;
  void *v125;
  uint64_t v126;

  v13 = *(_QWORD *)(a4 + 40);
  v122[0] = 0;
  v122[1] = 0;
  v123 = 0;
  v125 = 0;
  v126 = 0;
  v124 = 0;
  sub_1C5E9D674(v13, (uint64_t)v122, a3);
  v113 = 0;
  v114 = 0;
  v115 = xmmword_1C865F170;
  v116 = 0u;
  v117 = 0u;
  v118 = 0;
  v119 = 1;
  v120 = 256;
  v121 = 0;
  v15 = llvm::GPUMetadataEmitter::EmitCommonMetadata(a1, (uint64_t)&v113, v14, a3, a4, v122);
  v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 560))(a3);
  v108 = a6;
  v109 = a7;
  v107 = v15;
  if ((*(_BYTE *)(v16 + 23) & 0x10) == 0)
  {
    v26 = 0;
    HIBYTE(v112) = 0;
    p_dst = (void **)&__dst;
    goto LABEL_17;
  }
  v17 = ***(_QWORD ***)v16;
  v18 = *(_QWORD *)(v17 + 152);
  v19 = *(unsigned int *)(v17 + 168);
  if ((_DWORD)v19)
  {
    LODWORD(v20) = (v19 - 1) & ((v16 >> 4) ^ (v16 >> 9));
    v21 = (uint64_t *)(v18 + 16 * v20);
    v22 = *v21;
    if (*v21 == v16)
      goto LABEL_9;
    v23 = 1;
    while (v22 != -4096)
    {
      v24 = v20 + v23++;
      v20 = v24 & (v19 - 1);
      v22 = *(_QWORD *)(v18 + 16 * v20);
      if (v22 == v16)
      {
        v21 = (uint64_t *)(v18 + 16 * v20);
        goto LABEL_9;
      }
    }
  }
  v21 = (uint64_t *)(v18 + 16 * v19);
LABEL_9:
  v25 = (unint64_t *)v21[1];
  v28 = *v25;
  v27 = v25 + 2;
  v26 = v28;
  if (v28 >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (v26 >= 0x17)
  {
    v30 = (v26 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v26 | 7) != 0x17)
      v30 = v26 | 7;
    v31 = v30 + 1;
    p_dst = (void **)operator new(v30 + 1);
    v111 = v26;
    v112 = v31 | 0x8000000000000000;
    __dst = p_dst;
    goto LABEL_16;
  }
  HIBYTE(v112) = v26;
  p_dst = (void **)&__dst;
  if (v26)
LABEL_16:
    memmove(p_dst, v27, v26);
LABEL_17:
  *((_BYTE *)p_dst + v26) = 0;
  if (v112 >= 0)
    v32 = (void **)&__dst;
  else
    v32 = __dst;
  if (v112 >= 0)
    v33 = HIBYTE(v112) & 0x7F;
  else
    v33 = v111;
  v34 = sub_1C4D6889C((uint64_t)&v113, v32, v33);
  if (SHIBYTE(v112) < 0)
    operator delete(__dst);
  BYTE6(v118) = 1;
  v35 = WORD4(v116);
  v36 = v117;
  v37 = v116;
  v38 = *(_DWORD *)(a5 + 24);
  if (v38 || (_BYTE)v120)
  {
    if (v119 <= 3)
      v119 = 4;
    v39 = ((_BYTE)v117 - ((_BYTE)v116 + BYTE8(v116))) & 3;
    v40 = *((_QWORD *)&v117 + 1);
    if ((_QWORD)v117 - *((_QWORD *)&v117 + 1) < v39)
    {
      sub_1C4D663A4(&v113, ((_BYTE)v117 - ((_BYTE)v116 + BYTE8(v116))) & 3);
      *(_QWORD *)&v117 = v117 - v39;
    }
    else
    {
      v41 = v117 - v39;
      *(_QWORD *)&v117 = v117 - v39;
      if ((((_BYTE)v36 - ((_BYTE)v116 + BYTE8(v116))) & 3) == 0)
      {
LABEL_34:
        if ((unint64_t)(v41 - v40) <= 3)
        {
          sub_1C4D663A4(&v113, 4uLL);
          v41 = v117;
        }
        *(_DWORD *)(v41 - 4) = v38;
        *(_QWORD *)&v117 = v41 - 4;
        sub_1C4D66288(&v113, 4, v116 - (v41 - 4) + DWORD2(v116));
        goto LABEL_37;
      }
    }
    v42 = 0;
    do
      *(_BYTE *)(v117 + v42++) = 0;
    while (v39 != v42);
    v40 = *((_QWORD *)&v117 + 1);
    v41 = v117;
    goto LABEL_34;
  }
LABEL_37:
  sub_1C5589334(&v113, 6, v34);
  if (!(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 176))(a3, 20))
    goto LABEL_38;
  (*(void (**)(void ***__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a3 + 128))(&__dst, a3, 20);
  v75 = *(_QWORD *)(*((uint64_t (**)(void **))*__dst + 4))(__dst);
  v76 = __dst;
  __dst = 0;
  if (v76)
    (*((void (**)(void **))*v76 + 1))(v76);
  if (!v75)
  {
LABEL_38:
    v43 = 0;
    goto LABEL_39;
  }
  v77 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 400))(a3, v75);
  if (v77)
    v78 = 0;
  else
    v78 = v120 == 0;
  if (!v78)
  {
    if (v119 <= 3)
      v119 = 4;
    v79 = *((_QWORD *)&v117 + 1);
    v80 = ((_BYTE)v117 - ((_BYTE)v116 + BYTE8(v116))) & 3;
    if ((_QWORD)v117 - *((_QWORD *)&v117 + 1) < v80)
    {
      sub_1C4D663A4(&v113, ((_BYTE)v117 - ((_BYTE)v116 + BYTE8(v116))) & 3);
      *(_QWORD *)&v117 = v117 - v80;
    }
    else
    {
      v81 = v117 - v80;
      *(_QWORD *)&v117 = v117 - v80;
      if (!v80)
      {
LABEL_108:
        if ((unint64_t)(v81 - v79) <= 3)
        {
          sub_1C4D663A4(&v113, 4uLL);
          v81 = v117;
        }
        *(_DWORD *)(v81 - 4) = v77;
        *(_QWORD *)&v117 = v81 - 4;
        sub_1C4D66288(&v113, 12, v116 - (v81 - 4) + DWORD2(v116));
        goto LABEL_111;
      }
    }
    v82 = 0;
    do
      *(_BYTE *)(v117 + v82++) = 0;
    while (v80 != v82);
    v79 = *((_QWORD *)&v117 + 1);
    v81 = v117;
    goto LABEL_108;
  }
LABEL_111:
  v83 = sub_1C4D6650C((uint64_t)&v113, 1);
  sub_1C4D66288(&v113, 10, v83);
  v43 = v77 + 1;
LABEL_39:
  if (!(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 176))(a3, 21))
  {
    LODWORD(v44) = 0;
    goto LABEL_41;
  }
  (*(void (**)(void ***__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a3 + 128))(&__dst, a3, 21);
  v44 = *(_QWORD *)(*((uint64_t (**)(void **))*__dst + 4))(__dst);
  v84 = __dst;
  __dst = 0;
  if (v84)
    (*((void (**)(void **))*v84 + 1))(v84);
  if (v44)
  {
    v85 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 400))(a3, v44);
    if (v85)
      v86 = 0;
    else
      v86 = v120 == 0;
    if (v86)
    {
LABEL_129:
      if (v43 <= v85 + 1)
        v43 = v85 + 1;
      LODWORD(v44) = 1;
      goto LABEL_41;
    }
    if (v119 <= 3)
      v119 = 4;
    v87 = *((_QWORD *)&v117 + 1);
    v88 = ((_BYTE)v117 - ((_BYTE)v116 + BYTE8(v116))) & 3;
    if ((_QWORD)v117 - *((_QWORD *)&v117 + 1) < v88)
    {
      sub_1C4D663A4(&v113, ((_BYTE)v117 - ((_BYTE)v116 + BYTE8(v116))) & 3);
      *(_QWORD *)&v117 = v117 - v88;
    }
    else
    {
      v89 = v117 - v88;
      *(_QWORD *)&v117 = v117 - v88;
      if (!v88)
      {
LABEL_126:
        if ((unint64_t)(v89 - v87) <= 3)
        {
          sub_1C4D663A4(&v113, 4uLL);
          v89 = v117;
        }
        *(_DWORD *)(v89 - 4) = v85;
        *(_QWORD *)&v117 = v89 - 4;
        sub_1C4D66288(&v113, 16, v116 - (v89 - 4) + DWORD2(v116));
        goto LABEL_129;
      }
    }
    v90 = 0;
    do
      *(_BYTE *)(v117 + v90++) = 0;
    while (v88 != v90);
    v87 = *((_QWORD *)&v117 + 1);
    v89 = v117;
    goto LABEL_126;
  }
LABEL_41:
  if ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 176))(a3, 22))
  {
    (*(void (**)(void ***__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a3 + 128))(&__dst, a3, 22);
    v91 = *(_QWORD *)(*((uint64_t (**)(void **))*__dst + 4))(__dst);
    v92 = __dst;
    __dst = 0;
    if (v92)
      (*((void (**)(void **))*v92 + 1))(v92);
    if (v91)
    {
      v93 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 400))(a3, v91);
      if (v93)
        v94 = 0;
      else
        v94 = v120 == 0;
      if (v94)
      {
LABEL_149:
        LODWORD(v44) = v44 | 2;
        if (v43 <= v93 + 1)
          v43 = v93 + 1;
        goto LABEL_42;
      }
      if (v119 <= 3)
        v119 = 4;
      v95 = *((_QWORD *)&v117 + 1);
      v96 = ((_BYTE)v117 - ((_BYTE)v116 + BYTE8(v116))) & 3;
      if ((_QWORD)v117 - *((_QWORD *)&v117 + 1) < v96)
      {
        sub_1C4D663A4(&v113, ((_BYTE)v117 - ((_BYTE)v116 + BYTE8(v116))) & 3);
        *(_QWORD *)&v117 = v117 - v96;
      }
      else
      {
        v97 = v117 - v96;
        *(_QWORD *)&v117 = v117 - v96;
        if (!v96)
        {
LABEL_146:
          if ((unint64_t)(v97 - v95) <= 3)
          {
            sub_1C4D663A4(&v113, 4uLL);
            v97 = v117;
          }
          *(_DWORD *)(v97 - 4) = v93;
          *(_QWORD *)&v117 = v97 - 4;
          sub_1C4D66288(&v113, 18, v116 - (v97 - 4) + DWORD2(v116));
          goto LABEL_149;
        }
      }
      v98 = 0;
      do
        *(_BYTE *)(v117 + v98++) = 0;
      while (v96 != v98);
      v95 = *((_QWORD *)&v117 + 1);
      v97 = v117;
      goto LABEL_146;
    }
  }
LABEL_42:
  if (!(*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 176))(a3, 23))
    goto LABEL_43;
  (*(void (**)(void ***__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a3 + 128))(&__dst, a3, 23);
  v99 = *(_QWORD *)(*((uint64_t (**)(void **))*__dst + 4))(__dst);
  v100 = __dst;
  __dst = 0;
  if (v100)
    (*((void (**)(void **))*v100 + 1))(v100);
  if (!v99)
  {
LABEL_43:
    if (!(_DWORD)v44)
      goto LABEL_45;
    goto LABEL_44;
  }
  v101 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 400))(a3, v99);
  if (v101)
    v102 = 0;
  else
    v102 = v120 == 0;
  if (!v102)
  {
    if (v119 <= 3)
      v119 = 4;
    v103 = *((_QWORD *)&v117 + 1);
    v104 = ((_BYTE)v117 - ((_BYTE)v116 + BYTE8(v116))) & 3;
    if ((_QWORD)v117 - *((_QWORD *)&v117 + 1) < v104)
    {
      sub_1C4D663A4(&v113, ((_BYTE)v117 - ((_BYTE)v116 + BYTE8(v116))) & 3);
      *(_QWORD *)&v117 = v117 - v104;
    }
    else
    {
      v105 = v117 - v104;
      *(_QWORD *)&v117 = v117 - v104;
      if (!v104)
      {
LABEL_165:
        if ((unint64_t)(v105 - v103) <= 3)
        {
          sub_1C4D663A4(&v113, 4uLL);
          v105 = v117;
        }
        *(_DWORD *)(v105 - 4) = v101;
        *(_QWORD *)&v117 = v105 - 4;
        sub_1C4D66288(&v113, 20, v116 - (v105 - 4) + DWORD2(v116));
        goto LABEL_168;
      }
    }
    v106 = 0;
    do
      *(_BYTE *)(v117 + v106++) = 0;
    while (v104 != v106);
    v103 = *((_QWORD *)&v117 + 1);
    v105 = v117;
    goto LABEL_165;
  }
LABEL_168:
  LOBYTE(v44) = v44 | 4;
  if (v43 <= v101 + 1)
    v43 = v101 + 1;
LABEL_44:
  v45 = sub_1C4D6650C((uint64_t)&v113, v44);
  sub_1C4D66288(&v113, 14, v45);
LABEL_45:
  v46 = sub_1C5EAC85C(a3, 13, 0);
  v47 = sub_1C5EAC85C(a3, 12, v46);
  if (v43 <= v47)
    v43 = v47;
  v48 = atomic_load((unsigned __int8 *)&qword_1ED806370);
  if ((v48 & 1) == 0 && __cxa_guard_acquire(&qword_1ED806370))
  {
    byte_1ED80635A = 0;
    __cxa_guard_release(&qword_1ED806370);
  }
  if (byte_1ED80635A)
    v43 += 16;
  if (v43 || (_BYTE)v120)
  {
    if (v119 <= 3)
      v119 = 4;
    v49 = *((_QWORD *)&v117 + 1);
    v50 = ((_BYTE)v117 - ((_BYTE)v116 + BYTE8(v116))) & 3;
    if ((_QWORD)v117 - *((_QWORD *)&v117 + 1) < v50)
    {
      sub_1C4D663A4(&v113, ((_BYTE)v117 - ((_BYTE)v116 + BYTE8(v116))) & 3);
      *(_QWORD *)&v117 = v117 - v50;
    }
    else
    {
      v51 = v117 - v50;
      *(_QWORD *)&v117 = v117 - v50;
      if (!v50)
      {
LABEL_59:
        if ((unint64_t)(v51 - v49) <= 3)
        {
          sub_1C4D663A4(&v113, 4uLL);
          v51 = v117;
        }
        *(_DWORD *)(v51 - 4) = v43;
        *(_QWORD *)&v117 = v51 - 4;
        sub_1C4D66288(&v113, 8, v116 - (v51 - 4) + DWORD2(v116));
        goto LABEL_62;
      }
    }
    v52 = 0;
    do
      *(_BYTE *)(v117 + v52++) = 0;
    while (v50 != v52);
    v49 = *((_QWORD *)&v117 + 1);
    v51 = v117;
    goto LABEL_59;
  }
LABEL_62:
  v53 = (**(uint64_t (***)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))a3)(a3, 36, 0, 1, 2);
  if (v53)
    v54 = 0;
  else
    v54 = v120 == 0;
  if (!v54)
  {
    v55 = sub_1C4D6650C((uint64_t)&v113, v53 != 0);
    sub_1C4D66288(&v113, 22, v55);
  }
  v56 = (**(uint64_t (***)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))a3)(a3, 38, 0, 1, 2);
  if (v56)
    v57 = 0;
  else
    v57 = v120 == 0;
  if (!v57)
  {
    v58 = sub_1C4D6650C((uint64_t)&v113, v56 != 0);
    sub_1C4D66288(&v113, 24, v58);
  }
  v59 = sub_1C4D66580((uint64_t)&v113, v37 - v36 + v35);
  BYTE6(v118) = 1;
  v60 = v116 - v117 + WORD4(v116);
  sub_1C55895A0(&v113, v107);
  if (v59)
  {
    if (v119 <= 3)
      v119 = 4;
    v62 = DWORD2(v116);
    v61 = v116;
    v63 = ((_BYTE)v117 - ((_BYTE)v116 + BYTE8(v116))) & 3;
    if ((_QWORD)v117 - *((_QWORD *)&v117 + 1) < v63)
    {
      sub_1C4D663A4(&v113, ((_BYTE)v117 - ((_BYTE)v116 + BYTE8(v116))) & 3);
      *(_QWORD *)&v117 = v117 - v63;
    }
    else
    {
      v64 = v117 - v63;
      *(_QWORD *)&v117 = v117 - v63;
      if (!v63)
        goto LABEL_80;
    }
    v65 = 0;
    do
      *(_BYTE *)(v117 + v65++) = 0;
    while (v63 != v65);
    v62 = DWORD2(v116);
    v64 = v117;
    v61 = v116;
LABEL_80:
    v66 = v62 - v64 + v61 - v59;
    v67 = v66 + 4;
    if (v66 == -4 && !(_BYTE)v120)
      goto LABEL_91;
    if (v119 <= 3)
      v119 = 4;
    v68 = ((_BYTE)v64 - ((_BYTE)v61 + (_BYTE)v62)) & 3;
    v69 = *((_QWORD *)&v117 + 1);
    if (v64 - *((_QWORD *)&v117 + 1) < v68)
    {
      sub_1C4D663A4(&v113, v68);
      *(_QWORD *)&v117 = v117 - v68;
    }
    else
    {
      v70 = v64 - v68;
      *(_QWORD *)&v117 = v64 - v68;
      if (!v68)
      {
LABEL_88:
        if ((unint64_t)(v70 - v69) <= 3)
        {
          sub_1C4D663A4(&v113, 4uLL);
          v70 = v117;
        }
        *(_DWORD *)(v70 - 4) = v67;
        *(_QWORD *)&v117 = v70 - 4;
        sub_1C4D66288(&v113, 10, v116 - (v70 - 4) + DWORD2(v116));
        goto LABEL_91;
      }
    }
    v71 = 0;
    do
      *(_BYTE *)(v117 + v71++) = 0;
    while (v68 != v71);
    v69 = *((_QWORD *)&v117 + 1);
    v70 = v117;
    goto LABEL_88;
  }
LABEL_91:
  v72 = sub_1C4D66580((uint64_t)&v113, v60);
  sub_1C55899C0((uint64_t)&v113, v72);
  llvm::GPUMetadataEmitter::EmitMetadataFromFB((uint64_t)a1, v73, a3, (uint64_t ***)a4, v108, v109, "__compute", &v113, 0);
  sub_1C4765570(&v113);
  if (v124)
  {
    v125 = v124;
    operator delete(v124);
  }
  MEMORY[0x1CAA32FB4](v122[0], 8);
  return "__compute";
}

const char *llvm::GPUMetadataEmitter::EmitFragmentMetadata(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, llvm::MCStreamer *a7)
{
  uint64_t v9;
  uint64_t v10;
  __int16 v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;
  uint64_t v18;
  int v19;
  int v20;
  char *v21;
  char *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t *v29;
  uint64_t v30;
  int v31;
  int v32;
  unint64_t *v33;
  size_t v34;
  const void *v35;
  unint64_t v36;
  uint64_t *p_dst;
  uint64_t v38;
  uint64_t v39;
  uint64_t *v40;
  size_t v41;
  int v42;
  __int16 v43;
  uint64_t v44;
  int v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t *v51;
  uint64_t v52;
  int v53;
  int v54;
  unint64_t *v55;
  size_t v56;
  const void *v57;
  unint64_t v58;
  uint64_t *v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t *v63;
  size_t v64;
  int v65;
  __int16 v66;
  char v67;
  uint64_t v68;
  int v69;
  unint64_t v70;
  int v71;
  char *v72;
  char *v73;
  char *v74;
  uint64_t i;
  uint64_t NamedMetadata;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t *v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  BOOL v93;
  BOOL v94;
  char v95;
  char *v96;
  char *v97;
  char *v98;
  unsigned int v99;
  unsigned int v100;
  _QWORD *v101;
  uint64_t v102;
  unint64_t v103;
  uint64_t v104;
  uint64_t v105;
  uint64_t v106;
  unsigned int v107;
  int v108;
  _QWORD *v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  int v113;
  int v114;
  _QWORD *v115;
  unsigned int v116;
  unsigned __int16 FragmentShaderIterationData;
  BOOL v118;
  unsigned __int8 v120;
  unsigned int v121;
  unsigned int v122;
  char *v123;
  char *v124;
  int v125;
  char *v126;
  int v127;
  __int16 v128;
  __int16 v129;
  __int16 v130;
  unint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  uint64_t v135;
  char v136;
  uint64_t v137;
  int v138;
  unsigned int v139;
  uint64_t v140;
  unsigned int v141;
  uint64_t v142;
  unsigned int v143;
  uint64_t v144;
  unsigned int v145;
  uint64_t v146;
  unsigned int v147;
  int v148;
  __int16 v149;
  int v150;
  int v151;
  unint64_t v152;
  uint64_t v153;
  uint64_t v154;
  int v155;
  int v156;
  unint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  int v161;
  int v162;
  size_t MachOSection;
  char *v164;
  char *v165;
  int v166;
  __int16 v167;
  unint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  int v172;
  uint64_t v173;
  unint64_t v174;
  uint64_t v175;
  uint64_t v176;
  int v177;
  int v178;
  int v179;
  __int16 v180;
  char v181;
  int v182;
  unint64_t v183;
  uint64_t v184;
  uint64_t v185;
  int v186;
  int v187;
  unint64_t v188;
  uint64_t v189;
  uint64_t v190;
  uint64_t v191;
  int v192;
  BOOL v193;
  uint64_t v194;
  unint64_t v195;
  uint64_t v196;
  uint64_t v197;
  int v198;
  uint64_t v200;
  unint64_t *v201;
  size_t v202;
  const void *v203;
  unint64_t v204;
  uint64_t *v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t *v208;
  size_t v209;
  int v210;
  __int16 v211;
  uint64_t v212;
  int v213;
  char v214;
  char *v215;
  char *v216;
  char *v217;
  int v218;
  char v219;
  uint64_t v221;
  char *v222;
  char *v226;
  char *v227;
  char *v228;
  char *v229;
  __int128 v230;
  __int128 v231;
  __int128 v232;
  uint64_t v233;
  unint64_t v234;
  __int16 v235;
  uint64_t v236;
  std::string v237;
  void *__p;
  int *v239;
  uint64_t v240;
  void *v241;
  int *v242;
  uint64_t v243;
  uint64_t v244;
  char v245;
  __int128 v246;
  __int128 v247;
  __int128 v248;
  uint64_t v249;
  unint64_t v250;
  __int16 v251;
  uint64_t v252;
  uint64_t v253[2];
  int v254;
  void *v255;
  void *v256;
  uint64_t v257;
  uint64_t __dst;
  _QWORD *v259;
  int64_t v260;
  uint64_t v261;

  v261 = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(a4 + 40);
  v253[0] = 0;
  v253[1] = 0;
  v254 = 0;
  v256 = 0;
  v257 = 0;
  v255 = 0;
  sub_1C5E9D34C(v9, (uint64_t)v253);
  v244 = 0;
  v245 = 0;
  v246 = xmmword_1C865F170;
  v247 = 0u;
  v248 = 0u;
  v249 = 0;
  v250 = 1;
  v251 = 256;
  v252 = 0;
  v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 592))(a3, 103);
  v221 = a6;
  if (v10 || (v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 592))(a3, 104)) != 0)
  {
    v11 = *(_WORD *)(v10 + 18);
    v12 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 592))(a3, 105);
    if (!v12)
    {
      v21 = 0;
      v22 = 0;
      goto LABEL_44;
    }
    if ((*(_BYTE *)(v12 + 23) & 0x10) == 0)
    {
      v34 = 0;
      HIBYTE(v260) = 0;
      p_dst = &__dst;
      goto LABEL_29;
    }
    v13 = ***(_QWORD ***)v12;
    v14 = *(_QWORD *)(v13 + 152);
    v15 = *(unsigned int *)(v13 + 168);
    if ((_DWORD)v15)
    {
      LODWORD(v16) = (v15 - 1) & ((v12 >> 4) ^ (v12 >> 9));
      v17 = (uint64_t *)(v14 + 16 * v16);
      v18 = *v17;
      if (*v17 == v12)
      {
LABEL_21:
        v33 = (unint64_t *)v17[1];
        v36 = *v33;
        v35 = v33 + 2;
        v34 = v36;
        if (v36 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_337;
        if (v34 >= 0x17)
        {
          v38 = (v34 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v34 | 7) != 0x17)
            v38 = v34 | 7;
          v39 = v38 + 1;
          p_dst = (uint64_t *)operator new(v38 + 1);
          v259 = (_QWORD *)v34;
          v260 = v39 | 0x8000000000000000;
          __dst = (uint64_t)p_dst;
        }
        else
        {
          HIBYTE(v260) = v34;
          p_dst = &__dst;
          if (!v34)
            goto LABEL_29;
        }
        memmove(p_dst, v35, v34);
LABEL_29:
        *((_BYTE *)p_dst + v34) = 0;
        if (v260 >= 0)
          v40 = &__dst;
        else
          v40 = (uint64_t *)__dst;
        if (v260 >= 0)
          v41 = HIBYTE(v260) & 0x7F;
        else
          v41 = (size_t)v259;
        v42 = sub_1C4D6889C((uint64_t)&v244, v40, v41);
        if (SHIBYTE(v260) < 0)
          operator delete((void *)__dst);
        BYTE6(v249) = 1;
        v43 = v247 - v248 + WORD4(v247);
        sub_1C5589334(&v244, 4, v42);
        if ((_BYTE)v251)
        {
          if (!v250)
            v250 = 1;
          v44 = v248;
          if ((_QWORD)v248 == *((_QWORD *)&v248 + 1))
          {
            sub_1C4D663A4(&v244, 1uLL);
            v44 = v248;
          }
          *(_QWORD *)&v248 = v44 - 1;
          *(_BYTE *)(v44 - 1) = 0;
          sub_1C4D66288(&v244, 6, v247 - v248 + DWORD2(v247));
        }
        v45 = sub_1C4D66580((uint64_t)&v244, v43);
        v21 = (char *)operator new(4uLL);
        *(_DWORD *)v21 = v45;
        v22 = v21 + 4;
LABEL_44:
        v46 = v22 - v21;
        (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)a3 + 8))(a3, 4, ((unint64_t)(v22 - v21) >> 2), 1, 0xFFFFFFFFLL, 1, 1);
        if ((*(_BYTE *)(v10 + 23) & 0x10) == 0)
        {
          v56 = 0;
          HIBYTE(v260) = 0;
          v59 = &__dst;
          goto LABEL_60;
        }
        v47 = ***(_QWORD ***)v10;
        v48 = *(_QWORD *)(v47 + 152);
        v49 = *(unsigned int *)(v47 + 168);
        if ((_DWORD)v49)
        {
          LODWORD(v50) = (v49 - 1) & ((v10 >> 4) ^ (v10 >> 9));
          v51 = (uint64_t *)(v48 + 16 * v50);
          v52 = *v51;
          if (*v51 == v10)
            goto LABEL_52;
          v53 = 1;
          while (v52 != -4096)
          {
            v54 = v50 + v53++;
            v50 = v54 & (v49 - 1);
            v52 = *(_QWORD *)(v48 + 16 * v50);
            if (v52 == v10)
            {
              v51 = (uint64_t *)(v48 + 16 * v50);
              goto LABEL_52;
            }
          }
        }
        v51 = (uint64_t *)(v48 + 16 * v49);
LABEL_52:
        v55 = (unint64_t *)v51[1];
        v58 = *v55;
        v57 = v55 + 2;
        v56 = v58;
        if (v58 > 0x7FFFFFFFFFFFFFF7)
          goto LABEL_337;
        if (v56 >= 0x17)
        {
          v60 = (v56 & 0xFFFFFFFFFFFFFFF8) + 8;
          if ((v56 | 7) != 0x17)
            v60 = v56 | 7;
          v61 = v60 + 1;
          v59 = (uint64_t *)operator new(v60 + 1);
          v259 = (_QWORD *)v56;
          v260 = v61 | 0x8000000000000000;
          __dst = (uint64_t)v59;
        }
        else
        {
          HIBYTE(v260) = v56;
          v59 = &__dst;
          if (!v56)
          {
LABEL_60:
            v62 = v11 & 0x3FF0;
            *((_BYTE *)v59 + v56) = 0;
            if (v260 >= 0)
              v63 = &__dst;
            else
              v63 = (uint64_t *)__dst;
            if (v260 >= 0)
              v64 = HIBYTE(v260) & 0x7F;
            else
              v64 = (size_t)v259;
            v65 = sub_1C4D6889C((uint64_t)&v244, v63, v64);
            if (SHIBYTE(v260) < 0)
              operator delete((void *)__dst);
            BYTE6(v249) = 1;
            v66 = v247 - v248 + WORD4(v247);
            sub_1C5589334(&v244, 4, v65);
            if (v62 == 1648)
              v67 = 1;
            else
              v67 = 2;
            if (!v250)
              v250 = 1;
            v68 = v248;
            if ((_QWORD)v248 == *((_QWORD *)&v248 + 1))
            {
              sub_1C4D663A4(&v244, 1uLL);
              v68 = v248;
            }
            *(_QWORD *)&v248 = v68 - 1;
            *(_BYTE *)(v68 - 1) = v67;
            sub_1C4D66288(&v244, 6, v247 - v248 + DWORD2(v247));
            v69 = sub_1C4D66580((uint64_t)&v244, v66);
            v70 = (v46 >> 2) + 1;
            if (!(v70 >> 62))
            {
              v71 = v69;
              if (v46 >> 1 > v70)
                v70 = v46 >> 1;
              if ((unint64_t)v46 >= 0x7FFFFFFFFFFFFFFCLL)
                v70 = 0x3FFFFFFFFFFFFFFFLL;
              if (v70)
              {
                if (v70 >> 62)
                  sub_1C4764EE4();
                v72 = (char *)operator new(4 * v70);
              }
              else
              {
                v72 = 0;
              }
              v73 = &v72[4 * (v46 >> 2)];
              *(_DWORD *)v73 = v71;
              v74 = v73 + 4;
              if (v22 == v21)
              {
                v222 = v73;
              }
              else
              {
                v222 = &v72[v46 & 3];
                memcpy(v222, &v22[-(v46 & 0xFFFFFFFFFFFFFFFCLL)], v46 & 0xFFFFFFFFFFFFFFFCLL);
              }
              v217 = v74;
              if (v21)
                operator delete(v21);
              goto LABEL_89;
            }
LABEL_337:
            abort();
          }
        }
        memmove(v59, v57, v56);
        goto LABEL_60;
      }
      v19 = 1;
      while (v18 != -4096)
      {
        v20 = v16 + v19++;
        v16 = v20 & (v15 - 1);
        v18 = *(_QWORD *)(v14 + 16 * v16);
        if (v18 == v12)
        {
          v17 = (uint64_t *)(v14 + 16 * v16);
          goto LABEL_21;
        }
      }
    }
    v17 = (uint64_t *)(v14 + 16 * v15);
    goto LABEL_21;
  }
  v23 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a3 + 592))(a3, 101);
  if (!v23)
  {
    v222 = 0;
    v217 = 0;
    goto LABEL_89;
  }
  if ((*(_BYTE *)(v23 + 23) & 0x10) == 0)
  {
    v202 = 0;
    HIBYTE(v260) = 0;
    v205 = &__dst;
    goto LABEL_317;
  }
  v25 = ***(_QWORD ***)v23;
  v26 = *(_QWORD *)(v25 + 152);
  v27 = *(unsigned int *)(v25 + 168);
  if (!(_DWORD)v27)
    goto LABEL_308;
  LODWORD(v28) = (v27 - 1) & ((v23 >> 4) ^ (v23 >> 9));
  v29 = (uint64_t *)(v26 + 16 * v28);
  v30 = *v29;
  if (*v29 != v23)
  {
    v31 = 1;
    while (v30 != -4096)
    {
      v32 = v28 + v31++;
      v28 = v32 & (v27 - 1);
      v30 = *(_QWORD *)(v26 + 16 * v28);
      if (v30 == v23)
      {
        v29 = (uint64_t *)(v26 + 16 * v28);
        goto LABEL_309;
      }
    }
LABEL_308:
    v29 = (uint64_t *)(v26 + 16 * v27);
  }
LABEL_309:
  v201 = (unint64_t *)v29[1];
  v204 = *v201;
  v203 = v201 + 2;
  v202 = v204;
  if (v204 > 0x7FFFFFFFFFFFFFF7)
    goto LABEL_337;
  if (v202 >= 0x17)
  {
    v206 = (v202 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v202 | 7) != 0x17)
      v206 = v202 | 7;
    v207 = v206 + 1;
    v205 = (uint64_t *)operator new(v206 + 1);
    v259 = (_QWORD *)v202;
    v260 = v207 | 0x8000000000000000;
    __dst = (uint64_t)v205;
  }
  else
  {
    HIBYTE(v260) = v202;
    v205 = &__dst;
    if (!v202)
      goto LABEL_317;
  }
  memmove(v205, v203, v202);
LABEL_317:
  *((_BYTE *)v205 + v202) = 0;
  if (v260 >= 0)
    v208 = &__dst;
  else
    v208 = (uint64_t *)__dst;
  if (v260 >= 0)
    v209 = HIBYTE(v260) & 0x7F;
  else
    v209 = (size_t)v259;
  v210 = sub_1C4D6889C((uint64_t)&v244, v208, v209);
  if (SHIBYTE(v260) < 0)
    operator delete((void *)__dst);
  BYTE6(v249) = 1;
  v211 = v247 - v248 + WORD4(v247);
  sub_1C5589334(&v244, 4, v210);
  if ((_BYTE)v251)
  {
    if (!v250)
      v250 = 1;
    v212 = v248;
    if ((_QWORD)v248 == *((_QWORD *)&v248 + 1))
    {
      sub_1C4D663A4(&v244, 1uLL);
      v212 = v248;
    }
    *(_QWORD *)&v248 = v212 - 1;
    *(_BYTE *)(v212 - 1) = 0;
    sub_1C4D66288(&v244, 6, v247 - v248 + DWORD2(v247));
  }
  v213 = sub_1C4D66580((uint64_t)&v244, v211);
  v222 = (char *)operator new(4uLL);
  *(_DWORD *)v222 = v213;
  v217 = v222 + 4;
LABEL_89:
  v218 = llvm::GPUMetadataEmitter::EmitCommonMetadata(a1, (uint64_t)&v244, v24, a3, a4, v253);
  __dst = 1;
  for (i = 8; i != 264; i += 16)
    *(uint64_t *)((char *)&__dst + i) = -4096;
  v228 = "agx.interpolations";
  LOWORD(v231) = 259;
  NamedMetadata = llvm::Module::getNamedMetadata(v9, (uint64_t)&v228);
  if (NamedMetadata)
  {
    v77 = NamedMetadata;
    v78 = *(unsigned int *)(*(_QWORD *)(NamedMetadata + 48) + 8);
    if ((_DWORD)v78)
    {
      v79 = 0;
      v80 = 8 * v78;
      do
      {
        v81 = *(_QWORD *)(**(_QWORD **)(v77 + 48) + v79);
        v82 = *(unsigned int *)(v81 + 8);
        if (*(_QWORD *)(v81 - 8 * v82))
        {
          v228 = 0;
          v228 = *(char **)(*(_QWORD *)(v81 - 8 * v82) + 128);
          sub_1C485BD74((uint64_t)&__dst, &v228)[1] = v81;
        }
        v79 += 8;
      }
      while (v80 != v79);
    }
  }
  v241 = 0;
  v242 = 0;
  v243 = 0;
  __p = 0;
  v239 = 0;
  v240 = 0;
  v83 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 560))(a3);
  v84 = *(_QWORD *)(v83 + 40);
  v228 = "tpp_functions";
  LOWORD(v231) = 259;
  v85 = llvm::Module::getNamedMetadata(v84, (uint64_t)&v228);
  if (v85 && (v86 = *(_QWORD *)(v85 + 48), v87 = *(unsigned int *)(v86 + 8), (_DWORD)v87))
  {
    v88 = *(uint64_t **)v86;
    v89 = v87 - 1;
    do
    {
      v90 = *v88++;
      v91 = *(_QWORD *)(*(_QWORD *)(v90 - 8 * *(unsigned int *)(v90 + 8)) + 128);
      v93 = v89-- != 0;
      v118 = v91 == v83;
      v94 = v91 != v83;
    }
    while (!v118 && v93);
  }
  else
  {
    v94 = 1;
  }
  v214 = v94;
  if (*(char *)(v9 + 239) < 0)
    sub_1C47EBC30(&v237, *(void **)(v9 + 216), *(_QWORD *)(v9 + 224));
  else
    v237 = *(std::string *)(v9 + 216);
  if (!std::string::compare(&v237, 0, 4uLL, "agx1"))
  {
    v95 = 27;
  }
  else if (!std::string::compare(&v237, 0, 4uLL, "agx2"))
  {
    v95 = 28;
  }
  else if (!std::string::compare(&v237, 0, 4uLL, "agx3"))
  {
    v95 = 29;
  }
  else
  {
    v95 = 0;
  }
  v219 = v95;
  if (SHIBYTE(v237.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v237.__r_.__value_.__l.__data_);
  (*(void (**)(char **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a3 + 128))(&v228, a3, 9);
  (*(void (**)(char **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a3 + 136))(&v226, a3, 9);
  v96 = v226;
  v216 = v228;
  if (v228)
  {
    (*(void (**)(char **__return_ptr))(*(_QWORD *)v228 + 16))(&v228);
    v97 = v228;
  }
  else
  {
    v97 = 0;
  }
  v215 = v96;
  (*(void (**)(char **__return_ptr, char *))(*(_QWORD *)v96 + 16))(&v228, v96);
  v98 = v228;
  if (((*(uint64_t (**)(char *, char *))(*(_QWORD *)v97 + 24))(v97, v228) & 1) == 0)
  {
    v100 = 0;
    v99 = 0;
    while (1)
    {
      v101 = (_QWORD *)(*(uint64_t (**)(char *))(*(_QWORD *)v97 + 32))(v97);
      v102 = *v101;
      v103 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a3 + 400))(a3, *v101);
      v105 = v104;
      v106 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 336))(a3);
      v107 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v106 + 24))(v106, v105);
      if ((__dst & 1) != 0)
      {
        v108 = 16;
        v109 = &v259;
      }
      else
      {
        v108 = v260;
        if (!(_DWORD)v260)
          goto LABEL_132;
        v109 = v259;
      }
      v110 = v108 - 1;
      v111 = (v108 - 1) & ((v102 >> 4) ^ (v102 >> 9));
      v112 = v109[2 * v111];
      if (v102 != v112)
      {
        v113 = 1;
        while (v112 != -4096)
        {
          v114 = v111 + v113++;
          v111 = v114 & v110;
          v112 = v109[2 * v111];
          if (v102 == v112)
            goto LABEL_129;
        }
LABEL_132:
        v115 = 0;
        goto LABEL_133;
      }
LABEL_129:
      v115 = (_QWORD *)v109[2 * v111 + 1];
LABEL_133:
      v116 = (HIDWORD(v103) + v107 - 1) / v107 + v103;
      FragmentShaderIterationData = llvm::GPUMetadataEmitter::CreateFragmentShaderIterationData((uint64_t)a1, v115, v103, a3, (uint64_t)&__p, (uint64_t)&v241);
      v118 = v116 <= v99 || FragmentShaderIterationData == 0;
      if (!v118)
        v99 = v116;
      if (v116 > v100 && FragmentShaderIterationData > 0xFFu)
        v100 = v116;
      (*(void (**)(char *))(*(_QWORD *)v97 + 40))(v97);
      if (((*(uint64_t (**)(char *, char *))(*(_QWORD *)v97 + 24))(v97, v98) & 1) != 0)
        goto LABEL_144;
    }
  }
  v99 = 0;
  v100 = 0;
LABEL_144:
  if (v98)
    (*(void (**)(char *))(*(_QWORD *)v98 + 8))(v98);
  (*(void (**)(char *))(*(_QWORD *)v97 + 8))(v97);
  (*(void (**)(char *))(*(_QWORD *)v215 + 8))(v215);
  if (v216)
    (*(void (**)(char *))(*(_QWORD *)v216 + 8))(v216);
  v120 = atomic_load((unsigned __int8 *)&qword_1ED806368);
  if ((v120 & 1) == 0 && __cxa_guard_acquire(&qword_1ED806368))
  {
    byte_1ED806359 = 0;
    __cxa_guard_release(&qword_1ED806368);
  }
  if (byte_1ED806359)
    v121 = v99 + 16;
  else
    v121 = v99;
  if (byte_1ED806359)
    v122 = v100 + 16;
  else
    v122 = v100;
  sub_1C558723C(&v228, (uint64_t)&v244, (int *)v241, v242, a5);
  v123 = v228;
  if (v229 == v228)
    v124 = (char *)&flatbuffers::data<flatbuffers::Offset<AGCCodeGenerator::FragmentShaderIteration>,std::allocator<flatbuffers::Offset<AGCCodeGenerator::FragmentShaderIteration>>>(std::vector<flatbuffers::Offset<AGCCodeGenerator::FragmentShaderIteration>> const&)::t;
  else
    v124 = v228;
  v125 = sub_1C558A24C((uint64_t)&v244, (uint64_t)v124, (v229 - v228) >> 2);
  if (v123)
    operator delete(v123);
  if (v217 == v222)
    v126 = (char *)&flatbuffers::data<flatbuffers::Offset<AGCCodeGenerator::ShaderPhase>,std::allocator<flatbuffers::Offset<AGCCodeGenerator::ShaderPhase>>>(std::vector<flatbuffers::Offset<AGCCodeGenerator::ShaderPhase>> const&)::t;
  else
    v126 = v222;
  v127 = sub_1C5589EF0((uint64_t)&v244, (uint64_t)v126, (v217 - v222) >> 2);
  BYTE6(v249) = 1;
  v128 = WORD4(v247);
  v129 = v248;
  v130 = v247;
  if (v122 || (_BYTE)v251)
  {
    if (v250 <= 3)
      v250 = 4;
    v131 = ((_BYTE)v248 - ((_BYTE)v247 + BYTE8(v247))) & 3;
    v132 = *((_QWORD *)&v248 + 1);
    if ((_QWORD)v248 - *((_QWORD *)&v248 + 1) < v131)
    {
      sub_1C4D663A4(&v244, ((_BYTE)v248 - ((_BYTE)v247 + BYTE8(v247))) & 3);
      *(_QWORD *)&v248 = v248 - v131;
    }
    else
    {
      v133 = v248 - v131;
      *(_QWORD *)&v248 = v248 - v131;
      if ((((_BYTE)v129 - ((_BYTE)v247 + BYTE8(v247))) & 3) == 0)
      {
LABEL_172:
        if ((unint64_t)(v133 - v132) <= 3)
        {
          sub_1C4D663A4(&v244, 4uLL);
          v133 = v248;
        }
        *(_DWORD *)(v133 - 4) = v122;
        *(_QWORD *)&v248 = v133 - 4;
        sub_1C4D66288(&v244, 4, v247 - (v133 - 4) + DWORD2(v247));
        goto LABEL_175;
      }
    }
    v134 = 0;
    do
      *(_BYTE *)(v248 + v134++) = 0;
    while (v131 != v134);
    v132 = *((_QWORD *)&v248 + 1);
    v133 = v248;
    goto LABEL_172;
  }
LABEL_175:
  if (*(_BYTE *)(a5 + 73))
  {
    if (!v250)
      v250 = 1;
    v135 = v248;
    if ((_QWORD)v248 == *((_QWORD *)&v248 + 1))
    {
      sub_1C4D663A4(&v244, 1uLL);
      v135 = v248;
    }
    *(_QWORD *)&v248 = v135 - 1;
    v136 = 2;
LABEL_187:
    *(_BYTE *)(v135 - 1) = v136;
    goto LABEL_188;
  }
  if (*(_BYTE *)(a5 + 72))
  {
    if (!v250)
      v250 = 1;
    v135 = v248;
    if ((_QWORD)v248 == *((_QWORD *)&v248 + 1))
    {
      sub_1C4D663A4(&v244, 1uLL);
      v135 = v248;
    }
    *(_QWORD *)&v248 = v135 - 1;
    v136 = 1;
    goto LABEL_187;
  }
  if (!(_BYTE)v251)
    goto LABEL_189;
  if (!v250)
    v250 = 1;
  v200 = v248;
  if ((_QWORD)v248 == *((_QWORD *)&v248 + 1))
  {
    sub_1C4D663A4(&v244, 1uLL);
    v200 = v248;
  }
  *(_QWORD *)&v248 = v200 - 1;
  *(_BYTE *)(v200 - 1) = 0;
LABEL_188:
  sub_1C4D66288(&v244, 6, v247 - v248 + DWORD2(v247));
LABEL_189:
  sub_1C558973C(&v244, v125);
  sub_1C5589334(&v244, 12, v127);
  v137 = *(_QWORD *)(a5 + 40);
  if (v137 || (v138 = v251, (_BYTE)v251))
  {
    v139 = sub_1C55898D8((uint64_t)&v244, v137);
    sub_1C4D66288(&v244, 14, v139);
    v138 = v251;
  }
  v140 = *(_QWORD *)(a5 + 48);
  if (v140 || v138)
  {
    v141 = sub_1C55898D8((uint64_t)&v244, v140);
    sub_1C4D66288(&v244, 18, v141);
    v138 = v251;
  }
  v142 = *(_QWORD *)(a5 + 56);
  if (v142 || v138)
  {
    v143 = sub_1C55898D8((uint64_t)&v244, v142);
    sub_1C4D66288(&v244, 16, v143);
    v138 = v251;
  }
  v144 = *(_QWORD *)(a5 + 64);
  if (v144 || v138)
  {
    v145 = sub_1C55898D8((uint64_t)&v244, v144);
    sub_1C4D66288(&v244, 20, v145);
  }
  v146 = (**(uint64_t (***)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))a3)(a3, 30, 0, 1, 2);
  if (v146 || (_BYTE)v251)
  {
    v147 = sub_1C4D6650C((uint64_t)&v244, v146 != 0);
    sub_1C4D66288(&v244, 22, v147);
  }
  v148 = sub_1C4D66580((uint64_t)&v244, v130 - v129 + v128);
  BYTE6(v249) = 1;
  v149 = v247 - v248 + WORD4(v247);
  sub_1C55895A0(&v244, v218);
  if (v148)
  {
    if (v250 <= 3)
      v250 = 4;
    v150 = v247;
    v151 = DWORD2(v247);
    v152 = ((_BYTE)v248 - ((_BYTE)v247 + BYTE8(v247))) & 3;
    if ((_QWORD)v248 - *((_QWORD *)&v248 + 1) < v152)
    {
      sub_1C4D663A4(&v244, ((_BYTE)v248 - ((_BYTE)v247 + BYTE8(v247))) & 3);
      *(_QWORD *)&v248 = v248 - v152;
    }
    else
    {
      v153 = v248 - v152;
      *(_QWORD *)&v248 = v248 - v152;
      if (!v152)
        goto LABEL_212;
    }
    v154 = 0;
    do
      *(_BYTE *)(v248 + v154++) = 0;
    while (v152 != v154);
    v151 = DWORD2(v247);
    v153 = v248;
    v150 = v247;
LABEL_212:
    v155 = v151 - v153 + v150 - v148;
    v156 = v155 + 4;
    if (v155 == -4 && !(_BYTE)v251)
      goto LABEL_223;
    if (v250 <= 3)
      v250 = 4;
    v157 = ((_BYTE)v153 - ((_BYTE)v150 + (_BYTE)v151)) & 3;
    v158 = *((_QWORD *)&v248 + 1);
    if (v153 - *((_QWORD *)&v248 + 1) < v157)
    {
      sub_1C4D663A4(&v244, v157);
      *(_QWORD *)&v248 = v248 - v157;
    }
    else
    {
      v159 = v153 - v157;
      *(_QWORD *)&v248 = v153 - v157;
      if (!v157)
      {
LABEL_220:
        if ((unint64_t)(v159 - v158) <= 3)
        {
          sub_1C4D663A4(&v244, 4uLL);
          v159 = v248;
        }
        *(_DWORD *)(v159 - 4) = v156;
        *(_QWORD *)&v248 = v159 - 4;
        sub_1C4D66288(&v244, 8, v247 - (v159 - 4) + DWORD2(v247));
        goto LABEL_223;
      }
    }
    v160 = 0;
    do
      *(_BYTE *)(v248 + v160++) = 0;
    while (v157 != v160);
    v158 = *((_QWORD *)&v248 + 1);
    v159 = v248;
    goto LABEL_220;
  }
LABEL_223:
  v161 = sub_1C4D66580((uint64_t)&v244, v149);
  sub_1C55899C0((uint64_t)&v244, v161);
  llvm::GPUMetadataEmitter::EmitMetadataFromFB((uint64_t)a1, v162, a3, (uint64_t ***)a4, v221, a7, "__fragment", &v244, 0);
  if ((v219 & 0x1E) != 0x1C)
    goto LABEL_289;
  MachOSection = llvm::MCContext::getMachOSection(v221, (uint64_t)"__GPU_METADATA_2", 0x10uLL, (uint64_t)"__fragment", 10, 0, 0, 0, 0);
  *(_BYTE *)(MachOSection + 24) = 3;
  (*(void (**)(llvm::MCStreamer *, size_t, _QWORD))(*(_QWORD *)a7 + 168))(a7, MachOSection, 0);
  (*(void (**)(llvm::MCStreamer *, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a7 + 632))(a7, 8, 0, 1, 0);
  v228 = 0;
  LOBYTE(v229) = 0;
  v230 = xmmword_1C865F170;
  v231 = 0u;
  v232 = 0u;
  v233 = 0;
  v234 = 1;
  v235 = 256;
  v236 = 0;
  sub_1C558723C(&v226, (uint64_t)&v228, (int *)__p, v239, a5);
  v164 = v226;
  if (v227 == v226)
    v165 = (char *)&flatbuffers::data<flatbuffers::Offset<AGCCodeGenerator::FragmentShaderIteration>,std::allocator<flatbuffers::Offset<AGCCodeGenerator::FragmentShaderIteration>>>(std::vector<flatbuffers::Offset<AGCCodeGenerator::FragmentShaderIteration>> const&)::t;
  else
    v165 = v226;
  v166 = sub_1C558A24C((uint64_t)&v228, (uint64_t)v165, (v227 - v226) >> 2);
  if (v164)
    operator delete(v164);
  BYTE6(v233) = 1;
  v167 = v231 - v232 + WORD4(v231);
  if (v121 || (_BYTE)v235)
  {
    if (v234 <= 3)
      v234 = 4;
    v168 = ((_BYTE)v232 - ((_BYTE)v231 + BYTE8(v231))) & 3;
    v169 = *((_QWORD *)&v232 + 1);
    if ((_QWORD)v232 - *((_QWORD *)&v232 + 1) < v168)
    {
      sub_1C4D663A4((uint64_t *)&v228, ((_BYTE)v232 - ((_BYTE)v231 + BYTE8(v231))) & 3);
      *(_QWORD *)&v232 = v232 - v168;
    }
    else
    {
      v170 = v232 - v168;
      *(_QWORD *)&v232 = v232 - v168;
      if (!v168)
      {
LABEL_238:
        if ((unint64_t)(v170 - v169) <= 3)
        {
          sub_1C4D663A4((uint64_t *)&v228, 4uLL);
          v170 = v232;
        }
        *(_DWORD *)(v170 - 4) = v121;
        *(_QWORD *)&v232 = v170 - 4;
        sub_1C4D66288((uint64_t *)&v228, 6, v231 - (v170 - 4) + DWORD2(v231));
        goto LABEL_241;
      }
    }
    v171 = 0;
    do
      *(_BYTE *)(v232 + v171++) = 0;
    while (v168 != v171);
    v169 = *((_QWORD *)&v232 + 1);
    v170 = v232;
    goto LABEL_238;
  }
LABEL_241:
  sub_1C558973C((uint64_t *)&v228, v166);
  v172 = *(_DWORD *)(a5 + 16);
  if (!v172 && !(_BYTE)v235)
    goto LABEL_253;
  if (v234 <= 3)
    v234 = 4;
  v173 = *((_QWORD *)&v232 + 1);
  v174 = ((_BYTE)v232 - ((_BYTE)v231 + BYTE8(v231))) & 3;
  if ((_QWORD)v232 - *((_QWORD *)&v232 + 1) < v174)
  {
    sub_1C4D663A4((uint64_t *)&v228, ((_BYTE)v232 - ((_BYTE)v231 + BYTE8(v231))) & 3);
    *(_QWORD *)&v232 = v232 - v174;
LABEL_247:
    v176 = 0;
    do
      *(_BYTE *)(v232 + v176++) = 0;
    while (v174 != v176);
    v173 = *((_QWORD *)&v232 + 1);
    v175 = v232;
    goto LABEL_250;
  }
  v175 = v232 - v174;
  *(_QWORD *)&v232 = v232 - v174;
  if (v174)
    goto LABEL_247;
LABEL_250:
  if ((unint64_t)(v175 - v173) <= 3)
  {
    sub_1C4D663A4((uint64_t *)&v228, 4uLL);
    v175 = v232;
  }
  *(_DWORD *)(v175 - 4) = v172;
  *(_QWORD *)&v232 = v175 - 4;
  sub_1C4D66288((uint64_t *)&v228, 4, v231 - (v175 - 4) + DWORD2(v231));
LABEL_253:
  v177 = sub_1C4D66580((uint64_t)&v228, v167);
  BYTE6(v233) = 1;
  v178 = DWORD2(v231);
  v179 = v231;
  v180 = v231 - v232 + WORD4(v231);
  v181 = v214;
  if (!v177)
    v181 = 1;
  if ((v181 & 1) == 0)
  {
    v182 = v177;
    if (v234 <= 3)
      v234 = 4;
    v183 = ((_BYTE)v232 - ((_BYTE)v231 + BYTE8(v231))) & 3;
    if ((_QWORD)v232 - *((_QWORD *)&v232 + 1) < v183)
    {
      sub_1C4D663A4((uint64_t *)&v228, ((_BYTE)v232 - ((_BYTE)v231 + BYTE8(v231))) & 3);
      *(_QWORD *)&v232 = v232 - v183;
    }
    else
    {
      v184 = v232 - v183;
      *(_QWORD *)&v232 = v232 - v183;
      if (!v183)
        goto LABEL_263;
    }
    v185 = 0;
    do
      *(_BYTE *)(v232 + v185++) = 0;
    while (v183 != v185);
    v178 = DWORD2(v231);
    v184 = v232;
    v179 = v231;
LABEL_263:
    v186 = v178 - v184 + v179 - v182;
    v187 = v186 + 4;
    if (v186 == -4 && !(_BYTE)v235)
      goto LABEL_274;
    if (v234 <= 3)
      v234 = 4;
    v188 = ((_BYTE)v184 - ((_BYTE)v179 + (_BYTE)v178)) & 3;
    v189 = *((_QWORD *)&v232 + 1);
    if (v184 - *((_QWORD *)&v232 + 1) < v188)
    {
      sub_1C4D663A4((uint64_t *)&v228, v188);
      *(_QWORD *)&v232 = v232 - v188;
    }
    else
    {
      v190 = v184 - v188;
      *(_QWORD *)&v232 = v184 - v188;
      if (!v188)
      {
LABEL_271:
        if ((unint64_t)(v190 - v189) <= 3)
        {
          sub_1C4D663A4((uint64_t *)&v228, 4uLL);
          v190 = v232;
        }
        *(_DWORD *)(v190 - 4) = v187;
        *(_QWORD *)&v232 = v190 - 4;
        sub_1C4D66288((uint64_t *)&v228, 4, v231 - (v190 - 4) + DWORD2(v231));
        goto LABEL_274;
      }
    }
    v191 = 0;
    do
      *(_BYTE *)(v232 + v191++) = 0;
    while (v188 != v191);
    v189 = *((_QWORD *)&v232 + 1);
    v190 = v232;
    goto LABEL_271;
  }
LABEL_274:
  v192 = (**(uint64_t (***)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))a3)(a3, 1, 0, 1, 1);
  if (v192)
    v193 = 0;
  else
    v193 = v235 == 0;
  if (!v193)
  {
    if (v234 <= 3)
      v234 = 4;
    v194 = *((_QWORD *)&v232 + 1);
    v195 = ((_BYTE)v232 - ((_BYTE)v231 + BYTE8(v231))) & 3;
    if ((_QWORD)v232 - *((_QWORD *)&v232 + 1) < v195)
    {
      sub_1C4D663A4((uint64_t *)&v228, ((_BYTE)v232 - ((_BYTE)v231 + BYTE8(v231))) & 3);
      *(_QWORD *)&v232 = v232 - v195;
    }
    else
    {
      v196 = v232 - v195;
      *(_QWORD *)&v232 = v232 - v195;
      if (!v195)
      {
LABEL_285:
        if ((unint64_t)(v196 - v194) <= 3)
        {
          sub_1C4D663A4((uint64_t *)&v228, 4uLL);
          v196 = v232;
        }
        *(_DWORD *)(v196 - 4) = v192;
        *(_QWORD *)&v232 = v196 - 4;
        sub_1C4D66288((uint64_t *)&v228, 6, v231 - (v196 - 4) + DWORD2(v231));
        goto LABEL_288;
      }
    }
    v197 = 0;
    do
      *(_BYTE *)(v232 + v197++) = 0;
    while (v195 != v197);
    v194 = *((_QWORD *)&v232 + 1);
    v196 = v232;
    goto LABEL_285;
  }
LABEL_288:
  v198 = sub_1C4D66580((uint64_t)&v228, v180);
  sub_1C55899C0((uint64_t)&v228, v198);
  llvm::GPUMetadataEmitter::EmitSerializedMetadataFlatbuffer((uint64_t)a1, (uint64_t)(a1 + 191), &v228, (uint64_t)a7);
  sub_1C4765570(&v228);
LABEL_289:
  if (__p)
  {
    v239 = (int *)__p;
    operator delete(__p);
  }
  if (v241)
  {
    v242 = (int *)v241;
    operator delete(v241);
  }
  if ((__dst & 1) == 0)
    MEMORY[0x1CAA32FB4](v259, 8);
  if (v222)
    operator delete(v222);
  sub_1C4765570(&v244);
  if (v255)
  {
    v256 = v255;
    operator delete(v255);
  }
  MEMORY[0x1CAA32FB4](v253[0], 8);
  return "__fragment";
}

const char *llvm::GPUMetadataEmitter::EmitDriverShaderMetadata(llvm::GPUMetadataEmitter *this, const llvm::DataLayout *a2, llvm::FunctionGroup *a3, const llvm::Function *a4, llvm::MCContext *a5, llvm::MCStreamer *a6)
{
  uint64_t v11;
  uint64_t v12;
  int v13;
  __int16 v14;
  int v15;
  int v16;
  uint64_t v18;
  char v19;
  __int128 v20;
  __int128 v21;
  __int128 v22;
  uint64_t v23;
  uint64_t v24;
  __int16 v25;
  uint64_t v26;
  uint64_t v27[2];
  int v28;
  void *v29;
  void *v30;
  uint64_t v31;

  v11 = *((_QWORD *)a4 + 5);
  v27[0] = 0;
  v27[1] = 0;
  v28 = 0;
  v30 = 0;
  v31 = 0;
  v29 = 0;
  sub_1C5E9D34C(v11, (uint64_t)v27);
  v18 = 0;
  v19 = 0;
  v20 = xmmword_1C865F170;
  v21 = 0u;
  v22 = 0u;
  v23 = 0;
  v24 = 1;
  v25 = 256;
  v26 = 0;
  v13 = llvm::GPUMetadataEmitter::EmitCommonMetadata((uint64_t *)this, (uint64_t)&v18, v12, (uint64_t)a3, (uint64_t)a4, v27);
  BYTE6(v23) = 1;
  v14 = v21 - v22 + WORD4(v21);
  sub_1C55895A0(&v18, v13);
  v15 = sub_1C4D66580((uint64_t)&v18, v14);
  sub_1C55899C0((uint64_t)&v18, v15);
  llvm::GPUMetadataEmitter::EmitMetadataFromFB((uint64_t)this, v16, (uint64_t)a3, (uint64_t ***)a4, (uint64_t)a5, a6, "__fragment", &v18, 0);
  sub_1C4765570(&v18);
  if (v29)
  {
    v30 = v29;
    operator delete(v29);
  }
  MEMORY[0x1CAA32FB4](v27[0], 8);
  return "__fragment";
}

_QWORD *llvm::GPUMetadataEmitter::EmitVIDMAListMetadata(llvm::GPUMetadataEmitter *this, llvm::FunctionGroup *a2, llvm::MCContext *a3, llvm::MCStreamer *a4)
{
  _QWORD *result;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  char *v13;
  char *v14;
  int v15;
  void *v16;
  uint64_t v17;
  int v18;
  __int16 v19;
  int v20;
  const void *v21;
  unsigned int v22;
  size_t v23;
  void **p_dst;
  int *v25;
  char *v26;
  char *v27;
  int v28;
  int v29;
  int v30;
  int v31;
  __int16 v32;
  int v33;
  unint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  BOOL v38;
  uint64_t v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  BOOL v43;
  uint64_t v44;
  unint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  uint64_t v51;
  int v52;
  int v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  char *v57;
  char *v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  char *v62;
  unint64_t v63;
  char *v64;
  char *v65;
  uint64_t v66;
  unint64_t v67;
  uint64_t v69;
  char *v70;
  uint64_t v71;
  char *v72;
  unint64_t v73;
  BOOL v74;
  _BOOL4 v75;
  uint64_t v77;
  unint64_t v78;
  BOOL v79;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  char *v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  size_t MachOSection;
  llvm::FunctionGroup *v90;
  llvm::MCContext *v91;
  llvm::GPUMetadataEmitter *v92;
  llvm::MCStreamer *v93;
  int *v94;
  __int128 v95;
  void **__dst;
  uint64_t v97;
  char *v98;
  unint64_t v99;
  __int128 v100;
  uint64_t v101;
  char v102;
  uint64_t v103;
  char v104;
  __int128 v105;
  __int128 v106;
  __int128 v107;
  uint64_t v108;
  unint64_t v109;
  __int16 v110;
  uint64_t v111;

  result = (_QWORD *)(*(uint64_t (**)(llvm::FunctionGroup *))(*(_QWORD *)a2 + 192))(a2);
  if (!v9)
    return result;
  v91 = a3;
  v92 = this;
  v93 = a4;
  v103 = 0;
  v104 = 0;
  v105 = xmmword_1C865F170;
  v106 = 0u;
  v107 = 0u;
  v108 = 0;
  v109 = 1;
  v110 = 256;
  v111 = 0;
  v90 = a2;
  v10 = (*(uint64_t (**)(llvm::FunctionGroup *))(*(_QWORD *)a2 + 192))(a2);
  v12 = 0;
  v13 = 0;
  if (v11)
  {
    v25 = (int *)v10;
    v26 = 0;
    v13 = 0;
    v27 = 0;
    v94 = (int *)(v10 + 16 * v11);
    while (1)
    {
      v29 = *v25;
      v28 = v25[1];
      v30 = v25[2];
      v31 = v25[3];
      BYTE6(v108) = 1;
      v32 = v107;
      v95 = v106;
      if (!v31)
      {
        v33 = v110;
        if (!(_BYTE)v110)
          goto LABEL_22;
      }
      if (v109 <= 3)
        v109 = 4;
      v34 = ((_BYTE)v107 - ((_BYTE)v106 + BYTE8(v106))) & 3;
      v35 = *((_QWORD *)&v107 + 1);
      if ((_QWORD)v107 - *((_QWORD *)&v107 + 1) < v34)
        break;
      v36 = v107 - v34;
      *(_QWORD *)&v107 = v107 - v34;
      if ((((_BYTE)v32 - ((_BYTE)v106 + BYTE8(v106))) & 3) != 0)
        goto LABEL_16;
LABEL_19:
      if ((unint64_t)(v36 - v35) <= 3)
      {
        sub_1C4D663A4(&v103, 4uLL);
        v36 = v107;
      }
      *(_DWORD *)(v36 - 4) = v31;
      *(_QWORD *)&v107 = v36 - 4;
      sub_1C4D66288(&v103, 10, v106 - (v36 - 4) + DWORD2(v106));
      v33 = v110;
LABEL_22:
      if (v30 | v33)
      {
        if (v109 <= 3)
          v109 = 4;
        v39 = *((_QWORD *)&v107 + 1);
        v40 = ((_BYTE)v107 - ((_BYTE)v106 + BYTE8(v106))) & 3;
        if ((_QWORD)v107 - *((_QWORD *)&v107 + 1) >= v40)
        {
          v41 = v107 - v40;
          *(_QWORD *)&v107 = v107 - v40;
          if (v40)
          {
LABEL_29:
            v42 = 0;
            do
              *(_BYTE *)(v107 + v42++) = 0;
            while (v40 != v42);
            v39 = *((_QWORD *)&v107 + 1);
            v41 = v107;
          }
          if ((unint64_t)(v41 - v39) <= 3)
          {
            sub_1C4D663A4(&v103, 4uLL);
            v41 = v107;
          }
          *(_DWORD *)(v41 - 4) = v30;
          *(_QWORD *)&v107 = v41 - 4;
          sub_1C4D66288(&v103, 8, v106 - (v41 - 4) + DWORD2(v106));
          v38 = (_BYTE)v110 == 0;
          if (v28)
            goto LABEL_38;
          goto LABEL_35;
        }
        sub_1C4D663A4(&v103, ((_BYTE)v107 - ((_BYTE)v106 + BYTE8(v106))) & 3);
        *(_QWORD *)&v107 = v107 - v40;
        goto LABEL_29;
      }
      v38 = 1;
      if (v28)
        goto LABEL_38;
LABEL_35:
      if (v38)
      {
        v43 = 1;
        if (v29)
          goto LABEL_49;
        goto LABEL_48;
      }
LABEL_38:
      if (v109 <= 3)
        v109 = 4;
      v44 = *((_QWORD *)&v107 + 1);
      v45 = ((_BYTE)v107 - ((_BYTE)v106 + BYTE8(v106))) & 3;
      if ((_QWORD)v107 - *((_QWORD *)&v107 + 1) < v45)
      {
        sub_1C4D663A4(&v103, ((_BYTE)v107 - ((_BYTE)v106 + BYTE8(v106))) & 3);
        *(_QWORD *)&v107 = v107 - v45;
      }
      else
      {
        v46 = v107 - v45;
        *(_QWORD *)&v107 = v107 - v45;
        if (!v45)
          goto LABEL_45;
      }
      v47 = 0;
      do
        *(_BYTE *)(v107 + v47++) = 0;
      while (v45 != v47);
      v44 = *((_QWORD *)&v107 + 1);
      v46 = v107;
LABEL_45:
      if ((unint64_t)(v46 - v44) <= 3)
      {
        sub_1C4D663A4(&v103, 4uLL);
        v46 = v107;
      }
      *(_DWORD *)(v46 - 4) = v28;
      *(_QWORD *)&v107 = v46 - 4;
      sub_1C4D66288(&v103, 6, v106 - (v46 - 4) + DWORD2(v106));
      v43 = (_BYTE)v110 == 0;
      if (v29)
      {
LABEL_49:
        if (v109 <= 3)
          v109 = 4;
        v48 = *((_QWORD *)&v107 + 1);
        v49 = ((_BYTE)v107 - ((_BYTE)v106 + BYTE8(v106))) & 3;
        if ((_QWORD)v107 - *((_QWORD *)&v107 + 1) >= v49)
        {
          v50 = v107 - v49;
          *(_QWORD *)&v107 = v107 - v49;
          if (v49)
          {
LABEL_53:
            v51 = 0;
            do
              *(_BYTE *)(v107 + v51++) = 0;
            while (v49 != v51);
            v48 = *((_QWORD *)&v107 + 1);
            v50 = v107;
          }
          if ((unint64_t)(v50 - v48) <= 3)
          {
            sub_1C4D663A4(&v103, 4uLL);
            v50 = v107;
          }
          *(_DWORD *)(v50 - 4) = v29;
          *(_QWORD *)&v107 = v50 - 4;
          sub_1C4D66288(&v103, 4, v106 - (v50 - 4) + DWORD2(v106));
          goto LABEL_59;
        }
        sub_1C4D663A4(&v103, ((_BYTE)v107 - ((_BYTE)v106 + BYTE8(v106))) & 3);
        *(_QWORD *)&v107 = v107 - v49;
        goto LABEL_53;
      }
LABEL_48:
      if (!v43)
        goto LABEL_49;
LABEL_59:
      v52 = sub_1C4D66580((uint64_t)&v103, (unsigned __int16)v95 - v32 + WORD4(v95));
      v53 = v52;
      if (v27 >= v26)
      {
        v54 = (v27 - v13) >> 2;
        v55 = v54 + 1;
        if ((unint64_t)(v54 + 1) >> 62)
          abort();
        if ((v26 - v13) >> 1 > v55)
          v55 = (v26 - v13) >> 1;
        if ((unint64_t)(v26 - v13) >= 0x7FFFFFFFFFFFFFFCLL)
          v56 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v56 = v55;
        if (v56)
        {
          if (v56 >> 62)
            sub_1C4764EE4();
          v57 = (char *)operator new(4 * v56);
        }
        else
        {
          v57 = 0;
        }
        v58 = &v57[4 * v54];
        *(_DWORD *)v58 = v53;
        v12 = v58 + 4;
        while (v27 != v13)
        {
          v59 = *((_DWORD *)v27 - 1);
          v27 -= 4;
          *((_DWORD *)v58 - 1) = v59;
          v58 -= 4;
        }
        v26 = &v57[4 * v56];
        if (v13)
          operator delete(v13);
        v13 = v58;
      }
      else
      {
        *(_DWORD *)v27 = v52;
        v12 = v27 + 4;
      }
      v25 += 4;
      v27 = v12;
      if (v25 == v94)
        goto LABEL_3;
    }
    sub_1C4D663A4(&v103, ((_BYTE)v107 - ((_BYTE)v106 + BYTE8(v106))) & 3);
    *(_QWORD *)&v107 = v107 - v34;
LABEL_16:
    v37 = 0;
    do
      *(_BYTE *)(v107 + v37++) = 0;
    while (v34 != v37);
    v35 = *((_QWORD *)&v107 + 1);
    v36 = v107;
    goto LABEL_19;
  }
LABEL_3:
  if (v12 == v13)
    v14 = (char *)&flatbuffers::data<flatbuffers::Offset<AGCCodeGenerator::VIDMAInfo>,std::allocator<flatbuffers::Offset<AGCCodeGenerator::VIDMAInfo>>>(std::vector<flatbuffers::Offset<AGCCodeGenerator::VIDMAInfo>> const&)::t;
  else
    v14 = v13;
  v15 = sub_1C6174F44((uint64_t)&v103, (uint64_t)v14, (v12 - v13) >> 2);
  v16 = (void *)(*(uint64_t (**)(llvm::FunctionGroup *))(*(_QWORD *)v90 + 208))(v90);
  (*(void (**)(llvm::FunctionGroup *))(*(_QWORD *)v90 + 208))(v90);
  v18 = sub_1C5586000((uint64_t)&v103, v16, v17);
  BYTE6(v108) = 1;
  v19 = v106 - v107 + WORD4(v106);
  sub_1C5589334(&v103, 6, v18);
  sub_1C6279FC0(&v103, v15);
  v20 = sub_1C4D66580((uint64_t)&v103, v19);
  sub_1C55899C0((uint64_t)&v103, v20);
  v21 = (const void *)v107;
  v22 = DWORD2(v106) - v107 + v106;
  v23 = v22;
  v98 = (char *)v107;
  v99 = v22;
  v100 = xmmword_1C865F180;
  v101 = 0;
  v102 = 1;
  if (v22 >= 0x17uLL)
  {
    v60 = (v22 & 0xFFFFFFF8) + 8;
    if ((v23 | 7) == 0x17)
      v61 = v60;
    else
      v61 = v23 | 7;
    p_dst = (void **)operator new(v61 + 1);
    __dst = p_dst;
    v97 = v61 - 0x7FFFFFFFFFFFFFFFLL;
  }
  else
  {
    HIBYTE(v97) = v22;
    p_dst = (void **)&__dst;
    if (!(DWORD2(v106) - (_DWORD)v107 + (_DWORD)v106))
      goto LABEL_88;
  }
  memmove(p_dst, v21, v23);
LABEL_88:
  *((_BYTE *)p_dst + v23) = 0;
  if (v99 >= 5)
  {
    v62 = v98;
    v63 = *(unsigned int *)v98;
    if ((int)v63 >= 1 && v99 - 1 >= v63)
    {
      v64 = &v98[v63];
      if (sub_1C55894E8((uint64_t *)&v98, (int *)&v98[v63]))
      {
        v65 = &v64[-*(int *)v64];
        if (*(unsigned __int16 *)v65 >= 5u)
        {
          v66 = *((unsigned __int16 *)v65 + 2);
          if (v66)
          {
            v67 = &v64[v66] - v98;
            if (((v67 & 3) == 0 || v102 == 0) && v99 >= 5 && v99 - 4 >= v67)
            {
              v69 = *(unsigned int *)&v64[v66];
              if ((int)v69 >= 1 && v99 - 1 >= v67 + v69)
              {
                v70 = &v64[v66];
                v71 = *(unsigned int *)&v64[v66];
                v72 = &v64[v66 + v71];
                v73 = v72 - v98;
                v74 = ((v72 - v98) & 3) == 0 || v102 == 0;
                v75 = v74;
                if (v99 - 4 >= v73 && v75)
                {
                  v77 = *(unsigned int *)v72;
                  if (v77 <= 0x1FFFFFFE)
                  {
                    v78 = 4 * v77 + 4;
                    v79 = v99 > v78 && v99 - v78 >= v73;
                    if (v79 && (_DWORD)v77 != 0)
                    {
                      v81 = 0;
                      v82 = (uint64_t)&v62[v63 + 4 + v66];
                      do
                      {
                        v83 = *(unsigned int *)&v70[v71 + 4];
                        if (!sub_1C55894E8((uint64_t *)&v98, (int *)&v70[v71 + 4 + v83]))
                          break;
                        v84 = v83 - *(int *)&v70[v71 + 4 + v83];
                        v85 = &v70[v71 + v84];
                        v86 = *((unsigned __int16 *)v85 + 2);
                        if (v86 >= 5)
                        {
                          v87 = *((unsigned __int16 *)v85 + 4);
                          if (v87)
                          {
                            if (v99 < 5 || v99 - 4 < v71 + v82 + v83 + v87 - (uint64_t)v98)
                              break;
                          }
                          if (v86 >= 7)
                          {
                            if (*(_WORD *)&v70[v71 + 10 + v84]
                              && (v99 < 5
                               || v99 - 4 < v71
                                          + v82
                                          + v83
                                          + *(unsigned __int16 *)&v70[v71 + 10 + v84]
                                          - (unint64_t)v98))
                            {
                              break;
                            }
                            if (v86 >= 9)
                            {
                              if (*(_WORD *)&v70[v71 + 12 + v84]
                                && (v99 < 5
                                 || v99 - 4 < v71
                                            + v82
                                            + v83
                                            + *(unsigned __int16 *)&v70[v71 + 12 + v84]
                                            - (unint64_t)v98))
                              {
                                break;
                              }
                              if (v86 >= 0xB)
                              {
                                v88 = *(unsigned __int16 *)&v70[v71 + 14 + v84];
                                if (v88)
                                {
                                  if (v99 < 5 || v99 - 4 < v71 + v82 + v83 + v88 - (uint64_t)v98)
                                    break;
                                }
                              }
                            }
                          }
                        }
                        LODWORD(v100) = v100 - 1;
                        ++v81;
                        v82 += 4;
                        v70 += 4;
                      }
                      while (v81 < *(unsigned int *)v72);
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
  if (SHIBYTE(v97) < 0)
    operator delete(__dst);
  MachOSection = llvm::MCContext::getMachOSection((uint64_t)v91, (uint64_t)"__GPU_VIDMALIST", 0xFuLL, (uint64_t)"__vertex", 8, 0, 0, 0, 0);
  *(_BYTE *)(MachOSection + 24) = 3;
  (*(void (**)(llvm::MCStreamer *, size_t, _QWORD))(*(_QWORD *)v93 + 168))(v93, MachOSection, 0);
  (*(void (**)(llvm::MCStreamer *, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v93 + 632))(v93, 8, 0, 1, 0);
  llvm::GPUMetadataEmitter::EmitSerializedMetadataFlatbuffer((uint64_t)v92, (uint64_t)v92 + 5152, &v103, (uint64_t)v93);
  if (v13)
    operator delete(v13);
  return sub_1C4765570(&v103);
}

_QWORD *llvm::GPUMetadataEmitter::EmitStatsMetadata(_QWORD *a1, uint64_t a2, uint64_t a3, int *a4, uint64_t a5, uint64_t a6)
{
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  int v15;
  int v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  unint64_t v23;
  uint64_t v24;
  uint64_t v25;
  int v26;
  BOOL v27;
  int v28;
  uint64_t v29;
  unint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  BOOL v34;
  int v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  BOOL v41;
  int v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  int v47;
  BOOL v48;
  int v49;
  uint64_t v50;
  unint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  BOOL v55;
  int v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  uint64_t v60;
  int v61;
  BOOL v62;
  int v63;
  uint64_t v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  int v68;
  BOOL v69;
  int v70;
  uint64_t v71;
  unint64_t v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  BOOL v76;
  int v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  uint64_t v81;
  int v82;
  BOOL v83;
  int v84;
  uint64_t v85;
  unint64_t v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  BOOL v90;
  int v91;
  uint64_t v92;
  unint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int v96;
  BOOL v97;
  int v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  BOOL v104;
  int v105;
  uint64_t v106;
  unint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  BOOL v111;
  int v112;
  uint64_t v113;
  unint64_t v114;
  uint64_t v115;
  uint64_t v116;
  int v117;
  BOOL v118;
  int v119;
  uint64_t v120;
  unint64_t v121;
  uint64_t v122;
  uint64_t v123;
  int v124;
  BOOL v125;
  int v126;
  uint64_t v127;
  unint64_t v128;
  uint64_t v129;
  uint64_t v130;
  int v131;
  BOOL v132;
  int v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  int v138;
  BOOL v139;
  int v140;
  uint64_t v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  int v145;
  size_t MachOSection;
  _QWORD *result;
  char *v148;
  char *v149;
  char *v150;
  char *v151;
  char **v152;
  char *v153;
  char *v154;
  void **v155;
  size_t v156;
  int v157;
  int v158;
  uint64_t v159;
  unint64_t v160;
  unint64_t v161;
  char *v162;
  char *v163;
  char *v164;
  int v165;
  uint64_t v166;
  unint64_t v167;
  unint64_t v168;
  char *v169;
  char *v170;
  char *v171;
  int v172;
  char *v173;
  char **v174;
  char *v175;
  int v176;
  char *v177;
  int v178;
  __int16 v179;
  int v180;
  size_t v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  void *__p[2];
  char *v186;
  int v187;
  char **v188;
  char *v189[2];
  const char *v190;
  char v191;
  __int128 v192;
  __int128 v193;
  __int128 v194;
  uint64_t v195;
  unint64_t v196;
  __int16 v197;
  uint64_t v198;

  v11 = *(_QWORD *)(a3 + 40);
  v190 = "agx.compiler_counters";
  LOWORD(v193) = 259;
  if (llvm::Module::getNamedMetadata(v11, (uint64_t)&v190))
  {
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 448))(a2);
    v190 = 0;
    v191 = 0;
    v192 = xmmword_1C865F170;
    v193 = 0u;
    v194 = 0u;
    v195 = 0x1000000000000;
    v196 = 1;
    v197 = 256;
    v198 = 0;
    if (v12)
    {
      v13 = v12;
      v196 = 4;
      sub_1C4D663A4((uint64_t *)&v190, 4uLL);
      v14 = v194;
      *(_DWORD *)(v194 - 4) = v13;
      *(_QWORD *)&v194 = v14 - 4;
      sub_1C4D66288((uint64_t *)&v190, 4, v193 - (v14 - 4) + DWORD2(v193));
    }
    v15 = (**(uint64_t (***)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))a2)(a2, 11, 0, 1, 4);
    if (!v15)
    {
      v16 = v197;
      if (!(_BYTE)v197)
      {
LABEL_16:
        v21 = *a4;
        if (!(*a4 | v16))
          goto LABEL_27;
        if (v196 <= 3)
          v196 = 4;
        v22 = *((_QWORD *)&v194 + 1);
        v23 = ((_BYTE)v194 - ((_BYTE)v193 + BYTE8(v193))) & 3;
        if ((_QWORD)v194 - *((_QWORD *)&v194 + 1) < v23)
        {
          sub_1C4D663A4((uint64_t *)&v190, ((_BYTE)v194 - ((_BYTE)v193 + BYTE8(v193))) & 3);
          *(_QWORD *)&v194 = v194 - v23;
        }
        else
        {
          v24 = v194 - v23;
          *(_QWORD *)&v194 = v194 - v23;
          if (!v23)
          {
LABEL_24:
            if ((unint64_t)(v24 - v22) <= 3)
            {
              sub_1C4D663A4((uint64_t *)&v190, 4uLL);
              v24 = v194;
            }
            *(_DWORD *)(v24 - 4) = v21;
            *(_QWORD *)&v194 = v24 - 4;
            sub_1C4D66288((uint64_t *)&v190, 8, v193 - (v24 - 4) + DWORD2(v193));
LABEL_27:
            v26 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 240))(*a1);
            if (v26)
              v27 = 0;
            else
              v27 = v197 == 0;
            if (v27)
              goto LABEL_41;
            v28 = v26;
            if (v196 <= 3)
              v196 = 4;
            v29 = *((_QWORD *)&v194 + 1);
            v30 = ((_BYTE)v194 - ((_BYTE)v193 + BYTE8(v193))) & 3;
            if ((_QWORD)v194 - *((_QWORD *)&v194 + 1) < v30)
            {
              sub_1C4D663A4((uint64_t *)&v190, ((_BYTE)v194 - ((_BYTE)v193 + BYTE8(v193))) & 3);
              *(_QWORD *)&v194 = v194 - v30;
            }
            else
            {
              v31 = v194 - v30;
              *(_QWORD *)&v194 = v194 - v30;
              if (!v30)
              {
LABEL_38:
                if ((unint64_t)(v31 - v29) <= 3)
                {
                  sub_1C4D663A4((uint64_t *)&v190, 4uLL);
                  v31 = v194;
                }
                *(_DWORD *)(v31 - 4) = v28;
                *(_QWORD *)&v194 = v31 - 4;
                sub_1C4D66288((uint64_t *)&v190, 10, v193 - (v31 - 4) + DWORD2(v193));
LABEL_41:
                v33 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 8))(*a1);
                if (v33)
                  v34 = 0;
                else
                  v34 = v197 == 0;
                if (v34)
                  goto LABEL_55;
                v35 = v33;
                if (v196 <= 3)
                  v196 = 4;
                v36 = *((_QWORD *)&v194 + 1);
                v37 = ((_BYTE)v194 - ((_BYTE)v193 + BYTE8(v193))) & 3;
                if ((_QWORD)v194 - *((_QWORD *)&v194 + 1) < v37)
                {
                  sub_1C4D663A4((uint64_t *)&v190, ((_BYTE)v194 - ((_BYTE)v193 + BYTE8(v193))) & 3);
                  *(_QWORD *)&v194 = v194 - v37;
                }
                else
                {
                  v38 = v194 - v37;
                  *(_QWORD *)&v194 = v194 - v37;
                  if (!v37)
                  {
LABEL_52:
                    if ((unint64_t)(v38 - v36) <= 3)
                    {
                      sub_1C4D663A4((uint64_t *)&v190, 4uLL);
                      v38 = v194;
                    }
                    *(_DWORD *)(v38 - 4) = v35;
                    *(_QWORD *)&v194 = v38 - 4;
                    sub_1C4D66288((uint64_t *)&v190, 12, v193 - (v38 - 4) + DWORD2(v193));
LABEL_55:
                    v40 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 56))(*a1);
                    if (v40)
                      v41 = 0;
                    else
                      v41 = v197 == 0;
                    if (v41)
                      goto LABEL_69;
                    v42 = v40;
                    if (v196 <= 3)
                      v196 = 4;
                    v43 = *((_QWORD *)&v194 + 1);
                    v44 = ((_BYTE)v194 - ((_BYTE)v193 + BYTE8(v193))) & 3;
                    if ((_QWORD)v194 - *((_QWORD *)&v194 + 1) < v44)
                    {
                      sub_1C4D663A4((uint64_t *)&v190, ((_BYTE)v194 - ((_BYTE)v193 + BYTE8(v193))) & 3);
                      *(_QWORD *)&v194 = v194 - v44;
                    }
                    else
                    {
                      v45 = v194 - v44;
                      *(_QWORD *)&v194 = v194 - v44;
                      if (!v44)
                      {
LABEL_66:
                        if ((unint64_t)(v45 - v43) <= 3)
                        {
                          sub_1C4D663A4((uint64_t *)&v190, 4uLL);
                          v45 = v194;
                        }
                        *(_DWORD *)(v45 - 4) = v42;
                        *(_QWORD *)&v194 = v45 - 4;
                        sub_1C4D66288((uint64_t *)&v190, 14, v193 - (v45 - 4) + DWORD2(v193));
LABEL_69:
                        v47 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 256))(*a1);
                        if (v47)
                          v48 = 0;
                        else
                          v48 = v197 == 0;
                        if (v48)
                          goto LABEL_83;
                        v49 = v47;
                        if (v196 <= 3)
                          v196 = 4;
                        v50 = *((_QWORD *)&v194 + 1);
                        v51 = ((_BYTE)v194 - ((_BYTE)v193 + BYTE8(v193))) & 3;
                        if ((_QWORD)v194 - *((_QWORD *)&v194 + 1) < v51)
                        {
                          sub_1C4D663A4((uint64_t *)&v190, ((_BYTE)v194 - ((_BYTE)v193 + BYTE8(v193))) & 3);
                          *(_QWORD *)&v194 = v194 - v51;
                        }
                        else
                        {
                          v52 = v194 - v51;
                          *(_QWORD *)&v194 = v194 - v51;
                          if (!v51)
                          {
LABEL_80:
                            if ((unint64_t)(v52 - v50) <= 3)
                            {
                              sub_1C4D663A4((uint64_t *)&v190, 4uLL);
                              v52 = v194;
                            }
                            *(_DWORD *)(v52 - 4) = v49;
                            *(_QWORD *)&v194 = v52 - 4;
                            sub_1C4D66288((uint64_t *)&v190, 16, v193 - (v52 - 4) + DWORD2(v193));
LABEL_83:
                            v54 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 264))(*a1);
                            if (v54)
                              v55 = 0;
                            else
                              v55 = v197 == 0;
                            if (v55)
                              goto LABEL_97;
                            v56 = v54;
                            if (v196 <= 3)
                              v196 = 4;
                            v57 = *((_QWORD *)&v194 + 1);
                            v58 = ((_BYTE)v194 - ((_BYTE)v193 + BYTE8(v193))) & 3;
                            if ((_QWORD)v194 - *((_QWORD *)&v194 + 1) < v58)
                            {
                              sub_1C4D663A4((uint64_t *)&v190, ((_BYTE)v194 - ((_BYTE)v193 + BYTE8(v193))) & 3);
                              *(_QWORD *)&v194 = v194 - v58;
                            }
                            else
                            {
                              v59 = v194 - v58;
                              *(_QWORD *)&v194 = v194 - v58;
                              if (!v58)
                              {
LABEL_94:
                                if ((unint64_t)(v59 - v57) <= 3)
                                {
                                  sub_1C4D663A4((uint64_t *)&v190, 4uLL);
                                  v59 = v194;
                                }
                                *(_DWORD *)(v59 - 4) = v56;
                                *(_QWORD *)&v194 = v59 - 4;
                                sub_1C4D66288((uint64_t *)&v190, 18, v193 - (v59 - 4) + DWORD2(v193));
LABEL_97:
                                v61 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 272))(*a1);
                                if (v61)
                                  v62 = 0;
                                else
                                  v62 = v197 == 0;
                                if (v62)
                                  goto LABEL_111;
                                v63 = v61;
                                if (v196 <= 3)
                                  v196 = 4;
                                v64 = *((_QWORD *)&v194 + 1);
                                v65 = ((_BYTE)v194 - ((_BYTE)v193 + BYTE8(v193))) & 3;
                                if ((_QWORD)v194 - *((_QWORD *)&v194 + 1) < v65)
                                {
                                  sub_1C4D663A4((uint64_t *)&v190, ((_BYTE)v194 - ((_BYTE)v193 + BYTE8(v193))) & 3);
                                  *(_QWORD *)&v194 = v194 - v65;
                                }
                                else
                                {
                                  v66 = v194 - v65;
                                  *(_QWORD *)&v194 = v194 - v65;
                                  if (!v65)
                                  {
LABEL_108:
                                    if ((unint64_t)(v66 - v64) <= 3)
                                    {
                                      sub_1C4D663A4((uint64_t *)&v190, 4uLL);
                                      v66 = v194;
                                    }
                                    *(_DWORD *)(v66 - 4) = v63;
                                    *(_QWORD *)&v194 = v66 - 4;
                                    sub_1C4D66288((uint64_t *)&v190, 20, v193 - (v66 - 4) + DWORD2(v193));
LABEL_111:
                                    v68 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 280))(*a1);
                                    if (v68)
                                      v69 = 0;
                                    else
                                      v69 = v197 == 0;
                                    if (v69)
                                      goto LABEL_125;
                                    v70 = v68;
                                    if (v196 <= 3)
                                      v196 = 4;
                                    v71 = *((_QWORD *)&v194 + 1);
                                    v72 = ((_BYTE)v194 - ((_BYTE)v193 + BYTE8(v193))) & 3;
                                    if ((_QWORD)v194 - *((_QWORD *)&v194 + 1) < v72)
                                    {
                                      sub_1C4D663A4((uint64_t *)&v190, ((_BYTE)v194 - ((_BYTE)v193 + BYTE8(v193))) & 3);
                                      *(_QWORD *)&v194 = v194 - v72;
                                    }
                                    else
                                    {
                                      v73 = v194 - v72;
                                      *(_QWORD *)&v194 = v194 - v72;
                                      if (!v72)
                                      {
LABEL_122:
                                        if ((unint64_t)(v73 - v71) <= 3)
                                        {
                                          sub_1C4D663A4((uint64_t *)&v190, 4uLL);
                                          v73 = v194;
                                        }
                                        *(_DWORD *)(v73 - 4) = v70;
                                        *(_QWORD *)&v194 = v73 - 4;
                                        sub_1C4D66288((uint64_t *)&v190, 22, v193 - (v73 - 4) + DWORD2(v193));
LABEL_125:
                                        v75 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 288))(*a1);
                                        if (v75)
                                          v76 = 0;
                                        else
                                          v76 = v197 == 0;
                                        if (v76)
                                          goto LABEL_139;
                                        v77 = v75;
                                        if (v196 <= 3)
                                          v196 = 4;
                                        v78 = *((_QWORD *)&v194 + 1);
                                        v79 = ((_BYTE)v194 - ((_BYTE)v193 + BYTE8(v193))) & 3;
                                        if ((_QWORD)v194 - *((_QWORD *)&v194 + 1) < v79)
                                        {
                                          sub_1C4D663A4((uint64_t *)&v190, ((_BYTE)v194 - ((_BYTE)v193 + BYTE8(v193))) & 3);
                                          *(_QWORD *)&v194 = v194 - v79;
                                        }
                                        else
                                        {
                                          v80 = v194 - v79;
                                          *(_QWORD *)&v194 = v194 - v79;
                                          if (!v79)
                                          {
LABEL_136:
                                            if ((unint64_t)(v80 - v78) <= 3)
                                            {
                                              sub_1C4D663A4((uint64_t *)&v190, 4uLL);
                                              v80 = v194;
                                            }
                                            *(_DWORD *)(v80 - 4) = v77;
                                            *(_QWORD *)&v194 = v80 - 4;
                                            sub_1C4D66288((uint64_t *)&v190, 24, v193 - (v80 - 4) + DWORD2(v193));
LABEL_139:
                                            v82 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 296))(*a1);
                                            if (v82)
                                              v83 = 0;
                                            else
                                              v83 = v197 == 0;
                                            if (v83)
                                              goto LABEL_153;
                                            v84 = v82;
                                            if (v196 <= 3)
                                              v196 = 4;
                                            v85 = *((_QWORD *)&v194 + 1);
                                            v86 = ((_BYTE)v194 - ((_BYTE)v193 + BYTE8(v193))) & 3;
                                            if ((_QWORD)v194 - *((_QWORD *)&v194 + 1) < v86)
                                            {
                                              sub_1C4D663A4((uint64_t *)&v190, ((_BYTE)v194 - ((_BYTE)v193 + BYTE8(v193))) & 3);
                                              *(_QWORD *)&v194 = v194 - v86;
                                            }
                                            else
                                            {
                                              v87 = v194 - v86;
                                              *(_QWORD *)&v194 = v194 - v86;
                                              if (!v86)
                                              {
LABEL_150:
                                                if ((unint64_t)(v87 - v85) <= 3)
                                                {
                                                  sub_1C4D663A4((uint64_t *)&v190, 4uLL);
                                                  v87 = v194;
                                                }
                                                *(_DWORD *)(v87 - 4) = v84;
                                                *(_QWORD *)&v194 = v87 - 4;
                                                sub_1C4D66288((uint64_t *)&v190, 26, v193 - (v87 - 4) + DWORD2(v193));
LABEL_153:
                                                v89 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 304))(*a1);
                                                if (v89)
                                                  v90 = 0;
                                                else
                                                  v90 = v197 == 0;
                                                if (v90)
                                                  goto LABEL_167;
                                                v91 = v89;
                                                if (v196 <= 3)
                                                  v196 = 4;
                                                v92 = *((_QWORD *)&v194 + 1);
                                                v93 = ((_BYTE)v194 - ((_BYTE)v193 + BYTE8(v193))) & 3;
                                                if ((_QWORD)v194 - *((_QWORD *)&v194 + 1) < v93)
                                                {
                                                  sub_1C4D663A4((uint64_t *)&v190, ((_BYTE)v194 - ((_BYTE)v193 + BYTE8(v193))) & 3);
                                                  *(_QWORD *)&v194 = v194 - v93;
                                                }
                                                else
                                                {
                                                  v94 = v194 - v93;
                                                  *(_QWORD *)&v194 = v194 - v93;
                                                  if (!v93)
                                                  {
LABEL_164:
                                                    if ((unint64_t)(v94 - v92) <= 3)
                                                    {
                                                      sub_1C4D663A4((uint64_t *)&v190, 4uLL);
                                                      v94 = v194;
                                                    }
                                                    *(_DWORD *)(v94 - 4) = v91;
                                                    *(_QWORD *)&v194 = v94 - 4;
                                                    sub_1C4D66288((uint64_t *)&v190, 28, v193 - (v94 - 4) + DWORD2(v193));
LABEL_167:
                                                    v96 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 312))(*a1);
                                                    if (v96)
                                                      v97 = 0;
                                                    else
                                                      v97 = v197 == 0;
                                                    if (v97)
                                                      goto LABEL_181;
                                                    v98 = v96;
                                                    if (v196 <= 3)
                                                      v196 = 4;
                                                    v99 = *((_QWORD *)&v194 + 1);
                                                    v100 = ((_BYTE)v194 - ((_BYTE)v193 + BYTE8(v193))) & 3;
                                                    if ((_QWORD)v194 - *((_QWORD *)&v194 + 1) < v100)
                                                    {
                                                      sub_1C4D663A4((uint64_t *)&v190, ((_BYTE)v194 - ((_BYTE)v193 + BYTE8(v193))) & 3);
                                                      *(_QWORD *)&v194 = v194 - v100;
                                                    }
                                                    else
                                                    {
                                                      v101 = v194 - v100;
                                                      *(_QWORD *)&v194 = v194 - v100;
                                                      if (!v100)
                                                      {
LABEL_178:
                                                        if ((unint64_t)(v101 - v99) <= 3)
                                                        {
                                                          sub_1C4D663A4((uint64_t *)&v190, 4uLL);
                                                          v101 = v194;
                                                        }
                                                        *(_DWORD *)(v101 - 4) = v98;
                                                        *(_QWORD *)&v194 = v101 - 4;
                                                        sub_1C4D66288((uint64_t *)&v190, 30, v193 - (v101 - 4) + DWORD2(v193));
LABEL_181:
                                                        v103 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 320))(*a1);
                                                        if (v103)
                                                          v104 = 0;
                                                        else
                                                          v104 = v197 == 0;
                                                        if (v104)
                                                          goto LABEL_195;
                                                        v105 = v103;
                                                        if (v196 <= 3)
                                                          v196 = 4;
                                                        v106 = *((_QWORD *)&v194 + 1);
                                                        v107 = ((_BYTE)v194 - ((_BYTE)v193 + BYTE8(v193))) & 3;
                                                        if ((_QWORD)v194 - *((_QWORD *)&v194 + 1) < v107)
                                                        {
                                                          sub_1C4D663A4((uint64_t *)&v190, ((_BYTE)v194 - ((_BYTE)v193 + BYTE8(v193))) & 3);
                                                          *(_QWORD *)&v194 = v194 - v107;
                                                        }
                                                        else
                                                        {
                                                          v108 = v194 - v107;
                                                          *(_QWORD *)&v194 = v194 - v107;
                                                          if (!v107)
                                                          {
LABEL_192:
                                                            if ((unint64_t)(v108 - v106) <= 3)
                                                            {
                                                              sub_1C4D663A4((uint64_t *)&v190, 4uLL);
                                                              v108 = v194;
                                                            }
                                                            *(_DWORD *)(v108 - 4) = v105;
                                                            *(_QWORD *)&v194 = v108 - 4;
                                                            sub_1C4D66288((uint64_t *)&v190, 32, v193 - (v108 - 4) + DWORD2(v193));
LABEL_195:
                                                            v110 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 328))(*a1);
                                                            if (v110)
                                                              v111 = 0;
                                                            else
                                                              v111 = v197 == 0;
                                                            if (v111)
                                                              goto LABEL_209;
                                                            v112 = v110;
                                                            if (v196 <= 3)
                                                              v196 = 4;
                                                            v113 = *((_QWORD *)&v194 + 1);
                                                            v114 = ((_BYTE)v194 - ((_BYTE)v193 + BYTE8(v193))) & 3;
                                                            if ((_QWORD)v194 - *((_QWORD *)&v194 + 1) < v114)
                                                            {
                                                              sub_1C4D663A4((uint64_t *)&v190, ((_BYTE)v194 - ((_BYTE)v193 + BYTE8(v193))) & 3);
                                                              *(_QWORD *)&v194 = v194 - v114;
                                                            }
                                                            else
                                                            {
                                                              v115 = v194 - v114;
                                                              *(_QWORD *)&v194 = v194 - v114;
                                                              if (!v114)
                                                              {
LABEL_206:
                                                                if ((unint64_t)(v115 - v113) <= 3)
                                                                {
                                                                  sub_1C4D663A4((uint64_t *)&v190, 4uLL);
                                                                  v115 = v194;
                                                                }
                                                                *(_DWORD *)(v115 - 4) = v112;
                                                                *(_QWORD *)&v194 = v115 - 4;
                                                                sub_1C4D66288((uint64_t *)&v190, 34, v193 - (v115 - 4) + DWORD2(v193));
LABEL_209:
                                                                v117 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 336))(*a1);
                                                                if (v117)
                                                                  v118 = 0;
                                                                else
                                                                  v118 = v197 == 0;
                                                                if (v118)
                                                                  goto LABEL_223;
                                                                v119 = v117;
                                                                if (v196 <= 3)
                                                                  v196 = 4;
                                                                v120 = *((_QWORD *)&v194 + 1);
                                                                v121 = ((_BYTE)v194 - ((_BYTE)v193 + BYTE8(v193))) & 3;
                                                                if ((_QWORD)v194 - *((_QWORD *)&v194 + 1) < v121)
                                                                {
                                                                  sub_1C4D663A4((uint64_t *)&v190, ((_BYTE)v194 - ((_BYTE)v193 + BYTE8(v193))) & 3);
                                                                  *(_QWORD *)&v194 = v194 - v121;
                                                                }
                                                                else
                                                                {
                                                                  v122 = v194 - v121;
                                                                  *(_QWORD *)&v194 = v194 - v121;
                                                                  if (!v121)
                                                                  {
LABEL_220:
                                                                    if ((unint64_t)(v122 - v120) <= 3)
                                                                    {
                                                                      sub_1C4D663A4((uint64_t *)&v190, 4uLL);
                                                                      v122 = v194;
                                                                    }
                                                                    *(_DWORD *)(v122 - 4) = v119;
                                                                    *(_QWORD *)&v194 = v122 - 4;
                                                                    sub_1C4D66288((uint64_t *)&v190, 36, v193 - (v122 - 4) + DWORD2(v193));
LABEL_223:
                                                                    v124 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 344))(*a1);
                                                                    if (v124)
                                                                      v125 = 0;
                                                                    else
                                                                      v125 = v197 == 0;
                                                                    if (v125)
                                                                      goto LABEL_237;
                                                                    v126 = v124;
                                                                    if (v196 <= 3)
                                                                      v196 = 4;
                                                                    v127 = *((_QWORD *)&v194 + 1);
                                                                    v128 = ((_BYTE)v194 - ((_BYTE)v193 + BYTE8(v193))) & 3;
                                                                    if ((_QWORD)v194 - *((_QWORD *)&v194 + 1) < v128)
                                                                    {
                                                                      sub_1C4D663A4((uint64_t *)&v190, ((_BYTE)v194 - ((_BYTE)v193 + BYTE8(v193))) & 3);
                                                                      *(_QWORD *)&v194 = v194 - v128;
                                                                    }
                                                                    else
                                                                    {
                                                                      v129 = v194 - v128;
                                                                      *(_QWORD *)&v194 = v194 - v128;
                                                                      if (!v128)
                                                                      {
LABEL_234:
                                                                        if ((unint64_t)(v129 - v127) <= 3)
                                                                        {
                                                                          sub_1C4D663A4((uint64_t *)&v190, 4uLL);
                                                                          v129 = v194;
                                                                        }
                                                                        *(_DWORD *)(v129 - 4) = v126;
                                                                        *(_QWORD *)&v194 = v129 - 4;
                                                                        sub_1C4D66288((uint64_t *)&v190, 38, v193 - (v129 - 4) + DWORD2(v193));
LABEL_237:
                                                                        v131 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 352))(*a1);
                                                                        if (v131)
                                                                          v132 = 0;
                                                                        else
                                                                          v132 = v197 == 0;
                                                                        if (v132)
                                                                          goto LABEL_251;
                                                                        v133 = v131;
                                                                        if (v196 <= 3)
                                                                          v196 = 4;
                                                                        v134 = *((_QWORD *)&v194 + 1);
                                                                        v135 = ((_BYTE)v194 - ((_BYTE)v193 + BYTE8(v193))) & 3;
                                                                        if ((_QWORD)v194 - *((_QWORD *)&v194 + 1) < v135)
                                                                        {
                                                                          sub_1C4D663A4((uint64_t *)&v190, ((_BYTE)v194 - ((_BYTE)v193 + BYTE8(v193))) & 3);
                                                                          *(_QWORD *)&v194 = v194 - v135;
                                                                        }
                                                                        else
                                                                        {
                                                                          v136 = v194 - v135;
                                                                          *(_QWORD *)&v194 = v194 - v135;
                                                                          if (!v135)
                                                                          {
LABEL_248:
                                                                            if ((unint64_t)(v136 - v134) <= 3)
                                                                            {
                                                                              sub_1C4D663A4((uint64_t *)&v190, 4uLL);
                                                                              v136 = v194;
                                                                            }
                                                                            *(_DWORD *)(v136 - 4) = v133;
                                                                            *(_QWORD *)&v194 = v136 - 4;
                                                                            sub_1C4D66288((uint64_t *)&v190, 40, v193 - (v136 - 4) + DWORD2(v193));
LABEL_251:
                                                                            v138 = (*(uint64_t (**)(_QWORD))(*(_QWORD *)*a1 + 360))(*a1);
                                                                            if (v138)
                                                                              v139 = 0;
                                                                            else
                                                                              v139 = v197 == 0;
                                                                            if (v139)
                                                                            {
LABEL_265:
                                                                              v145 = sub_1C4D66580((uint64_t)&v190, 0);
                                                                              sub_1C55899C0((uint64_t)&v190, v145);
                                                                              MachOSection = llvm::MCContext::getMachOSection(a5, (uint64_t)"__GPU_STATS", 0xBuLL, (uint64_t)"__counters", 10, 0, 0, 0, 0);
                                                                              *(_BYTE *)(MachOSection + 24) = 3;
                                                                              (*(void (**)(uint64_t, size_t, _QWORD))(*(_QWORD *)a6 + 168))(a6, MachOSection, 0);
                                                                              (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a6 + 632))(a6, 8, 0, 1, 0);
                                                                              llvm::GPUMetadataEmitter::EmitSerializedMetadataFlatbuffer((uint64_t)a1, (uint64_t)(a1 + 342), &v190, a6);
                                                                              sub_1C4765570(&v190);
                                                                              goto LABEL_266;
                                                                            }
                                                                            v140 = v138;
                                                                            if (v196 <= 3)
                                                                              v196 = 4;
                                                                            v141 = *((_QWORD *)&v194 + 1);
                                                                            v142 = ((_BYTE)v194
                                                                                  - ((_BYTE)v193
                                                                                   + BYTE8(v193))) & 3;
                                                                            if ((_QWORD)v194 - *((_QWORD *)&v194 + 1) < v142)
                                                                            {
                                                                              sub_1C4D663A4((uint64_t *)&v190, ((_BYTE)v194- ((_BYTE)v193+ BYTE8(v193))) & 3);
                                                                              *(_QWORD *)&v194 = v194 - v142;
                                                                            }
                                                                            else
                                                                            {
                                                                              v143 = v194 - v142;
                                                                              *(_QWORD *)&v194 = v194 - v142;
                                                                              if (!v142)
                                                                              {
LABEL_262:
                                                                                if ((unint64_t)(v143 - v141) <= 3)
                                                                                {
                                                                                  sub_1C4D663A4((uint64_t *)&v190, 4uLL);
                                                                                  v143 = v194;
                                                                                }
                                                                                *(_DWORD *)(v143 - 4) = v140;
                                                                                *(_QWORD *)&v194 = v143 - 4;
                                                                                sub_1C4D66288((uint64_t *)&v190, 42, v193 - (v143 - 4) + DWORD2(v193));
                                                                                goto LABEL_265;
                                                                              }
                                                                            }
                                                                            v144 = 0;
                                                                            do
                                                                              *(_BYTE *)(v194 + v144++) = 0;
                                                                            while (v142 != v144);
                                                                            v141 = *((_QWORD *)&v194 + 1);
                                                                            v143 = v194;
                                                                            goto LABEL_262;
                                                                          }
                                                                        }
                                                                        v137 = 0;
                                                                        do
                                                                          *(_BYTE *)(v194 + v137++) = 0;
                                                                        while (v135 != v137);
                                                                        v134 = *((_QWORD *)&v194 + 1);
                                                                        v136 = v194;
                                                                        goto LABEL_248;
                                                                      }
                                                                    }
                                                                    v130 = 0;
                                                                    do
                                                                      *(_BYTE *)(v194 + v130++) = 0;
                                                                    while (v128 != v130);
                                                                    v127 = *((_QWORD *)&v194 + 1);
                                                                    v129 = v194;
                                                                    goto LABEL_234;
                                                                  }
                                                                }
                                                                v123 = 0;
                                                                do
                                                                  *(_BYTE *)(v194 + v123++) = 0;
                                                                while (v121 != v123);
                                                                v120 = *((_QWORD *)&v194 + 1);
                                                                v122 = v194;
                                                                goto LABEL_220;
                                                              }
                                                            }
                                                            v116 = 0;
                                                            do
                                                              *(_BYTE *)(v194 + v116++) = 0;
                                                            while (v114 != v116);
                                                            v113 = *((_QWORD *)&v194 + 1);
                                                            v115 = v194;
                                                            goto LABEL_206;
                                                          }
                                                        }
                                                        v109 = 0;
                                                        do
                                                          *(_BYTE *)(v194 + v109++) = 0;
                                                        while (v107 != v109);
                                                        v106 = *((_QWORD *)&v194 + 1);
                                                        v108 = v194;
                                                        goto LABEL_192;
                                                      }
                                                    }
                                                    v102 = 0;
                                                    do
                                                      *(_BYTE *)(v194 + v102++) = 0;
                                                    while (v100 != v102);
                                                    v99 = *((_QWORD *)&v194 + 1);
                                                    v101 = v194;
                                                    goto LABEL_178;
                                                  }
                                                }
                                                v95 = 0;
                                                do
                                                  *(_BYTE *)(v194 + v95++) = 0;
                                                while (v93 != v95);
                                                v92 = *((_QWORD *)&v194 + 1);
                                                v94 = v194;
                                                goto LABEL_164;
                                              }
                                            }
                                            v88 = 0;
                                            do
                                              *(_BYTE *)(v194 + v88++) = 0;
                                            while (v86 != v88);
                                            v85 = *((_QWORD *)&v194 + 1);
                                            v87 = v194;
                                            goto LABEL_150;
                                          }
                                        }
                                        v81 = 0;
                                        do
                                          *(_BYTE *)(v194 + v81++) = 0;
                                        while (v79 != v81);
                                        v78 = *((_QWORD *)&v194 + 1);
                                        v80 = v194;
                                        goto LABEL_136;
                                      }
                                    }
                                    v74 = 0;
                                    do
                                      *(_BYTE *)(v194 + v74++) = 0;
                                    while (v72 != v74);
                                    v71 = *((_QWORD *)&v194 + 1);
                                    v73 = v194;
                                    goto LABEL_122;
                                  }
                                }
                                v67 = 0;
                                do
                                  *(_BYTE *)(v194 + v67++) = 0;
                                while (v65 != v67);
                                v64 = *((_QWORD *)&v194 + 1);
                                v66 = v194;
                                goto LABEL_108;
                              }
                            }
                            v60 = 0;
                            do
                              *(_BYTE *)(v194 + v60++) = 0;
                            while (v58 != v60);
                            v57 = *((_QWORD *)&v194 + 1);
                            v59 = v194;
                            goto LABEL_94;
                          }
                        }
                        v53 = 0;
                        do
                          *(_BYTE *)(v194 + v53++) = 0;
                        while (v51 != v53);
                        v50 = *((_QWORD *)&v194 + 1);
                        v52 = v194;
                        goto LABEL_80;
                      }
                    }
                    v46 = 0;
                    do
                      *(_BYTE *)(v194 + v46++) = 0;
                    while (v44 != v46);
                    v43 = *((_QWORD *)&v194 + 1);
                    v45 = v194;
                    goto LABEL_66;
                  }
                }
                v39 = 0;
                do
                  *(_BYTE *)(v194 + v39++) = 0;
                while (v37 != v39);
                v36 = *((_QWORD *)&v194 + 1);
                v38 = v194;
                goto LABEL_52;
              }
            }
            v32 = 0;
            do
              *(_BYTE *)(v194 + v32++) = 0;
            while (v30 != v32);
            v29 = *((_QWORD *)&v194 + 1);
            v31 = v194;
            goto LABEL_38;
          }
        }
        v25 = 0;
        do
          *(_BYTE *)(v194 + v25++) = 0;
        while (v23 != v25);
        v22 = *((_QWORD *)&v194 + 1);
        v24 = v194;
        goto LABEL_24;
      }
    }
    if (v196 <= 3)
      v196 = 4;
    v17 = *((_QWORD *)&v194 + 1);
    v18 = ((_BYTE)v194 - ((_BYTE)v193 + BYTE8(v193))) & 3;
    if ((_QWORD)v194 - *((_QWORD *)&v194 + 1) < v18)
    {
      sub_1C4D663A4((uint64_t *)&v190, ((_BYTE)v194 - ((_BYTE)v193 + BYTE8(v193))) & 3);
      *(_QWORD *)&v194 = v194 - v18;
    }
    else
    {
      v19 = v194 - v18;
      *(_QWORD *)&v194 = v194 - v18;
      if (!v18)
      {
LABEL_13:
        if ((unint64_t)(v19 - v17) <= 3)
        {
          sub_1C4D663A4((uint64_t *)&v190, 4uLL);
          v19 = v194;
        }
        *(_DWORD *)(v19 - 4) = v15;
        *(_QWORD *)&v194 = v19 - 4;
        sub_1C4D66288((uint64_t *)&v190, 6, v193 - (v19 - 4) + DWORD2(v193));
        v16 = v197;
        goto LABEL_16;
      }
    }
    v20 = 0;
    do
      *(_BYTE *)(v194 + v20++) = 0;
    while (v18 != v20);
    v17 = *((_QWORD *)&v194 + 1);
    v19 = v194;
    goto LABEL_13;
  }
LABEL_266:
  v190 = "agx.telemetry_statistics";
  LOWORD(v193) = 259;
  result = (_QWORD *)llvm::Module::getNamedMetadata(v11, (uint64_t)&v190);
  if (result)
  {
    v182 = a5;
    v184 = a6;
    v190 = 0;
    v191 = 0;
    v192 = xmmword_1C865F170;
    v193 = 0u;
    v194 = 0u;
    v195 = 0;
    v196 = 1;
    v197 = 256;
    v198 = 0;
    v183 = (uint64_t)a1;
    (*(void (**)(char ***__return_ptr))(*(_QWORD *)*a1 + 872))(&v188);
    v148 = 0;
    v149 = 0;
    v150 = 0;
    v151 = 0;
    v152 = v188;
    if (v188 != v189)
    {
      v153 = 0;
      v151 = 0;
      v150 = 0;
      v154 = 0;
      v149 = 0;
      v148 = 0;
      do
      {
        if (*((char *)v152 + 55) < 0)
        {
          sub_1C47EBC30(__p, v152[4], (unint64_t)v152[5]);
        }
        else
        {
          *(_OWORD *)__p = *((_OWORD *)v152 + 2);
          v186 = v152[6];
        }
        v187 = *((_DWORD *)v152 + 14);
        if (SHIBYTE(v186) >= 0)
          v155 = __p;
        else
          v155 = (void **)__p[0];
        if (SHIBYTE(v186) >= 0)
          v156 = HIBYTE(v186) & 0x7F;
        else
          v156 = (size_t)__p[1];
        v157 = sub_1C4D6889C((uint64_t)&v190, v155, v156);
        v158 = v157;
        if (v148 >= v153)
        {
          v159 = (v148 - v149) >> 2;
          v160 = v159 + 1;
          if ((unint64_t)(v159 + 1) >> 62)
            goto LABEL_333;
          if ((v153 - v149) >> 1 > v160)
            v160 = (v153 - v149) >> 1;
          if ((unint64_t)(v153 - v149) >= 0x7FFFFFFFFFFFFFFCLL)
            v161 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v161 = v160;
          if (v161)
          {
            if (v161 >> 62)
              goto LABEL_334;
            v162 = (char *)operator new(4 * v161);
          }
          else
          {
            v162 = 0;
          }
          v163 = &v162[4 * v159];
          *(_DWORD *)v163 = v158;
          v164 = v163 + 4;
          while (v148 != v149)
          {
            v165 = *((_DWORD *)v148 - 1);
            v148 -= 4;
            *((_DWORD *)v163 - 1) = v165;
            v163 -= 4;
          }
          v153 = &v162[4 * v161];
          if (v149)
            operator delete(v149);
          v149 = v163;
          v148 = v164;
        }
        else
        {
          *(_DWORD *)v148 = v157;
          v148 += 4;
        }
        if (v150 >= v154)
        {
          v166 = (v150 - v151) >> 2;
          v167 = v166 + 1;
          if ((unint64_t)(v166 + 1) >> 62)
LABEL_333:
            abort();
          if ((v154 - v151) >> 1 > v167)
            v167 = (v154 - v151) >> 1;
          if ((unint64_t)(v154 - v151) >= 0x7FFFFFFFFFFFFFFCLL)
            v168 = 0x3FFFFFFFFFFFFFFFLL;
          else
            v168 = v167;
          if (v168)
          {
            if (v168 >> 62)
LABEL_334:
              sub_1C4764EE4();
            v169 = (char *)operator new(4 * v168);
          }
          else
          {
            v169 = 0;
          }
          v170 = &v169[4 * v166];
          *(_DWORD *)v170 = v187;
          v171 = v170 + 4;
          while (v150 != v151)
          {
            v172 = *((_DWORD *)v150 - 1);
            v150 -= 4;
            *((_DWORD *)v170 - 1) = v172;
            v170 -= 4;
          }
          v154 = &v169[4 * v168];
          if (v151)
            operator delete(v151);
          v151 = v170;
          v150 = v171;
        }
        else
        {
          *(_DWORD *)v150 = v187;
          v150 += 4;
        }
        if (SHIBYTE(v186) < 0)
          operator delete(__p[0]);
        v173 = v152[1];
        if (v173)
        {
          do
          {
            v174 = (char **)v173;
            v173 = *(char **)v173;
          }
          while (v173);
        }
        else
        {
          do
          {
            v174 = (char **)v152[2];
            v27 = *v174 == (char *)v152;
            v152 = v174;
          }
          while (!v27);
        }
        v152 = v174;
      }
      while (v174 != v189);
    }
    if (v148 == v149)
      v175 = (char *)&flatbuffers::data<flatbuffers::Offset<flatbuffers::String>,std::allocator<flatbuffers::Offset<flatbuffers::String>>>(std::vector<flatbuffers::Offset<flatbuffers::String>> const&)::t;
    else
      v175 = v149;
    v176 = sub_1C6174F44((uint64_t)&v190, (uint64_t)v175, (v148 - v149) >> 2);
    if (v150 == v151)
      v177 = (char *)&flatbuffers::data<unsigned int,std::allocator<unsigned int>>(std::vector<unsigned int> const&)::t;
    else
      v177 = v151;
    v178 = sub_1C5586000((uint64_t)&v190, v177, (v150 - v151) >> 2);
    BYTE6(v195) = 1;
    v179 = v193 - v194 + WORD4(v193);
    sub_1C6174EC0((uint64_t *)&v190, 4, v176);
    sub_1C5589334((uint64_t *)&v190, 6, v178);
    v180 = sub_1C4D66580((uint64_t)&v190, v179);
    sub_1C55899C0((uint64_t)&v190, v180);
    v181 = llvm::MCContext::getMachOSection(v182, (uint64_t)"__GPU_STATS", 0xBuLL, (uint64_t)"__telemetry", 11, 0, 0, 0, 0);
    *(_BYTE *)(v181 + 24) = 3;
    (*(void (**)(uint64_t, size_t, _QWORD))(*(_QWORD *)v184 + 168))(v184, v181, 0);
    (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)v184 + 632))(v184, 8, 0, 1, 0);
    llvm::GPUMetadataEmitter::EmitSerializedMetadataFlatbuffer(v183, v183 + 3944, &v190, v184);
    if (v151)
      operator delete(v151);
    if (v149)
      operator delete(v149);
    sub_1C47653C0((uint64_t)&v188, v189[0]);
    return sub_1C4765570(&v190);
  }
  return result;
}

uint64_t llvm::GPUMetadataEmitter::emitEndOfAsmFile(llvm::GPUMetadataEmitter *this, llvm::Module *a2, llvm::MCContext *a3, llvm::MCStreamer *a4)
{
  uint64_t v7;
  llvm::FunctionGroup **v9;
  uint64_t v10;
  llvm::FunctionGroup *v11;
  const char *v12;
  const char *v13;
  uint64_t result;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  unint64_t *v20;
  size_t v21;
  size_t MachOSection;
  const char *v23;
  __int16 v24;

  v7 = *((unsigned int *)this + 22);
  if ((_DWORD)v7)
  {
    v9 = (llvm::FunctionGroup **)*((_QWORD *)this + 10);
    v10 = 8 * v7;
    do
    {
      v11 = *v9++;
      v12 = llvm::GPUMetadataEmitter::processFunctionGroup(this, a2, v11, a3, a4);
      v10 -= 8;
    }
    while (v10);
    v13 = v12;
  }
  else
  {
    v13 = 0;
  }
  v23 = "agx.segments";
  v24 = 259;
  result = llvm::Module::getNamedMetadata((uint64_t)a2, (uint64_t)&v23);
  if (result)
  {
    if (v13)
    {
      v15 = result;
      v16 = *(unsigned int *)(*(_QWORD *)(result + 48) + 8);
      if ((_DWORD)v16)
      {
        v17 = 0;
        v18 = 8 * v16;
        do
        {
          v19 = *(_QWORD *)(**(_QWORD **)(v15 + 48) + v17);
          v20 = *(unint64_t **)(*(_QWORD *)(v19 - 8 * *(unsigned int *)(v19 + 8)) + 8);
          v21 = strlen(v13);
          MachOSection = llvm::MCContext::getMachOSection((uint64_t)a3, (uint64_t)(v20 + 3), *v20, (uint64_t)v13, v21, 0, 0, 0, 0);
          *(_BYTE *)(MachOSection + 24) = 3;
          (*(void (**)(llvm::MCStreamer *, size_t, _QWORD))(*(_QWORD *)a4 + 168))(a4, MachOSection, 0);
          result = (*(uint64_t (**)(llvm::MCStreamer *, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a4 + 632))(a4, 8, 0, 1, 0);
          v17 += 8;
        }
        while (v18 != v17);
      }
    }
  }
  return result;
}

uint64_t *SetShaderInfoFromFunctionGroup(uint64_t a1, uint64_t *a2, _QWORD **a3, int *a4)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  char v17;
  int v18;
  uint64_t v19;
  unsigned int v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  _BOOL4 v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  unsigned int v51;
  BOOL v52;
  int v53;
  int v54;
  unsigned int v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  unsigned int v63;
  _QWORD *v64;
  unint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  unsigned __int8 v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  uint64_t v80;
  int v81;
  uint64_t v82;
  uint64_t v83;
  int v84;
  uint64_t v85;
  uint64_t v86;
  uint64_t v87;
  unint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  unsigned int v94;
  uint64_t v95;
  _BOOL8 v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  int v100;
  uint64_t v101;
  int v102;
  uint64_t v103;
  uint64_t v104;
  uint64_t v105;
  unint64_t v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  int v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t v113;
  uint64_t v114;
  uint64_t v115;
  uint64_t *result;
  uint64_t v117;
  unsigned int v118;
  unsigned int v119;
  unsigned int v120;
  uint64_t v121;
  uint64_t v122;
  unint64_t v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  unint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  uint64_t v140;
  unint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unsigned int v145;
  uint64_t v146;
  uint64_t v147;
  unint64_t v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  unsigned int v152;
  unsigned int v153;
  unsigned int v154;
  unsigned int v155;
  unsigned int v156;
  unsigned int v157;
  unsigned int v158;
  unsigned int v159;
  unsigned int v160;
  unsigned int v161;
  unsigned int v162;
  unsigned int v163;
  unsigned int v164;
  uint64_t v165;
  uint64_t v166;
  unint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  unint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unint64_t v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  unsigned int v183;
  uint64_t v184;
  uint64_t v185;

  v7 = *a4;
  v8 = *a2;
  if (!*a4 && !*(_BYTE *)(v8 + 80))
    goto LABEL_12;
  if (*(_QWORD *)(v8 + 72) <= 3uLL)
    *(_QWORD *)(v8 + 72) = 4;
  v9 = *(_QWORD *)(v8 + 48);
  v10 = *(_QWORD *)(v8 + 56);
  v11 = ((_BYTE)v9 - (*(_DWORD *)(v8 + 32) + *(_DWORD *)(v8 + 40))) & 3;
  if (v9 - v10 < v11)
  {
    sub_1C4D663A4((uint64_t *)v8, ((_BYTE)v9 - (*(_DWORD *)(v8 + 32) + *(_DWORD *)(v8 + 40))) & 3);
    *(_QWORD *)(v8 + 48) -= v11;
LABEL_6:
    v13 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(v8 + 48) + v13++) = 0;
    while (v11 != v13);
    v12 = *(_QWORD *)(v8 + 48);
    v10 = *(_QWORD *)(v8 + 56);
    goto LABEL_9;
  }
  v12 = v9 - v11;
  *(_QWORD *)(v8 + 48) = v12;
  if (v11)
    goto LABEL_6;
LABEL_9:
  if ((unint64_t)(v12 - v10) <= 3)
  {
    sub_1C4D663A4((uint64_t *)v8, 4uLL);
    v12 = *(_QWORD *)(v8 + 48);
  }
  *(_DWORD *)(v12 - 4) = v7;
  v14 = v12 - 4;
  *(_QWORD *)(v8 + 48) = v14;
  sub_1C4D66288((uint64_t *)v8, 4, *(_DWORD *)(v8 + 32) - v14 + *(_DWORD *)(v8 + 40));
LABEL_12:
  v15 = ((uint64_t (*)(_QWORD **, uint64_t, _QWORD, uint64_t, uint64_t))**a3)(a3, 11, 0, 1, 4);
  v16 = *a2;
  if (!v15 && !*(_BYTE *)(v16 + 80))
    goto LABEL_14;
  if (*(_QWORD *)(v16 + 72) <= 3uLL)
    *(_QWORD *)(v16 + 72) = 4;
  v121 = *(_QWORD *)(v16 + 48);
  v122 = *(_QWORD *)(v16 + 56);
  v123 = ((_BYTE)v121 - (*(_DWORD *)(v16 + 32) + *(_DWORD *)(v16 + 40))) & 3;
  if (v121 - v122 < v123)
  {
    sub_1C4D663A4((uint64_t *)v16, ((_BYTE)v121 - (*(_DWORD *)(v16 + 32) + *(_DWORD *)(v16 + 40))) & 3);
    *(_QWORD *)(v16 + 48) -= v123;
LABEL_145:
    v125 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(v16 + 48) + v125++) = 0;
    while (v123 != v125);
    v124 = *(_QWORD *)(v16 + 48);
    v122 = *(_QWORD *)(v16 + 56);
    goto LABEL_148;
  }
  v124 = v121 - v123;
  *(_QWORD *)(v16 + 48) = v124;
  if (v123)
    goto LABEL_145;
LABEL_148:
  if ((unint64_t)(v124 - v122) <= 3)
  {
    sub_1C4D663A4((uint64_t *)v16, 4uLL);
    v124 = *(_QWORD *)(v16 + 48);
  }
  *(_DWORD *)(v124 - 4) = v15;
  v126 = v124 - 4;
  *(_QWORD *)(v16 + 48) = v126;
  sub_1C4D66288((uint64_t *)v16, 32, *(_DWORD *)(v16 + 32) - v126 + *(_DWORD *)(v16 + 40));
LABEL_14:
  if (((uint64_t (*)(_QWORD **, uint64_t, _QWORD, uint64_t, uint64_t))**a3)(a3, 23, 0, 1, 2))
  {
    v19 = *a2;
    v17 = 1;
    goto LABEL_19;
  }
  v17 = 1;
  v18 = ((uint64_t (*)(_QWORD **, uint64_t, _QWORD, uint64_t, uint64_t))**a3)(a3, 11, 0, 1, 4);
  v19 = *a2;
  if (v18)
  {
LABEL_19:
    v20 = sub_1C4D6650C(v19, v17);
    sub_1C4D66288((uint64_t *)v19, 34, v20);
    goto LABEL_20;
  }
  if (*(_BYTE *)(v19 + 80))
  {
    v17 = 0;
    goto LABEL_19;
  }
LABEL_20:
  v21 = ((uint64_t (*)(_QWORD **, uint64_t, _QWORD, uint64_t, uint64_t))**a3)(a3, 25, 0, 1, 2);
  v22 = *a2;
  if (v21 || *(_BYTE *)(v22 + 80))
  {
    v23 = sub_1C4D6650C(*a2, v21 != 0);
    sub_1C4D66288((uint64_t *)v22, 36, v23);
  }
  v24 = ((uint64_t (*)(_QWORD **, uint64_t, _QWORD, uint64_t, uint64_t))**a3)(a3, 26, 0, 1, 2);
  v25 = *a2;
  if (v24 || *(_BYTE *)(v25 + 80))
  {
    v120 = sub_1C4D6650C(*a2, v24 != 0);
    sub_1C4D66288((uint64_t *)v25, 40, v120);
  }
  v26 = ((uint64_t (*)(_QWORD **, uint64_t, _QWORD, uint64_t, uint64_t))**a3)(a3, 24, 0, 1, 2);
  v27 = *a2;
  if (v26 || *(_BYTE *)(v27 + 80))
  {
    v119 = sub_1C4D6650C(*a2, v26 != 0);
    sub_1C4D66288((uint64_t *)v27, 38, v119);
  }
  v28 = ((uint64_t (*)(_QWORD **, uint64_t, _QWORD, uint64_t, uint64_t))**a3)(a3, 28, 0, 1, 2);
  v29 = *a2;
  if (v28 || *(_BYTE *)(v29 + 80))
  {
    v153 = sub_1C4D6650C(*a2, v28 != 0);
    sub_1C4D66288((uint64_t *)v29, 112, v153);
  }
  v30 = ((uint64_t (*)(_QWORD **, uint64_t, _QWORD, uint64_t, uint64_t))**a3)(a3, 32, 0, 1, 2);
  v31 = *a2;
  if (v30 || *(_BYTE *)(v31 + 80))
  {
    v154 = sub_1C4D6650C(*a2, v30 != 0);
    sub_1C4D66288((uint64_t *)v31, 94, v154);
  }
  v32 = ((uint64_t (*)(_QWORD **, uint64_t, _QWORD, uint64_t, uint64_t))**a3)(a3, 33, 0, 1, 2);
  v33 = *a2;
  if (v32 || *(_BYTE *)(v33 + 80))
  {
    v155 = sub_1C4D6650C(*a2, v32 != 0);
    sub_1C4D66288((uint64_t *)v33, 98, v155);
  }
  v34 = ((uint64_t (*)(_QWORD **, uint64_t, _QWORD, uint64_t, uint64_t))**a3)(a3, 31, 0, 1, 2);
  v35 = *a2;
  if (v34 || *(_BYTE *)(v35 + 80))
  {
    v156 = sub_1C4D6650C(*a2, v34 != 0);
    sub_1C4D66288((uint64_t *)v35, 96, v156);
  }
  v36 = ((uint64_t (*)(_QWORD **, uint64_t, _QWORD, uint64_t, uint64_t))**a3)(a3, 35, 0, 1, 2);
  v37 = *a2;
  if (v36 || *(_BYTE *)(v37 + 80))
  {
    v157 = sub_1C4D6650C(*a2, v36 != 0);
    sub_1C4D66288((uint64_t *)v37, 114, v157);
    v37 = *a2;
  }
  if (*((_BYTE *)a4 + 81) || *(_BYTE *)(v37 + 80))
  {
    v158 = sub_1C4D6650C(v37, *((_BYTE *)a4 + 81));
    sub_1C4D66288((uint64_t *)v37, 54, v158);
  }
  v38 = ((uint64_t (*)(_QWORD **, uint64_t, _QWORD, uint64_t, uint64_t))**a3)(a3, 21, 0, 1, 2);
  v39 = v38 != 0;
  v40 = *a2;
  if (v38 || *(_BYTE *)(v40 + 80))
  {
    if (*(_QWORD *)(v40 + 72) <= 3uLL)
      *(_QWORD *)(v40 + 72) = 4;
    v133 = *(_QWORD *)(v40 + 48);
    v134 = *(_QWORD *)(v40 + 56);
    v135 = ((_BYTE)v133 - (*(_DWORD *)(v40 + 32) + *(_DWORD *)(v40 + 40))) & 3;
    if (v133 - v134 < v135)
    {
      sub_1C4D663A4((uint64_t *)v40, ((_BYTE)v133 - (*(_DWORD *)(v40 + 32) + *(_DWORD *)(v40 + 40))) & 3);
      *(_QWORD *)(v40 + 48) -= v135;
    }
    else
    {
      v136 = v133 - v135;
      *(_QWORD *)(v40 + 48) = v136;
      if (!v135)
      {
LABEL_168:
        if ((unint64_t)(v136 - v134) <= 3)
        {
          sub_1C4D663A4((uint64_t *)v40, 4uLL);
          v136 = *(_QWORD *)(v40 + 48);
        }
        *(_DWORD *)(v136 - 4) = v39;
        v138 = v136 - 4;
        *(_QWORD *)(v40 + 48) = v138;
        sub_1C4D66288((uint64_t *)v40, 64, *(_DWORD *)(v40 + 32) - v138 + *(_DWORD *)(v40 + 40));
        goto LABEL_41;
      }
    }
    v137 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(v40 + 48) + v137++) = 0;
    while (v135 != v137);
    v136 = *(_QWORD *)(v40 + 48);
    v134 = *(_QWORD *)(v40 + 56);
    goto LABEL_168;
  }
LABEL_41:
  v41 = ((uint64_t (*)(_QWORD **, uint64_t, _QWORD, uint64_t, uint64_t))**a3)(a3, 42, 0, 1, 2);
  v42 = *a2;
  if (v41 || *(_BYTE *)(v42 + 80))
  {
    v159 = sub_1C55898D8(*a2, v41);
    sub_1C4D66288((uint64_t *)v42, 102, v159);
  }
  v43 = ((uint64_t (*)(_QWORD **, uint64_t, _QWORD, uint64_t, uint64_t))**a3)(a3, 43, 0, 1, 2);
  v44 = *a2;
  if (v43 || *(_BYTE *)(v44 + 80))
  {
    v160 = sub_1C55898D8(*a2, v43);
    sub_1C4D66288((uint64_t *)v44, 104, v160);
  }
  v45 = ((uint64_t (*)(_QWORD **, uint64_t, _QWORD, uint64_t, uint64_t))**a3)(a3, 44, 0, 1, 2);
  v46 = *a2;
  if (v45 || *(_BYTE *)(v46 + 80))
  {
    v161 = sub_1C55898D8(*a2, v45);
    sub_1C4D66288((uint64_t *)v46, 106, v161);
  }
  v47 = ((uint64_t (*)(_QWORD **, uint64_t, _QWORD, uint64_t, uint64_t))**a3)(a3, 45, 0, 1, 2);
  v48 = *a2;
  if (v47 || *(_BYTE *)(v48 + 80))
  {
    v162 = sub_1C55898D8(*a2, v47);
    sub_1C4D66288((uint64_t *)v48, 108, v162);
  }
  v49 = ((uint64_t (*)(_QWORD **, uint64_t, _QWORD, uint64_t, uint64_t))**a3)(a3, 46, 0, 1, 2);
  v50 = *a2;
  if (v49 || *(_BYTE *)(v50 + 80))
  {
    v163 = sub_1C55898D8(*a2, v49);
    sub_1C4D66288((uint64_t *)v50, 110, v163);
    v50 = *a2;
  }
  v51 = a4[19];
  v52 = v51 > 0x1E;
  v53 = *((unsigned __int8 *)a4 + 80);
  if (v51 <= 0x12C)
    v54 = v51 > 0x1E;
  else
    v54 = 2;
  if (v52 && *((_BYTE *)a4 + 80) != 0)
    v54 = 3;
  if (v54 || *(_BYTE *)(v50 + 80))
  {
    v55 = sub_1C4D6650C(v50, v54);
    sub_1C4D66288((uint64_t *)v50, 68, v55);
    v53 = *((unsigned __int8 *)a4 + 80);
    v50 = *a2;
  }
  if (v53 || *(_BYTE *)(v50 + 80))
  {
    v118 = sub_1C4D6650C(v50, v53);
    sub_1C4D66288((uint64_t *)v50, 70, v118);
  }
  v56 = ((uint64_t (*)(_QWORD **, uint64_t, _QWORD, uint64_t, uint64_t))**a3)(a3, 10, 0, 1, 1);
  v57 = *a2;
  if (v56 || *(_BYTE *)(v57 + 80))
  {
    if (*(_QWORD *)(v57 + 72) <= 3uLL)
      *(_QWORD *)(v57 + 72) = 4;
    v139 = *(_QWORD *)(v57 + 48);
    v140 = *(_QWORD *)(v57 + 56);
    v141 = ((_BYTE)v139 - (*(_DWORD *)(v57 + 32) + *(_DWORD *)(v57 + 40))) & 3;
    if (v139 - v140 < v141)
    {
      sub_1C4D663A4((uint64_t *)v57, ((_BYTE)v139 - (*(_DWORD *)(v57 + 32) + *(_DWORD *)(v57 + 40))) & 3);
      *(_QWORD *)(v57 + 48) -= v141;
    }
    else
    {
      v142 = v139 - v141;
      *(_QWORD *)(v57 + 48) = v142;
      if (!v141)
      {
LABEL_178:
        if ((unint64_t)(v142 - v140) <= 3)
        {
          sub_1C4D663A4((uint64_t *)v57, 4uLL);
          v142 = *(_QWORD *)(v57 + 48);
        }
        *(_DWORD *)(v142 - 4) = v56;
        v144 = v142 - 4;
        *(_QWORD *)(v57 + 48) = v144;
        sub_1C4D66288((uint64_t *)v57, 74, *(_DWORD *)(v57 + 32) - v144 + *(_DWORD *)(v57 + 40));
        goto LABEL_63;
      }
    }
    v143 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(v57 + 48) + v143++) = 0;
    while (v141 != v143);
    v142 = *(_QWORD *)(v57 + 48);
    v140 = *(_QWORD *)(v57 + 56);
    goto LABEL_178;
  }
LABEL_63:
  ((void (*)(uint64_t *__return_ptr, _QWORD **, uint64_t))(*a3)[16])(&v185, a3, 12);
  ((void (*)(uint64_t *__return_ptr, _QWORD **, uint64_t))(*a3)[17])(&v184, a3, 12);
  v59 = v184;
  v58 = v185;
  if (v185)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v185 + 16))(&v185, v185);
    v60 = v185;
  }
  else
  {
    v60 = 0;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v59 + 16))(&v185, v59);
  v61 = v185;
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v60 + 24))(v60, v185) & 1) != 0)
  {
    v62 = 0;
    if (!v61)
      goto LABEL_74;
LABEL_73:
    (*(void (**)(uint64_t))(*(_QWORD *)v61 + 8))(v61);
    goto LABEL_74;
  }
  v63 = -1;
  do
  {
    v64 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v60 + 32))(v60);
    v65 = ((uint64_t (*)(_QWORD **, _QWORD))(*a3)[50])(a3, *v64);
    v67 = v66;
    v68 = ((uint64_t (*)(_QWORD **))(*a3)[42])(a3);
    v69 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v68 + 24))(v68, v67);
    if (v63 >= v65)
      v63 = v65;
    (*(void (**)(uint64_t))(*(_QWORD *)v60 + 40))(v60);
  }
  while (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v60 + 24))(v60, v61) & 1) == 0);
  v62 = (v65 - v63 + (HIDWORD(v65) + v69 - 1) / v69) * v69;
  if (v61)
    goto LABEL_73;
LABEL_74:
  (*(void (**)(uint64_t))(*(_QWORD *)v60 + 8))(v60);
  (*(void (**)(uint64_t))(*(_QWORD *)v59 + 8))(v59);
  if (v58)
    (*(void (**)(uint64_t))(*(_QWORD *)v58 + 8))(v58);
  v70 = atomic_load((unsigned __int8 *)&qword_1ED806360);
  if ((v70 & 1) == 0 && __cxa_guard_acquire(&qword_1ED806360))
  {
    byte_1ED806358 = 0;
    __cxa_guard_release(&qword_1ED806360);
  }
  if (byte_1ED806358)
    v71 = v62 + 64;
  else
    v71 = v62;
  v72 = ((uint64_t (*)(_QWORD **, uint64_t, _QWORD, uint64_t, uint64_t))**a3)(a3, 12, 0, 1, 3);
  v73 = *a2;
  if (v72 || *(_BYTE *)(v73 + 80))
  {
    if (*(_QWORD *)(v73 + 72) <= 3uLL)
      *(_QWORD *)(v73 + 72) = 4;
    v74 = *(_QWORD *)(v73 + 48);
    v75 = *(_QWORD *)(v73 + 56);
    v76 = ((_BYTE)v74 - (*(_DWORD *)(v73 + 32) + *(_DWORD *)(v73 + 40))) & 3;
    if (v74 - v75 < v76)
    {
      sub_1C4D663A4((uint64_t *)v73, ((_BYTE)v74 - (*(_DWORD *)(v73 + 32) + *(_DWORD *)(v73 + 40))) & 3);
      *(_QWORD *)(v73 + 48) -= v76;
    }
    else
    {
      v77 = v74 - v76;
      *(_QWORD *)(v73 + 48) = v77;
      if (!v76)
      {
LABEL_89:
        if ((unint64_t)(v77 - v75) <= 3)
        {
          sub_1C4D663A4((uint64_t *)v73, 4uLL);
          v77 = *(_QWORD *)(v73 + 48);
        }
        *(_DWORD *)(v77 - 4) = v72;
        v79 = v77 - 4;
        *(_QWORD *)(v73 + 48) = v79;
        sub_1C4D66288((uint64_t *)v73, 66, *(_DWORD *)(v73 + 32) - v79 + *(_DWORD *)(v73 + 40));
        goto LABEL_92;
      }
    }
    v78 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(v73 + 48) + v78++) = 0;
    while (v76 != v78);
    v77 = *(_QWORD *)(v73 + 48);
    v75 = *(_QWORD *)(v73 + 56);
    goto LABEL_89;
  }
LABEL_92:
  v80 = ((uint64_t (*)(_QWORD **))(*a3)[71])(a3);
  v81 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a3[1] + 104))(a3[1], v80);
  v82 = *a2;
  if (!v81 && !*(_BYTE *)(v82 + 80))
    goto LABEL_94;
  if (*(_QWORD *)(v82 + 72) <= 3uLL)
    *(_QWORD *)(v82 + 72) = 4;
  v127 = *(_QWORD *)(v82 + 48);
  v128 = *(_QWORD *)(v82 + 56);
  v129 = ((_BYTE)v127 - (*(_DWORD *)(v82 + 32) + *(_DWORD *)(v82 + 40))) & 3;
  if (v127 - v128 < v129)
  {
    sub_1C4D663A4((uint64_t *)v82, ((_BYTE)v127 - (*(_DWORD *)(v82 + 32) + *(_DWORD *)(v82 + 40))) & 3);
    *(_QWORD *)(v82 + 48) -= v129;
LABEL_155:
    v131 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(v82 + 48) + v131++) = 0;
    while (v129 != v131);
    v130 = *(_QWORD *)(v82 + 48);
    v128 = *(_QWORD *)(v82 + 56);
    goto LABEL_158;
  }
  v130 = v127 - v129;
  *(_QWORD *)(v82 + 48) = v130;
  if (v129)
    goto LABEL_155;
LABEL_158:
  if ((unint64_t)(v130 - v128) <= 3)
  {
    sub_1C4D663A4((uint64_t *)v82, 4uLL);
    v130 = *(_QWORD *)(v82 + 48);
  }
  *(_DWORD *)(v130 - 4) = v81;
  v132 = v130 - 4;
  *(_QWORD *)(v82 + 48) = v132;
  sub_1C4D66288((uint64_t *)v82, 86, *(_DWORD *)(v82 + 32) - v132 + *(_DWORD *)(v82 + 40));
LABEL_94:
  v83 = ((uint64_t (*)(_QWORD **))(*a3)[71])(a3);
  v84 = (*(uint64_t (**)(_QWORD *, uint64_t))(*a3[1] + 120))(a3[1], v83);
  v85 = *a2;
  if (!v84 && !*(_BYTE *)(v85 + 80))
    goto LABEL_106;
  if (*(_QWORD *)(v85 + 72) <= 3uLL)
    *(_QWORD *)(v85 + 72) = 4;
  v86 = *(_QWORD *)(v85 + 48);
  v87 = *(_QWORD *)(v85 + 56);
  v88 = ((_BYTE)v86 - (*(_DWORD *)(v85 + 32) + *(_DWORD *)(v85 + 40))) & 3;
  if (v86 - v87 < v88)
  {
    sub_1C4D663A4((uint64_t *)v85, ((_BYTE)v86 - (*(_DWORD *)(v85 + 32) + *(_DWORD *)(v85 + 40))) & 3);
    *(_QWORD *)(v85 + 48) -= v88;
LABEL_100:
    v90 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(v85 + 48) + v90++) = 0;
    while (v88 != v90);
    v89 = *(_QWORD *)(v85 + 48);
    v87 = *(_QWORD *)(v85 + 56);
    goto LABEL_103;
  }
  v89 = v86 - v88;
  *(_QWORD *)(v85 + 48) = v89;
  if (v88)
    goto LABEL_100;
LABEL_103:
  if ((unint64_t)(v89 - v87) <= 3)
  {
    sub_1C4D663A4((uint64_t *)v85, 4uLL);
    v89 = *(_QWORD *)(v85 + 48);
  }
  *(_DWORD *)(v89 - 4) = v84;
  v91 = v89 - 4;
  *(_QWORD *)(v85 + 48) = v91;
  sub_1C4D66288((uint64_t *)v85, 88, *(_DWORD *)(v85 + 32) - v91 + *(_DWORD *)(v85 + 40));
LABEL_106:
  v92 = ((uint64_t (*)(_QWORD **, uint64_t, _QWORD, uint64_t, uint64_t))**a3)(a3, 27, 0, 1, 2);
  v93 = *a2;
  if (v92 || *(_BYTE *)(v93 + 80))
  {
    v94 = sub_1C4D6650C(*a2, v92 != 0);
    sub_1C4D66288((uint64_t *)v93, 42, v94);
  }
  v95 = ((uint64_t (*)(_QWORD **, uint64_t, _QWORD, uint64_t, uint64_t))**a3)(a3, 34, 0, 1, 2);
  v96 = v95 != 0;
  v97 = *a2;
  if (v95 || *(_BYTE *)(v97 + 80))
  {
    v164 = sub_1C4D6650C(*a2, v96);
    sub_1C4D66288((uint64_t *)v97, 100, v164);
    v97 = *a2;
    if (v71)
      goto LABEL_217;
  }
  else if (v71)
  {
    goto LABEL_217;
  }
  if (!*(_BYTE *)(v97 + 80))
    goto LABEL_113;
LABEL_217:
  if (*(_QWORD *)(v97 + 72) <= 3uLL)
    *(_QWORD *)(v97 + 72) = 4;
  v165 = *(_QWORD *)(v97 + 48);
  v166 = *(_QWORD *)(v97 + 56);
  v167 = ((_BYTE)v165 - (*(_DWORD *)(v97 + 32) + *(_DWORD *)(v97 + 40))) & 3;
  if (v165 - v166 < v167)
  {
    sub_1C4D663A4((uint64_t *)v97, ((_BYTE)v165 - (*(_DWORD *)(v97 + 32) + *(_DWORD *)(v97 + 40))) & 3);
    *(_QWORD *)(v97 + 48) -= v167;
LABEL_221:
    v169 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(v97 + 48) + v169++) = 0;
    while (v167 != v169);
    v168 = *(_QWORD *)(v97 + 48);
    v166 = *(_QWORD *)(v97 + 56);
    goto LABEL_224;
  }
  v168 = v165 - v167;
  *(_QWORD *)(v97 + 48) = v168;
  if (v167)
    goto LABEL_221;
LABEL_224:
  if ((unint64_t)(v168 - v166) <= 3)
  {
    sub_1C4D663A4((uint64_t *)v97, 4uLL);
    v168 = *(_QWORD *)(v97 + 48);
  }
  *(_DWORD *)(v168 - 4) = v71;
  v170 = v168 - 4;
  *(_QWORD *)(v97 + 48) = v170;
  sub_1C4D66288((uint64_t *)v97, 60, *(_DWORD *)(v97 + 32) - v170 + *(_DWORD *)(v97 + 40));
LABEL_113:
  ((void (*)(_QWORD **, _BOOL8))(*a3)[14])(a3, v96);
  v98 = ((uint64_t (*)(_QWORD **, uint64_t, _QWORD, uint64_t, uint64_t))**a3)(a3, 13, 0, 1, 3);
  v99 = *a2;
  if (!v98 && !*(_BYTE *)(v99 + 80))
    goto LABEL_115;
  if (*(_QWORD *)(v99 + 72) <= 3uLL)
    *(_QWORD *)(v99 + 72) = 4;
  v146 = *(_QWORD *)(v99 + 48);
  v147 = *(_QWORD *)(v99 + 56);
  v148 = ((_BYTE)v146 - (*(_DWORD *)(v99 + 32) + *(_DWORD *)(v99 + 40))) & 3;
  if (v146 - v147 < v148)
  {
    sub_1C4D663A4((uint64_t *)v99, ((_BYTE)v146 - (*(_DWORD *)(v99 + 32) + *(_DWORD *)(v99 + 40))) & 3);
    *(_QWORD *)(v99 + 48) -= v148;
LABEL_186:
    v150 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(v99 + 48) + v150++) = 0;
    while (v148 != v150);
    v149 = *(_QWORD *)(v99 + 48);
    v147 = *(_QWORD *)(v99 + 56);
    goto LABEL_189;
  }
  v149 = v146 - v148;
  *(_QWORD *)(v99 + 48) = v149;
  if (v148)
    goto LABEL_186;
LABEL_189:
  if ((unint64_t)(v149 - v147) <= 3)
  {
    sub_1C4D663A4((uint64_t *)v99, 4uLL);
    v149 = *(_QWORD *)(v99 + 48);
  }
  *(_DWORD *)(v149 - 4) = v98;
  v151 = v149 - 4;
  *(_QWORD *)(v99 + 48) = v151;
  sub_1C4D66288((uint64_t *)v99, 76, *(_DWORD *)(v99 + 32) - v151 + *(_DWORD *)(v99 + 40));
LABEL_115:
  v100 = ((uint64_t (*)(_QWORD **, uint64_t, _QWORD, uint64_t, uint64_t))**a3)(a3, 17, 0, 1, 3);
  v101 = *a2;
  if (!v100 && !*(_BYTE *)(v101 + 80))
    goto LABEL_117;
  if (*(_QWORD *)(v101 + 72) <= 3uLL)
    *(_QWORD *)(v101 + 72) = 4;
  v171 = *(_QWORD *)(v101 + 48);
  v172 = *(_QWORD *)(v101 + 56);
  v173 = ((_BYTE)v171 - (*(_DWORD *)(v101 + 32) + *(_DWORD *)(v101 + 40))) & 3;
  if (v171 - v172 < v173)
  {
    sub_1C4D663A4((uint64_t *)v101, ((_BYTE)v171 - (*(_DWORD *)(v101 + 32) + *(_DWORD *)(v101 + 40))) & 3);
    *(_QWORD *)(v101 + 48) -= v173;
LABEL_232:
    v175 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(v101 + 48) + v175++) = 0;
    while (v173 != v175);
    v174 = *(_QWORD *)(v101 + 48);
    v172 = *(_QWORD *)(v101 + 56);
    goto LABEL_235;
  }
  v174 = v171 - v173;
  *(_QWORD *)(v101 + 48) = v174;
  if (v173)
    goto LABEL_232;
LABEL_235:
  if ((unint64_t)(v174 - v172) <= 3)
  {
    sub_1C4D663A4((uint64_t *)v101, 4uLL);
    v174 = *(_QWORD *)(v101 + 48);
  }
  *(_DWORD *)(v174 - 4) = v100;
  v176 = v174 - 4;
  *(_QWORD *)(v101 + 48) = v176;
  sub_1C4D66288((uint64_t *)v101, 78, *(_DWORD *)(v101 + 32) - v176 + *(_DWORD *)(v101 + 40));
LABEL_117:
  v102 = ((uint64_t (*)(_QWORD **, uint64_t, _QWORD, uint64_t, uint64_t))**a3)(a3, 18, 0, 1, 4);
  v103 = *a2;
  if (!v102 && !*(_BYTE *)(v103 + 80))
    goto LABEL_129;
  if (*(_QWORD *)(v103 + 72) <= 3uLL)
    *(_QWORD *)(v103 + 72) = 4;
  v104 = *(_QWORD *)(v103 + 48);
  v105 = *(_QWORD *)(v103 + 56);
  v106 = ((_BYTE)v104 - (*(_DWORD *)(v103 + 32) + *(_DWORD *)(v103 + 40))) & 3;
  if (v104 - v105 < v106)
  {
    sub_1C4D663A4((uint64_t *)v103, ((_BYTE)v104 - (*(_DWORD *)(v103 + 32) + *(_DWORD *)(v103 + 40))) & 3);
    *(_QWORD *)(v103 + 48) -= v106;
LABEL_123:
    v108 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(v103 + 48) + v108++) = 0;
    while (v106 != v108);
    v107 = *(_QWORD *)(v103 + 48);
    v105 = *(_QWORD *)(v103 + 56);
    goto LABEL_126;
  }
  v107 = v104 - v106;
  *(_QWORD *)(v103 + 48) = v107;
  if (v106)
    goto LABEL_123;
LABEL_126:
  if ((unint64_t)(v107 - v105) <= 3)
  {
    sub_1C4D663A4((uint64_t *)v103, 4uLL);
    v107 = *(_QWORD *)(v103 + 48);
  }
  *(_DWORD *)(v107 - 4) = v102;
  v109 = v107 - 4;
  *(_QWORD *)(v103 + 48) = v109;
  sub_1C4D66288((uint64_t *)v103, 80, *(_DWORD *)(v103 + 32) - v109 + *(_DWORD *)(v103 + 40));
LABEL_129:
  v110 = ((uint64_t (*)(_QWORD **, uint64_t, _QWORD, uint64_t, uint64_t))**a3)(a3, 14, 0, 1, 3);
  v111 = *a2;
  if (!v110 && !*(_BYTE *)(v111 + 80))
    goto LABEL_131;
  if (*(_QWORD *)(v111 + 72) <= 3uLL)
    *(_QWORD *)(v111 + 72) = 4;
  v177 = *(_QWORD *)(v111 + 48);
  v178 = *(_QWORD *)(v111 + 56);
  v179 = ((_BYTE)v177 - (*(_DWORD *)(v111 + 32) + *(_DWORD *)(v111 + 40))) & 3;
  if (v177 - v178 < v179)
  {
    sub_1C4D663A4((uint64_t *)v111, ((_BYTE)v177 - (*(_DWORD *)(v111 + 32) + *(_DWORD *)(v111 + 40))) & 3);
    *(_QWORD *)(v111 + 48) -= v179;
LABEL_242:
    v181 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(v111 + 48) + v181++) = 0;
    while (v179 != v181);
    v180 = *(_QWORD *)(v111 + 48);
    v178 = *(_QWORD *)(v111 + 56);
    goto LABEL_245;
  }
  v180 = v177 - v179;
  *(_QWORD *)(v111 + 48) = v180;
  if (v179)
    goto LABEL_242;
LABEL_245:
  if ((unint64_t)(v180 - v178) <= 3)
  {
    sub_1C4D663A4((uint64_t *)v111, 4uLL);
    v180 = *(_QWORD *)(v111 + 48);
  }
  *(_DWORD *)(v180 - 4) = v110;
  v182 = v180 - 4;
  *(_QWORD *)(v111 + 48) = v182;
  sub_1C4D66288((uint64_t *)v111, 82, *(_DWORD *)(v111 + 32) - v182 + *(_DWORD *)(v111 + 40));
LABEL_131:
  v112 = ((uint64_t (*)(_QWORD **, uint64_t, _QWORD, uint64_t, uint64_t))**a3)(a3, 39, 0, 1, 2);
  v113 = *a2;
  if (v112 || *(_BYTE *)(v113 + 80))
  {
    v145 = sub_1C4D6650C(*a2, v112 != 0);
    sub_1C4D66288((uint64_t *)v113, 84, v145);
  }
  v114 = ((uint64_t (*)(_QWORD **, uint64_t, _QWORD, uint64_t, uint64_t))**a3)(a3, 40, 0, 1, 2);
  v115 = *a2;
  if (v114 || *(_BYTE *)(v115 + 80))
  {
    v183 = sub_1C4D6650C(*a2, v114 != 0);
    sub_1C4D66288((uint64_t *)v115, 90, v183);
  }
  result = (uint64_t *)((uint64_t (*)(_QWORD **, uint64_t, _QWORD, uint64_t, uint64_t))**a3)(a3, 41, 0, 1, 2);
  v117 = *a2;
  if (result || *(_BYTE *)(v117 + 80))
  {
    v152 = sub_1C4D6650C(v117, result != 0);
    return sub_1C4D66288((uint64_t *)v117, 92, v152);
  }
  return result;
}

uint64_t *SetShaderInfoFromFunctionGroup(uint64_t a1, uint64_t *a2, uint64_t a3, int *a4)
{
  int v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  int v14;
  uint64_t v15;
  char v16;
  int v17;
  uint64_t v18;
  unsigned int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  unsigned int v48;
  BOOL v49;
  int v50;
  int v51;
  char v52;
  uint64_t v53;
  int v54;
  uint64_t v55;
  uint64_t *result;
  uint64_t v57;
  unsigned int v58;
  uint64_t v59;
  uint64_t v60;
  unint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  uint64_t v68;
  unsigned int v69;
  unsigned int v70;
  unsigned int v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  unsigned int v76;
  unsigned int v77;
  unsigned int v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  unsigned int v82;
  unsigned int v83;
  unsigned int v84;
  unsigned int v85;
  unsigned int v86;
  unsigned int v87;
  unsigned int v88;
  unsigned int v89;
  unint64_t v90;

  v7 = *a4;
  v8 = *a2;
  if (!*a4 && !*(_BYTE *)(v8 + 80))
    goto LABEL_9;
  if (*(_QWORD *)(v8 + 72) <= 3uLL)
    *(_QWORD *)(v8 + 72) = 4;
  v9 = *(_QWORD *)(v8 + 48);
  v10 = *(_QWORD *)(v8 + 56);
  v11 = ((_BYTE)v9 - (*(_DWORD *)(v8 + 32) + *(_DWORD *)(v8 + 40))) & 3;
  if (v9 - v10 < v11)
  {
    sub_1C4D663A4((uint64_t *)v8, ((_BYTE)v9 - (*(_DWORD *)(v8 + 32) + *(_DWORD *)(v8 + 40))) & 3);
    *(_QWORD *)(v8 + 48) -= v11;
LABEL_83:
    v73 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(v8 + 48) + v73++) = 0;
    while (v11 != v73);
    v12 = *(_QWORD *)(v8 + 48);
    v10 = *(_QWORD *)(v8 + 56);
    goto LABEL_6;
  }
  v12 = v9 - v11;
  *(_QWORD *)(v8 + 48) = v12;
  if (v11)
    goto LABEL_83;
LABEL_6:
  if ((unint64_t)(v12 - v10) <= 3)
  {
    sub_1C4D663A4((uint64_t *)v8, 4uLL);
    v12 = *(_QWORD *)(v8 + 48);
  }
  *(_DWORD *)(v12 - 4) = v7;
  v13 = v12 - 4;
  *(_QWORD *)(v8 + 48) = v13;
  sub_1C4D66288((uint64_t *)v8, 4, *(_DWORD *)(v8 + 32) - v13 + *(_DWORD *)(v8 + 40));
LABEL_9:
  v14 = (**(uint64_t (***)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))a3)(a3, 11, 0, 1, 4);
  v15 = *a2;
  if (!v14 && !*(_BYTE *)(v15 + 80))
    goto LABEL_11;
  if (*(_QWORD *)(v15 + 72) <= 3uLL)
    *(_QWORD *)(v15 + 72) = 4;
  v59 = *(_QWORD *)(v15 + 48);
  v60 = *(_QWORD *)(v15 + 56);
  v61 = ((_BYTE)v59 - (*(_DWORD *)(v15 + 32) + *(_DWORD *)(v15 + 40))) & 3;
  if (v59 - v60 < v61)
  {
    v90 = ((_BYTE)v59 - (*(_DWORD *)(v15 + 32) + *(_DWORD *)(v15 + 40))) & 3;
    sub_1C4D663A4((uint64_t *)v15, v61);
    v61 = v90;
    *(_QWORD *)(v15 + 48) -= v90;
LABEL_87:
    v74 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(v15 + 48) + v74++) = 0;
    while (v61 != v74);
    v62 = *(_QWORD *)(v15 + 48);
    v60 = *(_QWORD *)(v15 + 56);
    goto LABEL_68;
  }
  v62 = v59 - v61;
  *(_QWORD *)(v15 + 48) = v62;
  if (v61)
    goto LABEL_87;
LABEL_68:
  if ((unint64_t)(v62 - v60) <= 3)
  {
    sub_1C4D663A4((uint64_t *)v15, 4uLL);
    v62 = *(_QWORD *)(v15 + 48);
  }
  *(_DWORD *)(v62 - 4) = v14;
  v63 = v62 - 4;
  *(_QWORD *)(v15 + 48) = v63;
  sub_1C4D66288((uint64_t *)v15, 6, *(_DWORD *)(v15 + 32) - v63 + *(_DWORD *)(v15 + 40));
LABEL_11:
  if ((**(uint64_t (***)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))a3)(a3, 23, 0, 1, 2))
  {
    v18 = *a2;
    v16 = 1;
    goto LABEL_16;
  }
  v16 = 1;
  v17 = (**(uint64_t (***)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))a3)(a3, 11, 0, 1, 4);
  v18 = *a2;
  if (v17)
  {
LABEL_16:
    v19 = sub_1C4D6650C(v18, v16);
    sub_1C4D66288((uint64_t *)v18, 8, v19);
    goto LABEL_17;
  }
  if (*(_BYTE *)(v18 + 80))
  {
    v16 = 0;
    goto LABEL_16;
  }
LABEL_17:
  v20 = (**(uint64_t (***)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))a3)(a3, 25, 0, 1, 2);
  v21 = *a2;
  if (v20 || *(_BYTE *)(v21 + 80))
  {
    v69 = sub_1C4D6650C(*a2, v20 != 0);
    sub_1C4D66288((uint64_t *)v21, 10, v69);
  }
  v22 = (**(uint64_t (***)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))a3)(a3, 26, 0, 1, 2);
  v23 = *a2;
  if (v22 || *(_BYTE *)(v23 + 80))
  {
    v72 = sub_1C4D6650C(*a2, v22 != 0);
    sub_1C4D66288((uint64_t *)v23, 14, v72);
  }
  v24 = (**(uint64_t (***)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))a3)(a3, 24, 0, 1, 2);
  v25 = *a2;
  if (v24 || *(_BYTE *)(v25 + 80))
  {
    v71 = sub_1C4D6650C(*a2, v24 != 0);
    sub_1C4D66288((uint64_t *)v25, 12, v71);
  }
  v26 = (**(uint64_t (***)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))a3)(a3, 28, 0, 1, 2);
  v27 = *a2;
  if (v26 || *(_BYTE *)(v27 + 80))
  {
    v76 = sub_1C4D6650C(*a2, v26 != 0);
    sub_1C4D66288((uint64_t *)v27, 62, v76);
  }
  v28 = (**(uint64_t (***)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))a3)(a3, 32, 0, 1, 2);
  v29 = *a2;
  if (v28 || *(_BYTE *)(v29 + 80))
  {
    v77 = sub_1C4D6650C(*a2, v28 != 0);
    sub_1C4D66288((uint64_t *)v29, 46, v77);
  }
  v30 = (**(uint64_t (***)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))a3)(a3, 33, 0, 1, 2);
  v31 = *a2;
  if (v30 || *(_BYTE *)(v31 + 80))
  {
    v78 = sub_1C4D6650C(*a2, v30 != 0);
    sub_1C4D66288((uint64_t *)v31, 50, v78);
  }
  v32 = (**(uint64_t (***)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))a3)(a3, 31, 0, 1, 2);
  v33 = *a2;
  if (v32 || *(_BYTE *)(v33 + 80))
  {
    v79 = sub_1C4D6650C(*a2, v32 != 0);
    sub_1C4D66288((uint64_t *)v33, 48, v79);
  }
  v34 = (**(uint64_t (***)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))a3)(a3, 35, 0, 1, 2);
  v35 = *a2;
  if (v34 || *(_BYTE *)(v35 + 80))
  {
    v80 = sub_1C4D6650C(*a2, v34 != 0);
    sub_1C4D66288((uint64_t *)v35, 64, v80);
    v35 = *a2;
  }
  if (*((_BYTE *)a4 + 81) || *(_BYTE *)(v35 + 80))
  {
    v81 = sub_1C4D6650C(v35, *((_BYTE *)a4 + 81));
    sub_1C4D66288((uint64_t *)v35, 26, v81);
  }
  v36 = (**(uint64_t (***)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))a3)(a3, 21, 0, 1, 2);
  v37 = *a2;
  if (v36 || *(_BYTE *)(v37 + 80))
  {
    v82 = sub_1C4D68A6C(*a2, v36 != 0);
    sub_1C4D66288((uint64_t *)v37, 30, v82);
  }
  v38 = (**(uint64_t (***)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))a3)(a3, 42, 0, 1, 2);
  v39 = *a2;
  if (v38 || *(_BYTE *)(v39 + 80))
  {
    v83 = sub_1C55898D8(*a2, v38);
    sub_1C4D66288((uint64_t *)v39, 52, v83);
  }
  v40 = (**(uint64_t (***)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))a3)(a3, 43, 0, 1, 2);
  v41 = *a2;
  if (v40 || *(_BYTE *)(v41 + 80))
  {
    v84 = sub_1C55898D8(*a2, v40);
    sub_1C4D66288((uint64_t *)v41, 54, v84);
  }
  v42 = (**(uint64_t (***)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))a3)(a3, 44, 0, 1, 2);
  v43 = *a2;
  if (v42 || *(_BYTE *)(v43 + 80))
  {
    v85 = sub_1C55898D8(*a2, v42);
    sub_1C4D66288((uint64_t *)v43, 56, v85);
  }
  v44 = (**(uint64_t (***)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))a3)(a3, 45, 0, 1, 2);
  v45 = *a2;
  if (v44 || *(_BYTE *)(v45 + 80))
  {
    v86 = sub_1C55898D8(*a2, v44);
    sub_1C4D66288((uint64_t *)v45, 58, v86);
  }
  v46 = (**(uint64_t (***)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))a3)(a3, 46, 0, 1, 2);
  v47 = *a2;
  if (v46 || *(_BYTE *)(v47 + 80))
  {
    v87 = sub_1C55898D8(*a2, v46);
    sub_1C4D66288((uint64_t *)v47, 60, v87);
    v47 = *a2;
  }
  v48 = a4[19];
  v49 = v48 > 0x1E;
  v50 = *((unsigned __int8 *)a4 + 80);
  if (v48 <= 0x12C)
    v51 = v48 > 0x1E;
  else
    v51 = 2;
  if (v49 && *((_BYTE *)a4 + 80) != 0)
    v51 = 3;
  if (v51 || *(_BYTE *)(v47 + 80))
  {
    v58 = sub_1C4D6650C(v47, v51);
    sub_1C4D66288((uint64_t *)v47, 32, v58);
    v50 = *((unsigned __int8 *)a4 + 80);
    v47 = *a2;
  }
  if (v50 || *(_BYTE *)(v47 + 80))
  {
    v70 = sub_1C4D6650C(v47, v50);
    sub_1C4D66288((uint64_t *)v47, 34, v70);
  }
  v52 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a3 + 656))(a3);
  v53 = *a2;
  if ((v52 & 1) != 0 || *(_BYTE *)(v53 + 80))
  {
    v88 = sub_1C4D6650C(*a2, v52);
    sub_1C4D66288((uint64_t *)v53, 40, v88);
  }
  v54 = (**(uint64_t (***)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))a3)(a3, 18, 0, 1, 4);
  v55 = *a2;
  if (v54 || *(_BYTE *)(v55 + 80))
  {
    if (*(_QWORD *)(v55 + 72) <= 3uLL)
      *(_QWORD *)(v55 + 72) = 4;
    v64 = *(_QWORD *)(v55 + 48);
    v65 = *(_QWORD *)(v55 + 56);
    v66 = ((_BYTE)v64 - (*(_DWORD *)(v55 + 32) + *(_DWORD *)(v55 + 40))) & 3;
    if (v64 - v65 < v66)
    {
      sub_1C4D663A4((uint64_t *)v55, ((_BYTE)v64 - (*(_DWORD *)(v55 + 32) + *(_DWORD *)(v55 + 40))) & 3);
      *(_QWORD *)(v55 + 48) -= v66;
    }
    else
    {
      v67 = v64 - v66;
      *(_QWORD *)(v55 + 48) = v67;
      if (!v66)
      {
LABEL_75:
        if ((unint64_t)(v67 - v65) <= 3)
        {
          sub_1C4D663A4((uint64_t *)v55, 4uLL);
          v67 = *(_QWORD *)(v55 + 48);
        }
        *(_DWORD *)(v67 - 4) = v54;
        v68 = v67 - 4;
        *(_QWORD *)(v55 + 48) = v68;
        sub_1C4D66288((uint64_t *)v55, 42, *(_DWORD *)(v55 + 32) - v68 + *(_DWORD *)(v55 + 40));
        goto LABEL_60;
      }
    }
    v75 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(v55 + 48) + v75++) = 0;
    while (v66 != v75);
    v67 = *(_QWORD *)(v55 + 48);
    v65 = *(_QWORD *)(v55 + 56);
    goto LABEL_75;
  }
LABEL_60:
  result = (uint64_t *)(**(uint64_t (***)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))a3)(a3, 41, 0, 1, 2);
  v57 = *a2;
  if (result || *(_BYTE *)(v57 + 80))
  {
    v89 = sub_1C4D6650C(v57, result != 0);
    return sub_1C4D66288((uint64_t *)v57, 44, v89);
  }
  return result;
}

void llvm::GPUMetadataEmitter::EmitSerializedMetadataFlatbuffer(uint64_t a1, uint64_t a2, _QWORD *a3, uint64_t a4)
{
  const void *v5;
  uint64_t v6;
  char v7;
  int v8;
  uint64_t v9;
  llvm::raw_ostream *v10;
  _BYTE *v11;
  const char *p_p;
  size_t v13;
  llvm::raw_ostream *v14;
  _OWORD *v15;
  size_t v16;
  void *v17;
  uint64_t v18;
  void *v19;
  size_t v20;
  void *__p;
  size_t v22;
  uint64_t v23;

  v5 = (const void *)a3[6];
  v6 = a3[5] - (_QWORD)v5 + a3[4];
  if (*(_BYTE *)(a1 + 6360))
  {
    __p = 0;
    v22 = 0;
    v23 = 0;
    v7 = *(_BYTE *)(a2 + 335);
    v8 = v7;
    v9 = v7 & 0x7F;
    if (v8 < 0)
      v9 = *(_QWORD *)(a2 + 320);
    if (v9)
      std::operator+<char>();
    flatbuffers::GenerateText();
    v10 = (llvm::raw_ostream *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 120))(a4);
    v11 = (_BYTE *)*((_QWORD *)v10 + 4);
    if (*((_BYTE **)v10 + 3) == v11)
    {
      v10 = llvm::raw_ostream::write(v10, "\n", 1uLL);
    }
    else
    {
      *v11 = 10;
      ++*((_QWORD *)v10 + 4);
    }
    if (v23 >= 0)
      p_p = (const char *)&__p;
    else
      p_p = (const char *)__p;
    if (v23 >= 0)
      v13 = HIBYTE(v23) & 0x7F;
    else
      v13 = v22;
    v14 = llvm::raw_ostream::write(v10, p_p, v13);
    v15 = (_OWORD *)*((_QWORD *)v14 + 4);
    if (*((_QWORD *)v14 + 3) - (_QWORD)v15 > 0xFuLL)
    {
      *v15 = *(_OWORD *)".flatbuffer_end\n";
      *((_QWORD *)v14 + 4) += 16;
    }
    else
    {
      llvm::raw_ostream::write(v14, ".flatbuffer_end\n", 0x10uLL);
    }
    if (SHIBYTE(v23) < 0)
      operator delete(__p);
  }
  v16 = v6;
  if (v6 >= 0x17uLL)
  {
    if ((v6 | 7) == 0x17)
      v18 = (v6 & 0xFFFFFFF8) + 8;
    else
      v18 = v6 | 7;
    v17 = operator new(v18 + 1);
    v22 = v16;
    v23 = v18 - 0x7FFFFFFFFFFFFFFFLL;
    __p = v17;
    goto LABEL_25;
  }
  HIBYTE(v23) = v6;
  v17 = &__p;
  if (v16)
LABEL_25:
    memmove(v17, v5, v16);
  *((_BYTE *)v17 + v16) = 0;
  if (v23 >= 0)
    v19 = &__p;
  else
    v19 = __p;
  if (v23 >= 0)
    v20 = HIBYTE(v23) & 0x7F;
  else
    v20 = v22;
  (*(void (**)(uint64_t, void *, size_t))(*(_QWORD *)a4 + 488))(a4, v19, v20);
  if (SHIBYTE(v23) < 0)
    operator delete(__p);
}

uint64_t llvm::GPUMetadataEmitter::EmitMetadataFromFB(uint64_t a1, int a2, uint64_t a3, uint64_t ***a4, uint64_t a5, llvm::MCStreamer *a6, char *__s, _QWORD *a8, char a9)
{
  size_t v16;
  size_t MachOSection;
  uint64_t **v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t ****v24;
  uint64_t ***v25;
  int v26;
  int v27;
  uint64_t ***v28;
  char *v29;
  uint64_t **v30;
  uint64_t **v31;
  unint64_t Symbol;
  void *v33;
  uint64_t **v34;
  const char *v35;
  __int16 v36;
  void *v37;
  __int128 v38;
  _QWORD v39[9];

  v39[8] = *MEMORY[0x1E0C80C00];
  if (__s)
    v16 = strlen(__s);
  else
    v16 = 0;
  MachOSection = llvm::MCContext::getMachOSection(a5, (uint64_t)"__GPU_METADATA", 0xEuLL, (uint64_t)__s, v16, 0, 0, 0, 0);
  *(_BYTE *)(MachOSection + 24) = 3;
  (*(void (**)(llvm::MCStreamer *, size_t, _QWORD))(*(_QWORD *)a6 + 168))(a6, MachOSection, 0);
  (*(void (**)(llvm::MCStreamer *, uint64_t, _QWORD, uint64_t, _QWORD))(*(_QWORD *)a6 + 632))(a6, 8, 0, 1, 0);
  if (!a9)
    goto LABEL_4;
  v37 = v39;
  v38 = xmmword_1C85FB220;
  v19 = a4[5];
  if ((*((_BYTE *)a4 + 23) & 0x10) != 0)
  {
    v20 = ***a4;
    v21 = *(_QWORD *)(v20 + 152);
    v22 = *(unsigned int *)(v20 + 168);
    if ((_DWORD)v22)
    {
      LODWORD(v23) = (v22 - 1) & ((a4 >> 4) ^ (a4 >> 9));
      v24 = (uint64_t ****)(v21 + 16 * v23);
      v25 = *v24;
      if (*v24 == a4)
      {
LABEL_12:
        v28 = v24[1];
        v31 = *v28;
        v29 = (char *)(v28 + 2);
        v30 = v31;
        goto LABEL_13;
      }
      v26 = 1;
      while (v25 != (uint64_t ***)-4096)
      {
        v27 = v23 + v26++;
        v23 = v27 & (v22 - 1);
        v25 = *(uint64_t ****)(v21 + 16 * v23);
        if (v25 == a4)
        {
          v24 = (uint64_t ****)(v21 + 16 * v23);
          goto LABEL_12;
        }
      }
    }
    v24 = (uint64_t ****)(v21 + 16 * v22);
    goto LABEL_12;
  }
  v30 = 0;
  v29 = &byte_1C871356D;
LABEL_13:
  v36 = 261;
  v33 = v29;
  v34 = v30;
  llvm::Mangler::getNameWithPrefix((uint64_t)&v37, (uint64_t)&v33, (uint64_t)(v19 + 34));
  v33 = v37;
  v34 = (uint64_t **)v38;
  v35 = "@md";
  v36 = 773;
  Symbol = llvm::MCContext::getOrCreateSymbol(a5, (uint64_t)&v33);
  (*(void (**)(llvm::MCStreamer *, unint64_t, _QWORD))(*(_QWORD *)a6 + 192))(a6, Symbol, 0);
  if (v37 != v39)
    free(v37);
LABEL_4:
  llvm::GPUMetadataEmitter::EmitSerializedMetadataFlatbuffer(a1, a1 + 320, a8, (uint64_t)a6);
  return sub_1C557BB88(a5, a6, MachOSection, a3);
}

uint64_t sub_1C557BB88(uint64_t result, llvm::MCStreamer *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v8;
  uint64_t i;
  unsigned int *v10;
  int *v11;
  unsigned __int16 *v12;
  uint64_t v13;
  int *v14;
  unsigned __int16 *v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  const llvm::GlobalValue *v22;
  int v23;
  unint64_t Symbol;
  uint64_t Metadata;
  _QWORD *v27;
  uint64_t v28;
  uint64_t v29;
  _QWORD *v30;
  uint64_t v31;
  _QWORD *v32;
  _QWORD *v33;
  uint64_t v34;
  _QWORD *v35;
  uint64_t v36;
  unsigned int *v37;
  unint64_t v39;
  int v40;
  unint64_t v41;
  uint64_t v42;
  __int128 v43;
  uint64_t v44;
  unint64_t v45;
  int v46;
  unint64_t v47;
  unint64_t v48;
  int v49;
  void **v50;
  int v51;
  int v52;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  char v56;
  uint64_t v57;
  int v58;
  void **v59;
  _QWORD v60[2];
  int v61;
  void *__p[2];
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  void **v66;
  _QWORD v67[2];

  v4 = a3 + 104;
  if (*(_QWORD *)(a3 + 104) == a3 + 104)
    return result;
  v8 = result;
  result = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 264))(a4);
  if ((result & 1) != 0)
    return result;
  for (i = *(_QWORD *)(a3 + 112); i != v4; i = *(_QWORD *)(i + 8))
  {
    if (*(_BYTE *)(i + 48) == 1)
    {
      v4 = i;
      break;
    }
  }
  v10 = *(unsigned int **)(v4 + 64);
  v11 = (int *)((char *)v10 + *v10);
  v12 = (unsigned __int16 *)((char *)v11 - *v11);
  if (*v12 >= 5u && (v13 = v12[2]) != 0)
    v14 = (int *)((char *)v11 + v13 + *(unsigned int *)((char *)v11 + v13));
  else
    v14 = 0;
  v15 = (unsigned __int16 *)((char *)v14 - *v14);
  if (*v15 >= 0x1Fu && (v16 = v15[15]) != 0)
    v17 = (_DWORD)v14 + v16 + *(int *)((char *)v14 + v16);
  else
    v17 = 0;
  (*(void (**)(void ***__return_ptr, uint64_t))(*(_QWORD *)a4 + 248))(&v50, a4);
  (*(void (**)(_QWORD *__return_ptr, uint64_t))(*(_QWORD *)a4 + 256))(v67, a4);
  v66 = v50;
  sub_1C4E40408(&v65, (uint64_t)&v66);
  sub_1C4E40408(&v64, (uint64_t)v67);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v65 + 24))(v65, v64) & 1) == 0)
  {
    v49 = v17 - (_DWORD)v10 + 4;
    do
    {
      v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v65 + 32))(v65);
      v22 = *(const llvm::GlobalValue **)v21;
      v23 = *(_DWORD *)(v21 + 8);
      __p[0] = 0;
      __p[1] = 0;
      v63 = 0;
      v60[0] = 0;
      v60[1] = 0;
      v61 = 0;
      v51 = 0;
      v56 = 0;
      v57 = 0;
      v50 = (void **)&unk_1E81A7208;
      v59 = __p;
      v58 = 0;
      v54 = 0;
      v55 = 0;
      v53 = 0;
      llvm::Mangler::getNameWithPrefix((llvm::Mangler *)v60, (llvm::raw_ostream *)&v50, v22, 1);
      v50 = (void **)off_1E81A6E70;
      if (v58 == 1 && v53)
        MEMORY[0x1CAA32F9C](v53, 0x1000C8077774924);
      MEMORY[0x1CAA32FB4](v60[0], 8);
      LOWORD(v55) = 260;
      v50 = __p;
      Symbol = llvm::MCContext::getOrCreateSymbol(v8, (uint64_t)&v50);
      if (*((_BYTE *)v22 + 16) != 3 || v22 == 0)
        goto LABEL_49;
      Metadata = llvm::Value::getMetadata((uint64_t)v22, "agx.bind", 8uLL);
      if (!Metadata)
        goto LABEL_49;
      v27 = (_QWORD *)(Metadata - 8 * *(unsigned int *)(Metadata + 8));
      v28 = v27[1];
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v27 + 128) + 24) + 8) == 17)
      {
        if (*(_BYTE *)v28 != 1 || (v29 = *(_QWORD *)(v28 + 128), *(_BYTE *)(v29 + 16) != 16))
        {
          v30 = (_QWORD *)(v28 - 8 * *(unsigned int *)(v28 + 8));
          v31 = *(_QWORD *)(*v30 + 128);
          v32 = (_QWORD *)(v31 + 24);
          if (*(_DWORD *)(v31 + 32) >= 0x41u)
            v32 = (_QWORD *)*v32;
          v33 = (_QWORD *)*v32;
          v34 = v30[1];
          goto LABEL_43;
        }
      }
      else
      {
        v29 = *(_QWORD *)(v28 + 128);
      }
      v35 = (_QWORD *)(v29 + 24);
      if (*(_DWORD *)(v29 + 32) >= 0x41u)
        v35 = (_QWORD *)*v35;
      v33 = (_QWORD *)*v35;
      v34 = v27[2];
LABEL_43:
      v36 = *(_QWORD *)(v34 + 128);
      v37 = (unsigned int *)(v36 + 24);
      if (*(_DWORD *)(v36 + 32) >= 0x41u)
        v37 = *(unsigned int **)v37;
      if ((_DWORD)v33 == 114 || (_DWORD)v33 == 18)
      {
        v44 = *v37;
        v45 = sub_1C484358C(v8 + 192, 24, 3);
        v48 = v45;
        if (*(_BYTE *)(*(_QWORD *)(v8 + 152) + 18))
          v46 = 65689;
        else
          v46 = 153;
        *(_BYTE *)v45 = 2;
        *(_DWORD *)(v45 + 1) = v46 | (*(unsigned __int8 *)(v45 + 4) << 24);
        *(_QWORD *)(v45 + 8) = 0;
        *(_QWORD *)(v45 + 16) = Symbol;
        v47 = sub_1C484358C(v8 + 192, 24, 3);
        *(_BYTE *)v47 = 1;
        *(_DWORD *)(v47 + 1) = *(unsigned __int8 *)(v47 + 4) << 24;
        *(_QWORD *)(v47 + 8) = 0;
        *(_QWORD *)(v47 + 16) = v44;
        v39 = sub_1C484358C(v8 + 192, 32, 3);
        *(_BYTE *)v39 = 0;
        *(_DWORD *)(v39 + 1) = *(unsigned __int8 *)(v39 + 4) << 24;
        *(_QWORD *)(v39 + 8) = 0;
        *(_QWORD *)(v39 + 16) = v48;
        *(_QWORD *)(v39 + 24) = v47;
        goto LABEL_50;
      }
LABEL_49:
      v39 = sub_1C484358C(v8 + 192, 24, 3);
      v40 = *(unsigned __int8 *)(*(_QWORD *)(v8 + 152) + 18) << 16;
      *(_BYTE *)v39 = 2;
      *(_DWORD *)(v39 + 1) = v40 | (*(unsigned __int8 *)(v39 + 4) << 24);
      *(_QWORD *)(v39 + 8) = 0;
      *(_QWORD *)(v39 + 16) = Symbol;
LABEL_50:
      llvm::MCStreamer::visitUsedExpr(a2, (const llvm::MCExpr **)v39);
      v50 = (void **)v39;
      v51 = v23 + v49;
      v52 = 128;
      v53 = 0;
      v41 = sub_1C4926708(v4 + 120, (unint64_t)&v50, 1);
      v42 = *(_QWORD *)(v4 + 120) + 24 * *(unsigned int *)(v4 + 128);
      v43 = *(_OWORD *)v41;
      *(_QWORD *)(v42 + 16) = *(_QWORD *)(v41 + 16);
      *(_OWORD *)v42 = v43;
      ++*(_DWORD *)(v4 + 128);
      if (SHIBYTE(v63) < 0)
        operator delete(__p[0]);
      (*(void (**)(uint64_t))(*(_QWORD *)v65 + 40))(v65);
    }
    while (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v65 + 24))(v65, v64) & 1) == 0);
  }
  v18 = v64;
  v64 = 0;
  if (v18)
    (*(void (**)(uint64_t))(*(_QWORD *)v18 + 8))(v18);
  v19 = v65;
  v65 = 0;
  if (v19)
    (*(void (**)(uint64_t))(*(_QWORD *)v19 + 8))(v19);
  v20 = v67[0];
  v67[0] = 0;
  if (v20)
    (*(void (**)(uint64_t))(*(_QWORD *)v20 + 8))(v20);
  result = (uint64_t)v66;
  v66 = 0;
  if (result)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)result + 8))(result);
  return result;
}

uint64_t llvm::GPUMetadataEmitter::EmitCommonMetadata(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6)
{
  uint64_t v9;
  uint64_t NamedMetadata;
  uint64_t i;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  char *v20;
  void *v21;
  std::string::size_type v22;
  std::string::size_type v23;
  char *v24;
  char *v25;
  uint64_t v26;
  unsigned int v27;
  uint64_t v28;
  uint64_t v29;
  unsigned int v30;
  uint64_t j;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  _QWORD *v35;
  int v36;
  uint64_t v37;
  unint64_t v38;
  unint64_t v39;
  char *v40;
  char *v41;
  char *v42;
  int v43;
  void *v44;
  std::string::size_type v45;
  std::string::size_type v46;
  char *v47;
  int v48;
  int v49;
  uint64_t v50;
  void *v51;
  std::string::size_type v52;
  std::string::size_type v53;
  char *v54;
  char *v55;
  unsigned int v56;
  std::string::size_type v57;
  void *v58;
  std::string::size_type v59;
  std::string::size_type v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int v63;
  unsigned int v64;
  uint64_t v65;
  uint64_t v66;
  std::string::size_type v67;
  void *v68;
  std::string::size_type v69;
  std::string::size_type v70;
  uint64_t v71;
  unint64_t v72;
  int v73;
  uint64_t v74;
  uint64_t v75;
  unint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned int v79;
  unsigned int v80;
  unsigned int v81;
  int v82;
  int v83;
  uint64_t v84;
  char *v85;
  void *v86;
  std::string::size_type v87;
  std::string::size_type v88;
  char *v89;
  unsigned int v90;
  std::string::size_type v91;
  void *v92;
  std::string::size_type v93;
  std::string::size_type v94;
  unsigned int v95;
  _QWORD *v96;
  uint64_t v97;
  unsigned int v98;
  uint64_t v99;
  unsigned int v100;
  std::string::size_type v101;
  unsigned int v102;
  uint64_t v103;
  uint64_t v104;
  unsigned int v105;
  std::string::size_type v106;
  void *v107;
  std::string::size_type v108;
  std::string::size_type v109;
  _QWORD *v110;
  uint64_t v111;
  unint64_t v112;
  int v113;
  unsigned int v114;
  uint64_t v115;
  uint64_t v116;
  unint64_t v117;
  uint64_t v118;
  unsigned int v119;
  uint64_t v120;
  int v121;
  unsigned int v122;
  _QWORD *v123;
  void *v124;
  std::string::size_type size;
  std::string::size_type v126;
  uint64_t v127;
  char *v128;
  void *v129;
  std::string::size_type v130;
  std::string::size_type v131;
  char *v132;
  char *v133;
  char *v134;
  uint64_t v135;
  int v136;
  uint64_t v137;
  uint64_t v138;
  uint64_t v139;
  int v140;
  BOOL v141;
  unint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v145;
  uint64_t v146;
  char v147;
  unsigned int v148;
  uint64_t v149;
  uint64_t v150;
  _QWORD *v151;
  _QWORD *v152;
  uint64_t v153;
  _QWORD *v154;
  int v155;
  int v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  unint64_t v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  int v164;
  int v165;
  char *v166;
  uint64_t v167;
  unint64_t v168;
  unint64_t v169;
  char *v170;
  char *v171;
  char *v172;
  int v173;
  char *v174;
  char *v175;
  uint64_t v176;
  char *v177;
  char *v178;
  char v179;
  uint64_t v180;
  uint64_t v181;
  unsigned int v182;
  uint64_t v183;
  void *v184;
  unint64_t v185;
  unint64_t v186;
  char *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  int v191;
  int v192;
  unint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  uint64_t v198;
  char v199;
  unsigned int v200;
  char *v201;
  uint64_t v202;
  uint64_t v203;
  _QWORD *v204;
  uint64_t v205;
  _QWORD *v206;
  _QWORD *v207;
  uint64_t v208;
  _QWORD *v209;
  uint64_t v210;
  _QWORD *v211;
  int v212;
  int v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unint64_t v217;
  uint64_t v218;
  uint64_t v219;
  uint64_t v220;
  int v221;
  int v222;
  uint64_t v223;
  unint64_t v224;
  unint64_t v225;
  char *v226;
  int v227;
  char *v228;
  char *v229;
  char *v230;
  uint64_t v231;
  char *v232;
  char *v233;
  char v234;
  uint64_t v235;
  uint64_t v236;
  unsigned int v237;
  uint64_t v238;
  void *v239;
  unint64_t v240;
  unint64_t v241;
  uint64_t v242;
  uint64_t v243;
  uint64_t v244;
  int v245;
  int v246;
  unint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  char v253;
  unsigned int v254;
  char *v255;
  uint64_t v256;
  uint64_t v257;
  _QWORD *v258;
  uint64_t v259;
  _QWORD *v260;
  _QWORD *v261;
  uint64_t v262;
  _QWORD *v263;
  uint64_t v264;
  _QWORD *v265;
  int v266;
  int v267;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  unint64_t v271;
  uint64_t v272;
  uint64_t v273;
  uint64_t v274;
  int v275;
  int v276;
  uint64_t v277;
  unint64_t v278;
  unint64_t v279;
  char *v280;
  char *v281;
  int v282;
  char *v283;
  uint64_t v284;
  uint64_t v285;
  void *v286;
  uint64_t v287;
  uint64_t v288;
  unsigned int v289;
  uint64_t v290;
  uint64_t v291;
  unsigned int v292;
  uint64_t v293;
  char *v294;
  uint64_t v295;
  uint64_t v296;
  uint64_t v297;
  int v298;
  int v299;
  unint64_t v301;
  uint64_t v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  char v306;
  unsigned int v307;
  _QWORD *v308;
  uint64_t v309;
  uint64_t v310;
  _QWORD *v311;
  uint64_t v312;
  _QWORD *v313;
  _QWORD *v314;
  uint64_t v315;
  _QWORD *v316;
  uint64_t v317;
  _QWORD *v318;
  int v319;
  int v320;
  unsigned int v321;
  uint64_t v322;
  uint64_t v323;
  unint64_t v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  int v328;
  int v329;
  char *v330;
  uint64_t v331;
  unint64_t v332;
  char *v333;
  unint64_t v334;
  char *v335;
  int v336;
  char *v337;
  char *v338;
  char v339;
  uint64_t v340;
  uint64_t v341;
  _QWORD *v342;
  void *v343;
  std::string::size_type v344;
  std::string::size_type v345;
  unsigned int v346;
  unsigned int v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  int v352;
  int v353;
  unint64_t v355;
  uint64_t v356;
  uint64_t v357;
  uint64_t v358;
  uint64_t v359;
  unsigned int v360;
  int v361;
  uint64_t v362;
  uint64_t v363;
  unint64_t v364;
  uint64_t v365;
  uint64_t v366;
  uint64_t v367;
  int v368;
  int v369;
  char *v370;
  char *v371;
  char *v372;
  char *v373;
  uint64_t v374;
  unint64_t v375;
  unint64_t v376;
  char *v377;
  int v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  BOOL v382;
  int v383;
  unint64_t v384;
  uint64_t v385;
  uint64_t v386;
  uint64_t v387;
  uint64_t v388;
  unsigned int v389;
  int v390;
  uint64_t v391;
  uint64_t v392;
  unint64_t v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  int v397;
  int v398;
  char *v399;
  uint64_t v400;
  unint64_t v401;
  unint64_t v402;
  char *v403;
  char *v404;
  char *v405;
  int v406;
  unsigned int v407;
  unsigned int v408;
  unsigned int v409;
  unsigned int v410;
  uint64_t v411;
  char *v412;
  char *v413;
  _QWORD *v414;
  std::string::size_type v415;
  std::string::size_type v416;
  char *v417;
  char *v418;
  uint64_t v419;
  unsigned int *v420;
  uint64_t v421;
  uint64_t v422;
  unsigned int v423;
  uint64_t v424;
  uint64_t v425;
  unint64_t v426;
  uint64_t v427;
  uint64_t v428;
  uint64_t v429;
  int v430;
  int v431;
  unint64_t v433;
  uint64_t v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  unsigned int *v438;
  uint64_t v439;
  uint64_t v440;
  _QWORD *v441;
  uint64_t v442;
  _QWORD *v443;
  _QWORD *v444;
  uint64_t v445;
  _QWORD *v446;
  uint64_t v447;
  _QWORD *v448;
  int v449;
  int v450;
  unsigned int v451;
  uint64_t v452;
  uint64_t v453;
  unint64_t v454;
  uint64_t v455;
  uint64_t v456;
  uint64_t v457;
  int v458;
  int v459;
  uint64_t v460;
  unint64_t v461;
  unint64_t v462;
  char *v463;
  char *v464;
  int v465;
  unsigned int v466;
  unsigned int v467;
  unsigned int v468;
  uint64_t v469;
  int v470;
  char *v471;
  char *v472;
  _QWORD *v473;
  std::string::size_type v474;
  std::string::size_type v475;
  unsigned int v476;
  unsigned int v477;
  _BOOL4 v478;
  char *v479;
  uint64_t v480;
  int v481;
  uint64_t v482;
  int v483;
  unint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  int v490;
  _QWORD *v491;
  uint64_t v492;
  uint64_t v493;
  _QWORD *v494;
  _QWORD *v495;
  uint64_t v496;
  uint64_t v497;
  _QWORD *v498;
  int v499;
  int v500;
  unsigned int v501;
  uint64_t v502;
  uint64_t v503;
  unint64_t v504;
  uint64_t v505;
  uint64_t v506;
  uint64_t v507;
  int v508;
  int v509;
  uint64_t v510;
  unint64_t v511;
  unint64_t v512;
  char *v513;
  _QWORD *v514;
  uint64_t v515;
  _QWORD *v516;
  char *v517;
  int v518;
  int v519;
  unsigned int v520;
  uint64_t v521;
  unsigned int v522;
  int v523;
  int v524;
  uint64_t v525;
  uint64_t v526;
  unint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  unsigned int v531;
  int v532;
  uint64_t v533;
  uint64_t v534;
  unint64_t v535;
  uint64_t v536;
  uint64_t v537;
  uint64_t v538;
  int v539;
  int v540;
  char *v541;
  char *v542;
  unsigned int v543;
  char *v544;
  uint64_t v545;
  unint64_t v546;
  uint64_t v547;
  unint64_t v548;
  char *v549;
  std::string::size_type v550;
  void *v551;
  std::string::size_type v552;
  std::string::size_type v553;
  char *v554;
  int v555;
  int v556;
  int v557;
  _QWORD **v558;
  uint64_t v559;
  uint64_t *v560;
  int v561;
  unsigned int v562;
  unsigned int v563;
  unint64_t v564;
  unint64_t v565;
  _QWORD **v566;
  int v567;
  unsigned int v568;
  int v569;
  uint64_t v570;
  char *v571;
  char *v572;
  char *v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  unint64_t v578;
  uint64_t v579;
  uint64_t v580;
  uint64_t v581;
  uint64_t v582;
  uint64_t v583;
  __int16 v584;
  uint64_t v585;
  uint64_t v586;
  unint64_t v587;
  uint64_t v588;
  uint64_t v589;
  uint64_t v590;
  unsigned int v591;
  unsigned int v592;
  uint64_t v594;
  uint64_t v595;
  unint64_t v596;
  uint64_t v597;
  uint64_t v598;
  int v599;
  uint64_t v600;
  uint64_t v601;
  uint64_t v602;
  unint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  int v607;
  uint64_t v608;
  uint64_t v609;
  uint64_t v610;
  unint64_t v611;
  uint64_t v612;
  uint64_t v613;
  uint64_t v614;
  uint64_t v615;
  uint64_t v616;
  __int16 v617;
  uint64_t v618;
  uint64_t v619;
  unint64_t v620;
  uint64_t v621;
  uint64_t v622;
  uint64_t v623;
  unsigned int v624;
  unsigned int v625;
  uint64_t v627;
  uint64_t v628;
  unint64_t v629;
  uint64_t v630;
  uint64_t v631;
  int v632;
  uint64_t v633;
  uint64_t v634;
  uint64_t v635;
  unint64_t v636;
  uint64_t v637;
  uint64_t v638;
  uint64_t v639;
  int v640;
  uint64_t v641;
  uint64_t v642;
  unint64_t v643;
  int v644;
  unint64_t v645;
  char *v646;
  uint64_t v647;
  std::string::size_type v648;
  uint64_t v649;
  uint64_t v650;
  unsigned int v651;
  uint64_t v652;
  std::string::size_type v653;
  uint64_t v654;
  std::string::size_type v655;
  uint64_t v656;
  uint64_t v657;
  uint64_t v658;
  uint64_t v659;
  __int16 v660;
  unint64_t v662;
  uint64_t v663;
  uint64_t v664;
  uint64_t v665;
  uint64_t v666;
  unsigned int v667;
  uint64_t v668;
  uint64_t v669;
  unint64_t v670;
  uint64_t v671;
  uint64_t v672;
  uint64_t v673;
  int v674;
  int v675;
  char *v676;
  char *v677;
  char *v678;
  char *v679;
  char *v680;
  int v681;
  int v682;
  int v683;
  int v684;
  unsigned int v685;
  uint64_t v686;
  unsigned int v687;
  unsigned int v689;
  uint64_t v690;
  uint64_t v691;
  unint64_t v692;
  uint64_t v693;
  uint64_t v694;
  int v695;
  uint64_t v696;
  uint64_t v697;
  uint64_t v698;
  uint64_t v699;
  unint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  uint64_t v704;
  uint64_t v705;
  unint64_t v706;
  uint64_t v707;
  uint64_t v708;
  uint64_t v709;
  uint64_t v710;
  uint64_t v711;
  unint64_t v712;
  uint64_t v713;
  uint64_t v714;
  uint64_t v715;
  int v716;
  int v717;
  uint64_t v718;
  unint64_t v719;
  char *v720;
  unint64_t v721;
  char *v722;
  char *v723;
  int v724;
  int v725;
  int v726;
  int v727;
  int v728;
  unsigned int v729;
  uint64_t v730;
  unsigned int v731;
  unsigned int v733;
  uint64_t v734;
  uint64_t v735;
  unint64_t v736;
  uint64_t v737;
  uint64_t v738;
  int v739;
  uint64_t v740;
  uint64_t v741;
  uint64_t v742;
  uint64_t v743;
  unint64_t v744;
  uint64_t v745;
  uint64_t v746;
  uint64_t v747;
  uint64_t v748;
  uint64_t v749;
  unint64_t v750;
  uint64_t v751;
  uint64_t v752;
  uint64_t v753;
  uint64_t v754;
  uint64_t v755;
  unint64_t v756;
  uint64_t v757;
  uint64_t v758;
  uint64_t v759;
  int v760;
  int v761;
  int v762;
  uint64_t v763;
  unint64_t v764;
  char *v765;
  unint64_t v766;
  char *v767;
  char *v768;
  int v769;
  int v770;
  char *v771;
  int v772;
  int v773;
  int v774;
  unsigned int v775;
  uint64_t v776;
  unsigned int v777;
  unsigned int v779;
  uint64_t v780;
  uint64_t v781;
  unint64_t v782;
  uint64_t v783;
  uint64_t v784;
  int v785;
  uint64_t v786;
  uint64_t v787;
  uint64_t v788;
  uint64_t v789;
  unint64_t v790;
  uint64_t v791;
  uint64_t v792;
  uint64_t v793;
  uint64_t v794;
  uint64_t v795;
  unint64_t v796;
  uint64_t v797;
  uint64_t v798;
  uint64_t v799;
  uint64_t v800;
  uint64_t v801;
  unint64_t v802;
  uint64_t v803;
  uint64_t v804;
  uint64_t v805;
  int v806;
  int v807;
  char *v808;
  uint64_t v809;
  unint64_t v810;
  char *v811;
  unint64_t v812;
  char *v813;
  int v814;
  int v815;
  int v816;
  int v817;
  int v818;
  unsigned int v819;
  uint64_t v820;
  unsigned int v821;
  unsigned int v823;
  uint64_t v824;
  uint64_t v825;
  unint64_t v826;
  uint64_t v827;
  uint64_t v828;
  int v829;
  uint64_t v830;
  __int16 v831;
  uint64_t v832;
  uint64_t *v833;
  uint64_t v834;
  uint64_t v835;
  unint64_t v836;
  uint64_t v837;
  uint64_t v838;
  uint64_t v839;
  uint64_t v840;
  uint64_t v841;
  unint64_t v842;
  uint64_t v843;
  uint64_t v844;
  uint64_t v845;
  uint64_t v846;
  uint64_t v847;
  unint64_t v848;
  uint64_t v849;
  uint64_t v850;
  uint64_t v851;
  int v852;
  int v853;
  uint64_t v854;
  unint64_t v855;
  char *v856;
  unint64_t v857;
  char *v858;
  char *v859;
  int v860;
  char v861;
  int v862;
  unsigned int v863;
  uint64_t v864;
  unsigned int v865;
  unsigned int v867;
  uint64_t v868;
  uint64_t v869;
  unint64_t v870;
  uint64_t v871;
  uint64_t v872;
  int v873;
  uint64_t v874;
  int v875;
  uint64_t v876;
  uint64_t v877;
  uint64_t v878;
  unint64_t v879;
  uint64_t v880;
  uint64_t v881;
  uint64_t v882;
  uint64_t v883;
  uint64_t v884;
  unint64_t v885;
  uint64_t v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t v889;
  uint64_t v890;
  unint64_t v891;
  uint64_t v892;
  uint64_t v893;
  uint64_t v894;
  int v895;
  int v896;
  char *v897;
  uint64_t v898;
  unint64_t v899;
  char *v900;
  unint64_t v901;
  char *v902;
  int v903;
  char v904;
  int v905;
  int v906;
  unsigned int v907;
  int v908;
  uint64_t v909;
  unsigned int v910;
  unsigned int v912;
  uint64_t v913;
  uint64_t v914;
  unint64_t v915;
  uint64_t v916;
  uint64_t v917;
  uint64_t v918;
  uint64_t v919;
  uint64_t v920;
  uint64_t v921;
  unint64_t v922;
  uint64_t v923;
  uint64_t v924;
  uint64_t v925;
  uint64_t v926;
  uint64_t v927;
  unint64_t v928;
  uint64_t v929;
  uint64_t v930;
  uint64_t v931;
  uint64_t v932;
  uint64_t v933;
  unint64_t v934;
  uint64_t v935;
  uint64_t v936;
  uint64_t v937;
  int v938;
  int v939;
  char *v940;
  uint64_t v941;
  unint64_t v942;
  unint64_t v943;
  char *v944;
  char *v945;
  char *v946;
  int v947;
  _QWORD *v948;
  std::string::size_type v949;
  std::string::size_type v950;
  char *v951;
  unsigned int v952;
  std::string::size_type v953;
  _QWORD *v954;
  std::string::size_type v955;
  std::string::size_type v956;
  uint64_t v957;
  uint64_t v958;
  unsigned int v959;
  uint64_t v960;
  char *v961;
  uint64_t v962;
  char *v963;
  uint64_t v964;
  unint64_t v965;
  char *v966;
  uint64_t v967;
  uint64_t v968;
  unint64_t v969;
  uint64_t v970;
  uint64_t v971;
  int v972;
  uint64_t v973;
  uint64_t v974;
  uint64_t v975;
  unint64_t v976;
  uint64_t v977;
  int v978;
  uint64_t v979;
  unint64_t v980;
  uint64_t v981;
  uint64_t v982;
  uint64_t v983;
  uint64_t v984;
  uint64_t v985;
  unint64_t v986;
  uint64_t v987;
  uint64_t v988;
  uint64_t v989;
  uint64_t v990;
  uint64_t v991;
  uint64_t v992;
  char *v993;
  unint64_t v994;
  uint64_t v995;
  uint64_t v996;
  unint64_t v997;
  uint64_t v998;
  uint64_t v999;
  int v1000;
  uint64_t v1001;
  uint64_t v1002;
  uint64_t v1003;
  unint64_t v1004;
  uint64_t v1005;
  int v1006;
  uint64_t v1007;
  unint64_t v1008;
  uint64_t v1009;
  uint64_t v1010;
  uint64_t v1011;
  uint64_t v1012;
  uint64_t v1013;
  unint64_t v1014;
  uint64_t v1015;
  uint64_t v1016;
  char *v1017;
  char *v1018;
  char *v1019;
  char *v1020;
  void *v1021;
  uint64_t v1022;
  _QWORD *v1023;
  _QWORD *v1024;
  uint64_t v1025;
  uint64_t v1026;
  uint64_t v1027;
  uint64_t v1028;
  unsigned int v1029;
  uint64_t v1030;
  unsigned int v1031;
  unsigned int v1032;
  unint64_t *v1033;
  uint64_t v1034;
  uint64_t v1035;
  __int16 v1036;
  unint64_t v1037;
  uint64_t v1038;
  uint64_t v1039;
  uint64_t v1040;
  uint64_t v1041;
  _QWORD *v1042;
  char v1043;
  uint64_t v1044;
  _QWORD *v1045;
  int v1046;
  int v1047;
  __int16 v1048;
  uint64_t v1049;
  uint64_t v1050;
  unint64_t v1051;
  uint64_t v1052;
  uint64_t v1053;
  uint64_t v1054;
  unint64_t v1055;
  int v1056;
  uint64_t v1057;
  uint64_t v1058;
  unint64_t v1059;
  uint64_t v1060;
  uint64_t v1061;
  uint64_t v1062;
  uint64_t v1063;
  uint64_t v1064;
  unint64_t v1065;
  uint64_t v1066;
  uint64_t v1067;
  uint64_t v1068;
  int v1069;
  int v1070;
  char *v1071;
  uint64_t v1072;
  unint64_t v1073;
  unint64_t v1074;
  char *v1075;
  char *v1076;
  int v1077;
  char *v1078;
  char *v1079;
  int v1080;
  char *v1081;
  int64_t v1082;
  uint64_t v1083;
  size_t v1084;
  char *v1085;
  char *v1086;
  uint64_t v1087;
  _QWORD *v1088;
  char *v1089;
  std::string::size_type v1090;
  std::string::size_type v1091;
  char *v1092;
  unint64_t v1093;
  unint64_t v1094;
  uint64_t v1095;
  unint64_t v1096;
  uint64_t v1097;
  uint64_t *v1098;
  uint64_t v1099;
  uint64_t v1100;
  uint64_t v1101;
  unint64_t v1102;
  uint64_t v1103;
  uint64_t v1104;
  uint64_t ***v1105;
  uint64_t v1106;
  uint64_t v1107;
  uint64_t v1108;
  uint64_t v1109;
  uint64_t ****v1110;
  uint64_t ***v1111;
  int v1112;
  int v1113;
  char *v1114;
  unint64_t *v1115;
  std::string::size_type v1116;
  const void *v1117;
  unint64_t v1118;
  void *p_dst;
  uint64_t v1120;
  uint64_t v1121;
  std::string *v1122;
  size_t v1123;
  int v1124;
  void **v1125;
  uint64_t v1126;
  void *v1127;
  int v1128;
  int v1129;
  int v1130;
  int v1131;
  uint64_t v1132;
  __int16 v1133;
  int v1134;
  _QWORD *v1135;
  unsigned int v1136;
  uint64_t v1137;
  int v1138;
  unsigned int v1139;
  _QWORD *v1140;
  _QWORD *v1141;
  int v1142;
  uint64_t v1143;
  int v1144;
  unsigned int v1145;
  _QWORD *v1146;
  _QWORD *v1147;
  int v1148;
  BOOL v1149;
  uint64_t v1150;
  uint64_t v1151;
  unint64_t v1152;
  uint64_t v1153;
  uint64_t v1154;
  uint64_t v1155;
  int v1156;
  uint64_t v1157;
  uint64_t ***v1158;
  char *v1159;
  uint64_t v1160;
  uint64_t v1161;
  uint64_t v1162;
  uint64_t v1163;
  unsigned int v1164;
  int v1165;
  uint64_t v1166;
  int v1167;
  uint64_t v1168;
  uint64_t v1169;
  unint64_t v1170;
  uint64_t v1171;
  uint64_t v1172;
  uint64_t v1173;
  uint64_t v1174;
  uint64_t v1175;
  uint64_t v1176;
  unint64_t v1177;
  uint64_t v1178;
  uint64_t v1179;
  int v1180;
  int v1181;
  unint64_t v1182;
  uint64_t v1183;
  uint64_t v1184;
  uint64_t v1185;
  uint64_t v1186;
  uint64_t v1187;
  uint64_t v1188;
  uint64_t v1189;
  unint64_t v1190;
  uint64_t v1191;
  uint64_t v1192;
  int v1193;
  int v1194;
  unint64_t v1195;
  uint64_t v1196;
  uint64_t v1197;
  uint64_t v1198;
  uint64_t v1199;
  uint64_t v1200;
  uint64_t v1201;
  unint64_t v1202;
  uint64_t v1203;
  uint64_t v1204;
  uint64_t v1205;
  uint64_t v1206;
  uint64_t v1207;
  unint64_t v1208;
  uint64_t v1209;
  uint64_t v1210;
  uint64_t v1211;
  uint64_t v1212;
  uint64_t v1213;
  unint64_t v1214;
  uint64_t v1215;
  uint64_t v1216;
  uint64_t v1217;
  int v1218;
  uint64_t v1219;
  uint64_t v1220;
  unint64_t v1221;
  uint64_t v1222;
  uint64_t v1223;
  uint64_t v1224;
  uint64_t v1225;
  uint64_t v1226;
  unint64_t v1227;
  uint64_t v1228;
  uint64_t v1229;
  uint64_t v1230;
  uint64_t v1231;
  uint64_t v1232;
  uint64_t v1233;
  unint64_t v1234;
  uint64_t v1235;
  uint64_t v1236;
  int v1237;
  int v1238;
  unint64_t v1239;
  uint64_t v1240;
  uint64_t v1241;
  uint64_t v1242;
  uint64_t v1243;
  uint64_t v1244;
  uint64_t v1246;
  int v1247;
  uint64_t v1248;
  int v1249;
  unsigned int v1250;
  _QWORD *v1251;
  uint64_t v1252;
  int8x16_t v1253;
  _QWORD *v1254;
  int v1255;
  BOOL v1256;
  unsigned int v1257;
  _QWORD *v1258;
  _QWORD *v1259;
  int v1260;
  BOOL v1261;
  unsigned int v1262;
  _QWORD *v1263;
  uint64_t v1264;
  std::string::size_type v1265;
  int v1266;
  int v1267;
  uint64_t v1268;
  uint64_t v1269;
  __int16 v1270;
  int v1271;
  int v1272;
  uint64_t v1273;
  uint64_t v1274;
  unint64_t v1275;
  uint64_t v1276;
  uint64_t v1277;
  uint64_t v1278;
  unsigned int v1279;
  uint64_t v1280;
  uint64_t v1281;
  unint64_t v1282;
  uint64_t v1283;
  uint64_t v1284;
  uint64_t v1285;
  int v1286;
  _QWORD *v1287;
  int v1288;
  BOOL v1289;
  unsigned int v1290;
  _QWORD *v1291;
  uint64_t v1292;
  uint64_t v1293;
  char *v1294;
  uint64_t v1295;
  unint64_t v1296;
  char *v1297;
  std::string::size_type v1298;
  unsigned int v1299;
  uint64_t v1300;
  unint64_t v1301;
  int v1302;
  uint64_t v1303;
  int v1304;
  unint64_t v1305;
  uint64_t v1306;
  __int16 v1307;
  int v1308;
  uint64_t v1309;
  uint64_t v1310;
  unint64_t v1311;
  uint64_t v1312;
  uint64_t v1313;
  uint64_t v1314;
  __int16 v1315;
  char *v1316;
  int v1317;
  uint64_t v1318;
  uint64_t v1319;
  unint64_t v1320;
  uint64_t v1321;
  uint64_t v1322;
  uint64_t v1323;
  uint64_t v1324;
  uint64_t v1325;
  unint64_t v1326;
  uint64_t v1327;
  uint64_t v1328;
  uint64_t v1329;
  uint64_t v1330;
  uint64_t v1331;
  unint64_t v1332;
  uint64_t v1333;
  uint64_t v1334;
  uint64_t v1335;
  int v1336;
  std::string::size_type v1337;
  std::string::size_type v1338;
  std::string::size_type v1339;
  uint64_t v1340;
  std::string::size_type v1341;
  uint64_t v1342;
  std::string::size_type v1343;
  std::string::size_type v1344;
  uint64_t v1345;
  std::string::size_type v1346;
  std::string::size_type v1347;
  std::string::size_type v1348;
  std::string::size_type v1349;
  std::string::size_type v1350;
  _QWORD *v1351;
  _QWORD *v1352;
  std::string::size_type v1353;
  std::string::size_type v1354;
  unsigned int v1355;
  unsigned int v1356;
  unsigned int v1357;
  int v1358;
  char *v1359;
  int v1360;
  int v1361;
  char *v1362;
  int v1363;
  unsigned int v1364;
  char *v1365;
  char *v1366;
  char *v1367;
  unsigned int v1368;
  unsigned int v1369;
  unsigned int v1370;
  unsigned int v1371;
  int v1372;
  char *v1373;
  char *v1374;
  int v1375;
  unsigned int v1376;
  int v1377;
  unsigned int v1378;
  int v1379;
  unsigned int v1380;
  uint64_t ***v1381;
  int v1382;
  int v1383;
  void *v1384;
  unsigned int v1385;
  int v1386;
  unsigned int v1387;
  int v1388;
  char *__p;
  std::string::size_type v1390;
  std::string::size_type v1391;
  int v1392;
  int v1393;
  unsigned int v1394;
  std::string::size_type v1395;
  unsigned int v1396;
  int v1397;
  char *v1398;
  unsigned int v1399;
  _QWORD *v1400;
  int v1401;
  char *v1402;
  int v1403;
  int v1405;
  unsigned int v1406;
  std::string::size_type v1407;
  int v1408;
  uint64_t *v1409;
  void *v1410;
  char *v1411;
  int v1413;
  int v1414;
  unsigned int v1415;
  int v1416;
  unsigned int v1417;
  void *v1418;
  std::string::size_type v1419;
  std::string::size_type v1420;
  unsigned int v1421;
  std::string::size_type v1422;
  unsigned int v1423;
  std::string::size_type v1424;
  unsigned int v1425;
  std::string::size_type v1426;
  uint64_t v1427;
  unsigned int v1428;
  unsigned int v1429;
  std::string::size_type v1430;
  std::string::size_type v1431;
  uint64_t v1432;
  unsigned int v1433;
  char *v1434;
  int v1435;
  int v1436;
  std::string::size_type v1437;
  std::string::size_type v1438;
  unsigned int v1439;
  unint64_t v1440;
  uint64_t v1441;
  unsigned int v1442;
  int v1443;
  std::string::size_type v1444;
  void *v1445;
  void *v1446;
  void *v1447;
  unsigned int *v1448;
  void *v1449;
  unsigned int v1450;
  char *v1451;
  void *v1452;
  unsigned int v1453;
  unsigned int v1454;
  unsigned int v1455;
  int v1456;
  unint64_t v1457;
  _OWORD *v1458;
  unsigned int v1459;
  unsigned int v1460;
  unsigned int v1461;
  void *v1462;
  std::string::size_type v1463;
  char *v1464;
  unint64_t v1465;
  unint64_t v1466;
  int v1467;
  uint64_t v1468;
  unsigned int v1469;
  uint64_t v1470;
  _QWORD **v1471;
  void *v1472;
  _BYTE *v1473;
  void *v1474;
  char *v1475;
  char *v1476;
  char *v1477;
  char *v1478;
  int v1479;
  _QWORD *v1480;
  int v1481;
  void *v1482;
  int v1483[2];
  char *v1484;
  std::string v1485;
  uint64_t __src;
  uint64_t v1487;
  std::string __dst;
  int v1489;
  char v1490;
  char v1491;
  __int128 v1492;
  __int128 v1493;
  __int16 v1494;
  _DWORD v1495[5];
  _QWORD v1496[4];
  __int16 v1497;
  uint64_t v1498;

  v1498 = *MEMORY[0x1E0C80C00];
  v9 = *(_QWORD *)(a5 + 40);
  v1496[0] = "agx.common_store_dma";
  v1497 = 259;
  v1470 = v9;
  NamedMetadata = llvm::Module::getNamedMetadata(v9, (uint64_t)v1496);
  v1496[0] = 1;
  for (i = 1; i != 33; i += 2)
    v1496[i] = -4096;
  v1458 = (_OWORD *)(v1470 + 216);
  if (*(char *)(v1470 + 239) < 0)
    sub_1C47EBC30(&v1485, *(void **)(v1470 + 216), *(_QWORD *)(v1470 + 224));
  else
    v1485 = *(std::string *)(v1470 + 216);
  if (!std::string::compare(&v1485, 0, 4uLL, "agx1"))
  {
    v12 = 27;
  }
  else if (!std::string::compare(&v1485, 0, 4uLL, "agx2"))
  {
    v12 = 28;
  }
  else if (!std::string::compare(&v1485, 0, 4uLL, "agx3"))
  {
    v12 = 29;
  }
  else
  {
    v12 = 0;
  }
  v1363 = v12;
  v1409 = a1;
  if (SHIBYTE(v1485.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v1485.__r_.__value_.__l.__data_);
  if (NamedMetadata)
  {
    v13 = *(unsigned int *)(*(_QWORD *)(NamedMetadata + 48) + 8);
    if ((_DWORD)v13)
    {
      v14 = 0;
      v15 = 8 * v13;
      do
      {
        v16 = *(_QWORD *)(**(_QWORD **)(NamedMetadata + 48) + v14);
        __dst.__r_.__value_.__r.__words[0] = 0;
        __dst.__r_.__value_.__r.__words[0] = *(_QWORD *)(*(_QWORD *)(v16 - 8 * *(unsigned int *)(v16 + 8)) + 128);
        sub_1C485BD74((uint64_t)v1496, &__dst)[1] = v16;
        v14 += 8;
      }
      while (v15 != v14);
    }
  }
  v17 = sub_1C55891D0(3, a4);
  if (v17 == -1)
    v18 = 0;
  else
    v18 = v17;
  v1382 = v18;
  v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 336))(a4);
  v1361 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 24))(v19, 4);
  v1370 = sub_1C558B448(3, a4);
  v1471 = (_QWORD **)a4;
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a4 + 160))(a4, 3) & 1) != 0)
  {
    v20 = 0;
    __p = 0;
    v1367 = 0;
    v1398 = 0;
    goto LABEL_82;
  }
  if ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a4 + 592))(a4, 100))
  {
    (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a4 + 128))(&__dst, a4, 3);
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a4 + 136))(&v1482, a4, 3);
    v21 = v1482;
    v1472 = (void *)__dst.__r_.__value_.__r.__words[0];
    if (__dst.__r_.__value_.__r.__words[0])
    {
      (*(void (**)(std::string *__return_ptr))(*(_QWORD *)__dst.__r_.__value_.__l.__data_ + 16))(&__dst);
      v22 = __dst.__r_.__value_.__r.__words[0];
    }
    else
    {
      v22 = 0;
    }
    v1462 = v21;
    (*(void (**)(std::string *__return_ptr, void *))(*(_QWORD *)v21 + 16))(&__dst, v21);
    v23 = __dst.__r_.__value_.__r.__words[0];
    if (((*(uint64_t (**)(std::string::size_type, std::string::size_type))(*(_QWORD *)v22 + 24))(v22, __dst.__r_.__value_.__r.__words[0]) & 1) != 0)
    {
      v24 = 0;
      __p = 0;
    }
    else
    {
      v25 = 0;
      v24 = 0;
      __p = 0;
      do
      {
        v1482 = 0;
        v1482 = *(void **)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v22 + 32))(v22);
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&__dst.__r_.__value_.__r.__words[2];
        __dst.__r_.__value_.__l.__size_ = 0x800000000;
        v26 = *((_QWORD *)v1482 + 1);
        if (v26)
        {
          v27 = 0;
          do
          {
            v28 = *(_QWORD *)(v26 + 24);
            if (v27 >= HIDWORD(__dst.__r_.__value_.__r.__words[1]))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, (uint64_t)&__dst.__r_.__value_.__r.__words[2], v27 + 1, 8);
              v27 = __dst.__r_.__value_.__r.__words[1];
            }
            *(_QWORD *)(__dst.__r_.__value_.__r.__words[0] + 8 * v27) = v28;
            v27 = ++LODWORD(__dst.__r_.__value_.__r.__words[1]);
            v26 = *(_QWORD *)(v26 + 8);
          }
          while (v26);
          while (v27)
          {
            v29 = *(_QWORD *)(__dst.__r_.__value_.__r.__words[0] + 8 * v27-- - 8);
            LODWORD(__dst.__r_.__value_.__r.__words[1]) = v27;
            v30 = *(unsigned __int8 *)(v29 + 16);
            if (v30 == 5)
            {
              for (j = *(_QWORD *)(v29 + 8); j; j = *(_QWORD *)(j + 8))
              {
                v32 = *(_QWORD *)(j + 24);
                if (v27 >= HIDWORD(__dst.__r_.__value_.__r.__words[1]))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, (uint64_t)&__dst.__r_.__value_.__r.__words[2], v27 + 1, 8);
                  v27 = __dst.__r_.__value_.__r.__words[1];
                }
                *(_QWORD *)(__dst.__r_.__value_.__r.__words[0] + 8 * v27) = v32;
                v27 = ++LODWORD(__dst.__r_.__value_.__r.__words[1]);
              }
            }
            else if (v30 >= 0x1C && (*(_WORD *)(*(_QWORD *)(*(_QWORD *)(v29 + 40) + 56) + 18) & 0x3FF0) != 0x640)
            {
              goto LABEL_67;
            }
          }
        }
        v33 = sub_1C558B5F8(a6, &v1482);
        if (!sub_1C558B684((llvm::GlobalValue *)v1482))
        {
          v34 = *(_QWORD *)(*(_QWORD *)(v33 - 8 * *(unsigned int *)(v33 + 8) + 16) + 128);
          v35 = (_QWORD *)(v34 + 24);
          if (*(_DWORD *)(v34 + 32) >= 0x41u)
            v35 = (_QWORD *)*v35;
          v36 = *(_DWORD *)v35;
          if (v24 >= v25)
          {
            v37 = (v24 - __p) >> 2;
            v38 = v37 + 1;
            if ((unint64_t)(v37 + 1) >> 62)
              goto LABEL_2202;
            if ((v25 - __p) >> 1 > v38)
              v38 = (v25 - __p) >> 1;
            if ((unint64_t)(v25 - __p) >= 0x7FFFFFFFFFFFFFFCLL)
              v39 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v39 = v38;
            if (v39)
            {
              if (v39 >> 62)
                goto LABEL_2204;
              v40 = (char *)operator new(4 * v39);
            }
            else
            {
              v40 = 0;
            }
            v41 = &v40[4 * v37];
            *(_DWORD *)v41 = v36;
            v42 = v41 + 4;
            while (v24 != __p)
            {
              v43 = *((_DWORD *)v24 - 1);
              v24 -= 4;
              *((_DWORD *)v41 - 1) = v43;
              v41 -= 4;
            }
            v25 = &v40[4 * v39];
            if (__p)
              operator delete(__p);
            v24 = v42;
            __p = v41;
            a4 = (uint64_t)v1471;
          }
          else
          {
            *(_DWORD *)v24 = v36;
            v24 += 4;
          }
        }
LABEL_67:
        if ((std::string::size_type *)__dst.__r_.__value_.__l.__data_ != &__dst.__r_.__value_.__r.__words[2])
          free(__dst.__r_.__value_.__l.__data_);
        (*(void (**)(std::string::size_type))(*(_QWORD *)v22 + 40))(v22);
      }
      while (((*(uint64_t (**)(std::string::size_type, std::string::size_type))(*(_QWORD *)v22 + 24))(v22, v23) & 1) == 0);
    }
    if (v23)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v23 + 8))(v23);
    (*(void (**)(std::string::size_type))(*(_QWORD *)v22 + 8))(v22);
    (*(void (**)(void *))(*(_QWORD *)v1462 + 8))(v1462);
    if (v1472)
      (*(void (**)(void *))(*(_QWORD *)v1472 + 8))(v1472);
  }
  else
  {
    v24 = 0;
    __p = 0;
  }
  (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a4 + 128))(&__dst, a4, 3);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a4 + 136))(&v1482, a4, 3);
  v44 = v1482;
  v1463 = __dst.__r_.__value_.__r.__words[0];
  if (__dst.__r_.__value_.__r.__words[0])
  {
    (*(void (**)(std::string *__return_ptr))(*(_QWORD *)__dst.__r_.__value_.__l.__data_ + 16))(&__dst);
    v45 = __dst.__r_.__value_.__r.__words[0];
  }
  else
  {
    v45 = 0;
  }
  v1373 = v24;
  v1452 = v44;
  (*(void (**)(std::string *__return_ptr, void *))(*(_QWORD *)v44 + 16))(&__dst, v44);
  v46 = __dst.__r_.__value_.__r.__words[0];
  if (((*(uint64_t (**)(std::string::size_type, std::string::size_type))(*(_QWORD *)v45 + 24))(v45, __dst.__r_.__value_.__r.__words[0]) & 1) == 0)
  {
    v133 = 0;
    v134 = 0;
    v1398 = 0;
    v1474 = (void *)v46;
    while (1)
    {
      v1482 = 0;
      v1482 = *(void **)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v45 + 32))(v45);
      v135 = sub_1C558B5F8(a6, &v1482);
      if (!sub_1C558B684((llvm::GlobalValue *)v1482))
        break;
      v47 = v134;
LABEL_271:
      (*(void (**)(std::string::size_type))(*(_QWORD *)v45 + 40))(v45);
      v134 = v47;
      if (((*(uint64_t (**)(std::string::size_type, std::string::size_type))(*(_QWORD *)v45 + 24))(v45, v46) & 1) != 0)goto LABEL_78;
    }
    v136 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)a4 + 400))(a4, v1482);
    *(_BYTE *)(a2 + 70) = 1;
    v138 = *(_QWORD *)(a2 + 40);
    v137 = *(_QWORD *)(a2 + 48);
    v139 = *(_QWORD *)(a2 + 32);
    v140 = v136 - v1382;
    v141 = v136 == v1382 && *(_BYTE *)(a2 + 80) == 0;
    if (v141)
    {
LABEL_219:
      v147 = (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(_QWORD *)a4 + 184))(a4, 16, v1482);
      if ((v147 & 1) != 0 || *(_BYTE *)(a2 + 80))
      {
        v148 = sub_1C4D6650C(a2, v147);
        sub_1C4D66288((uint64_t *)a2, 10, v148);
      }
      if (*(char *)(v1470 + 239) < 0)
      {
        sub_1C47EBC30(&__dst, *(void **)(v1470 + 216), *(_QWORD *)(v1470 + 224));
      }
      else
      {
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *v1458;
        __dst.__r_.__value_.__r.__words[2] = *(_QWORD *)(v1470 + 232);
      }
      if (std::string::compare(&__dst, 0, 4uLL, "agx1") && std::string::compare(&__dst, 0, 4uLL, "agx2"))
        std::string::compare(&__dst, 0, 4uLL, "agx3");
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      v149 = v135 - 8 * *(unsigned int *)(v135 + 8);
      v150 = *(_QWORD *)(*(_QWORD *)(v149 + 8) + 128);
      v151 = (_QWORD *)(v150 + 24);
      if (*(_DWORD *)(v150 + 32) >= 0x41u)
        v151 = (_QWORD *)*v151;
      v152 = (_QWORD *)*v151;
      v153 = *(_QWORD *)(*(_QWORD *)(v149 + 16) + 128);
      v154 = (_QWORD *)(v153 + 24);
      if (*(_DWORD *)(v153 + 32) >= 0x41u)
        v154 = (_QWORD *)*v154;
      v155 = *(_DWORD *)v154;
      if (v152 | *(_BYTE *)(a2 + 80))
      {
        if (!*(_QWORD *)(a2 + 72))
          *(_QWORD *)(a2 + 72) = 1;
        v157 = *(_QWORD *)(a2 + 48);
        if (v157 == *(_QWORD *)(a2 + 56))
        {
          sub_1C4D663A4((uint64_t *)a2, 1uLL);
          v157 = *(_QWORD *)(a2 + 48);
        }
        *(_QWORD *)(a2 + 48) = v157 - 1;
        *(_BYTE *)(v157 - 1) = (_BYTE)v152;
        sub_1C4D66288((uint64_t *)a2, 4, *(_DWORD *)(a2 + 32) - *(_DWORD *)(a2 + 48) + *(_DWORD *)(a2 + 40));
        v156 = *(unsigned __int8 *)(a2 + 80);
      }
      else
      {
        v156 = 0;
      }
      if (!(v155 | v156))
        goto LABEL_252;
      if (*(_QWORD *)(a2 + 72) <= 3uLL)
        *(_QWORD *)(a2 + 72) = 4;
      v158 = *(_QWORD *)(a2 + 48);
      v159 = *(_QWORD *)(a2 + 56);
      v160 = ((_BYTE)v158 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
      if (v158 - v159 < v160)
      {
        sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v158 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
        *(_QWORD *)(a2 + 48) -= v160;
      }
      else
      {
        v161 = v158 - v160;
        *(_QWORD *)(a2 + 48) = v161;
        if (!v160)
        {
LABEL_249:
          a4 = (uint64_t)v1471;
          if ((unint64_t)(v161 - v159) <= 3)
          {
            sub_1C4D663A4((uint64_t *)a2, 4uLL);
            v161 = *(_QWORD *)(a2 + 48);
          }
          *(_DWORD *)(v161 - 4) = v155;
          v163 = v161 - 4;
          *(_QWORD *)(a2 + 48) = v163;
          sub_1C4D66288((uint64_t *)a2, 6, *(_DWORD *)(a2 + 32) - v163 + *(_DWORD *)(a2 + 40));
LABEL_252:
          v164 = sub_1C4D66580(a2, (unsigned __int16)v139 - (unsigned __int16)v137 + (unsigned __int16)v138);
          v165 = v164;
          if (v134 >= v133)
          {
            v166 = v1398;
            v167 = (v134 - v1398) >> 2;
            v168 = v167 + 1;
            if ((unint64_t)(v167 + 1) >> 62)
              goto LABEL_2202;
            if ((v133 - v1398) >> 1 > v168)
              v168 = (v133 - v1398) >> 1;
            if ((unint64_t)(v133 - v1398) >= 0x7FFFFFFFFFFFFFFCLL)
              v169 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v169 = v168;
            if (v169)
            {
              if (v169 >> 62)
                goto LABEL_2204;
              v170 = (char *)operator new(4 * v169);
              v166 = v1398;
            }
            else
            {
              v170 = 0;
            }
            v171 = &v170[4 * v167];
            *(_DWORD *)v171 = v165;
            v172 = v171 + 4;
            while (v134 != v166)
            {
              v173 = *((_DWORD *)v134 - 1);
              v134 -= 4;
              *((_DWORD *)v171 - 1) = v173;
              v171 -= 4;
            }
            v133 = &v170[4 * v169];
            if (v166)
              operator delete(v166);
            v1398 = v171;
            v47 = v172;
          }
          else
          {
            *(_DWORD *)v134 = v164;
            v47 = v134 + 4;
          }
          v46 = (std::string::size_type)v1474;
          goto LABEL_271;
        }
      }
      v162 = 0;
      do
        *(_BYTE *)(*(_QWORD *)(a2 + 48) + v162++) = 0;
      while (v160 != v162);
      v161 = *(_QWORD *)(a2 + 48);
      v159 = *(_QWORD *)(a2 + 56);
      goto LABEL_249;
    }
    if (*(_QWORD *)(a2 + 72) <= 3uLL)
      *(_QWORD *)(a2 + 72) = 4;
    v142 = ((_BYTE)v137 - ((_BYTE)v139 + (_BYTE)v138)) & 3;
    v143 = *(_QWORD *)(a2 + 56);
    if (v137 - v143 < v142)
    {
      sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v137 - ((_BYTE)v139 + (_BYTE)v138)) & 3);
      *(_QWORD *)(a2 + 48) -= v142;
    }
    else
    {
      v144 = v137 - v142;
      *(_QWORD *)(a2 + 48) = v137 - v142;
      if ((((_BYTE)v137 - ((_BYTE)v139 + (_BYTE)v138)) & 3) == 0)
      {
LABEL_216:
        a4 = (uint64_t)v1471;
        if ((unint64_t)(v144 - v143) <= 3)
        {
          sub_1C4D663A4((uint64_t *)a2, 4uLL);
          v144 = *(_QWORD *)(a2 + 48);
        }
        *(_DWORD *)(v144 - 4) = v140;
        v146 = v144 - 4;
        *(_QWORD *)(a2 + 48) = v146;
        sub_1C4D66288((uint64_t *)a2, 8, *(_DWORD *)(a2 + 32) - v146 + *(_DWORD *)(a2 + 40));
        goto LABEL_219;
      }
    }
    v145 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(a2 + 48) + v145++) = 0;
    while (v142 != v145);
    v144 = *(_QWORD *)(a2 + 48);
    v143 = *(_QWORD *)(a2 + 56);
    goto LABEL_216;
  }
  v47 = 0;
  v1398 = 0;
LABEL_78:
  v1367 = v47;
  if (v46)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v46 + 8))(v46);
  (*(void (**)(std::string::size_type))(*(_QWORD *)v45 + 8))(v45);
  (*(void (**)(void *))(*(_QWORD *)v1452 + 8))(v1452);
  v20 = v1373;
  if (v1463)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v1463 + 8))(v1463);
LABEL_82:
  v1374 = v20;
  v48 = sub_1C55891D0(0, a4);
  if (v48 == -1)
    v49 = 0;
  else
    v49 = v48;
  v1416 = v49;
  v50 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a4 + 336))(a4);
  v1378 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v50 + 24))(v50, 0);
  v1369 = sub_1C558B714(0, a4);
  if (((*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a4 + 160))(a4, 0) & 1) != 0)
  {
    v1362 = 0;
    v1366 = 0;
    goto LABEL_95;
  }
  (*(void (**)(std::string *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a4 + 128))(&__dst, a4, 0);
  (*(void (**)(void **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a4 + 136))(&v1482, a4, 0);
  v51 = v1482;
  v1424 = __dst.__r_.__value_.__r.__words[0];
  if (__dst.__r_.__value_.__r.__words[0])
  {
    (*(void (**)(std::string *__return_ptr))(*(_QWORD *)__dst.__r_.__value_.__l.__data_ + 16))(&__dst);
    v52 = __dst.__r_.__value_.__r.__words[0];
  }
  else
  {
    v52 = 0;
  }
  v1418 = v51;
  (*(void (**)(std::string *__return_ptr, void *))(*(_QWORD *)v51 + 16))(&__dst, v51);
  v53 = __dst.__r_.__value_.__r.__words[0];
  if (((*(uint64_t (**)(std::string::size_type, std::string::size_type))(*(_QWORD *)v52 + 24))(v52, __dst.__r_.__value_.__r.__words[0]) & 1) == 0)
  {
    v174 = 0;
    v175 = 0;
    v55 = 0;
    v1430 = v53;
    v1437 = v52;
    while (1)
    {
      v1482 = 0;
      v1482 = *(void **)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v52 + 32))(v52);
      v176 = sub_1C558B5F8(a6, &v1482);
      if (!llvm::Value::getMetadata((uint64_t)v1482, "agx.ts.dma", 0xAuLL))
      {
        v180 = *((_QWORD *)v1482 + 3);
        if (*(_BYTE *)(v180 + 8) != 17
          || (v181 = *(_QWORD *)(v176 - 8 * *(unsigned int *)(v176 + 8) + 8), *(_BYTE *)v181 == 1)
          && *(_BYTE *)(*(_QWORD *)(v181 + 128) + 16) == 16)
        {
          v182 = 1;
        }
        else
        {
          v182 = *(_DWORD *)(v180 + 32);
        }
        v183 = ((uint64_t (*)(_QWORD **))(*v1471)[50])(v1471);
        if (v182)
          break;
      }
      v177 = v175;
LABEL_278:
      v52 = v1437;
      v178 = v177;
      (*(void (**)(std::string::size_type))(*(_QWORD *)v1437 + 40))(v1437);
      v53 = v1430;
      v179 = (*(uint64_t (**)(std::string::size_type, std::string::size_type))(*(_QWORD *)v52 + 24))(v52, v1430);
      v54 = v178;
      v175 = v178;
      if ((v179 & 1) != 0)
        goto LABEL_91;
    }
    v1475 = (char *)v176;
    v184 = 0;
    v185 = __ROR8__(v183, 32);
    v1465 = HIDWORD(v185);
    v1445 = (void *)v182;
    v1454 = v185 / v182 / v1378;
    while (1)
    {
      v186 = (unint64_t)v174;
      v187 = v55;
      *(_BYTE *)(a2 + 70) = 1;
      v188 = *(_QWORD *)(a2 + 40);
      v189 = *(_QWORD *)(a2 + 48);
      v190 = *(_QWORD *)(a2 + 32);
      v191 = v1465 + v1454 * (_DWORD)v184;
      v192 = v191 - v1416;
      if (v191 == v1416 && *(_BYTE *)(a2 + 80) == 0)
        goto LABEL_301;
      if (*(_QWORD *)(a2 + 72) <= 3uLL)
        *(_QWORD *)(a2 + 72) = 4;
      v194 = ((_BYTE)v189 - ((_BYTE)v190 + (_BYTE)v188)) & 3;
      v195 = *(_QWORD *)(a2 + 56);
      if (v189 - v195 < v194)
        break;
      v196 = v189 - v194;
      *(_QWORD *)(a2 + 48) = v189 - v194;
      if ((((_BYTE)v189 - ((_BYTE)v190 + (_BYTE)v188)) & 3) != 0)
        goto LABEL_295;
LABEL_298:
      if ((unint64_t)(v196 - v195) <= 3)
      {
        sub_1C4D663A4((uint64_t *)a2, 4uLL);
        v196 = *(_QWORD *)(a2 + 48);
      }
      *(_DWORD *)(v196 - 4) = v192;
      v198 = v196 - 4;
      *(_QWORD *)(a2 + 48) = v198;
      sub_1C4D66288((uint64_t *)a2, 8, *(_DWORD *)(a2 + 32) - v198 + *(_DWORD *)(a2 + 40));
LABEL_301:
      v199 = ((uint64_t (*)(_QWORD **, uint64_t, void *))(*v1471)[23])(v1471, 16, v1482);
      if ((v199 & 1) != 0 || *(_BYTE *)(a2 + 80))
      {
        v200 = sub_1C4D6650C(a2, v199);
        sub_1C4D66288((uint64_t *)a2, 10, v200);
      }
      if (*(char *)(v1470 + 239) < 0)
      {
        sub_1C47EBC30(&__dst, *(void **)(v1470 + 216), *(_QWORD *)(v1470 + 224));
      }
      else
      {
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *v1458;
        __dst.__r_.__value_.__r.__words[2] = *(_QWORD *)(v1470 + 232);
      }
      if (std::string::compare(&__dst, 0, 4uLL, "agx1") && std::string::compare(&__dst, 0, 4uLL, "agx2"))
        std::string::compare(&__dst, 0, 4uLL, "agx3");
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      v201 = &v1475[-8 * *((unsigned int *)v1475 + 2)];
      v202 = *((_QWORD *)v201 + 1);
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v201 + 128) + 24) + 8) == 17)
      {
        if (*(_BYTE *)v202 != 1 || (v203 = *(_QWORD *)(v202 + 128), *(_BYTE *)(v203 + 16) != 16))
        {
          v204 = (_QWORD *)(*(_QWORD *)&v201[8 * (_QWORD)v184 + 8]
                          - 8 * *(unsigned int *)(*(_QWORD *)&v201[8 * (_QWORD)v184 + 8] + 8));
          v205 = *(_QWORD *)(*v204 + 128);
          v206 = (_QWORD *)(v205 + 24);
          if (*(_DWORD *)(v205 + 32) >= 0x41u)
            v206 = (_QWORD *)*v206;
          v207 = (_QWORD *)*v206;
          v208 = v204[1];
          goto LABEL_322;
        }
      }
      else
      {
        v203 = *(_QWORD *)(v202 + 128);
      }
      v209 = (_QWORD *)(v203 + 24);
      if (*(_DWORD *)(v203 + 32) >= 0x41u)
        v209 = (_QWORD *)*v209;
      v207 = (_QWORD *)*v209;
      v208 = *((_QWORD *)v201 + 2);
LABEL_322:
      v210 = *(_QWORD *)(v208 + 128);
      v211 = (_QWORD *)(v210 + 24);
      if (*(_DWORD *)(v210 + 32) >= 0x41u)
        v211 = (_QWORD *)*v211;
      v212 = *(_DWORD *)v211;
      if (v207 | *(_BYTE *)(a2 + 80))
      {
        if (!*(_QWORD *)(a2 + 72))
          *(_QWORD *)(a2 + 72) = 1;
        v214 = *(_QWORD *)(a2 + 48);
        if (v214 == *(_QWORD *)(a2 + 56))
        {
          sub_1C4D663A4((uint64_t *)a2, 1uLL);
          v214 = *(_QWORD *)(a2 + 48);
        }
        *(_QWORD *)(a2 + 48) = v214 - 1;
        *(_BYTE *)(v214 - 1) = (_BYTE)v207;
        sub_1C4D66288((uint64_t *)a2, 4, *(_DWORD *)(a2 + 32) - *(_DWORD *)(a2 + 48) + *(_DWORD *)(a2 + 40));
        v213 = *(unsigned __int8 *)(a2 + 80);
      }
      else
      {
        v213 = 0;
      }
      if (!(v212 | v213))
        goto LABEL_342;
      if (*(_QWORD *)(a2 + 72) <= 3uLL)
        *(_QWORD *)(a2 + 72) = 4;
      v215 = *(_QWORD *)(a2 + 48);
      v216 = *(_QWORD *)(a2 + 56);
      v217 = ((_BYTE)v215 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
      if (v215 - v216 < v217)
      {
        sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v215 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
        *(_QWORD *)(a2 + 48) -= v217;
LABEL_336:
        v219 = 0;
        do
          *(_BYTE *)(*(_QWORD *)(a2 + 48) + v219++) = 0;
        while (v217 != v219);
        v218 = *(_QWORD *)(a2 + 48);
        v216 = *(_QWORD *)(a2 + 56);
        goto LABEL_339;
      }
      v218 = v215 - v217;
      *(_QWORD *)(a2 + 48) = v218;
      if (v217)
        goto LABEL_336;
LABEL_339:
      if ((unint64_t)(v218 - v216) <= 3)
      {
        sub_1C4D663A4((uint64_t *)a2, 4uLL);
        v218 = *(_QWORD *)(a2 + 48);
      }
      *(_DWORD *)(v218 - 4) = v212;
      v220 = v218 - 4;
      *(_QWORD *)(a2 + 48) = v220;
      sub_1C4D66288((uint64_t *)a2, 6, *(_DWORD *)(a2 + 32) - v220 + *(_DWORD *)(a2 + 40));
LABEL_342:
      v221 = sub_1C4D66580(a2, (unsigned __int16)v190 - (unsigned __int16)v189 + (unsigned __int16)v188);
      v222 = v221;
      v174 = (char *)v186;
      if ((unint64_t)v175 >= v186)
      {
        v223 = (v175 - v187) >> 2;
        v224 = v223 + 1;
        if ((unint64_t)(v223 + 1) >> 62)
          goto LABEL_2202;
        if ((uint64_t)(v186 - (_QWORD)v187) >> 1 > v224)
          v224 = (uint64_t)(v186 - (_QWORD)v187) >> 1;
        if (v186 - (unint64_t)v187 >= 0x7FFFFFFFFFFFFFFCLL)
          v225 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v225 = v224;
        if (v225)
        {
          if (v225 >> 62)
            goto LABEL_2204;
          v226 = (char *)operator new(4 * v225);
        }
        else
        {
          v226 = 0;
        }
        v55 = &v226[4 * v223];
        *(_DWORD *)v55 = v222;
        v177 = v55 + 4;
        while (v175 != v187)
        {
          v227 = *((_DWORD *)v175 - 1);
          v175 -= 4;
          *((_DWORD *)v55 - 1) = v227;
          v55 -= 4;
        }
        v174 = &v226[4 * v225];
        if (v187)
        {
          v228 = v177;
          operator delete(v187);
          v177 = v228;
        }
      }
      else
      {
        *(_DWORD *)v175 = v221;
        v177 = v175 + 4;
        v55 = v187;
      }
      v184 = (char *)v184 + 1;
      v175 = v177;
      if (v184 == v1445)
        goto LABEL_278;
    }
    sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v189 - ((_BYTE)v190 + (_BYTE)v188)) & 3);
    *(_QWORD *)(a2 + 48) -= v194;
LABEL_295:
    v197 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(a2 + 48) + v197++) = 0;
    while (v194 != v197);
    v196 = *(_QWORD *)(a2 + 48);
    v195 = *(_QWORD *)(a2 + 56);
    goto LABEL_298;
  }
  v54 = 0;
  v55 = 0;
LABEL_91:
  v1362 = v54;
  a4 = (uint64_t)v1471;
  if (v53)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v53 + 8))(v53);
  (*(void (**)(std::string::size_type))(*(_QWORD *)v52 + 8))(v52);
  (*(void (**)(void *))(*(_QWORD *)v1418 + 8))(v1418);
  v1366 = v55;
  if (v1424)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v1424 + 8))(v1424);
LABEL_95:
  if (v1370 <= v1369)
    v56 = v1369;
  else
    v56 = v1370;
  (*(void (**)(std::string *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a4 + 128))(&__dst, a4, 0);
  (*(void (**)(void **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)a4 + 136))(&v1482, a4, 0);
  v57 = __dst.__r_.__value_.__r.__words[0];
  v58 = v1482;
  if (__dst.__r_.__value_.__r.__words[0])
  {
    (*(void (**)(std::string *__return_ptr, std::string::size_type))(*(_QWORD *)__dst.__r_.__value_.__l.__data_
                                                                              + 16))(&__dst, __dst.__r_.__value_.__r.__words[0]);
    v59 = __dst.__r_.__value_.__r.__words[0];
  }
  else
  {
    v59 = 0;
  }
  (*(void (**)(std::string *__return_ptr, void *))(*(_QWORD *)v58 + 16))(&__dst, v58);
  v60 = __dst.__r_.__value_.__r.__words[0];
  v61 = -1;
  while (((*(uint64_t (**)(std::string::size_type, std::string::size_type))(*(_QWORD *)v59 + 24))(v59, v60) & 1) == 0)
  {
    v62 = *(_QWORD *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v59 + 32))(v59);
    if (llvm::Value::getMetadata(v62, "agx.ts.dma", 0xAuLL))
    {
      v63 = ((uint64_t (*)(_QWORD **, uint64_t))(*v1471)[50])(v1471, v62);
      if (v61 >= v63)
        v61 = v63;
    }
    (*(void (**)(std::string::size_type))(*(_QWORD *)v59 + 40))(v59);
  }
  if (v60)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v60 + 8))(v60);
  (*(void (**)(std::string::size_type))(*(_QWORD *)v59 + 8))(v59);
  (*(void (**)(void *))(*(_QWORD *)v58 + 8))(v58);
  if (v57)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v57 + 8))(v57);
  if (v61 == -1)
    v64 = 0;
  else
    v64 = v61;
  v1364 = v64;
  v65 = (uint64_t)v1471;
  v66 = ((uint64_t (*)(_QWORD **))(*v1471)[42])(v1471);
  v1360 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v66 + 24))(v66, 0);
  (*(void (**)(std::string *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v65 + 128))(&__dst, v65, 0);
  (*(void (**)(void **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v65 + 136))(&v1482, v65, 0);
  v67 = __dst.__r_.__value_.__r.__words[0];
  v68 = v1482;
  if (__dst.__r_.__value_.__r.__words[0])
  {
    (*(void (**)(std::string *__return_ptr, std::string::size_type))(*(_QWORD *)__dst.__r_.__value_.__l.__data_
                                                                              + 16))(&__dst, __dst.__r_.__value_.__r.__words[0]);
    v69 = __dst.__r_.__value_.__r.__words[0];
  }
  else
  {
    v69 = 0;
  }
  (*(void (**)(std::string *__return_ptr, void *))(*(_QWORD *)v68 + 16))(&__dst, v68);
  v70 = __dst.__r_.__value_.__r.__words[0];
  if (((*(uint64_t (**)(std::string::size_type, std::string::size_type))(*(_QWORD *)v69 + 24))(v69, __dst.__r_.__value_.__r.__words[0]) & 1) != 0)
  {
    v1406 = 0;
  }
  else
  {
    v1406 = 0;
    do
    {
      v71 = *(_QWORD *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v69 + 32))(v69);
      if (llvm::Value::getMetadata(v71, "agx.ts.dma", 0xAuLL))
      {
        v72 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v65 + 400))(v65, v71);
        v73 = v72;
        v75 = v74;
        v76 = HIDWORD(v72);
        v77 = ((uint64_t (*)(_QWORD **))(*v1471)[42])(v1471);
        v78 = v75;
        v65 = (uint64_t)v1471;
        v79 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v77 + 24))(v77, v78);
        v80 = v1406;
        if (v1406 <= (v76 + v79 - 1) / v79 + v73)
          v80 = (v76 + v79 - 1) / v79 + v73;
        v1406 = v80;
      }
      (*(void (**)(std::string::size_type))(*(_QWORD *)v69 + 40))(v69);
    }
    while (((*(uint64_t (**)(std::string::size_type, std::string::size_type))(*(_QWORD *)v69 + 24))(v69, v70) & 1) == 0);
  }
  if (v70)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v70 + 8))(v70);
  (*(void (**)(std::string::size_type))(*(_QWORD *)v69 + 8))(v69);
  (*(void (**)(void *))(*(_QWORD *)v68 + 8))(v68);
  if (v67)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v67 + 8))(v67);
  if (((*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v65 + 160))(v65, 0) & 1) == 0)
  {
    (*(void (**)(std::string *__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v65 + 128))(&__dst, v65, 0);
    (*(void (**)(void **__return_ptr, uint64_t, _QWORD))(*(_QWORD *)v65 + 136))(&v1482, v65, 0);
    v550 = __dst.__r_.__value_.__r.__words[0];
    v551 = v1482;
    if (__dst.__r_.__value_.__r.__words[0])
    {
      (*(void (**)(std::string *__return_ptr, std::string::size_type))(*(_QWORD *)__dst.__r_.__value_.__l.__data_
                                                                                + 16))(&__dst, __dst.__r_.__value_.__r.__words[0]);
      v552 = __dst.__r_.__value_.__r.__words[0];
    }
    else
    {
      v552 = 0;
    }
    (*(void (**)(std::string *__return_ptr, void *))(*(_QWORD *)v551 + 16))(&__dst, v551);
    v553 = __dst.__r_.__value_.__r.__words[0];
    while (((*(uint64_t (**)(std::string::size_type, std::string::size_type))(*(_QWORD *)v552 + 24))(v552, v553) & 1) == 0)
    {
      __dst.__r_.__value_.__r.__words[0] = 0;
      __dst.__r_.__value_.__r.__words[0] = *(_QWORD *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v552 + 32))(v552);
      sub_1C558B5F8(a6, &__dst);
      (*(void (**)(std::string::size_type))(*(_QWORD *)v552 + 40))(v552);
    }
    if (v553)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v553 + 8))(v553);
    (*(void (**)(std::string::size_type))(*(_QWORD *)v552 + 8))(v552);
    (*(void (**)(void *))(*(_QWORD *)v551 + 8))(v551);
    if (v550)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v550 + 8))(v550);
  }
  if (v56 <= v1406)
    v81 = v1406;
  else
    v81 = v56;
  v82 = sub_1C55891D0(1, v65);
  if (v82 == -1)
    v83 = 0;
  else
    v83 = v82;
  v1414 = v83;
  v84 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v65 + 336))(v65);
  v1376 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v84 + 24))(v84, 1);
  v1368 = sub_1C558B714(1, v65);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v65 + 160))(v65, 1) & 1) != 0)
  {
    v85 = 0;
    v1359 = 0;
    goto LABEL_143;
  }
  (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v65 + 128))(&__dst, v65, 1);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v65 + 136))(&v1482, v65, 1);
  v86 = v1482;
  v1419 = __dst.__r_.__value_.__r.__words[0];
  if (__dst.__r_.__value_.__r.__words[0])
  {
    (*(void (**)(std::string *__return_ptr))(*(_QWORD *)__dst.__r_.__value_.__l.__data_ + 16))(&__dst);
    v87 = __dst.__r_.__value_.__r.__words[0];
  }
  else
  {
    v87 = 0;
  }
  v1425 = v81;
  v1410 = v86;
  (*(void (**)(std::string *__return_ptr, void *))(*(_QWORD *)v86 + 16))(&__dst, v86);
  v88 = __dst.__r_.__value_.__r.__words[0];
  v85 = 0;
  if (((*(uint64_t (**)(std::string::size_type, std::string::size_type))(*(_QWORD *)v87 + 24))(v87, __dst.__r_.__value_.__r.__words[0]) & 1) == 0)
  {
    v229 = 0;
    v230 = 0;
    v1431 = v88;
    v1438 = v87;
    while (1)
    {
      v1482 = 0;
      v1482 = *(void **)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v87 + 32))(v87);
      v231 = sub_1C558B5F8(a6, &v1482);
      if (!llvm::Value::getMetadata((uint64_t)v1482, "agx.ts.dma", 0xAuLL))
      {
        v235 = *((_QWORD *)v1482 + 3);
        if (*(_BYTE *)(v235 + 8) != 17
          || (v236 = *(_QWORD *)(v231 - 8 * *(unsigned int *)(v231 + 8) + 8), *(_BYTE *)v236 == 1)
          && *(_BYTE *)(*(_QWORD *)(v236 + 128) + 16) == 16)
        {
          v237 = 1;
        }
        else
        {
          v237 = *(_DWORD *)(v235 + 32);
        }
        v238 = ((uint64_t (*)(_QWORD **))(*v1471)[50])(v1471);
        if (v237)
          break;
      }
      v232 = v229;
LABEL_366:
      v87 = v1438;
      v233 = v232;
      (*(void (**)(std::string::size_type))(*(_QWORD *)v1438 + 40))(v1438);
      v88 = v1431;
      v234 = (*(uint64_t (**)(std::string::size_type, std::string::size_type))(*(_QWORD *)v87 + 24))(v87, v1431);
      v89 = v233;
      v229 = v233;
      if ((v234 & 1) != 0)
        goto LABEL_139;
    }
    v1476 = (char *)v231;
    v239 = 0;
    v240 = __ROR8__(v238, 32);
    v1466 = HIDWORD(v240);
    v1446 = (void *)v237;
    v1455 = v240 / v237 / v1376;
    while (1)
    {
      v241 = (unint64_t)v230;
      *(_BYTE *)(a2 + 70) = 1;
      v242 = *(_QWORD *)(a2 + 40);
      v243 = *(_QWORD *)(a2 + 48);
      v244 = *(_QWORD *)(a2 + 32);
      v245 = v1466 + v1455 * (_DWORD)v239;
      v246 = v245 - v1414;
      if (v245 == v1414 && *(_BYTE *)(a2 + 80) == 0)
        goto LABEL_389;
      if (*(_QWORD *)(a2 + 72) <= 3uLL)
        *(_QWORD *)(a2 + 72) = 4;
      v248 = ((_BYTE)v243 - ((_BYTE)v244 + (_BYTE)v242)) & 3;
      v249 = *(_QWORD *)(a2 + 56);
      if (v243 - v249 < v248)
        break;
      v250 = v243 - v248;
      *(_QWORD *)(a2 + 48) = v243 - v248;
      if ((((_BYTE)v243 - ((_BYTE)v244 + (_BYTE)v242)) & 3) != 0)
        goto LABEL_383;
LABEL_386:
      if ((unint64_t)(v250 - v249) <= 3)
      {
        sub_1C4D663A4((uint64_t *)a2, 4uLL);
        v250 = *(_QWORD *)(a2 + 48);
      }
      *(_DWORD *)(v250 - 4) = v246;
      v252 = v250 - 4;
      *(_QWORD *)(a2 + 48) = v252;
      sub_1C4D66288((uint64_t *)a2, 8, *(_DWORD *)(a2 + 32) - v252 + *(_DWORD *)(a2 + 40));
LABEL_389:
      v253 = ((uint64_t (*)(_QWORD **, uint64_t, void *))(*v1471)[23])(v1471, 16, v1482);
      if ((v253 & 1) != 0 || *(_BYTE *)(a2 + 80))
      {
        v254 = sub_1C4D6650C(a2, v253);
        sub_1C4D66288((uint64_t *)a2, 10, v254);
      }
      if (*(char *)(v1470 + 239) < 0)
      {
        sub_1C47EBC30(&__dst, *(void **)(v1470 + 216), *(_QWORD *)(v1470 + 224));
      }
      else
      {
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *v1458;
        __dst.__r_.__value_.__r.__words[2] = *(_QWORD *)(v1470 + 232);
      }
      if (std::string::compare(&__dst, 0, 4uLL, "agx1") && std::string::compare(&__dst, 0, 4uLL, "agx2"))
        std::string::compare(&__dst, 0, 4uLL, "agx3");
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      v255 = &v1476[-8 * *((unsigned int *)v1476 + 2)];
      v256 = *((_QWORD *)v255 + 1);
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v255 + 128) + 24) + 8) == 17)
      {
        if (*(_BYTE *)v256 != 1 || (v257 = *(_QWORD *)(v256 + 128), *(_BYTE *)(v257 + 16) != 16))
        {
          v258 = (_QWORD *)(*(_QWORD *)&v255[8 * (_QWORD)v239 + 8]
                          - 8 * *(unsigned int *)(*(_QWORD *)&v255[8 * (_QWORD)v239 + 8] + 8));
          v259 = *(_QWORD *)(*v258 + 128);
          v260 = (_QWORD *)(v259 + 24);
          if (*(_DWORD *)(v259 + 32) >= 0x41u)
            v260 = (_QWORD *)*v260;
          v261 = (_QWORD *)*v260;
          v262 = v258[1];
          goto LABEL_410;
        }
      }
      else
      {
        v257 = *(_QWORD *)(v256 + 128);
      }
      v263 = (_QWORD *)(v257 + 24);
      if (*(_DWORD *)(v257 + 32) >= 0x41u)
        v263 = (_QWORD *)*v263;
      v261 = (_QWORD *)*v263;
      v262 = *((_QWORD *)v255 + 2);
LABEL_410:
      v264 = *(_QWORD *)(v262 + 128);
      v265 = (_QWORD *)(v264 + 24);
      if (*(_DWORD *)(v264 + 32) >= 0x41u)
        v265 = (_QWORD *)*v265;
      v266 = *(_DWORD *)v265;
      if (v261 | *(_BYTE *)(a2 + 80))
      {
        if (!*(_QWORD *)(a2 + 72))
          *(_QWORD *)(a2 + 72) = 1;
        v268 = *(_QWORD *)(a2 + 48);
        if (v268 == *(_QWORD *)(a2 + 56))
        {
          sub_1C4D663A4((uint64_t *)a2, 1uLL);
          v268 = *(_QWORD *)(a2 + 48);
        }
        *(_QWORD *)(a2 + 48) = v268 - 1;
        *(_BYTE *)(v268 - 1) = (_BYTE)v261;
        sub_1C4D66288((uint64_t *)a2, 4, *(_DWORD *)(a2 + 32) - *(_DWORD *)(a2 + 48) + *(_DWORD *)(a2 + 40));
        v267 = *(unsigned __int8 *)(a2 + 80);
      }
      else
      {
        v267 = 0;
      }
      if (!(v266 | v267))
        goto LABEL_430;
      if (*(_QWORD *)(a2 + 72) <= 3uLL)
        *(_QWORD *)(a2 + 72) = 4;
      v269 = *(_QWORD *)(a2 + 48);
      v270 = *(_QWORD *)(a2 + 56);
      v271 = ((_BYTE)v269 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
      if (v269 - v270 < v271)
      {
        sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v269 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
        *(_QWORD *)(a2 + 48) -= v271;
LABEL_424:
        v273 = 0;
        do
          *(_BYTE *)(*(_QWORD *)(a2 + 48) + v273++) = 0;
        while (v271 != v273);
        v272 = *(_QWORD *)(a2 + 48);
        v270 = *(_QWORD *)(a2 + 56);
        goto LABEL_427;
      }
      v272 = v269 - v271;
      *(_QWORD *)(a2 + 48) = v272;
      if (v271)
        goto LABEL_424;
LABEL_427:
      if ((unint64_t)(v272 - v270) <= 3)
      {
        sub_1C4D663A4((uint64_t *)a2, 4uLL);
        v272 = *(_QWORD *)(a2 + 48);
      }
      *(_DWORD *)(v272 - 4) = v266;
      v274 = v272 - 4;
      *(_QWORD *)(a2 + 48) = v274;
      sub_1C4D66288((uint64_t *)a2, 6, *(_DWORD *)(a2 + 32) - v274 + *(_DWORD *)(a2 + 40));
LABEL_430:
      v275 = sub_1C4D66580(a2, (unsigned __int16)v244 - (unsigned __int16)v243 + (unsigned __int16)v242);
      v276 = v275;
      v230 = (char *)v241;
      if ((unint64_t)v229 >= v241)
      {
        v277 = (v229 - v85) >> 2;
        v278 = v277 + 1;
        if ((unint64_t)(v277 + 1) >> 62)
          goto LABEL_2202;
        if ((uint64_t)(v241 - (_QWORD)v85) >> 1 > v278)
          v278 = (uint64_t)(v241 - (_QWORD)v85) >> 1;
        if (v241 - (unint64_t)v85 >= 0x7FFFFFFFFFFFFFFCLL)
          v279 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v279 = v278;
        if (v279)
        {
          if (v279 >> 62)
            goto LABEL_2204;
          v280 = (char *)operator new(4 * v279);
        }
        else
        {
          v280 = 0;
        }
        v281 = &v280[4 * v277];
        *(_DWORD *)v281 = v276;
        v232 = v281 + 4;
        while (v229 != v85)
        {
          v282 = *((_DWORD *)v229 - 1);
          v229 -= 4;
          *((_DWORD *)v281 - 1) = v282;
          v281 -= 4;
        }
        v230 = &v280[4 * v279];
        if (v85)
        {
          v283 = v232;
          operator delete(v85);
          v232 = v283;
        }
        v85 = v281;
      }
      else
      {
        *(_DWORD *)v229 = v275;
        v232 = v229 + 4;
      }
      v239 = (char *)v239 + 1;
      v229 = v232;
      if (v239 == v1446)
        goto LABEL_366;
    }
    sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v243 - ((_BYTE)v244 + (_BYTE)v242)) & 3);
    *(_QWORD *)(a2 + 48) -= v248;
LABEL_383:
    v251 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(a2 + 48) + v251++) = 0;
    while (v248 != v251);
    v250 = *(_QWORD *)(a2 + 48);
    v249 = *(_QWORD *)(a2 + 56);
    goto LABEL_386;
  }
  v89 = 0;
LABEL_139:
  v1359 = v89;
  v65 = (uint64_t)v1471;
  if (v88)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v88 + 8))(v88);
  (*(void (**)(std::string::size_type))(*(_QWORD *)v87 + 8))(v87);
  (*(void (**)(void *))(*(_QWORD *)v1410 + 8))(v1410);
  v81 = v1425;
  if (v1419)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v1419 + 8))(v1419);
LABEL_143:
  v1365 = v85;
  v90 = v1368;
  if (v81 > v1368)
    v90 = v81;
  v1394 = v90;
  (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v65 + 128))(&__dst, v65, 5);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v65 + 136))(&v1482, v65, 5);
  v91 = __dst.__r_.__value_.__r.__words[0];
  v92 = v1482;
  if (__dst.__r_.__value_.__r.__words[0])
  {
    (*(void (**)(std::string *__return_ptr, std::string::size_type))(*(_QWORD *)__dst.__r_.__value_.__l.__data_
                                                                              + 16))(&__dst, __dst.__r_.__value_.__r.__words[0]);
    v93 = __dst.__r_.__value_.__r.__words[0];
  }
  else
  {
    v93 = 0;
  }
  (*(void (**)(std::string *__return_ptr, void *))(*(_QWORD *)v92 + 16))(&__dst, v92);
  v94 = __dst.__r_.__value_.__r.__words[0];
  v95 = -1;
  while (((*(uint64_t (**)(std::string::size_type, std::string::size_type))(*(_QWORD *)v93 + 24))(v93, v94) & 1) == 0)
  {
    v96 = (_QWORD *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v93 + 32))(v93);
    v97 = *v96;
    if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v65 + 184))(v65, 15, *v96) & 1) == 0)
    {
      v98 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v65 + 400))(v65, v97);
      if (v95 >= v98)
        v95 = v98;
    }
    (*(void (**)(std::string::size_type))(*(_QWORD *)v93 + 40))(v93);
  }
  if (v94)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v94 + 8))(v94);
  (*(void (**)(std::string::size_type))(*(_QWORD *)v93 + 8))(v93);
  (*(void (**)(void *))(*(_QWORD *)v92 + 8))(v92);
  if (v91)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v91 + 8))(v91);
  v99 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v65 + 176))(v65, 25);
  v1473 = (_BYTE *)a2;
  if (v99)
  {
    if (v99 == 1)
    {
      (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v65 + 128))(&__dst, v65, 25);
      v647 = *(_QWORD *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)__dst.__r_.__value_.__l.__data_
                                                                          + 32))(__dst.__r_.__value_.__r.__words[0]);
      v648 = __dst.__r_.__value_.__r.__words[0];
      __dst.__r_.__value_.__r.__words[0] = 0;
      if (v648)
        (*(void (**)(std::string::size_type))(*(_QWORD *)v648 + 8))(v648);
      if (!v647)
        goto LABEL_157;
    }
    else
    {
      (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v65 + 128))(&__dst, v65, 25);
      v1340 = *(_QWORD *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)__dst.__r_.__value_.__l.__data_
                                                                           + 32))(__dst.__r_.__value_.__r.__words[0]);
      v1341 = __dst.__r_.__value_.__r.__words[0];
      __dst.__r_.__value_.__r.__words[0] = 0;
      if (v1341)
        (*(void (**)(std::string::size_type))(*(_QWORD *)v1341 + 8))(v1341);
      v65 = (uint64_t)v1471;
      if (!v1340)
        goto LABEL_157;
    }
    if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v65 + 160))(v65, 15) & 1) == 0)
    {
      v649 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v65 + 176))(v65, 25);
      if (v649)
      {
        if (v649 == 1)
        {
          (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v65 + 128))(&__dst, v65, 25);
          v650 = *(_QWORD *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)__dst.__r_.__value_.__l.__data_
                                                                              + 32))(__dst.__r_.__value_.__r.__words[0]);
          v1337 = __dst.__r_.__value_.__r.__words[0];
          __dst.__r_.__value_.__r.__words[0] = 0;
          if (v1337)
            (*(void (**)(std::string::size_type))(*(_QWORD *)v1337 + 8))(v1337);
        }
        else
        {
          (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v65 + 128))(&__dst, v65, 25);
          v650 = *(_QWORD *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)__dst.__r_.__value_.__l.__data_
                                                                              + 32))(__dst.__r_.__value_.__r.__words[0]);
          v1348 = __dst.__r_.__value_.__r.__words[0];
          __dst.__r_.__value_.__r.__words[0] = 0;
          if (v1348)
            (*(void (**)(std::string::size_type))(*(_QWORD *)v1348 + 8))(v1348);
          v65 = (uint64_t)v1471;
        }
      }
      else
      {
        v650 = 0;
      }
      v651 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v65 + 400))(v65, v650);
      if (v95 >= v651)
        v95 = v651;
    }
  }
LABEL_157:
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v65 + 288))(v65) & 1) == 0)
  {
    (*(void (**)(std::string *__return_ptr, uint64_t))(*(_QWORD *)v65 + 272))(&__dst, v65);
    v100 = *(_DWORD *)((*(uint64_t (**)(std::string::size_type))(*(_QWORD *)__dst.__r_.__value_.__l.__data_
                                                                         + 32))(__dst.__r_.__value_.__r.__words[0])
                     + 8);
    if (v100 < v95)
      v95 = v100;
    v101 = __dst.__r_.__value_.__r.__words[0];
    __dst.__r_.__value_.__r.__words[0] = 0;
    if (v101)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v101 + 8))(v101);
  }
  if (v95 == -1)
    v102 = 0;
  else
    v102 = v95;
  v1453 = v102;
  v103 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v65 + 336))(v65);
  v1387 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v103 + 24))(v103, 5);
  v104 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v65 + 176))(v65, 25);
  v105 = 0;
  if (v104)
  {
    if (v104 == 1)
    {
      (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v65 + 128))(&__dst, v65, 25);
      v652 = *(_QWORD *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)__dst.__r_.__value_.__l.__data_
                                                                          + 32))(__dst.__r_.__value_.__r.__words[0]);
      v653 = __dst.__r_.__value_.__r.__words[0];
      __dst.__r_.__value_.__r.__words[0] = 0;
      if (v653)
        (*(void (**)(std::string::size_type))(*(_QWORD *)v653 + 8))(v653);
      if (!v652)
        goto LABEL_1057;
    }
    else
    {
      (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v65 + 128))(&__dst, v65, 25);
      v1342 = *(_QWORD *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)__dst.__r_.__value_.__l.__data_
                                                                           + 32))(__dst.__r_.__value_.__r.__words[0]);
      v1343 = __dst.__r_.__value_.__r.__words[0];
      __dst.__r_.__value_.__r.__words[0] = 0;
      if (v1343)
        (*(void (**)(std::string::size_type))(*(_QWORD *)v1343 + 8))(v1343);
      v65 = (uint64_t)v1471;
      if (!v1342)
        goto LABEL_1057;
    }
    if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v65 + 160))(v65, 15) & 1) == 0)
    {
      v1292 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v65 + 176))(v65, 25);
      if (v1292)
      {
        if (v1292 == 1)
        {
          (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v65 + 128))(&__dst, v65, 25);
          v1293 = *(_QWORD *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)__dst.__r_.__value_.__l.__data_
                                                                               + 32))(__dst.__r_.__value_.__r.__words[0]);
          v1338 = __dst.__r_.__value_.__r.__words[0];
          __dst.__r_.__value_.__r.__words[0] = 0;
          if (v1338)
            (*(void (**)(std::string::size_type))(*(_QWORD *)v1338 + 8))(v1338);
        }
        else
        {
          (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v65 + 128))(&__dst, v65, 25);
          v1293 = *(_QWORD *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)__dst.__r_.__value_.__l.__data_
                                                                               + 32))(__dst.__r_.__value_.__r.__words[0]);
          v1349 = __dst.__r_.__value_.__r.__words[0];
          __dst.__r_.__value_.__r.__words[0] = 0;
          if (v1349)
            (*(void (**)(std::string::size_type))(*(_QWORD *)v1349 + 8))(v1349);
          v65 = (uint64_t)v1471;
        }
      }
      else
      {
        v1293 = 0;
      }
      v105 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v65 + 400))(v65, v1293) + 2;
      goto LABEL_166;
    }
LABEL_1057:
    v105 = 0;
  }
LABEL_166:
  (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v65 + 128))(&__dst, v65, 5);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v65 + 136))(&v1482, v65, 5);
  v106 = __dst.__r_.__value_.__r.__words[0];
  v107 = v1482;
  if (__dst.__r_.__value_.__r.__words[0])
  {
    (*(void (**)(std::string *__return_ptr, std::string::size_type))(*(_QWORD *)__dst.__r_.__value_.__l.__data_
                                                                              + 16))(&__dst, __dst.__r_.__value_.__r.__words[0]);
    v108 = __dst.__r_.__value_.__r.__words[0];
  }
  else
  {
    v108 = 0;
  }
  (*(void (**)(std::string *__return_ptr, void *))(*(_QWORD *)v107 + 16))(&__dst, v107);
  v109 = __dst.__r_.__value_.__r.__words[0];
  while (((*(uint64_t (**)(std::string::size_type, std::string::size_type))(*(_QWORD *)v108 + 24))(v108, v109) & 1) == 0)
  {
    v110 = (_QWORD *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v108 + 32))(v108);
    v111 = *v110;
    if (((*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v65 + 184))(v65, 15, *v110) & 1) == 0)
    {
      v112 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v65 + 400))(v65, v111);
      v113 = v112;
      v114 = v105;
      v116 = v115;
      v117 = HIDWORD(v112);
      v118 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v65 + 336))(v65);
      v119 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v118 + 24))(v118, v116);
      if (v114 <= (v117 + v119 - 1) / v119 + v113)
        v105 = (v117 + v119 - 1) / v119 + v113;
      else
        v105 = v114;
    }
    (*(void (**)(std::string::size_type))(*(_QWORD *)v108 + 40))(v108);
  }
  if (v109)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v109 + 8))(v109);
  (*(void (**)(std::string::size_type))(*(_QWORD *)v108 + 8))(v108);
  (*(void (**)(void *))(*(_QWORD *)v107 + 8))(v107);
  if (v106)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v106 + 8))(v106);
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v65 + 272))(&v1482, v65);
  (*(void (**)(std::string::size_type *__return_ptr, uint64_t))(*(_QWORD *)v65 + 280))(&__dst.__r_.__value_.__l.__size_, v65);
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v1482;
  sub_1C4E40408((uint64_t *)&v1482, (uint64_t)&__dst);
  sub_1C4E40408((uint64_t *)&v1480, (uint64_t)&__dst.__r_.__value_.__l.__size_);
  while (((*(uint64_t (**)(void *, _QWORD *))(*(_QWORD *)v1482 + 24))(v1482, v1480) & 1) == 0)
  {
    v120 = (*(uint64_t (**)(void *))(*(_QWORD *)v1482 + 32))(v1482);
    v121 = (*(uint64_t (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v65 + 184))(v65, 3, *(_QWORD *)v120);
    v122 = *(_DWORD *)(v120 + 8) + 2;
    if (v105 > v122)
      v122 = v105;
    if (v121)
      v105 = v122;
    (*(void (**)(void *))(*(_QWORD *)v1482 + 40))(v1482);
  }
  v123 = v1480;
  v1480 = 0;
  if (v123)
    (*(void (**)(_QWORD *))(*v123 + 8))(v123);
  v124 = v1482;
  v1482 = 0;
  if (v124)
    (*(void (**)(void *))(*(_QWORD *)v124 + 8))(v124);
  size = __dst.__r_.__value_.__l.__size_;
  __dst.__r_.__value_.__l.__size_ = 0;
  if (size)
    (*(void (**)(std::string::size_type))(*(_QWORD *)size + 8))(size);
  v126 = __dst.__r_.__value_.__r.__words[0];
  __dst.__r_.__value_.__r.__words[0] = 0;
  if (v126)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v126 + 8))(v126);
  v1399 = v105;
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v65 + 160))(v65, 5) & 1) != 0)
  {
    v1411 = 0;
    v1402 = 0;
    v1464 = 0;
    goto LABEL_540;
  }
  v127 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v65 + 176))(v65, 25);
  if (!v127)
    goto LABEL_197;
  if (v127 == 1)
  {
    (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v65 + 128))(&__dst, v65, 25);
    v1264 = *(_QWORD *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)__dst.__r_.__value_.__l.__data_
                                                                         + 32))(__dst.__r_.__value_.__r.__words[0]);
    v1265 = __dst.__r_.__value_.__r.__words[0];
    __dst.__r_.__value_.__r.__words[0] = 0;
    if (v1265)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v1265 + 8))(v1265);
    if (!v1264)
      goto LABEL_197;
  }
  else
  {
    (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v65 + 128))(&__dst, v65, 25);
    v1345 = *(_QWORD *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)__dst.__r_.__value_.__l.__data_
                                                                         + 32))(__dst.__r_.__value_.__r.__words[0]);
    v1346 = __dst.__r_.__value_.__r.__words[0];
    __dst.__r_.__value_.__r.__words[0] = 0;
    if (v1346)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v1346 + 8))(v1346);
    v65 = (uint64_t)v1471;
    if (!v1345)
      goto LABEL_197;
  }
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v65 + 160))(v65, 15) & 1) != 0)
  {
LABEL_197:
    v1411 = 0;
    v128 = 0;
    goto LABEL_198;
  }
  *(_BYTE *)(a2 + 70) = 1;
  v1266 = *(_DWORD *)(a2 + 40);
  v1267 = *(_DWORD *)(a2 + 32) - *(_DWORD *)(a2 + 48);
  v1268 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v65 + 176))(v65, 25);
  if (v1268)
  {
    if (v1268 == 1)
    {
      (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v65 + 128))(&__dst, v65, 25);
      v1269 = *(_QWORD *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)__dst.__r_.__value_.__l.__data_
                                                                           + 32))(__dst.__r_.__value_.__r.__words[0]);
      v1339 = __dst.__r_.__value_.__r.__words[0];
      __dst.__r_.__value_.__r.__words[0] = 0;
      if (v1339)
        (*(void (**)(std::string::size_type))(*(_QWORD *)v1339 + 8))(v1339);
    }
    else
    {
      (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v65 + 128))(&__dst, v65, 25);
      v1269 = *(_QWORD *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)__dst.__r_.__value_.__l.__data_
                                                                           + 32))(__dst.__r_.__value_.__r.__words[0]);
      v1350 = __dst.__r_.__value_.__r.__words[0];
      __dst.__r_.__value_.__r.__words[0] = 0;
      if (v1350)
        (*(void (**)(std::string::size_type))(*(_QWORD *)v1350 + 8))(v1350);
      v65 = (uint64_t)v1471;
    }
  }
  else
  {
    v1269 = 0;
  }
  v1270 = v1267 + v1266;
  v1271 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v65 + 400))(v65, v1269);
  v1272 = v1271 - v1453;
  if (v1271 != v1453 || *(_BYTE *)(a2 + 80))
  {
    if (*(_QWORD *)(a2 + 72) <= 3uLL)
      *(_QWORD *)(a2 + 72) = 4;
    v1273 = *(_QWORD *)(a2 + 48);
    v1274 = *(_QWORD *)(a2 + 56);
    v1275 = ((_BYTE)v1273 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
    if (v1273 - v1274 < v1275)
    {
      sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v1273 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
      *(_QWORD *)(a2 + 48) -= v1275;
    }
    else
    {
      v1276 = v1273 - v1275;
      *(_QWORD *)(a2 + 48) = v1276;
      if (!v1275)
      {
LABEL_2071:
        if ((unint64_t)(v1276 - v1274) <= 3)
        {
          sub_1C4D663A4((uint64_t *)a2, 4uLL);
          v1276 = *(_QWORD *)(a2 + 48);
        }
        *(_DWORD *)(v1276 - 4) = v1272;
        v1278 = v1276 - 4;
        *(_QWORD *)(a2 + 48) = v1278;
        sub_1C4D66288((uint64_t *)a2, 8, *(_DWORD *)(a2 + 32) - v1278 + *(_DWORD *)(a2 + 40));
        goto LABEL_2074;
      }
    }
    v1277 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(a2 + 48) + v1277++) = 0;
    while (v1275 != v1277);
    v1276 = *(_QWORD *)(a2 + 48);
    v1274 = *(_QWORD *)(a2 + 56);
    goto LABEL_2071;
  }
LABEL_2074:
  v1279 = sub_1C4D6650C(a2, 64);
  sub_1C4D66288((uint64_t *)a2, 4, v1279);
  if (*(_BYTE *)(a2 + 80))
  {
    if (*(_QWORD *)(a2 + 72) <= 3uLL)
      *(_QWORD *)(a2 + 72) = 4;
    v1280 = *(_QWORD *)(a2 + 48);
    v1281 = *(_QWORD *)(a2 + 56);
    v1282 = ((_BYTE)v1280 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
    if (v1280 - v1281 < v1282)
    {
      sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v1280 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
      *(_QWORD *)(a2 + 48) -= v1282;
    }
    else
    {
      v1283 = v1280 - v1282;
      *(_QWORD *)(a2 + 48) = v1283;
      if (!v1282)
      {
LABEL_2082:
        if ((unint64_t)(v1283 - v1281) <= 3)
        {
          sub_1C4D663A4((uint64_t *)a2, 4uLL);
          v1283 = *(_QWORD *)(a2 + 48);
        }
        *(_DWORD *)(v1283 - 4) = 0;
        v1285 = v1283 - 4;
        *(_QWORD *)(a2 + 48) = v1285;
        sub_1C4D66288((uint64_t *)a2, 6, *(_DWORD *)(a2 + 32) - v1285 + *(_DWORD *)(a2 + 40));
        goto LABEL_2085;
      }
    }
    v1284 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(a2 + 48) + v1284++) = 0;
    while (v1282 != v1284);
    v1283 = *(_QWORD *)(a2 + 48);
    v1281 = *(_QWORD *)(a2 + 56);
    goto LABEL_2082;
  }
LABEL_2085:
  v1286 = sub_1C4D66580(a2, v1270);
  v1411 = (char *)operator new(4uLL);
  *(_DWORD *)v1411 = v1286;
  v128 = v1411 + 4;
LABEL_198:
  (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v65 + 128))(&__dst, v65, 5);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v65 + 136))(&v1482, v65, 5);
  v129 = v1482;
  v1390 = __dst.__r_.__value_.__r.__words[0];
  if (__dst.__r_.__value_.__r.__words[0])
  {
    (*(void (**)(std::string *__return_ptr))(*(_QWORD *)__dst.__r_.__value_.__l.__data_ + 16))(&__dst);
    v130 = __dst.__r_.__value_.__r.__words[0];
  }
  else
  {
    v130 = 0;
  }
  v1384 = v129;
  (*(void (**)(std::string *__return_ptr, void *))(*(_QWORD *)v129 + 16))(&__dst, v129);
  v131 = __dst.__r_.__value_.__r.__words[0];
  if (((*(uint64_t (**)(std::string::size_type, std::string::size_type))(*(_QWORD *)v130 + 24))(v130, __dst.__r_.__value_.__r.__words[0]) & 1) == 0)
  {
    v1464 = v128;
    v1420 = v131;
    v1426 = v130;
    while (1)
    {
      v1482 = 0;
      v1482 = *(void **)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v130 + 32))(v130);
      v284 = sub_1C558B5F8(a6, &v1482);
      v285 = v284;
      v286 = v1482;
      v287 = *((_QWORD *)v1482 + 3);
      if (*(_BYTE *)(v287 + 8) != 17
        || (v288 = *(_QWORD *)(v284 - 8 * *(unsigned int *)(v284 + 8) + 8), *(_BYTE *)v288 == 1)
        && *(_BYTE *)(*(_QWORD *)(v288 + 128) + 16) == 16)
      {
        v289 = 1;
      }
      else
      {
        v289 = *(_DWORD *)(v287 + 32);
      }
      v290 = (*(uint64_t (**)(uint64_t, void *))(*(_QWORD *)v65 + 400))(v65, v1482);
      LODWORD(v1447) = v290;
      if ((*(unsigned int (**)(uint64_t, uint64_t, void *))(*(_QWORD *)v65 + 184))(v65, 15, v286))
      {
        v291 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v65 + 336))(v65);
        v292 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v291 + 24))(v291, 5);
        v1447 = (void *)((((**(unsigned int (***)(uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))v65)(v65, 8, 0, 1, 3)+ v292 * v1453+ 3) & 0x1FFFFFFFCuLL)/ v292+ v290);
      }
      if (v289)
        break;
      v330 = v128;
      v294 = v1411;
LABEL_535:
      v1411 = v294;
      v130 = v1426;
      v338 = v330;
      (*(void (**)(std::string::size_type))(*(_QWORD *)v1426 + 40))(v1426);
      v131 = v1420;
      v339 = (*(uint64_t (**)(std::string::size_type, std::string::size_type))(*(_QWORD *)v130 + 24))(v130, v1420);
      v132 = v338;
      v128 = v338;
      v65 = (uint64_t)v1471;
      if ((v339 & 1) != 0)
        goto LABEL_536;
    }
    v293 = 0;
    v1432 = v289;
    v1439 = HIDWORD(v290) / v289 / v1387;
    v294 = v1411;
    while (1)
    {
      *(_BYTE *)(a2 + 70) = 1;
      v296 = *(_QWORD *)(a2 + 40);
      v295 = *(_QWORD *)(a2 + 48);
      v297 = *(_QWORD *)(a2 + 32);
      v298 = (_DWORD)v1447 + v1439 * v293;
      v299 = v298 - v1453;
      if (v298 == v1453 && *(_BYTE *)(a2 + 80) == 0)
        goto LABEL_476;
      if (*(_QWORD *)(a2 + 72) <= 3uLL)
        *(_QWORD *)(a2 + 72) = 4;
      v301 = ((_BYTE)v295 - ((_BYTE)v297 + (_BYTE)v296)) & 3;
      v302 = *(_QWORD *)(a2 + 56);
      if (v295 - v302 < v301)
        break;
      v303 = v295 - v301;
      *(_QWORD *)(a2 + 48) = v295 - v301;
      if ((((_BYTE)v295 - ((_BYTE)v297 + (_BYTE)v296)) & 3) != 0)
        goto LABEL_470;
LABEL_473:
      if ((unint64_t)(v303 - v302) <= 3)
      {
        sub_1C4D663A4((uint64_t *)a2, 4uLL);
        v303 = *(_QWORD *)(a2 + 48);
      }
      *(_DWORD *)(v303 - 4) = v299;
      v305 = v303 - 4;
      *(_QWORD *)(a2 + 48) = v305;
      sub_1C4D66288((uint64_t *)a2, 8, *(_DWORD *)(a2 + 32) - v305 + *(_DWORD *)(a2 + 40));
LABEL_476:
      v306 = ((uint64_t (*)(_QWORD **, uint64_t, void *))(*v1471)[23])(v1471, 16, v1482);
      if ((v306 & 1) != 0 || *(_BYTE *)(a2 + 80))
      {
        v307 = sub_1C4D6650C(a2, v306);
        sub_1C4D66288((uint64_t *)a2, 10, v307);
      }
      if (*(char *)(v1470 + 239) < 0)
      {
        sub_1C47EBC30(&__dst, *(void **)(v1470 + 216), *(_QWORD *)(v1470 + 224));
      }
      else
      {
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *v1458;
        __dst.__r_.__value_.__r.__words[2] = *(_QWORD *)(v1470 + 232);
      }
      if (std::string::compare(&__dst, 0, 4uLL, "agx1") && std::string::compare(&__dst, 0, 4uLL, "agx2"))
        std::string::compare(&__dst, 0, 4uLL, "agx3");
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      v308 = (_QWORD *)(v285 - 8 * *(unsigned int *)(v285 + 8));
      v309 = v308[1];
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v308 + 128) + 24) + 8) == 17)
      {
        if (*(_BYTE *)v309 != 1 || (v310 = *(_QWORD *)(v309 + 128), *(_BYTE *)(v310 + 16) != 16))
        {
          v311 = (_QWORD *)(v308[v293 + 1] - 8 * *(unsigned int *)(v308[v293 + 1] + 8));
          v312 = *(_QWORD *)(*v311 + 128);
          v313 = (_QWORD *)(v312 + 24);
          if (*(_DWORD *)(v312 + 32) >= 0x41u)
            v313 = (_QWORD *)*v313;
          v314 = (_QWORD *)*v313;
          v315 = v311[1];
          goto LABEL_497;
        }
      }
      else
      {
        v310 = *(_QWORD *)(v309 + 128);
      }
      v316 = (_QWORD *)(v310 + 24);
      if (*(_DWORD *)(v310 + 32) >= 0x41u)
        v316 = (_QWORD *)*v316;
      v314 = (_QWORD *)*v316;
      v315 = v308[2];
LABEL_497:
      v317 = *(_QWORD *)(v315 + 128);
      v318 = (_QWORD *)(v317 + 24);
      if (*(_DWORD *)(v317 + 32) >= 0x41u)
        v318 = (_QWORD *)*v318;
      v319 = *(_DWORD *)v318;
      if (v314 | *(_BYTE *)(a2 + 80))
      {
        v321 = sub_1C4D6650C(a2, (char)v314);
        sub_1C4D66288((uint64_t *)a2, 4, v321);
        v320 = *(unsigned __int8 *)(a2 + 80);
      }
      else
      {
        v320 = 0;
      }
      if (!(v319 | v320))
        goto LABEL_513;
      if (*(_QWORD *)(a2 + 72) <= 3uLL)
        *(_QWORD *)(a2 + 72) = 4;
      v322 = *(_QWORD *)(a2 + 48);
      v323 = *(_QWORD *)(a2 + 56);
      v324 = ((_BYTE)v322 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
      if (v322 - v323 < v324)
      {
        sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v322 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
        *(_QWORD *)(a2 + 48) -= v324;
LABEL_507:
        v326 = 0;
        do
          *(_BYTE *)(*(_QWORD *)(a2 + 48) + v326++) = 0;
        while (v324 != v326);
        v325 = *(_QWORD *)(a2 + 48);
        v323 = *(_QWORD *)(a2 + 56);
        goto LABEL_510;
      }
      v325 = v322 - v324;
      *(_QWORD *)(a2 + 48) = v325;
      if (v324)
        goto LABEL_507;
LABEL_510:
      if ((unint64_t)(v325 - v323) <= 3)
      {
        sub_1C4D663A4((uint64_t *)a2, 4uLL);
        v325 = *(_QWORD *)(a2 + 48);
      }
      *(_DWORD *)(v325 - 4) = v319;
      v327 = v325 - 4;
      *(_QWORD *)(a2 + 48) = v327;
      sub_1C4D66288((uint64_t *)a2, 6, *(_DWORD *)(a2 + 32) - v327 + *(_DWORD *)(a2 + 40));
LABEL_513:
      v328 = sub_1C4D66580(a2, (unsigned __int16)v297 - (unsigned __int16)v295 + (unsigned __int16)v296);
      v329 = v328;
      if (v128 >= v1464)
      {
        v331 = (v128 - v294) >> 2;
        v332 = v331 + 1;
        if ((unint64_t)(v331 + 1) >> 62)
          goto LABEL_2202;
        v333 = v294;
        if ((v1464 - v294) >> 1 > v332)
          v332 = (v1464 - v294) >> 1;
        if ((unint64_t)(v1464 - v294) >= 0x7FFFFFFFFFFFFFFCLL)
          v334 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v334 = v332;
        if (v334)
        {
          if (v334 >> 62)
            goto LABEL_2204;
          v335 = (char *)operator new(4 * v334);
          v333 = v294;
        }
        else
        {
          v335 = 0;
        }
        v294 = &v335[4 * v331];
        *(_DWORD *)v294 = v329;
        v330 = v294 + 4;
        while (v128 != v333)
        {
          v336 = *((_DWORD *)v128 - 1);
          v128 -= 4;
          *((_DWORD *)v294 - 1) = v336;
          v294 -= 4;
        }
        v1464 = &v335[4 * v334];
        if (v333)
        {
          v337 = v330;
          operator delete(v333);
          v330 = v337;
        }
      }
      else
      {
        *(_DWORD *)v128 = v328;
        v330 = v128 + 4;
      }
      ++v293;
      v128 = v330;
      if (v293 == v1432)
        goto LABEL_535;
    }
    sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v295 - ((_BYTE)v297 + (_BYTE)v296)) & 3);
    *(_QWORD *)(a2 + 48) -= v301;
LABEL_470:
    v304 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(a2 + 48) + v304++) = 0;
    while (v301 != v304);
    v303 = *(_QWORD *)(a2 + 48);
    v302 = *(_QWORD *)(a2 + 56);
    goto LABEL_473;
  }
  v132 = v128;
  v1464 = v128;
LABEL_536:
  v1402 = v132;
  if (v131)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v131 + 8))(v131);
  (*(void (**)(std::string::size_type))(*(_QWORD *)v130 + 8))(v130);
  (*(void (**)(void *))(*(_QWORD *)v1384 + 8))(v1384);
  v105 = v1399;
  if (v1390)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v1390 + 8))(v1390);
LABEL_540:
  v340 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v65 + 336))(v65);
  v341 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v340 + 24))(v340, 6);
  v1358 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v65 + 480))(v65, 6, v341, v341);
  (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v65 + 272))(&v1482, v65);
  (*(void (**)(_QWORD **__return_ptr, uint64_t))(*(_QWORD *)v65 + 280))(&v1480, v65);
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v1482;
  __dst.__r_.__value_.__l.__size_ = (std::string::size_type)v1480;
  sub_1C4E40408((uint64_t *)&v1482, (uint64_t)&__dst);
  sub_1C4E40408((uint64_t *)&v1480, (uint64_t)&__dst.__r_.__value_.__l.__size_);
  if (((*(uint64_t (**)(void *, _QWORD *))(*(_QWORD *)v1482 + 24))(v1482, v1480) & 1) == 0)
  {
    while (1)
    {
      v348 = (*(uint64_t (**)(void *))(*(_QWORD *)v1482 + 32))(v1482);
      if ((*(unsigned int (**)(uint64_t, uint64_t, _QWORD))(*(_QWORD *)v65 + 184))(v65, 3, *(_QWORD *)v348))
      {
        break;
      }
LABEL_642:
      (*(void (**)(void *))(*(_QWORD *)v1482 + 40))(v1482);
      if (((*(uint64_t (**)(void *, _QWORD *))(*(_QWORD *)v1482 + 24))(v1482, v1480) & 1) != 0)
        goto LABEL_541;
    }
    *(_BYTE *)(a2 + 70) = 1;
    v350 = *(_QWORD *)(a2 + 40);
    v349 = *(_QWORD *)(a2 + 48);
    v351 = *(_QWORD *)(a2 + 32);
    v352 = *(_DWORD *)(v348 + 8);
    v353 = v352 - v1453;
    if (v352 == v1453 && *(_BYTE *)(a2 + 80) == 0)
    {
LABEL_569:
      v360 = sub_1C4D6650C(a2, 110);
      sub_1C4D66288((uint64_t *)a2, 4, v360);
      v361 = *(_DWORD *)(v348 + 12);
      if (!v361 && !*(_BYTE *)(a2 + 80))
        goto LABEL_581;
      if (*(_QWORD *)(a2 + 72) <= 3uLL)
        *(_QWORD *)(a2 + 72) = 4;
      v362 = *(_QWORD *)(a2 + 48);
      v363 = *(_QWORD *)(a2 + 56);
      v364 = ((_BYTE)v362 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
      if (v362 - v363 < v364)
      {
        sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v362 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
        *(_QWORD *)(a2 + 48) -= v364;
      }
      else
      {
        v365 = v362 - v364;
        *(_QWORD *)(a2 + 48) = v365;
        if (!v364)
        {
LABEL_578:
          if ((unint64_t)(v365 - v363) <= 3)
          {
            sub_1C4D663A4((uint64_t *)a2, 4uLL);
            v365 = *(_QWORD *)(a2 + 48);
          }
          *(_DWORD *)(v365 - 4) = v361;
          v367 = v365 - 4;
          *(_QWORD *)(a2 + 48) = v367;
          sub_1C4D66288((uint64_t *)a2, 6, *(_DWORD *)(a2 + 32) - v367 + *(_DWORD *)(a2 + 40));
LABEL_581:
          v368 = sub_1C4D66580(a2, (unsigned __int16)v351 - (unsigned __int16)v349 + (unsigned __int16)v350);
          v369 = v368;
          v370 = v1402;
          if (v1402 >= v1464)
          {
            v373 = v1411;
            v374 = (v1402 - v1411) >> 2;
            v375 = v374 + 1;
            if ((unint64_t)(v374 + 1) >> 62)
              goto LABEL_2202;
            if ((v1464 - v1411) >> 1 > v375)
              v375 = (v1464 - v1411) >> 1;
            if ((unint64_t)(v1464 - v1411) >= 0x7FFFFFFFFFFFFFFCLL)
              v376 = 0x3FFFFFFFFFFFFFFFLL;
            else
              v376 = v375;
            if (v376)
            {
              if (v376 >> 62)
                goto LABEL_2204;
              v377 = (char *)operator new(4 * v376);
              v373 = v1411;
              v370 = v1402;
            }
            else
            {
              v377 = 0;
            }
            v372 = &v377[4 * v374];
            *(_DWORD *)v372 = v369;
            v371 = v372 + 4;
            while (v370 != v373)
            {
              v378 = *((_DWORD *)v370 - 1);
              v370 -= 4;
              *((_DWORD *)v372 - 1) = v378;
              v372 -= 4;
            }
            v1464 = &v377[4 * v376];
            if (v373)
              operator delete(v373);
          }
          else
          {
            *(_DWORD *)v1402 = v368;
            v371 = v1402 + 4;
            v372 = v1411;
          }
          v1411 = v372;
          *(_BYTE *)(a2 + 70) = 1;
          v380 = *(_QWORD *)(a2 + 40);
          v379 = *(_QWORD *)(a2 + 48);
          v381 = *(_QWORD *)(a2 + 32);
          v382 = __CFADD__(v353, 1);
          v383 = v353 + 1;
          if (v382 && !*(_BYTE *)(a2 + 80))
          {
LABEL_611:
            v389 = sub_1C4D6650C(a2, 109);
            sub_1C4D66288((uint64_t *)a2, 4, v389);
            v390 = *(_DWORD *)(v348 + 12);
            v65 = (uint64_t)v1471;
            if (!v390 && !*(_BYTE *)(a2 + 80))
            {
LABEL_623:
              v397 = sub_1C4D66580(a2, (unsigned __int16)v381 - (unsigned __int16)v379 + (unsigned __int16)v380);
              v398 = v397;
              if (v371 >= v1464)
              {
                v399 = v1411;
                v400 = (v371 - v1411) >> 2;
                v401 = v400 + 1;
                if ((unint64_t)(v400 + 1) >> 62)
                  goto LABEL_2202;
                if ((v1464 - v1411) >> 1 > v401)
                  v401 = (v1464 - v1411) >> 1;
                if ((unint64_t)(v1464 - v1411) >= 0x7FFFFFFFFFFFFFFCLL)
                  v402 = 0x3FFFFFFFFFFFFFFFLL;
                else
                  v402 = v401;
                if (v402)
                {
                  if (v402 >> 62)
                    goto LABEL_2204;
                  v403 = (char *)operator new(4 * v402);
                  v399 = v1411;
                }
                else
                {
                  v403 = 0;
                }
                v404 = &v403[4 * v400];
                *(_DWORD *)v404 = v398;
                v405 = v404 + 4;
                while (v371 != v399)
                {
                  v406 = *((_DWORD *)v371 - 1);
                  v371 -= 4;
                  *((_DWORD *)v404 - 1) = v406;
                  v404 -= 4;
                }
                v1402 = v405;
                v1464 = &v403[4 * v402];
                if (v399)
                  operator delete(v399);
                v1411 = v404;
              }
              else
              {
                *(_DWORD *)v371 = v397;
                v1402 = v371 + 4;
              }
              v105 = v1399;
              goto LABEL_642;
            }
            if (*(_QWORD *)(a2 + 72) <= 3uLL)
              *(_QWORD *)(a2 + 72) = 4;
            v391 = *(_QWORD *)(a2 + 48);
            v392 = *(_QWORD *)(a2 + 56);
            v393 = ((_BYTE)v391 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
            if (v391 - v392 < v393)
            {
              sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v391 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
              *(_QWORD *)(a2 + 48) -= v393;
            }
            else
            {
              v394 = v391 - v393;
              *(_QWORD *)(a2 + 48) = v394;
              if (!v393)
              {
LABEL_620:
                if ((unint64_t)(v394 - v392) <= 3)
                {
                  sub_1C4D663A4((uint64_t *)a2, 4uLL);
                  v394 = *(_QWORD *)(a2 + 48);
                }
                *(_DWORD *)(v394 - 4) = v390;
                v396 = v394 - 4;
                *(_QWORD *)(a2 + 48) = v396;
                sub_1C4D66288((uint64_t *)a2, 6, *(_DWORD *)(a2 + 32) - v396 + *(_DWORD *)(a2 + 40));
                goto LABEL_623;
              }
            }
            v395 = 0;
            do
              *(_BYTE *)(*(_QWORD *)(a2 + 48) + v395++) = 0;
            while (v393 != v395);
            v394 = *(_QWORD *)(a2 + 48);
            v392 = *(_QWORD *)(a2 + 56);
            goto LABEL_620;
          }
          if (*(_QWORD *)(a2 + 72) <= 3uLL)
            *(_QWORD *)(a2 + 72) = 4;
          v384 = ((_BYTE)v379 - ((_BYTE)v381 + (_BYTE)v380)) & 3;
          v385 = *(_QWORD *)(a2 + 56);
          if (v379 - v385 < v384)
          {
            sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v379 - ((_BYTE)v381 + (_BYTE)v380)) & 3);
            *(_QWORD *)(a2 + 48) -= v384;
          }
          else
          {
            v386 = v379 - v384;
            *(_QWORD *)(a2 + 48) = v379 - v384;
            if ((((_BYTE)v379 - ((_BYTE)v381 + (_BYTE)v380)) & 3) == 0)
            {
LABEL_608:
              if ((unint64_t)(v386 - v385) <= 3)
              {
                sub_1C4D663A4((uint64_t *)a2, 4uLL);
                v386 = *(_QWORD *)(a2 + 48);
              }
              *(_DWORD *)(v386 - 4) = v383;
              v388 = v386 - 4;
              *(_QWORD *)(a2 + 48) = v388;
              sub_1C4D66288((uint64_t *)a2, 8, *(_DWORD *)(a2 + 32) - v388 + *(_DWORD *)(a2 + 40));
              goto LABEL_611;
            }
          }
          v387 = 0;
          do
            *(_BYTE *)(*(_QWORD *)(a2 + 48) + v387++) = 0;
          while (v384 != v387);
          v386 = *(_QWORD *)(a2 + 48);
          v385 = *(_QWORD *)(a2 + 56);
          goto LABEL_608;
        }
      }
      v366 = 0;
      do
        *(_BYTE *)(*(_QWORD *)(a2 + 48) + v366++) = 0;
      while (v364 != v366);
      v365 = *(_QWORD *)(a2 + 48);
      v363 = *(_QWORD *)(a2 + 56);
      goto LABEL_578;
    }
    if (*(_QWORD *)(a2 + 72) <= 3uLL)
      *(_QWORD *)(a2 + 72) = 4;
    v355 = ((_BYTE)v349 - ((_BYTE)v351 + (_BYTE)v350)) & 3;
    v356 = *(_QWORD *)(a2 + 56);
    if (v349 - v356 < v355)
    {
      sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v349 - ((_BYTE)v351 + (_BYTE)v350)) & 3);
      *(_QWORD *)(a2 + 48) -= v355;
    }
    else
    {
      v357 = v349 - v355;
      *(_QWORD *)(a2 + 48) = v349 - v355;
      if ((((_BYTE)v349 - ((_BYTE)v351 + (_BYTE)v350)) & 3) == 0)
      {
LABEL_566:
        if ((unint64_t)(v357 - v356) <= 3)
        {
          sub_1C4D663A4((uint64_t *)a2, 4uLL);
          v357 = *(_QWORD *)(a2 + 48);
        }
        *(_DWORD *)(v357 - 4) = v353;
        v359 = v357 - 4;
        *(_QWORD *)(a2 + 48) = v359;
        sub_1C4D66288((uint64_t *)a2, 8, *(_DWORD *)(a2 + 32) - v359 + *(_DWORD *)(a2 + 40));
        goto LABEL_569;
      }
    }
    v358 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(a2 + 48) + v358++) = 0;
    while (v355 != v358);
    v357 = *(_QWORD *)(a2 + 48);
    v356 = *(_QWORD *)(a2 + 56);
    goto LABEL_566;
  }
LABEL_541:
  v342 = v1480;
  v1480 = 0;
  if (v342)
    (*(void (**)(_QWORD *))(*v342 + 8))(v342);
  v343 = v1482;
  v1482 = 0;
  if (v343)
    (*(void (**)(void *))(*(_QWORD *)v343 + 8))(v343);
  v344 = __dst.__r_.__value_.__l.__size_;
  __dst.__r_.__value_.__l.__size_ = 0;
  if (v344)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v344 + 8))(v344);
  v345 = __dst.__r_.__value_.__r.__words[0];
  __dst.__r_.__value_.__r.__words[0] = 0;
  if (v345)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v345 + 8))(v345);
  v346 = v1394;
  if (v1394 <= v105)
    v346 = v105;
  v1357 = v346;
  v1482 = 0;
  *(_QWORD *)v1483 = 0;
  v1484 = 0;
  if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)*v1409 + 912))(*v1409) & 1) != 0)
  {
    v347 = -1;
    if ((**(unsigned int (***)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v65)(v65, 2, 0xFFFFFFFFLL, 1, 1) != -1)v347 = (**(uint64_t (***)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v65)(v65, 2, 0xFFFFFFFFLL, 1, 1);
  }
  else
  {
    v347 = -1;
  }
  v407 = sub_1C55891D0(2, v65);
  if (v407 < v347)
    v347 = v407;
  v408 = sub_1C55891D0(4, v65);
  if (v408 < v347)
    v347 = v408;
  v409 = sub_1C55891D0(2, v65);
  if (v409 == -1)
    v410 = 0;
  else
    v410 = v409;
  v1371 = v347;
  v1356 = v410;
  if (v347 != -1)
    v410 = v347;
  v1421 = v410;
  v411 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v65 + 336))(v65);
  v1385 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v411 + 24))(v411, 2);
  v1380 = sub_1C558B448(2, v65);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v65 + 160))(v65, 2) & 1) != 0)
  {
    v412 = 0;
    v413 = 0;
    goto LABEL_750;
  }
  (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v65 + 128))(&__dst, v65, 2);
  (*(void (**)(_QWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v65 + 136))(&v1480, v65, 2);
  v414 = v1480;
  v1354 = __dst.__r_.__value_.__r.__words[0];
  if (__dst.__r_.__value_.__r.__words[0])
  {
    (*(void (**)(std::string *__return_ptr))(*(_QWORD *)__dst.__r_.__value_.__l.__data_ + 16))(&__dst);
    v415 = __dst.__r_.__value_.__r.__words[0];
  }
  else
  {
    v415 = 0;
  }
  v1352 = v414;
  (*(void (**)(std::string *__return_ptr, _QWORD *))(*v414 + 16))(&__dst, v414);
  v416 = __dst.__r_.__value_.__r.__words[0];
  v412 = 0;
  if (((*(uint64_t (**)(std::string::size_type, std::string::size_type))(*(_QWORD *)v415 + 24))(v415, __dst.__r_.__value_.__r.__words[0]) & 1) == 0)
  {
    v417 = 0;
    v418 = 0;
    v1391 = v416;
    v1395 = v415;
    while (1)
    {
      v1480 = 0;
      v1480 = *(_QWORD **)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v415 + 32))(v415);
      v419 = sub_1C558B5F8(a6, &v1480);
      v420 = (unsigned int *)v419;
      v421 = v1480[3];
      if (*(_BYTE *)(v421 + 8) != 17
        || (v422 = *(_QWORD *)(v419 - 8 * *(unsigned int *)(v419 + 8) + 8), *(_BYTE *)v422 == 1)
        && *(_BYTE *)(*(_QWORD *)(v422 + 128) + 16) == 16)
      {
        v423 = 1;
      }
      else
      {
        v423 = *(_DWORD *)(v421 + 32);
      }
      v424 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v65 + 400))(v65);
      if (v423)
        break;
      v413 = v417;
LABEL_745:
      v415 = v1395;
      (*(void (**)(std::string::size_type))(*(_QWORD *)v1395 + 40))(v1395);
      v416 = v1391;
      v417 = v413;
      v65 = (uint64_t)v1471;
      if (((*(uint64_t (**)(std::string::size_type, std::string::size_type))(*(_QWORD *)v415 + 24))(v415, v1391) & 1) != 0)goto LABEL_746;
    }
    v425 = 0;
    v426 = __ROR8__(v424, 32);
    v1440 = HIDWORD(v426);
    v1448 = v420;
    v1427 = v423;
    v1433 = v426 / v423 / v1385;
    while (1)
    {
      v1473[70] = 1;
      v428 = *((_QWORD *)v1473 + 5);
      v427 = *((_QWORD *)v1473 + 6);
      v429 = *((_QWORD *)v1473 + 4);
      v430 = v1440 + v1433 * v425;
      v431 = v430 - v1421;
      if (v430 == v1421 && v1473[80] == 0)
        goto LABEL_688;
      if (*((_QWORD *)v1473 + 9) <= 3uLL)
        *((_QWORD *)v1473 + 9) = 4;
      v433 = ((_BYTE)v427 - ((_BYTE)v429 + (_BYTE)v428)) & 3;
      v434 = *((_QWORD *)v1473 + 7);
      if (v427 - v434 < v433)
        break;
      v435 = v427 - v433;
      *((_QWORD *)v1473 + 6) = v427 - v433;
      if ((((_BYTE)v427 - ((_BYTE)v429 + (_BYTE)v428)) & 3) != 0)
        goto LABEL_682;
      v420 = v1448;
LABEL_685:
      if ((unint64_t)(v435 - v434) <= 3)
      {
        sub_1C4D663A4((uint64_t *)v1473, 4uLL);
        v435 = *((_QWORD *)v1473 + 6);
      }
      *(_DWORD *)(v435 - 4) = v431;
      v437 = v435 - 4;
      *((_QWORD *)v1473 + 6) = v437;
      sub_1C4D66288((uint64_t *)v1473, 8, *((_DWORD *)v1473 + 8) - v437 + *((_DWORD *)v1473 + 10));
LABEL_688:
      ((void (*)(_QWORD **, uint64_t, _QWORD *))(*v1471)[23])(v1471, 16, v1480);
      if (*(char *)(v1470 + 239) < 0)
      {
        sub_1C47EBC30(&__dst, *(void **)(v1470 + 216), *(_QWORD *)(v1470 + 224));
      }
      else
      {
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *v1458;
        __dst.__r_.__value_.__r.__words[2] = *(_QWORD *)(v1470 + 232);
      }
      if (std::string::compare(&__dst, 0, 4uLL, "agx1") && std::string::compare(&__dst, 0, 4uLL, "agx2"))
        std::string::compare(&__dst, 0, 4uLL, "agx3");
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      v438 = &v420[-2 * v420[2]];
      v439 = *((_QWORD *)v438 + 1);
      if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)v438 + 128) + 24) + 8) == 17)
      {
        if (*(_BYTE *)v439 != 1 || (v440 = *(_QWORD *)(v439 + 128), *(_BYTE *)(v440 + 16) != 16))
        {
          v441 = (_QWORD *)(*(_QWORD *)&v438[2 * v425 + 2]
                          - 8 * *(unsigned int *)(*(_QWORD *)&v438[2 * v425 + 2] + 8));
          v442 = *(_QWORD *)(*v441 + 128);
          v443 = (_QWORD *)(v442 + 24);
          if (*(_DWORD *)(v442 + 32) >= 0x41u)
            v443 = (_QWORD *)*v443;
          v444 = (_QWORD *)*v443;
          v445 = v441[1];
          goto LABEL_706;
        }
      }
      else
      {
        v440 = *(_QWORD *)(v439 + 128);
      }
      v446 = (_QWORD *)(v440 + 24);
      if (*(_DWORD *)(v440 + 32) >= 0x41u)
        v446 = (_QWORD *)*v446;
      v444 = (_QWORD *)*v446;
      v445 = *((_QWORD *)v438 + 2);
LABEL_706:
      v447 = *(_QWORD *)(v445 + 128);
      v448 = (_QWORD *)(v447 + 24);
      if (*(_DWORD *)(v447 + 32) >= 0x41u)
        v448 = (_QWORD *)*v448;
      v449 = *(_DWORD *)v448;
      if (v444 | v1473[80])
      {
        v451 = sub_1C4D6650C((uint64_t)v1473, (char)v444);
        sub_1C4D66288((uint64_t *)v1473, 4, v451);
        v450 = v1473[80];
      }
      else
      {
        v450 = 0;
      }
      if (!(v449 | v450))
        goto LABEL_724;
      if (*((_QWORD *)v1473 + 9) <= 3uLL)
        *((_QWORD *)v1473 + 9) = 4;
      v452 = *((_QWORD *)v1473 + 6);
      v453 = *((_QWORD *)v1473 + 7);
      v454 = ((_BYTE)v452 - (*((_DWORD *)v1473 + 8) + *((_DWORD *)v1473 + 10))) & 3;
      if (v452 - v453 < v454)
      {
        sub_1C4D663A4((uint64_t *)v1473, ((_BYTE)v452 - (*((_DWORD *)v1473 + 8) + *((_DWORD *)v1473 + 10))) & 3);
        *((_QWORD *)v1473 + 6) -= v454;
LABEL_718:
        v456 = 0;
        v420 = v1448;
        do
          *(_BYTE *)(*((_QWORD *)v1473 + 6) + v456++) = 0;
        while (v454 != v456);
        v455 = *((_QWORD *)v1473 + 6);
        v453 = *((_QWORD *)v1473 + 7);
        goto LABEL_721;
      }
      v455 = v452 - v454;
      *((_QWORD *)v1473 + 6) = v455;
      if (v454)
        goto LABEL_718;
      v420 = v1448;
LABEL_721:
      if ((unint64_t)(v455 - v453) <= 3)
      {
        sub_1C4D663A4((uint64_t *)v1473, 4uLL);
        v455 = *((_QWORD *)v1473 + 6);
      }
      *(_DWORD *)(v455 - 4) = v449;
      v457 = v455 - 4;
      *((_QWORD *)v1473 + 6) = v457;
      sub_1C4D66288((uint64_t *)v1473, 6, *((_DWORD *)v1473 + 8) - v457 + *((_DWORD *)v1473 + 10));
LABEL_724:
      v458 = sub_1C4D66580((uint64_t)v1473, (unsigned __int16)v429 - (unsigned __int16)v427 + (unsigned __int16)v428);
      v459 = v458;
      if (v417 >= v418)
      {
        v460 = (v417 - v412) >> 2;
        v461 = v460 + 1;
        if ((unint64_t)(v460 + 1) >> 62)
          goto LABEL_2202;
        if ((v418 - v412) >> 1 > v461)
          v461 = (v418 - v412) >> 1;
        if ((unint64_t)(v418 - v412) >= 0x7FFFFFFFFFFFFFFCLL)
          v462 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v462 = v461;
        if (v462)
        {
          if (v462 >> 62)
            goto LABEL_2204;
          v463 = (char *)operator new(4 * v462);
        }
        else
        {
          v463 = 0;
        }
        v464 = &v463[4 * v460];
        *(_DWORD *)v464 = v459;
        v413 = v464 + 4;
        while (v417 != v412)
        {
          v465 = *((_DWORD *)v417 - 1);
          v417 -= 4;
          *((_DWORD *)v464 - 1) = v465;
          v464 -= 4;
        }
        v418 = &v463[4 * v462];
        if (v412)
          operator delete(v412);
        v412 = v464;
      }
      else
      {
        *(_DWORD *)v417 = v458;
        v413 = v417 + 4;
      }
      ++v425;
      v417 = v413;
      if (v425 == v1427)
        goto LABEL_745;
    }
    sub_1C4D663A4((uint64_t *)v1473, ((_BYTE)v427 - ((_BYTE)v429 + (_BYTE)v428)) & 3);
    *((_QWORD *)v1473 + 6) -= v433;
LABEL_682:
    v436 = 0;
    v420 = v1448;
    do
      *(_BYTE *)(*((_QWORD *)v1473 + 6) + v436++) = 0;
    while (v433 != v436);
    v435 = *((_QWORD *)v1473 + 6);
    v434 = *((_QWORD *)v1473 + 7);
    goto LABEL_685;
  }
  v413 = 0;
LABEL_746:
  if (v416)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v416 + 8))(v416);
  (*(void (**)(std::string::size_type))(*(_QWORD *)v415 + 8))(v415);
  (*(void (**)(_QWORD *))(*v1352 + 8))(v1352);
  v105 = v1399;
  a2 = (uint64_t)v1473;
  if (v1354)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v1354 + 8))(v1354);
LABEL_750:
  v466 = sub_1C55891D0(4, v65);
  if (v466 == -1)
    v467 = 0;
  else
    v467 = v466;
  v468 = v1371;
  v1355 = v467;
  if (v1371 == -1)
    v468 = v467;
  v1428 = v468;
  v469 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v65 + 336))(v65);
  v470 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v469 + 24))(v469, 3);
  v1396 = sub_1C558B448(4, v65);
  v1392 = v470;
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v65 + 160))(v65, 4) & 1) != 0)
  {
    v471 = 0;
    v472 = 0;
    goto LABEL_765;
  }
  (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v65 + 128))(&__dst, v65, 4);
  (*(void (**)(_QWORD **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v65 + 136))(&v1480, v65, 4);
  v473 = v1480;
  v1353 = __dst.__r_.__value_.__r.__words[0];
  if (__dst.__r_.__value_.__r.__words[0])
  {
    (*(void (**)(std::string *__return_ptr))(*(_QWORD *)__dst.__r_.__value_.__l.__data_ + 16))(&__dst);
    v474 = __dst.__r_.__value_.__r.__words[0];
  }
  else
  {
    v474 = 0;
  }
  v1351 = v473;
  (*(void (**)(std::string *__return_ptr, _QWORD *))(*v473 + 16))(&__dst, v473);
  v475 = __dst.__r_.__value_.__r.__words[0];
  v471 = 0;
  if (((*(uint64_t (**)(std::string::size_type, std::string::size_type))(*(_QWORD *)v474 + 24))(v474, __dst.__r_.__value_.__r.__words[0]) & 1) == 0)
  {
    v479 = 0;
    v1434 = 0;
    v1422 = v475;
    while (1)
    {
      v1480 = 0;
      v1480 = *(_QWORD **)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v474 + 32))(v474);
      v480 = sub_1C558B5F8(a6, &v1480);
      v481 = (*(uint64_t (**)(uint64_t, _QWORD *))(*(_QWORD *)v65 + 400))(v65, v1480);
      *(_BYTE *)(a2 + 70) = 1;
      v482 = *(_QWORD *)(a2 + 48);
      v1441 = *(_QWORD *)(a2 + 32);
      v1449 = *(void **)(a2 + 40);
      v483 = v481 - v1428;
      if (v481 == v1428 && *(_BYTE *)(a2 + 80) == 0)
        goto LABEL_788;
      if (*(_QWORD *)(a2 + 72) <= 3uLL)
        *(_QWORD *)(a2 + 72) = 4;
      v485 = ((_BYTE)v482 - ((_BYTE)v1441 + (_BYTE)v1449)) & 3;
      v486 = *(_QWORD *)(a2 + 56);
      if (v482 - v486 < v485)
        break;
      v487 = v482 - v485;
      *(_QWORD *)(a2 + 48) = v482 - v485;
      if ((((_BYTE)v482 - ((_BYTE)v1441 + (_BYTE)v1449)) & 3) != 0)
        goto LABEL_782;
LABEL_785:
      v65 = (uint64_t)v1471;
      if ((unint64_t)(v487 - v486) <= 3)
      {
        sub_1C4D663A4((uint64_t *)a2, 4uLL);
        v487 = *(_QWORD *)(a2 + 48);
      }
      *(_DWORD *)(v487 - 4) = v483;
      v489 = v487 - 4;
      *(_QWORD *)(a2 + 48) = v489;
      sub_1C4D66288((uint64_t *)a2, 8, *(_DWORD *)(a2 + 32) - v489 + *(_DWORD *)(a2 + 40));
LABEL_788:
      (*(void (**)(uint64_t, uint64_t, _QWORD *))(*(_QWORD *)v65 + 184))(v65, 16, v1480);
      if (*(char *)(v1470 + 239) < 0)
      {
        sub_1C47EBC30(&__dst, *(void **)(v1470 + 216), *(_QWORD *)(v1470 + 224));
      }
      else
      {
        *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *v1458;
        __dst.__r_.__value_.__r.__words[2] = *(_QWORD *)(v1470 + 232);
      }
      if (!std::string::compare(&__dst, 0, 4uLL, "agx1"))
      {
        v490 = 27;
      }
      else if (!std::string::compare(&__dst, 0, 4uLL, "agx2"))
      {
        v490 = 28;
      }
      else if (!std::string::compare(&__dst, 0, 4uLL, "agx3"))
      {
        v490 = 29;
      }
      else
      {
        v490 = 0;
      }
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
        operator delete(__dst.__r_.__value_.__l.__data_);
      v491 = (_QWORD *)(v480 - 8 * *(unsigned int *)(v480 + 8));
      if (v490 == 29
        && *(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v491 + 128) + 24) + 8) == 17
        && ((v492 = v491[1], *(_BYTE *)v492 != 1) || *(_BYTE *)(*(_QWORD *)(v492 + 128) + 16) != 16))
      {
        v514 = (_QWORD *)(v492 - 8 * *(unsigned int *)(v492 + 8));
        v515 = *(_QWORD *)(*v514 + 128);
        v516 = (_QWORD *)(v515 + 24);
        if (*(_DWORD *)(v515 + 32) >= 0x41u)
          v516 = (_QWORD *)*v516;
        v495 = (_QWORD *)*v516;
        v496 = v514[1];
      }
      else
      {
        v493 = *(_QWORD *)(v491[1] + 128);
        v494 = (_QWORD *)(v493 + 24);
        if (*(_DWORD *)(v493 + 32) >= 0x41u)
          v494 = (_QWORD *)*v494;
        v495 = (_QWORD *)*v494;
        v496 = v491[2];
      }
      v497 = *(_QWORD *)(v496 + 128);
      v498 = (_QWORD *)(v497 + 24);
      if (*(_DWORD *)(v497 + 32) >= 0x41u)
        v498 = (_QWORD *)*v498;
      v499 = *(_DWORD *)v498;
      if (v495 | *(_BYTE *)(a2 + 80))
      {
        v501 = sub_1C4D6650C(a2, (char)v495);
        sub_1C4D66288((uint64_t *)a2, 4, v501);
        v500 = *(unsigned __int8 *)(a2 + 80);
      }
      else
      {
        v500 = 0;
      }
      if (!(v499 | v500))
        goto LABEL_822;
      if (*(_QWORD *)(a2 + 72) <= 3uLL)
        *(_QWORD *)(a2 + 72) = 4;
      v502 = *(_QWORD *)(a2 + 48);
      v503 = *(_QWORD *)(a2 + 56);
      v504 = ((_BYTE)v502 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
      if (v502 - v503 < v504)
      {
        sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v502 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
        *(_QWORD *)(a2 + 48) -= v504;
LABEL_816:
        v506 = 0;
        do
          *(_BYTE *)(*(_QWORD *)(a2 + 48) + v506++) = 0;
        while (v504 != v506);
        v505 = *(_QWORD *)(a2 + 48);
        v503 = *(_QWORD *)(a2 + 56);
        goto LABEL_819;
      }
      v505 = v502 - v504;
      *(_QWORD *)(a2 + 48) = v505;
      if (v504)
        goto LABEL_816;
LABEL_819:
      if ((unint64_t)(v505 - v503) <= 3)
      {
        sub_1C4D663A4((uint64_t *)a2, 4uLL);
        v505 = *(_QWORD *)(a2 + 48);
      }
      *(_DWORD *)(v505 - 4) = v499;
      v507 = v505 - 4;
      *(_QWORD *)(a2 + 48) = v507;
      sub_1C4D66288((uint64_t *)a2, 6, *(_DWORD *)(a2 + 32) - v507 + *(_DWORD *)(a2 + 40));
LABEL_822:
      v508 = sub_1C4D66580(a2, (unsigned __int16)v1441 - (unsigned __int16)v482 + (unsigned __int16)v1449);
      v509 = v508;
      if (v479 >= v1434)
      {
        v510 = (v479 - v471) >> 2;
        v511 = v510 + 1;
        if ((unint64_t)(v510 + 1) >> 62)
          goto LABEL_2202;
        if ((v1434 - v471) >> 1 > v511)
          v511 = (v1434 - v471) >> 1;
        if ((unint64_t)(v1434 - v471) >= 0x7FFFFFFFFFFFFFFCLL)
          v512 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v512 = v511;
        if (v512)
        {
          if (v512 >> 62)
            goto LABEL_2204;
          v513 = (char *)operator new(4 * v512);
        }
        else
        {
          v513 = 0;
        }
        v517 = &v513[4 * v510];
        *(_DWORD *)v517 = v509;
        v472 = v517 + 4;
        if (v479 == v471)
        {
          v65 = (uint64_t)v1471;
        }
        else
        {
          v65 = (uint64_t)v1471;
          do
          {
            v518 = *((_DWORD *)v479 - 1);
            v479 -= 4;
            *((_DWORD *)v517 - 1) = v518;
            v517 -= 4;
          }
          while (v479 != v471);
        }
        v1434 = &v513[4 * v512];
        if (v471)
          operator delete(v471);
        v471 = v517;
      }
      else
      {
        *(_DWORD *)v479 = v508;
        v472 = v479 + 4;
        v65 = (uint64_t)v1471;
      }
      v475 = v1422;
      (*(void (**)(std::string::size_type))(*(_QWORD *)v474 + 40))(v474);
      v479 = v472;
      if (((*(uint64_t (**)(std::string::size_type, std::string::size_type))(*(_QWORD *)v474 + 24))(v474, v1422) & 1) != 0)goto LABEL_761;
    }
    sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v482 - ((_BYTE)v1441 + (_BYTE)v1449)) & 3);
    *(_QWORD *)(a2 + 48) -= v485;
LABEL_782:
    v488 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(a2 + 48) + v488++) = 0;
    while (v485 != v488);
    v487 = *(_QWORD *)(a2 + 48);
    v486 = *(_QWORD *)(a2 + 56);
    goto LABEL_785;
  }
  v472 = 0;
LABEL_761:
  if (v475)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v475 + 8))(v475);
  (*(void (**)(std::string::size_type))(*(_QWORD *)v474 + 8))(v474);
  (*(void (**)(_QWORD *))(*v1351 + 8))(v1351);
  v105 = v1399;
  if (v1353)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v1353 + 8))(v1353);
LABEL_765:
  v476 = v1380;
  if (v1357 > v1380)
    v476 = v1357;
  if (v476 <= v1396)
    v477 = v1396;
  else
    v477 = v476;
  sub_1C558B8E4((char **)&v1482, *(char **)v1483, v412, v413, (v413 - v412) >> 2);
  sub_1C558B8E4((char **)&v1482, *(char **)v1483, v471, v472, (v472 - v471) >> 2);
  v478 = (*(unsigned int (**)(uint64_t))(*(_QWORD *)*v1409 + 912))(*v1409)
      && (**(unsigned int (***)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))v65)(v65, 2, 0xFFFFFFFFLL, 1, 1) != -1&& (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v65 + 592))(v65, 105) != 0;
  v519 = (v1396 - v1355) * v1392;
  if (v1380 <= v1396)
    v520 = v1396;
  else
    v520 = v1380;
  v521 = ((uint64_t (*)(_QWORD **))(*v1471)[42])(v1471);
  v522 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v521 + 24))(v521, 3);
  if (!v478)
  {
    v543 = v1356;
    goto LABEL_909;
  }
  v1459 = v522;
  *(_BYTE *)(a2 + 70) = 1;
  v523 = *(_DWORD *)(a2 + 32) - *(_DWORD *)(a2 + 48) + *(_DWORD *)(a2 + 40);
  v524 = ((uint64_t (*)(_QWORD **, uint64_t, uint64_t, uint64_t, uint64_t))**v1471)(v1471, 2, 0xFFFFFFFFLL, 1, 1);
  if (v524 != v1371 || *(_BYTE *)(a2 + 80))
  {
    if (*(_QWORD *)(a2 + 72) <= 3uLL)
      *(_QWORD *)(a2 + 72) = 4;
    v525 = *(_QWORD *)(a2 + 48);
    v526 = *(_QWORD *)(a2 + 56);
    v527 = ((_BYTE)v525 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
    if (v525 - v526 < v527)
    {
      sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v525 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
      *(_QWORD *)(a2 + 48) -= v527;
    }
    else
    {
      v528 = v525 - v527;
      *(_QWORD *)(a2 + 48) = v528;
      if (!v527)
      {
LABEL_864:
        if ((unint64_t)(v528 - v526) <= 3)
        {
          sub_1C4D663A4((uint64_t *)a2, 4uLL);
          v528 = *(_QWORD *)(a2 + 48);
        }
        *(_DWORD *)(v528 - 4) = v524 - v1371;
        v530 = v528 - 4;
        *(_QWORD *)(a2 + 48) = v530;
        sub_1C4D66288((uint64_t *)a2, 8, *(_DWORD *)(a2 + 32) - v530 + *(_DWORD *)(a2 + 40));
        goto LABEL_867;
      }
    }
    v529 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(a2 + 48) + v529++) = 0;
    while (v527 != v529);
    v528 = *(_QWORD *)(a2 + 48);
    v526 = *(_QWORD *)(a2 + 56);
    goto LABEL_864;
  }
LABEL_867:
  if (v520 <= (2 * v1459 - 1) / v1459 + v524)
    v520 = (2 * v1459 - 1) / v1459 + v524;
  v531 = sub_1C4D6650C(a2, 20);
  sub_1C4D66288((uint64_t *)a2, 4, v531);
  v532 = ((uint64_t (*)(_QWORD **, uint64_t, uint64_t, uint64_t, uint64_t))**v1471)(v1471, 4, 0xFFFFFFFFLL, 1, 1);
  if (!v532 && !*(_BYTE *)(a2 + 80))
    goto LABEL_881;
  if (*(_QWORD *)(a2 + 72) <= 3uLL)
    *(_QWORD *)(a2 + 72) = 4;
  v533 = *(_QWORD *)(a2 + 48);
  v534 = *(_QWORD *)(a2 + 56);
  v535 = ((_BYTE)v533 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
  if (v533 - v534 < v535)
  {
    sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v533 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
    *(_QWORD *)(a2 + 48) -= v535;
LABEL_875:
    v537 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(a2 + 48) + v537++) = 0;
    while (v535 != v537);
    v536 = *(_QWORD *)(a2 + 48);
    v534 = *(_QWORD *)(a2 + 56);
    goto LABEL_878;
  }
  v536 = v533 - v535;
  *(_QWORD *)(a2 + 48) = v536;
  if (v535)
    goto LABEL_875;
LABEL_878:
  if ((unint64_t)(v536 - v534) <= 3)
  {
    sub_1C4D663A4((uint64_t *)a2, 4uLL);
    v536 = *(_QWORD *)(a2 + 48);
  }
  *(_DWORD *)(v536 - 4) = v532;
  v538 = v536 - 4;
  *(_QWORD *)(a2 + 48) = v538;
  sub_1C4D66288((uint64_t *)a2, 6, *(_DWORD *)(a2 + 32) - v538 + *(_DWORD *)(a2 + 40));
LABEL_881:
  v539 = sub_1C4D66580(a2, v523);
  v540 = v539;
  v541 = *(char **)v1483;
  if (*(_QWORD *)v1483 >= (unint64_t)v1484)
  {
    v544 = (char *)v1482;
    v545 = (uint64_t)(*(_QWORD *)v1483 - (_QWORD)v1482) >> 2;
    v546 = v545 + 1;
    if ((unint64_t)(v545 + 1) >> 62)
      goto LABEL_2202;
    v547 = v1484 - (_BYTE *)v1482;
    if ((v1484 - (_BYTE *)v1482) >> 1 > v546)
      v546 = v547 >> 1;
    if ((unint64_t)v547 >= 0x7FFFFFFFFFFFFFFCLL)
      v548 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v548 = v546;
    if (v548)
    {
      if (v548 >> 62)
        goto LABEL_2204;
      v549 = (char *)operator new(4 * v548);
    }
    else
    {
      v549 = 0;
    }
    v554 = &v549[4 * v545];
    *(_DWORD *)v554 = v540;
    v542 = v554 + 4;
    while (v541 != v544)
    {
      v555 = *((_DWORD *)v541 - 1);
      v541 -= 4;
      *((_DWORD *)v554 - 1) = v555;
      v554 -= 4;
    }
    v1482 = v554;
    v1484 = &v549[4 * v548];
    if (v544)
      operator delete(v544);
  }
  else
  {
    **(_DWORD **)v1483 = v539;
    v542 = v541 + 4;
  }
  v105 = v1399;
  v543 = v1356;
  v519 += v1459;
  *(_QWORD *)v1483 = v542;
  v477 = v520;
LABEL_909:
  v556 = (v105 - v1453) * v1387;
  v557 = v519 + (v1380 - v543) * v1385;
  if (!v520)
    v557 = 0;
  v1442 = v557;
  if (v471)
  {
    operator delete(v471);
    v556 = (v105 - v1453) * v1387;
  }
  v1450 = v556;
  v1413 = v556 + v1358;
  v558 = v1471;
  if (v412)
    operator delete(v412);
  v559 = ((uint64_t (*)(_QWORD **, uint64_t))(*v1471)[22])(v1471, 17);
  v560 = v1409;
  if (!v559)
    goto LABEL_916;
  if (v559 == 1)
  {
    ((void (*)(std::string *__return_ptr, _QWORD **, uint64_t))(*v1471)[16])(&__dst, v1471, 17);
    v654 = *(_QWORD *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)__dst.__r_.__value_.__l.__data_
                                                                        + 32))(__dst.__r_.__value_.__r.__words[0]);
    v655 = __dst.__r_.__value_.__r.__words[0];
    __dst.__r_.__value_.__r.__words[0] = 0;
    if (v655)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v655 + 8))(v655);
    if (!v654)
      goto LABEL_916;
  }
  else
  {
    ((void (*)(std::string *__return_ptr, _QWORD **, uint64_t))(*v1471)[16])(&__dst, v1471, 17);
    v654 = *(_QWORD *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)__dst.__r_.__value_.__l.__data_
                                                                        + 32))(__dst.__r_.__value_.__r.__words[0]);
    v1344 = __dst.__r_.__value_.__r.__words[0];
    __dst.__r_.__value_.__r.__words[0] = 0;
    if (v1344)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v1344 + 8))(v1344);
    v560 = v1409;
    v558 = v1471;
    a2 = (uint64_t)v1473;
    if (!v654)
      goto LABEL_916;
  }
  v656 = ((uint64_t (*)(_QWORD **, uint64_t))(*v558)[50])(v558, v654);
  *(_BYTE *)(a2 + 70) = 1;
  v658 = *(_QWORD *)(a2 + 40);
  v657 = *(_QWORD *)(a2 + 48);
  v659 = *(_QWORD *)(a2 + 32);
  v660 = v659 - v657 + v658;
  if ((_DWORD)v656 != v1453 || *(_BYTE *)(a2 + 80) != 0)
  {
    if (*(_QWORD *)(a2 + 72) <= 3uLL)
      *(_QWORD *)(a2 + 72) = 4;
    v662 = ((_BYTE)v657 - ((_BYTE)v659 + (_BYTE)v658)) & 3;
    v663 = *(_QWORD *)(a2 + 56);
    if (v657 - v663 < v662)
    {
      sub_1C4D663A4((uint64_t *)a2, v662);
      *(_QWORD *)(a2 + 48) -= v662;
    }
    else
    {
      v664 = v657 - v662;
      *(_QWORD *)(a2 + 48) = v664;
      if (!v662)
      {
LABEL_1073:
        if ((unint64_t)(v664 - v663) <= 3)
        {
          sub_1C4D663A4((uint64_t *)a2, 4uLL);
          v664 = *(_QWORD *)(a2 + 48);
        }
        *(_DWORD *)(v664 - 4) = v656 - v1453;
        v666 = v664 - 4;
        *(_QWORD *)(a2 + 48) = v666;
        sub_1C4D66288((uint64_t *)a2, 8, *(_DWORD *)(a2 + 32) - v666 + *(_DWORD *)(a2 + 40));
        goto LABEL_1076;
      }
    }
    v665 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(a2 + 48) + v665++) = 0;
    while (v662 != v665);
    v664 = *(_QWORD *)(a2 + 48);
    v663 = *(_QWORD *)(a2 + 56);
    goto LABEL_1073;
  }
LABEL_1076:
  v667 = sub_1C4D6650C(a2, 94);
  sub_1C4D66288((uint64_t *)a2, 4, v667);
  if (*(_BYTE *)(a2 + 80))
  {
    if (*(_QWORD *)(a2 + 72) <= 3uLL)
      *(_QWORD *)(a2 + 72) = 4;
    v668 = *(_QWORD *)(a2 + 48);
    v669 = *(_QWORD *)(a2 + 56);
    v670 = ((_BYTE)v668 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
    if (v668 - v669 < v670)
    {
      sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v668 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
      *(_QWORD *)(a2 + 48) -= v670;
    }
    else
    {
      v671 = v668 - v670;
      *(_QWORD *)(a2 + 48) = v671;
      if (!v670)
      {
LABEL_1084:
        if ((unint64_t)(v671 - v669) <= 3)
        {
          sub_1C4D663A4((uint64_t *)a2, 4uLL);
          v671 = *(_QWORD *)(a2 + 48);
        }
        *(_DWORD *)(v671 - 4) = 0;
        v673 = v671 - 4;
        *(_QWORD *)(a2 + 48) = v673;
        sub_1C4D66288((uint64_t *)a2, 6, *(_DWORD *)(a2 + 32) - v673 + *(_DWORD *)(a2 + 40));
        goto LABEL_1087;
      }
    }
    v672 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(a2 + 48) + v672++) = 0;
    while (v670 != v672);
    v671 = *(_QWORD *)(a2 + 48);
    v669 = *(_QWORD *)(a2 + 56);
    goto LABEL_1084;
  }
LABEL_1087:
  v674 = sub_1C4D66580(a2, v660);
  v675 = v674;
  v676 = v1402;
  if (v1402 >= v1464)
  {
    v1294 = v1411;
    v1295 = (v1402 - v1411) >> 2;
    v1296 = v1295 + 1;
    if ((unint64_t)(v1295 + 1) >> 62)
LABEL_2202:
      abort();
    if ((v1464 - v1411) >> 1 > v1296)
      v1296 = (v1464 - v1411) >> 1;
    if ((unint64_t)(v1464 - v1411) >= 0x7FFFFFFFFFFFFFFCLL)
      v1296 = 0x3FFFFFFFFFFFFFFFLL;
    if (v1296)
    {
      if (v1296 >> 62)
        goto LABEL_2204;
      v1297 = (char *)operator new(4 * v1296);
      v1294 = v1411;
      v676 = v1402;
    }
    else
    {
      v1297 = 0;
    }
    v1316 = &v1297[4 * v1295];
    *(_DWORD *)v1316 = v675;
    v677 = v1316 + 4;
    while (v676 != v1294)
    {
      v1317 = *((_DWORD *)v676 - 1);
      v676 -= 4;
      *((_DWORD *)v1316 - 1) = v1317;
      v1316 -= 4;
    }
    if (v1294)
      operator delete(v1294);
    v1411 = v1316;
  }
  else
  {
    *(_DWORD *)v1402 = v674;
    v677 = v1402 + 4;
  }
  if (v477 <= v656)
    v477 = v656;
  v1413 += HIDWORD(v656);
  v1450 += HIDWORD(v656);
  v1402 = v677;
  v560 = v1409;
LABEL_916:
  if (!((uint64_t (*)(_QWORD **))(*v558)[39])(v558))
  {
    v571 = 0;
    v573 = 0;
    v1477 = 0;
    goto LABEL_1094;
  }
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)*v560 + 920))(*v560, v560[39], a5)
    && (((uint64_t (*)(_QWORD **))(*v558)[39])(v558) & 3) != 0)
  {
    v561 = ((uint64_t (*)(_QWORD **))(*v558)[39])(v558) | 0xFFFFFFFC;
    do
    {
      ((void (*)(_QWORD **, _QWORD))(*v558)[41])(v558, 0);
      v382 = __CFADD__(v561++, 1);
    }
    while (!v382);
  }
  v562 = ((uint64_t (*)(_QWORD **, uint64_t, _QWORD, uint64_t, uint64_t))**v558)(v558, 7, 0, 1, 3);
  v563 = v562
       / ((unsigned int (*)(_QWORD **, uint64_t, _QWORD, uint64_t, uint64_t))**v558)(v558, 6, 0, 1, 1);
  v564 = 4 * ((uint64_t (*)(_QWORD **))(*v558)[39])(v558);
  v565 = v564
       / ((unsigned int (*)(_QWORD **, uint64_t, _QWORD, uint64_t, uint64_t))**v558)(v558, 6, 0, 1, 1);
  v566 = v558;
  v567 = v565 - v563;
  v568 = ((uint64_t (*)(_QWORD **))(*v566)[44])(v566) + v565 - v563;
  v569 = ((uint64_t (*)(_QWORD **))(*v566)[44])(v566);
  if (v568 > v477)
    v477 = v568;
  if ((v1363 - 27) > 2)
  {
    *(_BYTE *)(a2 + 70) = 1;
    v574 = *(_QWORD *)(a2 + 40);
    v575 = *(_QWORD *)(a2 + 48);
    v576 = *(_QWORD *)(a2 + 32);
    if ((_DWORD)v565 == v563 && *(_BYTE *)(a2 + 80) == 0)
      goto LABEL_944;
    if (*(_QWORD *)(a2 + 72) <= 3uLL)
      *(_QWORD *)(a2 + 72) = 4;
    v578 = ((_BYTE)v575 - ((_BYTE)v576 + (_BYTE)v574)) & 3;
    v579 = *(_QWORD *)(a2 + 56);
    if (v575 - v579 < v578)
    {
      sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v575 - ((_BYTE)v576 + (_BYTE)v574)) & 3);
      *(_QWORD *)(a2 + 48) -= v578;
    }
    else
    {
      v580 = v575 - v578;
      *(_QWORD *)(a2 + 48) = v575 - v578;
      if ((((_BYTE)v575 - ((_BYTE)v576 + (_BYTE)v574)) & 3) == 0)
      {
LABEL_941:
        if ((unint64_t)(v580 - v579) <= 3)
        {
          sub_1C4D663A4((uint64_t *)a2, 4uLL);
          v580 = *(_QWORD *)(a2 + 48);
        }
        *(_DWORD *)(v580 - 4) = v567;
        v582 = v580 - 4;
        *(_QWORD *)(a2 + 48) = v582;
        sub_1C4D66288((uint64_t *)a2, 8, *(_DWORD *)(a2 + 32) - v582 + *(_DWORD *)(a2 + 40));
LABEL_944:
        if (!*(_QWORD *)(a2 + 72))
          *(_QWORD *)(a2 + 72) = 1;
        v583 = *(_QWORD *)(a2 + 48);
        v558 = v1471;
        if (v583 == *(_QWORD *)(a2 + 56))
        {
          sub_1C4D663A4((uint64_t *)a2, 1uLL);
          v583 = *(_QWORD *)(a2 + 48);
        }
        v584 = v576 - v575 + v574;
        *(_QWORD *)(a2 + 48) = v583 - 1;
        *(_BYTE *)(v583 - 1) = 6;
        sub_1C4D66288((uint64_t *)a2, 4, *(_DWORD *)(a2 + 32) - *(_DWORD *)(a2 + 48) + *(_DWORD *)(a2 + 40));
        if (!v569 && !*(_BYTE *)(a2 + 80))
        {
LABEL_960:
          v591 = ((uint64_t (*)(_QWORD **, uint64_t, _QWORD, uint64_t, uint64_t))**v1471)(v1471, 7, 0, 1, 3);
          v592 = ((uint64_t (*)(_QWORD **, uint64_t, _QWORD, uint64_t, uint64_t))**v1471)(v1471, 6, 0, 1, 1);
          if (v592 > v591 && *(_BYTE *)(a2 + 80) == 0)
          {
LABEL_984:
            v607 = sub_1C4D66580(a2, v584);
            v571 = (char *)operator new(4uLL);
            *(_DWORD *)v571 = v607;
            v573 = v571 + 4;
            v1477 = v571 + 4;
            goto LABEL_1094;
          }
          if (*(_QWORD *)(a2 + 72) <= 3uLL)
            *(_QWORD *)(a2 + 72) = 4;
          v594 = *(_QWORD *)(a2 + 48);
          v595 = *(_QWORD *)(a2 + 56);
          v596 = ((_BYTE)v594 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
          if (v594 - v595 < v596)
          {
            sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v594 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
            *(_QWORD *)(a2 + 48) -= v596;
          }
          else
          {
            v597 = v594 - v596;
            *(_QWORD *)(a2 + 48) = v597;
            if (!v596)
              goto LABEL_971;
          }
          v598 = 0;
          do
            *(_BYTE *)(*(_QWORD *)(a2 + 48) + v598++) = 0;
          while (v596 != v598);
          v597 = *(_QWORD *)(a2 + 48);
          v595 = *(_QWORD *)(a2 + 56);
LABEL_971:
          v599 = v591 / v592;
          if ((unint64_t)(v597 - v595) <= 3)
          {
            sub_1C4D663A4((uint64_t *)a2, 4uLL);
            v597 = *(_QWORD *)(a2 + 48);
          }
          *(_DWORD *)(v597 - 4) = v599;
          v600 = v597 - 4;
          *(_QWORD *)(a2 + 48) = v600;
          sub_1C4D66288((uint64_t *)a2, 12, *(_DWORD *)(a2 + 32) - v600 + *(_DWORD *)(a2 + 40));
          if (!*(_BYTE *)(a2 + 80))
            goto LABEL_984;
          if (*(_QWORD *)(a2 + 72) <= 3uLL)
            *(_QWORD *)(a2 + 72) = 4;
          v601 = *(_QWORD *)(a2 + 48);
          v602 = *(_QWORD *)(a2 + 56);
          v603 = ((_BYTE)v601 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
          if (v601 - v602 < v603)
          {
            sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v601 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
            *(_QWORD *)(a2 + 48) -= v603;
          }
          else
          {
            v604 = v601 - v603;
            *(_QWORD *)(a2 + 48) = v604;
            if (!v603)
            {
LABEL_981:
              if ((unint64_t)(v604 - v602) <= 3)
              {
                sub_1C4D663A4((uint64_t *)a2, 4uLL);
                v604 = *(_QWORD *)(a2 + 48);
              }
              *(_DWORD *)(v604 - 4) = 0;
              v606 = v604 - 4;
              *(_QWORD *)(a2 + 48) = v606;
              sub_1C4D66288((uint64_t *)a2, 6, *(_DWORD *)(a2 + 32) - v606 + *(_DWORD *)(a2 + 40));
              goto LABEL_984;
            }
          }
          v605 = 0;
          do
            *(_BYTE *)(*(_QWORD *)(a2 + 48) + v605++) = 0;
          while (v603 != v605);
          v604 = *(_QWORD *)(a2 + 48);
          v602 = *(_QWORD *)(a2 + 56);
          goto LABEL_981;
        }
        if (*(_QWORD *)(a2 + 72) <= 3uLL)
          *(_QWORD *)(a2 + 72) = 4;
        v585 = *(_QWORD *)(a2 + 48);
        v586 = *(_QWORD *)(a2 + 56);
        v587 = ((_BYTE)v585 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
        if (v585 - v586 < v587)
        {
          sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v585 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
          *(_QWORD *)(a2 + 48) -= v587;
        }
        else
        {
          v588 = v585 - v587;
          *(_QWORD *)(a2 + 48) = v588;
          if (!v587)
          {
LABEL_957:
            if ((unint64_t)(v588 - v586) <= 3)
            {
              sub_1C4D663A4((uint64_t *)a2, 4uLL);
              v588 = *(_QWORD *)(a2 + 48);
            }
            *(_DWORD *)(v588 - 4) = v569;
            v590 = v588 - 4;
            *(_QWORD *)(a2 + 48) = v590;
            sub_1C4D66288((uint64_t *)a2, 10, *(_DWORD *)(a2 + 32) - v590 + *(_DWORD *)(a2 + 40));
            goto LABEL_960;
          }
        }
        v589 = 0;
        do
          *(_BYTE *)(*(_QWORD *)(a2 + 48) + v589++) = 0;
        while (v587 != v589);
        v588 = *(_QWORD *)(a2 + 48);
        v586 = *(_QWORD *)(a2 + 56);
        goto LABEL_957;
      }
    }
    v581 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(a2 + 48) + v581++) = 0;
    while (v578 != v581);
    v580 = *(_QWORD *)(a2 + 48);
    v579 = *(_QWORD *)(a2 + 56);
    goto LABEL_941;
  }
  v570 = ((uint64_t (*)(_QWORD **, uint64_t))(*v566)[22])(v566, 24);
  if (!v570)
  {
    v571 = 0;
    v572 = 0;
    goto LABEL_927;
  }
  if (v570 == 1)
  {
    ((void (*)(std::string *__return_ptr, _QWORD **, uint64_t))(*v1471)[16])(&__dst, v1471, 24);
    v572 = *(char **)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)__dst.__r_.__value_.__l.__data_
                                                                       + 32))(__dst.__r_.__value_.__r.__words[0]);
    v1298 = __dst.__r_.__value_.__r.__words[0];
    __dst.__r_.__value_.__r.__words[0] = 0;
    if (v1298)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v1298 + 8))(v1298);
    v1299 = v477;
    if (v572)
      goto LABEL_2114;
  }
  else
  {
    v1299 = v477;
    ((void (*)(std::string *__return_ptr, _QWORD **, uint64_t))(*v1471)[16])(&__dst, v1471, 24);
    v572 = *(char **)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)__dst.__r_.__value_.__l.__data_
                                                                       + 32))(__dst.__r_.__value_.__r.__words[0]);
    v1347 = __dst.__r_.__value_.__r.__words[0];
    __dst.__r_.__value_.__r.__words[0] = 0;
    if (v1347)
      (*(void (**)(std::string::size_type))(*(_QWORD *)v1347 + 8))(v1347);
    a2 = (uint64_t)v1473;
    if (v572)
    {
LABEL_2114:
      v1300 = ((uint64_t (*)(_QWORD **))(*v1471)[42])(v1471);
      v1469 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v1300 + 24))(v1300, 10);
      v1301 = ((uint64_t (*)(_QWORD **, char *))(*v1471)[50])(v1471, v572);
      *(_BYTE *)(a2 + 70) = 1;
      v1302 = *(_DWORD *)(a2 + 32);
      v1303 = *(_QWORD *)(a2 + 48);
      v1304 = *(_DWORD *)(a2 + 40);
      if (!*(_QWORD *)(a2 + 72))
        *(_QWORD *)(a2 + 72) = 1;
      v1479 = v1301;
      v1305 = HIDWORD(v1301);
      v1306 = v1303;
      if (v1303 == *(_QWORD *)(a2 + 56))
      {
        sub_1C4D663A4((uint64_t *)a2, 1uLL);
        v1306 = *(_QWORD *)(a2 + 48);
      }
      v1307 = v1302 - v1303;
      *(_QWORD *)(a2 + 48) = v1306 - 1;
      *(_BYTE *)(v1306 - 1) = 9;
      sub_1C4D66288((uint64_t *)a2, 4, *(_DWORD *)(a2 + 32) - *(_DWORD *)(a2 + 48) + *(_DWORD *)(a2 + 40));
      v1308 = *(unsigned __int8 *)(a2 + 80);
      if (!*(_BYTE *)(a2 + 80))
      {
LABEL_2129:
        v1315 = v1307 + v1304;
        if (v1469 > v1305 && !v1308)
        {
          v477 = v1299;
          goto LABEL_2158;
        }
        v477 = v1299;
        if (*(_QWORD *)(a2 + 72) <= 3uLL)
          *(_QWORD *)(a2 + 72) = 4;
        v1318 = *(_QWORD *)(a2 + 48);
        v1319 = *(_QWORD *)(a2 + 56);
        v1320 = ((_BYTE)v1318 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
        if (v1318 - v1319 < v1320)
        {
          sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v1318 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
          *(_QWORD *)(a2 + 48) -= v1320;
        }
        else
        {
          v1321 = v1318 - v1320;
          *(_QWORD *)(a2 + 48) = v1321;
          if (!v1320)
          {
LABEL_2155:
            if ((unint64_t)(v1321 - v1319) <= 3)
            {
              sub_1C4D663A4((uint64_t *)a2, 4uLL);
              v1321 = *(_QWORD *)(a2 + 48);
            }
            *(_DWORD *)(v1321 - 4) = v1305 / v1469;
            v1323 = v1321 - 4;
            *(_QWORD *)(a2 + 48) = v1323;
            sub_1C4D66288((uint64_t *)a2, 8, *(_DWORD *)(a2 + 32) - v1323 + *(_DWORD *)(a2 + 40));
            v1308 = *(unsigned __int8 *)(a2 + 80);
LABEL_2158:
            if (!(v1479 | v1308))
            {
LABEL_2179:
              v1336 = sub_1C4D66580(a2, v1315);
              v571 = (char *)operator new(4uLL);
              *(_DWORD *)v571 = v1336;
              v572 = v571 + 4;
              goto LABEL_927;
            }
            if (*(_QWORD *)(a2 + 72) <= 3uLL)
              *(_QWORD *)(a2 + 72) = 4;
            v1324 = *(_QWORD *)(a2 + 48);
            v1325 = *(_QWORD *)(a2 + 56);
            v1326 = ((_BYTE)v1324 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
            if (v1324 - v1325 < v1326)
            {
              sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v1324 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
              *(_QWORD *)(a2 + 48) -= v1326;
            }
            else
            {
              v1327 = v1324 - v1326;
              *(_QWORD *)(a2 + 48) = v1327;
              if (!v1326)
                goto LABEL_2166;
            }
            v1328 = 0;
            do
              *(_BYTE *)(*(_QWORD *)(a2 + 48) + v1328++) = 0;
            while (v1326 != v1328);
            v1327 = *(_QWORD *)(a2 + 48);
            v1325 = *(_QWORD *)(a2 + 56);
LABEL_2166:
            if ((unint64_t)(v1327 - v1325) <= 3)
            {
              sub_1C4D663A4((uint64_t *)a2, 4uLL);
              v1327 = *(_QWORD *)(a2 + 48);
            }
            *(_DWORD *)(v1327 - 4) = v1479;
            v1329 = v1327 - 4;
            *(_QWORD *)(a2 + 48) = v1329;
            sub_1C4D66288((uint64_t *)a2, 10, *(_DWORD *)(a2 + 32) - v1329 + *(_DWORD *)(a2 + 40));
            if (!*(_BYTE *)(a2 + 80))
              goto LABEL_2179;
            if (*(_QWORD *)(a2 + 72) <= 3uLL)
              *(_QWORD *)(a2 + 72) = 4;
            v1330 = *(_QWORD *)(a2 + 48);
            v1331 = *(_QWORD *)(a2 + 56);
            v1332 = ((_BYTE)v1330 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
            if (v1330 - v1331 < v1332)
            {
              sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v1330 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
              *(_QWORD *)(a2 + 48) -= v1332;
            }
            else
            {
              v1333 = v1330 - v1332;
              *(_QWORD *)(a2 + 48) = v1333;
              if (!v1332)
              {
LABEL_2176:
                if ((unint64_t)(v1333 - v1331) <= 3)
                {
                  sub_1C4D663A4((uint64_t *)a2, 4uLL);
                  v1333 = *(_QWORD *)(a2 + 48);
                }
                *(_DWORD *)(v1333 - 4) = 0;
                v1335 = v1333 - 4;
                *(_QWORD *)(a2 + 48) = v1335;
                sub_1C4D66288((uint64_t *)a2, 12, *(_DWORD *)(a2 + 32) - v1335 + *(_DWORD *)(a2 + 40));
                goto LABEL_2179;
              }
            }
            v1334 = 0;
            do
              *(_BYTE *)(*(_QWORD *)(a2 + 48) + v1334++) = 0;
            while (v1332 != v1334);
            v1333 = *(_QWORD *)(a2 + 48);
            v1331 = *(_QWORD *)(a2 + 56);
            goto LABEL_2176;
          }
        }
        v1322 = 0;
        do
          *(_BYTE *)(*(_QWORD *)(a2 + 48) + v1322++) = 0;
        while (v1320 != v1322);
        v1321 = *(_QWORD *)(a2 + 48);
        v1319 = *(_QWORD *)(a2 + 56);
        goto LABEL_2155;
      }
      if (*(_QWORD *)(a2 + 72) <= 3uLL)
        *(_QWORD *)(a2 + 72) = 4;
      v1309 = *(_QWORD *)(a2 + 48);
      v1310 = *(_QWORD *)(a2 + 56);
      v1311 = ((_BYTE)v1309 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
      if (v1309 - v1310 < v1311)
      {
        sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v1309 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
        *(_QWORD *)(a2 + 48) -= v1311;
      }
      else
      {
        v1312 = v1309 - v1311;
        *(_QWORD *)(a2 + 48) = v1312;
        if (!v1311)
        {
LABEL_2126:
          if ((unint64_t)(v1312 - v1310) <= 3)
          {
            sub_1C4D663A4((uint64_t *)a2, 4uLL);
            v1312 = *(_QWORD *)(a2 + 48);
          }
          *(_DWORD *)(v1312 - 4) = 0;
          v1314 = v1312 - 4;
          *(_QWORD *)(a2 + 48) = v1314;
          sub_1C4D66288((uint64_t *)a2, 6, *(_DWORD *)(a2 + 32) - v1314 + *(_DWORD *)(a2 + 40));
          v1308 = *(unsigned __int8 *)(a2 + 80);
          goto LABEL_2129;
        }
      }
      v1313 = 0;
      do
        *(_BYTE *)(*(_QWORD *)(a2 + 48) + v1313++) = 0;
      while (v1311 != v1313);
      v1312 = *(_QWORD *)(a2 + 48);
      v1310 = *(_QWORD *)(a2 + 56);
      goto LABEL_2126;
    }
  }
  v571 = 0;
  v477 = v1299;
LABEL_927:
  if ((_DWORD)v565 == v563)
  {
    v573 = v572;
    v1477 = v572;
    v558 = v1471;
    goto LABEL_1094;
  }
  *(_BYTE *)(a2 + 70) = 1;
  v608 = *(_QWORD *)(a2 + 40);
  v609 = *(_QWORD *)(a2 + 48);
  v610 = *(_QWORD *)(a2 + 32);
  if (*(_QWORD *)(a2 + 72) <= 3uLL)
    *(_QWORD *)(a2 + 72) = 4;
  v611 = ((_BYTE)v609 - ((_BYTE)v610 + (_BYTE)v608)) & 3;
  v612 = *(_QWORD *)(a2 + 56);
  if (v609 - v612 < v611)
  {
    sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v609 - ((_BYTE)v610 + (_BYTE)v608)) & 3);
    *(_QWORD *)(a2 + 48) -= v611;
  }
  else
  {
    v613 = v609 - v611;
    *(_QWORD *)(a2 + 48) = v609 - v611;
    if ((((_BYTE)v609 - ((_BYTE)v610 + (_BYTE)v608)) & 3) == 0)
      goto LABEL_992;
  }
  v614 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(a2 + 48) + v614++) = 0;
  while (v611 != v614);
  v613 = *(_QWORD *)(a2 + 48);
  v612 = *(_QWORD *)(a2 + 56);
LABEL_992:
  if ((unint64_t)(v613 - v612) <= 3)
  {
    sub_1C4D663A4((uint64_t *)a2, 4uLL);
    v613 = *(_QWORD *)(a2 + 48);
  }
  *(_DWORD *)(v613 - 4) = v567;
  v615 = v613 - 4;
  *(_QWORD *)(a2 + 48) = v615;
  sub_1C4D66288((uint64_t *)a2, 8, *(_DWORD *)(a2 + 32) - v615 + *(_DWORD *)(a2 + 40));
  if (!*(_QWORD *)(a2 + 72))
    *(_QWORD *)(a2 + 72) = 1;
  v616 = *(_QWORD *)(a2 + 48);
  v558 = v1471;
  if (v616 == *(_QWORD *)(a2 + 56))
  {
    sub_1C4D663A4((uint64_t *)a2, 1uLL);
    v616 = *(_QWORD *)(a2 + 48);
  }
  v617 = v610 - v609 + v608;
  *(_QWORD *)(a2 + 48) = v616 - 1;
  *(_BYTE *)(v616 - 1) = 6;
  sub_1C4D66288((uint64_t *)a2, 4, *(_DWORD *)(a2 + 32) - *(_DWORD *)(a2 + 48) + *(_DWORD *)(a2 + 40));
  if (v569 || *(_BYTE *)(a2 + 80))
  {
    if (*(_QWORD *)(a2 + 72) <= 3uLL)
      *(_QWORD *)(a2 + 72) = 4;
    v618 = *(_QWORD *)(a2 + 48);
    v619 = *(_QWORD *)(a2 + 56);
    v620 = ((_BYTE)v618 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
    if (v618 - v619 < v620)
    {
      sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v618 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
      *(_QWORD *)(a2 + 48) -= v620;
    }
    else
    {
      v621 = v618 - v620;
      *(_QWORD *)(a2 + 48) = v621;
      if (!v620)
      {
LABEL_1007:
        if ((unint64_t)(v621 - v619) <= 3)
        {
          sub_1C4D663A4((uint64_t *)a2, 4uLL);
          v621 = *(_QWORD *)(a2 + 48);
        }
        *(_DWORD *)(v621 - 4) = v569;
        v623 = v621 - 4;
        *(_QWORD *)(a2 + 48) = v623;
        sub_1C4D66288((uint64_t *)a2, 10, *(_DWORD *)(a2 + 32) - v623 + *(_DWORD *)(a2 + 40));
        goto LABEL_1010;
      }
    }
    v622 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(a2 + 48) + v622++) = 0;
    while (v620 != v622);
    v621 = *(_QWORD *)(a2 + 48);
    v619 = *(_QWORD *)(a2 + 56);
    goto LABEL_1007;
  }
LABEL_1010:
  v624 = ((uint64_t (*)(_QWORD **, uint64_t, _QWORD, uint64_t, uint64_t))**v1471)(v1471, 7, 0, 1, 3);
  v625 = ((uint64_t (*)(_QWORD **, uint64_t, _QWORD, uint64_t, uint64_t))**v1471)(v1471, 6, 0, 1, 1);
  if (v625 > v624 && *(_BYTE *)(a2 + 80) == 0)
    goto LABEL_1034;
  if (*(_QWORD *)(a2 + 72) <= 3uLL)
    *(_QWORD *)(a2 + 72) = 4;
  v627 = *(_QWORD *)(a2 + 48);
  v628 = *(_QWORD *)(a2 + 56);
  v629 = ((_BYTE)v627 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
  if (v627 - v628 < v629)
  {
    sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v627 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
    *(_QWORD *)(a2 + 48) -= v629;
  }
  else
  {
    v630 = v627 - v629;
    *(_QWORD *)(a2 + 48) = v630;
    if (!v629)
      goto LABEL_1021;
  }
  v631 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(a2 + 48) + v631++) = 0;
  while (v629 != v631);
  v630 = *(_QWORD *)(a2 + 48);
  v628 = *(_QWORD *)(a2 + 56);
LABEL_1021:
  v632 = v624 / v625;
  if ((unint64_t)(v630 - v628) <= 3)
  {
    sub_1C4D663A4((uint64_t *)a2, 4uLL);
    v630 = *(_QWORD *)(a2 + 48);
  }
  *(_DWORD *)(v630 - 4) = v632;
  v633 = v630 - 4;
  *(_QWORD *)(a2 + 48) = v633;
  sub_1C4D66288((uint64_t *)a2, 12, *(_DWORD *)(a2 + 32) - v633 + *(_DWORD *)(a2 + 40));
  if (*(_BYTE *)(a2 + 80))
  {
    if (*(_QWORD *)(a2 + 72) <= 3uLL)
      *(_QWORD *)(a2 + 72) = 4;
    v634 = *(_QWORD *)(a2 + 48);
    v635 = *(_QWORD *)(a2 + 56);
    v636 = ((_BYTE)v634 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
    if (v634 - v635 < v636)
    {
      sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v634 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
      *(_QWORD *)(a2 + 48) -= v636;
    }
    else
    {
      v637 = v634 - v636;
      *(_QWORD *)(a2 + 48) = v637;
      if (!v636)
      {
LABEL_1031:
        if ((unint64_t)(v637 - v635) <= 3)
        {
          sub_1C4D663A4((uint64_t *)a2, 4uLL);
          v637 = *(_QWORD *)(a2 + 48);
        }
        *(_DWORD *)(v637 - 4) = 0;
        v639 = v637 - 4;
        *(_QWORD *)(a2 + 48) = v639;
        sub_1C4D66288((uint64_t *)a2, 6, *(_DWORD *)(a2 + 32) - v639 + *(_DWORD *)(a2 + 40));
        goto LABEL_1034;
      }
    }
    v638 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(a2 + 48) + v638++) = 0;
    while (v636 != v638);
    v637 = *(_QWORD *)(a2 + 48);
    v635 = *(_QWORD *)(a2 + 56);
    goto LABEL_1031;
  }
LABEL_1034:
  v640 = sub_1C4D66580(a2, v617);
  v641 = v572 - v571;
  v642 = (v572 - v571) >> 2;
  v643 = v642 + 1;
  if ((unint64_t)(v642 + 1) >> 62)
    goto LABEL_2202;
  v644 = v640;
  if (v641 >> 1 > v643)
    v643 = v641 >> 1;
  if ((unint64_t)v641 >= 0x7FFFFFFFFFFFFFFCLL)
    v645 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v645 = v643;
  if (v645)
  {
    if (v645 >> 62)
      goto LABEL_2204;
    v646 = (char *)operator new(4 * v645);
  }
  else
  {
    v646 = 0;
  }
  v678 = &v646[4 * v642];
  v1477 = &v646[4 * v645];
  *(_DWORD *)v678 = v644;
  v573 = v678 + 4;
  if (v572 == v571)
  {
    v680 = v678;
    if (!v571)
      goto LABEL_1093;
    goto LABEL_1092;
  }
  v679 = &v572[-(v641 & 0xFFFFFFFFFFFFFFFCLL)];
  v680 = &v646[v641 & 3];
  memcpy(v680, v679, v641 & 0xFFFFFFFFFFFFFFFCLL);
  if (v571)
LABEL_1092:
    operator delete(v571);
LABEL_1093:
  v571 = v680;
LABEL_1094:
  v681 = (v1370 - v1382) * v1361;
  if (!v681)
  {
    v1429 = 0;
    goto LABEL_1167;
  }
  *(_BYTE *)(a2 + 70) = 1;
  v682 = *(_DWORD *)(a2 + 32);
  v683 = *(_DWORD *)(a2 + 48);
  v684 = *(_DWORD *)(a2 + 40);
  if (((*(unsigned __int8 (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)*v1409 + 920))(*v1409, v1409[39], a5) & ((v681 & 0xF) != 0)) != 0)v685 = (v681 + 15) & 0xFFFFFFF0;
  else
    v685 = (v1370 - v1382) * v1361;
  v686 = ((uint64_t (*)(_QWORD **))(*v558)[42])(v558);
  v687 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v686 + 24))(v686, 4);
  v1429 = v685;
  if (v687 <= v685 || *(_BYTE *)(a2 + 80) != 0)
  {
    v689 = v687;
    if (*(_QWORD *)(a2 + 72) <= 3uLL)
      *(_QWORD *)(a2 + 72) = 4;
    v690 = *(_QWORD *)(a2 + 48);
    v691 = *(_QWORD *)(a2 + 56);
    v692 = ((_BYTE)v690 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
    if (v690 - v691 < v692)
    {
      sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v690 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
      *(_QWORD *)(a2 + 48) -= v692;
    }
    else
    {
      v693 = v690 - v692;
      *(_QWORD *)(a2 + 48) = v693;
      if (!v692)
      {
LABEL_1109:
        v695 = v1429 / v689;
        if ((unint64_t)(v693 - v691) <= 3)
        {
          sub_1C4D663A4((uint64_t *)a2, 4uLL);
          v693 = *(_QWORD *)(a2 + 48);
        }
        *(_DWORD *)(v693 - 4) = v695;
        v696 = v693 - 4;
        *(_QWORD *)(a2 + 48) = v696;
        sub_1C4D66288((uint64_t *)a2, 8, *(_DWORD *)(a2 + 32) - v696 + *(_DWORD *)(a2 + 40));
        goto LABEL_1112;
      }
    }
    v694 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(a2 + 48) + v694++) = 0;
    while (v692 != v694);
    v693 = *(_QWORD *)(a2 + 48);
    v691 = *(_QWORD *)(a2 + 56);
    goto LABEL_1109;
  }
LABEL_1112:
  if (!*(_QWORD *)(a2 + 72))
    *(_QWORD *)(a2 + 72) = 1;
  v697 = *(_QWORD *)(a2 + 48);
  if (v697 == *(_QWORD *)(a2 + 56))
  {
    sub_1C4D663A4((uint64_t *)a2, 1uLL);
    v697 = *(_QWORD *)(a2 + 48);
  }
  *(_QWORD *)(a2 + 48) = v697 - 1;
  *(_BYTE *)(v697 - 1) = 3;
  sub_1C4D66288((uint64_t *)a2, 4, *(_DWORD *)(a2 + 32) - *(_DWORD *)(a2 + 48) + *(_DWORD *)(a2 + 40));
  if (!v1382 && !*(_BYTE *)(a2 + 80))
    goto LABEL_1148;
  if (*(_QWORD *)(a2 + 72) <= 3uLL)
    *(_QWORD *)(a2 + 72) = 4;
  v698 = *(_QWORD *)(a2 + 48);
  v699 = *(_QWORD *)(a2 + 56);
  v700 = ((_BYTE)v698 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
  if (v698 - v699 < v700)
  {
    sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v698 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
    *(_QWORD *)(a2 + 48) -= v700;
  }
  else
  {
    v701 = v698 - v700;
    *(_QWORD *)(a2 + 48) = v701;
    if (!v700)
      goto LABEL_1125;
  }
  v702 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(a2 + 48) + v702++) = 0;
  while (v700 != v702);
  v701 = *(_QWORD *)(a2 + 48);
  v699 = *(_QWORD *)(a2 + 56);
LABEL_1125:
  if ((unint64_t)(v701 - v699) <= 3)
  {
    sub_1C4D663A4((uint64_t *)a2, 4uLL);
    v701 = *(_QWORD *)(a2 + 48);
  }
  *(_DWORD *)(v701 - 4) = v1382;
  v703 = v701 - 4;
  *(_QWORD *)(a2 + 48) = v703;
  sub_1C4D66288((uint64_t *)a2, 10, *(_DWORD *)(a2 + 32) - v703 + *(_DWORD *)(a2 + 40));
  if (!*(_BYTE *)(a2 + 80))
    goto LABEL_1148;
  if (*(_QWORD *)(a2 + 72) <= 3uLL)
    *(_QWORD *)(a2 + 72) = 4;
  v704 = *(_QWORD *)(a2 + 48);
  v705 = *(_QWORD *)(a2 + 56);
  v706 = ((_BYTE)v704 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
  if (v704 - v705 < v706)
  {
    sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v704 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
    *(_QWORD *)(a2 + 48) -= v706;
  }
  else
  {
    v707 = v704 - v706;
    *(_QWORD *)(a2 + 48) = v707;
    if (!v706)
      goto LABEL_1135;
  }
  v708 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(a2 + 48) + v708++) = 0;
  while (v706 != v708);
  v707 = *(_QWORD *)(a2 + 48);
  v705 = *(_QWORD *)(a2 + 56);
LABEL_1135:
  if ((unint64_t)(v707 - v705) <= 3)
  {
    sub_1C4D663A4((uint64_t *)a2, 4uLL);
    v707 = *(_QWORD *)(a2 + 48);
  }
  *(_DWORD *)(v707 - 4) = 0;
  v709 = v707 - 4;
  *(_QWORD *)(a2 + 48) = v709;
  sub_1C4D66288((uint64_t *)a2, 12, *(_DWORD *)(a2 + 32) - v709 + *(_DWORD *)(a2 + 40));
  if (*(_BYTE *)(a2 + 80))
  {
    if (*(_QWORD *)(a2 + 72) <= 3uLL)
      *(_QWORD *)(a2 + 72) = 4;
    v710 = *(_QWORD *)(a2 + 48);
    v711 = *(_QWORD *)(a2 + 56);
    v712 = ((_BYTE)v710 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
    if (v710 - v711 < v712)
    {
      sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v710 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
      *(_QWORD *)(a2 + 48) -= v712;
    }
    else
    {
      v713 = v710 - v712;
      *(_QWORD *)(a2 + 48) = v713;
      if (!v712)
      {
LABEL_1145:
        if ((unint64_t)(v713 - v711) <= 3)
        {
          sub_1C4D663A4((uint64_t *)a2, 4uLL);
          v713 = *(_QWORD *)(a2 + 48);
        }
        *(_DWORD *)(v713 - 4) = 0;
        v715 = v713 - 4;
        *(_QWORD *)(a2 + 48) = v715;
        sub_1C4D66288((uint64_t *)a2, 6, *(_DWORD *)(a2 + 32) - v715 + *(_DWORD *)(a2 + 40));
        goto LABEL_1148;
      }
    }
    v714 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(a2 + 48) + v714++) = 0;
    while (v712 != v714);
    v713 = *(_QWORD *)(a2 + 48);
    v711 = *(_QWORD *)(a2 + 56);
    goto LABEL_1145;
  }
LABEL_1148:
  v716 = sub_1C4D66580(a2, (unsigned __int16)v682 - (unsigned __int16)v683 + v684);
  v717 = v716;
  if (v573 >= v1477)
  {
    v718 = (v573 - v571) >> 2;
    v719 = v718 + 1;
    if ((unint64_t)(v718 + 1) >> 62)
      goto LABEL_2202;
    v720 = v571;
    if ((v1477 - v571) >> 1 > v719)
      v719 = (v1477 - v571) >> 1;
    if ((unint64_t)(v1477 - v571) >= 0x7FFFFFFFFFFFFFFCLL)
      v721 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v721 = v719;
    if (v721)
    {
      if (v721 >> 62)
        goto LABEL_2204;
      v722 = (char *)operator new(4 * v721);
      v720 = v571;
    }
    else
    {
      v722 = 0;
    }
    v571 = &v722[4 * v718];
    v1477 = &v722[4 * v721];
    *(_DWORD *)v571 = v717;
    v723 = v571 + 4;
    while (v573 != v720)
    {
      v724 = *((_DWORD *)v573 - 1);
      v573 -= 4;
      *((_DWORD *)v571 - 1) = v724;
      v571 -= 4;
    }
    if (v720)
      operator delete(v720);
    v573 = v723;
  }
  else
  {
    *(_DWORD *)v573 = v716;
    v573 += 4;
  }
LABEL_1167:
  v725 = (v1369 - v1416) * v1378;
  if (!v725)
  {
    v1423 = 0;
    goto LABEL_1224;
  }
  *(_BYTE *)(a2 + 70) = 1;
  v726 = *(_DWORD *)(a2 + 32);
  v727 = *(_DWORD *)(a2 + 48);
  v728 = *(_DWORD *)(a2 + 40);
  if (((*(unsigned __int8 (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)*v1409 + 920))(*v1409, v1409[39], a5) & ((v725 & 0xF) != 0)) != 0)v729 = (v725 + 15) & 0xFFFFFFF0;
  else
    v729 = (v1369 - v1416) * v1378;
  v730 = ((uint64_t (*)(_QWORD **))(*v558)[42])(v558);
  v731 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v730 + 24))(v730, 0);
  v1423 = v729;
  if (v731 <= v729 || *(_BYTE *)(a2 + 80) != 0)
  {
    v733 = v731;
    if (*(_QWORD *)(a2 + 72) <= 3uLL)
      *(_QWORD *)(a2 + 72) = 4;
    v734 = *(_QWORD *)(a2 + 48);
    v735 = *(_QWORD *)(a2 + 56);
    v736 = ((_BYTE)v734 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
    if (v734 - v735 < v736)
    {
      sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v734 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
      *(_QWORD *)(a2 + 48) -= v736;
    }
    else
    {
      v737 = v734 - v736;
      *(_QWORD *)(a2 + 48) = v737;
      if (!v736)
      {
LABEL_1182:
        v739 = v1423 / v733;
        if ((unint64_t)(v737 - v735) <= 3)
        {
          sub_1C4D663A4((uint64_t *)a2, 4uLL);
          v737 = *(_QWORD *)(a2 + 48);
        }
        *(_DWORD *)(v737 - 4) = v739;
        v740 = v737 - 4;
        *(_QWORD *)(a2 + 48) = v740;
        sub_1C4D66288((uint64_t *)a2, 8, *(_DWORD *)(a2 + 32) - v740 + *(_DWORD *)(a2 + 40));
        goto LABEL_1185;
      }
    }
    v738 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(a2 + 48) + v738++) = 0;
    while (v736 != v738);
    v737 = *(_QWORD *)(a2 + 48);
    v735 = *(_QWORD *)(a2 + 56);
    goto LABEL_1182;
  }
LABEL_1185:
  if (!*(_QWORD *)(a2 + 72))
    *(_QWORD *)(a2 + 72) = 1;
  v741 = *(_QWORD *)(a2 + 48);
  if (v741 == *(_QWORD *)(a2 + 56))
  {
    sub_1C4D663A4((uint64_t *)a2, 1uLL);
    v741 = *(_QWORD *)(a2 + 48);
  }
  *(_QWORD *)(a2 + 48) = v741 - 1;
  *(_BYTE *)(v741 - 1) = 1;
  sub_1C4D66288((uint64_t *)a2, 4, *(_DWORD *)(a2 + 32) - *(_DWORD *)(a2 + 48) + *(_DWORD *)(a2 + 40));
  if (!v1416 && !*(_BYTE *)(a2 + 80))
    goto LABEL_1221;
  if (*(_QWORD *)(a2 + 72) <= 3uLL)
    *(_QWORD *)(a2 + 72) = 4;
  v742 = *(_QWORD *)(a2 + 48);
  v743 = *(_QWORD *)(a2 + 56);
  v744 = ((_BYTE)v742 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
  if (v742 - v743 < v744)
  {
    sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v742 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
    *(_QWORD *)(a2 + 48) -= v744;
  }
  else
  {
    v745 = v742 - v744;
    *(_QWORD *)(a2 + 48) = v745;
    if (!v744)
      goto LABEL_1198;
  }
  v746 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(a2 + 48) + v746++) = 0;
  while (v744 != v746);
  v745 = *(_QWORD *)(a2 + 48);
  v743 = *(_QWORD *)(a2 + 56);
LABEL_1198:
  if ((unint64_t)(v745 - v743) <= 3)
  {
    sub_1C4D663A4((uint64_t *)a2, 4uLL);
    v745 = *(_QWORD *)(a2 + 48);
  }
  *(_DWORD *)(v745 - 4) = v1416;
  v747 = v745 - 4;
  *(_QWORD *)(a2 + 48) = v747;
  sub_1C4D66288((uint64_t *)a2, 10, *(_DWORD *)(a2 + 32) - v747 + *(_DWORD *)(a2 + 40));
  if (!*(_BYTE *)(a2 + 80))
    goto LABEL_1221;
  if (*(_QWORD *)(a2 + 72) <= 3uLL)
    *(_QWORD *)(a2 + 72) = 4;
  v748 = *(_QWORD *)(a2 + 48);
  v749 = *(_QWORD *)(a2 + 56);
  v750 = ((_BYTE)v748 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
  if (v748 - v749 < v750)
  {
    sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v748 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
    *(_QWORD *)(a2 + 48) -= v750;
  }
  else
  {
    v751 = v748 - v750;
    *(_QWORD *)(a2 + 48) = v751;
    if (!v750)
      goto LABEL_1208;
  }
  v752 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(a2 + 48) + v752++) = 0;
  while (v750 != v752);
  v751 = *(_QWORD *)(a2 + 48);
  v749 = *(_QWORD *)(a2 + 56);
LABEL_1208:
  if ((unint64_t)(v751 - v749) <= 3)
  {
    sub_1C4D663A4((uint64_t *)a2, 4uLL);
    v751 = *(_QWORD *)(a2 + 48);
  }
  *(_DWORD *)(v751 - 4) = 0;
  v753 = v751 - 4;
  *(_QWORD *)(a2 + 48) = v753;
  sub_1C4D66288((uint64_t *)a2, 12, *(_DWORD *)(a2 + 32) - v753 + *(_DWORD *)(a2 + 40));
  if (*(_BYTE *)(a2 + 80))
  {
    if (*(_QWORD *)(a2 + 72) <= 3uLL)
      *(_QWORD *)(a2 + 72) = 4;
    v754 = *(_QWORD *)(a2 + 48);
    v755 = *(_QWORD *)(a2 + 56);
    v756 = ((_BYTE)v754 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
    if (v754 - v755 < v756)
    {
      sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v754 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
      *(_QWORD *)(a2 + 48) -= v756;
    }
    else
    {
      v757 = v754 - v756;
      *(_QWORD *)(a2 + 48) = v757;
      if (!v756)
      {
LABEL_1218:
        if ((unint64_t)(v757 - v755) <= 3)
        {
          sub_1C4D663A4((uint64_t *)a2, 4uLL);
          v757 = *(_QWORD *)(a2 + 48);
        }
        *(_DWORD *)(v757 - 4) = 0;
        v759 = v757 - 4;
        *(_QWORD *)(a2 + 48) = v759;
        sub_1C4D66288((uint64_t *)a2, 6, *(_DWORD *)(a2 + 32) - v759 + *(_DWORD *)(a2 + 40));
        goto LABEL_1221;
      }
    }
    v758 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(a2 + 48) + v758++) = 0;
    while (v756 != v758);
    v757 = *(_QWORD *)(a2 + 48);
    v755 = *(_QWORD *)(a2 + 56);
    goto LABEL_1218;
  }
LABEL_1221:
  v760 = sub_1C4D66580(a2, (unsigned __int16)v726 - (unsigned __int16)v727 + v728);
  v761 = v760;
  if (v573 < v1477)
  {
    *(_DWORD *)v573 = v760;
    v573 += 4;
LABEL_1224:
    v762 = v1360;
    goto LABEL_1241;
  }
  v763 = (v573 - v571) >> 2;
  v764 = v763 + 1;
  if ((unint64_t)(v763 + 1) >> 62)
    goto LABEL_2202;
  v765 = v571;
  if ((v1477 - v571) >> 1 > v764)
    v764 = (v1477 - v571) >> 1;
  if ((unint64_t)(v1477 - v571) >= 0x7FFFFFFFFFFFFFFCLL)
    v766 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v766 = v764;
  if (v766)
  {
    if (v766 >> 62)
      goto LABEL_2204;
    v767 = (char *)operator new(4 * v766);
    v765 = v571;
  }
  else
  {
    v767 = 0;
  }
  v571 = &v767[4 * v763];
  v1477 = &v767[4 * v766];
  *(_DWORD *)v571 = v761;
  v768 = v571 + 4;
  if (v573 == v765)
  {
    v762 = v1360;
    if (!v765)
      goto LABEL_1240;
  }
  else
  {
    v762 = v1360;
    do
    {
      v769 = *((_DWORD *)v573 - 1);
      v573 -= 4;
      *((_DWORD *)v571 - 1) = v769;
      v571 -= 4;
    }
    while (v573 != v765);
    if (!v765)
      goto LABEL_1240;
  }
  operator delete(v765);
LABEL_1240:
  v573 = v768;
LABEL_1241:
  v770 = (v1406 - v1364) * v762;
  v1460 = v477;
  if (!v770)
  {
    v808 = v573;
    goto LABEL_1313;
  }
  v771 = v571;
  *(_BYTE *)(a2 + 70) = 1;
  v772 = *(_DWORD *)(a2 + 32);
  v773 = *(_DWORD *)(a2 + 48);
  v774 = *(_DWORD *)(a2 + 40);
  if (((*(unsigned __int8 (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)*v1409 + 920))(*v1409, v1409[39], a5) & ((v770 & 0xF) != 0)) != 0)v775 = (v770 + 15) & 0xFFFFFFF0;
  else
    v775 = v770;
  v776 = ((uint64_t (*)(_QWORD **))(*v558)[42])(v558);
  v777 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v776 + 24))(v776, 0);
  if (v777 <= v775 || *(_BYTE *)(a2 + 80) != 0)
  {
    v779 = v777;
    if (*(_QWORD *)(a2 + 72) <= 3uLL)
      *(_QWORD *)(a2 + 72) = 4;
    v780 = *(_QWORD *)(a2 + 48);
    v781 = *(_QWORD *)(a2 + 56);
    v782 = ((_BYTE)v780 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
    if (v780 - v781 < v782)
    {
      sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v780 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
      *(_QWORD *)(a2 + 48) -= v782;
    }
    else
    {
      v783 = v780 - v782;
      *(_QWORD *)(a2 + 48) = v783;
      if (!v782)
      {
LABEL_1256:
        v785 = v775 / v779;
        if ((unint64_t)(v783 - v781) <= 3)
        {
          sub_1C4D663A4((uint64_t *)a2, 4uLL);
          v783 = *(_QWORD *)(a2 + 48);
        }
        *(_DWORD *)(v783 - 4) = v785;
        v786 = v783 - 4;
        *(_QWORD *)(a2 + 48) = v786;
        sub_1C4D66288((uint64_t *)a2, 8, *(_DWORD *)(a2 + 32) - v786 + *(_DWORD *)(a2 + 40));
        goto LABEL_1259;
      }
    }
    v784 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(a2 + 48) + v784++) = 0;
    while (v782 != v784);
    v783 = *(_QWORD *)(a2 + 48);
    v781 = *(_QWORD *)(a2 + 56);
    goto LABEL_1256;
  }
LABEL_1259:
  if (!*(_QWORD *)(a2 + 72))
    *(_QWORD *)(a2 + 72) = 1;
  v787 = *(_QWORD *)(a2 + 48);
  if (v787 == *(_QWORD *)(a2 + 56))
  {
    sub_1C4D663A4((uint64_t *)a2, 1uLL);
    v787 = *(_QWORD *)(a2 + 48);
  }
  *(_QWORD *)(a2 + 48) = v787 - 1;
  *(_BYTE *)(v787 - 1) = 11;
  sub_1C4D66288((uint64_t *)a2, 4, *(_DWORD *)(a2 + 32) - *(_DWORD *)(a2 + 48) + *(_DWORD *)(a2 + 40));
  if (!v1364 && !*(_BYTE *)(a2 + 80))
    goto LABEL_1295;
  if (*(_QWORD *)(a2 + 72) <= 3uLL)
    *(_QWORD *)(a2 + 72) = 4;
  v788 = *(_QWORD *)(a2 + 48);
  v789 = *(_QWORD *)(a2 + 56);
  v790 = ((_BYTE)v788 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
  if (v788 - v789 < v790)
  {
    sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v788 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
    *(_QWORD *)(a2 + 48) -= v790;
  }
  else
  {
    v791 = v788 - v790;
    *(_QWORD *)(a2 + 48) = v791;
    if (!v790)
      goto LABEL_1272;
  }
  v792 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(a2 + 48) + v792++) = 0;
  while (v790 != v792);
  v791 = *(_QWORD *)(a2 + 48);
  v789 = *(_QWORD *)(a2 + 56);
LABEL_1272:
  if ((unint64_t)(v791 - v789) <= 3)
  {
    sub_1C4D663A4((uint64_t *)a2, 4uLL);
    v791 = *(_QWORD *)(a2 + 48);
  }
  *(_DWORD *)(v791 - 4) = v1364;
  v793 = v791 - 4;
  *(_QWORD *)(a2 + 48) = v793;
  sub_1C4D66288((uint64_t *)a2, 10, *(_DWORD *)(a2 + 32) - v793 + *(_DWORD *)(a2 + 40));
  if (!*(_BYTE *)(a2 + 80))
    goto LABEL_1295;
  if (*(_QWORD *)(a2 + 72) <= 3uLL)
    *(_QWORD *)(a2 + 72) = 4;
  v794 = *(_QWORD *)(a2 + 48);
  v795 = *(_QWORD *)(a2 + 56);
  v796 = ((_BYTE)v794 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
  if (v794 - v795 < v796)
  {
    sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v794 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
    *(_QWORD *)(a2 + 48) -= v796;
  }
  else
  {
    v797 = v794 - v796;
    *(_QWORD *)(a2 + 48) = v797;
    if (!v796)
      goto LABEL_1282;
  }
  v798 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(a2 + 48) + v798++) = 0;
  while (v796 != v798);
  v797 = *(_QWORD *)(a2 + 48);
  v795 = *(_QWORD *)(a2 + 56);
LABEL_1282:
  if ((unint64_t)(v797 - v795) <= 3)
  {
    sub_1C4D663A4((uint64_t *)a2, 4uLL);
    v797 = *(_QWORD *)(a2 + 48);
  }
  *(_DWORD *)(v797 - 4) = 0;
  v799 = v797 - 4;
  *(_QWORD *)(a2 + 48) = v799;
  sub_1C4D66288((uint64_t *)a2, 12, *(_DWORD *)(a2 + 32) - v799 + *(_DWORD *)(a2 + 40));
  if (*(_BYTE *)(a2 + 80))
  {
    if (*(_QWORD *)(a2 + 72) <= 3uLL)
      *(_QWORD *)(a2 + 72) = 4;
    v800 = *(_QWORD *)(a2 + 48);
    v801 = *(_QWORD *)(a2 + 56);
    v802 = ((_BYTE)v800 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
    if (v800 - v801 < v802)
    {
      sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v800 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
      *(_QWORD *)(a2 + 48) -= v802;
    }
    else
    {
      v803 = v800 - v802;
      *(_QWORD *)(a2 + 48) = v803;
      if (!v802)
      {
LABEL_1292:
        if ((unint64_t)(v803 - v801) <= 3)
        {
          sub_1C4D663A4((uint64_t *)a2, 4uLL);
          v803 = *(_QWORD *)(a2 + 48);
        }
        *(_DWORD *)(v803 - 4) = 0;
        v805 = v803 - 4;
        *(_QWORD *)(a2 + 48) = v805;
        sub_1C4D66288((uint64_t *)a2, 6, *(_DWORD *)(a2 + 32) - v805 + *(_DWORD *)(a2 + 40));
        goto LABEL_1295;
      }
    }
    v804 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(a2 + 48) + v804++) = 0;
    while (v802 != v804);
    v803 = *(_QWORD *)(a2 + 48);
    v801 = *(_QWORD *)(a2 + 56);
    goto LABEL_1292;
  }
LABEL_1295:
  v806 = sub_1C4D66580(a2, (unsigned __int16)v772 - (unsigned __int16)v773 + v774);
  v807 = v806;
  if (v573 >= v1477)
  {
    v809 = (v573 - v771) >> 2;
    v810 = v809 + 1;
    if ((unint64_t)(v809 + 1) >> 62)
      goto LABEL_2202;
    v811 = v771;
    if ((v1477 - v771) >> 1 > v810)
      v810 = (v1477 - v771) >> 1;
    if ((unint64_t)(v1477 - v771) >= 0x7FFFFFFFFFFFFFFCLL)
      v812 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v812 = v810;
    if (v812)
    {
      if (v812 >> 62)
        goto LABEL_2204;
      v813 = (char *)operator new(4 * v812);
      v811 = v771;
    }
    else
    {
      v813 = 0;
    }
    v571 = &v813[4 * v809];
    v1477 = &v813[4 * v812];
    *(_DWORD *)v571 = v807;
    v808 = v571 + 4;
    while (v573 != v811)
    {
      v814 = *((_DWORD *)v573 - 1);
      v573 -= 4;
      *((_DWORD *)v571 - 1) = v814;
      v571 -= 4;
    }
    if (v811)
      operator delete(v811);
  }
  else
  {
    *(_DWORD *)v573 = v806;
    v808 = v573 + 4;
    v571 = v771;
  }
LABEL_1313:
  v815 = (v1368 - v1414) * v1376;
  if (!v815)
  {
    v1417 = 0;
    goto LABEL_1388;
  }
  *(_BYTE *)(a2 + 70) = 1;
  v816 = *(_DWORD *)(a2 + 32);
  v817 = *(_DWORD *)(a2 + 48);
  v818 = *(_DWORD *)(a2 + 40);
  if (((*(unsigned __int8 (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)*v1409 + 920))(*v1409, v1409[39], a5) & ((v815 & 0xF) != 0)) != 0)v819 = (v815 + 15) & 0xFFFFFFF0;
  else
    v819 = (v1368 - v1414) * v1376;
  v820 = ((uint64_t (*)(_QWORD **))(*v558)[42])(v558);
  v821 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v820 + 24))(v820, 1);
  v1417 = v819;
  if (v821 <= v819 || *(_BYTE *)(a2 + 80) != 0)
  {
    v823 = v821;
    if (*(_QWORD *)(a2 + 72) <= 3uLL)
      *(_QWORD *)(a2 + 72) = 4;
    v824 = *(_QWORD *)(a2 + 48);
    v825 = *(_QWORD *)(a2 + 56);
    v826 = ((_BYTE)v824 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
    if (v824 - v825 < v826)
    {
      sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v824 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
      *(_QWORD *)(a2 + 48) -= v826;
    }
    else
    {
      v827 = v824 - v826;
      *(_QWORD *)(a2 + 48) = v827;
      if (!v826)
      {
LABEL_1328:
        v829 = v1417 / v823;
        if ((unint64_t)(v827 - v825) <= 3)
        {
          sub_1C4D663A4((uint64_t *)a2, 4uLL);
          v827 = *(_QWORD *)(a2 + 48);
        }
        *(_DWORD *)(v827 - 4) = v829;
        v830 = v827 - 4;
        *(_QWORD *)(a2 + 48) = v830;
        sub_1C4D66288((uint64_t *)a2, 8, *(_DWORD *)(a2 + 32) - v830 + *(_DWORD *)(a2 + 40));
        goto LABEL_1331;
      }
    }
    v828 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(a2 + 48) + v828++) = 0;
    while (v826 != v828);
    v827 = *(_QWORD *)(a2 + 48);
    v825 = *(_QWORD *)(a2 + 56);
    goto LABEL_1328;
  }
LABEL_1331:
  if (!*(_QWORD *)(a2 + 72))
    *(_QWORD *)(a2 + 72) = 1;
  v831 = v816 - v817 + v818;
  v832 = *(_QWORD *)(a2 + 48);
  if (v832 == *(_QWORD *)(a2 + 56))
  {
    sub_1C4D663A4((uint64_t *)a2, 1uLL);
    v832 = *(_QWORD *)(a2 + 48);
  }
  *(_QWORD *)(a2 + 48) = v832 - 1;
  *(_BYTE *)(v832 - 1) = 2;
  sub_1C4D66288((uint64_t *)a2, 4, *(_DWORD *)(a2 + 32) - *(_DWORD *)(a2 + 48) + *(_DWORD *)(a2 + 40));
  v833 = v1409;
  if (!v1414 && !*(_BYTE *)(a2 + 80))
    goto LABEL_1367;
  if (*(_QWORD *)(a2 + 72) <= 3uLL)
    *(_QWORD *)(a2 + 72) = 4;
  v834 = *(_QWORD *)(a2 + 48);
  v835 = *(_QWORD *)(a2 + 56);
  v836 = ((_BYTE)v834 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
  if (v834 - v835 < v836)
  {
    sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v834 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
    *(_QWORD *)(a2 + 48) -= v836;
  }
  else
  {
    v837 = v834 - v836;
    *(_QWORD *)(a2 + 48) = v837;
    if (!v836)
      goto LABEL_1344;
  }
  v838 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(a2 + 48) + v838++) = 0;
  while (v836 != v838);
  v837 = *(_QWORD *)(a2 + 48);
  v835 = *(_QWORD *)(a2 + 56);
LABEL_1344:
  if ((unint64_t)(v837 - v835) <= 3)
  {
    sub_1C4D663A4((uint64_t *)a2, 4uLL);
    v837 = *(_QWORD *)(a2 + 48);
  }
  *(_DWORD *)(v837 - 4) = v1414;
  v839 = v837 - 4;
  *(_QWORD *)(a2 + 48) = v839;
  sub_1C4D66288((uint64_t *)a2, 10, *(_DWORD *)(a2 + 32) - v839 + *(_DWORD *)(a2 + 40));
  if (!*(_BYTE *)(a2 + 80))
    goto LABEL_1367;
  if (*(_QWORD *)(a2 + 72) <= 3uLL)
    *(_QWORD *)(a2 + 72) = 4;
  v840 = *(_QWORD *)(a2 + 48);
  v841 = *(_QWORD *)(a2 + 56);
  v842 = ((_BYTE)v840 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
  if (v840 - v841 < v842)
  {
    sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v840 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
    *(_QWORD *)(a2 + 48) -= v842;
  }
  else
  {
    v843 = v840 - v842;
    *(_QWORD *)(a2 + 48) = v843;
    if (!v842)
      goto LABEL_1354;
  }
  v844 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(a2 + 48) + v844++) = 0;
  while (v842 != v844);
  v843 = *(_QWORD *)(a2 + 48);
  v841 = *(_QWORD *)(a2 + 56);
LABEL_1354:
  if ((unint64_t)(v843 - v841) <= 3)
  {
    sub_1C4D663A4((uint64_t *)a2, 4uLL);
    v843 = *(_QWORD *)(a2 + 48);
  }
  *(_DWORD *)(v843 - 4) = 0;
  v845 = v843 - 4;
  *(_QWORD *)(a2 + 48) = v845;
  sub_1C4D66288((uint64_t *)a2, 12, *(_DWORD *)(a2 + 32) - v845 + *(_DWORD *)(a2 + 40));
  if (!*(_BYTE *)(a2 + 80))
    goto LABEL_1367;
  if (*(_QWORD *)(a2 + 72) <= 3uLL)
    *(_QWORD *)(a2 + 72) = 4;
  v846 = *(_QWORD *)(a2 + 48);
  v847 = *(_QWORD *)(a2 + 56);
  v848 = ((_BYTE)v846 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
  if (v846 - v847 < v848)
  {
    sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v846 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
    *(_QWORD *)(a2 + 48) -= v848;
LABEL_1361:
    v850 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(a2 + 48) + v850++) = 0;
    while (v848 != v850);
    v849 = *(_QWORD *)(a2 + 48);
    v847 = *(_QWORD *)(a2 + 56);
    goto LABEL_1364;
  }
  v849 = v846 - v848;
  *(_QWORD *)(a2 + 48) = v849;
  if (v848)
    goto LABEL_1361;
LABEL_1364:
  if ((unint64_t)(v849 - v847) <= 3)
  {
    sub_1C4D663A4((uint64_t *)a2, 4uLL);
    v849 = *(_QWORD *)(a2 + 48);
  }
  *(_DWORD *)(v849 - 4) = 0;
  v851 = v849 - 4;
  *(_QWORD *)(a2 + 48) = v851;
  sub_1C4D66288((uint64_t *)a2, 6, *(_DWORD *)(a2 + 32) - v851 + *(_DWORD *)(a2 + 40));
LABEL_1367:
  v852 = sub_1C4D66580(a2, v831);
  v853 = v852;
  if (v808 < v1477)
  {
    *(_DWORD *)v808 = v852;
    v808 += 4;
    goto LABEL_1389;
  }
  v854 = (v808 - v571) >> 2;
  v855 = v854 + 1;
  if ((unint64_t)(v854 + 1) >> 62)
    goto LABEL_2202;
  v856 = v571;
  if ((v1477 - v571) >> 1 > v855)
    v855 = (v1477 - v571) >> 1;
  if ((unint64_t)(v1477 - v571) >= 0x7FFFFFFFFFFFFFFCLL)
    v857 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v857 = v855;
  if (v857)
  {
    if (v857 >> 62)
      goto LABEL_2204;
    v858 = (char *)operator new(4 * v857);
    v856 = v571;
  }
  else
  {
    v858 = 0;
  }
  v571 = &v858[4 * v854];
  v1477 = &v858[4 * v857];
  *(_DWORD *)v571 = v853;
  v859 = v571 + 4;
  while (v808 != v856)
  {
    v860 = *((_DWORD *)v808 - 1);
    v808 -= 4;
    *((_DWORD *)v571 - 1) = v860;
    v571 -= 4;
  }
  if (v856)
    operator delete(v856);
  v808 = v859;
LABEL_1388:
  v833 = v1409;
LABEL_1389:
  v861 = v1450;
  if (!v1450)
  {
LABEL_1446:
    v897 = v808;
    goto LABEL_1463;
  }
  *(_BYTE *)(a2 + 70) = 1;
  v862 = *(_DWORD *)(a2 + 32) - *(_DWORD *)(a2 + 48) + *(_DWORD *)(a2 + 40);
  if (((*(unsigned __int8 (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)*v833 + 920))(*v833, v833[39], a5) & ((v861 & 0xF) != 0)) != 0)
    v863 = (v1450 + 15) & 0xFFFFFFF0;
  else
    v863 = v1450;
  v864 = ((uint64_t (*)(_QWORD **))(*v558)[42])(v558);
  v865 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v864 + 24))(v864, 5);
  if (v865 > v863 && *(_BYTE *)(a2 + 80) == 0)
  {
    v875 = 0;
    goto LABEL_1413;
  }
  v867 = v865;
  if (*(_QWORD *)(a2 + 72) <= 3uLL)
    *(_QWORD *)(a2 + 72) = 4;
  v868 = *(_QWORD *)(a2 + 48);
  v869 = *(_QWORD *)(a2 + 56);
  v870 = ((_BYTE)v868 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
  if (v868 - v869 < v870)
  {
    sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v868 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
    *(_QWORD *)(a2 + 48) -= v870;
LABEL_1401:
    v872 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(a2 + 48) + v872++) = 0;
    while (v870 != v872);
    v871 = *(_QWORD *)(a2 + 48);
    v869 = *(_QWORD *)(a2 + 56);
    goto LABEL_1404;
  }
  v871 = v868 - v870;
  *(_QWORD *)(a2 + 48) = v871;
  if (v870)
    goto LABEL_1401;
LABEL_1404:
  v873 = v863 / v867;
  v833 = v1409;
  if ((unint64_t)(v871 - v869) <= 3)
  {
    sub_1C4D663A4((uint64_t *)a2, 4uLL);
    v871 = *(_QWORD *)(a2 + 48);
  }
  *(_DWORD *)(v871 - 4) = v873;
  v874 = v871 - 4;
  *(_QWORD *)(a2 + 48) = v874;
  sub_1C4D66288((uint64_t *)a2, 8, *(_DWORD *)(a2 + 32) - v874 + *(_DWORD *)(a2 + 40));
  v875 = *(unsigned __int8 *)(a2 + 80);
  if (*(_BYTE *)(a2 + 80))
  {
    if (!*(_QWORD *)(a2 + 72))
      *(_QWORD *)(a2 + 72) = 1;
    v876 = *(_QWORD *)(a2 + 48);
    if (v876 == *(_QWORD *)(a2 + 56))
    {
      sub_1C4D663A4((uint64_t *)a2, 1uLL);
      v876 = *(_QWORD *)(a2 + 48);
    }
    *(_QWORD *)(a2 + 48) = v876 - 1;
    *(_BYTE *)(v876 - 1) = 0;
    sub_1C4D66288((uint64_t *)a2, 4, *(_DWORD *)(a2 + 32) - *(_DWORD *)(a2 + 48) + *(_DWORD *)(a2 + 40));
    v875 = *(unsigned __int8 *)(a2 + 80);
  }
LABEL_1413:
  if (!(v1453 | v875))
    goto LABEL_1444;
  if (*(_QWORD *)(a2 + 72) <= 3uLL)
    *(_QWORD *)(a2 + 72) = 4;
  v877 = *(_QWORD *)(a2 + 48);
  v878 = *(_QWORD *)(a2 + 56);
  v879 = ((_BYTE)v877 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
  if (v877 - v878 < v879)
  {
    sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v877 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
    *(_QWORD *)(a2 + 48) -= v879;
  }
  else
  {
    v880 = v877 - v879;
    *(_QWORD *)(a2 + 48) = v880;
    if (!v879)
      goto LABEL_1421;
  }
  v881 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(a2 + 48) + v881++) = 0;
  while (v879 != v881);
  v880 = *(_QWORD *)(a2 + 48);
  v878 = *(_QWORD *)(a2 + 56);
LABEL_1421:
  if ((unint64_t)(v880 - v878) <= 3)
  {
    sub_1C4D663A4((uint64_t *)a2, 4uLL);
    v880 = *(_QWORD *)(a2 + 48);
  }
  *(_DWORD *)(v880 - 4) = v1453;
  v882 = v880 - 4;
  *(_QWORD *)(a2 + 48) = v882;
  sub_1C4D66288((uint64_t *)a2, 10, *(_DWORD *)(a2 + 32) - v882 + *(_DWORD *)(a2 + 40));
  if (!*(_BYTE *)(a2 + 80))
    goto LABEL_1444;
  if (*(_QWORD *)(a2 + 72) <= 3uLL)
    *(_QWORD *)(a2 + 72) = 4;
  v883 = *(_QWORD *)(a2 + 48);
  v884 = *(_QWORD *)(a2 + 56);
  v885 = ((_BYTE)v883 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
  if (v883 - v884 < v885)
  {
    sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v883 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
    *(_QWORD *)(a2 + 48) -= v885;
  }
  else
  {
    v886 = v883 - v885;
    *(_QWORD *)(a2 + 48) = v886;
    if (!v885)
      goto LABEL_1431;
  }
  v887 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(a2 + 48) + v887++) = 0;
  while (v885 != v887);
  v886 = *(_QWORD *)(a2 + 48);
  v884 = *(_QWORD *)(a2 + 56);
LABEL_1431:
  if ((unint64_t)(v886 - v884) <= 3)
  {
    sub_1C4D663A4((uint64_t *)a2, 4uLL);
    v886 = *(_QWORD *)(a2 + 48);
  }
  *(_DWORD *)(v886 - 4) = 0;
  v888 = v886 - 4;
  *(_QWORD *)(a2 + 48) = v888;
  sub_1C4D66288((uint64_t *)a2, 12, *(_DWORD *)(a2 + 32) - v888 + *(_DWORD *)(a2 + 40));
  if (*(_BYTE *)(a2 + 80))
  {
    if (*(_QWORD *)(a2 + 72) <= 3uLL)
      *(_QWORD *)(a2 + 72) = 4;
    v889 = *(_QWORD *)(a2 + 48);
    v890 = *(_QWORD *)(a2 + 56);
    v891 = ((_BYTE)v889 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
    if (v889 - v890 < v891)
    {
      sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v889 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
      *(_QWORD *)(a2 + 48) -= v891;
    }
    else
    {
      v892 = v889 - v891;
      *(_QWORD *)(a2 + 48) = v892;
      if (!v891)
      {
LABEL_1441:
        if ((unint64_t)(v892 - v890) <= 3)
        {
          sub_1C4D663A4((uint64_t *)a2, 4uLL);
          v892 = *(_QWORD *)(a2 + 48);
        }
        *(_DWORD *)(v892 - 4) = 0;
        v894 = v892 - 4;
        *(_QWORD *)(a2 + 48) = v894;
        sub_1C4D66288((uint64_t *)a2, 6, *(_DWORD *)(a2 + 32) - v894 + *(_DWORD *)(a2 + 40));
        goto LABEL_1444;
      }
    }
    v893 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(a2 + 48) + v893++) = 0;
    while (v891 != v893);
    v892 = *(_QWORD *)(a2 + 48);
    v890 = *(_QWORD *)(a2 + 56);
    goto LABEL_1441;
  }
LABEL_1444:
  v895 = sub_1C4D66580(a2, v862);
  v896 = v895;
  if (v808 < v1477)
  {
    *(_DWORD *)v808 = v895;
    v808 += 4;
    goto LABEL_1446;
  }
  v898 = (v808 - v571) >> 2;
  v899 = v898 + 1;
  if ((unint64_t)(v898 + 1) >> 62)
    goto LABEL_2202;
  v900 = v571;
  if ((v1477 - v571) >> 1 > v899)
    v899 = (v1477 - v571) >> 1;
  if ((unint64_t)(v1477 - v571) >= 0x7FFFFFFFFFFFFFFCLL)
    v901 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v901 = v899;
  if (v901)
  {
    if (v901 >> 62)
      goto LABEL_2204;
    v902 = (char *)operator new(4 * v901);
    v900 = v571;
  }
  else
  {
    v902 = 0;
  }
  v571 = &v902[4 * v898];
  v1477 = &v902[4 * v901];
  *(_DWORD *)v571 = v896;
  v897 = v571 + 4;
  while (v808 != v900)
  {
    v903 = *((_DWORD *)v808 - 1);
    v808 -= 4;
    *((_DWORD *)v571 - 1) = v903;
    v571 -= 4;
  }
  if (v900)
    operator delete(v900);
  v833 = v1409;
LABEL_1463:
  v904 = v1442;
  v1451 = v571;
  if (!v1442)
  {
    v1415 = 0;
    goto LABEL_1535;
  }
  *(_BYTE *)(a2 + 70) = 1;
  v905 = *(_DWORD *)(a2 + 32);
  v906 = *(_DWORD *)(a2 + 48);
  v907 = v1442;
  v908 = *(_DWORD *)(a2 + 40);
  if (((*(unsigned __int8 (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)*v833 + 920))(*v833, v833[39], a5) & ((v904 & 0xF) != 0)) != 0)
    v907 = (v1442 + 15) & 0xFFFFFFF0;
  v909 = ((uint64_t (*)(_QWORD **))(*v558)[42])(v558);
  v910 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v909 + 24))(v909, 3);
  v1415 = v907;
  if (v910 <= v907 || *(_BYTE *)(a2 + 80) != 0)
  {
    v912 = v910;
    if (*(_QWORD *)(a2 + 72) <= 3uLL)
      *(_QWORD *)(a2 + 72) = 4;
    v913 = *(_QWORD *)(a2 + 48);
    v914 = *(_QWORD *)(a2 + 56);
    v915 = ((_BYTE)v913 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
    if (v913 - v914 < v915)
    {
      sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v913 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
      *(_QWORD *)(a2 + 48) -= v915;
    }
    else
    {
      v916 = v913 - v915;
      *(_QWORD *)(a2 + 48) = v916;
      if (!v915)
      {
LABEL_1477:
        if ((unint64_t)(v916 - v914) <= 3)
        {
          sub_1C4D663A4((uint64_t *)a2, 4uLL);
          v916 = *(_QWORD *)(a2 + 48);
        }
        *(_DWORD *)(v916 - 4) = v1415 / v912;
        v918 = v916 - 4;
        *(_QWORD *)(a2 + 48) = v918;
        sub_1C4D66288((uint64_t *)a2, 8, *(_DWORD *)(a2 + 32) - v918 + *(_DWORD *)(a2 + 40));
        goto LABEL_1480;
      }
    }
    v917 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(a2 + 48) + v917++) = 0;
    while (v915 != v917);
    v916 = *(_QWORD *)(a2 + 48);
    v914 = *(_QWORD *)(a2 + 56);
    goto LABEL_1477;
  }
LABEL_1480:
  if (!*(_QWORD *)(a2 + 72))
    *(_QWORD *)(a2 + 72) = 1;
  v919 = *(_QWORD *)(a2 + 48);
  if (v919 == *(_QWORD *)(a2 + 56))
  {
    sub_1C4D663A4((uint64_t *)a2, 1uLL);
    v919 = *(_QWORD *)(a2 + 48);
  }
  *(_QWORD *)(a2 + 48) = v919 - 1;
  *(_BYTE *)(v919 - 1) = 7;
  sub_1C4D66288((uint64_t *)a2, 4, *(_DWORD *)(a2 + 32) - *(_DWORD *)(a2 + 48) + *(_DWORD *)(a2 + 40));
  if (!v1371 && !*(_BYTE *)(a2 + 80))
    goto LABEL_1516;
  if (*(_QWORD *)(a2 + 72) <= 3uLL)
    *(_QWORD *)(a2 + 72) = 4;
  v920 = *(_QWORD *)(a2 + 48);
  v921 = *(_QWORD *)(a2 + 56);
  v922 = ((_BYTE)v920 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
  if (v920 - v921 < v922)
  {
    sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v920 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
    *(_QWORD *)(a2 + 48) -= v922;
  }
  else
  {
    v923 = v920 - v922;
    *(_QWORD *)(a2 + 48) = v923;
    if (!v922)
      goto LABEL_1493;
  }
  v924 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(a2 + 48) + v924++) = 0;
  while (v922 != v924);
  v923 = *(_QWORD *)(a2 + 48);
  v921 = *(_QWORD *)(a2 + 56);
LABEL_1493:
  if ((unint64_t)(v923 - v921) <= 3)
  {
    sub_1C4D663A4((uint64_t *)a2, 4uLL);
    v923 = *(_QWORD *)(a2 + 48);
  }
  *(_DWORD *)(v923 - 4) = v1371;
  v925 = v923 - 4;
  *(_QWORD *)(a2 + 48) = v925;
  sub_1C4D66288((uint64_t *)a2, 10, *(_DWORD *)(a2 + 32) - v925 + *(_DWORD *)(a2 + 40));
  if (!*(_BYTE *)(a2 + 80))
    goto LABEL_1516;
  if (*(_QWORD *)(a2 + 72) <= 3uLL)
    *(_QWORD *)(a2 + 72) = 4;
  v926 = *(_QWORD *)(a2 + 48);
  v927 = *(_QWORD *)(a2 + 56);
  v928 = ((_BYTE)v926 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
  if (v926 - v927 < v928)
  {
    sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v926 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
    *(_QWORD *)(a2 + 48) -= v928;
  }
  else
  {
    v929 = v926 - v928;
    *(_QWORD *)(a2 + 48) = v929;
    if (!v928)
      goto LABEL_1503;
  }
  v930 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(a2 + 48) + v930++) = 0;
  while (v928 != v930);
  v929 = *(_QWORD *)(a2 + 48);
  v927 = *(_QWORD *)(a2 + 56);
LABEL_1503:
  if ((unint64_t)(v929 - v927) <= 3)
  {
    sub_1C4D663A4((uint64_t *)a2, 4uLL);
    v929 = *(_QWORD *)(a2 + 48);
  }
  *(_DWORD *)(v929 - 4) = 0;
  v931 = v929 - 4;
  *(_QWORD *)(a2 + 48) = v931;
  sub_1C4D66288((uint64_t *)a2, 12, *(_DWORD *)(a2 + 32) - v931 + *(_DWORD *)(a2 + 40));
  if (*(_BYTE *)(a2 + 80))
  {
    if (*(_QWORD *)(a2 + 72) <= 3uLL)
      *(_QWORD *)(a2 + 72) = 4;
    v932 = *(_QWORD *)(a2 + 48);
    v933 = *(_QWORD *)(a2 + 56);
    v934 = ((_BYTE)v932 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
    if (v932 - v933 < v934)
    {
      sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v932 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
      *(_QWORD *)(a2 + 48) -= v934;
    }
    else
    {
      v935 = v932 - v934;
      *(_QWORD *)(a2 + 48) = v935;
      if (!v934)
      {
LABEL_1513:
        if ((unint64_t)(v935 - v933) <= 3)
        {
          sub_1C4D663A4((uint64_t *)a2, 4uLL);
          v935 = *(_QWORD *)(a2 + 48);
        }
        *(_DWORD *)(v935 - 4) = 0;
        v937 = v935 - 4;
        *(_QWORD *)(a2 + 48) = v937;
        sub_1C4D66288((uint64_t *)a2, 6, *(_DWORD *)(a2 + 32) - v937 + *(_DWORD *)(a2 + 40));
        goto LABEL_1516;
      }
    }
    v936 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(a2 + 48) + v936++) = 0;
    while (v934 != v936);
    v935 = *(_QWORD *)(a2 + 48);
    v933 = *(_QWORD *)(a2 + 56);
    goto LABEL_1513;
  }
LABEL_1516:
  v938 = sub_1C4D66580(a2, (unsigned __int16)v905 - (unsigned __int16)v906 + v908);
  v939 = v938;
  if (v897 < v1477)
  {
    *(_DWORD *)v897 = v938;
    v897 += 4;
    goto LABEL_1535;
  }
  v940 = v571;
  v941 = (v897 - v571) >> 2;
  v942 = v941 + 1;
  if ((unint64_t)(v941 + 1) >> 62)
    goto LABEL_2202;
  if ((v1477 - v571) >> 1 > v942)
    v942 = (v1477 - v571) >> 1;
  if ((unint64_t)(v1477 - v571) >= 0x7FFFFFFFFFFFFFFCLL)
    v943 = 0x3FFFFFFFFFFFFFFFLL;
  else
    v943 = v942;
  if (v943)
  {
    if (!(v943 >> 62))
    {
      v944 = (char *)operator new(4 * v943);
      v940 = v571;
      goto LABEL_1529;
    }
LABEL_2204:
    sub_1C4764EE4();
  }
  v944 = 0;
LABEL_1529:
  v945 = &v944[4 * v941];
  v1477 = &v944[4 * v943];
  *(_DWORD *)v945 = v939;
  v946 = v945 + 4;
  while (v897 != v940)
  {
    v947 = *((_DWORD *)v897 - 1);
    v897 -= 4;
    *((_DWORD *)v945 - 1) = v947;
    v945 -= 4;
  }
  if (v940)
    operator delete(v940);
  v1451 = v945;
  v897 = v946;
LABEL_1535:
  ((void (*)(std::string *__return_ptr, _QWORD **, uint64_t))(*v558)[16])(&__dst, v558, 6);
  ((void (*)(_QWORD **__return_ptr, _QWORD **, uint64_t))(*v558)[17])(&v1480, v558, 6);
  v948 = v1480;
  v1407 = __dst.__r_.__value_.__r.__words[0];
  if (__dst.__r_.__value_.__r.__words[0])
  {
    (*(void (**)(std::string *__return_ptr))(*(_QWORD *)__dst.__r_.__value_.__l.__data_ + 16))(&__dst);
    v949 = __dst.__r_.__value_.__r.__words[0];
  }
  else
  {
    v949 = 0;
  }
  v1400 = v948;
  (*(void (**)(std::string *__return_ptr, _QWORD *))(*v948 + 16))(&__dst, v948);
  v950 = __dst.__r_.__value_.__r.__words[0];
  if (((*(uint64_t (**)(std::string::size_type, std::string::size_type))(*(_QWORD *)v949 + 24))(v949, __dst.__r_.__value_.__r.__words[0]) & 1) == 0)
  {
    v1444 = v950;
    while (1)
    {
      __dst.__r_.__value_.__r.__words[0] = 0;
      __dst.__r_.__value_.__r.__words[0] = *(_QWORD *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v949 + 32))(v949);
      v1023 = sub_1C485BD74((uint64_t)v1496, &__dst);
      v1024 = (_QWORD *)(v1023[1] - 8 * *(unsigned int *)(v1023[1] + 8));
      v1025 = *(_QWORD *)(v1024[1] + 128);
      v1026 = *(_QWORD *)(v1024[2] + 128);
      v1027 = *(_QWORD *)(v1024[3] + 128);
      v1028 = ((uint64_t (*)(_QWORD **))(*v558)[42])(v558);
      v1029 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v1028 + 24))(v1028, 7);
      v1030 = ((uint64_t (*)(_QWORD **, std::string::size_type))(*v558)[50])(v558, __dst.__r_.__value_.__r.__words[0]);
      v1031 = v1460;
      if ((v1029 + HIDWORD(v1030) - 1) / v1029 + v1030 > v1460)
        v1031 = (v1029 + HIDWORD(v1030) - 1) / v1029 + v1030;
      v1460 = v1031;
      if ((((v1030 & 0xF00000000) != 0) & (*(unsigned __int8 (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)*v1409 + 920))(*v1409, v1409[39], a5)) != 0)v1032 = (HIDWORD(v1030) + 15) & 0xFFFFFFF0;
      else
        v1032 = HIDWORD(v1030);
      v1033 = (unint64_t *)(v1027 + 24);
      if (*(_DWORD *)(v1027 + 32) >= 0x41u)
        v1033 = (unint64_t *)*v1033;
      v1457 = *v1033;
      *(_BYTE *)(a2 + 70) = 1;
      v1035 = *(_QWORD *)(a2 + 40);
      v1034 = *(_QWORD *)(a2 + 48);
      v1468 = *(_QWORD *)(a2 + 32);
      if (v1029 <= v1032 || *(_BYTE *)(a2 + 80))
        break;
LABEL_1680:
      v1042 = (_QWORD *)(v1025 + 24);
      if (*(_DWORD *)(v1025 + 32) >= 0x41u)
        v1042 = (_QWORD *)*v1042;
      v558 = v1471;
      v1043 = *(_BYTE *)v1042;
      if (*(_BYTE *)v1042 | *(_BYTE *)(a2 + 80))
      {
        if (!*(_QWORD *)(a2 + 72))
          *(_QWORD *)(a2 + 72) = 1;
        v1044 = *(_QWORD *)(a2 + 48);
        if (v1044 == *(_QWORD *)(a2 + 56))
        {
          sub_1C4D663A4((uint64_t *)a2, 1uLL);
          v1044 = *(_QWORD *)(a2 + 48);
        }
        *(_QWORD *)(a2 + 48) = v1044 - 1;
        *(_BYTE *)(v1044 - 1) = v1043;
        sub_1C4D66288((uint64_t *)a2, 4, *(_DWORD *)(a2 + 32) - *(_DWORD *)(a2 + 48) + *(_DWORD *)(a2 + 40));
      }
      v1045 = (_QWORD *)(v1026 + 24);
      if (*(_DWORD *)(v1026 + 32) >= 0x41u)
        v1045 = (_QWORD *)*v1045;
      v1046 = *(_DWORD *)v1045;
      if (*(_DWORD *)v1045 || (v1047 = *(unsigned __int8 *)(a2 + 80), *(_BYTE *)(a2 + 80)))
      {
        v1048 = v1035;
        if (*(_QWORD *)(a2 + 72) <= 3uLL)
          *(_QWORD *)(a2 + 72) = 4;
        v1049 = *(_QWORD *)(a2 + 48);
        v1050 = *(_QWORD *)(a2 + 56);
        v1051 = ((_BYTE)v1049 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
        if (v1049 - v1050 >= v1051)
        {
          v1052 = v1049 - v1051;
          *(_QWORD *)(a2 + 48) = v1052;
          if (v1051)
          {
LABEL_1696:
            v1053 = 0;
            do
              *(_BYTE *)(*(_QWORD *)(a2 + 48) + v1053++) = 0;
            while (v1051 != v1053);
            v1052 = *(_QWORD *)(a2 + 48);
            v1050 = *(_QWORD *)(a2 + 56);
          }
          LOWORD(v1035) = v1048;
          if ((unint64_t)(v1052 - v1050) <= 3)
          {
            sub_1C4D663A4((uint64_t *)a2, 4uLL);
            v1052 = *(_QWORD *)(a2 + 48);
          }
          *(_DWORD *)(v1052 - 4) = v1046;
          v1054 = v1052 - 4;
          *(_QWORD *)(a2 + 48) = v1054;
          sub_1C4D66288((uint64_t *)a2, 6, *(_DWORD *)(a2 + 32) - v1054 + *(_DWORD *)(a2 + 40));
          v1047 = *(unsigned __int8 *)(a2 + 80);
          goto LABEL_1702;
        }
        sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v1049 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
        *(_QWORD *)(a2 + 48) -= v1051;
        goto LABEL_1696;
      }
LABEL_1702:
      v1055 = v1457 / v1029;
      v1056 = v1055 | v1047;
      if (!v1056)
        goto LABEL_1713;
      if (*(_QWORD *)(a2 + 72) <= 3uLL)
        *(_QWORD *)(a2 + 72) = 4;
      v1057 = *(_QWORD *)(a2 + 48);
      v1058 = *(_QWORD *)(a2 + 56);
      v1059 = ((_BYTE)v1057 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
      if (v1057 - v1058 < v1059)
      {
        sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v1057 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
        *(_QWORD *)(a2 + 48) -= v1059;
LABEL_1707:
        v1061 = 0;
        do
          *(_BYTE *)(*(_QWORD *)(a2 + 48) + v1061++) = 0;
        while (v1059 != v1061);
        v1060 = *(_QWORD *)(a2 + 48);
        v1058 = *(_QWORD *)(a2 + 56);
        goto LABEL_1710;
      }
      v1060 = v1057 - v1059;
      *(_QWORD *)(a2 + 48) = v1060;
      if (v1059)
        goto LABEL_1707;
LABEL_1710:
      if ((unint64_t)(v1060 - v1058) <= 3)
      {
        sub_1C4D663A4((uint64_t *)a2, 4uLL);
        v1060 = *(_QWORD *)(a2 + 48);
      }
      *(_DWORD *)(v1060 - 4) = v1055;
      v1062 = v1060 - 4;
      *(_QWORD *)(a2 + 48) = v1062;
      sub_1C4D66288((uint64_t *)a2, 12, *(_DWORD *)(a2 + 32) - v1062 + *(_DWORD *)(a2 + 40));
      v1056 = *(unsigned __int8 *)(a2 + 80);
LABEL_1713:
      if (v1030 | v1056)
      {
        if (*(_QWORD *)(a2 + 72) <= 3uLL)
          *(_QWORD *)(a2 + 72) = 4;
        v1063 = *(_QWORD *)(a2 + 48);
        v1064 = *(_QWORD *)(a2 + 56);
        v1065 = ((_BYTE)v1063 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
        if (v1063 - v1064 >= v1065)
        {
          v1066 = v1063 - v1065;
          *(_QWORD *)(a2 + 48) = v1066;
          if (v1065)
          {
LABEL_1718:
            v1067 = 0;
            do
              *(_BYTE *)(*(_QWORD *)(a2 + 48) + v1067++) = 0;
            while (v1065 != v1067);
            v1066 = *(_QWORD *)(a2 + 48);
            v1064 = *(_QWORD *)(a2 + 56);
          }
          if ((unint64_t)(v1066 - v1064) <= 3)
          {
            sub_1C4D663A4((uint64_t *)a2, 4uLL);
            v1066 = *(_QWORD *)(a2 + 48);
          }
          *(_DWORD *)(v1066 - 4) = v1030;
          v1068 = v1066 - 4;
          *(_QWORD *)(a2 + 48) = v1068;
          sub_1C4D66288((uint64_t *)a2, 10, *(_DWORD *)(a2 + 32) - v1068 + *(_DWORD *)(a2 + 40));
          goto LABEL_1724;
        }
        sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v1063 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
        *(_QWORD *)(a2 + 48) -= v1065;
        goto LABEL_1718;
      }
LABEL_1724:
      v1069 = sub_1C4D66580(a2, (unsigned __int16)v1468 - (unsigned __int16)v1034 + (unsigned __int16)v1035);
      v1070 = v1069;
      if (v897 >= v1477)
      {
        v1071 = v1451;
        v1072 = (v897 - v1451) >> 2;
        v1073 = v1072 + 1;
        if ((unint64_t)(v1072 + 1) >> 62)
          goto LABEL_2202;
        if ((v1477 - v1451) >> 1 > v1073)
          v1073 = (v1477 - v1451) >> 1;
        if ((unint64_t)(v1477 - v1451) >= 0x7FFFFFFFFFFFFFFCLL)
          v1074 = 0x3FFFFFFFFFFFFFFFLL;
        else
          v1074 = v1073;
        if (v1074)
        {
          if (v1074 >> 62)
            goto LABEL_2204;
          v1075 = (char *)operator new(4 * v1074);
          v1071 = v1451;
        }
        else
        {
          v1075 = 0;
        }
        v1076 = &v1075[4 * v1072];
        *(_DWORD *)v1076 = v1070;
        v951 = v1076 + 4;
        if (v897 == v1071)
        {
          v950 = v1444;
        }
        else
        {
          v950 = v1444;
          do
          {
            v1077 = *((_DWORD *)v897 - 1);
            v897 -= 4;
            *((_DWORD *)v1076 - 1) = v1077;
            v1076 -= 4;
          }
          while (v897 != v1071);
        }
        v1477 = &v1075[4 * v1074];
        if (v1071)
          operator delete(v1071);
        v1451 = v1076;
      }
      else
      {
        *(_DWORD *)v897 = v1069;
        v951 = v897 + 4;
        v950 = v1444;
      }
      (*(void (**)(std::string::size_type))(*(_QWORD *)v949 + 40))(v949);
      v897 = v951;
      if (((*(uint64_t (**)(std::string::size_type, std::string::size_type))(*(_QWORD *)v949 + 24))(v949, v950) & 1) != 0)goto LABEL_1539;
    }
    v1436 = v1030;
    v1030 = v949;
    if (*(_QWORD *)(a2 + 72) <= 3uLL)
      *(_QWORD *)(a2 + 72) = 4;
    v1036 = v1035;
    v1037 = ((_BYTE)v1034 - ((_BYTE)v1468 + (_BYTE)v1035)) & 3;
    v1038 = *(_QWORD *)(a2 + 56);
    if (v1034 - v1038 < v1037)
    {
      sub_1C4D663A4((uint64_t *)a2, v1037);
      *(_QWORD *)(a2 + 48) -= v1037;
    }
    else
    {
      v1039 = v1034 - v1037;
      *(_QWORD *)(a2 + 48) = v1034 - v1037;
      if (!v1037)
      {
LABEL_1677:
        LOWORD(v1035) = v1036;
        if ((unint64_t)(v1039 - v1038) <= 3)
        {
          sub_1C4D663A4((uint64_t *)a2, 4uLL);
          v1039 = *(_QWORD *)(a2 + 48);
        }
        *(_DWORD *)(v1039 - 4) = v1032 / v1029;
        v1041 = v1039 - 4;
        *(_QWORD *)(a2 + 48) = v1041;
        sub_1C4D66288((uint64_t *)a2, 8, *(_DWORD *)(a2 + 32) - v1041 + *(_DWORD *)(a2 + 40));
        v949 = v1030;
        LODWORD(v1030) = v1436;
        goto LABEL_1680;
      }
    }
    v1040 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(a2 + 48) + v1040++) = 0;
    while (v1037 != v1040);
    v1039 = *(_QWORD *)(a2 + 48);
    v1038 = *(_QWORD *)(a2 + 56);
    goto LABEL_1677;
  }
  v951 = v897;
LABEL_1539:
  if (v950)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v950 + 8))(v950);
  (*(void (**)(std::string::size_type))(*(_QWORD *)v949 + 8))(v949);
  (*(void (**)(_QWORD *))(*v1400 + 8))(v1400);
  v952 = v1460;
  if (v1407)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v1407 + 8))(v1407);
  ((void (*)(std::string *__return_ptr, _QWORD **, uint64_t))(*v558)[16])(&__dst, v558, 7);
  ((void (*)(_QWORD **__return_ptr, _QWORD **, uint64_t))(*v558)[17])(&v1480, v558, 7);
  v953 = __dst.__r_.__value_.__r.__words[0];
  v954 = v1480;
  if (__dst.__r_.__value_.__r.__words[0])
  {
    (*(void (**)(std::string *__return_ptr, std::string::size_type))(*(_QWORD *)__dst.__r_.__value_.__l.__data_
                                                                              + 16))(&__dst, __dst.__r_.__value_.__r.__words[0]);
    v955 = __dst.__r_.__value_.__r.__words[0];
  }
  else
  {
    v955 = 0;
  }
  (*(void (**)(std::string *__return_ptr, _QWORD *))(*v954 + 16))(&__dst, v954);
  v956 = __dst.__r_.__value_.__r.__words[0];
  while (((*(uint64_t (**)(std::string::size_type, std::string::size_type))(*(_QWORD *)v955 + 24))(v955, v956) & 1) == 0)
  {
    v957 = *(_QWORD *)(*(uint64_t (**)(std::string::size_type))(*(_QWORD *)v955 + 32))(v955);
    v958 = ((uint64_t (*)(_QWORD **))(*v558)[42])(v558);
    v959 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v958 + 24))(v958, 8);
    v960 = ((uint64_t (*)(_QWORD **, uint64_t))(*v558)[50])(v558, v957);
    if ((v959 + HIDWORD(v960) - 1) / v959 + v960 > v952)
      v952 = (v959 + HIDWORD(v960) - 1) / v959 + v960;
    (*(void (**)(std::string::size_type))(*(_QWORD *)v955 + 40))(v955);
  }
  if (v956)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v956 + 8))(v956);
  (*(void (**)(std::string::size_type))(*(_QWORD *)v955 + 8))(v955);
  (*(void (**)(_QWORD *))(*v954 + 8))(v954);
  if (v953)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v953 + 8))(v953);
  v961 = v1451;
  v962 = v951 - v1451;
  if (v951 == v1451)
    v963 = (char *)&flatbuffers::data<flatbuffers::Offset<AGCCodeGenerator::DMAInfo>,std::allocator<flatbuffers::Offset<AGCCodeGenerator::DMAInfo>>>(std::vector<flatbuffers::Offset<AGCCodeGenerator::DMAInfo>> const&)::t;
  else
    v963 = v1451;
  *(_BYTE *)(a2 + 70) = 1;
  if (*(_QWORD *)(a2 + 72) <= 3uLL)
    *(_QWORD *)(a2 + 72) = 4;
  v964 = *(_QWORD *)(a2 + 48);
  v965 = ((_BYTE)v964 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
  v966 = v1398;
  if (v964 - *(_QWORD *)(a2 + 56) < v965)
  {
    sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v964 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
    v961 = v1451;
    v966 = v1398;
    *(_QWORD *)(a2 + 48) -= v965;
  }
  else
  {
    *(_QWORD *)(a2 + 48) = v964 - v965;
    if (!v965)
      goto LABEL_1565;
  }
  v967 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(a2 + 48) + v967++) = 0;
  while (v965 != v967);
  if (*(_QWORD *)(a2 + 72) <= 3uLL)
    *(_QWORD *)(a2 + 72) = 4;
LABEL_1565:
  v968 = *(_QWORD *)(a2 + 48);
  v969 = ((_BYTE)v968 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
  if (v968 - *(_QWORD *)(a2 + 56) < v969)
  {
    sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v968 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
    v961 = v1451;
    v966 = v1398;
    *(_QWORD *)(a2 + 48) -= v969;
  }
  else
  {
    *(_QWORD *)(a2 + 48) = v968 - v969;
    if (!v969)
      goto LABEL_1569;
  }
  v970 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(a2 + 48) + v970++) = 0;
  while (v969 != v970);
LABEL_1569:
  if (v961 != v951)
  {
    v971 = v962 >> 2;
    do
    {
      --v971;
      v972 = *(_DWORD *)&v963[4 * v971];
      if (*(_QWORD *)(a2 + 72) <= 3uLL)
        *(_QWORD *)(a2 + 72) = 4;
      v973 = *(_QWORD *)(a2 + 32);
      v974 = *(_QWORD *)(a2 + 40);
      v975 = *(_QWORD *)(a2 + 48);
      v976 = ((int)v975 - ((int)v973 + (int)v974)) & 3;
      if (v975 - *(_QWORD *)(a2 + 56) < v976)
      {
        sub_1C4D663A4((uint64_t *)a2, ((int)v975 - ((int)v973 + (int)v974)) & 3);
        v966 = v1398;
        *(_QWORD *)(a2 + 48) -= v976;
      }
      else
      {
        v977 = v975 - v976;
        *(_QWORD *)(a2 + 48) = v977;
        if (!v976)
        {
          v978 = v973 + v974 - v977;
          goto LABEL_1581;
        }
      }
      v979 = 0;
      do
        *(_BYTE *)(*(_QWORD *)(a2 + 48) + v979++) = 0;
      while (v976 != v979);
      v974 = *(_QWORD *)(a2 + 40);
      v977 = *(_QWORD *)(a2 + 48);
      v973 = *(_QWORD *)(a2 + 32);
      v978 = v973 - v977 + v974;
      if (*(_QWORD *)(a2 + 72) <= 3uLL)
        *(_QWORD *)(a2 + 72) = 4;
LABEL_1581:
      v980 = ((_BYTE)v977 - ((_BYTE)v973 + (_BYTE)v974)) & 3;
      v981 = *(_QWORD *)(a2 + 56);
      if (v977 - v981 < v980)
      {
        sub_1C4D663A4((uint64_t *)a2, v980);
        v966 = v1398;
        *(_QWORD *)(a2 + 48) -= v980;
LABEL_1583:
        v983 = 0;
        do
          *(_BYTE *)(*(_QWORD *)(a2 + 48) + v983++) = 0;
        while (v980 != v983);
        v982 = *(_QWORD *)(a2 + 48);
        v981 = *(_QWORD *)(a2 + 56);
        goto LABEL_1586;
      }
      v982 = v977 - v980;
      *(_QWORD *)(a2 + 48) = v977 - v980;
      if (v980)
        goto LABEL_1583;
LABEL_1586:
      if ((unint64_t)(v982 - v981) <= 3)
      {
        sub_1C4D663A4((uint64_t *)a2, 4uLL);
        v966 = v1398;
        v982 = *(_QWORD *)(a2 + 48);
      }
      *(_DWORD *)(v982 - 4) = v978 - v972 + 4;
      *(_QWORD *)(a2 + 48) = v982 - 4;
    }
    while (v971);
  }
  *(_BYTE *)(a2 + 70) = 0;
  if (*(_QWORD *)(a2 + 72) <= 3uLL)
    *(_QWORD *)(a2 + 72) = 4;
  v985 = *(_QWORD *)(a2 + 48);
  v984 = *(_QWORD *)(a2 + 56);
  v986 = ((_BYTE)v985 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
  if (v985 - v984 < v986)
  {
    sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v985 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
    v966 = v1398;
    *(_QWORD *)(a2 + 48) -= v986;
  }
  else
  {
    v987 = v985 - v986;
    *(_QWORD *)(a2 + 48) = v987;
    if (!v986)
      goto LABEL_1598;
  }
  v988 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(a2 + 48) + v988++) = 0;
  while (v986 != v988);
  v987 = *(_QWORD *)(a2 + 48);
  v984 = *(_QWORD *)(a2 + 56);
LABEL_1598:
  if ((unint64_t)(v987 - v984) <= 3)
  {
    sub_1C4D663A4((uint64_t *)a2, 4uLL);
    v966 = v1398;
    v987 = *(_QWORD *)(a2 + 48);
  }
  *(_DWORD *)(v987 - 4) = (unint64_t)v962 >> 2;
  v989 = v987 - 4;
  *(_QWORD *)(a2 + 48) = v989;
  v991 = *(_QWORD *)(a2 + 32);
  v990 = *(_QWORD *)(a2 + 40);
  v992 = v1367 - v966;
  if (v1367 == v966)
    v993 = (char *)&flatbuffers::data<flatbuffers::Offset<AGCCodeGenerator::BufferBinding>,std::allocator<flatbuffers::Offset<AGCCodeGenerator::BufferBinding>>>(std::vector<flatbuffers::Offset<AGCCodeGenerator::BufferBinding>> const&)::t;
  else
    v993 = v966;
  *(_BYTE *)(a2 + 70) = 1;
  if (*(_QWORD *)(a2 + 72) <= 3uLL)
    *(_QWORD *)(a2 + 72) = 4;
  v994 = ((_BYTE)v989 - ((_BYTE)v991 + (_BYTE)v990)) & 3;
  v1408 = v989;
  if (v989 - *(_QWORD *)(a2 + 56) < v994)
  {
    sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v989 - ((_BYTE)v991 + (_BYTE)v990)) & 3);
    v966 = v1398;
    *(_QWORD *)(a2 + 48) -= v994;
  }
  else
  {
    *(_QWORD *)(a2 + 48) = v989 - v994;
    if ((((_BYTE)v989 - ((_BYTE)v991 + (_BYTE)v990)) & 3) == 0)
      goto LABEL_1611;
  }
  v995 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(a2 + 48) + v995++) = 0;
  while (v994 != v995);
  if (*(_QWORD *)(a2 + 72) <= 3uLL)
    *(_QWORD *)(a2 + 72) = 4;
LABEL_1611:
  v996 = *(_QWORD *)(a2 + 48);
  v997 = ((_BYTE)v996 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
  v1405 = v990;
  v1401 = v991;
  if (v996 - *(_QWORD *)(a2 + 56) < v997)
  {
    sub_1C4D663A4((uint64_t *)a2, v997);
    v966 = v1398;
    *(_QWORD *)(a2 + 48) -= v997;
  }
  else
  {
    *(_QWORD *)(a2 + 48) = v996 - v997;
    if (!v997)
      goto LABEL_1615;
  }
  v998 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(a2 + 48) + v998++) = 0;
  while (v997 != v998);
LABEL_1615:
  if (v966 != v1367)
  {
    v999 = v992 >> 2;
    do
    {
      --v999;
      v1000 = *(_DWORD *)&v993[4 * v999];
      if (*(_QWORD *)(a2 + 72) <= 3uLL)
        *(_QWORD *)(a2 + 72) = 4;
      v1001 = *(_QWORD *)(a2 + 32);
      v1002 = *(_QWORD *)(a2 + 40);
      v1003 = *(_QWORD *)(a2 + 48);
      v1004 = ((int)v1003 - ((int)v1001 + (int)v1002)) & 3;
      if (v1003 - *(_QWORD *)(a2 + 56) < v1004)
      {
        sub_1C4D663A4((uint64_t *)a2, ((int)v1003 - ((int)v1001 + (int)v1002)) & 3);
        *(_QWORD *)(a2 + 48) -= v1004;
      }
      else
      {
        v1005 = v1003 - v1004;
        *(_QWORD *)(a2 + 48) = v1005;
        if (!v1004)
        {
          v1006 = v1001 + v1002 - v1005;
          goto LABEL_1627;
        }
      }
      v1007 = 0;
      do
        *(_BYTE *)(*(_QWORD *)(a2 + 48) + v1007++) = 0;
      while (v1004 != v1007);
      v1002 = *(_QWORD *)(a2 + 40);
      v1005 = *(_QWORD *)(a2 + 48);
      v1001 = *(_QWORD *)(a2 + 32);
      v1006 = v1001 - v1005 + v1002;
      if (*(_QWORD *)(a2 + 72) <= 3uLL)
        *(_QWORD *)(a2 + 72) = 4;
LABEL_1627:
      v1008 = ((_BYTE)v1005 - ((_BYTE)v1001 + (_BYTE)v1002)) & 3;
      v1009 = *(_QWORD *)(a2 + 56);
      if (v1005 - v1009 < v1008)
      {
        sub_1C4D663A4((uint64_t *)a2, v1008);
        *(_QWORD *)(a2 + 48) -= v1008;
LABEL_1629:
        v1011 = 0;
        do
          *(_BYTE *)(*(_QWORD *)(a2 + 48) + v1011++) = 0;
        while (v1008 != v1011);
        v1010 = *(_QWORD *)(a2 + 48);
        v1009 = *(_QWORD *)(a2 + 56);
        goto LABEL_1632;
      }
      v1010 = v1005 - v1008;
      *(_QWORD *)(a2 + 48) = v1005 - v1008;
      if (v1008)
        goto LABEL_1629;
LABEL_1632:
      if ((unint64_t)(v1010 - v1009) <= 3)
      {
        sub_1C4D663A4((uint64_t *)a2, 4uLL);
        v1010 = *(_QWORD *)(a2 + 48);
      }
      *(_DWORD *)(v1010 - 4) = v1006 - v1000 + 4;
      *(_QWORD *)(a2 + 48) = v1010 - 4;
    }
    while (v999);
  }
  *(_BYTE *)(a2 + 70) = 0;
  if (*(_QWORD *)(a2 + 72) <= 3uLL)
    *(_QWORD *)(a2 + 72) = 4;
  v1013 = *(_QWORD *)(a2 + 48);
  v1012 = *(_QWORD *)(a2 + 56);
  v1014 = ((_BYTE)v1013 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
  if (v1013 - v1012 < v1014)
  {
    sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v1013 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
    *(_QWORD *)(a2 + 48) -= v1014;
  }
  else
  {
    v1015 = v1013 - v1014;
    *(_QWORD *)(a2 + 48) = v1013 - v1014;
    if (!v1014)
      goto LABEL_1644;
  }
  v1016 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(a2 + 48) + v1016++) = 0;
  while (v1014 != v1016);
  v1015 = *(_QWORD *)(a2 + 48);
  v1012 = *(_QWORD *)(a2 + 56);
LABEL_1644:
  v1017 = v1362;
  if ((unint64_t)(v1015 - v1012) <= 3)
  {
    sub_1C4D663A4((uint64_t *)a2, 4uLL);
    v1017 = v1362;
    v1015 = *(_QWORD *)(a2 + 48);
  }
  v1461 = v952;
  *(_DWORD *)(v1015 - 4) = (unint64_t)v992 >> 2;
  v1397 = v1015 - 4;
  *(_QWORD *)(a2 + 48) = v1015 - 4;
  v1388 = *(_DWORD *)(a2 + 32);
  v1393 = *(_DWORD *)(a2 + 40);
  if (v1017 == v1366)
    v1018 = (char *)&flatbuffers::data<flatbuffers::Offset<AGCCodeGenerator::TextureBinding>,std::allocator<flatbuffers::Offset<AGCCodeGenerator::TextureBinding>>>(std::vector<flatbuffers::Offset<AGCCodeGenerator::TextureBinding>> const&)::t;
  else
    v1018 = v1366;
  v1435 = sub_1C5589B94(a2, (uint64_t)v1018, (v1017 - v1366) >> 2);
  if (v1359 == v1365)
    v1019 = (char *)&flatbuffers::data<flatbuffers::Offset<AGCCodeGenerator::TextureBinding>,std::allocator<flatbuffers::Offset<AGCCodeGenerator::TextureBinding>>>(std::vector<flatbuffers::Offset<AGCCodeGenerator::TextureBinding>> const&)::t;
  else
    v1019 = v1365;
  v1443 = sub_1C5589B94(a2, (uint64_t)v1019, (v1359 - v1365) >> 2);
  if (v1402 == v1411)
    v1020 = (char *)&flatbuffers::data<flatbuffers::Offset<AGCCodeGenerator::ConstantBinding>,std::allocator<flatbuffers::Offset<AGCCodeGenerator::ConstantBinding>>>(std::vector<flatbuffers::Offset<AGCCodeGenerator::ConstantBinding>> const&)::t;
  else
    v1020 = v1411;
  v1456 = sub_1C5589B94(a2, (uint64_t)v1020, (v1402 - v1411) >> 2);
  if (*(void **)v1483 == v1482)
    v1021 = &flatbuffers::data<flatbuffers::Offset<AGCCodeGenerator::ConstantBinding>,std::allocator<flatbuffers::Offset<AGCCodeGenerator::ConstantBinding>>>(std::vector<flatbuffers::Offset<AGCCodeGenerator::ConstantBinding>> const&)::t;
  else
    v1021 = v1482;
  v1467 = sub_1C5589B94(a2, (uint64_t)v1021, (uint64_t)(*(_QWORD *)v1483 - (_QWORD)v1482) >> 2);
  ((void (*)(_QWORD **__return_ptr, _QWORD **))(*v558)[37])(&v1480, v558);
  ((void (*)(std::string::size_type *__return_ptr, _QWORD **))(*v558)[38])(&__dst.__r_.__value_.__l.__size_, v558);
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v1480;
  sub_1C4E40408((uint64_t *)&v1480, (uint64_t)&__dst);
  sub_1C4E40408(&v1487, (uint64_t)&__dst.__r_.__value_.__l.__size_);
  if (((*(uint64_t (**)(_QWORD *, uint64_t))(*v1480 + 24))(v1480, v1487) & 1) != 0)
  {
    v1478 = 0;
    v1022 = 0;
  }
  else
  {
    v1478 = 0;
    v1078 = 0;
    v1079 = 0;
    do
    {
      v1080 = *(_DWORD *)(*(uint64_t (**)(_QWORD *))(*v1480 + 32))(v1480);
      LODWORD(__src) = v1080;
      if (v1079 - v1078 >= 4)
      {
        v558 = v1471;
        memmove(v1078, &__src, 4uLL);
        v1022 = (uint64_t)(v1078 + 4);
      }
      else
      {
        v1081 = v1478;
        v1082 = v1078 - v1478;
        v1083 = v1078 - v1478 + 4;
        if (v1083 < 0)
          goto LABEL_2202;
        if (2 * (v1079 - v1478) > (unint64_t)v1083)
          v1083 = 2 * (v1079 - v1478);
        if ((unint64_t)(v1079 - v1478) >= 0x3FFFFFFFFFFFFFFFLL)
          v1084 = 0x7FFFFFFFFFFFFFFFLL;
        else
          v1084 = v1083;
        if (v1084)
        {
          v1085 = (char *)operator new(v1084);
          v1081 = v1478;
        }
        else
        {
          v1085 = 0;
        }
        v1086 = &v1085[v1082];
        *(_DWORD *)&v1085[v1082] = v1080;
        v1022 = (uint64_t)&v1085[v1082 + 4];
        if (v1081 == v1078)
        {
          v558 = v1471;
        }
        else
        {
          v558 = v1471;
          do
          {
            v1085[v1082 - 1] = v1081[v1082 - 1];
            --v1082;
          }
          while (v1082);
          v1086 = v1085;
        }
        v1079 = &v1085[v1084];
        if (v1081)
          operator delete(v1081);
        v1478 = v1086;
      }
      (*(void (**)(_QWORD *))(*v1480 + 40))(v1480);
      v1078 = (char *)v1022;
    }
    while (((*(uint64_t (**)(_QWORD *, uint64_t))(*v1480 + 24))(v1480, v1487) & 1) == 0);
  }
  v1087 = v1487;
  v1487 = 0;
  if (v1087)
    (*(void (**)(uint64_t))(*(_QWORD *)v1087 + 8))(v1087);
  v1088 = v1480;
  v1480 = 0;
  v1089 = v1374;
  if (v1088)
    (*(void (**)(_QWORD *))(*v1088 + 8))(v1088);
  v1090 = __dst.__r_.__value_.__l.__size_;
  __dst.__r_.__value_.__l.__size_ = 0;
  if (v1090)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v1090 + 8))(v1090);
  v1091 = __dst.__r_.__value_.__r.__words[0];
  __dst.__r_.__value_.__r.__words[0] = 0;
  if (v1091)
    (*(void (**)(std::string::size_type))(*(_QWORD *)v1091 + 8))(v1091);
  v1092 = v1478;
  v1093 = v1022 - (_QWORD)v1478;
  *(_BYTE *)(a2 + 70) = 1;
  v1094 = *(_QWORD *)(a2 + 72);
  if (v1094 <= 3)
  {
    v1094 = 4;
    *(_QWORD *)(a2 + 72) = 4;
  }
  v1095 = *(_QWORD *)(a2 + 48);
  v1096 = ((_BYTE)v1095 - *(_DWORD *)(a2 + 40) - (*(_BYTE *)(a2 + 32) + (_BYTE)v1093)) & 3;
  if (v1095 - *(_QWORD *)(a2 + 56) < v1096)
  {
    sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v1095 - *(_DWORD *)(a2 + 40) - (*(_BYTE *)(a2 + 32) + (_BYTE)v1093)) & 3);
    v1092 = v1478;
    *(_QWORD *)(a2 + 48) -= v1096;
  }
  else
  {
    *(_QWORD *)(a2 + 48) = v1095 - v1096;
    if (!v1096)
      goto LABEL_1787;
  }
  v1097 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(a2 + 48) + v1097++) = 0;
  while (v1096 != v1097);
  v1094 = *(_QWORD *)(a2 + 72);
  if (!v1094)
  {
    v1094 = 1;
    *(_QWORD *)(a2 + 72) = 1;
  }
LABEL_1787:
  v141 = v1092 == (char *)v1022;
  v1098 = v1409;
  if (!v141)
  {
    v1099 = *(_QWORD *)(a2 + 48);
    if (v1099 - *(_QWORD *)(a2 + 56) < v1093)
    {
      sub_1C4D663A4((uint64_t *)a2, v1093);
      v1099 = *(_QWORD *)(a2 + 48);
    }
    *(_QWORD *)(a2 + 48) = v1099 - v1093;
    memcpy((void *)(v1099 - v1093), v1478, v1093);
    v1094 = *(_QWORD *)(a2 + 72);
  }
  *(_BYTE *)(a2 + 70) = 0;
  if (v1094 <= 3)
    *(_QWORD *)(a2 + 72) = 4;
  v1101 = *(_QWORD *)(a2 + 48);
  v1100 = *(_QWORD *)(a2 + 56);
  v1102 = ((_BYTE)v1101 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
  if (v1101 - v1100 < v1102)
  {
    sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v1101 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
    *(_QWORD *)(a2 + 48) -= v1102;
  }
  else
  {
    v1103 = v1101 - v1102;
    *(_QWORD *)(a2 + 48) = v1103;
    if (!v1102)
      goto LABEL_1798;
  }
  v1104 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(a2 + 48) + v1104++) = 0;
  while (v1102 != v1104);
  v1103 = *(_QWORD *)(a2 + 48);
  v1100 = *(_QWORD *)(a2 + 56);
LABEL_1798:
  if ((unint64_t)(v1103 - v1100) <= 3)
  {
    sub_1C4D663A4((uint64_t *)a2, 4uLL);
    v1103 = *(_QWORD *)(a2 + 48);
  }
  *(_DWORD *)(v1103 - 4) = v1093;
  v1386 = v1103 - 4;
  *(_QWORD *)(a2 + 48) = v1103 - 4;
  v1383 = *(_DWORD *)(a2 + 32);
  v1403 = *(_DWORD *)(a2 + 40);
  v1105 = (uint64_t ***)((uint64_t (*)(_QWORD **, uint64_t))(*v558)[74])(v558, 100);
  v1480 = v1105;
  if (!v1105)
  {
    v1114 = 0;
    goto LABEL_1853;
  }
  if ((*((_BYTE *)v1105 + 23) & 0x10) == 0)
  {
    v1116 = 0;
    *((_BYTE *)&__dst.__r_.__value_.__s + 23) = 0;
    p_dst = &__dst;
    goto LABEL_1818;
  }
  v1106 = ***v1105;
  v1107 = *(_QWORD *)(v1106 + 152);
  v1108 = *(unsigned int *)(v1106 + 168);
  if ((_DWORD)v1108)
  {
    LODWORD(v1109) = (v1108 - 1) & ((v1105 >> 4) ^ (v1105 >> 9));
    v1110 = (uint64_t ****)(v1107 + 16 * v1109);
    v1111 = *v1110;
    if (*v1110 == v1105)
      goto LABEL_1810;
    v1112 = 1;
    while (v1111 != (uint64_t ***)-4096)
    {
      v1113 = v1109 + v1112++;
      v1109 = v1113 & (v1108 - 1);
      v1111 = *(uint64_t ****)(v1107 + 16 * v1109);
      if (v1111 == v1105)
      {
        v1110 = (uint64_t ****)(v1107 + 16 * v1109);
        goto LABEL_1810;
      }
    }
  }
  v1110 = (uint64_t ****)(v1107 + 16 * v1108);
LABEL_1810:
  v1115 = (unint64_t *)v1110[1];
  v1118 = *v1115;
  v1117 = v1115 + 2;
  v1116 = v1118;
  if (v1118 >= 0x7FFFFFFFFFFFFFF8)
    goto LABEL_2202;
  if (v1116 >= 0x17)
  {
    v1120 = (v1116 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((v1116 | 7) != 0x17)
      v1120 = v1116 | 7;
    v1121 = v1120 + 1;
    p_dst = operator new(v1120 + 1);
    __dst.__r_.__value_.__l.__size_ = v1116;
    __dst.__r_.__value_.__r.__words[2] = v1121 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_1817;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = v1116;
  p_dst = &__dst;
  if (v1116)
LABEL_1817:
    memmove(p_dst, v1117, v1116);
LABEL_1818:
  *((_BYTE *)p_dst + v1116) = 0;
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v1122 = &__dst;
  else
    v1122 = (std::string *)__dst.__r_.__value_.__r.__words[0];
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
    v1123 = *((_BYTE *)&__dst.__r_.__value_.__s + 23) & 0x7F;
  else
    v1123 = __dst.__r_.__value_.__l.__size_;
  v1124 = sub_1C4D6889C(a2, v1122, v1123);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v1125 = (void **)((uint64_t (*)(_QWORD **))(*v558)[77])(v558);
  v1126 = (_BYTE *)v1125[1] - (_BYTE *)*v1125;
  if (v1126)
    v1127 = *v1125;
  else
    v1127 = &flatbuffers::data<unsigned int,std::allocator<unsigned int>>(std::vector<unsigned int> const&)::t;
  v1128 = sub_1C5586000(a2, v1127, v1126 >> 2);
  *(_BYTE *)(a2 + 70) = 1;
  v1129 = *(_DWORD *)(a2 + 32);
  v1130 = *(_DWORD *)(a2 + 48);
  v1131 = *(_DWORD *)(a2 + 40);
  sub_1C5589334((uint64_t *)a2, 4, v1124);
  if (!*(_QWORD *)(a2 + 72))
    *(_QWORD *)(a2 + 72) = 1;
  v1132 = *(_QWORD *)(a2 + 48);
  if (v1132 == *(_QWORD *)(a2 + 56))
  {
    sub_1C4D663A4((uint64_t *)a2, 1uLL);
    v1132 = *(_QWORD *)(a2 + 48);
  }
  v1133 = v1129 - v1130 + v1131;
  *(_QWORD *)(a2 + 48) = v1132 - 1;
  *(_BYTE *)(v1132 - 1) = 3;
  sub_1C4D66288((uint64_t *)a2, 6, *(_DWORD *)(a2 + 32) - *(_DWORD *)(a2 + 48) + *(_DWORD *)(a2 + 40));
  v1098 = v1409;
  v1134 = *((_DWORD *)v1409 + 76);
  v1135 = v1480;
  v1136 = v1480 >> 4;
  v1089 = v1374;
  if (v1134)
  {
    v1137 = v1409[36];
    v1138 = v1134 - 1;
    v1139 = (v1136 ^ (v1480 >> 9)) & v1138;
    v1140 = (_QWORD *)(v1137 + 96 * v1139);
    v1141 = (_QWORD *)*v1140;
    if (v1480 == (_QWORD *)*v1140)
      goto LABEL_1835;
    v1259 = 0;
    v1260 = 1;
    while (v1141 != (_QWORD *)-4096)
    {
      if (v1259)
        v1261 = 0;
      else
        v1261 = v1141 == (_QWORD *)-8192;
      if (v1261)
        v1259 = v1140;
      v1262 = v1139 + v1260++;
      v1139 = v1262 & v1138;
      v1140 = (_QWORD *)(v1137 + 96 * v1139);
      v1141 = (_QWORD *)*v1140;
      if (v1480 == (_QWORD *)*v1140)
        goto LABEL_1835;
    }
    if (v1259)
      v1263 = v1259;
    else
      v1263 = v1140;
  }
  else
  {
    v1263 = 0;
  }
  v1140 = sub_1C558AEF8((_DWORD *)v1409 + 72, (uint64_t *)&v1480, v1263);
  *v1140 = v1135;
  *(_OWORD *)(v1140 + 1) = 0u;
  *(_OWORD *)(v1140 + 3) = 0u;
  *(_OWORD *)(v1140 + 5) = 0u;
  *(_OWORD *)(v1140 + 7) = 0u;
  *(_OWORD *)(v1140 + 9) = 0u;
  v1140[11] = 0;
LABEL_1835:
  if (!*((_BYTE *)v1140 + 20))
    goto LABEL_1852;
  v1142 = *((_DWORD *)v1409 + 76);
  if (v1142)
  {
    v1143 = v1409[36];
    v1144 = v1142 - 1;
    v1145 = (v1136 ^ (v1135 >> 9)) & v1144;
    v1146 = (_QWORD *)(v1143 + 96 * v1145);
    v1147 = (_QWORD *)*v1146;
    if (v1135 == (_QWORD *)*v1146)
      goto LABEL_1838;
    v1287 = 0;
    v1288 = 1;
    while (v1147 != (_QWORD *)-4096)
    {
      if (v1287)
        v1289 = 0;
      else
        v1289 = v1147 == (_QWORD *)-8192;
      if (v1289)
        v1287 = v1146;
      v1290 = v1145 + v1288++;
      v1145 = v1290 & v1144;
      v1146 = (_QWORD *)(v1143 + 96 * v1145);
      v1147 = (_QWORD *)*v1146;
      if (v1135 == (_QWORD *)*v1146)
        goto LABEL_1838;
    }
    if (v1287)
      v1291 = v1287;
    else
      v1291 = v1146;
  }
  else
  {
    v1291 = 0;
  }
  v1146 = sub_1C558AEF8((_DWORD *)v1409 + 72, (uint64_t *)&v1480, v1291);
  *v1146 = v1135;
  *(_OWORD *)(v1146 + 1) = 0u;
  *(_OWORD *)(v1146 + 3) = 0u;
  *(_OWORD *)(v1146 + 5) = 0u;
  *(_OWORD *)(v1146 + 7) = 0u;
  *(_OWORD *)(v1146 + 9) = 0u;
  v1146[11] = 0;
LABEL_1838:
  v1148 = *((_DWORD *)v1146 + 4);
  if (v1148)
    v1149 = 0;
  else
    v1149 = *(_BYTE *)(a2 + 80) == 0;
  if (!v1149)
  {
    if (*(_QWORD *)(a2 + 72) <= 3uLL)
      *(_QWORD *)(a2 + 72) = 4;
    v1150 = *(_QWORD *)(a2 + 48);
    v1151 = *(_QWORD *)(a2 + 56);
    v1152 = ((_BYTE)v1150 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
    if (v1150 - v1151 < v1152)
    {
      sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v1150 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
      *(_QWORD *)(a2 + 48) -= v1152;
    }
    else
    {
      v1153 = v1150 - v1152;
      *(_QWORD *)(a2 + 48) = v1153;
      if (!v1152)
      {
LABEL_1849:
        if ((unint64_t)(v1153 - v1151) <= 3)
        {
          sub_1C4D663A4((uint64_t *)a2, 4uLL);
          v1153 = *(_QWORD *)(a2 + 48);
        }
        *(_DWORD *)(v1153 - 4) = v1148;
        v1155 = v1153 - 4;
        *(_QWORD *)(a2 + 48) = v1155;
        sub_1C4D66288((uint64_t *)a2, 8, *(_DWORD *)(a2 + 32) - v1155 + *(_DWORD *)(a2 + 40));
        goto LABEL_1852;
      }
    }
    v1154 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(a2 + 48) + v1154++) = 0;
    while (v1152 != v1154);
    v1153 = *(_QWORD *)(a2 + 48);
    v1151 = *(_QWORD *)(a2 + 56);
    goto LABEL_1849;
  }
LABEL_1852:
  sub_1C5589334((uint64_t *)a2, 10, v1128);
  v1156 = sub_1C4D66580(a2, v1133);
  v1105 = (uint64_t ***)operator new(4uLL);
  *(_DWORD *)v1105 = v1156;
  v1114 = (char *)v1105 + 4;
  v558 = v1471;
LABEL_1853:
  v1157 = v1114 - (char *)v1105;
  v1381 = v1105;
  if (v1157)
    v1158 = v1105;
  else
    v1158 = (uint64_t ***)&flatbuffers::data<flatbuffers::Offset<AGCCodeGenerator::ShaderPhase>,std::allocator<flatbuffers::Offset<AGCCodeGenerator::ShaderPhase>>>(std::vector<flatbuffers::Offset<AGCCodeGenerator::ShaderPhase>> const&)::t;
  v1377 = sub_1C5589EF0(a2, (uint64_t)v1158, v1157 >> 2);
  v1379 = v1363 & 0x1E;
  if (v1379 == 28)
  {
    (*(void (**)(std::string *__return_ptr))(*(_QWORD *)*v1098 + 888))(&__dst);
    v1372 = sub_1C5586000(a2, __dst.__r_.__value_.__l.__data_, LODWORD(__dst.__r_.__value_.__r.__words[1]));
    if ((std::string::size_type *)__dst.__r_.__value_.__l.__data_ != &__dst.__r_.__value_.__r.__words[2])
      free(__dst.__r_.__value_.__l.__data_);
  }
  else
  {
    v1372 = 0;
  }
  if (v1089 == __p)
    v1159 = (char *)&flatbuffers::data<unsigned int,std::allocator<unsigned int>>(std::vector<unsigned int> const&)::t;
  else
    v1159 = __p;
  v1375 = sub_1C5586000(a2, v1159, (v1089 - __p) >> 2);
  v1480 = (_QWORD *)a2;
  *(_BYTE *)(a2 + 70) = 1;
  v1481 = *(_DWORD *)(a2 + 32) - *(_DWORD *)(a2 + 48) + *(_DWORD *)(a2 + 40);
  __dst.__r_.__value_.__r.__words[0] = 0;
  __dst.__r_.__value_.__s.__data_[8] = 0;
  __dst.__r_.__value_.__s.__data_[12] = 0;
  __dst.__r_.__value_.__r.__words[2] = 0;
  v1489 = 0;
  v1490 = 0;
  v1491 = 0;
  v1492 = 0u;
  v1493 = 0u;
  v1494 = 0;
  v1495[0] = 0;
  *(_DWORD *)((char *)v1495 + 3) = 0;
  ((void (*)(uint64_t *__return_ptr, _QWORD **))(*v558)[9])(&v1487, v558);
  ((void (*)(uint64_t *__return_ptr, _QWORD **))(*v558)[10])(&__src, v558);
  v1161 = __src;
  v1160 = v1487;
  if (v1487)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v1487 + 16))(&v1487, v1487);
    v1162 = v1487;
  }
  else
  {
    v1162 = 0;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v1161 + 16))(&v1487, v1161);
  v1163 = v1487;
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v1162 + 24))(v1162, v1487) & 1) == 0)
  {
    while (1)
    {
      v1246 = *(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v1162 + 32))(v1162);
      v1487 = v1246;
      v1247 = *((_DWORD *)v1098 + 76);
      if (!v1247)
        break;
      v1248 = v1098[36];
      v1249 = v1247 - 1;
      v1250 = ((v1246 >> 4) ^ (v1246 >> 9)) & v1249;
      v1251 = (_QWORD *)(v1248 + 96 * v1250);
      v1252 = *v1251;
      if (v1246 != *v1251)
      {
        v1254 = 0;
        v1255 = 1;
        while (v1252 != -4096)
        {
          if (v1254)
            v1256 = 0;
          else
            v1256 = v1252 == -8192;
          if (v1256)
            v1254 = v1251;
          v1257 = v1250 + v1255++;
          v1250 = v1257 & v1249;
          v1251 = (_QWORD *)(v1248 + 96 * v1250);
          v1252 = *v1251;
          if (v1246 == *v1251)
            goto LABEL_2021;
        }
        if (v1254)
          v1258 = v1254;
        else
          v1258 = v1251;
        goto LABEL_2035;
      }
LABEL_2021:
      v1253 = llvm::FunctionStats::combine((unint64_t *)&__dst, v1251 + 1);
      (*(void (**)(uint64_t, int8x16_t))(*(_QWORD *)v1162 + 40))(v1162, v1253);
      if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v1162 + 24))(v1162, v1163) & 1) != 0)
        goto LABEL_1866;
    }
    v1258 = 0;
LABEL_2035:
    v1251 = sub_1C558AEF8((_DWORD *)v1098 + 72, &v1487, v1258);
    *v1251 = v1246;
    *(_OWORD *)(v1251 + 1) = 0u;
    *(_OWORD *)(v1251 + 3) = 0u;
    *(_OWORD *)(v1251 + 5) = 0u;
    *(_OWORD *)(v1251 + 7) = 0u;
    *(_OWORD *)(v1251 + 9) = 0u;
    v1251[11] = 0;
    goto LABEL_2021;
  }
LABEL_1866:
  v1164 = (v1461 + 3) & 0xFFFFFFFC;
  if (v1163)
    (*(void (**)(uint64_t))(*(_QWORD *)v1163 + 8))(v1163);
  v1165 = v1401 - v1408 + v1405;
  (*(void (**)(uint64_t))(*(_QWORD *)v1162 + 8))(v1162);
  v1166 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1161 + 8))(v1161);
  if (v1160)
    v1166 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1160 + 8))(v1160);
  v1167 = v1388 - v1397 + v1393;
  SetShaderInfoFromFunctionGroup(v1166, (uint64_t *)&v1480, v1471, (int *)&__dst);
  sub_1C558622C((uint64_t *)&v1480, *v1409);
  if (v1164 || *(_BYTE *)(a2 + 80))
  {
    if (*(_QWORD *)(a2 + 72) <= 3uLL)
      *(_QWORD *)(a2 + 72) = 4;
    v1168 = *(_QWORD *)(a2 + 48);
    v1169 = *(_QWORD *)(a2 + 56);
    v1170 = ((_BYTE)v1168 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
    if (v1168 - v1169 < v1170)
    {
      sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v1168 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
      *(_QWORD *)(a2 + 48) -= v1170;
    }
    else
    {
      v1171 = v1168 - v1170;
      *(_QWORD *)(a2 + 48) = v1171;
      if (!v1170)
      {
LABEL_1879:
        if ((unint64_t)(v1171 - v1169) <= 3)
        {
          sub_1C4D663A4((uint64_t *)a2, 4uLL);
          v1171 = *(_QWORD *)(a2 + 48);
        }
        *(_DWORD *)(v1171 - 4) = v1164;
        v1173 = v1171 - 4;
        *(_QWORD *)(a2 + 48) = v1173;
        sub_1C4D66288((uint64_t *)a2, 6, *(_DWORD *)(a2 + 32) - v1173 + *(_DWORD *)(a2 + 40));
        goto LABEL_1882;
      }
    }
    v1172 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(a2 + 48) + v1172++) = 0;
    while (v1170 != v1172);
    v1171 = *(_QWORD *)(a2 + 48);
    v1169 = *(_QWORD *)(a2 + 56);
    goto LABEL_1879;
  }
LABEL_1882:
  if (!v1165)
    goto LABEL_1901;
  if (*(_QWORD *)(a2 + 72) <= 3uLL)
    *(_QWORD *)(a2 + 72) = 4;
  v1174 = *(_QWORD *)(a2 + 32);
  v1175 = *(_QWORD *)(a2 + 40);
  v1176 = *(_QWORD *)(a2 + 48);
  v1177 = ((_BYTE)v1176 - ((_BYTE)v1174 + (_BYTE)v1175)) & 3;
  if (v1176 - *(_QWORD *)(a2 + 56) < v1177)
  {
    sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v1176 - ((_BYTE)v1174 + (_BYTE)v1175)) & 3);
    *(_QWORD *)(a2 + 48) -= v1177;
  }
  else
  {
    v1178 = v1176 - v1177;
    *(_QWORD *)(a2 + 48) = v1178;
    if (!v1177)
      goto LABEL_1890;
  }
  v1179 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(a2 + 48) + v1179++) = 0;
  while (v1177 != v1179);
  v1175 = *(_QWORD *)(a2 + 40);
  v1178 = *(_QWORD *)(a2 + 48);
  v1174 = *(_QWORD *)(a2 + 32);
LABEL_1890:
  v1180 = v1175 - v1178 + v1174 - v1165;
  v1181 = v1180 + 4;
  if (v1180 == -4 && !*(_BYTE *)(a2 + 80))
    goto LABEL_1901;
  if (*(_QWORD *)(a2 + 72) <= 3uLL)
    *(_QWORD *)(a2 + 72) = 4;
  v1182 = ((_BYTE)v1178 - ((_BYTE)v1174 + (_BYTE)v1175)) & 3;
  v1183 = *(_QWORD *)(a2 + 56);
  if (v1178 - v1183 < v1182)
  {
    sub_1C4D663A4((uint64_t *)a2, v1182);
    *(_QWORD *)(a2 + 48) -= v1182;
LABEL_1895:
    v1185 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(a2 + 48) + v1185++) = 0;
    while (v1182 != v1185);
    v1184 = *(_QWORD *)(a2 + 48);
    v1183 = *(_QWORD *)(a2 + 56);
    goto LABEL_1898;
  }
  v1184 = v1178 - v1182;
  *(_QWORD *)(a2 + 48) = v1178 - v1182;
  if (v1182)
    goto LABEL_1895;
LABEL_1898:
  if ((unint64_t)(v1184 - v1183) <= 3)
  {
    sub_1C4D663A4((uint64_t *)a2, 4uLL);
    v1184 = *(_QWORD *)(a2 + 48);
  }
  *(_DWORD *)(v1184 - 4) = v1181;
  v1186 = v1184 - 4;
  *(_QWORD *)(a2 + 48) = v1186;
  sub_1C4D66288((uint64_t *)a2, 8, *(_DWORD *)(a2 + 32) - v1186 + *(_DWORD *)(a2 + 40));
LABEL_1901:
  if (!v1167)
    goto LABEL_1920;
  if (*(_QWORD *)(a2 + 72) <= 3uLL)
    *(_QWORD *)(a2 + 72) = 4;
  v1187 = *(_QWORD *)(a2 + 32);
  v1188 = *(_QWORD *)(a2 + 40);
  v1189 = *(_QWORD *)(a2 + 48);
  v1190 = ((_BYTE)v1189 - ((_BYTE)v1187 + (_BYTE)v1188)) & 3;
  if (v1189 - *(_QWORD *)(a2 + 56) < v1190)
  {
    sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v1189 - ((_BYTE)v1187 + (_BYTE)v1188)) & 3);
    *(_QWORD *)(a2 + 48) -= v1190;
  }
  else
  {
    v1191 = v1189 - v1190;
    *(_QWORD *)(a2 + 48) = v1191;
    if (!v1190)
      goto LABEL_1909;
  }
  v1192 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(a2 + 48) + v1192++) = 0;
  while (v1190 != v1192);
  v1188 = *(_QWORD *)(a2 + 40);
  v1191 = *(_QWORD *)(a2 + 48);
  v1187 = *(_QWORD *)(a2 + 32);
LABEL_1909:
  v1193 = v1188 - v1191 + v1187 - v1167;
  v1194 = v1193 + 4;
  if (v1193 == -4 && !*(_BYTE *)(a2 + 80))
    goto LABEL_1920;
  if (*(_QWORD *)(a2 + 72) <= 3uLL)
    *(_QWORD *)(a2 + 72) = 4;
  v1195 = ((_BYTE)v1191 - ((_BYTE)v1187 + (_BYTE)v1188)) & 3;
  v1196 = *(_QWORD *)(a2 + 56);
  if (v1191 - v1196 < v1195)
  {
    sub_1C4D663A4((uint64_t *)a2, v1195);
    *(_QWORD *)(a2 + 48) -= v1195;
LABEL_1914:
    v1198 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(a2 + 48) + v1198++) = 0;
    while (v1195 != v1198);
    v1197 = *(_QWORD *)(a2 + 48);
    v1196 = *(_QWORD *)(a2 + 56);
    goto LABEL_1917;
  }
  v1197 = v1191 - v1195;
  *(_QWORD *)(a2 + 48) = v1191 - v1195;
  if (v1195)
    goto LABEL_1914;
LABEL_1917:
  if ((unint64_t)(v1197 - v1196) <= 3)
  {
    sub_1C4D663A4((uint64_t *)a2, 4uLL);
    v1197 = *(_QWORD *)(a2 + 48);
  }
  *(_DWORD *)(v1197 - 4) = v1194;
  v1199 = v1197 - 4;
  *(_QWORD *)(a2 + 48) = v1199;
  sub_1C4D66288((uint64_t *)a2, 12, *(_DWORD *)(a2 + 32) - v1199 + *(_DWORD *)(a2 + 40));
LABEL_1920:
  if (!v1429 && !*(_BYTE *)(a2 + 80))
    goto LABEL_1932;
  if (*(_QWORD *)(a2 + 72) <= 3uLL)
    *(_QWORD *)(a2 + 72) = 4;
  v1200 = *(_QWORD *)(a2 + 48);
  v1201 = *(_QWORD *)(a2 + 56);
  v1202 = ((_BYTE)v1200 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
  if (v1200 - v1201 < v1202)
  {
    sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v1200 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
    *(_QWORD *)(a2 + 48) -= v1202;
LABEL_1926:
    v1204 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(a2 + 48) + v1204++) = 0;
    while (v1202 != v1204);
    v1203 = *(_QWORD *)(a2 + 48);
    v1201 = *(_QWORD *)(a2 + 56);
    goto LABEL_1929;
  }
  v1203 = v1200 - v1202;
  *(_QWORD *)(a2 + 48) = v1203;
  if (v1202)
    goto LABEL_1926;
LABEL_1929:
  if ((unint64_t)(v1203 - v1201) <= 3)
  {
    sub_1C4D663A4((uint64_t *)a2, 4uLL);
    v1203 = *(_QWORD *)(a2 + 48);
  }
  *(_DWORD *)(v1203 - 4) = v1429;
  v1205 = v1203 - 4;
  *(_QWORD *)(a2 + 48) = v1205;
  sub_1C4D66288((uint64_t *)a2, 10, *(_DWORD *)(a2 + 32) - v1205 + *(_DWORD *)(a2 + 40));
LABEL_1932:
  sub_1C5589334((uint64_t *)a2, 16, v1435);
  if (!v1423 && !*(_BYTE *)(a2 + 80))
    goto LABEL_1944;
  if (*(_QWORD *)(a2 + 72) <= 3uLL)
    *(_QWORD *)(a2 + 72) = 4;
  v1206 = *(_QWORD *)(a2 + 48);
  v1207 = *(_QWORD *)(a2 + 56);
  v1208 = ((_BYTE)v1206 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
  if (v1206 - v1207 < v1208)
  {
    sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v1206 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
    *(_QWORD *)(a2 + 48) -= v1208;
LABEL_1938:
    v1210 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(a2 + 48) + v1210++) = 0;
    while (v1208 != v1210);
    v1209 = *(_QWORD *)(a2 + 48);
    v1207 = *(_QWORD *)(a2 + 56);
    goto LABEL_1941;
  }
  v1209 = v1206 - v1208;
  *(_QWORD *)(a2 + 48) = v1209;
  if (v1208)
    goto LABEL_1938;
LABEL_1941:
  if ((unint64_t)(v1209 - v1207) <= 3)
  {
    sub_1C4D663A4((uint64_t *)a2, 4uLL);
    v1209 = *(_QWORD *)(a2 + 48);
  }
  *(_DWORD *)(v1209 - 4) = v1423;
  v1211 = v1209 - 4;
  *(_QWORD *)(a2 + 48) = v1211;
  sub_1C4D66288((uint64_t *)a2, 14, *(_DWORD *)(a2 + 32) - v1211 + *(_DWORD *)(a2 + 40));
LABEL_1944:
  sub_1C5589334((uint64_t *)a2, 20, v1443);
  if (!v1417 && !*(_BYTE *)(a2 + 80))
    goto LABEL_1956;
  if (*(_QWORD *)(a2 + 72) <= 3uLL)
    *(_QWORD *)(a2 + 72) = 4;
  v1212 = *(_QWORD *)(a2 + 48);
  v1213 = *(_QWORD *)(a2 + 56);
  v1214 = ((_BYTE)v1212 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
  if (v1212 - v1213 < v1214)
  {
    sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v1212 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
    *(_QWORD *)(a2 + 48) -= v1214;
LABEL_1950:
    v1216 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(a2 + 48) + v1216++) = 0;
    while (v1214 != v1216);
    v1215 = *(_QWORD *)(a2 + 48);
    v1213 = *(_QWORD *)(a2 + 56);
    goto LABEL_1953;
  }
  v1215 = v1212 - v1214;
  *(_QWORD *)(a2 + 48) = v1215;
  if (v1214)
    goto LABEL_1950;
LABEL_1953:
  if ((unint64_t)(v1215 - v1213) <= 3)
  {
    sub_1C4D663A4((uint64_t *)a2, 4uLL);
    v1215 = *(_QWORD *)(a2 + 48);
  }
  *(_DWORD *)(v1215 - 4) = v1417;
  v1217 = v1215 - 4;
  *(_QWORD *)(a2 + 48) = v1217;
  sub_1C4D66288((uint64_t *)a2, 18, *(_DWORD *)(a2 + 32) - v1217 + *(_DWORD *)(a2 + 40));
LABEL_1956:
  v1218 = v1383 - v1386 + v1403;
  sub_1C5589334((uint64_t *)a2, 24, v1456);
  if (!v1413 && !*(_BYTE *)(a2 + 80))
    goto LABEL_1968;
  if (*(_QWORD *)(a2 + 72) <= 3uLL)
    *(_QWORD *)(a2 + 72) = 4;
  v1219 = *(_QWORD *)(a2 + 48);
  v1220 = *(_QWORD *)(a2 + 56);
  v1221 = ((_BYTE)v1219 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
  if (v1219 - v1220 < v1221)
  {
    sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v1219 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
    *(_QWORD *)(a2 + 48) -= v1221;
LABEL_1962:
    v1223 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(a2 + 48) + v1223++) = 0;
    while (v1221 != v1223);
    v1222 = *(_QWORD *)(a2 + 48);
    v1220 = *(_QWORD *)(a2 + 56);
    goto LABEL_1965;
  }
  v1222 = v1219 - v1221;
  *(_QWORD *)(a2 + 48) = v1222;
  if (v1221)
    goto LABEL_1962;
LABEL_1965:
  if ((unint64_t)(v1222 - v1220) <= 3)
  {
    sub_1C4D663A4((uint64_t *)a2, 4uLL);
    v1222 = *(_QWORD *)(a2 + 48);
  }
  *(_DWORD *)(v1222 - 4) = v1413;
  v1224 = v1222 - 4;
  *(_QWORD *)(a2 + 48) = v1224;
  sub_1C4D66288((uint64_t *)a2, 22, *(_DWORD *)(a2 + 32) - v1224 + *(_DWORD *)(a2 + 40));
LABEL_1968:
  sub_1C5589334((uint64_t *)a2, 28, v1467);
  if (!v1415 && !*(_BYTE *)(a2 + 80))
    goto LABEL_1980;
  if (*(_QWORD *)(a2 + 72) <= 3uLL)
    *(_QWORD *)(a2 + 72) = 4;
  v1225 = *(_QWORD *)(a2 + 48);
  v1226 = *(_QWORD *)(a2 + 56);
  v1227 = ((_BYTE)v1225 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
  if (v1225 - v1226 < v1227)
  {
    sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v1225 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
    *(_QWORD *)(a2 + 48) -= v1227;
LABEL_1974:
    v1229 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(a2 + 48) + v1229++) = 0;
    while (v1227 != v1229);
    v1228 = *(_QWORD *)(a2 + 48);
    v1226 = *(_QWORD *)(a2 + 56);
    goto LABEL_1977;
  }
  v1228 = v1225 - v1227;
  *(_QWORD *)(a2 + 48) = v1228;
  if (v1227)
    goto LABEL_1974;
LABEL_1977:
  if ((unint64_t)(v1228 - v1226) <= 3)
  {
    sub_1C4D663A4((uint64_t *)a2, 4uLL);
    v1228 = *(_QWORD *)(a2 + 48);
  }
  *(_DWORD *)(v1228 - 4) = v1415;
  v1230 = v1228 - 4;
  *(_QWORD *)(a2 + 48) = v1230;
  sub_1C4D66288((uint64_t *)a2, 26, *(_DWORD *)(a2 + 32) - v1230 + *(_DWORD *)(a2 + 40));
LABEL_1980:
  if (!v1218)
    goto LABEL_1999;
  if (*(_QWORD *)(a2 + 72) <= 3uLL)
    *(_QWORD *)(a2 + 72) = 4;
  v1231 = *(_QWORD *)(a2 + 32);
  v1232 = *(_QWORD *)(a2 + 40);
  v1233 = *(_QWORD *)(a2 + 48);
  v1234 = ((_BYTE)v1233 - ((_BYTE)v1231 + (_BYTE)v1232)) & 3;
  if (v1233 - *(_QWORD *)(a2 + 56) < v1234)
  {
    sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v1233 - ((_BYTE)v1231 + (_BYTE)v1232)) & 3);
    *(_QWORD *)(a2 + 48) -= v1234;
  }
  else
  {
    v1235 = v1233 - v1234;
    *(_QWORD *)(a2 + 48) = v1235;
    if (!v1234)
      goto LABEL_1988;
  }
  v1236 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(a2 + 48) + v1236++) = 0;
  while (v1234 != v1236);
  v1232 = *(_QWORD *)(a2 + 40);
  v1235 = *(_QWORD *)(a2 + 48);
  v1231 = *(_QWORD *)(a2 + 32);
LABEL_1988:
  v1237 = v1232 - v1235 + v1231 - v1218;
  v1238 = v1237 + 4;
  if (v1237 == -4 && !*(_BYTE *)(a2 + 80))
    goto LABEL_1999;
  if (*(_QWORD *)(a2 + 72) <= 3uLL)
    *(_QWORD *)(a2 + 72) = 4;
  v1239 = ((_BYTE)v1235 - ((_BYTE)v1231 + (_BYTE)v1232)) & 3;
  v1240 = *(_QWORD *)(a2 + 56);
  if (v1235 - v1240 < v1239)
  {
    sub_1C4D663A4((uint64_t *)a2, v1239);
    *(_QWORD *)(a2 + 48) -= v1239;
LABEL_1993:
    v1242 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(a2 + 48) + v1242++) = 0;
    while (v1239 != v1242);
    v1241 = *(_QWORD *)(a2 + 48);
    v1240 = *(_QWORD *)(a2 + 56);
    goto LABEL_1996;
  }
  v1241 = v1235 - v1239;
  *(_QWORD *)(a2 + 48) = v1235 - v1239;
  if (v1239)
    goto LABEL_1993;
LABEL_1996:
  if ((unint64_t)(v1241 - v1240) <= 3)
  {
    sub_1C4D663A4((uint64_t *)a2, 4uLL);
    v1241 = *(_QWORD *)(a2 + 48);
  }
  *(_DWORD *)(v1241 - 4) = v1238;
  v1243 = v1241 - 4;
  *(_QWORD *)(a2 + 48) = v1243;
  sub_1C4D66288((uint64_t *)a2, 30, *(_DWORD *)(a2 + 32) - v1243 + *(_DWORD *)(a2 + 40));
LABEL_1999:
  sub_1C5589334((uint64_t *)a2, 56, v1377);
  sub_1C5589334((uint64_t *)a2, 58, v1375);
  sub_1C558671C(v1470, *v1409, (uint64_t *)&__dst);
  if (v1379 == 28)
    sub_1C5589334((uint64_t *)a2, 62, v1372);
  v1244 = sub_1C4D66580(a2, v1481);
  if (v1381)
    operator delete(v1381);
  if (v1478)
    operator delete(v1478);
  if (v1451)
    operator delete(v1451);
  if (v1482)
    operator delete(v1482);
  if (!v1411)
  {
    if (!v1365)
      goto LABEL_2011;
LABEL_2038:
    operator delete(v1365);
    if (!v1366)
      goto LABEL_2012;
    goto LABEL_2039;
  }
  operator delete(v1411);
  if (v1365)
    goto LABEL_2038;
LABEL_2011:
  if (!v1366)
    goto LABEL_2012;
LABEL_2039:
  operator delete(v1366);
LABEL_2012:
  if (__p)
    operator delete(__p);
  if (v1398)
    operator delete(v1398);
  if ((v1496[0] & 1) == 0)
    MEMORY[0x1CAA32FB4](v1496[1], 8);
  return v1244;
}

uint64_t sub_1C5586000(uint64_t a1, void *__src, uint64_t a3)
{
  unint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  *(_BYTE *)(a1 + 70) = 1;
  if (*(_QWORD *)(a1 + 72) <= 3uLL)
    *(_QWORD *)(a1 + 72) = 4;
  v6 = 4 * a3;
  v7 = *(_QWORD *)(a1 + 48);
  v8 = ((_BYTE)v7 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3;
  if (v7 - *(_QWORD *)(a1 + 56) < v8)
  {
    sub_1C4D663A4((uint64_t *)a1, ((_BYTE)v7 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3);
    *(_QWORD *)(a1 + 48) -= v8;
  }
  else
  {
    *(_QWORD *)(a1 + 48) = v7 - v8;
    if (!v8)
      goto LABEL_5;
  }
  v18 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(a1 + 48) + v18++) = 0;
  while (v8 != v18);
  if (*(_QWORD *)(a1 + 72) <= 3uLL)
    *(_QWORD *)(a1 + 72) = 4;
LABEL_5:
  v9 = *(_QWORD *)(a1 + 48);
  v10 = ((_BYTE)v9 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3;
  if (v9 - *(_QWORD *)(a1 + 56) < v10)
  {
    sub_1C4D663A4((uint64_t *)a1, ((_BYTE)v9 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3);
    *(_QWORD *)(a1 + 48) -= v10;
  }
  else
  {
    *(_QWORD *)(a1 + 48) = v9 - v10;
    if (!v10)
      goto LABEL_7;
  }
  v19 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(a1 + 48) + v19++) = 0;
  while (v10 != v19);
LABEL_7:
  if (v6)
  {
    v11 = *(_QWORD *)(a1 + 48);
    if (v11 - *(_QWORD *)(a1 + 56) < v6)
    {
      sub_1C4D663A4((uint64_t *)a1, 4 * a3);
      v11 = *(_QWORD *)(a1 + 48);
    }
    *(_QWORD *)(a1 + 48) = v11 - v6;
    memcpy((void *)(v11 - v6), __src, 4 * a3);
  }
  *(_BYTE *)(a1 + 70) = 0;
  if (*(_QWORD *)(a1 + 72) <= 3uLL)
    *(_QWORD *)(a1 + 72) = 4;
  v12 = *(_QWORD *)(a1 + 48);
  v13 = *(_QWORD *)(a1 + 56);
  v14 = ((_BYTE)v12 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3;
  if (v12 - v13 < v14)
  {
    sub_1C4D663A4((uint64_t *)a1, ((_BYTE)v12 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3);
    *(_QWORD *)(a1 + 48) -= v14;
  }
  else
  {
    v15 = v12 - v14;
    *(_QWORD *)(a1 + 48) = v15;
    if (!v14)
      goto LABEL_15;
  }
  v20 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(a1 + 48) + v20++) = 0;
  while (v14 != v20);
  v15 = *(_QWORD *)(a1 + 48);
  v13 = *(_QWORD *)(a1 + 56);
LABEL_15:
  if ((unint64_t)(v15 - v13) <= 3)
  {
    sub_1C4D663A4((uint64_t *)a1, 4uLL);
    v15 = *(_QWORD *)(a1 + 48);
  }
  *(_DWORD *)(v15 - 4) = a3;
  v16 = v15 - 4;
  *(_QWORD *)(a1 + 48) = v16;
  return (*(_DWORD *)(a1 + 32) - v16 + *(_DWORD *)(a1 + 40));
}

uint64_t *sub_1C558622C(uint64_t *a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  int v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  int v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t *result;
  int v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  unint64_t v47;
  unint64_t v48;

  v4 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
  v5 = *a1;
  if (!v4 && !*(_BYTE *)(v5 + 80))
    goto LABEL_12;
  if (*(_QWORD *)(v5 + 72) <= 3uLL)
    *(_QWORD *)(v5 + 72) = 4;
  v6 = *(_QWORD *)(v5 + 48);
  v7 = *(_QWORD *)(v5 + 56);
  v8 = ((_BYTE)v6 - (*(_DWORD *)(v5 + 32) + *(_DWORD *)(v5 + 40))) & 3;
  if (v6 - v7 < v8)
  {
    v45 = ((_BYTE)v6 - (*(_DWORD *)(v5 + 32) + *(_DWORD *)(v5 + 40))) & 3;
    sub_1C4D663A4((uint64_t *)v5, v8);
    v8 = v45;
    *(_QWORD *)(v5 + 48) -= v45;
LABEL_6:
    v10 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(v5 + 48) + v10++) = 0;
    while (v8 != v10);
    v9 = *(_QWORD *)(v5 + 48);
    v7 = *(_QWORD *)(v5 + 56);
    goto LABEL_9;
  }
  v9 = v6 - v8;
  *(_QWORD *)(v5 + 48) = v9;
  if (v8)
    goto LABEL_6;
LABEL_9:
  if ((unint64_t)(v9 - v7) <= 3)
  {
    sub_1C4D663A4((uint64_t *)v5, 4uLL);
    v9 = *(_QWORD *)(v5 + 48);
  }
  *(_DWORD *)(v9 - 4) = v4;
  v11 = v9 - 4;
  *(_QWORD *)(v5 + 48) = v11;
  sub_1C4D66288((uint64_t *)v5, 44, *(_DWORD *)(v5 + 32) - v11 + *(_DWORD *)(v5 + 40));
LABEL_12:
  v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
  v13 = *a1;
  if (!v12 && !*(_BYTE *)(v13 + 80))
    goto LABEL_24;
  if (*(_QWORD *)(v13 + 72) <= 3uLL)
    *(_QWORD *)(v13 + 72) = 4;
  v14 = *(_QWORD *)(v13 + 48);
  v15 = *(_QWORD *)(v13 + 56);
  v16 = ((_BYTE)v14 - (*(_DWORD *)(v13 + 32) + *(_DWORD *)(v13 + 40))) & 3;
  if (v14 - v15 < v16)
  {
    v47 = ((_BYTE)v14 - (*(_DWORD *)(v13 + 32) + *(_DWORD *)(v13 + 40))) & 3;
    sub_1C4D663A4((uint64_t *)v13, v16);
    v16 = v47;
    *(_QWORD *)(v13 + 48) -= v47;
LABEL_18:
    v18 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(v13 + 48) + v18++) = 0;
    while (v16 != v18);
    v17 = *(_QWORD *)(v13 + 48);
    v15 = *(_QWORD *)(v13 + 56);
    goto LABEL_21;
  }
  v17 = v14 - v16;
  *(_QWORD *)(v13 + 48) = v17;
  if (v16)
    goto LABEL_18;
LABEL_21:
  if ((unint64_t)(v17 - v15) <= 3)
  {
    sub_1C4D663A4((uint64_t *)v13, 4uLL);
    v17 = *(_QWORD *)(v13 + 48);
  }
  *(_DWORD *)(v17 - 4) = v12;
  v19 = v17 - 4;
  *(_QWORD *)(v13 + 48) = v19;
  sub_1C4D66288((uint64_t *)v13, 46, *(_DWORD *)(v13 + 32) - v19 + *(_DWORD *)(v13 + 40));
LABEL_24:
  v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
  v21 = *a1;
  if (!v20 && !*(_BYTE *)(v21 + 80))
    goto LABEL_36;
  if (*(_QWORD *)(v21 + 72) <= 3uLL)
    *(_QWORD *)(v21 + 72) = 4;
  v22 = *(_QWORD *)(v21 + 48);
  v23 = *(_QWORD *)(v21 + 56);
  v24 = ((_BYTE)v22 - (*(_DWORD *)(v21 + 32) + *(_DWORD *)(v21 + 40))) & 3;
  if (v22 - v23 < v24)
  {
    v46 = ((_BYTE)v22 - (*(_DWORD *)(v21 + 32) + *(_DWORD *)(v21 + 40))) & 3;
    sub_1C4D663A4((uint64_t *)v21, v24);
    v24 = v46;
    *(_QWORD *)(v21 + 48) -= v46;
LABEL_29:
    v26 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(v21 + 48) + v26++) = 0;
    while (v24 != v26);
    v25 = *(_QWORD *)(v21 + 48);
    v23 = *(_QWORD *)(v21 + 56);
    goto LABEL_32;
  }
  v25 = v22 - v24;
  *(_QWORD *)(v21 + 48) = v25;
  if (v24)
    goto LABEL_29;
LABEL_32:
  if ((unint64_t)(v25 - v23) <= 3)
  {
    sub_1C4D663A4((uint64_t *)v21, 4uLL);
    v25 = *(_QWORD *)(v21 + 48);
  }
  *(_DWORD *)(v25 - 4) = v20;
  v27 = v25 - 4;
  *(_QWORD *)(v21 + 48) = v27;
  sub_1C4D66288((uint64_t *)v21, 48, *(_DWORD *)(v21 + 32) - v27 + *(_DWORD *)(v21 + 40));
LABEL_36:
  v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
  v29 = *a1;
  if (!v28 && !*(_BYTE *)(v29 + 80))
    goto LABEL_48;
  if (*(_QWORD *)(v29 + 72) <= 3uLL)
    *(_QWORD *)(v29 + 72) = 4;
  v30 = *(_QWORD *)(v29 + 48);
  v31 = *(_QWORD *)(v29 + 56);
  v32 = ((_BYTE)v30 - (*(_DWORD *)(v29 + 32) + *(_DWORD *)(v29 + 40))) & 3;
  if (v30 - v31 < v32)
  {
    v48 = ((_BYTE)v30 - (*(_DWORD *)(v29 + 32) + *(_DWORD *)(v29 + 40))) & 3;
    sub_1C4D663A4((uint64_t *)v29, v32);
    v32 = v48;
    *(_QWORD *)(v29 + 48) -= v48;
LABEL_42:
    v34 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(v29 + 48) + v34++) = 0;
    while (v32 != v34);
    v33 = *(_QWORD *)(v29 + 48);
    v31 = *(_QWORD *)(v29 + 56);
    goto LABEL_45;
  }
  v33 = v30 - v32;
  *(_QWORD *)(v29 + 48) = v33;
  if (v32)
    goto LABEL_42;
LABEL_45:
  if ((unint64_t)(v33 - v31) <= 3)
  {
    sub_1C4D663A4((uint64_t *)v29, 4uLL);
    v33 = *(_QWORD *)(v29 + 48);
  }
  *(_DWORD *)(v33 - 4) = v28;
  v35 = v33 - 4;
  *(_QWORD *)(v29 + 48) = v35;
  sub_1C4D66288((uint64_t *)v29, 50, *(_DWORD *)(v29 + 32) - v35 + *(_DWORD *)(v29 + 40));
LABEL_48:
  result = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
  v37 = (int)result;
  v38 = *a1;
  if (!(_DWORD)result && !*(_BYTE *)(v38 + 80))
    return result;
  if (*(_QWORD *)(v38 + 72) <= 3uLL)
    *(_QWORD *)(v38 + 72) = 4;
  v39 = *(_QWORD *)(v38 + 48);
  v40 = *(_QWORD *)(v38 + 56);
  v41 = ((_BYTE)v39 - (*(_DWORD *)(v38 + 32) + *(_DWORD *)(v38 + 40))) & 3;
  if (v39 - v40 < v41)
  {
    sub_1C4D663A4((uint64_t *)v38, ((_BYTE)v39 - (*(_DWORD *)(v38 + 32) + *(_DWORD *)(v38 + 40))) & 3);
    *(_QWORD *)(v38 + 48) -= v41;
  }
  else
  {
    v42 = v39 - v41;
    *(_QWORD *)(v38 + 48) = v42;
    if (!v41)
      goto LABEL_57;
  }
  v43 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(v38 + 48) + v43++) = 0;
  while (v41 != v43);
  v42 = *(_QWORD *)(v38 + 48);
  v40 = *(_QWORD *)(v38 + 56);
LABEL_57:
  if ((unint64_t)(v42 - v40) <= 3)
  {
    sub_1C4D663A4((uint64_t *)v38, 4uLL);
    v42 = *(_QWORD *)(v38 + 48);
  }
  *(_DWORD *)(v42 - 4) = v37;
  v44 = v42 - 4;
  *(_QWORD *)(v38 + 48) = v44;
  return sub_1C4D66288((uint64_t *)v38, 52, *(_DWORD *)(v38 + 32) - (int)v44 + *(_DWORD *)(v38 + 40));
}

uint64_t sub_1C558671C(uint64_t result, uint64_t a2, uint64_t *a3)
{
  double v5;
  double v6;
  double v7;
  double v8;
  int v9;
  int v10;
  int v11;
  int v12;
  int v13;
  int v14;
  int v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  int v27;
  int v28;
  int v29;
  int v30;
  int v31;
  int v32;
  int v33;
  int v34;
  int v35;
  int v36;
  int v37;
  int v38;
  int v39;
  int v40;
  int v41;
  int v42;
  int v43;
  int v44;
  int v45;
  int v46;
  int v47;
  int v48;
  int v49;
  int v50;
  int v51;
  int v52;
  int v53;
  int v54;
  int v55;
  int v56;
  int v57;
  int v58;
  int v59;
  int v60;
  int v61;
  int v62;
  int v63;
  int v64;
  int v65;
  int v66;
  int v67;
  int v68;
  int v69;
  int v70;
  int v71;
  int v72;
  int v73;
  int v74;
  int v75;
  int v76;
  int v77;
  int v78;
  int v79;
  int v80;
  int v81;
  int v82;
  int v83;
  int v84;
  int v85;
  int v86;
  int v87;
  int v88;
  int v89;
  int v90;
  uint64_t v91;
  int v92;
  int v93;
  int v94;
  int v95;
  int v96;
  int v97;
  int v98;
  int v99;
  int v100;
  int v101;
  int v102;
  uint64_t v103;
  uint64_t *v104;
  void *v105;
  int v106;
  char v107;
  int v108;
  int v109;
  int v110;
  int v111;
  int v112;
  int v113;
  int v114;
  int v115;
  int v116;
  int v117;
  int v118;
  int v119;
  int v120;
  int v121;
  int v122;
  int v123;
  int v124;
  int v125;
  int v126;
  int v127;
  int v128;
  int v129;
  int v130;
  int v131;
  int v132;
  int v133;
  int v134;
  int v135;
  int v136;
  int v137;
  int v138;
  int v139;
  int v140;
  int v141;
  int v142;
  int v143;
  int v144;
  int v145;
  int v146;
  int v147;
  int v148;
  int v149;
  int v150;
  int v151;
  int v152;
  int v153;
  int v154;
  int v155;
  int v156;
  int v157;
  int v158;
  int v159;
  int v160;
  int v161;
  int v162;
  int v163;
  int v164;
  int v165;
  int v166;
  int v167;
  int v168;
  int v169;
  int v170;
  int v171;
  int v172;
  int v173;
  int v174;
  int v175;
  int v176;
  int v177;
  int v178;
  int v179;
  int v180;
  int v181;
  int v182;
  int v183;
  int v184;
  int v185;
  int v186;
  uint64_t v187;
  double v188;
  double v189;
  double v190;
  double v191;
  int v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  int v197;
  int v198;
  int v199;
  int v200;
  int v201;
  int v202;
  int v203;
  uint64_t v204;
  int v205;
  uint64_t v206;
  int v207;

  if (*(_QWORD *)(**(_QWORD **)result + 72))
  {
    v104 = (uint64_t *)result;
    v102 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 8))(a2);
    v101 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 128))(a2);
    v100 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 144))(a2);
    v99 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 152))(a2);
    v98 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 160))(a2);
    v97 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 168))(a2);
    v96 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 176))(a2);
    v95 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 184))(a2);
    v94 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 192))(a2);
    v93 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 200))(a2);
    v90 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 208))(a2);
    v89 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 216))(a2);
    v92 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 224))(a2);
    v91 = *a3;
    v103 = *(uint64_t *)((char *)a3 + 28);
    v87 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 16))(a2);
    v86 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 24))(a2);
    v84 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 32))(a2);
    v83 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 368))(a2);
    v82 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 376))(a2);
    v81 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 40))(a2);
    v80 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 48))(a2);
    v79 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 384))(a2);
    v78 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 56))(a2);
    v77 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 64))(a2);
    v88 = *((_DWORD *)a3 + 6);
    v85 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 248))(a2);
    v76 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 392))(a2);
    v75 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 336))(a2);
    v74 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 344))(a2);
    v73 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 400))(a2);
    v72 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 408))(a2);
    v71 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 416))(a2);
    v70 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 424))(a2);
    v69 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 432))(a2);
    v68 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 440))(a2);
    v67 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 448))(a2);
    v66 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 456))(a2);
    v65 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 464))(a2);
    v64 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 472))(a2);
    v63 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 480))(a2);
    v62 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 488))(a2);
    v61 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 496))(a2);
    v60 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 504))(a2);
    v59 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 512))(a2);
    v58 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 520))(a2);
    v57 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 528))(a2);
    v56 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 536))(a2);
    v55 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 544))(a2);
    v54 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 552))(a2);
    v53 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 560))(a2);
    v52 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 568))(a2);
    v51 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 576))(a2);
    v50 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 584))(a2);
    v49 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 592))(a2);
    v48 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 600))(a2);
    v47 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 608))(a2);
    v46 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 616))(a2);
    v45 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 624))(a2);
    v44 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 280))(a2);
    v42 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 296))(a2);
    v41 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 632))(a2);
    v38 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 240))(a2);
    v36 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 640))(a2);
    v34 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 648))(a2);
    v32 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 656))(a2);
    v30 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 120))(a2);
    v28 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 664))(a2);
    v43 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 672))(a2);
    v40 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 680))(a2);
    v39 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 688))(a2);
    v37 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 704))(a2);
    v35 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 256))(a2);
    v33 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 352))(a2);
    v31 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 360))(a2);
    v29 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 272))(a2);
    v27 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 80))(a2);
    v26 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 88))(a2);
    v25 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 96))(a2);
    v24 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 712))(a2);
    v5 = (*(double (**)(uint64_t))(*(_QWORD *)a2 + 720))(a2);
    v6 = (*(double (**)(uint64_t))(*(_QWORD *)a2 + 728))(a2);
    v23 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 768))(a2);
    v7 = (*(double (**)(uint64_t))(*(_QWORD *)a2 + 736))(a2);
    v8 = (*(double (**)(uint64_t))(*(_QWORD *)a2 + 752))(a2);
    v22 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 760))(a2);
    v21 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 776))(a2);
    v20 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 784))(a2);
    v19 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 792))(a2);
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 800))(a2);
    v10 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 808))(a2);
    LODWORD(a3) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 816))(a2);
    v11 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 824))(a2);
    v12 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 832))(a2);
    v13 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 840))(a2);
    v14 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 848))(a2);
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 136))(a2);
    v16 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 856))(a2);
    v17 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 864))(a2);
    v108 = v102;
    v110 = v101;
    v111 = v100;
    v112 = v99;
    v113 = v98;
    v114 = v97;
    v115 = v96;
    v116 = v95;
    v117 = v94;
    v118 = v93;
    v119 = v90;
    v120 = v89;
    v121 = v72;
    v122 = v71;
    v123 = v76;
    v124 = v75;
    v125 = v74;
    v126 = v73;
    v127 = v70;
    v128 = v69;
    v129 = v68;
    v130 = v67;
    v131 = v66;
    v132 = v65;
    v133 = v64;
    v134 = v63;
    v135 = v62;
    v136 = v61;
    v137 = v60;
    v138 = v59;
    v139 = v58;
    v140 = v57;
    v141 = v56;
    v142 = v55;
    v143 = v54;
    v144 = v53;
    v145 = v52;
    v146 = v51;
    v147 = v50;
    v148 = v49;
    v149 = v48;
    v150 = v78;
    v151 = v77;
    v152 = v87;
    v153 = v47;
    v154 = v46;
    v155 = v45;
    v156 = v86;
    v157 = v84;
    v158 = v44;
    v159 = v42;
    v160 = v83;
    v161 = v82;
    v162 = v81;
    v163 = v80;
    v164 = v79;
    v165 = v91;
    v166 = v92;
    v167 = v41;
    v168 = v38;
    v169 = v36;
    v170 = v34;
    v171 = v32;
    v172 = v30;
    v173 = v28;
    v106 = 20;
    v107 = 3;
    v105 = &unk_1E816FA18;
    v18 = *v104;
    v109 = 0;
    v174 = v43;
    v175 = v40;
    v176 = v39;
    v177 = v37;
    v178 = v88;
    v179 = v85;
    v180 = v35;
    v181 = v33;
    v182 = v31;
    v183 = v29;
    v184 = v27;
    v185 = v26;
    v186 = v25;
    v187 = v24;
    v188 = v5;
    v189 = v6;
    v190 = v7;
    v191 = v8;
    v192 = v22;
    v193 = v23;
    v194 = v21;
    v195 = v20;
    v196 = v19;
    v197 = v9;
    v198 = v10;
    v199 = (int)a3;
    v200 = v11;
    v201 = v12;
    v202 = v13;
    v203 = v14;
    v204 = v103;
    v205 = v15;
    v206 = v16;
    v207 = v17;
    return llvm::LLVMContext::diagnose(v18, (const llvm::DiagnosticInfo *)&v105);
  }
  return result;
}

void sub_1C558723C(char **a1, uint64_t a2, int *a3, int *a4, uint64_t a5)
{
  int *v5;
  char *v8;
  char *v9;
  char *v10;
  int v11;
  int v13;
  uint64_t v14;
  int v15;
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  int v26;
  uint64_t v27;
  uint64_t v28;
  unint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  int v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  int v48;
  int v49;
  char *v50;
  uint64_t v51;
  unint64_t v52;
  unint64_t v53;
  char *v54;
  char *v55;
  int v56;
  int *v57;
  uint64_t v58;
  int v59;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (a3 != a4)
  {
    v5 = a3;
    v8 = 0;
    v9 = 0;
    v10 = 0;
    v57 = a4;
    v58 = a5;
    while (1)
    {
      v11 = *v5;
      if (*v5 != 11 || *(_BYTE *)(a5 + 82) != 0)
        break;
LABEL_76:
      v5 += 5;
      if (v5 == a4)
        return;
    }
    *(_BYTE *)(a2 + 70) = 1;
    v13 = *(_DWORD *)(a2 + 32);
    v14 = *(_QWORD *)(a2 + 48);
    v15 = v11 | *(unsigned __int8 *)(a2 + 80);
    v59 = *(_DWORD *)(a2 + 40);
    if (v15)
    {
      if (!*(_QWORD *)(a2 + 72))
        *(_QWORD *)(a2 + 72) = 1;
      v16 = v14;
      if (v14 == *(_QWORD *)(a2 + 56))
      {
        sub_1C4D663A4((uint64_t *)a2, 1uLL);
        v16 = *(_QWORD *)(a2 + 48);
      }
      *(_QWORD *)(a2 + 48) = v16 - 1;
      *(_BYTE *)(v16 - 1) = v11;
      sub_1C4D66288((uint64_t *)a2, 4, *(_DWORD *)(a2 + 32) - *(_DWORD *)(a2 + 48) + *(_DWORD *)(a2 + 40));
      v15 = *(unsigned __int8 *)(a2 + 80);
    }
    v17 = v5[1];
    v18 = v17 | v15;
    if (!v18)
    {
LABEL_24:
      v25 = v5[2];
      v26 = v25 | v18;
      if (!v26)
        goto LABEL_35;
      if (*(_QWORD *)(a2 + 72) <= 3uLL)
        *(_QWORD *)(a2 + 72) = 4;
      v27 = *(_QWORD *)(a2 + 48);
      v28 = *(_QWORD *)(a2 + 56);
      v29 = ((_BYTE)v27 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
      if (v27 - v28 < v29)
      {
        sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v27 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
        *(_QWORD *)(a2 + 48) -= v29;
      }
      else
      {
        v30 = v27 - v29;
        *(_QWORD *)(a2 + 48) = v30;
        if (!v29)
        {
LABEL_32:
          if ((unint64_t)(v30 - v28) <= 3)
          {
            sub_1C4D663A4((uint64_t *)a2, 4uLL);
            v30 = *(_QWORD *)(a2 + 48);
          }
          *(_DWORD *)(v30 - 4) = v25;
          v32 = v30 - 4;
          *(_QWORD *)(a2 + 48) = v32;
          sub_1C4D66288((uint64_t *)a2, 8, *(_DWORD *)(a2 + 32) - v32 + *(_DWORD *)(a2 + 40));
          v26 = *(unsigned __int8 *)(a2 + 80);
LABEL_35:
          v33 = v5[3];
          v34 = v33 | v26;
          if (!v34)
            goto LABEL_46;
          if (*(_QWORD *)(a2 + 72) <= 3uLL)
            *(_QWORD *)(a2 + 72) = 4;
          v35 = *(_QWORD *)(a2 + 48);
          v36 = *(_QWORD *)(a2 + 56);
          v37 = ((_BYTE)v35 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
          if (v35 - v36 < v37)
          {
            sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v35 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
            *(_QWORD *)(a2 + 48) -= v37;
          }
          else
          {
            v38 = v35 - v37;
            *(_QWORD *)(a2 + 48) = v38;
            if (!v37)
            {
LABEL_43:
              if ((unint64_t)(v38 - v36) <= 3)
              {
                sub_1C4D663A4((uint64_t *)a2, 4uLL);
                v38 = *(_QWORD *)(a2 + 48);
              }
              *(_DWORD *)(v38 - 4) = v33;
              v40 = v38 - 4;
              *(_QWORD *)(a2 + 48) = v40;
              sub_1C4D66288((uint64_t *)a2, 10, *(_DWORD *)(a2 + 32) - v40 + *(_DWORD *)(a2 + 40));
              v34 = *(unsigned __int8 *)(a2 + 80);
LABEL_46:
              v41 = v5[4];
              if (!(v41 | v34))
              {
LABEL_57:
                v48 = sub_1C4D66580(a2, (unsigned __int16)v13 - (unsigned __int16)v14 + v59);
                v49 = v48;
                if (v8 >= v9)
                {
                  v51 = (v8 - v10) >> 2;
                  v52 = v51 + 1;
                  if ((unint64_t)(v51 + 1) >> 62)
                    abort();
                  if ((v9 - v10) >> 1 > v52)
                    v52 = (v9 - v10) >> 1;
                  if ((unint64_t)(v9 - v10) >= 0x7FFFFFFFFFFFFFFCLL)
                    v53 = 0x3FFFFFFFFFFFFFFFLL;
                  else
                    v53 = v52;
                  if (v53)
                  {
                    if (v53 >> 62)
                      sub_1C4764EE4();
                    v54 = (char *)operator new(4 * v53);
                  }
                  else
                  {
                    v54 = 0;
                  }
                  v55 = &v54[4 * v51];
                  *(_DWORD *)v55 = v49;
                  v50 = v55 + 4;
                  while (v8 != v10)
                  {
                    v56 = *((_DWORD *)v8 - 1);
                    v8 -= 4;
                    *((_DWORD *)v55 - 1) = v56;
                    v55 -= 4;
                  }
                  v9 = &v54[4 * v53];
                  *a1 = v55;
                  a1[1] = v50;
                  a1[2] = v9;
                  if (v10)
                    operator delete(v10);
                  v10 = v55;
                }
                else
                {
                  *(_DWORD *)v8 = v48;
                  v50 = v8 + 4;
                }
                a4 = v57;
                a5 = v58;
                a1[1] = v50;
                v8 = v50;
                goto LABEL_76;
              }
              if (*(_QWORD *)(a2 + 72) <= 3uLL)
                *(_QWORD *)(a2 + 72) = 4;
              v42 = *(_QWORD *)(a2 + 48);
              v43 = *(_QWORD *)(a2 + 56);
              v44 = ((_BYTE)v42 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
              if (v42 - v43 < v44)
              {
                sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v42 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
                *(_QWORD *)(a2 + 48) -= v44;
              }
              else
              {
                v45 = v42 - v44;
                *(_QWORD *)(a2 + 48) = v45;
                if (!v44)
                {
LABEL_54:
                  if ((unint64_t)(v45 - v43) <= 3)
                  {
                    sub_1C4D663A4((uint64_t *)a2, 4uLL);
                    v45 = *(_QWORD *)(a2 + 48);
                  }
                  *(_DWORD *)(v45 - 4) = v41;
                  v47 = v45 - 4;
                  *(_QWORD *)(a2 + 48) = v47;
                  sub_1C4D66288((uint64_t *)a2, 12, *(_DWORD *)(a2 + 32) - v47 + *(_DWORD *)(a2 + 40));
                  goto LABEL_57;
                }
              }
              v46 = 0;
              do
                *(_BYTE *)(*(_QWORD *)(a2 + 48) + v46++) = 0;
              while (v44 != v46);
              v45 = *(_QWORD *)(a2 + 48);
              v43 = *(_QWORD *)(a2 + 56);
              goto LABEL_54;
            }
          }
          v39 = 0;
          do
            *(_BYTE *)(*(_QWORD *)(a2 + 48) + v39++) = 0;
          while (v37 != v39);
          v38 = *(_QWORD *)(a2 + 48);
          v36 = *(_QWORD *)(a2 + 56);
          goto LABEL_43;
        }
      }
      v31 = 0;
      do
        *(_BYTE *)(*(_QWORD *)(a2 + 48) + v31++) = 0;
      while (v29 != v31);
      v30 = *(_QWORD *)(a2 + 48);
      v28 = *(_QWORD *)(a2 + 56);
      goto LABEL_32;
    }
    if (*(_QWORD *)(a2 + 72) <= 3uLL)
      *(_QWORD *)(a2 + 72) = 4;
    v19 = *(_QWORD *)(a2 + 48);
    v20 = *(_QWORD *)(a2 + 56);
    v21 = ((_BYTE)v19 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3;
    if (v19 - v20 < v21)
    {
      sub_1C4D663A4((uint64_t *)a2, ((_BYTE)v19 - (*(_DWORD *)(a2 + 32) + *(_DWORD *)(a2 + 40))) & 3);
      *(_QWORD *)(a2 + 48) -= v21;
    }
    else
    {
      v22 = v19 - v21;
      *(_QWORD *)(a2 + 48) = v22;
      if (!v21)
      {
LABEL_21:
        if ((unint64_t)(v22 - v20) <= 3)
        {
          sub_1C4D663A4((uint64_t *)a2, 4uLL);
          v22 = *(_QWORD *)(a2 + 48);
        }
        *(_DWORD *)(v22 - 4) = v17;
        v24 = v22 - 4;
        *(_QWORD *)(a2 + 48) = v24;
        sub_1C4D66288((uint64_t *)a2, 6, *(_DWORD *)(a2 + 32) - v24 + *(_DWORD *)(a2 + 40));
        v18 = *(unsigned __int8 *)(a2 + 80);
        goto LABEL_24;
      }
    }
    v23 = 0;
    do
      *(_BYTE *)(*(_QWORD *)(a2 + 48) + v23++) = 0;
    while (v21 != v23);
    v22 = *(_QWORD *)(a2 + 48);
    v20 = *(_QWORD *)(a2 + 56);
    goto LABEL_21;
  }
}

uint64_t llvm::GPUMetadataEmitter::GetConstSamplerBindNumber(llvm::GPUMetadataEmitter *this, const llvm::GlobalVariable *a2)
{
  uint64_t Metadata;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  _QWORD *v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  uint64_t v14;
  _QWORD *v15;
  uint64_t v16;
  _QWORD *v17;
  _QWORD *v19;

  Metadata = llvm::Value::getMetadata((uint64_t)this, "agx.bind", 8uLL);
  if (!Metadata)
    goto LABEL_2;
  v7 = (_QWORD *)(Metadata - 8 * *(unsigned int *)(Metadata + 8));
  v8 = v7[1];
  if (*(_BYTE *)(*(_QWORD *)(*(_QWORD *)(*v7 + 128) + 24) + 8) == 17)
  {
    if (*(_BYTE *)v8 != 1 || (v9 = *(_QWORD *)(v8 + 128), *(_BYTE *)(v9 + 16) != 16))
    {
      v10 = (_QWORD *)(v8 - 8 * *(unsigned int *)(v8 + 8));
      v11 = *(_QWORD *)(*v10 + 128);
      v12 = (_QWORD *)(v11 + 24);
      if (*(_DWORD *)(v11 + 32) >= 0x41u)
        v12 = (_QWORD *)*v12;
      v13 = (_QWORD *)*v12;
      v14 = v10[1];
      goto LABEL_14;
    }
  }
  else
  {
    v9 = *(_QWORD *)(v8 + 128);
  }
  v15 = (_QWORD *)(v9 + 24);
  if (*(_DWORD *)(v9 + 32) >= 0x41u)
    v15 = (_QWORD *)*v15;
  v13 = (_QWORD *)*v15;
  v14 = v7[2];
LABEL_14:
  v16 = *(_QWORD *)(v14 + 128);
  v17 = (_QWORD *)(v16 + 24);
  if (*(_DWORD *)(v16 + 32) >= 0x41u)
    v17 = (_QWORD *)*v17;
  if ((_DWORD)v13 == 114 || (_DWORD)v13 == 18)
  {
    v19 = (_QWORD *)*v17;
    v5 = v19 & 0xFFFFFF00;
    v4 = v19;
    v3 = 0x100000000;
    return v4 | v3 | v5;
  }
LABEL_2:
  v3 = 0;
  v4 = 0;
  v5 = 0;
  return v4 | v3 | v5;
}

_QWORD *sub_1C5587870(_QWORD *a1, unsigned int a2)
{
  _QWORD *result;
  _QWORD *v4;
  uint64_t v5;
  int v6;

  if (a2 <= 8)
  {
    *a1 = 1;
LABEL_3:
    result = a1 + 1;
    v4 = a1 + 9;
    goto LABEL_4;
  }
  *(_DWORD *)a1 &= ~1u;
  v5 = a2;
  result = operator new(8 * a2, (std::align_val_t)8uLL);
  a1[1] = result;
  a1[2] = v5;
  v6 = *(_DWORD *)a1;
  *a1 = *(_DWORD *)a1 & 1;
  if ((v6 & 1) != 0)
    goto LABEL_3;
  v4 = &result[v5];
  do
LABEL_4:
    *result++ = -4096;
  while (result != v4);
  return result;
}

uint64_t sub_1C55878F0(uint64_t a1, __int128 *a2)
{
  uint64_t v4;
  _OWORD *v5;
  _OWORD *v6;
  unint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  char *v16;
  uint64_t v17;
  uint64_t v18;
  char __p[20];
  char v21;
  char *v22;

  *(_QWORD *)a1 = 0;
  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = 0xFFFFFFFF00000000;
  *(_BYTE *)(a1 + 24) = 1;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_QWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 88;
  *(_QWORD *)(a1 + 112) = 0;
  *(_QWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_QWORD *)(a1 + 128) = a1 + 136;
  *(_QWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = 0;
  *(_QWORD *)(a1 + 160) = 0;
  *(_QWORD *)(a1 + 168) = 0;
  *(_QWORD *)(a1 + 184) = 0;
  v4 = a1 + 184;
  *(_QWORD *)(a1 + 176) = a1 + 184;
  *(_QWORD *)(a1 + 192) = 0;
  *(_QWORD *)(a1 + 200) = 0;
  *(_QWORD *)(a1 + 208) = 0;
  *(_QWORD *)(a1 + 216) = 0;
  *(_QWORD *)(a1 + 240) = 0;
  *(_QWORD *)(a1 + 232) = 0;
  *(_QWORD *)(a1 + 224) = a1 + 232;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_BYTE *)(a1 + 344) = 0;
  *(_OWORD *)(a1 + 264) = 0u;
  *(_OWORD *)(a1 + 280) = 0u;
  *(_OWORD *)(a1 + 296) = 0u;
  *(_OWORD *)(a1 + 312) = 0u;
  *(_OWORD *)(a1 + 328) = 0u;
  *(_OWORD *)(a1 + 352) = xmmword_1C865F170;
  *(_OWORD *)(a1 + 384) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(_QWORD *)(a1 + 400) = 0;
  *(_QWORD *)(a1 + 408) = 1;
  *(_WORD *)(a1 + 416) = 256;
  *(_QWORD *)(a1 + 424) = 0;
  sub_1C558849C((_QWORD *)(a1 + 432), 0x100uLL, 7);
  *(_QWORD *)(v4 + 376) = 0;
  *(_WORD *)(v4 + 384) = 0;
  *(_OWORD *)(v4 + 388) = 0u;
  *(_OWORD *)(v4 + 404) = 0u;
  *(_OWORD *)(v4 + 420) = 0u;
  *(_OWORD *)(v4 + 432) = 0u;
  *(_QWORD *)(v4 + 448) = v4 + 456;
  *(_QWORD *)(v4 + 456) = 0;
  *(_QWORD *)(v4 + 480) = 0;
  *(_QWORD *)(v4 + 488) = 0;
  *(_QWORD *)(v4 + 464) = 0;
  *(_QWORD *)(v4 + 472) = v4 + 480;
  *(_QWORD *)(v4 + 504) = 0;
  *(_QWORD *)(v4 + 512) = 0;
  *(_QWORD *)(v4 + 496) = 0;
  *(_QWORD *)(v4 + 528) = 0;
  *(_QWORD *)(v4 + 536) = 0;
  *(_QWORD *)(v4 + 520) = v4 + 528;
  sub_1C5588554(v4 + 544, a2);
  *(_BYTE *)(v4 + 952) = 0;
  *(_OWORD *)(v4 + 960) = 0u;
  *(_OWORD *)(v4 + 976) = 0u;
  *(_OWORD *)(v4 + 992) = 0u;
  *(_OWORD *)(v4 + 1008) = 0u;
  if (*(_BYTE *)(v4 + 800))
    *(_BYTE *)(a1 + 416) = 1;
  v5 = (_OWORD *)operator new();
  v6 = v5;
  *v5 = 0u;
  v5[1] = 0u;
  *(_QWORD *)(a1 + 304) = v5;
  v8 = *(_QWORD **)(a1 + 280);
  v7 = *(_QWORD *)(a1 + 288);
  if ((unint64_t)v8 >= v7)
  {
    v10 = *(_QWORD **)(a1 + 272);
    v11 = v8 - v10;
    v12 = v11 + 1;
    if ((unint64_t)(v11 + 1) >> 61)
      abort();
    v13 = v7 - (_QWORD)v10;
    if (v13 >> 2 > v12)
      v12 = v13 >> 2;
    if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8)
      v14 = 0x1FFFFFFFFFFFFFFFLL;
    else
      v14 = v12;
    if (v14)
    {
      if (v14 >> 61)
        sub_1C4764EE4();
      v15 = (char *)operator new(8 * v14);
    }
    else
    {
      v15 = 0;
    }
    v16 = &v15[8 * v11];
    *(_QWORD *)v16 = v6;
    v9 = v16 + 8;
    if (v8 != v10)
    {
      do
      {
        v17 = *--v8;
        *((_QWORD *)v16 - 1) = v17;
        v16 -= 8;
      }
      while (v8 != v10);
      v8 = *(_QWORD **)(a1 + 272);
    }
    *(_QWORD *)(a1 + 272) = v16;
    *(_QWORD *)(a1 + 280) = v9;
    *(_QWORD *)(a1 + 288) = &v15[8 * v14];
    if (v8)
      operator delete(v8);
  }
  else
  {
    *v8 = v5;
    v9 = v8 + 1;
  }
  v18 = v4 + 520;
  *(_QWORD *)(a1 + 280) = v9;
  *(_QWORD *)(a1 + 296) = *(_QWORD *)(a1 + 304);
  v21 = 10;
  strcpy(__p, "deprecated");
  v22 = __p;
  *((_BYTE *)sub_1C558880C(v4 + 520, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v22) + 56) = 1;
  if (v21 < 0)
    operator delete(*(void **)__p);
  v21 = 8;
  strcpy(__p, "required");
  v22 = __p;
  *((_BYTE *)sub_1C558880C(v18, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v22) + 56) = 1;
  if (v21 < 0)
    operator delete(*(void **)__p);
  v21 = 3;
  strcpy(__p, "key");
  v22 = __p;
  *((_BYTE *)sub_1C558880C(v18, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v22) + 56) = 1;
  if (v21 < 0)
    operator delete(*(void **)__p);
  v21 = 6;
  strcpy(__p, "shared");
  v22 = __p;
  *((_BYTE *)sub_1C558880C(v18, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v22) + 56) = 1;
  if (v21 < 0)
    operator delete(*(void **)__p);
  v21 = 4;
  strcpy(__p, "hash");
  v22 = __p;
  *((_BYTE *)sub_1C558880C(v18, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v22) + 56) = 1;
  if (v21 < 0)
    operator delete(*(void **)__p);
  v21 = 2;
  strcpy(__p, "id");
  v22 = __p;
  *((_BYTE *)sub_1C558880C(v18, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v22) + 56) = 1;
  if (v21 < 0)
    operator delete(*(void **)__p);
  v21 = 11;
  strcpy(__p, "force_align");
  v22 = __p;
  *((_BYTE *)sub_1C558880C(v18, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v22) + 56) = 1;
  if (v21 < 0)
    operator delete(*(void **)__p);
  v21 = 9;
  strcpy(__p, "bit_flags");
  v22 = __p;
  *((_BYTE *)sub_1C558880C(v18, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v22) + 56) = 1;
  if (v21 < 0)
    operator delete(*(void **)__p);
  v21 = 13;
  strcpy(__p, "bit_flags_all");
  v22 = __p;
  *((_BYTE *)sub_1C558880C(v18, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v22) + 56) = 1;
  if (v21 < 0)
    operator delete(*(void **)__p);
  v21 = 14;
  strcpy(__p, "bit_flags_none");
  v22 = __p;
  *((_BYTE *)sub_1C558880C(v18, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v22) + 56) = 1;
  if (v21 < 0)
    operator delete(*(void **)__p);
  v21 = 14;
  strcpy(__p, "original_order");
  v22 = __p;
  *((_BYTE *)sub_1C558880C(v18, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v22) + 56) = 1;
  if (v21 < 0)
    operator delete(*(void **)__p);
  v21 = 17;
  strcpy(__p, "nested_flatbuffer");
  v22 = __p;
  *((_BYTE *)sub_1C558880C(v18, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v22) + 56) = 1;
  if (v21 < 0)
    operator delete(*(void **)__p);
  v21 = 14;
  strcpy(__p, "csharp_partial");
  v22 = __p;
  *((_BYTE *)sub_1C558880C(v18, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v22) + 56) = 1;
  if (v21 < 0)
    operator delete(*(void **)__p);
  v21 = 9;
  strcpy(__p, "streaming");
  v22 = __p;
  *((_BYTE *)sub_1C558880C(v18, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v22) + 56) = 1;
  if (v21 < 0)
    operator delete(*(void **)__p);
  v21 = 10;
  strcpy(__p, "idempotent");
  v22 = __p;
  *((_BYTE *)sub_1C558880C(v18, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v22) + 56) = 1;
  if (v21 < 0)
    operator delete(*(void **)__p);
  v21 = 8;
  strcpy(__p, "cpp_type");
  v22 = __p;
  *((_BYTE *)sub_1C558880C(v18, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v22) + 56) = 1;
  if (v21 < 0)
    operator delete(*(void **)__p);
  v21 = 12;
  strcpy(__p, "cpp_ptr_type");
  v22 = __p;
  *((_BYTE *)sub_1C558880C(v18, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v22) + 56) = 1;
  if (v21 < 0)
    operator delete(*(void **)__p);
  v21 = 16;
  strcpy(__p, "cpp_ptr_type_get");
  v22 = __p;
  *((_BYTE *)sub_1C558880C(v18, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v22) + 56) = 1;
  if (v21 < 0)
    operator delete(*(void **)__p);
  v21 = 12;
  strcpy(__p, "cpp_str_type");
  v22 = __p;
  *((_BYTE *)sub_1C558880C(v18, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v22) + 56) = 1;
  if (v21 < 0)
    operator delete(*(void **)__p);
  v21 = 17;
  strcpy(__p, "cpp_str_flex_ctor");
  v22 = __p;
  *((_BYTE *)sub_1C558880C(v18, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v22) + 56) = 1;
  if (v21 < 0)
    operator delete(*(void **)__p);
  v21 = 13;
  strcpy(__p, "native_inline");
  v22 = __p;
  *((_BYTE *)sub_1C558880C(v18, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v22) + 56) = 1;
  if (v21 < 0)
    operator delete(*(void **)__p);
  v21 = 19;
  strcpy(__p, "native_custom_alloc");
  v22 = __p;
  *((_BYTE *)sub_1C558880C(v18, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v22) + 56) = 1;
  if (v21 < 0)
    operator delete(*(void **)__p);
  v21 = 11;
  strcpy(__p, "native_type");
  v22 = __p;
  *((_BYTE *)sub_1C558880C(v18, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v22) + 56) = 1;
  if (v21 < 0)
    operator delete(*(void **)__p);
  v21 = 14;
  strcpy(__p, "native_default");
  v22 = __p;
  *((_BYTE *)sub_1C558880C(v18, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v22) + 56) = 1;
  if (v21 < 0)
    operator delete(*(void **)__p);
  v21 = 10;
  strcpy(__p, "flexbuffer");
  v22 = __p;
  *((_BYTE *)sub_1C558880C(v18, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v22) + 56) = 1;
  if (v21 < 0)
    operator delete(*(void **)__p);
  v21 = 7;
  strcpy(__p, "private");
  v22 = __p;
  *((_BYTE *)sub_1C558880C(v18, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v22) + 56) = 1;
  if (v21 < 0)
    operator delete(*(void **)__p);
  v21 = 14;
  strcpy(__p, "apple_internal");
  v22 = __p;
  *((_BYTE *)sub_1C558880C(v18, (const void **)__p, (uint64_t)&std::piecewise_construct, (_OWORD **)&v22) + 56) = 1;
  if (v21 < 0)
    operator delete(*(void **)__p);
  return a1;
}

_QWORD *sub_1C558849C(_QWORD *a1, size_t a2, int a3)
{
  _QWORD *result;

  result = sub_1C55884F4(a1, a2);
  result[3] = 0;
  result[4] = 0;
  *((_BYTE *)result + 48) = 0;
  result[5] = 0;
  *((_DWORD *)result + 13) = a3;
  *((_DWORD *)result + 14) = 0;
  result[9] = 0;
  result[10] = 0;
  result[11] = result;
  result[8] = result + 9;
  result[13] = 0;
  result[14] = 0;
  result[15] = result;
  result[12] = result + 13;
  result[1] = *result;
  return result;
}

_QWORD *sub_1C55884F4(_QWORD *a1, size_t __sz)
{
  char *v4;
  char *v5;

  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  if (__sz)
  {
    if ((__sz & 0x8000000000000000) != 0)
      abort();
    v4 = (char *)operator new(__sz);
    *a1 = v4;
    v5 = &v4[__sz];
    a1[2] = &v4[__sz];
    bzero(v4, __sz);
    a1[1] = v5;
  }
  return a1;
}

uint64_t sub_1C5588554(uint64_t a1, __int128 *a2)
{
  __int128 v4;
  uint64_t v5;
  __int128 v6;
  _BYTE *v7;
  __int128 v8;
  _BYTE *v9;
  __int128 v10;
  _BYTE *v11;
  __int128 v12;
  __int16 v13;
  _BYTE *v14;
  __int128 v15;
  int v16;
  _BYTE *v17;
  __int128 v18;
  _BYTE *v19;
  __int128 v20;
  _BYTE *v21;
  __int128 v22;
  __int16 v23;
  _BYTE *v24;
  __int128 v25;
  _BYTE *v26;
  __int128 v27;
  _BYTE *v28;
  __int128 v29;
  _BYTE *v30;
  __int128 v31;
  __int128 v32;

  v4 = *a2;
  *(_OWORD *)(a1 + 10) = *(__int128 *)((char *)a2 + 10);
  *(_OWORD *)a1 = v4;
  v5 = a1 + 32;
  if (*((char *)a2 + 55) < 0)
  {
    sub_1C47EBC30((_BYTE *)v5, *((void **)a2 + 4), *((_QWORD *)a2 + 5));
  }
  else
  {
    v6 = a2[2];
    *(_QWORD *)(v5 + 16) = *((_QWORD *)a2 + 6);
    *(_OWORD *)v5 = v6;
  }
  v7 = (_BYTE *)(a1 + 56);
  if (*((char *)a2 + 79) < 0)
  {
    sub_1C47EBC30(v7, *((void **)a2 + 7), *((_QWORD *)a2 + 8));
  }
  else
  {
    v8 = *(__int128 *)((char *)a2 + 56);
    *(_QWORD *)(a1 + 72) = *((_QWORD *)a2 + 9);
    *(_OWORD *)v7 = v8;
  }
  *(_DWORD *)(a1 + 80) = *((_DWORD *)a2 + 20);
  v9 = (_BYTE *)(a1 + 88);
  if (*((char *)a2 + 111) < 0)
  {
    sub_1C47EBC30(v9, *((void **)a2 + 11), *((_QWORD *)a2 + 12));
  }
  else
  {
    v10 = *(__int128 *)((char *)a2 + 88);
    *(_QWORD *)(a1 + 104) = *((_QWORD *)a2 + 13);
    *(_OWORD *)v9 = v10;
  }
  v11 = (_BYTE *)(a1 + 112);
  if (*((char *)a2 + 135) < 0)
  {
    sub_1C47EBC30(v11, *((void **)a2 + 14), *((_QWORD *)a2 + 15));
  }
  else
  {
    v12 = a2[7];
    *(_QWORD *)(a1 + 128) = *((_QWORD *)a2 + 16);
    *(_OWORD *)v11 = v12;
  }
  v13 = *((_WORD *)a2 + 68);
  *(_BYTE *)(a1 + 138) = *((_BYTE *)a2 + 138);
  *(_WORD *)(a1 + 136) = v13;
  v14 = (_BYTE *)(a1 + 144);
  if (*((char *)a2 + 167) < 0)
  {
    sub_1C47EBC30(v14, *((void **)a2 + 18), *((_QWORD *)a2 + 19));
  }
  else
  {
    v15 = a2[9];
    *(_QWORD *)(a1 + 160) = *((_QWORD *)a2 + 20);
    *(_OWORD *)v14 = v15;
  }
  v16 = *((_DWORD *)a2 + 42);
  *(_BYTE *)(a1 + 172) = *((_BYTE *)a2 + 172);
  *(_DWORD *)(a1 + 168) = v16;
  v17 = (_BYTE *)(a1 + 176);
  if (*((char *)a2 + 199) < 0)
  {
    sub_1C47EBC30(v17, *((void **)a2 + 22), *((_QWORD *)a2 + 23));
  }
  else
  {
    v18 = a2[11];
    *(_QWORD *)(a1 + 192) = *((_QWORD *)a2 + 24);
    *(_OWORD *)v17 = v18;
  }
  v19 = (_BYTE *)(a1 + 200);
  if (*((char *)a2 + 223) < 0)
  {
    sub_1C47EBC30(v19, *((void **)a2 + 25), *((_QWORD *)a2 + 26));
  }
  else
  {
    v20 = *(__int128 *)((char *)a2 + 200);
    *(_QWORD *)(a1 + 216) = *((_QWORD *)a2 + 27);
    *(_OWORD *)v19 = v20;
  }
  *(_DWORD *)(a1 + 224) = *((_DWORD *)a2 + 56);
  v21 = (_BYTE *)(a1 + 232);
  if (*((char *)a2 + 255) < 0)
  {
    sub_1C47EBC30(v21, *((void **)a2 + 29), *((_QWORD *)a2 + 30));
  }
  else
  {
    v22 = *(__int128 *)((char *)a2 + 232);
    *(_QWORD *)(a1 + 248) = *((_QWORD *)a2 + 31);
    *(_OWORD *)v21 = v22;
  }
  v23 = *((_WORD *)a2 + 128);
  *(_BYTE *)(a1 + 258) = *((_BYTE *)a2 + 258);
  *(_WORD *)(a1 + 256) = v23;
  *(_QWORD *)(a1 + 272) = 0;
  *(_QWORD *)(a1 + 280) = 0;
  *(_QWORD *)(a1 + 264) = 0;
  sub_1C484333C((_QWORD *)(a1 + 264), *((_QWORD *)a2 + 33), *((_QWORD *)a2 + 34), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((_QWORD *)a2 + 34) - *((_QWORD *)a2 + 33)) >> 3));
  v24 = (_BYTE *)(a1 + 288);
  if (*((char *)a2 + 311) < 0)
  {
    sub_1C47EBC30(v24, *((void **)a2 + 36), *((_QWORD *)a2 + 37));
  }
  else
  {
    v25 = a2[18];
    *(_QWORD *)(a1 + 304) = *((_QWORD *)a2 + 38);
    *(_OWORD *)v24 = v25;
  }
  v26 = (_BYTE *)(a1 + 312);
  if (*((char *)a2 + 335) < 0)
  {
    sub_1C47EBC30(v26, *((void **)a2 + 39), *((_QWORD *)a2 + 40));
  }
  else
  {
    v27 = *(__int128 *)((char *)a2 + 312);
    *(_QWORD *)(a1 + 328) = *((_QWORD *)a2 + 41);
    *(_OWORD *)v26 = v27;
  }
  v28 = (_BYTE *)(a1 + 336);
  if (*((char *)a2 + 359) < 0)
  {
    sub_1C47EBC30(v28, *((void **)a2 + 42), *((_QWORD *)a2 + 43));
  }
  else
  {
    v29 = a2[21];
    *(_QWORD *)(a1 + 352) = *((_QWORD *)a2 + 44);
    *(_OWORD *)v28 = v29;
  }
  v30 = (_BYTE *)(a1 + 360);
  if (*((char *)a2 + 383) < 0)
  {
    sub_1C47EBC30(v30, *((void **)a2 + 45), *((_QWORD *)a2 + 46));
  }
  else
  {
    v31 = *(__int128 *)((char *)a2 + 360);
    *(_QWORD *)(a1 + 376) = *((_QWORD *)a2 + 47);
    *(_OWORD *)v30 = v31;
  }
  v32 = a2[24];
  *(_WORD *)(a1 + 400) = *((_WORD *)a2 + 200);
  *(_OWORD *)(a1 + 384) = v32;
  return a1;
}

_OWORD *sub_1C558880C(uint64_t a1, const void **a2, uint64_t a3, _OWORD **a4)
{
  void **v6;
  _OWORD *v7;
  void **v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v15;

  v6 = (void **)sub_1C4768D58(a1, &v15, a2);
  v7 = *v6;
  if (!*v6)
  {
    v8 = v6;
    v7 = operator new(0x40uLL);
    v9 = *a4;
    v10 = *((_QWORD *)*a4 + 2);
    v7[2] = **a4;
    *((_QWORD *)v7 + 6) = v10;
    v9[1] = 0;
    v9[2] = 0;
    *v9 = 0;
    *((_BYTE *)v7 + 56) = 0;
    v11 = v15;
    *(_QWORD *)v7 = 0;
    *((_QWORD *)v7 + 1) = 0;
    *((_QWORD *)v7 + 2) = v11;
    *v8 = v7;
    v12 = **(_QWORD **)a1;
    v13 = (uint64_t *)v7;
    if (v12)
    {
      *(_QWORD *)a1 = v12;
      v13 = (uint64_t *)*v8;
    }
    sub_1C4768E74(*(uint64_t **)(a1 + 8), v13);
    ++*(_QWORD *)(a1 + 16);
  }
  return v7;
}

uint64_t sub_1C55888CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  void *v5[2];
  _BYTE v6[128];
  void *v7[2];
  _BYTE v8[128];
  void *v9[2];
  _QWORD v10[17];

  v10[16] = *MEMORY[0x1E0C80C00];
  v9[0] = v10;
  v9[1] = (void *)0x1000000000;
  v7[0] = v8;
  v7[1] = (void *)0x1000000000;
  v4 = 0;
  v5[0] = v6;
  v5[1] = (void *)0x1000000000;
  sub_1C55889A4(a1, a2, a3, (uint64_t)v9, (uint64_t)v7, (uint64_t)v5, (unsigned int *)&v4, 0);
  if (v5[0] != v6)
    free(v5[0]);
  if (v7[0] != v8)
    free(v7[0]);
  if (v9[0] != v10)
    free(v9[0]);
  return v4;
}

void sub_1C55889A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned int *a7, unint64_t a8)
{
  unint64_t v16;
  char v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unsigned int v23;
  unsigned int v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  unsigned int *v29;
  int *v30;
  int v31;
  int v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  unsigned int v36;
  unsigned int v37;
  unsigned int *v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unint64_t v44;
  unsigned int *v45;
  int *v46;
  int v47;
  int v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  unint64_t v52;
  uint64_t v53;
  unint64_t v54;
  uint64_t v55;
  unsigned int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t i;
  uint64_t v62;
  unsigned int v63;
  unint64_t v64;
  uint64_t v65;
  BOOL v66;
  int v67;
  char *v68;
  uint64_t *v69;
  _QWORD *v70;
  uint64_t v71;
  uint64_t v72;
  _QWORD *v73;
  uint64_t v74;
  char v75;
  uint64_t *v76;
  int v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t v81;
  unsigned int *v82;
  char *v83;
  char *v84;
  uint64_t v85;
  int v86;
  _BYTE v87[128];
  _QWORD v88[2];

  v83 = 0;
  v16 = HIDWORD(a8);
  v17 = sub_1C5588EF4(a3, a2, &v83);
  v18 = a3 + 8;
  v19 = *(_DWORD *)a3;
  if ((v17 & 1) != 0)
  {
    v22 = (uint64_t)v83;
  }
  else
  {
    if ((v19 & 1) != 0)
    {
      v20 = 4;
      v21 = a3 + 8;
    }
    else
    {
      v21 = *(_QWORD *)(a3 + 8);
      v20 = *(unsigned int *)(a3 + 16);
    }
    v22 = v21 + 16 * v20;
  }
  if ((v19 & 1) == 0)
    v18 = *(_QWORD *)(a3 + 8);
  v23 = *(_DWORD *)(a3 + 16);
  if ((*(_DWORD *)a3 & 1) != 0)
    v23 = 4;
  if (v18 + 16 * v23 != v22)
  {
    v24 = *(_DWORD *)(v22 + 8) + a8;
    v25 = *(_DWORD *)(v22 + 12) + v16;
    LODWORD(v22) = *a7;
    LODWORD(v26) = a7[1];
    if (*a7 <= v24)
      v22 = v24;
    else
      v22 = v22;
    if (v26 <= v25)
      v26 = v25;
    else
      v26 = v26;
    *(_QWORD *)a7 = v22 | (v26 << 32);
    if (*(_DWORD *)(a4 + 8))
    {
      v27 = 0;
      v28 = 0;
      do
      {
        v29 = (unsigned int *)(*(_QWORD *)a6 + v27);
        v30 = (int *)(*(_QWORD *)a5 + v27);
        v32 = *v30;
        v31 = v30[1];
        LODWORD(v33) = v24 - v32;
        v34 = v29[1];
        if (*v29 <= v33)
          v33 = v33;
        else
          v33 = *v29;
        LODWORD(v35) = v25 - v31;
        if (v34 <= v35)
          v35 = v35;
        else
          v35 = v34;
        *(_QWORD *)v29 = v33 | (v35 << 32);
        ++v28;
        v27 += 8;
      }
      while (v28 < *(unsigned int *)(a4 + 8));
    }
    return;
  }
  v36 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 104))(*(_QWORD *)(a1 + 8), a2);
  v81 = a1;
  v37 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(a1 + 8) + 120))(*(_QWORD *)(a1 + 8), a2);
  v38 = a7;
  v39 = v36 + a8;
  v40 = v37 + v16;
  LODWORD(v41) = *v38;
  LODWORD(v42) = v38[1];
  if (*v38 <= v39)
    v41 = v39;
  else
    v41 = v41;
  if (v42 <= v40)
    v42 = v40;
  else
    v42 = v42;
  v82 = v38;
  *(_QWORD *)v38 = v41 | (v42 << 32);
  if (*(_DWORD *)(a4 + 8))
  {
    v43 = 0;
    v44 = 0;
    do
    {
      v45 = (unsigned int *)(*(_QWORD *)a6 + v43);
      v46 = (int *)(*(_QWORD *)a5 + v43);
      v48 = *v46;
      v47 = v46[1];
      LODWORD(v49) = v39 - v48;
      v50 = v45[1];
      if (*v45 <= v49)
        v49 = v49;
      else
        v49 = *v45;
      LODWORD(v51) = v40 - v47;
      if (v50 <= v51)
        v51 = v51;
      else
        v51 = v50;
      *(_QWORD *)v45 = v49 | (v51 << 32);
      ++v44;
      v52 = *(unsigned int *)(a4 + 8);
      v43 += 8;
    }
    while (v44 < v52);
  }
  else
  {
    LODWORD(v52) = 0;
  }
  if (v52 >= *(_DWORD *)(a4 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a4, a4 + 16, v52 + 1, 8);
    LODWORD(v52) = *(_DWORD *)(a4 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a4 + 8 * v52) = a2;
  ++*(_DWORD *)(a4 + 8);
  v53 = *(unsigned int *)(a5 + 8);
  if (v53 >= *(_DWORD *)(a5 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a5, a5 + 16, v53 + 1, 8);
    LODWORD(v53) = *(_DWORD *)(a5 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a5 + 8 * v53) = a8;
  ++*(_DWORD *)(a5 + 8);
  v54 = v36 | ((unint64_t)v37 << 32);
  v55 = *(unsigned int *)(a6 + 8);
  if (v55 >= *(_DWORD *)(a6 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a6, a6 + 16, v55 + 1, 8);
    LODWORD(v55) = *(_DWORD *)(a6 + 8);
  }
  *(_QWORD *)(*(_QWORD *)a6 + 8 * v55) = v54;
  v56 = *(_DWORD *)(a6 + 8) + 1;
  *(_DWORD *)(a6 + 8) = v56;
  v83 = v87;
  v84 = v87;
  v85 = 16;
  v86 = 0;
  v57 = a2 + 72;
  v79 = a2;
  v58 = *(_QWORD *)(a2 + 80);
  if (v58 != v57)
  {
    v80 = v39 | (v40 << 32);
    while (1)
    {
      v59 = v58 - 24;
      if (!v58)
        v59 = 0;
      v60 = v59 + 40;
      for (i = *(_QWORD *)(v59 + 48); i != v60; i = *(_QWORD *)(i + 8))
      {
        v62 = i - 24;
        if (i)
        {
          v63 = *(unsigned __int8 *)(i - 8);
          if (v63 >= 0x1C)
          {
            if (v63 == 33)
            {
              v64 = v62 & 0xFFFFFFFFFFFFFFFBLL;
              if ((v64 & 4) == 0)
                continue;
            }
            else
            {
              if (v63 != 84)
                continue;
              v64 = v62 | 4;
              if ((v64 & 4) == 0)
                continue;
            }
            v65 = *(_QWORD *)((v64 & 0xFFFFFFFFFFFFFFF8) - 32);
            if (v65)
              v66 = *(_BYTE *)(v65 + 16) == 0;
            else
              v66 = 0;
            if (v66)
            {
              v67 = *(_DWORD *)(v65 + 32);
              if ((v67 & 0x2000) == 0 && ((v67 & 0x800000) != 0 || *(_QWORD *)(v65 + 72) != v65 + 72))
              {
                v68 = (char *)sub_1C477672C((uint64_t)&v83, v65);
                v69 = v84 == v83 ? (uint64_t *)((char *)&v85 + 4) : &v85;
                if (v68 == &v84[8 * *(unsigned int *)v69])
                {
                  sub_1C4774094((llvm::SmallPtrSetImplBase *)&v83, v65);
                  v70 = *(_QWORD **)a4;
                  v71 = *(unsigned int *)(a4 + 8);
                  if ((_DWORD)v71)
                  {
                    v72 = 8 * v71;
                    v73 = *(_QWORD **)a4;
                    while (*v73 != v65)
                    {
                      ++v73;
                      v72 -= 8;
                      if (!v72)
                      {
                        v73 = &v70[v71];
                        break;
                      }
                    }
                  }
                  else
                  {
                    v73 = *(_QWORD **)a4;
                  }
                  if (v71 == v73 - v70)
                    sub_1C55889A4(v81, v65, a3, a4, a5, a6, v82, v80);
                }
              }
            }
          }
        }
      }
      v58 = *(_QWORD *)(v58 + 8);
      if (v58 == v57)
      {
        v56 = *(_DWORD *)(a6 + 8);
        break;
      }
    }
  }
  v74 = *(_QWORD *)a6 + 8 * v56;
  v88[0] = 0;
  v75 = sub_1C5588EF4(a3, v79, v88);
  v76 = (uint64_t *)v88[0];
  if ((v75 & 1) == 0)
  {
    v77 = *(_DWORD *)a3 >> 1;
    if ((*(_DWORD *)a3 & 1) != 0)
      v78 = 4;
    else
      v78 = *(_DWORD *)(a3 + 16);
    if (4 * v77 + 4 >= 3 * v78)
    {
      v78 *= 2;
    }
    else if (v78 + ~v77 - *(_DWORD *)(a3 + 4) > v78 >> 3)
    {
LABEL_90:
      *(_DWORD *)a3 += 2;
      if (*v76 != -4096)
        --*(_DWORD *)(a3 + 4);
      *v76 = v79;
      v76[1] = 0;
      goto LABEL_93;
    }
    sub_1C5588F98(a3, v78);
    v88[0] = 0;
    sub_1C5588EF4(a3, v79, v88);
    v76 = (uint64_t *)v88[0];
    goto LABEL_90;
  }
LABEL_93:
  v76[1] = *(_QWORD *)(v74 - 8);
  --*(_DWORD *)(a4 + 8);
  --*(_DWORD *)(a6 + 8);
  --*(_DWORD *)(a5 + 8);
  if (v84 != v83)
    free(v84);
}

uint64_t sub_1C5588EF4(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_8;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
LABEL_17:
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -4096)
    {
      if (v9)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v9 = v7;
      v13 = v6 + v10++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_17;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_8:
  *a3 = v7;
  return result;
}

uint64_t sub_1C5588F98(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[9];

  v14[8] = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C5589110(a1, v6, &v6[2 * v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_QWORD *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *v9 = v10;
      v9[1] = *(_QWORD *)(a1 + v8 + 16);
      v9 += 2;
    }
    v8 += 16;
  }
  while (v8 != 64);
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C5589110(a1, v14, v9);
}

uint64_t sub_1C5589110(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;
  uint64_t *v12;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 72);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_9;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[2 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v12 = 0;
      result = sub_1C5588EF4((uint64_t)v5, v10, &v12);
      v11 = v12;
      *v12 = *a2;
      v11[1] = a2[1];
      *v5 += 2;
    }
    a2 += 2;
  }
  return result;
}

uint64_t sub_1C55891D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unsigned int v10;
  uint64_t v12;
  uint64_t v13;

  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(&v13, a2, a1);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(&v12, a2, a1);
  v5 = v12;
  v4 = v13;
  if (v13)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v13 + 16))(&v13, v13);
    v6 = v13;
  }
  else
  {
    v6 = 0;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v5 + 16))(&v13, v5);
  v7 = v13;
  v8 = 0xFFFFFFFFLL;
  while (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 24))(v6, v7) & 1) == 0)
  {
    v9 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    v10 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 400))(a2, *v9);
    if (v8 >= v10)
      v8 = v10;
    else
      v8 = v8;
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
  }
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return v8;
}

uint64_t *sub_1C5589334(uint64_t *result, uint64_t a2, int a3)
{
  uint64_t *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  unint64_t v20;

  if (!a3)
    return result;
  v4 = result;
  if ((unint64_t)result[9] <= 3)
    result[9] = 4;
  v5 = result[4];
  v6 = result[5];
  v7 = result[6];
  v8 = ((_BYTE)v7 - ((_BYTE)v5 + (_BYTE)v6)) & 3;
  if (v7 - result[7] < v8)
  {
    v19 = ((_BYTE)v7 - ((_BYTE)v5 + (_BYTE)v6)) & 3;
    v16 = a3;
    result = (uint64_t *)sub_1C4D663A4(result, v19);
    v8 = v19;
    a3 = v16;
    v4[6] -= v19;
  }
  else
  {
    v9 = v7 - v8;
    result[6] = v9;
    if (!v8)
      goto LABEL_6;
  }
  v17 = 0;
  do
    *(_BYTE *)(v4[6] + v17++) = 0;
  while (v8 != v17);
  v6 = v4[5];
  v9 = v4[6];
  v5 = v4[4];
LABEL_6:
  v10 = v6 - v9 + v5 - a3;
  v11 = v10 + 4;
  if (v10 == -4 && !*((_BYTE *)v4 + 80))
    return result;
  if ((unint64_t)v4[9] <= 3)
    v4[9] = 4;
  v12 = ((_BYTE)v9 - ((_BYTE)v5 + (_BYTE)v6)) & 3;
  v13 = v4[7];
  if (v9 - v13 < v12)
  {
    v20 = v12;
    sub_1C4D663A4(v4, v12);
    v12 = v20;
    v4[6] -= v20;
  }
  else
  {
    v14 = v9 - v12;
    v4[6] = v9 - v12;
    if (!v12)
      goto LABEL_11;
  }
  v18 = 0;
  do
    *(_BYTE *)(v4[6] + v18++) = 0;
  while (v12 != v18);
  v14 = v4[6];
  v13 = v4[7];
LABEL_11:
  if (v14 - v13 <= 3)
  {
    sub_1C4D663A4(v4, 4uLL);
    v14 = v4[6];
  }
  *(_DWORD *)(v14 - 4) = v11;
  v15 = v14 - 4;
  v4[6] = v15;
  return sub_1C4D66288(v4, a2, *((_DWORD *)v4 + 8) - (int)v15 + *((_DWORD *)v4 + 10));
}

BOOL sub_1C55894E8(uint64_t *a1, int *a2)
{
  uint64_t v2;
  unint64_t v3;
  unint64_t v4;
  BOOL v5;
  uint64_t v6;
  unsigned int v7;
  unsigned int v8;
  unsigned int v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  unint64_t v14;

  v2 = *a1;
  v3 = (unint64_t)a2 - *a1;
  if ((v3 & 3) != 0 && *((_BYTE *)a1 + 40))
    return 0;
  v4 = a1[1];
  v5 = v4 >= 5 && v4 - 4 >= v3;
  if (!v5)
    return 0;
  v6 = *a2;
  v7 = *((_DWORD *)a1 + 5);
  v8 = *((_DWORD *)a1 + 4) + 1;
  *((_DWORD *)a1 + 4) = v8;
  v9 = *((_DWORD *)a1 + 6) + 1;
  *((_DWORD *)a1 + 6) = v9;
  if (v8 > v7 || v9 > *((_DWORD *)a1 + 7))
    return 0;
  v10 = v3 - v6;
  if ((v10 & 1) != 0)
  {
    v11 = 0;
    if (*((_BYTE *)a1 + 40) || v4 - 2 < v10)
      return v11;
  }
  else if (v4 - 2 < v10)
  {
    return 0;
  }
  v12 = *(unsigned __int16 *)(v2 + v10);
  if ((v12 & 1) != 0 && *((_BYTE *)a1 + 40))
    return 0;
  v5 = v4 >= v12;
  v14 = v4 - v12;
  return v14 != 0 && v5 && v14 >= v10;
}

uint64_t *sub_1C55895A0(uint64_t *result, int a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;

  if (!a2)
    return result;
  v2 = result;
  if ((unint64_t)result[9] <= 3)
    result[9] = 4;
  v3 = result[4];
  v4 = result[5];
  v5 = result[6];
  v6 = v5 - (v3 + v4);
  v7 = v6 & 3;
  if (v5 - result[7] < v7)
  {
    v17 = a2;
    result = (uint64_t *)sub_1C4D663A4(result, v6 & 3);
    a2 = v17;
    v2[6] -= v7;
  }
  else
  {
    v8 = v5 - v7;
    result[6] = v8;
    if ((v6 & 3) == 0)
      goto LABEL_6;
  }
  v15 = 0;
  do
    *(_BYTE *)(v2[6] + v15++) = 0;
  while (v7 != v15);
  v4 = v2[5];
  v8 = v2[6];
  v3 = v2[4];
LABEL_6:
  v9 = v4 - v8 + v3 - a2;
  v10 = v9 + 4;
  if (v9 == -4 && !*((_BYTE *)v2 + 80))
    return result;
  if ((unint64_t)v2[9] <= 3)
    v2[9] = 4;
  v11 = ((_BYTE)v8 - ((_BYTE)v3 + (_BYTE)v4)) & 3;
  v12 = v2[7];
  if (v8 - v12 < v11)
  {
    v18 = v11;
    sub_1C4D663A4(v2, v11);
    v11 = v18;
    v2[6] -= v18;
  }
  else
  {
    v13 = v8 - v11;
    v2[6] = v8 - v11;
    if (!v11)
      goto LABEL_11;
  }
  v16 = 0;
  do
    *(_BYTE *)(v2[6] + v16++) = 0;
  while (v11 != v16);
  v13 = v2[6];
  v12 = v2[7];
LABEL_11:
  if (v13 - v12 <= 3)
  {
    sub_1C4D663A4(v2, 4uLL);
    v13 = v2[6];
  }
  *(_DWORD *)(v13 - 4) = v10;
  v14 = v13 - 4;
  v2[6] = v14;
  return sub_1C4D66288(v2, 4, *((_DWORD *)v2 + 8) - (int)v14 + *((_DWORD *)v2 + 10));
}

uint64_t *sub_1C558973C(uint64_t *result, int a2)
{
  uint64_t *v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  char v6;
  unint64_t v7;
  uint64_t v8;
  int v9;
  int v10;
  unint64_t v11;
  uint64_t v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;

  if (!a2)
    return result;
  v2 = result;
  if ((unint64_t)result[9] <= 3)
    result[9] = 4;
  v3 = result[4];
  v4 = result[5];
  v5 = result[6];
  v6 = v5 - (v3 + v4);
  v7 = v6 & 3;
  if (v5 - result[7] < v7)
  {
    v17 = a2;
    result = (uint64_t *)sub_1C4D663A4(result, v6 & 3);
    a2 = v17;
    v2[6] -= v7;
  }
  else
  {
    v8 = v5 - v7;
    result[6] = v8;
    if ((v6 & 3) == 0)
      goto LABEL_6;
  }
  v15 = 0;
  do
    *(_BYTE *)(v2[6] + v15++) = 0;
  while (v7 != v15);
  v4 = v2[5];
  v8 = v2[6];
  v3 = v2[4];
LABEL_6:
  v9 = v4 - v8 + v3 - a2;
  v10 = v9 + 4;
  if (v9 == -4 && !*((_BYTE *)v2 + 80))
    return result;
  if ((unint64_t)v2[9] <= 3)
    v2[9] = 4;
  v11 = ((_BYTE)v8 - ((_BYTE)v3 + (_BYTE)v4)) & 3;
  v12 = v2[7];
  if (v8 - v12 < v11)
  {
    v18 = v11;
    sub_1C4D663A4(v2, v11);
    v11 = v18;
    v2[6] -= v18;
  }
  else
  {
    v13 = v8 - v11;
    v2[6] = v8 - v11;
    if (!v11)
      goto LABEL_11;
  }
  v16 = 0;
  do
    *(_BYTE *)(v2[6] + v16++) = 0;
  while (v11 != v16);
  v13 = v2[6];
  v12 = v2[7];
LABEL_11:
  if (v13 - v12 <= 3)
  {
    sub_1C4D663A4(v2, 4uLL);
    v13 = v2[6];
  }
  *(_DWORD *)(v13 - 4) = v10;
  v14 = v13 - 4;
  v2[6] = v14;
  return sub_1C4D66288(v2, 8, *((_DWORD *)v2 + 8) - (int)v14 + *((_DWORD *)v2 + 10));
}

uint64_t sub_1C55898D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v10;
  unint64_t v11;

  if (*(_QWORD *)(a1 + 72) <= 7uLL)
    *(_QWORD *)(a1 + 72) = 8;
  v4 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
  v6 = ((_BYTE)v4 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 7;
  if (v4 - v5 < v6)
  {
    v11 = ((_BYTE)v4 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 7;
    sub_1C4D663A4((uint64_t *)a1, v6);
    v6 = v11;
    *(_QWORD *)(a1 + 48) -= v11;
  }
  else
  {
    v7 = v4 - v6;
    *(_QWORD *)(a1 + 48) = v7;
    if (!v6)
      goto LABEL_5;
  }
  v10 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(a1 + 48) + v10++) = 0;
  while (v6 != v10);
  v7 = *(_QWORD *)(a1 + 48);
  v5 = *(_QWORD *)(a1 + 56);
LABEL_5:
  if ((unint64_t)(v7 - v5) <= 7)
  {
    sub_1C4D663A4((uint64_t *)a1, 8uLL);
    v7 = *(_QWORD *)(a1 + 48);
  }
  *(_QWORD *)(v7 - 8) = a2;
  v8 = v7 - 8;
  *(_QWORD *)(a1 + 48) = v8;
  return (*(_DWORD *)(a1 + 32) - v8 + *(_DWORD *)(a1 + 40));
}

uint64_t sub_1C55899C0(uint64_t result, int a2)
{
  uint64_t v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  int v13;
  unint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;

  v3 = result;
  v5 = *(_QWORD *)(result + 40);
  v4 = *(_QWORD *)(result + 48);
  *(_QWORD *)(result + 56) = v5;
  v6 = *(_QWORD *)(result + 72);
  v7 = (-4 - (*(_DWORD *)(result + 32) + v5 - v4)) & (v6 - 1);
  if (v4 - v5 < v7)
  {
    result = sub_1C4D663A4((uint64_t *)result, v7);
    *(_QWORD *)(v3 + 48) -= v7;
  }
  else
  {
    *(_QWORD *)(result + 48) = v4 - v7;
    if (!v7)
      goto LABEL_3;
  }
  v17 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(v3 + 48) + v17++) = 0;
  while (v7 != v17);
  v6 = *(_QWORD *)(v3 + 72);
LABEL_3:
  if (v6 <= 3)
    *(_QWORD *)(v3 + 72) = 4;
  v8 = *(_QWORD *)(v3 + 32);
  v9 = *(_QWORD *)(v3 + 40);
  v10 = *(_QWORD *)(v3 + 48);
  v11 = ((int)v10 - ((int)v8 + (int)v9)) & 3;
  if (v10 - *(_QWORD *)(v3 + 56) < v11)
  {
    result = sub_1C4D663A4((uint64_t *)v3, ((int)v10 - ((int)v8 + (int)v9)) & 3);
    *(_QWORD *)(v3 + 48) -= v11;
  }
  else
  {
    v12 = v10 - v11;
    *(_QWORD *)(v3 + 48) = v12;
    if (!v11)
    {
      v13 = v8 + v9 - v12;
      goto LABEL_8;
    }
  }
  v18 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(v3 + 48) + v18++) = 0;
  while (v11 != v18);
  v9 = *(_QWORD *)(v3 + 40);
  v12 = *(_QWORD *)(v3 + 48);
  v8 = *(_QWORD *)(v3 + 32);
  v13 = v8 - v12 + v9;
  if (*(_QWORD *)(v3 + 72) <= 3uLL)
    *(_QWORD *)(v3 + 72) = 4;
LABEL_8:
  v14 = ((_BYTE)v12 - ((_BYTE)v8 + (_BYTE)v9)) & 3;
  v15 = *(_QWORD *)(v3 + 56);
  if (v12 - v15 < v14)
  {
    result = sub_1C4D663A4((uint64_t *)v3, v14);
    *(_QWORD *)(v3 + 48) -= v14;
  }
  else
  {
    v16 = v12 - v14;
    *(_QWORD *)(v3 + 48) = v12 - v14;
    if (!v14)
      goto LABEL_10;
  }
  v19 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(v3 + 48) + v19++) = 0;
  while (v14 != v19);
  v16 = *(_QWORD *)(v3 + 48);
  v15 = *(_QWORD *)(v3 + 56);
LABEL_10:
  if ((unint64_t)(v16 - v15) <= 3)
  {
    result = sub_1C4D663A4((uint64_t *)v3, 4uLL);
    v16 = *(_QWORD *)(v3 + 48);
  }
  *(_DWORD *)(v16 - 4) = v13 - a2 + 4;
  *(_QWORD *)(v3 + 48) = v16 - 4;
  *(_BYTE *)(v3 + 71) = 1;
  return result;
}

uint64_t sub_1C5589B94(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int v33;

  *(_BYTE *)(a1 + 70) = 1;
  if (*(_QWORD *)(a1 + 72) <= 3uLL)
    *(_QWORD *)(a1 + 72) = 4;
  v6 = *(_QWORD *)(a1 + 48);
  v7 = ((_BYTE)v6 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3;
  if (v6 - *(_QWORD *)(a1 + 56) < v7)
  {
    sub_1C4D663A4((uint64_t *)a1, ((_BYTE)v6 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3);
    *(_QWORD *)(a1 + 48) -= v7;
  }
  else
  {
    *(_QWORD *)(a1 + 48) = v6 - v7;
    if (!v7)
      goto LABEL_5;
  }
  v29 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(a1 + 48) + v29++) = 0;
  while (v7 != v29);
  if (*(_QWORD *)(a1 + 72) <= 3uLL)
    *(_QWORD *)(a1 + 72) = 4;
LABEL_5:
  v8 = *(_QWORD *)(a1 + 48);
  v9 = ((_BYTE)v8 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3;
  if (v8 - *(_QWORD *)(a1 + 56) < v9)
  {
    sub_1C4D663A4((uint64_t *)a1, ((_BYTE)v8 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3);
    *(_QWORD *)(a1 + 48) -= v9;
  }
  else
  {
    *(_QWORD *)(a1 + 48) = v8 - v9;
    if (!v9)
      goto LABEL_7;
  }
  v30 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(a1 + 48) + v30++) = 0;
  while (v9 != v30);
LABEL_7:
  if (a3)
  {
    v16 = a3;
    do
    {
      --v16;
      v17 = *(_DWORD *)(a2 + 4 * v16);
      if (*(_QWORD *)(a1 + 72) <= 3uLL)
        *(_QWORD *)(a1 + 72) = 4;
      v18 = *(_QWORD *)(a1 + 32);
      v19 = *(_QWORD *)(a1 + 40);
      v20 = *(_QWORD *)(a1 + 48);
      v21 = ((int)v20 - ((int)v18 + (int)v19)) & 3;
      if (v20 - *(_QWORD *)(a1 + 56) < v21)
      {
        sub_1C4D663A4((uint64_t *)a1, ((int)v20 - ((int)v18 + (int)v19)) & 3);
        *(_QWORD *)(a1 + 48) -= v21;
      }
      else
      {
        v22 = v20 - v21;
        *(_QWORD *)(a1 + 48) = v22;
        if (!v21)
        {
          v23 = v18 + v19 - v22;
          goto LABEL_21;
        }
      }
      v27 = 0;
      do
        *(_BYTE *)(*(_QWORD *)(a1 + 48) + v27++) = 0;
      while (v21 != v27);
      v19 = *(_QWORD *)(a1 + 40);
      v22 = *(_QWORD *)(a1 + 48);
      v18 = *(_QWORD *)(a1 + 32);
      v23 = v18 - v22 + v19;
      if (*(_QWORD *)(a1 + 72) <= 3uLL)
        *(_QWORD *)(a1 + 72) = 4;
LABEL_21:
      v24 = ((_BYTE)v22 - ((_BYTE)v18 + (_BYTE)v19)) & 3;
      v25 = *(_QWORD *)(a1 + 56);
      if (v22 - v25 < v24)
      {
        v33 = v23;
        v32 = v24;
        sub_1C4D663A4((uint64_t *)a1, v24);
        v24 = v32;
        v23 = v33;
        *(_QWORD *)(a1 + 48) -= v24;
LABEL_31:
        v28 = 0;
        do
          *(_BYTE *)(*(_QWORD *)(a1 + 48) + v28++) = 0;
        while (v24 != v28);
        v26 = *(_QWORD *)(a1 + 48);
        v25 = *(_QWORD *)(a1 + 56);
        goto LABEL_23;
      }
      v26 = v22 - v24;
      *(_QWORD *)(a1 + 48) = v22 - v24;
      if (v24)
        goto LABEL_31;
LABEL_23:
      if ((unint64_t)(v26 - v25) <= 3)
      {
        sub_1C4D663A4((uint64_t *)a1, 4uLL);
        v26 = *(_QWORD *)(a1 + 48);
      }
      *(_DWORD *)(v26 - 4) = v23 - v17 + 4;
      *(_QWORD *)(a1 + 48) = v26 - 4;
    }
    while (v16);
  }
  *(_BYTE *)(a1 + 70) = 0;
  if (*(_QWORD *)(a1 + 72) <= 3uLL)
    *(_QWORD *)(a1 + 72) = 4;
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = ((_BYTE)v10 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3;
  if (v10 - v11 < v12)
  {
    sub_1C4D663A4((uint64_t *)a1, ((_BYTE)v10 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3);
    *(_QWORD *)(a1 + 48) -= v12;
  }
  else
  {
    v13 = v10 - v12;
    *(_QWORD *)(a1 + 48) = v13;
    if (!v12)
      goto LABEL_12;
  }
  v31 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(a1 + 48) + v31++) = 0;
  while (v12 != v31);
  v13 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
LABEL_12:
  if ((unint64_t)(v13 - v11) <= 3)
  {
    sub_1C4D663A4((uint64_t *)a1, 4uLL);
    v13 = *(_QWORD *)(a1 + 48);
  }
  *(_DWORD *)(v13 - 4) = a3;
  v14 = v13 - 4;
  *(_QWORD *)(a1 + 48) = v14;
  return (*(_DWORD *)(a1 + 32) - v14 + *(_DWORD *)(a1 + 40));
}

uint64_t sub_1C5589EF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unint64_t v21;
  uint64_t v22;
  int v23;
  unint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  int v33;

  *(_BYTE *)(a1 + 70) = 1;
  if (*(_QWORD *)(a1 + 72) <= 3uLL)
    *(_QWORD *)(a1 + 72) = 4;
  v6 = *(_QWORD *)(a1 + 48);
  v7 = ((_BYTE)v6 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3;
  if (v6 - *(_QWORD *)(a1 + 56) < v7)
  {
    sub_1C4D663A4((uint64_t *)a1, ((_BYTE)v6 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3);
    *(_QWORD *)(a1 + 48) -= v7;
  }
  else
  {
    *(_QWORD *)(a1 + 48) = v6 - v7;
    if (!v7)
      goto LABEL_5;
  }
  v29 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(a1 + 48) + v29++) = 0;
  while (v7 != v29);
  if (*(_QWORD *)(a1 + 72) <= 3uLL)
    *(_QWORD *)(a1 + 72) = 4;
LABEL_5:
  v8 = *(_QWORD *)(a1 + 48);
  v9 = ((_BYTE)v8 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3;
  if (v8 - *(_QWORD *)(a1 + 56) < v9)
  {
    sub_1C4D663A4((uint64_t *)a1, ((_BYTE)v8 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3);
    *(_QWORD *)(a1 + 48) -= v9;
  }
  else
  {
    *(_QWORD *)(a1 + 48) = v8 - v9;
    if (!v9)
      goto LABEL_7;
  }
  v30 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(a1 + 48) + v30++) = 0;
  while (v9 != v30);
LABEL_7:
  if (a3)
  {
    v16 = a3;
    do
    {
      --v16;
      v17 = *(_DWORD *)(a2 + 4 * v16);
      if (*(_QWORD *)(a1 + 72) <= 3uLL)
        *(_QWORD *)(a1 + 72) = 4;
      v18 = *(_QWORD *)(a1 + 32);
      v19 = *(_QWORD *)(a1 + 40);
      v20 = *(_QWORD *)(a1 + 48);
      v21 = ((int)v20 - ((int)v18 + (int)v19)) & 3;
      if (v20 - *(_QWORD *)(a1 + 56) < v21)
      {
        sub_1C4D663A4((uint64_t *)a1, ((int)v20 - ((int)v18 + (int)v19)) & 3);
        *(_QWORD *)(a1 + 48) -= v21;
      }
      else
      {
        v22 = v20 - v21;
        *(_QWORD *)(a1 + 48) = v22;
        if (!v21)
        {
          v23 = v18 + v19 - v22;
          goto LABEL_21;
        }
      }
      v27 = 0;
      do
        *(_BYTE *)(*(_QWORD *)(a1 + 48) + v27++) = 0;
      while (v21 != v27);
      v19 = *(_QWORD *)(a1 + 40);
      v22 = *(_QWORD *)(a1 + 48);
      v18 = *(_QWORD *)(a1 + 32);
      v23 = v18 - v22 + v19;
      if (*(_QWORD *)(a1 + 72) <= 3uLL)
        *(_QWORD *)(a1 + 72) = 4;
LABEL_21:
      v24 = ((_BYTE)v22 - ((_BYTE)v18 + (_BYTE)v19)) & 3;
      v25 = *(_QWORD *)(a1 + 56);
      if (v22 - v25 < v24)
      {
        v33 = v23;
        v32 = v24;
        sub_1C4D663A4((uint64_t *)a1, v24);
        v24 = v32;
        v23 = v33;
        *(_QWORD *)(a1 + 48) -= v24;
LABEL_31:
        v28 = 0;
        do
          *(_BYTE *)(*(_QWORD *)(a1 + 48) + v28++) = 0;
        while (v24 != v28);
        v26 = *(_QWORD *)(a1 + 48);
        v25 = *(_QWORD *)(a1 + 56);
        goto LABEL_23;
      }
      v26 = v22 - v24;
      *(_QWORD *)(a1 + 48) = v22 - v24;
      if (v24)
        goto LABEL_31;
LABEL_23:
      if ((unint64_t)(v26 - v25) <= 3)
      {
        sub_1C4D663A4((uint64_t *)a1, 4uLL);
        v26 = *(_QWORD *)(a1 + 48);
      }
      *(_DWORD *)(v26 - 4) = v23 - v17 + 4;
      *(_QWORD *)(a1 + 48) = v26 - 4;
    }
    while (v16);
  }
  *(_BYTE *)(a1 + 70) = 0;
  if (*(_QWORD *)(a1 + 72) <= 3uLL)
    *(_QWORD *)(a1 + 72) = 4;
  v10 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
  v12 = ((_BYTE)v10 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3;
  if (v10 - v11 < v12)
  {
    sub_1C4D663A4((uint64_t *)a1, ((_BYTE)v10 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3);
    *(_QWORD *)(a1 + 48) -= v12;
  }
  else
  {
    v13 = v10 - v12;
    *(_QWORD *)(a1 + 48) = v13;
    if (!v12)
      goto LABEL_12;
  }
  v31 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(a1 + 48) + v31++) = 0;
  while (v12 != v31);
  v13 = *(_QWORD *)(a1 + 48);
  v11 = *(_QWORD *)(a1 + 56);
LABEL_12:
  if ((unint64_t)(v13 - v11) <= 3)
  {
    sub_1C4D663A4((uint64_t *)a1, 4uLL);
    v13 = *(_QWORD *)(a1 + 48);
  }
  *(_DWORD *)(v13 - 4) = a3;
  v14 = v13 - 4;
  *(_QWORD *)(a1 + 48) = v14;
  return (*(_DWORD *)(a1 + 32) - v14 + *(_DWORD *)(a1 + 40));
}

uint64_t sub_1C558A24C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6;
  unint64_t v7;
  uint64_t v8;
  unint64_t v9;
  uint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  uint64_t v16;
  int v17;
  unint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  int v33;

  *(_BYTE *)(a1 + 70) = 1;
  if (*(_QWORD *)(a1 + 72) <= 3uLL)
    *(_QWORD *)(a1 + 72) = 4;
  v6 = *(_QWORD *)(a1 + 48);
  v7 = ((_BYTE)v6 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3;
  if (v6 - *(_QWORD *)(a1 + 56) < v7)
  {
    sub_1C4D663A4((uint64_t *)a1, ((_BYTE)v6 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3);
    *(_QWORD *)(a1 + 48) -= v7;
  }
  else
  {
    *(_QWORD *)(a1 + 48) = v6 - v7;
    if (!v7)
      goto LABEL_5;
  }
  v29 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(a1 + 48) + v29++) = 0;
  while (v7 != v29);
  if (*(_QWORD *)(a1 + 72) <= 3uLL)
    *(_QWORD *)(a1 + 72) = 4;
LABEL_5:
  v8 = *(_QWORD *)(a1 + 48);
  v9 = ((_BYTE)v8 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3;
  if (v8 - *(_QWORD *)(a1 + 56) < v9)
  {
    sub_1C4D663A4((uint64_t *)a1, ((_BYTE)v8 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3);
    *(_QWORD *)(a1 + 48) -= v9;
  }
  else
  {
    *(_QWORD *)(a1 + 48) = v8 - v9;
    if (!v9)
      goto LABEL_7;
  }
  v30 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(a1 + 48) + v30++) = 0;
  while (v9 != v30);
LABEL_7:
  if (a3)
  {
    v10 = a3;
    do
    {
      --v10;
      v11 = *(_DWORD *)(a2 + 4 * v10);
      if (*(_QWORD *)(a1 + 72) <= 3uLL)
        *(_QWORD *)(a1 + 72) = 4;
      v12 = *(_QWORD *)(a1 + 32);
      v13 = *(_QWORD *)(a1 + 40);
      v14 = *(_QWORD *)(a1 + 48);
      v15 = ((int)v14 - ((int)v12 + (int)v13)) & 3;
      if (v14 - *(_QWORD *)(a1 + 56) < v15)
      {
        sub_1C4D663A4((uint64_t *)a1, ((int)v14 - ((int)v12 + (int)v13)) & 3);
        *(_QWORD *)(a1 + 48) -= v15;
      }
      else
      {
        v16 = v14 - v15;
        *(_QWORD *)(a1 + 48) = v16;
        if (!v15)
        {
          v17 = v12 + v13 - v16;
          goto LABEL_14;
        }
      }
      v21 = 0;
      do
        *(_BYTE *)(*(_QWORD *)(a1 + 48) + v21++) = 0;
      while (v15 != v21);
      v13 = *(_QWORD *)(a1 + 40);
      v16 = *(_QWORD *)(a1 + 48);
      v12 = *(_QWORD *)(a1 + 32);
      v17 = v12 - v16 + v13;
      if (*(_QWORD *)(a1 + 72) <= 3uLL)
        *(_QWORD *)(a1 + 72) = 4;
LABEL_14:
      v18 = ((_BYTE)v16 - ((_BYTE)v12 + (_BYTE)v13)) & 3;
      v19 = *(_QWORD *)(a1 + 56);
      if (v16 - v19 < v18)
      {
        v33 = v17;
        v31 = v18;
        sub_1C4D663A4((uint64_t *)a1, v18);
        v18 = v31;
        v17 = v33;
        *(_QWORD *)(a1 + 48) -= v18;
LABEL_24:
        v22 = 0;
        do
          *(_BYTE *)(*(_QWORD *)(a1 + 48) + v22++) = 0;
        while (v18 != v22);
        v20 = *(_QWORD *)(a1 + 48);
        v19 = *(_QWORD *)(a1 + 56);
        goto LABEL_16;
      }
      v20 = v16 - v18;
      *(_QWORD *)(a1 + 48) = v16 - v18;
      if (v18)
        goto LABEL_24;
LABEL_16:
      if ((unint64_t)(v20 - v19) <= 3)
      {
        sub_1C4D663A4((uint64_t *)a1, 4uLL);
        v20 = *(_QWORD *)(a1 + 48);
      }
      *(_DWORD *)(v20 - 4) = v17 - v11 + 4;
      *(_QWORD *)(a1 + 48) = v20 - 4;
    }
    while (v10);
  }
  *(_BYTE *)(a1 + 70) = 0;
  if (*(_QWORD *)(a1 + 72) <= 3uLL)
    *(_QWORD *)(a1 + 72) = 4;
  v23 = *(_QWORD *)(a1 + 48);
  v24 = *(_QWORD *)(a1 + 56);
  v25 = ((_BYTE)v23 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3;
  if (v23 - v24 < v25)
  {
    sub_1C4D663A4((uint64_t *)a1, ((_BYTE)v23 - (*(_DWORD *)(a1 + 32) + *(_DWORD *)(a1 + 40))) & 3);
    *(_QWORD *)(a1 + 48) -= v25;
  }
  else
  {
    v26 = v23 - v25;
    *(_QWORD *)(a1 + 48) = v26;
    if (!v25)
      goto LABEL_31;
  }
  v32 = 0;
  do
    *(_BYTE *)(*(_QWORD *)(a1 + 48) + v32++) = 0;
  while (v25 != v32);
  v26 = *(_QWORD *)(a1 + 48);
  v24 = *(_QWORD *)(a1 + 56);
LABEL_31:
  if ((unint64_t)(v26 - v24) <= 3)
  {
    sub_1C4D663A4((uint64_t *)a1, 4uLL);
    v26 = *(_QWORD *)(a1 + 48);
  }
  *(_DWORD *)(v26 - 4) = a3;
  v27 = v26 - 4;
  *(_QWORD *)(a1 + 48) = v27;
  return (*(_DWORD *)(a1 + 32) - v27 + *(_DWORD *)(a1 + 40));
}

__n128 sub_1C558A5A8(__n128 *a1, char **a2, _WORD *a3)
{
  __n128 result;
  char *v7;

  llvm::cl::Option::setArgStr((uint64_t)&PrintPerfDiagsForLoopsOnly, "print-perf-diags-for-loops-only", 0x1FuLL);
  result = *a1;
  xmmword_1ED831298 = (__int128)*a1;
  v7 = *a2;
  byte_1ED8312F8 = **a2;
  byte_1ED831309 = 1;
  byte_1ED831308 = *v7;
  word_1ED831282 = (32 * (*a3 & 3)) | word_1ED831282 & 0xFF9F;
  return result;
}

void sub_1C558A630()
{
  JUMPOUT(0x1CAA32FC0);
}

__n128 sub_1C558A644(uint64_t a1)
{
  char *v2;
  __n128 result;

  v2 = (char *)operator new(0x48uLL);
  *(_QWORD *)v2 = &off_1E816F810;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  *(_OWORD *)(v2 + 24) = *(_OWORD *)(a1 + 24);
  *(_OWORD *)(v2 + 40) = *(_OWORD *)(a1 + 40);
  result = *(__n128 *)(a1 + 56);
  *(__n128 *)(v2 + 56) = result;
  return result;
}

__n128 sub_1C558A694(uint64_t a1, uint64_t a2)
{
  __n128 result;
  __int128 v3;
  __int128 v4;

  *(_QWORD *)a2 = &off_1E816F810;
  result = *(__n128 *)(a1 + 8);
  v3 = *(_OWORD *)(a1 + 24);
  v4 = *(_OWORD *)(a1 + 40);
  *(_OWORD *)(a2 + 56) = *(_OWORD *)(a1 + 56);
  *(_OWORD *)(a2 + 40) = v4;
  *(_OWORD *)(a2 + 24) = v3;
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1C558A6CC(uint64_t a1, int *a2, int *a3, unsigned int *a4)
{
  int v5;
  int v6;
  unsigned int v7;
  char *v8;
  _DWORD *v9;
  _DWORD *v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  unsigned int v14;
  int v15;
  int v16;
  char *v17;
  char *v18;
  int v19;
  int v20;
  int v21;
  char *v22;
  char *v23;
  __int128 v24;
  unint64_t v25;
  int64_t v26;
  __int128 v27;
  int v28;
  void *__src;
  uint64_t v30;
  _DWORD v31[2];
  uint64_t v32;
  int v33;
  uint64_t v34;

  v34 = *MEMORY[0x1E0C80C00];
  v5 = *a2;
  v6 = *a3;
  v7 = *a4;
  v8 = (char *)v31;
  __src = v31;
  v30 = 0x400000001;
  v31[0] = v5;
  v31[1] = v6;
  v33 = 0;
  v32 = v7;
  v9 = *(_DWORD **)(a1 + 16);
  HIDWORD(v32) = *v9 + **(_DWORD **)(a1 + 8);
  v33 = 0;
  v10 = *(_DWORD **)(a1 + 24);
  v11 = *(_QWORD *)(a1 + 32);
  *v9 += *v10 * v7;
  if (*(_DWORD *)(v11 + 224) && v31[0] == 1)
  {
    LODWORD(v32) = 0;
    v12 = *v10 * v7;
    v13 = v30;
    if (v12)
    {
      v14 = HIDWORD(v32);
      v15 = v12 + HIDWORD(v32);
      do
      {
        if (((*(_QWORD *)(*(_QWORD *)(v11 + 160) + 8 * (v14 >> 6)) >> v14) & 1) != 0)
          v16 = 9;
        else
          v16 = 1;
        v17 = (char *)__src;
        v18 = (char *)__src + 20 * v13;
        v19 = *((_DWORD *)v18 - 3);
        if (v16 == *((_DWORD *)v18 - 5))
        {
          *((_DWORD *)v18 - 3) = v19 + 1;
        }
        else if (v19)
        {
          v20 = *((_DWORD *)v18 - 1);
          v27 = *(_OWORD *)(v18 - 20);
          v28 = v20;
          LODWORD(v27) = v16;
          DWORD2(v27) = 1;
          v21 = *((_DWORD *)v18 - 3);
          HIDWORD(v27) = *((_DWORD *)v18 - 2) + *v10 * v21;
          v28 = *((_DWORD *)v18 - 1) + *v10 * v21;
          if (v13 >= HIDWORD(v30))
          {
            v25 = v13 + 1;
            if (__src <= &v27 && v18 > (char *)&v27)
            {
              v26 = (char *)&v27 - (_BYTE *)__src;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v31, v25, 20);
              v17 = (char *)__src;
              v22 = (char *)__src + v26;
            }
            else
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__src, (uint64_t)v31, v25, 20);
              v22 = (char *)&v27;
              v17 = (char *)__src;
            }
          }
          else
          {
            v22 = (char *)&v27;
          }
          v23 = &v17[20 * v30];
          v24 = *(_OWORD *)v22;
          *((_DWORD *)v23 + 4) = *((_DWORD *)v22 + 4);
          *(_OWORD *)v23 = v24;
          v13 = v30 + 1;
          LODWORD(v30) = v30 + 1;
          v10 = *(_DWORD **)(a1 + 24);
        }
        else
        {
          *((_DWORD *)v18 - 5) = v16;
          *((_DWORD *)v18 - 3) = 1;
        }
        v14 += *v10;
      }
      while (v14 != v15);
      v8 = (char *)__src;
    }
  }
  else
  {
    v13 = v30;
  }
  sub_1C558A974(*(_QWORD *)(a1 + 40), *(_QWORD *)(*(_QWORD *)(a1 + 40) + 8), v8, &v8[20 * v13], v13);
  sub_1C558A974(*(_QWORD *)(a1 + 48), *(_QWORD *)(*(_QWORD *)(a1 + 48) + 8), (char *)__src, (char *)__src + 20 * v30, v30);
  **(_BYTE **)(a1 + 56) = 1;
  **(_BYTE **)(a1 + 64) = 1;
  if (__src != v31)
    free(__src);
}

void sub_1C558A974(uint64_t a1, uint64_t a2, char *__src, char *a4, uint64_t a5)
{
  char *v6;
  char *v8;
  _BYTE *v9;
  uint64_t v10;
  char *v11;
  uint64_t v12;
  unint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  char *v18;
  int64_t v19;
  char *v20;
  char *v21;
  unint64_t v22;
  char *v23;
  __int128 v24;
  char *v25;
  uint64_t v26;
  char *v27;
  uint64_t v28;
  char *v29;
  char *v30;
  char *v31;
  __int128 v32;
  char *v33;
  char *v34;

  if (a5 < 1)
    return;
  v6 = __src;
  v8 = *(char **)a1;
  v9 = *(_BYTE **)(a1 + 8);
  v10 = (a2 - *(_QWORD *)a1) / 20;
  v11 = (char *)(*(_QWORD *)a1 + 20 * v10);
  v12 = *(_QWORD *)(a1 + 16);
  if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((v12 - (uint64_t)v9) >> 2)) < a5)
  {
    v13 = a5 - 0x3333333333333333 * ((v9 - v8) >> 2);
    if (v13 > 0xCCCCCCCCCCCCCCCLL)
      abort();
    v14 = 0xCCCCCCCCCCCCCCCDLL * ((v12 - (uint64_t)v8) >> 2);
    v15 = 2 * v14;
    if (2 * v14 <= v13)
      v15 = v13;
    if (v14 >= 0x666666666666666)
      v16 = 0xCCCCCCCCCCCCCCCLL;
    else
      v16 = v15;
    if (v16)
    {
      if (v16 > 0xCCCCCCCCCCCCCCCLL)
        sub_1C4764EE4();
      v17 = (char *)operator new(20 * v16);
    }
    else
    {
      v17 = 0;
    }
    v25 = &v17[20 * v10];
    v26 = 5 * a5;
    v27 = &v25[20 * a5];
    v28 = 4 * v26;
    v29 = v25;
    do
    {
      *(_OWORD *)v29 = *(_OWORD *)v6;
      *((_DWORD *)v29 + 4) = *((_DWORD *)v6 + 4);
      v29 += 20;
      v6 += 20;
      v28 -= 20;
    }
    while (v28);
    v30 = *(char **)a1;
    if (v11 != *(char **)a1)
    {
      v31 = v11;
      do
      {
        v32 = *(_OWORD *)(v31 - 20);
        *((_DWORD *)v25 - 1) = *((_DWORD *)v31 - 1);
        *(_OWORD *)(v25 - 20) = v32;
        v25 -= 20;
        v31 -= 20;
      }
      while (v31 != v30);
      v9 = *(_BYTE **)(a1 + 8);
    }
    v33 = &v17[20 * v16];
    if (v9 != v11)
      memmove(v27, v11, v9 - v11);
    v34 = *(char **)a1;
    *(_QWORD *)a1 = v25;
    *(_QWORD *)(a1 + 8) = &v27[v9 - v11];
    *(_QWORD *)(a1 + 16) = v33;
    if (v34)
      operator delete(v34);
    return;
  }
  if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((v9 - v11) >> 2)) >= a5)
  {
    v18 = &__src[20 * a5];
    v20 = *(char **)(a1 + 8);
LABEL_18:
    v21 = &v11[20 * a5];
    v22 = (unint64_t)&v20[-20 * a5];
    v23 = v20;
    if (v22 < (unint64_t)v9)
    {
      v23 = v20;
      do
      {
        v24 = *(_OWORD *)v22;
        *((_DWORD *)v23 + 4) = *(_DWORD *)(v22 + 16);
        *(_OWORD *)v23 = v24;
        v23 += 20;
        v22 += 20;
      }
      while (v22 < (unint64_t)v9);
    }
    *(_QWORD *)(a1 + 8) = v23;
    if (v20 != v21)
      memmove(&v11[20 * a5], v11, v20 - v21);
    if (v18 != v6)
      memmove(v11, v6, v18 - v6);
    return;
  }
  v18 = &__src[4 * ((v9 - v11) >> 2)];
  v19 = a4 - v18;
  if (a4 != v18)
    memmove(*(void **)(a1 + 8), &__src[4 * ((v9 - v11) >> 2)], a4 - v18);
  v20 = &v9[v19];
  *(_QWORD *)(a1 + 8) = &v9[v19];
  if (v9 - v11 >= 1)
    goto LABEL_18;
}

_DWORD *sub_1C558AC00(_DWORD *result, int a2)
{
  _DWORD *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;

  v2 = result;
  if (a2)
  {
    v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    result[4] = v4;
    result = operator new(96 * v4, (std::align_val_t)8uLL);
    *(_QWORD *)v2 = result;
    *((_QWORD *)v2 + 1) = 0;
    v5 = v2[4];
    if ((_DWORD)v5)
    {
      v6 = 96 * v5;
      do
      {
        *(_QWORD *)result = -4096;
        result += 24;
        v6 -= 96;
      }
      while (v6);
    }
  }
  else
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = 0;
    result[4] = 0;
  }
  return result;
}

_QWORD *sub_1C558AC98(_QWORD *result)
{
  int v1;
  _QWORD *v2;
  _QWORD *v3;
  int v4;
  uint64_t v5;

  v1 = *(_DWORD *)result;
  if (*(_DWORD *)result > 1u || *((_DWORD *)result + 1))
  {
    if ((v1 & 1) != 0)
    {
      v2 = result + 1;
      v3 = result + 9;
    }
    else
    {
      v5 = *((unsigned int *)result + 4);
      if (((2 * v1) & 0xFFFFFFFC) < v5 && v5 >= 0x41)
        return sub_1C558AD14(result);
      if (!(_DWORD)v5)
      {
        v4 = 0;
LABEL_6:
        *(_DWORD *)result = v4;
        *((_DWORD *)result + 1) = 0;
        return result;
      }
      v2 = (_QWORD *)result[1];
      v3 = &v2[v5];
    }
    do
      *v2++ = -4096;
    while (v2 != v3);
    v4 = *(_DWORD *)result & 1;
    goto LABEL_6;
  }
  return result;
}

_QWORD *sub_1C558AD14(_QWORD *result)
{
  _QWORD *v1;
  unsigned int v2;
  char v3;
  int v4;
  unsigned int v5;
  _QWORD *v6;
  _QWORD *v7;

  v1 = result;
  v2 = *(_DWORD *)result;
  v3 = __clz((*(_DWORD *)result >> 1) - 1);
  if ((v3 & 0x3E) == 0x1C)
    v4 = 64;
  else
    v4 = 1 << (33 - v3);
  if (v2 >= 2)
    v5 = v4;
  else
    v5 = 0;
  if ((v2 & 1) != 0 && v5 < 9)
  {
    v6 = result + 1;
    *result = 1;
    v7 = result + 9;
    do
LABEL_16:
      *v6++ = -4096;
    while (v6 != v7);
    return result;
  }
  if ((v2 & 1) != 0)
    return sub_1C5587870(v1, v5);
  if (v5 != *((_DWORD *)result + 4))
  {
    MEMORY[0x1CAA32FB4](result[1], 8);
    return sub_1C5587870(v1, v5);
  }
  *result = 0;
  if (v5)
  {
    v6 = (_QWORD *)result[1];
    v7 = &v6[v5];
    goto LABEL_16;
  }
  return result;
}

_DWORD *sub_1C558ADD8(_DWORD *result)
{
  _DWORD *v1;
  uint64_t v2;
  int v3;
  int v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;

  v1 = result;
  v2 = result[4];
  v3 = result[2];
  v4 = 1 << (33 - __clz(v3 - 1));
  if (v4 <= 64)
    v4 = 64;
  if (v3)
    v5 = v4;
  else
    v5 = 0;
  if (v5 == (_DWORD)v2)
  {
    *((_QWORD *)result + 1) = 0;
    if ((_DWORD)v2)
    {
      v6 = *(_QWORD **)result;
      v7 = 96 * v2;
      do
      {
        *v6 = -4096;
        v6 += 12;
        v7 -= 96;
      }
      while (v7);
    }
  }
  else
  {
    MEMORY[0x1CAA32FB4](*(_QWORD *)result, 8);
    return sub_1C558AC00(v1, v5);
  }
  return result;
}

uint64_t sub_1C558AE74(uint64_t result, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  BOOL v10;
  unsigned int v11;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(result + 96 * v5);
    v7 = *v6;
    if (*v6 != a3)
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v10 = 0;
        else
          v10 = v7 == -8192;
        if (v10)
          v8 = v6;
        v11 = v5 + v9++;
        v5 = v11 & v4;
        v6 = (_QWORD *)(result + 96 * (v11 & v4));
        v7 = *v6;
        if (*v6 == a3)
          goto LABEL_3;
      }
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
  }
LABEL_3:
  *a4 = v6;
  return result;
}

_QWORD *sub_1C558AEF8(_DWORD *a1, uint64_t *a2, _QWORD *a3)
{
  int v3;
  unsigned int v4;
  _DWORD *v7;
  _QWORD *v8;

  v3 = a1[2];
  v4 = a1[4];
  if (4 * v3 + 4 >= 3 * v4)
  {
    v4 *= 2;
  }
  else if (v4 + ~v3 - a1[3] > v4 >> 3)
  {
    goto LABEL_3;
  }
  v7 = a1;
  sub_1C558AFB4((uint64_t)a1, v4);
  v8 = 0;
  sub_1C558AE74(*(_QWORD *)v7, v7[4], *a2, &v8);
  a1 = v7;
  a3 = v8;
LABEL_3:
  ++a1[2];
  if (*a3 != -4096)
    --a1[3];
  return a3;
}

_QWORD *sub_1C558AFB4(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(96 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C558B078(a1, v4, &v4[12 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 96 * v10;
    do
    {
      *result = -4096;
      result += 12;
      v11 -= 96;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C558B078(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  __int128 v11;
  __int128 v12;
  __int128 v13;
  __int128 v14;
  uint64_t v15;
  int v16;
  BOOL v17;
  unsigned int v18;

  *(_QWORD *)(result + 8) = 0;
  v3 = *(unsigned int *)(result + 16);
  if ((_DWORD)v3)
  {
    v4 = *(_QWORD **)result;
    v5 = 96 * v3;
    do
    {
      *v4 = -4096;
      v4 += 12;
      v5 -= 96;
    }
    while (v5);
  }
  for (; a2 != a3; a2 += 12)
  {
    v6 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v7 = *(_DWORD *)(result + 16) - 1;
      v8 = v7 & ((v6 >> 4) ^ (v6 >> 9));
      v9 = *(_QWORD *)result + 96 * v8;
      v10 = *(_QWORD *)v9;
      if (v6 != *(_QWORD *)v9)
      {
        v15 = 0;
        v16 = 1;
        while (v10 != -4096)
        {
          if (v15)
            v17 = 0;
          else
            v17 = v10 == -8192;
          if (v17)
            v15 = v9;
          v18 = v8 + v16++;
          v8 = v18 & v7;
          v9 = *(_QWORD *)result + 96 * (v18 & v7);
          v10 = *(_QWORD *)v9;
          if (v6 == *(_QWORD *)v9)
            goto LABEL_7;
        }
        if (v15)
          v9 = v15;
      }
LABEL_7:
      *(_QWORD *)v9 = v6;
      v11 = *(_OWORD *)(a2 + 1);
      *(_OWORD *)(v9 + 24) = *(_OWORD *)(a2 + 3);
      *(_OWORD *)(v9 + 8) = v11;
      v12 = *(_OWORD *)(a2 + 5);
      v13 = *(_OWORD *)(a2 + 7);
      v14 = *(_OWORD *)(a2 + 9);
      *(_QWORD *)(v9 + 88) = a2[11];
      *(_OWORD *)(v9 + 72) = v14;
      *(_OWORD *)(v9 + 56) = v13;
      *(_OWORD *)(v9 + 40) = v12;
      ++*(_DWORD *)(result + 8);
    }
  }
  return result;
}

uint64_t sub_1C558B184(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 8;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_8;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 8 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
LABEL_17:
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -4096)
    {
      if (v9)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v9 = v7;
      v13 = v6 + v10++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 8 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_17;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_8:
  *a3 = v7;
  return result;
}

uint64_t sub_1C558B228(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t *v8;
  uint64_t i;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[9];

  v14[8] = *MEMORY[0x1E0C80C00];
  if (a2 >= 9)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 8)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C558B390(a1, v6, &v6[v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = v14;
  for (i = 8; i != 72; i += 8)
  {
    v10 = *(_QWORD *)(a1 + i);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
      *v8++ = v10;
  }
  if (a2 > 8)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(8 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C558B390(a1, v14, v8);
}

uint64_t sub_1C558B390(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t *v11;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 72);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_9;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[v7];
  }
  do
    *v8++ = -4096;
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    v10 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v11 = 0;
      result = sub_1C558B184((uint64_t)v5, v10, &v11);
      *v11 = *a2;
      *v5 += 2;
    }
    ++a2;
  }
  return result;
}

uint64_t sub_1C558B448(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v19;
  uint64_t v20;

  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(&v20, a2, a1);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(&v19, a2, a1);
  v5 = v19;
  v4 = v20;
  if (v20)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v20 + 16))(&v20, v20);
    v6 = v20;
  }
  else
  {
    v6 = 0;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v5 + 16))(&v20, v5);
  v7 = v20;
  v8 = 0;
  while (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 24))(v6, v7) & 1) == 0)
  {
    v9 = (_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    v10 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)a2 + 400))(a2, *v9);
    v11 = v10;
    v13 = v12;
    v14 = HIDWORD(v10);
    v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 336))(a2);
    v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 24))(v15, v13);
    v17 = (v14 + v16 - 1) / v16 + v11;
    if (v8 <= v17)
      v8 = v17;
    else
      v8 = v8;
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
  }
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return v8;
}

uint64_t sub_1C558B5F8(uint64_t *a1, _QWORD *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  uint64_t *v5;
  uint64_t v6;
  int v7;
  int v9;

  v2 = *a1;
  v3 = *((unsigned int *)a1 + 4);
  if ((_DWORD)v3)
  {
    LODWORD(v4) = ((*a2 >> 4) ^ (*a2 >> 9)) & (v3 - 1);
    v5 = (uint64_t *)(v2 + 16 * v4);
    v6 = *v5;
    if (*a2 == *v5)
      goto LABEL_6;
    v7 = 1;
    while (v6 != -4096)
    {
      v9 = v4 + v7++;
      v4 = v9 & (v3 - 1);
      v6 = *(_QWORD *)(v2 + 16 * v4);
      if (*a2 == v6)
      {
        v5 = (uint64_t *)(v2 + 16 * v4);
        goto LABEL_6;
      }
    }
  }
  v5 = (uint64_t *)(v2 + 16 * v3);
LABEL_6:
  if (v5 == (uint64_t *)(v2 + 16 * v3))
    return 0;
  else
    return *(_QWORD *)(a1[3] + 16 * *((unsigned int *)v5 + 2) + 8);
}

BOOL sub_1C558B684(llvm::GlobalValue *a1)
{
  llvm::GlobalValue *Section;
  uint64_t v2;

  Section = llvm::GlobalValue::getSection(a1);
  if (v2 == 17)
  {
    return *(_QWORD *)Section == 0x6C61636F6C5F6C63
        && *((_QWORD *)Section + 1) == 0x616E7265746E695FLL
        && *((_BYTE *)Section + 16) == 108;
  }
  else
  {
    if (v2 != 10)
      return 0;
    return *(_QWORD *)Section == 0x69727261625F6C63 && *((_WORD *)Section + 4) == 29285;
  }
}

uint64_t sub_1C558B714(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  int v11;
  uint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unsigned int v16;
  unsigned int v17;
  uint64_t v19;
  uint64_t v20;

  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 128))(&v20, a2, a1);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(_QWORD *)a2 + 136))(&v19, a2, a1);
  v5 = v19;
  v4 = v20;
  if (v20)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v20 + 16))(&v20, v20);
    v6 = v20;
  }
  else
  {
    v6 = 0;
  }
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(_QWORD *)v5 + 16))(&v20, v5);
  v7 = v20;
  v8 = 0;
  while (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v6 + 24))(v6, v7) & 1) == 0)
  {
    v9 = *(_QWORD *)(*(uint64_t (**)(uint64_t))(*(_QWORD *)v6 + 32))(v6);
    if (!llvm::Value::getMetadata(v9, "agx.ts.dma", 0xAuLL))
    {
      v10 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)a2 + 400))(a2, v9);
      v11 = v10;
      v13 = v12;
      v14 = HIDWORD(v10);
      v15 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)a2 + 336))(a2);
      v16 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v15 + 24))(v15, v13);
      v17 = (v14 + v16 - 1) / v16 + v11;
      if (v8 <= v17)
        v8 = v17;
      else
        v8 = v8;
    }
    (*(void (**)(uint64_t))(*(_QWORD *)v6 + 40))(v6);
  }
  if (v7)
    (*(void (**)(uint64_t))(*(_QWORD *)v7 + 8))(v7);
  (*(void (**)(uint64_t))(*(_QWORD *)v6 + 8))(v6);
  (*(void (**)(uint64_t))(*(_QWORD *)v5 + 8))(v5);
  if (v4)
    (*(void (**)(uint64_t))(*(_QWORD *)v4 + 8))(v4);
  return v8;
}

void sub_1C558B8E4(char **a1, char *a2, char *__src, char *a4, uint64_t a5)
{
  char *v6;
  char *v9;
  char *v10;
  uint64_t v11;
  char *v12;
  char *v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  char *v17;
  uint64_t v18;
  char *v19;
  int64_t v20;
  char *v21;
  char *v22;
  char *v23;
  char *v24;
  int v25;
  uint64_t v26;
  char *v27;
  char *v28;
  uint64_t v29;
  char *v30;
  int v31;
  uint64_t v32;
  char *v33;

  if (a5 < 1)
    return;
  v6 = __src;
  v10 = *a1;
  v9 = a1[1];
  v11 = a2 - *a1;
  v12 = &(*a1)[v11 & 0xFFFFFFFFFFFFFFFCLL];
  v13 = a1[2];
  if (a5 > (v13 - v9) >> 2)
  {
    v14 = a5 + ((v9 - v10) >> 2);
    if (v14 >> 62)
      abort();
    v15 = v13 - v10;
    if (v15 >> 1 > v14)
      v14 = v15 >> 1;
    if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL)
      v16 = 0x3FFFFFFFFFFFFFFFLL;
    else
      v16 = v14;
    if (v16)
    {
      if (v16 >> 62)
        sub_1C4764EE4();
      v17 = (char *)operator new(4 * v16);
    }
    else
    {
      v17 = 0;
    }
    v26 = v11 >> 2;
    v27 = &v17[4 * (v11 >> 2)];
    v28 = &v27[4 * a5];
    v29 = 4 * a5;
    v30 = v27;
    do
    {
      v31 = *(_DWORD *)v6;
      v6 += 4;
      *(_DWORD *)v30 = v31;
      v30 += 4;
      v29 -= 4;
    }
    while (v29);
    if (v10 != a2)
    {
      v32 = 4 * v26;
      do
      {
        *(_DWORD *)&v17[v32 - 4] = *(_DWORD *)&v10[v32 - 4];
        v32 -= 4;
      }
      while (v32);
      v27 = v17;
    }
    v33 = &v17[4 * v16];
    if (v9 != v12)
      memmove(v28, v12, v9 - v12);
    *a1 = v27;
    a1[1] = &v28[v9 - v12];
    a1[2] = v33;
    if (v10)
      operator delete(v10);
    return;
  }
  v18 = (v9 - v12) >> 2;
  if (v18 >= a5)
  {
    v19 = &__src[4 * a5];
    v21 = a1[1];
LABEL_18:
    v22 = &v12[4 * a5];
    v23 = &v21[-4 * a5];
    v24 = v21;
    if (v23 < v9)
    {
      v24 = v21;
      do
      {
        v25 = *(_DWORD *)v23;
        v23 += 4;
        *(_DWORD *)v24 = v25;
        v24 += 4;
      }
      while (v23 < v9);
    }
    a1[1] = v24;
    if (v21 != v22)
      memmove(&v21[-4 * ((v21 - v22) >> 2)], v12, v21 - v22);
    if (v19 != v6)
      memmove(v12, v6, v19 - v6);
    return;
  }
  v19 = &__src[4 * v18];
  v20 = a4 - v19;
  if (a4 != v19)
    memmove(a1[1], &__src[4 * v18], a4 - v19);
  v21 = &v9[v20];
  a1[1] = &v9[v20];
  if (v9 - v12 >= 1)
    goto LABEL_18;
}

uint64_t sub_1C558BAFC()
{
  int v1;
  char v2;
  char *v3;
  __n128 v4;

  v4.n128_u64[0] = (unint64_t)"Print performance statistic diagnostics ignoring all instructions outside of loops";
  v4.n128_u64[1] = 82;
  v2 = 0;
  v3 = &v2;
  v1 = 1;
  sub_1C627A034(&v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &PrintPerfDiagsForLoopsOnly, &dword_1C475E000);
}

uint64_t sub_1C558BB64(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeMachineDominatorTreePass(a1);
  llvm::initializeMachineLoopInfoPass(a1);
  llvm::initializeLiveIntervalsPass(a1);
  llvm::initializeSlotIndexesPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "GPU Sample Sink";
  *(_QWORD *)(v2 + 8) = 15;
  *(_QWORD *)(v2 + 16) = "gpu-sample-sink";
  *(_QWORD *)(v2 + 24) = 15;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F3000;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C558BD9C;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t llvm::createGPUSampleSinkPass(uint64_t a1, char a2, const void *a3, uint64_t a4)
{
  char v7;
  uint64_t v8;

  if (byte_1ED8064C0)
    v7 = 0;
  else
    v7 = a2;
  v8 = operator new();
  return sub_1C558BC70(v8, a1, v7, a3, a4);
}

uint64_t sub_1C558BC70(uint64_t a1, uint64_t a2, char a3, const void *a4, uint64_t a5)
{
  uint64_t v10;
  unsigned int v11;

  v10 = sub_1C4776848(a1, (uint64_t)&unk_1EF8F3000);
  v11 = 0;
  *(_QWORD *)v10 = &off_1E816F858;
  *(_QWORD *)(v10 + 304) = v10 + 304;
  *(_QWORD *)(v10 + 312) = v10 + 304;
  *(_QWORD *)(v10 + 320) = 0;
  *(_QWORD *)(v10 + 328) = v10 + 304;
  *(_QWORD *)(v10 + 336) = a2;
  *(_QWORD *)(v10 + 344) = 0;
  *(_DWORD *)(v10 + 352) = 0;
  *(_QWORD *)(v10 + 360) = 0;
  *(_QWORD *)(v10 + 368) = 0;
  *(_QWORD *)(v10 + 376) = 0;
  *(_QWORD *)(v10 + 384) = v10 + 408;
  *(_QWORD *)(v10 + 392) = 0;
  *(_QWORD *)(v10 + 400) = 4;
  *(_QWORD *)(v10 + 416) = v10 + 432;
  *(_QWORD *)(v10 + 424) = 0x600000000;
  *(_DWORD *)(v10 + 480) = 0;
  *(_QWORD *)(v10 + 488) = v10 + 504;
  *(_QWORD *)(v10 + 496) = 0x600000000;
  *(_DWORD *)(v10 + 552) = 0;
  *(_QWORD *)(v10 + 568) = 0;
  *(_QWORD *)(v10 + 560) = 0;
  *(_QWORD *)(v10 + 576) = 0;
  *(_BYTE *)(v10 + 584) = a3;
  *(_QWORD *)(v10 + 592) = v10 + 608;
  *(_QWORD *)(v10 + 600) = 0x400000000;
  if ((unint64_t)(4 * a5) >= 0x11)
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 592, v10 + 608, (4 * a5) >> 2, 4);
    v11 = *(_DWORD *)(a1 + 600);
    if (!a5)
      goto LABEL_4;
    goto LABEL_3;
  }
  if (a5)
  {
LABEL_3:
    memcpy((void *)(*(_QWORD *)(a1 + 592) + 4 * v11), a4, 4 * a5);
    v11 = *(_DWORD *)(a1 + 600);
  }
LABEL_4:
  *(_DWORD *)(a1 + 600) = v11 + ((unint64_t)(4 * a5) >> 2);
  *(_OWORD *)(a1 + 624) = 0u;
  *(_DWORD *)(a1 + 640) = 0;
  return a1;
}

uint64_t sub_1C558BD9C()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C558BC70(v0, 0, 1, 0, 0);
}

void sub_1C558BDD4(uint64_t *a1)
{
  uint64_t *v2;
  uint64_t *v3;
  uint64_t v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t *v7;
  uint64_t *v8;
  uint64_t *v9;

  *a1 = (uint64_t)&off_1E816F858;
  MEMORY[0x1CAA32FB4](a1[78], 4);
  v2 = (uint64_t *)a1[74];
  if (v2 != a1 + 76)
    free(v2);
  sub_1C61D92E0(a1 + 43);
  if (a1[40])
  {
    v4 = a1[38];
    v3 = (uint64_t *)a1[39];
    v5 = *v3;
    *(_QWORD *)(v5 + 8) = *(_QWORD *)(v4 + 8);
    **(_QWORD **)(v4 + 8) = v5;
    a1[40] = 0;
    if (v3 != a1 + 38)
    {
      do
      {
        v6 = (uint64_t *)v3[1];
        operator delete(v3);
        v3 = v6;
      }
      while (v6 != a1 + 38);
    }
  }
  *a1 = (uint64_t)&unk_1E8144BE8;
  v7 = (uint64_t *)a1[22];
  if (v7 != a1 + 24)
    free(v7);
  v8 = (uint64_t *)a1[13];
  if (v8 != a1 + 15)
    free(v8);
  v9 = (uint64_t *)a1[4];
  if (v9 != a1 + 6)
    free(v9);
  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1C558BECC(uint64_t *a1)
{
  sub_1C558BDD4(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C558BEF0()
{
  return "GPU sample sinking pass";
}

void sub_1C558BF00(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *a2)
{
  llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::MachineDominatorTree::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::MachineLoopInfo::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::LiveIntervals::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::SlotIndexes::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::LiveIntervals::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::SlotIndexes::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::LiveVariables::ID);
  llvm::AnalysisUsage::setPreservesCFG(a2);
}

uint64_t sub_1C558BFBC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v4;
  void **v5;
  void *v6;
  void **v7;
  void *v8;
  void **v9;
  void *v10;
  uint64_t v11;
  uint64_t v12;
  __n128 v13;
  int *v14;
  uint64_t v15;
  unsigned int v16;
  unint64_t v17;
  int v18;
  uint64_t v19;
  int v20;
  unsigned int v21;
  unsigned int v22;
  unsigned int v23;
  unsigned int v24;
  unint64_t v25;
  uint64_t v26;
  _QWORD *v27;
  _DWORD *v28;
  char *v29;
  _QWORD *i;
  unsigned int v31;
  uint64_t v32;
  _DWORD *v33;
  char *v34;
  int v35;
  int v36;
  unint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  unint64_t v41;
  unsigned int *v42;
  unsigned int v43;
  unsigned int *v44;
  _QWORD *j;
  unsigned int v46;
  _DWORD *v47;
  uint64_t v48;
  _DWORD *v49;
  int v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  int v54;
  BOOL v55;
  int v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  unint64_t v63;
  unint64_t v64;
  uint64_t **v65;
  uint64_t **v66;
  uint64_t *v67;
  uint64_t v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  char *v73;
  uint64_t v74;
  unsigned int v75;
  unsigned int v76;
  _QWORD *v77;
  int v78;
  uint64_t *v79;
  uint64_t v80;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  unint64_t v85;
  unint64_t v86;
  unint64_t v87;
  uint64_t v88;
  unsigned int *v89;
  unsigned int v90;
  unsigned int *v91;
  _QWORD *k;
  unsigned int v93;
  _DWORD *v94;
  uint64_t v95;
  unsigned int v96;
  _DWORD *v97;
  char *v98;
  uint64_t v99;
  int v100;
  _DWORD *v101;
  int v102;
  BOOL v103;
  int v104;
  unsigned int v105;
  unsigned int *v106;
  unsigned int v107;
  unsigned int *v108;
  _QWORD *m;
  unsigned int v110;
  _DWORD *v111;
  uint64_t v112;
  unsigned int v113;
  _DWORD *v114;
  char *v115;
  uint64_t v116;
  int v117;
  _DWORD *v118;
  int v119;
  BOOL v120;
  int v121;
  unsigned int v122;
  uint64_t v123;
  unint64_t v124;
  char *v125;
  uint64_t v126;
  signed int v127;
  int v128;
  signed int v129;
  uint64_t v130;
  int v131;
  int v132;
  uint64_t v133;
  unint64_t v134;
  char *v135;
  uint64_t v136;
  _QWORD *v137;
  _QWORD *v138;
  char v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  unsigned int v145;
  uint64_t v146;
  _QWORD *v147;
  int v148;
  int v149;
  _QWORD *v150;
  int v151;
  uint64_t v152;
  _QWORD *v153;
  uint64_t v154;
  int v155;
  _QWORD *v156;
  int v157;
  _QWORD *v158;
  int v159;
  uint64_t v160;
  char *v161;
  int v162;
  int v163;
  _QWORD *v164;
  int v165;
  int v166;
  int v167;
  _QWORD *v168;
  int v169;
  unint64_t *v170;
  unint64_t *v171;
  int v172;
  unint64_t v174;
  int v175;
  unint64_t v176;
  uint64_t v177;
  uint64_t v178;
  unsigned __int16 v179;
  __int16 v180;
  uint64_t v181;
  __int16 v182;
  int v183;
  uint64_t v184;
  uint64_t v186;
  uint64_t v187;
  _DWORD *v189;
  uint64_t v190;
  uint64_t v191;
  uint64_t *v192;
  uint64_t v193;
  uint64_t v194;
  int v195;
  uint64_t v197;
  uint64_t v198;
  __int16 v199;
  unint64_t v200;
  uint64_t v201;
  unint64_t v202;
  unsigned int v203;
  BOOL v204;
  int v205;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t *v211;
  uint64_t v212;
  int v213;
  int v214;
  uint64_t v215;
  __int16 v216;
  unint64_t v217;
  unint64_t *v218;
  unint64_t v219;
  unsigned int v220;
  int v221;
  uint64_t v223;
  uint64_t *v224;
  uint64_t v225;
  int v226;
  int v227;
  _QWORD *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  int v232;
  uint64_t v233;
  unsigned int v234;
  unsigned int *v235;
  unsigned int v236;
  BOOL v237;
  BOOL v238;
  uint64_t v239;
  unsigned int *v240;
  int RegisterDefOperandIdx;
  unint64_t v242;
  _BYTE *v243;
  uint64_t v244;
  int v245;
  unsigned int v246;
  unsigned int v247;
  unsigned int v248;
  _BYTE *v249;
  unint64_t v250;
  unint64_t v251;
  uint64_t v252;
  BOOL v253;
  unint64_t v254;
  uint64_t v255;
  unsigned int v256;
  unsigned int v257;
  int v258;
  _BYTE *v259;
  unint64_t v260;
  unint64_t v261;
  uint64_t v262;
  BOOL v263;
  unint64_t v264;
  _BYTE *v265;
  _BYTE *v266;
  uint64_t v268;
  uint64_t v269;
  uint64_t v270;
  int v271;
  int v273;
  uint64_t v274;
  uint64_t v275;
  unsigned int v276;
  uint64_t v277;
  unsigned int v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t v281;
  _QWORD *v282;
  int v283;
  _DWORD *v284;
  _DWORD *v285;
  _DWORD *v286;
  uint64_t v287;
  _QWORD *ii;
  unsigned int v289;
  uint64_t v290;
  _DWORD *v291;
  int v292;
  char *v293;
  _DWORD *v294;
  int v295;
  int v296;
  uint64_t v297;
  uint64_t *v298;
  _QWORD *v299;
  int *v300;
  int v301;
  int v302;
  BOOL v303;
  unint64_t v305;
  uint64_t v306;
  uint64_t v307;
  unsigned int *v308;
  unsigned int v309;
  unsigned int *v310;
  _QWORD *n;
  unsigned int v312;
  _DWORD *v313;
  uint64_t v314;
  unsigned int v315;
  _DWORD *v316;
  char *v317;
  uint64_t v318;
  int v319;
  _DWORD *v320;
  int v321;
  BOOL v322;
  int v323;
  unsigned int v324;
  uint64_t v325;
  uint64_t v326;
  uint64_t v327;
  int v328;
  int v330;
  uint64_t v331;
  uint64_t *v332;
  uint64_t v333;
  uint64_t v334;
  _QWORD *v335;
  _DWORD *v336;
  int v337;
  _DWORD *v338;
  uint64_t v339;
  BOOL v340;
  _QWORD *jj;
  unsigned int v342;
  uint64_t v343;
  _DWORD *v344;
  _DWORD *v345;
  int v346;
  int v347;
  char *v348;
  int v349;
  int v350;
  int v351;
  int v352;
  int v353;
  uint64_t v354;
  _QWORD *kk;
  unsigned int v356;
  uint64_t v357;
  _DWORD *v358;
  _DWORD *v359;
  char *v360;
  int v361;
  int *v362;
  int v363;
  _DWORD *v364;
  int v365;
  int v366;
  int v367;
  int v368;
  uint64_t v369;
  unint64_t *v370;
  unint64_t *v372;
  int v373;
  int32x2_t *v375;
  int32x2_t v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t *v379;
  uint64_t v380;
  int v381;
  int v382;
  unint64_t v383;
  uint64_t v384;
  uint64_t v385;
  int *v386;
  int v387;
  int v388;
  BOOL v389;
  BOOL v390;
  uint64_t v391;
  uint64_t v392;
  uint64_t v393;
  int v394;
  int v395;
  int v396;
  int *v397;
  int v398;
  unsigned int v399;
  int v400;
  int *v401;
  int v402;
  BOOL v403;
  unsigned int v404;
  int v405;
  int v406;
  int v407;
  uint64_t v408;
  llvm::LiveInterval *v409;
  uint64_t v410;
  uint64_t v411;
  uint64_t v412;
  int v413;
  unsigned int v414;
  int v415;
  int *v416;
  int v417;
  BOOL v418;
  unsigned int v419;
  uint64_t v420;
  uint64_t v421;
  uint64_t v422;
  uint64_t v423;
  int v424;
  int v426;
  uint64_t v427;
  int v428;
  unsigned int v429;
  int v430;
  int v431;
  BOOL v432;
  unsigned int v433;
  uint64_t v434;
  uint64_t v435;
  unsigned int *v436;
  int v437;
  unint64_t v438;
  unint64_t *v439;
  uint64_t v440;
  uint64_t v441;
  uint64_t v442;
  _QWORD *v443;
  uint64_t v444;
  uint64_t v445;
  uint64_t v446;
  uint64_t v447;
  uint64_t *v448;
  uint64_t v449;
  uint64_t v450;
  uint64_t *v451;
  int v452;
  uint64_t v453;
  uint64_t v454;
  unsigned int *v455;
  uint64_t v456;
  unsigned int *v457;
  unsigned int *v458;
  unsigned int *v459;
  unsigned int v460;
  int32x2_t *v461;
  unsigned int v462;
  int v463;
  int v464;
  _DWORD *v465;
  uint64_t v466;
  unint64_t v467;
  unint64_t v468;
  _DWORD *v469;
  uint64_t v470;
  uint64_t v471;
  _DWORD *v472;
  uint64_t v473;
  _QWORD *v475;
  unint64_t v476;
  int32x2_t *v477;
  uint64_t v478;
  unint64_t v479;
  int *v480;
  uint64_t v481;
  uint64_t *v482;
  uint64_t v483;
  unint64_t v484;
  uint64_t v485;
  uint64_t v486;
  unint64_t v487;
  uint64_t v488;
  int v489;
  uint64_t v490;
  uint64_t v491;
  int v492;
  llvm::MachineRegisterInfo *v493[2];
  uint64_t v494;
  llvm::RegisterClassInfo *v495;
  void *v496;
  uint64_t v497;
  _BYTE v498[16];
  void *v499;
  uint64_t v500;
  _BYTE v501[48];
  void *v502;
  uint64_t v503;
  _BYTE v504[16];
  _QWORD **v505;
  _QWORD *v506;
  uint64_t v507;
  void *__src;
  uint64_t v509;
  uint64_t v510;
  unint64_t v511;
  unint64_t v512;
  int v513;
  char *v514;
  char *v515;
  _BYTE v516[48];
  char *v517;
  uint64_t v518;
  uint64_t v519;
  unint64_t v520;
  uint64_t v521;
  uint64_t v522;

  v522 = *MEMORY[0x1E0C80C00];
  if (byte_1ED806400)
    return 0;
  v4 = a1;
  v5 = **(void ****)(a1 + 8);
  do
  {
    v6 = *v5;
    v5 += 2;
  }
  while (v6 != &llvm::MachineDominatorTree::ID);
  *(_QWORD *)(a1 + 248) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v5 - 1) + 96))(*(v5 - 1), &llvm::MachineDominatorTree::ID);
  v7 = **(void ****)(v4 + 8);
  do
  {
    v8 = *v7;
    v7 += 2;
  }
  while (v8 != &llvm::MachineLoopInfo::ID);
  *(_QWORD *)(v4 + 256) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v7 - 1) + 96))(*(v7 - 1), &llvm::MachineLoopInfo::ID);
  v9 = **(void ****)(v4 + 8);
  do
  {
    v10 = *v9;
    v9 += 2;
  }
  while (v10 != &llvm::LiveIntervals::ID);
  *(_QWORD *)(v4 + 280) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v9 - 1) + 96))(*(v9 - 1), &llvm::LiveIntervals::ID);
  *(_QWORD *)(v4 + 296) = *(_QWORD *)(a2 + 40);
  *(_QWORD *)(v4 + 288) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 176))(*(_QWORD *)(a2 + 16));
  v11 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(a2 + 16) + 104))(*(_QWORD *)(a2 + 16));
  *(_QWORD *)(v4 + 264) = v11;
  *(_QWORD *)(v4 + 272) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v11 + 1264))(v11);
  v478 = a2;
  llvm::RegisterClassInfo::runOnMachineFunction((llvm::RegisterClassInfo *)(v4 + 344), (const llvm::MachineFunction *)a2);
  v12 = *(_QWORD *)(v4 + 280);
  v13 = *(__n128 *)(v4 + 288);
  *(__n128 *)v493 = v13;
  v494 = v12;
  v495 = (llvm::RegisterClassInfo *)(v4 + 344);
  v496 = v498;
  v497 = 0x400000000;
  v499 = v501;
  v500 = 0x400000000;
  v502 = v504;
  v503 = 0x400000000;
  v506 = 0;
  v507 = 0;
  v505 = &v506;
  v481 = v4;
  if (*(_BYTE *)(v4 + 584))
  {
    v14 = *(int **)(v4 + 592);
    v15 = *(unsigned int *)(v4 + 600);
    v16 = (*(uint64_t (**)(unint64_t, __n128))(*(_QWORD *)v13.n128_u64[0] + 296))(v13.n128_u64[0], v13);
    sub_1C49F6D78((uint64_t)&v496, v16);
    if ((_DWORD)v497)
    {
      v17 = 0;
      do
      {
        v18 = *(_DWORD *)(*((_QWORD *)v495 + 27) + 4 * v17);
        if (!v18)
        {
          v18 = llvm::RegisterClassInfo::computePSetLimit(v495, v17);
          *(_DWORD *)(*((_QWORD *)v495 + 27) + 4 * v17) = v18;
        }
        *((_DWORD *)v496 + v17++) = v18;
      }
      while (v17 < v497);
    }
    if ((_DWORD)v15)
    {
      v19 = 4 * v15;
      do
      {
        LODWORD(__src) = 0;
        v20 = *v14++;
        LODWORD(__src) = v20;
        sub_1C4854E58((uint64_t)&v502, (unsigned int *)&__src);
        v19 -= 4;
      }
      while (v19);
    }
    v21 = (*(uint64_t (**)(llvm::MachineRegisterInfo *))(*(_QWORD *)v493[0] + 296))(v493[0]);
    v22 = v21;
    v23 = v500;
    if ((_DWORD)v500 != v21)
    {
      if (v500 <= v21)
      {
        v24 = v21;
        if (HIDWORD(v500) < v21)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v499, (uint64_t)v501, v21, 12);
          v23 = v500;
        }
        if (v23 != v22)
          bzero((char *)v499 + 12 * v23, 12 * ((-12 * v23 + 12 * (unint64_t)v24 - 12) / 0xC) + 12);
      }
      LODWORD(v500) = v22;
    }
    if (v22)
    {
      v25 = 0;
      v27 = v506;
      v26 = v507;
      v28 = v502;
      v29 = (char *)v499;
      do
      {
        if (v26)
        {
          for (i = v27; i; i = (_QWORD *)*i)
          {
            v31 = *((_DWORD *)i + 7);
            if (v31 <= v25)
            {
              if (v31 >= v25)
                goto LABEL_41;
              ++i;
            }
          }
        }
        else if ((_DWORD)v503)
        {
          v32 = 4 * v503;
          v33 = v28;
          while (*v33 != (_DWORD)v25)
          {
            ++v33;
            v32 -= 4;
            if (!v32)
              goto LABEL_40;
          }
          if (v32)
            goto LABEL_41;
        }
LABEL_40:
        v34 = &v29[12 * v25];
        *(_QWORD *)v34 = 0;
        *((_DWORD *)v34 + 2) = 0;
        v22 = v500;
LABEL_41:
        ++v25;
      }
      while (v25 < v22);
    }
    v35 = *((_DWORD *)v493[1] + 8);
    if (v35)
    {
      v36 = 0;
      while (1)
      {
        v37 = v36 & 0x7FFFFFFF;
        v38 = *(_QWORD *)(*((_QWORD *)v493[1] + 3) + 16 * v37 + 8);
        if (v38)
        {
          while ((*(_DWORD *)v38 & 0x80000000) != 0)
          {
            v38 = *(_QWORD *)(v38 + 24);
            if (!v38)
              goto LABEL_68;
          }
          v39 = v494;
          if (v37 >= *(unsigned int *)(v494 + 416) || (v40 = *(_QWORD *)(*(_QWORD *)(v494 + 408) + 8 * v37)) == 0)
          {
            v40 = sub_1C4851220(v494, v36 | 0x80000000);
            v51 = *(_QWORD *)(v494 + 304);
            v52 = *(_QWORD *)(v494 + 248);
            *(_QWORD *)v51 = v52;
            *(_QWORD *)(v51 + 8) = *(_QWORD *)(v52 + 40);
            *(_OWORD *)(v51 + 16) = *(_OWORD *)(v39 + 288);
            *(_QWORD *)(v51 + 32) = v39 + 312;
            llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v51);
            *(_DWORD *)(v51 + 184) = 0;
            v53 = *(_QWORD *)(v39 + 256);
            v55 = *(_BYTE *)(v53 + 16) == 0;
            v54 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v53 + 24) + 16 * (*(_DWORD *)(v40 + 112) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                     + 34);
            v55 = v55 || v54 == 0;
            v56 = !v55;
            llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v39 + 304), (llvm::LiveInterval *)v40, v56);
            llvm::LiveIntervals::computeDeadValues(v39, v40, 0);
          }
          if (*(float *)(v40 + 116) == INFINITY)
          {
            v41 = *(_QWORD *)(*((_QWORD *)v493[1] + 3) + 16 * v37) & 0xFFFFFFFFFFFFFFF8;
            v42 = (unsigned int *)(*(uint64_t (**)(llvm::MachineRegisterInfo *, unint64_t))(*(_QWORD *)v493[0] + 320))(v493[0], v41);
            v43 = *v42;
            if (*v42 != -1)
              break;
          }
        }
LABEL_68:
        if (++v36 == v35)
          goto LABEL_77;
      }
      v44 = v42;
      while (1)
      {
        if (v507)
        {
          for (j = v506; j; j = (_QWORD *)*j)
          {
            v46 = *((_DWORD *)j + 7);
            if (v43 >= v46)
            {
              if (v46 >= v43)
                goto LABEL_67;
              ++j;
            }
          }
        }
        else if ((_DWORD)v503)
        {
          v47 = v502;
          v48 = 4 * v503;
          while (*v47 != v43)
          {
            ++v47;
            v48 -= 4;
            if (!v48)
              goto LABEL_66;
          }
          if (v48)
            goto LABEL_67;
        }
LABEL_66:
        v49 = (_DWORD *)(*(uint64_t (**)(llvm::MachineRegisterInfo *, unint64_t))(*(_QWORD *)v493[0]
                                                                                                 + 280))(v493[0], v41);
        *((_DWORD *)v496 + (int)*v44) -= *v49;
LABEL_67:
        v50 = v44[1];
        ++v44;
        v43 = v50;
        if (v50 == -1)
          goto LABEL_68;
      }
    }
LABEL_77:
    LODWORD(v509) = 0;
    __src = 0;
    sub_1C558E9AC(&v517, v497, (uint64_t *)&__src);
    v57 = *(_QWORD *)(v478 + 328);
    if (v57 != v478 + 320)
    {
      while (1)
      {
        v58 = v57 + 48;
        v483 = v57;
        v59 = *(_QWORD *)(v57 + 56);
        v488 = v57 + 48;
        if (v59 != v57 + 48)
          break;
LABEL_198:
        v57 = *(_QWORD *)(v483 + 8);
        if (v57 == v478 + 320)
          goto LABEL_199;
      }
      while (1)
      {
        if (**(unsigned __int16 **)(v59 + 16) - 13 >= 2)
        {
          LODWORD(v509) = 0;
          __src = 0;
          sub_1C558E9AC(&v514, v497, (uint64_t *)&__src);
          v60 = *(unsigned int *)(v59 + 40);
          if ((_DWORD)v60)
          {
            v61 = *(_QWORD *)(v59 + 32);
            v62 = v61 + 32 * v60;
            do
            {
              if (*(_BYTE *)v61 == 12)
              {
                v69 = *((_DWORD *)v493[0] + 11);
                __src = &v510;
                v509 = 0x600000000;
                sub_1C4765AA4((char *)&__src, (v69 + 63) >> 6, 0);
                v513 = v69;
                v70 = *((unsigned int *)v493[0] + 11);
                if ((_DWORD)v70)
                {
                  v71 = 0;
                  v72 = *(_QWORD *)(v61 + 16);
                  do
                  {
                    if ((llvm::MachineRegisterInfo::isReservedRegUnit(v493[1], v71) & 1) == 0)
                    {
                      v73 = v493[0] ? (char *)v493[0] + 8 : 0;
                      v74 = *((_QWORD *)v73 + 5);
                      v75 = *(unsigned __int16 *)(v74 + 4 * v71);
                      if (*(_WORD *)(v74 + 4 * v71))
                      {
                        v76 = *(unsigned __int16 *)(v74 + 4 * v71 + 2);
                        v77 = __src;
                        do
                        {
                          v78 = *(_DWORD *)(v72 + 4 * (v75 >> 5)) >> v75;
                          v75 = v76;
                          if ((v78 & 1) != 0)
                            v77[v71 >> 6] |= 1 << v71;
                          v76 = 0;
                        }
                        while (v75);
                      }
                    }
                    ++v71;
                  }
                  while (v71 != v70);
                  v69 = v513;
                }
                v79 = (uint64_t *)__src;
                if (v69)
                {
                  v80 = 0;
                  v81 = (v69 - 1) & 0xFFFFFFC0;
                  v82 = (uint64_t *)__src;
                  while (1)
                  {
                    v84 = *v82++;
                    v83 = v84;
                    v85 = v81 + v80 ? -1 : 0xFFFFFFFFFFFFFFFFLL >> -(char)v69;
                    v86 = v85 & v83;
                    if (v86)
                      break;
                    v80 -= 64;
                    if (v81 + v80 == -64)
                      goto LABEL_145;
                  }
                  v87 = __clz(__rbit64(v86));
                  if ((_DWORD)v87 + 1 != (_DWORD)v80)
                  {
                    v88 = v87 - v80;
                    while (1)
                    {
                      v89 = (unsigned int *)(*(uint64_t (**)(llvm::MachineRegisterInfo *, uint64_t))(*(_QWORD *)v493[0] + 328))(v493[0], v88);
                      v90 = *v89;
                      if (*v89 != -1)
                        break;
LABEL_143:
                      v88 = sub_1C476BA0C(&__src, (int)v88 + 1, v513, 1u);
                      if ((_DWORD)v88 == -1)
                      {
                        v79 = (uint64_t *)__src;
                        goto LABEL_145;
                      }
                    }
                    v91 = v89;
                    while (2)
                    {
                      if (v507)
                      {
                        for (k = v506; k; k = (_QWORD *)*k)
                        {
                          v93 = *((_DWORD *)k + 7);
                          if (v90 >= v93)
                          {
                            if (v93 >= v90)
                              goto LABEL_142;
                            ++k;
                          }
                        }
                        goto LABEL_136;
                      }
                      if (!(_DWORD)v503)
                        goto LABEL_136;
                      v94 = v502;
                      v95 = 4 * v503;
                      while (*v94 != v90)
                      {
                        ++v94;
                        v95 -= 4;
                        if (!v95)
                          goto LABEL_136;
                      }
                      if (!v95)
                      {
LABEL_136:
                        v96 = v90;
                        v97 = v514;
                        v98 = &v514[12 * v90];
                        v99 = 3 * (int)v90;
                        v100 = (*(uint64_t (**)(llvm::MachineRegisterInfo *, uint64_t))(*(_QWORD *)v493[0]
                                                                                               + 288))(v493[0], v88);
                        ++v97[v99];
                        v102 = *((_DWORD *)v98 + 1);
                        v101 = v98 + 4;
                        v103 = v102 == v100;
                        if (v102 < v100)
                        {
                          v104 = 0;
                          *v101 = v100;
                          goto LABEL_141;
                        }
                        if (v103)
                        {
                          v104 = v97[3 * v96 + 2];
LABEL_141:
                          v97[3 * v96 + 2] = v104 + 1;
                        }
                      }
LABEL_142:
                      v105 = v91[1];
                      ++v91;
                      v90 = v105;
                      if (v105 == -1)
                        goto LABEL_143;
                      continue;
                    }
                  }
                }
LABEL_145:
                if (v79 != &v510)
                  free(v79);
              }
              else
              {
                if (*(_BYTE *)v61)
                  goto LABEL_172;
                v63 = *(unsigned int *)(v61 + 4);
                if (!(_DWORD)v63)
                  goto LABEL_172;
                if (v63 >> 30)
                {
                  if ((v63 & 0x80000000) == 0)
                    goto LABEL_172;
                  v67 = (uint64_t *)(*(_QWORD *)(*((_QWORD *)v493[1] + 3) + 16 * (v63 & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8);
                }
                else
                {
                  if (!*(_BYTE *)(*(_QWORD *)(*(_QWORD *)((*(uint64_t (**)(_QWORD))(**(_QWORD **)(*(_QWORD *)v493[1] + 16)
                                                                                             + 176))(*(_QWORD *)(*(_QWORD *)v493[1] + 16))
                                                         + 216)
                                             + 16)
                                 + v63))
                    goto LABEL_172;
                  v64 = v63 >> 3;
                  if (((*(_QWORD *)(*((_QWORD *)v493[1] + 44) + ((v63 >> 3) & 0x1FFFFFF8)) >> v63) & 1) != 0)
                    goto LABEL_172;
                  v65 = (uint64_t **)*((_QWORD *)v493[0] + 30);
                  v66 = (uint64_t **)*((_QWORD *)v493[0] + 31);
                  if (v65 == v66)
                  {
                    v67 = 0;
                  }
                  else
                  {
                    v67 = 0;
                    do
                    {
                      v68 = **v65;
                      if (v64 < *(unsigned __int16 *)(v68 + 22)
                        && ((1 << (v63 & 7)) & *(unsigned __int8 *)(*(_QWORD *)(v68 + 8) + v64)) != 0
                        && (!v67
                         || *v65 != v67
                         && ((*(_DWORD *)(v67[1] + ((*(unsigned __int16 *)(v68 + 24) >> 3) & 0x1FFCLL)) >> *(_WORD *)(v68 + 24)) & 1) != 0))
                      {
                        v67 = *v65;
                      }
                      ++v65;
                    }
                    while (v65 != v66);
                  }
                }
                if (*(_BYTE *)(*v67 + 31))
                {
                  v106 = (unsigned int *)(*(uint64_t (**)(llvm::MachineRegisterInfo *, uint64_t *))(*(_QWORD *)v493[0] + 320))(v493[0], v67);
                  v107 = *v106;
                  if (*v106 != -1)
                  {
                    v108 = v106;
                    do
                    {
                      if (v507)
                      {
                        for (m = v506; m; m = (_QWORD *)*m)
                        {
                          v110 = *((_DWORD *)m + 7);
                          if (v107 >= v110)
                          {
                            if (v110 >= v107)
                              goto LABEL_171;
                            ++m;
                          }
                        }
                      }
                      else if ((_DWORD)v503)
                      {
                        v111 = v502;
                        v112 = 4 * v503;
                        while (*v111 != v107)
                        {
                          ++v111;
                          v112 -= 4;
                          if (!v112)
                            goto LABEL_165;
                        }
                        if (v112)
                          goto LABEL_171;
                      }
LABEL_165:
                      v113 = v107;
                      v114 = v514;
                      v115 = &v514[12 * v107];
                      v116 = 3 * (int)v107;
                      v117 = *(_DWORD *)(*(uint64_t (**)(llvm::MachineRegisterInfo *, uint64_t *))(*(_QWORD *)v493[0] + 280))(v493[0], v67);
                      ++v114[v116];
                      v119 = *((_DWORD *)v115 + 1);
                      v118 = v115 + 4;
                      v120 = v119 == v117;
                      if (v119 >= v117)
                      {
                        if (!v120)
                          goto LABEL_171;
                        v121 = v114[3 * v113 + 2];
                      }
                      else
                      {
                        v121 = 0;
                        *v118 = v117;
                      }
                      v114[3 * v113 + 2] = v121 + 1;
LABEL_171:
                      v122 = v108[1];
                      ++v108;
                      v107 = v122;
                    }
                    while (v122 != -1);
                  }
                }
              }
LABEL_172:
              v61 += 32;
            }
            while (v61 != v62);
          }
          if ((_DWORD)v518)
          {
            v123 = 0;
            v124 = 0;
            do
            {
              v125 = &v517[v123];
              LODWORD(v126) = *(_DWORD *)&v517[v123];
              v127 = *(_DWORD *)&v517[v123 + 4];
              v128 = *(_DWORD *)&v514[v123];
              v129 = *(_DWORD *)&v514[v123 + 4];
              if ((int)v126 <= v128)
                v126 = v128;
              else
                v126 = v126;
              if (v127 <= v129)
                v130 = v129;
              else
                v130 = v127;
              v131 = *((_DWORD *)v125 + 2) & ~(*((int *)v125 + 2) >> 31);
              if (v127 < v129)
                v131 = 0;
              v132 = *(_DWORD *)&v514[v123 + 8];
              if (v131 > v132)
                v132 = v131;
              if (v129 < v127)
                v132 = v131;
              *(_QWORD *)v125 = v126 | (v130 << 32);
              *((_DWORD *)v125 + 2) = v132;
              ++v124;
              v123 += 12;
            }
            while (v124 < v518);
          }
          if (v514 != v516)
            free(v514);
          v58 = v488;
          if (!v59)
            goto LABEL_196;
        }
        if ((*(_BYTE *)v59 & 4) == 0)
        {
LABEL_196:
          while ((*(_WORD *)(v59 + 44) & 8) != 0)
            v59 = *(_QWORD *)(v59 + 8);
        }
        v59 = *(_QWORD *)(v59 + 8);
        if (v59 == v58)
          goto LABEL_198;
      }
    }
LABEL_199:
    if ((_DWORD)v500)
    {
      v133 = 0;
      v134 = 0;
      do
      {
        v135 = (char *)v499 + v133;
        v136 = *(_QWORD *)&v517[v133];
        *((_DWORD *)v135 + 2) = *(_DWORD *)&v517[v133 + 8];
        *(_QWORD *)v135 = v136;
        ++v134;
        v133 += 12;
      }
      while (v134 < v500);
    }
    v4 = v481;
    if (v517 != (char *)&v519)
      free(v517);
  }
  v137 = (_QWORD *)(v478 + 320);
  v138 = *(_QWORD **)(v478 + 328);
  if (v138 == (_QWORD *)(v478 + 320))
  {
LABEL_734:
    v2 = 0;
    goto LABEL_777;
  }
  v139 = 0;
  v477 = (int32x2_t *)(v4 + 624);
  v482 = (uint64_t *)(v4 + 304);
  do
  {
    if (((v138[12] - v138[11]) & 0x7FFFFFFF8) != 0x10)
      goto LABEL_266;
    (*(void (**)(char **__return_ptr, _QWORD, _QWORD *, _QWORD))(**(_QWORD **)(v4 + 336) + 56))(&v514, *(_QWORD *)(v4 + 336), v138, *(_QWORD *)(v4 + 264));
    if (v516[2])
      goto LABEL_266;
    v140 = v514;
    if (v516[1])
    {
      v514 = v515;
      v515 = (char *)v140;
      v140 = v514;
    }
    v141 = v140[9] - v140[8];
    if ((v141 & 0x7FFFFFFF8) != 8)
    {
      v514 = v515;
      v515 = (char *)v140;
      v141 = *((_QWORD *)v514 + 9) - *((_QWORD *)v514 + 8);
      v140 = v514;
    }
    if ((v141 & 0x7FFFFFFF8) != 8)
    {
LABEL_266:
      LOBYTE(v175) = 0;
      goto LABEL_267;
    }
    v142 = *(_QWORD *)(v4 + 256);
    v143 = *(_DWORD *)(v142 + 264);
    if (!v143)
      goto LABEL_252;
    v144 = *(_QWORD *)(v142 + 248);
    v145 = v143 - 1;
    v146 = v145 & ((v140 >> 4) ^ (v140 >> 9));
    v147 = *(_QWORD **)(v144 + 16 * v146);
    if (v140 != v147)
    {
      v148 = 1;
      while (v147 != (_QWORD *)-4096)
      {
        v149 = v146 + v148++;
        v146 = v149 & v145;
        v147 = *(_QWORD **)(v144 + 16 * v146);
        if (v140 == v147)
          goto LABEL_218;
      }
LABEL_222:
      v151 = 0;
      goto LABEL_223;
    }
LABEL_218:
    v150 = *(_QWORD **)(v144 + 16 * v146 + 8);
    if (!v150)
      goto LABEL_222;
    v151 = 0;
    do
    {
      v150 = (_QWORD *)*v150;
      ++v151;
    }
    while (v150);
LABEL_223:
    v152 = v145 & ((v138 >> 4) ^ (v138 >> 9));
    v153 = *(_QWORD **)(v144 + 16 * v152);
    v154 = v152;
    if (v138 != v153)
    {
      v155 = 1;
      v156 = *(_QWORD **)(v144 + 16 * (v145 & ((v138 >> 4) ^ (v138 >> 9))));
      LODWORD(v154) = v145 & ((v138 >> 4) ^ (v138 >> 9));
      while (v156 != (_QWORD *)-4096)
      {
        v157 = v154 + v155++;
        v154 = v157 & v145;
        v156 = *(_QWORD **)(v144 + 16 * v154);
        if (v138 == v156)
          goto LABEL_227;
      }
LABEL_231:
      v159 = 0;
      goto LABEL_232;
    }
LABEL_227:
    v158 = *(_QWORD **)(v144 + 16 * v154 + 8);
    if (!v158)
      goto LABEL_231;
    v159 = 0;
    do
    {
      v158 = (_QWORD *)*v158;
      ++v159;
    }
    while (v158);
LABEL_232:
    if (v151 != v159)
      goto LABEL_266;
    v160 = ((v515 >> 4) ^ (v515 >> 9)) & v145;
    v161 = *(char **)(v144 + 16 * v160);
    if (v515 != v161)
    {
      v162 = 1;
      while (v161 != (char *)-4096)
      {
        v163 = v160 + v162++;
        v160 = v163 & v145;
        v161 = *(char **)(v144 + 16 * v160);
        if (v515 == v161)
          goto LABEL_237;
      }
LABEL_241:
      v165 = 0;
      goto LABEL_242;
    }
LABEL_237:
    v164 = *(_QWORD **)(v144 + 16 * v160 + 8);
    if (!v164)
      goto LABEL_241;
    v165 = 0;
    do
    {
      v164 = (_QWORD *)*v164;
      ++v165;
    }
    while (v164);
LABEL_242:
    if (v138 != v153)
    {
      v166 = 1;
      while (v153 != (_QWORD *)-4096)
      {
        v167 = v152 + v166++;
        v152 = v167 & v145;
        v153 = *(_QWORD **)(v144 + 16 * v152);
        if (v138 == v153)
          goto LABEL_246;
      }
LABEL_250:
      v169 = 0;
      goto LABEL_251;
    }
LABEL_246:
    v168 = *(_QWORD **)(v144 + 16 * v152 + 8);
    if (!v168)
      goto LABEL_250;
    v169 = 0;
    do
    {
      v168 = (_QWORD *)*v168;
      ++v169;
    }
    while (v168);
LABEL_251:
    if (v165 != v169)
      goto LABEL_266;
LABEL_252:
    v170 = v140 + 6;
    v171 = (unint64_t *)v140[7];
    if (v171 != v140 + 6)
    {
      while (1)
      {
        v172 = *(unsigned __int16 *)v171[2];
        if ((v172 - 13) >= 5 && v172 != 23)
          break;
        if ((*(_BYTE *)v171 & 4) == 0)
        {
          while ((*((_WORD *)v171 + 22) & 8) != 0)
            v171 = (unint64_t *)v171[1];
        }
        v171 = (unint64_t *)v171[1];
        if (v171 == v170)
        {
          v171 = v170;
          break;
        }
      }
    }
    v174 = v138[6] & 0xFFFFFFFFFFFFFFF8;
    if (!v174 || (*(_BYTE *)v174 & 4) == 0)
    {
      while ((*(_WORD *)(v174 + 44) & 4) != 0)
        v174 = *(_QWORD *)v174 & 0xFFFFFFFFFFFFFFF8;
    }
    v175 = 0;
    v176 = v138[7];
    v484 = v176;
    do
    {
      v177 = v174;
      v174 = v176;
      if (v177 != v176)
      {
        v174 = *(_QWORD *)v177 & 0xFFFFFFFFFFFFFFF8;
        if (!v174 || (*(_BYTE *)v174 & 4) == 0)
        {
          while ((*(_WORD *)(v174 + 44) & 4) != 0)
            v174 = *(_QWORD *)v174 & 0xFFFFFFFFFFFFFFF8;
        }
      }
      v489 = v175;
      if (((***(uint64_t (****)(_QWORD, uint64_t))(v4 + 336))(*(_QWORD *)(v4 + 336), v177) & 1) != 0)
      {
        LOBYTE(v175) = v489;
        break;
      }
      v178 = *(_QWORD *)(v177 + 16);
      v179 = *(_WORD *)v178 - 1;
      v490 = v177;
      if (v179 <= 1u && (*(_BYTE *)(*(_QWORD *)(v177 + 32) + 48) & 0x20) != 0)
        goto LABEL_283;
      v180 = *(_WORD *)(v177 + 44);
      v181 = *(_QWORD *)(v178 + 8);
      if ((v180 & 0xC) == 0 || (v180 & 4) != 0)
      {
        if ((v181 & 0x1000000000) == 0)
          goto LABEL_285;
LABEL_283:
        if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v4 + 272) + 32))(*(_QWORD *)(v4 + 272), v177) & 1) != 0)
          goto LABEL_307;
        v178 = *(_QWORD *)(v177 + 16);
        v179 = *(_WORD *)v178 - 1;
        goto LABEL_285;
      }
      v442 = v177;
      if ((v181 & 0x1000000000) != 0)
        goto LABEL_283;
      while ((*(_WORD *)(v442 + 44) & 8) != 0)
      {
        v442 = *(_QWORD *)(v442 + 8);
        v4 = v481;
        v176 = v484;
        v177 = v490;
        if ((*(_BYTE *)(*(_QWORD *)(v442 + 16) + 12) & 0x10) != 0)
          goto LABEL_283;
      }
      v4 = v481;
      v176 = v484;
      v177 = v490;
LABEL_285:
      if (v179 > 1u || (v440 = *(_QWORD *)(*(_QWORD *)(v177 + 32) + 48), (v440 & 0x20) == 0))
      {
        v182 = *(_WORD *)(v177 + 44);
        v183 = v182 & 0xC;
        v184 = *(_QWORD *)(v178 + 8);
        if ((v182 & 0xC) != 0 && (v182 & 4) == 0)
        {
          v441 = v177;
          if ((v184 & 0x1000000000) == 0)
          {
            while ((*(_WORD *)(v441 + 44) & 8) != 0)
            {
              v441 = *(_QWORD *)(v441 + 8);
              v4 = v481;
              v176 = v484;
              v177 = v490;
              if ((*(_BYTE *)(*(_QWORD *)(v441 + 16) + 12) & 0x10) != 0)
                goto LABEL_291;
            }
            v4 = v481;
            goto LABEL_334;
          }
        }
        else if ((v184 & 0x1000000000) == 0)
        {
          goto LABEL_307;
        }
LABEL_291:
        if (v179 > 1u)
          goto LABEL_292;
        v440 = *(_QWORD *)(*(_QWORD *)(v177 + 32) + 48);
      }
      if ((v440 & 8) != 0)
        goto LABEL_295;
      v182 = *(_WORD *)(v177 + 44);
      v183 = v182 & 0xC;
LABEL_292:
      v186 = *(_QWORD *)(v178 + 8);
      if (!v183 || (v182 & 4) != 0)
      {
        if ((v186 & 0x80000) == 0)
          goto LABEL_297;
LABEL_295:
        if (!(*(unsigned int (**)(_QWORD, uint64_t))(**(_QWORD **)(v4 + 272) + 40))(*(_QWORD *)(v4 + 272), v177))goto LABEL_307;
        v178 = *(_QWORD *)(v177 + 16);
        v179 = *(_WORD *)v178 - 1;
        goto LABEL_297;
      }
      v445 = v177;
      if ((v186 & 0x80000) != 0)
        goto LABEL_295;
      while ((*(_WORD *)(v445 + 44) & 8) != 0)
      {
        v445 = *(_QWORD *)(v445 + 8);
        v4 = v481;
        v176 = v484;
        v177 = v490;
        if ((*(_BYTE *)(*(_QWORD *)(v445 + 16) + 10) & 8) != 0)
          goto LABEL_295;
      }
      v4 = v481;
      v176 = v484;
      v177 = v490;
LABEL_297:
      if (v179 <= 1u && (*(_BYTE *)(*(_QWORD *)(v177 + 32) + 48) & 0x10) != 0)
        goto LABEL_307;
      v187 = *(_QWORD *)(v178 + 8);
      if ((*(_WORD *)(v177 + 44) & 0xC) != 0 && (*(_WORD *)(v177 + 44) & 4) == 0)
      {
        v443 = v137;
        v444 = v177;
        if ((v187 & 0x100000) != 0)
        {
          v4 = v481;
        }
        else
        {
          do
          {
            v4 = v481;
            v137 = v443;
            v176 = v484;
            v177 = v490;
            if ((*(_WORD *)(v444 + 44) & 8) == 0)
              goto LABEL_303;
            v444 = *(_QWORD *)(v444 + 8);
          }
          while ((*(_BYTE *)(*(_QWORD *)(v444 + 16) + 10) & 0x10) == 0);
          v4 = v481;
          v137 = v443;
        }
        goto LABEL_334;
      }
      if ((v187 & 0x100000) != 0)
        goto LABEL_307;
LABEL_303:
      if (llvm::MachineInstr::hasUnmodeledSideEffects((llvm::MachineInstr *)v177))
        goto LABEL_307;
      v189 = *(_DWORD **)(v177 + 32);
      if ((*v189 & 0x10000FF) != 0x1000000)
        goto LABEL_307;
      v190 = v189[1];
      if ((v190 - 1) < 0x3FFFFFFF)
      {
        v4 = v481;
        goto LABEL_307;
      }
      v475 = v137;
      v485 = (uint64_t)v514;
      if (!sub_1C4A91738(*(_QWORD *)(v481 + 296), v190))
      {
        v191 = *(_QWORD *)(v481 + 296);
        v192 = (uint64_t *)((v190 & 0x80000000) != 0
                         ? *(_QWORD *)(v191 + 24) + 16 * (v190 & 0x7FFFFFFF) + 8
                         : *(_QWORD *)(v191 + 272) + 8 * v190);
        v193 = *v192;
        if (*v192)
        {
          if ((*(_BYTE *)(v193 + 3) & 0x81) != 0)
          {
            while (1)
            {
              v193 = *(_QWORD *)(v193 + 24);
              if (!v193)
                break;
              if ((*(_DWORD *)v193 & 0x81000000) == 0)
                goto LABEL_322;
            }
          }
          else
          {
LABEL_322:
            v194 = *(_QWORD *)(v193 + 8);
            v4 = v481;
            if (((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v481 + 272) + 16))(*(_QWORD *)(v481 + 272), v194) & 1) != 0|| ((*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v481 + 272) + 24))(*(_QWORD *)(v481 + 272), v194) & 1) != 0)
            {
              goto LABEL_333;
            }
            v195 = **(unsigned __int16 **)(v194 + 16);
            if (v195 == 69 || v195 == 0)
            {
              v197 = *(_QWORD *)(*(_QWORD *)(v194 + 32)
                               + 32 * (((unint64_t)(v193 - *(_QWORD *)(v194 + 32)) >> 5) + 1)
                               + 16);
            }
            else
            {
              v197 = *(_QWORD *)(v194 + 24);
              if ((_QWORD *)v197 == v138)
                goto LABEL_332;
            }
            v198 = *(_QWORD *)(v481 + 248);
            llvm::MachineDominatorTree::applySplitCriticalEdges((void ***)v198);
            if (!llvm::DominatorTreeBase<llvm::MachineBasicBlock,false>::dominates(*(_QWORD *)(v198 + 1320), v485, v197))
            {
LABEL_332:
              v4 = v481;
LABEL_333:
              v137 = v475;
LABEL_334:
              v176 = v484;
              goto LABEL_307;
            }
            v176 = v484;
            v177 = v490;
            while (1)
            {
              v193 = *(_QWORD *)(v193 + 24);
              if (!v193)
                break;
              if ((*(_DWORD *)v193 & 0x81000000) == 0)
                goto LABEL_322;
            }
          }
        }
      }
      v199 = *(_WORD *)(v177 + 44);
      v200 = v177;
      if ((v199 & 4) != 0)
      {
        do
          v200 = *(_QWORD *)v200 & 0xFFFFFFFFFFFFFFF8;
        while ((*(_WORD *)(v200 + 44) & 4) != 0);
      }
      v201 = v177;
      if ((v199 & 8) != 0)
      {
        do
          v201 = *(_QWORD *)(v201 + 8);
        while ((*(_WORD *)(v201 + 44) & 8) != 0);
      }
      v202 = *(_QWORD *)(v201 + 8);
      if (v200 != v202)
      {
        while (1)
        {
          v203 = **(unsigned __int16 **)(v200 + 16);
          v204 = v203 > 0x17;
          v205 = (1 << v203) & 0x83E000;
          if (v204 || v205 == 0)
            break;
          v200 = *(_QWORD *)(v200 + 8);
          if (v200 == v202)
          {
            v200 = v202;
            break;
          }
        }
      }
      v207 = *(_QWORD *)(*(_QWORD *)(v481 + 280) + 288);
      v208 = *(_QWORD *)(v207 + 368);
      v209 = *(unsigned int *)(v207 + 384);
      if ((_DWORD)v209)
      {
        LODWORD(v210) = ((v200 >> 4) ^ (v200 >> 9)) & (v209 - 1);
        v211 = (uint64_t *)(v208 + 16 * v210);
        v212 = *v211;
        if (v200 == *v211)
          goto LABEL_351;
        v213 = 1;
        while (v212 != -4096)
        {
          v214 = v210 + v213++;
          v210 = v214 & (v209 - 1);
          v212 = *(_QWORD *)(v208 + 16 * v210);
          if (v200 == v212)
          {
            v211 = (uint64_t *)(v208 + 16 * v210);
            goto LABEL_351;
          }
        }
      }
      v211 = (uint64_t *)(v208 + 16 * v209);
LABEL_351:
      v215 = v211[1];
      if (v514 + 48 == (char *)v171)
      {
        v228 = (_QWORD *)(*(_QWORD *)(v207 + 392) + 16 * *((unsigned int *)v514 + 6) + 8);
        goto LABEL_370;
      }
      v216 = *((_WORD *)v171 + 22);
      v217 = (unint64_t)v171;
      if ((v216 & 4) != 0)
      {
        do
          v217 = *(_QWORD *)v217 & 0xFFFFFFFFFFFFFFF8;
        while ((*(_WORD *)(v217 + 44) & 4) != 0);
      }
      v218 = v171;
      if ((v216 & 8) != 0)
      {
        do
          v218 = (unint64_t *)v218[1];
        while ((*((_WORD *)v218 + 22) & 8) != 0);
      }
      v219 = v218[1];
      if (v217 != v219)
      {
        while (1)
        {
          v220 = **(unsigned __int16 **)(v217 + 16);
          v204 = v220 > 0x17;
          v221 = (1 << v220) & 0x83E000;
          if (v204 || v221 == 0)
            break;
          v217 = *(_QWORD *)(v217 + 8);
          if (v217 == v219)
          {
            v217 = v219;
            break;
          }
        }
      }
      if (!(_DWORD)v209)
        goto LABEL_368;
      LODWORD(v223) = ((v217 >> 4) ^ (v217 >> 9)) & (v209 - 1);
      v224 = (uint64_t *)(v208 + 16 * v223);
      v225 = *v224;
      if (v217 != *v224)
      {
        v226 = 1;
        while (v225 != -4096)
        {
          v227 = v223 + v226++;
          v223 = v227 & (v209 - 1);
          v225 = *(_QWORD *)(v208 + 16 * v223);
          if (v217 == v225)
          {
            v224 = (uint64_t *)(v208 + 16 * v223);
            goto LABEL_369;
          }
        }
LABEL_368:
        v224 = (uint64_t *)(v208 + 16 * v209);
      }
LABEL_369:
      v228 = v224 + 1;
LABEL_370:
      v229 = *(unsigned int *)(v177 + 40);
      if ((_DWORD)v229)
      {
        v230 = 0;
        v479 = *v228 & 0xFFFFFFFFFFFFFFF8;
        v476 = v215 & 0xFFFFFFFFFFFFFFF8;
        v486 = *(unsigned int *)(v177 + 40);
        do
        {
          v231 = *(_QWORD *)(v177 + 32);
          v232 = *(_DWORD *)(v231 + 32 * v230);
          if ((_BYTE)v232)
            goto LABEL_373;
          v233 = v231 + 32 * v230;
          v236 = *(_DWORD *)(v233 + 4);
          v235 = (unsigned int *)(v233 + 4);
          v234 = v236;
          if (!v236)
            goto LABEL_373;
          v237 = (v232 & 0x30000000) != 0 || (v232 & 0x10FFF00) == 0x1000000;
          v238 = v237;
          if ((v232 & 0x1000000) == 0 && v238)
            goto LABEL_373;
          if (!(v234 >> 30))
            goto LABEL_679;
          v239 = *(_QWORD *)(v481 + 280);
          if ((v234 & 0x7FFFFFFF) >= (unint64_t)*(unsigned int *)(v239 + 416)
            || (v240 = *(unsigned int **)(*(_QWORD *)(v239 + 408) + 8 * (v234 & 0x7FFFFFFF))) == 0)
          {
            v240 = (unsigned int *)sub_1C4851220(*(_QWORD *)(v481 + 280), v234);
            v268 = *(_QWORD *)(v239 + 304);
            v269 = *(_QWORD *)(v239 + 248);
            *(_QWORD *)v268 = v269;
            *(_QWORD *)(v268 + 8) = *(_QWORD *)(v269 + 40);
            *(_OWORD *)(v268 + 16) = *(_OWORD *)(v239 + 288);
            *(_QWORD *)(v268 + 32) = v239 + 312;
            llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v268);
            *(_DWORD *)(v268 + 184) = 0;
            v270 = *(_QWORD *)(v239 + 256);
            v55 = *(_BYTE *)(v270 + 16) == 0;
            v271 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v270 + 24) + 16 * (v240[28] & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                      + 34);
            v273 = !v55 && v271 != 0;
            llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v239 + 304), (llvm::LiveInterval *)v240, v273);
            llvm::LiveIntervals::computeDeadValues(v239, (uint64_t)v240, 0);
            v234 = *v235;
          }
          RegisterDefOperandIdx = llvm::MachineInstr::findRegisterDefOperandIdx(v490, v234, 0, 0, 0);
          v242 = v240[2];
          v243 = *(_BYTE **)v240;
          if ((_DWORD)v242)
          {
            if (RegisterDefOperandIdx == -1)
              v245 = 1;
            else
              v245 = 2;
            v246 = *(_DWORD *)(v476 + 24) | v245;
            v244 = *(_QWORD *)&v243[24 * v242 - 16];
            v247 = (v244 >> 1) & 3 | *(_DWORD *)((v244 & 0xFFFFFFFFFFFFFFF8) + 24);
            v248 = v240[2];
            v249 = *(_BYTE **)v240;
            v250 = v248;
            v176 = v484;
            v229 = v486;
            if (v246 < v247)
            {
              do
              {
                v251 = v250 >> 1;
                v252 = *(_QWORD *)&v249[24 * (v250 >> 1) + 8];
                LODWORD(v252) = (v252 >> 1) & 3 | *(_DWORD *)((v252 & 0xFFFFFFFFFFFFFFF8) + 24);
                v250 -= (v250 >> 1) + 1;
                v253 = v246 >= v252;
                if (v246 >= v252)
                  v254 = v251 + 1;
                else
                  v254 = 0;
                v249 += 24 * v254;
                if (!v253)
                  v250 = v251;
              }
              while (v250);
              goto LABEL_398;
            }
          }
          else
          {
            v248 = 0;
            v176 = v484;
            v229 = v486;
          }
          v249 = &v243[24 * v248];
          if (!(_DWORD)v242)
          {
            v258 = 0;
LABEL_409:
            v259 = &v243[24 * v258];
            goto LABEL_410;
          }
LABEL_398:
          v255 = *(_QWORD *)&v243[24 * v242 - 16];
          v256 = *(_DWORD *)(v479 + 24) | 1;
          v257 = (v255 >> 1) & 3 | *(_DWORD *)((v255 & 0xFFFFFFFFFFFFFFF8) + 24);
          v258 = v242;
          v259 = v243;
          v260 = v242;
          if (v256 >= v257)
            goto LABEL_409;
          do
          {
            v261 = v260 >> 1;
            v262 = *(_QWORD *)&v259[24 * (v260 >> 1) + 8];
            LODWORD(v262) = (v262 >> 1) & 3 | *(_DWORD *)((v262 & 0xFFFFFFFFFFFFFFF8) + 24);
            v260 -= (v260 >> 1) + 1;
            v263 = v256 >= v262;
            if (v256 >= v262)
              v264 = v261 + 1;
            else
              v264 = 0;
            v259 += 24 * v264;
            if (!v263)
              v260 = v261;
          }
          while (v260);
LABEL_410:
          v177 = v490;
          if (v249 != v259)
          {
            v265 = v249 + 24;
            v266 = &v243[24 * v242];
            if (v259 == v266)
            {
              if (v265 != v266)
                goto LABEL_679;
            }
            else if ((*v259 & 6) != 0 || v265 != v259)
            {
LABEL_679:
              v4 = v481;
              goto LABEL_680;
            }
          }
LABEL_373:
          ++v230;
        }
        while (v230 != v229);
      }
      v4 = v481;
      if (!*(_BYTE *)(v481 + 584))
      {
        v299 = v514;
        goto LABEL_559;
      }
      v492 = 0;
      v491 = 0;
      sub_1C558E9AC(&__src, v497, &v491);
      v274 = *(_QWORD *)(v177 + 32);
      v275 = *(_QWORD *)(v177 + 16);
      v276 = *(unsigned __int8 *)(v275 + 4);
      v277 = *(unsigned int *)(v177 + 40);
      if ((*(_BYTE *)(v275 + 8) & 2) != 0 && (_DWORD)v277 != v276)
      {
        v278 = *(unsigned __int8 *)(v275 + 4);
        do
        {
          v437 = *(_DWORD *)(v274 + 32 * v276);
          if ((v437 & 0x10000FF) != 0x1000000)
            break;
          v278 += (v437 & 0x2000000) == 0;
          if ((_DWORD)v277 - 1 == v276)
            break;
          ++v276;
        }
        while ((v437 & 0x2000000) == 0);
      }
      else
      {
        v278 = *(unsigned __int8 *)(v275 + 4);
      }
      if (v278 != (_DWORD)v277)
      {
        v480 = (int *)(v274 + 32 * v277);
        v300 = (int *)(v274 + 32 * v278);
        while (1)
        {
          v301 = *v300;
          if (!*v300)
          {
            v302 = v300[1];
            v303 = (v301 & 0x10FFF00) != 0x1000000 && (v301 & 0x30000000) == 0;
            if (v303 && v302 != 0)
            {
              v305 = v302 & 0x7FFFFFFF;
              v487 = *(_QWORD *)(*((_QWORD *)v493[1] + 3) + 16 * v305) & 0xFFFFFFFFFFFFFFF8;
              if (*(_BYTE *)(*(_QWORD *)v487 + 31))
              {
                v306 = v494;
                if (v305 >= *(unsigned int *)(v494 + 416)
                  || (v307 = *(_QWORD *)(*(_QWORD *)(v494 + 408) + 8 * v305)) == 0)
                {
                  v307 = sub_1C4851220(v494, v302);
                  v325 = *(_QWORD *)(v306 + 304);
                  v326 = *(_QWORD *)(v306 + 248);
                  *(_QWORD *)v325 = v326;
                  *(_QWORD *)(v325 + 8) = *(_QWORD *)(v326 + 40);
                  *(_OWORD *)(v325 + 16) = *(_OWORD *)(v306 + 288);
                  *(_QWORD *)(v325 + 32) = v306 + 312;
                  llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v325);
                  *(_DWORD *)(v325 + 184) = 0;
                  v327 = *(_QWORD *)(v306 + 256);
                  v55 = *(_BYTE *)(v327 + 16) == 0;
                  v328 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v327 + 24)
                                                         + 16 * (*(_DWORD *)(v307 + 112) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                            + 34);
                  v330 = !v55 && v328 != 0;
                  llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v306 + 304), (llvm::LiveInterval *)v307, v330);
                  llvm::LiveIntervals::computeDeadValues(v306, v307, 0);
                }
                if (*(float *)(v307 + 116) != INFINITY)
                {
                  v308 = (unsigned int *)(*(uint64_t (**)(llvm::MachineRegisterInfo *, unint64_t))(*(_QWORD *)v493[0] + 320))(v493[0], v487);
                  v309 = *v308;
                  if (*v308 != -1)
                    break;
                }
              }
            }
          }
LABEL_489:
          v300 += 8;
          if (v300 == v480)
            goto LABEL_431;
        }
        v310 = v308;
        while (2)
        {
          if (v507)
          {
            for (n = v506; n; n = (_QWORD *)*n)
            {
              v312 = *((_DWORD *)n + 7);
              if (v309 >= v312)
              {
                if (v312 >= v309)
                  goto LABEL_488;
                ++n;
              }
            }
            goto LABEL_482;
          }
          if (!(_DWORD)v503)
            goto LABEL_482;
          v313 = v502;
          v314 = 4 * v503;
          while (*v313 != v309)
          {
            ++v313;
            v314 -= 4;
            if (!v314)
              goto LABEL_482;
          }
          if (!v314)
          {
LABEL_482:
            v315 = v309;
            v316 = __src;
            v317 = (char *)__src + 12 * (int)v309;
            v318 = 3 * (int)v309;
            v319 = *(_DWORD *)(*(uint64_t (**)(llvm::MachineRegisterInfo *, unint64_t))(*(_QWORD *)v493[0] + 280))(v493[0], v487);
            ++v316[v318];
            v321 = *((_DWORD *)v317 + 1);
            v320 = v317 + 4;
            v322 = v321 == v319;
            if (v321 < v319)
            {
              v323 = 0;
              *v320 = v319;
              goto LABEL_487;
            }
            if (v322)
            {
              v323 = v316[3 * v315 + 2];
LABEL_487:
              v316[3 * v315 + 2] = v323 + 1;
            }
          }
LABEL_488:
          v324 = v310[1];
          ++v310;
          v309 = v324;
          if (v324 == -1)
            goto LABEL_489;
          continue;
        }
      }
LABEL_431:
      v279 = v500;
      v176 = v484;
      if ((_DWORD)v500)
      {
        v280 = 0;
        v282 = v506;
        v281 = v507;
        v283 = v503;
        v284 = __src;
        v285 = v502;
        v286 = v499;
        v287 = 4 * v503;
        do
        {
          if (v281)
          {
            for (ii = v282; ii; ii = (_QWORD *)*ii)
            {
              v289 = *((_DWORD *)ii + 7);
              if (v289 <= v280)
              {
                if (v289 >= v280)
                  goto LABEL_448;
                ++ii;
              }
            }
          }
          else if (v283)
          {
            v290 = v287;
            v291 = v285;
            while (*v291 != (_DWORD)v280)
            {
              ++v291;
              v290 -= 4;
              if (!v290)
                goto LABEL_446;
            }
            if (v290)
              goto LABEL_448;
          }
LABEL_446:
          v292 = v286[3 * v280 + 1];
          v293 = (char *)&v284[3 * v280];
          v295 = *((_DWORD *)v293 + 1);
          v294 = v293 + 4;
          if (v295 < v292)
          {
            *v294 = v292;
            v284[3 * v280 + 2] = 0;
          }
LABEL_448:
          ++v280;
        }
        while (v280 != v279);
      }
      v517 = (char *)&v519;
      v518 = 0x400000000;
      v296 = v509;
      if (!(_DWORD)v509)
        goto LABEL_500;
      if (v509 < 5)
      {
        v297 = v509;
        v298 = &v519;
        goto LABEL_499;
      }
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v517, (uint64_t)&v519, v509, 12);
      v297 = v509;
      if ((_DWORD)v509)
      {
        v298 = (uint64_t *)v517;
LABEL_499:
        memcpy(v298, __src, 12 * v297);
      }
LABEL_500:
      LODWORD(v518) = v296;
      if (__src != &v510)
        free(__src);
      v331 = v497;
      v332 = (uint64_t *)v517;
      v4 = v481;
      if (!(_DWORD)v497)
      {
LABEL_551:
        v340 = 0;
        v368 = 0;
        goto LABEL_553;
      }
      v333 = 0;
      v335 = v506;
      v334 = v507;
      v336 = v502;
      v337 = v503;
      v338 = v499;
      v339 = 4 * v503;
      v340 = 1;
      while (1)
      {
        if (v507)
        {
          for (jj = v506; jj; jj = (_QWORD *)*jj)
          {
            v342 = *((_DWORD *)jj + 7);
            if (v342 <= v333)
            {
              if (v342 >= v333)
                goto LABEL_530;
              ++jj;
            }
          }
        }
        else if ((_DWORD)v503)
        {
          v343 = 4 * v503;
          v344 = v502;
          while (*v344 != (_DWORD)v333)
          {
            ++v344;
            v343 -= 4;
            if (!v343)
              goto LABEL_517;
          }
          if (v343)
            goto LABEL_530;
        }
LABEL_517:
        v345 = (char *)v499 + 12 * v333;
        v347 = v345[1];
        v346 = v345[2];
        v348 = &v517[12 * v333];
        v349 = *((_DWORD *)v348 + 1);
        if (v347 < v349)
          v346 = 0;
        if (v347 <= v349)
          v350 = *((_DWORD *)v348 + 1);
        else
          v350 = v345[1];
        if (v349 >= v347)
          v346 += *(_DWORD *)&v517[12 * v333 + 8];
        v351 = *(_DWORD *)v348 + *v345;
        if (v350 <= 1)
          v352 = 1;
        else
          v352 = v350;
        v353 = v352 - 1;
        if (v346 <= 1)
          v346 = 1;
        if (v350 * v351 + (v346 - 1) * v353 > *((_DWORD *)v496 + v333))
          break;
LABEL_530:
        v340 = ++v333 < (unint64_t)v497;
        if (v333 == v497)
        {
          v354 = 0;
          while (1)
          {
            if (v334)
            {
              for (kk = v335; kk; kk = (_QWORD *)*kk)
              {
                v356 = *((_DWORD *)kk + 7);
                if (v356 <= v354)
                {
                  if (v356 >= v354)
                    goto LABEL_550;
                  ++kk;
                }
              }
            }
            else if (v337)
            {
              v357 = v339;
              v358 = v336;
              while (*v358 != (_DWORD)v354)
              {
                ++v358;
                v357 -= 4;
                if (!v357)
                  goto LABEL_545;
              }
              if (v357)
                goto LABEL_550;
            }
LABEL_545:
            v359 = (_DWORD *)v332 + 3 * v354;
            v338[3 * v354] += *v359;
            v360 = (char *)&v338[3 * v354];
            v363 = v359[1];
            v362 = v359 + 1;
            v361 = v363;
            v366 = *((_DWORD *)v360 + 1);
            v364 = v360 + 4;
            v365 = v366;
            if (v366 >= v361)
            {
              v367 = v361;
              v361 = v365;
            }
            else
            {
              *v364 = v361;
              v338[3 * v354 + 2] = 0;
              v367 = *v362;
            }
            if (v361 == v367)
              v338[3 * v354 + 2] += *((_DWORD *)v332 + 3 * v354 + 2);
LABEL_550:
            if (++v354 == v331)
              goto LABEL_551;
          }
        }
      }
      v368 = 5;
LABEL_553:
      if (v332 != &v519)
        free(v332);
      if (v340)
      {
        if (v368 != 5)
        {
          v137 = v475;
          v175 = v489;
          continue;
        }
LABEL_680:
        v137 = v475;
LABEL_307:
        v175 = v489;
        continue;
      }
      v299 = v514;
      v177 = v490;
      if (v490)
      {
LABEL_559:
        v369 = v177;
        if ((*(_BYTE *)v177 & 4) == 0)
          goto LABEL_560;
      }
      else
      {
LABEL_560:
        if ((*(_WORD *)(v177 + 44) & 8) != 0)
        {
          v369 = v177;
          do
            v369 = *(_QWORD *)(v369 + 8);
          while ((*(_WORD *)(v369 + 44) & 8) != 0);
        }
        else
        {
          v369 = v177;
        }
      }
      v370 = *(unint64_t **)(v369 + 8);
      if ((unint64_t *)v177 != v370 && v171 != v370)
      {
        if (v299 != v138)
        {
          v438 = v299[5];
          v439 = (unint64_t *)v177;
          do
          {
            v439[3] = v438;
            v439 = (unint64_t *)v439[1];
          }
          while (v439 != v370);
        }
        sub_1C4785D30(v171, (unint64_t *)v177, v370);
        v299 = v514;
      }
      v372 = v299 + 6;
      v171 = (unint64_t *)v299[7];
      if (v171 != v299 + 6)
      {
        while (1)
        {
          v373 = *(unsigned __int16 *)v171[2];
          if ((v373 - 13) >= 5 && v373 != 23)
            break;
          if ((*(_BYTE *)v171 & 4) == 0)
          {
            while ((*((_WORD *)v171 + 22) & 8) != 0)
              v171 = (unint64_t *)v171[1];
          }
          v171 = (unint64_t *)v171[1];
          if (v171 == v372)
          {
            v171 = v372;
            break;
          }
        }
      }
      v375 = *(int32x2_t **)(*(_QWORD *)(v4 + 280) + 288);
      v376 = v375[46];
      v377 = v375[48].u32[0];
      if ((_DWORD)v377)
      {
        LODWORD(v378) = (v377 - 1) & ((v177 >> 4) ^ (v177 >> 9));
        v379 = (uint64_t *)(*(_QWORD *)&v376 + 16 * v378);
        v380 = *v379;
        if (*v379 != v177)
        {
          v381 = 1;
          while (v380 != -4096)
          {
            v382 = v378 + v381++;
            v378 = v382 & (v377 - 1);
            v380 = *(_QWORD *)(*(_QWORD *)&v376 + 16 * v378);
            if (v380 == v177)
            {
              v379 = (uint64_t *)(*(_QWORD *)&v376 + 16 * v378);
              goto LABEL_588;
            }
          }
          goto LABEL_587;
        }
      }
      else
      {
LABEL_587:
        v379 = (uint64_t *)(*(_QWORD *)&v376 + 16 * v377);
      }
LABEL_588:
      if (v379 != (uint64_t *)(*(_QWORD *)&v376 + 16 * v377))
      {
        v383 = v379[1] & 0xFFFFFFFFFFFFFFF8;
        *v379 = -8192;
        v375[47] = vadd_s32(v375[47], (int32x2_t)0x1FFFFFFFFLL);
        *(_QWORD *)(v383 + 16) = 0;
        v375 = *(int32x2_t **)(*(_QWORD *)(v4 + 280) + 288);
      }
      sub_1C4850BC8((uint64_t)v375, v177, 0);
      v384 = *(unsigned int *)(v177 + 40);
      if (!(_DWORD)v384)
      {
        v175 = 1;
        goto LABEL_677;
      }
      v385 = 0;
      while (2)
      {
        v386 = (int *)(*(_QWORD *)(v177 + 32) + 32 * v385);
        v387 = *v386;
        if (*v386)
          goto LABEL_593;
        v388 = v386[1];
        if (!v388)
          goto LABEL_593;
        v389 = (v387 & 0xFFF00) != 0;
        if ((v387 & 0x1000000) == 0)
          v389 = 1;
        v390 = (v387 & 0x30000000) == 0 && v389;
        v391 = *(_QWORD *)(v481 + 624);
        v392 = *(unsigned int *)(v481 + 640);
        if (!(_DWORD)v392)
          goto LABEL_607;
        v393 = ((_DWORD)v392 - 1) & (37 * v388);
        v394 = *(_DWORD *)(v391 + 8 * v393);
        if (v394 == v388)
        {
          if ((_DWORD)v392 == (_DWORD)v393)
            goto LABEL_612;
LABEL_622:
          *(_BYTE *)(v391 + 8 * v393 + 4) |= v390;
          goto LABEL_632;
        }
        v395 = 1;
        while (v394 != -1)
        {
          v396 = v393 + v395++;
          v393 = v396 & (v392 - 1);
          v394 = *(_DWORD *)(v391 + 8 * v393);
          if (v394 == v388)
            goto LABEL_608;
        }
LABEL_607:
        v393 = *(unsigned int *)(v481 + 640);
LABEL_608:
        if (v393 != v392)
          goto LABEL_622;
        if (!(_DWORD)v392)
        {
          v397 = 0;
          goto LABEL_625;
        }
LABEL_612:
        v398 = v392 - 1;
        v399 = (v392 - 1) & (37 * v388);
        v397 = (int *)(v391 + 8 * v399);
        v400 = *v397;
        if (v388 != *v397)
        {
          v401 = 0;
          v402 = 1;
          while (v400 != -1)
          {
            if (v401)
              v403 = 0;
            else
              v403 = v400 == -2;
            if (v403)
              v401 = v397;
            v404 = v399 + v402++;
            v399 = v404 & v398;
            v397 = (int *)(v391 + 8 * (v404 & v398));
            v400 = *v397;
            if (v388 == *v397)
              goto LABEL_631;
          }
          if (v401)
            v397 = v401;
LABEL_625:
          v405 = *(_DWORD *)(v481 + 632);
          if (4 * v405 + 4 >= (3 * v392))
          {
            v411 = v384;
            sub_1C558EA4C((uint64_t)v477, 2 * v392);
            v412 = *(_QWORD *)(v481 + 624);
            v413 = *(_DWORD *)(v481 + 640) - 1;
            v414 = v413 & (37 * v388);
            v397 = (int *)(v412 + 8 * v414);
            v415 = *v397;
            if (v388 == *v397)
              goto LABEL_657;
            v416 = 0;
            v417 = 1;
            while (v415 != -1)
            {
              if (v416)
                v418 = 0;
              else
                v418 = v415 == -2;
              if (v418)
                v416 = v397;
              v419 = v414 + v417++;
              v414 = v419 & v413;
              v397 = (int *)(v412 + 8 * (v419 & v413));
              v415 = *v397;
              if (v388 == *v397)
                goto LABEL_657;
            }
          }
          else
          {
            if ((int)v392 + ~v405 - *(_DWORD *)(v481 + 636) > v392 >> 3)
              goto LABEL_627;
            v411 = v384;
            sub_1C558EA4C((uint64_t)v477, v392);
            v427 = *(_QWORD *)(v481 + 624);
            v428 = *(_DWORD *)(v481 + 640) - 1;
            v429 = v428 & (37 * v388);
            v397 = (int *)(v427 + 8 * v429);
            v430 = *v397;
            if (v388 == *v397)
            {
LABEL_657:
              v406 = v388;
              v177 = v490;
              v384 = v411;
              goto LABEL_628;
            }
            v416 = 0;
            v431 = 1;
            while (v430 != -1)
            {
              if (v416)
                v432 = 0;
              else
                v432 = v430 == -2;
              if (v432)
                v416 = v397;
              v433 = v429 + v431++;
              v429 = v433 & v428;
              v397 = (int *)(v427 + 8 * (v433 & v428));
              v430 = *v397;
              if (v388 == *v397)
                goto LABEL_657;
            }
          }
          if (v416)
            v397 = v416;
          v384 = v411;
LABEL_627:
          v406 = *v397;
          v177 = v490;
LABEL_628:
          ++*(_DWORD *)(v481 + 632);
          if (v406 != -1)
            --*(_DWORD *)(v481 + 636);
          *v397 = v388;
          *((_BYTE *)v397 + 4) = 0;
        }
LABEL_631:
        *((_BYTE *)v397 + 4) = v390;
LABEL_632:
        v407 = *v386;
        v176 = v484;
        if ((*v386 & 0x30000000) == 0 && (v407 & 0x10FFF00) != 0x1000000)
        {
          if ((v407 & 0x1000000) != 0)
          {
            v410 = v384;
            sub_1C627A138(v477, v388);
            sub_1C558E710(v481, v388, 1);
            v384 = v410;
          }
          else
          {
            v408 = *(_QWORD *)(v481 + 280);
            if ((v388 & 0x7FFFFFFFu) >= (unint64_t)*(unsigned int *)(v408 + 416)
              || (v409 = *(llvm::LiveInterval **)(*(_QWORD *)(v408 + 408) + 8 * (v388 & 0x7FFFFFFF))) == 0)
            {
              v420 = v384;
              v409 = (llvm::LiveInterval *)sub_1C4851220(*(_QWORD *)(v481 + 280), v388);
              v421 = *(_QWORD *)(v408 + 304);
              v422 = *(_QWORD *)(v408 + 248);
              *(_QWORD *)v421 = v422;
              *(_QWORD *)(v421 + 8) = *(_QWORD *)(v422 + 40);
              *(_OWORD *)(v421 + 16) = *(_OWORD *)(v408 + 288);
              *(_QWORD *)(v421 + 32) = v408 + 312;
              llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v421);
              *(_DWORD *)(v421 + 184) = 0;
              v423 = *(_QWORD *)(v408 + 256);
              v55 = *(_BYTE *)(v423 + 16) == 0;
              v424 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v423 + 24)
                                                     + 16 * (*((_DWORD *)v409 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                                        + 34);
              v426 = !v55 && v424 != 0;
              llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v408 + 304), v409, v426);
              llvm::LiveIntervals::computeDeadValues(v408, (uint64_t)v409, 0);
              v384 = v420;
            }
            *((_DWORD *)v409 + 29) = 2139095040;
            v176 = v484;
          }
        }
LABEL_593:
        if (++v385 != v384)
          continue;
        break;
      }
      v434 = *(unsigned int *)(v177 + 40);
      if ((_DWORD)v434)
      {
        v435 = 32 * v434;
        v436 = (unsigned int *)(*(_QWORD *)(v177 + 32) + 4);
        v4 = v481;
        do
        {
          if ((*(v436 - 1) & 0x10000FF) == 0)
            sub_1C4DB3420(v482, *v436);
          v436 += 8;
          v175 = 1;
          v435 -= 32;
        }
        while (v435);
LABEL_677:
        v137 = v475;
      }
      else
      {
        v175 = 1;
        v4 = v481;
        v137 = v475;
      }
    }
    while (v490 != v176);
LABEL_267:
    v139 |= v175;
    v138 = (_QWORD *)v138[1];
  }
  while (v138 != v137);
  if ((v139 & 1) == 0)
    goto LABEL_734;
  v446 = *(_QWORD *)(v4 + 312);
  v509 = (uint64_t)v482;
  v510 = v446;
  v512 = 0;
  v511 = 0xFFFFFFFF00000000;
  LOBYTE(__src) = 0;
  sub_1C511F4E8((uint64_t)&__src);
  v447 = *(_QWORD *)(v4 + 312);
  v518 = (uint64_t)v482;
  v519 = v447;
  v521 = 0;
  v520 = 0xFFFFFFFF00000000;
  LOBYTE(v517) = 1;
  sub_1C511F4E8((uint64_t)&v517);
  while ((!(_BYTE)__src || !(_BYTE)v517)
       && (__src != v517 || (_DWORD)v520 != (_DWORD)v511))
  {
    llvm::MachineRegisterInfo::clearKillFlags(*(_QWORD *)(v4 + 296), v511);
    LODWORD(v511) = v511 + 1;
    v512 >>= 1;
    sub_1C511F56C((uint64_t)&__src);
  }
  if (*(_QWORD *)(v4 + 320))
  {
    v449 = *(_QWORD *)(v4 + 304);
    v448 = *(uint64_t **)(v4 + 312);
    v450 = *v448;
    *(_QWORD *)(v450 + 8) = *(_QWORD *)(v449 + 8);
    **(_QWORD **)(v449 + 8) = v450;
    *(_QWORD *)(v4 + 320) = 0;
    if (v448 != v482)
    {
      do
      {
        v451 = (uint64_t *)v448[1];
        operator delete(v448);
        v448 = v451;
      }
      while (v451 != v482);
    }
  }
  v452 = *(_DWORD *)(v4 + 632);
  v453 = *(_QWORD *)(v4 + 624);
  v454 = *(unsigned int *)(v4 + 640);
  v455 = (unsigned int *)(v453 + 8 * v454);
  if (v452)
  {
    if ((_DWORD)v454)
    {
      v456 = 8 * v454;
      v457 = *(unsigned int **)(v4 + 624);
      while (*v457 >= 0xFFFFFFFE)
      {
        v457 += 2;
        v456 -= 8;
        if (!v456)
          goto LABEL_743;
      }
    }
    else
    {
      v457 = *(unsigned int **)(v4 + 624);
    }
  }
  else
  {
LABEL_743:
    v457 = (unsigned int *)(v453 + 8 * v454);
  }
  v458 = (unsigned int *)(v453 + 8 * v454);
  if (v457 != v458)
  {
    do
    {
      sub_1C558E710(v4, *v457, *((unsigned __int8 *)v457 + 4));
      v459 = v457 + 2;
      while (v459 != v455)
      {
        v460 = *v459;
        v459 += 2;
        if (v460 <= 0xFFFFFFFD)
        {
          v457 = v459 - 2;
          goto LABEL_751;
        }
      }
      v457 = v455;
LABEL_751:
      ;
    }
    while (v457 != v458);
    v452 = *(_DWORD *)(v4 + 632);
  }
  v461 = v477;
  if (!v452)
  {
    if (!*(_DWORD *)(v4 + 636))
      goto LABEL_776;
    v462 = *(_DWORD *)(v481 + 640);
    if (v462 > 0x40)
    {
      v464 = 0;
      v4 = v481;
      v461 = v477;
      goto LABEL_759;
    }
    v4 = v481;
    v461 = v477;
LABEL_772:
    if (v462)
    {
      v472 = (_DWORD *)*v461;
      v473 = 8 * v462;
      do
      {
        *v472 = -1;
        v472 += 2;
        v473 -= 8;
      }
      while (v473);
    }
    *(_QWORD *)(v4 + 632) = 0;
LABEL_776:
    v2 = 1;
    goto LABEL_777;
  }
  v462 = *(_DWORD *)(v4 + 640);
  if (v462 <= 4 * v452 || v462 < 0x41)
    goto LABEL_772;
  v463 = 1 << (33 - __clz(v452 - 1));
  if (v463 <= 64)
    v464 = 64;
  else
    v464 = v463;
LABEL_759:
  if (v464 == v462)
  {
    *(_QWORD *)(v4 + 632) = 0;
    v465 = *(_DWORD **)(v4 + 624);
    v466 = 8 * v462;
    do
    {
      *v465 = -1;
      v465 += 2;
      v466 -= 8;
    }
    while (v466);
    goto LABEL_776;
  }
  ((void (*)(_QWORD, _QWORD))MEMORY[0x1CAA32FB4])(*v461, 4);
  if (v464)
  {
    v467 = (4 * v464 / 3u + 1) | ((unint64_t)(4 * v464 / 3u + 1) >> 1);
    v468 = v467 | (v467 >> 2) | ((v467 | (v467 >> 2)) >> 4);
    LODWORD(v468) = (((v468 | (v468 >> 8)) >> 16) | v468 | (v468 >> 8)) + 1;
    *(_DWORD *)(v4 + 640) = v468;
    v469 = operator new(8 * v468, (std::align_val_t)4uLL);
    *(_QWORD *)(v4 + 624) = v469;
    *(_QWORD *)(v4 + 632) = 0;
    v470 = *(unsigned int *)(v4 + 640);
    if (!(_DWORD)v470)
      goto LABEL_776;
    v471 = 8 * v470;
    v2 = 1;
    do
    {
      *v469 = -1;
      v469 += 2;
      v471 -= 8;
    }
    while (v471);
  }
  else
  {
    *v461 = 0;
    v461[1] = 0;
    v2 = 1;
    v461[2].i32[0] = 0;
  }
LABEL_777:
  sub_1C47655E8((uint64_t)&v505, v506);
  if (v502 != v504)
    free(v502);
  if (v499 != v501)
    free(v499);
  if (v496 != v498)
    free(v496);
  return v2;
}

uint64_t sub_1C558E710(uint64_t a1, int a2, int a3)
{
  uint64_t v5;
  unint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  void *v12;
  uint64_t v13;
  llvm::LiveInterval *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  BOOL v20;
  int v21;
  uint64_t result;
  uint64_t v23;
  llvm::LiveInterval *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  void *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  int v34;
  int v36;
  uint64_t v37;

  v5 = *(_QWORD *)(a1 + 280);
  v7 = a2 & 0x7FFFFFFF;
  v8 = *(_QWORD *)(v5 + 408);
  v9 = *(_QWORD *)(v8 + 8 * v7);
  if (v9)
  {
    v10 = *(_QWORD *)(v9 + 104);
    if (v10)
    {
      do
      {
        v27 = *(_QWORD *)(v10 + 96);
        v28 = *(_QWORD *)(v10 + 104);
        *(_QWORD *)(v10 + 96) = 0;
        if (v27)
        {
          v37 = v10;
          v25 = v27;
          sub_1C47655E8(v27, *(_QWORD **)(v27 + 8));
          v26 = v25;
          v10 = v37;
          MEMORY[0x1CAA32FC0](v26, 0x1020C4062D53EE8);
        }
        v29 = *(void **)(v10 + 64);
        if (v29 != (void *)(v10 + 80))
          free(v29);
        if (*(_QWORD *)v10 != v10 + 16)
          free(*(void **)v10);
        v10 = v28;
      }
      while (v28);
    }
    v11 = *(_QWORD *)(v9 + 96);
    *(_QWORD *)(v9 + 96) = 0;
    *(_QWORD *)(v9 + 104) = 0;
    if (v11)
    {
      sub_1C47655E8(v11, *(_QWORD **)(v11 + 8));
      MEMORY[0x1CAA32FC0](v11, 0x1020C4062D53EE8);
    }
    v12 = *(void **)(v9 + 64);
    if (v12 != (void *)(v9 + 80))
      free(v12);
    if (*(_QWORD *)v9 != v9 + 16)
      free(*(void **)v9);
    MEMORY[0x1CAA32FC0](v9, 0x10A0C408DA535C6);
    v8 = *(_QWORD *)(v5 + 408);
  }
  *(_QWORD *)(v8 + 8 * v7) = 0;
  v13 = *(_QWORD *)(a1 + 280);
  v14 = (llvm::LiveInterval *)sub_1C4851220(v13, a2);
  v15 = *(_QWORD *)(v13 + 304);
  v16 = *(_QWORD *)(v13 + 248);
  v17 = *(_QWORD *)(v16 + 40);
  *(_QWORD *)v15 = v16;
  *(_QWORD *)(v15 + 8) = v17;
  *(_OWORD *)(v15 + 16) = *(_OWORD *)(v13 + 288);
  *(_QWORD *)(v15 + 32) = v13 + 312;
  llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v15);
  *(_DWORD *)(v15 + 184) = 0;
  v18 = *(_QWORD *)(v13 + 256);
  v20 = *(_BYTE *)(v18 + 16) == 0;
  v19 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v18 + 24) + 16 * (*((_DWORD *)v14 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                           + 34);
  v20 = v20 || v19 == 0;
  v21 = !v20;
  llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v13 + 304), v14, v21);
  result = llvm::LiveIntervals::computeDeadValues(v13, (uint64_t)v14, 0);
  if (a3)
  {
    v23 = *(_QWORD *)(a1 + 280);
    if (v7 >= *(unsigned int *)(v23 + 416) || (v24 = *(llvm::LiveInterval **)(*(_QWORD *)(v23 + 408) + 8 * v7)) == 0)
    {
      v24 = (llvm::LiveInterval *)sub_1C4851220(v23, a2);
      v30 = *(_QWORD *)(v23 + 304);
      v31 = *(_QWORD *)(v23 + 248);
      v32 = *(_QWORD *)(v31 + 40);
      *(_QWORD *)v30 = v31;
      *(_QWORD *)(v30 + 8) = v32;
      *(_OWORD *)(v30 + 16) = *(_OWORD *)(v23 + 288);
      *(_QWORD *)(v30 + 32) = v23 + 312;
      llvm::LiveRangeCalc::resetLiveOutMap((llvm::LiveRangeCalc *)v30);
      *(_DWORD *)(v30 + 184) = 0;
      v33 = *(_QWORD *)(v23 + 256);
      v20 = *(_BYTE *)(v33 + 16) == 0;
      v34 = *(unsigned __int8 *)((*(_QWORD *)(*(_QWORD *)(v33 + 24) + 16 * (*((_DWORD *)v24 + 28) & 0x7FFFFFFF)) & 0xFFFFFFFFFFFFFFF8)
                               + 34);
      v36 = !v20 && v34 != 0;
      llvm::LiveIntervalCalc::calculate(*(llvm::LiveIntervalCalc **)(v23 + 304), v24, v36);
      result = llvm::LiveIntervals::computeDeadValues(v23, (uint64_t)v24, 0);
    }
    *((_DWORD *)v24 + 29) = 2139095040;
  }
  return result;
}

_QWORD *sub_1C558E9AC(_QWORD *a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  int v7;
  uint64_t v8;
  unint64_t v9;
  unint64_t v10;

  v5 = (uint64_t)(a1 + 2);
  *a1 = a1 + 2;
  a1[1] = 0x400000000;
  v6 = *a3;
  v7 = *((_DWORD *)a3 + 2);
  if (a2 < 5)
  {
    if (a2)
    {
      v10 = a2;
      do
      {
        *(_QWORD *)v5 = v6;
        *(_DWORD *)(v5 + 8) = v7;
        v5 += 12;
        --v10;
      }
      while (v10);
    }
  }
  else
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)a1, v5, a2, 12);
    v8 = *a1;
    v9 = a2;
    do
    {
      *(_QWORD *)v8 = v6;
      *(_DWORD *)(v8 + 8) = v7;
      v8 += 12;
      --v9;
    }
    while (v9);
  }
  *((_DWORD *)a1 + 2) = a2;
  return a1;
}

_DWORD *sub_1C558EA4C(uint64_t a1, int a2)
{
  uint64_t v3;
  int *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _DWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(int **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(8 * v8, (std::align_val_t)4uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C558EB04(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 8 * v10;
    do
    {
      *result = -1;
      result += 2;
      v11 -= 8;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C558EB04(uint64_t result, int *a2, int *a3)
{
  _DWORD *v3;
  uint64_t v4;
  uint64_t v5;
  _DWORD *v6;
  int v7;
  int v8;
  unsigned int v9;
  _DWORD *v10;
  int v11;
  _DWORD *v12;
  int v13;
  BOOL v14;
  unsigned int v15;

  *(_QWORD *)(result + 8) = 0;
  v3 = *(_DWORD **)result;
  v4 = *(unsigned int *)(result + 16);
  if ((_DWORD)v4)
  {
    v5 = 8 * v4;
    v6 = *(_DWORD **)result;
    do
    {
      *v6 = -1;
      v6 += 2;
      v5 -= 8;
    }
    while (v5);
  }
  for (; a2 != a3; a2 += 2)
  {
    v7 = *a2;
    if (*a2 <= 0xFFFFFFFD)
    {
      v8 = *(_DWORD *)(result + 16) - 1;
      v9 = v8 & (37 * v7);
      v10 = &v3[2 * v9];
      v11 = *v10;
      if (v7 != *v10)
      {
        v12 = 0;
        v13 = 1;
        while (v11 != -1)
        {
          if (v12)
            v14 = 0;
          else
            v14 = v11 == -2;
          if (v14)
            v12 = v10;
          v15 = v9 + v13++;
          v9 = v15 & v8;
          v10 = &v3[2 * (v15 & v8)];
          v11 = *v10;
          if (v7 == *v10)
            goto LABEL_11;
        }
        if (v12)
          v10 = v12;
      }
LABEL_11:
      *v10 = v7;
      *((_BYTE *)v10 + 4) = *((_BYTE *)a2 + 4);
      ++*(_DWORD *)(result + 8);
    }
  }
  return result;
}

uint64_t sub_1C558EBD8()
{
  int v1;
  char v2;
  int *v3;
  __n128 v4;

  v4.n128_u64[0] = (unint64_t)"Disable the GPUSampleSink pass";
  v4.n128_u64[1] = 30;
  LOBYTE(v1) = 0;
  v3 = &v1;
  sub_1C614D990((uint64_t)&unk_1ED806380, "disable-gpu-sample-sink", &v4, (_BYTE **)&v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED806380, &dword_1C475E000);
  v4.n128_u64[0] = (unint64_t)"Disable the GPUSampleSink unspillable register budgeting";
  v4.n128_u64[1] = 56;
  v2 = 0;
  v3 = (int *)&v2;
  v1 = 1;
  sub_1C614FDB4((llvm::cl::Option *)&unk_1ED806440, "disable-gpu-sample-sink-unspill-budgeting", &v4, (_BYTE **)&v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED806440, &dword_1C475E000);
}

uint64_t llvm::GPUTargetInstrInfo::mayReadQUADScope(llvm::GPUTargetInstrInfo *this, const llvm::MachineInstr *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 1) + 24))(*((_QWORD *)this + 1), **((unsigned __int16 **)a2 + 2));
}

uint64_t llvm::GPUTargetInstrInfo::mayReadSIMDScope(llvm::GPUTargetInstrInfo *this, const llvm::MachineInstr *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 1) + 32))(*((_QWORD *)this + 1), **((unsigned __int16 **)a2 + 2));
}

uint64_t llvm::GPUTargetInstrInfo::mayReadScopePredication(llvm::GPUTargetInstrInfo *this, const llvm::MachineInstr *a2)
{
  return (*(uint64_t (**)(_QWORD, _QWORD))(**((_QWORD **)this + 1) + 40))(*((_QWORD *)this + 1), **((unsigned __int16 **)a2 + 2));
}

uint64_t sub_1C558ED00(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "GPU Wait Placement";
  *(_QWORD *)(v2 + 8) = 18;
  *(_QWORD *)(v2 + 16) = "gpu-wait-placement";
  *(_QWORD *)(v2 + 24) = 18;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F3008;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C558ED8C;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

_QWORD *sub_1C558ED8C()
{
  uint64_t v0;
  _QWORD *result;

  v0 = operator new();
  result = (_QWORD *)sub_1C4776848(v0, (uint64_t)&unk_1EF8F3008);
  *result = &off_1E816F958;
  result[31] = 0;
  return result;
}

void sub_1C558EDD0(llvm::Pass *a1)
{
  _QWORD *v1;
  _QWORD *v2;
  _QWORD *v3;
  llvm::Pass *v4;
  llvm::Pass *v5;
  llvm::Pass *v6;

  *(_QWORD *)a1 = &unk_1E8144BE8;
  v1 = (_QWORD *)*((_QWORD *)a1 + 22);
  if (v1 != (_QWORD *)((char *)a1 + 192))
  {
    v4 = a1;
    free(v1);
    a1 = v4;
  }
  v2 = (_QWORD *)*((_QWORD *)a1 + 13);
  if (v2 != (_QWORD *)((char *)a1 + 120))
  {
    v5 = a1;
    free(v2);
    a1 = v5;
  }
  v3 = (_QWORD *)*((_QWORD *)a1 + 4);
  if (v3 == (_QWORD *)((char *)a1 + 48))
  {
    llvm::Pass::~Pass(a1);
  }
  else
  {
    v6 = a1;
    free(v3);
    llvm::Pass::~Pass(v6);
  }
}

void sub_1C558EE64(llvm::Pass *this)
{
  char *v2;
  char *v3;
  char *v4;

  *(_QWORD *)this = &unk_1E8144BE8;
  v2 = (char *)*((_QWORD *)this + 22);
  if (v2 != (char *)this + 192)
    free(v2);
  v3 = (char *)*((_QWORD *)this + 13);
  if (v3 != (char *)this + 120)
    free(v3);
  v4 = (char *)*((_QWORD *)this + 4);
  if (v4 != (char *)this + 48)
    free(v4);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C558EEF0()
{
  return "GPU wait placement pass";
}

void sub_1C558EF00(llvm::MachineFunctionPass *a1, llvm::AnalysisUsage *a2)
{
  llvm::MachineFunctionPass::getAnalysisUsage(a1, a2);
  llvm::AnalysisUsage::setPreservesCFG(a2);
}

BOOL sub_1C558EF24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *v7;
  uint64_t v8;
  unsigned int v9;
  void *v10;
  unsigned int v11;
  void *v12;
  uint64_t i;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  unsigned int v17;
  _QWORD *v18;
  char *v19;
  unint64_t v20;
  uint64_t v21;
  unint64_t v22;
  unint64_t v23;
  unint64_t j;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  int *v30;
  int *v31;
  uint64_t v32;
  int *v33;
  int *v34;
  unsigned __int16 *v35;
  int v36;
  uint64_t v39;
  unsigned int v40;
  __int16 v41;
  unint64_t v42;
  char v43;
  uint64_t v44;
  unsigned int v46;
  uint64_t v47;
  char *v48;
  uint64_t v49;
  unint64_t v50;
  _DWORD *v51;
  unsigned int v52;
  uint64_t v53;
  char *v54;
  uint64_t v55;
  unint64_t v57;
  unint64_t v58;
  unint64_t v59;
  uint64_t v60;
  int *v61;
  uint64_t v62;
  int *v63;
  int v64;
  int v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unsigned int v69;
  uint64_t v70;
  _QWORD *v71;
  unint64_t v72;
  _WORD *v73;
  unsigned __int16 v74;
  int v75;
  unsigned int v76;
  int v77;
  BOOL v78;
  unint64_t v79;
  uint64_t v80;
  _DWORD *v81;
  uint64_t v82;
  _DWORD *v83;
  _QWORD *v84;
  unsigned int v85;
  uint64_t v86;
  _DWORD *v87;
  unsigned int v88;
  BOOL v89;
  uint64_t v90;
  char *v91;
  int v92;
  uint64_t v93;
  char *v94;
  uint64_t v95;
  unint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  unint64_t v100;
  uint64_t v101;
  unsigned int v102;
  uint64_t v103;
  _QWORD *v104;
  unint64_t v105;
  _WORD *v106;
  unsigned __int16 v107;
  uint64_t *v108;
  unsigned int v109;
  uint64_t v110;
  void **v112;
  _QWORD *v113;
  int v114;
  uint64_t v115;
  int v116;
  uint64_t v117;
  __int16 v118;
  uint64_t v119;
  uint64_t v120;
  int v121;
  unint64_t v122;
  unint64_t v123;
  uint64_t v124;
  unsigned int v125;
  uint64_t v126;
  _QWORD *v127;
  unint64_t v128;
  _WORD *v129;
  unsigned __int16 v130;
  int v131;
  unsigned int v132;
  unsigned int v133;
  uint64_t v134;
  uint64_t v135;
  int v136;
  unint64_t v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  int v141;
  unint64_t v142;
  unint64_t v143;
  uint64_t v144;
  unsigned int v145;
  uint64_t v146;
  _QWORD *v147;
  unint64_t v148;
  _WORD *v149;
  unsigned __int16 v150;
  unsigned int v151;
  unsigned int v152;
  unsigned int v153;
  uint64_t v154;
  uint64_t v155;
  _QWORD *v156;
  unsigned int v157;
  int v158;
  _DWORD *v159;
  uint64_t v160;
  unint64_t v161;
  unint64_t v162;
  unint64_t v163;
  unint64_t v164;
  uint64_t v165;
  unint64_t v166;
  uint64_t v167;
  int v168;
  uint64_t v169;
  unsigned int v170;
  int v171;
  unsigned int v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  __int128 v176;
  void *v177;
  void **v178;
  unint64_t v179;
  uint64_t v180;
  _QWORD *v181;
  _QWORD *v182;
  _QWORD *v183;
  uint64_t v184;
  _QWORD *v185;
  uint64_t v186;
  uint64_t v187;
  char *v188;
  char *v189;
  uint64_t v190;
  unsigned int v191;
  int v192;
  unsigned int v193;
  _OWORD *v194;
  _OWORD *v195;
  int v196;
  int v197;
  unsigned int *v198;
  uint64_t v199;
  uint64_t v200;
  void **v201;
  unsigned int v202;
  unsigned int v203;
  unsigned int v204;
  char *v205;
  unsigned int v206;
  char *v207;
  void **v208;
  char *v209;
  __int128 v210;
  unsigned int v212;
  _DWORD *v213;
  unint64_t v214;
  uint64_t v215;
  uint64_t v216;
  unsigned int *v217;
  unsigned int *v218;
  unsigned int v219;
  uint64_t v220;
  _QWORD *v221;
  unint64_t v222;
  _WORD *v223;
  unsigned __int16 v224;
  int v225;
  unsigned int v226;
  int v227;
  unsigned int v228;
  _OWORD *v229;
  _OWORD *v230;
  int v231;
  int v232;
  uint64_t v233;
  uint64_t *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  void *v239;
  unsigned int v240;
  uint64_t v241;
  char *v242;
  unint64_t v243;
  _QWORD *v244;
  uint64_t v245;
  uint64_t v246;
  _QWORD *v247;
  uint64_t v248;
  int v249;
  char *v250;
  int v251;
  uint64_t v252;
  int *v253;
  int v254;
  unsigned int v255;
  unsigned int v256;
  unsigned int v257;
  unsigned int v258;
  unsigned int v259;
  unsigned int v260;
  uint64_t *v261;
  uint64_t *v262;
  _DWORD *v263;
  unsigned int k;
  unsigned int v265;
  char v266;
  unint64_t v267;
  char v268;
  unint64_t v269;
  unsigned int v270;
  unsigned int v271;
  _DWORD *v272;
  unsigned int v273;
  uint64_t v274;
  unsigned int v275;
  unint64_t v276;
  uint64_t v277;
  unsigned int v278;
  char v279;
  unint64_t v280;
  unsigned int v281;
  char v282;
  unint64_t v283;
  char v284;
  uint64_t v285;
  char v286;
  void *v287;
  char v288;
  uint64_t v289;
  unsigned int v290;
  unsigned int v291;
  _DWORD *v292;
  uint64_t v293;
  int v294;
  uint64_t v295;
  int *v296;
  int v297;
  int v298;
  int v299;
  int v300;
  int v301;
  _DWORD *v302;
  int v303;
  unsigned int v304;
  unint64_t v305;
  int v306;
  unsigned int v307;
  unsigned int v308;
  uint64_t v309;
  int v310;
  uint64_t v311;
  int *v312;
  int v313;
  int v314;
  __int16 v315;
  llvm::MachineInstr *v316;
  uint64_t v317;
  int v318;
  BOOL v319;
  int v320;
  unsigned int v321;
  BOOL v323;
  _BOOL4 v324;
  _DWORD *v328;
  unsigned int v329;
  char v330;
  unint64_t v331;
  BOOL v332;
  unsigned int v333;
  unsigned int v334;
  int v335;
  int v336;
  char v337;
  uint64_t v338;
  char v339;
  void *v340;
  _QWORD *v341;
  unint64_t v342;
  int v343;
  unsigned __int8 *v344;
  unsigned __int8 *v345;
  _QWORD *v346;
  _QWORD *v347;
  unint64_t v348;
  int v350;
  unsigned __int16 *v351;
  int v352;
  BOOL v353;
  BOOL v354;
  unsigned int v356;
  _QWORD *v358;
  char *v360;
  uint64_t v361;
  char *v362;
  unsigned int *v364;
  void **v365;
  _QWORD *v366;
  unsigned int v367;
  unsigned int v368;
  unsigned int *v369;
  unsigned int *v370;
  void *v371;
  unsigned int v372;
  unsigned int v373;
  int64_t v374;
  uint64_t v375;
  _QWORD *v376;
  char *v377;
  int v378;
  uint64_t v379;
  char v380;
  uint64_t v381;
  int v382;
  uint64_t v383;
  uint64_t v384;
  uint64_t v385;
  uint64_t *v386;
  unint64_t v387;
  uint64_t v388;
  int *v389;
  unint64_t v390;
  int v391;
  unsigned int v392;
  llvm::MachineInstr *v393;
  _DWORD *v394;
  uint64_t v395;
  unint64_t v396;
  uint64_t v397;
  unsigned int v398;
  unsigned int v399;
  int v400;
  __int16 v401;
  uint64_t v402[2];
  unsigned int v403;
  __int16 v404;
  int v405;
  unsigned int v406;
  _QWORD v407[2];
  int v408;
  unint64_t v409;
  unint64_t v410;
  int v411;
  uint64_t v412;
  void *v413;
  __int128 v414;
  _BYTE v415[16];
  uint64_t v416;
  uint64_t v417;
  uint64_t v418;
  uint64_t v419;
  void *v420;
  uint64_t v421;
  _BYTE v422[64];
  _QWORD **v423;
  _QWORD *v424;
  uint64_t v425;
  void *v426;
  uint64_t v427;
  _BYTE v428[256];
  _QWORD v429[65];
  void *v430;
  uint64_t v431;
  _BYTE v432[4608];
  void *v433;
  uint64_t v434;
  _BYTE v435[128];
  void *v436;
  unsigned int v437;
  void *v438;
  uint64_t v439;
  _BYTE v440[192];
  void *v441;
  unsigned int v442;
  unint64_t v443;
  void *v444;
  __int128 v445;
  _BYTE v446[120];
  void *v447[4];
  void *v448;
  uint64_t v449;
  _BYTE v450[32];
  _QWORD **v451;
  _QWORD *v452;
  uint64_t v453;
  _QWORD *v454;
  _QWORD *v455;
  uint64_t v456;
  uint64_t v457;

  v4 = MEMORY[0x1E0C80A78](a1, a2, a3, a4);
  v6 = v5;
  v7 = (uint64_t *)v4;
  v457 = *MEMORY[0x1E0C80C00];
  *(_QWORD *)(v4 + 256) = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v5 + 16) + 104))(*(_QWORD *)(v5 + 16));
  v375 = v6;
  v8 = (*(uint64_t (**)(_QWORD))(**(_QWORD **)(v6 + 16) + 176))(*(_QWORD *)(v6 + 16));
  v7[33] = v8;
  v438 = v440;
  v439 = 0x800000000;
  v441 = 0;
  v442 = 0;
  v443 = 0xFFFFFFFFLL;
  v433 = v435;
  v436 = 0;
  v437 = 0;
  v434 = 0x800000000;
  v9 = *(_DWORD *)(v8 + 44);
  if (v9)
  {
    v10 = malloc_type_calloc(*(unsigned int *)(v8 + 44), 2uLL, 0x6D9A4F0CuLL);
    if (!v10)
      goto LABEL_794;
    v436 = v10;
    v437 = v9;
    v9 = *(_DWORD *)(v7[33] + 44);
    v11 = v442;
  }
  else
  {
    v11 = 0;
  }
  LODWORD(v439) = 0;
  v443 = 0xFFFFFFFFLL;
  if (v11 < v9 || v11 >> 2 > v9)
  {
    free(v441);
    v12 = malloc_type_calloc(v9, 2uLL, 0x6D9A4F0CuLL);
    if (!v12 && (v9 || (v12 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
LABEL_794:
      llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
    v441 = v12;
    v442 = v9;
  }
  v429[0] = 1;
  for (i = 1; i != 65; i += 2)
    v429[i] = -4096;
  v430 = v432;
  v431 = 0x2000000000;
  v426 = v428;
  v427 = 0x2000000000;
  v411 = 0;
  v14 = (_QWORD *)(v375 + 320);
  v15 = *(_QWORD **)(v375 + 328);
  if (v15 == (_QWORD *)(v375 + 320))
  {
    v16 = (_QWORD *)(v375 + 320);
  }
  else
  {
    do
    {
      (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v7[31] + 96))(v7[31], v15);
      v15 = (_QWORD *)v15[1];
    }
    while (v15 != v14);
    v16 = *(_QWORD **)(v375 + 328);
  }
  v409 = 0x8000000000000001;
  v410 = 0x8000000000000001;
  v420 = v422;
  v421 = 0x1000000000;
  v424 = 0;
  v425 = 0;
  v423 = &v424;
  v407[0] = 0;
  v407[1] = 0;
  v408 = 0;
  v406 = 0;
  if (v16 == v14)
  {
    v243 = 0x8000000000000001;
    goto LABEL_453;
  }
  v380 = 0;
  v378 = 0;
  do
  {
    v17 = v406;
    v447[0] = v16;
    v18 = v16;
    *((_DWORD *)sub_1C49D78CC((uint64_t)v407, (uint64_t *)v447) + 2) = v17;
    v19 = (char *)(v18 + 6);
    v376 = v18;
    v377 = (char *)(v18 + 6);
    v20 = v18[7];
    if ((_QWORD *)v20 != v18 + 6)
    {
      do
      {
        v35 = *(unsigned __int16 **)(v20 + 16);
        v36 = *v35;
        if ((v36 - 9) <= 0x3C && ((1 << (v36 - 9)) & 0x1000000000000605) != 0
          || v36 == 0)
        {
          goto LABEL_433;
        }
        v39 = *((_QWORD *)v35 + 1);
        if ((v39 & 0x10) != 0)
          goto LABEL_433;
        v381 = v20;
        if (!v411)
          goto LABEL_59;
        v40 = v406;
        v41 = *(_WORD *)(v20 + 44);
        if ((v41 & 0xC) == 0 || (v41 & 4) != 0)
        {
          if ((v39 & 0x400) == 0)
            goto LABEL_59;
        }
        else
        {
          v42 = v20;
          if ((v39 & 0x400) == 0)
          {
            while ((*(_WORD *)(v42 + 44) & 8) != 0)
            {
              v42 = *(_QWORD *)(v42 + 8);
              if ((*(_BYTE *)(*(_QWORD *)(v42 + 16) + 9) & 4) != 0)
                goto LABEL_79;
            }
            goto LABEL_59;
          }
        }
LABEL_79:
        if (!(*(unsigned int (**)(uint64_t, unint64_t))(*(_QWORD *)v7[31] + 232))(v7[31], v20))
          goto LABEL_83;
        v447[0] = 0;
        v51 = (_DWORD *)(*(uint64_t (**)(uint64_t, unint64_t))(*(_QWORD *)v7[31] + 240))(v7[31], v20);
        v447[0] = v51;
        if (v51 && v51[6] <= *(_DWORD *)(*(_QWORD *)(v20 + 24) + 24))
        {
          v84 = sub_1C49D78CC((uint64_t)v407, (uint64_t *)v447);
          v43 = v431;
          if ((_DWORD)v431)
          {
            v85 = *((_DWORD *)v84 + 2);
            v86 = 144 * v431;
            v87 = (char *)v430 + 20;
            do
            {
              if (*v87 == -1)
              {
                v88 = *(v87 - 1);
                v89 = v88 < v85 || v88 >= v40;
                if (!v89)
                {
                  sub_1C5591FB8((uint64_t)(v87 - 3), (uint64_t)v429, v40, &v411, 0);
                  sub_1C55920B4(v7[31], v7[33], *(_QWORD *)(v87 - 5), (uint64_t *)&v433);
                }
              }
              v87 += 36;
              v86 -= 144;
            }
            while (v86);
LABEL_59:
            v43 = 0;
          }
        }
        else
        {
          v43 = 1;
        }
        if (v378 || (v43 & 1) != 0)
        {
LABEL_83:
          if ((_DWORD)v431)
          {
            v52 = v406;
            v53 = 144 * v431;
            v54 = (char *)v430 + 8;
            do
            {
              sub_1C5591FB8((uint64_t)v54, (uint64_t)v429, v52, &v411, 0);
              v54 += 144;
              v53 -= 144;
            }
            while (v53);
          }
          LODWORD(v434) = 0;
          v55 = *(_QWORD *)(*(_QWORD *)(v20 + 16) + 8);
          if ((*(_WORD *)(v20 + 44) & 0xC) != 0 && (*(_WORD *)(v20 + 44) & 4) == 0)
          {
            v57 = v20;
            if ((v55 & 0x400) == 0)
            {
              while ((*(_WORD *)(v57 + 44) & 8) != 0)
              {
                v57 = *(_QWORD *)(v57 + 8);
                if ((*(_BYTE *)(*(_QWORD *)(v57 + 16) + 9) & 4) != 0)
                  goto LABEL_91;
              }
              if ((v55 & 0x20) == 0)
              {
                v58 = v20;
                do
                {
                  if ((*(_WORD *)(v58 + 44) & 8) == 0)
                    goto LABEL_318;
                  v58 = *(_QWORD *)(v58 + 8);
                }
                while ((*(_BYTE *)(*(_QWORD *)(v58 + 16) + 8) & 0x20) == 0);
              }
            }
          }
          else if ((v55 & 0x420) == 0)
          {
            goto LABEL_318;
          }
LABEL_91:
          sub_1C48302EC((uint64_t)&v420, &v406);
          goto LABEL_318;
        }
        v44 = *(_QWORD *)(*(_QWORD *)(v20 + 16) + 8);
        if ((*(_WORD *)(v20 + 44) & 0xC) != 0 && (*(_WORD *)(v20 + 44) & 4) == 0)
        {
          v50 = v20;
          if ((v44 & 0x20) != 0)
            goto LABEL_83;
          while ((*(_WORD *)(v50 + 44) & 8) != 0)
          {
            v50 = *(_QWORD *)(v50 + 8);
            if ((*(_BYTE *)(*(_QWORD *)(v50 + 16) + 8) & 0x20) != 0)
              goto LABEL_83;
          }
        }
        else if ((v44 & 0x20) != 0)
        {
          goto LABEL_83;
        }
        if (!v411)
          goto LABEL_318;
        v46 = v406;
        if ((*(unsigned int (**)(uint64_t, unint64_t))(*(_QWORD *)v7[31] + 24))(v7[31], v20))
        {
          if ((_DWORD)v431)
          {
            v47 = 144 * v431;
            v48 = (char *)v430 + 8;
            do
            {
              v49 = *((_QWORD *)v48 - 1);
              if ((*(unsigned int (**)(uint64_t, uint64_t, unint64_t))(*(_QWORD *)v7[31] + 32))(v7[31], v49, v20))
              {
                sub_1C5591FB8((uint64_t)v48, (uint64_t)v429, v46, &v411, 0);
                sub_1C55920B4(v7[31], v7[33], v49, (uint64_t *)&v433);
              }
              v48 += 144;
              v47 -= 144;
            }
            while (v47);
          }
        }
        else if ((*(unsigned int (**)(uint64_t, unint64_t))(*(_QWORD *)v7[31] + 40))(v7[31], v20))
        {
          v59 = v20;
          if ((*(_WORD *)(v20 + 44) & 4) != 0)
          {
            v59 = v20;
            do
              v59 = *(_QWORD *)v59 & 0xFFFFFFFFFFFFFFF8;
            while ((*(_WORD *)(v59 + 44) & 4) != 0);
          }
          v60 = *(_QWORD *)(v20 + 24) + 48;
          v61 = *(int **)(v59 + 32);
          v62 = *(unsigned int *)(v59 + 40);
          v63 = &v61[8 * v62];
          if (!(_DWORD)v62)
          {
            v96 = *(_QWORD *)(v59 + 8);
            if (v96 == v60)
            {
              v59 = *(_QWORD *)(v20 + 24) + 48;
            }
            else
            {
              v59 = *(_QWORD *)(v20 + 24) + 48;
              if ((*(_WORD *)(v96 + 44) & 4) != 0)
              {
                while (1)
                {
                  v100 = v96;
                  v101 = *(unsigned int *)(v96 + 40);
                  if ((_DWORD)v101)
                    break;
                  v96 = *(_QWORD *)(v96 + 8);
                  if (v96 == v60 || (*(_WORD *)(v96 + 44) & 4) == 0)
                  {
                    v59 = *(_QWORD *)(v20 + 24) + 48;
                    goto LABEL_190;
                  }
                }
                v59 = v96;
LABEL_190:
                v61 = *(int **)(v100 + 32);
                v63 = &v61[8 * v101];
              }
            }
          }
          if (v61 == v63)
            goto LABEL_159;
          LOBYTE(v64) = 0;
          while (2)
          {
            if ((v64 & 1) != 0)
              goto LABEL_155;
            v65 = *v61;
            if (*v61 || !v61[1])
              goto LABEL_108;
            if ((v65 & 0x2000000) == 0)
              goto LABEL_120;
            if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v7[31] + 80))(v7[31]))
              goto LABEL_108;
            v65 = *v61;
LABEL_120:
            if ((v65 & 0x1000000) != 0)
            {
LABEL_108:
              v64 = 0;
            }
            else
            {
              v69 = v61[1];
              v70 = v7[33];
              if (v70)
                v71 = (_QWORD *)(v70 + 8);
              else
                v71 = 0;
              v72 = *(unsigned int *)(*v71 + 24 * v69 + 16);
              v73 = (_WORD *)(v71[6] + ((v72 >> 3) & 0x1FFFFFFE));
              v74 = *v73 + (v72 & 0xF) * v69;
              while (1)
              {
                v75 = v74;
                v76 = *((unsigned __int16 *)v436 + v74);
                if (v434 > v76)
                {
                  while (*((_DWORD *)v433 + 4 * v76) != v75)
                  {
                    v76 += 0x10000;
                    if (v76 >= v434)
                      goto LABEL_130;
                  }
                  if ((_DWORD)v434 != v76)
                    break;
                }
LABEL_130:
                v77 = (unsigned __int16)v73[1];
                ++v73;
                v74 = v77 + v75;
                if (!v77)
                  goto LABEL_108;
              }
              v64 = 1;
            }
            v61 += 8;
            if (v61 == v63)
            {
              v66 = *(_QWORD *)(v59 + 8);
              if (v66 == v60)
                goto LABEL_154;
              v61 = v63;
              v59 = v60;
              if ((*(_WORD *)(v66 + 44) & 4) != 0)
              {
                while (1)
                {
                  v67 = v66;
                  v68 = *(unsigned int *)(v66 + 40);
                  if ((_DWORD)v68)
                    break;
                  v66 = *(_QWORD *)(v66 + 8);
                  if (v66 == v60 || (*(_WORD *)(v66 + 44) & 4) == 0)
                  {
                    v59 = v60;
                    goto LABEL_133;
                  }
                }
                v59 = v66;
LABEL_133:
                v61 = *(int **)(v67 + 32);
                v63 = &v61[8 * v68];
              }
            }
            if (v61 == v63)
            {
LABEL_154:
              if (v64)
              {
LABEL_155:
                if ((_DWORD)v431)
                {
                  v90 = 144 * v431;
                  v91 = (char *)v430 + 8;
                  do
                  {
                    sub_1C5591FB8((uint64_t)v91, (uint64_t)v429, v46, &v411, 0);
                    v91 += 144;
                    v90 -= 144;
                  }
                  while (v90);
                }
LABEL_167:
                LODWORD(v434) = 0;
                goto LABEL_318;
              }
LABEL_159:
              (*(void (**)(uint64_t, unint64_t, void **))(*(_QWORD *)v7[31] + 112))(v7[31], v20, v447);
              if ((*(unsigned int (**)(uint64_t, unint64_t))(*(_QWORD *)v7[31] + 184))(v7[31], v20))
              {
                if (LOBYTE(v447[0]) == 1)
                  v92 = 1;
                else
                  v92 = 2 * (LOBYTE(v447[0]) == 2);
              }
              else
              {
                v92 = 0;
              }
              if ((_DWORD)v431)
              {
                v93 = 144 * v431;
                v94 = (char *)v430 + 8;
                do
                {
                  sub_1C5591FB8((uint64_t)v94, (uint64_t)v429, v46, &v411, v92);
                  v94 += 144;
                  v93 -= 144;
                }
                while (v93);
              }
              goto LABEL_167;
            }
            continue;
          }
        }
        if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v7[31] + 120))(v7[31]))
        {
          if ((*(unsigned int (**)(uint64_t, unint64_t))(*(_QWORD *)v7[31] + 104))(v7[31], v20))
          {
            (*(void (**)(uint64_t, unint64_t, void **))(*(_QWORD *)v7[31] + 112))(v7[31], v20, v447);
            v78 = BYTE3(v447[0]) != 0;
          }
          else
          {
            v78 = 0;
          }
          v79 = v20;
          if ((*(_WORD *)(v20 + 44) & 4) != 0)
          {
            v79 = v20;
            do
              v79 = *(_QWORD *)v79 & 0xFFFFFFFFFFFFFFF8;
            while ((*(_WORD *)(v79 + 44) & 4) != 0);
          }
          v80 = *(_QWORD *)(v20 + 24) + 48;
          v81 = *(_DWORD **)(v79 + 32);
          v82 = *(unsigned int *)(v79 + 40);
          v83 = &v81[8 * v82];
          v388 = *(_QWORD *)(v381 + 24) + 48;
          if ((_DWORD)v82)
          {
            v395 = v79;
            goto LABEL_194;
          }
          v95 = *(_QWORD *)(v79 + 8);
          if (v95 == v80)
          {
            v395 = *(_QWORD *)(v381 + 24) + 48;
            goto LABEL_194;
          }
          v395 = *(_QWORD *)(v381 + 24) + 48;
          if ((*(_WORD *)(v95 + 44) & 4) != 0)
          {
            while (1)
            {
              v97 = v95;
              v98 = *(unsigned int *)(v95 + 40);
              if ((_DWORD)v98)
                goto LABEL_192;
              v95 = *(_QWORD *)(v95 + 8);
              if (v95 == v388)
                break;
              v99 = *(_QWORD *)(v381 + 24) + 48;
              if ((*(_WORD *)(v95 + 44) & 4) == 0)
              {
LABEL_191:
                v395 = v99;
                goto LABEL_193;
              }
            }
            v395 = *(_QWORD *)(v381 + 24) + 48;
LABEL_193:
            v81 = *(_DWORD **)(v97 + 32);
            v83 = &v81[8 * v98];
            goto LABEL_194;
          }
          while (1)
          {
LABEL_194:
            if (v81 == v83)
              goto LABEL_224;
            if ((*v81 & 0x10000FF) == 0x1000000)
            {
              v102 = v81[1];
              if (v102)
              {
                if ((*v81 & 0x2000000) == 0)
                  goto LABEL_200;
                if ((*(unsigned int (**)(uint64_t))(*(_QWORD *)v7[31] + 80))(v7[31]))
                  break;
              }
            }
LABEL_217:
            v81 += 8;
            if (v81 == v83)
            {
              v117 = *(_QWORD *)(v395 + 8);
              v99 = v388;
              if (v117 == v388)
                goto LABEL_224;
              v81 = v83;
              v395 = v388;
              if ((*(_WORD *)(v117 + 44) & 4) != 0)
              {
                while (1)
                {
                  v97 = v117;
                  v98 = *(unsigned int *)(v117 + 40);
                  if ((_DWORD)v98)
                    break;
                  v117 = *(_QWORD *)(v117 + 8);
                  if (v117 == v388 || (*(_WORD *)(v117 + 44) & 4) == 0)
                    goto LABEL_191;
                }
LABEL_192:
                v395 = v97;
                goto LABEL_193;
              }
            }
          }
          v102 = v81[1];
LABEL_200:
          v103 = v7[33];
          if (v103)
            v104 = (_QWORD *)(v103 + 8);
          else
            v104 = 0;
          v105 = *(unsigned int *)(*v104 + 24 * v102 + 16);
          v106 = (_WORD *)(v104[6] + ((v105 >> 3) & 0x1FFFFFFE));
          v107 = *v106 + (v105 & 0xF) * v102;
          while (1)
          {
            v108 = sub_1C559224C((uint64_t *)&v438, v107);
            v110 = v109;
            if (&v438 != (void **)v108 || v109 != 0xFFFFFFFFLL)
              break;
LABEL_216:
            v116 = (unsigned __int16)v106[1];
            ++v106;
            v107 += v116;
            if (!v116)
              goto LABEL_217;
          }
          v112 = (void **)v108;
          v113 = (_QWORD *)*v108;
          while (1)
          {
            if (v78)
            {
              v114 = (*(uint64_t (**)(uint64_t, _QWORD))(*(_QWORD *)v7[31] + 104))(v7[31], v113[3 * v110 + 1]);
              v113 = *v112;
              if (v114)
              {
                (*(void (**)(uint64_t, _QWORD, void **))(*(_QWORD *)v7[31] + 112))(v7[31], v113[3 * v110 + 1], v447);
                if (BYTE3(v447[0]))
                  goto LABEL_214;
                v113 = *v112;
              }
            }
            v115 = sub_1C5591D60((int *)v429, v113[3 * v110 + 1]);
            sub_1C5591FB8(v115 + 8, (uint64_t)v429, v46, &v411, 0);
LABEL_214:
            v113 = *v112;
            v110 = *((unsigned int *)*v112 + 6 * v110 + 5);
            if (&v438 == v112 && v110 == 0xFFFFFFFFLL)
              goto LABEL_216;
          }
        }
LABEL_224:
        v447[0] = &v447[2];
        v447[1] = (void *)0x1000000000;
        v452 = 0;
        v453 = 0;
        v451 = &v452;
        v22 = v381;
        v118 = *(_WORD *)(v381 + 44);
        if ((v118 & 4) != 0)
        {
          v22 = v381;
          do
            v22 = *(_QWORD *)v22 & 0xFFFFFFFFFFFFFFF8;
          while ((*(_WORD *)(v22 + 44) & 4) != 0);
        }
        v32 = *(_QWORD *)(v381 + 24) + 48;
        v30 = *(int **)(v22 + 32);
        v119 = *(unsigned int *)(v22 + 40);
        v31 = &v30[8 * v119];
        v383 = v32;
        if (!(_DWORD)v119)
        {
          v21 = *(_QWORD *)(v22 + 8);
          if (v21 == v32)
          {
            v22 = *(_QWORD *)(v381 + 24) + 48;
          }
          else
          {
            v22 = *(_QWORD *)(v381 + 24) + 48;
            if ((*(_WORD *)(v21 + 44) & 4) != 0)
            {
              while (1)
              {
                v25 = v21;
                v26 = *(unsigned int *)(v21 + 40);
                if ((_DWORD)v26)
                {
                  v27 = v21;
                  goto LABEL_41;
                }
                v21 = *(_QWORD *)(v21 + 8);
                if (v21 == v32)
                  break;
                v27 = *(_QWORD *)(v381 + 24) + 48;
                if ((*(_WORD *)(v21 + 44) & 4) == 0)
                  goto LABEL_41;
              }
              v27 = *(_QWORD *)(v381 + 24) + 48;
LABEL_41:
              v30 = *(int **)(v25 + 32);
              v31 = &v30[8 * v26];
              v32 = *(_QWORD *)(v381 + 24) + 48;
              v22 = v27;
            }
          }
        }
        if (v30 == v31)
        {
          v138 = v118 & 4;
          v137 = v381;
          goto LABEL_265;
        }
        v120 = 0;
        do
        {
          v121 = *v30;
          if (!*v30 && v30[1])
          {
            if ((v121 & 0x2000000) != 0)
            {
              if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v7[31] + 80))(v7[31]))
                goto LABEL_229;
              v121 = *v30;
            }
            if ((v121 & 0x1000000) == 0)
            {
              v125 = v30[1];
              v126 = v7[33];
              if (v126)
                v127 = (_QWORD *)(v126 + 8);
              else
                v127 = 0;
              v128 = *(unsigned int *)(*v127 + 24 * v125 + 16);
              v129 = (_WORD *)(v127[6] + ((v128 >> 3) & 0x1FFFFFFE));
              v130 = *v129 + (v128 & 0xF) * v125;
              v396 = v22;
              v389 = v31;
              do
              {
                v131 = v130;
                v132 = *((unsigned __int16 *)v436 + v130);
                if (v434 > v132)
                {
                  while (1)
                  {
                    v133 = v132;
                    if (*((_DWORD *)v433 + 4 * v132) == v130)
                      break;
                    v132 += 0x10000;
                    if (v133 + 0x10000 >= v434)
                      goto LABEL_258;
                  }
                  if ((_DWORD)v434 != v132)
                  {
                    v134 = *((_QWORD *)v433 + 2 * v132 + 1);
                    v135 = sub_1C5591D60((int *)v429, v134);
                    llvm::MachineInstr::findRegisterUseOperandIdx(v381, v30[1], 0, 0);
                    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7[31] + 136))(v7[31], v134, v381)&& (*(unsigned int (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7[31] + 152))(v7[31], v134, v381, v120))
                    {
                      v32 = v383;
                      v31 = v389;
                      if (((*v30 >> 26) & ~HIBYTE(*v30) & 1) != 0)
                      {
                        LODWORD(v444) = v131;
                        sub_1C5162A80(v135 + 40, (unsigned int *)&v444);
                        if (!*(_DWORD *)(v135 + 48) && !*(_QWORD *)(v135 + 136))
                          *(_DWORD *)(v135 + 24) = 2;
                      }
                      LODWORD(v444) = v131;
                      sub_1C48302EC((uint64_t)v447, (unsigned int *)&v444);
                      v22 = v396;
                    }
                    else
                    {
                      sub_1C5591FB8(v135 + 8, (uint64_t)v429, v46, &v411, 0);
                      sub_1C55920B4(v7[31], v7[33], v134, (uint64_t *)&v433);
                      v32 = v383;
                      v22 = v396;
                      v31 = v389;
                    }
                  }
                }
LABEL_258:
                v136 = (unsigned __int16)v129[1];
                ++v129;
                v130 = v136 + v131;
              }
              while (v136);
            }
          }
LABEL_229:
          v30 += 8;
          if (v30 == v31)
          {
            v122 = *(_QWORD *)(v22 + 8);
            if (v122 == v32)
              break;
            v30 = v31;
            v22 = v32;
            if ((*(_WORD *)(v122 + 44) & 4) != 0)
            {
              while (1)
              {
                v123 = v122;
                v124 = *(unsigned int *)(v122 + 40);
                if ((_DWORD)v124)
                  break;
                v122 = *(_QWORD *)(v122 + 8);
                if (v122 == v32 || (*(_WORD *)(v122 + 44) & 4) == 0)
                {
                  v22 = v32;
                  goto LABEL_261;
                }
              }
              v22 = v122;
LABEL_261:
              v30 = *(int **)(v123 + 32);
              v31 = &v30[8 * v124];
            }
          }
          v120 = (v120 + 1);
        }
        while (v30 != v31);
        v137 = v381;
        v138 = *(_WORD *)(v381 + 44) & 4;
LABEL_265:
        j = v137;
        if (v138)
        {
          j = v137;
          do
            j = *(_QWORD *)j & 0xFFFFFFFFFFFFFFF8;
          while ((*(_WORD *)(j + 44) & 4) != 0);
        }
        v139 = *(_QWORD *)(v137 + 24) + 48;
        v33 = *(int **)(j + 32);
        v140 = *(unsigned int *)(j + 40);
        v34 = &v33[8 * v140];
        if (!(_DWORD)v140)
        {
          v23 = *(_QWORD *)(j + 8);
          if (v23 == v139)
          {
            j = *(_QWORD *)(v137 + 24) + 48;
            goto LABEL_267;
          }
          j = *(_QWORD *)(v137 + 24) + 48;
          if ((*(_WORD *)(v23 + 44) & 4) != 0)
          {
            do
            {
              v28 = v23;
              v29 = *(unsigned int *)(v23 + 40);
              if ((_DWORD)v29)
                goto LABEL_42;
              v23 = *(_QWORD *)(v23 + 8);
            }
            while (v23 != v139 && (*(_WORD *)(v23 + 44) & 4) != 0);
            v23 = v139;
LABEL_42:
            v33 = *(int **)(v28 + 32);
            v34 = &v33[8 * v29];
            j = v23;
          }
        }
LABEL_267:
        while (v33 != v34)
        {
          v141 = *v33;
          if (!*v33 && v33[1])
          {
            if ((v141 & 0x2000000) != 0)
            {
              if (!(*(unsigned int (**)(uint64_t))(*(_QWORD *)v7[31] + 80))(v7[31]))
                goto LABEL_269;
              v141 = *v33;
            }
            if ((v141 & 0x1000000) != 0)
            {
              v145 = v33[1];
              v146 = v7[33];
              if (v146)
                v147 = (_QWORD *)(v146 + 8);
              else
                v147 = 0;
              v148 = *(unsigned int *)(*v147 + 24 * v145 + 16);
              v149 = (_WORD *)(v147[6] + ((v148 >> 3) & 0x1FFFFFFE));
              v150 = *v149 + (v148 & 0xF) * v145;
              v390 = j;
              do
              {
                v151 = v150;
                v152 = *((unsigned __int16 *)v436 + v150);
                if (v434 > v152)
                {
                  while (1)
                  {
                    v153 = v152;
                    if (*((_DWORD *)v433 + 4 * v152) == v150)
                      break;
                    v152 += 0x10000;
                    if (v153 + 0x10000 >= v434)
                      goto LABEL_304;
                  }
                  if ((_DWORD)v434 != v152)
                  {
                    v154 = *((_QWORD *)v433 + 2 * v152 + 1);
                    v384 = sub_1C5591D60((int *)v429, v154);
                    v397 = v384 + 8;
                    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7[31] + 136))(v7[31], v154, v381))
                    {
                      v155 = v154;
                      if (v453)
                      {
                        v156 = v452;
                        for (j = v390; v156; v156 = (_QWORD *)*v156)
                        {
                          v157 = *((_DWORD *)v156 + 7);
                          if (v157 <= v151)
                          {
                            if (v157 >= v151)
                              goto LABEL_304;
                            ++v156;
                          }
                        }
LABEL_312:
                        sub_1C5591FB8(v397, (uint64_t)v429, v46, &v411, 0);
                        sub_1C55920B4(v7[31], v7[33], v155, (uint64_t *)&v433);
                        break;
                      }
                      j = v390;
                      if (!LODWORD(v447[1]))
                        goto LABEL_312;
                      v159 = v447[0];
                      v160 = 4 * LODWORD(v447[1]);
                      while (*v159 != v151)
                      {
                        ++v159;
                        v160 -= 4;
                        if (!v160)
                          goto LABEL_312;
                      }
                      if (!v160)
                        goto LABEL_312;
                    }
                    else
                    {
                      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7[31] + 144))(v7[31], v154, v381))
                      {
                        LODWORD(v444) = v151;
                        sub_1C5162A80(v384 + 40, (unsigned int *)&v444);
                        if (!*(_DWORD *)(v384 + 48) && !*(_QWORD *)(v384 + 136))
                          *(_DWORD *)(v384 + 24) = 2;
                      }
                      else
                      {
                        sub_1C5591FB8(v397, (uint64_t)v429, v46, &v411, 0);
                        sub_1C55920B4(v7[31], v7[33], v154, (uint64_t *)&v433);
                      }
                      j = v390;
                    }
                  }
                }
LABEL_304:
                v158 = (unsigned __int16)v149[1];
                ++v149;
                v150 = v158 + v151;
              }
              while (v158);
            }
          }
LABEL_269:
          v33 += 8;
          if (v33 == v34)
          {
            v142 = *(_QWORD *)(j + 8);
            if (v142 == v139)
              break;
            v33 = v34;
            j = v139;
            if ((*(_WORD *)(v142 + 44) & 4) != 0)
            {
              while (1)
              {
                v143 = v142;
                v144 = *(unsigned int *)(v142 + 40);
                if ((_DWORD)v144)
                  break;
                v142 = *(_QWORD *)(v142 + 8);
                if (v142 == v139 || (*(_WORD *)(v142 + 44) & 4) == 0)
                {
                  j = v139;
                  goto LABEL_314;
                }
              }
              j = v142;
LABEL_314:
              v33 = *(int **)(v143 + 32);
              v34 = &v33[8 * v144];
            }
          }
        }
        sub_1C47655E8((uint64_t)&v451, v452);
        if (v447[0] != &v447[2])
          free(v447[0]);
        v20 = v381;
LABEL_318:
        if ((v410 & 1) != 0)
          v161 = v410 >> 58;
        else
          v161 = *(unsigned int *)(v410 + 64);
        v162 = v406 + 1;
        if (v161 <= v162)
        {
          v163 = v162 | (v162 >> 1) | ((v162 | (v162 >> 1)) >> 2);
          v164 = v163 | (v163 >> 4) | ((v163 | (v163 >> 4)) >> 8);
          v165 = ((v164 >> 16) | v164) + 1;
          sub_1C496F5AC(&v410, v165, 0);
          sub_1C496F5AC(&v409, v165, 0);
        }
        v166 = v20;
        if ((*(_WORD *)(v20 + 44) & 8) != 0)
        {
          v166 = v20;
          do
            v166 = *(_QWORD *)(v166 + 8);
          while ((*(_WORD *)(v166 + 44) & 8) != 0);
        }
        v167 = *(_QWORD *)(v166 + 8);
        if (v20 != v167)
        {
          v168 = 0;
          v378 = 0;
          v169 = v20;
          v379 = *(_QWORD *)(v166 + 8);
          while (1)
          {
            if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v7[31] + 168))(v7[31], v169))
            {
              v170 = v406 + 1;
              if ((v409 & 1) != 0)
                v409 = v409 & 0xFC00000000000000 | (2
                                                    * (((v409 >> 1) & ~(-1 << (v409 >> 58)) | (1 << v170)) & ~(-1 << (v409 >> 58)))) | 1;
              else
                *(_QWORD *)(*(_QWORD *)v409 + 8 * (v170 >> 6)) |= 1 << v170;
            }
            if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v7[31] + 48))(v7[31], v169))
            {
              v171 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7[31] + 224))(v7[31], v169);
              if ((v380 & 1) == 0)
              {
                if ((v410 & 1) != 0)
                  v410 = v410 & 0xFC00000000000000 | (2
                                                      * (((v410 >> 1) & ~(-1 << (v410 >> 58)) | (1 << v406)) & ~(-1 << (v410 >> 58)))) | 1;
                else
                  *(_QWORD *)(*(_QWORD *)v410 + 8 * (v406 >> 6)) |= 1 << v406;
              }
              if (((v168 | v171) & 1) != 0)
              {
                v168 = 1;
              }
              else
              {
                v172 = v406 + 1;
                v168 = 0;
                if ((v410 & 1) != 0)
                  v410 = v410 & 0xFC00000000000000 | (2
                                                      * (((v410 >> 1) & ~(-1 << (v410 >> 58)) | (1 << v172)) & ~(-1 << (v410 >> 58)))) | 1;
                else
                  *(_QWORD *)(*(_QWORD *)v410 + 8 * (v172 >> 6)) |= 1 << v172;
              }
            }
            if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v7[31] + 104))(v7[31], v169))
              break;
LABEL_422:
            v169 = *(_QWORD *)(v169 + 8);
            if (v169 == v167)
              goto LABEL_432;
          }
          v398 = v406;
          v402[0] = v169;
          v173 = v427;
          v391 = v168;
          if (v427 >= (unint64_t)HIDWORD(v427))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v426, (uint64_t)v428, v427 + 1, 8);
            v173 = v427;
          }
          *((_QWORD *)v426 + v173) = v169;
          LODWORD(v427) = v427 + 1;
          (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(_QWORD *)v7[31] + 112))(v7[31], v169, &v419);
          LODWORD(v447[0]) = v419;
          *(_DWORD *)((char *)v447 + 3) = *(_DWORD *)((char *)&v419 + 3);
          LODWORD(v447[1]) = v398;
          *(void **)((char *)&v447[1] + 4) = (void *)0xFFFFFFFFLL;
          BYTE4(v447[2]) = 0;
          LODWORD(v447[3]) = 0;
          v448 = v450;
          v449 = 0x1000000000;
          v455 = 0;
          v456 = 0;
          v454 = &v455;
          v174 = sub_1C55922BC((uint64_t)v429, v402);
          v175 = v174;
          v176 = *(_OWORD *)((char *)&v447[1] + 4);
          *(_OWORD *)v174 = *(_OWORD *)v447;
          *(_OWORD *)(v174 + 12) = v176;
          if ((void **)v174 != v447)
          {
            v177 = v448;
            if (v448 == v450)
            {
              v178 = (void **)(v174 + 32);
              v179 = v449;
              v180 = *(unsigned int *)(v174 + 40);
              if (v180 >= v449)
              {
                if ((_DWORD)v449)
                  memmove(*v178, v450, 4 * v449);
              }
              else
              {
                if (*(_DWORD *)(v174 + 44) < v449)
                {
                  *(_DWORD *)(v174 + 40) = 0;
                  llvm::SmallVectorBase<unsigned int>::grow_pod(v174 + 32, v174 + 48, v179, 4);
LABEL_350:
                  v180 = 0;
                }
                else
                {
                  if (!(_DWORD)v180)
                    goto LABEL_350;
                  memmove(*v178, v450, 4 * v180);
                }
                if (v180 != v449)
                  memcpy((char *)*v178 + 4 * v180, (char *)v448 + 4 * v180, 4 * v449 - 4 * v180);
              }
              *(_DWORD *)(v175 + 40) = v179;
            }
            else
            {
              v239 = *(void **)(v174 + 32);
              if (v239 != (void *)(v175 + 48))
              {
                free(v239);
                v177 = v448;
              }
              *(_QWORD *)(v175 + 32) = v177;
              *(_QWORD *)(v175 + 40) = v449;
              v448 = v450;
              HIDWORD(v449) = 0;
            }
            LODWORD(v449) = 0;
          }
          v182 = *(_QWORD **)(v175 + 120);
          v181 = (_QWORD *)(v175 + 120);
          sub_1C47655E8((uint64_t)(v181 - 1), v182);
          *(v181 - 1) = v454;
          v183 = v455;
          *v181 = v455;
          v184 = v456;
          v181[1] = v456;
          if (v184)
          {
            v185 = 0;
            v183[2] = v181;
            v454 = &v455;
            v455 = 0;
            v456 = 0;
          }
          else
          {
            *(v181 - 1) = v181;
            v185 = v455;
          }
          sub_1C47655E8((uint64_t)&v454, v185);
          if (v448 != v450)
            free(v448);
          ++v411;
          v447[0] = &v447[2];
          v447[1] = (void *)0x2000000000;
          v444 = (char *)&v445 + 8;
          *(_QWORD *)&v445 = 0x2000000000;
          (*(void (**)(uint64_t, unint64_t, uint64_t, void **, void **))(*(_QWORD *)v7[31] + 88))(v7[31], v20, v7[33], &v444, v447);
          v186 = sub_1C55922BC((uint64_t)v429, v402);
          v187 = v402[0];
          if ((_DWORD)v445)
          {
            v188 = (char *)v444;
            v189 = (char *)v444 + 4 * v445;
            do
            {
              v190 = *(unsigned int *)v188;
              v191 = *((unsigned __int16 *)v436 + v190);
              v192 = v434;
              if (v434 > v191)
              {
                while (1)
                {
                  v193 = v191;
                  if (*((_DWORD *)v433 + 4 * v191) == (_DWORD)v190)
                    break;
                  v191 += 0x10000;
                  if (v193 + 0x10000 >= v434)
                    goto LABEL_370;
                }
                if ((_DWORD)v434 != v191)
                {
                  v194 = (char *)v433 + 16 * v191;
                  v195 = (char *)v433 + 16 * v434 - 16;
                  if (v195 != v194)
                  {
                    *v194 = *v195;
                    v196 = v434;
                    *((_WORD *)v436 + *((unsigned int *)v433 + 4 * v434 - 4)) = ((_DWORD)v194 - (_DWORD)v433) >> 4;
                    v192 = v196;
                  }
                  LODWORD(v434) = v192 - 1;
                  LODWORD(v190) = *(_DWORD *)v188;
                }
              }
LABEL_370:
              LODWORD(v413) = v190;
              *(_QWORD *)&v414 = v187;
              sub_1C4871F04(&v433, (unsigned int *)&v413);
              v197 = *(_DWORD *)v188;
              v188 += 4;
              LODWORD(v413) = v197;
              sub_1C48302EC(v186 + 32, (unsigned int *)&v413);
            }
            while (v188 != v189);
          }
          v385 = v186;
          if (LODWORD(v447[1]))
          {
            v198 = (unsigned int *)v447[0];
            v199 = 4 * LODWORD(v447[1]);
            do
            {
              v200 = *v198;
              v20 = v20 & 0xFFFFFFFF00000000 | v200;
              v201 = (void **)sub_1C559224C((uint64_t *)&v438, *v198);
              v203 = v202;
              if (HIDWORD(v443))
              {
                v204 = v443;
                v205 = (char *)v438 + 24 * v443;
                v206 = *((_DWORD *)v205 + 5);
                *(_QWORD *)v205 = v20;
                *((_QWORD *)v205 + 1) = v187;
                *((_QWORD *)v205 + 2) = -1;
                v443 = __PAIR64__(HIDWORD(v443), v206) - 0x100000000;
              }
              else
              {
                v413 = (void *)v20;
                *(_QWORD *)&v414 = v187;
                *((_QWORD *)&v414 + 1) = -1;
                v207 = (char *)v438;
                if (v439 >= HIDWORD(v439))
                {
                  v214 = v439 + 1;
                  if (v438 <= &v413 && (char *)v438 + 24 * v439 > (char *)&v413)
                  {
                    v374 = (char *)&v413 - (_BYTE *)v438;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v438, (uint64_t)v440, v214, 24);
                    v207 = (char *)v438;
                    v208 = (void **)((char *)v438 + v374);
                  }
                  else
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v438, (uint64_t)v440, v214, 24);
                    v208 = &v413;
                    v207 = (char *)v438;
                  }
                }
                else
                {
                  v208 = &v413;
                }
                v209 = &v207[24 * v439];
                v210 = *(_OWORD *)v208;
                *((_QWORD *)v209 + 2) = v208[2];
                *(_OWORD *)v209 = v210;
                v204 = v439;
                LODWORD(v439) = v439 + 1;
              }
              if (&v438 == v201 && v203 == 0xFFFFFFFFLL)
              {
                *((_WORD *)v441 + v200) = v204;
                *((_DWORD *)v438 + 6 * v204 + 4) = v204;
              }
              else
              {
                v212 = *((_DWORD *)*v201 + 6 * v203 + 4);
                v213 = v438;
                *((_DWORD *)v438 + 6 * v212 + 5) = v204;
                v213[6 * v203 + 4] = v204;
                v213[6 * v204 + 4] = v212;
              }
              ++v198;
              v199 -= 4;
            }
            while (v199);
          }
          v215 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7[31] + 72))(v7[31], v187);
          if (v216)
          {
            v217 = (unsigned int *)v215;
            v218 = (unsigned int *)(v215 + 4 * v216);
            do
            {
              v219 = *v217;
              v220 = v7[33];
              if (v220)
                v221 = (_QWORD *)(v220 + 8);
              else
                v221 = 0;
              v222 = *(unsigned int *)(*v221 + 24 * v219 + 16);
              v223 = (_WORD *)(v221[6] + ((v222 >> 3) & 0x1FFFFFFE));
              v224 = *v223 + (v222 & 0xF) * v219;
              do
              {
                v225 = v224;
                v226 = *((unsigned __int16 *)v436 + v224);
                v227 = v434;
                if (v434 > v226)
                {
                  while (1)
                  {
                    v228 = v226;
                    if (*((_DWORD *)v433 + 4 * v226) == v225)
                      break;
                    v226 += 0x10000;
                    if (v228 + 0x10000 >= v434)
                      goto LABEL_404;
                  }
                  if ((_DWORD)v434 != v226)
                  {
                    v229 = (char *)v433 + 16 * v226;
                    v230 = (char *)v433 + 16 * v434 - 16;
                    if (v230 != v229)
                    {
                      *v229 = *v230;
                      v231 = v434;
                      *((_WORD *)v436 + *((unsigned int *)v433 + 4 * v434 - 4)) = ((_DWORD)v229 - (_DWORD)v433) >> 4;
                      v227 = v231;
                    }
                    LODWORD(v434) = v227 - 1;
                  }
                }
LABEL_404:
                LODWORD(v413) = v225;
                *(_QWORD *)&v414 = v187;
                sub_1C4871F04(&v433, (unsigned int *)&v413);
                v232 = (unsigned __int16)v223[1];
                ++v223;
                v224 = v232 + v225;
              }
              while (v232);
              ++v217;
            }
            while (v217 != v218);
            v378 = 1;
          }
          if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v7[31] + 184))(v7[31], v187))
          {
            v233 = sub_1C5591D60((int *)v429, v187);
            sub_1C5591FB8(v233 + 8, (uint64_t)v429, v398 + 1, &v411, 0);
            *(_BYTE *)(v385 + 20) = 1;
          }
          v20 = v381;
          if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v7[31] + 56))(v7[31], v187)
            && (_DWORD)v427)
          {
            v234 = (uint64_t *)v426;
            v235 = 8 * v427;
            do
            {
              v236 = *v234;
              if (*v234 != v187
                && (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(_QWORD *)v7[31] + 64))(v7[31], *v234, v187))
              {
                v237 = sub_1C5591D60((int *)v429, v236);
                sub_1C5591FB8(v237 + 8, (uint64_t)v429, v398, &v411, 0);
              }
              ++v234;
              v235 -= 8;
            }
            while (v235);
          }
          if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v7[31] + 160))(v7[31], v187))
          {
            v238 = sub_1C5591D60((int *)v429, v187);
            sub_1C5591FB8(v238 + 8, (uint64_t)v429, v398 + 1, &v411, 0);
          }
          v167 = v379;
          if (v444 != (char *)&v445 + 8)
            free(v444);
          v168 = v391;
          if (v447[0] != &v447[2])
            free(v447[0]);
          goto LABEL_422;
        }
        v378 = 0;
        LOBYTE(v168) = 0;
LABEL_432:
        ++v406;
        v380 = v168;
        v19 = v377;
        if (!v20)
        {
LABEL_436:
          while ((*(_WORD *)(v20 + 44) & 8) != 0)
            v20 = *(_QWORD *)(v20 + 8);
          goto LABEL_437;
        }
LABEL_433:
        if ((*(_BYTE *)v20 & 4) == 0)
          goto LABEL_436;
LABEL_437:
        v20 = *(_QWORD *)(v20 + 8);
      }
      while ((char *)v20 != v19);
    }
    if (((*(uint64_t (**)(uint64_t))(*(_QWORD *)v7[31] + 208))(v7[31]) & 1) != 0)
    {
      if ((_DWORD)v431)
      {
        v240 = v406;
        v241 = 144 * v431;
        v242 = (char *)v430 + 8;
        do
        {
          sub_1C5591FB8((uint64_t)v242, (uint64_t)v429, v240, &v411, 0);
          v242 += 144;
          v241 -= 144;
        }
        while (v241);
      }
      v378 = 0;
      LODWORD(v434) = 0;
    }
    v16 = (_QWORD *)v376[1];
  }
  while (v16 != v14);
  v243 = v409;
  if ((v409 & 1) != 0)
    goto LABEL_445;
  v364 = (unsigned int *)operator new();
  v243 = (unint64_t)v364;
  v365 = (void **)v409;
  v366 = v364 + 4;
  *(_QWORD *)v364 = v364 + 4;
  *((_QWORD *)v364 + 1) = 0x600000000;
  if (v364 != (unsigned int *)v365)
  {
    v367 = *((_DWORD *)v365 + 2);
    if (v367)
    {
      if (v367 >= 7)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v364, (uint64_t)(v364 + 4), *((unsigned int *)v365 + 2), 8);
        v368 = *((_DWORD *)v365 + 2);
        if (!v368)
        {
LABEL_785:
          *(_DWORD *)(v243 + 8) = v367;
          goto LABEL_786;
        }
        v366 = *(_QWORD **)v243;
      }
      else
      {
        v368 = *((_DWORD *)v365 + 2);
      }
      memcpy(v366, *v365, 8 * v368);
      goto LABEL_785;
    }
  }
LABEL_786:
  *(_DWORD *)(v243 + 64) = *((_DWORD *)v365 + 16);
LABEL_445:
  v447[0] = (void *)v243;
  if ((v243 & 1) != 0)
  {
LABEL_453:
    v243 = v243 & 0xFC00000000000000 | (2 * ~((-1 << (v243 >> 58)) | (v243 >> 1))) | 1;
    v447[0] = (void *)v243;
    goto LABEL_454;
  }
  v244 = *(_QWORD **)v243;
  v245 = *(unsigned int *)(v243 + 8);
  if ((_DWORD)v245)
  {
    v246 = 8 * v245;
    v247 = *(_QWORD **)v243;
    do
    {
      *v247 = ~*v247;
      ++v247;
      v246 -= 8;
    }
    while (v246);
  }
  if ((*(_DWORD *)(v243 + 64) & 0x3F) != 0)
    v244[v245 - 1] &= ~(-1 << (*(_DWORD *)(v243 + 64) & 0x3F));
LABEL_454:
  if ((v243 & 1) == 0)
  {
    v369 = (unsigned int *)operator new();
    v370 = v369;
    v371 = v369 + 4;
    *(_QWORD *)v369 = v369 + 4;
    *((_QWORD *)v369 + 1) = 0x600000000;
    if (v369 == (unsigned int *)v243)
      goto LABEL_791;
    v372 = *(_DWORD *)(v243 + 8);
    if (!v372)
      goto LABEL_791;
    if (v372 >= 7)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v369, (uint64_t)(v369 + 4), *(unsigned int *)(v243 + 8), 8);
      v373 = *(_DWORD *)(v243 + 8);
      if (!v373)
      {
LABEL_790:
        v370[2] = v372;
LABEL_791:
        v370[16] = *(_DWORD *)(v243 + 64);
        v243 = (unint64_t)v370;
        goto LABEL_455;
      }
      v371 = *(void **)v370;
    }
    else
    {
      v373 = *(_DWORD *)(v243 + 8);
    }
    memcpy(v371, *(const void **)v243, 8 * v373);
    goto LABEL_790;
  }
LABEL_455:
  v444 = (void *)v243;
  sub_1C4914448((void ***)v447);
  sub_1C496F35C(&v410, (unint64_t *)&v444);
  sub_1C4914448((void ***)&v444);
  v249 = v427;
  if (!(_DWORD)v427)
    goto LABEL_755;
  v387 = v406;
  if ((_DWORD)v431)
  {
    v250 = (char *)v430 + 144 * v431;
    v251 = v411;
    v252 = 144 * v431;
    v253 = (int *)((char *)v430 + 20);
    do
    {
      v254 = *v253;
      if (v253[1] == 2)
      {
        v251 -= v254 == -1;
      }
      else if (v254 == -1)
      {
        *v253 = v387;
        --v251;
      }
      v253 += 36;
      v252 -= 144;
    }
    while (v252);
    v411 = v251;
    v255 = -1;
    v256 = -1;
    v257 = -1;
    do
    {
      if (*(v250 - 135) && !*((_DWORD *)v250 - 28))
      {
        if (*(v250 - 133))
        {
          if (v255 >= *((_DWORD *)v250 - 31))
            v255 = *((_DWORD *)v250 - 31);
          *((_DWORD *)v250 - 31) = v255;
        }
        else if (*(v250 - 132))
        {
          v258 = *((_DWORD *)v250 - 31);
          if (v257 < v258)
            v258 = v257;
          if (v255 < v258)
            v258 = v255;
          if (v256 < v258)
            v258 = v256;
          *((_DWORD *)v250 - 31) = v258;
          if (v257 >= v258)
            v257 = v258;
        }
        else if (*(v250 - 130))
        {
          v259 = *((_DWORD *)v250 - 31);
          if (v255 < v259)
            v259 = v255;
          if (v256 < v259)
            v259 = v256;
          *((_DWORD *)v250 - 31) = v259;
        }
        else if (*(v250 - 131) && (*(unsigned int (**)(uint64_t))(*(_QWORD *)v7[31] + 216))(v7[31]))
        {
          if (v256 >= *((_DWORD *)v250 - 31))
            v256 = *((_DWORD *)v250 - 31);
          *((_DWORD *)v250 - 31) = v256;
        }
      }
      v250 -= 144;
    }
    while (v250 != v430);
    v260 = v427;
  }
  else
  {
    v260 = v427;
  }
  v382 = v249;
  v405 = 0;
  v418 = 0;
  v419 = 0;
  v416 = 0;
  v417 = -1;
  v404 = 0;
  v447[0] = &v447[2];
  v447[1] = (void *)0x1000000000;
  v444 = v446;
  v445 = xmmword_1C6612EE0;
  v413 = v415;
  v414 = xmmword_1C6612EE0;
  v402[0] = 0;
  v402[1] = 0;
  v403 = 0;
  if (!v260)
  {
    v412 = 0x100000000;
    goto LABEL_698;
  }
  v261 = (uint64_t *)v426;
  v262 = (uint64_t *)((char *)v426 + 8 * v260);
  v386 = v262;
  do
  {
    v393 = (llvm::MachineInstr *)*v261;
    v263 = (_DWORD *)sub_1C5591D60((int *)v429, *v261);
    if (v263[6] == 2)
      goto LABEL_618;
    v265 = v263[4];
    for (k = v263[5]; ; --k)
    {
      v266 = k;
      v267 = (v409 >> 1) & ~(-1 << (v409 >> 58));
      if ((v409 & 1) == 0)
      {
        v266 = k & 0x3F;
        v267 = *(_QWORD *)(*(_QWORD *)v409 + 8 * (k >> 6));
      }
      if (((v267 >> v266) & 1) == 0)
        break;
      v268 = k;
      v269 = (v410 >> 1) & ~(-1 << (v410 >> 58));
      if ((v410 & 1) == 0)
      {
        v268 = k & 0x3F;
        v269 = *(_QWORD *)(*(_QWORD *)v410 + 8 * (k >> 6));
      }
      if (((v269 >> v268) & 1) != 0)
        break;
    }
    v394 = v263;
    v270 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7[31] + 192))(v7[31], v375);
    v271 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7[31] + 200))(v7[31]);
    v399 = v270;
    if (v270)
    {
      if (!v271)
      {
        v272 = v394;
        goto LABEL_528;
      }
      v272 = v394;
      if ((v410 & 1) != 0)
      {
        if (((1 << k) & (v410 >> 1) & ~(-1 << (v410 >> 58))) != 0)
          goto LABEL_528;
      }
      else if ((*(_QWORD *)(*(_QWORD *)v410 + 8 * (k >> 6)) & (1 << k)) != 0)
      {
        goto LABEL_528;
      }
      if (k >= v387)
      {
        LODWORD(v274) = 0;
      }
      else
      {
        v274 = 0;
        do
        {
          v275 = k + v274;
          v276 = (v410 >> 1) & ~(-1 << (v410 >> 58));
          if ((v410 & 1) == 0)
          {
            v277 = v275 >> 6;
            LOBYTE(v275) = v275 & 0x3F;
            v276 = *(_QWORD *)(*(_QWORD *)v410 + 8 * v277);
          }
          if (((v276 >> v275) & 1) != 0)
            break;
          if (++v274 >= v271)
            break;
        }
        while (v274 + (unint64_t)k < v387);
      }
      if (v274 < v271)
      {
        v278 = v274 + 1;
        do
        {
          v279 = --k;
          v280 = (v410 >> 1) & ~(-1 << (v410 >> 58));
          if ((v410 & 1) == 0)
          {
            v279 = k & 0x3F;
            v280 = *(_QWORD *)(*(_QWORD *)v410 + 8 * (k >> 6));
          }
          if (((v280 >> v279) & 1) != 0)
            break;
          v89 = v278++ >= v271;
        }
        while (!v89);
      }
LABEL_528:
      if (k >= v265 + 1)
      {
        v281 = 1;
        v273 = k;
        while (1)
        {
          v282 = v273;
          v283 = (v410 >> 1) & ~(-1 << (v410 >> 58));
          if ((v410 & 1) == 0)
          {
            v282 = v273 & 0x3F;
            v283 = *(_QWORD *)(*(_QWORD *)v410 + 8 * (v273 >> 6));
          }
          if (((v283 >> v282) & 1) != 0)
            break;
          if (v281 < v399)
          {
            --v273;
            ++v281;
            if (v273 >= v265 + 1)
              continue;
          }
          goto LABEL_529;
        }
      }
      else
      {
LABEL_529:
        v273 = k;
      }
      goto LABEL_530;
    }
    v273 = k;
    v272 = v394;
LABEL_530:
    v401 = 0;
    if (v265 >= HIDWORD(v417))
      HIBYTE(v401) = 1;
    v392 = v265;
    if (v265 < v417 && ((v272[2] & 2) != 0 || (_DWORD)v416 != 8))
    {
      v412 = 0x100000000;
    }
    else
    {
      LOBYTE(v401) = 1;
      v412 = 0x100000000;
      if (v265 >= HIDWORD(v417) && HIDWORD(v417) < v417)
        v412 = 1;
    }
    v284 = 0;
    v285 = 0;
    do
    {
      v286 = v284;
      v287 = (void *)*((unsigned int *)&v412 + v285);
      if (!*((_BYTE *)&v401 + (_QWORD)v287))
        goto LABEL_576;
      if (*((_BYTE *)&v404 + (_QWORD)v287))
      {
        v288 = 1;
        goto LABEL_566;
      }
      if (!v425)
      {
        v292 = v420;
        if ((_DWORD)v421)
        {
          v293 = 4 * v421;
          while (*v292 != *((_DWORD *)&v417 + (_QWORD)v287))
          {
            ++v292;
            v293 -= 4;
            if (!v293)
              goto LABEL_562;
          }
        }
        else
        {
LABEL_562:
          v292 = (char *)v420 + 4 * v421;
        }
        v289 = v292 != (_DWORD *)((char *)v420 + 4 * v421);
        goto LABEL_565;
      }
      v289 = (uint64_t)v424;
      if (!v424)
        goto LABEL_565;
      v290 = *((_DWORD *)&v417 + (_QWORD)v287);
      while (1)
      {
        v291 = *(_DWORD *)(v289 + 28);
        if (v290 >= v291)
          break;
LABEL_556:
        v289 = *(_QWORD *)v289;
        if (!v289)
          goto LABEL_565;
      }
      if (v291 < v290)
      {
        v289 += 8;
        goto LABEL_556;
      }
      v289 = 1;
LABEL_565:
      v288 = v289 == 0;
LABEL_566:
      if (v403)
      {
        v294 = *((_DWORD *)&v417 + (_QWORD)v287);
        LODWORD(v295) = (37 * v294) & (v403 - 1);
        v296 = (int *)(v402[0] + 8 * v295);
        v297 = *v296;
        if (v294 == *v296)
          goto LABEL_568;
        v299 = 1;
        while (v297 != -1)
        {
          v300 = v295 + v299++;
          v295 = v300 & (v403 - 1);
          v297 = *(_DWORD *)(v402[0] + 8 * v295);
          if (v294 == v297)
          {
            v296 = (int *)(v402[0] + 8 * v295);
            goto LABEL_568;
          }
        }
      }
      v296 = (int *)(v402[0] + 8 * v403);
LABEL_568:
      if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v7[31] + 176))(v7[31], *v261)
        && (int *)(v402[0] + 8 * v403) != v296)
      {
        v298 = (_DWORD)v287 ? 2 : 1;
        if ((v296[1] & v298) != 0)
          v288 = 0;
      }
      sub_1C5591E2C(v287, (uint64_t)&v419, (uint64_t)&v405 + 2, (uint64_t)&v416, (uint64_t)&v418, (uint64_t)&v417, (uint64_t)&v404, (uint64_t)&v405, (uint64_t)v447, &v444, &v413, v288);
LABEL_576:
      v284 = 1;
      v285 = 1;
    }
    while ((v286 & 1) == 0);
    v301 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v7[31] + 192))(v7[31], v375);
    v302 = v394;
    v303 = *((unsigned __int8 *)v394 + 8);
    if (v303 == 1)
    {
      LODWORD(v305) = 0;
      v304 = v392;
      goto LABEL_595;
    }
    v304 = v392;
    if (v303 == 2)
      goto LABEL_585;
    v306 = v394[8];
    if (v306 == 2)
    {
      LODWORD(v305) = -1;
      goto LABEL_595;
    }
    if (v306 != 1)
    {
      if (v416 <= 7 && v273 == (_DWORD)v417)
        goto LABEL_594;
      if (HIDWORD(v416) <= 7 && v273 == HIDWORD(v417))
        goto LABEL_585;
      if (v301)
        v319 = v416 >= 8;
      else
        v319 = 1;
      v320 = !v319;
      v321 = v273 - 1;
      if (v320 == 1 && (_DWORD)v417 == v321)
        goto LABEL_594;
      v323 = !v301 || HIDWORD(v416) >= 8;
      v324 = !v323;
      if (v324 && HIDWORD(v417) == v321)
        goto LABEL_585;
      if (v320 && (_DWORD)v417 == v273 + 1 && v419 < 2)
        goto LABEL_594;
      if (v324 && HIDWORD(v417) == v273 + 1 && HIDWORD(v419) < 2)
        goto LABEL_585;
      if (v416 <= 7
        && *((_BYTE *)v394 + 14)
        && v273 >= v417
        && !((v410 & 1) != 0
           ? (1 << v273) & (v410 >> 1) & ~(-1 << (v410 >> 58))
           : *(_QWORD *)(*(_QWORD *)v410 + 8 * (v273 >> 6)) & (1 << v273)))
      {
        LODWORD(v305) = 0;
        if (!HIDWORD(v416) || HIDWORD(v417) < v417)
          goto LABEL_595;
      }
      if (HIDWORD(v416) <= 7
        && *((_BYTE *)v394 + 14)
        && v273 >= HIDWORD(v417)
        && !((v410 & 1) != 0
           ? (1 << v273) & (v410 >> 1) & ~(-1 << (v410 >> 58))
           : *(_QWORD *)(*(_QWORD *)v410 + 8 * (v273 >> 6)) & (1 << v273)))
      {
        goto LABEL_585;
      }
      if (!(_DWORD)v416)
        goto LABEL_594;
      if (!HIDWORD(v416))
        goto LABEL_585;
      if ((_DWORD)v416 == 8)
      {
        if (HIDWORD(v416) == 8)
        {
          v305 = v417 > HIDWORD(v417);
          v328 = (_DWORD *)((unint64_t)&v417 | (4 * v305));
          *v328 = v392;
          if (v399)
          {
            v329 = v392;
            while (v329 >= *(_DWORD *)((unint64_t)&v418 | (4 * v305)) + 1)
            {
              v330 = v329;
              v331 = (v410 >> 1) & ~(-1 << (v410 >> 58));
              if ((v410 & 1) == 0)
              {
                v330 = v329 & 0x3F;
                v331 = *(_QWORD *)(*(_QWORD *)v410 + 8 * (v329 >> 6));
              }
              if (((v331 >> v330) & 1) != 0)
              {
                *v328 = v329;
                break;
              }
              --v329;
              if (!--v399)
                break;
            }
          }
          sub_1C5591E2C((void *)v305, (uint64_t)&v419, (uint64_t)&v405 + 2, (uint64_t)&v416, (uint64_t)&v418, (uint64_t)&v417, (uint64_t)&v404, (uint64_t)&v405, (uint64_t)v447, &v444, &v413, 1);
          v302 = v394;
          goto LABEL_595;
        }
LABEL_585:
        LODWORD(v305) = 1;
        goto LABEL_595;
      }
      if (HIDWORD(v416) == 8)
        goto LABEL_594;
      if (v273 >= v417)
      {
        if (v273 >= HIDWORD(v417))
        {
          v332 = v417 > HIDWORD(v417);
LABEL_685:
          LODWORD(v305) = !v332;
          goto LABEL_595;
        }
        v333 = 100 * (v273 - v417) / (v273 - v392);
        v334 = 100 * (HIDWORD(v417) - v273) / (HIDWORD(v417) - HIDWORD(v418));
      }
      else
      {
        if (v273 < HIDWORD(v417))
        {
          v332 = HIDWORD(v417) > v417;
          goto LABEL_685;
        }
        v333 = 100 * (v417 - v273) / ((int)v417 - (int)v418);
        v334 = 100 * (v273 - HIDWORD(v417)) / (v273 - v392);
      }
      LODWORD(v305) = v333 >= v334;
      goto LABEL_595;
    }
    if (v416 >= 8)
    {
      LODWORD(v417) = v392;
      sub_1C5591E2C(0, (uint64_t)&v419, (uint64_t)&v405 + 2, (uint64_t)&v416, (uint64_t)&v418, (uint64_t)&v417, (uint64_t)&v404, (uint64_t)&v405, (uint64_t)v447, &v444, &v413, 1);
      v302 = v394;
    }
LABEL_594:
    LODWORD(v305) = 0;
LABEL_595:
    ++*((_DWORD *)&v416 + v305);
    v307 = *((_DWORD *)&v418 + v305);
    if (v307 <= v304)
      v307 = v304;
    *((_DWORD *)&v418 + v305) = v307;
    v308 = *((_DWORD *)&v417 + v305);
    v309 = v305;
    if (v273 < v308)
      v308 = v273;
    *((_DWORD *)&v417 + v305) = v308;
    *((_BYTE *)&v404 + v305) |= *((_BYTE *)v302 + 9);
    *((_BYTE *)&v405 + v305) |= *((_BYTE *)v302 + 28);
    if (*((_BYTE *)v302 + 11))
      ++*((_DWORD *)&v419 + v305);
    v262 = v386;
    if (v302[8] == 1)
    {
      v310 = v302[5];
      v400 = v310;
      if (v403)
      {
        LODWORD(v311) = (v403 - 1) & (37 * v310);
        v312 = (int *)(v402[0] + 8 * v311);
        v313 = *v312;
        if (v310 == *v312)
          goto LABEL_604;
        v335 = 1;
        while (v313 != -1)
        {
          v336 = v311 + v335++;
          v311 = v336 & (v403 - 1);
          v313 = *(_DWORD *)(v402[0] + 8 * v311);
          if (v310 == v313)
          {
            v312 = (int *)(v402[0] + 8 * v311);
            goto LABEL_604;
          }
        }
      }
      v312 = (int *)(v402[0] + 8 * v403);
LABEL_604:
      if ((int *)(v402[0] + 8 * v403) == v312)
        v314 = 0;
      else
        v314 = sub_1C476BFEC((uint64_t)v402, &v400)[1];
      sub_1C476BFEC((uint64_t)v402, &v400)[1] = v314 | 1;
    }
    v315 = *((_WORD *)v393 + 22);
    if ((v315 & 0xC) == 0 || (v316 = v393, (v315 & 4) != 0))
    {
      if ((*(_BYTE *)(*((_QWORD *)v393 + 2) + 10) & 0x40) == 0)
        goto LABEL_615;
LABEL_616:
      v318 = -3;
    }
    else
    {
      while (1)
      {
        v317 = *((_QWORD *)v316 + 2);
        if ((*(_BYTE *)(v317 + 10) & 0x40) == 0 && *(_WORD *)v317 != 20)
          break;
        if ((*((_WORD *)v316 + 22) & 8) == 0)
          goto LABEL_616;
        v316 = (llvm::MachineInstr *)*((_QWORD *)v316 + 1);
      }
LABEL_615:
      v318 = -1;
    }
    *(_QWORD *)(*((_QWORD *)v393 + 4)
              + 32 * (llvm::MachineInstr::getNumExplicitOperands((uint64_t)v393) + v318)
              + 16) = v309;
LABEL_618:
    ++v261;
  }
  while (v261 != v262);
  v412 = 0x100000000;
  if (HIDWORD(v417) < v417)
    v412 = 1;
LABEL_698:
  v337 = 0;
  v338 = 0;
  do
  {
    v339 = v337;
    v340 = (void *)*((unsigned int *)&v412 + v338);
    if (*((_DWORD *)&v416 + (_QWORD)v340) && *((_BYTE *)&v404 + (_QWORD)v340))
      sub_1C5591E2C(v340, (uint64_t)&v419, (uint64_t)&v405 + 2, (uint64_t)&v416, (uint64_t)&v418, (uint64_t)&v417, (uint64_t)&v404, (uint64_t)&v405, (uint64_t)v447, &v444, &v413, 1);
    v337 = 1;
    v338 = 1;
  }
  while ((v339 & 1) == 0);
  v341 = *(_QWORD **)(v375 + 328);
  if (v341 != v14)
  {
    v342 = 0;
    v343 = 0;
    v344 = (unsigned __int8 *)v413;
    v345 = (unsigned __int8 *)v444;
    do
    {
      v346 = v341 + 6;
      v347 = (_QWORD *)v341[7];
      v348 = LODWORD(v447[1]);
      if (LODWORD(v447[1]) > v342 && v347 != v346)
      {
        do
        {
          v350 = *((_DWORD *)v447[0] + v342);
          if (v343 != v350)
          {
            do
            {
              while (1)
              {
                v351 = (unsigned __int16 *)v347[2];
                v352 = *v351;
                v353 = (v352 - 9) > 0x3C
                    || ((1 << (v352 - 9)) & 0x1000000000000605) == 0;
                v354 = !v353 || v352 == 0;
                if (v354 || (v351[4] & 0x10) != 0)
                  break;
                if ((*(_BYTE *)v347 & 4) == 0)
                {
                  while ((*((_WORD *)v347 + 22) & 8) != 0)
                    v347 = (_QWORD *)v347[1];
                }
                v347 = (_QWORD *)v347[1];
                if (++v343 == v350 || v347 == v346)
                  goto LABEL_728;
              }
              if ((*(_BYTE *)v347 & 4) == 0)
              {
                while ((*((_WORD *)v347 + 22) & 8) != 0)
                  v347 = (_QWORD *)v347[1];
              }
              v347 = (_QWORD *)v347[1];
            }
            while (v347 != v346);
            v347 = v341 + 6;
          }
LABEL_728:
          if (v343 != v350 && v347 == v346)
            break;
          v356 = *v345++;
          v248 = v356;
          if (!*v344++)
          {
            v358 = v341 + 6;
            if (v347 != v346)
            {
              while (*(_WORD *)v347[2] == 3)
              {
                if ((*(_BYTE *)v347 & 4) == 0)
                {
                  while ((*((_WORD *)v347 + 22) & 8) != 0)
                    v347 = (_QWORD *)v347[1];
                }
                v347 = (_QWORD *)v347[1];
                if (v347 == v346)
                {
                  v358 = v341 + 6;
                  goto LABEL_741;
                }
              }
              v358 = v347;
            }
LABEL_741:
            (*(void (**)(uint64_t, _QWORD *, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)v7[31] + 16))(v7[31], v358, v341, v248, v7[32]);
            v348 = LODWORD(v447[1]);
            v347 = v358;
          }
        }
        while (++v342 < v348 && v347 != v346);
        v342 = v342;
      }
      (*(void (**)(uint64_t, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)v7[31] + 128))(v7[31], v341, v7[33], v248);
      v341 = (_QWORD *)v341[1];
    }
    while (v341 != (_QWORD *)(v375 + 320));
  }
  MEMORY[0x1CAA32FB4](v402[0], 4);
  if (v413 != v415)
    free(v413);
  v249 = v382;
  if (v444 != v446)
    free(v444);
  if (v447[0] != &v447[2])
    free(v447[0]);
LABEL_755:
  MEMORY[0x1CAA32FB4](v407[0], 8);
  sub_1C47655E8((uint64_t)&v423, v424);
  if (v420 != v422)
    free(v420);
  sub_1C4914448((void ***)&v409);
  sub_1C4914448((void ***)&v410);
  if (v426 != v428)
    free(v426);
  v360 = (char *)v430;
  if ((_DWORD)v431)
  {
    v361 = 144 * v431;
    do
    {
      sub_1C47655E8((uint64_t)&v360[v361 - 24], *(_QWORD **)&v360[v361 - 16]);
      v362 = *(char **)&v360[v361 - 104];
      if (&v360[v361 - 88] != v362)
        free(v362);
      v361 -= 144;
    }
    while (v361);
    v360 = (char *)v430;
  }
  if (v360 != v432)
    free(v360);
  if ((v429[0] & 1) == 0)
    MEMORY[0x1CAA32FB4](v429[1], 8);
  free(v436);
  if (v433 != v435)
    free(v433);
  free(v441);
  if (v438 != v440)
    free(v438);
  return v249 != 0;
}

uint64_t sub_1C5591D60(int *a1, uint64_t a2)
{
  int *v2;
  int v3;
  int v4;
  int *v5;
  int v6;
  uint64_t v7;
  int *v8;
  uint64_t v9;
  int v10;
  int v11;
  uint64_t v12;
  unsigned int *v13;

  v2 = a1 + 2;
  v3 = *a1;
  if ((*a1 & 1) != 0)
  {
    v4 = 32;
    v5 = a1 + 2;
  }
  else
  {
    v5 = (int *)*((_QWORD *)a1 + 1);
    v4 = a1[4];
    if (!v4)
    {
      v7 = 0;
      goto LABEL_10;
    }
  }
  v6 = v4 - 1;
  LODWORD(v7) = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v8 = &v5[4 * v7];
  v9 = *(_QWORD *)v8;
  if (*(_QWORD *)v8 == a2)
    goto LABEL_11;
  v10 = 1;
  while (v9 != -4096)
  {
    v11 = v7 + v10++;
    v7 = v11 & v6;
    v9 = *(_QWORD *)&v5[4 * v7];
    if (v9 == a2)
      goto LABEL_10;
  }
  if ((v3 & 1) != 0)
  {
    v7 = 32;
    v5 = a1 + 2;
  }
  else
  {
    v5 = (int *)*((_QWORD *)a1 + 1);
    v7 = a1[4];
  }
LABEL_10:
  v8 = &v5[4 * v7];
LABEL_11:
  if ((v3 & 1) != 0)
  {
    v12 = 32;
  }
  else
  {
    v2 = (int *)*((_QWORD *)a1 + 1);
    v12 = a1[4];
  }
  if (&v2[4 * v12] == v8)
    v13 = (unsigned int *)(a1 + 132);
  else
    v13 = (unsigned int *)(v8 + 2);
  return *((_QWORD *)a1 + 65) + 144 * *v13;
}

void *sub_1C5591E2C(void *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, _QWORD *a10, _QWORD *a11, char a12)
{
  uint64_t v16;
  int v17;
  int v18;
  uint64_t v19;
  uint64_t v20;
  char v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;

  v16 = result;
  if (a12)
  {
    v17 = (int)result;
    v18 = *(_DWORD *)(a6 + 4 * result);
    v19 = *(unsigned int *)(a9 + 8);
    if (v19 >= *(_DWORD *)(a9 + 12))
    {
      v29 = a7;
      v30 = a4;
      v28 = a5;
      result = llvm::SmallVectorBase<unsigned int>::grow_pod(a9, a9 + 16, v19 + 1, 4);
      a7 = v29;
      a4 = v30;
      a5 = v28;
      LODWORD(v19) = *(_DWORD *)(a9 + 8);
    }
    *(_DWORD *)(*(_QWORD *)a9 + 4 * v19) = v18;
    ++*(_DWORD *)(a9 + 8);
    v20 = a10[1];
    if ((unint64_t)(v20 + 1) > a10[2])
    {
      v31 = a4;
      v23 = a7;
      v24 = a5;
      result = llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a10, a10 + 3, v20 + 1, 1);
      a4 = v31;
      a5 = v24;
      a7 = v23;
      v20 = a10[1];
    }
    *(_BYTE *)(*a10 + v20) = v17 != 0;
    ++a10[1];
    v21 = *(_BYTE *)(a8 + v16);
    v22 = a11[1];
    if ((unint64_t)(v22 + 1) > a11[2])
    {
      v25 = a4;
      v26 = a7;
      v27 = a5;
      result = llvm::SmallVectorBase<unsigned long long>::grow_pod((uint64_t)a11, a11 + 3, v22 + 1, 1);
      a4 = v25;
      a5 = v27;
      a7 = v26;
      v22 = a11[1];
    }
    *(_BYTE *)(*a11 + v22) = v21;
    ++a11[1];
  }
  *(_DWORD *)(a2 + 4 * v16) = 0;
  *(_BYTE *)(a3 + v16) = 0;
  *(_DWORD *)(a4 + 4 * v16) = 0;
  *(_DWORD *)(a5 + 4 * v16) = 0;
  *(_DWORD *)(a6 + 4 * v16) = -1;
  *(_BYTE *)(a7 + v16) = 0;
  *(_BYTE *)(a8 + v16) = 0;
  return result;
}

void sub_1C5591FB8(uint64_t a1, uint64_t a2, unsigned int a3, _DWORD *a4, int a5)
{
  _QWORD *v10;
  _QWORD *v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  unsigned int *v15;
  unsigned int v16;

  if (*(_DWORD *)(a1 + 12) == -1)
  {
    v11 = (_QWORD *)(a1 + 120);
    v10 = *(_QWORD **)(a1 + 120);
    *(_DWORD *)(a1 + 12) = a3;
    *(_DWORD *)(a1 + 40) = 0;
    sub_1C47655E8(a1 + 112, v10);
    *(v11 - 1) = v11;
    *v11 = 0;
    v11[1] = 0;
    *((_DWORD *)v11 - 24) = a5;
    if (*((_DWORD *)v11 - 26) == 2)
      *(_DWORD *)(a1 + 16) = 1;
    --*a4;
    v12 = *(unsigned __int8 *)(a1 + 2);
    if (*(_BYTE *)(a1 + 2))
    {
      v13 = *(unsigned int *)(a2 + 528);
      if ((_DWORD)v13)
      {
        v14 = 144 * v13;
        v15 = (unsigned int *)(*(_QWORD *)(a2 + 520) + 20);
        do
        {
          v16 = *v15;
          if (*v15 > a3 && *(v15 - 1) < *(_DWORD *)(a1 + 8) && *((unsigned __int8 *)v15 - 10) == v12)
          {
            *v15 = a3;
            if (v16 == -1)
              --*a4;
          }
          v15 += 36;
          v14 -= 144;
        }
        while (v14);
      }
    }
  }
}

void sub_1C55920B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  char *v6;
  char *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unsigned int v11;
  uint64_t v12;
  unsigned int v13;
  unsigned int v14;
  uint64_t v15;
  unsigned int v16;
  _OWORD *v17;
  void *v18[2];
  _BYTE v19[32];
  void *v20;
  uint64_t v21;
  _QWORD v22[5];

  v22[4] = *MEMORY[0x1E0C80C00];
  v20 = v22;
  v21 = 0x800000000;
  v18[0] = v19;
  v18[1] = (void *)0x800000000;
  (*(void (**)(uint64_t, uint64_t, uint64_t, void **, void **))(*(_QWORD *)a1 + 88))(a1, a3, a2, &v20, v18);
  if ((_DWORD)v21)
  {
    v6 = (char *)v20;
    v7 = (char *)v20 + 4 * v21;
    v8 = a4[18];
    LODWORD(v9) = *((_DWORD *)a4 + 2);
    do
    {
      v10 = *(unsigned int *)v6;
      v11 = *(unsigned __int16 *)(v8 + 2 * v10);
      if (v9 > v11)
      {
        v12 = *a4;
        v13 = *(unsigned __int16 *)(v8 + 2 * v10);
        while (1)
        {
          v14 = v13;
          if (*(_DWORD *)(v12 + 16 * v13) == (_DWORD)v10)
            break;
          v13 += 0x10000;
          if (v14 + 0x10000 >= v9)
            goto LABEL_16;
        }
        if (*(_QWORD *)(v12 + 16 * v13 + 8) == a3)
        {
          v15 = v12 + 16 * v9;
          while (1)
          {
            v16 = v11;
            if (*(_DWORD *)(v12 + 16 * v11) == (_DWORD)v10)
              break;
            v11 += 0x10000;
            if (v16 + 0x10000 >= v9)
              goto LABEL_16;
          }
          v17 = (_OWORD *)(v12 + 16 * v11);
          if ((_OWORD *)(v15 - 16) != v17)
          {
            *v17 = *(_OWORD *)(v15 - 16);
            v9 = *((unsigned int *)a4 + 2);
            v8 = a4[18];
            *(_WORD *)(v8 + 2 * *(unsigned int *)(*a4 + 16 * v9 - 16)) = (v17 - *a4) >> 4;
          }
          LODWORD(v9) = v9 - 1;
          *((_DWORD *)a4 + 2) = v9;
        }
      }
LABEL_16:
      v6 += 4;
    }
    while (v6 != v7);
  }
  if (v18[0] != v19)
    free(v18[0]);
  if (v20 != v22)
    free(v20);
}

uint64_t *sub_1C559224C(uint64_t *result, unsigned int a2)
{
  unsigned int v2;
  unsigned int v3;
  uint64_t v4;
  unsigned int v5;

  v2 = *(unsigned __int16 *)(result[26] + 2 * a2);
  v3 = *((_DWORD *)result + 2);
  if (v3 > v2)
  {
    v4 = *result;
    do
    {
      if (*(_DWORD *)(v4 + 24 * v2) == a2)
      {
        v5 = *(_DWORD *)(v4 + 24 * v2 + 16);
        if (v5 != -1 && *(_DWORD *)(v4 + 24 * v5 + 20) == -1)
          break;
      }
      v2 += 0x10000;
    }
    while (v2 < v3);
  }
  return result;
}

uint64_t sub_1C55922BC(uint64_t a1, uint64_t *a2)
{
  uint64_t v4;
  uint64_t v5;
  int v6;
  int v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  int v12;
  BOOL v13;
  int v14;
  unsigned int v15;
  _QWORD *v16;
  __int128 *v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  char *v21;
  uint64_t *v22;
  void **v23;
  char *v24;
  void *v25;
  __int128 v26;
  __int128 v27;
  uint64_t v28;
  unint64_t v29;
  char *v30;
  char **v31;
  _QWORD *v32;
  uint64_t v33;
  char *v34;
  uint64_t v35;
  const void *v37;
  unsigned int v38;
  _BOOL4 v40;
  unint64_t v41;
  char *v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  char *v46;
  char *v47;
  __int128 v48;
  char *v49;
  unint64_t v50;
  _QWORD *v51;
  uint64_t v52;
  char *v53;
  uint64_t v54;
  const void *v55;
  char *v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  char *v61;
  char *v62;
  int v63;
  char *v64;
  __int128 *v65;
  void **v66;
  uint64_t *v67;
  uint64_t *v68;
  char **v69;
  uint64_t v70;
  uint64_t v71;
  int v72;
  unint64_t v73;
  _BOOL4 v74;
  const void **v75;
  char *v76;
  char *v77;
  uint64_t *v78;
  uint64_t v79;
  int v80;
  unint64_t v81;
  _BYTE v82[28];
  void *v83;
  uint64_t v84;
  _BYTE v85[64];
  _QWORD **v86;
  _QWORD *v87[2];
  uint64_t v88;
  _OWORD v89[2];
  void *v90;
  uint64_t v91;
  _BYTE v92[64];
  _QWORD **v93;
  _QWORD *v94[4];

  v94[2] = *(_QWORD **)MEMORY[0x1E0C80C00];
  v4 = *a2;
  v79 = *a2;
  v80 = 0;
  v5 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v6 = 32;
LABEL_5:
    v7 = v6 - 1;
    v8 = (v6 - 1) & ((v4 >> 4) ^ (v4 >> 9));
    v9 = (_QWORD *)(v5 + 16 * v8);
    v10 = *v9;
    if (v4 == *v9)
    {
LABEL_14:
      v15 = *(_DWORD *)(v5 + 16 * v8 + 8);
      return *(_QWORD *)(a1 + 520) + 144 * v15 + 8;
    }
    v11 = 0;
    v12 = 1;
    while (v10 != -4096)
    {
      if (v11)
        v13 = 0;
      else
        v13 = v10 == -8192;
      if (v13)
        v11 = v9;
      v14 = v8 + v12++;
      v8 = v14 & v7;
      v9 = (_QWORD *)(v5 + 16 * v8);
      v10 = *v9;
      if (v4 == *v9)
        goto LABEL_14;
    }
    if (v11)
      v16 = v11;
    else
      v16 = v9;
    goto LABEL_18;
  }
  v6 = *(_DWORD *)(a1 + 16);
  if (v6)
  {
    v5 = *(_QWORD *)(a1 + 8);
    goto LABEL_5;
  }
  v16 = 0;
LABEL_18:
  v78 = &v91;
  v17 = v89;
  v18 = sub_1C4968D14(a1, (uint64_t)&v79, &v79, v16);
  *v18 = v79;
  *((_DWORD *)v18 + 2) = v80;
  *(_DWORD *)&v82[3] = 0;
  *(_DWORD *)v82 = 0;
  *(_QWORD *)&v82[8] = -1;
  *(_DWORD *)&v82[16] = 0;
  *(_DWORD *)&v82[24] = 0;
  v83 = v85;
  v84 = 0x1000000000;
  v87[0] = 0;
  v87[1] = 0;
  v86 = v87;
  v19 = *a2;
  v89[0] = *(_OWORD *)v82;
  *(_OWORD *)((char *)v89 + 12) = *(_OWORD *)&v82[12];
  v88 = v19;
  v90 = v92;
  v91 = 0x1000000000;
  v94[0] = 0;
  v94[1] = 0;
  v93 = v94;
  v20 = *(unsigned int *)(a1 + 528);
  v21 = *(char **)(a1 + 520);
  if (v20 < *(_DWORD *)(a1 + 532))
  {
    v22 = &v88;
    v23 = &v90;
    goto LABEL_20;
  }
  v40 = v21 <= (char *)&v88 && &v21[144 * v20] > (char *)&v88;
  v74 = v40;
  if (v40)
    v41 = 0x8E38E38E38E38E39 * (((char *)&v88 - v21) >> 4);
  else
    v41 = -1;
  v73 = v41;
  v81 = 0;
  v21 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1 + 520, v20 + 1, 144, &v81);
  v42 = *(char **)(a1 + 520);
  v43 = *(unsigned int *)(a1 + 528);
  if (!(_DWORD)v43)
    goto LABEL_71;
  v44 = 0;
  v45 = 144 * v43;
  do
  {
    v46 = &v42[v44];
    v47 = &v21[v44];
    *(_QWORD *)v47 = *(_QWORD *)&v42[v44];
    v48 = *(_OWORD *)&v42[v44 + 8];
    *(_OWORD *)(v47 + 20) = *(_OWORD *)&v42[v44 + 20];
    *(_OWORD *)(v47 + 8) = v48;
    v49 = &v21[v44 + 56];
    *(_QWORD *)&v21[v44 + 40] = v49;
    *((_QWORD *)v47 + 6) = 0x1000000000;
    if (v42 == v21)
      goto LABEL_51;
    v50 = *((unsigned int *)v46 + 12);
    if (!*((_DWORD *)v46 + 12))
      goto LABEL_51;
    v55 = (const void *)*((_QWORD *)v46 + 5);
    v56 = &v42[v44];
    v57 = (uint64_t)&v42[v44 + 56];
    if ((const void *)v57 != v55)
    {
      *(_QWORD *)&v21[v44 + 40] = v55;
      *((_DWORD *)v47 + 12) = v50;
      *((_DWORD *)v47 + 13) = *((_DWORD *)v56 + 13);
      *((_QWORD *)v46 + 5) = v57;
      *((_DWORD *)v56 + 13) = 0;
      goto LABEL_60;
    }
    v70 = v45;
    v71 = v44;
    v76 = v42;
    v72 = *((_DWORD *)v46 + 12);
    if (v50 >= 0x11)
    {
      v69 = (char **)&v21[v44 + 40];
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v69, (uint64_t)&v21[v44 + 56], v50, 4);
      v58 = *((unsigned int *)v46 + 12);
      if (!(_DWORD)v58)
        goto LABEL_59;
      v55 = (const void *)*((_QWORD *)v46 + 5);
      v49 = *v69;
    }
    else
    {
      v58 = *((unsigned int *)v46 + 12);
    }
    memcpy(v49, v55, 4 * v58);
LABEL_59:
    v44 = v71;
    *((_DWORD *)v47 + 12) = v72;
    v42 = v76;
    v45 = v70;
LABEL_60:
    *((_DWORD *)v46 + 12) = 0;
LABEL_51:
    *((_QWORD *)v47 + 15) = *((_QWORD *)v46 + 15);
    v51 = v46 + 128;
    v52 = *((_QWORD *)v46 + 16);
    *((_QWORD *)v47 + 16) = v52;
    v53 = v47 + 128;
    v54 = *((_QWORD *)v46 + 17);
    *((_QWORD *)v47 + 17) = v54;
    if (v54)
    {
      *(_QWORD *)(v52 + 16) = v53;
      *((_QWORD *)v46 + 15) = v51;
      *v51 = 0;
      *((_QWORD *)v46 + 17) = 0;
    }
    else
    {
      *((_QWORD *)v47 + 15) = v53;
    }
    v44 += 144;
  }
  while (v45 != v44);
  v42 = *(char **)(a1 + 520);
  v59 = *(unsigned int *)(a1 + 528);
  if ((_DWORD)v59)
  {
    v60 = 144 * v59;
    v77 = *(char **)(a1 + 520);
    do
    {
      v61 = &v42[v60];
      sub_1C47655E8((uint64_t)&v42[v60 - 24], *(_QWORD **)&v42[v60 - 16]);
      v62 = (char *)*((_QWORD *)v61 - 13);
      if (v61 - 88 != v62)
        free(v62);
      v60 -= 144;
      v42 = v77;
    }
    while (v60);
    v42 = *(char **)(a1 + 520);
  }
LABEL_71:
  v63 = v81;
  if (v42 != (char *)(a1 + 536))
    free(v42);
  *(_QWORD *)(a1 + 520) = v21;
  *(_DWORD *)(a1 + 532) = v63;
  v64 = &v21[144 * v73];
  if (v74)
    v22 = (uint64_t *)&v21[144 * v73];
  else
    v22 = &v88;
  v65 = (__int128 *)(v64 + 8);
  v66 = (void **)(v64 + 40);
  v67 = (uint64_t *)(v64 + 48);
  v68 = &v91;
  if (v74)
    v68 = v67;
  v78 = v68;
  if (v74)
    v23 = v66;
  else
    v23 = &v90;
  if (v74)
    v17 = v65;
  LODWORD(v20) = *(_DWORD *)(a1 + 528);
  v19 = *v22;
LABEL_20:
  v24 = &v21[144 * v20];
  *(_QWORD *)v24 = v19;
  v25 = v24 + 56;
  v26 = *v17;
  v27 = *(__int128 *)((char *)v17 + 12);
  *((_QWORD *)v24 + 5) = v24 + 56;
  v28 = (uint64_t)(v24 + 40);
  *(_OWORD *)(v28 - 20) = v27;
  *(_OWORD *)(v28 - 32) = v26;
  *(_QWORD *)(v28 + 8) = 0x1000000000;
  if ((void **)v28 != v23)
  {
    v29 = *(unsigned int *)v78;
    if ((_DWORD)v29)
    {
      v37 = *v23;
      if (*v23 != v22 + 7)
      {
        *(_QWORD *)v28 = v37;
        *(_DWORD *)(v28 + 8) = v29;
        *(_DWORD *)(v28 + 12) = *((_DWORD *)v22 + 13);
        *v23 = v22 + 7;
        *((_DWORD *)v22 + 13) = 0;
        goto LABEL_35;
      }
      if (v29 >= 0x11)
      {
        v75 = (const void **)v23;
        llvm::SmallVectorBase<unsigned int>::grow_pod(v28, (uint64_t)v25, v29, 4);
        v38 = *(_DWORD *)v78;
        if (!*(_DWORD *)v78)
          goto LABEL_34;
        v37 = *v75;
        v25 = *(void **)v28;
      }
      else
      {
        v38 = *(_DWORD *)v78;
      }
      memcpy(v25, v37, 4 * v38);
LABEL_34:
      *(_DWORD *)(v28 + 8) = v29;
LABEL_35:
      *(_DWORD *)v78 = 0;
    }
  }
  v30 = &v21[144 * v20];
  *((_QWORD *)v30 + 15) = v22[15];
  v31 = (char **)(v30 + 120);
  v32 = v22 + 16;
  v33 = v22[16];
  *((_QWORD *)v30 + 16) = v33;
  v34 = v30 + 128;
  v35 = v22[17];
  *((_QWORD *)v34 + 1) = v35;
  if (v35)
  {
    *(_QWORD *)(v33 + 16) = v34;
    v22[15] = (uint64_t)v32;
    *v32 = 0;
    v22[17] = 0;
  }
  else
  {
    *v31 = v34;
  }
  ++*(_DWORD *)(a1 + 528);
  sub_1C47655E8((uint64_t)&v93, v94[0]);
  if (v90 != v92)
    free(v90);
  sub_1C47655E8((uint64_t)&v86, v87[0]);
  if (v83 != v85)
    free(v83);
  v15 = *(_DWORD *)(a1 + 528) - 1;
  *((_DWORD *)v18 + 2) = v15;
  return *(_QWORD *)(a1 + 520) + 144 * v15 + 8;
}

void llvm::AGX::PerformanceStatisticDiag::print(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  void *__p;
  char v5;

  llvm::AGX::str(a1 + 16);
  v3 = (*(uint64_t (**)(uint64_t, void **))(*(_QWORD *)a2 + 56))(a2, &__p);
  (*(void (**)(uint64_t, const char *))(*(_QWORD *)v3 + 48))(v3, "\n");
  if (v5 < 0)
    operator delete(__p);
}

uint64_t llvm::AGX::str(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  _QWORD *v7;
  _QWORD *v8;
  _QWORD *v9;
  _QWORD *v10;
  _QWORD *v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *v18;
  _QWORD *v19;
  _QWORD *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  _QWORD *v25;
  _QWORD *v26;
  _QWORD *v27;
  _QWORD *v28;
  _QWORD *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  _QWORD *v36;
  _QWORD *v37;
  _QWORD *v38;
  _QWORD *v39;
  _QWORD *v40;
  _QWORD *v41;
  _QWORD *v42;
  _QWORD *v43;
  _QWORD *v44;
  _QWORD *v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *v48;
  _QWORD *v49;
  _QWORD *v50;
  _QWORD *v51;
  _QWORD *v52;
  _QWORD *v53;
  _QWORD *v54;
  _QWORD *v55;
  _QWORD *v56;
  _QWORD *v57;
  _QWORD *v58;
  _QWORD *v59;
  _QWORD *v60;
  _QWORD *v61;
  _QWORD *v62;
  _QWORD *v63;
  _QWORD *v64;
  _QWORD *v65;
  _QWORD *v66;
  _QWORD *v67;
  _QWORD *v68;
  _QWORD *v69;
  _QWORD *v70;
  _QWORD *v71;
  _QWORD *v72;
  _QWORD *v73;
  _QWORD *v74;
  _QWORD *v75;
  _QWORD *v76;
  _QWORD *v77;
  _QWORD *v78;
  _QWORD *v79;
  _QWORD *v80;
  _QWORD *v81;
  _QWORD *v82;
  _QWORD *v83;
  _QWORD *v84;
  _QWORD *v85;
  _QWORD *v86;
  _QWORD *v87;
  _QWORD *v88;
  _QWORD *v89;
  _QWORD *v90;
  _QWORD *v91;
  _QWORD *v92;
  _QWORD *v93;
  _QWORD *v94;
  _QWORD *v95;
  _QWORD *v96;
  _QWORD *v97;
  _QWORD *v98;
  _QWORD *v99;
  _QWORD *v100;
  _QWORD *v101;
  _QWORD *v102;
  _QWORD *v103;
  _QWORD *v104;
  _QWORD *v105;
  _QWORD *v106;
  _QWORD *v107;
  _QWORD *v108;
  _QWORD *v109;
  _QWORD *v110;
  _QWORD *v111;
  _QWORD *v112;
  _QWORD *v113;
  _QWORD *v114;
  _QWORD *v115;
  _QWORD *v116;
  _QWORD *v117;
  _QWORD *v118;
  _QWORD *v119;
  _QWORD *v120;
  _QWORD *v121;
  _QWORD *v122;
  _QWORD *v123;
  _QWORD *v124;
  _QWORD *v125;
  _QWORD *v126;
  _QWORD *v127;
  _QWORD *v128;
  _QWORD *v129;
  _QWORD *v130;
  _QWORD *v131;
  _QWORD *v132;
  _QWORD *v133;
  _QWORD *v134;
  _QWORD *v135;
  _QWORD *v136;
  _QWORD *v137;
  _QWORD *v138;
  _QWORD *v139;
  _QWORD *v140;
  _QWORD *v141;
  _QWORD *v142;
  _QWORD *v143;
  _QWORD *v144;
  _QWORD *v145;
  _QWORD *v146;
  _QWORD *v147;
  _QWORD *v148;
  _QWORD *v149;
  _QWORD *v150;
  _QWORD *v151;
  uint64_t v152;
  _QWORD v154[2];
  _QWORD v155[11];
  char v156;
  uint64_t v157;

  sub_1C4D7C8B4((uint64_t)v154);
  sub_1C4D7C62C(v155, (uint64_t)"\"Instrs\":", 9);
  std::ostream::operator<<();
  if (*(_DWORD *)(a1 + 48) != -1)
  {
    v2 = sub_1C4D7C62C(v155, (uint64_t)", \"", 3);
    v3 = sub_1C4D7C62C(v2, (uint64_t)"RateScaledInstructions", 22);
    sub_1C4D7C62C(v3, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(_DWORD *)(a1 + 8) != -1)
  {
    v4 = sub_1C4D7C62C(v155, (uint64_t)", \"", 3);
    v5 = sub_1C4D7C62C(v4, (uint64_t)"NumFullRateInstructions", 23);
    sub_1C4D7C62C(v5, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(_DWORD *)(a1 + 12) != -1)
  {
    v6 = sub_1C4D7C62C(v155, (uint64_t)", \"", 3);
    v7 = sub_1C4D7C62C(v6, (uint64_t)"NumHalfRateInstructions", 23);
    sub_1C4D7C62C(v7, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(_DWORD *)(a1 + 16) != -1)
  {
    v8 = sub_1C4D7C62C(v155, (uint64_t)", \"", 3);
    v9 = sub_1C4D7C62C(v8, (uint64_t)"NumThirdRateInstructions", 24);
    sub_1C4D7C62C(v9, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(_DWORD *)(a1 + 20) != -1)
  {
    v10 = sub_1C4D7C62C(v155, (uint64_t)", \"", 3);
    v11 = sub_1C4D7C62C(v10, (uint64_t)"NumQuarterRateInstructions", 26);
    sub_1C4D7C62C(v11, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(_DWORD *)(a1 + 24) != -1)
  {
    v12 = sub_1C4D7C62C(v155, (uint64_t)", \"", 3);
    v13 = sub_1C4D7C62C(v12, (uint64_t)"NumFifthRateInstructions", 24);
    sub_1C4D7C62C(v13, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(_DWORD *)(a1 + 28) != -1)
  {
    v14 = sub_1C4D7C62C(v155, (uint64_t)", \"", 3);
    v15 = sub_1C4D7C62C(v14, (uint64_t)"NumSixthRateInstructions", 24);
    sub_1C4D7C62C(v15, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(_DWORD *)(a1 + 32) != -1)
  {
    v16 = sub_1C4D7C62C(v155, (uint64_t)", \"", 3);
    v17 = sub_1C4D7C62C(v16, (uint64_t)"NumEighthRateInstructions", 25);
    sub_1C4D7C62C(v17, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(_DWORD *)(a1 + 36) != -1)
  {
    v18 = sub_1C4D7C62C(v155, (uint64_t)", \"", 3);
    v19 = sub_1C4D7C62C(v18, (uint64_t)"NumTwelfthRateInstructions", 26);
    sub_1C4D7C62C(v19, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(_DWORD *)(a1 + 40) != -1)
  {
    v20 = sub_1C4D7C62C(v155, (uint64_t)", \"", 3);
    v21 = sub_1C4D7C62C(v20, (uint64_t)"NumSixteenthRateInstructions", 28);
    sub_1C4D7C62C(v21, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(_DWORD *)(a1 + 44) != -1)
  {
    v22 = sub_1C4D7C62C(v155, (uint64_t)", \"", 3);
    v23 = sub_1C4D7C62C(v22, (uint64_t)"NumThirtySecondRateInstructions", 31);
    sub_1C4D7C62C(v23, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(_DWORD *)(a1 + 228) != -1)
  {
    v24 = sub_1C4D7C62C(v155, (uint64_t)", \"", 3);
    v25 = sub_1C4D7C62C(v24, (uint64_t)"RegsAllocated", 13);
    sub_1C4D7C62C(v25, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if ((*(_QWORD *)(a1 + 428) & 0xFF00000000) != 0)
  {
    v26 = sub_1C4D7C62C(v155, (uint64_t)", \"", 3);
    v27 = sub_1C4D7C62C(v26, (uint64_t)"GPRUnusableOccupancy", 20);
    sub_1C4D7C62C(v27, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(_DWORD *)(a1 + 176) != -1)
  {
    v28 = sub_1C4D7C62C(v155, (uint64_t)", \"", 3);
    v29 = sub_1C4D7C62C(v28, (uint64_t)"SampleInstrs", 12);
    sub_1C4D7C62C(v29, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(_DWORD *)(a1 + 192) != -1)
  {
    v30 = sub_1C4D7C62C(v155, (uint64_t)", \"", 3);
    v31 = sub_1C4D7C62C(v30, (uint64_t)"GlobalLdInstrs", 14);
    sub_1C4D7C62C(v31, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(_DWORD *)(a1 + 196) != -1)
  {
    v32 = sub_1C4D7C62C(v155, (uint64_t)", \"", 3);
    v33 = sub_1C4D7C62C(v32, (uint64_t)"GlobalStInstrs", 14);
    sub_1C4D7C62C(v33, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(_DWORD *)(a1 + 208) != -1)
  {
    v34 = sub_1C4D7C62C(v155, (uint64_t)", \"", 3);
    v35 = sub_1C4D7C62C(v34, (uint64_t)"StackLdInstrs", 13);
    sub_1C4D7C62C(v35, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(_DWORD *)(a1 + 212) != -1)
  {
    v36 = sub_1C4D7C62C(v155, (uint64_t)", \"", 3);
    v37 = sub_1C4D7C62C(v36, (uint64_t)"StackStInstrs", 13);
    sub_1C4D7C62C(v37, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(_DWORD *)(a1 + 224) != -1)
  {
    v38 = sub_1C4D7C62C(v155, (uint64_t)", \"", 3);
    v39 = sub_1C4D7C62C(v38, (uint64_t)"CopyGPRInstrs", 13);
    sub_1C4D7C62C(v39, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(_DWORD *)(a1 + 168) != -1)
  {
    v40 = sub_1C4D7C62C(v155, (uint64_t)", \"", 3);
    v41 = sub_1C4D7C62C(v40, (uint64_t)"BrInstrs", 8);
    sub_1C4D7C62C(v41, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(_DWORD *)(a1 + 280) != -1)
  {
    v42 = sub_1C4D7C62C(v155, (uint64_t)", \"", 3);
    v43 = sub_1C4D7C62C(v42, (uint64_t)"VertexInRegs", 12);
    sub_1C4D7C62C(v43, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(_DWORD *)(a1 + 232) != -1)
  {
    v44 = sub_1C4D7C62C(v155, (uint64_t)", \"", 3);
    v45 = sub_1C4D7C62C(v44, (uint64_t)"RegsUsed", 8);
    sub_1C4D7C62C(v45, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(_DWORD *)(a1 + 268) != -1)
  {
    v46 = sub_1C4D7C62C(v155, (uint64_t)", \"", 3);
    v47 = sub_1C4D7C62C(v46, (uint64_t)"StackSz", 7);
    sub_1C4D7C62C(v47, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(_DWORD *)(a1 + 276) != -1)
  {
    v48 = sub_1C4D7C62C(v155, (uint64_t)", \"", 3);
    v49 = sub_1C4D7C62C(v48, (uint64_t)"MaxIPRSz", 8);
    sub_1C4D7C62C(v49, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(_DWORD *)(a1 + 252) != -1)
  {
    v50 = sub_1C4D7C62C(v155, (uint64_t)", \"", 3);
    v51 = sub_1C4D7C62C(v50, (uint64_t)"FlagRegCount", 12);
    sub_1C4D7C62C(v51, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(_DWORD *)(a1 + 420) != -1)
  {
    v52 = sub_1C4D7C62C(v155, (uint64_t)", \"", 3);
    v53 = sub_1C4D7C62C(v52, (uint64_t)"IRsLiveOut", 10);
    sub_1C4D7C62C(v53, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(_DWORD *)(a1 + 92) != -1)
  {
    v54 = sub_1C4D7C62C(v155, (uint64_t)", \"", 3);
    v55 = sub_1C4D7C62C(v54, (uint64_t)"UniformReadBytes", 16);
    sub_1C4D7C62C(v55, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(_DWORD *)(a1 + 304) != -1)
  {
    v56 = sub_1C4D7C62C(v155, (uint64_t)", \"", 3);
    v57 = sub_1C4D7C62C(v56, (uint64_t)"NumLoops", 8);
    sub_1C4D7C62C(v57, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(_DWORD *)(a1 + 308) != -1)
  {
    v58 = sub_1C4D7C62C(v155, (uint64_t)", \"", 3);
    v59 = sub_1C4D7C62C(v58, (uint64_t)"TotalLoopInsts", 14);
    sub_1C4D7C62C(v59, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(_DWORD *)(a1 + 312) != -1)
  {
    v60 = sub_1C4D7C62C(v155, (uint64_t)", \"", 3);
    v61 = sub_1C4D7C62C(v60, (uint64_t)"TotalLoopDataInsts", 18);
    sub_1C4D7C62C(v61, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(_QWORD *)(a1 + 320) != -1)
  {
    v62 = sub_1C4D7C62C(v155, (uint64_t)", \"", 3);
    v63 = sub_1C4D7C62C(v62, (uint64_t)"WaitAndStallTime", 16);
    sub_1C4D7C62C(v63, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(double *)(a1 + 328) != -1.0)
  {
    v64 = sub_1C4D7C62C(v155, (uint64_t)", \"", 3);
    v65 = sub_1C4D7C62C(v64, (uint64_t)"IntegralRegPressure", 19);
    sub_1C4D7C62C(v65, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(double *)(a1 + 336) != -1.0)
  {
    v66 = sub_1C4D7C62C(v155, (uint64_t)", \"", 3);
    v67 = sub_1C4D7C62C(v66, (uint64_t)"IntegralIRSTKPressure", 21);
    sub_1C4D7C62C(v67, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(double *)(a1 + 344) != -1.0)
  {
    v68 = sub_1C4D7C62C(v155, (uint64_t)", \"", 3);
    v69 = sub_1C4D7C62C(v68, (uint64_t)"IntegralGPRPressure", 19);
    sub_1C4D7C62C(v69, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(double *)(a1 + 352) != -1.0)
  {
    v70 = sub_1C4D7C62C(v155, (uint64_t)", \"", 3);
    v71 = sub_1C4D7C62C(v70, (uint64_t)"NumDeactivations", 16);
    sub_1C4D7C62C(v71, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(_DWORD *)(a1 + 360) != -1)
  {
    v72 = sub_1C4D7C62C(v155, (uint64_t)", \"", 3);
    v73 = sub_1C4D7C62C(v72, (uint64_t)"NumTagChecks", 12);
    sub_1C4D7C62C(v73, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(_QWORD *)(a1 + 368) != -1)
  {
    v74 = sub_1C4D7C62C(v155, (uint64_t)", \"", 3);
    v75 = sub_1C4D7C62C(v74, (uint64_t)"TotalIssueTime", 14);
    sub_1C4D7C62C(v75, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(_QWORD *)(a1 + 376) != -1)
  {
    v76 = sub_1C4D7C62C(v155, (uint64_t)", \"", 3);
    v77 = sub_1C4D7C62C(v76, (uint64_t)"TotalShaderLatency", 18);
    sub_1C4D7C62C(v77, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(_QWORD *)(a1 + 384) != -1)
  {
    v78 = sub_1C4D7C62C(v155, (uint64_t)", \"", 3);
    v79 = sub_1C4D7C62C(v78, (uint64_t)"TotalTimeInChannel", 18);
    sub_1C4D7C62C(v79, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(_QWORD *)(a1 + 392) != -1)
  {
    v80 = sub_1C4D7C62C(v155, (uint64_t)", \"", 3);
    v81 = sub_1C4D7C62C(v80, (uint64_t)"TotalCycleCount", 15);
    sub_1C4D7C62C(v81, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(_DWORD *)(a1 + 400) != -1)
  {
    v82 = sub_1C4D7C62C(v155, (uint64_t)", \"", 3);
    v83 = sub_1C4D7C62C(v82, (uint64_t)"UL1ReadsWrites", 14);
    sub_1C4D7C62C(v83, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(_DWORD *)(a1 + 436) != -1)
  {
    v84 = sub_1C4D7C62C(v155, (uint64_t)", \"", 3);
    v85 = sub_1C4D7C62C(v84, (uint64_t)"TPP", 3);
    sub_1C4D7C62C(v85, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(_DWORD *)(a1 + 448) != -1)
  {
    v86 = sub_1C4D7C62C(v155, (uint64_t)", \"", 3);
    v87 = sub_1C4D7C62C(v86, (uint64_t)"ResBusForwards", 14);
    sub_1C4D7C62C(v87, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(_DWORD *)(a1 + 192) != -1)
  {
    v88 = sub_1C4D7C62C(v155, (uint64_t)", \"", 3);
    v89 = sub_1C4D7C62C(v88, (uint64_t)"GenericLdInstrs", 15);
    sub_1C4D7C62C(v89, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (*(_DWORD *)(a1 + 196) != -1)
  {
    v90 = sub_1C4D7C62C(v155, (uint64_t)", \"", 3);
    v91 = sub_1C4D7C62C(v90, (uint64_t)"GenericStInstrs", 15);
    sub_1C4D7C62C(v91, (uint64_t)"\":", 2);
    std::ostream::operator<<();
  }
  if (byte_1ED8313B8)
  {
    if (*(_DWORD *)(a1 + 416) != -1)
    {
      v92 = sub_1C4D7C62C(v155, (uint64_t)", \"", 3);
      v93 = sub_1C4D7C62C(v92, (uint64_t)"GPRsLiveOut", 11);
      sub_1C4D7C62C(v93, (uint64_t)"\":", 2);
      std::ostream::operator<<();
    }
    if (*(_DWORD *)(a1 + 420) != -1)
    {
      v94 = sub_1C4D7C62C(v155, (uint64_t)", \"", 3);
      v95 = sub_1C4D7C62C(v94, (uint64_t)"IRsLiveOut", 10);
      sub_1C4D7C62C(v95, (uint64_t)"\":", 2);
      std::ostream::operator<<();
    }
    if (*(_DWORD *)(a1 + 424) != -1)
    {
      v96 = sub_1C4D7C62C(v155, (uint64_t)", \"", 3);
      v97 = sub_1C4D7C62C(v96, (uint64_t)"STKsLiveOut", 11);
      sub_1C4D7C62C(v97, (uint64_t)"\":", 2);
      std::ostream::operator<<();
    }
    if (*(_DWORD *)(a1 + 404) != -1)
    {
      v98 = sub_1C4D7C62C(v155, (uint64_t)", \"", 3);
      v99 = sub_1C4D7C62C(v98, (uint64_t)"NumLUForwardedDuringSched", 25);
      sub_1C4D7C62C(v99, (uint64_t)"\":", 2);
      std::ostream::operator<<();
    }
    if (*(_DWORD *)(a1 + 408) != -1)
    {
      v100 = sub_1C4D7C62C(v155, (uint64_t)", \"", 3);
      v101 = sub_1C4D7C62C(v100, (uint64_t)"NumNonLUForwardedDuringSched", 28);
      sub_1C4D7C62C(v101, (uint64_t)"\":", 2);
      std::ostream::operator<<();
    }
    if (*(_DWORD *)(a1 + 412) != -1)
    {
      v102 = sub_1C4D7C62C(v155, (uint64_t)", \"", 3);
      v103 = sub_1C4D7C62C(v102, (uint64_t)"NumSampleTargetingSameTexClustered", 34);
      sub_1C4D7C62C(v103, (uint64_t)"\":", 2);
      std::ostream::operator<<();
    }
    if (*(_DWORD *)(a1 + 136) != -1)
    {
      v104 = sub_1C4D7C62C(v155, (uint64_t)", \"", 3);
      v105 = sub_1C4D7C62C(v104, (uint64_t)"NumAfterDis2x2", 14);
      sub_1C4D7C62C(v105, (uint64_t)"\":", 2);
      std::ostream::operator<<();
    }
    sub_1C4D7C62C(v155, (uint64_t)", \"DataInstrs\":", 15);
    v106 = (_QWORD *)std::ostream::operator<<();
    sub_1C4D7C62C(v106, (uint64_t)", \"ControlInstrs\":", 18);
    v107 = (_QWORD *)std::ostream::operator<<();
    sub_1C4D7C62C(v107, (uint64_t)", \"MoveInstrs\":", 15);
    v108 = (_QWORD *)std::ostream::operator<<();
    sub_1C4D7C62C(v108, (uint64_t)", \"ImmInstrs\":", 14);
    v109 = (_QWORD *)std::ostream::operator<<();
    sub_1C4D7C62C(v109, (uint64_t)", \"ALUInstrs\":", 14);
    v110 = (_QWORD *)std::ostream::operator<<();
    sub_1C4D7C62C(v110, (uint64_t)", \"Int16Instrs\":", 16);
    v111 = (_QWORD *)std::ostream::operator<<();
    sub_1C4D7C62C(v111, (uint64_t)", \"Int32Instrs\":", 16);
    v112 = (_QWORD *)std::ostream::operator<<();
    sub_1C4D7C62C(v112, (uint64_t)", \"FP16Instrs\":", 15);
    v113 = (_QWORD *)std::ostream::operator<<();
    sub_1C4D7C62C(v113, (uint64_t)", \"FP32Instrs\":", 15);
    v114 = (_QWORD *)std::ostream::operator<<();
    sub_1C4D7C62C(v114, (uint64_t)", \"LocalLdInstrs\":", 18);
    v115 = (_QWORD *)std::ostream::operator<<();
    sub_1C4D7C62C(v115, (uint64_t)", \"LocalStInstrs\":", 18);
    v116 = (_QWORD *)std::ostream::operator<<();
    sub_1C4D7C62C(v116, (uint64_t)", \"ComplexInstrs\":", 18);
    v117 = (_QWORD *)std::ostream::operator<<();
    sub_1C4D7C62C(v117, (uint64_t)", \"AtomicInstrs\":", 17);
    v118 = (_QWORD *)std::ostream::operator<<();
    sub_1C4D7C62C(v118, (uint64_t)", \"UniformMoveInstrs\":", 22);
    v119 = (_QWORD *)std::ostream::operator<<();
    sub_1C4D7C62C(v119, (uint64_t)", \"UniformLdInstrs\":", 20);
    v120 = (_QWORD *)std::ostream::operator<<();
    sub_1C4D7C62C(v120, (uint64_t)", \"UniformMoveSz\":", 18);
    v121 = (_QWORD *)std::ostream::operator<<();
    sub_1C4D7C62C(v121, (uint64_t)", \"UniformLdSz\":", 16);
    v122 = (_QWORD *)std::ostream::operator<<();
    sub_1C4D7C62C(v122, (uint64_t)", \"LatencyHidingInstrs\":", 24);
    v123 = (_QWORD *)std::ostream::operator<<();
    sub_1C4D7C62C(v123, (uint64_t)", \"TotalStallCycles\":", 21);
    v124 = (_QWORD *)std::ostream::operator<<();
    sub_1C4D7C62C(v124, (uint64_t)", \"ImmStallCycles\":", 19);
    v125 = (_QWORD *)std::ostream::operator<<();
    sub_1C4D7C62C(v125, (uint64_t)", \"F16StallCycles\":", 19);
    v126 = (_QWORD *)std::ostream::operator<<();
    sub_1C4D7C62C(v126, (uint64_t)", \"F32StallCycles\":", 19);
    v127 = (_QWORD *)std::ostream::operator<<();
    sub_1C4D7C62C(v127, (uint64_t)", \"ComplexStallCycles\":", 23);
    v128 = (_QWORD *)std::ostream::operator<<();
    sub_1C4D7C62C(v128, (uint64_t)", \"MathCycles\":", 15);
    v129 = (_QWORD *)std::ostream::operator<<();
    sub_1C4D7C62C(v129, (uint64_t)", \"MathClauses\":", 16);
    v130 = (_QWORD *)std::ostream::operator<<();
    sub_1C4D7C62C(v130, (uint64_t)", \"ShortClauseInefficiency\":", 28);
    v131 = (_QWORD *)std::ostream::operator<<();
    sub_1C4D7C62C(v131, (uint64_t)", \"AfterPixwaitInstrs\":", 23);
    v132 = (_QWORD *)std::ostream::operator<<();
    sub_1C4D7C62C(v132, (uint64_t)", \"AfterDis2x2Instrs\":", 22);
    v133 = (_QWORD *)std::ostream::operator<<();
    sub_1C4D7C62C(v133, (uint64_t)", \"AvgDis2x2InstID\":", 20);
    v134 = (_QWORD *)std::ostream::operator<<();
    sub_1C4D7C62C(v134, (uint64_t)", \"UnpairedMoveInstrs\":", 23);
    v135 = (_QWORD *)std::ostream::operator<<();
    sub_1C4D7C62C(v135, (uint64_t)", \"RegWrbacks\":", 15);
    v136 = (_QWORD *)std::ostream::operator<<();
    sub_1C4D7C62C(v136, (uint64_t)", \"MoveInstrWrbacks\":", 21);
    v137 = (_QWORD *)std::ostream::operator<<();
    sub_1C4D7C62C(v137, (uint64_t)", \"RegsFwded\":", 14);
    v138 = (_QWORD *)std::ostream::operator<<();
    sub_1C4D7C62C(v138, (uint64_t)", \"WDFInstrs\":", 14);
    v139 = (_QWORD *)std::ostream::operator<<();
    sub_1C4D7C62C(v139, (uint64_t)", \"IterateInstrs\":", 18);
    v140 = (_QWORD *)std::ostream::operator<<();
    sub_1C4D7C62C(v140, (uint64_t)", \"ForwardedIterates\":", 22);
    v141 = (_QWORD *)std::ostream::operator<<();
    sub_1C4D7C62C(v141, (uint64_t)", \"LoadCoefInstrs\":", 19);
    v142 = (_QWORD *)std::ostream::operator<<();
    sub_1C4D7C62C(v142, (uint64_t)", \"CoeffRegs\":", 14);
    v143 = (_QWORD *)std::ostream::operator<<();
    sub_1C4D7C62C(v143, (uint64_t)", \"UniformRegs\":", 16);
    v144 = (_QWORD *)std::ostream::operator<<();
    sub_1C4D7C62C(v144, (uint64_t)", \"TextureRegs\":", 16);
    v145 = (_QWORD *)std::ostream::operator<<();
    sub_1C4D7C62C(v145, (uint64_t)", \"SamplerRegs\":", 16);
    v146 = (_QWORD *)std::ostream::operator<<();
    sub_1C4D7C62C(v146, (uint64_t)", \"CProgInstrs\":", 16);
    v147 = (_QWORD *)std::ostream::operator<<();
    sub_1C4D7C62C(v147, (uint64_t)", \"ImgStateBdgSz\":", 18);
    v148 = (_QWORD *)std::ostream::operator<<();
    sub_1C4D7C62C(v148, (uint64_t)", \"SmpStateBdgSz\":", 18);
    v149 = (_QWORD *)std::ostream::operator<<();
    sub_1C4D7C62C(v149, (uint64_t)", \"ThreadInvStackSz\":", 21);
    v150 = (_QWORD *)std::ostream::operator<<();
    sub_1C4D7C62C(v150, (uint64_t)", \"ControlDataSwitches\":", 24);
    v151 = (_QWORD *)std::ostream::operator<<();
    sub_1C4D7C62C(v151, (uint64_t)", \"NumLoops\":", 13);
    std::ostream::operator<<();
  }
  std::stringbuf::str();
  v154[0] = *MEMORY[0x1E0DE4F50];
  v152 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
  *(_QWORD *)((char *)v154 + *(_QWORD *)(v154[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
  v155[0] = v152;
  v155[1] = MEMORY[0x1E0DE4FB8] + 16;
  if (v156 < 0)
    operator delete((void *)v155[9]);
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return MEMORY[0x1CAA32F18](&v157);
}

uint64_t sub_1C5593CE4()
{
  __int128 v1;

  *(_QWORD *)&v1 = "Print detailed performance statistic diagnostics";
  *((_QWORD *)&v1 + 1) = 48;
  sub_1C627A280(&v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, PrintDetailedPerfDiags, &dword_1C475E000);
}

uint64_t sub_1C5593D2C()
{
  __int128 v1;
  char v2;
  char *v3;

  *(_QWORD *)&v1 = "Print human-readable operand annotations.";
  *((_QWORD *)&v1 + 1) = 41;
  v2 = 0;
  v3 = &v2;
  sub_1C6136B80((uint64_t)&PrintOperandAnnotations, "print-operand-anotations", &v1, &v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &PrintOperandAnnotations, &dword_1C475E000);
  *(_QWORD *)&v1 = "Print raw integer FP immediates (useful for roundtripping).";
  *((_QWORD *)&v1 + 1) = 59;
  v2 = 0;
  v3 = &v2;
  sub_1C6136B80((uint64_t)&PrintRawFloatImms, "print-raw-float-imms", &v1, &v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &PrintRawFloatImms, &dword_1C475E000);
  *(_QWORD *)&v1 = "Print human-readable FP immediates.";
  *((_QWORD *)&v1 + 1) = 35;
  v2 = 1;
  v3 = &v2;
  sub_1C6136B80((uint64_t)&PrintHumanFloatImms, "print-human-float-imms", &v1, &v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &PrintHumanFloatImms, &dword_1C475E000);
  *(_QWORD *)&v1 = "Print additional comment statistics like ALU Live Regs.";
  *((_QWORD *)&v1 + 1) = 55;
  v2 = 1;
  v3 = &v2;
  sub_1C614D990((uint64_t)&PrintAdditionalCommentStats, "print-comment-stats", &v1, &v3);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &PrintAdditionalCommentStats, &dword_1C475E000);
  v2 = 1;
  v3 = &v2;
  *(_QWORD *)&v1 = "Control if a branch label gets printed for diff purposes.";
  *((_QWORD *)&v1 + 1) = 57;
  sub_1C617586C((uint64_t)&PrintBranchLabels, "print-branch-labels", &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &PrintBranchLabels, &dword_1C475E000);
  v2 = 0;
  v3 = &v2;
  *(_QWORD *)&v1 = "Print registers canonically.";
  *((_QWORD *)&v1 + 1) = 28;
  sub_1C627A31C(&v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, PrintCanonicalRegs, &dword_1C475E000);
}

uint64_t sub_1C5593F14(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "AGX Expand Builtins";
  *(_QWORD *)(v2 + 8) = 19;
  *(_QWORD *)(v2 + 16) = "agx-expand-builtins";
  *(_QWORD *)(v2 + 24) = 19;
  *(_QWORD *)(v2 + 32) = &unk_1ED806508;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C627A47C;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C5593FA0(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  uint64_t *v6;
  uint64_t v7;
  unint64_t v15;
  _QWORD *v16;
  _QWORD v17[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED806508;
  *(_DWORD *)(a1 + 24) = 4;
  *(_QWORD *)a1 = &off_1E816FA48;
  if ((a2 & 0xFF00000000) == 0)
  {
    v6 = &qword_1ED806598;
    if (byte_1ED8065AF < 0)
      v6 = (uint64_t *)qword_1ED806598;
    v7 = byte_1ED8065AF & 0x7F;
    if (byte_1ED8065AF < 0)
      v7 = unk_1ED8065A0;
    if (v7 == 3)
    {
      if (*(_WORD *)v6 == 12647 && *((_BYTE *)v6 + 2) == 48)
      {
        LODWORD(a2) = 4;
      }
      else if (*(_WORD *)v6 == 12647 && *((_BYTE *)v6 + 2) == 49)
      {
        LODWORD(a2) = 5;
      }
      else if (*(_WORD *)v6 == 12647 && *((_BYTE *)v6 + 2) == 50)
      {
        LODWORD(a2) = 6;
      }
      else if (*(_WORD *)v6 == 12647 && *((_BYTE *)v6 + 2) == 51)
      {
        LODWORD(a2) = 7;
      }
      else if (*(_WORD *)v6 == 12647 && *((_BYTE *)v6 + 2) == 52)
      {
        LODWORD(a2) = 9;
      }
      else if (*(_WORD *)v6 == 12647 && *((_BYTE *)v6 + 2) == 53)
      {
        LODWORD(a2) = 10;
      }
      else if (*(_WORD *)v6 == 12647 && *((_BYTE *)v6 + 2) == 54)
      {
        LODWORD(a2) = 11;
      }
      else if (*(unsigned __int16 *)v6 ^ 0x3167 | *((unsigned __int8 *)v6 + 2) ^ 0x37)
      {
        LODWORD(a2) = 0;
      }
      else
      {
        LODWORD(a2) = 12;
      }
    }
    else if (v7 == 2)
    {
      if (*(_WORD *)v6 == 13415)
      {
        LODWORD(a2) = 1;
      }
      else
      {
        LODWORD(a2) = 2;
        if (*(_WORD *)v6 != 13671)
        {
          if (*(_WORD *)v6 == 14695)
            LODWORD(a2) = 3;
          else
            LODWORD(a2) = 0;
        }
      }
    }
    else
    {
      LODWORD(a2) = 0;
    }
  }
  *(_DWORD *)(a1 + 28) = a2;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v15 = qword_1ED830BC0[0];
  v4 = atomic_load(&qword_1ED806510);
  if (v4 != -1)
  {
    v17[0] = sub_1C5593F14;
    v17[1] = &v15;
    v16 = v17;
    std::__call_once(&qword_1ED806510, &v16, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C5594214(uint64_t a1, uint64_t *a2)
{
  uint64_t *v2;
  uint64_t *v3;
  unsigned int *v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  int v11;
  _DWORD *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  char *v16;
  int v17;
  void **v18;
  uint64_t *v19;
  uint64_t Declaration;
  uint64_t **v21;
  uint64_t v22;
  uint64_t v23;
  llvm::GetElementPtrInst *v24;
  int v25;
  llvm::GetElementPtrInst *v26;
  unsigned int i;
  uint64_t ***v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  llvm::UndefValue *v33;
  llvm::Type *v34;
  const llvm::APInt *v35;
  unsigned __int8 *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  llvm::ConstantInt *v40;
  unsigned int v41;
  unint64_t v42;
  llvm::ValueHandleBase *v43;
  uint64_t v44;
  _QWORD *v45;
  uint64_t *v46;
  uint64_t v47;
  _DWORD *v48;
  unsigned int v49;
  char v50;
  uint64_t *v51;
  uint64_t v52;
  uint64_t **v53;
  char *v54;
  void *v55;
  uint64_t ***v56;
  uint64_t **v57;
  uint64_t v58;
  uint64_t **v59;
  uint64_t ***v60;
  uint64_t ***v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t ****v66;
  uint64_t ***v67;
  int v68;
  int v69;
  uint64_t ***v70;
  uint64_t **v71;
  uint64_t v72;
  uint64_t ****v73;
  char *v74;
  _QWORD *v75;
  uint64_t *v76;
  BOOL v77;
  BOOL v78;
  uint64_t v79;
  uint64_t v80;
  uint64_t *v81;
  _QWORD *v82;
  int v83;
  uint64_t **v84;
  uint64_t v85;
  uint64_t v86;
  void *v87;
  void *v88;
  unsigned int v89;
  unsigned int v90;
  llvm::Value *v91;
  uint64_t v92;
  void *v93;
  void *v94;
  unsigned int v95;
  uint64_t v96;
  unsigned __int8 *v97;
  unsigned int v98;
  uint64_t v99;
  unsigned int v100;
  llvm::Type *v101;
  uint64_t v102;
  void *v103;
  void *v104;
  unint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  llvm::GetElementPtrInst *v108;
  uint64_t v109;
  _QWORD *v110;
  uint64_t v111;
  uint64_t v112;
  char *v113;
  uint64_t v114;
  BOOL v115;
  uint64_t v116;
  _QWORD *v117;
  uint64_t *v118;
  uint64_t *v119;
  char v120;
  uint64_t *v121;
  int v122;
  int v123;
  uint64_t v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unsigned __int8 *v130;
  uint64_t v131;
  unsigned __int8 *v132;
  uint64_t v133;
  int v134;
  int v135;
  uint64_t v136;
  uint64_t v137;
  unint64_t v138;
  unint64_t v139;
  unsigned int v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  unsigned __int8 *v145;
  uint64_t v146;
  uint64_t v147;
  unsigned __int8 *v148;
  uint64_t v149;
  uint64_t **v150;
  llvm::Value *v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  unsigned int v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t *v160;
  void **v161;
  llvm::Value *v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  int v168;
  llvm::Type *v169;
  int v170;
  uint64_t v171;
  int v172;
  char v173;
  llvm::APFloatBase *NaN;
  char v175;
  unsigned int v176;
  uint64_t *v177;
  uint64_t v178;
  BOOL v179;
  uint64_t *v180;
  uint64_t v181;
  BOOL v182;
  uint64_t v183;
  BOOL v184;
  uint64_t v185;
  uint64_t v186;
  llvm::Value *v187;
  BOOL v188;
  uint64_t v189;
  uint64_t **v190;
  llvm::APFloatBase *v191;
  uint64_t v192;
  int v193;
  llvm::APFloatBase **v194;
  void **v195;
  uint64_t v196;
  int v197;
  uint64_t *v198;
  int v199;
  int v200;
  uint64_t *v201;
  uint64_t v202;
  int v203;
  uint64_t *v204;
  int v205;
  int v206;
  uint64_t v207;
  _DWORD *v208;
  char v209;
  int v210;
  _BOOL4 v212;
  uint64_t v214;
  const char **v215;
  const char **v216;
  unint64_t v217;
  const char *v218;
  llvm::Type *v219;
  uint64_t *v220;
  uint64_t v221;
  int v222;
  uint64_t ***v223;
  unint64_t v224;
  llvm::APFloatBase *v225;
  uint64_t *v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  unsigned __int8 *v230;
  uint64_t v231;
  uint64_t *v232;
  unsigned __int8 *v233;
  BOOL v234;
  uint64_t v235;
  unsigned __int8 *v236;
  uint64_t j;
  uint64_t v238;
  uint64_t v239;
  llvm::ValueAsMetadata *v240;
  int v241;
  uint64_t *v242;
  uint64_t v243;
  int v244;
  uint64_t v245;
  llvm::ConstantInt *v246;
  void **v247;
  void *v248;
  uint64_t v249;
  const char *v250;
  uint64_t v251;
  unsigned __int8 *Intrinsic;
  unsigned __int8 *v253;
  llvm::UndefValue *v254;
  llvm::Type *v255;
  llvm::Value *v256;
  uint64_t v257;
  unsigned int v258;
  unsigned int v259;
  unsigned int v260;
  unsigned int v261;
  int v262;
  unsigned int v263;
  llvm::Value **v264;
  uint64_t ***v265;
  const llvm::APInt *v266;
  uint64_t v267;
  llvm::ConstantInt *v268;
  llvm::ValueHandleBase *v269;
  const llvm::APInt *v270;
  unsigned __int8 *v271;
  llvm::ConstantInt *v272;
  unsigned int v273;
  char v274;
  llvm::ValueHandleBase *v275;
  const llvm::APInt *v276;
  unsigned __int8 *v277;
  llvm::ConstantInt *v278;
  unsigned int v279;
  unint64_t v280;
  llvm::ValueHandleBase *v281;
  const llvm::APInt *v282;
  unsigned __int8 *v283;
  uint64_t v284;
  llvm::ConstantInt *v285;
  unsigned int v286;
  unint64_t v287;
  llvm::ValueHandleBase *v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  uint64_t v292;
  const llvm::APInt *v293;
  uint64_t v294;
  llvm::ConstantInt *v295;
  unsigned int v296;
  int v297;
  llvm::ValueHandleBase *v298;
  unsigned __int8 *v299;
  unsigned __int8 *v300;
  unsigned int v301;
  unsigned int v302;
  unsigned int v303;
  llvm::Value **v304;
  const llvm::APInt *v305;
  uint64_t ***v306;
  uint64_t v307;
  unsigned int v308;
  llvm::ConstantInt *v309;
  unsigned int v310;
  int v311;
  llvm::ValueHandleBase *v312;
  unsigned __int8 *v313;
  const llvm::APInt *v314;
  uint64_t v315;
  uint64_t v316;
  llvm::ConstantInt *v317;
  unsigned int v318;
  unint64_t v319;
  llvm::ValueHandleBase *v320;
  unsigned __int8 *v321;
  llvm::Type *v322;
  const llvm::APInt *v323;
  llvm::UndefValue *v324;
  llvm::ConstantInt *v325;
  llvm::ValueHandleBase *v326;
  const llvm::APInt *v327;
  unsigned __int8 *v328;
  llvm::ConstantInt *v329;
  unsigned int v330;
  unint64_t v331;
  llvm::ValueHandleBase *v332;
  unsigned __int8 *v333;
  uint64_t v334;
  uint64_t *v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;
  _QWORD *v339;
  uint64_t *v340;
  llvm::ConstantInt **v341;
  char v342;
  int v343;
  char v344;
  llvm::ConstantInt *v345;
  char v346;
  char v347;
  uint64_t v348;
  uint64_t v349;
  uint64_t v350;
  uint64_t v351;
  uint64_t v352;
  uint64_t v353;
  _QWORD *v354;
  int v355;
  int v356;
  uint64_t v357;
  const llvm::APInt *v358;
  unsigned int PrimitiveSizeInBits;
  const llvm::APInt *v360;
  llvm::ValueHandleBase *v361;
  unint64_t v362;
  llvm::Value *v363;
  llvm::ValueHandleBase *v364;
  llvm::Value *v365;
  llvm::MDNode *Impl;
  char *v368;
  int v370;
  uint64_t v371;
  uint64_t *v372;
  uint64_t *v373;
  uint64_t *v374;
  llvm::ValueAsMetadata *v375;
  uint64_t v376;
  int v377;
  uint64_t *v378;
  _DWORD *v379;
  uint64_t *v380;
  uint64_t *v381;
  unsigned int v382;
  char v383;
  uint64_t *v384;
  int v385;
  unsigned int v386;
  char v387;
  unsigned int v388;
  llvm::GetElementPtrInst *v389;
  char v390;
  int v391;
  char v392;
  uint64_t v393;
  const char *v394;
  unsigned int v395;
  uint64_t v396;
  char v397;
  uint64_t *v398;
  int v399;
  const char *v400;
  llvm::ConstantInt *v401;
  unsigned int v402;
  char v403;
  __int16 v404;
  llvm::UndefValue *v405;
  void *v406;
  _DWORD *v407;
  const char *v408;
  uint64_t v409;
  __int16 v410;
  void *v411;
  uint64_t v412;
  _BYTE v413[16];
  __int16 v414;
  void *v415;
  uint64_t v416;
  _BYTE v417[32];
  uint64_t **v418;
  _QWORD *v419;
  uint64_t v420;
  void **v421;
  void **v422;
  uint64_t v423;
  int v424;
  __int16 v425;
  char v426;
  uint64_t v427;
  uint64_t v428;
  void *v429;
  void *v430;
  void *v431;
  uint64_t v432;
  _DWORD *v433;
  int v434;
  char v435;
  __int16 v436;
  uint64_t v437;

  v437 = *MEMORY[0x1E0C80C00];
  v374 = a2;
  if ((*(_DWORD *)(a1 + 28) - 10) <= 0xFFFFFFF6)
  {
    v2 = a2 + 3;
    v3 = (uint64_t *)a2[4];
    v4 = &dword_1C6404980[7584];
    if (v3 == a2 + 3)
    {
      LOBYTE(v5) = 0;
      v46 = a2 + 3;
    }
    else
    {
      v5 = 0;
      v384 = a2 + 3;
      do
      {
        v6 = v3 - 7;
        if (!v3)
          v6 = 0;
        if ((*((_BYTE *)v6 + 33) & 0x20) != 0)
        {
          v7 = v6[1];
          while (v7)
          {
            v8 = *(_QWORD *)(v7 + 24);
            v7 = *(_QWORD *)(v7 + 8);
            if (*(_BYTE *)(v8 + 16) != 84)
              continue;
            v9 = *(_QWORD *)(v8 - 32);
            if (!v9
              || *(_BYTE *)(v9 + 16)
              || *(_QWORD *)(v9 + 24) != *(_QWORD *)(v8 + 72)
              || (*(_BYTE *)(v9 + 33) & 0x20) == 0)
            {
              continue;
            }
            v10 = 0;
            v11 = *(_DWORD *)(v9 + 36);
            v391 = v5;
            if (v11 <= 2453)
            {
              switch(v11)
              {
                case 2309:
                case 2310:
                case 2311:
                case 2312:
                case 2313:
                case 2314:
                case 2315:
                case 2316:
                  goto LABEL_29;
                case 2317:
                case 2318:
                case 2319:
                case 2320:
                case 2321:
                case 2322:
                case 2323:
                case 2324:
                  goto LABEL_25;
                case 2325:
                case 2326:
                case 2327:
                case 2328:
                case 2329:
                case 2330:
                case 2331:
                case 2332:
                  goto LABEL_27;
                case 2333:
                case 2334:
                case 2335:
                case 2336:
                  goto LABEL_71;
                case 2337:
                case 2338:
                case 2339:
                case 2340:
                case 2341:
                case 2342:
                case 2343:
                case 2344:
                  goto LABEL_21;
                case 2345:
                case 2346:
                case 2347:
                case 2348:
                case 2349:
                case 2350:
                case 2351:
                case 2352:
                  goto LABEL_18;
                case 2353:
                case 2354:
                case 2355:
                case 2356:
                case 2357:
                case 2358:
                case 2359:
                case 2360:
                  goto LABEL_24;
                default:
                  if ((v11 - 2115) < 8)
                  {
LABEL_29:
                    v14 = 0;
                    v12 = 0;
                    v13 = v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF);
                  }
                  else
                  {
                    if ((v11 - 2123) >= 8)
                      goto LABEL_71;
LABEL_21:
                    v12 = 0;
                    v13 = v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF);
                    v14 = *(_QWORD *)(v13 + 32);
                  }
                  v15 = 3;
                  break;
              }
              goto LABEL_31;
            }
            if (v11 > 2527)
            {
              if ((v11 - 2528) < 8)
              {
LABEL_27:
                v14 = 0;
                v13 = v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF);
                v12 = *(_DWORD **)(v13 + 32);
LABEL_28:
                v15 = 2;
LABEL_31:
                v16 = *(char **)v13;
                v406 = (void *)v15;
                v407 = v12;
                v408 = v16;
                v409 = v14;
                sub_1C4773D54((uint64_t)&v415, v8, 0, 0, 0);
                v17 = *(unsigned __int8 *)(v8 + 17) >> 1;
                if (v17 == 127)
                  v17 = -1;
                v424 = v17;
                if (v14)
                {
                  v18 = (void **)sub_1C5597394(v14, (int *)&v406, 0, 0, (uint64_t)&v415);
                  v19 = (uint64_t *)v418[7][5];
                  v431 = *v18;
                  Declaration = llvm::Intrinsic::getDeclaration(v19, 2517, (uint64_t *)&v431, 1);
                  if (Declaration)
                    v21 = *(uint64_t ***)(Declaration + 24);
                  else
                    v21 = 0;
                  v411 = v18;
                  v436 = 257;
                  v22 = sub_1C4774778((uint64_t *)&v415, v21, Declaration, (uint64_t *)&v411, 1, (uint64_t)&v431, 0);
                }
                else
                {
                  v22 = 0;
                }
                v431 = &v433;
                v432 = 0x400000000;
                v23 = *(_QWORD *)v8;
                v396 = *(_QWORD *)v8;
                if ((*(_DWORD *)(*(_QWORD *)v8 + 8) & 0xFE) == 0x12)
                {
                  llvm::FixedVectorType::get((llvm::FixedVectorType *)(*(_QWORD *)v420 + 1672), (llvm::Type *)4);
                  v25 = *(_DWORD *)(v23 + 32);
                  if (v25)
                  {
                    v26 = v24;
                    for (i = 0; i != v25; ++i)
                    {
                      v414 = 257;
                      v28 = sub_1C4772C18((uint64_t *)&v415, v26, v16, i, (uint64_t)&v411);
                      v29 = sub_1C5597394((uint64_t)v28, (int *)&v406, v22, v14, (uint64_t)&v415);
                      v30 = v432;
                      if (v432 >= (unint64_t)HIDWORD(v432))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v431, (uint64_t)&v433, v432 + 1, 8);
                        v30 = v432;
                      }
                      *((_QWORD *)v431 + v30) = v29;
                      LODWORD(v432) = v432 + 1;
                    }
                  }
                }
                else
                {
                  v31 = sub_1C5597394((uint64_t)v16, (int *)&v406, v22, v14, (uint64_t)&v415);
                  v32 = v432;
                  if (v432 >= (unint64_t)HIDWORD(v432))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v431, (uint64_t)&v433, v432 + 1, 8);
                    v32 = v432;
                  }
                  *((_QWORD *)v431 + v32) = v31;
                  LODWORD(v432) = v432 + 1;
                }
                if ((*(_DWORD *)(v396 + 8) & 0xFE) == 0x12)
                {
                  llvm::FixedVectorType::get((llvm::FixedVectorType *)(***(_QWORD ***)v8 + 1672), (llvm::Type *)*(unsigned int *)(v396 + 32));
                  v36 = (unsigned __int8 *)llvm::UndefValue::get(v33, v34);
                  v37 = v432;
                  v2 = v384;
                  if ((_DWORD)v432)
                  {
                    v38 = 0;
                    do
                    {
                      v39 = *((_QWORD *)v431 + v38);
                      v414 = 257;
                      v40 = *(llvm::ConstantInt **)(*(_QWORD *)v420 + 1984);
                      v41 = *(_DWORD *)(*(_QWORD *)v420 + 1992);
                      v402 = v41 >> 8;
                      if (v41 >> 8 > 0x40)
                      {
                        llvm::APInt::initSlowCase((llvm::APInt *)&v401, v38, 0);
                      }
                      else
                      {
                        if (v41 <= 0xFF)
                          v42 = 0;
                        else
                          v42 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v41);
                        v401 = (llvm::ConstantInt *)(v42 & v38);
                      }
                      v43 = llvm::ConstantInt::get(v40, (llvm::LLVMContext *)&v401, v35);
                      if (v402 >= 0x41 && v401)
                        MEMORY[0x1CAA32F9C](v401, 0x1000C8000313F17);
                      v36 = sub_1C4773154((uint64_t *)&v415, (uint64_t)v36, v39, (uint64_t)v43, (uint64_t)&v411);
                      ++v38;
                    }
                    while (v37 != v38);
                  }
                }
                else
                {
                  v36 = *(unsigned __int8 **)v431;
                  v2 = v384;
                }
                if (*(_QWORD *)v36 != v396)
                {
                  v414 = 257;
                  v36 = sub_1C4773A70((uint64_t)&v415, (uint64_t *)v36, (uint64_t *)v396, (uint64_t)&v411);
                }
                llvm::Value::doRAUW((llvm::ValueAsMetadata *)v8, (llvm::Value *)v36, (llvm::Value *)1);
                llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v8 + 40) + 40, (uint64_t ***)v8);
                v44 = *(_QWORD *)(v8 + 24);
                v45 = *(_QWORD **)(v8 + 32);
                *v45 = v44;
                *(_QWORD *)(v44 + 8) = v45;
                *(_QWORD *)(v8 + 24) = 0;
                *(_QWORD *)(v8 + 32) = 0;
                llvm::Value::deleteValue((llvm::Value *)v8);
                if (v431 != &v433)
                  free(v431);
                v5 = v391;
                if (v415 != v417)
                  free(v415);
                v10 = 1;
                goto LABEL_71;
              }
              if ((v11 - 2536) < 8)
              {
LABEL_24:
                v13 = v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF);
                v12 = *(_DWORD **)(v13 + 64);
                v14 = *(_QWORD *)(v13 + 32);
                goto LABEL_28;
              }
            }
            else
            {
              if ((v11 - 2454) < 8)
              {
LABEL_25:
                v14 = 0;
                v12 = 0;
                v13 = v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF);
                goto LABEL_26;
              }
              if ((v11 - 2462) < 8)
              {
LABEL_18:
                v12 = 0;
                v13 = v8 - 32 * (*(_DWORD *)(v8 + 20) & 0x7FFFFFF);
                v14 = *(_QWORD *)(v13 + 32);
LABEL_26:
                v15 = 1;
                goto LABEL_31;
              }
            }
LABEL_71:
            v5 |= v10;
          }
        }
        v3 = (uint64_t *)v3[1];
      }
      while (v3 != v2);
      a2 = v374;
      v46 = (uint64_t *)v374[4];
      v4 = dword_1C6404980 + 30336;
    }
    v47 = *a2;
    v415 = v417;
    v416 = 0x200000000;
    v420 = v47;
    v421 = &v429;
    v422 = &v430;
    v423 = 0;
    v424 = 0;
    v425 = 512;
    v426 = 7;
    v418 = 0;
    v419 = 0;
    v427 = 0;
    v428 = 0;
    v429 = &unk_1E8167888;
    v430 = &unk_1E8167A08;
    v411 = v413;
    v412 = *((_QWORD *)v4 + 206);
    v48 = (_DWORD *)v412;
    v431 = &v433;
    v432 = v412;
    if (v46 == v2)
    {
      v397 = 0;
LABEL_190:
      if ((_DWORD)v412)
      {
        v112 = 8 * v412;
        v113 = (char *)v411 - 8;
        do
        {
          v114 = *(_QWORD *)&v113[v112];
          if (v114)
            v115 = *(unsigned __int8 *)(v114 + 16) >= 0x1Cu;
          else
            v115 = 0;
          if (v115)
          {
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v114 + 40) + 40, *(uint64_t ****)&v113[v112]);
            v116 = *(_QWORD *)(v114 + 24);
            v117 = *(_QWORD **)(v114 + 32);
            *v117 = v116;
            *(_QWORD *)(v116 + 8) = v117;
            *(_QWORD *)(v114 + 24) = 0;
            *(_QWORD *)(v114 + 32) = 0;
            llvm::Value::deleteValue((llvm::Value *)v114);
          }
          v112 -= 8;
        }
        while (v112);
      }
      if (v431 != &v433)
        free(v431);
      if (v411 != v413)
        free(v411);
      if (v415 != v417)
        free(v415);
      v370 = (v5 | v397) & 1;
      goto LABEL_206;
    }
    v392 = v5;
    v49 = 0;
    v50 = 0;
    while (1)
    {
      v51 = v46 - 7;
      if (!v46)
        v51 = 0;
      if ((*((_BYTE *)v51 + 33) & 0x20) != 0 && *((_DWORD *)v51 + 9) == 2790)
      {
        v52 = v51[1];
        if (v52)
          break;
      }
LABEL_109:
      v46 = (uint64_t *)v46[1];
      if (v46 == v2)
      {
        v397 = v50;
        if (v49)
        {
          while (1)
          {
            v74 = (char *)v431 + 16 * v49;
            v75 = (_QWORD *)*((_QWORD *)v74 - 2);
            v76 = (uint64_t *)*((_QWORD *)v74 - 1);
            LODWORD(v432) = v49 - 1;
            if (*v75)
              v77 = *(_BYTE *)(*v75 + 8) == 15;
            else
              v77 = 0;
            v78 = v77 && *(_QWORD *)(*v75 + 24) == 0;
            v79 = v412;
            if (v412 >= (unint64_t)HIDWORD(v412))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v411, (uint64_t)v413, v412 + 1, 8);
              v79 = v412;
            }
            *((_QWORD *)v411 + v79) = v75;
            LODWORD(v412) = v412 + 1;
            v80 = v75[1];
            if (v80)
              break;
LABEL_187:
            v49 = v432;
            if (!(_DWORD)v432)
              goto LABEL_188;
          }
          v81 = v76 + 1;
          while (1)
          {
            v82 = *(_QWORD **)(v80 + 24);
            v80 = *(_QWORD *)(v80 + 8);
            v83 = *((unsigned __int8 *)v82 + 16);
            if (v82 && v83 == 60 || v82 && v83 == 61 || v82 && v83 == 75)
            {
              v84 = (uint64_t **)(v82 - 4);
              if (*(v82 - 4))
              {
                *(_QWORD *)*(v82 - 2) = *(v82 - 3);
                v85 = *(v82 - 3);
                if (v85)
                  *(_QWORD *)(v85 + 16) = *(v82 - 2);
              }
              *v84 = v76;
              if (!v76)
                goto LABEL_135;
              v86 = *v81;
              goto LABEL_132;
            }
            if (v82 && v83 == 62)
            {
              v418 = (uint64_t **)v82[5];
              v419 = v82 + 3;
              v87 = (void *)v82[6];
              v406 = v87;
              if (v87)
              {
                llvm::MetadataTracking::track((uint64_t)&v406, (unsigned __int8 *)v87, 2);
                v88 = v406;
              }
              else
              {
                v88 = 0;
              }
              sub_1C4774EF4((uint64_t)&v415, 0, (uint64_t)v88);
              if (v406)
                llvm::MetadataTracking::untrack((uint64_t)&v406, (unsigned __int8 *)v406);
              v406 = &v408;
              v407 = v48;
              v89 = *((_DWORD *)v82 + 5) & 0x7FFFFFF;
              if (v89 == 1)
              {
                v90 = 0;
                v91 = (llvm::Value *)&v408;
              }
              else
              {
                v90 = 0;
                v105 = 0;
                v106 = v82 + 4;
                do
                {
                  v107 = v106[-4 * v89];
                  if (v90 >= HIDWORD(v407))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v406, (uint64_t)&v408, v90 + 1, 8);
                    v90 = v407;
                  }
                  ++v105;
                  *((_QWORD *)v406 + v90) = v107;
                  v90 = (_DWORD)v407 + 1;
                  LODWORD(v407) = (_DWORD)v407 + 1;
                  v89 = *((_DWORD *)v82 + 5) & 0x7FFFFFF;
                  v106 += 4;
                }
                while (v105 < v89 - 1);
                v91 = (llvm::Value *)v406;
              }
              v108 = (llvm::GetElementPtrInst *)v82[8];
              v404 = 257;
              v92 = sub_1C509D7B0((uint64_t *)&v415, v108, v76, v91, v90, (uint64_t)&v401);
              if (v406 != &v408)
                free(v406);
            }
            else
            {
              if (v82 && v83 == 77)
              {
                v92 = (uint64_t)v76;
                if (v78)
                  goto LABEL_176;
                v418 = (uint64_t **)v82[5];
                v419 = v82 + 3;
                v93 = (void *)v82[6];
                v406 = v93;
                if (v93)
                {
                  llvm::MetadataTracking::track((uint64_t)&v406, (unsigned __int8 *)v93, 2);
                  v94 = v406;
                }
                else
                {
                  v94 = 0;
                }
                sub_1C4774EF4((uint64_t)&v415, 0, (uint64_t)v94);
                if (v406)
                  llvm::MetadataTracking::untrack((uint64_t)&v406, (unsigned __int8 *)v406);
                v95 = *(_DWORD *)(*v76 + 8);
                if ((v95 & 0xFE) == 0x12)
                  v95 = *(_DWORD *)(**(_QWORD **)(*v76 + 16) + 8);
                v96 = llvm::PointerType::get(**(llvm::PointerType ***)(*v82 + 16), (llvm::Type *)(v95 >> 8));
                v410 = 257;
                v97 = (unsigned __int8 *)v76;
              }
              else
              {
                if (!v82 || v83 != 78)
                  goto LABEL_135;
                v98 = *(_DWORD *)(*v76 + 8);
                if ((v98 & 0xFE) == 0x12)
                  v98 = *(_DWORD *)(**(_QWORD **)(*v76 + 16) + 8);
                v99 = *v82;
                v100 = *(_DWORD *)(*v82 + 8);
                if ((v100 & 0xFE) == 0x12)
                  v100 = *(_DWORD *)(**(_QWORD **)(v99 + 16) + 8);
                v101 = (llvm::Type *)(v98 >> 8);
                if ((_DWORD)v101 != v100 >> 8)
                {
                  v84 = (uint64_t **)(v82 - 4);
                  if (*(v82 - 4))
                  {
                    *(_QWORD *)*(v82 - 2) = *(v82 - 3);
                    v111 = *(v82 - 3);
                    if (v111)
                      *(_QWORD *)(v111 + 16) = *(v82 - 2);
                  }
                  *(v82 - 4) = v76;
                  v86 = v76[1];
LABEL_132:
                  *(v82 - 3) = v86;
                  if (v86)
                    *(_QWORD *)(v86 + 16) = v82 - 3;
                  *(v82 - 2) = v81;
                  *v81 = (uint64_t)v84;
                  goto LABEL_135;
                }
                v92 = (uint64_t)v76;
                if (v78)
                  goto LABEL_177;
                v102 = llvm::PointerType::get(**(llvm::PointerType ***)(v99 + 16), v101);
                v418 = (uint64_t **)v82[5];
                v419 = v82 + 3;
                v103 = (void *)v82[6];
                v406 = v103;
                if (v103)
                {
                  llvm::MetadataTracking::track((uint64_t)&v406, (unsigned __int8 *)v103, 2);
                  v104 = v406;
                }
                else
                {
                  v104 = 0;
                }
                sub_1C4774EF4((uint64_t)&v415, 0, (uint64_t)v104);
                if (v406)
                  llvm::MetadataTracking::untrack((uint64_t)&v406, (unsigned __int8 *)v406);
                v410 = 257;
                v97 = (unsigned __int8 *)v76;
                v96 = v102;
              }
              v92 = (uint64_t)sub_1C4773E38((uint64_t *)&v415, 49, v97, v96, (uint64_t)&v406);
            }
LABEL_176:
            if (v92)
            {
LABEL_177:
              v109 = v432;
              if (v432 >= (unint64_t)HIDWORD(v432))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v431, (uint64_t)&v433, v432 + 1, 16);
                v109 = v432;
              }
              v110 = (char *)v431 + 16 * v109;
              *v110 = v82;
              v110[1] = v92;
              LODWORD(v432) = v432 + 1;
            }
LABEL_135:
            if (!v80)
              goto LABEL_187;
          }
        }
LABEL_188:
        LOBYTE(v5) = v392;
        goto LABEL_190;
      }
    }
    while (1)
    {
      v55 = 0;
      if ((*(_DWORD *)(*(_QWORD *)(*(_QWORD *)(v52 + 24) - 32) + 32) & 0x2000) != 0)
        v56 = *(uint64_t ****)(v52 + 24);
      else
        v56 = 0;
      v418 = v56[5];
      v419 = v56 + 3;
      v57 = v56[6];
      v406 = v57;
      if (v57)
      {
        llvm::MetadataTracking::track((uint64_t)&v406, (unsigned __int8 *)v57, 2);
        v55 = v406;
      }
      sub_1C4774EF4((uint64_t)&v415, 0, (uint64_t)v55);
      if (v406)
        llvm::MetadataTracking::untrack((uint64_t)&v406, (unsigned __int8 *)v406);
      v58 = llvm::Intrinsic::getDeclaration(v374, 2789, 0, 0);
      v59 = v58 ? *(uint64_t ***)(v58 + 24) : 0;
      v410 = 257;
      v60 = (uint64_t ***)sub_1C4774778((uint64_t *)&v415, v59, v58, 0, 0, (uint64_t)&v406, 0);
      v61 = v60;
      if ((*((_BYTE *)v56 + 23) & 0x10) != 0)
        break;
      v53 = 0;
      v54 = &byte_1C871356D;
LABEL_105:
      v410 = 773;
      v406 = v54;
      v407 = v53;
      v408 = "primdata_ptr";
      llvm::Value::setName(v60, (uint64_t)&v406);
      v72 = v432;
      if (v432 >= (unint64_t)HIDWORD(v432))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v431, (uint64_t)&v433, v432 + 1, 16);
        v72 = v432;
      }
      v73 = (uint64_t ****)((char *)v431 + 16 * v72);
      *v73 = v56;
      v73[1] = v61;
      v49 = v432 + 1;
      LODWORD(v432) = v432 + 1;
      v52 = *(_QWORD *)(v52 + 8);
      if (!v52)
      {
        v50 = 1;
        goto LABEL_109;
      }
    }
    v62 = ***v56;
    v63 = *(_QWORD *)(v62 + 152);
    v64 = *(unsigned int *)(v62 + 168);
    if ((_DWORD)v64)
    {
      LODWORD(v65) = (v64 - 1) & ((v56 >> 4) ^ (v56 >> 9));
      v66 = (uint64_t ****)(v63 + 16 * v65);
      v67 = *v66;
      if (*v66 == v56)
      {
LABEL_104:
        v70 = v66[1];
        v71 = *v70;
        v54 = (char *)(v70 + 2);
        v53 = v71;
        goto LABEL_105;
      }
      v68 = 1;
      while (v67 != (uint64_t ***)-4096)
      {
        v69 = v65 + v68++;
        v65 = v69 & (v64 - 1);
        v67 = *(uint64_t ****)(v63 + 16 * v65);
        if (v67 == v56)
        {
          v66 = (uint64_t ****)(v63 + 16 * v65);
          goto LABEL_104;
        }
      }
    }
    v66 = (uint64_t ****)(v63 + 16 * v64);
    goto LABEL_104;
  }
  v370 = 0;
LABEL_206:
  v411 = v413;
  v412 = 0x800000000;
  v118 = v374;
  v119 = (uint64_t *)v374[4];
  v373 = v374 + 3;
  if (v119 == v374 + 3)
  {
    v120 = 0;
    goto LABEL_646;
  }
  v120 = 0;
  do
  {
    if (v119)
      v121 = v119 - 7;
    else
      v121 = 0;
    v372 = v119;
    if ((*((_BYTE *)v121 + 33) & 0x20) == 0)
      goto LABEL_637;
    v122 = *((_DWORD *)v121 + 9);
    if (v122 == 2776 || v122 == 2740)
    {
      if (v122 == 2776)
        v123 = 2778;
      else
        v123 = 2742;
      v124 = llvm::Intrinsic::getDeclaration(v374, v123, 0, 0);
      v125 = v121[1];
      if (v125)
      {
        v126 = v124;
        do
        {
          v127 = *(_QWORD *)(v125 + 24);
          v128 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v127 + 40) + 56) + 40);
          v129 = sub_1C4FB7E80(*(uint64_t **)(v128 + 112), "agc.ria.ray_driver_data", 0x17uLL);
          if (!v129
            || (v130 = (unsigned __int8 *)v129, *(_BYTE *)(v129 + 16) != 3)
            || (*(_DWORD *)(v129 + 32) & 0xFu) - 7 <= 1)
          {
            v130 = 0;
          }
          v131 = sub_1C4FB7E80(*(uint64_t **)(v128 + 112), "agc.ria.ray_user_data", 0x15uLL);
          if (!v131
            || (v132 = (unsigned __int8 *)v131, *(_BYTE *)(v131 + 16) != 3)
            || (*(_DWORD *)(v131 + 32) & 0xFu) - 7 <= 1)
          {
            v132 = 0;
          }
          sub_1C4773D54((uint64_t)&v431, v127, 0, 0, 0);
          v133 = 0;
          v415 = v417;
          v416 = 0x1000000000;
          v134 = *(unsigned __int8 *)(v127 + 16);
          if (v134 != 84)
          {
            if (v134 == 39)
              v133 = (*(_DWORD *)(v127 + 80) + 1);
            else
              v133 = 2;
          }
          v135 = *(_DWORD *)(v127 + 20);
          if (v135 < 0
            && (v153 = v127 - 32 * (v135 & 0x7FFFFFF), v154 = *(_QWORD *)(v153 - 8), (v154 & 0xFFFFFFFF0) != 0))
          {
            v137 = -(uint64_t)(v135 & 0x7FFFFFF);
            v136 = (*(_DWORD *)(v153 - 12) - *(_DWORD *)(v153 - v154));
          }
          else
          {
            v136 = 0;
            v137 = -(uint64_t)(v135 & 0x7FFFFFF);
          }
          v138 = -32 * v133 - 32 * v136 - 32 * v137 - 32;
          v139 = v138 >> 5;
          if ((v138 & 0x1FFFFFFFE0) != 0)
          {
            v140 = 0;
            v141 = -(uint64_t)v139;
            v142 = v127;
            do
            {
              v143 = *(_QWORD *)(v142 - 32 * (*(_DWORD *)(v127 + 20) & 0x7FFFFFF));
              if (v140 >= HIDWORD(v416))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v415, (uint64_t)v417, v140 + 1, 8);
                v140 = v416;
              }
              *((_QWORD *)v415 + v140) = v143;
              v140 = v416 + 1;
              LODWORD(v416) = v416 + 1;
              v142 += 32;
              v115 = __CFADD__(v141++, 1);
            }
            while (!v115);
          }
          v144 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v126 + 24) + 16) + 8 * (v139 + 1));
          v410 = 257;
          v145 = sub_1C4773E38((uint64_t *)&v431, 49, v130, v144, (uint64_t)&v406);
          v146 = v416;
          if (v416 >= (unint64_t)HIDWORD(v416))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v415, (uint64_t)v417, v416 + 1, 8);
            v146 = v416;
          }
          *((_QWORD *)v415 + v146) = v145;
          LODWORD(v416) = v416 + 1;
          v147 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v126 + 24) + 16) + 8 * (v139 + 2));
          v410 = 257;
          v148 = sub_1C4773E38((uint64_t *)&v431, 49, v132, v147, (uint64_t)&v406);
          v149 = v416;
          if (v416 >= (unint64_t)HIDWORD(v416))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v415, (uint64_t)v417, v416 + 1, 8);
            v149 = v416;
          }
          *((_QWORD *)v415 + v149) = v148;
          LODWORD(v416) = v416 + 1;
          v150 = *(uint64_t ***)(v126 + 24);
          v410 = 257;
          v151 = (llvm::Value *)sub_1C4774778((uint64_t *)&v431, v150, v126, (uint64_t *)v415, v416, (uint64_t)&v406, 0);
          if (v415 != v417)
            free(v415);
          if (v431 != &v433)
            free(v431);
          llvm::Value::doRAUW((llvm::ValueAsMetadata *)v127, v151, (llvm::Value *)1);
          v152 = v412;
          if (v412 >= (unint64_t)HIDWORD(v412))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v411, (uint64_t)v413, v412 + 1, 8);
            v152 = v412;
          }
          *((_QWORD *)v411 + v152) = v127;
          LODWORD(v412) = v412 + 1;
          v125 = *(_QWORD *)(v125 + 8);
        }
        while (v125);
        v120 = 1;
      }
      goto LABEL_637;
    }
    v155 = v122 - 2481;
    v380 = v121;
    v385 = *((_DWORD *)v121 + 9);
    if ((v122 - 2481) >= 2 && (v122 - 1278) > 1)
      goto LABEL_506;
    v156 = v121[1];
    if (!v156)
      goto LABEL_506;
    v388 = v122 - 2481;
    do
    {
      v157 = *(_QWORD *)(v156 + 24);
      if (*(_BYTE *)(v157 + 16) == 84
        && (v158 = *(_QWORD *)(v157 - 32)) != 0
        && !*(_BYTE *)(v158 + 16)
        && *(_QWORD *)(v158 + 24) == *(_QWORD *)(v157 + 72))
      {
        if ((*(_BYTE *)(v158 + 33) & 0x20) != 0)
          v159 = *(_QWORD *)(v156 + 24);
        else
          v159 = 0;
      }
      else
      {
        v159 = 0;
      }
      v160 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(v159 + 40) + 56) + 40);
      sub_1C4773D54((uint64_t)&v415, v159, 0, 0, 0);
      v161 = (void **)(v159 - 32 * (*(_DWORD *)(v159 + 20) & 0x7FFFFFF));
      v162 = (llvm::Value *)*v161;
      v163 = (uint64_t)v161[4];
      if (v155 > 1)
      {
        v399 = 0;
        v165 = 0;
        v393 = 0;
        goto LABEL_323;
      }
      if (*((_BYTE *)v162 + 16) == 17)
        v164 = (uint64_t)*v161;
      else
        v164 = 0;
      if (*(_BYTE *)(v163 + 16) == 17)
        v165 = (uint64_t)v161[4];
      else
        v165 = 0;
      if (v164)
      {
        v402 = 64;
        v398 = v160;
        v401 = (llvm::ConstantInt *)0x3FF0000000000000;
        llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v406, &v401);
        v432 = (uint64_t)v406;
        v433 = v407;
        v434 = (int)v408;
        v435 = BYTE4(v408) & 0xF;
        v166 = v164 + 24;
        v167 = v164;
        llvm::APFloat::convert((uint64_t)&v431, *(void **)(v164 + 32), 1, &v406);
        v168 = sub_1C47ECB98(v164 + 24, (uint64_t)&v431);
        if ((_UNKNOWN *)v432 == &unk_1C866F1C0)
        {
          sub_1C4773C74((uint64_t *)&v433);
        }
        else if ((*(_DWORD *)(v432 + 8) - 64) <= 0xFFFFFF7F && v433)
        {
          MEMORY[0x1CAA32F9C](v433, 0x1000C8000313F17);
        }
        if (v168)
          goto LABEL_300;
        v402 = 64;
        v401 = (llvm::ConstantInt *)0xBFF0000000000000;
        llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v406, &v401);
        v432 = (uint64_t)v406;
        v433 = v407;
        v434 = (int)v408;
        v435 = BYTE4(v408) & 0xF;
        v164 = v167;
        llvm::APFloat::convert((uint64_t)&v431, *(void **)(v167 + 32), 1, &v406);
        v170 = sub_1C47ECB98(v166, (uint64_t)&v431);
        if ((_UNKNOWN *)v432 == &unk_1C866F1C0)
        {
          sub_1C4773C74((uint64_t *)&v433);
          v160 = v398;
        }
        else
        {
          v160 = v398;
          if ((*(_DWORD *)(v432 + 8) - 64) <= 0xFFFFFF7F && v433)
            MEMORY[0x1CAA32F9C](v433, 0x1000C8000313F17);
        }
        if (v170)
        {
          if (!v165)
            goto LABEL_292;
          if (*(_UNKNOWN **)(v165 + 32) == &unk_1C866F1C0)
            v171 = *(_QWORD *)(v165 + 40);
          else
            v171 = v165 + 24;
          if ((*(_BYTE *)(v171 + 28) & 7) == 0)
            goto LABEL_298;
        }
        else
        {
          if (!v165)
          {
LABEL_292:
            v399 = 1;
            v393 = (uint64_t)v162;
            v155 = v388;
            goto LABEL_323;
          }
          if (*(_UNKNOWN **)(v164 + 32) == &unk_1C866F1C0)
          {
            v173 = *(_BYTE *)(*(_QWORD *)(v164 + 40) + 28);
            if ((v173 & 8) == 0)
              goto LABEL_308;
          }
          else
          {
            v173 = *(_BYTE *)(v164 + 52);
            if ((v173 & 8) == 0)
              goto LABEL_308;
          }
          if ((v173 & 7) != 0)
          {
            v175 = *(_UNKNOWN **)(v165 + 32) == &unk_1C866F1C0
                 ? *(_BYTE *)(*(_QWORD *)(v165 + 40) + 28)
                 : *(_BYTE *)(v165 + 52);
            if ((v175 & 7u) > 1 && (sub_1C627A4E0(v165 + 24) & 1) == 0)
            {
              NaN = llvm::ConstantFP::getNaN(*(llvm::ConstantFP **)v162, 0, 0);
              goto LABEL_299;
            }
          }
        }
      }
      else
      {
        if (!v165)
        {
          v393 = 0;
          v399 = 1;
          goto LABEL_323;
        }
        v402 = 64;
        v401 = 0;
        llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v406, &v401);
        v432 = (uint64_t)v406;
        v433 = v407;
        v434 = (int)v408;
        v435 = BYTE4(v408) & 0xF;
        llvm::APFloat::convert((uint64_t)&v431, *(void **)(v165 + 32), 1, &v406);
        v172 = sub_1C47ECB98(v165 + 24, (uint64_t)&v431);
        if ((_UNKNOWN *)v432 == &unk_1C866F1C0)
        {
          sub_1C4773C74((uint64_t *)&v433);
        }
        else if ((*(_DWORD *)(v432 + 8) - 64) <= 0xFFFFFF7F && v433)
        {
          MEMORY[0x1CAA32F9C](v433, 0x1000C8000313F17);
        }
        if (v172)
        {
LABEL_298:
          NaN = llvm::ConstantFP::get(*(llvm::ConstantFP ***)v162, v169, 1.0);
LABEL_299:
          v162 = NaN;
LABEL_300:
          llvm::Value::doRAUW((llvm::ValueAsMetadata *)v159, v162, (llvm::Value *)1);
LABEL_301:
          v155 = v388;
          goto LABEL_464;
        }
      }
LABEL_308:
      LODWORD(v432) = 8;
      v431 = 0;
      BYTE4(v432) = 0;
      LOBYTE(v406) = 0;
      if (llvm::APFloat::convertToInteger(v165 + 24, (uint64_t)&v431, 0, &v406) == 1)
      {
        v399 = 1;
        v176 = v432;
        v155 = v388;
        goto LABEL_319;
      }
      v176 = v432;
      if (BYTE4(v432))
      {
        v177 = (uint64_t *)v431;
        if (v432 < 0x41)
          v177 = (uint64_t *)&v431;
        goto LABEL_317;
      }
      if (v432 > 0x40)
      {
        v177 = (uint64_t *)v431;
LABEL_317:
        v178 = *v177;
        goto LABEL_318;
      }
      v178 = (uint64_t)((_QWORD)v431 << -(char)v432) >> -(char)v432;
LABEL_318:
      v155 = v388;
      v399 = v178 & 1;
LABEL_319:
      if (v176 >= 0x41 && v431)
        MEMORY[0x1CAA32F9C](v431, 0x1000C8000313F17);
      v393 = v164;
      v165 = v163;
LABEL_323:
      if (v163)
        v179 = *(_BYTE *)(v163 + 16) == 17;
      else
        v179 = 0;
      if (!v179)
        goto LABEL_327;
      v402 = 64;
      v401 = (llvm::ConstantInt *)0x3FE0000000000000;
      llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v406, &v401);
      v432 = (uint64_t)v406;
      v433 = v407;
      v434 = (int)v408;
      v435 = BYTE4(v408) & 0xF;
      v195 = (void **)(v163 + 32);
      v196 = v163 + 24;
      llvm::APFloat::convert((uint64_t)&v431, *(void **)(v163 + 32), 1, &v406);
      v197 = sub_1C47ECB98(v163 + 24, (uint64_t)&v431);
      if ((_UNKNOWN *)v432 == &unk_1C866F1C0)
      {
        sub_1C4773C74((uint64_t *)&v433);
      }
      else if ((*(_DWORD *)(v432 + 8) - 64) <= 0xFFFFFF7F && v433)
      {
        MEMORY[0x1CAA32F9C](v433, 0x1000C8000313F17);
      }
      if (v197)
      {
        v198 = v160;
        v199 = 280;
LABEL_366:
        v201 = (uint64_t *)v162;
        goto LABEL_367;
      }
      v402 = 64;
      v401 = (llvm::ConstantInt *)0xBFE0000000000000;
      llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v406, &v401);
      v432 = (uint64_t)v406;
      v433 = v407;
      v434 = (int)v408;
      v435 = BYTE4(v408) & 0xF;
      llvm::APFloat::convert((uint64_t)&v431, *v195, 1, &v406);
      v200 = sub_1C47ECB98(v163 + 24, (uint64_t)&v431);
      if ((_UNKNOWN *)v432 == &unk_1C866F1C0)
      {
        sub_1C4773C74((uint64_t *)&v433);
      }
      else if ((*(_DWORD *)(v432 + 8) - 64) <= 0xFFFFFF7F && v433)
      {
        MEMORY[0x1CAA32F9C](v433, 0x1000C8000313F17);
      }
      if (v200)
      {
        v198 = v160;
        v199 = 261;
        goto LABEL_366;
      }
      v402 = 64;
      v401 = (llvm::ConstantInt *)0x3FD0000000000000;
      llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v406, &v401);
      v432 = (uint64_t)v406;
      v433 = v407;
      v434 = (int)v408;
      v435 = BYTE4(v408) & 0xF;
      llvm::APFloat::convert((uint64_t)&v431, *v195, 1, &v406);
      v203 = sub_1C47ECB98(v163 + 24, (uint64_t)&v431);
      if ((_UNKNOWN *)v432 == &unk_1C866F1C0)
      {
        sub_1C4773C74((uint64_t *)&v433);
      }
      else if ((*(_DWORD *)(v432 + 8) - 64) <= 0xFFFFFF7F && v433)
      {
        MEMORY[0x1CAA32F9C](v433, 0x1000C8000313F17);
      }
      if (v203)
      {
        v204 = v160;
        v205 = 280;
      }
      else
      {
        v402 = 64;
        v401 = (llvm::ConstantInt *)0xBFD0000000000000;
        llvm::detail::IEEEFloat::initFromDoubleAPInt((llvm::detail::IEEEFloat *)&v406, &v401);
        v432 = (uint64_t)v406;
        v433 = v407;
        v434 = (int)v408;
        v435 = BYTE4(v408) & 0xF;
        llvm::APFloat::convert((uint64_t)&v431, *v195, 1, &v406);
        v206 = sub_1C47ECB98(v163 + 24, (uint64_t)&v431);
        if ((_UNKNOWN *)v432 == &unk_1C866F1C0)
        {
          sub_1C4773C74((uint64_t *)&v433);
        }
        else if ((*(_DWORD *)(v432 + 8) - 64) <= 0xFFFFFF7F && v433)
        {
          MEMORY[0x1CAA32F9C](v433, 0x1000C8000313F17);
        }
        if (!v206)
          goto LABEL_383;
        v204 = v160;
        v205 = 261;
      }
      v207 = sub_1C5EA6C88(v204, (uint64_t *)&v415, v205, (uint64_t *)v162, 0);
      v201 = (uint64_t *)v207;
      if (v207 && *(unsigned __int8 *)(v207 + 16) >= 0x1Cu)
        *(_BYTE *)(v207 + 17) = *(_BYTE *)(v159 + 17) & 0xFE | *(_BYTE *)(v207 + 17) & 1;
      v198 = v160;
      v199 = 280;
LABEL_367:
      v202 = sub_1C5EA6C88(v198, (uint64_t *)&v415, v199, v201, 0);
      v187 = (llvm::Value *)v202;
      if (v202)
      {
        if (*(unsigned __int8 *)(v202 + 16) >= 0x1Cu)
          *(_BYTE *)(v202 + 17) = *(_BYTE *)(v159 + 17) & 0xFE | *(_BYTE *)(v202 + 17) & 1;
LABEL_440:
        if (v155 <= 1)
          llvm::Value::doRAUW((llvm::ValueAsMetadata *)v159, v187, (llvm::Value *)1);
        v162 = v187;
        goto LABEL_464;
      }
LABEL_383:
      v208 = *v195;
      if (*v195 == &unk_1C866F1C0)
      {
        llvm::detail::DoubleAPFloat::DoubleAPFloat((llvm::detail::DoubleAPFloat *)&v407, (const llvm::detail::DoubleAPFloat *)(v163 + 32));
      }
      else
      {
        v407 = *v195;
        if ((v208[2] + 64) >= 0x80)
          v408 = (const char *)operator new[]();
        v209 = *(_BYTE *)(v163 + 52);
        v210 = v209 & 7;
        BYTE4(v409) = BYTE4(v409) & 0xF0 | v209 & 0xF;
        LODWORD(v409) = *(_DWORD *)(v163 + 48);
        v212 = (v209 & 6) != 0 && v210 != 3;
        if (v210 == 1 || v212)
        {
          v214 = v407[2];
          v215 = &v408;
          if ((v214 - 64) <= 0xFFFFFF7F)
            v215 = (const char **)v408;
          v216 = (const char **)(v163 + 40);
          if ((*(_DWORD *)(*(_QWORD *)(v163 + 32) + 8) - 64) < 0xFFFFFF80)
            v216 = *(const char ***)(v163 + 40);
          if (v214 <= 0xFFFFFFBF)
          {
            v217 = (unint64_t)(v214 + 64) >> 6;
            do
            {
              v218 = *v216++;
              *v215++ = v218;
              --v217;
            }
            while (v217);
          }
        }
      }
      v402 = 8;
      v401 = 0;
      v403 = 0;
      LOBYTE(v405) = 0;
      llvm::APFloat::convertToInteger((uint64_t)&v406, (uint64_t)&v401, 0, &v405);
      if (!(_BYTE)v405)
      {
        v187 = 0;
        goto LABEL_434;
      }
      if (v403)
      {
        v220 = (uint64_t *)&v401;
        if (v402 >= 0x41)
          v220 = (uint64_t *)v401;
      }
      else
      {
        if (v402 <= 0x40)
        {
          v221 = (uint64_t)((_QWORD)v401 << -(uint64_t)v402) >> -(uint64_t)v402;
          goto LABEL_414;
        }
        v220 = (uint64_t *)v401;
      }
      v221 = *v220;
LABEL_414:
      if (v221 >= 0)
        v224 = v221;
      else
        v224 = -v221;
      if (v224 <= 0x1F)
      {
        v225 = llvm::ConstantFP::get(*(llvm::ConstantFP ***)v162, v219, 1.0);
        v187 = v162;
        v378 = (uint64_t *)v225;
        if (v224 != 1)
        {
          v187 = v225;
          LODWORD(v224) = v224;
          if ((_BYTE)v224)
          {
            v376 = v165;
            v226 = (uint64_t *)v162;
            v187 = v225;
            while (1)
            {
              if ((v224 & 1) != 0)
              {
                v436 = 257;
                v227 = sub_1C4772428((uint64_t)&v415, (uint64_t *)v187, (uint64_t)v226, (uint64_t)&v431, 0);
                v187 = (llvm::Value *)v227;
                if (v227)
                {
                  if (*(unsigned __int8 *)(v227 + 16) >= 0x1Cu)
                    *(_BYTE *)(v227 + 17) = *(_BYTE *)(v159 + 17) & 0xFE | *(_BYTE *)(v227 + 17) & 1;
                }
              }
              if (v224 < 2)
                break;
              LODWORD(v224) = v224 >> 1;
              v436 = 257;
              v228 = sub_1C4772428((uint64_t)&v415, v226, (uint64_t)v226, (uint64_t)&v431, 0);
              v226 = (uint64_t *)v228;
              if (v228 && *(unsigned __int8 *)(v228 + 16) >= 0x1Cu)
                *(_BYTE *)(v228 + 17) = *(_BYTE *)(v159 + 17) & 0xFE | *(_BYTE *)(v228 + 17) & 1;
            }
            v165 = v376;
          }
        }
        if (*v195 == &unk_1C866F1C0)
          v196 = *(_QWORD *)(v163 + 40);
        v155 = v388;
        if ((*(_BYTE *)(v196 + 28) & 8) != 0)
        {
          v436 = 257;
          v229 = sub_1C47721F8((uint64_t)&v415, v378, (uint64_t)v187, (uint64_t)&v431, 0);
          v187 = (llvm::Value *)v229;
          if (v229)
          {
            if (*(unsigned __int8 *)(v229 + 16) >= 0x1Cu)
              *(_BYTE *)(v229 + 17) = *(_BYTE *)(v159 + 17) & 0xFE | *(_BYTE *)(v229 + 17) & 1;
          }
        }
      }
      else
      {
        v187 = 0;
        v155 = v388;
      }
LABEL_434:
      if (v402 >= 0x41 && v401)
        MEMORY[0x1CAA32F9C](v401, 0x1000C8000313F17);
      if (v407 == (_DWORD *)&unk_1C866F1C0)
      {
        sub_1C4773C74((uint64_t *)&v408);
      }
      else if ((v407[2] - 64) <= 0xFFFFFF7F && v408)
      {
        MEMORY[0x1CAA32F9C](v408, 0x1000C8000313F17);
      }
      if (v187)
        goto LABEL_440;
LABEL_327:
      v180 = (uint64_t *)v162;
      if (v155 <= 1)
        v180 = (uint64_t *)sub_1C5EA6C88(v160, (uint64_t *)&v415, 139, (uint64_t *)v162, 0);
      v181 = sub_1C5EA6C88(v160, (uint64_t *)&v415, 177, v180, 0);
      if (v181)
        v182 = *(unsigned __int8 *)(v181 + 16) >= 0x1Cu;
      else
        v182 = 0;
      if (v182)
        *(_BYTE *)(v181 + 17) = *(_BYTE *)(v159 + 17) & 0xFE | *(_BYTE *)(v181 + 17) & 1;
      v436 = 257;
      v183 = sub_1C4772428((uint64_t)&v415, (uint64_t *)v181, v163, (uint64_t)&v431, 0);
      if (v183)
        v184 = *(unsigned __int8 *)(v183 + 16) >= 0x1Cu;
      else
        v184 = 0;
      if (v184)
        *(_BYTE *)(v183 + 17) = *(_BYTE *)(v159 + 17) & 0xFE | *(_BYTE *)(v183 + 17) & 1;
      v185 = sub_1C5EA6C88(v160, (uint64_t *)&v415, 76, (uint64_t *)v183, 0);
      v187 = (llvm::Value *)v185;
      if (v185)
        v188 = *(unsigned __int8 *)(v185 + 16) >= 0x1Cu;
      else
        v188 = 0;
      if (v188)
        *(_BYTE *)(v185 + 17) = *(_BYTE *)(v159 + 17) & 0xFE | *(_BYTE *)(v185 + 17) & 1;
      if (!v399)
        goto LABEL_440;
      if (*((_BYTE *)v162 + 16) == 74 && (v189 = *(_QWORD *)(v159 + 8)) != 0 && !*(_QWORD *)(v189 + 8))
      {
        v222 = *((_DWORD *)v162 + 5);
        if ((v222 & 0x40000000) != 0)
          v223 = (uint64_t ***)*((_QWORD *)v162 - 1);
        else
          v223 = (uint64_t ***)((char *)v162 - 32 * (v222 & 0x7FFFFFF));
        v190 = *v223;
        if (v165)
        {
          v191 = sub_1C5E9FD60(v165);
          goto LABEL_353;
        }
      }
      else
      {
        v190 = 0;
      }
      v191 = 0;
LABEL_353:
      if (*(_BYTE *)(v163 + 16) == 74)
      {
        v192 = *(_QWORD *)(v159 + 8);
        if (v192)
        {
          if (!*(_QWORD *)(v192 + 8))
          {
            v193 = *(_DWORD *)(v163 + 20);
            v194 = (v193 & 0x40000000) != 0
                 ? *(llvm::APFloatBase ***)(v163 - 8)
                 : (llvm::APFloatBase **)(v163 - 32 * (v193 & 0x7FFFFFF));
            v191 = *v194;
            if (v393)
              v190 = (uint64_t **)sub_1C5E9FD60(v393);
          }
        }
      }
      if (v190 && v191)
      {
        v230 = *(unsigned __int8 **)(*(_QWORD *)(v159 + 8) + 24);
        v231 = v230[16] <= 0x1Bu ? 0 : *(_QWORD *)(*(_QWORD *)(v159 + 8) + 24);
        if (*(_BYTE *)(v231 + 16) == 73)
        {
          v232 = *(uint64_t **)v231;
          if (v232 == *v190 && v232 == *(uint64_t **)v191)
          {
            v236 = (unsigned __int8 *)sub_1C5EA6D90(v160, (uint64_t *)&v415, 2483, v190, (uint64_t)v191, (uint64_t)v187, (std::string *)1, v186);
            v162 = (llvm::Value *)v236;
            if (v236 && v236[16] >= 0x1Cu)
              v236[17] = *(_BYTE *)(v159 + 17) & 0xFE | v236[17] & 1;
            llvm::Value::doRAUW((llvm::ValueAsMetadata *)v230, (llvm::Value *)v236, (llvm::Value *)1);
            goto LABEL_301;
          }
        }
      }
      v233 = (unsigned __int8 *)sub_1C5EA6D90(v160, (uint64_t *)&v415, 2483, (uint64_t **)v162, v163, (uint64_t)v187, (std::string *)1, v186);
      v162 = (llvm::Value *)v233;
      if (v233)
        v234 = v233[16] >= 0x1Cu;
      else
        v234 = 0;
      v155 = v388;
      if (v234)
        v233[17] = *(_BYTE *)(v159 + 17) & 0xFE | v233[17] & 1;
      llvm::Value::doRAUW((llvm::ValueAsMetadata *)v159, (llvm::Value *)v233, (llvm::Value *)1);
LABEL_464:
      if (v415 != v417)
        free(v415);
      if (v155 >= 2)
      {
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v159, v162, (llvm::Value *)1);
        v235 = v412;
        if (v412 >= (unint64_t)HIDWORD(v412))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v411, (uint64_t)v413, v412 + 1, 8);
          v235 = v412;
        }
        *((_QWORD *)v411 + v235) = v159;
        LODWORD(v412) = v412 + 1;
      }
      v156 = *(_QWORD *)(v156 + 8);
    }
    while (v156);
    v120 = 1;
LABEL_506:
    if (v385 == 2144 || v385 == 2142)
    {
      for (j = v380[1]; j; j = *(_QWORD *)(j + 8))
      {
        v238 = *(_QWORD *)(j + 24);
        if (*(_BYTE *)(v238 + 16) == 84
          && (v239 = *(_QWORD *)(v238 - 32)) != 0
          && !*(_BYTE *)(v239 + 16)
          && *(_QWORD *)(v239 + 24) == *(_QWORD *)(v238 + 72))
        {
          if ((*(_BYTE *)(v239 + 33) & 0x20) != 0)
            v240 = *(llvm::ValueAsMetadata **)(j + 24);
          else
            v240 = 0;
        }
        else
        {
          v240 = 0;
        }
        v241 = *(_DWORD *)(*((_QWORD *)v240 - 4) + 36);
        v242 = (uint64_t *)v240;
        if (v241 != 2142)
          v242 = (uint64_t *)((_QWORD *)v240 - 4 * (*((_DWORD *)v240 + 5) & 0x7FFFFFF))[4];
        v243 = *v242;
        v244 = *(unsigned __int8 *)(*v242 + 8);
        if (v244 == 18)
          v245 = *v242;
        else
          v245 = 0;
        v401 = 0;
        v246 = (llvm::ConstantInt *)(***(_QWORD ***)v240 + 1984);
        v401 = v246;
        if (v244 == 15 || v245 && *(llvm::ConstantInt **)(v245 + 24) == v246 && *(_DWORD *)(v245 + 32) >= 3u)
        {
          v247 = (void **)((char *)v240 - 32 * (*((_DWORD *)v240 + 5) & 0x7FFFFFF));
          v248 = *v247;
          v249 = 4;
          if (v241 != 2142)
            v249 = 8;
          v250 = (const char *)v247[v249];
          v251 = 12;
          if (v241 == 2142)
            v251 = 8;
          v394 = (const char *)v247[v251];
          v400 = v250;
          sub_1C4773D54((uint64_t)&v415, (uint64_t)v240, 0, 0, 0);
          if (*(_BYTE *)(v243 + 8) == 15)
          {
            if (v241 == 2142)
            {
              v406 = v248;
              v407 = v400;
              v408 = v394;
              v436 = 257;
              Intrinsic = (unsigned __int8 *)llvm::IRBuilderBase::CreateIntrinsic((uint64_t *)&v415, 2142, (uint64_t *)&v401, 1, (uint64_t *)&v406, 3, 0, (uint64_t)&v431);
              v436 = 257;
              v253 = sub_1C4773E38((uint64_t *)&v415, 48, Intrinsic, v243, (uint64_t)&v431);
              llvm::Value::doRAUW(v240, (llvm::Value *)v253, (llvm::Value *)1);
            }
            else
            {
              v299 = (unsigned __int8 *)((_QWORD *)v240 - 4 * (*((_DWORD *)v240 + 5) & 0x7FFFFFF))[4];
              v436 = 257;
              v300 = sub_1C4773E38((uint64_t *)&v415, 47, v299, (uint64_t)v401, (uint64_t)&v431);
              v406 = v248;
              v407 = v300;
              v408 = v400;
              v409 = (uint64_t)v394;
              v436 = 257;
              llvm::IRBuilderBase::CreateIntrinsic((uint64_t *)&v415, v241, (uint64_t *)&v401, 1, (uint64_t *)&v406, 4, 0, (uint64_t)&v431);
            }
          }
          else
          {
            v405 = 0;
            llvm::FixedVectorType::get(v401, (llvm::Type *)2);
            v405 = v254;
            v256 = llvm::UndefValue::get((llvm::UndefValue *)v245, v255);
            v257 = *(_QWORD *)(v245 + 24);
            if ((*(_DWORD *)(v257 + 8) & 0xFE) == 0x12)
              v257 = **(_QWORD **)(v257 + 16);
            v389 = (llvm::GetElementPtrInst *)(***(_QWORD ***)v240 + 1912);
            v258 = *(_DWORD *)(v245 + 32);
            v259 = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v257) >> 3;
            v375 = v240;
            v386 = v258;
            v371 = j;
            if (v241 == 2142)
            {
              if (v258)
              {
                v260 = 0;
                v261 = 0;
                v262 = 2 * v259;
                v263 = v258;
                do
                {
                  v264 = llvm::ConstantInt::get(v401, v260, 0);
                  v436 = 257;
                  v265 = sub_1C4867B70((uint64_t *)&v415, v389, (uint64_t *)v248, (uint64_t)v264, (uint64_t)&v431);
                  v115 = v263 >= 2;
                  v263 -= 2;
                  if (v115)
                  {
                    v406 = v265;
                    v407 = v400;
                    v408 = v394;
                    v436 = 257;
                    v267 = llvm::IRBuilderBase::CreateIntrinsic((uint64_t *)&v415, 2142, (uint64_t *)&v405, 1, (uint64_t *)&v406, 3, 0, (uint64_t)&v431);
                    v436 = 257;
                    v268 = *(llvm::ConstantInt **)(*(_QWORD *)v420 + 1984);
                    LODWORD(v407) = *(_DWORD *)(*(_QWORD *)v420 + 1992) >> 8;
                    if (v407 > 0x40)
                      llvm::APInt::initSlowCase((llvm::APInt *)&v406, 0, 0);
                    else
                      v406 = 0;
                    v269 = llvm::ConstantInt::get(v268, (llvm::LLVMContext *)&v406, v266);
                    if (v407 >= 0x41 && v406)
                      MEMORY[0x1CAA32F9C](v406, 0x1000C8000313F17);
                    v271 = sub_1C4772EE0((uint64_t *)&v415, v267, (uint64_t)v269, (uint64_t)&v431);
                    v436 = 257;
                    v272 = *(llvm::ConstantInt **)(*(_QWORD *)v420 + 1984);
                    v273 = *(_DWORD *)(*(_QWORD *)v420 + 1992);
                    LODWORD(v407) = v273 >> 8;
                    if (v273 >> 8 > 0x40)
                    {
                      llvm::APInt::initSlowCase((llvm::APInt *)&v406, 1, 0);
                    }
                    else
                    {
                      if (v273 <= 0xFF)
                        v274 = 0;
                      else
                        v274 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v273);
                      v406 = (void *)(v274 & 1);
                    }
                    v275 = llvm::ConstantInt::get(v272, (llvm::LLVMContext *)&v406, v270);
                    if (v407 >= 0x41 && v406)
                      MEMORY[0x1CAA32F9C](v406, 0x1000C8000313F17);
                    v277 = sub_1C4772EE0((uint64_t *)&v415, v267, (uint64_t)v275, (uint64_t)&v431);
                    v436 = 257;
                    v278 = *(llvm::ConstantInt **)(*(_QWORD *)v420 + 1984);
                    v279 = *(_DWORD *)(*(_QWORD *)v420 + 1992);
                    LODWORD(v407) = v279 >> 8;
                    if (v279 >> 8 > 0x40)
                    {
                      llvm::APInt::initSlowCase((llvm::APInt *)&v406, v261, 0);
                      v258 = v386;
                    }
                    else
                    {
                      v258 = v386;
                      if (v279 <= 0xFF)
                        LODWORD(v280) = 0;
                      else
                        v280 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v279);
                      v406 = (void *)(v280 & v261);
                    }
                    v281 = llvm::ConstantInt::get(v278, (llvm::LLVMContext *)&v406, v276);
                    if (v407 >= 0x41 && v406)
                      MEMORY[0x1CAA32F9C](v406, 0x1000C8000313F17);
                    v283 = sub_1C4773154((uint64_t *)&v415, (uint64_t)v256, (uint64_t)v271, (uint64_t)v281, (uint64_t)&v431);
                    v284 = v261 + 1;
                    v436 = 257;
                    v285 = *(llvm::ConstantInt **)(*(_QWORD *)v420 + 1984);
                    v286 = *(_DWORD *)(*(_QWORD *)v420 + 1992);
                    LODWORD(v407) = v286 >> 8;
                    if (v286 >> 8 > 0x40)
                    {
                      llvm::APInt::initSlowCase((llvm::APInt *)&v406, v284, 0);
                    }
                    else
                    {
                      if (v286 <= 0xFF)
                        v287 = 0;
                      else
                        v287 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v286);
                      v406 = (void *)(v287 & v284);
                    }
                    v288 = llvm::ConstantInt::get(v285, (llvm::LLVMContext *)&v406, v282);
                    if (v407 >= 0x41 && v406)
                      MEMORY[0x1CAA32F9C](v406, 0x1000C8000313F17);
                    v289 = (uint64_t)v283;
                    v290 = (uint64_t)v277;
                    v291 = (uint64_t)v288;
                  }
                  else
                  {
                    v406 = v265;
                    v407 = v400;
                    v408 = v394;
                    v436 = 257;
                    v292 = llvm::IRBuilderBase::CreateIntrinsic((uint64_t *)&v415, 2142, (uint64_t *)&v401, 1, (uint64_t *)&v406, 3, 0, (uint64_t)&v431);
                    v294 = v292;
                    v436 = 257;
                    v295 = *(llvm::ConstantInt **)(*(_QWORD *)v420 + 1984);
                    v296 = *(_DWORD *)(*(_QWORD *)v420 + 1992);
                    LODWORD(v407) = v296 >> 8;
                    if (v296 >> 8 > 0x40)
                    {
                      llvm::APInt::initSlowCase((llvm::APInt *)&v406, v261, 0);
                    }
                    else
                    {
                      if (v296 <= 0xFF)
                        v297 = 0;
                      else
                        v297 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v296);
                      v406 = (void *)(v297 & v261);
                    }
                    v298 = llvm::ConstantInt::get(v295, (llvm::LLVMContext *)&v406, v293);
                    if (v407 >= 0x41 && v406)
                      MEMORY[0x1CAA32F9C](v406, 0x1000C8000313F17);
                    v289 = (uint64_t)v256;
                    v290 = v294;
                    v291 = (uint64_t)v298;
                  }
                  v256 = (llvm::Value *)sub_1C4773154((uint64_t *)&v415, v289, v290, v291, (uint64_t)&v431);
                  v261 += 2;
                  v260 += v262;
                }
                while (v261 < v258);
              }
              v240 = v375;
              llvm::Value::doRAUW(v375, v256, (llvm::Value *)1);
            }
            else
            {
              v381 = (uint64_t *)v248;
              if (v258)
              {
                v301 = 0;
                v302 = 0;
                v379 = (_DWORD *)((char *)v240 + 32);
                v377 = 2 * v259;
                v303 = v386;
                do
                {
                  v304 = llvm::ConstantInt::get(v401, v301, 0);
                  v436 = 257;
                  v306 = sub_1C4867B70((uint64_t *)&v415, v389, v381, (uint64_t)v304, (uint64_t)&v431);
                  v307 = *(_QWORD *)&v379[-8 * (*((_DWORD *)v240 + 5) & 0x7FFFFFF)];
                  v308 = v302;
                  v436 = 257;
                  v309 = *(llvm::ConstantInt **)(*(_QWORD *)v420 + 1984);
                  v310 = *(_DWORD *)(*(_QWORD *)v420 + 1992);
                  LODWORD(v407) = v310 >> 8;
                  if (v310 >> 8 > 0x40)
                  {
                    llvm::APInt::initSlowCase((llvm::APInt *)&v406, v302, 0);
                  }
                  else
                  {
                    if (v310 <= 0xFF)
                      v311 = 0;
                    else
                      v311 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v310);
                    v406 = (void *)(v311 & v302);
                  }
                  v312 = llvm::ConstantInt::get(v309, (llvm::LLVMContext *)&v406, v305);
                  if (v407 >= 0x41 && v406)
                    MEMORY[0x1CAA32F9C](v406, 0x1000C8000313F17);
                  v313 = sub_1C4772EE0((uint64_t *)&v415, v307, (uint64_t)v312, (uint64_t)&v431);
                  v315 = (uint64_t)v313;
                  v115 = v303 >= 2;
                  v303 -= 2;
                  if (v115)
                  {
                    v316 = v308 + 1;
                    v436 = 257;
                    v317 = *(llvm::ConstantInt **)(*(_QWORD *)v420 + 1984);
                    v318 = *(_DWORD *)(*(_QWORD *)v420 + 1992);
                    LODWORD(v407) = v318 >> 8;
                    if (v318 >> 8 > 0x40)
                    {
                      llvm::APInt::initSlowCase((llvm::APInt *)&v406, v316, 0);
                    }
                    else
                    {
                      if (v318 <= 0xFF)
                        v319 = 0;
                      else
                        v319 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v318);
                      v406 = (void *)(v319 & v316);
                    }
                    v320 = llvm::ConstantInt::get(v317, (llvm::LLVMContext *)&v406, v314);
                    if (v407 >= 0x41 && v406)
                      MEMORY[0x1CAA32F9C](v406, 0x1000C8000313F17);
                    v321 = sub_1C4772EE0((uint64_t *)&v415, v307, (uint64_t)v320, (uint64_t)&v431);
                    v324 = llvm::UndefValue::get(v405, v322);
                    v436 = 257;
                    v325 = *(llvm::ConstantInt **)(*(_QWORD *)v420 + 1984);
                    LODWORD(v407) = *(_DWORD *)(*(_QWORD *)v420 + 1992) >> 8;
                    if (v407 > 0x40)
                      llvm::APInt::initSlowCase((llvm::APInt *)&v406, 0, 0);
                    else
                      v406 = 0;
                    v326 = llvm::ConstantInt::get(v325, (llvm::LLVMContext *)&v406, v323);
                    if (v407 >= 0x41 && v406)
                      MEMORY[0x1CAA32F9C](v406, 0x1000C8000313F17);
                    v328 = sub_1C4773154((uint64_t *)&v415, (uint64_t)v324, v315, (uint64_t)v326, (uint64_t)&v431);
                    v436 = 257;
                    v329 = *(llvm::ConstantInt **)(*(_QWORD *)v420 + 1984);
                    v330 = *(_DWORD *)(*(_QWORD *)v420 + 1992);
                    LODWORD(v407) = v330 >> 8;
                    if (v330 >> 8 > 0x40)
                    {
                      llvm::APInt::initSlowCase((llvm::APInt *)&v406, 1, 0);
                    }
                    else
                    {
                      if (v330 <= 0xFF)
                        LOBYTE(v331) = 0;
                      else
                        v331 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v330);
                      v406 = (void *)(v331 & 1);
                    }
                    v332 = llvm::ConstantInt::get(v329, (llvm::LLVMContext *)&v406, v327);
                    if (v407 >= 0x41 && v406)
                      MEMORY[0x1CAA32F9C](v406, 0x1000C8000313F17);
                    v333 = sub_1C4773154((uint64_t *)&v415, (uint64_t)v328, (uint64_t)v321, (uint64_t)v332, (uint64_t)&v431);
                    v406 = v306;
                    v407 = v333;
                    v408 = v400;
                    v409 = (uint64_t)v394;
                    v436 = 257;
                    llvm::IRBuilderBase::CreateIntrinsic((uint64_t *)&v415, v241, (uint64_t *)&v405, 1, (uint64_t *)&v406, 4, 0, (uint64_t)&v431);
                    v240 = v375;
                  }
                  else
                  {
                    v406 = v306;
                    v407 = v313;
                    v408 = v400;
                    v409 = (uint64_t)v394;
                    v436 = 257;
                    llvm::IRBuilderBase::CreateIntrinsic((uint64_t *)&v415, v241, (uint64_t *)&v401, 1, (uint64_t *)&v406, 4, 0, (uint64_t)&v431);
                  }
                  v302 = v308 + 2;
                  v301 += v377;
                }
                while (v308 + 2 < v386);
              }
            }
            j = v371;
          }
          if (v415 != v417)
            free(v415);
          v334 = v412;
          if (v412 >= (unint64_t)HIDWORD(v412))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v411, (uint64_t)v413, v412 + 1, 8);
            v334 = v412;
          }
          *((_QWORD *)v411 + v334) = v240;
          LODWORD(v412) = v412 + 1;
          v120 = 1;
        }
      }
    }
LABEL_637:
    v119 = (uint64_t *)v372[1];
  }
  while (v119 != v373);
  v335 = (uint64_t *)v411;
  if ((_DWORD)v412)
  {
    v336 = 8 * v412;
    do
    {
      v337 = *v335++;
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v337 + 40) + 40, (uint64_t ***)v337);
      v338 = *(_QWORD *)(v337 + 24);
      v339 = *(_QWORD **)(v337 + 32);
      *v339 = v338;
      *(_QWORD *)(v338 + 8) = v339;
      *(_QWORD *)(v337 + 24) = 0;
      *(_QWORD *)(v337 + 32) = 0;
      llvm::Value::deleteValue((llvm::Value *)v337);
      v336 -= 8;
    }
    while (v336);
    v335 = (uint64_t *)v411;
  }
  if (v335 != (uint64_t *)v413)
    free(v335);
  v118 = v374;
LABEL_646:
  v340 = (uint64_t *)v118[4];
  if (v340 != v373)
  {
    v341 = (llvm::ConstantInt **)v118;
    v342 = 0;
    v343 = *(_DWORD *)(a1 + 28);
    v344 = 3;
    v345 = *v341;
    if ((v343 - 6) < 0xA)
      v344 = 6;
    v383 = v344;
    v346 = 2;
    if ((v343 - 6) < 0xA)
      v346 = 5;
    v387 = v346;
    v347 = 13;
    if (v343 > 14)
      v347 = 19;
    v390 = v347;
    v395 = *(_DWORD *)(a1 + 28);
    v382 = v343 - 1;
    while (1)
    {
      v348 = v340 ? (uint64_t)(v340 - 7) : 0;
      if ((*(_BYTE *)(v348 + 33) & 0x20) != 0)
      {
        v349 = *(_QWORD *)(v348 + 8);
        if (v349)
          break;
      }
LABEL_748:
      v340 = (uint64_t *)v340[1];
      if (v340 == v373)
        return ((v370 | v120 & 1) != 0) | v342 & 1u;
    }
    while (2)
    {
      v350 = *(_QWORD *)(v349 + 24);
      if (*(_BYTE *)(v350 + 16) != 84)
        goto LABEL_743;
      v351 = *(_QWORD *)(v350 - 32);
      if (!v351
        || *(_BYTE *)(v351 + 16)
        || *(_QWORD *)(v351 + 24) != *(_QWORD *)(v350 + 72)
        || (*(_BYTE *)(v351 + 33) & 0x20) == 0
        || !*(_QWORD *)(*(_QWORD *)(v350 + 40) + 56))
      {
        goto LABEL_743;
      }
      LODWORD(v351) = *(_DWORD *)(v351 + 36);
      if ((int)v351 > 2483)
      {
        if ((int)v351 > 2731)
        {
          v355 = v351 - 2808;
          LOBYTE(v351) = 15;
          v352 = 0;
          switch(v355)
          {
            case 0:
              goto LABEL_722;
            case 1:
            case 2:
            case 3:
            case 4:
            case 5:
            case 9:
            case 10:
            case 11:
            case 13:
              goto LABEL_723;
            case 6:
              LOBYTE(v351) = 12;
              goto LABEL_722;
            case 7:
            case 8:
              LOBYTE(v351) = v390;
              goto LABEL_722;
            case 12:
              goto LABEL_705;
            case 14:
              if (v395 - 10 < 6 || v382 > 8)
                goto LABEL_721;
              v368 = "SGID not supported.";
              break;
            default:
              v352 = 0;
              goto LABEL_723;
          }
LABEL_753:
          llvm::report_fatal_error((llvm *)v368, (const char *)1);
        }
        if ((int)v351 > 2586)
        {
          v352 = 0;
          switch((int)v351)
          {
            case 2669:
              goto LABEL_712;
            case 2670:
            case 2672:
            case 2674:
              goto LABEL_723;
            case 2671:
            case 2673:
            case 2675:
              goto LABEL_683;
            case 2676:
              goto LABEL_691;
            case 2677:
              LOBYTE(v351) = v383;
              goto LABEL_722;
            case 2678:
LABEL_701:
              LOBYTE(v351) = 3;
              goto LABEL_722;
            case 2679:
              goto LABEL_703;
            default:
              v352 = 0;
              if ((_DWORD)v351 != 2587)
                goto LABEL_723;
LABEL_715:
              if (v382 >= 0xF)
                goto LABEL_721;
              v353 = (int)v382;
              v354 = &unk_1C865F2B0;
              break;
          }
        }
        else
        {
          v352 = 0;
          switch((int)v351)
          {
            case 2484:
              LOBYTE(v351) = v387;
              goto LABEL_722;
            case 2485:
              goto LABEL_703;
            case 2486:
              goto LABEL_701;
            case 2487:
            case 2488:
            case 2489:
            case 2490:
              goto LABEL_723;
            case 2491:
              goto LABEL_687;
            case 2492:
              goto LABEL_715;
            default:
              if ((_DWORD)v351 == 2544)
                goto LABEL_692;
              v352 = 0;
              if ((_DWORD)v351 != 2586)
                goto LABEL_723;
LABEL_687:
              if (v382 >= 0xF)
                goto LABEL_700;
              v353 = (int)v382;
              v354 = &unk_1C865F3A0;
              break;
          }
        }
LABEL_717:
        v351 = v354[v353];
LABEL_722:
        v352 = 1 << v351;
LABEL_723:
        if (!v352)
          goto LABEL_748;
        v357 = **(_QWORD **)(*(_QWORD *)(v348 + 24) + 16);
        if ((*(_DWORD *)(v357 + 8) & 0xFE) == 0x12)
          v357 = **(_QWORD **)(v357 + 16);
        PrimitiveSizeInBits = llvm::Type::getPrimitiveSizeInBits((llvm::Type *)v357);
        LODWORD(v416) = PrimitiveSizeInBits;
        if (PrimitiveSizeInBits > 0x40)
          llvm::APInt::initSlowCase((llvm::APInt *)&v415, 0, 0);
        else
          v415 = 0;
        v361 = llvm::ConstantInt::get(v345, (llvm::LLVMContext *)&v415, v358);
        if (v416 >= 0x41 && v415)
          MEMORY[0x1CAA32F9C](v415, 0x1000C8000313F17);
        LODWORD(v416) = PrimitiveSizeInBits;
        if (PrimitiveSizeInBits > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v415, v352, 0);
        }
        else
        {
          if (PrimitiveSizeInBits)
            v362 = 0xFFFFFFFFFFFFFFFFLL >> -(char)PrimitiveSizeInBits;
          else
            v362 = 0;
          v415 = (void *)(v362 & v352);
        }
        v364 = llvm::ConstantInt::get(v345, (llvm::LLVMContext *)&v415, v360);
        if (v416 >= 0x41 && v415)
          MEMORY[0x1CAA32F9C](v415, 0x1000C8000313F17);
        v415 = llvm::ValueAsMetadata::get(v361, v363);
        v416 = (uint64_t)llvm::ValueAsMetadata::get(v364, v365);
        Impl = (llvm::MDNode *)llvm::MDTuple::getImpl((uint64_t *)v345, &v415, 2, 0, 1);
        if (Impl || *(_QWORD *)(v350 + 48) || (*(_BYTE *)(v350 + 23) & 0x20) != 0)
          llvm::Value::setMetadata((llvm::Value *)v350, 4, Impl);
        v342 = 1;
LABEL_743:
        v349 = *(_QWORD *)(v349 + 8);
        if (!v349)
          goto LABEL_748;
        continue;
      }
      break;
    }
    if ((int)v351 <= 2168)
    {
      if ((int)v351 > 2138)
      {
        v352 = 0;
        switch((int)v351)
        {
          case 2139:
            goto LABEL_721;
          case 2140:
LABEL_692:
            if (v382 >= 0xF)
              goto LABEL_703;
            v353 = (int)v382;
            v354 = &unk_1C865F328;
            goto LABEL_717;
          case 2141:
          case 2142:
          case 2143:
          case 2144:
          case 2148:
          case 2149:
          case 2150:
          case 2151:
            goto LABEL_723;
          case 2145:
          case 2146:
          case 2147:
LABEL_683:
            LOBYTE(v351) = 11;
            goto LABEL_722;
          case 2152:
            goto LABEL_700;
          default:
            v352 = 0;
            if ((_DWORD)v351 != 2156)
              goto LABEL_723;
LABEL_705:
            LOBYTE(v351) = 5;
            break;
        }
        goto LABEL_722;
      }
      if ((_DWORD)v351 != 2107)
      {
        v352 = 0;
        if ((_DWORD)v351 == 2132)
        {
LABEL_691:
          LOBYTE(v351) = 16;
          goto LABEL_722;
        }
        goto LABEL_723;
      }
    }
    else
    {
      if ((int)v351 <= 2305)
      {
        v352 = 0;
        switch((int)v351)
        {
          case 2169:
            if (v395 > 0xF)
              goto LABEL_721;
            v356 = 1 << v395;
            if (((1 << v395) & 0xFC00) != 0)
              goto LABEL_712;
            if ((v356 & 0x3E0) != 0)
            {
              v352 = 0;
              goto LABEL_723;
            }
            if ((v356 & 0x1E) != 0)
            {
              v368 = "LayerID not supported.";
              goto LABEL_753;
            }
            break;
          case 2170:
          case 2171:
          case 2172:
            goto LABEL_723;
          case 2173:
            LOBYTE(v351) = 4;
            goto LABEL_722;
          case 2174:
            goto LABEL_703;
          case 2175:
          case 2176:
            goto LABEL_683;
          default:
            v352 = 0;
            if ((_DWORD)v351 == 2305)
              goto LABEL_703;
            goto LABEL_723;
        }
        goto LABEL_721;
      }
      if ((int)v351 > 2407)
      {
        if ((v351 - 2408) >= 3)
        {
          if ((_DWORD)v351 == 2423 || (v352 = 0, (_DWORD)v351 == 2444))
          {
LABEL_703:
            LOBYTE(v351) = 2;
            goto LABEL_722;
          }
          goto LABEL_723;
        }
        if (v382 < 0xF)
        {
          v353 = (int)v382;
          v354 = &unk_1C865F238;
          goto LABEL_717;
        }
LABEL_721:
        LOBYTE(v351) = 8;
        goto LABEL_722;
      }
      if ((_DWORD)v351 != 2306)
      {
        v352 = 0;
        if ((_DWORD)v351 == 2365)
        {
LABEL_712:
          LOBYTE(v351) = 10;
          goto LABEL_722;
        }
        goto LABEL_723;
      }
    }
LABEL_700:
    LOBYTE(v351) = 1;
    goto LABEL_722;
  }
  v342 = 0;
  return ((v370 | v120 & 1) != 0) | v342 & 1u;
}

uint64_t sub_1C5597394(uint64_t a1, int *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t *v8;
  int v9;
  int v10;
  BOOL v11;
  uint64_t v12;
  int v13;
  uint64_t Declaration;
  uint64_t v15;
  uint64_t **v16;
  uint64_t v18;
  uint64_t v19;
  uint64_t **v20;
  unsigned __int8 *v21;
  uint64_t v22;
  unsigned __int8 *v23;
  uint64_t v24;
  uint64_t **v25;
  uint64_t *v26;
  uint64_t v27;
  unsigned __int8 *v28;
  uint64_t v29;
  unsigned __int8 *v30;
  uint64_t v31;
  unsigned int v32;
  unint64_t v33;
  _QWORD *v34;
  uint64_t v35;
  uint64_t **v36;
  uint64_t v37;
  _BYTE v39[32];
  __int16 v40;
  uint64_t v41[2];
  void *v42;
  uint64_t v43;
  _QWORD v44[3];

  v44[2] = *MEMORY[0x1E0C80C00];
  v42 = v44;
  v44[0] = a1;
  v43 = 0x200000001;
  v8 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a5 + 48) + 56) + 40);
  v9 = *a2;
  if (*a2 == 3)
  {
    if (a4)
      v13 = 2772;
    else
      v13 = 2770;
    Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a5 + 48) + 56) + 40), 2744, 0, 0);
    v15 = llvm::Intrinsic::getDeclaration(v8, 2140, 0, 0);
    if (v15)
      v16 = *(uint64_t ***)(v15 + 24);
    else
      v16 = 0;
    v40 = 257;
    v21 = (unsigned __int8 *)sub_1C4774778((uint64_t *)a5, v16, v15, 0, 0, (uint64_t)v39, 0);
    v22 = **(_QWORD **)(a5 + 64) + 1936;
    v40 = 257;
    v23 = sub_1C4773E38((uint64_t *)a5, 38, v21, v22, (uint64_t)v39);
    v24 = llvm::Intrinsic::getDeclaration(v8, 2544, 0, 0);
    if (v24)
      v25 = *(uint64_t ***)(v24 + 24);
    else
      v25 = 0;
    v40 = 257;
    v28 = (unsigned __int8 *)sub_1C4774778((uint64_t *)a5, v25, v24, 0, 0, (uint64_t)v39, 0);
    v29 = **(_QWORD **)(a5 + 64) + 1936;
    v40 = 257;
    v30 = sub_1C4773E38((uint64_t *)a5, 38, v28, v29, (uint64_t)v39);
    if (Declaration)
      v20 = *(uint64_t ***)(Declaration + 24);
    else
      v20 = 0;
    v41[0] = (uint64_t)v23;
    v41[1] = (uint64_t)v30;
    v40 = 257;
    v26 = (uint64_t *)a5;
    v19 = Declaration;
    v27 = 2;
  }
  else
  {
    if (v9 != 2)
    {
      if (a4)
        v10 = 2773;
      else
        v10 = 2771;
      v11 = v9 == 1;
      LODWORD(v12) = 1;
      if (v11)
        v13 = v10;
      else
        v13 = 0;
      if (!a4)
        goto LABEL_37;
      goto LABEL_34;
    }
    if (a4)
      v13 = 2772;
    else
      v13 = 2770;
    v18 = llvm::Intrinsic::getDeclaration(*(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a5 + 48) + 56) + 40), 2745, 0, 0);
    v19 = v18;
    if (v18)
      v20 = *(uint64_t ***)(v18 + 24);
    else
      v20 = 0;
    v41[0] = *((_QWORD *)a2 + 1);
    v40 = 257;
    v26 = (uint64_t *)a5;
    v27 = 1;
  }
  v31 = sub_1C4774778(v26, v20, v19, v41, v27, (uint64_t)v39, 0);
  v32 = v43;
  if (v43 >= HIDWORD(v43))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v42, (uint64_t)v44, v43 + 1, 8);
    v32 = v43;
  }
  *((_QWORD *)v42 + v32) = v31;
  LODWORD(v12) = v43 + 1;
  LODWORD(v43) = v43 + 1;
  if (a4)
  {
LABEL_34:
    v12 = v12;
    v33 = v12 + 2;
    if (v33 > HIDWORD(v43))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v42, (uint64_t)v44, v33, 8);
      v12 = v43;
    }
    v34 = (char *)v42 + 8 * v12;
    *v34 = a3;
    v34[1] = a4;
    LODWORD(v43) = v43 + 2;
  }
LABEL_37:
  v35 = llvm::Intrinsic::getDeclaration(v8, v13, 0, 0);
  if (v35)
    v36 = *(uint64_t ***)(v35 + 24);
  else
    v36 = 0;
  v40 = 257;
  v37 = sub_1C4774778((uint64_t *)a5, v36, v35, (uint64_t *)v42, v43, (uint64_t)v39, 0);
  if (v42 != v44)
    free(v42);
  return v37;
}

uint64_t sub_1C55976F0()
{
  uint64_t v0;

  v0 = sub_1C47AD050((uint64_t)&qword_1ED806518, 0, 0);
  qword_1ED806598 = 0;
  unk_1ED8065A0 = 0;
  qword_1ED8065C0 = 0;
  unk_1ED8065C8 = 0;
  qword_1ED8065B8 = 0;
  byte_1ED8065D0 = 0;
  unk_1ED8065A8 = 0;
  unk_1ED8065B0 = &unk_1E819E950;
  qword_1ED806518 = (uint64_t)&unk_1E819E480;
  qword_1ED8065D8 = (uint64_t)&unk_1E819E970;
  qword_1ED8065E0 = (uint64_t)&off_1E7FA8CB8;
  qword_1ED8065F8 = (uint64_t)&qword_1ED8065E0;
  llvm::cl::Option::setArgStr(v0, "agx-expand-builtins-default-device", 0x22uLL);
  qword_1ED806548 = (uint64_t)"type";
  unk_1ED806550 = 4;
  unk_1ED806540 = 49;
  word_1ED806522 = word_1ED806522 & 0xFF9F | 0x20;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED806518);
  return __cxa_atexit((void (*)(void *))sub_1C49BEA38, &qword_1ED806518, &dword_1C475E000);
}

uint64_t sub_1C55977D0(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "temporary inlining workarounds";
  *(_QWORD *)(v2 + 8) = 30;
  *(_QWORD *)(v2 + 16) = "inline-prep-hack";
  *(_QWORD *)(v2 + 24) = 16;
  *(_QWORD *)(v2 + 32) = &unk_1ED806600;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C5597C1C;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C5597860(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED806600;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E816FAE8;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED806608);
  if (v3 != -1)
  {
    v7[0] = sub_1C55977D0;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED806608, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C5597928(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "add alwaysinline";
  *(_QWORD *)(v2 + 8) = 16;
  *(_QWORD *)(v2 + 16) = "addalwaysinline";
  *(_QWORD *)(v2 + 24) = 15;
  *(_QWORD *)(v2 + 32) = &unk_1ED806601;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C55981B0;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C55979B8(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED806601;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E816FB88;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED806610);
  if (v3 != -1)
  {
    v7[0] = sub_1C5597928;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED806610, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C5597A80(llvm *a1)
{
  llvm::PassRegistry *v2;
  llvm::PassRegistry *v3;
  uint64_t v4;

  llvm::initializeAssumptionCacheTrackerPass((uint64_t)a1);
  llvm::initializeCallGraphWrapperPassPass(a1, v2);
  llvm::initializeProfileSummaryInfoWrapperPassPass(a1, v3);
  llvm::initializeTargetTransformInfoWrapperPassPass((uint64_t)a1);
  llvm::initializeTargetLibraryInfoWrapperPassPass((uint64_t)a1);
  v4 = operator new();
  *(_QWORD *)v4 = "Performance-critical inlining decisions";
  *(_QWORD *)(v4 + 8) = 39;
  *(_QWORD *)(v4 + 16) = "agx-must-inline";
  *(_QWORD *)(v4 + 24) = 15;
  *(_QWORD *)(v4 + 32) = &unk_1ED806602;
  *(_WORD *)(v4 + 40) = 0;
  *(_BYTE *)(v4 + 42) = 0;
  *(_QWORD *)(v4 + 48) = 0;
  *(_QWORD *)(v4 + 56) = 0;
  *(_QWORD *)(v4 + 64) = 0;
  *(_QWORD *)(v4 + 72) = sub_1C559824C;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v4, 1);
  return v4;
}

uint64_t sub_1C5597B34(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED806602;
  *(_DWORD *)(a1 + 24) = 3;
  *(_BYTE *)(a1 + 28) = 1;
  *(_QWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_QWORD *)(a1 + 96) = 0x1000000000;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_QWORD *)a1 = &off_1E816FC28;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED806618);
  if (v3 != -1)
  {
    v7[0] = sub_1C5597A80;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED806618, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C5597C1C()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5597860(v0);
}

void sub_1C5597C48(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C5597C6C(int a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
}

uint64_t sub_1C5597C74(uint64_t a1, uint64_t ***a2)
{
  uint64_t **v3;
  uint64_t *v4;
  int v5;
  uint64_t v6;
  unsigned __int8 v7;
  unint64_t v8;
  unsigned int v9;
  int i;
  unsigned int v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t j;
  unint64_t v19;
  unsigned __int8 *v20;
  size_t v21;
  uint64_t v22;
  uint64_t **v23;
  llvm::BasicBlock *v24;
  char *FirstNonPHIOrDbgOrAlloca;
  char *v26;
  char *v27;
  llvm::Instruction *v28;
  char *v29;
  llvm::Instruction *v30;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t ****v36;
  uint64_t ***v37;
  int v38;
  int v39;
  uint64_t ***v40;
  unint64_t v41;
  void *__p[2];
  char v43;
  _QWORD v44[13];
  char v45;
  uint64_t v46;
  uint64_t v47[2];
  uint64_t v48;

  sub_1C611A8F4(&v48, (uint64_t)a2[5]);
  v3 = a2[14];
  if (!v3)
    goto LABEL_40;
  if (!*((_DWORD *)v3 + 2))
    goto LABEL_40;
  v4 = v3[5];
  if (!v4)
    goto LABEL_40;
  v5 = *((_DWORD *)v4 + 10);
  if (!v5)
    goto LABEL_40;
  v6 = v4[3];
  v7 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
  {
    v41 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override)
      v41 = 0xFF51AFD7ED558CCDLL;
    qword_1ED7EAC80 = v41;
    __cxa_guard_release(&qword_1ED7EAC88);
  }
  v8 = 0x9DDFEA08EB382D69
     * ((0x9DDFEA08EB382D69 * (qword_1ED7EAC80 ^ 0xACC792AF839889B6)) ^ ((0x9DDFEA08EB382D69
                                                                            * (qword_1ED7EAC80 ^ 0xACC792AF839889B6)) >> 47) ^ 0xCAEAE6CAE4EAE8C2);
  v9 = (-348639895 * ((v8 >> 47) ^ v8)) ^ 0x74616566;
  for (i = 1; ; ++i)
  {
    v11 = v9 & (v5 - 1);
    v12 = v6 + 24 * v11;
    v13 = *(_QWORD **)v12;
    if (*(_QWORD *)v12 == -1)
    {
      if ("target-features" == (char *)-1)
        goto LABEL_20;
      goto LABEL_9;
    }
    if (v13 != (_QWORD *)-2)
      break;
    if ("target-features" == (char *)-2)
      goto LABEL_20;
LABEL_9:
    if (v13 == (_QWORD *)-1)
      goto LABEL_40;
    v9 = i + v11;
  }
  if (*(_QWORD *)(v12 + 8) != 15)
    goto LABEL_9;
  if (*v13 != 0x662D746567726174 || *(_QWORD *)((char *)v13 + 7) != 0x7365727574616566)
    goto LABEL_9;
LABEL_20:
  v15 = *(_QWORD *)(v12 + 16);
  if (v15 && *(_BYTE *)(v15 + 8) == 2)
  {
    v16 = *(unsigned int *)(v15 + 16);
    v47[0] = v15 + *(unsigned int *)(v15 + 12) + 25;
    v47[1] = v16;
    sub_1C4D7C8B4((uint64_t)v44);
    v17 = llvm::StringRef::find(v47, "-fp16", 5uLL, 0);
    if (v17 == -1)
    {
      v19 = 0;
    }
    else
    {
      for (j = v17; j != -1; j = llvm::StringRef::find(v47, "-fp16", 5uLL, j + 6))
      {
        std::ostream::write();
        v19 = j + 6;
      }
    }
    if (v16 > v19)
      std::ostream::write();
    std::stringbuf::str();
    if (v43 >= 0)
      v20 = (unsigned __int8 *)__p;
    else
      v20 = (unsigned __int8 *)__p[0];
    if (v43 >= 0)
      v21 = v43 & 0x7F;
    else
      v21 = (size_t)__p[1];
    a2[14] = (uint64_t **)llvm::AttributeList::addAttributeAtIndex((llvm::AttributeList *)(a2 + 14), **a2, -1, "target-features", 0xFuLL, v20, v21);
    if (v43 < 0)
      operator delete(__p[0]);
    v44[0] = *MEMORY[0x1E0DE4F50];
    v22 = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 72);
    *(_QWORD *)((char *)v44 + *(_QWORD *)(v44[0] - 24)) = *(_QWORD *)(MEMORY[0x1E0DE4F50] + 64);
    v44[2] = v22;
    v44[3] = MEMORY[0x1E0DE4FB8] + 16;
    if (v45 < 0)
      operator delete((void *)v44[11]);
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x1CAA32F18](&v46);
  }
LABEL_40:
  a2[14] = (uint64_t **)llvm::AttributeList::removeAttributeAtIndex((uint64_t *)a2 + 14, **a2, -1, "less-precise-fpmad", 0x12uLL);
  a2[14] = (uint64_t **)llvm::AttributeList::removeAttributeAtIndex((uint64_t *)a2 + 14, **a2, -1, "no-infs-fp-math", 0xFuLL);
  a2[14] = (uint64_t **)llvm::AttributeList::removeAttributeAtIndex((uint64_t *)a2 + 14, **a2, -1, "no-nans-fp-math", 0xFuLL);
  a2[14] = (uint64_t **)llvm::AttributeList::removeAttributeAtIndex((uint64_t *)a2 + 14, **a2, -1, "no-signed-zeros-fp-math", 0x17uLL);
  a2[14] = (uint64_t **)llvm::AttributeList::removeAttributeAtIndex((uint64_t *)a2 + 14, **a2, -1, "unsafe-fp-math", 0xEuLL);
  if (!llvm::Module::getPICLevel((llvm::Module *)a2[5]))
  {
    if ((*((_BYTE *)a2 + 23) & 0x10) == 0)
    {
LABEL_66:
      if (!sub_1C611A970((uint64_t)&v48, (uint64_t)a2))
        *((_DWORD *)a2 + 8) = (_DWORD)a2[4] & 0xFFFFBFC0 | 0x4008;
      goto LABEL_41;
    }
    v32 = ***a2;
    v33 = *(_QWORD *)(v32 + 152);
    v34 = *(unsigned int *)(v32 + 168);
    if ((_DWORD)v34)
    {
      LODWORD(v35) = (v34 - 1) & ((a2 >> 4) ^ (a2 >> 9));
      v36 = (uint64_t ****)(v33 + 16 * v35);
      v37 = *v36;
      if (*v36 == a2)
      {
LABEL_64:
        v40 = v36[1];
        if ((unint64_t)*v40 >= 4 && *((_DWORD *)v40 + 4) == 778266465)
          goto LABEL_41;
        goto LABEL_66;
      }
      v38 = 1;
      while (v37 != (uint64_t ***)-4096)
      {
        v39 = v35 + v38++;
        v35 = v39 & (v34 - 1);
        v37 = *(uint64_t ****)(v33 + 16 * v35);
        if (v37 == a2)
        {
          v36 = (uint64_t ****)(v33 + 16 * v35);
          goto LABEL_64;
        }
      }
    }
    v36 = (uint64_t ****)(v33 + 16 * v34);
    goto LABEL_64;
  }
LABEL_41:
  v23 = a2[10];
  if (v23)
    v24 = (llvm::BasicBlock *)(v23 - 3);
  else
    v24 = 0;
  FirstNonPHIOrDbgOrAlloca = llvm::BasicBlock::getFirstNonPHIOrDbgOrAlloca(v24);
  v26 = (char *)v24 + 40;
  if ((char *)v24 + 40 != FirstNonPHIOrDbgOrAlloca)
  {
    v27 = FirstNonPHIOrDbgOrAlloca;
    if (FirstNonPHIOrDbgOrAlloca)
      v28 = (llvm::Instruction *)(FirstNonPHIOrDbgOrAlloca - 24);
    else
      v28 = 0;
    do
    {
      v29 = v27;
      v27 = (char *)*((_QWORD *)v27 + 1);
      if (v29)
        v30 = (llvm::Instruction *)(v29 - 24);
      else
        v30 = 0;
      if (v29 && *((_BYTE *)v30 + 16) == 59)
        llvm::Instruction::moveBefore(v30, v28);
    }
    while (v27 != v26);
  }
  return 1;
}

uint64_t sub_1C55981B0()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C55979B8(v0);
}

void sub_1C55981DC(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C5598200(int a1, llvm::AnalysisUsage *this)
{
  *((_BYTE *)this + 160) = 1;
  llvm::AnalysisUsage::setPreservesCFG(this);
}

uint64_t sub_1C5598210(uint64_t a1, uint64_t a2)
{
  *(_QWORD *)(a2 + 112) = llvm::AttributeList::addAttributeAtIndex((uint64_t *)(a2 + 112), **(uint64_t ***)a2, -1, 2);
  return 1;
}

uint64_t sub_1C559824C()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5597B34(v0);
}

void sub_1C5598278(_QWORD *a1)
{
  sub_1C627A6A0(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C559829C(llvm::LegacyInlinerBase *a1, llvm::AnalysisUsage *a2)
{
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)llvm::TargetTransformInfoWrapperPass::ID);
  return llvm::LegacyInlinerBase::getAnalysisUsage(a1, a2);
}

uint64_t sub_1C55982D4(uint64_t a1, uint64_t a2)
{
  char **v4;
  char *v5;

  v4 = **(char ****)(a1 + 8);
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != llvm::TargetTransformInfoWrapperPass::ID);
  *(_QWORD *)(a1 + 160) = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), llvm::TargetTransformInfoWrapperPass::ID);
  return llvm::LegacyInlinerBase::inlineCalls(a1, a2);
}

uint64_t sub_1C5598334@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6;
  uint64_t v7;
  BOOL v8;
  uint64_t result;
  _BYTE *v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  unsigned __int8 v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  int v18;
  int v19;
  uint64_t v20;
  int v21;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  int v25;
  uint64_t *v26;
  uint64_t v27;
  unsigned int v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  int v33;
  BOOL v34;
  char v35;
  const char *v36;
  uint64_t v37;
  uint64_t v38;
  unsigned int v39;
  int v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  BOOL v45;
  char v46;
  const char *v47;
  unsigned int v48;
  BOOL v49;
  char v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  unsigned int v56;
  uint64_t v57;
  int v58;
  unsigned int v59;
  uint64_t v60;
  uint64_t v61;
  int v62;
  uint64_t v63;
  int v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  int v71;
  int v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  int v80;
  uint64_t v81;
  uint64_t v82;
  int v83;
  int v84;
  int v85;
  int v86;
  _BYTE v87[32];
  char v88;
  _BYTE v89[32];
  char v90;
  _BYTE v91[32];
  char v92;
  _BYTE v93[32];
  char v94;
  _BYTE v95[32];
  char v96;
  _BYTE v97[32];
  char v98;
  int v99;
  char v100;
  char v101;
  int v102;
  char v103;
  int v104;
  char v105;
  char v106;
  char v107;
  int v108;
  char v109;
  char v110;
  char v111;
  char v112;
  char v113;
  int v114;
  __int16 v115;
  _BYTE v116[32];
  char v117;
  _BYTE v118[32];
  char v119;
  _BYTE v120[32];
  char v121;
  _BYTE v122[32];
  char v123;
  _BYTE v124[32];
  char v125;
  char v126;
  _BYTE v127[40];
  char v128;
  _BYTE v129[32];
  char v130;
  _BYTE v131[32];
  char v132;
  uint64_t v133;
  uint64_t v134[2];
  int v135;
  _QWORD v136[2];
  int v137;
  uint64_t v138;
  uint64_t v139;
  int v140;

  v6 = *(_QWORD *)(a2 - 32);
  v7 = *(_QWORD *)(*(_QWORD *)(a2 + 40) + 56);
  if (v6)
    v8 = *(_BYTE *)(v6 + 16) == 3;
  else
    v8 = 0;
  if (v8)
  {
    if ((*(_DWORD *)(v6 + 20) & 0x7FFFFFF) == 0)
      goto LABEL_8;
  }
  else if (!*(_BYTE *)(v6 + 16) && *(_QWORD *)(v6 + 72) == v6 + 72 && (*(_BYTE *)(v6 + 34) & 0x80) == 0)
  {
LABEL_8:
    v131[0] = 0;
    v132 = 0;
    result = (uint64_t)sub_1C4E55798((llvm::APInt *)"undefined external callee", (llvm::APInt *)v131, a3);
    if (v132)
    {
      v10 = v131;
      return sub_1C61996A0((uint64_t)v10);
    }
    return result;
  }
  v11 = *(_QWORD *)(v6 + 8);
  if (v11)
  {
    while (1)
    {
      v12 = *(_QWORD *)(v11 + 24);
      if (v12)
      {
        if (*(_BYTE *)(v12 + 16) == 84 && *(_QWORD *)(*(_QWORD *)(v12 + 40) + 56) == v6)
          break;
      }
      v11 = *(_QWORD *)(v11 + 8);
      if (!v11)
        goto LABEL_16;
    }
    v129[0] = 0;
    v130 = 0;
    result = (uint64_t)sub_1C4E55798((llvm::APInt *)"recursive function", (llvm::APInt *)v129, a3);
    if (v130)
    {
      v10 = v129;
      return sub_1C61996A0((uint64_t)v10);
    }
    return result;
  }
LABEL_16:
  v126 = 0;
  v128 = 0;
  v13 = *(_QWORD *)(v6 + 112);
  if (v13 && (*(_BYTE *)(v13 + 15) & 8) != 0)
  {
    v124[0] = 0;
    v125 = 0;
    result = (uint64_t)sub_1C4E55798((llvm::APInt *)"noinline function attribute", (llvm::APInt *)v124, a3);
    if (v125)
    {
      result = sub_1C61996A0((uint64_t)v124);
      v125 = 0;
    }
  }
  else
  {
    v14 = atomic_load((unsigned __int8 *)&qword_1ED806620);
    if ((v14 & 1) == 0 && __cxa_guard_acquire(&qword_1ED806620))
    {
      byte_1ED806603 = 0;
      __cxa_guard_release(&qword_1ED806620);
    }
    if (byte_1ED806603)
    {
      v122[0] = 0;
      v123 = 0;
      result = (uint64_t)sub_1C4E55798((llvm::APInt *)"disabled", (llvm::APInt *)v122, a3);
      if (v123)
      {
        result = sub_1C61996A0((uint64_t)v122);
        v123 = 0;
      }
      goto LABEL_24;
    }
    v15 = *(_QWORD *)(v6 + 8);
    if (v15 && !*(_QWORD *)(v15 + 8) && (*(_DWORD *)(v6 + 32) & 0xFu) - 7 <= 1)
    {
      v120[0] = 0;
      v121 = 0;
      result = (uint64_t)sub_1C4E556F4((llvm::APInt *)"Callee is going to be dead after inlining", (llvm::APInt *)v120, a3);
      if (v121)
      {
        result = sub_1C61996A0((uint64_t)v120);
        v121 = 0;
      }
      goto LABEL_24;
    }
    v76 = v6;
    v77 = v7;
    v74 = a2;
    v75 = a3;
    v16 = *(_QWORD *)(v6 + 80);
    v78 = v6 + 72;
    if (v16 != v6 + 72)
    {
      v17 = 0;
      v18 = 0;
      v80 = 0;
      v19 = 0;
      v20 = 0;
      v21 = 0;
      v81 = *(_QWORD *)(v7 + 40) + 272;
      while (1)
      {
        v22 = v16 - 24;
        v79 = v16;
        if (!v16)
          v22 = 0;
        v23 = v22 + 40;
        v24 = *(_QWORD *)(v22 + 48);
        v82 = v22 + 40;
        if (v24 != v22 + 40)
          break;
LABEL_82:
        v16 = *(_QWORD *)(v79 + 8);
        if (v16 == v78)
          goto LABEL_87;
      }
      while (1)
      {
        v6 = v24 ? v24 - 24 : 0;
        v25 = *(unsigned __int8 *)(v6 + 16);
        v26 = v25 == 60 ? (uint64_t *)v6 : 0;
        if (v24 && v25 == 60)
          break;
LABEL_61:
        if (v25 == 61)
          v37 = v6;
        else
          v37 = 0;
        if (v24 && v25 == 61)
        {
          v38 = *(_QWORD *)(v37 - 32);
          v39 = *(_DWORD *)(*(_QWORD *)v38 + 8);
          if ((v39 & 0xFE) == 0x12)
            v39 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v38 + 16) + 8);
          if (v39 > 0xFF)
            goto LABEL_72;
          v40 = *(unsigned __int8 *)(v38 + 16);
          if (v40 == 62)
            v40 = *(unsigned __int8 *)(*(_QWORD *)(v38 - 32 * (*(_DWORD *)(v38 + 20) & 0x7FFFFFF)) + 16);
          if (v40 == 59)
          {
LABEL_72:
            v25 = 61;
          }
          else
          {
            v86 = v18;
            v7 = v20;
            v41 = **(_QWORD **)(v37 - 64);
            sub_1C4768AD0(v81, v41);
            v43 = v42;
            v45 = v44 == 1;
            llvm::DataLayout::getAlignment(v81, v41);
            if (v45)
            {
              v51 = v46;
              v46 = v51;
            }
            v20 = v7 + (((1 << v46) - 1 + ((unint64_t)(v43 + 7) >> 3)) & -(1 << v46));
            ++v80;
            v25 = *(unsigned __int8 *)(v6 + 16);
            v18 = v86;
            v23 = v82;
          }
        }
        v48 = v25 - 29;
        if (v48)
          v49 = v48 >= 0xB;
        else
          v49 = 1;
        if (!v49)
          ++v17;
        ++v21;
        v24 = *(_QWORD *)(v24 + 8);
        if (v24 == v23)
          goto LABEL_82;
      }
      v27 = *(v26 - 4);
      v28 = *(_DWORD *)(*(_QWORD *)v27 + 8);
      if ((v28 & 0xFE) == 0x12)
        v28 = *(_DWORD *)(**(_QWORD **)(*(_QWORD *)v27 + 16) + 8);
      if (v28 <= 0xFF)
      {
        v29 = *(unsigned __int8 *)(v27 + 16);
        if (v29 == 83
          || v29 == 62
          && (v29 = *(unsigned __int8 *)(*(_QWORD *)(v27 - 32 * (*(_DWORD *)(v27 + 20) & 0x7FFFFFF)) + 16), v29 == 83))
        {
          v83 = v20;
          v84 = v19;
          v85 = v18;
          v7 = 16;
LABEL_56:
          v30 = *v26;
          sub_1C4768AD0(v81, *v26);
          v32 = v31;
          v34 = v33 == 1;
          llvm::DataLayout::getAlignment(v81, v30);
          if (v34)
          {
            v50 = v35;
            v35 = v50;
          }
          v20 = v83
              + v7 * (((1 << v35) - 1 + ((unint64_t)(v32 + 7) >> 3)) & -(1 << v35));
          v19 = v7 + v84;
          v25 = *(unsigned __int8 *)(v6 + 16);
          v18 = v85;
          v23 = v82;
          goto LABEL_59;
        }
        if (v29 != 59)
        {
          v83 = v20;
          v84 = v19;
          v85 = v18;
          v7 = 1;
          goto LABEL_56;
        }
      }
      v25 = 60;
LABEL_59:
      if ((v28 & 0xFFFFFF00) == 0x200)
        ++v18;
      goto LABEL_61;
    }
    v21 = 0;
    LODWORD(v20) = 0;
    v19 = 0;
    v80 = 0;
    v18 = 0;
    v17 = 0;
LABEL_87:
    v52 = *(_QWORD *)(v77 + 112);
    if (v52)
    {
      v53 = v76;
      LODWORD(v52) = (*(_BYTE *)(v52 + 17) & 4) != 0 || *(char *)(v52 + 13) < 0;
    }
    else
    {
      v53 = v76;
    }
    if (v19 > 0)
    {
      v54 = *(_QWORD *)(v53 + 8);
      if (v54)
      {
        v55 = 0;
        do
        {
          ++v55;
          v54 = *(_QWORD *)(v54 + 8);
        }
        while (v54);
      }
      else
      {
        v55 = 0;
      }
      v56 = (_DWORD)v52 ? 50 : 2500;
      if (v55 * v21 / v20 < v56)
      {
        v118[0] = 0;
        v119 = 0;
        result = (uint64_t)sub_1C4E556F4((llvm::APInt *)"too many stack pointer argument loads", (llvm::APInt *)v118, v75);
        if (v119)
        {
          result = sub_1C61996A0((uint64_t)v118);
          v119 = 0;
        }
        goto LABEL_24;
      }
    }
    if (v80 >= 1)
    {
      v57 = *(_QWORD *)(v53 + 8);
      if (v57)
      {
        v58 = 0;
        do
        {
          ++v58;
          v57 = *(_QWORD *)(v57 + 8);
        }
        while (v57);
      }
      else
      {
        v58 = 0;
      }
      v59 = (_DWORD)v52 ? 50 : 2500;
      if (v58 * v21 / v20 < v59)
      {
        v116[0] = 0;
        v117 = 0;
        result = (uint64_t)sub_1C4E556F4((llvm::APInt *)"too many stack pointer argument stores", (llvm::APInt *)v116, v75);
        if (v117)
        {
          result = sub_1C61996A0((uint64_t)v116);
          v117 = 0;
        }
        goto LABEL_24;
      }
    }
    v100 = 0;
    v101 = 0;
    LOBYTE(v104) = 0;
    v105 = 0;
    v106 = 0;
    v107 = 0;
    v110 = 0;
    v111 = 0;
    v112 = 0;
    v113 = 0;
    v114 = 0;
    v115 = 256;
    if ((v52 & 1) != 0)
    {
      if (v21 <= 1499 && v18 >= 9)
      {
        v89[0] = 0;
        v90 = 0;
        result = (uint64_t)sub_1C4E556F4((llvm::APInt *)"always inline small function with a lot of constant loads", (llvm::APInt *)v89, v75);
        if (v90)
        {
          result = sub_1C61996A0((uint64_t)v89);
          v90 = 0;
        }
        goto LABEL_24;
      }
      v60 = v75;
      if (v21 > 149)
        goto LABEL_127;
      v61 = *(_QWORD *)(v53 + 8);
      if (!v61)
        goto LABEL_127;
      v62 = -2;
      v63 = *(_QWORD *)(v53 + 8);
      do
      {
        v64 = v62;
        if (!v62)
          break;
        v63 = *(_QWORD *)(v63 + 8);
        ++v62;
      }
      while (v63);
      if (!v64 || *(_QWORD *)(v61 + 8))
      {
LABEL_127:
        v99 = 200;
        v104 = 200;
        v105 = 1;
        goto LABEL_128;
      }
      v87[0] = 0;
      v88 = 0;
      result = (uint64_t)sub_1C4E556F4((llvm::APInt *)"always inline small function with single callsite", (llvm::APInt *)v87, v75);
      if (v88)
      {
        result = sub_1C61996A0((uint64_t)v87);
        v88 = 0;
      }
    }
    else if (v18 < 3)
    {
      v70 = *(_QWORD *)(v53 + 8);
      if (!v70)
        goto LABEL_138;
      v71 = -2;
      do
      {
        v72 = v71;
        if (!v71)
          break;
        v70 = *(_QWORD *)(v70 + 8);
        ++v71;
      }
      while (v70);
      if (!v72)
      {
        if (v17 || v21 > 549)
        {
          if (v17 > 3 || v21 > 499)
          {
            v99 = 425;
            v60 = v75;
LABEL_128:
            v103 = 1;
            v102 = 350;
            v109 = 1;
            v108 = 2000;
            v65 = *(_QWORD *)(a1 + 160);
            v134[0] = 0;
            v134[1] = 0;
            v135 = 0;
            v136[0] = 0;
            v136[1] = 0;
            v137 = 0;
            v138 = 0;
            v139 = 0;
            v140 = 0;
            v66 = *(_QWORD *)(v65 + 56);
            if (v66)
            {
              v7 = (uint64_t)v136;
              (*(void (**)(uint64_t *__return_ptr))(*(_QWORD *)v66 + 48))(&v133);
              v6 = v65 + 64;
              v67 = v133;
              if (!*(_BYTE *)(v65 + 72))
              {
                *(_QWORD *)(v65 + 64) = v133;
                *(_BYTE *)(v65 + 72) = 1;
LABEL_132:
                MEMORY[0x1CAA32FB4](0, 8);
                sub_1C4D8B440((uint64_t *)v7);
                sub_1C4D8B52C(v134);
                v134[0] = a1;
                result = (uint64_t)llvm::getInlineCost(v74, &v99, (llvm::BasicBlock *)v6, (uint64_t)sub_1C5598CF0, (uint64_t)v134, (uint64_t (*)(uint64_t, llvm *))sub_1C5598CFC, a1 + 48, v60, 0, v73, *(_QWORD *)(a1 + 40), 0);
                goto LABEL_24;
              }
              v133 = 0;
              v68 = *(_QWORD *)v6;
              *(_QWORD *)v6 = v67;
              if (!v68)
                goto LABEL_132;
              (*(void (**)(uint64_t))(*(_QWORD *)v68 + 8))(v68);
              v69 = v133;
              v133 = 0;
              if (!v69)
                goto LABEL_132;
            }
            else
            {
              sub_1C485C2F0();
            }
            (*(void (**)(uint64_t))(*(_QWORD *)v69 + 8))(v69);
            goto LABEL_132;
          }
          v91[0] = 0;
          v92 = 0;
          result = (uint64_t)sub_1C4E556F4((llvm::APInt *)"small functions with few branches", (llvm::APInt *)v91, v75);
          if (v92)
          {
            result = sub_1C61996A0((uint64_t)v91);
            v92 = 0;
          }
        }
        else
        {
          v93[0] = 0;
          v94 = 0;
          result = (uint64_t)sub_1C4E556F4((llvm::APInt *)"no branches that aren't too large", (llvm::APInt *)v93, v75);
          if (v94)
          {
            result = sub_1C61996A0((uint64_t)v93);
            v94 = 0;
          }
        }
      }
      else
      {
LABEL_138:
        v95[0] = 0;
        v96 = 0;
        result = (uint64_t)sub_1C4E556F4((llvm::APInt *)"very few callers", (llvm::APInt *)v95, v75);
        if (v96)
        {
          result = sub_1C61996A0((uint64_t)v95);
          v96 = 0;
        }
      }
    }
    else
    {
      v97[0] = 0;
      v98 = 0;
      result = (uint64_t)sub_1C4E556F4((llvm::APInt *)"too many constant address space loads", (llvm::APInt *)v97, v75);
      if (v98)
      {
        result = sub_1C61996A0((uint64_t)v97);
        v98 = 0;
      }
    }
  }
LABEL_24:
  if (v128 && v127[32])
  {
    v10 = v127;
    return sub_1C61996A0((uint64_t)v10);
  }
  return result;
}

uint64_t sub_1C5598CF0(uint64_t a1, llvm::Function *a2)
{
  return llvm::AssumptionCacheTracker::getAssumptionCache(*(llvm::AssumptionCacheTracker **)(*(_QWORD *)a1 + 32), a2);
}

uint64_t sub_1C5598CFC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v3;

  v1 = *(_QWORD *)(a1 + 24);
  if (v1)
    return (*(uint64_t (**)(uint64_t))(*(_QWORD *)v1 + 48))(v1);
  sub_1C485C2F0();
  return sub_1C5598D20(v3);
}

uint64_t sub_1C5598D20(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Combine 16b selects.";
  *(_QWORD *)(v2 + 8) = 20;
  *(_QWORD *)(v2 + 16) = "agx-selcombine";
  *(_QWORD *)(v2 + 24) = 14;
  *(_QWORD *)(v2 + 32) = &unk_1ED806628;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C5598E78;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C5598DB0(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED806628;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E816FCE0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED806630);
  if (v3 != -1)
  {
    v7[0] = sub_1C5598D20;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED806630, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C5598E78()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C5598DB0(v0);
}

void sub_1C5598EA4(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C5598ECC(llvm::FunctionPass *a1, const llvm::Function *a2)
{
  _QWORD *v3;
  _QWORD *v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  llvm::Value *v8;
  int v9;
  llvm::Value *v10;
  void *v11;
  uint64_t v12;
  unsigned int v13;
  char v14;
  void **v15;
  int v16;
  void *v17;
  llvm::Value **v18;
  llvm::Value *v19;
  llvm::Value *v20;
  llvm::Value **v21;
  _QWORD *v22;
  _QWORD *v23;
  _QWORD *v24;
  uint64_t *v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t *v28;
  uint64_t *v29;
  uint64_t v30;
  uint64_t v31;
  _QWORD *v32;
  llvm::Value **v33;
  llvm::Value *v34;
  uint64_t v35;
  uint64_t v36;
  _QWORD *v37;
  uint64_t v38;
  llvm::Value *v39;
  int v40;
  int v41;
  uint64_t *v42;
  uint64_t v43;
  llvm::Value *v44;
  _QWORD *v45;
  llvm::Value *v46;
  const llvm::APInt *v47;
  uint64_t *v48;
  uint64_t *v49;
  llvm::ValueAsMetadata *v50;
  llvm::ValueAsMetadata *v51;
  uint64_t v52;
  unsigned __int8 *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  int v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  unsigned int v61;
  uint64_t v62;
  unsigned int v63;
  uint64_t v64;
  BOOL v65;
  BOOL v67;
  unint64_t *v68;
  unint64_t *v69;
  unint64_t *v70;
  unint64_t *v71;
  unint64_t v72;
  unint64_t v73;
  unint64_t v74;
  unint64_t v75;
  int v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  llvm::ConstantInt *v80;
  unint64_t v81;
  unint64_t v82;
  const llvm::APInt *v83;
  uint64_t *v84;
  uint64_t v85;
  llvm::ConstantInt *v86;
  unint64_t v87;
  unint64_t v88;
  llvm::ValueHandleBase *v89;
  llvm::Value *Select;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  BOOL v95;
  int v96;
  BOOL v99;
  uint64_t v102;
  int v103;
  unsigned int v104;
  unsigned int v105;
  uint64_t v106;
  int v107;
  unsigned __int8 *v108;
  llvm::ConstantInt **v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  uint64_t v113;
  int v114;
  uint64_t v115;
  _QWORD *v116;
  llvm::Value **v117;
  unsigned __int8 *v118;
  uint64_t v119;
  unsigned __int8 *v120;
  _QWORD *v121;
  unsigned __int8 *v122;
  uint64_t v123;
  unsigned __int8 *v124;
  llvm::Value *v125;
  llvm::Value *v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  _QWORD *v130;
  uint64_t v131;
  uint64_t v132;
  _QWORD *v133;
  _QWORD *v134;
  uint64_t *v135;
  uint64_t v136;
  uint64_t v137;
  uint64_t *v138;
  _QWORD *v140;
  _QWORD *v141;
  char v142;
  _QWORD *v143;
  _QWORD *v144;
  _QWORD *v145;
  llvm::Value **v146;
  llvm::Value **v147;
  llvm::ValueAsMetadata *v148;
  uint64_t *v149;
  llvm::ValueAsMetadata *v150;
  _QWORD *v151;
  uint64_t v152;
  unsigned int v153;
  llvm::Value *v154;
  llvm::Value **v155;
  uint64_t v156;
  __int16 v157;
  void **v158;
  void *v159;
  uint64_t v160;
  uint64_t *v161;
  void *v162;
  uint64_t v163;
  char *v164;
  _QWORD *v165;
  void **v166;
  void **v167;
  uint64_t v168;
  int v169;
  __int16 v170;
  char v171;
  uint64_t v172;
  uint64_t v173;
  void *v174;
  void *v175;
  llvm::Value **v176;
  uint64_t v177;
  _QWORD v178[8];

  v178[6] = *MEMORY[0x1E0C80C00];
  if ((llvm::FunctionPass::skipFunction(a1, a2) & 1) != 0
    || (v3 = (_QWORD *)*((_QWORD *)a2 + 10), v140 = (_QWORD *)((char *)a2 + 72), v3 == (_QWORD *)((char *)a2 + 72)))
  {
    v142 = 0;
    return v142 & 1;
  }
  v142 = 0;
  do
  {
    v4 = v3 - 3;
    if (!v3)
      v4 = 0;
    v176 = (llvm::Value **)v178;
    v177 = 0x600000000;
    v5 = v4 + 5;
    v151 = 0;
    v152 = 0;
    v153 = 0;
    v6 = (_QWORD *)v4[6];
    v141 = v3;
    if (v6 == v4 + 5)
      goto LABEL_190;
    v7 = 0;
    do
    {
      v8 = (llvm::Value *)(v6 - 3);
      if (!v6)
        v8 = 0;
      v9 = *((unsigned __int8 *)v8 + 16);
      if (v9 == 85)
        v10 = v8;
      else
        v10 = 0;
      if (v6 && v9 == 85 && *(_DWORD *)(*(_QWORD *)v10 + 8) == 4109)
      {
        v11 = (void *)*((_QWORD *)v10 - 12);
        v12 = v177;
        if (v177 >= (unint64_t)HIDWORD(v177))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v176, (uint64_t)v178, v177 + 1, 8);
          v12 = v177;
        }
        v176[v12] = v10;
        LODWORD(v177) = v177 + 1;
        v154 = (llvm::Value *)&v154;
        v155 = &v154;
        v156 = 0;
        v159 = v11;
        v160 = (uint64_t)&v160;
        v161 = &v160;
        v162 = 0;
        v158 = 0;
        v13 = v153;
        v14 = sub_1C5599AA0(v7, v153, (uint64_t)v11, &v158);
        v15 = v158;
        if ((v14 & 1) != 0)
        {
          if (v162)
          {
            v26 = v160;
            v25 = v161;
            v27 = *v161;
            *(_QWORD *)(v27 + 8) = *(_QWORD *)(v160 + 8);
            **(_QWORD **)(v26 + 8) = v27;
            v162 = 0;
            if (v25 != &v160)
            {
              do
              {
                v28 = (uint64_t *)v25[1];
                operator delete(v25);
                v25 = v28;
              }
              while (v28 != &v160);
            }
          }
          goto LABEL_27;
        }
        if (4 * (int)v152 + 4 < 3 * v13)
        {
          if (v13 + ~(_DWORD)v152 - HIDWORD(v152) > v13 >> 3)
            goto LABEL_23;
          v16 = v13;
        }
        else
        {
          v16 = 2 * v13;
        }
        sub_1C5599B34((uint64_t)&v151, v16);
        v158 = 0;
        v7 = (uint64_t)v151;
        sub_1C5599AA0((uint64_t)v151, v153, (uint64_t)v159, &v158);
        v15 = v158;
LABEL_23:
        LODWORD(v152) = v152 + 1;
        if (*v15 != (void *)-4096)
          --HIDWORD(v152);
        *v15 = v159;
        v15[1] = v15 + 1;
        v15[2] = v15 + 1;
        v15[3] = 0;
        v17 = v162;
        if (v162)
        {
          v30 = v160;
          v29 = v161;
          v31 = *v161;
          *(_QWORD *)(v31 + 8) = *(_QWORD *)(v160 + 8);
          **(_QWORD **)(v30 + 8) = v31;
          v32 = v15[1];
          v32[1] = v29;
          *v29 = (uint64_t)v32;
          v15[1] = (void *)v30;
          *(_QWORD *)(v30 + 8) = v15 + 1;
          v15[3] = v17;
          v162 = 0;
        }
LABEL_27:
        if (v156)
        {
          v19 = v154;
          v18 = v155;
          v20 = *v155;
          *((_QWORD *)v20 + 1) = *((_QWORD *)v154 + 1);
          **((_QWORD **)v19 + 1) = v20;
          v156 = 0;
          if (v18 != &v154)
          {
            do
            {
              v21 = (llvm::Value **)v18[1];
              operator delete(v18);
              v18 = v21;
            }
            while (v21 != &v154);
          }
        }
        v22 = operator new(0x18uLL);
        *v22 = 0;
        v22[2] = v10;
        v24 = v15[1];
        v23 = v15 + 1;
        *v22 = v24;
        v22[1] = v23;
        v24[1] = v22;
        *v23 = v22;
        ++v23[2];
      }
      v6 = (_QWORD *)v6[1];
    }
    while (v6 != v5);
    if (!(_DWORD)v177)
      goto LABEL_190;
    v33 = v176;
    v146 = &v176[v177];
    while (2)
    {
      v34 = *v33;
      if (!*((_QWORD *)*v33 + 5))
      {
        llvm::Value::deleteValue(v34);
        goto LABEL_186;
      }
      v150 = *v33;
      if (v153)
      {
        v35 = *((_QWORD *)v34 - 12);
        v36 = ((v35 >> 4) ^ (v35 >> 9)) & (v153 - 1);
        v37 = &v151[4 * v36];
        v38 = *v37;
        v39 = *v33;
        if (v35 != *v37)
        {
          v40 = 1;
          while (v38 != -4096)
          {
            v41 = v36 + v40++;
            v36 = v41 & (v153 - 1);
            v38 = v151[4 * v36];
            if (v35 == v38)
            {
              v37 = &v151[4 * v36];
              goto LABEL_189;
            }
          }
          v37 = &v151[4 * v153];
LABEL_189:
          v39 = *v33;
        }
      }
      else
      {
        v37 = v151;
        v39 = *v33;
      }
      v42 = (uint64_t *)v37[2];
      v43 = *v42;
      *(_QWORD *)(v43 + 8) = v42[1];
      *(_QWORD *)v42[1] = v43;
      --v37[3];
      operator delete(v42);
      v44 = 0;
      v45 = **(_QWORD ***)v39;
      v159 = &v161;
      v160 = 0x200000000;
      v165 = v45;
      v166 = &v174;
      v167 = &v175;
      v168 = 0;
      v169 = 0;
      v170 = 512;
      v171 = 7;
      v163 = 0;
      v164 = 0;
      v172 = 0;
      v173 = 0;
      v174 = &unk_1E8167888;
      v175 = &unk_1E8167A08;
      v163 = *((_QWORD *)v39 + 5);
      v164 = (char *)v39 + 24;
      v144 = (_QWORD *)((char *)v39 + 24);
      v46 = (llvm::Value *)*((_QWORD *)v39 + 6);
      v154 = v46;
      if (v46)
      {
        llvm::MetadataTracking::track((uint64_t)&v154, (unsigned __int8 *)v46, 2);
        v44 = v154;
      }
      v147 = v33;
      sub_1C4774EF4((uint64_t)&v159, 0, (uint64_t)v44);
      if (v154)
        llvm::MetadataTracking::untrack((uint64_t)&v154, (unsigned __int8 *)v154);
      v48 = v37 + 1;
      v145 = v37;
      v49 = (uint64_t *)v37[2];
      v149 = v48;
      if (v49 == v48)
        goto LABEL_184;
      v143 = v45;
      v50 = v150;
      while (2)
      {
        v51 = (llvm::ValueAsMetadata *)v49[2];
        LOBYTE(v158) = 0;
        v52 = *((_QWORD *)v50 - 12);
        v53 = (unsigned __int8 *)*((_QWORD *)v50 - 8);
        v54 = *((_QWORD *)v50 - 4);
        v55 = *((_QWORD *)v51 - 8);
        v56 = *((_QWORD *)v51 - 4);
        v57 = v53[16];
        if (v57 == 16)
          v58 = *((_QWORD *)v50 - 8);
        else
          v58 = 0;
        v59 = *(unsigned __int8 *)(v54 + 16);
        if (v59 == 16)
          v60 = *((_QWORD *)v50 - 4);
        else
          v60 = 0;
        v61 = *(unsigned __int8 *)(v55 + 16);
        if (v61 == 16)
          v62 = *((_QWORD *)v51 - 8);
        else
          v62 = 0;
        v63 = *(unsigned __int8 *)(v56 + 16);
        if (v63 == 16)
          v64 = *((_QWORD *)v51 - 4);
        else
          v64 = 0;
        if (v58)
          v65 = v60 == 0;
        else
          v65 = 1;
        v67 = v65 || v62 == 0 || v64 == 0;
        v148 = v51;
        if (v67)
        {
LABEL_104:
          if (v57 == 16)
            v91 = (uint64_t)v53;
          else
            v91 = 0;
          if (v59 == 16)
            v92 = v54;
          else
            v92 = 0;
          if (v61 == 16)
            v93 = v55;
          else
            v93 = 0;
          if (v63 == 16)
            v94 = v56;
          else
            v94 = 0;
          if (v91)
            v95 = v93 == 0;
          else
            v95 = 1;
          v96 = !v95;
          if (v96 == 1 && v92 == 0 && v94 == 0)
          {
            if (v63 >= 0x1C)
            {
              v106 = *(_QWORD *)(v56 + 40);
              if (v106 == *((_QWORD *)v50 + 5))
              {
                v107 = *(__int16 *)(v106 + 18);
                if ((v107 & 0x80000000) == 0)
                {
                  v110 = *(_QWORD *)(v106 + 48);
                  if (v110 != v106 + 40)
                  {
                    v111 = 0;
                    do
                    {
                      v112 = v110 - 24;
                      if (!v110)
                        v112 = 0;
                      *(_DWORD *)(v112 + 56) = v111++;
                      v110 = *(_QWORD *)(v110 + 8);
                    }
                    while (v110 != v106 + 40);
                  }
                  *(_WORD *)(v106 + 18) = v107 | 0x8000;
                }
                v104 = *((_DWORD *)v50 + 14);
                v105 = *(_DWORD *)(v56 + 56);
LABEL_147:
                if (v104 < v105)
                  goto LABEL_156;
              }
            }
          }
          else
          {
            if (v91)
              v99 = 0;
            else
              v99 = v93 == 0;
            if (!v99 || v92 == 0 || v94 == 0)
              goto LABEL_156;
            if (v61 >= 0x1C)
            {
              v102 = *(_QWORD *)(v55 + 40);
              if (v102 == *((_QWORD *)v50 + 5))
              {
                v103 = *(__int16 *)(v102 + 18);
                if ((v103 & 0x80000000) == 0)
                {
                  v113 = *(_QWORD *)(v102 + 48);
                  if (v113 != v102 + 40)
                  {
                    v114 = 0;
                    do
                    {
                      v115 = v113 - 24;
                      if (!v113)
                        v115 = 0;
                      *(_DWORD *)(v115 + 56) = v114++;
                      v113 = *(_QWORD *)(v113 + 8);
                    }
                    while (v113 != v102 + 40);
                  }
                  *(_WORD *)(v102 + 18) = v103 | 0x8000;
                }
                v104 = *((_DWORD *)v50 + 14);
                v105 = *(_DWORD *)(v55 + 56);
                goto LABEL_147;
              }
            }
          }
          v154 = 0;
          if (v96)
          {
            if (sub_1C5599CDC(v54, v56, (char *)&v158))
            {
              v108 = (unsigned __int8 *)v54;
              v76 = v158;
              sub_1C5599F48(v91, v93, v108, (unsigned __int8 *)v56, (char)v158, (uint64_t *)&v159, &v154, v52, 0);
              goto LABEL_153;
            }
          }
          else if (sub_1C5599CDC((uint64_t)v53, v55, (char *)&v158))
          {
            v76 = v158;
            sub_1C5599F48(v92, v94, v53, (unsigned __int8 *)v55, (char)v158, (uint64_t *)&v159, &v154, v52, 1);
LABEL_153:
            v109 = (llvm::ConstantInt **)v154;
            v50 = v150;
            if (v154)
            {
              v116 = v143;
              v51 = v148;
              goto LABEL_177;
            }
            goto LABEL_156;
          }
          v50 = v150;
LABEL_156:
          v49 = (uint64_t *)v49[1];
          if (v49 == v149)
            goto LABEL_184;
          continue;
        }
        break;
      }
      v68 = (unint64_t *)(v58 + 24);
      if (*(_DWORD *)(v58 + 32) >= 0x41u)
        v68 = (unint64_t *)*v68;
      v69 = (unint64_t *)(v60 + 24);
      if (*(_DWORD *)(v60 + 32) >= 0x41u)
        v69 = (unint64_t *)*v69;
      v70 = (unint64_t *)(v62 + 24);
      if (*(_DWORD *)(v62 + 32) >= 0x41u)
        v70 = (unint64_t *)*v70;
      v71 = (unint64_t *)(v64 + 24);
      if (*(_DWORD *)(v64 + 32) >= 0x41u)
        v71 = (unint64_t *)*v71;
      v72 = *v68;
      v73 = *v69;
      v74 = *v70;
      v75 = *v71;
      if (!v74 && v72 < 0x100 || (v76 = 0, v77 = v75 | (v73 << 16), v78 = v74 | (v72 << 16), !v75) && v73 <= 0xFF)
      {
        v76 = 1;
        LOBYTE(v158) = 1;
        v78 = v72 | (v74 << 16);
        v77 = v73 | (v75 << 16);
      }
      v79 = ***(_QWORD ***)v50;
      v80 = *(llvm::ConstantInt **)(v79 + 1960);
      v81 = *(unsigned int *)(v79 + 1968);
      LODWORD(v155) = v81 >> 8;
      if (v81 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v154, v78, 0);
      }
      else
      {
        if (v81 <= 0xFF)
          v82 = 0;
        else
          v82 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v81);
        v154 = (llvm::Value *)(v82 & v78);
      }
      v84 = (uint64_t *)llvm::ConstantInt::get(v80, (llvm::LLVMContext *)&v154, v47);
      if (v155 >= 0x41 && v154)
        MEMORY[0x1CAA32F9C](v154, 0x1000C8000313F17);
      v85 = ***(_QWORD ***)v150;
      v86 = *(llvm::ConstantInt **)(v85 + 1960);
      v87 = *(unsigned int *)(v85 + 1968);
      LODWORD(v155) = v87 >> 8;
      if (v87 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v154, v77, 0);
      }
      else
      {
        if (v87 <= 0xFF)
          v88 = 0;
        else
          v88 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v87);
        v154 = (llvm::Value *)(v88 & v77);
      }
      v89 = llvm::ConstantInt::get(v86, (llvm::LLVMContext *)&v154, v83);
      if (v155 >= 0x41 && v154)
        MEMORY[0x1CAA32F9C](v154, 0x1000C8000313F17);
      v154 = (llvm::Value *)"sel";
      v157 = 259;
      Select = llvm::IRBuilderBase::CreateSelect((uint64_t *)&v159, v52, v84, (uint64_t)v89, (uint64_t)&v154, 0);
      if (!Select)
      {
        v50 = v150;
        v53 = (unsigned __int8 *)*((_QWORD *)v150 - 8);
        v54 = *((_QWORD *)v150 - 4);
        v52 = *((_QWORD *)v150 - 12);
        v55 = *((_QWORD *)v51 - 8);
        v56 = *((_QWORD *)v51 - 4);
        v57 = v53[16];
        v59 = *(unsigned __int8 *)(v54 + 16);
        v61 = *(unsigned __int8 *)(v55 + 16);
        v63 = *(unsigned __int8 *)(v56 + 16);
        goto LABEL_104;
      }
      v109 = (llvm::ConstantInt **)Select;
      v116 = v143;
LABEL_177:
      v154 = (llvm::Value *)"shiftr";
      v157 = 259;
      v117 = llvm::ConstantInt::get(*v109, 16, 0);
      v118 = (unsigned __int8 *)sub_1C506ED1C((uint64_t)&v159, (uint64_t)v109, (uint64_t)v117, (uint64_t)&v154, 0);
      v119 = *v116 + 1936;
      v154 = (llvm::Value *)"sel_high";
      v157 = 259;
      v120 = sub_1C4773E38((uint64_t *)&v159, 38, v118, v119, (uint64_t)&v154);
      v121 = v116;
      v122 = v120;
      v123 = *v121 + 1936;
      v154 = (llvm::Value *)"sel_low";
      v157 = 259;
      v124 = sub_1C4773E38((uint64_t *)&v159, 38, (unsigned __int8 *)v109, v123, (uint64_t)&v154);
      if (v76)
        v125 = (llvm::Value *)v124;
      else
        v125 = (llvm::Value *)v122;
      if (v76)
        v126 = (llvm::Value *)v122;
      else
        v126 = (llvm::Value *)v124;
      v142 = 1;
      llvm::Value::doRAUW(v150, v125, (llvm::Value *)1);
      llvm::Value::doRAUW(v51, v126, (llvm::Value *)1);
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v150 + 5) + 40, (uint64_t ***)v150);
      v127 = *((_QWORD *)v150 + 3);
      v128 = (_QWORD *)*((_QWORD *)v150 + 4);
      *v128 = v127;
      *(_QWORD *)(v127 + 8) = v128;
      *v144 = 0;
      v144[1] = 0;
      llvm::Value::deleteValue(v150);
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v51 + 5) + 40, (uint64_t ***)v51);
      v129 = *((_QWORD *)v51 + 3);
      v130 = (_QWORD *)*((_QWORD *)v51 + 4);
      *v130 = v129;
      *(_QWORD *)(v129 + 8) = v130;
      *((_QWORD *)v51 + 3) = 0;
      *((_QWORD *)v51 + 4) = 0;
      v131 = *v49;
      *(_QWORD *)(v131 + 8) = v49[1];
      *(_QWORD *)v49[1] = v131;
      --v145[3];
      operator delete(v49);
LABEL_184:
      v33 = v147;
      if (v159 != &v161)
        free(v159);
LABEL_186:
      if (++v33 != v146)
        continue;
      break;
    }
LABEL_190:
    v132 = (uint64_t)v151;
    if (v153)
    {
      v133 = &v151[4 * v153];
      v134 = v151;
      do
      {
        if (*v134 != -4096 && *v134 != -8192)
        {
          if (v134[3])
          {
            v136 = v134[1];
            v135 = (uint64_t *)v134[2];
            v137 = *v135;
            *(_QWORD *)(v137 + 8) = *(_QWORD *)(v136 + 8);
            **(_QWORD **)(v136 + 8) = v137;
            v134[3] = 0;
            if (v135 != v134 + 1)
            {
              do
              {
                v138 = (uint64_t *)v135[1];
                operator delete(v135);
                v135 = v138;
              }
              while (v138 != v134 + 1);
            }
          }
        }
        v134 += 4;
      }
      while (v134 != v133);
    }
    MEMORY[0x1CAA32FB4](v132, 8);
    if (v176 != v178)
      free(v176);
    v3 = (_QWORD *)v141[1];
  }
  while (v3 != v140);
  return v142 & 1;
}

uint64_t sub_1C5599AA0(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  int v8;
  uint64_t v9;
  BOOL v11;
  int v12;

  if (a2)
  {
    v4 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v5 = (_QWORD *)(a1 + 32 * v4);
    v6 = *v5;
    if (*v5 == a3)
    {
      v9 = 1;
    }
    else
    {
      v7 = 0;
      v8 = 1;
      while (v6 != -4096)
      {
        if (v7)
          v11 = 0;
        else
          v11 = v6 == -8192;
        if (v11)
          v7 = v5;
        v12 = v4 + v8++;
        v4 = v12 & (a2 - 1);
        v5 = (_QWORD *)(a1 + 32 * v4);
        v6 = *v5;
        v9 = 1;
        if (*v5 == a3)
          goto LABEL_7;
      }
      v9 = 0;
      if (v7)
        v5 = v7;
    }
  }
  else
  {
    v5 = 0;
    v9 = 0;
  }
LABEL_7:
  *a4 = v5;
  return v9;
}

_QWORD *sub_1C5599B34(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(32 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C5599BEC(a1, v4, &v4[4 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 32 * v10;
    do
    {
      *result = -4096;
      result += 4;
      v11 -= 32;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C5599BEC(uint64_t result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t *v17;

  v5 = result;
  *(_QWORD *)(result + 8) = 0;
  v6 = *(unsigned int *)(result + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)result;
    v8 = 32 * v6;
    do
    {
      *v7 = -4096;
      v7 += 4;
      v8 -= 32;
    }
    while (v8);
  }
  while (a2 != a3)
  {
    v9 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v17 = 0;
      result = sub_1C5599AA0(*(_QWORD *)v5, *(_DWORD *)(v5 + 16), v9, &v17);
      v10 = v17;
      v11 = v17 + 1;
      *v17 = *a2;
      v10[1] = (uint64_t)v11;
      v10[2] = (uint64_t)v11;
      v10[3] = 0;
      v12 = a2[3];
      if (v12)
      {
        v14 = a2[1];
        v13 = (uint64_t *)a2[2];
        v15 = *v13;
        *(_QWORD *)(v15 + 8) = *(_QWORD *)(v14 + 8);
        **(_QWORD **)(v14 + 8) = v15;
        v16 = v10[1];
        *(_QWORD *)(v16 + 8) = v13;
        *v13 = v16;
        v10[1] = v14;
        *(_QWORD *)(v14 + 8) = v11;
        v10[3] = v12;
        a2[3] = 0;
      }
      ++*(_DWORD *)(v5 + 8);
    }
    a2 += 4;
  }
  return result;
}

uint64_t sub_1C5599CDC(uint64_t a1, uint64_t a2, char *a3)
{
  int v6;
  uint64_t v7;
  int v8;
  uint64_t v9;
  BOOL v10;
  uint64_t v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v17;
  unsigned int v18;
  _QWORD *v19;
  uint64_t v20;
  int v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  _QWORD *v26;
  unsigned int v27;
  _QWORD *v28;
  uint64_t v29;
  uint64_t v30;
  BOOL v31;
  uint64_t result;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  char *v37;
  char *v38;
  char *v39;
  char *v40;
  char v41;
  int64_t v42;
  uint64_t v43;

  v6 = *(unsigned __int8 *)(a1 + 16);
  if (v6 == 66)
    v7 = a1;
  else
    v7 = 0;
  v8 = *(unsigned __int8 *)(a2 + 16);
  if (v8 == 66)
    v9 = a2;
  else
    v9 = 0;
  if (v7)
    v10 = v9 == 0;
  else
    v10 = 1;
  if (v10)
    goto LABEL_49;
  v11 = *(_QWORD *)(v7 - 32);
  v12 = *(unsigned __int8 *)(v11 + 16);
  if (v12 != 54 && (v12 != 5 || *(_WORD *)(v11 + 18) != 26))
    goto LABEL_30;
  v13 = *(_DWORD *)(v11 + 20);
  v14 = (v13 & 0x40000000) != 0 ? *(_QWORD *)(v11 - 8) : v11 - 32 * (v13 & 0x7FFFFFF);
  v15 = *(_QWORD *)(v14 + 32);
  if (!v15 || *(_BYTE *)(v15 + 16) != 16)
    goto LABEL_30;
  v17 = (_QWORD *)(v15 + 24);
  v18 = *(_DWORD *)(v15 + 32);
  if (v18 >= 0x41)
  {
    if (v18 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v15 + 24)) > 0x40)
      goto LABEL_30;
    v17 = (_QWORD *)*v17;
  }
  if (*v17 == 16)
  {
    v19 = (v13 & 0x40000000) != 0 ? *(_QWORD **)(v11 - 8) : (_QWORD *)(v11 - 32 * (v13 & 0x7FFFFFF));
    if (*(_QWORD *)(v9 - 32) == *v19)
    {
      v41 = 0;
LABEL_78:
      *a3 = v41;
      return 1;
    }
  }
LABEL_30:
  v20 = *(_QWORD *)(v9 - 32);
  v21 = *(unsigned __int8 *)(v20 + 16);
  if (v21 == 54 || v21 == 5 && *(_WORD *)(v20 + 18) == 26)
  {
    v22 = *(_DWORD *)(v20 + 20);
    v23 = (v22 & 0x40000000) != 0 ? *(_QWORD *)(v20 - 8) : v20 - 32 * (v22 & 0x7FFFFFF);
    v24 = *(_QWORD *)(v23 + 32);
    if (v24 && *(_BYTE *)(v24 + 16) == 16)
    {
      v26 = (_QWORD *)(v24 + 24);
      v27 = *(_DWORD *)(v24 + 32);
      if (v27 >= 0x41)
      {
        if (v27 - llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v24 + 24)) > 0x40)
          goto LABEL_49;
        v26 = (_QWORD *)*v26;
      }
      if (*v26 == 16)
      {
        v28 = (v22 & 0x40000000) != 0 ? *(_QWORD **)(v20 - 8) : (_QWORD *)(v20 - 32 * (v22 & 0x7FFFFFF));
        if (v11 == *v28)
        {
          v41 = 1;
          goto LABEL_78;
        }
      }
    }
  }
LABEL_49:
  if (v6 == 89)
    v29 = a1;
  else
    v29 = 0;
  if (v8 == 89)
    v30 = a2;
  else
    v30 = 0;
  if (v29)
    v31 = v30 == 0;
  else
    v31 = 1;
  if (v31)
    return 0;
  v33 = *(_QWORD *)(v29 - 32);
  if (*(_BYTE *)(v33 + 16) == 16)
    v34 = v33;
  else
    v34 = 0;
  v35 = *(_QWORD *)(v30 - 32);
  if (*(_BYTE *)(v35 + 16) == 16)
    v36 = v35;
  else
    v36 = 0;
  v37 = (char *)(v34 + 24);
  if (*(_DWORD *)(v34 + 32) >= 0x41u)
    v37 = *(char **)v37;
  v38 = *(char **)v37;
  v39 = (char *)(v36 + 24);
  if (*(_DWORD *)(v36 + 32) >= 0x41u)
    v39 = *(char **)v39;
  v40 = *(char **)v39;
  if ((v38 & 1) == 0)
  {
    v41 = (_BYTE)v40 - (_BYTE)v38;
    if (v40 - v38 == 1)
      goto LABEL_78;
  }
  v41 = 0;
  result = 0;
  v42 = v38 - v40;
  v43 = v40 & 1;
  if (v42 == 1 && v43 == 0)
    goto LABEL_78;
  return result;
}

llvm::Value *sub_1C5599F48(uint64_t a1, uint64_t a2, unsigned __int8 *a3, unsigned __int8 *a4, char a5, uint64_t *a6, llvm::Value **a7, uint64_t a8, char a9)
{
  unint64_t *v14;
  unint64_t *v15;
  unint64_t v16;
  unint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned __int8 *v21;
  uint64_t v22;
  uint64_t *v23;
  unsigned __int8 *v24;
  unsigned __int8 *v25;
  llvm::Value **v26;
  _QWORD *v27;
  const llvm::APInt *v28;
  uint64_t v29;
  llvm::ConstantInt *v30;
  unsigned int v31;
  unint64_t v32;
  llvm::ValueHandleBase *v33;
  uint64_t *v34;
  uint64_t v35;
  llvm::Value *result;
  const char *v37;
  unsigned int v38;
  __int16 v39;

  v14 = (unint64_t *)(a1 + 24);
  if (*(_DWORD *)(a1 + 32) >= 0x41u)
    v14 = (unint64_t *)*v14;
  v15 = (unint64_t *)(a2 + 24);
  if (*(_DWORD *)(a2 + 32) >= 0x41u)
    v15 = (unint64_t *)*v15;
  v16 = *v14;
  v17 = *v15;
  v18 = **(_QWORD **)a3;
  v19 = *(_QWORD *)v18 + 1960;
  if ((a5 & 1) != 0)
  {
    v20 = v16 | (v17 << 16);
    v37 = "zext_high";
    v39 = 259;
    v21 = sub_1C4773E38(a6, 39, a4, v19, (uint64_t)&v37);
    v22 = *(_QWORD *)v18 + 1960;
    v37 = "zext_low";
    v39 = 259;
    v23 = a6;
    v24 = a3;
  }
  else
  {
    v20 = v17 | (v16 << 16);
    v37 = "zext_high";
    v39 = 259;
    v21 = sub_1C4773E38(a6, 39, a3, v19, (uint64_t)&v37);
    v22 = *(_QWORD *)v18 + 1960;
    v37 = "zext_low";
    v39 = 259;
    v23 = a6;
    v24 = a4;
  }
  v25 = sub_1C4773E38(v23, 39, v24, v22, (uint64_t)&v37);
  v37 = "zext_high_shifted";
  v39 = 259;
  v26 = llvm::ConstantInt::get(*(llvm::ConstantInt **)v21, 16, 0);
  v27 = (_QWORD *)sub_1C506E874((uint64_t)a6, (uint64_t)v21, (uint64_t)v26, (uint64_t)&v37, 0, 0);
  v37 = "packed";
  v39 = 259;
  v29 = sub_1C4773594((uint64_t)a6, v27, (uint64_t)v25, (uint64_t)&v37);
  v30 = *(llvm::ConstantInt **)(*(_QWORD *)v18 + 1960);
  v31 = *(_DWORD *)(*(_QWORD *)v18 + 1968);
  v38 = v31 >> 8;
  if (v31 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v37, v20, 0);
  }
  else
  {
    if (v31 <= 0xFF)
      v32 = 0;
    else
      v32 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v31);
    v37 = (const char *)(v32 & v20);
  }
  v33 = llvm::ConstantInt::get(v30, (llvm::LLVMContext *)&v37, v28);
  if (v38 >= 0x41 && v37)
    MEMORY[0x1CAA32F9C](v37, 0x1000C8000313F17);
  v37 = "sel";
  v39 = 259;
  if (a9)
  {
    v34 = (uint64_t *)v29;
    v35 = (uint64_t)v33;
  }
  else
  {
    v34 = (uint64_t *)v33;
    v35 = v29;
  }
  result = llvm::IRBuilderBase::CreateSelect(a6, a8, v34, v35, (uint64_t)&v37, 0);
  *a7 = result;
  return result;
}

uint64_t sub_1C559A1F0(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "AddFastMathFlags";
  *(_QWORD *)(v2 + 8) = 16;
  *(_QWORD *)(v2 + 16) = "add-fast-math-flags";
  *(_QWORD *)(v2 + 24) = 19;
  *(_QWORD *)(v2 + 32) = &unk_1ED806638;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C559A280;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C559A280()
{
  uint64_t v0;
  unint64_t v2;
  unint64_t v4;
  _QWORD *v5;
  _QWORD v6[2];

  v0 = operator new();
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)(v0 + 16) = &unk_1ED806638;
  *(_DWORD *)(v0 + 24) = 2;
  *(_QWORD *)v0 = &off_1E816FD80;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v4 = qword_1ED830BC0[0];
  v2 = atomic_load(&qword_1ED806640);
  if (v2 != -1)
  {
    v6[0] = sub_1C559A1F0;
    v6[1] = &v4;
    v5 = v6;
    std::__call_once(&qword_1ED806640, &v5, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return v0;
}

void sub_1C559A364(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C559A388(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  char v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t i;
  uint64_t v8;

  v2 = a2 + 72;
  v3 = *(_QWORD *)(a2 + 80);
  if (v3 == a2 + 72)
  {
    v4 = 0;
  }
  else
  {
    v4 = 0;
    do
    {
      v5 = v3 - 24;
      if (!v3)
        v5 = 0;
      v6 = v5 + 40;
      for (i = *(_QWORD *)(v5 + 48); i != v6; i = *(_QWORD *)(i + 8))
      {
        if (i)
          v8 = i - 24;
        else
          v8 = 0;
        if (sub_1C4774A9C(v8) && *(unsigned __int8 *)(v8 + 16) - 41 <= 0x11)
        {
          *(_BYTE *)(v8 + 17) |= 0xFEu;
          v4 = 1;
        }
      }
      v3 = *(_QWORD *)(v3 + 8);
    }
    while (v3 != v2);
  }
  return v4 & 1;
}

uint64_t sub_1C559A438(llvm *a1, llvm::PassRegistry *a2)
{
  uint64_t v3;

  llvm::initializeBlockFrequencyInfoWrapperPassPass(a1, a2);
  llvm::initializeFunctionGroupInfoWrapperPassPass((uint64_t)a1);
  v3 = operator new();
  *(_QWORD *)v3 = "move allocas to local memory";
  *(_QWORD *)(v3 + 8) = 28;
  *(_QWORD *)(v3 + 16) = "allocas-to-lm";
  *(_QWORD *)(v3 + 24) = 13;
  *(_QWORD *)(v3 + 32) = &unk_1ED806648;
  *(_WORD *)(v3 + 40) = 0;
  *(_BYTE *)(v3 + 42) = 0;
  *(_QWORD *)(v3 + 48) = 0;
  *(_QWORD *)(v3 + 56) = 0;
  *(_QWORD *)(v3 + 64) = 0;
  *(_QWORD *)(v3 + 72) = sub_1C559A604;
  llvm::PassRegistry::registerPass((uint64_t)a1, (_QWORD *)v3, 1);
  return v3;
}

uint64_t sub_1C559A4D4(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED806648;
  *(_QWORD *)a1 = &off_1E816FE20;
  *(_OWORD *)(a1 + 24) = xmmword_1C64169D0;
  *(_QWORD *)(a1 + 40) = a1 + 56;
  *(_QWORD *)(a1 + 48) = 0x400000000;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED806650);
  if (v3 != -1)
  {
    v7[0] = sub_1C559A438;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED806650, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

BOOL sub_1C559A5B4(uint64_t a1)
{
  uint64_t v1;

  return *(_BYTE *)(a1 + 16) == 84
      && (v1 = *(_QWORD *)(a1 - 32)) != 0
      && !*(_BYTE *)(v1 + 16)
      && *(_QWORD *)(v1 + 24) == *(_QWORD *)(a1 + 72)
      && (*(_BYTE *)(v1 + 33) & 0x20) != 0
      && (*(_DWORD *)(v1 + 36) - 167) < 2;
}

uint64_t sub_1C559A604()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C559A4D4(v0);
}

void sub_1C559A62C(llvm::Pass *this)
{
  char *v2;

  *(_QWORD *)this = &off_1E816FE20;
  v2 = (char *)*((_QWORD *)this + 5);
  if (v2 != (char *)this + 56)
    free(v2);
  llvm::Pass::~Pass(this);
}

void sub_1C559A66C(llvm::Pass *this)
{
  char *v2;

  *(_QWORD *)this = &off_1E816FE20;
  v2 = (char *)*((_QWORD *)this + 5);
  if (v2 != (char *)this + 56)
    free(v2);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C559A6C0()
{
  return "move allocas to local memory";
}

void sub_1C559A6D0(uint64_t a1, llvm::AnalysisUsage *a2)
{
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2, (uint64_t)&llvm::BlockFrequencyInfoWrapperPass::ID);
  sub_1C4771E64((uint64_t)a2, (uint64_t)a2 + 112, (uint64_t)&llvm::BlockFrequencyInfoWrapperPass::ID);
  llvm::AnalysisUsage::setPreservesCFG(a2);
}

uint64_t sub_1C559A748(uint64_t a1, uint64_t a2)
{
  int v4;
  int v5;
  int v6;
  int v7;
  void **v8;
  void *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  void **v13;
  void *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t *v20;
  uint64_t v21;
  int v22;
  uint64_t v23;
  unsigned int i;
  uint64_t v25;
  _BYTE *v26;
  uint64_t v27;
  unsigned int v28;
  BOOL v29;
  int v30;
  BOOL v31;
  uint64_t BlockFreq;
  int v33;
  uint64_t v34;
  uint64_t v35;
  char *v36;
  unsigned int v37;
  char *v38;
  uint64_t v39;
  char *v40;
  char *v41;
  uint64_t *v42;
  uint64_t *v43;
  uint64_t *v44;
  uint64_t v45;
  unint64_t v46;
  unint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  char *v51;
  char *v52;
  unint64_t v53;
  uint64_t v54;
  llvm::AllocaInst **v55;
  llvm::AllocaInst *v56;
  int v57;
  unsigned int v58;
  int v59;
  unint64_t v60;
  llvm::AllocaInst **v61;
  uint64_t v62;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t **v67;
  uint64_t v68;
  uint64_t j;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t v74;
  uint64_t v75;
  unint64_t *v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  llvm::AllocaInst *v80;
  int v81;
  uint64_t v82;
  _QWORD **v83;
  void *v84;
  unsigned int v85;
  llvm::UndefValue *v86;
  llvm::UndefValue *v87;
  char *v88;
  uint64_t *v89;
  llvm::Type *v90;
  llvm::UndefValue *v91;
  unsigned int v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  llvm::AllocaInst **v97;
  llvm::AllocaInst *v98;
  int v99;
  int v100;
  llvm::AllocaInst *v101;
  uint64_t v102;
  char *v103;
  uint64_t v104;
  uint64_t v105;
  const llvm::APInt *v106;
  uint64_t *v107;
  uint64_t *v108;
  uint64_t *v109;
  uint64_t v110;
  int v111;
  uint64_t v112;
  int v113;
  unsigned int v114;
  uint64_t **v115;
  uint64_t *v116;
  uint64_t v117;
  llvm::ConstantInt *v118;
  unsigned int v119;
  unint64_t v120;
  llvm::ValueHandleBase *v121;
  uint64_t v122;
  uint64_t v123;
  uint64_t v124;
  uint64_t v125;
  llvm::AllocaInst **v126;
  llvm::AllocaInst *v127;
  int v128;
  int v129;
  llvm::ConstantInt *v130;
  unsigned int v131;
  unint64_t v132;
  llvm::ValueHandleBase *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  uint64_t v137;
  llvm::AllocaInst **v138;
  llvm::AllocaInst *v139;
  int v140;
  int v141;
  uint64_t **v142;
  int v143;
  BOOL v144;
  unsigned int v145;
  llvm::AllocaInst *v146;
  uint64_t v147;
  char *v148;
  uint64_t v149;
  const llvm::APInt *v150;
  uint64_t v151;
  uint64_t **v152;
  uint64_t *v153;
  llvm::AllocaInst *v154;
  uint64_t v155;
  char *v156;
  uint64_t v157;
  const llvm::APInt *v158;
  _QWORD *v159;
  uint64_t v160;
  llvm::ConstantInt *v161;
  unsigned int v162;
  unint64_t v163;
  llvm::ValueHandleBase *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t v168;
  llvm::AllocaInst **v169;
  llvm::AllocaInst *v170;
  int v171;
  int v172;
  llvm::AllocaInst *v173;
  uint64_t v174;
  char *v175;
  uint64_t v176;
  llvm::ConstantInt *v177;
  llvm::ValueHandleBase *v178;
  llvm::GetElementPtrInst *v179;
  uint64_t v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  llvm::AllocaInst **v184;
  llvm::AllocaInst *v185;
  int v186;
  int v187;
  llvm::AllocaInst *v188;
  uint64_t v189;
  char *v190;
  uint64_t v191;
  unsigned __int8 *v192;
  uint64_t v193;
  uint64_t v194;
  uint64_t v195;
  uint64_t v196;
  uint64_t v197;
  unsigned __int8 **v198;
  unsigned __int8 *v199;
  int v200;
  int v201;
  unsigned __int8 *v202;
  uint64_t v203;
  char *v204;
  uint64_t v205;
  unsigned __int8 *v206;
  _QWORD **v207;
  unsigned int v208;
  _QWORD *v209;
  uint64_t ***v210;
  uint64_t **v211;
  void *v212;
  unsigned int v213;
  uint64_t ***v214;
  uint64_t **v215;
  uint64_t v216;
  uint64_t **v217;
  uint64_t *v218;
  uint64_t *v219;
  uint64_t **v220;
  BOOL v221;
  uint64_t v222;
  _QWORD *v223;
  uint64_t v224;
  uint64_t v225;
  uint64_t v226;
  uint64_t v227;
  uint64_t ****v228;
  uint64_t ***v229;
  int v230;
  int v231;
  unsigned int v232;
  llvm::GetElementPtrInst *v233;
  uint64_t *v234;
  uint64_t v235;
  uint64_t v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t ****v239;
  uint64_t ***v240;
  int v241;
  int v242;
  unint64_t v243;
  unsigned __int8 *v244;
  BOOL v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  unsigned __int8 **v250;
  unsigned __int8 *v251;
  int v252;
  int v253;
  uint64_t *v254;
  void *v255;
  unsigned __int8 *v256;
  uint64_t **v257;
  char *v258;
  uint64_t **v259;
  void *v260;
  uint64_t v261;
  uint64_t v262;
  uint64_t ***v263;
  uint64_t **v264;
  char *v265;
  uint64_t **v266;
  uint64_t v267;
  uint64_t v268;
  uint64_t ***v269;
  uint64_t v270;
  char *v271;
  uint64_t v272;
  unsigned __int8 *v273;
  unsigned __int8 *v274;
  uint64_t v275;
  uint64_t **v276;
  uint64_t *v277;
  unint64_t *v278;
  unsigned int v279;
  unsigned int v280;
  uint64_t v281;
  unint64_t *v282;
  uint64_t v283;
  unint64_t *v284;
  unint64_t v285;
  uint64_t v286;
  _QWORD *v287;
  unint64_t *v288;
  unint64_t v289;
  uint64_t v290;
  uint64_t v291;
  llvm::Value *v292;
  uint64_t v293;
  _QWORD *v294;
  unint64_t v295;
  llvm::DataLayout *v296;
  uint64_t v297;
  uint64_t v298;
  int v299;
  int v300;
  uint64_t v301;
  _QWORD *v302;
  uint64_t v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t **v306;
  char *v307;
  uint64_t **v308;
  const char *v309;
  __int16 v310;
  uint64_t v311[2];
  int v312;
  unint64_t *v313;
  unint64_t *v314;
  uint64_t v315;
  int v316;
  _BYTE v317[64];
  void *v318;
  uint64_t v319;
  _QWORD v320[2];
  __int16 v321;
  void *v322;
  uint64_t v323;
  _QWORD v324[2];
  __int16 v325;
  llvm::ValueHandleBase *v326;
  uint64_t v327;
  __int128 v328;
  _BYTE v329[16];
  __int16 v330;
  char *v331;
  uint64_t v332;
  unsigned int v333;
  uint64_t **v334;
  _QWORD ***v335;
  uint64_t v336;
  uint64_t v337;
  uint64_t v338;

  v338 = *MEMORY[0x1E0C80C00];
  v4 = (*(unsigned __int16 *)(a2 + 18) >> 4) & 0x3FF;
  if (v4 != 106 && v4 != 101)
    return 0;
  *(_DWORD *)(a1 + 28) = 0;
  sub_1C5EA54B0(*(_QWORD *)(a2 + 40), (uint64_t)&v328);
  v5 = HIDWORD(v328);
  *(_DWORD *)(a1 + 28) = HIDWORD(v328);
  if (!v5)
    return 0;
  v6 = v329[0];
  v7 = v328;
  v8 = **(void ****)(a1 + 8);
  do
  {
    v9 = *v8;
    v8 += 2;
  }
  while (v9 != &llvm::FunctionGroupInfoWrapperPass::ID);
  v10 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v8 - 1) + 96))(*(v8 - 1), &llvm::FunctionGroupInfoWrapperPass::ID);
  v11 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v10 + 32) + 24))(*(_QWORD *)(v10 + 32), a2);
  v12 = sub_1C5EAC9F4(*(_QWORD *)(a2 + 40), v11);
  if ((v12 & 0xFF00000000) == 0)
    return 0;
  v299 = v7;
  v300 = v6;
  v298 = v11;
  *(_DWORD *)(a1 + 36) = v12;
  v301 = *(_QWORD *)(a2 + 40);
  v13 = **(void ****)(a1 + 8);
  do
  {
    v14 = *v13;
    v13 += 2;
  }
  while (v14 != &llvm::BlockFrequencyInfoWrapperPass::ID);
  v15 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v13 - 1) + 96))(*(v13 - 1), &llvm::BlockFrequencyInfoWrapperPass::ID);
  *(_DWORD *)(a1 + 48) = 0;
  v331 = 0;
  v332 = 0;
  v333 = 0;
  v16 = *(_QWORD *)(a2 + 80);
  if (v16)
    v17 = v16 - 24;
  else
    v17 = 0;
  v18 = v17 + 40;
  v19 = *(_QWORD *)(v17 + 48);
  v303 = a2;
  v305 = a1;
  if (v19 == v17 + 40)
  {
    v37 = 0;
    v36 = 0;
LABEL_53:
    v40 = &v36[16 * v37];
    v38 = v40;
    goto LABEL_54;
  }
  v20 = (uint64_t *)(v15 + 32);
  do
  {
    v21 = v19 - 24;
    if (!v19)
      v21 = 0;
    v22 = *(unsigned __int8 *)(v21 + 16);
    if (v22 != 59)
      v21 = 0;
    v313 = (unint64_t *)v21;
    if (v19 && v22 == 59)
    {
      *(_QWORD *)&v328 = v329;
      *((_QWORD *)&v328 + 1) = 0x400000000;
      v23 = *(_QWORD *)(v21 + 8);
      if (!v23)
        goto LABEL_42;
      i = 0;
      do
      {
        v25 = *(_QWORD *)(v23 + 24);
        if (i >= HIDWORD(v328))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v328, (uint64_t)v329, i + 1, 8);
          i = DWORD2(v328);
        }
        *(_QWORD *)(v328 + 8 * i) = v25;
        i = ++DWORD2(v328);
        v23 = *(_QWORD *)(v23 + 8);
      }
      while (v23);
      v23 = 0;
      if (i)
      {
        while (1)
        {
          v26 = (_BYTE *)v328;
          v27 = *(_QWORD *)(v328 + 8 * i - 8);
          DWORD2(v328) = i - 1;
          v28 = *(unsigned __int8 *)(v27 + 16) - 60;
          v29 = v28 > 0x11;
          v30 = (1 << v28) & 0x20007;
          v31 = v29 || v30 == 0;
          if (v31 && !sub_1C559A5B4(v27))
            break;
          BlockFreq = llvm::BlockFrequencyInfo::getBlockFreq(v20, *(_QWORD *)(v27 + 40));
          v33 = *(unsigned __int8 *)(v27 + 16);
          if (v33 == 62 || v33 == 77)
          {
            v34 = *(_QWORD *)(v27 + 8);
            for (i = DWORD2(v328); v34; v34 = *(_QWORD *)(v34 + 8))
            {
              v35 = *(_QWORD *)(v34 + 24);
              if (i >= HIDWORD(v328))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v328, (uint64_t)v329, i + 1, 8);
                i = DWORD2(v328);
              }
              *(_QWORD *)(v328 + 8 * i) = v35;
              i = ++DWORD2(v328);
            }
          }
          else
          {
            i = DWORD2(v328);
          }
          v23 += BlockFreq;
          if (!i)
            goto LABEL_42;
        }
      }
      else
      {
LABEL_42:
        sub_1C617C470((uint64_t)&v331, (uint64_t *)&v313)[1] = v23;
        v26 = (_BYTE *)v328;
      }
      if (v26 != v329)
        free(v26);
    }
    v19 = *(_QWORD *)(v19 + 8);
  }
  while (v19 != v18);
  v36 = v331;
  v37 = v333;
  if (!(_DWORD)v332)
    goto LABEL_53;
  v38 = &v331[16 * v333];
  if (v333)
  {
    v39 = 0;
    while ((*(_QWORD *)&v331[v39] | 0x1000) == 0xFFFFFFFFFFFFF000)
    {
      v39 += 16;
      if (16 * v333 == v39)
      {
        v40 = &v331[16 * v333];
        goto LABEL_54;
      }
    }
    v40 = &v331[v39];
  }
  else
  {
    v40 = v331;
  }
LABEL_54:
  v41 = &v36[16 * v37];
  if (v40 == v41)
  {
    v43 = 0;
    v42 = 0;
  }
  else
  {
    v42 = 0;
    v43 = 0;
    v44 = 0;
    do
    {
      v328 = *(_OWORD *)v40;
      if (v43 >= v44)
      {
        v45 = ((char *)v43 - (char *)v42) >> 4;
        v46 = v45 + 1;
        if ((unint64_t)(v45 + 1) >> 60)
          abort();
        if (v44 - v42 > v46)
          v46 = v44 - v42;
        if ((unint64_t)((char *)v44 - (char *)v42) >= 0x7FFFFFFFFFFFFFF0)
          v47 = 0xFFFFFFFFFFFFFFFLL;
        else
          v47 = v46;
        if (v47)
        {
          if (v47 >> 60)
            sub_1C4764EE4();
          v48 = (char *)operator new(16 * v47);
        }
        else
        {
          v48 = 0;
        }
        v49 = &v48[16 * v45];
        *(_OWORD *)v49 = v328;
        if (v43 == v42)
        {
          v51 = &v48[16 * v45];
        }
        else
        {
          v50 = &v48[16 * v45];
          do
          {
            v51 = v50 - 16;
            *((_OWORD *)v50 - 1) = *((_OWORD *)v43 - 1);
            v43 -= 2;
            v50 -= 16;
          }
          while (v43 != v42);
        }
        v44 = (uint64_t *)&v48[16 * v47];
        v43 = (uint64_t *)(v49 + 16);
        if (v42)
          operator delete(v42);
        v42 = (uint64_t *)v51;
      }
      else
      {
        *(_OWORD *)v43 = *(_OWORD *)v40;
        v43 += 2;
      }
      v52 = v40 + 16;
      v40 = v38;
      if (v52 != v38)
      {
        v40 = v52;
        while ((*(_QWORD *)v40 | 0x1000) == 0xFFFFFFFFFFFFF000)
        {
          v40 += 16;
          if (v40 == v38)
          {
            v40 = v38;
            break;
          }
        }
      }
    }
    while (v40 != v41);
  }
  v53 = 126 - 2 * __clz(((char *)v43 - (char *)v42) >> 4);
  if (v43 == v42)
    v54 = 0;
  else
    v54 = v53;
  sub_1C559BFCC(v42, v43, v54, 1);
  if (v43 != v42)
  {
    v55 = (llvm::AllocaInst **)v42;
    do
    {
      v56 = *v55;
      v57 = sub_1C627A880((llvm::DataLayout *)(v301 + 272), *v55);
      if (v57)
      {
        v58 = (*(_DWORD *)(v305 + 32) - 1 + (1 << *((_WORD *)v56 + 9))) & -(int)(1 << *((_WORD *)v56 + 9));
        v59 = v57 + v58;
        if (v57 + v58 <= *(_DWORD *)(v305 + 28))
        {
          v60 = *(unsigned int *)(v305 + 48);
          if (v60 >= *(unsigned int *)(v305 + 52))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v305 + 40, v305 + 56, v60 + 1, 16);
            v60 = *(unsigned int *)(v305 + 48);
          }
          v61 = (llvm::AllocaInst **)(*(_QWORD *)(v305 + 40) + 16 * v60);
          *v61 = v56;
          v61[1] = (llvm::AllocaInst *)v58;
          ++*(_DWORD *)(v305 + 48);
          *(_DWORD *)(v305 + 32) = v59;
        }
      }
      v55 += 2;
    }
    while (v55 != (llvm::AllocaInst **)v43);
  }
  if (v42)
    operator delete(v42);
  MEMORY[0x1CAA32FB4](v331, 8);
  if (!*(_DWORD *)(v305 + 48))
    return 0;
  v64 = *(_QWORD *)(v303 + 40);
  v65 = *(_QWORD *)(v303 + 80);
  if (v65)
    v66 = v65 - 24;
  else
    v66 = 0;
  v67 = (uint64_t **)(**(_QWORD **)v64 + 1960);
  v68 = v66 + 40;
  for (j = *(_QWORD *)(v66 + 48); j != v68; j = *(_QWORD *)(j + 8))
  {
    v70 = j - 24;
    if (!j)
      v70 = 0;
    if (*(_BYTE *)(v70 + 16) != 83)
    {
      v71 = *(unsigned __int8 *)(j - 8) - 38;
      v29 = v71 > 0x38;
      v72 = (1 << v71) & 0x100060000000001;
      if (v29 || v72 == 0)
        v68 = j;
      else
        v68 = *(_QWORD *)(j + 8);
      break;
    }
  }
  v295 = *(unsigned int *)(v305 + 32);
  sub_1C4D8ADA0((uint64_t)&v331, (uint64_t **)v66, v68, 0, 0, 0);
  sub_1C6210688(v64, "llvm.agx2.linear.id", 0x13uLL, 0, v67);
  v75 = v74;
  if (v74)
    v74 = *(_QWORD *)(v74 + 24);
  *(_QWORD *)&v328 = "linear_id";
  v330 = 259;
  v302 = (_QWORD *)sub_1C4774778((uint64_t *)&v331, (uint64_t **)v74, v75, 0, 0, (uint64_t)&v328, 0);
  *(_QWORD *)&v328 = v329;
  *((_QWORD *)&v328 + 1) = 0x2000000000;
  v76 = (unint64_t *)v317;
  v313 = (unint64_t *)v317;
  v314 = (unint64_t *)v317;
  v315 = 8;
  v316 = 0;
  v77 = v305;
  v78 = *(unsigned int *)(v305 + 48);
  if ((_DWORD)v78)
  {
    v79 = *(_QWORD *)(v305 + 40);
    v296 = (llvm::DataLayout *)(v64 + 272);
    v297 = v79 + 16 * v78;
    while (1)
    {
      v80 = *(llvm::AllocaInst **)v79;
      v81 = *(_DWORD *)(v79 + 8);
      v82 = DWORD2(v328);
      v304 = v79;
      if (DWORD2(v328) >= (unint64_t)HIDWORD(v328))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v328, (uint64_t)v329, DWORD2(v328) + 1, 8);
        v82 = DWORD2(v328);
      }
      *(_QWORD *)(v328 + 8 * v82) = v80;
      ++DWORD2(v328);
      v334 = (uint64_t **)*((_QWORD *)v80 + 5);
      v335 = (_QWORD ***)((char *)v80 + 24);
      v83 = (_QWORD **)*((_QWORD *)v80 + 6);
      v322 = v83;
      if (v83)
      {
        llvm::MetadataTracking::track((uint64_t)&v322, (unsigned __int8 *)v83, 2);
        v84 = v322;
      }
      else
      {
        v84 = 0;
      }
      sub_1C4774EF4((uint64_t)&v331, 0, (uint64_t)v84);
      if (v322)
        llvm::MetadataTracking::untrack((uint64_t)&v322, (unsigned __int8 *)v322);
      v85 = sub_1C627A880(v296, v80);
      llvm::ArrayType::get((llvm::ArrayType *)(**(_QWORD **)v64 + 1912), (llvm::Type *)v85);
      v87 = v86;
      v88 = (char *)operator new(0x78uLL);
      *((_DWORD *)v88 + 13) = *((_DWORD *)v88 + 13) & 0x38000000 | 1;
      v89 = (uint64_t *)(v88 + 32);
      *(_QWORD *)v88 = 0;
      *((_QWORD *)v88 + 1) = 0;
      *((_QWORD *)v88 + 2) = 0;
      *((_QWORD *)v88 + 3) = v88 + 32;
      v91 = llvm::UndefValue::get(v87, v90);
      v92 = v80 >> 4;
      if ((*((_BYTE *)v80 + 23) & 0x10) != 0)
        break;
      v102 = 0;
      v103 = &byte_1C871356D;
LABEL_135:
      v322 = v103;
      v323 = v102;
      v324[0] = "_lm_alloca";
      v325 = 773;
      v105 = v64;
      llvm::GlobalVariable::GlobalVariable((uint64_t)v89, v64, v87, 0, 7, (uint64_t)v91, (uint64_t)&v322, 0, 0, 0x100000003, 0);
      v107 = (uint64_t *)llvm::UniqueStringSaver::save(***((_QWORD ***)v88 + 4) + 2136, "cl_local_per_thread", 0x13uLL);
      v109 = v108;
      v110 = ***((_QWORD ***)v88 + 4);
      v322 = v88 + 32;
      v111 = *(_DWORD *)(v110 + 2520);
      if (v111)
      {
        v112 = *(_QWORD *)(v110 + 2504);
        v113 = v111 - 1;
        v114 = v113 & ((v89 >> 4) ^ (v89 >> 9));
        v115 = (uint64_t **)(v112 + 24 * v114);
        v116 = *v115;
        if (*v115 == v89)
          goto LABEL_137;
        v142 = 0;
        v143 = 1;
        while (v116 != (uint64_t *)-4096)
        {
          if (v142)
            v144 = 0;
          else
            v144 = v116 == (uint64_t *)-8192;
          if (v144)
            v142 = v115;
          v145 = v114 + v143++;
          v114 = v145 & v113;
          v115 = (uint64_t **)(v112 + 24 * v114);
          v116 = *v115;
          if (*v115 == v89)
            goto LABEL_137;
        }
        if (v142)
          v152 = v142;
        else
          v152 = v115;
      }
      else
      {
        v152 = 0;
      }
      v115 = (uint64_t **)sub_1C53D65B8(v110 + 2504, (uint64_t)&v322, (uint64_t *)&v322, v152);
      v153 = (uint64_t *)v322;
      v115[1] = 0;
      v115[2] = 0;
      *v115 = v153;
LABEL_137:
      v115[1] = v107;
      v115[2] = v109;
      *((_DWORD *)v88 + 16) = *((_DWORD *)v88 + 16) & 0xFFBFFFFF | ((v109 != 0) << 22);
      if (v300)
      {
        v117 = (*(_DWORD *)(v77 + 36) + v81 * v299);
        v118 = *(llvm::ConstantInt **)(*(_QWORD *)v336 + 1960);
        v119 = *(_DWORD *)(*(_QWORD *)v336 + 1968);
        LODWORD(v323) = v119 >> 8;
        v64 = v105;
        if (v119 >> 8 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v322, v117, 0);
        }
        else
        {
          if (v119 <= 0xFF)
            v120 = 0;
          else
            v120 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v119);
          v322 = (void *)(v120 & v117);
        }
        v121 = llvm::ConstantInt::get(v118, (llvm::LLVMContext *)&v322, v106);
        if (v323 >= 0x41 && v322)
          MEMORY[0x1CAA32F9C](v322, 0x1000C8000313F17);
        if ((*((_BYTE *)v80 + 23) & 0x10) != 0)
        {
          v122 = ***(_QWORD ***)v80;
          v123 = *(_QWORD *)(v122 + 152);
          v124 = *(unsigned int *)(v122 + 168);
          if (!(_DWORD)v124)
            goto LABEL_173;
          LODWORD(v125) = (v124 - 1) & (v92 ^ (v80 >> 9));
          v126 = (llvm::AllocaInst **)(v123 + 16 * v125);
          v127 = *v126;
          if (*v126 != v80)
          {
            v128 = 1;
            while (v127 != (llvm::AllocaInst *)-4096)
            {
              v129 = v125 + v128++;
              v125 = v129 & (v124 - 1);
              v127 = *(llvm::AllocaInst **)(v123 + 16 * v125);
              if (v127 == v80)
              {
                v126 = (llvm::AllocaInst **)(v123 + 16 * v125);
                goto LABEL_174;
              }
            }
LABEL_173:
            v126 = (llvm::AllocaInst **)(v123 + 16 * v124);
          }
LABEL_174:
          v146 = v126[1];
          v149 = *(_QWORD *)v146;
          v148 = (char *)v146 + 16;
          v147 = v149;
        }
        else
        {
          v147 = 0;
          v148 = &byte_1C871356D;
        }
        v322 = v148;
        v323 = v147;
        v324[0] = "_lm_add";
        v325 = 773;
        v151 = (*(uint64_t (**)(uint64_t, _QWORD *, llvm::ValueHandleBase *, uint64_t, uint64_t))(*(_QWORD *)v337 + 16))(v337, v302, v121, 1, 1);
        if (!v151)
          v151 = sub_1C4774D04((uint64_t *)&v331, 13, v302, (uint64_t)v121, (uint64_t)&v322, 1, 1);
        goto LABEL_201;
      }
      v130 = *(llvm::ConstantInt **)(*(_QWORD *)v336 + 1960);
      v131 = *(_DWORD *)(*(_QWORD *)v336 + 1968);
      LODWORD(v323) = v131 >> 8;
      if (v131 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v322, v295, 0);
      }
      else
      {
        if (v131 <= 0xFF)
          v132 = 0;
        else
          v132 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v131);
        v322 = (void *)(v132 & v295);
      }
      v133 = llvm::ConstantInt::get(v130, (llvm::LLVMContext *)&v322, v106);
      if (v323 >= 0x41 && v322)
        MEMORY[0x1CAA32F9C](v322, 0x1000C8000313F17);
      if ((*((_BYTE *)v80 + 23) & 0x10) != 0)
      {
        v134 = ***(_QWORD ***)v80;
        v135 = *(_QWORD *)(v134 + 152);
        v136 = *(unsigned int *)(v134 + 168);
        if (!(_DWORD)v136)
          goto LABEL_181;
        LODWORD(v137) = (v136 - 1) & (v92 ^ (v80 >> 9));
        v138 = (llvm::AllocaInst **)(v135 + 16 * v137);
        v139 = *v138;
        if (*v138 != v80)
        {
          v140 = 1;
          while (v139 != (llvm::AllocaInst *)-4096)
          {
            v141 = v137 + v140++;
            v137 = v141 & (v136 - 1);
            v139 = *(llvm::AllocaInst **)(v135 + 16 * v137);
            if (v139 == v80)
            {
              v138 = (llvm::AllocaInst **)(v135 + 16 * v137);
              goto LABEL_182;
            }
          }
LABEL_181:
          v138 = (llvm::AllocaInst **)(v135 + 16 * v136);
        }
LABEL_182:
        v154 = v138[1];
        v157 = *(_QWORD *)v154;
        v156 = (char *)v154 + 16;
        v155 = v157;
        goto LABEL_183;
      }
      v155 = 0;
      v156 = &byte_1C871356D;
LABEL_183:
      v322 = v156;
      v323 = v155;
      v324[0] = "_lm_mul";
      v325 = 773;
      v159 = (_QWORD *)sub_1C4EC4040((uint64_t)&v331, (uint64_t)v302, (uint64_t)v133, (uint64_t)&v322, 1, 1);
      v160 = (*(_DWORD *)(v77 + 36) + v81);
      v161 = *(llvm::ConstantInt **)(*(_QWORD *)v336 + 1960);
      v162 = *(_DWORD *)(*(_QWORD *)v336 + 1968);
      LODWORD(v323) = v162 >> 8;
      if (v162 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v322, v160, 0);
      }
      else
      {
        if (v162 <= 0xFF)
          v163 = 0;
        else
          v163 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v162);
        v322 = (void *)(v163 & v160);
      }
      v164 = llvm::ConstantInt::get(v161, (llvm::LLVMContext *)&v322, v158);
      if (v323 >= 0x41 && v322)
        MEMORY[0x1CAA32F9C](v322, 0x1000C8000313F17);
      if ((*((_BYTE *)v80 + 23) & 0x10) == 0)
      {
        v174 = 0;
        v175 = &byte_1C871356D;
        goto LABEL_198;
      }
      v165 = ***(_QWORD ***)v80;
      v166 = *(_QWORD *)(v165 + 152);
      v167 = *(unsigned int *)(v165 + 168);
      if (!(_DWORD)v167)
        goto LABEL_196;
      LODWORD(v168) = (v167 - 1) & (v92 ^ (v80 >> 9));
      v169 = (llvm::AllocaInst **)(v166 + 16 * v168);
      v170 = *v169;
      if (*v169 != v80)
      {
        v171 = 1;
        while (v170 != (llvm::AllocaInst *)-4096)
        {
          v172 = v168 + v171++;
          v168 = v172 & (v167 - 1);
          v170 = *(llvm::AllocaInst **)(v166 + 16 * v168);
          if (v170 == v80)
          {
            v169 = (llvm::AllocaInst **)(v166 + 16 * v168);
            goto LABEL_197;
          }
        }
LABEL_196:
        v169 = (llvm::AllocaInst **)(v166 + 16 * v167);
      }
LABEL_197:
      v173 = v169[1];
      v176 = *(_QWORD *)v173;
      v175 = (char *)v173 + 16;
      v174 = v176;
LABEL_198:
      v322 = v175;
      v323 = v174;
      v324[0] = "_lm_add";
      v325 = 773;
      v151 = (*(uint64_t (**)(uint64_t, _QWORD *, llvm::ValueHandleBase *, uint64_t, uint64_t))(*(_QWORD *)v337 + 16))(v337, v159, v164, 1, 1);
      if (!v151)
        v151 = sub_1C4774D04((uint64_t *)&v331, 13, v159, (uint64_t)v164, (uint64_t)&v322, 1, 1);
      v64 = v105;
LABEL_201:
      v326 = 0;
      v327 = 0;
      v177 = *(llvm::ConstantInt **)(*(_QWORD *)v336 + 1960);
      LODWORD(v323) = *(_DWORD *)(*(_QWORD *)v336 + 1968) >> 8;
      if (v323 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&v322, 0, 0);
      else
        v322 = 0;
      v178 = llvm::ConstantInt::get(v177, (llvm::LLVMContext *)&v322, v150);
      if (v323 >= 0x41 && v322)
        MEMORY[0x1CAA32F9C](v322, 0x1000C8000313F17);
      v326 = v178;
      v327 = v151;
      v179 = (llvm::GetElementPtrInst *)*((_QWORD *)v88 + 7);
      if ((*((_BYTE *)v80 + 23) & 0x10) != 0)
      {
        v180 = ***(_QWORD ***)v80;
        v181 = *(_QWORD *)(v180 + 152);
        v182 = *(unsigned int *)(v180 + 168);
        if (!(_DWORD)v182)
          goto LABEL_211;
        LODWORD(v183) = (v182 - 1) & (v92 ^ (v80 >> 9));
        v184 = (llvm::AllocaInst **)(v181 + 16 * v183);
        v185 = *v184;
        if (*v184 != v80)
        {
          v186 = 1;
          while (v185 != (llvm::AllocaInst *)-4096)
          {
            v187 = v183 + v186++;
            v183 = v187 & (v182 - 1);
            v185 = *(llvm::AllocaInst **)(v181 + 16 * v183);
            if (v185 == v80)
            {
              v184 = (llvm::AllocaInst **)(v181 + 16 * v183);
              goto LABEL_212;
            }
          }
LABEL_211:
          v184 = (llvm::AllocaInst **)(v181 + 16 * v182);
        }
LABEL_212:
        v188 = v184[1];
        v191 = *(_QWORD *)v188;
        v190 = (char *)v188 + 16;
        v189 = v191;
        goto LABEL_213;
      }
      v189 = 0;
      v190 = &byte_1C871356D;
LABEL_213:
      v322 = v190;
      v323 = v189;
      v324[0] = "_lm_base";
      v325 = 773;
      v192 = (unsigned __int8 *)sub_1C509D7B0((uint64_t *)&v331, v179, v89, (llvm::Value *)&v326, 2, (uint64_t)&v322);
      v193 = llvm::PointerType::get(*((llvm::PointerType **)v80 + 8), (llvm::Type *)3);
      if ((v192[23] & 0x10) != 0)
      {
        v194 = ***(_QWORD ***)v192;
        v195 = *(_QWORD *)(v194 + 152);
        v196 = *(unsigned int *)(v194 + 168);
        if (!(_DWORD)v196)
          goto LABEL_220;
        LODWORD(v197) = (v196 - 1) & ((v192 >> 4) ^ (v192 >> 9));
        v198 = (unsigned __int8 **)(v195 + 16 * v197);
        v199 = *v198;
        if (*v198 != v192)
        {
          v200 = 1;
          while (v199 != (unsigned __int8 *)-4096)
          {
            v201 = v197 + v200++;
            v197 = v201 & (v196 - 1);
            v199 = *(unsigned __int8 **)(v195 + 16 * v197);
            if (v199 == v192)
            {
              v198 = (unsigned __int8 **)(v195 + 16 * v197);
              goto LABEL_221;
            }
          }
LABEL_220:
          v198 = (unsigned __int8 **)(v195 + 16 * v196);
        }
LABEL_221:
        v202 = v198[1];
        v205 = *(_QWORD *)v202;
        v204 = (char *)(v202 + 16);
        v203 = v205;
        goto LABEL_222;
      }
      v203 = 0;
      v204 = &byte_1C871356D;
LABEL_222:
      v322 = v204;
      v323 = v203;
      v324[0] = "_bc";
      v325 = 773;
      v206 = sub_1C5098D9C((uint64_t *)&v331, v192, v193, (uint64_t)&v322);
      v311[0] = 0;
      v311[1] = 0;
      v312 = 0;
      v322 = v80;
      sub_1C4EAD954(v311, &v322)[1] = v206;
      v322 = v324;
      v323 = 0x400000000;
      v207 = (_QWORD **)*((_QWORD *)v80 + 1);
      if (v207)
      {
        v208 = 0;
        do
        {
          v209 = v207[3];
          if (v208 >= HIDWORD(v323))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v322, (uint64_t)v324, v208 + 1, 8);
            v208 = v323;
          }
          *((_QWORD *)v322 + v208) = v209;
          v208 = v323 + 1;
          LODWORD(v323) = v323 + 1;
          v207 = (_QWORD **)v207[1];
        }
        while (v207);
        while (1)
        {
          if (!v208)
            goto LABEL_314;
          v210 = (uint64_t ***)*((_QWORD *)v322 + v208 - 1);
          LODWORD(v323) = v208 - 1;
          if (sub_1C559A5B4((uint64_t)v210))
          {
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v313, (uint64_t)v210);
LABEL_230:
            v208 = v323;
            continue;
          }
          v334 = v210[5];
          v335 = v210 + 3;
          v211 = v210[6];
          v318 = v211;
          if (v211)
          {
            llvm::MetadataTracking::track((uint64_t)&v318, (unsigned __int8 *)v211, 2);
            v212 = v318;
          }
          else
          {
            v212 = 0;
          }
          sub_1C4774EF4((uint64_t)&v331, 0, (uint64_t)v212);
          if (v318)
            llvm::MetadataTracking::untrack((uint64_t)&v318, (unsigned __int8 *)v318);
          v213 = *((unsigned __int8 *)v210 + 16);
          if (v213 <= 0x3D)
          {
            if (v213 == 60 || v213 == 61)
            {
              v214 = v210 - 4;
              v318 = *(v210 - 4);
              v215 = (uint64_t **)sub_1C4EAD954(v311, &v318)[1];
              if (*(v210 - 4))
              {
                **(v210 - 2) = (uint64_t *)*(v210 - 3);
                v216 = (uint64_t)*(v210 - 3);
                if (v216)
                  *(_QWORD *)(v216 + 16) = *(v210 - 2);
              }
              *v214 = v215;
              if (v215)
              {
                v219 = v215[1];
                v217 = v215 + 1;
                v218 = v219;
                *(v210 - 3) = (uint64_t **)v219;
                if (v219)
                  v218[2] = (uint64_t)(v210 - 3);
                *(v210 - 2) = v217;
                *v217 = (uint64_t *)v214;
              }
            }
            goto LABEL_230;
          }
          if (v213 != 62)
          {
            if (v213 != 77)
              goto LABEL_230;
            v220 = *v210;
            if (*v210)
              v221 = *((_BYTE *)*v210 + 8) == 15;
            else
              v221 = 0;
            if (v221 && !v220[3])
            {
              v318 = v210;
              v262 = sub_1C4EAD954(v311, &v318)[1];
              v307 = (char *)v210;
              sub_1C4EAD954(v311, &v307)[1] = v262;
LABEL_302:
              v275 = DWORD2(v328);
              if (DWORD2(v328) >= (unint64_t)HIDWORD(v328))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v328, (uint64_t)v329, DWORD2(v328) + 1, 8);
                v275 = DWORD2(v328);
              }
              *(_QWORD *)(v328 + 8 * v275) = v210;
              ++DWORD2(v328);
              goto LABEL_305;
            }
            v222 = llvm::PointerType::get((llvm::PointerType *)*v220[2], (llvm::Type *)3);
            v307 = (char *)*(v210 - 4);
            v223 = sub_1C4EAD954(v311, &v307);
            if ((*((_BYTE *)v210 + 23) & 0x10) == 0)
            {
              v270 = 0;
              v271 = &byte_1C871356D;
              goto LABEL_301;
            }
            v224 = ***v210;
            v225 = *(_QWORD *)(v224 + 152);
            v226 = *(unsigned int *)(v224 + 168);
            if ((_DWORD)v226)
            {
              LODWORD(v227) = (v226 - 1) & ((v210 >> 4) ^ (v210 >> 9));
              v228 = (uint64_t ****)(v225 + 16 * v227);
              v229 = *v228;
              if (*v228 == v210)
              {
LABEL_300:
                v269 = v228[1];
                v272 = (uint64_t)*v269;
                v271 = (char *)(v269 + 2);
                v270 = v272;
LABEL_301:
                v273 = (unsigned __int8 *)v223[1];
                v318 = v271;
                v319 = v270;
                v320[0] = "_lm";
                v321 = 773;
                v274 = sub_1C4773E38((uint64_t *)&v331, 49, v273, v222, (uint64_t)&v318);
                v318 = v210;
                sub_1C4EAD954(v311, &v318)[1] = v274;
                goto LABEL_302;
              }
              v230 = 1;
              while (v229 != (uint64_t ***)-4096)
              {
                v231 = v227 + v230++;
                v227 = v231 & (v226 - 1);
                v229 = *(uint64_t ****)(v225 + 16 * v227);
                if (v229 == v210)
                {
                  v228 = (uint64_t ****)(v225 + 16 * v227);
                  goto LABEL_300;
                }
              }
            }
            v228 = (uint64_t ****)(v225 + 16 * v226);
            goto LABEL_300;
          }
          v318 = v320;
          v319 = 0x400000000;
          v232 = *((_DWORD *)v210 + 5) & 0x7FFFFFF;
          if (v232 != 1)
            break;
LABEL_261:
          v233 = (llvm::GetElementPtrInst *)v210[8];
          v306 = v210[-4 * v232];
          v234 = (uint64_t *)sub_1C4EAD954(v311, &v306)[1];
          if ((*((_BYTE *)v210 + 23) & 0x10) == 0)
          {
            v264 = 0;
            v265 = &byte_1C871356D;
            goto LABEL_295;
          }
          v235 = ***v210;
          v236 = *(_QWORD *)(v235 + 152);
          v237 = *(unsigned int *)(v235 + 168);
          if (!(_DWORD)v237)
            goto LABEL_293;
          LODWORD(v238) = (v237 - 1) & ((v210 >> 4) ^ (v210 >> 9));
          v239 = (uint64_t ****)(v236 + 16 * v238);
          v240 = *v239;
          if (*v239 != v210)
          {
            v241 = 1;
            while (v240 != (uint64_t ***)-4096)
            {
              v242 = v238 + v241++;
              v238 = v242 & (v237 - 1);
              v240 = *(uint64_t ****)(v236 + 16 * v238);
              if (v240 == v210)
              {
                v239 = (uint64_t ****)(v236 + 16 * v238);
                goto LABEL_294;
              }
            }
LABEL_293:
            v239 = (uint64_t ****)(v236 + 16 * v237);
          }
LABEL_294:
          v263 = v239[1];
          v266 = *v263;
          v265 = (char *)(v263 + 2);
          v264 = v266;
LABEL_295:
          v307 = v265;
          v308 = v264;
          v309 = "_lm";
          v310 = 773;
          v267 = sub_1C509D7B0((uint64_t *)&v331, v233, v234, (llvm::Value *)v318, v319, (uint64_t)&v307);
          v307 = (char *)v210;
          sub_1C4EAD954(v311, &v307)[1] = v267;
          v268 = DWORD2(v328);
          if (DWORD2(v328) >= (unint64_t)HIDWORD(v328))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v328, (uint64_t)v329, DWORD2(v328) + 1, 8);
            v268 = DWORD2(v328);
          }
          *(_QWORD *)(v328 + 8 * v268) = v210;
          ++DWORD2(v328);
          if (v318 != v320)
            free(v318);
LABEL_305:
          v276 = v210[1];
          if (!v276)
            goto LABEL_230;
          v208 = v323;
          do
          {
            v277 = v276[3];
            if (v208 >= HIDWORD(v323))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v322, (uint64_t)v324, v208 + 1, 8);
              v208 = v323;
            }
            *((_QWORD *)v322 + v208) = v277;
            v208 = v323 + 1;
            LODWORD(v323) = v323 + 1;
            v276 = (uint64_t **)v276[1];
          }
          while (v276);
        }
        v243 = 0;
        while (2)
        {
          ++v243;
          v244 = (unsigned __int8 *)(&v210[4 * v243])[-4 * v232];
          if (v244)
            v245 = v244[16] == 16;
          else
            v245 = 0;
          if (v245)
          {
            v254 = (uint64_t *)(v244 + 24);
            if (*((_DWORD *)v244 + 8) >= 0x41u)
              v254 = (uint64_t *)*v254;
            v255 = llvm::ConstantInt::get((llvm::ConstantInt *)v67, *v254, 0);
          }
          else
          {
            if ((v244[23] & 0x10) != 0)
            {
              v246 = ***(_QWORD ***)v244;
              v247 = *(_QWORD *)(v246 + 152);
              v248 = *(unsigned int *)(v246 + 168);
              if (!(_DWORD)v248)
                goto LABEL_283;
              LODWORD(v249) = (v248 - 1) & ((v244 >> 4) ^ (v244 >> 9));
              v250 = (unsigned __int8 **)(v247 + 16 * v249);
              v251 = *v250;
              if (*v250 != v244)
              {
                v252 = 1;
                while (v251 != (unsigned __int8 *)-4096)
                {
                  v253 = v249 + v252++;
                  v249 = v253 & (v248 - 1);
                  v251 = *(unsigned __int8 **)(v247 + 16 * v249);
                  if (v251 == v244)
                  {
                    v250 = (unsigned __int8 **)(v247 + 16 * v249);
                    goto LABEL_284;
                  }
                }
LABEL_283:
                v250 = (unsigned __int8 **)(v247 + 16 * v248);
              }
LABEL_284:
              v256 = v250[1];
              v259 = *(uint64_t ***)v256;
              v258 = (char *)(v256 + 16);
              v257 = v259;
            }
            else
            {
              v257 = 0;
              v258 = &byte_1C871356D;
            }
            v307 = v258;
            v308 = v257;
            v309 = "_trunc";
            v310 = 773;
            v255 = sub_1C4773E38((uint64_t *)&v331, 38, v244, (uint64_t)v67, (uint64_t)&v307);
          }
          v260 = v255;
          v261 = v319;
          if (v319 >= (unint64_t)HIDWORD(v319))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v318, (uint64_t)v320, v319 + 1, 8);
            v261 = v319;
          }
          *((_QWORD *)v318 + v261) = v260;
          LODWORD(v319) = v319 + 1;
          v232 = *((_DWORD *)v210 + 5) & 0x7FFFFFF;
          if (v243 >= v232 - 1)
            goto LABEL_261;
          continue;
        }
      }
LABEL_314:
      if (v322 != v324)
        free(v322);
      MEMORY[0x1CAA32FB4](v311[0], 8);
      v77 = v305;
      v79 = v304 + 16;
      if (v304 + 16 == v297)
      {
        v76 = v313;
        v278 = v314;
        v280 = v315;
        v279 = HIDWORD(v315);
        goto LABEL_339;
      }
    }
    v93 = ***(_QWORD ***)v80;
    v94 = *(_QWORD *)(v93 + 152);
    v95 = *(unsigned int *)(v93 + 168);
    if ((_DWORD)v95)
    {
      LODWORD(v96) = (v95 - 1) & (v92 ^ (v80 >> 9));
      v97 = (llvm::AllocaInst **)(v94 + 16 * v96);
      v98 = *v97;
      if (*v97 == v80)
      {
LABEL_134:
        v101 = v97[1];
        v104 = *(_QWORD *)v101;
        v103 = (char *)v101 + 16;
        v102 = v104;
        goto LABEL_135;
      }
      v99 = 1;
      while (v98 != (llvm::AllocaInst *)-4096)
      {
        v100 = v96 + v99++;
        v96 = v100 & (v95 - 1);
        v98 = *(llvm::AllocaInst **)(v94 + 16 * v96);
        if (v98 == v80)
        {
          v97 = (llvm::AllocaInst **)(v94 + 16 * v96);
          goto LABEL_134;
        }
      }
    }
    v97 = (llvm::AllocaInst **)(v94 + 16 * v95);
    goto LABEL_134;
  }
  v279 = 0;
  v280 = 8;
  v278 = (unint64_t *)v317;
LABEL_339:
  if (v278 == v76)
    v281 = v279;
  else
    v281 = v280;
  v282 = v278;
  if ((_DWORD)v281)
  {
    v283 = 8 * v281;
    v282 = v278;
    while (*v282 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v282;
      v283 -= 8;
      if (!v283)
        goto LABEL_353;
    }
  }
  v284 = &v278[v281];
  if (v282 != v284)
  {
    v285 = *v282;
LABEL_349:
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v285 + 40) + 40, (uint64_t ***)v285);
    v286 = *(_QWORD *)(v285 + 24);
    v287 = *(_QWORD **)(v285 + 32);
    *v287 = v286;
    *(_QWORD *)(v286 + 8) = v287;
    *(_QWORD *)(v285 + 24) = 0;
    *(_QWORD *)(v285 + 32) = 0;
    llvm::Value::deleteValue((llvm::Value *)v285);
    v288 = v282 + 1;
    while (v288 != v284)
    {
      v289 = *v288++;
      v285 = v289;
      if (v289 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v282 = v288 - 1;
        goto LABEL_349;
      }
    }
  }
LABEL_353:
  if (DWORD2(v328))
  {
    v290 = 8 * DWORD2(v328);
    v291 = v328 - 8;
    do
    {
      v292 = *(llvm::Value **)(v291 + v290);
      if (v292)
      {
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v292 + 5) + 40, *(uint64_t ****)(v291 + v290));
        v293 = *((_QWORD *)v292 + 3);
        v294 = (_QWORD *)*((_QWORD *)v292 + 4);
        *v294 = v293;
        *(_QWORD *)(v293 + 8) = v294;
        *((_QWORD *)v292 + 3) = 0;
        *((_QWORD *)v292 + 4) = 0;
        llvm::Value::deleteValue(v292);
      }
      v290 -= 8;
    }
    while (v290);
  }
  if (v314 != v313)
    free(v314);
  if ((_BYTE *)v328 != v329)
    free((void *)v328);
  if (v331 != (char *)&v333)
    free(v331);
  v62 = 1;
  (*(void (**)(uint64_t, uint64_t, _QWORD, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v298 + 8))(v298, 13, *(unsigned int *)(v305 + 32), 1, 0, 1, 3);
  return v62;
}

uint64_t *sub_1C559BFCC(uint64_t *result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t *v7;
  uint64_t *v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unint64_t v19;
  uint64_t *v20;
  uint64_t *v21;
  uint64_t *v22;
  unint64_t v23;
  uint64_t *v24;
  unint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  unint64_t v30;
  unint64_t v31;
  uint64_t v32;
  BOOL v33;
  uint64_t *v34;
  unint64_t v35;
  uint64_t *v36;
  unint64_t v37;
  uint64_t *v38;
  uint64_t *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  unint64_t v45;
  unint64_t v46;
  uint64_t v47;
  unint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unint64_t v51;
  unint64_t v52;
  uint64_t v53;
  uint64_t v54;
  unint64_t v55;
  unint64_t v56;
  uint64_t v57;
  unint64_t v58;
  uint64_t v59;
  unint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t *v63;
  BOOL v65;
  uint64_t v66;
  uint64_t *v67;
  unint64_t v68;
  unint64_t v69;
  uint64_t v70;
  uint64_t v71;
  char *v72;
  uint64_t v73;
  uint64_t *v74;
  int64_t v75;
  int64_t v76;
  int64_t v77;
  uint64_t v78;
  uint64_t *v79;
  BOOL v80;
  unint64_t v81;
  unint64_t v82;
  uint64_t *v83;
  uint64_t v84;
  uint64_t *v85;
  uint64_t v86;
  uint64_t v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t *v91;
  uint64_t *v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  unint64_t v99;
  unint64_t v100;
  uint64_t v101;
  uint64_t *v102;
  uint64_t *v103;
  unint64_t v104;
  unint64_t v105;
  uint64_t v106;
  _QWORD *v107;
  _QWORD *v108;
  unint64_t v109;
  uint64_t v110;

  v7 = result;
LABEL_2:
  v8 = v7;
  while (2)
  {
    v7 = v8;
    v9 = (char *)a2 - (char *)v8;
    v10 = ((char *)a2 - (char *)v8) >> 4;
    switch(v10)
    {
      case 0:
      case 1:
        return result;
      case 2:
        v48 = *(a2 - 1);
        v49 = v8[1];
        if (v48 > v49)
        {
          v50 = *v8;
          *v8 = *(a2 - 2);
          v8[1] = v48;
          *(a2 - 2) = v50;
          *(a2 - 1) = v49;
        }
        return result;
      case 3:
        return sub_1C559C6A8(v8, v8 + 2, a2 - 2);
      case 4:
        return sub_1C559C914(v8, v8 + 2, v8 + 4, a2 - 2);
      case 5:
        result = sub_1C559C914(v8, v8 + 2, v8 + 4, v8 + 6);
        v51 = *(a2 - 1);
        v52 = v8[7];
        if (v51 > v52)
        {
          v53 = *(a2 - 2);
          v8[7] = v51;
          *(a2 - 1) = v52;
          v55 = v8[5];
          v54 = v8[6];
          v8[6] = v53;
          *(a2 - 2) = v54;
          v56 = v8[7];
          if (v56 > v55)
          {
            v57 = v8[6];
            v58 = v8[3];
            v59 = v8[4];
            v8[4] = v57;
            v8[5] = v56;
            v8[6] = v59;
            v8[7] = v55;
            if (v56 > v58)
            {
              v60 = v8[1];
              v61 = v8[2];
              v8[2] = v57;
              v8[3] = v56;
              v8[4] = v61;
              v8[5] = v58;
              if (v56 > v60)
              {
                v62 = *v8;
                *v8 = v57;
                v8[1] = v56;
                v8[2] = v62;
                v8[3] = v60;
              }
            }
          }
        }
        return result;
      default:
        if (v9 <= 383)
        {
          v63 = v8 + 2;
          v65 = v8 == a2 || v63 == a2;
          if ((a4 & 1) != 0)
          {
            if (!v65)
            {
              v66 = 0;
              v67 = v8;
              do
              {
                v68 = v67[3];
                v69 = v67[1];
                v67 = v63;
                if (v68 > v69)
                {
                  v70 = *v63;
                  v71 = v66;
                  while (1)
                  {
                    v72 = (char *)v8 + v71;
                    v73 = *(uint64_t *)((char *)v8 + v71 + 8);
                    *((_QWORD *)v72 + 2) = *(uint64_t *)((char *)v8 + v71);
                    *((_QWORD *)v72 + 3) = v73;
                    if (!v71)
                      break;
                    v71 -= 16;
                    if (v68 <= *((_QWORD *)v72 - 1))
                    {
                      v74 = (uint64_t *)((char *)v8 + v71 + 16);
                      goto LABEL_80;
                    }
                  }
                  v74 = v8;
LABEL_80:
                  *v74 = v70;
                  v74[1] = v68;
                }
                v63 = v67 + 2;
                v66 += 16;
              }
              while (v67 + 2 != a2);
            }
          }
          else if (!v65)
          {
            v103 = v8 + 3;
            do
            {
              v104 = v7[3];
              v105 = v7[1];
              v7 = v63;
              if (v104 > v105)
              {
                v106 = *v63;
                v107 = v103;
                do
                {
                  v108 = v107;
                  v109 = *(v107 - 4);
                  *(v107 - 1) = *(v107 - 3);
                  v110 = *(v107 - 2);
                  v107 -= 2;
                  *v108 = v110;
                }
                while (v104 > v109);
                *(v107 - 1) = v106;
                *v107 = v104;
              }
              v63 = v7 + 2;
              v103 += 2;
            }
            while (v7 + 2 != a2);
          }
          return result;
        }
        if (!a3)
        {
          if (v8 != a2)
          {
            v75 = (unint64_t)(v10 - 2) >> 1;
            v76 = v75;
            do
            {
              v77 = v76;
              if (v75 >= v76)
              {
                v78 = (2 * v76) | 1;
                v79 = &v8[2 * v78];
                if (2 * v77 + 2 < v10)
                {
                  v80 = v79[1] > (unint64_t)v79[3];
                  v79 += 2 * v80;
                  if (v80)
                    v78 = 2 * v77 + 2;
                }
                v81 = v79[1];
                v82 = v8[2 * v77 + 1];
                if (v81 <= v82)
                {
                  v83 = &v8[2 * v77];
                  v84 = *v83;
                  do
                  {
                    v85 = v83;
                    v83 = v79;
                    *v85 = *v79;
                    v85[1] = v81;
                    if (v75 < v78)
                      break;
                    v86 = (2 * v78) | 1;
                    v79 = &v8[2 * v86];
                    v87 = 2 * v78 + 2;
                    if (v87 < v10)
                    {
                      result = (uint64_t *)v79[3];
                      v80 = v79[1] > (unint64_t)result;
                      v79 += 2 * v80;
                      if (v80)
                        v86 = v87;
                    }
                    v81 = v79[1];
                    v78 = v86;
                  }
                  while (v81 <= v82);
                  *v83 = v84;
                  v83[1] = v82;
                }
              }
              v76 = v77 - 1;
            }
            while (v77);
            do
            {
              v88 = 0;
              v89 = *v8;
              v90 = v8[1];
              v91 = v8;
              do
              {
                v92 = &v91[2 * v88 + 2];
                v93 = (2 * v88) | 1;
                v94 = 2 * v88 + 2;
                if (v94 < v10)
                {
                  v80 = v92[1] > (unint64_t)v92[3];
                  v92 += 2 * v80;
                  if (v80)
                    v93 = v94;
                }
                v95 = v92[1];
                *v91 = *v92;
                v91[1] = v95;
                v91 = v92;
                v88 = v93;
              }
              while (v93 <= (uint64_t)((unint64_t)(v10 - 2) >> 1));
              if (v92 == a2 - 2)
              {
                *v92 = v89;
                v92[1] = v90;
              }
              else
              {
                v96 = *(a2 - 1);
                *v92 = *(a2 - 2);
                v92[1] = v96;
                *(a2 - 2) = v89;
                *(a2 - 1) = v90;
                v97 = (char *)v92 - (char *)v8 + 16;
                if (v97 >= 17)
                {
                  v98 = (((unint64_t)v97 >> 4) - 2) >> 1;
                  v99 = v8[2 * v98 + 1];
                  v100 = v92[1];
                  if (v99 > v100)
                  {
                    v101 = *v92;
                    do
                    {
                      v102 = v92;
                      v92 = &v8[2 * v98];
                      *v102 = *v92;
                      v102[1] = v99;
                      if (!v98)
                        break;
                      v98 = (v98 - 1) >> 1;
                      v99 = v8[2 * v98 + 1];
                    }
                    while (v99 > v100);
                    *v92 = v101;
                    v92[1] = v100;
                  }
                }
              }
              a2 -= 2;
              v80 = v10-- <= 2;
            }
            while (!v80);
          }
          return result;
        }
        v11 = (unint64_t)v10 >> 1;
        v12 = &v8[2 * ((unint64_t)v10 >> 1)];
        if ((unint64_t)v9 < 0x801)
        {
          result = sub_1C559C6A8(&v7[2 * ((unint64_t)v10 >> 1)], v7, a2 - 2);
        }
        else
        {
          sub_1C559C6A8(v7, &v7[2 * ((unint64_t)v10 >> 1)], a2 - 2);
          sub_1C559C6A8(v7 + 2, v12 - 2, a2 - 4);
          sub_1C559C6A8(v7 + 4, &v7[2 * v11 + 2], a2 - 6);
          result = sub_1C559C6A8(v12 - 2, v12, &v7[2 * v11 + 2]);
          v13 = *v7;
          v14 = v7[1];
          v15 = v12[1];
          *v7 = *v12;
          v7[1] = v15;
          *v12 = v13;
          v12[1] = v14;
        }
        --a3;
        if ((a4 & 1) == 0)
        {
          v16 = v7[1];
          if (*(v7 - 1) > v16)
            goto LABEL_12;
          if (v16 <= *(a2 - 1))
          {
            v36 = v7 + 2;
            do
            {
              v8 = v36;
              if (v36 >= a2)
                break;
              v37 = v36[1];
              v36 += 2;
            }
            while (v16 <= v37);
          }
          else
          {
            v34 = v7;
            do
            {
              v8 = v34 + 2;
              v35 = v34[3];
              v34 += 2;
            }
            while (v16 <= v35);
          }
          v38 = a2;
          if (v8 < a2)
          {
            v39 = a2;
            do
            {
              v38 = v39 - 2;
              v40 = *(v39 - 1);
              v39 -= 2;
            }
            while (v16 > v40);
          }
          v41 = *v7;
          while (v8 < v38)
          {
            v42 = *v8;
            v43 = v8[1];
            v44 = v38[1];
            *v8 = *v38;
            v8[1] = v44;
            *v38 = v42;
            v38[1] = v43;
            do
            {
              v45 = v8[3];
              v8 += 2;
            }
            while (v16 <= v45);
            do
            {
              v46 = *(v38 - 1);
              v38 -= 2;
            }
            while (v16 > v46);
          }
          if (v8 - 2 != v7)
          {
            v47 = *(v8 - 1);
            *v7 = *(v8 - 2);
            v7[1] = v47;
          }
          a4 = 0;
          *(v8 - 2) = v41;
          *(v8 - 1) = v16;
          continue;
        }
        v16 = v7[1];
LABEL_12:
        v17 = 0;
        v18 = *v7;
        do
        {
          v19 = v7[v17 + 3];
          v17 += 2;
        }
        while (v19 > v16);
        v20 = &v7[v17];
        v21 = a2;
        if (v17 == 2)
        {
          v24 = a2;
          while (v20 < v24)
          {
            v22 = v24 - 2;
            v25 = *(v24 - 1);
            v24 -= 2;
            if (v25 > v16)
              goto LABEL_22;
          }
          v22 = v24;
        }
        else
        {
          do
          {
            v22 = v21 - 2;
            v23 = *(v21 - 1);
            v21 -= 2;
          }
          while (v23 <= v16);
        }
LABEL_22:
        v8 = v20;
        if (v20 < v22)
        {
          v26 = v22;
          do
          {
            v27 = *v8;
            v28 = v8[1];
            v29 = v26[1];
            *v8 = *v26;
            v8[1] = v29;
            *v26 = v27;
            v26[1] = v28;
            do
            {
              v30 = v8[3];
              v8 += 2;
            }
            while (v30 > v16);
            do
            {
              v31 = *(v26 - 1);
              v26 -= 2;
            }
            while (v31 <= v16);
          }
          while (v8 < v26);
        }
        if (v8 - 2 != v7)
        {
          v32 = *(v8 - 1);
          *v7 = *(v8 - 2);
          v7[1] = v32;
        }
        *(v8 - 2) = v18;
        *(v8 - 1) = v16;
        if (v20 < v22)
        {
LABEL_33:
          result = (uint64_t *)sub_1C559BFCC(v7, v8 - 2, a3, a4 & 1);
          a4 = 0;
          continue;
        }
        v33 = sub_1C559C73C(v7, v8 - 2);
        result = (uint64_t *)sub_1C559C73C(v8, a2);
        if (!(_DWORD)result)
        {
          if (v33)
            continue;
          goto LABEL_33;
        }
        a2 = v8 - 2;
        if (!v33)
          goto LABEL_2;
        return result;
    }
  }
}

uint64_t *sub_1C559C6A8(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  unint64_t v3;
  unint64_t v4;
  unint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;

  v3 = a2[1];
  v4 = result[1];
  v5 = a3[1];
  if (v3 <= v4)
  {
    if (v5 > v3)
    {
      v7 = *a3;
      a2[1] = v5;
      a3[1] = v3;
      v9 = *a2;
      v8 = a2[1];
      *a2 = v7;
      *a3 = v9;
      v10 = result[1];
      if (v8 > v10)
      {
        v11 = *result;
        *result = *a2;
        result[1] = v8;
        *a2 = v11;
        a2[1] = v10;
      }
    }
  }
  else
  {
    v6 = *result;
    if (v5 <= v3)
    {
      *result = *a2;
      result[1] = v3;
      *a2 = v6;
      a2[1] = v4;
      v12 = a3[1];
      if (v12 <= v4)
        return result;
      *a2 = *a3;
      a2[1] = v12;
    }
    else
    {
      *result = *a3;
      result[1] = v5;
    }
    *a3 = v6;
    a3[1] = v4;
  }
  return result;
}

BOOL sub_1C559C73C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4;
  _BOOL8 result;
  unint64_t v6;
  unint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t *v10;
  uint64_t v11;
  int v12;
  unint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  unint64_t v19;
  unint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unint64_t v24;
  uint64_t v25;
  unint64_t v26;
  uint64_t v27;
  unint64_t v28;
  uint64_t v29;
  uint64_t v30;

  v4 = ((char *)a2 - (char *)a1) >> 4;
  result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      v6 = *(a2 - 1);
      v7 = a1[1];
      if (v6 > v7)
      {
        v8 = *a1;
        *a1 = *(a2 - 2);
        a1[1] = v6;
        *(a2 - 2) = v8;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_1C559C6A8(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      sub_1C559C914(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      sub_1C559C914(a1, a1 + 2, a1 + 4, a1 + 6);
      v19 = *(a2 - 1);
      v20 = a1[7];
      if (v19 > v20)
      {
        v21 = *(a2 - 2);
        a1[7] = v19;
        *(a2 - 1) = v20;
        v23 = a1[5];
        v22 = a1[6];
        a1[6] = v21;
        *(a2 - 2) = v22;
        v24 = a1[7];
        if (v24 > v23)
        {
          v25 = a1[6];
          v26 = a1[3];
          v27 = a1[4];
          a1[4] = v25;
          a1[5] = v24;
          a1[6] = v27;
          a1[7] = v23;
          if (v24 > v26)
          {
            v28 = a1[1];
            v29 = a1[2];
            a1[2] = v25;
            a1[3] = v24;
            a1[4] = v29;
            a1[5] = v26;
            if (v24 > v28)
            {
              v30 = *a1;
              *a1 = v25;
              a1[1] = v24;
              a1[2] = v30;
              a1[3] = v28;
            }
          }
        }
      }
      return 1;
    default:
      v9 = a1 + 4;
      sub_1C559C6A8(a1, a1 + 2, a1 + 4);
      v10 = a1 + 6;
      if (a1 + 6 == a2)
        return 1;
      v11 = 0;
      v12 = 0;
      break;
  }
  while (1)
  {
    v13 = v10[1];
    if (v13 > v9[1])
    {
      v14 = *v10;
      v15 = v11;
      while (1)
      {
        v16 = (uint64_t *)((char *)a1 + v15);
        v17 = *(uint64_t *)((char *)a1 + v15 + 40);
        v16[6] = *(uint64_t *)((char *)a1 + v15 + 32);
        v16[7] = v17;
        if (v15 == -32)
          break;
        v15 -= 16;
        if (v13 <= v16[3])
        {
          v18 = (uint64_t *)((char *)a1 + v15 + 48);
          goto LABEL_13;
        }
      }
      v18 = a1;
LABEL_13:
      *v18 = v14;
      v18[1] = v13;
      if (++v12 == 8)
        return v10 + 2 == a2;
    }
    v9 = v10;
    v11 += 16;
    v10 += 2;
    if (v10 == a2)
      return 1;
  }
}

uint64_t *sub_1C559C914(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  uint64_t *result;
  unint64_t v9;
  unint64_t v10;
  uint64_t v11;
  unint64_t v12;
  uint64_t v13;
  unint64_t v14;
  uint64_t v15;
  unint64_t v16;
  uint64_t v17;
  unint64_t v18;
  uint64_t v19;

  result = sub_1C559C6A8(a1, a2, a3);
  v9 = a4[1];
  v10 = a3[1];
  if (v9 > v10)
  {
    v11 = *a4;
    a3[1] = v9;
    a4[1] = v10;
    v13 = *a3;
    v12 = a3[1];
    *a3 = v11;
    *a4 = v13;
    v14 = a2[1];
    if (v12 > v14)
    {
      v15 = *a3;
      a2[1] = v12;
      a3[1] = v14;
      v17 = *a2;
      v16 = a2[1];
      *a2 = v15;
      *a3 = v17;
      v18 = a1[1];
      if (v16 > v18)
      {
        v19 = *a1;
        *a1 = *a2;
        a1[1] = v16;
        *a2 = v19;
        a2[1] = v18;
      }
    }
  }
  return result;
}

uint64_t sub_1C559C9B0(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeDominatorTreeWrapperPassPass(a1);
  llvm::initializeFunctionGroupInfoWrapperPassPass(a1);
  llvm::initializePostDominatorTreeWrapperPassPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Optimize GPU atomics";
  *(_QWORD *)(v2 + 8) = 20;
  *(_QWORD *)(v2 + 16) = "atomic-optimize";
  *(_QWORD *)(v2 + 24) = 15;
  *(_QWORD *)(v2 + 32) = &unk_1ED806658;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C559CCE8;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C559CA54(uint64_t a1, uint64_t a2, char a3, char a4)
{
  uint64_t v7;
  char v8;
  unint64_t v10;
  unint64_t v12;
  _QWORD *v13;
  _QWORD v14[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED806658;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E816FEC0;
  v7 = *(_QWORD *)(a2 + 24);
  if (v7)
  {
    if (v7 == a2)
    {
      *(_QWORD *)(a1 + 56) = a1 + 32;
      (*(void (**)(_QWORD, uint64_t))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24), a1 + 32);
    }
    else
    {
      *(_QWORD *)(a1 + 56) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v7 + 16))(v7);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 56) = 0;
  }
  if (byte_1ED8067B0)
    v8 = 1;
  else
    v8 = a3;
  *(_BYTE *)(a1 + 64) = v8;
  *(_BYTE *)(a1 + 65) = a4;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v12 = qword_1ED830BC0[0];
  v10 = atomic_load(&qword_1ED806660);
  if (v10 != -1)
  {
    v14[0] = sub_1C559C9B0;
    v14[1] = &v12;
    v13 = v14;
    std::__call_once(&qword_1ED806660, &v13, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C559CB8C(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeFunctionGroupInfoWrapperPassPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "GPU atomics helper thread workaround";
  *(_QWORD *)(v2 + 8) = 36;
  *(_QWORD *)(v2 + 16) = "atomic-helper-wa";
  *(_QWORD *)(v2 + 24) = 16;
  *(_QWORD *)(v2 + 32) = &unk_1ED806659;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C55A02A0;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C559CC20(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED806659;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E816FF60;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED806668);
  if (v3 != -1)
  {
    v7[0] = sub_1C559CB8C;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED806668, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C559CCE8()
{
  uint64_t v0;
  void (**v1)(void);
  _QWORD v3[3];
  _QWORD *v4;
  uint64_t v5;

  v5 = *MEMORY[0x1E0C80C00];
  v0 = operator new();
  v3[0] = &unk_1E7F9F768;
  v3[1] = sub_1C559CDB4;
  v4 = v3;
  sub_1C559CA54(v0, (uint64_t)v3, 0, 1);
  if (v4 == v3)
  {
    v1 = (void (**)(void))(v3[0] + 32);
    goto LABEL_5;
  }
  if (v4)
  {
    v1 = (void (**)(void))(*v4 + 40);
LABEL_5:
    (*v1)();
  }
  return v0;
}

uint64_t sub_1C559CDB4()
{
  return byte_1ED8066F0;
}

void sub_1C559CDC0(llvm::Pass *this)
{
  char *v2;
  char *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E816FEC0;
  v2 = (char *)this + 32;
  v3 = (char *)*((_QWORD *)this + 7);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
    goto LABEL_5;
  }
  if (v3)
  {
    v4 = 5;
LABEL_5:
    (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  }
  llvm::Pass::~Pass(this);
}

void sub_1C559CE1C(llvm::Pass *this)
{
  char *v2;
  char *v3;
  uint64_t v4;

  *(_QWORD *)this = &off_1E816FEC0;
  v2 = (char *)this + 32;
  v3 = (char *)*((_QWORD *)this + 7);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
    {
LABEL_6:
      llvm::Pass::~Pass(this);
      JUMPOUT(0x1CAA32FC0);
    }
    v4 = 5;
  }
  (*(void (**)(void))(*(_QWORD *)v3 + 8 * v4))();
  goto LABEL_6;
}

const char *sub_1C559CE8C()
{
  return "GPU Atomic Optimize pass";
}

void *sub_1C559CE9C(uint64_t a1, uint64_t a2)
{
  sub_1C4771E64(a2, a2 + 112, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  return sub_1C4771E64(a2, a2, (uint64_t)&llvm::PostDominatorTreeWrapperPass::ID);
}

uint64_t sub_1C559CF04(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void **v5;
  void *v6;
  uint64_t v7;
  void **v8;
  void *v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  int v13;
  uint64_t v14;
  const llvm::DataLayout *v15;
  void **v16;
  void *v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t NamedMetadata;
  _QWORD *v21;
  uint64_t v22;
  uint64_t v23;
  BOOL v24;
  int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  std::string *v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v33;
  uint64_t v34;
  uint64_t v36;
  uint64_t v37;
  unsigned int v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  int v44;
  uint64_t v45;
  int v46;
  int v47;
  int v48;
  BOOL v49;
  BOOL v50;
  _BOOL4 v51;
  uint64_t v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t *v57;
  uint64_t v58;
  int v59;
  int v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  unsigned int v65;
  uint64_t *v66;
  uint64_t v67;
  int v68;
  int v69;
  uint64_t v70;
  BOOL v71;
  unsigned int v73;
  uint64_t v74;
  void (**v75)(void);
  uint64_t v76;
  int v77;
  uint64_t *v78;
  uint64_t v79;
  uint64_t v80;
  _QWORD *v81;
  _BYTE *v82;
  BOOL v83;
  _QWORD *v84;
  _BYTE *v85;
  char v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  _BYTE *v90;
  uint64_t *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  _DWORD *v95;
  uint64_t v96;
  _BYTE *v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t v100;
  int v101;
  uint64_t v102;
  int v103;
  unsigned int v104;
  _QWORD *v105;
  uint64_t v106;
  char *v107;
  int v108;
  int v109;
  int v110;
  _QWORD **v111;
  _BYTE *v112;
  uint64_t Declaration;
  uint64_t v114;
  uint64_t ***v115;
  unsigned int v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t ****v121;
  uint64_t ***v122;
  int v123;
  int v124;
  uint64_t ***v125;
  uint64_t **v126;
  char *v127;
  uint64_t **v128;
  _QWORD *v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  uint64_t ****v134;
  uint64_t ***v135;
  int v136;
  int v137;
  uint64_t ***v138;
  uint64_t **v139;
  char *v140;
  uint64_t **v141;
  uint64_t **v142;
  unsigned int v143;
  _QWORD *v144;
  uint64_t *v145;
  uint64_t v146;
  uint64_t ***v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t **v150;
  uint64_t **v151;
  const llvm::APInt *v152;
  uint64_t v153;
  uint64_t *v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  char v158;
  char v159;
  char *v160;
  char *v161;
  llvm::Value *v162;
  uint64_t v163;
  _QWORD *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  uint64_t **v168;
  llvm::ConstantInt *v169;
  char *v170;
  llvm::ValueHandleBase *v171;
  llvm::Value *v172;
  _DWORD *v173;
  _DWORD *v174;
  uint64_t v175;
  llvm::Value *v176;
  _QWORD *v177;
  char *v178;
  char *v179;
  unsigned __int8 **v180;
  int v181;
  unsigned __int8 *v182;
  unsigned __int8 *v183;
  unsigned __int8 *v184;
  uint64_t v185;
  _QWORD *v186;
  uint64_t v187;
  void *v188;
  uint64_t v189;
  BOOL v190;
  uint64_t v191;
  void *v192;
  uint64_t v193;
  char *v194;
  char *v195;
  llvm::Value *v196;
  _QWORD *v197;
  _QWORD *v198;
  uint64_t v199;
  char *v200;
  char *v201;
  unsigned __int8 **v202;
  int v203;
  unsigned __int8 *v204;
  unsigned __int8 *v205;
  unsigned __int8 *v206;
  _QWORD *v207;
  _QWORD *v208;
  uint64_t v209;
  _QWORD *v210;
  unsigned int v211;
  uint64_t v212;
  _QWORD *v213;
  uint64_t **v214;
  _QWORD *v215;
  uint64_t v216;
  uint64_t v217;
  unsigned __int8 *v218;
  uint64_t v219;
  uint64_t v220;
  int v221;
  uint64_t v222;
  unsigned __int8 *v223;
  uint64_t **v224;
  uint64_t v225;
  uint64_t **v226;
  unint64_t v227;
  unsigned __int8 *v228;
  uint64_t v229;
  uint64_t v230;
  unint64_t v231;
  uint64_t v232;
  llvm::ValueSymbolTable *v233;
  char *v234;
  char *v235;
  unsigned __int8 **v236;
  int v237;
  unsigned __int8 *v238;
  unsigned __int8 *v239;
  unsigned __int8 **v240;
  unsigned __int8 *v241;
  void *v242;
  unint64_t v243;
  llvm::Value *Select;
  uint64_t v245;
  uint64_t v246;
  uint64_t v247;
  char v248;
  char v249;
  char *v250;
  char *v251;
  llvm::Value *v252;
  uint64_t v253;
  _QWORD *v254;
  uint64_t v255;
  const llvm::APInt *v256;
  llvm::ConstantInt *v257;
  llvm::ValueHandleBase *v258;
  uint64_t v259;
  llvm::Type *v260;
  llvm::UndefValue *v261;
  uint64_t v262;
  uint64_t v263;
  uint64_t **v264;
  char *v265;
  char *v266;
  unsigned __int8 **v267;
  int v268;
  unsigned __int8 *v269;
  unsigned __int8 **v270;
  unsigned __int8 *v271;
  void *v272;
  void *v273;
  _QWORD *v274;
  uint64_t v275;
  _QWORD *v276;
  int v277;
  BOOL v278;
  unsigned int v279;
  uint64_t v280;
  void *v281;
  _QWORD *v282;
  void *v283;
  uint64_t v284;
  void *v285;
  llvm::PointerType *v286;
  int v287;
  char *v288;
  int v289;
  int v290;
  _BOOL4 v291;
  int v292;
  uint64_t v293;
  char *v294;
  unsigned __int8 **v295;
  unsigned __int8 **v296;
  unsigned __int8 **v297;
  int v298;
  uint64_t v299;
  uint64_t v300;
  uint64_t v301;
  uint64_t *v302;
  _BOOL4 v303;
  uint64_t v304;
  uint64_t ***v305;
  __int16 v306;
  char *v307;
  _QWORD *v308;
  uint64_t *v309;
  uint64_t v310;
  uint64_t v311;
  int v312;
  uint64_t v313;
  llvm::Type *v314;
  llvm::Type *v315;
  uint64_t *v316;
  _QWORD *v317;
  uint64_t *v318;
  char *v319;
  uint64_t v320;
  char *v321;
  unsigned __int8 **v322;
  unsigned __int8 **v323;
  unsigned __int8 **v324;
  uint64_t *v325;
  llvm::BasicBlock *v326;
  uint64_t *v327;
  unsigned __int8 *v328;
  _BYTE *v329;
  _BYTE *v330;
  uint64_t v331;
  int v332;
  _BYTE v333[64];
  std::string v334;
  unsigned __int8 *v335;
  void *v336;
  unsigned int v337;
  uint64_t v338;
  __int16 v339;
  void *v340;
  unsigned int v341;
  uint64_t v342;
  __int16 v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t v346;
  void *v347;
  uint64_t v348;
  _BYTE v349[16];
  __int16 v350;
  uint64_t **v351;
  _QWORD **v352;
  uint64_t v353;
  void **v354;
  void **v355;
  uint64_t v356;
  int v357;
  __int16 v358;
  char v359;
  uint64_t v360;
  uint64_t v361;
  void *v362;
  void *v363;
  void *v364;
  uint64_t **v365;
  const char *v366;
  __int16 v367;
  uint64_t v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  void *v372;
  uint64_t v373;
  _BYTE v374[64];
  _QWORD v375[3];
  _QWORD *v376;
  void *v377[2];
  uint64_t v378;
  __int16 v379;
  void *v380;
  void *v381;
  _BYTE v382[4];
  _BYTE v383[276];
  void *v384;
  void *v385;
  void *v386;
  void *v387;
  uint64_t v388;
  _BYTE v389[24];
  _BYTE *v390;
  void *__dst;
  unint64_t v392;
  _BYTE v393[128];
  _QWORD v394[65];
  uint64_t v395[4];
  __int16 v396;
  uint64_t v397;

  v397 = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a2 + 40);
  v5 = **(void ****)(a1 + 8);
  do
  {
    v6 = *v5;
    v5 += 2;
  }
  while (v6 != &llvm::DominatorTreeWrapperPass::ID);
  v7 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v5 - 1) + 96))(*(v5 - 1), &llvm::DominatorTreeWrapperPass::ID);
  v8 = **(void ****)(a1 + 8);
  do
  {
    v9 = *v8;
    v8 += 2;
  }
  while (v9 != &llvm::PostDominatorTreeWrapperPass::ID);
  v10 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v8 - 1) + 96))(*(v8 - 1), &llvm::PostDominatorTreeWrapperPass::ID);
  v394[0] = 1;
  for (i = 1; i != 65; i += 4)
    v394[i] = -4096;
  sub_1C5EA5D84(v4, (uint64_t)v394);
  v12 = *(_QWORD *)(a2 + 40);
  if (*(char *)(v12 + 239) < 0)
    sub_1C47EBC30(&v334, *(void **)(v12 + 216), *(_QWORD *)(v12 + 224));
  else
    v334 = *(std::string *)(v12 + 216);
  if (!std::string::compare(&v334, 0, 4uLL, "agx1"))
  {
    v13 = 27;
  }
  else if (!std::string::compare(&v334, 0, 4uLL, "agx2"))
  {
    v13 = 28;
  }
  else if (!std::string::compare(&v334, 0, 4uLL, "agx3"))
  {
    v13 = 29;
  }
  else
  {
    v13 = 0;
  }
  v14 = v7 + 32;
  v15 = (const llvm::DataLayout *)(v4 + 272);
  if (SHIBYTE(v334.__r_.__value_.__r.__words[2]) < 0)
    operator delete(v334.__r_.__value_.__l.__data_);
  v16 = **(void ****)(a1 + 8);
  do
  {
    v17 = *v16;
    v16 += 2;
  }
  while (v17 != &llvm::FunctionGroupInfoWrapperPass::ID);
  v18 = *(_QWORD *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v16 - 1) + 96))(*(v16 - 1), &llvm::FunctionGroupInfoWrapperPass::ID)+ 32);
  (*(void (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 16))(v18, v4);
  v19 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v18 + 24))(v18, a2);
  if (v13 != 27)
  {
    v25 = (*(unsigned __int16 *)(a2 + 18) >> 4) & 0x3FF;
    if ((v25 - 103) < 2)
      goto LABEL_34;
    if (v25 == 106 || v25 == 102)
    {
      v26 = *(_QWORD *)(a2 + 40);
      v377[0] = "agx.vertex_amp_mode";
      v379 = 259;
      if (llvm::Module::getNamedMetadata(v26, (uint64_t)v377))
        goto LABEL_34;
      v76 = sub_1C5EA9FF0(*(_QWORD *)(a2 + 40), 2710, 0, 0, v27, v28, v29, v30);
      if (v76)
      {
        if (*(_QWORD *)(v76 + 8))
          goto LABEL_34;
      }
    }
  }
  v377[0] = "air.uniform_atomics_mode";
  v379 = 259;
  NamedMetadata = llvm::Module::getNamedMetadata(v4, (uint64_t)v377);
  if (!NamedMetadata)
    goto LABEL_34;
  v21 = *(_QWORD **)(*(_QWORD *)(***(_QWORD ***)(NamedMetadata + 48)
                               - 8 * *(unsigned int *)(***(_QWORD ***)(NamedMetadata + 48) + 8))
                   + 8);
  if (*v21 == 15)
  {
    v312 = 0;
    v31 = 0;
    v33 = v21[3];
    v34 = *(_QWORD *)((char *)v21 + 31);
    if (v33 != 0x2D63696D616E7964 || v34 != 0x64656C62616E652DLL)
      goto LABEL_35;
  }
  else
  {
    if (*v21 != 14
      || ((v22 = v21[3], v23 = *(_QWORD *)((char *)v21 + 30), v22 == 0x652D636974617473)
        ? (v24 = v23 == 0x64656C62616E652DLL)
        : (v24 = 0),
          !v24))
    {
LABEL_34:
      v31 = 0;
      goto LABEL_35;
    }
    v312 = 1;
  }
  __dst = v393;
  v392 = 0x1000000000;
  v36 = a2 + 72;
  v37 = *(_QWORD *)(a2 + 80);
  if (v37 == a2 + 72)
  {
    v31 = 0;
  }
  else
  {
    v311 = v19;
    v298 = v13;
    v325 = (uint64_t *)v4;
    v304 = a1;
    v38 = 0;
    do
    {
      v39 = v37 - 24;
      if (!v37)
        v39 = 0;
      v40 = v39 + 40;
      v41 = *(_QWORD *)(v39 + 48);
      while (v41 != v40)
      {
        v42 = v41;
        v41 = *(_QWORD *)(v41 + 8);
        v43 = v42 - 24;
        if (!v42)
          v43 = 0;
        v44 = *(unsigned __int8 *)(v43 + 16);
        if (v44 == 65)
          v45 = v43;
        else
          v45 = 0;
        if (v42)
        {
          if (v44 == 65)
          {
            v46 = *(_WORD *)(v45 + 18) >> 4;
            if ((v46 - 5) < 8 || (v46 - 1) <= 2)
            {
              v47 = *(_DWORD *)(**(_QWORD **)(v45 - 32) + 8);
              v48 = *(_DWORD *)(**(_QWORD **)(v45 - 32) + 8) >> 8;
              v49 = v48 == 16 || v48 == 32;
              v50 = v49 && v47 == 13;
              v51 = v50;
              if (v47 == 2 || v51)
              {
                v53 = *(_QWORD *)(v10 + 80);
                v54 = *(unsigned int *)(v10 + 96);
                if ((_DWORD)v54)
                {
                  v55 = *(_QWORD *)(v45 + 40);
                  LODWORD(v56) = ((v55 >> 4) ^ (v55 >> 9)) & (v54 - 1);
                  v57 = (uint64_t *)(v53 + 16 * v56);
                  v58 = *v57;
                  if (v55 == *v57)
                    goto LABEL_78;
                  v59 = 1;
                  while (v58 != -4096)
                  {
                    v60 = v56 + v59++;
                    v56 = v60 & (v54 - 1);
                    v58 = *(_QWORD *)(v53 + 16 * v56);
                    if (v55 == v58)
                    {
                      v57 = (uint64_t *)(v53 + 16 * v56);
                      goto LABEL_78;
                    }
                  }
                }
                v57 = (uint64_t *)(v53 + 16 * v54);
LABEL_78:
                v61 = (uint64_t *)(v53 + 16 * v54);
                if (v57 == v61)
                  v62 = 0;
                else
                  v62 = v57[1];
                v63 = *(_QWORD *)(a2 + 80);
                if (v63)
                  v64 = v63 - 24;
                else
                  v64 = 0;
                if ((_DWORD)v54)
                {
                  v65 = v54 - 1;
                  LODWORD(v54) = ((v64 >> 4) ^ (v64 >> 9)) & (v54 - 1);
                  v66 = (uint64_t *)(v53 + 16 * v54);
                  v67 = *v66;
                  if (v64 == *v66)
                  {
LABEL_90:
                    if (v66 != v61)
                    {
                      v70 = v66[1];
                      v71 = v70 == v62 || v70 == 0;
                      if (!v71
                        && v62 != 0
                        && *(_QWORD *)(v70 + 8) != v62
                        && *(_QWORD *)(v62 + 8) != v70
                        && *(_DWORD *)(v62 + 16) < *(_DWORD *)(v70 + 16)
                        && !*(_BYTE *)(v10 + 120))
                      {
                        v73 = *(_DWORD *)(v10 + 124) + 1;
                        *(_DWORD *)(v10 + 124) = v73;
                        if (v73 >= 0x21)
                        {
                          v299 = v36;
                          llvm::DominatorTreeBase<llvm::BasicBlock,true>::updateDFSNumbers(v10 + 32);
                          v36 = v299;
                          v38 = v392;
                        }
                      }
                    }
                  }
                  else
                  {
                    v68 = 1;
                    while (v67 != -4096)
                    {
                      v69 = v54 + v68++;
                      v54 = v69 & v65;
                      v67 = *(_QWORD *)(v53 + 16 * v54);
                      if (v64 == v67)
                      {
                        v66 = (uint64_t *)(v53 + 16 * v54);
                        goto LABEL_90;
                      }
                    }
                  }
                }
                if (v38 >= HIDWORD(v392))
                {
                  v300 = v36;
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, (uint64_t)v393, v38 + 1, 8);
                  v36 = v300;
                  v38 = v392;
                }
                *((_QWORD *)__dst + v38) = v45;
                v38 = v392 + 1;
                LODWORD(v392) = v392 + 1;
              }
            }
          }
        }
      }
      v37 = *(_QWORD *)(v37 + 8);
    }
    while (v37 != v36);
    if (v38)
    {
      v301 = v36;
      v329 = v333;
      v330 = v333;
      v331 = 8;
      v332 = 0;
      sub_1C5EA6F60((uint64_t)v325, (llvm::SmallPtrSetImplBase *)&v329);
      v375[0] = &off_1E8170000;
      v375[1] = sub_1C5EACEE8;
      v376 = v375;
      llvm::DivergenceTracker::DivergenceTracker((uint64_t)v377, (llvm::Function *)a2, v14, v10 + 32, v15, (uint64_t)v394, (uint64_t)v375, 0, (uint64_t)&v329);
      if (v376 == v375)
      {
        v75 = (void (**)(void))(v375[0] + 32);
        v74 = v304;
LABEL_118:
        (*v75)();
      }
      else
      {
        v74 = v304;
        if (v376)
        {
          v75 = (void (**)(void))(*v376 + 40);
          goto LABEL_118;
        }
      }
      v372 = v374;
      v373 = 0x800000000;
      if (!(_DWORD)v392)
      {
        v31 = 0;
        goto LABEL_388;
      }
      v77 = *(unsigned __int8 *)(v74 + 64);
      v78 = (uint64_t *)__dst;
      v79 = 8 * v392;
      do
      {
        v80 = *v78;
        v81 = sub_1C477672C((uint64_t)&v380, *(_QWORD *)(*v78 - 64));
        if (v381 == v380)
          v82 = v383;
        else
          v82 = v382;
        v83 = v81 != (_QWORD *)((char *)v381 + 8 * *(unsigned int *)v82);
        v84 = sub_1C477672C((uint64_t)&v380, *(_QWORD *)(v80 - 32));
        if (v381 == v380)
          v85 = v383;
        else
          v85 = v382;
        v86 = v84 != (_QWORD *)((char *)v381 + 8 * *(unsigned int *)v85) || v83;
        if (v77)
          v86 = v83;
        if ((v86 & 1) == 0)
        {
          v87 = *v78;
          v88 = v373;
          if (v373 >= (unint64_t)HIDWORD(v373))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v372, (uint64_t)v374, v373 + 1, 8);
            v88 = v373;
          }
          *((_QWORD *)v372 + v88) = v87;
          LODWORD(v373) = v373 + 1;
        }
        ++v78;
        v79 -= 8;
      }
      while (v79);
      v89 = v373;
      v31 = (_DWORD)v373 != 0;
      v90 = v372;
      if (!(_DWORD)v373)
      {
LABEL_386:
        if (v90 != v374)
          free(v90);
LABEL_388:
        v274 = v390;
        if (v390 == v389)
        {
          v275 = 4;
          v274 = v389;
        }
        else
        {
          if (!v390)
          {
LABEL_393:
            if (v387 != &v388)
              free(v387);
            if (v386 != v385)
              free(v386);
            if (v384 != *(void **)&v383[268])
              free(v384);
            if (v381 != v380)
              free(v381);
            if (v377[0] != &v378)
              free(v377[0]);
            if (v330 != v329)
              free(v330);
            goto LABEL_405;
          }
          v275 = 5;
        }
        (*(void (**)(void))(*v274 + 8 * v275))();
        goto LABEL_393;
      }
      v91 = v325;
      v303 = v373 != 0;
      if (v372 != v374)
      {
        if (__dst != v393)
        {
          free(__dst);
          v90 = v372;
          v89 = v373;
        }
        __dst = v90;
        v392 = __PAIR64__(HIDWORD(v373), v89);
        v372 = v374;
        HIDWORD(v373) = 0;
LABEL_145:
        v93 = v304;
LABEL_146:
        LODWORD(v373) = 0;
        v286 = (llvm::PointerType *)(***(_QWORD ***)a2 + 1960);
        if ((v312 & 1) == 0)
        {
          v94 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 176))(v19, 17);
          if (!v94)
            goto LABEL_148;
          if (v94 != 1)
            goto LABEL_427;
          (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v19 + 128))(&v364, v19, 17);
          v280 = *(_QWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v364 + 32))(v364);
          v281 = v364;
          v364 = 0;
          if (v281)
            (*(void (**)(void *))(*(_QWORD *)v281 + 8))(v281);
          if (!v280)
          {
LABEL_148:
            v95 = operator new(0x78uLL);
            v95[13] = v95[13] & 0x38000000 | 1;
            v96 = (uint64_t)(v95 + 8);
            *(_QWORD *)v95 = 0;
            *((_QWORD *)v95 + 1) = 0;
            *((_QWORD *)v95 + 2) = 0;
            *((_QWORD *)v95 + 3) = v95 + 8;
            v364 = "skip_uniform_atomics";
            v367 = 259;
            llvm::GlobalVariable::GlobalVariable((uint64_t)(v95 + 8), (uint64_t)v91, v286, 1, 0, 0, (uint64_t)&v364, 0, 0, 0x100000040, 0);
            v97 = llvm::UniqueStringSaver::save(***((_QWORD ***)v95 + 4) + 2136, "constant_driver", 0xFuLL);
            v99 = v98;
            v100 = ***((_QWORD ***)v95 + 4);
            v364 = v95 + 8;
            v101 = *(_DWORD *)(v100 + 2520);
            if (v101)
            {
              v102 = *(_QWORD *)(v100 + 2504);
              v103 = v101 - 1;
              v104 = v103 & ((v96 >> 4) ^ (v96 >> 9));
              v105 = (_QWORD *)(v102 + 24 * v104);
              v106 = *v105;
              if (*v105 == v96)
              {
LABEL_150:
                v105[1] = v97;
                v105[2] = v99;
                v95[16] = v95[16] & 0xFFBFFFFF | ((v99 != 0) << 22);
                llvm::FunctionGroup::setGlobalResource(v19, 17, v96);
                goto LABEL_151;
              }
              v276 = 0;
              v277 = 1;
              while (v106 != -4096)
              {
                if (v276)
                  v278 = 0;
                else
                  v278 = v106 == -8192;
                if (v278)
                  v276 = v105;
                v279 = v104 + v277++;
                v104 = v279 & v103;
                v105 = (_QWORD *)(v102 + 24 * v104);
                v106 = *v105;
                if (*v105 == v96)
                  goto LABEL_150;
              }
              if (v276)
                v282 = v276;
              else
                v282 = v105;
            }
            else
            {
              v282 = 0;
            }
            v105 = sub_1C53D65B8(v100 + 2504, (uint64_t)&v364, (uint64_t *)&v364, v282);
            v283 = v364;
            v105[1] = 0;
            v105[2] = 0;
            *v105 = v283;
            goto LABEL_150;
          }
        }
LABEL_151:
        v291 = sub_1C5EAAFA0(a2, v19);
        if ((_DWORD)v392)
        {
          v107 = (char *)__dst;
          v288 = (char *)__dst + 8 * v392;
          if (v298 == 27)
            v108 = 2007;
          else
            v108 = 2677;
          v290 = v108;
          if (v298 == 27)
            v109 = 2003;
          else
            v109 = 2484;
          v289 = v109;
          v292 = v298 & 0x1E;
          v110 = v312 ^ 1;
          if (v292 == 28)
            v110 = 1;
          v287 = v110;
          while (1)
          {
            v111 = *(_QWORD ***)v107;
            v306 = *(_WORD *)(*(_QWORD *)v107 + 18);
            v307 = v107;
            v309 = (uint64_t *)(*(_QWORD *)v107 - 32);
            v316 = (uint64_t *)*v309;
            v315 = (llvm::Type *)sub_1C477672C((uint64_t)&v380, *v309);
            v319 = (char *)v381;
            if (v381 == v380)
              v112 = v383;
            else
              v112 = v382;
            v313 = *(unsigned int *)v112;
            if (v291 && (!v111[1] || !*(_BYTE *)(v93 + 65)))
              sub_1C559F364(v298, (llvm::ValueAsMetadata *)v111);
            Declaration = llvm::Intrinsic::getDeclaration(v91, v290, 0, 0);
            v114 = llvm::Intrinsic::getDeclaration(v91, v289, 0, 0);
            v115 = (uint64_t ***)v111[5];
            v116 = v115 >> 4;
            if ((*((_BYTE *)v115 + 23) & 0x10) != 0)
              break;
            v126 = 0;
            v127 = &byte_1C871356D;
LABEL_177:
            v367 = 773;
            v364 = v127;
            v365 = v126;
            v366 = ".atomicsplit";
            v308 = v111 + 3;
            v326 = (llvm::BasicBlock *)llvm::BasicBlock::splitBasicBlock((uint64_t *)v115, (uint64_t *)v111 + 3, (uint64_t)&v364, 0);
            v129 = (_QWORD *)**v111;
            if ((*((_BYTE *)v115 + 23) & 0x10) != 0)
            {
              v130 = ***v115;
              v131 = *(_QWORD *)(v130 + 152);
              v132 = *(unsigned int *)(v130 + 168);
              if (!(_DWORD)v132)
                goto LABEL_184;
              LODWORD(v133) = (v132 - 1) & (v116 ^ (v115 >> 9));
              v134 = (uint64_t ****)(v131 + 16 * v133);
              v135 = *v134;
              if (*v134 != v115)
              {
                v136 = 1;
                while (v135 != (uint64_t ***)-4096)
                {
                  v137 = v133 + v136++;
                  v133 = v137 & (v132 - 1);
                  v135 = *(uint64_t ****)(v131 + 16 * v133);
                  if (v135 == v115)
                  {
                    v134 = (uint64_t ****)(v131 + 16 * v133);
                    goto LABEL_185;
                  }
                }
LABEL_184:
                v134 = (uint64_t ****)(v131 + 16 * v132);
              }
LABEL_185:
              v138 = v134[1];
              v141 = *v138;
              v140 = (char *)(v138 + 2);
              v139 = v141;
              goto LABEL_186;
            }
            v139 = 0;
            v140 = &byte_1C871356D;
LABEL_186:
            v367 = 773;
            v364 = v140;
            v365 = v139;
            v366 = ".atomic";
            v142 = (uint64_t **)operator new();
            *v142 = (uint64_t *)(*v129 + 1600);
            v142[1] = 0;
            v143 = *((_DWORD *)v142 + 5) & 0xC0000000;
            *((_DWORD *)v142 + 4) = 22;
            *((_DWORD *)v142 + 5) = v143;
            v142[3] = 0;
            v144 = v142 + 3;
            v142[4] = 0;
            v142[5] = (uint64_t *)(v142 + 5);
            v142[6] = (uint64_t *)(v142 + 5);
            v142[7] = 0;
            if (v326)
              v145 = (uint64_t *)((char *)v326 + 24);
            else
              v145 = (uint64_t *)v301;
            llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v301, v142);
            v146 = *v145;
            v142[4] = v145;
            *v144 = v146;
            *(_QWORD *)(v146 + 8) = v144;
            *v145 = (uint64_t)v144;
            llvm::Value::setName((uint64_t ***)v142, (uint64_t)&v364);
            v147 = (uint64_t ***)v115[5];
            if (v147 == v115 + 5)
            {
              v149 = 0;
            }
            else
            {
              if (v147)
                v148 = (uint64_t)(v147 - 3);
              else
                v148 = 0;
              if (*(unsigned __int8 *)(v148 + 16) - 29 >= 0xB)
                v149 = 0;
              else
                v149 = v148;
            }
            sub_1C4773D54((uint64_t)&v364, v149, 0, 0, 0);
            if (Declaration)
              v150 = *(uint64_t ***)(Declaration + 24);
            else
              v150 = 0;
            v350 = 257;
            v302 = (uint64_t *)sub_1C4774778((uint64_t *)&v364, v150, Declaration, 0, 0, (uint64_t)&v347, 0);
            if (v114)
              v151 = *(uint64_t ***)(v114 + 24);
            else
              v151 = 0;
            v350 = 257;
            v153 = sub_1C4774778((uint64_t *)&v364, v151, v114, 0, 0, (uint64_t)&v347, 0);
            v305 = v115;
            if ((v312 & 1) == 0)
            {
              v155 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v311 + 176))(v311, 17);
              v317 = (_QWORD *)v153;
              if (v155)
              {
                if (v155 == 1)
                {
                  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v311 + 128))(&v347, v311, 17);
                  v156 = *(_QWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v347 + 32))(v347);
                  v242 = v347;
                  v347 = 0;
                  if (v242)
                    (*(void (**)(void *))(*(_QWORD *)v242 + 8))(v242);
                }
                else
                {
                  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v311 + 128))(&v347, v311, 17);
                  v156 = *(_QWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v347 + 32))(v347);
                  v273 = v347;
                  v347 = 0;
                  if (v273)
                    (*(void (**)(void *))(*(_QWORD *)v273 + 8))(v273);
                }
              }
              else
              {
                v156 = 0;
              }
              v157 = *(_QWORD *)(v156 + 24);
              v343 = 257;
              llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v368 + 56) + 40) + 272, v157);
              v159 = v158;
              v160 = (char *)operator new(0x60uLL);
              v161 = v160;
              *((_QWORD *)v160 + 1) = 0;
              v162 = (llvm::Value *)(v160 + 32);
              *((_QWORD *)v160 + 2) = 0;
              *((_QWORD *)v160 + 3) = v160 + 32;
              v350 = 257;
              *((_QWORD *)v160 + 4) = v157;
              *((_QWORD *)v160 + 5) = 0;
              *((_WORD *)v160 + 24) = 60;
              *((_DWORD *)v160 + 13) = 1;
              *(_OWORD *)(v160 + 56) = 0u;
              *(_OWORD *)(v160 + 72) = 0u;
              *((_DWORD *)v160 + 22) = 0;
              *(_QWORD *)v160 = v156;
              v165 = *(_QWORD *)(v156 + 8);
              v164 = (_QWORD *)(v156 + 8);
              v163 = v165;
              *((_QWORD *)v160 + 1) = v165;
              if (v165)
                *(_QWORD *)(v163 + 16) = v160 + 8;
              *((_QWORD *)v160 + 2) = v164;
              *v164 = v160;
              *((_WORD *)v160 + 25) = 2 * (v159 & 0x3F);
              v160[92] = 1;
              llvm::Value::setName((uint64_t ***)v160 + 4, (uint64_t)&v347);
              (*(void (**)(uint64_t, llvm::Value *, void **, uint64_t, uint64_t))(*(_QWORD *)v371 + 16))(v371, v162, &v340, v368, v369);
              v154 = v325;
              if (!(_DWORD)v365)
              {
LABEL_210:
                v350 = 257;
                v153 = sub_1C4773594((uint64_t)&v364, v317, (uint64_t)v162, (uint64_t)&v347);
                goto LABEL_211;
              }
              v234 = (char *)v364;
              v235 = (char *)v364 + 16 * v365;
              v236 = (unsigned __int8 **)(v161 + 80);
              while (2)
              {
                v237 = *(_DWORD *)v234;
                v238 = (unsigned __int8 *)*((_QWORD *)v234 + 1);
                if (v238)
                {
                  if (v237)
                    goto LABEL_314;
                  v336 = (void *)*((_QWORD *)v234 + 1);
                  v295 = v236;
                  llvm::MetadataTracking::track((uint64_t)&v336, v238, 2);
                  v236 = v295;
                  v239 = *v295;
LABEL_318:
                  if (v239)
                  {
                    v297 = v236;
                    llvm::MetadataTracking::untrack((uint64_t)v236, v239);
                    v236 = v297;
                  }
                  v241 = (unsigned __int8 *)v336;
                  *v236 = (unsigned __int8 *)v336;
                  if (v241)
                  {
                    v296 = v236;
                    llvm::MetadataTracking::retrack((uint64_t)&v336, v241, (uint64_t)v236);
                    v236 = v296;
                  }
                }
                else
                {
                  v239 = *v236;
                  if (*v236 || (v161[55] & 0x20) != 0)
                  {
                    if (!v237)
                    {
                      v336 = 0;
                      goto LABEL_318;
                    }
LABEL_314:
                    v294 = v235;
                    v240 = v236;
                    llvm::Value::setMetadata(v162, *(_DWORD *)v234, (llvm::MDNode *)v238);
                    v236 = v240;
                    v235 = v294;
                  }
                }
                v234 += 16;
                if (v234 == v235)
                  goto LABEL_210;
                continue;
              }
            }
            v154 = v325;
LABEL_211:
            v166 = 0;
            if (v111[1] && v292 == 28)
            {
              v167 = llvm::Intrinsic::getDeclaration(v154, 2522, 0, 0);
              if (v167)
                v168 = *(uint64_t ***)(v167 + 24);
              else
                v168 = 0;
              v350 = 257;
              v166 = sub_1C4774778((uint64_t *)&v364, v168, v167, 0, 0, (uint64_t)&v347, 0);
            }
            v169 = *(llvm::ConstantInt **)(*(_QWORD *)v370 + 1960);
            LODWORD(v348) = *(_DWORD *)(*(_QWORD *)v370 + 1968) >> 8;
            v293 = v166;
            if (v348 > 0x40)
              llvm::APInt::initSlowCase((llvm::APInt *)&v347, 0, 0);
            else
              v347 = 0;
            v170 = v319;
            v171 = llvm::ConstantInt::get(v169, (llvm::LLVMContext *)&v347, v152);
            if (v348 >= 0x41 && v347)
              MEMORY[0x1CAA32F9C](v347, 0x1000C8000313F17);
            v318 = (uint64_t *)v153;
            v320 = v306 >> 4;
            v350 = 257;
            v314 = (llvm::Type *)&v170[8 * v313];
            v172 = (llvm::Value *)sub_1C4774B48((uint64_t)&v364, 32, v153, (uint64_t)v171, (uint64_t)&v347);
            v173 = operator new(0xA0uLL);
            v174 = v173;
            v175 = 0;
            v176 = (llvm::Value *)(v173 + 24);
            v173[29] = v173[29] & 0x38000000 | 3;
            do
            {
              v177 = &v173[v175];
              *v177 = 0;
              v177[1] = 0;
              v177[2] = 0;
              v177[3] = v176;
              v175 += 8;
            }
            while (v175 != 24);
            llvm::BranchInst::BranchInst((llvm::BranchInst *)(v173 + 24), (llvm::BasicBlock *)v142, v326, v172, 0);
            v350 = 257;
            (*(void (**)(uint64_t, llvm::Value *, void **, uint64_t, uint64_t))(*(_QWORD *)v371 + 16))(v371, v176, &v347, v368, v369);
            if ((_DWORD)v365)
            {
              v178 = (char *)v364;
              v179 = (char *)v364 + 16 * v365;
              v180 = (unsigned __int8 **)(v174 + 36);
              do
              {
                v181 = *(_DWORD *)v178;
                v182 = (unsigned __int8 *)*((_QWORD *)v178 + 1);
                if (v182)
                {
                  if (!v181)
                  {
                    v340 = (void *)*((_QWORD *)v178 + 1);
                    llvm::MetadataTracking::track((uint64_t)&v340, v182, 2);
                    v183 = *v180;
                    if (!*v180)
                    {
LABEL_235:
                      v184 = (unsigned __int8 *)v340;
                      *v180 = (unsigned __int8 *)v340;
                      if (v184)
                        llvm::MetadataTracking::retrack((uint64_t)&v340, v184, (uint64_t)(v174 + 36));
                      goto LABEL_232;
                    }
LABEL_229:
                    llvm::MetadataTracking::untrack((uint64_t)(v174 + 36), v183);
                    goto LABEL_235;
                  }
                }
                else
                {
                  v183 = *v180;
                  if (!*v180 && (*((_BYTE *)v174 + 119) & 0x20) == 0)
                    goto LABEL_232;
                  if (!v181)
                  {
                    v340 = 0;
                    if (!v183)
                      goto LABEL_235;
                    goto LABEL_229;
                  }
                }
                llvm::Value::setMetadata(v176, *(_DWORD *)v178, (llvm::MDNode *)v182);
LABEL_232:
                v178 += 16;
              }
              while (v178 != v179);
            }
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v149 + 40) + 40, (uint64_t ***)v149);
            v185 = *(_QWORD *)(v149 + 24);
            v186 = *(_QWORD **)(v149 + 32);
            *v186 = v185;
            *(_QWORD *)(v185 + 8) = v186;
            *(_QWORD *)(v149 + 24) = 0;
            *(_QWORD *)(v149 + 32) = 0;
            llvm::Value::deleteValue((llvm::Value *)v149);
            v187 = **v142;
            v347 = v349;
            v348 = 0x200000000;
            v353 = v187;
            v354 = &v362;
            v355 = &v363;
            v356 = 0;
            v357 = 0;
            v358 = 512;
            v359 = 7;
            v360 = 0;
            v361 = 0;
            v362 = &unk_1E8167888;
            v363 = &unk_1E8167A08;
            v351 = v142;
            v352 = v142 + 5;
            if (v315 == v314)
            {
              v227 = sub_1C55A0160((uint64_t)v316);
              if (!HIDWORD(v227) || (v193 = (uint64_t)v316, *((_DWORD *)&dword_1C865F4D0 + v320 - 1) != (_DWORD)v227))
              {
                sub_1C55A0244((uint64_t *)&v347, v302, *v316);
                __asm { BR              X9 }
              }
            }
            else
            {
              v188 = 0;
              v189 = v318[4];
              if (v189)
                v190 = v189 == v318[5] + 40;
              else
                v190 = 1;
              if (v190)
                v191 = 0;
              else
                v191 = v189 - 24;
              v368 = *(_QWORD *)(v191 + 40);
              v369 = v191 + 24;
              v192 = *(void **)(v191 + 48);
              v340 = v192;
              if (v192)
              {
                llvm::MetadataTracking::track((uint64_t)&v340, (unsigned __int8 *)v192, 2);
                v188 = v340;
              }
              sub_1C4774EF4((uint64_t)&v364, 0, (uint64_t)v188);
              if (v340)
                llvm::MetadataTracking::untrack((uint64_t)&v340, (unsigned __int8 *)v340);
              v193 = sub_1C55A0008(v325, (uint64_t)&v364, v320, (uint64_t)v316, 0);
            }
            v194 = (char *)operator new(0x60uLL);
            v195 = v194;
            *((_DWORD *)v194 + 13) = *((_DWORD *)v194 + 13) & 0x38000000 | 1;
            *(_QWORD *)v194 = 0;
            *((_QWORD *)v194 + 1) = 0;
            *((_QWORD *)v194 + 2) = 0;
            *((_QWORD *)v194 + 4) = ***(_QWORD ***)v326 + 1576;
            v196 = (llvm::Value *)(v194 + 32);
            *((_QWORD *)v194 + 3) = v194 + 32;
            *((_QWORD *)v194 + 5) = 0;
            v194[48] = 30;
            v194[49] = 0;
            *((_WORD *)v194 + 25) = 0;
            *((_DWORD *)v194 + 13) = 1;
            *(_OWORD *)(v194 + 56) = 0u;
            v197 = v194 + 56;
            *(_OWORD *)(v194 + 72) = 0u;
            *((_DWORD *)v194 + 22) = 0;
            *(_QWORD *)v194 = v326;
            v198 = (_QWORD *)((char *)v326 + 8);
            v199 = *((_QWORD *)v326 + 1);
            *((_QWORD *)v194 + 1) = v199;
            if (v199)
              *(_QWORD *)(v199 + 16) = v194 + 8;
            *((_QWORD *)v194 + 2) = v198;
            *v198 = v194;
            v343 = 257;
            (*((void (**)(void **, llvm::Value *, void **, uint64_t **, _QWORD **))*v355 + 2))(v355, v196, &v340, v351, v352);
            if ((_DWORD)v348)
            {
              v200 = (char *)v347;
              v201 = (char *)v347 + 16 * v348;
              v202 = (unsigned __int8 **)(v195 + 80);
              do
              {
                v203 = *(_DWORD *)v200;
                v204 = (unsigned __int8 *)*((_QWORD *)v200 + 1);
                if (v204)
                {
                  if (!v203)
                  {
                    v336 = (void *)*((_QWORD *)v200 + 1);
                    llvm::MetadataTracking::track((uint64_t)&v336, v204, 2);
                    v205 = *v202;
                    if (!*v202)
                    {
LABEL_264:
                      v206 = (unsigned __int8 *)v336;
                      *v202 = (unsigned __int8 *)v336;
                      if (v206)
                        llvm::MetadataTracking::retrack((uint64_t)&v336, v206, (uint64_t)(v195 + 80));
                      goto LABEL_261;
                    }
LABEL_258:
                    llvm::MetadataTracking::untrack((uint64_t)(v195 + 80), v205);
                    goto LABEL_264;
                  }
                }
                else
                {
                  v205 = *v202;
                  if (!*v202 && (v195[55] & 0x20) == 0)
                    goto LABEL_261;
                  if (!v203)
                  {
                    v336 = 0;
                    if (!v205)
                      goto LABEL_264;
                    goto LABEL_258;
                  }
                }
                llvm::Value::setMetadata(v196, *(_DWORD *)v200, (llvm::MDNode *)v204);
LABEL_261:
                v200 += 16;
              }
              while (v200 != v201);
            }
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList((uint64_t)(v111[5] + 5), (uint64_t ***)v111);
            v207 = v111[3];
            v208 = v111[4];
            *v208 = v207;
            v207[1] = v208;
            *v308 = 0;
            v111[4] = 0;
            v209 = *((_QWORD *)v195 + 9);
            v111[5] = (_QWORD *)v209;
            *(_WORD *)(v209 + 18) &= ~0x8000u;
            if ((*((_BYTE *)v111 + 23) & 0x10) != 0)
            {
              v232 = *(_QWORD *)(v209 + 56);
              if (v232)
              {
                v233 = *(llvm::ValueSymbolTable **)(v232 + 104);
                if (v233)
                  llvm::ValueSymbolTable::reinsertValue(v233, (llvm::Value *)v111);
              }
            }
            v210 = (_QWORD *)*v197;
            v111[3] = (_QWORD *)*v197;
            v111[4] = v197;
            v210[1] = v308;
            *v197 = v308;
            v211 = v306 >> 4;
            if (*(v111 - 4))
            {
              **(v111 - 2) = *(v111 - 3);
              v212 = (uint64_t)*(v111 - 3);
              if (v212)
                *(_QWORD *)(v212 + 16) = *(v111 - 2);
            }
            *v309 = v193;
            v91 = v325;
            v31 = v303;
            if (v193)
            {
              v215 = *(_QWORD **)(v193 + 8);
              v214 = (uint64_t **)(v193 + 8);
              v213 = v215;
              *(v111 - 3) = v215;
              if (v215)
                v213[2] = v111 - 3;
              *(v111 - 2) = v214;
              *v214 = v309;
            }
            v19 = v311;
            if (v111[1])
            {
              v216 = *((_QWORD *)v326 + 6);
              if (v216)
                v217 = v216 - 24;
              else
                v217 = 0;
              sub_1C4773D54((uint64_t)&v340, v217, 0, 0, 0);
              v218 = 0;
              v328 = (unsigned __int8 *)v111;
              if (v287
                && (v219 = (uint64_t)*v111,
                    v339 = 257,
                    v218 = (unsigned __int8 *)sub_1C4867E94((uint64_t)&v340, v219, 2, (uint64_t)&v336),
                    v292 == 28))
              {
                v220 = *(_QWORD *)(v304 + 56);
                if (!v220)
                {
                  sub_1C485C2F0();
LABEL_427:
                  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v19 + 128))(&v364, v19, 17);
                  v284 = *(_QWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v364 + 32))(v364);
                  v285 = v364;
                  v364 = 0;
                  if (v285)
                    (*(void (**)(void *))(*(_QWORD *)v285 + 8))(v285);
                  v93 = v304;
                  v91 = v325;
                  v19 = v311;
                  v31 = v303;
                  if (!v284)
                    goto LABEL_148;
                  goto LABEL_151;
                }
                if ((*(unsigned int (**)(uint64_t, uint64_t))(*(_QWORD *)v220 + 48))(v220, a2))
                  v221 = 2581;
                else
                  v221 = 2585;
                v222 = llvm::Intrinsic::getDeclaration(v325, v221, 0, 0);
                v223 = v218;
                if (*(_BYTE *)(*(_QWORD *)v218 + 8) == 2)
                {
                  v339 = 257;
                  v223 = sub_1C4773E38((uint64_t *)&v340, 49, v218, (uint64_t)v286, (uint64_t)&v336);
                }
                if (v222)
                  v224 = *(uint64_t ***)(v222 + 24);
                else
                  v224 = 0;
                v395[0] = (uint64_t)v223;
                v395[1] = v293;
                v339 = 257;
                v228 = (unsigned __int8 *)sub_1C4774778((uint64_t *)&v340, v224, v222, v395, 2, (uint64_t)&v336, 0);
                v211 = v306 >> 4;
              }
              else
              {
                v225 = llvm::Intrinsic::getDeclaration(v325, 2005, 0, 0);
                if (v225)
                  v226 = *(uint64_t ***)(v225 + 24);
                else
                  v226 = 0;
                v339 = 257;
                v228 = (unsigned __int8 *)sub_1C4774778((uint64_t *)&v340, v226, v225, 0, 0, (uint64_t)&v336, 0);
              }
              v229 = *(_QWORD *)v328;
              v230 = (uint64_t)v316;
              if (*(_BYTE *)(*(_QWORD *)v328 + 8) == 2)
              {
                v339 = 257;
                v228 = sub_1C4773E38((uint64_t *)&v340, 49, v228, v229, (uint64_t)&v336);
              }
              v327 = (uint64_t *)v228;
              if (v315 == v314)
              {
                v231 = sub_1C55A0160((uint64_t)v316);
                if (!HIDWORD(v231) || *((_DWORD *)&dword_1C865F4D0 + v211 - 1) != (_DWORD)v231)
                {
                  sub_1C55A0244((uint64_t *)&v340, v318, *v316);
                  __asm { BR              X9 }
                }
              }
              else
              {
                v230 = sub_1C55A0008(v325, (uint64_t)&v340, v211, (uint64_t)v316, 1u);
              }
              v243 = sub_1C55A0160(v230);
              if (!HIDWORD(v243) || *((_DWORD *)&dword_1C865F4D0 + v211 - 1) != (_DWORD)v243)
                __asm { BR              X9 }
              Select = (llvm::Value *)v327;
              v245 = (uint64_t)v305;
              v91 = v325;
              if ((v312 & 1) != 0)
                goto LABEL_341;
              v310 = (uint64_t)v218;
              if ((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v311 + 176))(v311, 17))
              {
                (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(_QWORD *)v311 + 128))(&v336, v311, 17);
                v246 = *(_QWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v336 + 32))(v336);
                v272 = v336;
                v336 = 0;
                if (v272)
                  (*(void (**)(void *))(*(_QWORD *)v272 + 8))(v272);
              }
              else
              {
                v246 = 0;
              }
              v247 = *(_QWORD *)(v246 + 24);
              v396 = 257;
              llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v344 + 56) + 40) + 272, v247);
              v249 = v248;
              v250 = (char *)operator new(0x60uLL);
              v251 = v250;
              *((_QWORD *)v250 + 1) = 0;
              v252 = (llvm::Value *)(v250 + 32);
              *((_QWORD *)v250 + 2) = 0;
              *((_QWORD *)v250 + 3) = v250 + 32;
              v339 = 257;
              *((_QWORD *)v250 + 4) = v247;
              *((_QWORD *)v250 + 5) = 0;
              *((_WORD *)v250 + 24) = 60;
              *((_DWORD *)v250 + 13) = 1;
              *(_OWORD *)(v250 + 56) = 0u;
              *(_OWORD *)(v250 + 72) = 0u;
              *((_DWORD *)v250 + 22) = 0;
              *(_QWORD *)v250 = v246;
              v255 = *(_QWORD *)(v246 + 8);
              v254 = (_QWORD *)(v246 + 8);
              v253 = v255;
              *((_QWORD *)v250 + 1) = v255;
              if (v255)
                *(_QWORD *)(v253 + 16) = v250 + 8;
              *((_QWORD *)v250 + 2) = v254;
              *v254 = v250;
              *((_WORD *)v250 + 25) = 2 * (v249 & 0x3F);
              v250[92] = 1;
              llvm::Value::setName((uint64_t ***)v250 + 4, (uint64_t)&v336);
              (*(void (**)(uint64_t, llvm::Value *, uint64_t *, uint64_t, uint64_t))(*(_QWORD *)v346 + 16))(v346, v252, v395, v344, v345);
              v91 = v325;
              v245 = (uint64_t)v305;
              if (!v341)
              {
LABEL_337:
                v257 = *(llvm::ConstantInt **)(*(_QWORD *)v370 + 1960);
                v337 = *(_DWORD *)(*(_QWORD *)v370 + 1968) >> 8;
                if (v337 > 0x40)
                  llvm::APInt::initSlowCase((llvm::APInt *)&v336, 0, 0);
                else
                  v336 = 0;
                v31 = v303;
                v258 = llvm::ConstantInt::get(v257, (llvm::LLVMContext *)&v336, v256);
                if (v337 >= 0x41 && v336)
                  MEMORY[0x1CAA32F9C](v336, 0x1000C8000313F17);
                v339 = 257;
                v259 = sub_1C4774B48((uint64_t)&v340, 32, (uint64_t)v252, (uint64_t)v258, (uint64_t)&v336);
                v339 = 257;
                v218 = (unsigned __int8 *)v310;
                Select = llvm::IRBuilderBase::CreateSelect((uint64_t *)&v340, v259, v327, v310, (uint64_t)&v336, 0);
                v19 = v311;
LABEL_341:
                llvm::Value::doRAUW((llvm::ValueAsMetadata *)v111, Select, (llvm::Value *)1);
                if (v218)
                {
                  sub_1C477667C((llvm::PHINode *)v218, (uint64_t)v328, (uint64_t)v142);
                  v261 = llvm::UndefValue::get(*(llvm::UndefValue **)v328, v260);
                  sub_1C477667C((llvm::PHINode *)v218, (uint64_t)v261, v245);
                }
                if (v298 == 27)
                {
                  sub_1C4773D54((uint64_t)&v336, (uint64_t)v196, 0, 0, 0);
                  v262 = *(_QWORD *)**v111 + 1960;
                  v263 = llvm::Intrinsic::getDeclaration(v91, 2106, 0, 0);
                  if (*(_QWORD *)v328 != v262)
                  {
                    v396 = 257;
                    v328 = sub_1C4773690((uint64_t *)&v336, v328, v262, (uint64_t)v395);
                  }
                  if (v263)
                    v264 = *(uint64_t ***)(v263 + 24);
                  else
                    v264 = 0;
                  v396 = 257;
                  sub_1C4774778((uint64_t *)&v336, v264, v263, (uint64_t *)&v328, 1, (uint64_t)v395, 0);
                  if (v336 != &v338)
                    free(v336);
                }
                if (v340 != &v342)
                  free(v340);
                goto LABEL_353;
              }
              v265 = (char *)v340;
              v266 = (char *)v340 + 16 * v341;
              v267 = (unsigned __int8 **)(v251 + 80);
              while (2)
              {
                v268 = *(_DWORD *)v265;
                v256 = (const llvm::APInt *)*((_QWORD *)v265 + 1);
                if (v256)
                {
                  if (v268)
                    goto LABEL_366;
                  v335 = (unsigned __int8 *)*((_QWORD *)v265 + 1);
                  v322 = v267;
                  llvm::MetadataTracking::track((uint64_t)&v335, (unsigned __int8 *)v256, 2);
                  v267 = v322;
                  v269 = *v322;
LABEL_370:
                  if (v269)
                  {
                    v324 = v267;
                    llvm::MetadataTracking::untrack((uint64_t)v267, v269);
                    v267 = v324;
                  }
                  v271 = v335;
                  *v267 = v335;
                  if (v271)
                  {
                    v323 = v267;
                    llvm::MetadataTracking::retrack((uint64_t)&v335, v271, (uint64_t)v267);
                    v267 = v323;
                  }
                }
                else
                {
                  v269 = *v267;
                  if (*v267 || (v251[55] & 0x20) != 0)
                  {
                    if (!v268)
                    {
                      v335 = 0;
                      goto LABEL_370;
                    }
LABEL_366:
                    v321 = v266;
                    v270 = v267;
                    llvm::Value::setMetadata(v252, *(_DWORD *)v265, v256);
                    v267 = v270;
                    v266 = v321;
                  }
                }
                v265 += 16;
                if (v265 == v266)
                  goto LABEL_337;
                continue;
              }
            }
LABEL_353:
            if (v347 != v349)
              free(v347);
            v93 = v304;
            if (v364 != &v366)
              free(v364);
            v107 = v307 + 8;
            if (v307 + 8 == v288)
              goto LABEL_385;
          }
          v117 = ***v115;
          v118 = *(_QWORD *)(v117 + 152);
          v119 = *(unsigned int *)(v117 + 168);
          if ((_DWORD)v119)
          {
            LODWORD(v120) = (v119 - 1) & (v116 ^ (v115 >> 9));
            v121 = (uint64_t ****)(v118 + 16 * v120);
            v122 = *v121;
            if (*v121 == v115)
            {
LABEL_176:
              v125 = v121[1];
              v128 = *v125;
              v127 = (char *)(v125 + 2);
              v126 = v128;
              goto LABEL_177;
            }
            v123 = 1;
            while (v122 != (uint64_t ***)-4096)
            {
              v124 = v120 + v123++;
              v120 = v124 & (v119 - 1);
              v122 = *(uint64_t ****)(v118 + 16 * v120);
              if (v122 == v115)
              {
                v121 = (uint64_t ****)(v118 + 16 * v120);
                goto LABEL_176;
              }
            }
          }
          v121 = (uint64_t ****)(v118 + 16 * v119);
          goto LABEL_176;
        }
LABEL_385:
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v19 + 8))(v19, 21, 1, 1, 0, 1, 2);
        v90 = v372;
        goto LABEL_386;
      }
      v92 = v392;
      if (v392 >= v373)
      {
        memmove(__dst, v374, 8 * v373);
        LODWORD(v392) = v89;
        v31 = v303;
        goto LABEL_145;
      }
      if (HIDWORD(v392) >= v373)
      {
        if ((_DWORD)v392)
        {
          memmove(__dst, v374, 8 * v392);
LABEL_437:
          if (v92 != v373)
            memcpy((char *)__dst + 8 * v92, (char *)v372 + 8 * v92, 8 * v373 - 8 * v92);
          LODWORD(v392) = v89;
          v93 = v304;
          v91 = v325;
          v31 = v303;
          goto LABEL_146;
        }
      }
      else
      {
        LODWORD(v392) = 0;
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&__dst, (uint64_t)v393, v373, 8);
      }
      v92 = 0;
      goto LABEL_437;
    }
    v31 = 0;
  }
LABEL_405:
  if (__dst != v393)
    free(__dst);
LABEL_35:
  if ((v394[0] & 1) == 0)
    MEMORY[0x1CAA32FB4](v394[1], 8);
  return v31;
}

void sub_1C559F364(int a1, llvm::ValueAsMetadata *a2)
{
  uint64_t ***v3;
  uint64_t **v4;
  uint64_t *v5;
  int v6;
  uint64_t Declaration;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t ****v13;
  uint64_t ***v14;
  int v15;
  int v16;
  uint64_t ***v17;
  char *v18;
  uint64_t **v19;
  uint64_t **v20;
  uint64_t *v21;
  llvm::BasicBlock *v22;
  uint64_t v23;
  BOOL v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t ****v30;
  uint64_t ***v31;
  int v32;
  int v33;
  uint64_t ***v34;
  char *v35;
  uint64_t **v36;
  uint64_t **v37;
  uint64_t v38;
  llvm::BasicBlock *v39;
  _QWORD *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t ****v45;
  uint64_t ***v46;
  int v47;
  int v48;
  uint64_t ***v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t **v52;
  const llvm::APInt *v53;
  uint64_t v54;
  llvm::ConstantInt *v55;
  llvm::ValueHandleBase *v56;
  llvm::Value *v57;
  _DWORD *v58;
  _DWORD *v59;
  uint64_t v60;
  llvm::Value *v61;
  _QWORD *v62;
  char *v63;
  char *v64;
  unsigned __int8 **v65;
  int v66;
  unsigned __int8 *v67;
  unsigned __int8 *v68;
  unsigned __int8 *v69;
  uint64_t v70;
  _QWORD *v71;
  const char **v72;
  uint64_t ***v73;
  char *v74;
  uint64_t **v75;
  uint64_t **v76;
  uint64_t v77;
  unsigned int v78;
  uint64_t v79;
  uint64_t *v80;
  uint64_t v81;
  uint64_t ***v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t **v85;
  const llvm::APInt *v86;
  uint64_t v87;
  llvm::ConstantInt *v88;
  llvm::ValueHandleBase *v89;
  llvm::Value *v90;
  _DWORD *v91;
  _DWORD *v92;
  uint64_t v93;
  llvm::Value *v94;
  _QWORD *v95;
  char *v96;
  char *v97;
  unsigned __int8 **v98;
  int v99;
  unsigned __int8 *v100;
  unsigned __int8 *v101;
  unsigned __int8 *v102;
  uint64_t v103;
  _QWORD *v104;
  uint64_t v105;
  uint64_t v106;
  __int16 v107;
  char v108;
  char v109;
  char *v110;
  char *v111;
  llvm::Value *v112;
  uint64_t v113;
  _QWORD *v114;
  uint64_t v115;
  char v116;
  unsigned __int8 v117;
  char *v118;
  char *v119;
  llvm::Value *v120;
  _QWORD *v121;
  uint64_t v122;
  char *v123;
  char *v124;
  unsigned __int8 **v125;
  int v126;
  unsigned __int8 *v127;
  unsigned __int8 *v128;
  unsigned __int8 *v129;
  uint64_t v130;
  uint64_t i;
  uint64_t v132;
  unsigned int v133;
  BOOL v134;
  uint64_t v135;
  unsigned __int8 *v137;
  uint64_t v138;
  unsigned __int8 *v139;
  _QWORD *v140;
  llvm::Value *v141;
  char *v142;
  char *v143;
  unsigned __int8 **v144;
  int v145;
  unsigned __int8 *v146;
  unsigned __int8 *v147;
  unsigned __int8 *v148;
  uint64_t v149;
  llvm::BasicBlock *v150;
  _QWORD v151[4];
  __int16 v152;
  unsigned __int8 *v153;
  unsigned int v154;
  __int16 v155;
  unsigned __int8 *v156;
  void *v157;
  uint64_t **v158;
  const char *v159;
  __int16 v160;
  uint64_t v161;
  uint64_t v162;
  uint64_t v163;
  uint64_t v164;
  uint64_t v165;

  v165 = *MEMORY[0x1E0C80C00];
  v3 = (uint64_t ***)*((_QWORD *)a2 + 5);
  v4 = v3[7];
  v5 = v4[5];
  if (a1 == 27)
    v6 = 1884;
  else
    v6 = 2306;
  Declaration = llvm::Intrinsic::getDeclaration(v4[5], v6, 0, 0);
  v8 = v3 >> 4;
  if ((*((_BYTE *)v3 + 23) & 0x10) != 0)
  {
    v9 = ***v3;
    v10 = *(_QWORD *)(v9 + 152);
    v11 = *(unsigned int *)(v9 + 168);
    if ((_DWORD)v11)
    {
      LODWORD(v12) = (v11 - 1) & (v8 ^ (v3 >> 9));
      v13 = (uint64_t ****)(v10 + 16 * v12);
      v14 = *v13;
      if (*v13 == v3)
      {
LABEL_12:
        v17 = v13[1];
        v20 = *v17;
        v18 = (char *)(v17 + 2);
        v19 = v20;
        goto LABEL_13;
      }
      v15 = 1;
      while (v14 != (uint64_t ***)-4096)
      {
        v16 = v12 + v15++;
        v12 = v16 & (v11 - 1);
        v14 = *(uint64_t ****)(v10 + 16 * v12);
        if (v14 == v3)
        {
          v13 = (uint64_t ****)(v10 + 16 * v12);
          goto LABEL_12;
        }
      }
    }
    v13 = (uint64_t ****)(v10 + 16 * v11);
    goto LABEL_12;
  }
  v19 = 0;
  v18 = &byte_1C871356D;
LABEL_13:
  v160 = 773;
  v157 = v18;
  v158 = v19;
  v159 = ".atomic";
  v21 = (uint64_t *)llvm::BasicBlock::splitBasicBlock((uint64_t *)v3, (uint64_t *)a2 + 3, (uint64_t)&v157, 0);
  v22 = (llvm::BasicBlock *)v21;
  v23 = *((_QWORD *)a2 + 4);
  if (v23)
    v24 = v23 == *((_QWORD *)a2 + 5) + 40;
  else
    v24 = 1;
  if (v24)
    v25 = 0;
  else
    v25 = v23 - 24;
  if ((*((_BYTE *)v3 + 23) & 0x10) != 0)
  {
    v26 = ***v3;
    v27 = *(_QWORD *)(v26 + 152);
    v28 = *(unsigned int *)(v26 + 168);
    if ((_DWORD)v28)
    {
      LODWORD(v29) = (v28 - 1) & (v8 ^ (v3 >> 9));
      v30 = (uint64_t ****)(v27 + 16 * v29);
      v31 = *v30;
      if (*v30 == v3)
      {
LABEL_27:
        v34 = v30[1];
        v37 = *v34;
        v35 = (char *)(v34 + 2);
        v36 = v37;
        goto LABEL_28;
      }
      v32 = 1;
      while (v31 != (uint64_t ***)-4096)
      {
        v33 = v29 + v32++;
        v29 = v33 & (v28 - 1);
        v31 = *(uint64_t ****)(v27 + 16 * v29);
        if (v31 == v3)
        {
          v30 = (uint64_t ****)(v27 + 16 * v29);
          goto LABEL_27;
        }
      }
    }
    v30 = (uint64_t ****)(v27 + 16 * v28);
    goto LABEL_27;
  }
  v36 = 0;
  v35 = &byte_1C871356D;
LABEL_28:
  v160 = 773;
  v157 = v35;
  v158 = v36;
  v159 = ".after";
  v38 = llvm::BasicBlock::splitBasicBlock(v21, (uint64_t *)(v25 + 24), (uint64_t)&v157, 0);
  v39 = (llvm::BasicBlock *)v38;
  if (!*((_QWORD *)a2 + 1))
  {
    v49 = (uint64_t ***)v3[5];
    if (v49 == v3 + 5)
    {
      v51 = 0;
    }
    else
    {
      if (v49)
        v50 = (uint64_t)(v49 - 3);
      else
        v50 = 0;
      if (*(unsigned __int8 *)(v50 + 16) - 29 >= 0xB)
        v51 = 0;
      else
        v51 = v50;
    }
    sub_1C4773D54((uint64_t)&v157, v51, 0, 0, 0);
    if (Declaration)
      v52 = *(uint64_t ***)(Declaration + 24);
    else
      v52 = 0;
    v155 = 257;
    v54 = sub_1C4774778((uint64_t *)&v157, v52, Declaration, 0, 0, (uint64_t)&v153, 0);
    v55 = *(llvm::ConstantInt **)(*(_QWORD *)v163 + 1960);
    v154 = *(_DWORD *)(*(_QWORD *)v163 + 1968) >> 8;
    if (v154 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&v153, 0, 0);
    else
      v153 = 0;
    v56 = llvm::ConstantInt::get(v55, (llvm::LLVMContext *)&v153, v53);
    if (v154 >= 0x41 && v153)
      MEMORY[0x1CAA32F9C](v153, 0x1000C8000313F17);
    v155 = 257;
    v57 = (llvm::Value *)sub_1C4774B48((uint64_t)&v157, 32, v54, (uint64_t)v56, (uint64_t)&v153);
    v58 = operator new(0xA0uLL);
    v59 = v58;
    v60 = 0;
    v61 = (llvm::Value *)(v58 + 24);
    v58[29] = v58[29] & 0x38000000 | 3;
    do
    {
      v62 = &v58[v60];
      *v62 = 0;
      v62[1] = 0;
      v62[2] = 0;
      v62[3] = v61;
      v60 += 8;
    }
    while (v60 != 24);
    llvm::BranchInst::BranchInst((llvm::BranchInst *)(v58 + 24), v39, v22, v57, 0);
    v155 = 257;
    (*(void (**)(uint64_t, llvm::Value *, unsigned __int8 **, uint64_t, uint64_t))(*(_QWORD *)v164 + 16))(v164, v61, &v153, v161, v162);
    if (!(_DWORD)v158)
    {
LABEL_67:
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v51 + 40) + 40, (uint64_t ***)v51);
      v70 = *(_QWORD *)(v51 + 24);
      v71 = *(_QWORD **)(v51 + 32);
      *v71 = v70;
      *(_QWORD *)(v70 + 8) = v71;
      *(_QWORD *)(v51 + 24) = 0;
      *(_QWORD *)(v51 + 32) = 0;
      llvm::Value::deleteValue((llvm::Value *)v51);
      v72 = (const char **)v157;
      goto LABEL_147;
    }
    v63 = (char *)v157;
    v64 = (char *)v157 + 16 * v158;
    v65 = (unsigned __int8 **)(v59 + 36);
    while (1)
    {
      v66 = *(_DWORD *)v63;
      v67 = (unsigned __int8 *)*((_QWORD *)v63 + 1);
      if (v67)
      {
        if (!v66)
        {
          v151[0] = *((_QWORD *)v63 + 1);
          llvm::MetadataTracking::track((uint64_t)v151, v67, 2);
          v68 = *v65;
          if (!*v65)
          {
LABEL_65:
            v69 = (unsigned __int8 *)v151[0];
            *v65 = (unsigned __int8 *)v151[0];
            if (v69)
              llvm::MetadataTracking::retrack((uint64_t)v151, v69, (uint64_t)(v59 + 36));
            goto LABEL_62;
          }
LABEL_59:
          llvm::MetadataTracking::untrack((uint64_t)(v59 + 36), v68);
          goto LABEL_65;
        }
      }
      else
      {
        v68 = *v65;
        if (!*v65 && (*((_BYTE *)v59 + 119) & 0x20) == 0)
          goto LABEL_62;
        if (!v66)
        {
          v151[0] = 0;
          if (!v68)
            goto LABEL_65;
          goto LABEL_59;
        }
      }
      llvm::Value::setMetadata(v61, *(_DWORD *)v63, (llvm::MDNode *)v67);
LABEL_62:
      v63 += 16;
      if (v63 == v64)
        goto LABEL_67;
    }
  }
  v149 = v38;
  v150 = v22;
  v40 = **(_QWORD ***)a2;
  if ((*((_BYTE *)v3 + 23) & 0x10) != 0)
  {
    v41 = ***v3;
    v42 = *(_QWORD *)(v41 + 152);
    v43 = *(unsigned int *)(v41 + 168);
    if ((_DWORD)v43)
    {
      LODWORD(v44) = (v43 - 1) & (v8 ^ (v3 >> 9));
      v45 = (uint64_t ****)(v42 + 16 * v44);
      v46 = *v45;
      if (*v45 == v3)
      {
LABEL_69:
        v73 = v45[1];
        v76 = *v73;
        v74 = (char *)(v73 + 2);
        v75 = v76;
        goto LABEL_70;
      }
      v47 = 1;
      while (v46 != (uint64_t ***)-4096)
      {
        v48 = v44 + v47++;
        v44 = v48 & (v43 - 1);
        v46 = *(uint64_t ****)(v42 + 16 * v44);
        if (v46 == v3)
        {
          v45 = (uint64_t ****)(v42 + 16 * v44);
          goto LABEL_69;
        }
      }
    }
    v45 = (uint64_t ****)(v42 + 16 * v43);
    goto LABEL_69;
  }
  v75 = 0;
  v74 = &byte_1C871356D;
LABEL_70:
  v160 = 773;
  v157 = v74;
  v158 = v75;
  v159 = ".load";
  v77 = operator new();
  *(_QWORD *)v77 = *v40 + 1600;
  *(_QWORD *)(v77 + 8) = 0;
  v78 = *(_DWORD *)(v77 + 20) & 0xC0000000;
  *(_QWORD *)(v77 + 24) = 0;
  v79 = v77 + 24;
  *(_DWORD *)(v77 + 16) = 22;
  *(_DWORD *)(v77 + 20) = v78;
  *(_QWORD *)(v77 + 32) = 0;
  *(_QWORD *)(v77 + 40) = v77 + 40;
  *(_QWORD *)(v77 + 48) = v77 + 40;
  *(_QWORD *)(v77 + 56) = 0;
  if (v4)
  {
    if (v150)
      v80 = (uint64_t *)((char *)v150 + 24);
    else
      v80 = (uint64_t *)(v4 + 9);
    llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)(v4 + 9), (_QWORD *)v77);
    v81 = *v80;
    *(_QWORD *)(v77 + 24) = *v80;
    *(_QWORD *)(v77 + 32) = v80;
    *(_QWORD *)(v81 + 8) = v79;
    *v80 = v79;
  }
  llvm::Value::setName((uint64_t ***)v77, (uint64_t)&v157);
  v82 = (uint64_t ***)v3[5];
  if (v82 == v3 + 5)
  {
    v84 = 0;
  }
  else
  {
    if (v82)
      v83 = (uint64_t)(v82 - 3);
    else
      v83 = 0;
    if (*(unsigned __int8 *)(v83 + 16) - 29 >= 0xB)
      v84 = 0;
    else
      v84 = v83;
  }
  sub_1C4773D54((uint64_t)&v157, v84, 0, 0, 0);
  if (Declaration)
    v85 = *(uint64_t ***)(Declaration + 24);
  else
    v85 = 0;
  v155 = 257;
  v87 = sub_1C4774778((uint64_t *)&v157, v85, Declaration, 0, 0, (uint64_t)&v153, 0);
  v88 = *(llvm::ConstantInt **)(*(_QWORD *)v163 + 1960);
  v154 = *(_DWORD *)(*(_QWORD *)v163 + 1968) >> 8;
  if (v154 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v153, 0, 0);
  else
    v153 = 0;
  v89 = llvm::ConstantInt::get(v88, (llvm::LLVMContext *)&v153, v86);
  if (v154 >= 0x41 && v153)
    MEMORY[0x1CAA32F9C](v153, 0x1000C8000313F17);
  v155 = 257;
  v90 = (llvm::Value *)sub_1C4774B48((uint64_t)&v157, 32, v87, (uint64_t)v89, (uint64_t)&v153);
  v91 = operator new(0xA0uLL);
  v92 = v91;
  v93 = 0;
  v94 = (llvm::Value *)(v91 + 24);
  v91[29] = v91[29] & 0x38000000 | 3;
  do
  {
    v95 = &v91[v93];
    *v95 = 0;
    v95[1] = 0;
    v95[2] = 0;
    v95[3] = v94;
    v93 += 8;
  }
  while (v93 != 24);
  llvm::BranchInst::BranchInst((llvm::BranchInst *)(v91 + 24), (llvm::BasicBlock *)v77, v150, v90, 0);
  v155 = 257;
  (*(void (**)(uint64_t, llvm::Value *, unsigned __int8 **, uint64_t, uint64_t))(*(_QWORD *)v164 + 16))(v164, v94, &v153, v161, v162);
  if ((_DWORD)v158)
  {
    v96 = (char *)v157;
    v97 = (char *)v157 + 16 * v158;
    v98 = (unsigned __int8 **)(v92 + 36);
    do
    {
      v99 = *(_DWORD *)v96;
      v100 = (unsigned __int8 *)*((_QWORD *)v96 + 1);
      if (v100)
      {
        if (!v99)
        {
          v151[0] = *((_QWORD *)v96 + 1);
          llvm::MetadataTracking::track((uint64_t)v151, v100, 2);
          v101 = *v98;
          if (!*v98)
          {
LABEL_104:
            v102 = (unsigned __int8 *)v151[0];
            *v98 = (unsigned __int8 *)v151[0];
            if (v102)
              llvm::MetadataTracking::retrack((uint64_t)v151, v102, (uint64_t)(v92 + 36));
            goto LABEL_101;
          }
LABEL_98:
          llvm::MetadataTracking::untrack((uint64_t)(v92 + 36), v101);
          goto LABEL_104;
        }
      }
      else
      {
        v101 = *v98;
        if (!*v98 && (*((_BYTE *)v92 + 119) & 0x20) == 0)
          goto LABEL_101;
        if (!v99)
        {
          v151[0] = 0;
          if (!v101)
            goto LABEL_104;
          goto LABEL_98;
        }
      }
      llvm::Value::setMetadata(v94, *(_DWORD *)v96, (llvm::MDNode *)v100);
LABEL_101:
      v96 += 16;
    }
    while (v96 != v97);
  }
  llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v84 + 40) + 40, (uint64_t ***)v84);
  v103 = *(_QWORD *)(v84 + 24);
  v104 = *(_QWORD **)(v84 + 32);
  *v104 = v103;
  *(_QWORD *)(v103 + 8) = v104;
  *(_QWORD *)(v84 + 24) = 0;
  *(_QWORD *)(v84 + 32) = 0;
  llvm::Value::deleteValue((llvm::Value *)v84);
  v161 = v77;
  v162 = v77 + 40;
  v105 = *((_QWORD *)a2 - 8);
  v106 = **((_QWORD **)a2 - 4);
  v107 = *((_WORD *)a2 + 9);
  v152 = 257;
  llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v77 + 56) + 40) + 272, v106);
  v109 = v108;
  v110 = (char *)operator new(0x60uLL);
  v111 = v110;
  v112 = (llvm::Value *)(v110 + 32);
  *((_QWORD *)v110 + 2) = 0;
  *((_QWORD *)v110 + 3) = v110 + 32;
  v155 = 257;
  *((_QWORD *)v110 + 4) = v106;
  *((_QWORD *)v110 + 5) = 0;
  *((_WORD *)v110 + 24) = 60;
  *((_DWORD *)v110 + 13) = 1;
  *(_OWORD *)(v110 + 56) = 0u;
  *(_OWORD *)(v110 + 72) = 0u;
  *((_DWORD *)v110 + 22) = 0;
  *(_QWORD *)v110 = v105;
  *((_QWORD *)v110 + 1) = 0;
  if (v105)
  {
    v115 = *(_QWORD *)(v105 + 8);
    v114 = (_QWORD *)(v105 + 8);
    v113 = v115;
    *((_QWORD *)v110 + 1) = v115;
    if (v115)
      *(_QWORD *)(v113 + 16) = v110 + 8;
    *((_QWORD *)v110 + 2) = v114;
    *v114 = v110;
  }
  *((_WORD *)v110 + 25) = v107 & 1 | (2 * (v109 & 0x3F));
  v110[92] = 1;
  llvm::Value::setName((uint64_t ***)v110 + 4, (uint64_t)&v153);
  (*(void (**)(uint64_t, llvm::Value *, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)v164 + 16))(v164, v112, v151, v161, v162);
  if ((_DWORD)v158)
  {
    v142 = (char *)v157;
    v143 = (char *)v157 + 16 * v158;
    v144 = (unsigned __int8 **)(v111 + 80);
    do
    {
      v145 = *(_DWORD *)v142;
      v146 = (unsigned __int8 *)*((_QWORD *)v142 + 1);
      if (v146)
      {
        if (!v145)
        {
          v156 = (unsigned __int8 *)*((_QWORD *)v142 + 1);
          llvm::MetadataTracking::track((uint64_t)&v156, v146, 2);
          v147 = *v144;
          goto LABEL_161;
        }
      }
      else
      {
        v147 = *v144;
        if (!*v144 && (v111[55] & 0x20) == 0)
          goto LABEL_158;
        if (!v145)
        {
          v156 = 0;
LABEL_161:
          if (v147)
            llvm::MetadataTracking::untrack((uint64_t)(v111 + 80), v147);
          v148 = v156;
          *v144 = v156;
          if (v148)
            llvm::MetadataTracking::retrack((uint64_t)&v156, v148, (uint64_t)(v111 + 80));
          goto LABEL_158;
        }
      }
      llvm::Value::setMetadata(v112, *(_DWORD *)v142, (llvm::MDNode *)v146);
LABEL_158:
      v142 += 16;
    }
    while (v142 != v143);
  }
  v116 = *((_BYTE *)a2 + 60);
  *((_WORD *)v111 + 25) = *((_WORD *)v111 + 25) & 0xFC7F | (*((_WORD *)a2 + 9) << 6) & 0x380;
  v111[92] = v116;
  llvm::DataLayout::getAlignment((uint64_t)(v5 + 34), *((_QWORD *)v111 + 4));
  *((_WORD *)v111 + 25) = *((_WORD *)v111 + 25) & 0xFF81 | (2 * v117);
  v118 = (char *)operator new(0x60uLL);
  v119 = v118;
  *((_DWORD *)v118 + 13) = *((_DWORD *)v118 + 13) & 0x38000000 | 1;
  *(_QWORD *)v118 = 0;
  *((_QWORD *)v118 + 1) = 0;
  *((_QWORD *)v118 + 2) = 0;
  *((_QWORD *)v118 + 4) = ***(_QWORD ***)v149 + 1576;
  v120 = (llvm::Value *)(v118 + 32);
  *((_QWORD *)v118 + 3) = v118 + 32;
  *((_QWORD *)v118 + 5) = 0;
  v118[48] = 30;
  v118[49] = 0;
  *((_WORD *)v118 + 25) = 0;
  *((_DWORD *)v118 + 13) = 1;
  *(_OWORD *)(v118 + 56) = 0u;
  *(_OWORD *)(v118 + 72) = 0u;
  *((_DWORD *)v118 + 22) = 0;
  *(_QWORD *)v118 = v149;
  v121 = (_QWORD *)(v149 + 8);
  v122 = *(_QWORD *)(v149 + 8);
  *((_QWORD *)v118 + 1) = v122;
  if (v122)
    *(_QWORD *)(v122 + 16) = v118 + 8;
  *((_QWORD *)v118 + 2) = v121;
  *v121 = v118;
  v155 = 257;
  (*(void (**)(uint64_t, llvm::Value *, unsigned __int8 **, uint64_t, uint64_t))(*(_QWORD *)v164 + 16))(v164, v120, &v153, v161, v162);
  if ((_DWORD)v158)
  {
    v123 = (char *)v157;
    v124 = (char *)v157 + 16 * v158;
    v125 = (unsigned __int8 **)(v119 + 80);
    do
    {
      v126 = *(_DWORD *)v123;
      v127 = (unsigned __int8 *)*((_QWORD *)v123 + 1);
      if (v127)
      {
        if (!v126)
        {
          v151[0] = *((_QWORD *)v123 + 1);
          llvm::MetadataTracking::track((uint64_t)v151, v127, 2);
          v128 = *v125;
          if (!*v125)
          {
LABEL_126:
            v129 = (unsigned __int8 *)v151[0];
            *v125 = (unsigned __int8 *)v151[0];
            if (v129)
              llvm::MetadataTracking::retrack((uint64_t)v151, v129, (uint64_t)(v119 + 80));
            goto LABEL_123;
          }
LABEL_120:
          llvm::MetadataTracking::untrack((uint64_t)(v119 + 80), v128);
          goto LABEL_126;
        }
      }
      else
      {
        v128 = *v125;
        if (!*v125 && (v119[55] & 0x20) == 0)
          goto LABEL_123;
        if (!v126)
        {
          v151[0] = 0;
          if (!v128)
            goto LABEL_126;
          goto LABEL_120;
        }
      }
      llvm::Value::setMetadata(v120, *(_DWORD *)v123, (llvm::MDNode *)v127);
LABEL_123:
      v123 += 16;
    }
    while (v123 != v124);
  }
  v130 = v149 + 40;
  for (i = *(_QWORD *)(v149 + 48); i != v130; i = *(_QWORD *)(i + 8))
  {
    v132 = i - 24;
    if (!i)
      v132 = 0;
    if (*(_BYTE *)(v132 + 16) != 83)
    {
      v133 = *(unsigned __int8 *)(i - 8) - 38;
      v134 = v133 > 0x38;
      v135 = (1 << v133) & 0x100060000000001;
      if (v134 || v135 == 0)
        v130 = i;
      else
        v130 = *(_QWORD *)(i + 8);
      break;
    }
  }
  v137 = 0;
  if (v130)
    v138 = v130 - 24;
  else
    v138 = 0;
  v161 = *(_QWORD *)(v138 + 40);
  v162 = v138 + 24;
  v139 = *(unsigned __int8 **)(v138 + 48);
  v153 = v139;
  if (v139)
  {
    llvm::MetadataTracking::track((uint64_t)&v153, v139, 2);
    v137 = v153;
  }
  sub_1C4774EF4((uint64_t)&v157, 0, (uint64_t)v137);
  if (v153)
    llvm::MetadataTracking::untrack((uint64_t)&v153, v153);
  v140 = *(_QWORD **)a2;
  v155 = 257;
  v141 = (llvm::Value *)sub_1C4867E94((uint64_t)&v157, (uint64_t)v140, 2, (uint64_t)&v153);
  llvm::Value::doRAUW(a2, v141, (llvm::Value *)1);
  sub_1C477667C(v141, (uint64_t)a2, (uint64_t)v150);
  sub_1C477667C(v141, (uint64_t)v112, v77);
  v72 = (const char **)v157;
LABEL_147:
  if (v72 != &v159)
    free(v72);
}

uint64_t sub_1C559FFD4(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E8170000;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C559FFEC(uint64_t a1, _QWORD *a2, uint64_t a3, uint64_t a4, _QWORD *a5)
{
  return (*(uint64_t (**)(_QWORD, uint64_t, uint64_t, _QWORD))(a1 + 8))(*a2, a3, a4, *a5);
}

uint64_t sub_1C55A0008(uint64_t *a1, uint64_t a2, int a3, uint64_t a4, unsigned int a5)
{
  uint64_t Declaration;
  const llvm::APInt *v9;
  uint64_t v10;
  uint64_t **v11;
  uint64_t v12;
  uint64_t v13;
  llvm::ConstantInt *v14;
  unint64_t v15;
  int v16;
  llvm::ValueHandleBase *v17;
  llvm::ConstantInt *v19;
  uint64_t v20;
  unsigned int v21;
  __int16 v22;
  uint64_t v23[3];

  v23[2] = *MEMORY[0x1E0C80C00];
  Declaration = llvm::Intrinsic::getDeclaration(a1, dword_1C865F500[a3 - 1], 0, 0);
  v10 = Declaration;
  if (Declaration)
    v11 = *(uint64_t ***)(Declaration + 24);
  else
    v11 = 0;
  v12 = **(_QWORD **)(a2 + 64);
  v13 = a5;
  v14 = *(llvm::ConstantInt **)(v12 + 1936);
  v15 = *(unsigned int *)(v12 + 1944);
  v21 = v15 >> 8;
  if (v15 >> 8 > 0x40)
  {
    v19 = v14;
    llvm::APInt::initSlowCase((llvm::APInt *)&v20, v13, 0);
    v14 = v19;
  }
  else
  {
    if (v15 <= 0xFF)
      v16 = 0;
    else
      v16 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v15);
    v20 = v16 & a5;
  }
  v17 = llvm::ConstantInt::get(v14, (llvm::LLVMContext *)&v20, v9);
  if (v21 >= 0x41 && v20)
    MEMORY[0x1CAA32F9C](v20, 0x1000C8000313F17);
  v23[0] = (uint64_t)v17;
  v23[1] = a4;
  v22 = 257;
  return sub_1C4774778((uint64_t *)a2, v11, v10, v23, 2, (uint64_t)&v20, 0);
}

uint64_t sub_1C55A0160(uint64_t a1)
{
  int v1;
  llvm::detail::DoubleAPFloat *v2;
  void *v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v10;
  unsigned int v11;

  v1 = *(unsigned __int8 *)(a1 + 16);
  if (*(_BYTE *)(*(_QWORD *)a1 + 8) != 2)
  {
    if (v1 == 16)
    {
      v7 = (_QWORD *)(a1 + 24);
      if (*(_DWORD *)(a1 + 32) >= 0x41u)
        v7 = (_QWORD *)*v7;
      v5 = (_QWORD *)*v7;
      v6 = *v7 & 0xFFFFFF00;
      goto LABEL_15;
    }
LABEL_16:
    v8 = 0;
    LOBYTE(v5) = 0;
    v6 = 0;
    return v5 | v8 | v6;
  }
  if (v1 != 17)
    goto LABEL_16;
  v3 = *(void **)(a1 + 32);
  v2 = (llvm::detail::DoubleAPFloat *)(a1 + 32);
  if (v3 == &unk_1C866F1C0)
    llvm::detail::DoubleAPFloat::bitcastToAPInt(v2, (unsigned int *)&v10);
  else
    llvm::detail::IEEEFloat::bitcastToAPInt((uint64_t)v2, (unsigned int *)&v10);
  if (v11 >= 0x41)
    v4 = v10;
  else
    v4 = &v10;
  v5 = (_QWORD *)*v4;
  v6 = *v4 & 0xFFFFFF00;
  if (v11 >= 0x41 && v10)
    MEMORY[0x1CAA32F9C]();
LABEL_15:
  v8 = 0x100000000;
  return v5 | v8 | v6;
}

unsigned __int8 *sub_1C55A0244(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  _BYTE v5[32];
  __int16 v6;

  if (*a2 != a3)
  {
    if (*(_BYTE *)(a3 + 8) == 2)
    {
      v6 = 257;
      return sub_1C5345CE4((uint64_t)a1, a2, (uint64_t *)a3, (uint64_t)v5);
    }
    else
    {
      v6 = 257;
      return sub_1C4773690(a1, (unsigned __int8 *)a2, a3, (uint64_t)v5);
    }
  }
  return (unsigned __int8 *)a2;
}

uint64_t sub_1C55A02A0()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C559CC20(v0);
}

void sub_1C55A02CC(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C55A02F0()
{
  return "GPU Atomic Helper Thread Workaround Pass";
}

void *sub_1C55A0300(uint64_t a1, uint64_t a2)
{
  sub_1C4771E64(a2, a2 + 112, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
  return sub_1C4771E64(a2, a2, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
}

uint64_t sub_1C55A0340(uint64_t a1, uint64_t a2)
{
  void **v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  unsigned int v21;
  llvm::ValueAsMetadata **v22;
  uint64_t v23;
  llvm::ValueAsMetadata *v24;
  llvm::UndefValue ***v25;
  int v26;
  llvm::UndefValue **v27;
  llvm::UndefValue *v28;
  _QWORD **v29;
  uint64_t *v30;
  uint64_t Declaration;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  llvm::UndefValue **v37;
  llvm::UndefValue *v38;
  int v39;
  int v40;
  llvm::UndefValue *v41;
  uint64_t v42;
  char *v43;
  uint64_t v44;
  uint64_t *v45;
  llvm::BasicBlock *v46;
  llvm::UndefValue *v47;
  BOOL v48;
  uint64_t *v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  llvm::UndefValue **v54;
  llvm::UndefValue *v55;
  int v56;
  int v57;
  llvm::UndefValue *v58;
  uint64_t v59;
  char *v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  llvm::UndefValue **v66;
  llvm::UndefValue *v67;
  int v68;
  int v69;
  _QWORD ***v70;
  uint64_t v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t **v74;
  const llvm::APInt *v75;
  uint64_t v76;
  llvm::ConstantInt *v77;
  llvm::ValueHandleBase *v78;
  llvm::Value *v79;
  _DWORD *v80;
  _DWORD *v81;
  uint64_t v82;
  llvm::Value *v83;
  _QWORD *v84;
  char *v85;
  char *v86;
  unsigned __int8 **v87;
  int v88;
  unsigned __int8 *v89;
  unsigned __int8 *v90;
  unsigned __int8 *v91;
  uint64_t v92;
  _QWORD *v93;
  llvm::UndefValue *v94;
  uint64_t v95;
  char *v96;
  uint64_t v97;
  _QWORD *v98;
  uint64_t v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  uint64_t *v103;
  uint64_t v104;
  _QWORD ***v105;
  uint64_t v106;
  uint64_t v107;
  uint64_t *v108;
  uint64_t **v109;
  const llvm::APInt *v110;
  uint64_t v111;
  llvm::ConstantInt *v112;
  llvm::ValueHandleBase *v113;
  llvm::Value *v114;
  _DWORD *v115;
  _DWORD *v116;
  uint64_t v117;
  llvm::Value *v118;
  _QWORD *v119;
  char *v120;
  char *v121;
  unsigned __int8 **v122;
  int v123;
  unsigned __int8 *v124;
  unsigned __int8 *v125;
  unsigned __int8 *v126;
  uint64_t v127;
  _QWORD *v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  __int16 v132;
  char v133;
  char v134;
  char *v135;
  char *v136;
  llvm::Value *v137;
  uint64_t v138;
  _QWORD *v139;
  uint64_t v140;
  char v141;
  unsigned __int8 v142;
  llvm::Type *v143;
  llvm::UndefValue *v144;
  const llvm::APInt *v145;
  uint64_t v146;
  uint64_t v147;
  llvm::ValueHandleBase *v148;
  uint64_t v149;
  char *v150;
  char *v151;
  llvm::Value *v152;
  _QWORD *v153;
  uint64_t v154;
  char *v155;
  char *v156;
  unsigned __int8 **v157;
  int v158;
  unsigned __int8 *v159;
  unsigned __int8 *v160;
  unsigned __int8 *v161;
  char *v162;
  char *v163;
  uint64_t v164;
  char *v165;
  unsigned int v166;
  BOOL v167;
  uint64_t v168;
  unsigned __int8 *v170;
  char *v171;
  unsigned __int8 *v172;
  llvm::UndefValue *v173;
  llvm::Value *v174;
  char *v175;
  char *v176;
  unsigned __int8 **v177;
  int v178;
  unsigned __int8 *v179;
  unsigned __int8 *v180;
  unsigned __int8 *v181;
  llvm::ConstantInt *v182;
  int v184;
  llvm::UndefValue ***v185;
  uint64_t v186;
  llvm::BasicBlock *v187;
  llvm::BasicBlock *v188;
  std::string __dst;
  _QWORD v190[4];
  __int16 v191;
  unsigned __int8 *v192;
  unsigned int v193;
  __int16 v194;
  unsigned __int8 *v195;
  void *v196;
  uint64_t v197;
  _BYTE v198[128];
  void *v199;
  uint64_t v200;
  _BYTE v201[128];
  char *v202;
  uint64_t v203;
  _QWORD v204[2];
  __int16 v205;
  uint64_t v206;
  uint64_t v207;
  uint64_t *v208;
  uint64_t v209;
  uint64_t v210;

  v210 = *MEMORY[0x1E0C80C00];
  v3 = **(void ****)(a1 + 8);
  do
  {
    v4 = *v3;
    v3 += 2;
  }
  while (v4 != &llvm::FunctionGroupInfoWrapperPass::ID);
  v5 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v3 - 1) + 96))(*(v3 - 1), &llvm::FunctionGroupInfoWrapperPass::ID);
  v6 = (*(uint64_t (**)(_QWORD, uint64_t))(**(_QWORD **)(v5 + 32) + 24))(*(_QWORD *)(v5 + 32), a2);
  if (!sub_1C5EAAFA0(a2, v6))
    return 0;
  v7 = *(_QWORD *)(a2 + 40);
  if (*(char *)(v7 + 239) < 0)
    sub_1C47EBC30(&__dst, *(void **)(v7 + 216), *(_QWORD *)(v7 + 224));
  else
    __dst = *(std::string *)(v7 + 216);
  if (!std::string::compare(&__dst, 0, 4uLL, "agx1"))
  {
    v9 = 27;
  }
  else if (!std::string::compare(&__dst, 0, 4uLL, "agx2"))
  {
    v9 = 28;
  }
  else if (!std::string::compare(&__dst, 0, 4uLL, "agx3"))
  {
    v9 = 29;
  }
  else
  {
    v9 = 0;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v199 = v201;
  v200 = 0x1000000000;
  v196 = v198;
  v197 = 0x1000000000;
  v10 = a2 + 72;
  v11 = *(_QWORD *)(a2 + 80);
  if (v11 == v10)
  {
    v8 = 0;
    goto LABEL_239;
  }
  do
  {
    v12 = v11 - 24;
    if (!v11)
      v12 = 0;
    v13 = v12 + 40;
    v14 = *(_QWORD *)(v12 + 48);
    if (v14 != v12 + 40)
    {
      while (1)
      {
        v15 = *(_QWORD *)(v14 + 8);
        if (v14)
          v16 = v14 - 24;
        else
          v16 = 0;
        v17 = *(unsigned __int8 *)(v16 + 16);
        if (v17 == 65)
          v18 = v16;
        else
          v18 = 0;
        if (!v14 || v17 != 65)
          goto LABEL_32;
        if (*(_QWORD *)(v18 + 8))
          break;
LABEL_40:
        v14 = v15;
        if (v15 == v13)
          goto LABEL_41;
      }
      v19 = v200;
      if (v200 >= (unint64_t)HIDWORD(v200))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v199, (uint64_t)v201, v200 + 1, 8);
        v19 = v200;
      }
      *((_QWORD *)v199 + v19) = v18;
      LODWORD(v200) = v200 + 1;
      v17 = *(unsigned __int8 *)(v16 + 16);
LABEL_32:
      if (v17 != 64)
        v16 = 0;
      if (v14 && v17 == 64 && *(_QWORD *)(v16 + 8))
      {
        v20 = v197;
        if (v197 >= (unint64_t)HIDWORD(v197))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v196, (uint64_t)v198, v197 + 1, 8);
          v20 = v197;
        }
        *((_QWORD *)v196 + v20) = v16;
        LODWORD(v197) = v197 + 1;
      }
      goto LABEL_40;
    }
LABEL_41:
    v11 = *(_QWORD *)(v11 + 8);
  }
  while (v11 != v10);
  v21 = v197;
  if (!(v200 | v197))
  {
    v8 = 0;
    goto LABEL_239;
  }
  if ((_DWORD)v200)
  {
    v22 = (llvm::ValueAsMetadata **)v199;
    v23 = 8 * v200;
    do
    {
      v24 = *v22++;
      sub_1C559F364(v9, v24);
      v23 -= 8;
    }
    while (v23);
    v21 = v197;
  }
  v8 = 1;
  if (!v21)
    goto LABEL_239;
  v25 = (llvm::UndefValue ***)v196;
  v185 = (llvm::UndefValue ***)((char *)v196 + 8 * v21);
  if (v9 == 27)
    v26 = 1884;
  else
    v26 = 2306;
  v184 = v26;
  do
  {
    v27 = *v25;
    v28 = (*v25)[5];
    v29 = (_QWORD **)*((_QWORD *)v28 + 7);
    v30 = v29[5];
    Declaration = llvm::Intrinsic::getDeclaration(v30, v184, 0, 0);
    v32 = v28 >> 4;
    if ((*((_BYTE *)v28 + 23) & 0x10) != 0)
    {
      v33 = ***(_QWORD ***)v28;
      v34 = *(_QWORD *)(v33 + 152);
      v35 = *(unsigned int *)(v33 + 168);
      if ((_DWORD)v35)
      {
        LODWORD(v36) = (v35 - 1) & (v32 ^ (v28 >> 9));
        v37 = (llvm::UndefValue **)(v34 + 16 * v36);
        v38 = *v37;
        if (*v37 == v28)
        {
LABEL_60:
          v41 = v37[1];
          v44 = *(_QWORD *)v41;
          v43 = (char *)v41 + 16;
          v42 = v44;
          goto LABEL_61;
        }
        v39 = 1;
        while (v38 != (llvm::UndefValue *)-4096)
        {
          v40 = v36 + v39++;
          v36 = v40 & (v35 - 1);
          v38 = *(llvm::UndefValue **)(v34 + 16 * v36);
          if (v38 == v28)
          {
            v37 = (llvm::UndefValue **)(v34 + 16 * v36);
            goto LABEL_60;
          }
        }
      }
      v37 = (llvm::UndefValue **)(v34 + 16 * v35);
      goto LABEL_60;
    }
    v42 = 0;
    v43 = &byte_1C871356D;
LABEL_61:
    v205 = 773;
    v202 = v43;
    v203 = v42;
    v204[0] = ".atomic";
    v45 = (uint64_t *)llvm::BasicBlock::splitBasicBlock((uint64_t *)v28, (uint64_t *)v27 + 3, (uint64_t)&v202, 0);
    v46 = (llvm::BasicBlock *)v45;
    v47 = v27[4];
    if (v47)
      v48 = v47 == (llvm::UndefValue *)((char *)v27[5] + 40);
    else
      v48 = 1;
    if (v48)
      v49 = 0;
    else
      v49 = (uint64_t *)((char *)v47 - 24);
    if ((*((_BYTE *)v28 + 23) & 0x10) != 0)
    {
      v50 = ***(_QWORD ***)v28;
      v51 = *(_QWORD *)(v50 + 152);
      v52 = *(unsigned int *)(v50 + 168);
      if ((_DWORD)v52)
      {
        LODWORD(v53) = (v52 - 1) & (v32 ^ (v28 >> 9));
        v54 = (llvm::UndefValue **)(v51 + 16 * v53);
        v55 = *v54;
        if (*v54 == v28)
        {
LABEL_75:
          v58 = v54[1];
          v61 = *(_QWORD *)v58;
          v60 = (char *)v58 + 16;
          v59 = v61;
          goto LABEL_76;
        }
        v56 = 1;
        while (v55 != (llvm::UndefValue *)-4096)
        {
          v57 = v53 + v56++;
          v53 = v57 & (v52 - 1);
          v55 = *(llvm::UndefValue **)(v51 + 16 * v53);
          if (v55 == v28)
          {
            v54 = (llvm::UndefValue **)(v51 + 16 * v53);
            goto LABEL_75;
          }
        }
      }
      v54 = (llvm::UndefValue **)(v51 + 16 * v52);
      goto LABEL_75;
    }
    v59 = 0;
    v60 = &byte_1C871356D;
LABEL_76:
    v205 = 773;
    v202 = v60;
    v203 = v59;
    v204[0] = ".after";
    v188 = (llvm::BasicBlock *)llvm::BasicBlock::splitBasicBlock(v45, v49 + 3, (uint64_t)&v202, 0);
    if (!v27[1])
    {
      v70 = (_QWORD ***)*((_QWORD *)v28 + 5);
      if (v70 == (_QWORD ***)((char *)v28 + 40))
      {
        v72 = 0;
      }
      else
      {
        if (v70)
          v71 = (uint64_t)(v70 - 3);
        else
          v71 = 0;
        if (*(unsigned __int8 *)(v71 + 16) - 29 >= 0xB)
          v72 = 0;
        else
          v72 = v71;
      }
      v73 = (uint64_t *)sub_1C4773D54((uint64_t)&v202, v72, 0, 0, 0);
      if (Declaration)
        v74 = *(uint64_t ***)(Declaration + 24);
      else
        v74 = 0;
      v194 = 257;
      v76 = sub_1C4774778(v73, v74, Declaration, 0, 0, (uint64_t)&v192, 0);
      v77 = *(llvm::ConstantInt **)(*v208 + 1960);
      v193 = *(_DWORD *)(*v208 + 1968) >> 8;
      if (v193 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&v192, 0, 0);
      else
        v192 = 0;
      v78 = llvm::ConstantInt::get(v77, (llvm::LLVMContext *)&v192, v75);
      if (v193 >= 0x41 && v192)
        MEMORY[0x1CAA32F9C](v192, 0x1000C8000313F17);
      v194 = 257;
      v79 = (llvm::Value *)sub_1C4774B48((uint64_t)&v202, 32, v76, (uint64_t)v78, (uint64_t)&v192);
      v80 = operator new(0xA0uLL);
      v81 = v80;
      v82 = 0;
      v83 = (llvm::Value *)(v80 + 24);
      v80[29] = v80[29] & 0x38000000 | 3;
      do
      {
        v84 = &v80[v82];
        *v84 = 0;
        v84[1] = 0;
        v84[2] = 0;
        v84[3] = v83;
        v82 += 8;
      }
      while (v82 != 24);
      llvm::BranchInst::BranchInst((llvm::BranchInst *)(v80 + 24), v188, v46, v79, 0);
      v194 = 257;
      (*(void (**)(uint64_t, llvm::Value *, unsigned __int8 **, uint64_t, uint64_t))(*(_QWORD *)v209 + 16))(v209, v83, &v192, v206, v207);
      if (!(_DWORD)v203)
      {
LABEL_115:
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v72 + 40) + 40, (uint64_t ***)v72);
        v92 = *(_QWORD *)(v72 + 24);
        v93 = *(_QWORD **)(v72 + 32);
        *v93 = v92;
        *(_QWORD *)(v92 + 8) = v93;
        *(_QWORD *)(v72 + 24) = 0;
        *(_QWORD *)(v72 + 32) = 0;
        llvm::Value::deleteValue((llvm::Value *)v72);
        if (v202 != (char *)v204)
          free(v202);
        goto LABEL_203;
      }
      v85 = v202;
      v86 = &v202[16 * v203];
      v87 = (unsigned __int8 **)(v81 + 36);
      while (1)
      {
        v88 = *(_DWORD *)v85;
        v89 = (unsigned __int8 *)*((_QWORD *)v85 + 1);
        if (v89)
        {
          if (!v88)
          {
            v190[0] = *((_QWORD *)v85 + 1);
            llvm::MetadataTracking::track((uint64_t)v190, v89, 2);
            v90 = *v87;
            if (!*v87)
            {
LABEL_113:
              v91 = (unsigned __int8 *)v190[0];
              *v87 = (unsigned __int8 *)v190[0];
              if (v91)
                llvm::MetadataTracking::retrack((uint64_t)v190, v91, (uint64_t)(v81 + 36));
              goto LABEL_110;
            }
LABEL_107:
            llvm::MetadataTracking::untrack((uint64_t)(v81 + 36), v90);
            goto LABEL_113;
          }
        }
        else
        {
          v90 = *v87;
          if (!*v87 && (*((_BYTE *)v81 + 119) & 0x20) == 0)
            goto LABEL_110;
          if (!v88)
          {
            v190[0] = 0;
            if (!v90)
              goto LABEL_113;
            goto LABEL_107;
          }
        }
        llvm::Value::setMetadata(v83, *(_DWORD *)v85, (llvm::MDNode *)v89);
LABEL_110:
        v85 += 16;
        if (v85 == v86)
          goto LABEL_115;
      }
    }
    v187 = v46;
    if ((*((_BYTE *)v28 + 23) & 0x10) != 0)
    {
      v62 = ***(_QWORD ***)v28;
      v63 = *(_QWORD *)(v62 + 152);
      v64 = *(unsigned int *)(v62 + 168);
      if ((_DWORD)v64)
      {
        LODWORD(v65) = (v64 - 1) & (v32 ^ (v28 >> 9));
        v66 = (llvm::UndefValue **)(v63 + 16 * v65);
        v67 = *v66;
        if (*v66 == v28)
        {
LABEL_119:
          v94 = v66[1];
          v97 = *(_QWORD *)v94;
          v96 = (char *)v94 + 16;
          v95 = v97;
          goto LABEL_120;
        }
        v68 = 1;
        while (v67 != (llvm::UndefValue *)-4096)
        {
          v69 = v65 + v68++;
          v65 = v69 & (v64 - 1);
          v67 = *(llvm::UndefValue **)(v63 + 16 * v65);
          if (v67 == v28)
          {
            v66 = (llvm::UndefValue **)(v63 + 16 * v65);
            goto LABEL_119;
          }
        }
      }
      v66 = (llvm::UndefValue **)(v63 + 16 * v64);
      goto LABEL_119;
    }
    v95 = 0;
    v96 = &byte_1C871356D;
LABEL_120:
    v98 = *(_QWORD **)*v27;
    v205 = 773;
    v202 = v96;
    v203 = v95;
    v204[0] = ".load";
    v99 = operator new();
    *(_QWORD *)v99 = *v98 + 1600;
    *(_QWORD *)(v99 + 8) = 0;
    v100 = *(_DWORD *)(v99 + 20) & 0xC0000000;
    *(_QWORD *)(v99 + 24) = 0;
    v101 = v99 + 24;
    *(_DWORD *)(v99 + 16) = 22;
    *(_DWORD *)(v99 + 20) = v100;
    *(_QWORD *)(v99 + 32) = 0;
    *(_QWORD *)(v99 + 40) = v99 + 40;
    *(_QWORD *)(v99 + 48) = v99 + 40;
    *(_QWORD *)(v99 + 56) = 0;
    if (v29)
    {
      v102 = (uint64_t)(v29 + 9);
      if (v46)
        v103 = (uint64_t *)((char *)v46 + 24);
      else
        v103 = (uint64_t *)(v29 + 9);
      llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v102, (_QWORD *)v99);
      v104 = *v103;
      *(_QWORD *)(v99 + 24) = *v103;
      *(_QWORD *)(v99 + 32) = v103;
      *(_QWORD *)(v104 + 8) = v101;
      *v103 = v101;
    }
    llvm::Value::setName((uint64_t ***)v99, (uint64_t)&v202);
    v105 = (_QWORD ***)*((_QWORD *)v28 + 5);
    if (v105 == (_QWORD ***)((char *)v28 + 40))
    {
      v107 = 0;
    }
    else
    {
      if (v105)
        v106 = (uint64_t)(v105 - 3);
      else
        v106 = 0;
      if (*(unsigned __int8 *)(v106 + 16) - 29 >= 0xB)
        v107 = 0;
      else
        v107 = v106;
    }
    v108 = (uint64_t *)sub_1C4773D54((uint64_t)&v202, v107, 0, 0, 0);
    if (Declaration)
      v109 = *(uint64_t ***)(Declaration + 24);
    else
      v109 = 0;
    v194 = 257;
    v111 = sub_1C4774778(v108, v109, Declaration, 0, 0, (uint64_t)&v192, 0);
    v112 = *(llvm::ConstantInt **)(*v208 + 1960);
    v193 = *(_DWORD *)(*v208 + 1968) >> 8;
    if (v193 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&v192, 0, 0);
    else
      v192 = 0;
    v113 = llvm::ConstantInt::get(v112, (llvm::LLVMContext *)&v192, v110);
    if (v193 >= 0x41 && v192)
      MEMORY[0x1CAA32F9C](v192, 0x1000C8000313F17);
    v186 = (uint64_t)(v30 + 34);
    v194 = 257;
    v114 = (llvm::Value *)sub_1C4774B48((uint64_t)&v202, 32, v111, (uint64_t)v113, (uint64_t)&v192);
    v115 = operator new(0xA0uLL);
    v116 = v115;
    v117 = 0;
    v118 = (llvm::Value *)(v115 + 24);
    v115[29] = v115[29] & 0x38000000 | 3;
    do
    {
      v119 = &v115[v117];
      *v119 = 0;
      v119[1] = 0;
      v119[2] = 0;
      v119[3] = v118;
      v117 += 8;
    }
    while (v117 != 24);
    llvm::BranchInst::BranchInst((llvm::BranchInst *)(v115 + 24), (llvm::BasicBlock *)v99, v46, v114, 0);
    v194 = 257;
    (*(void (**)(uint64_t, llvm::Value *, unsigned __int8 **, uint64_t, uint64_t))(*(_QWORD *)v209 + 16))(v209, v118, &v192, v206, v207);
    if ((_DWORD)v203)
    {
      v120 = v202;
      v121 = &v202[16 * v203];
      v122 = (unsigned __int8 **)(v116 + 36);
      do
      {
        v123 = *(_DWORD *)v120;
        v124 = (unsigned __int8 *)*((_QWORD *)v120 + 1);
        if (v124)
        {
          if (!v123)
          {
            v190[0] = *((_QWORD *)v120 + 1);
            llvm::MetadataTracking::track((uint64_t)v190, v124, 2);
            v125 = *v122;
            if (!*v122)
            {
LABEL_154:
              v126 = (unsigned __int8 *)v190[0];
              *v122 = (unsigned __int8 *)v190[0];
              if (v126)
                llvm::MetadataTracking::retrack((uint64_t)v190, v126, (uint64_t)(v116 + 36));
              goto LABEL_151;
            }
LABEL_148:
            llvm::MetadataTracking::untrack((uint64_t)(v116 + 36), v125);
            goto LABEL_154;
          }
        }
        else
        {
          v125 = *v122;
          if (!*v122 && (*((_BYTE *)v116 + 119) & 0x20) == 0)
            goto LABEL_151;
          if (!v123)
          {
            v190[0] = 0;
            if (!v125)
              goto LABEL_154;
            goto LABEL_148;
          }
        }
        llvm::Value::setMetadata(v118, *(_DWORD *)v120, (llvm::MDNode *)v124);
LABEL_151:
        v120 += 16;
      }
      while (v120 != v121);
    }
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v107 + 40) + 40, (uint64_t ***)v107);
    v127 = *(_QWORD *)(v107 + 24);
    v128 = *(_QWORD **)(v107 + 32);
    *v128 = v127;
    *(_QWORD *)(v127 + 8) = v128;
    *(_QWORD *)(v107 + 24) = 0;
    *(_QWORD *)(v107 + 32) = 0;
    llvm::Value::deleteValue((llvm::Value *)v107);
    v206 = v99;
    v207 = v99 + 40;
    v129 = 0x1FFFFFFFFFFFFFF8;
    if (*((_BYTE *)v27 + 16) == 65)
      v129 = 0x1FFFFFFFFFFFFFFCLL;
    v130 = (uint64_t)*(v27 - 12);
    v131 = *(_QWORD *)v27[v129];
    v132 = *((_WORD *)v27 + 9);
    v191 = 257;
    llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v99 + 56) + 40) + 272, v131);
    v134 = v133;
    v135 = (char *)operator new(0x60uLL);
    v136 = v135;
    v137 = (llvm::Value *)(v135 + 32);
    *((_QWORD *)v135 + 2) = 0;
    *((_QWORD *)v135 + 3) = v135 + 32;
    v194 = 257;
    *((_QWORD *)v135 + 4) = v131;
    *((_QWORD *)v135 + 5) = 0;
    *((_WORD *)v135 + 24) = 60;
    *((_DWORD *)v135 + 13) = 1;
    *(_OWORD *)(v135 + 56) = 0u;
    *(_OWORD *)(v135 + 72) = 0u;
    *((_DWORD *)v135 + 22) = 0;
    *(_QWORD *)v135 = v130;
    *((_QWORD *)v135 + 1) = 0;
    if (v130)
    {
      v140 = *(_QWORD *)(v130 + 8);
      v139 = (_QWORD *)(v130 + 8);
      v138 = v140;
      *((_QWORD *)v135 + 1) = v140;
      if (v140)
        *(_QWORD *)(v138 + 16) = v135 + 8;
      *((_QWORD *)v135 + 2) = v139;
      *v139 = v135;
    }
    *((_WORD *)v135 + 25) = v132 & 1 | (2 * (v134 & 0x3F));
    v135[92] = 1;
    llvm::Value::setName((uint64_t ***)v135 + 4, (uint64_t)&v192);
    (*(void (**)(uint64_t, llvm::Value *, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)v209 + 16))(v209, v137, v190, v206, v207);
    if ((_DWORD)v203)
    {
      v175 = v202;
      v176 = &v202[16 * v203];
      v177 = (unsigned __int8 **)(v136 + 80);
      do
      {
        v178 = *(_DWORD *)v175;
        v179 = (unsigned __int8 *)*((_QWORD *)v175 + 1);
        if (v179)
        {
          if (!v178)
          {
            v195 = (unsigned __int8 *)*((_QWORD *)v175 + 1);
            llvm::MetadataTracking::track((uint64_t)&v195, v179, 2);
            v180 = *v177;
            goto LABEL_216;
          }
        }
        else
        {
          v180 = *v177;
          if (!*v177 && (v136[55] & 0x20) == 0)
            goto LABEL_213;
          if (!v178)
          {
            v195 = 0;
LABEL_216:
            if (v180)
              llvm::MetadataTracking::untrack((uint64_t)(v136 + 80), v180);
            v181 = v195;
            *v177 = v195;
            if (v181)
              llvm::MetadataTracking::retrack((uint64_t)&v195, v181, (uint64_t)(v136 + 80));
            goto LABEL_213;
          }
        }
        llvm::Value::setMetadata(v137, *(_DWORD *)v175, (llvm::MDNode *)v179);
LABEL_213:
        v175 += 16;
      }
      while (v175 != v176);
    }
    v141 = *((_BYTE *)v27 + 60);
    *((_WORD *)v136 + 25) = *((_WORD *)v136 + 25) & 0xFC7F | (4 * *((_WORD *)v27 + 9)) & 0x380;
    v136[92] = v141;
    llvm::DataLayout::getAlignment(v186, *((_QWORD *)v136 + 4));
    *((_WORD *)v136 + 25) = *((_WORD *)v136 + 25) & 0xFF81 | (2 * v142);
    v144 = llvm::UndefValue::get(*v27, v143);
    LODWORD(v190[0]) = 0;
    v194 = 257;
    v146 = sub_1C506D788((uint64_t)&v202, (uint64_t)v144, (uint64_t)v137, v190, 1, (uint64_t)&v192);
    v147 = *v208;
    v148 = *(llvm::ValueHandleBase **)(*v208 + 1568);
    if (!v148)
    {
      v182 = *(llvm::ConstantInt **)(v147 + 1888);
      v193 = *(_DWORD *)(v147 + 1896) >> 8;
      if (v193 > 0x40)
        llvm::APInt::initSlowCase((llvm::APInt *)&v192, 0, 0);
      else
        v192 = 0;
      v148 = llvm::ConstantInt::get(v182, (llvm::LLVMContext *)&v192, v145);
      if (v193 >= 0x41 && v192)
        MEMORY[0x1CAA32F9C](v192, 0x1000C8000313F17);
      *(_QWORD *)(v147 + 1568) = v148;
    }
    LODWORD(v190[0]) = 1;
    v194 = 257;
    v149 = sub_1C506D788((uint64_t)&v202, v146, (uint64_t)v148, v190, 1, (uint64_t)&v192);
    v150 = (char *)operator new(0x60uLL);
    v151 = v150;
    *((_DWORD *)v150 + 13) = *((_DWORD *)v150 + 13) & 0x38000000 | 1;
    *(_QWORD *)v150 = 0;
    *((_QWORD *)v150 + 2) = 0;
    *((_QWORD *)v150 + 1) = 0;
    *((_QWORD *)v150 + 4) = ***(_QWORD ***)v188 + 1576;
    v152 = (llvm::Value *)(v150 + 32);
    *((_QWORD *)v150 + 3) = v150 + 32;
    *((_QWORD *)v150 + 5) = 0;
    v150[48] = 30;
    v150[49] = 0;
    *((_WORD *)v150 + 25) = 0;
    *((_DWORD *)v150 + 13) = 1;
    *(_OWORD *)(v150 + 56) = 0u;
    *(_OWORD *)(v150 + 72) = 0u;
    *((_DWORD *)v150 + 22) = 0;
    *(_QWORD *)v150 = v188;
    v153 = (_QWORD *)((char *)v188 + 8);
    v154 = *((_QWORD *)v188 + 1);
    *((_QWORD *)v150 + 1) = v154;
    if (v154)
      *(_QWORD *)(v154 + 16) = v150 + 8;
    *((_QWORD *)v150 + 2) = v153;
    *v153 = v150;
    v194 = 257;
    (*(void (**)(uint64_t, llvm::Value *, unsigned __int8 **, uint64_t, uint64_t))(*(_QWORD *)v209 + 16))(v209, v152, &v192, v206, v207);
    if ((_DWORD)v203)
    {
      v155 = v202;
      v156 = &v202[16 * v203];
      v157 = (unsigned __int8 **)(v151 + 80);
      do
      {
        v158 = *(_DWORD *)v155;
        v159 = (unsigned __int8 *)*((_QWORD *)v155 + 1);
        if (v159)
        {
          if (!v158)
          {
            v190[0] = *((_QWORD *)v155 + 1);
            llvm::MetadataTracking::track((uint64_t)v190, v159, 2);
            v160 = *v157;
            if (!*v157)
            {
LABEL_179:
              v161 = (unsigned __int8 *)v190[0];
              *v157 = (unsigned __int8 *)v190[0];
              if (v161)
                llvm::MetadataTracking::retrack((uint64_t)v190, v161, (uint64_t)(v151 + 80));
              goto LABEL_176;
            }
LABEL_173:
            llvm::MetadataTracking::untrack((uint64_t)(v151 + 80), v160);
            goto LABEL_179;
          }
        }
        else
        {
          v160 = *v157;
          if (!*v157 && (v151[55] & 0x20) == 0)
            goto LABEL_176;
          if (!v158)
          {
            v190[0] = 0;
            if (!v160)
              goto LABEL_179;
            goto LABEL_173;
          }
        }
        llvm::Value::setMetadata(v152, *(_DWORD *)v155, (llvm::MDNode *)v159);
LABEL_176:
        v155 += 16;
      }
      while (v155 != v156);
    }
    v162 = (char *)v188 + 40;
    v163 = (char *)*((_QWORD *)v188 + 6);
    if (v163 == (char *)v188 + 40)
    {
      v164 = (uint64_t)v187;
    }
    else
    {
      v164 = (uint64_t)v187;
      while (1)
      {
        v165 = v163 - 24;
        if (!v163)
          v165 = 0;
        if (v165[16] != 83)
          break;
        v163 = (char *)*((_QWORD *)v163 + 1);
        if (v163 == v162)
          goto LABEL_194;
      }
      v166 = *(v163 - 8) - 38;
      v167 = v166 > 0x38;
      v168 = (1 << v166) & 0x100060000000001;
      if (v167 || v168 == 0)
        v162 = v163;
      else
        v162 = (char *)*((_QWORD *)v163 + 1);
    }
LABEL_194:
    v170 = 0;
    if (v162)
      v171 = v162 - 24;
    else
      v171 = 0;
    v206 = *((_QWORD *)v171 + 5);
    v207 = (uint64_t)(v171 + 24);
    v172 = (unsigned __int8 *)*((_QWORD *)v171 + 6);
    v192 = v172;
    if (v172)
    {
      llvm::MetadataTracking::track((uint64_t)&v192, v172, 2);
      v170 = v192;
    }
    sub_1C4774EF4((uint64_t)&v202, 0, (uint64_t)v170);
    if (v192)
      llvm::MetadataTracking::untrack((uint64_t)&v192, v192);
    v173 = *v27;
    v194 = 257;
    v174 = (llvm::Value *)sub_1C4867E94((uint64_t)&v202, (uint64_t)v173, 2, (uint64_t)&v192);
    llvm::Value::doRAUW((llvm::ValueAsMetadata *)v27, v174, (llvm::Value *)1);
    sub_1C477667C(v174, (uint64_t)v27, v164);
    sub_1C477667C(v174, v149, v99);
    if (v202 != (char *)v204)
      free(v202);
LABEL_203:
    ++v25;
  }
  while (v25 != v185);
  v8 = 1;
LABEL_239:
  if (v196 != v198)
    free(v196);
  if (v199 != v201)
    free(v199);
  return v8;
}

uint64_t sub_1C55A139C()
{
  __int128 v1;
  char v2;
  _BYTE *v3;

  v2 = 0;
  v3 = &v2;
  *(_QWORD *)&v1 = "Set the default value for the IsG12 function";
  *((_QWORD *)&v1 + 1) = 44;
  sub_1C615C834((uint64_t)&unk_1ED806670, "atomicoptimize-isg12-default", &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED806670, &dword_1C475E000);
  v2 = 0;
  v3 = &v2;
  *(_QWORD *)&v1 = "Set the default value for optimizing divergent data";
  *((_QWORD *)&v1 + 1) = 51;
  sub_1C627AB30(&v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, qword_1ED806730, &dword_1C475E000);
}

uint64_t sub_1C55A1454(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Print information about modules, tag functions and extract basic blocks";
  *(_QWORD *)(v2 + 8) = 71;
  *(_QWORD *)(v2 + 16) = "bisect-helper";
  *(_QWORD *)(v2 + 24) = 13;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F3010;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C55A14E4;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

double sub_1C55A14E4()
{
  _QWORD *v0;
  double result;

  v0 = (_QWORD *)operator new();
  v0[1] = 0;
  v0[2] = &unk_1EF8F3010;
  *v0 = &off_1E81700B0;
  *(_QWORD *)&result = 4;
  v0[3] = 4;
  return result;
}

void sub_1C55A1534(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C55A1558(uint64_t a1, llvm::AGXIR *a2)
{
  llvm::AGXIR *v2;
  uint64_t v3;
  uint64_t ShaderID;
  llvm::raw_ostream *v6;
  _BYTE *v7;
  uint64_t v8;
  uint64_t v9;
  __int32 *v10;
  uint64_t v11;
  char v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *i;
  uint64_t ***v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t ***v23;
  int v24;
  int v25;
  size_t v26;
  uint64_t *v27;
  const llvm::MemoryBuffer *v28;
  uint64_t v29;
  size_t v30;
  uint64_t *v31;
  _QWORD *v32;
  llvm::raw_ostream *v33;
  uint64_t ***v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t ****v39;
  uint64_t ***v40;
  int v41;
  int v42;
  uint64_t ***v43;
  char *v44;
  size_t v45;
  size_t v46;
  uint64_t ***v47;
  uint64_t **j;
  uint64_t ***v49;
  uint64_t v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t ****v54;
  uint64_t ***v55;
  int v56;
  int v57;
  size_t *v58;
  size_t v59;
  const void *v60;
  size_t v61;
  _BYTE *v62;
  void *v63;
  _BYTE *v64;
  size_t v65;
  uint64_t *v66;
  const llvm::MemoryBuffer *v67;
  char v68;
  size_t v69;
  uint64_t *v70;
  _QWORD *v71;
  llvm::raw_ostream *v72;
  uint64_t ***v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t ****v78;
  uint64_t ***v79;
  int v80;
  int v81;
  uint64_t ***v82;
  const char *v83;
  size_t v84;
  size_t v85;
  _BYTE *v86;
  char v87;
  size_t v88;
  uint64_t *v89;
  const llvm::MemoryBuffer *v90;
  BOOL v91;
  size_t v93;
  llvm::raw_ostream *v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  uint64_t v98;
  uint64_t v99;
  uint64_t ***v100;
  uint64_t *v101;
  uint64_t v102;
  uint64_t v103;
  unint64_t v104;
  unsigned __int8 *v105;
  unint64_t v106;
  unint64_t v107;
  unsigned __int8 *v108;
  size_t v109;
  uint64_t v110;
  uint64_t v111;
  uint64_t v112;
  uint64_t ***v113;
  uint64_t *v114;
  uint64_t v115;
  uint64_t v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t **v119;
  uint64_t *v120;
  int v121;
  int v122;
  uint64_t *v123;
  char *v124;
  uint64_t v125;
  uint64_t v126;
  unsigned int v127;
  uint64_t v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  uint64_t ****v132;
  uint64_t ***v133;
  int v134;
  int v135;
  size_t *v136;
  const void *v137;
  size_t v138;
  size_t v139;
  _BYTE *v140;
  uint64_t v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t **v145;
  uint64_t *v146;
  int v147;
  int v148;
  uint64_t *v149;
  const char *v150;
  size_t v151;
  size_t v152;
  _BYTE *v153;
  uint64_t *v154;
  int v155;
  unsigned int v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t **v162;
  uint64_t *v163;
  int v164;
  int v165;
  uint64_t *v166;
  uint64_t v167;
  char *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t ****v176;
  uint64_t ***v177;
  int v178;
  int v179;
  size_t *v180;
  const void *v181;
  size_t v182;
  size_t v183;
  _BYTE *v184;
  uint64_t v185;
  uint64_t v186;
  uint64_t v187;
  uint64_t v188;
  uint64_t *v189;
  uint64_t v190;
  int v191;
  int v192;
  _QWORD *v193;
  const char *v194;
  size_t v195;
  size_t v196;
  _BYTE *v197;
  unsigned int v198;
  unint64_t v199;
  unint64_t v200;
  uint64_t v201;
  uint64_t v203;
  unsigned int v204;
  const void **v205;
  const void **v206;
  uint64_t v207;
  uint64_t v208;
  size_t v209;
  const void *v210;
  uint64_t ***v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t v215;
  uint64_t ****v216;
  uint64_t ***v217;
  int v218;
  int v219;
  uint64_t ***v220;
  char *v221;
  uint64_t **v222;
  uint64_t **v223;
  char *v224;
  unint64_t v225;
  void **v226;
  uint64_t BlockExtractorPass;
  const llvm::MemoryBuffer *v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t v231;
  char v232;
  llvm::AGXIR *v233;
  llvm::AGXIR *v234;
  uint64_t v235;
  unsigned int v236;
  _QWORD v237[2];
  _BYTE v238[32];
  char v239;
  unsigned int v240;
  unsigned __int8 *v241;
  unint64_t v242;
  const llvm::MemoryBuffer *v243;
  void *v244;
  uint64_t v245;
  _WORD v246[64];
  void *v247;
  uint64_t v248;
  _BYTE v249[64];
  llvm::raw_ostream *v250;
  uint64_t v251;
  uint64_t v252;
  __int16 v253;
  unsigned int v254;
  unsigned __int8 *v255;
  unint64_t v256;
  uint64_t v257;

  v2 = a2;
  v257 = *MEMORY[0x1E0C80C00];
  v3 = qword_1ED806B98;
  if (byte_1ED806BA7 >= 0)
    v3 = byte_1ED806BA7 & 0x7F;
  if (v3)
  {
    ShaderID = llvm::AGXIR::getShaderID(a2, a2);
    if ((ShaderID & 0xFF00000000) != 0 && *(_DWORD *)(a1 + 28) < ShaderID)
    {
      *(_DWORD *)(a1 + 28) = ShaderID;
      sub_1C55A2820((uint64_t *)&v250, (uint64_t)&unk_1ED806B90);
      v6 = v250;
      sub_1C5E21910(v250, *(unsigned int *)(a1 + 28), 0, 0, 0);
      v7 = (_BYTE *)*((_QWORD *)v6 + 4);
      if ((unint64_t)v7 >= *((_QWORD *)v6 + 3))
      {
        llvm::raw_ostream::write(v6, 10);
      }
      else
      {
        *((_QWORD *)v6 + 4) = v7 + 1;
        *v7 = 10;
      }
      (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v6 + 8))(v6);
    }
  }
  if (qword_1ED806AB8 != qword_1ED806AC0)
  {
    v8 = llvm::AGXIR::getShaderID(v2, a2);
    if ((v8 & 0xFF00000000) != 0)
    {
      v9 = qword_1ED806AC0;
      v10 = wmemchr((__int32 *)qword_1ED806AB8, v8, (qword_1ED806AC0 - qword_1ED806AB8) >> 2);
      if (v10)
        v11 = (uint64_t)v10;
      else
        v11 = v9;
      if (v11 == qword_1ED806AC0)
      {
        v12 = 0;
        return v12 & 1;
      }
    }
    else
    {
      v12 = byte_1ED806878;
      if (!byte_1ED806878)
        return v12 & 1;
    }
  }
  if (!byte_1ED806938)
    goto LABEL_39;
  v13 = (_QWORD *)*((_QWORD *)v2 + 4);
  if (v13 == (_QWORD *)((char *)v2 + 24))
    goto LABEL_39;
  do
  {
    v14 = v13 - 7;
    if (!v13)
      v14 = 0;
    v15 = v14 + 9;
    for (i = (_QWORD *)v14[10]; i != v15; i = (_QWORD *)i[1])
    {
      if (i)
        v17 = (uint64_t ***)(i - 3);
      else
        v17 = 0;
      if ((*((_BYTE *)v17 + 23) & 0x10) != 0)
      {
        v18 = ***v17;
        v19 = *(_QWORD *)(v18 + 152);
        v20 = *(unsigned int *)(v18 + 168);
        if (!(_DWORD)v20)
          goto LABEL_34;
        LODWORD(v21) = (v20 - 1) & ((v17 >> 4) ^ (v17 >> 9));
        v22 = v19 + 16 * v21;
        v23 = *(uint64_t ****)v22;
        if (*(uint64_t ****)v22 != v17)
        {
          v24 = 1;
          while (v23 != (uint64_t ***)-4096)
          {
            v25 = v21 + v24++;
            v21 = v25 & (v20 - 1);
            v23 = *(uint64_t ****)(v19 + 16 * v21);
            if (v23 == v17)
            {
              v22 = v19 + 16 * v21;
              goto LABEL_35;
            }
          }
LABEL_34:
          v22 = v19 + 16 * v20;
        }
LABEL_35:
        if (**(_QWORD **)(v22 + 8))
          continue;
      }
      v250 = (llvm::raw_ostream *)"bisect-helper-named";
      v253 = 259;
      llvm::Value::setName(v17, (uint64_t)&v250);
    }
    v13 = (_QWORD *)v13[1];
  }
  while (v13 != (_QWORD *)((char *)v2 + 24));
LABEL_39:
  if (byte_1ED80702F >= 0)
    v26 = byte_1ED80702F & 0x7F;
  else
    v26 = qword_1ED807020;
  if (!v26
    || (byte_1ED80702F >= 0 ? (v27 = &qword_1ED807018) : (v27 = (uint64_t *)qword_1ED807018),
        sub_1C55A2904(&v247, v27, v26, v2),
        (v28 = (const llvm::MemoryBuffer *)v247) == 0))
  {
    LOBYTE(v29) = 0;
    goto LABEL_48;
  }
  if (byte_1ED807117 >= 0)
    v93 = byte_1ED807117 & 0x7F;
  else
    v93 = qword_1ED807108;
  if (v93)
  {
    if (byte_1ED807117 >= 0)
      v101 = &qword_1ED807100;
    else
      v101 = (uint64_t *)qword_1ED807100;
    sub_1C55A2AAC((uint64_t *)&v250, v101, v93, v2);
    v94 = v250;
  }
  else
  {
    v94 = 0;
  }
  v235 = (*(uint64_t (**)(const llvm::MemoryBuffer *))(*(_QWORD *)v28 + 16))(v28);
  v231 = v102;
  llvm::line_iterator::line_iterator((llvm::line_iterator *)&v250, v28, 1, 35);
  if ((_BYTE)v253)
  {
    v29 = 0;
    v233 = v2;
    while (1)
    {
      v103 = v29;
      LOBYTE(v244) = 58;
      v104 = llvm::StringRef::find((uint64_t *)&v255, (char *)&v244, 1uLL, 0);
      if (v104 == -1)
      {
        v109 = 0;
        v108 = 0;
        v105 = v255;
        v106 = v256;
      }
      else
      {
        v105 = v255;
        if (v256 >= v104)
          v106 = v104;
        else
          v106 = v256;
        if (v256 >= v104 + 1)
          v107 = v104 + 1;
        else
          v107 = v256;
        v108 = &v255[v107];
        v109 = v256 - v107;
      }
      v110 = sub_1C55A2BE0(*((uint64_t **)v2 + 14), v105, v106, v235, v231, v254);
      v111 = v110 + 72;
      v112 = *(_QWORD *)(v110 + 80);
      if (v112 == v110 + 72)
LABEL_344:
        llvm::report_fatal_error((llvm *)"Invalid block name specified in the input file", (const char *)1);
      v113 = (uint64_t ***)v110;
      while (1)
      {
        if (v112)
          v114 = (uint64_t *)(v112 - 24);
        else
          v114 = 0;
        if ((*((_BYTE *)v114 + 23) & 0x10) == 0)
        {
          v125 = 0;
          v124 = &byte_1C871356D;
          goto LABEL_193;
        }
        v115 = **(_QWORD **)*v114;
        v116 = *(_QWORD *)(v115 + 152);
        v117 = *(unsigned int *)(v115 + 168);
        if (!(_DWORD)v117)
          goto LABEL_191;
        LODWORD(v118) = (v117 - 1) & ((v114 >> 4) ^ (v114 >> 9));
        v119 = (uint64_t **)(v116 + 16 * v118);
        v120 = *v119;
        if (*v119 != v114)
        {
          v121 = 1;
          while (v120 != (uint64_t *)-4096)
          {
            v122 = v118 + v121++;
            v118 = v122 & (v117 - 1);
            v120 = *(uint64_t **)(v116 + 16 * v118);
            if (v120 == v114)
            {
              v119 = (uint64_t **)(v116 + 16 * v118);
              goto LABEL_192;
            }
          }
LABEL_191:
          v119 = (uint64_t **)(v116 + 16 * v117);
        }
LABEL_192:
        v123 = v119[1];
        v126 = *v123;
        v124 = (char *)(v123 + 2);
        v125 = v126;
LABEL_193:
        if (v125 == v109 && (!v109 || !memcmp(v124, v108, v109)))
          break;
        v112 = *(_QWORD *)(v112 + 8);
        if (v112 == v111)
          goto LABEL_344;
      }
      v127 = v113 >> 4;
      v29 = v103;
      if (v94)
      {
        if ((*((_BYTE *)v113 + 23) & 0x10) == 0)
          goto LABEL_210;
        v128 = ***v113;
        v129 = *(_QWORD *)(v128 + 152);
        v130 = *(unsigned int *)(v128 + 168);
        if (!(_DWORD)v130)
          goto LABEL_207;
        LODWORD(v131) = (v130 - 1) & (v127 ^ (v113 >> 9));
        v132 = (uint64_t ****)(v129 + 16 * v131);
        v133 = *v132;
        if (*v132 != v113)
        {
          v134 = 1;
          while (v133 != (uint64_t ***)-4096)
          {
            v135 = v131 + v134++;
            v131 = v135 & (v130 - 1);
            v133 = *(uint64_t ****)(v129 + 16 * v131);
            if (v133 == v113)
            {
              v132 = (uint64_t ****)(v129 + 16 * v131);
              goto LABEL_208;
            }
          }
LABEL_207:
          v132 = (uint64_t ****)(v129 + 16 * v130);
        }
LABEL_208:
        v136 = (size_t *)v132[1];
        v139 = *v136;
        v137 = v136 + 2;
        v138 = v139;
        v140 = (_BYTE *)*((_QWORD *)v94 + 4);
        if (v139 <= *((_QWORD *)v94 + 3) - (_QWORD)v140)
        {
          if (v138)
          {
            memcpy(v140, v137, v138);
            v140 = (_BYTE *)(*((_QWORD *)v94 + 4) + v138);
            *((_QWORD *)v94 + 4) = v140;
          }
        }
        else
        {
          llvm::raw_ostream::write(v94, (const char *)v137, v138);
LABEL_210:
          v140 = (_BYTE *)*((_QWORD *)v94 + 4);
        }
        if (*((_BYTE **)v94 + 3) == v140)
        {
          llvm::raw_ostream::write(v94, ":", 1uLL);
        }
        else
        {
          *v140 = 58;
          ++*((_QWORD *)v94 + 4);
        }
        if ((*((_BYTE *)v114 + 23) & 0x10) != 0)
        {
          v141 = **(_QWORD **)*v114;
          v142 = *(_QWORD *)(v141 + 152);
          v143 = *(unsigned int *)(v141 + 168);
          if (!(_DWORD)v143)
            goto LABEL_222;
          LODWORD(v144) = (v143 - 1) & ((v114 >> 4) ^ (v114 >> 9));
          v145 = (uint64_t **)(v142 + 16 * v144);
          v146 = *v145;
          if (*v145 != v114)
          {
            v147 = 1;
            while (v146 != (uint64_t *)-4096)
            {
              v148 = v144 + v147++;
              v144 = v148 & (v143 - 1);
              v146 = *(uint64_t **)(v142 + 16 * v144);
              if (v146 == v114)
              {
                v145 = (uint64_t **)(v142 + 16 * v144);
                goto LABEL_223;
              }
            }
LABEL_222:
            v145 = (uint64_t **)(v142 + 16 * v143);
          }
LABEL_223:
          v149 = v145[1];
          v152 = *v149;
          v150 = (const char *)(v149 + 2);
          v151 = v152;
          v153 = (_BYTE *)*((_QWORD *)v94 + 4);
          if (v152 > *((_QWORD *)v94 + 3) - (_QWORD)v153)
          {
            llvm::raw_ostream::write(v94, v150, v151);
            goto LABEL_225;
          }
          if (v151)
          {
            memcpy(v153, v150, v151);
            v153 = (_BYTE *)(*((_QWORD *)v94 + 4) + v151);
            *((_QWORD *)v94 + 4) = v153;
          }
        }
        else
        {
LABEL_225:
          v153 = (_BYTE *)*((_QWORD *)v94 + 4);
        }
        if (*((_BYTE **)v94 + 3) == v153)
        {
          llvm::raw_ostream::write(v94, "\n", 1uLL);
        }
        else
        {
          *v153 = 10;
          ++*((_QWORD *)v94 + 4);
        }
      }
      v154 = (uint64_t *)v114[5];
      if (v154 != v114 + 5)
      {
        v155 = 0;
        v156 = v127 ^ (v113 >> 9);
        while (1)
        {
          if (*((_BYTE *)v154 - 8) == 83)
            goto LABEL_281;
          v157 = *v154;
          if (++v155 == dword_1ED8069F8)
            break;
LABEL_276:
          v154 = (uint64_t *)v157;
          if ((uint64_t *)v157 == v114 + 5)
            goto LABEL_281;
        }
        if ((*((_BYTE *)v114 + 23) & 0x10) != 0)
        {
          v158 = **(_QWORD **)*v114;
          v159 = *(_QWORD *)(v158 + 152);
          v160 = *(unsigned int *)(v158 + 168);
          if (!(_DWORD)v160)
            goto LABEL_241;
          LODWORD(v161) = (v160 - 1) & ((v114 >> 4) ^ (v114 >> 9));
          v162 = (uint64_t **)(v159 + 16 * v161);
          v163 = *v162;
          if (*v162 != v114)
          {
            v164 = 1;
            while (v163 != (uint64_t *)-4096)
            {
              v165 = v161 + v164++;
              v161 = v165 & (v160 - 1);
              v163 = *(uint64_t **)(v159 + 16 * v161);
              if (v163 == v114)
              {
                v162 = (uint64_t **)(v159 + 16 * v161);
                goto LABEL_242;
              }
            }
LABEL_241:
            v162 = (uint64_t **)(v159 + 16 * v160);
          }
LABEL_242:
          v166 = v162[1];
          v169 = *v166;
          v168 = (char *)(v166 + 2);
          v167 = v169;
        }
        else
        {
          v167 = 0;
          v168 = &byte_1C871356D;
        }
        v246[8] = 261;
        v244 = v168;
        v245 = v167;
        v170 = llvm::BasicBlock::splitBasicBlock(v114, v154, (uint64_t)&v244, 0);
        if (v94)
        {
          v171 = v170;
          if ((*((_BYTE *)v113 + 23) & 0x10) == 0)
            goto LABEL_256;
          v172 = ***v113;
          v173 = *(_QWORD *)(v172 + 152);
          v174 = *(unsigned int *)(v172 + 168);
          if (!(_DWORD)v174)
            goto LABEL_253;
          LODWORD(v175) = (v174 - 1) & v156;
          v176 = (uint64_t ****)(v173 + 16 * v175);
          v177 = *v176;
          if (*v176 != v113)
          {
            v178 = 1;
            while (v177 != (uint64_t ***)-4096)
            {
              v179 = v175 + v178++;
              v175 = v179 & (v174 - 1);
              v177 = *(uint64_t ****)(v173 + 16 * v175);
              if (v177 == v113)
              {
                v176 = (uint64_t ****)(v173 + 16 * v175);
                goto LABEL_254;
              }
            }
LABEL_253:
            v176 = (uint64_t ****)(v173 + 16 * v174);
          }
LABEL_254:
          v180 = (size_t *)v176[1];
          v183 = *v180;
          v181 = v180 + 2;
          v182 = v183;
          v184 = (_BYTE *)*((_QWORD *)v94 + 4);
          if (v183 <= *((_QWORD *)v94 + 3) - (_QWORD)v184)
          {
            if (v182)
            {
              memcpy(v184, v181, v182);
              v184 = (_BYTE *)(*((_QWORD *)v94 + 4) + v182);
              *((_QWORD *)v94 + 4) = v184;
            }
          }
          else
          {
            llvm::raw_ostream::write(v94, (const char *)v181, v182);
LABEL_256:
            v184 = (_BYTE *)*((_QWORD *)v94 + 4);
          }
          if (*((_BYTE **)v94 + 3) == v184)
          {
            llvm::raw_ostream::write(v94, ":", 1uLL);
          }
          else
          {
            *v184 = 58;
            ++*((_QWORD *)v94 + 4);
          }
          if ((*(_BYTE *)(v171 + 23) & 0x10) != 0)
          {
            v185 = ***(_QWORD ***)v171;
            v186 = *(_QWORD *)(v185 + 152);
            v187 = *(unsigned int *)(v185 + 168);
            if (!(_DWORD)v187)
              goto LABEL_268;
            LODWORD(v188) = (v187 - 1) & ((v171 >> 4) ^ (v171 >> 9));
            v189 = (uint64_t *)(v186 + 16 * v188);
            v190 = *v189;
            if (*v189 != v171)
            {
              v191 = 1;
              while (v190 != -4096)
              {
                v192 = v188 + v191++;
                v188 = v192 & (v187 - 1);
                v190 = *(_QWORD *)(v186 + 16 * v188);
                if (v190 == v171)
                {
                  v189 = (uint64_t *)(v186 + 16 * v188);
                  goto LABEL_269;
                }
              }
LABEL_268:
              v189 = (uint64_t *)(v186 + 16 * v187);
            }
LABEL_269:
            v193 = (_QWORD *)v189[1];
            v196 = *v193;
            v194 = (const char *)(v193 + 2);
            v195 = v196;
            v197 = (_BYTE *)*((_QWORD *)v94 + 4);
            if (v196 > *((_QWORD *)v94 + 3) - (_QWORD)v197)
            {
              llvm::raw_ostream::write(v94, v194, v195);
              goto LABEL_271;
            }
            if (v195)
            {
              memcpy(v197, v194, v195);
              v197 = (_BYTE *)(*((_QWORD *)v94 + 4) + v195);
              *((_QWORD *)v94 + 4) = v197;
            }
          }
          else
          {
LABEL_271:
            v197 = (_BYTE *)*((_QWORD *)v94 + 4);
          }
          if (*((_BYTE **)v94 + 3) == v197)
          {
            v29 = 1;
            llvm::raw_ostream::write(v94, "\n", 1uLL);
            v155 = 0;
            goto LABEL_276;
          }
          v155 = 0;
          *v197 = 10;
          ++*((_QWORD *)v94 + 4);
        }
        else
        {
          v155 = 0;
        }
        v29 = 1;
        goto LABEL_276;
      }
LABEL_281:
      llvm::line_iterator::advance((uint64_t)&v250);
      v2 = v233;
      if (!(_BYTE)v253)
        goto LABEL_337;
    }
  }
  LOBYTE(v29) = 0;
LABEL_337:
  if (v94)
    (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v94 + 8))(v94);
  if (v247)
    (*(void (**)(void *))(*(_QWORD *)v247 + 8))(v247);
LABEL_48:
  if (byte_1ED806C8F >= 0)
    v30 = byte_1ED806C8F & 0x7F;
  else
    v30 = qword_1ED806C80;
  if (!v30)
    goto LABEL_99;
  if (byte_1ED806C8F >= 0)
    v31 = &qword_1ED806C78;
  else
    v31 = (uint64_t *)qword_1ED806C78;
  sub_1C55A2AAC((uint64_t *)&v250, v31, v30, v2);
  v32 = (_QWORD *)*((_QWORD *)v2 + 4);
  v33 = v250;
  if (v32 == (_QWORD *)((char *)v2 + 24))
    goto LABEL_97;
  do
  {
    v34 = (uint64_t ***)(v32 - 7);
    if (!v32)
      v34 = 0;
    if ((*((_BYTE *)v34 + 23) & 0x10) == 0)
    {
      v45 = 0;
      v44 = &byte_1C871356D;
      goto LABEL_67;
    }
    v35 = ***v34;
    v36 = *(_QWORD *)(v35 + 152);
    v37 = *(unsigned int *)(v35 + 168);
    if (!(_DWORD)v37)
      goto LABEL_65;
    LODWORD(v38) = (v37 - 1) & ((v34 >> 4) ^ (v34 >> 9));
    v39 = (uint64_t ****)(v36 + 16 * v38);
    v40 = *v39;
    if (*v39 != v34)
    {
      v41 = 1;
      while (v40 != (uint64_t ***)-4096)
      {
        v42 = v38 + v41++;
        v38 = v42 & (v37 - 1);
        v40 = *(uint64_t ****)(v36 + 16 * v38);
        if (v40 == v34)
        {
          v39 = (uint64_t ****)(v36 + 16 * v38);
          goto LABEL_66;
        }
      }
LABEL_65:
      v39 = (uint64_t ****)(v36 + 16 * v37);
    }
LABEL_66:
    v43 = v39[1];
    v46 = (size_t)*v43;
    v44 = (char *)(v43 + 2);
    v45 = v46;
LABEL_67:
    v47 = v34 + 9;
    for (j = v34[10]; j != (uint64_t **)v47; j = (uint64_t **)j[1])
    {
      v49 = (uint64_t ***)(j - 3);
      if (!j)
        v49 = 0;
      if ((*((_BYTE *)v49 + 23) & 0x10) != 0)
      {
        v50 = ***v49;
        v51 = *(_QWORD *)(v50 + 152);
        v52 = *(unsigned int *)(v50 + 168);
        if (!(_DWORD)v52)
          goto LABEL_78;
        LODWORD(v53) = (v52 - 1) & ((v49 >> 4) ^ (v49 >> 9));
        v54 = (uint64_t ****)(v51 + 16 * v53);
        v55 = *v54;
        if (*v54 != v49)
        {
          v56 = 1;
          while (v55 != (uint64_t ***)-4096)
          {
            v57 = v53 + v56++;
            v53 = v57 & (v52 - 1);
            v55 = *(uint64_t ****)(v51 + 16 * v53);
            if (v55 == v49)
            {
              v54 = (uint64_t ****)(v51 + 16 * v53);
              goto LABEL_79;
            }
          }
LABEL_78:
          v54 = (uint64_t ****)(v51 + 16 * v52);
        }
LABEL_79:
        v58 = (size_t *)v54[1];
        v61 = *v58;
        v60 = v58 + 2;
        v59 = v61;
        if (v61)
        {
          v62 = (_BYTE *)*((_QWORD *)v33 + 4);
          if (v45 <= *((_QWORD *)v33 + 3) - (_QWORD)v62)
          {
            if (v45)
            {
              memcpy(v62, v44, v45);
              v62 = (_BYTE *)(*((_QWORD *)v33 + 4) + v45);
              *((_QWORD *)v33 + 4) = v62;
            }
          }
          else
          {
            llvm::raw_ostream::write(v33, v44, v45);
            v62 = (_BYTE *)*((_QWORD *)v33 + 4);
          }
          if ((unint64_t)v62 >= *((_QWORD *)v33 + 3))
          {
            llvm::raw_ostream::write(v33, 58);
          }
          else
          {
            *((_QWORD *)v33 + 4) = v62 + 1;
            *v62 = 58;
          }
          v63 = (void *)*((_QWORD *)v33 + 4);
          if (v59 <= *((_QWORD *)v33 + 3) - (_QWORD)v63)
          {
            memcpy(v63, v60, v59);
            v64 = (_BYTE *)(*((_QWORD *)v33 + 4) + v59);
            *((_QWORD *)v33 + 4) = v64;
          }
          else
          {
            llvm::raw_ostream::write(v33, (const char *)v60, v59);
            v64 = (_BYTE *)*((_QWORD *)v33 + 4);
          }
          if ((unint64_t)v64 >= *((_QWORD *)v33 + 3))
          {
            llvm::raw_ostream::write(v33, 10);
          }
          else
          {
            *((_QWORD *)v33 + 4) = v64 + 1;
            *v64 = 10;
          }
        }
        continue;
      }
    }
    v32 = (_QWORD *)v32[1];
  }
  while (v32 != (_QWORD *)((char *)v2 + 24));
LABEL_97:
  if (v33)
    (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v33 + 8))(v33);
LABEL_99:
  if (byte_1ED806D77 >= 0)
    v65 = byte_1ED806D77 & 0x7F;
  else
    v65 = qword_1ED806D68;
  if (!v65
    || (byte_1ED806D77 >= 0 ? (v66 = &qword_1ED806D60) : (v66 = (uint64_t *)qword_1ED806D60),
        sub_1C55A2904(&v243, v66, v65, v2),
        (v67 = v243) == 0))
  {
    v68 = 0;
    goto LABEL_108;
  }
  v250 = (llvm::raw_ostream *)&v252;
  v251 = 0x400000000;
  v95 = (*(uint64_t (**)(const llvm::MemoryBuffer *))(*(_QWORD *)v243 + 16))(v243);
  v229 = v96;
  v230 = v95;
  llvm::line_iterator::line_iterator((llvm::line_iterator *)v238, v67, 1, 35);
  if (v239)
  {
    v228 = v67;
    v198 = 0;
    v232 = v29;
    v234 = v2;
    while (1)
    {
      LOBYTE(v244) = 58;
      v199 = llvm::StringRef::find((uint64_t *)&v241, (char *)&v244, 1uLL, 0);
      if (v199 != -1)
      {
        v200 = v242 >= v199 ? v199 : v242;
        v201 = v242 >= v199 + 1 ? v199 + 1 : v242;
        v237[0] = &v241[v201];
        v237[1] = v242 - v201;
        if (v200 && v242 > v199 + 1)
          break;
      }
LABEL_297:
      llvm::line_iterator::advance((uint64_t)v238);
      if (!v239)
      {
        if (v198)
        {
          BlockExtractorPass = llvm::createBlockExtractorPass((uint64_t *)&v250, 0);
          v68 = (*(uint64_t (**)(uint64_t, llvm::AGXIR *))(*(_QWORD *)BlockExtractorPass + 136))(BlockExtractorPass, v2);
        }
        else
        {
          v68 = 0;
        }
        v67 = v228;
        goto LABEL_343;
      }
    }
    v203 = sub_1C55A2BE0(*((uint64_t **)v2 + 14), v241, v200, v230, v229, v240);
    v247 = v249;
    v248 = 0x400000000;
    llvm::StringRef::split((char *)v237, (uint64_t)&v247, 59, -1, 0);
    v244 = v246;
    v245 = 0x1000000000;
    sub_1C627AE4C((uint64_t)&v250, (unint64_t)&v244);
    if (v244 != v246)
      free(v244);
    v204 = v198;
    if (!(_DWORD)v248)
    {
LABEL_328:
      if (*((_DWORD *)v250 + 36 * v204 + 2))
      {
        ++v198;
      }
      else
      {
        LODWORD(v251) = v251 - 1;
        v226 = (void **)((char *)v250 + 144 * v251);
        if (*v226 != v226 + 2)
          free(*v226);
      }
      if (v247 != v249)
        free(v247);
      goto LABEL_297;
    }
    v236 = v198;
    v205 = (const void **)v247;
    v206 = (const void **)((char *)v247 + 16 * v248);
    v207 = v203 + 72;
LABEL_303:
    v208 = *(_QWORD *)(v203 + 80);
    if (v208 == v207)
      goto LABEL_326;
    v210 = *v205;
    v209 = (size_t)v205[1];
    while (1)
    {
      if (v208)
        v211 = (uint64_t ***)(v208 - 24);
      else
        v211 = 0;
      if ((*((_BYTE *)v211 + 23) & 0x10) == 0)
      {
        v222 = 0;
        v221 = &byte_1C871356D;
        goto LABEL_317;
      }
      v212 = ***v211;
      v213 = *(_QWORD *)(v212 + 152);
      v214 = *(unsigned int *)(v212 + 168);
      if (!(_DWORD)v214)
        goto LABEL_315;
      LODWORD(v215) = (v214 - 1) & ((v211 >> 4) ^ (v211 >> 9));
      v216 = (uint64_t ****)(v213 + 16 * v215);
      v217 = *v216;
      if (*v216 != v211)
        break;
LABEL_316:
      v220 = v216[1];
      v223 = *v220;
      v221 = (char *)(v220 + 2);
      v222 = v223;
LABEL_317:
      if (v222 == (uint64_t **)v209 && (!v209 || !memcmp(v221, v210, v209)))
      {
        v224 = (char *)v250 + 144 * v204;
        v225 = *((unsigned int *)v224 + 2);
        if (v225 >= *((unsigned int *)v224 + 3))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v250 + 144 * v204, (uint64_t)(v224 + 16), v225 + 1, 8);
          v225 = *((unsigned int *)v224 + 2);
        }
        *(_QWORD *)(*(_QWORD *)v224 + 8 * v225) = v211;
        ++*((_DWORD *)v224 + 2);
LABEL_326:
        v205 += 2;
        if (v205 == v206)
        {
          LOBYTE(v29) = v232;
          v2 = v234;
          v198 = v236;
          goto LABEL_328;
        }
        goto LABEL_303;
      }
      v208 = *(_QWORD *)(v208 + 8);
      if (v208 == v207)
        goto LABEL_326;
    }
    v218 = 1;
    while (v217 != (uint64_t ***)-4096)
    {
      v219 = v215 + v218++;
      v215 = v219 & (v214 - 1);
      v217 = *(uint64_t ****)(v213 + 16 * v215);
      if (v217 == v211)
      {
        v216 = (uint64_t ****)(v213 + 16 * v215);
        goto LABEL_316;
      }
    }
LABEL_315:
    v216 = (uint64_t ****)(v213 + 16 * v214);
    goto LABEL_316;
  }
  v68 = 0;
LABEL_343:
  sub_1C627AFCC((char **)&v250);
  (*(void (**)(const llvm::MemoryBuffer *))(*(_QWORD *)v67 + 8))(v67);
LABEL_108:
  if (byte_1ED806E5F >= 0)
    v69 = byte_1ED806E5F & 0x7F;
  else
    v69 = qword_1ED806E50;
  if (v69)
  {
    if (byte_1ED806E5F >= 0)
      v70 = &qword_1ED806E48;
    else
      v70 = (uint64_t *)qword_1ED806E48;
    sub_1C55A2AAC((uint64_t *)&v250, v70, v69, v2);
    v71 = (_QWORD *)*((_QWORD *)v2 + 4);
    v72 = v250;
    if (v71 != (_QWORD *)((char *)v2 + 24))
    {
      while (1)
      {
        v73 = (uint64_t ***)(v71 - 7);
        if (!v71)
          break;
        if (*((_BYTE *)v71 - 40) != 3)
          goto LABEL_121;
        if ((*((_DWORD *)v71 - 9) & 0x7FFFFFF) != 0)
          goto LABEL_124;
LABEL_140:
        v71 = (_QWORD *)v71[1];
        if (v71 == (_QWORD *)((char *)v2 + 24))
          goto LABEL_141;
      }
      v73 = 0;
LABEL_121:
      if (!*((_BYTE *)v73 + 16) && v73[9] == (uint64_t **)(v73 + 9) && (*((_BYTE *)v73 + 34) & 0x80) == 0)
        goto LABEL_140;
LABEL_124:
      if ((*((_BYTE *)v73 + 23) & 0x10) != 0)
      {
        v74 = ***v73;
        v75 = *(_QWORD *)(v74 + 152);
        v76 = *(unsigned int *)(v74 + 168);
        if (!(_DWORD)v76)
          goto LABEL_131;
        LODWORD(v77) = (v76 - 1) & ((v73 >> 4) ^ (v73 >> 9));
        v78 = (uint64_t ****)(v75 + 16 * v77);
        v79 = *v78;
        if (*v78 != v73)
        {
          v80 = 1;
          while (v79 != (uint64_t ***)-4096)
          {
            v81 = v77 + v80++;
            v77 = v81 & (v76 - 1);
            v79 = *(uint64_t ****)(v75 + 16 * v77);
            if (v79 == v73)
            {
              v78 = (uint64_t ****)(v75 + 16 * v77);
              goto LABEL_132;
            }
          }
LABEL_131:
          v78 = (uint64_t ****)(v75 + 16 * v76);
        }
LABEL_132:
        v82 = v78[1];
        v85 = (size_t)*v82;
        v83 = (const char *)(v82 + 2);
        v84 = v85;
        v86 = (_BYTE *)*((_QWORD *)v72 + 4);
        if (v85 > *((_QWORD *)v72 + 3) - (_QWORD)v86)
        {
          llvm::raw_ostream::write(v72, v83, v84);
          goto LABEL_134;
        }
        if (v84)
        {
          memcpy(v86, v83, v84);
          v86 = (_BYTE *)(*((_QWORD *)v72 + 4) + v84);
          *((_QWORD *)v72 + 4) = v86;
        }
      }
      else
      {
LABEL_134:
        v86 = (_BYTE *)*((_QWORD *)v72 + 4);
      }
      if ((unint64_t)v86 >= *((_QWORD *)v72 + 3))
      {
        llvm::raw_ostream::write(v72, 10);
      }
      else
      {
        *((_QWORD *)v72 + 4) = v86 + 1;
        *v86 = 10;
      }
      goto LABEL_140;
    }
LABEL_141:
    if (v72)
      (*(void (**)(llvm::raw_ostream *))(*(_QWORD *)v72 + 8))(v72);
  }
  v87 = v29 | v68;
  if (byte_1ED806F47 >= 0)
    v88 = byte_1ED806F47 & 0x7F;
  else
    v88 = qword_1ED806F38;
  if (v88
    && (byte_1ED806F47 >= 0 ? (v89 = &qword_1ED806F30) : (v89 = (uint64_t *)qword_1ED806F30),
        sub_1C55A2904(&v244, v89, v88, v2),
        (v90 = (const llvm::MemoryBuffer *)v244) != 0))
  {
    v97 = (*(uint64_t (**)(void *))(*(_QWORD *)v244 + 16))(v244);
    v99 = v98;
    llvm::line_iterator::line_iterator((llvm::line_iterator *)&v250, v90, 1, 35);
    v91 = (_BYTE)v253 != 0;
    while ((_BYTE)v253)
    {
      v100 = (uint64_t ***)sub_1C55A2BE0(*((uint64_t **)v2 + 14), v255, v256, v97, v99, v254);
      v100[14] = (uint64_t **)llvm::AttributeList::addAttributeAtIndex((llvm::AttributeList *)(v100 + 14), **v100, -1, "bisect-helper", 0xDuLL, "no-gisel", 8uLL);
      llvm::line_iterator::advance((uint64_t)&v250);
    }
    (*(void (**)(const llvm::MemoryBuffer *))(*(_QWORD *)v90 + 8))(v90);
  }
  else
  {
    v91 = 0;
  }
  v12 = v87 | v91;
  return v12 & 1;
}

uint64_t sub_1C55A2820(uint64_t *a1, uint64_t a2)
{
  const std::error_category *v4;
  uint64_t v5;
  char v6;
  BOOL v7;
  _BYTE *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t result;
  std::error_code v12;
  std::string v13;
  _QWORD v14[4];
  __int16 v15;
  std::error_code v16;

  v15 = 260;
  v14[0] = a2;
  *(_QWORD *)&v16.__val_ = llvm::sys::fs::remove((llvm::sys::fs *)v14, (const llvm::Twine *)1);
  v16.__cat_ = v4;
  if (v16.__val_)
  {
    std::error_code::message(&v13, &v16);
    v15 = 260;
    goto LABEL_11;
  }
  v12.__val_ = 0;
  v12.__cat_ = std::system_category();
  v5 = operator new();
  v6 = *(_BYTE *)(a2 + 23);
  v7 = v6 < 0;
  if (v6 >= 0)
    v8 = (_BYTE *)a2;
  else
    v8 = *(_BYTE **)a2;
  v9 = v6 & 0x7F;
  if (v7)
    v10 = *(_QWORD *)(a2 + 8);
  else
    v10 = v9;
  result = llvm::raw_fd_ostream::raw_fd_ostream(v5, v8, v10, (uint64_t)&v12);
  *a1 = result;
  if (v12.__val_)
  {
    std::error_code::message(&v13, &v12);
    v15 = 260;
LABEL_11:
    v14[0] = &v13;
    llvm::report_fatal_error((uint64_t)v14, 1);
  }
  return result;
}

void sub_1C55A2904(_QWORD *a1, void *__src, size_t __len, llvm::AGXIR *a4)
{
  std::string *p_dst;
  size_t v9;
  size_t v10;
  void **v11;
  std::string::size_type v12;
  std::string *v13;
  std::string::size_type v14;
  void *v15;
  std::string __dst;
  __int16 v17;
  void *v18[2];
  std::string::size_type v19;
  void *__p[2];
  char v21;
  char v22;
  uint64_t v23;

  v23 = *MEMORY[0x1E0C80C00];
  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v9 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v9 = __len | 7;
    v10 = v9 + 1;
    p_dst = (std::string *)operator new(v9 + 1);
    __dst.__r_.__value_.__l.__size_ = __len;
    __dst.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = __len;
  p_dst = &__dst;
  if (__len)
LABEL_8:
    memmove(p_dst, __src, __len);
  p_dst->__r_.__value_.__s.__data_[__len] = 0;
  sub_1C55A2CC4((uint64_t)__p, a4);
  if (v22 >= 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  if (v22 >= 0)
    v12 = v22 & 0x7F;
  else
    v12 = (std::string::size_type)__p[1];
  v13 = std::string::append(&__dst, (const std::string::value_type *)v11, v12);
  v14 = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)v18 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v19 = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (v22 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v17 = 260;
  __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v18;
  sub_1C5E1F6CC((unsigned __int8 *)&__dst, 0xFFFFFFFFFFFFFFFFLL, 0, 0, 1, 0, (uint64_t)__p);
  if ((v21 & 1) != 0)
  {
    v15 = __p[0];
    if (LODWORD(__p[0]))
      v15 = 0;
  }
  else
  {
    std::system_category();
    v15 = __p[0];
  }
  *a1 = v15;
  if (SHIBYTE(v19) < 0)
    operator delete(v18[0]);
}

void sub_1C55A2AAC(uint64_t *a1, void *__src, size_t __len, llvm::AGXIR *a4)
{
  std::string *p_dst;
  size_t v9;
  size_t v10;
  void **v11;
  std::string::size_type v12;
  std::string *v13;
  std::string::size_type v14;
  void *__p[2];
  char v16;
  std::string __dst;
  void *v18[2];
  std::string::size_type v19;

  if (__len >= 0x7FFFFFFFFFFFFFF8)
    abort();
  if (__len >= 0x17)
  {
    v9 = (__len & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((__len | 7) != 0x17)
      v9 = __len | 7;
    v10 = v9 + 1;
    p_dst = (std::string *)operator new(v9 + 1);
    __dst.__r_.__value_.__l.__size_ = __len;
    __dst.__r_.__value_.__r.__words[2] = v10 | 0x8000000000000000;
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)p_dst;
    goto LABEL_8;
  }
  *((_BYTE *)&__dst.__r_.__value_.__s + 23) = __len;
  p_dst = &__dst;
  if (__len)
LABEL_8:
    memmove(p_dst, __src, __len);
  p_dst->__r_.__value_.__s.__data_[__len] = 0;
  sub_1C55A2CC4((uint64_t)__p, a4);
  if (v16 >= 0)
    v11 = __p;
  else
    v11 = (void **)__p[0];
  if (v16 >= 0)
    v12 = v16 & 0x7F;
  else
    v12 = (std::string::size_type)__p[1];
  v13 = std::string::append(&__dst, (const std::string::value_type *)v11, v12);
  v14 = v13->__r_.__value_.__r.__words[2];
  *(_OWORD *)v18 = *(_OWORD *)&v13->__r_.__value_.__l.__data_;
  v19 = v14;
  v13->__r_.__value_.__l.__size_ = 0;
  v13->__r_.__value_.__r.__words[2] = 0;
  v13->__r_.__value_.__r.__words[0] = 0;
  if (v16 < 0)
    operator delete(__p[0]);
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  sub_1C55A2820(a1, (uint64_t)v18);
  if (SHIBYTE(v19) < 0)
    operator delete(v18[0]);
}

uint64_t sub_1C55A2BE0(uint64_t *a1, unsigned __int8 *a2, unint64_t a3, uint64_t a4, uint64_t a5, unsigned int a6)
{
  uint64_t result;
  uint64_t v12[4];
  __int16 v13;
  const char *v14;
  __int16 v15;
  std::string v16;
  std::string *v17;
  __int16 v18;
  uint64_t v19[4];
  __int16 v20;
  uint64_t v21[5];
  uint64_t v22[5];
  _BYTE v23[40];

  result = sub_1C4FB7E80(a1, a2, a3);
  if (!result || *(_BYTE *)(result + 16))
  {
    v20 = 773;
    v19[0] = a4;
    v19[1] = a5;
    v19[2] = (uint64_t)":";
    std::to_string(&v16, a6);
    v18 = 260;
    v17 = &v16;
    sub_1C6131AAC(v19, (uint64_t *)&v17, (uint64_t)v21);
    v14 = " Function not found: ";
    v15 = 259;
    sub_1C6131AAC(v21, (uint64_t *)&v14, (uint64_t)v22);
    v13 = 261;
    v12[0] = (uint64_t)a2;
    v12[1] = a3;
    sub_1C6131AAC(v22, v12, (uint64_t)v23);
    llvm::report_fatal_error((uint64_t)v23, 1);
  }
  return result;
}

std::string *sub_1C55A2CC4(uint64_t a1, llvm::AGXIR *a2)
{
  std::string *result;

  result = (std::string *)llvm::AGXIR::getShaderID(a2, a2);
  if (((unint64_t)result & 0xFF00000000) != 0)
    return std::to_string((std::string *)a1, result);
  *(_BYTE *)(a1 + 23) = 7;
  strcpy((char *)a1, "unknown");
  return result;
}

unint64_t sub_1C55A2D24(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  unint64_t v9;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = v4 + a3;
  if (v4 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    v7 = *(_QWORD *)a1 + 144 * v4;
    if (*(_QWORD *)a1 <= a2 && v7 > a2)
    {
      v9 = a2 - *(_QWORD *)a1;
      sub_1C627AEB0(a1, v5);
      return *(_QWORD *)a1 + v9;
    }
    else
    {
      sub_1C627AEB0(a1, v5);
    }
  }
  return a2;
}

uint64_t sub_1C55A2D8C(uint64_t a1, const void **a2)
{
  const void *v3;
  const void **v4;
  unint64_t v5;
  _DWORD *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  void *v11;
  const void **v12;
  uint64_t v13;
  const void **v14;
  const void **v15;

  if ((const void **)a1 != a2)
  {
    v4 = a2 + 2;
    v3 = *a2;
    if (*a2 != a2 + 2)
    {
      v11 = *(void **)a1;
      if (*(_QWORD *)a1 != a1 + 16)
      {
        v12 = a2;
        free(v11);
        a2 = v12;
        v3 = *v12;
      }
      *(_QWORD *)a1 = v3;
      v6 = a2 + 1;
      *(_QWORD *)(a1 + 8) = a2[1];
      *a2 = v4;
      *((_DWORD *)a2 + 3) = 0;
      goto LABEL_10;
    }
    v6 = a2 + 1;
    v5 = *((unsigned int *)a2 + 2);
    v7 = *(unsigned int *)(a1 + 8);
    if (v7 >= v5)
    {
      if ((_DWORD)v5)
        memmove(*(void **)a1, *a2, 8 * v5);
      goto LABEL_9;
    }
    if (*(_DWORD *)(a1 + 12) < v5)
    {
      *(_DWORD *)(a1 + 8) = 0;
      v14 = a2;
      llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v5, 8);
      a2 = v14;
    }
    else if ((_DWORD)v7)
    {
      v13 = *(unsigned int *)(a1 + 8);
      v15 = a2;
      memmove(*(void **)a1, v3, 8 * v7);
      v8 = v13;
      a2 = v15;
LABEL_7:
      v9 = *v6;
      if (v8 != v9)
        memcpy((void *)(*(_QWORD *)a1 + 8 * v8), (char *)*a2 + 8 * v8, (_BYTE *)*a2 + 8 * v9 - ((_BYTE *)*a2 + 8 * v8));
LABEL_9:
      *(_DWORD *)(a1 + 8) = v5;
LABEL_10:
      *v6 = 0;
      return a1;
    }
    v8 = 0;
    goto LABEL_7;
  }
  return a1;
}

uint64_t sub_1C55A2EC8(uint64_t a1, char *a2, _OWORD *a3, _OWORD *a4, _WORD *a5)
{
  uint64_t v10;
  size_t v11;

  v10 = sub_1C47AD050(a1, 0, 0);
  *(_QWORD *)(v10 + 128) = 0;
  *(_QWORD *)(v10 + 136) = 0;
  *(_QWORD *)(v10 + 168) = 0;
  *(_QWORD *)(v10 + 176) = 0;
  *(_QWORD *)(v10 + 160) = 0;
  *(_BYTE *)(v10 + 184) = 0;
  *(_QWORD *)(v10 + 144) = 0;
  *(_QWORD *)(v10 + 152) = &unk_1E819E950;
  *(_QWORD *)v10 = &unk_1E819E480;
  *(_QWORD *)(v10 + 192) = &unk_1E819E970;
  *(_QWORD *)(v10 + 200) = &off_1E7FA8CB8;
  *(_QWORD *)(v10 + 224) = v10 + 200;
  v11 = strlen(a2);
  llvm::cl::Option::setArgStr(a1, (unsigned __int8 *)a2, v11);
  *(_OWORD *)(a1 + 48) = *a3;
  *(_OWORD *)(a1 + 32) = *a4;
  *(_WORD *)(a1 + 10) = (32 * (*a5 & 3)) | *(_WORD *)(a1 + 10) & 0xFF9F;
  llvm::cl::Option::addArgument((llvm::cl::Option *)a1);
  return a1;
}

uint64_t sub_1C55A2FB0()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  int v5;
  __n128 v6;
  int v7;
  int v8;
  __n128 v9;

  v9.n128_u64[0] = (unint64_t)"filename";
  v9.n128_u64[1] = 8;
  v6.n128_u64[0] = (unint64_t)"Output file where the biggest shader id seen so far is written";
  v6.n128_u64[1] = 62;
  v8 = 1;
  sub_1C55A2EC8((uint64_t)&unk_1ED806B10, "bisect-helper-shader-maxid-file", &v9, &v6, &v8);
  __cxa_atexit((void (*)(void *))sub_1C49BEA38, &unk_1ED806B10, &dword_1C475E000);
  v9.n128_u64[0] = (unint64_t)"shaderid1[,...]";
  v9.n128_u64[1] = 15;
  v6.n128_u64[0] = (unint64_t)"List of shader IDs to run the bisect pass on. When unset will run on all shaders";
  v6.n128_u64[1] = 80;
  v7 = 1;
  v8 = 1;
  v5 = 1;
  sub_1C627B040((__int128 *)&v9, &v6, &v8, &v7, &v5);
  __cxa_atexit((void (*)(void *))sub_1C627ABF4, &qword_1ED806A38, &dword_1C475E000);
  v9.n128_u64[0] = (unint64_t)"Decide whether or not the bisecting pass should run on modules without shader ids";
  v9.n128_u64[1] = 81;
  v8 = 1;
  LOBYTE(v7) = 0;
  v6.n128_u64[0] = (unint64_t)&v7;
  sub_1C61B091C((llvm::cl::Option *)&unk_1ED8067F8, "bisect-helper-run-on-unknown-ids", &v9, &v8, &v6);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED8067F8, &dword_1C475E000);
  v0 = sub_1C47AD050((uint64_t)&qword_1ED806BF8, 0, 0);
  qword_1ED806C80 = 0;
  qword_1ED806C78 = 0;
  unk_1ED806C88 = 0;
  qword_1ED806C98 = 0;
  qword_1ED806CA8 = 0;
  qword_1ED806CA0 = 0;
  byte_1ED806CB0 = 0;
  qword_1ED806C90 = (uint64_t)&unk_1E819E950;
  qword_1ED806BF8 = (uint64_t)&unk_1E819E480;
  qword_1ED806CB8 = (uint64_t)&unk_1E819E970;
  qword_1ED806CC0 = (uint64_t)&off_1E7FA8CB8;
  qword_1ED806CD8 = (uint64_t)&qword_1ED806CC0;
  llvm::cl::Option::setArgStr(v0, "bisect-helper-bbs-file", 0x16uLL);
  qword_1ED806C28 = (uint64_t)"basefilename";
  qword_1ED806C30 = 12;
  qword_1ED806C18 = (uint64_t)"Base filename where the list of basic blocks will be written. This creates several files na"
                             "med <basefilename><#ShaderID>. The file format is \"FuncName:BBName[;BBName...]\"";
  qword_1ED806C20 = 170;
  word_1ED806C02 = word_1ED806C02 & 0xFF9F | 0x20;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED806BF8);
  __cxa_atexit((void (*)(void *))sub_1C49BEA38, &qword_1ED806BF8, &dword_1C475E000);
  v9.n128_u64[0] = (unint64_t)"Set this option to make sure all basic blocks have a name. For optimized builds, th"
                                     "is is not uncommon to have blocks missing names, since a lot of thing that this pas"
                                     "s does rely on blocks having names, this option is here to fix the name of these blocks.";
  v9.n128_u64[1] = 254;
  v8 = 1;
  LOBYTE(v7) = 0;
  v6.n128_u64[0] = (unint64_t)&v7;
  sub_1C61B091C((llvm::cl::Option *)&unk_1ED8068B8, "bisect-helper-ensure-bb-names", &v9, &v8, &v6);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED8068B8, &dword_1C475E000);
  v9.n128_u64[0] = (unint64_t)"basefilename";
  v9.n128_u64[1] = 12;
  v6.n128_u64[0] = (unint64_t)"Base filename for the files that list the basic blocks that need to be extracted. T"
                                     "his reads several files named <basefilename><#ShaderID>. The file format is \"FuncN"
                                     "ame:BBName[;BBName...]\"";
  v6.n128_u64[1] = 188;
  v8 = 1;
  sub_1C55A2EC8((uint64_t)&unk_1ED806CE0, "bisect-helper-run-extract-block", &v9, &v6, &v8);
  __cxa_atexit((void (*)(void *))sub_1C49BEA38, &unk_1ED806CE0, &dword_1C475E000);
  sub_1C47AD050((uint64_t)&qword_1ED806DC8, 0, 0);
  qword_1ED806E50 = 0;
  qword_1ED806E48 = 0;
  unk_1ED806E58 = 0;
  qword_1ED806E68 = 0;
  qword_1ED806E78 = 0;
  qword_1ED806E70 = 0;
  byte_1ED806E80 = 0;
  qword_1ED806E60 = (uint64_t)&unk_1E819E950;
  qword_1ED806DC8 = (uint64_t)&unk_1E819E480;
  qword_1ED806E88 = (uint64_t)&unk_1E819E970;
  qword_1ED806E90 = (uint64_t)&off_1E7FA8CB8;
  qword_1ED806EA8 = (uint64_t)&qword_1ED806E90;
  llvm::cl::Option::setArgStr((uint64_t)&qword_1ED806DC8, "bisect-helper-funcs-file", 0x18uLL);
  qword_1ED806DF8 = (uint64_t)"basefilename";
  qword_1ED806E00 = 12;
  qword_1ED806DE8 = (uint64_t)"Base filename where the list of functions will be written. This creates several files named"
                             " <basefilename><#ShaderID>. The file format is \"FuncName\"";
  qword_1ED806DF0 = 148;
  word_1ED806DD2 = word_1ED806DD2 & 0xFF9F | 0x20;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED806DC8);
  __cxa_atexit((void (*)(void *))sub_1C49BEA38, &qword_1ED806DC8, &dword_1C475E000);
  v1 = sub_1C47AD050((uint64_t)&qword_1ED806EB0, 0, 0);
  qword_1ED806F38 = 0;
  qword_1ED806F30 = 0;
  unk_1ED806F40 = 0;
  qword_1ED806F50 = 0;
  qword_1ED806F60 = 0;
  qword_1ED806F58 = 0;
  byte_1ED806F68 = 0;
  qword_1ED806F48 = (uint64_t)&unk_1E819E950;
  qword_1ED806EB0 = (uint64_t)&unk_1E819E480;
  qword_1ED806F70 = (uint64_t)&unk_1E819E970;
  qword_1ED806F78 = (uint64_t)&off_1E7FA8CB8;
  qword_1ED806F90 = (uint64_t)&qword_1ED806F78;
  llvm::cl::Option::setArgStr(v1, "bisect-helper-set-funcs-attrs", 0x1DuLL);
  qword_1ED806EE0 = (uint64_t)"basefilename";
  qword_1ED806EE8 = 12;
  qword_1ED806ED0 = (uint64_t)"Base filename for the files that list the functions that need to be tagged with 'no-gisel'."
                             " This reads several files named <basefilename><#ShaderID>. The file format is \"FuncName\"";
  qword_1ED806ED8 = 179;
  word_1ED806EBA = word_1ED806EBA & 0xFF9F | 0x20;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED806EB0);
  __cxa_atexit((void (*)(void *))sub_1C49BEA38, &qword_1ED806EB0, &dword_1C475E000);
  v2 = sub_1C47AD050((uint64_t)&qword_1ED806F98, 0, 0);
  qword_1ED807020 = 0;
  qword_1ED807018 = 0;
  unk_1ED807028 = 0;
  qword_1ED807038 = 0;
  qword_1ED807048 = 0;
  qword_1ED807040 = 0;
  byte_1ED807050 = 0;
  qword_1ED807030 = (uint64_t)&unk_1E819E950;
  qword_1ED806F98 = (uint64_t)&unk_1E819E480;
  qword_1ED807058 = (uint64_t)&unk_1E819E970;
  qword_1ED807060 = (uint64_t)&off_1E7FA8CB8;
  qword_1ED807078 = (uint64_t)&qword_1ED807060;
  llvm::cl::Option::setArgStr(v2, "bisect-helper-split-bbs-file", 0x1CuLL);
  qword_1ED806FC8 = (uint64_t)"basefilename";
  qword_1ED806FD0 = 12;
  qword_1ED806FB8 = (uint64_t)"Base filename for the files tha list the basic blocks to be split. This reads several files"
                             " named <basefilename><#ShaderID>. The file format is \"FuncName BBName\"";
  qword_1ED806FC0 = 161;
  word_1ED806FA2 = word_1ED806FA2 & 0xFF9F | 0x20;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED806F98);
  __cxa_atexit((void (*)(void *))sub_1C49BEA38, &qword_1ED806F98, &dword_1C475E000);
  v3 = sub_1C47AD050((uint64_t)&qword_1ED807080, 0, 0);
  qword_1ED807108 = 0;
  qword_1ED807100 = 0;
  unk_1ED807110 = 0;
  qword_1ED807120 = 0;
  qword_1ED807130 = 0;
  qword_1ED807128 = 0;
  byte_1ED807138 = 0;
  qword_1ED807118 = (uint64_t)&unk_1E819E950;
  qword_1ED807080 = (uint64_t)&unk_1E819E480;
  qword_1ED807140 = (uint64_t)&unk_1E819E970;
  qword_1ED807148 = (uint64_t)&off_1E7FA8CB8;
  qword_1ED807160 = (uint64_t)&qword_1ED807148;
  llvm::cl::Option::setArgStr(v3, "bisect-helper-split-bbs-out-file", 0x20uLL);
  qword_1ED8070B0 = (uint64_t)"basefilename";
  qword_1ED8070B8 = 12;
  qword_1ED8070A0 = (uint64_t)"Base filename for the files that will contain the list of basic blocks created/considered b"
                             "y splitting(\"-bisect-helper-split-bbs-out-file\"). This writes several files named <base"
                             "filename><#ShaderID>. The file format is \"FuncName BBName\"";
  qword_1ED8070A8 = 238;
  word_1ED80708A = word_1ED80708A & 0xFF9F | 0x20;
  llvm::cl::Option::addArgument((llvm::cl::Option *)&qword_1ED807080);
  __cxa_atexit((void (*)(void *))sub_1C49BEA38, &qword_1ED807080, &dword_1C475E000);
  v9.n128_u64[0] = (unint64_t)"Split the each bb listed in \"-bisect-helper-split-bbs-out-file\" after that many instructions";
  v9.n128_u64[1] = 92;
  v7 = 3;
  v8 = 1;
  v6.n128_u64[0] = (unint64_t)&v7;
  sub_1C627B1D8((__int128 *)&v9, &v8, (int **)&v6);
  return __cxa_atexit((void (*)(void *))sub_1C4785FB8, &qword_1ED806978, &dword_1C475E000);
}

uint64_t sub_1C55A354C(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeFunctionGroupInfoWrapperPassPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Addition of Metal buffer bound checking";
  *(_QWORD *)(v2 + 8) = 39;
  *(_QWORD *)(v2 + 16) = "bound-checking";
  *(_QWORD *)(v2 + 24) = 14;
  *(_QWORD *)(v2 + 32) = &unk_1ED807168;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C55A36FC;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C55A35E0(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED807168;
  *(_DWORD *)(a1 + 24) = 4;
  *(_QWORD *)a1 = &off_1E8170198;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = 0;
  *(_QWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 96) = 0;
  *(_QWORD *)(a1 + 104) = 0;
  *(_QWORD *)(a1 + 112) = 0;
  *(_DWORD *)(a1 + 120) = 0;
  *(_QWORD *)(a1 + 128) = 0;
  *(_QWORD *)(a1 + 136) = 0;
  *(_DWORD *)(a1 + 144) = 0;
  *(_QWORD *)(a1 + 152) = a1 + 168;
  *(_QWORD *)(a1 + 160) = 0x800000000;
  *(_QWORD *)(a1 + 232) = 0xFFFFFFFFLL;
  *(_BYTE *)(a1 + 240) = 1;
  *(_DWORD *)(a1 + 241) = 0;
  *(_DWORD *)(a1 + 244) = 0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED807170);
  if (v3 != -1)
  {
    v7[0] = sub_1C55A354C;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED807170, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C55A36FC()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C55A35E0(v0);
}

void sub_1C55A3724(llvm::Pass *a1)
{
  _QWORD *v2;

  *(_QWORD *)a1 = &off_1E8170198;
  v2 = (_QWORD *)*((_QWORD *)a1 + 19);
  if (v2 != (_QWORD *)((char *)a1 + 168))
    free(v2);
  MEMORY[0x1CAA32FB4](*((_QWORD *)a1 + 16), 8);
  MEMORY[0x1CAA32FB4](*((_QWORD *)a1 + 13), 8);
  MEMORY[0x1CAA32FB4](*((_QWORD *)a1 + 10), 8);
  MEMORY[0x1CAA32FB4](*((_QWORD *)a1 + 7), 8);
  MEMORY[0x1CAA32FB4](*((_QWORD *)a1 + 4), 8);
  llvm::Pass::~Pass(a1);
}

void sub_1C55A37A0(llvm::Pass *a1)
{
  _QWORD *v2;

  *(_QWORD *)a1 = &off_1E8170198;
  v2 = (_QWORD *)*((_QWORD *)a1 + 19);
  if (v2 != (_QWORD *)((char *)a1 + 168))
    free(v2);
  MEMORY[0x1CAA32FB4](*((_QWORD *)a1 + 16), 8);
  MEMORY[0x1CAA32FB4](*((_QWORD *)a1 + 13), 8);
  MEMORY[0x1CAA32FB4](*((_QWORD *)a1 + 10), 8);
  MEMORY[0x1CAA32FB4](*((_QWORD *)a1 + 7), 8);
  MEMORY[0x1CAA32FB4](*((_QWORD *)a1 + 4), 8);
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C55A3830()
{
  return "Add bound checks to memory operations";
}

void *sub_1C55A3840(uint64_t a1, uint64_t a2)
{
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
  return sub_1C4771E64(a2, a2 + 112, (uint64_t)&llvm::FunctionGroupInfoWrapperPass::ID);
}

uint64_t sub_1C55A3880(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  void **v3;
  void *v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t *i;
  uint64_t v8;
  uint64_t v9;
  llvm::Module **NamedMetadata;
  llvm::Module **v11;
  uint64_t *v12;
  uint64_t *v13;
  uint64_t *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t j;
  uint64_t v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  int v27;
  uint64_t v28;
  int v29;
  uint64_t v30;
  unsigned int v31;
  _QWORD *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  int v45;
  int v47;
  char v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  llvm::BasicBlock *v52;
  unsigned __int8 *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  void *v63;
  int v64;
  unsigned __int32 v65;
  uint64_t v66;
  BOOL v67;
  char *v68;
  char *v69;
  uint64_t v70;
  int v71;
  uint64_t v72;
  uint64_t v73;
  uint64_t v74;
  uint64_t v75;
  BOOL v76;
  uint64_t v77;
  uint64_t v78;
  uint64_t **v79;
  char *FirstNonPHIOrDbgOrLifetime;
  uint64_t v81;
  uint64_t v82;
  uint64_t v83;
  char *v84;
  _QWORD *v85;
  llvm::PointerType *v86;
  llvm::Value *v87;
  _BYTE *v88;
  llvm::Value *v89;
  uint64_t v90;
  int v91;
  uint64_t v92;
  int v93;
  unsigned int v94;
  _QWORD *v95;
  _QWORD *v96;
  uint64_t *v97;
  const llvm::APInt *v98;
  uint64_t v99;
  llvm::ConstantInt *v100;
  unint64_t v101;
  char v102;
  llvm::Value *v103;
  llvm::ValueHandleBase *v104;
  const llvm::APInt *v105;
  uint64_t v106;
  llvm::ConstantInt *v107;
  llvm::Value *v108;
  llvm::ValueHandleBase *v109;
  void *v110;
  uint64_t **v111;
  void *v112;
  void *v113;
  uint64_t v114;
  unsigned int v115;
  int v116;
  _QWORD *v117;
  uint64_t v118;
  char v119;
  char v120;
  char *v121;
  char *v122;
  unsigned __int8 *v123;
  uint64_t v124;
  _QWORD *v125;
  uint64_t v126;
  uint64_t v127;
  const llvm::APInt *v128;
  llvm::ConstantInt *v129;
  unsigned int v130;
  char v131;
  llvm::ValueHandleBase *v132;
  uint64_t v133;
  uint64_t *v134;
  uint64_t v135;
  const llvm::APInt *v136;
  llvm::ConstantInt *v137;
  unsigned int v138;
  unint64_t v139;
  llvm::ValueHandleBase *v140;
  uint64_t v141;
  uint64_t v142;
  unsigned __int8 *Select;
  uint64_t v144;
  unsigned __int8 *v145;
  int v146;
  uint64_t v147;
  uint64_t v148;
  uint64_t v149;
  uint64_t *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  int v155;
  BOOL v156;
  unsigned int v157;
  unint64_t v158;
  unint64_t v159;
  unsigned __int8 **v160;
  int v161;
  unsigned __int8 *v162;
  unsigned __int8 *v163;
  unsigned __int8 *v164;
  _QWORD *v165;
  void *v166;
  int v167;
  int v168;
  void *v169;
  void (**v170)(void);
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  uint64_t v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  unsigned __int8 *v178;
  int v179;
  llvm::AllocaInst *v180;
  uint64_t v181;
  uint64_t v182;
  uint64_t v183;
  int v184;
  BOOL v185;
  const char *v186;
  char v187;
  char v188;
  unint64_t v189;
  uint64_t v190;
  BOOL v191;
  _QWORD *v192;
  llvm::DataLayout *v193;
  _QWORD *v194;
  _QWORD *v195;
  uint64_t v196;
  uint64_t v197;
  unsigned int v198;
  _QWORD *v199;
  uint64_t v200;
  unsigned int v201;
  BOOL v202;
  _BOOL4 v204;
  BOOL v205;
  unsigned int v206;
  uint64_t v207;
  int v208;
  uint64_t v209;
  uint64_t v210;
  BOOL v211;
  BOOL v212;
  uint64_t v213;
  _QWORD *v214;
  llvm::Value **v215;
  unsigned __int8 *v216;
  uint64_t v217;
  unsigned __int8 *v218;
  llvm::Value *v219;
  unsigned __int8 *v220;
  uint64_t v221;
  unsigned __int8 *v222;
  unsigned int v223;
  llvm::Value *v224;
  llvm::Value *v225;
  void *v226;
  void *v227;
  uint64_t v228;
  unsigned __int8 *v229;
  const llvm::APInt *v230;
  uint64_t v231;
  uint64_t v232;
  llvm::ConstantInt *v233;
  unsigned int v234;
  unint64_t v235;
  llvm::ValueHandleBase *v236;
  uint64_t v237;
  uint64_t v238;
  uint64_t v239;
  unsigned __int8 *v240;
  uint64_t v241;
  unsigned __int8 *v242;
  unsigned __int8 *v243;
  uint64_t v244;
  unsigned __int8 *v245;
  void **v246;
  uint64_t v247;
  llvm::Value *v248;
  void *v249;
  void *v250;
  uint64_t v251;
  unsigned __int8 *v252;
  unsigned __int8 *v253;
  uint64_t v254;
  const llvm::APInt *v255;
  unsigned __int8 *v256;
  uint64_t v257;
  llvm::ConstantInt *v258;
  unsigned int v259;
  unint64_t v260;
  llvm::ValueHandleBase *v261;
  uint64_t v262;
  int v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t v267;
  llvm::Value *v268;
  llvm::Value *v269;
  int v270;
  uint64_t v271;
  int v272;
  llvm::Type *v273;
  uint64_t v274;
  _QWORD *v275;
  llvm::PointerType *v276;
  uint64_t v277;
  int v278;
  uint64_t v279;
  BOOL v280;
  unsigned __int8 *v281;
  uint64_t v282;
  unsigned __int8 *v283;
  uint64_t Declaration;
  uint64_t **v285;
  uint64_t v286;
  uint64_t v287;
  uint64_t v288;
  unsigned int v289;
  int v290;
  uint64_t v291;
  uint64_t v292;
  uint64_t v293;
  uint64_t v294;
  uint64_t *v295;
  uint64_t v296;
  uint64_t v297;
  uint64_t v298;
  uint64_t v299;
  char v300;
  char v301;
  char *v302;
  char *v303;
  uint64_t v304;
  _QWORD *v305;
  uint64_t v306;
  const llvm::APInt *v307;
  uint64_t v308;
  uint64_t v309;
  llvm::ConstantInt *v310;
  unsigned int v311;
  unint64_t v312;
  llvm::ValueHandleBase *v313;
  const llvm::APInt *v314;
  uint64_t ***v315;
  llvm::ConstantInt *v316;
  const llvm::APInt *v317;
  uint64_t *v318;
  llvm::ConstantInt *v319;
  unsigned int v320;
  unint64_t v321;
  llvm::ValueHandleBase *v322;
  uint64_t *v323;
  uint64_t *v324;
  uint64_t v325;
  uint64_t v326;
  llvm::PointerType *v327;
  unsigned __int8 *v328;
  uint64_t v329;
  unsigned __int8 *v330;
  uint64_t v331;
  uint64_t *v332;
  uint64_t v333;
  unsigned int v334;
  _QWORD *v335;
  llvm::Value *v336;
  void *v337;
  void *v338;
  int v339;
  uint64_t v340;
  uint64_t v341;
  unsigned __int8 *v342;
  uint64_t v343;
  const llvm::APInt *v344;
  unsigned __int8 *v345;
  uint64_t v346;
  llvm::ConstantInt *v347;
  unsigned int v348;
  unint64_t v349;
  llvm::ValueHandleBase *v350;
  const llvm::APInt *v351;
  _QWORD *v352;
  llvm::ConstantInt *v353;
  unsigned int v354;
  unint64_t v355;
  llvm::ValueHandleBase *v356;
  char *v357;
  char *v358;
  llvm::ValueHandleBase **v359;
  uint64_t v360;
  _QWORD *v361;
  uint64_t v362;
  uint64_t v363;
  llvm::ValueHandleBase ***v364;
  uint64_t v365;
  char *v366;
  char *v367;
  unsigned __int8 **v368;
  int v369;
  unsigned __int8 *v370;
  unsigned __int8 *v371;
  unsigned __int8 *v372;
  uint64_t v373;
  int v374;
  char *v375;
  char *v376;
  unsigned __int8 **v377;
  int v378;
  unsigned __int8 *v379;
  unsigned __int8 *v380;
  const llvm::APInt *v381;
  uint64_t *v382;
  uint64_t *v383;
  uint64_t *v384;
  llvm::ConstantInt *v385;
  unsigned int v386;
  unint64_t v387;
  llvm::ValueHandleBase *v388;
  uint64_t v389;
  llvm::ConstantInt *v390;
  unsigned int v391;
  unint64_t v392;
  llvm::ValueHandleBase *v393;
  uint64_t v394;
  uint64_t v395;
  uint64_t v396;
  uint64_t **v397;
  uint64_t v398;
  _DWORD *v399;
  llvm::PointerType *v400;
  uint64_t v401;
  uint64_t v402;
  char v403;
  char v404;
  char *v405;
  char *v406;
  uint64_t v407;
  _QWORD *v408;
  uint64_t v409;
  llvm::Value *v410;
  unsigned __int8 *v411;
  uint64_t v412;
  uint64_t v413;
  llvm::ConstantInt *v414;
  unsigned int v415;
  unint64_t v416;
  llvm::ValueHandleBase *v417;
  uint64_t ***v418;
  const llvm::APInt *v419;
  uint64_t v420;
  llvm::ConstantInt *v421;
  const llvm::APInt *v422;
  uint64_t *v423;
  llvm::ConstantInt *v424;
  unsigned int v425;
  unint64_t v426;
  llvm::ValueHandleBase *v427;
  uint64_t *v428;
  uint64_t *v429;
  unsigned __int8 *v430;
  uint64_t v431;
  unsigned __int8 *v432;
  const llvm::APInt *v433;
  uint64_t v434;
  llvm::ConstantInt *v435;
  unsigned int v436;
  unint64_t v437;
  llvm::ValueHandleBase *v438;
  uint64_t v439;
  llvm::ConstantInt *v440;
  unint64_t v441;
  uint64_t v442;
  unint64_t v443;
  _DWORD *v444;
  int v445;
  unsigned int v446;
  unint64_t v447;
  llvm::ValueHandleBase *v448;
  int v449;
  char *v450;
  char *v451;
  unsigned __int8 **v452;
  int v453;
  unsigned __int8 *v454;
  unsigned __int8 *v455;
  int v456;
  unsigned int v457;
  uint64_t v458;
  uint64_t v459;
  uint64_t v460;
  uint64_t v461;
  uint64_t v462;
  unsigned int v463;
  uint64_t v465;
  uint64_t v466;
  uint64_t v467;
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  unsigned int v471;
  uint64_t v473;
  uint64_t v474;
  int v475;
  uint64_t v476;
  llvm::Value **v477;
  unsigned int v478;
  int v479;
  uint64_t v480;
  llvm::Value *v481;
  llvm::Value *v482;
  llvm::Value *v483;
  int v484;
  uint64_t v485;
  uint64_t v486;
  uint64_t v487;
  uint64_t v488;
  uint64_t v489;
  int v490;
  BOOL v491;
  const char *v492;
  char v493;
  char v494;
  unint64_t v495;
  uint64_t v496;
  llvm::Value *v497;
  int v498;
  uint64_t v499;
  char *v500;
  uint64_t **v501;
  uint64_t v502;
  uint64_t v503;
  uint64_t v504;
  uint64_t v505;
  uint64_t **v506;
  unint64_t v507;
  uint64_t *v508;
  unsigned int *v509;
  uint64_t v510;
  unint64_t v511;
  llvm::Constant *AggregateElement;
  int v513;
  BOOL v514;
  unsigned int *v515;
  unsigned int *v516;
  unsigned int *v517;
  uint64_t v518;
  uint64_t v519;
  int v520;
  BOOL v521;
  const char *v522;
  char v523;
  char v524;
  int v525;
  char v526;
  BOOL v527;
  char v528;
  unsigned __int8 *v529;
  BOOL v530;
  char v531;
  unsigned int v532;
  int v533;
  unsigned int v534;
  int v535;
  uint64_t v536;
  llvm::Value *v537;
  uint64_t v538;
  unsigned int v539;
  void *v540;
  llvm::Value *v541;
  uint64_t v542;
  int v543;
  int v544;
  uint64_t v546;
  int v547;
  _QWORD *v548;
  int v549;
  unsigned int v551;
  int v552;
  int v553;
  uint64_t v554;
  uint64_t v555;
  char v556;
  unsigned int v557;
  int v558;
  int v559;
  uint64_t v560;
  _QWORD *v561;
  uint64_t v562;
  uint64_t v563;
  _QWORD *v564;
  uint64_t v565;
  unint64_t v566;
  unint64_t v567;
  char *v568;
  uint64_t v569;
  char *v570;
  unint64_t v571;
  unint64_t v572;
  _QWORD *v573;
  uint64_t v574;
  uint64_t v575;
  uint64_t v576;
  uint64_t v577;
  unsigned int *v578;
  llvm::Value *v579;
  unint64_t v580;
  unint64_t v581;
  unsigned int *v582;
  uint64_t *v583;
  uint64_t v584;
  unint64_t v585;
  uint64_t v586;
  char *v587;
  unsigned int v588;
  llvm::BasicBlock *v589;
  unsigned __int8 *v590;
  uint64_t v591;
  uint64_t v592;
  uint64_t v593;
  char v594;
  unsigned __int8 *v595;
  uint64_t v597;
  uint64_t v598;
  llvm::Value *v599;
  uint64_t v600;
  uint64_t **v601;
  unint64_t v602;
  uint64_t ***v603;
  llvm::Value *v604;
  llvm::Value *v605;
  void **v606;
  unint64_t v607;
  uint64_t v608;
  unsigned __int8 *v609;
  _DWORD *v610;
  uint64_t v611;
  llvm::Value *v612;
  _QWORD v613[2];
  int v614;
  uint64_t v615;
  uint64_t v616;
  unsigned int v617;
  _QWORD v618[4];
  __int16 v619;
  __n128 v620;
  _QWORD v621[2];
  __int16 v622;
  uint64_t v623;
  uint64_t v624;
  uint64_t v625;
  uint64_t v626;
  void *Impl;
  uint64_t v628;
  _QWORD v629[2];
  __int16 v630;
  uint64_t v631;
  uint64_t v632;
  _QWORD *v633;
  void **v634;
  void **v635;
  uint64_t v636;
  int v637;
  __int16 v638;
  char v639;
  uint64_t v640;
  uint64_t v641;
  void *v642;
  void *v643;
  _QWORD v644[3];
  _QWORD *v645;
  void *v646;
  uint64_t v647;
  _BYTE v648[96];
  uint64_t v649[4];
  __int16 v650;
  void *v651;
  void *v652;
  uint64_t v653;
  uint64_t v654;
  _QWORD v655[2];
  uint64_t v656;
  uint64_t v657;
  uint64_t *v658;
  void **v659;
  void **v660;
  uint64_t v661;
  int v662;
  __int16 v663;
  char v664;
  uint64_t v665;
  uint64_t v666;
  void *v667;
  void *v668;
  uint64_t **v669;
  uint64_t v670;
  uint64_t v671;
  __int16 v672;
  uint64_t v673[3];

  v2 = a1;
  v673[1] = *MEMORY[0x1E0C80C00];
  v646 = v648;
  v647 = 0x400000000;
  v3 = **(void ****)(a1 + 8);
  do
  {
    v4 = *v3;
    v3 += 2;
  }
  while (v4 != &llvm::FunctionGroupInfoWrapperPass::ID);
  v593 = *(_QWORD *)((*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v3 - 1) + 96))(*(v3 - 1), &llvm::FunctionGroupInfoWrapperPass::ID)+ 32);
  v5 = *(_QWORD *)*a2;
  *(_QWORD *)(v2 + 256) = v5 + 1984;
  *(_QWORD *)(v2 + 264) = v5 + 1960;
  *(_QWORD *)(v2 + 248) = 0;
  *(_QWORD *)(v2 + 232) = sub_1C5EA50FC((uint64_t)a2);
  *(_QWORD *)(v2 + 240) = v6;
  if ((v6 & 0xFF000000000000) != 0)
  {
    for (i = (uint64_t *)a2[4]; ; i = (uint64_t *)i[1])
    {
      if (i == a2 + 3)
        goto LABEL_19;
      v8 = i ? (uint64_t)(i - 7) : 0;
      if (i && *(_BYTE *)(v8 + 16) == 3)
        break;
      if (*(_BYTE *)(v8 + 16) || *(_QWORD *)(v8 + 72) != v8 + 72 || (*(_BYTE *)(v8 + 34) & 0x80) != 0)
        goto LABEL_16;
LABEL_18:
      ;
    }
    if ((*(_DWORD *)(v8 + 20) & 0x7FFFFFF) == 0)
      goto LABEL_18;
LABEL_16:
    v9 = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v593 + 24))(v593);
    if (*(_BYTE *)(v2 + 247))
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, _QWORD, uint64_t, uint64_t))(*(_QWORD *)v9 + 8))(v9, 37, 1, 1, 0, 1, 2);
    goto LABEL_18;
  }
LABEL_19:
  v582 = (unsigned int *)(v2 + 104);
  v620.n128_u64[0] = (unint64_t)"agx.stack_oob";
  v622 = 259;
  NamedMetadata = (llvm::Module **)llvm::Module::getNamedMetadata((uint64_t)a2, (uint64_t)&v620);
  v11 = NamedMetadata;
  v12 = a2 + 3;
  v13 = (uint64_t *)a2[4];
  v611 = v2;
  v583 = a2 + 3;
  if (v13 == a2 + 3)
    goto LABEL_104;
  do
  {
    if (NamedMetadata)
    {
      v14 = v13 - 7;
      if (!v13)
        v14 = 0;
      if ((*((_WORD *)v14 + 9) & 0x3FF0) == 0x6B0)
        llvm::Module::eraseNamedMetadata(NamedMetadata[5], (llvm::NamedMDNode *)NamedMetadata);
    }
    v13 = (uint64_t *)v13[1];
  }
  while (v13 != v12);
  v15 = a2[4];
  if ((uint64_t *)v15 == v12)
    goto LABEL_104;
  do
  {
    v16 = v15 - 56;
    if (!v15)
      v16 = 0;
    v17 = *(_QWORD *)(v16 + 80);
    v608 = v16 + 72;
    if (v17 == v16 + 72)
      goto LABEL_102;
    while (2)
    {
      v18 = v17 - 24;
      if (!v17)
        v18 = 0;
      v19 = v18 + 40;
      for (j = *(_QWORD *)(v18 + 48); j != v19; j = *(_QWORD *)(j + 8))
      {
        if (j)
          v21 = j - 24;
        else
          v21 = 0;
        v22 = *(unsigned __int8 *)(v21 + 16);
        v23 = (v22 - 33);
        if (v23 <= 0x37)
        {
          if (((1 << (v22 - 33)) & 0x8000000000041) != 0)
          {
            v25 = *(_QWORD *)(v21 + 64);
            if (!v25 || (*(_BYTE *)(v25 + 20) & 4) == 0 && (*(_BYTE *)(v25 + 17) & 0x10) == 0)
            {
              v620.n128_u32[0] = 7;
              if (sub_1C53E4BBC(v21, (__int32 *)&v620, 1uLL))
              {
                v38 = *(_QWORD *)(v21 - 32);
                if (!v38
                  || *(_BYTE *)(v38 + 16)
                  || *(_QWORD *)(v38 + 24) != *(_QWORD *)(v21 + 72)
                  || *(_DWORD *)(v38 + 36) != 7)
                {
                  goto LABEL_62;
                }
              }
              if ((llvm::CallBase::hasFnAttrOnCalledFunction(v21, 66) & 1) == 0
                && !llvm::CallBase::hasFnAttrOnCalledFunction(v21, 44))
              {
                goto LABEL_62;
              }
            }
          }
          else
          {
            if (((1 << (v22 - 33)) & 0x808001C8000010) != 0)
              goto LABEL_62;
            if (v23 != 28)
              goto LABEL_41;
            if ((*(_WORD *)(v21 + 18) & 0x301) != 0)
              goto LABEL_62;
          }
          v22 = *(unsigned __int8 *)(v21 + 16);
        }
LABEL_41:
        v24 = (v22 - 33);
        if (v24 > 0x37)
          continue;
        if (((1 << v24) & 0x8000000000041) != 0)
        {
          v26 = *(_QWORD *)(v21 + 64);
          if (v26 && (*(_BYTE *)(v26 + 17) & 0x30) != 0)
            continue;
          v27 = *(_DWORD *)(v21 + 20);
          if (v27 < 0
            && (v39 = v21 - 32 * (v27 & 0x7FFFFFF), v42 = *(_QWORD *)(v39 - 8), v40 = v39 - 8, (v41 = v42) != 0))
          {
            v43 = -v41;
            while (1)
            {
              v44 = *(_DWORD *)(*(_QWORD *)(v40 + v43) + 8);
              v76 = v44 > 7;
              v45 = (1 << v44) & 0x83;
              if (v76 || v45 == 0)
                break;
              v43 += 16;
              if (!v43)
                goto LABEL_56;
            }
          }
          else
          {
LABEL_56:
            if ((llvm::CallBase::hasFnAttrOnCalledFunction(v21, 45) & 1) != 0
              || (llvm::CallBase::hasFnAttrOnCalledFunction(v21, 44) & 1) != 0)
            {
              continue;
            }
          }
        }
        else if (v24 == 27)
        {
          if ((*(_WORD *)(v21 + 18) & 0x301) == 0)
            continue;
        }
        else if (((1 << v24) & 0x808001D0000010) == 0)
        {
          continue;
        }
LABEL_62:
        v28 = sub_1C55A7838(v21);
        if (v28 == 0xFFFFFFFFLL)
        {
          v29 = sub_1C4DE85D0(v21);
          if (v29)
            v30 = v21;
          else
            v30 = 0;
          if (!j || !v29)
            goto LABEL_82;
          v31 = *(_DWORD *)(*(_QWORD *)(v30 - 32) + 36) - 194;
          if (v31 > 3 || v31 == 1)
          {
            v34 = *(_QWORD *)(v30 - 32 * (*(_DWORD *)(v30 + 20) & 0x7FFFFFF));
          }
          else
          {
            v33 = (_QWORD *)(v30 - 32 * (*(_DWORD *)(v30 + 20) & 0x7FFFFFF));
            if (*(_DWORD *)(*(_QWORD *)*v33 + 8) < 0x100u)
              goto LABEL_106;
            v34 = v33[4];
            if (!v34)
              goto LABEL_82;
          }
          if (*(_DWORD *)(*(_QWORD *)v34 + 8) < 0x100u)
            goto LABEL_106;
LABEL_82:
          if (*(_BYTE *)(v21 + 16) != 84)
            goto LABEL_106;
          v37 = *(_QWORD *)(v21 - 32);
          if (!v37
            || *(_BYTE *)(v37 + 16)
            || *(_QWORD *)(v37 + 24) != *(_QWORD *)(v21 + 72)
            || (*(_DWORD *)(v37 + 32) & 0x2000) == 0)
          {
            goto LABEL_106;
          }
          continue;
        }
        v35 = *(_DWORD *)(v21 + 20);
        if ((v35 & 0x40000000) != 0)
          v36 = *(_QWORD *)(v21 - 8);
        else
          v36 = v21 - 32 * (v35 & 0x7FFFFFF);
        if (*(_DWORD *)(**(_QWORD **)(v36 + 32 * v28) + 8) < 0x100u)
        {
LABEL_106:
          llvm::Module::getOrInsertNamedMetadata((uint64_t)a2, "agx.has_stack_access", 0x14uLL);
          v2 = v611;
          v12 = a2 + 3;
          goto LABEL_107;
        }
      }
      v17 = *(_QWORD *)(v17 + 8);
      if (v17 != v608)
        continue;
      break;
    }
LABEL_102:
    v15 = *(_QWORD *)(v15 + 8);
  }
  while ((uint64_t *)v15 != v583);
  v2 = v611;
  v12 = a2 + 3;
LABEL_104:
  if (v11)
    llvm::Module::eraseNamedMetadata(v11[5], (llvm::NamedMDNode *)v11);
LABEL_107:
  v577 = v2 + 80;
  v578 = (unsigned int *)(v2 + 56);
  v47 = *(_DWORD *)(v2 + 236);
  if (!v47)
  {
LABEL_110:
    v48 = 0;
    goto LABEL_872;
  }
  if (v47 != 1)
  {
    v615 = 0;
    v616 = 0;
    v617 = 0;
    if ((v47 & 2) != 0 && !*(_BYTE *)(v2 + 246))
    {
      v651 = v655;
      v652 = v655;
      v653 = 8;
      LODWORD(v654) = 0;
      sub_1C5EA6F60((uint64_t)a2, (llvm::SmallPtrSetImplBase *)&v651);
      v49 = a2[4];
      if ((uint64_t *)v49 != v12)
      {
        while (1)
        {
          v50 = v49 ? v49 - 56 : 0;
          if (v49 && *(_BYTE *)(v50 + 16) == 3)
          {
            if ((*(_DWORD *)(v50 + 20) & 0x7FFFFFF) == 0)
              goto LABEL_294;
          }
          else if (!*(_BYTE *)(v50 + 16) && *(_QWORD *)(v50 + 72) == v50 + 72 && (*(_BYTE *)(v50 + 34) & 0x80) == 0)
          {
            goto LABEL_294;
          }
          v51 = *(_QWORD *)(v50 + 80);
          v52 = (llvm::BasicBlock *)(v51 - 24);
          if (!v51)
            v52 = 0;
          v589 = v52;
          v586 = v50 + 72;
          if (v51 != v50 + 72)
            break;
LABEL_294:
          v49 = *(_QWORD *)(v49 + 8);
          if ((uint64_t *)v49 == v12)
            goto LABEL_295;
        }
        v580 = v49;
        v600 = 0;
        v53 = 0;
        v585 = 0;
        v592 = v50;
        v588 = (v50 >> 4) ^ (v50 >> 9);
        v606 = &v651;
LABEL_128:
        v54 = v51 - 24;
        v591 = v51;
        if (!v51)
          v54 = 0;
        v55 = v54 + 40;
        v56 = *(_QWORD *)(v54 + 48);
        v597 = v54 + 40;
        if (v56 == v54 + 40)
          goto LABEL_289;
LABEL_131:
        if (v56)
          v57 = v56 - 24;
        else
          v57 = 0;
        v58 = sub_1C55A7838(v57);
        if (v58 == 0xFFFFFFFFLL)
          goto LABEL_239;
        v59 = *(_DWORD *)(v57 + 20);
        v60 = (v59 & 0x40000000) != 0 ? *(_QWORD *)(v57 - 8) : v57 - 32 * (v59 & 0x7FFFFFF);
        v609 = *(unsigned __int8 **)(v60 + 32 * v58);
        if ((*(_DWORD *)(*(_QWORD *)v609 + 8) & 0xFFFFFF00) != 0x300)
          goto LABEL_239;
        if (!v56)
          goto LABEL_177;
        if (*(_BYTE *)(v57 + 16) != 60)
          goto LABEL_177;
        v61 = *(_QWORD *)(v57 - 32);
        if (!v61 || *(unsigned __int8 *)(v61 + 16) > 0x14u)
          goto LABEL_177;
        if (!v606)
        {
          v62 = operator new();
          *(_QWORD *)v62 = v62 + 32;
          *(_QWORD *)(v62 + 8) = v62 + 32;
          *(_QWORD *)(v62 + 16) = 8;
          v606 = (void **)v62;
          *(_DWORD *)(v62 + 24) = 0;
          if (v585)
          {
            v63 = *(void **)(v585 + 8);
            if (v63 != *(void **)v585)
              free(v63);
            MEMORY[0x1CAA32FC0](v585, 0x10C0C40CA0A269ALL);
          }
          sub_1C5EA6F60(*(_QWORD *)(v592 + 40), (llvm::SmallPtrSetImplBase *)v606);
          v585 = (unint64_t)v606;
        }
        v620.n128_u64[0] = (unint64_t)v621;
        v620.n128_u64[1] = 0x800000000;
        v64 = 1;
        sub_1C4848C0C((unsigned int *)&v620, 1uLL, v61);
        v65 = v620.n128_u32[2];
        if (!v620.n128_u32[2])
          goto LABEL_174;
        while (1)
        {
          v66 = *(_QWORD *)(v620.n128_u64[0] + 8 * v65 - 8);
          v620.n128_u32[2] = v65 - 1;
          if (v66)
            v67 = *(_BYTE *)(v66 + 16) == 3;
          else
            v67 = 0;
          if (v67)
          {
            v68 = (char *)sub_1C477672C((uint64_t)v606, v66);
            v69 = (char *)v606[1];
            v70 = 20;
            if (v69 != *v606)
              v70 = 16;
            if (v68 != &v69[8 * *(unsigned int *)((char *)v606 + v70)])
            {
              v64 = 0;
              goto LABEL_174;
            }
          }
          v71 = *(_DWORD *)(v66 + 20);
          if ((v71 & 0x40000000) != 0)
          {
            v73 = *(_QWORD *)(v66 - 8);
            v72 = v71 & 0x7FFFFFF;
            if (v72)
            {
LABEL_162:
              v74 = 32 * v72;
              do
              {
                v75 = *(_QWORD *)v73;
                if (*(_QWORD *)v73)
                  v76 = *(unsigned __int8 *)(*(_QWORD *)v73 + 16) > 0x14u;
                else
                  v76 = 1;
                if (!v76)
                {
                  v77 = v620.n128_u32[2];
                  if (v620.n128_u32[2] >= (unint64_t)v620.n128_u32[3])
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v620, (uint64_t)v621, v620.n128_u32[2] + 1, 8);
                    v77 = v620.n128_u32[2];
                  }
                  *(_QWORD *)(v620.n128_u64[0] + 8 * v77) = v75;
                  ++v620.n128_u32[2];
                }
                v73 += 32;
                v74 -= 32;
              }
              while (v74);
            }
          }
          else
          {
            v72 = v71 & 0x7FFFFFF;
            v73 = v66 - 32 * v72;
            if (v72)
              goto LABEL_162;
          }
          v65 = v620.n128_u32[2];
          if (!v620.n128_u32[2])
          {
            v64 = 1;
LABEL_174:
            if ((_QWORD *)v620.n128_u64[0] != v621)
              free((void *)v620.n128_u64[0]);
            if (!v64)
            {
              v55 = v597;
              goto LABEL_239;
            }
LABEL_177:
            if (v53)
              goto LABEL_223;
            v78 = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v593 + 24))(v593, v592);
            v79 = *(uint64_t ***)(v592 + 40);
            FirstNonPHIOrDbgOrLifetime = llvm::BasicBlock::getFirstNonPHIOrDbgOrLifetime(v589, 1);
            sub_1C4773D54((uint64_t)&v620, (uint64_t)FirstNonPHIOrDbgOrLifetime, 0, 0, 0);
            v81 = v615;
            if (v617)
            {
              v82 = (v617 - 1) & v588;
              v83 = *(_QWORD *)(v615 + 16 * v82);
              if (v592 == v83)
              {
LABEL_180:
                if ((_DWORD)v82 != v617)
                {
                  v85 = *(_QWORD **)(v615 + 16 * v82 + 8);
                  goto LABEL_212;
                }
              }
              else
              {
                v167 = 1;
                while (v83 != -4096)
                {
                  v168 = v82 + v167++;
                  v82 = v168 & (v617 - 1);
                  v83 = *(_QWORD *)(v615 + 16 * v82);
                  if (v592 == v83)
                    goto LABEL_180;
                }
              }
            }
            v84 = (char *)operator new(0x78uLL);
            v85 = v84 + 32;
            *((_DWORD *)v84 + 13) = *((_DWORD *)v84 + 13) & 0x38000000 | 1;
            *(_QWORD *)v84 = 0;
            *((_QWORD *)v84 + 1) = 0;
            *((_QWORD *)v84 + 2) = 0;
            *((_QWORD *)v84 + 3) = v84 + 32;
            v86 = (llvm::PointerType *)(*(_QWORD *)v625 + 1960);
            Impl = "mtl.lm_size";
            v630 = 259;
            llvm::GlobalVariable::GlobalVariable((uint64_t)(v84 + 32), (uint64_t)v79, v86, 1, 0, 0, (uint64_t)&Impl, 0, 0, 0x100000002, 0);
            v88 = llvm::UniqueStringSaver::save(***((_QWORD ***)v84 + 4) + 2136, "driver_parameters", 0x11uLL);
            v89 = v87;
            v90 = ***((_QWORD ***)v84 + 4);
            Impl = v84 + 32;
            v91 = *(_DWORD *)(v90 + 2520);
            if (v91)
            {
              v92 = *(_QWORD *)(v90 + 2504);
              v93 = v91 - 1;
              v94 = v93 & ((v85 >> 4) ^ (v85 >> 9));
              v95 = (_QWORD *)(v92 + 24 * v94);
              v96 = (_QWORD *)*v95;
              if ((_QWORD *)*v95 == v85)
                goto LABEL_183;
              v154 = 0;
              v155 = 1;
              while (v96 != (_QWORD *)-4096)
              {
                if (v154)
                  v156 = 0;
                else
                  v156 = v96 == (_QWORD *)-8192;
                if (v156)
                  v154 = v95;
                v157 = v94 + v155++;
                v94 = v157 & v93;
                v95 = (_QWORD *)(v92 + 24 * v94);
                v96 = (_QWORD *)*v95;
                if ((_QWORD *)*v95 == v85)
                  goto LABEL_183;
              }
              if (v154)
                v165 = v154;
              else
                v165 = v95;
            }
            else
            {
              v165 = 0;
            }
            v95 = sub_1C53D65B8(v90 + 2504, (uint64_t)&Impl, (uint64_t *)&Impl, v165);
            v166 = Impl;
            v95[1] = 0;
            v95[2] = 0;
            *v95 = v166;
LABEL_183:
            v95[1] = v88;
            v95[2] = v89;
            *((_DWORD *)v84 + 16) = *((_DWORD *)v84 + 16) & 0xFFBFFFFF | ((v89 != 0) << 22);
            v97 = *v79;
            Impl = llvm::ValueAsMetadata::get((llvm::ValueAsMetadata *)v85, v87);
            v99 = **v79;
            v100 = *(llvm::ConstantInt **)(v99 + 1960);
            v101 = *(unsigned int *)(v99 + 1968);
            LODWORD(v670) = v101 >> 8;
            if (v101 >> 8 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v669, 111, 0);
            }
            else
            {
              if (v101 <= 0xFF)
                v102 = 0;
              else
                v102 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v101);
              v669 = (uint64_t **)(v102 & 0x6F);
            }
            v104 = llvm::ConstantInt::get(v100, (llvm::LLVMContext *)&v669, v98);
            if (v670 >= 0x41 && v669)
              MEMORY[0x1CAA32F9C](v669, 0x1000C8000313F17);
            v628 = (uint64_t)llvm::ValueAsMetadata::get(v104, v103);
            v106 = **v79;
            v107 = *(llvm::ConstantInt **)(v106 + 1960);
            LODWORD(v670) = *(_DWORD *)(v106 + 1968) >> 8;
            if (v670 > 0x40)
              llvm::APInt::initSlowCase((llvm::APInt *)&v669, 0, 0);
            else
              v669 = 0;
            v109 = llvm::ConstantInt::get(v107, (llvm::LLVMContext *)&v669, v105);
            if (v670 >= 0x41 && v669)
              MEMORY[0x1CAA32F9C](v669, 0x1000C8000313F17);
            v629[0] = llvm::ValueAsMetadata::get(v109, v108);
            Impl = (void *)llvm::MDTuple::getImpl(v97, &Impl, 3, 0, 1);
            sub_1C55A9958((uint64_t)v79, (llvm::MDNode **)&Impl, 1);
            (*(void (**)(void **__return_ptr, uint64_t))(*(_QWORD *)v78 + 72))(&Impl, v78);
            (*(void (**)(uint64_t ***__return_ptr, uint64_t))(*(_QWORD *)v78 + 80))(&v669, v78);
            v110 = Impl;
            v111 = v669;
            if (Impl)
            {
              (*(void (**)(void **__return_ptr, void *))(*(_QWORD *)Impl + 16))(&Impl, Impl);
              v112 = Impl;
            }
            else
            {
              v112 = 0;
            }
            v601 = v111;
            ((void (*)(void **__return_ptr, uint64_t **))(*v111)[2])(&Impl, v111);
            v113 = Impl;
            while (2)
            {
              if (((*(uint64_t (**)(void *, void *))(*(_QWORD *)v112 + 24))(v112, v113) & 1) == 0)
              {
                v114 = *(_QWORD *)(*(uint64_t (**)(void *))(*(_QWORD *)v112 + 32))(v112);
                Impl = 0;
                v115 = v617;
                if ((sub_1C55A9A70(v81, v617, v114, &Impl) & 1) == 0)
                {
                  if (4 * (int)v616 + 4 >= 3 * v115)
                  {
                    v116 = 2 * v115;
                    goto LABEL_199;
                  }
                  if (v115 + ~(_DWORD)v616 - HIDWORD(v616) <= v115 >> 3)
                  {
                    v116 = v115;
LABEL_199:
                    sub_1C55A9B04((uint64_t)&v615, v116);
                    Impl = 0;
                    v81 = v615;
                    sub_1C55A9A70(v615, v617, v114, &Impl);
                  }
                  v117 = Impl;
                  LODWORD(v616) = v616 + 1;
                  if (*(_QWORD *)Impl != -4096)
                    --HIDWORD(v616);
                  *(_QWORD *)Impl = v114;
                  v117[1] = v85;
                }
                (*(void (**)(void *))(*(_QWORD *)v112 + 40))(v112);
                continue;
              }
              break;
            }
            if (v113)
              (*(void (**)(void *))(*(_QWORD *)v113 + 8))(v113);
            (*(void (**)(void *))(*(_QWORD *)v112 + 8))(v112);
            ((void (*)(uint64_t **))(*v601)[1])(v601);
            if (v110)
              (*(void (**)(void *))(*(_QWORD *)v110 + 8))(v110);
LABEL_212:
            v118 = v85[3];
            v672 = 257;
            llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v623 + 56) + 40) + 272, v118);
            v120 = v119;
            v121 = (char *)operator new(0x60uLL);
            v122 = v121;
            *((_QWORD *)v121 + 1) = 0;
            v123 = (unsigned __int8 *)(v121 + 32);
            *((_QWORD *)v121 + 2) = 0;
            *((_QWORD *)v121 + 3) = v121 + 32;
            v630 = 257;
            *((_QWORD *)v121 + 4) = v118;
            *((_QWORD *)v121 + 5) = 0;
            *((_WORD *)v121 + 24) = 60;
            *((_DWORD *)v121 + 13) = 1;
            *(_OWORD *)(v121 + 56) = 0u;
            *(_OWORD *)(v121 + 72) = 0u;
            *((_DWORD *)v121 + 22) = 0;
            *(_QWORD *)v121 = v85;
            v126 = v85[1];
            v125 = v85 + 1;
            v124 = v126;
            *((_QWORD *)v121 + 1) = v126;
            if (v126)
              *(_QWORD *)(v124 + 16) = v121 + 8;
            *((_QWORD *)v121 + 2) = v125;
            *v125 = v121;
            *((_WORD *)v121 + 25) = 2 * (v120 & 0x3F);
            v121[92] = 1;
            llvm::Value::setName((uint64_t ***)v121 + 4, (uint64_t)&Impl);
            (*(void (**)(uint64_t, unsigned __int8 *, uint64_t ***, uint64_t, uint64_t))(*(_QWORD *)v626 + 16))(v626, v123, &v669, v623, v624);
            if (!v620.n128_u32[2])
            {
LABEL_215:
              v127 = *(_QWORD *)v625 + 1936;
              v630 = 257;
              v53 = sub_1C4773E38((uint64_t *)&v620, 38, v123, v127, (uint64_t)&Impl);
              v129 = *(llvm::ConstantInt **)(*(_QWORD *)v625 + 1936);
              v130 = *(_DWORD *)(*(_QWORD *)v625 + 1944);
              LODWORD(v628) = v130 >> 8;
              if (v130 >> 8 > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)&Impl, 16, 0);
              }
              else
              {
                if (v130 <= 0xFF)
                  v131 = 0;
                else
                  v131 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v130);
                Impl = (void *)(v131 & 0x10);
              }
              v132 = llvm::ConstantInt::get(v129, (llvm::LLVMContext *)&Impl, v128);
              if (v628 >= 0x41 && Impl)
                MEMORY[0x1CAA32F9C](Impl, 0x1000C8000313F17);
              v630 = 257;
              v600 = sub_1C47733F8((uint64_t)&v620, (uint64_t)v53, (uint64_t)v132, (uint64_t)&Impl, 0, 0);
              if ((_QWORD *)v620.n128_u64[0] != v621)
                free((void *)v620.n128_u64[0]);
LABEL_223:
              sub_1C4773D54((uint64_t)&v620, v57, 0, 0, 0);
              v133 = *(_QWORD *)v625 + 1936;
              v630 = 257;
              v134 = (uint64_t *)sub_1C4773E38((uint64_t *)&v620, 47, v609, v133, (uint64_t)&Impl);
              v135 = (unsigned __int16)sub_1C55A8878(v57);
              v137 = *(llvm::ConstantInt **)(*(_QWORD *)v625 + 1936);
              v138 = *(_DWORD *)(*(_QWORD *)v625 + 1944);
              LODWORD(v628) = v138 >> 8;
              if (v138 >> 8 > 0x40)
              {
                llvm::APInt::initSlowCase((llvm::APInt *)&Impl, v135, 0);
              }
              else
              {
                if (v138 <= 0xFF)
                  v139 = 0;
                else
                  v139 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v138);
                Impl = (void *)(v139 & v135);
              }
              v140 = llvm::ConstantInt::get(v137, (llvm::LLVMContext *)&Impl, v136);
              if (v628 >= 0x41 && Impl)
                MEMORY[0x1CAA32F9C](Impl, 0x1000C8000313F17);
              v630 = 257;
              v141 = sub_1C47733F8((uint64_t)&v620, (uint64_t)v53, (uint64_t)v140, (uint64_t)&Impl, 0, 0);
              v630 = 257;
              v142 = sub_1C4774B48((uint64_t)&v620, 37, (uint64_t)v134, v141, (uint64_t)&Impl);
              v630 = 257;
              Select = (unsigned __int8 *)llvm::IRBuilderBase::CreateSelect((uint64_t *)&v620, v142, v134, v600, (uint64_t)&Impl, 0);
              v144 = *(_QWORD *)v609;
              v630 = 257;
              v145 = sub_1C4773E38((uint64_t *)&v620, 48, Select, v144, (uint64_t)&Impl);
              v146 = *(_DWORD *)(v57 + 20);
              if ((v146 & 0x40000000) != 0)
                v147 = *(_QWORD *)(v57 - 8);
              else
                v147 = v57 - 32 * (v146 & 0x7FFFFFF);
              v55 = v597;
              v148 = v147 + 32 * v58;
              if (*(_QWORD *)v148)
              {
                **(_QWORD **)(v148 + 16) = *(_QWORD *)(v148 + 8);
                v149 = *(_QWORD *)(v148 + 8);
                if (v149)
                  *(_QWORD *)(v149 + 16) = *(_QWORD *)(v148 + 16);
              }
              *(_QWORD *)v148 = v145;
              if (v145)
              {
                v152 = *((_QWORD *)v145 + 1);
                v150 = (uint64_t *)(v145 + 8);
                v151 = v152;
                v153 = v147 + 32 * v58;
                *(_QWORD *)(v153 + 8) = v152;
                if (v152)
                  *(_QWORD *)(v151 + 16) = v153 + 8;
                *(_QWORD *)(v153 + 16) = v150;
                *v150 = v148;
              }
              if ((_QWORD *)v620.n128_u64[0] != v621)
                free((void *)v620.n128_u64[0]);
LABEL_239:
              v56 = *(_QWORD *)(v56 + 8);
              if (v56 == v55)
              {
LABEL_289:
                v51 = *(_QWORD *)(v591 + 8);
                if (v51 == v586)
                {
                  v2 = v611;
                  v12 = a2 + 3;
                  v49 = v580;
                  if (v585)
                  {
                    v169 = *(void **)(v585 + 8);
                    if (v169 != *(void **)v585)
                      free(v169);
                    MEMORY[0x1CAA32FC0](v585, 0x10C0C40CA0A269ALL);
                  }
                  goto LABEL_294;
                }
                goto LABEL_128;
              }
              goto LABEL_131;
            }
            v158 = v620.n128_u64[0];
            v159 = v620.n128_u64[0] + 16 * v620.n128_u32[2];
            v160 = (unsigned __int8 **)(v122 + 80);
            while (2)
            {
              v161 = *(_DWORD *)v158;
              v162 = *(unsigned __int8 **)(v158 + 8);
              if (v162)
              {
                if (v161)
                  goto LABEL_257;
                v649[0] = *(_QWORD *)(v158 + 8);
                llvm::MetadataTracking::track((uint64_t)v649, v162, 2);
                v163 = *v160;
LABEL_261:
                if (v163)
                  llvm::MetadataTracking::untrack((uint64_t)(v122 + 80), v163);
                v164 = (unsigned __int8 *)v649[0];
                *v160 = (unsigned __int8 *)v649[0];
                if (v164)
                  llvm::MetadataTracking::retrack((uint64_t)v649, v164, (uint64_t)(v122 + 80));
              }
              else
              {
                v163 = *v160;
                if (*v160 || (v122[55] & 0x20) != 0)
                {
                  if (!v161)
                  {
                    v649[0] = 0;
                    goto LABEL_261;
                  }
LABEL_257:
                  llvm::Value::setMetadata((llvm::Value *)v123, *(_DWORD *)v158, (llvm::MDNode *)v162);
                }
              }
              v158 += 16;
              if (v158 == v159)
                goto LABEL_215;
              continue;
            }
          }
        }
      }
LABEL_295:
      if (v652 != v651)
        free(v652);
      v47 = *(_DWORD *)(v2 + 236);
    }
    if ((v47 & 1) != 0 && !*(_BYTE *)(v2 + 246))
      goto LABEL_302;
    goto LABEL_307;
  }
  if (*(_BYTE *)(v2 + 246))
    goto LABEL_110;
  v615 = 0;
  v616 = 0;
  v617 = 0;
LABEL_302:
  v644[0] = &off_1E8170238;
  v644[1] = &v646;
  v645 = v644;
  sub_1C55A76DC((uint64_t)a2, (uint64_t)v644);
  if (v645 == v644)
  {
    v170 = (void (**)(void))(v644[0] + 32);
LABEL_306:
    (*v170)();
  }
  else if (v645)
  {
    v170 = (void (**)(void))(*v645 + 40);
    goto LABEL_306;
  }
LABEL_307:
  if ((*(_BYTE *)(v2 + 236) & 4) != 0)
  {
    v171 = a2[4];
    if ((uint64_t *)v171 != v12)
    {
      v172 = (uint64_t)(a2 + 34);
      do
      {
        v173 = v171 - 56;
        if (v171)
        {
          if (*(_BYTE *)(v171 - 40) == 3)
          {
            if ((*(_DWORD *)(v171 - 36) & 0x7FFFFFF) != 0)
              goto LABEL_319;
            goto LABEL_314;
          }
        }
        else
        {
          v173 = 0;
        }
        if (*(_BYTE *)(v173 + 16) || *(_QWORD *)(v173 + 72) != v173 + 72 || (*(_BYTE *)(v173 + 34) & 0x80) != 0)
        {
LABEL_319:
          v174 = *(_QWORD *)(v173 + 80);
          if (v174)
            v175 = v174 - 24;
          else
            v175 = 0;
          v176 = v175 + 40;
          v177 = *(_QWORD *)(v175 + 48);
          while (v177 != v176)
          {
            v178 = (unsigned __int8 *)(v177 - 24);
            if (!v177)
              v178 = 0;
            v179 = v178[16];
            if (v179 == 59)
              v180 = (llvm::AllocaInst *)v178;
            else
              v180 = 0;
            if (v177 && v179 == 59)
            {
              v181 = *((_QWORD *)v180 + 8);
              sub_1C4768AD0(v172, v181);
              v183 = v182;
              v185 = v184 == 1;
              llvm::DataLayout::getAlignment(v172, v181);
              v188 = v187;
              if (v185)
              v189 = ((1 << v188) + ((unint64_t)(v183 + 7) >> 3) - 1) & -(1 << v188);
              if (llvm::AllocaInst::isArrayAllocation(v180))
              {
                v190 = *((_QWORD *)v180 - 4);
                if (v190)
                  v191 = *(_BYTE *)(v190 + 16) == 16;
                else
                  v191 = 0;
                if (!v191)
                  goto LABEL_343;
                v192 = (_QWORD *)(v190 + 24);
                if (*(_DWORD *)(v190 + 32) >= 0x41u)
                  v192 = (_QWORD *)*v192;
                v189 *= *v192;
              }
              v620.n128_u64[0] = (unint64_t)v180;
              v620.n128_u64[1] = v189;
              v621[0] = 32;
              sub_1C4AB8FDC((uint64_t)&v646, &v620);
            }
LABEL_343:
            v177 = *(_QWORD *)(v177 + 8);
            continue;
          }
        }
LABEL_314:
        v171 = *(_QWORD *)(v171 + 8);
      }
      while ((uint64_t *)v171 != v583);
    }
  }
  if ((_DWORD)v647)
  {
    v594 = 0;
    v193 = (llvm::DataLayout *)(a2 + 34);
    v194 = (_QWORD *)*a2;
    Impl = v629;
    v628 = 0x200000000;
    v195 = v646;
    v587 = (char *)v646 + 24 * v647;
    v633 = v194;
    v634 = &v642;
    v635 = &v643;
    v636 = 0;
    v637 = 0;
    v638 = 512;
    v639 = 7;
    v632 = 0;
    v631 = 0;
    v642 = &unk_1E8167888;
    v643 = &unk_1E8167A08;
    v641 = 0;
    v640 = 0;
    v2 = v611;
    while (1)
    {
      v196 = *v195;
      v607 = v195[1];
      v613[0] = 0;
      v613[1] = 0;
      v614 = 0;
      v620.n128_u64[0] = (unint64_t)v621;
      v620.n128_u64[1] = 0x800000000;
      v651 = &v653;
      v652 = (void *)0x400000000;
      v197 = *(_QWORD *)(v196 + 8);
      if (v197)
      {
        v198 = 0;
        do
        {
          if (v198 >= HIDWORD(v652))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v651, (uint64_t)&v653, v198 + 1, 8);
            v198 = v652;
          }
          *((_QWORD *)v651 + v198) = v197;
          v198 = (_DWORD)v652 + 1;
          LODWORD(v652) = (_DWORD)v652 + 1;
          v197 = *(_QWORD *)(v197 + 8);
        }
        while (v197);
        if (v198)
        {
          while (1)
          {
            v199 = (_QWORD *)*((_QWORD *)v651 + --v198);
            LODWORD(v652) = v198;
            v200 = v199[3];
            v201 = *(unsigned __int8 *)(v200 + 16);
            if (v200)
              v202 = v201 >= 0x1C;
            else
              v202 = 0;
            if (v202)
              goto LABEL_368;
            v204 = v201 > 0x1B || v201 == 5;
            if (v200)
              v205 = !v204;
            else
              v205 = 1;
            if (v205)
              goto LABEL_398;
            if (v201 > 0x1B)
LABEL_368:
              v206 = v201 - 28;
            else
              v206 = *(unsigned __int16 *)(v200 + 18);
            if (v206 > 0x38)
              goto LABEL_398;
            if (((1 << v206) & 0x100003300000000) == 0)
            {
              if (((1 << v206) & 0x2000400000000) != 0)
              {
                while (1)
                {
                  v200 = *(_QWORD *)(v200 + 8);
                  if (!v200)
                    break;
                  if (v198 >= HIDWORD(v652))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v651, (uint64_t)&v653, v198 + 1, 8);
                    v198 = v652;
                  }
                  *((_QWORD *)v651 + v198) = v200;
                  v198 = (_DWORD)v652 + 1;
                  LODWORD(v652) = (_DWORD)v652 + 1;
                }
              }
              goto LABEL_398;
            }
            v207 = sub_1C55A7838(v199[3]);
            if (v207 == 0xFFFFFFFFLL)
              goto LABEL_398;
            v208 = *(_DWORD *)(v200 + 20);
            if ((v208 & 0x40000000) != 0)
              v209 = *(_QWORD *)(v200 - 8);
            else
              v209 = v200 - 32 * (v208 & 0x7FFFFFF);
            v210 = *(_QWORD *)(v209 + 32 * v207);
            if ((*(_DWORD *)(*(_QWORD *)v210 + 8) & 0xFFFFFF00) == 0x4000)
            {
              if (!HIDWORD(v207))
              {
                while (1)
                {
                  v200 = *(_QWORD *)(v200 + 8);
                  if (!v200)
                    break;
                  if (v198 >= HIDWORD(v652))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v651, (uint64_t)&v653, v198 + 1, 8);
                    v198 = v652;
                  }
                  *((_QWORD *)v651 + v198) = v200;
                  v198 = (_DWORD)v652 + 1;
                  LODWORD(v652) = (_DWORD)v652 + 1;
                }
              }
              goto LABEL_398;
            }
            v211 = HIDWORD(v207) == 1 && *(_BYTE *)(v2 + 244) == 0;
            if (v211
              || (HIDWORD(v207) == 2 ? (v212 = *(_BYTE *)(v2 + 245) == 0) : (v212 = 0),
                  v212 || HIDWORD(v207) && v210 != *v199))
            {
LABEL_398:
              if (!v198)
                break;
            }
            else
            {
              v213 = v620.n128_u32[2];
              if (v620.n128_u32[2] >= (unint64_t)v620.n128_u32[3])
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v620, (uint64_t)v621, v620.n128_u32[2] + 1, 16);
                v213 = v620.n128_u32[2];
              }
              v214 = (_QWORD *)(v620.n128_u64[0] + 16 * v213);
              *v214 = v196;
              v214[1] = v200;
              ++v620.n128_u32[2];
              v198 = v652;
              if (!(_DWORD)v652)
                break;
            }
          }
        }
      }
      v610 = v195;
      if (v651 != &v653)
        free(v651);
      v215 = (llvm::Value **)v620.n128_u64[0];
      v602 = v620.n128_u64[0] + 16 * v620.n128_u32[2];
      if (!v620.n128_u32[2])
        goto LABEL_864;
      do
      {
        v473 = (uint64_t)v215[1];
        v605 = *(llvm::Value **)(*(_QWORD *)(v473 + 40) + 56);
        v612 = v605;
        if (*(_BYTE *)(v2 + 241))
        {
          v474 = 0;
LABEL_836:
          v534 = sub_1C55A7838(v473);
          v535 = *(_DWORD *)(v473 + 20);
          if ((v535 & 0x40000000) != 0)
            v536 = *(_QWORD *)(v473 - 8);
          else
            v536 = v473 - 32 * (v535 & 0x7FFFFFF);
          v537 = *(llvm::Value **)(v536 + 32 * v534);
          v538 = *(_QWORD *)v537;
          v539 = sub_1C55A8878(v473);
          if (v607 != -1)
          {
            v540 = *(void **)v610;
            v652 = 0;
            v541 = llvm::Value::stripPointerCasts(v537);
            v543 = *((unsigned __int8 *)v541 + 16);
            if (v543 == 62 || v543 == 5 && *((_WORD *)v541 + 9) == 34)
            {
              v651 = v541;
              LODWORD(v670) = 64;
              v669 = 0;
              while (llvm::GEPOperator::accumulateConstantOffset((uint64_t)v651, v193, (uint64_t)&v669, 0, v542))
              {
                if ((sub_1C55A9E80((llvm::Value **)&v651) & 1) == 0)
                {
                  if ((sub_1C4DA9220((llvm::APInt *)&v669, 0) & 1) == 0)
                  {
                    v544 = *((unsigned __int8 *)v652 + 16);
                    if ((v544 - 59) <= 1
                      && (v544 == 60 ? *((_QWORD *)v652 - 4) == (_QWORD)v540 : v652 == v540))
                    {
                      v546 = (uint64_t)sub_1C47EE5B8(&v669, 0xFFFFFFFFFFFFFFFFLL);
                      goto LABEL_854;
                    }
                  }
                  break;
                }
              }
              v546 = -1;
LABEL_854:
              if (v670 >= 0x41 && v669)
                MEMORY[0x1CAA32F9C](v669, 0x1000C8000313F17);
              if (v546 != -1
                && (!*(_BYTE *)(v611 + 240) && (*(_DWORD *)(v538 + 8) & 0xFFFFFF00) == 0x200
                 || (v546 + (unint64_t)v539) * v474 <= v607))
              {
LABEL_861:
                v2 = v611;
                goto LABEL_862;
              }
            }
          }
          v2 = v611;
          if (*(_BYTE *)(v611 + 243) && v610[5])
          {
            v248 = v215[1];
            v631 = *((_QWORD *)v248 + 5);
            v632 = (uint64_t)v248 + 24;
            v249 = (void *)*((_QWORD *)v248 + 6);
            v651 = v249;
            if (v249)
            {
              llvm::MetadataTracking::track((uint64_t)&v651, (unsigned __int8 *)v249, 2);
              v250 = v651;
            }
            else
            {
              v250 = 0;
            }
            sub_1C4774EF4((uint64_t)&Impl, 0, (uint64_t)v250);
            if (v651)
              llvm::MetadataTracking::untrack((uint64_t)&v651, (unsigned __int8 *)v651);
            v251 = *(_QWORD *)(v611 + 256);
            LOWORD(v655[0]) = 257;
            v252 = sub_1C4773E38((uint64_t *)&Impl, 47, (unsigned __int8 *)v537, v251, (uint64_t)&v651);
            v253 = (unsigned __int8 *)sub_1C55A9600(v611, v610, (uint64_t)v605);
            v254 = *(_QWORD *)(v611 + 256);
            LOWORD(v655[0]) = 257;
            v256 = sub_1C4773E38((uint64_t *)&Impl, 47, v253, v254, (uint64_t)&v651);
            v257 = v539;
            v258 = *(llvm::ConstantInt **)(*v633 + 1984);
            v259 = *(_DWORD *)(*v633 + 1992);
            LODWORD(v652) = v259 >> 8;
            if (v259 >> 8 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v651, v257, 0);
            }
            else
            {
              if (v259 <= 0xFF)
                v260 = 0;
              else
                v260 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v259);
              v651 = (void *)(v260 & v257);
            }
            v261 = llvm::ConstantInt::get(v258, (llvm::LLVMContext *)&v651, v255);
            if (v652 >= 0x41 && v651)
              MEMORY[0x1CAA32F9C](v651, 0x1000C8000313F17);
            LOWORD(v655[0]) = 257;
            v247 = sub_1C47733F8((uint64_t)&Impl, (uint64_t)v256, (uint64_t)v261, (uint64_t)&v651, 0, 0);
            LOWORD(v655[0]) = 257;
            v246 = &v651;
            v245 = v252;
LABEL_437:
            v262 = sub_1C4774B48((uint64_t)&Impl, 37, (uint64_t)v245, v247, (uint64_t)v246);
            v263 = 0;
            v264 = (uint64_t)v215[1];
            v265 = *(unsigned __int8 *)(v264 + 16) - 33;
            v266 = (uint64_t)v605;
            if (v265 <= 0x37)
            {
              if (((1 << (*(_BYTE *)(v264 + 16) - 33)) & 0x8000000000041) != 0)
              {
                v277 = *(_QWORD *)(v264 + 64);
                if (v277 && (*(_BYTE *)(v277 + 17) & 0x30) != 0)
                  goto LABEL_568;
                v278 = *(_DWORD *)(v264 + 20);
                if (v278 < 0)
                {
                  v458 = v264 - 32 * (v278 & 0x7FFFFFF);
                  v461 = *(_QWORD *)(v458 - 8);
                  v459 = v458 - 8;
                  v460 = v461;
                  if (v461)
                  {
                    v462 = -v460;
                    while (1)
                    {
                      v463 = *(_DWORD *)(*(_QWORD *)(v459 + v462) + 8);
                      if (v463 >= 2 && v463 != 7)
                        break;
                      v462 += 16;
                      v2 = v611;
                      v266 = (uint64_t)v605;
                      if (!v462)
                        goto LABEL_458;
                    }
                    v263 = 1;
                    v2 = v611;
                    v266 = (uint64_t)v605;
                    goto LABEL_461;
                  }
                }
LABEL_458:
                if ((llvm::CallBase::hasFnAttrOnCalledFunction((uint64_t)v215[1], 45) & 1) != 0)
LABEL_568:
                  v263 = 0;
                else
                  v263 = llvm::CallBase::hasFnAttrOnCalledFunction(v264, 44) ^ 1;
              }
              else if (v265 == 27)
              {
                v263 = (*(_WORD *)(v264 + 18) & 0x301) != 0;
              }
              else
              {
                v263 = ((1 << (*(_BYTE *)(v264 + 16) - 33)) & 0x808001D0000010) != 0;
              }
            }
LABEL_461:
            v279 = *(_QWORD *)v610;
            v651 = 0;
            if (sub_1C6200DDC(*(_QWORD *)(v2 + 104), *(_DWORD *)(v2 + 120), v279, v266, &v651))
              v280 = v651 == (void *)(*(_QWORD *)(v2 + 104) + 24 * *(unsigned int *)(v2 + 120));
            else
              v280 = 1;
            if (!v280)
            {
              v281 = (unsigned __int8 *)*((_QWORD *)v651 + 2);
LABEL_466:
              v282 = *(_QWORD *)v537;
              LOWORD(v655[0]) = 257;
              v283 = sub_1C4773E38((uint64_t *)&Impl, 48, v281, v282, (uint64_t)&v651);
              if (*(_DWORD *)(v2 + 232) == -1)
              {
LABEL_467:
                v649[0] = *(_QWORD *)v537;
                Declaration = llvm::Intrinsic::getDeclaration(a2, 1266, v649, 1);
                if (Declaration)
                  v285 = *(uint64_t ***)(Declaration + 24);
                else
                  v285 = 0;
                v669 = (uint64_t **)v537;
                v670 = (uint64_t)v283;
                v671 = v262;
                LOWORD(v655[0]) = 257;
                v286 = sub_1C4774778((uint64_t *)&Impl, v285, Declaration, (uint64_t *)&v669, 3, (uint64_t)&v651, 0);
                goto LABEL_471;
              }
              v298 = sub_1C55A9098(v2, (uint64_t **)a2);
              v299 = *(_QWORD *)(v298 + 24);
              v672 = 257;
              llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v631 + 56) + 40) + 272, v299);
              v301 = v300;
              v302 = (char *)operator new(0x60uLL);
              v303 = v302;
              *((_QWORD *)v302 + 1) = 0;
              *((_QWORD *)v302 + 2) = 0;
              *((_QWORD *)v302 + 3) = v302 + 32;
              v603 = (uint64_t ***)(v302 + 32);
              LOWORD(v655[0]) = 257;
              *((_QWORD *)v302 + 4) = v299;
              *((_QWORD *)v302 + 5) = 0;
              *((_WORD *)v302 + 24) = 60;
              *((_DWORD *)v302 + 13) = 1;
              *(_OWORD *)(v302 + 56) = 0u;
              *(_OWORD *)(v302 + 72) = 0u;
              *((_DWORD *)v302 + 22) = 0;
              *(_QWORD *)v302 = v298;
              v306 = *(_QWORD *)(v298 + 8);
              v305 = (_QWORD *)(v298 + 8);
              v304 = v306;
              *((_QWORD *)v302 + 1) = v306;
              if (v306)
                *(_QWORD *)(v304 + 16) = v302 + 8;
              *((_QWORD *)v302 + 2) = v305;
              *v305 = v302;
              *((_WORD *)v302 + 25) = 2 * (v301 & 0x3F);
              v302[92] = 1;
              llvm::Value::setName(v603, (uint64_t)&v651);
              (*((void (**)(void **, uint64_t ***, uint64_t ***, uint64_t, uint64_t))*v635 + 2))(v635, v603, &v669, v631, v632);
              if (!(_DWORD)v628)
              {
LABEL_485:
                v308 = *v633;
                v309 = (int)v610[4];
                v310 = *(llvm::ConstantInt **)(*v633 + 1984);
                v311 = *(_DWORD *)(*v633 + 1992);
                LODWORD(v652) = v311 >> 8;
                if (v311 >> 8 > 0x40)
                {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v651, v309, 0);
                }
                else
                {
                  if (v311 <= 0xFF)
                    v312 = 0;
                  else
                    v312 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v311);
                  v651 = (void *)(v312 & v309);
                }
                v313 = llvm::ConstantInt::get(v310, (llvm::LLVMContext *)&v651, v307);
                if (v652 >= 0x41 && v651)
                  MEMORY[0x1CAA32F9C](v651, 0x1000C8000313F17);
                LOWORD(v655[0]) = 257;
                v315 = sub_1C4867B70((uint64_t *)&Impl, (llvm::GetElementPtrInst *)(v308 + 1960), (uint64_t *)v603, (uint64_t)v313, (uint64_t)&v651);
                v316 = *(llvm::ConstantInt **)(*v633 + 1960);
                LODWORD(v652) = *(_DWORD *)(*v633 + 1968) >> 8;
                if (v652 > 0x40)
                  llvm::APInt::initSlowCase((llvm::APInt *)&v651, 0, 0);
                else
                  v651 = 0;
                v318 = (uint64_t *)llvm::ConstantInt::get(v316, (llvm::LLVMContext *)&v651, v314);
                if (v652 >= 0x41 && v651)
                  MEMORY[0x1CAA32F9C](v651, 0x1000C8000313F17);
                v319 = *(llvm::ConstantInt **)(*v633 + 1960);
                v320 = *(_DWORD *)(*v633 + 1968);
                LODWORD(v652) = v320 >> 8;
                if (v320 >> 8 > 0x40)
                {
                  llvm::APInt::initSlowCase((llvm::APInt *)&v651, 1, 0);
                }
                else
                {
                  if (v320 <= 0xFF)
                    LOBYTE(v321) = 0;
                  else
                    v321 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v320);
                  v651 = (void *)(v321 & 1);
                }
                v322 = llvm::ConstantInt::get(v319, (llvm::LLVMContext *)&v651, v317);
                if (v652 >= 0x41 && v651)
                  MEMORY[0x1CAA32F9C](v651, 0x1000C8000313F17);
                LOWORD(v655[0]) = 257;
                v323 = (uint64_t *)llvm::IRBuilderBase::CreateSelect((uint64_t *)&Impl, v262, v318, (uint64_t)v322, (uint64_t)&v651, 0);
                v585 &= 0xFFFFFFFFFFFF0000;
                sub_1C61D775C((uint64_t *)&Impl, 1, (uint64_t)v315, v323, 0, 2, 1);
                v2 = v611;
                goto LABEL_467;
              }
              v375 = (char *)Impl;
              v376 = (char *)Impl + 16 * v628;
              v377 = (unsigned __int8 **)(v303 + 80);
              while (1)
              {
                v378 = *(_DWORD *)v375;
                v307 = (const llvm::APInt *)*((_QWORD *)v375 + 1);
                if (v307)
                {
                  if (!v378)
                  {
                    v649[0] = *((_QWORD *)v375 + 1);
                    llvm::MetadataTracking::track((uint64_t)v649, (unsigned __int8 *)v307, 2);
                    v379 = *v377;
                    goto LABEL_591;
                  }
                }
                else
                {
                  v379 = *v377;
                  if (!*v377 && (v303[55] & 0x20) == 0)
                    goto LABEL_588;
                  if (!v378)
                  {
                    v649[0] = 0;
LABEL_591:
                    if (v379)
                      llvm::MetadataTracking::untrack((uint64_t)(v303 + 80), v379);
                    v380 = (unsigned __int8 *)v649[0];
                    *v377 = (unsigned __int8 *)v649[0];
                    if (v380)
                      llvm::MetadataTracking::retrack((uint64_t)v649, v380, (uint64_t)(v303 + 80));
                    goto LABEL_588;
                  }
                }
                llvm::Value::setMetadata((llvm::Value *)v603, *(_DWORD *)v375, v307);
LABEL_588:
                v375 += 16;
                if (v375 == v376)
                  goto LABEL_485;
              }
            }
            v324 = **(uint64_t ***)v266;
            v651 = &v653;
            v652 = (void *)0x200000000;
            v658 = v324;
            v659 = &v667;
            v660 = &v668;
            v661 = 0;
            v662 = 0;
            v663 = 512;
            v664 = 7;
            v656 = 0;
            v657 = 0;
            v665 = 0;
            v666 = 0;
            v667 = &unk_1E8167888;
            v668 = &unk_1E8167A08;
            if (!v610[5])
            {
              v325 = *(_QWORD *)(v266 + 80);
              if (v325)
                v326 = v325 - 24;
              else
                v326 = 0;
              sub_1C4D8AE2C((uint64_t)&v651, v326, *(_QWORD *)(v326 + 48));
              llvm::ArrayType::get((llvm::ArrayType *)(*v658 + 1912), (llvm::Type *)0x10);
              v672 = 257;
              v328 = (unsigned __int8 *)sub_1C486A5CC((uint64_t *)&v651, v327, 0, (uint64_t)&v669);
              v329 = *(_QWORD *)(v2 + 256);
              v672 = 257;
              v330 = sub_1C4773E38((uint64_t *)&v651, 47, v328, v329, (uint64_t)&v669);
              v331 = v266;
              v281 = v330;
LABEL_551:
              v669 = *(uint64_t ***)v610;
              v670 = v331;
              sub_1C62047D8((uint64_t)v582, (uint64_t *)&v669)[2] = v281;
              if (v651 != &v653)
                free(v651);
              goto LABEL_466;
            }
            v342 = (unsigned __int8 *)sub_1C55A9428(*(_QWORD *)(v266 + 80), v610, (uint64_t)&v651);
            v343 = *(_QWORD *)(v2 + 256);
            v672 = 257;
            v345 = sub_1C4773E38((uint64_t *)&v651, 47, v342, v343, (uint64_t)&v669);
            if (v263)
              v346 = 4294967280;
            else
              v346 = 4294967264;
            v347 = *(llvm::ConstantInt **)(*v658 + 1984);
            v348 = *(_DWORD *)(*v658 + 1992);
            LODWORD(v670) = v348 >> 8;
            if (v348 >> 8 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v669, 0xFFFFFFFF00000000, 0);
            }
            else
            {
              if (v348 <= 0xFF)
                v349 = 0;
              else
                v349 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v348);
              v669 = (uint64_t **)(v349 & 0xFFFFFFFF00000000);
            }
            v350 = llvm::ConstantInt::get(v347, (llvm::LLVMContext *)&v669, v344);
            if (v670 >= 0x41 && v669)
              MEMORY[0x1CAA32F9C](v669, 0x1000C8000313F17);
            v650 = 257;
            v352 = (_QWORD *)sub_1C4D89BCC((uint64_t)&v651, v345, (uint64_t)v350, (uint64_t)v649);
            v353 = *(llvm::ConstantInt **)(*v658 + 1984);
            v354 = *(_DWORD *)(*v658 + 1992);
            LODWORD(v670) = v354 >> 8;
            if (v354 >> 8 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v669, v346, 0);
              v2 = v611;
            }
            else
            {
              v2 = v611;
              if (v354 <= 0xFF)
                v355 = 0;
              else
                v355 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v354);
              v669 = (uint64_t **)(v355 & v346);
            }
            v356 = llvm::ConstantInt::get(v353, (llvm::LLVMContext *)&v669, v351);
            if (v670 >= 0x41 && v669)
              MEMORY[0x1CAA32F9C](v669, 0x1000C8000313F17);
            v619 = 257;
            v281 = (unsigned __int8 *)(*((uint64_t (**)(void **, _QWORD *, llvm::ValueHandleBase *, _QWORD, _QWORD))*v659
                                       + 2))(v659, v352, v356, 0, 0);
            if (v281)
            {
LABEL_550:
              v331 = (uint64_t)v605;
              goto LABEL_551;
            }
            v672 = 257;
            v357 = (char *)operator new(0x80uLL);
            v358 = v357;
            *(_QWORD *)v357 = 0;
            *((_QWORD *)v357 + 1) = 0;
            *((_QWORD *)v357 + 2) = 0;
            *((_QWORD *)v357 + 5) = 0;
            *((_QWORD *)v357 + 6) = 0;
            *((_QWORD *)v357 + 4) = 0;
            v359 = (llvm::ValueHandleBase **)(v357 + 32);
            *((_QWORD *)v357 + 8) = *v352;
            v281 = (unsigned __int8 *)(v357 + 64);
            *((_QWORD *)v357 + 3) = v357 + 64;
            *((_QWORD *)v357 + 7) = v357 + 64;
            *((_QWORD *)v357 + 9) = 0;
            v357[80] = 41;
            v357[81] = 0;
            *((_WORD *)v357 + 41) = 0;
            *((_DWORD *)v357 + 21) = 2;
            *((_DWORD *)v357 + 30) = 0;
            *(_OWORD *)(v357 + 104) = 0u;
            *(_OWORD *)(v357 + 88) = 0u;
            *(_QWORD *)v357 = v352;
            v362 = v352[1];
            v361 = v352 + 1;
            v360 = v362;
            *((_QWORD *)v357 + 1) = v362;
            if (v362)
              *(_QWORD *)(v360 + 16) = v357 + 8;
            *((_QWORD *)v357 + 2) = v361;
            *v361 = v357;
            if (*((_QWORD *)v357 + 4))
            {
              **((_QWORD **)v357 + 6) = *((_QWORD *)v357 + 5);
              v465 = *((_QWORD *)v357 + 5);
              if (v465)
                *(_QWORD *)(v465 + 16) = *((_QWORD *)v357 + 6);
            }
            *v359 = v356;
            if (v356)
            {
              v365 = *((_QWORD *)v356 + 1);
              v364 = (llvm::ValueHandleBase ***)((char *)v356 + 8);
              v363 = v365;
              *((_QWORD *)v357 + 5) = v365;
              if (v365)
                *(_QWORD *)(v363 + 16) = v357 + 40;
              *((_QWORD *)v357 + 6) = v364;
              *v364 = v359;
            }
            llvm::Value::setName((uint64_t ***)v357 + 8, (uint64_t)&v669);
            (*((void (**)(void **, unsigned __int8 *, _QWORD *, uint64_t, uint64_t))*v660 + 2))(v660, v281, v618, v656, v657);
            if (!(_DWORD)v652)
            {
LABEL_549:
              v2 = v611;
              goto LABEL_550;
            }
            v366 = (char *)v651;
            v367 = (char *)v651 + 16 * v652;
            v368 = (unsigned __int8 **)(v358 + 112);
            while (1)
            {
              v369 = *(_DWORD *)v366;
              v370 = (unsigned __int8 *)*((_QWORD *)v366 + 1);
              if (v370)
              {
                if (!v369)
                {
                  v673[0] = *((_QWORD *)v366 + 1);
                  llvm::MetadataTracking::track((uint64_t)v673, v370, 2);
                  v371 = *v368;
                  if (!*v368)
                  {
LABEL_566:
                    v372 = (unsigned __int8 *)v673[0];
                    *v368 = (unsigned __int8 *)v673[0];
                    if (v372)
                      llvm::MetadataTracking::retrack((uint64_t)v673, v372, (uint64_t)(v358 + 112));
                    goto LABEL_563;
                  }
LABEL_560:
                  llvm::MetadataTracking::untrack((uint64_t)(v358 + 112), v371);
                  goto LABEL_566;
                }
              }
              else
              {
                v371 = *v368;
                if (!*v368 && (v358[87] & 0x20) == 0)
                  goto LABEL_563;
                if (!v369)
                {
                  v673[0] = 0;
                  if (!v371)
                    goto LABEL_566;
                  goto LABEL_560;
                }
              }
              llvm::Value::setMetadata((llvm::Value *)v281, *(_DWORD *)v366, (llvm::MDNode *)v370);
LABEL_563:
              v366 += 16;
              if (v366 == v367)
                goto LABEL_549;
            }
          }
          if (v614)
          {
            v223 = (v614 - 1) & ((v605 >> 4) ^ (v605 >> 9));
            v224 = *(llvm::Value **)(v613[0] + 16 * v223);
            if (v605 == v224)
              goto LABEL_412;
            v456 = 1;
            while (v224 != (llvm::Value *)-4096)
            {
              v457 = v223 + v456++;
              v223 = v457 & (v614 - 1);
              v224 = *(llvm::Value **)(v613[0] + 16 * v223);
              if (v605 == v224)
                goto LABEL_412;
            }
          }
          v216 = (unsigned __int8 *)sub_1C55A9428(*((_QWORD *)v605 + 10), v610, (uint64_t)&Impl);
          v217 = *(_QWORD *)(v611 + 256);
          LOWORD(v655[0]) = 257;
          v218 = sub_1C4773E38((uint64_t *)&Impl, 47, v216, v217, (uint64_t)&v651);
          v219 = sub_1C55A9600(v611, v610, (uint64_t)v605);
          LOWORD(v655[0]) = 257;
          v220 = (unsigned __int8 *)sub_1C47733F8((uint64_t)&Impl, (uint64_t)v219, (uint64_t)v218, (uint64_t)&v651, 0, 0);
          v221 = *(_QWORD *)(v611 + 264);
          v672 = 257;
          v222 = sub_1C4773E38((uint64_t *)&Impl, 38, v220, v221, (uint64_t)&v669);
          sub_1C6180A54((uint64_t)v613, (uint64_t *)&v612)[1] = v222;
LABEL_412:
          v225 = v215[1];
          v631 = *((_QWORD *)v225 + 5);
          v632 = (uint64_t)v225 + 24;
          v226 = (void *)*((_QWORD *)v225 + 6);
          v651 = v226;
          if (v226)
          {
            llvm::MetadataTracking::track((uint64_t)&v651, (unsigned __int8 *)v226, 2);
            v227 = v651;
          }
          else
          {
            v227 = 0;
          }
          sub_1C4774EF4((uint64_t)&Impl, 0, (uint64_t)v227);
          if (v651)
            llvm::MetadataTracking::untrack((uint64_t)&v651, (unsigned __int8 *)v651);
          v228 = *(_QWORD *)(v611 + 256);
          LOWORD(v655[0]) = 257;
          v229 = sub_1C4773E38((uint64_t *)&Impl, 47, (unsigned __int8 *)v537, v228, (uint64_t)&v651);
          v231 = sub_1C6180A54((uint64_t)v613, (uint64_t *)&v612)[1];
          v232 = v539;
          v233 = *(llvm::ConstantInt **)(*v633 + 1960);
          v234 = *(_DWORD *)(*v633 + 1968);
          LODWORD(v652) = v234 >> 8;
          if (v234 >> 8 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v651, v232, 0);
          }
          else
          {
            if (v234 <= 0xFF)
              v235 = 0;
            else
              v235 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v234);
            v651 = (void *)(v235 & v232);
          }
          v236 = llvm::ConstantInt::get(v233, (llvm::LLVMContext *)&v651, v230);
          if (v652 >= 0x41 && v651)
            MEMORY[0x1CAA32F9C](v651, 0x1000C8000313F17);
          LOWORD(v655[0]) = 257;
          v237 = sub_1C47733F8((uint64_t)&Impl, v231, (uint64_t)v236, (uint64_t)&v651, 0, 0);
          v238 = v631;
          v239 = v632;
          v240 = (unsigned __int8 *)sub_1C55A9428(*((_QWORD *)v605 + 10), v610, (uint64_t)&Impl);
          if (v238)
          {
            sub_1C4D8AE2C((uint64_t)&Impl, v238, v239);
          }
          else
          {
            v631 = 0;
            v632 = 0;
          }
          v2 = v611;
          v241 = *(_QWORD *)(v611 + 256);
          LOWORD(v655[0]) = 257;
          v242 = sub_1C4773E38((uint64_t *)&Impl, 47, v240, v241, (uint64_t)&v651);
          LOWORD(v655[0]) = 257;
          v243 = (unsigned __int8 *)sub_1C47733F8((uint64_t)&Impl, (uint64_t)v229, (uint64_t)v242, (uint64_t)&v651, 0, 0);
          v244 = *(_QWORD *)(v611 + 264);
          LOWORD(v655[0]) = 257;
          v245 = sub_1C4773E38((uint64_t *)&Impl, 38, v243, v244, (uint64_t)&v651);
          v672 = 257;
          v246 = (void **)&v669;
          v247 = v237;
          goto LABEL_437;
        }
        v599 = *v215;
        v475 = *(unsigned __int8 *)(v473 + 16);
        if (v475 == 61)
        {
          v476 = 1 << ((unint64_t)*(unsigned __int16 *)(v473 + 18) >> 1);
          v477 = (llvm::Value **)(v473 - 32);
        }
        else if (v475 == 60)
        {
          v476 = 1 << ((unint64_t)*(unsigned __int16 *)(v473 + 18) >> 1);
          v477 = (llvm::Value **)(v473 - 32);
        }
        else
        {
          v478 = sub_1C55A7838(v473);
          v479 = *(_DWORD *)(v473 + 20);
          if ((v479 & 0x40000000) != 0)
            v480 = *(_QWORD *)(v473 - 8);
          else
            v480 = v473 - 32 * (v479 & 0x7FFFFFF);
          v477 = (llvm::Value **)(v480 + 32 * v478);
          LODWORD(v476) = 1;
        }
        v481 = *v477;
        v652 = 0;
        v482 = llvm::Value::stripPointerCasts(v481);
        v483 = v482;
        v484 = *((unsigned __int8 *)v482 + 16);
        if (v484 == 62 || v484 == 5 && *((_WORD *)v482 + 9) == 34)
        {
          v651 = v482;
          llvm::Value::stripPointerCasts(v481);
          v485 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v473 + 40) + 56) + 40) + 272;
          v486 = 32;
          if (*((_BYTE *)v483 + 16) == 62)
            v486 = 72;
          v487 = *(_QWORD *)((char *)v483 + v486);
          sub_1C4768AD0(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v473 + 40) + 56) + 40) + 272, v487);
          v489 = v488;
          v491 = v490 == 1;
          llvm::DataLayout::getAlignment(v485, v487);
          v494 = v493;
          if (v491)
          v495 = ((1 << v494) + 0xFFFFFFFFLL + ((unint64_t)(v489 + 7) >> 3)) & -(1 << v494);
          if (v476 < (((1 << v494) - 1 + ((unint64_t)(v489 + 7) >> 3)) & -(1 << v494)))
            LODWORD(v495) = v476;
          if ((_DWORD)v495)
          {
            if ((v495 & ((_DWORD)v495 - 1)) != 0)
              v496 = 1;
            else
              v496 = v495;
          }
          else
          {
            v496 = 1;
          }
          do
          {
            v498 = *((_DWORD *)v651 + 5);
            if ((v498 & 0x40000000) != 0)
            {
              v497 = (llvm::Value *)**((_QWORD **)v651 - 1);
              v504 = 24;
              if (*((_BYTE *)v651 + 16) == 62)
                v504 = 64;
              v505 = *(_QWORD *)((char *)v651 + v504);
              v501 = (uint64_t **)(*((_QWORD *)v651 - 1) + 32);
              v669 = v501;
              v670 = v505 | 4;
              v500 = (char *)*((_QWORD *)v651 - 1);
              v499 = v498 & 0x7FFFFFF;
            }
            else
            {
              v499 = v498 & 0x7FFFFFF;
              v500 = (char *)v651 - 32 * v499;
              v501 = (uint64_t **)(v500 + 32);
              v497 = *(llvm::Value **)v500;
              v502 = 24;
              if (*((_BYTE *)v651 + 16) == 62)
                v502 = 64;
              v503 = *(_QWORD *)((char *)v651 + v502) | 4;
              v669 = (uint64_t **)(v500 + 32);
              v670 = v503;
            }
            v506 = (uint64_t **)&v500[32 * v499];
            if (v501 != v506)
            {
              while (1)
              {
                v507 = v670 & 0xFFFFFFFFFFFFFFF8;
                if ((v670 & 4) != 0 || !v507)
                {
                  if ((v670 & 4) == 0 || !v507)
                  {
                    AggregateElement = (llvm::Constant *)*v501;
                    v513 = *((unsigned __int8 *)*v501 + 16);
                    if (AggregateElement)
                      v514 = v513 == 16;
                    else
                      v514 = 0;
                    if (!v514)
                      AggregateElement = llvm::Constant::getAggregateElement(AggregateElement, 0);
                    v517 = (unsigned int *)*((_QWORD *)AggregateElement + 3);
                    v515 = (unsigned int *)((char *)AggregateElement + 24);
                    v516 = v517;
                    if (v515[2] < 0x41)
                      v516 = v515;
                    v507 = *(_QWORD *)(*(_QWORD *)(v507 + 16) + 8 * *v516);
                  }
                  sub_1C4768AD0((uint64_t)v193, v507);
                  v519 = v518;
                  v521 = v520 == 1;
                  llvm::DataLayout::getAlignment((uint64_t)v193, v507);
                  v524 = v523;
                  if (v521)
                  v511 = ((1 << v524) + ((unint64_t)(v519 + 7) >> 3) - 1) & -(1 << v524);
                }
                else
                {
                  v508 = *v501;
                  v509 = (unsigned int *)(*v501 + 3);
                  if (*((_DWORD *)v508 + 8) >= 0x41u)
                    v509 = *(unsigned int **)v509;
                  v510 = *v509;
                  v511 = *((_QWORD *)llvm::DataLayout::getStructLayout(v193, (llvm::StructType *)(v670 & 0xFFFFFFFFFFFFFFF8))+ v510+ 2);
                }
                if (v511 % v496)
                  break;
                sub_1C4774E38((uint64_t)&v669);
                v501 = v669;
                if (v669 == v506)
                  goto LABEL_814;
              }
              v496 = 1;
            }
LABEL_814:
            ;
          }
          while ((sub_1C55A9E80((llvm::Value **)&v651) & 1) != 0);
        }
        else
        {
          v497 = llvm::Value::stripPointerCasts(v481);
          v496 = 0;
        }
        v525 = *((unsigned __int8 *)v497 + 16);
        v526 = v525 - 59;
        if ((v525 - 59) > 1)
          goto LABEL_828;
        if (v525 == 60)
          v526 = *((_QWORD *)v497 - 4) == (_QWORD)v599;
        v527 = v525 == 60;
        v528 = v525 == 60 ? v526 : v497 == v599;
        if ((v528 & 1) != 0)
        {
          if (v527)
            v529 = (unsigned __int8 *)v497;
          else
            v529 = (unsigned __int8 *)v599;
          v474 = v496;
          v530 = v529 != 0;
          if (v529 && !(_DWORD)v496)
            goto LABEL_861;
        }
        else
        {
LABEL_828:
          v496 = 0;
          v530 = 0;
          v529 = 0;
          v474 = 0;
        }
        if (*(_BYTE *)(v611 + 241))
        {
          v473 = (uint64_t)v215[1];
          goto LABEL_836;
        }
        v531 = !v530;
        v473 = (uint64_t)v215[1];
        if (!v610[5])
          v531 = 1;
        if ((v531 & 1) != 0)
          goto LABEL_836;
        v532 = sub_1C55A7838((uint64_t)v215[1]);
        v533 = *(_DWORD *)(v473 + 20);
        if ((v533 & 0x40000000) != 0)
          v267 = *(_QWORD *)(v473 - 8);
        else
          v267 = v473 - 32 * (v533 & 0x7FFFFFF);
        v268 = *(llvm::Value **)(v267 + 32 * v532);
        v618[1] = 0;
        v269 = llvm::Value::stripPointerCasts(v268);
        v270 = *((unsigned __int8 *)v269 + 16);
        if (v270 != 62)
        {
          if (v270 == 5)
          {
            if (*((_WORD *)v269 + 9) != 34)
              v269 = 0;
          }
          else
          {
            v269 = 0;
          }
        }
        v618[0] = v269;
        v598 = sub_1C55A7980((uint64_t)v215[1], (uint64_t)v618, a2, v496, *(unsigned __int8 *)(v611 + 242));
        v271 = *a2;
        v272 = 8 * v496;
        v273 = (llvm::Type *)(*(_DWORD *)(*(_QWORD *)v268 + 8) >> 8);
        LODWORD(v651) = 8 * v496;
        v590 = (unsigned __int8 *)v268;
        if (8 * (int)v496 <= 63)
        {
          switch(v272)
          {
            case 32:
              v274 = llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)v271 + 1960), v273);
              v275 = (_QWORD *)*a2;
LABEL_454:
              v276 = (llvm::PointerType *)(*v275 + 1960);
              goto LABEL_509;
            case 16:
              v274 = llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)v271 + 1936), v273);
              v275 = (_QWORD *)*a2;
LABEL_508:
              v276 = (llvm::PointerType *)(*v275 + 1936);
LABEL_509:
              v332 = (uint64_t *)v605;
              goto LABEL_510;
            case 8:
              v274 = llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)v271 + 1912), v273);
              v275 = (_QWORD *)*a2;
LABEL_579:
              v276 = (llvm::PointerType *)(*v275 + 1912);
              goto LABEL_509;
          }
        }
        else
        {
          if (v272 == 64)
          {
            v274 = llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)v271 + 1984), v273);
            v275 = (_QWORD *)*a2;
            LODWORD(v651) = 64;
LABEL_451:
            v276 = (llvm::PointerType *)(*v275 + 1984);
            goto LABEL_509;
          }
          if (v272 == 128)
          {
            v274 = llvm::PointerType::get((llvm::PointerType *)(*(_QWORD *)v271 + 2008), v273);
            v275 = (_QWORD *)*a2;
LABEL_571:
            v276 = (llvm::PointerType *)(*v275 + 2008);
            goto LABEL_509;
          }
        }
        v399 = sub_1C5270984(*(_QWORD *)v271 + 2168, &v651);
        v400 = (llvm::PointerType *)*((_QWORD *)v399 + 1);
        if (!v400)
        {
          v400 = (llvm::PointerType *)sub_1C484358C(*(_QWORD *)v271 + 2040, 24, 3);
          v449 = (int)v651;
          *(_QWORD *)v400 = v271;
          *((_QWORD *)v400 + 2) = 0;
          *((_QWORD *)v400 + 1) = (v449 << 8) | 0xDu;
          *((_QWORD *)v399 + 1) = v400;
        }
        v274 = llvm::PointerType::get(v400, v273);
        v275 = (_QWORD *)*a2;
        LODWORD(v651) = 8 * v496;
        if (v272 <= 63)
        {
          switch(v272)
          {
            case 8:
              goto LABEL_579;
            case 16:
              goto LABEL_508;
            case 32:
              goto LABEL_454;
          }
        }
        else
        {
          if (v272 == 64)
            goto LABEL_451;
          if (v272 == 128)
            goto LABEL_571;
        }
        v444 = sub_1C5270984(*v275 + 2168, &v651);
        v276 = (llvm::PointerType *)*((_QWORD *)v444 + 1);
        v332 = (uint64_t *)v605;
        if (!v276)
        {
          v276 = (llvm::PointerType *)sub_1C484358C(*v275 + 2040, 24, 3);
          v445 = (int)v651;
          *(_QWORD *)v276 = v275;
          *((_QWORD *)v276 + 2) = 0;
          *((_QWORD *)v276 + 1) = (v445 << 8) | 0xDu;
          *((_QWORD *)v444 + 1) = v276;
        }
LABEL_510:
        v333 = llvm::PointerType::get(v276, (llvm::Type *)(*(_DWORD *)(v274 + 8) >> 8));
        v334 = sub_1C55A8878((uint64_t)v215[1]);
        if (*(_BYTE *)(v598 + 16) == 16 && v598)
        {
          if (!*(_BYTE *)(v611 + 240) && (*(_DWORD *)(v274 + 8) & 0xFFFFFF00) == 0x200)
            goto LABEL_861;
          if (v607 != -1)
          {
            v335 = (_QWORD *)(v598 + 24);
            if (*(_DWORD *)(v598 + 32) >= 0x41u)
              v335 = (_QWORD *)*v335;
            if ((*v335 + (unint64_t)(v334 / v496)) * v474 <= v607)
              goto LABEL_861;
          }
        }
        v581 = v334 / v496;
        v579 = sub_1C55A8A18(v611, (uint64_t)v332, (uint64_t)v610, (uint64_t)&Impl);
        v336 = v215[1];
        v631 = *((_QWORD *)v336 + 5);
        v632 = (uint64_t)v336 + 24;
        v337 = (void *)*((_QWORD *)v336 + 6);
        v651 = v337;
        if (v337)
        {
          llvm::MetadataTracking::track((uint64_t)&v651, (unsigned __int8 *)v337, 2);
          v338 = v651;
        }
        else
        {
          v338 = 0;
        }
        sub_1C4774EF4((uint64_t)&Impl, 0, (uint64_t)v338);
        if (v651)
          llvm::MetadataTracking::untrack((uint64_t)&v651, (unsigned __int8 *)v651);
        LOWORD(v655[0]) = 257;
        v595 = sub_1C4773E38((uint64_t *)&Impl, 49, v590, v333, (uint64_t)&v651);
        v339 = 0;
        v340 = (uint64_t)v215[1];
        v341 = *(unsigned __int8 *)(v340 + 16) - 33;
        v584 = v333;
        if (v341 <= 0x37)
        {
          if (((1 << (*(_BYTE *)(v340 + 16) - 33)) & 0x8000000000041) != 0)
          {
            v373 = *(_QWORD *)(v340 + 64);
            if (v373 && (*(_BYTE *)(v373 + 17) & 0x30) != 0)
            {
LABEL_671:
              v339 = 0;
              goto LABEL_596;
            }
            v374 = *(_DWORD *)(v340 + 20);
            if (v374 < 0
              && (v466 = v340 - 32 * (v374 & 0x7FFFFFF),
                  v469 = *(_QWORD *)(v466 - 8),
                  v467 = v466 - 8,
                  (v468 = v469) != 0))
            {
              v470 = -v468;
              while (1)
              {
                v471 = *(_DWORD *)(*(_QWORD *)(v467 + v470) + 8);
                if (v471 >= 2 && v471 != 7)
                  break;
                v470 += 16;
                v332 = (uint64_t *)v605;
                if (!v470)
                  goto LABEL_575;
              }
              v339 = 1;
              v332 = (uint64_t *)v605;
            }
            else
            {
LABEL_575:
              if ((llvm::CallBase::hasFnAttrOnCalledFunction(v340, 45) & 1) != 0)
                goto LABEL_671;
              v339 = llvm::CallBase::hasFnAttrOnCalledFunction(v340, 44) ^ 1;
            }
          }
          else if (v341 == 27)
          {
            v339 = (*(_WORD *)(v340 + 18) & 0x301) != 0;
          }
          else
          {
            v339 = ((1 << (*(_BYTE *)(v340 + 16) - 33)) & 0x808001D0000010) != 0;
          }
        }
LABEL_596:
        v651 = *(void **)v610;
        v652 = v332;
        LODWORD(v653) = v496;
        v669 = 0;
        if (sub_1C627B3EC(*(_QWORD *)(v611 + 80), *(_DWORD *)(v611 + 96), (uint64_t)&v651, &v669)
          && v669 != (uint64_t **)(*(_QWORD *)(v611 + 80) + 32 * *(unsigned int *)(v611 + 96)))
        {
          v382 = v669[3];
          v383 = (uint64_t *)v590;
          goto LABEL_599;
        }
        v429 = *(uint64_t **)*v332;
        v651 = &v653;
        v652 = (void *)0x200000000;
        v658 = v429;
        v659 = &v667;
        v660 = &v668;
        v661 = 0;
        v662 = 0;
        v663 = 512;
        v664 = 7;
        v656 = 0;
        v657 = 0;
        v665 = 0;
        v666 = 0;
        v667 = &unk_1E8167888;
        v668 = &unk_1E8167A08;
        v430 = (unsigned __int8 *)sub_1C55A9428(v332[10], v610, (uint64_t)&v651);
        v431 = *(_QWORD *)(v611 + 264);
        v672 = 257;
        v432 = sub_1C4773E38((uint64_t *)&v651, 47, v430, v431, (uint64_t)&v669);
        v672 = 257;
        v434 = (uint64_t)sub_1C5346748((uint64_t)&v651, (uint64_t)v432, (uint64_t)&v669, 0, 0);
        if (v496 >= 2)
        {
          v435 = *(llvm::ConstantInt **)(*v658 + 1960);
          v436 = *(_DWORD *)(*v658 + 1968);
          LODWORD(v670) = v436 >> 8;
          if (v436 >> 8 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v669, v474, 0);
          }
          else
          {
            if (v436 <= 0xFF)
              v437 = 0;
            else
              v437 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v436);
            v669 = (uint64_t **)(v437 & v474);
          }
          v438 = llvm::ConstantInt::get(v435, (llvm::LLVMContext *)&v669, v433);
          if (v670 >= 0x41 && v669)
            MEMORY[0x1CAA32F9C](v669, 0x1000C8000313F17);
          v672 = 257;
          v434 = sub_1C538E6F8((uint64_t)&v651, v434, (uint64_t)v438, (uint64_t)&v669, 0);
        }
        v439 = *v658;
        v440 = *(llvm::ConstantInt **)(*v658 + 1960);
        if (v339)
        {
          v441 = *(unsigned int *)(v439 + 1968);
          LODWORD(v670) = v441 >> 8;
          v442 = 0x10 / v496;
          if (v441 >> 8 <= 0x40)
          {
            if (v441 <= 0xFF)
              v443 = 0;
            else
              v443 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v441);
            v669 = (uint64_t **)(v443 & v442);
            goto LABEL_657;
          }
        }
        else
        {
          v446 = *(_DWORD *)(v439 + 1968);
          LODWORD(v670) = v446 >> 8;
          v442 = 0x20 / v496;
          if (v446 >> 8 <= 0x40)
          {
            v383 = (uint64_t *)v590;
            if (v446 <= 0xFF)
              v447 = 0;
            else
              v447 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v446);
            v669 = (uint64_t **)(v447 & v442);
            goto LABEL_668;
          }
        }
        llvm::APInt::initSlowCase((llvm::APInt *)&v669, v442, 0);
LABEL_657:
        v383 = (uint64_t *)v590;
LABEL_668:
        v448 = llvm::ConstantInt::get(v440, (llvm::LLVMContext *)&v669, v433);
        if (v670 >= 0x41 && v669)
          MEMORY[0x1CAA32F9C](v669, 0x1000C8000313F17);
        v672 = 257;
        v382 = (uint64_t *)sub_1C47733F8((uint64_t)&v651, v434, (uint64_t)v448, (uint64_t)&v669, 0, 0);
        v669 = *(uint64_t ***)v610;
        v670 = (uint64_t)v332;
        LODWORD(v671) = v496;
        *(_QWORD *)(sub_1C627B5D8(v577, (uint64_t)&v669) + 24) = v382;
        if (v651 != &v653)
          free(v651);
LABEL_599:
        v384 = (uint64_t *)v595;
        v604 = (llvm::Value *)v382;
        if (v496 < 2)
        {
          v2 = v611;
          v389 = (uint64_t)v579;
        }
        else
        {
          v385 = *(llvm::ConstantInt **)(*v633 + 1960);
          v386 = *(_DWORD *)(*v633 + 1968);
          LODWORD(v652) = v386 >> 8;
          v2 = v611;
          if (v386 >> 8 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v651, v474, 0);
          }
          else
          {
            if (v386 <= 0xFF)
              v387 = 0;
            else
              v387 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v386);
            v651 = (void *)(v387 & v474);
          }
          v388 = llvm::ConstantInt::get(v385, (llvm::LLVMContext *)&v651, v381);
          if (v652 >= 0x41 && v651)
            MEMORY[0x1CAA32F9C](v651, 0x1000C8000313F17);
          LOWORD(v655[0]) = 257;
          v389 = sub_1C538E6F8((uint64_t)&Impl, (uint64_t)v579, (uint64_t)v388, (uint64_t)&v651, 0);
        }
        v390 = *(llvm::ConstantInt **)(*v633 + 1960);
        v391 = *(_DWORD *)(*v633 + 1968);
        LODWORD(v652) = v391 >> 8;
        if (v391 >> 8 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v651, v581, 0);
        }
        else
        {
          if (v391 <= 0xFF)
            v392 = 0;
          else
            v392 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v391);
          v651 = (void *)(v392 & v581);
        }
        v393 = llvm::ConstantInt::get(v390, (llvm::LLVMContext *)&v651, v381);
        if (v652 >= 0x41 && v651)
          MEMORY[0x1CAA32F9C](v651, 0x1000C8000313F17);
        LOWORD(v655[0]) = 257;
        v394 = sub_1C47733F8((uint64_t)&Impl, v389, (uint64_t)v393, (uint64_t)&v651, 0, 0);
        if (*(_DWORD *)(v2 + 232) == -1)
          goto LABEL_614;
        v401 = sub_1C55A9098(v2, (uint64_t **)a2);
        v402 = *(_QWORD *)(v401 + 24);
        v672 = 257;
        llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v631 + 56) + 40) + 272, v402);
        v404 = v403;
        v405 = (char *)operator new(0x60uLL);
        v406 = v405;
        *((_QWORD *)v405 + 1) = 0;
        *((_QWORD *)v405 + 2) = 0;
        *((_QWORD *)v405 + 3) = v405 + 32;
        LOWORD(v655[0]) = 257;
        *((_QWORD *)v405 + 4) = v402;
        *((_QWORD *)v405 + 5) = 0;
        *((_WORD *)v405 + 24) = 60;
        *((_DWORD *)v405 + 13) = 1;
        *(_OWORD *)(v405 + 56) = 0u;
        *(_OWORD *)(v405 + 72) = 0u;
        *((_DWORD *)v405 + 22) = 0;
        *(_QWORD *)v405 = v401;
        v409 = *(_QWORD *)(v401 + 8);
        v408 = (_QWORD *)(v401 + 8);
        v407 = v409;
        *((_QWORD *)v405 + 1) = v409;
        if (v409)
          *(_QWORD *)(v407 + 16) = v405 + 8;
        *((_QWORD *)v405 + 2) = v408;
        *v408 = v405;
        *((_WORD *)v405 + 25) = 2 * (v404 & 0x3F);
        v405[92] = 1;
        v410 = (llvm::Value *)(v405 + 32);
        llvm::Value::setName((uint64_t ***)v405 + 4, (uint64_t)&v651);
        (*((void (**)(void **, llvm::Value *, uint64_t ***, uint64_t, uint64_t))*v635 + 2))(v635, v410, &v669, v631, v632);
        if ((_DWORD)v628)
        {
          v450 = (char *)Impl;
          v451 = (char *)Impl + 16 * v628;
          v452 = (unsigned __int8 **)(v406 + 80);
          do
          {
            v453 = *(_DWORD *)v450;
            v411 = (unsigned __int8 *)*((_QWORD *)v450 + 1);
            if (v411)
            {
              if (!v453)
              {
                v649[0] = *((_QWORD *)v450 + 1);
                llvm::MetadataTracking::track((uint64_t)v649, v411, 2);
                v454 = *v452;
                goto LABEL_683;
              }
            }
            else
            {
              v454 = *v452;
              if (!*v452 && (v406[55] & 0x20) == 0)
                goto LABEL_680;
              if (!v453)
              {
                v649[0] = 0;
LABEL_683:
                if (v454)
                  llvm::MetadataTracking::untrack((uint64_t)(v406 + 80), v454);
                v455 = (unsigned __int8 *)v649[0];
                *v452 = (unsigned __int8 *)v649[0];
                if (v455)
                  llvm::MetadataTracking::retrack((uint64_t)v649, v455, (uint64_t)(v406 + 80));
                goto LABEL_680;
              }
            }
            llvm::Value::setMetadata(v410, *(_DWORD *)v450, (llvm::MDNode *)v411);
LABEL_680:
            v450 += 16;
          }
          while (v450 != v451);
        }
        v412 = *v633;
        v413 = (int)v610[4];
        v414 = *(llvm::ConstantInt **)(*v633 + 1984);
        v415 = *(_DWORD *)(*v633 + 1992);
        LODWORD(v652) = v415 >> 8;
        if (v415 >> 8 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v651, v413, 0);
        }
        else
        {
          if (v415 <= 0xFF)
            v416 = 0;
          else
            v416 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v415);
          v651 = (void *)(v416 & v413);
        }
        v417 = llvm::ConstantInt::get(v414, (llvm::LLVMContext *)&v651, (const llvm::APInt *)v411);
        if (v652 >= 0x41 && v651)
          MEMORY[0x1CAA32F9C](v651, 0x1000C8000313F17);
        LOWORD(v655[0]) = 257;
        v418 = sub_1C4867B70((uint64_t *)&Impl, (llvm::GetElementPtrInst *)(v412 + 1960), (uint64_t *)v410, (uint64_t)v417, (uint64_t)&v651);
        LOWORD(v655[0]) = 257;
        v420 = sub_1C4774B48((uint64_t)&Impl, 37, v598, v394, (uint64_t)&v651);
        v421 = *(llvm::ConstantInt **)(*v633 + 1960);
        LODWORD(v652) = *(_DWORD *)(*v633 + 1968) >> 8;
        if (v652 > 0x40)
          llvm::APInt::initSlowCase((llvm::APInt *)&v651, 0, 0);
        else
          v651 = 0;
        v423 = (uint64_t *)llvm::ConstantInt::get(v421, (llvm::LLVMContext *)&v651, v419);
        if (v652 >= 0x41 && v651)
          MEMORY[0x1CAA32F9C](v651, 0x1000C8000313F17);
        v424 = *(llvm::ConstantInt **)(*v633 + 1960);
        v425 = *(_DWORD *)(*v633 + 1968);
        LODWORD(v652) = v425 >> 8;
        if (v425 >> 8 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v651, 1, 0);
        }
        else
        {
          if (v425 <= 0xFF)
            LOBYTE(v426) = 0;
          else
            v426 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v425);
          v651 = (void *)(v426 & 1);
        }
        v427 = llvm::ConstantInt::get(v424, (llvm::LLVMContext *)&v651, v422);
        if (v652 >= 0x41 && v651)
          MEMORY[0x1CAA32F9C](v651, 0x1000C8000313F17);
        LOWORD(v655[0]) = 257;
        v428 = (uint64_t *)llvm::IRBuilderBase::CreateSelect((uint64_t *)&Impl, v420, v423, (uint64_t)v427, (uint64_t)&v651, 0);
        v576 &= 0xFFFFFFFFFFFF0000;
        sub_1C61D775C((uint64_t *)&Impl, 1, (uint64_t)v418, v428, 0, 2, 1);
        v2 = v611;
        v383 = (uint64_t *)v590;
        v384 = (uint64_t *)v595;
LABEL_614:
        v673[0] = *v384;
        v395 = llvm::Intrinsic::getDeclaration(a2, 1267, v673, 1);
        v396 = v395;
        if (v395)
          v397 = *(uint64_t ***)(v395 + 24);
        else
          v397 = 0;
        v651 = v384;
        v672 = 257;
        v652 = sub_1C4773E38((uint64_t *)&Impl, 49, v529, v584, (uint64_t)&v669);
        v653 = v598;
        v654 = v394;
        v655[0] = v604;
        v650 = 257;
        v287 = sub_1C4774778((uint64_t *)&Impl, v397, v396, (uint64_t *)&v651, 5, (uint64_t)v649, 0);
        v398 = *v383;
        if (*(_QWORD *)v287 == *v383)
          goto LABEL_472;
        LOWORD(v655[0]) = 257;
        v286 = (uint64_t)sub_1C4773E38((uint64_t *)&Impl, 49, (unsigned __int8 *)v287, v398, (uint64_t)&v651);
LABEL_471:
        v287 = v286;
LABEL_472:
        v288 = (uint64_t)v215[1];
        v289 = sub_1C55A7838(v288);
        v290 = *(_DWORD *)(v288 + 20);
        if ((v290 & 0x40000000) != 0)
          v291 = *(_QWORD *)(v288 - 8);
        else
          v291 = v288 - 32 * (v290 & 0x7FFFFFF);
        v292 = v291 + 32 * v289;
        if (*(_QWORD *)v292)
        {
          **(_QWORD **)(v292 + 16) = *(_QWORD *)(v292 + 8);
          v293 = *(_QWORD *)(v292 + 8);
          if (v293)
            *(_QWORD *)(v293 + 16) = *(_QWORD *)(v292 + 16);
        }
        *(_QWORD *)v292 = v287;
        if (v287)
        {
          v296 = *(_QWORD *)(v287 + 8);
          v295 = (uint64_t *)(v287 + 8);
          v294 = v296;
          v297 = v291 + 32 * v289;
          *(_QWORD *)(v297 + 8) = v296;
          if (v296)
            *(_QWORD *)(v294 + 16) = v297 + 8;
          *(_QWORD *)(v297 + 16) = v295;
          *v295 = v292;
        }
        v594 = 1;
LABEL_862:
        v215 += 2;
      }
      while (v215 != (llvm::Value **)v602);
      v215 = (llvm::Value **)v620.n128_u64[0];
LABEL_864:
      if (v215 != v621)
        free(v215);
      MEMORY[0x1CAA32FB4](v613[0], 8);
      v195 = v610 + 6;
      if (v610 + 6 == (_DWORD *)v587)
      {
        sub_1C55A9958((uint64_t)a2, *(llvm::MDNode ***)(v2 + 152), *(unsigned int *)(v2 + 160));
        if (Impl != v629)
          free(Impl);
        v48 = v594;
        goto LABEL_871;
      }
    }
  }
  v48 = 0;
  v2 = v611;
LABEL_871:
  MEMORY[0x1CAA32FB4](v615, 8);
LABEL_872:
  sub_1C4DD2B1C(v582);
  v547 = *(_DWORD *)(v2 + 88);
  if (v547)
  {
    v551 = *(_DWORD *)(v2 + 96);
    if (v551 > 4 * v547 && v551 >= 0x41)
    {
      v552 = 1 << (33 - __clz(v547 - 1));
      if (v552 <= 64)
        v553 = 64;
      else
        v553 = v552;
LABEL_886:
      if (v553 == v551)
      {
        v2 = v611;
        *(_QWORD *)(v611 + 88) = 0;
        v554 = *(_QWORD *)(v611 + 80);
        v555 = v554 + 32 * v551;
        do
        {
          *(_QWORD *)v554 = -4096;
          *(_QWORD *)(v554 + 8) = -4096;
          *(_DWORD *)(v554 + 16) = -1;
          v554 += 32;
        }
        while (v554 != v555);
      }
      else
      {
        MEMORY[0x1CAA32FB4](*(_QWORD *)v577, 8);
        if (v553)
        {
          v566 = (4 * v553 / 3u + 1) | ((unint64_t)(4 * v553 / 3u + 1) >> 1);
          v567 = v566 | (v566 >> 2) | ((v566 | (v566 >> 2)) >> 4);
          LODWORD(v567) = (((v567 | (v567 >> 8)) >> 16) | v567 | (v567 >> 8)) + 1;
          v2 = v611;
          *(_DWORD *)(v611 + 96) = v567;
          v568 = (char *)operator new(32 * v567, (std::align_val_t)8uLL);
          *(_QWORD *)(v611 + 80) = v568;
          *(_QWORD *)(v611 + 88) = 0;
          v569 = *(unsigned int *)(v611 + 96);
          if ((_DWORD)v569)
          {
            v570 = &v568[32 * v569];
            do
            {
              *(_QWORD *)v568 = -4096;
              *((_QWORD *)v568 + 1) = -4096;
              *((_DWORD *)v568 + 4) = -1;
              v568 += 32;
            }
            while (v568 != v570);
          }
        }
        else
        {
          *(_QWORD *)v577 = 0;
          *(_QWORD *)(v577 + 8) = 0;
          *(_DWORD *)(v577 + 16) = 0;
          v2 = v611;
        }
      }
      goto LABEL_874;
    }
  }
  else
  {
    if (!*(_DWORD *)(v2 + 92))
      goto LABEL_874;
    v551 = *(_DWORD *)(v2 + 96);
    if (v551 > 0x40)
    {
      v553 = 0;
      goto LABEL_886;
    }
  }
  if (v551)
  {
    v562 = *(_QWORD *)v577;
    v563 = *(_QWORD *)v577 + 32 * v551;
    do
    {
      *(_QWORD *)v562 = -4096;
      *(_QWORD *)(v562 + 8) = -4096;
      *(_DWORD *)(v562 + 16) = -1;
      v562 += 32;
    }
    while (v562 != v563);
  }
  v2 = v611;
  *(_QWORD *)(v611 + 88) = 0;
LABEL_874:
  v548 = (_QWORD *)(v2 + 32);
  sub_1C4DD2B1C(v578);
  v549 = *(_DWORD *)(v2 + 40);
  if (!v549)
  {
    if (!*(_DWORD *)(v2 + 44))
      goto LABEL_876;
    v556 = v48;
    v557 = *(_DWORD *)(v2 + 48);
    if (v557 > 0x40)
    {
      v559 = 0;
      goto LABEL_897;
    }
LABEL_905:
    if (v557)
    {
      v564 = (_QWORD *)*v548;
      v565 = 16 * v557;
      do
      {
        *v564 = -4096;
        v564 += 2;
        v565 -= 16;
      }
      while (v565);
    }
    v2 = v611;
    *(_QWORD *)(v611 + 40) = 0;
    goto LABEL_909;
  }
  v556 = v48;
  v557 = *(_DWORD *)(v2 + 48);
  if (v557 <= 4 * v549 || v557 < 0x41)
    goto LABEL_905;
  v558 = 1 << (33 - __clz(v549 - 1));
  if (v558 <= 64)
    v559 = 64;
  else
    v559 = v558;
LABEL_897:
  if (v559 == v557)
  {
    v2 = v611;
    *(_QWORD *)(v611 + 40) = 0;
    v560 = 16 * v557;
    v561 = *(_QWORD **)(v611 + 32);
    v48 = v556;
    do
    {
      *v561 = -4096;
      v561 += 2;
      v560 -= 16;
    }
    while (v560);
    goto LABEL_876;
  }
  MEMORY[0x1CAA32FB4](*v548, 8);
  if (!v559)
  {
    *v548 = 0;
    *(_QWORD *)(v2 + 40) = 0;
    *(_DWORD *)(v2 + 48) = 0;
    v2 = v611;
LABEL_909:
    v48 = v556;
    goto LABEL_876;
  }
  v571 = (4 * v559 / 3u + 1) | ((unint64_t)(4 * v559 / 3u + 1) >> 1);
  v572 = v571 | (v571 >> 2) | ((v571 | (v571 >> 2)) >> 4);
  LODWORD(v572) = (((v572 | (v572 >> 8)) >> 16) | v572 | (v572 >> 8)) + 1;
  v2 = v611;
  *(_DWORD *)(v611 + 48) = v572;
  v573 = operator new(16 * v572, (std::align_val_t)8uLL);
  *(_QWORD *)(v611 + 32) = v573;
  *(_QWORD *)(v611 + 40) = 0;
  v574 = *(unsigned int *)(v611 + 48);
  v48 = v556;
  if ((_DWORD)v574)
  {
    v575 = 16 * v574;
    do
    {
      *v573 = -4096;
      v573 += 2;
      v575 -= 16;
    }
    while (v575);
  }
LABEL_876:
  *(_DWORD *)(v2 + 160) = 0;
  if (v646 != v648)
    free(v646);
  return v48 & 1;
}

uint64_t sub_1C55A76DC(uint64_t a1, uint64_t a2)
{
  uint64_t NamedMetadata;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t result;
  uint64_t v11;
  uint64_t v12;
  uint64_t i;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned __int8 *v17;
  uint64_t v18;
  _QWORD v19[4];
  __int16 v20;

  v19[0] = "agx.driver_bindings";
  v20 = 259;
  NamedMetadata = llvm::Module::getNamedMetadata(a1, (uint64_t)v19);
  if (NamedMetadata)
  {
    v5 = NamedMetadata;
    v6 = *(unsigned int *)(*(_QWORD *)(NamedMetadata + 48) + 8);
    if ((_DWORD)v6)
    {
      v7 = 0;
      v8 = 8 * v6;
      while (1)
      {
        v19[0] = *(_QWORD *)(**(_QWORD **)(v5 + 48) + v7);
        v9 = *(_QWORD *)(a2 + 24);
        if (!v9)
          break;
        (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v9 + 48))(v9, v19);
        v7 += 8;
        if (v8 == v7)
          return 1;
      }
LABEL_19:
      sub_1C485C2F0();
      return sub_1C55A7838();
    }
    return 1;
  }
  v19[0] = "agx.compute_driver_bindings";
  v20 = 259;
  result = llvm::Module::getNamedMetadata(a1, (uint64_t)v19);
  if (!result)
    return result;
  v11 = result;
  v12 = *(unsigned int *)(*(_QWORD *)(result + 48) + 8);
  if (!(_DWORD)v12)
    return 1;
  for (i = 0; i != v12; ++i)
  {
    v14 = *(_QWORD *)(**(_QWORD **)(v11 + 48) + 8 * i);
    v15 = *(unsigned int *)(v14 + 8);
    v16 = v14;
    if ((_DWORD)v15)
    {
      do
      {
        v17 = *(unsigned __int8 **)(v16 - 8 * *(unsigned int *)(v14 + 8));
        if (v17 && *v17 - 4 <= 0x1E)
        {
          v19[0] = *(_QWORD *)(v16 - 8 * *(unsigned int *)(v14 + 8));
          v18 = *(_QWORD *)(a2 + 24);
          if (!v18)
            goto LABEL_19;
          (*(void (**)(uint64_t, _QWORD *))(*(_QWORD *)v18 + 48))(v18, v19);
        }
        v16 += 8;
        --v15;
      }
      while (v15);
    }
    result = 1;
  }
  return result;
}

uint64_t sub_1C55A7838(uint64_t a1)
{
  int v1;
  unsigned int v2;
  uint64_t v3;
  int v5;
  BOOL v6;
  int v7;
  BOOL v8;
  _BOOL4 v9;
  int v10;
  BOOL v11;

  v1 = *(unsigned __int8 *)(a1 + 16);
  if (a1 && v1 == 60)
  {
    v2 = 0;
    v3 = 0;
    return v3 | v2;
  }
  if (a1 && v1 == 61)
  {
    v3 = 0x100000000;
    v2 = 1;
    return v3 | v2;
  }
  if (a1 && (v1 - 66) > 0xFFFFFFFD)
  {
    v2 = 0;
    v3 = 0x200000000;
    return v3 | v2;
  }
  if (v1 != 84)
    goto LABEL_15;
  v3 = *(_QWORD *)(a1 - 32);
  if (!v3)
  {
LABEL_16:
    v2 = -1;
    return v3 | v2;
  }
  if (*(_BYTE *)(v3 + 16) || *(_QWORD *)(v3 + 24) != *(_QWORD *)(a1 + 72) || (*(_BYTE *)(v3 + 33) & 0x20) == 0)
  {
LABEL_15:
    v3 = 0;
    goto LABEL_16;
  }
  v2 = 0;
  v5 = *(_DWORD *)(v3 + 36);
  if (v5 != 2142 && v5 != 2144)
  {
    if (sub_1C55A9F2C(*(_DWORD *)(v3 + 36)))
    {
      v2 = 2;
    }
    else if ((v5 - 2784) >= 3)
    {
      v6 = sub_1C55A9F50(v5);
      if ((v5 - 2841) >= 0xFFFFFFFD)
        v7 = 0;
      else
        v7 = -1;
      if (v6)
        v2 = 3;
      else
        v2 = v7;
    }
    else
    {
      v2 = 0;
    }
  }
  v8 = sub_1C55A9F2C(v5);
  v3 = 0;
  if ((v5 - 2784) >= 3 && !v8)
  {
    v9 = sub_1C55A9F50(v5);
    v10 = (v5 - 2838) < 3 || v9;
    v11 = v10 == 0;
    v3 = 0x100000000;
    if (v11)
      v3 = 0;
  }
  return v3 | v2;
}

uint64_t sub_1C55A7980(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  const llvm::APInt *v10;
  llvm::Value *v11;
  BOOL v12;
  llvm::ConstantInt *v13;
  uint64_t v14;
  char *v15;
  const llvm::APInt *v16;
  uint64_t v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  char *v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  llvm::DataLayout *v24;
  char v25;
  uint64_t v26;
  uint64_t v27;
  _DWORD **v28;
  unsigned int v29;
  uint64_t v30;
  unsigned int *v31;
  uint64_t v32;
  uint64_t v33;
  const llvm::APInt *v34;
  llvm::ConstantInt *v35;
  unsigned int v36;
  unint64_t v37;
  uint64_t v38;
  unsigned __int8 *v39;
  uint64_t v40;
  unsigned __int8 *v41;
  unint64_t v42;
  llvm::UndefValue *v43;
  BOOL v44;
  unsigned int *v45;
  unsigned int *v46;
  unsigned int *v47;
  uint64_t v48;
  uint64_t v49;
  int v50;
  BOOL v51;
  const char *v52;
  const llvm::APInt *v53;
  char v54;
  char v55;
  uint64_t v56;
  llvm::ConstantInt *v57;
  unsigned int v58;
  unint64_t v59;
  llvm::ValueHandleBase *v60;
  llvm::APInt *v61;
  unsigned int v62;
  uint64_t **v63;
  uint64_t v64;
  unsigned int v65;
  unint64_t v66;
  llvm::UndefValue *AggregateElement;
  unsigned int *v68;
  unsigned int *v69;
  unsigned int *v70;
  uint64_t v71;
  uint64_t v72;
  int v73;
  BOOL v74;
  const char *v75;
  char v76;
  char v77;
  unint64_t v78;
  unint64_t v79;
  uint64_t v80;
  char *v81;
  uint64_t v82;
  uint64_t v83;
  BOOL *v84;
  uint64_t v85;
  unsigned int v86;
  unint64_t v87;
  llvm::UndefValue *v88;
  unsigned int *v89;
  unsigned int *v90;
  unsigned int *v91;
  uint64_t v92;
  uint64_t v93;
  int v94;
  BOOL v95;
  const char *v96;
  char v97;
  char v98;
  unint64_t v99;
  unint64_t v100;
  char *v101;
  unint64_t v102;
  unint64_t v103;
  unint64_t v104;
  uint64_t v105;
  char *v106;
  uint64_t v107;
  uint64_t v108;
  const void **v109;
  const void *v110;
  unint64_t v111;
  unint64_t v112;
  unint64_t v113;
  unint64_t v114;
  unint64_t v115;
  const void *v116;
  char *v117;
  llvm::ValueHandleBase *v118;
  llvm::ValueHandleBase *v119;
  uint64_t **v120;
  llvm::Value *v121;
  char *v123;
  char *v124;
  llvm::ValueHandleBase **v125;
  uint64_t v126;
  _QWORD *v127;
  uint64_t v128;
  uint64_t v129;
  llvm::ValueHandleBase ***v130;
  uint64_t v131;
  char *v132;
  char *v133;
  unsigned __int8 **v134;
  int v135;
  unsigned __int8 *v136;
  unsigned __int8 *v137;
  unsigned __int8 *v138;
  uint64_t v139;
  uint64_t Declaration;
  unint64_t v141;
  unsigned int v142;
  uint64_t v143;
  unsigned int v144;
  unint64_t v145;
  unsigned int v146;
  uint64_t v147;
  unsigned int v148;
  BOOL v149[8];
  unsigned int v150;
  const void *v151;
  unsigned int v152;
  const void *v153;
  unsigned int v154;
  unsigned __int8 *v155;
  uint64_t v156;
  BOOL v157;
  char *v158;
  unsigned int v159;
  BOOL v160;
  char *v161;
  uint64_t v162;
  __int16 v163;
  void *v164;
  unsigned int v165;
  _QWORD v166[6];
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  char *v170;
  unsigned int v171;
  __int16 v172;
  uint64_t v173;

  v173 = *MEMORY[0x1E0C80C00];
  sub_1C4773D54((uint64_t)&v164, a1, 0, 0, 0);
  v11 = *(llvm::Value **)a2;
  if (*(_QWORD *)a2)
    v12 = *(_QWORD *)(a2 + 8) == 0;
  else
    v12 = 0;
  if (!v12)
  {
    v13 = *(llvm::ConstantInt **)(*(_QWORD *)v167 + 1960);
    v171 = *(_DWORD *)(*(_QWORD *)v167 + 1968) >> 8;
    if (v171 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&v170, 0, 0);
    else
      v170 = 0;
    v14 = (uint64_t)llvm::ConstantInt::get(v13, (llvm::LLVMContext *)&v170, v10);
    if (v171 >= 0x41)
    {
      v15 = v170;
      if (v170)
        goto LABEL_222;
    }
    goto LABEL_223;
  }
  if ((_DWORD)a5)
  {
    v170 = (char *)(*(_QWORD *)v167 + 1960);
    Declaration = llvm::Intrinsic::getDeclaration(a3, 2681, (uint64_t *)&v170, 1);
  }
  else
  {
    Declaration = 0;
  }
  v159 = 32;
  v158 = 0;
  v157 = 0;
  v14 = 0;
  if (sub_1C55A9E80((llvm::Value **)a2))
    v14 = sub_1C55A7980(a1, a2, a3, a4, a5);
  v17 = 24;
  if (*((_BYTE *)v11 + 16) == 62)
    v17 = 64;
  v18 = *(_QWORD *)((char *)v11 + v17);
  v19 = *((_DWORD *)v11 + 5);
  if ((v19 & 0x40000000) != 0)
  {
    v21 = (char *)*((_QWORD *)v11 - 1);
    v20 = v19 & 0x7FFFFFF;
  }
  else
  {
    v20 = v19 & 0x7FFFFFF;
    v21 = (char *)v11 - 32 * v20;
  }
  v22 = (unsigned __int8 *)(v21 + 32);
  v155 = (unsigned __int8 *)(v21 + 32);
  v156 = v18 | 4;
  if (v20 == 1)
  {
LABEL_211:
    v118 = llvm::ConstantInt::get(**(llvm::ConstantInt ***)v11, (llvm::LLVMContext *)&v158, v16);
    v119 = v118;
    if (!v14)
    {
      v14 = (uint64_t)v118;
      goto LABEL_220;
    }
    if ((_DWORD)a5)
    {
      if (Declaration)
        v120 = *(uint64_t ***)(Declaration + 24);
      else
        v120 = 0;
      v161 = (char *)v14;
      v162 = (uint64_t)v118;
      v172 = 257;
      v14 = sub_1C4774778((uint64_t *)&v164, v120, Declaration, (uint64_t *)&v161, 2, (uint64_t)&v170, 0);
      goto LABEL_220;
    }
    v163 = 257;
    v121 = (llvm::Value *)(*(uint64_t (**)(uint64_t, uint64_t, llvm::ValueHandleBase *, _QWORD, _QWORD))(*(_QWORD *)v168 + 16))(v168, v14, v118, 0, 0);
    if (v121)
      goto LABEL_217;
    v172 = 257;
    v123 = (char *)operator new(0x80uLL);
    v124 = v123;
    *(_QWORD *)v123 = 0;
    *((_QWORD *)v123 + 2) = 0;
    *((_QWORD *)v123 + 1) = 0;
    *((_QWORD *)v123 + 5) = 0;
    *((_QWORD *)v123 + 6) = 0;
    *((_QWORD *)v123 + 4) = 0;
    v125 = (llvm::ValueHandleBase **)(v123 + 32);
    *((_QWORD *)v123 + 8) = *(_QWORD *)v14;
    v121 = (llvm::Value *)(v123 + 64);
    *((_QWORD *)v123 + 3) = v123 + 64;
    *((_QWORD *)v123 + 7) = v123 + 64;
    *((_QWORD *)v123 + 9) = 0;
    v123[80] = 41;
    v123[81] = 0;
    *((_WORD *)v123 + 41) = 0;
    *((_DWORD *)v123 + 21) = 2;
    *((_DWORD *)v123 + 30) = 0;
    *(_OWORD *)(v123 + 104) = 0u;
    *(_OWORD *)(v123 + 88) = 0u;
    *(_QWORD *)v123 = v14;
    v128 = *(_QWORD *)(v14 + 8);
    v127 = (_QWORD *)(v14 + 8);
    v126 = v128;
    *((_QWORD *)v123 + 1) = v128;
    if (v128)
      *(_QWORD *)(v126 + 16) = v123 + 8;
    *((_QWORD *)v123 + 2) = v127;
    *v127 = v123;
    if (*((_QWORD *)v123 + 4))
    {
      **((_QWORD **)v123 + 6) = *((_QWORD *)v123 + 5);
      v139 = *((_QWORD *)v123 + 5);
      if (v139)
        *(_QWORD *)(v139 + 16) = *((_QWORD *)v123 + 6);
    }
    *v125 = v119;
    if (v119)
    {
      v131 = *((_QWORD *)v119 + 1);
      v130 = (llvm::ValueHandleBase ***)((char *)v119 + 8);
      v129 = v131;
      *((_QWORD *)v123 + 5) = v131;
      if (v131)
        *(_QWORD *)(v129 + 16) = v123 + 40;
      *((_QWORD *)v123 + 6) = v130;
      *v130 = v125;
    }
    llvm::Value::setName((uint64_t ***)v123 + 8, (uint64_t)&v170);
    (*(void (**)(uint64_t, llvm::Value *, char **, _QWORD, _QWORD))(*(_QWORD *)v169 + 16))(v169, v121, &v161, v166[4], v166[5]);
    if (!v165)
    {
LABEL_217:
      v14 = (uint64_t)v121;
      goto LABEL_220;
    }
    v132 = (char *)v164;
    v133 = (char *)v164 + 16 * v165;
    v134 = (unsigned __int8 **)(v124 + 112);
    while (1)
    {
      v135 = *(_DWORD *)v132;
      v136 = (unsigned __int8 *)*((_QWORD *)v132 + 1);
      if (v136)
      {
        if (!v135)
        {
          v155 = (unsigned __int8 *)*((_QWORD *)v132 + 1);
          llvm::MetadataTracking::track((uint64_t)&v155, v136, 2);
          v137 = *v134;
          goto LABEL_245;
        }
      }
      else
      {
        v137 = *v134;
        if (!*v134 && (v124[87] & 0x20) == 0)
          goto LABEL_242;
        if (!v135)
        {
          v155 = 0;
LABEL_245:
          if (v137)
            llvm::MetadataTracking::untrack((uint64_t)(v124 + 112), v137);
          v138 = v155;
          *v134 = v155;
          if (v138)
            llvm::MetadataTracking::retrack((uint64_t)&v155, v138, (uint64_t)(v124 + 112));
          goto LABEL_242;
        }
      }
      llvm::Value::setMetadata(v121, *(_DWORD *)v132, (llvm::MDNode *)v136);
LABEL_242:
      v132 += 16;
      if (v132 == v133)
        goto LABEL_217;
    }
  }
  v23 = (unsigned __int8 *)&v21[32 * v20];
  v24 = (llvm::DataLayout *)(a3 + 34);
  v25 = 1;
  do
  {
    v26 = *(_QWORD *)v22;
    if (*(_BYTE *)(v26 + 16) == 16)
      v27 = v26;
    else
      v27 = 0;
    if (v27)
    {
      v28 = (_DWORD **)(v27 + 24);
      v29 = *(_DWORD *)(v27 + 32);
      if (v29 > 0x40)
      {
        if (llvm::APInt::countLeadingZerosSlowCase((llvm::APInt *)(v27 + 24)) == v29)
          goto LABEL_186;
      }
      else if (!*v28)
      {
        goto LABEL_186;
      }
      if ((v25 & 1) != 0)
      {
        if ((v156 & 4) == 0 && (v156 & 0xFFFFFFFFFFFFFFF8) != 0)
        {
          if (v29 > 0x40)
            LODWORD(v30) = **v28;
          else
            v30 = (uint64_t)((_QWORD)*v28 << -(char)v29) >> -(char)v29;
          v101 = (char *)llvm::DataLayout::getStructLayout(v24, (llvm::StructType *)(v156 & 0xFFFFFFFFFFFFFFF8)) + 16;
          if ((_DWORD)a5)
          {
            v102 = *(_QWORD *)&v101[8 * v30];
            v154 = v159;
            v103 = v102 / a4;
            if (v159 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v153, v103, 0);
            }
            else
            {
              if (v159)
                v104 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v159;
              else
                v104 = 0;
              v153 = (const void *)(v104 & v103);
            }
            v149[0] = 0;
            llvm::APInt::sadd_ov((const void **)&v158, (const llvm::APInt *)&v153, v149, (uint64_t)&v170);
            if (v149[0])
            {
              v105 = (v159 - 1) >> 6;
              v106 = &v158[8 * v105];
              if (v159 < 0x41)
                v106 = (char *)&v158;
              v107 = 1 << (v159 - 1);
              v108 = *(_QWORD *)v106;
              LODWORD(v162) = v159;
              if ((v107 & v108) != 0)
              {
                if (v159 > 0x40)
                {
                  v109 = (const void **)&v161;
                  llvm::APInt::initSlowCase((llvm::APInt *)&v161, 0, 0);
                  if (v162 >= 0x41)
                    v109 = (const void **)&v161[8 * v105];
                }
                else
                {
                  v161 = 0;
                  v109 = (const void **)&v161;
                }
                v110 = (const void *)((unint64_t)*v109 | v107);
              }
              else
              {
                if (v159 > 0x40)
                {
                  v109 = (const void **)&v161;
                  llvm::APInt::initSlowCase((llvm::APInt *)&v161, -1, 1);
                  if (v162 >= 0x41)
                    v109 = (const void **)&v161[8 * v105];
                }
                else
                {
                  if (v159)
                    v117 = (char *)(0xFFFFFFFFFFFFFFFFLL >> -(char)v159);
                  else
                    v117 = 0;
                  v161 = v117;
                  v109 = (const void **)&v161;
                }
                v110 = (const void *)((unint64_t)*v109 & ~v107);
              }
              *v109 = v110;
              if (v171 >= 0x41 && v170)
                MEMORY[0x1CAA32F9C](v170, 0x1000C8000313F17);
            }
            else
            {
              LODWORD(v162) = v171;
              v161 = v170;
            }
          }
          else
          {
            v111 = *(_QWORD *)&v101[8 * v30];
            v152 = v159;
            v112 = v111 / a4;
            if (v159 > 0x40)
            {
              llvm::APInt::initSlowCase((llvm::APInt *)&v151, v112, 0);
            }
            else
            {
              if (v159)
                v113 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v159;
              else
                v113 = 0;
              v151 = (const void *)(v113 & v112);
            }
            llvm::APInt::sadd_ov((const void **)&v158, (const llvm::APInt *)&v151, &v157, (uint64_t)&v161);
          }
          if (v159 >= 0x41 && v158)
            MEMORY[0x1CAA32F9C](v158, 0x1000C8000313F17);
          v158 = v161;
          v159 = v162;
          LODWORD(v162) = 0;
          if ((a5 & 1) != 0)
          {
            if (v154 < 0x41)
              goto LABEL_185;
            v116 = v153;
            if (!v153)
              goto LABEL_185;
          }
          else
          {
            if (v152 < 0x41)
              goto LABEL_185;
            v116 = v151;
            if (!v151)
              goto LABEL_185;
          }
LABEL_184:
          MEMORY[0x1CAA32F9C](v116, 0x1000C8000313F17);
LABEL_185:
          v25 = 1;
          goto LABEL_186;
        }
        if (v29 < v159)
        {
          llvm::APInt::sext((llvm::APInt *)(v27 + 24), v159, (llvm::APInt *)&v161);
        }
        else if (v29 > v159)
        {
          llvm::APInt::trunc((llvm::APInt *)(v27 + 24), v159, (llvm::APInt *)&v161);
        }
        else
        {
          sub_1C5DD14E0((uint64_t)&v161, v27 + 24);
        }
        if ((_DWORD)a5)
        {
          v65 = v159;
          v66 = v156 & 0xFFFFFFFFFFFFFFF8;
          if ((v156 & 4) == 0 || !v66)
          {
            AggregateElement = *(llvm::UndefValue **)v155;
            if (!*(_QWORD *)v155 || *((_BYTE *)AggregateElement + 16) != 16)
              AggregateElement = llvm::Constant::getAggregateElement(AggregateElement, 0);
            v70 = (unsigned int *)*((_QWORD *)AggregateElement + 3);
            v68 = (unsigned int *)((char *)AggregateElement + 24);
            v69 = v70;
            if (v68[2] < 0x41)
              v69 = v68;
            v66 = *(_QWORD *)(*(_QWORD *)(v66 + 16) + 8 * *v69);
          }
          sub_1C4768AD0((uint64_t)v24, v66);
          v72 = v71;
          v74 = v73 == 1;
          llvm::DataLayout::getAlignment((uint64_t)v24, v66);
          v77 = v76;
          if (v74)
          v146 = v65;
          v78 = (((1 << v77) + ((unint64_t)(v72 + 7) >> 3) - 1) & -(1 << v77)) / a4;
          if (v65 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v145, v78, 0);
          }
          else
          {
            v79 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v65;
            if (!v65)
              v79 = 0;
            v145 = v79 & v78;
          }
          llvm::APInt::operator*((uint64_t)&v161, &v145, (uint64_t)&v147);
          v160 = 0;
          llvm::APInt::sadd_ov((const void **)&v158, (const llvm::APInt *)&v147, &v160, (uint64_t)&v170);
          if (v160)
          {
            v80 = (v159 - 1) >> 6;
            v81 = &v158[8 * v80];
            if (v159 < 0x41)
              v81 = (char *)&v158;
            v82 = 1 << (v159 - 1);
            v83 = *(_QWORD *)v81;
            v150 = v159;
            if ((v82 & v83) != 0)
            {
              if (v159 > 0x40)
              {
                v84 = v149;
                llvm::APInt::initSlowCase((llvm::APInt *)v149, 0, 0);
                if (v150 >= 0x41)
                  v84 = (BOOL *)(*(_QWORD *)v149 + 8 * v80);
              }
              else
              {
                *(_QWORD *)v149 = 0;
                v84 = v149;
              }
              v85 = *(_QWORD *)v84 | v82;
            }
            else
            {
              if (v159 > 0x40)
              {
                v84 = v149;
                llvm::APInt::initSlowCase((llvm::APInt *)v149, -1, 1);
                if (v150 >= 0x41)
                  v84 = (BOOL *)(*(_QWORD *)v149 + 8 * v80);
              }
              else
              {
                if (v159)
                  v114 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v159;
                else
                  v114 = 0;
                *(_QWORD *)v149 = v114;
                v84 = v149;
              }
              v85 = *(_QWORD *)v84 & ~v82;
            }
            *(_QWORD *)v84 = v85;
            if (v171 >= 0x41 && v170)
              MEMORY[0x1CAA32F9C](v170, 0x1000C8000313F17);
          }
          else
          {
            v150 = v171;
            *(_QWORD *)v149 = v170;
          }
        }
        else
        {
          v86 = v159;
          v87 = v156 & 0xFFFFFFFFFFFFFFF8;
          if ((v156 & 4) == 0 || !v87)
          {
            v88 = *(llvm::UndefValue **)v155;
            if (!*(_QWORD *)v155 || *((_BYTE *)v88 + 16) != 16)
              v88 = llvm::Constant::getAggregateElement(v88, 0);
            v91 = (unsigned int *)*((_QWORD *)v88 + 3);
            v89 = (unsigned int *)((char *)v88 + 24);
            v90 = v91;
            if (v89[2] < 0x41)
              v90 = v89;
            v87 = *(_QWORD *)(*(_QWORD *)(v87 + 16) + 8 * *v90);
          }
          sub_1C4768AD0((uint64_t)v24, v87);
          v93 = v92;
          v95 = v94 == 1;
          llvm::DataLayout::getAlignment((uint64_t)v24, v87);
          v98 = v97;
          if (v95)
          v142 = v86;
          v99 = (((1 << v98) + ((unint64_t)(v93 + 7) >> 3) - 1) & -(1 << v98)) / a4;
          if (v86 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v141, v99, 0);
          }
          else
          {
            v100 = 0xFFFFFFFFFFFFFFFFLL >> -(char)v86;
            if (!v86)
              v100 = 0;
            v141 = v100 & v99;
          }
          llvm::APInt::operator*((uint64_t)&v161, &v141, (uint64_t)&v143);
          llvm::APInt::sadd_ov((const void **)&v158, (const llvm::APInt *)&v143, &v157, (uint64_t)v149);
        }
        if (v159 >= 0x41 && v158)
          MEMORY[0x1CAA32F9C](v158, 0x1000C8000313F17);
        v158 = *(char **)v149;
        v159 = v150;
        v150 = 0;
        if ((a5 & 1) != 0)
        {
          if (v148 >= 0x41 && v147)
            MEMORY[0x1CAA32F9C](v147, 0x1000C8000313F17);
          if (v146 < 0x41)
            goto LABEL_164;
          v115 = v145;
          if (!v145)
            goto LABEL_164;
        }
        else
        {
          if (v144 >= 0x41 && v143)
            MEMORY[0x1CAA32F9C](v143, 0x1000C8000313F17);
          if (v142 < 0x41 || (v115 = v141) == 0)
          {
LABEL_164:
            if (v162 < 0x41)
              goto LABEL_185;
            v116 = v161;
            if (!v161)
              goto LABEL_185;
            goto LABEL_184;
          }
        }
        MEMORY[0x1CAA32F9C](v115, 0x1000C8000313F17);
        goto LABEL_164;
      }
    }
    else if ((v25 & 1) != 0)
    {
      v14 = (uint64_t)llvm::ConstantInt::get(**(llvm::ConstantInt ***)v11, (llvm::LLVMContext *)&v158, v16);
    }
    if ((v156 & 4) != 0 || (v156 & 0xFFFFFFFFFFFFFFF8) == 0)
    {
      v39 = *(unsigned __int8 **)v155;
      v40 = *(_QWORD *)v167 + 1960;
      v172 = 257;
      v41 = sub_1C4D8D514((uint64_t *)&v164, v39, v40, 1, (uint64_t)&v170);
      v42 = v156 & 0xFFFFFFFFFFFFFFF8;
      if ((v156 & 4) == 0 || !v42)
      {
        v43 = *(llvm::UndefValue **)v155;
        if (*(_QWORD *)v155)
          v44 = *(_BYTE *)(*(_QWORD *)v155 + 16) == 16;
        else
          v44 = 0;
        if (!v44)
          v43 = llvm::Constant::getAggregateElement(v43, 0);
        v47 = (unsigned int *)*((_QWORD *)v43 + 3);
        v45 = (unsigned int *)((char *)v43 + 24);
        v46 = v47;
        if (v45[2] < 0x41)
          v46 = v45;
        v42 = *(_QWORD *)(*(_QWORD *)(v42 + 16) + 8 * *v46);
      }
      sub_1C4768AD0((uint64_t)v24, v42);
      v49 = v48;
      v51 = v50 == 1;
      llvm::DataLayout::getAlignment((uint64_t)v24, v42);
      v55 = v54;
      if (v51)
      v56 = ((((1 << v55) + ((unint64_t)(v49 + 7) >> 3) - 1) & -(1 << v55)) / a4);
      v57 = *(llvm::ConstantInt **)(*(_QWORD *)v167 + 1960);
      v58 = *(_DWORD *)(*(_QWORD *)v167 + 1968);
      LODWORD(v162) = v58 >> 8;
      if (v58 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v161, v56, 0);
      }
      else
      {
        if (v58 <= 0xFF)
          v59 = 0;
        else
          v59 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v58);
        v161 = (char *)(v59 & v56);
      }
      v60 = llvm::ConstantInt::get(v57, (llvm::LLVMContext *)&v161, v53);
      if (v162 >= 0x41 && v161)
        MEMORY[0x1CAA32F9C](v161, 0x1000C8000313F17);
      v163 = 257;
      v38 = sub_1C4EC4040((uint64_t)&v164, (uint64_t)v41, (uint64_t)v60, (uint64_t)&v161, 0, 1);
    }
    else
    {
      v31 = (unsigned int *)(v27 + 24);
      if (*(_DWORD *)(v27 + 32) >= 0x41u)
        v31 = *(unsigned int **)v31;
      v32 = *v31;
      v33 = (*((_QWORD *)llvm::DataLayout::getStructLayout(v24, (llvm::StructType *)(v156 & 0xFFFFFFFFFFFFFFF8))+ v32+ 2)/ (unint64_t)a4);
      v35 = *(llvm::ConstantInt **)(*(_QWORD *)v167 + 1960);
      v36 = *(_DWORD *)(*(_QWORD *)v167 + 1968);
      v171 = v36 >> 8;
      if (v36 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v170, v33, 0);
      }
      else
      {
        if (v36 <= 0xFF)
          v37 = 0;
        else
          v37 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v36);
        v170 = (char *)(v37 & v33);
      }
      v38 = (uint64_t)llvm::ConstantInt::get(v35, (llvm::LLVMContext *)&v170, v34);
      if (v171 >= 0x41 && v170)
        MEMORY[0x1CAA32F9C](v170, 0x1000C8000313F17);
    }
    if (*(_BYTE *)(v14 + 16) == 16)
    {
      v61 = (llvm::APInt *)(v14 + 24);
      v62 = *(_DWORD *)(v14 + 32);
      if (v62 > 0x40)
      {
        if (llvm::APInt::countLeadingZerosSlowCase(v61) == v62)
        {
LABEL_76:
          v25 = 0;
          v14 = v38;
          goto LABEL_186;
        }
      }
      else if (!*(_QWORD *)v61)
      {
        goto LABEL_76;
      }
    }
    if ((_DWORD)a5)
    {
      if (Declaration)
        v63 = *(uint64_t ***)(Declaration + 24);
      else
        v63 = 0;
      v161 = (char *)v14;
      v162 = v38;
      v172 = 257;
      v64 = sub_1C4774778((uint64_t *)&v164, v63, Declaration, (uint64_t *)&v161, 2, (uint64_t)&v170, 0);
    }
    else
    {
      v172 = 257;
      v64 = sub_1C538E314((uint64_t)&v164, (_QWORD *)v14, v38, (uint64_t)&v170);
    }
    v14 = v64;
    v25 = 0;
LABEL_186:
    sub_1C4774E38((uint64_t)&v155);
    v22 = v155;
  }
  while (v155 != v23);
  if ((v25 & 1) != 0)
    goto LABEL_211;
LABEL_220:
  if (v159 >= 0x41)
  {
    v15 = v158;
    if (v158)
LABEL_222:
      MEMORY[0x1CAA32F9C](v15, 0x1000C8000313F17);
  }
LABEL_223:
  if (v164 != v166)
    free(v164);
  return v14;
}

uint64_t sub_1C55A8878(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  unint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unsigned int v9;
  uint64_t v10;
  unint64_t *v11;
  char v12;
  char v13;
  BOOL v14;
  int v15;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;

  v1 = a1;
  if (sub_1C55A7838(a1) == -1)
  {
    v2 = 0;
    LOBYTE(v3) = 0;
    v4 = 0;
    return v2 | v4 | v3;
  }
  v5 = *(unsigned __int8 *)(v1 + 16);
  if (v5 != 84)
  {
    v17 = v5 - 60;
    v18 = *(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v1 + 40) + 56) + 40);
    v19 = -2;
    switch(v17)
    {
      case 0:
        goto LABEL_23;
      case 1:
        goto LABEL_22;
      case 4:
      case 5:
        v19 = -1;
LABEL_22:
        v1 = *(_QWORD *)(v1 + 32 * v19);
LABEL_23:
        sub_1C4768AD0(v18 + 272, *(_QWORD *)v1);
        v3 = (unint64_t)(v20 + 7) >> 3;
        v4 = v3 & 0xFFFFFF00;
        goto LABEL_27;
      default:
        goto LABEL_29;
    }
  }
  v6 = *(_QWORD *)(v1 - 32);
  if (!v6 || *(_BYTE *)(v6 + 16) || *(_QWORD *)(v6 + 24) != *(_QWORD *)(v1 + 72) || (*(_BYTE *)(v6 + 33) & 0x20) == 0)
LABEL_29:
    llvm::report_fatal_error((llvm *)"Unexpected Memory Instruction", (const char *)1);
  v7 = (_QWORD *)(v1 - 32 * (*(_DWORD *)(v1 + 20) & 0x7FFFFFF));
  v8 = (_QWORD *)(*v7 + 24);
  if (*(_DWORD *)(*v7 + 32) >= 0x41u)
    v8 = (_QWORD *)*v8;
  v9 = *(_DWORD *)v8;
  v10 = v7[4];
  v11 = (unint64_t *)(v10 + 24);
  if (*(_DWORD *)(v10 + 32) >= 0x41u)
    v11 = (unint64_t *)*v11;
  v3 = *v11;
  v12 = 4;
  v13 = 1;
  if (((1 << v9) & 0x1B531) == 0)
  {
    if (((1 << v9) & 0xCA) == 0)
      goto LABEL_25;
    v13 = 2;
  }
  v14 = v9 > 0x10;
  v15 = (1 << v9) & 0x1B100;
  if (!v14 && v15 != 0)
  {
    LOBYTE(v3) = 4;
    goto LABEL_26;
  }
  v12 = v13;
LABEL_25:
  LODWORD(v3) = 32 - __clz(v3);
  v13 = v12;
LABEL_26:
  v4 = 0;
  LOBYTE(v3) = v3 * v13;
LABEL_27:
  v2 = 0x100000000;
  return v2 | v4 | v3;
}

llvm::Value *sub_1C55A8A18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8;
  uint64_t v9;
  uint64_t **v10;
  uint64_t *v11;
  const llvm::APInt *v12;
  llvm::ValueHandleBase *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  llvm::Value *v17;
  uint64_t v18;
  char v19;
  char v20;
  char *v21;
  char *v22;
  uint64_t v23;
  _QWORD *v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v28;
  _DWORD *v29;
  llvm::PointerType *v30;
  _BYTE *v31;
  llvm::Value *v32;
  _BYTE *v33;
  uint64_t v34;
  int v35;
  uint64_t v36;
  int v37;
  unsigned int v38;
  llvm::ValueHandleBase **v39;
  llvm::ValueHandleBase *v40;
  uint64_t *v41;
  const llvm::APInt *v42;
  uint64_t v43;
  llvm::ConstantInt *v44;
  unint64_t v45;
  char v46;
  llvm::ValueHandleBase *v47;
  const llvm::APInt *v48;
  uint64_t v49;
  uint64_t v50;
  llvm::ConstantInt *v51;
  unsigned int v52;
  unint64_t v53;
  llvm::Value *v54;
  llvm::ValueHandleBase *v55;
  uint64_t Impl;
  uint64_t v57;
  uint64_t v58;
  uint64_t v59;
  unsigned __int8 **v60;
  int v61;
  unsigned __int8 *v62;
  unsigned __int8 *v63;
  unsigned __int8 *v64;
  uint64_t v65;
  llvm::ConstantInt *v66;
  unint64_t v67;
  unint64_t v68;
  llvm::ValueHandleBase **v69;
  int v70;
  BOOL v71;
  unsigned int v72;
  llvm::ValueHandleBase **v73;
  const char *v74;
  _BYTE *v75;
  llvm::Value *v76;
  llvm::ConstantInt *v77;
  llvm::ValueHandleBase *v78;
  _QWORD *v79;
  unint64_t v80;
  unsigned int v81;
  __int16 v82;
  unsigned __int8 *v83;
  const char *v84;
  _QWORD *v85;
  _QWORD *v86;
  __int16 v87;
  uint64_t v88;

  v88 = *MEMORY[0x1E0C80C00];
  v8 = *(_QWORD *)(a4 + 48);
  v79 = (_QWORD *)(a4 + 48);
  v9 = *(_QWORD *)(a4 + 56);
  v10 = *(uint64_t ***)(a2 + 40);
  v11 = (uint64_t *)(a1 + 32);
  v80 = *(_QWORD *)a3;
  v84 = 0;
  if (sub_1C4E5818C((uint64_t *)(a1 + 32), &v80, &v84)
    && v84 != (const char *)(*(_QWORD *)(a1 + 32) + 16 * *(unsigned int *)(a1 + 48)))
  {
    v13 = (llvm::ValueHandleBase *)*((_QWORD *)v84 + 1);
    goto LABEL_4;
  }
  v28 = *(_QWORD *)(a3 + 8);
  if (v28 != -1)
  {
    v65 = **v10;
    v66 = *(llvm::ConstantInt **)(v65 + 1960);
    v67 = *(unsigned int *)(v65 + 1968);
    LODWORD(v85) = v67 >> 8;
    if (v67 >> 8 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v84, v28, 0);
    }
    else
    {
      if (v67 <= 0xFF)
        v68 = 0;
      else
        v68 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v67);
      v84 = (const char *)(v68 & v28);
    }
    v13 = llvm::ConstantInt::get(v66, (llvm::LLVMContext *)&v84, v12);
    if (v85 >= 0x41 && v84)
      MEMORY[0x1CAA32F9C](v84, 0x1000C8000313F17);
    goto LABEL_57;
  }
  v29 = operator new(0x78uLL);
  v13 = (llvm::ValueHandleBase *)(v29 + 8);
  v29[13] = v29[13] & 0x38000000 | 1;
  *(_QWORD *)v29 = 0;
  *((_QWORD *)v29 + 1) = 0;
  *((_QWORD *)v29 + 2) = 0;
  *((_QWORD *)v29 + 3) = v29 + 8;
  v30 = *(llvm::PointerType **)(a1 + 264);
  v84 = "mtl.buffer_len";
  v87 = 259;
  llvm::GlobalVariable::GlobalVariable((uint64_t)(v29 + 8), (uint64_t)v10, v30, 1, 0, 0, (uint64_t)&v84, 0, 0, 0x100000040, 0);
  v31 = llvm::UniqueStringSaver::save(***((_QWORD ***)v29 + 4) + 2136, "driver_parameters", 0x11uLL);
  v33 = v31;
  v34 = ***((_QWORD ***)v29 + 4);
  v84 = (const char *)(v29 + 8);
  v35 = *(_DWORD *)(v34 + 2520);
  if (!v35)
  {
    v75 = v31;
    v76 = v32;
    v73 = 0;
LABEL_70:
    v39 = (llvm::ValueHandleBase **)sub_1C53D65B8(v34 + 2504, (uint64_t)&v84, (uint64_t *)&v84, v73);
    v74 = v84;
    v39[1] = 0;
    v39[2] = 0;
    *v39 = (llvm::ValueHandleBase *)v74;
    v33 = v75;
    v32 = v76;
    goto LABEL_22;
  }
  v36 = *(_QWORD *)(v34 + 2504);
  v37 = v35 - 1;
  v38 = v37 & ((v13 >> 4) ^ (v13 >> 9));
  v39 = (llvm::ValueHandleBase **)(v36 + 24 * v38);
  v40 = *v39;
  if (*v39 != v13)
  {
    v69 = 0;
    v70 = 1;
    while (v40 != (llvm::ValueHandleBase *)-4096)
    {
      if (v69)
        v71 = 0;
      else
        v71 = v40 == (llvm::ValueHandleBase *)-8192;
      if (v71)
        v69 = v39;
      v72 = v38 + v70++;
      v38 = v72 & v37;
      v39 = (llvm::ValueHandleBase **)(v36 + 24 * v38);
      v40 = *v39;
      if (*v39 == v13)
        goto LABEL_22;
    }
    v75 = v33;
    v76 = v32;
    if (v69)
      v73 = v69;
    else
      v73 = v39;
    goto LABEL_70;
  }
LABEL_22:
  v39[1] = (llvm::ValueHandleBase *)v33;
  v39[2] = v32;
  v29[16] = v29[16] & 0xFFBFFFFF | ((v32 != 0) << 22);
  v41 = *v10;
  v84 = (const char *)llvm::ValueAsMetadata::get(v13, v32);
  v43 = **v10;
  v44 = *(llvm::ConstantInt **)(v43 + 1960);
  v45 = *(unsigned int *)(v43 + 1968);
  v81 = v45 >> 8;
  if (v45 >> 8 > 0x40)
  {
    v77 = v44;
    llvm::APInt::initSlowCase((llvm::APInt *)&v80, 109, 0);
    v44 = v77;
  }
  else
  {
    if (v45 <= 0xFF)
      v46 = 0;
    else
      v46 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v45);
    v80 = v46 & 0x6D;
  }
  v47 = llvm::ConstantInt::get(v44, (llvm::LLVMContext *)&v80, v42);
  if (v81 >= 0x41 && v80)
  {
    v78 = v47;
    MEMORY[0x1CAA32F9C](v80, 0x1000C8000313F17);
    v47 = v78;
  }
  v85 = llvm::ValueAsMetadata::get(v47, v47);
  v49 = **v10;
  v50 = *(int *)(a3 + 16);
  v51 = *(llvm::ConstantInt **)(v49 + 1960);
  v52 = *(_DWORD *)(v49 + 1968);
  v81 = v52 >> 8;
  if (v52 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v80, v50, 0);
  }
  else
  {
    if (v52 <= 0xFF)
      v53 = 0;
    else
      v53 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v52);
    v80 = v53 & v50;
  }
  v55 = llvm::ConstantInt::get(v51, (llvm::LLVMContext *)&v80, v48);
  if (v81 >= 0x41 && v80)
    MEMORY[0x1CAA32F9C](v80, 0x1000C8000313F17);
  v86 = llvm::ValueAsMetadata::get(v55, v54);
  Impl = llvm::MDTuple::getImpl(v41, &v84, 3, 0, 1);
  v57 = *(unsigned int *)(a1 + 160);
  if (v57 >= *(_DWORD *)(a1 + 164))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 152, a1 + 168, v57 + 1, 8);
    LODWORD(v57) = *(_DWORD *)(a1 + 160);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 152) + 8 * v57) = Impl;
  ++*(_DWORD *)(a1 + 160);
LABEL_57:
  sub_1C619F740(v11, (_QWORD *)a3)[1] = v13;
LABEL_4:
  if (*(_DWORD *)(a3 + 20))
  {
    v14 = *(_QWORD *)(a2 + 80);
    if (v14)
      v15 = v14 - 24;
    else
      v15 = 0;
    v16 = *(_QWORD *)(v15 + 48);
  }
  else
  {
    v16 = *(_QWORD *)(*(_QWORD *)a3 + 32);
    v15 = *(_QWORD *)(*(_QWORD *)a3 + 40);
  }
  sub_1C4D8AE2C(a4, v15, v16);
  if (*((_BYTE *)v13 + 16) == 16)
  {
    v17 = v13;
    goto LABEL_15;
  }
  v18 = *((_QWORD *)v13 + 3);
  v82 = 257;
  llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(*v79 + 56) + 40) + 272, v18);
  v20 = v19;
  v21 = (char *)operator new(0x60uLL);
  v22 = v21;
  v17 = (llvm::Value *)(v21 + 32);
  *((_QWORD *)v21 + 1) = 0;
  *((_QWORD *)v21 + 2) = 0;
  *((_QWORD *)v21 + 3) = v21 + 32;
  v87 = 257;
  *((_QWORD *)v21 + 4) = v18;
  *((_QWORD *)v21 + 5) = 0;
  *((_WORD *)v21 + 24) = 60;
  *((_DWORD *)v21 + 13) = 1;
  *(_OWORD *)(v21 + 56) = 0u;
  *(_OWORD *)(v21 + 72) = 0u;
  *((_DWORD *)v21 + 22) = 0;
  *(_QWORD *)v21 = v13;
  v25 = *((_QWORD *)v13 + 1);
  v24 = (_QWORD *)((char *)v13 + 8);
  v23 = v25;
  *((_QWORD *)v21 + 1) = v25;
  if (v25)
    *(_QWORD *)(v23 + 16) = v21 + 8;
  *((_QWORD *)v21 + 2) = v24;
  *v24 = v21;
  *((_WORD *)v21 + 25) = 2 * (v20 & 0x3F);
  v21[92] = 1;
  llvm::Value::setName((uint64_t ***)v21 + 4, (uint64_t)&v84);
  (*(void (**)(_QWORD, llvm::Value *, unint64_t *, _QWORD, _QWORD))(**(_QWORD **)(a4 + 80) + 16))(*(_QWORD *)(a4 + 80), v17, &v80, *(_QWORD *)(a4 + 48), *(_QWORD *)(a4 + 56));
  v26 = *(unsigned int *)(a4 + 8);
  if ((_DWORD)v26)
  {
    v58 = *(_QWORD *)a4;
    v59 = *(_QWORD *)a4 + 16 * v26;
    v60 = (unsigned __int8 **)(v22 + 80);
    do
    {
      v61 = *(_DWORD *)v58;
      v62 = *(unsigned __int8 **)(v58 + 8);
      if (v62)
      {
        if (!v61)
        {
          v83 = *(unsigned __int8 **)(v58 + 8);
          llvm::MetadataTracking::track((uint64_t)&v83, v62, 2);
          v63 = *v60;
          goto LABEL_47;
        }
      }
      else
      {
        v63 = *v60;
        if (!*v60 && (v22[55] & 0x20) == 0)
          goto LABEL_44;
        if (!v61)
        {
          v83 = 0;
LABEL_47:
          if (v63)
            llvm::MetadataTracking::untrack((uint64_t)(v22 + 80), v63);
          v64 = v83;
          *v60 = v83;
          if (v64)
            llvm::MetadataTracking::retrack((uint64_t)&v83, v64, (uint64_t)(v22 + 80));
          goto LABEL_44;
        }
      }
      llvm::Value::setMetadata(v17, *(_DWORD *)v58, (llvm::MDNode *)v62);
LABEL_44:
      v58 += 16;
    }
    while (v58 != v59);
  }
LABEL_15:
  if (v8)
  {
    sub_1C4D8AE2C(a4, v8, v9);
  }
  else
  {
    *v79 = 0;
    v79[1] = 0;
  }
  return v17;
}

uint64_t sub_1C55A9098(uint64_t a1, uint64_t **a2)
{
  uint64_t result;
  _DWORD *v5;
  char *v6;
  llvm::PointerType *v7;
  llvm::Value *v8;
  _BYTE *v9;
  llvm::Value *v10;
  uint64_t v11;
  int v12;
  uint64_t v13;
  int v14;
  unsigned int v15;
  _QWORD *v16;
  uint64_t v17;
  uint64_t *v18;
  const llvm::APInt *v19;
  uint64_t v20;
  llvm::ConstantInt *v21;
  unint64_t v22;
  char v23;
  llvm::Value *v24;
  llvm::ValueHandleBase *v25;
  const llvm::APInt *v26;
  uint64_t v27;
  uint64_t v28;
  llvm::ConstantInt *v29;
  unsigned int v30;
  unint64_t v31;
  llvm::Value *v32;
  llvm::ValueHandleBase *v33;
  uint64_t Impl;
  uint64_t v35;
  _QWORD *v36;
  int v37;
  BOOL v38;
  unsigned int v39;
  _QWORD *v40;
  uint64_t v41;
  unint64_t v42;
  unsigned int v43;
  uint64_t v44[4];
  __int16 v45;
  uint64_t v46;

  v46 = *MEMORY[0x1E0C80C00];
  result = *(_QWORD *)(a1 + 248);
  if (result)
    return result;
  v5 = operator new(0x78uLL);
  v6 = (char *)(v5 + 8);
  v5[13] = v5[13] & 0x38000000 | 1;
  *(_QWORD *)v5 = 0;
  *((_QWORD *)v5 + 1) = 0;
  *((_QWORD *)v5 + 2) = 0;
  *((_QWORD *)v5 + 3) = v5 + 8;
  v7 = (llvm::PointerType *)llvm::PointerType::get(*(llvm::PointerType **)(a1 + 264), (llvm::Type *)1);
  v44[0] = (uint64_t)"mtl.reporting_data";
  v45 = 259;
  llvm::GlobalVariable::GlobalVariable((uint64_t)(v5 + 8), (uint64_t)a2, v7, 1, 0, 0, (uint64_t)v44, 0, 0, 0x100000040, 0);
  *(_QWORD *)(a1 + 248) = v5 + 8;
  v9 = llvm::UniqueStringSaver::save(***((_QWORD ***)v5 + 4) + 2136, "buffer_bindings", 0xFuLL);
  v10 = v8;
  v11 = ***((_QWORD ***)v5 + 4);
  v44[0] = (uint64_t)(v5 + 8);
  v12 = *(_DWORD *)(v11 + 2520);
  if (!v12)
  {
    v40 = 0;
LABEL_31:
    v16 = sub_1C53D65B8(v11 + 2504, (uint64_t)v44, v44, v40);
    v41 = v44[0];
    v16[1] = 0;
    v16[2] = 0;
    *v16 = v41;
    goto LABEL_4;
  }
  v13 = *(_QWORD *)(v11 + 2504);
  v14 = v12 - 1;
  v15 = v14 & ((v6 >> 4) ^ (v6 >> 9));
  v16 = (_QWORD *)(v13 + 24 * v15);
  v17 = *v16;
  if ((char *)*v16 != v6)
  {
    v36 = 0;
    v37 = 1;
    while (v17 != -4096)
    {
      if (v36)
        v38 = 0;
      else
        v38 = v17 == -8192;
      if (v38)
        v36 = v16;
      v39 = v15 + v37++;
      v15 = v39 & v14;
      v16 = (_QWORD *)(v13 + 24 * v15);
      v17 = *v16;
      if ((char *)*v16 == v6)
        goto LABEL_4;
    }
    if (v36)
      v40 = v36;
    else
      v40 = v16;
    goto LABEL_31;
  }
LABEL_4:
  v16[1] = v9;
  v16[2] = v10;
  v5[16] = v5[16] & 0xFFBFFFFF | ((v10 != 0) << 22);
  v18 = *a2;
  v44[0] = (uint64_t)llvm::ValueAsMetadata::get(*(llvm::ValueAsMetadata **)(a1 + 248), v8);
  v20 = **a2;
  v21 = *(llvm::ConstantInt **)(v20 + 1960);
  v22 = *(unsigned int *)(v20 + 1968);
  v43 = v22 >> 8;
  if (v22 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v42, 5, 0);
  }
  else
  {
    if (v22 <= 0xFF)
      v23 = 0;
    else
      v23 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v22);
    v42 = v23 & 5;
  }
  v25 = llvm::ConstantInt::get(v21, (llvm::LLVMContext *)&v42, v19);
  if (v43 >= 0x41 && v42)
    MEMORY[0x1CAA32F9C](v42, 0x1000C8000313F17);
  v44[1] = (uint64_t)llvm::ValueAsMetadata::get(v25, v24);
  v27 = **a2;
  v28 = *(unsigned int *)(a1 + 232);
  v29 = *(llvm::ConstantInt **)(v27 + 1960);
  v30 = *(_DWORD *)(v27 + 1968);
  v43 = v30 >> 8;
  if (v30 >> 8 > 0x40)
  {
    llvm::APInt::initSlowCase((llvm::APInt *)&v42, v28, 0);
  }
  else
  {
    if (v30 <= 0xFF)
      v31 = 0;
    else
      v31 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v30);
    v42 = v31 & v28;
  }
  v33 = llvm::ConstantInt::get(v29, (llvm::LLVMContext *)&v42, v26);
  if (v43 >= 0x41 && v42)
    MEMORY[0x1CAA32F9C](v42, 0x1000C8000313F17);
  v44[2] = (uint64_t)llvm::ValueAsMetadata::get(v33, v32);
  Impl = llvm::MDTuple::getImpl(v18, v44, 3, 0, 1);
  v35 = *(unsigned int *)(a1 + 160);
  if (v35 >= *(_DWORD *)(a1 + 164))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 152, a1 + 168, v35 + 1, 8);
    LODWORD(v35) = *(_DWORD *)(a1 + 160);
  }
  *(_QWORD *)(*(_QWORD *)(a1 + 152) + 8 * v35) = Impl;
  ++*(_DWORD *)(a1 + 160);
  return *(_QWORD *)(a1 + 248);
}

llvm::Value *sub_1C55A9428(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  char v8;
  char v9;
  char *v10;
  char *v11;
  llvm::Value *v12;
  uint64_t v13;
  _QWORD *v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 **v19;
  int v20;
  unsigned __int8 *v21;
  unsigned __int8 *v22;
  unsigned __int8 *v23;
  _BYTE v25[32];
  __int16 v26;
  _BYTE v27[32];
  __int16 v28;
  unsigned __int8 *v29;

  if (a2[5])
  {
    if (a1)
      v5 = a1 - 24;
    else
      v5 = 0;
    sub_1C4D8AE2C(a3, v5, *(_QWORD *)(v5 + 48));
    v6 = *(_QWORD *)a2;
    v7 = *(_QWORD *)(*(_QWORD *)a2 + 24);
    v26 = 257;
    llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(a3 + 48) + 56) + 40) + 272, v7);
    v9 = v8;
    v10 = (char *)operator new(0x60uLL);
    v11 = v10;
    v12 = (llvm::Value *)(v10 + 32);
    v28 = 257;
    *((_QWORD *)v10 + 3) = v10 + 32;
    *((_QWORD *)v10 + 4) = v7;
    *((_QWORD *)v10 + 5) = 0;
    *((_WORD *)v10 + 24) = 60;
    *((_DWORD *)v10 + 13) = 1;
    *(_OWORD *)(v10 + 56) = 0u;
    *(_OWORD *)(v10 + 72) = 0u;
    *((_DWORD *)v10 + 22) = 0;
    *(_QWORD *)v10 = v6;
    v15 = *(_QWORD *)(v6 + 8);
    v14 = (_QWORD *)(v6 + 8);
    v13 = v15;
    *((_QWORD *)v10 + 1) = v15;
    if (v15)
      *(_QWORD *)(v13 + 16) = v10 + 8;
    *((_QWORD *)v10 + 2) = v14;
    *v14 = v10;
    *((_WORD *)v10 + 25) = 2 * (v9 & 0x3F);
    v10[92] = 1;
    llvm::Value::setName((uint64_t ***)v10 + 4, (uint64_t)v27);
    (*(void (**)(_QWORD, llvm::Value *, _BYTE *, _QWORD, _QWORD))(**(_QWORD **)(a3 + 80) + 16))(*(_QWORD *)(a3 + 80), v12, v25, *(_QWORD *)(a3 + 48), *(_QWORD *)(a3 + 56));
    v16 = *(unsigned int *)(a3 + 8);
    if ((_DWORD)v16)
    {
      v17 = *(_QWORD *)a3;
      v18 = *(_QWORD *)a3 + 16 * v16;
      v19 = (unsigned __int8 **)(v11 + 80);
      do
      {
        v20 = *(_DWORD *)v17;
        v21 = *(unsigned __int8 **)(v17 + 8);
        if (v21)
        {
          if (!v20)
          {
            v29 = *(unsigned __int8 **)(v17 + 8);
            llvm::MetadataTracking::track((uint64_t)&v29, v21, 2);
            v22 = *v19;
            goto LABEL_19;
          }
        }
        else
        {
          v22 = *v19;
          if (!*v19 && (v11[55] & 0x20) == 0)
            goto LABEL_16;
          if (!v20)
          {
            v29 = 0;
LABEL_19:
            if (v22)
              llvm::MetadataTracking::untrack((uint64_t)(v11 + 80), v22);
            v23 = v29;
            *v19 = v29;
            if (v23)
              llvm::MetadataTracking::retrack((uint64_t)&v29, v23, (uint64_t)(v11 + 80));
            goto LABEL_16;
          }
        }
        llvm::Value::setMetadata(v12, *(_DWORD *)v17, (llvm::MDNode *)v21);
LABEL_16:
        v17 += 16;
      }
      while (v17 != v18);
    }
  }
  else
  {
    sub_1C4D8AE2C(a3, *(_QWORD *)(*(_QWORD *)a2 + 40), *(_QWORD *)(*(_QWORD *)a2 + 32));
    return *(llvm::Value **)a2;
  }
  return v12;
}

llvm::Value *sub_1C55A9600(uint64_t a1, _DWORD *a2, uint64_t a3)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  BOOL v9;
  llvm::Value *v10;
  uint64_t v12;
  unsigned __int8 *v13;
  unsigned __int8 *v14;
  uint64_t v15;
  unsigned __int8 *v16;
  uint64_t v17;
  unsigned __int8 *v18;
  char *v19;
  char *v20;
  _QWORD *v21;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  _QWORD *v26;
  uint64_t v27;
  char *v28;
  char *v29;
  unsigned __int8 **v30;
  int v31;
  unsigned __int8 *v32;
  unsigned __int8 *v33;
  unsigned __int8 *v34;
  _BYTE v35[32];
  __int16 v36;
  uint64_t v37[4];
  __int16 v38;
  unsigned __int8 *v39;
  void *v40;
  uint64_t v41;
  _BYTE v42[32];
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  void **v46;
  _QWORD *v47;
  uint64_t v48;
  int v49;
  __int16 v50;
  char v51;
  uint64_t v52;
  uint64_t v53;
  void *v54;
  _QWORD v55[2];

  v55[1] = *MEMORY[0x1E0C80C00];
  v6 = *(_QWORD *)a2;
  v8 = a1 + 56;
  v7 = *(_QWORD *)(a1 + 56);
  v40 = 0;
  if (sub_1C6200DDC(v7, *(_DWORD *)(v8 + 16), v6, a3, &v40))
    v9 = v40 == (void *)(*(_QWORD *)v8 + 24 * *(unsigned int *)(v8 + 16));
  else
    v9 = 1;
  if (!v9)
    return (llvm::Value *)*((_QWORD *)v40 + 2);
  v12 = **(_QWORD **)a3;
  v40 = v42;
  v41 = 0x200000000;
  v45 = v12;
  v46 = &v54;
  v47 = v55;
  v48 = 0;
  v49 = 0;
  v50 = 512;
  v51 = 7;
  v43 = 0;
  v44 = 0;
  v52 = 0;
  v53 = 0;
  v54 = &unk_1E8167888;
  v55[0] = &unk_1E8167A08;
  v13 = (unsigned __int8 *)sub_1C55A9428(*(_QWORD *)(a3 + 80), a2, (uint64_t)&v40);
  v14 = (unsigned __int8 *)sub_1C55A8A18(a1, a3, (uint64_t)a2, (uint64_t)&v40);
  v15 = *(_QWORD *)(a1 + 256);
  v38 = 257;
  v16 = sub_1C4773E38((uint64_t *)&v40, 47, v13, v15, (uint64_t)v37);
  v17 = *(_QWORD *)(a1 + 256);
  v38 = 257;
  v18 = sub_1C4773E38((uint64_t *)&v40, 39, v14, v17, (uint64_t)v37);
  v36 = 257;
  v10 = (llvm::Value *)(*((uint64_t (**)(void **, unsigned __int8 *, unsigned __int8 *, _QWORD, _QWORD))*v46
                        + 2))(v46, v16, v18, 0, 0);
  if (!v10)
  {
    v38 = 257;
    v19 = (char *)operator new(0x80uLL);
    v20 = v19;
    *((_QWORD *)v19 + 5) = 0;
    v21 = v19 + 40;
    *((_QWORD *)v19 + 6) = 0;
    *((_QWORD *)v19 + 8) = *(_QWORD *)v16;
    v10 = (llvm::Value *)(v19 + 64);
    *((_QWORD *)v19 + 3) = v19 + 64;
    *((_QWORD *)v19 + 7) = v19 + 64;
    *((_QWORD *)v19 + 9) = 0;
    v19[80] = 41;
    v19[81] = 0;
    *((_WORD *)v19 + 41) = 0;
    *((_DWORD *)v19 + 21) = 2;
    *(_OWORD *)(v19 + 88) = 0u;
    *(_OWORD *)(v19 + 104) = 0u;
    *((_DWORD *)v19 + 30) = 0;
    *(_QWORD *)v19 = v16;
    v24 = *((_QWORD *)v16 + 1);
    v23 = v16 + 8;
    v22 = v24;
    *((_QWORD *)v19 + 1) = v24;
    if (v24)
      *(_QWORD *)(v22 + 16) = v19 + 8;
    *((_QWORD *)v19 + 2) = v23;
    *v23 = v19;
    *((_QWORD *)v19 + 4) = v18;
    if (v18)
    {
      v27 = *((_QWORD *)v18 + 1);
      v26 = v18 + 8;
      v25 = v27;
      *v21 = v27;
      if (v27)
        *(_QWORD *)(v25 + 16) = v21;
      *((_QWORD *)v19 + 6) = v26;
      *v26 = v19 + 32;
    }
    llvm::Value::setName((uint64_t ***)v19 + 8, (uint64_t)v37);
    (*(void (**)(_QWORD *, llvm::Value *, _BYTE *, uint64_t, uint64_t))(*v47 + 16))(v47, v10, v35, v43, v44);
    if ((_DWORD)v41)
    {
      v28 = (char *)v40;
      v29 = (char *)v40 + 16 * v41;
      v30 = (unsigned __int8 **)(v20 + 112);
      do
      {
        v31 = *(_DWORD *)v28;
        v32 = (unsigned __int8 *)*((_QWORD *)v28 + 1);
        if (v32)
        {
          if (!v31)
          {
            v39 = (unsigned __int8 *)*((_QWORD *)v28 + 1);
            llvm::MetadataTracking::track((uint64_t)&v39, v32, 2);
            v33 = *v30;
            if (!*v30)
            {
LABEL_29:
              v34 = v39;
              *v30 = v39;
              if (v34)
                llvm::MetadataTracking::retrack((uint64_t)&v39, v34, (uint64_t)(v20 + 112));
              goto LABEL_26;
            }
LABEL_23:
            llvm::MetadataTracking::untrack((uint64_t)(v20 + 112), v33);
            goto LABEL_29;
          }
        }
        else
        {
          v33 = *v30;
          if (!*v30 && (v20[87] & 0x20) == 0)
            goto LABEL_26;
          if (!v31)
          {
            v39 = 0;
            if (!v33)
              goto LABEL_29;
            goto LABEL_23;
          }
        }
        llvm::Value::setMetadata(v10, *(_DWORD *)v28, (llvm::MDNode *)v32);
LABEL_26:
        v28 += 16;
      }
      while (v28 != v29);
    }
  }
  v37[0] = *(_QWORD *)a2;
  v37[1] = a3;
  sub_1C62047D8(v8, v37)[2] = v10;
  if (v40 != v42)
    free(v40);
  return v10;
}

uint64_t sub_1C55A9958(uint64_t a1, llvm::MDNode **a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  llvm::MDNode *v11;
  uint64_t v12;
  uint64_t *v13;
  llvm::MDNode *Impl;
  llvm::MDNode *v15;
  unsigned __int8 *v16;
  llvm::NamedMDNode *v17;
  uint64_t v18;
  llvm::MDNode *v19;
  _QWORD v20[4];
  __int16 v21;

  v20[0] = "agx.driver_bindings";
  v21 = 259;
  result = llvm::Module::getNamedMetadata(a1, (uint64_t)v20);
  if (result)
  {
    if (a3)
    {
      v17 = (llvm::NamedMDNode *)result;
      v18 = 8 * a3;
      do
      {
        v19 = *a2++;
        result = (uint64_t)llvm::NamedMDNode::addOperand(v17, v19);
        v18 -= 8;
      }
      while (v18);
    }
  }
  else
  {
    v20[0] = "agx.compute_driver_bindings";
    v21 = 259;
    result = llvm::Module::getNamedMetadata(a1, (uint64_t)v20);
    if (result)
    {
      v7 = result;
      v8 = *(unsigned int *)(*(_QWORD *)(result + 48) + 8);
      if ((_DWORD)v8)
      {
        v9 = 0;
        v10 = 8 * v8;
        do
        {
          v11 = *(llvm::MDNode **)(**(_QWORD **)(v7 + 48) + v9);
          v12 = *((_QWORD *)v11 + 2);
          v13 = (uint64_t *)(v12 & 0xFFFFFFFFFFFFFFF8);
          if ((v12 & 4) != 0)
            v13 = (uint64_t *)*v13;
          Impl = (llvm::MDNode *)llvm::MDTuple::getImpl(v13, a2, a3, 0, 1);
          v16 = (unsigned __int8 *)llvm::MDNode::concatenate(v11, Impl, v15);
          result = (uint64_t)sub_1C4FCE378((unsigned __int8 **)(**(_QWORD **)(v7 + 48) + v9), v16);
          v9 += 8;
        }
        while (v10 != v9);
      }
    }
  }
  return result;
}

uint64_t sub_1C55A9A70(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 16 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v10 = 1;
    }
    else
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v8 = v6;
        v13 = v5 + v9++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 16 * (v13 & v4));
        v7 = *v6;
        v10 = 1;
        if (*v6 == a3)
          goto LABEL_9;
      }
      v10 = 0;
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
    v10 = 0;
  }
LABEL_9:
  *a4 = v6;
  return v10;
}

_QWORD *sub_1C55A9B04(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C627B340(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

void sub_1C55A9BC0()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C55A9BD4(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E8170238;
  result[1] = v3;
  return result;
}

uint64_t sub_1C55A9C08(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E8170238;
  a2[1] = v2;
  return result;
}

void sub_1C55A9C24(uint64_t a1, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  unint64_t v4;
  uint64_t v6;
  int v7;
  uint64_t v8;
  int v9;
  unsigned int v10;
  _QWORD *v11;
  uint64_t v12;
  uint64_t *v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *v21;
  int v22;
  uint64_t v23;
  uint64_t v24;
  unint64_t *v25;
  unint64_t v26;
  _QWORD *v27;
  int v28;
  BOOL v29;
  unsigned int v30;
  uint64_t v31;
  _QWORD *v32;
  unint64_t v33;
  uint64_t Attribute;
  __n128 v35;
  int v36;
  int v37;
  uint64_t v38;

  if (*(_DWORD *)(*(_QWORD *)(a1 + 8) + 8) > 0x20u)
    return;
  v2 = *a2;
  v3 = *(_QWORD *)(*a2 - 8 * *(unsigned int *)(*a2 + 8));
  if (!v3)
    return;
  v4 = *(_QWORD *)(v3 + 128);
  if ((*(_BYTE *)(v4 + 34) & 0x40) == 0)
    return;
  v6 = ***(_QWORD ***)v4;
  v35.n128_u64[0] = v4;
  v7 = *(_DWORD *)(v6 + 2520);
  if (!v7)
  {
    v32 = 0;
LABEL_37:
    v11 = sub_1C53D65B8(v6 + 2504, (uint64_t)&v35, (uint64_t *)&v35, v32);
    v33 = v35.n128_u64[0];
    v11[1] = 0;
    v11[2] = 0;
    *v11 = v33;
    goto LABEL_6;
  }
  v8 = *(_QWORD *)(v6 + 2504);
  v9 = v7 - 1;
  v10 = v9 & ((v4 >> 4) ^ (v4 >> 9));
  v11 = (_QWORD *)(v8 + 24 * v10);
  v12 = *v11;
  if (*v11 != v4)
  {
    v27 = 0;
    v28 = 1;
    while (v12 != -4096)
    {
      if (v27)
        v29 = 0;
      else
        v29 = v12 == -8192;
      if (v29)
        v27 = v11;
      v30 = v10 + v28++;
      v10 = v30 & v9;
      v11 = (_QWORD *)(v8 + 24 * v10);
      v12 = *v11;
      if (*v11 == v4)
        goto LABEL_6;
    }
    if (v27)
      v32 = v27;
    else
      v32 = v11;
    goto LABEL_37;
  }
LABEL_6:
  if (v11[2] == 15)
  {
    v13 = (uint64_t *)v11[1];
    v14 = *v13;
    v15 = *(uint64_t *)((char *)v13 + 7);
    if (v14 == 0x625F726566667562 && v15 == 0x73676E69646E6962)
    {
      v17 = *(_QWORD *)(v4 + 72);
      if (!v17
        || (v35.n128_u64[0] = (unint64_t)"oob_check_enable",
            v35.n128_u64[1] = 16,
            v38 = 0,
            !sub_1C5331A1C((uint64_t *)(v17 + 24), (uint64_t)&v35, &v38))
        || (Attribute = llvm::AttributeSet::getAttribute((uint64_t *)(v4 + 72), (uint64_t)"oob_check_enable", 16)) != 0
        && *(_DWORD *)(Attribute + 16) == 1
        && *(_BYTE *)(Attribute + *(unsigned int *)(Attribute + 12) + 25) == 49)
      {
        v18 = *(unsigned int *)(v2 + 8);
        v19 = v2 - 8 * v18;
        v20 = *(_QWORD *)(*(_QWORD *)(v19 + 16) + 128);
        v21 = (_QWORD *)(v20 + 24);
        if (*(_DWORD *)(v20 + 32) >= 0x41u)
          v21 = (_QWORD *)*v21;
        v22 = *(_DWORD *)v21;
        if (v22 <= 31)
        {
          if ((_DWORD)v18 == 4
            && (v23 = *(_QWORD *)(v19 + 24), *(_BYTE *)v23 == 1)
            && (v24 = *(_QWORD *)(v23 + 128), *(_BYTE *)(v24 + 16) == 16))
          {
            v25 = (unint64_t *)(v24 + 24);
            if (*(_DWORD *)(v24 + 32) >= 0x41u)
              v25 = (unint64_t *)*v25;
            v26 = *v25;
          }
          else
          {
            v26 = -1;
          }
          v31 = *(_QWORD *)(a1 + 8);
          v35.n128_u64[0] = v4;
          v35.n128_u64[1] = v26;
          v36 = v22;
          v37 = *(_DWORD *)(*(_QWORD *)(v4 + 24) + 8) >> 8;
          sub_1C4AB8FDC(v31, &v35);
        }
      }
    }
  }
}

uint64_t sub_1C55A9E80(llvm::Value **a1)
{
  llvm::Value *v2;
  uint64_t v3;
  int v4;
  int v5;
  llvm::Value **v6;

  v2 = *a1;
  if (!v2 || !a1[1])
  {
    v4 = *((unsigned __int8 *)v2 + 16);
    if (v4 != 62)
    {
      if (v4 != 5)
        goto LABEL_11;
      if (*((_WORD *)v2 + 9) != 34)
        goto LABEL_15;
    }
    v5 = *((_DWORD *)v2 + 5);
    if ((v5 & 0x40000000) != 0)
      v6 = (llvm::Value **)*((_QWORD *)v2 - 1);
    else
      v6 = (llvm::Value **)((char *)v2 - 32 * (v5 & 0x7FFFFFF));
    v2 = llvm::Value::stripPointerCasts(*v6);
    v4 = *((unsigned __int8 *)v2 + 16);
LABEL_11:
    if (v4 == 62 || v4 == 5 && *((_WORD *)v2 + 9) == 34)
    {
      *a1 = v2;
      return 1;
    }
LABEL_15:
    v3 = 0;
    a1[1] = v2;
    return v3;
  }
  return 0;
}

BOOL sub_1C55A9F2C(int a1)
{
  return (a1 - 2376) < 0x20 || a1 == 2142;
}

BOOL sub_1C55A9F50(int a1)
{
  return (a1 - 2630) < 0x20 || a1 == 2144;
}

char *sub_1C55A9F74(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  char *result;
  uint64_t v10;
  char *v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = (char *)operator new(32 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C627B71C(a1, v4, v4 + 32 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = &result[32 * v10];
    do
    {
      *(_QWORD *)result = -4096;
      *((_QWORD *)result + 1) = -4096;
      *((_DWORD *)result + 4) = -1;
      result += 32;
    }
    while (result != v11);
  }
  return result;
}

uint64_t sub_1C55AA038(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Bounds Check after Vectorizer";
  *(_QWORD *)(v2 + 8) = 29;
  *(_QWORD *)(v2 + 16) = "bounds-check-post-vectorizer";
  *(_QWORD *)(v2 + 24) = 28;
  *(_QWORD *)(v2 + 32) = &unk_1ED807178;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C55AA1A8;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C55AA0C8(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED807178;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E8170280;
  *(_QWORD *)(a1 + 32) = a1 + 64;
  *(_QWORD *)(a1 + 40) = a1 + 64;
  *(_QWORD *)(a1 + 48) = 2;
  *(_DWORD *)(a1 + 56) = 0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED807180);
  if (v3 != -1)
  {
    v7[0] = sub_1C55AA038;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED807180, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C55AA1A8()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C55AA0C8(v0);
}

void sub_1C55AA1D0(llvm::Pass *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E8170280;
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2 != *((void **)this + 4))
    free(v2);
  llvm::Pass::~Pass(this);
}

void sub_1C55AA210(llvm::Pass *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E8170280;
  v2 = (void *)*((_QWORD *)this + 5);
  if (v2 != *((void **)this + 4))
    free(v2);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C55AA264()
{
  return "Bounds check after LoadStoreVectorizer pass";
}

BOOL sub_1C55AA274(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  void *v5;
  llvm::SmallPtrSetImplBase *v6;
  void *v7;
  unint64_t v8;
  uint64_t v9;
  uint64_t v10;
  unint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t i;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  void **v20;
  unsigned int j;
  uint64_t v22;
  uint64_t v23;
  _QWORD *v24;
  unsigned int v25;
  uint64_t v26;
  int v27;
  uint64_t *v28;
  uint64_t v29;
  llvm::DataLayout *v30;
  uint64_t v31;
  const char *v32;
  unint64_t v33;
  unint64_t v34;
  uint64_t v35;
  _QWORD *v36;
  uint64_t v37;
  uint64_t v38;
  int v39;
  int v40;
  uint64_t *v41;
  int v42;
  uint64_t v43;
  int v44;
  uint64_t v46;
  unsigned int v48;
  int v49;
  unsigned int v50;
  void *v51;
  uint64_t **v52;
  unsigned int v53;
  void *v54;
  uint64_t v55;
  _BYTE v56[32];
  void *v57;
  uint64_t v58;
  _QWORD v59[5];

  v59[4] = *MEMORY[0x1E0C80C00];
  v4 = *(_QWORD *)(a2 + 40);
  v6 = (llvm::SmallPtrSetImplBase *)(a1 + 32);
  v5 = *(void **)(a1 + 32);
  *(_BYTE *)(a1 + 28) = 0;
  v7 = *(void **)(a1 + 40);
  if (v7 != v5)
  {
    v46 = *(unsigned int *)(a1 + 48);
    if (v46 >= 0x21 && 4 * (*(_DWORD *)(a1 + 52) - *(_DWORD *)(a1 + 56)) < v46)
    {
      free(v7);
      v48 = *(_DWORD *)(a1 + 52) - *(_DWORD *)(a1 + 56);
      v49 = 1 << (33 - __clz(v48 - 1));
      *(_DWORD *)(a1 + 52) = 0;
      *(_DWORD *)(a1 + 56) = 0;
      if (v48 <= 0x10)
        v50 = 32;
      else
        v50 = v49;
      *(_DWORD *)(a1 + 48) = v50;
      v51 = malloc_type_malloc(8 * v50, 0x4065EBACuLL);
      if (!v51)
        llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
      *(_QWORD *)(a1 + 40) = v51;
      memset(v51, 255, 8 * *(unsigned int *)(a1 + 48));
      goto LABEL_3;
    }
    memset(v7, 255, 8 * v46);
  }
  *(_DWORD *)(a1 + 52) = 0;
  *(_DWORD *)(a1 + 56) = 0;
LABEL_3:
  v57 = v59;
  v58 = 0x400000000;
  v54 = v56;
  v55 = 0x400000000;
  v8 = sub_1C5EA50FC(v4);
  v9 = a2 + 72;
  v10 = *(_QWORD *)(a2 + 80);
  if (v10 != a2 + 72)
  {
    v11 = v8;
    do
    {
      v12 = v10 - 24;
      if (!v10)
        v12 = 0;
      v13 = v12 + 40;
      for (i = *(_QWORD *)(v12 + 48); i != v13; i = *(_QWORD *)(i + 8))
      {
        v15 = i - 24;
        if (i)
          v16 = i - 24;
        else
          v16 = 0;
        v17 = *(unsigned __int8 *)(v16 + 16);
        if (v17 == 84)
        {
          v18 = *(_QWORD *)(v16 - 32);
          if (v18
            && !*(_BYTE *)(v18 + 16)
            && *(_QWORD *)(v18 + 24) == *(_QWORD *)(v16 + 72)
            && (*(_BYTE *)(v18 + 33) & 0x20) != 0
            && *(_DWORD *)(*(_QWORD *)(i - 56) + 36) == 2768)
          {
            sub_1C4774094(v6, *(_QWORD *)(v15 - 32 * (*(_DWORD *)(i - 4) & 0x7FFFFFF)));
            llvm::Value::doRAUW((llvm::ValueAsMetadata *)(i - 24), *(llvm::Value **)(v15 - 32 * (*(_DWORD *)(i - 4) & 0x7FFFFFF)), (llvm::Value *)1);
            v19 = v55;
            v20 = &v54;
            if (v55 >= (unint64_t)HIDWORD(v55))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v54, (uint64_t)v56, v55 + 1, 8);
              v19 = v55;
            }
LABEL_24:
            *((_QWORD *)*v20 + v19) = v15;
            ++*((_DWORD *)v20 + 2);
            continue;
          }
        }
        else if ((v11 & 0x800000000) != 0 && (v17 & 0xFE) == 0x3C)
        {
          v19 = v58;
          v20 = &v57;
          if (v58 >= (unint64_t)HIDWORD(v58))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v57, (uint64_t)v59, v58 + 1, 8);
            v19 = v58;
          }
          goto LABEL_24;
        }
      }
      v10 = *(_QWORD *)(v10 + 8);
    }
    while (v10 != v9);
  }
  for (j = v55; (_DWORD)v55; j = v55)
  {
    v22 = *((_QWORD *)v54 + j - 1);
    LODWORD(v55) = j - 1;
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v22 + 40) + 40, (uint64_t ***)v22);
    v23 = *(_QWORD *)(v22 + 24);
    v24 = *(_QWORD **)(v22 + 32);
    *v24 = v23;
    *(_QWORD *)(v23 + 8) = v24;
    *(_QWORD *)(v22 + 24) = 0;
    *(_QWORD *)(v22 + 32) = 0;
    llvm::Value::deleteValue((llvm::Value *)v22);
    *(_BYTE *)(a1 + 28) = 1;
  }
  if (!sub_1C5EABB48(v4))
    goto LABEL_75;
  v25 = v58;
  if (!(_DWORD)v58)
    goto LABEL_75;
  do
  {
    v26 = *((_QWORD *)v57 + --v25);
    LODWORD(v58) = v25;
    v27 = *(unsigned __int8 *)(v26 + 16);
    v28 = (uint64_t *)v26;
    if (v27 != 60)
    {
      if (v27 != 61)
        continue;
      v28 = *(uint64_t **)(v26 - 64);
    }
    v29 = *(_QWORD *)(v26 - 32);
    if ((*(_DWORD *)(*(_QWORD *)v29 + 8) & 0xFFFFFF00) != 0x500)
      goto LABEL_71;
    v30 = (llvm::DataLayout *)(*(_QWORD *)(*(_QWORD *)(*(_QWORD *)(v26 + 40) + 56) + 40) + 272);
    sub_1C4768AD0((uint64_t)v30, *v28);
    if ((_DWORD)v32 == 1)
    {
      v43 = v31;
      v31 = v43;
    }
    v33 = (unint64_t)(v31 + 7) >> 3;
    if (v33 > 0x1000)
    {
      sub_1C55AA7E8(v26);
      *(_BYTE *)(a1 + 28) = 1;
      goto LABEL_71;
    }
    v53 = *(_DWORD *)(llvm::DataLayout::getPointerAlignElem(v30, 5u) + 12);
    if (v53 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&v52, 0, 1);
    else
      v52 = 0;
    v34 = (4096 - v33);
    while (1)
    {
      if ((sub_1C4DA9220((llvm::APInt *)&v52, 0) & 1) == 0
        && (unint64_t)sub_1C47EE5B8(&v52, 0xFFFFFFFFFFFFFFFFLL) <= v34)
      {
        v36 = sub_1C477672C((uint64_t)v6, v29);
        v37 = *(_QWORD *)(a1 + 40);
        v38 = v37 == *(_QWORD *)(a1 + 32) ? 52 : 48;
        if (v36 != (_QWORD *)(v37 + 8 * *(unsigned int *)(a1 + v38)))
          break;
      }
      v39 = *(unsigned __int8 *)(v29 + 16);
      if (v39 != 62)
      {
        if (v39 != 5)
          goto LABEL_54;
        v40 = *(unsigned __int16 *)(v29 + 18);
        if (v40 != 34)
          goto LABEL_62;
      }
      if (!llvm::GEPOperator::accumulateConstantOffset(v29, v30, (uint64_t)&v52, 0, v35))
        goto LABEL_67;
      v39 = *(unsigned __int8 *)(v29 + 16);
LABEL_54:
      if (v39 > 76)
      {
        if (v39 != 77)
        {
          if (v39 != 78)
            goto LABEL_67;
          v41 = (uint64_t *)(v29 - 32);
          goto LABEL_66;
        }
      }
      else if (v39 == 5)
      {
        v40 = *(unsigned __int16 *)(v29 + 18);
        if (v40 != 34)
        {
LABEL_62:
          if (v40 != 49)
            goto LABEL_67;
        }
      }
      else if (v39 != 62)
      {
        goto LABEL_67;
      }
      v42 = *(_DWORD *)(v29 + 20);
      if ((v42 & 0x40000000) != 0)
        v41 = *(uint64_t **)(v29 - 8);
      else
        v41 = (uint64_t *)(v29 - 32 * (v42 & 0x7FFFFFF));
LABEL_66:
      v29 = *v41;
      if (!*v41)
      {
LABEL_67:
        sub_1C55AA7E8(v26);
        *(_BYTE *)(a1 + 28) = 1;
        break;
      }
    }
    if (v53 >= 0x41 && v52)
      MEMORY[0x1CAA32F9C](v52, 0x1000C8000313F17);
LABEL_71:
    v25 = v58;
  }
  while (v25);
LABEL_75:
  v44 = *(unsigned __int8 *)(a1 + 28);
  if (v54 != v56)
    free(v54);
  if (v57 != v59)
    free(v57);
  return v44 != 0;
}

void sub_1C55AA7E8(uint64_t a1)
{
  uint64_t v2;
  int v3;
  uint64_t *v4;
  uint64_t v5;
  unsigned __int8 **v6;
  const char *v7;
  uint64_t v8;
  uint64_t v9;
  unint64_t v10;
  uint64_t *v11;
  uint64_t v12;
  llvm::Type *v13;
  unsigned int v14;
  _QWORD *i;
  _QWORD *v16;
  uint64_t v17;
  uint64_t v18;
  unsigned __int8 *v19;
  unsigned __int8 *v20;
  uint64_t v21;
  BOOL v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t *v25;
  uint64_t Declaration;
  uint64_t **v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t **v30;
  const llvm::APInt *v31;
  uint64_t v32;
  uint64_t v33;
  llvm::ConstantInt *v34;
  unsigned int v35;
  unint64_t v36;
  llvm::ValueHandleBase *v37;
  uint64_t v38;
  uint64_t *Select;
  uint64_t v40;
  unsigned __int8 *v41;
  unsigned __int8 *v42;
  uint64_t v43;
  uint64_t v44;
  unsigned __int8 ***v45;
  uint64_t v46;
  llvm::ConstantInt *v47;
  llvm::ValueHandleBase *v48;
  unsigned __int8 *v49;
  unsigned int v50;
  __int16 v51;
  void *v52[2];
  _BYTE v53[32];
  uint64_t v54;
  _QWORD *v55;
  uint64_t v56;
  void **v57;
  _QWORD *v58;
  uint64_t v59;
  int v60;
  __int16 v61;
  char v62;
  uint64_t v63;
  uint64_t v64;
  void *v65;
  _QWORD v66[3];

  v66[1] = *MEMORY[0x1E0C80C00];
  v2 = *(_QWORD *)(*(_QWORD *)(a1 + 40) + 56);
  v3 = *(unsigned __int8 *)(a1 + 16);
  v4 = (uint64_t *)a1;
  if (v3 != 60)
  {
    if (v3 != 61)
      return;
    v4 = *(uint64_t **)(a1 - 64);
  }
  v6 = (unsigned __int8 **)(a1 - 32);
  v5 = *(_QWORD *)(a1 - 32);
  sub_1C4768AD0(*(_QWORD *)(v2 + 40) + 272, *v4);
  v9 = v8;
  if ((_DWORD)v7 == 1)
  v10 = v9 + 7;
  v11 = *(uint64_t **)(v2 + 40);
  v12 = *v11;
  v52[0] = v53;
  v52[1] = (void *)0x200000000;
  v56 = v12;
  v57 = &v65;
  v58 = v66;
  v59 = 0;
  v60 = 0;
  v61 = 512;
  v62 = 7;
  v54 = 0;
  v55 = 0;
  v63 = 0;
  v64 = 0;
  v65 = &unk_1E8167888;
  v66[0] = &unk_1E8167A08;
  v13 = *(llvm::Type **)v5;
  v14 = *(unsigned __int8 *)(v5 + 16);
  if (v14 == 83)
  {
    for (i = *(_QWORD **)(*(_QWORD *)(v5 + 40) + 48); ; i = (_QWORD *)i[1])
    {
      v16 = i - 3;
      if (!i)
        v16 = 0;
      if (*((_BYTE *)v16 + 16) != 83)
        break;
    }
    v54 = i[2];
    v55 = i;
    v19 = (unsigned __int8 *)i[3];
    v49 = v19;
    if (!v19)
    {
      v20 = 0;
      goto LABEL_26;
    }
    goto LABEL_52;
  }
  if (v14 >= 0x1C)
  {
    v20 = 0;
    v21 = *(_QWORD *)(v5 + 32);
    if (v21)
      v22 = v21 == *(_QWORD *)(v5 + 40) + 40;
    else
      v22 = 1;
    if (v22)
      v23 = 0;
    else
      v23 = v21 - 24;
    v54 = *(_QWORD *)(v23 + 40);
    v55 = (_QWORD *)(v23 + 24);
    v19 = *(unsigned __int8 **)(v23 + 48);
    v49 = v19;
    if (!v19)
    {
LABEL_26:
      sub_1C4774EF4((uint64_t)v52, 0, (uint64_t)v20);
      if (v49)
        llvm::MetadataTracking::untrack((uint64_t)&v49, v49);
      goto LABEL_28;
    }
LABEL_52:
    llvm::MetadataTracking::track((uint64_t)&v49, v19, 2);
    v20 = v49;
    goto LABEL_26;
  }
  v17 = *(_QWORD *)(v2 + 80);
  if (v17)
    v18 = v17 - 24;
  else
    v18 = 0;
  sub_1C4D8AE2C((uint64_t)v52, v18, *(_QWORD *)(v18 + 48));
LABEL_28:
  llvm::DataLayout::getIntPtrType((llvm::DataLayout *)(v11 + 34), v13);
  v51 = 257;
  v25 = (uint64_t *)sub_1C4773E38((uint64_t *)v52, 47, (unsigned __int8 *)v5, v24, (uint64_t)&v49);
  Declaration = llvm::Intrinsic::getDeclaration(v11, 2811, 0, 0);
  if (Declaration)
    v27 = *(uint64_t ***)(Declaration + 24);
  else
    v27 = 0;
  v51 = 257;
  v28 = sub_1C4774778((uint64_t *)v52, v27, Declaration, 0, 0, (uint64_t)&v49, 0);
  v29 = llvm::Intrinsic::getDeclaration(v11, 2812, 0, 0);
  if (v29)
    v30 = *(uint64_t ***)(v29 + 24);
  else
    v30 = 0;
  v51 = 257;
  v32 = sub_1C4774778((uint64_t *)v52, v30, v29, 0, 0, (uint64_t)&v49, 0);
  if ((v10 >> 3) > 0x1000)
  {
    v33 = (v10 >> 3);
    v34 = *(llvm::ConstantInt **)(*(_QWORD *)v56 + 1960);
    v35 = *(_DWORD *)(*(_QWORD *)v56 + 1968);
    v50 = v35 >> 8;
    if (v35 >> 8 > 0x40)
    {
      v47 = v34;
      llvm::APInt::initSlowCase((llvm::APInt *)&v49, v33, 0);
      v34 = v47;
    }
    else
    {
      if (v35 <= 0xFF)
        v36 = 0;
      else
        v36 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v35);
      v49 = (unsigned __int8 *)(v36 & v33);
    }
    v37 = llvm::ConstantInt::get(v34, (llvm::LLVMContext *)&v49, v31);
    if (v50 >= 0x41 && v49)
    {
      v48 = v37;
      MEMORY[0x1CAA32F9C](v49, 0x1000C8000313F17);
      v37 = v48;
    }
    v51 = 257;
    v32 = sub_1C47733F8((uint64_t)v52, v32, (uint64_t)v37, (uint64_t)&v49, 0, 0);
  }
  v51 = 257;
  v38 = sub_1C4774B48((uint64_t)v52, 37, (uint64_t)v25, v32, (uint64_t)&v49);
  v51 = 257;
  Select = (uint64_t *)llvm::IRBuilderBase::CreateSelect((uint64_t *)v52, v38, v25, v32, (uint64_t)&v49, 0);
  v51 = 257;
  v40 = sub_1C4774B48((uint64_t)v52, 35, (uint64_t)Select, v28, (uint64_t)&v49);
  v51 = 257;
  v41 = (unsigned __int8 *)llvm::IRBuilderBase::CreateSelect((uint64_t *)v52, v40, Select, v28, (uint64_t)&v49, 0);
  v51 = 257;
  v42 = sub_1C4773E38((uint64_t *)v52, 48, v41, (uint64_t)v13, (uint64_t)&v49);
  if (v52[0] != v53)
    free(v52[0]);
  if (*v6)
  {
    **(_QWORD **)(a1 - 16) = *(_QWORD *)(a1 - 24);
    v43 = *(_QWORD *)(a1 - 24);
    if (v43)
      *(_QWORD *)(v43 + 16) = *(_QWORD *)(a1 - 16);
  }
  *v6 = v42;
  if (v42)
  {
    v46 = *((_QWORD *)v42 + 1);
    v45 = (unsigned __int8 ***)(v42 + 8);
    v44 = v46;
    *(_QWORD *)(a1 - 24) = v46;
    if (v46)
      *(_QWORD *)(v44 + 16) = a1 - 24;
    *(_QWORD *)(a1 - 16) = v45;
    *v45 = v6;
  }
}

uint64_t sub_1C55AAC94(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeDominatorTreeWrapperPassPass(a1);
  llvm::initializeLoopInfoWrapperPassPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Structurize CFG for GPU execution";
  *(_QWORD *)(v2 + 8) = 33;
  *(_QWORD *)(v2 + 16) = "cfg-structurize";
  *(_QWORD *)(v2 + 24) = 15;
  *(_QWORD *)(v2 + 32) = &unk_1ED807188;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C55AB060;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C55AAD30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  _BYTE *v6;
  uint64_t v7;
  uint64_t i;
  uint64_t v9;
  char *v10;
  uint64_t v11;
  uint64_t v12;
  _QWORD *v13;
  uint64_t v14;
  uint64_t v15;
  unint64_t v17;
  unint64_t v19;
  _QWORD *v20;
  _QWORD v21[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED807188;
  v6 = (_BYTE *)(a1 + 4888);
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E8170320;
  *(_QWORD *)(a1 + 32) = 0;
  *(_DWORD *)(a1 + 40) = -1;
  *(_QWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = a1 + 80;
  *(_QWORD *)(a1 + 72) = 0x1000000000;
  v7 = 152;
  *(_QWORD *)(a1 + 144) = 1;
  do
  {
    *(_QWORD *)(a1 + v7) = -4096;
    v7 += 16;
  }
  while (v7 != 408);
  *(_QWORD *)(a1 + 408) = 1;
  for (i = 416; i != 928; i += 32)
    *(_QWORD *)(a1 + i) = -4096;
  *(_QWORD *)(a1 + 928) = a1 + 944;
  *(_QWORD *)(a1 + 936) = 0x2000000000;
  *(_QWORD *)(a1 + 2480) = a1 + 2496;
  *(_QWORD *)(a1 + 2488) = 0x2000000000;
  *(_QWORD *)(a1 + 4544) = a1 + 4560;
  *(_QWORD *)(a1 + 4552) = 0x600000000;
  *(_DWORD *)(a1 + 4608) = 0;
  *(_QWORD *)(a1 + 4616) = 0;
  *(_OWORD *)(a1 + 4624) = 0u;
  *(_DWORD *)(a1 + 4640) = 0;
  *(_OWORD *)(a1 + 4648) = 0u;
  *(_DWORD *)(a1 + 4664) = 0;
  *(_OWORD *)(a1 + 4672) = 0u;
  *(_DWORD *)(a1 + 4688) = 0;
  v9 = -64;
  *(_QWORD *)(a1 + 4696) = 1;
  do
  {
    *(_QWORD *)(a1 + v9 + 4768) = -4096;
    v9 += 16;
  }
  while (v9);
  *(_QWORD *)(a1 + 4768) = a1 + 4800;
  *(_QWORD *)(a1 + 4776) = a1 + 4800;
  *(_QWORD *)(a1 + 4784) = 8;
  *(_DWORD *)(a1 + 4792) = 0;
  *(_DWORD *)(a1 + 4880) = 128;
  v10 = (char *)operator new(0x2000uLL, (std::align_val_t)8uLL);
  *(_QWORD *)(a1 + 4864) = v10;
  *(_QWORD *)(a1 + 4872) = 0;
  v11 = *(unsigned int *)(a1 + 4880);
  if ((_DWORD)v11)
  {
    v12 = v11 << 6;
    v13 = v10 + 16;
    do
    {
      *v13 = 0;
      v13[1] = -4096;
      *(v13 - 2) = &unk_1E814DA10;
      *(v13 - 1) = 2;
      v13[2] = 0;
      v13 += 8;
      v12 -= 64;
    }
    while (v12);
  }
  *v6 = 0;
  v6[24] = 0;
  *(_OWORD *)(a1 + 4928) = 0u;
  *(_DWORD *)(a1 + 4944) = 0;
  *(_QWORD *)(a1 + 4960) = 0;
  *(_QWORD *)(a1 + 4952) = 0;
  *(_DWORD *)(a1 + 4968) = 0;
  *(_QWORD *)(a1 + 4976) = a1 + 5008;
  *(_QWORD *)(a1 + 4984) = a1 + 5008;
  *(_QWORD *)(a1 + 4992) = 4;
  *(_DWORD *)(a1 + 5000) = 0;
  *(_QWORD *)(a1 + 5040) = a1 + 5056;
  *(_QWORD *)(a1 + 5048) = 0x200000000;
  *(_QWORD *)(a1 + 5216) = a1 + 5232;
  *(_QWORD *)(a1 + 5224) = 0x200000000;
  v14 = *(_QWORD *)(a2 + 24);
  if (v14)
  {
    if (v14 == a2)
    {
      *(_QWORD *)(a1 + 5416) = a1 + 5392;
      (*(void (**)(_QWORD))(**(_QWORD **)(a2 + 24) + 24))(*(_QWORD *)(a2 + 24));
    }
    else
    {
      *(_QWORD *)(a1 + 5416) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v14 + 16))(v14);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 5416) = 0;
  }
  v15 = *(_QWORD *)(a3 + 24);
  if (v15)
  {
    if (v15 == a3)
    {
      *(_QWORD *)(a1 + 5448) = a1 + 5424;
      (*(void (**)(_QWORD))(**(_QWORD **)(a3 + 24) + 24))(*(_QWORD *)(a3 + 24));
    }
    else
    {
      *(_QWORD *)(a1 + 5448) = (*(uint64_t (**)(uint64_t))(*(_QWORD *)v15 + 16))(v15);
    }
  }
  else
  {
    *(_QWORD *)(a1 + 5448) = 0;
  }
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v19 = qword_1ED830BC0[0];
  v17 = atomic_load(&qword_1ED807190);
  if (v17 != -1)
  {
    v21[0] = sub_1C55AAC94;
    v21[1] = &v19;
    v20 = v21;
    std::__call_once(&qword_1ED807190, &v20, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C55AB060()
{
  uint64_t v0;
  void (**v1)(void);
  void (**v2)(void);
  _QWORD v4[3];
  _QWORD *v5;
  _QWORD v6[3];
  _QWORD *v7;
  uint64_t v8;

  v8 = *MEMORY[0x1E0C80C00];
  v0 = operator new();
  v7 = 0;
  v5 = 0;
  sub_1C55AAD30(v0, (uint64_t)v6, (uint64_t)v4);
  if (v5 == v4)
  {
    v1 = (void (**)(void))(v4[0] + 32);
  }
  else
  {
    if (!v5)
      goto LABEL_6;
    v1 = (void (**)(void))(*v5 + 40);
  }
  (*v1)();
LABEL_6:
  if (v7 == v6)
  {
    v2 = (void (**)(void))(v6[0] + 32);
    goto LABEL_10;
  }
  if (v7)
  {
    v2 = (void (**)(void))(*v7 + 40);
LABEL_10:
    (*v2)();
  }
  return v0;
}

void sub_1C55AB148(uint64_t a1)
{
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  _QWORD *v5;
  uint64_t v6;
  void *v7;
  void *v8;
  void *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;
  uint64_t v13;
  uint64_t v14;
  unint64_t v15;
  unint64_t *v16;
  uint64_t v17;
  int32x2_t *v18;
  unint64_t v19;
  uint64_t v20;
  unsigned int v21;
  uint64_t v22;
  uint64_t *v23;
  uint64_t v24;
  int v25;
  int v26;
  unint64_t v28;
  unint64_t *v29;
  uint64_t v30;
  int32x2_t *v31;
  unint64_t v32;
  uint64_t v33;
  unsigned int v34;
  uint64_t v35;
  uint64_t *v36;
  uint64_t v37;
  int v38;
  int v39;
  void *v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  _QWORD *v44;
  _QWORD *v45;
  char *v46;
  void *v47;

  *(_QWORD *)a1 = &off_1E8170320;
  v2 = (_QWORD *)(a1 + 5424);
  v3 = *(_QWORD **)(a1 + 5448);
  if (v3 == v2)
  {
    v4 = 4;
    v3 = v2;
  }
  else
  {
    if (!v3)
      goto LABEL_6;
    v4 = 5;
  }
  (*(void (**)(void))(*v3 + 8 * v4))();
LABEL_6:
  v5 = *(_QWORD **)(a1 + 5416);
  if (v5 == (_QWORD *)(a1 + 5392))
  {
    v6 = 4;
    v5 = (_QWORD *)(a1 + 5392);
  }
  else
  {
    if (!v5)
      goto LABEL_11;
    v6 = 5;
  }
  (*(void (**)(void))(*v5 + 8 * v6))();
LABEL_11:
  sub_1C55AF894(*(_QWORD *)(a1 + 5216), *(_QWORD *)(a1 + 5216) + 80 * *(unsigned int *)(a1 + 5224));
  v7 = *(void **)(a1 + 5216);
  if (v7 != (void *)(a1 + 5232))
    free(v7);
  sub_1C55AF894(*(_QWORD *)(a1 + 5040), *(_QWORD *)(a1 + 5040) + 80 * *(unsigned int *)(a1 + 5048));
  v8 = *(void **)(a1 + 5040);
  if (v8 != (void *)(a1 + 5056))
    free(v8);
  v9 = *(void **)(a1 + 4984);
  if (v9 != *(void **)(a1 + 4976))
    free(v9);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 4952), 8);
  sub_1C4F5D740(a1 + 4928);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 4928), 8);
  if (*(_BYTE *)(a1 + 4912))
  {
    sub_1C4E43068(a1 + 4888);
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 4888), 8);
    *(_BYTE *)(a1 + 4912) = 0;
  }
  v10 = *(unsigned int *)(a1 + 4880);
  v11 = *(_QWORD **)(a1 + 4864);
  if ((_DWORD)v10)
  {
    v12 = &v11[8 * v10];
    do
    {
      v13 = v11[3];
      if ((v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v14 = v11[7];
        if (v14)
        {
          if (v14 != -8192 && v14 != -4096)
          {
            v15 = v11[5] & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v15 = v11[6];
            v16 = (unint64_t *)v11[6];
            if (v16)
            {
              *v16 = *v16 & 7 | v15;
            }
            else
            {
              v17 = v11[7];
              v18 = ***(int32x2_t ****)v17;
              v19 = (unint64_t)v18[303];
              if (v19 <= v15)
              {
                v20 = v18[305].u32[0];
                if (v19 + 16 * v20 > v15)
                {
                  v21 = v20 - 1;
                  LODWORD(v22) = v21 & ((v17 >> 4) ^ (v17 >> 9));
                  v23 = (uint64_t *)(v19 + 16 * v22);
                  v24 = *v23;
                  if (v17 == *v23)
                  {
LABEL_33:
                    *v23 = -8192;
                    v18[304] = vadd_s32(v18[304], (int32x2_t)0x1FFFFFFFFLL);
                    v17 = v11[7];
                  }
                  else
                  {
                    v25 = 1;
                    while (v24 != -4096)
                    {
                      v26 = v22 + v25++;
                      v22 = v26 & v21;
                      v24 = *(_QWORD *)(v19 + 16 * v22);
                      if (v17 == v24)
                      {
                        v23 = (uint64_t *)(v19 + 16 * v22);
                        goto LABEL_33;
                      }
                    }
                  }
                  *(_BYTE *)(v17 + 17) &= ~1u;
                }
              }
            }
            v13 = v11[3];
          }
        }
      }
      if (v13 != -4096 && v13 != -8192 && v13 != 0)
      {
        v28 = v11[1] & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v28 = v11[2];
        v29 = (unint64_t *)v11[2];
        if (v29)
        {
          *v29 = *v29 & 7 | v28;
        }
        else
        {
          v30 = v11[3];
          v31 = ***(int32x2_t ****)v30;
          v32 = (unint64_t)v31[303];
          if (v32 <= v28)
          {
            v33 = v31[305].u32[0];
            if (v32 + 16 * v33 > v28)
            {
              v34 = v33 - 1;
              LODWORD(v35) = v34 & ((v30 >> 4) ^ (v30 >> 9));
              v36 = (uint64_t *)(v32 + 16 * v35);
              v37 = *v36;
              if (v30 == *v36)
              {
LABEL_52:
                *v36 = -8192;
                v31[304] = vadd_s32(v31[304], (int32x2_t)0x1FFFFFFFFLL);
                v30 = v11[3];
              }
              else
              {
                v38 = 1;
                while (v37 != -4096)
                {
                  v39 = v35 + v38++;
                  v35 = v39 & v34;
                  v37 = *(_QWORD *)(v32 + 16 * v35);
                  if (v30 == v37)
                  {
                    v36 = (uint64_t *)(v32 + 16 * v35);
                    goto LABEL_52;
                  }
                }
              }
              *(_BYTE *)(v30 + 17) &= ~1u;
            }
          }
        }
      }
      v11 += 8;
    }
    while (v11 != v12);
    v11 = *(_QWORD **)(a1 + 4864);
  }
  MEMORY[0x1CAA32FB4](v11, 8);
  v40 = *(void **)(a1 + 4776);
  if (v40 != *(void **)(a1 + 4768))
    free(v40);
  if ((*(_BYTE *)(a1 + 4696) & 1) == 0)
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 4704), 8);
  v41 = *(unsigned int *)(a1 + 4688);
  v42 = *(_QWORD *)(a1 + 4672);
  if ((_DWORD)v41)
  {
    v43 = 120 * v41;
    v44 = (_QWORD *)(v42 + 104);
    do
    {
      if ((*(v44 - 13) | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v45 = (_QWORD *)*(v44 - 2);
        if (v44 != v45)
          free(v45);
        if ((*(_BYTE *)(v44 - 5) & 1) == 0)
          MEMORY[0x1CAA32FB4](*(v44 - 4), 8);
        v46 = (char *)*(v44 - 9);
        if (v44 - 7 != (_QWORD *)v46)
          free(v46);
        if ((*(_BYTE *)(v44 - 12) & 1) == 0)
          MEMORY[0x1CAA32FB4](*(v44 - 11), 8);
      }
      v44 += 15;
      v43 -= 120;
    }
    while (v43);
    v42 = *(_QWORD *)(a1 + 4672);
  }
  MEMORY[0x1CAA32FB4](v42, 8);
  sub_1C4F5D740(a1 + 4648);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 4648), 8);
  MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 4624), 8);
  v47 = *(void **)(a1 + 4544);
  if (v47 != (void *)(a1 + 4560))
    free(v47);
  sub_1C627BB10((char **)(a1 + 2480));
  sub_1C627BBA4(a1 + 64);
  llvm::Pass::~Pass((llvm::Pass *)a1);
}

void sub_1C55AB5B4(uint64_t a1)
{
  sub_1C55AB148(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C55AB5D8(uint64_t a1, uint64_t a2)
{
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)llvm::LoopInfoWrapperPass::ID);
  sub_1C4771E64(a2, a2 + 112, (uint64_t)llvm::LoopInfoWrapperPass::ID);
  sub_1C4771E64(a2, a2, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  return sub_1C4771E64(a2, a2 + 112, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
}

BOOL sub_1C55AB658(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t *v10;
  uint64_t v11;
  uint64_t *v12;
  void **v13;
  void *v14;
  char **v15;
  char *v16;
  uint64_t v17;
  _BOOL4 v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;
  uint64_t *v22;
  void (**v23)(void);
  uint64_t *v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  unsigned int v31;
  BOOL v32;
  BOOL v33;
  unsigned int v34;
  BOOL v35;
  _QWORD *v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t *v41;
  uint64_t v42;
  uint64_t v43;
  unsigned int v44;
  BOOL v45;
  uint64_t v47;
  uint64_t v48;
  unsigned int v49;
  BOOL v50;
  uint64_t v52;
  _QWORD *v53;
  uint64_t v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  uint64_t v58;
  uint64_t i;
  uint64_t *v60;
  uint64_t v61;
  uint64_t *v62;
  char *v63;
  char *v64;
  uint64_t v65;
  uint64_t *v66;
  uint64_t v67;
  int v68;
  uint64_t v69;
  uint64_t v70;
  uint64_t v71;
  uint64_t v72;
  llvm::BasicBlock *LoopLatch;
  llvm::BasicBlock *v74;
  llvm::LLVMContext *v75;
  uint64_t *v76;
  BOOL v77;
  int v78;
  uint64_t *v79;
  uint64_t *jj;
  uint64_t v81;
  uint64_t *v82;
  uint64_t v83;
  uint64_t v84;
  unsigned int v85;
  uint64_t v86;
  llvm::ReturnInst *v87;
  uint64_t v88;
  uint64_t v89;
  uint64_t v90;
  uint64_t v91;
  llvm::BasicBlock **v92;
  llvm::BasicBlock *v93;
  int v94;
  int v95;
  llvm::BasicBlock *v96;
  uint64_t v97;
  char *v98;
  uint64_t v99;
  uint64_t v100;
  unsigned int v101;
  _QWORD *v102;
  uint64_t *v103;
  uint64_t v104;
  const llvm::APInt *v105;
  _QWORD *v106;
  unsigned __int8 *v107;
  llvm::ValueAsMetadata *v108;
  uint64_t v109;
  llvm::Value *v110;
  _DWORD *v111;
  uint64_t v112;
  llvm::Value *v113;
  _QWORD *v114;
  uint64_t v115;
  _QWORD *v116;
  _DWORD *v117;
  llvm::Type *v118;
  uint64_t v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int v122;
  uint64_t v123;
  llvm::UndefValue **v125;
  llvm::UndefValue *v126;
  llvm::PHINode **v127;
  llvm::PHINode **v128;
  uint64_t v129;
  _QWORD *v130;
  unsigned int v131;
  int v132;
  uint64_t v133;
  unsigned int v134;
  uint64_t v135;
  void *v136;
  int v137;
  int v138;
  uint64_t v139;
  uint64_t v140;
  char *v141;
  uint64_t v142;
  unint64_t v143;
  llvm::ConstantInt *v144;
  uint64_t ***v145;
  uint64_t *v146;
  uint64_t v147;
  unsigned int v148;
  uint64_t v149;
  uint64_t v150;
  uint64_t v151;
  uint64_t ****v152;
  uint64_t ***v153;
  int v154;
  int v155;
  uint64_t ***v156;
  uint64_t v157;
  char *v158;
  uint64_t v159;
  llvm::PHINode *v160;
  uint64_t v161;
  unsigned int v162;
  _QWORD *v163;
  uint64_t *v164;
  uint64_t v165;
  uint64_t ***v166;
  uint64_t v167;
  uint64_t v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t ****v171;
  uint64_t ***v172;
  int v173;
  int v174;
  uint64_t ***v175;
  uint64_t v176;
  char *v177;
  uint64_t v178;
  uint64_t j;
  uint64_t k;
  uint64_t v181;
  llvm::PHINode **v182;
  uint64_t v183;
  llvm::PHINode *v184;
  llvm::PHINode **v185;
  llvm::PHINode **v186;
  uint64_t v187;
  int *v188;
  llvm::Type *v189;
  int *v190;
  llvm::Type *v191;
  uint64_t v192;
  uint64_t v193;
  int *v194;
  llvm::PHINode *v195;
  llvm::UndefValue *v196;
  int *v197;
  int *v198;
  uint64_t *v199;
  unsigned int v200;
  uint64_t *v201;
  int *v202;
  int *v203;
  llvm::PHINode *v204;
  int *v205;
  _QWORD *v206;
  uint64_t v207;
  uint64_t v208;
  uint64_t v209;
  llvm::BasicBlock *v210;
  uint64_t v211;
  uint64_t v212;
  uint64_t v213;
  uint64_t v214;
  uint64_t ****v215;
  uint64_t ***v216;
  int v217;
  int v218;
  uint64_t ***v219;
  uint64_t **v220;
  char *v221;
  uint64_t **v222;
  uint64_t v223;
  unsigned int v224;
  uint64_t v225;
  _QWORD *v226;
  llvm::Value **v227;
  llvm::Value *v228;
  llvm::BasicBlock *v229;
  _DWORD *v230;
  uint64_t v231;
  llvm::BranchInst *v232;
  _QWORD *v233;
  uint64_t v234;
  uint64_t v235;
  uint64_t m;
  uint64_t v237;
  int v238;
  int v239;
  uint64_t v240;
  _QWORD *n;
  _QWORD *v242;
  int v243;
  int v244;
  _QWORD *v245;
  llvm::PHINode **v246;
  llvm::PHINode **v247;
  llvm::PHINode *v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  uint64_t v252;
  uint64_t v253;
  int v254;
  uint64_t v255;
  uint64_t *v256;
  int v257;
  uint64_t v258;
  uint64_t v259;
  unsigned int v260;
  uint64_t v261;
  uint64_t v262;
  int v263;
  int v264;
  _QWORD *ii;
  uint64_t *v266;
  int v267;
  uint64_t v268;
  uint64_t v269;
  unsigned int v270;
  uint64_t v271;
  uint64_t v272;
  int v273;
  int v274;
  _QWORD *v275;
  uint64_t **v276;
  uint64_t v277;
  uint64_t v278;
  uint64_t v279;
  uint64_t v280;
  uint64_t *v281;
  uint64_t v282;
  int v283;
  int v284;
  _QWORD *v285;
  char *v286;
  size_t v287;
  size_t v288;
  int v289;
  int v290;
  unsigned int v291;
  llvm::PHINode **v292;
  llvm::PHINode *v293;
  llvm::PHINode **v294;
  int v295;
  BOOL v296;
  unsigned int v297;
  llvm::PHINode **v298;
  llvm::Use *v299;
  llvm::Use *v300;
  uint64_t v301;
  BOOL v302;
  uint64_t *v303;
  int v304;
  uint64_t v305;
  uint64_t v306;
  unsigned int v307;
  uint64_t v308;
  uint64_t v309;
  int v310;
  int v311;
  _QWORD *v312;
  unint64_t *v313;
  uint64_t v314;
  uint64_t *v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  uint64_t v319;
  uint64_t v320;
  uint64_t v321;
  uint64_t v322;
  llvm::PHINode *v323;
  int v324;
  uint64_t v325;
  uint64_t v326;
  _DWORD *v327;
  _DWORD *v328;
  uint64_t *v329;
  int v330;
  uint64_t v331;
  uint64_t v332;
  unsigned int v333;
  uint64_t v334;
  uint64_t v335;
  int v336;
  int v337;
  uint64_t v338;
  llvm::PHINode *v339;
  int v340;
  char *v341;
  uint64_t v342;
  uint64_t v343;
  uint64_t v344;
  uint64_t v345;
  uint64_t ****v346;
  uint64_t ***v347;
  int v348;
  int v349;
  _QWORD *v350;
  uint64_t ***v351;
  uint64_t **v352;
  char *v353;
  uint64_t **v354;
  uint64_t v355;
  unsigned int v356;
  _QWORD *v357;
  _QWORD *v358;
  llvm::Value *v359;
  char *v360;
  uint64_t v361;
  _QWORD *v362;
  _QWORD *v363;
  llvm::PHINode *v364;
  uint64_t v365;
  char *v366;
  int v367;
  char *v368;
  uint64_t v369;
  uint64_t v370;
  uint64_t v371;
  llvm::ValueSymbolTable *v372;
  uint64_t v373;
  uint64_t v374;
  uint64_t v375;
  int v376;
  int v377;
  uint64_t v378;
  uint64_t v379;
  uint64_t v380;
  uint64_t v381;
  const llvm::APInt *v382;
  llvm::Value **IntegerValue;
  uint64_t *v384;
  uint64_t v385;
  uint64_t *v386;
  int v387;
  uint64_t v388;
  uint64_t *v389;
  int v390;
  uint64_t v391;
  unsigned int v392;
  uint64_t v393;
  uint64_t *v394;
  int v395;
  int v396;
  uint64_t v397;
  _QWORD *v398;
  _QWORD *v399;
  unint64_t v400;
  char v401;
  _QWORD *v402;
  _QWORD *v403;
  unint64_t v404;
  unint64_t v405;
  uint64_t v406;
  __int128 v407;
  void *v408;
  uint64_t v409;
  unint64_t v410;
  const void *v411;
  uint64_t v412;
  char *v413;
  char *v414;
  unsigned int v415;
  uint64_t *v416;
  _DWORD *v417;
  _BYTE *v418;
  uint64_t *v419;
  uint64_t v420;
  unint64_t v421;
  int v422;
  char v423;
  _DWORD *v424;
  unsigned int v425;
  uint64_t *v426;
  int v427;
  void **v428;
  void **v429;
  void *v430;
  int v431;
  unsigned int v432;
  uint64_t v433;
  unsigned int v434;
  uint64_t v435;
  void *v436;
  int v437;
  int v438;
  uint64_t v439;
  char v440;
  _BOOL4 isLoopExiting;
  uint64_t v442;
  void **v443;
  uint64_t v444;
  char v445;
  char v446;
  int v447;
  uint64_t v448;
  int v449;
  uint64_t v450;
  _QWORD *v451;
  void *v452;
  _QWORD *v453;
  int v454;
  BOOL v455;
  int v456;
  _QWORD *v457;
  unint64_t v458;
  unint64_t v459;
  uint64_t v460;
  __int128 v461;
  void *v462;
  uint64_t v463;
  unint64_t v464;
  const void *v465;
  uint64_t v466;
  uint64_t v467;
  unint64_t v468;
  unsigned int *v469;
  uint64_t v470;
  uint64_t v471;
  unint64_t v472;
  unsigned int *v473;
  unsigned int v474;
  uint64_t v475;
  unint64_t v476;
  uint64_t v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  char v481;
  uint64_t v482;
  uint64_t v483;
  uint64_t v484;
  uint64_t v485;
  int v486;
  int v487;
  unsigned int v488;
  char v489;
  unsigned int v490;
  uint64_t v491;
  uint64_t v492;
  uint64_t v493;
  int v494;
  uint64_t v495;
  uint64_t v496;
  uint64_t v497;
  unsigned int v498;
  unsigned int *v499;
  unsigned int v500;
  int v501;
  uint64_t v502;
  int v503;
  int v504;
  uint64_t *v505;
  uint64_t v506;
  uint64_t v507;
  int v508;
  uint64_t v509;
  uint64_t v510;
  uint64_t v511;
  unsigned int *v512;
  uint64_t v513;
  unsigned int v514;
  uint64_t v517;
  unint64_t v518;
  int v519;
  uint64_t v520;
  unsigned int v521;
  uint64_t v522;
  uint64_t v523;
  int v524;
  int v525;
  _QWORD *v526;
  unint64_t *v527;
  char v528;
  unint64_t *v529;
  uint64_t v530;
  uint64_t v531;
  unsigned int v532;
  unint64_t v533;
  uint64_t v534;
  unsigned int *v535;
  int v536;
  uint64_t v537;
  int v538;
  int v539;
  uint64_t *v540;
  uint64_t v541;
  int v542;
  uint64_t v543;
  int v544;
  uint64_t v545;
  uint64_t v546;
  uint64_t v547;
  unsigned int v548;
  unsigned int v549;
  uint64_t v550;
  unsigned int *v551;
  unsigned int v552;
  uint64_t v554;
  _QWORD *kk;
  unsigned int v556;
  _DWORD *v557;
  uint64_t v558;
  unint64_t v559;
  uint64_t v560;
  uint64_t v561;
  uint64_t v562;
  int v563;
  uint64_t v564;
  uint64_t v565;
  BOOL v566;
  unsigned int *v567;
  unsigned int v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  unint64_t v572;
  unsigned int v573;
  uint64_t v574;
  unint64_t v575;
  unint64_t v576;
  uint64_t v577;
  _QWORD *v578;
  int v579;
  uint64_t v580;
  unsigned int v581;
  unsigned int v582;
  unint64_t v583;
  uint64_t v584;
  int v585;
  unint64_t v586;
  uint64_t v587;
  unint64_t v588;
  unint64_t v589;
  int *v590;
  int v591;
  uint64_t v592;
  uint64_t *v593;
  unsigned int v594;
  uint64_t v595;
  char *v596;
  unsigned int *v597;
  uint64_t v598;
  uint64_t v599;
  uint64_t v600;
  unsigned int v601;
  uint64_t v602;
  unint64_t v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  _QWORD *v607;
  int v608;
  uint64_t v609;
  _DWORD *v610;
  _DWORD *v611;
  int v612;
  uint64_t v613;
  unsigned int v614;
  unsigned int *v615;
  unsigned int v616;
  uint64_t v617;
  int v618;
  _DWORD *v619;
  unint64_t v620;
  unint64_t v621;
  uint64_t v622;
  unint64_t v623;
  int v625;
  int v626;
  uint64_t v627;
  int v628;
  int v629;
  _QWORD *v630;
  uint64_t v631;
  _QWORD *v632;
  int v633;
  uint64_t v634;
  uint64_t v635;
  unsigned int mm;
  unint64_t v638;
  unint64_t v639;
  unint64_t v640;
  unint64_t v641;
  uint64_t v643;
  uint64_t v644;
  unint64_t v645;
  uint64_t v646;
  uint64_t v647;
  uint64_t *v648;
  uint64_t v649;
  uint64_t v650;
  uint64_t v651;
  uint64_t v652;
  uint64_t v653;
  uint64_t *v654;
  uint64_t *v655;
  void (**v656)(void);
  int v657;
  uint64_t v658;
  uint64_t v659;
  uint64_t v660;
  uint64_t v661;
  void *v662;
  void *v663;
  unsigned int v664;
  _QWORD *v665;
  uint64_t v666;
  _QWORD *v667;
  _QWORD *v668;
  unsigned int v669;
  _DWORD *v670;
  uint64_t v671;
  _QWORD *v672;
  _QWORD *v673;
  _QWORD *v674;
  uint64_t v675;
  uint64_t v676;
  uint64_t v677;
  void *v678;
  unsigned int v679;
  int v680;
  int v681;
  _QWORD *v682;
  uint64_t v683;
  unsigned int v684;
  unsigned int v685;
  uint64_t v686;
  _QWORD *v687;
  int v688;
  _QWORD *v689;
  unint64_t v690;
  unint64_t v691;
  _QWORD *v692;
  uint64_t v693;
  uint64_t v694;
  uint64_t v695;
  unsigned int v696;
  int v697;
  unsigned int v698;
  uint64_t v699;
  _QWORD *v700;
  _QWORD *v701;
  uint64_t v702;
  _QWORD *v703;
  _QWORD *v704;
  uint64_t *v705;
  uint64_t *v706;
  uint64_t *v707;
  unsigned int v708;
  char *v709;
  llvm::Constant ***v710;
  llvm::BasicBlock *v711;
  uint64_t *v712;
  unsigned int v713;
  uint64_t v714;
  _BOOL4 v715;
  _BYTE *v716;
  uint64_t v717;
  uint64_t ***v718;
  uint64_t v719;
  char *v720;
  uint64_t v721;
  uint64_t v722;
  uint64_t v723;
  uint64_t v724;
  uint64_t v725;
  uint64_t v726;
  _DWORD *v727;
  uint64_t v728;
  uint64_t v729;
  int64x2_t v730;
  uint64_t v731;
  uint64_t v732;
  char *v733;
  uint64_t *v734;
  unsigned int v735;
  unsigned int v736;
  uint64_t *v737;
  unsigned int *v738;
  uint64_t v739;
  void **v740;
  unint64_t v741;
  uint64_t v742;
  uint64_t v743;
  unsigned int v744;
  void *v745;
  uint64_t *v746;
  int v747;
  uint64_t v748;
  __int128 v749;
  __int128 v750;
  __int128 v751;
  llvm::PHINode *v752;
  uint64_t v753;
  llvm::PHINode *v754;
  uint64_t v755;
  _QWORD v756[3];
  _QWORD *v757;
  _QWORD v758[3];
  _QWORD *v759;
  void *v760;
  uint64_t v761;
  _BYTE v762[128];
  void *v763;
  uint64_t v764;
  _BYTE v765[512];
  void *v766;
  uint64_t v767;
  void *v768;
  void *v769;
  uint64_t v770;
  _BYTE v771[992];
  void *v772;
  int64x2_t v773;
  int64x2_t v774;
  _OWORD v775[2];
  void *v776;
  uint64_t v777;
  _BYTE v778[56];
  int v779;
  int v780;
  uint64_t v781;
  uint64_t v782;
  uint64_t v783;
  _QWORD **v784;
  _QWORD *v785;
  uint64_t v786;
  int v787;
  uint64_t v788;
  uint64_t v789;
  unsigned int v790;
  uint64_t v791;
  _QWORD *v792;
  uint64_t v793;
  _BYTE v794[32];
  _QWORD *v795;
  uint64_t v796;
  _BYTE v797[32];
  uint64_t v798;
  _QWORD *v799;
  unsigned int v800;
  llvm::PHINode **v801;
  uint64_t v802;
  _QWORD v803[19];

  v4 = MEMORY[0x1E0C80A78](a1, a2, a3, a4);
  v803[16] = *MEMORY[0x1E0C80C00];
  if (byte_1ED807218)
    return 0;
  v7 = v5;
  v8 = v4;
  v9 = *(_QWORD *)(v4 + 5416);
  if (v9)
  {
    if (((*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v9 + 48))(v9, v5) & 1) != 0)
      return 0;
  }
  v10 = (uint64_t *)(v7 + 72);
  v11 = 2;
  v12 = (uint64_t *)(v7 + 72);
  do
  {
    v12 = (uint64_t *)v12[1];
    --v11;
  }
  while (v12 != v10);
  if (!v11)
    return 0;
  *(_QWORD *)(v8 + 32) = v7;
  *(_DWORD *)(v8 + 40) = -1;
  v13 = **(void ****)(v8 + 8);
  do
  {
    v14 = *v13;
    v13 += 2;
  }
  while (v14 != &llvm::DominatorTreeWrapperPass::ID);
  *(_QWORD *)(v8 + 48) = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v13 - 1) + 96))(*(v13 - 1), &llvm::DominatorTreeWrapperPass::ID)+ 32;
  v15 = **(char ****)(v8 + 8);
  do
  {
    v16 = *v15;
    v15 += 2;
  }
  while (v16 != llvm::LoopInfoWrapperPass::ID);
  v17 = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v15 - 1) + 96))(*(v15 - 1), llvm::LoopInfoWrapperPass::ID);
  *(_QWORD *)(v8 + 56) = v17 + 32;
  v18 = sub_1C5EA9CF8(v7, v17 + 32);
  if (!v18)
  {
    v715 = v18;
    if (byte_1ED8072D8)
    {
      LOBYTE(v19) = 1;
    }
    else
    {
      v19 = *(_QWORD *)(v8 + 5448);
      if (v19)
        LOBYTE(v19) = (*(uint64_t (**)(uint64_t, uint64_t))(*(_QWORD *)v19 + 48))(v19, v7);
    }
    v716 = (_BYTE *)(v8 + 5456);
    *(_BYTE *)(v8 + 5456) = v19;
    v761 = 0x1000000000;
    v20 = *(_QWORD *)(v8 + 56);
    v21 = *(uint64_t **)(v20 + 24);
    v22 = *(uint64_t **)(v20 + 32);
    v758[0] = &off_1E81703C0;
    v758[1] = &v760;
    v759 = v758;
    v760 = v762;
    sub_1C55AF96C(v21, v22, (uint64_t)v758);
    if (v759 == v758)
    {
      v23 = (void (**)(void))(v758[0] + 32);
    }
    else
    {
      if (!v759)
      {
LABEL_22:
        v748 = v8;
        v717 = v7;
        if (*v716 && (_DWORD)v761)
        {
          v24 = (uint64_t *)v760;
          v733 = (char *)v760 + 8 * v761;
          v730 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
          do
          {
            v737 = v24;
            v25 = *v24;
            v781 = (uint64_t)&v783;
            v782 = 0x800000000;
            llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitBlocks((_QWORD *)v25, (uint64_t)&v781);
            v772 = (void *)1;
            v773 = v730;
            v774 = v730;
            v775[0] = v730;
            v775[1] = v730;
            v776 = v778;
            v777 = 0x800000000;
            sub_1C627BE14(&v772, (uint64_t *)v781, (uint64_t *)(v781 + 8 * v782));
            v26 = (char *)v776;
            if (!(_DWORD)v777)
              goto LABEL_88;
            v27 = (char *)v776 + 8 * v777;
            do
            {
              v28 = *(_QWORD *)v26;
              v29 = *(_QWORD *)(*(_QWORD *)v26 + 8);
              if (!v29)
                goto LABEL_86;
              while (1)
              {
                v30 = *(_QWORD *)(v29 + 24);
                v31 = *(unsigned __int8 *)(v30 + 16);
                v32 = v30 && v31 >= 0x1C;
                v33 = !v32 || v31 - 29 > 0xA;
                if (!v33)
                  break;
                v29 = *(_QWORD *)(v29 + 8);
                if (!v29)
                  goto LABEL_86;
              }
LABEL_46:
              v37 = sub_1C477672C(v25 + 56, *(_QWORD *)(v30 + 40));
              v38 = *(_QWORD *)(v25 + 64);
              v39 = 72;
              if (v38 == *(_QWORD *)(v25 + 56))
                v39 = 76;
              if (v37 == (_QWORD *)(v38 + 8 * *(unsigned int *)(v25 + v39)))
              {
                v40 = *(_QWORD *)(v8 + 56);
                v788 = &v790;
                v789 = 0x800000000;
                v41 = (uint64_t *)&v790;
                v42 = *(_QWORD *)(v28 + 8);
                if (v42)
                {
                  while (1)
                  {
                    v43 = *(_QWORD *)(v42 + 24);
                    v44 = *(unsigned __int8 *)(v43 + 16);
                    v45 = v43 && v44 >= 0x1C;
                    if (v45 && v44 - 29 <= 0xA)
                      break;
                    v42 = *(_QWORD *)(v42 + 8);
                    if (!v42)
                    {
                      v47 = 0;
                      v41 = (uint64_t *)&v790;
                      goto LABEL_83;
                    }
                  }
LABEL_72:
                  v52 = *(_QWORD *)(v43 + 40);
                  v53 = sub_1C477672C(v25 + 56, v52);
                  v54 = *(_QWORD *)(v25 + 64);
                  v55 = 72;
                  if (v54 == *(_QWORD *)(v25 + 56))
                    v55 = 76;
                  if (v53 != (_QWORD *)(v54 + 8 * *(unsigned int *)(v25 + v55)))
                  {
                    v56 = *(_QWORD *)(v52 + 40);
                    if (v56)
                      v57 = v56 - 24;
                    else
                      v57 = 0;
                    if (*(unsigned __int8 *)(v57 + 16) - 29 >= 0xB)
                      v57 = 0;
                    if (*(_BYTE *)(v57 + 16) != 32)
                    {
                      v48 = v789;
                      if (v789 >= (unint64_t)HIDWORD(v789))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v788, (uint64_t)&v790, v789 + 1, 8);
                        v48 = v789;
                      }
                      *((_QWORD *)v788 + v48) = v52;
                      LODWORD(v789) = v789 + 1;
                      goto LABEL_64;
                    }
                    goto LABEL_84;
                  }
LABEL_64:
                  while (1)
                  {
                    v42 = *(_QWORD *)(v42 + 8);
                    if (!v42)
                      break;
                    v43 = *(_QWORD *)(v42 + 24);
                    v49 = *(unsigned __int8 *)(v43 + 16);
                    if (v43)
                      v50 = v49 >= 0x1C;
                    else
                      v50 = 0;
                    if (v50 && v49 - 29 < 0xB)
                      goto LABEL_72;
                  }
                  v41 = (uint64_t *)v788;
                  v47 = v789;
                }
                else
                {
                  v47 = 0;
                }
LABEL_83:
                sub_1C5EBE3AC((uint64_t **)v28, v41, v47, ".loopexit", 0, 0, v40, 0, 0);
LABEL_84:
                if (v788 != &v790)
                  free(v788);
                goto LABEL_86;
              }
              while (1)
              {
                v29 = *(_QWORD *)(v29 + 8);
                if (!v29)
                  break;
                v30 = *(_QWORD *)(v29 + 24);
                v34 = *(unsigned __int8 *)(v30 + 16);
                if (v30)
                  v35 = v34 >= 0x1C;
                else
                  v35 = 0;
                if (v35 && v34 - 29 <= 0xA)
                  goto LABEL_46;
              }
LABEL_86:
              v26 += 8;
            }
            while (v26 != v27);
            v26 = (char *)v776;
LABEL_88:
            if (v26 != v778)
              free(v26);
            if ((v772 & 1) == 0)
              MEMORY[0x1CAA32FB4](v773.i64[0], 8);
            if ((uint64_t *)v781 != &v783)
              free((void *)v781);
            v801 = (llvm::PHINode **)v803;
            v802 = 0x800000000;
            llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitEdges(v25, (uint64_t)&v801);
            v58 = v802;
            if ((_DWORD)v802)
            {
              if (v802 == 1)
                goto LABEL_185;
              v798 = 1;
              for (i = 8; i != 72; i += 16)
                *(uint64_t *)((char *)&v798 + i) = -4096;
              v795 = v797;
              v796 = 0x400000000;
              v792 = v794;
              v793 = 0x400000000;
              v60 = *(uint64_t **)(v8 + 56);
              v61 = 8;
              v772 = (void *)1;
              do
              {
                *(void **)((char *)&v772 + v61) = (void *)-4096;
                v61 += 16;
              }
              while (v61 != 72);
              v776 = v778;
              v777 = 0x400000000;
              v62 = (uint64_t *)v25;
              if (v25)
              {
                do
                {
                  v788 = (void *)*v62;
                  sub_1C627BEC4((uint64_t)&v772, (uint64_t *)&v788);
                  v62 = (uint64_t *)*v62;
                }
                while (v62);
                v58 = v802;
              }
              if (!v58)
              {
LABEL_104:
                if ((_DWORD)v777)
                {
                  v63 = (char *)v776;
                  v64 = (char *)v776 + 56 * v777;
                  do
                  {
                    v65 = *((unsigned int *)v63 + 4);
                    if ((_DWORD)v65)
                    {
                      v66 = (uint64_t *)*((_QWORD *)v63 + 1);
                      v67 = 8 * v65;
                      do
                      {
                        v788 = 0;
                        v788 = (void *)*v66;
                        v68 = v796;
                        *((_DWORD *)sub_1C627C418(&v798, (uint64_t *)&v788) + 2) = v68;
                        v69 = (uint64_t)v788;
                        v70 = v796;
                        if (v796 >= (unint64_t)HIDWORD(v796))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v795, (uint64_t)v797, v796 + 1, 8);
                          v70 = v796;
                        }
                        v795[v70] = v69;
                        LODWORD(v796) = v796 + 1;
                        v71 = *(_QWORD *)v63;
                        v72 = v793;
                        if (v793 >= (unint64_t)HIDWORD(v793))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v792, (uint64_t)v794, v793 + 1, 8);
                          v72 = v793;
                        }
                        v792[v72] = v71;
                        LODWORD(v793) = v793 + 1;
                        ++v66;
                        v67 -= 8;
                      }
                      while (v67);
                    }
                    v63 += 56;
                  }
                  while (v63 != v64);
                }
                sub_1C627C47C((char **)&v776);
                if ((v772 & 1) == 0)
                  MEMORY[0x1CAA32FB4](v773.i64[0], 8);
                if ((v798 & 0xFFFFFFFE) == 2)
                {
LABEL_117:
                  if (v792 != (_QWORD *)v794)
                    free(v792);
                  if (v795 != (_QWORD *)v797)
                    free(v795);
                  if ((v798 & 1) == 0)
                    MEMORY[0x1CAA32FB4](v799, 8);
                  goto LABEL_185;
                }
                v145 = **(uint64_t *****)(v25 + 32);
                v146 = **v145;
                v147 = *v146;
                v148 = v145 >> 4;
                v718 = v145;
                if ((*((_BYTE *)v145 + 23) & 0x10) != 0)
                {
                  v149 = *(_QWORD *)(v147 + 152);
                  v150 = *(unsigned int *)(v147 + 168);
                  if (!(_DWORD)v150)
                    goto LABEL_222;
                  LODWORD(v151) = (v150 - 1) & (v148 ^ (v145 >> 9));
                  v152 = (uint64_t ****)(v149 + 16 * v151);
                  v153 = *v152;
                  if (*v152 != v145)
                  {
                    v154 = 1;
                    while (v153 != (uint64_t ***)-4096)
                    {
                      v155 = v151 + v154++;
                      v151 = v155 & (v150 - 1);
                      v153 = *(uint64_t ****)(v149 + 16 * v151);
                      if (v153 == v145)
                      {
                        v152 = (uint64_t ****)(v149 + 16 * v151);
                        goto LABEL_223;
                      }
                    }
LABEL_222:
                    v152 = (uint64_t ****)(v149 + 16 * v150);
                  }
LABEL_223:
                  v156 = v152[1];
                  v159 = (uint64_t)*v156;
                  v158 = (char *)(v156 + 2);
                  v157 = v159;
                }
                else
                {
                  v157 = 0;
                  v158 = &byte_1C871356D;
                }
                v160 = v801[1];
                v774.i16[4] = 773;
                v772 = v158;
                v773.i64[0] = v157;
                v773.i64[1] = (uint64_t)"Exit";
                v161 = operator new();
                v707 = v146;
                *(_QWORD *)v161 = *v146 + 1600;
                *(_QWORD *)(v161 + 8) = 0;
                v162 = *(_DWORD *)(v161 + 20) & 0xC0000000;
                *(_DWORD *)(v161 + 16) = 22;
                *(_DWORD *)(v161 + 20) = v162;
                *(_QWORD *)(v161 + 24) = 0;
                v163 = (_QWORD *)(v161 + 24);
                *(_QWORD *)(v161 + 32) = 0;
                *(_QWORD *)(v161 + 40) = v161 + 40;
                *(_QWORD *)(v161 + 48) = v161 + 40;
                *(_QWORD *)(v161 + 56) = 0;
                if (v160)
                  v164 = (uint64_t *)((char *)v160 + 24);
                else
                  v164 = v10;
                llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)v10, (_QWORD *)v161);
                v165 = *v164;
                *(_QWORD *)(v161 + 32) = v164;
                *v163 = v165;
                *(_QWORD *)(v165 + 8) = v163;
                v706 = v164;
                *v164 = (uint64_t)v163;
                v711 = (llvm::BasicBlock *)v161;
                llvm::Value::setName((uint64_t ***)v161, (uint64_t)&v772);
                if (*v792)
                  llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::addBasicBlockToLoop((_QWORD *)*v792, v161, *(_QWORD *)(v8 + 56));
                v166 = v718;
                if ((*((_BYTE *)v718 + 23) & 0x10) != 0)
                {
                  v167 = ***v718;
                  v168 = *(_QWORD *)(v167 + 152);
                  v169 = *(unsigned int *)(v167 + 168);
                  if (!(_DWORD)v169)
                    goto LABEL_236;
                  LODWORD(v170) = (v169 - 1) & (v148 ^ (v718 >> 9));
                  v171 = (uint64_t ****)(v168 + 16 * v170);
                  v172 = *v171;
                  if (*v171 != v718)
                  {
                    v173 = 1;
                    while (v172 != (uint64_t ***)-4096)
                    {
                      v174 = v170 + v173++;
                      v170 = v174 & (v169 - 1);
                      v172 = *(uint64_t ****)(v168 + 16 * v170);
                      if (v172 == v718)
                      {
                        v171 = (uint64_t ****)(v168 + 16 * v170);
                        goto LABEL_237;
                      }
                    }
LABEL_236:
                    v171 = (uint64_t ****)(v168 + 16 * v169);
                  }
LABEL_237:
                  v175 = v171[1];
                  v178 = (uint64_t)*v175;
                  v177 = (char *)(v175 + 2);
                  v176 = v178;
                }
                else
                {
                  v176 = 0;
                  v177 = &byte_1C871356D;
                }
                v774.i16[4] = 773;
                v772 = v177;
                v773.i64[0] = v176;
                v773.i64[1] = (uint64_t)"ExitPhi";
                v710 = (llvm::Constant ***)(v147 + 1960);
                v720 = sub_1C50B1024(v147 + 1960, v798 >> 1, (uint64_t)&v772, v161);
                v788 = (void *)1;
                for (j = 8; j != 1032; j += 16)
                  *(void **)((char *)&v788 + j) = (void *)-4096;
                v781 = 1;
                for (k = 8; k != 1032; k += 16)
                  *(uint64_t *)((char *)&v781 + k) = -4096;
                v708 = v148;
                v772 = &v773.u64[1];
                v773.i64[0] = 0x4000000000;
                v181 = 8;
                v766 = (void *)1;
                do
                {
                  *(void **)((char *)&v766 + v181) = (void *)-4096;
                  v181 += 16;
                }
                while (v181 != 1032);
                v763 = v765;
                v764 = 0x4000000000;
                if (!(_DWORD)v802)
                  goto LABEL_248;
                v182 = v801;
                v183 = 16 * v802;
                do
                {
                  v184 = *v182;
                  v182 += 2;
                  v754 = v184;
                  v755 = 0;
                  sub_1C627C4F0((uint64_t)&v781, &v754, &v755, (uint64_t)&v749);
                  v183 -= 16;
                }
                while (v183);
                if (!(_DWORD)v802)
                  goto LABEL_248;
                v315 = (uint64_t *)v801;
                v709 = (char *)&v801[2 * v802];
                v713 = v148 ^ (v718 >> 9);
                v705 = (uint64_t *)(v720 + 24);
LABEL_415:
                v753 = 0;
                v316 = *v315;
                v317 = v315[1];
                v712 = v315;
                v753 = *v315;
                v318 = *(_QWORD *)(v317 + 48);
                v319 = v318;
                if (v318 == v317 + 40)
                {
LABEL_421:
                  v320 = 0;
                }
                else
                {
                  while (1)
                  {
                    v320 = v319 - 24;
                    v321 = v319 ? v319 - 24 : 0;
                    if (*(_BYTE *)(v321 + 16) != 83)
                      break;
                    v319 = *(_QWORD *)(v319 + 8);
                    if (v319 == v317 + 40)
                      goto LABEL_421;
                  }
                }
                if (v320)
                  v322 = v320 + 24;
                else
                  v322 = 0;
                if (v318 == v322)
                  goto LABEL_479;
                while (2)
                {
                  v323 = (llvm::PHINode *)(v318 - 24);
                  if (!v318)
                    v323 = 0;
                  v752 = v323;
                  v324 = *((_DWORD *)v323 + 5);
                  v325 = v324 & 0x7FFFFFF;
                  if ((v324 & 0x7FFFFFF) != 0)
                  {
                    v326 = 0;
                    while (1)
                    {
                      v327 = (_DWORD *)((char *)v323 - 32 * v325);
                      if ((v324 & 0x40000000) != 0)
                        v327 = (_DWORD *)*((_QWORD *)v323 - 1);
                      if (*(_QWORD *)&v327[8 * *((unsigned int *)v323 + 15) + 2 * v326] == v753)
                        break;
                      if (v325 == ++v326)
                        goto LABEL_434;
                    }
                  }
                  else
                  {
LABEL_434:
                    LODWORD(v326) = -1;
                  }
                  if ((v324 & 0x40000000) != 0)
                    v328 = (_DWORD *)*((_QWORD *)v323 - 1);
                  else
                    v328 = (_DWORD *)((char *)v323 - 32 * v325);
                  v329 = *(uint64_t **)(v748 + 56);
                  v330 = *((_DWORD *)v329 + 4);
                  if (v330)
                  {
                    v331 = *(_QWORD *)&v328[8 * *((unsigned int *)v323 + 15) + 2 * v326];
                    v332 = *v329;
                    v333 = v330 - 1;
                    v334 = ((v331 >> 4) ^ (v331 >> 9)) & (v330 - 1);
                    v335 = *(_QWORD *)(v332 + 16 * v334);
                    if (v331 != v335)
                    {
                      v336 = 1;
                      while (v335 != -4096)
                      {
                        v337 = v334 + v336++;
                        v334 = v337 & v333;
                        v335 = *(_QWORD *)(v332 + 16 * v334);
                        if (v331 == v335)
                          goto LABEL_443;
                      }
                      goto LABEL_444;
                    }
LABEL_443:
                    v338 = *(_QWORD *)(v332 + 16 * v334 + 8);
                  }
                  else
                  {
LABEL_444:
                    v338 = 0;
                  }
                  if (v338 != v25)
                  {
LABEL_446:
                    v318 = *(_QWORD *)(v318 + 8);
                    if (v318 != v322)
                      continue;
                    v316 = v753;
LABEL_479:
                    v373 = *(_QWORD *)(v316 + 40);
                    if (v373 == v316 + 40)
                    {
                      v374 = 0;
                    }
                    else
                    {
                      v375 = v373 - 24;
                      if (!v373)
                        v375 = 0;
                      if (*(unsigned __int8 *)(v375 + 16) - 29 >= 0xB)
                        v374 = 0;
                      else
                        v374 = v375;
                    }
                    v376 = *(unsigned __int8 *)(v374 + 16);
                    if (v376 != 30)
                      __asm { BR              X10 }
                    if ((*(_DWORD *)(v374 + 20) & 0x7FFFFFF) == 3)
                      v377 = 2;
                    else
                      v377 = 1;
                    v378 = 0;
                    v379 = 0;
                    v380 = v374 - 64;
                    while (*(_QWORD *)(v374 - 32 - 32 * v379) != v317)
                    {
                      ++v379;
                      v378 += 2;
                      v380 += 32;
                      if (v377 == v379)
                        goto LABEL_495;
                    }
                    llvm::Instruction::setSuccessor((llvm::Instruction *)v374, v379, v711);
LABEL_495:
                    v381 = *(unsigned int *)(sub_1C627BD20((uint64_t)&v798, v317) + 8);
                    DWORD2(v749) = 32;
                    *(_QWORD *)&v749 = v381;
                    IntegerValue = llvm::Constant::getIntegerValue(v710, (llvm::Type *)&v749, v382);
                    sub_1C477667C((llvm::PHINode *)v720, (uint64_t)IntegerValue, v753);
                    if (DWORD2(v749) >= 0x41 && (_QWORD)v749)
                      MEMORY[0x1CAA32F9C](v749, 0x1000C8000313F17);
                    v315 = v712 + 2;
                    if (v712 + 2 != (uint64_t *)v709)
                      goto LABEL_415;
LABEL_248:
                    if ((_DWORD)v764)
                    {
                      v185 = (llvm::PHINode **)v763;
                      v186 = (llvm::PHINode **)((char *)v763 + 8 * v764);
                      do
                      {
                        v187 = sub_1C627C7EC(&v766, v185)[1];
                        v188 = sub_1C627BD9C((int *)v187);
                        v190 = v188;
                        v191 = v189;
                        v192 = v187 + 8;
                        if ((*(_BYTE *)v187 & 1) != 0)
                        {
                          v193 = 64;
                        }
                        else
                        {
                          v192 = *(_QWORD *)(v187 + 8);
                          v193 = *(unsigned int *)(v187 + 16);
                        }
                        v194 = (int *)(v192 + 16 * v193);
                        if (v194 != v188)
                        {
                          do
                          {
                            if (!*((_BYTE *)v190 + 8))
                            {
                              v195 = *v185;
                              v196 = llvm::UndefValue::get(*(llvm::UndefValue **)*v185, v189);
                              sub_1C477667C(v195, (uint64_t)v196, *(_QWORD *)v190);
                            }
                            while (1)
                            {
                              v190 += 4;
                              if (v190 == (int *)v191)
                                break;
                              if ((*(_QWORD *)v190 | 0x1000) != 0xFFFFFFFFFFFFF000)
                                goto LABEL_260;
                            }
                            v190 = (int *)v191;
LABEL_260:
                            ;
                          }
                          while (v190 != v194);
                        }
                        ++v185;
                      }
                      while (v185 != v186);
                    }
                    v197 = sub_1C627BD9C((int *)&v788);
                    v199 = &v789;
                    if ((v788 & 1) == 0)
                      v199 = (uint64_t *)v789;
                    v200 = v790;
                    if ((v788 & 1) != 0)
                      v200 = 64;
                    v201 = &v199[2 * v200];
                    if (v201 != (uint64_t *)v197)
                    {
                      v202 = v197;
                      v203 = v198;
                      do
                      {
                        v205 = v202 + 4;
                        v204 = *(llvm::PHINode **)v202;
                        v206 = sub_1C627C7EC((uint64_t *)&v788, v202);
                        sub_1C477667C(v204, v206[1], (uint64_t)v711);
                        if (v205 == v203)
                        {
                          v202 = v203;
                          v166 = v718;
                        }
                        else
                        {
                          v202 = v205;
                          v166 = v718;
                          while ((*(_QWORD *)v202 | 0x1000) == 0xFFFFFFFFFFFFF000)
                          {
                            v202 += 4;
                            if (v202 == v203)
                            {
                              v202 = v203;
                              break;
                            }
                          }
                        }
                      }
                      while (v202 != (int *)v201);
                    }
                    v207 = (v798 >> 1) - 1;
                    if (v798 >> 1 != 1)
                    {
                      v208 = 0;
                      v209 = (v798 >> 1) - 2;
                      while (1)
                      {
                        v210 = v711;
                        if (v208 != v209)
                          break;
                        v711 = (llvm::BasicBlock *)v795[v209 + 1];
LABEL_290:
                        v227 = llvm::ConstantInt::get((llvm::ConstantInt *)v710, v208, 0);
                        *(_QWORD *)&v749 = "IdxCmp";
                        LOWORD(v751) = 259;
                        v228 = (llvm::Value *)llvm::CmpInst::Create(53, 32, (_DWORD **)v720, (uint64_t)v227, (uint64_t)&v749, (uint64_t)v210);
                        v229 = (llvm::BasicBlock *)v795[v208];
                        v230 = operator new(0xA0uLL);
                        v231 = 0;
                        v232 = (llvm::BranchInst *)(v230 + 24);
                        v230[29] = v230[29] & 0x38000000 | 3;
                        do
                        {
                          v233 = &v230[v231];
                          *v233 = 0;
                          v233[1] = 0;
                          v233[2] = 0;
                          v233[3] = v232;
                          v231 += 8;
                        }
                        while (v231 != 24);
                        llvm::BranchInst::BranchInst(v232, v229, v711, v228, v210);
                        v234 = v795[v208];
                        v235 = v234 + 40;
                        for (m = *(_QWORD *)(v234 + 48); m != v235; m = *(_QWORD *)(m + 8))
                        {
                          v237 = m - 24;
                          if (!m)
                            v237 = 0;
                          v238 = *(unsigned __int8 *)(v237 + 16);
                          if (v238 != 83)
                            v237 = 0;
                          if (!m || v238 != 83)
                            break;
                          v239 = *(_DWORD *)(v237 + 20);
                          if ((v239 & 0x40000000) != 0)
                            v240 = *(_QWORD *)(v237 - 8);
                          else
                            v240 = v237 - 32 * (v239 & 0x7FFFFFF);
                          *(_QWORD *)(v240 + 32 * *(unsigned int *)(v237 + 60)) = v210;
                        }
                        for (n = (_QWORD *)*((_QWORD *)v711 + 6); n != (_QWORD *)((char *)v711 + 40); n = (_QWORD *)n[1])
                        {
                          v242 = n - 3;
                          if (!n)
                            v242 = 0;
                          v243 = *((unsigned __int8 *)v242 + 16);
                          if (v243 != 83)
                            v242 = 0;
                          if (!n || v243 != 83)
                            break;
                          v244 = *((_DWORD *)v242 + 5);
                          if ((v244 & 0x40000000) != 0)
                            v245 = (_QWORD *)*(v242 - 1);
                          else
                            v245 = &v242[-4 * (v244 & 0x7FFFFFF)];
                          v245[4 * *((unsigned int *)v242 + 15)] = v210;
                        }
                        if (++v208 == v207)
                          goto LABEL_319;
                      }
                      if ((*((_BYTE *)v166 + 23) & 0x10) != 0)
                      {
                        v211 = ***v166;
                        v212 = *(_QWORD *)(v211 + 152);
                        v213 = *(unsigned int *)(v211 + 168);
                        if (!(_DWORD)v213)
                          goto LABEL_286;
                        LODWORD(v214) = (v213 - 1) & (v708 ^ (v166 >> 9));
                        v215 = (uint64_t ****)(v212 + 16 * v214);
                        v216 = *v215;
                        if (*v215 != v166)
                        {
                          v217 = 1;
                          while (v216 != (uint64_t ***)-4096)
                          {
                            v218 = v214 + v217++;
                            v214 = v218 & (v213 - 1);
                            v216 = *(uint64_t ****)(v212 + 16 * v214);
                            if (v216 == v166)
                            {
                              v215 = (uint64_t ****)(v212 + 16 * v214);
                              goto LABEL_287;
                            }
                          }
LABEL_286:
                          v215 = (uint64_t ****)(v212 + 16 * v213);
                        }
LABEL_287:
                        v219 = v215[1];
                        v222 = *v219;
                        v221 = (char *)(v219 + 2);
                        v220 = v222;
                      }
                      else
                      {
                        v220 = 0;
                        v221 = &byte_1C871356D;
                      }
                      LOWORD(v751) = 773;
                      *(_QWORD *)&v749 = v221;
                      *((_QWORD *)&v749 + 1) = v220;
                      *(_QWORD *)&v750 = "IdxExit";
                      v223 = operator new();
                      *(_QWORD *)v223 = *v707 + 1600;
                      *(_QWORD *)(v223 + 8) = 0;
                      v224 = *(_DWORD *)(v223 + 20) & 0xC0000000;
                      *(_DWORD *)(v223 + 16) = 22;
                      *(_DWORD *)(v223 + 20) = v224;
                      *(_QWORD *)(v223 + 24) = 0;
                      *(_QWORD *)(v223 + 32) = 0;
                      *(_QWORD *)(v223 + 40) = v223 + 40;
                      *(_QWORD *)(v223 + 48) = v223 + 40;
                      *(_QWORD *)(v223 + 56) = 0;
                      llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)v10, (_QWORD *)v223);
                      v225 = *v706;
                      *(_QWORD *)(v223 + 32) = v706;
                      *(_QWORD *)(v223 + 24) = v225;
                      *(_QWORD *)(v225 + 8) = v223 + 24;
                      *v706 = v223 + 24;
                      v711 = (llvm::BasicBlock *)v223;
                      llvm::Value::setName((uint64_t ***)v223, (uint64_t)&v749);
                      v226 = (_QWORD *)v792[v208 + 1];
                      if (v226)
                        llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::addBasicBlockToLoop(v226, v223, *(_QWORD *)(v748 + 56));
                      goto LABEL_290;
                    }
LABEL_319:
                    v750 = 0u;
                    v751 = 0u;
                    v749 = 0u;
                    v246 = *(llvm::PHINode ***)(v25 + 32);
                    v247 = *(llvm::PHINode ***)(v25 + 40);
                    v8 = v748;
                    if (v247 != v246)
                    {
                      while (2)
                      {
                        v248 = *v246;
                        v249 = (uint64_t)*v246 + 40;
                        v250 = *((_QWORD *)*v246 + 6);
                        if (v250 != v249)
                        {
                          while (1)
                          {
                            v251 = v250 ? v250 - 24 : 0;
                            v252 = *(_QWORD *)(v251 + 8);
                            if (v252)
                              break;
LABEL_393:
                            v250 = *(_QWORD *)(v250 + 8);
                            if (v250 == v249)
                              goto LABEL_397;
                          }
                          while (1)
                          {
                            v253 = *(_QWORD *)(v252 + 24);
                            if (!v253 || *(_BYTE *)(v253 + 16) != 83)
                              break;
                            v254 = *(_DWORD *)(v253 + 20);
                            if ((v254 & 0x40000000) != 0)
                              v255 = *(_QWORD *)(v253 - 8);
                            else
                              v255 = v253 - 32 * (v254 & 0x7FFFFFF);
                            v266 = *(uint64_t **)(v748 + 56);
                            v267 = *((_DWORD *)v266 + 4);
                            if (v267)
                            {
                              v268 = *(_QWORD *)(v255
                                               + 32 * *(unsigned int *)(v253 + 60)
                                               + 8 * ((unint64_t)(v252 - v255) >> 5));
                              v269 = *v266;
                              v270 = v267 - 1;
                              v271 = ((v268 >> 4) ^ (v268 >> 9)) & (v267 - 1);
                              v272 = *(_QWORD *)(v269 + 16 * v271);
                              if (v268 == v272)
                              {
LABEL_345:
                                v275 = *(_QWORD **)(v269 + 16 * v271 + 8);
                                goto LABEL_347;
                              }
                              v273 = 1;
                              while (v272 != -4096)
                              {
                                v274 = v271 + v273++;
                                v271 = v274 & v270;
                                v272 = *(_QWORD *)(v269 + 16 * v271);
                                if (v268 == v272)
                                  goto LABEL_345;
                              }
                            }
                            v275 = 0;
LABEL_347:
                            while (v275 != (_QWORD *)v25)
                            {
                              if (!v275)
                                goto LABEL_352;
                              v275 = (_QWORD *)*v275;
                            }
LABEL_350:
                            v252 = *(_QWORD *)(v252 + 8);
                            if (!v252)
                              goto LABEL_393;
                          }
                          v256 = *(uint64_t **)(v748 + 56);
                          v257 = *((_DWORD *)v256 + 4);
                          if (v257)
                          {
                            v258 = *(_QWORD *)(v253 + 40);
                            v259 = *v256;
                            v260 = v257 - 1;
                            v261 = ((v258 >> 4) ^ (v258 >> 9)) & (v257 - 1);
                            v262 = *(_QWORD *)(v259 + 16 * v261);
                            if (v258 == v262)
                            {
LABEL_334:
                              ii = *(_QWORD **)(v259 + 16 * v261 + 8);
                              goto LABEL_336;
                            }
                            v263 = 1;
                            while (v262 != -4096)
                            {
                              v264 = v261 + v263++;
                              v261 = v264 & v260;
                              v262 = *(_QWORD *)(v259 + 16 * v261);
                              if (v258 == v262)
                                goto LABEL_334;
                            }
                          }
                          for (ii = 0; ; ii = (_QWORD *)*ii)
                          {
LABEL_336:
                            if (ii == (_QWORD *)v25)
                              goto LABEL_350;
                            if (!ii)
                              break;
                          }
LABEL_352:
                          v276 = *(uint64_t ***)v251;
                          if ((*(_BYTE *)(v251 + 23) & 0x10) != 0)
                          {
                            v277 = **v276;
                            v278 = *(_QWORD *)(v277 + 152);
                            v279 = *(unsigned int *)(v277 + 168);
                            if (!(_DWORD)v279)
                              goto LABEL_359;
                            LODWORD(v280) = (v279 - 1) & ((v251 >> 4) ^ (v251 >> 9));
                            v281 = (uint64_t *)(v278 + 16 * v280);
                            v282 = *v281;
                            if (*v281 != v251)
                            {
                              v283 = 1;
                              while (v282 != -4096)
                              {
                                v284 = v280 + v283++;
                                v280 = v284 & (v279 - 1);
                                v282 = *(_QWORD *)(v278 + 16 * v280);
                                if (v282 == v251)
                                {
                                  v281 = (uint64_t *)(v278 + 16 * v280);
                                  goto LABEL_360;
                                }
                              }
LABEL_359:
                              v281 = (uint64_t *)(v278 + 16 * v279);
                            }
LABEL_360:
                            v285 = (_QWORD *)v281[1];
                            v288 = *v285;
                            v286 = (char *)(v285 + 2);
                            v287 = v288;
                          }
                          else
                          {
                            v287 = 0;
                            v286 = &byte_1C871356D;
                          }
                          llvm::SSAUpdater::Initialize((uint64_t)&v749, (uint64_t)v276, v286, v287);
                          v754 = v248;
                          v289 = *(_DWORD *)(v749 + 16);
                          if (v289)
                          {
                            v290 = v289 - 1;
                            v291 = (v289 - 1) & ((v248 >> 4) ^ (v248 >> 9));
                            v292 = (llvm::PHINode **)(*(_QWORD *)v749 + 16 * v291);
                            v293 = *v292;
                            if (*v292 != v248)
                            {
                              v294 = 0;
                              v295 = 1;
                              while (v293 != (llvm::PHINode *)-4096)
                              {
                                if (v294)
                                  v296 = 0;
                                else
                                  v296 = v293 == (llvm::PHINode *)-8192;
                                if (v296)
                                  v294 = v292;
                                v297 = v291 + v295++;
                                v291 = v297 & v290;
                                v292 = (llvm::PHINode **)(*(_QWORD *)v749 + 16 * (v297 & v290));
                                v293 = *v292;
                                if (*v292 == v248)
                                  goto LABEL_376;
                              }
                              if (v294)
                                v298 = v294;
                              else
                                v298 = v292;
LABEL_375:
                              v292 = (llvm::PHINode **)sub_1C4ECCA58(v749, (uint64_t)&v754, (uint64_t *)&v754, v298);
                              *v292 = v754;
                              v292[1] = 0;
                            }
LABEL_376:
                            v292[1] = (llvm::PHINode *)v251;
                            v299 = *(llvm::Use **)(v251 + 8);
                            if (v299)
                            {
                              while (1)
                              {
                                v300 = v299;
                                v301 = *((_QWORD *)v299 + 3);
                                v299 = (llvm::Use *)*((_QWORD *)v299 + 1);
                                if (v301)
                                  v302 = *(unsigned __int8 *)(v301 + 16) >= 0x1Cu;
                                else
                                  v302 = 0;
                                if (v302)
                                {
                                  v303 = *(uint64_t **)(v748 + 56);
                                  v304 = *((_DWORD *)v303 + 4);
                                  if (v304)
                                  {
                                    v305 = *(_QWORD *)(v301 + 40);
                                    v306 = *v303;
                                    v307 = v304 - 1;
                                    v308 = ((v305 >> 4) ^ (v305 >> 9)) & (v304 - 1);
                                    v309 = *(_QWORD *)(v306 + 16 * v308);
                                    if (v305 == v309)
                                    {
LABEL_387:
                                      v312 = *(_QWORD **)(v306 + 16 * v308 + 8);
                                      if (v312)
                                      {
                                        while (v312 != (_QWORD *)v25)
                                        {
                                          if (!v312)
                                            goto LABEL_391;
                                          v312 = (_QWORD *)*v312;
                                        }
                                        goto LABEL_392;
                                      }
                                    }
                                    else
                                    {
                                      v310 = 1;
                                      while (v309 != -4096)
                                      {
                                        v311 = v308 + v310++;
                                        v308 = v311 & v307;
                                        v309 = *(_QWORD *)(v306 + 16 * v308);
                                        if (v305 == v309)
                                          goto LABEL_387;
                                      }
                                    }
                                  }
LABEL_391:
                                  llvm::SSAUpdater::RewriteUse((llvm::SSAUpdater *)&v749, v300);
                                }
LABEL_392:
                                if (!v299)
                                  goto LABEL_393;
                              }
                            }
                            goto LABEL_393;
                          }
                          v298 = 0;
                          goto LABEL_375;
                        }
LABEL_397:
                        if (++v246 != v247)
                          continue;
                        break;
                      }
                    }
                    llvm::SSAUpdater::~SSAUpdater((void **)&v749);
                    if (v763 != v765)
                      free(v763);
                    if ((v766 & 1) == 0)
                      MEMORY[0x1CAA32FB4](v767, 8);
                    v313 = (unint64_t *)v772;
                    if (v773.i32[0])
                    {
                      v314 = 129 * v773.u32[0];
                      do
                      {
                        if ((v313[v314 - 129] & 1) == 0)
                          MEMORY[0x1CAA32FB4](v313[v314 - 128], 8);
                        v314 -= 129;
                      }
                      while (v314 * 8);
                      v313 = (unint64_t *)v772;
                    }
                    if (v313 != &v773.u64[1])
                      free(v313);
                    if ((v781 & 1) == 0)
                      MEMORY[0x1CAA32FB4](v782, 8);
                    if ((v788 & 1) == 0)
                      MEMORY[0x1CAA32FB4](v789, 8);
                    goto LABEL_117;
                  }
                  break;
                }
                *(_QWORD *)&v749 = v323;
                v754 = 0;
                if ((sub_1C627C5B4((uint64_t)&v788, &v749, &v754) & 1) != 0)
                {
                  *(_QWORD *)&v749 = 0;
                  v339 = (llvm::PHINode *)sub_1C627C7EC((uint64_t *)&v788, &v752)[1];
                  *(_QWORD *)&v749 = v339;
                  v340 = *((_DWORD *)v752 + 5);
                  if ((v340 & 0x40000000) != 0)
                    v341 = (char *)*((_QWORD *)v752 - 1);
                  else
                    v341 = (char *)v752 - 32 * (v340 & 0x7FFFFFF);
                  sub_1C477667C(v339, *(_QWORD *)&v341[32 * v326], v753);
                  v350 = sub_1C627C7EC(&v766, &v749);
                  *((_BYTE *)sub_1C627CB58((_DWORD *)v350[1], &v753) + 8) = 1;
LABEL_472:
                  llvm::PHINode::removeIncomingValue(v752, v326, 0);
                  goto LABEL_446;
                }
                v754 = 0;
                if ((*((_BYTE *)v166 + 23) & 0x10) != 0)
                {
                  v342 = ***v166;
                  v343 = *(_QWORD *)(v342 + 152);
                  v344 = *(unsigned int *)(v342 + 168);
                  if (!(_DWORD)v344)
                    goto LABEL_460;
                  LODWORD(v345) = (v344 - 1) & v713;
                  v346 = (uint64_t ****)(v343 + 16 * v345);
                  v347 = *v346;
                  if (*v346 != v166)
                  {
                    v348 = 1;
                    while (v347 != (uint64_t ***)-4096)
                    {
                      v349 = v345 + v348++;
                      v345 = v349 & (v344 - 1);
                      v347 = *(uint64_t ****)(v343 + 16 * v345);
                      if (v347 == v166)
                      {
                        v346 = (uint64_t ****)(v343 + 16 * v345);
                        goto LABEL_461;
                      }
                    }
LABEL_460:
                    v346 = (uint64_t ****)(v343 + 16 * v344);
                  }
LABEL_461:
                  v351 = v346[1];
                  v354 = *v351;
                  v353 = (char *)(v351 + 2);
                  v352 = v354;
                }
                else
                {
                  v352 = 0;
                  v353 = &byte_1C871356D;
                }
                v355 = *(_QWORD *)v752;
                v356 = v798;
                LOWORD(v751) = 773;
                *(_QWORD *)&v749 = v353;
                *((_QWORD *)&v749 + 1) = v352;
                *(_QWORD *)&v750 = "pnMove";
                v357 = operator new(0x48uLL);
                v358 = v357;
                v357[1] = v355;
                v359 = (llvm::Value *)(v357 + 1);
                *v357 = 0;
                v357[2] = 0;
                v357[3] = 0x4000000000000053;
                *((_OWORD *)v357 + 2) = 0u;
                v360 = (char *)(v357 + 4);
                *((_OWORD *)v357 + 3) = 0u;
                *((_DWORD *)v357 + 16) = 0;
                if (v720)
                {
                  v369 = *((_QWORD *)v720 + 5);
                  v357[6] = v369;
                  *(_WORD *)(v369 + 18) &= ~0x8000u;
                  if ((*((_BYTE *)v357 + 31) & 0x10) != 0)
                  {
                    v371 = *(_QWORD *)(v369 + 56);
                    if (v371)
                    {
                      v372 = *(llvm::ValueSymbolTable **)(v371 + 104);
                      if (v372)
                        llvm::ValueSymbolTable::reinsertValue(v372, v359);
                    }
                  }
                  v370 = *v705;
                  v358[4] = *v705;
                  v358[5] = v705;
                  *(_QWORD *)(v370 + 8) = v360;
                  *v705 = (uint64_t)v360;
                }
                *((_DWORD *)v358 + 17) = v356 >> 1;
                llvm::Value::setName((uint64_t ***)v359, (uint64_t)&v749);
                v361 = *((unsigned int *)v358 + 17);
                v362 = operator new(40 * v361);
                *v358 = v362;
                if ((_DWORD)v361)
                {
                  v363 = &v362[4 * v361];
                  do
                  {
                    *v362 = 0;
                    v362[1] = 0;
                    v362[2] = 0;
                    v362[3] = v359;
                    v362 += 4;
                  }
                  while (v362 != v363);
                }
                v754 = v359;
                sub_1C627C7EC((uint64_t *)&v788, &v752)[1] = v359;
                v364 = v754;
                v365 = v764;
                v166 = v718;
                if (v764 >= (unint64_t)HIDWORD(v764))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v763, (uint64_t)v765, v764 + 1, 8);
                  v365 = v764;
                }
                *((_QWORD *)v763 + v365) = v364;
                LODWORD(v764) = v764 + 1;
                sub_1C627BCB0((unsigned int *)&v772, (unint64_t)&v781);
                v366 = (char *)v772 + 1032 * v773.u32[0] - 1032;
                sub_1C627C7EC(&v766, &v754)[1] = v366;
                *((_BYTE *)sub_1C627CB58((_DWORD *)v772 + 258 * v773.u32[0] - 258, &v753) + 8) = 1;
                v367 = *((_DWORD *)v752 + 5);
                if ((v367 & 0x40000000) != 0)
                  v368 = (char *)*((_QWORD *)v752 - 1);
                else
                  v368 = (char *)v752 - 32 * (v367 & 0x7FFFFFF);
                sub_1C477667C(v754, *(_QWORD *)&v368[32 * v326], v753);
                goto LABEL_472;
              }
              v127 = v801;
              v128 = &v801[2 * v58];
              while (2)
              {
                v788 = v127[1];
                v129 = sub_1C627BD20((uint64_t)&v798, (uint64_t)v788);
                v130 = &v799;
                if ((v798 & 1) == 0)
                  v130 = v799;
                v131 = v800;
                if ((v798 & 1) != 0)
                  v131 = 4;
                if (&v130[2 * v131] == (_QWORD *)v129)
                {
                  v781 = 0;
                  v132 = *((_DWORD *)v60 + 4);
                  if (!v132)
                    goto LABEL_201;
                  v133 = *v60;
                  v134 = v132 - 1;
                  v135 = ((v788 >> 4) ^ (v788 >> 9)) & (v132 - 1);
                  v136 = *(void **)(*v60 + 16 * v135);
                  if (v788 == v136)
                  {
LABEL_200:
                    v139 = *(_QWORD *)(v133 + 16 * v135 + 8);
                  }
                  else
                  {
                    v137 = 1;
                    while (v136 != (void *)-4096)
                    {
                      v138 = v135 + v137++;
                      v135 = v138 & v134;
                      v136 = *(void **)(v133 + 16 * v135);
                      if (v788 == v136)
                        goto LABEL_200;
                    }
LABEL_201:
                    v139 = 0;
                  }
                  v781 = v139;
                  v140 = sub_1C627BFC8((uint64_t)&v772, &v781);
                  if ((void *)v140 == (char *)v776 + 56 * v777)
                  {
                    do
                    {
                      v781 = *(_QWORD *)v781;
                      v141 = (char *)sub_1C627BFC8((uint64_t)&v772, &v781);
                    }
                    while (v141 == (char *)v776 + 56 * v777);
                    v140 = (uint64_t)v141;
                  }
                  v142 = (uint64_t)v788;
                  v143 = *(unsigned int *)(v140 + 16);
                  if (v143 >= *(unsigned int *)(v140 + 20))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod(v140 + 8, v140 + 24, v143 + 1, 8);
                    v143 = *(unsigned int *)(v140 + 16);
                  }
                  *(_QWORD *)(*(_QWORD *)(v140 + 8) + 8 * v143) = v142;
                  ++*(_DWORD *)(v140 + 16);
                  sub_1C627C418(&v798, (uint64_t *)&v788);
                }
                v127 += 2;
                if (v127 == v128)
                  goto LABEL_104;
                continue;
              }
            }
            LoopLatch = (llvm::BasicBlock *)llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatch(v25);
            v74 = **(llvm::BasicBlock ***)(v25 + 32);
            v75 = **(llvm::LLVMContext ***)v74;
            v76 = (uint64_t *)*((_QWORD *)LoopLatch + 4);
            v77 = v76 == v10 || v76 == 0;
            v78 = v77;
            if (v77)
              v79 = 0;
            else
              v79 = v76 - 3;
            for (jj = *(uint64_t **)(v717 + 80); jj != v10; jj = (uint64_t *)jj[1])
            {
              v81 = (uint64_t)(jj - 3);
              if (jj)
                v82 = jj - 3;
              else
                v82 = 0;
              v83 = v82[5];
              if (v83)
                v84 = v83 - 24;
              else
                v84 = 0;
              if (*(unsigned __int8 *)(v84 + 16) - 29 >= 0xB)
                v84 = 0;
              if (*(_BYTE *)(v84 + 16) == 29)
                goto LABEL_145;
            }
            v772 = "Exit";
            v774.i16[4] = 259;
            v81 = operator new();
            *(_QWORD *)v81 = *(_QWORD *)v75 + 1600;
            *(_QWORD *)(v81 + 8) = 0;
            v85 = *(_DWORD *)(v81 + 20) & 0xC0000000;
            *(_DWORD *)(v81 + 16) = 22;
            *(_DWORD *)(v81 + 20) = v85;
            *(_QWORD *)(v81 + 24) = 0;
            *(_QWORD *)(v81 + 32) = 0;
            *(_QWORD *)(v81 + 40) = v81 + 40;
            *(_QWORD *)(v81 + 48) = v81 + 40;
            *(_QWORD *)(v81 + 56) = 0;
            llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)v10, (_QWORD *)v81);
            v86 = *v10;
            *(_QWORD *)(v81 + 32) = v10;
            *(_QWORD *)(v81 + 24) = v86;
            *(_QWORD *)(v86 + 8) = v81 + 24;
            *v10 = v81 + 24;
            llvm::Value::setName((uint64_t ***)v81, (uint64_t)&v772);
            v87 = (llvm::ReturnInst *)operator new(0x40uLL);
            *((_DWORD *)v87 + 5) &= 0x38000000u;
            llvm::ReturnInst::ReturnInst(v87, v75, 0, (llvm::BasicBlock *)v81);
LABEL_145:
            if ((*((_BYTE *)v74 + 23) & 0x10) != 0)
            {
              v88 = ***(_QWORD ***)v74;
              v89 = *(_QWORD *)(v88 + 152);
              v90 = *(unsigned int *)(v88 + 168);
              if (!(_DWORD)v90)
                goto LABEL_152;
              LODWORD(v91) = (v90 - 1) & ((v74 >> 4) ^ (v74 >> 9));
              v92 = (llvm::BasicBlock **)(v89 + 16 * v91);
              v93 = *v92;
              if (*v92 != v74)
              {
                v94 = 1;
                while (v93 != (llvm::BasicBlock *)-4096)
                {
                  v95 = v91 + v94++;
                  v91 = v95 & (v90 - 1);
                  v93 = *(llvm::BasicBlock **)(v89 + 16 * v91);
                  if (v93 == v74)
                  {
                    v92 = (llvm::BasicBlock **)(v89 + 16 * v91);
                    goto LABEL_153;
                  }
                }
LABEL_152:
                v92 = (llvm::BasicBlock **)(v89 + 16 * v90);
              }
LABEL_153:
              v96 = v92[1];
              v99 = *(_QWORD *)v96;
              v98 = (char *)v96 + 16;
              v97 = v99;
            }
            else
            {
              v97 = 0;
              v98 = &byte_1C871356D;
            }
            v774.i16[4] = 773;
            v772 = v98;
            v773.i64[0] = v97;
            v773.i64[1] = (uint64_t)"Exit";
            v100 = operator new();
            *(_QWORD *)v100 = *(_QWORD *)v75 + 1600;
            *(_QWORD *)(v100 + 8) = 0;
            v101 = *(_DWORD *)(v100 + 20) & 0xC0000000;
            *(_DWORD *)(v100 + 16) = 22;
            *(_DWORD *)(v100 + 20) = v101;
            *(_QWORD *)(v100 + 24) = 0;
            v102 = (_QWORD *)(v100 + 24);
            *(_QWORD *)(v100 + 32) = 0;
            *(_QWORD *)(v100 + 40) = v100 + 40;
            *(_QWORD *)(v100 + 48) = v100 + 40;
            *(_QWORD *)(v100 + 56) = 0;
            if (v78)
              v103 = v10;
            else
              v103 = v79 + 3;
            llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)v10, (_QWORD *)v100);
            v104 = *v103;
            *(_QWORD *)(v100 + 32) = v103;
            *v102 = v104;
            *(_QWORD *)(v104 + 8) = v102;
            *v103 = (uint64_t)v102;
            llvm::Value::setName((uint64_t ***)v100, (uint64_t)&v772);
            v106 = (_QWORD *)*((_QWORD *)LoopLatch + 5);
            if (v106 == (_QWORD *)((char *)LoopLatch + 40))
            {
              v108 = 0;
            }
            else
            {
              if (v106)
                v107 = (unsigned __int8 *)(v106 - 3);
              else
                v107 = 0;
              if (v107[16] - 29 >= 0xB)
                v108 = 0;
              else
                v108 = (llvm::ValueAsMetadata *)v107;
            }
            v109 = *(_QWORD *)v75;
            v110 = *(llvm::Value **)(*(_QWORD *)v75 + 1568);
            if (!v110)
            {
              v144 = *(llvm::ConstantInt **)(v109 + 1888);
              v773.i32[0] = *(_DWORD *)(v109 + 1896) >> 8;
              if (v773.i32[0] > 0x40u)
                llvm::APInt::initSlowCase((llvm::APInt *)&v772, 0, 0);
              else
                v772 = 0;
              v110 = llvm::ConstantInt::get(v144, (llvm::LLVMContext *)&v772, v105);
              if (v773.i32[0] >= 0x41u && v772)
                MEMORY[0x1CAA32F9C](v772, 0x1000C8000313F17);
              *(_QWORD *)(v109 + 1568) = v110;
            }
            v111 = operator new(0xA0uLL);
            v112 = 0;
            v113 = (llvm::Value *)(v111 + 24);
            v111[29] = v111[29] & 0x38000000 | 3;
            do
            {
              v114 = &v111[v112];
              *v114 = 0;
              v114[1] = 0;
              v114[2] = 0;
              v114[3] = v113;
              v112 += 8;
            }
            while (v112 != 24);
            llvm::BranchInst::BranchInst((llvm::BranchInst *)(v111 + 24), (llvm::BasicBlock *)v100, v74, v110, LoopLatch);
            llvm::Value::doRAUW(v108, v113, (llvm::Value *)1);
            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*((_QWORD *)v108 + 5) + 40, (uint64_t ***)v108);
            v115 = *((_QWORD *)v108 + 3);
            v116 = (_QWORD *)*((_QWORD *)v108 + 4);
            *v116 = v115;
            *(_QWORD *)(v115 + 8) = v116;
            *((_QWORD *)v108 + 3) = 0;
            *((_QWORD *)v108 + 4) = 0;
            llvm::Value::deleteValue(v108);
            v117 = operator new(0x60uLL);
            v117[13] = v117[13] & 0x38000000 | 1;
            *(_QWORD *)v117 = 0;
            *((_QWORD *)v117 + 1) = 0;
            *((_QWORD *)v117 + 2) = 0;
            *((_QWORD *)v117 + 3) = v117 + 8;
            llvm::BranchInst::BranchInst((llvm::BranchInst *)(v117 + 8), (llvm::BasicBlock *)v81, (llvm::BasicBlock *)v100);
            v119 = *(_QWORD *)(v81 + 48);
            if (v119 != v81 + 40)
            {
              v120 = *(_QWORD *)(v81 + 48);
              while (1)
              {
                v121 = v120 - 24;
                if (!v120)
                  v121 = 0;
                if (*(_BYTE *)(v121 + 16) != 83)
                  break;
                v120 = *(_QWORD *)(v120 + 8);
                if (v120 == v81 + 40)
                {
                  v120 = v81 + 40;
                  goto LABEL_184;
                }
              }
              v122 = *(unsigned __int8 *)(v120 - 8) - 38;
              v33 = v122 > 0x38;
              v123 = (1 << v122) & 0x100060000000001;
              if (!v33 && v123 != 0)
                v120 = *(_QWORD *)(v120 + 8);
LABEL_184:
              while (v119 != v120)
              {
                if (v119)
                  v125 = (llvm::UndefValue **)(v119 - 24);
                else
                  v125 = 0;
                v126 = llvm::UndefValue::get(*v125, v118);
                sub_1C477667C((llvm::PHINode *)v125, (uint64_t)v126, v100);
                v119 = *(_QWORD *)(v119 + 8);
              }
            }
LABEL_185:
            if (v801 != v803)
              free(v801);
            v24 = v737 + 1;
            v7 = v717;
          }
          while (v737 + 1 != (uint64_t *)v733);
        }
        v384 = *(uint64_t **)(v8 + 56);
        v385 = *(unsigned int *)(v8 + 72);
        v745 = (void *)(v8 + 64);
        v746 = v384;
        if (v385 >= *(_DWORD *)(v8 + 76))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v745, v8 + 80, v385 + 1, 4);
          v384 = v746;
          LODWORD(v385) = *(_DWORD *)(v8 + 72);
        }
        *(_DWORD *)(*(_QWORD *)(v8 + 64) + 4 * v385) = 0;
        ++*(_DWORD *)(v8 + 72);
        v386 = *(uint64_t **)(v7 + 80);
        if (v386 != v10)
        {
          v387 = 0;
          v742 = v8 + 408;
          v388 = v8 + 928;
          while (1)
          {
            if (v386)
              v389 = v386 - 3;
            else
              v389 = 0;
            v390 = *((_DWORD *)v384 + 4);
            if (!v390)
              goto LABEL_524;
            v391 = *v384;
            v392 = v390 - 1;
            v393 = ((v389 >> 4) ^ (v389 >> 9)) & (v390 - 1);
            v394 = *(uint64_t **)(*v384 + 16 * v393);
            if (v389 != v394)
              break;
LABEL_518:
            v397 = *(_QWORD *)(v391 + 16 * v393 + 8);
            if (!v397)
              goto LABEL_524;
            if (!*(_QWORD *)v397 && **(uint64_t ***)(v397 + 32) == v389)
            {
              v772 = v389;
              v398 = sub_1C55B5410(v742, (uint64_t *)&v772);
              v399 = v398;
              v400 = *((unsigned int *)v398 + 4);
              if (v400 >= *((unsigned int *)v398 + 5))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v398 + 1), (uint64_t)(v398 + 3), v400 + 1, 4);
                v400 = *((unsigned int *)v399 + 4);
              }
              *(_DWORD *)(v399[1] + 4 * v400) = v387;
              ++*((_DWORD *)v399 + 4);
              v772 = v745;
              v401 = 16;
              goto LABEL_527;
            }
LABEL_531:
            v386 = (uint64_t *)v386[1];
            if (v386 == v10)
              goto LABEL_546;
          }
          v395 = 1;
          while (v394 != (uint64_t *)-4096)
          {
            v396 = v393 + v395++;
            v393 = v396 & v392;
            v394 = *(uint64_t **)(v391 + 16 * v393);
            if (v389 == v394)
              goto LABEL_518;
          }
LABEL_524:
          v772 = v389;
          v402 = sub_1C55B5410(v742, (uint64_t *)&v772);
          v403 = v402;
          v404 = *((unsigned int *)v402 + 4);
          if (v404 >= *((unsigned int *)v402 + 5))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v402 + 1), (uint64_t)(v402 + 3), v404 + 1, 4);
            v404 = *((unsigned int *)v403 + 4);
          }
          *(_DWORD *)(v403[1] + 4 * v404) = v387;
          ++*((_DWORD *)v403 + 4);
          v772 = v745;
          v401 = 1;
LABEL_527:
          v773.i8[0] = v401;
          v773.i64[1] = (uint64_t)v389;
          v774.i64[0] = (uint64_t)v775;
          v774.i64[1] = 0x200000000;
          v405 = sub_1C55B56F4(v388, (unint64_t)&v772);
          v406 = *(_QWORD *)(v8 + 928) + 48 * *(unsigned int *)(v8 + 936);
          v407 = *(_OWORD *)v405;
          *(_QWORD *)(v406 + 16) = *(_QWORD *)(v405 + 16);
          *(_OWORD *)v406 = v407;
          v408 = (void *)(v406 + 40);
          *(_QWORD *)(v406 + 32) = 0x200000000;
          *(_QWORD *)(v406 + 24) = v406 + 40;
          v409 = v406 + 24;
          v410 = *(unsigned int *)(v405 + 32);
          if (!(_DWORD)v410 || v409 == v405 + 24)
          {
LABEL_528:
            ++*(_DWORD *)(v8 + 936);
            if ((_OWORD *)v774.i64[0] != v775)
              free((void *)v774.i64[0]);
            ++v387;
            v384 = v746;
            goto LABEL_531;
          }
          v411 = *(const void **)(v405 + 24);
          if (v411 != (const void *)(v405 + 40))
          {
            if (v408 != (void *)(v409 + 16))
            {
              free(v408);
              v411 = *(const void **)(v405 + 24);
              LODWORD(v410) = *(_DWORD *)(v405 + 32);
            }
            *(_QWORD *)v409 = v411;
            *(_DWORD *)(v409 + 8) = v410;
            *(_DWORD *)(v409 + 12) = *(_DWORD *)(v405 + 36);
            *(_QWORD *)(v405 + 24) = v405 + 40;
            *(_DWORD *)(v405 + 36) = 0;
            goto LABEL_539;
          }
          if (v410 >= 3)
          {
            *(_DWORD *)(v409 + 8) = 0;
            llvm::SmallVectorBase<unsigned int>::grow_pod(v409, v409 + 16, v410, 4);
            v412 = *(unsigned int *)(v405 + 32);
            if (!(_DWORD)v412)
              goto LABEL_538;
            v411 = *(const void **)(v405 + 24);
            v408 = *(void **)v409;
          }
          else
          {
            v412 = *(unsigned int *)(v405 + 32);
          }
          memcpy(v408, v411, 4 * v412);
LABEL_538:
          *(_DWORD *)(v409 + 8) = v410;
LABEL_539:
          *(_DWORD *)(v405 + 32) = 0;
          v8 = v748;
          goto LABEL_528;
        }
        v387 = 0;
LABEL_546:
        v772 = &v773.u64[1];
        v773.i64[0] = 0x500000000;
        v413 = (char *)v384[3];
        v414 = (char *)v384[4];
        v788 = &v790;
        v789 = 0x500000000;
        sub_1C499C3FC((unsigned int *)&v788, v413, v414);
        v415 = v789;
        if ((_DWORD)v789)
        {
          v416 = &v789;
          v722 = v8 + 80;
          v417 = (_DWORD *)(v8 + 144);
          v418 = (_BYTE *)(v8 + 408);
          v726 = v8 + 416;
          v740 = &v772;
          v743 = v8 + 928;
          v419 = (uint64_t *)&v788;
          v727 = (_DWORD *)(v8 + 144);
          do
          {
            v738 = (unsigned int *)v740;
            v740 = (void **)v419;
            v734 = v416;
            do
            {
              v420 = *((_QWORD *)*v740 + v415 - 1);
              *(_DWORD *)v416 = v415 - 1;
              v781 = (uint64_t)&v783;
              v782 = 0x400000000;
              llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopLatches((_QWORD **)v420, (uint64_t)&v781);
              v421 = *(unsigned int *)(v8 + 72);
              if (v421 >= *(unsigned int *)(v8 + 76))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v745, v722, v421 + 1, 4);
                v421 = *(unsigned int *)(v8 + 72);
              }
              *(_DWORD *)(*(_QWORD *)(v8 + 64) + 4 * v421) = v387;
              v422 = *(_DWORD *)(v8 + 72);
              *(_DWORD *)(v8 + 72) = v422 + 1;
              v766 = 0;
              v423 = sub_1C55B575C((uint64_t)v417, v420, &v766);
              v424 = v766;
              if ((v423 & 1) != 0)
              {
                v426 = v746;
                goto LABEL_559;
              }
              if ((*v417 & 1) != 0)
                v425 = 16;
              else
                v425 = *(_DWORD *)(v8 + 160);
              v426 = v746;
              v427 = *v417 >> 1;
              if (4 * v427 + 4 >= 3 * v425)
              {
                v425 *= 2;
LABEL_628:
                sub_1C55B5808((uint64_t)v417, v425);
                v766 = 0;
                sub_1C55B575C((uint64_t)v417, v420, &v766);
                v426 = v746;
                v424 = v766;
                goto LABEL_556;
              }
              if (v425 + ~v427 - *(_DWORD *)(v8 + 148) <= v425 >> 3)
                goto LABEL_628;
LABEL_556:
              *v417 += 2;
              if (*(_QWORD *)v424 != -4096)
                --*(_DWORD *)(v8 + 148);
              *(_QWORD *)v424 = v420;
              v424[2] = -1;
LABEL_559:
              v424[2] = v422;
              v429 = *(void ***)(v420 + 32);
              v428 = *(void ***)(v420 + 40);
              while (v429 != v428)
              {
                v430 = *v429;
                v763 = v430;
                v431 = *((_DWORD *)v426 + 4);
                v432 = v430 >> 4;
                if (v431)
                {
                  v433 = *v426;
                  v434 = v431 - 1;
                  v435 = (v432 ^ (v430 >> 9)) & (v431 - 1);
                  v436 = *(void **)(*v426 + 16 * v435);
                  if (v430 == v436)
                  {
LABEL_565:
                    v439 = *(_QWORD *)(v433 + 16 * v435 + 8);
                    goto LABEL_567;
                  }
                  v437 = 1;
                  while (v436 != (void *)-4096)
                  {
                    v438 = v435 + v437++;
                    v435 = v438 & v434;
                    v436 = *(void **)(v433 + 16 * v435);
                    if (v430 == v436)
                      goto LABEL_565;
                  }
                }
                v439 = 0;
LABEL_567:
                if (v439 == v420)
                {
                  v440 = 1;
LABEL_572:
                  isLoopExiting = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::isLoopExiting(v420, (uint64_t)v430);
                  if ((_DWORD)v782)
                  {
                    v442 = 8 * v782;
                    v443 = (void **)v781;
                    while (*v443 != v430)
                    {
                      ++v443;
                      v442 -= 8;
                      if (!v442)
                      {
                        v443 = (void **)(v781 + 8 * v782);
                        break;
                      }
                    }
                  }
                  else
                  {
                    v443 = (void **)v781;
                  }
                  v444 = (uint64_t)v443 - v781;
                  v445 = v440 | 2;
                  if (!isLoopExiting)
                    v445 = v440;
                  if (v782 == v444 >> 3)
                    v446 = v445;
                  else
                    v446 = v445 | 8;
                  if ((*v418 & 1) != 0)
                  {
                    v447 = 16;
                    v448 = v726;
LABEL_586:
                    v449 = v447 - 1;
                    v450 = v449 & (v432 ^ (v430 >> 9));
                    v451 = (_QWORD *)(v448 + 32 * v450);
                    v452 = (void *)*v451;
                    if (v430 != (void *)*v451)
                    {
                      v453 = 0;
                      v454 = 1;
                      while (v452 != (void *)-4096)
                      {
                        if (v453)
                          v455 = 0;
                        else
                          v455 = v452 == (void *)-8192;
                        if (v455)
                          v453 = v451;
                        v456 = v450 + v454++;
                        v450 = v456 & v449;
                        v451 = (_QWORD *)(v448 + 32 * v450);
                        v452 = (void *)*v451;
                        if (v430 == (void *)*v451)
                          goto LABEL_600;
                      }
                      if (v453)
                        v457 = v453;
                      else
                        v457 = v451;
                      goto LABEL_599;
                    }
                  }
                  else
                  {
                    v447 = *(_DWORD *)(v748 + 424);
                    if (v447)
                    {
                      v448 = *(_QWORD *)(v748 + 416);
                      goto LABEL_586;
                    }
                    v457 = 0;
LABEL_599:
                    v451 = sub_1C55B5580((uint64_t)v418, (uint64_t *)&v763, v457);
                    *v451 = v430;
                    v451[1] = v451 + 3;
                    v451[2] = 0x200000000;
                  }
LABEL_600:
                  v458 = *((unsigned int *)v451 + 4);
                  if (v458 >= *((unsigned int *)v451 + 5))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v451 + 1), (uint64_t)(v451 + 3), v458 + 1, 4);
                    v458 = *((unsigned int *)v451 + 4);
                    v430 = v763;
                  }
                  *(_DWORD *)(v451[1] + 4 * v458) = v387;
                  ++*((_DWORD *)v451 + 4);
                  v766 = v745;
                  LOBYTE(v767) = v446;
                  v768 = v430;
                  v769 = v771;
                  v770 = 0x200000000;
                  v459 = sub_1C55B56F4(v743, (unint64_t)&v766);
                  v8 = v748;
                  v460 = *(_QWORD *)(v748 + 928) + 48 * *(unsigned int *)(v748 + 936);
                  v461 = *(_OWORD *)v459;
                  *(_QWORD *)(v460 + 16) = *(_QWORD *)(v459 + 16);
                  *(_OWORD *)v460 = v461;
                  v462 = (void *)(v460 + 40);
                  *(_QWORD *)(v460 + 32) = 0x200000000;
                  *(_QWORD *)(v460 + 24) = v460 + 40;
                  v463 = v460 + 24;
                  v464 = *(unsigned int *)(v459 + 32);
                  if ((_DWORD)v464 && v463 != v459 + 24)
                  {
                    v465 = *(const void **)(v459 + 24);
                    if (v465 == (const void *)(v459 + 40))
                    {
                      if (v464 < 3)
                      {
                        v466 = *(unsigned int *)(v459 + 32);
                        goto LABEL_613;
                      }
                      *(_DWORD *)(v463 + 8) = 0;
                      llvm::SmallVectorBase<unsigned int>::grow_pod(v463, v463 + 16, v464, 4);
                      v466 = *(unsigned int *)(v459 + 32);
                      if ((_DWORD)v466)
                      {
                        v465 = *(const void **)(v459 + 24);
                        v462 = *(void **)v463;
LABEL_613:
                        memcpy(v462, v465, 4 * v466);
                      }
                      *(_DWORD *)(v463 + 8) = v464;
                    }
                    else
                    {
                      if (v462 != (void *)(v463 + 16))
                      {
                        free(v462);
                        v465 = *(const void **)(v459 + 24);
                        LODWORD(v464) = *(_DWORD *)(v459 + 32);
                      }
                      *(_QWORD *)v463 = v465;
                      *(_DWORD *)(v463 + 8) = v464;
                      *(_DWORD *)(v463 + 12) = *(_DWORD *)(v459 + 36);
                      *(_QWORD *)(v459 + 24) = v459 + 40;
                      *(_DWORD *)(v459 + 36) = 0;
                    }
                    *(_DWORD *)(v459 + 32) = 0;
                    v8 = v748;
                  }
                  ++*(_DWORD *)(v8 + 936);
                  if (v769 != v771)
                    free(v769);
                  ++v387;
                  v426 = v746;
                  goto LABEL_606;
                }
                if (*(_QWORD *)v439 == v420 && **(void ***)(v439 + 32) == v430)
                {
                  v440 = 17;
                  goto LABEL_572;
                }
LABEL_606:
                ++v429;
              }
              sub_1C499C3FC(v738, *(char **)(v420 + 8), *(char **)(v420 + 16));
              if ((uint64_t *)v781 != &v783)
                free((void *)v781);
              v416 = v734;
              v415 = *(_DWORD *)v734;
              v417 = v727;
            }
            while (*(_DWORD *)v734);
            v419 = (uint64_t *)v738;
            v416 = (uint64_t *)(v738 + 2);
            v415 = v738[2];
          }
          while (v415);
        }
        if (v788 != &v790)
          free(v788);
        v467 = (uint64_t)v772;
        if (v772 != &v773.u64[1])
          free(v772);
        v719 = *(unsigned int *)(v8 + 72);
        if ((_DWORD)v719)
        {
          v468 = 0;
          v469 = (unsigned int *)(v8 + 936);
          v723 = v8 + 416;
          while (1)
          {
            v470 = *(_QWORD *)(v8 + 64);
            v471 = *(unsigned int *)(v470 + 4 * v468);
            v472 = v468 + 1;
            v473 = (unsigned int *)(v470 + 4 * (v468 + 1));
            if (v468 + 1 >= *(unsigned int *)(v8 + 72))
              v473 = v469;
            v474 = *v473;
            v788 = &v790;
            v789 = 0x800000000;
            if ((_DWORD)v471 != v474)
              break;
LABEL_796:
            v468 = v472;
            if (v472 == v719)
              goto LABEL_797;
          }
          v475 = 0xFFFFFFFFLL;
          v476 = v471;
          v744 = v474;
LABEL_641:
          v477 = v475;
          v478 = *(_QWORD *)(v8 + 928);
          v479 = v478 + 48 * v476;
          v481 = *(_BYTE *)(v479 + 8);
          v480 = v479 + 8;
          v482 = v480 + 8;
          v483 = *(_QWORD *)(v480 + 8);
          if ((v481 & 0x10) != 0)
          {
            v519 = *((_DWORD *)v746 + 4);
            v736 = v477;
            v729 = v480 + 8;
            v732 = v480;
            if (!v519)
              goto LABEL_698;
            v520 = *v746;
            v521 = v519 - 1;
            v522 = (v519 - 1) & ((v483 >> 4) ^ (v483 >> 9));
            v523 = *(_QWORD *)(*v746 + 16 * v522);
            if (v483 == v523)
            {
LABEL_697:
              v526 = *(_QWORD **)(v520 + 16 * v522 + 8);
            }
            else
            {
              v524 = 1;
              while (v523 != -4096)
              {
                v525 = v522 + v524++;
                v522 = v525 & v521;
                v523 = *(_QWORD *)(v520 + 16 * v522);
                if (v483 == v523)
                  goto LABEL_697;
              }
LABEL_698:
              v526 = 0;
            }
            v781 = (uint64_t)&v783;
            v782 = 0x200000000;
            v785 = 0;
            v786 = 0;
            v784 = &v785;
            v772 = &v773.u64[1];
            v773.i64[0] = 0x500000000;
            llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getExitBlocks(v526, (uint64_t)&v772);
            v527 = (unint64_t *)v772;
            if (!v773.i32[0])
            {
              v528 = 0;
              goto LABEL_752;
            }
            v528 = 0;
            v529 = (unint64_t *)((char *)v772 + 8 * v773.u32[0]);
            v530 = v478 + 48 * v476;
            v531 = v530 + 24;
            v725 = v530 + 40;
            v532 = v744;
            while (1)
            {
              v533 = *v527;
              v534 = *(_QWORD *)(v8 + 64);
              if (v472 >= *(unsigned int *)(v8 + 72))
                v535 = v469;
              else
                v535 = (unsigned int *)(v534 + 4 * v472);
              v536 = *(_DWORD *)(v8 + 408);
              if ((v536 & 1) != 0)
              {
                v538 = 16;
                v537 = v723;
              }
              else
              {
                v537 = *(_QWORD *)(v8 + 416);
                v538 = *(_DWORD *)(v8 + 424);
                if (!v538)
                {
                  v560 = 0;
                  goto LABEL_746;
                }
              }
              v539 = v538 - 1;
              v540 = (uint64_t *)(v537 + 32 * ((v538 - 1) & ((v533 >> 4) ^ (v533 >> 9))));
              v541 = *v540;
              if (*v540 == v533)
                goto LABEL_711;
              v542 = 1;
              LODWORD(v543) = v539 & ((v533 >> 4) ^ (v533 >> 9));
              do
              {
                if (v541 == -4096)
                {
                  if ((v536 & 1) != 0)
                  {
                    v537 = v723;
                    v560 = 16;
                  }
                  else
                  {
                    v537 = *(_QWORD *)(v748 + 416);
                    v560 = *(unsigned int *)(v748 + 424);
                  }
LABEL_746:
                  v540 = (uint64_t *)(v537 + 32 * v560);
                  v8 = v748;
                  v532 = v744;
                  if ((v536 & 1) == 0)
                    goto LABEL_712;
                  goto LABEL_747;
                }
                v544 = v543 + v542++;
                v543 = v544 & v539;
                v541 = *(_QWORD *)(v537 + 32 * v543);
              }
              while (v541 != v533);
              v540 = (uint64_t *)(v537 + 32 * v543);
LABEL_711:
              if ((v536 & 1) == 0)
              {
LABEL_712:
                v545 = *(_QWORD *)(v8 + 416);
                v546 = *(unsigned int *)(v8 + 424);
                goto LABEL_713;
              }
LABEL_747:
              v545 = v723;
              v546 = 16;
LABEL_713:
              if ((uint64_t *)(v545 + 32 * v546) != v540)
              {
                v547 = *((unsigned int *)v540 + 4);
                if ((_DWORD)v547)
                {
                  v548 = *(_DWORD *)(v534 + 4 * v468);
                  v549 = *v535;
                  v550 = 4 * v547;
                  v551 = (unsigned int *)v540[1];
                  while (1)
                  {
                    v552 = *v551;
                    if (*v551 >= v548 && v552 <= v549)
                      break;
                    ++v551;
                    v550 -= 4;
                    if (!v550)
                      goto LABEL_742;
                  }
                  LODWORD(v766) = *v551;
                  if (v552 != -1)
                  {
                    v554 = *(_QWORD *)(v748 + 928) + 48 * v552;
                    *(_BYTE *)(v554 + 8) |= 4u;
                    if (v786)
                    {
                      for (kk = v785; kk; kk = (_QWORD *)*kk)
                      {
                        v556 = *((_DWORD *)kk + 7);
                        if (v552 >= v556)
                        {
                          if (v556 >= v552)
                            goto LABEL_742;
                          ++kk;
                        }
                      }
                      goto LABEL_737;
                    }
                    if (!(_DWORD)v782)
                      goto LABEL_737;
                    v557 = (_DWORD *)v781;
                    v558 = 4 * v782;
                    while (*v557 != v552)
                    {
                      ++v557;
                      v558 -= 4;
                      if (!v558)
                        goto LABEL_737;
                    }
                    if (!v558)
                    {
LABEL_737:
                      if (v552 > v471 && v552 < v532)
                      {
                        v559 = *(unsigned int *)(v531 + 8);
                        if (v559 >= *(unsigned int *)(v531 + 12))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod(v531, v725, v559 + 1, 4);
                          v559 = *(unsigned int *)(v531 + 8);
                        }
                        *(_DWORD *)(*(_QWORD *)v531 + 4 * v559) = v552;
                        ++*(_DWORD *)(v531 + 8);
                        sub_1C4778DC4((uint64_t)&v781, (unsigned int *)&v766);
                        v528 = 1;
                        v532 = v744;
                      }
                    }
                  }
                }
              }
LABEL_742:
              ++v527;
              v8 = v748;
              if (v527 == v529)
              {
                v527 = (unint64_t *)v772;
LABEL_752:
                if (v527 != &v773.u64[1])
                  free(v527);
                sub_1C47655E8((uint64_t)&v784, v785);
                v467 = v781;
                if ((uint64_t *)v781 != &v783)
                  free((void *)v781);
                v474 = v744;
                v477 = v736;
                v482 = v729;
                v480 = v732;
                if ((v528 & 1) != 0)
                  goto LABEL_769;
LABEL_759:
                v561 = *(_QWORD *)(*(_QWORD *)v482 + 40);
                if (v561)
                  v562 = v561 - 24;
                else
                  v562 = 0;
                if (*(unsigned __int8 *)(v562 + 16) - 29 >= 0xB)
                  v562 = 0;
                v563 = *(unsigned __int8 *)(v562 + 16);
                v475 = v476;
                if (v563 != 29)
                {
                  v475 = v476;
                  if ((*(_BYTE *)v480 & 8) == 0)
                  {
                    v564 = v789;
                    if (v789 >= (unint64_t)HIDWORD(v789))
                    {
                      v565 = v477;
                      v467 = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v788, (uint64_t)&v790, v789 + 1, 4);
                      v477 = v565;
                      v474 = v744;
                      v564 = v789;
                    }
                    *((_DWORD *)v788 + v564) = v476;
                    LODWORD(v789) = v789 + 1;
                    goto LABEL_769;
                  }
                }
                goto LABEL_770;
              }
            }
          }
          v484 = *(_QWORD *)(v483 + 40);
          if (v484 == v483 + 40)
            goto LABEL_759;
          if (v484)
            v485 = v484 - 24;
          else
            v485 = 0;
          v486 = *(unsigned __int8 *)(v485 + 16);
          v487 = v486 - 29;
          if (v486 == 30)
          {
            if ((*(_DWORD *)(v485 + 20) & 0x7FFFFFF) == 3)
              v488 = 2;
            else
              v488 = 1;
          }
          else
          {
            v488 = 2;
            switch(v487)
            {
              case 1:
                __break(1u);
                goto LABEL_985;
              case 2:
                v488 = (*(_DWORD *)(v485 + 20) >> 1) & 0x3FFFFFF;
                break;
              case 3:
              case 9:
                v488 = (*(_DWORD *)(v485 + 20) & 0x7FFFFFF) - 1;
                break;
              case 4:
                goto LABEL_650;
              case 7:
                v488 = *(_WORD *)(v485 + 18) & 1;
                break;
              case 8:
                v488 = 1;
                goto LABEL_650;
              case 10:
                v488 = *(_DWORD *)(v485 + 80) + 1;
                break;
              default:
                goto LABEL_759;
            }
            if (!v488)
              goto LABEL_759;
          }
LABEL_650:
          v489 = 0;
          v490 = 0;
          v491 = v478 + 48 * v476;
          v467 = v491 + 24;
          v721 = v491 + 40;
          v492 = v485 - 32;
          v493 = v488;
          v724 = v491 + 24;
LABEL_651:
          v494 = *(unsigned __int8 *)(v485 + 16);
          v495 = v490;
          while (1)
          {
            if (v494 != 30)
              __asm { BR              X11 }
            v496 = *(_QWORD *)(v492 - 32 * v495);
            v497 = *(_QWORD *)(v8 + 64);
            v498 = *(_DWORD *)(v497 + 4 * v468);
            v499 = (unsigned int *)(v497 + 4 * v472);
            if (v472 >= *(unsigned int *)(v8 + 72))
              v499 = v469;
            v500 = *v499;
            v501 = *(_DWORD *)(v8 + 408);
            if ((v501 & 1) != 0)
            {
              v503 = 16;
              v502 = v723;
            }
            else
            {
              v502 = *(_QWORD *)(v8 + 416);
              v503 = *(_DWORD *)(v8 + 424);
              if (!v503)
              {
                v517 = 0;
                goto LABEL_683;
              }
            }
            v504 = v503 - 1;
            v505 = (uint64_t *)(v502 + 32 * ((v503 - 1) & ((v496 >> 4) ^ (v496 >> 9))));
            v506 = *v505;
            if (*v505 == v496)
            {
LABEL_662:
              if ((v501 & 1) == 0)
                goto LABEL_663;
              goto LABEL_684;
            }
            v467 = 1;
            LODWORD(v507) = v504 & ((v496 >> 4) ^ (v496 >> 9));
            while (v506 != -4096)
            {
              v508 = v507 + v467;
              v467 = (v467 + 1);
              v507 = v508 & v504;
              v506 = *(_QWORD *)(v502 + 32 * v507);
              if (v506 == v496)
              {
                v505 = (uint64_t *)(v502 + 32 * v507);
                goto LABEL_662;
              }
            }
            if ((v501 & 1) != 0)
            {
              v502 = v723;
              v517 = 16;
            }
            else
            {
              v502 = *(_QWORD *)(v748 + 416);
              v517 = *(unsigned int *)(v748 + 424);
            }
LABEL_683:
            v505 = (uint64_t *)(v502 + 32 * v517);
            v8 = v748;
            v474 = v744;
            if ((v501 & 1) == 0)
            {
LABEL_663:
              v509 = *(_QWORD *)(v8 + 416);
              v510 = *(unsigned int *)(v8 + 424);
              goto LABEL_664;
            }
LABEL_684:
            v509 = v723;
            v510 = 16;
LABEL_664:
            if ((uint64_t *)(v509 + 32 * v510) != v505)
            {
              v511 = *((unsigned int *)v505 + 4);
              if ((_DWORD)v511)
              {
                v512 = (unsigned int *)v505[1];
                v513 = 4 * v511;
                while (1)
                {
                  v514 = *v512;
                  if (*v512 >= v498 && v514 <= v500)
                    break;
                  ++v512;
                  v513 -= 4;
                  if (!v513)
                    goto LABEL_678;
                }
                if (v514 < v474 && v514 > v471)
                {
                  v467 = v724;
                  v518 = *(unsigned int *)(v724 + 8);
                  if (v518 >= *(unsigned int *)(v724 + 12))
                  {
                    v735 = v477;
                    v728 = v482;
                    v731 = v480;
                    v714 = v485;
                    llvm::SmallVectorBase<unsigned int>::grow_pod(v724, v721, v518 + 1, 4);
                    v467 = v724;
                    v485 = v714;
                    v482 = v728;
                    v480 = v731;
                    v477 = v735;
                    v474 = v744;
                    v518 = *(unsigned int *)(v724 + 8);
                  }
                  *(_DWORD *)(*(_QWORD *)v467 + 4 * v518) = v514;
                  ++*(_DWORD *)(v467 + 8);
                  v490 = v495 + 1;
                  v489 = 1;
                  if ((_DWORD)v493 != (_DWORD)v495 + 1)
                    goto LABEL_651;
LABEL_769:
                  v475 = v477;
LABEL_770:
                  v476 = (v476 + 1);
                  if ((_DWORD)v476 == v474)
                  {
                    v566 = (_DWORD)v475 != -1 || v789 == 0;
                    v567 = (unsigned int *)v788;
                    if (v566)
                      v568 = v475;
                    else
                      v568 = v474 - 1;
                    if ((_DWORD)v789)
                    {
                      v569 = 4 * v789;
                      do
                      {
                        if (v568 != *v567)
                        {
                          v570 = *(_QWORD *)(v8 + 928) + 48 * *v567;
                          v571 = v570 + 24;
                          v572 = *(unsigned int *)(v570 + 32);
                          if (v572 >= *(unsigned int *)(v570 + 36))
                          {
                            v467 = (uint64_t)llvm::SmallVectorBase<unsigned int>::grow_pod(v570 + 24, v570 + 40, v572 + 1, 4);
                            v572 = *(unsigned int *)(v571 + 8);
                          }
                          *(_DWORD *)(*(_QWORD *)v571 + 4 * v572) = v568;
                          ++*(_DWORD *)(v571 + 8);
                        }
                        ++v567;
                        v569 -= 4;
                      }
                      while (v569);
                      v567 = (unsigned int *)v788;
                    }
                    if (v567 != &v790)
                      free(v567);
                    goto LABEL_796;
                  }
                  goto LABEL_641;
                }
              }
            }
LABEL_678:
            if (++v495 == v493)
            {
              if ((v489 & 1) != 0)
                goto LABEL_769;
              goto LABEL_759;
            }
          }
        }
LABEL_797:
        v467 = v8 + 2480;
        *(_QWORD *)(v8 + 4616) = v745;
        v476 = *(unsigned int *)(v8 + 936);
        v573 = *(_DWORD *)(v8 + 2488);
        v471 = v717;
        v745 = (void *)(v8 + 2480);
        if (v573 != (_DWORD)v476)
        {
          if (v573 > v476)
          {
LABEL_985:
            sub_1C6153368(v467, v476);
          }
          else
          {
            if (*(_DWORD *)(v8 + 2492) < v476)
            {
              sub_1C627CBBC(v467, v476);
              v467 = v8 + 2480;
              v573 = *(_DWORD *)(v8 + 2488);
            }
            if (v573 != (_DWORD)v476)
            {
              v574 = *(_QWORD *)v467;
              v575 = (unint64_t)v573 << 6;
              v576 = v476 << 6;
              do
              {
                v577 = v574 + v575;
                *(_QWORD *)(v577 + 8) = v574 + v575 + 24;
                *(_QWORD *)(v577 + 16) = 0x100000000;
                *(_DWORD *)(v577 + 32) = -1;
                *(_QWORD *)(v577 + 40) = v574 + v575 + 56;
                *(_QWORD *)(v577 + 48) = 0x200000000;
                v576 -= 64;
                v574 += 64;
              }
              while (v575 != v576);
            }
            *(_DWORD *)(v8 + 2488) = v476;
          }
        }
        v578 = (_QWORD *)(v8 + 4544);
        v579 = *(_DWORD *)(*(_QWORD *)(v8 + 4616) + 872);
        v580 = *(unsigned int *)(v8 + 4552);
        if ((*(_DWORD *)(v8 + 4608) & 0x3F) != 0)
        {
          v695 = *(_QWORD *)(v8 + 4544) + 8 * v580;
          *(_QWORD *)(v695 - 8) &= ~(-1 << (*(_DWORD *)(v8 + 4608) & 0x3F));
        }
        v581 = v580;
        *(_DWORD *)(v8 + 4608) = v579;
        v582 = v579 + 63;
        if ((_DWORD)v580 != (v579 + 63) >> 6)
        {
          v583 = v582 >> 6;
          if (v580 > v583)
          {
            *(_DWORD *)(v8 + 4552) = v583;
            v581 = v582 >> 6;
          }
          else
          {
            v584 = v580;
            if (v583 > *(_DWORD *)(v8 + 4556))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(v8 + 4544, v8 + 4560, v583, 8);
              v584 = *(unsigned int *)(v8 + 4552);
              v581 = *(_DWORD *)(v8 + 4552);
            }
            if (v583 != v580)
              bzero((void *)(*v578 + 8 * v584), 8 * (v583 - v580));
            v581 += v583 - v580;
            *(_DWORD *)(v8 + 4552) = v581;
            v579 = *(_DWORD *)(v8 + 4608);
          }
        }
        v585 = v579 & 0x3F;
        if (v585)
          *(_QWORD *)(*v578 + 8 * v581 - 8) &= ~(-1 << v585);
        v739 = *(unsigned int *)(*(_QWORD *)(v8 + 4616) + 8);
        if ((_DWORD)v739)
        {
          v586 = 0;
          do
          {
            v587 = *(_QWORD *)(v8 + 4616);
            v588 = *(unsigned int *)(*(_QWORD *)v587 + 4 * v586);
            v589 = v586 + 1;
            v590 = (int *)(*(_QWORD *)v587 + 4 * v589);
            if (v589 >= *(unsigned int *)(v587 + 8))
              v590 = (int *)(v587 + 872);
            v591 = *v590;
            v772 = &v773.u64[1];
            v773.i64[0] = 0x2000000000;
            v779 = v588;
            v780 = v591;
            sub_1C4AA2F7C((unsigned int *)&v772, (v591 - v588));
            v766 = &v768;
            v767 = 0x500000000;
            sub_1C4893E04((char *)&v766, (v780 - v779), 0);
            v763 = v765;
            v764 = 0x500000000;
            v592 = *(_QWORD *)(*(_QWORD *)(v587 + 864) + 48 * v588 + 24);
            v788 = &v790;
            v790 = v588;
            v791 = v592;
            v789 = 0x500000001;
            v781 = (uint64_t)&v783;
            v782 = 0x600000000;
            sub_1C4765AA4((char *)&v781, (v591 + 63) >> 6, 0);
            v747 = v591;
            v787 = v591;
            v593 = (uint64_t *)v781;
            *(_QWORD *)(v781 + ((v588 >> 3) & 0x1FFFFFF8)) |= 1 << v588;
            v594 = v789;
            if ((_DWORD)v789)
            {
              do
              {
                while (1)
                {
                  v595 = (uint64_t)v788;
                  v596 = (char *)v788 + 16 * v594;
                  v597 = (unsigned int *)*((_QWORD *)v596 - 1);
                  v598 = *(_QWORD *)(v587 + 864);
                  v599 = v598 + 48 * *((unsigned int *)v596 - 4);
                  if (v597 == (unsigned int *)(*(_QWORD *)(v599 + 24) + 4 * *(unsigned int *)(v599 + 32)))
                    break;
                  v601 = *v597;
                  v600 = *v597;
                  *((_QWORD *)v596 - 1) = v597 + 1;
                  v602 = 1 << v601;
                  v603 = (unint64_t)v601 >> 6;
                  v604 = *(_QWORD *)(v781 + 8 * v603);
                  if (((1 << v601) & v604) == 0)
                  {
                    v605 = v594;
                    *(_QWORD *)(v781 + 8 * v603) = v602 | v604;
                    v606 = *(_QWORD *)(v598 + 48 * v600 + 24);
                    if (v594 >= HIDWORD(v789))
                    {
                      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v788, (uint64_t)&v790, v594 + 1, 16);
                      v595 = (uint64_t)v788;
                      v605 = v789;
                    }
                    v607 = (_QWORD *)(v595 + 16 * v605);
                    *v607 = v600;
                    v607[1] = v606;
                    v594 = v789 + 1;
                    LODWORD(v789) = v789 + 1;
                  }
                  if (!v594)
                    goto LABEL_831;
                }
                LODWORD(v789) = v594 - 1;
                *((_DWORD *)v766 + (*((_DWORD *)v596 - 4) - v779)) = v764;
                v608 = *((_DWORD *)v596 - 4);
                v609 = v764;
                if (v764 >= (unint64_t)HIDWORD(v764))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v763, (uint64_t)v765, v764 + 1, 4);
                  v609 = v764;
                }
                *((_DWORD *)v763 + v609) = v608;
                LODWORD(v764) = v764 + 1;
                v594 = v789;
              }
              while ((_DWORD)v789);
LABEL_831:
              v593 = (uint64_t *)v781;
            }
            if (v593 != &v783)
              free(v593);
            if (v788 != &v790)
              free(v788);
            v610 = v763;
            v611 = v772;
            *((_DWORD *)v772 + (*(_DWORD *)v763 - v779)) = *(_DWORD *)v763;
            v612 = v780 - v779;
            if (v780 - v779 != 1)
            {
              v613 = *(_QWORD *)(v587 + 864);
              v614 = 1;
              v615 = (unsigned int *)v766;
              do
              {
                v616 = v610[v614];
                v617 = v613 + 48 * v616;
                v618 = *(_DWORD *)(v617 + 32);
                if (v618)
                {
                  v619 = *(_DWORD **)(v617 + 24);
                  v620 = v615[*v619 - v779];
                  if (v618 == 1)
                  {
                    v621 = v615[*v619 - v779];
                  }
                  else
                  {
                    v622 = 1;
                    v621 = v615[*v619 - v779];
                    do
                    {
                      v623 = v615[v619[v622] - v779];
                      if (v611[v610[v623] - v779] != -1 && v620 != v623)
                      {
                        do
                        {
                          while (v623 > v620)
                          {
                            v625 = v611[v610[v623] - v779];
                            if (v625 == -1)
LABEL_892:
                              llvm::report_fatal_error((llvm *)"Internal Compiler Error: Unhandled control flow", (const char *)1);
                            v623 = v615[v625 - v779];
                          }
                          while (v620 > v623)
                          {
                            v626 = v611[v610[v620] - v779];
                            if (v626 == -1)
                              goto LABEL_892;
                            v620 = v615[v626 - v779];
                          }
                          v621 = v623;
                        }
                        while (v620 != v623);
                      }
                      ++v622;
                      v620 = v621;
                    }
                    while (v618 != (_DWORD)v622);
                  }
                  v627 = v616 - v779;
                  v628 = v610[v621];
                  if (v611[v627] != v628)
                    v611[v627] = v628;
                }
                ++v614;
              }
              while (v614 != v612);
            }
            v741 = v589;
            if (v610 != (_DWORD *)v765)
              free(v610);
            if (v766 != &v768)
              free(v766);
            v629 = v591;
            v630 = v745;
            if ((_DWORD)v588 != v591)
            {
              do
              {
                v643 = v588;
                v644 = *(_QWORD *)(*(_QWORD *)(v8 + 4616) + 864);
                v645 = *(_QWORD *)(v8 + 2480) + ((unint64_t)v588 << 6);
                *(_QWORD *)v645 = v630;
                *(_DWORD *)(v645 + 32) = v588;
                v646 = v644 + 48 * v588;
                v647 = *(unsigned int *)(v646 + 32);
                if (v647 >= 2)
                {
                  v631 = 0;
                  v632 = (_QWORD *)(v646 + 24);
                  v633 = *((_DWORD *)v772 + (v643 - v779));
                  v634 = v645 + 40;
                  v635 = v645 + 56;
                  do
                  {
                    for (mm = *(_DWORD *)(*v632 + 4 * v631); mm != v633 && mm != -1; mm = *((_DWORD *)v772 + mm - v779))
                    {
                      v638 = *v630 + ((unint64_t)mm << 6);
                      v639 = v638 + 8;
                      v640 = *(unsigned int *)(v638 + 16);
                      if (v640 >= *(unsigned int *)(v638 + 20))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod(v638 + 8, v638 + 24, v640 + 1, 8);
                        v629 = v747;
                        v630 = v745;
                        v640 = *(unsigned int *)(v639 + 8);
                      }
                      *(_QWORD *)(*(_QWORD *)v639 + 8 * v640) = v643 & 0xFFFFFF00FFFFFFFFLL | ((unint64_t)v631 << 32);
                      ++*(_DWORD *)(v639 + 8);
                      v641 = *(unsigned int *)(v634 + 8);
                      if (v641 >= *(unsigned int *)(v634 + 12))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod(v634, v635, v641 + 1, 4);
                        v629 = v747;
                        v630 = v745;
                        v641 = *(unsigned int *)(v634 + 8);
                      }
                      *(_DWORD *)(*(_QWORD *)v634 + 4 * v641) = mm;
                      ++*(_DWORD *)(v634 + 8);
                    }
                    ++v631;
                  }
                  while (v631 != v647);
                }
                LODWORD(v588) = v643 + 1;
                v8 = v748;
              }
              while ((_DWORD)v643 + 1 != v629);
            }
            if (v772 != &v773.u64[1])
              free(v772);
            v586 = v741;
            v471 = v717;
          }
          while (v741 != v739);
        }
        if ((_DWORD)v761)
        {
          v648 = (uint64_t *)v760;
          v649 = 8 * v761;
          do
          {
            v650 = *v648++;
            sub_1C55AFB10(v8, v471, v650);
            v649 -= 8;
          }
          while (v649);
        }
        v651 = v8 + 4624;
        sub_1C55AFB10(v8, v471, 0);
        v652 = *(_QWORD *)(v8 + 48);
        *(_QWORD *)(v652 + 56) = v471;
        sub_1C53BA620(v652, 0);
        if (!*v716)
        {
          v653 = *(_QWORD *)(v8 + 56);
          v654 = *(uint64_t **)(v653 + 24);
          v655 = *(uint64_t **)(v653 + 32);
          v756[0] = &off_1E8170408;
          v756[1] = v8;
          v757 = v756;
          sub_1C55AF96C(v654, v655, (uint64_t)v756);
          if (v757 == v756)
          {
            v656 = (void (**)(void))(v756[0] + 32);
          }
          else
          {
            if (!v757)
              goto LABEL_895;
            v656 = (void (**)(void))(*v757 + 40);
          }
          (*v656)();
        }
LABEL_895:
        v657 = *(_DWORD *)(v8 + 4632);
        if (v657)
        {
          v679 = *(_DWORD *)(v8 + 4640);
          if (v679 > 4 * v657 && v679 >= 0x41)
          {
            v680 = 1 << (33 - __clz(v657 - 1));
            if (v680 <= 64)
              v681 = 64;
            else
              v681 = v680;
LABEL_942:
            if (v681 == v679)
            {
              *(_QWORD *)(v8 + 4632) = 0;
              v682 = *(_QWORD **)(v8 + 4624);
              v683 = 16 * v679;
              do
              {
                *v682 = -4096;
                v682 += 2;
                v683 -= 16;
              }
              while (v683);
            }
            else
            {
              MEMORY[0x1CAA32FB4](*(_QWORD *)v651, 8);
              if (v681)
              {
                v690 = (4 * v681 / 3u + 1) | ((unint64_t)(4 * v681 / 3u + 1) >> 1);
                v691 = v690 | (v690 >> 2) | ((v690 | (v690 >> 2)) >> 4);
                LODWORD(v691) = (((v691 | (v691 >> 8)) >> 16) | v691 | (v691 >> 8)) + 1;
                *(_DWORD *)(v8 + 4640) = v691;
                v692 = operator new(16 * v691, (std::align_val_t)8uLL);
                *(_QWORD *)(v8 + 4624) = v692;
                *(_QWORD *)(v8 + 4632) = 0;
                v693 = *(unsigned int *)(v8 + 4640);
                if ((_DWORD)v693)
                {
                  v694 = 16 * v693;
                  do
                  {
                    *v692 = -4096;
                    v692 += 2;
                    v694 -= 16;
                  }
                  while (v694);
                }
              }
              else
              {
                *(_QWORD *)v651 = 0;
                *(_QWORD *)(v651 + 8) = 0;
                *(_DWORD *)(v651 + 16) = 0;
              }
            }
            goto LABEL_897;
          }
        }
        else
        {
          if (!*(_DWORD *)(v8 + 4636))
            goto LABEL_897;
          v679 = *(_DWORD *)(v8 + 4640);
          if (v679 > 0x40)
          {
            v681 = 0;
            v8 = v748;
            goto LABEL_942;
          }
          v8 = v748;
        }
        if (v679)
        {
          v701 = *(_QWORD **)v651;
          v702 = 16 * v679;
          do
          {
            *v701 = -4096;
            v701 += 2;
            v702 -= 16;
          }
          while (v702);
        }
        *(_QWORD *)(v8 + 4632) = 0;
LABEL_897:
        *(_QWORD *)(v8 + 4616) = 0;
        v658 = *(unsigned int *)(v8 + 2488);
        if ((_DWORD)v658)
        {
          v659 = *(_QWORD *)(v8 + 2480);
          v660 = v658 << 6;
          do
          {
            v661 = v659 + v660;
            v662 = *(void **)(v659 + v660 - 24);
            if ((void *)(v659 + v660 - 8) != v662)
              free(v662);
            v663 = *(void **)(v661 - 56);
            if ((void *)(v661 - 40) != v663)
              free(v663);
            v660 -= 64;
          }
          while (v660);
        }
        v665 = (_QWORD *)(v8 + 144);
        v664 = *(_DWORD *)(v8 + 144);
        *(_DWORD *)(v8 + 2488) = 0;
        *(_DWORD *)(v8 + 72) = 0;
        if (v664 > 1 || *(_DWORD *)(v8 + 148))
        {
          if ((v664 & 1) != 0)
          {
            v667 = (_QWORD *)(v8 + 152);
            v668 = (_QWORD *)(v8 + 408);
            goto LABEL_911;
          }
          v666 = *(unsigned int *)(v8 + 160);
          if (((2 * v664) & 0xFFFFFFFC) >= v666 || v666 < 0x41)
          {
            if (!(_DWORD)v666)
            {
LABEL_913:
              *(_DWORD *)(v8 + 144) = v666;
              *(_DWORD *)(v8 + 148) = 0;
              goto LABEL_914;
            }
            v667 = *(_QWORD **)(v8 + 152);
            v668 = &v667[2 * v666];
            do
            {
LABEL_911:
              *v667 = -4096;
              v667 += 2;
            }
            while (v667 != v668);
            LODWORD(v666) = *(_DWORD *)v665 & 1;
            goto LABEL_913;
          }
          v696 = __clz((v664 >> 1) - 1);
          if (v696 == 28)
            v697 = 64;
          else
            v697 = 1 << (33 - v696);
          if (v664 >= 2)
            v698 = v697;
          else
            v698 = 0;
          if (v698 == (_DWORD)v666)
          {
            v8 = v748;
            *(_QWORD *)(v748 + 144) = 0;
            v699 = 16 * v666;
            v700 = *(_QWORD **)(v748 + 152);
            do
            {
              *v700 = -4096;
              v700 += 2;
              v699 -= 16;
            }
            while (v699);
          }
          else
          {
            v8 = v748;
            MEMORY[0x1CAA32FB4](*(_QWORD *)(v748 + 152), 8);
            sub_1C55AF764(v665, v698);
          }
        }
LABEL_914:
        v669 = *(_DWORD *)(v8 + 408);
        if (v669 <= 1 && !*(_DWORD *)(v8 + 412))
          goto LABEL_928;
        v670 = (_DWORD *)(v8 + 408);
        if ((v669 & 1) != 0)
        {
          v672 = (_QWORD *)(v8 + 416);
          v673 = (_QWORD *)(v8 + 928);
          goto LABEL_920;
        }
        v671 = *(unsigned int *)(v8 + 424);
        if (((2 * v669) & 0xFFFFFFFC) >= v671 || v671 < 0x41)
        {
          if (!(_DWORD)v671)
          {
LABEL_927:
            *(_DWORD *)(v8 + 408) = v671;
            *(_DWORD *)(v8 + 412) = 0;
LABEL_928:
            v675 = *(unsigned int *)(v8 + 936);
            if ((_DWORD)v675)
            {
              v676 = *(_QWORD *)(v8 + 928);
              v677 = 48 * v675;
              do
              {
                v678 = *(void **)(v676 + v677 - 24);
                if ((void *)(v676 + v677 - 8) != v678)
                  free(v678);
                v677 -= 48;
              }
              while (v677);
            }
            *(_DWORD *)(v8 + 936) = 0;
            if (v760 != v762)
              free(v760);
            v18 = v715;
            return !v18;
          }
          v672 = *(_QWORD **)(v8 + 416);
          v673 = &v672[4 * v671];
          do
          {
LABEL_920:
            if (*v672 != -4096)
            {
              if (*v672 != -8192)
              {
                v674 = (_QWORD *)v672[1];
                if (v672 + 3 != v674)
                  free(v674);
              }
              *v672 = -4096;
            }
            v672 += 4;
          }
          while (v672 != v673);
          LODWORD(v671) = *v670 & 1;
          goto LABEL_927;
        }
        sub_1C55AF8EC(v8 + 408);
        v684 = __clz((v669 >> 1) - 1);
        if (v684 == 28)
          v685 = 64;
        else
          v685 = 1 << (33 - v684);
        if (v669 >= 2)
          v686 = v685;
        else
          v686 = 0;
        if ((*v670 & 1) != 0 && v686 < 0x11)
        {
          *(_QWORD *)(v8 + 408) = 1;
          v703 = (_QWORD *)(v8 + 416);
          v704 = (_QWORD *)(v8 + 928);
        }
        else
        {
          if ((*v670 & 1) != 0)
            goto LABEL_958;
          if ((_DWORD)v686 != *(_DWORD *)(v8 + 424))
          {
            MEMORY[0x1CAA32FB4](*(_QWORD *)(v8 + 416), 8);
LABEL_958:
            if (v686 <= 0x10)
            {
              *(_QWORD *)v670 = 1;
            }
            else
            {
              *(_DWORD *)(v8 + 408) &= ~1u;
              v687 = operator new(32 * v686, (std::align_val_t)8uLL);
              *(_QWORD *)(v8 + 416) = v687;
              *(_QWORD *)(v8 + 424) = v686;
              v688 = *(_DWORD *)(v8 + 408);
              *(_QWORD *)(v8 + 408) = v688 & 1;
              if ((v688 & 1) == 0)
              {
                v689 = &v687[4 * v686];
                goto LABEL_969;
              }
            }
            v687 = (_QWORD *)(v8 + 416);
            v689 = (_QWORD *)(v8 + 928);
            do
            {
LABEL_969:
              *v687 = -4096;
              v687 += 4;
            }
            while (v687 != v689);
            goto LABEL_928;
          }
          *(_QWORD *)(v8 + 408) = 0;
          if (!(_DWORD)v686)
            goto LABEL_928;
          v703 = *(_QWORD **)(v8 + 416);
          v704 = &v703[4 * v686];
        }
        v8 = v748;
        do
        {
          *v703 = -4096;
          v703 += 4;
        }
        while (v703 != v704);
        goto LABEL_928;
      }
      v23 = (void (**)(void))(*v759 + 40);
    }
    (*v23)();
    goto LABEL_22;
  }
  return !v18;
}

_QWORD *sub_1C55AF764(_QWORD *a1, unsigned int a2)
{
  _QWORD *result;
  _QWORD *v4;
  uint64_t v5;
  int v6;

  if (a2 <= 0x10)
  {
    *a1 = 1;
LABEL_3:
    result = a1 + 1;
    v4 = a1 + 33;
    goto LABEL_4;
  }
  *(_DWORD *)a1 &= ~1u;
  v5 = a2;
  result = operator new(16 * a2, (std::align_val_t)8uLL);
  a1[1] = result;
  a1[2] = v5;
  v6 = *(_DWORD *)a1;
  *a1 = *(_DWORD *)a1 & 1;
  if ((v6 & 1) != 0)
    goto LABEL_3;
  v4 = &result[2 * v5];
  do
  {
LABEL_4:
    *result = -4096;
    result += 2;
  }
  while (result != v4);
  return result;
}

char *sub_1C55AF7E4(char *result, int a2)
{
  char *v2;
  unint64_t v3;
  unint64_t v4;
  uint64_t v5;
  uint64_t v6;
  _QWORD *v7;

  v2 = result;
  if (a2)
  {
    v3 = (4 * a2 / 3u + 1) | ((unint64_t)(4 * a2 / 3u + 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    LODWORD(v4) = (((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8)) + 1;
    *((_DWORD *)result + 4) = v4;
    result = (char *)operator new((unint64_t)v4 << 6, (std::align_val_t)8uLL);
    *(_QWORD *)v2 = result;
    *((_QWORD *)v2 + 1) = 0;
    v5 = *((unsigned int *)v2 + 4);
    if ((_DWORD)v5)
    {
      v6 = v5 << 6;
      v7 = result + 16;
      do
      {
        *v7 = 0;
        v7[1] = -4096;
        *(v7 - 2) = &unk_1E814DA10;
        *(v7 - 1) = 2;
        v7[2] = 0;
        v7 += 8;
        v6 -= 64;
      }
      while (v6);
    }
  }
  else
  {
    *(_QWORD *)result = 0;
    *((_QWORD *)result + 1) = 0;
    *((_DWORD *)result + 4) = 0;
  }
  return result;
}

void sub_1C55AF894(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  void *v4;
  void *v5;

  if (a2 != a1)
  {
    v2 = a2;
    do
    {
      v4 = *(void **)(v2 - 40);
      if (v4 != *(void **)(v2 - 48))
        free(v4);
      v5 = *(void **)(v2 - 80);
      if ((void *)(v2 - 64) != v5)
        free(v5);
      v2 -= 80;
    }
    while (v2 != a1);
  }
}

void sub_1C55AF8EC(uint64_t a1)
{
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  _QWORD *v4;
  uint64_t v5;
  _QWORD *v6;
  _QWORD *v7;
  uint64_t v8;

  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v2 = a1 + 8;
    v1 = 16;
  }
  else
  {
    v1 = *(unsigned int *)(a1 + 16);
    if (!(_DWORD)v1)
      return;
    v2 = *(_QWORD *)(a1 + 8);
  }
  v3 = 32 * v1;
  v4 = (_QWORD *)(v2 + 24);
  do
  {
    v5 = *(v4 - 3);
    if (v5 != -4096 && v5 != -8192)
    {
      v6 = (_QWORD *)*(v4 - 2);
      if (v4 != v6)
      {
        v7 = v4;
        v8 = v3;
        free(v6);
        v4 = v7;
        v3 = v8;
      }
    }
    v4 += 4;
    v3 -= 32;
  }
  while (v3);
}

void sub_1C55AF96C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t *v5;
  unint64_t v6;
  char *v7;
  __int128 v8;
  BOOL v9;
  unsigned int v10;
  char *v11;
  uint64_t *v12;
  uint64_t v13;
  unint64_t v14;
  char *v15;
  __int128 v16;
  uint64_t v17;
  __int128 v18;
  void *v19;
  uint64_t v20;
  _QWORD v21[25];

  v21[24] = *MEMORY[0x1E0C80C00];
  v19 = v21;
  v20 = 0x800000000;
  if (a1 != a2)
  {
    v5 = a1;
    do
    {
      v17 = *v5;
      v18 = *(_OWORD *)(v17 + 8);
      v6 = sub_1C4926708((uint64_t)&v19, (unint64_t)&v17, 1);
      v7 = (char *)v19 + 24 * v20;
      v8 = *(_OWORD *)v6;
      *((_QWORD *)v7 + 2) = *(_QWORD *)(v6 + 16);
      *(_OWORD *)v7 = v8;
      v9 = __CFADD__((_DWORD)v20, 1);
      v10 = v20 + 1;
      LODWORD(v20) = v20 + 1;
      if (!v9)
      {
        do
        {
          v11 = (char *)v19 + 24 * v10;
          v12 = (uint64_t *)*((_QWORD *)v11 - 2);
          if (v12 == *((uint64_t **)v11 - 1))
          {
            v17 = *((_QWORD *)v11 - 3);
            v13 = *(_QWORD *)(a3 + 24);
            if (!v13)
            {
              sub_1C485C2F0();
              sub_1C55AFB10();
              return;
            }
            (*(void (**)(uint64_t, uint64_t *))(*(_QWORD *)v13 + 48))(v13, &v17);
            v10 = v20 - 1;
          }
          else
          {
            *((_QWORD *)v11 - 2) = v12 + 1;
            v17 = *v12;
            v18 = *(_OWORD *)(*v12 + 8);
            v14 = sub_1C4926708((uint64_t)&v19, (unint64_t)&v17, 1);
            v15 = (char *)v19 + 24 * v20;
            v16 = *(_OWORD *)v14;
            *((_QWORD *)v15 + 2) = *(_QWORD *)(v14 + 16);
            *(_OWORD *)v15 = v16;
            v10 = v20 + 1;
          }
          LODWORD(v20) = v10;
        }
        while (v10);
      }
      ++v5;
    }
    while (v5 != a2);
    if (v19 != v21)
      free(v19);
  }
}

void sub_1C55AFB10(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4;
  _DWORD *v5;
  unsigned int v6;
  uint64_t v7;
  uint64_t v8;
  unsigned int v9;
  _DWORD *v10;
  unint64_t v11;
  _QWORD *v12;
  char *v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  _QWORD *i;
  unsigned int v22;
  _DWORD *v23;
  uint64_t v24;
  uint64_t v25;
  char *v26;
  char *v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  unsigned int *v34;
  unsigned int *v35;
  _QWORD *v36;
  int v37;
  uint64_t v38;
  int v39;
  unsigned int v40;
  _QWORD *v41;
  uint64_t v42;
  _QWORD *v43;
  int v44;
  BOOL v45;
  unsigned int v46;
  _QWORD *v47;
  uint64_t v48;
  unint64_t v49;
  uint64_t v50;
  unsigned int *v51;
  unsigned int *v52;
  _QWORD *v53;
  int v54;
  uint64_t v55;
  int v56;
  unsigned int v57;
  _QWORD *v58;
  uint64_t v59;
  _QWORD *v60;
  int v61;
  BOOL v62;
  unsigned int v63;
  _QWORD *v64;
  uint64_t v65;
  unint64_t v66;
  _QWORD *v67;
  uint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  unsigned int v73;
  unsigned int v74;
  unsigned int v75;
  uint64_t *v76;
  uint64_t v77;
  int v78;
  unsigned int v79;
  const void *v80;
  uint64_t v81;
  unint64_t v82;
  uint64_t *v83;
  uint64_t *v84;
  uint64_t v85;
  uint64_t *v86;
  uint64_t v87;
  uint64_t v88;
  unsigned int v89;
  BOOL v90;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t *v95;
  uint64_t v96;
  uint64_t v97;
  int v98;
  uint64_t v99;
  unsigned int v100;
  uint64_t v101;
  uint64_t v102;
  int v103;
  int v104;
  uint64_t v105;
  void **v106;
  void **v107;
  _QWORD *v108;
  uint64_t v109;
  void *v110;
  uint64_t v111;
  int v112;
  unsigned int v113;
  uint64_t v114;
  void *v115;
  int v116;
  int v117;
  _QWORD *v118;
  unsigned int v119;
  unsigned int v120;
  uint64_t v121;
  void *v122;
  int v123;
  int v124;
  _QWORD *v125;
  _QWORD *v126;
  _QWORD *v127;
  BOOL v128;
  uint64_t v129;
  uint64_t v130;
  uint64_t v131;
  _QWORD *v132;
  uint64_t v133;
  uint64_t v134;
  unint64_t v135;
  uint64_t v136;
  const void *v137;
  unint64_t v138;
  uint64_t v139;
  __int128 *v140;
  int v141;
  unsigned int v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  uint64_t v146;
  unint64_t v147;
  uint64_t v148;
  const void *v149;
  uint64_t v150;
  unsigned int v151;
  unint64_t v152;
  uint64_t *v153;
  uint64_t v154;
  uint64_t v155;
  uint64_t v156;
  uint64_t v157;
  uint64_t v158;
  uint64_t v159;
  void **v160;
  uint64_t v161;
  uint64_t v162;
  void **v163;
  unsigned int v164;
  void **v165;
  void *v166;
  unsigned int v167;
  uint64_t v168;
  uint64_t v169;
  void *v170;
  int v171;
  int v172;
  unsigned int v173;
  uint64_t v174;
  uint64_t v175;
  unint64_t v176;
  llvm::SmallPtrSetImplBase *v177;
  uint64_t v178;
  uint64_t *v179;
  uint64_t v180;
  void *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  void *v186;
  int v187;
  int v188;
  int v189;
  unsigned int v190;
  _QWORD *v191;
  uint64_t v192;
  _QWORD *v193;
  int v194;
  BOOL v195;
  unsigned int v196;
  _QWORD *v197;
  unsigned int v198;
  uint64_t v199;
  uint64_t v200;
  const void *v201;
  uint64_t v202;
  uint64_t v203;
  uint64_t v204;
  uint64_t v205;
  uint64_t *v206;
  uint64_t v207;
  uint64_t *v208;
  uint64_t v209;
  uint64_t v210;
  uint64_t v211;
  uint64_t *v212;
  uint64_t *v213;
  uint64_t v214;
  unint64_t *v215;
  unint64_t v216;
  uint64_t v217;
  uint64_t *v218;
  uint64_t v219;
  uint64_t v220;
  int v221;
  uint64_t v222;
  int v223;
  unsigned int v224;
  _QWORD *v225;
  uint64_t v226;
  _QWORD *v227;
  int v228;
  BOOL v229;
  unsigned int v230;
  _QWORD *v231;
  int v232;
  void *v233;
  int v234;
  uint64_t v235;
  int v236;
  unsigned int v237;
  _QWORD *v238;
  void *v239;
  _QWORD *v240;
  int v241;
  BOOL v242;
  unsigned int v243;
  _QWORD *v244;
  uint64_t *v245;
  uint64_t v246;
  uint64_t v247;
  uint64_t v248;
  int v249;
  __int128 *v250;
  _BYTE *v251;
  uint64_t v252;
  unsigned int v253;
  uint64_t v254;
  void **v255;
  void **v256;
  uint64_t v257;
  _DWORD *v258;
  _QWORD *v259;
  void *v260;
  int v261;
  uint64_t v262;
  int v263;
  unsigned int v264;
  _QWORD *v265;
  void *v266;
  _QWORD *v267;
  int v268;
  BOOL v269;
  unsigned int v270;
  _QWORD *v271;
  _QWORD *v272;
  uint64_t v273;
  uint64_t v274;
  uint64_t *v275;
  unsigned int v276;
  uint64_t v277;
  char *v278;
  BOOL v279;
  char *v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  unint64_t v285;
  const void *v287;
  char *v288;
  uint64_t v289;
  void *v290;
  void *v291;
  uint64_t v292;
  uint64_t v293;
  int v294;
  char *v295;
  void **v296;
  BOOL v297;
  int v298;
  unint64_t v299;
  char *v300;
  char *v301;
  uint64_t v302;
  uint64_t v303;
  int v304;
  int v305;
  uint64_t *v306;
  uint64_t v307;
  uint64_t v308;
  uint64_t v309;
  char *v310;
  uint64_t v311;
  uint64_t v312;
  uint64_t v313;
  int v314;
  int v315;
  uint64_t v316;
  uint64_t v317;
  uint64_t v318;
  BOOL v319;
  uint64_t v320;
  uint64_t *v321;
  int v322;
  uint64_t v323;
  unsigned int v324;
  uint64_t v325;
  uint64_t v326;
  int v327;
  int v328;
  _QWORD *v329;
  void *v330;
  void *v331;
  unsigned int v332;
  uint64_t v333;
  unsigned int *v334;
  uint64_t v335;
  unsigned int v336;
  uint64_t v337;
  uint64_t *v338;
  uint64_t v339;
  uint64_t *v340;
  uint64_t v341;
  _QWORD *v342;
  char *v343;
  uint64_t v344;
  uint64_t v345;
  char *v346;
  uint64_t *v347;
  uint64_t v348;
  uint64_t *v349;
  unsigned int v350;
  char *v351;
  char *v352;
  uint64_t v353;
  uint64_t v354;
  int *v355;
  int v356;
  _QWORD *v357;
  uint64_t v358;
  int v359;
  unsigned int v360;
  _QWORD *v361;
  uint64_t v362;
  uint64_t v363;
  _QWORD *v364;
  int v365;
  BOOL v366;
  unsigned int v367;
  _QWORD *v368;
  uint64_t ****v369;
  uint64_t ****v370;
  uint64_t ***v371;
  uint64_t *v372;
  int v373;
  uint64_t v374;
  unsigned int v375;
  uint64_t v376;
  uint64_t ***v377;
  int v378;
  int v379;
  void *v380;
  int v381;
  int v382;
  _QWORD *v383;
  int v384;
  uint64_t v385;
  void **v386;
  void *v387;
  _QWORD *v388;
  uint64_t v389;
  int v390;
  int v391;
  uint64_t v392;
  _OWORD *v393;
  int v394;
  _QWORD *v395;
  uint64_t *v396;
  int v397;
  unsigned int v398;
  _QWORD *v399;
  void *v400;
  _QWORD *v401;
  int v402;
  BOOL v403;
  unsigned int v404;
  _QWORD *v405;
  uint64_t v406;
  int v407;
  _QWORD *v408;
  int v409;
  unsigned int v410;
  _QWORD *v411;
  uint64_t v412;
  _QWORD *v413;
  int v414;
  BOOL v415;
  unsigned int v416;
  _QWORD *v417;
  unint64_t v418;
  _QWORD *v419;
  _QWORD *v420;
  _QWORD *v421;
  uint64_t v422;
  unint64_t v423;
  uint64_t v424;
  unint64_t v425;
  char *v426;
  _QWORD *v427;
  _QWORD *v428;
  unint64_t v429;
  _QWORD *v430;
  _QWORD *v431;
  _QWORD *v432;
  uint64_t v433;
  unint64_t v434;
  uint64_t v435;
  unint64_t v436;
  char *v437;
  char *v438;
  uint64_t v439;
  char *v440;
  uint64_t v441;
  _QWORD *v442;
  _QWORD *v443;
  unint64_t v444;
  uint64_t v445;
  int32x2_t *v446;
  unint64_t v447;
  uint64_t v448;
  unsigned int v449;
  uint64_t v450;
  uint64_t *v451;
  uint64_t v452;
  int v453;
  int v454;
  _QWORD *v455;
  uint64_t v456;
  int v457;
  uint64_t v458;
  uint64_t v459;
  char v460;
  _QWORD *v461;
  int v462;
  unsigned int v463;
  uint64_t v464;
  unint64_t v465;
  unint64_t *v466;
  uint64_t v467;
  int32x2_t *v468;
  unint64_t v469;
  uint64_t v470;
  unsigned int v471;
  uint64_t v472;
  uint64_t *v473;
  uint64_t v474;
  int v475;
  int v476;
  uint64_t ****v477;
  uint64_t v478;
  uint64_t v479;
  uint64_t v480;
  int v481;
  unsigned int v482;
  uint64_t v483;
  uint64_t v484;
  int v485;
  uint64_t ***v486;
  llvm::BasicBlock *v487;
  int v488;
  uint64_t v489;
  uint64_t v490;
  BOOL v491;
  llvm::BasicBlock *v492;
  unsigned int v493;
  uint64_t v494;
  BOOL v495;
  uint64_t v496;
  uint64_t v497;
  uint64_t v498;
  int v499;
  uint64_t v500;
  uint64_t v501;
  BOOL v502;
  char v503;
  uint64_t v504;
  llvm::BlockAddress *v505;
  int v506;
  uint64_t v507;
  uint64_t v508;
  uint64_t v509;
  _QWORD *v510;
  uint64_t v511;
  uint64_t v512;
  uint64_t v513;
  _QWORD *v514;
  uint64_t v515;
  uint64_t v516;
  _QWORD *v517;
  uint64_t v518;
  uint64_t n;
  uint64_t v520;
  uint64_t v521;
  uint64_t ii;
  uint64_t ***v523;
  _QWORD *v524;
  llvm::LLVMContext *v525;
  llvm::LLVMContext *v526;
  uint64_t v527;
  uint64_t v528;
  uint64_t v529;
  uint64_t v530;
  uint64_t v531;
  int v532;
  int v533;
  unsigned int v534;
  uint64_t v535;
  uint64_t v536;
  int v537;
  uint64_t v538;
  uint64_t v539;
  uint64_t v540;
  uint64_t v541;
  uint64_t v542;
  uint64_t v543;
  int v544;
  int v545;
  uint64_t v546;
  uint64_t v547;
  uint64_t v548;
  _DWORD *v550;
  uint64_t v551;
  int v552;
  _DWORD *v553;
  int v554;
  uint64_t v555;
  uint64_t v556;
  _DWORD *v557;
  uint64_t v558;
  uint64_t v559;
  uint64_t v560;
  uint64_t v561;
  unsigned int v562;
  uint64_t v563;
  uint64_t v564;
  int v565;
  int v566;
  uint64_t v567;
  uint64_t v568;
  uint64_t v569;
  uint64_t v570;
  uint64_t v571;
  int v572;
  int v573;
  uint64_t v574;
  uint64_t ***v575;
  uint64_t ***v576;
  void *v577;
  llvm::MDNode **v578;
  uint64_t v579;
  uint64_t v580;
  unsigned int v581;
  uint64_t v582;
  uint64_t v583;
  llvm::MDNode **v584;
  int v585;
  int v586;
  uint64_t v587;
  llvm::MDNode *v588;
  unsigned int v589;
  uint64_t v590;
  uint64_t ***v591;
  int v592;
  uint64_t v593;
  uint64_t v594;
  uint64_t v595;
  uint64_t ***v596;
  int v597;
  int v598;
  uint64_t v599;
  uint64_t ***v600;
  int v601;
  int v602;
  llvm::MDNode *v603;
  uint64_t v604;
  uint64_t v605;
  uint64_t v606;
  uint64_t v607;
  llvm::MDNode ***v608;
  llvm::MDNode **v609;
  int v610;
  int v611;
  llvm::MDNode **v612;
  char *v613;
  size_t v614;
  size_t v615;
  int v616;
  int v617;
  unsigned int v618;
  _QWORD *v619;
  _QWORD *v620;
  _QWORD *v621;
  int v622;
  BOOL v623;
  unsigned int v624;
  _QWORD *v625;
  _QWORD *v626;
  uint64_t v627;
  llvm::LLVMContext *v628;
  llvm::LLVMContext *v629;
  int v630;
  int v631;
  unsigned int v632;
  _QWORD *v633;
  void *v634;
  _QWORD *v635;
  int v636;
  BOOL v637;
  unsigned int v638;
  _QWORD *v639;
  llvm::Use *v640;
  uint64_t v641;
  uint64_t v642;
  uint64_t v643;
  uint64_t v644;
  uint64_t v645;
  uint64_t v646;
  int v647;
  int v648;
  llvm::Use *v649;
  unsigned int v650;
  uint64_t v651;
  uint64_t v652;
  _QWORD *v653;
  uint64_t v654;
  uint64_t *v655;
  uint64_t *v656;
  void *v657;
  _QWORD *v659;
  unint64_t v660;
  _BYTE *v661;
  int32x2_t *v662;
  unint64_t v663;
  uint64_t v664;
  unsigned int v665;
  uint64_t v666;
  void **v667;
  void *v668;
  int v669;
  int v670;
  uint64_t v671;
  unsigned int v672;
  uint64_t v673;
  unsigned int v674;
  uint64_t *v675;
  uint64_t v676;
  uint64_t *v677;
  int v678;
  BOOL v679;
  unsigned int v680;
  int v681;
  uint64_t v682;
  uint64_t v683;
  unint64_t v684;
  uint64_t v685;
  _DWORD *v686;
  _DWORD *v687;
  int v688;
  uint64_t v689;
  int v690;
  __int128 *v691;
  size_t v692;
  const void *v693;
  uint64_t *v694;
  uint64_t *v695;
  uint64_t v696;
  _QWORD *v697;
  uint64_t *v698;
  uint64_t v699;
  uint64_t v700;
  uint64_t v701;
  uint64_t v702;
  uint64_t v703;
  int v704;
  int v705;
  uint64_t v706;
  int v707;
  uint64_t v708;
  int v709;
  unsigned int v710;
  _QWORD *v711;
  uint64_t v712;
  _QWORD *v713;
  int v714;
  BOOL v715;
  unsigned int v716;
  _QWORD *v717;
  _QWORD *v718;
  uint64_t v719;
  unint64_t v720;
  uint64_t v721;
  uint64_t v722;
  int v723;
  int v724;
  unsigned int v725;
  _QWORD *v726;
  uint64_t v727;
  _QWORD *v728;
  int v729;
  BOOL v730;
  unsigned int v731;
  _QWORD *v732;
  _QWORD *v733;
  uint64_t v734;
  unint64_t v735;
  uint64_t v736;
  void **v737;
  void **v738;
  _QWORD *v739;
  uint64_t *v740;
  int v741;
  uint64_t v742;
  int v743;
  unsigned int v744;
  _QWORD *v745;
  void *v746;
  _QWORD *v747;
  int v748;
  BOOL v749;
  unsigned int v750;
  _QWORD *v751;
  _QWORD *v752;
  void *v753;
  unint64_t v754;
  uint64_t v755;
  uint64_t v756;
  uint64_t v757;
  int v758;
  int v759;
  unsigned int v760;
  _QWORD *v761;
  uint64_t v762;
  _QWORD *v763;
  int v764;
  BOOL v765;
  unsigned int v766;
  _QWORD *v767;
  _QWORD *v768;
  uint64_t v769;
  unint64_t v770;
  uint64_t v771;
  uint64_t v772;
  uint64_t v773;
  uint64_t v774;
  unint64_t *v775;
  unint64_t *v776;
  void *v777;
  uint64_t v778;
  uint64_t v779;
  int v780;
  uint64_t v781;
  int v782;
  unsigned int v783;
  _QWORD *v784;
  void *v785;
  _QWORD *v786;
  int v787;
  BOOL v788;
  unsigned int v789;
  _QWORD *v790;
  _QWORD *v791;
  void *v792;
  unint64_t v793;
  uint64_t v794;
  int v795;
  int v796;
  unsigned int v797;
  _QWORD *v798;
  void *v799;
  _QWORD *v800;
  int v801;
  BOOL v802;
  unsigned int v803;
  _QWORD *v804;
  _QWORD *v805;
  void *v806;
  unint64_t v807;
  unint64_t *v808;
  unint64_t v809;
  uint64_t v810;
  _QWORD *v811;
  _QWORD *v812;
  _QWORD *v813;
  uint64_t *v814;
  int v815;
  uint64_t v816;
  int v817;
  unsigned int v818;
  _QWORD *v819;
  uint64_t v820;
  _QWORD *v821;
  int v822;
  BOOL v823;
  unsigned int v824;
  _QWORD *v825;
  _QWORD *v826;
  uint64_t v827;
  unint64_t v828;
  uint64_t v829;
  uint64_t v830;
  uint64_t v831;
  int v832;
  int v833;
  unsigned int v834;
  _QWORD *v835;
  void *v836;
  _QWORD *v837;
  int v838;
  BOOL v839;
  unsigned int v840;
  _QWORD *v841;
  _QWORD *v842;
  void *v843;
  unint64_t v844;
  int v845;
  uint64_t v846;
  int v847;
  unsigned int v848;
  uint64_t v849;
  uint64_t *v850;
  int v851;
  BOOL v852;
  unsigned int v853;
  uint64_t v854;
  int v855;
  unsigned int v856;
  uint64_t v857;
  uint64_t *v858;
  int v859;
  BOOL v860;
  unsigned int v861;
  unsigned int v862;
  unsigned int v863;
  uint64_t v864;
  _QWORD *v865;
  unsigned int v866;
  uint64_t v867;
  int v868;
  _QWORD *v869;
  uint64_t v870;
  uint64_t v871;
  uint64_t v872;
  uint64_t v873;
  void *v874;
  void *v875;
  unint64_t v876;
  unint64_t v877;
  _QWORD *v878;
  uint64_t v879;
  uint64_t v880;
  uint64_t v881;
  unsigned int v883;
  unsigned int v884;
  unsigned int v885;
  uint64_t *v886;
  uint64_t v887;
  uint64_t v888;
  uint64_t k;
  uint64_t v890;
  uint64_t v891;
  uint64_t v893;
  uint64_t v894;
  uint64_t v895;
  uint64_t v896;
  uint64_t v897;
  uint64_t v898;
  unsigned int v899;
  int v900;
  unsigned int v901;
  void *v902;
  int v903;
  unsigned int v904;
  char *v905;
  int v906;
  unsigned int v907;
  void *v908;
  int v909;
  uint64_t v910;
  uint64_t v911;
  uint64_t v912;
  _QWORD *v913;
  _QWORD *v914;
  char *v915;
  uint64_t v916;
  _QWORD *v917;
  uint64_t v918;
  _QWORD *v919;
  char *v920;
  int v921;
  uint64_t v922;
  _QWORD *v923;
  uint64_t v924;
  unint64_t v925;
  unint64_t v926;
  _QWORD *v927;
  uint64_t v928;
  uint64_t v929;
  unsigned int v930;
  uint64_t v931;
  int v932;
  _QWORD *v933;
  uint64_t v934;
  unint64_t v935;
  unint64_t v936;
  _QWORD *v937;
  uint64_t v938;
  uint64_t v939;
  uint64_t v940;
  uint64_t v941;
  uint64_t v942;
  void *v943;
  uint64_t v944;
  uint64_t v945;
  _QWORD *v946;
  uint64_t v947;
  char *v948;
  _QWORD *v949;
  uint64_t v950;
  uint64_t *v951;
  uint64_t *j;
  uint64_t v953;
  uint64_t v954;
  unsigned int v955;
  char *m;
  uint64_t v957;
  uint64_t v959;
  uint64_t v960;
  uint64_t *v961;
  uint64_t v962;
  _QWORD *v963;
  int *v964;
  int64x2_t v965;
  llvm::SmallPtrSetImplBase *v966;
  char *v967;
  uint64_t *v968;
  llvm::SmallPtrSetImplBase *v969;
  llvm::SmallPtrSetImplBase *v970;
  _QWORD *v971;
  uint64_t *v972;
  uint64_t v973;
  uint64_t v974;
  uint64_t v975;
  uint64_t ****v976;
  int v977;
  uint64_t v978;
  uint64_t v979;
  uint64_t v980;
  uint64_t *v981;
  int v982;
  uint64_t v983;
  uint64_t v984;
  uint64_t v986;
  char *v987;
  char *v988;
  uint64_t v989;
  int v990;
  _BYTE v991[128];
  _BYTE *v992;
  void *__b;
  uint64_t v994;
  int v995;
  _BYTE v996[128];
  uint64_t v997;
  uint64_t v998;
  void *v999;
  uint64_t v1000;
  _BYTE v1001[64];
  void *v1002;
  uint64_t v1003;
  _BYTE v1004[128];
  void *v1005;
  uint64_t v1006;
  _BYTE v1007[256];
  void *v1008;
  uint64_t v1009;
  _QWORD v1010[160];
  void *v1011;
  uint64_t v1012;
  _BYTE v1013[128];
  __int128 v1014;
  _BYTE v1015[16];
  void *v1016;
  int64x2_t v1017;
  void *v1018;
  uint64_t v1019;
  void *v1020[2];
  int v1021;
  _BYTE v1022[16];
  _QWORD **v1023;
  _QWORD *v1024;
  uint64_t v1025;
  __int128 v1026;
  __int128 v1027;
  __int128 v1028;
  _QWORD *v1029;
  _QWORD *v1030;
  _QWORD v1031[13];
  void *v1032;
  void *__src;
  uint64_t v1034;
  int v1035;
  _QWORD v1036[11];

  v4 = a1;
  v1036[8] = *MEMORY[0x1E0C80C00];
  v957 = a1 + 4912;
  if (a3)
  {
    v1008 = 0;
    if (sub_1C55B575C(a1 + 144, a3, &v1008))
    {
      v5 = v1008;
    }
    else
    {
      if ((*(_BYTE *)(v4 + 144) & 1) != 0)
      {
        v944 = a1 + 152;
        v945 = 16;
      }
      else
      {
        v944 = *(_QWORD *)(a1 + 152);
        v945 = *(unsigned int *)(a1 + 160);
      }
      v5 = (_DWORD *)(v944 + 16 * v945);
      v4 = a1;
    }
    v6 = v5[2];
  }
  else
  {
    v6 = 0;
  }
  v7 = *(_QWORD *)(v4 + 64);
  v8 = *(unsigned int *)(v7 + 4 * v6);
  v9 = v6 + 1;
  v10 = (_DWORD *)(v7 + 4 * v9);
  if (v9 >= *(_DWORD *)(v4 + 72))
    v11 = v4 + 936;
  else
    v11 = (unint64_t)v10;
  v977 = *(_DWORD *)v11;
  v1011 = v1013;
  v1012 = 0x1000000000;
  v1008 = v1010;
  v1010[0] = v8;
  v1009 = 0x1000000001;
  v1016 = &v1017.u64[1];
  v1017.i64[0] = 0x1000000000;
  v1025 = 0;
  v1024 = 0;
  v1023 = &v1024;
  LODWORD(v11) = 1;
  do
  {
    while (1)
    {
      v12 = v1008;
      v13 = (char *)v1008 + 8 * v11;
      v14 = *((_DWORD *)v13 - 2);
      v15 = *(_QWORD *)(v4 + 928);
      v16 = *(v13 - 4);
      v17 = v15 + 48 * v14;
      if (*(_DWORD *)(v17 + 32) == (_DWORD)v16)
        break;
      v19 = *(_QWORD *)(v17 + 24);
      v20 = *(unsigned int *)(v19 + 4 * v16);
      LODWORD(v1005) = *(_DWORD *)(v19 + 4 * v16);
      *(v13 - 4) = v16 + 1;
      if (v1025)
      {
        for (i = v1024; i; i = (_QWORD *)*i)
        {
          v22 = *((_DWORD *)i + 7);
          if (v20 >= v22)
          {
            if (v22 >= v20)
              goto LABEL_31;
            ++i;
          }
        }
      }
      else if (v1017.i32[0])
      {
        v23 = v1016;
        v24 = 4 * v1017.u32[0];
        while (*v23 != (_DWORD)v20)
        {
          ++v23;
          v24 -= 4;
          if (!v24)
            goto LABEL_28;
        }
        if (v24)
          goto LABEL_31;
      }
LABEL_28:
      v11 = v11;
      if (v11 >= HIDWORD(v1009))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1008, (uint64_t)v1010, v11 + 1, 8);
        v12 = v1008;
        v11 = v1009;
      }
      v12[v11] = v20;
      LODWORD(v1009) = v1009 + 1;
LABEL_31:
      sub_1C48302EC((uint64_t)&v1016, (unsigned int *)&v1005);
      LODWORD(v11) = v1009;
      if (!(_DWORD)v1009)
        goto LABEL_32;
    }
    v18 = *(_QWORD *)(v15 + 48 * v14 + 16);
    v11 = v1012;
    if (v1012 >= (unint64_t)HIDWORD(v1012))
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1011, (uint64_t)v1013, v1012 + 1, 8);
      v11 = v1012;
    }
    *((_QWORD *)v1011 + v11) = v18;
    LODWORD(v1012) = v1012 + 1;
    LODWORD(v11) = v1009 - 1;
    LODWORD(v1009) = v11;
  }
  while ((_DWORD)v11);
LABEL_32:
  sub_1C47655E8((uint64_t)&v1023, v1024);
  if (v1016 != &v1017.u64[1])
    free(v1016);
  if (v1008 != v1010)
    free(v1008);
  v25 = v1012;
  if ((_DWORD)v1012)
  {
    v26 = (char *)v1011 + 8 * v1012 - 8;
    if (v1011 < v26)
    {
      v27 = (char *)v1011 + 8;
      do
      {
        v28 = *((_QWORD *)v27 - 1);
        *((_QWORD *)v27 - 1) = *(_QWORD *)v26;
        *(_QWORD *)v26 = v28;
        v26 -= 8;
        v90 = v27 >= v26;
        v27 += 8;
      }
      while (!v90);
    }
  }
  v947 = v4 + 4648;
  v29 = v4 + 4672;
  v984 = v4 + 4672;
  if ((_DWORD)v8 != v977)
  {
    v974 = a2;
    while (1)
    {
      v30 = *(_QWORD *)(v4 + 2480);
      v31 = sub_1C55B5A4C(v29, (uint64_t *)(*(_QWORD *)(v4 + 928) + 48 * v8 + 16));
      v982 = v8;
      v32 = v30 + ((unint64_t)v8 << 6);
      v33 = *(unsigned int *)(v32 + 16);
      if ((_DWORD)v33)
      {
        v34 = *(unsigned int **)(v32 + 8);
        v35 = &v34[2 * v33];
        do
        {
          v36 = (_QWORD *)(*(_QWORD *)(a1 + 928) + 48 * *v34 + 16);
          if ((*(_BYTE *)v31 & 1) != 0)
          {
            v37 = 2;
            v38 = v31 + 8;
          }
          else
          {
            v37 = *(_DWORD *)(v31 + 16);
            if (!v37)
            {
              v47 = 0;
LABEL_62:
              *sub_1C4EE5C58(v31, *(_QWORD *)(a1 + 928) + 48 * *v34 + 16, (_QWORD *)(*(_QWORD *)(a1 + 928) + 48 * *v34 + 16), v47) = *v36;
              v48 = *v36;
              v49 = *(unsigned int *)(v31 + 32);
              if (v49 >= *(unsigned int *)(v31 + 36))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod(v31 + 24, v31 + 40, v49 + 1, 8);
                v49 = *(unsigned int *)(v31 + 32);
              }
              *(_QWORD *)(*(_QWORD *)(v31 + 24) + 8 * v49) = v48;
              ++*(_DWORD *)(v31 + 32);
              goto LABEL_65;
            }
            v38 = *(_QWORD *)(v31 + 8);
          }
          v39 = v37 - 1;
          v40 = ((*v36 >> 4) ^ (*v36 >> 9)) & v39;
          v41 = (_QWORD *)(v38 + 8 * v40);
          v42 = *v41;
          if (*v36 != *v41)
          {
            v43 = 0;
            v44 = 1;
            while (v42 != -4096)
            {
              if (v43)
                v45 = 0;
              else
                v45 = v42 == -8192;
              if (v45)
                v43 = v41;
              v46 = v40 + v44++;
              v40 = v46 & v39;
              v41 = (_QWORD *)(v38 + 8 * v40);
              v42 = *v41;
              if (*v36 == *v41)
                goto LABEL_65;
            }
            if (v43)
              v47 = v43;
            else
              v47 = v41;
            goto LABEL_62;
          }
LABEL_65:
          v34 += 2;
        }
        while (v34 != v35);
      }
      v50 = *(unsigned int *)(v32 + 48);
      if ((_DWORD)v50)
        break;
LABEL_93:
      v29 = v984;
      LODWORD(v8) = v8 + 1;
      v4 = a1;
      if (v982 + 1 == v977)
      {
        v25 = v1012;
        a2 = v974;
        goto LABEL_95;
      }
    }
    v51 = *(unsigned int **)(v32 + 40);
    v52 = &v51[v50];
    while (2)
    {
      v53 = (_QWORD *)(*(_QWORD *)(a1 + 928) + 48 * *v51 + 16);
      if ((*(_BYTE *)(v31 + 56) & 1) != 0)
      {
        v54 = 2;
        v55 = v31 + 64;
        goto LABEL_74;
      }
      v54 = *(_DWORD *)(v31 + 72);
      if (v54)
      {
        v55 = *(_QWORD *)(v31 + 64);
LABEL_74:
        v56 = v54 - 1;
        v57 = ((*v53 >> 4) ^ (*v53 >> 9)) & v56;
        v58 = (_QWORD *)(v55 + 8 * v57);
        v59 = *v58;
        if (*v53 != *v58)
        {
          v60 = 0;
          v61 = 1;
          while (v59 != -4096)
          {
            if (v60)
              v62 = 0;
            else
              v62 = v59 == -8192;
            if (v62)
              v60 = v58;
            v63 = v57 + v61++;
            v57 = v63 & v56;
            v58 = (_QWORD *)(v55 + 8 * v57);
            v59 = *v58;
            if (*v53 == *v58)
              goto LABEL_90;
          }
          if (v60)
            v64 = v60;
          else
            v64 = v58;
LABEL_87:
          *sub_1C4EE5C58(v31 + 56, *(_QWORD *)(a1 + 928) + 48 * *v51 + 16, (_QWORD *)(*(_QWORD *)(a1 + 928) + 48 * *v51 + 16), v64) = *v53;
          v65 = *v53;
          v66 = *(unsigned int *)(v31 + 88);
          if (v66 >= *(unsigned int *)(v31 + 92))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod(v31 + 80, v31 + 96, v66 + 1, 8);
            v66 = *(unsigned int *)(v31 + 88);
          }
          *(_QWORD *)(*(_QWORD *)(v31 + 80) + 8 * v66) = v65;
          ++*(_DWORD *)(v31 + 88);
        }
LABEL_90:
        if (++v51 == v52)
          goto LABEL_93;
        continue;
      }
      break;
    }
    v64 = 0;
    goto LABEL_87;
  }
LABEL_95:
  v1008 = v1010;
  v1009 = 0x1000000000;
  v1005 = v1007;
  v1006 = 0x1000000000;
  v1002 = v1004;
  v1003 = 0x1000000000;
  v992 = v996;
  __b = v996;
  v994 = 16;
  v995 = 0;
  v987 = v991;
  v988 = v991;
  v989 = 16;
  v990 = 0;
  v999 = v1001;
  v1000 = 0x800000000;
  if ((_DWORD)v25)
  {
    v67 = v1011;
    v948 = (char *)v1011 + 8 * v25;
    v68 = v4 + 4928;
    v959 = v4 + 4952;
    v961 = (uint64_t *)(v4 + 5040);
    v953 = v4 + 5216;
    v950 = v4 + 4624;
    v983 = v4 + 4864;
    v964 = (int *)(v4 + 4696);
    v971 = (_QWORD *)(v4 + 4704);
    v955 = (a3 >> 4) ^ (a3 >> 9);
    v968 = (uint64_t *)(a2 + 72);
    v946 = (_QWORD *)(v4 + 4888);
    v954 = v4 + 4768;
    v965 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
    v966 = (llvm::SmallPtrSetImplBase *)(v4 + 4976);
    v960 = v4 + 4928;
    while (1)
    {
      v69 = *v67;
      if (HIDWORD(v1000))
      {
        v70 = 0;
      }
      else
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v999, (uint64_t)v1001, 1uLL, 8);
        v70 = v1000;
      }
      *((_QWORD *)v999 + v70) = v69;
      v71 = v1000 + 1;
      LODWORD(v1000) = v1000 + 1;
      v72 = *(_QWORD *)(v4 + 4648);
      v73 = *(_DWORD *)(v4 + 4664);
      if (v73)
      {
        v74 = v73 - 1;
        v75 = (v73 - 1) & ((v69 >> 4) ^ (v69 >> 9));
        v76 = (uint64_t *)(v72 + 40 * v75);
        v77 = *v76;
        if (*v76 == v69)
          goto LABEL_106;
        v78 = 1;
        while (v77 != -4096)
        {
          v79 = v75 + v78++;
          v75 = v79 & v74;
          v76 = (uint64_t *)(v72 + 40 * (v79 & v74));
          v77 = *v76;
          if (*v76 == v69)
            goto LABEL_106;
        }
      }
      v76 = (uint64_t *)(v72 + 40 * v73);
LABEL_106:
      v949 = v67;
      if ((uint64_t *)(v72 + 40 * v73) != v76)
      {
        v80 = (const void *)v76[1];
        v81 = *((unsigned int *)v76 + 4);
        v82 = v81 + v71;
        if (v82 > HIDWORD(v1000))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v999, (uint64_t)v1001, v82, 8);
          v71 = v1000;
          if ((_DWORD)v81)
          {
LABEL_109:
            memcpy((char *)v999 + 8 * v71, v80, 8 * v81);
            v71 = v1000;
          }
        }
        else if ((_DWORD)v81)
        {
          goto LABEL_109;
        }
        v71 += v81;
        LODWORD(v1000) = v71;
      }
      if (!v71)
        goto LABEL_1366;
      v83 = (uint64_t *)v999;
      v84 = (uint64_t *)((char *)v999 + 8 * v71);
      v951 = v84;
      do
      {
        v85 = *v83;
        v986 = *v83;
        if (*(_DWORD *)(sub_1C55B5A4C(v984, &v986) + 32) < 2u)
          goto LABEL_1297;
        v86 = *(uint64_t **)(a1 + 56);
        v998 = v85;
        v87 = *(_QWORD *)(v85 + 8);
        for (j = v83; v87; v87 = *(_QWORD *)(v87 + 8))
        {
          v88 = *(_QWORD *)(v87 + 24);
          v89 = *(unsigned __int8 *)(v88 + 16);
          if (v88)
            v90 = v89 >= 0x1C;
          else
            v90 = 0;
          if (v90 && v89 - 29 < 0xB)
            break;
        }
        v1016 = &v1017.u64[1];
        v1017.i64[0] = 0x800000000;
        sub_1C4DBBCC0((unsigned int *)&v1016, v87, 0);
        v92 = sub_1C55B5A4C(v984, &v998);
        v93 = v92;
        v94 = *(unsigned int *)(v92 + 32);
        if ((_DWORD)v94)
        {
          v95 = *(uint64_t **)(v92 + 24);
          v96 = 8 * v94;
          do
          {
            v97 = *v95++;
            sub_1C4774094(v966, v97);
            v96 -= 8;
          }
          while (v96);
        }
        v98 = *((_DWORD *)v86 + 4);
        v962 = v93;
        if (!v98)
          goto LABEL_133;
        v99 = *v86;
        v100 = v98 - 1;
        v101 = (v98 - 1) & ((v85 >> 4) ^ (v85 >> 9));
        v102 = *(_QWORD *)(*v86 + 16 * v101);
        if (v85 != v102)
        {
          v103 = 1;
          while (v102 != -4096)
          {
            v104 = v101 + v103++;
            v101 = v104 & v100;
            v102 = *(_QWORD *)(v99 + 16 * v101);
            if (v85 == v102)
              goto LABEL_132;
          }
LABEL_133:
          v105 = 0;
          goto LABEL_134;
        }
LABEL_132:
        v105 = *(_QWORD *)(v99 + 16 * v101 + 8);
LABEL_134:
        if (!v1017.i32[0])
          goto LABEL_338;
        v106 = (void **)v1016;
        v107 = (void **)((char *)v1016 + 8 * v1017.u32[0]);
        v108 = (_QWORD *)a3;
        v109 = (uint64_t)v966;
        do
        {
          v110 = *v106;
          v1032 = v110;
          v111 = *v86;
          v112 = *((_DWORD *)v86 + 4);
          v113 = v110 >> 4;
          if (v112)
          {
            v114 = (v113 ^ (v110 >> 9)) & (v112 - 1);
            v115 = *(void **)(v111 + 16 * v114);
            if (v110 == v115)
            {
LABEL_141:
              v118 = *(_QWORD **)(v111 + 16 * v114 + 8);
              if (!v105)
                goto LABEL_145;
              goto LABEL_144;
            }
            v116 = 1;
            while (v115 != (void *)-4096)
            {
              v117 = v114 + v116++;
              v114 = v117 & (v112 - 1);
              v115 = *(void **)(v111 + 16 * v114);
              if (v110 == v115)
                goto LABEL_141;
            }
          }
          v118 = 0;
          if (!v105)
            goto LABEL_145;
LABEL_144:
          if (**(_QWORD **)(v105 + 32) == v85)
          {
            while (v118 != (_QWORD *)v105)
            {
              if (!v118)
                goto LABEL_145;
              v118 = (_QWORD *)*v118;
            }
            goto LABEL_198;
          }
LABEL_145:
          if (v112)
          {
            v119 = v113 ^ (v110 >> 9);
            v120 = v112 - 1;
            v121 = v119 & (v112 - 1);
            v122 = *(void **)(v111 + 16 * v121);
            if (v110 == v122)
            {
LABEL_150:
              v125 = *(_QWORD **)(v111 + 16 * v121 + 8);
              if (!v108)
                goto LABEL_158;
              goto LABEL_153;
            }
            v123 = 1;
            while (v122 != (void *)-4096)
            {
              v124 = v121 + v123++;
              v121 = v124 & v120;
              v122 = *(void **)(v111 + 16 * v121);
              if (v110 == v122)
                goto LABEL_150;
            }
          }
          v125 = 0;
          if (!v108)
            goto LABEL_158;
LABEL_153:
          if (v125 == v108)
            goto LABEL_167;
          v126 = v108;
          while (v126)
          {
            v126 = (_QWORD *)*v126;
            if (v126 == v125)
              goto LABEL_167;
          }
LABEL_158:
          if (v125 && v125 != v108)
          {
            do
            {
              v127 = v125;
              v125 = (_QWORD *)*v125;
              if (v125)
                v128 = v125 == v108;
              else
                v128 = 1;
            }
            while (!v128);
            if (v127 != v125)
              v110 = *(void **)v127[4];
          }
LABEL_167:
          sub_1C55B5F30(v68, (uint64_t *)&v1032);
          v130 = v129;
          v131 = v129 + 8;
          v132 = sub_1C477672C(v109, (uint64_t)v110);
          v133 = *(_QWORD *)(a1 + 4984);
          v134 = 4996;
          if (v133 != *(_QWORD *)(a1 + 4976))
            v134 = 4992;
          if (v132 != (_QWORD *)(v133 + 8 * *(unsigned int *)(a1 + v134)))
          {
            v135 = *(unsigned int *)(v130 + 16);
            if (v135 >= *(unsigned int *)(v130 + 20))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(v131, v130 + 24, v135 + 1, 8);
              v135 = *(unsigned int *)(v130 + 16);
            }
            v68 = v960;
            v109 = (uint64_t)v966;
            *(_QWORD *)(*(_QWORD *)(v130 + 8) + 8 * v135) = v110;
            ++*(_DWORD *)(v130 + 16);
            v108 = (_QWORD *)a3;
            goto LABEL_198;
          }
          *(_QWORD *)&v1026 = 0;
          if ((sub_1C55B5B78(*(_QWORD *)(a1 + 4672), *(_DWORD *)(a1 + 4688), (uint64_t)v110, &v1026) & 1) != 0)
            v136 = v1026;
          else
            v136 = *(_QWORD *)(a1 + 4672) + 120 * *(unsigned int *)(a1 + 4688);
          v109 = (uint64_t)v966;
          v137 = *(const void **)(v136 + 32);
          v138 = *(unsigned int *)(v136 + 40);
          *(_QWORD *)&v1026 = &v1027;
          *((_QWORD *)&v1026 + 1) = 0x800000000;
          if (v138 >= 9)
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1026, (uint64_t)&v1027, v138, 8);
            v139 = DWORD2(v1026);
            v140 = (__int128 *)v1026;
          }
          else
          {
            if (!(_DWORD)v138)
            {
              v141 = 0;
              goto LABEL_180;
            }
            v139 = 0;
            v140 = &v1027;
          }
          memcpy((char *)v140 + 8 * v139, v137, 8 * v138);
          v141 = DWORD2(v1026);
LABEL_180:
          v142 = v141 + v138;
          DWORD2(v1026) = v142;
          if (v142)
          {
            while (1)
            {
              while (1)
              {
                v143 = *(_QWORD *)(v1026 + 8 * v142 - 8);
                DWORD2(v1026) = v142 - 1;
                *(_QWORD *)&v1014 = v143;
                v144 = sub_1C477672C(v109, v143);
                v145 = *(_QWORD *)(a1 + 4984);
                v146 = 4996;
                if (v145 != *(_QWORD *)(a1 + 4976))
                  v146 = 4992;
                if (v144 == (_QWORD *)(v145 + 8 * *(unsigned int *)(a1 + v146)))
                  break;
                v147 = *(unsigned int *)(v130 + 16);
                if (v147 >= *(unsigned int *)(v130 + 20))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod(v131, v130 + 24, v147 + 1, 8);
                  v147 = *(unsigned int *)(v130 + 16);
                }
                *(_QWORD *)(*(_QWORD *)(v130 + 8) + 8 * v147) = v143;
                ++*(_DWORD *)(v130 + 16);
                v142 = DWORD2(v1026);
                if (!DWORD2(v1026))
                  goto LABEL_195;
              }
              v148 = sub_1C55B5A4C(v984, (uint64_t *)&v1014);
              v149 = *(const void **)(v148 + 24);
              v150 = *(unsigned int *)(v148 + 32);
              v151 = DWORD2(v1026);
              v152 = DWORD2(v1026) + v150;
              if (v152 > HIDWORD(v1026))
                break;
              if ((_DWORD)v150)
                goto LABEL_190;
LABEL_191:
              v142 = v151 + v150;
              DWORD2(v1026) = v142;
              v109 = (uint64_t)v966;
              if (!v142)
                goto LABEL_195;
            }
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1026, (uint64_t)&v1027, v152, 8);
            v151 = DWORD2(v1026);
            if (!(_DWORD)v150)
              goto LABEL_191;
LABEL_190:
            memcpy((void *)(v1026 + 8 * v151), v149, 8 * v150);
            v151 = DWORD2(v1026);
            goto LABEL_191;
          }
LABEL_195:
          if ((__int128 *)v1026 != &v1027)
            free((void *)v1026);
          v108 = (_QWORD *)a3;
          v68 = v960;
LABEL_198:
          ++v106;
        }
        while (v106 != v107);
        if (!v1017.i32[0])
          goto LABEL_338;
        v153 = (uint64_t *)v1016;
        v967 = (char *)v1016 + 8 * v1017.u32[0];
        do
        {
          v972 = v153;
          v154 = *v153;
          v997 = *v153;
          sub_1C55B5F30(v68, &v997);
          v156 = *(unsigned int *)(v155 + 16);
          v157 = a1;
          v158 = v959;
          if (!(_DWORD)v156)
            goto LABEL_332;
          v159 = v155;
          v160 = *(void ***)(v155 + 8);
          v161 = *(_QWORD *)(a1 + 4952);
          v162 = *(unsigned int *)(a1 + 4968);
          v163 = &v160[v156];
          v164 = v162 - 1;
          v165 = v160;
          while (1)
          {
            if ((_DWORD)v162)
            {
              v166 = *v165;
              v167 = (*v165 >> 4) ^ (*v165 >> 9);
              LODWORD(v168) = v167 & v164;
              v169 = v161 + 16 * (v167 & v164);
              v170 = *(void **)v169;
              if (*v165 != *(void **)v169)
              {
                v171 = 1;
                do
                {
                  if (v170 == (void *)-4096)
                    goto LABEL_217;
                  v172 = v168 + v171++;
                  v168 = v172 & v164;
                  v170 = *(void **)(v161 + 16 * v168);
                }
                while (v166 != v170);
                v169 = v161 + 16 * v168;
              }
              if (v169 != v161 + 16 * v162)
                break;
            }
LABEL_217:
            if (++v165 == v163)
              goto LABEL_293;
          }
          if (v166)
          {
            v173 = *(_DWORD *)(v169 + 8);
            v174 = *v961;
            v175 = *v961 + 80 * v173;
            v176 = *(unsigned int *)(v175 + 8);
            v978 = v175;
            if (v176 >= *(unsigned int *)(v175 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(v175, v175 + 16, v176 + 1, 8);
              v175 = v978;
              v176 = *(unsigned int *)(v978 + 8);
            }
            *(_QWORD *)(*(_QWORD *)v175 + 8 * v176) = v154;
            ++*(_DWORD *)(v175 + 8);
            v177 = (llvm::SmallPtrSetImplBase *)(v174 + 80 * v173 + 32);
            v178 = 8 * v156;
            v179 = (uint64_t *)v160;
            do
            {
              v180 = *v179++;
              sub_1C4774094(v177, v180);
              v178 -= 8;
            }
            while (v178);
            v969 = v177;
            while (1)
            {
              v1032 = 0;
              v181 = *v160;
              v1032 = v181;
              v182 = *(_QWORD *)(v157 + 4952);
              v183 = *(unsigned int *)(v157 + 4968);
              if (v181 == v166)
              {
                if ((_DWORD)v183)
                {
                  v189 = v183 - 1;
                  v190 = v189 & v167;
                  v191 = (_QWORD *)(v182 + 16 * (v189 & v167));
                  v192 = *v191;
                  if (v166 != (void *)*v191)
                  {
                    v193 = 0;
                    v194 = 1;
                    while (v192 != -4096)
                    {
                      if (v193)
                        v195 = 0;
                      else
                        v195 = v192 == -8192;
                      if (v195)
                        v193 = v191;
                      v196 = v190 + v194++;
                      v190 = v196 & v189;
                      v191 = (_QWORD *)(v182 + 16 * v190);
                      v192 = *v191;
                      if (v166 == (void *)*v191)
                        goto LABEL_247;
                    }
                    if (v193)
                      v197 = v193;
                    else
                      v197 = v191;
LABEL_246:
                    v191 = sub_1C4DE3FA0(v158, (uint64_t)&v1032, (uint64_t *)&v1032, v197);
                    *v191 = v1032;
                    *((_DWORD *)v191 + 2) = 0;
                  }
LABEL_247:
                  *((_DWORD *)v191 + 2) = v173;
                  goto LABEL_288;
                }
                v197 = 0;
                goto LABEL_246;
              }
              if ((_DWORD)v183)
              {
                LODWORD(v184) = (v183 - 1) & ((v181 >> 4) ^ (v181 >> 9));
                v185 = v182 + 16 * v184;
                v186 = *(void **)v185;
                if (v181 != *(void **)v185)
                {
                  v187 = 1;
                  do
                  {
                    if (v186 == (void *)-4096)
                      goto LABEL_248;
                    v188 = v184 + v187++;
                    v184 = v188 & (v183 - 1);
                    v186 = *(void **)(v182 + 16 * v184);
                  }
                  while (v181 != v186);
                  v185 = v182 + 16 * v184;
                }
              }
              else
              {
LABEL_248:
                v185 = v182 + 16 * v183;
              }
              if (v182 + 16 * v183 != v185)
              {
                v198 = *(_DWORD *)(v185 + 8);
                if (v198 != v173)
                  break;
              }
LABEL_288:
              if (++v160 == v163)
                goto LABEL_332;
            }
            v199 = *v961;
            v200 = *v961 + 80 * v198;
            v201 = *(const void **)v200;
            v975 = v200;
            v202 = *(unsigned int *)(v200 + 8);
            v203 = v978;
            v204 = *(unsigned int *)(v978 + 8);
            if (v204 + v202 > (unint64_t)*(unsigned int *)(v978 + 12))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod(v978, v978 + 16, v204 + v202, 8);
              v203 = v978;
              LODWORD(v204) = *(_DWORD *)(v978 + 8);
              if (!(_DWORD)v202)
              {
LABEL_254:
                *(_DWORD *)(v203 + 8) = v204 + v202;
                v205 = v199 + 80 * v198;
                v208 = *(uint64_t **)(v205 + 32);
                v206 = *(uint64_t **)(v205 + 40);
                v207 = v205 + 32;
                v45 = v206 == v208;
                v209 = 16;
                if (v45)
                  v209 = 20;
                v210 = *(unsigned int *)(v207 + v209);
                if ((_DWORD)v210)
                {
                  v211 = 8 * v210;
                  v212 = v206;
                  v157 = a1;
                  v158 = v959;
                  while ((unint64_t)*v212 >= 0xFFFFFFFFFFFFFFFELL)
                  {
                    ++v212;
                    v211 -= 8;
                    if (!v211)
                      goto LABEL_268;
                  }
                }
                else
                {
                  v212 = v206;
                  v157 = a1;
                  v158 = v959;
                }
                v213 = &v206[v210];
                if (v212 != v213)
                {
                  v214 = *v212;
                  while (1)
                  {
                    sub_1C4774094(v969, v214);
                    v215 = (unint64_t *)(v212 + 1);
                    do
                    {
                      if (v215 == (unint64_t *)v213)
                        goto LABEL_268;
                      v216 = *v215++;
                      v214 = v216;
                    }
                    while (v216 > 0xFFFFFFFFFFFFFFFDLL);
                    v212 = (uint64_t *)(v215 - 1);
                  }
                }
LABEL_268:
                *(_DWORD *)(v185 + 8) = v173;
                v217 = *(unsigned int *)(v975 + 8);
                if ((_DWORD)v217)
                {
                  v218 = *(uint64_t **)v975;
                  v219 = *(_QWORD *)v975 + 8 * v217;
                  while (1)
                  {
                    *(_QWORD *)&v1026 = 0;
                    v220 = *v218;
                    *(_QWORD *)&v1026 = *v218;
                    v221 = *(_DWORD *)(v157 + 4968);
                    if (!v221)
                      break;
                    v222 = *(_QWORD *)(v157 + 4952);
                    v223 = v221 - 1;
                    v224 = ((v220 >> 4) ^ (v220 >> 9)) & v223;
                    v225 = (_QWORD *)(v222 + 16 * v224);
                    v226 = *v225;
                    if (v220 != *v225)
                    {
                      v227 = 0;
                      v228 = 1;
                      while (v226 != -4096)
                      {
                        if (v227)
                          v229 = 0;
                        else
                          v229 = v226 == -8192;
                        if (v229)
                          v227 = v225;
                        v230 = v224 + v228++;
                        v224 = v230 & v223;
                        v225 = (_QWORD *)(v222 + 16 * v224);
                        v226 = *v225;
                        if (v220 == *v225)
                          goto LABEL_285;
                      }
                      if (v227)
                        v231 = v227;
                      else
                        v231 = v225;
                      goto LABEL_284;
                    }
LABEL_285:
                    *((_DWORD *)v225 + 2) = v173;
                    if (++v218 == (uint64_t *)v219)
                      goto LABEL_288;
                  }
                  v231 = 0;
LABEL_284:
                  v225 = sub_1C4DE3FA0(v158, (uint64_t)&v1026, (uint64_t *)&v1026, v231);
                  *v225 = v1026;
                  *((_DWORD *)v225 + 2) = 0;
                  goto LABEL_285;
                }
                goto LABEL_288;
              }
            }
            else if (!(_DWORD)v202)
            {
              goto LABEL_254;
            }
            memcpy((void *)(*(_QWORD *)v203 + 8 * v204), v201, 8 * v202);
            v203 = v978;
            LODWORD(v204) = *(_DWORD *)(v978 + 8);
            goto LABEL_254;
          }
LABEL_293:
          v232 = *(_DWORD *)(a1 + 5048);
          do
          {
            *(_QWORD *)&v1026 = 0;
            v233 = *v160;
            *(_QWORD *)&v1026 = *v160;
            v234 = *(_DWORD *)(a1 + 4968);
            if (v234)
            {
              v235 = *(_QWORD *)(a1 + 4952);
              v236 = v234 - 1;
              v237 = ((v233 >> 4) ^ (v233 >> 9)) & v236;
              v238 = (_QWORD *)(v235 + 16 * v237);
              v239 = (void *)*v238;
              if (v233 == (void *)*v238)
                goto LABEL_309;
              v240 = 0;
              v241 = 1;
              while (v239 != (void *)-4096)
              {
                if (v240)
                  v242 = 0;
                else
                  v242 = v239 == (void *)-8192;
                if (v242)
                  v240 = v238;
                v243 = v237 + v241++;
                v237 = v243 & v236;
                v238 = (_QWORD *)(v235 + 16 * v237);
                v239 = (void *)*v238;
                if (v233 == (void *)*v238)
                  goto LABEL_309;
              }
              if (v240)
                v244 = v240;
              else
                v244 = v238;
            }
            else
            {
              v244 = 0;
            }
            v238 = sub_1C4DE3FA0(v959, (uint64_t)&v1026, (uint64_t *)&v1026, v244);
            *v238 = v1026;
            *((_DWORD *)v238 + 2) = 0;
LABEL_309:
            *((_DWORD *)v238 + 2) = v232;
            ++v160;
          }
          while (v160 != v163);
          *(_QWORD *)&v1014 = v1015;
          *((_QWORD *)&v1014 + 1) = 0x200000000;
          sub_1C4848C0C((unsigned int *)&v1014, 1uLL, v154);
          v245 = *(uint64_t **)(v159 + 8);
          v246 = *(unsigned int *)(v159 + 16);
          v1032 = v1036;
          __src = v1036;
          v1034 = 2;
          v1035 = 0;
          if ((_DWORD)v246)
          {
            v247 = 8 * v246;
            do
            {
              v248 = *v245++;
              sub_1C4774094((llvm::SmallPtrSetImplBase *)&v1032, v248);
              v247 -= 8;
            }
            while (v247);
          }
          *(_QWORD *)&v1026 = &v1027;
          *((_QWORD *)&v1026 + 1) = 0x200000000;
          v249 = DWORD2(v1014);
          if (DWORD2(v1014))
          {
            if ((_BYTE *)v1014 == v1015)
            {
              v250 = &v1027;
              v251 = v1015;
              v252 = DWORD2(v1014);
              if (DWORD2(v1014) < 3uLL)
                goto LABEL_318;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1026, (uint64_t)&v1027, DWORD2(v1014), 8);
              v252 = DWORD2(v1014);
              if (DWORD2(v1014))
              {
                v251 = (_BYTE *)v1014;
                v250 = (__int128 *)v1026;
LABEL_318:
                memcpy(v250, v251, 8 * v252);
              }
              DWORD2(v1026) = v249;
            }
            else
            {
              v1026 = v1014;
              *(_QWORD *)&v1014 = v1015;
              HIDWORD(v1014) = 0;
            }
            DWORD2(v1014) = 0;
          }
          *(_QWORD *)&v1028 = v1031;
          if (__src == v1032)
          {
            *((_QWORD *)&v1028 + 1) = v1031;
            v253 = HIDWORD(v1034);
            if (HIDWORD(v1034))
              memmove(v1031, __src, 8 * HIDWORD(v1034));
          }
          else
          {
            *((_QWORD *)&v1028 + 1) = __src;
            __src = v1032;
            v253 = HIDWORD(v1034);
          }
          v1029 = (_QWORD *)__PAIR64__(v253, v1034);
          LODWORD(v1030) = v1035;
          v1034 = 2;
          v1035 = 0;
          sub_1C55B5DEC((uint64_t)v961, (unint64_t)&v1026);
          if (*((_QWORD *)&v1028 + 1) != (_QWORD)v1028)
            free(*((void **)&v1028 + 1));
          if ((__int128 *)v1026 != &v1027)
            free((void *)v1026);
          if (__src != v1032)
            free(__src);
          if ((_BYTE *)v1014 != v1015)
            free((void *)v1014);
LABEL_332:
          v153 = v972 + 1;
          v68 = v960;
        }
        while (v972 + 1 != (uint64_t *)v967);
LABEL_338:
        *(_QWORD *)&v1026 = &v1027;
        *((_QWORD *)&v1026 + 1) = 0x800000000;
        v1030 = 0;
        v1031[0] = 0;
        v1029 = &v1030;
        v254 = *(unsigned int *)(v962 + 32);
        if ((_DWORD)v254)
        {
          v255 = *(void ***)(v962 + 24);
          v256 = &v255[v254];
          v257 = a1;
          v258 = (_DWORD *)v959;
          v259 = (_QWORD *)v953;
          while (1)
          {
            v1032 = 0;
            v260 = *v255;
            v1032 = *v255;
            LODWORD(v1014) = 0;
            v261 = *(_DWORD *)(a1 + 4968);
            if (!v261)
              break;
            v262 = *(_QWORD *)(a1 + 4952);
            v263 = v261 - 1;
            v264 = v263 & ((v260 >> 4) ^ (v260 >> 9));
            v265 = (_QWORD *)(v262 + 16 * v264);
            v266 = (void *)*v265;
            if (v260 != (void *)*v265)
            {
              v267 = 0;
              v268 = 1;
              while (v266 != (void *)-4096)
              {
                if (v267)
                  v269 = 0;
                else
                  v269 = v266 == (void *)-8192;
                if (v269)
                  v267 = v265;
                v270 = v264 + v268++;
                v264 = v270 & v263;
                v265 = (_QWORD *)(v262 + 16 * v264);
                v266 = (void *)*v265;
                if (v260 == (void *)*v265)
                  goto LABEL_355;
              }
              if (v267)
                v271 = v267;
              else
                v271 = v265;
              goto LABEL_354;
            }
LABEL_355:
            LODWORD(v1014) = *((_DWORD *)v265 + 2);
            if ((sub_1C484FF44((uint64_t)&v1026, (unsigned int *)&v1014) & 0x100000000) != 0)
              sub_1C55B5DEC(v953, *v961 + 80 * v1014);
            if (++v255 == v256)
            {
              v272 = v1030;
              goto LABEL_361;
            }
          }
          v271 = 0;
LABEL_354:
          v265 = sub_1C4DE3FA0(v959, (uint64_t)&v1032, (uint64_t *)&v1032, v271);
          *v265 = v1032;
          *((_DWORD *)v265 + 2) = 0;
          goto LABEL_355;
        }
        v272 = 0;
        v257 = a1;
        v258 = (_DWORD *)v959;
        v259 = (_QWORD *)v953;
LABEL_361:
        sub_1C47655E8((uint64_t)&v1029, v272);
        if ((__int128 *)v1026 != &v1027)
          free((void *)v1026);
        if (v1016 != &v1017.u64[1])
          free(v1016);
        if (*(_DWORD *)(v257 + 5224) < 2u)
          goto LABEL_1272;
        v273 = v986;
        v274 = v1006;
        if (v1006 >= (unint64_t)HIDWORD(v1006))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1005, (uint64_t)v1007, v1006 + 1, 16);
          v274 = v1006;
        }
        v275 = (uint64_t *)((char *)v1005 + 16 * v274);
        *v275 = v273;
        v275[1] = 0;
        v90 = __CFADD__((_DWORD)v1006, 1);
        v276 = v1006 + 1;
        LODWORD(v1006) = v1006 + 1;
        if (!v90)
        {
          while (1)
          {
            while (1)
            {
              v310 = (char *)v1005 + 16 * v276;
              v311 = *((_QWORD *)v310 - 2);
              v312 = *(_QWORD *)(v311 + 40);
              if (v312 == v311 + 40)
              {
                v313 = 0;
              }
              else
              {
                if (v312)
                  v313 = v312 - 24;
                else
                  v313 = 0;
                if (*(unsigned __int8 *)(v313 + 16) - 29 >= 0xB)
                  v313 = 0;
              }
              v314 = *(unsigned __int8 *)(v313 + 16);
              if (v314 != 30)
                __asm { BR              X12 }
              v315 = (*(_DWORD *)(v313 + 20) & 0x7FFFFFF) == 3 ? 2 : 1;
              v316 = *(v310 - 8);
              if (v315 != (_DWORD)v316)
                break;
              v317 = v1003;
              if (v1003 >= (unint64_t)HIDWORD(v1003))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1002, (uint64_t)v1004, v1003 + 1, 8);
                v317 = v1003;
              }
              *((_QWORD *)v1002 + v317) = v311;
              LODWORD(v1003) = v1003 + 1;
              v276 = v1006 - 1;
              LODWORD(v1006) = v276;
              if (!v276)
                goto LABEL_370;
            }
            v318 = *(_QWORD *)(v313 - 32 * v316 - 32);
            v1016 = 0;
            if (sub_1C4B04E2C(*(_QWORD *)(a1 + 4624), *(_DWORD *)(a1 + 4640), v318, &v1016))
              v319 = v1016 == (void *)(*(_QWORD *)(a1 + 4624) + 16 * *(unsigned int *)(a1 + 4640));
            else
              v319 = 1;
            v320 = v318;
            if (!v319)
              v320 = *((_QWORD *)v1016 + 1);
            ++*(v310 - 8);
            v321 = *(uint64_t **)(a1 + 56);
            v322 = *((_DWORD *)v321 + 4);
            if (!v322)
              goto LABEL_455;
            v323 = *v321;
            v324 = v322 - 1;
            v325 = (v322 - 1) & ((v320 >> 4) ^ (v320 >> 9));
            v326 = *(_QWORD *)(v323 + 16 * v325);
            if (v320 != v326)
              break;
LABEL_454:
            v329 = *(_QWORD **)(v323 + 16 * v325 + 8);
LABEL_456:
            if ((sub_1C55B5B78(*(_QWORD *)(a1 + 4672), *(_DWORD *)(a1 + 4688), v320, &v1016) & 1) != 0)
            {
              *(_QWORD *)&v1026 = &v1027;
              *((_QWORD *)&v1026 + 1) = 0xA00000000;
              sub_1C4848C0C((unsigned int *)&v1026, 1uLL, v320);
              v1016 = &v1019;
              v1017.i64[0] = (uint64_t)&v1019;
              v1017.i64[1] = 16;
              LODWORD(v1018) = 0;
              sub_1C4774094((llvm::SmallPtrSetImplBase *)&v1016, v320);
              v330 = (void *)v1017.i64[0];
              v331 = v1016;
              v332 = DWORD2(v1026);
              if (!DWORD2(v1026))
                goto LABEL_481;
              while (1)
              {
                v333 = *(_QWORD *)(v1026 + 8 * v332-- - 8);
                DWORD2(v1026) = v332;
                v1032 = 0;
                if (sub_1C55B5B78(*(_QWORD *)(a1 + 4672), *(_DWORD *)(a1 + 4688), v333, &v1032))
                {
                  v334 = (unsigned int *)v1032;
                  v335 = *(_QWORD *)(a1 + 4672);
                  v336 = *(_DWORD *)(a1 + 4688);
                }
                else
                {
                  v335 = *(_QWORD *)(a1 + 4672);
                  v336 = *(_DWORD *)(a1 + 4688);
                  v334 = (unsigned int *)(v335 + 120 * v336);
                }
                if (v334 != (unsigned int *)(v335 + 120 * v336))
                {
                  v337 = v334[10];
                  if ((_DWORD)v337)
                  {
                    v338 = (uint64_t *)*((_QWORD *)v334 + 4);
                    v339 = *v338;
                    if (*v338 == v273)
                    {
                      v332 = v273 != 0;
LABEL_481:
                      if (v330 != v331)
                        free(v330);
                      if ((__int128 *)v1026 != &v1027)
                        free((void *)v1026);
                      if (v332)
                      {
LABEL_486:
                        v346 = (char *)sub_1C477672C((uint64_t)&v987, v318);
                        if (v988 == v987)
                          v347 = (uint64_t *)((char *)&v989 + 4);
                        else
                          v347 = &v989;
                        if (v346 == &v988[8 * *(unsigned int *)v347])
                        {
                          v348 = v1006;
                          if (v1006 >= (unint64_t)HIDWORD(v1006))
                          {
                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1005, (uint64_t)v1007, v1006 + 1, 16);
                            v348 = v1006;
                          }
                          v349 = (uint64_t *)((char *)v1005 + 16 * v348);
                          *v349 = v318;
                          v349[1] = 0;
                          LODWORD(v1006) = v1006 + 1;
                        }
                        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v987, v318);
                      }
                      goto LABEL_494;
                    }
                    v340 = v338 + 1;
                    v341 = 8 * v337 - 8;
                    while (1)
                    {
                      v342 = sub_1C477672C((uint64_t)&v1016, v339);
                      v330 = (void *)v1017.i64[0];
                      v331 = v1016;
                      v343 = &v1017.i8[12];
                      if ((void *)v1017.i64[0] != v1016)
                        v343 = &v1017.i8[8];
                      if (v342 == (_QWORD *)(v1017.i64[0] + 8 * *(unsigned int *)v343))
                      {
                        v344 = DWORD2(v1026);
                        if (DWORD2(v1026) >= (unint64_t)HIDWORD(v1026))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1026, (uint64_t)&v1027, DWORD2(v1026) + 1, 8);
                          v344 = DWORD2(v1026);
                        }
                        *(_QWORD *)(v1026 + 8 * v344) = v339;
                        ++DWORD2(v1026);
                        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v1016, v339);
                        v330 = (void *)v1017.i64[0];
                        v331 = v1016;
                      }
                      if (!v341)
                        break;
                      v345 = *v340++;
                      v339 = v345;
                      v341 -= 8;
                      if (v345 == v273)
                      {
                        v332 = v273 != 0;
                        goto LABEL_481;
                      }
                    }
                    v332 = DWORD2(v1026);
                  }
                }
                if (!v332)
                  goto LABEL_481;
              }
            }
            if (!a3)
              goto LABEL_486;
            while (1)
            {
              if (v329 == (_QWORD *)a3)
                goto LABEL_486;
              if (!v329)
                break;
              v329 = (_QWORD *)*v329;
            }
LABEL_494:
            v276 = v1006;
            v259 = (_QWORD *)v953;
            if (!(_DWORD)v1006)
              goto LABEL_370;
          }
          v327 = 1;
          while (v326 != -4096)
          {
            v328 = v325 + v327++;
            v325 = v328 & v324;
            v326 = *(_QWORD *)(v323 + 16 * v325);
            if (v320 == v326)
              goto LABEL_454;
          }
LABEL_455:
          v329 = 0;
          goto LABEL_456;
        }
LABEL_370:
        v277 = v1003;
        v278 = (char *)v1002 + 8 * v1003 - 8;
        if ((_DWORD)v1003)
          v279 = v1002 >= v278;
        else
          v279 = 1;
        if (!v279)
        {
          v280 = (char *)v1002 + 8;
          do
          {
            v281 = *((_QWORD *)v280 - 1);
            *((_QWORD *)v280 - 1) = *(_QWORD *)v278;
            *(_QWORD *)v278 = v281;
            v278 -= 8;
            v90 = v280 >= v278;
            v280 += 8;
          }
          while (!v90);
        }
        v282 = *(unsigned int *)(a1 + 5224);
        if ((int)v282 >= 1)
        {
          v283 = 0;
          while (2)
          {
            v284 = *v259 + 80 * v283;
            v1016 = &v1017.u64[1];
            v1017.i64[0] = 0x200000000;
            v285 = *(unsigned int *)(v284 + 8);
            if (&v1016 == (void **)v284 || v285 == 0)
              goto LABEL_388;
            v287 = *(const void **)v284;
            if (*(_QWORD *)v284 == v284 + 16)
            {
              v288 = &v1017.i8[8];
              v289 = *(unsigned int *)(v284 + 8);
              if (v285 < 3)
                goto LABEL_385;
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1016, (uint64_t)&v1017.i64[1], *(unsigned int *)(v284 + 8), 8);
              v289 = *(unsigned int *)(v284 + 8);
              if ((_DWORD)v289)
              {
                v287 = *(const void **)v284;
                v288 = (char *)v1016;
LABEL_385:
                memcpy(v288, v287, 8 * v289);
              }
              v1017.i32[0] = v285;
            }
            else
            {
              v1016 = *(void **)v284;
              v1017.i32[0] = v285;
              v1017.i32[1] = *(_DWORD *)(v284 + 12);
              *(_QWORD *)v284 = v284 + 16;
              *(_DWORD *)(v284 + 12) = 0;
            }
            *(_DWORD *)(v284 + 8) = 0;
LABEL_388:
            v1019 = (uint64_t)v1022;
            v291 = *(void **)(v284 + 32);
            v290 = *(void **)(v284 + 40);
            v292 = v284 + 32;
            if (v290 == v291)
            {
              v1020[0] = v1022;
              v293 = *(unsigned int *)(v292 + 20);
              if ((_DWORD)v293)
                memmove(v1022, *(const void **)(v292 + 8), 8 * v293);
            }
            else
            {
              v1020[0] = v290;
              *(_QWORD *)(v292 + 8) = v291;
            }
            v1020[1] = *(void **)(v292 + 16);
            v1021 = *(_DWORD *)(v292 + 24);
            *(_QWORD *)(v292 + 16) = 2;
            *(_DWORD *)(v292 + 24) = 0;
            v294 = v1009;
            v295 = (char *)v1008;
            if (v1009 >= HIDWORD(v1009))
            {
              v297 = v1008 <= &v1016 && (char *)v1008 + 80 * v1009 > (char *)&v1016;
              v298 = v297;
              if (v298 == 1)
                v299 = 0xCCCCCCCCCCCCCCCDLL * (((char *)&v1016 - (_BYTE *)v1008) >> 4);
              else
                v299 = -1;
              *(_QWORD *)&v1026 = 0;
              v300 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow((uint64_t)&v1008, v1009 + 1, 80, (unint64_t *)&v1026);
              v295 = v300;
              v301 = (char *)v1008;
              if ((_DWORD)v1009)
              {
                v302 = 80 * v1009;
                do
                {
                  v303 = sub_1C55B6178((uint64_t)v300, (uint64_t)v301);
                  v301 += 80;
                  v300 = (char *)(v303 + 80);
                  v302 -= 80;
                }
                while (v302);
                v301 = (char *)v1008;
                v304 = v1009;
              }
              else
              {
                v304 = 0;
              }
              sub_1C55AF894((uint64_t)v301, (uint64_t)&v301[80 * v304]);
              v305 = v1026;
              if (v1008 != v1010)
                free(v1008);
              v1008 = v295;
              HIDWORD(v1009) = v305;
              if (v298)
                v296 = (void **)&v295[80 * v299];
              else
                v296 = &v1016;
              v294 = v1009;
              v259 = (_QWORD *)v953;
            }
            else
            {
              v296 = &v1016;
            }
            sub_1C55B6178((uint64_t)&v295[80 * v294], (uint64_t)v296);
            LODWORD(v1009) = v1009 + 1;
            if (v1020[0] != (void *)v1019)
              free(v1020[0]);
            if (v1016 != &v1017.u64[1])
              free(v1016);
            if (++v283 == v282)
            {
              v277 = v1003;
              break;
            }
            continue;
          }
        }
        v306 = (uint64_t *)v1002;
        if ((_DWORD)v277)
        {
          v307 = 8 * v277;
          do
          {
            v308 = *v306++;
            sub_1C4774094((llvm::SmallPtrSetImplBase *)&v992, v308);
            v307 -= 8;
          }
          while (v307);
          v306 = (uint64_t *)v1002;
          v309 = v1003;
        }
        else
        {
          v309 = 0;
        }
        v350 = v1009;
        if (*(_BYTE *)(v957 + 544))
          goto LABEL_500;
        if (v1009 >= 2)
        {
          v883 = *(_DWORD *)(a1 + 40);
          if (v883 == -1)
          {
            *(_DWORD *)(a1 + 40) = 0;
            v893 = *(_QWORD *)(a1 + 32);
            v894 = v893 + 72;
            v895 = *(_QWORD *)(v893 + 80);
            if (v895 == v893 + 72)
            {
              v883 = 0;
              if (!v309)
                goto LABEL_500;
            }
            else
            {
              v883 = 0;
              do
              {
                v896 = v895 - 24;
                if (!v895)
                  v896 = 0;
                v897 = v896 + 40;
                --v883;
                v898 = v897;
                do
                {
                  v898 = *(_QWORD *)(v898 + 8);
                  ++v883;
                }
                while (v898 != v897);
                v895 = *(_QWORD *)(v895 + 8);
              }
              while (v895 != v894);
              *(_DWORD *)(a1 + 40) = v883;
              if (!v309)
                goto LABEL_500;
            }
          }
          else if (!v309)
          {
            goto LABEL_500;
          }
          v884 = 0;
          v885 = v883 >> 2;
          v886 = &v306[v309];
          do
          {
            v887 = *v306 + 40;
            v884 -= v350;
            v888 = v887;
            do
            {
              v888 = *(_QWORD *)(v888 + 8);
              v884 += v350;
            }
            while (v888 != v887);
            if (v885 < v884)
              goto LABEL_1267;
            for (k = *(_QWORD *)(*v306 + 48); k != v887; k = *(_QWORD *)(k + 8))
            {
              if (k)
                v890 = k - 24;
              else
                v890 = 0;
              if (*(_BYTE *)(v890 + 16) == 84)
              {
                v891 = *(_QWORD *)(v890 + 64);
                if (v891)
                {
                  if ((*(_BYTE *)(v891 + 12) & 0x40) != 0)
                    goto LABEL_1267;
                }
                if ((llvm::CallBase::hasFnAttrOnCalledFunction(v890, 6) & 1) != 0)
                  goto LABEL_1267;
              }
            }
            ++v306;
          }
          while (v306 != v886);
          v350 = v1009;
LABEL_500:
          v351 = (char *)v1008;
          v352 = (char *)v1008 + 80 * v350 - 80;
          for (m = v352; v351 != v352; v352 = m)
          {
            v973 = v1003;
            v976 = (uint64_t ****)v1002;
            v353 = *(_QWORD *)v351;
            v354 = *((unsigned int *)v351 + 2);
            v998 = a3;
            v1016 = &v1017.u64[1];
            v1017.i64[0] = 0x2000000000;
            v355 = v964;
            v979 = v354;
            if ((*(_BYTE *)v964 & 1) != 0)
            {
              v356 = 4;
              v357 = v971;
              v358 = a1;
            }
            else
            {
              v358 = a1;
              v356 = *(_DWORD *)(a1 + 4712);
              if (!v356)
              {
                v368 = 0;
                v363 = v983;
LABEL_518:
                v361 = sub_1C55B6340((uint64_t)v964, (uint64_t)&v998, &v998, v368);
                *v361 = v998;
                v361[1] = 0;
                goto LABEL_519;
              }
              v357 = *(_QWORD **)(a1 + 4704);
            }
            v359 = v356 - 1;
            v360 = v359 & v955;
            v361 = &v357[2 * (v359 & v955)];
            v362 = *v361;
            if (*v361 != a3)
            {
              v364 = 0;
              v365 = 1;
              v363 = v983;
              while (v362 != -4096)
              {
                if (v364)
                  v366 = 0;
                else
                  v366 = v362 == -8192;
                if (v366)
                  v364 = v361;
                v367 = v360 + v365++;
                v360 = v367 & v359;
                v361 = &v357[2 * v360];
                v362 = *v361;
                if (*v361 == a3)
                  goto LABEL_519;
              }
              if (v364)
                v368 = v364;
              else
                v368 = v361;
              goto LABEL_518;
            }
            v363 = v983;
LABEL_519:
            v963 = v351;
            v361[1] = a3;
            v369 = v976;
            v370 = &v976[v973];
            if ((_DWORD)v973)
            {
              do
              {
                v371 = *v369;
                v1032 = 0;
                v372 = *(uint64_t **)(v358 + 56);
                v373 = *((_DWORD *)v372 + 4);
                if (v373)
                {
                  v374 = *v372;
                  v375 = v373 - 1;
                  v376 = (v373 - 1) & ((v371 >> 4) ^ (v371 >> 9));
                  v377 = *(uint64_t ****)(*v372 + 16 * v376);
                  if (v371 == v377)
                  {
LABEL_525:
                    v380 = *(void **)(v374 + 16 * v376 + 8);
                    goto LABEL_527;
                  }
                  v378 = 1;
                  while (v377 != (uint64_t ***)-4096)
                  {
                    v379 = v376 + v378++;
                    v376 = v379 & v375;
                    v377 = *(uint64_t ****)(v374 + 16 * v376);
                    if (v371 == v377)
                      goto LABEL_525;
                  }
                }
                v380 = 0;
LABEL_527:
                v1032 = v380;
                v381 = *v355;
                if ((*v355 & 1) != 0)
                {
                  v382 = 4;
                  v383 = v971;
                }
                else
                {
                  v383 = *(_QWORD **)(v358 + 4704);
                  v382 = *(_DWORD *)(v358 + 4712);
                  if (!v382)
                  {
                    v392 = 0;
LABEL_539:
                    v386 = (void **)&v383[2 * v392];
                    if ((v381 & 1) == 0)
                      goto LABEL_531;
                    goto LABEL_540;
                  }
                }
                v384 = v382 - 1;
                LODWORD(v385) = (v382 - 1) & ((v380 >> 4) ^ (v380 >> 9));
                v386 = (void **)&v383[2 * v385];
                v387 = *v386;
                if (*v386 != v380)
                {
                  v390 = 1;
                  do
                  {
                    if (v387 == (void *)-4096)
                    {
                      if ((v381 & 1) != 0)
                      {
                        v383 = v971;
                        v392 = 4;
                      }
                      else
                      {
                        v383 = *(_QWORD **)(v358 + 4704);
                        v392 = *(unsigned int *)(v358 + 4712);
                      }
                      goto LABEL_539;
                    }
                    v391 = v385 + v390++;
                    v385 = v391 & v384;
                    v387 = (void *)v383[2 * v385];
                  }
                  while (v387 != v380);
                  v386 = (void **)&v383[2 * v385];
                  if ((v381 & 1) != 0)
                    goto LABEL_540;
LABEL_531:
                  v388 = *(_QWORD **)(v358 + 4704);
                  v389 = *(unsigned int *)(v358 + 4712);
                  goto LABEL_541;
                }
                if ((v381 & 1) == 0)
                  goto LABEL_531;
LABEL_540:
                v388 = v971;
                v389 = 4;
LABEL_541:
                if (&v388[2 * v389] != v386)
                {
                  v393 = v386[1];
                  goto LABEL_617;
                }
                v393 = (_OWORD *)sub_1C484358C((uint64_t)(v372 + 6), 152, 3);
                *v393 = 0u;
                v393[1] = 0u;
                v393[2] = 0u;
                v393[3] = 0u;
                v393[4] = 0u;
                v393[5] = 0u;
                v393[6] = 0u;
                v393[7] = 0u;
                v393[8] = 0u;
                *((_QWORD *)v393 + 18) = 0;
                *((_QWORD *)v393 + 7) = (char *)v393 + 88;
                *((_QWORD *)v393 + 8) = (char *)v393 + 88;
                *((_DWORD *)v393 + 18) = 8;
                if ((*(_BYTE *)v355 & 1) != 0)
                {
                  v394 = 4;
                  v395 = v971;
                }
                else
                {
                  v394 = *(_DWORD *)(v358 + 4712);
                  if (!v394)
                  {
                    v405 = 0;
                    goto LABEL_558;
                  }
                  v395 = *(_QWORD **)(v358 + 4704);
                }
                v396 = (uint64_t *)v1032;
                v397 = v394 - 1;
                v398 = ((v1032 >> 4) ^ (v1032 >> 9)) & v397;
                v399 = &v395[2 * v398];
                v400 = (void *)*v399;
                if (v1032 == (void *)*v399)
                  goto LABEL_559;
                v401 = 0;
                v402 = 1;
                while (v400 != (void *)-4096)
                {
                  if (v401)
                    v403 = 0;
                  else
                    v403 = v400 == (void *)-8192;
                  if (v403)
                    v401 = v399;
                  v404 = v398 + v402++;
                  v398 = v404 & v397;
                  v399 = &v395[2 * v398];
                  v400 = (void *)*v399;
                  if (v1032 == (void *)*v399)
                    goto LABEL_559;
                }
                if (v401)
                  v405 = v401;
                else
                  v405 = v399;
LABEL_558:
                v399 = sub_1C55B6340((uint64_t)v355, (uint64_t)&v1032, &v1032, v405);
                *v399 = v1032;
                v399[1] = 0;
                v396 = (uint64_t *)v1032;
LABEL_559:
                v399[1] = v393;
                *(_QWORD *)&v1026 = 0;
                v406 = *v396;
                *(_QWORD *)&v1026 = v406;
                if (!v406)
                {
                  v417 = *(_QWORD **)(v358 + 56);
                  v419 = (_QWORD *)v417[4];
                  v418 = v417[5];
                  if ((unint64_t)v419 >= v418)
                  {
                    v421 = (_QWORD *)v417[3];
                    v422 = v419 - v421;
                    v423 = v422 + 1;
                    if ((unint64_t)(v422 + 1) >> 61)
                      goto LABEL_1462;
                    v424 = v418 - (_QWORD)v421;
                    if (v424 >> 2 > v423)
                      v423 = v424 >> 2;
                    if ((unint64_t)v424 >= 0x7FFFFFFFFFFFFFF8)
                      v425 = 0x1FFFFFFFFFFFFFFFLL;
                    else
                      v425 = v423;
                    if (v425)
                    {
                      if (v425 >> 61)
                        goto LABEL_1463;
                      v426 = (char *)operator new(8 * v425);
                    }
                    else
                    {
                      v426 = 0;
                    }
                    v440 = &v426[8 * v422];
                    *(_QWORD *)v440 = v393;
                    v420 = v440 + 8;
                    if (v419 != v421)
                    {
                      do
                      {
                        v441 = *--v419;
                        *((_QWORD *)v440 - 1) = v441;
                        v440 -= 8;
                      }
                      while (v419 != v421);
                      v419 = (_QWORD *)v417[3];
                    }
                    v417[3] = v440;
                    v417[4] = v420;
                    v417[5] = &v426[8 * v425];
                    v355 = v964;
                    if (v419)
                      operator delete(v419);
                    v363 = v983;
                  }
                  else
                  {
                    *v419 = v393;
                    v420 = v419 + 1;
                  }
                  v370 = &v976[v973];
                  v417[4] = v420;
                  v358 = a1;
                  goto LABEL_617;
                }
                if ((*(_BYTE *)v355 & 1) != 0)
                {
                  v407 = 4;
                  v408 = v971;
                }
                else
                {
                  v407 = *(_DWORD *)(v358 + 4712);
                  if (!v407)
                  {
                    v427 = 0;
LABEL_586:
                    v411 = sub_1C55B6340((uint64_t)v355, (uint64_t)&v1026, &v1026, v427);
                    *v411 = v1026;
                    v411[1] = 0;
                    goto LABEL_587;
                  }
                  v408 = *(_QWORD **)(v358 + 4704);
                }
                v409 = v407 - 1;
                v410 = v409 & ((v406 >> 4) ^ (v406 >> 9));
                v411 = &v408[2 * v410];
                v412 = *v411;
                if (v406 != *v411)
                {
                  v413 = 0;
                  v414 = 1;
                  while (v412 != -4096)
                  {
                    if (v413)
                      v415 = 0;
                    else
                      v415 = v412 == -8192;
                    if (v415)
                      v413 = v411;
                    v416 = v410 + v414++;
                    v410 = v416 & v409;
                    v411 = &v408[2 * v410];
                    v412 = *v411;
                    if (v406 == *v411)
                      goto LABEL_587;
                  }
                  if (v413)
                    v427 = v413;
                  else
                    v427 = v411;
                  goto LABEL_586;
                }
LABEL_587:
                v428 = (_QWORD *)v411[1];
                *(_QWORD *)v393 = v428;
                v430 = (_QWORD *)v428[2];
                v429 = v428[3];
                if ((unint64_t)v430 >= v429)
                {
                  v432 = (_QWORD *)v428[1];
                  v433 = v430 - v432;
                  v434 = v433 + 1;
                  if ((unint64_t)(v433 + 1) >> 61)
LABEL_1462:
                    abort();
                  v435 = v429 - (_QWORD)v432;
                  if (v435 >> 2 > v434)
                    v434 = v435 >> 2;
                  if ((unint64_t)v435 >= 0x7FFFFFFFFFFFFFF8)
                    v436 = 0x1FFFFFFFFFFFFFFFLL;
                  else
                    v436 = v434;
                  if (v436)
                  {
                    if (v436 >> 61)
LABEL_1463:
                      sub_1C4764EE4();
                    v437 = (char *)operator new(8 * v436);
                  }
                  else
                  {
                    v437 = 0;
                  }
                  v438 = &v437[8 * v433];
                  *(_QWORD *)v438 = v393;
                  v431 = v438 + 8;
                  if (v430 != v432)
                  {
                    do
                    {
                      v439 = *--v430;
                      *((_QWORD *)v438 - 1) = v439;
                      v438 -= 8;
                    }
                    while (v430 != v432);
                    v430 = (_QWORD *)v428[1];
                  }
                  v428[1] = v438;
                  v428[2] = v431;
                  v428[3] = &v437[8 * v436];
                  v355 = v964;
                  if (v430)
                    operator delete(v430);
                  v363 = v983;
                }
                else
                {
                  *v430 = v393;
                  v431 = v430 + 1;
                }
                v428[2] = v431;
                v358 = a1;
                v370 = &v976[v973];
LABEL_617:
                v1032 = v393;
                *(_QWORD *)&v1026 = ".duplicated";
                LOWORD(v1028) = 259;
                v442 = (_QWORD *)llvm::CloneBasicBlock(v371, v363, (uint64_t)&v1026, 0, 0, 0);
                *((_QWORD *)&v1026 + 1) = 2;
                *(_QWORD *)&v1027 = 0;
                *((_QWORD *)&v1027 + 1) = v371;
                if (v371 != (uint64_t ***)-8192 && v371 != (uint64_t ***)-4096 && v371)
                  llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)((char *)&v1026 + 8));
                *(_QWORD *)&v1026 = &unk_1E814DA10;
                *(_QWORD *)&v1028 = v363;
                v443 = sub_1C52E2ED8(v363, &v1026);
                if (*((_QWORD *)&v1027 + 1) != -8192 && *((_QWORD *)&v1027 + 1) != -4096 && *((_QWORD *)&v1027 + 1))
                {
                  v444 = *((_QWORD *)&v1026 + 1) & 0xFFFFFFFFFFFFFFF8;
                  *(_QWORD *)(*((_QWORD *)&v1026 + 1) & 0xFFFFFFFFFFFFFFF8) = v1027;
                  if ((_QWORD)v1027)
                  {
                    *(_QWORD *)v1027 = *(_QWORD *)v1027 & 7 | v444;
                  }
                  else
                  {
                    v445 = *((_QWORD *)&v1027 + 1);
                    v446 = (int32x2_t *)****((_QWORD ****)&v1027 + 1);
                    v447 = (unint64_t)v446[303];
                    if (v447 <= v444)
                    {
                      v448 = v446[305].u32[0];
                      if (v447 + 16 * v448 > v444)
                      {
                        v449 = v448 - 1;
                        LODWORD(v450) = v449 & ((DWORD2(v1027) >> 4) ^ (DWORD2(v1027) >> 9));
                        v451 = (uint64_t *)(v447 + 16 * v450);
                        v452 = *v451;
                        if (*((_QWORD *)&v1027 + 1) == *v451)
                        {
LABEL_632:
                          *v451 = -8192;
                          v446[304] = vadd_s32(v446[304], (int32x2_t)0x1FFFFFFFFLL);
                          v445 = *((_QWORD *)&v1027 + 1);
                        }
                        else
                        {
                          v453 = 1;
                          while (v452 != -4096)
                          {
                            v454 = v450 + v453++;
                            v450 = v454 & v449;
                            v452 = *(_QWORD *)(v447 + 16 * v450);
                            if (*((_QWORD *)&v1027 + 1) == v452)
                            {
                              v451 = (uint64_t *)(v447 + 16 * v450);
                              goto LABEL_632;
                            }
                          }
                        }
                        *(_BYTE *)(v445 + 17) &= ~1u;
                      }
                    }
                  }
                }
                v455 = (_QWORD *)v443[7];
                if (v455 != v442)
                {
                  if (v455 && v455 != (_QWORD *)-8192 && v455 != (_QWORD *)-4096)
                  {
                    v465 = v443[5] & 0xFFFFFFFFFFFFFFF8;
                    *(_QWORD *)v465 = v443[6];
                    v466 = (unint64_t *)v443[6];
                    if (v466)
                    {
                      *v466 = *v466 & 7 | v465;
                    }
                    else
                    {
                      v467 = v443[7];
                      v468 = ***(int32x2_t ****)v467;
                      v469 = (unint64_t)v468[303];
                      if (v469 <= v465)
                      {
                        v470 = v468[305].u32[0];
                        if (v469 + 16 * v470 > v465)
                        {
                          v471 = v470 - 1;
                          LODWORD(v472) = v471 & ((v467 >> 4) ^ (v467 >> 9));
                          v473 = (uint64_t *)(v469 + 16 * v472);
                          v474 = *v473;
                          if (v467 == *v473)
                          {
LABEL_666:
                            *v473 = -8192;
                            v468[304] = vadd_s32(v468[304], (int32x2_t)0x1FFFFFFFFLL);
                            v467 = v443[7];
                          }
                          else
                          {
                            v475 = 1;
                            while (v474 != -4096)
                            {
                              v476 = v472 + v475++;
                              v472 = v476 & v471;
                              v474 = *(_QWORD *)(v469 + 16 * v472);
                              if (v467 == v474)
                              {
                                v473 = (uint64_t *)(v469 + 16 * v472);
                                goto LABEL_666;
                              }
                            }
                          }
                          *(_BYTE *)(v467 + 17) &= ~1u;
                        }
                      }
                    }
                  }
                  v443[7] = v442;
                  if (v442 != (_QWORD *)-8192 && v442 != (_QWORD *)-4096 && v442)
                    llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)(v443 + 5));
                }
                v456 = v1017.u32[0];
                if (v1017.u32[0] >= (unint64_t)v1017.u32[1])
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1016, (uint64_t)&v1017.i64[1], v1017.u32[0] + 1, 8);
                  v456 = v1017.u32[0];
                }
                *((_QWORD *)v1016 + v456) = v442;
                ++v1017.i32[0];
                *(_QWORD *)&v1026 = 0;
                v457 = sub_1C4B04E2C(*(_QWORD *)(v358 + 4624), *(_DWORD *)(v358 + 4640), (uint64_t)v371, &v1026);
                v458 = *(_QWORD *)(v358 + 4624);
                v459 = *(unsigned int *)(v358 + 4640);
                if (v457 && (_QWORD)v1026 != v458 + 16 * v459)
                  v371 = *(uint64_t ****)(v1026 + 8);
                *(_QWORD *)&v1026 = 0;
                v460 = sub_1C4B04E2C(v458, v459, (uint64_t)v442, &v1026);
                v461 = (_QWORD *)v1026;
                if ((v460 & 1) != 0)
                  goto LABEL_652;
                v462 = *(_DWORD *)(v358 + 4632);
                v463 = *(_DWORD *)(v358 + 4640);
                if (4 * v462 + 4 >= 3 * v463)
                {
                  v463 *= 2;
LABEL_674:
                  sub_1C55B6738(v950, v463);
                  *(_QWORD *)&v1026 = 0;
                  sub_1C4B04E2C(*(_QWORD *)(v358 + 4624), *(_DWORD *)(v358 + 4640), (uint64_t)v442, &v1026);
                  v461 = (_QWORD *)v1026;
                  goto LABEL_649;
                }
                if (v463 + ~v462 - *(_DWORD *)(v358 + 4636) <= v463 >> 3)
                  goto LABEL_674;
LABEL_649:
                ++*(_DWORD *)(v358 + 4632);
                if (*v461 != -4096)
                  --*(_DWORD *)(v358 + 4636);
                *v461 = v442;
                v461[1] = 0;
LABEL_652:
                v461[1] = v371;
                llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList((uint64_t)v968, v442);
                v464 = *v968;
                v442[3] = *v968;
                v442[4] = v968;
                *(_QWORD *)(v464 + 8) = v442 + 3;
                *v968 = (uint64_t)(v442 + 3);
                if (v1032)
                  llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::addBasicBlockToLoop(v1032, (uint64_t)v442, *(_QWORD *)(v358 + 56));
                ++v369;
              }
              while (v369 != v370);
            }
            v477 = v976;
            if (!(_DWORD)v979)
              goto LABEL_750;
            v970 = (llvm::SmallPtrSetImplBase *)(v353 + 8 * v979);
            do
            {
              v478 = *(_QWORD *)(*(_QWORD *)v353 + 40);
              if (v478 == *(_QWORD *)v353 + 40)
              {
                v480 = 0;
              }
              else
              {
                if (v478)
                  v479 = v478 - 24;
                else
                  v479 = 0;
                if (*(unsigned __int8 *)(v479 + 16) - 29 >= 0xB)
                  v480 = 0;
                else
                  v480 = v479;
              }
              v980 = v353;
              v481 = *(unsigned __int8 *)(v480 + 16);
              if (v481 != 30)
                __asm { BR              X10 }
              if ((*(_DWORD *)(v480 + 20) & 0x7FFFFFF) == 3)
                v482 = 2;
              else
                v482 = 1;
              v483 = 0;
              v484 = v482;
              do
              {
                v485 = *(unsigned __int8 *)(v480 + 16);
                if (v485 != 30)
                  __asm { BR              X9 }
                v486 = *(uint64_t ****)(v480 - 32 - 32 * v483);
                if (*v477 != v486)
                  goto LABEL_745;
                llvm::Instruction::setSuccessor((llvm::Instruction *)v480, v483, *(llvm::BasicBlock **)v1016);
                if (*(_BYTE *)(v480 + 16) != 32)
                  goto LABEL_745;
                v487 = *(llvm::BasicBlock **)v1016;
                v488 = *(_DWORD *)(v480 + 20);
                if ((v488 & 0x40000000) != 0)
                  v489 = *(_QWORD *)(v480 - 8);
                else
                  v489 = v480 - 32 * (v488 & 0x7FFFFFF);
                v490 = *(_QWORD *)v489;
                if (*(_QWORD *)v489)
                  v491 = *(_BYTE *)(*(_QWORD *)v489 + 16) == 4;
                else
                  v491 = 0;
                if (v491)
                {
                  v514 = (_QWORD *)(v489 + 8);
                  **(_QWORD **)(v489 + 16) = *(_QWORD *)(v489 + 8);
                  v515 = *(_QWORD *)(v489 + 8);
                  if (v515)
                    *(_QWORD *)(v515 + 16) = *(_QWORD *)(v489 + 16);
                  *(_QWORD *)v489 = v487;
                  if (v487)
                  {
                    v518 = *((_QWORD *)v487 + 1);
                    v517 = (_QWORD *)((char *)v487 + 8);
                    v516 = v518;
                    *v514 = v518;
                    if (v518)
                      *(_QWORD *)(v516 + 16) = v514;
                    *(_QWORD *)(v489 + 16) = v517;
                    *v517 = v489;
                  }
                  goto LABEL_745;
                }
                v1032 = &v1034;
                __src = (void *)0xA00000000;
                sub_1C4848C0C((unsigned int *)&v1032, 1uLL, v490);
                *(_QWORD *)&v1026 = &v1028;
                *((_QWORD *)&v1026 + 1) = &v1028;
                *(_QWORD *)&v1027 = 16;
                DWORD2(v1027) = 0;
                v493 = __src;
                if (!(_DWORD)__src)
                  goto LABEL_737;
                do
                {
                  v494 = *((_QWORD *)v1032 + --v493);
                  LODWORD(__src) = v493;
                  if (v494)
                    v495 = *(unsigned __int8 *)(v494 + 16) >= 0x1Cu;
                  else
                    v495 = 0;
                  if (v495)
                  {
                    v496 = *(_DWORD *)(v494 + 20) & 0x7FFFFFF;
                    if ((_DWORD)v496)
                    {
                      v497 = 0;
                      v498 = 32 * v496;
                      while (1)
                      {
                        v499 = *(_DWORD *)(v494 + 20);
                        if ((v499 & 0x40000000) != 0)
                          v500 = *(_QWORD *)(v494 - 8);
                        else
                          v500 = v494 - 32 * (v499 & 0x7FFFFFF);
                        v501 = *(_QWORD *)(v500 + v497);
                        if (v501)
                          v502 = *(_BYTE *)(v501 + 16) == 4;
                        else
                          v502 = 0;
                        if (!v502)
                          goto LABEL_717;
                        if (*(uint64_t ****)(v501 - 32) == v486)
                          break;
LABEL_722:
                        v497 += 32;
                        if (v498 == v497)
                        {
                          v493 = __src;
                          goto LABEL_734;
                        }
                      }
                      v505 = llvm::BlockAddress::get(*((llvm::BlockAddress **)v487 + 7), v487, v492);
                      v506 = *(_DWORD *)(v494 + 20);
                      if ((v506 & 0x40000000) != 0)
                        v507 = *(_QWORD *)(v494 - 8);
                      else
                        v507 = v494 - 32 * (v506 & 0x7FFFFFF);
                      v508 = v507 + v497;
                      if (*(_QWORD *)(v507 + v497))
                      {
                        **(_QWORD **)(v508 + 16) = *(_QWORD *)(v508 + 8);
                        v509 = *(_QWORD *)(v508 + 8);
                        if (v509)
                          *(_QWORD *)(v509 + 16) = *(_QWORD *)(v508 + 16);
                      }
                      *(_QWORD *)v508 = v505;
                      if (v505)
                      {
                        v512 = *((_QWORD *)v505 + 1);
                        v510 = (_QWORD *)((char *)v505 + 8);
                        v511 = v512;
                        v513 = v507 + v497;
                        *(_QWORD *)(v513 + 8) = v512;
                        if (v512)
                          *(_QWORD *)(v511 + 16) = v513 + 8;
                        *(_QWORD *)(v513 + 16) = v510;
                        *v510 = v508;
                      }
LABEL_717:
                      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v1026, v501);
                      if (v503)
                      {
                        v504 = __src;
                        if (__src >= (unint64_t)HIDWORD(__src))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v1032, (uint64_t)&v1034, __src + 1, 8);
                          v504 = __src;
                        }
                        *((_QWORD *)v1032 + v504) = v501;
                        LODWORD(__src) = (_DWORD)__src + 1;
                      }
                      goto LABEL_722;
                    }
                  }
LABEL_734:
                  ;
                }
                while (v493);
                v477 = v976;
                if (*((_QWORD *)&v1026 + 1) != (_QWORD)v1026)
                  free(*((void **)&v1026 + 1));
LABEL_737:
                if (v1032 != &v1034)
                  free(v1032);
LABEL_745:
                ++v483;
                v358 = a1;
              }
              while (v483 != v484);
              v363 = v983;
              v353 = v980 + 8;
            }
            while ((llvm::SmallPtrSetImplBase *)(v980 + 8) != v970);
LABEL_750:
            if ((_DWORD)v973)
            {
              for (n = 0; n != v973; ++n)
              {
                v520 = *((_QWORD *)v1016 + n);
                v521 = v520 + 40;
                for (ii = *(_QWORD *)(v520 + 48); ii != v521; ii = *(_QWORD *)(ii + 8))
                {
                  if (ii)
                    v523 = (uint64_t ***)(ii - 24);
                  else
                    v523 = 0;
                  v524 = (_QWORD *)operator new();
                  *(_DWORD *)v524 = 6;
                  v524[1] = 0;
                  *((_DWORD *)v524 + 4) = 0;
                  v524[5] = v363;
                  v524[3] = v524 + 5;
                  v524[6] = 0;
                  v524[4] = 0x200000001;
                  v524[9] = v524 + 11;
                  v524[10] = 0x400000000;
                  v524[23] = v524 + 25;
                  v524[24] = 0x100000000;
                  v524[27] = v524 + 29;
                  v524[28] = 0x1000000000;
                  v1032 = v524;
                  *(_QWORD *)&v1026 = v524;
                  sub_1C5FD706C((uint64_t)v524, v523);
                  sub_1C5FD3718((uint64_t *)&v1026, v525);
                  llvm::ValueMapper::~ValueMapper((llvm::ValueMapper *)&v1032, v526);
                }
              }
              v527 = 0;
              while (2)
              {
                v528 = (uint64_t)v976[v527];
                v529 = *((_QWORD *)v1016 + v527);
                sub_1C5EABCE8(v528);
                sub_1C5EABCE8(v529);
                v530 = *(_QWORD *)(v528 + 40);
                if (v530 != v528 + 40)
                {
                  if (v530)
                    v531 = v530 - 24;
                  else
                    v531 = 0;
                  v532 = *(unsigned __int8 *)(v531 + 16);
                  v533 = v532 - 29;
                  if (v532 != 30)
                  {
                    v534 = 2;
                    switch(v533)
                    {
                      case 1:
                        __break(1u);
                        return;
                      case 2:
                        v534 = (*(_DWORD *)(v531 + 20) >> 1) & 0x3FFFFFF;
                        goto LABEL_832;
                      case 3:
                      case 9:
                        v534 = (*(_DWORD *)(v531 + 20) & 0x7FFFFFF) - 1;
                        goto LABEL_832;
                      case 4:
                        goto LABEL_768;
                      case 7:
                        v534 = *(_WORD *)(v531 + 18) & 1;
                        goto LABEL_832;
                      case 8:
                        v534 = 1;
                        goto LABEL_768;
                      case 10:
                        v534 = *(_DWORD *)(v531 + 80) + 1;
LABEL_832:
                        if (!v534)
                          goto LABEL_829;
                        goto LABEL_768;
                      default:
                        goto LABEL_829;
                    }
                  }
                  if ((*(_DWORD *)(v531 + 20) & 0x7FFFFFF) == 3)
                    v534 = 2;
                  else
                    v534 = 1;
LABEL_768:
                  v535 = 0;
                  v536 = v534;
                  while (1)
                  {
                    v537 = *(unsigned __int8 *)(v531 + 16);
                    if (v537 != 30)
                      __asm { BR              X9 }
                    v538 = *(_QWORD *)(v531 - 32 - 32 * v535);
                    v539 = *(_QWORD *)(v358 + 4864);
                    v540 = *(unsigned int *)(v358 + 4880);
                    if (!(_DWORD)v540)
                      goto LABEL_776;
                    v541 = ((v538 >> 4) ^ (v538 >> 9)) & ((_DWORD)v540 - 1);
                    v542 = v539 + (v541 << 6);
                    v543 = *(_QWORD *)(v542 + 24);
                    if (v538 != v543)
                      break;
LABEL_777:
                    if (v542 == v539 + (v540 << 6))
                    {
                      v546 = *(_QWORD *)(v538 + 48);
                      v547 = v546 - 24;
                      if (!v546)
                        v547 = 0;
                      v548 = v538 + 40;
                      if (*(_BYTE *)(v547 + 16) == 83 && v546 != v548)
                      {
                        do
                        {
                          v551 = v546 - 24;
                          if (!v546)
                            v551 = 0;
                          v552 = *(unsigned __int8 *)(v551 + 16);
                          if (v552 == 83)
                            v553 = (_DWORD *)v551;
                          else
                            v553 = 0;
                          if (!v546 || v552 != 83)
                            break;
                          v554 = v553[5];
                          v555 = v554 & 0x7FFFFFF;
                          if ((v554 & 0x7FFFFFF) != 0)
                          {
                            v556 = 0;
                            while (1)
                            {
                              v557 = &v553[-8 * v555];
                              if ((v554 & 0x40000000) != 0)
                                v557 = (_DWORD *)*((_QWORD *)v553 - 1);
                              if (*(_QWORD *)&v557[8 * v553[15] + 2 * v556] == v528)
                                break;
                              if (v555 == ++v556)
                                goto LABEL_802;
                            }
                          }
                          else
                          {
LABEL_802:
                            LODWORD(v556) = -1;
                          }
                          if ((v554 & 0x40000000) != 0)
                            v550 = (_DWORD *)*((_QWORD *)v553 - 1);
                          else
                            v550 = &v553[-8 * v555];
                          v558 = *(_QWORD *)&v550[8 * v556];
                          if (v558 && *(unsigned __int8 *)(v558 + 16) >= 0x1Cu)
                          {
                            v559 = *(_QWORD *)(a1 + 4864);
                            v560 = *(unsigned int *)(a1 + 4880);
                            if (!(_DWORD)v560)
                              goto LABEL_815;
                            v561 = *(_QWORD *)(v558 + 40);
                            v562 = v560 - 1;
                            v563 = ((v561 >> 4) ^ (v561 >> 9)) & ((_DWORD)v560 - 1);
                            v564 = *(_QWORD *)(v559 + (v563 << 6) + 24);
                            if (v561 != v564)
                            {
                              v565 = 1;
                              while (v564 != -4096)
                              {
                                v566 = v563 + v565++;
                                v563 = v566 & v562;
                                v567 = v559 + (v563 << 6);
                                v564 = *(_QWORD *)(v567 + 24);
                                if (v561 == v564)
                                  goto LABEL_816;
                              }
LABEL_815:
                              v567 = v559 + (v560 << 6);
LABEL_816:
                              v568 = v559 + (v560 << 6);
                              if (v567 == v568)
                                goto LABEL_826;
                              if ((_DWORD)v560)
                              {
                                v562 = v560 - 1;
LABEL_819:
                                v569 = v562 & ((v558 >> 4) ^ (v558 >> 9));
                                v570 = v559 + (v569 << 6);
                                v571 = *(_QWORD *)(v570 + 24);
                                if (v558 != v571)
                                {
                                  v572 = 1;
                                  while (v571 != -4096)
                                  {
                                    v573 = v569 + v572++;
                                    v569 = v573 & v562;
                                    v570 = v559 + (v569 << 6);
                                    v571 = *(_QWORD *)(v570 + 24);
                                    if (v558 == v571)
                                      goto LABEL_825;
                                  }
                                  goto LABEL_824;
                                }
                              }
                              else
                              {
LABEL_824:
                                v570 = v568;
                              }
LABEL_825:
                              v558 = *(_QWORD *)(v570 + 56);
                              goto LABEL_826;
                            }
                            if ((_DWORD)v563 != (_DWORD)v560)
                            {
                              v568 = v559 + (v560 << 6);
                              goto LABEL_819;
                            }
                          }
LABEL_826:
                          sub_1C477667C((llvm::PHINode *)v553, v558, v529);
                          v546 = *(_QWORD *)(v546 + 8);
                        }
                        while (v546 != v548);
                      }
                    }
                    ++v535;
                    v358 = a1;
                    if (v535 == v536)
                      goto LABEL_829;
                  }
                  v544 = 1;
                  while (v543 != -4096)
                  {
                    v545 = v541 + v544++;
                    v541 = v545 & (v540 - 1);
                    v542 = v539 + (v541 << 6);
                    v543 = *(_QWORD *)(v542 + 24);
                    if (v538 == v543)
                      goto LABEL_777;
                  }
LABEL_776:
                  v542 = v539 + (v540 << 6);
                  goto LABEL_777;
                }
LABEL_829:
                if (++v527 != v973)
                  continue;
                break;
              }
              v574 = 0;
              v1027 = 0u;
              v1028 = 0u;
              v1026 = 0u;
              while (2)
              {
                v575 = v976[v574];
                v576 = (uint64_t ***)v575[6];
                if (v576 == v575 + 5)
                  goto LABEL_929;
                v577 = (void *)*((_QWORD *)v1016 + v574);
LABEL_840:
                if (v576)
                  v578 = (llvm::MDNode **)(v576 - 3);
                else
                  v578 = 0;
                v579 = *(_QWORD *)(v358 + 4864);
                v580 = *(unsigned int *)(v358 + 4880);
                v581 = v578 >> 4;
                if ((_DWORD)v580)
                {
                  v582 = (v581 ^ (v578 >> 9)) & ((_DWORD)v580 - 1);
                  v583 = v579 + (v582 << 6);
                  v584 = *(llvm::MDNode ***)(v583 + 24);
                  if (v578 != v584)
                  {
                    v585 = 1;
                    while (v584 != (llvm::MDNode **)-4096)
                    {
                      v586 = v582 + v585++;
                      v582 = v586 & (v580 - 1);
                      v583 = v579 + (v582 << 6);
                      v584 = *(llvm::MDNode ***)(v583 + 24);
                      if (v578 == v584)
                        goto LABEL_850;
                    }
                    goto LABEL_849;
                  }
                }
                else
                {
LABEL_849:
                  v583 = v579 + (v580 << 6);
                }
LABEL_850:
                v587 = v579 + (v580 << 6);
                if (v583 == v587)
                  goto LABEL_924;
                v588 = v578[1];
                if (!v588)
                  goto LABEL_924;
                v589 = v580 - 1;
LABEL_853:
                v590 = *((_QWORD *)v588 + 3);
                v591 = *(uint64_t ****)(v590 + 40);
                if (v590 && *(_BYTE *)(v590 + 16) == 83)
                {
                  v592 = *(_DWORD *)(v590 + 20);
                  if ((v592 & 0x40000000) != 0)
                    v593 = *(_QWORD *)(v590 - 8);
                  else
                    v593 = v590 - 32 * (v592 & 0x7FFFFFF);
                  if (*(uint64_t ****)(v593
                                     + 32 * *(unsigned int *)(v590 + 60)
                                     + 8 * (((unint64_t)v588 - v593) >> 5)) != v575)
                  {
                    if (!(_DWORD)v580)
                      goto LABEL_874;
                    v599 = ((v591 >> 4) ^ (v591 >> 9)) & v589;
                    v595 = v579 + (v599 << 6);
                    v600 = *(uint64_t ****)(v595 + 24);
                    if (v591 != v600)
                    {
                      v601 = 1;
                      while (v600 != (uint64_t ***)-4096)
                      {
                        v602 = v599 + v601++;
                        v599 = v602 & v589;
                        v595 = v579 + (v599 << 6);
                        v600 = *(uint64_t ****)(v595 + 24);
                        if (v591 == v600)
                          goto LABEL_871;
                      }
                      goto LABEL_874;
                    }
                    goto LABEL_871;
                  }
                }
                else if (v591 != v575)
                {
                  if (!(_DWORD)v580)
                    goto LABEL_874;
                  v594 = ((v591 >> 4) ^ (v591 >> 9)) & v589;
                  v595 = v579 + (v594 << 6);
                  v596 = *(uint64_t ****)(v595 + 24);
                  if (v591 != v596)
                  {
                    v597 = 1;
                    while (v596 != (uint64_t ***)-4096)
                    {
                      v598 = v594 + v597++;
                      v594 = v598 & v589;
                      v595 = v579 + (v594 << 6);
                      v596 = *(uint64_t ****)(v595 + 24);
                      if (v591 == v596)
                        goto LABEL_871;
                    }
LABEL_874:
                    v603 = *v578;
                    if ((*((_BYTE *)v578 + 23) & 0x10) != 0)
                    {
                      v604 = **(_QWORD **)v603;
                      v605 = *(_QWORD *)(v604 + 152);
                      v606 = *(unsigned int *)(v604 + 168);
                      if (!(_DWORD)v606)
                        goto LABEL_881;
                      LODWORD(v607) = (v606 - 1) & (v581 ^ (v578 >> 9));
                      v608 = (llvm::MDNode ***)(v605 + 16 * v607);
                      v609 = *v608;
                      if (*v608 != v578)
                      {
                        v610 = 1;
                        while (v609 != (llvm::MDNode **)-4096)
                        {
                          v611 = v607 + v610++;
                          v607 = v611 & (v606 - 1);
                          v609 = *(llvm::MDNode ***)(v605 + 16 * v607);
                          if (v609 == v578)
                          {
                            v608 = (llvm::MDNode ***)(v605 + 16 * v607);
                            goto LABEL_882;
                          }
                        }
LABEL_881:
                        v608 = (llvm::MDNode ***)(v605 + 16 * v606);
                      }
LABEL_882:
                      v612 = v608[1];
                      v615 = (size_t)*v612;
                      v613 = (char *)(v612 + 2);
                      v614 = v615;
                    }
                    else
                    {
                      v614 = 0;
                      v613 = &byte_1C871356D;
                    }
                    llvm::SSAUpdater::Initialize((uint64_t)&v1026, (uint64_t)v603, v613, v614);
                    v1032 = v575;
                    v616 = *(_DWORD *)(v1026 + 16);
                    if (!v616)
                    {
                      v625 = 0;
                      goto LABEL_897;
                    }
                    v617 = v616 - 1;
                    v618 = (v616 - 1) & ((v575 >> 4) ^ (v575 >> 9));
                    v619 = (_QWORD *)(*(_QWORD *)v1026 + 16 * v618);
                    v620 = (_QWORD *)*v619;
                    if ((uint64_t ***)*v619 != v575)
                    {
                      v621 = 0;
                      v622 = 1;
                      while (v620 != (_QWORD *)-4096)
                      {
                        if (v621)
                          v623 = 0;
                        else
                          v623 = v620 == (_QWORD *)-8192;
                        if (v623)
                          v621 = v619;
                        v624 = v618 + v622++;
                        v618 = v624 & v617;
                        v619 = (_QWORD *)(*(_QWORD *)v1026 + 16 * (v624 & v617));
                        v620 = (_QWORD *)*v619;
                        if ((uint64_t ***)*v619 == v575)
                          goto LABEL_898;
                      }
                      if (v621)
                        v625 = v621;
                      else
                        v625 = v619;
LABEL_897:
                      v619 = sub_1C4ECCA58(v1026, (uint64_t)&v1032, (uint64_t *)&v1032, v625);
                      *v619 = v1032;
                      v619[1] = 0;
                    }
LABEL_898:
                    v619[1] = v578;
                    v626 = (_QWORD *)operator new();
                    *(_DWORD *)v626 = 0;
                    v626[1] = 0;
                    *((_DWORD *)v626 + 4) = 0;
                    v626[5] = v983;
                    v626[3] = v626 + 5;
                    v626[6] = 0;
                    v626[4] = 0x200000001;
                    v626[9] = v626 + 11;
                    v626[10] = 0x400000000;
                    v626[23] = v626 + 25;
                    v626[24] = 0x100000000;
                    v626[27] = v626 + 29;
                    v626[28] = 0x1000000000;
                    *(_QWORD *)&v1014 = v626;
                    v1032 = v626;
                    v627 = sub_1C5FD3BE0((uint64_t)v626, v578);
                    sub_1C5FD3718((uint64_t *)&v1032, v628);
                    llvm::ValueMapper::~ValueMapper((llvm::ValueMapper *)&v1014, v629);
                    v1032 = v577;
                    v630 = *(_DWORD *)(v1026 + 16);
                    if (!v630)
                    {
                      v639 = 0;
                      goto LABEL_912;
                    }
                    v631 = v630 - 1;
                    v632 = (v630 - 1) & ((v577 >> 4) ^ (v577 >> 9));
                    v633 = (_QWORD *)(*(_QWORD *)v1026 + 16 * v632);
                    v634 = (void *)*v633;
                    if ((void *)*v633 != v577)
                    {
                      v635 = 0;
                      v636 = 1;
                      while (v634 != (void *)-4096)
                      {
                        if (v635)
                          v637 = 0;
                        else
                          v637 = v634 == (void *)-8192;
                        if (v637)
                          v635 = v633;
                        v638 = v632 + v636++;
                        v632 = v638 & v631;
                        v633 = (_QWORD *)(*(_QWORD *)v1026 + 16 * (v638 & v631));
                        v634 = (void *)*v633;
                        if ((void *)*v633 == v577)
                          goto LABEL_913;
                      }
                      if (v635)
                        v639 = v635;
                      else
                        v639 = v633;
LABEL_912:
                      v633 = sub_1C4ECCA58(v1026, (uint64_t)&v1032, (uint64_t *)&v1032, v639);
                      *v633 = v1032;
                      v633[1] = 0;
                    }
LABEL_913:
                    v633[1] = v627;
                    v640 = v578[1];
                    if (v640)
                    {
                      while (2)
                      {
                        v641 = *(_QWORD *)(v358 + 4864);
                        v642 = *(unsigned int *)(v358 + 4880);
                        if (!(_DWORD)v642)
                          goto LABEL_920;
                        v643 = *(_QWORD *)(*((_QWORD *)v640 + 3) + 40);
                        v644 = ((v643 >> 4) ^ (v643 >> 9)) & ((_DWORD)v642 - 1);
                        v645 = v641 + (v644 << 6);
                        v646 = *(_QWORD *)(v645 + 24);
                        if (v643 != v646)
                        {
                          v647 = 1;
                          while (v646 != -4096)
                          {
                            v648 = v644 + v647++;
                            v644 = v648 & (v642 - 1);
                            v645 = v641 + (v644 << 6);
                            v646 = *(_QWORD *)(v645 + 24);
                            if (v643 == v646)
                              goto LABEL_921;
                          }
LABEL_920:
                          v645 = v641 + (v642 << 6);
                        }
LABEL_921:
                        v649 = (llvm::Use *)*((_QWORD *)v640 + 1);
                        if (v645 == v641 + (v642 << 6))
                          llvm::SSAUpdater::RewriteUseAfterInsertions((llvm::SSAUpdater *)&v1026, v640);
                        v640 = v649;
                        if (!v649)
                          break;
                        continue;
                      }
                    }
LABEL_924:
                    v576 = (uint64_t ***)v576[1];
                    if (v576 == v575 + 5)
                    {
LABEL_929:
                      if (++v574 == v973)
                        goto LABEL_932;
                      continue;
                    }
                    goto LABEL_840;
                  }
LABEL_871:
                  if (v595 == v587)
                    goto LABEL_874;
                }
                break;
              }
              v588 = (llvm::MDNode *)*((_QWORD *)v588 + 1);
              if (!v588)
                goto LABEL_924;
              goto LABEL_853;
            }
            v1027 = 0u;
            v1028 = 0u;
            v1026 = 0u;
LABEL_932:
            llvm::SSAUpdater::~SSAUpdater((void **)&v1026);
            v650 = *v964;
            v651 = v983;
            if (*v964 > 1 || *(_DWORD *)(v358 + 4700))
            {
              v652 = v954;
              v653 = v971;
              if ((v650 & 1) != 0)
                goto LABEL_938;
              v654 = *(unsigned int *)(v358 + 4712);
              if (((2 * v650) & 0xFFFFFFFC) >= v654 || v654 < 0x41)
              {
                if ((_DWORD)v654)
                {
                  v653 = (_QWORD *)*v971;
                  v652 = *v971 + 16 * v654;
                  do
                  {
LABEL_938:
                    *v653 = -4096;
                    v653 += 2;
                  }
                  while (v653 != (_QWORD *)v652);
                  LODWORD(v654) = *v964 & 1;
                }
                *(_DWORD *)(v358 + 4696) = v654;
                *(_DWORD *)(v358 + 4700) = 0;
                goto LABEL_941;
              }
              if (v650 < 2)
              {
                v863 = 0;
LABEL_1265:
                MEMORY[0x1CAA32FB4](*v971, 8);
                sub_1C627BA90(v964, v863);
                v358 = a1;
                v651 = v983;
                goto LABEL_941;
              }
              v862 = __clz((v650 >> 1) - 1);
              if (v862 - 28 >= 3)
                v863 = 1 << (33 - v862);
              else
                v863 = 64;
              if (v863 != (_DWORD)v654)
                goto LABEL_1265;
              *(_QWORD *)v964 = 0;
              v864 = 16 * v654;
              v865 = (_QWORD *)*v971;
              v358 = a1;
              v651 = v983;
              do
              {
                *v865 = -4096;
                v865 += 2;
                v864 -= 16;
              }
              while (v864);
            }
LABEL_941:
            if (v1016 != &v1017.u64[1])
              free(v1016);
            if ((_DWORD)v1003)
            {
              v655 = (uint64_t *)v1002;
              v656 = (uint64_t *)((char *)v1002 + 8 * v1003);
              v981 = v656;
              while (2)
              {
                if (!sub_1C55B5B78(*(_QWORD *)(v358 + 4672), *(_DWORD *)(v358 + 4688), *v655, &v1016))
                  goto LABEL_1216;
                *(_QWORD *)&v1014 = 0;
                v657 = (void *)*v655;
                v1017 = (int64x2_t)2uLL;
                v1018 = v657;
                if (v657 != (void *)-8192 && v657 != (void *)-4096 && v657 != 0)
                  llvm::ValueHandleBase::AddToUseList((llvm::ValueHandleBase *)&v1017);
                v1016 = &unk_1E814DA10;
                v1019 = v651;
                v659 = sub_1C52E2ED8(v651, &v1016);
                if (v1018 != (void *)-8192 && v1018 != (void *)-4096 && v1018)
                {
                  v660 = v1017.i64[0] & 0xFFFFFFFFFFFFFFF8;
                  *(_QWORD *)(v1017.i64[0] & 0xFFFFFFFFFFFFFFF8) = v1017.i64[1];
                  if (v1017.i64[1])
                  {
                    *(_QWORD *)v1017.i64[1] = *(_QWORD *)v1017.i64[1] & 7 | v660;
                  }
                  else
                  {
                    v661 = v1018;
                    v662 = ***(int32x2_t ****)v1018;
                    v663 = (unint64_t)v662[303];
                    if (v663 <= v660)
                    {
                      v664 = v662[305].u32[0];
                      if (v663 + 16 * v664 > v660)
                      {
                        v665 = v664 - 1;
                        LODWORD(v666) = v665 & ((v1018 >> 4) ^ (v1018 >> 9));
                        v667 = (void **)(v663 + 16 * v666);
                        v668 = *v667;
                        if (v1018 == *v667)
                        {
LABEL_963:
                          *v667 = (void *)-8192;
                          v662[304] = vadd_s32(v662[304], (int32x2_t)0x1FFFFFFFFLL);
                          v661 = v1018;
                        }
                        else
                        {
                          v669 = 1;
                          while (v668 != (void *)-4096)
                          {
                            v670 = v666 + v669++;
                            v666 = v670 & v665;
                            v668 = *(void **)(v663 + 16 * v666);
                            if (v1018 == v668)
                            {
                              v667 = (void **)(v663 + 16 * v666);
                              goto LABEL_963;
                            }
                          }
                        }
                        v661[17] &= ~1u;
                      }
                    }
                  }
                }
                *(_QWORD *)&v1014 = v659[7];
                v671 = *v655;
                v1016 = 0;
                if (sub_1C4B04E2C(*(_QWORD *)(v358 + 4624), *(_DWORD *)(v358 + 4640), v671, &v1016)
                  && v1016 != (void *)(*(_QWORD *)(v358 + 4624) + 16 * *(unsigned int *)(v358 + 4640)))
                {
                  v671 = *((_QWORD *)v1016 + 1);
                }
                v672 = *(_DWORD *)(v358 + 4664);
                if (!v672)
                {
                  v675 = 0;
                  goto LABEL_982;
                }
                v673 = *(_QWORD *)(v358 + 4648);
                v674 = ((v671 >> 4) ^ (v671 >> 9)) & (v672 - 1);
                v675 = (uint64_t *)(v673 + 40 * v674);
                v676 = *v675;
                if (v671 != *v675)
                {
                  v677 = 0;
                  v678 = 1;
                  while (v676 != -4096)
                  {
                    if (v677)
                      v679 = 0;
                    else
                      v679 = v676 == -8192;
                    if (v679)
                      v677 = v675;
                    v680 = v674 + v678++;
                    v674 = v680 & (v672 - 1);
                    v675 = (uint64_t *)(v673 + 40 * v674);
                    v676 = *v675;
                    if (v671 == *v675)
                      goto LABEL_988;
                  }
                  if (v677)
                    v675 = v677;
LABEL_982:
                  v681 = *(_DWORD *)(v358 + 4656);
                  if (4 * v681 + 4 >= 3 * v672)
                  {
                    sub_1C55B67F0(v947, 2 * v672);
                    v846 = *(_QWORD *)(v358 + 4648);
                    v847 = *(_DWORD *)(v358 + 4664) - 1;
                    v848 = v847 & ((v671 >> 4) ^ (v671 >> 9));
                    v675 = (uint64_t *)(v846 + 40 * v848);
                    v849 = *v675;
                    if (*v675 == v671)
                    {
LABEL_1231:
                      v682 = v671;
                    }
                    else
                    {
                      v850 = 0;
                      v851 = 1;
                      while (v849 != -4096)
                      {
                        if (v850)
                          v852 = 0;
                        else
                          v852 = v849 == -8192;
                        if (v852)
                          v850 = v675;
                        v853 = v848 + v851++;
                        v848 = v853 & v847;
                        v675 = (uint64_t *)(v846 + 40 * v848);
                        v849 = *v675;
                        if (*v675 == v671)
                          goto LABEL_1231;
                      }
                      if (v850)
                        v675 = v850;
LABEL_984:
                      v682 = *v675;
                    }
                  }
                  else
                  {
                    if (v672 + ~v681 - *(_DWORD *)(v358 + 4660) > v672 >> 3)
                      goto LABEL_984;
                    sub_1C55B67F0(v947, v672);
                    v854 = *(_QWORD *)(v358 + 4648);
                    v855 = *(_DWORD *)(v358 + 4664) - 1;
                    v856 = v855 & ((v671 >> 4) ^ (v671 >> 9));
                    v675 = (uint64_t *)(v854 + 40 * v856);
                    v857 = *v675;
                    if (*v675 != v671)
                    {
                      v858 = 0;
                      v859 = 1;
                      while (v857 != -4096)
                      {
                        if (v858)
                          v860 = 0;
                        else
                          v860 = v857 == -8192;
                        if (v860)
                          v858 = v675;
                        v861 = v856 + v859++;
                        v856 = v861 & v855;
                        v675 = (uint64_t *)(v854 + 40 * v856);
                        v857 = *v675;
                        if (*v675 == v671)
                          goto LABEL_1244;
                      }
                      if (v858)
                        v675 = v858;
                      v358 = a1;
                      goto LABEL_984;
                    }
LABEL_1244:
                    v682 = v671;
                    v358 = a1;
                  }
                  ++*(_DWORD *)(v358 + 4656);
                  if (v682 != -4096)
                    --*(_DWORD *)(v358 + 4660);
                  *v675 = v671;
                  v675[1] = (uint64_t)(v675 + 3);
                  v675[2] = 0x200000000;
                }
LABEL_988:
                v683 = v1014;
                v684 = *((unsigned int *)v675 + 4);
                if (v684 >= *((unsigned int *)v675 + 5))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)(v675 + 1), (uint64_t)(v675 + 3), v684 + 1, 8);
                  v684 = *((unsigned int *)v675 + 4);
                }
                *(_QWORD *)(v675[1] + 8 * v684) = v683;
                ++*((_DWORD *)v675 + 4);
                v685 = sub_1C55B5A4C(v984, (uint64_t *)&v1014);
                v686 = (_DWORD *)sub_1C55B5A4C(v984, v655);
                v687 = v686;
                if (v1002 == v655)
                {
                  v771 = v963[5];
                  v772 = 48;
                  if (v771 == v963[4])
                    v772 = 52;
                  v773 = *(unsigned int *)((char *)v963 + v772);
                  if ((_DWORD)v773)
                  {
                    v774 = 8 * v773;
                    v775 = (unint64_t *)v963[5];
                    while (*v775 >= 0xFFFFFFFFFFFFFFFELL)
                    {
                      ++v775;
                      v774 -= 8;
                      if (!v774)
                        goto LABEL_1165;
                    }
                  }
                  else
                  {
                    v775 = (unint64_t *)v963[5];
                  }
                  v776 = (unint64_t *)(v771 + 8 * v773);
                  if (v775 != v776)
                  {
                    v777 = (void *)*v775;
LABEL_1119:
                    v778 = *v655;
                    v1016 = v777;
                    *(_QWORD *)&v1026 = v778;
                    v1032 = (void *)v1014;
                    v779 = sub_1C55B5A4C(v984, (uint64_t *)&v1016);
                    if ((*(_BYTE *)v685 & 1) != 0)
                    {
                      v780 = 2;
                      v781 = v685 + 8;
                      goto LABEL_1123;
                    }
                    v780 = *(_DWORD *)(v685 + 16);
                    if (!v780)
                    {
                      v790 = 0;
                      goto LABEL_1136;
                    }
                    v781 = *(_QWORD *)(v685 + 8);
LABEL_1123:
                    v782 = v780 - 1;
                    v783 = ((v1016 >> 4) ^ (v1016 >> 9)) & v782;
                    v784 = (_QWORD *)(v781 + 8 * v783);
                    v785 = (void *)*v784;
                    if (v1016 != (void *)*v784)
                    {
                      v786 = 0;
                      v787 = 1;
                      while (v785 != (void *)-4096)
                      {
                        if (v786)
                          v788 = 0;
                        else
                          v788 = v785 == (void *)-8192;
                        if (v788)
                          v786 = v784;
                        v789 = v783 + v787++;
                        v783 = v789 & v782;
                        v784 = (_QWORD *)(v781 + 8 * v783);
                        v785 = (void *)*v784;
                        if (v1016 == (void *)*v784)
                          goto LABEL_1139;
                      }
                      if (v786)
                        v790 = v786;
                      else
                        v790 = v784;
LABEL_1136:
                      v791 = sub_1C4EE5C58(v685, (uint64_t)&v1016, &v1016, v790);
                      *v791 = v1016;
                      v792 = v1016;
                      v793 = *(unsigned int *)(v685 + 32);
                      if (v793 >= *(unsigned int *)(v685 + 36))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod(v685 + 24, v685 + 40, v793 + 1, 8);
                        v793 = *(unsigned int *)(v685 + 32);
                      }
                      *(_QWORD *)(*(_QWORD *)(v685 + 24) + 8 * v793) = v792;
                      ++*(_DWORD *)(v685 + 32);
                    }
LABEL_1139:
                    sub_1C55B6A90(v687, (uint64_t *)&v1016);
                    if ((*(_BYTE *)(v779 + 56) & 1) != 0)
                    {
                      v794 = v779 + 64;
                      v795 = 2;
                      goto LABEL_1143;
                    }
                    v795 = *(_DWORD *)(v779 + 72);
                    if (!v795)
                    {
                      v804 = 0;
                      goto LABEL_1156;
                    }
                    v794 = *(_QWORD *)(v779 + 64);
LABEL_1143:
                    v796 = v795 - 1;
                    v797 = ((v1032 >> 4) ^ (v1032 >> 9)) & v796;
                    v798 = (_QWORD *)(v794 + 8 * v797);
                    v799 = (void *)*v798;
                    if (v1032 != (void *)*v798)
                    {
                      v800 = 0;
                      v801 = 1;
                      while (v799 != (void *)-4096)
                      {
                        if (v800)
                          v802 = 0;
                        else
                          v802 = v799 == (void *)-8192;
                        if (v802)
                          v800 = v798;
                        v803 = v797 + v801++;
                        v797 = v803 & v796;
                        v798 = (_QWORD *)(v794 + 8 * v797);
                        v799 = (void *)*v798;
                        if (v1032 == (void *)*v798)
                          goto LABEL_1159;
                      }
                      if (v800)
                        v804 = v800;
                      else
                        v804 = v798;
LABEL_1156:
                      v805 = sub_1C4EE5C58(v779 + 56, (uint64_t)&v1032, &v1032, v804);
                      *v805 = v1032;
                      v806 = v1032;
                      v807 = *(unsigned int *)(v779 + 88);
                      if (v807 >= *(unsigned int *)(v779 + 92))
                      {
                        llvm::SmallVectorBase<unsigned int>::grow_pod(v779 + 80, v779 + 96, v807 + 1, 8);
                        v807 = *(unsigned int *)(v779 + 88);
                      }
                      *(_QWORD *)(*(_QWORD *)(v779 + 80) + 8 * v807) = v806;
                      ++*(_DWORD *)(v779 + 88);
                    }
LABEL_1159:
                    sub_1C55B6A90((_DWORD *)(v779 + 56), (uint64_t *)&v1026);
                    v808 = v775 + 1;
                    while (v808 != v776)
                    {
                      v809 = *v808++;
                      v777 = (void *)v809;
                      if (v809 <= 0xFFFFFFFFFFFFFFFDLL)
                      {
                        v775 = v808 - 1;
                        goto LABEL_1119;
                      }
                    }
                  }
LABEL_1165:
                  v1016 = (void *)v1014;
                  v810 = v687[22];
                  if (!(_DWORD)v810)
                  {
LABEL_1215:
                    v358 = a1;
                    v656 = v981;
                    v651 = v983;
                    goto LABEL_1216;
                  }
                  v811 = (_QWORD *)*((_QWORD *)v687 + 10);
                  v812 = &v811[v810];
                  while (2)
                  {
                    *(_QWORD *)&v1026 = *v811;
                    v813 = sub_1C477672C((uint64_t)&v992, v1026);
                    if (__b == v992)
                      v814 = (uint64_t *)((char *)&v994 + 4);
                    else
                      v814 = &v994;
                    if (v813 == (_QWORD *)((char *)__b + 8 * *(unsigned int *)v814))
                    {
                      if ((*(_BYTE *)(v685 + 56) & 1) != 0)
                      {
                        v815 = 2;
                        v816 = v685 + 64;
                        goto LABEL_1175;
                      }
                      v815 = *(_DWORD *)(v685 + 72);
                      if (!v815)
                      {
                        v825 = 0;
                        goto LABEL_1188;
                      }
                      v816 = *(_QWORD *)(v685 + 64);
LABEL_1175:
                      v817 = v815 - 1;
                      v818 = ((v1026 >> 4) ^ (v1026 >> 9)) & v817;
                      v819 = (_QWORD *)(v816 + 8 * v818);
                      v820 = *v819;
                      if ((_QWORD)v1026 != *v819)
                      {
                        v821 = 0;
                        v822 = 1;
                        while (v820 != -4096)
                        {
                          if (v821)
                            v823 = 0;
                          else
                            v823 = v820 == -8192;
                          if (v823)
                            v821 = v819;
                          v824 = v818 + v822++;
                          v818 = v824 & v817;
                          v819 = (_QWORD *)(v816 + 8 * v818);
                          v820 = *v819;
                          if ((_QWORD)v1026 == *v819)
                            goto LABEL_1191;
                        }
                        if (v821)
                          v825 = v821;
                        else
                          v825 = v819;
LABEL_1188:
                        v826 = sub_1C4EE5C58(v685 + 56, (uint64_t)&v1026, &v1026, v825);
                        *v826 = v1026;
                        v827 = v1026;
                        v828 = *(unsigned int *)(v685 + 88);
                        if (v828 >= *(unsigned int *)(v685 + 92))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod(v685 + 80, v685 + 96, v828 + 1, 8);
                          v828 = *(unsigned int *)(v685 + 88);
                        }
                        *(_QWORD *)(*(_QWORD *)(v685 + 80) + 8 * v828) = v827;
                        ++*(_DWORD *)(v685 + 88);
                      }
LABEL_1191:
                      v829 = sub_1C55B5A4C(v984, (uint64_t *)&v1026);
                      v830 = v829;
                      v831 = v829 + 8;
                      if ((*(_BYTE *)v829 & 1) != 0)
                      {
                        v832 = 2;
                        goto LABEL_1195;
                      }
                      v832 = *(_DWORD *)(v829 + 16);
                      if (!v832)
                      {
                        v841 = 0;
                        goto LABEL_1208;
                      }
                      v831 = *(_QWORD *)(v829 + 8);
LABEL_1195:
                      v833 = v832 - 1;
                      v834 = ((v1016 >> 4) ^ (v1016 >> 9)) & v833;
                      v835 = (_QWORD *)(v831 + 8 * v834);
                      v836 = (void *)*v835;
                      if (v1016 != (void *)*v835)
                      {
                        v837 = 0;
                        v838 = 1;
                        while (v836 != (void *)-4096)
                        {
                          if (v837)
                            v839 = 0;
                          else
                            v839 = v836 == (void *)-8192;
                          if (v839)
                            v837 = v835;
                          v840 = v834 + v838++;
                          v834 = v840 & v833;
                          v835 = (_QWORD *)(v831 + 8 * v834);
                          v836 = (void *)*v835;
                          if (v1016 == (void *)*v835)
                            goto LABEL_1211;
                        }
                        if (v837)
                          v841 = v837;
                        else
                          v841 = v835;
LABEL_1208:
                        v842 = sub_1C4EE5C58(v829, (uint64_t)&v1016, &v1016, v841);
                        *v842 = v1016;
                        v843 = v1016;
                        v844 = *(unsigned int *)(v830 + 32);
                        if (v844 >= *(unsigned int *)(v830 + 36))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod(v830 + 24, v830 + 40, v844 + 1, 8);
                          v844 = *(unsigned int *)(v830 + 32);
                        }
                        *(_QWORD *)(*(_QWORD *)(v830 + 24) + 8 * v844) = v843;
                        ++*(_DWORD *)(v830 + 32);
                      }
                    }
LABEL_1211:
                    if (++v811 == v812)
                      goto LABEL_1215;
                    continue;
                  }
                }
                v1016 = (void *)1;
                v1017 = v965;
                v688 = *v686;
                if ((*v686 & 1) != 0 || (v689 = v686[4], v689 <= 2))
                {
                  v690 = v686[1];
                  LODWORD(v1016) = v688 | 1;
                  HIDWORD(v1016) = v690;
                  v691 = (__int128 *)&v1017;
                  v692 = 16;
                }
                else
                {
                  LODWORD(v1016) = 0;
                  v691 = (__int128 *)operator new(8 * v689, (std::align_val_t)8uLL);
                  v1017.i64[0] = (uint64_t)v691;
                  v1017.i64[1] = v689;
                  v688 = *v687;
                  v845 = v687[1];
                  v45 = (v1016 & 1) == 0;
                  LODWORD(v1016) = v1016 & 1 | *v687 & 0xFFFFFFFE;
                  HIDWORD(v1016) = v845;
                  if (v45)
                  {
                    v692 = 8 * v689;
                  }
                  else
                  {
                    v691 = (__int128 *)&v1017;
                    v692 = 16;
                  }
                }
                if ((v688 & 1) != 0)
                  v693 = v687 + 2;
                else
                  v693 = (const void *)*((_QWORD *)v687 + 1);
                memcpy(v691, v693, v692);
                v1018 = v1020;
                v1019 = 0x200000000;
                if (v687[8])
                {
                  sub_1C49EEBE4((uint64_t)&v1018, (uint64_t)(v687 + 6));
                  if ((_DWORD)v1019)
                  {
                    v694 = (uint64_t *)v1018;
                    v695 = (uint64_t *)((char *)v1018 + 8 * v1019);
                    while (2)
                    {
                      v696 = *v694;
                      v697 = sub_1C477672C((uint64_t)&v992, *v694);
                      if (__b == v992)
                        v698 = (uint64_t *)((char *)&v994 + 4);
                      else
                        v698 = &v994;
                      if (v697 == (_QWORD *)((char *)__b + 8 * *(unsigned int *)v698))
                        goto LABEL_1051;
                      v699 = *(_QWORD *)(a1 + 4864);
                      v700 = *(unsigned int *)(a1 + 4880);
                      if ((_DWORD)v700)
                      {
                        v701 = ((_DWORD)v700 - 1) & ((v696 >> 4) ^ (v696 >> 9));
                        v702 = v699 + (v701 << 6);
                        v703 = *(_QWORD *)(v702 + 24);
                        if (v696 != v703)
                        {
                          v704 = 1;
                          while (v703 != -4096)
                          {
                            v705 = v701 + v704++;
                            v701 = v705 & (v700 - 1);
                            v702 = v699 + (v701 << 6);
                            v703 = *(_QWORD *)(v702 + 24);
                            if (v696 == v703)
                              goto LABEL_1011;
                          }
                          goto LABEL_1010;
                        }
                      }
                      else
                      {
LABEL_1010:
                        v702 = v699 + (v700 << 6);
                      }
LABEL_1011:
                      v706 = *(_QWORD *)(v702 + 56);
                      *(_QWORD *)&v1026 = v706;
                      if ((*(_BYTE *)v685 & 1) != 0)
                      {
                        v707 = 2;
                        v708 = v685 + 8;
                        goto LABEL_1015;
                      }
                      v707 = *(_DWORD *)(v685 + 16);
                      if (v707)
                      {
                        v708 = *(_QWORD *)(v685 + 8);
LABEL_1015:
                        v709 = v707 - 1;
                        v710 = v709 & ((v706 >> 4) ^ (v706 >> 9));
                        v711 = (_QWORD *)(v708 + 8 * v710);
                        v712 = *v711;
                        if (v706 != *v711)
                        {
                          v713 = 0;
                          v714 = 1;
                          while (v712 != -4096)
                          {
                            if (v713)
                              v715 = 0;
                            else
                              v715 = v712 == -8192;
                            if (v715)
                              v713 = v711;
                            v716 = v710 + v714++;
                            v710 = v716 & v709;
                            v711 = (_QWORD *)(v708 + 8 * v710);
                            v712 = *v711;
                            if (v706 == *v711)
                              goto LABEL_1031;
                          }
                          if (v713)
                            v717 = v713;
                          else
                            v717 = v711;
LABEL_1028:
                          v718 = sub_1C4EE5C58(v685, (uint64_t)&v1026, &v1026, v717);
                          *v718 = v1026;
                          v719 = v1026;
                          v720 = *(unsigned int *)(v685 + 32);
                          if (v720 >= *(unsigned int *)(v685 + 36))
                          {
                            llvm::SmallVectorBase<unsigned int>::grow_pod(v685 + 24, v685 + 40, v720 + 1, 8);
                            v720 = *(unsigned int *)(v685 + 32);
                          }
                          *(_QWORD *)(*(_QWORD *)(v685 + 24) + 8 * v720) = v719;
                          ++*(_DWORD *)(v685 + 32);
                        }
LABEL_1031:
                        v721 = sub_1C55B5A4C(v984, (uint64_t *)&v1026);
                        if ((*(_BYTE *)(v721 + 56) & 1) != 0)
                        {
                          v722 = v721 + 64;
                          v723 = 2;
                        }
                        else
                        {
                          v723 = *(_DWORD *)(v721 + 72);
                          if (!v723)
                          {
                            v732 = 0;
LABEL_1048:
                            v733 = sub_1C4EE5C58(v721 + 56, (uint64_t)&v1014, &v1014, v732);
                            *v733 = v1014;
                            v734 = v1014;
                            v735 = *(unsigned int *)(v721 + 88);
                            if (v735 >= *(unsigned int *)(v721 + 92))
                            {
                              llvm::SmallVectorBase<unsigned int>::grow_pod(v721 + 80, v721 + 96, v735 + 1, 8);
                              v735 = *(unsigned int *)(v721 + 88);
                            }
                            *(_QWORD *)(*(_QWORD *)(v721 + 80) + 8 * v735) = v734;
                            ++*(_DWORD *)(v721 + 88);
                            goto LABEL_1051;
                          }
                          v722 = *(_QWORD *)(v721 + 64);
                        }
                        v724 = v723 - 1;
                        v725 = ((v1014 >> 4) ^ (v1014 >> 9)) & v724;
                        v726 = (_QWORD *)(v722 + 8 * v725);
                        v727 = *v726;
                        if ((_QWORD)v1014 != *v726)
                        {
                          v728 = 0;
                          v729 = 1;
                          while (v727 != -4096)
                          {
                            if (v728)
                              v730 = 0;
                            else
                              v730 = v727 == -8192;
                            if (v730)
                              v728 = v726;
                            v731 = v725 + v729++;
                            v725 = v731 & v724;
                            v726 = (_QWORD *)(v722 + 8 * v725);
                            v727 = *v726;
                            if ((_QWORD)v1014 == *v726)
                              goto LABEL_1051;
                          }
                          if (v728)
                            v732 = v728;
                          else
                            v732 = v726;
                          goto LABEL_1048;
                        }
LABEL_1051:
                        if (++v694 == v695)
                          goto LABEL_1055;
                        continue;
                      }
                      break;
                    }
                    v717 = 0;
                    goto LABEL_1028;
                  }
                }
LABEL_1055:
                *(_QWORD *)&v1026 = v1014;
                v736 = v687[22];
                if ((_DWORD)v736)
                {
                  v737 = (void **)*((_QWORD *)v687 + 10);
                  v738 = &v737[v736];
                  while (2)
                  {
                    v1032 = *v737;
                    v739 = sub_1C477672C((uint64_t)&v992, (uint64_t)v1032);
                    if (__b == v992)
                      v740 = (uint64_t *)((char *)&v994 + 4);
                    else
                      v740 = &v994;
                    if (v739 != (_QWORD *)((char *)__b + 8 * *(unsigned int *)v740))
                      goto LABEL_1101;
                    if ((*(_BYTE *)(v685 + 56) & 1) != 0)
                    {
                      v741 = 2;
                      v742 = v685 + 64;
                      goto LABEL_1065;
                    }
                    v741 = *(_DWORD *)(v685 + 72);
                    if (v741)
                    {
                      v742 = *(_QWORD *)(v685 + 64);
LABEL_1065:
                      v743 = v741 - 1;
                      v744 = ((v1032 >> 4) ^ (v1032 >> 9)) & v743;
                      v745 = (_QWORD *)(v742 + 8 * v744);
                      v746 = (void *)*v745;
                      if (v1032 != (void *)*v745)
                      {
                        v747 = 0;
                        v748 = 1;
                        while (v746 != (void *)-4096)
                        {
                          if (v747)
                            v749 = 0;
                          else
                            v749 = v746 == (void *)-8192;
                          if (v749)
                            v747 = v745;
                          v750 = v744 + v748++;
                          v744 = v750 & v743;
                          v745 = (_QWORD *)(v742 + 8 * v744);
                          v746 = (void *)*v745;
                          if (v1032 == (void *)*v745)
                            goto LABEL_1081;
                        }
                        if (v747)
                          v751 = v747;
                        else
                          v751 = v745;
LABEL_1078:
                        v752 = sub_1C4EE5C58(v685 + 56, (uint64_t)&v1032, &v1032, v751);
                        *v752 = v1032;
                        v753 = v1032;
                        v754 = *(unsigned int *)(v685 + 88);
                        if (v754 >= *(unsigned int *)(v685 + 92))
                        {
                          llvm::SmallVectorBase<unsigned int>::grow_pod(v685 + 80, v685 + 96, v754 + 1, 8);
                          v754 = *(unsigned int *)(v685 + 88);
                        }
                        *(_QWORD *)(*(_QWORD *)(v685 + 80) + 8 * v754) = v753;
                        ++*(_DWORD *)(v685 + 88);
                      }
LABEL_1081:
                      v755 = sub_1C55B5A4C(v984, (uint64_t *)&v1032);
                      v756 = v755;
                      v757 = v755 + 8;
                      if ((*(_BYTE *)v755 & 1) != 0)
                      {
                        v758 = 2;
                      }
                      else
                      {
                        v758 = *(_DWORD *)(v755 + 16);
                        if (!v758)
                        {
                          v767 = 0;
LABEL_1098:
                          v768 = sub_1C4EE5C58(v755, (uint64_t)&v1026, &v1026, v767);
                          *v768 = v1026;
                          v769 = v1026;
                          v770 = *(unsigned int *)(v756 + 32);
                          if (v770 >= *(unsigned int *)(v756 + 36))
                          {
                            llvm::SmallVectorBase<unsigned int>::grow_pod(v756 + 24, v756 + 40, v770 + 1, 8);
                            v770 = *(unsigned int *)(v756 + 32);
                          }
                          *(_QWORD *)(*(_QWORD *)(v756 + 24) + 8 * v770) = v769;
                          ++*(_DWORD *)(v756 + 32);
                          goto LABEL_1101;
                        }
                        v757 = *(_QWORD *)(v755 + 8);
                      }
                      v759 = v758 - 1;
                      v760 = ((v1026 >> 4) ^ (v1026 >> 9)) & v759;
                      v761 = (_QWORD *)(v757 + 8 * v760);
                      v762 = *v761;
                      if ((_QWORD)v1026 != *v761)
                      {
                        v763 = 0;
                        v764 = 1;
                        while (v762 != -4096)
                        {
                          if (v763)
                            v765 = 0;
                          else
                            v765 = v762 == -8192;
                          if (v765)
                            v763 = v761;
                          v766 = v760 + v764++;
                          v760 = v766 & v759;
                          v761 = (_QWORD *)(v757 + 8 * v760);
                          v762 = *v761;
                          if ((_QWORD)v1026 == *v761)
                            goto LABEL_1101;
                        }
                        if (v763)
                          v767 = v763;
                        else
                          v767 = v761;
                        goto LABEL_1098;
                      }
LABEL_1101:
                      if (++v737 == v738)
                        goto LABEL_1105;
                      continue;
                    }
                    break;
                  }
                  v751 = 0;
                  goto LABEL_1078;
                }
LABEL_1105:
                if (v1018 != v1020)
                  free(v1018);
                v358 = a1;
                v656 = v981;
                v651 = v983;
                if ((v1016 & 1) == 0)
                  MEMORY[0x1CAA32FB4](v1017.i64[0], 8);
LABEL_1216:
                if (++v655 == v656)
                  break;
                continue;
              }
            }
            sub_1C55B6B84(v651);
            if (*(_BYTE *)v957)
            {
              sub_1C4E43068((uint64_t)v946);
              MEMORY[0x1CAA32FB4](*v946, 8);
              *(_BYTE *)v957 = 0;
            }
            v351 = (char *)(v963 + 10);
          }
        }
LABEL_1267:
        v258 = (_DWORD *)v959;
        v68 = v960;
        if (v988 == v987)
          goto LABEL_1268;
        if (v989 >= 0x21 && 4 * (HIDWORD(v989) - v990) < v989)
        {
          free(v988);
          v903 = 1 << (33 - __clz(HIDWORD(v989) - v990 - 1));
          v297 = (HIDWORD(v989) - v990) > 0x10;
          v990 = 0;
          if (v297)
            v904 = v903;
          else
            v904 = 32;
          v989 = v904;
          v905 = (char *)malloc_type_malloc(8 * v904, 0x4065EBACuLL);
          if (v905)
          {
            v988 = v905;
            memset(v905, 255, 8 * v989);
            goto LABEL_1269;
          }
LABEL_1465:
          llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
        }
        memset(v988, 255, 8 * v989);
LABEL_1268:
        v990 = 0;
        HIDWORD(v989) = 0;
LABEL_1269:
        v257 = a1;
        if (__b == v992)
        {
LABEL_1270:
          v995 = 0;
          HIDWORD(v994) = 0;
        }
        else
        {
          if (v994 < 0x21 || 4 * (HIDWORD(v994) - v995) >= v994)
          {
            memset(__b, 255, 8 * v994);
            goto LABEL_1270;
          }
          free(__b);
          v906 = 1 << (33 - __clz(HIDWORD(v994) - v995 - 1));
          v297 = (HIDWORD(v994) - v995) > 0x10;
          v995 = 0;
          if (v297)
            v907 = v906;
          else
            v907 = 32;
          v994 = v907;
          v908 = malloc_type_malloc(8 * v907, 0x4065EBACuLL);
          if (!v908)
            goto LABEL_1465;
          __b = v908;
          memset(v908, 255, 8 * v994);
        }
        LODWORD(v1003) = 0;
        sub_1C55AF894((uint64_t)v1008, (uint64_t)v1008 + 80 * v1009);
        LODWORD(v1009) = 0;
LABEL_1272:
        v866 = *(_DWORD *)(v257 + 4936);
        if (v866 || *(_DWORD *)(v257 + 4940))
        {
          v867 = *(unsigned int *)(v257 + 4944);
          if (v867 <= 4 * v866 || v867 < 0x41)
          {
            if ((_DWORD)v867)
            {
              v871 = *(_QWORD *)v68 + 24;
              v872 = 40 * v867;
              do
              {
                v873 = *(_QWORD *)(v871 - 24);
                if (v873 != -4096)
                {
                  if (v873 != -8192)
                  {
                    v874 = *(void **)(v871 - 16);
                    if ((void *)v871 != v874)
                      free(v874);
                  }
                  *(_QWORD *)(v871 - 24) = -4096;
                }
                v871 += 40;
                v872 -= 40;
              }
              while (v872);
            }
            *(_QWORD *)(v257 + 4936) = 0;
          }
          else
          {
            sub_1C4F5D740(v68);
            if (v866)
            {
              v868 = 1 << (33 - __clz(v866 - 1));
              if (v868 <= 64)
                v866 = 64;
              else
                v866 = v868;
            }
            if (v866 == *(_DWORD *)(v257 + 4944))
            {
              *(_QWORD *)(v257 + 4936) = 0;
              if (v866)
              {
                v869 = *(_QWORD **)(v257 + 4928);
                v870 = 40 * v866;
                do
                {
                  *v869 = -4096;
                  v869 += 5;
                  v870 -= 40;
                }
                while (v870);
              }
            }
            else
            {
              MEMORY[0x1CAA32FB4](*(_QWORD *)v68, 8);
              if (v866)
              {
                v876 = (4 * v866 / 3 + 1) | ((unint64_t)(4 * v866 / 3 + 1) >> 1);
                v877 = v876 | (v876 >> 2) | ((v876 | (v876 >> 2)) >> 4);
                LODWORD(v877) = (((v877 | (v877 >> 8)) >> 16) | v877 | (v877 >> 8)) + 1;
                *(_DWORD *)(v257 + 4944) = v877;
                v878 = operator new(40 * v877, (std::align_val_t)8uLL);
                *(_QWORD *)(v257 + 4928) = v878;
                *(_QWORD *)(v257 + 4936) = 0;
                v879 = *(unsigned int *)(v257 + 4944);
                if ((_DWORD)v879)
                {
                  v880 = 40 * v879;
                  do
                  {
                    *v878 = -4096;
                    v878 += 5;
                    v880 -= 40;
                  }
                  while (v880);
                }
              }
              else
              {
                *(_QWORD *)v68 = 0;
                *(_QWORD *)(v68 + 8) = 0;
                *(_DWORD *)(v68 + 16) = 0;
              }
            }
          }
        }
        sub_1C4ECAD30(v258);
        v875 = *(void **)(v257 + 4984);
        if (v875 == *(void **)(v257 + 4976))
        {
LABEL_1295:
          *(_DWORD *)(v957 + 84) = 0;
          *(_DWORD *)(v957 + 88) = 0;
        }
        else
        {
          v881 = *(unsigned int *)(v257 + 4992);
          if (v881 < 0x21
            || 4 * (*(_DWORD *)(v257 + 4996) - *(_DWORD *)(v257 + 5000)) >= v881)
          {
            memset(v875, 255, 8 * v881);
            goto LABEL_1295;
          }
          free(v875);
          v899 = *(_DWORD *)(v257 + 4996) - *(_DWORD *)(v257 + 5000);
          v900 = 1 << (33 - __clz(v899 - 1));
          if (v899 <= 0x10)
            v901 = 32;
          else
            v901 = v900;
          *(_DWORD *)(v257 + 4992) = v901;
          *(_QWORD *)(v257 + 4996) = 0;
          v902 = malloc_type_malloc(8 * v901, 0x4065EBACuLL);
          if (!v902)
            goto LABEL_1465;
          *(_QWORD *)(v257 + 4984) = v902;
          memset(v902, 255, 8 * *(unsigned int *)(v257 + 4992));
        }
        sub_1C55AF894(*(_QWORD *)(v257 + 5040), *(_QWORD *)(v257 + 5040) + 80 * *(unsigned int *)(v257 + 5048));
        *(_DWORD *)(v257 + 5048) = 0;
        sub_1C55AF894(*(_QWORD *)(v257 + 5216), *(_QWORD *)(v257 + 5216) + 80 * *(unsigned int *)(v257 + 5224));
        *(_DWORD *)(v257 + 5224) = 0;
        v84 = v951;
        v83 = j;
LABEL_1297:
        ++v83;
      }
      while (v83 != v84);
LABEL_1366:
      LODWORD(v1000) = 0;
      v67 = v949 + 1;
      v29 = v984;
      v4 = a1;
      if (v949 + 1 == (_QWORD *)v948)
      {
        if (v999 != v1001)
          free(v999);
        break;
      }
    }
  }
  if (v988 != v987)
    free(v988);
  if (__b != v992)
    free(__b);
  if (v1002 != v1004)
    free(v1002);
  if (v1005 != v1007)
    free(v1005);
  sub_1C55AF894((uint64_t)v1008, (uint64_t)v1008 + 80 * v1009);
  if (v1008 != v1010)
    free(v1008);
  v909 = *(_DWORD *)(v4 + 4680);
  if (v909 || *(_DWORD *)(v4 + 4684))
  {
    v910 = *(unsigned int *)(v4 + 4688);
    v911 = *(_QWORD *)(v4 + 4672);
    if (v910 > 4 * v909 && v910 >= 0x41)
    {
      v912 = 120 * v910;
      v913 = (_QWORD *)(v911 + 104);
      do
      {
        if ((*(v913 - 13) | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v914 = (_QWORD *)*(v913 - 2);
          if (v913 != v914)
            free(v914);
          if ((*(_BYTE *)(v913 - 5) & 1) == 0)
            MEMORY[0x1CAA32FB4](*(v913 - 4), 8);
          v915 = (char *)*(v913 - 9);
          if (v913 - 7 != (_QWORD *)v915)
            free(v915);
          if ((*(_BYTE *)(v913 - 12) & 1) == 0)
            MEMORY[0x1CAA32FB4](*(v913 - 11), 8);
        }
        v913 += 15;
        v912 -= 120;
      }
      while (v912);
      v921 = 1 << (33 - __clz(v909 - 1));
      if (v921 <= 64)
        v921 = 64;
      if (v909)
        v922 = v921;
      else
        v922 = 0;
      if ((_DWORD)v922 == *(_DWORD *)(v4 + 4688))
      {
        *(_QWORD *)(v4 + 4680) = 0;
        if ((_DWORD)v922)
        {
          v923 = *(_QWORD **)(v4 + 4672);
          v924 = 120 * v922;
          do
          {
            *v923 = -4096;
            v923 += 15;
            v924 -= 120;
          }
          while (v924);
        }
      }
      else
      {
        MEMORY[0x1CAA32FB4](*(_QWORD *)v29, 8);
        if ((_DWORD)v922)
        {
          v925 = (4 * (int)v922 / 3u + 1) | ((unint64_t)(4 * (int)v922 / 3u + 1) >> 1);
          v926 = v925 | (v925 >> 2) | ((v925 | (v925 >> 2)) >> 4);
          LODWORD(v926) = (((v926 | (v926 >> 8)) >> 16) | v926 | (v926 >> 8)) + 1;
          *(_DWORD *)(v4 + 4688) = v926;
          v927 = operator new(120 * v926, (std::align_val_t)8uLL);
          *(_QWORD *)(v4 + 4672) = v927;
          *(_QWORD *)(v4 + 4680) = 0;
          v928 = *(unsigned int *)(v4 + 4688);
          if ((_DWORD)v928)
          {
            v929 = 120 * v928;
            do
            {
              *v927 = -4096;
              v927 += 15;
              v929 -= 120;
            }
            while (v929);
          }
        }
        else
        {
          *(_QWORD *)v29 = 0;
          *(_QWORD *)(v29 + 8) = 0;
          *(_DWORD *)(v29 + 16) = 0;
        }
      }
      goto LABEL_1430;
    }
    if (!(_DWORD)v910)
    {
LABEL_1413:
      *(_QWORD *)(v4 + 4680) = 0;
      goto LABEL_1430;
    }
    v916 = 120 * v910;
    v917 = (_QWORD *)(v911 + 104);
    while (2)
    {
      v918 = *(v917 - 13);
      if (v918 == -8192)
      {
LABEL_1411:
        *(v917 - 13) = -4096;
      }
      else if (v918 != -4096)
      {
        v919 = (_QWORD *)*(v917 - 2);
        if (v917 != v919)
          free(v919);
        if ((*(_BYTE *)(v917 - 5) & 1) == 0)
          MEMORY[0x1CAA32FB4](*(v917 - 4), 8);
        v920 = (char *)*(v917 - 9);
        if (v917 - 7 != (_QWORD *)v920)
          free(v920);
        if ((*(_BYTE *)(v917 - 12) & 1) == 0)
          MEMORY[0x1CAA32FB4](*(v917 - 11), 8);
        goto LABEL_1411;
      }
      v917 += 15;
      v916 -= 120;
      if (!v916)
        goto LABEL_1413;
      continue;
    }
  }
LABEL_1430:
  v930 = *(_DWORD *)(v4 + 4656);
  if (v930 || *(_DWORD *)(v4 + 4660))
  {
    v931 = *(unsigned int *)(v4 + 4664);
    if (v931 <= 4 * v930 || v931 < 0x41)
    {
      if ((_DWORD)v931)
      {
        v940 = *(_QWORD *)v947 + 24;
        v941 = 40 * v931;
        do
        {
          v942 = *(_QWORD *)(v940 - 24);
          if (v942 != -4096)
          {
            if (v942 != -8192)
            {
              v943 = *(void **)(v940 - 16);
              if ((void *)v940 != v943)
                free(v943);
            }
            *(_QWORD *)(v940 - 24) = -4096;
          }
          v940 += 40;
          v941 -= 40;
        }
        while (v941);
      }
      *(_QWORD *)(v4 + 4656) = 0;
    }
    else
    {
      sub_1C4F5D740(v947);
      if (v930)
      {
        v932 = 1 << (33 - __clz(v930 - 1));
        if (v932 <= 64)
          v930 = 64;
        else
          v930 = v932;
      }
      if (v930 == *(_DWORD *)(v4 + 4664))
      {
        *(_QWORD *)(v4 + 4656) = 0;
        if (v930)
        {
          v933 = *(_QWORD **)(v4 + 4648);
          v934 = 40 * v930;
          do
          {
            *v933 = -4096;
            v933 += 5;
            v934 -= 40;
          }
          while (v934);
        }
      }
      else
      {
        MEMORY[0x1CAA32FB4](*(_QWORD *)v947, 8);
        if (v930)
        {
          v935 = (4 * v930 / 3 + 1) | ((unint64_t)(4 * v930 / 3 + 1) >> 1);
          v936 = v935 | (v935 >> 2) | ((v935 | (v935 >> 2)) >> 4);
          LODWORD(v936) = (((v936 | (v936 >> 8)) >> 16) | v936 | (v936 >> 8)) + 1;
          *(_DWORD *)(v4 + 4664) = v936;
          v937 = operator new(40 * v936, (std::align_val_t)8uLL);
          *(_QWORD *)(v4 + 4648) = v937;
          *(_QWORD *)(v4 + 4656) = 0;
          v938 = *(unsigned int *)(v4 + 4664);
          if ((_DWORD)v938)
          {
            v939 = 40 * v938;
            do
            {
              *v937 = -4096;
              v937 += 5;
              v939 -= 40;
            }
            while (v939);
          }
        }
        else
        {
          *(_QWORD *)v947 = 0;
          *(_QWORD *)(v947 + 8) = 0;
          *(_DWORD *)(v947 + 16) = 0;
        }
      }
    }
  }
  if (v1011 != v1013)
    free(v1011);
}

void sub_1C55B4BF0()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C55B4C04(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E81703C0;
  result[1] = v3;
  return result;
}

uint64_t sub_1C55B4C38(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E81703C0;
  a2[1] = v2;
  return result;
}

_QWORD *sub_1C55B4C54(_QWORD *result, uint64_t *a2)
{
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;

  v2 = *a2;
  v3 = result[1];
  v4 = *(unsigned int *)(v3 + 8);
  if (v4 >= *(_DWORD *)(v3 + 12))
  {
    result = llvm::SmallVectorBase<unsigned int>::grow_pod(result[1], v3 + 16, v4 + 1, 8);
    LODWORD(v4) = *(_DWORD *)(v3 + 8);
  }
  *(_QWORD *)(*(_QWORD *)v3 + 8 * v4) = v2;
  ++*(_DWORD *)(v3 + 8);
  return result;
}

uint64_t sub_1C55B4CB0(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _BYTE v14[64];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C627C21C(a1, v6, v6 + 16 * v7);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_QWORD *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *(_QWORD *)v9 = v10;
      *((_DWORD *)v9 + 2) = *(_DWORD *)(a1 + v8 + 16);
      v9 += 16;
    }
    v8 += 16;
  }
  while (v8 != 64);
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C627C21C(a1, (uint64_t)v14, (uint64_t)v9);
}

unint64_t sub_1C55B4E28(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  unint64_t v9;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = v4 + a3;
  if (v4 + a3 > (unint64_t)*(unsigned int *)(a1 + 12))
  {
    v7 = *(_QWORD *)a1 + 56 * v4;
    if (*(_QWORD *)a1 <= a2 && v7 > a2)
    {
      v9 = a2 - *(_QWORD *)a1;
      sub_1C627C2E8(a1, v5);
      return *(_QWORD *)a1 + v9;
    }
    else
    {
      sub_1C627C2E8(a1, v5);
    }
  }
  return a2;
}

uint64_t sub_1C55B4E90(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _BYTE v14[1024];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a2 >= 0x41)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 0x40)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C627C720(a1, v6, v6 + 16 * v7);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_QWORD *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *(_QWORD *)v9 = v10;
      v9[8] = *(_BYTE *)(a1 + v8 + 16);
      v9 += 16;
    }
    v8 += 16;
  }
  while (v8 != 1024);
  if (a2 > 0x40)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C627C720(a1, (uint64_t)v14, (uint64_t)v9);
}

uint64_t sub_1C55B5014(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _QWORD v14[129];

  v14[128] = *MEMORY[0x1E0C80C00];
  if (a2 >= 0x41)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(_QWORD **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 0x40)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C627C908(a1, v6, &v6[2 * v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_QWORD *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *v9 = v10;
      v9[1] = *(_QWORD *)(a1 + v8 + 16);
      v9 += 2;
    }
    v8 += 16;
  }
  while (v8 != 1024);
  if (a2 > 0x40)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C627C908(a1, v14, v9);
}

unint64_t sub_1C55B5198(unsigned int *a1, unint64_t a2, uint64_t a3)
{
  uint64_t v4;
  unint64_t v5;
  unint64_t v7;
  unint64_t v9;

  v4 = a1[2];
  v5 = v4 + a3;
  if (v4 + a3 > (unint64_t)a1[3])
  {
    v7 = *(_QWORD *)a1 + 1032 * v4;
    if (*(_QWORD *)a1 <= a2 && v7 > a2)
    {
      v9 = a2 - *(_QWORD *)a1;
      sub_1C627C9D4(a1, v5);
      return *(_QWORD *)a1 + v9;
    }
    else
    {
      sub_1C627C9D4(a1, v5);
    }
  }
  return a2;
}

unsigned int *sub_1C55B5200(unsigned int *result, unsigned int *a2)
{
  unsigned int v2;
  int v3;
  unsigned int v4;
  uint64_t v5;
  unsigned int *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  int *v10;
  int *v11;
  uint64_t v12;
  uint64_t v13;
  char v14;
  int *v15;
  int *v16;
  __int128 v17;

  v2 = *a2;
  *a2 = *result & 0xFFFFFFFE | *a2 & 1;
  v3 = result[1];
  *result = v2 & 0xFFFFFFFE | *result & 1;
  result[1] = a2[1];
  a2[1] = v3;
  v4 = *a2;
  if ((*result & 1) != 0)
  {
    if ((v4 & 1) == 0)
    {
      v6 = a2;
      goto LABEL_7;
    }
    v9 = 0;
    while (1)
    {
      v10 = (int *)&result[v9];
      v11 = (int *)&a2[v9];
      v12 = *(_QWORD *)&result[v9 + 2];
      v13 = *(_QWORD *)&a2[v9 + 2];
      if (v12 == -4096 || v12 == -8192 || v13 == -4096 || v13 == -8192)
      {
        *((_QWORD *)v10 + 1) = v13;
        *((_QWORD *)v11 + 1) = v12;
        if ((v12 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v15 = (int *)&a2[v9];
          v16 = (int *)&result[v9];
          goto LABEL_22;
        }
        if ((v13 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v15 = (int *)&result[v9];
          v16 = (int *)&a2[v9];
LABEL_22:
          *((_BYTE *)v15 + 16) = *((_BYTE *)v16 + 16);
        }
      }
      else
      {
        v14 = result[v9 + 4];
        *((_QWORD *)v10 + 1) = v13;
        LOBYTE(result[v9 + 4]) = a2[v9 + 4];
        *((_QWORD *)v11 + 1) = v12;
        LOBYTE(a2[v9 + 4]) = v14;
      }
      v9 += 4;
      if (v9 == 256)
        return result;
    }
  }
  if ((v4 & 1) == 0)
  {
    v5 = *((_QWORD *)result + 1);
    *((_QWORD *)result + 1) = *((_QWORD *)a2 + 1);
    *((_QWORD *)a2 + 1) = v5;
    LODWORD(v5) = result[4];
    result[4] = a2[4];
    a2[4] = v5;
    return result;
  }
  v4 = *result;
  v6 = result;
  result = a2;
LABEL_7:
  v7 = 0;
  v17 = *(_OWORD *)(v6 + 2);
  *v6 = v4 | 1;
  do
  {
    v8 = *(_QWORD *)&result[v7 + 2];
    *(_QWORD *)&v6[v7 + 2] = v8;
    if ((v8 | 0x1000) != 0xFFFFFFFFFFFFF000)
      LOBYTE(v6[v7 + 4]) = result[v7 + 4];
    v7 += 4;
  }
  while (v7 != 256);
  *result &= ~1u;
  *(_OWORD *)(result + 2) = v17;
  return result;
}

void *sub_1C55B5380(uint64_t a1, _DWORD *a2)
{
  unsigned int v4;
  uint64_t v5;

  v4 = *(_DWORD *)a1;
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    MEMORY[0x1CAA32FB4](*(_QWORD *)(a1 + 8), 8);
    v4 = *(_DWORD *)a1;
  }
  *(_DWORD *)a1 = v4 | 1;
  if ((*(_BYTE *)a2 & 1) == 0 && a2[4] >= 0x41u)
  {
    *(_DWORD *)a1 = v4 & 0xFFFFFFFE;
    if ((*a2 & 1) != 0)
      v5 = 64;
    else
      v5 = a2[4];
    *(_QWORD *)(a1 + 8) = operator new(16 * v5, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v5;
  }
  return sub_1C627CB08((unsigned int *)a1, a2);
}

_QWORD *sub_1C55B5410(uint64_t a1, uint64_t *a2)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  int v12;
  _QWORD *v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 16;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v13 = 0;
LABEL_17:
      v7 = sub_1C55B5580(a1, a2, v13);
      *v7 = *a2;
      v7[1] = v7 + 3;
      v7[2] = 0x200000000;
      return v7;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  v7 = (_QWORD *)(v3 + 32 * v6);
  v8 = *v7;
  if (*a2 != *v7)
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -4096)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v8 == -8192;
      if (v11)
        v9 = v7;
      v12 = v6 + v10++;
      v6 = v12 & v5;
      v7 = (_QWORD *)(v3 + 32 * v6);
      v8 = *v7;
      if (*a2 == *v7)
        return v7;
    }
    if (v9)
      v13 = v9;
    else
      v13 = v7;
    goto LABEL_17;
  }
  return v7;
}

uint64_t sub_1C55B54E8(uint64_t result, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  BOOL v11;
  int v12;

  v3 = result + 8;
  if ((*(_BYTE *)result & 1) != 0)
  {
    v4 = 16;
  }
  else
  {
    v4 = *(_DWORD *)(result + 16);
    if (!v4)
    {
      v7 = 0;
      goto LABEL_16;
    }
    v3 = *(_QWORD *)(result + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 32 * v6);
  v8 = *v7;
  if (*v7 != a2)
  {
    v9 = 0;
    v10 = 1;
    while (v8 != -4096)
    {
      if (v9)
        v11 = 0;
      else
        v11 = v8 == -8192;
      if (v11)
        v9 = v7;
      v12 = v6 + v10++;
      v6 = v12 & v5;
      v7 = (_QWORD *)(v3 + 32 * v6);
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_16;
    }
    if (v9)
      v7 = v9;
  }
LABEL_16:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C55B5580(uint64_t a1, uint64_t *a2, _QWORD *a3)
{
  int v5;
  int v6;
  unsigned int v7;
  int v8;
  uint64_t v10;
  int v11;
  int v12;
  uint64_t v13;
  uint64_t v14;
  _QWORD *v15;
  int v16;
  BOOL v17;
  int v18;
  _QWORD *v19;

  v5 = *(_DWORD *)a1;
  v6 = *(_DWORD *)a1 >> 1;
  if ((*(_DWORD *)a1 & 1) != 0)
    v7 = 16;
  else
    v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    sub_1C4AA19A0(a1, 2 * v7);
    v10 = a1 + 8;
    v5 = *(_DWORD *)a1;
    if ((*(_DWORD *)a1 & 1) != 0)
    {
      v11 = 16;
    }
    else
    {
      v11 = *(_DWORD *)(a1 + 16);
      if (!v11)
      {
        v8 = 0;
        a3 = 0;
        goto LABEL_7;
      }
      v10 = *(_QWORD *)(a1 + 8);
    }
    v8 = *(_DWORD *)a1 & 1;
    v12 = v11 - 1;
    v13 = ((*a2 >> 4) ^ (*a2 >> 9)) & v12;
    a3 = (_QWORD *)(v10 + 32 * v13);
    v14 = *a3;
    if (*a2 != *a3)
    {
      v15 = 0;
      v16 = 1;
      while (v14 != -4096)
      {
        if (v15)
          v17 = 0;
        else
          v17 = v14 == -8192;
        if (v17)
          v15 = a3;
        v18 = v13 + v16++;
        v13 = v18 & v12;
        a3 = (_QWORD *)(v10 + 32 * v13);
        v14 = *a3;
        if (*a2 == *a3)
          goto LABEL_7;
      }
      if (v15)
        a3 = v15;
    }
  }
  else
  {
    if (v7 + ~v6 - *(_DWORD *)(a1 + 4) <= v7 >> 3)
    {
      sub_1C4AA19A0(a1, v7);
      v19 = 0;
      sub_1C55B54E8(a1, *a2, &v19);
      a3 = v19;
      v5 = *(_DWORD *)a1;
    }
    v8 = v5 & 1;
  }
LABEL_7:
  *(_DWORD *)a1 = (v5 & 0xFFFFFFFE | v8) + 2;
  if (*a3 != -4096)
    --*(_DWORD *)(a1 + 4);
  return a3;
}

unint64_t sub_1C55B56F4(uint64_t a1, unint64_t a2)
{
  uint64_t v3;
  unint64_t v5;
  unint64_t v6;
  unint64_t v8;

  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
  {
    v5 = v3 + 1;
    v6 = *(_QWORD *)a1 + 48 * v3;
    if (*(_QWORD *)a1 <= a2 && v6 > a2)
    {
      v8 = a2 - *(_QWORD *)a1;
      sub_1C4AA1FA8(a1, v5);
      return *(_QWORD *)a1 + v8;
    }
    else
    {
      sub_1C4AA1FA8(a1, v5);
    }
  }
  return a2;
}

uint64_t sub_1C55B575C(uint64_t a1, uint64_t a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  _QWORD *v9;
  int v10;
  uint64_t result;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 16;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_9;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = (v4 - 1) & ((a2 >> 4) ^ (a2 >> 9));
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*v7 == a2)
  {
    result = 1;
  }
  else
  {
    v9 = 0;
    v10 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v9)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v9 = v7;
      v13 = v6 + v10++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v13 & v5));
      v8 = *v7;
      if (*v7 == a2)
        goto LABEL_9;
    }
    result = 0;
    if (v9)
      v7 = v9;
  }
LABEL_9:
  *a3 = v7;
  return result;
}

uint64_t sub_1C55B5808(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  _BYTE *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  _BYTE v14[256];
  uint64_t v15;

  v15 = *MEMORY[0x1E0C80C00];
  if (a2 >= 0x11)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(_QWORD *)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 0x10)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C55B598C(a1, v6, v6 + 16 * v7);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_QWORD *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *(_QWORD *)v9 = v10;
      *((_DWORD *)v9 + 2) = *(_DWORD *)(a1 + v8 + 16);
      v9 += 16;
    }
    v8 += 16;
  }
  while (v8 != 256);
  if (a2 > 0x10)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C55B598C(a1, (uint64_t)v14, (uint64_t)v9);
}

uint64_t sub_1C55B598C(uint64_t result, uint64_t a2, uint64_t a3)
{
  _DWORD *v5;
  int v6;
  uint64_t v7;
  _QWORD *v8;
  _QWORD *v9;
  uint64_t v10;
  _QWORD *v11;
  _QWORD *v12;

  v5 = (_DWORD *)result;
  v6 = *(_DWORD *)result;
  *(_QWORD *)result = *(_DWORD *)result & 1;
  if ((v6 & 1) != 0)
  {
    v8 = (_QWORD *)(result + 8);
    v9 = (_QWORD *)(result + 264);
  }
  else
  {
    v7 = *(unsigned int *)(result + 16);
    if (!(_DWORD)v7)
      goto LABEL_9;
    v8 = *(_QWORD **)(result + 8);
    v9 = &v8[2 * v7];
  }
  do
  {
    *v8 = -4096;
    v8 += 2;
  }
  while (v8 != v9);
LABEL_9:
  while (a2 != a3)
  {
    v10 = *(_QWORD *)a2;
    if ((*(_QWORD *)a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      v12 = 0;
      result = sub_1C55B575C((uint64_t)v5, v10, &v12);
      v11 = v12;
      *v12 = *(_QWORD *)a2;
      *((_DWORD *)v11 + 2) = *(_DWORD *)(a2 + 8);
      *v5 += 2;
    }
    a2 += 16;
  }
  return result;
}

uint64_t sub_1C55B5A4C(uint64_t a1, uint64_t *a2)
{
  char v4;
  uint64_t v5;
  int v6;
  unsigned int v7;
  int64x2_t v8;
  uint64_t v10;

  v10 = 0;
  v4 = sub_1C55B5B78(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v10);
  v5 = v10;
  if ((v4 & 1) != 0)
    return v5 + 8;
  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
    goto LABEL_9;
  }
  if (v7 + ~v6 - *(_DWORD *)(a1 + 12) <= v7 >> 3)
  {
LABEL_9:
    sub_1C55B5C10(a1, v7);
    v10 = 0;
    sub_1C55B5B78(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v10);
    v5 = v10;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*(_QWORD *)v5 != -4096)
    --*(_DWORD *)(a1 + 12);
  *(_QWORD *)v5 = *a2;
  *(_OWORD *)(v5 + 64) = 0u;
  *(_OWORD *)(v5 + 80) = 0u;
  *(_OWORD *)(v5 + 96) = 0u;
  *(_OWORD *)(v5 + 48) = 0u;
  *(_QWORD *)(v5 + 112) = 0;
  v8 = vdupq_n_s64(0xFFFFFFFFFFFFF000);
  *(_QWORD *)(v5 + 8) = 1;
  *(int64x2_t *)(v5 + 16) = v8;
  *(_OWORD *)(v5 + 32) = 0u;
  *(_QWORD *)(v5 + 32) = v5 + 48;
  *(_QWORD *)(v5 + 40) = 0x200000000;
  *(_QWORD *)(v5 + 64) = 1;
  *(int64x2_t *)(v5 + 72) = v8;
  *(_QWORD *)(v5 + 88) = v5 + 104;
  *(_QWORD *)(v5 + 96) = 0x200000000;
  return v5 + 8;
}

uint64_t sub_1C55B5B78(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  uint64_t v8;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 120 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v8 = 1;
    }
    else
    {
      v10 = 0;
      v11 = 1;
      while (v7 != -4096)
      {
        if (v10)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v10 = v6;
        v13 = v5 + v11++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 120 * (v13 & v4));
        v7 = *v6;
        v8 = 1;
        if (*v6 == a3)
          goto LABEL_5;
      }
      v8 = 0;
      if (v10)
        v6 = v10;
    }
  }
  else
  {
    v6 = 0;
    v8 = 0;
  }
LABEL_5:
  *a4 = v6;
  return v8;
}

_QWORD *sub_1C55B5C10(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t *v15;
  uint64_t *v16;
  void *v17;
  void *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t *v21;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(120 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    *(_QWORD *)(a1 + 8) = 0;
    v10 = *(unsigned int *)(a1 + 16);
    if ((_DWORD)v10)
    {
      v11 = 120 * v10;
      do
      {
        *result = -4096;
        result += 15;
        v11 -= 120;
      }
      while (v11);
    }
    if ((_DWORD)v3)
    {
      v12 = 0;
      v13 = 120 * v3;
      do
      {
        v14 = *(_QWORD *)(v4 + v12);
        if ((v14 | 0x1000) != 0xFFFFFFFFFFFFF000)
        {
          v21 = 0;
          sub_1C55B5B78(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), v14, &v21);
          v15 = v21;
          v16 = v21;
          *v21 = v14;
          sub_1C4EE5A00((unsigned int *)v16 + 2, (unsigned int *)(v4 + v12 + 8));
          sub_1C4EE5A00((unsigned int *)v15 + 16, (unsigned int *)(v4 + v12 + 64));
          ++*(_DWORD *)(a1 + 8);
          v17 = *(void **)(v4 + v12 + 88);
          if ((void *)(v4 + v12 + 104) != v17)
            free(v17);
          if ((*(_BYTE *)(v4 + v12 + 64) & 1) == 0)
            MEMORY[0x1CAA32FB4](*(_QWORD *)(v4 + v12 + 72), 8);
          v18 = *(void **)(v4 + v12 + 32);
          if ((void *)(v4 + v12 + 48) != v18)
            free(v18);
          if ((*(_BYTE *)(v4 + v12 + 8) & 1) == 0)
            MEMORY[0x1CAA32FB4](*(_QWORD *)(v4 + v12 + 16), 8);
        }
        v12 += 120;
      }
      while (v13 != v12);
    }
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v19 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v19)
  {
    v20 = 120 * v19;
    do
    {
      *result = -4096;
      result += 15;
      v20 -= 120;
    }
    while (v20);
  }
  return result;
}

uint64_t sub_1C55B5DEC(uint64_t a1, unint64_t a2)
{
  uint64_t v4;
  char *v5;
  uint64_t result;
  unint64_t v7;
  char *v8;
  _BOOL4 v10;
  unint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  unsigned int v17;
  int v18;
  unint64_t v19;

  v4 = *(unsigned int *)(a1 + 8);
  v5 = *(char **)a1;
  if (v4 >= *(_DWORD *)(a1 + 12))
  {
    v7 = v4 + 1;
    v8 = &v5[80 * v4];
    v10 = (unint64_t)v5 <= a2 && (unint64_t)v8 > a2;
    if (v10)
      v11 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(a2 - (_QWORD)v5) >> 4);
    else
      v11 = -1;
    v19 = 0;
    v12 = (char *)llvm::SmallVectorBase<unsigned int>::mallocForGrow(a1, v7, 80, &v19);
    v5 = v12;
    v13 = *(_QWORD *)a1;
    v14 = *(unsigned int *)(a1 + 8);
    if ((_DWORD)v14)
    {
      v15 = 80 * v14;
      do
      {
        v16 = sub_1C55B6178((uint64_t)v12, v13);
        v13 += 80;
        v12 = (char *)(v16 + 80);
        v15 -= 80;
      }
      while (v15);
      v13 = *(_QWORD *)a1;
      v17 = *(_DWORD *)(a1 + 8);
    }
    else
    {
      v17 = 0;
    }
    sub_1C55AF894(v13, v13 + 80 * v17);
    v18 = v19;
    if (*(_QWORD *)a1 != a1 + 16)
      free(*(void **)a1);
    *(_QWORD *)a1 = v5;
    *(_DWORD *)(a1 + 12) = v18;
    if (v10)
      a2 = (unint64_t)&v5[80 * v11];
    LODWORD(v4) = *(_DWORD *)(a1 + 8);
  }
  result = sub_1C55B6178((uint64_t)&v5[80 * v4], a2);
  ++*(_DWORD *)(a1 + 8);
  return result;
}

double sub_1C55B5F30(uint64_t a1, uint64_t *a2)
{
  char v4;
  double result;
  uint64_t *v6;
  int v7;
  unsigned int v8;
  uint64_t *v9;

  v9 = 0;
  v4 = sub_1C55B601C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v9);
  v6 = v9;
  if ((v4 & 1) != 0)
    return result;
  v7 = *(_DWORD *)(a1 + 8);
  v8 = *(_DWORD *)(a1 + 16);
  if (4 * v7 + 4 >= 3 * v8)
  {
    v8 *= 2;
    goto LABEL_9;
  }
  if (v8 + ~v7 - *(_DWORD *)(a1 + 12) <= v8 >> 3)
  {
LABEL_9:
    sub_1C55B60B4(a1, v8);
    v9 = 0;
    sub_1C55B601C(*(_QWORD *)a1, *(_DWORD *)(a1 + 16), *a2, &v9);
    v6 = v9;
  }
  ++*(_DWORD *)(a1 + 8);
  if (*v6 != -4096)
    --*(_DWORD *)(a1 + 12);
  *v6 = *a2;
  v6[1] = (uint64_t)(v6 + 3);
  *(_QWORD *)&result = 0x200000000;
  v6[2] = 0x200000000;
  return result;
}

uint64_t sub_1C55B601C(uint64_t a1, int a2, uint64_t a3, _QWORD *a4)
{
  int v4;
  unsigned int v5;
  _QWORD *v6;
  uint64_t v7;
  _QWORD *v8;
  int v9;
  uint64_t v10;
  BOOL v12;
  unsigned int v13;

  if (a2)
  {
    v4 = a2 - 1;
    v5 = ((a3 >> 4) ^ (a3 >> 9)) & (a2 - 1);
    v6 = (_QWORD *)(a1 + 40 * v5);
    v7 = *v6;
    if (*v6 == a3)
    {
      v10 = 1;
    }
    else
    {
      v8 = 0;
      v9 = 1;
      while (v7 != -4096)
      {
        if (v8)
          v12 = 0;
        else
          v12 = v7 == -8192;
        if (v12)
          v8 = v6;
        v13 = v5 + v9++;
        v5 = v13 & v4;
        v6 = (_QWORD *)(a1 + 40 * (v13 & v4));
        v7 = *v6;
        v10 = 1;
        if (*v6 == a3)
          goto LABEL_9;
      }
      v10 = 0;
      if (v8)
        v6 = v8;
    }
  }
  else
  {
    v6 = 0;
    v10 = 0;
  }
LABEL_9:
  *a4 = v6;
  return v10;
}

_QWORD *sub_1C55B60B4(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(_QWORD *)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(40 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C627CC28(a1, v4, v4 + 40 * v3);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 40 * v10;
    do
    {
      *result = -4096;
      result += 5;
      v11 -= 40;
    }
    while (v11);
  }
  return result;
}

uint64_t sub_1C55B6178(uint64_t a1, uint64_t a2)
{
  void *v4;
  unsigned int v5;
  const void *v6;
  unsigned int v7;
  void *v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  int v13;

  v4 = (void *)(a1 + 16);
  *(_QWORD *)a1 = a1 + 16;
  *(_QWORD *)(a1 + 8) = 0x200000000;
  if (a1 != a2)
  {
    v5 = *(_DWORD *)(a2 + 8);
    if (v5)
    {
      v6 = *(const void **)a2;
      if (*(_QWORD *)a2 != a2 + 16)
      {
        *(_QWORD *)a1 = v6;
        v13 = *(_DWORD *)(a2 + 12);
        *(_DWORD *)(a1 + 8) = v5;
        *(_DWORD *)(a1 + 12) = v13;
        *(_QWORD *)a2 = a2 + 16;
        *(_DWORD *)(a2 + 12) = 0;
        goto LABEL_8;
      }
      if (v5 >= 3)
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, *(unsigned int *)(a2 + 8), 8);
        v7 = *(_DWORD *)(a2 + 8);
        if (!v7)
          goto LABEL_7;
        v6 = *(const void **)a2;
        v4 = *(void **)a1;
      }
      else
      {
        v7 = *(_DWORD *)(a2 + 8);
      }
      memcpy(v4, v6, 8 * v7);
LABEL_7:
      *(_DWORD *)(a1 + 8) = v5;
LABEL_8:
      *(_DWORD *)(a2 + 8) = 0;
    }
  }
  v8 = (void *)(a1 + 64);
  *(_QWORD *)(a1 + 32) = a1 + 64;
  v10 = *(_QWORD *)(a2 + 32);
  v9 = *(_QWORD *)(a2 + 40);
  if (v9 == v10)
  {
    *(_QWORD *)(a1 + 40) = v8;
    v11 = *(unsigned int *)(a2 + 52);
    if ((_DWORD)v11)
      memmove(v8, *(const void **)(a2 + 40), 8 * v11);
  }
  else
  {
    *(_QWORD *)(a1 + 40) = v9;
    *(_QWORD *)(a2 + 40) = v10;
  }
  *(_QWORD *)(a1 + 48) = *(_QWORD *)(a2 + 48);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(_QWORD *)(a2 + 48) = 2;
  *(_DWORD *)(a2 + 56) = 0;
  return a1;
}

uint64_t sub_1C55B6290(uint64_t a1, _QWORD *a2, _QWORD *a3)
{
  uint64_t v3;
  int v4;
  int v5;
  unsigned int v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t result;
  _QWORD *v10;
  int v11;
  BOOL v12;
  unsigned int v13;

  v3 = a1 + 8;
  if ((*(_BYTE *)a1 & 1) != 0)
  {
    v4 = 4;
  }
  else
  {
    v4 = *(_DWORD *)(a1 + 16);
    if (!v4)
    {
      v7 = 0;
      result = 0;
      goto LABEL_5;
    }
    v3 = *(_QWORD *)(a1 + 8);
  }
  v5 = v4 - 1;
  v6 = ((*a2 >> 4) ^ (*a2 >> 9)) & (v4 - 1);
  v7 = (_QWORD *)(v3 + 16 * v6);
  v8 = *v7;
  if (*a2 == *v7)
  {
    result = 1;
  }
  else
  {
    v10 = 0;
    v11 = 1;
    result = 1;
    while (v8 != -4096)
    {
      if (v10)
        v12 = 0;
      else
        v12 = v8 == -8192;
      if (v12)
        v10 = v7;
      v13 = v6 + v11++;
      v6 = v13 & v5;
      v7 = (_QWORD *)(v3 + 16 * (v13 & v5));
      v8 = *v7;
      if (*a2 == *v7)
        goto LABEL_5;
    }
    result = 0;
    if (v10)
      v7 = v10;
  }
LABEL_5:
  *a3 = v7;
  return result;
}

_QWORD *sub_1C55B6340(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  int v7;
  unsigned int v8;
  int v9;
  uint64_t v11;
  int v12;
  int v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  BOOL v18;
  unsigned int v19;
  _QWORD *v20;

  v6 = *(_DWORD *)a1;
  v7 = *(_DWORD *)a1 >> 1;
  if ((*(_DWORD *)a1 & 1) != 0)
    v8 = 4;
  else
    v8 = *(_DWORD *)(a1 + 16);
  if (4 * v7 + 4 >= 3 * v8)
  {
    sub_1C55B64B4(a1, 2 * v8);
    v11 = a1 + 8;
    v6 = *(_DWORD *)a1;
    if ((*(_DWORD *)a1 & 1) != 0)
    {
      v12 = 4;
    }
    else
    {
      v12 = *(_DWORD *)(a1 + 16);
      if (!v12)
      {
        v9 = 0;
        a4 = 0;
        goto LABEL_7;
      }
      v11 = *(_QWORD *)(a1 + 8);
    }
    v9 = *(_DWORD *)a1 & 1;
    v13 = v12 - 1;
    v14 = ((*a3 >> 4) ^ (*a3 >> 9)) & v13;
    a4 = (_QWORD *)(v11 + 16 * v14);
    v15 = *a4;
    if (*a3 != *a4)
    {
      v16 = 0;
      v17 = 1;
      while (v15 != -4096)
      {
        if (v16)
          v18 = 0;
        else
          v18 = v15 == -8192;
        if (v18)
          v16 = a4;
        v19 = v14 + v17++;
        v14 = v19 & v13;
        a4 = (_QWORD *)(v11 + 16 * v14);
        v15 = *a4;
        if (*a3 == *a4)
          goto LABEL_7;
      }
      if (v16)
        a4 = v16;
    }
  }
  else
  {
    if (v8 + ~v7 - *(_DWORD *)(a1 + 4) <= v8 >> 3)
    {
      sub_1C55B64B4(a1, v8);
      v20 = 0;
      sub_1C55B6290(a1, a3, &v20);
      a4 = v20;
      v6 = *(_DWORD *)a1;
    }
    v9 = v6 & 1;
  }
LABEL_7:
  *(_DWORD *)a1 = (v6 & 0xFFFFFFFE | v9) + 2;
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 4);
  return a4;
}

int *sub_1C55B64B4(uint64_t a1, unsigned int a2)
{
  unint64_t v3;
  unint64_t v4;
  int v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v13;
  uint64_t v14[9];

  v14[8] = *MEMORY[0x1E0C80C00];
  if (a2 >= 5)
  {
    v3 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
    v4 = v3 | (v3 >> 2) | ((v3 | (v3 >> 2)) >> 4);
    v5 = ((v4 | (v4 >> 8)) >> 16) | v4 | (v4 >> 8);
    if ((v5 + 1) > 0x40)
      a2 = v5 + 1;
    else
      a2 = 64;
  }
  if ((*(_DWORD *)a1 & 1) == 0)
  {
    v6 = *(uint64_t **)(a1 + 8);
    v7 = *(unsigned int *)(a1 + 16);
    if (a2 > 4)
    {
      v13 = a2;
      *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
      *(_QWORD *)(a1 + 16) = v13;
    }
    else
    {
      *(_DWORD *)a1 |= 1u;
    }
    sub_1C55B662C((int *)a1, v6, &v6[2 * v7]);
    JUMPOUT(0x1CAA32FB4);
  }
  v8 = 0;
  v9 = v14;
  do
  {
    v10 = *(_QWORD *)(a1 + v8 + 8);
    if ((v10 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      *v9 = v10;
      v9[1] = *(_QWORD *)(a1 + v8 + 16);
      v9 += 2;
    }
    v8 += 16;
  }
  while (v8 != 64);
  if (a2 > 4)
  {
    *(_DWORD *)a1 &= ~1u;
    v11 = a2;
    *(_QWORD *)(a1 + 8) = operator new(16 * a2, (std::align_val_t)8uLL);
    *(_QWORD *)(a1 + 16) = v11;
  }
  return sub_1C55B662C((int *)a1, v14, v9);
}

int *sub_1C55B662C(int *result, uint64_t *a2, uint64_t *a3)
{
  int v3;
  uint64_t v4;
  _QWORD *v5;
  _QWORD *v6;
  uint64_t v7;
  int v8;
  int *v9;
  int v10;
  unsigned int v11;
  int *v12;
  uint64_t v13;
  int *v14;
  int v15;
  BOOL v16;
  unsigned int v17;

  v3 = *result;
  *result &= 1u;
  result[1] = 0;
  if ((v3 & 1) != 0)
  {
    v6 = result + 18;
    v5 = result + 2;
  }
  else
  {
    v4 = result[4];
    if (!(_DWORD)v4)
      goto LABEL_5;
    v5 = (_QWORD *)*((_QWORD *)result + 1);
    v6 = &v5[2 * v4];
  }
  do
  {
    *v5 = -4096;
    v5 += 2;
  }
  while (v5 != v6);
LABEL_5:
  while (a2 != a3)
  {
    v7 = *a2;
    if ((*a2 | 0x1000) != 0xFFFFFFFFFFFFF000)
    {
      if ((*(_BYTE *)result & 1) != 0)
      {
        v8 = 4;
        v9 = result + 2;
      }
      else
      {
        v9 = (int *)*((_QWORD *)result + 1);
        v8 = result[4];
      }
      v10 = v8 - 1;
      v11 = (v8 - 1) & ((v7 >> 4) ^ (v7 >> 9));
      v12 = &v9[4 * v11];
      v13 = *(_QWORD *)v12;
      if (v7 != *(_QWORD *)v12)
      {
        v14 = 0;
        v15 = 1;
        while (v13 != -4096)
        {
          if (v14)
            v16 = 0;
          else
            v16 = v13 == -8192;
          if (v16)
            v14 = v12;
          v17 = v11 + v15++;
          v11 = v17 & v10;
          v12 = &v9[4 * (v17 & v10)];
          v13 = *(_QWORD *)v12;
          if (v7 == *(_QWORD *)v12)
            goto LABEL_10;
        }
        if (v14)
          v12 = v14;
      }
LABEL_10:
      *(_QWORD *)v12 = v7;
      *((_QWORD *)v12 + 1) = a2[1];
      *result += 2;
    }
    a2 += 2;
  }
  return result;
}

_QWORD *sub_1C55B6738(uint64_t a1, int a2)
{
  uint64_t v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(unsigned int *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(16 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C615A37C(a1, v4, &v4[2 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 16 * v10;
    do
    {
      *result = -4096;
      result += 2;
      v11 -= 16;
    }
    while (v11);
  }
  return result;
}

_QWORD *sub_1C55B67F0(uint64_t a1, int a2)
{
  unsigned int v3;
  uint64_t *v4;
  unint64_t v5;
  unint64_t v6;
  int v7;
  unsigned int v8;
  _QWORD *result;
  uint64_t v10;
  uint64_t v11;

  v3 = *(_DWORD *)(a1 + 16);
  v4 = *(uint64_t **)a1;
  v5 = (a2 - 1) | ((unint64_t)(a2 - 1) >> 1);
  v6 = v5 | (v5 >> 2) | ((v5 | (v5 >> 2)) >> 4);
  v7 = ((v6 | (v6 >> 8)) >> 16) | v6 | (v6 >> 8);
  if ((v7 + 1) > 0x40)
    v8 = v7 + 1;
  else
    v8 = 64;
  *(_DWORD *)(a1 + 16) = v8;
  result = operator new(40 * v8, (std::align_val_t)8uLL);
  *(_QWORD *)a1 = result;
  if (v4)
  {
    sub_1C55B68B4(a1, v4, &v4[5 * v3]);
    JUMPOUT(0x1CAA32FB4);
  }
  *(_QWORD *)(a1 + 8) = 0;
  v10 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v10)
  {
    v11 = 40 * v10;
    do
    {
      *result = -4096;
      result += 5;
      v11 -= 40;
    }
    while (v11);
  }
  return result;
}

void sub_1C55B68B4(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t *v4;
  uint64_t v6;
  _QWORD *v7;
  uint64_t v8;
  uint64_t v9;
  int v10;
  unsigned int v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  int v15;
  void *v16;
  unint64_t v17;
  uint64_t *v18;
  uint64_t v20;
  int v21;
  BOOL v22;
  unsigned int v23;

  v4 = a2;
  *(_QWORD *)(a1 + 8) = 0;
  v6 = *(unsigned int *)(a1 + 16);
  if ((_DWORD)v6)
  {
    v7 = *(_QWORD **)a1;
    v8 = 40 * v6;
    do
    {
      *v7 = -4096;
      v7 += 5;
      v8 -= 40;
    }
    while (v8);
  }
  if (a2 != a3)
  {
    while (1)
    {
      v9 = *v4;
      if ((*v4 | 0x1000) != 0xFFFFFFFFFFFFF000)
        break;
LABEL_23:
      v4 += 5;
      if (v4 == a3)
        return;
    }
    v10 = *(_DWORD *)(a1 + 16) - 1;
    v11 = v10 & ((v9 >> 4) ^ (v9 >> 9));
    v12 = *(_QWORD *)a1 + 40 * v11;
    v13 = *(_QWORD *)v12;
    if (v9 != *(_QWORD *)v12)
    {
      v14 = 0;
      v15 = 1;
      while (v13 != -4096)
      {
        if (v14)
          v22 = 0;
        else
          v22 = v13 == -8192;
        if (v22)
          v14 = v12;
        v23 = v11 + v15++;
        v11 = v23 & v10;
        v12 = *(_QWORD *)a1 + 40 * v11;
        v13 = *(_QWORD *)v12;
        if (v9 == *(_QWORD *)v12)
          goto LABEL_11;
      }
      if (v14)
        v12 = v14;
    }
LABEL_11:
    v16 = (void *)(v12 + 24);
    *(_QWORD *)(v12 + 8) = v12 + 24;
    *(_QWORD *)v12 = v9;
    *(_QWORD *)(v12 + 16) = 0x200000000;
    v17 = *((unsigned int *)v4 + 4);
    v18 = (uint64_t *)v4[1];
    if ((uint64_t *)v12 == v4 || (_DWORD)v17 == 0)
    {
LABEL_21:
      ++*(_DWORD *)(a1 + 8);
      if (v18 != v4 + 3)
        free(v18);
      goto LABEL_23;
    }
    if (v18 != v4 + 3)
    {
      *(_QWORD *)(v12 + 8) = v18;
      v21 = *((_DWORD *)v4 + 5);
      *(_DWORD *)(v12 + 16) = v17;
      *(_DWORD *)(v12 + 20) = v21;
      v4[1] = (uint64_t)(v4 + 3);
      *((_DWORD *)v4 + 5) = 0;
      v18 = v4 + 3;
      goto LABEL_20;
    }
    if (v17 >= 3)
    {
      llvm::SmallVectorBase<unsigned int>::grow_pod(v12 + 8, v12 + 24, v17, 8);
      v20 = *((unsigned int *)v4 + 4);
      if (!(_DWORD)v20)
        goto LABEL_19;
      v18 = (uint64_t *)v4[1];
      v16 = *(void **)(v12 + 8);
    }
    else
    {
      v20 = *((unsigned int *)v4 + 4);
    }
    memcpy(v16, v18, 8 * v20);
LABEL_19:
    *(_DWORD *)(v12 + 16) = v17;
    v18 = (uint64_t *)v4[1];
LABEL_20:
    *((_DWORD *)v4 + 4) = 0;
    goto LABEL_21;
  }
}

_DWORD *sub_1C55B6A90(_DWORD *result, uint64_t *a2)
{
  _DWORD *v2;
  uint64_t v3;
  char *v4;
  int v5;
  int v6;
  uint64_t v7;
  char *v8;
  uint64_t v9;
  int v10;
  int v11;
  int v12;
  uint64_t v13;
  char *v14;
  uint64_t v15;

  v2 = result;
  v3 = *a2;
  v4 = (char *)(result + 2);
  if ((*(_BYTE *)result & 1) != 0)
  {
    v5 = 2;
  }
  else
  {
    v5 = result[4];
    if (!v5)
      return result;
    v4 = (char *)*((_QWORD *)result + 1);
  }
  v6 = v5 - 1;
  LODWORD(v7) = (v5 - 1) & ((v3 >> 4) ^ (v3 >> 9));
  v8 = &v4[8 * v7];
  v9 = *(_QWORD *)v8;
  if (*(_QWORD *)v8 == v3)
  {
LABEL_11:
    *(_QWORD *)v8 = -8192;
    v12 = result[1] + 1;
    *result -= 2;
    result[1] = v12;
    result = (_DWORD *)*((_QWORD *)result + 3);
    v13 = v2[8];
    v14 = (char *)&result[2 * v13];
    if ((_DWORD)v13)
    {
      v15 = 8 * v13;
      while (*(_QWORD *)result != *a2)
      {
        result += 2;
        v15 -= 8;
        if (!v15)
        {
          result = v14;
          break;
        }
      }
    }
    if (v14 != (char *)(result + 2))
    {
      result = memmove(result, result + 2, v14 - (char *)(result + 2));
      LODWORD(v13) = v2[8];
    }
    v2[8] = v13 - 1;
  }
  else
  {
    v10 = 1;
    while (v9 != -4096)
    {
      v11 = v7 + v10++;
      v7 = v11 & v6;
      v9 = *(_QWORD *)&v4[8 * v7];
      if (v9 == v3)
      {
        v8 = &v4[8 * v7];
        goto LABEL_11;
      }
    }
  }
  return result;
}

uint64_t sub_1C55B6B84(uint64_t result)
{
  uint64_t v1;
  _QWORD *v2;
  _QWORD *v3;
  uint64_t v4;
  uint64_t v5;
  unint64_t v6;
  unint64_t *v7;
  uint64_t v8;
  int32x2_t *v9;
  unint64_t v10;
  uint64_t v11;
  unsigned int v12;
  uint64_t v13;
  uint64_t *v14;
  uint64_t v15;
  int v16;
  int v17;
  unint64_t v18;
  unint64_t *v19;
  uint64_t v20;
  int32x2_t *v21;
  unint64_t v22;
  uint64_t v23;
  unsigned int v24;
  uint64_t v25;
  uint64_t *v26;
  uint64_t v27;
  int v28;
  int v29;

  if (*(_QWORD *)(result + 8))
  {
    v1 = *(unsigned int *)(result + 16);
    if (v1 > 4 * *(_DWORD *)(result + 8) && v1 >= 0x41)
    {
      return sub_1C55B6DC0(result);
    }
    else
    {
      if ((_DWORD)v1)
      {
        v2 = *(_QWORD **)result;
        v3 = (_QWORD *)(*(_QWORD *)result + (v1 << 6));
        do
        {
          v4 = v2[3];
          if (v4 != -4096)
          {
            if (v4 == -8192)
              goto LABEL_30;
            v5 = v2[7];
            if (v5 && v5 != -8192 && v5 != -4096)
            {
              v6 = v2[5] & 0xFFFFFFFFFFFFFFF8;
              *(_QWORD *)v6 = v2[6];
              v7 = (unint64_t *)v2[6];
              if (v7)
              {
                *v7 = *v7 & 7 | v6;
              }
              else
              {
                v8 = v2[7];
                v9 = ***(int32x2_t ****)v8;
                v10 = (unint64_t)v9[303];
                if (v10 <= v6)
                {
                  v11 = v9[305].u32[0];
                  if (v10 + 16 * v11 > v6)
                  {
                    v12 = v11 - 1;
                    LODWORD(v13) = v12 & ((v8 >> 4) ^ (v8 >> 9));
                    v14 = (uint64_t *)(v10 + 16 * v13);
                    v15 = *v14;
                    if (v8 == *v14)
                    {
LABEL_21:
                      *v14 = -8192;
                      v9[304] = vadd_s32(v9[304], (int32x2_t)0x1FFFFFFFFLL);
                      v8 = v2[7];
                    }
                    else
                    {
                      v16 = 1;
                      while (v15 != -4096)
                      {
                        v17 = v13 + v16++;
                        v13 = v17 & v12;
                        v15 = *(_QWORD *)(v10 + 16 * v13);
                        if (v8 == v15)
                        {
                          v14 = (uint64_t *)(v10 + 16 * v13);
                          goto LABEL_21;
                        }
                      }
                    }
                    *(_BYTE *)(v8 + 17) &= ~1u;
                  }
                }
              }
              v4 = v2[3];
            }
            if (v4 != -4096)
            {
LABEL_30:
              if (v4 && v4 != -8192)
              {
                v18 = v2[1] & 0xFFFFFFFFFFFFFFF8;
                *(_QWORD *)v18 = v2[2];
                v19 = (unint64_t *)v2[2];
                if (v19)
                {
                  *v19 = *v19 & 7 | v18;
                }
                else
                {
                  v20 = v2[3];
                  v21 = ***(int32x2_t ****)v20;
                  v22 = (unint64_t)v21[303];
                  if (v22 <= v18)
                  {
                    v23 = v21[305].u32[0];
                    if (v22 + 16 * v23 > v18)
                    {
                      v24 = v23 - 1;
                      LODWORD(v25) = v24 & ((v20 >> 4) ^ (v20 >> 9));
                      v26 = (uint64_t *)(v22 + 16 * v25);
                      v27 = *v26;
                      if (v20 == *v26)
                      {
LABEL_39:
                        *v26 = -8192;
                        v21[304] = vadd_s32(v21[304], (int32x2_t)0x1FFFFFFFFLL);
                        v20 = v2[3];
                      }
                      else
                      {
                        v28 = 1;
                        while (v27 != -4096)
                        {
                          v29 = v25 + v28++;
                          v25 = v29 & v24;
                          v27 = *(_QWORD *)(v22 + 16 * v25);
                          if (v20 == v27)
                          {
                            v26 = (uint64_t *)(v22 + 16 * v25);
                            goto LABEL_39;
                          }
                        }
                      }
                      *(_BYTE *)(v20 + 17) &= ~1u;
                    }
                  }
                }
              }
              v2[3] = -4096;
            }
            v2[4] = 0;
          }
          v2 += 8;
        }
        while (v2 != v3);
      }
      *(_QWORD *)(result + 8) = 0;
    }
  }
  return result;
}

uint64_t sub_1C55B6DC0(uint64_t result)
{
  uint64_t v1;
  uint64_t v2;
  int v3;
  _QWORD *v4;
  _QWORD *v5;
  uint64_t v6;
  uint64_t v7;
  unint64_t v8;
  unint64_t *v9;
  uint64_t v10;
  int32x2_t *v11;
  unint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  _QWORD *v16;
  int v17;
  unint64_t v19;
  unint64_t *v20;
  uint64_t v21;
  int32x2_t *v22;
  unint64_t v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  _QWORD *v27;
  int v28;
  int v29;
  unsigned int v30;
  unint64_t v31;
  _QWORD *v32;

  v1 = result;
  v2 = *(unsigned int *)(result + 16);
  v3 = *(_DWORD *)(result + 8);
  if ((_DWORD)v2)
  {
    v4 = *(_QWORD **)result;
    v5 = (_QWORD *)(*(_QWORD *)result + (v2 << 6));
    do
    {
      v6 = v4[3];
      if ((v6 | 0x1000) != 0xFFFFFFFFFFFFF000)
      {
        v7 = v4[7];
        if (v7)
        {
          if (v7 != -8192 && v7 != -4096)
          {
            v8 = v4[5] & 0xFFFFFFFFFFFFFFF8;
            *(_QWORD *)v8 = v4[6];
            v9 = (unint64_t *)v4[6];
            if (v9)
            {
              *v9 = *v9 & 7 | v8;
            }
            else
            {
              v10 = v4[7];
              v11 = ***(int32x2_t ****)v10;
              v12 = (unint64_t)v11[303];
              if (v12 <= v8)
              {
                v13 = v11[305].u32[0];
                if (v12 + 16 * v13 > v8)
                {
                  v14 = v13 - 1;
                  LODWORD(v15) = v14 & ((v10 >> 4) ^ (v10 >> 9));
                  result = v12 + 16 * v15;
                  v16 = *(_QWORD **)result;
                  if (v10 == *(_QWORD *)result)
                  {
LABEL_15:
                    *(_QWORD *)result = -8192;
                    v11[304] = vadd_s32(v11[304], (int32x2_t)0x1FFFFFFFFLL);
                    v10 = v4[7];
                  }
                  else
                  {
                    result = 1;
                    while (v16 != (_QWORD *)-4096)
                    {
                      v17 = v15 + result;
                      result = (result + 1);
                      v15 = v17 & v14;
                      v16 = *(_QWORD **)(v12 + 16 * v15);
                      if ((_QWORD *)v10 == v16)
                      {
                        result = v12 + 16 * v15;
                        goto LABEL_15;
                      }
                    }
                  }
                  *(_BYTE *)(v10 + 17) &= ~1u;
                }
              }
            }
            v6 = v4[3];
          }
        }
      }
      if (v6 != -4096 && v6 != -8192 && v6 != 0)
      {
        v19 = v4[1] & 0xFFFFFFFFFFFFFFF8;
        *(_QWORD *)v19 = v4[2];
        v20 = (unint64_t *)v4[2];
        if (v20)
        {
          *v20 = *v20 & 7 | v19;
        }
        else
        {
          v21 = v4[3];
          v22 = ***(int32x2_t ****)v21;
          v23 = (unint64_t)v22[303];
          if (v23 <= v19)
          {
            v24 = v22[305].u32[0];
            if (v23 + 16 * v24 > v19)
            {
              v25 = v24 - 1;
              LODWORD(v26) = v25 & ((v21 >> 4) ^ (v21 >> 9));
              result = v23 + 16 * v26;
              v27 = *(_QWORD **)result;
              if (v21 == *(_QWORD *)result)
              {
LABEL_34:
                *(_QWORD *)result = -8192;
                v22[304] = vadd_s32(v22[304], (int32x2_t)0x1FFFFFFFFLL);
                v21 = v4[3];
              }
              else
              {
                result = 1;
                while (v27 != (_QWORD *)-4096)
                {
                  v28 = v26 + result;
                  result = (result + 1);
                  v26 = v28 & v25;
                  v27 = *(_QWORD **)(v23 + 16 * v26);
                  if ((_QWORD *)v21 == v27)
                  {
                    result = v23 + 16 * v26;
                    goto LABEL_34;
                  }
                }
              }
              *(_BYTE *)(v21 + 17) &= ~1u;
            }
          }
        }
      }
      v4 += 8;
    }
    while (v4 != v5);
  }
  if (!v3)
  {
    if (!*(_DWORD *)(v1 + 16))
    {
      *(_QWORD *)(v1 + 8) = 0;
      return result;
    }
    v30 = 0;
    result = *(_QWORD *)v1;
LABEL_47:
    MEMORY[0x1CAA32FB4](result, 8);
    return (uint64_t)sub_1C55AF7E4((char *)v1, v30);
  }
  v29 = 1 << (33 - __clz(v3 - 1));
  if (v29 <= 64)
    v30 = 64;
  else
    v30 = v29;
  result = *(_QWORD *)v1;
  if (v30 != *(_DWORD *)(v1 + 16))
    goto LABEL_47;
  *(_QWORD *)(v1 + 8) = 0;
  v31 = (unint64_t)v30 << 6;
  v32 = (_QWORD *)(result + 16);
  do
  {
    *v32 = 0;
    v32[1] = -4096;
    *(v32 - 2) = &unk_1E814DA10;
    *(v32 - 1) = 2;
    v32[2] = 0;
    v32 += 8;
    v31 -= 64;
  }
  while (v31);
  return result;
}

void sub_1C55B7078()
{
  JUMPOUT(0x1CAA32FC0);
}

_QWORD *sub_1C55B708C(uint64_t a1)
{
  _QWORD *result;
  uint64_t v3;

  result = operator new(0x10uLL);
  v3 = *(_QWORD *)(a1 + 8);
  *result = &off_1E8170408;
  result[1] = v3;
  return result;
}

uint64_t sub_1C55B70C0(uint64_t result, _QWORD *a2)
{
  uint64_t v2;

  v2 = *(_QWORD *)(result + 8);
  *a2 = &off_1E8170408;
  a2[1] = v2;
  return result;
}

uint64_t sub_1C55B70DC(uint64_t a1, uint64_t *a2)
{
  llvm *v2;
  uint64_t v3;
  uint64_t LoopPredecessor;
  uint64_t v5;
  uint64_t v6;
  int v8;

  v2 = (llvm *)*a2;
  v3 = *(_QWORD *)(a1 + 8);
  LoopPredecessor = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor(*a2);
  if (!LoopPredecessor)
    goto LABEL_8;
  v5 = *(_QWORD *)(LoopPredecessor + 40);
  if (v5 == LoopPredecessor + 40)
    goto LABEL_8;
  if (v5)
    v6 = v5 - 24;
  else
    v6 = 0;
  if (*(_BYTE *)(v6 + 16) == 30)
  {
    if ((*(_DWORD *)(v6 + 20) & 0x7FFFFFF) == 3)
LABEL_8:
      llvm::InsertPreheaderForLoop(v2, *(llvm::Loop **)(v3 + 48), *(llvm::DominatorTree **)(v3 + 56), 0, 0);
  }
  else
  {
    switch(*(_BYTE *)(v6 + 16))
    {
      case 0x1E:
        __break(1u);
        goto LABEL_15;
      case 0x1F:
        v8 = (*(_DWORD *)(v6 + 20) >> 1) & 0x3FFFFFF;
        break;
      case 0x20:
LABEL_15:
        v8 = (*(_DWORD *)(v6 + 20) & 0x7FFFFFF) - 1;
        break;
      case 0x27:
        v8 = *(_DWORD *)(v6 + 80) + 1;
        break;
      default:
        goto LABEL_8;
    }
    if (v8 != 1)
      goto LABEL_8;
  }
  return llvm::formDedicatedExitBlocks((uint64_t)v2, *(llvm::Loop **)(v3 + 48), *(llvm::DominatorTree **)(v3 + 56), 0, 0);
}

uint64_t sub_1C55B71B8()
{
  __n128 v1;
  char v2;
  char *v3;
  int v4;

  v4 = 1;
  v2 = 0;
  v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Disable trying to structure the CFG.";
  v1.n128_u64[1] = 36;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED807198, "disable-cfg-structure", &v4, &v3, &v1);
  __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED807198, &dword_1C475E000);
  v4 = 1;
  v2 = 0;
  v3 = &v2;
  v1.n128_u64[0] = (unint64_t)"Perform full structurization of the CFG";
  v1.n128_u64[1] = 39;
  sub_1C4E5DE0C((llvm::cl::Option *)&unk_1ED807258, "precisecfg", &v4, &v3, &v1);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &unk_1ED807258, &dword_1C475E000);
}

uint64_t sub_1C55B729C(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Conservative local memory fence insertion";
  *(_QWORD *)(v2 + 8) = 41;
  *(_QWORD *)(v2 + 16) = "conservative-lm-fencing";
  *(_QWORD *)(v2 + 24) = 23;
  *(_QWORD *)(v2 + 32) = &unk_1ED807318;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C55B73F4;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C55B732C(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED807318;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E8170450;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED807320);
  if (v3 != -1)
  {
    v7[0] = sub_1C55B729C;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED807320, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C55B73F4()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C55B732C(v0);
}

void sub_1C55B7420(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C55B7444()
{
  return "Conservative Local Memory Fencing";
}

void sub_1C55B7454(int a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
}

BOOL sub_1C55B745C(uint64_t a1, uint64_t ***a2)
{
  uint64_t **v2;
  uint64_t *v3;
  int v4;
  uint64_t v6;
  unsigned __int8 v7;
  uint64_t v8;
  unint64_t v9;
  unsigned int v10;
  int i;
  unsigned int v12;
  uint64_t v13;
  _QWORD *v14;
  BOOL v15;
  uint64_t ***v17;
  int v18;
  uint64_t ***v19;
  uint64_t *v20;
  uint64_t *v21;
  char v22;
  uint64_t v23;
  uint64_t *v24;
  int v25;
  _BOOL8 v26;
  uint64_t v27;
  int v28;
  char v29;
  uint64_t v30;
  uint64_t v31;
  int v32;
  unsigned int v33;
  BOOL v34;
  uint64_t Declaration;
  const llvm::APInt *v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  int v40;
  char v41;
  uint64_t v42;
  llvm::ConstantInt *v43;
  unint64_t v44;
  char v45;
  const llvm::APInt *v46;
  llvm::ValueHandleBase *v47;
  uint64_t v48;
  llvm::ConstantInt *v49;
  unsigned int v50;
  unint64_t v51;
  llvm::ValueHandleBase *v52;
  char *v53;
  char *v54;
  uint64_t v55;
  llvm::Value *v56;
  char *v57;
  uint64_t v58;
  char *v59;
  uint64_t v60;
  uint64_t *v61;
  uint64_t v62;
  uint64_t **v63;
  uint64_t v64;
  uint64_t v65;
  uint64_t v66;
  uint64_t v67;
  llvm::ValueSymbolTable *v68;
  uint64_t v69;
  unint64_t v71;
  uint64_t ***v72;
  uint64_t *v73;
  unint64_t v74;
  unsigned int v75;
  __int16 v76;
  char v77;
  uint64_t v78[2];
  uint64_t v79;

  v79 = *MEMORY[0x1E0C80C00];
  v2 = a2[14];
  if (!v2)
    return 0;
  if (!*((_DWORD *)v2 + 2))
    return 0;
  v3 = v2[5];
  if (!v3)
    return 0;
  v4 = *((_DWORD *)v3 + 10);
  if (!v4)
    return 0;
  v6 = v3[3];
  v7 = atomic_load((unsigned __int8 *)&qword_1ED7EAC88);
  if ((v7 & 1) == 0 && __cxa_guard_acquire(&qword_1ED7EAC88))
  {
    v71 = llvm::hashing::detail::fixed_seed_override;
    if (!llvm::hashing::detail::fixed_seed_override)
      v71 = 0xFF51AFD7ED558CCDLL;
    qword_1ED7EAC80 = v71;
    __cxa_guard_release(&qword_1ED7EAC88);
  }
  v8 = __ROR8__(qword_1ED7EAC80 ^ 0x1432D53F0B35DBA3, 30);
  v9 = 0x9DDFEA08EB382D69
     * ((qword_1ED7EAC80 + 0x1759DE5FCD247749) ^ ((0x9DDFEA08EB382D69
                                                   * ((v8 - 0x64A37863B26C7621) ^ (qword_1ED7EAC80
                                                                                   + 0x1759DE5FCD247749))) >> 47) ^ (0x9DDFEA08EB382D69 * ((v8 - 0x64A37863B26C7621) ^ (qword_1ED7EAC80 + 0x1759DE5FCD247749))));
  v10 = -348639895 * ((v9 >> 47) ^ v9);
  for (i = 1; ; ++i)
  {
    v12 = v10 & (v4 - 1);
    v13 = v6 + 24 * v12;
    v14 = *(_QWORD **)v13;
    if (*(_QWORD *)v13 == -1)
    {
      if ("conservativelmfencing" == (char *)-1)
        goto LABEL_23;
      goto LABEL_9;
    }
    if (v14 != (_QWORD *)-2)
      break;
    if ("conservativelmfencing" == (char *)-2)
      goto LABEL_23;
LABEL_9:
    if (v14 == (_QWORD *)-1)
      return 0;
    v10 = i + v12;
  }
  if (*(_QWORD *)(v13 + 8) != 21)
    goto LABEL_9;
  v15 = *v14 == 0x61767265736E6F63 && v14[1] == 0x65666D6C65766974;
  if (!v15 || *(_QWORD *)((char *)v14 + 13) != 0x676E69636E65666DLL)
    goto LABEL_9;
LABEL_23:
  v17 = (uint64_t ***)a2[10];
  if (v17 != a2 + 9)
  {
    v18 = 0;
    while (1)
    {
      v19 = v17 - 3;
      v72 = v17;
      if (!v17)
        v19 = 0;
      v20 = (uint64_t *)(v19 + 5);
      v21 = (uint64_t *)v19[6];
      if (v21 != (uint64_t *)(v19 + 5))
        break;
LABEL_97:
      v17 = (uint64_t ***)v72[1];
      if (v17 == a2 + 9)
        return v18 != 0;
    }
    v22 = 0;
    v23 = 1;
    v73 = v20;
    while (2)
    {
      if (v21)
        v24 = v21 - 3;
      else
        v24 = 0;
      v25 = *((unsigned __int8 *)v24 + 16);
      v26 = v25 != 60 || v21 == 0;
      if (!v26)
      {
        v31 = *(_QWORD *)*(v24 - 4);
        v32 = *(_DWORD *)(v31 + 8);
        if ((v32 & 0xFE) == 0x12)
          v32 = *(_DWORD *)(**(_QWORD **)(v31 + 16) + 8);
        v33 = v32 & 0xFFFFFF00;
        v15 = v33 == 768;
        v34 = v33 == 768;
        v30 = (v33 != 768) & v23;
        v22 |= v34;
        if (v15 && ((v23 ^ 1) & 1) == 0)
        {
          v22 = 1;
          goto LABEL_49;
        }
        goto LABEL_81;
      }
      if (v21 && v25 == 61)
      {
        v27 = *(_QWORD *)*(v24 - 4);
        v28 = *(_DWORD *)(v27 + 8);
        if ((v28 & 0xFE) == 0x12)
          v28 = *(_DWORD *)(**(_QWORD **)(v27 + 16) + 8);
        if ((v28 & 0xFFFFFF00) == 0x300)
        {
          v29 = v22 | v23;
          v22 = 0;
          if ((v29 & 1) == 0)
          {
            v30 = 1;
            goto LABEL_81;
          }
LABEL_49:
          Declaration = llvm::Intrinsic::getDeclaration(*(uint64_t **)(*(_QWORD *)(v24[5] + 56) + 40), 2622, 0, 0);
          v37 = Declaration;
          if (Declaration)
            v38 = *(_QWORD *)(Declaration + 24);
          else
            v38 = 0;
          v42 = ***a2;
          v43 = *(llvm::ConstantInt **)(v42 + 1936);
          v44 = *(unsigned int *)(v42 + 1944);
          v75 = v44 >> 8;
          if (v44 >> 8 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v74, 2, 0);
          }
          else
          {
            if (v44 <= 0xFF)
              v45 = 0;
            else
              v45 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v44);
            v74 = v45 & 2;
          }
          v47 = llvm::ConstantInt::get(v43, (llvm::LLVMContext *)&v74, v36);
          if (v75 >= 0x41 && v74)
            MEMORY[0x1CAA32F9C](v74, 0x1000C8000313F17);
          v78[0] = (uint64_t)v47;
          v48 = ***a2;
          v49 = *(llvm::ConstantInt **)(v48 + 1936);
          v50 = *(_DWORD *)(v48 + 1944);
          v75 = v50 >> 8;
          if (v50 >> 8 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v74, 4, 0);
          }
          else
          {
            if (v50 <= 0xFF)
              LOBYTE(v51) = 0;
            else
              v51 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v50);
            v74 = v51 & 4;
          }
          v52 = llvm::ConstantInt::get(v49, (llvm::LLVMContext *)&v74, v46);
          if (v75 >= 0x41 && v74)
            MEMORY[0x1CAA32F9C](v74, 0x1000C8000313F17);
          v78[1] = (uint64_t)v52;
          v76 = 257;
          v53 = (char *)operator new(0xB0uLL);
          v54 = v53;
          v55 = 0;
          v56 = (llvm::Value *)(v53 + 96);
          *((_DWORD *)v53 + 29) = *((_DWORD *)v53 + 29) & 0x38000000 | 3;
          do
          {
            v57 = &v53[v55];
            *(_QWORD *)v57 = 0;
            *((_QWORD *)v57 + 1) = 0;
            *((_QWORD *)v57 + 2) = 0;
            *((_QWORD *)v57 + 3) = v56;
            v55 += 32;
          }
          while (v55 != 96);
          v58 = **(_QWORD **)(v38 + 16);
          *(_OWORD *)(v53 + 120) = 0u;
          v59 = v53 + 120;
          *((_QWORD *)v53 + 12) = v58;
          *((_QWORD *)v53 + 13) = 0;
          v53[112] = 84;
          v53[113] = 0;
          *((_WORD *)v53 + 57) = 0;
          *((_DWORD *)v53 + 29) = *((_DWORD *)v53 + 29) & 0xC0000000 | 3;
          *(_OWORD *)(v53 + 136) = 0u;
          *((_DWORD *)v53 + 38) = 0;
          if (v21)
          {
            v65 = v24[5];
            *((_QWORD *)v53 + 17) = v65;
            *(_WORD *)(v65 + 18) &= ~0x8000u;
            if ((v53[119] & 0x10) != 0)
            {
              v67 = *(_QWORD *)(v65 + 56);
              if (v67)
              {
                v68 = *(llvm::ValueSymbolTable **)(v67 + 104);
                if (v68)
                  llvm::ValueSymbolTable::reinsertValue(v68, v56);
              }
            }
            v66 = *v21;
            *((_QWORD *)v54 + 15) = *v21;
            *((_QWORD *)v54 + 16) = v21;
            *(_QWORD *)(v66 + 8) = v59;
            *v21 = (uint64_t)v59;
            v60 = *((_DWORD *)v54 + 29) & 0x7FFFFFF;
          }
          else
          {
            v60 = 3;
          }
          *((_QWORD *)v54 + 20) = 0;
          *((_QWORD *)v54 + 21) = v38;
          sub_1C5382FD4((uint64_t)&v77, v78, &v79, (uint64_t)v56 - 32 * v60);
          v61 = (uint64_t *)(v54 + 64);
          if (*((_QWORD *)v54 + 8))
          {
            **((_QWORD **)v54 + 10) = *((_QWORD *)v54 + 9);
            v69 = *((_QWORD *)v54 + 9);
            if (v69)
              *(_QWORD *)(v69 + 16) = *((_QWORD *)v54 + 10);
          }
          *v61 = v37;
          if (v37)
          {
            v64 = *(_QWORD *)(v37 + 8);
            v63 = (uint64_t **)(v37 + 8);
            v62 = v64;
            *((_QWORD *)v54 + 9) = v64;
            if (v64)
              *(_QWORD *)(v62 + 16) = v54 + 72;
            *((_QWORD *)v54 + 10) = v63;
            *v63 = v61;
          }
          llvm::CallBase::populateBundleOperandInfos((uint64_t)v56, 0, 0, 2u);
          llvm::Value::setName((uint64_t ***)v56, (uint64_t)&v74);
          v18 = 1;
          v30 = v26;
          v20 = v73;
LABEL_81:
          v21 = (uint64_t *)v21[1];
          v23 = v30;
          if (v21 == v20)
            goto LABEL_97;
          continue;
        }
      }
      else if (v21 && v25 == 65)
      {
        v39 = *(_QWORD *)*(v24 - 8);
        v40 = *(_DWORD *)(v39 + 8);
        if ((v40 & 0xFE) == 0x12)
          v40 = *(_DWORD *)(**(_QWORD **)(v39 + 16) + 8);
        if ((v40 & 0xFFFFFF00) == 0x300)
        {
          v41 = v22 | v23;
          v22 = 1;
          v30 = 1;
          if ((v41 & 1) != 0)
            goto LABEL_49;
          goto LABEL_81;
        }
      }
      break;
    }
    v30 = v23;
    goto LABEL_81;
  }
  return 0;
}

uint64_t sub_1C55B7AE4(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "constant array load promotion";
  *(_QWORD *)(v2 + 8) = 29;
  *(_QWORD *)(v2 + 16) = "constant-array-promotion";
  *(_QWORD *)(v2 + 24) = 24;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F7118;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C55B7B74;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C55B7B74()
{
  uint64_t result;

  result = operator new();
  *(_QWORD *)(result + 8) = 0;
  *(_QWORD *)(result + 16) = &unk_1EF8F7118;
  *(_DWORD *)(result + 24) = 4;
  *(_QWORD *)result = &off_1E81704F0;
  return result;
}

void sub_1C55B7BC0(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C55B7BE4(int a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
}

uint64_t sub_1C55B7BEC(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  uint64_t v3;
  int v4;
  uint64_t v5;
  uint64_t v6;
  uint64_t v7;
  unsigned int v8;
  BOOL v9;
  int v10;
  int v12;
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _QWORD *v16;
  uint64_t v17;
  _QWORD *v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  int v23;
  int v24;
  int v25;
  uint64_t v26;
  BOOL v27;
  uint64_t v28;
  llvm::ConstantInt **v29;
  llvm::Constant *v30;
  unsigned __int8 *AggregateElement;
  uint64_t v32;
  llvm::Value **v33;
  uint64_t v34;
  uint64_t *v35;
  uint64_t v36;
  uint64_t v37;
  _QWORD *v38;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  char v45;
  uint64_t v46;
  uint64_t v47;
  _BYTE v48[32];
  __int16 v49;
  void *v50[2];
  _QWORD v51[17];

  v51[15] = *MEMORY[0x1E0C80C00];
  v2 = a2 + 8;
  v3 = *(_QWORD *)(a2 + 16);
  if (v3 != a2 + 8)
  {
    v4 = 0;
    v42 = a2 + 272;
    v40 = a2 + 8;
    while (1)
    {
      if (v3)
        v5 = v3 - 56;
      else
        v5 = 0;
      if ((*(_DWORD *)(*(_QWORD *)v5 + 8) & 0xFFFFFF00) != 0x200)
        goto LABEL_26;
      v6 = *(_QWORD *)(v5 + 24);
      if (*(_BYTE *)(v6 + 8) != 17)
        goto LABEL_26;
      if (*(_DWORD *)(v6 + 32) > 4u)
        goto LABEL_24;
      v7 = **(_QWORD **)(v6 + 16);
      if ((*(_DWORD *)(v7 + 8) & 0xFE) != 0x12)
      {
        v8 = *(_DWORD *)(v7 + 8);
        v9 = v8 > 0x15;
        v10 = (1 << v8) & 0x20AC7F;
        if (v9 || v10 == 0)
          goto LABEL_24;
      }
      if (v3 && *(_BYTE *)(v5 + 16) == 3)
      {
        if ((*(_DWORD *)(v5 + 20) & 0x7FFFFFF) == 0)
          goto LABEL_24;
      }
      else if (!*(_BYTE *)(v5 + 16) && *(_QWORD *)(v5 + 72) == v5 + 72 && (*(_BYTE *)(v5 + 34) & 0x80) == 0)
      {
        goto LABEL_24;
      }
      if ((*(_BYTE *)(v5 + 80) & 2) == 0
        && (!llvm::Module::getPICLevel(*(llvm::Module **)(v5 + 40))
         || llvm::Constant::getRelocationInfo(*(llvm::Constant **)(v5 - 32)) != 2))
      {
        v41 = v4;
        v13 = *(_QWORD *)(v5 + 8);
        if (v13)
        {
          v45 = 0;
          do
          {
            v14 = *(_QWORD *)(v13 + 24);
            v13 = *(_QWORD *)(v13 + 8);
            if (v14 && *(_BYTE *)(v14 + 16) == 62)
            {
              v47 = v13;
              if ((*(_DWORD *)(v14 + 20) & 0x7FFFFFF) == 3)
              {
                v15 = *(_QWORD *)(v14 - 64);
                if (*(unsigned __int8 *)(v15 + 16) <= 0x14u)
                {
                  v16 = (_QWORD *)(v15 + 24);
                  if (*(_DWORD *)(v15 + 32) >= 0x41u)
                    v16 = (_QWORD *)*v16;
                  if (!*v16)
                  {
                    v19 = *(_QWORD *)(v14 + 8);
                    if (v19)
                    {
                      v43 = v7;
                      v44 = v5;
                      do
                      {
                        v20 = *(_QWORD *)(v19 + 24);
                        v19 = *(_QWORD *)(v19 + 8);
                        if (v20 && *(_BYTE *)(v20 + 16) == 60)
                        {
                          if (*(_QWORD *)v20 == v7
                            || ((sub_1C4768AD0(v42, *(_QWORD *)v20),
                                 v22 = v21,
                                 v24 = v23,
                                 sub_1C4768AD0(v42, v7),
                                 v22 == v26)
                              ? (v27 = v24 == v25)
                              : (v27 = 0),
                                v27))
                          {
                            v46 = v19;
                            v28 = *(_QWORD *)(*(_QWORD *)(v5 + 24) + 32);
                            sub_1C4773D54((uint64_t)v50, v20, 0, 0, 0);
                            v29 = *(llvm::ConstantInt ***)(v14 + 64 - 32 * (*(_DWORD *)(v14 + 20) & 0x7FFFFFF));
                            v30 = *(llvm::Constant **)(v5 - 32);
                            AggregateElement = (unsigned __int8 *)llvm::Constant::getAggregateElement(v30, 0);
                            if ((v28 & 0xFFFFFFFE) != 0)
                            {
                              v32 = 1;
                              do
                              {
                                v33 = llvm::ConstantInt::get(*v29, v32, 0);
                                v49 = 257;
                                v34 = sub_1C4774B48((uint64_t)v50, 32, (uint64_t)v29, (uint64_t)v33, (uint64_t)v48);
                                v35 = (uint64_t *)llvm::Constant::getAggregateElement(v30, (llvm::Type *)v32);
                                v49 = 257;
                                AggregateElement = (unsigned __int8 *)llvm::IRBuilderBase::CreateSelect((uint64_t *)v50, v34, v35, (uint64_t)AggregateElement, (uint64_t)v48, 0);
                                ++v32;
                              }
                              while (v28 != v32);
                            }
                            v36 = *(_QWORD *)v20;
                            if (*(_QWORD *)AggregateElement != *(_QWORD *)v20)
                            {
                              v49 = 257;
                              AggregateElement = sub_1C4773E38((uint64_t *)v50, 49, AggregateElement, v36, (uint64_t)v48);
                            }
                            v7 = v43;
                            v5 = v44;
                            if (v50[0] != v51)
                              free(v50[0]);
                            v45 = 1;
                            llvm::Value::doRAUW((llvm::ValueAsMetadata *)v20, (llvm::Value *)AggregateElement, (llvm::Value *)1);
                            llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v20 + 40) + 40, (uint64_t ***)v20);
                            v37 = *(_QWORD *)(v20 + 24);
                            v38 = *(_QWORD **)(v20 + 32);
                            *v38 = v37;
                            *(_QWORD *)(v37 + 8) = v38;
                            *(_QWORD *)(v20 + 24) = 0;
                            *(_QWORD *)(v20 + 32) = 0;
                            llvm::Value::deleteValue((llvm::Value *)v20);
                            v19 = v46;
                          }
                        }
                      }
                      while (v19);
                    }
                  }
                }
              }
              if (!*(_QWORD *)(v14 + 8))
              {
                llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v14 + 40) + 40, (uint64_t ***)v14);
                v17 = *(_QWORD *)(v14 + 24);
                v18 = *(_QWORD **)(v14 + 32);
                *v18 = v17;
                *(_QWORD *)(v17 + 8) = v18;
                *(_QWORD *)(v14 + 24) = 0;
                *(_QWORD *)(v14 + 32) = 0;
                llvm::Value::deleteValue((llvm::Value *)v14);
              }
              v13 = v47;
            }
          }
          while (v13);
        }
        else
        {
          v45 = 0;
        }
        v12 = v45 & 1;
        v4 = v41;
        v2 = v40;
        goto LABEL_25;
      }
LABEL_24:
      v12 = 0;
LABEL_25:
      v4 |= v12;
LABEL_26:
      v3 = *(_QWORD *)(v3 + 8);
      if (v3 == v2)
        return v4 & 1;
    }
  }
  LOBYTE(v4) = 0;
  return v4 & 1;
}

uint64_t sub_1C55B800C(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeDominatorTreeWrapperPassPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "sink insts into loops";
  *(_QWORD *)(v2 + 8) = 21;
  *(_QWORD *)(v2 + 16) = "delicm";
  *(_QWORD *)(v2 + 24) = 6;
  *(_QWORD *)(v2 + 32) = &unk_1ED807330;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C55B80A0;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C55B80A0()
{
  uint64_t v0;
  unint64_t v2;
  unint64_t v4;
  _QWORD *v5;
  _QWORD v6[2];

  v0 = operator new();
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)(v0 + 16) = &unk_1ED807330;
  *(_DWORD *)(v0 + 24) = 1;
  *(_QWORD *)v0 = &off_1E8170590;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v4 = qword_1ED830BC0[0];
  v2 = atomic_load(&qword_1ED807338);
  if (v2 != -1)
  {
    v6[0] = sub_1C55B800C;
    v6[1] = &v4;
    v5 = v6;
    std::__call_once(&qword_1ED807338, &v5, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return v0;
}

void sub_1C55B8184(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C55B81A8(int a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  return sub_1C4771E64((uint64_t)this, (uint64_t)this + 112, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
}

uint64_t sub_1C55B81F0(llvm::LoopPass *a1, const llvm::Loop *a2)
{
  void **v4;
  void *v5;
  uint64_t v6;
  uint64_t LoopPredecessor;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  uint64_t v15;
  llvm::Instruction *v16;
  llvm::Instruction *v17;
  int v18;
  BOOL v19;
  uint64_t v20;
  llvm::BasicBlock *NearestCommonDominator;
  uint64_t v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  char *FirstNonPHIOrDbgOrLifetime;
  char v28;
  _QWORD *v29;

  if ((llvm::LoopPass::skipLoop(a1, a2) & 1) != 0)
    goto LABEL_43;
  v4 = (void **)**((_QWORD **)a1 + 1);
  do
  {
    v5 = *v4;
    v4 += 2;
  }
  while (v5 != &llvm::DominatorTreeWrapperPass::ID);
  v6 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v4 - 1) + 96))(*(v4 - 1), &llvm::DominatorTreeWrapperPass::ID);
  LoopPredecessor = llvm::LoopBase<llvm::BasicBlock,llvm::Loop>::getLoopPredecessor((uint64_t)a2);
  if (!LoopPredecessor)
    goto LABEL_11;
  v8 = *(_QWORD *)(LoopPredecessor + 40);
  if (v8 == LoopPredecessor + 40)
    goto LABEL_11;
  if (v8)
    v9 = v8 - 24;
  else
    v9 = 0;
  if (*(_BYTE *)(v9 + 16) == 30)
  {
    if ((*(_DWORD *)(v9 + 20) & 0x7FFFFFF) == 3)
    {
LABEL_11:
      v10 = 0;
      goto LABEL_16;
    }
  }
  else
  {
    v10 = 0;
    switch(*(_BYTE *)(v9 + 16))
    {
      case 0x1D:
      case 0x21:
      case 0x22:
      case 0x23:
      case 0x24:
      case 0x25:
      case 0x26:
        goto LABEL_16;
      case 0x1E:
        __break(1u);
        goto LABEL_46;
      case 0x1F:
        v11 = (*(_DWORD *)(v9 + 20) >> 1) & 0x3FFFFFF;
        break;
      case 0x20:
LABEL_46:
        v11 = (*(_DWORD *)(v9 + 20) & 0x7FFFFFF) - 1;
        break;
      case 0x27:
        v11 = *(_DWORD *)(v9 + 80) + 1;
        break;
      default:
        goto LABEL_11;
    }
    if (v11 != 1)
      goto LABEL_11;
  }
  v10 = LoopPredecessor;
LABEL_16:
  v14 = *(_QWORD **)(v10 + 40);
  v12 = (_QWORD *)(v10 + 40);
  v13 = v14;
  if (v14 == v12)
  {
LABEL_43:
    v28 = 0;
    return v28 & 1;
  }
  v28 = 0;
  v15 = v6 + 32;
  v29 = v12;
  do
  {
    v19 = v13 == 0;
    v16 = (llvm::Instruction *)(v13 - 3);
    v13 = (_QWORD *)*v13;
    if (v19)
      v17 = 0;
    else
      v17 = v16;
    v18 = *((unsigned __int8 *)v17 + 16);
    v19 = (v18 - 67) > 0x19 || ((1 << (v18 - 67)) & 0x3C00783) == 0;
    if (!v19 || (v18 - 66) <= 0xC)
    {
      v20 = *((_QWORD *)v17 + 1);
      if (v20)
      {
        NearestCommonDominator = 0;
        do
        {
          v22 = *(_QWORD *)(v20 + 24);
          v23 = sub_1C477672C((uint64_t)a2 + 56, *(_QWORD *)(v22 + 40));
          v24 = *((_QWORD *)a2 + 8);
          if (v24 == *((_QWORD *)a2 + 7))
            v25 = 76;
          else
            v25 = 72;
          if (v23 == (_QWORD *)(v24 + 8 * *(unsigned int *)((char *)a2 + v25)) || *(_BYTE *)(v22 + 16) == 83)
          {
            v12 = v29;
            goto LABEL_39;
          }
          if (NearestCommonDominator)
            NearestCommonDominator = (llvm::BasicBlock *)llvm::DominatorTreeBase<llvm::BasicBlock,false>::findNearestCommonDominator(v15, (uint64_t)NearestCommonDominator, *(_QWORD *)(v22 + 40));
          else
            NearestCommonDominator = *(llvm::BasicBlock **)(v22 + 40);
          v20 = *(_QWORD *)(v20 + 8);
        }
        while (v20);
        v12 = v29;
        if (NearestCommonDominator)
        {
          v28 = 1;
          FirstNonPHIOrDbgOrLifetime = llvm::BasicBlock::getFirstNonPHIOrDbgOrLifetime(NearestCommonDominator, 1);
          llvm::Instruction::moveBefore(v17, (llvm::Instruction *)FirstNonPHIOrDbgOrLifetime);
        }
      }
    }
LABEL_39:
    ;
  }
  while (v13 != v12);
  return v28 & 1;
}

uint64_t sub_1C55B8440(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Convert i8 vector operations to use i16 vectors";
  *(_QWORD *)(v2 + 8) = 47;
  *(_QWORD *)(v2 + 16) = "eliminate-i8-vectors";
  *(_QWORD *)(v2 + 24) = 20;
  *(_QWORD *)(v2 + 32) = &unk_1ED807340;
  *(_WORD *)(v2 + 40) = 1;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C55B85D8;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C55B84D4(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED807340;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E8170640;
  *(_QWORD *)(a1 + 32) = 0;
  *(_QWORD *)(a1 + 40) = 0;
  *(_DWORD *)(a1 + 48) = 0;
  *(_QWORD *)(a1 + 56) = 0;
  *(_QWORD *)(a1 + 64) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  *(_QWORD *)(a1 + 80) = a1 + 96;
  *(_QWORD *)(a1 + 88) = 0x2000000000;
  *(_QWORD *)(a1 + 352) = a1 + 368;
  *(_QWORD *)(a1 + 360) = 0x2000000000;
  *(_QWORD *)(a1 + 880) = a1 + 896;
  *(_QWORD *)(a1 + 888) = 0x2000000000;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED807348);
  if (v3 != -1)
  {
    v7[0] = sub_1C55B8440;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED807348, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C55B85D8()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C55B84D4(v0);
}

void sub_1C55B8600(llvm::Pass *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  *(_QWORD *)a1 = &off_1E8170640;
  v2 = (_QWORD *)*((_QWORD *)a1 + 110);
  if (v2 != (_QWORD *)((char *)a1 + 896))
    free(v2);
  v3 = (_QWORD *)*((_QWORD *)a1 + 44);
  if (v3 != (_QWORD *)((char *)a1 + 368))
    free(v3);
  v4 = (_QWORD *)*((_QWORD *)a1 + 10);
  if (v4 != (_QWORD *)((char *)a1 + 96))
    free(v4);
  MEMORY[0x1CAA32FB4](*((_QWORD *)a1 + 7), 8);
  MEMORY[0x1CAA32FB4](*((_QWORD *)a1 + 4), 8);
  llvm::Pass::~Pass(a1);
}

void sub_1C55B8680(llvm::Pass *a1)
{
  _QWORD *v2;
  _QWORD *v3;
  _QWORD *v4;

  *(_QWORD *)a1 = &off_1E8170640;
  v2 = (_QWORD *)*((_QWORD *)a1 + 110);
  if (v2 != (_QWORD *)((char *)a1 + 896))
    free(v2);
  v3 = (_QWORD *)*((_QWORD *)a1 + 44);
  if (v3 != (_QWORD *)((char *)a1 + 368))
    free(v3);
  v4 = (_QWORD *)*((_QWORD *)a1 + 10);
  if (v4 != (_QWORD *)((char *)a1 + 96))
    free(v4);
  MEMORY[0x1CAA32FB4](*((_QWORD *)a1 + 7), 8);
  MEMORY[0x1CAA32FB4](*((_QWORD *)a1 + 4), 8);
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

void sub_1C55B8714(int a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
}

BOOL sub_1C55B871C(uint64_t a1, uint64_t a2)
{
  uint64_t *v4;
  _QWORD *v5;
  int v6;
  uint64_t v7;
  unsigned __int8 *v8;
  size_t v9;
  uint64_t v10;
  uint64_t i;
  uint64_t v12;
  BOOL v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  int *v17;
  uint64_t v18;
  int v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  uint64_t v23;
  int **v24;
  int *v25;
  int v26;
  int v27;
  uint64_t v28;
  int v29;
  int *v30;
  _QWORD *v31;
  int v32;
  uint64_t v33;
  uint64_t *v34;
  uint64_t *v35;
  uint64_t *v36;
  uint64_t v37;
  uint64_t **v38;
  uint64_t v39;
  unsigned int v40;
  _QWORD *v42;
  uint64_t **v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t **v49;
  uint64_t *v50;
  int v51;
  int v52;
  uint64_t *v53;
  uint64_t v54;
  char *v55;
  uint64_t v56;
  unsigned __int8 *v57;
  int v58;
  unsigned __int8 *v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  int **v65;
  int *v66;
  int v67;
  int v68;
  int v69;
  uint64_t v70;
  uint64_t v71;
  _QWORD **v72;
  unsigned int v73;
  uint64_t v74;
  int *v75;
  int v76;
  int v77;
  int v79;
  unsigned __int8 *v80;
  int v81;
  unsigned int v82;
  _QWORD **v83;
  int *v84;
  uint64_t v85;
  char *v86;
  uint64_t v87;
  uint64_t v88;
  unint64_t v89;
  uint64_t v90;
  llvm::UndefValue *v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t v94;
  uint64_t v95;
  int **v96;
  int *v97;
  int v98;
  int v99;
  llvm::UndefValue *v100;
  llvm::UndefValue *v101;
  char *v102;
  char *v103;
  llvm::UndefValue **v104;
  uint64_t v105;
  _QWORD *v106;
  uint64_t v107;
  uint64_t v108;
  llvm::UndefValue ***v109;
  uint64_t v110;
  char *v111;
  char *v112;
  unsigned __int8 **v113;
  int v114;
  unsigned __int8 *v115;
  unsigned __int8 *v116;
  unsigned __int8 **v117;
  unsigned __int8 *v118;
  int *v119;
  uint64_t v120;
  char *v121;
  uint64_t v122;
  int v123;
  llvm::PoisonValue ***v124;
  llvm::PoisonValue **v125;
  unint64_t v126;
  void *v127;
  uint64_t v128;
  llvm::Type *v129;
  _QWORD *v130;
  unsigned __int8 *v131;
  char *v132;
  char *v133;
  uint64_t v134;
  uint64_t v135;
  uint64_t v136;
  _QWORD *v137;
  uint64_t v138;
  _QWORD *v139;
  _QWORD *v140;
  uint64_t v141;
  uint64_t v142;
  unint64_t v143;
  uint64_t v144;
  _QWORD *v145;
  uint64_t v146;
  _QWORD *v147;
  uint64_t v148;
  uint64_t v149;
  _QWORD *v150;
  uint64_t v152;
  uint64_t v153;
  _QWORD *v154;
  int v155;
  llvm::PointerType *v156;
  uint64_t **v157;
  uint64_t v158;
  uint64_t v159;
  uint64_t v160;
  uint64_t v161;
  int **v162;
  int *v163;
  int v164;
  int v165;
  uint64_t v166;
  int v167;
  uint64_t *v168;
  uint64_t v169;
  int v170;
  uint64_t v171;
  uint64_t v172;
  uint64_t v173;
  int v174;
  uint64_t v175;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  uint64_t v180;
  llvm::UndefValue *v181;
  llvm::UndefValue *v182;
  uint64_t v183;
  uint64_t v184;
  uint64_t v185;
  uint64_t v186;
  int **v187;
  int *v188;
  int v189;
  int v190;
  int *v191;
  uint64_t *v192;
  char *v193;
  uint64_t *v194;
  char *v195;
  char *v196;
  uint64_t v197;
  _QWORD *v198;
  uint64_t v199;
  char *v200;
  char *v201;
  unsigned __int8 **v202;
  int v203;
  unsigned __int8 *v204;
  unsigned __int8 *v205;
  unsigned __int8 **v206;
  unsigned __int8 *v207;
  int *v208;
  uint64_t v209;
  char *v210;
  uint64_t v211;
  llvm::Type *v212;
  llvm::ValueHandleBase *v213;
  int *v214;
  uint64_t *v215;
  char *v216;
  uint64_t *v217;
  int v218;
  uint64_t v219;
  uint64_t v220;
  int v221;
  int *v222;
  uint64_t v223;
  int v224;
  char *v225;
  uint64_t **v226;
  uint64_t v227;
  uint64_t v228;
  uint64_t v229;
  uint64_t v230;
  uint64_t *v231;
  uint64_t v232;
  int v233;
  int v234;
  _QWORD *v235;
  uint64_t v236;
  char *v237;
  uint64_t v238;
  int v239;
  int *v240;
  int *v241;
  _QWORD **v242;
  int **v243;
  _QWORD **v244;
  _QWORD **v245;
  int *v246;
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;
  uint64_t v251;
  int **v252;
  int *v253;
  int v254;
  int v255;
  int *v256;
  uint64_t v257;
  char *v258;
  uint64_t v259;
  unsigned __int8 *v260;
  _QWORD **j;
  _QWORD *v262;
  unint64_t v263;
  uint64_t v264;
  uint64_t v265;
  uint64_t v266;
  uint64_t *v267;
  _QWORD *v268;
  uint64_t v269;
  uint64_t *v270;
  uint64_t *v271;
  uint64_t v272;
  llvm::PHINode *v273;
  int v274;
  uint64_t v275;
  uint64_t v276;
  uint64_t *v277;
  uint64_t *v278;
  uint64_t v279;
  int v280;
  uint64_t v281;
  uint64_t v282;
  uint64_t v283;
  uint64_t v284;
  llvm::UndefValue *v285;
  unsigned int v286;
  uint64_t *v287;
  uint64_t v288;
  uint64_t v289;
  uint64_t v290;
  uint64_t v291;
  _QWORD *v292;
  unsigned int v294;
  _QWORD *v295;
  uint64_t v296;
  int v297;
  int v298;
  uint64_t v299;
  _QWORD *v300;
  unint64_t v301;
  unint64_t v302;
  _QWORD *v303;
  uint64_t v304;
  uint64_t v305;
  uint64_t v306;
  uint64_t v307;
  __int16 v308;
  char *v309;
  unsigned __int8 **v310;
  unsigned __int8 **v311;
  unsigned __int8 **v312;
  __int16 v313;
  char *v314;
  unsigned __int8 **v315;
  unsigned __int8 **v316;
  unsigned __int8 **v317;
  _QWORD *v318;
  int v319;
  _QWORD v320[4];
  __int16 v321;
  uint64_t v322;
  uint64_t v323;
  uint64_t v324;
  uint64_t v325;
  void *v326;
  uint64_t *v327;
  _QWORD *v328[2];
  __int16 v329;
  void *v330;
  uint64_t v331;
  _QWORD v332[2];
  __int16 v333;
  void *v334;
  uint64_t v335;
  _BYTE v336[32];
  uint64_t v337;
  uint64_t v338;
  uint64_t v339;
  uint64_t v340;

  v340 = *MEMORY[0x1E0C80C00];
  v4 = (uint64_t *)(a1 + 32);
  sub_1C5505510((_DWORD *)(a1 + 32));
  v5 = (_QWORD *)(a1 + 56);
  v6 = *(_DWORD *)(a1 + 64);
  if (v6)
  {
    v294 = *(_DWORD *)(a1 + 72);
    if (v294 > 4 * v6 && v294 >= 0x41)
    {
      v298 = 1 << (33 - __clz(v6 - 1));
      if (v298 <= 64)
        v297 = 64;
      else
        v297 = v298;
LABEL_390:
      if (v297 == v294)
      {
        *(_QWORD *)(a1 + 64) = 0;
        v299 = 16 * v294;
        v300 = *(_QWORD **)(a1 + 56);
        do
        {
          *v300 = -4096;
          v300 += 2;
          v299 -= 16;
        }
        while (v299);
      }
      else
      {
        MEMORY[0x1CAA32FB4](*v5, 8);
        if (v297)
        {
          v301 = (4 * v297 / 3u + 1) | ((unint64_t)(4 * v297 / 3u + 1) >> 1);
          v302 = v301 | (v301 >> 2) | ((v301 | (v301 >> 2)) >> 4);
          LODWORD(v302) = (((v302 | (v302 >> 8)) >> 16) | v302 | (v302 >> 8)) + 1;
          *(_DWORD *)(a1 + 72) = v302;
          v303 = operator new(16 * v302, (std::align_val_t)8uLL);
          *(_QWORD *)(a1 + 56) = v303;
          *(_QWORD *)(a1 + 64) = 0;
          v304 = *(unsigned int *)(a1 + 72);
          if ((_DWORD)v304)
          {
            v305 = 16 * v304;
            do
            {
              *v303 = -4096;
              v303 += 2;
              v305 -= 16;
            }
            while (v305);
          }
        }
        else
        {
          *v5 = 0;
          *(_QWORD *)(a1 + 64) = 0;
          *(_DWORD *)(a1 + 72) = 0;
        }
      }
      goto LABEL_3;
    }
  }
  else
  {
    if (!*(_DWORD *)(a1 + 68))
      goto LABEL_3;
    v294 = *(_DWORD *)(a1 + 72);
    if (v294 > 0x40)
    {
      v297 = 0;
      goto LABEL_390;
    }
  }
  if (v294)
  {
    v295 = (_QWORD *)*v5;
    v296 = 16 * v294;
    do
    {
      *v295 = -4096;
      v295 += 2;
      v296 -= 16;
    }
    while (v296);
  }
  *(_QWORD *)(a1 + 64) = 0;
LABEL_3:
  v7 = 0;
  *(_DWORD *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 360) = 0;
  *(_DWORD *)(a1 + 888) = 0;
  do
  {
    v8 = (unsigned __int8 *)off_1E81706D0[v7];
    if (v8)
      v9 = strlen(off_1E81706D0[v7]);
    else
      v9 = 0;
    v10 = sub_1C4FB7E80(*(uint64_t **)(*(_QWORD *)(a2 + 40) + 112), v8, v9);
    if (v10)
    {
      if (!*(_BYTE *)(v10 + 16))
      {
        for (i = *(_QWORD *)(v10 + 8); i; i = *(_QWORD *)(i + 8))
        {
          v12 = *(_QWORD *)(i + 24);
          if (v12)
            v13 = *(unsigned __int8 *)(v12 + 16) >= 0x1Cu;
          else
            v13 = 0;
          if (v13 && *(_QWORD *)(*(_QWORD *)(v12 + 40) + 56) == a2)
            sub_1C55B9F80(a1 + 352, v12, 0);
        }
      }
    }
    ++v7;
  }
  while (v7 != 9);
  v319 = *(_DWORD *)(a1 + 360);
  if (v319)
  {
    v318 = (_QWORD *)(a1 + 880);
    v14 = *(_DWORD *)(a1 + 360);
LABEL_23:
    v15 = *(_QWORD *)(a1 + 352) + 16 * v14;
    v17 = *(int **)(v15 - 16);
    v16 = *(_QWORD *)(v15 - 8);
    *(_DWORD *)(a1 + 360) = v14 - 1;
    v334 = v17;
    v330 = 0;
    if ((sub_1C4926528((uint64_t)v4, &v334, &v330) & 1) != 0)
      goto LABEL_328;
    if ((v16 & 1) != 0)
    {
      sub_1C4773D54((uint64_t)&v334, (uint64_t)v17, 0, 0, 0);
      if (v17 && *((_BYTE *)v17 + 16) == 83)
      {
        v18 = sub_1C55B9FAC(a1, *(_QWORD *)v17);
        v19 = v17[5];
        if ((v19 & 0x10000000) != 0)
        {
          v20 = ***(_QWORD ***)v17;
          v21 = *(_QWORD *)(v20 + 152);
          v22 = *(unsigned int *)(v20 + 168);
          if ((_DWORD)v22)
          {
            LODWORD(v23) = (v22 - 1) & ((v17 >> 4) ^ (v17 >> 9));
            v24 = (int **)(v21 + 16 * v23);
            v25 = *v24;
            if (*v24 != v17)
            {
              v26 = 1;
              do
              {
                if (v25 == (int *)-4096)
                  goto LABEL_109;
                v27 = v23 + v26++;
                v23 = v27 & (v22 - 1);
                v25 = *(int **)(v21 + 16 * v23);
              }
              while (v25 != v17);
              v24 = (int **)(v21 + 16 * v23);
            }
          }
          else
          {
LABEL_109:
            v24 = (int **)(v21 + 16 * v22);
          }
          v84 = v24[1];
          v87 = *(_QWORD *)v84;
          v86 = (char *)(v84 + 4);
          v85 = v87;
        }
        else
        {
          v85 = 0;
          v86 = &byte_1C871356D;
        }
        v333 = 261;
        v330 = v86;
        v331 = v85;
        v88 = sub_1C4867E94((uint64_t)&v334, v18, v19 & 0x7FFFFFF, (uint64_t)&v330);
LABEL_112:
        v80 = (unsigned __int8 *)v88;
LABEL_113:
        v79 = 1;
        goto LABEL_114;
      }
      if (!sub_1C55BA308(a1, (uint64_t)v17))
        goto LABEL_108;
      v58 = *((unsigned __int8 *)v17 + 16);
      if (v17 && v58 == 59)
      {
        v156 = (llvm::PointerType *)sub_1C55B9FAC(a1, *((_QWORD *)v17 + 8));
        v157 = *(uint64_t ***)v17;
        if ((*((_BYTE *)v17 + 23) & 0x10) != 0)
        {
          v158 = **v157;
          v159 = *(_QWORD *)(v158 + 152);
          v160 = *(unsigned int *)(v158 + 168);
          if ((_DWORD)v160)
          {
            LODWORD(v161) = (v160 - 1) & ((v17 >> 4) ^ (v17 >> 9));
            v162 = (int **)(v159 + 16 * v161);
            v163 = *v162;
            if (*v162 != v17)
            {
              v164 = 1;
              do
              {
                if (v163 == (int *)-4096)
                  goto LABEL_267;
                v165 = v161 + v164++;
                v161 = v165 & (v160 - 1);
                v163 = *(int **)(v159 + 16 * v161);
              }
              while (v163 != v17);
              v162 = (int **)(v159 + 16 * v161);
            }
          }
          else
          {
LABEL_267:
            v162 = (int **)(v159 + 16 * v160);
          }
          v208 = v162[1];
          v211 = *(_QWORD *)v208;
          v210 = (char *)(v208 + 4);
          v209 = v211;
        }
        else
        {
          v209 = 0;
          v210 = &byte_1C871356D;
        }
        v212 = (llvm::Type *)(*((_DWORD *)v157 + 2) >> 8);
        v213 = (llvm::ValueHandleBase *)*((_QWORD *)v17 - 4);
        v333 = 261;
        v330 = v210;
        v331 = v209;
        v88 = (uint64_t)sub_1C627CF40((uint64_t)&v334, v156, v212, v213, (uint64_t)&v330);
        goto LABEL_112;
      }
      if (v17 && v58 == 77)
      {
        v59 = (unsigned __int8 *)sub_1C55BA194(a1, *((_QWORD *)v17 - 4));
        v60 = sub_1C55B9FAC(a1, *(_QWORD *)v17);
        if ((*((_BYTE *)v17 + 23) & 0x10) != 0)
        {
          v61 = ***(_QWORD ***)v17;
          v62 = *(_QWORD *)(v61 + 152);
          v63 = *(unsigned int *)(v61 + 168);
          if ((_DWORD)v63)
          {
            LODWORD(v64) = (v63 - 1) & ((v17 >> 4) ^ (v17 >> 9));
            v65 = (int **)(v62 + 16 * v64);
            v66 = *v65;
            if (*v65 != v17)
            {
              v67 = 1;
              do
              {
                if (v66 == (int *)-4096)
                  goto LABEL_155;
                v68 = v64 + v67++;
                v64 = v68 & (v63 - 1);
                v66 = *(int **)(v62 + 16 * v64);
              }
              while (v66 != v17);
              v65 = (int **)(v62 + 16 * v64);
            }
          }
          else
          {
LABEL_155:
            v65 = (int **)(v62 + 16 * v63);
          }
          v119 = v65[1];
          v122 = *(_QWORD *)v119;
          v121 = (char *)(v119 + 4);
          v120 = v122;
        }
        else
        {
          v120 = 0;
          v121 = &byte_1C871356D;
        }
        v333 = 261;
        v330 = v121;
        v331 = v120;
        v88 = (uint64_t)sub_1C4773E38((uint64_t *)&v334, 49, v59, v60, (uint64_t)&v330);
        goto LABEL_112;
      }
      if (v17 && v58 == 91)
      {
        v69 = v17[18];
        if ((v69 & 1) == 0)
        {
          v70 = *((_QWORD *)v17 - 8);
          if ((*(_BYTE *)(*(_QWORD *)v70 + 32) & 1) == 0)
          {
            v71 = *((_QWORD *)v17 - 4);
            if ((*(_BYTE *)(*(_QWORD *)v71 + 32) & 1) == 0)
            {
              v72 = (_QWORD **)*((_QWORD *)v17 + 8);
              v330 = v332;
              v331 = 0x800000000;
              if (v69 >= 1)
              {
                v73 = 0;
                v74 = 0;
                do
                {
                  v75 = (int *)&v72[v74];
                  v76 = *v75;
                  v77 = v75[1];
                  if (v76 == -1 && v77 == -1)
                  {
                    v82 = HIDWORD(v331);
                    v81 = -1;
                  }
                  else
                  {
                    v79 = 0;
                    v80 = 0;
                    if ((v76 & 1) != 0 || v77 != v76 + 1)
                      goto LABEL_273;
                    v81 = v76 / 2;
                    v82 = HIDWORD(v331);
                  }
                  if (v73 >= v82)
                  {
                    v306 = v70;
                    v307 = v71;
                    v83 = v72;
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v330, (uint64_t)v332, v73 + 1, 4);
                    v72 = v83;
                    v70 = v306;
                    v71 = v307;
                    v73 = v331;
                  }
                  *((_DWORD *)v330 + v73) = v81;
                  v73 = v331 + 1;
                  LODWORD(v331) = v331 + 1;
                  ++v74;
                }
                while (v69 > (int)(v74 * 2));
              }
              v180 = v71;
              v181 = sub_1C55BA194(a1, v70);
              v182 = sub_1C55BA194(a1, v180);
              if ((*((_BYTE *)v17 + 23) & 0x10) != 0)
              {
                v183 = ***(_QWORD ***)v17;
                v184 = *(_QWORD *)(v183 + 152);
                v185 = *(unsigned int *)(v183 + 168);
                if ((_DWORD)v185)
                {
                  LODWORD(v186) = (v185 - 1) & ((v17 >> 4) ^ (v17 >> 9));
                  v187 = (int **)(v184 + 16 * v186);
                  v188 = *v187;
                  if (*v187 != v17)
                  {
                    v189 = 1;
                    do
                    {
                      if (v188 == (int *)-4096)
                        goto LABEL_270;
                      v190 = v186 + v189++;
                      v186 = v190 & (v185 - 1);
                      v188 = *(int **)(v184 + 16 * v186);
                    }
                    while (v188 != v17);
                    v187 = (int **)(v184 + 16 * v186);
                  }
                }
                else
                {
LABEL_270:
                  v187 = (int **)(v184 + 16 * v185);
                }
                v214 = v187[1];
                v217 = *(uint64_t **)v214;
                v216 = (char *)(v214 + 4);
                v215 = v217;
              }
              else
              {
                v215 = 0;
                v216 = &byte_1C871356D;
              }
              v329 = 261;
              v326 = v216;
              v327 = v215;
              v80 = (unsigned __int8 *)sub_1C486AD20((uint64_t)&v334, (uint64_t)v181, (uint64_t)v182, v330, v331, (uint64_t)&v326);
              v79 = 1;
LABEL_273:
              if (v330 != v332)
                free(v330);
LABEL_114:
              if (v334 == v336)
              {
                if (v79)
                {
LABEL_116:
                  v334 = v17;
                  sub_1C4EAD954(v4, &v334)[1] = v80;
                  v89 = *(unsigned int *)(a1 + 88);
                  if (v89 >= *(unsigned int *)(a1 + 92))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod(a1 + 80, a1 + 96, v89 + 1, 8);
                    v89 = *(unsigned int *)(a1 + 88);
                  }
                  *(_QWORD *)(*(_QWORD *)(a1 + 80) + 8 * v89) = v17;
                  ++*(_DWORD *)(a1 + 88);
                  if (v80[16] >= 0x1Cu && v80)
                    llvm::Instruction::copyMetadata((uint64_t)v80, (uint64_t)v17, 0, 0);
                  goto LABEL_322;
                }
              }
              else
              {
                free(v334);
                if (v79)
                  goto LABEL_116;
              }
              sub_1C4773D54((uint64_t)&v334, (uint64_t)v17, 0, 0, 0);
              v218 = v17[5];
              v219 = v218 & 0x7FFFFFF;
              if ((v218 & 0x7FFFFFF) != 0)
              {
                v220 = 0;
                do
                {
                  v221 = v17[5];
                  if ((v221 & 0x40000000) != 0)
                    v222 = (int *)*((_QWORD *)v17 - 1);
                  else
                    v222 = &v17[-8 * (v221 & 0x7FFFFFF)];
                  v223 = *(_QWORD *)&v222[8 * v220];
                  v224 = sub_1C55BA2B8(a1, v223);
                  v225 = (char *)sub_1C55BA194(a1, v223);
                  if (v224)
                  {
                    v226 = *(uint64_t ***)v223;
                    if ((*(_BYTE *)(v223 + 23) & 0x10) != 0)
                    {
                      v227 = **v226;
                      v228 = *(_QWORD *)(v227 + 152);
                      v229 = *(unsigned int *)(v227 + 168);
                      if ((_DWORD)v229)
                      {
                        LODWORD(v230) = (v229 - 1) & ((v223 >> 4) ^ (v223 >> 9));
                        v231 = (uint64_t *)(v228 + 16 * v230);
                        v232 = *v231;
                        if (*v231 != v223)
                        {
                          v233 = 1;
                          do
                          {
                            if (v232 == -4096)
                              goto LABEL_292;
                            v234 = v230 + v233++;
                            v230 = v234 & (v229 - 1);
                            v232 = *(_QWORD *)(v228 + 16 * v230);
                          }
                          while (v232 != v223);
                          v231 = (uint64_t *)(v228 + 16 * v230);
                        }
                      }
                      else
                      {
LABEL_292:
                        v231 = (uint64_t *)(v228 + 16 * v229);
                      }
                      v235 = (_QWORD *)v231[1];
                      v238 = *v235;
                      v237 = (char *)(v235 + 2);
                      v236 = v238;
                    }
                    else
                    {
                      v236 = 0;
                      v237 = &byte_1C871356D;
                    }
                    v333 = 773;
                    v330 = v237;
                    v331 = v236;
                    v332[0] = ".bitcast";
                    v225 = (char *)sub_1C4773E38((uint64_t *)&v334, 49, (unsigned __int8 *)v225, (uint64_t)v226, (uint64_t)&v330);
                  }
                  v239 = v17[5];
                  if ((v239 & 0x40000000) != 0)
                    v240 = (int *)*((_QWORD *)v17 - 1);
                  else
                    v240 = &v17[-8 * (v239 & 0x7FFFFFF)];
                  v241 = &v240[8 * v220];
                  if (*(_QWORD *)v241)
                  {
                    **((_QWORD **)v241 + 2) = *((_QWORD *)v241 + 1);
                    v242 = (_QWORD **)*((_QWORD *)v241 + 1);
                    if (v242)
                      v242[2] = (_QWORD *)*((_QWORD *)v241 + 2);
                  }
                  *(_QWORD *)v241 = v225;
                  if (v225)
                  {
                    v245 = (_QWORD **)*((_QWORD *)v225 + 1);
                    v243 = (int **)(v225 + 8);
                    v244 = v245;
                    v246 = &v240[8 * v220];
                    *((_QWORD *)v246 + 1) = v245;
                    if (v245)
                      v244[2] = v246 + 2;
                    *((_QWORD *)v246 + 2) = v243;
                    *v243 = v241;
                  }
                  ++v220;
                }
                while (v220 != v219);
              }
              if (sub_1C55B9FAC(a1, *(_QWORD *)v17) == *(_QWORD *)v17)
              {
                v330 = v17;
                sub_1C4EAD954(v4, &v330)[1] = v17;
              }
              else
              {
                sub_1C4D8AE2C((uint64_t)&v334, *((_QWORD *)v17 + 5), *((_QWORD *)v17 + 4));
                v247 = sub_1C55B9FAC(a1, *(_QWORD *)v17);
                if ((*((_BYTE *)v17 + 23) & 0x10) != 0)
                {
                  v248 = ***(_QWORD ***)v17;
                  v249 = *(_QWORD *)(v248 + 152);
                  v250 = *(unsigned int *)(v248 + 168);
                  if ((_DWORD)v250)
                  {
                    LODWORD(v251) = (v250 - 1) & ((v17 >> 4) ^ (v17 >> 9));
                    v252 = (int **)(v249 + 16 * v251);
                    v253 = *v252;
                    if (*v252 != v17)
                    {
                      v254 = 1;
                      do
                      {
                        if (v253 == (int *)-4096)
                          goto LABEL_317;
                        v255 = v251 + v254++;
                        v251 = v255 & (v250 - 1);
                        v253 = *(int **)(v249 + 16 * v251);
                      }
                      while (v253 != v17);
                      v252 = (int **)(v249 + 16 * v251);
                    }
                  }
                  else
                  {
LABEL_317:
                    v252 = (int **)(v249 + 16 * v250);
                  }
                  v256 = v252[1];
                  v259 = *(_QWORD *)v256;
                  v258 = (char *)(v256 + 4);
                  v257 = v259;
                }
                else
                {
                  v257 = 0;
                  v258 = &byte_1C871356D;
                }
                v333 = 773;
                v330 = v258;
                v331 = v257;
                v332[0] = ".bitcast";
                v260 = sub_1C4773E38((uint64_t *)&v334, 49, (unsigned __int8 *)v17, v247, (uint64_t)&v330);
                v326 = v17;
                sub_1C4EAD954(v4, &v326)[1] = v260;
              }
              if (v334 != v336)
                free(v334);
LABEL_322:
              for (j = (_QWORD **)*((_QWORD *)v17 + 1); j; j = (_QWORD **)j[1])
              {
                v262 = j[3];
                v334 = v17;
                if (v262 != (_QWORD *)sub_1C4EAD954(v4, &v334)[1])
                {
                  v263 = *(unsigned int *)(a1 + 888);
                  if (v263 >= *(unsigned int *)(a1 + 892))
                  {
                    llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)v318, a1 + 896, v263 + 1, 8);
                    v263 = *(unsigned int *)(a1 + 888);
                  }
                  *(_QWORD *)(*(_QWORD *)(a1 + 880) + 8 * v263) = v262;
                  ++*(_DWORD *)(a1 + 888);
                }
              }
              goto LABEL_328;
            }
          }
        }
LABEL_108:
        v80 = 0;
        v79 = 0;
        goto LABEL_114;
      }
      if (v17 && v58 == 60)
      {
        v90 = sub_1C55B9FAC(a1, *(_QWORD *)v17);
        v91 = sub_1C55BA194(a1, *((_QWORD *)v17 - 4));
        if ((*((_BYTE *)v17 + 23) & 0x10) != 0)
        {
          v92 = ***(_QWORD ***)v17;
          v93 = *(_QWORD *)(v92 + 152);
          v94 = *(unsigned int *)(v92 + 168);
          if ((_DWORD)v94)
          {
            LODWORD(v95) = (v94 - 1) & ((v17 >> 4) ^ (v17 >> 9));
            v96 = (int **)(v93 + 16 * v95);
            v97 = *v96;
            if (*v96 != v17)
            {
              v98 = 1;
              do
              {
                if (v97 == (int *)-4096)
                  goto LABEL_244;
                v99 = v95 + v98++;
                v95 = v99 & (v94 - 1);
                v97 = *(int **)(v93 + 16 * v95);
              }
              while (v97 != v17);
              v96 = (int **)(v93 + 16 * v95);
            }
          }
          else
          {
LABEL_244:
            v96 = (int **)(v93 + 16 * v94);
          }
          v191 = v96[1];
          v194 = *(uint64_t **)v191;
          v193 = (char *)(v191 + 4);
          v192 = v194;
        }
        else
        {
          v192 = 0;
          v193 = &byte_1C871356D;
        }
        v313 = *((_WORD *)v17 + 9);
        v329 = 261;
        v326 = v193;
        v327 = v192;
        v195 = (char *)operator new(0x60uLL);
        v196 = v195;
        v80 = (unsigned __int8 *)(v195 + 32);
        *((_QWORD *)v195 + 2) = 0;
        *((_QWORD *)v195 + 3) = v195 + 32;
        v333 = 257;
        *((_QWORD *)v195 + 4) = v90;
        *((_QWORD *)v195 + 5) = 0;
        *((_WORD *)v195 + 24) = 60;
        *((_DWORD *)v195 + 13) = 1;
        *(_OWORD *)(v195 + 56) = 0u;
        *(_OWORD *)(v195 + 72) = 0u;
        *((_DWORD *)v195 + 22) = 0;
        *(_QWORD *)v195 = v91;
        *((_QWORD *)v195 + 1) = 0;
        if (v91)
        {
          v199 = *((_QWORD *)v91 + 1);
          v198 = (_QWORD *)((char *)v91 + 8);
          v197 = v199;
          *((_QWORD *)v195 + 1) = v199;
          if (v199)
            *(_QWORD *)(v197 + 16) = v195 + 8;
          *((_QWORD *)v195 + 2) = v198;
          *v198 = v195;
        }
        *((_WORD *)v195 + 25) = v313 & 0x7F;
        v195[92] = 1;
        llvm::Value::setName((uint64_t ***)v195 + 4, (uint64_t)&v330);
        (*(void (**)(uint64_t, unsigned __int8 *, void **, uint64_t, uint64_t))(*(_QWORD *)v339 + 16))(v339, v80, &v326, v337, v338);
        if (!(_DWORD)v335)
          goto LABEL_113;
        v200 = (char *)v334;
        v201 = (char *)v334 + 16 * v335;
        v202 = (unsigned __int8 **)(v196 + 80);
        while (1)
        {
          v203 = *(_DWORD *)v200;
          v204 = (unsigned __int8 *)*((_QWORD *)v200 + 1);
          if (v204)
          {
            if (!v203)
            {
              v320[0] = *((_QWORD *)v200 + 1);
              v315 = v202;
              llvm::MetadataTracking::track((uint64_t)v320, v204, 2);
              v202 = v315;
              v205 = *v315;
              goto LABEL_262;
            }
          }
          else
          {
            v205 = *v202;
            if (!*v202 && (v196[55] & 0x20) == 0)
              goto LABEL_259;
            if (!v203)
            {
              v320[0] = 0;
LABEL_262:
              if (v205)
              {
                v317 = v202;
                llvm::MetadataTracking::untrack((uint64_t)v202, v205);
                v202 = v317;
              }
              v207 = (unsigned __int8 *)v320[0];
              *v202 = (unsigned __int8 *)v320[0];
              if (v207)
              {
                v316 = v202;
                llvm::MetadataTracking::retrack((uint64_t)v320, v207, (uint64_t)v202);
                v202 = v316;
              }
              goto LABEL_259;
            }
          }
          v314 = v201;
          v206 = v202;
          llvm::Value::setMetadata((llvm::Value *)v80, *(_DWORD *)v200, (llvm::MDNode *)v204);
          v202 = v206;
          v201 = v314;
LABEL_259:
          v200 += 16;
          if (v200 == v201)
            goto LABEL_113;
        }
      }
      v79 = 0;
      v80 = 0;
      if (!v17 || v58 != 61)
        goto LABEL_114;
      v100 = sub_1C55BA194(a1, *((_QWORD *)v17 - 8));
      v101 = sub_1C55BA194(a1, *((_QWORD *)v17 - 4));
      v308 = *((_WORD *)v17 + 9);
      v102 = (char *)operator new(0x80uLL);
      v103 = v102;
      *((_DWORD *)v102 + 21) = *((_DWORD *)v102 + 21) & 0x38000000 | 2;
      *(_QWORD *)v102 = 0;
      *((_QWORD *)v102 + 2) = 0;
      *((_QWORD *)v102 + 1) = 0;
      *((_QWORD *)v102 + 5) = 0;
      *((_QWORD *)v102 + 6) = 0;
      *((_QWORD *)v102 + 4) = 0;
      v104 = (llvm::UndefValue **)(v102 + 32);
      *((_QWORD *)v102 + 8) = ***(_QWORD ***)v100 + 1576;
      v80 = (unsigned __int8 *)(v102 + 64);
      *((_QWORD *)v102 + 3) = v102 + 64;
      *((_QWORD *)v102 + 7) = v102 + 64;
      *((_QWORD *)v102 + 9) = 0;
      v102[80] = 61;
      v102[81] = 0;
      *((_WORD *)v102 + 41) = 0;
      *((_DWORD *)v102 + 21) = 2;
      *(_OWORD *)(v102 + 88) = 0u;
      *(_OWORD *)(v102 + 104) = 0u;
      *((_DWORD *)v102 + 30) = 0;
      *(_QWORD *)v102 = v100;
      v107 = *((_QWORD *)v100 + 1);
      v106 = (_QWORD *)((char *)v100 + 8);
      v105 = v107;
      *((_QWORD *)v102 + 1) = v107;
      if (v107)
        *(_QWORD *)(v105 + 16) = v102 + 8;
      *((_QWORD *)v102 + 2) = v106;
      *v106 = v102;
      if (*((_QWORD *)v102 + 4))
      {
        **((_QWORD **)v102 + 6) = *((_QWORD *)v102 + 5);
        v264 = *((_QWORD *)v102 + 5);
        if (v264)
          *(_QWORD *)(v264 + 16) = *((_QWORD *)v102 + 6);
      }
      *v104 = v101;
      if (v101)
      {
        v110 = *((_QWORD *)v101 + 1);
        v109 = (llvm::UndefValue ***)((char *)v101 + 8);
        v108 = v110;
        *((_QWORD *)v102 + 5) = v110;
        if (v110)
          *(_QWORD *)(v108 + 16) = v102 + 40;
        *((_QWORD *)v102 + 6) = v109;
        *v109 = v104;
      }
      *((_WORD *)v102 + 41) = v308 & 0x7F;
      v102[124] = 1;
      v333 = 257;
      (*(void (**)(uint64_t, unsigned __int8 *, void **, uint64_t, uint64_t))(*(_QWORD *)v339 + 16))(v339, v80, &v330, v337, v338);
      if (!(_DWORD)v335)
        goto LABEL_113;
      v111 = (char *)v334;
      v112 = (char *)v334 + 16 * v335;
      v113 = (unsigned __int8 **)(v103 + 112);
      while (1)
      {
        v114 = *(_DWORD *)v111;
        v115 = (unsigned __int8 *)*((_QWORD *)v111 + 1);
        if (v115)
        {
          if (!v114)
          {
            v326 = (void *)*((_QWORD *)v111 + 1);
            v310 = v113;
            llvm::MetadataTracking::track((uint64_t)&v326, v115, 2);
            v113 = v310;
            v116 = *v310;
            goto LABEL_151;
          }
        }
        else
        {
          v116 = *v113;
          if (!*v113 && (v103[87] & 0x20) == 0)
            goto LABEL_148;
          if (!v114)
          {
            v326 = 0;
LABEL_151:
            if (v116)
            {
              v312 = v113;
              llvm::MetadataTracking::untrack((uint64_t)v113, v116);
              v113 = v312;
            }
            v118 = (unsigned __int8 *)v326;
            *v113 = (unsigned __int8 *)v326;
            if (v118)
            {
              v311 = v113;
              llvm::MetadataTracking::retrack((uint64_t)&v326, v118, (uint64_t)v113);
              v113 = v311;
            }
            goto LABEL_148;
          }
        }
        v309 = v112;
        v117 = v113;
        llvm::Value::setMetadata((llvm::Value *)v80, *(_DWORD *)v111, (llvm::MDNode *)v115);
        v113 = v117;
        v112 = v309;
LABEL_148:
        v111 += 16;
        if (v111 == v112)
          goto LABEL_113;
      }
    }
LABEL_36:
    if (v17 && *((_BYTE *)v17 + 16) == 90 && *(_BYTE *)(*(_QWORD *)v17 + 8) != 19)
    {
      v29 = v17[5];
      v30 = (v29 & 0x40000000) != 0 ? (int *)*((_QWORD *)v17 - 1) : &v17[-8 * (v29 & 0x7FFFFFF)];
      v31 = (_QWORD *)*((_QWORD *)v30 + 4);
      if (*((_BYTE *)v31 + 16) == 89)
      {
        v123 = *((_DWORD *)v31 + 5);
        v124 = (v123 & 0x40000000) != 0
             ? (llvm::PoisonValue ***)*(v31 - 1)
             : (llvm::PoisonValue ***)&v31[-4 * (v123 & 0x7FFFFFF)];
        v125 = *v124;
        if (*v124)
        {
          v126 = *(unsigned int *)(*(_QWORD *)v17 + 32);
          v334 = v336;
          v335 = 0x10000000000;
          sub_1C4893E04((char *)&v334, v126, -1);
          v330 = v332;
          v331 = 0x1000000000;
          if ((sub_1C4E7B480((uint64_t)v17) & 1) != 0)
          {
LABEL_162:
            sub_1C4773D54((uint64_t)&v326, (uint64_t)v17, 0, 0, 0);
            v127 = v334;
            v128 = v335;
            v321 = 257;
            v130 = llvm::PoisonValue::get(*v125, v129);
            v131 = (unsigned __int8 *)sub_1C486AD20((uint64_t)&v326, (uint64_t)v125, (uint64_t)v130, v127, v128, (uint64_t)v320);
            llvm::Value::doRAUW((llvm::ValueAsMetadata *)v17, (llvm::Value *)v131, (llvm::Value *)1);
            if ((_DWORD)v331)
            {
              v132 = (char *)v330;
              v133 = (char *)v330 + 8 * v331;
              do
              {
                v134 = *(_QWORD *)v132;
                v135 = *(_QWORD *)(a1 + 352);
                v136 = *(unsigned int *)(a1 + 360);
                if ((_DWORD)v136)
                {
                  v137 = (_QWORD *)(v135 + 16 * v136);
                  v138 = 16 * v136;
                  v139 = *(_QWORD **)(a1 + 352);
                  v140 = v139;
                  while (1)
                  {
                    v141 = *v140;
                    v140 += 2;
                    if (v134 == v141)
                      break;
                    v139 = v140;
                    v138 -= 16;
                    if (!v138)
                      goto LABEL_177;
                  }
                  v142 = v138 - 16;
                  if (v142)
                  {
                    v143 = 0;
                    v137 = v139;
                    do
                    {
                      v144 = v139[v143 / 8 + 2];
                      if (v134 != v144)
                      {
                        *v137 = v144;
                        *((_BYTE *)v137 + 8) = v139[v143 / 8 + 3];
                        v137 += 2;
                      }
                      v143 += 16;
                    }
                    while (v142 != v143);
                  }
                  else
                  {
                    v137 = v139;
                  }
                }
                else
                {
                  v137 = *(_QWORD **)(a1 + 352);
                }
LABEL_177:
                *(_DWORD *)(a1 + 360) = ((unint64_t)v137 - v135) >> 4;
                v145 = *(_QWORD **)(a1 + 880);
                v146 = *(unsigned int *)(a1 + 888);
                v147 = v145;
                if ((_DWORD)v146)
                {
                  v148 = 8 * v146;
                  v147 = *(_QWORD **)(a1 + 880);
                  while (*v147 != v134)
                  {
                    ++v147;
                    v148 -= 8;
                    if (!v148)
                    {
                      v147 = &v145[v146];
                      break;
                    }
                  }
                }
                v149 = v147 - v145;
                v150 = v147 + 1;
                if (v149 != v146 && v150 != &v145[v146])
                {
                  v152 = 8 * v146 - 8 * v149 - 8;
                  do
                  {
                    if (*v150 != v134)
                      *v147++ = *v150;
                    ++v150;
                    v152 -= 8;
                  }
                  while (v152);
                  v145 = (_QWORD *)*v318;
                }
                *(_DWORD *)(a1 + 888) = (unint64_t)((char *)v147 - (char *)v145) >> 3;
                llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v134 + 40) + 40, (uint64_t ***)v134);
                v153 = *(_QWORD *)(v134 + 24);
                v154 = *(_QWORD **)(v134 + 32);
                *v154 = v153;
                *(_QWORD *)(v153 + 8) = v154;
                *(_QWORD *)(v134 + 24) = 0;
                *(_QWORD *)(v134 + 32) = 0;
                llvm::Value::deleteValue((llvm::Value *)v134);
                v132 += 8;
              }
              while (v132 != v133);
            }
            if (v326 != v328)
              free(v326);
            v155 = 1;
          }
          else
          {
            v166 = (uint64_t)v17;
            while (1)
            {
              v324 = 0;
              v325 = 0;
              v322 = 0;
              v323 = 0;
              v326 = &v325;
              v327 = &v324;
              v328[0] = &v323;
              if (*(_BYTE *)(v166 + 16) != 90)
                break;
              v167 = *(_DWORD *)(v166 + 20);
              v168 = (v167 & 0x40000000) != 0 ? *(uint64_t **)(v166 - 8) : (uint64_t *)(v166 - 32 * (v167 & 0x7FFFFFF));
              v169 = *v168;
              if (!v169)
                break;
              v325 = v169;
              v170 = *(_DWORD *)(v166 + 20);
              v171 = (v170 & 0x40000000) != 0 ? *(_QWORD *)(v166 - 8) : v166 - 32 * (v170 & 0x7FFFFFF);
              v172 = *(_QWORD *)(v171 + 32);
              v173 = *(_QWORD *)(v172 + 8);
              if (!v173 || *(_QWORD *)(v173 + 8))
                break;
              *v327 = v172;
              v174 = *(_DWORD *)(v166 + 20);
              v175 = (v174 & 0x40000000) != 0 ? *(_QWORD *)(v166 - 8) : v166 - 32 * (v174 & 0x7FFFFFF);
              if (!sub_1C4E7B154(v328, *(_QWORD *)(v175 + 64)))
                break;
              v320[0] = v125;
              v320[1] = &v322;
              if ((sub_1C627D000((uint64_t)v320, v324) & 1) == 0)
                break;
              if ((sub_1C4E7B480(v325) & 1) == 0)
              {
                v176 = *(_QWORD *)(v325 + 8);
                if (!v176 || *(_QWORD *)(v176 + 8))
                  break;
              }
              v177 = v331;
              if (v331 >= (unint64_t)HIDWORD(v331))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v330, (uint64_t)v332, v331 + 1, 8);
                v177 = v331;
              }
              *((_QWORD *)v330 + v177) = v166;
              v178 = (v331 + 1);
              LODWORD(v331) = v178;
              v179 = v324;
              if (v178 >= HIDWORD(v331))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v330, (uint64_t)v332, v178 + 1, 8);
                LODWORD(v178) = v331;
              }
              *((_QWORD *)v330 + v178) = v179;
              LODWORD(v331) = v331 + 1;
              *((_DWORD *)v334 + v323) = v322;
              v166 = v325;
              if (sub_1C4E7B480(v325))
                goto LABEL_162;
            }
            v155 = 0;
            v131 = 0;
          }
          if (v330 != v332)
            free(v330);
          if (v334 != v336)
            free(v334);
          if (v155)
          {
            if (!v131 || (v17 = (int *)v131, v131[16] < 0x1Cu))
            {
              while (1)
              {
LABEL_328:
                v14 = *(_DWORD *)(a1 + 360);
                if (v14)
                  goto LABEL_23;
                v28 = *(unsigned int *)(a1 + 888);
                if (!(_DWORD)v28)
                  break;
                v17 = *(int **)(*(_QWORD *)(a1 + 880) + 8 * v28 - 8);
                *(_DWORD *)(a1 + 888) = v28 - 1;
                v334 = v17;
                v330 = 0;
                if ((sub_1C4926528((uint64_t)v4, &v334, &v330) & 1) == 0)
                  goto LABEL_36;
              }
              v265 = *(_QWORD *)(a1 + 32);
              v266 = *(unsigned int *)(a1 + 48);
              v267 = (uint64_t *)(v265 + 16 * v266);
              if (*(_DWORD *)(a1 + 40))
              {
                v268 = (_QWORD *)(a1 + 80);
                if ((_DWORD)v266)
                {
                  v269 = 16 * v266;
                  v270 = *(uint64_t **)(a1 + 32);
                  do
                  {
                    if ((*v270 | 0x1000) != 0xFFFFFFFFFFFFF000)
                      goto LABEL_343;
                    v270 += 2;
                    v269 -= 16;
                  }
                  while (v269);
                  v270 = (uint64_t *)(v265 + 16 * v266);
                }
                else
                {
                  v270 = *(uint64_t **)(a1 + 32);
                }
              }
              else
              {
                v270 = (uint64_t *)(v265 + 16 * v266);
                v268 = (_QWORD *)(a1 + 80);
              }
LABEL_343:
              v271 = (uint64_t *)(v265 + 16 * v266);
              while (1)
              {
LABEL_344:
                if (v270 == v271)
                {
                  v288 = *(unsigned int *)(a1 + 88);
                  if ((_DWORD)v288)
                  {
                    v289 = *v268 + 8 * v288;
                    do
                    {
                      v290 = *(_QWORD *)(v289 - 8);
                      v289 -= 8;
                      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v290 + 40) + 40, (uint64_t ***)v290);
                      v291 = *(_QWORD *)(v290 + 24);
                      v292 = *(_QWORD **)(v290 + 32);
                      *v292 = v291;
                      *(_QWORD *)(v291 + 8) = v292;
                      *(_QWORD *)(v290 + 24) = 0;
                      *(_QWORD *)(v290 + 32) = 0;
                      llvm::Value::deleteValue((llvm::Value *)v290);
                    }
                    while (v289 != *v268);
                  }
                  return v319 != 0;
                }
                v272 = *v270;
                if (*v270)
                {
                  if (*(_BYTE *)(v272 + 16) == 83)
                    break;
                }
LABEL_370:
                v287 = v270 + 2;
                v270 = v267;
                if (v287 != v267)
                {
                  v270 = v287;
                  while ((*v270 | 0x1000) == 0xFFFFFFFFFFFFF000)
                  {
                    v270 += 2;
                    if (v270 == v267)
                    {
                      v270 = v267;
                      goto LABEL_344;
                    }
                  }
                }
              }
              if (*(_BYTE *)(v270[1] + 16) == 83)
                v273 = (llvm::PHINode *)v270[1];
              else
                v273 = 0;
              v274 = *(_DWORD *)(v272 + 20);
              if ((v274 & 0x40000000) != 0)
              {
                v276 = *(_QWORD *)(v272 - 8);
                v275 = v274 & 0x7FFFFFF;
                if (!v275)
                  goto LABEL_367;
              }
              else
              {
                v275 = v274 & 0x7FFFFFF;
                v276 = v272 - 32 * v275;
                if (!v275)
                {
LABEL_367:
                  if ((_DWORD)v275)
                  {
                    v286 = v275 + 1;
                    do
                    {
                      llvm::PHINode::removeIncomingValue((llvm::PHINode *)v272, v286 - 2, 0);
                      --v286;
                    }
                    while (v286 > 1);
                  }
                  goto LABEL_370;
                }
              }
              v277 = (uint64_t *)(v276 + 32 * *(unsigned int *)(v272 + 60));
              v278 = &v277[v275];
              do
              {
                v279 = *v277;
                v280 = *(_DWORD *)(v272 + 20);
                v281 = v280 & 0x7FFFFFF;
                if ((v280 & 0x7FFFFFF) != 0)
                {
                  v282 = 0;
                  while (1)
                  {
                    v283 = v272 - 32 * v281;
                    if ((v280 & 0x40000000) != 0)
                      v283 = *(_QWORD *)(v272 - 8);
                    if (*(_QWORD *)(v283 + 32 * *(unsigned int *)(v272 + 60) + 8 * v282) == v279)
                      break;
                    if (v281 == ++v282)
                      goto LABEL_361;
                  }
                }
                else
                {
LABEL_361:
                  LODWORD(v282) = -1;
                }
                if ((v280 & 0x40000000) != 0)
                  v284 = *(_QWORD *)(v272 - 8);
                else
                  v284 = v272 - 32 * v281;
                v285 = sub_1C55BA194(a1, *(_QWORD *)(v284 + 32 * v282));
                sub_1C477667C(v273, (uint64_t)v285, v279);
                ++v277;
              }
              while (v277 != v278);
              LODWORD(v275) = *(_DWORD *)(v272 + 20) & 0x7FFFFFF;
              v268 = (_QWORD *)(a1 + 80);
              goto LABEL_367;
            }
          }
        }
      }
    }
    sub_1C55B9F80(a1 + 352, (uint64_t)v17, 1u);
    v32 = v17[5];
    if ((v32 & 0x40000000) != 0)
    {
      v34 = (uint64_t *)*((_QWORD *)v17 - 1);
      v33 = v32 & 0x7FFFFFF;
      if (!v33)
        goto LABEL_328;
    }
    else
    {
      v33 = v32 & 0x7FFFFFF;
      v34 = (uint64_t *)&v17[-8 * v33];
      if (!v33)
        goto LABEL_328;
    }
    v35 = &v34[4 * v33];
    while (1)
    {
      v36 = (uint64_t *)*v34;
      if (*((_BYTE *)v17 + 16) == 83)
      {
        v37 = *(unsigned int *)(a1 + 360);
        if ((_DWORD)v37)
        {
          v38 = *(uint64_t ***)(a1 + 352);
          v39 = 16 * v37;
          while (*v38 != v36)
          {
            v38 += 2;
            v39 -= 16;
            if (!v39)
              goto LABEL_52;
          }
          goto LABEL_70;
        }
      }
LABEL_52:
      v40 = *((unsigned __int8 *)v36 + 16);
      if (v40 < 0x1C || v36 == 0)
        break;
      sub_1C55B9F80(a1 + 352, *v34, 0);
LABEL_70:
      v34 += 4;
      if (v34 == v35)
        goto LABEL_328;
    }
    if (v40 != 21)
      goto LABEL_70;
    v334 = (void *)*v34;
    v330 = 0;
    if ((sub_1C4926528((uint64_t)v4, &v334, &v330) & 1) != 0)
      goto LABEL_70;
    v334 = v36;
    sub_1C4EAD954(v4, &v334)[1] = v36;
    if (sub_1C55B9FAC(a1, *v36) == *v36)
      goto LABEL_70;
    v42 = *(_QWORD **)(v36[3] + 80);
    if (v42)
      v43 = (uint64_t **)(v42 - 3);
    else
      v43 = 0;
    sub_1C4D8ADA0((uint64_t)&v334, v43, (uint64_t)v43[6], 0, 0, 0);
    v44 = sub_1C55B9FAC(a1, *v36);
    if ((*((_BYTE *)v36 + 23) & 0x10) == 0)
    {
      v54 = 0;
      v55 = &byte_1C871356D;
LABEL_74:
      v333 = 773;
      v330 = v55;
      v331 = v54;
      v332[0] = ".bitcast";
      v57 = sub_1C4773E38((uint64_t *)&v334, 49, (unsigned __int8 *)v36, v44, (uint64_t)&v330);
      v326 = v36;
      sub_1C4EAD954(v4, &v326)[1] = v57;
      if (v334 != v336)
        free(v334);
      goto LABEL_70;
    }
    v45 = **(_QWORD **)*v36;
    v46 = *(_QWORD *)(v45 + 152);
    v47 = *(unsigned int *)(v45 + 168);
    if ((_DWORD)v47)
    {
      LODWORD(v48) = (v47 - 1) & ((v36 >> 4) ^ (v36 >> 9));
      v49 = (uint64_t **)(v46 + 16 * v48);
      v50 = *v49;
      if (*v49 == v36)
      {
LABEL_73:
        v53 = v49[1];
        v56 = *v53;
        v55 = (char *)(v53 + 2);
        v54 = v56;
        goto LABEL_74;
      }
      v51 = 1;
      while (v50 != (uint64_t *)-4096)
      {
        v52 = v48 + v51++;
        v48 = v52 & (v47 - 1);
        v50 = *(uint64_t **)(v46 + 16 * v48);
        if (v50 == v36)
        {
          v49 = (uint64_t **)(v46 + 16 * v48);
          goto LABEL_73;
        }
      }
    }
    v49 = (uint64_t **)(v46 + 16 * v47);
    goto LABEL_73;
  }
  return v319 != 0;
}

uint64_t sub_1C55B9F80(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v3;
  uint64_t v4;

  v3 = *(unsigned int *)(a1 + 8);
  if (v3 >= *(_DWORD *)(a1 + 12))
    return sub_1C55BA23C(a1, a2, a3);
  v4 = *(_QWORD *)a1 + 16 * v3;
  *(_QWORD *)v4 = a2;
  *(_BYTE *)(v4 + 8) = a3;
  *(_DWORD *)(a1 + 8) = v3 + 1;
  return a1;
}

uint64_t sub_1C55B9FAC(uint64_t a1, uint64_t a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  unsigned int v7;
  uint64_t v8;
  uint64_t *v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  int v13;
  int v14;
  llvm::PointerType *v15;
  uint64_t v16;
  uint64_t v17;
  unsigned int v18;
  uint64_t **v19;
  llvm::Type *v20;
  int v21;
  uint64_t v22;
  int v23;
  unsigned int v24;
  _QWORD *v25;
  uint64_t v26;
  _QWORD *v27;
  int v28;
  BOOL v29;
  unsigned int v30;
  _QWORD *v32;
  uint64_t v33;

  v33 = a2;
  v5 = a1 + 56;
  v4 = *(_QWORD *)(a1 + 56);
  v6 = *(unsigned int *)(a1 + 72);
  v7 = a2 >> 4;
  if (!(_DWORD)v6)
    goto LABEL_9;
  LODWORD(v8) = (v6 - 1) & (v7 ^ (a2 >> 9));
  v9 = (uint64_t *)(v4 + 16 * v8);
  v10 = *v9;
  if (*v9 != a2)
  {
    v12 = 1;
    while (v10 != -4096)
    {
      v13 = v8 + v12++;
      v8 = v13 & (v6 - 1);
      v10 = *(_QWORD *)(v4 + 16 * v8);
      if (v10 == a2)
      {
        v9 = (uint64_t *)(v4 + 16 * v8);
        goto LABEL_3;
      }
    }
LABEL_9:
    v14 = *(unsigned __int8 *)(a2 + 8);
    if (a2 && v14 == 15)
    {
      v11 = a2;
      if (!*(_QWORD *)(a2 + 24))
        goto LABEL_20;
      v15 = (llvm::PointerType *)sub_1C55B9FAC(a1, **(_QWORD **)(a2 + 16));
      v16 = llvm::PointerType::get(v15, (llvm::Type *)(*(_DWORD *)(a2 + 8) >> 8));
    }
    else
    {
      v11 = a2;
      if (!a2
        || (v11 = a2, (v14 & 0xFE) != 0x12)
        || (v17 = **(_QWORD **)a2, v11 = a2, *(_QWORD *)(a2 + 24) != v17 + 1912)
        || (v18 = *(_DWORD *)(a2 + 32), v11 = a2, (v18 & 1) != 0))
      {
LABEL_20:
        v21 = *(_DWORD *)(a1 + 72);
        if (v21)
        {
          v22 = *(_QWORD *)(a1 + 56);
          v23 = v21 - 1;
          v24 = v23 & (v7 ^ (a2 >> 9));
          v25 = (_QWORD *)(v22 + 16 * v24);
          v26 = *v25;
          if (*v25 == a2)
          {
LABEL_30:
            v25[1] = v11;
            return v11;
          }
          v27 = 0;
          v28 = 1;
          while (v26 != -4096)
          {
            if (v27)
              v29 = 0;
            else
              v29 = v26 == -8192;
            if (v29)
              v27 = v25;
            v30 = v24 + v28++;
            v24 = v30 & v23;
            v25 = (_QWORD *)(v22 + 16 * v24);
            v26 = *v25;
            if (*v25 == a2)
              goto LABEL_30;
          }
          if (v27)
            v32 = v27;
          else
            v32 = v25;
        }
        else
        {
          v32 = 0;
        }
        v25 = sub_1C55BA394(v5, (uint64_t)&v33, &v33, v32);
        *v25 = v33;
        v25[1] = 0;
        goto LABEL_30;
      }
      v19 = (uint64_t **)(v17 + 1936);
      v20 = (llvm::Type *)(v18 >> 1);
      if (v14 == 19)
        llvm::ScalableVectorType::get(v19, v20);
      else
        llvm::FixedVectorType::get((llvm::FixedVectorType *)v19, v20);
    }
    v11 = v16;
    goto LABEL_20;
  }
LABEL_3:
  if (v9 == (uint64_t *)(v4 + 16 * v6))
    goto LABEL_9;
  return v9[1];
}

llvm::UndefValue *sub_1C55BA194(uint64_t a1, uint64_t a2)
{
  uint64_t v2;
  unsigned int v4;
  llvm::Constant *v5;
  uint64_t v8;

  v2 = a2;
  v8 = a2;
  v4 = *(unsigned __int8 *)(a2 + 16);
  if (!a2 || v4 > 0x14)
  {
LABEL_7:
    if (v4 == 21 || v4 >= 0x1C)
      return (llvm::UndefValue *)sub_1C509B72C((uint64_t *)(a1 + 32), &v8)[1];
    return (llvm::UndefValue *)v2;
  }
  if ((sub_1C55BA2B8(a1, a2) & 1) == 0)
  {
    v4 = *(unsigned __int8 *)(v2 + 16);
    goto LABEL_7;
  }
  v5 = (llvm::Constant *)sub_1C55B9FAC(a1, *(_QWORD *)v2);
  if (*(llvm::Constant **)v2 != v5)
    return sub_1C537D3B8((llvm *)0x31, v2, v5, 0);
  return (llvm::UndefValue *)v2;
}

uint64_t sub_1C55BA23C(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6;
  _QWORD *v7;

  v6 = *(unsigned int *)(a1 + 8);
  if (v6 >= *(_DWORD *)(a1 + 12))
  {
    llvm::SmallVectorBase<unsigned int>::grow_pod(a1, a1 + 16, v6 + 1, 16);
    LODWORD(v6) = *(_DWORD *)(a1 + 8);
  }
  v7 = (_QWORD *)(*(_QWORD *)a1 + 16 * v6);
  *v7 = a2;
  v7[1] = a3;
  LODWORD(v7) = *(_DWORD *)(a1 + 8) + 1;
  *(_DWORD *)(a1 + 8) = (_DWORD)v7;
  return *(_QWORD *)a1 + 16 * v7 - 16;
}

uint64_t sub_1C55BA2B8(uint64_t a1, uint64_t a2)
{
  if (a2 && *(_BYTE *)(a2 + 16) == 5)
    return sub_1C55BA308(a1, a2);
  else
    return sub_1C55B9FAC(a1, *(_QWORD *)a2) != *(_QWORD *)a2;
}

uint64_t sub_1C55BA308(uint64_t a1, uint64_t a2)
{
  int v4;
  uint64_t v5;
  _QWORD *v6;
  uint64_t v7;

  v4 = *(_DWORD *)(a2 + 20);
  if ((v4 & 0x40000000) != 0)
  {
    v6 = *(_QWORD **)(a2 - 8);
    v5 = v4 & 0x7FFFFFF;
    if (!v5)
      return sub_1C55B9FAC(a1, *(_QWORD *)a2) != *(_QWORD *)a2;
  }
  else
  {
    v5 = v4 & 0x7FFFFFF;
    v6 = (_QWORD *)(a2 - 32 * v5);
    if (!v5)
      return sub_1C55B9FAC(a1, *(_QWORD *)a2) != *(_QWORD *)a2;
  }
  v7 = 32 * v5;
  while ((sub_1C55BA2B8(a1, *v6) & 1) == 0)
  {
    v6 += 4;
    v7 -= 32;
    if (!v7)
      return sub_1C55B9FAC(a1, *(_QWORD *)a2) != *(_QWORD *)a2;
  }
  return 1;
}

_QWORD *sub_1C55BA394(uint64_t a1, uint64_t a2, _QWORD *a3, _QWORD *a4)
{
  int v6;
  unsigned int v7;
  _QWORD *v9;

  v6 = *(_DWORD *)(a1 + 8);
  v7 = *(_DWORD *)(a1 + 16);
  if (4 * v6 + 4 >= 3 * v7)
  {
    v7 *= 2;
  }
  else if (v7 + ~v6 - *(_DWORD *)(a1 + 12) > v7 >> 3)
  {
    goto LABEL_3;
  }
  sub_1C4ECA920(a1, v7);
  v9 = 0;
  sub_1C4850EC8((uint64_t *)a1, a3, &v9);
  a4 = v9;
LABEL_3:
  ++*(_DWORD *)(a1 + 8);
  if (*a4 != -4096)
    --*(_DWORD *)(a1 + 12);
  return a4;
}

uint64_t sub_1C55BA444(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Extend memory references";
  *(_QWORD *)(v2 + 8) = 24;
  *(_QWORD *)(v2 + 16) = "extend-memory-references";
  *(_QWORD *)(v2 + 24) = 24;
  *(_QWORD *)(v2 + 32) = &unk_1ED807350;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C55BA59C;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C55BA4D0(uint64_t a1, uint64_t a2)
{
  unint64_t v4;
  unint64_t v6;
  _QWORD *v7;
  _QWORD v8[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED807350;
  *(_DWORD *)(a1 + 24) = 4;
  *(_QWORD *)a1 = &off_1E8170728;
  *(_QWORD *)(a1 + 32) = a2;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v6 = qword_1ED830BC0[0];
  v4 = atomic_load(&qword_1ED807358);
  if (v4 != -1)
  {
    v8[0] = sub_1C55BA444;
    v8[1] = &v6;
    v7 = v8;
    std::__call_once(&qword_1ED807358, &v7, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C55BA59C()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C55BA4D0(v0, 0);
}

void sub_1C55BA5CC(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C55BA5F0()
{
  return "Extend Memory References";
}

void sub_1C55BA600(int a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
}

uint64_t sub_1C55BA608(uint64_t a1, _QWORD *a2)
{
  uint64_t v4;
  uint64_t v5;
  uint64_t v6;
  int v7;
  void **v9;
  unint64_t v10;
  uint64_t v11;
  _QWORD *v12;
  _QWORD *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  _QWORD *v17;
  _QWORD *j;
  _QWORD *v19;
  int v20;
  _QWORD *v21;
  unsigned __int8 **v22;
  uint64_t v23;
  unsigned int v24;
  unsigned __int8 *v25;
  unsigned __int8 **v26;
  llvm::Type *v27;
  int v28;
  unsigned int PointerSize;
  unsigned __int8 *v30;
  unsigned __int8 *v31;
  llvm::PointerType *v32;
  uint64_t v33;
  uint64_t v34;
  unsigned __int8 *v35;
  unsigned __int8 *v36;
  uint64_t v37;
  unsigned __int8 ***v38;
  uint64_t v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  unsigned __int8 ***v43;
  uint64_t v44;
  int v45;
  _QWORD *v46;
  _QWORD *v47;
  _QWORD *i;
  unsigned __int8 *v49;
  _QWORD *v50;
  int v51;
  void *__p[2];
  uint64_t v53;
  unsigned __int8 *v54[4];
  __int16 v55;
  char v56;
  __int16 v57;
  __int16 v58;
  _QWORD *v59;
  __int128 v60;
  _QWORD v61[3];
  _BYTE v62[152];
  _QWORD *v63;
  uint64_t v64;
  _QWORD v65[19];
  uint64_t v66;
  char v67;
  __int16 v68;
  __int16 v69;
  _QWORD *v70;
  __int128 v71;
  _QWORD v72[3];
  _BYTE v73[152];
  _QWORD *v74;
  uint64_t v75;
  _QWORD v76[19];
  uint64_t v77;
  void *v78;
  uint64_t v79;
  _WORD v80[8];
  uint64_t *v81;
  __int128 v82;
  _QWORD *v83;
  _QWORD *v84;
  uint64_t v85;
  _QWORD v86[2];
  int v87;
  __int16 v88;
  char v89;
  uint64_t v90;
  uint64_t v91;
  void *v92;
  _QWORD v93[15];
  _QWORD v94[19];
  uint64_t v95;
  char v96;
  __int16 v97;
  __int16 v98;
  uint64_t *v99;
  __int128 v100;
  uint64_t v101;
  _BYTE *v102;
  uint64_t v103;
  _BYTE v104[128];
  uint64_t v105;
  uint64_t v106;
  uint64_t v107;
  _BYTE *v108;
  uint64_t v109;
  _BYTE v110[128];
  uint64_t v111;
  _BYTE *v112;
  uint64_t v113;
  _BYTE v114[32];
  unsigned __int8 v115;
  __int16 v116;
  __int16 v117;
  _QWORD *v118;
  __int128 v119;
  _QWORD v120[3];
  uint64_t v121;
  __int128 __src;
  uint64_t v123;
  _QWORD *v124;
  uint64_t v125;
  _QWORD v126[19];
  _QWORD v127[7];

  v127[4] = *MEMORY[0x1E0C80C00];
  v116 = 0;
  v4 = (uint64_t)(a2 + 34);
  v117 = 0;
  v118 = v120;
  v119 = xmmword_1C6464ED0;
  v120[1] = &v121;
  v120[2] = 0x1000000000;
  __src = 0uLL;
  v123 = 0;
  v124 = v126;
  v125 = 0x800000000;
  v126[16] = 0;
  v126[17] = v127;
  v126[18] = 0x800000000;
  sub_1C48815D8((uint64_t)&v115, (uint64_t)(a2 + 34));
  v5 = *(_QWORD *)(a1 + 32);
  if (!v5)
    goto LABEL_9;
  v6 = HIBYTE(v123) & 0x7F;
  if (v123 < 0)
    v6 = *((_QWORD *)&__src + 1);
  if (!v6)
  {
    v97 = 0;
    v98 = 0;
    v100 = xmmword_1C6464ED0;
    v99 = &v101;
    v102 = v104;
    v103 = 0x1000000000;
    v105 = 0;
    v106 = 0;
    v107 = 0;
    v108 = v110;
    v109 = 0x800000000;
    v111 = 0;
    v112 = v114;
    v113 = 0x800000000;
    sub_1C48815D8((uint64_t)&v96, v5 + 16);
    sub_1C48815D8(v4, (uint64_t)&v96);
    llvm::DataLayout::~DataLayout((llvm::DataLayout *)&v96);
    goto LABEL_9;
  }
  if ((llvm::DataLayout::operator==((unsigned __int8 *)(v5 + 16), &v115) & 1) != 0)
  {
LABEL_9:
    LOBYTE(v7) = 0;
    goto LABEL_10;
  }
  if (SHIBYTE(v123) < 0)
  {
    sub_1C47EBC30(__p, (void *)__src, *((unint64_t *)&__src + 1));
  }
  else
  {
    *(_OWORD *)__p = __src;
    v53 = v123;
  }
  if (v53 >= 0)
    v9 = __p;
  else
    v9 = (void **)__p[0];
  if (v53 >= 0)
    v10 = HIBYTE(v53) & 0x7F;
  else
    v10 = (unint64_t)__p[1];
  v97 = 0;
  v98 = 0;
  v100 = xmmword_1C6464ED0;
  v99 = &v101;
  v102 = v104;
  v103 = 0x1000000000;
  v105 = 0;
  v106 = 0;
  v107 = 0;
  v108 = v110;
  v109 = 0x800000000;
  v111 = 0;
  v112 = v114;
  v113 = 0x800000000;
  llvm::DataLayout::reset((uint64_t)&v96, v9, v10);
  v11 = *(_QWORD *)(a1 + 32) + 16;
  LOWORD(v79) = 0;
  v80[2] = 0;
  v81 = &v83;
  v82 = xmmword_1C6464ED0;
  v84 = v86;
  v85 = 0x1000000000;
  memset(&v93[10], 0, 24);
  v93[13] = v94;
  v93[14] = 0x800000000;
  v94[16] = 0;
  v94[17] = &v95;
  v94[18] = 0x800000000;
  sub_1C48815D8((uint64_t)&v78, v11);
  sub_1C48815D8(v4, (uint64_t)&v78);
  llvm::DataLayout::~DataLayout((llvm::DataLayout *)&v78);
  sub_1C48815D8((uint64_t)&v115, v4);
  v12 = (_QWORD *)*a2;
  v78 = v80;
  v79 = 0x200000000;
  v84 = v12;
  v85 = (uint64_t)&v92;
  v86[0] = v93;
  v86[1] = 0;
  v87 = 0;
  v88 = 512;
  v89 = 7;
  v83 = 0;
  *((_QWORD *)&v82 + 1) = 0;
  v91 = 0;
  v90 = 0;
  v92 = &unk_1E8167888;
  v93[0] = &unk_1E8167A08;
  v13 = (_QWORD *)a2[4];
  v46 = a2 + 3;
  if (v13 == a2 + 3)
  {
    LOBYTE(v7) = 0;
  }
  else
  {
    v7 = 0;
    do
    {
      v14 = v13 - 7;
      v47 = v13;
      if (!v13)
        v14 = 0;
      v15 = (_QWORD *)v14[10];
      for (i = v14 + 9; v15 != i; v15 = (_QWORD *)v50[1])
      {
        v16 = v15 - 3;
        v50 = v15;
        if (!v15)
          v16 = 0;
        v17 = v16 + 5;
        for (j = (_QWORD *)v16[6]; j != v17; j = (_QWORD *)j[1])
        {
          v19 = j - 3;
          if (!j)
            v19 = 0;
          v20 = *((unsigned __int8 *)v19 + 16);
          if (v20 == 61)
            v21 = v19;
          else
            v21 = 0;
          if (j && v20 == 61)
          {
            v68 = 0;
            v69 = 0;
            v70 = v72;
            v71 = xmmword_1C6464ED0;
            v72[1] = v73;
            v72[2] = 0x1000000000;
            memset(&v73[128], 0, 24);
            v74 = v76;
            v75 = 0x800000000;
            v76[16] = 0;
            v76[17] = &v77;
            v76[18] = 0x800000000;
            sub_1C48815D8((uint64_t)&v67, (uint64_t)&v115);
            v57 = 0;
            v58 = 0;
            v59 = v61;
            v60 = xmmword_1C6464ED0;
            v61[1] = v62;
            v61[2] = 0x1000000000;
            memset(&v62[128], 0, 24);
            v63 = v65;
            v64 = 0x800000000;
            v65[16] = 0;
            v65[17] = &v66;
            v65[18] = 0x800000000;
            sub_1C48815D8((uint64_t)&v56, (uint64_t)&v96);
            v22 = (unsigned __int8 **)(v21 - 4);
            v23 = *(_QWORD *)*(v21 - 4);
            v24 = *(_DWORD *)(v23 + 8);
            if ((v24 & 0xFE) == 0x12)
              v24 = *(_DWORD *)(**(_QWORD **)(v23 + 16) + 8);
            if ((v24 & 0xFFFFBF00) == 0x100)
            {
              v26 = (unsigned __int8 **)(v21 - 8);
              v25 = (unsigned __int8 *)*(v21 - 8);
              v27 = *(llvm::Type **)v25;
              v28 = *(_DWORD *)(*(_QWORD *)v25 + 8);
              if (v28 != 15)
                goto LABEL_62;
              if ((v28 & 0xFE) == 0x12)
                v28 = *(_DWORD *)(**((_QWORD **)v27 + 2) + 8);
              if ((v28 & 0xFFFFFF00) == 0x300)
              {
                v51 = v7;
                PointerSize = llvm::DataLayout::getPointerSize((llvm::DataLayout *)&v67, 3u);
                if (PointerSize >= llvm::DataLayout::getPointerSize((llvm::DataLayout *)&v56, 3u))
                {
                  v45 = 0;
                  v7 = v51;
                }
                else
                {
                  *((_QWORD *)&v82 + 1) = v21[5];
                  v83 = (uint64_t)(v21 + 3);
                  v30 = (unsigned __int8 *)v21[6];
                  v54[0] = v30;
                  if (v30)
                  {
                    llvm::MetadataTracking::track((uint64_t)v54, v30, 2);
                    v31 = v54[0];
                  }
                  else
                  {
                    v31 = 0;
                  }
                  sub_1C4774EF4((uint64_t)&v78, 0, (uint64_t)v31);
                  if (v54[0])
                    llvm::MetadataTracking::untrack((uint64_t)v54, v54[0]);
                  v49 = *v22;
                  llvm::DataLayout::getIntPtrType((llvm::DataLayout *)&v56, v27);
                  v33 = (uint64_t)v32;
                  v34 = llvm::PointerType::get(v32, (llvm::Type *)(v24 >> 8));
                  v55 = 257;
                  v35 = sub_1C4773E38((uint64_t *)&v78, 47, v25, v33, (uint64_t)v54);
                  v55 = 257;
                  v36 = sub_1C4773E38((uint64_t *)&v78, 49, v49, v34, (uint64_t)v54);
                  if (*v22)
                  {
                    *(_QWORD *)*(v21 - 2) = *(v21 - 3);
                    v37 = *(v21 - 3);
                    if (v37)
                      *(_QWORD *)(v37 + 16) = *(v21 - 2);
                  }
                  *v22 = v36;
                  v7 = v51;
                  if (v36)
                  {
                    v40 = *((_QWORD *)v36 + 1);
                    v38 = (unsigned __int8 ***)(v36 + 8);
                    v39 = v40;
                    *(v21 - 3) = v40;
                    if (v40)
                      *(_QWORD *)(v39 + 16) = v21 - 3;
                    *(v21 - 2) = v38;
                    *v38 = v22;
                  }
                  if (*v26)
                  {
                    *(_QWORD *)*(v21 - 6) = *(v21 - 7);
                    v41 = *(v21 - 7);
                    if (v41)
                      *(_QWORD *)(v41 + 16) = *(v21 - 6);
                  }
                  *v26 = v35;
                  if (v35)
                  {
                    v44 = *((_QWORD *)v35 + 1);
                    v43 = (unsigned __int8 ***)(v35 + 8);
                    v42 = v44;
                    *(v21 - 7) = v44;
                    if (v44)
                      *(_QWORD *)(v42 + 16) = v21 - 7;
                    *(v21 - 6) = v43;
                    *v43 = v26;
                  }
                  v45 = 1;
                }
              }
              else
              {
LABEL_62:
                v45 = 0;
              }
            }
            else
            {
              v45 = 0;
            }
            v7 |= v45;
            llvm::DataLayout::~DataLayout((llvm::DataLayout *)&v56);
            llvm::DataLayout::~DataLayout((llvm::DataLayout *)&v67);
          }
        }
      }
      v13 = (_QWORD *)v47[1];
    }
    while (v13 != v46);
    if (v78 != v80)
      free(v78);
  }
  llvm::DataLayout::~DataLayout((llvm::DataLayout *)&v96);
  if (SHIBYTE(v53) < 0)
    operator delete(__p[0]);
LABEL_10:
  llvm::DataLayout::~DataLayout((llvm::DataLayout *)&v115);
  return v7 & 1;
}

uint64_t sub_1C55BAD54(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Expand dynamic allocas";
  *(_QWORD *)(v2 + 8) = 22;
  *(_QWORD *)(v2 + 16) = "expand-allocas";
  *(_QWORD *)(v2 + 24) = 14;
  *(_QWORD *)(v2 + 32) = &unk_1ED807360;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C55BAEAC;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C55BADE4(uint64_t a1)
{
  unint64_t v3;
  unint64_t v5;
  _QWORD *v6;
  _QWORD v7[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED807360;
  *(_DWORD *)(a1 + 24) = 2;
  *(_QWORD *)a1 = &off_1E81707C8;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v5 = qword_1ED830BC0[0];
  v3 = atomic_load(&qword_1ED807368);
  if (v3 != -1)
  {
    v7[0] = sub_1C55BAD54;
    v7[1] = &v5;
    v6 = v7;
    std::__call_once(&qword_1ED807368, &v6, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C55BAEAC()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C55BADE4(v0);
}

void sub_1C55BAED8(llvm::Pass *a1)
{
  llvm::Pass::~Pass(a1);
  JUMPOUT(0x1CAA32FC0);
}

const char *sub_1C55BAEFC()
{
  return "Dynamic alloca expander";
}

void sub_1C55BAF0C(int a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
}

uint64_t sub_1C55BAF14(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  int v4;
  uint64_t v5;
  int v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  uint64_t v10;
  uint64_t v11;
  int v12;
  unsigned int v13;
  llvm::Type *v14;
  uint64_t v15;
  int v16;
  uint64_t v17;
  uint64_t **v18;
  uint64_t *v19;
  uint64_t v20;
  uint64_t i;
  uint64_t v22;
  char v23;
  uint64_t v24;
  unsigned int v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  unint64_t v32;
  uint64_t v33;
  int v34;
  uint64_t v35;
  int v36;
  __int128 *p_p;
  _QWORD *v38;
  unsigned int v39;
  uint64_t v40;
  uint64_t v41;
  int v42;
  uint64_t v43;
  uint64_t v44;
  uint64_t v45;
  uint64_t *v46;
  unint64_t v47;
  _QWORD *v48;
  BOOL v49;
  uint64_t v50;
  BOOL v51;
  uint64_t v52;
  uint64_t v53;
  uint64_t v54;
  int v55;
  uint64_t *v56;
  uint64_t *v57;
  int v58;
  uint64_t v59;
  unint64_t v60;
  int v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  int v65;
  unint64_t v66;
  unint64_t v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  BOOL v71;
  llvm::UndefValue *v72;
  unint64_t v73;
  uint64_t v74;
  _QWORD *v75;
  uint64_t k;
  uint64_t v77;
  uint64_t v78;
  uint64_t v79;
  unint64_t v80;
  uint64_t v81;
  int v82;
  uint64_t v83;
  int v84;
  __int128 *v85;
  _QWORD *v86;
  unsigned int v87;
  uint64_t v88;
  uint64_t v89;
  int v90;
  uint64_t v91;
  uint64_t v92;
  uint64_t v93;
  uint64_t *v94;
  unint64_t v95;
  _QWORD *v96;
  BOOL v97;
  uint64_t v98;
  BOOL v99;
  uint64_t v100;
  _QWORD *v101;
  _QWORD *v102;
  uint64_t v103;
  int v104;
  int v105;
  uint64_t *v106;
  uint64_t v107;
  _QWORD *v108;
  _QWORD *v109;
  uint64_t **v110;
  int v111;
  uint64_t v112;
  BOOL v113;
  char v114;
  uint64_t v115;
  unsigned int v116;
  BOOL v117;
  int v118;
  BOOL v119;
  unsigned int v120;
  BOOL v121;
  int v122;
  uint64_t v124;
  const char *v125;
  int v126;
  int v127;
  uint64_t v128;
  unint64_t v129;
  unsigned int v130;
  _QWORD *v131;
  unint64_t v132;
  unint64_t v133;
  _BOOL4 v136;
  _QWORD *v137;
  void *v138;
  unint64_t *v139;
  char *v140;
  unint64_t v141;
  uint64_t v142;
  int v143;
  uint64_t v144;
  unint64_t v145;
  unint64_t v146;
  unint64_t v147;
  int v148;
  uint64_t v149;
  unint64_t v150;
  unint64_t v151;
  unint64_t v152;
  uint64_t v153;
  unsigned int v154;
  unint64_t *v155;
  unint64_t v156;
  char v157;
  llvm::UndefValue *AggregateElement;
  unsigned int *v159;
  unsigned int *v160;
  unsigned int *v161;
  int v162;
  unint64_t v163;
  int v164;
  const char *v165;
  int v166;
  int v167;
  uint64_t v168;
  unint64_t v169;
  const char *v170;
  int v171;
  int v172;
  uint64_t v173;
  unint64_t v174;
  unint64_t v175;
  unint64_t v176;
  unint64_t v177;
  uint8x8_t v178;
  void **v179;
  _QWORD *v180;
  unint64_t v181;
  float v182;
  _BOOL8 v183;
  unint64_t v184;
  unint64_t v185;
  int8x8_t prime;
  void *v187;
  void *v188;
  uint64_t v189;
  _QWORD **v190;
  unint64_t v191;
  uint8x8_t v192;
  unint64_t v193;
  uint8x8_t v194;
  uint64_t v195;
  _QWORD *v196;
  unint64_t v197;
  uint64_t v198;
  _QWORD *v199;
  unint64_t v200;
  unint64_t v201;
  uint8x8_t v202;
  _QWORD **v203;
  _QWORD *j;
  unint64_t v205;
  float v206;
  _BOOL8 v207;
  unint64_t v208;
  unint64_t v209;
  int8x8_t v210;
  void *v211;
  void *v212;
  uint64_t v213;
  _QWORD **v214;
  unint64_t v215;
  uint8x8_t v216;
  unint64_t v217;
  uint8x8_t v218;
  uint64_t v219;
  _QWORD *v220;
  unint64_t v221;
  _QWORD *v222;
  _QWORD *v223;
  unint64_t v224;
  void *v225;
  void *v226;
  int v227;
  const char *v228;
  unsigned int v229;
  unsigned int v230;
  unsigned int v231;
  _QWORD *v232;
  _QWORD *v233;
  void *v234;
  _QWORD *v235;
  _QWORD *v236;
  void *v237;
  _QWORD *v238;
  _QWORD *v239;
  void *v240;
  _QWORD *v241;
  _QWORD *v242;
  void *v243;
  int v244;
  unsigned __int8 *v245;
  unint64_t v246;
  unsigned int v247;
  unint64_t v248;
  const char *v249;
  unsigned int v250;
  unsigned int v251;
  unsigned int v252;
  uint64_t v253;
  unint64_t v254;
  uint64_t v255;
  unint64_t v256;
  unint64_t v257;
  uint8x8_t v258;
  uint64_t v259;
  _QWORD *v260;
  _QWORD *v261;
  unint64_t v262;
  uint64_t v263;
  int v264;
  BOOL v265;
  uint64_t v266;
  const char *v267;
  int v268;
  int v269;
  uint64_t v270;
  unint64_t v271;
  unsigned int v272;
  _BYTE *v273;
  unsigned int v274;
  unint64_t v275;
  unint64_t v276;
  uint64_t v277;
  llvm::ConstantInt **v278;
  uint64_t v279;
  uint64_t v280;
  unint64_t v281;
  _DWORD *v282;
  char *v283;
  llvm::ConstantFP ***v284;
  uint64_t v285;
  unsigned __int8 *v286;
  _QWORD *v287;
  _QWORD *v288;
  _QWORD *v289;
  uint64_t v290;
  llvm::Type *v291;
  llvm::Value **v292;
  char v293;
  unsigned __int8 *v294;
  unsigned __int8 *v295;
  int v296;
  uint64_t **v297;
  uint64_t v298;
  llvm::APFloatBase *v299;
  uint64_t FCmpHelper;
  llvm::Value **v301;
  uint64_t v302;
  llvm::Value **v303;
  char v304;
  unsigned __int8 *v305;
  unsigned __int8 *v306;
  int v307;
  uint64_t *v308;
  uint64_t v309;
  uint64_t v310;
  char v311;
  char v312;
  char *v313;
  char *v314;
  llvm::Value *v315;
  _QWORD *v316;
  uint64_t v317;
  int v318;
  uint64_t **v319;
  uint64_t *v320;
  uint64_t *Select;
  char v322;
  char v323;
  char *v324;
  char *v325;
  unsigned __int8 **v326;
  llvm::Value *v327;
  uint64_t v328;
  _QWORD *v329;
  uint64_t v330;
  uint64_t v331;
  unsigned __int8 ***v332;
  uint64_t v333;
  uint64_t v334;
  uint64_t v335;
  unsigned __int8 **v336;
  int v337;
  unsigned __int8 *v338;
  unsigned __int8 *v339;
  unsigned __int8 *v340;
  uint64_t v341;
  uint64_t v342;
  llvm::Type **v343;
  int v344;
  unsigned __int8 *v345;
  uint64_t v346;
  uint64_t v347;
  char v348;
  char v349;
  char *v350;
  char *v351;
  llvm::Value *v352;
  uint64_t v353;
  _QWORD *v354;
  uint64_t v355;
  unsigned __int8 *v356;
  uint64_t v357;
  llvm::ConstantFP **v358;
  llvm::APFloatBase *v359;
  uint64_t v360;
  llvm::Value **v361;
  uint64_t v362;
  llvm::Value **v363;
  char v364;
  unsigned __int8 *v365;
  unsigned __int8 *v366;
  int v367;
  uint64_t **v368;
  uint64_t v369;
  char v370;
  char v371;
  char *v372;
  char *v373;
  uint64_t *v374;
  uint64_t v375;
  _QWORD *v376;
  uint64_t v377;
  uint64_t v378;
  uint64_t v379;
  unsigned __int8 **v380;
  int v381;
  unsigned __int8 *v382;
  unsigned __int8 *v383;
  unsigned __int8 *v384;
  uint64_t v385;
  _QWORD *v386;
  _QWORD *v387;
  _QWORD *v388;
  uint64_t v389;
  uint64_t v390;
  unsigned __int8 **v391;
  int v392;
  unsigned __int8 *v393;
  uint64_t *v394;
  uint64_t v395;
  uint64_t v396;
  unint64_t *v397;
  unint64_t *v398;
  unint64_t v399;
  uint64_t v400;
  _QWORD *v401;
  unint64_t *v402;
  unint64_t v403;
  uint64_t *v404;
  uint64_t v405;
  uint64_t v406;
  uint64_t v407;
  _QWORD *v408;
  unint64_t v410;
  unint64_t v411;
  int v412;
  unsigned int v413;
  uint64_t *v414;
  uint64_t v415;
  unsigned int v416;
  uint64_t **v417;
  uint64_t **v418;
  int v419;
  _QWORD *v420;
  unint64_t v421;
  uint64_t *v422;
  _QWORD *v423;
  uint64_t v424;
  unsigned int v425;
  llvm::ConstantFP ***v426;
  char *v427;
  int v428;
  char v429;
  llvm::ConstantInt **v430;
  char v431;
  llvm::GetElementPtrInst *v432;
  unint64_t v433;
  uint64_t *v434;
  uint64_t v435;
  uint64_t v436;
  uint64_t v437;
  uint64_t v438;
  int v439;
  unint64_t v440;
  _QWORD v441[4];
  __int16 v442;
  void *v443[2];
  void *v444[2];
  int v445;
  void *v446[2];
  void *v447[2];
  float v448;
  __int128 v449;
  __int128 v450;
  float v451;
  __int128 v452;
  __int128 v453;
  int v454;
  uint64_t *v455;
  _QWORD *v456[2];
  _BYTE *v457;
  void *v458;
  uint64_t v459;
  int v460;
  _BYTE v461[64];
  std::string __dst;
  _BYTE v463[32];
  __int16 v464;
  unsigned __int8 *v465;
  __int128 v466;
  _WORD v467[16];
  uint64_t v468;
  uint64_t v469;
  uint64_t v470;
  void *v471;
  uint64_t v472;
  _BYTE v473[32];
  void *v474;
  uint64_t v475;
  _BYTE v476[256];
  void *v477;
  uint64_t v478;
  _BYTE v479[256];
  void *v480;
  uint64_t v481;
  _BYTE v482[64];
  __int128 v483;
  __int128 __p;
  int v485;
  uint64_t v486;

  v486 = *MEMORY[0x1E0C80C00];
  v3 = *(_QWORD *)(a2 + 40);
  if (*(char *)(v3 + 239) < 0)
    sub_1C47EBC30(&__dst, *(void **)(v3 + 216), *(_QWORD *)(v3 + 224));
  else
    __dst = *(std::string *)(v3 + 216);
  if (!std::string::compare(&__dst, 0, 4uLL, "agx1"))
  {
    v4 = 27;
  }
  else if (!std::string::compare(&__dst, 0, 4uLL, "agx2"))
  {
    v4 = 28;
  }
  else if (!std::string::compare(&__dst, 0, 4uLL, "agx3"))
  {
    v4 = 29;
  }
  else
  {
    v4 = 0;
  }
  v412 = v4;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    operator delete(__dst.__r_.__value_.__l.__data_);
  v5 = *(_QWORD *)(a2 + 40);
  v6 = v412 & 0x1E;
  v7 = *(_QWORD *)(a2 + 80);
  v480 = v482;
  if (v7)
    v8 = v7 - 24;
  else
    v8 = 0;
  if (v6 == 28)
    v9 = 256;
  else
    v9 = 512;
  v416 = v9;
  v481 = 0x800000000;
  v477 = v479;
  v478 = 0x2000000000;
  v457 = v461;
  v458 = v461;
  v459 = 8;
  v460 = 0;
  v11 = *(_QWORD *)(v8 + 40);
  v10 = *(_QWORD *)(v8 + 48);
  if (v6 == 28)
    v12 = 32;
  else
    v12 = 4;
  v413 = v12;
  if (v10 == v11)
    goto LABEL_796;
  v13 = 0;
  v14 = (llvm::Type *)(v5 + 272);
  do
  {
    v15 = v10 - 24;
    if (!v10)
      v15 = 0;
    v16 = *(unsigned __int8 *)(v15 + 16);
    if (v16 == 59)
      v17 = v15;
    else
      v17 = 0;
    if (v10 && v16 == 59 && (*(_DWORD *)(*(_QWORD *)(v17 + 64) + 8) & 0xFE) == 0x10)
    {
      if (v13 >= HIDWORD(v481))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v480, (uint64_t)v482, v13 + 1, 8);
        v13 = v481;
      }
      *((_QWORD *)v480 + v13) = v17;
      v13 = v481 + 1;
      LODWORD(v481) = v481 + 1;
    }
    v10 = *(_QWORD *)(v10 + 8);
  }
  while (v10 != v11);
  if (!v13)
  {
LABEL_796:
    v429 = 0;
    goto LABEL_797;
  }
  v429 = 0;
  v18 = (uint64_t **)v480;
  v417 = (uint64_t **)((char *)v480 + 8 * v13);
  v415 = (uint64_t)v14;
  do
  {
    v19 = *v18;
    v20 = (*v18)[8];
    v474 = v476;
    v475 = 0x2000000000;
    v438 = *(_QWORD *)(*v19 + 24);
    v418 = v18;
    if (!v438)
    {
      *(_QWORD *)&v483 = &__p;
      *((_QWORD *)&v483 + 1) = 0x2000000000;
      v31 = v19[1];
      if (v31)
      {
        v32 = -1;
        v33 = v19[1];
        do
        {
          v33 = *(_QWORD *)(v33 + 8);
          ++v32;
        }
        while (v33);
        v34 = v32 + 1;
        if (v32 >= 0x20)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v483, (uint64_t)&__p, v32 + 1, 8);
          v35 = DWORD2(v483);
          p_p = (__int128 *)v483;
          v36 = DWORD2(v483);
        }
        else
        {
          v35 = 0;
          v36 = 0;
          p_p = &__p;
        }
        v38 = (_QWORD *)p_p + v35;
        do
        {
          *v38++ = *(_QWORD *)(v31 + 24);
          v31 = *(_QWORD *)(v31 + 8);
        }
        while (v31);
      }
      else
      {
        v36 = 0;
        v34 = 0;
      }
      v39 = v36 + v34;
      DWORD2(v483) = v39;
      if (!v39)
      {
LABEL_125:
        if ((__int128 *)v483 != &__p)
          free((void *)v483);
        goto LABEL_127;
      }
      while (1)
      {
        while (1)
        {
          v40 = *(_QWORD *)(v483 + 8 * v39 - 8);
          v41 = v39 - 1;
          DWORD2(v483) = v41;
          v42 = *(unsigned __int8 *)(v40 + 16);
          if (!v40 || v42 != 77)
            break;
          v43 = *(_QWORD *)(v40 + 8);
          if (v43)
          {
            v44 = 0;
            v45 = v43;
            do
            {
              ++v44;
              v45 = *(_QWORD *)(v45 + 8);
            }
            while (v45);
          }
          else
          {
            v44 = 0;
          }
          v47 = v44 + v41;
          if (v47 > HIDWORD(v483))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v483, (uint64_t)&__p, v47, 8);
            v41 = DWORD2(v483);
            if (v43)
            {
LABEL_86:
              v48 = (_QWORD *)(v483 + 8 * v41);
              do
              {
                *v48++ = *(_QWORD *)(v43 + 24);
                v43 = *(_QWORD *)(v43 + 8);
              }
              while (v43);
            }
          }
          else if (v43)
          {
            goto LABEL_86;
          }
          v39 = v41 + v44;
          DWORD2(v483) = v39;
          if (!v39)
            goto LABEL_125;
        }
        if (v40)
        {
          v46 = (uint64_t *)v40;
          if (v42 == 60)
            goto LABEL_110;
        }
        if (v40 && v42 == 61)
          goto LABEL_82;
        if (v40 && v42 == 65)
        {
          v46 = *(uint64_t **)(v40 - 32);
          goto LABEL_110;
        }
        if (v40 && v42 == 64)
        {
LABEL_82:
          v46 = *(uint64_t **)(v40 - 64);
        }
        else
        {
          if (v42 == 62)
            goto LABEL_98;
          if (v42 == 5)
          {
            if (*(_WORD *)(v40 + 18) != 34)
              goto LABEL_108;
LABEL_98:
            v49 = v42 != 62 || v40 == 0;
            v50 = 64;
            if (v49)
              v50 = 24;
            v46 = (uint64_t *)(v40 + v50);
            goto LABEL_110;
          }
          if (v40)
            v51 = v42 == 3;
          else
            v51 = 0;
          if (!v51)
          {
LABEL_108:
            v52 = 0;
            goto LABEL_111;
          }
          v46 = (uint64_t *)(v40 + 24);
        }
LABEL_110:
        v52 = *v46;
LABEL_111:
        if ((sub_1C55BD98C(v52, v19[8], (uint64_t)v14) & 1) != 0
          || *(_BYTE *)(v40 + 16) == 84
          && (v54 = *(_QWORD *)(v40 - 32)) != 0
          && !*(_BYTE *)(v54 + 16)
          && *(_QWORD *)(v54 + 24) == *(_QWORD *)(v40 + 72)
          && (*(_BYTE *)(v54 + 33) & 0x20) != 0
          && (*(_DWORD *)(v54 + 36) - 167) <= 1)
        {
          v53 = v475;
          if (v475 >= (unint64_t)HIDWORD(v475))
          {
            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v474, (uint64_t)v476, v475 + 1, 8);
            v53 = v475;
          }
          *((_QWORD *)v474 + v53) = v40;
          LODWORD(v475) = v475 + 1;
        }
        v39 = DWORD2(v483);
        if (!DWORD2(v483))
          goto LABEL_125;
      }
    }
    for (i = v19[1]; i; i = *(_QWORD *)(i + 8))
    {
      v22 = *(_QWORD *)(i + 24);
      if (v22 && *(_BYTE *)(v22 + 16) == 77)
      {
        v23 = sub_1C55BDAF8(*v19, *(_QWORD *)v22, (uint64_t)v14);
        v24 = *(_QWORD *)(v22 + 8);
        if ((v23 & 1) != 0)
        {
LABEL_42:
          if (v24)
          {
            v25 = v475;
            do
            {
              v26 = *(_QWORD *)(v24 + 24);
              if (v25 >= HIDWORD(v475))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v474, (uint64_t)v476, v25 + 1, 8);
                v25 = v475;
              }
              *((_QWORD *)v474 + v25) = v26;
              v25 = v475 + 1;
              LODWORD(v475) = v475 + 1;
              v24 = *(_QWORD *)(v24 + 8);
            }
            while (v24);
          }
        }
        else
        {
          v28 = v24;
          if (v24)
          {
            while (1)
            {
              v29 = *(_QWORD *)(v28 + 24);
              if (*(_BYTE *)(v29 + 16) != 84)
                break;
              v30 = *(_QWORD *)(v29 - 32);
              if (!v30
                || *(_BYTE *)(v30 + 16)
                || *(_QWORD *)(v30 + 24) != *(_QWORD *)(v29 + 72)
                || (*(_BYTE *)(v30 + 33) & 0x20) == 0
                || (*(_DWORD *)(v30 + 36) - 167) >= 2)
              {
                break;
              }
              v28 = *(_QWORD *)(v28 + 8);
              if (!v28)
                goto LABEL_42;
            }
          }
        }
      }
      else
      {
        v27 = v475;
        if (v475 >= (unint64_t)HIDWORD(v475))
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v474, (uint64_t)v476, v475 + 1, 8);
          v27 = v475;
        }
        *((_QWORD *)v474 + v27) = v22;
        LODWORD(v475) = v475 + 1;
      }
    }
LABEL_127:
    v456[0] = 0;
    v456[1] = 0;
    v455 = (uint64_t *)v456;
    v422 = v19;
    if (!(_DWORD)v475)
    {
      v55 = 0;
      LOBYTE(v59) = 1;
LABEL_250:
      v111 = *(_DWORD *)(v20 + 8);
      if ((*(_DWORD *)(v20 + 8) & 0xFE) == 0x12)
        v112 = v20;
      else
        v112 = 0;
      if (v20)
        v113 = v111 == 17;
      else
        v113 = 0;
      v114 = !v113;
      if (!v113
        || ((v115 = *(_QWORD *)(v20 + 24),
             v116 = *(_DWORD *)(v115 + 8),
             (*(_DWORD *)(v115 + 8) & 0xFE) != 0x12)
          ? (v117 = v116 > 0x15)
          : (v117 = 1),
            (v118 = (1 << v116) & 0x20AC7F, !v117) ? (v119 = v118 == 0) : (v119 = 1),
            v119))
      {
        if (!v112)
          goto LABEL_316;
        v120 = *(_DWORD *)(*(_QWORD *)(v112 + 24) + 8);
        v121 = (v120 & 0xFE) == 0x12 || v120 > 0x15;
        v122 = (1 << v120) & 0x20AC7F;
        if (v121 || v122 == 0)
          goto LABEL_316;
        if ((v114 & 1) != 0)
        {
          if (!v20 || v111 != 18)
          {
            v129 = v411 & 0xFFFFFFFFFFFFFF00;
            goto LABEL_293;
          }
          v124 = *(unsigned int *)(v20 + 32);
          v115 = *(_QWORD *)(v20 + 24);
LABEL_285:
          sub_1C4768AD0((uint64_t)v14, v115);
          v127 = v126;
          if ((_DWORD)v125 == 1)
          LODWORD(v128) = (v127 + 7) >> 3;
          if (v128 <= 2)
            LODWORD(v128) = 2;
          if (v127 == -8)
            v128 = 2;
          else
            v128 = v128;
          v129 = v124 | (v128 << 32);
LABEL_293:
          __p = 0u;
          v483 = 0u;
          v485 = 1065353216;
          sub_1C55BDBEC((float *)&v483, HIDWORD(v129), SHIDWORD(v129));
          v130 = 32;
          v131 = (_QWORD *)__p;
          if (!v55 && *((_QWORD *)&__p + 1) <= 1uLL)
          {
            if (*(_DWORD *)(__p + 16) >= 3u)
              v130 = 16;
            else
              v130 = 32;
          }
          v132 = (HIDWORD(v129) * v129);
          if ((_BYTE)v59)
            v130 = v413;
          v133 = 4 * v413;
          if (!(_BYTE)v59)
            v133 = 128;
          v411 = v129;
          v136 = v130 >= v129 && v133 >= v132 && v416 >= v132;
          if ((_QWORD)__p)
          {
            do
            {
              v137 = (_QWORD *)*v131;
              operator delete(v131);
              v131 = v137;
            }
            while (v137);
          }
          v138 = (void *)v483;
          *(_QWORD *)&v483 = 0;
          if (v138)
            operator delete(v138);
          if (!v136)
            goto LABEL_574;
LABEL_316:
          v452 = 0u;
          v453 = 0u;
          v454 = 1065353216;
          v449 = 0u;
          v450 = 0u;
          v451 = 1.0;
          *(_OWORD *)v446 = 0u;
          *(_OWORD *)v447 = 0u;
          v448 = 1.0;
          *(_OWORD *)v443 = 0u;
          *(_OWORD *)v444 = 0u;
          v445 = 1065353216;
          if (!(_DWORD)v475)
          {
            v227 = 0;
            if (!v20)
              goto LABEL_556;
            goto LABEL_550;
          }
          v433 = 0;
          v436 = v20;
          v139 = (unint64_t *)v474;
          v140 = (char *)v474 + 8 * v475;
          v425 = -1;
          v431 = v59;
          v439 = v55;
          v427 = v140;
LABEL_318:
          v141 = *v139;
          if (!*v139 || *(_BYTE *)(v141 + 16) != 62)
            goto LABEL_526;
          v142 = *(_QWORD *)(v141 + 64);
          v143 = *(_DWORD *)(v141 + 20);
          if ((v143 & 0x40000000) != 0)
          {
            *(_QWORD *)&v483 = *(_QWORD *)(v141 - 8) + 32;
            *((_QWORD *)&v483 + 1) = v142 | 4;
            v145 = *(_QWORD *)(v141 - 8);
            v144 = v143 & 0x7FFFFFF;
          }
          else
          {
            v144 = v143 & 0x7FFFFFF;
            v145 = v141 - 32 * v144;
            *(_QWORD *)&v483 = v145 + 32;
            *((_QWORD *)&v483 + 1) = v142 | 4;
          }
          v419 &= 0xFFFFFF00;
          *(_QWORD *)&v466 = 0;
          if ((_DWORD)v144 == 1)
            goto LABEL_526;
          v146 = 0;
          v147 = 0;
          v148 = 0;
          v149 = 0;
          v150 = v145 + 32 * v144;
          v151 = v141 + 32;
          v152 = v150;
          while (1)
          {
            v153 = *(_QWORD *)(v151 - 32 * v144);
            v154 = *(unsigned __int8 *)(v153 + 16);
            if (v154 > 0x14)
            {
              if (v148)
                goto LABEL_546;
              if (v152 == v150 || (v147 = v149 & 0xFFFFFFFFFFFFFFF8, (v149 & 4) != 0) && v147)
              {
                v157 = 0;
              }
              else
              {
                AggregateElement = *(llvm::UndefValue **)v152;
                if (!*(_QWORD *)v152 || *((_BYTE *)AggregateElement + 16) != 16)
                  AggregateElement = llvm::Constant::getAggregateElement(AggregateElement, 0);
                v157 = 0;
                v161 = (unsigned int *)*((_QWORD *)AggregateElement + 3);
                v159 = (unsigned int *)((char *)AggregateElement + 24);
                v160 = v161;
                if (v159[2] < 0x41)
                  v160 = v159;
                v147 = *(_QWORD *)(*(_QWORD *)(v147 + 16) + 8 * *v160);
              }
              v148 = 1;
              v419 = v146;
              goto LABEL_347;
            }
            if (v154 == 16)
            {
              v155 = (unint64_t *)(v153 + 24);
              if (*(_DWORD *)(v153 + 32) >= 0x41u)
                v155 = (unint64_t *)*v155;
              if (!v148)
              {
                v156 = *v155;
                if (v156 > 0x3E)
                  goto LABEL_546;
                goto LABEL_346;
              }
            }
            else if (!v148)
            {
              v156 = 0;
LABEL_346:
              v148 = 0;
              *(_QWORD *)&v466 = v156 + ((_QWORD)v466 << 6) + 1;
              v157 = 1;
              goto LABEL_347;
            }
            v157 = 0;
            v148 = 1;
LABEL_347:
            ++v146;
            v149 = *((_QWORD *)&v483 + 1);
            v152 = v483;
            sub_1C4774E38((uint64_t)&v483);
            LODWORD(v144) = *(_DWORD *)(v141 + 20) & 0x7FFFFFF;
            v151 += 32;
            if (v146 >= (v144 - 1))
            {
              v55 = v439;
              if ((v157 & 1) != 0)
              {
                v14 = (llvm::Type *)v415;
                LOBYTE(v59) = v431;
                goto LABEL_525;
              }
              if ((v419 - 12) < 0xFFFFFFF5
                || !v147
                || (*(_DWORD *)(v147 + 8) & 0xFE) != 0x12 && *(_DWORD *)(v147 + 8) != 17)
              {
LABEL_546:
                v14 = (llvm::Type *)v415;
                v20 = v436;
                goto LABEL_547;
              }
              if (sub_1C55BDFB8(&v452, (unint64_t *)&v466))
              {
                v14 = (llvm::Type *)v415;
              }
              else
              {
                v162 = *(unsigned __int8 *)(v147 + 8);
                v14 = (llvm::Type *)v415;
                if (v162 == 18)
                {
                  v152 = *(unsigned int *)(v147 + 32);
                  sub_1C4768AD0(v415, *(_QWORD *)(v147 + 24));
                  v172 = v171;
                  v163 = v433;
                  v164 = v425;
                  if ((_DWORD)v170 == 1)
                  LODWORD(v173) = (v172 + 7) >> 3;
                  if (v173 <= 2)
                    LODWORD(v173) = 2;
                  if (v172 == -8)
                    v173 = 2;
                  else
                    v173 = v173;
                  v169 = v152 | (v173 << 32);
                }
                else
                {
                  v163 = v433;
                  v164 = v425;
                  if (v162 == 17)
                  {
                    v152 = *(unsigned int *)(v147 + 32);
                    sub_1C4768AD0(v415, *(_QWORD *)(v147 + 24));
                    v167 = v166;
                    if ((_DWORD)v165 == 1)
                    LODWORD(v168) = (v167 + 7) >> 3;
                    if (v168 <= 2)
                      LODWORD(v168) = 2;
                    if (v167 == -8)
                      v168 = 2;
                    else
                      v168 = v168;
                    v169 = v152 | (v168 << 32);
                  }
                  else
                  {
                    v169 = v410 & 0xFFFFFFFFFFFFFF00;
                    v152 = v410 & 0xFFFFFFFFFFFFFF00;
                  }
                }
                if (v164 <= (int)v152)
                  v164 = v152;
                v425 = v164;
                sub_1C55BDBEC((float *)v443, HIDWORD(v169), SHIDWORD(v169));
                v410 = v169;
                v433 = (HIDWORD(v169) * v169) + v163;
                sub_1C55BE078((uint64_t)&v452, (unint64_t *)&v466, &v466);
              }
              LOBYTE(v59) = v431;
              v174 = 0x9DDFEA08EB382D69 * (((8 * v141) + 8) ^ HIDWORD(v141));
              v175 = 0x9DDFEA08EB382D69 * (HIDWORD(v141) ^ (v174 >> 47) ^ v174);
              v176 = 0x9DDFEA08EB382D69 * (v175 ^ (v175 >> 47));
              v177 = *((_QWORD *)&v449 + 1);
              if (*((_QWORD *)&v449 + 1))
              {
                v178 = (uint8x8_t)vcnt_s8(*(int8x8_t *)((char *)&v449 + 8));
                v178.i16[0] = vaddlv_u8(v178);
                if (v178.u32[0] > 1uLL)
                {
                  v152 = 0x9DDFEA08EB382D69 * (v175 ^ (v175 >> 47));
                  if (v176 >= *((_QWORD *)&v449 + 1))
                    v152 = v176 % *((_QWORD *)&v449 + 1);
                }
                else
                {
                  v152 = (*((_QWORD *)&v449 + 1) - 1) & v176;
                }
                v179 = *(void ***)(v449 + 8 * v152);
                if (v179)
                {
                  v180 = *v179;
                  if (*v179)
                  {
                    do
                    {
                      v181 = v180[1];
                      if (v181 == v176)
                      {
                        if (v180[2] == v141)
                          goto LABEL_452;
                      }
                      else
                      {
                        if (v178.u32[0] > 1uLL)
                        {
                          if (v181 >= *((_QWORD *)&v449 + 1))
                            v181 %= *((_QWORD *)&v449 + 1);
                        }
                        else
                        {
                          v181 &= *((_QWORD *)&v449 + 1) - 1;
                        }
                        if (v181 != v152)
                          break;
                      }
                      v180 = (_QWORD *)*v180;
                    }
                    while (v180);
                  }
                }
              }
              v180 = operator new(0x20uLL);
              *v180 = 0;
              v180[1] = v176;
              v180[2] = v141;
              *((_DWORD *)v180 + 6) = 0;
              v182 = (float)(unint64_t)(*((_QWORD *)&v450 + 1) + 1);
              if (!v177 || (float)(v451 * (float)v177) < v182)
              {
                v183 = (v177 & (v177 - 1)) != 0;
                if (v177 < 3)
                  v183 = 1;
                v184 = v183 | (2 * v177);
                v185 = vcvtps_u32_f32(v182 / v451);
                if (v184 <= v185)
                  prime = (int8x8_t)v185;
                else
                  prime = (int8x8_t)v184;
                if (*(_QWORD *)&prime == 1)
                {
                  prime = (int8x8_t)2;
                }
                else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
                {
                  prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
                  v177 = *((_QWORD *)&v449 + 1);
                }
                if (*(_QWORD *)&prime <= v177)
                {
                  if (*(_QWORD *)&prime < v177)
                  {
                    v193 = vcvtps_u32_f32((float)*((unint64_t *)&v450 + 1) / v451);
                    if (v177 < 3
                      || (v194 = (uint8x8_t)vcnt_s8((int8x8_t)v177), v194.i16[0] = vaddlv_u8(v194), v194.u32[0] > 1uLL))
                    {
                      v193 = std::__next_prime(v193);
                    }
                    else
                    {
                      v195 = 1 << -(char)__clz(v193 - 1);
                      if (v193 >= 2)
                        v193 = v195;
                    }
                    if (*(_QWORD *)&prime <= v193)
                      prime = (int8x8_t)v193;
                    if (*(_QWORD *)&prime >= v177)
                    {
                      v177 = *((_QWORD *)&v449 + 1);
                    }
                    else
                    {
                      if (prime)
                        goto LABEL_408;
                      v225 = (void *)v449;
                      *(_QWORD *)&v449 = 0;
                      if (v225)
                        operator delete(v225);
                      v177 = 0;
                      *((_QWORD *)&v449 + 1) = 0;
                    }
                  }
                }
                else
                {
LABEL_408:
                  if (*(_QWORD *)&prime >> 61)
                    goto LABEL_822;
                  v187 = operator new(8 * *(_QWORD *)&prime);
                  v188 = (void *)v449;
                  *(_QWORD *)&v449 = v187;
                  if (v188)
                    operator delete(v188);
                  v189 = 0;
                  *((int8x8_t *)&v449 + 1) = prime;
                  do
                    *(_QWORD *)(v449 + 8 * v189++) = 0;
                  while (*(_QWORD *)&prime != v189);
                  v190 = (_QWORD **)v450;
                  if ((_QWORD)v450)
                  {
                    v191 = *(_QWORD *)(v450 + 8);
                    v192 = (uint8x8_t)vcnt_s8(prime);
                    v192.i16[0] = vaddlv_u8(v192);
                    if (v192.u32[0] > 1uLL)
                    {
                      if (v191 >= *(_QWORD *)&prime)
                        v191 %= *(_QWORD *)&prime;
                    }
                    else
                    {
                      v191 &= *(_QWORD *)&prime - 1;
                    }
                    *(_QWORD *)(v449 + 8 * v191) = &v450;
                    v196 = *v190;
                    if (*v190)
                    {
                      while (2)
                      {
                        v197 = v196[1];
                        if (v192.u32[0] > 1uLL)
                        {
                          if (v197 >= *(_QWORD *)&prime)
                            v197 %= *(_QWORD *)&prime;
                        }
                        else
                        {
                          v197 &= *(_QWORD *)&prime - 1;
                        }
                        if (v197 == v191)
                        {
LABEL_432:
                          v197 = v191;
                        }
                        else
                        {
                          if (*(_QWORD *)(v449 + 8 * v197))
                          {
                            *v190 = (_QWORD *)*v196;
                            *v196 = **(_QWORD **)(v449 + 8 * v197);
                            **(_QWORD **)(v449 + 8 * v197) = v196;
                            v196 = v190;
                            goto LABEL_432;
                          }
                          *(_QWORD *)(v449 + 8 * v197) = v190;
                        }
                        v190 = (_QWORD **)v196;
                        v196 = (_QWORD *)*v196;
                        v191 = v197;
                        if (!v196)
                          break;
                        continue;
                      }
                    }
                  }
                  v177 = (unint64_t)prime;
                }
                if ((v177 & (v177 - 1)) != 0)
                {
                  if (v176 >= v177)
                    v152 = v176 % v177;
                  else
                    v152 = v176;
                }
                else
                {
                  v152 = (v177 - 1) & v176;
                }
              }
              v198 = v449;
              v199 = *(_QWORD **)(v449 + 8 * v152);
              if (v199)
              {
                *v180 = *v199;
                goto LABEL_450;
              }
              *v180 = v450;
              *(_QWORD *)&v450 = v180;
              *(_QWORD *)(v198 + 8 * v152) = &v450;
              if (*v180)
              {
                v200 = *(_QWORD *)(*v180 + 8);
                if ((v177 & (v177 - 1)) != 0)
                {
                  if (v200 >= v177)
                    v200 %= v177;
                }
                else
                {
                  v200 &= v177 - 1;
                }
                v199 = (_QWORD *)(v449 + 8 * v200);
LABEL_450:
                *v199 = v180;
              }
              ++*((_QWORD *)&v450 + 1);
LABEL_452:
              *((_DWORD *)v180 + 6) = v419;
              v201 = (unint64_t)v446[1];
              if (v446[1])
              {
                v202 = (uint8x8_t)vcnt_s8((int8x8_t)v446[1]);
                v202.i16[0] = vaddlv_u8(v202);
                if (v202.u32[0] > 1uLL)
                {
                  v152 = v176;
                  if ((void *)v176 >= v446[1])
                    v152 = v176 % (unint64_t)v446[1];
                }
                else
                {
                  v152 = ((unint64_t)v446[1] - 1) & v176;
                }
                v203 = (_QWORD **)*((_QWORD *)v446[0] + v152);
                if (v203)
                {
                  for (j = *v203; j; j = (_QWORD *)*j)
                  {
                    v205 = j[1];
                    if (v205 == v176)
                    {
                      if (j[2] == v141)
                        goto LABEL_524;
                    }
                    else
                    {
                      if (v202.u32[0] > 1uLL)
                      {
                        if ((void *)v205 >= v446[1])
                          v205 %= (unint64_t)v446[1];
                      }
                      else
                      {
                        v205 &= (unint64_t)v446[1] - 1;
                      }
                      if (v205 != v152)
                        break;
                    }
                  }
                }
              }
              j = operator new(0x20uLL);
              *j = 0;
              j[1] = v176;
              j[2] = v141;
              j[3] = 0;
              v206 = (float)((unint64_t)v447[1] + 1);
              if (!v201 || (float)(v448 * (float)v201) < v206)
              {
                v207 = (v201 & (v201 - 1)) != 0;
                if (v201 < 3)
                  v207 = 1;
                v208 = v207 | (2 * v201);
                v209 = vcvtps_u32_f32(v206 / v448);
                if (v208 <= v209)
                  v210 = (int8x8_t)v209;
                else
                  v210 = (int8x8_t)v208;
                if (*(_QWORD *)&v210 == 1)
                {
                  v210 = (int8x8_t)2;
                }
                else if ((*(_QWORD *)&v210 & (*(_QWORD *)&v210 - 1)) != 0)
                {
                  v210 = (int8x8_t)std::__next_prime(*(_QWORD *)&v210);
                  v201 = (unint64_t)v446[1];
                }
                if (*(_QWORD *)&v210 <= v201)
                {
                  if (*(_QWORD *)&v210 < v201)
                  {
                    v217 = vcvtps_u32_f32((float)(unint64_t)v447[1] / v448);
                    if (v201 < 3
                      || (v218 = (uint8x8_t)vcnt_s8((int8x8_t)v201), v218.i16[0] = vaddlv_u8(v218), v218.u32[0] > 1uLL))
                    {
                      v217 = std::__next_prime(v217);
                    }
                    else
                    {
                      v219 = 1 << -(char)__clz(v217 - 1);
                      if (v217 >= 2)
                        v217 = v219;
                    }
                    if (*(_QWORD *)&v210 <= v217)
                      v210 = (int8x8_t)v217;
                    if (*(_QWORD *)&v210 >= v201)
                    {
                      v201 = (unint64_t)v446[1];
                    }
                    else
                    {
                      if (v210)
                        goto LABEL_480;
                      v226 = v446[0];
                      v446[0] = 0;
                      if (v226)
                        operator delete(v226);
                      v201 = 0;
                      v446[1] = 0;
                    }
                  }
                }
                else
                {
LABEL_480:
                  if (*(_QWORD *)&v210 >> 61)
LABEL_822:
                    sub_1C4764EE4();
                  v211 = operator new(8 * *(_QWORD *)&v210);
                  v212 = v446[0];
                  v446[0] = v211;
                  if (v212)
                    operator delete(v212);
                  v213 = 0;
                  v446[1] = (void *)v210;
                  do
                    *((_QWORD *)v446[0] + v213++) = 0;
                  while (*(_QWORD *)&v210 != v213);
                  v214 = (_QWORD **)v447[0];
                  if (v447[0])
                  {
                    v215 = *((_QWORD *)v447[0] + 1);
                    v216 = (uint8x8_t)vcnt_s8(v210);
                    v216.i16[0] = vaddlv_u8(v216);
                    if (v216.u32[0] > 1uLL)
                    {
                      if (v215 >= *(_QWORD *)&v210)
                        v215 %= *(_QWORD *)&v210;
                    }
                    else
                    {
                      v215 &= *(_QWORD *)&v210 - 1;
                    }
                    *((_QWORD *)v446[0] + v215) = v447;
                    v220 = *v214;
                    if (*v214)
                    {
                      while (2)
                      {
                        v221 = v220[1];
                        if (v216.u32[0] > 1uLL)
                        {
                          if (v221 >= *(_QWORD *)&v210)
                            v221 %= *(_QWORD *)&v210;
                        }
                        else
                        {
                          v221 &= *(_QWORD *)&v210 - 1;
                        }
                        if (v221 == v215)
                        {
LABEL_504:
                          v221 = v215;
                        }
                        else
                        {
                          if (*((_QWORD *)v446[0] + v221))
                          {
                            *v214 = (_QWORD *)*v220;
                            *v220 = **((_QWORD **)v446[0] + v221);
                            **((_QWORD **)v446[0] + v221) = v220;
                            v220 = v214;
                            goto LABEL_504;
                          }
                          *((_QWORD *)v446[0] + v221) = v214;
                        }
                        v214 = (_QWORD **)v220;
                        v220 = (_QWORD *)*v220;
                        v215 = v221;
                        if (!v220)
                          break;
                        continue;
                      }
                    }
                  }
                  v201 = (unint64_t)v210;
                }
                if ((v201 & (v201 - 1)) != 0)
                {
                  if (v176 >= v201)
                    v152 = v176 % v201;
                  else
                    v152 = v176;
                }
                else
                {
                  v152 = (v201 - 1) & v176;
                }
              }
              v222 = v446[0];
              v223 = (_QWORD *)*((_QWORD *)v446[0] + v152);
              if (v223)
              {
                *j = *v223;
                goto LABEL_522;
              }
              *j = v447[0];
              v447[0] = j;
              v222[v152] = v447;
              if (*j)
              {
                v224 = *(_QWORD *)(*j + 8);
                if ((v201 & (v201 - 1)) != 0)
                {
                  if (v224 >= v201)
                    v224 %= v201;
                }
                else
                {
                  v224 &= v201 - 1;
                }
                v223 = (char *)v446[0] + 8 * v224;
LABEL_522:
                *v223 = j;
              }
              ++v447[1];
LABEL_524:
              j[3] = v147;
              v55 = v439;
LABEL_525:
              v140 = v427;
LABEL_526:
              if (++v139 == (unint64_t *)v140)
              {
                v20 = v436;
                if (*((_QWORD *)&v450 + 1))
                {
                  v244 = 32;
                  if (v55)
                  {
                    v245 = (unsigned __int8 *)v422;
                    v246 = v433;
                  }
                  else
                  {
                    v245 = (unsigned __int8 *)v422;
                    v246 = v433;
                    if (v444[1] <= (void *)1)
                    {
                      if (*((_DWORD *)v444[0] + 4) >= 3u)
                        v244 = 16;
                      else
                        v244 = 32;
                    }
                  }
                  v247 = v413;
                  if (!(_BYTE)v59)
                    v247 = v244;
                  v248 = 4 * v413;
                  if (!(_BYTE)v59)
                    v248 = 128;
                  if (v247 >= v425 && v248 >= v246 && v246 <= v416)
                  {
                    if (v436 && *(_BYTE *)(v436 + 8) == 16)
                    {
                      sub_1C4768AD0((uint64_t)v14, v436);
                      v251 = v250;
                      if ((_DWORD)v249 == 1)
                      v252 = v416 - (v251 >> 3);
                      if (v416 < v251 >> 3)
                        v252 = 0;
                    }
                    else
                    {
                      v252 = v416 - v246;
                    }
                    v416 = v252;
                    v253 = v450;
                    if ((_QWORD)v450)
                    {
                      do
                      {
                        if (!v446[1])
                          goto LABEL_823;
                        v254 = *(_QWORD *)(v253 + 16);
                        v440 = v254;
                        v255 = ((8 * v254) + 8) ^ HIDWORD(v254);
                        v256 = 0x9DDFEA08EB382D69
                             * (HIDWORD(v254) ^ ((0x9DDFEA08EB382D69 * v255) >> 47) ^ (0x9DDFEA08EB382D69 * v255));
                        v257 = 0x9DDFEA08EB382D69 * (v256 ^ (v256 >> 47));
                        v258 = (uint8x8_t)vcnt_s8((int8x8_t)v446[1]);
                        v258.i16[0] = vaddlv_u8(v258);
                        if (v258.u32[0] > 1uLL)
                          v259 = (void *)v257 < v446[1] ? v257 : v257 % (unint64_t)v446[1];
                        else
                          v259 = v257 & ((unint64_t)v446[1] - 1);
                        v260 = (_QWORD *)*((_QWORD *)v446[0] + v259);
                        if (!v260 || (v261 = (_QWORD *)*v260) == 0)
LABEL_823:
                          abort();
                        v437 = *(unsigned int *)(v253 + 24);
                        while (1)
                        {
                          v262 = v261[1];
                          if (v262 == v257)
                            break;
                          if (v258.u32[0] > 1uLL)
                          {
                            if ((void *)v262 >= v446[1])
                              v262 %= (unint64_t)v446[1];
                          }
                          else
                          {
                            v262 &= (unint64_t)v446[1] - 1;
                          }
                          if (v262 != v259)
                            goto LABEL_823;
LABEL_612:
                          v261 = (_QWORD *)*v261;
                          if (!v261)
                            goto LABEL_823;
                        }
                        if (v261[2] != v440)
                          goto LABEL_612;
                        v263 = v261[3];
                        v264 = *(unsigned __int8 *)(v263 + 8);
                        if (v263)
                          v265 = v264 == 17;
                        else
                          v265 = 0;
                        v414 = (uint64_t *)v253;
                        if (v265 || v263 && v264 == 18)
                        {
                          v266 = *(unsigned int *)(v263 + 32);
                          sub_1C4768AD0((uint64_t)v14, *(_QWORD *)(v263 + 24));
                          v269 = v268;
                          if ((_DWORD)v267 == 1)
                          LODWORD(v270) = (v269 + 7) >> 3;
                          if (v270 <= 2)
                            LODWORD(v270) = 2;
                          if (v269 == -8)
                            v270 = 2;
                          else
                            v270 = v270;
                          v271 = v266 | (v270 << 32);
                        }
                        else
                        {
                          v271 = v421 & 0xFFFFFFFFFFFFFF00;
                        }
                        v421 = v271;
                        v471 = v473;
                        v472 = 0x400000000;
                        v272 = *(_DWORD *)(v440 + 20) & 0x7FFFFFF;
                        v273 = v473;
                        if (v272 != 1)
                        {
                          v274 = 0;
                          v275 = 0;
                          v276 = v440 + 32;
                          do
                          {
                            v277 = *(_QWORD *)(v276 - 32 * v272);
                            if (v274 >= HIDWORD(v472))
                            {
                              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v471, (uint64_t)v473, v274 + 1, 8);
                              v274 = v472;
                            }
                            ++v275;
                            *((_QWORD *)v471 + v274) = v277;
                            v274 = v472 + 1;
                            LODWORD(v472) = v472 + 1;
                            v272 = *(_DWORD *)(v440 + 20) & 0x7FFFFFF;
                            v276 += 32;
                          }
                          while (v275 < v272 - 1);
                          v273 = v471;
                        }
                        v278 = *(llvm::ConstantInt ***)&v273[8 * v437];
                        if ((v412 & 0x1E) == 0x1C || v412 == 27 && (HIDWORD(v421) < 3 || v421 >= 5))
                        {
                          v279 = **(_QWORD **)*v278;
                          v280 = *(_QWORD *)&v273[8 * v437];
                          v281 = v440;
                          if (*((_DWORD *)*v278 + 2) >> 8 >= 0x11u)
                          {
                            v282 = operator new(0x60uLL);
                            v282[13] = v282[13] & 0x38000000 | 1;
                            v280 = (uint64_t)(v282 + 8);
                            *(_QWORD *)v282 = 0;
                            *((_QWORD *)v282 + 1) = 0;
                            *((_QWORD *)v282 + 2) = 0;
                            *((_QWORD *)v282 + 3) = v282 + 8;
                            LOWORD(v485) = 257;
                            llvm::TruncInst::TruncInst((uint64_t)(v282 + 8), (uint64_t)v278, v279 + 1936, (uint64_t)&v483, 0);
                            sub_1C53DF664((_QWORD *)(*(_QWORD *)(v440 + 40) + 40), v440 + 24, v280);
                            v281 = v280;
                          }
                          v283 = (char *)operator new(0x60uLL);
                          *((_DWORD *)v283 + 13) = *((_DWORD *)v283 + 13) & 0x38000000 | 1;
                          v284 = (llvm::ConstantFP ***)(v283 + 32);
                          *(_QWORD *)v283 = 0;
                          *((_QWORD *)v283 + 1) = 0;
                          *((_QWORD *)v283 + 2) = 0;
                          *((_QWORD *)v283 + 3) = v283 + 32;
                          LOWORD(v485) = 257;
                          llvm::UIToFPInst::UIToFPInst((uint64_t)(v283 + 32), v280, v279 + 1624, (uint64_t)&v483, 0);
                          sub_1C53DF664((_QWORD *)(*(_QWORD *)(v281 + 40) + 40), v281 + 24, (uint64_t)v284);
                          v428 = 1;
                        }
                        else
                        {
                          v428 = 0;
                          v284 = *(llvm::ConstantFP ****)&v273[8 * v437];
                        }
                        sub_1C4773D54((uint64_t)&v483, v440, 0, 0, 0);
                        v285 = **(_QWORD **)(v440 - 32 * (*(_DWORD *)(v440 + 20) & 0x7FFFFFF));
                        v467[8] = 257;
                        v286 = sub_1C4773E38((uint64_t *)&v483, 49, v245, v285, (uint64_t)&v466);
                        v432 = *(llvm::GetElementPtrInst **)(v440 + 64);
                        v434 = (uint64_t *)v286;
                        v287 = sub_1C52F0BF8((uint64_t)&v455, v440);
                        v420 = v288;
                        if (v287 == v288)
                          goto LABEL_786;
                        v289 = v287;
                        v426 = v284;
                        v430 = v278;
                        while (2)
                        {
                          v290 = v289[5];
                          sub_1C4773D54((uint64_t)&v466, v290, 0, 0, 0);
                          v423 = v289;
                          if (*(_BYTE *)(v290 + 16) != 60)
                          {
                            if (!(_DWORD)v421)
                              goto LABEL_760;
                            v298 = 0;
                            while (2)
                            {
                              if (v428)
                              {
                                v299 = llvm::ConstantFP::get(*v284, v291, (double)v298);
                                v464 = 257;
                                FCmpHelper = llvm::IRBuilderBase::CreateFCmpHelper((uint64_t)&v466, 1, (uint64_t *)v284, (uint64_t)v299, (uint64_t)v463, 0, 0);
                              }
                              else
                              {
                                v301 = llvm::ConstantInt::get(*v278, v298, 0);
                                v464 = 257;
                                FCmpHelper = sub_1C4774B48((uint64_t)&v466, 32, (uint64_t)v284, (uint64_t)v301, (uint64_t)v463);
                              }
                              v302 = FCmpHelper;
                              v303 = llvm::ConstantInt::get(*v278, v298, 0);
                              *((_QWORD *)v471 + v437) = v303;
                              v304 = *(_BYTE *)(v440 + 17);
                              v464 = 257;
                              v305 = (unsigned __int8 *)sub_1C509D7B0((uint64_t *)&v466, v432, v434, (llvm::Value *)v471, v472, (uint64_t)v463);
                              v306 = v305;
                              if (v305 && v305[16] == 62)
                                v305[17] = v305[17] & 0xFD | v304 & 2;
                              v307 = *(_DWORD *)(v290 + 20);
                              if ((v307 & 0x40000000) != 0)
                                v308 = *(uint64_t **)(*(_QWORD *)(v290 - 8) + 32);
                              else
                                v308 = *(uint64_t **)(v290 + 32 - 32 * (v307 & 0x7FFFFFF));
                              v309 = *v308;
                              if (*(_QWORD *)v305 != *v308)
                              {
                                v464 = 257;
                                v306 = sub_1C4773E38((uint64_t *)&v466, 49, v305, v309, (uint64_t)v463);
                              }
                              v310 = **(_QWORD **)(v290 - 64);
                              v442 = 257;
                              llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v468 + 56) + 40) + 272, v310);
                              v312 = v311;
                              v313 = (char *)operator new(0x60uLL);
                              v314 = v313;
                              v315 = (llvm::Value *)(v313 + 32);
                              *((_QWORD *)v313 + 2) = 0;
                              *((_QWORD *)v313 + 3) = v313 + 32;
                              v464 = 257;
                              *((_QWORD *)v313 + 4) = v310;
                              *((_QWORD *)v313 + 5) = 0;
                              *((_WORD *)v313 + 24) = 60;
                              *((_DWORD *)v313 + 13) = 1;
                              *(_OWORD *)(v313 + 56) = 0u;
                              *(_OWORD *)(v313 + 72) = 0u;
                              *((_DWORD *)v313 + 22) = 0;
                              *(_QWORD *)v313 = v306;
                              *((_QWORD *)v313 + 1) = 0;
                              if (v306)
                              {
                                v316 = v306 + 8;
                                v317 = *((_QWORD *)v306 + 1);
                                *((_QWORD *)v313 + 1) = v317;
                                if (v317)
                                  *(_QWORD *)(v317 + 16) = v313 + 8;
                                *((_QWORD *)v313 + 2) = v316;
                                *v316 = v313;
                              }
                              *((_WORD *)v313 + 25) = 2 * (v312 & 0x3F);
                              v313[92] = 1;
                              llvm::Value::setName((uint64_t ***)v313 + 4, (uint64_t)v463);
                              (*(void (**)(uint64_t, llvm::Value *, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)v470 + 16))(v470, v315, v441, v468, v469);
                              if (!DWORD2(v466))
                              {
LABEL_673:
                                v318 = *(_DWORD *)(v290 + 20);
                                if ((v318 & 0x40000000) != 0)
                                  v319 = *(uint64_t ***)(v290 - 8);
                                else
                                  v319 = (uint64_t **)(v290 - 32 * (v318 & 0x7FFFFFF));
                                v278 = v430;
                                v320 = *v319;
                                v464 = 257;
                                Select = (uint64_t *)llvm::IRBuilderBase::CreateSelect((uint64_t *)&v466, v302, v320, (uint64_t)v315, (uint64_t)v463, 0);
                                llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v468 + 56) + 40) + 272, *Select);
                                v323 = v322;
                                v324 = (char *)operator new(0x80uLL);
                                v325 = v324;
                                *((_DWORD *)v324 + 21) = *((_DWORD *)v324 + 21) & 0x38000000 | 2;
                                *(_QWORD *)v324 = 0;
                                *((_QWORD *)v324 + 2) = 0;
                                *((_QWORD *)v324 + 1) = 0;
                                *((_QWORD *)v324 + 5) = 0;
                                *((_QWORD *)v324 + 6) = 0;
                                *((_QWORD *)v324 + 4) = 0;
                                v326 = (unsigned __int8 **)(v324 + 32);
                                *((_QWORD *)v324 + 8) = **(_QWORD **)*Select + 1576;
                                v327 = (llvm::Value *)(v324 + 64);
                                *((_QWORD *)v324 + 3) = v324 + 64;
                                *((_QWORD *)v324 + 7) = v324 + 64;
                                *((_QWORD *)v324 + 9) = 0;
                                v324[80] = 61;
                                v324[81] = 0;
                                *((_WORD *)v324 + 41) = 0;
                                *((_DWORD *)v324 + 21) = 2;
                                *(_OWORD *)(v324 + 88) = 0u;
                                *(_OWORD *)(v324 + 104) = 0u;
                                *((_DWORD *)v324 + 30) = 0;
                                *(_QWORD *)v324 = Select;
                                v330 = Select[1];
                                v329 = Select + 1;
                                v328 = v330;
                                *((_QWORD *)v324 + 1) = v330;
                                if (v330)
                                  *(_QWORD *)(v328 + 16) = v324 + 8;
                                *((_QWORD *)v324 + 2) = v329;
                                *v329 = v324;
                                if (*((_QWORD *)v324 + 4))
                                {
                                  **((_QWORD **)v324 + 6) = *((_QWORD *)v324 + 5);
                                  v346 = *((_QWORD *)v324 + 5);
                                  if (v346)
                                    *(_QWORD *)(v346 + 16) = *((_QWORD *)v324 + 6);
                                }
                                *v326 = v306;
                                if (v306)
                                {
                                  v333 = *((_QWORD *)v306 + 1);
                                  v332 = (unsigned __int8 ***)(v306 + 8);
                                  v331 = v333;
                                  *((_QWORD *)v324 + 5) = v333;
                                  if (v333)
                                    *(_QWORD *)(v331 + 16) = v324 + 40;
                                  *((_QWORD *)v324 + 6) = v332;
                                  *v332 = v326;
                                }
                                *((_WORD *)v324 + 41) = 2 * (v323 & 0x3F);
                                v324[124] = 1;
                                v464 = 257;
                                (*(void (**)(uint64_t, llvm::Value *, _BYTE *, uint64_t, uint64_t))(*(_QWORD *)v470 + 16))(v470, v327, v463, v468, v469);
                                if (!DWORD2(v466))
                                {
LABEL_684:
                                  ++v298;
                                  v284 = v426;
                                  if (v298 == v421)
                                    goto LABEL_760;
                                  continue;
                                }
                                v341 = v466;
                                v342 = v466 + 16 * DWORD2(v466);
                                v343 = (llvm::Type **)(v325 + 112);
                                while (2)
                                {
                                  v344 = *(_DWORD *)v341;
                                  v345 = *(unsigned __int8 **)(v341 + 8);
                                  if (v345)
                                  {
                                    if (v344)
                                      goto LABEL_708;
                                    v441[0] = *(_QWORD *)(v341 + 8);
                                    llvm::MetadataTracking::track((uint64_t)v441, v345, 2);
                                    v291 = *v343;
                                    if (*v343)
LABEL_706:
                                      llvm::MetadataTracking::untrack((uint64_t)(v325 + 112), (unsigned __int8 *)v291);
LABEL_712:
                                    v291 = (llvm::Type *)v441[0];
                                    *v343 = (llvm::Type *)v441[0];
                                    if (v291)
                                      llvm::MetadataTracking::retrack((uint64_t)v441, (unsigned __int8 *)v291, (uint64_t)(v325 + 112));
                                  }
                                  else
                                  {
                                    v291 = *v343;
                                    if (*v343 || (v325[87] & 0x20) != 0)
                                    {
                                      if (!v344)
                                      {
                                        v441[0] = 0;
                                        if (v291)
                                          goto LABEL_706;
                                        goto LABEL_712;
                                      }
LABEL_708:
                                      llvm::Value::setMetadata(v327, *(_DWORD *)v341, (llvm::MDNode *)v345);
                                    }
                                  }
                                  v341 += 16;
                                  if (v341 == v342)
                                    goto LABEL_684;
                                  continue;
                                }
                              }
                              break;
                            }
                            v334 = v466;
                            v335 = v466 + 16 * DWORD2(v466);
                            v336 = (unsigned __int8 **)(v314 + 80);
                            while (2)
                            {
                              v337 = *(_DWORD *)v334;
                              v338 = *(unsigned __int8 **)(v334 + 8);
                              if (v338)
                              {
                                if (v337)
                                  goto LABEL_694;
                                v465 = *(unsigned __int8 **)(v334 + 8);
                                llvm::MetadataTracking::track((uint64_t)&v465, v338, 2);
                                v339 = *v336;
                                if (*v336)
LABEL_692:
                                  llvm::MetadataTracking::untrack((uint64_t)(v314 + 80), v339);
LABEL_698:
                                v340 = v465;
                                *v336 = v465;
                                if (v340)
                                  llvm::MetadataTracking::retrack((uint64_t)&v465, v340, (uint64_t)(v314 + 80));
                              }
                              else
                              {
                                v339 = *v336;
                                if (*v336 || (v314[55] & 0x20) != 0)
                                {
                                  if (!v337)
                                  {
                                    v465 = 0;
                                    if (v339)
                                      goto LABEL_692;
                                    goto LABEL_698;
                                  }
LABEL_694:
                                  llvm::Value::setMetadata(v315, *(_DWORD *)v334, (llvm::MDNode *)v338);
                                }
                              }
                              v334 += 16;
                              if (v334 == v335)
                                goto LABEL_673;
                              continue;
                            }
                          }
                          v424 = *(_QWORD *)v290;
                          v292 = llvm::ConstantInt::get(*v278, 0, 0);
                          *((_QWORD *)v471 + v437) = v292;
                          v293 = *(_BYTE *)(v440 + 17);
                          v464 = 257;
                          v294 = (unsigned __int8 *)sub_1C509D7B0((uint64_t *)&v466, v432, v434, (llvm::Value *)v471, v472, (uint64_t)v463);
                          v295 = v294;
                          if (v294 && v294[16] == 62)
                            v294[17] = v294[17] & 0xFD | v293 & 2;
                          v296 = *(_DWORD *)(v290 + 20);
                          if ((v296 & 0x40000000) != 0)
                            v297 = *(uint64_t ***)(v290 - 8);
                          else
                            v297 = (uint64_t **)(v290 - 32 * (v296 & 0x7FFFFFF));
                          v347 = **v297;
                          if (*(_QWORD *)v294 != v347)
                          {
                            v464 = 257;
                            v295 = sub_1C4773E38((uint64_t *)&v466, 49, v294, v347, (uint64_t)v463);
                          }
                          v442 = 257;
                          llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v468 + 56) + 40) + 272, v424);
                          v349 = v348;
                          v350 = (char *)operator new(0x60uLL);
                          v351 = v350;
                          v352 = (llvm::Value *)(v350 + 32);
                          *((_QWORD *)v350 + 2) = 0;
                          *((_QWORD *)v350 + 3) = v350 + 32;
                          v464 = 257;
                          *((_QWORD *)v350 + 4) = v424;
                          *((_QWORD *)v350 + 5) = 0;
                          *((_WORD *)v350 + 24) = 60;
                          *((_DWORD *)v350 + 13) = 1;
                          *(_OWORD *)(v350 + 56) = 0u;
                          *(_OWORD *)(v350 + 72) = 0u;
                          *((_DWORD *)v350 + 22) = 0;
                          *(_QWORD *)v350 = v295;
                          *((_QWORD *)v350 + 1) = 0;
                          if (v295)
                          {
                            v355 = *((_QWORD *)v295 + 1);
                            v354 = v295 + 8;
                            v353 = v355;
                            *((_QWORD *)v350 + 1) = v355;
                            if (v355)
                              *(_QWORD *)(v353 + 16) = v350 + 8;
                            *((_QWORD *)v350 + 2) = v354;
                            *v354 = v350;
                          }
                          *((_WORD *)v350 + 25) = 2 * (v349 & 0x3F);
                          v350[92] = 1;
                          llvm::Value::setName((uint64_t ***)v350 + 4, (uint64_t)v463);
                          (*(void (**)(uint64_t, llvm::Value *, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)v470 + 16))(v470, v352, v441, v468, v469);
                          if (DWORD2(v466))
                          {
                            v389 = v466;
                            v390 = v466 + 16 * DWORD2(v466);
                            v391 = (unsigned __int8 **)(v351 + 80);
                            do
                            {
                              v392 = *(_DWORD *)v389;
                              v393 = *(unsigned __int8 **)(v389 + 8);
                              if (v393)
                              {
                                if (!v392)
                                {
                                  v465 = *(unsigned __int8 **)(v389 + 8);
                                  llvm::MetadataTracking::track((uint64_t)&v465, v393, 2);
                                  v356 = *v391;
                                  goto LABEL_782;
                                }
                              }
                              else
                              {
                                v356 = *v391;
                                if (!*v391 && (v351[55] & 0x20) == 0)
                                  goto LABEL_779;
                                if (!v392)
                                {
                                  v465 = 0;
LABEL_782:
                                  if (v356)
                                    llvm::MetadataTracking::untrack((uint64_t)(v351 + 80), v356);
                                  v356 = v465;
                                  *v391 = v465;
                                  if (v356)
                                    llvm::MetadataTracking::retrack((uint64_t)&v465, v356, (uint64_t)(v351 + 80));
                                  goto LABEL_779;
                                }
                              }
                              llvm::Value::setMetadata(v352, *(_DWORD *)v389, (llvm::MDNode *)v393);
LABEL_779:
                              v389 += 16;
                            }
                            while (v389 != v390);
                          }
                          if (v421 >= 2)
                          {
                            v357 = 1;
                            v278 = v430;
                            while (1)
                            {
                              v358 = *v284;
                              if (v428)
                              {
                                v359 = llvm::ConstantFP::get(v358, (llvm::Type *)v356, (double)v357);
                                v464 = 257;
                                v360 = llvm::IRBuilderBase::CreateFCmpHelper((uint64_t)&v466, 1, (uint64_t *)v284, (uint64_t)v359, (uint64_t)v463, 0, 0);
                              }
                              else
                              {
                                v361 = llvm::ConstantInt::get((llvm::ConstantInt *)v358, v357, 0);
                                v464 = 257;
                                v360 = sub_1C4774B48((uint64_t)&v466, 32, (uint64_t)v284, (uint64_t)v361, (uint64_t)v463);
                              }
                              v362 = v360;
                              v363 = llvm::ConstantInt::get(*v278, v357, 0);
                              *((_QWORD *)v471 + v437) = v363;
                              v364 = *(_BYTE *)(v440 + 17);
                              v464 = 257;
                              v365 = (unsigned __int8 *)sub_1C509D7B0((uint64_t *)&v466, v432, v434, (llvm::Value *)v471, v472, (uint64_t)v463);
                              v366 = v365;
                              if (v365 && v365[16] == 62)
                                v365[17] = v365[17] & 0xFD | v364 & 2;
                              v367 = *(_DWORD *)(v290 + 20);
                              if ((v367 & 0x40000000) != 0)
                                v368 = *(uint64_t ***)(v290 - 8);
                              else
                                v368 = (uint64_t **)(v290 - 32 * (v367 & 0x7FFFFFF));
                              v369 = **v368;
                              if (*(_QWORD *)v365 != v369)
                              {
                                v464 = 257;
                                v366 = sub_1C4773E38((uint64_t *)&v466, 49, v365, v369, (uint64_t)v463);
                              }
                              v442 = 257;
                              llvm::DataLayout::getAlignment(*(_QWORD *)(*(_QWORD *)(v468 + 56) + 40) + 272, v424);
                              v371 = v370;
                              v372 = (char *)operator new(0x60uLL);
                              v373 = v372;
                              v374 = (uint64_t *)(v372 + 32);
                              *((_QWORD *)v372 + 2) = 0;
                              *((_QWORD *)v372 + 3) = v372 + 32;
                              v464 = 257;
                              *((_QWORD *)v372 + 4) = v424;
                              *((_QWORD *)v372 + 5) = 0;
                              *((_WORD *)v372 + 24) = 60;
                              *((_DWORD *)v372 + 13) = 1;
                              *(_OWORD *)(v372 + 56) = 0u;
                              *(_OWORD *)(v372 + 72) = 0u;
                              *((_DWORD *)v372 + 22) = 0;
                              *(_QWORD *)v372 = v366;
                              *((_QWORD *)v372 + 1) = 0;
                              if (v366)
                              {
                                v377 = *((_QWORD *)v366 + 1);
                                v376 = v366 + 8;
                                v375 = v377;
                                *((_QWORD *)v372 + 1) = v377;
                                if (v377)
                                  *(_QWORD *)(v375 + 16) = v372 + 8;
                                *((_QWORD *)v372 + 2) = v376;
                                *v376 = v372;
                              }
                              *((_WORD *)v372 + 25) = 2 * (v371 & 0x3F);
                              v372[92] = 1;
                              llvm::Value::setName((uint64_t ***)v372 + 4, (uint64_t)v463);
                              (*(void (**)(uint64_t, uint64_t *, _QWORD *, uint64_t, uint64_t))(*(_QWORD *)v470 + 16))(v470, v374, v441, v468, v469);
                              if (DWORD2(v466))
                                break;
LABEL_742:
                              v464 = 257;
                              v352 = llvm::IRBuilderBase::CreateSelect((uint64_t *)&v466, v362, v374, (uint64_t)v352, (uint64_t)v463, 0);
                              ++v357;
                              v284 = v426;
                              v278 = v430;
                              if (v357 == v421)
                                goto LABEL_759;
                            }
                            v378 = v466;
                            v379 = v466 + 16 * DWORD2(v466);
                            v380 = (unsigned __int8 **)(v373 + 80);
                            while (1)
                            {
                              v381 = *(_DWORD *)v378;
                              v382 = *(unsigned __int8 **)(v378 + 8);
                              if (v382)
                              {
                                if (!v381)
                                {
                                  v465 = *(unsigned __int8 **)(v378 + 8);
                                  llvm::MetadataTracking::track((uint64_t)&v465, v382, 2);
                                  v383 = *v380;
                                  if (!*v380)
                                  {
LABEL_756:
                                    v384 = v465;
                                    *v380 = v465;
                                    if (v384)
                                      llvm::MetadataTracking::retrack((uint64_t)&v465, v384, (uint64_t)(v373 + 80));
                                    goto LABEL_753;
                                  }
LABEL_750:
                                  llvm::MetadataTracking::untrack((uint64_t)(v373 + 80), v383);
                                  goto LABEL_756;
                                }
                              }
                              else
                              {
                                v383 = *v380;
                                if (!*v380 && (v373[55] & 0x20) == 0)
                                  goto LABEL_753;
                                if (!v381)
                                {
                                  v465 = 0;
                                  if (!v383)
                                    goto LABEL_756;
                                  goto LABEL_750;
                                }
                              }
                              llvm::Value::setMetadata((llvm::Value *)v374, *(_DWORD *)v378, (llvm::MDNode *)v382);
LABEL_753:
                              v378 += 16;
                              if (v378 == v379)
                                goto LABEL_742;
                            }
                          }
                          v278 = v430;
LABEL_759:
                          llvm::Value::doRAUW((llvm::ValueAsMetadata *)v290, v352, (llvm::Value *)1);
LABEL_760:
                          v385 = v478;
                          if (v478 >= (unint64_t)HIDWORD(v478))
                          {
                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v477, (uint64_t)v479, v478 + 1, 8);
                            v385 = v478;
                          }
                          v245 = (unsigned __int8 *)v422;
                          v386 = v423;
                          *((_QWORD *)v477 + v385) = v290;
                          LODWORD(v478) = v478 + 1;
                          if ((_WORD *)v466 != v467)
                            free((void *)v466);
                          v387 = (_QWORD *)v423[1];
                          if (v387)
                          {
                            do
                            {
                              v388 = v387;
                              v387 = (_QWORD *)*v387;
                            }
                            while (v387);
                          }
                          else
                          {
                            do
                            {
                              v388 = (_QWORD *)v386[2];
                              v49 = *v388 == (_QWORD)v386;
                              v386 = v388;
                            }
                            while (!v49);
                          }
                          v289 = v388;
                          if (v388 != v420)
                            continue;
                          break;
                        }
                        v429 = 1;
LABEL_786:
                        v14 = (llvm::Type *)v415;
                        if ((__int128 *)v483 != &__p)
                          free((void *)v483);
                        if (v471 != v473)
                          free(v471);
                        v253 = *v414;
                      }
                      while (*v414);
                    }
                  }
LABEL_558:
                  v232 = v444[0];
                  if (v444[0])
                  {
                    do
                    {
                      v233 = (_QWORD *)*v232;
                      operator delete(v232);
                      v232 = v233;
                    }
                    while (v233);
                  }
                  v234 = v443[0];
                  v443[0] = 0;
                  if (v234)
                    operator delete(v234);
                  v235 = v447[0];
                  if (v447[0])
                  {
                    do
                    {
                      v236 = (_QWORD *)*v235;
                      operator delete(v235);
                      v235 = v236;
                    }
                    while (v236);
                  }
                  v237 = v446[0];
                  v446[0] = 0;
                  if (v237)
                    operator delete(v237);
                  v238 = (_QWORD *)v450;
                  if ((_QWORD)v450)
                  {
                    do
                    {
                      v239 = (_QWORD *)*v238;
                      operator delete(v238);
                      v238 = v239;
                    }
                    while (v239);
                  }
                  v240 = (void *)v449;
                  *(_QWORD *)&v449 = 0;
                  if (v240)
                    operator delete(v240);
                  v241 = (_QWORD *)v453;
                  if ((_QWORD)v453)
                  {
                    do
                    {
                      v242 = (_QWORD *)*v241;
                      operator delete(v241);
                      v241 = v242;
                    }
                    while (v242);
                  }
                  v243 = (void *)v452;
                  *(_QWORD *)&v452 = 0;
                  if (v243)
                    operator delete(v243);
                  goto LABEL_574;
                }
LABEL_547:
                v227 = v433;
                if (!v20)
                {
LABEL_556:
                  v231 = v416 - v227;
                  goto LABEL_557;
                }
LABEL_550:
                if (*(_BYTE *)(v20 + 8) != 16)
                  goto LABEL_556;
                sub_1C4768AD0((uint64_t)v14, v20);
                v230 = v229;
                if ((_DWORD)v228 == 1)
                v231 = v416 - (v230 >> 3);
                if (v416 < v230 >> 3)
                  v231 = 0;
LABEL_557:
                v416 = v231;
                goto LABEL_558;
              }
              goto LABEL_318;
            }
          }
        }
        v115 = *(_QWORD *)(v20 + 24);
      }
      v124 = *(unsigned int *)(v20 + 32);
      goto LABEL_285;
    }
    v435 = v20;
    v55 = 0;
    v56 = (uint64_t *)v474;
    v57 = (uint64_t *)((char *)v474 + 8 * v475);
    LOBYTE(v58) = 1;
    v59 = 1;
    do
    {
      if ((v58 & 1) == 0)
      {
LABEL_248:
        v110 = v418;
        goto LABEL_575;
      }
      v60 = *v56;
      v61 = *(unsigned __int8 *)(*v56 + 16);
      if (v61 == 84)
      {
        v62 = *(_QWORD *)(v60 - 32);
        if (!v62
          || *(_BYTE *)(v62 + 16)
          || *(_QWORD *)(v62 + 24) != *(_QWORD *)(v60 + 72)
          || (*(_BYTE *)(v62 + 33) & 0x20) == 0
          || (*(_DWORD *)(v62 + 36) - 167) > 1)
        {
          goto LABEL_248;
        }
        sub_1C4774094((llvm::SmallPtrSetImplBase *)&v457, *v56);
        goto LABEL_139;
      }
      if ((v61 & 0xFE) == 0x3C)
      {
        ++v55;
LABEL_139:
        v58 = 1;
        goto LABEL_140;
      }
      if (v61 != 62)
        goto LABEL_248;
      v63 = v55;
      v64 = v59;
      v65 = *(_DWORD *)(v60 + 20);
      v66 = v60 + 32;
      v67 = -1;
      do
      {
        v68 = v65 & 0x7FFFFFF;
        v69 = (v68 - 1);
        if (++v67 >= v69)
          break;
        v70 = *(_QWORD *)(v66 - 32 * v68);
        if (v70)
          v71 = *(unsigned __int8 *)(v70 + 16) >= 0x1Cu;
        else
          v71 = 0;
        if (v71)
        {
          v72 = llvm::ConstantFoldInstruction(v70, v14, 0);
          if (v72)
          {
            v429 = 1;
            llvm::Value::doRAUW((llvm::ValueAsMetadata *)v70, v72, (llvm::Value *)1);
            if (!*(_QWORD *)(v70 + 8))
            {
              if (llvm::wouldInstructionBeTriviallyDead(v70, 0))
              {
                llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v70 + 40) + 40, (uint64_t ***)v70);
                v74 = *(_QWORD *)(v70 + 24);
                v75 = *(_QWORD **)(v70 + 32);
                *v75 = v74;
                *(_QWORD *)(v74 + 8) = v75;
                *(_QWORD *)(v70 + 24) = 0;
                *(_QWORD *)(v70 + 32) = 0;
                llvm::Value::deleteValue((llvm::Value *)v70);
              }
              v429 = 1;
            }
          }
        }
        v65 = *(_DWORD *)(v60 + 20);
        v73 = v66 - 32 * (v65 & 0x7FFFFFF);
        v66 += 32;
      }
      while (*(unsigned __int8 *)(*(_QWORD *)v73 + 16) < 0x15u);
      if (v67 < v69)
        v55 = v63;
      else
        v55 = v63 + 1;
      if (v438)
      {
        for (k = *(_QWORD *)(v60 + 8); k; k = *(_QWORD *)(k + 8))
        {
          v77 = *(_QWORD *)(k + 24);
          if (v77 && *(_BYTE *)(v77 + 16) == 77)
          {
            if (sub_1C55BDAF8(*(_QWORD *)v77, *(_QWORD *)v60, (uint64_t)v14))
            {
              while (1)
              {
                v77 = *(_QWORD *)(v77 + 8);
                if (!v77)
                  break;
                v78 = *(_QWORD *)(v77 + 24);
                *(_QWORD *)&v483 = v60;
                *((_QWORD *)&v483 + 1) = v78;
                sub_1C55BDB3C(&v455, &v483);
              }
            }
          }
          else
          {
            *(_QWORD *)&v483 = v60;
            *((_QWORD *)&v483 + 1) = v77;
            sub_1C55BDB3C(&v455, &v483);
          }
        }
        goto LABEL_227;
      }
      *(_QWORD *)&v483 = &__p;
      *((_QWORD *)&v483 + 1) = 0x2000000000;
      v79 = *(_QWORD *)(v60 + 8);
      if (v79)
      {
        v80 = -1;
        v81 = *(_QWORD *)(v60 + 8);
        do
        {
          v81 = *(_QWORD *)(v81 + 8);
          ++v80;
        }
        while (v81);
        v82 = v80 + 1;
        if (v80 >= 0x20)
        {
          llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v483, (uint64_t)&__p, v80 + 1, 8);
          v83 = DWORD2(v483);
          v85 = (__int128 *)v483;
          v84 = DWORD2(v483);
        }
        else
        {
          v83 = 0;
          v84 = 0;
          v85 = &__p;
        }
        v86 = (_QWORD *)v85 + v83;
        do
        {
          *v86++ = *(_QWORD *)(v79 + 24);
          v79 = *(_QWORD *)(v79 + 8);
        }
        while (v79);
      }
      else
      {
        v84 = 0;
        v82 = 0;
      }
      v87 = v84 + v82;
      DWORD2(v483) = v87;
      if (v87)
      {
        while (1)
        {
          while (1)
          {
            v88 = *(_QWORD *)(v483 + 8 * v87 - 8);
            v89 = v87 - 1;
            DWORD2(v483) = v89;
            v90 = *(unsigned __int8 *)(v88 + 16);
            if (!v88 || v90 != 77)
              break;
            v91 = *(_QWORD *)(v88 + 8);
            if (v91)
            {
              v92 = 0;
              v93 = v91;
              do
              {
                ++v92;
                v93 = *(_QWORD *)(v93 + 8);
              }
              while (v93);
            }
            else
            {
              v92 = 0;
            }
            v95 = v92 + v89;
            if (v95 > HIDWORD(v483))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v483, (uint64_t)&__p, v95, 8);
              v89 = DWORD2(v483);
              if (v91)
              {
LABEL_194:
                v96 = (_QWORD *)(v483 + 8 * v89);
                do
                {
                  *v96++ = *(_QWORD *)(v91 + 24);
                  v91 = *(_QWORD *)(v91 + 8);
                }
                while (v91);
              }
            }
            else if (v91)
            {
              goto LABEL_194;
            }
            v87 = v89 + v92;
            DWORD2(v483) = v87;
            if (!v87)
              goto LABEL_225;
          }
          if (v88)
          {
            v94 = (uint64_t *)v88;
            if (v90 == 60)
              goto LABEL_218;
          }
          if (v88 && v90 == 61)
            break;
          if (v88 && v90 == 65)
          {
            v94 = *(uint64_t **)(v88 - 32);
            goto LABEL_218;
          }
          if (v88 && v90 == 64)
            break;
          if (v90 == 62)
            goto LABEL_206;
          if (v90 == 5)
          {
            if (*(_WORD *)(v88 + 18) == 34)
            {
LABEL_206:
              v97 = v90 != 62 || v88 == 0;
              v98 = 64;
              if (v97)
                v98 = 24;
              v94 = (uint64_t *)(v88 + v98);
              goto LABEL_218;
            }
          }
          else
          {
            if (v88)
              v99 = v90 == 3;
            else
              v99 = 0;
            if (v99)
            {
              v94 = (uint64_t *)(v88 + 24);
              goto LABEL_218;
            }
          }
          v100 = 0;
LABEL_219:
          if (sub_1C55BD98C(v100, *(_QWORD *)(v60 + 72), (uint64_t)v14))
          {
            *(_QWORD *)&v466 = v60;
            *((_QWORD *)&v466 + 1) = v88;
            sub_1C55BDB3C(&v455, &v466);
          }
          v87 = DWORD2(v483);
          if (!DWORD2(v483))
            goto LABEL_225;
        }
        v94 = *(uint64_t **)(v88 - 64);
LABEL_218:
        v100 = *v94;
        goto LABEL_219;
      }
LABEL_225:
      if ((__int128 *)v483 != &__p)
        free((void *)v483);
LABEL_227:
      v101 = sub_1C52F0BF8((uint64_t)&v455, v60);
      if (v101 == v102)
      {
        v58 = 1;
        v59 = v64;
      }
      else
      {
        v59 = v64;
        while (1)
        {
          v103 = v101[5];
          v104 = *(unsigned __int8 *)(v103 + 16);
          if ((v104 & 0xFE) != 0x3C)
            break;
          if (v104 == 61)
          {
            v105 = *(_DWORD *)(v103 + 20);
            if ((v105 & 0x40000000) != 0)
              v106 = *(uint64_t **)(v103 - 8);
            else
              v106 = (uint64_t *)(v103 - 32 * (v105 & 0x7FFFFFF));
            v107 = *v106;
            if (v107 == v60)
              break;
            if (*(unsigned __int8 *)(v107 + 16) >= 0x15u)
              v59 = 0;
            else
              v59 = v59;
          }
          v108 = (_QWORD *)v101[1];
          if (v108)
          {
            do
            {
              v109 = v108;
              v108 = (_QWORD *)*v108;
            }
            while (v108);
          }
          else
          {
            do
            {
              v109 = (_QWORD *)v101[2];
              v49 = *v109 == (_QWORD)v101;
              v101 = v109;
            }
            while (!v49);
          }
          v101 = v109;
          if (v109 == v102)
            goto LABEL_139;
        }
        v58 = 0;
      }
LABEL_140:
      ++v56;
    }
    while (v56 != v57);
    v20 = v435;
    if (v58)
      goto LABEL_250;
LABEL_574:
    v110 = v418;
LABEL_575:
    sub_1C6143384(v456[0]);
    if (v474 != v476)
      free(v474);
    v18 = v110 + 1;
  }
  while (v18 != v417);
LABEL_797:
  if (v458 == v457)
    v394 = (uint64_t *)((char *)&v459 + 4);
  else
    v394 = &v459;
  v395 = *(unsigned int *)v394;
  if ((_DWORD)v395)
  {
    v396 = 8 * v395;
    v397 = (unint64_t *)v458;
    while (*v397 >= 0xFFFFFFFFFFFFFFFELL)
    {
      ++v397;
      v396 -= 8;
      if (!v396)
        goto LABEL_812;
    }
  }
  else
  {
    v397 = (unint64_t *)v458;
  }
  v398 = (unint64_t *)((char *)v458 + 8 * v395);
  if (v397 != v398)
  {
    v399 = *v397;
LABEL_808:
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v399 + 40) + 40, (uint64_t ***)v399);
    v400 = *(_QWORD *)(v399 + 24);
    v401 = *(_QWORD **)(v399 + 32);
    *v401 = v400;
    *(_QWORD *)(v400 + 8) = v401;
    *(_QWORD *)(v399 + 24) = 0;
    *(_QWORD *)(v399 + 32) = 0;
    llvm::Value::deleteValue((llvm::Value *)v399);
    v402 = v397 + 1;
    while (v402 != v398)
    {
      v403 = *v402++;
      v399 = v403;
      if (v403 <= 0xFFFFFFFFFFFFFFFDLL)
      {
        v397 = v402 - 1;
        goto LABEL_808;
      }
    }
  }
LABEL_812:
  if ((_DWORD)v478)
  {
    v404 = (uint64_t *)v477;
    v405 = 8 * v478;
    do
    {
      v406 = *v404++;
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v406 + 40) + 40, (uint64_t ***)v406);
      v407 = *(_QWORD *)(v406 + 24);
      v408 = *(_QWORD **)(v406 + 32);
      *v408 = v407;
      *(_QWORD *)(v407 + 8) = v408;
      *(_QWORD *)(v406 + 24) = 0;
      *(_QWORD *)(v406 + 32) = 0;
      llvm::Value::deleteValue((llvm::Value *)v406);
      v405 -= 8;
    }
    while (v405);
  }
  if (v458 != v457)
    free(v458);
  if (v477 != v479)
    free(v477);
  if (v480 != v482)
    free(v480);
  return v429 & 1;
}

uint64_t sub_1C55BD98C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t result;
  uint64_t v5;
  unsigned int v7;
  unsigned int v8;
  uint64_t v9;
  uint64_t v10;
  int v11;
  int v12;
  int v13;
  uint64_t v14;
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  int v18;
  int v19;
  int v20;
  uint64_t v21;

  result = 0;
  if (!a1)
    return result;
  v5 = a2;
  if (!a2)
    return result;
  v7 = *(unsigned __int8 *)(a1 + 8);
  if (v7 > 0x11)
    goto LABEL_21;
  if (((1 << v7) & 0xAC7F) != 0)
    goto LABEL_5;
  if (((1 << v7) & 0x30000) == 0)
  {
LABEL_21:
    if ((v7 & 0xFE) != 0x12 && v7 != 21)
      return 0;
  }
  result = llvm::Type::isSizedDerivedType(a1, 0);
  if (!(_DWORD)result)
    return result;
LABEL_5:
  v8 = *(unsigned __int8 *)(v5 + 8);
  if (v8 > 0x11)
    goto LABEL_31;
  if (((1 << v8) & 0xAC7F) == 0)
  {
    if (((1 << v8) & 0x30000) != 0)
      goto LABEL_29;
LABEL_31:
    if ((v8 & 0xFE) == 0x12 || v8 == 21)
    {
LABEL_29:
      result = llvm::Type::isSizedDerivedType(v5, 0);
      if (!(_DWORD)result)
        return result;
      goto LABEL_7;
    }
    return 0;
  }
LABEL_7:
  sub_1C4768AD0(a3, a1);
  v10 = v9;
  v12 = v11;
  sub_1C4768AD0(a3, v5);
  v15 = v14;
  result = 0;
  if (v10 == v15 && v12 == v13)
  {
    if (*(_BYTE *)(a1 + 8) == 17)
      a1 = **(_QWORD **)(a1 + 16);
    if (*(_BYTE *)(v5 + 8) == 17)
      v5 = **(_QWORD **)(v5 + 16);
    sub_1C4768AD0(a3, a1);
    v17 = v16;
    v19 = v18;
    sub_1C4768AD0(a3, v5);
    return v17 == v21 && v19 == v20;
  }
  return result;
}

uint64_t sub_1C55BDAF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(_BYTE *)(a1 + 8) != 15 || *(_BYTE *)(a2 + 8) != 15)
    return 0;
  if (*(_QWORD *)(a1 + 24))
    return sub_1C55BD98C(**(_QWORD **)(a1 + 16), **(_QWORD **)(a2 + 16), a3);
  return 1;
}

uint64_t *sub_1C55BDB3C(uint64_t **a1, _OWORD *a2)
{
  uint64_t *v4;
  uint64_t *v5;
  uint64_t **v6;
  uint64_t *v7;
  uint64_t **v8;
  uint64_t *v9;
  uint64_t *result;

  v4 = (uint64_t *)operator new(0x30uLL);
  v5 = v4;
  *((_OWORD *)v4 + 2) = *a2;
  v6 = a1 + 1;
  v7 = a1[1];
  if (v7)
  {
    do
    {
      while (1)
      {
        v6 = (uint64_t **)v7;
        if (v4[4] >= (unint64_t)v7[4])
          break;
        v7 = (uint64_t *)*v7;
        v8 = v6;
        if (!*v6)
          goto LABEL_8;
      }
      v7 = (uint64_t *)v7[1];
    }
    while (v7);
    v8 = v6 + 1;
  }
  else
  {
    v8 = a1 + 1;
  }
LABEL_8:
  *v4 = 0;
  v4[1] = 0;
  v4[2] = (uint64_t)v6;
  *v8 = v4;
  v9 = (uint64_t *)**a1;
  if (v9)
  {
    *a1 = v9;
    v5 = *v8;
  }
  result = sub_1C4768E74(a1[1], v5);
  a1[2] = (uint64_t *)((char *)a1[2] + 1);
  return result;
}

void sub_1C55BDBEC(float *a1, unsigned int a2, int a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  uint64_t **v9;
  uint64_t *i;
  unint64_t v11;
  _QWORD *v12;
  float v13;
  float v14;
  _BOOL8 v15;
  unint64_t v16;
  unint64_t v17;
  int8x8_t prime;
  void *v19;
  _QWORD *v20;
  uint64_t v21;
  _QWORD *v22;
  unint64_t v23;
  uint8x8_t v24;
  unint64_t v25;
  uint8x8_t v26;
  uint64_t v27;
  _QWORD *v28;
  unint64_t v29;
  _QWORD *v30;
  _QWORD *v31;
  unint64_t v32;
  _QWORD *v33;

  v6 = a2;
  v7 = *((_QWORD *)a1 + 1);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = a2;
      if (v7 <= a2)
        v3 = a2 % v7;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & a2;
    }
    v9 = *(uint64_t ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (uint64_t *)*i)
      {
        v11 = i[1];
        if (v11 == a2)
        {
          if (*((_DWORD *)i + 4) == a2)
            return;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  v12 = operator new(0x18uLL);
  *v12 = 0;
  v12[1] = v6;
  *((_DWORD *)v12 + 4) = a3;
  v13 = (float)(unint64_t)(*((_QWORD *)a1 + 3) + 1);
  v14 = a1[8];
  if (!v7 || (float)(v14 * (float)v7) < v13)
  {
    v15 = 1;
    if (v7 >= 3)
      v15 = (v7 & (v7 - 1)) != 0;
    v16 = v15 | (2 * v7);
    v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17)
      prime = (int8x8_t)v17;
    else
      prime = (int8x8_t)v16;
    if (*(_QWORD *)&prime == 1)
    {
      prime = (int8x8_t)2;
    }
    else if ((*(_QWORD *)&prime & (*(_QWORD *)&prime - 1)) != 0)
    {
      prime = (int8x8_t)std::__next_prime(*(_QWORD *)&prime);
      v7 = *((_QWORD *)a1 + 1);
    }
    if (*(_QWORD *)&prime > v7)
      goto LABEL_30;
    if (*(_QWORD *)&prime < v7)
    {
      v25 = vcvtps_u32_f32((float)*((unint64_t *)a1 + 3) / a1[8]);
      if (v7 < 3 || (v26 = (uint8x8_t)vcnt_s8((int8x8_t)v7), v26.i16[0] = vaddlv_u8(v26), v26.u32[0] > 1uLL))
      {
        v25 = std::__next_prime(v25);
      }
      else
      {
        v27 = 1 << -(char)__clz(v25 - 1);
        if (v25 >= 2)
          v25 = v27;
      }
      if (*(_QWORD *)&prime <= v25)
        prime = (int8x8_t)v25;
      if (*(_QWORD *)&prime >= v7)
      {
        v7 = *((_QWORD *)a1 + 1);
      }
      else
      {
        if (prime)
        {
LABEL_30:
          if (*(_QWORD *)&prime >> 61)
            sub_1C4764EE4();
          v19 = operator new(8 * *(_QWORD *)&prime);
          v20 = *(_QWORD **)a1;
          *(_QWORD *)a1 = v19;
          if (v20)
            operator delete(v20);
          v21 = 0;
          *((int8x8_t *)a1 + 1) = prime;
          do
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v21++) = 0;
          while (*(_QWORD *)&prime != v21);
          v22 = (_QWORD *)*((_QWORD *)a1 + 2);
          if (v22)
          {
            v23 = v22[1];
            v24 = (uint8x8_t)vcnt_s8(prime);
            v24.i16[0] = vaddlv_u8(v24);
            if (v24.u32[0] > 1uLL)
            {
              if (v23 >= *(_QWORD *)&prime)
                v23 %= *(_QWORD *)&prime;
            }
            else
            {
              v23 &= *(_QWORD *)&prime - 1;
            }
            *(_QWORD *)(*(_QWORD *)a1 + 8 * v23) = a1 + 4;
            v28 = (_QWORD *)*v22;
            if (*v22)
            {
              do
              {
                v29 = v28[1];
                if (v24.u32[0] > 1uLL)
                {
                  if (v29 >= *(_QWORD *)&prime)
                    v29 %= *(_QWORD *)&prime;
                }
                else
                {
                  v29 &= *(_QWORD *)&prime - 1;
                }
                if (v29 != v23)
                {
                  if (!*(_QWORD *)(*(_QWORD *)a1 + 8 * v29))
                  {
                    *(_QWORD *)(*(_QWORD *)a1 + 8 * v29) = v22;
                    goto LABEL_55;
                  }
                  *v22 = *v28;
                  *v28 = **(_QWORD **)(*(_QWORD *)a1 + 8 * v29);
                  **(_QWORD **)(*(_QWORD *)a1 + 8 * v29) = v28;
                  v28 = v22;
                }
                v29 = v23;
LABEL_55:
                v22 = v28;
                v28 = (_QWORD *)*v28;
                v23 = v29;
              }
              while (v28);
            }
          }
          v7 = (unint64_t)prime;
          goto LABEL_59;
        }
        v33 = *(_QWORD **)a1;
        *(_QWORD *)a1 = 0;
        if (v33)
          operator delete(v33);
        v7 = 0;
        *((_QWORD *)a1 + 1) = 0;
      }
    }
LABEL_59:
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v7 <= v6)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = ((_DWORD)v7 - 1) & v6;
    }
  }
  v30 = *(_QWORD **)a1;
  v31 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v31)
  {
    *v12 = *v31;
LABEL_72:
    *v31 = v12;
    goto LABEL_73;
  }
  *v12 = *((_QWORD *)a1 + 2);
  *((_QWORD *)a1 + 2) = v12;
  v30[v3] = a1 + 4;
  if (*v12)
  {
    v32 = *(_QWORD *)(*v12 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v32 >= v7)
        v32 %= v7;
    }
    else
    {
      v32 &= v7 - 1;
    }
    v31 = (_QWORD *)(*(_QWORD *)a1 + 8 * v32);
    goto LABEL_72;
  }
LABEL_73:
  ++*((_QWORD *)a1 + 3);
}

_QWORD *sub_1C55BDFB8(_QWORD *a1, unint64_t *a2)
{
  int8x8_t v2;
  _QWORD *result;
  unint64_t v4;
  uint8x8_t v5;
  uint64_t v6;
  _QWORD *v7;
  _QWORD *v8;
  unint64_t v9;

  v2 = (int8x8_t)a1[1];
  if (!*(_QWORD *)&v2)
    return 0;
  v4 = *a2;
  v5 = (uint8x8_t)vcnt_s8(v2);
  v5.i16[0] = vaddlv_u8(v5);
  if (v5.u32[0] > 1uLL)
    v6 = v4 < *(_QWORD *)&v2 ? *a2 : v4 % *(_QWORD *)&v2;
  else
    v6 = (*(_QWORD *)&v2 - 1) & v4;
  v7 = *(_QWORD **)(*a1 + 8 * v6);
  if (!v7)
    return 0;
  v8 = (_QWORD *)*v7;
  if (!v8)
    return 0;
  while (1)
  {
    v9 = v8[1];
    if (v4 == v9)
      break;
    if (v5.u32[0] > 1uLL)
    {
      if (v9 >= *(_QWORD *)&v2)
        v9 %= *(_QWORD *)&v2;
    }
    else
    {
      v9 &= *(_QWORD *)&v2 - 1;
    }
    if (v9 != v6)
      return 0;
LABEL_15:
    result = 0;
    v8 = (_QWORD *)*v8;
    if (!v8)
      return result;
  }
  if (v8[2] != v4)
    goto LABEL_15;
  return v8;
}

_QWORD *sub_1C55BE078(uint64_t a1, unint64_t *a2, _QWORD *a3)
{
  unint64_t v3;
  unint64_t v6;
  unint64_t v7;
  uint8x8_t v8;
  _QWORD **v9;
  _QWORD *i;
  unint64_t v11;
  float v12;
  float v13;
  _BOOL8 v14;
  unint64_t v15;
  unint64_t v16;
  size_t v17;
  uint64_t v18;
  _QWORD *v19;
  unint64_t v20;

  v6 = *a2;
  v7 = *(_QWORD *)(a1 + 8);
  if (v7)
  {
    v8 = (uint8x8_t)vcnt_s8((int8x8_t)v7);
    v8.i16[0] = vaddlv_u8(v8);
    if (v8.u32[0] > 1uLL)
    {
      v3 = *a2;
      if (v6 >= v7)
        v3 = v6 % v7;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
    v9 = *(_QWORD ***)(*(_QWORD *)a1 + 8 * v3);
    if (v9)
    {
      for (i = *v9; i; i = (_QWORD *)*i)
      {
        v11 = i[1];
        if (v11 == v6)
        {
          if (i[2] == v6)
            return i;
        }
        else
        {
          if (v8.u32[0] > 1uLL)
          {
            if (v11 >= v7)
              v11 %= v7;
          }
          else
          {
            v11 &= v7 - 1;
          }
          if (v11 != v3)
            break;
        }
      }
    }
  }
  i = operator new(0x18uLL);
  *i = 0;
  i[1] = v6;
  i[2] = *a3;
  v12 = (float)(unint64_t)(*(_QWORD *)(a1 + 24) + 1);
  v13 = *(float *)(a1 + 32);
  if (!v7 || (float)(v13 * (float)v7) < v12)
  {
    v14 = 1;
    if (v7 >= 3)
      v14 = (v7 & (v7 - 1)) != 0;
    v15 = v14 | (2 * v7);
    v16 = vcvtps_u32_f32(v12 / v13);
    if (v15 <= v16)
      v17 = v16;
    else
      v17 = v15;
    sub_1C542C2D4(a1, v17);
    v7 = *(_QWORD *)(a1 + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v6 >= v7)
        v3 = v6 % v7;
      else
        v3 = v6;
    }
    else
    {
      v3 = (v7 - 1) & v6;
    }
  }
  v18 = *(_QWORD *)a1;
  v19 = *(_QWORD **)(*(_QWORD *)a1 + 8 * v3);
  if (v19)
  {
    *i = *v19;
LABEL_38:
    *v19 = i;
    goto LABEL_39;
  }
  *i = *(_QWORD *)(a1 + 16);
  *(_QWORD *)(a1 + 16) = i;
  *(_QWORD *)(v18 + 8 * v3) = a1 + 16;
  if (*i)
  {
    v20 = *(_QWORD *)(*i + 8);
    if ((v7 & (v7 - 1)) != 0)
    {
      if (v20 >= v7)
        v20 %= v7;
    }
    else
    {
      v20 &= v7 - 1;
    }
    v19 = (_QWORD *)(*(_QWORD *)a1 + 8 * v20);
    goto LABEL_38;
  }
LABEL_39:
  ++*(_QWORD *)(a1 + 24);
  return i;
}

void sub_1C55BE27C(uint64_t a1, uint64_t a2, const llvm::APInt *a3)
{
  uint64_t *v5;
  llvm::ConstantInt *v6;
  const llvm::APInt *v7;
  llvm::ValueHandleBase *v8;
  llvm::ConstantInt *v9;
  llvm::ValueHandleBase *v10;
  uint64_t *v11;
  int v12;
  unsigned __int8 **v13;
  unsigned __int8 *v14;
  const llvm::APInt *v15;
  int v16;
  uint64_t v17;
  llvm::ConstantInt *v18;
  llvm::ValueHandleBase *v19;
  int v20;
  uint64_t v21;
  llvm::ValueHandleBase **v22;
  int v23;
  const llvm::APInt *v24;
  _QWORD *v25;
  llvm::ConstantInt *v26;
  unsigned int v27;
  char v28;
  _QWORD *v29;
  _QWORD *v30;
  uint64_t v31;
  uint64_t v32;
  uint64_t v33;
  llvm::ConstantInt *v34;
  unsigned int v35;
  unint64_t v36;
  llvm::ValueHandleBase *v37;
  uint64_t v38;
  uint64_t **v39;
  uint64_t v40;
  uint64_t v41;
  uint64_t v42;
  llvm::ConstantInt *v43;
  unsigned int v44;
  unint64_t v45;
  unsigned __int8 *v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  llvm::ConstantInt *v50;
  unsigned int v51;
  unint64_t v52;
  unsigned __int8 *v53;
  uint64_t v54;
  uint64_t v55;
  llvm::ConstantInt *v56;
  unsigned int v57;
  unint64_t v58;
  llvm::ValueHandleBase *v59;
  llvm::ValueHandleBase *v60;
  _QWORD *v61;
  llvm::ConstantInt *v62;
  unsigned int v63;
  char v64;
  uint64_t *v65;
  uint64_t v66;
  uint64_t *v67;
  llvm::Value *v68;
  uint64_t v69;
  uint64_t v70;
  unsigned int v71;
  uint64_t v72;
  uint64_t *v73;
  uint64_t v74;
  unsigned __int8 *v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unsigned __int8 *v79;
  llvm::BasicBlock *v80;
  _DWORD *v81;
  _DWORD *v82;
  uint64_t v83;
  llvm::Value *v84;
  _QWORD *v85;
  char *v86;
  char *v87;
  unsigned __int8 **v88;
  int v89;
  unsigned __int8 *v90;
  unsigned __int8 *v91;
  unsigned __int8 *v92;
  uint64_t v93;
  _QWORD *v94;
  char *v95;
  char *v96;
  llvm::Value *v97;
  _QWORD *v98;
  uint64_t v99;
  char *v100;
  char *v101;
  unsigned __int8 **v102;
  int v103;
  unsigned __int8 *v104;
  unsigned __int8 *v105;
  unsigned __int8 *v106;
  _QWORD *v107;
  llvm::ValueHandleBase **v108;
  uint64_t *i;
  uint64_t *v110;
  uint64_t v111;
  unsigned __int8 *v112;
  unsigned __int8 *v113;
  llvm::Value *v114;
  uint64_t v115;
  uint64_t v116;
  unsigned int v117;
  uint64_t v118;
  uint64_t *v119;
  uint64_t v120;
  uint64_t v121;
  unsigned int v122;
  uint64_t v123;
  uint64_t *v124;
  uint64_t v125;
  unsigned __int8 *v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t v129;
  unsigned __int8 *v130;
  _DWORD *v131;
  _DWORD *v132;
  uint64_t v133;
  llvm::Value *v134;
  _QWORD *v135;
  char *v136;
  char *v137;
  unsigned __int8 **v138;
  int v139;
  unsigned __int8 *v140;
  unsigned __int8 *v141;
  unsigned __int8 *v142;
  uint64_t v143;
  _QWORD *v144;
  uint64_t v145;
  uint64_t *v146;
  uint64_t **v147;
  uint64_t v148;
  char *v149;
  char *v150;
  llvm::Value *v151;
  uint64_t v152;
  _QWORD *v153;
  char *v154;
  char *v155;
  unsigned __int8 **v156;
  int v157;
  unsigned __int8 *v158;
  unsigned __int8 *v159;
  unsigned __int8 *v160;
  char *v161;
  char *v162;
  llvm::Value *v163;
  uint64_t v164;
  char *v165;
  char *v166;
  unsigned __int8 **v167;
  int v168;
  unsigned __int8 *v169;
  unsigned __int8 *v170;
  unsigned __int8 *v171;
  uint64_t *v172;
  uint64_t *v173;
  uint64_t *v174;
  uint64_t *v175;
  unsigned __int8 *v176;
  unsigned __int8 *v177;
  llvm::ConstantInt *v178;
  llvm::ValueHandleBase *v179;
  llvm::Value *v180;
  _QWORD *v181;
  uint64_t v182;
  unsigned int v183;
  uint64_t v184;
  uint64_t *v185;
  uint64_t v186;
  unsigned __int8 *v187;
  uint64_t v188;
  uint64_t v189;
  uint64_t v190;
  unsigned __int8 *v191;
  _DWORD *v192;
  _DWORD *v193;
  uint64_t v194;
  llvm::Value *v195;
  _QWORD *v196;
  char *v197;
  char *v198;
  unsigned __int8 **v199;
  int v200;
  unsigned __int8 *v201;
  unsigned __int8 *v202;
  unsigned __int8 *v203;
  uint64_t v204;
  _QWORD *v205;
  uint64_t **v206;
  char *v207;
  char *v208;
  llvm::Value *v209;
  uint64_t v210;
  _QWORD *v211;
  uint64_t v212;
  char *v213;
  char *v214;
  unsigned __int8 **v215;
  int v216;
  unsigned __int8 *v217;
  unsigned __int8 *v218;
  unsigned __int8 *v219;
  uint64_t v220;
  uint64_t **v221;
  uint64_t v222;
  uint64_t *v223;
  unsigned __int8 *v224;
  llvm::ValueHandleBase *v225;
  uint64_t *v226;
  llvm::BasicBlock *v227;
  uint64_t v228;
  char *v229;
  _QWORD *v230;
  llvm::ValueHandleBase *v231;
  uint64_t Declaration;
  int v233;
  uint64_t v234;
  uint64_t v235;
  char *v236;
  _QWORD *v237;
  uint64_t v238;
  llvm::ValueHandleBase *v239;
  llvm::ValueHandleBase **v240;
  uint64_t *v241;
  llvm::ValueHandleBase *v242;
  char *v243;
  unsigned int v244;
  __int16 v245;
  uint64_t v246;
  llvm::ValueHandleBase *v247;
  llvm::ValueHandleBase *v248;
  void *v249;
  uint64_t v250;
  _BYTE v251[16];
  __int16 v252;
  void *v253;
  uint64_t v254;
  _QWORD v255[2];
  __int16 v256;
  void *v257;
  uint64_t v258;
  _BYTE v259[16];
  __int16 v260;
  char *v261;
  unsigned int v262;
  uint64_t v263;
  uint64_t v264;
  uint64_t *v265;
  uint64_t v266;
  uint64_t v267;

  v233 = (int)a3;
  v267 = *MEMORY[0x1E0C80C00];
  v5 = *(uint64_t **)(*(_QWORD *)(*(_QWORD *)(a2 + 40) + 56) + 40);
  v241 = **(uint64_t ***)a2;
  v6 = *(llvm::ConstantInt **)(*v241 + 1888);
  v228 = *v241;
  v262 = *(_DWORD *)(*v241 + 1896) >> 8;
  if (v262 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v261, 0, 0);
  else
    v261 = 0;
  v8 = llvm::ConstantInt::get(v6, (llvm::LLVMContext *)&v261, a3);
  if (v262 >= 0x41 && v261)
    MEMORY[0x1CAA32F9C](v261, 0x1000C8000313F17);
  v9 = *(llvm::ConstantInt **)(v228 + 1936);
  v262 = *(_DWORD *)(v228 + 1944) >> 8;
  if (v262 > 0x40)
    llvm::APInt::initSlowCase((llvm::APInt *)&v261, 0, 0);
  else
    v261 = 0;
  v10 = llvm::ConstantInt::get(v9, (llvm::LLVMContext *)&v261, v7);
  if (v262 >= 0x41 && v261)
    MEMORY[0x1CAA32F9C](v261, 0x1000C8000313F17);
  v11 = (uint64_t *)sub_1C4773D54((uint64_t)&v261, a2, 0, 0, 0);
  v12 = *(_DWORD *)(a2 + 20);
  if ((v12 & 0x40000000) != 0)
    v13 = *(unsigned __int8 ***)(a2 - 8);
  else
    v13 = (unsigned __int8 **)(a2 - 32 * (v12 & 0x7FFFFFF));
  v14 = *v13;
  v257 = "flg";
  v260 = 259;
  v224 = sub_1C4773E38(v11, 38, v14, v228 + 1936, (uint64_t)&v257);
  if (v233)
  {
    v16 = *(_DWORD *)(a2 + 20);
    if ((v16 & 0x40000000) != 0)
      v17 = *(_QWORD *)(a2 - 8);
    else
      v17 = a2 - 32 * (v16 & 0x7FFFFFF);
    v19 = *(llvm::ValueHandleBase **)(v17 + 32);
    v22 = (llvm::ValueHandleBase **)(v17 + 64);
    v23 = 2421;
  }
  else
  {
    v18 = *(llvm::ConstantInt **)(v228 + 1936);
    LODWORD(v258) = *(_DWORD *)(v228 + 1944) >> 8;
    if (v258 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&v257, 0, 0);
    else
      v257 = 0;
    v19 = llvm::ConstantInt::get(v18, (llvm::LLVMContext *)&v257, v15);
    if (v258 >= 0x41 && v257)
      MEMORY[0x1CAA32F9C](v257, 0x1000C8000313F17);
    v20 = *(_DWORD *)(a2 + 20);
    if ((v20 & 0x40000000) != 0)
      v21 = *(_QWORD *)(a2 - 8);
    else
      v21 = a2 - 32 * (v20 & 0x7FFFFFF);
    v22 = (llvm::ValueHandleBase **)(v21 + 32);
    if (*(_DWORD *)(*(_QWORD *)(a2 - 32) + 36) == 2664)
      v23 = 2668;
    else
      v23 = 2622;
  }
  v225 = *v22;
  Declaration = llvm::Intrinsic::getDeclaration(v5, v23, 0, 0);
  if (*((_BYTE *)v19 + 16) == 16 && *((_BYTE *)v225 + 16) == 16 && v224[16] == 16)
  {
    v25 = (_QWORD *)((char *)v225 + 24);
    if (*((_DWORD *)v225 + 8) >= 0x41u)
      v25 = (_QWORD *)*v25;
    if (*(_BYTE *)(a1 + 28) && *v25 == 2)
    {
      v26 = *(llvm::ConstantInt **)(v228 + 1936);
      v27 = *(_DWORD *)(v228 + 1944);
      LODWORD(v258) = v27 >> 8;
      if (v27 >> 8 > 0x40)
      {
        llvm::APInt::initSlowCase((llvm::APInt *)&v257, 3, 0);
      }
      else
      {
        v28 = v27 <= 0xFF ? 0 : 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v27);
        v257 = (void *)(v28 & 3);
      }
      v225 = llvm::ConstantInt::get(v26, (llvm::LLVMContext *)&v257, v24);
      if (v258 >= 0x41)
      {
        if (v257)
          MEMORY[0x1CAA32F9C](v257, 0x1000C8000313F17);
      }
    }
    v29 = v224 + 24;
    if (*((_DWORD *)v224 + 8) >= 0x41u)
      v29 = (_QWORD *)*v29;
    v30 = (_QWORD *)*v29;
    if (v30)
    {
      v31 = 0;
      v32 = ~(_DWORD)v30;
      do
      {
        v33 = dword_1C865F650[v31];
        if ((v32 & v33) == 0)
        {
          v34 = *(llvm::ConstantInt **)(v228 + 1936);
          v35 = *(_DWORD *)(v228 + 1944);
          LODWORD(v258) = v35 >> 8;
          if (v35 >> 8 > 0x40)
          {
            llvm::APInt::initSlowCase((llvm::APInt *)&v257, v33, 0);
          }
          else
          {
            if (v35 <= 0xFF)
              v36 = 0;
            else
              v36 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v35);
            v257 = (void *)(v36 & v33);
          }
          v37 = llvm::ConstantInt::get(v34, (llvm::LLVMContext *)&v257, v24);
          if (v258 >= 0x41 && v257)
            MEMORY[0x1CAA32F9C](v257, 0x1000C8000313F17);
          if (v233)
          {
            v38 = Declaration;
            if (Declaration)
              v39 = *(uint64_t ***)(Declaration + 24);
            else
              v39 = 0;
            v253 = v37;
            v254 = (uint64_t)v19;
            v255[0] = v225;
            v260 = 257;
            v40 = 3;
          }
          else
          {
            v38 = Declaration;
            if (Declaration)
              v39 = *(uint64_t ***)(Declaration + 24);
            else
              v39 = 0;
            v253 = v37;
            v254 = (uint64_t)v225;
            v260 = 257;
            v40 = 2;
          }
          sub_1C4774778((uint64_t *)&v261, v39, v38, (uint64_t *)&v253, v40, (uint64_t)&v257, 0);
        }
        ++v31;
      }
      while (v31 != 4);
    }
    else
    {
      if (v233)
      {
        v220 = Declaration;
        if (Declaration)
          v221 = *(uint64_t ***)(Declaration + 24);
        else
          v221 = 0;
        v253 = v224;
        v254 = (uint64_t)v19;
        v255[0] = v225;
        v260 = 257;
        v222 = 3;
      }
      else
      {
        v220 = Declaration;
        if (Declaration)
          v221 = *(uint64_t ***)(Declaration + 24);
        else
          v221 = 0;
        v253 = v224;
        v254 = (uint64_t)v225;
        v260 = 257;
        v222 = 2;
      }
      sub_1C4774778((uint64_t *)&v261, v221, v220, (uint64_t *)&v253, v222, (uint64_t)&v257, 0);
    }
    goto LABEL_343;
  }
  v41 = 0;
  v257 = v259;
  v258 = 0x400000000;
  do
  {
    v42 = dword_1C865F650[v41];
    v243 = 0;
    v43 = *(llvm::ConstantInt **)(v228 + 1936);
    v44 = *(_DWORD *)(v228 + 1944);
    LODWORD(v254) = v44 >> 8;
    if (v44 >> 8 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v253, v42, 0);
    }
    else
    {
      if (v44 <= 0xFF)
        v45 = 0;
      else
        v45 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v44);
      v253 = (void *)(v45 & v42);
    }
    v46 = (unsigned __int8 *)llvm::ConstantInt::get(v43, (llvm::LLVMContext *)&v253, v24);
    if (v254 >= 0x41 && v253)
      MEMORY[0x1CAA32F9C](v253, 0x1000C8000313F17);
    v243 = (char *)v46;
    v246 = 0;
    v256 = 257;
    v47 = sub_1C4D89BCC((uint64_t)&v261, v224, (uint64_t)v46, (uint64_t)&v253);
    v249 = "flgCmp";
    v252 = 259;
    v246 = sub_1C4774B48((uint64_t)&v261, 33, v47, (uint64_t)v10, (uint64_t)&v249);
    if ((llvm::ValueHandleBase *)v246 != v8)
      sub_1C6211B60((uint64_t)&v257, (uint64_t *)&v243, &v246);
    ++v41;
  }
  while (v41 != 4);
  v48 = 0;
  v253 = v255;
  v254 = 0x400000000;
  do
  {
    v49 = dword_1C865F638[v48];
    v243 = 0;
    v50 = *(llvm::ConstantInt **)(v228 + 1936);
    v51 = *(_DWORD *)(v228 + 1944);
    LODWORD(v250) = v51 >> 8;
    if (v51 >> 8 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v249, v49, 0);
    }
    else
    {
      if (v51 <= 0xFF)
        v52 = 0;
      else
        v52 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v51);
      v249 = (void *)(v52 & v49);
    }
    v53 = (unsigned __int8 *)llvm::ConstantInt::get(v50, (llvm::LLVMContext *)&v249, v24);
    if (v250 >= 0x41 && v249)
      MEMORY[0x1CAA32F9C](v249, 0x1000C8000313F17);
    v243 = (char *)v53;
    v246 = 0;
    v249 = "ordcmp";
    v252 = 259;
    v246 = sub_1C4774B48((uint64_t)&v261, 32, (uint64_t)v19, (uint64_t)v53, (uint64_t)&v249);
    if ((llvm::ValueHandleBase *)v246 != v8)
      sub_1C6211B60((uint64_t)&v253, (uint64_t *)&v243, &v246);
    ++v48;
  }
  while (v48 != 6);
  v54 = 0;
  v249 = v251;
  v250 = 0x400000000;
  do
  {
    v55 = dword_1C865F660[v54];
    v246 = 0;
    v56 = *(llvm::ConstantInt **)(v228 + 1936);
    v57 = *(_DWORD *)(v228 + 1944);
    v244 = v57 >> 8;
    if (v57 >> 8 > 0x40)
    {
      llvm::APInt::initSlowCase((llvm::APInt *)&v243, v55, 0);
    }
    else
    {
      if (v57 <= 0xFF)
        v58 = 0;
      else
        v58 = 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v57);
      v243 = (char *)(v58 & v55);
    }
    v59 = llvm::ConstantInt::get(v56, (llvm::LLVMContext *)&v243, v24);
    if (v244 >= 0x41 && v243)
      MEMORY[0x1CAA32F9C](v243, 0x1000C8000313F17);
    v246 = (uint64_t)v59;
    v242 = 0;
    v243 = "scpcmp";
    v245 = 259;
    v242 = (llvm::ValueHandleBase *)sub_1C4774B48((uint64_t)&v261, 32, (uint64_t)v225, (uint64_t)v59, (uint64_t)&v243);
    if (v242 != v8)
    {
      v60 = (llvm::ValueHandleBase *)v246;
      v61 = (_QWORD *)(v246 + 24);
      if (*(_DWORD *)(v246 + 32) >= 0x41u)
        v61 = (_QWORD *)*v61;
      if (*(_BYTE *)(a1 + 28) && *v61 == 2)
      {
        v62 = *(llvm::ConstantInt **)(v228 + 1936);
        v63 = *(_DWORD *)(v228 + 1944);
        v244 = v63 >> 8;
        if (v63 >> 8 > 0x40)
        {
          llvm::APInt::initSlowCase((llvm::APInt *)&v243, 3, 0);
        }
        else
        {
          v64 = v63 <= 0xFF ? 0 : 0xFFFFFFFFFFFFFFFFLL >> -BYTE1(v63);
          v243 = (char *)(v64 & 3);
        }
        v60 = llvm::ConstantInt::get(v62, (llvm::LLVMContext *)&v243, v24);
        if (v244 >= 0x41)
        {
          if (v243)
            MEMORY[0x1CAA32F9C](v243, 0x1000C8000313F17);
        }
      }
      v246 = (uint64_t)v60;
      sub_1C6211B60((uint64_t)&v249, &v246, (uint64_t *)&v242);
    }
    ++v54;
  }
  while (v54 != 5);
  v65 = *(uint64_t **)(a2 + 40);
  v66 = v65[7];
  if ((_DWORD)v258)
  {
    v67 = (uint64_t *)v257;
    v223 = (uint64_t *)((char *)v257 + 16 * v258);
    v238 = v66 + 72;
    v235 = v65[7];
    while (1)
    {
      v68 = (llvm::Value *)v67[1];
      v234 = *v67;
      v226 = v67;
      v243 = "afterMemFlag";
      v245 = 259;
      v69 = llvm::BasicBlock::splitBasicBlock(v65, v265, (uint64_t)&v243, 0);
      v243 = "memFlagBB";
      v245 = 259;
      v70 = operator new();
      *(_QWORD *)v70 = *v241 + 1600;
      *(_QWORD *)(v70 + 8) = 0;
      v71 = *(_DWORD *)(v70 + 20) & 0xC0000000;
      *(_QWORD *)(v70 + 24) = 0;
      v72 = v70 + 24;
      *(_DWORD *)(v70 + 16) = 22;
      *(_DWORD *)(v70 + 20) = v71;
      *(_QWORD *)(v70 + 32) = 0;
      *(_QWORD *)(v70 + 40) = v70 + 40;
      *(_QWORD *)(v70 + 48) = v70 + 40;
      *(_QWORD *)(v70 + 56) = 0;
      if (v66)
      {
        if (v69)
          v73 = (uint64_t *)(v69 + 24);
        else
          v73 = (uint64_t *)v238;
        llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v238, (_QWORD *)v70);
        v74 = *v73;
        *(_QWORD *)(v70 + 24) = *v73;
        *(_QWORD *)(v70 + 32) = v73;
        *(_QWORD *)(v74 + 8) = v72;
        *v73 = v72;
      }
      llvm::Value::setName((uint64_t ***)v70, (uint64_t)&v243);
      v75 = 0;
      v76 = v65[5];
      if (v76)
        v77 = v76 - 24;
      else
        v77 = 0;
      if (*(unsigned __int8 *)(v77 + 16) - 29 >= 0xB)
        v78 = 0;
      else
        v78 = v77;
      v264 = *(_QWORD *)(v78 + 40);
      v265 = (uint64_t *)(v78 + 24);
      v79 = *(unsigned __int8 **)(v78 + 48);
      v243 = (char *)v79;
      if (v79)
      {
        llvm::MetadataTracking::track((uint64_t)&v243, v79, 2);
        v75 = (unsigned __int8 *)v243;
      }
      sub_1C4774EF4((uint64_t)&v261, 0, (uint64_t)v75);
      if (v243)
        llvm::MetadataTracking::untrack((uint64_t)&v243, (unsigned __int8 *)v243);
      v80 = (llvm::BasicBlock *)v69;
      v81 = operator new(0xA0uLL);
      v82 = v81;
      v83 = 0;
      v84 = (llvm::Value *)(v81 + 24);
      v81[29] = v81[29] & 0x38000000 | 3;
      do
      {
        v85 = &v81[v83];
        *v85 = 0;
        v85[1] = 0;
        v85[2] = 0;
        v85[3] = v84;
        v83 += 8;
      }
      while (v83 != 24);
      v227 = v80;
      llvm::BranchInst::BranchInst((llvm::BranchInst *)(v81 + 24), (llvm::BasicBlock *)v70, v80, v68, 0);
      v245 = 257;
      (*(void (**)(uint64_t, llvm::Value *, char **, uint64_t, uint64_t *))(*(_QWORD *)v266 + 16))(v266, v84, &v243, v264, v265);
      if (v262)
      {
        v86 = v261;
        v87 = &v261[16 * v262];
        v88 = (unsigned __int8 **)(v82 + 36);
        do
        {
          v89 = *(_DWORD *)v86;
          v90 = (unsigned __int8 *)*((_QWORD *)v86 + 1);
          if (v90)
          {
            if (!v89)
            {
              v246 = *((_QWORD *)v86 + 1);
              llvm::MetadataTracking::track((uint64_t)&v246, v90, 2);
              v91 = *v88;
              if (!*v88)
              {
LABEL_148:
                v92 = (unsigned __int8 *)v246;
                *v88 = (unsigned __int8 *)v246;
                if (v92)
                  llvm::MetadataTracking::retrack((uint64_t)&v246, v92, (uint64_t)(v82 + 36));
                goto LABEL_145;
              }
LABEL_142:
              llvm::MetadataTracking::untrack((uint64_t)(v82 + 36), v91);
              goto LABEL_148;
            }
          }
          else
          {
            v91 = *v88;
            if (!*v88 && (*((_BYTE *)v82 + 119) & 0x20) == 0)
              goto LABEL_145;
            if (!v89)
            {
              v246 = 0;
              if (!v91)
                goto LABEL_148;
              goto LABEL_142;
            }
          }
          llvm::Value::setMetadata(v84, *(_DWORD *)v86, (llvm::MDNode *)v90);
LABEL_145:
          v86 += 16;
        }
        while (v86 != v87);
      }
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v78 + 40) + 40, (uint64_t ***)v78);
      v93 = *(_QWORD *)(v78 + 24);
      v94 = *(_QWORD **)(v78 + 32);
      *v94 = v93;
      *(_QWORD *)(v93 + 8) = v94;
      *(_QWORD *)(v78 + 24) = 0;
      *(_QWORD *)(v78 + 32) = 0;
      llvm::Value::deleteValue((llvm::Value *)v78);
      v264 = v70;
      v265 = (uint64_t *)(v70 + 40);
      v95 = (char *)operator new(0x60uLL);
      v96 = v95;
      *((_DWORD *)v95 + 13) = *((_DWORD *)v95 + 13) & 0x38000000 | 1;
      *(_QWORD *)v95 = 0;
      *((_QWORD *)v95 + 2) = 0;
      *((_QWORD *)v95 + 1) = 0;
      *((_QWORD *)v95 + 4) = ***(_QWORD ***)v227 + 1576;
      v97 = (llvm::Value *)(v95 + 32);
      *((_QWORD *)v95 + 3) = v95 + 32;
      *((_QWORD *)v95 + 5) = 0;
      v95[48] = 30;
      v95[49] = 0;
      *((_WORD *)v95 + 25) = 0;
      *((_DWORD *)v95 + 13) = 1;
      *(_OWORD *)(v95 + 56) = 0u;
      *(_OWORD *)(v95 + 72) = 0u;
      *((_DWORD *)v95 + 22) = 0;
      *(_QWORD *)v95 = v227;
      v98 = (_QWORD *)((char *)v227 + 8);
      v99 = *((_QWORD *)v227 + 1);
      *((_QWORD *)v95 + 1) = v99;
      if (v99)
        *(_QWORD *)(v99 + 16) = v95 + 8;
      *((_QWORD *)v95 + 2) = v98;
      *v98 = v95;
      v245 = 257;
      (*(void (**)(uint64_t, llvm::Value *, char **, uint64_t, uint64_t *))(*(_QWORD *)v266 + 16))(v266, v97, &v243, v264, v265);
      if (v262)
      {
        v100 = v261;
        v101 = &v261[16 * v262];
        v102 = (unsigned __int8 **)(v96 + 80);
        do
        {
          v103 = *(_DWORD *)v100;
          v104 = (unsigned __int8 *)*((_QWORD *)v100 + 1);
          if (v104)
          {
            if (!v103)
            {
              v246 = *((_QWORD *)v100 + 1);
              llvm::MetadataTracking::track((uint64_t)&v246, v104, 2);
              v105 = *v102;
              if (!*v102)
              {
LABEL_165:
                v106 = (unsigned __int8 *)v246;
                *v102 = (unsigned __int8 *)v246;
                if (v106)
                  llvm::MetadataTracking::retrack((uint64_t)&v246, v106, (uint64_t)(v96 + 80));
                goto LABEL_162;
              }
LABEL_159:
              llvm::MetadataTracking::untrack((uint64_t)(v96 + 80), v105);
              goto LABEL_165;
            }
          }
          else
          {
            v105 = *v102;
            if (!*v102 && (v96[55] & 0x20) == 0)
              goto LABEL_162;
            if (!v103)
            {
              v246 = 0;
              if (!v105)
                goto LABEL_165;
              goto LABEL_159;
            }
          }
          llvm::Value::setMetadata(v97, *(_DWORD *)v100, (llvm::MDNode *)v104);
LABEL_162:
          v100 += 16;
        }
        while (v100 != v101);
      }
      v66 = v235;
      if ((_DWORD)v254)
        break;
LABEL_265:
      v65 = (uint64_t *)v227;
      v172 = (uint64_t *)*((_QWORD *)v227 + 6);
      v173 = v172 - 3;
      if (!v172)
        v173 = 0;
      if (*((_BYTE *)v173 + 16) == 83)
      {
        v174 = v226;
        do
        {
          v172 = (uint64_t *)v172[1];
          v175 = v172 - 3;
          if (!v172)
            v175 = 0;
        }
        while (*((_BYTE *)v175 + 16) == 83);
      }
      else
      {
        v174 = v226;
      }
      v264 = v172[2];
      v265 = v172;
      v176 = (unsigned __int8 *)v172[3];
      v243 = (char *)v176;
      if (v176)
      {
        llvm::MetadataTracking::track((uint64_t)&v243, v176, 2);
        v177 = (unsigned __int8 *)v243;
      }
      else
      {
        v177 = 0;
      }
      sub_1C4774EF4((uint64_t)&v261, 0, (uint64_t)v177);
      if (v243)
        llvm::MetadataTracking::untrack((uint64_t)&v243, (unsigned __int8 *)v243);
      v67 = v174 + 2;
      if (v67 == v223)
        goto LABEL_281;
    }
    v107 = v253;
    v229 = (char *)v253 + 16 * v254;
    while (1)
    {
      v230 = v107;
      if ((_DWORD)v250)
        break;
      v121 = v70;
LABEL_264:
      v107 = v230 + 2;
      v70 = v121;
      if (v230 + 2 == (_QWORD *)v229)
        goto LABEL_265;
    }
    v231 = (llvm::ValueHandleBase *)*v107;
    v108 = (llvm::ValueHandleBase **)v249;
    v236 = (char *)v249 + 16 * v250;
    v237 = (_QWORD *)v107[1];
    while (2)
    {
      for (i = *(uint64_t **)(v70 + 48); ; i = (uint64_t *)i[1])
      {
        v110 = i - 3;
        if (!i)
          v110 = 0;
        if (*((_BYTE *)v110 + 16) != 83)
          break;
      }
      v111 = (uint64_t)v108[1];
      v239 = *v108;
      v240 = v108;
      v264 = i[2];
      v265 = i;
      v112 = (unsigned __int8 *)i[3];
      v243 = (char *)v112;
      if (v112)
      {
        llvm::MetadataTracking::track((uint64_t)&v243, v112, 2);
        v113 = (unsigned __int8 *)v243;
      }
      else
      {
        v113 = 0;
      }
      sub_1C4774EF4((uint64_t)&v261, 0, (uint64_t)v113);
      if (v243)
        llvm::MetadataTracking::untrack((uint64_t)&v243, (unsigned __int8 *)v243);
      v243 = "andordscp";
      v245 = 259;
      v114 = (llvm::Value *)sub_1C4D89BCC((uint64_t)&v261, v237, v111, (uint64_t)&v243);
      v243 = "afterFence";
      v245 = 259;
      v115 = llvm::BasicBlock::splitBasicBlock((uint64_t *)v70, v265, (uint64_t)&v243, 0);
      v243 = "fenceBB";
      v245 = 259;
      v116 = operator new();
      *(_QWORD *)v116 = *v241 + 1600;
      *(_QWORD *)(v116 + 8) = 0;
      v117 = *(_DWORD *)(v116 + 20) & 0xC0000000;
      *(_QWORD *)(v116 + 24) = 0;
      v118 = v116 + 24;
      *(_DWORD *)(v116 + 16) = 22;
      *(_DWORD *)(v116 + 20) = v117;
      *(_QWORD *)(v116 + 32) = 0;
      *(_QWORD *)(v116 + 40) = v116 + 40;
      *(_QWORD *)(v116 + 48) = v116 + 40;
      *(_QWORD *)(v116 + 56) = 0;
      if (v66)
      {
        if (v115)
          v119 = (uint64_t *)(v115 + 24);
        else
          v119 = (uint64_t *)v238;
        llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v238, (_QWORD *)v116);
        v120 = *v119;
        *(_QWORD *)(v116 + 24) = *v119;
        *(_QWORD *)(v116 + 32) = v119;
        *(_QWORD *)(v120 + 8) = v118;
        *v119 = v118;
      }
      llvm::Value::setName((uint64_t ***)v116, (uint64_t)&v243);
      v243 = "otherBB";
      v245 = 259;
      v121 = operator new();
      *(_QWORD *)v121 = *v241 + 1600;
      *(_QWORD *)(v121 + 8) = 0;
      v122 = *(_DWORD *)(v121 + 20) & 0xC0000000;
      *(_QWORD *)(v121 + 24) = 0;
      v123 = v121 + 24;
      *(_DWORD *)(v121 + 16) = 22;
      *(_DWORD *)(v121 + 20) = v122;
      *(_QWORD *)(v121 + 32) = 0;
      *(_QWORD *)(v121 + 40) = v121 + 40;
      *(_QWORD *)(v121 + 48) = v121 + 40;
      *(_QWORD *)(v121 + 56) = 0;
      if (v66)
      {
        if (v115)
          v124 = (uint64_t *)(v115 + 24);
        else
          v124 = (uint64_t *)v238;
        llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v238, (_QWORD *)v121);
        v125 = *v124;
        *(_QWORD *)(v121 + 24) = *v124;
        *(_QWORD *)(v121 + 32) = v124;
        *(_QWORD *)(v125 + 8) = v123;
        *v124 = v123;
      }
      llvm::Value::setName((uint64_t ***)v121, (uint64_t)&v243);
      v126 = 0;
      v127 = *(_QWORD *)(v70 + 40);
      if (v127)
        v128 = v127 - 24;
      else
        v128 = 0;
      if (*(unsigned __int8 *)(v128 + 16) - 29 >= 0xB)
        v129 = 0;
      else
        v129 = v128;
      v264 = *(_QWORD *)(v129 + 40);
      v265 = (uint64_t *)(v129 + 24);
      v130 = *(unsigned __int8 **)(v129 + 48);
      v243 = (char *)v130;
      if (v130)
      {
        llvm::MetadataTracking::track((uint64_t)&v243, v130, 2);
        v126 = (unsigned __int8 *)v243;
      }
      sub_1C4774EF4((uint64_t)&v261, 0, (uint64_t)v126);
      if (v243)
        llvm::MetadataTracking::untrack((uint64_t)&v243, (unsigned __int8 *)v243);
      v131 = operator new(0xA0uLL);
      v132 = v131;
      v133 = 0;
      v134 = (llvm::Value *)(v131 + 24);
      v131[29] = v131[29] & 0x38000000 | 3;
      do
      {
        v135 = &v131[v133];
        *v135 = 0;
        v135[1] = 0;
        v135[2] = 0;
        v135[3] = v134;
        v133 += 8;
      }
      while (v133 != 24);
      llvm::BranchInst::BranchInst((llvm::BranchInst *)(v131 + 24), (llvm::BasicBlock *)v116, (llvm::BasicBlock *)v121, v114, 0);
      v245 = 257;
      (*(void (**)(uint64_t, llvm::Value *, char **, uint64_t, uint64_t *))(*(_QWORD *)v266 + 16))(v266, v134, &v243, v264, v265);
      if (v262)
      {
        v136 = v261;
        v137 = &v261[16 * v262];
        v138 = (unsigned __int8 **)(v132 + 36);
        do
        {
          v139 = *(_DWORD *)v136;
          v140 = (unsigned __int8 *)*((_QWORD *)v136 + 1);
          if (v140)
          {
            if (!v139)
            {
              v246 = *((_QWORD *)v136 + 1);
              llvm::MetadataTracking::track((uint64_t)&v246, v140, 2);
              v141 = *v138;
              if (!*v138)
              {
LABEL_215:
                v142 = (unsigned __int8 *)v246;
                *v138 = (unsigned __int8 *)v246;
                if (v142)
                  llvm::MetadataTracking::retrack((uint64_t)&v246, v142, (uint64_t)(v132 + 36));
                goto LABEL_212;
              }
LABEL_209:
              llvm::MetadataTracking::untrack((uint64_t)(v132 + 36), v141);
              goto LABEL_215;
            }
          }
          else
          {
            v141 = *v138;
            if (!*v138 && (*((_BYTE *)v132 + 119) & 0x20) == 0)
              goto LABEL_212;
            if (!v139)
            {
              v246 = 0;
              if (!v141)
                goto LABEL_215;
              goto LABEL_209;
            }
          }
          llvm::Value::setMetadata(v134, *(_DWORD *)v136, (llvm::MDNode *)v140);
LABEL_212:
          v136 += 16;
        }
        while (v136 != v137);
      }
      llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v129 + 40) + 40, (uint64_t ***)v129);
      v143 = *(_QWORD *)(v129 + 24);
      v144 = *(_QWORD **)(v129 + 32);
      *v144 = v143;
      *(_QWORD *)(v143 + 8) = v144;
      *(_QWORD *)(v129 + 24) = 0;
      *(_QWORD *)(v129 + 32) = 0;
      llvm::Value::deleteValue((llvm::Value *)v129);
      v264 = v116;
      v265 = (uint64_t *)(v116 + 40);
      if (v233)
      {
        v145 = Declaration;
        v146 = (uint64_t *)(v121 + 40);
        if (Declaration)
          v147 = *(uint64_t ***)(Declaration + 24);
        else
          v147 = 0;
        v246 = v234;
        v247 = v231;
        v248 = v239;
        v245 = 257;
        v148 = 3;
      }
      else
      {
        v145 = Declaration;
        v146 = (uint64_t *)(v121 + 40);
        if (Declaration)
          v147 = *(uint64_t ***)(Declaration + 24);
        else
          v147 = 0;
        v246 = v234;
        v247 = v239;
        v245 = 257;
        v148 = 2;
      }
      sub_1C4774778((uint64_t *)&v261, v147, v145, &v246, v148, (uint64_t)&v243, 0);
      v66 = v235;
      v149 = (char *)operator new(0x60uLL);
      v150 = v149;
      *((_DWORD *)v149 + 13) = *((_DWORD *)v149 + 13) & 0x38000000 | 1;
      *(_QWORD *)v149 = 0;
      *((_QWORD *)v149 + 2) = 0;
      *((_QWORD *)v149 + 1) = 0;
      *((_QWORD *)v149 + 4) = ***(_QWORD ***)v115 + 1576;
      v151 = (llvm::Value *)(v149 + 32);
      *((_QWORD *)v149 + 3) = v149 + 32;
      *((_QWORD *)v149 + 5) = 0;
      v149[48] = 30;
      v149[49] = 0;
      *((_WORD *)v149 + 25) = 0;
      *((_DWORD *)v149 + 13) = 1;
      *(_OWORD *)(v149 + 56) = 0u;
      *(_OWORD *)(v149 + 72) = 0u;
      *((_DWORD *)v149 + 22) = 0;
      *(_QWORD *)v149 = v115;
      v153 = (_QWORD *)(v115 + 8);
      v152 = *(_QWORD *)(v115 + 8);
      *((_QWORD *)v149 + 1) = v152;
      if (v152)
        *(_QWORD *)(v152 + 16) = v149 + 8;
      *((_QWORD *)v149 + 2) = v153;
      *v153 = v149;
      v245 = 257;
      (*(void (**)(uint64_t, llvm::Value *, char **, uint64_t, uint64_t *))(*(_QWORD *)v266 + 16))(v266, v151, &v243, v264, v265);
      if (v262)
      {
        v154 = v261;
        v155 = &v261[16 * v262];
        v156 = (unsigned __int8 **)(v150 + 80);
        do
        {
          v157 = *(_DWORD *)v154;
          v158 = (unsigned __int8 *)*((_QWORD *)v154 + 1);
          if (v158)
          {
            if (!v157)
            {
              v246 = *((_QWORD *)v154 + 1);
              llvm::MetadataTracking::track((uint64_t)&v246, v158, 2);
              v159 = *v156;
              if (!*v156)
              {
LABEL_241:
                v160 = (unsigned __int8 *)v246;
                *v156 = (unsigned __int8 *)v246;
                if (v160)
                  llvm::MetadataTracking::retrack((uint64_t)&v246, v160, (uint64_t)(v150 + 80));
                goto LABEL_238;
              }
LABEL_235:
              llvm::MetadataTracking::untrack((uint64_t)(v150 + 80), v159);
              goto LABEL_241;
            }
          }
          else
          {
            v159 = *v156;
            if (!*v156 && (v150[55] & 0x20) == 0)
              goto LABEL_238;
            if (!v157)
            {
              v246 = 0;
              if (!v159)
                goto LABEL_241;
              goto LABEL_235;
            }
          }
          llvm::Value::setMetadata(v151, *(_DWORD *)v154, (llvm::MDNode *)v158);
LABEL_238:
          v154 += 16;
        }
        while (v154 != v155);
      }
      v264 = v121;
      v265 = v146;
      v161 = (char *)operator new(0x60uLL);
      v162 = v161;
      *((_DWORD *)v161 + 13) = *((_DWORD *)v161 + 13) & 0x38000000 | 1;
      *(_QWORD *)v161 = 0;
      *((_QWORD *)v161 + 2) = 0;
      *((_QWORD *)v161 + 1) = 0;
      *((_QWORD *)v161 + 4) = ***(_QWORD ***)v115 + 1576;
      v163 = (llvm::Value *)(v161 + 32);
      *((_QWORD *)v161 + 3) = v161 + 32;
      *((_QWORD *)v161 + 5) = 0;
      v161[48] = 30;
      v161[49] = 0;
      *((_WORD *)v161 + 25) = 0;
      *((_DWORD *)v161 + 13) = 1;
      *(_OWORD *)(v161 + 56) = 0u;
      *(_OWORD *)(v161 + 72) = 0u;
      *((_DWORD *)v161 + 22) = 0;
      *(_QWORD *)v161 = v115;
      v164 = *(_QWORD *)(v115 + 8);
      *((_QWORD *)v161 + 1) = v164;
      if (v164)
        *(_QWORD *)(v164 + 16) = v161 + 8;
      *((_QWORD *)v161 + 2) = v153;
      *v153 = v161;
      v245 = 257;
      (*(void (**)(uint64_t, llvm::Value *, char **, uint64_t, uint64_t *))(*(_QWORD *)v266 + 16))(v266, v163, &v243, v264, v265);
      if (!v262)
      {
LABEL_260:
        v108 = v240 + 2;
        v70 = v121;
        if (v240 + 2 == (llvm::ValueHandleBase **)v236)
          goto LABEL_264;
        continue;
      }
      break;
    }
    v165 = v261;
    v166 = &v261[16 * v262];
    v167 = (unsigned __int8 **)(v162 + 80);
    while (1)
    {
      v168 = *(_DWORD *)v165;
      v169 = (unsigned __int8 *)*((_QWORD *)v165 + 1);
      if (v169)
      {
        if (!v168)
        {
          v246 = *((_QWORD *)v165 + 1);
          llvm::MetadataTracking::track((uint64_t)&v246, v169, 2);
          v170 = *v167;
          if (!*v167)
          {
LABEL_258:
            v171 = (unsigned __int8 *)v246;
            *v167 = (unsigned __int8 *)v246;
            if (v171)
              llvm::MetadataTracking::retrack((uint64_t)&v246, v171, (uint64_t)(v162 + 80));
            goto LABEL_255;
          }
LABEL_252:
          llvm::MetadataTracking::untrack((uint64_t)(v162 + 80), v170);
          goto LABEL_258;
        }
      }
      else
      {
        v170 = *v167;
        if (!*v167 && (v162[55] & 0x20) == 0)
          goto LABEL_255;
        if (!v168)
        {
          v246 = 0;
          if (!v170)
            goto LABEL_258;
          goto LABEL_252;
        }
      }
      llvm::Value::setMetadata(v163, *(_DWORD *)v165, (llvm::MDNode *)v169);
LABEL_255:
      v165 += 16;
      if (v165 == v166)
        goto LABEL_260;
    }
  }
LABEL_281:
  if ((v233 & 1) == 0)
  {
    v178 = *(llvm::ConstantInt **)(v228 + 1936);
    v244 = *(_DWORD *)(v228 + 1944) >> 8;
    if (v244 > 0x40)
      llvm::APInt::initSlowCase((llvm::APInt *)&v243, 0, 0);
    else
      v243 = 0;
    v179 = llvm::ConstantInt::get(v178, (llvm::LLVMContext *)&v243, v24);
    if (v244 >= 0x41 && v243)
      MEMORY[0x1CAA32F9C](v243, 0x1000C8000313F17);
    v245 = 257;
    v180 = (llvm::Value *)sub_1C4774B48((uint64_t)&v261, 32, (uint64_t)v224, (uint64_t)v179, (uint64_t)&v243);
    v243 = "fenceAfter";
    v245 = 259;
    v181 = (_QWORD *)llvm::BasicBlock::splitBasicBlock(v65, v265, (uint64_t)&v243, 0);
    v243 = "fence";
    v245 = 259;
    v182 = operator new();
    *(_QWORD *)v182 = *v241 + 1600;
    *(_QWORD *)(v182 + 8) = 0;
    v183 = *(_DWORD *)(v182 + 20) & 0xC0000000;
    *(_QWORD *)(v182 + 24) = 0;
    v184 = v182 + 24;
    *(_DWORD *)(v182 + 16) = 22;
    *(_DWORD *)(v182 + 20) = v183;
    *(_QWORD *)(v182 + 32) = 0;
    *(_QWORD *)(v182 + 40) = v182 + 40;
    *(_QWORD *)(v182 + 48) = v182 + 40;
    *(_QWORD *)(v182 + 56) = 0;
    if (v66)
    {
      if (v181)
        v185 = v181 + 3;
      else
        v185 = (uint64_t *)(v66 + 72);
      llvm::SymbolTableListTraits<llvm::BasicBlock>::addNodeToList(v66 + 72, (_QWORD *)v182);
      v186 = *v185;
      *(_QWORD *)(v182 + 24) = *v185;
      *(_QWORD *)(v182 + 32) = v185;
      *(_QWORD *)(v186 + 8) = v184;
      *v185 = v184;
    }
    llvm::Value::setName((uint64_t ***)v182, (uint64_t)&v243);
    v187 = 0;
    v188 = v65[5];
    if (v188)
      v189 = v188 - 24;
    else
      v189 = 0;
    if (*(unsigned __int8 *)(v189 + 16) - 29 >= 0xB)
      v190 = 0;
    else
      v190 = v189;
    v264 = *(_QWORD *)(v190 + 40);
    v265 = (uint64_t *)(v190 + 24);
    v191 = *(unsigned __int8 **)(v190 + 48);
    v243 = (char *)v191;
    if (v191)
    {
      llvm::MetadataTracking::track((uint64_t)&v243, v191, 2);
      v187 = (unsigned __int8 *)v243;
    }
    sub_1C4774EF4((uint64_t)&v261, 0, (uint64_t)v187);
    if (v243)
      llvm::MetadataTracking::untrack((uint64_t)&v243, (unsigned __int8 *)v243);
    v192 = operator new(0xA0uLL);
    v193 = v192;
    v194 = 0;
    v195 = (llvm::Value *)(v192 + 24);
    v192[29] = v192[29] & 0x38000000 | 3;
    do
    {
      v196 = &v192[v194];
      *v196 = 0;
      v196[1] = 0;
      v196[2] = 0;
      v196[3] = v195;
      v194 += 8;
    }
    while (v194 != 24);
    llvm::BranchInst::BranchInst((llvm::BranchInst *)(v192 + 24), (llvm::BasicBlock *)v182, (llvm::BasicBlock *)v181, v180, 0);
    v245 = 257;
    (*(void (**)(uint64_t, llvm::Value *, char **, uint64_t, uint64_t *))(*(_QWORD *)v266 + 16))(v266, v195, &v243, v264, v265);
    if (v262)
    {
      v197 = v261;
      v198 = &v261[16 * v262];
      v199 = (unsigned __int8 **)(v193 + 36);
      do
      {
        v200 = *(_DWORD *)v197;
        v201 = (unsigned __int8 *)*((_QWORD *)v197 + 1);
        if (v201)
        {
          if (!v200)
          {
            v246 = *((_QWORD *)v197 + 1);
            llvm::MetadataTracking::track((uint64_t)&v246, v201, 2);
            v202 = *v199;
            if (!*v199)
            {
LABEL_315:
              v203 = (unsigned __int8 *)v246;
              *v199 = (unsigned __int8 *)v246;
              if (v203)
                llvm::MetadataTracking::retrack((uint64_t)&v246, v203, (uint64_t)(v193 + 36));
              goto LABEL_312;
            }
LABEL_309:
            llvm::MetadataTracking::untrack((uint64_t)(v193 + 36), v202);
            goto LABEL_315;
          }
        }
        else
        {
          v202 = *v199;
          if (!*v199 && (*((_BYTE *)v193 + 119) & 0x20) == 0)
            goto LABEL_312;
          if (!v200)
          {
            v246 = 0;
            if (!v202)
              goto LABEL_315;
            goto LABEL_309;
          }
        }
        llvm::Value::setMetadata(v195, *(_DWORD *)v197, (llvm::MDNode *)v201);
LABEL_312:
        v197 += 16;
      }
      while (v197 != v198);
    }
    llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v190 + 40) + 40, (uint64_t ***)v190);
    v204 = *(_QWORD *)(v190 + 24);
    v205 = *(_QWORD **)(v190 + 32);
    *v205 = v204;
    *(_QWORD *)(v204 + 8) = v205;
    *(_QWORD *)(v190 + 24) = 0;
    *(_QWORD *)(v190 + 32) = 0;
    llvm::Value::deleteValue((llvm::Value *)v190);
    v264 = v182;
    v265 = (uint64_t *)(v182 + 40);
    if (Declaration)
      v206 = *(uint64_t ***)(Declaration + 24);
    else
      v206 = 0;
    v246 = (uint64_t)v224;
    v247 = v225;
    v245 = 257;
    sub_1C4774778((uint64_t *)&v261, v206, Declaration, &v246, 2, (uint64_t)&v243, 0);
    v207 = (char *)operator new(0x60uLL);
    v208 = v207;
    *((_DWORD *)v207 + 13) = *((_DWORD *)v207 + 13) & 0x38000000 | 1;
    *(_QWORD *)v207 = 0;
    *((_QWORD *)v207 + 1) = 0;
    *((_QWORD *)v207 + 2) = 0;
    *((_QWORD *)v207 + 4) = **(_QWORD **)*v181 + 1576;
    v209 = (llvm::Value *)(v207 + 32);
    *((_QWORD *)v207 + 3) = v207 + 32;
    *((_QWORD *)v207 + 5) = 0;
    v207[48] = 30;
    v207[49] = 0;
    *((_WORD *)v207 + 25) = 0;
    *((_DWORD *)v207 + 13) = 1;
    *(_OWORD *)(v207 + 56) = 0u;
    *(_OWORD *)(v207 + 72) = 0u;
    *((_DWORD *)v207 + 22) = 0;
    *(_QWORD *)v207 = v181;
    v212 = v181[1];
    v211 = v181 + 1;
    v210 = v212;
    *((_QWORD *)v207 + 1) = v212;
    if (v212)
      *(_QWORD *)(v210 + 16) = v207 + 8;
    *((_QWORD *)v207 + 2) = v211;
    *v211 = v207;
    v245 = 257;
    (*(void (**)(uint64_t, llvm::Value *, char **, uint64_t, uint64_t *))(*(_QWORD *)v266 + 16))(v266, v209, &v243, v264, v265);
    if (v262)
    {
      v213 = v261;
      v214 = &v261[16 * v262];
      v215 = (unsigned __int8 **)(v208 + 80);
      do
      {
        v216 = *(_DWORD *)v213;
        v217 = (unsigned __int8 *)*((_QWORD *)v213 + 1);
        if (v217)
        {
          if (!v216)
          {
            v246 = *((_QWORD *)v213 + 1);
            llvm::MetadataTracking::track((uint64_t)&v246, v217, 2);
            v218 = *v215;
            if (!*v215)
            {
LABEL_335:
              v219 = (unsigned __int8 *)v246;
              *v215 = (unsigned __int8 *)v246;
              if (v219)
                llvm::MetadataTracking::retrack((uint64_t)&v246, v219, (uint64_t)(v208 + 80));
              goto LABEL_332;
            }
LABEL_329:
            llvm::MetadataTracking::untrack((uint64_t)(v208 + 80), v218);
            goto LABEL_335;
          }
        }
        else
        {
          v218 = *v215;
          if (!*v215 && (v208[55] & 0x20) == 0)
            goto LABEL_332;
          if (!v216)
          {
            v246 = 0;
            if (!v218)
              goto LABEL_335;
            goto LABEL_329;
          }
        }
        llvm::Value::setMetadata(v209, *(_DWORD *)v213, (llvm::MDNode *)v217);
LABEL_332:
        v213 += 16;
      }
      while (v213 != v214);
    }
  }
  if (v249 != v251)
    free(v249);
  if (v253 != v255)
    free(v253);
  if (v257 != v259)
    free(v257);
LABEL_343:
  if (v261 != (char *)&v263)
    free(v261);
}

uint64_t sub_1C55BFD4C(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Expand Fence And Barrier";
  *(_QWORD *)(v2 + 8) = 24;
  *(_QWORD *)(v2 + 16) = "expand-fence-barrier";
  *(_QWORD *)(v2 + 24) = 20;
  *(_QWORD *)(v2 + 32) = &unk_1ED807370;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C627D20C;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C55BFDDC(uint64_t a1, uint64_t a2)
{
  llvm::Instruction **v2;
  uint64_t v3;
  uint64_t v4;
  unsigned int v5;
  char v6;
  uint64_t v7;
  int v8;
  llvm::Instruction **v9;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  uint64_t v14;
  llvm::Instruction *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  uint64_t v19;
  llvm::Instruction **v20;
  int v21;
  void *v22;
  uint64_t v23;
  _QWORD v24[9];

  v24[8] = *MEMORY[0x1E0C80C00];
  v2 = (llvm::Instruction **)v24;
  v22 = v24;
  v23 = 0x800000000;
  v3 = a2 + 24;
  v4 = *(_QWORD *)(a2 + 32);
  if (v4 == a2 + 24)
  {
    v6 = 0;
  }
  else
  {
    v5 = 0;
    v6 = 0;
    do
    {
      v7 = v4 - 56;
      if (!v4)
        v7 = 0;
      if ((*(_BYTE *)(v7 + 33) & 0x20) != 0)
      {
        v8 = *(_DWORD *)(v7 + 36);
        if (v8 == 2422 || v8 == 2664 || v8 == 2577)
        {
          v21 = *(_DWORD *)(v7 + 36);
          v11 = *(_QWORD *)(v7 + 8);
          if (v11)
          {
            v18 = v4;
            v19 = (uint64_t)v2;
            v16 = a1;
            v17 = v3;
            do
            {
              v12 = *(_QWORD *)(v11 + 24);
              sub_1C55BE27C(a1, v12, (const llvm::APInt *)(v21 == 2422));
              v13 = v23;
              if (v23 >= (unint64_t)HIDWORD(v23))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v22, v19, v23 + 1, 8);
                v13 = v23;
              }
              *((_QWORD *)v22 + v13) = v12;
              v5 = v23 + 1;
              LODWORD(v23) = v23 + 1;
              v11 = *(_QWORD *)(v11 + 8);
              v6 = 1;
              v4 = v18;
              v2 = (llvm::Instruction **)v19;
              a1 = v16;
              v3 = v17;
            }
            while (v11);
          }
        }
      }
      v4 = *(_QWORD *)(v4 + 8);
    }
    while (v4 != v3);
    v9 = (llvm::Instruction **)v22;
    if (v5)
    {
      v20 = v2;
      v14 = 8 * v5;
      do
      {
        v15 = *v9++;
        llvm::Instruction::eraseFromParent(v15);
        v14 -= 8;
      }
      while (v14);
      v9 = (llvm::Instruction **)v22;
      v2 = v20;
    }
    if (v9 != v2)
      free(v9);
  }
  return v6 & 1;
}

uint64_t sub_1C55BFF6C()
{
  char v1;
  char *v2;
  __int128 v3;

  *(_QWORD *)&v3 = "HW has multiple L2 caches";
  *((_QWORD *)&v3 + 1) = 25;
  v1 = 0;
  v2 = &v1;
  sub_1C627D314(&v3, &v2);
  return __cxa_atexit((void (*)(void *))sub_1C484246C, &qword_1ED807380, &dword_1C475E000);
}

uint64_t sub_1C55BFFC8(uint64_t a1)
{
  uint64_t v2;

  llvm::initializeDominatorTreeWrapperPassPass(a1);
  llvm::initializePostDominatorTreeWrapperPassPass(a1);
  llvm::initializeLoopInfoWrapperPassPass(a1);
  v2 = operator new();
  *(_QWORD *)v2 = "Simplify CFG prepare";
  *(_QWORD *)(v2 + 8) = 20;
  *(_QWORD *)(v2 + 16) = "simplify-cfg-prepare";
  *(_QWORD *)(v2 + 24) = 20;
  *(_QWORD *)(v2 + 32) = &unk_1EF8F7128;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C55C0068;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C55C0068()
{
  uint64_t v0;
  unint64_t v2;
  unint64_t v4;
  _QWORD *v5;
  _QWORD v6[2];

  v0 = operator new();
  *(_QWORD *)(v0 + 8) = 0;
  *(_QWORD *)(v0 + 16) = &unk_1EF8F7128;
  *(_DWORD *)(v0 + 24) = 2;
  *(_QWORD *)v0 = &off_1E8170908;
  *(_QWORD *)(v0 + 32) = 0;
  *(_QWORD *)(v0 + 40) = v0 + 72;
  *(_QWORD *)(v0 + 48) = v0 + 72;
  *(_QWORD *)(v0 + 56) = 8;
  *(_DWORD *)(v0 + 64) = 0;
  *(_QWORD *)(v0 + 136) = 0;
  *(_QWORD *)(v0 + 144) = 0;
  *(_DWORD *)(v0 + 152) = 5;
  *(_BYTE *)(v0 + 156) = 0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v4 = qword_1ED830BC0[0];
  v2 = atomic_load(&qword_1EF8F7120);
  if (v2 != -1)
  {
    v6[0] = sub_1C55BFFC8;
    v6[1] = &v4;
    v5 = v6;
    std::__call_once(&qword_1EF8F7120, &v5, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return v0;
}

void sub_1C55C0174(llvm::Pass *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E8170908;
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2 != *((void **)this + 5))
    free(v2);
  llvm::Pass::~Pass(this);
}

void sub_1C55C01B4(llvm::Pass *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E8170908;
  v2 = (void *)*((_QWORD *)this + 6);
  if (v2 != *((void **)this + 5))
    free(v2);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

void *sub_1C55C0208(int a1, llvm::AnalysisUsage *this)
{
  llvm::AnalysisUsage::setPreservesCFG(this);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::DominatorTreeWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::PostDominatorTreeWrapperPass::ID);
  sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)llvm::LoopInfoWrapperPass::ID);
  return sub_1C4771E64((uint64_t)this, (uint64_t)this, (uint64_t)&llvm::ScalarEvolutionWrapperPass::ID);
}

uint64_t sub_1C55C0278(uint64_t a1, llvm::Function *a2)
{
  unsigned __int8 v4;
  unsigned __int8 v5;
  unint64_t v6;
  _QWORD *v7;
  char v8;
  uint64_t v9;
  char **v10;
  char *v11;
  void **v12;
  void *v13;
  uint64_t v14;
  void *v15;
  void *v16;
  void **v17;
  void *v18;
  uint64_t v19;
  void **v20;
  void *v21;
  uint64_t v22;
  uint64_t i;
  uint64_t v24;
  const llvm::DataLayout *v25;
  void (**v26)(void);
  unsigned __int8 v27;
  unsigned __int8 v28;
  uint64_t v29;
  uint64_t v30;
  _QWORD *v31;
  const void *v32;
  const void *v33;
  unsigned int v34;
  unsigned int v35;
  _WORD *v36;
  void *v37;
  void *v38;
  unsigned int v39;
  unsigned int v40;
  int v41;
  _DWORD *v42;
  _DWORD *v43;
  llvm::BasicBlock *v45;
  uint64_t SinglePredecessor;
  uint64_t *v47;
  int v48;
  uint64_t v49;
  unsigned int v50;
  uint64_t v51;
  llvm::BasicBlock *v52;
  int v53;
  int v54;
  uint64_t v55;
  uint64_t v56;
  uint64_t v57;
  int v58;
  int v59;
  uint64_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  _QWORD *v64;
  uint64_t v65;
  unsigned int v66;
  uint64_t v68;
  int v69;
  llvm::BasicBlock *v70;
  _QWORD *v71;
  _BYTE *v72;
  _QWORD *v73;
  _BYTE *v74;
  _QWORD *v75;
  unsigned int *v76;
  uint64_t v77;
  _QWORD *v78;
  _BYTE *v79;
  uint64_t *v80;
  _QWORD *v81;
  uint64_t *v82;
  _BOOL4 v83;
  int *v84;
  unint64_t v85;
  _QWORD *v86;
  unint64_t v87;
  llvm::Instruction *v88;
  _QWORD *v89;
  uint64_t v90;
  _QWORD *v91;
  llvm::Instruction *v92;
  _QWORD *v93;
  char v94;
  _QWORD *v95;
  unsigned __int8 *v96;
  llvm::Instruction *v97;
  uint64_t v98;
  _QWORD *v99;
  uint64_t v100;
  uint64_t v101;
  uint64_t v102;
  _BYTE *v103;
  void *v104;
  void *v105;
  unsigned int v106;
  unsigned int v107;
  _BYTE *v108;
  _BYTE *v109;
  void *v110;
  void *v111;
  unsigned int v112;
  unsigned int v113;
  _BYTE *v114;
  int v115;
  void **v116;
  void **v117;
  _DWORD *v118;
  _DWORD *v119;
  _DWORD *v120;
  llvm::BasicBlock *v122;
  uint64_t v123;
  llvm::BasicBlock *v124;
  _QWORD *v125;
  _QWORD *v126;
  unsigned int v127;
  BOOL v128;
  char *FirstNonPHIOrDbg;
  int v130;
  uint64_t v131;
  uint64_t v132;
  uint64_t v133;
  unsigned int v134;
  BOOL v135;
  char *v137;
  int v138;
  char *v139;
  int v140;
  char *v141;
  uint64_t v142;
  uint64_t v143;
  uint64_t v144;
  uint64_t v146;
  uint64_t v147;
  uint64_t v148;
  _BOOL4 v149;
  char *v151;
  llvm::BasicBlock *v152;
  uint64_t *v153;
  uint64_t v154;
  int v155;
  unsigned int v156;
  llvm::BasicBlock **v157;
  uint64_t v158;
  llvm::BasicBlock *v159;
  int v160;
  int v161;
  uint64_t v162;
  llvm::BasicBlock *v163;
  uint64_t v164;
  int v165;
  int v166;
  uint64_t v167;
  uint64_t v168;
  unsigned int v169;
  BOOL v170;
  char *v172;
  BOOL v173;
  int v174;
  uint64_t v176;
  uint64_t v177;
  uint64_t v178;
  uint64_t v179;
  BOOL v180;
  _BYTE *v181;
  uint64_t v182;
  uint64_t v183;
  uint64_t v184;
  _DWORD *v185;
  _BOOL4 v186;
  BOOL v187;
  int v188;
  unsigned int v189;
  unsigned int v190;
  _DWORD *v191;
  uint64_t v192;
  _QWORD *v193;
  _QWORD *v194;
  _DWORD *v195;
  unsigned __int8 *v196;
  uint64_t **v197;
  uint64_t v198;
  uint64_t *v199;
  uint64_t *v200;
  unsigned __int8 *v201;
  int v202;
  _DWORD *v203;
  uint64_t v204;
  unsigned __int8 *v205;
  int v206;
  uint64_t v207;
  uint64_t v208;
  char *v209;
  uint64_t v210;
  _QWORD **v211;
  uint64_t v212;
  uint64_t v213;
  _QWORD *v214;
  char *v215;
  uint64_t v217;
  unsigned int v218;
  unsigned int v219;
  unsigned int v220;
  unsigned int v221;
  unsigned int v222;
  int v223;
  unsigned int v224;
  void *v225;
  llvm::Function *v226;
  char *v227;
  char *v228;
  char *v229;
  _BYTE *v230;
  int v231;
  _DWORD *v232;
  void **v233;
  void **v234;
  char *v235;
  uint64_t v236;
  char *v237;
  _QWORD *v238;
  char v239;
  _BYTE *v240;
  _BYTE *v241;
  uint64_t v242;
  int v243;
  _BYTE v244[71];
  char v245;
  _BYTE *v246;
  _BYTE *v247;
  uint64_t v248;
  int v249;
  _BYTE v250[256];
  _BYTE *v251;
  void *v252;
  uint64_t v253;
  int v254;
  _BYTE v255[256];
  _QWORD v256[3];
  _QWORD *v257;
  void *v258;
  void *v259;
  unsigned int v260;
  unsigned int v261;
  int v262;
  void *v263;
  int v264;
  uint64_t v265;
  void *v266;
  void *v267;
  unsigned int v268;
  unsigned int v269;
  int v270;
  void *v271;
  int v272;
  uint64_t v273;
  void *v274;
  void *v275;
  _BYTE v276[4];
  _BYTE v277[276];
  void *v278;
  void *v279;
  void *v280;
  void *v281;
  uint64_t v282;
  _BYTE v283[24];
  _BYTE *v284;
  uint64_t v285;
  void *v286;
  unsigned int v287;
  unsigned int v288;
  int v289;
  _BYTE v290[64];
  void *v291;
  uint64_t v292;
  _BYTE v293[408];
  unsigned __int8 *v294;
  void *v295;
  unsigned int v296;
  unsigned int v297;
  int v298;
  _WORD v299[32];
  void *v300;
  uint64_t v301;
  _BYTE v302[192];
  __int128 v303;
  _DWORD v304[4];
  _QWORD v305[3];
  uint64_t **v306;
  uint64_t v307;
  void **v308;
  void **v309;
  uint64_t v310;
  void *v311;
  uint64_t v312;
  uint64_t v313;
  void *v314;
  void *v315;
  __int128 v316;
  unsigned int v317;
  unsigned int v318;
  int v319;
  _BYTE v320[64];
  void *v321;
  uint64_t v322;
  _BYTE v323[192];
  void *v324;
  void *v325;
  unsigned int v326;
  unsigned int v327;
  int v328;
  void *v329;
  int v330;
  _QWORD v331[26];

  v331[24] = *MEMORY[0x1E0C80C00];
  v4 = atomic_load((unsigned __int8 *)&qword_1ED807448);
  if ((v4 & 1) == 0 && __cxa_guard_acquire(&qword_1ED807448))
    __cxa_guard_release(&qword_1ED807448);
  v5 = atomic_load((unsigned __int8 *)&qword_1ED807450);
  if ((v5 & 1) == 0 && __cxa_guard_acquire(&qword_1ED807450))
    __cxa_guard_release(&qword_1ED807450);
  v6 = -1;
  v7 = (_QWORD *)((char *)a2 + 72);
  do
  {
    v7 = (_QWORD *)v7[1];
    ++v6;
  }
  while (v7 != (_QWORD *)((char *)a2 + 72));
  if (v6 < 2)
  {
    v8 = 0;
    return v8 & 1;
  }
  v9 = *((_QWORD *)a2 + 5);
  *(_QWORD *)(a1 + 32) = v9 + 272;
  v10 = **(char ****)(a1 + 8);
  do
  {
    v11 = *v10;
    v10 += 2;
  }
  while (v11 != llvm::LoopInfoWrapperPass::ID);
  *(_QWORD *)(a1 + 136) = (*(uint64_t (**)(_QWORD, char *))(*(_QWORD *)*(v10 - 1) + 96))(*(v10 - 1), llvm::LoopInfoWrapperPass::ID)+ 32;
  v12 = **(void ****)(a1 + 8);
  do
  {
    v13 = *v12;
    v12 += 2;
  }
  while (v13 != &llvm::ScalarEvolutionWrapperPass::ID);
  v14 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v12 - 1) + 96))(*(v12 - 1), &llvm::ScalarEvolutionWrapperPass::ID);
  v15 = *(void **)(a1 + 40);
  *(_QWORD *)(a1 + 144) = *(_QWORD *)(v14 + 32);
  v16 = *(void **)(a1 + 48);
  if (v16 == v15)
    goto LABEL_12;
  v217 = *(unsigned int *)(a1 + 56);
  if (v217 < 0x21 || 4 * (*(_DWORD *)(a1 + 60) - *(_DWORD *)(a1 + 64)) >= v217)
  {
    memset(v16, 255, 8 * v217);
LABEL_12:
    *(_DWORD *)(a1 + 60) = 0;
    *(_DWORD *)(a1 + 64) = 0;
    goto LABEL_13;
  }
  free(v16);
  v222 = *(_DWORD *)(a1 + 60) - *(_DWORD *)(a1 + 64);
  v223 = 1 << (33 - __clz(v222 - 1));
  *(_DWORD *)(a1 + 60) = 0;
  *(_DWORD *)(a1 + 64) = 0;
  if (v222 <= 0x10)
    v224 = 32;
  else
    v224 = v223;
  *(_DWORD *)(a1 + 56) = v224;
  v225 = malloc_type_malloc(8 * v224, 0x4065EBACuLL);
  if (!v225)
    goto LABEL_471;
  *(_QWORD *)(a1 + 48) = v225;
  memset(v225, 255, 8 * *(unsigned int *)(a1 + 56));
LABEL_13:
  sub_1C5EA42E4(v9, (llvm::SmallPtrSetImplBase *)(a1 + 40), 0);
  v17 = **(void ****)(a1 + 8);
  do
  {
    v18 = *v17;
    v17 += 2;
  }
  while (v18 != &llvm::DominatorTreeWrapperPass::ID);
  v19 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v17 - 1) + 96))(*(v17 - 1), &llvm::DominatorTreeWrapperPass::ID);
  v20 = **(void ****)(a1 + 8);
  do
  {
    v21 = *v20;
    v20 += 2;
  }
  while (v21 != &llvm::PostDominatorTreeWrapperPass::ID);
  v22 = (*(uint64_t (**)(_QWORD, void *))(*(_QWORD *)*(v20 - 1) + 96))(*(v20 - 1), &llvm::PostDominatorTreeWrapperPass::ID);
  v285 = 1;
  for (i = 8; i != 520; i += 32)
    *(uint64_t *)((char *)&v285 + i) = -4096;
  v24 = v22 + 32;
  sub_1C5EA5D84(v9, (uint64_t)&v285);
  v240 = v244;
  v241 = v244;
  v242 = 8;
  v243 = 0;
  sub_1C5EA6F60(v9, (llvm::SmallPtrSetImplBase *)&v240);
  v25 = *(const llvm::DataLayout **)(a1 + 32);
  v256[0] = &off_1E8170000;
  v256[1] = sub_1C5EACEE8;
  v257 = v256;
  llvm::DivergenceTracker::DivergenceTracker((uint64_t)&v258, a2, v19 + 32, v24, v25, (uint64_t)&v285, (uint64_t)v256, 0, (uint64_t)&v240);
  if (v257 == v256)
  {
    v26 = (void (**)(void))(v256[0] + 32);
  }
  else
  {
    if (!v257)
      goto LABEL_24;
    v26 = (void (**)(void))(*v257 + 40);
  }
  (*v26)();
LABEL_24:
  v251 = v255;
  v252 = v255;
  v253 = 32;
  v254 = 0;
  v246 = v250;
  v247 = v250;
  v248 = 32;
  v249 = 0;
  v27 = atomic_load((unsigned __int8 *)&qword_1ED807458);
  if ((v27 & 1) == 0 && __cxa_guard_acquire(&qword_1ED807458))
  {
    dword_1ED807440 = 15;
    __cxa_guard_release(&qword_1ED807458);
  }
  v28 = atomic_load((unsigned __int8 *)&qword_1ED807460);
  if ((v28 & 1) == 0 && __cxa_guard_acquire(&qword_1ED807460))
  {
    dword_1ED807444 = 50;
    __cxa_guard_release(&qword_1ED807460);
  }
  v245 = 1;
  v29 = *((_QWORD *)a2 + 10);
  if (v29)
    v30 = v29 - 24;
  else
    v30 = 0;
  *(_QWORD *)&v303 = v30;
  sub_1C4EB7378((uint64_t *)&v303, (uint64_t)&v316);
  v31 = v305;
  *(_QWORD *)&v303 = v305;
  v32 = (const void *)*((_QWORD *)&v316 + 1);
  if (*((_QWORD *)&v316 + 1) == (_QWORD)v316)
  {
    *((_QWORD *)&v303 + 1) = v305;
    v33 = (const void *)*((_QWORD *)&v316 + 1);
  }
  else
  {
    v218 = v317;
    v31 = malloc_type_malloc(8 * v317, 0x4065EBACuLL);
    if (!v31)
    {
      if (v218)
        goto LABEL_471;
      v31 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v31)
        goto LABEL_471;
    }
    *((_QWORD *)&v303 + 1) = v31;
    v32 = (const void *)*((_QWORD *)&v316 + 1);
    v33 = (const void *)v316;
  }
  v34 = v318;
  v304[0] = v317;
  if (v32 == v33)
    v35 = v318;
  else
    v35 = v317;
  if (v35)
  {
    memmove(v31, v32, 8 * v35);
    v34 = v318;
  }
  v304[1] = v34;
  v304[2] = v319;
  v311 = &v313;
  v312 = 0x800000000;
  if ((_DWORD)v322)
    sub_1C4DB22B8((uint64_t)&v311, (uint64_t *)&v321);
  v36 = v299;
  v294 = (unsigned __int8 *)v299;
  v37 = v325;
  if (v325 == v324)
  {
    v295 = v299;
    v38 = v325;
  }
  else
  {
    v219 = v326;
    v36 = malloc_type_malloc(8 * v326, 0x4065EBACuLL);
    if (!v36)
    {
      if (v219)
        goto LABEL_471;
      v36 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v36)
        goto LABEL_471;
    }
    v295 = v36;
    v38 = v324;
    v37 = v325;
  }
  v296 = v326;
  v39 = v327;
  if (v37 == v38)
    v40 = v327;
  else
    v40 = v326;
  if (v40)
  {
    memmove(v36, v37, 8 * v40);
    v39 = v327;
  }
  v297 = v39;
  v298 = v328;
  v300 = v302;
  v301 = 0x800000000;
  if (v330)
    sub_1C4DB22B8((uint64_t)&v300, (uint64_t *)&v329);
  v41 = 0;
  v239 = 0;
  while (1)
  {
    if ((_DWORD)v312 != (_DWORD)v301)
      goto LABEL_58;
    if (!(_DWORD)v312)
      break;
    v42 = v300;
    v43 = v311;
    while (*(_QWORD *)v43 == *(_QWORD *)v42 && v43[4] == v42[4])
    {
      v43 += 6;
      v42 += 6;
      if (v43 == (_DWORD *)((char *)v311 + 24 * v312))
        goto LABEL_164;
    }
LABEL_58:
    v45 = (llvm::BasicBlock *)*((_QWORD *)v311 + 3 * v312 - 3);
    SinglePredecessor = llvm::BasicBlock::getSinglePredecessor(v45);
    if (SinglePredecessor)
    {
      v47 = *(uint64_t **)(a1 + 136);
      v48 = *((_DWORD *)v47 + 4);
      if (!v48)
        goto LABEL_474;
      v49 = *v47;
      v50 = v48 - 1;
      v51 = v50 & ((v45 >> 4) ^ (v45 >> 9));
      v52 = *(llvm::BasicBlock **)(v49 + 16 * v51);
      if (v45 == v52)
      {
LABEL_64:
        v55 = *(_QWORD *)(v49 + 16 * v51 + 8);
      }
      else
      {
        v53 = 1;
        while (v52 != (llvm::BasicBlock *)-4096)
        {
          v54 = v51 + v53++;
          v51 = v54 & v50;
          v52 = *(llvm::BasicBlock **)(v49 + 16 * v51);
          if (v45 == v52)
            goto LABEL_64;
        }
        v55 = 0;
      }
      v56 = v50 & ((SinglePredecessor >> 4) ^ (SinglePredecessor >> 9));
      v57 = *(_QWORD *)(v49 + 16 * v56);
      if (SinglePredecessor == v57)
      {
LABEL_70:
        v60 = *(_QWORD *)(v49 + 16 * v56 + 8);
      }
      else
      {
        v58 = 1;
        while (v57 != -4096)
        {
          v59 = v56 + v58++;
          v56 = v59 & v50;
          v57 = *(_QWORD *)(v49 + 16 * v56);
          if (SinglePredecessor == v57)
            goto LABEL_70;
        }
        v60 = 0;
      }
      if (v55 == v60)
      {
LABEL_474:
        v61 = *((_QWORD *)v45 + 6);
        v62 = v61 ? v61 - 24 : 0;
        if ((llvm::BasicBlock *)SinglePredecessor != v45 && *(_BYTE *)(v62 + 16) != 83)
        {
          v64 = (_QWORD *)(SinglePredecessor + 40);
          v63 = *(_QWORD *)(SinglePredecessor + 40);
          if (v63 != SinglePredecessor + 40)
          {
            v65 = v63 - 24;
            if (!v63)
              v65 = 0;
            v66 = *(unsigned __int8 *)(v65 + 16) - 40;
            if (v66 < 0xFFFFFFF5)
              v65 = 0;
            if (v63)
            {
              if (*(_BYTE *)(v65 + 16) == 30 && v66 >= 0xFFFFFFF5 && (*(_DWORD *)(v65 + 20) & 0x7FFFFFF) == 3)
              {
                v68 = *(_QWORD *)(v65 - 96);
                if (v68)
                {
                  if (*(_BYTE *)(v68 + 16) == 81)
                  {
                    v69 = *(_WORD *)(v68 + 18) & 0x3F;
                    if (v69 == 33)
                    {
                      v70 = *(llvm::BasicBlock **)(v65 - 32);
                    }
                    else
                    {
                      if (v69 != 32)
                        goto LABEL_73;
                      v70 = *(llvm::BasicBlock **)(v65 - 64);
                    }
                    if (v70 != v45)
                      goto LABEL_73;
                    v236 = v68;
                    v71 = sub_1C477672C((uint64_t)&v274, *(_QWORD *)(v68 - 32));
                    if (v275 == v274)
                      v72 = v277;
                    else
                      v72 = v276;
                    if (v71 == (_QWORD *)((char *)v275 + 8 * *(unsigned int *)v72))
                    {
                      v78 = sub_1C477672C((uint64_t)&v274, *(_QWORD *)(v236 - 64));
                      v79 = v277;
                      if (v275 != v274)
                        v79 = v276;
                      if (v78 != (_QWORD *)((char *)v275 + 8 * *(unsigned int *)v79))
                      {
                        if (!v41)
                        {
                          sub_1C55C19EC(a1, (uint64_t)a2, (uint64_t)&v258, (llvm::SmallPtrSetImplBase *)&v251, 2365, &v245);
                          sub_1C55C19EC(a1, (uint64_t)a2, (uint64_t)&v258, (llvm::SmallPtrSetImplBase *)&v246, 2408, &v245);
                        }
                        v77 = *(_QWORD *)(v236 - 64);
                        goto LABEL_119;
                      }
                    }
                    v73 = sub_1C477672C((uint64_t)&v274, *(_QWORD *)(v236 - 64));
                    v74 = v277;
                    if (v275 != v274)
                      v74 = v276;
                    if (v73 == (_QWORD *)((char *)v275 + 8 * *(unsigned int *)v74))
                    {
                      v75 = sub_1C477672C((uint64_t)&v274, *(_QWORD *)(v236 - 32));
                      v76 = (unsigned int *)(v275 == v274 ? v277 : v276);
                      if (v75 != (_QWORD *)((char *)v275 + 8 * *v76))
                      {
                        if (!v41)
                        {
                          sub_1C55C19EC(a1, (uint64_t)a2, (uint64_t)&v258, (llvm::SmallPtrSetImplBase *)&v251, 2365, &v245);
                          sub_1C55C19EC(a1, (uint64_t)a2, (uint64_t)&v258, (llvm::SmallPtrSetImplBase *)&v246, 2408, &v245);
                        }
                        v77 = *(_QWORD *)(v236 - 32);
LABEL_119:
                        v237 = (char *)sub_1C477672C((uint64_t)&v251, v77);
                        if (v252 == v251)
                          v80 = (uint64_t *)((char *)&v253 + 4);
                        else
                          v80 = &v253;
                        v235 = (char *)v252 + 8 * *(unsigned int *)v80;
                        v81 = sub_1C477672C((uint64_t)&v246, v77);
                        if (v247 == v246)
                          v82 = (uint64_t *)((char *)&v248 + 4);
                        else
                          v82 = &v248;
                        v83 = v81 != (_QWORD *)&v247[8 * *(unsigned int *)v82];
                        v84 = &dword_1ED807444;
                        if (v237 != v235 || (v41 = 1, v83) && (v84 = &dword_1ED807440, v245))
                        {
                          v85 = *v84;
                          *(_DWORD *)(a1 + 152) = v85;
                          v86 = (_QWORD *)*((_QWORD *)v45 + 6);
                          v238 = (_QWORD *)((char *)v45 + 40);
                          if (v86 == (_QWORD *)((char *)v45 + 40))
                          {
                            v87 = 0;
                          }
                          else
                          {
                            v87 = 0;
                            v88 = (llvm::Instruction *)(v86 - 3);
                            if (v86)
                              v89 = v86 - 3;
                            else
                              v89 = 0;
                            if (*((unsigned __int8 *)v89 + 16) - 29 >= 0xB)
                            {
                              v87 = 0;
                              do
                              {
                                v87 += sub_1C5EA44DC(v88, *(_QWORD *)(a1 + 32), (_QWORD *)(a1 + 40), 1);
                                v85 = *(unsigned int *)(a1 + 152);
                                if (v87 >= v85)
                                  break;
                                v86 = (_QWORD *)v86[1];
                                if (v86 == v238)
                                  break;
                                v88 = (llvm::Instruction *)(v86 - 3);
                                v90 = v86 ? (uint64_t)(v86 - 3) : 0;
                              }
                              while (*(unsigned __int8 *)(v90 + 16) - 29 >= 0xB);
                            }
                          }
                          if (v87 >= v85
                            || (v91 = (_QWORD *)*((_QWORD *)v45 + 6), v91 == v238)
                            || ((v92 = (llvm::Instruction *)(v91 - 3), v91) ? (v93 = v91 - 3) : (v93 = 0),
                                *((unsigned __int8 *)v93 + 16) - 29 < 0xB))
                          {
                            v94 = 0;
                          }
                          else
                          {
                            do
                            {
                              v95 = (_QWORD *)*v64;
                              if ((_QWORD *)*v64 == v64)
                              {
                                v97 = 0;
                              }
                              else
                              {
                                if (v95)
                                  v96 = (unsigned __int8 *)(v95 - 3);
                                else
                                  v96 = 0;
                                if (v96[16] - 29 >= 0xB)
                                  v97 = 0;
                                else
                                  v97 = (llvm::Instruction *)v96;
                              }
                              v91 = (_QWORD *)v91[1];
                              llvm::Instruction::moveBefore(v92, v97);
                              if (v91 == v238)
                                break;
                              v92 = (llvm::Instruction *)(v91 - 3);
                              v98 = v91 ? (uint64_t)(v91 - 3) : 0;
                            }
                            while (*(unsigned __int8 *)(v98 + 16) - 29 >= 0xB);
                            v94 = 1;
                          }
                          v239 |= v94;
                          v41 = 1;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
LABEL_73:
    LODWORD(v312) = v312 - 1;
    if ((_DWORD)v312)
      sub_1C4EB7588(&v303);
  }
LABEL_164:
  if (v300 != v302)
    free(v300);
  if (v295 != v294)
    free(v295);
  if (v311 != &v313)
    free(v311);
  if (*((_QWORD *)&v303 + 1) != (_QWORD)v303)
    free(*((void **)&v303 + 1));
  if (v329 != v331)
    free(v329);
  if (v325 != v324)
    free(v325);
  if (v321 != v323)
    free(v321);
  if (*((_QWORD *)&v316 + 1) != (_QWORD)v316)
    free(*((void **)&v316 + 1));
  if (v247 != v246)
    free(v247);
  if (v252 != v251)
    free(v252);
  v99 = v284;
  if (v284 == v283)
  {
    v100 = 4;
    v99 = v283;
LABEL_188:
    (*(void (**)(void))(*v99 + 8 * v100))();
  }
  else if (v284)
  {
    v100 = 5;
    goto LABEL_188;
  }
  if (v281 != &v282)
    free(v281);
  if (v280 != v279)
    free(v280);
  if (v278 != *(void **)&v277[268])
    free(v278);
  if (v275 != v274)
    free(v275);
  if (v258 != &v260)
    free(v258);
  if (v241 != v240)
    free(v241);
  if ((v285 & 1) == 0)
    MEMORY[0x1CAA32FB4](v286, 8);
  v101 = *((_QWORD *)a2 + 10);
  if (v101)
    v102 = v101 - 24;
  else
    v102 = 0;
  *(_QWORD *)&v316 = v102;
  sub_1C4EB7378((uint64_t *)&v316, (uint64_t)&v258);
  v103 = v320;
  *(_QWORD *)&v316 = v320;
  v104 = v259;
  if (v259 == v258)
  {
    *((_QWORD *)&v316 + 1) = v320;
    v105 = v259;
    goto LABEL_208;
  }
  v220 = v260;
  v103 = malloc_type_malloc(8 * v260, 0x4065EBACuLL);
  if (!v103 && (v220 || (v103 = malloc_type_malloc(1uLL, 0x4065EBACuLL)) == 0))
LABEL_471:
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  *((_QWORD *)&v316 + 1) = v103;
  v105 = v258;
  v104 = v259;
LABEL_208:
  v106 = v261;
  v317 = v260;
  if (v104 == v105)
    v107 = v261;
  else
    v107 = v260;
  if (v107)
  {
    memmove(v103, v104, 8 * v107);
    v106 = v261;
  }
  v318 = v106;
  v319 = v262;
  v108 = v323;
  v321 = v323;
  v322 = 0x800000000;
  if (v264)
    sub_1C4DB22B8((uint64_t)&v321, (uint64_t *)&v263);
  v109 = v290;
  v285 = (uint64_t)v290;
  v110 = v267;
  if (v267 == v266)
  {
    v286 = v290;
    v111 = v267;
  }
  else
  {
    v221 = v268;
    v109 = malloc_type_malloc(8 * v268, 0x4065EBACuLL);
    if (!v109)
    {
      if (v221)
        goto LABEL_471;
      v109 = malloc_type_malloc(1uLL, 0x4065EBACuLL);
      if (!v109)
        goto LABEL_471;
    }
    v286 = v109;
    v111 = v266;
    v110 = v267;
  }
  v287 = v268;
  v112 = v269;
  if (v110 == v111)
    v113 = v269;
  else
    v113 = v268;
  if (v113)
  {
    memmove(v109, v110, 8 * v113);
    v112 = v269;
  }
  v288 = v112;
  v289 = v270;
  v114 = v293;
  v291 = v293;
  v292 = 0x800000000;
  if (v272)
    sub_1C4DB22B8((uint64_t)&v291, (uint64_t *)&v271);
  v115 = 0;
  v116 = &v314;
  v117 = &v315;
  v118 = v304;
  while (2)
  {
    if ((_DWORD)v322 != (_DWORD)v292)
    {
LABEL_235:
      v122 = (llvm::BasicBlock *)*((_QWORD *)v321 + 3 * v322 - 3);
      v123 = *((_QWORD *)a2 + 10);
      if (v123)
        v124 = (llvm::BasicBlock *)(v123 - 24);
      else
        v124 = 0;
      if (v122 == v124)
        goto LABEL_413;
      v125 = (_QWORD *)*((_QWORD *)v122 + 5);
      if (v125 == (_QWORD *)((char *)v122 + 40))
        goto LABEL_413;
      v126 = v125 - 3;
      if (!v125)
        v126 = 0;
      v127 = *((unsigned __int8 *)v126 + 16) - 40;
      if (v127 < 0xFFFFFFF5)
        v126 = 0;
      if (!v125)
        goto LABEL_413;
      v128 = *((_BYTE *)v126 + 16) == 30 && v127 >= 0xFFFFFFF5;
      if (!v128 || (*((_DWORD *)v126 + 5) & 0x7FFFFFF) != 1)
        goto LABEL_413;
      v234 = v116;
      v230 = v114;
      v231 = v115;
      FirstNonPHIOrDbg = llvm::BasicBlock::getFirstNonPHIOrDbg(v122, 1);
      v130 = FirstNonPHIOrDbg[16];
      if ((v130 - 29) < 0xB)
        goto LABEL_252;
      v131 = (uint64_t)FirstNonPHIOrDbg;
      v132 = *((_QWORD *)v122 + 1);
      if (v132)
      {
        while (1)
        {
          v133 = *(_QWORD *)(v132 + 24);
          v134 = *(unsigned __int8 *)(v133 + 16);
          v135 = v133 && v134 >= 0x1C;
          if (v135 && v134 - 29 < 0xB)
            break;
          v132 = *(_QWORD *)(v132 + 8);
          if (!v132)
            goto LABEL_263;
        }
        v152 = *(llvm::BasicBlock **)(v133 + 40);
        if (v152 != v122)
        {
          v153 = *(uint64_t **)(a1 + 136);
          v154 = *v153;
          v155 = *((_DWORD *)v153 + 4);
          v156 = v155 - 1;
          v157 = (llvm::BasicBlock **)(v154
                                     + 16 * ((v155 - 1) & ((v122 >> 4) ^ (v122 >> 9))));
          do
          {
            if (!v155)
              goto LABEL_312;
            v158 = v156 & ((v152 >> 4) ^ (v152 >> 9));
            v159 = *(llvm::BasicBlock **)(v154 + 16 * v158);
            if (v152 == v159)
            {
LABEL_303:
              v162 = *(_QWORD *)(v154 + 16 * v158 + 8);
            }
            else
            {
              v160 = 1;
              while (v159 != (llvm::BasicBlock *)-4096)
              {
                v161 = v158 + v160++;
                v158 = v161 & v156;
                v159 = *(llvm::BasicBlock **)(v154 + 16 * v158);
                if (v152 == v159)
                  goto LABEL_303;
              }
              v162 = 0;
            }
            v163 = *v157;
            v164 = v156 & ((v122 >> 4) ^ (v122 >> 9));
            if (v122 == *v157)
            {
LABEL_309:
              v167 = *(_QWORD *)(v154 + 16 * v164 + 8);
            }
            else
            {
              v165 = 1;
              LODWORD(v164) = v156 & ((v122 >> 4) ^ (v122 >> 9));
              while (v163 != (llvm::BasicBlock *)-4096)
              {
                v166 = v164 + v165++;
                v164 = v166 & v156;
                v163 = *(llvm::BasicBlock **)(v154 + 16 * v164);
                if (v122 == v163)
                  goto LABEL_309;
              }
              v167 = 0;
            }
            if (v162 != v167)
              break;
            do
            {
LABEL_312:
              v132 = *(_QWORD *)(v132 + 8);
              if (!v132)
                goto LABEL_263;
              v168 = *(_QWORD *)(v132 + 24);
              v169 = *(unsigned __int8 *)(v168 + 16);
              if (v168)
                v170 = v169 >= 0x1C;
              else
                v170 = 0;
            }
            while (!v170 || v169 - 29 > 0xA);
            v152 = *(llvm::BasicBlock **)(v168 + 40);
          }
          while (v152 != v122);
        }
LABEL_252:
        v115 = v231;
LABEL_412:
        v114 = v230;
        v116 = v234;
LABEL_413:
        LODWORD(v322) = v322 - 1;
        if ((_DWORD)v322)
          sub_1C4EB7588(&v316);
        continue;
      }
LABEL_263:
      v232 = v118;
      v233 = v117;
      v137 = FirstNonPHIOrDbg + 24;
      v227 = FirstNonPHIOrDbg + 24;
      if ((v130 - 41) <= 0x11)
      {
        LOBYTE(v138) = FirstNonPHIOrDbg[16];
        v139 = FirstNonPHIOrDbg;
        v137 = FirstNonPHIOrDbg + 24;
        do
        {
          if (v138 > 0x39u || ((1 << v138) & 0x300220000000000) == 0)
            break;
          v140 = *((_DWORD *)v139 + 5);
          v141 = (v140 & 0x40000000) != 0 ? (char *)*((_QWORD *)v139 - 1) : &v139[-32 * (v140 & 0x7FFFFFF)];
          v142 = *(unsigned __int8 *)(*(_QWORD *)v141 + 16) <= 0x1Bu ? 0 : *(_QWORD *)v141;
          v143 = *((_QWORD *)v141 + 4);
          v144 = *(unsigned __int8 *)(v143 + 16) <= 0x1Bu ? 0 : v143;
          if (!v142 || v144 == 0)
            break;
          v146 = *(_QWORD *)(v142 + 40);
          v147 = *((_QWORD *)v139 + 5);
          if (v146 == v147)
          {
            v148 = *(_QWORD *)(v142 + 40);
          }
          else if (sub_1C55C22F0(v144))
          {
            v148 = v147;
            if (*(_QWORD *)(v144 + 40) == v147)
              goto LABEL_291;
          }
          else
          {
            v148 = v147;
          }
          if (*(_QWORD *)(v144 + 40) == v148)
            break;
          v149 = sub_1C55C22F0(v142);
          if (v146 != v147 || !v149)
            break;
LABEL_291:
          v137 = (char *)*((_QWORD *)v137 + 1);
          v139 = v137 - 24;
          if (v137)
            v151 = v137 - 24;
          else
            v151 = 0;
          v138 = v151[16];
        }
        while ((v138 - 41) < 0x12);
      }
      v172 = v137 - 24;
      if (!v137)
        v172 = 0;
      if (v172[16] - 29 > 0xA)
      {
        v115 = v231;
        v114 = v230;
        v117 = v233;
        v116 = v234;
        v118 = v232;
        goto LABEL_413;
      }
      v173 = 0;
      v229 = v227;
      v118 = v232;
      v117 = v233;
      v226 = a2;
      while (1)
      {
        if ((v130 - 59) < 0xFFFFFFEE)
          v131 = 0;
        if (v173 || (v130 - 59) < 0xFFFFFFEE)
        {
          v209 = v229;
          goto LABEL_411;
        }
        v174 = *(unsigned __int8 *)(v131 + 16);
        if (v174 > 0x39 || ((1 << v174) & 0x300220000000000) == 0)
        {
LABEL_410:
          v209 = v229;
          goto LABEL_411;
        }
        v176 = *(_QWORD *)(v131 - 64);
        if (*(unsigned __int8 *)(v176 + 16) <= 0x1Bu)
          v177 = 0;
        else
          v177 = *(_QWORD *)(v131 - 64);
        v178 = *(_QWORD *)(v131 - 32);
        if (*(unsigned __int8 *)(v178 + 16) <= 0x1Bu)
          v179 = 0;
        else
          v179 = *(_QWORD *)(v131 - 32);
        if (v177)
          v180 = v179 == 0;
        else
          v180 = 1;
        if (v180)
        {
          v209 = v229;
          v118 = v232;
          v117 = v233;
LABEL_411:
          v115 = (v227 != v209) | v231;
          goto LABEL_412;
        }
        v181 = v108;
        v228 = (char *)*((_QWORD *)v229 + 1);
        v182 = *(_QWORD *)(v177 + 40);
        v183 = *(_QWORD *)(v131 + 40);
        if (v182 == v183)
        {
          v184 = *(_QWORD *)(v177 + 40);
        }
        else if (sub_1C55C22F0(v179))
        {
          v184 = v183;
          if (*(_QWORD *)(v179 + 40) == v183)
          {
            v185 = (_DWORD *)v178;
            v178 = v176;
            goto LABEL_355;
          }
        }
        else
        {
          v184 = v183;
        }
        if (*(_QWORD *)(v179 + 40) == v184
          || ((v186 = sub_1C55C22F0(v177), v182 == v183) ? (v187 = !v186) : (v187 = 1), v185 = (_DWORD *)v176, v187))
        {
          v209 = v229;
          v108 = v181;
          v118 = v232;
          v117 = v233;
          a2 = v226;
          goto LABEL_411;
        }
LABEL_355:
        v188 = v185[5];
        v189 = v188 & 0x7FFFFFF;
        v108 = v181;
        v118 = v232;
        v117 = v233;
        a2 = v226;
        if ((v188 & 0x7FFFFFF) != 0)
        {
          v190 = 0;
          do
          {
            if ((v188 & 0x40000000) != 0)
              v191 = (_DWORD *)*((_QWORD *)v185 - 1);
            else
              v191 = &v185[-8 * v189];
            v192 = *(_QWORD *)&v191[8 * v190];
            v193 = (_QWORD *)(v192 + 24);
            if (*(_DWORD *)(v192 + 32) >= 0x41u)
              v193 = (_QWORD *)*v193;
            v194 = (_QWORD *)*v193;
            if (v194)
            {
              if (v174 != 45 || v194 != (_QWORD *)1)
              {
                if ((v188 & 0x40000000) != 0)
                  v195 = (_DWORD *)*((_QWORD *)v185 - 1);
                else
                  v195 = &v185[-8 * v189];
                v196 = 0;
                v197 = *(uint64_t ***)&v195[8 * v185[15] + 2 * v190];
                v198 = **v197;
                v308 = v234;
                v309 = v233;
                v310 = 0;
                LODWORD(v311) = 0;
                WORD2(v311) = 512;
                BYTE6(v311) = 7;
                v312 = 0;
                v313 = 0;
                v314 = &unk_1E8167888;
                v315 = &unk_1E8167A08;
                v307 = v198;
                v306 = v197 + 5;
                v199 = v197[5];
                if (v199)
                  v200 = v199 - 3;
                else
                  v200 = 0;
                if (*((unsigned __int8 *)v200 + 16) - 29 >= 0xB)
                  v200 = 0;
                v305[2] = v200[5];
                v306 = (uint64_t **)(v200 + 3);
                *(_QWORD *)&v303 = v232;
                *((_QWORD *)&v303 + 1) = 0x200000000;
                v201 = (unsigned __int8 *)v200[6];
                v294 = v201;
                if (v201)
                {
                  llvm::MetadataTracking::track((uint64_t)&v294, v201, 2);
                  v196 = v294;
                }
                sub_1C4774EF4((uint64_t)&v303, 0, (uint64_t)v196);
                if (v294)
                  llvm::MetadataTracking::untrack((uint64_t)&v294, v294);
                v202 = v185[5];
                if ((v202 & 0x40000000) != 0)
                  v203 = (_DWORD *)*((_QWORD *)v185 - 1);
                else
                  v203 = &v185[-8 * (v202 & 0x7FFFFFF)];
                v204 = *(_QWORD *)&v203[8 * v190];
                v299[0] = 257;
                v205 = sub_1C4773860((uint64_t)&v303, (v174 - 28), (_QWORD *)v178, v204, (uint64_t)&v294, 0);
                sub_1C6125834((uint64_t)v185, v190, (uint64_t)v205);
                if (v205 && v205[16] >= 0x1Cu)
                  llvm::Instruction::copyIRFlags((uint64_t)v205, v131, 1);
                v118 = v232;
                if ((_DWORD *)v303 != v232)
                  free((void *)v303);
                v117 = v233;
                goto LABEL_368;
              }
              goto LABEL_375;
            }
            if (v174 > 55)
            {
              if (v174 != 56)
              {
                if (v174 != 57)
                  goto LABEL_410;
                goto LABEL_375;
              }
            }
            else if (v174 != 45)
            {
              if (v174 != 41)
                goto LABEL_410;
LABEL_375:
              sub_1C6125834((uint64_t)v185, v190, v178);
            }
LABEL_368:
            ++v190;
            v188 = v185[5];
            v189 = v188 & 0x7FFFFFF;
          }
          while (v190 != (v188 & 0x7FFFFFF));
        }
        llvm::Value::doRAUW((llvm::ValueAsMetadata *)v131, (llvm::Value *)v185, (llvm::Value *)1);
        v206 = *(_DWORD *)(v131 + 20);
        if ((v206 & 0x40000000) != 0)
        {
          v208 = *(_QWORD *)(v131 - 8);
          v207 = v206 & 0x7FFFFFF;
        }
        else
        {
          v207 = v206 & 0x7FFFFFF;
          v208 = v131 - 32 * v207;
        }
        v209 = v228;
        if (v207)
        {
          v210 = 32 * v207;
          v211 = (_QWORD **)(v208 + 16);
          do
          {
            if (*(v211 - 2))
            {
              **v211 = *(v211 - 1);
              v212 = (uint64_t)*(v211 - 1);
              if (v212)
                *(_QWORD *)(v212 + 16) = *v211;
            }
            *(v211 - 2) = 0;
            v211 += 4;
            v210 -= 32;
          }
          while (v210);
        }
        llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v131 + 40) + 40, (uint64_t ***)v131);
        v213 = *(_QWORD *)(v131 + 24);
        v214 = *(_QWORD **)(v131 + 32);
        *v214 = v213;
        *(_QWORD *)(v213 + 8) = v214;
        *(_QWORD *)(v131 + 24) = 0;
        *(_QWORD *)(v131 + 32) = 0;
        llvm::Value::deleteValue((llvm::Value *)v131);
        v131 = (uint64_t)(v228 - 24);
        v173 = v228 == 0;
        if (v228)
          v215 = v228 - 24;
        else
          v215 = 0;
        v130 = v215[16];
        v229 = v228;
        if ((v130 - 29) < 0xB)
          goto LABEL_411;
      }
    }
    break;
  }
  if ((_DWORD)v322)
  {
    v119 = v291;
    v120 = v321;
    while (*(_QWORD *)v120 == *(_QWORD *)v119 && v120[4] == v119[4])
    {
      v120 += 6;
      v119 += 6;
      if (v120 == (_DWORD *)((char *)v321 + 24 * v322))
        goto LABEL_418;
    }
    goto LABEL_235;
  }
LABEL_418:
  if (v291 != v114)
    free(v291);
  if (v286 != (void *)v285)
    free(v286);
  if (v321 != v108)
    free(v321);
  if (*((_QWORD *)&v316 + 1) != (_QWORD)v316)
    free(*((void **)&v316 + 1));
  if (v271 != &v273)
    free(v271);
  if (v267 != v266)
    free(v267);
  if (v263 != &v265)
    free(v263);
  if (v259 != v258)
    free(v259);
  v8 = v239 | v115;
  return v8 & 1;
}

void sub_1C55C19EC(uint64_t a1, uint64_t a2, uint64_t a3, llvm::SmallPtrSetImplBase *this, int a5, _BYTE *a6)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v12;
  uint64_t v13;
  unsigned int v14;
  uint64_t v15;
  uint64_t v16;
  int v17;
  uint64_t v18;
  uint64_t v19;
  uint64_t v20;
  uint64_t v21;
  uint64_t v22;
  unint64_t v23;
  unsigned int v24;
  BOOL v25;
  BOOL v26;
  char v27;
  uint64_t *v28;
  int v29;
  uint64_t v30;
  uint64_t v31;
  unsigned int v32;
  uint64_t v33;
  uint64_t v34;
  int v35;
  int v36;
  const llvm::Loop *v37;
  int v38;
  uint64_t v39;
  uint64_t v40;
  int v41;
  uint64_t v42;
  uint64_t *v43;
  int v44;
  unsigned int v45;
  int v46;
  int v47;
  unint64_t v48;
  uint64_t v49;
  _QWORD *v50;
  uint64_t v51;
  char *v52;
  uint64_t *v53;
  char v54;
  _QWORD *v55;
  uint64_t v56;
  unsigned int *v57;
  uint64_t v58;
  uint64_t v59;
  uint64_t v60;
  uint64_t v61;
  _QWORD *v62;
  uint64_t v63;
  char *v64;
  llvm::SCEV *v65;
  int v66;
  unint64_t *v67;
  uint64_t v68;
  unint64_t v69;
  uint64_t v70;
  unsigned int v71;
  unsigned int v72;
  uint64_t v73;
  uint64_t v74;
  int v75;
  unsigned int v76;
  uint64_t SCEVIter;
  int v78;
  uint64_t v79;
  int v80;
  uint64_t *v81;
  uint64_t v82;
  unint64_t v83;
  uint64_t v84;
  unsigned int v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  int v89;
  unsigned int v90;
  uint64_t v91;
  int v92;
  uint64_t v93;
  _QWORD *v94;
  uint64_t v95;
  unsigned int *v96;
  uint64_t v97;
  unint64_t v98;
  _QWORD ***v99;
  int32x2_t *v100;
  unint64_t v101;
  uint64_t v102;
  unsigned int v103;
  uint64_t v104;
  _QWORD *v105;
  _QWORD ***v106;
  int v107;
  int v108;
  _BYTE *v110;
  _BYTE *v111;
  uint64_t v112;
  int v113;
  _BYTE v114[256];
  uint64_t v115;
  unint64_t *v116;
  _QWORD ***v117;
  int v118;
  llvm::SCEV *v119;
  uint64_t v120;
  uint64_t v121;
  void *v122;
  uint64_t v123;
  _BYTE v124[16];
  _QWORD *v125;
  uint64_t v126;
  _QWORD v127[12];

  v127[10] = *MEMORY[0x1E0C80C00];
  v125 = v127;
  v126 = 0xA00000000;
  v110 = v114;
  v111 = v114;
  v112 = 32;
  v113 = 0;
  v6 = a2 + 72;
  v7 = *(_QWORD *)(a2 + 80);
  if (v7 == a2 + 72)
    goto LABEL_171;
  while (1)
  {
    v12 = v7 - 24;
    if (!v7)
      v12 = 0;
    v13 = *(_QWORD *)(v12 + 48);
    if (v13 != v12 + 40)
      break;
    v7 = *(_QWORD *)(v7 + 8);
    if (v7 == v6)
      goto LABEL_171;
  }
  v14 = 0;
  while (1)
  {
    if (v13)
      v15 = v13 - 24;
    else
      v15 = 0;
    if (*(_BYTE *)(v15 + 16) == 84)
    {
      v16 = *(_QWORD *)(v15 - 32);
      if (v16)
      {
        if (!*(_BYTE *)(v16 + 16)
          && *(_QWORD *)(v16 + 24) == *(_QWORD *)(v15 + 72)
          && (*(_BYTE *)(v16 + 33) & 0x20) != 0)
        {
          v17 = *(_DWORD *)(*(_QWORD *)(v13 - 56) + 36);
          if (v17 == a5)
          {
            sub_1C4774094(this, v15);
            v18 = v126;
            if (v126 >= (unint64_t)HIDWORD(v126))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v125, (uint64_t)v127, v126 + 1, 8);
              v18 = v126;
            }
            v125[v18] = v15;
            v14 = v126 + 1;
            LODWORD(v126) = v126 + 1;
            v17 = *(_DWORD *)(*(_QWORD *)(v13 - 56) + 36);
          }
          if ((v17 - 2409) <= 1)
            *a6 = 0;
        }
      }
    }
    v13 = *(_QWORD *)(v13 + 8);
    v19 = v7 - 24;
    if (!v7)
      v19 = 0;
    if (v13 == v19 + 40)
      break;
LABEL_29:
    if (v7 == v6)
      goto LABEL_30;
  }
  while (1)
  {
    v7 = *(_QWORD *)(v7 + 8);
    if (v7 == v6)
      break;
    v20 = v7 - 24;
    if (!v7)
      v20 = 0;
    v13 = *(_QWORD *)(v20 + 48);
    if (v13 != v20 + 40)
      goto LABEL_29;
  }
LABEL_30:
  if (!v14)
    goto LABEL_171;
  do
  {
    v21 = v125[--v14];
    LODWORD(v126) = v14;
    v22 = *(_QWORD *)(v21 + 8);
    if (!v22)
      continue;
    do
    {
      v23 = *(_QWORD *)(v22 + 24);
      v24 = *(unsigned __int8 *)(v23 + 16);
      if (v23)
        v25 = v24 >= 0x1C;
      else
        v25 = 0;
      if (!v25)
        goto LABEL_91;
      v26 = v24 - 41 > 0x2A || ((1 << (v24 - 41)) & 0x40000000005) == 0;
      if (v26 && v24 - 66 > 0xC)
        goto LABEL_91;
      sub_1C4774094((llvm::SmallPtrSetImplBase *)&v110, *(_QWORD *)(v22 + 24));
      if (!v27)
        goto LABEL_91;
      if (*(_BYTE *)(v23 + 16) == 83)
      {
        v28 = *(uint64_t **)(a1 + 136);
        v29 = *((_DWORD *)v28 + 4);
        if (!v29)
          goto LABEL_60;
        v30 = *(_QWORD *)(v23 + 40);
        v31 = *v28;
        v32 = v29 - 1;
        v33 = ((v30 >> 4) ^ (v30 >> 9)) & (v29 - 1);
        v34 = *(_QWORD *)(v31 + 16 * v33);
        if (v30 != v34)
        {
          v35 = 1;
          while (v34 != -4096)
          {
            v36 = v33 + v35++;
            v33 = v36 & v32;
            v34 = *(_QWORD *)(v31 + 16 * v33);
            if (v30 == v34)
              goto LABEL_48;
          }
LABEL_60:
          v44 = *(_DWORD *)(v23 + 20);
          v45 = v44 & 0x7FFFFFF;
          if ((v44 & 0x7FFFFFF) == 0)
            goto LABEL_91;
          v46 = 1;
          while (1)
          {
            v47 = v46;
            if ((v44 & 0x40000000) != 0)
              v48 = *(_QWORD *)(v23 - 8);
            else
              v48 = v23 - 32 * v45;
            v49 = *(_QWORD *)(v48 + 32 * (v46 - 1));
            if (v49 != v21)
            {
              v50 = sub_1C477672C((uint64_t)this, v49);
              v51 = *((_QWORD *)this + 1);
              if (v51 == *(_QWORD *)this)
                v52 = (char *)this + 20;
              else
                v52 = (char *)this + 16;
              if (v50 == (_QWORD *)(v51 + 8 * *(unsigned int *)v52))
              {
LABEL_72:
                if (!v47 || (*(_DWORD *)(v23 + 20) & 0x7FFFFFF) != v47)
                  goto LABEL_91;
                goto LABEL_88;
              }
              v44 = *(_DWORD *)(v23 + 20);
            }
            v45 = v44 & 0x7FFFFFF;
            v46 = v47 + 1;
            if (v47 == (v44 & 0x7FFFFFF))
              goto LABEL_72;
          }
        }
LABEL_48:
        v37 = *(const llvm::Loop **)(v31 + 16 * v33 + 8);
        if (!v37)
          goto LABEL_60;
        v116 = 0;
        v117 = 0;
        v118 = 0;
        v120 = 0;
        v121 = 0;
        v119 = 0;
        v115 = 6;
        v122 = v124;
        v123 = 0x200000000;
        if (llvm::InductionDescriptor::isInductionPHI(v23, v37, *(_QWORD *)(a1 + 144), (uint64_t)&v115, 0, 0))
        {
          v38 = *(_DWORD *)(v23 + 20);
          if ((v38 & 0x7FFFFFF) == 2)
          {
            if (v117)
            {
              v39 = v120;
              if (v120)
              {
                v40 = (v38 & 0x40000000) != 0 ? *(_QWORD *)(v23 - 8) : v23 - 64;
                v59 = 0;
                while (*(_QWORD ****)(v40 + v59) != v117)
                {
                  v59 += 32;
                  if (v59 == 64)
                    goto LABEL_154;
                }
                v60 = (v38 & 0x40000000) != 0 ? *(_QWORD *)(v23 - 8) : v23 - 64;
                v61 = 0;
                while (*(_QWORD *)(v60 + v61) != v120)
                {
                  v61 += 32;
                  if (v61 == 64)
                    goto LABEL_154;
                }
                if (v117 == (_QWORD ***)v21
                  || ((v62 = sub_1C477672C((uint64_t)this, (uint64_t)v117),
                       v63 = *((_QWORD *)this + 1),
                       v63 != *(_QWORD *)this)
                    ? (v64 = (char *)this + 16)
                    : (v64 = (char *)this + 20),
                      v62 != (_QWORD *)(v63 + 8 * *(unsigned int *)v64)))
                {
                  v65 = v119;
                  if (llvm::ScalarEvolution::getLoopDisposition(*(llvm::ScalarEvolution **)(a1 + 144), v119, v37) == 1)
                  {
                    v66 = *(_DWORD *)(v39 + 20);
                    if ((v66 & 0x40000000) != 0)
                      v67 = *(unint64_t **)(v39 - 8);
                    else
                      v67 = (unint64_t *)(v39 - 32 * (v66 & 0x7FFFFFF));
                    v68 = *(_QWORD *)(a1 + 144);
                    v69 = *v67;
                    v70 = *(_QWORD *)(v68 + 104);
                    v71 = *(_DWORD *)(v68 + 120);
                    if (!v71)
                      goto LABEL_120;
                    v72 = ((v69 >> 4) ^ (v69 >> 9)) & (v71 - 1);
                    v73 = v70 + 48 * v72;
                    v74 = *(_QWORD *)(v73 + 24);
                    if (v74 != v69)
                    {
                      v75 = 1;
                      while (v74 != -4096)
                      {
                        v76 = v72 + v75++;
                        v72 = v76 & (v71 - 1);
                        v73 = v70 + 48 * v72;
                        v74 = *(_QWORD *)(v73 + 24);
                        if (v74 == v69)
                          goto LABEL_121;
                      }
LABEL_120:
                      v73 = v70 + 48 * v71;
                    }
LABEL_121:
                    if (v73 == v70 + 48 * v71 || (SCEVIter = *(_QWORD *)(v73 + 40)) == 0)
                      SCEVIter = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v68, v69);
                    if ((llvm::SCEV *)SCEVIter == v65)
                    {
                      v80 = *(_DWORD *)(v39 + 20);
                      if ((v80 & 0x40000000) != 0)
                        v81 = *(uint64_t **)(v39 - 8);
                      else
                        v81 = (uint64_t *)(v39 - 32 * (v80 & 0x7FFFFFF));
LABEL_146:
                      if (*v81)
                      {
                        v94 = sub_1C477672C(a3 + 528, *v81);
                        v95 = *(_QWORD *)(a3 + 536);
                        v96 = (unsigned int *)(v95 == *(_QWORD *)(a3 + 528) ? a3 + 548 : a3 + 544);
                        if (v94 == (_QWORD *)(v95 + 8 * *v96))
                        {
                          sub_1C4774094(this, v23);
                          v97 = v126;
                          if (v126 >= (unint64_t)HIDWORD(v126))
                          {
                            llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v125, (uint64_t)v127, v126 + 1, 8);
                            v97 = v126;
                          }
                          v125[v97] = v23;
                          LODWORD(v126) = v126 + 1;
                        }
                      }
                    }
                    else
                    {
                      v78 = *(_DWORD *)(v39 + 20);
                      if ((v78 & 0x40000000) != 0)
                        v79 = *(_QWORD *)(v39 - 8);
                      else
                        v79 = v39 - 32 * (v78 & 0x7FFFFFF);
                      v82 = *(_QWORD *)(a1 + 144);
                      v83 = *(_QWORD *)(v79 + 32);
                      v84 = *(_QWORD *)(v82 + 104);
                      v85 = *(_DWORD *)(v82 + 120);
                      if (!v85)
                        goto LABEL_136;
                      v86 = ((v83 >> 4) ^ (v83 >> 9)) & (v85 - 1);
                      v87 = v84 + 48 * v86;
                      v88 = *(_QWORD *)(v87 + 24);
                      if (v88 != v83)
                      {
                        v89 = 1;
                        while (v88 != -4096)
                        {
                          v90 = v86 + v89++;
                          v86 = v90 & (v85 - 1);
                          v87 = v84 + 48 * v86;
                          v88 = *(_QWORD *)(v87 + 24);
                          if (v88 == v83)
                            goto LABEL_137;
                        }
LABEL_136:
                        v87 = v84 + 48 * v85;
                      }
LABEL_137:
                      if (v87 == v84 + 48 * v85 || (v91 = *(_QWORD *)(v87 + 40)) == 0)
                        v91 = llvm::ScalarEvolution::createSCEVIter((llvm::ScalarEvolution *)v82, v83);
                      if ((llvm::SCEV *)v91 == v65)
                      {
                        v92 = *(_DWORD *)(v39 + 20);
                        if ((v92 & 0x40000000) != 0)
                          v93 = *(_QWORD *)(v39 - 8);
                        else
                          v93 = v39 - 32 * (v92 & 0x7FFFFFF);
                        v81 = (uint64_t *)(v93 + 32);
                        goto LABEL_146;
                      }
                    }
                  }
                }
              }
            }
          }
        }
LABEL_154:
        if (v122 != v124)
          free(v122);
        if (v117 && v117 != (_QWORD ***)-8192 && v117 != (_QWORD ***)-4096)
        {
          v98 = v115 & 0xFFFFFFFFFFFFFFF8;
          *(_QWORD *)(v115 & 0xFFFFFFFFFFFFFFF8) = v116;
          if (v116)
          {
            *v116 = *v116 & 7 | v98;
          }
          else
          {
            v99 = v117;
            v100 = (int32x2_t *)***v117;
            v101 = (unint64_t)v100[303];
            if (v101 <= v98)
            {
              v102 = v100[305].u32[0];
              if (v101 + 16 * v102 > v98)
              {
                v103 = v102 - 1;
                LODWORD(v104) = v103 & ((v117 >> 4) ^ (v117 >> 9));
                v105 = (_QWORD *)(v101 + 16 * v104);
                v106 = (_QWORD ***)*v105;
                if (v117 == (_QWORD ***)*v105)
                {
LABEL_167:
                  *v105 = -8192;
                  v100[304] = vadd_s32(v100[304], (int32x2_t)0x1FFFFFFFFLL);
                  v99 = v117;
                }
                else
                {
                  v107 = 1;
                  while (v106 != (_QWORD ***)-4096)
                  {
                    v108 = v104 + v107++;
                    v104 = v108 & v103;
                    v106 = *(_QWORD ****)(v101 + 16 * v104);
                    if (v117 == v106)
                    {
                      v105 = (_QWORD *)(v101 + 16 * v104);
                      goto LABEL_167;
                    }
                  }
                }
                *((_BYTE *)v99 + 17) &= ~1u;
              }
            }
          }
        }
        goto LABEL_91;
      }
      v41 = *(_DWORD *)(v23 + 20);
      if ((v41 & 0x40000000) != 0)
      {
        v43 = *(uint64_t **)(v23 - 8);
        v42 = v41 & 0x7FFFFFF;
        if (!v42)
          goto LABEL_91;
      }
      else
      {
        v42 = v41 & 0x7FFFFFF;
        v43 = (uint64_t *)(v23 - 32 * v42);
        if (!v42)
          goto LABEL_91;
      }
      v53 = &v43[4 * v42];
      v54 = 1;
      do
      {
        while (1)
        {
          if (*v43 != v21)
          {
            v55 = sub_1C477672C(a3 + 528, *v43);
            v56 = *(_QWORD *)(a3 + 536);
            v57 = (unsigned int *)(v56 == *(_QWORD *)(a3 + 528) ? a3 + 548 : a3 + 544);
            if (v55 == (_QWORD *)(v56 + 8 * *v57))
              break;
          }
          if ((v54 & 1) == 0)
            goto LABEL_91;
          v54 = 0;
          v43 += 4;
          if (v43 == v53)
            goto LABEL_88;
        }
        v43 += 4;
      }
      while (v43 != v53);
      if ((v54 & 1) != 0)
        goto LABEL_91;
LABEL_88:
      sub_1C4774094(this, v23);
      v58 = v126;
      if (v126 >= (unint64_t)HIDWORD(v126))
      {
        llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v125, (uint64_t)v127, v126 + 1, 8);
        v58 = v126;
      }
      v125[v58] = v23;
      LODWORD(v126) = v126 + 1;
LABEL_91:
      v22 = *(_QWORD *)(v22 + 8);
    }
    while (v22);
    v14 = v126;
  }
  while (v14);
LABEL_171:
  if (v111 != v110)
    free(v111);
  if (v125 != v127)
    free(v125);
}

BOOL sub_1C55C22F0(uint64_t a1)
{
  uint64_t v1;
  int v2;
  _BOOL8 result;
  int v4;
  uint64_t v5;
  uint64_t *v6;
  uint64_t v7;
  uint64_t v8;
  int v9;
  BOOL v10;

  if (*(_BYTE *)(a1 + 16) != 83)
    return 0;
  v1 = *(_QWORD *)(a1 + 8);
  if (!v1)
    return 0;
  v2 = 1;
  do
  {
    v1 = *(_QWORD *)(v1 + 8);
    --v2;
  }
  while (v1);
  if (v2)
    return 0;
  v4 = *(_DWORD *)(a1 + 20);
  if ((v4 & 0x40000000) == 0)
  {
    v5 = v4 & 0x7FFFFFF;
    v6 = (uint64_t *)(a1 - 32 * v5);
    if (v5)
      goto LABEL_9;
    return 1;
  }
  v6 = *(uint64_t **)(a1 - 8);
  v5 = v4 & 0x7FFFFFF;
  if (!v5)
    return 1;
LABEL_9:
  v7 = 32 * v5 - 32;
  do
  {
    v8 = *v6;
    v6 += 4;
    v9 = *(unsigned __int8 *)(v8 + 16);
    result = v9 == 16;
    v10 = v9 != 16 || v7 == 0;
    v7 -= 32;
  }
  while (!v10);
  return result;
}

uint64_t sub_1C55C2370(uint64_t a1)
{
  uint64_t v2;

  v2 = operator new();
  *(_QWORD *)v2 = "Flatten control flow";
  *(_QWORD *)(v2 + 8) = 20;
  *(_QWORD *)(v2 + 16) = "gpu-flattencfg";
  *(_QWORD *)(v2 + 24) = 14;
  *(_QWORD *)(v2 + 32) = &unk_1ED807468;
  *(_WORD *)(v2 + 40) = 0;
  *(_BYTE *)(v2 + 42) = 0;
  *(_QWORD *)(v2 + 48) = 0;
  *(_QWORD *)(v2 + 56) = 0;
  *(_QWORD *)(v2 + 64) = 0;
  *(_QWORD *)(v2 + 72) = sub_1C55C24E4;
  llvm::PassRegistry::registerPass(a1, (_QWORD *)v2, 1);
  return v2;
}

uint64_t sub_1C55C2400(uint64_t a1, int a2, int a3)
{
  unint64_t v5;
  unint64_t v7;
  _QWORD *v8;
  _QWORD v9[2];

  *(_QWORD *)(a1 + 8) = 0;
  *(_QWORD *)(a1 + 16) = &unk_1ED807468;
  *(_QWORD *)a1 = &off_1E81709A8;
  *(_DWORD *)(a1 + 24) = 2;
  *(_DWORD *)(a1 + 28) = a2;
  *(_DWORD *)(a1 + 32) = a3;
  *(_QWORD *)(a1 + 48) = a1 + 80;
  *(_QWORD *)(a1 + 56) = a1 + 80;
  *(_QWORD *)(a1 + 64) = 8;
  *(_DWORD *)(a1 + 72) = 0;
  if (!atomic_load(qword_1ED830BC0))
    llvm::ManagedStaticBase::RegisterManagedStatic((llvm::ManagedStaticBase *)qword_1ED830BC0, (void *(*)(void))sub_1C624602C, (void (*)(void *))sub_1C62460B0);
  v7 = qword_1ED830BC0[0];
  v5 = atomic_load(&qword_1ED807470);
  if (v5 != -1)
  {
    v9[0] = sub_1C55C2370;
    v9[1] = &v7;
    v8 = v9;
    std::__call_once(&qword_1ED807470, &v8, (void (__cdecl *)(void *))sub_1C4776838);
  }
  return a1;
}

uint64_t sub_1C55C24E4()
{
  uint64_t v0;

  v0 = operator new();
  return sub_1C55C2400(v0, dword_1ED8318F8, dword_1ED8319B8);
}

void sub_1C55C251C(llvm::Pass *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E81709A8;
  v2 = (void *)*((_QWORD *)this + 7);
  if (v2 != *((void **)this + 6))
    free(v2);
  llvm::Pass::~Pass(this);
}

void sub_1C55C255C(llvm::Pass *this)
{
  void *v2;

  *(_QWORD *)this = &off_1E81709A8;
  v2 = (void *)*((_QWORD *)this + 7);
  if (v2 != *((void **)this + 6))
    free(v2);
  llvm::Pass::~Pass(this);
  JUMPOUT(0x1CAA32FC0);
}

uint64_t sub_1C55C25B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3;
  unint64_t v4;
  uint64_t v5;
  void *v6;
  void *v7;
  uint64_t v8;
  char v9;
  _QWORD *v10;
  BOOL v11;
  uint64_t v12;
  llvm::DomTreeUpdater *v13;
  _QWORD *v14;
  _QWORD *v15;
  _QWORD *v16;
  unsigned int v17;
  _QWORD *v18;
  BOOL v19;
  llvm::BasicBlock *v20;
  _QWORD *v21;
  _QWORD *v22;
  _QWORD *v23;
  uint64_t v24;
  uint64_t v25;
  unsigned int v26;
  BOOL v27;
  llvm::BasicBlock *v29;
  _QWORD *v30;
  _QWORD *v31;
  _QWORD *v32;
  _QWORD *v33;
  _QWORD *v34;
  _QWORD *v35;
  int v36;
  llvm::BasicBlock *v37;
  _QWORD *v38;
  uint64_t SinglePredecessor;
  unsigned int v40;
  uint64_t v41;
  llvm::BasicBlock *v42;
  _QWORD *v43;
  int v44;
  _QWORD *v45;
  uint64_t v46;
  unsigned int v47;
  _QWORD *v48;
  int v49;
  llvm::BasicBlock *v50;
  _QWORD *v51;
  _QWORD *v52;
  int v53;
  unsigned int v54;
  unsigned int v55;
  unsigned int v56;
  unsigned int v57;
  _QWORD *v58;
  int v60;
  _QWORD *v61;
  uint64_t v62;
  int v63;
  uint64_t v64;
  uint64_t v65;
  int v66;
  int v67;
  _QWORD *v68;
  llvm::BasicBlock *v69;
  _QWORD *v70;
  int v71;
  _QWORD *v72;
  unsigned int v73;
  _QWORD *v74;
  _QWORD *v76;
  uint64_t *v77;
  uint64_t v78;
  _QWORD *v79;
  void *v80;
  _QWORD *v81;
  uint64_t v82;
  _QWORD *v83;
  _QWORD *v84;
  int v85;
  unsigned int v86;
  uint64_t v87;
  uint64_t v88;
  char v89;
  uint64_t v90;
  unsigned int v91;
  uint64_t v92;
  llvm::Value *v94;
  _QWORD *v95;
  unsigned __int8 *v96;
  llvm::Instruction *v97;
  uint64_t v98;
  int v99;
  uint64_t v100;
  uint64_t *v101;
  uint64_t v102;
  char *v103;
  char *v104;
  uint64_t v105;
  int v106;
  uint64_t v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  uint64_t *v111;
  unsigned int v112;
  uint64_t v113;
  unsigned int v114;
  unsigned int v115;
  uint64_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  uint64_t v120;
  _QWORD *v121;
  unint64_t v122;
  llvm::BasicBlock *v123;
  int v124;
  uint64_t v125;
  uint64_t v126;
  uint64_t v127;
  uint64_t v128;
  uint64_t i;
  _DWORD *v130;
  int v131;
  uint64_t v132;
  uint64_t v133;
  _DWORD *v134;
  uint64_t v135;
  _DWORD *v136;
  uint64_t v137;
  _DWORD *v138;
  _DWORD *v139;
  uint64_t v140;
  uint64_t *v141;
  llvm::Value *Select;
  int v143;
  uint64_t v144;
  uint64_t v145;
  _DWORD *v146;
  int v147;
  uint64_t v148;
  uint64_t v149;
  _DWORD *v150;
  uint64_t v151;
  uint64_t v152;
  uint64_t v153;
  uint64_t v154;
  uint64_t v155;
  int v156;
  uint64_t v157;
  int v158;
  int v159;
  uint64_t v160;
  uint64_t v161;
  uint64_t v162;
  unsigned __int8 *v163;
  llvm::BasicBlock *v164;
  uint64_t v165;
  uint64_t v166;
  uint64_t v167;
  unsigned __int8 *v168;
  uint64_t v169;
  uint64_t v170;
  uint64_t v171;
  uint64_t *v172;
  char *v173;
  char *v174;
  llvm::Value *v175;
  _QWORD *v176;
  uint64_t v177;
  char *v178;
  char *v179;
  unsigned __int8 **v180;
  int v181;
  unsigned __int8 *v182;
  unsigned __int8 *v183;
  unsigned __int8 *v184;
  uint64_t v185;
  _QWORD *v186;
  llvm **v187;
  llvm **v188;
  uint64_t v189;
  uint64_t v190;
  unsigned int v191;
  BOOL v192;
  uint64_t v194;
  uint64_t v195;
  llvm::Type *v196;
  llvm::DSOLocalEquivalent **v197;
  uint64_t v198;
  uint64_t v199;
  llvm::Type *v200;
  llvm::DSOLocalEquivalent **v201;
  _QWORD *Successor;
  _QWORD *v203;
  unsigned int v204;
  _BOOL4 v205;
  uint64_t v206;
  int v207;
  _QWORD *v208;
  llvm::BasicBlock *v209;
  uint64_t v211;
  unsigned int v212;
  int v213;
  unsigned int v214;
  void *v215;
  llvm::BasicBlock *v216;
  uint64_t v217;
  uint64_t *v218;
  uint64_t v219;
  char v220;
  uint64_t v222;
  uint64_t v223;
  llvm::BasicBlock *v224;
  uint64_t v225;
  uint64_t v226;
  unsigned __int8 *v227[4];
  __int16 v228;
  unsigned __int8 *v229;
  void *v230;
  uint64_t v231;
  _BYTE v232[32];
  void *v233;
  uint64_t v234;
  _BYTE v235[24];
  void *v236;
  uint64_t v237;
  _BYTE v238[24];
  void *v239;
  uint64_t v240;
  _BYTE v241[64];
  void *v242;
  void *v243;
  uint64_t v244;
  int v245;
  _BYTE v246[16];
  uint64_t v247;
  uint64_t v248;
  uint64_t v249;
  uint64_t v250;

  v250 = *MEMORY[0x1E0C80C00];
  v3 = a2 + 72;
  v4 = -1;
  v5 = a2 + 72;
  do
  {
    v5 = *(_QWORD *)(v5 + 8);
    ++v4;
  }
  while (v5 != v3);
  if (v4 < 2)
    goto LABEL_382;
  v6 = *(void **)(a1 + 48);
  *(_QWORD *)(a1 + 40) = *(_QWORD *)(a2 + 40) + 272;
  v7 = *(void **)(a1 + 56);
  if (v7 == v6)
    goto LABEL_5;
  v211 = *(unsigned int *)(a1 + 64);
  if (v211 < 0x21 || 4 * (*(_DWORD *)(a1 + 68) - *(_DWORD *)(a1 + 72)) >= v211)
  {
    memset(v7, 255, 8 * v211);
LABEL_5:
    *(_DWORD *)(a1 + 68) = 0;
    *(_DWORD *)(a1 + 72) = 0;
    goto LABEL_6;
  }
  free(v7);
  v212 = *(_DWORD *)(a1 + 68) - *(_DWORD *)(a1 + 72);
  v213 = 1 << (33 - __clz(v212 - 1));
  *(_DWORD *)(a1 + 68) = 0;
  *(_DWORD *)(a1 + 72) = 0;
  if (v212 <= 0x10)
    v214 = 32;
  else
    v214 = v213;
  *(_DWORD *)(a1 + 64) = v214;
  v215 = malloc_type_malloc(8 * v214, 0x4065EBACuLL);
  if (!v215)
    llvm::report_bad_alloc_error((llvm *)"Allocation failed", (const char *)1);
  *(_QWORD *)(a1 + 56) = v215;
  memset(v215, 255, 8 * *(unsigned int *)(a1 + 64));
LABEL_6:
  sub_1C5EA42E4(*(_QWORD *)(a2 + 40), (llvm::SmallPtrSetImplBase *)(a1 + 48), 0);
  v8 = *(_QWORD *)(a2 + 80);
  if (v8 == v3)
  {
LABEL_382:
    v9 = 0;
    return v9 & 1;
  }
  v9 = 0;
  v219 = a1;
  v222 = v3;
LABEL_8:
  v220 = v9;
  do
  {
    if (v8)
      v10 = (_QWORD *)(v8 - 24);
    else
      v10 = 0;
    if ((llvm::ConstantFoldTerminator((uint64_t)v10, 0, 0, 0) & 1) != 0)
      goto LABEL_375;
    v11 = v8 == 0;
    v12 = *(_QWORD *)(v10[7] + 80);
    if (v12)
      v11 = v12 - 24 == (_QWORD)v10;
    if (!v11)
    {
      v24 = v10[1];
      if (!v24)
      {
LABEL_374:
        llvm::DeleteDeadBlock((llvm *)v10, 0, 0);
        goto LABEL_375;
      }
      while (1)
      {
        v25 = *(_QWORD *)(v24 + 24);
        v26 = *(unsigned __int8 *)(v25 + 16);
        v27 = v25 && v26 >= 0x1C;
        if (v27 && v26 - 29 < 0xB)
          break;
        v24 = *(_QWORD *)(v24 + 8);
        if (!v24)
          goto LABEL_374;
      }
    }
    if (sub_1C55C39E0((llvm::BasicBlock *)v10))
    {
      llvm::MergeBasicBlockIntoOnlyPred((unint64_t)v10, 0, v13);
LABEL_375:
      v8 = *(_QWORD *)(a2 + 80);
      v9 = 1;
      if (v8 == v3)
        return v9 & 1;
      goto LABEL_8;
    }
    v226 = v8;
    v15 = v10 + 5;
    v14 = (_QWORD *)v10[5];
    if (v14 == v10 + 5)
    {
      v230 = v232;
      v231 = 0x200000000;
      goto LABEL_177;
    }
    if (v14)
      v16 = v14 - 3;
    else
      v16 = 0;
    v17 = *((unsigned __int8 *)v16 + 16) - 40;
    if (v17 >= 0xFFFFFFF5)
      v18 = v16;
    else
      v18 = 0;
    if (!v14)
      goto LABEL_123;
    v19 = *((_BYTE *)v18 + 16) == 30 && v17 >= 0xFFFFFFF5;
    if (!v19 || (*((_DWORD *)v18 + 5) & 0x7FFFFFF) != 3)
      goto LABEL_123;
    v20 = (llvm::BasicBlock *)*(v18 - 4);
    v21 = (_QWORD *)((char *)v20 + 40);
    v22 = (_QWORD *)*((_QWORD *)v20 + 5);
    if (v22 == (_QWORD *)((char *)v20 + 40))
    {
      v23 = 0;
    }
    else
    {
      v23 = v22 - 3;
      if (!v22)
        v23 = 0;
      if (*((unsigned __int8 *)v23 + 16) - 29 >= 0xB)
        v23 = 0;
    }
    v29 = (llvm::BasicBlock *)*(v18 - 8);
    if (*((_BYTE *)v23 + 16) == 30)
      v30 = v23;
    else
      v30 = 0;
    v32 = (_QWORD *)((char *)v29 + 40);
    v31 = (_QWORD *)*((_QWORD *)v29 + 5);
    if (v31 == (_QWORD *)((char *)v29 + 40))
    {
      v33 = 0;
    }
    else
    {
      v33 = v31 - 3;
      if (!v31)
        v33 = 0;
      if (*((unsigned __int8 *)v33 + 16) - 29 >= 0xB)
        v33 = 0;
    }
    if (*((_BYTE *)v33 + 16) == 30)
      v34 = v33;
    else
      v34 = 0;
    if (v30 && (llvm::BasicBlock *)*(v30 - 4) == v29)
    {
      if (v22 == v21)
      {
        v35 = 0;
      }
      else
      {
        v35 = v22 - 3;
        if (!v22)
          v35 = 0;
        if (*((unsigned __int8 *)v35 + 16) - 29 >= 0xB)
          v35 = 0;
      }
      v36 = *((unsigned __int8 *)v35 + 16);
      if (v36 != 30)
        __asm { BR              X10 }
      if ((*((_DWORD *)v35 + 5) & 0x7FFFFFF) != 3)
      {
        v37 = v20;
        v223 = (uint64_t)v20;
        v216 = v29;
        v38 = (_QWORD *)*((_QWORD *)v29 + 5);
        SinglePredecessor = llvm::BasicBlock::getSinglePredecessor(v37);
        v31 = v38;
        v29 = v216;
        v20 = (llvm::BasicBlock *)v223;
        if (SinglePredecessor)
        {
          v40 = *(_DWORD *)(v219 + 28);
          v3 = v222;
          v41 = v226;
          if (sub_1C55C4634(v219, v223, v40) < v40 || sub_1C55C3AB8(v223))
          {
            v208 = (_QWORD *)v223;
            v209 = 0;
            goto LABEL_379;
          }
          goto LABEL_241;
        }
      }
    }
    if (!v34)
      goto LABEL_123;
    v42 = (llvm::BasicBlock *)*(v34 - 4);
    if (v42 == v20)
    {
      if (v31 == v32)
      {
        v43 = 0;
      }
      else
      {
        v43 = v31 - 3;
        if (!v31)
          v43 = 0;
        if (*((unsigned __int8 *)v43 + 16) - 29 >= 0xB)
          v43 = 0;
      }
      v44 = *((unsigned __int8 *)v43 + 16);
      if (v44 != 30)
        __asm { BR              X10 }
      if ((*((_DWORD *)v43 + 5) & 0x7FFFFFF) != 3)
      {
        v224 = v20;
        v217 = (uint64_t)v29;
        v45 = v31;
        v46 = llvm::BasicBlock::getSinglePredecessor(v29);
        v31 = v45;
        v29 = (llvm::BasicBlock *)v217;
        v20 = v224;
        if (v46)
        {
          v47 = *(_DWORD *)(v219 + 28);
          v3 = v222;
          v41 = v226;
          if (sub_1C55C4634(v219, v217, v47) < v47 || sub_1C55C3AB8(v217))
          {
            v208 = (_QWORD *)v217;
            v209 = 0;
            v207 = 1;
            goto LABEL_381;
          }
          goto LABEL_241;
        }
      }
    }
    if (!v30 || v42 != (llvm::BasicBlock *)*(v30 - 4))
      goto LABEL_123;
    if (v22 == v21)
    {
      v48 = 0;
    }
    else
    {
      v48 = v22 - 3;
      if (!v22)
        v48 = 0;
      if (*((unsigned __int8 *)v48 + 16) - 29 >= 0xB)
        v48 = 0;
    }
    v49 = *((unsigned __int8 *)v48 + 16);
    if (v49 != 30)
      __asm { BR              X10 }
    if ((*((_DWORD *)v48 + 5) & 0x7FFFFFF) == 3)
      goto LABEL_123;
    v50 = v29;
    v51 = v31;
    if (!llvm::BasicBlock::getSinglePredecessor(v20))
      goto LABEL_123;
    if (v51 == v32)
    {
      v52 = 0;
    }
    else
    {
      v52 = v51 - 3;
      if (!v51)
        v52 = 0;
      if (*((unsigned __int8 *)v52 + 16) - 29 >= 0xB)
        v52 = 0;
    }
    v53 = *((unsigned __int8 *)v52 + 16);
    if (v53 != 30)
      __asm { BR              X10 }
    if ((*((_DWORD *)v52 + 5) & 0x7FFFFFF) == 3 || !llvm::BasicBlock::getSinglePredecessor(v50))
    {
LABEL_123:
      v230 = v232;
      v231 = 0x200000000;
      v57 = *((unsigned __int8 *)v16 + 16) - 40;
      if (v57 >= 0xFFFFFFF5)
        v58 = v16;
      else
        v58 = 0;
      if (v14)
      {
        if (*((_BYTE *)v58 + 16) == 31 && v57 >= 0xFFFFFFF5)
        {
          v60 = *((_DWORD *)v58 + 5);
          v61 = (v60 & 0x40000000) != 0 ? (_QWORD *)*(v58 - 1) : &v58[-4 * (v60 & 0x7FFFFFF)];
          v62 = v61[4];
          v242 = v246;
          v243 = v246;
          v244 = 4;
          v245 = 0;
          sub_1C4774094((llvm::SmallPtrSetImplBase *)&v242, v62);
          v63 = (*((_DWORD *)v58 + 5) >> 1) & 0x3FFFFFF;
          v64 = (v63 - 1);
          if (v63 == 1)
          {
            v80 = v243;
            v71 = 1;
          }
          else
          {
            v65 = 0;
            v66 = 2;
            while (1)
            {
              v67 = *((_DWORD *)v58 + 5);
              v68 = (v67 & 0x40000000) != 0 ? (_QWORD *)*(v58 - 1) : &v58[-4 * (v67 & 0x7FFFFFF)];
              v69 = (llvm::BasicBlock *)v68[4 * (v66 & 0xFFFFFFFE) + 4];
              v70 = (_QWORD *)*((_QWORD *)v69 + 5);
              if (v70 == (_QWORD *)((char *)v69 + 40))
                break;
              v71 = 0;
              if (v70)
                v72 = v70 - 3;
              else
                v72 = 0;
              v73 = *((unsigned __int8 *)v72 + 16) - 40;
              if (v73 >= 0xFFFFFFF5)
                v74 = v72;
              else
                v74 = 0;
              if (!v70)
                goto LABEL_165;
              if (*((_BYTE *)v74 + 16) != 30 || v73 < 0xFFFFFFF5)
                goto LABEL_165;
              v76 = sub_1C477672C((uint64_t)&v242, (uint64_t)v69);
              v77 = v243 == v242 ? (uint64_t *)((char *)&v244 + 4) : &v244;
              if (v76 != (_QWORD *)((char *)v243 + 8 * *(unsigned int *)v77)
                || !llvm::BasicBlock::getSinglePredecessor(v69)
                || (*((_DWORD *)v74 + 5) & 0x7FFFFFF) == 3
                || *(v74 - 4) != v62)
              {
                break;
              }
              sub_1C4774094((llvm::SmallPtrSetImplBase *)&v242, (uint64_t)v69);
              v78 = v231;
              if (v231 >= (unint64_t)HIDWORD(v231))
              {
                llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v230, (uint64_t)v232, v231 + 1, 16);
                v78 = v231;
              }
              v79 = (char *)v230 + 16 * v78;
              *v79 = v58;
              v79[1] = v65;
              LODWORD(v231) = v231 + 1;
              v66 += 2;
              if (v64 == ++v65)
              {
                v71 = 1;
                goto LABEL_165;
              }
            }
            v71 = 0;
LABEL_165:
            v80 = v243;
          }
          if (v80 != v242)
            free(v80);
          if (v71)
          {
            v81 = (_QWORD *)*v15;
            if ((_QWORD *)*v15 == v15)
            {
              v82 = 0;
            }
            else
            {
              if (v81)
                v82 = (uint64_t)(v81 - 3);
              else
                v82 = 0;
              if (*(unsigned __int8 *)(v82 + 16) - 29 >= 0xB)
                v82 = 0;
            }
            if (*(_BYTE *)(v82 + 16) == 31)
              v98 = v82;
            else
              v98 = 0;
            v239 = v241;
            v240 = 0x800000000;
            v99 = *(_DWORD *)(v98 + 20);
            if ((v99 & 0x40000000) != 0)
              v100 = *(_QWORD *)(v98 - 8);
            else
              v100 = v98 - 32 * (v99 & 0x7FFFFFF);
            v101 = *(uint64_t **)(v100 + 32);
            sub_1C55C46D8(v101, (uint64_t)&v239);
            v236 = v238;
            v237 = 0x300000000;
            v233 = v235;
            v234 = 0x300000000;
            if (v231 > dword_1ED8074F8)
              goto LABEL_217;
            if ((_DWORD)v231)
            {
              LODWORD(v102) = 0;
              v103 = (char *)v230;
              v104 = (char *)v230 + 16 * v231;
              do
              {
                v105 = *(_QWORD *)v103;
                v106 = *(_DWORD *)(*(_QWORD *)v103 + 20);
                if ((v106 & 0x40000000) != 0)
                  v107 = *(_QWORD *)(v105 - 8);
                else
                  v107 = v105 - 32 * (v106 & 0x7FFFFFF);
                v108 = *((_QWORD *)v103 + 1);
                if ((_DWORD)v108 == -2)
                  v109 = 1;
                else
                  v109 = (2 * v108 + 3);
                v110 = *(_QWORD *)(v107 + 32 * v109);
                if (v102 >= HIDWORD(v234))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v233, (uint64_t)v235, v102 + 1, 8);
                  LODWORD(v102) = v234;
                }
                *((_QWORD *)v233 + v102) = v110;
                v102 = (v234 + 1);
                LODWORD(v234) = v234 + 1;
                v103 += 16;
              }
              while (v103 != v104);
              if ((_DWORD)v102)
              {
                v111 = (uint64_t *)v233;
                v112 = *(_DWORD *)(v219 + 28);
                v113 = 8 * v102;
                while (1)
                {
                  v114 = sub_1C55C4634(v219, *v111, v112);
                  v19 = v112 >= v114;
                  v112 -= v114;
                  if (v112 == 0 || !v19)
                    break;
                  ++v111;
                  v113 -= 8;
                  if (!v113)
                    goto LABEL_234;
                }
LABEL_217:
                v89 = 0;
LABEL_364:
                if (v233 != v235)
                  free(v233);
                if (v236 != v238)
                  free(v236);
                if (v239 != v241)
                  free(v239);
LABEL_238:
                if (v230 != v232)
                  free(v230);
                v3 = v222;
                v41 = v226;
                if ((v89 & 1) != 0)
                  goto LABEL_375;
                goto LABEL_241;
              }
            }
LABEL_234:
            v115 = *(_DWORD *)(v98 + 20);
            if ((v115 & 0x40000000) != 0)
              v116 = *(uint64_t **)(v98 - 8);
            else
              v116 = (uint64_t *)(v98 - 32 * (v115 & 0x7FFFFFF));
            v117 = v116[12];
            v118 = *(_QWORD *)(v117 + 40);
            if (v118 == v117 + 40)
            {
              v120 = 0;
            }
            else
            {
              if (v118)
                v119 = v118 - 24;
              else
                v119 = 0;
              if (*(unsigned __int8 *)(v119 + 16) - 29 >= 0xB)
                v120 = 0;
              else
                v120 = v119;
            }
            v121 = v239;
            v122 = v240;
            v123 = *(llvm::BasicBlock **)(v98 + 40);
            v225 = *v116;
            sub_1C4773D54((uint64_t)&v242, v120, 0, 0, 0);
            v124 = *(_DWORD *)(v98 + 20);
            v218 = v101;
            if ((v124 & 0x40000000) != 0)
              v125 = *(_QWORD *)(v98 - 8);
            else
              v125 = v98 - 32 * (v124 & 0x7FFFFFF);
            v126 = *(_QWORD *)(v125 + 64);
            v227[0] = "switchcmp";
            v228 = 259;
            v127 = sub_1C4774B48((uint64_t)&v242, 32, v225, v126, (uint64_t)v227);
            if ((_DWORD)v122)
            {
              v128 = v127;
              for (i = 0; i != v122; ++i)
              {
                v130 = (_DWORD *)v121[i];
                v131 = v130[5];
                v132 = v131 & 0x7FFFFFF;
                if ((v131 & 0x7FFFFFF) != 0)
                {
                  v133 = 0;
                  while (1)
                  {
                    v134 = &v130[-8 * v132];
                    if ((v131 & 0x40000000) != 0)
                      v134 = (_DWORD *)*((_QWORD *)v130 - 1);
                    if (*(llvm::BasicBlock **)&v134[8 * v130[15] + 2 * v133] == v123)
                      break;
                    if (v132 == ++v133)
                      goto LABEL_263;
                  }
                }
                else
                {
LABEL_263:
                  LODWORD(v133) = -1;
                }
                v135 = v132;
                if ((v131 & 0x40000000) != 0)
                {
                  v136 = (_DWORD *)*((_QWORD *)v130 - 1);
                  if ((_DWORD)v132)
                    goto LABEL_266;
                }
                else
                {
                  v136 = &v130[-8 * v132];
                  if ((_DWORD)v132)
                  {
LABEL_266:
                    v137 = 0;
                    do
                    {
                      v138 = &v130[-8 * v135];
                      if ((v131 & 0x40000000) != 0)
                        v138 = (_DWORD *)*((_QWORD *)v130 - 1);
                      if (*(_QWORD *)&v138[8 * v130[15] + 2 * v137] == v117)
                        goto LABEL_274;
                    }
                    while (v135 != ++v137);
                  }
                }
                LODWORD(v137) = -1;
LABEL_274:
                if ((v131 & 0x40000000) != 0)
                  v139 = (_DWORD *)*((_QWORD *)v130 - 1);
                else
                  v139 = &v130[-8 * v135];
                v140 = *(_QWORD *)&v136[8 * v133];
                v141 = *(uint64_t **)&v139[8 * v137];
                v228 = 257;
                Select = llvm::IRBuilderBase::CreateSelect((uint64_t *)&v242, v128, v141, v140, (uint64_t)v227, 0);
                v143 = v130[5];
                v144 = v143 & 0x7FFFFFF;
                if ((v143 & 0x7FFFFFF) != 0)
                {
                  v145 = 0;
                  while (1)
                  {
                    v146 = &v130[-8 * v144];
                    if ((v143 & 0x40000000) != 0)
                      v146 = (_DWORD *)*((_QWORD *)v130 - 1);
                    if (*(llvm::BasicBlock **)&v146[8 * v130[15] + 2 * v145] == v123)
                      break;
                    if (v144 == ++v145)
                      goto LABEL_282;
                  }
                }
                else
                {
LABEL_282:
                  LODWORD(v145) = -1;
                }
                llvm::PHINode::removeIncomingValue((llvm::PHINode *)v130, v145, 1);
                v147 = v130[5];
                v148 = v147 & 0x7FFFFFF;
                if ((v147 & 0x7FFFFFF) != 0)
                {
                  v149 = 0;
                  while (1)
                  {
                    v150 = &v130[-8 * v148];
                    if ((v147 & 0x40000000) != 0)
                      v150 = (_DWORD *)*((_QWORD *)v130 - 1);
                    if (*(_QWORD *)&v150[8 * v130[15] + 2 * v149] == v117)
                      break;
                    if (v148 == ++v149)
                      goto LABEL_289;
                  }
                }
                else
                {
LABEL_289:
                  LODWORD(v149) = -1;
                }
                llvm::PHINode::removeIncomingValue((llvm::PHINode *)v130, v149, 1);
                sub_1C477667C((llvm::PHINode *)v130, (uint64_t)Select, v117);
              }
            }
            v151 = v237;
            if (v237 >= (unint64_t)HIDWORD(v237))
            {
              llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v236, (uint64_t)v238, v237 + 1, 8);
              v151 = v237;
            }
            v152 = ((v115 >> 1) & 0x3FFFFFF) - 1;
            *((_QWORD *)v236 + v151) = v117;
            LODWORD(v237) = v237 + 1;
            v153 = ((v115 >> 1) & 0x3FFFFFF) != 1;
            if (v153 != v152)
            {
              v158 = 2 * v153 + 2;
              do
              {
                v159 = *(_DWORD *)(v98 + 20);
                if ((v159 & 0x40000000) != 0)
                  v160 = *(_QWORD *)(v98 - 8);
                else
                  v160 = v98 - 32 * (v159 & 0x7FFFFFF);
                v161 = (v158 + 1);
                if ((_DWORD)v153 == -2)
                  v161 = 1;
                if ((v159 & 0x40000000) != 0)
                  v162 = *(_QWORD *)(v98 - 8);
                else
                  v162 = v98 - 32 * (v159 & 0x7FFFFFF);
                v163 = 0;
                v164 = *(llvm::BasicBlock **)(v160 + 32 * v161);
                v165 = *(_QWORD *)(v162 + 32 * (v158 & 0xFFFFFFFE));
                v166 = *((_QWORD *)v164 + 5);
                if (v166)
                  v167 = v166 - 24;
                else
                  v167 = 0;
                if (*(unsigned __int8 *)(v167 + 16) - 29 >= 0xB)
                  v167 = 0;
                v247 = *(_QWORD *)(v167 + 40);
                v248 = v167 + 24;
                v168 = *(unsigned __int8 **)(v167 + 48);
                v227[0] = v168;
                if (v168)
                {
                  llvm::MetadataTracking::track((uint64_t)v227, v168, 2);
                  v163 = v227[0];
                }
                sub_1C4774EF4((uint64_t)&v242, 0, (uint64_t)v163);
                if (v227[0])
                  llvm::MetadataTracking::untrack((uint64_t)v227, v227[0]);
                v227[0] = "switchcmp";
                v228 = 259;
                v169 = sub_1C4774B48((uint64_t)&v242, 32, v225, v165, (uint64_t)v227);
                sub_1C55C4780(v117, v164, v169, (uint64_t)v121, v122, 1);
                llvm::BasicBlock::removePredecessor(v164, v123, 0);
                v170 = v237;
                if (v237 >= (unint64_t)HIDWORD(v237))
                {
                  llvm::SmallVectorBase<unsigned int>::grow_pod((uint64_t)&v236, (uint64_t)v238, v237 + 1, 8);
                  v170 = v237;
                }
                *((_QWORD *)v236 + v170) = v164;
                LODWORD(v237) = v237 + 1;
                ++v153;
                v158 += 2;
              }
              while (v152 != v153);
            }
            if (v242 != &v244)
              free(v242);
            v155 = *(_QWORD *)v230;
            v154 = *((_QWORD *)v230 + 1);
            v156 = *(_DWORD *)(*(_QWORD *)v230 + 20);
            if ((v156 & 0x40000000) != 0)
              v157 = *(_QWORD *)(v155 - 8);
            else
              v157 = v155 - 32 * (v156 & 0x7FFFFFF);
            if ((_DWORD)v154 == -2)
              v171 = 1;
            else
              v171 = (2 * v154 + 3);
            v172 = *(uint64_t **)(v157 + 32 * v171);
            sub_1C4773D54((uint64_t)&v242, v98, 0, 0, 0);
            v173 = (char *)operator new(0x60uLL);
            v174 = v173;
            *((_DWORD *)v173 + 13) = *((_DWORD *)v173 + 13) & 0x38000000 | 1;
            *(_QWORD *)v173 = 0;
            *((_QWORD *)v173 + 2) = 0;
            *((_QWORD *)v173 + 1) = 0;
            *((_QWORD *)v173 + 4) = **(_QWORD **)*v172 + 1576;
            v175 = (llvm::Value *)(v173 + 32);
            *((_QWORD *)v173 + 3) = v173 + 32;
            *((_QWORD *)v173 + 5) = 0;
            v173[48] = 30;
            v173[49] = 0;
            *((_WORD *)v173 + 25) = 0;
            *((_DWORD *)v173 + 13) = 1;
            *(_OWORD *)(v173 + 56) = 0u;
            *(_OWORD *)(v173 + 72) = 0u;
            *((_DWORD *)v173 + 22) = 0;
            *(_QWORD *)v173 = v172;
            v176 = v172 + 1;
            v177 = v172[1];
            *((_QWORD *)v173 + 1) = v177;
            if (v177)
              *(_QWORD *)(v177 + 16) = v173 + 8;
            *((_QWORD *)v173 + 2) = v176;
            *v176 = v173;
            v228 = 257;
            (*(void (**)(uint64_t, llvm::Value *, unsigned __int8 **, uint64_t, uint64_t))(*(_QWORD *)v249 + 16))(v249, v175, v227, v247, v248);
            if (!(_DWORD)v243)
            {
LABEL_343:
              llvm::SymbolTableListTraits<llvm::Instruction>::removeNodeFromList(*(_QWORD *)(v98 + 40) + 40, (uint64_t ***)v98);
              v185 = *(_QWORD *)(v98 + 24);
              v186 = *(_QWORD **)(v98 + 32);
              *v186 = v185;
              *(_QWORD *)(v185 + 8) = v186;
              *(_QWORD *)(v98 + 24) = 0;
              *(_QWORD *)(v98 + 32) = 0;
              llvm::Value::deleteValue((llvm::Value *)v98);
              if ((_DWORD)v237)
              {
                v187 = (llvm **)v236;
                v188 = (llvm **)((char *)v236 + 8 * v237);
                do
                {
                  v189 = *((_QWORD *)*v187 + 1);
                  if (v189)
                  {
                    while (1)
                    {
                      v190 = *(_QWORD *)(v189 + 24);
                      v191 = *(unsigned __int8 *)(v190 + 16);
                      v192 = v190 && v191 >= 0x1C;
                      if (v192 && v191 - 29 < 0xB)
                        break;
                      v189 = *(_QWORD *)(v189 + 8);
                      if (!v189)
                        goto LABEL_355;
                    }
                  }
                  else
                  {
LABEL_355:
                    llvm::DeleteDeadBlock(*v187, 0, 0);
                  }
                  ++v187;
                }
                while (v187 != v188);
              }
              if ((sub_1C55C39E0((llvm::BasicBlock *)v172) & 1) != 0)
                sub_1C55C4E98(v172);
              llvm::SimplifyInstructionsInBlock(v172, 0, v194, v195, v196, v197);
              if (sub_1C55C39E0((llvm::BasicBlock *)v218))
                sub_1C55C4E98(v218);
              llvm::SimplifyInstructionsInBlock(v218, 0, v198, v199, v200, v201);
              if (v242 != &v244)
                free(v242);
              v89 = 1;
              goto LABEL_364;
            }
            v178 = (char *)v242;
            v179 = (char *)v242 + 16 * v243;
            v180 = (unsigned __int8 **)(v174 + 80);
            while (2)
            {
              v181 = *(_DWORD *)v178;
              v182 = (unsigned __int8 *)*((_QWORD *)v178 + 1);
              if (v182)
              {
                if (v181)
                  goto LABEL_337;
                v229 = (unsigned __int8 *)*((_QWORD *)v178 + 1);
                llvm::MetadataTracking::track((uint64_t)&v229, v182, 2);
                v183 = *v180;
                if (*v180)
LABEL_335:
                  llvm::MetadataTracking::untrack((uint64_t)(v174 + 80), v183);
LABEL_341:
                v184 = v229;
                *v180 = v229;
                if (v184)
                  llvm::MetadataTracking::retrack((uint64_t)&v229, v184, (uint64_t)(v174 + 80));
              }
              else
              {
                v183 = *v180;
                if (*v180 || (v174[55] & 0x20) != 0)
                {
                  if (!v181)
                  {
                    v229 = 0;
                    if (v183)
                      goto LABEL_335;
                    goto LABEL_341;
                  }
LABEL_337:
                  llvm::Value::setMetadata(v175, *(_DWORD *)v178, (llvm::MDNode *)v182);
                }
              }
              v178 += 16;
              if (v178 == v179)
                goto LABEL_343;
              continue;
            }
          }
        }
      }
LABEL_177:
      if (!llvm::BasicBlock::getSinglePredecessor((llvm::BasicBlock *)v10))
        goto LABEL_237;
      v83 = (_QWORD *)*v15;
      if ((_QWORD *)*v15 == v15)
      {
        v84 = 0;
      }
      else
      {
        if (v83)
          v84 = v83 - 3;
        else
          v84 = 0;
        if (*((unsigned __int8 *)v84 + 16) - 29 >= 0xB)
          v84 = 0;
      }
      v85 = *((unsigned __int8 *)v84 + 16);
      if (v85 != 30)
        __asm { BR              X10 }
      if ((*((_DWORD *)v84 + 5) & 0x7FFFFFF) == 3
        || (v86 = *(_DWORD *)(v219 + 32), v86 <= sub_1C55C4634(v219, (uint64_t)v10, v86))
        || (v87 = llvm::BasicBlock::getSinglePredecessor((llvm::BasicBlock *)v10),
            v88 = *(_QWORD *)(v87 + 40),
            v88 == v87 + 40))
      {
LABEL_237:
        v89 = 0;
      }
      else
      {
        v89 = 0;
        if (v88)
          v90 = v88 - 24;
        else
          v90 = 0;
        v91 = *(unsigned __int8 *)(v90 + 16) - 40;
        if (v91 >= 0xFFFFFFF5)
          v92 = v90;
        else
          v92 = 0;
        if (v88)
        {
          if (*(_BYTE *)(v92 + 16) == 30 && v91 >= 0xFFFFFFF5)
          {
            v94 = (llvm::Value *)v87;
            v95 = (_QWORD *)*v15;
            if ((_QWORD *)*v15 == v15)
            {
              v97 = 0;
            }
            else
            {
              if (v95)
                v96 = (unsigned __int8 *)(v95 - 3);
              else
                v96 = 0;
              if (v96[16] - 29 >= 0xB)
                v97 = 0;
              else
                v97 = (llvm::Instruction *)v96;
            }
            Successor = (_QWORD *)llvm::Instruction::getSuccessor(v97, 0);
            v203 = *(_QWORD **)(v92 - 64);
            v204 = v203 == v10;
            v205 = v203 != v10;
            v242 = &v244;
            v243 = (void *)0x800000000;
            sub_1C55C46D8(Successor, (uint64_t)&v242);
            sub_1C55C4780((uint64_t)v94, v10, *(_QWORD *)(v92 - 96), (uint64_t)v242, v243, v205);
            v206 = llvm::Instruction::getSuccessor(v97, 0);
            sub_1C53E1B14(v92, v204, v206);
            llvm::Value::doRAUW((llvm::ValueAsMetadata *)v10, v94, (llvm::Value *)1);
            llvm::BasicBlock::eraseFromParent((llvm::BasicBlock *)v10);
            if (v242 != &v244)
              free(v242);
            v89 = 1;
          }
        }
      }
      goto LABEL_238;
    }
    v54 = *(_DWORD *)(v219 + 28);
    v55 = sub_1C55C4634(v219, (uint64_t)v20, v54);
    v19 = v54 >= v55;
    v56 = v54 - v55;
    v3 = v222;
    v41 = v226;
    if (v56 != 0 && v19 && sub_1C55C4634(v219, (uint64_t)v50, v56) < v56)
    {
      v208 = v20;
      v209 = v50;
LABEL_379:
      v207 = 0;
LABEL_381:
      sub_1C55C40B0(v208, v209, v207);
      goto LABEL_375;
    }
LABEL_241:
    v8 = *(_QWORD *)(v41 + 8);
  }
  while (v8 != v3);
  v9 = v220;
  return v9 & 1;
}

